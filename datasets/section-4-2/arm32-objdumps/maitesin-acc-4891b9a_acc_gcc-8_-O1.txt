
../repos/maitesin-acc-4891b9a/bin/acc:     file format elf32-littlearm


Disassembly of section .init:

0001192c <.init>:
   1192c:	push	{r3, lr}
   11930:	bl	11b44 <_start@@Base+0x3c>
   11934:	pop	{r3, pc}

Disassembly of section .plt:

00011938 <fdopen@plt-0x14>:
   11938:	push	{lr}		; (str lr, [sp, #-4]!)
   1193c:	ldr	lr, [pc, #4]	; 11948 <fdopen@plt-0x4>
   11940:	add	lr, pc, lr
   11944:	ldr	pc, [lr, #8]!
   11948:			; <UNDEFINED> instruction: 0x000186b8

0001194c <fdopen@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #24, 20	; 0x18000
   11954:	ldr	pc, [ip, #1720]!	; 0x6b8

00011958 <raise@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #24, 20	; 0x18000
   11960:	ldr	pc, [ip, #1712]!	; 0x6b0

00011964 <setbuf@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #24, 20	; 0x18000
   1196c:	ldr	pc, [ip, #1704]!	; 0x6a8

00011970 <strtol@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #24, 20	; 0x18000
   11978:	ldr	pc, [ip, #1696]!	; 0x6a0

0001197c <fopen@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #24, 20	; 0x18000
   11984:	ldr	pc, [ip, #1688]!	; 0x698

00011988 <free@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #24, 20	; 0x18000
   11990:	ldr	pc, [ip, #1680]!	; 0x690

00011994 <memcpy@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #24, 20	; 0x18000
   1199c:	ldr	pc, [ip, #1672]!	; 0x688

000119a0 <ftell@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #24, 20	; 0x18000
   119a8:	ldr	pc, [ip, #1664]!	; 0x680

000119ac <fwrite@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #24, 20	; 0x18000
   119b4:	ldr	pc, [ip, #1656]!	; 0x678

000119b8 <strcpy@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #24, 20	; 0x18000
   119c0:	ldr	pc, [ip, #1648]!	; 0x670

000119c4 <fread@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #24, 20	; 0x18000
   119cc:	ldr	pc, [ip, #1640]!	; 0x668

000119d0 <open64@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #24, 20	; 0x18000
   119d8:	ldr	pc, [ip, #1632]!	; 0x660

000119dc <getenv@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #24, 20	; 0x18000
   119e4:	ldr	pc, [ip, #1624]!	; 0x658

000119e8 <malloc@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #24, 20	; 0x18000
   119f0:	ldr	pc, [ip, #1616]!	; 0x650

000119f4 <__libc_start_main@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #24, 20	; 0x18000
   119fc:	ldr	pc, [ip, #1608]!	; 0x648

00011a00 <__gmon_start__@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #24, 20	; 0x18000
   11a08:	ldr	pc, [ip, #1600]!	; 0x640

00011a0c <getpid@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #24, 20	; 0x18000
   11a14:	ldr	pc, [ip, #1592]!	; 0x638

00011a18 <exit@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #24, 20	; 0x18000
   11a20:	ldr	pc, [ip, #1584]!	; 0x630

00011a24 <strlen@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #24, 20	; 0x18000
   11a2c:	ldr	pc, [ip, #1576]!	; 0x628

00011a30 <getopt@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #24, 20	; 0x18000
   11a38:	ldr	pc, [ip, #1568]!	; 0x620

00011a3c <fprintf@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #24, 20	; 0x18000
   11a44:	ldr	pc, [ip, #1560]!	; 0x618

00011a48 <__errno_location@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #24, 20	; 0x18000
   11a50:	ldr	pc, [ip, #1552]!	; 0x610

00011a54 <mkdir@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #24, 20	; 0x18000
   11a5c:	ldr	pc, [ip, #1544]!	; 0x608

00011a60 <memset@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #24, 20	; 0x18000
   11a68:	ldr	pc, [ip, #1536]!	; 0x600

00011a6c <strncpy@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #24, 20	; 0x18000
   11a74:	ldr	pc, [ip, #1528]!	; 0x5f8

00011a78 <access@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #24, 20	; 0x18000
   11a80:	ldr	pc, [ip, #1520]!	; 0x5f0

00011a84 <fclose@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #24, 20	; 0x18000
   11a8c:	ldr	pc, [ip, #1512]!	; 0x5e8

00011a90 <strnlen@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #24, 20	; 0x18000
   11a98:	ldr	pc, [ip, #1504]!	; 0x5e0

00011a9c <fcntl64@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #24, 20	; 0x18000
   11aa4:	ldr	pc, [ip, #1496]!	; 0x5d8

00011aa8 <vfprintf@plt>:
   11aa8:	add	ip, pc, #0, 12
   11aac:	add	ip, ip, #24, 20	; 0x18000
   11ab0:	ldr	pc, [ip, #1488]!	; 0x5d0

00011ab4 <fputc@plt>:
   11ab4:	add	ip, pc, #0, 12
   11ab8:	add	ip, ip, #24, 20	; 0x18000
   11abc:	ldr	pc, [ip, #1480]!	; 0x5c8

00011ac0 <atoi@plt>:
   11ac0:	add	ip, pc, #0, 12
   11ac4:	add	ip, ip, #24, 20	; 0x18000
   11ac8:	ldr	pc, [ip, #1472]!	; 0x5c0

00011acc <fopen64@plt>:
   11acc:	add	ip, pc, #0, 12
   11ad0:	add	ip, ip, #24, 20	; 0x18000
   11ad4:	ldr	pc, [ip, #1464]!	; 0x5b8

00011ad8 <fseek@plt>:
   11ad8:	add	ip, pc, #0, 12
   11adc:	add	ip, ip, #24, 20	; 0x18000
   11ae0:	ldr	pc, [ip, #1456]!	; 0x5b0

00011ae4 <strncmp@plt>:
   11ae4:	add	ip, pc, #0, 12
   11ae8:	add	ip, ip, #24, 20	; 0x18000
   11aec:	ldr	pc, [ip, #1448]!	; 0x5a8

00011af0 <abort@plt>:
   11af0:	add	ip, pc, #0, 12
   11af4:	add	ip, ip, #24, 20	; 0x18000
   11af8:	ldr	pc, [ip, #1440]!	; 0x5a0

00011afc <close@plt>:
   11afc:	add	ip, pc, #0, 12
   11b00:	add	ip, ip, #24, 20	; 0x18000
   11b04:	ldr	pc, [ip, #1432]!	; 0x598

Disassembly of section .text:

00011b08 <_start@@Base>:
   11b08:	mov	fp, #0
   11b0c:	mov	lr, #0
   11b10:	pop	{r1}		; (ldr r1, [sp], #4)
   11b14:	mov	r2, sp
   11b18:	push	{r2}		; (str r2, [sp, #-4]!)
   11b1c:	push	{r0}		; (str r0, [sp, #-4]!)
   11b20:	ldr	ip, [pc, #16]	; 11b38 <_start@@Base+0x30>
   11b24:	push	{ip}		; (str ip, [sp, #-4]!)
   11b28:	ldr	r0, [pc, #12]	; 11b3c <_start@@Base+0x34>
   11b2c:	ldr	r3, [pc, #12]	; 11b40 <_start@@Base+0x38>
   11b30:	bl	119f4 <__libc_start_main@plt>
   11b34:	bl	11af0 <abort@plt>
   11b38:	andeq	r8, r1, r8, lsr #27
   11b3c:	andeq	r2, r1, r4, asr r0
   11b40:	andeq	r8, r1, r8, asr #26
   11b44:	ldr	r3, [pc, #20]	; 11b60 <_start@@Base+0x58>
   11b48:	ldr	r2, [pc, #20]	; 11b64 <_start@@Base+0x5c>
   11b4c:	add	r3, pc, r3
   11b50:	ldr	r2, [r3, r2]
   11b54:	cmp	r2, #0
   11b58:	bxeq	lr
   11b5c:	b	11a00 <__gmon_start__@plt>
   11b60:	andeq	r8, r1, ip, lsr #9
   11b64:	andeq	r0, r0, r4, lsr #1
   11b68:	ldr	r0, [pc, #24]	; 11b88 <_start@@Base+0x80>
   11b6c:	ldr	r3, [pc, #24]	; 11b8c <_start@@Base+0x84>
   11b70:	cmp	r3, r0
   11b74:	bxeq	lr
   11b78:	ldr	r3, [pc, #16]	; 11b90 <_start@@Base+0x88>
   11b7c:	cmp	r3, #0
   11b80:	bxeq	lr
   11b84:	bx	r3
   11b88:	muleq	r2, r8, sl
   11b8c:	muleq	r2, r8, sl
   11b90:	andeq	r0, r0, r0
   11b94:	ldr	r0, [pc, #36]	; 11bc0 <_start@@Base+0xb8>
   11b98:	ldr	r1, [pc, #36]	; 11bc4 <_start@@Base+0xbc>
   11b9c:	sub	r1, r1, r0
   11ba0:	asr	r1, r1, #2
   11ba4:	add	r1, r1, r1, lsr #31
   11ba8:	asrs	r1, r1, #1
   11bac:	bxeq	lr
   11bb0:	ldr	r3, [pc, #16]	; 11bc8 <_start@@Base+0xc0>
   11bb4:	cmp	r3, #0
   11bb8:	bxeq	lr
   11bbc:	bx	r3
   11bc0:	muleq	r2, r8, sl
   11bc4:	muleq	r2, r8, sl
   11bc8:	andeq	r0, r0, r0
   11bcc:	push	{r4, lr}
   11bd0:	ldr	r4, [pc, #24]	; 11bf0 <_start@@Base+0xe8>
   11bd4:	ldrb	r3, [r4]
   11bd8:	cmp	r3, #0
   11bdc:	popne	{r4, pc}
   11be0:	bl	11b68 <_start@@Base+0x60>
   11be4:	mov	r3, #1
   11be8:	strb	r3, [r4]
   11bec:	pop	{r4, pc}
   11bf0:	andeq	sl, r2, ip, lsr #21
   11bf4:	b	11b94 <_start@@Base+0x8c>

00011bf8 <load_file@@Base>:
   11bf8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11bfc:	strd	r6, [sp, #8]
   11c00:	str	r8, [sp, #16]
   11c04:	str	lr, [sp, #20]
   11c08:	mov	r5, r0
   11c0c:	movw	r3, #43696	; 0xaab0
   11c10:	movt	r3, #2
   11c14:	ldr	r2, [r3]
   11c18:	ldr	r1, [r3, #4]
   11c1c:	adds	r2, r2, #1
   11c20:	adc	r1, r1, #0
   11c24:	str	r2, [r3]
   11c28:	str	r1, [r3, #4]
   11c2c:	movw	r1, #38104	; 0x94d8
   11c30:	movt	r1, #1
   11c34:	bl	1197c <fopen@plt>
   11c38:	subs	r6, r0, #0
   11c3c:	beq	11d68 <load_file@@Base+0x170>
   11c40:	movw	r4, #43696	; 0xaab0
   11c44:	movt	r4, #2
   11c48:	ldr	r3, [r4, #8]
   11c4c:	ldr	r2, [r4, #12]
   11c50:	adds	r3, r3, #1
   11c54:	adc	r2, r2, #0
   11c58:	str	r3, [r4, #8]
   11c5c:	str	r2, [r4, #12]
   11c60:	mov	r2, #2
   11c64:	mov	r1, #0
   11c68:	mov	r0, r6
   11c6c:	bl	11ad8 <fseek@plt>
   11c70:	ldr	r3, [r4, #24]
   11c74:	ldr	r2, [r4, #28]
   11c78:	adds	r3, r3, #1
   11c7c:	adc	r2, r2, #0
   11c80:	str	r3, [r4, #24]
   11c84:	str	r2, [r4, #28]
   11c88:	cmp	r0, #0
   11c8c:	bne	11eac <load_file@@Base+0x2b4>
   11c90:	ldr	r2, [r4, #32]
   11c94:	ldr	r1, [r4, #36]	; 0x24
   11c98:	adds	r2, r2, #1
   11c9c:	adc	r1, r1, #0
   11ca0:	str	r2, [r4, #32]
   11ca4:	str	r1, [r4, #36]	; 0x24
   11ca8:	mov	r0, r6
   11cac:	bl	119a0 <ftell@plt>
   11cb0:	mov	r7, r0
   11cb4:	cmn	r0, #1
   11cb8:	beq	11d90 <load_file@@Base+0x198>
   11cbc:	movw	r3, #43696	; 0xaab0
   11cc0:	movt	r3, #2
   11cc4:	ldr	r2, [r3, #48]	; 0x30
   11cc8:	ldr	r1, [r3, #52]	; 0x34
   11ccc:	adds	r2, r2, #1
   11cd0:	adc	r1, r1, #0
   11cd4:	str	r2, [r3, #48]	; 0x30
   11cd8:	str	r1, [r3, #52]	; 0x34
   11cdc:	add	r0, r0, #1
   11ce0:	bl	119e8 <malloc@plt>
   11ce4:	mov	r4, r0
   11ce8:	mov	r2, #0
   11cec:	mov	r1, r2
   11cf0:	mov	r0, r6
   11cf4:	bl	11ad8 <fseek@plt>
   11cf8:	cmp	r0, #0
   11cfc:	bne	11df0 <load_file@@Base+0x1f8>
   11d00:	movw	r3, #43696	; 0xaab0
   11d04:	movt	r3, #2
   11d08:	ldr	r2, [r3, #72]	; 0x48
   11d0c:	ldr	r1, [r3, #76]	; 0x4c
   11d10:	adds	r2, r2, #1
   11d14:	adc	r1, r1, #0
   11d18:	str	r2, [r3, #72]	; 0x48
   11d1c:	str	r1, [r3, #76]	; 0x4c
   11d20:	mov	r3, r6
   11d24:	mov	r2, r7
   11d28:	mov	r1, #1
   11d2c:	mov	r0, r4
   11d30:	bl	119c4 <fread@plt>
   11d34:	cmp	r0, #0
   11d38:	beq	11e50 <load_file@@Base+0x258>
   11d3c:	mov	r3, #0
   11d40:	strb	r3, [r4, r0]
   11d44:	movw	r3, #43696	; 0xaab0
   11d48:	movt	r3, #2
   11d4c:	ldr	r2, [r3, #104]	; 0x68
   11d50:	ldr	r1, [r3, #108]	; 0x6c
   11d54:	adds	r2, r2, #1
   11d58:	adc	r1, r1, #0
   11d5c:	str	r2, [r3, #104]	; 0x68
   11d60:	str	r1, [r3, #108]	; 0x6c
   11d64:	b	11eb0 <load_file@@Base+0x2b8>
   11d68:	movw	r3, #43696	; 0xaab0
   11d6c:	movt	r3, #2
   11d70:	ldr	r2, [r3, #16]
   11d74:	ldr	r1, [r3, #20]
   11d78:	adds	r2, r2, #1
   11d7c:	adc	r1, r1, #0
   11d80:	str	r2, [r3, #16]
   11d84:	str	r1, [r3, #20]
   11d88:	mov	r4, r6
   11d8c:	b	11ed8 <load_file@@Base+0x2e0>
   11d90:	movw	r4, #43696	; 0xaab0
   11d94:	movt	r4, #2
   11d98:	ldr	r3, [r4, #40]	; 0x28
   11d9c:	ldr	r2, [r4, #44]	; 0x2c
   11da0:	adds	r3, r3, #1
   11da4:	adc	r2, r2, #0
   11da8:	str	r3, [r4, #40]	; 0x28
   11dac:	str	r2, [r4, #44]	; 0x2c
   11db0:	movw	r3, #43680	; 0xaaa0
   11db4:	movt	r3, #2
   11db8:	ldr	r3, [r3]
   11dbc:	mov	r2, #51	; 0x33
   11dc0:	mov	r1, #1
   11dc4:	movw	r0, #36280	; 0x8db8
   11dc8:	movt	r0, #1
   11dcc:	bl	119ac <fwrite@plt>
   11dd0:	ldr	r3, [r4, #56]	; 0x38
   11dd4:	ldr	r2, [r4, #60]	; 0x3c
   11dd8:	adds	r3, r3, #1
   11ddc:	adc	r2, r2, #0
   11de0:	str	r3, [r4, #56]	; 0x38
   11de4:	str	r2, [r4, #60]	; 0x3c
   11de8:	mov	r0, #1
   11dec:	bl	11a18 <exit@plt>
   11df0:	movw	r4, #43696	; 0xaab0
   11df4:	movt	r4, #2
   11df8:	ldr	r3, [r4, #64]	; 0x40
   11dfc:	ldr	r2, [r4, #68]	; 0x44
   11e00:	adds	r3, r3, #1
   11e04:	adc	r2, r2, #0
   11e08:	str	r3, [r4, #64]	; 0x40
   11e0c:	str	r2, [r4, #68]	; 0x44
   11e10:	movw	r3, #43680	; 0xaaa0
   11e14:	movt	r3, #2
   11e18:	ldr	r3, [r3]
   11e1c:	mov	r2, #49	; 0x31
   11e20:	mov	r1, #1
   11e24:	movw	r0, #36332	; 0x8dec
   11e28:	movt	r0, #1
   11e2c:	bl	119ac <fwrite@plt>
   11e30:	ldr	r3, [r4, #80]	; 0x50
   11e34:	ldr	r2, [r4, #84]	; 0x54
   11e38:	adds	r3, r3, #1
   11e3c:	adc	r2, r2, #0
   11e40:	str	r3, [r4, #80]	; 0x50
   11e44:	str	r2, [r4, #84]	; 0x54
   11e48:	mov	r0, #1
   11e4c:	bl	11a18 <exit@plt>
   11e50:	movw	r4, #43696	; 0xaab0
   11e54:	movt	r4, #2
   11e58:	ldr	r3, [r4, #88]	; 0x58
   11e5c:	ldr	r2, [r4, #92]	; 0x5c
   11e60:	adds	r3, r3, #1
   11e64:	adc	r2, r2, #0
   11e68:	str	r3, [r4, #88]	; 0x58
   11e6c:	str	r2, [r4, #92]	; 0x5c
   11e70:	movw	r3, #43680	; 0xaaa0
   11e74:	movt	r3, #2
   11e78:	mov	r2, r5
   11e7c:	movw	r1, #36384	; 0x8e20
   11e80:	movt	r1, #1
   11e84:	ldr	r0, [r3]
   11e88:	bl	11a3c <fprintf@plt>
   11e8c:	ldr	r3, [r4, #96]	; 0x60
   11e90:	ldr	r2, [r4, #100]	; 0x64
   11e94:	adds	r3, r3, #1
   11e98:	adc	r2, r2, #0
   11e9c:	str	r3, [r4, #96]	; 0x60
   11ea0:	str	r2, [r4, #100]	; 0x64
   11ea4:	mov	r0, #1
   11ea8:	bl	11a18 <exit@plt>
   11eac:	mov	r4, #0
   11eb0:	mov	r0, r6
   11eb4:	bl	11a84 <fclose@plt>
   11eb8:	movw	r3, #43696	; 0xaab0
   11ebc:	movt	r3, #2
   11ec0:	ldr	r2, [r3, #112]	; 0x70
   11ec4:	ldr	r1, [r3, #116]	; 0x74
   11ec8:	adds	r2, r2, #1
   11ecc:	adc	r1, r1, #0
   11ed0:	str	r2, [r3, #112]	; 0x70
   11ed4:	str	r1, [r3, #116]	; 0x74
   11ed8:	mov	r0, r4
   11edc:	ldrd	r4, [sp]
   11ee0:	ldrd	r6, [sp, #8]
   11ee4:	ldr	r8, [sp, #16]
   11ee8:	add	sp, sp, #20
   11eec:	pop	{pc}		; (ldr pc, [sp], #4)

00011ef0 <my_main@@Base>:
   11ef0:	strd	r4, [sp, #-16]!
   11ef4:	str	r6, [sp, #8]
   11ef8:	str	lr, [sp, #12]
   11efc:	sub	sp, sp, #32
   11f00:	mov	r6, r1
   11f04:	movw	r4, #43696	; 0xaab0
   11f08:	movt	r4, #2
   11f0c:	ldr	r3, [r4, #120]	; 0x78
   11f10:	ldr	r2, [r4, #124]	; 0x7c
   11f14:	adds	r3, r3, #1
   11f18:	adc	r2, r2, #0
   11f1c:	str	r3, [r4, #120]	; 0x78
   11f20:	str	r2, [r4, #124]	; 0x7c
   11f24:	bl	11bf8 <load_file@@Base>
   11f28:	mov	r5, r0
   11f2c:	ldr	r3, [r4, #128]	; 0x80
   11f30:	ldr	r2, [r4, #132]	; 0x84
   11f34:	adds	r3, r3, #1
   11f38:	adc	r2, r2, #0
   11f3c:	str	r3, [r4, #128]	; 0x80
   11f40:	str	r2, [r4, #132]	; 0x84
   11f44:	mov	r1, r0
   11f48:	add	r0, sp, #20
   11f4c:	bl	127dc <init_lexer@@Base>
   11f50:	ldr	r3, [r4, #136]	; 0x88
   11f54:	ldr	r2, [r4, #140]	; 0x8c
   11f58:	adds	r3, r3, #1
   11f5c:	adc	r2, r2, #0
   11f60:	str	r3, [r4, #136]	; 0x88
   11f64:	str	r2, [r4, #140]	; 0x8c
   11f68:	add	r1, sp, #20
   11f6c:	add	r0, sp, #16
   11f70:	bl	14a0c <init_grammar@@Base>
   11f74:	ldr	r3, [r4, #144]	; 0x90
   11f78:	ldr	r2, [r4, #148]	; 0x94
   11f7c:	adds	r3, r3, #1
   11f80:	adc	r2, r2, #0
   11f84:	str	r3, [r4, #144]	; 0x90
   11f88:	str	r2, [r4, #148]	; 0x94
   11f8c:	mov	r2, r6
   11f90:	add	r1, sp, #16
   11f94:	mov	r0, sp
   11f98:	bl	15c24 <init_generator@@Base>
   11f9c:	ldr	r3, [r4, #152]	; 0x98
   11fa0:	ldr	r2, [r4, #156]	; 0x9c
   11fa4:	adds	r3, r3, #1
   11fa8:	adc	r2, r2, #0
   11fac:	str	r3, [r4, #152]	; 0x98
   11fb0:	str	r2, [r4, #156]	; 0x9c
   11fb4:	mov	r0, sp
   11fb8:	bl	16930 <generate_code@@Base>
   11fbc:	ldr	r3, [r4, #160]	; 0xa0
   11fc0:	ldr	r2, [r4, #164]	; 0xa4
   11fc4:	adds	r3, r3, #1
   11fc8:	adc	r2, r2, #0
   11fcc:	str	r3, [r4, #160]	; 0xa0
   11fd0:	str	r2, [r4, #164]	; 0xa4
   11fd4:	mov	r0, sp
   11fd8:	bl	15ca0 <destroy_generator@@Base>
   11fdc:	ldr	r3, [r4, #168]	; 0xa8
   11fe0:	ldr	r2, [r4, #172]	; 0xac
   11fe4:	adds	r3, r3, #1
   11fe8:	adc	r2, r2, #0
   11fec:	str	r3, [r4, #168]	; 0xa8
   11ff0:	str	r2, [r4, #172]	; 0xac
   11ff4:	add	r0, sp, #16
   11ff8:	bl	14a34 <destroy_grammar@@Base>
   11ffc:	ldr	r3, [r4, #176]	; 0xb0
   12000:	ldr	r2, [r4, #180]	; 0xb4
   12004:	adds	r3, r3, #1
   12008:	adc	r2, r2, #0
   1200c:	str	r3, [r4, #176]	; 0xb0
   12010:	str	r2, [r4, #180]	; 0xb4
   12014:	add	r0, sp, #20
   12018:	bl	12848 <destroy_lexer@@Base>
   1201c:	ldr	r3, [r4, #184]	; 0xb8
   12020:	ldr	r2, [r4, #188]	; 0xbc
   12024:	adds	r3, r3, #1
   12028:	adc	r2, r2, #0
   1202c:	str	r3, [r4, #184]	; 0xb8
   12030:	str	r2, [r4, #188]	; 0xbc
   12034:	mov	r0, r5
   12038:	bl	11988 <free@plt>
   1203c:	mov	r0, #0
   12040:	add	sp, sp, #32
   12044:	ldrd	r4, [sp]
   12048:	ldr	r6, [sp, #8]
   1204c:	add	sp, sp, #12
   12050:	pop	{pc}		; (ldr pc, [sp], #4)

00012054 <main@@Base>:
   12054:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12058:	strd	r6, [sp, #8]
   1205c:	strd	r8, [sp, #16]
   12060:	str	sl, [sp, #24]
   12064:	str	lr, [sp, #28]
   12068:	mov	r7, r0
   1206c:	mov	r6, r1
   12070:	movw	r3, #43696	; 0xaab0
   12074:	movt	r3, #2
   12078:	ldr	r2, [r3, #192]	; 0xc0
   1207c:	ldr	r1, [r3, #196]	; 0xc4
   12080:	adds	r2, r2, #1
   12084:	adc	r1, r1, #0
   12088:	str	r2, [r3, #192]	; 0xc0
   1208c:	str	r1, [r3, #196]	; 0xc4
   12090:	mov	r8, #0
   12094:	movw	r5, #36412	; 0x8e3c
   12098:	movt	r5, #1
   1209c:	mov	r4, r3
   120a0:	movw	r9, #43688	; 0xaaa8
   120a4:	movt	r9, #2
   120a8:	b	120c4 <main@@Base+0x70>
   120ac:	ldr	r3, [r4, #208]	; 0xd0
   120b0:	ldr	r2, [r4, #212]	; 0xd4
   120b4:	adds	r3, r3, #1
   120b8:	adc	r2, r2, #0
   120bc:	str	r3, [r4, #208]	; 0xd0
   120c0:	str	r2, [r4, #212]	; 0xd4
   120c4:	mov	r2, r5
   120c8:	mov	r1, r6
   120cc:	mov	r0, r7
   120d0:	bl	11a30 <getopt@plt>
   120d4:	cmn	r0, #1
   120d8:	beq	12104 <main@@Base+0xb0>
   120dc:	cmp	r0, #111	; 0x6f
   120e0:	bne	120ac <main@@Base+0x58>
   120e4:	ldr	r3, [r4, #200]	; 0xc8
   120e8:	ldr	r2, [r4, #204]	; 0xcc
   120ec:	adds	r3, r3, #1
   120f0:	adc	r2, r2, #0
   120f4:	str	r3, [r4, #200]	; 0xc8
   120f8:	str	r2, [r4, #204]	; 0xcc
   120fc:	ldr	r8, [r9]
   12100:	b	120ac <main@@Base+0x58>
   12104:	movw	r3, #43672	; 0xaa98
   12108:	movt	r3, #2
   1210c:	ldr	r0, [r3]
   12110:	cmp	r0, r7
   12114:	bge	121b0 <main@@Base+0x15c>
   12118:	movw	r3, #43696	; 0xaab0
   1211c:	movt	r3, #2
   12120:	ldr	r2, [r3, #216]	; 0xd8
   12124:	ldr	r1, [r3, #220]	; 0xdc
   12128:	adds	r2, r2, #1
   1212c:	adc	r1, r1, #0
   12130:	str	r2, [r3, #216]	; 0xd8
   12134:	str	r1, [r3, #220]	; 0xdc
   12138:	ldr	r0, [r6, r0, lsl #2]
   1213c:	cmp	r8, #0
   12140:	beq	12184 <main@@Base+0x130>
   12144:	mov	r1, r8
   12148:	bl	11ef0 <my_main@@Base>
   1214c:	movw	r3, #43696	; 0xaab0
   12150:	movt	r3, #2
   12154:	ldr	r2, [r3, #240]	; 0xf0
   12158:	ldr	r1, [r3, #244]	; 0xf4
   1215c:	adds	r2, r2, #1
   12160:	adc	r1, r1, #0
   12164:	str	r2, [r3, #240]	; 0xf0
   12168:	str	r1, [r3, #244]	; 0xf4
   1216c:	ldrd	r4, [sp]
   12170:	ldrd	r6, [sp, #8]
   12174:	ldrd	r8, [sp, #16]
   12178:	ldr	sl, [sp, #24]
   1217c:	add	sp, sp, #28
   12180:	pop	{pc}		; (ldr pc, [sp], #4)
   12184:	movw	r3, #43696	; 0xaab0
   12188:	movt	r3, #2
   1218c:	ldr	r2, [r3, #232]	; 0xe8
   12190:	ldr	r1, [r3, #236]	; 0xec
   12194:	adds	r2, r2, #1
   12198:	adc	r1, r1, #0
   1219c:	str	r2, [r3, #232]	; 0xe8
   121a0:	str	r1, [r3, #236]	; 0xec
   121a4:	movw	r8, #36408	; 0x8e38
   121a8:	movt	r8, #1
   121ac:	b	12144 <main@@Base+0xf0>
   121b0:	movw	r4, #43696	; 0xaab0
   121b4:	movt	r4, #2
   121b8:	ldr	r3, [r4, #224]	; 0xe0
   121bc:	ldr	r2, [r4, #228]	; 0xe4
   121c0:	adds	r3, r3, #1
   121c4:	adc	r2, r2, #0
   121c8:	str	r3, [r4, #224]	; 0xe0
   121cc:	str	r2, [r4, #228]	; 0xe4
   121d0:	movw	r3, #43680	; 0xaaa0
   121d4:	movt	r3, #2
   121d8:	ldr	r3, [r3]
   121dc:	mov	r2, #45	; 0x2d
   121e0:	mov	r1, #1
   121e4:	movw	r0, #36416	; 0x8e40
   121e8:	movt	r0, #1
   121ec:	bl	119ac <fwrite@plt>
   121f0:	ldr	r3, [r4, #248]	; 0xf8
   121f4:	ldr	r2, [r4, #252]	; 0xfc
   121f8:	adds	r3, r3, #1
   121fc:	adc	r2, r2, #0
   12200:	str	r3, [r4, #248]	; 0xf8
   12204:	str	r2, [r4, #252]	; 0xfc
   12208:	mov	r0, #1
   1220c:	bl	11a18 <exit@plt>
   12210:	str	r4, [sp, #-8]!
   12214:	str	lr, [sp, #4]
   12218:	movw	r0, #41148	; 0xa0bc
   1221c:	movt	r0, #2
   12220:	bl	18a30 <__gcov_sort_n_vals@@Base+0x4a0>
   12224:	ldr	r4, [sp]
   12228:	add	sp, sp, #4
   1222c:	pop	{pc}		; (ldr pc, [sp], #4)
   12230:	str	r4, [sp, #-8]!
   12234:	str	lr, [sp, #4]
   12238:	bl	189c0 <__gcov_sort_n_vals@@Base+0x430>
   1223c:	ldr	r4, [sp]
   12240:	add	sp, sp, #4
   12244:	pop	{pc}		; (ldr pc, [sp], #4)

00012248 <init_token_int_type@@Base>:
   12248:	movw	r3, #43952	; 0xabb0
   1224c:	movt	r3, #2
   12250:	ldr	r2, [r3]
   12254:	ldr	r1, [r3, #4]
   12258:	adds	r2, r2, #1
   1225c:	adc	r1, r1, #0
   12260:	str	r2, [r3]
   12264:	str	r1, [r3, #4]
   12268:	mov	r3, #0
   1226c:	str	r3, [r0]
   12270:	bx	lr

00012274 <init_token_int_value@@Base>:
   12274:	movw	r3, #43952	; 0xabb0
   12278:	movt	r3, #2
   1227c:	ldr	r2, [r3, #8]
   12280:	ldr	ip, [r3, #12]
   12284:	adds	r2, r2, #1
   12288:	adc	ip, ip, #0
   1228c:	str	r2, [r3, #8]
   12290:	str	ip, [r3, #12]
   12294:	mov	r3, #1
   12298:	str	r3, [r0]
   1229c:	str	r1, [r0, #4]
   122a0:	bx	lr

000122a4 <init_token_function@@Base>:
   122a4:	movw	r3, #43952	; 0xabb0
   122a8:	movt	r3, #2
   122ac:	ldr	r2, [r3, #16]
   122b0:	ldr	ip, [r3, #20]
   122b4:	adds	r2, r2, #1
   122b8:	adc	ip, ip, #0
   122bc:	str	r2, [r3, #16]
   122c0:	str	ip, [r3, #20]
   122c4:	mov	r3, #2
   122c8:	str	r3, [r0]
   122cc:	str	r1, [r0, #4]
   122d0:	bx	lr

000122d4 <init_token_opar@@Base>:
   122d4:	movw	r3, #43952	; 0xabb0
   122d8:	movt	r3, #2
   122dc:	ldr	r2, [r3, #24]
   122e0:	ldr	r1, [r3, #28]
   122e4:	adds	r2, r2, #1
   122e8:	adc	r1, r1, #0
   122ec:	str	r2, [r3, #24]
   122f0:	str	r1, [r3, #28]
   122f4:	mov	r3, #3
   122f8:	str	r3, [r0]
   122fc:	bx	lr

00012300 <init_token_cpar@@Base>:
   12300:	movw	r3, #43952	; 0xabb0
   12304:	movt	r3, #2
   12308:	ldr	r2, [r3, #32]
   1230c:	ldr	r1, [r3, #36]	; 0x24
   12310:	adds	r2, r2, #1
   12314:	adc	r1, r1, #0
   12318:	str	r2, [r3, #32]
   1231c:	str	r1, [r3, #36]	; 0x24
   12320:	mov	r3, #4
   12324:	str	r3, [r0]
   12328:	bx	lr

0001232c <init_token_obra@@Base>:
   1232c:	movw	r3, #43952	; 0xabb0
   12330:	movt	r3, #2
   12334:	ldr	r2, [r3, #40]	; 0x28
   12338:	ldr	r1, [r3, #44]	; 0x2c
   1233c:	adds	r2, r2, #1
   12340:	adc	r1, r1, #0
   12344:	str	r2, [r3, #40]	; 0x28
   12348:	str	r1, [r3, #44]	; 0x2c
   1234c:	mov	r3, #5
   12350:	str	r3, [r0]
   12354:	bx	lr

00012358 <init_token_cbra@@Base>:
   12358:	movw	r3, #43952	; 0xabb0
   1235c:	movt	r3, #2
   12360:	ldr	r2, [r3, #48]	; 0x30
   12364:	ldr	r1, [r3, #52]	; 0x34
   12368:	adds	r2, r2, #1
   1236c:	adc	r1, r1, #0
   12370:	str	r2, [r3, #48]	; 0x30
   12374:	str	r1, [r3, #52]	; 0x34
   12378:	mov	r3, #6
   1237c:	str	r3, [r0]
   12380:	bx	lr

00012384 <init_token_return@@Base>:
   12384:	movw	r3, #43952	; 0xabb0
   12388:	movt	r3, #2
   1238c:	ldr	r2, [r3, #56]	; 0x38
   12390:	ldr	r1, [r3, #60]	; 0x3c
   12394:	adds	r2, r2, #1
   12398:	adc	r1, r1, #0
   1239c:	str	r2, [r3, #56]	; 0x38
   123a0:	str	r1, [r3, #60]	; 0x3c
   123a4:	mov	r3, #7
   123a8:	str	r3, [r0]
   123ac:	bx	lr

000123b0 <init_token_semicolon@@Base>:
   123b0:	movw	r3, #43952	; 0xabb0
   123b4:	movt	r3, #2
   123b8:	ldr	r2, [r3, #64]	; 0x40
   123bc:	ldr	r1, [r3, #68]	; 0x44
   123c0:	adds	r2, r2, #1
   123c4:	adc	r1, r1, #0
   123c8:	str	r2, [r3, #64]	; 0x40
   123cc:	str	r1, [r3, #68]	; 0x44
   123d0:	mov	r3, #8
   123d4:	str	r3, [r0]
   123d8:	bx	lr

000123dc <init_token_eof@@Base>:
   123dc:	movw	r3, #43952	; 0xabb0
   123e0:	movt	r3, #2
   123e4:	ldr	r2, [r3, #72]	; 0x48
   123e8:	ldr	r1, [r3, #76]	; 0x4c
   123ec:	adds	r2, r2, #1
   123f0:	adc	r1, r1, #0
   123f4:	str	r2, [r3, #72]	; 0x48
   123f8:	str	r1, [r3, #76]	; 0x4c
   123fc:	mov	r3, #9
   12400:	str	r3, [r0]
   12404:	bx	lr

00012408 <init_token_if@@Base>:
   12408:	movw	r3, #43952	; 0xabb0
   1240c:	movt	r3, #2
   12410:	ldr	r2, [r3, #80]	; 0x50
   12414:	ldr	r1, [r3, #84]	; 0x54
   12418:	adds	r2, r2, #1
   1241c:	adc	r1, r1, #0
   12420:	str	r2, [r3, #80]	; 0x50
   12424:	str	r1, [r3, #84]	; 0x54
   12428:	mov	r3, #10
   1242c:	str	r3, [r0]
   12430:	bx	lr

00012434 <init_token_else@@Base>:
   12434:	movw	r3, #43952	; 0xabb0
   12438:	movt	r3, #2
   1243c:	ldr	r2, [r3, #88]	; 0x58
   12440:	ldr	r1, [r3, #92]	; 0x5c
   12444:	adds	r2, r2, #1
   12448:	adc	r1, r1, #0
   1244c:	str	r2, [r3, #88]	; 0x58
   12450:	str	r1, [r3, #92]	; 0x5c
   12454:	mov	r3, #11
   12458:	str	r3, [r0]
   1245c:	bx	lr

00012460 <init_token_boolean_op@@Base>:
   12460:	movw	r3, #43952	; 0xabb0
   12464:	movt	r3, #2
   12468:	ldr	r2, [r3, #96]	; 0x60
   1246c:	ldr	ip, [r3, #100]	; 0x64
   12470:	adds	r2, r2, #1
   12474:	adc	ip, ip, #0
   12478:	str	r2, [r3, #96]	; 0x60
   1247c:	str	ip, [r3, #100]	; 0x64
   12480:	mov	r3, #12
   12484:	str	r3, [r0]
   12488:	str	r1, [r0, #4]
   1248c:	bx	lr

00012490 <free_token_int_type@@Base>:
   12490:	str	r4, [sp, #-8]!
   12494:	str	lr, [sp, #4]
   12498:	movw	r3, #43952	; 0xabb0
   1249c:	movt	r3, #2
   124a0:	ldr	r2, [r3, #104]	; 0x68
   124a4:	ldr	r1, [r3, #108]	; 0x6c
   124a8:	adds	r2, r2, #1
   124ac:	adc	r1, r1, #0
   124b0:	str	r2, [r3, #104]	; 0x68
   124b4:	str	r1, [r3, #108]	; 0x6c
   124b8:	bl	11988 <free@plt>
   124bc:	ldr	r4, [sp]
   124c0:	add	sp, sp, #4
   124c4:	pop	{pc}		; (ldr pc, [sp], #4)

000124c8 <free_token_int_value@@Base>:
   124c8:	str	r4, [sp, #-8]!
   124cc:	str	lr, [sp, #4]
   124d0:	movw	r3, #43952	; 0xabb0
   124d4:	movt	r3, #2
   124d8:	ldr	r2, [r3, #112]	; 0x70
   124dc:	ldr	r1, [r3, #116]	; 0x74
   124e0:	adds	r2, r2, #1
   124e4:	adc	r1, r1, #0
   124e8:	str	r2, [r3, #112]	; 0x70
   124ec:	str	r1, [r3, #116]	; 0x74
   124f0:	bl	11988 <free@plt>
   124f4:	ldr	r4, [sp]
   124f8:	add	sp, sp, #4
   124fc:	pop	{pc}		; (ldr pc, [sp], #4)

00012500 <free_token_function@@Base>:
   12500:	str	r4, [sp, #-8]!
   12504:	str	lr, [sp, #4]
   12508:	movw	r3, #43952	; 0xabb0
   1250c:	movt	r3, #2
   12510:	ldr	r2, [r3, #120]	; 0x78
   12514:	ldr	r1, [r3, #124]	; 0x7c
   12518:	adds	r2, r2, #1
   1251c:	adc	r1, r1, #0
   12520:	str	r2, [r3, #120]	; 0x78
   12524:	str	r1, [r3, #124]	; 0x7c
   12528:	bl	11988 <free@plt>
   1252c:	ldr	r4, [sp]
   12530:	add	sp, sp, #4
   12534:	pop	{pc}		; (ldr pc, [sp], #4)

00012538 <free_token_opar@@Base>:
   12538:	str	r4, [sp, #-8]!
   1253c:	str	lr, [sp, #4]
   12540:	movw	r3, #43952	; 0xabb0
   12544:	movt	r3, #2
   12548:	ldr	r2, [r3, #128]	; 0x80
   1254c:	ldr	r1, [r3, #132]	; 0x84
   12550:	adds	r2, r2, #1
   12554:	adc	r1, r1, #0
   12558:	str	r2, [r3, #128]	; 0x80
   1255c:	str	r1, [r3, #132]	; 0x84
   12560:	bl	11988 <free@plt>
   12564:	ldr	r4, [sp]
   12568:	add	sp, sp, #4
   1256c:	pop	{pc}		; (ldr pc, [sp], #4)

00012570 <free_token_cpar@@Base>:
   12570:	str	r4, [sp, #-8]!
   12574:	str	lr, [sp, #4]
   12578:	movw	r3, #43952	; 0xabb0
   1257c:	movt	r3, #2
   12580:	ldr	r2, [r3, #136]	; 0x88
   12584:	ldr	r1, [r3, #140]	; 0x8c
   12588:	adds	r2, r2, #1
   1258c:	adc	r1, r1, #0
   12590:	str	r2, [r3, #136]	; 0x88
   12594:	str	r1, [r3, #140]	; 0x8c
   12598:	bl	11988 <free@plt>
   1259c:	ldr	r4, [sp]
   125a0:	add	sp, sp, #4
   125a4:	pop	{pc}		; (ldr pc, [sp], #4)

000125a8 <free_token_obra@@Base>:
   125a8:	str	r4, [sp, #-8]!
   125ac:	str	lr, [sp, #4]
   125b0:	movw	r3, #43952	; 0xabb0
   125b4:	movt	r3, #2
   125b8:	ldr	r2, [r3, #144]	; 0x90
   125bc:	ldr	r1, [r3, #148]	; 0x94
   125c0:	adds	r2, r2, #1
   125c4:	adc	r1, r1, #0
   125c8:	str	r2, [r3, #144]	; 0x90
   125cc:	str	r1, [r3, #148]	; 0x94
   125d0:	bl	11988 <free@plt>
   125d4:	ldr	r4, [sp]
   125d8:	add	sp, sp, #4
   125dc:	pop	{pc}		; (ldr pc, [sp], #4)

000125e0 <free_token_cbra@@Base>:
   125e0:	str	r4, [sp, #-8]!
   125e4:	str	lr, [sp, #4]
   125e8:	movw	r3, #43952	; 0xabb0
   125ec:	movt	r3, #2
   125f0:	ldr	r2, [r3, #152]	; 0x98
   125f4:	ldr	r1, [r3, #156]	; 0x9c
   125f8:	adds	r2, r2, #1
   125fc:	adc	r1, r1, #0
   12600:	str	r2, [r3, #152]	; 0x98
   12604:	str	r1, [r3, #156]	; 0x9c
   12608:	bl	11988 <free@plt>
   1260c:	ldr	r4, [sp]
   12610:	add	sp, sp, #4
   12614:	pop	{pc}		; (ldr pc, [sp], #4)

00012618 <free_token_return@@Base>:
   12618:	str	r4, [sp, #-8]!
   1261c:	str	lr, [sp, #4]
   12620:	movw	r3, #43952	; 0xabb0
   12624:	movt	r3, #2
   12628:	ldr	r2, [r3, #160]	; 0xa0
   1262c:	ldr	r1, [r3, #164]	; 0xa4
   12630:	adds	r2, r2, #1
   12634:	adc	r1, r1, #0
   12638:	str	r2, [r3, #160]	; 0xa0
   1263c:	str	r1, [r3, #164]	; 0xa4
   12640:	bl	11988 <free@plt>
   12644:	ldr	r4, [sp]
   12648:	add	sp, sp, #4
   1264c:	pop	{pc}		; (ldr pc, [sp], #4)

00012650 <free_token_semicolon@@Base>:
   12650:	str	r4, [sp, #-8]!
   12654:	str	lr, [sp, #4]
   12658:	movw	r3, #43952	; 0xabb0
   1265c:	movt	r3, #2
   12660:	ldr	r2, [r3, #168]	; 0xa8
   12664:	ldr	r1, [r3, #172]	; 0xac
   12668:	adds	r2, r2, #1
   1266c:	adc	r1, r1, #0
   12670:	str	r2, [r3, #168]	; 0xa8
   12674:	str	r1, [r3, #172]	; 0xac
   12678:	bl	11988 <free@plt>
   1267c:	ldr	r4, [sp]
   12680:	add	sp, sp, #4
   12684:	pop	{pc}		; (ldr pc, [sp], #4)

00012688 <free_token_eof@@Base>:
   12688:	str	r4, [sp, #-8]!
   1268c:	str	lr, [sp, #4]
   12690:	movw	r3, #43952	; 0xabb0
   12694:	movt	r3, #2
   12698:	ldr	r2, [r3, #176]	; 0xb0
   1269c:	ldr	r1, [r3, #180]	; 0xb4
   126a0:	adds	r2, r2, #1
   126a4:	adc	r1, r1, #0
   126a8:	str	r2, [r3, #176]	; 0xb0
   126ac:	str	r1, [r3, #180]	; 0xb4
   126b0:	bl	11988 <free@plt>
   126b4:	ldr	r4, [sp]
   126b8:	add	sp, sp, #4
   126bc:	pop	{pc}		; (ldr pc, [sp], #4)

000126c0 <free_token_if@@Base>:
   126c0:	str	r4, [sp, #-8]!
   126c4:	str	lr, [sp, #4]
   126c8:	movw	r3, #43952	; 0xabb0
   126cc:	movt	r3, #2
   126d0:	ldr	r2, [r3, #184]	; 0xb8
   126d4:	ldr	r1, [r3, #188]	; 0xbc
   126d8:	adds	r2, r2, #1
   126dc:	adc	r1, r1, #0
   126e0:	str	r2, [r3, #184]	; 0xb8
   126e4:	str	r1, [r3, #188]	; 0xbc
   126e8:	bl	11988 <free@plt>
   126ec:	ldr	r4, [sp]
   126f0:	add	sp, sp, #4
   126f4:	pop	{pc}		; (ldr pc, [sp], #4)

000126f8 <free_token_else@@Base>:
   126f8:	str	r4, [sp, #-8]!
   126fc:	str	lr, [sp, #4]
   12700:	movw	r3, #43952	; 0xabb0
   12704:	movt	r3, #2
   12708:	ldr	r2, [r3, #192]	; 0xc0
   1270c:	ldr	r1, [r3, #196]	; 0xc4
   12710:	adds	r2, r2, #1
   12714:	adc	r1, r1, #0
   12718:	str	r2, [r3, #192]	; 0xc0
   1271c:	str	r1, [r3, #196]	; 0xc4
   12720:	bl	11988 <free@plt>
   12724:	ldr	r4, [sp]
   12728:	add	sp, sp, #4
   1272c:	pop	{pc}		; (ldr pc, [sp], #4)

00012730 <free_token_boolean_op@@Base>:
   12730:	str	r4, [sp, #-8]!
   12734:	str	lr, [sp, #4]
   12738:	mov	r4, r0
   1273c:	ldr	r0, [r0, #4]
   12740:	cmp	r0, #0
   12744:	beq	12780 <free_token_boolean_op@@Base+0x50>
   12748:	movw	r3, #43952	; 0xabb0
   1274c:	movt	r3, #2
   12750:	ldr	r2, [r3, #200]	; 0xc8
   12754:	ldr	r1, [r3, #204]	; 0xcc
   12758:	adds	r2, r2, #1
   1275c:	adc	r1, r1, #0
   12760:	str	r2, [r3, #200]	; 0xc8
   12764:	str	r1, [r3, #204]	; 0xcc
   12768:	bl	11988 <free@plt>
   1276c:	mov	r0, r4
   12770:	bl	11988 <free@plt>
   12774:	ldr	r4, [sp]
   12778:	add	sp, sp, #4
   1277c:	pop	{pc}		; (ldr pc, [sp], #4)
   12780:	movw	r3, #43952	; 0xabb0
   12784:	movt	r3, #2
   12788:	ldr	r2, [r3, #208]	; 0xd0
   1278c:	ldr	r1, [r3, #212]	; 0xd4
   12790:	adds	r2, r2, #1
   12794:	adc	r1, r1, #0
   12798:	str	r2, [r3, #208]	; 0xd0
   1279c:	str	r1, [r3, #212]	; 0xd4
   127a0:	b	1276c <free_token_boolean_op@@Base+0x3c>
   127a4:	str	r4, [sp, #-8]!
   127a8:	str	lr, [sp, #4]
   127ac:	movw	r0, #41292	; 0xa14c
   127b0:	movt	r0, #2
   127b4:	bl	18a30 <__gcov_sort_n_vals@@Base+0x4a0>
   127b8:	ldr	r4, [sp]
   127bc:	add	sp, sp, #4
   127c0:	pop	{pc}		; (ldr pc, [sp], #4)
   127c4:	str	r4, [sp, #-8]!
   127c8:	str	lr, [sp, #4]
   127cc:	bl	189c0 <__gcov_sort_n_vals@@Base+0x430>
   127d0:	ldr	r4, [sp]
   127d4:	add	sp, sp, #4
   127d8:	pop	{pc}		; (ldr pc, [sp], #4)

000127dc <init_lexer@@Base>:
   127dc:	movw	r3, #44168	; 0xac88
   127e0:	movt	r3, #2
   127e4:	ldr	r2, [r3]
   127e8:	ldr	ip, [r3, #4]
   127ec:	adds	r2, r2, #1
   127f0:	adc	ip, ip, #0
   127f4:	str	r2, [r3]
   127f8:	str	ip, [r3, #4]
   127fc:	str	r1, [r0]
   12800:	mov	r3, #0
   12804:	str	r3, [r0, #4]
   12808:	str	r3, [r0, #8]
   1280c:	bx	lr

00012810 <free_stack_base@@Base>:
   12810:	str	r4, [sp, #-8]!
   12814:	str	lr, [sp, #4]
   12818:	movw	r3, #44168	; 0xac88
   1281c:	movt	r3, #2
   12820:	ldr	r2, [r3, #8]
   12824:	ldr	r1, [r3, #12]
   12828:	adds	r2, r2, #1
   1282c:	adc	r1, r1, #0
   12830:	str	r2, [r3, #8]
   12834:	str	r1, [r3, #12]
   12838:	bl	11988 <free@plt>
   1283c:	ldr	r4, [sp]
   12840:	add	sp, sp, #4
   12844:	pop	{pc}		; (ldr pc, [sp], #4)

00012848 <destroy_lexer@@Base>:
   12848:	ldr	r0, [r0, #4]
   1284c:	cmp	r0, #0
   12850:	beq	128a4 <destroy_lexer@@Base+0x5c>
   12854:	str	r4, [sp, #-8]!
   12858:	str	lr, [sp, #4]
   1285c:	movw	r4, #44168	; 0xac88
   12860:	movt	r4, #2
   12864:	ldr	r3, [r4, #16]
   12868:	ldr	r2, [r4, #20]
   1286c:	adds	r3, r3, #1
   12870:	adc	r2, r2, #0
   12874:	str	r3, [r4, #16]
   12878:	str	r2, [r4, #20]
   1287c:	bl	12810 <free_stack_base@@Base>
   12880:	ldr	r3, [r4, #32]
   12884:	ldr	r2, [r4, #36]	; 0x24
   12888:	adds	r3, r3, #1
   1288c:	adc	r2, r2, #0
   12890:	str	r3, [r4, #32]
   12894:	str	r2, [r4, #36]	; 0x24
   12898:	ldr	r4, [sp]
   1289c:	add	sp, sp, #4
   128a0:	pop	{pc}		; (ldr pc, [sp], #4)
   128a4:	movw	r3, #44168	; 0xac88
   128a8:	movt	r3, #2
   128ac:	ldr	r2, [r3, #24]
   128b0:	ldr	r1, [r3, #28]
   128b4:	adds	r2, r2, #1
   128b8:	adc	r1, r1, #0
   128bc:	str	r2, [r3, #24]
   128c0:	str	r1, [r3, #28]
   128c4:	bx	lr

000128c8 <push_back@@Base>:
   128c8:	strd	r4, [sp, #-16]!
   128cc:	str	r6, [sp, #8]
   128d0:	str	lr, [sp, #12]
   128d4:	mov	r4, r0
   128d8:	mov	r5, r1
   128dc:	movw	r3, #44168	; 0xac88
   128e0:	movt	r3, #2
   128e4:	ldr	r2, [r3, #40]	; 0x28
   128e8:	ldr	r1, [r3, #44]	; 0x2c
   128ec:	adds	r2, r2, #1
   128f0:	adc	r1, r1, #0
   128f4:	str	r2, [r3, #40]	; 0x28
   128f8:	str	r1, [r3, #44]	; 0x2c
   128fc:	mov	r0, #8
   12900:	bl	119e8 <malloc@plt>
   12904:	str	r5, [r0, #4]
   12908:	ldr	r3, [r4, #4]
   1290c:	str	r3, [r0]
   12910:	str	r0, [r4, #4]
   12914:	ldrd	r4, [sp]
   12918:	ldr	r6, [sp, #8]
   1291c:	add	sp, sp, #12
   12920:	pop	{pc}		; (ldr pc, [sp], #4)

00012924 <get_char@@Base>:
   12924:	movw	r3, #44168	; 0xac88
   12928:	movt	r3, #2
   1292c:	ldr	r2, [r3, #48]	; 0x30
   12930:	ldr	r1, [r3, #52]	; 0x34
   12934:	adds	r2, r2, #1
   12938:	adc	r1, r1, #0
   1293c:	str	r2, [r3, #48]	; 0x30
   12940:	str	r1, [r3, #52]	; 0x34
   12944:	ldr	r2, [r0]
   12948:	ldr	r3, [r0, #8]
   1294c:	add	r1, r3, #1
   12950:	str	r1, [r0, #8]
   12954:	ldrb	r0, [r2, r3]
   12958:	bx	lr

0001295c <push_back_chars@@Base>:
   1295c:	str	r4, [sp, #-8]!
   12960:	str	lr, [sp, #4]
   12964:	ldr	ip, [r0, #8]
   12968:	cmp	ip, r1
   1296c:	bcc	129a4 <push_back_chars@@Base+0x48>
   12970:	movw	r3, #44168	; 0xac88
   12974:	movt	r3, #2
   12978:	ldr	r2, [r3, #56]	; 0x38
   1297c:	ldr	lr, [r3, #60]	; 0x3c
   12980:	adds	r2, r2, #1
   12984:	adc	lr, lr, #0
   12988:	str	r2, [r3, #56]	; 0x38
   1298c:	str	lr, [r3, #60]	; 0x3c
   12990:	sub	ip, ip, r1
   12994:	str	ip, [r0, #8]
   12998:	ldr	r4, [sp]
   1299c:	add	sp, sp, #4
   129a0:	pop	{pc}		; (ldr pc, [sp], #4)
   129a4:	movw	r4, #44168	; 0xac88
   129a8:	movt	r4, #2
   129ac:	ldr	r3, [r4, #64]	; 0x40
   129b0:	ldr	r2, [r4, #68]	; 0x44
   129b4:	adds	r3, r3, #1
   129b8:	adc	r2, r2, #0
   129bc:	str	r3, [r4, #64]	; 0x40
   129c0:	str	r2, [r4, #68]	; 0x44
   129c4:	movw	r3, #43680	; 0xaaa0
   129c8:	movt	r3, #2
   129cc:	ldr	r3, [r3]
   129d0:	mov	r2, #32
   129d4:	mov	r1, #1
   129d8:	movw	r0, #36624	; 0x8f10
   129dc:	movt	r0, #1
   129e0:	bl	119ac <fwrite@plt>
   129e4:	ldr	r3, [r4, #72]	; 0x48
   129e8:	ldr	r2, [r4, #76]	; 0x4c
   129ec:	adds	r3, r3, #1
   129f0:	adc	r2, r2, #0
   129f4:	str	r3, [r4, #72]	; 0x48
   129f8:	str	r2, [r4, #76]	; 0x4c
   129fc:	mov	r0, #1
   12a00:	bl	11a18 <exit@plt>

00012a04 <push_back_one_char@@Base>:
   12a04:	str	r4, [sp, #-8]!
   12a08:	str	lr, [sp, #4]
   12a0c:	movw	r4, #44168	; 0xac88
   12a10:	movt	r4, #2
   12a14:	ldr	r3, [r4, #80]	; 0x50
   12a18:	ldr	r2, [r4, #84]	; 0x54
   12a1c:	adds	r3, r3, #1
   12a20:	adc	r2, r2, #0
   12a24:	str	r3, [r4, #80]	; 0x50
   12a28:	str	r2, [r4, #84]	; 0x54
   12a2c:	mov	r1, #1
   12a30:	bl	1295c <push_back_chars@@Base>
   12a34:	ldr	r3, [r4, #88]	; 0x58
   12a38:	ldr	r2, [r4, #92]	; 0x5c
   12a3c:	adds	r3, r3, #1
   12a40:	adc	r2, r2, #0
   12a44:	str	r3, [r4, #88]	; 0x58
   12a48:	str	r2, [r4, #92]	; 0x5c
   12a4c:	ldr	r4, [sp]
   12a50:	add	sp, sp, #4
   12a54:	pop	{pc}		; (ldr pc, [sp], #4)

00012a58 <next@@Base>:
   12a58:	strd	r4, [sp, #-28]!	; 0xffffffe4
   12a5c:	strd	r6, [sp, #8]
   12a60:	strd	r8, [sp, #16]
   12a64:	str	lr, [sp, #24]
   12a68:	sub	sp, sp, #516	; 0x204
   12a6c:	mov	r5, r0
   12a70:	ldr	r0, [r0, #4]
   12a74:	cmp	r0, #0
   12a78:	beq	12ae8 <next@@Base+0x90>
   12a7c:	movw	r4, #44168	; 0xac88
   12a80:	movt	r4, #2
   12a84:	ldr	r3, [r4, #96]	; 0x60
   12a88:	ldr	r2, [r4, #100]	; 0x64
   12a8c:	adds	r3, r3, #1
   12a90:	adc	r2, r2, #0
   12a94:	str	r3, [r4, #96]	; 0x60
   12a98:	str	r2, [r4, #100]	; 0x64
   12a9c:	ldr	r3, [r0]
   12aa0:	str	r3, [r5, #4]
   12aa4:	ldr	r6, [r0, #4]
   12aa8:	mov	r3, #0
   12aac:	str	r3, [r0, #4]
   12ab0:	bl	12810 <free_stack_base@@Base>
   12ab4:	ldr	r3, [r4, #112]	; 0x70
   12ab8:	ldr	r2, [r4, #116]	; 0x74
   12abc:	adds	r3, r3, #1
   12ac0:	adc	r2, r2, #0
   12ac4:	str	r3, [r4, #112]	; 0x70
   12ac8:	str	r2, [r4, #116]	; 0x74
   12acc:	mov	r0, r6
   12ad0:	add	sp, sp, #516	; 0x204
   12ad4:	ldrd	r4, [sp]
   12ad8:	ldrd	r6, [sp, #8]
   12adc:	ldrd	r8, [sp, #16]
   12ae0:	add	sp, sp, #24
   12ae4:	pop	{pc}		; (ldr pc, [sp], #4)
   12ae8:	movw	r3, #44168	; 0xac88
   12aec:	movt	r3, #2
   12af0:	ldr	r2, [r3, #104]	; 0x68
   12af4:	ldr	r1, [r3, #108]	; 0x6c
   12af8:	adds	r2, r2, #1
   12afc:	adc	r1, r1, #0
   12b00:	str	r2, [r3, #104]	; 0x68
   12b04:	str	r1, [r3, #108]	; 0x6c
   12b08:	mov	r0, r5
   12b0c:	bl	12924 <get_char@@Base>
   12b10:	mov	r7, #0
   12b14:	mov	r4, r7
   12b18:	movw	r6, #44168	; 0xac88
   12b1c:	movt	r6, #2
   12b20:	mov	r8, r7
   12b24:	add	r9, r6, #336	; 0x150
   12b28:	cmp	r0, #0
   12b2c:	beq	13cfc <next@@Base+0x12a4>
   12b30:	ldr	r2, [r6, #120]	; 0x78
   12b34:	ldr	r1, [r6, #124]	; 0x7c
   12b38:	mov	r3, r8
   12b3c:	mov	ip, #1
   12b40:	cmp	r7, #5
   12b44:	ldrls	pc, [pc, r7, lsl #2]
   12b48:	b	12ca0 <next@@Base+0x248>
   12b4c:			; <UNDEFINED> instruction: 0x00012cb0
   12b50:	andeq	r2, r1, r4, ror #22
   12b54:	andeq	r3, r1, r0, lsr r6
   12b58:	andeq	r3, r1, ip, lsl #15
   12b5c:	andeq	r3, r1, r8, lsr #18
   12b60:	andeq	r3, r1, r8, lsr #23
   12b64:	cmp	r3, #0
   12b68:	bne	12c8c <next@@Base+0x234>
   12b6c:	movw	r3, #44168	; 0xac88
   12b70:	movt	r3, #2
   12b74:	ldr	r2, [r3, #128]	; 0x80
   12b78:	ldr	r1, [r3, #132]	; 0x84
   12b7c:	adds	r2, r2, #1
   12b80:	adc	r1, r1, #0
   12b84:	str	r2, [r3, #128]	; 0x80
   12b88:	str	r1, [r3, #132]	; 0x84
   12b8c:	sub	r3, r0, #48	; 0x30
   12b90:	uxtb	r3, r3
   12b94:	cmp	r3, #9
   12b98:	movls	r1, r4
   12b9c:	ldrls	r6, [pc, #4000]	; 13b44 <next@@Base+0x10ec>
   12ba0:	bhi	12be0 <next@@Base+0x188>
   12ba4:	ldr	r3, [r6]
   12ba8:	ldr	r2, [r6, #4]
   12bac:	adds	r3, r3, #1
   12bb0:	adc	r2, r2, #0
   12bb4:	str	r3, [r6]
   12bb8:	str	r2, [r6, #4]
   12bbc:	add	r4, r1, #1
   12bc0:	strb	r0, [sp, r1]
   12bc4:	mov	r0, r5
   12bc8:	bl	12924 <get_char@@Base>
   12bcc:	mov	r1, r4
   12bd0:	sub	r3, r0, #48	; 0x30
   12bd4:	uxtb	r3, r3
   12bd8:	cmp	r3, #9
   12bdc:	bls	12ba4 <next@@Base+0x14c>
   12be0:	movw	r7, #44168	; 0xac88
   12be4:	movt	r7, #2
   12be8:	ldr	r3, [r7, #552]	; 0x228
   12bec:	ldr	r2, [r7, #556]	; 0x22c
   12bf0:	adds	r3, r3, #1
   12bf4:	adc	r2, r2, #0
   12bf8:	str	r3, [r7, #552]	; 0x228
   12bfc:	str	r2, [r7, #556]	; 0x22c
   12c00:	mov	r0, r5
   12c04:	bl	12a04 <push_back_one_char@@Base>
   12c08:	ldr	r3, [r7, #560]	; 0x230
   12c0c:	ldr	r2, [r7, #564]	; 0x234
   12c10:	adds	r3, r3, #1
   12c14:	adc	r2, r2, #0
   12c18:	str	r3, [r7, #560]	; 0x230
   12c1c:	str	r2, [r7, #564]	; 0x234
   12c20:	add	r3, sp, #512	; 0x200
   12c24:	add	r4, r3, r4
   12c28:	mov	r5, #0
   12c2c:	strb	r5, [r4, #-512]	; 0xfffffe00
   12c30:	mov	r0, #8
   12c34:	bl	119e8 <malloc@plt>
   12c38:	mov	r6, r0
   12c3c:	mov	r2, #10
   12c40:	mov	r1, r5
   12c44:	mov	r0, sp
   12c48:	bl	11970 <strtol@plt>
   12c4c:	ldr	r3, [r7, #568]	; 0x238
   12c50:	ldr	r2, [r7, #572]	; 0x23c
   12c54:	adds	r3, r3, #1
   12c58:	adc	r2, r2, r5
   12c5c:	str	r3, [r7, #568]	; 0x238
   12c60:	str	r2, [r7, #572]	; 0x23c
   12c64:	mov	r1, r0
   12c68:	mov	r0, r6
   12c6c:	bl	12274 <init_token_int_value@@Base>
   12c70:	ldr	r3, [r7, #576]	; 0x240
   12c74:	ldr	r2, [r7, #580]	; 0x244
   12c78:	adds	r3, r3, #1
   12c7c:	adc	r2, r2, r5
   12c80:	str	r3, [r7, #576]	; 0x240
   12c84:	str	r2, [r7, #580]	; 0x244
   12c88:	b	12acc <next@@Base+0x74>
   12c8c:	movw	r3, #44168	; 0xac88
   12c90:	movt	r3, #2
   12c94:	str	r2, [r3, #120]	; 0x78
   12c98:	str	r1, [r3, #124]	; 0x7c
   12c9c:	b	12b6c <next@@Base+0x114>
   12ca0:	adds	r2, r2, #1
   12ca4:	adc	r1, r1, #0
   12ca8:	mov	r3, ip
   12cac:	b	12b40 <next@@Base+0xe8>
   12cb0:	cmp	r3, #0
   12cb4:	strne	r2, [r6, #120]	; 0x78
   12cb8:	strne	r1, [r6, #124]	; 0x7c
   12cbc:	cmp	r0, #32
   12cc0:	cmpne	r0, #9
   12cc4:	beq	12d88 <next@@Base+0x330>
   12cc8:	cmp	r0, #10
   12ccc:	beq	12dc4 <next@@Base+0x36c>
   12cd0:	cmp	r0, #48	; 0x30
   12cd4:	beq	12de0 <next@@Base+0x388>
   12cd8:	sub	r3, r0, #49	; 0x31
   12cdc:	uxtb	r3, r3
   12ce0:	cmp	r3, #8
   12ce4:	bls	12e30 <next@@Base+0x3d8>
   12ce8:	cmp	r0, #40	; 0x28
   12cec:	beq	12e84 <next@@Base+0x42c>
   12cf0:	cmp	r0, #41	; 0x29
   12cf4:	beq	12ed0 <next@@Base+0x478>
   12cf8:	cmp	r0, #123	; 0x7b
   12cfc:	beq	12f1c <next@@Base+0x4c4>
   12d00:	cmp	r0, #125	; 0x7d
   12d04:	beq	12f68 <next@@Base+0x510>
   12d08:	cmp	r0, #59	; 0x3b
   12d0c:	beq	12fb4 <next@@Base+0x55c>
   12d10:	cmp	r0, #101	; 0x65
   12d14:	beq	13000 <next@@Base+0x5a8>
   12d18:	cmp	r0, #105	; 0x69
   12d1c:	beq	13058 <next@@Base+0x600>
   12d20:	cmp	r0, #109	; 0x6d
   12d24:	beq	130b0 <next@@Base+0x658>
   12d28:	cmp	r0, #114	; 0x72
   12d2c:	bne	13108 <next@@Base+0x6b0>
   12d30:	ldr	r3, [r9]
   12d34:	ldr	r2, [r9, #4]
   12d38:	adds	r3, r3, #1
   12d3c:	adc	r2, r2, #0
   12d40:	str	r3, [r9]
   12d44:	str	r2, [r9, #4]
   12d48:	add	r7, r4, #1
   12d4c:	add	r3, sp, #512	; 0x200
   12d50:	add	r4, r3, r4
   12d54:	mov	r3, #114	; 0x72
   12d58:	strb	r3, [r4, #-512]	; 0xfffffe00
   12d5c:	mov	r0, r5
   12d60:	bl	12924 <get_char@@Base>
   12d64:	ldr	r3, [r6, #344]	; 0x158
   12d68:	ldr	r1, [r6, #348]	; 0x15c
   12d6c:	adds	r3, r3, #1
   12d70:	adc	r1, r1, #0
   12d74:	str	r3, [r6, #344]	; 0x158
   12d78:	str	r1, [r6, #348]	; 0x15c
   12d7c:	mov	r4, r7
   12d80:	mov	r7, #4
   12d84:	b	12da8 <next@@Base+0x350>
   12d88:	ldr	r3, [r6, #160]	; 0xa0
   12d8c:	ldr	r2, [r6, #164]	; 0xa4
   12d90:	adds	r3, r3, #1
   12d94:	adc	r2, r2, #0
   12d98:	str	r3, [r6, #160]	; 0xa0
   12d9c:	str	r2, [r6, #164]	; 0xa4
   12da0:	mov	r0, r5
   12da4:	bl	12924 <get_char@@Base>
   12da8:	ldr	r3, [r6, #816]	; 0x330
   12dac:	ldr	r1, [r6, #820]	; 0x334
   12db0:	adds	r3, r3, #1
   12db4:	adc	r1, r1, #0
   12db8:	str	r3, [r6, #816]	; 0x330
   12dbc:	str	r1, [r6, #820]	; 0x334
   12dc0:	b	12b28 <next@@Base+0xd0>
   12dc4:	ldr	r3, [r6, #168]	; 0xa8
   12dc8:	ldr	r2, [r6, #172]	; 0xac
   12dcc:	adds	r3, r3, #1
   12dd0:	adc	r2, r2, #0
   12dd4:	str	r3, [r6, #168]	; 0xa8
   12dd8:	str	r2, [r6, #172]	; 0xac
   12ddc:	b	12da0 <next@@Base+0x348>
   12de0:	movw	r4, #44168	; 0xac88
   12de4:	movt	r4, #2
   12de8:	ldr	r3, [r4, #176]	; 0xb0
   12dec:	ldr	r2, [r4, #180]	; 0xb4
   12df0:	adds	r3, r3, #1
   12df4:	adc	r2, r2, #0
   12df8:	str	r3, [r4, #176]	; 0xb0
   12dfc:	str	r2, [r4, #180]	; 0xb4
   12e00:	mov	r0, #8
   12e04:	bl	119e8 <malloc@plt>
   12e08:	mov	r6, r0
   12e0c:	mov	r1, #0
   12e10:	bl	12274 <init_token_int_value@@Base>
   12e14:	ldr	r3, [r4, #184]	; 0xb8
   12e18:	ldr	r2, [r4, #188]	; 0xbc
   12e1c:	adds	r3, r3, #1
   12e20:	adc	r2, r2, #0
   12e24:	str	r3, [r4, #184]	; 0xb8
   12e28:	str	r2, [r4, #188]	; 0xbc
   12e2c:	b	12acc <next@@Base+0x74>
   12e30:	ldr	r3, [r6, #192]	; 0xc0
   12e34:	ldr	r2, [r6, #196]	; 0xc4
   12e38:	adds	r3, r3, #1
   12e3c:	adc	r2, r2, #0
   12e40:	str	r3, [r6, #192]	; 0xc0
   12e44:	str	r2, [r6, #196]	; 0xc4
   12e48:	add	r7, r4, #1
   12e4c:	add	r3, sp, #512	; 0x200
   12e50:	add	r4, r3, r4
   12e54:	strb	r0, [r4, #-512]	; 0xfffffe00
   12e58:	mov	r0, r5
   12e5c:	bl	12924 <get_char@@Base>
   12e60:	ldr	r3, [r6, #200]	; 0xc8
   12e64:	ldr	r2, [r6, #204]	; 0xcc
   12e68:	adds	r3, r3, #1
   12e6c:	adc	r2, r2, #0
   12e70:	str	r3, [r6, #200]	; 0xc8
   12e74:	str	r2, [r6, #204]	; 0xcc
   12e78:	mov	r4, r7
   12e7c:	mov	r7, #1
   12e80:	b	12da8 <next@@Base+0x350>
   12e84:	movw	r4, #44168	; 0xac88
   12e88:	movt	r4, #2
   12e8c:	ldr	r3, [r4, #208]	; 0xd0
   12e90:	ldr	r2, [r4, #212]	; 0xd4
   12e94:	adds	r3, r3, #1
   12e98:	adc	r2, r2, #0
   12e9c:	str	r3, [r4, #208]	; 0xd0
   12ea0:	str	r2, [r4, #212]	; 0xd4
   12ea4:	mov	r0, #4
   12ea8:	bl	119e8 <malloc@plt>
   12eac:	mov	r6, r0
   12eb0:	bl	122d4 <init_token_opar@@Base>
   12eb4:	ldr	r3, [r4, #216]	; 0xd8
   12eb8:	ldr	r2, [r4, #220]	; 0xdc
   12ebc:	adds	r3, r3, #1
   12ec0:	adc	r2, r2, #0
   12ec4:	str	r3, [r4, #216]	; 0xd8
   12ec8:	str	r2, [r4, #220]	; 0xdc
   12ecc:	b	12acc <next@@Base+0x74>
   12ed0:	movw	r4, #44168	; 0xac88
   12ed4:	movt	r4, #2
   12ed8:	ldr	r3, [r4, #224]	; 0xe0
   12edc:	ldr	r2, [r4, #228]	; 0xe4
   12ee0:	adds	r3, r3, #1
   12ee4:	adc	r2, r2, #0
   12ee8:	str	r3, [r4, #224]	; 0xe0
   12eec:	str	r2, [r4, #228]	; 0xe4
   12ef0:	mov	r0, #4
   12ef4:	bl	119e8 <malloc@plt>
   12ef8:	mov	r6, r0
   12efc:	bl	12300 <init_token_cpar@@Base>
   12f00:	ldr	r3, [r4, #232]	; 0xe8
   12f04:	ldr	r2, [r4, #236]	; 0xec
   12f08:	adds	r3, r3, #1
   12f0c:	adc	r2, r2, #0
   12f10:	str	r3, [r4, #232]	; 0xe8
   12f14:	str	r2, [r4, #236]	; 0xec
   12f18:	b	12acc <next@@Base+0x74>
   12f1c:	movw	r4, #44168	; 0xac88
   12f20:	movt	r4, #2
   12f24:	ldr	r3, [r4, #240]	; 0xf0
   12f28:	ldr	r2, [r4, #244]	; 0xf4
   12f2c:	adds	r3, r3, #1
   12f30:	adc	r2, r2, #0
   12f34:	str	r3, [r4, #240]	; 0xf0
   12f38:	str	r2, [r4, #244]	; 0xf4
   12f3c:	mov	r0, #4
   12f40:	bl	119e8 <malloc@plt>
   12f44:	mov	r6, r0
   12f48:	bl	1232c <init_token_obra@@Base>
   12f4c:	ldr	r3, [r4, #248]	; 0xf8
   12f50:	ldr	r2, [r4, #252]	; 0xfc
   12f54:	adds	r3, r3, #1
   12f58:	adc	r2, r2, #0
   12f5c:	str	r3, [r4, #248]	; 0xf8
   12f60:	str	r2, [r4, #252]	; 0xfc
   12f64:	b	12acc <next@@Base+0x74>
   12f68:	movw	r4, #44168	; 0xac88
   12f6c:	movt	r4, #2
   12f70:	ldr	r3, [r4, #256]	; 0x100
   12f74:	ldr	r1, [r4, #260]	; 0x104
   12f78:	adds	r3, r3, #1
   12f7c:	adc	r1, r1, #0
   12f80:	str	r3, [r4, #256]	; 0x100
   12f84:	str	r1, [r4, #260]	; 0x104
   12f88:	mov	r0, #4
   12f8c:	bl	119e8 <malloc@plt>
   12f90:	mov	r6, r0
   12f94:	bl	12358 <init_token_cbra@@Base>
   12f98:	ldr	r3, [r4, #264]	; 0x108
   12f9c:	ldr	r2, [r4, #268]	; 0x10c
   12fa0:	adds	r3, r3, #1
   12fa4:	adc	r2, r2, #0
   12fa8:	str	r3, [r4, #264]	; 0x108
   12fac:	str	r2, [r4, #268]	; 0x10c
   12fb0:	b	12acc <next@@Base+0x74>
   12fb4:	movw	r4, #44168	; 0xac88
   12fb8:	movt	r4, #2
   12fbc:	ldr	r3, [r4, #272]	; 0x110
   12fc0:	ldr	r1, [r4, #276]	; 0x114
   12fc4:	adds	r3, r3, #1
   12fc8:	adc	r1, r1, #0
   12fcc:	str	r3, [r4, #272]	; 0x110
   12fd0:	str	r1, [r4, #276]	; 0x114
   12fd4:	mov	r0, #4
   12fd8:	bl	119e8 <malloc@plt>
   12fdc:	mov	r6, r0
   12fe0:	bl	123b0 <init_token_semicolon@@Base>
   12fe4:	ldr	r3, [r4, #280]	; 0x118
   12fe8:	ldr	r2, [r4, #284]	; 0x11c
   12fec:	adds	r3, r3, #1
   12ff0:	adc	r2, r2, #0
   12ff4:	str	r3, [r4, #280]	; 0x118
   12ff8:	str	r2, [r4, #284]	; 0x11c
   12ffc:	b	12acc <next@@Base+0x74>
   13000:	ldr	r3, [r6, #288]	; 0x120
   13004:	ldr	r1, [r6, #292]	; 0x124
   13008:	adds	r3, r3, #1
   1300c:	adc	r1, r1, #0
   13010:	str	r3, [r6, #288]	; 0x120
   13014:	str	r1, [r6, #292]	; 0x124
   13018:	add	r7, r4, #1
   1301c:	add	r3, sp, #512	; 0x200
   13020:	add	r4, r3, r4
   13024:	mov	r3, #101	; 0x65
   13028:	strb	r3, [r4, #-512]	; 0xfffffe00
   1302c:	mov	r0, r5
   13030:	bl	12924 <get_char@@Base>
   13034:	ldr	r3, [r6, #296]	; 0x128
   13038:	ldr	r1, [r6, #300]	; 0x12c
   1303c:	adds	r3, r3, #1
   13040:	adc	r1, r1, #0
   13044:	str	r3, [r6, #296]	; 0x128
   13048:	str	r1, [r6, #300]	; 0x12c
   1304c:	mov	r4, r7
   13050:	mov	r7, #5
   13054:	b	12da8 <next@@Base+0x350>
   13058:	ldr	r3, [r6, #304]	; 0x130
   1305c:	ldr	r1, [r6, #308]	; 0x134
   13060:	adds	r3, r3, #1
   13064:	adc	r1, r1, #0
   13068:	str	r3, [r6, #304]	; 0x130
   1306c:	str	r1, [r6, #308]	; 0x134
   13070:	add	r7, r4, #1
   13074:	add	r3, sp, #512	; 0x200
   13078:	add	r4, r3, r4
   1307c:	mov	r3, #105	; 0x69
   13080:	strb	r3, [r4, #-512]	; 0xfffffe00
   13084:	mov	r0, r5
   13088:	bl	12924 <get_char@@Base>
   1308c:	ldr	r3, [r6, #312]	; 0x138
   13090:	ldr	r1, [r6, #316]	; 0x13c
   13094:	adds	r3, r3, #1
   13098:	adc	r1, r1, #0
   1309c:	str	r3, [r6, #312]	; 0x138
   130a0:	str	r1, [r6, #316]	; 0x13c
   130a4:	mov	r4, r7
   130a8:	mov	r7, #2
   130ac:	b	12da8 <next@@Base+0x350>
   130b0:	ldr	r3, [r6, #320]	; 0x140
   130b4:	ldr	r1, [r6, #324]	; 0x144
   130b8:	adds	r3, r3, #1
   130bc:	adc	r1, r1, #0
   130c0:	str	r3, [r6, #320]	; 0x140
   130c4:	str	r1, [r6, #324]	; 0x144
   130c8:	add	r7, r4, #1
   130cc:	add	r3, sp, #512	; 0x200
   130d0:	add	r4, r3, r4
   130d4:	mov	r3, #109	; 0x6d
   130d8:	strb	r3, [r4, #-512]	; 0xfffffe00
   130dc:	mov	r0, r5
   130e0:	bl	12924 <get_char@@Base>
   130e4:	ldr	r3, [r9, #-8]
   130e8:	ldr	r2, [r9, #-4]
   130ec:	adds	r3, r3, #1
   130f0:	adc	r2, r2, #0
   130f4:	str	r3, [r9, #-8]
   130f8:	str	r2, [r9, #-4]
   130fc:	mov	r4, r7
   13100:	mov	r7, #3
   13104:	b	12da8 <next@@Base+0x350>
   13108:	cmp	r0, #33	; 0x21
   1310c:	beq	131e8 <next@@Base+0x790>
   13110:	and	r3, r0, #253	; 0xfd
   13114:	cmp	r3, #60	; 0x3c
   13118:	beq	132f8 <next@@Base+0x8a0>
   1311c:	cmp	r0, #61	; 0x3d
   13120:	beq	13400 <next@@Base+0x9a8>
   13124:	ldr	r2, [pc, #2588]	; 13b48 <next@@Base+0x10f0>
   13128:	ldr	r3, [r2, #-8]
   1312c:	ldr	r1, [r2, #-4]
   13130:	adds	r3, r3, #1
   13134:	adc	r1, r1, #0
   13138:	str	r3, [r2, #-8]
   1313c:	str	r1, [r2, #-4]
   13140:	cmp	r0, #124	; 0x7c
   13144:	beq	134d8 <next@@Base+0xa80>
   13148:	cmp	r0, #38	; 0x26
   1314c:	bne	135d0 <next@@Base+0xb78>
   13150:	add	r3, sp, #512	; 0x200
   13154:	add	r4, r3, r4
   13158:	mov	r3, #38	; 0x26
   1315c:	strb	r3, [r4, #-512]	; 0xfffffe00
   13160:	mov	r0, r5
   13164:	bl	12924 <get_char@@Base>
   13168:	mov	r4, r0
   1316c:	ldr	r2, [pc, #2520]	; 13b4c <next@@Base+0x10f4>
   13170:	ldr	r3, [r2]
   13174:	ldr	r1, [r2, #4]
   13178:	adds	r3, r3, #1
   1317c:	adc	r1, r1, #0
   13180:	str	r3, [r2]
   13184:	str	r1, [r2, #4]
   13188:	mov	r0, #8
   1318c:	bl	119e8 <malloc@plt>
   13190:	mov	r6, r0
   13194:	cmp	r4, #38	; 0x26
   13198:	bne	135ac <next@@Base+0xb54>
   1319c:	mov	r0, #3
   131a0:	bl	119e8 <malloc@plt>
   131a4:	mov	r1, r0
   131a8:	ldrb	r3, [sp]
   131ac:	strb	r3, [r0]
   131b0:	mov	r3, #38	; 0x26
   131b4:	strb	r3, [r0, #1]
   131b8:	mov	r3, #0
   131bc:	strb	r3, [r0, #2]
   131c0:	mov	r0, r6
   131c4:	bl	12460 <init_token_boolean_op@@Base>
   131c8:	ldr	r2, [pc, #2432]	; 13b50 <next@@Base+0x10f8>
   131cc:	ldr	r3, [r2]
   131d0:	ldr	r1, [r2, #4]
   131d4:	adds	r3, r3, #1
   131d8:	adc	r1, r1, #0
   131dc:	str	r3, [r2]
   131e0:	str	r1, [r2, #4]
   131e4:	b	12acc <next@@Base+0x74>
   131e8:	movw	r6, #44168	; 0xac88
   131ec:	movt	r6, #2
   131f0:	ldr	r3, [r6, #352]	; 0x160
   131f4:	ldr	r1, [r6, #356]	; 0x164
   131f8:	adds	r3, r3, #1
   131fc:	adc	r1, r1, #0
   13200:	str	r3, [r6, #352]	; 0x160
   13204:	str	r1, [r6, #356]	; 0x164
   13208:	add	r3, sp, #512	; 0x200
   1320c:	add	r4, r3, r4
   13210:	mov	r3, #33	; 0x21
   13214:	strb	r3, [r4, #-512]	; 0xfffffe00
   13218:	mov	r0, r5
   1321c:	bl	12924 <get_char@@Base>
   13220:	mov	r4, r0
   13224:	ldr	r3, [r6, #360]	; 0x168
   13228:	ldr	r2, [r6, #364]	; 0x16c
   1322c:	adds	r3, r3, #1
   13230:	adc	r2, r2, #0
   13234:	str	r3, [r6, #360]	; 0x168
   13238:	str	r2, [r6, #364]	; 0x16c
   1323c:	mov	r0, #8
   13240:	bl	119e8 <malloc@plt>
   13244:	mov	r6, r0
   13248:	cmp	r4, #61	; 0x3d
   1324c:	beq	132b8 <next@@Base+0x860>
   13250:	mov	r0, r5
   13254:	bl	12a04 <push_back_one_char@@Base>
   13258:	ldr	r2, [pc, #2292]	; 13b54 <next@@Base+0x10fc>
   1325c:	ldr	r3, [r2]
   13260:	ldr	r1, [r2, #4]
   13264:	adds	r3, r3, #1
   13268:	adc	r1, r1, #0
   1326c:	str	r3, [r2]
   13270:	str	r1, [r2, #4]
   13274:	mov	r0, #2
   13278:	bl	119e8 <malloc@plt>
   1327c:	ldrb	r3, [sp]
   13280:	strb	r3, [r0]
   13284:	mov	r3, #0
   13288:	strb	r3, [r0, #1]
   1328c:	mov	r1, r0
   13290:	mov	r0, r6
   13294:	bl	12460 <init_token_boolean_op@@Base>
   13298:	ldr	r2, [pc, #2232]	; 13b58 <next@@Base+0x1100>
   1329c:	ldr	r3, [r2]
   132a0:	ldr	r1, [r2, #4]
   132a4:	adds	r3, r3, #1
   132a8:	adc	r1, r1, #0
   132ac:	str	r3, [r2]
   132b0:	str	r1, [r2, #4]
   132b4:	b	12acc <next@@Base+0x74>
   132b8:	mov	r0, #3
   132bc:	bl	119e8 <malloc@plt>
   132c0:	ldrb	r3, [sp]
   132c4:	strb	r3, [r0]
   132c8:	mov	r3, #61	; 0x3d
   132cc:	strb	r3, [r0, #1]
   132d0:	mov	r3, #0
   132d4:	strb	r3, [r0, #2]
   132d8:	ldr	r2, [pc, #2168]	; 13b58 <next@@Base+0x1100>
   132dc:	ldr	r3, [r2, #-8]
   132e0:	ldr	r1, [r2, #-4]
   132e4:	adds	r3, r3, #1
   132e8:	adc	r1, r1, #0
   132ec:	str	r3, [r2, #-8]
   132f0:	str	r1, [r2, #-4]
   132f4:	b	1328c <next@@Base+0x834>
   132f8:	ldr	r6, [pc, #2140]	; 13b5c <next@@Base+0x1104>
   132fc:	ldr	r3, [r6, #-8]
   13300:	ldr	r2, [r6, #-4]
   13304:	adds	r3, r3, #1
   13308:	adc	r2, r2, #0
   1330c:	str	r3, [r6, #-8]
   13310:	str	r2, [r6, #-4]
   13314:	add	r3, sp, #512	; 0x200
   13318:	add	r4, r3, r4
   1331c:	strb	r0, [r4, #-512]	; 0xfffffe00
   13320:	mov	r0, r5
   13324:	bl	12924 <get_char@@Base>
   13328:	mov	r4, r0
   1332c:	ldr	r3, [r6]
   13330:	ldr	r2, [r6, #4]
   13334:	adds	r3, r3, #1
   13338:	adc	r2, r2, #0
   1333c:	str	r3, [r6]
   13340:	str	r2, [r6, #4]
   13344:	mov	r0, #8
   13348:	bl	119e8 <malloc@plt>
   1334c:	mov	r6, r0
   13350:	cmp	r4, #61	; 0x3d
   13354:	beq	133c0 <next@@Base+0x968>
   13358:	mov	r0, r5
   1335c:	bl	12a04 <push_back_one_char@@Base>
   13360:	ldr	r2, [pc, #2040]	; 13b60 <next@@Base+0x1108>
   13364:	ldr	r3, [r2, #-8]
   13368:	ldr	r1, [r2, #-4]
   1336c:	adds	r3, r3, #1
   13370:	adc	r1, r1, #0
   13374:	str	r3, [r2, #-8]
   13378:	str	r1, [r2, #-4]
   1337c:	mov	r0, #2
   13380:	bl	119e8 <malloc@plt>
   13384:	ldrb	r3, [sp]
   13388:	strb	r3, [r0]
   1338c:	mov	r3, #0
   13390:	strb	r3, [r0, #1]
   13394:	mov	r1, r0
   13398:	mov	r0, r6
   1339c:	bl	12460 <init_token_boolean_op@@Base>
   133a0:	ldr	r2, [pc, #1980]	; 13b64 <next@@Base+0x110c>
   133a4:	ldr	r3, [r2, #-8]
   133a8:	ldr	r1, [r2, #-4]
   133ac:	adds	r3, r3, #1
   133b0:	adc	r1, r1, #0
   133b4:	str	r3, [r2, #-8]
   133b8:	str	r1, [r2, #-4]
   133bc:	b	12acc <next@@Base+0x74>
   133c0:	mov	r0, #3
   133c4:	bl	119e8 <malloc@plt>
   133c8:	ldrb	r3, [sp]
   133cc:	strb	r3, [r0]
   133d0:	mov	r3, #61	; 0x3d
   133d4:	strb	r3, [r0, #1]
   133d8:	mov	r3, #0
   133dc:	strb	r3, [r0, #2]
   133e0:	ldr	r2, [pc, #1912]	; 13b60 <next@@Base+0x1108>
   133e4:	ldr	r3, [r2]
   133e8:	ldr	r1, [r2, #4]
   133ec:	adds	r3, r3, #1
   133f0:	adc	r1, r1, #0
   133f4:	str	r3, [r2]
   133f8:	str	r1, [r2, #4]
   133fc:	b	13394 <next@@Base+0x93c>
   13400:	movw	r6, #44168	; 0xac88
   13404:	movt	r6, #2
   13408:	ldr	r3, [r6, #432]	; 0x1b0
   1340c:	ldr	r1, [r6, #436]	; 0x1b4
   13410:	adds	r3, r3, #1
   13414:	adc	r1, r1, #0
   13418:	str	r3, [r6, #432]	; 0x1b0
   1341c:	str	r1, [r6, #436]	; 0x1b4
   13420:	add	r3, sp, #512	; 0x200
   13424:	add	r4, r3, r4
   13428:	mov	r3, #61	; 0x3d
   1342c:	strb	r3, [r4, #-512]	; 0xfffffe00
   13430:	mov	r0, r5
   13434:	bl	12924 <get_char@@Base>
   13438:	mov	r4, r0
   1343c:	ldr	r3, [r6, #448]	; 0x1c0
   13440:	ldr	r2, [r6, #452]	; 0x1c4
   13444:	adds	r3, r3, #1
   13448:	adc	r2, r2, #0
   1344c:	str	r3, [r6, #448]	; 0x1c0
   13450:	str	r2, [r6, #452]	; 0x1c4
   13454:	mov	r0, #8
   13458:	bl	119e8 <malloc@plt>
   1345c:	mov	r6, r0
   13460:	cmp	r4, #61	; 0x3d
   13464:	bne	134b4 <next@@Base+0xa5c>
   13468:	mov	r0, #3
   1346c:	bl	119e8 <malloc@plt>
   13470:	mov	r1, r0
   13474:	ldrb	r3, [sp]
   13478:	strb	r3, [r0]
   1347c:	mov	r3, #61	; 0x3d
   13480:	strb	r3, [r0, #1]
   13484:	mov	r3, #0
   13488:	strb	r3, [r0, #2]
   1348c:	mov	r0, r6
   13490:	bl	12460 <init_token_boolean_op@@Base>
   13494:	ldr	r2, [pc, #1740]	; 13b68 <next@@Base+0x1110>
   13498:	ldr	r3, [r2]
   1349c:	ldr	r1, [r2, #4]
   134a0:	adds	r3, r3, #1
   134a4:	adc	r1, r1, #0
   134a8:	str	r3, [r2]
   134ac:	str	r1, [r2, #4]
   134b0:	b	12acc <next@@Base+0x74>
   134b4:	ldr	r2, [pc, #1708]	; 13b68 <next@@Base+0x1110>
   134b8:	ldr	r3, [r2, #-8]
   134bc:	ldr	r1, [r2, #-4]
   134c0:	adds	r3, r3, #1
   134c4:	adc	r1, r1, #0
   134c8:	str	r3, [r2, #-8]
   134cc:	str	r1, [r2, #-4]
   134d0:	mov	r0, #1
   134d4:	bl	11a18 <exit@plt>
   134d8:	add	r6, r2, #32
   134dc:	ldr	r3, [r6, #-8]
   134e0:	ldr	r2, [r6, #-4]
   134e4:	adds	r3, r3, #1
   134e8:	adc	r2, r2, #0
   134ec:	str	r3, [r6, #-8]
   134f0:	str	r2, [r6, #-4]
   134f4:	add	r3, sp, #512	; 0x200
   134f8:	add	r4, r3, r4
   134fc:	mov	r3, #124	; 0x7c
   13500:	strb	r3, [r4, #-512]	; 0xfffffe00
   13504:	mov	r0, r5
   13508:	bl	12924 <get_char@@Base>
   1350c:	mov	r4, r0
   13510:	ldr	r3, [r6]
   13514:	ldr	r2, [r6, #4]
   13518:	adds	r3, r3, #1
   1351c:	adc	r2, r2, #0
   13520:	str	r3, [r6]
   13524:	str	r2, [r6, #4]
   13528:	mov	r0, #8
   1352c:	bl	119e8 <malloc@plt>
   13530:	mov	r6, r0
   13534:	cmp	r4, #124	; 0x7c
   13538:	bne	13588 <next@@Base+0xb30>
   1353c:	mov	r0, #3
   13540:	bl	119e8 <malloc@plt>
   13544:	mov	r1, r0
   13548:	ldrb	r3, [sp]
   1354c:	strb	r3, [r0]
   13550:	mov	r3, #124	; 0x7c
   13554:	strb	r3, [r0, #1]
   13558:	mov	r3, #0
   1355c:	strb	r3, [r0, #2]
   13560:	mov	r0, r6
   13564:	bl	12460 <init_token_boolean_op@@Base>
   13568:	ldr	r2, [pc, #1532]	; 13b6c <next@@Base+0x1114>
   1356c:	ldr	r3, [r2]
   13570:	ldr	r1, [r2, #4]
   13574:	adds	r3, r3, #1
   13578:	adc	r1, r1, #0
   1357c:	str	r3, [r2]
   13580:	str	r1, [r2, #4]
   13584:	b	12acc <next@@Base+0x74>
   13588:	ldr	r2, [pc, #1500]	; 13b6c <next@@Base+0x1114>
   1358c:	ldr	r3, [r2, #-8]
   13590:	ldr	r1, [r2, #-4]
   13594:	adds	r3, r3, #1
   13598:	adc	r1, r1, #0
   1359c:	str	r3, [r2, #-8]
   135a0:	str	r1, [r2, #-4]
   135a4:	mov	r0, #1
   135a8:	bl	11a18 <exit@plt>
   135ac:	ldr	r2, [pc, #1436]	; 13b50 <next@@Base+0x10f8>
   135b0:	ldr	r3, [r2, #-8]
   135b4:	ldr	r1, [r2, #-4]
   135b8:	adds	r3, r3, #1
   135bc:	adc	r1, r1, #0
   135c0:	str	r3, [r2, #-8]
   135c4:	str	r1, [r2, #-4]
   135c8:	mov	r0, #1
   135cc:	bl	11a18 <exit@plt>
   135d0:	movw	r4, #44168	; 0xac88
   135d4:	movt	r4, #2
   135d8:	ldr	r3, [r4, #504]	; 0x1f8
   135dc:	ldr	r1, [r4, #508]	; 0x1fc
   135e0:	adds	r3, r3, #1
   135e4:	adc	r1, r1, #0
   135e8:	str	r3, [r4, #504]	; 0x1f8
   135ec:	str	r1, [r4, #508]	; 0x1fc
   135f0:	movw	r3, #43680	; 0xaaa0
   135f4:	movt	r3, #2
   135f8:	mov	r2, r0
   135fc:	movw	r1, #36660	; 0x8f34
   13600:	movt	r1, #1
   13604:	ldr	r0, [r3]
   13608:	bl	11a3c <fprintf@plt>
   1360c:	add	r4, r4, #544	; 0x220
   13610:	ldr	r3, [r4, #-8]
   13614:	ldr	r2, [r4, #-4]
   13618:	adds	r3, r3, #1
   1361c:	adc	r2, r2, #0
   13620:	str	r3, [r4, #-8]
   13624:	str	r2, [r4, #-4]
   13628:	mov	r0, #1
   1362c:	bl	11a18 <exit@plt>
   13630:	cmp	r3, #0
   13634:	bne	136cc <next@@Base+0xc74>
   13638:	cmp	r0, #102	; 0x66
   1363c:	beq	13704 <next@@Base+0xcac>
   13640:	cmp	r0, #110	; 0x6e
   13644:	bne	13768 <next@@Base+0xd10>
   13648:	ldr	r6, [pc, #1312]	; 13b70 <next@@Base+0x1118>
   1364c:	ldr	r3, [r6, #-8]
   13650:	ldr	r2, [r6, #-4]
   13654:	adds	r3, r3, #1
   13658:	adc	r2, r2, #0
   1365c:	str	r3, [r6, #-8]
   13660:	str	r2, [r6, #-4]
   13664:	add	r3, sp, #512	; 0x200
   13668:	add	r4, r3, r4
   1366c:	mov	r3, #110	; 0x6e
   13670:	strb	r3, [r4, #-512]	; 0xfffffe00
   13674:	mov	r0, r5
   13678:	bl	12924 <get_char@@Base>
   1367c:	ldr	r3, [r6]
   13680:	ldr	r2, [r6, #4]
   13684:	adds	r3, r3, #1
   13688:	adc	r2, r2, #0
   1368c:	str	r3, [r6]
   13690:	str	r2, [r6, #4]
   13694:	cmp	r0, #116	; 0x74
   13698:	bne	136e0 <next@@Base+0xc88>
   1369c:	mov	r0, #4
   136a0:	bl	119e8 <malloc@plt>
   136a4:	mov	r6, r0
   136a8:	bl	12248 <init_token_int_type@@Base>
   136ac:	ldr	r2, [pc, #1216]	; 13b74 <next@@Base+0x111c>
   136b0:	ldr	r3, [r2]
   136b4:	ldr	r1, [r2, #4]
   136b8:	adds	r3, r3, #1
   136bc:	adc	r1, r1, #0
   136c0:	str	r3, [r2]
   136c4:	str	r1, [r2, #4]
   136c8:	b	12acc <next@@Base+0x74>
   136cc:	movw	r3, #44168	; 0xac88
   136d0:	movt	r3, #2
   136d4:	str	r2, [r3, #120]	; 0x78
   136d8:	str	r1, [r3, #124]	; 0x7c
   136dc:	b	13638 <next@@Base+0xbe0>
   136e0:	add	r2, r6, #16
   136e4:	ldr	r3, [r2, #-8]
   136e8:	ldr	r1, [r2, #-4]
   136ec:	adds	r3, r3, #1
   136f0:	adc	r1, r1, #0
   136f4:	str	r3, [r2, #-8]
   136f8:	str	r1, [r2, #-4]
   136fc:	mov	r0, #1
   13700:	bl	11a18 <exit@plt>
   13704:	movw	r5, #44168	; 0xac88
   13708:	movt	r5, #2
   1370c:	ldr	r3, [r5, #592]	; 0x250
   13710:	ldr	r1, [r5, #596]	; 0x254
   13714:	adds	r3, r3, #1
   13718:	adc	r1, r1, #0
   1371c:	str	r3, [r5, #592]	; 0x250
   13720:	str	r1, [r5, #596]	; 0x254
   13724:	add	r3, sp, #512	; 0x200
   13728:	add	r4, r3, r4
   1372c:	mov	r3, #102	; 0x66
   13730:	strb	r3, [r4, #-512]	; 0xfffffe00
   13734:	mov	r3, #0
   13738:	strb	r3, [r4, #-511]	; 0xfffffe01
   1373c:	mov	r0, #4
   13740:	bl	119e8 <malloc@plt>
   13744:	mov	r6, r0
   13748:	bl	12408 <init_token_if@@Base>
   1374c:	ldr	r3, [r5, #632]	; 0x278
   13750:	ldr	r2, [r5, #636]	; 0x27c
   13754:	adds	r3, r3, #1
   13758:	adc	r2, r2, #0
   1375c:	str	r3, [r5, #632]	; 0x278
   13760:	str	r2, [r5, #636]	; 0x27c
   13764:	b	12acc <next@@Base+0x74>
   13768:	ldr	r2, [pc, #1032]	; 13b78 <next@@Base+0x1120>
   1376c:	ldr	r3, [r2, #-8]
   13770:	ldr	r1, [r2, #-4]
   13774:	adds	r3, r3, #1
   13778:	adc	r1, r1, #0
   1377c:	str	r3, [r2, #-8]
   13780:	str	r1, [r2, #-4]
   13784:	mov	r0, #1
   13788:	bl	11a18 <exit@plt>
   1378c:	cmp	r3, #0
   13790:	bne	138b0 <next@@Base+0xe58>
   13794:	movw	r3, #44168	; 0xac88
   13798:	movt	r3, #2
   1379c:	ldr	r2, [r3, #136]	; 0x88
   137a0:	ldr	r1, [r3, #140]	; 0x8c
   137a4:	adds	r2, r2, #1
   137a8:	adc	r1, r1, #0
   137ac:	str	r2, [r3, #136]	; 0x88
   137b0:	str	r1, [r3, #140]	; 0x8c
   137b4:	cmp	r0, #97	; 0x61
   137b8:	bne	138c4 <next@@Base+0xe6c>
   137bc:	add	r7, r4, #1
   137c0:	mov	r2, #97	; 0x61
   137c4:	add	r3, sp, #512	; 0x200
   137c8:	add	r3, r3, r4
   137cc:	strb	r2, [r3, #-512]	; 0xfffffe00
   137d0:	mov	r0, r5
   137d4:	bl	12924 <get_char@@Base>
   137d8:	ldr	r2, [pc, #924]	; 13b7c <next@@Base+0x1124>
   137dc:	ldr	r3, [r2, #-8]
   137e0:	ldr	r1, [r2, #-4]
   137e4:	adds	r3, r3, #1
   137e8:	adc	r1, r1, #0
   137ec:	str	r3, [r2, #-8]
   137f0:	str	r1, [r2, #-4]
   137f4:	cmp	r0, #105	; 0x69
   137f8:	bne	138e8 <next@@Base+0xe90>
   137fc:	add	r6, r4, #2
   13800:	add	r3, sp, #512	; 0x200
   13804:	add	r7, r3, r7
   13808:	mov	r3, #105	; 0x69
   1380c:	strb	r3, [r7, #-512]	; 0xfffffe00
   13810:	mov	r0, r5
   13814:	bl	12924 <get_char@@Base>
   13818:	ldr	r2, [pc, #864]	; 13b80 <next@@Base+0x1128>
   1381c:	ldr	r3, [r2, #-8]
   13820:	ldr	r1, [r2, #-4]
   13824:	adds	r3, r3, #1
   13828:	adc	r1, r1, #0
   1382c:	str	r3, [r2, #-8]
   13830:	str	r1, [r2, #-4]
   13834:	cmp	r0, #110	; 0x6e
   13838:	bne	13908 <next@@Base+0xeb0>
   1383c:	add	r5, r4, #3
   13840:	add	r3, sp, #512	; 0x200
   13844:	add	r6, r3, r6
   13848:	mov	r3, #110	; 0x6e
   1384c:	strb	r3, [r6, #-512]	; 0xfffffe00
   13850:	add	r3, sp, #512	; 0x200
   13854:	add	r3, r3, r5
   13858:	mov	r6, #0
   1385c:	strb	r6, [r3, #-512]	; 0xfffffe00
   13860:	add	r0, r4, #4
   13864:	bl	119e8 <malloc@plt>
   13868:	mov	r4, r0
   1386c:	mov	r2, r5
   13870:	mov	r1, sp
   13874:	bl	11a6c <strncpy@plt>
   13878:	strb	r6, [r4, r5]
   1387c:	mov	r0, #8
   13880:	bl	119e8 <malloc@plt>
   13884:	mov	r6, r0
   13888:	mov	r1, r4
   1388c:	bl	122a4 <init_token_function@@Base>
   13890:	ldr	r2, [pc, #748]	; 13b84 <next@@Base+0x112c>
   13894:	ldr	r3, [r2, #-8]
   13898:	ldr	r1, [r2, #-4]
   1389c:	adds	r3, r3, #1
   138a0:	adc	r1, r1, #0
   138a4:	str	r3, [r2, #-8]
   138a8:	str	r1, [r2, #-4]
   138ac:	b	12acc <next@@Base+0x74>
   138b0:	movw	r3, #44168	; 0xac88
   138b4:	movt	r3, #2
   138b8:	str	r2, [r3, #120]	; 0x78
   138bc:	str	r1, [r3, #124]	; 0x7c
   138c0:	b	13794 <next@@Base+0xd3c>
   138c4:	add	r2, r3, #640	; 0x280
   138c8:	ldr	r3, [r2]
   138cc:	ldr	r1, [r2, #4]
   138d0:	adds	r3, r3, #1
   138d4:	adc	r1, r1, #0
   138d8:	str	r3, [r2]
   138dc:	str	r1, [r2, #4]
   138e0:	mov	r0, #1
   138e4:	bl	11a18 <exit@plt>
   138e8:	ldr	r3, [r2]
   138ec:	ldr	r1, [r2, #4]
   138f0:	adds	r3, r3, #1
   138f4:	adc	r1, r1, #0
   138f8:	str	r3, [r2]
   138fc:	str	r1, [r2, #4]
   13900:	mov	r0, #1
   13904:	bl	11a18 <exit@plt>
   13908:	ldr	r3, [r2]
   1390c:	ldr	r1, [r2, #4]
   13910:	adds	r3, r3, #1
   13914:	adc	r1, r1, #0
   13918:	str	r3, [r2]
   1391c:	str	r1, [r2, #4]
   13920:	mov	r0, #1
   13924:	bl	11a18 <exit@plt>
   13928:	cmp	r3, #0
   1392c:	bne	13a88 <next@@Base+0x1030>
   13930:	movw	r3, #44168	; 0xac88
   13934:	movt	r3, #2
   13938:	ldr	r2, [r3, #144]	; 0x90
   1393c:	ldr	r1, [r3, #148]	; 0x94
   13940:	adds	r2, r2, #1
   13944:	adc	r1, r1, #0
   13948:	str	r2, [r3, #144]	; 0x90
   1394c:	str	r1, [r3, #148]	; 0x94
   13950:	cmp	r0, #101	; 0x65
   13954:	bne	13a9c <next@@Base+0x1044>
   13958:	add	r7, r4, #1
   1395c:	mov	r2, #101	; 0x65
   13960:	add	r3, sp, #512	; 0x200
   13964:	add	r3, r3, r4
   13968:	strb	r2, [r3, #-512]	; 0xfffffe00
   1396c:	mov	r0, r5
   13970:	bl	12924 <get_char@@Base>
   13974:	ldr	r2, [pc, #524]	; 13b88 <next@@Base+0x1130>
   13978:	ldr	r3, [r2, #-8]
   1397c:	ldr	r1, [r2, #-4]
   13980:	adds	r3, r3, #1
   13984:	adc	r1, r1, #0
   13988:	str	r3, [r2, #-8]
   1398c:	str	r1, [r2, #-4]
   13990:	cmp	r0, #116	; 0x74
   13994:	bne	13ac0 <next@@Base+0x1068>
   13998:	add	r6, r4, #2
   1399c:	add	r3, sp, #512	; 0x200
   139a0:	add	r7, r3, r7
   139a4:	mov	r3, #116	; 0x74
   139a8:	strb	r3, [r7, #-512]	; 0xfffffe00
   139ac:	mov	r0, r5
   139b0:	bl	12924 <get_char@@Base>
   139b4:	ldr	r2, [pc, #464]	; 13b8c <next@@Base+0x1134>
   139b8:	ldr	r3, [r2, #-8]
   139bc:	ldr	r1, [r2, #-4]
   139c0:	adds	r3, r3, #1
   139c4:	adc	r1, r1, #0
   139c8:	str	r3, [r2, #-8]
   139cc:	str	r1, [r2, #-4]
   139d0:	cmp	r0, #117	; 0x75
   139d4:	bne	13ae0 <next@@Base+0x1088>
   139d8:	add	r4, r4, #3
   139dc:	add	r3, sp, #512	; 0x200
   139e0:	add	r6, r3, r6
   139e4:	mov	r3, #117	; 0x75
   139e8:	strb	r3, [r6, #-512]	; 0xfffffe00
   139ec:	mov	r0, r5
   139f0:	bl	12924 <get_char@@Base>
   139f4:	cmp	r0, #114	; 0x72
   139f8:	bne	13b00 <next@@Base+0x10a8>
   139fc:	movw	r6, #44168	; 0xac88
   13a00:	movt	r6, #2
   13a04:	ldr	r3, [r6, #736]	; 0x2e0
   13a08:	ldr	r1, [r6, #740]	; 0x2e4
   13a0c:	adds	r3, r3, #1
   13a10:	adc	r1, r1, #0
   13a14:	str	r3, [r6, #736]	; 0x2e0
   13a18:	str	r1, [r6, #740]	; 0x2e4
   13a1c:	add	r3, sp, #512	; 0x200
   13a20:	add	r4, r3, r4
   13a24:	mov	r3, #114	; 0x72
   13a28:	strb	r3, [r4, #-512]	; 0xfffffe00
   13a2c:	mov	r0, r5
   13a30:	bl	12924 <get_char@@Base>
   13a34:	add	r6, r6, #752	; 0x2f0
   13a38:	ldr	r3, [r6, #-8]
   13a3c:	ldr	r2, [r6, #-4]
   13a40:	adds	r3, r3, #1
   13a44:	adc	r2, r2, #0
   13a48:	str	r3, [r6, #-8]
   13a4c:	str	r2, [r6, #-4]
   13a50:	cmp	r0, #110	; 0x6e
   13a54:	bne	13b24 <next@@Base+0x10cc>
   13a58:	mov	r0, #4
   13a5c:	bl	119e8 <malloc@plt>
   13a60:	mov	r6, r0
   13a64:	bl	12384 <init_token_return@@Base>
   13a68:	ldr	r2, [pc, #288]	; 13b90 <next@@Base+0x1138>
   13a6c:	ldr	r3, [r2, #-8]
   13a70:	ldr	r1, [r2, #-4]
   13a74:	adds	r3, r3, #1
   13a78:	adc	r1, r1, #0
   13a7c:	str	r3, [r2, #-8]
   13a80:	str	r1, [r2, #-4]
   13a84:	b	12acc <next@@Base+0x74>
   13a88:	movw	r3, #44168	; 0xac88
   13a8c:	movt	r3, #2
   13a90:	str	r2, [r3, #120]	; 0x78
   13a94:	str	r1, [r3, #124]	; 0x7c
   13a98:	b	13930 <next@@Base+0xed8>
   13a9c:	add	r2, r3, #688	; 0x2b0
   13aa0:	ldr	r3, [r2]
   13aa4:	ldr	r1, [r2, #4]
   13aa8:	adds	r3, r3, #1
   13aac:	adc	r1, r1, #0
   13ab0:	str	r3, [r2]
   13ab4:	str	r1, [r2, #4]
   13ab8:	mov	r0, #1
   13abc:	bl	11a18 <exit@plt>
   13ac0:	ldr	r3, [r2]
   13ac4:	ldr	r1, [r2, #4]
   13ac8:	adds	r3, r3, #1
   13acc:	adc	r1, r1, #0
   13ad0:	str	r3, [r2]
   13ad4:	str	r1, [r2, #4]
   13ad8:	mov	r0, #1
   13adc:	bl	11a18 <exit@plt>
   13ae0:	ldr	r3, [r2]
   13ae4:	ldr	r1, [r2, #4]
   13ae8:	adds	r3, r3, #1
   13aec:	adc	r1, r1, #0
   13af0:	str	r3, [r2]
   13af4:	str	r1, [r2, #4]
   13af8:	mov	r0, #1
   13afc:	bl	11a18 <exit@plt>
   13b00:	ldr	r2, [pc, #140]	; 13b94 <next@@Base+0x113c>
   13b04:	ldr	r3, [r2, #-8]
   13b08:	ldr	r1, [r2, #-4]
   13b0c:	adds	r3, r3, #1
   13b10:	adc	r1, r1, #0
   13b14:	str	r3, [r2, #-8]
   13b18:	str	r1, [r2, #-4]
   13b1c:	mov	r0, #1
   13b20:	bl	11a18 <exit@plt>
   13b24:	ldr	r3, [r6]
   13b28:	ldr	r1, [r6, #4]
   13b2c:	adds	r3, r3, #1
   13b30:	adc	r1, r1, #0
   13b34:	str	r3, [r6]
   13b38:	str	r1, [r6, #4]
   13b3c:	mov	r0, #1
   13b40:	bl	11a18 <exit@plt>
   13b44:	andeq	sl, r2, r8, lsr #29
   13b48:	andeq	sl, r2, r8, asr #28
   13b4c:	andeq	sl, r2, r8, lsl #29
   13b50:	muleq	r2, r8, lr
   13b54:	strdeq	sl, [r2], -r8
   13b58:	andeq	sl, r2, r8, lsl #28
   13b5c:	andeq	sl, r2, r8, lsl lr
   13b60:	andeq	sl, r2, r8, lsr #28
   13b64:	andeq	sl, r2, r8, lsr lr
   13b68:	andeq	sl, r2, r8, asr lr
   13b6c:	andeq	sl, r2, r8, ror lr
   13b70:	andeq	sl, r2, r8, ror #29
   13b74:	strdeq	sl, [r2], -r8
   13b78:	ldrdeq	sl, [r2], -r8
   13b7c:	andeq	sl, r2, r8, lsl pc
   13b80:	andeq	sl, r2, r8, lsr #30
   13b84:	andeq	sl, r2, r8, lsr pc
   13b88:	andeq	sl, r2, r8, asr #30
   13b8c:	andeq	sl, r2, r8, asr pc
   13b90:	andeq	sl, r2, r8, lsl #31
   13b94:	andeq	sl, r2, r8, ror #30
   13b98:	muleq	r2, r8, pc	; <UNPREDICTABLE>
   13b9c:	andeq	sl, r2, r8, lsr #31
   13ba0:			; <UNDEFINED> instruction: 0x0002afb8
   13ba4:	andeq	sl, r2, r8, asr #31
   13ba8:	cmp	r3, #0
   13bac:	bne	13c84 <next@@Base+0x122c>
   13bb0:	movw	r3, #44168	; 0xac88
   13bb4:	movt	r3, #2
   13bb8:	ldr	r2, [r3, #152]	; 0x98
   13bbc:	ldr	r1, [r3, #156]	; 0x9c
   13bc0:	adds	r2, r2, #1
   13bc4:	adc	r1, r1, #0
   13bc8:	str	r2, [r3, #152]	; 0x98
   13bcc:	str	r1, [r3, #156]	; 0x9c
   13bd0:	cmp	r0, #108	; 0x6c
   13bd4:	bne	13c98 <next@@Base+0x1240>
   13bd8:	add	r6, r4, #1
   13bdc:	add	r3, sp, #512	; 0x200
   13be0:	add	r4, r3, r4
   13be4:	mov	r3, #108	; 0x6c
   13be8:	strb	r3, [r4, #-512]	; 0xfffffe00
   13bec:	mov	r0, r5
   13bf0:	bl	12924 <get_char@@Base>
   13bf4:	ldr	r2, [pc, #-100]	; 13b98 <next@@Base+0x1140>
   13bf8:	ldr	r3, [r2, #-8]
   13bfc:	ldr	r1, [r2, #-4]
   13c00:	adds	r3, r3, #1
   13c04:	adc	r1, r1, #0
   13c08:	str	r3, [r2, #-8]
   13c0c:	str	r1, [r2, #-4]
   13c10:	cmp	r0, #115	; 0x73
   13c14:	bne	13cbc <next@@Base+0x1264>
   13c18:	add	r3, sp, #512	; 0x200
   13c1c:	add	r6, r3, r6
   13c20:	mov	r3, #115	; 0x73
   13c24:	strb	r3, [r6, #-512]	; 0xfffffe00
   13c28:	mov	r0, r5
   13c2c:	bl	12924 <get_char@@Base>
   13c30:	ldr	r2, [pc, #-156]	; 13b9c <next@@Base+0x1144>
   13c34:	ldr	r3, [r2, #-8]
   13c38:	ldr	r1, [r2, #-4]
   13c3c:	adds	r3, r3, #1
   13c40:	adc	r1, r1, #0
   13c44:	str	r3, [r2, #-8]
   13c48:	str	r1, [r2, #-4]
   13c4c:	cmp	r0, #101	; 0x65
   13c50:	bne	13cdc <next@@Base+0x1284>
   13c54:	mov	r0, #4
   13c58:	bl	119e8 <malloc@plt>
   13c5c:	mov	r6, r0
   13c60:	bl	12434 <init_token_else@@Base>
   13c64:	ldr	r2, [pc, #-204]	; 13ba0 <next@@Base+0x1148>
   13c68:	ldr	r3, [r2, #-8]
   13c6c:	ldr	r1, [r2, #-4]
   13c70:	adds	r3, r3, #1
   13c74:	adc	r1, r1, #0
   13c78:	str	r3, [r2, #-8]
   13c7c:	str	r1, [r2, #-4]
   13c80:	b	12acc <next@@Base+0x74>
   13c84:	movw	r3, #44168	; 0xac88
   13c88:	movt	r3, #2
   13c8c:	str	r2, [r3, #120]	; 0x78
   13c90:	str	r1, [r3, #124]	; 0x7c
   13c94:	b	13bb0 <next@@Base+0x1158>
   13c98:	add	r2, r3, #768	; 0x300
   13c9c:	ldr	r3, [r2]
   13ca0:	ldr	r1, [r2, #4]
   13ca4:	adds	r3, r3, #1
   13ca8:	adc	r1, r1, #0
   13cac:	str	r3, [r2]
   13cb0:	str	r1, [r2, #4]
   13cb4:	mov	r0, #1
   13cb8:	bl	11a18 <exit@plt>
   13cbc:	ldr	r3, [r2]
   13cc0:	ldr	r1, [r2, #4]
   13cc4:	adds	r3, r3, #1
   13cc8:	adc	r1, r1, #0
   13ccc:	str	r3, [r2]
   13cd0:	str	r1, [r2, #4]
   13cd4:	mov	r0, #1
   13cd8:	bl	11a18 <exit@plt>
   13cdc:	ldr	r3, [r2]
   13ce0:	ldr	r1, [r2, #4]
   13ce4:	adds	r3, r3, #1
   13ce8:	adc	r1, r1, #0
   13cec:	str	r3, [r2]
   13cf0:	str	r1, [r2, #4]
   13cf4:	mov	r0, #1
   13cf8:	bl	11a18 <exit@plt>
   13cfc:	ldr	r4, [pc, #-352]	; 13ba4 <next@@Base+0x114c>
   13d00:	ldr	r3, [r4, #-8]
   13d04:	ldr	r2, [r4, #-4]
   13d08:	adds	r3, r3, #1
   13d0c:	adc	r2, r2, #0
   13d10:	str	r3, [r4, #-8]
   13d14:	str	r2, [r4, #-4]
   13d18:	mov	r0, #4
   13d1c:	bl	119e8 <malloc@plt>
   13d20:	mov	r6, r0
   13d24:	bl	123dc <init_token_eof@@Base>
   13d28:	ldr	r3, [r4]
   13d2c:	ldr	r2, [r4, #4]
   13d30:	adds	r3, r3, #1
   13d34:	adc	r2, r2, #0
   13d38:	str	r3, [r4]
   13d3c:	str	r2, [r4, #4]
   13d40:	b	12acc <next@@Base+0x74>
   13d44:	str	r4, [sp, #-8]!
   13d48:	str	lr, [sp, #4]
   13d4c:	movw	r0, #42080	; 0xa460
   13d50:	movt	r0, #2
   13d54:	bl	18a30 <__gcov_sort_n_vals@@Base+0x4a0>
   13d58:	ldr	r4, [sp]
   13d5c:	add	sp, sp, #4
   13d60:	pop	{pc}		; (ldr pc, [sp], #4)
   13d64:	str	r4, [sp, #-8]!
   13d68:	str	lr, [sp, #4]
   13d6c:	bl	189c0 <__gcov_sort_n_vals@@Base+0x430>
   13d70:	ldr	r4, [sp]
   13d74:	add	sp, sp, #4
   13d78:	pop	{pc}		; (ldr pc, [sp], #4)

00013d7c <init_ast_base@@Base>:
   13d7c:	push	{lr}		; (str lr, [sp, #-4]!)
   13d80:	movw	r3, #45008	; 0xafd0
   13d84:	movt	r3, #2
   13d88:	ldr	ip, [r3]
   13d8c:	ldr	lr, [r3, #4]
   13d90:	adds	ip, ip, #1
   13d94:	adc	lr, lr, #0
   13d98:	str	ip, [r3]
   13d9c:	str	lr, [r3, #4]
   13da0:	str	r1, [r0]
   13da4:	str	r2, [r0, #4]
   13da8:	pop	{pc}		; (ldr pc, [sp], #4)

00013dac <init_ast_base_single@@Base>:
   13dac:	str	r4, [sp, #-8]!
   13db0:	str	lr, [sp, #4]
   13db4:	movw	r4, #45008	; 0xafd0
   13db8:	movt	r4, #2
   13dbc:	ldr	r3, [r4, #8]
   13dc0:	ldr	r2, [r4, #12]
   13dc4:	adds	r3, r3, #1
   13dc8:	adc	r2, r2, #0
   13dcc:	str	r3, [r4, #8]
   13dd0:	str	r2, [r4, #12]
   13dd4:	mov	r2, #0
   13dd8:	bl	13d7c <init_ast_base@@Base>
   13ddc:	ldr	r3, [r4, #16]
   13de0:	ldr	r2, [r4, #20]
   13de4:	adds	r3, r3, #1
   13de8:	adc	r2, r2, #0
   13dec:	str	r3, [r4, #16]
   13df0:	str	r2, [r4, #20]
   13df4:	ldr	r4, [sp]
   13df8:	add	sp, sp, #4
   13dfc:	pop	{pc}		; (ldr pc, [sp], #4)

00013e00 <init_node_id@@Base>:
   13e00:	strd	r4, [sp, #-16]!
   13e04:	str	r6, [sp, #8]
   13e08:	str	lr, [sp, #12]
   13e0c:	mov	r5, r0
   13e10:	mov	r6, r1
   13e14:	movw	r4, #45008	; 0xafd0
   13e18:	movt	r4, #2
   13e1c:	ldr	r3, [r4, #24]
   13e20:	ldr	r2, [r4, #28]
   13e24:	adds	r3, r3, #1
   13e28:	adc	r2, r2, #0
   13e2c:	str	r3, [r4, #24]
   13e30:	str	r2, [r4, #28]
   13e34:	mov	r1, #0
   13e38:	bl	13dac <init_ast_base_single@@Base>
   13e3c:	ldr	r3, [r4, #32]
   13e40:	ldr	r2, [r4, #36]	; 0x24
   13e44:	adds	r3, r3, #1
   13e48:	adc	r2, r2, #0
   13e4c:	str	r3, [r4, #32]
   13e50:	str	r2, [r4, #36]	; 0x24
   13e54:	str	r6, [r5, #8]
   13e58:	ldrd	r4, [sp]
   13e5c:	ldr	r6, [sp, #8]
   13e60:	add	sp, sp, #12
   13e64:	pop	{pc}		; (ldr pc, [sp], #4)

00013e68 <init_node_int@@Base>:
   13e68:	strd	r4, [sp, #-16]!
   13e6c:	str	r6, [sp, #8]
   13e70:	str	lr, [sp, #12]
   13e74:	mov	r5, r0
   13e78:	mov	r6, r1
   13e7c:	movw	r4, #45008	; 0xafd0
   13e80:	movt	r4, #2
   13e84:	ldr	r3, [r4, #40]	; 0x28
   13e88:	ldr	r2, [r4, #44]	; 0x2c
   13e8c:	adds	r3, r3, #1
   13e90:	adc	r2, r2, #0
   13e94:	str	r3, [r4, #40]	; 0x28
   13e98:	str	r2, [r4, #44]	; 0x2c
   13e9c:	mov	r1, #1
   13ea0:	bl	13dac <init_ast_base_single@@Base>
   13ea4:	ldr	r3, [r4, #48]	; 0x30
   13ea8:	ldr	r2, [r4, #52]	; 0x34
   13eac:	adds	r3, r3, #1
   13eb0:	adc	r2, r2, #0
   13eb4:	str	r3, [r4, #48]	; 0x30
   13eb8:	str	r2, [r4, #52]	; 0x34
   13ebc:	str	r6, [r5, #8]
   13ec0:	ldrd	r4, [sp]
   13ec4:	ldr	r6, [sp, #8]
   13ec8:	add	sp, sp, #12
   13ecc:	pop	{pc}		; (ldr pc, [sp], #4)

00013ed0 <init_node_function@@Base>:
   13ed0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13ed4:	strd	r6, [sp, #8]
   13ed8:	str	r8, [sp, #16]
   13edc:	str	lr, [sp, #20]
   13ee0:	mov	r5, r0
   13ee4:	mov	r7, r1
   13ee8:	mov	r6, r2
   13eec:	movw	r4, #45008	; 0xafd0
   13ef0:	movt	r4, #2
   13ef4:	ldr	r3, [r4, #56]	; 0x38
   13ef8:	ldr	r2, [r4, #60]	; 0x3c
   13efc:	adds	r3, r3, #1
   13f00:	adc	r2, r2, #0
   13f04:	str	r3, [r4, #56]	; 0x38
   13f08:	str	r2, [r4, #60]	; 0x3c
   13f0c:	mov	r1, #2
   13f10:	bl	13dac <init_ast_base_single@@Base>
   13f14:	ldr	r3, [r4, #64]	; 0x40
   13f18:	ldr	r2, [r4, #68]	; 0x44
   13f1c:	adds	r3, r3, #1
   13f20:	adc	r2, r2, #0
   13f24:	str	r3, [r4, #64]	; 0x40
   13f28:	str	r2, [r4, #68]	; 0x44
   13f2c:	str	r7, [r5, #8]
   13f30:	str	r6, [r5, #12]
   13f34:	ldrd	r4, [sp]
   13f38:	ldrd	r6, [sp, #8]
   13f3c:	ldr	r8, [sp, #16]
   13f40:	add	sp, sp, #20
   13f44:	pop	{pc}		; (ldr pc, [sp], #4)

00013f48 <init_node_return@@Base>:
   13f48:	strd	r4, [sp, #-16]!
   13f4c:	str	r6, [sp, #8]
   13f50:	str	lr, [sp, #12]
   13f54:	mov	r5, r0
   13f58:	mov	r6, r1
   13f5c:	movw	r4, #45008	; 0xafd0
   13f60:	movt	r4, #2
   13f64:	ldr	r3, [r4, #72]	; 0x48
   13f68:	ldr	r2, [r4, #76]	; 0x4c
   13f6c:	adds	r3, r3, #1
   13f70:	adc	r2, r2, #0
   13f74:	str	r3, [r4, #72]	; 0x48
   13f78:	str	r2, [r4, #76]	; 0x4c
   13f7c:	mov	r1, #3
   13f80:	bl	13dac <init_ast_base_single@@Base>
   13f84:	ldr	r3, [r4, #80]	; 0x50
   13f88:	ldr	r2, [r4, #84]	; 0x54
   13f8c:	adds	r3, r3, #1
   13f90:	adc	r2, r2, #0
   13f94:	str	r3, [r4, #80]	; 0x50
   13f98:	str	r2, [r4, #84]	; 0x54
   13f9c:	str	r6, [r5, #8]
   13fa0:	ldrd	r4, [sp]
   13fa4:	ldr	r6, [sp, #8]
   13fa8:	add	sp, sp, #12
   13fac:	pop	{pc}		; (ldr pc, [sp], #4)

00013fb0 <init_node_if@@Base>:
   13fb0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13fb4:	strd	r6, [sp, #8]
   13fb8:	str	r8, [sp, #16]
   13fbc:	str	lr, [sp, #20]
   13fc0:	mov	r5, r0
   13fc4:	mov	r8, r1
   13fc8:	mov	r7, r2
   13fcc:	mov	r6, r3
   13fd0:	movw	r4, #45008	; 0xafd0
   13fd4:	movt	r4, #2
   13fd8:	ldr	r3, [r4, #88]	; 0x58
   13fdc:	ldr	r2, [r4, #92]	; 0x5c
   13fe0:	adds	r3, r3, #1
   13fe4:	adc	r2, r2, #0
   13fe8:	str	r3, [r4, #88]	; 0x58
   13fec:	str	r2, [r4, #92]	; 0x5c
   13ff0:	mov	r1, #4
   13ff4:	bl	13dac <init_ast_base_single@@Base>
   13ff8:	ldr	r3, [r4, #96]	; 0x60
   13ffc:	ldr	r2, [r4, #100]	; 0x64
   14000:	adds	r3, r3, #1
   14004:	adc	r2, r2, #0
   14008:	str	r3, [r4, #96]	; 0x60
   1400c:	str	r2, [r4, #100]	; 0x64
   14010:	str	r8, [r5, #8]
   14014:	str	r7, [r5, #12]
   14018:	str	r6, [r5, #16]
   1401c:	ldrd	r4, [sp]
   14020:	ldrd	r6, [sp, #8]
   14024:	ldr	r8, [sp, #16]
   14028:	add	sp, sp, #20
   1402c:	pop	{pc}		; (ldr pc, [sp], #4)

00014030 <init_node_boolean_operator@@Base>:
   14030:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14034:	strd	r6, [sp, #8]
   14038:	str	r8, [sp, #16]
   1403c:	str	lr, [sp, #20]
   14040:	mov	r5, r0
   14044:	mov	r8, r1
   14048:	mov	r7, r2
   1404c:	mov	r6, r3
   14050:	movw	r4, #45008	; 0xafd0
   14054:	movt	r4, #2
   14058:	ldr	r3, [r4, #104]	; 0x68
   1405c:	ldr	r2, [r4, #108]	; 0x6c
   14060:	adds	r3, r3, #1
   14064:	adc	r2, r2, #0
   14068:	str	r3, [r4, #104]	; 0x68
   1406c:	str	r2, [r4, #108]	; 0x6c
   14070:	mov	r1, #0
   14074:	bl	13dac <init_ast_base_single@@Base>
   14078:	ldr	r3, [r4, #112]	; 0x70
   1407c:	ldr	r2, [r4, #116]	; 0x74
   14080:	adds	r3, r3, #1
   14084:	adc	r2, r2, #0
   14088:	str	r3, [r4, #112]	; 0x70
   1408c:	str	r2, [r4, #116]	; 0x74
   14090:	mov	r3, #5
   14094:	str	r3, [r5]
   14098:	str	r8, [r5, #16]
   1409c:	str	r7, [r5, #8]
   140a0:	str	r6, [r5, #12]
   140a4:	ldrd	r4, [sp]
   140a8:	ldrd	r6, [sp, #8]
   140ac:	ldr	r8, [sp, #16]
   140b0:	add	sp, sp, #20
   140b4:	pop	{pc}		; (ldr pc, [sp], #4)

000140b8 <free_node_boolean_operator@@Base>:
   140b8:	strd	r4, [sp, #-16]!
   140bc:	str	r6, [sp, #8]
   140c0:	str	lr, [sp, #12]
   140c4:	mov	r5, r0
   140c8:	ldr	r0, [r0, #4]
   140cc:	cmp	r0, #0
   140d0:	beq	14170 <free_node_boolean_operator@@Base+0xb8>
   140d4:	movw	r4, #45008	; 0xafd0
   140d8:	movt	r4, #2
   140dc:	ldr	r3, [r4, #120]	; 0x78
   140e0:	ldr	r2, [r4, #124]	; 0x7c
   140e4:	adds	r3, r3, #1
   140e8:	adc	r2, r2, #0
   140ec:	str	r3, [r4, #120]	; 0x78
   140f0:	str	r2, [r4, #124]	; 0x7c
   140f4:	bl	14194 <free_node@@Base>
   140f8:	ldr	r3, [r4, #136]	; 0x88
   140fc:	ldr	r2, [r4, #140]	; 0x8c
   14100:	adds	r3, r3, #1
   14104:	adc	r2, r2, #0
   14108:	str	r3, [r4, #136]	; 0x88
   1410c:	str	r2, [r4, #140]	; 0x8c
   14110:	ldr	r0, [r5, #8]
   14114:	bl	14194 <free_node@@Base>
   14118:	movw	r4, #45008	; 0xafd0
   1411c:	movt	r4, #2
   14120:	ldr	r3, [r4, #144]	; 0x90
   14124:	ldr	r2, [r4, #148]	; 0x94
   14128:	adds	r3, r3, #1
   1412c:	adc	r2, r2, #0
   14130:	str	r3, [r4, #144]	; 0x90
   14134:	str	r2, [r4, #148]	; 0x94
   14138:	ldr	r0, [r5, #12]
   1413c:	bl	14194 <free_node@@Base>
   14140:	ldr	r3, [r4, #152]	; 0x98
   14144:	ldr	r2, [r4, #156]	; 0x9c
   14148:	adds	r3, r3, #1
   1414c:	adc	r2, r2, #0
   14150:	str	r3, [r4, #152]	; 0x98
   14154:	str	r2, [r4, #156]	; 0x9c
   14158:	mov	r0, r5
   1415c:	bl	11988 <free@plt>
   14160:	ldrd	r4, [sp]
   14164:	ldr	r6, [sp, #8]
   14168:	add	sp, sp, #12
   1416c:	pop	{pc}		; (ldr pc, [sp], #4)
   14170:	movw	r3, #45008	; 0xafd0
   14174:	movt	r3, #2
   14178:	ldr	r2, [r3, #128]	; 0x80
   1417c:	ldr	r1, [r3, #132]	; 0x84
   14180:	adds	r2, r2, #1
   14184:	adc	r1, r1, #0
   14188:	str	r2, [r3, #128]	; 0x80
   1418c:	str	r1, [r3, #132]	; 0x84
   14190:	b	14110 <free_node_boolean_operator@@Base+0x58>

00014194 <free_node@@Base>:
   14194:	str	r4, [sp, #-8]!
   14198:	str	lr, [sp, #4]
   1419c:	ldr	r3, [r0]
   141a0:	cmp	r3, #5
   141a4:	ldrls	pc, [pc, r3, lsl #2]
   141a8:	b	1434c <free_node@@Base+0x1b8>
   141ac:	andeq	r4, r1, r4, asr #3
   141b0:	andeq	r4, r1, ip, lsl #4
   141b4:	andeq	r4, r1, ip, asr #4
   141b8:	andeq	r4, r1, ip, lsl #5
   141bc:	andeq	r4, r1, ip, asr #5
   141c0:	andeq	r4, r1, ip, lsl #6
   141c4:	movw	r4, #45008	; 0xafd0
   141c8:	movt	r4, #2
   141cc:	ldr	r3, [r4, #168]	; 0xa8
   141d0:	ldr	r2, [r4, #172]	; 0xac
   141d4:	adds	r3, r3, #1
   141d8:	adc	r2, r2, #0
   141dc:	str	r3, [r4, #168]	; 0xa8
   141e0:	str	r2, [r4, #172]	; 0xac
   141e4:	bl	14658 <free_node_id@@Base>
   141e8:	ldr	r3, [r4, #216]	; 0xd8
   141ec:	ldr	r2, [r4, #220]	; 0xdc
   141f0:	adds	r3, r3, #1
   141f4:	adc	r2, r2, #0
   141f8:	str	r3, [r4, #216]	; 0xd8
   141fc:	str	r2, [r4, #220]	; 0xdc
   14200:	ldr	r4, [sp]
   14204:	add	sp, sp, #4
   14208:	pop	{pc}		; (ldr pc, [sp], #4)
   1420c:	movw	r4, #45008	; 0xafd0
   14210:	movt	r4, #2
   14214:	ldr	r3, [r4, #176]	; 0xb0
   14218:	ldr	r2, [r4, #180]	; 0xb4
   1421c:	adds	r3, r3, #1
   14220:	adc	r2, r2, #0
   14224:	str	r3, [r4, #176]	; 0xb0
   14228:	str	r2, [r4, #180]	; 0xb4
   1422c:	bl	145c8 <free_node_int@@Base>
   14230:	ldr	r3, [r4, #224]	; 0xe0
   14234:	ldr	r2, [r4, #228]	; 0xe4
   14238:	adds	r3, r3, #1
   1423c:	adc	r2, r2, #0
   14240:	str	r3, [r4, #224]	; 0xe0
   14244:	str	r2, [r4, #228]	; 0xe4
   14248:	b	14200 <free_node@@Base+0x6c>
   1424c:	movw	r4, #45008	; 0xafd0
   14250:	movt	r4, #2
   14254:	ldr	r3, [r4, #184]	; 0xb8
   14258:	ldr	r2, [r4, #188]	; 0xbc
   1425c:	adds	r3, r3, #1
   14260:	adc	r2, r2, #0
   14264:	str	r3, [r4, #184]	; 0xb8
   14268:	str	r2, [r4, #188]	; 0xbc
   1426c:	bl	14530 <free_node_function@@Base>
   14270:	ldr	r3, [r4, #232]	; 0xe8
   14274:	ldr	r2, [r4, #236]	; 0xec
   14278:	adds	r3, r3, #1
   1427c:	adc	r2, r2, #0
   14280:	str	r3, [r4, #232]	; 0xe8
   14284:	str	r2, [r4, #236]	; 0xec
   14288:	b	14200 <free_node@@Base+0x6c>
   1428c:	movw	r4, #45008	; 0xafd0
   14290:	movt	r4, #2
   14294:	ldr	r3, [r4, #192]	; 0xc0
   14298:	ldr	r2, [r4, #196]	; 0xc4
   1429c:	adds	r3, r3, #1
   142a0:	adc	r2, r2, #0
   142a4:	str	r3, [r4, #192]	; 0xc0
   142a8:	str	r2, [r4, #196]	; 0xc4
   142ac:	bl	144a0 <free_node_return@@Base>
   142b0:	ldr	r3, [r4, #240]	; 0xf0
   142b4:	ldr	r2, [r4, #244]	; 0xf4
   142b8:	adds	r3, r3, #1
   142bc:	adc	r2, r2, #0
   142c0:	str	r3, [r4, #240]	; 0xf0
   142c4:	str	r2, [r4, #244]	; 0xf4
   142c8:	b	14200 <free_node@@Base+0x6c>
   142cc:	movw	r4, #45008	; 0xafd0
   142d0:	movt	r4, #2
   142d4:	ldr	r3, [r4, #200]	; 0xc8
   142d8:	ldr	r2, [r4, #204]	; 0xcc
   142dc:	adds	r3, r3, #1
   142e0:	adc	r2, r2, #0
   142e4:	str	r3, [r4, #200]	; 0xc8
   142e8:	str	r2, [r4, #204]	; 0xcc
   142ec:	bl	143ac <free_node_if@@Base>
   142f0:	ldr	r3, [r4, #248]	; 0xf8
   142f4:	ldr	r2, [r4, #252]	; 0xfc
   142f8:	adds	r3, r3, #1
   142fc:	adc	r2, r2, #0
   14300:	str	r3, [r4, #248]	; 0xf8
   14304:	str	r2, [r4, #252]	; 0xfc
   14308:	b	14200 <free_node@@Base+0x6c>
   1430c:	movw	r4, #45008	; 0xafd0
   14310:	movt	r4, #2
   14314:	ldr	r3, [r4, #208]	; 0xd0
   14318:	ldr	r2, [r4, #212]	; 0xd4
   1431c:	adds	r3, r3, #1
   14320:	adc	r2, r2, #0
   14324:	str	r3, [r4, #208]	; 0xd0
   14328:	str	r2, [r4, #212]	; 0xd4
   1432c:	bl	140b8 <free_node_boolean_operator@@Base>
   14330:	ldr	r3, [r4, #256]	; 0x100
   14334:	ldr	r2, [r4, #260]	; 0x104
   14338:	adds	r3, r3, #1
   1433c:	adc	r2, r2, #0
   14340:	str	r3, [r4, #256]	; 0x100
   14344:	str	r2, [r4, #260]	; 0x104
   14348:	b	14200 <free_node@@Base+0x6c>
   1434c:	movw	r4, #45008	; 0xafd0
   14350:	movt	r4, #2
   14354:	ldr	r3, [r4, #160]	; 0xa0
   14358:	ldr	r2, [r4, #164]	; 0xa4
   1435c:	adds	r3, r3, #1
   14360:	adc	r2, r2, #0
   14364:	str	r3, [r4, #160]	; 0xa0
   14368:	str	r2, [r4, #164]	; 0xa4
   1436c:	movw	r3, #43680	; 0xaaa0
   14370:	movt	r3, #2
   14374:	ldr	r3, [r3]
   14378:	mov	r2, #31
   1437c:	mov	r1, #1
   14380:	movw	r0, #36780	; 0x8fac
   14384:	movt	r0, #1
   14388:	bl	119ac <fwrite@plt>
   1438c:	ldr	r3, [r4, #264]	; 0x108
   14390:	ldr	r2, [r4, #268]	; 0x10c
   14394:	adds	r3, r3, #1
   14398:	adc	r2, r2, #0
   1439c:	str	r3, [r4, #264]	; 0x108
   143a0:	str	r2, [r4, #268]	; 0x10c
   143a4:	mov	r0, #1
   143a8:	bl	11a18 <exit@plt>

000143ac <free_node_if@@Base>:
   143ac:	strd	r4, [sp, #-16]!
   143b0:	str	r6, [sp, #8]
   143b4:	str	lr, [sp, #12]
   143b8:	mov	r5, r0
   143bc:	ldr	r0, [r0, #4]
   143c0:	cmp	r0, #0
   143c4:	beq	1447c <free_node_if@@Base+0xd0>
   143c8:	ldr	r4, [pc, #204]	; 1449c <free_node_if@@Base+0xf0>
   143cc:	ldr	r3, [r4]
   143d0:	ldr	r2, [r4, #4]
   143d4:	adds	r3, r3, #1
   143d8:	adc	r2, r2, #0
   143dc:	str	r3, [r4]
   143e0:	str	r2, [r4, #4]
   143e4:	bl	14194 <free_node@@Base>
   143e8:	ldr	r3, [r4, #16]
   143ec:	ldr	r2, [r4, #20]
   143f0:	adds	r3, r3, #1
   143f4:	adc	r2, r2, #0
   143f8:	str	r3, [r4, #16]
   143fc:	str	r2, [r4, #20]
   14400:	ldr	r0, [r5, #8]
   14404:	bl	14194 <free_node@@Base>
   14408:	ldr	r4, [pc, #140]	; 1449c <free_node_if@@Base+0xf0>
   1440c:	ldr	r3, [r4, #24]
   14410:	ldr	r2, [r4, #28]
   14414:	adds	r3, r3, #1
   14418:	adc	r2, r2, #0
   1441c:	str	r3, [r4, #24]
   14420:	str	r2, [r4, #28]
   14424:	ldr	r0, [r5, #12]
   14428:	bl	14194 <free_node@@Base>
   1442c:	ldr	r3, [r4, #32]
   14430:	ldr	r2, [r4, #36]	; 0x24
   14434:	adds	r3, r3, #1
   14438:	adc	r2, r2, #0
   1443c:	str	r3, [r4, #32]
   14440:	str	r2, [r4, #36]	; 0x24
   14444:	ldr	r0, [r5, #16]
   14448:	bl	14194 <free_node@@Base>
   1444c:	ldr	r3, [r4, #40]	; 0x28
   14450:	ldr	r2, [r4, #44]	; 0x2c
   14454:	adds	r3, r3, #1
   14458:	adc	r2, r2, #0
   1445c:	str	r3, [r4, #40]	; 0x28
   14460:	str	r2, [r4, #44]	; 0x2c
   14464:	mov	r0, r5
   14468:	bl	11988 <free@plt>
   1446c:	ldrd	r4, [sp]
   14470:	ldr	r6, [sp, #8]
   14474:	add	sp, sp, #12
   14478:	pop	{pc}		; (ldr pc, [sp], #4)
   1447c:	ldr	r2, [pc, #24]	; 1449c <free_node_if@@Base+0xf0>
   14480:	ldr	r3, [r2, #8]
   14484:	ldr	r1, [r2, #12]
   14488:	adds	r3, r3, #1
   1448c:	adc	r1, r1, #0
   14490:	str	r3, [r2, #8]
   14494:	str	r1, [r2, #12]
   14498:	b	14400 <free_node_if@@Base+0x54>
   1449c:	andeq	fp, r2, r0, ror #1

000144a0 <free_node_return@@Base>:
   144a0:	strd	r4, [sp, #-16]!
   144a4:	str	r6, [sp, #8]
   144a8:	str	lr, [sp, #12]
   144ac:	mov	r5, r0
   144b0:	ldr	r0, [r0, #4]
   144b4:	cmp	r0, #0
   144b8:	beq	1450c <free_node_return@@Base+0x6c>
   144bc:	ldr	r4, [pc, #104]	; 1452c <free_node_return@@Base+0x8c>
   144c0:	ldr	r3, [r4]
   144c4:	ldr	r2, [r4, #4]
   144c8:	adds	r3, r3, #1
   144cc:	adc	r2, r2, #0
   144d0:	str	r3, [r4]
   144d4:	str	r2, [r4, #4]
   144d8:	bl	14194 <free_node@@Base>
   144dc:	ldr	r3, [r4, #16]
   144e0:	ldr	r2, [r4, #20]
   144e4:	adds	r3, r3, #1
   144e8:	adc	r2, r2, #0
   144ec:	str	r3, [r4, #16]
   144f0:	str	r2, [r4, #20]
   144f4:	mov	r0, r5
   144f8:	bl	11988 <free@plt>
   144fc:	ldrd	r4, [sp]
   14500:	ldr	r6, [sp, #8]
   14504:	add	sp, sp, #12
   14508:	pop	{pc}		; (ldr pc, [sp], #4)
   1450c:	ldr	r2, [pc, #24]	; 1452c <free_node_return@@Base+0x8c>
   14510:	ldr	r3, [r2, #8]
   14514:	ldr	r1, [r2, #12]
   14518:	adds	r3, r3, #1
   1451c:	adc	r1, r1, #0
   14520:	str	r3, [r2, #8]
   14524:	str	r1, [r2, #12]
   14528:	b	144f4 <free_node_return@@Base+0x54>
   1452c:	andeq	fp, r2, r0, lsl r1

00014530 <free_node_function@@Base>:
   14530:	strd	r4, [sp, #-16]!
   14534:	str	r6, [sp, #8]
   14538:	str	lr, [sp, #12]
   1453c:	mov	r5, r0
   14540:	ldr	r0, [r0, #4]
   14544:	cmp	r0, #0
   14548:	beq	145a4 <free_node_function@@Base+0x74>
   1454c:	ldr	r4, [pc, #112]	; 145c4 <free_node_function@@Base+0x94>
   14550:	ldr	r3, [r4, #-8]
   14554:	ldr	r2, [r4, #-4]
   14558:	adds	r3, r3, #1
   1455c:	adc	r2, r2, #0
   14560:	str	r3, [r4, #-8]
   14564:	str	r2, [r4, #-4]
   14568:	bl	14194 <free_node@@Base>
   1456c:	ldr	r3, [r4, #8]
   14570:	ldr	r2, [r4, #12]
   14574:	adds	r3, r3, #1
   14578:	adc	r2, r2, #0
   1457c:	str	r3, [r4, #8]
   14580:	str	r2, [r4, #12]
   14584:	ldr	r0, [r5, #8]
   14588:	bl	11988 <free@plt>
   1458c:	mov	r0, r5
   14590:	bl	11988 <free@plt>
   14594:	ldrd	r4, [sp]
   14598:	ldr	r6, [sp, #8]
   1459c:	add	sp, sp, #12
   145a0:	pop	{pc}		; (ldr pc, [sp], #4)
   145a4:	ldr	r2, [pc, #24]	; 145c4 <free_node_function@@Base+0x94>
   145a8:	ldr	r3, [r2]
   145ac:	ldr	r1, [r2, #4]
   145b0:	adds	r3, r3, #1
   145b4:	adc	r1, r1, #0
   145b8:	str	r3, [r2]
   145bc:	str	r1, [r2, #4]
   145c0:	b	14584 <free_node_function@@Base+0x54>
   145c4:	andeq	fp, r2, r0, lsr r1

000145c8 <free_node_int@@Base>:
   145c8:	strd	r4, [sp, #-16]!
   145cc:	str	r6, [sp, #8]
   145d0:	str	lr, [sp, #12]
   145d4:	mov	r5, r0
   145d8:	ldr	r0, [r0, #4]
   145dc:	cmp	r0, #0
   145e0:	beq	14634 <free_node_int@@Base+0x6c>
   145e4:	ldr	r4, [pc, #104]	; 14654 <free_node_int@@Base+0x8c>
   145e8:	ldr	r3, [r4]
   145ec:	ldr	r2, [r4, #4]
   145f0:	adds	r3, r3, #1
   145f4:	adc	r2, r2, #0
   145f8:	str	r3, [r4]
   145fc:	str	r2, [r4, #4]
   14600:	bl	14194 <free_node@@Base>
   14604:	ldr	r3, [r4, #16]
   14608:	ldr	r2, [r4, #20]
   1460c:	adds	r3, r3, #1
   14610:	adc	r2, r2, #0
   14614:	str	r3, [r4, #16]
   14618:	str	r2, [r4, #20]
   1461c:	mov	r0, r5
   14620:	bl	11988 <free@plt>
   14624:	ldrd	r4, [sp]
   14628:	ldr	r6, [sp, #8]
   1462c:	add	sp, sp, #12
   14630:	pop	{pc}		; (ldr pc, [sp], #4)
   14634:	ldr	r2, [pc, #24]	; 14654 <free_node_int@@Base+0x8c>
   14638:	ldr	r3, [r2, #8]
   1463c:	ldr	r1, [r2, #12]
   14640:	adds	r3, r3, #1
   14644:	adc	r1, r1, #0
   14648:	str	r3, [r2, #8]
   1464c:	str	r1, [r2, #12]
   14650:	b	1461c <free_node_int@@Base+0x54>
   14654:	andeq	fp, r2, r0, asr #2

00014658 <free_node_id@@Base>:
   14658:	strd	r4, [sp, #-16]!
   1465c:	str	r6, [sp, #8]
   14660:	str	lr, [sp, #12]
   14664:	mov	r5, r0
   14668:	ldr	r0, [r0, #4]
   1466c:	cmp	r0, #0
   14670:	beq	146c4 <free_node_id@@Base+0x6c>
   14674:	ldr	r4, [pc, #104]	; 146e4 <free_node_id@@Base+0x8c>
   14678:	ldr	r3, [r4, #-8]
   1467c:	ldr	r2, [r4, #-4]
   14680:	adds	r3, r3, #1
   14684:	adc	r2, r2, #0
   14688:	str	r3, [r4, #-8]
   1468c:	str	r2, [r4, #-4]
   14690:	bl	14194 <free_node@@Base>
   14694:	ldr	r3, [r4, #8]
   14698:	ldr	r2, [r4, #12]
   1469c:	adds	r3, r3, #1
   146a0:	adc	r2, r2, #0
   146a4:	str	r3, [r4, #8]
   146a8:	str	r2, [r4, #12]
   146ac:	mov	r0, r5
   146b0:	bl	11988 <free@plt>
   146b4:	ldrd	r4, [sp]
   146b8:	ldr	r6, [sp, #8]
   146bc:	add	sp, sp, #12
   146c0:	pop	{pc}		; (ldr pc, [sp], #4)
   146c4:	ldr	r2, [pc, #24]	; 146e4 <free_node_id@@Base+0x8c>
   146c8:	ldr	r3, [r2]
   146cc:	ldr	r1, [r2, #4]
   146d0:	adds	r3, r3, #1
   146d4:	adc	r1, r1, #0
   146d8:	str	r3, [r2]
   146dc:	str	r1, [r2, #4]
   146e0:	b	146ac <free_node_id@@Base+0x54>
   146e4:	andeq	fp, r2, r0, ror #2

000146e8 <get_boolean_op_value@@Base>:
   146e8:	strd	r4, [sp, #-16]!
   146ec:	str	r6, [sp, #8]
   146f0:	str	lr, [sp, #12]
   146f4:	ldr	r5, [r0, #4]
   146f8:	mov	r1, #2
   146fc:	mov	r0, r5
   14700:	bl	11a90 <strnlen@plt>
   14704:	cmp	r0, #2
   14708:	beq	14780 <get_boolean_op_value@@Base+0x98>
   1470c:	ldrb	r3, [r5]
   14710:	cmp	r3, #60	; 0x3c
   14714:	beq	14954 <get_boolean_op_value@@Base+0x26c>
   14718:	cmp	r3, #62	; 0x3e
   1471c:	beq	14988 <get_boolean_op_value@@Base+0x2a0>
   14720:	cmp	r3, #33	; 0x21
   14724:	beq	14930 <get_boolean_op_value@@Base+0x248>
   14728:	ldr	r4, [pc, #672]	; 149d0 <get_boolean_op_value@@Base+0x2e8>
   1472c:	ldr	r3, [r4, #64]	; 0x40
   14730:	ldr	r2, [r4, #68]	; 0x44
   14734:	adds	r3, r3, #1
   14738:	adc	r2, r2, #0
   1473c:	str	r3, [r4, #64]	; 0x40
   14740:	str	r2, [r4, #68]	; 0x44
   14744:	movw	r3, #43680	; 0xaaa0
   14748:	movt	r3, #2
   1474c:	mov	r2, r5
   14750:	movw	r1, #36836	; 0x8fe4
   14754:	movt	r1, #1
   14758:	ldr	r0, [r3]
   1475c:	bl	11a3c <fprintf@plt>
   14760:	ldr	r3, [r4, #96]	; 0x60
   14764:	ldr	r2, [r4, #100]	; 0x64
   14768:	adds	r3, r3, #1
   1476c:	adc	r2, r2, #0
   14770:	str	r3, [r4, #96]	; 0x60
   14774:	str	r2, [r4, #100]	; 0x64
   14778:	mov	r0, #1
   1477c:	bl	11a18 <exit@plt>
   14780:	mov	r4, r0
   14784:	mov	r2, #2
   14788:	movw	r1, #36812	; 0x8fcc
   1478c:	movt	r1, #1
   14790:	mov	r0, r5
   14794:	bl	11ae4 <strncmp@plt>
   14798:	cmp	r0, #0
   1479c:	beq	149ac <get_boolean_op_value@@Base+0x2c4>
   147a0:	mov	r2, #2
   147a4:	movw	r1, #36816	; 0x8fd0
   147a8:	movt	r1, #1
   147ac:	mov	r0, r5
   147b0:	bl	11ae4 <strncmp@plt>
   147b4:	cmp	r0, #0
   147b8:	beq	148a4 <get_boolean_op_value@@Base+0x1bc>
   147bc:	mov	r2, #2
   147c0:	movw	r1, #36820	; 0x8fd4
   147c4:	movt	r1, #1
   147c8:	mov	r0, r5
   147cc:	bl	11ae4 <strncmp@plt>
   147d0:	cmp	r0, #0
   147d4:	beq	148c8 <get_boolean_op_value@@Base+0x1e0>
   147d8:	mov	r2, #2
   147dc:	movw	r1, #36824	; 0x8fd8
   147e0:	movt	r1, #1
   147e4:	mov	r0, r5
   147e8:	bl	11ae4 <strncmp@plt>
   147ec:	cmp	r0, #0
   147f0:	beq	148e8 <get_boolean_op_value@@Base+0x200>
   147f4:	mov	r2, #2
   147f8:	movw	r1, #36828	; 0x8fdc
   147fc:	movt	r1, #1
   14800:	mov	r0, r5
   14804:	bl	11ae4 <strncmp@plt>
   14808:	cmp	r0, #0
   1480c:	beq	1490c <get_boolean_op_value@@Base+0x224>
   14810:	ldr	r2, [pc, #440]	; 149d0 <get_boolean_op_value@@Base+0x2e8>
   14814:	ldr	r3, [r2, #40]	; 0x28
   14818:	ldr	r1, [r2, #44]	; 0x2c
   1481c:	adds	r3, r3, #1
   14820:	adc	r1, r1, #0
   14824:	str	r3, [r2, #40]	; 0x28
   14828:	str	r1, [r2, #44]	; 0x2c
   1482c:	mov	r2, #2
   14830:	movw	r1, #36832	; 0x8fe0
   14834:	movt	r1, #1
   14838:	mov	r0, r5
   1483c:	bl	11ae4 <strncmp@plt>
   14840:	cmp	r0, #0
   14844:	moveq	r4, #5
   14848:	beq	14974 <get_boolean_op_value@@Base+0x28c>
   1484c:	ldr	r4, [pc, #380]	; 149d0 <get_boolean_op_value@@Base+0x2e8>
   14850:	ldr	r3, [r4, #48]	; 0x30
   14854:	ldr	r2, [r4, #52]	; 0x34
   14858:	adds	r3, r3, #1
   1485c:	adc	r2, r2, #0
   14860:	str	r3, [r4, #48]	; 0x30
   14864:	str	r2, [r4, #52]	; 0x34
   14868:	movw	r3, #43680	; 0xaaa0
   1486c:	movt	r3, #2
   14870:	mov	r2, r5
   14874:	movw	r1, #36836	; 0x8fe4
   14878:	movt	r1, #1
   1487c:	ldr	r0, [r3]
   14880:	bl	11a3c <fprintf@plt>
   14884:	ldr	r3, [r4, #56]	; 0x38
   14888:	ldr	r2, [r4, #60]	; 0x3c
   1488c:	adds	r3, r3, #1
   14890:	adc	r2, r2, #0
   14894:	str	r3, [r4, #56]	; 0x38
   14898:	str	r2, [r4, #60]	; 0x3c
   1489c:	mov	r0, #1
   148a0:	bl	11a18 <exit@plt>
   148a4:	ldr	r2, [pc, #292]	; 149d0 <get_boolean_op_value@@Base+0x2e8>
   148a8:	ldr	r3, [r2, #8]
   148ac:	ldr	r1, [r2, #12]
   148b0:	adds	r3, r3, #1
   148b4:	adc	r1, r1, #0
   148b8:	str	r3, [r2, #8]
   148bc:	str	r1, [r2, #12]
   148c0:	mov	r4, #1
   148c4:	b	14974 <get_boolean_op_value@@Base+0x28c>
   148c8:	ldr	r2, [pc, #256]	; 149d0 <get_boolean_op_value@@Base+0x2e8>
   148cc:	ldr	r3, [r2, #16]
   148d0:	ldr	r1, [r2, #20]
   148d4:	adds	r3, r3, #1
   148d8:	adc	r1, r1, #0
   148dc:	str	r3, [r2, #16]
   148e0:	str	r1, [r2, #20]
   148e4:	b	14974 <get_boolean_op_value@@Base+0x28c>
   148e8:	ldr	r2, [pc, #224]	; 149d0 <get_boolean_op_value@@Base+0x2e8>
   148ec:	ldr	r3, [r2, #24]
   148f0:	ldr	r1, [r2, #28]
   148f4:	adds	r3, r3, #1
   148f8:	adc	r1, r1, #0
   148fc:	str	r3, [r2, #24]
   14900:	str	r1, [r2, #28]
   14904:	mov	r4, #3
   14908:	b	14974 <get_boolean_op_value@@Base+0x28c>
   1490c:	ldr	r2, [pc, #188]	; 149d0 <get_boolean_op_value@@Base+0x2e8>
   14910:	ldr	r3, [r2, #32]
   14914:	ldr	r1, [r2, #36]	; 0x24
   14918:	adds	r3, r3, #1
   1491c:	adc	r1, r1, #0
   14920:	str	r3, [r2, #32]
   14924:	str	r1, [r2, #36]	; 0x24
   14928:	mov	r4, #4
   1492c:	b	14974 <get_boolean_op_value@@Base+0x28c>
   14930:	ldr	r2, [pc, #152]	; 149d0 <get_boolean_op_value@@Base+0x2e8>
   14934:	ldr	r3, [r2, #72]	; 0x48
   14938:	ldr	r1, [r2, #76]	; 0x4c
   1493c:	adds	r3, r3, #1
   14940:	adc	r1, r1, #0
   14944:	str	r3, [r2, #72]	; 0x48
   14948:	str	r1, [r2, #76]	; 0x4c
   1494c:	mov	r4, #8
   14950:	b	14974 <get_boolean_op_value@@Base+0x28c>
   14954:	ldr	r2, [pc, #116]	; 149d0 <get_boolean_op_value@@Base+0x2e8>
   14958:	ldr	r3, [r2, #80]	; 0x50
   1495c:	ldr	r1, [r2, #84]	; 0x54
   14960:	adds	r3, r3, #1
   14964:	adc	r1, r1, #0
   14968:	str	r3, [r2, #80]	; 0x50
   1496c:	str	r1, [r2, #84]	; 0x54
   14970:	mov	r4, #6
   14974:	mov	r0, r4
   14978:	ldrd	r4, [sp]
   1497c:	ldr	r6, [sp, #8]
   14980:	add	sp, sp, #12
   14984:	pop	{pc}		; (ldr pc, [sp], #4)
   14988:	ldr	r2, [pc, #64]	; 149d0 <get_boolean_op_value@@Base+0x2e8>
   1498c:	ldr	r3, [r2, #88]	; 0x58
   14990:	ldr	r1, [r2, #92]	; 0x5c
   14994:	adds	r3, r3, #1
   14998:	adc	r1, r1, #0
   1499c:	str	r3, [r2, #88]	; 0x58
   149a0:	str	r1, [r2, #92]	; 0x5c
   149a4:	mov	r4, #7
   149a8:	b	14974 <get_boolean_op_value@@Base+0x28c>
   149ac:	ldr	r2, [pc, #28]	; 149d0 <get_boolean_op_value@@Base+0x2e8>
   149b0:	ldr	r3, [r2]
   149b4:	ldr	r1, [r2, #4]
   149b8:	adds	r3, r3, #1
   149bc:	adc	r1, r1, #0
   149c0:	str	r3, [r2]
   149c4:	str	r1, [r2, #4]
   149c8:	mov	r4, #0
   149cc:	b	14974 <get_boolean_op_value@@Base+0x28c>
   149d0:	andeq	fp, r2, r0, ror r1
   149d4:	str	r4, [sp, #-8]!
   149d8:	str	lr, [sp, #4]
   149dc:	movw	r0, #42364	; 0xa57c
   149e0:	movt	r0, #2
   149e4:	bl	18a30 <__gcov_sort_n_vals@@Base+0x4a0>
   149e8:	ldr	r4, [sp]
   149ec:	add	sp, sp, #4
   149f0:	pop	{pc}		; (ldr pc, [sp], #4)
   149f4:	str	r4, [sp, #-8]!
   149f8:	str	lr, [sp, #4]
   149fc:	bl	189c0 <__gcov_sort_n_vals@@Base+0x430>
   14a00:	ldr	r4, [sp]
   14a04:	add	sp, sp, #4
   14a08:	pop	{pc}		; (ldr pc, [sp], #4)

00014a0c <init_grammar@@Base>:
   14a0c:	movw	r3, #45528	; 0xb1d8
   14a10:	movt	r3, #2
   14a14:	ldr	r2, [r3]
   14a18:	ldr	ip, [r3, #4]
   14a1c:	adds	r2, r2, #1
   14a20:	adc	ip, ip, #0
   14a24:	str	r2, [r3]
   14a28:	str	ip, [r3, #4]
   14a2c:	str	r1, [r0]
   14a30:	bx	lr

00014a34 <destroy_grammar@@Base>:
   14a34:	movw	r3, #45528	; 0xb1d8
   14a38:	movt	r3, #2
   14a3c:	ldr	r2, [r3, #8]
   14a40:	ldr	r1, [r3, #12]
   14a44:	adds	r2, r2, #1
   14a48:	adc	r1, r1, #0
   14a4c:	str	r2, [r3, #8]
   14a50:	str	r1, [r3, #12]
   14a54:	bx	lr

00014a58 <read_return_expression@@Base>:
   14a58:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14a5c:	strd	r6, [sp, #8]
   14a60:	str	r8, [sp, #16]
   14a64:	str	lr, [sp, #20]
   14a68:	mov	r5, r0
   14a6c:	movw	r3, #45528	; 0xb1d8
   14a70:	movt	r3, #2
   14a74:	ldr	r2, [r3, #16]
   14a78:	ldr	r1, [r3, #20]
   14a7c:	adds	r2, r2, #1
   14a80:	adc	r1, r1, #0
   14a84:	str	r2, [r3, #16]
   14a88:	str	r1, [r3, #20]
   14a8c:	ldr	r0, [r0]
   14a90:	bl	12a58 <next@@Base>
   14a94:	ldr	r3, [r0]
   14a98:	cmp	r3, #1
   14a9c:	bne	14b90 <read_return_expression@@Base+0x138>
   14aa0:	mov	r6, r0
   14aa4:	movw	r4, #45528	; 0xb1d8
   14aa8:	movt	r4, #2
   14aac:	ldr	r3, [r4, #32]
   14ab0:	ldr	r2, [r4, #36]	; 0x24
   14ab4:	adds	r3, r3, #1
   14ab8:	adc	r2, r2, #0
   14abc:	str	r3, [r4, #32]
   14ac0:	str	r2, [r4, #36]	; 0x24
   14ac4:	mov	r0, #12
   14ac8:	bl	119e8 <malloc@plt>
   14acc:	mov	r7, r0
   14ad0:	ldr	r1, [r6, #4]
   14ad4:	bl	13e68 <init_node_int@@Base>
   14ad8:	ldr	r3, [r4, #40]	; 0x28
   14adc:	ldr	r2, [r4, #44]	; 0x2c
   14ae0:	adds	r3, r3, #1
   14ae4:	adc	r2, r2, #0
   14ae8:	str	r3, [r4, #40]	; 0x28
   14aec:	str	r2, [r4, #44]	; 0x2c
   14af0:	mov	r0, r6
   14af4:	bl	124c8 <free_token_int_value@@Base>
   14af8:	ldr	r3, [r4, #48]	; 0x30
   14afc:	ldr	r2, [r4, #52]	; 0x34
   14b00:	adds	r3, r3, #1
   14b04:	adc	r2, r2, #0
   14b08:	str	r3, [r4, #48]	; 0x30
   14b0c:	str	r2, [r4, #52]	; 0x34
   14b10:	mov	r0, #12
   14b14:	bl	119e8 <malloc@plt>
   14b18:	mov	r6, r0
   14b1c:	mov	r1, r7
   14b20:	bl	13f48 <init_node_return@@Base>
   14b24:	ldr	r3, [r4, #56]	; 0x38
   14b28:	ldr	r2, [r4, #60]	; 0x3c
   14b2c:	adds	r3, r3, #1
   14b30:	adc	r2, r2, #0
   14b34:	str	r3, [r4, #56]	; 0x38
   14b38:	str	r2, [r4, #60]	; 0x3c
   14b3c:	ldr	r0, [r5]
   14b40:	bl	12a58 <next@@Base>
   14b44:	ldr	r3, [r0]
   14b48:	cmp	r3, #8
   14b4c:	bne	14bcc <read_return_expression@@Base+0x174>
   14b50:	movw	r4, #45528	; 0xb1d8
   14b54:	movt	r4, #2
   14b58:	ldr	r3, [r4, #72]	; 0x48
   14b5c:	ldr	r2, [r4, #76]	; 0x4c
   14b60:	adds	r3, r3, #1
   14b64:	adc	r2, r2, #0
   14b68:	str	r3, [r4, #72]	; 0x48
   14b6c:	str	r2, [r4, #76]	; 0x4c
   14b70:	bl	12650 <free_token_semicolon@@Base>
   14b74:	ldr	r3, [r4, #80]	; 0x50
   14b78:	ldr	r2, [r4, #84]	; 0x54
   14b7c:	adds	r3, r3, #1
   14b80:	adc	r2, r2, #0
   14b84:	str	r3, [r4, #80]	; 0x50
   14b88:	str	r2, [r4, #84]	; 0x54
   14b8c:	b	14bb4 <read_return_expression@@Base+0x15c>
   14b90:	movw	r3, #45528	; 0xb1d8
   14b94:	movt	r3, #2
   14b98:	ldr	r2, [r3, #24]
   14b9c:	ldr	r1, [r3, #28]
   14ba0:	adds	r2, r2, #1
   14ba4:	adc	r1, r1, #0
   14ba8:	str	r2, [r3, #24]
   14bac:	str	r1, [r3, #28]
   14bb0:	mov	r6, #0
   14bb4:	mov	r0, r6
   14bb8:	ldrd	r4, [sp]
   14bbc:	ldrd	r6, [sp, #8]
   14bc0:	ldr	r8, [sp, #16]
   14bc4:	add	sp, sp, #20
   14bc8:	pop	{pc}		; (ldr pc, [sp], #4)
   14bcc:	ldr	r2, [r4, #64]	; 0x40
   14bd0:	ldr	r1, [r4, #68]	; 0x44
   14bd4:	adds	r2, r2, #1
   14bd8:	adc	r1, r1, #0
   14bdc:	str	r2, [r4, #64]	; 0x40
   14be0:	str	r1, [r4, #68]	; 0x44
   14be4:	mov	r6, #0
   14be8:	b	14bb4 <read_return_expression@@Base+0x15c>

00014bec <read_boolean_unary_expression@@Base>:
   14bec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14bf0:	strd	r6, [sp, #8]
   14bf4:	str	r8, [sp, #16]
   14bf8:	str	lr, [sp, #20]
   14bfc:	mov	r5, r0
   14c00:	movw	r3, #45528	; 0xb1d8
   14c04:	movt	r3, #2
   14c08:	ldr	r2, [r3, #88]	; 0x58
   14c0c:	ldr	r1, [r3, #92]	; 0x5c
   14c10:	adds	r2, r2, #1
   14c14:	adc	r1, r1, #0
   14c18:	str	r2, [r3, #88]	; 0x58
   14c1c:	str	r1, [r3, #92]	; 0x5c
   14c20:	mov	r0, #20
   14c24:	bl	119e8 <malloc@plt>
   14c28:	mov	r6, r0
   14c2c:	ldr	r0, [r5]
   14c30:	bl	12a58 <next@@Base>
   14c34:	ldr	r3, [r0]
   14c38:	cmp	r3, #12
   14c3c:	bne	14d6c <read_boolean_unary_expression@@Base+0x180>
   14c40:	mov	r8, r0
   14c44:	movw	r4, #45528	; 0xb1d8
   14c48:	movt	r4, #2
   14c4c:	ldr	r3, [r4, #104]	; 0x68
   14c50:	ldr	r2, [r4, #108]	; 0x6c
   14c54:	adds	r3, r3, #1
   14c58:	adc	r2, r2, #0
   14c5c:	str	r3, [r4, #104]	; 0x68
   14c60:	str	r2, [r4, #108]	; 0x6c
   14c64:	bl	146e8 <get_boolean_op_value@@Base>
   14c68:	mov	r7, r0
   14c6c:	ldr	r3, [r4, #120]	; 0x78
   14c70:	ldr	r2, [r4, #124]	; 0x7c
   14c74:	adds	r3, r3, #1
   14c78:	adc	r2, r2, #0
   14c7c:	str	r3, [r4, #120]	; 0x78
   14c80:	str	r2, [r4, #124]	; 0x7c
   14c84:	mov	r0, r8
   14c88:	bl	12730 <free_token_boolean_op@@Base>
   14c8c:	ldr	r3, [r4, #128]	; 0x80
   14c90:	ldr	r2, [r4, #132]	; 0x84
   14c94:	adds	r3, r3, #1
   14c98:	adc	r2, r2, #0
   14c9c:	str	r3, [r4, #128]	; 0x80
   14ca0:	str	r2, [r4, #132]	; 0x84
   14ca4:	ldr	r0, [r5]
   14ca8:	bl	12a58 <next@@Base>
   14cac:	mov	r8, r0
   14cb0:	ldr	r3, [r0]
   14cb4:	cmp	r3, #1
   14cb8:	bne	14db4 <read_boolean_unary_expression@@Base+0x1c8>
   14cbc:	movw	r4, #45528	; 0xb1d8
   14cc0:	movt	r4, #2
   14cc4:	ldr	r3, [r4, #144]	; 0x90
   14cc8:	ldr	r2, [r4, #148]	; 0x94
   14ccc:	adds	r3, r3, #1
   14cd0:	adc	r2, r2, #0
   14cd4:	str	r3, [r4, #144]	; 0x90
   14cd8:	str	r2, [r4, #148]	; 0x94
   14cdc:	mov	r0, #12
   14ce0:	bl	119e8 <malloc@plt>
   14ce4:	mov	r5, r0
   14ce8:	ldr	r1, [r8, #4]
   14cec:	bl	13e68 <init_node_int@@Base>
   14cf0:	ldr	r3, [r4, #160]	; 0xa0
   14cf4:	ldr	r2, [r4, #164]	; 0xa4
   14cf8:	adds	r3, r3, #1
   14cfc:	adc	r2, r2, #0
   14d00:	str	r3, [r4, #160]	; 0xa0
   14d04:	str	r2, [r4, #164]	; 0xa4
   14d08:	mov	r0, r8
   14d0c:	bl	124c8 <free_token_int_value@@Base>
   14d10:	ldr	r3, [r4, #168]	; 0xa8
   14d14:	ldr	r2, [r4, #172]	; 0xac
   14d18:	adds	r3, r3, #1
   14d1c:	adc	r2, r2, #0
   14d20:	str	r3, [r4, #168]	; 0xa8
   14d24:	str	r2, [r4, #172]	; 0xac
   14d28:	mov	r3, #0
   14d2c:	mov	r2, r5
   14d30:	mov	r1, r7
   14d34:	mov	r0, r6
   14d38:	bl	14030 <init_node_boolean_operator@@Base>
   14d3c:	ldr	r3, [r4, #176]	; 0xb0
   14d40:	ldr	r2, [r4, #180]	; 0xb4
   14d44:	adds	r3, r3, #1
   14d48:	adc	r2, r2, #0
   14d4c:	str	r3, [r4, #176]	; 0xb0
   14d50:	str	r2, [r4, #180]	; 0xb4
   14d54:	mov	r0, r6
   14d58:	ldrd	r4, [sp]
   14d5c:	ldrd	r6, [sp, #8]
   14d60:	ldr	r8, [sp, #16]
   14d64:	add	sp, sp, #20
   14d68:	pop	{pc}		; (ldr pc, [sp], #4)
   14d6c:	movw	r4, #45528	; 0xb1d8
   14d70:	movt	r4, #2
   14d74:	ldr	r3, [r4, #96]	; 0x60
   14d78:	ldr	r2, [r4, #100]	; 0x64
   14d7c:	adds	r3, r3, #1
   14d80:	adc	r2, r2, #0
   14d84:	str	r3, [r4, #96]	; 0x60
   14d88:	str	r2, [r4, #100]	; 0x64
   14d8c:	mov	r0, r6
   14d90:	bl	140b8 <free_node_boolean_operator@@Base>
   14d94:	ldr	r3, [r4, #112]	; 0x70
   14d98:	ldr	r2, [r4, #116]	; 0x74
   14d9c:	adds	r3, r3, #1
   14da0:	adc	r2, r2, #0
   14da4:	str	r3, [r4, #112]	; 0x70
   14da8:	str	r2, [r4, #116]	; 0x74
   14dac:	mov	r6, #0
   14db0:	b	14d54 <read_boolean_unary_expression@@Base+0x168>
   14db4:	movw	r4, #45528	; 0xb1d8
   14db8:	movt	r4, #2
   14dbc:	ldr	r3, [r4, #136]	; 0x88
   14dc0:	ldr	r2, [r4, #140]	; 0x8c
   14dc4:	adds	r3, r3, #1
   14dc8:	adc	r2, r2, #0
   14dcc:	str	r3, [r4, #136]	; 0x88
   14dd0:	str	r2, [r4, #140]	; 0x8c
   14dd4:	mov	r0, r6
   14dd8:	bl	140b8 <free_node_boolean_operator@@Base>
   14ddc:	ldr	r3, [r4, #152]	; 0x98
   14de0:	ldr	r2, [r4, #156]	; 0x9c
   14de4:	adds	r3, r3, #1
   14de8:	adc	r2, r2, #0
   14dec:	str	r3, [r4, #152]	; 0x98
   14df0:	str	r2, [r4, #156]	; 0x9c
   14df4:	mov	r6, #0
   14df8:	b	14d54 <read_boolean_unary_expression@@Base+0x168>

00014dfc <read_boolean_binary_expression@@Base>:
   14dfc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14e00:	strd	r6, [sp, #8]
   14e04:	strd	r8, [sp, #16]
   14e08:	str	sl, [sp, #24]
   14e0c:	str	lr, [sp, #28]
   14e10:	mov	r5, r0
   14e14:	movw	r3, #45528	; 0xb1d8
   14e18:	movt	r3, #2
   14e1c:	ldr	r2, [r3, #184]	; 0xb8
   14e20:	ldr	r1, [r3, #188]	; 0xbc
   14e24:	adds	r2, r2, #1
   14e28:	adc	r1, r1, #0
   14e2c:	str	r2, [r3, #184]	; 0xb8
   14e30:	str	r1, [r3, #188]	; 0xbc
   14e34:	ldr	r0, [r0]
   14e38:	bl	12a58 <next@@Base>
   14e3c:	mov	r6, r0
   14e40:	ldr	r0, [r0]
   14e44:	cmp	r0, #1
   14e48:	beq	14efc <read_boolean_binary_expression@@Base+0x100>
   14e4c:	movw	r3, #45528	; 0xb1d8
   14e50:	movt	r3, #2
   14e54:	ldr	r2, [r3, #192]	; 0xc0
   14e58:	ldr	r1, [r3, #196]	; 0xc4
   14e5c:	adds	r2, r2, #1
   14e60:	adc	r1, r1, #0
   14e64:	str	r2, [r3, #192]	; 0xc0
   14e68:	str	r1, [r3, #196]	; 0xc4
   14e6c:	cmp	r0, #12
   14e70:	movne	r5, #0
   14e74:	beq	14e94 <read_boolean_binary_expression@@Base+0x98>
   14e78:	mov	r0, r5
   14e7c:	ldrd	r4, [sp]
   14e80:	ldrd	r6, [sp, #8]
   14e84:	ldrd	r8, [sp, #16]
   14e88:	ldr	sl, [sp, #24]
   14e8c:	add	sp, sp, #28
   14e90:	pop	{pc}		; (ldr pc, [sp], #4)
   14e94:	mov	r4, r3
   14e98:	ldr	r3, [r3, #208]	; 0xd0
   14e9c:	ldr	r2, [r4, #212]	; 0xd4
   14ea0:	adds	r3, r3, #1
   14ea4:	adc	r2, r2, #0
   14ea8:	str	r3, [r4, #208]	; 0xd0
   14eac:	str	r2, [r4, #212]	; 0xd4
   14eb0:	mov	r1, r6
   14eb4:	ldr	r0, [r5]
   14eb8:	bl	128c8 <push_back@@Base>
   14ebc:	ldr	r3, [r4, #216]	; 0xd8
   14ec0:	ldr	r2, [r4, #220]	; 0xdc
   14ec4:	adds	r3, r3, #1
   14ec8:	adc	r2, r2, #0
   14ecc:	str	r3, [r4, #216]	; 0xd8
   14ed0:	str	r2, [r4, #220]	; 0xdc
   14ed4:	mov	r0, r5
   14ed8:	bl	14bec <read_boolean_unary_expression@@Base>
   14edc:	mov	r5, r0
   14ee0:	ldr	r3, [r4, #224]	; 0xe0
   14ee4:	ldr	r2, [r4, #228]	; 0xe4
   14ee8:	adds	r3, r3, #1
   14eec:	adc	r2, r2, #0
   14ef0:	str	r3, [r4, #224]	; 0xe0
   14ef4:	str	r2, [r4, #228]	; 0xe4
   14ef8:	b	14e78 <read_boolean_binary_expression@@Base+0x7c>
   14efc:	movw	r4, #45528	; 0xb1d8
   14f00:	movt	r4, #2
   14f04:	ldr	r3, [r4, #200]	; 0xc8
   14f08:	ldr	r2, [r4, #204]	; 0xcc
   14f0c:	adds	r3, r3, #1
   14f10:	adc	r2, r2, #0
   14f14:	str	r3, [r4, #200]	; 0xc8
   14f18:	str	r2, [r4, #204]	; 0xcc
   14f1c:	mov	r0, #12
   14f20:	bl	119e8 <malloc@plt>
   14f24:	mov	r7, r0
   14f28:	ldr	r1, [r6, #4]
   14f2c:	bl	13e68 <init_node_int@@Base>
   14f30:	ldr	r3, [r4, #232]	; 0xe8
   14f34:	ldr	r2, [r4, #236]	; 0xec
   14f38:	adds	r3, r3, #1
   14f3c:	adc	r2, r2, #0
   14f40:	str	r3, [r4, #232]	; 0xe8
   14f44:	str	r2, [r4, #236]	; 0xec
   14f48:	mov	r0, r6
   14f4c:	bl	124c8 <free_token_int_value@@Base>
   14f50:	ldr	r3, [r4, #240]	; 0xf0
   14f54:	ldr	r2, [r4, #244]	; 0xf4
   14f58:	adds	r3, r3, #1
   14f5c:	adc	r2, r2, #0
   14f60:	str	r3, [r4, #240]	; 0xf0
   14f64:	str	r2, [r4, #244]	; 0xf4
   14f68:	ldr	r0, [r5]
   14f6c:	bl	12a58 <next@@Base>
   14f70:	mov	r8, r0
   14f74:	ldr	r3, [r0]
   14f78:	cmp	r3, #12
   14f7c:	bne	1509c <read_boolean_binary_expression@@Base+0x2a0>
   14f80:	movw	r4, #45528	; 0xb1d8
   14f84:	movt	r4, #2
   14f88:	ldr	r3, [r4, #256]	; 0x100
   14f8c:	ldr	r1, [r4, #260]	; 0x104
   14f90:	adds	r3, r3, #1
   14f94:	adc	r1, r1, #0
   14f98:	str	r3, [r4, #256]	; 0x100
   14f9c:	str	r1, [r4, #260]	; 0x104
   14fa0:	bl	146e8 <get_boolean_op_value@@Base>
   14fa4:	mov	r6, r0
   14fa8:	ldr	r3, [r4, #272]	; 0x110
   14fac:	ldr	r1, [r4, #276]	; 0x114
   14fb0:	adds	r3, r3, #1
   14fb4:	adc	r1, r1, #0
   14fb8:	str	r3, [r4, #272]	; 0x110
   14fbc:	str	r1, [r4, #276]	; 0x114
   14fc0:	mov	r0, r8
   14fc4:	bl	12730 <free_token_boolean_op@@Base>
   14fc8:	ldr	r3, [r4, #280]	; 0x118
   14fcc:	ldr	r2, [r4, #284]	; 0x11c
   14fd0:	adds	r3, r3, #1
   14fd4:	adc	r2, r2, #0
   14fd8:	str	r3, [r4, #280]	; 0x118
   14fdc:	str	r2, [r4, #284]	; 0x11c
   14fe0:	ldr	r0, [r5]
   14fe4:	bl	12a58 <next@@Base>
   14fe8:	mov	r9, r0
   14fec:	ldr	r3, [r0]
   14ff0:	cmp	r3, #1
   14ff4:	bne	150e4 <read_boolean_binary_expression@@Base+0x2e8>
   14ff8:	movw	r4, #45528	; 0xb1d8
   14ffc:	movt	r4, #2
   15000:	ldr	r3, [r4, #296]	; 0x128
   15004:	ldr	r1, [r4, #300]	; 0x12c
   15008:	adds	r3, r3, #1
   1500c:	adc	r1, r1, #0
   15010:	str	r3, [r4, #296]	; 0x128
   15014:	str	r1, [r4, #300]	; 0x12c
   15018:	mov	r0, #12
   1501c:	bl	119e8 <malloc@plt>
   15020:	mov	r8, r0
   15024:	ldr	r1, [r9, #4]
   15028:	bl	13e68 <init_node_int@@Base>
   1502c:	ldr	r3, [r4, #312]	; 0x138
   15030:	ldr	r2, [r4, #316]	; 0x13c
   15034:	adds	r3, r3, #1
   15038:	adc	r2, r2, #0
   1503c:	str	r3, [r4, #312]	; 0x138
   15040:	str	r2, [r4, #316]	; 0x13c
   15044:	mov	r0, r9
   15048:	bl	124c8 <free_token_int_value@@Base>
   1504c:	ldr	r3, [r4, #320]	; 0x140
   15050:	ldr	r2, [r4, #324]	; 0x144
   15054:	adds	r3, r3, #1
   15058:	adc	r2, r2, #0
   1505c:	str	r3, [r4, #320]	; 0x140
   15060:	str	r2, [r4, #324]	; 0x144
   15064:	mov	r0, #20
   15068:	bl	119e8 <malloc@plt>
   1506c:	mov	r5, r0
   15070:	mov	r3, r8
   15074:	mov	r2, r7
   15078:	mov	r1, r6
   1507c:	bl	14030 <init_node_boolean_operator@@Base>
   15080:	ldr	r3, [r4, #328]	; 0x148
   15084:	ldr	r2, [r4, #332]	; 0x14c
   15088:	adds	r3, r3, #1
   1508c:	adc	r2, r2, #0
   15090:	str	r3, [r4, #328]	; 0x148
   15094:	str	r2, [r4, #332]	; 0x14c
   15098:	b	14e78 <read_boolean_binary_expression@@Base+0x7c>
   1509c:	movw	r4, #45528	; 0xb1d8
   150a0:	movt	r4, #2
   150a4:	ldr	r3, [r4, #248]	; 0xf8
   150a8:	ldr	r2, [r4, #252]	; 0xfc
   150ac:	adds	r3, r3, #1
   150b0:	adc	r2, r2, #0
   150b4:	str	r3, [r4, #248]	; 0xf8
   150b8:	str	r2, [r4, #252]	; 0xfc
   150bc:	mov	r0, r7
   150c0:	bl	14194 <free_node@@Base>
   150c4:	ldr	r3, [r4, #264]	; 0x108
   150c8:	ldr	r2, [r4, #268]	; 0x10c
   150cc:	adds	r3, r3, #1
   150d0:	adc	r2, r2, #0
   150d4:	str	r3, [r4, #264]	; 0x108
   150d8:	str	r2, [r4, #268]	; 0x10c
   150dc:	mov	r5, #0
   150e0:	b	14e78 <read_boolean_binary_expression@@Base+0x7c>
   150e4:	movw	r4, #45528	; 0xb1d8
   150e8:	movt	r4, #2
   150ec:	ldr	r3, [r4, #288]	; 0x120
   150f0:	ldr	r1, [r4, #292]	; 0x124
   150f4:	adds	r3, r3, #1
   150f8:	adc	r1, r1, #0
   150fc:	str	r3, [r4, #288]	; 0x120
   15100:	str	r1, [r4, #292]	; 0x124
   15104:	mov	r0, r7
   15108:	bl	14194 <free_node@@Base>
   1510c:	ldr	r3, [r4, #304]	; 0x130
   15110:	ldr	r2, [r4, #308]	; 0x134
   15114:	adds	r3, r3, #1
   15118:	adc	r2, r2, #0
   1511c:	str	r3, [r4, #304]	; 0x130
   15120:	str	r2, [r4, #308]	; 0x134
   15124:	mov	r5, #0
   15128:	b	14e78 <read_boolean_binary_expression@@Base+0x7c>

0001512c <read_single_boolean_expression@@Base>:
   1512c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15130:	strd	r6, [sp, #8]
   15134:	str	r8, [sp, #16]
   15138:	str	lr, [sp, #20]
   1513c:	cmp	r1, #0
   15140:	beq	151e8 <read_single_boolean_expression@@Base+0xbc>
   15144:	mov	r5, r2
   15148:	mov	r6, r3
   1514c:	ldr	r3, [r2]
   15150:	cmp	r3, #0
   15154:	beq	15228 <read_single_boolean_expression@@Base+0xfc>
   15158:	ldr	r4, [pc, #292]	; 15284 <read_single_boolean_expression@@Base+0x158>
   1515c:	ldr	r3, [r4, #16]
   15160:	ldr	r2, [r4, #20]
   15164:	adds	r3, r3, #1
   15168:	adc	r2, r2, #0
   1516c:	str	r3, [r4, #16]
   15170:	str	r2, [r4, #20]
   15174:	bl	14dfc <read_boolean_binary_expression@@Base>
   15178:	mov	r8, r0
   1517c:	ldr	r3, [r4, #32]
   15180:	ldr	r2, [r4, #36]	; 0x24
   15184:	adds	r3, r3, #1
   15188:	adc	r2, r2, #0
   1518c:	str	r3, [r4, #32]
   15190:	str	r2, [r4, #36]	; 0x24
   15194:	mov	r0, #20
   15198:	bl	119e8 <malloc@plt>
   1519c:	mov	r7, r0
   151a0:	mov	r3, r8
   151a4:	mov	r2, #0
   151a8:	mov	r1, r6
   151ac:	bl	14030 <init_node_boolean_operator@@Base>
   151b0:	mov	r3, #0
   151b4:	str	r3, [r5]
   151b8:	ldr	r3, [r4, #40]	; 0x28
   151bc:	ldr	r2, [r4, #44]	; 0x2c
   151c0:	adds	r3, r3, #1
   151c4:	adc	r2, r2, #0
   151c8:	str	r3, [r4, #40]	; 0x28
   151cc:	str	r2, [r4, #44]	; 0x2c
   151d0:	mov	r0, r7
   151d4:	ldrd	r4, [sp]
   151d8:	ldrd	r6, [sp, #8]
   151dc:	ldr	r8, [sp, #16]
   151e0:	add	sp, sp, #20
   151e4:	pop	{pc}		; (ldr pc, [sp], #4)
   151e8:	ldr	r4, [pc, #148]	; 15284 <read_single_boolean_expression@@Base+0x158>
   151ec:	ldr	r3, [r4]
   151f0:	ldr	r2, [r4, #4]
   151f4:	adds	r3, r3, #1
   151f8:	adc	r2, r2, #0
   151fc:	str	r3, [r4]
   15200:	str	r2, [r4, #4]
   15204:	bl	14dfc <read_boolean_binary_expression@@Base>
   15208:	mov	r7, r0
   1520c:	ldr	r3, [r4, #8]
   15210:	ldr	r2, [r4, #12]
   15214:	adds	r3, r3, #1
   15218:	adc	r2, r2, #0
   1521c:	str	r3, [r4, #8]
   15220:	str	r2, [r4, #12]
   15224:	b	151d0 <read_single_boolean_expression@@Base+0xa4>
   15228:	ldr	r4, [pc, #84]	; 15284 <read_single_boolean_expression@@Base+0x158>
   1522c:	ldr	r3, [r4, #24]
   15230:	ldr	r2, [r4, #28]
   15234:	adds	r3, r3, #1
   15238:	adc	r2, r2, #0
   1523c:	str	r3, [r4, #24]
   15240:	str	r2, [r4, #28]
   15244:	movw	r3, #43680	; 0xaaa0
   15248:	movt	r3, #2
   1524c:	mov	r2, #0
   15250:	ldr	r2, [r2, #4]
   15254:	movw	r1, #36972	; 0x906c
   15258:	movt	r1, #1
   1525c:	ldr	r0, [r3]
   15260:	bl	11a3c <fprintf@plt>
   15264:	ldr	r3, [r4, #48]	; 0x30
   15268:	ldr	r2, [r4, #52]	; 0x34
   1526c:	adds	r3, r3, #1
   15270:	adc	r2, r2, #0
   15274:	str	r3, [r4, #48]	; 0x30
   15278:	str	r2, [r4, #52]	; 0x34
   1527c:	mov	r0, #1
   15280:	bl	11a18 <exit@plt>
   15284:	andeq	fp, r2, r8, lsr #6

00015288 <read_boolean_expression@@Base>:
   15288:	strd	r4, [sp, #-20]!	; 0xffffffec
   1528c:	strd	r6, [sp, #8]
   15290:	str	lr, [sp, #16]
   15294:	sub	sp, sp, #12
   15298:	mov	r5, r0
   1529c:	ldr	r4, [pc, #552]	; 154cc <read_boolean_expression@@Base+0x244>
   152a0:	ldr	r3, [r4, #-8]
   152a4:	ldr	r2, [r4, #-4]
   152a8:	adds	r3, r3, #1
   152ac:	adc	r2, r2, #0
   152b0:	str	r3, [r4, #-8]
   152b4:	str	r2, [r4, #-4]
   152b8:	mov	r3, #0
   152bc:	str	r3, [sp, #4]
   152c0:	ldr	r0, [r0]
   152c4:	bl	12a58 <next@@Base>
   152c8:	ldr	r3, [r4]
   152cc:	ldr	r2, [r4, #4]
   152d0:	adds	r3, r3, #1
   152d4:	adc	r2, r2, #0
   152d8:	str	r3, [r4]
   152dc:	str	r2, [r4, #4]
   152e0:	ldr	r3, [r0]
   152e4:	cmp	r3, #4
   152e8:	beq	15478 <read_boolean_expression@@Base+0x1f0>
   152ec:	mov	r6, #0
   152f0:	b	15374 <read_boolean_expression@@Base+0xec>
   152f4:	ldr	r3, [r4, #16]
   152f8:	ldr	r2, [r4, #20]
   152fc:	adds	r3, r3, #1
   15300:	adc	r2, r2, #0
   15304:	str	r3, [r4, #16]
   15308:	str	r2, [r4, #20]
   1530c:	mov	r1, r0
   15310:	ldr	r0, [r5]
   15314:	bl	128c8 <push_back@@Base>
   15318:	ldr	r3, [r4, #40]	; 0x28
   1531c:	ldr	r2, [r4, #44]	; 0x2c
   15320:	adds	r3, r3, #1
   15324:	adc	r2, r2, #0
   15328:	str	r3, [r4, #40]	; 0x28
   1532c:	str	r2, [r4, #44]	; 0x2c
   15330:	mov	r3, r7
   15334:	add	r2, sp, #4
   15338:	mov	r1, r6
   1533c:	mov	r0, r5
   15340:	bl	1512c <read_single_boolean_expression@@Base>
   15344:	mov	r6, r0
   15348:	ldr	r3, [r4, #48]	; 0x30
   1534c:	ldr	r2, [r4, #52]	; 0x34
   15350:	adds	r3, r3, #1
   15354:	adc	r2, r2, #0
   15358:	str	r3, [r4, #48]	; 0x30
   1535c:	str	r2, [r4, #52]	; 0x34
   15360:	ldr	r0, [r5]
   15364:	bl	12a58 <next@@Base>
   15368:	ldr	r3, [r0]
   1536c:	cmp	r3, #4
   15370:	beq	1547c <read_boolean_expression@@Base+0x1f4>
   15374:	cmp	r3, #3
   15378:	beq	1542c <read_boolean_expression@@Base+0x1a4>
   1537c:	cmp	r3, #12
   15380:	beq	153e8 <read_boolean_expression@@Base+0x160>
   15384:	cmp	r3, #1
   15388:	beq	152f4 <read_boolean_expression@@Base+0x6c>
   1538c:	ldr	r4, [pc, #312]	; 154cc <read_boolean_expression@@Base+0x244>
   15390:	ldr	r3, [r4, #8]
   15394:	ldr	r2, [r4, #12]
   15398:	adds	r3, r3, #1
   1539c:	adc	r2, r2, #0
   153a0:	str	r3, [r4, #8]
   153a4:	str	r2, [r4, #12]
   153a8:	movw	r3, #43680	; 0xaaa0
   153ac:	movt	r3, #2
   153b0:	ldr	r3, [r3]
   153b4:	mov	r2, #33	; 0x21
   153b8:	mov	r1, #1
   153bc:	movw	r0, #37028	; 0x90a4
   153c0:	movt	r0, #1
   153c4:	bl	119ac <fwrite@plt>
   153c8:	ldr	r3, [r4, #72]	; 0x48
   153cc:	ldr	r2, [r4, #76]	; 0x4c
   153d0:	adds	r3, r3, #1
   153d4:	adc	r2, r2, #0
   153d8:	str	r3, [r4, #72]	; 0x48
   153dc:	str	r2, [r4, #76]	; 0x4c
   153e0:	mov	r0, #1
   153e4:	bl	11a18 <exit@plt>
   153e8:	ldr	r3, [r4, #32]
   153ec:	ldr	r2, [r4, #36]	; 0x24
   153f0:	adds	r3, r3, #1
   153f4:	adc	r2, r2, #0
   153f8:	str	r3, [r4, #32]
   153fc:	str	r2, [r4, #36]	; 0x24
   15400:	bl	146e8 <get_boolean_op_value@@Base>
   15404:	mov	r7, r0
   15408:	ldr	r3, [r4, #56]	; 0x38
   1540c:	ldr	r2, [r4, #60]	; 0x3c
   15410:	adds	r3, r3, #1
   15414:	adc	r2, r2, #0
   15418:	str	r3, [r4, #56]	; 0x38
   1541c:	str	r2, [r4, #60]	; 0x3c
   15420:	mov	r3, #1
   15424:	str	r3, [sp, #4]
   15428:	b	15360 <read_boolean_expression@@Base+0xd8>
   1542c:	ldr	r3, [r4, #24]
   15430:	ldr	r2, [r4, #28]
   15434:	adds	r3, r3, #1
   15438:	adc	r2, r2, #0
   1543c:	str	r3, [r4, #24]
   15440:	str	r2, [r4, #28]
   15444:	mov	r3, r7
   15448:	add	r2, sp, #4
   1544c:	mov	r1, r6
   15450:	mov	r0, r5
   15454:	bl	1512c <read_single_boolean_expression@@Base>
   15458:	mov	r6, r0
   1545c:	ldr	r3, [r4, #64]	; 0x40
   15460:	ldr	r2, [r4, #68]	; 0x44
   15464:	adds	r3, r3, #1
   15468:	adc	r2, r2, #0
   1546c:	str	r3, [r4, #64]	; 0x40
   15470:	str	r2, [r4, #68]	; 0x44
   15474:	b	15360 <read_boolean_expression@@Base+0xd8>
   15478:	mov	r6, #0
   1547c:	ldr	r4, [pc, #72]	; 154cc <read_boolean_expression@@Base+0x244>
   15480:	ldr	r3, [r4, #80]	; 0x50
   15484:	ldr	r2, [r4, #84]	; 0x54
   15488:	adds	r3, r3, #1
   1548c:	adc	r2, r2, #0
   15490:	str	r3, [r4, #80]	; 0x50
   15494:	str	r2, [r4, #84]	; 0x54
   15498:	bl	12570 <free_token_cpar@@Base>
   1549c:	ldr	r3, [r4, #88]	; 0x58
   154a0:	ldr	r2, [r4, #92]	; 0x5c
   154a4:	adds	r3, r3, #1
   154a8:	adc	r2, r2, #0
   154ac:	str	r3, [r4, #88]	; 0x58
   154b0:	str	r2, [r4, #92]	; 0x5c
   154b4:	mov	r0, r6
   154b8:	add	sp, sp, #12
   154bc:	ldrd	r4, [sp]
   154c0:	ldrd	r6, [sp, #8]
   154c4:	add	sp, sp, #16
   154c8:	pop	{pc}		; (ldr pc, [sp], #4)
   154cc:	andeq	fp, r2, r8, ror #6

000154d0 <read_if_statement@@Base>:
   154d0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   154d4:	strd	r6, [sp, #8]
   154d8:	str	r8, [sp, #16]
   154dc:	str	lr, [sp, #20]
   154e0:	mov	r5, r0
   154e4:	ldr	r2, [pc, #464]	; 156bc <read_if_statement@@Base+0x1ec>
   154e8:	ldr	r3, [r2]
   154ec:	ldr	r1, [r2, #4]
   154f0:	adds	r3, r3, #1
   154f4:	adc	r1, r1, #0
   154f8:	str	r3, [r2]
   154fc:	str	r1, [r2, #4]
   15500:	ldr	r0, [r0]
   15504:	bl	12a58 <next@@Base>
   15508:	ldr	r3, [r0]
   1550c:	cmp	r3, #3
   15510:	bne	1563c <read_if_statement@@Base+0x16c>
   15514:	ldr	r4, [pc, #416]	; 156bc <read_if_statement@@Base+0x1ec>
   15518:	ldr	r3, [r4, #16]
   1551c:	ldr	r2, [r4, #20]
   15520:	adds	r3, r3, #1
   15524:	adc	r2, r2, #0
   15528:	str	r3, [r4, #16]
   1552c:	str	r2, [r4, #20]
   15530:	bl	12538 <free_token_opar@@Base>
   15534:	ldr	r3, [r4, #24]
   15538:	ldr	r2, [r4, #28]
   1553c:	adds	r3, r3, #1
   15540:	adc	r2, r2, #0
   15544:	str	r3, [r4, #24]
   15548:	str	r2, [r4, #28]
   1554c:	mov	r0, r5
   15550:	bl	15288 <read_boolean_expression@@Base>
   15554:	mov	r6, r0
   15558:	ldr	r3, [r4, #32]
   1555c:	ldr	r2, [r4, #36]	; 0x24
   15560:	adds	r3, r3, #1
   15564:	adc	r2, r2, #0
   15568:	str	r3, [r4, #32]
   1556c:	str	r2, [r4, #36]	; 0x24
   15570:	mov	r0, r5
   15574:	bl	156c0 <read_body@@Base>
   15578:	mov	r7, r0
   1557c:	ldr	r3, [r4, #40]	; 0x28
   15580:	ldr	r2, [r4, #44]	; 0x2c
   15584:	adds	r3, r3, #1
   15588:	adc	r2, r2, #0
   1558c:	str	r3, [r4, #40]	; 0x28
   15590:	str	r2, [r4, #44]	; 0x2c
   15594:	ldr	r0, [r5]
   15598:	bl	12a58 <next@@Base>
   1559c:	ldr	r3, [r0]
   155a0:	cmp	r3, #11
   155a4:	beq	15660 <read_if_statement@@Base+0x190>
   155a8:	ldr	r4, [pc, #268]	; 156bc <read_if_statement@@Base+0x1ec>
   155ac:	ldr	r3, [r4, #56]	; 0x38
   155b0:	ldr	r2, [r4, #60]	; 0x3c
   155b4:	adds	r3, r3, #1
   155b8:	adc	r2, r2, #0
   155bc:	str	r3, [r4, #56]	; 0x38
   155c0:	str	r2, [r4, #60]	; 0x3c
   155c4:	mov	r1, r0
   155c8:	ldr	r0, [r5]
   155cc:	bl	128c8 <push_back@@Base>
   155d0:	ldr	r3, [r4, #80]	; 0x50
   155d4:	ldr	r2, [r4, #84]	; 0x54
   155d8:	adds	r3, r3, #1
   155dc:	adc	r2, r2, #0
   155e0:	str	r3, [r4, #80]	; 0x50
   155e4:	str	r2, [r4, #84]	; 0x54
   155e8:	mov	r5, #0
   155ec:	mov	r0, #20
   155f0:	bl	119e8 <malloc@plt>
   155f4:	mov	r4, r0
   155f8:	mov	r3, r5
   155fc:	mov	r2, r7
   15600:	mov	r1, r6
   15604:	bl	13fb0 <init_node_if@@Base>
   15608:	ldr	r2, [pc, #172]	; 156bc <read_if_statement@@Base+0x1ec>
   1560c:	ldr	r3, [r2, #88]	; 0x58
   15610:	ldr	r1, [r2, #92]	; 0x5c
   15614:	adds	r3, r3, #1
   15618:	adc	r1, r1, #0
   1561c:	str	r3, [r2, #88]	; 0x58
   15620:	str	r1, [r2, #92]	; 0x5c
   15624:	mov	r0, r4
   15628:	ldrd	r4, [sp]
   1562c:	ldrd	r6, [sp, #8]
   15630:	ldr	r8, [sp, #16]
   15634:	add	sp, sp, #20
   15638:	pop	{pc}		; (ldr pc, [sp], #4)
   1563c:	ldr	r2, [pc, #120]	; 156bc <read_if_statement@@Base+0x1ec>
   15640:	ldr	r3, [r2, #8]
   15644:	ldr	r1, [r2, #12]
   15648:	adds	r3, r3, #1
   1564c:	adc	r1, r1, #0
   15650:	str	r3, [r2, #8]
   15654:	str	r1, [r2, #12]
   15658:	mov	r4, #0
   1565c:	b	15624 <read_if_statement@@Base+0x154>
   15660:	ldr	r3, [r4, #48]	; 0x30
   15664:	ldr	r2, [r4, #52]	; 0x34
   15668:	adds	r3, r3, #1
   1566c:	adc	r2, r2, #0
   15670:	str	r3, [r4, #48]	; 0x30
   15674:	str	r2, [r4, #52]	; 0x34
   15678:	bl	126f8 <free_token_else@@Base>
   1567c:	ldr	r3, [r4, #64]	; 0x40
   15680:	ldr	r2, [r4, #68]	; 0x44
   15684:	adds	r3, r3, #1
   15688:	adc	r2, r2, #0
   1568c:	str	r3, [r4, #64]	; 0x40
   15690:	str	r2, [r4, #68]	; 0x44
   15694:	mov	r0, r5
   15698:	bl	156c0 <read_body@@Base>
   1569c:	mov	r5, r0
   156a0:	ldr	r3, [r4, #72]	; 0x48
   156a4:	ldr	r2, [r4, #76]	; 0x4c
   156a8:	adds	r3, r3, #1
   156ac:	adc	r2, r2, #0
   156b0:	str	r3, [r4, #72]	; 0x48
   156b4:	str	r2, [r4, #76]	; 0x4c
   156b8:	b	155ec <read_if_statement@@Base+0x11c>
   156bc:	andeq	fp, r2, r8, asr #7

000156c0 <read_body@@Base>:
   156c0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   156c4:	strd	r6, [sp, #8]
   156c8:	str	r8, [sp, #16]
   156cc:	str	lr, [sp, #20]
   156d0:	mov	r5, r0
   156d4:	ldr	r2, [pc, #604]	; 15938 <read_body@@Base+0x278>
   156d8:	ldr	r3, [r2]
   156dc:	ldr	r1, [r2, #4]
   156e0:	adds	r3, r3, #1
   156e4:	adc	r1, r1, #0
   156e8:	str	r3, [r2]
   156ec:	str	r1, [r2, #4]
   156f0:	ldr	r0, [r0]
   156f4:	bl	12a58 <next@@Base>
   156f8:	ldr	r3, [r0]
   156fc:	cmp	r3, #5
   15700:	bne	15774 <read_body@@Base+0xb4>
   15704:	ldr	r4, [pc, #556]	; 15938 <read_body@@Base+0x278>
   15708:	ldr	r3, [r4, #16]
   1570c:	ldr	r2, [r4, #20]
   15710:	adds	r3, r3, #1
   15714:	adc	r2, r2, #0
   15718:	str	r3, [r4, #16]
   1571c:	str	r2, [r4, #20]
   15720:	bl	125a8 <free_token_obra@@Base>
   15724:	ldr	r3, [r4, #24]
   15728:	ldr	r2, [r4, #28]
   1572c:	adds	r3, r3, #1
   15730:	adc	r2, r2, #0
   15734:	str	r3, [r4, #24]
   15738:	str	r2, [r4, #28]
   1573c:	ldr	r0, [r5]
   15740:	bl	12a58 <next@@Base>
   15744:	ldr	r3, [r4, #32]
   15748:	ldr	r2, [r4, #36]	; 0x24
   1574c:	adds	r3, r3, #1
   15750:	adc	r2, r2, #0
   15754:	str	r3, [r4, #32]
   15758:	str	r2, [r4, #36]	; 0x24
   1575c:	ldr	r3, [r0]
   15760:	cmp	r3, #6
   15764:	beq	158f8 <read_body@@Base+0x238>
   15768:	mov	r8, #0
   1576c:	mov	r6, r8
   15770:	b	15814 <read_body@@Base+0x154>
   15774:	ldr	r2, [pc, #444]	; 15938 <read_body@@Base+0x278>
   15778:	ldr	r3, [r2, #8]
   1577c:	ldr	r1, [r2, #12]
   15780:	adds	r3, r3, #1
   15784:	adc	r1, r1, #0
   15788:	str	r3, [r2, #8]
   1578c:	str	r1, [r2, #12]
   15790:	mov	r6, #0
   15794:	b	15864 <read_body@@Base+0x1a4>
   15798:	ldr	r3, [r4, #48]	; 0x30
   1579c:	ldr	r2, [r4, #52]	; 0x34
   157a0:	adds	r3, r3, #1
   157a4:	adc	r2, r2, #0
   157a8:	str	r3, [r4, #48]	; 0x30
   157ac:	str	r2, [r4, #52]	; 0x34
   157b0:	bl	12618 <free_token_return@@Base>
   157b4:	ldr	r3, [r4, #64]	; 0x40
   157b8:	ldr	r2, [r4, #68]	; 0x44
   157bc:	adds	r3, r3, #1
   157c0:	adc	r2, r2, #0
   157c4:	str	r3, [r4, #64]	; 0x40
   157c8:	str	r2, [r4, #68]	; 0x44
   157cc:	mov	r0, r5
   157d0:	bl	14a58 <read_return_expression@@Base>
   157d4:	mov	r7, r0
   157d8:	ldr	r3, [r4, #72]	; 0x48
   157dc:	ldr	r2, [r4, #76]	; 0x4c
   157e0:	adds	r3, r3, #1
   157e4:	adc	r2, r2, #0
   157e8:	str	r3, [r4, #72]	; 0x48
   157ec:	str	r2, [r4, #76]	; 0x4c
   157f0:	cmp	r6, #0
   157f4:	strne	r7, [r8, #4]
   157f8:	beq	158d8 <read_body@@Base+0x218>
   157fc:	ldr	r0, [r5]
   15800:	bl	12a58 <next@@Base>
   15804:	ldr	r3, [r0]
   15808:	mov	r8, r7
   1580c:	cmp	r3, #6
   15810:	beq	158fc <read_body@@Base+0x23c>
   15814:	cmp	r3, #7
   15818:	beq	15798 <read_body@@Base+0xd8>
   1581c:	cmp	r3, #10
   15820:	beq	1587c <read_body@@Base+0x1bc>
   15824:	ldr	r4, [pc, #268]	; 15938 <read_body@@Base+0x278>
   15828:	ldr	r3, [r4, #40]	; 0x28
   1582c:	ldr	r2, [r4, #44]	; 0x2c
   15830:	adds	r3, r3, #1
   15834:	adc	r2, r2, #0
   15838:	str	r3, [r4, #40]	; 0x28
   1583c:	str	r2, [r4, #44]	; 0x2c
   15840:	mov	r1, r0
   15844:	ldr	r0, [r5]
   15848:	bl	128c8 <push_back@@Base>
   1584c:	ldr	r3, [r4, #96]	; 0x60
   15850:	ldr	r2, [r4, #100]	; 0x64
   15854:	adds	r3, r3, #1
   15858:	adc	r2, r2, #0
   1585c:	str	r3, [r4, #96]	; 0x60
   15860:	str	r2, [r4, #100]	; 0x64
   15864:	mov	r0, r6
   15868:	ldrd	r4, [sp]
   1586c:	ldrd	r6, [sp, #8]
   15870:	ldr	r8, [sp, #16]
   15874:	add	sp, sp, #20
   15878:	pop	{pc}		; (ldr pc, [sp], #4)
   1587c:	ldr	r3, [r4, #56]	; 0x38
   15880:	ldr	r2, [r4, #60]	; 0x3c
   15884:	adds	r3, r3, #1
   15888:	adc	r2, r2, #0
   1588c:	str	r3, [r4, #56]	; 0x38
   15890:	str	r2, [r4, #60]	; 0x3c
   15894:	bl	126c0 <free_token_if@@Base>
   15898:	ldr	r3, [r4, #80]	; 0x50
   1589c:	ldr	r2, [r4, #84]	; 0x54
   158a0:	adds	r3, r3, #1
   158a4:	adc	r2, r2, #0
   158a8:	str	r3, [r4, #80]	; 0x50
   158ac:	str	r2, [r4, #84]	; 0x54
   158b0:	mov	r0, r5
   158b4:	bl	154d0 <read_if_statement@@Base>
   158b8:	mov	r7, r0
   158bc:	ldr	r3, [r4, #88]	; 0x58
   158c0:	ldr	r2, [r4, #92]	; 0x5c
   158c4:	adds	r3, r3, #1
   158c8:	adc	r2, r2, #0
   158cc:	str	r3, [r4, #88]	; 0x58
   158d0:	str	r2, [r4, #92]	; 0x5c
   158d4:	b	157f0 <read_body@@Base+0x130>
   158d8:	ldr	r3, [r4, #104]	; 0x68
   158dc:	ldr	r2, [r4, #108]	; 0x6c
   158e0:	adds	r3, r3, #1
   158e4:	adc	r2, r2, #0
   158e8:	str	r3, [r4, #104]	; 0x68
   158ec:	str	r2, [r4, #108]	; 0x6c
   158f0:	mov	r6, r7
   158f4:	b	157fc <read_body@@Base+0x13c>
   158f8:	mov	r6, #0
   158fc:	ldr	r4, [pc, #52]	; 15938 <read_body@@Base+0x278>
   15900:	ldr	r3, [r4, #112]	; 0x70
   15904:	ldr	r2, [r4, #116]	; 0x74
   15908:	adds	r3, r3, #1
   1590c:	adc	r2, r2, #0
   15910:	str	r3, [r4, #112]	; 0x70
   15914:	str	r2, [r4, #116]	; 0x74
   15918:	bl	125e0 <free_token_cbra@@Base>
   1591c:	ldr	r3, [r4, #120]	; 0x78
   15920:	ldr	r2, [r4, #124]	; 0x7c
   15924:	adds	r3, r3, #1
   15928:	adc	r2, r2, #0
   1592c:	str	r3, [r4, #120]	; 0x78
   15930:	str	r2, [r4, #124]	; 0x7c
   15934:	b	15864 <read_body@@Base+0x1a4>
   15938:	andeq	fp, r2, r8, lsr #8

0001593c <read_function_ast_node@@Base>:
   1593c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15940:	strd	r6, [sp, #8]
   15944:	str	r8, [sp, #16]
   15948:	str	lr, [sp, #20]
   1594c:	mov	r5, r0
   15950:	ldr	r2, [pc, #576]	; 15b98 <read_function_ast_node@@Base+0x25c>
   15954:	ldr	r3, [r2]
   15958:	ldr	r1, [r2, #4]
   1595c:	adds	r3, r3, #1
   15960:	adc	r1, r1, #0
   15964:	str	r3, [r2]
   15968:	str	r1, [r2, #4]
   1596c:	ldr	r0, [r0]
   15970:	bl	12a58 <next@@Base>
   15974:	ldr	r3, [r0]
   15978:	cmp	r3, #0
   1597c:	bne	15afc <read_function_ast_node@@Base+0x1c0>
   15980:	ldr	r4, [pc, #528]	; 15b98 <read_function_ast_node@@Base+0x25c>
   15984:	ldr	r3, [r4, #16]
   15988:	ldr	r2, [r4, #20]
   1598c:	adds	r3, r3, #1
   15990:	adc	r2, r2, #0
   15994:	str	r3, [r4, #16]
   15998:	str	r2, [r4, #20]
   1599c:	bl	12490 <free_token_int_type@@Base>
   159a0:	ldr	r3, [r4, #24]
   159a4:	ldr	r2, [r4, #28]
   159a8:	adds	r3, r3, #1
   159ac:	adc	r2, r2, #0
   159b0:	str	r3, [r4, #24]
   159b4:	str	r2, [r4, #28]
   159b8:	ldr	r0, [r5]
   159bc:	bl	12a58 <next@@Base>
   159c0:	mov	r6, r0
   159c4:	ldr	r3, [r0]
   159c8:	cmp	r3, #2
   159cc:	bne	15b20 <read_function_ast_node@@Base+0x1e4>
   159d0:	ldr	r2, [pc, #448]	; 15b98 <read_function_ast_node@@Base+0x25c>
   159d4:	ldr	r3, [r2, #40]	; 0x28
   159d8:	ldr	r1, [r2, #44]	; 0x2c
   159dc:	adds	r3, r3, #1
   159e0:	adc	r1, r1, #0
   159e4:	str	r3, [r2, #40]	; 0x28
   159e8:	str	r1, [r2, #44]	; 0x2c
   159ec:	ldr	r0, [r5]
   159f0:	bl	12a58 <next@@Base>
   159f4:	ldr	r3, [r0]
   159f8:	cmp	r3, #3
   159fc:	bne	15b54 <read_function_ast_node@@Base+0x218>
   15a00:	ldr	r4, [pc, #400]	; 15b98 <read_function_ast_node@@Base+0x25c>
   15a04:	ldr	r3, [r4, #56]	; 0x38
   15a08:	ldr	r2, [r4, #60]	; 0x3c
   15a0c:	adds	r3, r3, #1
   15a10:	adc	r2, r2, #0
   15a14:	str	r3, [r4, #56]	; 0x38
   15a18:	str	r2, [r4, #60]	; 0x3c
   15a1c:	bl	12538 <free_token_opar@@Base>
   15a20:	ldr	r3, [r4, #64]	; 0x40
   15a24:	ldr	r2, [r4, #68]	; 0x44
   15a28:	adds	r3, r3, #1
   15a2c:	adc	r2, r2, #0
   15a30:	str	r3, [r4, #64]	; 0x40
   15a34:	str	r2, [r4, #68]	; 0x44
   15a38:	ldr	r0, [r5]
   15a3c:	bl	12a58 <next@@Base>
   15a40:	ldr	r3, [r0]
   15a44:	cmp	r3, #4
   15a48:	bne	15b78 <read_function_ast_node@@Base+0x23c>
   15a4c:	ldr	r4, [pc, #324]	; 15b98 <read_function_ast_node@@Base+0x25c>
   15a50:	ldr	r3, [r4, #80]	; 0x50
   15a54:	ldr	r2, [r4, #84]	; 0x54
   15a58:	adds	r3, r3, #1
   15a5c:	adc	r2, r2, #0
   15a60:	str	r3, [r4, #80]	; 0x50
   15a64:	str	r2, [r4, #84]	; 0x54
   15a68:	bl	12570 <free_token_cpar@@Base>
   15a6c:	ldr	r3, [r4, #88]	; 0x58
   15a70:	ldr	r2, [r4, #92]	; 0x5c
   15a74:	adds	r3, r3, #1
   15a78:	adc	r2, r2, #0
   15a7c:	str	r3, [r4, #88]	; 0x58
   15a80:	str	r2, [r4, #92]	; 0x5c
   15a84:	mov	r0, r5
   15a88:	bl	156c0 <read_body@@Base>
   15a8c:	mov	r7, r0
   15a90:	ldr	r3, [r4, #96]	; 0x60
   15a94:	ldr	r2, [r4, #100]	; 0x64
   15a98:	adds	r3, r3, #1
   15a9c:	adc	r2, r2, #0
   15aa0:	str	r3, [r4, #96]	; 0x60
   15aa4:	str	r2, [r4, #100]	; 0x64
   15aa8:	mov	r0, #16
   15aac:	bl	119e8 <malloc@plt>
   15ab0:	mov	r5, r0
   15ab4:	mov	r2, r7
   15ab8:	ldr	r1, [r6, #4]
   15abc:	bl	13ed0 <init_node_function@@Base>
   15ac0:	ldr	r3, [r4, #104]	; 0x68
   15ac4:	ldr	r2, [r4, #108]	; 0x6c
   15ac8:	adds	r3, r3, #1
   15acc:	adc	r2, r2, #0
   15ad0:	str	r3, [r4, #104]	; 0x68
   15ad4:	str	r2, [r4, #108]	; 0x6c
   15ad8:	mov	r0, r6
   15adc:	bl	12500 <free_token_function@@Base>
   15ae0:	ldr	r3, [r4, #112]	; 0x70
   15ae4:	ldr	r2, [r4, #116]	; 0x74
   15ae8:	adds	r3, r3, #1
   15aec:	adc	r2, r2, #0
   15af0:	str	r3, [r4, #112]	; 0x70
   15af4:	str	r2, [r4, #116]	; 0x74
   15af8:	b	15b3c <read_function_ast_node@@Base+0x200>
   15afc:	ldr	r2, [pc, #148]	; 15b98 <read_function_ast_node@@Base+0x25c>
   15b00:	ldr	r3, [r2, #8]
   15b04:	ldr	r1, [r2, #12]
   15b08:	adds	r3, r3, #1
   15b0c:	adc	r1, r1, #0
   15b10:	str	r3, [r2, #8]
   15b14:	str	r1, [r2, #12]
   15b18:	mov	r5, #0
   15b1c:	b	15b3c <read_function_ast_node@@Base+0x200>
   15b20:	ldr	r3, [r4, #32]
   15b24:	ldr	r1, [r4, #36]	; 0x24
   15b28:	adds	r3, r3, #1
   15b2c:	adc	r1, r1, #0
   15b30:	str	r3, [r4, #32]
   15b34:	str	r1, [r4, #36]	; 0x24
   15b38:	mov	r5, #0
   15b3c:	mov	r0, r5
   15b40:	ldrd	r4, [sp]
   15b44:	ldrd	r6, [sp, #8]
   15b48:	ldr	r8, [sp, #16]
   15b4c:	add	sp, sp, #20
   15b50:	pop	{pc}		; (ldr pc, [sp], #4)
   15b54:	ldr	r2, [pc, #60]	; 15b98 <read_function_ast_node@@Base+0x25c>
   15b58:	ldr	r3, [r2, #48]	; 0x30
   15b5c:	ldr	r1, [r2, #52]	; 0x34
   15b60:	adds	r3, r3, #1
   15b64:	adc	r1, r1, #0
   15b68:	str	r3, [r2, #48]	; 0x30
   15b6c:	str	r1, [r2, #52]	; 0x34
   15b70:	mov	r5, #0
   15b74:	b	15b3c <read_function_ast_node@@Base+0x200>
   15b78:	ldr	r3, [r4, #72]	; 0x48
   15b7c:	ldr	r1, [r4, #76]	; 0x4c
   15b80:	adds	r3, r3, #1
   15b84:	adc	r1, r1, #0
   15b88:	str	r3, [r4, #72]	; 0x48
   15b8c:	str	r1, [r4, #76]	; 0x4c
   15b90:	mov	r5, #0
   15b94:	b	15b3c <read_function_ast_node@@Base+0x200>
   15b98:	andeq	fp, r2, r8, lsr #9

00015b9c <build_ast@@Base>:
   15b9c:	str	r4, [sp, #-8]!
   15ba0:	str	lr, [sp, #4]
   15ba4:	ldr	r4, [pc, #60]	; 15be8 <build_ast@@Base+0x4c>
   15ba8:	ldr	r3, [r4, #-8]
   15bac:	ldr	r2, [r4, #-4]
   15bb0:	adds	r3, r3, #1
   15bb4:	adc	r2, r2, #0
   15bb8:	str	r3, [r4, #-8]
   15bbc:	str	r2, [r4, #-4]
   15bc0:	bl	1593c <read_function_ast_node@@Base>
   15bc4:	ldr	r3, [r4]
   15bc8:	ldr	r2, [r4, #4]
   15bcc:	adds	r3, r3, #1
   15bd0:	adc	r2, r2, #0
   15bd4:	str	r3, [r4]
   15bd8:	str	r2, [r4, #4]
   15bdc:	ldr	r4, [sp]
   15be0:	add	sp, sp, #4
   15be4:	pop	{pc}		; (ldr pc, [sp], #4)
   15be8:	andeq	fp, r2, r8, lsr #10
   15bec:	str	r4, [sp, #-8]!
   15bf0:	str	lr, [sp, #4]
   15bf4:	movw	r0, #42872	; 0xa778
   15bf8:	movt	r0, #2
   15bfc:	bl	18a30 <__gcov_sort_n_vals@@Base+0x4a0>
   15c00:	ldr	r4, [sp]
   15c04:	add	sp, sp, #4
   15c08:	pop	{pc}		; (ldr pc, [sp], #4)
   15c0c:	str	r4, [sp, #-8]!
   15c10:	str	lr, [sp, #4]
   15c14:	bl	189c0 <__gcov_sort_n_vals@@Base+0x430>
   15c18:	ldr	r4, [sp]
   15c1c:	add	sp, sp, #4
   15c20:	pop	{pc}		; (ldr pc, [sp], #4)

00015c24 <init_generator@@Base>:
   15c24:	strd	r4, [sp, #-16]!
   15c28:	str	r6, [sp, #8]
   15c2c:	str	lr, [sp, #12]
   15c30:	mov	r5, r0
   15c34:	movw	r4, #46384	; 0xb530
   15c38:	movt	r4, #2
   15c3c:	ldr	r3, [r4]
   15c40:	ldr	r0, [r4, #4]
   15c44:	adds	r3, r3, #1
   15c48:	adc	r0, r0, #0
   15c4c:	str	r3, [r4]
   15c50:	str	r0, [r4, #4]
   15c54:	str	r1, [r5]
   15c58:	movw	r1, #37148	; 0x911c
   15c5c:	movt	r1, #1
   15c60:	mov	r0, r2
   15c64:	bl	1197c <fopen@plt>
   15c68:	ldr	r3, [r4, #8]
   15c6c:	ldr	r2, [r4, #12]
   15c70:	adds	r3, r3, #1
   15c74:	adc	r2, r2, #0
   15c78:	str	r3, [r4, #8]
   15c7c:	str	r2, [r4, #12]
   15c80:	str	r0, [r5, #4]
   15c84:	mov	r2, #0
   15c88:	mov	r3, #0
   15c8c:	strd	r2, [r5, #8]
   15c90:	ldrd	r4, [sp]
   15c94:	ldr	r6, [sp, #8]
   15c98:	add	sp, sp, #12
   15c9c:	pop	{pc}		; (ldr pc, [sp], #4)

00015ca0 <destroy_generator@@Base>:
   15ca0:	str	r4, [sp, #-8]!
   15ca4:	str	lr, [sp, #4]
   15ca8:	movw	r4, #46384	; 0xb530
   15cac:	movt	r4, #2
   15cb0:	ldr	r3, [r4, #16]
   15cb4:	ldr	r2, [r4, #20]
   15cb8:	adds	r3, r3, #1
   15cbc:	adc	r2, r2, #0
   15cc0:	str	r3, [r4, #16]
   15cc4:	str	r2, [r4, #20]
   15cc8:	ldr	r0, [r0, #4]
   15ccc:	bl	11a84 <fclose@plt>
   15cd0:	ldr	r3, [r4, #24]
   15cd4:	ldr	r2, [r4, #28]
   15cd8:	adds	r3, r3, #1
   15cdc:	adc	r2, r2, #0
   15ce0:	str	r3, [r4, #24]
   15ce4:	str	r2, [r4, #28]
   15ce8:	ldr	r4, [sp]
   15cec:	add	sp, sp, #4
   15cf0:	pop	{pc}		; (ldr pc, [sp], #4)

00015cf4 <__generate_code_for_int@@Base>:
   15cf4:	str	r4, [sp, #-8]!
   15cf8:	str	lr, [sp, #4]
   15cfc:	movw	r4, #46384	; 0xb530
   15d00:	movt	r4, #2
   15d04:	ldr	r3, [r4, #32]
   15d08:	ldr	r2, [r4, #36]	; 0x24
   15d0c:	adds	r3, r3, #1
   15d10:	adc	r2, r2, #0
   15d14:	str	r3, [r4, #32]
   15d18:	str	r2, [r4, #36]	; 0x24
   15d1c:	ldr	r2, [r1, #8]
   15d20:	movw	r1, #37152	; 0x9120
   15d24:	movt	r1, #1
   15d28:	ldr	r0, [r0, #4]
   15d2c:	bl	11a3c <fprintf@plt>
   15d30:	ldr	r3, [r4, #40]	; 0x28
   15d34:	ldr	r2, [r4, #44]	; 0x2c
   15d38:	adds	r3, r3, #1
   15d3c:	adc	r2, r2, #0
   15d40:	str	r3, [r4, #40]	; 0x28
   15d44:	str	r2, [r4, #44]	; 0x2c
   15d48:	ldr	r4, [sp]
   15d4c:	add	sp, sp, #4
   15d50:	pop	{pc}		; (ldr pc, [sp], #4)

00015d54 <__generate_code_for_return@@Base>:
   15d54:	strd	r4, [sp, #-16]!
   15d58:	str	r6, [sp, #8]
   15d5c:	str	lr, [sp, #12]
   15d60:	mov	r5, r0
   15d64:	movw	r3, #46384	; 0xb530
   15d68:	movt	r3, #2
   15d6c:	ldr	r2, [r3, #48]	; 0x30
   15d70:	ldr	r0, [r3, #52]	; 0x34
   15d74:	adds	r2, r2, #1
   15d78:	adc	r0, r0, #0
   15d7c:	str	r2, [r3, #48]	; 0x30
   15d80:	str	r0, [r3, #52]	; 0x34
   15d84:	ldr	r6, [r1, #8]
   15d88:	ldr	r3, [r5, #4]
   15d8c:	mov	r2, #9
   15d90:	mov	r1, #1
   15d94:	movw	r0, #37156	; 0x9124
   15d98:	movt	r0, #1
   15d9c:	bl	119ac <fwrite@plt>
   15da0:	ldr	r3, [r6]
   15da4:	cmp	r3, #1
   15da8:	bne	15e30 <__generate_code_for_return@@Base+0xdc>
   15dac:	movw	r4, #46384	; 0xb530
   15db0:	movt	r4, #2
   15db4:	ldr	r3, [r4, #64]	; 0x40
   15db8:	ldr	r2, [r4, #68]	; 0x44
   15dbc:	adds	r3, r3, #1
   15dc0:	adc	r2, r2, #0
   15dc4:	str	r3, [r4, #64]	; 0x40
   15dc8:	str	r2, [r4, #68]	; 0x44
   15dcc:	mov	r1, r6
   15dd0:	mov	r0, r5
   15dd4:	bl	15cf4 <__generate_code_for_int@@Base>
   15dd8:	ldr	r3, [r4, #72]	; 0x48
   15ddc:	ldr	r2, [r4, #76]	; 0x4c
   15de0:	adds	r3, r3, #1
   15de4:	adc	r2, r2, #0
   15de8:	str	r3, [r4, #72]	; 0x48
   15dec:	str	r2, [r4, #76]	; 0x4c
   15df0:	ldr	r3, [r5, #4]
   15df4:	mov	r2, #8
   15df8:	mov	r1, #1
   15dfc:	movw	r0, #37168	; 0x9130
   15e00:	movt	r0, #1
   15e04:	bl	119ac <fwrite@plt>
   15e08:	ldr	r3, [r4, #80]	; 0x50
   15e0c:	ldr	r2, [r4, #84]	; 0x54
   15e10:	adds	r3, r3, #1
   15e14:	adc	r2, r2, #0
   15e18:	str	r3, [r4, #80]	; 0x50
   15e1c:	str	r2, [r4, #84]	; 0x54
   15e20:	ldrd	r4, [sp]
   15e24:	ldr	r6, [sp, #8]
   15e28:	add	sp, sp, #12
   15e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e30:	movw	r4, #46384	; 0xb530
   15e34:	movt	r4, #2
   15e38:	ldr	r3, [r4, #56]	; 0x38
   15e3c:	ldr	r2, [r4, #60]	; 0x3c
   15e40:	adds	r3, r3, #1
   15e44:	adc	r2, r2, #0
   15e48:	str	r3, [r4, #56]	; 0x38
   15e4c:	str	r2, [r4, #60]	; 0x3c
   15e50:	movw	r3, #43680	; 0xaaa0
   15e54:	movt	r3, #2
   15e58:	ldr	r3, [r3]
   15e5c:	mov	r2, #37	; 0x25
   15e60:	mov	r1, #1
   15e64:	movw	r0, #37180	; 0x913c
   15e68:	movt	r0, #1
   15e6c:	bl	119ac <fwrite@plt>
   15e70:	ldr	r3, [r4, #88]	; 0x58
   15e74:	ldr	r2, [r4, #92]	; 0x5c
   15e78:	adds	r3, r3, #1
   15e7c:	adc	r2, r2, #0
   15e80:	str	r3, [r4, #88]	; 0x58
   15e84:	str	r2, [r4, #92]	; 0x5c
   15e88:	mov	r0, #1
   15e8c:	bl	11a18 <exit@plt>

00015e90 <__generate_code_for_binary_boolean_expression@@Base>:
   15e90:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15e94:	strd	r6, [sp, #8]
   15e98:	strd	r8, [sp, #16]
   15e9c:	str	sl, [sp, #24]
   15ea0:	str	lr, [sp, #28]
   15ea4:	mov	r5, r0
   15ea8:	mov	r8, r1
   15eac:	mov	r6, r2
   15eb0:	mov	r7, r3
   15eb4:	movw	r4, #46384	; 0xb530
   15eb8:	movt	r4, #2
   15ebc:	ldr	r3, [r4, #96]	; 0x60
   15ec0:	ldr	r2, [r4, #100]	; 0x64
   15ec4:	adds	r3, r3, #1
   15ec8:	adc	r2, r2, #0
   15ecc:	str	r3, [r4, #96]	; 0x60
   15ed0:	str	r2, [r4, #100]	; 0x64
   15ed4:	ldr	sl, [r1, #8]
   15ed8:	ldr	r9, [r1, #12]
   15edc:	ldr	r3, [r0, #4]
   15ee0:	mov	r2, #9
   15ee4:	mov	r1, #1
   15ee8:	movw	r0, #37156	; 0x9124
   15eec:	movt	r0, #1
   15ef0:	bl	119ac <fwrite@plt>
   15ef4:	ldr	r3, [r4, #104]	; 0x68
   15ef8:	ldr	r2, [r4, #108]	; 0x6c
   15efc:	adds	r3, r3, #1
   15f00:	adc	r2, r2, #0
   15f04:	str	r3, [r4, #104]	; 0x68
   15f08:	str	r2, [r4, #108]	; 0x6c
   15f0c:	mov	r1, sl
   15f10:	mov	r0, r5
   15f14:	bl	15cf4 <__generate_code_for_int@@Base>
   15f18:	ldr	r3, [r4, #112]	; 0x70
   15f1c:	ldr	r2, [r4, #116]	; 0x74
   15f20:	adds	r3, r3, #1
   15f24:	adc	r2, r2, #0
   15f28:	str	r3, [r4, #112]	; 0x70
   15f2c:	str	r2, [r4, #116]	; 0x74
   15f30:	ldr	r1, [r5, #4]
   15f34:	mov	r0, #10
   15f38:	bl	11ab4 <fputc@plt>
   15f3c:	ldr	r3, [r4, #120]	; 0x78
   15f40:	ldr	r2, [r4, #124]	; 0x7c
   15f44:	adds	r3, r3, #1
   15f48:	adc	r2, r2, #0
   15f4c:	str	r3, [r4, #120]	; 0x78
   15f50:	str	r2, [r4, #124]	; 0x7c
   15f54:	ldr	r3, [r5, #4]
   15f58:	mov	r2, #9
   15f5c:	mov	r1, #1
   15f60:	movw	r0, #37220	; 0x9164
   15f64:	movt	r0, #1
   15f68:	bl	119ac <fwrite@plt>
   15f6c:	ldr	r3, [r4, #128]	; 0x80
   15f70:	ldr	r2, [r4, #132]	; 0x84
   15f74:	adds	r3, r3, #1
   15f78:	adc	r2, r2, #0
   15f7c:	str	r3, [r4, #128]	; 0x80
   15f80:	str	r2, [r4, #132]	; 0x84
   15f84:	mov	r1, r9
   15f88:	mov	r0, r5
   15f8c:	bl	15cf4 <__generate_code_for_int@@Base>
   15f90:	ldr	r3, [r4, #136]	; 0x88
   15f94:	ldr	r2, [r4, #140]	; 0x8c
   15f98:	adds	r3, r3, #1
   15f9c:	adc	r2, r2, #0
   15fa0:	str	r3, [r4, #136]	; 0x88
   15fa4:	str	r2, [r4, #140]	; 0x8c
   15fa8:	ldr	r1, [r5, #4]
   15fac:	mov	r0, #10
   15fb0:	bl	11ab4 <fputc@plt>
   15fb4:	ldr	r3, [r4, #144]	; 0x90
   15fb8:	ldr	r2, [r4, #148]	; 0x94
   15fbc:	adds	r3, r3, #1
   15fc0:	adc	r2, r2, #0
   15fc4:	str	r3, [r4, #144]	; 0x90
   15fc8:	str	r2, [r4, #148]	; 0x94
   15fcc:	ldr	r3, [r5, #4]
   15fd0:	mov	r2, #12
   15fd4:	mov	r1, #1
   15fd8:	movw	r0, #37232	; 0x9170
   15fdc:	movt	r0, #1
   15fe0:	bl	119ac <fwrite@plt>
   15fe4:	ldr	r3, [r8, #16]
   15fe8:	cmp	r3, #7
   15fec:	ldrls	pc, [pc, r3, lsl #2]
   15ff0:	b	16244 <__generate_code_for_binary_boolean_expression@@Base+0x3b4>
   15ff4:	andeq	r6, r1, r8, lsr r0
   15ff8:	andeq	r6, r1, r0, lsr #1
   15ffc:	strdeq	r6, [r1], -r4
   16000:	andeq	r6, r1, r8, asr #2
   16004:	andeq	r6, r1, r4, lsl r0
   16008:	andeq	r6, r1, r4, lsl r0
   1600c:	muleq	r1, ip, r1
   16010:	strdeq	r6, [r1], -r0
   16014:	movw	r3, #46384	; 0xb530
   16018:	movt	r3, #2
   1601c:	ldr	r2, [r3, #192]	; 0xc0
   16020:	ldr	r1, [r3, #196]	; 0xc4
   16024:	adds	r2, r2, #1
   16028:	adc	r1, r1, #0
   1602c:	str	r2, [r3, #192]	; 0xc0
   16030:	str	r1, [r3, #196]	; 0xc4
   16034:	b	16088 <__generate_code_for_binary_boolean_expression@@Base+0x1f8>
   16038:	movw	r4, #46384	; 0xb530
   1603c:	movt	r4, #2
   16040:	ldr	r3, [r4, #160]	; 0xa0
   16044:	ldr	r2, [r4, #164]	; 0xa4
   16048:	adds	r3, r3, #1
   1604c:	adc	r2, r2, #0
   16050:	str	r3, [r4, #160]	; 0xa0
   16054:	str	r2, [r4, #164]	; 0xa4
   16058:	mov	r2, r6
   1605c:	mov	r3, r7
   16060:	movw	r1, #37248	; 0x9180
   16064:	movt	r1, #1
   16068:	ldr	r0, [r5, #4]
   1606c:	bl	11a3c <fprintf@plt>
   16070:	ldr	r3, [r4, #216]	; 0xd8
   16074:	ldr	r2, [r4, #220]	; 0xdc
   16078:	adds	r3, r3, #1
   1607c:	adc	r2, r2, #0
   16080:	str	r3, [r4, #216]	; 0xd8
   16084:	str	r2, [r4, #220]	; 0xdc
   16088:	ldrd	r4, [sp]
   1608c:	ldrd	r6, [sp, #8]
   16090:	ldrd	r8, [sp, #16]
   16094:	ldr	sl, [sp, #24]
   16098:	add	sp, sp, #28
   1609c:	pop	{pc}		; (ldr pc, [sp], #4)
   160a0:	movw	r4, #46384	; 0xb530
   160a4:	movt	r4, #2
   160a8:	ldr	r3, [r4, #168]	; 0xa8
   160ac:	ldr	r2, [r4, #172]	; 0xac
   160b0:	adds	r3, r3, #1
   160b4:	adc	r2, r2, #0
   160b8:	str	r3, [r4, #168]	; 0xa8
   160bc:	str	r2, [r4, #172]	; 0xac
   160c0:	mov	r2, r6
   160c4:	mov	r3, r7
   160c8:	movw	r1, #37268	; 0x9194
   160cc:	movt	r1, #1
   160d0:	ldr	r0, [r5, #4]
   160d4:	bl	11a3c <fprintf@plt>
   160d8:	ldr	r3, [r4, #224]	; 0xe0
   160dc:	ldr	r2, [r4, #228]	; 0xe4
   160e0:	adds	r3, r3, #1
   160e4:	adc	r2, r2, #0
   160e8:	str	r3, [r4, #224]	; 0xe0
   160ec:	str	r2, [r4, #228]	; 0xe4
   160f0:	b	16088 <__generate_code_for_binary_boolean_expression@@Base+0x1f8>
   160f4:	movw	r4, #46384	; 0xb530
   160f8:	movt	r4, #2
   160fc:	ldr	r3, [r4, #176]	; 0xb0
   16100:	ldr	r2, [r4, #180]	; 0xb4
   16104:	adds	r3, r3, #1
   16108:	adc	r2, r2, #0
   1610c:	str	r3, [r4, #176]	; 0xb0
   16110:	str	r2, [r4, #180]	; 0xb4
   16114:	mov	r2, r6
   16118:	mov	r3, r7
   1611c:	movw	r1, #37288	; 0x91a8
   16120:	movt	r1, #1
   16124:	ldr	r0, [r5, #4]
   16128:	bl	11a3c <fprintf@plt>
   1612c:	ldr	r3, [r4, #232]	; 0xe8
   16130:	ldr	r2, [r4, #236]	; 0xec
   16134:	adds	r3, r3, #1
   16138:	adc	r2, r2, #0
   1613c:	str	r3, [r4, #232]	; 0xe8
   16140:	str	r2, [r4, #236]	; 0xec
   16144:	b	16088 <__generate_code_for_binary_boolean_expression@@Base+0x1f8>
   16148:	movw	r4, #46384	; 0xb530
   1614c:	movt	r4, #2
   16150:	ldr	r3, [r4, #184]	; 0xb8
   16154:	ldr	r2, [r4, #188]	; 0xbc
   16158:	adds	r3, r3, #1
   1615c:	adc	r2, r2, #0
   16160:	str	r3, [r4, #184]	; 0xb8
   16164:	str	r2, [r4, #188]	; 0xbc
   16168:	mov	r2, r6
   1616c:	mov	r3, r7
   16170:	movw	r1, #37308	; 0x91bc
   16174:	movt	r1, #1
   16178:	ldr	r0, [r5, #4]
   1617c:	bl	11a3c <fprintf@plt>
   16180:	ldr	r3, [r4, #240]	; 0xf0
   16184:	ldr	r2, [r4, #244]	; 0xf4
   16188:	adds	r3, r3, #1
   1618c:	adc	r2, r2, #0
   16190:	str	r3, [r4, #240]	; 0xf0
   16194:	str	r2, [r4, #244]	; 0xf4
   16198:	b	16088 <__generate_code_for_binary_boolean_expression@@Base+0x1f8>
   1619c:	movw	r4, #46384	; 0xb530
   161a0:	movt	r4, #2
   161a4:	ldr	r3, [r4, #208]	; 0xd0
   161a8:	ldr	r2, [r4, #212]	; 0xd4
   161ac:	adds	r3, r3, #1
   161b0:	adc	r2, r2, #0
   161b4:	str	r3, [r4, #208]	; 0xd0
   161b8:	str	r2, [r4, #212]	; 0xd4
   161bc:	mov	r2, r6
   161c0:	mov	r3, r7
   161c4:	movw	r1, #37328	; 0x91d0
   161c8:	movt	r1, #1
   161cc:	ldr	r0, [r5, #4]
   161d0:	bl	11a3c <fprintf@plt>
   161d4:	ldr	r3, [r4, #248]	; 0xf8
   161d8:	ldr	r2, [r4, #252]	; 0xfc
   161dc:	adds	r3, r3, #1
   161e0:	adc	r2, r2, #0
   161e4:	str	r3, [r4, #248]	; 0xf8
   161e8:	str	r2, [r4, #252]	; 0xfc
   161ec:	b	16088 <__generate_code_for_binary_boolean_expression@@Base+0x1f8>
   161f0:	movw	r4, #46384	; 0xb530
   161f4:	movt	r4, #2
   161f8:	ldr	r3, [r4, #200]	; 0xc8
   161fc:	ldr	r2, [r4, #204]	; 0xcc
   16200:	adds	r3, r3, #1
   16204:	adc	r2, r2, #0
   16208:	str	r3, [r4, #200]	; 0xc8
   1620c:	str	r2, [r4, #204]	; 0xcc
   16210:	mov	r2, r6
   16214:	mov	r3, r7
   16218:	movw	r1, #37348	; 0x91e4
   1621c:	movt	r1, #1
   16220:	ldr	r0, [r5, #4]
   16224:	bl	11a3c <fprintf@plt>
   16228:	ldr	r3, [r4, #256]	; 0x100
   1622c:	ldr	r2, [r4, #260]	; 0x104
   16230:	adds	r3, r3, #1
   16234:	adc	r2, r2, #0
   16238:	str	r3, [r4, #256]	; 0x100
   1623c:	str	r2, [r4, #260]	; 0x104
   16240:	b	16088 <__generate_code_for_binary_boolean_expression@@Base+0x1f8>
   16244:	movw	r4, #46384	; 0xb530
   16248:	movt	r4, #2
   1624c:	ldr	r3, [r4, #152]	; 0x98
   16250:	ldr	r2, [r4, #156]	; 0x9c
   16254:	adds	r3, r3, #1
   16258:	adc	r2, r2, #0
   1625c:	str	r3, [r4, #152]	; 0x98
   16260:	str	r2, [r4, #156]	; 0x9c
   16264:	movw	r3, #43680	; 0xaaa0
   16268:	movt	r3, #2
   1626c:	ldr	r3, [r3]
   16270:	mov	r2, #31
   16274:	mov	r1, #1
   16278:	movw	r0, #37368	; 0x91f8
   1627c:	movt	r0, #1
   16280:	bl	119ac <fwrite@plt>
   16284:	ldr	r3, [r4, #264]	; 0x108
   16288:	ldr	r2, [r4, #268]	; 0x10c
   1628c:	adds	r3, r3, #1
   16290:	adc	r2, r2, #0
   16294:	str	r3, [r4, #264]	; 0x108
   16298:	str	r2, [r4, #268]	; 0x10c
   1629c:	mov	r0, #1
   162a0:	bl	11a18 <exit@plt>

000162a4 <__generate_code_for_unary_boolean_expression@@Base>:
   162a4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   162a8:	strd	r6, [sp, #8]
   162ac:	strd	r8, [sp, #16]
   162b0:	str	sl, [sp, #24]
   162b4:	str	lr, [sp, #28]
   162b8:	mov	r5, r0
   162bc:	mov	r8, r1
   162c0:	mov	r6, r2
   162c4:	mov	r7, r3
   162c8:	ldr	r4, [pc, #332]	; 1641c <__generate_code_for_unary_boolean_expression@@Base+0x178>
   162cc:	ldr	r3, [r4]
   162d0:	ldr	r2, [r4, #4]
   162d4:	adds	r3, r3, #1
   162d8:	adc	r2, r2, #0
   162dc:	str	r3, [r4]
   162e0:	str	r2, [r4, #4]
   162e4:	ldr	r9, [r1, #8]
   162e8:	ldr	r3, [r0, #4]
   162ec:	mov	r2, #11
   162f0:	mov	r1, #1
   162f4:	movw	r0, #37400	; 0x9218
   162f8:	movt	r0, #1
   162fc:	bl	119ac <fwrite@plt>
   16300:	ldr	r3, [r4, #8]
   16304:	ldr	r2, [r4, #12]
   16308:	adds	r3, r3, #1
   1630c:	adc	r2, r2, #0
   16310:	str	r3, [r4, #8]
   16314:	str	r2, [r4, #12]
   16318:	ldr	r3, [r5, #4]
   1631c:	mov	r2, #9
   16320:	mov	r1, #1
   16324:	movw	r0, #37220	; 0x9164
   16328:	movt	r0, #1
   1632c:	bl	119ac <fwrite@plt>
   16330:	ldr	r3, [r4, #16]
   16334:	ldr	r2, [r4, #20]
   16338:	adds	r3, r3, #1
   1633c:	adc	r2, r2, #0
   16340:	str	r3, [r4, #16]
   16344:	str	r2, [r4, #20]
   16348:	mov	r1, r9
   1634c:	mov	r0, r5
   16350:	bl	15cf4 <__generate_code_for_int@@Base>
   16354:	ldr	r3, [r8, #16]
   16358:	cmp	r3, #8
   1635c:	bne	163c0 <__generate_code_for_unary_boolean_expression@@Base+0x11c>
   16360:	ldr	r3, [r4, #32]
   16364:	ldr	r2, [r4, #36]	; 0x24
   16368:	adds	r3, r3, #1
   1636c:	adc	r2, r2, #0
   16370:	str	r3, [r4, #32]
   16374:	str	r2, [r4, #36]	; 0x24
   16378:	mov	r2, r6
   1637c:	mov	r3, r7
   16380:	movw	r1, #37268	; 0x9194
   16384:	movt	r1, #1
   16388:	ldr	r0, [r5, #4]
   1638c:	bl	11a3c <fprintf@plt>
   16390:	ldr	r3, [r4, #40]	; 0x28
   16394:	ldr	r2, [r4, #44]	; 0x2c
   16398:	adds	r3, r3, #1
   1639c:	adc	r2, r2, #0
   163a0:	str	r3, [r4, #40]	; 0x28
   163a4:	str	r2, [r4, #44]	; 0x2c
   163a8:	ldrd	r4, [sp]
   163ac:	ldrd	r6, [sp, #8]
   163b0:	ldrd	r8, [sp, #16]
   163b4:	ldr	sl, [sp, #24]
   163b8:	add	sp, sp, #28
   163bc:	pop	{pc}		; (ldr pc, [sp], #4)
   163c0:	ldr	r4, [pc, #84]	; 1641c <__generate_code_for_unary_boolean_expression@@Base+0x178>
   163c4:	ldr	r3, [r4, #24]
   163c8:	ldr	r2, [r4, #28]
   163cc:	adds	r3, r3, #1
   163d0:	adc	r2, r2, #0
   163d4:	str	r3, [r4, #24]
   163d8:	str	r2, [r4, #28]
   163dc:	movw	r3, #43680	; 0xaaa0
   163e0:	movt	r3, #2
   163e4:	ldr	r3, [r3]
   163e8:	mov	r2, #31
   163ec:	mov	r1, #1
   163f0:	movw	r0, #37368	; 0x91f8
   163f4:	movt	r0, #1
   163f8:	bl	119ac <fwrite@plt>
   163fc:	ldr	r3, [r4, #48]	; 0x30
   16400:	ldr	r2, [r4, #52]	; 0x34
   16404:	adds	r3, r3, #1
   16408:	adc	r2, r2, #0
   1640c:	str	r3, [r4, #48]	; 0x30
   16410:	str	r2, [r4, #52]	; 0x34
   16414:	mov	r0, #1
   16418:	bl	11a18 <exit@plt>
   1641c:	andeq	fp, r2, r0, asr #12

00016420 <__generate_code_for_if_expression@@Base>:
   16420:	str	r4, [sp, #-16]!
   16424:	strd	r6, [sp, #4]
   16428:	str	lr, [sp, #12]
   1642c:	mov	r6, r2
   16430:	mov	r7, r3
   16434:	ldr	r3, [r1, #16]
   16438:	cmp	r3, #8
   1643c:	beq	16490 <__generate_code_for_if_expression@@Base+0x70>
   16440:	ldr	r4, [pc, #140]	; 164d4 <__generate_code_for_if_expression@@Base+0xb4>
   16444:	ldr	r3, [r4, #-8]
   16448:	ldr	r2, [r4, #-4]
   1644c:	adds	r3, r3, #1
   16450:	adc	r2, r2, #0
   16454:	str	r3, [r4, #-8]
   16458:	str	r2, [r4, #-4]
   1645c:	mov	r2, r6
   16460:	mov	r3, r7
   16464:	bl	15e90 <__generate_code_for_binary_boolean_expression@@Base>
   16468:	ldr	r3, [r4, #16]
   1646c:	ldr	r2, [r4, #20]
   16470:	adds	r3, r3, #1
   16474:	adc	r2, r2, #0
   16478:	str	r3, [r4, #16]
   1647c:	str	r2, [r4, #20]
   16480:	ldr	r4, [sp]
   16484:	ldrd	r6, [sp, #4]
   16488:	add	sp, sp, #12
   1648c:	pop	{pc}		; (ldr pc, [sp], #4)
   16490:	ldr	r4, [pc, #60]	; 164d4 <__generate_code_for_if_expression@@Base+0xb4>
   16494:	ldr	r3, [r4]
   16498:	ldr	r2, [r4, #4]
   1649c:	adds	r3, r3, #1
   164a0:	adc	r2, r2, #0
   164a4:	str	r3, [r4]
   164a8:	str	r2, [r4, #4]
   164ac:	mov	r2, r6
   164b0:	mov	r3, r7
   164b4:	bl	162a4 <__generate_code_for_unary_boolean_expression@@Base>
   164b8:	ldr	r3, [r4, #8]
   164bc:	ldr	r2, [r4, #12]
   164c0:	adds	r3, r3, #1
   164c4:	adc	r2, r2, #0
   164c8:	str	r3, [r4, #8]
   164cc:	str	r2, [r4, #12]
   164d0:	b	16480 <__generate_code_for_if_expression@@Base+0x60>
   164d4:	andeq	fp, r2, r0, lsl #13

000164d8 <__generate_code_for_body@@Base>:
   164d8:	strd	r4, [sp, #-16]!
   164dc:	str	r6, [sp, #8]
   164e0:	str	lr, [sp, #12]
   164e4:	mov	r6, r0
   164e8:	ldr	r2, [pc, #300]	; 1661c <__generate_code_for_body@@Base+0x144>
   164ec:	ldr	r3, [r2, #-8]
   164f0:	ldr	r0, [r2, #-4]
   164f4:	adds	r3, r3, #1
   164f8:	adc	r0, r0, #0
   164fc:	str	r3, [r2, #-8]
   16500:	str	r0, [r2, #-4]
   16504:	cmp	r1, #0
   16508:	beq	165f0 <__generate_code_for_body@@Base+0x118>
   1650c:	mov	r4, r2
   16510:	b	16558 <__generate_code_for_body@@Base+0x80>
   16514:	ldr	r3, [r4, #8]
   16518:	ldr	r2, [r4, #12]
   1651c:	adds	r3, r3, #1
   16520:	adc	r2, r2, #0
   16524:	str	r3, [r4, #8]
   16528:	str	r2, [r4, #12]
   1652c:	mov	r0, r6
   16530:	bl	15d54 <__generate_code_for_return@@Base>
   16534:	ldr	r3, [r4, #24]
   16538:	ldr	r2, [r4, #28]
   1653c:	adds	r3, r3, #1
   16540:	adc	r2, r2, #0
   16544:	str	r3, [r4, #24]
   16548:	str	r2, [r4, #28]
   1654c:	mov	r1, r5
   16550:	cmp	r5, #0
   16554:	beq	165f0 <__generate_code_for_body@@Base+0x118>
   16558:	ldr	r5, [r1, #4]
   1655c:	ldr	r3, [r1]
   16560:	cmp	r3, #3
   16564:	beq	16514 <__generate_code_for_body@@Base+0x3c>
   16568:	cmp	r3, #4
   1656c:	bne	16594 <__generate_code_for_body@@Base+0xbc>
   16570:	ldr	r3, [r4, #16]
   16574:	ldr	r2, [r4, #20]
   16578:	adds	r3, r3, #1
   1657c:	adc	r2, r2, #0
   16580:	str	r3, [r4, #16]
   16584:	str	r2, [r4, #20]
   16588:	mov	r0, r6
   1658c:	bl	16620 <__generate_code_for_if@@Base>
   16590:	b	1654c <__generate_code_for_body@@Base+0x74>
   16594:	ldr	r4, [pc, #128]	; 1661c <__generate_code_for_body@@Base+0x144>
   16598:	ldr	r3, [r4]
   1659c:	ldr	r2, [r4, #4]
   165a0:	adds	r3, r3, #1
   165a4:	adc	r2, r2, #0
   165a8:	str	r3, [r4]
   165ac:	str	r2, [r4, #4]
   165b0:	movw	r3, #43680	; 0xaaa0
   165b4:	movt	r3, #2
   165b8:	ldr	r3, [r3]
   165bc:	mov	r2, #52	; 0x34
   165c0:	mov	r1, #1
   165c4:	movw	r0, #37412	; 0x9224
   165c8:	movt	r0, #1
   165cc:	bl	119ac <fwrite@plt>
   165d0:	ldr	r3, [r4, #32]
   165d4:	ldr	r2, [r4, #36]	; 0x24
   165d8:	adds	r3, r3, #1
   165dc:	adc	r2, r2, #0
   165e0:	str	r3, [r4, #32]
   165e4:	str	r2, [r4, #36]	; 0x24
   165e8:	mov	r0, #1
   165ec:	bl	11a18 <exit@plt>
   165f0:	ldr	r2, [pc, #36]	; 1661c <__generate_code_for_body@@Base+0x144>
   165f4:	ldr	r3, [r2, #40]	; 0x28
   165f8:	ldr	r1, [r2, #44]	; 0x2c
   165fc:	adds	r3, r3, #1
   16600:	adc	r1, r1, #0
   16604:	str	r3, [r2, #40]	; 0x28
   16608:	str	r1, [r2, #44]	; 0x2c
   1660c:	ldrd	r4, [sp]
   16610:	ldr	r6, [sp, #8]
   16614:	add	sp, sp, #12
   16618:	pop	{pc}		; (ldr pc, [sp], #4)
   1661c:	andeq	fp, r2, r0, lsr #13

00016620 <__generate_code_for_if@@Base>:
   16620:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16624:	strd	r6, [sp, #8]
   16628:	str	r8, [sp, #16]
   1662c:	str	lr, [sp, #20]
   16630:	mov	r5, r0
   16634:	mov	r7, r1
   16638:	ldr	r4, [pc, #264]	; 16748 <__generate_code_for_if@@Base+0x128>
   1663c:	ldr	r3, [r4]
   16640:	ldr	r2, [r4, #4]
   16644:	adds	r3, r3, #1
   16648:	adc	r2, r2, #0
   1664c:	str	r3, [r4]
   16650:	str	r2, [r4, #4]
   16654:	ldr	r6, [r0, #8]
   16658:	ldr	r8, [r0, #12]
   1665c:	adds	r2, r6, #1
   16660:	adc	r3, r8, #0
   16664:	str	r2, [r0, #8]
   16668:	str	r3, [r0, #12]
   1666c:	mov	r2, r6
   16670:	mov	r3, r8
   16674:	ldr	r1, [r1, #8]
   16678:	bl	16420 <__generate_code_for_if_expression@@Base>
   1667c:	ldr	r3, [r4, #8]
   16680:	ldr	r2, [r4, #12]
   16684:	adds	r3, r3, #1
   16688:	adc	r2, r2, #0
   1668c:	str	r3, [r4, #8]
   16690:	str	r2, [r4, #12]
   16694:	ldr	r1, [r7, #12]
   16698:	mov	r0, r5
   1669c:	bl	164d8 <__generate_code_for_body@@Base>
   166a0:	ldr	r3, [r4, #16]
   166a4:	ldr	r2, [r4, #20]
   166a8:	adds	r3, r3, #1
   166ac:	adc	r2, r2, #0
   166b0:	str	r3, [r4, #16]
   166b4:	str	r2, [r4, #20]
   166b8:	mov	r2, r6
   166bc:	mov	r3, r8
   166c0:	movw	r1, #37468	; 0x925c
   166c4:	movt	r1, #1
   166c8:	ldr	r0, [r5, #4]
   166cc:	bl	11a3c <fprintf@plt>
   166d0:	ldr	r1, [r7, #16]
   166d4:	cmp	r1, #0
   166d8:	beq	1672c <__generate_code_for_if@@Base+0x10c>
   166dc:	ldr	r4, [pc, #100]	; 16748 <__generate_code_for_if@@Base+0x128>
   166e0:	ldr	r3, [r4, #24]
   166e4:	ldr	r2, [r4, #28]
   166e8:	adds	r3, r3, #1
   166ec:	adc	r2, r2, #0
   166f0:	str	r3, [r4, #24]
   166f4:	str	r2, [r4, #28]
   166f8:	mov	r0, r5
   166fc:	bl	164d8 <__generate_code_for_body@@Base>
   16700:	ldr	r3, [r4, #40]	; 0x28
   16704:	ldr	r2, [r4, #44]	; 0x2c
   16708:	adds	r3, r3, #1
   1670c:	adc	r2, r2, #0
   16710:	str	r3, [r4, #40]	; 0x28
   16714:	str	r2, [r4, #44]	; 0x2c
   16718:	ldrd	r4, [sp]
   1671c:	ldrd	r6, [sp, #8]
   16720:	ldr	r8, [sp, #16]
   16724:	add	sp, sp, #20
   16728:	pop	{pc}		; (ldr pc, [sp], #4)
   1672c:	ldr	r3, [r4, #32]
   16730:	ldr	r1, [r4, #36]	; 0x24
   16734:	adds	r3, r3, #1
   16738:	adc	r1, r1, #0
   1673c:	str	r3, [r4, #32]
   16740:	str	r1, [r4, #36]	; 0x24
   16744:	b	16718 <__generate_code_for_if@@Base+0xf8>
   16748:	ldrdeq	fp, [r2], -r0

0001674c <__generate_code_for_function@@Base>:
   1674c:	strd	r4, [sp, #-16]!
   16750:	str	r6, [sp, #8]
   16754:	str	lr, [sp, #12]
   16758:	mov	r5, r0
   1675c:	mov	r6, r1
   16760:	ldr	r4, [pc, #116]	; 167dc <__generate_code_for_function@@Base+0x90>
   16764:	ldr	r3, [r4]
   16768:	ldr	r2, [r4, #4]
   1676c:	adds	r3, r3, #1
   16770:	adc	r2, r2, #0
   16774:	str	r3, [r4]
   16778:	str	r2, [r4, #4]
   1677c:	ldr	r2, [r1, #8]
   16780:	movw	r1, #37484	; 0x926c
   16784:	movt	r1, #1
   16788:	ldr	r0, [r0, #4]
   1678c:	bl	11a3c <fprintf@plt>
   16790:	ldr	r3, [r4, #8]
   16794:	ldr	r2, [r4, #12]
   16798:	adds	r3, r3, #1
   1679c:	adc	r2, r2, #0
   167a0:	str	r3, [r4, #8]
   167a4:	str	r2, [r4, #12]
   167a8:	ldr	r1, [r6, #12]
   167ac:	mov	r0, r5
   167b0:	bl	164d8 <__generate_code_for_body@@Base>
   167b4:	ldr	r3, [r4, #16]
   167b8:	ldr	r2, [r4, #20]
   167bc:	adds	r3, r3, #1
   167c0:	adc	r2, r2, #0
   167c4:	str	r3, [r4, #16]
   167c8:	str	r2, [r4, #20]
   167cc:	ldrd	r4, [sp]
   167d0:	ldr	r6, [sp, #8]
   167d4:	add	sp, sp, #12
   167d8:	pop	{pc}		; (ldr pc, [sp], #4)
   167dc:	andeq	fp, r2, r0, lsl #14

000167e0 <__generate_code_for_main@@Base>:
   167e0:	str	r4, [sp, #-8]!
   167e4:	str	lr, [sp, #4]
   167e8:	ldr	r3, [r1]
   167ec:	cmp	r3, #2
   167f0:	bne	16838 <__generate_code_for_main@@Base+0x58>
   167f4:	ldr	r4, [pc, #152]	; 16894 <__generate_code_for_main@@Base+0xb4>
   167f8:	ldr	r3, [r4]
   167fc:	ldr	r2, [r4, #4]
   16800:	adds	r3, r3, #1
   16804:	adc	r2, r2, #0
   16808:	str	r3, [r4]
   1680c:	str	r2, [r4, #4]
   16810:	bl	1674c <__generate_code_for_function@@Base>
   16814:	ldr	r3, [r4, #8]
   16818:	ldr	r2, [r4, #12]
   1681c:	adds	r3, r3, #1
   16820:	adc	r2, r2, #0
   16824:	str	r3, [r4, #8]
   16828:	str	r2, [r4, #12]
   1682c:	ldr	r4, [sp]
   16830:	add	sp, sp, #4
   16834:	pop	{pc}		; (ldr pc, [sp], #4)
   16838:	ldr	r4, [pc, #84]	; 16894 <__generate_code_for_main@@Base+0xb4>
   1683c:	ldr	r3, [r4, #-8]
   16840:	ldr	r2, [r4, #-4]
   16844:	adds	r3, r3, #1
   16848:	adc	r2, r2, #0
   1684c:	str	r3, [r4, #-8]
   16850:	str	r2, [r4, #-4]
   16854:	movw	r3, #43680	; 0xaaa0
   16858:	movt	r3, #2
   1685c:	ldr	r3, [r3]
   16860:	mov	r2, #46	; 0x2e
   16864:	mov	r1, #1
   16868:	movw	r0, #37492	; 0x9274
   1686c:	movt	r0, #1
   16870:	bl	119ac <fwrite@plt>
   16874:	ldr	r3, [r4, #16]
   16878:	ldr	r2, [r4, #20]
   1687c:	adds	r3, r3, #1
   16880:	adc	r2, r2, #0
   16884:	str	r3, [r4, #16]
   16888:	str	r2, [r4, #20]
   1688c:	mov	r0, #1
   16890:	bl	11a18 <exit@plt>
   16894:	andeq	fp, r2, r0, lsr #14

00016898 <__generate_code@@Base>:
   16898:	strd	r4, [sp, #-16]!
   1689c:	str	r6, [sp, #8]
   168a0:	str	lr, [sp, #12]
   168a4:	mov	r5, r0
   168a8:	mov	r6, r1
   168ac:	ldr	r4, [pc, #120]	; 1692c <__generate_code@@Base+0x94>
   168b0:	ldr	r3, [r4, #-8]
   168b4:	ldr	r2, [r4, #-4]
   168b8:	adds	r3, r3, #1
   168bc:	adc	r2, r2, #0
   168c0:	str	r3, [r4, #-8]
   168c4:	str	r2, [r4, #-4]
   168c8:	ldr	r3, [r0, #4]
   168cc:	mov	r2, #21
   168d0:	mov	r1, #1
   168d4:	movw	r0, #37540	; 0x92a4
   168d8:	movt	r0, #1
   168dc:	bl	119ac <fwrite@plt>
   168e0:	ldr	r3, [r4]
   168e4:	ldr	r2, [r4, #4]
   168e8:	adds	r3, r3, #1
   168ec:	adc	r2, r2, #0
   168f0:	str	r3, [r4]
   168f4:	str	r2, [r4, #4]
   168f8:	mov	r1, r6
   168fc:	mov	r0, r5
   16900:	bl	167e0 <__generate_code_for_main@@Base>
   16904:	ldr	r3, [r4, #8]
   16908:	ldr	r2, [r4, #12]
   1690c:	adds	r3, r3, #1
   16910:	adc	r2, r2, #0
   16914:	str	r3, [r4, #8]
   16918:	str	r2, [r4, #12]
   1691c:	ldrd	r4, [sp]
   16920:	ldr	r6, [sp, #8]
   16924:	add	sp, sp, #12
   16928:	pop	{pc}		; (ldr pc, [sp], #4)
   1692c:	andeq	fp, r2, r0, asr #14

00016930 <generate_code@@Base>:
   16930:	strd	r4, [sp, #-16]!
   16934:	str	r6, [sp, #8]
   16938:	str	lr, [sp, #12]
   1693c:	mov	r6, r0
   16940:	ldr	r4, [pc, #140]	; 169d4 <generate_code@@Base+0xa4>
   16944:	ldr	r3, [r4]
   16948:	ldr	r2, [r4, #4]
   1694c:	adds	r3, r3, #1
   16950:	adc	r2, r2, #0
   16954:	str	r3, [r4]
   16958:	str	r2, [r4, #4]
   1695c:	ldr	r0, [r0]
   16960:	bl	15b9c <build_ast@@Base>
   16964:	mov	r5, r0
   16968:	ldr	r3, [r4, #8]
   1696c:	ldr	r2, [r4, #12]
   16970:	adds	r3, r3, #1
   16974:	adc	r2, r2, #0
   16978:	str	r3, [r4, #8]
   1697c:	str	r2, [r4, #12]
   16980:	mov	r1, r0
   16984:	mov	r0, r6
   16988:	bl	16898 <__generate_code@@Base>
   1698c:	ldr	r3, [r4, #16]
   16990:	ldr	r2, [r4, #20]
   16994:	adds	r3, r3, #1
   16998:	adc	r2, r2, #0
   1699c:	str	r3, [r4, #16]
   169a0:	str	r2, [r4, #20]
   169a4:	mov	r0, r5
   169a8:	bl	14194 <free_node@@Base>
   169ac:	ldr	r3, [r4, #24]
   169b0:	ldr	r2, [r4, #28]
   169b4:	adds	r3, r3, #1
   169b8:	adc	r2, r2, #0
   169bc:	str	r3, [r4, #24]
   169c0:	str	r2, [r4, #28]
   169c4:	ldrd	r4, [sp]
   169c8:	ldr	r6, [sp, #8]
   169cc:	add	sp, sp, #12
   169d0:	pop	{pc}		; (ldr pc, [sp], #4)
   169d4:	andeq	fp, r2, r0, asr r7
   169d8:	str	r4, [sp, #-8]!
   169dc:	str	lr, [sp, #4]
   169e0:	movw	r0, #43240	; 0xa8e8
   169e4:	movt	r0, #2
   169e8:	bl	18a30 <__gcov_sort_n_vals@@Base+0x4a0>
   169ec:	ldr	r4, [sp]
   169f0:	add	sp, sp, #4
   169f4:	pop	{pc}		; (ldr pc, [sp], #4)
   169f8:	str	r4, [sp, #-8]!
   169fc:	str	lr, [sp, #4]
   16a00:	bl	189c0 <__gcov_sort_n_vals@@Base+0x430>
   16a04:	ldr	r4, [sp]
   16a08:	add	sp, sp, #4
   16a0c:	pop	{pc}		; (ldr pc, [sp], #4)
   16a10:	b	17cb4 <generate_code@@Base+0x1384>
   16a14:	push	{r4, r5, r6, r7, r8, lr}
   16a18:	subs	r5, r1, #0
   16a1c:	popeq	{r4, r5, r6, r7, r8, pc}
   16a20:	mov	r4, r0
   16a24:	bl	16a10 <generate_code@@Base+0xe0>
   16a28:	ldr	r3, [r4]
   16a2c:	ldr	r2, [r4, #4]
   16a30:	adds	r6, r3, r0
   16a34:	adc	r7, r2, r1
   16a38:	subs	r5, r5, #1
   16a3c:	strd	r6, [r4], #8
   16a40:	bne	16a24 <generate_code@@Base+0xf4>
   16a44:	pop	{r4, r5, r6, r7, r8, pc}
   16a48:	ldr	r3, [pc, #20]	; 16a64 <generate_code@@Base+0x134>
   16a4c:	ldr	r2, [pc, #20]	; 16a68 <generate_code@@Base+0x138>
   16a50:	add	r3, pc, r3
   16a54:	ldr	r3, [r3, r2]
   16a58:	ldmib	r3, {r0, r3}
   16a5c:	add	r0, r0, r3
   16a60:	bx	lr
   16a64:	andeq	r3, r1, r8, lsr #11
   16a68:	andeq	r0, r0, ip, lsr #1
   16a6c:	ldr	r3, [pc, #28]	; 16a90 <generate_code@@Base+0x160>
   16a70:	ldr	r2, [pc, #28]	; 16a94 <generate_code@@Base+0x164>
   16a74:	add	r3, pc, r3
   16a78:	ldr	r3, [r3, r2]
   16a7c:	ldr	r2, [r3]
   16a80:	cmp	r2, #0
   16a84:	ldrne	r0, [r3, #20]
   16a88:	moveq	r0, #1
   16a8c:	bx	lr
   16a90:	andeq	r3, r1, r4, lsl #11
   16a94:	andeq	r0, r0, ip, lsr #1
   16a98:	bx	lr
   16a9c:	ldr	ip, [pc, #32]	; 16ac4 <generate_code@@Base+0x194>
   16aa0:	mov	r3, #32
   16aa4:	teq	r0, r1
   16aa8:	movmi	r2, ip
   16aac:	movpl	r2, #0
   16ab0:	subs	r3, r3, #1
   16ab4:	lsl	r1, r1, #1
   16ab8:	eor	r0, r2, r0, lsl #1
   16abc:	bne	16aa4 <generate_code@@Base+0x174>
   16ac0:	bx	lr
   16ac4:	strbeq	r1, [r1], #3511	; 0xdb7
   16ac8:	ldr	r2, [pc, #60]	; 16b0c <generate_code@@Base+0x1dc>
   16acc:	ldr	r3, [pc, #60]	; 16b10 <generate_code@@Base+0x1e0>
   16ad0:	add	r2, pc, r2
   16ad4:	push	{r4, lr}
   16ad8:	ldr	r4, [r2, r3]
   16adc:	ldr	r0, [r4]
   16ae0:	cmp	r0, #0
   16ae4:	popeq	{r4, pc}
   16ae8:	ldr	r3, [pc, #36]	; 16b14 <generate_code@@Base+0x1e4>
   16aec:	ldr	r3, [r2, r3]
   16af0:	ldr	r3, [r3]
   16af4:	cmp	r0, r3
   16af8:	popeq	{r4, pc}
   16afc:	bl	11a84 <fclose@plt>
   16b00:	mov	r3, #0
   16b04:	str	r3, [r4]
   16b08:	pop	{r4, pc}
   16b0c:	andeq	r3, r1, r8, lsr #10
   16b10:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   16b14:	andeq	r0, r0, r0, lsr #1
   16b18:	ldr	r3, [pc, #76]	; 16b6c <generate_code@@Base+0x23c>
   16b1c:	ldr	r1, [pc, #76]	; 16b70 <generate_code@@Base+0x240>
   16b20:	add	r3, pc, r3
   16b24:	push	{r4, r5, r6, lr}
   16b28:	mov	r5, r0
   16b2c:	ldr	r4, [r3, r1]
   16b30:	lsl	r1, r0, #2
   16b34:	mov	r0, r4
   16b38:	mov	r2, #1
   16b3c:	ldr	r3, [r0], #28
   16b40:	bl	119ac <fwrite@plt>
   16b44:	cmp	r0, #1
   16b48:	movne	r3, #1
   16b4c:	ldr	r0, [r4, #8]
   16b50:	strne	r3, [r4, #20]
   16b54:	ldr	r3, [r4, #4]
   16b58:	sub	r0, r0, r5
   16b5c:	add	r3, r3, r5
   16b60:	str	r3, [r4, #4]
   16b64:	str	r0, [r4, #8]
   16b68:	pop	{r4, r5, r6, pc}
   16b6c:	ldrdeq	r3, [r1], -r8
   16b70:	andeq	r0, r0, ip, lsr #1
   16b74:	ldr	r3, [pc, #80]	; 16bcc <generate_code@@Base+0x29c>
   16b78:	ldr	r2, [pc, #80]	; 16bd0 <generate_code@@Base+0x2a0>
   16b7c:	add	r3, pc, r3
   16b80:	push	{r4, r5, r6, lr}
   16b84:	mov	r5, r0
   16b88:	ldr	r4, [r3, r2]
   16b8c:	ldr	r3, [r4, #8]
   16b90:	cmp	r3, #1024	; 0x400
   16b94:	bcs	16bac <generate_code@@Base+0x27c>
   16b98:	add	r0, r3, #7
   16b9c:	add	r3, r5, r3
   16ba0:	str	r3, [r4, #8]
   16ba4:	add	r0, r4, r0, lsl #2
   16ba8:	pop	{r4, r5, r6, pc}
   16bac:	mov	r0, #1024	; 0x400
   16bb0:	bl	16b18 <generate_code@@Base+0x1e8>
   16bb4:	ldr	r3, [r4, #8]
   16bb8:	cmp	r3, #0
   16bbc:	addne	r2, r4, #4096	; 0x1000
   16bc0:	ldrne	r2, [r2, #28]
   16bc4:	strne	r2, [r4, #28]
   16bc8:	b	16b98 <generate_code@@Base+0x268>
   16bcc:	andeq	r3, r1, ip, ror r4
   16bd0:	andeq	r0, r0, ip, lsr #1
   16bd4:	ldr	r3, [pc, #192]	; 16c9c <generate_code@@Base+0x36c>
   16bd8:	ldr	r2, [pc, #192]	; 16ca0 <generate_code@@Base+0x370>
   16bdc:	add	r3, pc, r3
   16be0:	push	{r4, r5, r6, lr}
   16be4:	ldr	r4, [r3, r2]
   16be8:	ldr	r2, [r4, #24]
   16bec:	ldr	r3, [r4, #8]
   16bf0:	ldr	ip, [r4, #12]
   16bf4:	cmp	r2, #0
   16bf8:	sub	ip, ip, r3
   16bfc:	ble	16c78 <generate_code@@Base+0x348>
   16c00:	cmp	ip, r0
   16c04:	mov	r5, r0
   16c08:	bcs	16c64 <generate_code@@Base+0x334>
   16c0c:	ldr	r2, [r4, #4]
   16c10:	cmp	ip, #0
   16c14:	add	r2, r2, r3
   16c18:	str	r2, [r4, #4]
   16c1c:	addne	r2, r4, #28
   16c20:	mov	r0, r4
   16c24:	ldrne	r3, [r2, r3, lsl #2]
   16c28:	mov	r6, #0
   16c2c:	strne	r3, [r4, #28]
   16c30:	ldr	r3, [r0], #28
   16c34:	mov	r2, #4096	; 0x1000
   16c38:	add	r0, r0, ip, lsl #2
   16c3c:	mov	r1, #1
   16c40:	str	ip, [r4, #12]
   16c44:	str	r6, [r4, #8]
   16c48:	bl	119c4 <fread@plt>
   16c4c:	ldr	r3, [r4, #12]
   16c50:	add	r0, r3, r0, lsr #2
   16c54:	cmp	r0, r5
   16c58:	str	r0, [r4, #12]
   16c5c:	bcc	16c80 <generate_code@@Base+0x350>
   16c60:	ldr	r3, [r4, #8]
   16c64:	add	r0, r3, #7
   16c68:	add	r5, r5, r3
   16c6c:	str	r5, [r4, #8]
   16c70:	add	r0, r4, r0, lsl #2
   16c74:	pop	{r4, r5, r6, pc}
   16c78:	mov	r0, #0
   16c7c:	pop	{r4, r5, r6, pc}
   16c80:	ldr	r3, [r4, #16]
   16c84:	str	r6, [r4, #12]
   16c88:	add	r5, r5, r3
   16c8c:	sub	r5, r5, r0
   16c90:	str	r5, [r4, #16]
   16c94:	mov	r0, r6
   16c98:	pop	{r4, r5, r6, pc}
   16c9c:	andeq	r3, r1, ip, lsl r4
   16ca0:	andeq	r0, r0, ip, lsr #1
   16ca4:	push	{r4, r5, r6, lr}
   16ca8:	ldr	r4, [pc, #92]	; 16d0c <generate_code@@Base+0x3dc>
   16cac:	ldr	r3, [pc, #92]	; 16d10 <generate_code@@Base+0x3e0>
   16cb0:	add	r4, pc, r4
   16cb4:	ldr	r5, [r4, r3]
   16cb8:	ldr	r0, [r5]
   16cbc:	cmp	r0, #0
   16cc0:	popne	{r4, r5, r6, pc}
   16cc4:	ldr	r0, [pc, #72]	; 16d14 <generate_code@@Base+0x3e4>
   16cc8:	add	r0, pc, r0
   16ccc:	bl	119dc <getenv@plt>
   16cd0:	cmp	r0, #0
   16cd4:	beq	16d04 <generate_code@@Base+0x3d4>
   16cd8:	ldr	r1, [pc, #56]	; 16d18 <generate_code@@Base+0x3e8>
   16cdc:	add	r1, pc, r1
   16ce0:	bl	11acc <fopen64@plt>
   16ce4:	str	r0, [r5]
   16ce8:	cmp	r0, #0
   16cec:	popne	{r4, r5, r6, pc}
   16cf0:	ldr	r3, [pc, #36]	; 16d1c <generate_code@@Base+0x3ec>
   16cf4:	ldr	r3, [r4, r3]
   16cf8:	ldr	r0, [r3]
   16cfc:	str	r0, [r5]
   16d00:	pop	{r4, r5, r6, pc}
   16d04:	ldr	r0, [r5]
   16d08:	b	16ce8 <generate_code@@Base+0x3b8>
   16d0c:	andeq	r3, r1, r8, asr #6
   16d10:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   16d14:	andeq	r2, r0, r0, asr #12
   16d18:	ldrdeq	r2, [r0], -r8
   16d1c:	andeq	r0, r0, r0, lsr #1
   16d20:	push	{r0, r1, r2, r3}
   16d24:	push	{lr}		; (str lr, [sp, #-4]!)
   16d28:	sub	sp, sp, #12
   16d2c:	add	r3, sp, #20
   16d30:	str	r3, [sp, #4]
   16d34:	bl	16ca4 <generate_code@@Base+0x374>
   16d38:	ldr	r1, [sp, #16]
   16d3c:	ldr	r2, [sp, #4]
   16d40:	bl	11aa8 <vfprintf@plt>
   16d44:	add	sp, sp, #12
   16d48:	pop	{lr}		; (ldr lr, [sp], #4)
   16d4c:	add	sp, sp, #16
   16d50:	bx	lr
   16d54:	push	{r4, r5, r6, r7, r8, lr}
   16d58:	subs	r6, r1, #0
   16d5c:	beq	16db0 <generate_code@@Base+0x480>
   16d60:	cmp	r2, #0
   16d64:	ldr	r7, [r6]
   16d68:	beq	16da0 <generate_code@@Base+0x470>
   16d6c:	add	r4, r0, #12
   16d70:	add	r5, r4, r2, lsl #2
   16d74:	mov	r3, #0
   16d78:	ldr	r2, [r4, #4]!
   16d7c:	add	r1, r6, r3, lsl #3
   16d80:	cmp	r2, #0
   16d84:	add	r8, r3, #1
   16d88:	beq	16d98 <generate_code@@Base+0x468>
   16d8c:	ldr	r0, [r1, #28]
   16d90:	bl	11988 <free@plt>
   16d94:	mov	r3, r8
   16d98:	cmp	r4, r5
   16d9c:	bne	16d78 <generate_code@@Base+0x448>
   16da0:	mov	r0, r6
   16da4:	bl	11988 <free@plt>
   16da8:	mov	r0, r7
   16dac:	pop	{r4, r5, r6, r7, r8, pc}
   16db0:	mov	r7, r6
   16db4:	b	16da8 <generate_code@@Base+0x478>
   16db8:	push	{r4, r5}
   16dbc:	mov	r4, r0
   16dc0:	mov	r5, r1
   16dc4:	orrs	r3, r4, r5
   16dc8:	beq	16e0c <generate_code@@Base+0x4dc>
   16dcc:	cmp	r1, #0
   16dd0:	clzeq	r2, r0
   16dd4:	addeq	r2, r2, #32
   16dd8:	clzne	r2, r1
   16ddc:	rsb	r3, r2, #63	; 0x3f
   16de0:	cmp	r3, #1
   16de4:	bls	16e0c <generate_code@@Base+0x4dc>
   16de8:	rsb	r1, r2, #61	; 0x3d
   16dec:	rsb	r0, r1, #32
   16df0:	lsr	r3, r4, r1
   16df4:	sub	r1, r1, #32
   16df8:	orr	r3, r3, r5, lsl r0
   16dfc:	orr	r3, r3, r5, lsr r1
   16e00:	rsb	r2, r2, #1073741886	; 0x4000003e
   16e04:	and	r0, r3, #3
   16e08:	add	r0, r0, r2, lsl #2
   16e0c:	pop	{r4, r5}
   16e10:	bx	lr
   16e14:	push	{r4, r5, r6, lr}
   16e18:	mov	r1, r3
   16e1c:	mov	r6, r0
   16e20:	mov	r0, r2
   16e24:	mov	r4, r2
   16e28:	mov	r5, r3
   16e2c:	bl	16db8 <generate_code@@Base+0x488>
   16e30:	add	r0, r0, r0, lsl #1
   16e34:	lsl	r0, r0, #3
   16e38:	add	r3, r6, r0
   16e3c:	ldr	r1, [r6, r0]
   16e40:	ldr	r2, [r3, #16]
   16e44:	add	r1, r1, #1
   16e48:	str	r1, [r6, r0]
   16e4c:	ldrd	r0, [r3, #8]
   16e50:	ldr	ip, [r3, #20]
   16e54:	adds	r2, r2, r4
   16e58:	str	r2, [r3, #16]
   16e5c:	adc	r2, ip, r5
   16e60:	cmp	r4, r0
   16e64:	sbcs	r1, r5, r1
   16e68:	str	r2, [r3, #20]
   16e6c:	strdlt	r4, [r3, #8]
   16e70:	pop	{r4, r5, r6, pc}
   16e74:	ldr	r3, [r1, #8]
   16e78:	cmp	r3, #0
   16e7c:	bxeq	lr
   16e80:	add	r2, r1, #6016	; 0x1780
   16e84:	push	{r4, r5, r6, r7, r8, lr}
   16e88:	mov	r3, r1
   16e8c:	mov	r8, r1
   16e90:	mov	r7, r0
   16e94:	ldrd	r4, [r1, #24]
   16e98:	add	r2, r2, #32
   16e9c:	mov	ip, #0
   16ea0:	mov	r0, #0
   16ea4:	mov	r1, #0
   16ea8:	str	ip, [r3, #40]	; 0x28
   16eac:	strd	r4, [r3, #48]	; 0x30
   16eb0:	strd	r0, [r3, #56]	; 0x38
   16eb4:	add	r3, r3, #24
   16eb8:	cmp	r3, r2
   16ebc:	bne	16ea8 <generate_code@@Base+0x578>
   16ec0:	cmp	r7, #0
   16ec4:	popeq	{r4, r5, r6, r7, r8, pc}
   16ec8:	add	r8, r8, #40	; 0x28
   16ecc:	ldr	r3, [r7, #16]
   16ed0:	cmp	r3, #0
   16ed4:	beq	16f5c <generate_code@@Base+0x62c>
   16ed8:	ldr	r2, [r7, #52]	; 0x34
   16edc:	cmp	r2, #0
   16ee0:	beq	16f5c <generate_code@@Base+0x62c>
   16ee4:	mov	r6, #0
   16ee8:	b	16ef8 <generate_code@@Base+0x5c8>
   16eec:	add	r6, r6, #1
   16ef0:	cmp	r2, r6
   16ef4:	beq	16f5c <generate_code@@Base+0x62c>
   16ef8:	ldr	r3, [r7, #56]	; 0x38
   16efc:	ldr	r5, [r3, r6, lsl #2]
   16f00:	cmp	r5, #0
   16f04:	beq	16eec <generate_code@@Base+0x5bc>
   16f08:	ldr	r3, [r5]
   16f0c:	cmp	r3, r7
   16f10:	bne	16eec <generate_code@@Base+0x5bc>
   16f14:	ldr	r3, [r5, #16]
   16f18:	cmp	r3, #0
   16f1c:	beq	16eec <generate_code@@Base+0x5bc>
   16f20:	mov	r4, #0
   16f24:	ldr	r2, [r5, #20]
   16f28:	lsl	r3, r4, #3
   16f2c:	add	r2, r2, r3
   16f30:	mov	r0, r8
   16f34:	ldrd	r2, [r2]
   16f38:	bl	16e14 <generate_code@@Base+0x4e4>
   16f3c:	ldr	r3, [r5, #16]
   16f40:	add	r4, r4, #1
   16f44:	cmp	r3, r4
   16f48:	bhi	16f24 <generate_code@@Base+0x5f4>
   16f4c:	ldr	r2, [r7, #52]	; 0x34
   16f50:	add	r6, r6, #1
   16f54:	cmp	r2, r6
   16f58:	bne	16ef8 <generate_code@@Base+0x5c8>
   16f5c:	ldr	r7, [r7, #4]
   16f60:	cmp	r7, #0
   16f64:	bne	16ecc <generate_code@@Base+0x59c>
   16f68:	pop	{r4, r5, r6, r7, r8, pc}
   16f6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f70:	sub	sp, sp, #12
   16f74:	mov	r6, r0
   16f78:	str	r0, [sp, #4]
   16f7c:	mov	r8, r2
   16f80:	mov	r0, r1
   16f84:	mov	r4, r1
   16f88:	ldr	r2, [pc, #364]	; 170fc <generate_code@@Base+0x7cc>
   16f8c:	mov	r1, #0
   16f90:	bl	11a60 <memset@plt>
   16f94:	mov	r5, #0
   16f98:	cmp	r6, #0
   16f9c:	str	r5, [r8]
   16fa0:	beq	170e0 <generate_code@@Base+0x7b0>
   16fa4:	mov	r9, r5
   16fa8:	ldr	r0, [r6, #12]
   16fac:	bl	11a24 <strlen@plt>
   16fb0:	cmp	r5, r0
   16fb4:	strcc	r0, [r8]
   16fb8:	mov	r0, r9
   16fbc:	ldr	r1, [r6, #8]
   16fc0:	bl	16a9c <generate_code@@Base+0x16c>
   16fc4:	ldr	r7, [r6, #52]	; 0x34
   16fc8:	mov	r1, r7
   16fcc:	bl	16a9c <generate_code@@Base+0x16c>
   16fd0:	cmp	r7, #0
   16fd4:	mov	r9, r0
   16fd8:	beq	170cc <generate_code@@Base+0x79c>
   16fdc:	ldr	r5, [r6, #56]	; 0x38
   16fe0:	add	r7, r5, r7, lsl #2
   16fe4:	sub	r7, r7, #4
   16fe8:	sub	r5, r5, #4
   16fec:	b	1701c <generate_code@@Base+0x6ec>
   16ff0:	ldr	r3, [sl]
   16ff4:	mov	r0, r9
   16ff8:	cmp	r3, r6
   16ffc:	beq	17038 <generate_code@@Base+0x708>
   17000:	mov	r1, #0
   17004:	bl	16a9c <generate_code@@Base+0x16c>
   17008:	mov	r1, #0
   1700c:	bl	16a9c <generate_code@@Base+0x16c>
   17010:	mov	r9, r0
   17014:	cmp	r5, r7
   17018:	beq	170cc <generate_code@@Base+0x79c>
   1701c:	ldr	sl, [r5, #4]!
   17020:	cmp	sl, #0
   17024:	bne	16ff0 <generate_code@@Base+0x6c0>
   17028:	mov	r1, sl
   1702c:	mov	r0, r9
   17030:	bl	16a9c <generate_code@@Base+0x16c>
   17034:	b	17008 <generate_code@@Base+0x6d8>
   17038:	ldr	r1, [sl, #12]
   1703c:	bl	16a9c <generate_code@@Base+0x16c>
   17040:	ldr	r1, [sl, #8]
   17044:	bl	16a9c <generate_code@@Base+0x16c>
   17048:	ldr	r3, [r6, #16]
   1704c:	cmp	r3, #0
   17050:	mov	r9, r0
   17054:	beq	17014 <generate_code@@Base+0x6e4>
   17058:	ldr	fp, [sl, #16]
   1705c:	ldr	r3, [r4, #8]
   17060:	mov	r1, fp
   17064:	add	r3, r3, fp
   17068:	str	r3, [r4, #8]
   1706c:	bl	16a9c <generate_code@@Base+0x16c>
   17070:	cmp	fp, #0
   17074:	mov	r9, r0
   17078:	beq	17014 <generate_code@@Base+0x6e4>
   1707c:	ldr	r2, [sl, #20]
   17080:	ldr	r3, [r4, #16]
   17084:	add	lr, r2, fp, lsl #3
   17088:	ldr	ip, [r4, #20]
   1708c:	sub	lr, lr, #8
   17090:	sub	r2, r2, #8
   17094:	ldrd	r0, [r2, #8]!
   17098:	ldrd	sl, [r4, #24]
   1709c:	adds	r3, r3, r0
   170a0:	adc	ip, ip, r1
   170a4:	str	ip, [r4, #20]
   170a8:	str	r3, [r4, #16]
   170ac:	ldrd	r0, [r2]
   170b0:	cmp	sl, r0
   170b4:	sbcs	sl, fp, r1
   170b8:	strdlt	r0, [r4, #24]
   170bc:	cmp	lr, r2
   170c0:	bne	17094 <generate_code@@Base+0x764>
   170c4:	cmp	r5, r7
   170c8:	bne	1701c <generate_code@@Base+0x6ec>
   170cc:	ldr	r6, [r6, #4]
   170d0:	cmp	r6, #0
   170d4:	beq	170e4 <generate_code@@Base+0x7b4>
   170d8:	ldr	r5, [r8]
   170dc:	b	16fa8 <generate_code@@Base+0x678>
   170e0:	ldr	r9, [sp, #4]
   170e4:	ldr	r0, [sp, #4]
   170e8:	mov	r1, r4
   170ec:	bl	16e74 <generate_code@@Base+0x544>
   170f0:	mov	r0, r9
   170f4:	add	sp, sp, #12
   170f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170fc:	andeq	r1, r0, r8, asr #15
   17100:	push	{r4, r5, r6, lr}
   17104:	mov	r4, r0
   17108:	ldr	r0, [pc, #192]	; 171d0 <generate_code@@Base+0x8a0>
   1710c:	add	r0, pc, r0
   17110:	bl	119dc <getenv@plt>
   17114:	subs	r3, r0, #0
   17118:	beq	17124 <generate_code@@Base+0x7f4>
   1711c:	bl	11ac0 <atoi@plt>
   17120:	bic	r3, r0, r0, asr #31
   17124:	ldr	r0, [pc, #168]	; 171d4 <generate_code@@Base+0x8a4>
   17128:	str	r3, [r4, #8]
   1712c:	add	r0, pc, r0
   17130:	bl	119dc <getenv@plt>
   17134:	subs	r6, r0, #0
   17138:	beq	171a8 <generate_code@@Base+0x878>
   1713c:	bl	11a24 <strlen@plt>
   17140:	ldr	r3, [r4, #4]
   17144:	add	r3, r3, #2
   17148:	cmp	r0, #0
   1714c:	bne	17188 <generate_code@@Base+0x858>
   17150:	ldr	r2, [r4, #8]
   17154:	cmp	r2, #0
   17158:	beq	171bc <generate_code@@Base+0x88c>
   1715c:	ldr	r6, [pc, #116]	; 171d8 <generate_code@@Base+0x8a8>
   17160:	mov	r5, #1
   17164:	add	r6, pc, r6
   17168:	str	r5, [r4, #12]
   1716c:	add	r0, r3, r5
   17170:	bl	119e8 <malloc@plt>
   17174:	mov	r2, r5
   17178:	mov	r1, r6
   1717c:	str	r0, [r4]
   17180:	pop	{r4, r5, r6, lr}
   17184:	b	11994 <memcpy@plt>
   17188:	sub	r5, r0, #1
   1718c:	ldrb	r2, [r6, r5]
   17190:	cmp	r2, #47	; 0x2f
   17194:	movne	r5, r0
   17198:	bne	17168 <generate_code@@Base+0x838>
   1719c:	cmp	r5, #0
   171a0:	bne	17168 <generate_code@@Base+0x838>
   171a4:	b	17150 <generate_code@@Base+0x820>
   171a8:	ldr	r2, [r4, #8]
   171ac:	ldr	r3, [r4, #4]
   171b0:	cmp	r2, #0
   171b4:	add	r3, r3, #2
   171b8:	bne	1715c <generate_code@@Base+0x82c>
   171bc:	str	r2, [r4, #12]
   171c0:	mov	r0, r3
   171c4:	bl	119e8 <malloc@plt>
   171c8:	str	r0, [r4]
   171cc:	pop	{r4, r5, r6, pc}
   171d0:	andeq	r2, r0, r0, lsl r2
   171d4:	andeq	r2, r0, r4, lsl #4
   171d8:			; <UNDEFINED> instruction: 0x000021b4
   171dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171e0:	sub	sp, sp, #6080	; 0x17c0
   171e4:	sub	sp, sp, #36	; 0x24
   171e8:	mov	r3, r0
   171ec:	str	r1, [sp, #40]	; 0x28
   171f0:	mov	r1, #0
   171f4:	mov	r4, r1
   171f8:	str	r0, [sp, #56]	; 0x38
   171fc:	add	r7, r3, #6016	; 0x1780
   17200:	add	r0, sp, #64	; 0x40
   17204:	add	r6, sp, #2016	; 0x7e0
   17208:	ldr	r2, [pc, #984]	; 175e8 <generate_code@@Base+0xcb8>
   1720c:	mov	r5, #251	; 0xfb
   17210:	str	r0, [sp, #60]	; 0x3c
   17214:	str	r5, [sp, #52]	; 0x34
   17218:	str	r6, [sp, #36]	; 0x24
   1721c:	mov	r9, r4
   17220:	bl	11a60 <memset@plt>
   17224:	mov	sl, r4
   17228:	add	r3, r7, #8
   1722c:	mov	r0, r4
   17230:	str	r3, [sp, #48]	; 0x30
   17234:	sub	r3, r6, #1952	; 0x7a0
   17238:	str	r3, [sp, #44]	; 0x2c
   1723c:	ldr	r3, [sp, #48]	; 0x30
   17240:	ldr	r2, [r3, #16]
   17244:	ldr	r7, [r3]
   17248:	str	r2, [sp, #16]
   1724c:	ldr	r2, [r3, #20]
   17250:	cmp	r7, #0
   17254:	str	r2, [sp, #20]
   17258:	beq	17578 <generate_code@@Base+0xc48>
   1725c:	ldrd	r2, [r3, #8]
   17260:	str	r9, [sp, #12]
   17264:	strd	r2, [sp, #24]
   17268:	b	17348 <generate_code@@Base+0xa18>
   1726c:	bls	175dc <generate_code@@Base+0xcac>
   17270:	ldr	r3, [sp, #12]
   17274:	mov	r2, r4
   17278:	umull	r0, r1, r7, r3
   1727c:	mov	r3, #0
   17280:	mla	r1, r7, sl, r1
   17284:	bl	18af8 <__gcov_sort_n_vals@@Base+0x568>
   17288:	mov	r6, r0
   1728c:	mov	r8, r1
   17290:	ldr	r3, [sp, #12]
   17294:	sub	r4, r4, r7
   17298:	subs	r3, r3, r6
   1729c:	sbc	sl, sl, r8
   172a0:	mov	fp, r7
   172a4:	mov	r7, #0
   172a8:	str	r3, [sp, #12]
   172ac:	ldr	r0, [sp, #16]
   172b0:	ldr	r3, [sp, #20]
   172b4:	str	r7, [sp, #16]
   172b8:	str	r7, [sp, #20]
   172bc:	adds	r6, r6, r0
   172c0:	ldrd	r0, [sp]
   172c4:	adc	r8, r8, r3
   172c8:	bl	16db8 <generate_code@@Base+0x488>
   172cc:	ldr	r3, [sp, #44]	; 0x2c
   172d0:	add	r1, r0, r0, lsl #1
   172d4:	lsl	r1, r1, #3
   172d8:	add	ip, r3, r1
   172dc:	ldr	r3, [sp, #36]	; 0x24
   172e0:	ldr	lr, [ip, #16]
   172e4:	add	r1, r3, r1
   172e8:	adds	r6, lr, r6
   172ec:	ldr	lr, [ip, #20]
   172f0:	ldrd	r2, [ip, #8]
   172f4:	adc	lr, lr, r8
   172f8:	ldrd	r8, [sp]
   172fc:	str	lr, [sp, #32]
   17300:	orrs	lr, r2, r3
   17304:	moveq	lr, #1
   17308:	movne	lr, #0
   1730c:	cmp	r8, r2
   17310:	sbcs	r3, r9, r3
   17314:	orrlt	lr, lr, #1
   17318:	cmp	lr, #0
   1731c:	str	r6, [ip, #16]
   17320:	ldr	r6, [r1, #-1952]	; 0xfffff860
   17324:	ldr	r3, [sp, #32]
   17328:	strdne	r8, [ip, #8]
   1732c:	cmp	r4, #0
   17330:	add	fp, r6, fp
   17334:	subeq	r5, r5, #1
   17338:	cmp	r7, #0
   1733c:	str	r3, [ip, #20]
   17340:	str	fp, [r1, #-1952]	; 0xfffff860
   17344:	beq	17574 <generate_code@@Base+0xc44>
   17348:	cmp	r4, #0
   1734c:	beq	173d0 <generate_code@@Base+0xaa0>
   17350:	add	r2, r5, r5, lsl #1
   17354:	ldr	r3, [sp, #40]	; 0x28
   17358:	add	r2, r3, r2, lsl #3
   1735c:	ldrd	r0, [sp, #24]
   17360:	ldr	r3, [r2, #8]
   17364:	ldr	r2, [r2, #12]
   17368:	adds	r3, r0, r3
   1736c:	str	r3, [sp]
   17370:	adc	r3, r1, r2
   17374:	cmp	r4, r7
   17378:	str	r3, [sp, #4]
   1737c:	bcs	1726c <generate_code@@Base+0x93c>
   17380:	ldr	r6, [sp, #16]
   17384:	ldr	r8, [sp, #20]
   17388:	mov	r2, r7
   1738c:	umull	r0, r1, r4, r6
   17390:	mov	r3, #0
   17394:	mla	r1, r4, r8, r1
   17398:	bl	18af8 <__gcov_sort_n_vals@@Base+0x568>
   1739c:	sub	r7, r7, r4
   173a0:	mov	fp, r4
   173a4:	mov	r4, #0
   173a8:	subs	r2, r6, r0
   173ac:	str	r2, [sp, #16]
   173b0:	sbc	r2, r8, r1
   173b4:	ldr	r6, [sp, #12]
   173b8:	mov	r8, sl
   173bc:	mov	r3, r1
   173c0:	str	r2, [sp, #20]
   173c4:	str	r4, [sp, #12]
   173c8:	mov	sl, r4
   173cc:	b	172bc <generate_code@@Base+0x98c>
   173d0:	cmp	r5, #0
   173d4:	blt	175d4 <generate_code@@Base+0xca4>
   173d8:	ldr	r3, [sp, #40]	; 0x28
   173dc:	add	r2, r5, r5, lsl #1
   173e0:	ldr	r4, [r3, r2, lsl #3]
   173e4:	add	r2, r3, r2, lsl #3
   173e8:	cmp	r4, #0
   173ec:	bne	17564 <generate_code@@Base+0xc34>
   173f0:	mov	r3, r2
   173f4:	ldr	r9, [sp, #12]
   173f8:	b	1740c <generate_code@@Base+0xadc>
   173fc:	ldr	r4, [r3]
   17400:	mov	r2, r3
   17404:	cmp	r4, #0
   17408:	bne	17564 <generate_code@@Base+0xc34>
   1740c:	subs	r5, r5, #1
   17410:	sub	r3, r3, #24
   17414:	bcs	173fc <generate_code@@Base+0xacc>
   17418:	ldr	r2, [sp, #52]	; 0x34
   1741c:	ldr	ip, [sp, #36]	; 0x24
   17420:	ldr	r4, [sp, #16]
   17424:	lsl	r3, r2, #1
   17428:	add	r1, r3, r2
   1742c:	sub	r2, ip, #1952	; 0x7a0
   17430:	lsl	r1, r1, #3
   17434:	add	r2, r2, r1
   17438:	add	r1, ip, r1
   1743c:	ldr	ip, [r2, #16]
   17440:	ldr	lr, [r1, #-1952]	; 0xfffff860
   17444:	adds	ip, ip, r4
   17448:	add	r7, lr, r7
   1744c:	ldrd	r4, [r2, #8]
   17450:	ldr	lr, [r2, #20]
   17454:	str	r7, [r1, #-1952]	; 0xfffff860
   17458:	ldr	r1, [sp, #20]
   1745c:	str	ip, [r2, #16]
   17460:	adc	lr, lr, r1
   17464:	orrs	r1, r4, r5
   17468:	str	lr, [r2, #20]
   1746c:	beq	17544 <generate_code@@Base+0xc14>
   17470:	ldrd	r6, [sp, #24]
   17474:	cmp	r6, r4
   17478:	sbcs	r2, r7, r5
   1747c:	blt	17544 <generate_code@@Base+0xc14>
   17480:	ldr	r2, [sp, #52]	; 0x34
   17484:	ldr	lr, [sp, #60]	; 0x3c
   17488:	add	ip, r3, r2
   1748c:	ldr	r3, [sp, #56]	; 0x38
   17490:	lsl	ip, ip, #3
   17494:	add	r1, lr, ip
   17498:	add	ip, r3, ip
   1749c:	b	174f8 <generate_code@@Base+0xbc8>
   174a0:	ldr	r3, [r1, #-8]
   174a4:	ldr	r6, [ip, #-8]
   174a8:	ldr	r7, [ip, #-4]
   174ac:	ldr	r2, [r1, #-4]
   174b0:	adds	r6, r3, r6
   174b4:	ldrd	r4, [r1, #-16]
   174b8:	adc	r2, r2, r7
   174bc:	ldr	r3, [r1, #-24]	; 0xffffffe8
   174c0:	ldr	r7, [ip, #-24]	; 0xffffffe8
   174c4:	orrs	r8, r4, r5
   174c8:	add	r3, r3, r7
   174cc:	str	r2, [r1, #-4]
   174d0:	str	r3, [r1, #-24]	; 0xffffffe8
   174d4:	str	r6, [r1, #-8]
   174d8:	ldrd	r2, [ip, #-16]
   174dc:	sub	ip, ip, #24
   174e0:	beq	174f0 <generate_code@@Base+0xbc0>
   174e4:	cmp	r2, r4
   174e8:	sbcs	r4, r3, r5
   174ec:	bge	174f4 <generate_code@@Base+0xbc4>
   174f0:	strd	r2, [r1, #-16]
   174f4:	sub	r1, r1, #24
   174f8:	cmp	r1, lr
   174fc:	bne	174a0 <generate_code@@Base+0xb70>
   17500:	ldr	r3, [sp, #36]	; 0x24
   17504:	add	r0, r0, r0, lsl #1
   17508:	sub	r3, r3, #1952	; 0x7a0
   1750c:	add	r3, r3, r0, lsl #3
   17510:	ldr	r1, [sp, #60]	; 0x3c
   17514:	ldr	r2, [r3, #16]
   17518:	ldr	ip, [r3, #20]
   1751c:	adds	r9, r2, r9
   17520:	adc	sl, ip, sl
   17524:	ldr	r0, [sp, #56]	; 0x38
   17528:	ldr	r2, [pc, #184]	; 175e8 <generate_code@@Base+0xcb8>
   1752c:	str	r9, [r3, #16]
   17530:	str	sl, [r3, #20]
   17534:	bl	11994 <memcpy@plt>
   17538:	add	sp, sp, #6080	; 0x17c0
   1753c:	add	sp, sp, #36	; 0x24
   17540:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17544:	ldr	r2, [sp, #52]	; 0x34
   17548:	ldrd	r4, [sp, #24]
   1754c:	add	r1, r3, r2
   17550:	ldr	r2, [sp, #36]	; 0x24
   17554:	sub	r2, r2, #1952	; 0x7a0
   17558:	add	r2, r2, r1, lsl #3
   1755c:	strd	r4, [r2, #8]
   17560:	b	17480 <generate_code@@Base+0xb50>
   17564:	ldr	r3, [r2, #16]
   17568:	ldr	sl, [r2, #20]
   1756c:	str	r3, [sp, #12]
   17570:	b	1735c <generate_code@@Base+0xa2c>
   17574:	ldr	r9, [sp, #12]
   17578:	ldr	r3, [sp, #52]	; 0x34
   1757c:	sub	r3, r3, #1
   17580:	str	r3, [sp, #52]	; 0x34
   17584:	cmn	r3, #1
   17588:	ldr	r3, [sp, #48]	; 0x30
   1758c:	sub	r3, r3, #24
   17590:	str	r3, [sp, #48]	; 0x30
   17594:	bne	1723c <generate_code@@Base+0x90c>
   17598:	cmp	r4, #0
   1759c:	subne	r5, r5, #1
   175a0:	cmp	r5, #0
   175a4:	blt	17500 <generate_code@@Base+0xbd0>
   175a8:	add	r5, r5, r5, lsl #1
   175ac:	ldr	ip, [sp, #40]	; 0x28
   175b0:	add	r3, ip, r5, lsl #3
   175b4:	ldr	r2, [r3, #16]
   175b8:	ldr	r1, [r3, #20]
   175bc:	adds	r9, r9, r2
   175c0:	adc	sl, sl, r1
   175c4:	cmp	ip, r3
   175c8:	sub	r3, r3, #24
   175cc:	bne	175b4 <generate_code@@Base+0xc84>
   175d0:	b	17500 <generate_code@@Base+0xbd0>
   175d4:	ldr	r9, [sp, #12]
   175d8:	b	17418 <generate_code@@Base+0xae8>
   175dc:	ldr	r6, [sp, #12]
   175e0:	mov	r8, sl
   175e4:	b	17290 <generate_code@@Base+0x960>
   175e8:	andeq	r1, r0, r0, lsr #15
   175ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   175f0:	ldrb	r4, [r0]
   175f4:	cmp	r4, #47	; 0x2f
   175f8:	addeq	r5, r0, #1
   175fc:	ldrbeq	r4, [r0, #1]
   17600:	movne	r5, r0
   17604:	cmp	r4, #0
   17608:	beq	1765c <generate_code@@Base+0xd2c>
   1760c:	mov	r6, r0
   17610:	mov	r7, #0
   17614:	mov	r8, #47	; 0x2f
   17618:	ldr	sl, [pc, #136]	; 176a8 <generate_code@@Base+0xd78>
   1761c:	b	1762c <generate_code@@Base+0xcfc>
   17620:	ldrb	r4, [r5, #1]!
   17624:	cmp	r4, #0
   17628:	beq	1765c <generate_code@@Base+0xd2c>
   1762c:	cmp	r4, #47	; 0x2f
   17630:	bne	17620 <generate_code@@Base+0xcf0>
   17634:	strb	r7, [r5]
   17638:	mov	r1, #0
   1763c:	mov	r0, r6
   17640:	bl	11a78 <access@plt>
   17644:	cmn	r0, #1
   17648:	beq	17668 <generate_code@@Base+0xd38>
   1764c:	strb	r8, [r5]
   17650:	ldrb	r4, [r5, #1]!
   17654:	cmp	r4, #0
   17658:	bne	1762c <generate_code@@Base+0xcfc>
   1765c:	mov	r9, #0
   17660:	mov	r0, r9
   17664:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17668:	mov	r1, sl
   1766c:	mov	r0, r6
   17670:	bl	11a54 <mkdir@plt>
   17674:	cmn	r0, #1
   17678:	mov	r9, r0
   1767c:	bne	1764c <generate_code@@Base+0xd1c>
   17680:	bl	11a48 <__errno_location@plt>
   17684:	ldr	r3, [r0]
   17688:	cmp	r3, #17
   1768c:	beq	1764c <generate_code@@Base+0xd1c>
   17690:	ldr	r0, [pc, #20]	; 176ac <generate_code@@Base+0xd7c>
   17694:	mov	r1, r6
   17698:	add	r0, pc, r0
   1769c:	bl	16d20 <generate_code@@Base+0x3f0>
   176a0:	strb	r4, [r5]
   176a4:	b	17660 <generate_code@@Base+0xd30>
   176a8:	andeq	r0, r0, sp, ror #3
   176ac:	andeq	r1, r0, r4, lsr #25
   176b0:	ldr	r3, [pc, #76]	; 17704 <generate_code@@Base+0xdd4>
   176b4:	cmp	r1, r3
   176b8:	beq	176fc <generate_code@@Base+0xdcc>
   176bc:	cmp	r2, #0
   176c0:	ldr	ip, [pc, #64]	; 17708 <generate_code@@Base+0xdd8>
   176c4:	push	{lr}		; (str lr, [sp, #-4]!)
   176c8:	rev	r3, r1
   176cc:	sub	sp, sp, #12
   176d0:	ldreq	r2, [r0]
   176d4:	ldr	r0, [pc, #48]	; 1770c <generate_code@@Base+0xddc>
   176d8:	stm	sp, {r3, ip}
   176dc:	mov	r1, r2
   176e0:	mov	r3, sp
   176e4:	add	r2, sp, #4
   176e8:	add	r0, pc, r0
   176ec:	bl	16d20 <generate_code@@Base+0x3f0>
   176f0:	mov	r0, #0
   176f4:	add	sp, sp, #12
   176f8:	pop	{pc}		; (ldr pc, [sp], #4)
   176fc:	mov	r0, #1
   17700:	bx	lr
   17704:	teqmi	r8, sl, lsr #6
   17708:	bcs	ce5814 <__bss_end__@@Base+0xcb9068>
   1770c:	andeq	r1, r0, ip, ror ip
   17710:	ldr	r2, [r2]
   17714:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17718:	cmp	r2, #0
   1771c:	mov	r4, r3
   17720:	ldr	r2, [r3, #12]
   17724:	ldr	r3, [sp, #32]
   17728:	beq	17814 <generate_code@@Base+0xee4>
   1772c:	cmp	r1, #0
   17730:	addeq	r1, r2, #1
   17734:	streq	r1, [r4, #12]
   17738:	cmp	r2, #0
   1773c:	ldr	r0, [r4, #16]
   17740:	ldr	lr, [r4, #20]
   17744:	ldrd	r6, [r4, #24]
   17748:	ldr	r2, [r4, #32]
   1774c:	ldr	r1, [r4, #36]	; 0x24
   17750:	bne	177c0 <generate_code@@Base+0xe90>
   17754:	ldr	ip, [r3, #8]
   17758:	str	ip, [r4, #8]
   1775c:	ldr	ip, [r3, #16]
   17760:	ldr	r5, [r3, #20]
   17764:	adds	r0, ip, r0
   17768:	adc	lr, r5, lr
   1776c:	str	r0, [r4, #16]
   17770:	str	lr, [r4, #20]
   17774:	ldrd	r8, [r3, #24]
   17778:	cmp	r6, r8
   1777c:	sbcs	r0, r7, r9
   17780:	bge	17834 <generate_code@@Base+0xf04>
   17784:	strd	r8, [r4, #24]
   17788:	ldr	r0, [r3, #24]
   1778c:	ldr	ip, [r3, #28]
   17790:	adds	r2, r0, r2
   17794:	adc	r1, ip, r1
   17798:	str	r1, [r4, #36]	; 0x24
   1779c:	str	r2, [r4, #32]
   177a0:	add	r1, r3, #40	; 0x28
   177a4:	ldr	r2, [pc, #176]	; 1785c <generate_code@@Base+0xf2c>
   177a8:	add	r0, r4, #40	; 0x28
   177ac:	bl	11994 <memcpy@plt>
   177b0:	ldr	r3, [sp, #36]	; 0x24
   177b4:	mov	r0, #0
   177b8:	str	r3, [r4]
   177bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   177c0:	ldr	ip, [r3, #16]
   177c4:	ldr	r5, [r3, #20]
   177c8:	adds	r0, ip, r0
   177cc:	adc	lr, r5, lr
   177d0:	str	r0, [r4, #16]
   177d4:	str	lr, [r4, #20]
   177d8:	ldrd	r8, [r3, #24]
   177dc:	cmp	r6, r8
   177e0:	sbcs	r0, r7, r9
   177e4:	bge	17848 <generate_code@@Base+0xf18>
   177e8:	strd	r8, [r4, #24]
   177ec:	ldr	r0, [r3, #24]
   177f0:	ldr	ip, [r3, #28]
   177f4:	adds	r2, r0, r2
   177f8:	adc	r1, ip, r1
   177fc:	str	r1, [r4, #36]	; 0x24
   17800:	str	r2, [r4, #32]
   17804:	add	r1, r3, #40	; 0x28
   17808:	add	r0, r4, #40	; 0x28
   1780c:	bl	171dc <generate_code@@Base+0x8ac>
   17810:	b	177b0 <generate_code@@Base+0xe80>
   17814:	cmp	r2, #0
   17818:	beq	177b0 <generate_code@@Base+0xe80>
   1781c:	mov	r1, r0
   17820:	ldr	r0, [pc, #56]	; 17860 <generate_code@@Base+0xf30>
   17824:	add	r0, pc, r0
   17828:	bl	16d20 <generate_code@@Base+0x3f0>
   1782c:	mvn	r0, #0
   17830:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17834:	adds	r2, r2, r8
   17838:	adc	r1, r1, r9
   1783c:	str	r1, [r4, #36]	; 0x24
   17840:	str	r2, [r4, #32]
   17844:	b	177a0 <generate_code@@Base+0xe70>
   17848:	adds	r2, r2, r8
   1784c:	adc	r1, r1, r9
   17850:	str	r1, [r4, #36]	; 0x24
   17854:	str	r2, [r4, #32]
   17858:	b	17804 <generate_code@@Base+0xed4>
   1785c:	andeq	r1, r0, r0, lsr #15
   17860:	andeq	r1, r0, r8, ror fp
   17864:	ldr	r0, [pc, #52]	; 178a0 <generate_code@@Base+0xf70>
   17868:	ldr	r3, [pc, #52]	; 178a4 <generate_code@@Base+0xf74>
   1786c:	add	r0, pc, r0
   17870:	push	{lr}		; (str lr, [sp, #-4]!)
   17874:	mov	ip, #0
   17878:	ldr	r3, [r0, r3]
   1787c:	mvn	lr, #0
   17880:	mov	r2, ip
   17884:	str	lr, [r3, #24]
   17888:	mov	r1, ip
   1788c:	ldr	r0, [r3]
   17890:	pop	{lr}		; (ldr lr, [sp], #4)
   17894:	str	ip, [r3, #4]
   17898:	str	ip, [r3, #8]
   1789c:	b	11ad8 <fseek@plt>
   178a0:	andeq	r2, r1, ip, lsl #15
   178a4:	andeq	r0, r0, ip, lsr #1
   178a8:	push	{r4, r5, r6, r7, lr}
   178ac:	mov	r2, #0
   178b0:	sub	sp, sp, #36	; 0x24
   178b4:	mov	r3, #0
   178b8:	mov	r4, #0
   178bc:	mov	r6, r0
   178c0:	strd	r2, [sp, #8]
   178c4:	strd	r2, [sp, #16]
   178c8:	strh	r4, [sp, #2]
   178cc:	bl	11a0c <getpid@plt>
   178d0:	ldr	r3, [pc, #196]	; 1799c <generate_code@@Base+0x106c>
   178d4:	ldr	ip, [pc, #196]	; 179a0 <generate_code@@Base+0x1070>
   178d8:	add	r3, pc, r3
   178dc:	mvn	lr, #0
   178e0:	mov	r7, #1
   178e4:	ldr	r2, [pc, #184]	; 179a4 <generate_code@@Base+0x1074>
   178e8:	mov	r1, #66	; 0x42
   178ec:	str	r0, [sp, #24]
   178f0:	ldr	r5, [r3, ip]
   178f4:	mov	r0, r6
   178f8:	strh	r7, [sp]
   178fc:	str	r4, [r5, #4]
   17900:	str	r4, [r5, #12]
   17904:	str	r4, [r5, #8]
   17908:	str	r4, [r5, #20]
   1790c:	str	lr, [r5, #16]
   17910:	bl	119d0 <open64@plt>
   17914:	subs	r6, r0, #0
   17918:	movlt	r0, r4
   1791c:	blt	17980 <generate_code@@Base+0x1050>
   17920:	mov	r4, sp
   17924:	mov	r2, r4
   17928:	mov	r1, #14
   1792c:	mov	r0, r6
   17930:	bl	11a9c <fcntl64@plt>
   17934:	cmp	r0, #0
   17938:	beq	1794c <generate_code@@Base+0x101c>
   1793c:	bl	11a48 <__errno_location@plt>
   17940:	ldr	r3, [r0]
   17944:	cmp	r3, #4
   17948:	beq	17924 <generate_code@@Base+0xff4>
   1794c:	ldr	r1, [pc, #84]	; 179a8 <generate_code@@Base+0x1078>
   17950:	mov	r0, r6
   17954:	add	r1, pc, r1
   17958:	bl	1194c <fdopen@plt>
   1795c:	cmp	r0, #0
   17960:	mov	r4, r0
   17964:	str	r0, [r5]
   17968:	beq	17988 <generate_code@@Base+0x1058>
   1796c:	mov	r4, #1
   17970:	mov	r1, #0
   17974:	str	r4, [r5, #24]
   17978:	bl	11964 <setbuf@plt>
   1797c:	mov	r0, r4
   17980:	add	sp, sp, #36	; 0x24
   17984:	pop	{r4, r5, r6, r7, pc}
   17988:	mov	r0, r6
   1798c:	bl	11afc <close@plt>
   17990:	mov	r0, r4
   17994:	add	sp, sp, #36	; 0x24
   17998:	pop	{r4, r5, r6, r7, pc}
   1799c:	andeq	r2, r1, r0, lsr #14
   179a0:	andeq	r0, r0, ip, lsr #1
   179a4:			; <UNDEFINED> instruction: 0x000001b6
   179a8:	andeq	r1, r0, r4, ror sl
   179ac:	push	{r4, r5, r6, lr}
   179b0:	mov	r4, r1
   179b4:	ldr	r5, [pc, #248]	; 17ab4 <generate_code@@Base+0x1184>
   179b8:	ldr	ip, [r4, #8]
   179bc:	ldr	lr, [r4, #12]
   179c0:	ldr	r6, [r4]
   179c4:	cmp	ip, #0
   179c8:	mov	r1, r0
   179cc:	add	r5, pc, r5
   179d0:	add	r0, r6, lr
   179d4:	ble	17a10 <generate_code@@Base+0x10e0>
   179d8:	ldrb	r3, [r1]
   179dc:	cmp	r3, #47	; 0x2f
   179e0:	addeq	r2, r1, #1
   179e4:	ldrbeq	r3, [r1, #1]
   179e8:	movne	r2, r1
   179ec:	cmp	r3, #0
   179f0:	beq	17a10 <generate_code@@Base+0x10e0>
   179f4:	cmp	r3, #47	; 0x2f
   179f8:	moveq	r1, r2
   179fc:	ldrb	r3, [r2, #1]!
   17a00:	subeq	ip, ip, #1
   17a04:	cmp	r3, #0
   17a08:	cmpne	ip, #0
   17a0c:	bne	179f4 <generate_code@@Base+0x10c4>
   17a10:	cmp	lr, #0
   17a14:	bne	17a34 <generate_code@@Base+0x1104>
   17a18:	bl	119b8 <strcpy@plt>
   17a1c:	ldr	r0, [r4]
   17a20:	bl	178a8 <generate_code@@Base+0xf78>
   17a24:	cmp	r0, #0
   17a28:	beq	17a4c <generate_code@@Base+0x111c>
   17a2c:	mov	r0, #0
   17a30:	pop	{r4, r5, r6, pc}
   17a34:	ldrb	r3, [r1]
   17a38:	cmp	r3, #47	; 0x2f
   17a3c:	movne	r3, #47	; 0x2f
   17a40:	addne	r0, r0, #1
   17a44:	strbne	r3, [r6, lr]
   17a48:	b	17a18 <generate_code@@Base+0x10e8>
   17a4c:	ldr	r0, [r4]
   17a50:	bl	175ec <generate_code@@Base+0xcbc>
   17a54:	cmp	r0, #0
   17a58:	bne	17a90 <generate_code@@Base+0x1160>
   17a5c:	ldr	r0, [r4]
   17a60:	bl	178a8 <generate_code@@Base+0xf78>
   17a64:	cmp	r0, #0
   17a68:	bne	17a2c <generate_code@@Base+0x10fc>
   17a6c:	ldr	r3, [pc, #68]	; 17ab8 <generate_code@@Base+0x1188>
   17a70:	ldr	r1, [pc, #68]	; 17abc <generate_code@@Base+0x118c>
   17a74:	ldr	r2, [r4]
   17a78:	ldr	r3, [r5, r3]
   17a7c:	add	r1, pc, r1
   17a80:	ldr	r0, [r3]
   17a84:	bl	11a3c <fprintf@plt>
   17a88:	mvn	r0, #0
   17a8c:	pop	{r4, r5, r6, pc}
   17a90:	ldr	r3, [pc, #32]	; 17ab8 <generate_code@@Base+0x1188>
   17a94:	ldr	r1, [pc, #36]	; 17ac0 <generate_code@@Base+0x1190>
   17a98:	ldr	r2, [r4]
   17a9c:	ldr	r3, [r5, r3]
   17aa0:	add	r1, pc, r1
   17aa4:	ldr	r0, [r3]
   17aa8:	bl	11a3c <fprintf@plt>
   17aac:	mvn	r0, #0
   17ab0:	pop	{r4, r5, r6, pc}
   17ab4:	andeq	r2, r1, ip, lsr #12
   17ab8:	andeq	r0, r0, r0, lsr #1
   17abc:	andeq	r1, r0, r4, ror #18
   17ac0:	andeq	r1, r0, ip, lsr #18
   17ac4:	ldr	r3, [pc, #96]	; 17b2c <generate_code@@Base+0x11fc>
   17ac8:	ldr	r2, [pc, #96]	; 17b30 <generate_code@@Base+0x1200>
   17acc:	add	r3, pc, r3
   17ad0:	push	{r4, lr}
   17ad4:	ldr	r4, [r3, r2]
   17ad8:	ldr	r0, [r4]
   17adc:	cmp	r0, #0
   17ae0:	beq	17b00 <generate_code@@Base+0x11d0>
   17ae4:	ldr	r3, [r4, #8]
   17ae8:	cmp	r3, #0
   17aec:	bne	17b10 <generate_code@@Base+0x11e0>
   17af0:	bl	11a84 <fclose@plt>
   17af4:	mov	r3, #0
   17af8:	str	r3, [r4]
   17afc:	str	r3, [r4, #12]
   17b00:	mov	r3, #0
   17b04:	str	r3, [r4, #24]
   17b08:	ldr	r0, [r4, #20]
   17b0c:	pop	{r4, pc}
   17b10:	ldr	r2, [r4, #24]
   17b14:	cmp	r2, #0
   17b18:	bge	17af0 <generate_code@@Base+0x11c0>
   17b1c:	mov	r0, r3
   17b20:	bl	16b18 <generate_code@@Base+0x1e8>
   17b24:	ldr	r0, [r4]
   17b28:	b	17af0 <generate_code@@Base+0x11c0>
   17b2c:	andeq	r2, r1, ip, lsr #10
   17b30:	andeq	r0, r0, ip, lsr #1
   17b34:	push	{r4, lr}
   17b38:	mov	r4, r0
   17b3c:	mov	r0, #1
   17b40:	bl	16b74 <generate_code@@Base+0x244>
   17b44:	str	r4, [r0]
   17b48:	pop	{r4, pc}
   17b4c:	push	{r4, r5, r6, lr}
   17b50:	mov	r5, r0
   17b54:	mov	r0, #2
   17b58:	mov	r4, r1
   17b5c:	bl	16b74 <generate_code@@Base+0x244>
   17b60:	str	r5, [r0]
   17b64:	str	r4, [r0, #4]
   17b68:	pop	{r4, r5, r6, pc}
   17b6c:	push	{r4, r5, r6, lr}
   17b70:	mov	r5, r0
   17b74:	mov	r0, #2
   17b78:	mov	r4, r1
   17b7c:	bl	16b74 <generate_code@@Base+0x244>
   17b80:	str	r5, [r0]
   17b84:	str	r4, [r0, #4]
   17b88:	pop	{r4, r5, r6, pc}
   17b8c:	mov	r2, #0
   17b90:	push	{r4, r5, r6, r7, r8, lr}
   17b94:	mov	r3, r2
   17b98:	sub	sp, sp, #32
   17b9c:	mov	r5, r1
   17ba0:	mov	r7, r2
   17ba4:	mov	r4, r1
   17ba8:	mov	r8, #1
   17bac:	str	r2, [sp]
   17bb0:	str	r2, [sp, #4]
   17bb4:	str	r2, [sp, #8]
   17bb8:	str	r2, [sp, #12]
   17bbc:	str	r2, [sp, #16]
   17bc0:	str	r2, [sp, #20]
   17bc4:	str	r2, [sp, #24]
   17bc8:	str	r2, [sp, #28]
   17bcc:	lsr	r2, r3, #5
   17bd0:	ldr	lr, [r1, #40]	; 0x28
   17bd4:	add	ip, sp, #32
   17bd8:	cmp	lr, #0
   17bdc:	add	r2, ip, r2, lsl #2
   17be0:	and	r6, r3, #31
   17be4:	ldrne	ip, [r2, #-32]	; 0xffffffe0
   17be8:	add	r3, r3, #1
   17bec:	orrne	ip, ip, r8, lsl r6
   17bf0:	addne	r7, r7, #1
   17bf4:	strne	ip, [r2, #-32]	; 0xffffffe0
   17bf8:	cmp	r3, #252	; 0xfc
   17bfc:	add	r1, r1, #24
   17c00:	bne	17bcc <generate_code@@Base+0x129c>
   17c04:	add	r7, r7, r7, lsl #2
   17c08:	add	r1, r7, #17
   17c0c:	bl	17b6c <generate_code@@Base+0x123c>
   17c10:	ldr	r0, [r5]
   17c14:	bl	17b34 <generate_code@@Base+0x1204>
   17c18:	ldr	r0, [r5, #8]
   17c1c:	bl	17b34 <generate_code@@Base+0x1204>
   17c20:	ldr	r0, [r5, #12]
   17c24:	bl	17b34 <generate_code@@Base+0x1204>
   17c28:	ldrd	r0, [r5, #16]
   17c2c:	bl	17b4c <generate_code@@Base+0x121c>
   17c30:	ldrd	r0, [r5, #24]
   17c34:	bl	17b4c <generate_code@@Base+0x121c>
   17c38:	ldrd	r0, [r5, #32]
   17c3c:	bl	17b4c <generate_code@@Base+0x121c>
   17c40:	sub	r6, sp, #4
   17c44:	add	r7, sp, #28
   17c48:	ldr	r0, [r6, #4]!
   17c4c:	bl	17b34 <generate_code@@Base+0x1204>
   17c50:	cmp	r7, r6
   17c54:	bne	17c48 <generate_code@@Base+0x1318>
   17c58:	add	r5, r5, #6016	; 0x1780
   17c5c:	add	r5, r5, #32
   17c60:	ldr	r3, [r4, #40]	; 0x28
   17c64:	subs	r0, r3, #0
   17c68:	beq	17c80 <generate_code@@Base+0x1350>
   17c6c:	bl	17b34 <generate_code@@Base+0x1204>
   17c70:	ldrd	r0, [r4, #48]	; 0x30
   17c74:	bl	17b4c <generate_code@@Base+0x121c>
   17c78:	ldrd	r0, [r4, #56]	; 0x38
   17c7c:	bl	17b4c <generate_code@@Base+0x121c>
   17c80:	add	r4, r4, #24
   17c84:	cmp	r4, r5
   17c88:	bne	17c60 <generate_code@@Base+0x1330>
   17c8c:	add	sp, sp, #32
   17c90:	pop	{r4, r5, r6, r7, r8, pc}
   17c94:	push	{r4, lr}
   17c98:	mov	r0, #1
   17c9c:	bl	16bd4 <generate_code@@Base+0x2a4>
   17ca0:	subs	r3, r0, #0
   17ca4:	popeq	{r4, pc}
   17ca8:	ldr	r0, [r3]
   17cac:	pop	{r4, lr}
   17cb0:	b	16a98 <generate_code@@Base+0x168>
   17cb4:	push	{r4, lr}
   17cb8:	mov	r0, #2
   17cbc:	bl	16bd4 <generate_code@@Base+0x2a4>
   17cc0:	subs	r2, r0, #0
   17cc4:	beq	17ce8 <generate_code@@Base+0x13b8>
   17cc8:	ldr	r0, [r2]
   17ccc:	bl	16a98 <generate_code@@Base+0x168>
   17cd0:	mov	r3, r0
   17cd4:	ldr	r0, [r2, #4]
   17cd8:	bl	16a98 <generate_code@@Base+0x168>
   17cdc:	mov	r1, r0
   17ce0:	mov	r0, r3
   17ce4:	pop	{r4, pc}
   17ce8:	mov	r3, r2
   17cec:	mov	r1, r2
   17cf0:	mov	r0, r3
   17cf4:	pop	{r4, pc}
   17cf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cfc:	sub	sp, sp, #28
   17d00:	mov	r8, r1
   17d04:	str	r3, [sp, #12]
   17d08:	mov	r4, #0
   17d0c:	add	r3, r1, #52	; 0x34
   17d10:	add	r1, r1, #16
   17d14:	str	r0, [sp, #20]
   17d18:	str	r2, [sp, #16]
   17d1c:	ldr	r2, [r3, #-4]!
   17d20:	cmp	r2, #0
   17d24:	addne	r4, r4, #1
   17d28:	cmp	r1, r3
   17d2c:	bne	17d1c <generate_code@@Base+0x13ec>
   17d30:	add	r4, r4, #4
   17d34:	lsl	r4, r4, #3
   17d38:	mov	r0, r4
   17d3c:	bl	119e8 <malloc@plt>
   17d40:	subs	r6, r0, #0
   17d44:	beq	17e18 <generate_code@@Base+0x14e8>
   17d48:	ldr	r3, [sp, #12]
   17d4c:	mov	r4, #0
   17d50:	str	r3, [r6, #4]
   17d54:	str	r4, [r6]
   17d58:	bl	17c94 <generate_code@@Base+0x1364>
   17d5c:	mov	r7, r4
   17d60:	add	r5, r8, #12
   17d64:	str	r0, [r6, #12]
   17d68:	bl	17c94 <generate_code@@Base+0x1364>
   17d6c:	str	r0, [r6, #16]
   17d70:	bl	17c94 <generate_code@@Base+0x1364>
   17d74:	str	r0, [r6, #20]
   17d78:	b	17d88 <generate_code@@Base+0x1458>
   17d7c:	add	r4, r4, #1
   17d80:	cmp	r4, #9
   17d84:	beq	17e04 <generate_code@@Base+0x14d4>
   17d88:	ldr	r3, [r5, #4]!
   17d8c:	cmp	r3, #0
   17d90:	beq	17d7c <generate_code@@Base+0x144c>
   17d94:	bl	17c94 <generate_code@@Base+0x1364>
   17d98:	lsl	r3, r4, #17
   17d9c:	add	r3, r3, #27262976	; 0x1a00000
   17da0:	add	r3, r3, #65536	; 0x10000
   17da4:	cmp	r0, r3
   17da8:	bne	17e6c <generate_code@@Base+0x153c>
   17dac:	bl	17c94 <generate_code@@Base+0x1364>
   17db0:	lsr	sl, r0, #1
   17db4:	lsl	fp, sl, #3
   17db8:	mov	r0, fp
   17dbc:	bl	119e8 <malloc@plt>
   17dc0:	subs	r9, r0, #0
   17dc4:	beq	17e7c <generate_code@@Base+0x154c>
   17dc8:	add	r1, r6, r7, lsl #3
   17dcc:	cmp	sl, #0
   17dd0:	str	sl, [r1, #24]
   17dd4:	str	r9, [r1, #28]
   17dd8:	sub	fp, sl, #1
   17ddc:	beq	17df4 <generate_code@@Base+0x14c4>
   17de0:	bl	17cb4 <generate_code@@Base+0x1384>
   17de4:	sub	fp, fp, #1
   17de8:	cmn	fp, #1
   17dec:	strd	r0, [r9], #8
   17df0:	bne	17de0 <generate_code@@Base+0x14b0>
   17df4:	add	r4, r4, #1
   17df8:	cmp	r4, #9
   17dfc:	add	r7, r7, #1
   17e00:	bne	17d88 <generate_code@@Base+0x1458>
   17e04:	ldr	r3, [sp, #16]
   17e08:	mov	r0, r6
   17e0c:	str	r6, [r3]
   17e10:	add	sp, sp, #28
   17e14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e18:	mvn	r5, #0
   17e1c:	cmp	r4, #0
   17e20:	bne	17e60 <generate_code@@Base+0x1530>
   17e24:	ldr	r3, [pc, #92]	; 17e88 <generate_code@@Base+0x1558>
   17e28:	mov	r4, r5
   17e2c:	add	r3, pc, r3
   17e30:	ldr	r0, [pc, #84]	; 17e8c <generate_code@@Base+0x155c>
   17e34:	ldr	r2, [sp, #12]
   17e38:	ldr	r1, [sp, #20]
   17e3c:	str	r4, [sp]
   17e40:	add	r0, pc, r0
   17e44:	bl	16d20 <generate_code@@Base+0x3f0>
   17e48:	mov	r2, r5
   17e4c:	mov	r1, r6
   17e50:	mov	r0, r8
   17e54:	add	sp, sp, #28
   17e58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e5c:	b	16d54 <generate_code@@Base+0x424>
   17e60:	ldr	r3, [pc, #40]	; 17e90 <generate_code@@Base+0x1560>
   17e64:	add	r3, pc, r3
   17e68:	b	17e30 <generate_code@@Base+0x1500>
   17e6c:	ldr	r3, [pc, #32]	; 17e94 <generate_code@@Base+0x1564>
   17e70:	mov	r5, r4
   17e74:	add	r3, pc, r3
   17e78:	b	17e30 <generate_code@@Base+0x1500>
   17e7c:	mov	r5, r4
   17e80:	mov	r4, fp
   17e84:	b	17e1c <generate_code@@Base+0x14ec>
   17e88:	ldrdeq	r1, [r0], -r0
   17e8c:	andeq	r1, r0, r0, ror #11
   17e90:	andeq	r1, r0, ip, lsr #11
   17e94:	andeq	r1, r0, r8, lsl #11
   17e98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e9c:	sub	sp, sp, #36	; 0x24
   17ea0:	mov	r9, r0
   17ea4:	bl	17c94 <generate_code@@Base+0x1364>
   17ea8:	mov	r7, #0
   17eac:	sub	r4, sp, #4
   17eb0:	add	r5, sp, #28
   17eb4:	str	r0, [r9]
   17eb8:	bl	17c94 <generate_code@@Base+0x1364>
   17ebc:	str	r0, [r9, #8]
   17ec0:	bl	17c94 <generate_code@@Base+0x1364>
   17ec4:	str	r0, [r9, #12]
   17ec8:	bl	17cb4 <generate_code@@Base+0x1384>
   17ecc:	strd	r0, [r9, #16]
   17ed0:	bl	17cb4 <generate_code@@Base+0x1384>
   17ed4:	strd	r0, [r9, #24]
   17ed8:	bl	17cb4 <generate_code@@Base+0x1384>
   17edc:	ldr	r2, [pc, #264]	; 17fec <generate_code@@Base+0x16bc>
   17ee0:	strd	r0, [r9, #32]
   17ee4:	add	r0, r9, #40	; 0x28
   17ee8:	mov	r1, r7
   17eec:	bl	11a60 <memset@plt>
   17ef0:	bl	17c94 <generate_code@@Base+0x1364>
   17ef4:	str	r0, [r4, #4]!
   17ef8:	bl	18bdc <__gcov_sort_n_vals@@Base+0x64c>
   17efc:	cmp	r4, r5
   17f00:	add	r7, r7, r0
   17f04:	bne	17ef0 <generate_code@@Base+0x15c0>
   17f08:	cmp	r7, #0
   17f0c:	sub	r7, r7, #1
   17f10:	beq	17fd8 <generate_code@@Base+0x16a8>
   17f14:	ldr	r8, [pc, #212]	; 17ff0 <generate_code@@Base+0x16c0>
   17f18:	ldr	sl, [pc, #212]	; 17ff4 <generate_code@@Base+0x16c4>
   17f1c:	mov	r4, #0
   17f20:	add	r8, pc, r8
   17f24:	add	sl, pc, sl
   17f28:	mov	r5, r4
   17f2c:	mov	r6, r4
   17f30:	cmp	r4, #0
   17f34:	addeq	r3, sp, #32
   17f38:	addeq	r6, r3, r5, lsl #2
   17f3c:	subeq	r6, r6, #36	; 0x24
   17f40:	beq	17f5c <generate_code@@Base+0x162c>
   17f44:	b	17f84 <generate_code@@Base+0x1654>
   17f48:	ldr	r4, [r6, #4]!
   17f4c:	add	r3, r5, #1
   17f50:	cmp	r4, #0
   17f54:	bne	17f7c <generate_code@@Base+0x164c>
   17f58:	mov	r5, r3
   17f5c:	cmp	r5, #7
   17f60:	bls	17f48 <generate_code@@Base+0x1618>
   17f64:	mov	r0, r8
   17f68:	bl	16d20 <generate_code@@Base+0x3f0>
   17f6c:	ldr	r4, [r6, #4]!
   17f70:	add	r3, r5, #1
   17f74:	cmp	r4, #0
   17f78:	beq	17f58 <generate_code@@Base+0x1628>
   17f7c:	lsl	r6, r5, #5
   17f80:	mov	r5, r3
   17f84:	tst	r4, #1
   17f88:	bne	17f9c <generate_code@@Base+0x166c>
   17f8c:	lsr	r4, r4, #1
   17f90:	tst	r4, #1
   17f94:	add	r6, r6, #1
   17f98:	beq	17f8c <generate_code@@Base+0x165c>
   17f9c:	cmp	r6, #251	; 0xfb
   17fa0:	bhi	17fe0 <generate_code@@Base+0x16b0>
   17fa4:	bl	17c94 <generate_code@@Base+0x1364>
   17fa8:	add	fp, r6, r6, lsl #1
   17fac:	sub	r7, r7, #1
   17fb0:	add	fp, r9, fp, lsl #3
   17fb4:	lsr	r4, r4, #1
   17fb8:	add	r6, r6, #1
   17fbc:	str	r0, [fp, #40]	; 0x28
   17fc0:	bl	17cb4 <generate_code@@Base+0x1384>
   17fc4:	strd	r0, [fp, #48]	; 0x30
   17fc8:	bl	17cb4 <generate_code@@Base+0x1384>
   17fcc:	cmn	r7, #1
   17fd0:	strd	r0, [fp, #56]	; 0x38
   17fd4:	bne	17f30 <generate_code@@Base+0x1600>
   17fd8:	add	sp, sp, #36	; 0x24
   17fdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fe0:	mov	r0, sl
   17fe4:	bl	16d20 <generate_code@@Base+0x3f0>
   17fe8:	b	17fa4 <generate_code@@Base+0x1674>
   17fec:	andeq	r1, r0, r0, lsr #15
   17ff0:	andeq	r1, r0, r4, lsr #10
   17ff4:	andeq	r1, r0, r0, ror #10
   17ff8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ffc:	sub	sp, sp, #6080	; 0x17c0
   18000:	sub	sp, sp, #28
   18004:	mov	r4, r1
   18008:	strd	r2, [sp, #4]
   1800c:	add	r3, sp, #6144	; 0x1800
   18010:	mov	r9, r0
   18014:	ldr	r7, [r3]
   18018:	add	r3, sp, #6144	; 0x1800
   1801c:	add	r3, r3, #4
   18020:	ldr	r6, [r3]
   18024:	add	r3, sp, #6144	; 0x1800
   18028:	add	r3, r3, #8
   1802c:	ldr	sl, [r3]
   18030:	bl	17c94 <generate_code@@Base+0x1364>
   18034:	add	r3, r4, #12
   18038:	mov	r2, r9
   1803c:	str	r3, [sp, #12]
   18040:	mov	r1, r0
   18044:	mov	r0, r3
   18048:	bl	176b0 <generate_code@@Base+0xd80>
   1804c:	cmp	r0, #0
   18050:	beq	182d8 <generate_code@@Base+0x19a8>
   18054:	bl	17c94 <generate_code@@Base+0x1364>
   18058:	ldr	r3, [r4, #8]
   1805c:	cmp	r0, r3
   18060:	bne	180f4 <generate_code@@Base+0x17c4>
   18064:	ldr	fp, [pc, #628]	; 182e0 <generate_code@@Base+0x19b0>
   18068:	add	r5, sp, #16
   1806c:	add	fp, pc, fp
   18070:	bl	16a48 <generate_code@@Base+0x118>
   18074:	str	r0, [r6]
   18078:	bl	17c94 <generate_code@@Base+0x1364>
   1807c:	cmp	r0, #-1560281088	; 0xa3000000
   18080:	bne	18138 <generate_code@@Base+0x1808>
   18084:	bl	17c94 <generate_code@@Base+0x1364>
   18088:	mov	r0, r5
   1808c:	bl	17e98 <generate_code@@Base+0x1568>
   18090:	bl	16a6c <generate_code@@Base+0x13c>
   18094:	add	r2, sp, #2000	; 0x7d0
   18098:	add	r2, r2, #8
   1809c:	subs	r8, r0, #0
   180a0:	bne	1826c <generate_code@@Base+0x193c>
   180a4:	ldr	r3, [r7]
   180a8:	cmp	r3, #0
   180ac:	bne	18104 <generate_code@@Base+0x17d4>
   180b0:	ldr	r3, [r2, #-1992]	; 0xfffff838
   180b4:	cmp	r3, sl
   180b8:	bne	18070 <generate_code@@Base+0x1740>
   180bc:	ldr	r3, [sp, #8]
   180c0:	ldr	r2, [r2, #-1984]	; 0xfffff840
   180c4:	ldr	r3, [r3]
   180c8:	cmp	r2, r3
   180cc:	bne	18070 <generate_code@@Base+0x1740>
   180d0:	ldr	r2, [pc, #524]	; 182e4 <generate_code@@Base+0x19b4>
   180d4:	mov	r1, r5
   180d8:	ldr	r0, [sp, #4]
   180dc:	bl	11994 <memcpy@plt>
   180e0:	ldr	r3, [r6]
   180e4:	str	r3, [r7]
   180e8:	b	18070 <generate_code@@Base+0x1740>
   180ec:	cmp	r0, #0
   180f0:	bne	182ac <generate_code@@Base+0x197c>
   180f4:	mov	r0, #0
   180f8:	add	sp, sp, #6080	; 0x17c0
   180fc:	add	sp, sp, #28
   18100:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18104:	ldr	r0, [pc, #476]	; 182e8 <generate_code@@Base+0x19b8>
   18108:	bl	119e8 <malloc@plt>
   1810c:	ldr	r2, [pc, #464]	; 182e4 <generate_code@@Base+0x19b4>
   18110:	mov	r1, r5
   18114:	mov	r3, r0
   18118:	str	r0, [fp]
   1811c:	add	r0, r0, #8
   18120:	str	r3, [sp]
   18124:	bl	11994 <memcpy@plt>
   18128:	ldr	r3, [sp]
   1812c:	str	r8, [r3]
   18130:	ldr	fp, [fp]
   18134:	b	18070 <generate_code@@Base+0x1740>
   18138:	ldr	r5, [r4, #52]	; 0x34
   1813c:	cmp	r5, #0
   18140:	beq	180ec <generate_code@@Base+0x17bc>
   18144:	ldr	r3, [r4, #56]	; 0x38
   18148:	cmp	r0, #16777216	; 0x1000000
   1814c:	ldr	r8, [r3]
   18150:	bne	182a8 <generate_code@@Base+0x1978>
   18154:	ldr	r6, [pc, #400]	; 182ec <generate_code@@Base+0x19bc>
   18158:	mov	r5, #0
   1815c:	add	r6, pc, r6
   18160:	add	r6, r6, #4
   18164:	b	181a8 <generate_code@@Base+0x1878>
   18168:	mov	r2, r6
   1816c:	mov	r3, r5
   18170:	mov	r1, r4
   18174:	mov	r0, r9
   18178:	bl	17cf8 <generate_code@@Base+0x13c8>
   1817c:	subs	r6, r0, #0
   18180:	beq	182ac <generate_code@@Base+0x197c>
   18184:	bl	17c94 <generate_code@@Base+0x1364>
   18188:	ldr	r3, [r4, #52]	; 0x34
   1818c:	add	r5, r5, #1
   18190:	cmp	r3, r5
   18194:	beq	180ec <generate_code@@Base+0x17bc>
   18198:	ldr	r3, [r4, #56]	; 0x38
   1819c:	cmp	r0, #16777216	; 0x1000000
   181a0:	ldr	r8, [r3, r5, lsl #2]
   181a4:	bne	182ac <generate_code@@Base+0x197c>
   181a8:	bl	17c94 <generate_code@@Base+0x1364>
   181ac:	cmp	r0, #0
   181b0:	beq	18184 <generate_code@@Base+0x1854>
   181b4:	cmp	r0, #3
   181b8:	bne	182ac <generate_code@@Base+0x197c>
   181bc:	cmp	r8, #0
   181c0:	beq	18168 <generate_code@@Base+0x1838>
   181c4:	ldr	r3, [r8]
   181c8:	cmp	r4, r3
   181cc:	bne	18168 <generate_code@@Base+0x1838>
   181d0:	bl	17c94 <generate_code@@Base+0x1364>
   181d4:	ldr	r3, [r8, #4]
   181d8:	cmp	r0, r3
   181dc:	bne	182ac <generate_code@@Base+0x197c>
   181e0:	bl	17c94 <generate_code@@Base+0x1364>
   181e4:	ldr	r3, [r8, #8]
   181e8:	cmp	r0, r3
   181ec:	bne	182ac <generate_code@@Base+0x197c>
   181f0:	bl	17c94 <generate_code@@Base+0x1364>
   181f4:	ldr	r3, [r8, #12]
   181f8:	cmp	r0, r3
   181fc:	bne	182ac <generate_code@@Base+0x197c>
   18200:	ldr	r7, [pc, #232]	; 182f0 <generate_code@@Base+0x19c0>
   18204:	ldr	fp, [sp, #12]
   18208:	add	r8, r8, #16
   1820c:	ldr	sl, [fp, #4]!
   18210:	cmp	sl, #0
   18214:	beq	1824c <generate_code@@Base+0x191c>
   18218:	bl	17c94 <generate_code@@Base+0x1364>
   1821c:	str	r0, [sp]
   18220:	bl	17c94 <generate_code@@Base+0x1364>
   18224:	ldr	r3, [sp]
   18228:	cmp	r3, r7
   1822c:	bne	182ac <generate_code@@Base+0x197c>
   18230:	ldr	r3, [r8]
   18234:	mov	r1, r3
   18238:	cmp	r0, r3, lsl #1
   1823c:	bne	182ac <generate_code@@Base+0x197c>
   18240:	ldr	r0, [r8, #4]
   18244:	blx	sl
   18248:	add	r8, r8, #8
   1824c:	ldr	r3, [pc, #160]	; 182f4 <generate_code@@Base+0x19c4>
   18250:	add	r7, r7, #131072	; 0x20000
   18254:	cmp	r7, r3
   18258:	bne	1820c <generate_code@@Base+0x18dc>
   1825c:	bl	16a6c <generate_code@@Base+0x13c>
   18260:	cmp	r0, #0
   18264:	beq	18184 <generate_code@@Base+0x1854>
   18268:	mov	r8, r0
   1826c:	cmp	r8, #0
   18270:	blt	1829c <generate_code@@Base+0x196c>
   18274:	ldr	r2, [pc, #124]	; 182f8 <generate_code@@Base+0x19c8>
   18278:	add	r2, pc, r2
   1827c:	ldr	r0, [pc, #120]	; 182fc <generate_code@@Base+0x19cc>
   18280:	mov	r1, r9
   18284:	add	r0, pc, r0
   18288:	bl	16d20 <generate_code@@Base+0x3f0>
   1828c:	mvn	r0, #0
   18290:	add	sp, sp, #6080	; 0x17c0
   18294:	add	sp, sp, #28
   18298:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1829c:	ldr	r2, [pc, #92]	; 18300 <generate_code@@Base+0x19d0>
   182a0:	add	r2, pc, r2
   182a4:	b	1827c <generate_code@@Base+0x194c>
   182a8:	mov	r5, #0
   182ac:	ldr	r2, [pc, #80]	; 18304 <generate_code@@Base+0x19d4>
   182b0:	ldr	r0, [pc, #80]	; 18308 <generate_code@@Base+0x19d8>
   182b4:	mov	r3, r5
   182b8:	mov	r1, r9
   182bc:	add	r2, pc, r2
   182c0:	add	r0, pc, r0
   182c4:	bl	16d20 <generate_code@@Base+0x3f0>
   182c8:	mvn	r0, #0
   182cc:	add	sp, sp, #6080	; 0x17c0
   182d0:	add	sp, sp, #28
   182d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182d8:	mvn	r0, #0
   182dc:	b	180f8 <generate_code@@Base+0x17c8>
   182e0:	strdeq	r3, [r1], -ip
   182e4:	andeq	r1, r0, r8, asr #15
   182e8:	ldrdeq	r1, [r0], -r0
   182ec:	andeq	r3, r1, ip, lsl #12
   182f0:			; <UNDEFINED> instruction: 0x01a10000
   182f4:			; <UNDEFINED> instruction: 0x01b30000
   182f8:	andeq	r1, r0, r4, asr r2
   182fc:	andeq	r1, r0, r4, lsl #5
   18300:	andeq	r1, r0, r0, lsr #4
   18304:	andeq	r1, r0, r8, lsl r2
   18308:	andeq	r1, r0, r0, lsr #4
   1830c:	ldr	r3, [pc, #72]	; 1835c <generate_code@@Base+0x1a2c>
   18310:	ldr	r2, [pc, #72]	; 18360 <generate_code@@Base+0x1a30>
   18314:	add	r3, pc, r3
   18318:	push	{r4, r5, r6, lr}
   1831c:	mov	r5, r0
   18320:	ldr	r4, [r3, r2]
   18324:	ldr	r0, [r4, #8]
   18328:	cmp	r0, #0
   1832c:	bne	18354 <generate_code@@Base+0x1a24>
   18330:	lsl	r1, r5, #2
   18334:	mov	r2, #0
   18338:	ldr	r0, [r4]
   1833c:	bl	11ad8 <fseek@plt>
   18340:	ldr	r0, [r4]
   18344:	bl	119a0 <ftell@plt>
   18348:	asr	r0, r0, #2
   1834c:	str	r0, [r4, #4]
   18350:	pop	{r4, r5, r6, pc}
   18354:	bl	16b18 <generate_code@@Base+0x1e8>
   18358:	b	18330 <generate_code@@Base+0x1a00>
   1835c:	andeq	r1, r1, r4, ror #25
   18360:	andeq	r0, r0, ip, lsr #1
   18364:	cmp	r2, #0
   18368:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1836c:	mov	r8, r0
   18370:	sub	sp, sp, #20
   18374:	mov	r5, r1
   18378:	mov	r4, r3
   1837c:	beq	1854c <generate_code@@Base+0x1c1c>
   18380:	cmp	r4, #0
   18384:	bne	18568 <generate_code@@Base+0x1c38>
   18388:	mov	r1, r5
   1838c:	ldr	r5, [pc, #480]	; 18574 <generate_code@@Base+0x1c44>
   18390:	mov	r0, #-1560281088	; 0xa3000000
   18394:	add	r5, pc, r5
   18398:	bl	17b8c <generate_code@@Base+0x125c>
   1839c:	ldr	r4, [r5]
   183a0:	cmp	r4, #0
   183a4:	beq	183d0 <generate_code@@Base+0x1aa0>
   183a8:	add	r1, r4, #8
   183ac:	mov	r0, #-1560281088	; 0xa3000000
   183b0:	bl	17b8c <generate_code@@Base+0x125c>
   183b4:	ldr	r3, [r5]
   183b8:	mov	r0, r3
   183bc:	ldr	r4, [r3]
   183c0:	bl	11988 <free@plt>
   183c4:	cmp	r4, #0
   183c8:	str	r4, [r5]
   183cc:	bne	183a8 <generate_code@@Base+0x1a78>
   183d0:	ldr	r3, [r8, #52]	; 0x34
   183d4:	cmp	r3, #0
   183d8:	beq	18524 <generate_code@@Base+0x1bf4>
   183dc:	ldr	r3, [pc, #404]	; 18578 <generate_code@@Base+0x1c48>
   183e0:	ldr	r9, [pc, #404]	; 1857c <generate_code@@Base+0x1c4c>
   183e4:	add	r3, pc, r3
   183e8:	str	r3, [sp, #4]
   183ec:	ldr	r3, [pc, #396]	; 18580 <generate_code@@Base+0x1c50>
   183f0:	mov	r7, #0
   183f4:	add	r3, pc, r3
   183f8:	str	r3, [sp, #12]
   183fc:	b	18438 <generate_code@@Base+0x1b08>
   18400:	ldr	r3, [r8, #56]	; 0x38
   18404:	ldr	r4, [r3, r7, lsl #2]
   18408:	cmp	r4, #0
   1840c:	beq	1841c <generate_code@@Base+0x1aec>
   18410:	ldr	r3, [r4]
   18414:	cmp	r3, r8
   18418:	beq	18534 <generate_code@@Base+0x1c04>
   1841c:	mov	r1, #0
   18420:	mov	r0, #16777216	; 0x1000000
   18424:	bl	17b6c <generate_code@@Base+0x123c>
   18428:	ldr	r3, [r8, #52]	; 0x34
   1842c:	add	r7, r7, #1
   18430:	cmp	r3, r7
   18434:	beq	18524 <generate_code@@Base+0x1bf4>
   18438:	ldr	r3, [sp, #4]
   1843c:	ldr	r4, [r3, #4]
   18440:	cmp	r4, #0
   18444:	beq	18400 <generate_code@@Base+0x1ad0>
   18448:	ldr	r3, [r4, #4]
   1844c:	cmp	r3, r7
   18450:	bne	18400 <generate_code@@Base+0x1ad0>
   18454:	mov	r3, #1
   18458:	mov	r1, #3
   1845c:	mov	r0, #16777216	; 0x1000000
   18460:	add	r4, r4, #8
   18464:	str	r3, [sp, #8]
   18468:	bl	17b6c <generate_code@@Base+0x123c>
   1846c:	ldr	r0, [r4, #4]
   18470:	bl	17b34 <generate_code@@Base+0x1204>
   18474:	ldr	r0, [r4, #8]
   18478:	bl	17b34 <generate_code@@Base+0x1204>
   1847c:	ldr	r0, [r4, #12]
   18480:	bl	17b34 <generate_code@@Base+0x1204>
   18484:	ldr	r5, [pc, #248]	; 18584 <generate_code@@Base+0x1c54>
   18488:	add	r4, r4, #16
   1848c:	add	r6, r8, #12
   18490:	b	184a0 <generate_code@@Base+0x1b70>
   18494:	add	r5, r5, #131072	; 0x20000
   18498:	cmp	r5, r9
   1849c:	beq	184f0 <generate_code@@Base+0x1bc0>
   184a0:	ldr	r3, [r6, #4]!
   184a4:	cmp	r3, #0
   184a8:	beq	18494 <generate_code@@Base+0x1b64>
   184ac:	ldr	fp, [r4]
   184b0:	mov	r0, r5
   184b4:	sub	sl, fp, #1
   184b8:	lsl	r1, fp, #1
   184bc:	bl	17b6c <generate_code@@Base+0x123c>
   184c0:	cmp	fp, #0
   184c4:	ldr	fp, [r4, #4]
   184c8:	beq	184e0 <generate_code@@Base+0x1bb0>
   184cc:	sub	sl, sl, #1
   184d0:	ldrd	r0, [fp], #8
   184d4:	bl	17b4c <generate_code@@Base+0x121c>
   184d8:	cmn	sl, #1
   184dc:	bne	184cc <generate_code@@Base+0x1b9c>
   184e0:	add	r5, r5, #131072	; 0x20000
   184e4:	cmp	r5, r9
   184e8:	add	r4, r4, #8
   184ec:	bne	184a0 <generate_code@@Base+0x1b70>
   184f0:	ldr	r3, [sp, #8]
   184f4:	cmp	r3, #0
   184f8:	beq	18428 <generate_code@@Base+0x1af8>
   184fc:	ldr	r4, [sp, #12]
   18500:	mov	r2, #9
   18504:	mov	r0, r8
   18508:	ldr	r1, [r4, #4]
   1850c:	bl	16d54 <generate_code@@Base+0x424>
   18510:	ldr	r3, [r8, #52]	; 0x34
   18514:	add	r7, r7, #1
   18518:	cmp	r3, r7
   1851c:	str	r0, [r4, #4]
   18520:	bne	18438 <generate_code@@Base+0x1b08>
   18524:	mov	r0, #0
   18528:	add	sp, sp, #20
   1852c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18530:	b	17b34 <generate_code@@Base+0x1204>
   18534:	mov	r1, #3
   18538:	mov	r0, #16777216	; 0x1000000
   1853c:	bl	17b6c <generate_code@@Base+0x123c>
   18540:	mov	r3, #0
   18544:	str	r3, [sp, #8]
   18548:	b	1846c <generate_code@@Base+0x1b3c>
   1854c:	ldr	r1, [pc, #52]	; 18588 <generate_code@@Base+0x1c58>
   18550:	ldr	r0, [pc, #52]	; 1858c <generate_code@@Base+0x1c5c>
   18554:	bl	17b6c <generate_code@@Base+0x123c>
   18558:	ldr	r0, [r8, #8]
   1855c:	bl	17b34 <generate_code@@Base+0x1204>
   18560:	cmp	r4, #0
   18564:	beq	18388 <generate_code@@Base+0x1a58>
   18568:	mov	r0, r4
   1856c:	bl	1830c <generate_code@@Base+0x19dc>
   18570:	b	18388 <generate_code@@Base+0x1a58>
   18574:	ldrdeq	r3, [r1], -r4
   18578:	andeq	r3, r1, r4, lsl #7
   1857c:			; <UNDEFINED> instruction: 0x01b30000
   18580:	andeq	r3, r1, r4, ror r3
   18584:			; <UNDEFINED> instruction: 0x01a10000
   18588:	teqmi	r8, sl, lsr #6
   1858c:	strbvs	r6, [r3, -r1, ror #8]!

00018590 <__gcov_sort_n_vals@@Base>:
   18590:	cmp	r1, #2
   18594:	bxle	lr
   18598:	sub	r1, r1, #3
   1859c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185a0:	add	r2, r0, #8
   185a4:	sub	sp, sp, #20
   185a8:	mov	r6, r0
   185ac:	bic	r7, r1, #1
   185b0:	mvn	r8, #15
   185b4:	mov	lr, #0
   185b8:	ldrd	r0, [r2]
   185bc:	ldrd	r4, [r2, #16]
   185c0:	ldrd	sl, [r2, #8]
   185c4:	add	r9, r2, #16
   185c8:	cmp	r0, r4
   185cc:	sbcs	r3, r1, r5
   185d0:	mov	ip, r9
   185d4:	sub	r1, r6, r8
   185d8:	strd	sl, [sp]
   185dc:	mov	r3, lr
   185e0:	bge	18648 <__gcov_sort_n_vals@@Base+0xb8>
   185e4:	add	sl, r8, #16
   185e8:	mvn	fp, #1
   185ec:	add	sl, r2, sl
   185f0:	orr	fp, lr, fp
   185f4:	str	r7, [sp, #8]
   185f8:	str	r6, [sp, #12]
   185fc:	b	18614 <__gcov_sort_n_vals@@Base+0x84>
   18600:	ldrd	r6, [ip, #-16]
   18604:	sub	r2, r2, #16
   18608:	cmp	r6, r4
   1860c:	sbcs	r1, r7, r5
   18610:	bge	18670 <__gcov_sort_n_vals@@Base+0xe0>
   18614:	ldrd	r6, [r2, #-8]
   18618:	lsl	r1, r3, #3
   1861c:	mov	r0, r3
   18620:	strd	r6, [r2, #8]
   18624:	ldrd	r6, [sl, r1]
   18628:	sub	r3, r3, #2
   1862c:	cmp	r3, fp
   18630:	strd	r6, [r2, #16]
   18634:	mov	ip, r2
   18638:	bne	18600 <__gcov_sort_n_vals@@Base+0x70>
   1863c:	ldr	r6, [sp, #12]
   18640:	ldr	r7, [sp, #8]
   18644:	add	r1, r6, r1
   18648:	ldrd	r2, [sp]
   1864c:	cmp	lr, r7
   18650:	sub	r8, r8, #16
   18654:	strd	r2, [r1]
   18658:	add	lr, lr, #2
   1865c:	strd	r4, [ip]
   18660:	mov	r2, r9
   18664:	bne	185b8 <__gcov_sort_n_vals@@Base+0x28>
   18668:	add	sp, sp, #20
   1866c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18670:	ldr	r6, [sp, #12]
   18674:	ldr	r7, [sp, #8]
   18678:	add	r1, r6, r0, lsl #3
   1867c:	b	18648 <__gcov_sort_n_vals@@Base+0xb8>
   18680:	push	{r4, r5, r6, lr}
   18684:	ldr	r4, [pc, #76]	; 186d8 <__gcov_sort_n_vals@@Base+0x148>
   18688:	smull	r2, r3, r4, r0
   1868c:	asr	r4, r0, #31
   18690:	rsb	r4, r4, r3, asr #1
   18694:	add	r4, r4, r4, lsl #3
   18698:	subs	r4, r0, r4
   1869c:	bne	186d4 <__gcov_sort_n_vals@@Base+0x144>
   186a0:	cmp	r0, #0
   186a4:	mov	r6, r0
   186a8:	ldr	r5, [r1]
   186ac:	pople	{r4, r5, r6, pc}
   186b0:	add	r5, r5, #8
   186b4:	mov	r0, r5
   186b8:	add	r4, r4, #9
   186bc:	mov	r1, #8
   186c0:	bl	18590 <__gcov_sort_n_vals@@Base>
   186c4:	cmp	r6, r4
   186c8:	add	r5, r5, #72	; 0x48
   186cc:	bgt	186b4 <__gcov_sort_n_vals@@Base+0x124>
   186d0:	pop	{r4, r5, r6, pc}
   186d4:	bl	11af0 <abort@plt>
   186d8:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   186dc:	ldr	r3, [r0, #48]	; 0x30
   186e0:	cmp	r3, #0
   186e4:	bxeq	lr
   186e8:	push	{r4, r5, r6, lr}
   186ec:	ldr	lr, [r0, #52]	; 0x34
   186f0:	cmp	lr, #0
   186f4:	popeq	{r4, r5, r6, pc}
   186f8:	mov	r5, r0
   186fc:	mov	r4, #0
   18700:	add	r6, r0, #12
   18704:	ldr	r1, [r5, #56]	; 0x38
   18708:	mov	r2, r6
   1870c:	mov	r3, #0
   18710:	ldr	r1, [r1, r4, lsl #2]
   18714:	add	r1, r1, #16
   18718:	ldr	ip, [r2, #4]!
   1871c:	cmp	ip, #0
   18720:	beq	18730 <__gcov_sort_n_vals@@Base+0x1a0>
   18724:	cmp	r3, #8
   18728:	beq	1874c <__gcov_sort_n_vals@@Base+0x1bc>
   1872c:	add	r1, r1, #8
   18730:	add	r3, r3, #1
   18734:	cmp	r3, #9
   18738:	bne	18718 <__gcov_sort_n_vals@@Base+0x188>
   1873c:	add	r4, r4, #1
   18740:	cmp	lr, r4
   18744:	bne	18704 <__gcov_sort_n_vals@@Base+0x174>
   18748:	pop	{r4, r5, r6, pc}
   1874c:	ldr	r0, [r1], #4
   18750:	bl	18680 <__gcov_sort_n_vals@@Base+0xf0>
   18754:	ldr	lr, [r5, #52]	; 0x34
   18758:	b	1873c <__gcov_sort_n_vals@@Base+0x1ac>
   1875c:	push	{r4, r5, r6, r7, r8, r9, lr}
   18760:	sub	sp, sp, #6080	; 0x17c0
   18764:	ldr	ip, [pc, #396]	; 188f8 <__gcov_sort_n_vals@@Base+0x368>
   18768:	sub	sp, sp, #36	; 0x24
   1876c:	add	ip, pc, ip
   18770:	add	r5, sp, #2016	; 0x7e0
   18774:	mov	r4, r0
   18778:	mov	r6, r1
   1877c:	mov	r1, #0
   18780:	str	r1, [ip, #4]
   18784:	str	r1, [ip]
   18788:	mov	r8, r2
   1878c:	mov	r7, r3
   18790:	str	r1, [r5, #-2000]	; 0xfffff830
   18794:	str	r1, [r5, #-1996]	; 0xfffff834
   18798:	bl	186dc <__gcov_sort_n_vals@@Base+0x14c>
   1879c:	mov	r1, r6
   187a0:	ldr	r0, [r4, #12]
   187a4:	bl	179ac <generate_code@@Base+0x107c>
   187a8:	cmn	r0, #1
   187ac:	beq	18828 <__gcov_sort_n_vals@@Base+0x298>
   187b0:	bl	17c94 <generate_code@@Base+0x1364>
   187b4:	cmp	r0, #0
   187b8:	beq	18834 <__gcov_sort_n_vals@@Base+0x2a4>
   187bc:	ldr	r2, [pc, #312]	; 188fc <__gcov_sort_n_vals@@Base+0x36c>
   187c0:	ldr	r1, [r6]
   187c4:	cmp	r0, r2
   187c8:	beq	1888c <__gcov_sort_n_vals@@Base+0x2fc>
   187cc:	ldr	r0, [pc, #300]	; 18900 <__gcov_sort_n_vals@@Base+0x370>
   187d0:	add	r0, pc, r0
   187d4:	bl	16d20 <generate_code@@Base+0x3f0>
   187d8:	ldr	r5, [pc, #292]	; 18904 <__gcov_sort_n_vals@@Base+0x374>
   187dc:	add	r5, pc, r5
   187e0:	ldr	r1, [r5, #4]
   187e4:	cmp	r1, #0
   187e8:	beq	18808 <__gcov_sort_n_vals@@Base+0x278>
   187ec:	mov	r2, #9
   187f0:	mov	r0, r4
   187f4:	bl	16d54 <generate_code@@Base+0x424>
   187f8:	cmp	r0, #0
   187fc:	mov	r1, r0
   18800:	str	r0, [r5, #4]
   18804:	bne	187ec <__gcov_sort_n_vals@@Base+0x25c>
   18808:	bl	17ac4 <generate_code@@Base+0x1194>
   1880c:	cmp	r0, #0
   18810:	beq	18828 <__gcov_sort_n_vals@@Base+0x298>
   18814:	blt	188ec <__gcov_sort_n_vals@@Base+0x35c>
   18818:	ldr	r0, [pc, #232]	; 18908 <__gcov_sort_n_vals@@Base+0x378>
   1881c:	add	r0, pc, r0
   18820:	ldr	r1, [r6]
   18824:	bl	16d20 <generate_code@@Base+0x3f0>
   18828:	add	sp, sp, #6080	; 0x17c0
   1882c:	add	sp, sp, #36	; 0x24
   18830:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18834:	bl	17864 <generate_code@@Base+0xf34>
   18838:	ldr	r1, [r5, #-2000]	; 0xfffff830
   1883c:	add	r9, sp, #24
   18840:	cmp	r1, #0
   18844:	beq	188d4 <__gcov_sort_n_vals@@Base+0x344>
   18848:	add	r3, sp, #6144	; 0x1800
   1884c:	str	r7, [sp, #4]
   18850:	ldr	r3, [r3]
   18854:	mov	r1, r8
   18858:	str	r3, [sp]
   1885c:	add	r2, r4, #16
   18860:	mov	r3, r9
   18864:	ldr	r0, [r6]
   18868:	bl	17710 <generate_code@@Base+0xde0>
   1886c:	cmn	r0, #1
   18870:	beq	187d8 <__gcov_sort_n_vals@@Base+0x248>
   18874:	mov	r1, r9
   18878:	ldr	r3, [r5, #-2000]	; 0xfffff830
   1887c:	ldr	r2, [r5, #-1996]	; 0xfffff834
   18880:	mov	r0, r4
   18884:	bl	18364 <generate_code@@Base+0x1a34>
   18888:	b	187d8 <__gcov_sort_n_vals@@Base+0x248>
   1888c:	add	ip, sp, #20
   18890:	add	r3, sp, #16
   18894:	str	r7, [sp, #8]
   18898:	stm	sp, {r3, ip}
   1889c:	add	r3, sp, #6144	; 0x1800
   188a0:	add	r9, sp, #24
   188a4:	ldr	r3, [r3]
   188a8:	mov	r0, r1
   188ac:	mov	r2, r9
   188b0:	add	r3, r3, #8
   188b4:	mov	r1, r4
   188b8:	bl	17ff8 <generate_code@@Base+0x16c8>
   188bc:	cmn	r0, #1
   188c0:	beq	187d8 <__gcov_sort_n_vals@@Base+0x248>
   188c4:	bl	17864 <generate_code@@Base+0xf34>
   188c8:	ldr	r1, [r5, #-2000]	; 0xfffff830
   188cc:	cmp	r1, #0
   188d0:	bne	18848 <__gcov_sort_n_vals@@Base+0x2b8>
   188d4:	ldr	r2, [pc, #48]	; 1890c <__gcov_sort_n_vals@@Base+0x37c>
   188d8:	mov	r0, r9
   188dc:	bl	11a60 <memset@plt>
   188e0:	ldr	r3, [r5, #-1996]	; 0xfffff834
   188e4:	str	r3, [r5, #-2000]	; 0xfffff830
   188e8:	b	18848 <__gcov_sort_n_vals@@Base+0x2b8>
   188ec:	ldr	r0, [pc, #28]	; 18910 <__gcov_sort_n_vals@@Base+0x380>
   188f0:	add	r0, pc, r0
   188f4:	b	18820 <__gcov_sort_n_vals@@Base+0x290>
   188f8:	strdeq	r2, [r1], -ip
   188fc:	strbvs	r6, [r3, -r1, ror #8]!
   18900:	muleq	r0, r0, sp
   18904:	andeq	r2, r1, ip, lsl #31
   18908:	andeq	r0, r0, r8, lsr #26
   1890c:	andeq	r1, r0, r8, asr #15
   18910:	andeq	r0, r0, r4, lsr ip
   18914:	push	{r4, r5, r6, r7, r8, lr}
   18918:	sub	sp, sp, #6080	; 0x17c0
   1891c:	sub	sp, sp, #32
   18920:	add	r6, sp, #24
   18924:	add	r2, sp, #12
   18928:	mov	r8, r1
   1892c:	mov	r1, r6
   18930:	mov	r4, r0
   18934:	bl	16f6c <generate_code@@Base+0x63c>
   18938:	add	r5, sp, #8
   1893c:	mov	r7, r0
   18940:	mov	r0, r5
   18944:	bl	17100 <generate_code@@Base+0x7d0>
   18948:	cmp	r4, #0
   1894c:	beq	18974 <__gcov_sort_n_vals@@Base+0x3e4>
   18950:	mov	r0, r4
   18954:	str	r6, [sp]
   18958:	mov	r3, r7
   1895c:	mov	r2, r8
   18960:	mov	r1, r5
   18964:	bl	1875c <__gcov_sort_n_vals@@Base+0x1cc>
   18968:	ldr	r4, [r4, #4]
   1896c:	cmp	r4, #0
   18970:	bne	18950 <__gcov_sort_n_vals@@Base+0x3c0>
   18974:	ldr	r0, [sp, #8]
   18978:	bl	11988 <free@plt>
   1897c:	add	sp, sp, #6080	; 0x17c0
   18980:	add	sp, sp, #32
   18984:	pop	{r4, r5, r6, r7, r8, pc}
   18988:	ldrb	r1, [r0, #4]
   1898c:	tst	r1, #1
   18990:	bxne	lr
   18994:	push	{r4, lr}
   18998:	lsr	r1, r1, #1
   1899c:	mov	r4, r0
   189a0:	and	r1, r1, #1
   189a4:	ldr	r0, [r0]
   189a8:	bl	18914 <__gcov_sort_n_vals@@Base+0x384>
   189ac:	ldrb	r3, [r4, #4]
   189b0:	bic	r3, r3, #3
   189b4:	orr	r3, r3, #3
   189b8:	strb	r3, [r4, #4]
   189bc:	pop	{r4, pc}
   189c0:	push	{r4, r5, r6, lr}
   189c4:	ldr	r4, [pc, #84]	; 18a20 <__gcov_sort_n_vals@@Base+0x490>
   189c8:	ldr	r5, [pc, #84]	; 18a24 <__gcov_sort_n_vals@@Base+0x494>
   189cc:	add	r4, pc, r4
   189d0:	mov	r0, r4
   189d4:	bl	18988 <__gcov_sort_n_vals@@Base+0x3f8>
   189d8:	ldr	r3, [r4, #8]
   189dc:	add	r5, pc, r5
   189e0:	cmp	r3, #0
   189e4:	ldrne	r2, [r4, #12]
   189e8:	strne	r2, [r3, #12]
   189ec:	ldr	r2, [pc, #52]	; 18a28 <__gcov_sort_n_vals@@Base+0x498>
   189f0:	add	r2, pc, r2
   189f4:	ldr	r2, [r2, #12]
   189f8:	cmp	r2, #0
   189fc:	strne	r3, [r2, #8]
   18a00:	beq	18a0c <__gcov_sort_n_vals@@Base+0x47c>
   18a04:	pop	{r4, r5, r6, lr}
   18a08:	b	16ac8 <generate_code@@Base+0x198>
   18a0c:	ldr	r2, [pc, #24]	; 18a2c <__gcov_sort_n_vals@@Base+0x49c>
   18a10:	ldr	r2, [r5, r2]
   18a14:	pop	{r4, r5, r6, lr}
   18a18:	str	r3, [r2, #4]
   18a1c:	b	16ac8 <generate_code@@Base+0x198>
   18a20:	andeq	r2, r1, r8, lsr #27
   18a24:	andeq	r1, r1, ip, lsl r6
   18a28:	andeq	r2, r1, r4, lsl #27
   18a2c:	andeq	r0, r0, r8, lsr #1
   18a30:	ldr	r1, [r0]
   18a34:	push	{r4, r5, r6, lr}
   18a38:	cmp	r1, #0
   18a3c:	ldr	r5, [pc, #156]	; 18ae0 <__gcov_sort_n_vals@@Base+0x550>
   18a40:	add	r5, pc, r5
   18a44:	popeq	{r4, r5, r6, pc}
   18a48:	ldr	r3, [r0, #52]	; 0x34
   18a4c:	cmp	r3, #0
   18a50:	popeq	{r4, r5, r6, pc}
   18a54:	mov	r4, r0
   18a58:	mov	r2, #0
   18a5c:	add	r0, r0, #12
   18a60:	bl	176b0 <generate_code@@Base+0xd80>
   18a64:	cmp	r0, #0
   18a68:	popeq	{r4, r5, r6, pc}
   18a6c:	ldr	r6, [pc, #112]	; 18ae4 <__gcov_sort_n_vals@@Base+0x554>
   18a70:	add	r6, pc, r6
   18a74:	ldr	r2, [r6]
   18a78:	cmp	r2, #0
   18a7c:	beq	18a94 <__gcov_sort_n_vals@@Base+0x504>
   18a80:	ldr	r3, [pc, #96]	; 18ae8 <__gcov_sort_n_vals@@Base+0x558>
   18a84:	str	r2, [r4, #4]
   18a88:	add	r3, pc, r3
   18a8c:	str	r4, [r3]
   18a90:	pop	{r4, r5, r6, pc}
   18a94:	ldr	r3, [pc, #80]	; 18aec <__gcov_sort_n_vals@@Base+0x55c>
   18a98:	ldr	r2, [pc, #80]	; 18af0 <__gcov_sort_n_vals@@Base+0x560>
   18a9c:	mov	r0, #12
   18aa0:	ldr	r5, [r5, r3]
   18aa4:	add	r2, pc, r2
   18aa8:	ldr	r1, [r5]
   18aac:	bl	176b0 <generate_code@@Base+0xd80>
   18ab0:	cmp	r0, #0
   18ab4:	ldreq	r2, [r6]
   18ab8:	beq	18a80 <__gcov_sort_n_vals@@Base+0x4f0>
   18abc:	ldr	r3, [r5, #4]
   18ac0:	cmp	r3, #0
   18ac4:	str	r3, [r6, #8]
   18ac8:	strne	r6, [r3, #12]
   18acc:	ldr	r3, [pc, #32]	; 18af4 <__gcov_sort_n_vals@@Base+0x564>
   18ad0:	add	r3, pc, r3
   18ad4:	str	r3, [r5, #4]
   18ad8:	ldr	r2, [r3]
   18adc:	b	18a80 <__gcov_sort_n_vals@@Base+0x4f0>
   18ae0:			; <UNDEFINED> instruction: 0x000115b8
   18ae4:	andeq	r2, r1, r4, lsl #26
   18ae8:	andeq	r2, r1, ip, ror #25
   18aec:	andeq	r0, r0, r8, lsr #1
   18af0:	andeq	r0, r0, r0, ror #21
   18af4:	andeq	r2, r1, r4, lsr #25
   18af8:	cmp	r3, #0
   18afc:	cmpeq	r2, #0
   18b00:	bne	18b24 <__gcov_sort_n_vals@@Base+0x594>
   18b04:	cmp	r1, #0
   18b08:	movlt	r1, #-2147483648	; 0x80000000
   18b0c:	movlt	r0, #0
   18b10:	blt	18b20 <__gcov_sort_n_vals@@Base+0x590>
   18b14:	cmpeq	r0, #0
   18b18:	mvnne	r1, #-2147483648	; 0x80000000
   18b1c:	mvnne	r0, #0
   18b20:	b	18bcc <__gcov_sort_n_vals@@Base+0x63c>
   18b24:	sub	sp, sp, #8
   18b28:	push	{sp, lr}
   18b2c:	cmp	r1, #0
   18b30:	blt	18b50 <__gcov_sort_n_vals@@Base+0x5c0>
   18b34:	cmp	r3, #0
   18b38:	blt	18b84 <__gcov_sort_n_vals@@Base+0x5f4>
   18b3c:	bl	18c20 <__gcov_sort_n_vals@@Base+0x690>
   18b40:	ldr	lr, [sp, #4]
   18b44:	add	sp, sp, #8
   18b48:	pop	{r2, r3}
   18b4c:	bx	lr
   18b50:	rsbs	r0, r0, #0
   18b54:	sbc	r1, r1, r1, lsl #1
   18b58:	cmp	r3, #0
   18b5c:	blt	18ba8 <__gcov_sort_n_vals@@Base+0x618>
   18b60:	bl	18c20 <__gcov_sort_n_vals@@Base+0x690>
   18b64:	ldr	lr, [sp, #4]
   18b68:	add	sp, sp, #8
   18b6c:	pop	{r2, r3}
   18b70:	rsbs	r0, r0, #0
   18b74:	sbc	r1, r1, r1, lsl #1
   18b78:	rsbs	r2, r2, #0
   18b7c:	sbc	r3, r3, r3, lsl #1
   18b80:	bx	lr
   18b84:	rsbs	r2, r2, #0
   18b88:	sbc	r3, r3, r3, lsl #1
   18b8c:	bl	18c20 <__gcov_sort_n_vals@@Base+0x690>
   18b90:	ldr	lr, [sp, #4]
   18b94:	add	sp, sp, #8
   18b98:	pop	{r2, r3}
   18b9c:	rsbs	r0, r0, #0
   18ba0:	sbc	r1, r1, r1, lsl #1
   18ba4:	bx	lr
   18ba8:	rsbs	r2, r2, #0
   18bac:	sbc	r3, r3, r3, lsl #1
   18bb0:	bl	18c20 <__gcov_sort_n_vals@@Base+0x690>
   18bb4:	ldr	lr, [sp, #4]
   18bb8:	add	sp, sp, #8
   18bbc:	pop	{r2, r3}
   18bc0:	rsbs	r2, r2, #0
   18bc4:	sbc	r3, r3, r3, lsl #1
   18bc8:	bx	lr
   18bcc:	push	{r1, lr}
   18bd0:	mov	r0, #8
   18bd4:	bl	11958 <raise@plt>
   18bd8:	pop	{r1, pc}
   18bdc:	ldr	r3, [pc, #48]	; 18c14 <__gcov_sort_n_vals@@Base+0x684>
   18be0:	ldr	r2, [pc, #48]	; 18c18 <__gcov_sort_n_vals@@Base+0x688>
   18be4:	and	r3, r3, r0, lsr #1
   18be8:	sub	r0, r0, r3
   18bec:	and	r3, r0, r2
   18bf0:	and	r0, r2, r0, lsr #2
   18bf4:	add	r3, r3, r0
   18bf8:	ldr	r0, [pc, #28]	; 18c1c <__gcov_sort_n_vals@@Base+0x68c>
   18bfc:	add	r3, r3, r3, lsr #4
   18c00:	and	r0, r0, r3
   18c04:	add	r0, r0, r0, lsl #8
   18c08:	add	r0, r0, r0, lsl #16
   18c0c:	lsr	r0, r0, #24
   18c10:	bx	lr
   18c14:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   18c18:	teqcc	r3, #-872415232	; 0xcc000000
   18c1c:	svceq	0x000f0f0f
   18c20:	cmp	r1, r3
   18c24:	cmpeq	r0, r2
   18c28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c2c:	mov	r4, r0
   18c30:	movcc	r0, #0
   18c34:	mov	r5, r1
   18c38:	ldr	lr, [sp, #36]	; 0x24
   18c3c:	movcc	r1, r0
   18c40:	bcc	18d3c <__gcov_sort_n_vals@@Base+0x7ac>
   18c44:	cmp	r3, #0
   18c48:	clzeq	ip, r2
   18c4c:	clzne	ip, r3
   18c50:	addeq	ip, ip, #32
   18c54:	cmp	r5, #0
   18c58:	clzeq	r1, r4
   18c5c:	addeq	r1, r1, #32
   18c60:	clzne	r1, r5
   18c64:	sub	ip, ip, r1
   18c68:	sub	sl, ip, #32
   18c6c:	lsl	r9, r3, ip
   18c70:	rsb	fp, ip, #32
   18c74:	orr	r9, r9, r2, lsl sl
   18c78:	orr	r9, r9, r2, lsr fp
   18c7c:	lsl	r8, r2, ip
   18c80:	cmp	r5, r9
   18c84:	cmpeq	r4, r8
   18c88:	movcc	r0, #0
   18c8c:	movcc	r1, r0
   18c90:	bcc	18cac <__gcov_sort_n_vals@@Base+0x71c>
   18c94:	mov	r0, #1
   18c98:	subs	r4, r4, r8
   18c9c:	lsl	r1, r0, sl
   18ca0:	orr	r1, r1, r0, lsr fp
   18ca4:	lsl	r0, r0, ip
   18ca8:	sbc	r5, r5, r9
   18cac:	cmp	ip, #0
   18cb0:	beq	18d3c <__gcov_sort_n_vals@@Base+0x7ac>
   18cb4:	lsr	r6, r8, #1
   18cb8:	orr	r6, r6, r9, lsl #31
   18cbc:	lsr	r7, r9, #1
   18cc0:	mov	r2, ip
   18cc4:	b	18ce8 <__gcov_sort_n_vals@@Base+0x758>
   18cc8:	subs	r3, r4, r6
   18ccc:	sbc	r8, r5, r7
   18cd0:	adds	r3, r3, r3
   18cd4:	adc	r8, r8, r8
   18cd8:	adds	r4, r3, #1
   18cdc:	adc	r5, r8, #0
   18ce0:	subs	r2, r2, #1
   18ce4:	beq	18d04 <__gcov_sort_n_vals@@Base+0x774>
   18ce8:	cmp	r5, r7
   18cec:	cmpeq	r4, r6
   18cf0:	bcs	18cc8 <__gcov_sort_n_vals@@Base+0x738>
   18cf4:	adds	r4, r4, r4
   18cf8:	adc	r5, r5, r5
   18cfc:	subs	r2, r2, #1
   18d00:	bne	18ce8 <__gcov_sort_n_vals@@Base+0x758>
   18d04:	lsr	r3, r4, ip
   18d08:	orr	r3, r3, r5, lsl fp
   18d0c:	lsr	r2, r5, ip
   18d10:	orr	r3, r3, r5, lsr sl
   18d14:	adds	r0, r0, r4
   18d18:	mov	r4, r3
   18d1c:	lsl	r3, r2, ip
   18d20:	orr	r3, r3, r4, lsl sl
   18d24:	lsl	ip, r4, ip
   18d28:	orr	r3, r3, r4, lsr fp
   18d2c:	adc	r1, r1, r5
   18d30:	subs	r0, r0, ip
   18d34:	mov	r5, r2
   18d38:	sbc	r1, r1, r3
   18d3c:	cmp	lr, #0
   18d40:	strdne	r4, [lr]
   18d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018d48 <__libc_csu_init@@Base>:
   18d48:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18d4c:	mov	r7, r0
   18d50:	ldr	r6, [pc, #72]	; 18da0 <__libc_csu_init@@Base+0x58>
   18d54:	ldr	r5, [pc, #72]	; 18da4 <__libc_csu_init@@Base+0x5c>
   18d58:	add	r6, pc, r6
   18d5c:	add	r5, pc, r5
   18d60:	sub	r6, r6, r5
   18d64:	mov	r8, r1
   18d68:	mov	r9, r2
   18d6c:	bl	1192c <fdopen@plt-0x20>
   18d70:	asrs	r6, r6, #2
   18d74:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18d78:	mov	r4, #0
   18d7c:	add	r4, r4, #1
   18d80:	ldr	r3, [r5], #4
   18d84:	mov	r2, r9
   18d88:	mov	r1, r8
   18d8c:	mov	r0, r7
   18d90:	blx	r3
   18d94:	cmp	r6, r4
   18d98:	bne	18d7c <__libc_csu_init@@Base+0x34>
   18d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18da0:	muleq	r1, ip, r1
   18da4:	andeq	r1, r1, ip, ror r1

00018da8 <__libc_csu_fini@@Base>:
   18da8:	bx	lr

Disassembly of section .fini:

00018dac <.fini>:
   18dac:	push	{r3, lr}
   18db0:	pop	{r3, pc}
