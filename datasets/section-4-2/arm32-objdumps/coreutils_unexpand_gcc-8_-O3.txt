
../repos/coreutils/src/unexpand:     file format elf32-littlearm


Disassembly of section .init:

00010c4c <.init>:
   10c4c:	push	{r3, lr}
   10c50:	bl	114cc <__assert_fail@plt+0x608>
   10c54:	pop	{r3, pc}

Disassembly of section .plt:

00010c58 <calloc@plt-0x14>:
   10c58:	push	{lr}		; (str lr, [sp, #-4]!)
   10c5c:	ldr	lr, [pc, #4]	; 10c68 <calloc@plt-0x4>
   10c60:	add	lr, pc, lr
   10c64:	ldr	pc, [lr, #8]!
   10c68:	muleq	r1, r8, r3

00010c6c <calloc@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #24, 20	; 0x18000
   10c74:	ldr	pc, [ip, #920]!	; 0x398

00010c78 <fputs_unlocked@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #24, 20	; 0x18000
   10c80:	ldr	pc, [ip, #912]!	; 0x390

00010c84 <raise@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #24, 20	; 0x18000
   10c8c:	ldr	pc, [ip, #904]!	; 0x388

00010c90 <strcmp@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #24, 20	; 0x18000
   10c98:	ldr	pc, [ip, #896]!	; 0x380

00010c9c <posix_fadvise64@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #24, 20	; 0x18000
   10ca4:	ldr	pc, [ip, #888]!	; 0x378

00010ca8 <fflush@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #24, 20	; 0x18000
   10cb0:	ldr	pc, [ip, #880]!	; 0x370

00010cb4 <free@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #24, 20	; 0x18000
   10cbc:	ldr	pc, [ip, #872]!	; 0x368

00010cc0 <_exit@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #24, 20	; 0x18000
   10cc8:	ldr	pc, [ip, #864]!	; 0x360

00010ccc <memcpy@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #24, 20	; 0x18000
   10cd4:	ldr	pc, [ip, #856]!	; 0x358

00010cd8 <mbsinit@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #24, 20	; 0x18000
   10ce0:	ldr	pc, [ip, #848]!	; 0x350

00010ce4 <fwrite_unlocked@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #24, 20	; 0x18000
   10cec:	ldr	pc, [ip, #840]!	; 0x348

00010cf0 <memcmp@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #24, 20	; 0x18000
   10cf8:	ldr	pc, [ip, #832]!	; 0x340

00010cfc <fputc_unlocked@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #24, 20	; 0x18000
   10d04:	ldr	pc, [ip, #824]!	; 0x338

00010d08 <dcgettext@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #24, 20	; 0x18000
   10d10:	ldr	pc, [ip, #816]!	; 0x330

00010d14 <realloc@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #24, 20	; 0x18000
   10d1c:	ldr	pc, [ip, #808]!	; 0x328

00010d20 <textdomain@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #24, 20	; 0x18000
   10d28:	ldr	pc, [ip, #800]!	; 0x320

00010d2c <iswprint@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #24, 20	; 0x18000
   10d34:	ldr	pc, [ip, #792]!	; 0x318

00010d38 <fwrite@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #24, 20	; 0x18000
   10d40:	ldr	pc, [ip, #784]!	; 0x310

00010d44 <lseek64@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #24, 20	; 0x18000
   10d4c:	ldr	pc, [ip, #776]!	; 0x308

00010d50 <__ctype_get_mb_cur_max@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #24, 20	; 0x18000
   10d58:	ldr	pc, [ip, #768]!	; 0x300

00010d5c <__fpending@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #24, 20	; 0x18000
   10d64:	ldr	pc, [ip, #760]!	; 0x2f8

00010d68 <mbrtowc@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #24, 20	; 0x18000
   10d70:	ldr	pc, [ip, #752]!	; 0x2f0

00010d74 <error@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #24, 20	; 0x18000
   10d7c:	ldr	pc, [ip, #744]!	; 0x2e8

00010d80 <malloc@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #24, 20	; 0x18000
   10d88:	ldr	pc, [ip, #736]!	; 0x2e0

00010d8c <__libc_start_main@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #24, 20	; 0x18000
   10d94:	ldr	pc, [ip, #728]!	; 0x2d8

00010d98 <__freading@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #24, 20	; 0x18000
   10da0:	ldr	pc, [ip, #720]!	; 0x2d0

00010da4 <__gmon_start__@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #24, 20	; 0x18000
   10dac:	ldr	pc, [ip, #712]!	; 0x2c8

00010db0 <getopt_long@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #24, 20	; 0x18000
   10db8:	ldr	pc, [ip, #704]!	; 0x2c0

00010dbc <__ctype_b_loc@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #24, 20	; 0x18000
   10dc4:	ldr	pc, [ip, #696]!	; 0x2b8

00010dc8 <exit@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #24, 20	; 0x18000
   10dd0:	ldr	pc, [ip, #688]!	; 0x2b0

00010dd4 <strlen@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #24, 20	; 0x18000
   10ddc:	ldr	pc, [ip, #680]!	; 0x2a8

00010de0 <__errno_location@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #24, 20	; 0x18000
   10de8:	ldr	pc, [ip, #672]!	; 0x2a0

00010dec <__cxa_atexit@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #24, 20	; 0x18000
   10df4:	ldr	pc, [ip, #664]!	; 0x298

00010df8 <memset@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #24, 20	; 0x18000
   10e00:	ldr	pc, [ip, #656]!	; 0x290

00010e04 <__printf_chk@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #24, 20	; 0x18000
   10e0c:	ldr	pc, [ip, #648]!	; 0x288

00010e10 <fileno@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #24, 20	; 0x18000
   10e18:	ldr	pc, [ip, #640]!	; 0x280

00010e1c <__fprintf_chk@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #24, 20	; 0x18000
   10e24:	ldr	pc, [ip, #632]!	; 0x278

00010e28 <fclose@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #24, 20	; 0x18000
   10e30:	ldr	pc, [ip, #624]!	; 0x270

00010e34 <fseeko64@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #24, 20	; 0x18000
   10e3c:	ldr	pc, [ip, #616]!	; 0x268

00010e40 <__uflow@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #24, 20	; 0x18000
   10e48:	ldr	pc, [ip, #608]!	; 0x260

00010e4c <__overflow@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #24, 20	; 0x18000
   10e54:	ldr	pc, [ip, #600]!	; 0x258

00010e58 <setlocale@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #24, 20	; 0x18000
   10e60:	ldr	pc, [ip, #592]!	; 0x250

00010e64 <strrchr@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #24, 20	; 0x18000
   10e6c:	ldr	pc, [ip, #584]!	; 0x248

00010e70 <nl_langinfo@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #24, 20	; 0x18000
   10e78:	ldr	pc, [ip, #576]!	; 0x240

00010e7c <clearerr_unlocked@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #24, 20	; 0x18000
   10e84:	ldr	pc, [ip, #568]!	; 0x238

00010e88 <fopen64@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #24, 20	; 0x18000
   10e90:	ldr	pc, [ip, #560]!	; 0x230

00010e94 <bindtextdomain@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #24, 20	; 0x18000
   10e9c:	ldr	pc, [ip, #552]!	; 0x228

00010ea0 <strncmp@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #24, 20	; 0x18000
   10ea8:	ldr	pc, [ip, #544]!	; 0x220

00010eac <abort@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #24, 20	; 0x18000
   10eb4:	ldr	pc, [ip, #536]!	; 0x218

00010eb8 <strspn@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #24, 20	; 0x18000
   10ec0:	ldr	pc, [ip, #528]!	; 0x210

00010ec4 <__assert_fail@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #24, 20	; 0x18000
   10ecc:	ldr	pc, [ip, #520]!	; 0x208

Disassembly of section .text:

00010ed0 <.text>:
   10ed0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10ed4:	movw	r5, #31112	; 0x7988
   10ed8:	movt	r5, #1
   10edc:	strd	r6, [sp, #8]
   10ee0:	mov	r7, r0
   10ee4:	mov	r6, r1
   10ee8:	strd	r8, [sp, #16]
   10eec:	mov	r9, #0
   10ef0:	strd	sl, [sp, #24]
   10ef4:	mov	sl, #0
   10ef8:	mov	fp, #0
   10efc:	str	lr, [sp, #32]
   10f00:	sub	sp, sp, #36	; 0x24
   10f04:	ldr	r8, [pc, #1140]	; 11380 <__assert_fail@plt+0x4bc>
   10f08:	str	r9, [sp, #12]
   10f0c:	ldr	r0, [r1]
   10f10:	bl	1277c <__assert_fail@plt+0x18b8>
   10f14:	movw	r1, #30700	; 0x77ec
   10f18:	movt	r1, #1
   10f1c:	mov	r0, #6
   10f20:	bl	10e58 <setlocale@plt>
   10f24:	movw	r1, #31044	; 0x7944
   10f28:	movt	r1, #1
   10f2c:	movw	r0, #30876	; 0x789c
   10f30:	movt	r0, #1
   10f34:	bl	10e94 <bindtextdomain@plt>
   10f38:	movw	r0, #30876	; 0x789c
   10f3c:	movt	r0, #1
   10f40:	bl	10d20 <textdomain@plt>
   10f44:	movw	r0, #9208	; 0x23f8
   10f48:	movt	r0, #1
   10f4c:	bl	17534 <__assert_fail@plt+0x6670>
   10f50:	str	r5, [sp, #8]
   10f54:	ldr	r5, [sp, #8]
   10f58:	mov	r4, #0
   10f5c:	mov	r3, r8
   10f60:	mov	r2, r5
   10f64:	str	r4, [sp]
   10f68:	mov	r1, r6
   10f6c:	mov	r0, r7
   10f70:	bl	10db0 <getopt_long@plt>
   10f74:	cmn	r0, #1
   10f78:	beq	110d0 <__assert_fail@plt+0x20c>
   10f7c:	cmp	r0, #63	; 0x3f
   10f80:	beq	1144c <__assert_fail@plt+0x588>
   10f84:	ble	10ff8 <__assert_fail@plt+0x134>
   10f88:	cmp	r0, #116	; 0x74
   10f8c:	beq	1106c <__assert_fail@plt+0x1a8>
   10f90:	cmp	r0, #256	; 0x100
   10f94:	mov	r3, #1
   10f98:	beq	11054 <__assert_fail@plt+0x190>
   10f9c:	cmp	r0, #97	; 0x61
   10fa0:	str	r5, [sp, #8]
   10fa4:	beq	1105c <__assert_fail@plt+0x198>
   10fa8:	ldr	r3, [sp, #12]
   10fac:	cmp	r3, #0
   10fb0:	beq	110b8 <__assert_fail@plt+0x1f4>
   10fb4:	add	r3, pc, #956	; 0x3bc
   10fb8:	ldrd	r2, [r3]
   10fbc:	cmp	fp, r3
   10fc0:	cmpeq	sl, r2
   10fc4:	bhi	11478 <__assert_fail@plt+0x5b4>
   10fc8:	mov	r1, #10
   10fcc:	sub	r0, r0, #48	; 0x30
   10fd0:	umull	r2, r3, sl, r1
   10fd4:	mla	r3, r1, fp, r3
   10fd8:	adds	r4, r2, r0
   10fdc:	adc	r5, r3, r0, asr #31
   10fe0:	cmp	fp, r5
   10fe4:	cmpeq	sl, r4
   10fe8:	bhi	11478 <__assert_fail@plt+0x5b4>
   10fec:	mov	sl, r4
   10ff0:	mov	fp, r5
   10ff4:	b	10f54 <__assert_fail@plt+0x90>
   10ff8:	cmn	r0, #2
   10ffc:	str	r5, [sp, #8]
   11000:	beq	11444 <__assert_fail@plt+0x580>
   11004:	cmp	r0, #44	; 0x2c
   11008:	beq	11094 <__assert_fail@plt+0x1d0>
   1100c:	cmn	r0, #3
   11010:	bne	10fa8 <__assert_fail@plt+0xe4>
   11014:	movw	r2, #31068	; 0x795c
   11018:	movt	r2, #1
   1101c:	movw	r3, #37100	; 0x90ec
   11020:	movt	r3, #2
   11024:	movw	r0, #37204	; 0x9154
   11028:	movt	r0, #2
   1102c:	stm	sp, {r2, r4}
   11030:	movw	r1, #30192	; 0x75f0
   11034:	movt	r1, #1
   11038:	ldr	r0, [r0]
   1103c:	movw	r2, #30872	; 0x7898
   11040:	movt	r2, #1
   11044:	ldr	r3, [r3]
   11048:	bl	167b0 <__assert_fail@plt+0x58ec>
   1104c:	mov	r0, #0
   11050:	bl	10dc8 <exit@plt>
   11054:	mov	r9, r3
   11058:	b	10f5c <__assert_fail@plt+0x98>
   1105c:	movw	r2, #37272	; 0x9198
   11060:	movt	r2, #2
   11064:	strb	r3, [r2]
   11068:	b	10f54 <__assert_fail@plt+0x90>
   1106c:	mov	r1, #1
   11070:	movw	r3, #37272	; 0x9198
   11074:	movt	r3, #2
   11078:	movw	r2, #37208	; 0x9158
   1107c:	movt	r2, #2
   11080:	str	r5, [sp, #8]
   11084:	ldr	r0, [r2]
   11088:	strb	r1, [r3]
   1108c:	bl	11a0c <__assert_fail@plt+0xb48>
   11090:	b	10f54 <__assert_fail@plt+0x90>
   11094:	ldr	r3, [sp, #12]
   11098:	cmp	r3, #0
   1109c:	beq	10f54 <__assert_fail@plt+0x90>
   110a0:	mov	r3, #0
   110a4:	mov	r0, sl
   110a8:	mov	r1, fp
   110ac:	str	r3, [sp, #12]
   110b0:	bl	118f0 <__assert_fail@plt+0xa2c>
   110b4:	b	10f54 <__assert_fail@plt+0x90>
   110b8:	mov	r3, #1
   110bc:	sub	r0, r0, #48	; 0x30
   110c0:	mov	sl, r0
   110c4:	asr	fp, r0, #31
   110c8:	str	r3, [sp, #12]
   110cc:	b	10f54 <__assert_fail@plt+0x90>
   110d0:	cmp	r9, #0
   110d4:	beq	110e4 <__assert_fail@plt+0x220>
   110d8:	movw	r3, #37272	; 0x9198
   110dc:	movt	r3, #2
   110e0:	strb	r4, [r3]
   110e4:	ldr	r3, [sp, #12]
   110e8:	cmp	r3, #0
   110ec:	bne	11434 <__assert_fail@plt+0x570>
   110f0:	bl	11e90 <__assert_fail@plt+0xfcc>
   110f4:	movw	r3, #37184	; 0x9140
   110f8:	movt	r3, #2
   110fc:	ldr	r0, [r3]
   11100:	cmp	r0, r7
   11104:	addlt	r0, r6, r0, lsl #2
   11108:	movge	r0, #0
   1110c:	bl	1213c <__assert_fail@plt+0x1278>
   11110:	mov	r0, #0
   11114:	bl	12164 <__assert_fail@plt+0x12a0>
   11118:	subs	sl, r0, #0
   1111c:	beq	113d0 <__assert_fail@plt+0x50c>
   11120:	movw	r3, #37228	; 0x916c
   11124:	movt	r3, #2
   11128:	ldr	r0, [r3]
   1112c:	movw	r3, #37272	; 0x9198
   11130:	movt	r3, #2
   11134:	movw	fp, #37204	; 0x9154
   11138:	movt	fp, #2
   1113c:	str	r3, [sp, #16]
   11140:	bl	169c0 <__assert_fail@plt+0x5afc>
   11144:	str	r0, [sp, #20]
   11148:	mov	r7, #0
   1114c:	mov	r6, #1
   11150:	mov	r8, #0
   11154:	mov	r9, #0
   11158:	str	r7, [sp, #8]
   1115c:	str	r6, [sp, #12]
   11160:	str	r7, [sp, #28]
   11164:	b	1121c <__assert_fail@plt+0x358>
   11168:	cmp	r4, #8
   1116c:	beq	11334 <__assert_fail@plt+0x470>
   11170:	adds	r8, r8, #1
   11174:	adc	r9, r9, #0
   11178:	orrs	r3, r8, r9
   1117c:	beq	11454 <__assert_fail@plt+0x590>
   11180:	mov	r6, #1
   11184:	cmp	r7, #0
   11188:	str	r5, [sp, #12]
   1118c:	beq	111d8 <__assert_fail@plt+0x314>
   11190:	ldr	r3, [sp, #8]
   11194:	cmp	r7, #1
   11198:	movls	r3, #0
   1119c:	andhi	r3, r3, #1
   111a0:	cmp	r3, #0
   111a4:	beq	111b4 <__assert_fail@plt+0x2f0>
   111a8:	ldr	r2, [sp, #20]
   111ac:	mov	r3, #9
   111b0:	strb	r3, [r2]
   111b4:	mov	r2, r7
   111b8:	mov	r1, #1
   111bc:	ldr	r3, [fp]
   111c0:	ldr	r0, [sp, #20]
   111c4:	bl	10ce4 <fwrite_unlocked@plt>
   111c8:	cmp	r7, r0
   111cc:	bne	11394 <__assert_fail@plt+0x4d0>
   111d0:	mov	r3, #0
   111d4:	str	r3, [sp, #8]
   111d8:	ldr	r3, [sp, #16]
   111dc:	cmp	r4, #0
   111e0:	ldrb	r3, [r3]
   111e4:	orr	r3, r5, r3
   111e8:	and	r6, r6, r3
   111ec:	blt	113c8 <__assert_fail@plt+0x504>
   111f0:	mov	r7, #0
   111f4:	ldr	r0, [fp]
   111f8:	ldr	r3, [r0, #20]
   111fc:	ldr	r2, [r0, #24]
   11200:	cmp	r3, r2
   11204:	addcc	r2, r3, #1
   11208:	strcc	r2, [r0, #20]
   1120c:	strbcc	r4, [r3]
   11210:	bcs	11384 <__assert_fail@plt+0x4c0>
   11214:	cmp	r4, #10
   11218:	beq	11148 <__assert_fail@plt+0x284>
   1121c:	ldr	r3, [sl, #4]
   11220:	ldr	r2, [sl, #8]
   11224:	cmp	r3, r2
   11228:	bcs	112e8 <__assert_fail@plt+0x424>
   1122c:	add	r2, r3, #1
   11230:	str	r2, [sl, #4]
   11234:	ldrb	r4, [r3]
   11238:	cmp	r6, #0
   1123c:	beq	111f4 <__assert_fail@plt+0x330>
   11240:	bl	10dbc <__ctype_b_loc@plt>
   11244:	ldr	r2, [r0]
   11248:	lsl	r3, r4, #1
   1124c:	ldrh	r3, [r2, r3]
   11250:	and	r3, r3, #1
   11254:	uxth	r2, r3
   11258:	uxtb	r5, r3
   1125c:	cmp	r2, #0
   11260:	beq	11168 <__assert_fail@plt+0x2a4>
   11264:	add	r3, sp, #27
   11268:	add	r2, sp, #28
   1126c:	mov	r0, r8
   11270:	mov	r1, r9
   11274:	bl	11fe0 <__assert_fail@plt+0x111c>
   11278:	ldrb	r3, [sp, #27]
   1127c:	cmp	r3, #0
   11280:	bne	113c0 <__assert_fail@plt+0x4fc>
   11284:	cmp	r9, r1
   11288:	cmpeq	r8, r0
   1128c:	bhi	11484 <__assert_fail@plt+0x5c0>
   11290:	cmp	r4, #9
   11294:	beq	113fc <__assert_fail@plt+0x538>
   11298:	ldr	r3, [sp, #12]
   1129c:	adds	r8, r8, #1
   112a0:	adc	r9, r9, #0
   112a4:	cmp	r1, r9
   112a8:	cmpeq	r0, r8
   112ac:	eor	r6, r3, #1
   112b0:	orrne	r6, r6, #1
   112b4:	ands	r6, r6, #255	; 0xff
   112b8:	bne	1140c <__assert_fail@plt+0x548>
   112bc:	ldr	r2, [sp, #20]
   112c0:	mov	r3, #9
   112c4:	mov	r0, r8
   112c8:	mov	r1, r9
   112cc:	strb	r3, [r2]
   112d0:	mov	r8, r0
   112d4:	mov	r9, r1
   112d8:	ldr	r7, [sp, #8]
   112dc:	mov	r6, #1
   112e0:	mov	r4, #9
   112e4:	b	11184 <__assert_fail@plt+0x2c0>
   112e8:	mov	r0, sl
   112ec:	bl	10e40 <__uflow@plt>
   112f0:	subs	r4, r0, #0
   112f4:	bge	11238 <__assert_fail@plt+0x374>
   112f8:	mov	r0, sl
   112fc:	bl	12164 <__assert_fail@plt+0x12a0>
   11300:	subs	sl, r0, #0
   11304:	bne	1121c <__assert_fail@plt+0x358>
   11308:	cmp	r6, #0
   1130c:	beq	113c8 <__assert_fail@plt+0x504>
   11310:	bl	10dbc <__ctype_b_loc@plt>
   11314:	ldr	r2, [r0]
   11318:	lsl	r3, r4, #1
   1131c:	ldrh	r3, [r2, r3]
   11320:	and	r3, r3, #1
   11324:	cmp	r3, #0
   11328:	uxtb	r5, r3
   1132c:	beq	11170 <__assert_fail@plt+0x2ac>
   11330:	b	11264 <__assert_fail@plt+0x3a0>
   11334:	ldr	r3, [sp, #28]
   11338:	orrs	r1, r8, r9
   1133c:	movne	r1, #1
   11340:	moveq	r1, #0
   11344:	subs	r8, r8, r1
   11348:	sbc	r9, r9, r2
   1134c:	cmp	r3, #0
   11350:	subne	r3, r3, #1
   11354:	cmp	r7, #0
   11358:	strne	r5, [sp, #12]
   1135c:	str	r3, [sp, #28]
   11360:	bne	11190 <__assert_fail@plt+0x2cc>
   11364:	ldr	r3, [sp, #16]
   11368:	str	r5, [sp, #12]
   1136c:	ldrb	r6, [r3]
   11370:	orr	r6, r5, r6
   11374:	b	111f4 <__assert_fail@plt+0x330>
   11378:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   1137c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11380:	muleq	r1, r0, r5
   11384:	uxtb	r1, r4
   11388:	bl	10e4c <__overflow@plt>
   1138c:	cmp	r0, #0
   11390:	bge	11214 <__assert_fail@plt+0x350>
   11394:	bl	10de0 <__errno_location@plt>
   11398:	ldr	r4, [r0]
   1139c:	mov	r2, #5
   113a0:	movw	r1, #31152	; 0x79b0
   113a4:	movt	r1, #1
   113a8:	mov	r0, #0
   113ac:	bl	10d08 <dcgettext@plt>
   113b0:	mov	r2, r0
   113b4:	mov	r0, #1
   113b8:	mov	r1, r4
   113bc:	bl	10d74 <error@plt>
   113c0:	mov	r6, #0
   113c4:	b	11184 <__assert_fail@plt+0x2c0>
   113c8:	ldr	r0, [sp, #20]
   113cc:	bl	1264c <__assert_fail@plt+0x1788>
   113d0:	bl	1232c <__assert_fail@plt+0x1468>
   113d4:	movw	r3, #37268	; 0x9194
   113d8:	movt	r3, #2
   113dc:	ldr	r0, [r3]
   113e0:	add	sp, sp, #36	; 0x24
   113e4:	ldrd	r4, [sp]
   113e8:	ldrd	r6, [sp, #8]
   113ec:	ldrd	r8, [sp, #16]
   113f0:	ldrd	sl, [sp, #24]
   113f4:	add	sp, sp, #32
   113f8:	pop	{pc}		; (ldr pc, [sp], #4)
   113fc:	cmp	r7, #0
   11400:	ldrne	r3, [sp, #20]
   11404:	strbne	r4, [r3]
   11408:	b	112d0 <__assert_fail@plt+0x40c>
   1140c:	ldr	r3, [sp, #20]
   11410:	cmp	r1, r9
   11414:	cmpeq	r0, r8
   11418:	str	r6, [sp, #12]
   1141c:	strb	r4, [r3, r7]
   11420:	add	r7, r7, #1
   11424:	ldr	r3, [sp, #8]
   11428:	moveq	r3, r6
   1142c:	str	r3, [sp, #8]
   11430:	b	11214 <__assert_fail@plt+0x350>
   11434:	mov	r0, sl
   11438:	mov	r1, fp
   1143c:	bl	118f0 <__assert_fail@plt+0xa2c>
   11440:	b	110f0 <__assert_fail@plt+0x22c>
   11444:	mov	r0, #0
   11448:	bl	11580 <__assert_fail@plt+0x6bc>
   1144c:	mov	r0, #1
   11450:	bl	11580 <__assert_fail@plt+0x6bc>
   11454:	movw	r1, #31128	; 0x7998
   11458:	movt	r1, #1
   1145c:	mov	r2, #5
   11460:	mov	r0, #0
   11464:	bl	10d08 <dcgettext@plt>
   11468:	mov	r2, r0
   1146c:	mov	r1, #0
   11470:	mov	r0, #1
   11474:	bl	10d74 <error@plt>
   11478:	movw	r1, #31084	; 0x796c
   1147c:	movt	r1, #1
   11480:	b	1145c <__assert_fail@plt+0x598>
   11484:	movw	r1, #31128	; 0x7998
   11488:	movt	r1, #1
   1148c:	b	1145c <__assert_fail@plt+0x598>
   11490:	mov	fp, #0
   11494:	mov	lr, #0
   11498:	pop	{r1}		; (ldr r1, [sp], #4)
   1149c:	mov	r2, sp
   114a0:	push	{r2}		; (str r2, [sp, #-4]!)
   114a4:	push	{r0}		; (str r0, [sp, #-4]!)
   114a8:	ldr	ip, [pc, #16]	; 114c0 <__assert_fail@plt+0x5fc>
   114ac:	push	{ip}		; (str ip, [sp, #-4]!)
   114b0:	ldr	r0, [pc, #12]	; 114c4 <__assert_fail@plt+0x600>
   114b4:	ldr	r3, [pc, #12]	; 114c8 <__assert_fail@plt+0x604>
   114b8:	bl	10d8c <__libc_start_main@plt>
   114bc:	bl	10eac <abort@plt>
   114c0:	andeq	r7, r1, r0, lsr r5
   114c4:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   114c8:	ldrdeq	r7, [r1], -r0
   114cc:	ldr	r3, [pc, #20]	; 114e8 <__assert_fail@plt+0x624>
   114d0:	ldr	r2, [pc, #20]	; 114ec <__assert_fail@plt+0x628>
   114d4:	add	r3, pc, r3
   114d8:	ldr	r2, [r3, r2]
   114dc:	cmp	r2, #0
   114e0:	bxeq	lr
   114e4:	b	10da4 <__gmon_start__@plt>
   114e8:	andeq	r7, r1, r4, lsr #22
   114ec:	ldrdeq	r0, [r0], -r8
   114f0:	ldr	r0, [pc, #24]	; 11510 <__assert_fail@plt+0x64c>
   114f4:	ldr	r3, [pc, #24]	; 11514 <__assert_fail@plt+0x650>
   114f8:	cmp	r3, r0
   114fc:	bxeq	lr
   11500:	ldr	r3, [pc, #16]	; 11518 <__assert_fail@plt+0x654>
   11504:	cmp	r3, #0
   11508:	bxeq	lr
   1150c:	bx	r3
   11510:	andeq	r9, r2, r4, lsr r1
   11514:	andeq	r9, r2, r4, lsr r1
   11518:	andeq	r0, r0, r0
   1151c:	ldr	r0, [pc, #36]	; 11548 <__assert_fail@plt+0x684>
   11520:	ldr	r1, [pc, #36]	; 1154c <__assert_fail@plt+0x688>
   11524:	sub	r1, r1, r0
   11528:	asr	r1, r1, #2
   1152c:	add	r1, r1, r1, lsr #31
   11530:	asrs	r1, r1, #1
   11534:	bxeq	lr
   11538:	ldr	r3, [pc, #16]	; 11550 <__assert_fail@plt+0x68c>
   1153c:	cmp	r3, #0
   11540:	bxeq	lr
   11544:	bx	r3
   11548:	andeq	r9, r2, r4, lsr r1
   1154c:	andeq	r9, r2, r4, lsr r1
   11550:	andeq	r0, r0, r0
   11554:	push	{r4, lr}
   11558:	ldr	r4, [pc, #24]	; 11578 <__assert_fail@plt+0x6b4>
   1155c:	ldrb	r3, [r4]
   11560:	cmp	r3, #0
   11564:	popne	{r4, pc}
   11568:	bl	114f0 <__assert_fail@plt+0x62c>
   1156c:	mov	r3, #1
   11570:	strb	r3, [r4]
   11574:	pop	{r4, pc}
   11578:	andeq	r9, r2, ip, asr r1
   1157c:	b	1151c <__assert_fail@plt+0x658>
   11580:	subs	r6, r0, #0
   11584:	str	r7, [sp, #-8]!
   11588:	str	lr, [sp, #4]
   1158c:	sub	sp, sp, #56	; 0x38
   11590:	beq	115d8 <__assert_fail@plt+0x714>
   11594:	movw	r3, #37192	; 0x9148
   11598:	movt	r3, #2
   1159c:	ldr	r4, [r3]
   115a0:	mov	r2, #5
   115a4:	movw	r1, #30204	; 0x75fc
   115a8:	movt	r1, #1
   115ac:	mov	r0, #0
   115b0:	bl	10d08 <dcgettext@plt>
   115b4:	movw	r3, #37284	; 0x91a4
   115b8:	movt	r3, #2
   115bc:	mov	r2, r0
   115c0:	mov	r1, #1
   115c4:	ldr	r3, [r3]
   115c8:	mov	r0, r4
   115cc:	bl	10e1c <__fprintf_chk@plt>
   115d0:	mov	r0, r6
   115d4:	bl	10dc8 <exit@plt>
   115d8:	mov	r2, #5
   115dc:	movw	r1, #30244	; 0x7624
   115e0:	movt	r1, #1
   115e4:	movw	r7, #37204	; 0x9154
   115e8:	movt	r7, #2
   115ec:	bl	10d08 <dcgettext@plt>
   115f0:	movw	r3, #37284	; 0x91a4
   115f4:	movt	r3, #2
   115f8:	mov	r1, r0
   115fc:	mov	r0, #1
   11600:	ldr	r2, [r3]
   11604:	bl	10e04 <__printf_chk@plt>
   11608:	mov	r2, #5
   1160c:	movw	r1, #30280	; 0x7648
   11610:	movt	r1, #1
   11614:	mov	r0, r6
   11618:	bl	10d08 <dcgettext@plt>
   1161c:	ldr	r1, [r7]
   11620:	bl	10c78 <fputs_unlocked@plt>
   11624:	mov	r2, #5
   11628:	movw	r1, #30348	; 0x768c
   1162c:	movt	r1, #1
   11630:	mov	r0, r6
   11634:	bl	10d08 <dcgettext@plt>
   11638:	ldr	r1, [r7]
   1163c:	bl	10c78 <fputs_unlocked@plt>
   11640:	mov	r2, #5
   11644:	movw	r1, #30404	; 0x76c4
   11648:	movt	r1, #1
   1164c:	mov	r0, r6
   11650:	bl	10d08 <dcgettext@plt>
   11654:	ldr	r1, [r7]
   11658:	bl	10c78 <fputs_unlocked@plt>
   1165c:	mov	r2, #5
   11660:	movw	r1, #30480	; 0x7710
   11664:	movt	r1, #1
   11668:	mov	r0, r6
   1166c:	bl	10d08 <dcgettext@plt>
   11670:	ldr	r1, [r7]
   11674:	bl	10c78 <fputs_unlocked@plt>
   11678:	bl	12384 <__assert_fail@plt+0x14c0>
   1167c:	mov	r2, #5
   11680:	movw	r1, #30704	; 0x77f0
   11684:	movt	r1, #1
   11688:	mov	r0, r6
   1168c:	bl	10d08 <dcgettext@plt>
   11690:	ldr	r1, [r7]
   11694:	bl	10c78 <fputs_unlocked@plt>
   11698:	mov	r2, #5
   1169c:	movw	r1, #30752	; 0x7820
   116a0:	movt	r1, #1
   116a4:	mov	r0, r6
   116a8:	bl	10d08 <dcgettext@plt>
   116ac:	ldr	r1, [r7]
   116b0:	bl	10c78 <fputs_unlocked@plt>
   116b4:	movw	lr, #30040	; 0x7558
   116b8:	movt	lr, #1
   116bc:	ldr	ip, [lr]
   116c0:	ldr	r4, [lr, #4]
   116c4:	ldrd	r8, [lr, #8]
   116c8:	subs	r1, ip, #0
   116cc:	str	ip, [sp]
   116d0:	ldrd	r2, [lr, #16]
   116d4:	str	r4, [sp, #4]
   116d8:	ldrd	r4, [lr, #24]
   116dc:	strd	r8, [sp, #8]
   116e0:	ldrd	r8, [lr, #32]
   116e4:	strd	r2, [sp, #16]
   116e8:	ldrd	r2, [lr, #40]	; 0x28
   116ec:	strd	r4, [sp, #24]
   116f0:	ldrd	r4, [lr, #48]	; 0x30
   116f4:	strd	r8, [sp, #32]
   116f8:	strd	r2, [sp, #40]	; 0x28
   116fc:	strd	r4, [sp, #48]	; 0x30
   11700:	movwne	r5, #30192	; 0x75f0
   11704:	mov	r4, sp
   11708:	movtne	r5, #1
   1170c:	bne	11804 <__assert_fail@plt+0x940>
   11710:	ldr	r4, [r4, #4]
   11714:	movw	r1, #30808	; 0x7858
   11718:	movt	r1, #1
   1171c:	mov	r2, #5
   11720:	cmp	r4, #0
   11724:	beq	11818 <__assert_fail@plt+0x954>
   11728:	mov	r0, #0
   1172c:	bl	10d08 <dcgettext@plt>
   11730:	mov	r1, r0
   11734:	movw	r3, #30832	; 0x7870
   11738:	movt	r3, #1
   1173c:	movw	r2, #30872	; 0x7898
   11740:	movt	r2, #1
   11744:	mov	r0, #1
   11748:	bl	10e04 <__printf_chk@plt>
   1174c:	mov	r1, #0
   11750:	mov	r0, #5
   11754:	bl	10e58 <setlocale@plt>
   11758:	cmp	r0, #0
   1175c:	movweq	r5, #30192	; 0x75f0
   11760:	movteq	r5, #1
   11764:	beq	11788 <__assert_fail@plt+0x8c4>
   11768:	movw	r1, #30888	; 0x78a8
   1176c:	movt	r1, #1
   11770:	mov	r2, #3
   11774:	movw	r5, #30192	; 0x75f0
   11778:	movt	r5, #1
   1177c:	bl	10ea0 <strncmp@plt>
   11780:	cmp	r0, #0
   11784:	bne	118d0 <__assert_fail@plt+0xa0c>
   11788:	mov	r2, #5
   1178c:	movw	r1, #30964	; 0x78f4
   11790:	movt	r1, #1
   11794:	mov	r0, #0
   11798:	bl	10d08 <dcgettext@plt>
   1179c:	mov	r1, r0
   117a0:	movw	r3, #30192	; 0x75f0
   117a4:	movt	r3, #1
   117a8:	movw	r2, #30832	; 0x7870
   117ac:	movt	r2, #1
   117b0:	mov	r0, #1
   117b4:	bl	10e04 <__printf_chk@plt>
   117b8:	mov	r2, #5
   117bc:	movw	r1, #30992	; 0x7910
   117c0:	movt	r1, #1
   117c4:	mov	r0, #0
   117c8:	bl	10d08 <dcgettext@plt>
   117cc:	movw	r2, #31172	; 0x79c4
   117d0:	movt	r2, #1
   117d4:	cmp	r4, r5
   117d8:	movw	r3, #30700	; 0x77ec
   117dc:	movt	r3, #1
   117e0:	mov	r1, r0
   117e4:	moveq	r3, r2
   117e8:	mov	r2, r4
   117ec:	mov	r0, #1
   117f0:	bl	10e04 <__printf_chk@plt>
   117f4:	b	115d0 <__assert_fail@plt+0x70c>
   117f8:	ldr	r1, [r4, #8]!
   117fc:	cmp	r1, #0
   11800:	beq	11710 <__assert_fail@plt+0x84c>
   11804:	mov	r0, r5
   11808:	bl	10c90 <strcmp@plt>
   1180c:	cmp	r0, #0
   11810:	bne	117f8 <__assert_fail@plt+0x934>
   11814:	b	11710 <__assert_fail@plt+0x84c>
   11818:	mov	r0, r4
   1181c:	bl	10d08 <dcgettext@plt>
   11820:	mov	r1, r0
   11824:	movw	r3, #30832	; 0x7870
   11828:	movt	r3, #1
   1182c:	movw	r2, #30872	; 0x7898
   11830:	movt	r2, #1
   11834:	mov	r0, #1
   11838:	bl	10e04 <__printf_chk@plt>
   1183c:	mov	r1, r4
   11840:	mov	r0, #5
   11844:	bl	10e58 <setlocale@plt>
   11848:	cmp	r0, #0
   1184c:	beq	11868 <__assert_fail@plt+0x9a4>
   11850:	movw	r1, #30888	; 0x78a8
   11854:	movt	r1, #1
   11858:	mov	r2, #3
   1185c:	bl	10ea0 <strncmp@plt>
   11860:	cmp	r0, #0
   11864:	bne	118c4 <__assert_fail@plt+0xa00>
   11868:	mov	r2, #5
   1186c:	movw	r1, #30964	; 0x78f4
   11870:	movt	r1, #1
   11874:	mov	r0, #0
   11878:	bl	10d08 <dcgettext@plt>
   1187c:	mov	r1, r0
   11880:	movw	r3, #30192	; 0x75f0
   11884:	movt	r3, #1
   11888:	movw	r2, #30832	; 0x7870
   1188c:	movt	r2, #1
   11890:	mov	r0, #1
   11894:	bl	10e04 <__printf_chk@plt>
   11898:	movw	r1, #30992	; 0x7910
   1189c:	movt	r1, #1
   118a0:	mov	r2, #5
   118a4:	mov	r0, #0
   118a8:	bl	10d08 <dcgettext@plt>
   118ac:	movw	r4, #30192	; 0x75f0
   118b0:	movt	r4, #1
   118b4:	movw	r3, #31172	; 0x79c4
   118b8:	movt	r3, #1
   118bc:	mov	r1, r0
   118c0:	b	117e8 <__assert_fail@plt+0x924>
   118c4:	movw	r5, #30192	; 0x75f0
   118c8:	movt	r5, #1
   118cc:	mov	r4, r5
   118d0:	mov	r2, #5
   118d4:	movw	r1, #30892	; 0x78ac
   118d8:	movt	r1, #1
   118dc:	mov	r0, #0
   118e0:	bl	10d08 <dcgettext@plt>
   118e4:	ldr	r1, [r7]
   118e8:	bl	10c78 <fputs_unlocked@plt>
   118ec:	b	11788 <__assert_fail@plt+0x8c4>
   118f0:	str	r4, [sp, #-32]!	; 0xffffffe0
   118f4:	movw	r4, #37216	; 0x9160
   118f8:	movt	r4, #2
   118fc:	ldr	r3, [r4]
   11900:	strd	r6, [sp, #4]
   11904:	mov	r6, r0
   11908:	mov	r7, r1
   1190c:	strd	r8, [sp, #12]
   11910:	strd	sl, [sp, #20]
   11914:	str	lr, [sp, #28]
   11918:	cmp	r3, #0
   1191c:	ldrd	r0, [r4, #4]
   11920:	beq	1196c <__assert_fail@plt+0xaa8>
   11924:	sub	r2, r3, #-536870911	; 0xe0000001
   11928:	lsl	r2, r2, #3
   1192c:	ldrd	sl, [r0, r2]
   11930:	cmp	fp, r7
   11934:	cmpeq	sl, r6
   11938:	bls	119fc <__assert_fail@plt+0xb38>
   1193c:	cmp	r3, r1
   11940:	beq	119dc <__assert_fail@plt+0xb18>
   11944:	add	r3, r3, #1
   11948:	add	r2, r0, r2
   1194c:	str	r3, [r4]
   11950:	strd	r6, [r2, #8]
   11954:	ldr	r4, [sp]
   11958:	ldrd	r6, [sp, #4]
   1195c:	ldrd	r8, [sp, #12]
   11960:	ldrd	sl, [sp, #20]
   11964:	add	sp, sp, #28
   11968:	pop	{pc}		; (ldr pc, [sp], #4)
   1196c:	mov	r8, r6
   11970:	mov	r9, r7
   11974:	cmp	r3, r1
   11978:	beq	119e4 <__assert_fail@plt+0xb20>
   1197c:	ldr	r2, [r4, #12]
   11980:	lsl	r1, r3, #3
   11984:	add	r3, r3, #1
   11988:	str	r3, [r4]
   1198c:	mov	r3, #0
   11990:	cmp	r3, r9
   11994:	strd	r6, [r0, r1]
   11998:	cmpeq	r2, r8
   1199c:	bcs	11954 <__assert_fail@plt+0xa90>
   119a0:	mov	r3, #0
   119a4:	mvn	r2, #0
   119a8:	cmp	r9, r3
   119ac:	cmpeq	r8, r2
   119b0:	strls	r8, [r4, #12]
   119b4:	bls	11954 <__assert_fail@plt+0xa90>
   119b8:	mov	r2, #5
   119bc:	movw	r1, #31324	; 0x7a5c
   119c0:	movt	r1, #1
   119c4:	mov	r0, #0
   119c8:	bl	10d08 <dcgettext@plt>
   119cc:	mov	r2, r0
   119d0:	mov	r1, #0
   119d4:	mov	r0, #1
   119d8:	bl	10d74 <error@plt>
   119dc:	mov	r8, #0
   119e0:	mov	r9, #0
   119e4:	mov	r2, #8
   119e8:	ldr	r1, [pc, #24]	; 11a08 <__assert_fail@plt+0xb44>
   119ec:	bl	16c14 <__assert_fail@plt+0x5d50>
   119f0:	str	r0, [r4, #4]
   119f4:	ldr	r3, [r4]
   119f8:	b	1197c <__assert_fail@plt+0xab8>
   119fc:	subs	r8, r6, sl
   11a00:	sbc	r9, r7, fp
   11a04:	b	11974 <__assert_fail@plt+0xab0>
   11a08:	andeq	r9, r2, r8, ror #2
   11a0c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11a10:	strd	r6, [sp, #8]
   11a14:	strd	r8, [sp, #16]
   11a18:	strd	sl, [sp, #24]
   11a1c:	str	lr, [sp, #32]
   11a20:	sub	sp, sp, #20
   11a24:	ldrb	fp, [r0]
   11a28:	cmp	fp, #0
   11a2c:	beq	11b44 <__assert_fail@plt+0xc80>
   11a30:	mov	r2, #0
   11a34:	mov	r3, #0
   11a38:	mov	r9, #0
   11a3c:	mov	r4, r0
   11a40:	mov	r8, r9
   11a44:	mov	r7, r9
   11a48:	strd	r2, [sp]
   11a4c:	mov	r6, r9
   11a50:	mov	sl, #1
   11a54:	b	11abc <__assert_fail@plt+0xbf8>
   11a58:	bl	10dbc <__ctype_b_loc@plt>
   11a5c:	ldr	r2, [r0]
   11a60:	lsl	r3, fp, #1
   11a64:	ldrh	r5, [r2, r3]
   11a68:	ands	r5, r5, #1
   11a6c:	bne	11ac4 <__assert_fail@plt+0xc00>
   11a70:	cmp	fp, #47	; 0x2f
   11a74:	beq	11b80 <__assert_fail@plt+0xcbc>
   11a78:	cmp	fp, #43	; 0x2b
   11a7c:	beq	11c04 <__assert_fail@plt+0xd40>
   11a80:	sub	fp, fp, #48	; 0x30
   11a84:	cmp	fp, #9
   11a88:	bhi	11de4 <__assert_fail@plt+0xf20>
   11a8c:	cmp	r6, #0
   11a90:	bne	11c60 <__assert_fail@plt+0xd9c>
   11a94:	asr	r3, fp, #31
   11a98:	mov	r2, fp
   11a9c:	mov	r9, r4
   11aa0:	mov	r6, #1
   11aa4:	strd	r2, [sp]
   11aa8:	mov	r3, sl
   11aac:	ldrb	fp, [r4, #1]
   11ab0:	add	r4, r4, #1
   11ab4:	cmp	fp, #0
   11ab8:	beq	11b10 <__assert_fail@plt+0xc4c>
   11abc:	cmp	fp, #44	; 0x2c
   11ac0:	bne	11a58 <__assert_fail@plt+0xb94>
   11ac4:	cmp	r6, #0
   11ac8:	beq	11b60 <__assert_fail@plt+0xc9c>
   11acc:	cmp	r7, #0
   11ad0:	bne	11bdc <__assert_fail@plt+0xd18>
   11ad4:	cmp	r8, #0
   11ad8:	beq	11b68 <__assert_fail@plt+0xca4>
   11adc:	movw	r5, #37216	; 0x9160
   11ae0:	movt	r5, #2
   11ae4:	ldrd	r2, [r5, #24]
   11ae8:	orrs	r3, r2, r3
   11aec:	bne	11d3c <__assert_fail@plt+0xe78>
   11af0:	ldrb	fp, [r4, #1]
   11af4:	mov	r3, r7
   11af8:	mov	r6, r7
   11afc:	add	r4, r4, #1
   11b00:	ldrd	r0, [sp]
   11b04:	cmp	fp, #0
   11b08:	strd	r0, [r5, #24]
   11b0c:	bne	11abc <__assert_fail@plt+0xbf8>
   11b10:	cmp	r3, #0
   11b14:	beq	11e7c <__assert_fail@plt+0xfb8>
   11b18:	cmp	r7, #0
   11b1c:	bne	11dc4 <__assert_fail@plt+0xf00>
   11b20:	cmp	r8, #0
   11b24:	beq	11da0 <__assert_fail@plt+0xedc>
   11b28:	movw	r4, #37216	; 0x9160
   11b2c:	movt	r4, #2
   11b30:	ldrd	r2, [r4, #24]
   11b34:	orrs	r3, r2, r3
   11b38:	bne	11e1c <__assert_fail@plt+0xf58>
   11b3c:	ldrd	r2, [sp]
   11b40:	strd	r2, [r4, #24]
   11b44:	add	sp, sp, #20
   11b48:	ldrd	r4, [sp]
   11b4c:	ldrd	r6, [sp, #8]
   11b50:	ldrd	r8, [sp, #16]
   11b54:	ldrd	sl, [sp, #24]
   11b58:	add	sp, sp, #32
   11b5c:	pop	{pc}		; (ldr pc, [sp], #4)
   11b60:	mov	r3, r6
   11b64:	b	11aac <__assert_fail@plt+0xbe8>
   11b68:	ldrd	r0, [sp]
   11b6c:	mov	r7, r8
   11b70:	mov	r6, r8
   11b74:	bl	118f0 <__assert_fail@plt+0xa2c>
   11b78:	mov	r3, r8
   11b7c:	b	11aac <__assert_fail@plt+0xbe8>
   11b80:	cmp	r6, #0
   11b84:	moveq	r3, r6
   11b88:	moveq	r8, r6
   11b8c:	moveq	r7, #1
   11b90:	beq	11aac <__assert_fail@plt+0xbe8>
   11b94:	mov	r2, #5
   11b98:	movw	r1, #31444	; 0x7ad4
   11b9c:	movt	r1, #1
   11ba0:	mov	r0, r5
   11ba4:	bl	10d08 <dcgettext@plt>
   11ba8:	mov	r7, r0
   11bac:	mov	r0, r4
   11bb0:	bl	160ec <__assert_fail@plt+0x5228>
   11bb4:	mov	r3, r0
   11bb8:	mov	r2, r7
   11bbc:	mov	r1, r5
   11bc0:	mov	r0, r5
   11bc4:	bl	10d74 <error@plt>
   11bc8:	mov	sl, r5
   11bcc:	mov	r7, r6
   11bd0:	mov	r8, r5
   11bd4:	mov	r3, r5
   11bd8:	b	11aac <__assert_fail@plt+0xbe8>
   11bdc:	movw	r5, #37216	; 0x9160
   11be0:	movt	r5, #2
   11be4:	ldrd	r2, [r5, #16]
   11be8:	orrs	r3, r2, r3
   11bec:	bne	11d70 <__assert_fail@plt+0xeac>
   11bf0:	ldrd	r2, [sp]
   11bf4:	mov	r6, #0
   11bf8:	strd	r2, [r5, #16]
   11bfc:	mov	r3, r6
   11c00:	b	11aac <__assert_fail@plt+0xbe8>
   11c04:	cmp	r6, #0
   11c08:	moveq	r3, r6
   11c0c:	moveq	r7, r6
   11c10:	moveq	r8, #1
   11c14:	beq	11aac <__assert_fail@plt+0xbe8>
   11c18:	mov	r2, #5
   11c1c:	movw	r1, #31488	; 0x7b00
   11c20:	movt	r1, #1
   11c24:	mov	r0, r5
   11c28:	bl	10d08 <dcgettext@plt>
   11c2c:	mov	r7, r0
   11c30:	mov	r0, r4
   11c34:	bl	160ec <__assert_fail@plt+0x5228>
   11c38:	mov	r3, r0
   11c3c:	mov	r2, r7
   11c40:	mov	r1, r5
   11c44:	mov	r0, r5
   11c48:	bl	10d74 <error@plt>
   11c4c:	mov	sl, r5
   11c50:	mov	r8, r6
   11c54:	mov	r7, r5
   11c58:	mov	r3, r5
   11c5c:	b	11aac <__assert_fail@plt+0xbe8>
   11c60:	add	r1, pc, #544	; 0x220
   11c64:	ldrd	r0, [r1]
   11c68:	ldrd	r2, [sp]
   11c6c:	cmp	r3, r1
   11c70:	cmpeq	r2, r0
   11c74:	bls	11cec <__assert_fail@plt+0xe28>
   11c78:	movw	r1, #31532	; 0x7b2c
   11c7c:	movt	r1, #1
   11c80:	mov	r0, r9
   11c84:	bl	10eb8 <strspn@plt>
   11c88:	mov	r1, r0
   11c8c:	mov	r4, r0
   11c90:	mov	r0, r9
   11c94:	sub	r4, r4, #1
   11c98:	bl	16edc <__assert_fail@plt+0x6018>
   11c9c:	mov	r5, r0
   11ca0:	mov	r2, #5
   11ca4:	movw	r1, #31544	; 0x7b38
   11ca8:	movt	r1, #1
   11cac:	mov	r0, #0
   11cb0:	add	r4, r9, r4
   11cb4:	bl	10d08 <dcgettext@plt>
   11cb8:	mov	sl, r0
   11cbc:	mov	r0, r5
   11cc0:	bl	160ec <__assert_fail@plt+0x5228>
   11cc4:	mov	r1, #0
   11cc8:	mov	r3, r0
   11ccc:	mov	r2, sl
   11cd0:	mov	r0, r1
   11cd4:	bl	10d74 <error@plt>
   11cd8:	mov	r0, r5
   11cdc:	bl	1264c <__assert_fail@plt+0x1788>
   11ce0:	mov	r3, #0
   11ce4:	mov	sl, r3
   11ce8:	b	11aac <__assert_fail@plt+0xbe8>
   11cec:	mov	r0, r2
   11cf0:	lsl	r2, r3, #2
   11cf4:	mov	r1, r3
   11cf8:	lsl	r3, r0, #2
   11cfc:	orr	r2, r2, r0, lsr #30
   11d00:	adds	r3, r3, r0
   11d04:	adc	r2, r2, r1
   11d08:	adds	r3, r3, r3
   11d0c:	str	r3, [sp, #8]
   11d10:	adc	r3, r2, r2
   11d14:	str	r3, [sp, #12]
   11d18:	ldrd	r2, [sp, #8]
   11d1c:	adds	r2, r2, fp
   11d20:	adc	r3, r3, fp, asr #31
   11d24:	cmp	r3, r1
   11d28:	cmpeq	r2, r0
   11d2c:	bcc	11c78 <__assert_fail@plt+0xdb4>
   11d30:	strd	r2, [sp]
   11d34:	mov	r3, sl
   11d38:	b	11aac <__assert_fail@plt+0xbe8>
   11d3c:	mov	r2, #5
   11d40:	movw	r1, #31396	; 0x7aa4
   11d44:	movt	r1, #1
   11d48:	mov	r0, r7
   11d4c:	bl	10d08 <dcgettext@plt>
   11d50:	mov	r2, r0
   11d54:	mov	r1, r7
   11d58:	mov	r0, r7
   11d5c:	bl	10d74 <error@plt>
   11d60:	ldrd	r2, [sp]
   11d64:	strd	r2, [r5, #24]
   11d68:	mov	r0, #1
   11d6c:	bl	10dc8 <exit@plt>
   11d70:	mov	r2, #5
   11d74:	movw	r1, #31348	; 0x7a74
   11d78:	movt	r1, #1
   11d7c:	mov	r0, #0
   11d80:	bl	10d08 <dcgettext@plt>
   11d84:	mov	r1, #0
   11d88:	mov	r2, r0
   11d8c:	mov	r0, r1
   11d90:	bl	10d74 <error@plt>
   11d94:	ldrd	r2, [sp]
   11d98:	strd	r2, [r5, #16]
   11d9c:	b	11d68 <__assert_fail@plt+0xea4>
   11da0:	ldrd	r0, [sp]
   11da4:	add	sp, sp, #20
   11da8:	ldrd	r4, [sp]
   11dac:	ldrd	r6, [sp, #8]
   11db0:	ldrd	r8, [sp, #16]
   11db4:	ldrd	sl, [sp, #24]
   11db8:	ldr	lr, [sp, #32]
   11dbc:	add	sp, sp, #36	; 0x24
   11dc0:	b	118f0 <__assert_fail@plt+0xa2c>
   11dc4:	movw	r4, #37216	; 0x9160
   11dc8:	movt	r4, #2
   11dcc:	ldrd	r2, [r4, #16]
   11dd0:	orrs	r3, r2, r3
   11dd4:	bne	11e4c <__assert_fail@plt+0xf88>
   11dd8:	ldrd	r2, [sp]
   11ddc:	strd	r2, [r4, #16]
   11de0:	b	11b44 <__assert_fail@plt+0xc80>
   11de4:	mov	r2, #5
   11de8:	mov	r0, r5
   11dec:	movw	r1, #31572	; 0x7b54
   11df0:	movt	r1, #1
   11df4:	bl	10d08 <dcgettext@plt>
   11df8:	mov	r6, r0
   11dfc:	mov	r0, r4
   11e00:	bl	160ec <__assert_fail@plt+0x5228>
   11e04:	mov	r3, r0
   11e08:	mov	r2, r6
   11e0c:	mov	r1, r5
   11e10:	mov	r0, r5
   11e14:	bl	10d74 <error@plt>
   11e18:	b	11d68 <__assert_fail@plt+0xea4>
   11e1c:	mov	r2, #5
   11e20:	movw	r1, #31396	; 0x7aa4
   11e24:	movt	r1, #1
   11e28:	mov	r0, r7
   11e2c:	bl	10d08 <dcgettext@plt>
   11e30:	mov	r2, r0
   11e34:	mov	r1, r7
   11e38:	mov	r0, r7
   11e3c:	bl	10d74 <error@plt>
   11e40:	ldrd	r2, [sp]
   11e44:	strd	r2, [r4, #24]
   11e48:	b	11d68 <__assert_fail@plt+0xea4>
   11e4c:	mov	r2, #5
   11e50:	movw	r1, #31348	; 0x7a74
   11e54:	movt	r1, #1
   11e58:	mov	r0, fp
   11e5c:	bl	10d08 <dcgettext@plt>
   11e60:	mov	r2, r0
   11e64:	mov	r1, fp
   11e68:	mov	r0, fp
   11e6c:	bl	10d74 <error@plt>
   11e70:	ldrd	r2, [sp]
   11e74:	strd	r2, [r4, #16]
   11e78:	b	11d68 <__assert_fail@plt+0xea4>
   11e7c:	cmp	sl, #0
   11e80:	bne	11b44 <__assert_fail@plt+0xc80>
   11e84:	b	11d68 <__assert_fail@plt+0xea4>
   11e88:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11e8c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11e90:	movw	r3, #37216	; 0x9160
   11e94:	movt	r3, #2
   11e98:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11e9c:	ldr	ip, [r3]
   11ea0:	ldr	r2, [r3, #4]
   11ea4:	strd	r6, [sp, #8]
   11ea8:	str	r8, [sp, #16]
   11eac:	cmp	ip, #0
   11eb0:	str	lr, [sp, #20]
   11eb4:	beq	11f94 <__assert_fail@plt+0x10d0>
   11eb8:	ldrd	r4, [r2]
   11ebc:	orrs	r1, r4, r5
   11ec0:	mov	r0, r4
   11ec4:	mov	r1, r5
   11ec8:	movne	lr, #0
   11ecc:	bne	11ef4 <__assert_fail@plt+0x1030>
   11ed0:	b	11fd4 <__assert_fail@plt+0x1110>
   11ed4:	ldrd	r6, [r2, #8]!
   11ed8:	orrs	r8, r6, r7
   11edc:	beq	11fd4 <__assert_fail@plt+0x1110>
   11ee0:	cmp	r1, r7
   11ee4:	cmpeq	r0, r6
   11ee8:	bcs	11fc8 <__assert_fail@plt+0x1104>
   11eec:	mov	r0, r6
   11ef0:	mov	r1, r7
   11ef4:	add	lr, lr, #1
   11ef8:	cmp	ip, lr
   11efc:	bne	11ed4 <__assert_fail@plt+0x1010>
   11f00:	ldrd	r6, [r3, #24]
   11f04:	orrs	r2, r6, r7
   11f08:	beq	11f18 <__assert_fail@plt+0x1054>
   11f0c:	ldrd	r0, [r3, #16]
   11f10:	orrs	r2, r0, r1
   11f14:	bne	11f70 <__assert_fail@plt+0x10ac>
   11f18:	cmp	ip, #1
   11f1c:	beq	11f40 <__assert_fail@plt+0x107c>
   11f20:	mov	r0, #0
   11f24:	mov	r1, #0
   11f28:	strd	r0, [r3, #32]
   11f2c:	ldrd	r4, [sp]
   11f30:	ldrd	r6, [sp, #8]
   11f34:	ldr	r8, [sp, #16]
   11f38:	add	sp, sp, #20
   11f3c:	pop	{pc}		; (ldr pc, [sp], #4)
   11f40:	ldr	ip, [r3, #16]
   11f44:	ldr	r2, [r3, #20]
   11f48:	orr	r0, r6, ip
   11f4c:	orr	r1, r7, r2
   11f50:	orrs	r2, r0, r1
   11f54:	strdeq	r4, [r3, #32]
   11f58:	bne	11f20 <__assert_fail@plt+0x105c>
   11f5c:	b	11f2c <__assert_fail@plt+0x1068>
   11f60:	orrs	r2, r0, r1
   11f64:	moveq	r2, r4
   11f68:	moveq	r0, r4
   11f6c:	beq	11fb0 <__assert_fail@plt+0x10ec>
   11f70:	movw	r1, #31668	; 0x7bb4
   11f74:	movt	r1, #1
   11f78:	mov	r2, #5
   11f7c:	mov	r0, #0
   11f80:	bl	10d08 <dcgettext@plt>
   11f84:	mov	r2, r0
   11f88:	mov	r1, #0
   11f8c:	mov	r0, #1
   11f90:	bl	10d74 <error@plt>
   11f94:	ldrd	r0, [r3, #16]
   11f98:	ldrd	r4, [r3, #24]
   11f9c:	orrs	r2, r4, r5
   11fa0:	bne	11f60 <__assert_fail@plt+0x109c>
   11fa4:	orrs	r2, r0, r1
   11fa8:	beq	11fc0 <__assert_fail@plt+0x10fc>
   11fac:	mov	r2, r0
   11fb0:	str	r2, [r3, #12]
   11fb4:	str	r0, [r3, #32]
   11fb8:	str	ip, [r3, #36]	; 0x24
   11fbc:	b	11f2c <__assert_fail@plt+0x1068>
   11fc0:	mov	r0, #8
   11fc4:	b	11fac <__assert_fail@plt+0x10e8>
   11fc8:	movw	r1, #31640	; 0x7b98
   11fcc:	movt	r1, #1
   11fd0:	b	11f78 <__assert_fail@plt+0x10b4>
   11fd4:	movw	r1, #31616	; 0x7b80
   11fd8:	movt	r1, #1
   11fdc:	b	11f78 <__assert_fail@plt+0x10b4>
   11fe0:	movw	ip, #37216	; 0x9160
   11fe4:	movt	ip, #2
   11fe8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11fec:	strd	r6, [sp, #8]
   11ff0:	strd	r8, [sp, #16]
   11ff4:	ldrd	r8, [ip, #32]
   11ff8:	str	lr, [sp, #32]
   11ffc:	mov	lr, #0
   12000:	strd	sl, [sp, #24]
   12004:	sub	sp, sp, #4
   12008:	mov	sl, r0
   1200c:	strb	lr, [r3]
   12010:	mov	fp, r1
   12014:	orrs	lr, r8, r9
   12018:	bne	120b8 <__assert_fail@plt+0x11f4>
   1201c:	ldr	r1, [r2]
   12020:	ldr	lr, [ip]
   12024:	cmp	lr, r1
   12028:	bls	12074 <__assert_fail@plt+0x11b0>
   1202c:	ldr	r0, [ip, #4]
   12030:	lsl	r8, r1, #3
   12034:	ldrd	r4, [r0, r8]
   12038:	add	r0, r0, r8
   1203c:	cmp	fp, r5
   12040:	cmpeq	sl, r4
   12044:	addcs	r1, r1, #1
   12048:	bcs	12064 <__assert_fail@plt+0x11a0>
   1204c:	b	12094 <__assert_fail@plt+0x11d0>
   12050:	ldrd	r4, [r0, #8]!
   12054:	cmp	fp, r5
   12058:	cmpeq	sl, r4
   1205c:	bcc	120d8 <__assert_fail@plt+0x1214>
   12060:	mov	r1, r8
   12064:	cmp	r1, lr
   12068:	add	r8, r1, #1
   1206c:	bne	12050 <__assert_fail@plt+0x118c>
   12070:	str	lr, [r2]
   12074:	ldrd	r0, [ip, #16]
   12078:	orrs	r2, r0, r1
   1207c:	bne	12114 <__assert_fail@plt+0x1250>
   12080:	ldrd	r4, [ip, #24]
   12084:	orrs	r2, r4, r5
   12088:	moveq	r2, #1
   1208c:	strbeq	r2, [r3]
   12090:	bne	120e0 <__assert_fail@plt+0x121c>
   12094:	mov	r0, r4
   12098:	mov	r1, r5
   1209c:	add	sp, sp, #4
   120a0:	ldrd	r4, [sp]
   120a4:	ldrd	r6, [sp, #8]
   120a8:	ldrd	r8, [sp, #16]
   120ac:	ldrd	sl, [sp, #24]
   120b0:	add	sp, sp, #32
   120b4:	pop	{pc}		; (ldr pc, [sp], #4)
   120b8:	adds	r6, r8, r0
   120bc:	mov	r2, r8
   120c0:	mov	r3, r9
   120c4:	adc	r7, r9, r1
   120c8:	bl	1735c <__assert_fail@plt+0x6498>
   120cc:	subs	r4, r6, r2
   120d0:	sbc	r5, r7, r3
   120d4:	b	12094 <__assert_fail@plt+0x11d0>
   120d8:	str	r1, [r2]
   120dc:	b	12094 <__assert_fail@plt+0x11d0>
   120e0:	ldr	r1, [ip, #4]
   120e4:	adds	r8, r4, sl
   120e8:	mov	r2, r4
   120ec:	adc	r9, r5, fp
   120f0:	mov	r3, r5
   120f4:	add	lr, r1, lr, lsl #3
   120f8:	ldrd	r0, [lr, #-8]
   120fc:	subs	r0, sl, r0
   12100:	sbc	r1, fp, r1
   12104:	bl	1735c <__assert_fail@plt+0x6498>
   12108:	subs	r4, r8, r2
   1210c:	sbc	r5, r9, r3
   12110:	b	12094 <__assert_fail@plt+0x11d0>
   12114:	adds	r8, r0, sl
   12118:	mov	r2, r0
   1211c:	adc	r9, r1, fp
   12120:	mov	r3, r1
   12124:	mov	r0, sl
   12128:	mov	r1, fp
   1212c:	bl	1735c <__assert_fail@plt+0x6498>
   12130:	subs	r4, r8, r2
   12134:	sbc	r5, r9, r3
   12138:	b	12094 <__assert_fail@plt+0x11d0>
   1213c:	movw	r3, #37092	; 0x90e4
   12140:	movt	r3, #2
   12144:	cmp	r0, #0
   12148:	mov	r2, #0
   1214c:	moveq	r0, r3
   12150:	movw	r3, #37216	; 0x9160
   12154:	movt	r3, #2
   12158:	strb	r2, [r3, #40]	; 0x28
   1215c:	str	r0, [r3, #44]	; 0x2c
   12160:	bx	lr
   12164:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12168:	movw	r5, #37216	; 0x9160
   1216c:	movt	r5, #2
   12170:	strd	r6, [sp, #8]
   12174:	subs	r6, r0, #0
   12178:	strd	r8, [sp, #16]
   1217c:	str	sl, [sp, #24]
   12180:	str	lr, [sp, #28]
   12184:	beq	1220c <__assert_fail@plt+0x1348>
   12188:	ldr	r4, [r5, #48]	; 0x30
   1218c:	cmp	r4, #0
   12190:	beq	1230c <__assert_fail@plt+0x1448>
   12194:	bl	10de0 <__errno_location@plt>
   12198:	ldr	r3, [r6]
   1219c:	mov	r7, r0
   121a0:	movw	r1, #31748	; 0x7c04
   121a4:	movt	r1, #1
   121a8:	mov	r0, r4
   121ac:	ldr	r4, [r7]
   121b0:	tst	r3, #32
   121b4:	moveq	r4, #0
   121b8:	bl	10c90 <strcmp@plt>
   121bc:	cmp	r0, #0
   121c0:	mov	r0, r6
   121c4:	beq	12304 <__assert_fail@plt+0x1440>
   121c8:	bl	12538 <__assert_fail@plt+0x1674>
   121cc:	cmp	r0, #0
   121d0:	ldrne	r4, [r7]
   121d4:	cmp	r4, #0
   121d8:	beq	1220c <__assert_fail@plt+0x1348>
   121dc:	mov	r1, #3
   121e0:	mov	r0, #0
   121e4:	ldr	r2, [r5, #48]	; 0x30
   121e8:	bl	15940 <__assert_fail@plt+0x4a7c>
   121ec:	mov	r3, r0
   121f0:	mov	r1, r4
   121f4:	movw	r2, #31612	; 0x7b7c
   121f8:	movt	r2, #1
   121fc:	mov	r0, #0
   12200:	bl	10d74 <error@plt>
   12204:	mov	r3, #1
   12208:	str	r3, [r5, #52]	; 0x34
   1220c:	ldr	r3, [r5, #44]	; 0x2c
   12210:	ldr	r4, [r3]
   12214:	add	r3, r3, #4
   12218:	str	r3, [r5, #44]	; 0x2c
   1221c:	cmp	r4, #0
   12220:	beq	122e4 <__assert_fail@plt+0x1420>
   12224:	movw	r7, #31748	; 0x7c04
   12228:	movt	r7, #1
   1222c:	movw	r9, #31752	; 0x7c08
   12230:	movt	r9, #1
   12234:	movw	r8, #37200	; 0x9150
   12238:	movt	r8, #2
   1223c:	b	122a4 <__assert_fail@plt+0x13e0>
   12240:	ldr	r6, [r8]
   12244:	mov	r3, #1
   12248:	strb	r3, [r5, #40]	; 0x28
   1224c:	cmp	r6, #0
   12250:	bne	122d0 <__assert_fail@plt+0x140c>
   12254:	bl	10de0 <__errno_location@plt>
   12258:	ldr	sl, [r0]
   1225c:	mov	r2, r4
   12260:	mov	r1, #3
   12264:	mov	r0, r6
   12268:	bl	15940 <__assert_fail@plt+0x4a7c>
   1226c:	mov	r3, r0
   12270:	movw	r2, #31612	; 0x7b7c
   12274:	movt	r2, #1
   12278:	mov	r0, r6
   1227c:	mov	r1, sl
   12280:	bl	10d74 <error@plt>
   12284:	ldr	r3, [r5, #44]	; 0x2c
   12288:	mov	r2, #1
   1228c:	ldr	r4, [r3]
   12290:	add	r3, r3, #4
   12294:	str	r3, [r5, #44]	; 0x2c
   12298:	str	r2, [r5, #52]	; 0x34
   1229c:	cmp	r4, #0
   122a0:	beq	122e4 <__assert_fail@plt+0x1420>
   122a4:	mov	r1, r7
   122a8:	mov	r0, r4
   122ac:	bl	10c90 <strcmp@plt>
   122b0:	cmp	r0, #0
   122b4:	beq	12240 <__assert_fail@plt+0x137c>
   122b8:	mov	r1, r9
   122bc:	mov	r0, r4
   122c0:	bl	10e88 <fopen64@plt>
   122c4:	mov	r6, r0
   122c8:	cmp	r6, #0
   122cc:	beq	12254 <__assert_fail@plt+0x1390>
   122d0:	mov	r1, #2
   122d4:	mov	r0, r6
   122d8:	str	r4, [r5, #48]	; 0x30
   122dc:	bl	124e8 <__assert_fail@plt+0x1624>
   122e0:	b	122e8 <__assert_fail@plt+0x1424>
   122e4:	mov	r6, #0
   122e8:	mov	r0, r6
   122ec:	ldrd	r4, [sp]
   122f0:	ldrd	r6, [sp, #8]
   122f4:	ldrd	r8, [sp, #16]
   122f8:	ldr	sl, [sp, #24]
   122fc:	add	sp, sp, #28
   12300:	pop	{pc}		; (ldr pc, [sp], #4)
   12304:	bl	10e7c <clearerr_unlocked@plt>
   12308:	b	121d4 <__assert_fail@plt+0x1310>
   1230c:	movw	r3, #31312	; 0x7a50
   12310:	movt	r3, #1
   12314:	movw	r1, #31716	; 0x7be4
   12318:	movt	r1, #1
   1231c:	movw	r0, #31736	; 0x7bf8
   12320:	movt	r0, #1
   12324:	mov	r2, #340	; 0x154
   12328:	bl	10ec4 <__assert_fail@plt>
   1232c:	movw	r3, #37216	; 0x9160
   12330:	movt	r3, #2
   12334:	ldrb	r3, [r3, #40]	; 0x28
   12338:	cmp	r3, #0
   1233c:	bxeq	lr
   12340:	movw	r3, #37200	; 0x9150
   12344:	movt	r3, #2
   12348:	str	r4, [sp, #-8]!
   1234c:	ldr	r0, [r3]
   12350:	str	lr, [sp, #4]
   12354:	bl	12538 <__assert_fail@plt+0x1674>
   12358:	cmp	r0, #0
   1235c:	bne	1236c <__assert_fail@plt+0x14a8>
   12360:	ldr	r4, [sp]
   12364:	add	sp, sp, #4
   12368:	pop	{pc}		; (ldr pc, [sp], #4)
   1236c:	bl	10de0 <__errno_location@plt>
   12370:	movw	r2, #31748	; 0x7c04
   12374:	movt	r2, #1
   12378:	ldr	r1, [r0]
   1237c:	mov	r0, #1
   12380:	bl	10d74 <error@plt>
   12384:	mov	r2, #5
   12388:	movw	r1, #31756	; 0x7c0c
   1238c:	movt	r1, #1
   12390:	mov	r0, #0
   12394:	str	r4, [sp, #-8]!
   12398:	movw	r4, #37204	; 0x9154
   1239c:	movt	r4, #2
   123a0:	str	lr, [sp, #4]
   123a4:	bl	10d08 <dcgettext@plt>
   123a8:	ldr	r1, [r4]
   123ac:	bl	10c78 <fputs_unlocked@plt>
   123b0:	movw	r1, #31820	; 0x7c4c
   123b4:	movt	r1, #1
   123b8:	mov	r2, #5
   123bc:	mov	r0, #0
   123c0:	bl	10d08 <dcgettext@plt>
   123c4:	ldr	r1, [r4]
   123c8:	ldr	r4, [sp]
   123cc:	ldr	lr, [sp, #4]
   123d0:	add	sp, sp, #8
   123d4:	b	10c78 <fputs_unlocked@plt>
   123d8:	movw	r3, #37276	; 0x919c
   123dc:	movt	r3, #2
   123e0:	str	r0, [r3]
   123e4:	bx	lr
   123e8:	movw	r3, #37276	; 0x919c
   123ec:	movt	r3, #2
   123f0:	strb	r0, [r3, #4]
   123f4:	bx	lr
   123f8:	movw	r3, #37204	; 0x9154
   123fc:	movt	r3, #2
   12400:	strd	r4, [sp, #-16]!
   12404:	ldr	r0, [r3]
   12408:	str	r6, [sp, #8]
   1240c:	str	lr, [sp, #12]
   12410:	sub	sp, sp, #8
   12414:	bl	170c4 <__assert_fail@plt+0x6200>
   12418:	cmp	r0, #0
   1241c:	beq	12448 <__assert_fail@plt+0x1584>
   12420:	movw	r4, #37276	; 0x919c
   12424:	movt	r4, #2
   12428:	ldrb	r6, [r4, #4]
   1242c:	bl	10de0 <__errno_location@plt>
   12430:	mov	r5, r0
   12434:	cmp	r6, #0
   12438:	beq	12474 <__assert_fail@plt+0x15b0>
   1243c:	ldr	r3, [r0]
   12440:	cmp	r3, #32
   12444:	bne	12474 <__assert_fail@plt+0x15b0>
   12448:	movw	r3, #37192	; 0x9148
   1244c:	movt	r3, #2
   12450:	ldr	r0, [r3]
   12454:	bl	170c4 <__assert_fail@plt+0x6200>
   12458:	cmp	r0, #0
   1245c:	bne	124bc <__assert_fail@plt+0x15f8>
   12460:	add	sp, sp, #8
   12464:	ldrd	r4, [sp]
   12468:	ldr	r6, [sp, #8]
   1246c:	add	sp, sp, #12
   12470:	pop	{pc}		; (ldr pc, [sp], #4)
   12474:	movw	r1, #31152	; 0x79b0
   12478:	movt	r1, #1
   1247c:	mov	r2, #5
   12480:	mov	r0, #0
   12484:	bl	10d08 <dcgettext@plt>
   12488:	mov	r6, r0
   1248c:	ldr	r0, [r4]
   12490:	cmp	r0, #0
   12494:	beq	124cc <__assert_fail@plt+0x1608>
   12498:	ldr	r4, [r5]
   1249c:	bl	15570 <__assert_fail@plt+0x46ac>
   124a0:	mov	r3, r0
   124a4:	movw	r2, #32204	; 0x7dcc
   124a8:	movt	r2, #1
   124ac:	mov	r0, #0
   124b0:	str	r6, [sp]
   124b4:	mov	r1, r4
   124b8:	bl	10d74 <error@plt>
   124bc:	movw	r3, #37104	; 0x90f0
   124c0:	movt	r3, #2
   124c4:	ldr	r0, [r3]
   124c8:	bl	10cc0 <_exit@plt>
   124cc:	mov	r3, r6
   124d0:	movw	r2, #31612	; 0x7b7c
   124d4:	movt	r2, #1
   124d8:	ldr	r1, [r5]
   124dc:	bl	10d74 <error@plt>
   124e0:	b	124bc <__assert_fail@plt+0x15f8>
   124e4:	b	10c9c <posix_fadvise64@plt>
   124e8:	cmp	r0, #0
   124ec:	bxeq	lr
   124f0:	str	r4, [sp, #-16]!
   124f4:	mov	r4, r1
   124f8:	strd	r6, [sp, #4]
   124fc:	mov	r6, #0
   12500:	mov	r7, #0
   12504:	str	lr, [sp, #12]
   12508:	sub	sp, sp, #16
   1250c:	bl	10e10 <fileno@plt>
   12510:	mov	r2, r6
   12514:	mov	r3, r7
   12518:	strd	r6, [sp]
   1251c:	str	r4, [sp, #8]
   12520:	bl	10c9c <posix_fadvise64@plt>
   12524:	add	sp, sp, #16
   12528:	ldr	r4, [sp]
   1252c:	ldrd	r6, [sp, #4]
   12530:	add	sp, sp, #12
   12534:	pop	{pc}		; (ldr pc, [sp], #4)
   12538:	strd	r4, [sp, #-12]!
   1253c:	mov	r4, r0
   12540:	str	lr, [sp, #8]
   12544:	sub	sp, sp, #12
   12548:	bl	10e10 <fileno@plt>
   1254c:	cmp	r0, #0
   12550:	mov	r0, r4
   12554:	blt	125d8 <__assert_fail@plt+0x1714>
   12558:	bl	10d98 <__freading@plt>
   1255c:	cmp	r0, #0
   12560:	bne	125a4 <__assert_fail@plt+0x16e0>
   12564:	mov	r0, r4
   12568:	bl	125ec <__assert_fail@plt+0x1728>
   1256c:	cmp	r0, #0
   12570:	beq	125d4 <__assert_fail@plt+0x1710>
   12574:	bl	10de0 <__errno_location@plt>
   12578:	mov	r5, r0
   1257c:	mov	r0, r4
   12580:	ldr	r4, [r5]
   12584:	bl	10e28 <fclose@plt>
   12588:	cmp	r4, #0
   1258c:	mvnne	r0, #0
   12590:	strne	r4, [r5]
   12594:	add	sp, sp, #12
   12598:	ldrd	r4, [sp]
   1259c:	add	sp, sp, #8
   125a0:	pop	{pc}		; (ldr pc, [sp], #4)
   125a4:	mov	r0, r4
   125a8:	bl	10e10 <fileno@plt>
   125ac:	mov	r1, #1
   125b0:	mov	r2, #0
   125b4:	mov	r3, #0
   125b8:	str	r1, [sp]
   125bc:	bl	10d44 <lseek64@plt>
   125c0:	mvn	r3, #0
   125c4:	mvn	r2, #0
   125c8:	cmp	r1, r3
   125cc:	cmpeq	r0, r2
   125d0:	bne	12564 <__assert_fail@plt+0x16a0>
   125d4:	mov	r0, r4
   125d8:	add	sp, sp, #12
   125dc:	ldrd	r4, [sp]
   125e0:	ldr	lr, [sp, #8]
   125e4:	add	sp, sp, #12
   125e8:	b	10e28 <fclose@plt>
   125ec:	str	r4, [sp, #-8]!
   125f0:	subs	r4, r0, #0
   125f4:	str	lr, [sp, #4]
   125f8:	sub	sp, sp, #8
   125fc:	beq	12618 <__assert_fail@plt+0x1754>
   12600:	bl	10d98 <__freading@plt>
   12604:	cmp	r0, #0
   12608:	beq	12618 <__assert_fail@plt+0x1754>
   1260c:	ldr	r3, [r4]
   12610:	tst	r3, #256	; 0x100
   12614:	bne	12630 <__assert_fail@plt+0x176c>
   12618:	mov	r0, r4
   1261c:	add	sp, sp, #8
   12620:	ldr	r4, [sp]
   12624:	ldr	lr, [sp, #4]
   12628:	add	sp, sp, #8
   1262c:	b	10ca8 <fflush@plt>
   12630:	mov	r1, #1
   12634:	mov	r2, #0
   12638:	mov	r3, #0
   1263c:	mov	r0, r4
   12640:	str	r1, [sp]
   12644:	bl	126ac <__assert_fail@plt+0x17e8>
   12648:	b	12618 <__assert_fail@plt+0x1754>
   1264c:	strd	r4, [sp, #-12]!
   12650:	mov	r5, r0
   12654:	str	lr, [sp, #8]
   12658:	sub	sp, sp, #12
   1265c:	bl	10de0 <__errno_location@plt>
   12660:	mov	r4, r0
   12664:	mov	r2, #0
   12668:	ldr	r3, [r4]
   1266c:	mov	r0, r5
   12670:	str	r2, [r4]
   12674:	str	r3, [sp]
   12678:	str	r3, [sp, #4]
   1267c:	bl	10cb4 <free@plt>
   12680:	ldr	r3, [r4]
   12684:	add	r2, sp, #8
   12688:	clz	r3, r3
   1268c:	lsr	r3, r3, #5
   12690:	add	r3, r2, r3, lsl #2
   12694:	ldr	r3, [r3, #-8]
   12698:	str	r3, [r4]
   1269c:	add	sp, sp, #12
   126a0:	ldrd	r4, [sp]
   126a4:	add	sp, sp, #8
   126a8:	pop	{pc}		; (ldr pc, [sp], #4)
   126ac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   126b0:	mov	r4, r0
   126b4:	ldr	ip, [r0, #4]
   126b8:	strd	r6, [sp, #8]
   126bc:	str	lr, [sp, #20]
   126c0:	ldr	lr, [r0, #8]
   126c4:	str	r8, [sp, #16]
   126c8:	sub	sp, sp, #8
   126cc:	ldr	r5, [sp, #32]
   126d0:	cmp	lr, ip
   126d4:	beq	126fc <__assert_fail@plt+0x1838>
   126d8:	mov	r0, r4
   126dc:	str	r5, [sp, #32]
   126e0:	add	sp, sp, #8
   126e4:	ldrd	r4, [sp]
   126e8:	ldrd	r6, [sp, #8]
   126ec:	ldr	r8, [sp, #16]
   126f0:	ldr	lr, [sp, #20]
   126f4:	add	sp, sp, #24
   126f8:	b	10e34 <fseeko64@plt>
   126fc:	ldr	ip, [r0, #16]
   12700:	ldr	lr, [r0, #20]
   12704:	cmp	lr, ip
   12708:	bne	126d8 <__assert_fail@plt+0x1814>
   1270c:	ldr	r8, [r0, #36]	; 0x24
   12710:	cmp	r8, #0
   12714:	bne	126d8 <__assert_fail@plt+0x1814>
   12718:	mov	r6, r2
   1271c:	mov	r7, r3
   12720:	bl	10e10 <fileno@plt>
   12724:	mov	r2, r6
   12728:	mov	r3, r7
   1272c:	str	r5, [sp]
   12730:	bl	10d44 <lseek64@plt>
   12734:	mvn	r3, #0
   12738:	mvn	r2, #0
   1273c:	cmp	r1, r3
   12740:	cmpeq	r0, r2
   12744:	beq	12774 <__assert_fail@plt+0x18b0>
   12748:	ldr	r3, [r4]
   1274c:	strd	r0, [r4, #80]	; 0x50
   12750:	bic	r3, r3, #16
   12754:	str	r3, [r4]
   12758:	mov	r0, r8
   1275c:	add	sp, sp, #8
   12760:	ldrd	r4, [sp]
   12764:	ldrd	r6, [sp, #8]
   12768:	ldr	r8, [sp, #16]
   1276c:	add	sp, sp, #20
   12770:	pop	{pc}		; (ldr pc, [sp], #4)
   12774:	mvn	r8, #0
   12778:	b	12758 <__assert_fail@plt+0x1894>
   1277c:	strd	r4, [sp, #-16]!
   12780:	subs	r4, r0, #0
   12784:	str	r6, [sp, #8]
   12788:	str	lr, [sp, #12]
   1278c:	beq	12824 <__assert_fail@plt+0x1960>
   12790:	mov	r1, #47	; 0x2f
   12794:	bl	10e64 <strrchr@plt>
   12798:	subs	r5, r0, #0
   1279c:	beq	127fc <__assert_fail@plt+0x1938>
   127a0:	add	r6, r5, #1
   127a4:	sub	r3, r6, r4
   127a8:	cmp	r3, #6
   127ac:	ble	127fc <__assert_fail@plt+0x1938>
   127b0:	movw	r1, #32268	; 0x7e0c
   127b4:	movt	r1, #1
   127b8:	mov	r2, #7
   127bc:	sub	r0, r5, #6
   127c0:	bl	10ea0 <strncmp@plt>
   127c4:	cmp	r0, #0
   127c8:	bne	127fc <__assert_fail@plt+0x1938>
   127cc:	movw	r1, #32276	; 0x7e14
   127d0:	movt	r1, #1
   127d4:	mov	r2, #3
   127d8:	mov	r0, r6
   127dc:	bl	10ea0 <strncmp@plt>
   127e0:	cmp	r0, #0
   127e4:	movne	r4, r6
   127e8:	bne	127fc <__assert_fail@plt+0x1938>
   127ec:	add	r4, r5, #4
   127f0:	movw	r3, #37176	; 0x9138
   127f4:	movt	r3, #2
   127f8:	str	r4, [r3]
   127fc:	movw	r2, #37284	; 0x91a4
   12800:	movt	r2, #2
   12804:	ldr	r6, [sp, #8]
   12808:	movw	r3, #37180	; 0x913c
   1280c:	movt	r3, #2
   12810:	str	r4, [r2]
   12814:	str	r4, [r3]
   12818:	ldrd	r4, [sp]
   1281c:	add	sp, sp, #12
   12820:	pop	{pc}		; (ldr pc, [sp], #4)
   12824:	movw	r3, #37192	; 0x9148
   12828:	movt	r3, #2
   1282c:	movw	r0, #32212	; 0x7dd4
   12830:	movt	r0, #1
   12834:	ldr	r3, [r3]
   12838:	mov	r2, #55	; 0x37
   1283c:	mov	r1, #1
   12840:	bl	10d38 <fwrite@plt>
   12844:	bl	10eac <abort@plt>
   12848:	mov	r2, #5
   1284c:	strd	r4, [sp, #-16]!
   12850:	mov	r5, r0
   12854:	str	r6, [sp, #8]
   12858:	mov	r6, r1
   1285c:	mov	r1, r0
   12860:	mov	r0, #0
   12864:	str	lr, [sp, #12]
   12868:	bl	10d08 <dcgettext@plt>
   1286c:	cmp	r5, r0
   12870:	mov	r4, r0
   12874:	beq	1288c <__assert_fail@plt+0x19c8>
   12878:	mov	r0, r4
   1287c:	ldrd	r4, [sp]
   12880:	ldr	r6, [sp, #8]
   12884:	add	sp, sp, #12
   12888:	pop	{pc}		; (ldr pc, [sp], #4)
   1288c:	bl	1714c <__assert_fail@plt+0x6288>
   12890:	ldrb	r3, [r0]
   12894:	bic	r3, r3, #32
   12898:	cmp	r3, #85	; 0x55
   1289c:	bne	12904 <__assert_fail@plt+0x1a40>
   128a0:	ldrb	r3, [r0, #1]
   128a4:	bic	r3, r3, #32
   128a8:	cmp	r3, #84	; 0x54
   128ac:	bne	12984 <__assert_fail@plt+0x1ac0>
   128b0:	ldrb	r3, [r0, #2]
   128b4:	bic	r3, r3, #32
   128b8:	cmp	r3, #70	; 0x46
   128bc:	bne	12984 <__assert_fail@plt+0x1ac0>
   128c0:	ldrb	r3, [r0, #3]
   128c4:	cmp	r3, #45	; 0x2d
   128c8:	bne	12984 <__assert_fail@plt+0x1ac0>
   128cc:	ldrb	r3, [r0, #4]
   128d0:	cmp	r3, #56	; 0x38
   128d4:	bne	12984 <__assert_fail@plt+0x1ac0>
   128d8:	ldrb	r3, [r0, #5]
   128dc:	cmp	r3, #0
   128e0:	bne	12984 <__assert_fail@plt+0x1ac0>
   128e4:	ldrb	r2, [r4]
   128e8:	movw	r3, #32368	; 0x7e70
   128ec:	movt	r3, #1
   128f0:	movw	r4, #32380	; 0x7e7c
   128f4:	movt	r4, #1
   128f8:	cmp	r2, #96	; 0x60
   128fc:	movne	r4, r3
   12900:	b	12878 <__assert_fail@plt+0x19b4>
   12904:	cmp	r3, #71	; 0x47
   12908:	bne	12984 <__assert_fail@plt+0x1ac0>
   1290c:	ldrb	r3, [r0, #1]
   12910:	bic	r3, r3, #32
   12914:	cmp	r3, #66	; 0x42
   12918:	bne	12984 <__assert_fail@plt+0x1ac0>
   1291c:	ldrb	r3, [r0, #2]
   12920:	cmp	r3, #49	; 0x31
   12924:	bne	12984 <__assert_fail@plt+0x1ac0>
   12928:	ldrb	r3, [r0, #3]
   1292c:	cmp	r3, #56	; 0x38
   12930:	bne	12984 <__assert_fail@plt+0x1ac0>
   12934:	ldrb	r3, [r0, #4]
   12938:	cmp	r3, #48	; 0x30
   1293c:	bne	12984 <__assert_fail@plt+0x1ac0>
   12940:	ldrb	r3, [r0, #5]
   12944:	cmp	r3, #51	; 0x33
   12948:	bne	12984 <__assert_fail@plt+0x1ac0>
   1294c:	ldrb	r3, [r0, #6]
   12950:	cmp	r3, #48	; 0x30
   12954:	bne	12984 <__assert_fail@plt+0x1ac0>
   12958:	ldrb	r3, [r0, #7]
   1295c:	cmp	r3, #0
   12960:	bne	12984 <__assert_fail@plt+0x1ac0>
   12964:	ldrb	r2, [r4]
   12968:	movw	r3, #32372	; 0x7e74
   1296c:	movt	r3, #1
   12970:	movw	r4, #32376	; 0x7e78
   12974:	movt	r4, #1
   12978:	cmp	r2, #96	; 0x60
   1297c:	movne	r4, r3
   12980:	b	12878 <__assert_fail@plt+0x19b4>
   12984:	movw	r3, #32384	; 0x7e80
   12988:	movt	r3, #1
   1298c:	cmp	r6, #9
   12990:	movw	r4, #32364	; 0x7e6c
   12994:	movt	r4, #1
   12998:	movne	r4, r3
   1299c:	b	12878 <__assert_fail@plt+0x19b4>
   129a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   129a4:	strd	r6, [sp, #8]
   129a8:	strd	r8, [sp, #16]
   129ac:	mov	r8, r3
   129b0:	strd	sl, [sp, #24]
   129b4:	mov	fp, r0
   129b8:	mov	sl, r1
   129bc:	str	lr, [sp, #32]
   129c0:	sub	sp, sp, #140	; 0x8c
   129c4:	ldr	r3, [sp, #180]	; 0xb4
   129c8:	str	r2, [sp, #28]
   129cc:	and	r4, r3, #2
   129d0:	ubfx	r3, r3, #1, #1
   129d4:	str	r3, [sp, #44]	; 0x2c
   129d8:	bl	10d50 <__ctype_get_mb_cur_max@plt>
   129dc:	ldr	r3, [sp, #176]	; 0xb0
   129e0:	str	r0, [sp, #76]	; 0x4c
   129e4:	cmp	r3, #10
   129e8:	ldrls	pc, [pc, r3, lsl #2]
   129ec:	b	14388 <__assert_fail@plt+0x34c4>
   129f0:	andeq	r2, r1, r0, ror lr
   129f4:	andeq	r2, r1, ip, lsl #31
   129f8:	andeq	r3, r1, r8, lsl #10
   129fc:	strdeq	r2, [r1], -r8
   12a00:	andeq	r2, r1, r8, ror sp
   12a04:	strdeq	r2, [r1], -r4
   12a08:	andeq	r2, r1, ip, asr #29
   12a0c:	andeq	r2, r1, r4, lsr pc
   12a10:	andeq	r2, r1, ip, lsl sl
   12a14:	andeq	r2, r1, ip, lsl sl
   12a18:	andeq	r2, r1, ip, lsl sl
   12a1c:	ldr	r3, [sp, #176]	; 0xb0
   12a20:	cmp	r3, #10
   12a24:	beq	12a50 <__assert_fail@plt+0x1b8c>
   12a28:	mov	r1, r3
   12a2c:	movw	r0, #32388	; 0x7e84
   12a30:	movt	r0, #1
   12a34:	bl	12848 <__assert_fail@plt+0x1984>
   12a38:	str	r0, [sp, #188]	; 0xbc
   12a3c:	movw	r0, #32384	; 0x7e80
   12a40:	movt	r0, #1
   12a44:	ldr	r1, [sp, #176]	; 0xb0
   12a48:	bl	12848 <__assert_fail@plt+0x1984>
   12a4c:	str	r0, [sp, #192]	; 0xc0
   12a50:	cmp	r4, #0
   12a54:	movne	r4, #0
   12a58:	beq	14114 <__assert_fail@plt+0x3250>
   12a5c:	mov	r5, #0
   12a60:	ldr	r0, [sp, #192]	; 0xc0
   12a64:	mov	r9, r5
   12a68:	str	r5, [sp, #64]	; 0x40
   12a6c:	bl	10dd4 <strlen@plt>
   12a70:	mov	r3, #1
   12a74:	ldr	r2, [sp, #44]	; 0x2c
   12a78:	cmp	r0, r5
   12a7c:	moveq	r2, r5
   12a80:	str	r3, [sp, #32]
   12a84:	str	r3, [sp, #48]	; 0x30
   12a88:	str	r5, [sp, #52]	; 0x34
   12a8c:	str	r3, [sp, #60]	; 0x3c
   12a90:	ldr	r3, [sp, #180]	; 0xb4
   12a94:	str	r0, [sp, #56]	; 0x38
   12a98:	str	r5, [sp, #68]	; 0x44
   12a9c:	str	r5, [sp, #80]	; 0x50
   12aa0:	str	r5, [sp, #84]	; 0x54
   12aa4:	and	r3, r3, #1
   12aa8:	str	r2, [sp, #88]	; 0x58
   12aac:	str	r3, [sp, #92]	; 0x5c
   12ab0:	ldr	r3, [sp, #180]	; 0xb4
   12ab4:	and	r3, r3, #4
   12ab8:	str	r3, [sp, #96]	; 0x60
   12abc:	ldr	r3, [sp, #192]	; 0xc0
   12ac0:	str	r3, [sp, #72]	; 0x48
   12ac4:	mov	r3, fp
   12ac8:	mov	r7, #0
   12acc:	mov	fp, r9
   12ad0:	mov	r9, r3
   12ad4:	cmn	r8, #1
   12ad8:	beq	130dc <__assert_fail@plt+0x2218>
   12adc:	subs	r6, r8, r7
   12ae0:	movne	r6, #1
   12ae4:	cmp	r6, #0
   12ae8:	beq	130f4 <__assert_fail@plt+0x2230>
   12aec:	ldr	r0, [sp, #28]
   12af0:	ldr	r3, [sp, #48]	; 0x30
   12af4:	cmp	r3, #0
   12af8:	add	r3, r0, r7
   12afc:	str	r3, [sp, #36]	; 0x24
   12b00:	beq	13580 <__assert_fail@plt+0x26bc>
   12b04:	ldr	r2, [sp, #56]	; 0x38
   12b08:	cmp	r2, #0
   12b0c:	beq	13a80 <__assert_fail@plt+0x2bbc>
   12b10:	cmp	r2, #1
   12b14:	mov	r3, r2
   12b18:	movls	r3, #0
   12b1c:	movhi	r3, #1
   12b20:	cmn	r8, #1
   12b24:	add	r5, r7, r2
   12b28:	movne	r3, #0
   12b2c:	cmp	r3, #0
   12b30:	beq	12b3c <__assert_fail@plt+0x1c78>
   12b34:	bl	10dd4 <strlen@plt>
   12b38:	mov	r8, r0
   12b3c:	cmp	r5, r8
   12b40:	bhi	13a80 <__assert_fail@plt+0x2bbc>
   12b44:	ldr	r0, [sp, #36]	; 0x24
   12b48:	ldr	r2, [sp, #56]	; 0x38
   12b4c:	ldr	r1, [sp, #72]	; 0x48
   12b50:	bl	10cf0 <memcmp@plt>
   12b54:	cmp	r0, #0
   12b58:	bne	13a80 <__assert_fail@plt+0x2bbc>
   12b5c:	ldr	r3, [sp, #44]	; 0x2c
   12b60:	cmp	r3, #0
   12b64:	bne	1422c <__assert_fail@plt+0x3368>
   12b68:	ldr	r3, [sp, #36]	; 0x24
   12b6c:	ldrb	r5, [r3]
   12b70:	cmp	r5, #126	; 0x7e
   12b74:	ldrls	pc, [pc, r5, lsl #2]
   12b78:	b	14014 <__assert_fail@plt+0x3150>
   12b7c:	andeq	r3, r1, r0, asr r2
   12b80:	andeq	r4, r1, r4, lsl r0
   12b84:	andeq	r4, r1, r4, lsl r0
   12b88:	andeq	r4, r1, r4, lsl r0
   12b8c:	andeq	r4, r1, r4, lsl r0
   12b90:	andeq	r4, r1, r4, lsl r0
   12b94:	andeq	r4, r1, r4, lsl r0
   12b98:	andeq	r3, r1, r8, lsr #3
   12b9c:	andeq	r3, r1, r0, lsr #3
   12ba0:			; <UNDEFINED> instruction: 0x000131b0
   12ba4:	andeq	r3, r1, r4, lsr r3
   12ba8:	andeq	r3, r1, r4, lsr #6
   12bac:	andeq	r3, r1, ip, asr #32
   12bb0:	andeq	r3, r1, r0, lsl #6
   12bb4:	andeq	r4, r1, r4, lsl r0
   12bb8:	andeq	r4, r1, r4, lsl r0
   12bbc:	andeq	r4, r1, r4, lsl r0
   12bc0:	andeq	r4, r1, r4, lsl r0
   12bc4:	andeq	r4, r1, r4, lsl r0
   12bc8:	andeq	r4, r1, r4, lsl r0
   12bcc:	andeq	r4, r1, r4, lsl r0
   12bd0:	andeq	r4, r1, r4, lsl r0
   12bd4:	andeq	r4, r1, r4, lsl r0
   12bd8:	andeq	r4, r1, r4, lsl r0
   12bdc:	andeq	r4, r1, r4, lsl r0
   12be0:	andeq	r4, r1, r4, lsl r0
   12be4:	andeq	r4, r1, r4, lsl r0
   12be8:	andeq	r4, r1, r4, lsl r0
   12bec:	andeq	r4, r1, r4, lsl r0
   12bf0:	andeq	r4, r1, r4, lsl r0
   12bf4:	andeq	r4, r1, r4, lsl r0
   12bf8:	andeq	r4, r1, r4, lsl r0
   12bfc:	andeq	r3, r1, ip, lsr #7
   12c00:	andeq	r3, r1, r0, lsr #7
   12c04:	andeq	r3, r1, r0, lsr #7
   12c08:	muleq	r1, r4, r3
   12c0c:	andeq	r3, r1, r0, lsr #7
   12c10:	andeq	r3, r1, r8, ror r4
   12c14:	andeq	r3, r1, r0, lsr #7
   12c18:	andeq	r3, r1, r8, ror #9
   12c1c:	andeq	r3, r1, r0, lsr #7
   12c20:	andeq	r3, r1, r0, lsr #7
   12c24:	andeq	r3, r1, r0, lsr #7
   12c28:	andeq	r3, r1, r8, ror r4
   12c2c:	andeq	r3, r1, r8, ror r4
   12c30:	andeq	r3, r1, r8, ror r4
   12c34:	andeq	r3, r1, r8, ror r4
   12c38:	andeq	r3, r1, r8, ror r4
   12c3c:	andeq	r3, r1, r8, ror r4
   12c40:	andeq	r3, r1, r8, ror r4
   12c44:	andeq	r3, r1, r8, ror r4
   12c48:	andeq	r3, r1, r8, ror r4
   12c4c:	andeq	r3, r1, r8, ror r4
   12c50:	andeq	r3, r1, r8, ror r4
   12c54:	andeq	r3, r1, r8, ror r4
   12c58:	andeq	r3, r1, r8, ror r4
   12c5c:	andeq	r3, r1, r8, ror r4
   12c60:	andeq	r3, r1, r8, ror r4
   12c64:	andeq	r3, r1, r8, ror r4
   12c68:	andeq	r3, r1, r0, lsr #7
   12c6c:	andeq	r3, r1, r0, lsr #7
   12c70:	andeq	r3, r1, r0, lsr #7
   12c74:	andeq	r3, r1, r0, lsr #7
   12c78:	muleq	r1, r8, r4
   12c7c:	andeq	r4, r1, r4, lsl r0
   12c80:	andeq	r3, r1, r8, ror r4
   12c84:	andeq	r3, r1, r8, ror r4
   12c88:	andeq	r3, r1, r8, ror r4
   12c8c:	andeq	r3, r1, r8, ror r4
   12c90:	andeq	r3, r1, r8, ror r4
   12c94:	andeq	r3, r1, r8, ror r4
   12c98:	andeq	r3, r1, r8, ror r4
   12c9c:	andeq	r3, r1, r8, ror r4
   12ca0:	andeq	r3, r1, r8, ror r4
   12ca4:	andeq	r3, r1, r8, ror r4
   12ca8:	andeq	r3, r1, r8, ror r4
   12cac:	andeq	r3, r1, r8, ror r4
   12cb0:	andeq	r3, r1, r8, ror r4
   12cb4:	andeq	r3, r1, r8, ror r4
   12cb8:	andeq	r3, r1, r8, ror r4
   12cbc:	andeq	r3, r1, r8, ror r4
   12cc0:	andeq	r3, r1, r8, ror r4
   12cc4:	andeq	r3, r1, r8, ror r4
   12cc8:	andeq	r3, r1, r8, ror r4
   12ccc:	andeq	r3, r1, r8, ror r4
   12cd0:	andeq	r3, r1, r8, ror r4
   12cd4:	andeq	r3, r1, r8, ror r4
   12cd8:	andeq	r3, r1, r8, ror r4
   12cdc:	andeq	r3, r1, r8, ror r4
   12ce0:	andeq	r3, r1, r8, ror r4
   12ce4:	andeq	r3, r1, r8, ror r4
   12ce8:	andeq	r3, r1, r0, lsr #7
   12cec:	andeq	r3, r1, ip, lsr r4
   12cf0:	andeq	r3, r1, r8, ror r4
   12cf4:	andeq	r3, r1, r0, lsr #7
   12cf8:	andeq	r3, r1, r8, ror r4
   12cfc:	andeq	r3, r1, r0, lsr #7
   12d00:	andeq	r3, r1, r8, ror r4
   12d04:	andeq	r3, r1, r8, ror r4
   12d08:	andeq	r3, r1, r8, ror r4
   12d0c:	andeq	r3, r1, r8, ror r4
   12d10:	andeq	r3, r1, r8, ror r4
   12d14:	andeq	r3, r1, r8, ror r4
   12d18:	andeq	r3, r1, r8, ror r4
   12d1c:	andeq	r3, r1, r8, ror r4
   12d20:	andeq	r3, r1, r8, ror r4
   12d24:	andeq	r3, r1, r8, ror r4
   12d28:	andeq	r3, r1, r8, ror r4
   12d2c:	andeq	r3, r1, r8, ror r4
   12d30:	andeq	r3, r1, r8, ror r4
   12d34:	andeq	r3, r1, r8, ror r4
   12d38:	andeq	r3, r1, r8, ror r4
   12d3c:	andeq	r3, r1, r8, ror r4
   12d40:	andeq	r3, r1, r8, ror r4
   12d44:	andeq	r3, r1, r8, ror r4
   12d48:	andeq	r3, r1, r8, ror r4
   12d4c:	andeq	r3, r1, r8, ror r4
   12d50:	andeq	r3, r1, r8, ror r4
   12d54:	andeq	r3, r1, r8, ror r4
   12d58:	andeq	r3, r1, r8, ror r4
   12d5c:	andeq	r3, r1, r8, ror r4
   12d60:	andeq	r3, r1, r8, ror r4
   12d64:	andeq	r3, r1, r8, ror r4
   12d68:	andeq	r3, r1, r8, asr #6
   12d6c:	andeq	r3, r1, r0, lsr #7
   12d70:	andeq	r3, r1, r8, asr #6
   12d74:	muleq	r1, r4, r3
   12d78:	ldr	r3, [sp, #180]	; 0xb4
   12d7c:	cmp	r4, #0
   12d80:	and	r3, r3, #1
   12d84:	str	r3, [sp, #92]	; 0x5c
   12d88:	ldr	r3, [sp, #180]	; 0xb4
   12d8c:	and	r3, r3, #4
   12d90:	str	r3, [sp, #96]	; 0x60
   12d94:	moveq	r3, #1
   12d98:	streq	r3, [sp, #60]	; 0x3c
   12d9c:	beq	1352c <__assert_fail@plt+0x2668>
   12da0:	mov	r3, #0
   12da4:	mov	r2, #1
   12da8:	mov	r4, r3
   12dac:	mov	r9, r3
   12db0:	str	r2, [sp, #32]
   12db4:	str	r2, [sp, #44]	; 0x2c
   12db8:	str	r3, [sp, #48]	; 0x30
   12dbc:	str	r2, [sp, #52]	; 0x34
   12dc0:	str	r2, [sp, #56]	; 0x38
   12dc4:	str	r3, [sp, #60]	; 0x3c
   12dc8:	str	r2, [sp, #64]	; 0x40
   12dcc:	str	r2, [sp, #68]	; 0x44
   12dd0:	str	r3, [sp, #80]	; 0x50
   12dd4:	str	r3, [sp, #84]	; 0x54
   12dd8:	str	r3, [sp, #88]	; 0x58
   12ddc:	movw	r3, #32384	; 0x7e80
   12de0:	movt	r3, #1
   12de4:	str	r3, [sp, #72]	; 0x48
   12de8:	mov	r3, #2
   12dec:	str	r3, [sp, #176]	; 0xb0
   12df0:	b	12ac4 <__assert_fail@plt+0x1c00>
   12df4:	ldr	r3, [sp, #180]	; 0xb4
   12df8:	cmp	r4, #0
   12dfc:	and	r3, r3, #1
   12e00:	str	r3, [sp, #92]	; 0x5c
   12e04:	ldr	r3, [sp, #180]	; 0xb4
   12e08:	and	r3, r3, #4
   12e0c:	str	r3, [sp, #96]	; 0x60
   12e10:	bne	141e4 <__assert_fail@plt+0x3320>
   12e14:	cmp	sl, #0
   12e18:	beq	13f90 <__assert_fail@plt+0x30cc>
   12e1c:	mov	r3, #34	; 0x22
   12e20:	mov	r2, r4
   12e24:	mov	r1, #1
   12e28:	mov	r9, r2
   12e2c:	strb	r3, [fp]
   12e30:	movw	r3, #32364	; 0x7e6c
   12e34:	movt	r3, #1
   12e38:	mov	r4, r1
   12e3c:	str	r1, [sp, #32]
   12e40:	str	r2, [sp, #44]	; 0x2c
   12e44:	str	r1, [sp, #48]	; 0x30
   12e48:	str	r2, [sp, #52]	; 0x34
   12e4c:	str	r1, [sp, #56]	; 0x38
   12e50:	str	r1, [sp, #60]	; 0x3c
   12e54:	str	r2, [sp, #64]	; 0x40
   12e58:	str	r2, [sp, #68]	; 0x44
   12e5c:	str	r3, [sp, #72]	; 0x48
   12e60:	str	r2, [sp, #80]	; 0x50
   12e64:	str	r2, [sp, #84]	; 0x54
   12e68:	str	r2, [sp, #88]	; 0x58
   12e6c:	b	12ac4 <__assert_fail@plt+0x1c00>
   12e70:	mov	r3, #0
   12e74:	mov	r2, #1
   12e78:	mov	r9, r3
   12e7c:	str	r2, [sp, #32]
   12e80:	str	r3, [sp, #44]	; 0x2c
   12e84:	str	r3, [sp, #48]	; 0x30
   12e88:	str	r3, [sp, #52]	; 0x34
   12e8c:	str	r3, [sp, #60]	; 0x3c
   12e90:	strd	r2, [sp, #64]	; 0x40
   12e94:	str	r3, [sp, #72]	; 0x48
   12e98:	str	r3, [sp, #80]	; 0x50
   12e9c:	str	r3, [sp, #88]	; 0x58
   12ea0:	ldr	r3, [sp, #180]	; 0xb4
   12ea4:	and	r3, r3, r2
   12ea8:	str	r3, [sp, #92]	; 0x5c
   12eac:	ldr	r3, [sp, #180]	; 0xb4
   12eb0:	and	r3, r3, #4
   12eb4:	str	r3, [sp, #96]	; 0x60
   12eb8:	ldr	r3, [sp, #176]	; 0xb0
   12ebc:	mov	r4, r3
   12ec0:	str	r3, [sp, #56]	; 0x38
   12ec4:	str	r3, [sp, #84]	; 0x54
   12ec8:	b	12ac4 <__assert_fail@plt+0x1c00>
   12ecc:	mov	r3, #1
   12ed0:	mov	r4, #0
   12ed4:	mov	r9, r4
   12ed8:	str	r3, [sp, #32]
   12edc:	str	r3, [sp, #44]	; 0x2c
   12ee0:	str	r3, [sp, #48]	; 0x30
   12ee4:	str	r4, [sp, #52]	; 0x34
   12ee8:	str	r3, [sp, #56]	; 0x38
   12eec:	str	r3, [sp, #60]	; 0x3c
   12ef0:	str	r3, [sp, #88]	; 0x58
   12ef4:	movw	r3, #32364	; 0x7e6c
   12ef8:	movt	r3, #1
   12efc:	str	r4, [sp, #64]	; 0x40
   12f00:	str	r4, [sp, #68]	; 0x44
   12f04:	str	r3, [sp, #72]	; 0x48
   12f08:	ldr	r3, [sp, #180]	; 0xb4
   12f0c:	str	r4, [sp, #80]	; 0x50
   12f10:	str	r4, [sp, #84]	; 0x54
   12f14:	and	r3, r3, #1
   12f18:	str	r3, [sp, #92]	; 0x5c
   12f1c:	ldr	r3, [sp, #180]	; 0xb4
   12f20:	and	r3, r3, #4
   12f24:	str	r3, [sp, #96]	; 0x60
   12f28:	mov	r3, #5
   12f2c:	str	r3, [sp, #176]	; 0xb0
   12f30:	b	12ac4 <__assert_fail@plt+0x1c00>
   12f34:	mov	r3, #1
   12f38:	mov	r4, #0
   12f3c:	mov	r9, r4
   12f40:	str	r3, [sp, #32]
   12f44:	str	r4, [sp, #44]	; 0x2c
   12f48:	str	r3, [sp, #48]	; 0x30
   12f4c:	str	r3, [sp, #60]	; 0x3c
   12f50:	ldr	r3, [sp, #180]	; 0xb4
   12f54:	str	r4, [sp, #52]	; 0x34
   12f58:	str	r4, [sp, #56]	; 0x38
   12f5c:	str	r4, [sp, #64]	; 0x40
   12f60:	str	r4, [sp, #68]	; 0x44
   12f64:	and	r3, r3, #1
   12f68:	str	r4, [sp, #72]	; 0x48
   12f6c:	str	r4, [sp, #80]	; 0x50
   12f70:	str	r4, [sp, #84]	; 0x54
   12f74:	str	r3, [sp, #92]	; 0x5c
   12f78:	ldr	r3, [sp, #180]	; 0xb4
   12f7c:	str	r4, [sp, #88]	; 0x58
   12f80:	and	r3, r3, #4
   12f84:	str	r3, [sp, #96]	; 0x60
   12f88:	b	12ac4 <__assert_fail@plt+0x1c00>
   12f8c:	mov	r3, #0
   12f90:	mov	r2, #1
   12f94:	ldr	r1, [sp, #176]	; 0xb0
   12f98:	mov	r4, r3
   12f9c:	mov	r9, r3
   12fa0:	movw	r3, #32384	; 0x7e80
   12fa4:	movt	r3, #1
   12fa8:	str	r2, [sp, #32]
   12fac:	str	r2, [sp, #44]	; 0x2c
   12fb0:	str	r4, [sp, #48]	; 0x30
   12fb4:	strd	r2, [sp, #68]	; 0x44
   12fb8:	ldr	r3, [sp, #180]	; 0xb4
   12fbc:	str	r2, [sp, #52]	; 0x34
   12fc0:	str	r1, [sp, #56]	; 0x38
   12fc4:	str	r4, [sp, #60]	; 0x3c
   12fc8:	str	r2, [sp, #64]	; 0x40
   12fcc:	and	r3, r3, r2
   12fd0:	str	r4, [sp, #80]	; 0x50
   12fd4:	str	r4, [sp, #84]	; 0x54
   12fd8:	str	r4, [sp, #88]	; 0x58
   12fdc:	str	r3, [sp, #92]	; 0x5c
   12fe0:	ldr	r3, [sp, #180]	; 0xb4
   12fe4:	and	r3, r3, #4
   12fe8:	str	r3, [sp, #96]	; 0x60
   12fec:	mov	r3, #2
   12ff0:	str	r3, [sp, #176]	; 0xb0
   12ff4:	b	12ac4 <__assert_fail@plt+0x1c00>
   12ff8:	mov	r3, #1
   12ffc:	mov	r2, #0
   13000:	mov	r4, r2
   13004:	mov	r9, r2
   13008:	str	r3, [sp, #32]
   1300c:	str	r3, [sp, #44]	; 0x2c
   13010:	str	r2, [sp, #48]	; 0x30
   13014:	str	r3, [sp, #52]	; 0x34
   13018:	str	r3, [sp, #56]	; 0x38
   1301c:	str	r3, [sp, #60]	; 0x3c
   13020:	str	r3, [sp, #64]	; 0x40
   13024:	str	r3, [sp, #68]	; 0x44
   13028:	str	r3, [sp, #88]	; 0x58
   1302c:	movw	r3, #32384	; 0x7e80
   13030:	movt	r3, #1
   13034:	str	r3, [sp, #72]	; 0x48
   13038:	ldr	r3, [sp, #180]	; 0xb4
   1303c:	str	r2, [sp, #80]	; 0x50
   13040:	str	r2, [sp, #84]	; 0x54
   13044:	and	r3, r3, #1
   13048:	b	12fdc <__assert_fail@plt+0x2118>
   1304c:	mov	r5, #102	; 0x66
   13050:	mov	r6, #0
   13054:	ldr	r3, [sp, #44]	; 0x2c
   13058:	cmp	r3, #0
   1305c:	bne	13f0c <__assert_fail@plt+0x3048>
   13060:	ldr	r2, [sp, #52]	; 0x34
   13064:	eor	r3, fp, #1
   13068:	ands	r3, r2, r3
   1306c:	beq	130a4 <__assert_fail@plt+0x21e0>
   13070:	cmp	sl, r4
   13074:	mov	fp, r3
   13078:	movhi	r2, #39	; 0x27
   1307c:	strbhi	r2, [r9, r4]
   13080:	add	r2, r4, #1
   13084:	cmp	sl, r2
   13088:	movhi	r1, #36	; 0x24
   1308c:	strbhi	r1, [r9, r2]
   13090:	add	r2, r4, #2
   13094:	add	r4, r4, #3
   13098:	cmp	sl, r2
   1309c:	movhi	r1, #39	; 0x27
   130a0:	strbhi	r1, [r9, r2]
   130a4:	cmp	sl, r4
   130a8:	add	r7, r7, #1
   130ac:	movhi	r3, #92	; 0x5c
   130b0:	strbhi	r3, [r9, r4]
   130b4:	add	r4, r4, #1
   130b8:	cmp	r4, sl
   130bc:	ldr	r3, [sp, #32]
   130c0:	strbcc	r5, [r9, r4]
   130c4:	cmp	r6, #0
   130c8:	add	r4, r4, #1
   130cc:	moveq	r3, #0
   130d0:	cmn	r8, #1
   130d4:	str	r3, [sp, #32]
   130d8:	bne	12adc <__assert_fail@plt+0x1c18>
   130dc:	ldr	r3, [sp, #28]
   130e0:	ldrb	r6, [r3, r7]
   130e4:	adds	r6, r6, #0
   130e8:	movne	r6, #1
   130ec:	cmp	r6, #0
   130f0:	bne	12aec <__assert_fail@plt+0x1c28>
   130f4:	mov	r3, r9
   130f8:	mov	r9, fp
   130fc:	mov	fp, r3
   13100:	ldr	r3, [sp, #68]	; 0x44
   13104:	cmp	r4, #0
   13108:	movne	r3, #0
   1310c:	cmp	r3, #0
   13110:	bne	14304 <__assert_fail@plt+0x3440>
   13114:	ldr	r3, [sp, #44]	; 0x2c
   13118:	ldr	r2, [sp, #52]	; 0x34
   1311c:	eor	r3, r3, #1
   13120:	ands	r2, r3, r2
   13124:	beq	1423c <__assert_fail@plt+0x3378>
   13128:	ldr	r3, [sp, #80]	; 0x50
   1312c:	cmp	r3, #0
   13130:	beq	14240 <__assert_fail@plt+0x337c>
   13134:	ldr	r3, [sp, #32]
   13138:	cmp	r3, #0
   1313c:	bne	142b4 <__assert_fail@plt+0x33f0>
   13140:	ldr	r3, [sp, #84]	; 0x54
   13144:	adds	r3, r3, #0
   13148:	movne	r3, #1
   1314c:	cmp	sl, #0
   13150:	movne	r3, #0
   13154:	cmp	r3, #0
   13158:	ldreq	r2, [sp, #80]	; 0x50
   1315c:	beq	14240 <__assert_fail@plt+0x337c>
   13160:	ldr	r2, [sp, #84]	; 0x54
   13164:	mov	sl, r2
   13168:	mov	r0, #0
   1316c:	mov	r4, #1
   13170:	mov	r1, #39	; 0x27
   13174:	str	r0, [sp, #44]	; 0x2c
   13178:	strb	r1, [fp]
   1317c:	str	r0, [sp, #48]	; 0x30
   13180:	str	r4, [sp, #52]	; 0x34
   13184:	str	r4, [sp, #56]	; 0x38
   13188:	str	r4, [sp, #64]	; 0x40
   1318c:	str	r0, [sp, #68]	; 0x44
   13190:	str	r3, [sp, #80]	; 0x50
   13194:	str	r2, [sp, #84]	; 0x54
   13198:	str	r0, [sp, #88]	; 0x58
   1319c:	b	12ddc <__assert_fail@plt+0x1f18>
   131a0:	mov	r5, #98	; 0x62
   131a4:	b	13050 <__assert_fail@plt+0x218c>
   131a8:	mov	r5, #97	; 0x61
   131ac:	b	13050 <__assert_fail@plt+0x218c>
   131b0:	ldr	r3, [sp, #48]	; 0x30
   131b4:	str	r3, [sp, #40]	; 0x28
   131b8:	mov	r3, #116	; 0x74
   131bc:	ldr	r2, [sp, #68]	; 0x44
   131c0:	cmp	r2, #0
   131c4:	bne	133c0 <__assert_fail@plt+0x24fc>
   131c8:	ldr	r2, [sp, #60]	; 0x3c
   131cc:	cmp	r2, #0
   131d0:	bne	1331c <__assert_fail@plt+0x2458>
   131d4:	ldr	r3, [sp, #44]	; 0x2c
   131d8:	mov	r6, #0
   131dc:	cmp	r3, #0
   131e0:	beq	1338c <__assert_fail@plt+0x24c8>
   131e4:	mov	r3, fp
   131e8:	ldr	r2, [sp, #184]	; 0xb8
   131ec:	cmp	r2, #0
   131f0:	beq	13210 <__assert_fail@plt+0x234c>
   131f4:	ubfx	r1, r5, #5, #8
   131f8:	mov	r0, r2
   131fc:	and	r2, r5, #31
   13200:	ldr	r1, [r0, r1, lsl #2]
   13204:	lsr	r2, r1, r2
   13208:	tst	r2, #1
   1320c:	bne	13054 <__assert_fail@plt+0x2190>
   13210:	ldr	r2, [sp, #40]	; 0x28
   13214:	cmp	r2, #0
   13218:	addeq	r7, r7, #1
   1321c:	bne	13054 <__assert_fail@plt+0x2190>
   13220:	cmp	r3, #0
   13224:	beq	130b8 <__assert_fail@plt+0x21f4>
   13228:	cmp	sl, r4
   1322c:	mov	fp, #0
   13230:	movhi	r3, #39	; 0x27
   13234:	strbhi	r3, [r9, r4]
   13238:	add	r3, r4, #1
   1323c:	add	r4, r4, #2
   13240:	cmp	sl, r3
   13244:	movhi	r2, #39	; 0x27
   13248:	strbhi	r2, [r9, r3]
   1324c:	b	130b8 <__assert_fail@plt+0x21f4>
   13250:	ldr	r3, [sp, #48]	; 0x30
   13254:	str	r3, [sp, #40]	; 0x28
   13258:	eor	r3, fp, #1
   1325c:	ldr	r2, [sp, #52]	; 0x34
   13260:	ands	r2, r2, r3
   13264:	beq	13f24 <__assert_fail@plt+0x3060>
   13268:	cmp	sl, r4
   1326c:	movhi	r3, #39	; 0x27
   13270:	strbhi	r3, [r9, r4]
   13274:	add	r3, r4, #1
   13278:	cmp	sl, r3
   1327c:	movhi	r1, #36	; 0x24
   13280:	strbhi	r1, [r9, r3]
   13284:	add	r3, r4, #2
   13288:	cmp	sl, r3
   1328c:	movhi	r1, #39	; 0x27
   13290:	strbhi	r1, [r9, r3]
   13294:	add	r3, r4, #3
   13298:	cmp	sl, r3
   1329c:	bls	13f70 <__assert_fail@plt+0x30ac>
   132a0:	mov	r4, r3
   132a4:	mov	r3, #92	; 0x5c
   132a8:	mov	fp, r2
   132ac:	mov	r2, r4
   132b0:	strb	r3, [r9, r4]
   132b4:	ldr	r3, [sp, #176]	; 0xb0
   132b8:	add	r4, r4, #1
   132bc:	cmp	r3, #2
   132c0:	beq	13fd8 <__assert_fail@plt+0x3114>
   132c4:	add	r3, r7, #1
   132c8:	cmp	r3, r8
   132cc:	bcs	132e4 <__assert_fail@plt+0x2420>
   132d0:	ldr	r1, [sp, #28]
   132d4:	ldrb	r3, [r1, r3]
   132d8:	sub	r3, r3, #48	; 0x30
   132dc:	cmp	r3, #9
   132e0:	bls	13fe8 <__assert_fail@plt+0x3124>
   132e4:	mov	r3, #0
   132e8:	mov	r5, #48	; 0x30
   132ec:	ldr	r6, [sp, #64]	; 0x40
   132f0:	cmp	r6, #0
   132f4:	beq	131e8 <__assert_fail@plt+0x2324>
   132f8:	mov	r6, #0
   132fc:	b	13210 <__assert_fail@plt+0x234c>
   13300:	ldr	r3, [sp, #48]	; 0x30
   13304:	str	r3, [sp, #40]	; 0x28
   13308:	ldr	r2, [sp, #60]	; 0x3c
   1330c:	mov	r5, #13
   13310:	mov	r3, #114	; 0x72
   13314:	cmp	r2, #0
   13318:	beq	131d4 <__assert_fail@plt+0x2310>
   1331c:	mov	r5, r3
   13320:	b	13050 <__assert_fail@plt+0x218c>
   13324:	ldr	r3, [sp, #48]	; 0x30
   13328:	str	r3, [sp, #40]	; 0x28
   1332c:	mov	r3, #118	; 0x76
   13330:	b	131c8 <__assert_fail@plt+0x2304>
   13334:	ldr	r3, [sp, #48]	; 0x30
   13338:	str	r3, [sp, #40]	; 0x28
   1333c:	mov	r5, #10
   13340:	mov	r3, #110	; 0x6e
   13344:	b	131c8 <__assert_fail@plt+0x2304>
   13348:	ldr	r3, [sp, #48]	; 0x30
   1334c:	cmn	r8, #1
   13350:	str	r3, [sp, #40]	; 0x28
   13354:	beq	1379c <__assert_fail@plt+0x28d8>
   13358:	subs	r3, r8, #1
   1335c:	movne	r3, #1
   13360:	cmp	r3, #0
   13364:	bne	13370 <__assert_fail@plt+0x24ac>
   13368:	cmp	r7, #0
   1336c:	beq	133b4 <__assert_fail@plt+0x24f0>
   13370:	mov	r6, #0
   13374:	ldr	r3, [sp, #64]	; 0x40
   13378:	cmp	r3, #0
   1337c:	beq	131e4 <__assert_fail@plt+0x2320>
   13380:	ldr	r3, [sp, #44]	; 0x2c
   13384:	cmp	r3, #0
   13388:	bne	131e4 <__assert_fail@plt+0x2320>
   1338c:	mov	r3, fp
   13390:	b	13210 <__assert_fail@plt+0x234c>
   13394:	ldr	r3, [sp, #48]	; 0x30
   13398:	str	r3, [sp, #40]	; 0x28
   1339c:	b	13368 <__assert_fail@plt+0x24a4>
   133a0:	ldr	r3, [sp, #48]	; 0x30
   133a4:	str	r3, [sp, #40]	; 0x28
   133a8:	b	13370 <__assert_fail@plt+0x24ac>
   133ac:	ldr	r6, [sp, #48]	; 0x30
   133b0:	str	r6, [sp, #40]	; 0x28
   133b4:	ldr	r3, [sp, #68]	; 0x44
   133b8:	cmp	r3, #0
   133bc:	beq	13374 <__assert_fail@plt+0x24b0>
   133c0:	mov	r3, #2
   133c4:	mov	fp, r9
   133c8:	str	r3, [sp, #176]	; 0xb0
   133cc:	ldr	r3, [sp, #60]	; 0x3c
   133d0:	cmp	r3, #0
   133d4:	ldr	r3, [sp, #176]	; 0xb0
   133d8:	movne	r3, #4
   133dc:	str	r3, [sp, #176]	; 0xb0
   133e0:	mov	lr, #0
   133e4:	mov	r0, fp
   133e8:	ldr	r2, [sp, #28]
   133ec:	ldr	r3, [sp, #180]	; 0xb4
   133f0:	ldr	r1, [sp, #188]	; 0xbc
   133f4:	bic	ip, r3, #2
   133f8:	ldr	r3, [sp, #176]	; 0xb0
   133fc:	stm	sp, {r3, ip, lr}
   13400:	mov	r3, r8
   13404:	ldr	ip, [sp, #192]	; 0xc0
   13408:	str	r1, [sp, #12]
   1340c:	mov	r1, sl
   13410:	str	ip, [sp, #16]
   13414:	bl	129a0 <__assert_fail@plt+0x1adc>
   13418:	mov	r4, r0
   1341c:	mov	r0, r4
   13420:	add	sp, sp, #140	; 0x8c
   13424:	ldrd	r4, [sp]
   13428:	ldrd	r6, [sp, #8]
   1342c:	ldrd	r8, [sp, #16]
   13430:	ldrd	sl, [sp, #24]
   13434:	add	sp, sp, #32
   13438:	pop	{pc}		; (ldr pc, [sp], #4)
   1343c:	ldr	r3, [sp, #48]	; 0x30
   13440:	str	r3, [sp, #40]	; 0x28
   13444:	ldr	r3, [sp, #176]	; 0xb0
   13448:	cmp	r3, #2
   1344c:	beq	137c4 <__assert_fail@plt+0x2900>
   13450:	ldr	r3, [sp, #88]	; 0x58
   13454:	cmp	r3, #0
   13458:	moveq	r5, #92	; 0x5c
   1345c:	moveq	r3, r5
   13460:	beq	131c8 <__assert_fail@plt+0x2304>
   13464:	add	r7, r7, #1
   13468:	mov	r3, fp
   1346c:	mov	r6, #0
   13470:	mov	r5, #92	; 0x5c
   13474:	b	13220 <__assert_fail@plt+0x235c>
   13478:	ldr	r3, [sp, #64]	; 0x40
   1347c:	cmp	r3, #0
   13480:	bne	142f8 <__assert_fail@plt+0x3434>
   13484:	ldr	r2, [sp, #48]	; 0x30
   13488:	mov	r3, fp
   1348c:	mov	r6, r2
   13490:	str	r2, [sp, #40]	; 0x28
   13494:	b	131e8 <__assert_fail@plt+0x2324>
   13498:	ldr	r3, [sp, #176]	; 0xb0
   1349c:	cmp	r3, #2
   134a0:	beq	14234 <__assert_fail@plt+0x3370>
   134a4:	cmp	r3, #5
   134a8:	ldr	r3, [sp, #48]	; 0x30
   134ac:	str	r3, [sp, #40]	; 0x28
   134b0:	bne	134dc <__assert_fail@plt+0x2618>
   134b4:	ldr	r3, [sp, #96]	; 0x60
   134b8:	cmp	r3, #0
   134bc:	beq	13f38 <__assert_fail@plt+0x3074>
   134c0:	add	r3, r7, #2
   134c4:	cmp	r3, r8
   134c8:	bcs	134dc <__assert_fail@plt+0x2618>
   134cc:	ldr	r2, [sp, #36]	; 0x24
   134d0:	ldrb	r5, [r2, #1]
   134d4:	cmp	r5, #63	; 0x3f
   134d8:	beq	14020 <__assert_fail@plt+0x315c>
   134dc:	mov	r6, #0
   134e0:	mov	r5, #63	; 0x3f
   134e4:	b	13374 <__assert_fail@plt+0x24b0>
   134e8:	ldr	r3, [sp, #176]	; 0xb0
   134ec:	cmp	r3, #2
   134f0:	ldr	r3, [sp, #48]	; 0x30
   134f4:	beq	13cdc <__assert_fail@plt+0x2e18>
   134f8:	mov	r5, #39	; 0x27
   134fc:	str	r3, [sp, #40]	; 0x28
   13500:	str	r6, [sp, #80]	; 0x50
   13504:	b	13374 <__assert_fail@plt+0x24b0>
   13508:	ldr	r3, [sp, #180]	; 0xb4
   1350c:	cmp	r4, #0
   13510:	and	r3, r3, #1
   13514:	str	r3, [sp, #92]	; 0x5c
   13518:	ldr	r3, [sp, #180]	; 0xb4
   1351c:	and	r3, r3, #4
   13520:	str	r3, [sp, #96]	; 0x60
   13524:	bne	14344 <__assert_fail@plt+0x3480>
   13528:	str	r4, [sp, #60]	; 0x3c
   1352c:	cmp	sl, #0
   13530:	bne	14328 <__assert_fail@plt+0x3464>
   13534:	mov	r3, #1
   13538:	movw	r2, #32384	; 0x7e80
   1353c:	movt	r2, #1
   13540:	mov	r4, r3
   13544:	mov	r3, #2
   13548:	mov	r9, sl
   1354c:	str	r4, [sp, #32]
   13550:	str	sl, [sp, #44]	; 0x2c
   13554:	str	sl, [sp, #48]	; 0x30
   13558:	str	r4, [sp, #52]	; 0x34
   1355c:	str	r4, [sp, #56]	; 0x38
   13560:	str	r4, [sp, #64]	; 0x40
   13564:	str	sl, [sp, #68]	; 0x44
   13568:	str	r2, [sp, #72]	; 0x48
   1356c:	str	sl, [sp, #80]	; 0x50
   13570:	str	sl, [sp, #84]	; 0x54
   13574:	str	sl, [sp, #88]	; 0x58
   13578:	str	r3, [sp, #176]	; 0xb0
   1357c:	b	12ac4 <__assert_fail@plt+0x1c00>
   13580:	ldrb	r5, [r0, r7]
   13584:	cmp	r5, #126	; 0x7e
   13588:	ldrls	pc, [pc, r5, lsl #2]
   1358c:	b	138f0 <__assert_fail@plt+0x2a2c>
   13590:			; <UNDEFINED> instruction: 0x000138bc
   13594:	strdeq	r3, [r1], -r0
   13598:	strdeq	r3, [r1], -r0
   1359c:	strdeq	r3, [r1], -r0
   135a0:	strdeq	r3, [r1], -r0
   135a4:	strdeq	r3, [r1], -r0
   135a8:	strdeq	r3, [r1], -r0
   135ac:	andeq	r3, r1, ip, lsr #17
   135b0:	muleq	r1, ip, r8
   135b4:	andeq	r3, r1, r0, lsr #16
   135b8:	andeq	r3, r1, ip, lsl #17
   135bc:	andeq	r3, r1, r0, lsl #16
   135c0:	andeq	r3, r1, r0, ror #17
   135c4:	andeq	r3, r1, ip, ror #16
   135c8:	strdeq	r3, [r1], -r0
   135cc:	strdeq	r3, [r1], -r0
   135d0:	strdeq	r3, [r1], -r0
   135d4:	strdeq	r3, [r1], -r0
   135d8:	strdeq	r3, [r1], -r0
   135dc:	strdeq	r3, [r1], -r0
   135e0:	strdeq	r3, [r1], -r0
   135e4:	strdeq	r3, [r1], -r0
   135e8:	strdeq	r3, [r1], -r0
   135ec:	strdeq	r3, [r1], -r0
   135f0:	strdeq	r3, [r1], -r0
   135f4:	strdeq	r3, [r1], -r0
   135f8:	strdeq	r3, [r1], -r0
   135fc:	strdeq	r3, [r1], -r0
   13600:	strdeq	r3, [r1], -r0
   13604:	strdeq	r3, [r1], -r0
   13608:	strdeq	r3, [r1], -r0
   1360c:	strdeq	r3, [r1], -r0
   13610:	andeq	r3, r1, r4, lsl r8
   13614:	andeq	r3, r1, ip, ror r8
   13618:	andeq	r3, r1, ip, ror r8
   1361c:	strdeq	r3, [r1], -r4
   13620:	andeq	r3, r1, ip, ror r8
   13624:	andeq	r3, r1, r8, ror #15
   13628:	andeq	r3, r1, ip, ror r8
   1362c:	andeq	r3, r1, r8, asr r8
   13630:	andeq	r3, r1, ip, ror r8
   13634:	andeq	r3, r1, ip, ror r8
   13638:	andeq	r3, r1, ip, ror r8
   1363c:	andeq	r3, r1, r8, ror #15
   13640:	andeq	r3, r1, r8, ror #15
   13644:	andeq	r3, r1, r8, ror #15
   13648:	andeq	r3, r1, r8, ror #15
   1364c:	andeq	r3, r1, r8, ror #15
   13650:	andeq	r3, r1, r8, ror #15
   13654:	andeq	r3, r1, r8, ror #15
   13658:	andeq	r3, r1, r8, ror #15
   1365c:	andeq	r3, r1, r8, ror #15
   13660:	andeq	r3, r1, r8, ror #15
   13664:	andeq	r3, r1, r8, ror #15
   13668:	andeq	r3, r1, r8, ror #15
   1366c:	andeq	r3, r1, r8, ror #15
   13670:	andeq	r3, r1, r8, ror #15
   13674:	andeq	r3, r1, r8, ror #15
   13678:	andeq	r3, r1, r8, ror #15
   1367c:	andeq	r3, r1, ip, ror r8
   13680:	andeq	r3, r1, ip, ror r8
   13684:	andeq	r3, r1, ip, ror r8
   13688:	andeq	r3, r1, ip, ror r8
   1368c:	andeq	r3, r1, r0, lsr r8
   13690:	strdeq	r3, [r1], -r0
   13694:	andeq	r3, r1, r8, ror #15
   13698:	andeq	r3, r1, r8, ror #15
   1369c:	andeq	r3, r1, r8, ror #15
   136a0:	andeq	r3, r1, r8, ror #15
   136a4:	andeq	r3, r1, r8, ror #15
   136a8:	andeq	r3, r1, r8, ror #15
   136ac:	andeq	r3, r1, r8, ror #15
   136b0:	andeq	r3, r1, r8, ror #15
   136b4:	andeq	r3, r1, r8, ror #15
   136b8:	andeq	r3, r1, r8, ror #15
   136bc:	andeq	r3, r1, r8, ror #15
   136c0:	andeq	r3, r1, r8, ror #15
   136c4:	andeq	r3, r1, r8, ror #15
   136c8:	andeq	r3, r1, r8, ror #15
   136cc:	andeq	r3, r1, r8, ror #15
   136d0:	andeq	r3, r1, r8, ror #15
   136d4:	andeq	r3, r1, r8, ror #15
   136d8:	andeq	r3, r1, r8, ror #15
   136dc:	andeq	r3, r1, r8, ror #15
   136e0:	andeq	r3, r1, r8, ror #15
   136e4:	andeq	r3, r1, r8, ror #15
   136e8:	andeq	r3, r1, r8, ror #15
   136ec:	andeq	r3, r1, r8, ror #15
   136f0:	andeq	r3, r1, r8, ror #15
   136f4:	andeq	r3, r1, r8, ror #15
   136f8:	andeq	r3, r1, r8, ror #15
   136fc:	andeq	r3, r1, ip, ror r8
   13700:			; <UNDEFINED> instruction: 0x000137b0
   13704:	andeq	r3, r1, r8, ror #15
   13708:	andeq	r3, r1, ip, ror r8
   1370c:	andeq	r3, r1, r8, ror #15
   13710:	andeq	r3, r1, ip, ror r8
   13714:	andeq	r3, r1, r8, ror #15
   13718:	andeq	r3, r1, r8, ror #15
   1371c:	andeq	r3, r1, r8, ror #15
   13720:	andeq	r3, r1, r8, ror #15
   13724:	andeq	r3, r1, r8, ror #15
   13728:	andeq	r3, r1, r8, ror #15
   1372c:	andeq	r3, r1, r8, ror #15
   13730:	andeq	r3, r1, r8, ror #15
   13734:	andeq	r3, r1, r8, ror #15
   13738:	andeq	r3, r1, r8, ror #15
   1373c:	andeq	r3, r1, r8, ror #15
   13740:	andeq	r3, r1, r8, ror #15
   13744:	andeq	r3, r1, r8, ror #15
   13748:	andeq	r3, r1, r8, ror #15
   1374c:	andeq	r3, r1, r8, ror #15
   13750:	andeq	r3, r1, r8, ror #15
   13754:	andeq	r3, r1, r8, ror #15
   13758:	andeq	r3, r1, r8, ror #15
   1375c:	andeq	r3, r1, r8, ror #15
   13760:	andeq	r3, r1, r8, ror #15
   13764:	andeq	r3, r1, r8, ror #15
   13768:	andeq	r3, r1, r8, ror #15
   1376c:	andeq	r3, r1, r8, ror #15
   13770:	andeq	r3, r1, r8, ror #15
   13774:	andeq	r3, r1, r8, ror #15
   13778:	andeq	r3, r1, r8, ror #15
   1377c:	andeq	r3, r1, ip, lsl #15
   13780:	andeq	r3, r1, ip, ror r8
   13784:	andeq	r3, r1, ip, lsl #15
   13788:	strdeq	r3, [r1], -r4
   1378c:	mov	r3, #0
   13790:	cmn	r8, #1
   13794:	str	r3, [sp, #40]	; 0x28
   13798:	bne	13358 <__assert_fail@plt+0x2494>
   1379c:	ldr	r3, [sp, #28]
   137a0:	ldrb	r3, [r3, #1]
   137a4:	adds	r3, r3, #0
   137a8:	movne	r3, #1
   137ac:	b	13360 <__assert_fail@plt+0x249c>
   137b0:	mov	r3, #0
   137b4:	str	r3, [sp, #40]	; 0x28
   137b8:	ldr	r3, [sp, #176]	; 0xb0
   137bc:	cmp	r3, #2
   137c0:	bne	13450 <__assert_fail@plt+0x258c>
   137c4:	ldr	r3, [sp, #44]	; 0x2c
   137c8:	cmp	r3, #0
   137cc:	bne	1410c <__assert_fail@plt+0x3248>
   137d0:	mov	r6, r3
   137d4:	add	r7, r7, #1
   137d8:	mov	r3, fp
   137dc:	mov	r5, #92	; 0x5c
   137e0:	b	13220 <__assert_fail@plt+0x235c>
   137e4:	ldr	r6, [sp, #48]	; 0x30
   137e8:	mov	r3, #0
   137ec:	str	r3, [sp, #40]	; 0x28
   137f0:	b	13374 <__assert_fail@plt+0x24b0>
   137f4:	mov	r3, #0
   137f8:	str	r3, [sp, #40]	; 0x28
   137fc:	b	13368 <__assert_fail@plt+0x24a4>
   13800:	mov	r3, #0
   13804:	str	r3, [sp, #40]	; 0x28
   13808:	mov	r3, #118	; 0x76
   1380c:	b	131c8 <__assert_fail@plt+0x2304>
   13810:	ldr	r6, [sp, #48]	; 0x30
   13814:	mov	r3, #0
   13818:	str	r3, [sp, #40]	; 0x28
   1381c:	b	133b4 <__assert_fail@plt+0x24f0>
   13820:	mov	r3, #0
   13824:	str	r3, [sp, #40]	; 0x28
   13828:	mov	r3, #116	; 0x74
   1382c:	b	131bc <__assert_fail@plt+0x22f8>
   13830:	ldr	r3, [sp, #176]	; 0xb0
   13834:	cmp	r3, #2
   13838:	beq	13d48 <__assert_fail@plt+0x2e84>
   1383c:	cmp	r3, #5
   13840:	mov	r3, #0
   13844:	str	r3, [sp, #40]	; 0x28
   13848:	beq	134b4 <__assert_fail@plt+0x25f0>
   1384c:	mov	r6, #0
   13850:	mov	r5, #63	; 0x3f
   13854:	b	13374 <__assert_fail@plt+0x24b0>
   13858:	ldr	r3, [sp, #176]	; 0xb0
   1385c:	cmp	r3, #2
   13860:	beq	13cd0 <__assert_fail@plt+0x2e0c>
   13864:	mov	r3, #0
   13868:	b	134f8 <__assert_fail@plt+0x2634>
   1386c:	mov	r3, #0
   13870:	str	r3, [sp, #40]	; 0x28
   13874:	mov	r3, #114	; 0x72
   13878:	b	131bc <__assert_fail@plt+0x22f8>
   1387c:	mov	r3, #0
   13880:	mov	r6, r3
   13884:	str	r3, [sp, #40]	; 0x28
   13888:	b	133b4 <__assert_fail@plt+0x24f0>
   1388c:	mov	r3, #0
   13890:	str	r3, [sp, #40]	; 0x28
   13894:	mov	r3, #110	; 0x6e
   13898:	b	131bc <__assert_fail@plt+0x22f8>
   1389c:	mov	r3, #0
   138a0:	str	r3, [sp, #40]	; 0x28
   138a4:	mov	r3, #98	; 0x62
   138a8:	b	131c8 <__assert_fail@plt+0x2304>
   138ac:	mov	r3, #0
   138b0:	str	r3, [sp, #40]	; 0x28
   138b4:	mov	r3, #97	; 0x61
   138b8:	b	131c8 <__assert_fail@plt+0x2304>
   138bc:	ldr	r3, [sp, #60]	; 0x3c
   138c0:	cmp	r3, #0
   138c4:	bne	13cb4 <__assert_fail@plt+0x2df0>
   138c8:	ldr	r3, [sp, #92]	; 0x5c
   138cc:	cmp	r3, #0
   138d0:	addne	r7, r7, #1
   138d4:	bne	12ad4 <__assert_fail@plt+0x1c10>
   138d8:	str	r3, [sp, #40]	; 0x28
   138dc:	b	131d4 <__assert_fail@plt+0x2310>
   138e0:	mov	r3, #0
   138e4:	str	r3, [sp, #40]	; 0x28
   138e8:	mov	r3, #102	; 0x66
   138ec:	b	131c8 <__assert_fail@plt+0x2304>
   138f0:	mov	r3, #0
   138f4:	str	r3, [sp, #40]	; 0x28
   138f8:	ldr	r3, [sp, #76]	; 0x4c
   138fc:	cmp	r3, #1
   13900:	bne	13d68 <__assert_fail@plt+0x2ea4>
   13904:	bl	10dbc <__ctype_b_loc@plt>
   13908:	ldr	r2, [r0]
   1390c:	sxth	r3, r5
   13910:	lsl	r3, r3, #1
   13914:	ldr	r1, [sp, #76]	; 0x4c
   13918:	ldrh	r3, [r2, r3]
   1391c:	mov	r0, r1
   13920:	and	r3, r3, #16384	; 0x4000
   13924:	cmp	r3, #0
   13928:	ldr	r3, [sp, #60]	; 0x3c
   1392c:	movne	r6, #1
   13930:	moveq	r6, #0
   13934:	movne	r2, #0
   13938:	andeq	r2, r3, #1
   1393c:	cmp	r2, #0
   13940:	beq	13374 <__assert_fail@plt+0x24b0>
   13944:	ldr	r2, [sp, #60]	; 0x3c
   13948:	mov	r6, #0
   1394c:	add	r1, r0, r7
   13950:	mov	ip, #39	; 0x27
   13954:	str	r6, [sp, #100]	; 0x64
   13958:	mov	r0, #0
   1395c:	ldr	lr, [sp, #36]	; 0x24
   13960:	str	r8, [sp, #36]	; 0x24
   13964:	ldr	r6, [sp, #40]	; 0x28
   13968:	ldr	r8, [sp, #44]	; 0x2c
   1396c:	b	13a1c <__assert_fail@plt+0x2b58>
   13970:	cmp	r8, #0
   13974:	bne	13f50 <__assert_fail@plt+0x308c>
   13978:	ldr	r0, [sp, #52]	; 0x34
   1397c:	eor	r3, fp, #1
   13980:	ands	r3, r0, r3
   13984:	beq	139b4 <__assert_fail@plt+0x2af0>
   13988:	cmp	sl, r4
   1398c:	add	r0, r4, #1
   13990:	strbhi	ip, [r9, r4]
   13994:	cmp	sl, r0
   13998:	movhi	fp, #36	; 0x24
   1399c:	strbhi	fp, [r9, r0]
   139a0:	add	r0, r4, #2
   139a4:	mov	fp, r3
   139a8:	cmp	sl, r0
   139ac:	add	r4, r4, #3
   139b0:	strbhi	ip, [r9, r0]
   139b4:	cmp	sl, r4
   139b8:	movhi	r3, #92	; 0x5c
   139bc:	strbhi	r3, [r9, r4]
   139c0:	add	r3, r4, #1
   139c4:	cmp	sl, r3
   139c8:	bls	139d8 <__assert_fail@plt+0x2b14>
   139cc:	lsr	r0, r5, #6
   139d0:	add	r0, r0, #48	; 0x30
   139d4:	strb	r0, [r9, r3]
   139d8:	add	r3, r4, #2
   139dc:	cmp	sl, r3
   139e0:	bls	139f0 <__assert_fail@plt+0x2b2c>
   139e4:	ubfx	r0, r5, #3, #3
   139e8:	add	r0, r0, #48	; 0x30
   139ec:	strb	r0, [r9, r3]
   139f0:	add	r7, r7, #1
   139f4:	and	r5, r5, #7
   139f8:	cmp	r1, r7
   139fc:	add	r5, r5, #48	; 0x30
   13a00:	add	r4, r4, #3
   13a04:	bls	13f64 <__assert_fail@plt+0x30a0>
   13a08:	mov	r0, r2
   13a0c:	cmp	sl, r4
   13a10:	strbhi	r5, [r9, r4]
   13a14:	add	r4, r4, #1
   13a18:	ldrb	r5, [lr, #1]!
   13a1c:	cmp	r2, #0
   13a20:	bne	13970 <__assert_fail@plt+0x2aac>
   13a24:	eor	r3, r0, #1
   13a28:	cmp	r6, #0
   13a2c:	and	r3, r3, fp
   13a30:	uxtb	r3, r3
   13a34:	beq	13a48 <__assert_fail@plt+0x2b84>
   13a38:	cmp	sl, r4
   13a3c:	movhi	r6, #92	; 0x5c
   13a40:	strbhi	r6, [r9, r4]
   13a44:	add	r4, r4, #1
   13a48:	add	r7, r7, #1
   13a4c:	cmp	r7, r1
   13a50:	bcs	13f44 <__assert_fail@plt+0x3080>
   13a54:	cmp	r3, #0
   13a58:	beq	13f88 <__assert_fail@plt+0x30c4>
   13a5c:	cmp	sl, r4
   13a60:	add	r3, r4, #1
   13a64:	mov	r6, #0
   13a68:	strbhi	ip, [r9, r4]
   13a6c:	cmp	sl, r3
   13a70:	add	r4, r4, #2
   13a74:	mov	fp, r6
   13a78:	strbhi	ip, [r9, r3]
   13a7c:	b	13a0c <__assert_fail@plt+0x2b48>
   13a80:	ldr	r3, [sp, #36]	; 0x24
   13a84:	ldrb	r5, [r3]
   13a88:	cmp	r5, #126	; 0x7e
   13a8c:	ldrls	pc, [pc, r5, lsl #2]
   13a90:	b	138f0 <__assert_fail@plt+0x2a2c>
   13a94:			; <UNDEFINED> instruction: 0x00013cb4
   13a98:	strdeq	r3, [r1], -r0
   13a9c:	strdeq	r3, [r1], -r0
   13aa0:	strdeq	r3, [r1], -r0
   13aa4:	strdeq	r3, [r1], -r0
   13aa8:	strdeq	r3, [r1], -r0
   13aac:	strdeq	r3, [r1], -r0
   13ab0:	andeq	r3, r1, r8, lsr #3
   13ab4:	andeq	r3, r1, r0, lsr #3
   13ab8:	andeq	r3, r1, r0, lsr #16
   13abc:	andeq	r3, r1, r8, lsr #25
   13ac0:	andeq	r3, r1, r0, lsl #16
   13ac4:	andeq	r3, r1, ip, asr #32
   13ac8:	muleq	r1, ip, ip
   13acc:	strdeq	r3, [r1], -r0
   13ad0:	strdeq	r3, [r1], -r0
   13ad4:	strdeq	r3, [r1], -r0
   13ad8:	strdeq	r3, [r1], -r0
   13adc:	strdeq	r3, [r1], -r0
   13ae0:	strdeq	r3, [r1], -r0
   13ae4:	strdeq	r3, [r1], -r0
   13ae8:	strdeq	r3, [r1], -r0
   13aec:	strdeq	r3, [r1], -r0
   13af0:	strdeq	r3, [r1], -r0
   13af4:	strdeq	r3, [r1], -r0
   13af8:	strdeq	r3, [r1], -r0
   13afc:	strdeq	r3, [r1], -r0
   13b00:	strdeq	r3, [r1], -r0
   13b04:	strdeq	r3, [r1], -r0
   13b08:	strdeq	r3, [r1], -r0
   13b0c:	strdeq	r3, [r1], -r0
   13b10:	strdeq	r3, [r1], -r0
   13b14:	andeq	r3, r1, r0, lsl r8
   13b18:	muleq	r1, r0, ip
   13b1c:	muleq	r1, r0, ip
   13b20:	strdeq	r3, [r1], -r4
   13b24:	muleq	r1, r0, ip
   13b28:	andeq	r3, r1, r4, ror #15
   13b2c:	muleq	r1, r0, ip
   13b30:	andeq	r3, r1, r8, asr r8
   13b34:	muleq	r1, r0, ip
   13b38:	muleq	r1, r0, ip
   13b3c:	muleq	r1, r0, ip
   13b40:	andeq	r3, r1, r4, ror #15
   13b44:	andeq	r3, r1, r4, ror #15
   13b48:	andeq	r3, r1, r4, ror #15
   13b4c:	andeq	r3, r1, r4, ror #15
   13b50:	andeq	r3, r1, r4, ror #15
   13b54:	andeq	r3, r1, r4, ror #15
   13b58:	andeq	r3, r1, r4, ror #15
   13b5c:	andeq	r3, r1, r4, ror #15
   13b60:	andeq	r3, r1, r4, ror #15
   13b64:	andeq	r3, r1, r4, ror #15
   13b68:	andeq	r3, r1, r4, ror #15
   13b6c:	andeq	r3, r1, r4, ror #15
   13b70:	andeq	r3, r1, r4, ror #15
   13b74:	andeq	r3, r1, r4, ror #15
   13b78:	andeq	r3, r1, r4, ror #15
   13b7c:	andeq	r3, r1, r4, ror #15
   13b80:	muleq	r1, r0, ip
   13b84:	muleq	r1, r0, ip
   13b88:	muleq	r1, r0, ip
   13b8c:	muleq	r1, r0, ip
   13b90:	andeq	r3, r1, r0, lsr r8
   13b94:	strdeq	r3, [r1], -r0
   13b98:	andeq	r3, r1, r4, ror #15
   13b9c:	andeq	r3, r1, r4, ror #15
   13ba0:	andeq	r3, r1, r4, ror #15
   13ba4:	andeq	r3, r1, r4, ror #15
   13ba8:	andeq	r3, r1, r4, ror #15
   13bac:	andeq	r3, r1, r4, ror #15
   13bb0:	andeq	r3, r1, r4, ror #15
   13bb4:	andeq	r3, r1, r4, ror #15
   13bb8:	andeq	r3, r1, r4, ror #15
   13bbc:	andeq	r3, r1, r4, ror #15
   13bc0:	andeq	r3, r1, r4, ror #15
   13bc4:	andeq	r3, r1, r4, ror #15
   13bc8:	andeq	r3, r1, r4, ror #15
   13bcc:	andeq	r3, r1, r4, ror #15
   13bd0:	andeq	r3, r1, r4, ror #15
   13bd4:	andeq	r3, r1, r4, ror #15
   13bd8:	andeq	r3, r1, r4, ror #15
   13bdc:	andeq	r3, r1, r4, ror #15
   13be0:	andeq	r3, r1, r4, ror #15
   13be4:	andeq	r3, r1, r4, ror #15
   13be8:	andeq	r3, r1, r4, ror #15
   13bec:	andeq	r3, r1, r4, ror #15
   13bf0:	andeq	r3, r1, r4, ror #15
   13bf4:	andeq	r3, r1, r4, ror #15
   13bf8:	andeq	r3, r1, r4, ror #15
   13bfc:	andeq	r3, r1, r4, ror #15
   13c00:	muleq	r1, r0, ip
   13c04:			; <UNDEFINED> instruction: 0x000137b0
   13c08:	andeq	r3, r1, r4, ror #15
   13c0c:	muleq	r1, r0, ip
   13c10:	andeq	r3, r1, r4, ror #15
   13c14:	muleq	r1, r0, ip
   13c18:	andeq	r3, r1, r4, ror #15
   13c1c:	andeq	r3, r1, r4, ror #15
   13c20:	andeq	r3, r1, r4, ror #15
   13c24:	andeq	r3, r1, r4, ror #15
   13c28:	andeq	r3, r1, r4, ror #15
   13c2c:	andeq	r3, r1, r4, ror #15
   13c30:	andeq	r3, r1, r4, ror #15
   13c34:	andeq	r3, r1, r4, ror #15
   13c38:	andeq	r3, r1, r4, ror #15
   13c3c:	andeq	r3, r1, r4, ror #15
   13c40:	andeq	r3, r1, r4, ror #15
   13c44:	andeq	r3, r1, r4, ror #15
   13c48:	andeq	r3, r1, r4, ror #15
   13c4c:	andeq	r3, r1, r4, ror #15
   13c50:	andeq	r3, r1, r4, ror #15
   13c54:	andeq	r3, r1, r4, ror #15
   13c58:	andeq	r3, r1, r4, ror #15
   13c5c:	andeq	r3, r1, r4, ror #15
   13c60:	andeq	r3, r1, r4, ror #15
   13c64:	andeq	r3, r1, r4, ror #15
   13c68:	andeq	r3, r1, r4, ror #15
   13c6c:	andeq	r3, r1, r4, ror #15
   13c70:	andeq	r3, r1, r4, ror #15
   13c74:	andeq	r3, r1, r4, ror #15
   13c78:	andeq	r3, r1, r4, ror #15
   13c7c:	andeq	r3, r1, r4, ror #15
   13c80:	andeq	r3, r1, ip, lsl #15
   13c84:	muleq	r1, r0, ip
   13c88:	andeq	r3, r1, ip, lsl #15
   13c8c:	strdeq	r3, [r1], -r4
   13c90:	mov	r3, #0
   13c94:	str	r3, [sp, #40]	; 0x28
   13c98:	b	13370 <__assert_fail@plt+0x24ac>
   13c9c:	mov	r3, #0
   13ca0:	str	r3, [sp, #40]	; 0x28
   13ca4:	b	13308 <__assert_fail@plt+0x2444>
   13ca8:	mov	r3, #0
   13cac:	str	r3, [sp, #40]	; 0x28
   13cb0:	b	1333c <__assert_fail@plt+0x2478>
   13cb4:	ldr	r3, [sp, #44]	; 0x2c
   13cb8:	cmp	r3, #0
   13cbc:	beq	13254 <__assert_fail@plt+0x2390>
   13cc0:	ldr	r3, [sp, #52]	; 0x34
   13cc4:	mov	fp, r9
   13cc8:	str	r3, [sp, #60]	; 0x3c
   13ccc:	b	133cc <__assert_fail@plt+0x2508>
   13cd0:	ldr	r3, [sp, #44]	; 0x2c
   13cd4:	cmp	r3, #0
   13cd8:	bne	1410c <__assert_fail@plt+0x3248>
   13cdc:	str	r3, [sp, #40]	; 0x28
   13ce0:	cmp	sl, #0
   13ce4:	ldr	r3, [sp, #84]	; 0x54
   13ce8:	clz	r3, r3
   13cec:	lsr	r3, r3, #5
   13cf0:	moveq	r3, #0
   13cf4:	cmp	r3, #0
   13cf8:	strne	sl, [sp, #84]	; 0x54
   13cfc:	movne	sl, #0
   13d00:	bne	13d30 <__assert_fail@plt+0x2e6c>
   13d04:	cmp	sl, r4
   13d08:	movhi	r3, #39	; 0x27
   13d0c:	strbhi	r3, [r9, r4]
   13d10:	add	r3, r4, #1
   13d14:	cmp	sl, r3
   13d18:	movhi	r2, #92	; 0x5c
   13d1c:	strbhi	r2, [r9, r3]
   13d20:	add	r3, r4, #2
   13d24:	cmp	sl, r3
   13d28:	movhi	r2, #39	; 0x27
   13d2c:	strbhi	r2, [r9, r3]
   13d30:	mov	r3, #0
   13d34:	add	r4, r4, #3
   13d38:	str	r6, [sp, #80]	; 0x50
   13d3c:	mov	fp, r3
   13d40:	mov	r5, #39	; 0x27
   13d44:	b	13210 <__assert_fail@plt+0x234c>
   13d48:	ldr	r3, [sp, #44]	; 0x2c
   13d4c:	cmp	r3, #0
   13d50:	bne	1410c <__assert_fail@plt+0x3248>
   13d54:	mov	r6, #0
   13d58:	mov	r5, #63	; 0x3f
   13d5c:	str	r3, [sp, #40]	; 0x28
   13d60:	mov	r3, fp
   13d64:	b	13210 <__assert_fail@plt+0x234c>
   13d68:	mov	r2, #0
   13d6c:	mov	r3, #0
   13d70:	cmn	r8, #1
   13d74:	strd	r2, [sp, #128]	; 0x80
   13d78:	bne	13d88 <__assert_fail@plt+0x2ec4>
   13d7c:	ldr	r0, [sp, #28]
   13d80:	bl	10dd4 <strlen@plt>
   13d84:	mov	r8, r0
   13d88:	str	r9, [sp, #100]	; 0x64
   13d8c:	mov	r3, #0
   13d90:	strd	sl, [sp, #104]	; 0x68
   13d94:	ldr	sl, [sp, #28]
   13d98:	str	r5, [sp, #112]	; 0x70
   13d9c:	mov	r5, r3
   13da0:	ldr	r9, [sp, #68]	; 0x44
   13da4:	str	r4, [sp, #116]	; 0x74
   13da8:	add	r4, r7, r5
   13dac:	add	r3, sp, #128	; 0x80
   13db0:	add	fp, sl, r4
   13db4:	sub	r2, r8, r4
   13db8:	mov	r1, fp
   13dbc:	add	r0, sp, #124	; 0x7c
   13dc0:	bl	17198 <__assert_fail@plt+0x62d4>
   13dc4:	subs	r1, r0, #0
   13dc8:	beq	13e08 <__assert_fail@plt+0x2f44>
   13dcc:	cmn	r1, #1
   13dd0:	beq	14160 <__assert_fail@plt+0x329c>
   13dd4:	cmn	r1, #2
   13dd8:	beq	14180 <__assert_fail@plt+0x32bc>
   13ddc:	cmp	r9, #0
   13de0:	bne	13e38 <__assert_fail@plt+0x2f74>
   13de4:	ldr	r0, [sp, #124]	; 0x7c
   13de8:	add	r5, r5, r1
   13dec:	bl	10d2c <iswprint@plt>
   13df0:	cmp	r0, #0
   13df4:	add	r0, sp, #128	; 0x80
   13df8:	moveq	r6, #0
   13dfc:	bl	10cd8 <mbsinit@plt>
   13e00:	cmp	r0, #0
   13e04:	beq	13da8 <__assert_fail@plt+0x2ee4>
   13e08:	ldr	r3, [sp, #60]	; 0x3c
   13e0c:	add	r9, sp, #100	; 0x64
   13e10:	mov	r0, r5
   13e14:	ldm	r9, {r9, sl, fp}
   13e18:	eor	r2, r6, #1
   13e1c:	ldr	r5, [sp, #112]	; 0x70
   13e20:	and	r2, r2, r3
   13e24:	uxtb	r2, r2
   13e28:	ldr	r4, [sp, #116]	; 0x74
   13e2c:	cmp	r0, #1
   13e30:	bhi	1394c <__assert_fail@plt+0x2a88>
   13e34:	b	1393c <__assert_fail@plt+0x2a78>
   13e38:	cmp	r1, #1
   13e3c:	beq	13de4 <__assert_fail@plt+0x2f20>
   13e40:	add	r2, r4, #1
   13e44:	add	r3, sl, r1
   13e48:	add	r2, sl, r2
   13e4c:	add	r4, r3, r4
   13e50:	ldrb	r3, [r2], #1
   13e54:	sub	r3, r3, #91	; 0x5b
   13e58:	cmp	r3, #33	; 0x21
   13e5c:	ldrls	pc, [pc, r3, lsl #2]
   13e60:	b	13eec <__assert_fail@plt+0x3028>
   13e64:	strdeq	r3, [r1], -r8
   13e68:	strdeq	r3, [r1], -r8
   13e6c:	andeq	r3, r1, ip, ror #29
   13e70:	strdeq	r3, [r1], -r8
   13e74:	andeq	r3, r1, ip, ror #29
   13e78:	strdeq	r3, [r1], -r8
   13e7c:	andeq	r3, r1, ip, ror #29
   13e80:	andeq	r3, r1, ip, ror #29
   13e84:	andeq	r3, r1, ip, ror #29
   13e88:	andeq	r3, r1, ip, ror #29
   13e8c:	andeq	r3, r1, ip, ror #29
   13e90:	andeq	r3, r1, ip, ror #29
   13e94:	andeq	r3, r1, ip, ror #29
   13e98:	andeq	r3, r1, ip, ror #29
   13e9c:	andeq	r3, r1, ip, ror #29
   13ea0:	andeq	r3, r1, ip, ror #29
   13ea4:	andeq	r3, r1, ip, ror #29
   13ea8:	andeq	r3, r1, ip, ror #29
   13eac:	andeq	r3, r1, ip, ror #29
   13eb0:	andeq	r3, r1, ip, ror #29
   13eb4:	andeq	r3, r1, ip, ror #29
   13eb8:	andeq	r3, r1, ip, ror #29
   13ebc:	andeq	r3, r1, ip, ror #29
   13ec0:	andeq	r3, r1, ip, ror #29
   13ec4:	andeq	r3, r1, ip, ror #29
   13ec8:	andeq	r3, r1, ip, ror #29
   13ecc:	andeq	r3, r1, ip, ror #29
   13ed0:	andeq	r3, r1, ip, ror #29
   13ed4:	andeq	r3, r1, ip, ror #29
   13ed8:	andeq	r3, r1, ip, ror #29
   13edc:	andeq	r3, r1, ip, ror #29
   13ee0:	andeq	r3, r1, ip, ror #29
   13ee4:	andeq	r3, r1, ip, ror #29
   13ee8:	strdeq	r3, [r1], -r8
   13eec:	cmp	r4, r2
   13ef0:	bne	13e50 <__assert_fail@plt+0x2f8c>
   13ef4:	b	13de4 <__assert_fail@plt+0x2f20>
   13ef8:	mov	r3, #2
   13efc:	ldr	fp, [sp, #100]	; 0x64
   13f00:	str	r3, [sp, #176]	; 0xb0
   13f04:	ldr	sl, [sp, #104]	; 0x68
   13f08:	b	133cc <__assert_fail@plt+0x2508>
   13f0c:	ldr	r2, [sp, #52]	; 0x34
   13f10:	mov	fp, r9
   13f14:	ldr	r3, [sp, #60]	; 0x3c
   13f18:	and	r3, r3, r2
   13f1c:	str	r3, [sp, #60]	; 0x3c
   13f20:	b	133cc <__assert_fail@plt+0x2508>
   13f24:	cmp	sl, r4
   13f28:	movhi	r2, fp
   13f2c:	bhi	132a4 <__assert_fail@plt+0x23e0>
   13f30:	mov	r2, r4
   13f34:	b	132b4 <__assert_fail@plt+0x23f0>
   13f38:	mov	r6, r3
   13f3c:	mov	r5, #63	; 0x3f
   13f40:	b	13374 <__assert_fail@plt+0x24b0>
   13f44:	ldr	r8, [sp, #36]	; 0x24
   13f48:	ldr	r6, [sp, #100]	; 0x64
   13f4c:	b	13220 <__assert_fail@plt+0x235c>
   13f50:	mov	fp, r9
   13f54:	ldr	r8, [sp, #36]	; 0x24
   13f58:	ldr	r3, [sp, #52]	; 0x34
   13f5c:	str	r3, [sp, #60]	; 0x3c
   13f60:	b	133cc <__assert_fail@plt+0x2508>
   13f64:	ldr	r8, [sp, #36]	; 0x24
   13f68:	ldr	r6, [sp, #100]	; 0x64
   13f6c:	b	130b8 <__assert_fail@plt+0x21f4>
   13f70:	mov	r3, #0
   13f74:	add	r4, r4, #4
   13f78:	mov	fp, r2
   13f7c:	mov	r6, r3
   13f80:	mov	r5, #48	; 0x30
   13f84:	b	13210 <__assert_fail@plt+0x234c>
   13f88:	mov	r6, r3
   13f8c:	b	13a0c <__assert_fail@plt+0x2b48>
   13f90:	mov	r3, #1
   13f94:	movw	r2, #32364	; 0x7e6c
   13f98:	movt	r2, #1
   13f9c:	mov	r4, r3
   13fa0:	mov	r9, sl
   13fa4:	str	r3, [sp, #32]
   13fa8:	str	sl, [sp, #44]	; 0x2c
   13fac:	str	r3, [sp, #48]	; 0x30
   13fb0:	str	sl, [sp, #52]	; 0x34
   13fb4:	str	r3, [sp, #56]	; 0x38
   13fb8:	str	r3, [sp, #60]	; 0x3c
   13fbc:	str	sl, [sp, #64]	; 0x40
   13fc0:	str	sl, [sp, #68]	; 0x44
   13fc4:	str	r2, [sp, #72]	; 0x48
   13fc8:	str	sl, [sp, #80]	; 0x50
   13fcc:	str	sl, [sp, #84]	; 0x54
   13fd0:	str	sl, [sp, #88]	; 0x58
   13fd4:	b	12ac4 <__assert_fail@plt+0x1c00>
   13fd8:	mov	r3, #0
   13fdc:	mov	r5, #48	; 0x30
   13fe0:	mov	r6, r3
   13fe4:	b	13210 <__assert_fail@plt+0x234c>
   13fe8:	cmp	sl, r4
   13fec:	mov	r5, #48	; 0x30
   13ff0:	movhi	r3, #48	; 0x30
   13ff4:	strbhi	r3, [r9, r4]
   13ff8:	add	r3, r2, #2
   13ffc:	add	r4, r2, #3
   14000:	cmp	sl, r3
   14004:	movhi	r1, #48	; 0x30
   14008:	strbhi	r1, [r9, r3]
   1400c:	mov	r3, #0
   14010:	b	132ec <__assert_fail@plt+0x2428>
   14014:	ldr	r3, [sp, #48]	; 0x30
   14018:	str	r3, [sp, #40]	; 0x28
   1401c:	b	138f8 <__assert_fail@plt+0x2a34>
   14020:	ldr	r2, [sp, #28]
   14024:	ldrb	r2, [r2, r3]
   14028:	sub	r1, r2, #33	; 0x21
   1402c:	cmp	r1, #29
   14030:	ldrls	pc, [pc, r1, lsl #2]
   14034:	b	13370 <__assert_fail@plt+0x24ac>
   14038:	strheq	r4, [r1], -r0
   1403c:	andeq	r3, r1, r0, ror r3
   14040:	andeq	r3, r1, r0, ror r3
   14044:	andeq	r3, r1, r0, ror r3
   14048:	andeq	r3, r1, r0, ror r3
   1404c:	andeq	r3, r1, r0, ror r3
   14050:	strheq	r4, [r1], -r0
   14054:	strheq	r4, [r1], -r0
   14058:	strheq	r4, [r1], -r0
   1405c:	andeq	r3, r1, r0, ror r3
   14060:	andeq	r3, r1, r0, ror r3
   14064:	andeq	r3, r1, r0, ror r3
   14068:	strheq	r4, [r1], -r0
   1406c:	andeq	r3, r1, r0, ror r3
   14070:	strheq	r4, [r1], -r0
   14074:	andeq	r3, r1, r0, ror r3
   14078:	andeq	r3, r1, r0, ror r3
   1407c:	andeq	r3, r1, r0, ror r3
   14080:	andeq	r3, r1, r0, ror r3
   14084:	andeq	r3, r1, r0, ror r3
   14088:	andeq	r3, r1, r0, ror r3
   1408c:	andeq	r3, r1, r0, ror r3
   14090:	andeq	r3, r1, r0, ror r3
   14094:	andeq	r3, r1, r0, ror r3
   14098:	andeq	r3, r1, r0, ror r3
   1409c:	andeq	r3, r1, r0, ror r3
   140a0:	andeq	r3, r1, r0, ror r3
   140a4:	strheq	r4, [r1], -r0
   140a8:	strheq	r4, [r1], -r0
   140ac:	strheq	r4, [r1], -r0
   140b0:	ldr	r1, [sp, #44]	; 0x2c
   140b4:	cmp	r1, #0
   140b8:	bne	14318 <__assert_fail@plt+0x3454>
   140bc:	cmp	sl, r4
   140c0:	mov	r7, r3
   140c4:	movhi	r1, #63	; 0x3f
   140c8:	mov	r5, r2
   140cc:	mov	r3, fp
   140d0:	strbhi	r1, [r9, r4]
   140d4:	add	r1, r4, #1
   140d8:	cmp	sl, r1
   140dc:	movhi	r0, #34	; 0x22
   140e0:	strbhi	r0, [r9, r1]
   140e4:	add	r1, r4, #2
   140e8:	cmp	sl, r1
   140ec:	movhi	r0, #34	; 0x22
   140f0:	strbhi	r0, [r9, r1]
   140f4:	add	r1, r4, #3
   140f8:	add	r4, r4, #4
   140fc:	cmp	sl, r1
   14100:	movhi	r0, #63	; 0x3f
   14104:	strbhi	r0, [r9, r1]
   14108:	b	132ec <__assert_fail@plt+0x2428>
   1410c:	mov	fp, r9
   14110:	b	133cc <__assert_fail@plt+0x2508>
   14114:	ldr	r3, [sp, #188]	; 0xbc
   14118:	ldrb	r3, [r3]
   1411c:	cmp	r3, #0
   14120:	beq	12a5c <__assert_fail@plt+0x1b98>
   14124:	ldr	r2, [sp, #188]	; 0xbc
   14128:	cmp	sl, r4
   1412c:	bls	1414c <__assert_fail@plt+0x3288>
   14130:	strb	r3, [fp, r4]
   14134:	add	r4, r4, #1
   14138:	ldrb	r3, [r2, #1]!
   1413c:	cmp	r3, #0
   14140:	beq	12a5c <__assert_fail@plt+0x1b98>
   14144:	cmp	sl, r4
   14148:	bhi	14130 <__assert_fail@plt+0x326c>
   1414c:	ldrb	r3, [r2, #1]!
   14150:	add	r4, r4, #1
   14154:	cmp	r3, #0
   14158:	bne	14128 <__assert_fail@plt+0x3264>
   1415c:	b	12a5c <__assert_fail@plt+0x1b98>
   14160:	add	r9, sp, #100	; 0x64
   14164:	mov	r0, r5
   14168:	ldr	r2, [sp, #60]	; 0x3c
   1416c:	mov	r6, #0
   14170:	ldm	r9, {r9, sl, fp}
   14174:	ldr	r5, [sp, #112]	; 0x70
   14178:	ldr	r4, [sp, #116]	; 0x74
   1417c:	b	13e2c <__assert_fail@plt+0x2f68>
   14180:	cmp	r4, r8
   14184:	add	r9, sp, #100	; 0x64
   14188:	mov	r1, r4
   1418c:	mov	r2, fp
   14190:	ldm	r9, {r9, sl, fp}
   14194:	mov	r3, r5
   14198:	mov	r0, r5
   1419c:	ldr	r5, [sp, #112]	; 0x70
   141a0:	ldr	r4, [sp, #116]	; 0x74
   141a4:	bcs	141d8 <__assert_fail@plt+0x3314>
   141a8:	ldrb	r6, [r2]
   141ac:	cmp	r6, #0
   141b0:	bne	141c4 <__assert_fail@plt+0x3300>
   141b4:	b	14310 <__assert_fail@plt+0x344c>
   141b8:	ldrb	r6, [r2, #1]!
   141bc:	cmp	r6, #0
   141c0:	beq	142a8 <__assert_fail@plt+0x33e4>
   141c4:	add	r3, r3, #1
   141c8:	add	r1, r7, r3
   141cc:	cmp	r8, r1
   141d0:	bhi	141b8 <__assert_fail@plt+0x32f4>
   141d4:	mov	r0, r3
   141d8:	mov	r6, #0
   141dc:	ldr	r2, [sp, #60]	; 0x3c
   141e0:	b	13e2c <__assert_fail@plt+0x2f68>
   141e4:	mov	r3, #1
   141e8:	mov	r4, #0
   141ec:	mov	r9, r4
   141f0:	str	r3, [sp, #32]
   141f4:	str	r3, [sp, #44]	; 0x2c
   141f8:	str	r3, [sp, #48]	; 0x30
   141fc:	str	r4, [sp, #52]	; 0x34
   14200:	str	r3, [sp, #56]	; 0x38
   14204:	str	r3, [sp, #60]	; 0x3c
   14208:	str	r3, [sp, #88]	; 0x58
   1420c:	movw	r3, #32364	; 0x7e6c
   14210:	movt	r3, #1
   14214:	str	r4, [sp, #64]	; 0x40
   14218:	str	r4, [sp, #68]	; 0x44
   1421c:	str	r3, [sp, #72]	; 0x48
   14220:	str	r4, [sp, #80]	; 0x50
   14224:	str	r4, [sp, #84]	; 0x54
   14228:	b	12ac4 <__assert_fail@plt+0x1c00>
   1422c:	mov	fp, r9
   14230:	b	133e0 <__assert_fail@plt+0x251c>
   14234:	ldr	r3, [sp, #48]	; 0x30
   14238:	b	13d54 <__assert_fail@plt+0x2e90>
   1423c:	mov	r2, r3
   14240:	ldr	r3, [sp, #72]	; 0x48
   14244:	cmp	r3, #0
   14248:	moveq	r2, #0
   1424c:	andne	r2, r2, #1
   14250:	cmp	r2, #0
   14254:	beq	14284 <__assert_fail@plt+0x33c0>
   14258:	mov	r2, r3
   1425c:	ldrb	r3, [r3]
   14260:	cmp	r3, #0
   14264:	beq	14284 <__assert_fail@plt+0x33c0>
   14268:	cmp	sl, r4
   1426c:	bls	14294 <__assert_fail@plt+0x33d0>
   14270:	strb	r3, [fp, r4]
   14274:	add	r4, r4, #1
   14278:	ldrb	r3, [r2, #1]!
   1427c:	cmp	r3, #0
   14280:	bne	14268 <__assert_fail@plt+0x33a4>
   14284:	cmp	sl, r4
   14288:	movhi	r3, #0
   1428c:	strbhi	r3, [fp, r4]
   14290:	b	1341c <__assert_fail@plt+0x2558>
   14294:	ldrb	r3, [r2, #1]!
   14298:	add	r4, r4, #1
   1429c:	cmp	r3, #0
   142a0:	bne	14268 <__assert_fail@plt+0x33a4>
   142a4:	b	14284 <__assert_fail@plt+0x33c0>
   142a8:	mov	r0, r3
   142ac:	ldr	r2, [sp, #60]	; 0x3c
   142b0:	b	13e2c <__assert_fail@plt+0x2f68>
   142b4:	mov	ip, #5
   142b8:	mov	r3, r8
   142bc:	ldr	r1, [sp, #84]	; 0x54
   142c0:	str	ip, [sp]
   142c4:	ldr	r2, [sp, #180]	; 0xb4
   142c8:	ldr	ip, [sp, #188]	; 0xbc
   142cc:	ldr	r0, [sp, #184]	; 0xb8
   142d0:	str	r2, [sp, #4]
   142d4:	ldr	r2, [sp, #28]
   142d8:	str	ip, [sp, #12]
   142dc:	ldr	ip, [sp, #192]	; 0xc0
   142e0:	str	r0, [sp, #8]
   142e4:	mov	r0, fp
   142e8:	str	ip, [sp, #16]
   142ec:	bl	129a0 <__assert_fail@plt+0x1adc>
   142f0:	mov	r4, r0
   142f4:	b	1341c <__assert_fail@plt+0x2558>
   142f8:	mov	r6, r3
   142fc:	str	r3, [sp, #40]	; 0x28
   14300:	b	1338c <__assert_fail@plt+0x24c8>
   14304:	mov	r3, #2
   14308:	str	r3, [sp, #176]	; 0xb0
   1430c:	b	133cc <__assert_fail@plt+0x2508>
   14310:	ldr	r2, [sp, #60]	; 0x3c
   14314:	b	13e2c <__assert_fail@plt+0x2f68>
   14318:	mov	r3, #5
   1431c:	mov	fp, r9
   14320:	str	r3, [sp, #176]	; 0xb0
   14324:	b	133e0 <__assert_fail@plt+0x251c>
   14328:	mov	r1, #1
   1432c:	mov	r9, #0
   14330:	mov	r3, r9
   14334:	mov	r2, r9
   14338:	str	r1, [sp, #32]
   1433c:	str	sl, [sp, #84]	; 0x54
   14340:	b	13168 <__assert_fail@plt+0x22a4>
   14344:	mov	r3, #0
   14348:	mov	r2, #1
   1434c:	mov	r9, r3
   14350:	mov	r4, r3
   14354:	str	r2, [sp, #32]
   14358:	strd	r2, [sp, #44]	; 0x2c
   1435c:	strd	r2, [sp, #56]	; 0x38
   14360:	str	r3, [sp, #80]	; 0x50
   14364:	str	r3, [sp, #84]	; 0x54
   14368:	str	r3, [sp, #88]	; 0x58
   1436c:	movw	r3, #32384	; 0x7e80
   14370:	movt	r3, #1
   14374:	str	r2, [sp, #52]	; 0x34
   14378:	str	r2, [sp, #64]	; 0x40
   1437c:	str	r2, [sp, #68]	; 0x44
   14380:	str	r3, [sp, #72]	; 0x48
   14384:	b	12ac4 <__assert_fail@plt+0x1c00>
   14388:	bl	10eac <abort@plt>
   1438c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14390:	mov	r4, r0
   14394:	mov	r5, r3
   14398:	strd	r6, [sp, #8]
   1439c:	movw	r7, #37108	; 0x90f4
   143a0:	movt	r7, #2
   143a4:	strd	r8, [sp, #16]
   143a8:	strd	sl, [sp, #24]
   143ac:	mov	sl, r1
   143b0:	mov	fp, r2
   143b4:	str	lr, [sp, #32]
   143b8:	sub	sp, sp, #60	; 0x3c
   143bc:	bl	10de0 <__errno_location@plt>
   143c0:	mov	r8, r0
   143c4:	cmn	r4, #-2147483647	; 0x80000001
   143c8:	ldr	r6, [r7]
   143cc:	movne	r0, #0
   143d0:	moveq	r0, #1
   143d4:	ldr	r3, [r8]
   143d8:	orrs	r0, r0, r4, lsr #31
   143dc:	str	r3, [sp, #28]
   143e0:	bne	14570 <__assert_fail@plt+0x36ac>
   143e4:	ldr	r3, [r7, #4]
   143e8:	cmp	r3, r4
   143ec:	bgt	1444c <__assert_fail@plt+0x3588>
   143f0:	add	r1, r7, #8
   143f4:	sub	r2, r4, r3
   143f8:	str	r3, [sp, #52]	; 0x34
   143fc:	cmp	r6, r1
   14400:	add	r2, r2, #1
   14404:	beq	14548 <__assert_fail@plt+0x3684>
   14408:	mov	r1, #8
   1440c:	mov	r0, r6
   14410:	mvn	r3, #-2147483648	; 0x80000000
   14414:	str	r1, [sp]
   14418:	add	r1, sp, #52	; 0x34
   1441c:	bl	16cac <__assert_fail@plt+0x5de8>
   14420:	mov	r6, r0
   14424:	str	r0, [r7]
   14428:	ldr	r0, [r7, #4]
   1442c:	mov	r1, #0
   14430:	ldr	r2, [sp, #52]	; 0x34
   14434:	sub	r2, r2, r0
   14438:	add	r0, r6, r0, lsl #3
   1443c:	lsl	r2, r2, #3
   14440:	bl	10df8 <memset@plt>
   14444:	ldr	r3, [sp, #52]	; 0x34
   14448:	str	r3, [r7, #4]
   1444c:	ldr	r1, [r5, #4]
   14450:	add	r0, r6, r4, lsl #3
   14454:	add	ip, r5, #8
   14458:	mov	r3, fp
   1445c:	mov	r2, sl
   14460:	ldr	r7, [r0, #4]
   14464:	str	r0, [sp, #36]	; 0x24
   14468:	str	ip, [sp, #40]	; 0x28
   1446c:	orr	r0, r1, #1
   14470:	ldr	r9, [r6, r4, lsl #3]
   14474:	str	ip, [sp, #8]
   14478:	ldr	lr, [r5, #44]	; 0x2c
   1447c:	str	r0, [sp, #4]
   14480:	ldr	ip, [r5]
   14484:	mov	r1, r9
   14488:	str	ip, [sp, #32]
   1448c:	ldr	ip, [r5, #40]	; 0x28
   14490:	str	ip, [sp, #12]
   14494:	ldr	ip, [sp, #32]
   14498:	str	lr, [sp, #16]
   1449c:	str	r0, [sp, #44]	; 0x2c
   144a0:	mov	r0, r7
   144a4:	str	ip, [sp]
   144a8:	bl	129a0 <__assert_fail@plt+0x1adc>
   144ac:	cmp	r9, r0
   144b0:	bhi	14520 <__assert_fail@plt+0x365c>
   144b4:	add	r9, r0, #1
   144b8:	movw	r3, #37288	; 0x91a8
   144bc:	movt	r3, #2
   144c0:	cmp	r7, r3
   144c4:	str	r9, [r6, r4, lsl #3]
   144c8:	beq	144d4 <__assert_fail@plt+0x3610>
   144cc:	mov	r0, r7
   144d0:	bl	1264c <__assert_fail@plt+0x1788>
   144d4:	mov	r0, r9
   144d8:	bl	16a08 <__assert_fail@plt+0x5b44>
   144dc:	ldr	ip, [r5]
   144e0:	mov	r3, fp
   144e4:	mov	r2, sl
   144e8:	mov	r1, r9
   144ec:	mov	r7, r0
   144f0:	ldr	lr, [sp, #36]	; 0x24
   144f4:	ldr	r4, [r5, #40]	; 0x28
   144f8:	str	r0, [lr, #4]
   144fc:	ldr	lr, [r5, #44]	; 0x2c
   14500:	str	ip, [sp]
   14504:	ldr	ip, [sp, #44]	; 0x2c
   14508:	str	ip, [sp, #4]
   1450c:	ldr	ip, [sp, #40]	; 0x28
   14510:	str	r4, [sp, #12]
   14514:	str	lr, [sp, #16]
   14518:	str	ip, [sp, #8]
   1451c:	bl	129a0 <__assert_fail@plt+0x1adc>
   14520:	ldr	r3, [sp, #28]
   14524:	mov	r0, r7
   14528:	str	r3, [r8]
   1452c:	add	sp, sp, #60	; 0x3c
   14530:	ldrd	r4, [sp]
   14534:	ldrd	r6, [sp, #8]
   14538:	ldrd	r8, [sp, #16]
   1453c:	ldrd	sl, [sp, #24]
   14540:	add	sp, sp, #32
   14544:	pop	{pc}		; (ldr pc, [sp], #4)
   14548:	mov	r1, #8
   1454c:	mvn	r3, #-2147483648	; 0x80000000
   14550:	str	r1, [sp]
   14554:	add	r1, sp, #52	; 0x34
   14558:	bl	16cac <__assert_fail@plt+0x5de8>
   1455c:	ldrd	r2, [r7, #8]
   14560:	mov	r6, r0
   14564:	str	r0, [r7]
   14568:	strd	r2, [r0]
   1456c:	b	14428 <__assert_fail@plt+0x3564>
   14570:	bl	10eac <abort@plt>
   14574:	strd	r4, [sp, #-16]!
   14578:	mov	r5, r0
   1457c:	str	r6, [sp, #8]
   14580:	str	lr, [sp, #12]
   14584:	bl	10de0 <__errno_location@plt>
   14588:	mov	r4, r0
   1458c:	cmp	r5, #0
   14590:	ldr	r0, [pc, #32]	; 145b8 <__assert_fail@plt+0x36f4>
   14594:	mov	r1, #48	; 0x30
   14598:	movne	r0, r5
   1459c:	ldr	r6, [r4]
   145a0:	bl	16e4c <__assert_fail@plt+0x5f88>
   145a4:	str	r6, [r4]
   145a8:	ldrd	r4, [sp]
   145ac:	ldr	r6, [sp, #8]
   145b0:	add	sp, sp, #12
   145b4:	pop	{pc}		; (ldr pc, [sp], #4)
   145b8:	andeq	r9, r2, r8, lsr #5
   145bc:	ldr	r3, [pc, #12]	; 145d0 <__assert_fail@plt+0x370c>
   145c0:	cmp	r0, #0
   145c4:	moveq	r0, r3
   145c8:	ldr	r0, [r0]
   145cc:	bx	lr
   145d0:	andeq	r9, r2, r8, lsr #5
   145d4:	ldr	r3, [pc, #12]	; 145e8 <__assert_fail@plt+0x3724>
   145d8:	cmp	r0, #0
   145dc:	moveq	r0, r3
   145e0:	str	r1, [r0]
   145e4:	bx	lr
   145e8:	andeq	r9, r2, r8, lsr #5
   145ec:	ldr	r3, [pc, #52]	; 14628 <__assert_fail@plt+0x3764>
   145f0:	cmp	r0, #0
   145f4:	push	{lr}		; (str lr, [sp, #-4]!)
   145f8:	lsr	lr, r1, #5
   145fc:	and	r1, r1, #31
   14600:	moveq	r0, r3
   14604:	add	r3, r0, #8
   14608:	ldr	ip, [r3, lr, lsl #2]
   1460c:	lsr	r0, ip, r1
   14610:	eor	r2, r2, r0
   14614:	and	r0, r0, #1
   14618:	and	r2, r2, #1
   1461c:	eor	r1, ip, r2, lsl r1
   14620:	str	r1, [r3, lr, lsl #2]
   14624:	pop	{pc}		; (ldr pc, [sp], #4)
   14628:	andeq	r9, r2, r8, lsr #5
   1462c:	ldr	r3, [pc, #16]	; 14644 <__assert_fail@plt+0x3780>
   14630:	cmp	r0, #0
   14634:	movne	r3, r0
   14638:	ldr	r0, [r3, #4]
   1463c:	str	r1, [r3, #4]
   14640:	bx	lr
   14644:	andeq	r9, r2, r8, lsr #5
   14648:	ldr	r3, [pc, #48]	; 14680 <__assert_fail@plt+0x37bc>
   1464c:	cmp	r0, #0
   14650:	mov	ip, #10
   14654:	moveq	r0, r3
   14658:	cmp	r2, #0
   1465c:	cmpne	r1, #0
   14660:	str	ip, [r0]
   14664:	beq	14674 <__assert_fail@plt+0x37b0>
   14668:	str	r1, [r0, #40]	; 0x28
   1466c:	str	r2, [r0, #44]	; 0x2c
   14670:	bx	lr
   14674:	str	r4, [sp, #-8]!
   14678:	str	lr, [sp, #4]
   1467c:	bl	10eac <abort@plt>
   14680:	andeq	r9, r2, r8, lsr #5
   14684:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14688:	strd	r6, [sp, #8]
   1468c:	mov	r7, r0
   14690:	mov	r6, r1
   14694:	strd	r8, [sp, #16]
   14698:	mov	r8, r2
   1469c:	mov	r9, r3
   146a0:	str	lr, [sp, #24]
   146a4:	sub	sp, sp, #28
   146a8:	ldr	r4, [sp, #56]	; 0x38
   146ac:	ldr	ip, [pc, #104]	; 1471c <__assert_fail@plt+0x3858>
   146b0:	cmp	r4, #0
   146b4:	moveq	r4, ip
   146b8:	bl	10de0 <__errno_location@plt>
   146bc:	ldr	ip, [r4, #44]	; 0x2c
   146c0:	mov	r5, r0
   146c4:	mov	r1, r6
   146c8:	add	lr, r4, #8
   146cc:	mov	r3, r9
   146d0:	ldr	r6, [r5]
   146d4:	mov	r2, r8
   146d8:	mov	r0, r7
   146dc:	str	ip, [sp, #16]
   146e0:	ldr	ip, [r4, #40]	; 0x28
   146e4:	str	lr, [sp, #8]
   146e8:	str	ip, [sp, #12]
   146ec:	ldr	ip, [r4, #4]
   146f0:	str	ip, [sp, #4]
   146f4:	ldr	ip, [r4]
   146f8:	str	ip, [sp]
   146fc:	bl	129a0 <__assert_fail@plt+0x1adc>
   14700:	str	r6, [r5]
   14704:	add	sp, sp, #28
   14708:	ldrd	r4, [sp]
   1470c:	ldrd	r6, [sp, #8]
   14710:	ldrd	r8, [sp, #16]
   14714:	add	sp, sp, #24
   14718:	pop	{pc}		; (ldr pc, [sp], #4)
   1471c:	andeq	r9, r2, r8, lsr #5
   14720:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14724:	cmp	r2, #0
   14728:	ldr	r4, [pc, #192]	; 147f0 <__assert_fail@plt+0x392c>
   1472c:	movne	r4, r2
   14730:	strd	r6, [sp, #8]
   14734:	strd	r8, [sp, #16]
   14738:	mov	r9, r1
   1473c:	mov	r8, r0
   14740:	strd	sl, [sp, #24]
   14744:	str	lr, [sp, #32]
   14748:	sub	sp, sp, #36	; 0x24
   1474c:	bl	10de0 <__errno_location@plt>
   14750:	ldr	r5, [r4, #4]
   14754:	mov	r6, r0
   14758:	add	r7, r4, #8
   1475c:	mov	r1, #0
   14760:	mov	r3, r9
   14764:	ldr	ip, [r4, #44]	; 0x2c
   14768:	mov	r2, r8
   1476c:	mov	r0, r1
   14770:	ldr	sl, [r6]
   14774:	orr	r5, r5, #1
   14778:	str	ip, [sp, #16]
   1477c:	ldr	ip, [r4, #40]	; 0x28
   14780:	stmib	sp, {r5, r7, ip}
   14784:	ldr	ip, [r4]
   14788:	str	ip, [sp]
   1478c:	bl	129a0 <__assert_fail@plt+0x1adc>
   14790:	add	r1, r0, #1
   14794:	mov	r0, r1
   14798:	str	r1, [sp, #28]
   1479c:	bl	16a08 <__assert_fail@plt+0x5b44>
   147a0:	ldr	ip, [r4, #44]	; 0x2c
   147a4:	mov	fp, r0
   147a8:	mov	r3, r9
   147ac:	mov	r2, r8
   147b0:	ldr	r1, [sp, #28]
   147b4:	str	ip, [sp, #16]
   147b8:	ldr	ip, [r4, #40]	; 0x28
   147bc:	stmib	sp, {r5, r7, ip}
   147c0:	ldr	ip, [r4]
   147c4:	str	ip, [sp]
   147c8:	bl	129a0 <__assert_fail@plt+0x1adc>
   147cc:	mov	r0, fp
   147d0:	str	sl, [r6]
   147d4:	add	sp, sp, #36	; 0x24
   147d8:	ldrd	r4, [sp]
   147dc:	ldrd	r6, [sp, #8]
   147e0:	ldrd	r8, [sp, #16]
   147e4:	ldrd	sl, [sp, #24]
   147e8:	add	sp, sp, #32
   147ec:	pop	{pc}		; (ldr pc, [sp], #4)
   147f0:	andeq	r9, r2, r8, lsr #5
   147f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   147f8:	cmp	r3, #0
   147fc:	ldr	r4, [pc, #220]	; 148e0 <__assert_fail@plt+0x3a1c>
   14800:	movne	r4, r3
   14804:	strd	r6, [sp, #8]
   14808:	mov	r6, r2
   1480c:	strd	r8, [sp, #16]
   14810:	mov	r9, r0
   14814:	strd	sl, [sp, #24]
   14818:	mov	sl, r1
   1481c:	str	lr, [sp, #32]
   14820:	sub	sp, sp, #44	; 0x2c
   14824:	bl	10de0 <__errno_location@plt>
   14828:	ldr	r5, [r4, #4]
   1482c:	mov	r7, r0
   14830:	mov	r1, #0
   14834:	add	r8, r4, #8
   14838:	mov	r3, sl
   1483c:	ldr	ip, [r4, #44]	; 0x2c
   14840:	mov	r2, r9
   14844:	mov	r0, r1
   14848:	ldr	lr, [r7]
   1484c:	cmp	r6, r1
   14850:	orreq	r5, r5, #1
   14854:	str	ip, [sp, #16]
   14858:	ldr	ip, [r4, #40]	; 0x28
   1485c:	stmib	sp, {r5, r8, ip}
   14860:	ldr	ip, [r4]
   14864:	str	lr, [sp, #28]
   14868:	str	ip, [sp]
   1486c:	bl	129a0 <__assert_fail@plt+0x1adc>
   14870:	add	r1, r0, #1
   14874:	mov	fp, r0
   14878:	mov	r0, r1
   1487c:	str	r1, [sp, #36]	; 0x24
   14880:	bl	16a08 <__assert_fail@plt+0x5b44>
   14884:	ldr	ip, [r4, #44]	; 0x2c
   14888:	mov	r3, sl
   1488c:	mov	r2, r9
   14890:	ldr	r1, [sp, #36]	; 0x24
   14894:	str	ip, [sp, #16]
   14898:	ldr	ip, [r4, #40]	; 0x28
   1489c:	str	r0, [sp, #32]
   148a0:	stmib	sp, {r5, r8, ip}
   148a4:	ldr	ip, [r4]
   148a8:	str	ip, [sp]
   148ac:	bl	129a0 <__assert_fail@plt+0x1adc>
   148b0:	ldr	lr, [sp, #28]
   148b4:	cmp	r6, #0
   148b8:	ldr	r0, [sp, #32]
   148bc:	str	lr, [r7]
   148c0:	strne	fp, [r6]
   148c4:	add	sp, sp, #44	; 0x2c
   148c8:	ldrd	r4, [sp]
   148cc:	ldrd	r6, [sp, #8]
   148d0:	ldrd	r8, [sp, #16]
   148d4:	ldrd	sl, [sp, #24]
   148d8:	add	sp, sp, #32
   148dc:	pop	{pc}		; (ldr pc, [sp], #4)
   148e0:	andeq	r9, r2, r8, lsr #5
   148e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   148e8:	movw	r5, #37108	; 0x90f4
   148ec:	movt	r5, #2
   148f0:	ldr	r3, [r5, #4]
   148f4:	strd	r6, [sp, #8]
   148f8:	str	r8, [sp, #16]
   148fc:	str	lr, [sp, #20]
   14900:	ldr	r7, [r5]
   14904:	cmp	r3, #1
   14908:	ble	1492c <__assert_fail@plt+0x3a68>
   1490c:	mov	r4, #1
   14910:	add	r6, r7, #4
   14914:	ldr	r0, [r6, r4, lsl #3]
   14918:	add	r4, r4, #1
   1491c:	bl	1264c <__assert_fail@plt+0x1788>
   14920:	ldr	r3, [r5, #4]
   14924:	cmp	r3, r4
   14928:	bgt	14914 <__assert_fail@plt+0x3a50>
   1492c:	ldr	r0, [r7, #4]
   14930:	movw	r4, #37288	; 0x91a8
   14934:	movt	r4, #2
   14938:	cmp	r0, r4
   1493c:	beq	14950 <__assert_fail@plt+0x3a8c>
   14940:	bl	1264c <__assert_fail@plt+0x1788>
   14944:	mov	r3, #256	; 0x100
   14948:	str	r3, [r5, #8]
   1494c:	str	r4, [r5, #12]
   14950:	ldr	r4, [pc, #44]	; 14984 <__assert_fail@plt+0x3ac0>
   14954:	cmp	r7, r4
   14958:	beq	14968 <__assert_fail@plt+0x3aa4>
   1495c:	mov	r0, r7
   14960:	bl	1264c <__assert_fail@plt+0x1788>
   14964:	str	r4, [r5]
   14968:	mov	r3, #1
   1496c:	ldrd	r6, [sp, #8]
   14970:	str	r3, [r5, #4]
   14974:	ldrd	r4, [sp]
   14978:	ldr	r8, [sp, #16]
   1497c:	add	sp, sp, #20
   14980:	pop	{pc}		; (ldr pc, [sp], #4)
   14984:	strdeq	r9, [r2], -ip
   14988:	ldr	r3, [pc, #4]	; 14994 <__assert_fail@plt+0x3ad0>
   1498c:	mvn	r2, #0
   14990:	b	1438c <__assert_fail@plt+0x34c8>
   14994:	andeq	r9, r2, r8, lsr #5
   14998:	ldr	r3, [pc]	; 149a0 <__assert_fail@plt+0x3adc>
   1499c:	b	1438c <__assert_fail@plt+0x34c8>
   149a0:	andeq	r9, r2, r8, lsr #5
   149a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   149a8:	movw	r4, #37108	; 0x90f4
   149ac:	movt	r4, #2
   149b0:	strd	r6, [sp, #8]
   149b4:	strd	r8, [sp, #16]
   149b8:	strd	sl, [sp, #24]
   149bc:	mov	sl, r0
   149c0:	str	lr, [sp, #32]
   149c4:	sub	sp, sp, #44	; 0x2c
   149c8:	bl	10de0 <__errno_location@plt>
   149cc:	ldr	r3, [r0]
   149d0:	mov	r8, r0
   149d4:	ldr	r2, [r4, #4]
   149d8:	ldr	r5, [r4]
   149dc:	str	r3, [sp, #28]
   149e0:	cmp	r2, #0
   149e4:	bgt	14a40 <__assert_fail@plt+0x3b7c>
   149e8:	add	r3, r4, #8
   149ec:	str	r2, [sp, #36]	; 0x24
   149f0:	rsb	r2, r2, #1
   149f4:	cmp	r5, r3
   149f8:	beq	14b0c <__assert_fail@plt+0x3c48>
   149fc:	mov	r1, #8
   14a00:	mov	r0, r5
   14a04:	mvn	r3, #-2147483648	; 0x80000000
   14a08:	str	r1, [sp]
   14a0c:	add	r1, sp, #36	; 0x24
   14a10:	bl	16cac <__assert_fail@plt+0x5de8>
   14a14:	mov	r5, r0
   14a18:	str	r0, [r4]
   14a1c:	ldr	r0, [r4, #4]
   14a20:	mov	r1, #0
   14a24:	ldr	r2, [sp, #36]	; 0x24
   14a28:	sub	r2, r2, r0
   14a2c:	add	r0, r5, r0, lsl #3
   14a30:	lsl	r2, r2, #3
   14a34:	bl	10df8 <memset@plt>
   14a38:	ldr	r3, [sp, #36]	; 0x24
   14a3c:	str	r3, [r4, #4]
   14a40:	movw	r4, #37288	; 0x91a8
   14a44:	movt	r4, #2
   14a48:	ldr	r9, [r5]
   14a4c:	add	fp, r4, #264	; 0x108
   14a50:	mvn	r3, #0
   14a54:	ldr	r7, [r4, #260]	; 0x104
   14a58:	mov	r2, sl
   14a5c:	ldr	r6, [r5, #4]
   14a60:	str	fp, [sp, #8]
   14a64:	mov	r1, r9
   14a68:	ldr	ip, [r4, #256]	; 0x100
   14a6c:	orr	r7, r7, #1
   14a70:	ldr	lr, [r4, #300]	; 0x12c
   14a74:	mov	r0, r6
   14a78:	str	ip, [sp]
   14a7c:	str	r7, [sp, #4]
   14a80:	str	lr, [sp, #16]
   14a84:	ldr	ip, [r4, #296]	; 0x128
   14a88:	str	ip, [sp, #12]
   14a8c:	bl	129a0 <__assert_fail@plt+0x1adc>
   14a90:	cmp	r9, r0
   14a94:	bhi	14ae4 <__assert_fail@plt+0x3c20>
   14a98:	add	r9, r0, #1
   14a9c:	cmp	r6, r4
   14aa0:	str	r9, [r5]
   14aa4:	beq	14ab0 <__assert_fail@plt+0x3bec>
   14aa8:	mov	r0, r6
   14aac:	bl	1264c <__assert_fail@plt+0x1788>
   14ab0:	mov	r0, r9
   14ab4:	bl	16a08 <__assert_fail@plt+0x5b44>
   14ab8:	ldr	r3, [r4, #256]	; 0x100
   14abc:	mov	r2, sl
   14ac0:	mov	r1, r9
   14ac4:	mov	r6, r0
   14ac8:	ldr	lr, [r4, #296]	; 0x128
   14acc:	ldr	ip, [r4, #300]	; 0x12c
   14ad0:	str	r0, [r5, #4]
   14ad4:	stm	sp, {r3, r7, fp, lr}
   14ad8:	mvn	r3, #0
   14adc:	str	ip, [sp, #16]
   14ae0:	bl	129a0 <__assert_fail@plt+0x1adc>
   14ae4:	ldr	r3, [sp, #28]
   14ae8:	mov	r0, r6
   14aec:	str	r3, [r8]
   14af0:	add	sp, sp, #44	; 0x2c
   14af4:	ldrd	r4, [sp]
   14af8:	ldrd	r6, [sp, #8]
   14afc:	ldrd	r8, [sp, #16]
   14b00:	ldrd	sl, [sp, #24]
   14b04:	add	sp, sp, #32
   14b08:	pop	{pc}		; (ldr pc, [sp], #4)
   14b0c:	mov	r0, #8
   14b10:	mvn	r3, #-2147483648	; 0x80000000
   14b14:	add	r1, sp, #36	; 0x24
   14b18:	str	r0, [sp]
   14b1c:	mov	r0, #0
   14b20:	bl	16cac <__assert_fail@plt+0x5de8>
   14b24:	ldrd	r2, [r4, #8]
   14b28:	mov	r5, r0
   14b2c:	str	r0, [r4]
   14b30:	strd	r2, [r0]
   14b34:	b	14a1c <__assert_fail@plt+0x3b58>
   14b38:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14b3c:	movw	r4, #37108	; 0x90f4
   14b40:	movt	r4, #2
   14b44:	strd	r6, [sp, #8]
   14b48:	strd	r8, [sp, #16]
   14b4c:	strd	sl, [sp, #24]
   14b50:	mov	sl, r0
   14b54:	mov	fp, r1
   14b58:	str	lr, [sp, #32]
   14b5c:	sub	sp, sp, #44	; 0x2c
   14b60:	bl	10de0 <__errno_location@plt>
   14b64:	ldr	r3, [r0]
   14b68:	mov	r8, r0
   14b6c:	ldr	r2, [r4, #4]
   14b70:	ldr	r5, [r4]
   14b74:	str	r3, [sp, #28]
   14b78:	cmp	r2, #0
   14b7c:	bgt	14bd8 <__assert_fail@plt+0x3d14>
   14b80:	add	r3, r4, #8
   14b84:	str	r2, [sp, #36]	; 0x24
   14b88:	rsb	r2, r2, #1
   14b8c:	cmp	r5, r3
   14b90:	beq	14cb4 <__assert_fail@plt+0x3df0>
   14b94:	mov	r1, #8
   14b98:	mov	r0, r5
   14b9c:	mvn	r3, #-2147483648	; 0x80000000
   14ba0:	str	r1, [sp]
   14ba4:	add	r1, sp, #36	; 0x24
   14ba8:	bl	16cac <__assert_fail@plt+0x5de8>
   14bac:	mov	r5, r0
   14bb0:	str	r0, [r4]
   14bb4:	ldr	r0, [r4, #4]
   14bb8:	mov	r1, #0
   14bbc:	ldr	r2, [sp, #36]	; 0x24
   14bc0:	sub	r2, r2, r0
   14bc4:	add	r0, r5, r0, lsl #3
   14bc8:	lsl	r2, r2, #3
   14bcc:	bl	10df8 <memset@plt>
   14bd0:	ldr	r3, [sp, #36]	; 0x24
   14bd4:	str	r3, [r4, #4]
   14bd8:	movw	r4, #37288	; 0x91a8
   14bdc:	movt	r4, #2
   14be0:	ldr	r9, [r5]
   14be4:	add	r0, r4, #264	; 0x108
   14be8:	mov	r3, fp
   14bec:	ldr	r7, [r4, #260]	; 0x104
   14bf0:	mov	r2, sl
   14bf4:	ldr	r6, [r5, #4]
   14bf8:	str	r0, [sp, #8]
   14bfc:	mov	r1, r9
   14c00:	ldr	ip, [r4, #256]	; 0x100
   14c04:	orr	r7, r7, #1
   14c08:	ldr	lr, [r4, #300]	; 0x12c
   14c0c:	mov	r0, r6
   14c10:	str	ip, [sp]
   14c14:	str	r7, [sp, #4]
   14c18:	str	lr, [sp, #16]
   14c1c:	ldr	ip, [r4, #296]	; 0x128
   14c20:	str	ip, [sp, #12]
   14c24:	bl	129a0 <__assert_fail@plt+0x1adc>
   14c28:	cmp	r9, r0
   14c2c:	bhi	14c8c <__assert_fail@plt+0x3dc8>
   14c30:	add	r9, r0, #1
   14c34:	cmp	r6, r4
   14c38:	str	r9, [r5]
   14c3c:	beq	14c48 <__assert_fail@plt+0x3d84>
   14c40:	mov	r0, r6
   14c44:	bl	1264c <__assert_fail@plt+0x1788>
   14c48:	mov	r0, r9
   14c4c:	bl	16a08 <__assert_fail@plt+0x5b44>
   14c50:	ldr	ip, [r4, #256]	; 0x100
   14c54:	mov	r1, r9
   14c58:	mov	r3, fp
   14c5c:	mov	r2, sl
   14c60:	mov	r6, r0
   14c64:	ldr	r9, [r4, #296]	; 0x128
   14c68:	ldr	lr, [r4, #300]	; 0x12c
   14c6c:	str	r0, [r5, #4]
   14c70:	str	ip, [sp]
   14c74:	ldr	ip, [pc, #100]	; 14ce0 <__assert_fail@plt+0x3e1c>
   14c78:	str	r7, [sp, #4]
   14c7c:	str	ip, [sp, #8]
   14c80:	str	r9, [sp, #12]
   14c84:	str	lr, [sp, #16]
   14c88:	bl	129a0 <__assert_fail@plt+0x1adc>
   14c8c:	ldr	r3, [sp, #28]
   14c90:	mov	r0, r6
   14c94:	str	r3, [r8]
   14c98:	add	sp, sp, #44	; 0x2c
   14c9c:	ldrd	r4, [sp]
   14ca0:	ldrd	r6, [sp, #8]
   14ca4:	ldrd	r8, [sp, #16]
   14ca8:	ldrd	sl, [sp, #24]
   14cac:	add	sp, sp, #32
   14cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   14cb4:	mov	r0, #8
   14cb8:	mvn	r3, #-2147483648	; 0x80000000
   14cbc:	add	r1, sp, #36	; 0x24
   14cc0:	str	r0, [sp]
   14cc4:	mov	r0, #0
   14cc8:	bl	16cac <__assert_fail@plt+0x5de8>
   14ccc:	ldrd	r2, [r4, #8]
   14cd0:	mov	r5, r0
   14cd4:	str	r0, [r4]
   14cd8:	strd	r2, [r0]
   14cdc:	b	14bb4 <__assert_fail@plt+0x3cf0>
   14ce0:			; <UNDEFINED> instruction: 0x000292b0
   14ce4:	strd	r4, [sp, #-20]!	; 0xffffffec
   14ce8:	mov	r4, #0
   14cec:	mov	r5, #0
   14cf0:	strd	r6, [sp, #8]
   14cf4:	cmp	r1, #10
   14cf8:	str	lr, [sp, #16]
   14cfc:	sub	sp, sp, #100	; 0x64
   14d00:	strd	r4, [sp, #48]	; 0x30
   14d04:	beq	14d4c <__assert_fail@plt+0x3e88>
   14d08:	mov	r3, sp
   14d0c:	strd	r4, [sp, #8]
   14d10:	str	r1, [sp, #48]	; 0x30
   14d14:	mov	r1, r2
   14d18:	mvn	r2, #0
   14d1c:	ldrd	r6, [sp, #48]	; 0x30
   14d20:	strd	r6, [sp]
   14d24:	strd	r4, [sp, #16]
   14d28:	strd	r4, [sp, #24]
   14d2c:	strd	r4, [sp, #32]
   14d30:	strd	r4, [sp, #40]	; 0x28
   14d34:	bl	1438c <__assert_fail@plt+0x34c8>
   14d38:	add	sp, sp, #100	; 0x64
   14d3c:	ldrd	r4, [sp]
   14d40:	ldrd	r6, [sp, #8]
   14d44:	add	sp, sp, #16
   14d48:	pop	{pc}		; (ldr pc, [sp], #4)
   14d4c:	bl	10eac <abort@plt>
   14d50:	strd	r4, [sp, #-20]!	; 0xffffffec
   14d54:	mov	r4, #0
   14d58:	mov	r5, #0
   14d5c:	strd	r6, [sp, #8]
   14d60:	cmp	r1, #10
   14d64:	str	lr, [sp, #16]
   14d68:	sub	sp, sp, #100	; 0x64
   14d6c:	strd	r4, [sp, #48]	; 0x30
   14d70:	beq	14dbc <__assert_fail@plt+0x3ef8>
   14d74:	mov	ip, r2
   14d78:	mov	r2, r3
   14d7c:	strd	r4, [sp, #8]
   14d80:	str	r1, [sp, #48]	; 0x30
   14d84:	mov	r3, sp
   14d88:	mov	r1, ip
   14d8c:	ldrd	r6, [sp, #48]	; 0x30
   14d90:	strd	r6, [sp]
   14d94:	strd	r4, [sp, #16]
   14d98:	strd	r4, [sp, #24]
   14d9c:	strd	r4, [sp, #32]
   14da0:	strd	r4, [sp, #40]	; 0x28
   14da4:	bl	1438c <__assert_fail@plt+0x34c8>
   14da8:	add	sp, sp, #100	; 0x64
   14dac:	ldrd	r4, [sp]
   14db0:	ldrd	r6, [sp, #8]
   14db4:	add	sp, sp, #16
   14db8:	pop	{pc}		; (ldr pc, [sp], #4)
   14dbc:	bl	10eac <abort@plt>
   14dc0:	mov	r2, #0
   14dc4:	mov	r3, #0
   14dc8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14dcc:	strd	r6, [sp, #8]
   14dd0:	cmp	r0, #10
   14dd4:	strd	r8, [sp, #16]
   14dd8:	strd	sl, [sp, #24]
   14ddc:	str	lr, [sp, #32]
   14de0:	sub	sp, sp, #124	; 0x7c
   14de4:	strd	r2, [sp, #72]	; 0x48
   14de8:	strd	r2, [sp, #80]	; 0x50
   14dec:	strd	r2, [sp, #88]	; 0x58
   14df0:	strd	r2, [sp, #96]	; 0x60
   14df4:	strd	r2, [sp, #104]	; 0x68
   14df8:	strd	r2, [sp, #112]	; 0x70
   14dfc:	beq	14fa0 <__assert_fail@plt+0x40dc>
   14e00:	mov	r6, r1
   14e04:	movw	r4, #37108	; 0x90f4
   14e08:	movt	r4, #2
   14e0c:	str	r0, [sp, #72]	; 0x48
   14e10:	ldrd	r0, [sp, #72]	; 0x48
   14e14:	strd	r0, [sp, #24]
   14e18:	strd	r2, [sp, #32]
   14e1c:	strd	r2, [sp, #40]	; 0x28
   14e20:	strd	r2, [sp, #48]	; 0x30
   14e24:	strd	r2, [sp, #56]	; 0x38
   14e28:	strd	r2, [sp, #64]	; 0x40
   14e2c:	bl	10de0 <__errno_location@plt>
   14e30:	mov	r8, r0
   14e34:	ldr	r5, [r4]
   14e38:	ldr	r2, [r4, #4]
   14e3c:	ldr	r9, [r0]
   14e40:	cmp	r2, #0
   14e44:	bgt	14ea0 <__assert_fail@plt+0x3fdc>
   14e48:	add	r3, r4, #8
   14e4c:	str	r2, [sp, #72]	; 0x48
   14e50:	rsb	r2, r2, #1
   14e54:	cmp	r5, r3
   14e58:	beq	14f74 <__assert_fail@plt+0x40b0>
   14e5c:	mov	r3, #8
   14e60:	mov	r0, r5
   14e64:	add	r1, sp, #72	; 0x48
   14e68:	str	r3, [sp]
   14e6c:	mvn	r3, #-2147483648	; 0x80000000
   14e70:	bl	16cac <__assert_fail@plt+0x5de8>
   14e74:	mov	r5, r0
   14e78:	str	r0, [r4]
   14e7c:	ldr	r0, [r4, #4]
   14e80:	mov	r1, #0
   14e84:	ldr	r2, [sp, #72]	; 0x48
   14e88:	sub	r2, r2, r0
   14e8c:	add	r0, r5, r0, lsl #3
   14e90:	lsl	r2, r2, #3
   14e94:	bl	10df8 <memset@plt>
   14e98:	ldr	r3, [sp, #72]	; 0x48
   14e9c:	str	r3, [r4, #4]
   14ea0:	ldr	sl, [r5]
   14ea4:	add	r0, sp, #32
   14ea8:	mvn	r3, #0
   14eac:	mov	r2, r6
   14eb0:	ldr	r7, [sp, #28]
   14eb4:	ldr	r4, [r5, #4]
   14eb8:	mov	r1, sl
   14ebc:	str	r0, [sp, #8]
   14ec0:	ldr	lr, [sp, #24]
   14ec4:	orr	r7, r7, #1
   14ec8:	ldr	ip, [sp, #64]	; 0x40
   14ecc:	mov	r0, r4
   14ed0:	ldr	fp, [sp, #68]	; 0x44
   14ed4:	str	lr, [sp]
   14ed8:	str	r7, [sp, #4]
   14edc:	str	ip, [sp, #12]
   14ee0:	str	fp, [sp, #16]
   14ee4:	bl	129a0 <__assert_fail@plt+0x1adc>
   14ee8:	cmp	sl, r0
   14eec:	bhi	14f50 <__assert_fail@plt+0x408c>
   14ef0:	add	sl, r0, #1
   14ef4:	movw	r3, #37288	; 0x91a8
   14ef8:	movt	r3, #2
   14efc:	cmp	r4, r3
   14f00:	str	sl, [r5]
   14f04:	beq	14f10 <__assert_fail@plt+0x404c>
   14f08:	mov	r0, r4
   14f0c:	bl	1264c <__assert_fail@plt+0x1788>
   14f10:	mov	r0, sl
   14f14:	bl	16a08 <__assert_fail@plt+0x5b44>
   14f18:	ldr	r3, [sp, #24]
   14f1c:	mov	r2, r6
   14f20:	mov	r1, sl
   14f24:	mov	r4, r0
   14f28:	ldr	lr, [sp, #64]	; 0x40
   14f2c:	ldr	ip, [sp, #68]	; 0x44
   14f30:	str	r0, [r5, #4]
   14f34:	add	r5, sp, #32
   14f38:	stm	sp, {r3, r7}
   14f3c:	mvn	r3, #0
   14f40:	str	r5, [sp, #8]
   14f44:	str	lr, [sp, #12]
   14f48:	str	ip, [sp, #16]
   14f4c:	bl	129a0 <__assert_fail@plt+0x1adc>
   14f50:	mov	r0, r4
   14f54:	str	r9, [r8]
   14f58:	add	sp, sp, #124	; 0x7c
   14f5c:	ldrd	r4, [sp]
   14f60:	ldrd	r6, [sp, #8]
   14f64:	ldrd	r8, [sp, #16]
   14f68:	ldrd	sl, [sp, #24]
   14f6c:	add	sp, sp, #32
   14f70:	pop	{pc}		; (ldr pc, [sp], #4)
   14f74:	mov	r0, #8
   14f78:	mvn	r3, #-2147483648	; 0x80000000
   14f7c:	add	r1, sp, #72	; 0x48
   14f80:	str	r0, [sp]
   14f84:	mov	r0, #0
   14f88:	bl	16cac <__assert_fail@plt+0x5de8>
   14f8c:	ldrd	r2, [r4, #8]
   14f90:	mov	r5, r0
   14f94:	str	r0, [r4]
   14f98:	strd	r2, [r0]
   14f9c:	b	14e7c <__assert_fail@plt+0x3fb8>
   14fa0:	bl	10eac <abort@plt>
   14fa4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14fa8:	cmp	r0, #10
   14fac:	strd	r6, [sp, #8]
   14fb0:	mov	r6, #0
   14fb4:	mov	r7, #0
   14fb8:	strd	r8, [sp, #16]
   14fbc:	strd	sl, [sp, #24]
   14fc0:	str	lr, [sp, #32]
   14fc4:	sub	sp, sp, #124	; 0x7c
   14fc8:	strd	r6, [sp, #72]	; 0x48
   14fcc:	strd	r6, [sp, #80]	; 0x50
   14fd0:	strd	r6, [sp, #88]	; 0x58
   14fd4:	strd	r6, [sp, #96]	; 0x60
   14fd8:	strd	r6, [sp, #104]	; 0x68
   14fdc:	strd	r6, [sp, #112]	; 0x70
   14fe0:	beq	1518c <__assert_fail@plt+0x42c8>
   14fe4:	mov	sl, r2
   14fe8:	movw	r5, #37108	; 0x90f4
   14fec:	movt	r5, #2
   14ff0:	str	r0, [sp, #72]	; 0x48
   14ff4:	mov	r9, r1
   14ff8:	ldrd	r2, [sp, #72]	; 0x48
   14ffc:	strd	r2, [sp, #24]
   15000:	strd	r6, [sp, #32]
   15004:	strd	r6, [sp, #40]	; 0x28
   15008:	strd	r6, [sp, #48]	; 0x30
   1500c:	strd	r6, [sp, #56]	; 0x38
   15010:	strd	r6, [sp, #64]	; 0x40
   15014:	bl	10de0 <__errno_location@plt>
   15018:	mov	r7, r0
   1501c:	ldr	r4, [r5]
   15020:	ldr	r2, [r5, #4]
   15024:	ldr	fp, [r0]
   15028:	cmp	r2, #0
   1502c:	bgt	15088 <__assert_fail@plt+0x41c4>
   15030:	add	r3, r5, #8
   15034:	str	r2, [sp, #72]	; 0x48
   15038:	rsb	r2, r2, #1
   1503c:	cmp	r4, r3
   15040:	beq	15160 <__assert_fail@plt+0x429c>
   15044:	mov	r3, #8
   15048:	mov	r0, r4
   1504c:	add	r1, sp, #72	; 0x48
   15050:	str	r3, [sp]
   15054:	mvn	r3, #-2147483648	; 0x80000000
   15058:	bl	16cac <__assert_fail@plt+0x5de8>
   1505c:	mov	r4, r0
   15060:	str	r0, [r5]
   15064:	ldr	r0, [r5, #4]
   15068:	mov	r1, #0
   1506c:	ldr	r2, [sp, #72]	; 0x48
   15070:	sub	r2, r2, r0
   15074:	add	r0, r4, r0, lsl #3
   15078:	lsl	r2, r2, #3
   1507c:	bl	10df8 <memset@plt>
   15080:	ldr	r3, [sp, #72]	; 0x48
   15084:	str	r3, [r5, #4]
   15088:	ldr	ip, [sp, #24]
   1508c:	add	r0, sp, #32
   15090:	mov	r3, sl
   15094:	mov	r2, r9
   15098:	ldr	r6, [sp, #28]
   1509c:	ldr	r8, [r4]
   150a0:	ldr	r5, [r4, #4]
   150a4:	str	ip, [sp]
   150a8:	orr	r6, r6, #1
   150ac:	ldr	ip, [sp, #64]	; 0x40
   150b0:	mov	r1, r8
   150b4:	str	r6, [sp, #4]
   150b8:	ldr	lr, [sp, #68]	; 0x44
   150bc:	str	r0, [sp, #8]
   150c0:	mov	r0, r5
   150c4:	str	ip, [sp, #12]
   150c8:	str	lr, [sp, #16]
   150cc:	bl	129a0 <__assert_fail@plt+0x1adc>
   150d0:	cmp	r8, r0
   150d4:	bhi	1513c <__assert_fail@plt+0x4278>
   150d8:	add	r8, r0, #1
   150dc:	movw	r3, #37288	; 0x91a8
   150e0:	movt	r3, #2
   150e4:	cmp	r5, r3
   150e8:	str	r8, [r4]
   150ec:	beq	150f8 <__assert_fail@plt+0x4234>
   150f0:	mov	r0, r5
   150f4:	bl	1264c <__assert_fail@plt+0x1788>
   150f8:	mov	r0, r8
   150fc:	bl	16a08 <__assert_fail@plt+0x5b44>
   15100:	ldr	lr, [sp, #24]
   15104:	mov	r1, r8
   15108:	mov	r3, sl
   1510c:	mov	r2, r9
   15110:	mov	r5, r0
   15114:	ldr	r8, [sp, #64]	; 0x40
   15118:	ldr	ip, [sp, #68]	; 0x44
   1511c:	str	r0, [r4, #4]
   15120:	str	lr, [sp]
   15124:	add	lr, sp, #32
   15128:	str	r6, [sp, #4]
   1512c:	str	lr, [sp, #8]
   15130:	str	r8, [sp, #12]
   15134:	str	ip, [sp, #16]
   15138:	bl	129a0 <__assert_fail@plt+0x1adc>
   1513c:	mov	r0, r5
   15140:	str	fp, [r7]
   15144:	add	sp, sp, #124	; 0x7c
   15148:	ldrd	r4, [sp]
   1514c:	ldrd	r6, [sp, #8]
   15150:	ldrd	r8, [sp, #16]
   15154:	ldrd	sl, [sp, #24]
   15158:	add	sp, sp, #32
   1515c:	pop	{pc}		; (ldr pc, [sp], #4)
   15160:	mov	r0, #8
   15164:	mvn	r3, #-2147483648	; 0x80000000
   15168:	add	r1, sp, #72	; 0x48
   1516c:	str	r0, [sp]
   15170:	mov	r0, #0
   15174:	bl	16cac <__assert_fail@plt+0x5de8>
   15178:	ldrd	r2, [r5, #8]
   1517c:	mov	r4, r0
   15180:	str	r0, [r5]
   15184:	strd	r2, [r0]
   15188:	b	15064 <__assert_fail@plt+0x41a0>
   1518c:	bl	10eac <abort@plt>
   15190:	ldr	r3, [pc, #492]	; 15384 <__assert_fail@plt+0x44c0>
   15194:	lsr	ip, r2, #5
   15198:	and	r2, r2, #31
   1519c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   151a0:	movw	r5, #37108	; 0x90f4
   151a4:	movt	r5, #2
   151a8:	strd	r6, [sp, #8]
   151ac:	strd	r8, [sp, #16]
   151b0:	strd	sl, [sp, #24]
   151b4:	mov	sl, r0
   151b8:	mov	fp, r1
   151bc:	ldrd	r0, [r3]
   151c0:	str	lr, [sp, #32]
   151c4:	sub	sp, sp, #92	; 0x5c
   151c8:	ldrd	r8, [r3, #8]
   151cc:	add	r6, sp, #48	; 0x30
   151d0:	strd	r0, [sp, #40]	; 0x28
   151d4:	ldrd	r0, [r3, #16]
   151d8:	strd	r8, [sp, #48]	; 0x30
   151dc:	ldrd	r8, [r3, #24]
   151e0:	strd	r0, [sp, #56]	; 0x38
   151e4:	ldrd	r0, [r3, #32]
   151e8:	strd	r8, [sp, #64]	; 0x40
   151ec:	ldrd	r8, [r3, #40]	; 0x28
   151f0:	strd	r0, [sp, #72]	; 0x48
   151f4:	strd	r8, [sp, #80]	; 0x50
   151f8:	ldr	r3, [r6, ip, lsl #2]
   151fc:	mvn	r1, r3, lsr r2
   15200:	and	r1, r1, #1
   15204:	eor	r2, r3, r1, lsl r2
   15208:	str	r2, [r6, ip, lsl #2]
   1520c:	bl	10de0 <__errno_location@plt>
   15210:	ldr	r3, [r0]
   15214:	mov	r8, r0
   15218:	ldr	r2, [r5, #4]
   1521c:	ldr	r4, [r5]
   15220:	str	r3, [sp, #28]
   15224:	cmp	r2, #0
   15228:	bgt	15284 <__assert_fail@plt+0x43c0>
   1522c:	add	r3, r5, #8
   15230:	str	r2, [sp, #36]	; 0x24
   15234:	rsb	r2, r2, #1
   15238:	cmp	r4, r3
   1523c:	beq	15358 <__assert_fail@plt+0x4494>
   15240:	mov	r1, #8
   15244:	mov	r0, r4
   15248:	mvn	r3, #-2147483648	; 0x80000000
   1524c:	str	r1, [sp]
   15250:	add	r1, sp, #36	; 0x24
   15254:	bl	16cac <__assert_fail@plt+0x5de8>
   15258:	mov	r4, r0
   1525c:	str	r0, [r5]
   15260:	ldr	r0, [r5, #4]
   15264:	mov	r1, #0
   15268:	ldr	r2, [sp, #36]	; 0x24
   1526c:	sub	r2, r2, r0
   15270:	add	r0, r4, r0, lsl #3
   15274:	lsl	r2, r2, #3
   15278:	bl	10df8 <memset@plt>
   1527c:	ldr	r3, [sp, #36]	; 0x24
   15280:	str	r3, [r5, #4]
   15284:	ldr	ip, [sp, #40]	; 0x28
   15288:	mov	r3, fp
   1528c:	mov	r2, sl
   15290:	ldr	r7, [sp, #44]	; 0x2c
   15294:	ldr	r9, [r4]
   15298:	ldr	r5, [r4, #4]
   1529c:	str	ip, [sp]
   152a0:	orr	r7, r7, #1
   152a4:	ldr	ip, [sp, #80]	; 0x50
   152a8:	mov	r1, r9
   152ac:	str	r7, [sp, #4]
   152b0:	ldr	lr, [sp, #84]	; 0x54
   152b4:	mov	r0, r5
   152b8:	str	r6, [sp, #8]
   152bc:	str	ip, [sp, #12]
   152c0:	str	lr, [sp, #16]
   152c4:	bl	129a0 <__assert_fail@plt+0x1adc>
   152c8:	cmp	r9, r0
   152cc:	bhi	15330 <__assert_fail@plt+0x446c>
   152d0:	add	r9, r0, #1
   152d4:	movw	r3, #37288	; 0x91a8
   152d8:	movt	r3, #2
   152dc:	cmp	r5, r3
   152e0:	str	r9, [r4]
   152e4:	beq	152f0 <__assert_fail@plt+0x442c>
   152e8:	mov	r0, r5
   152ec:	bl	1264c <__assert_fail@plt+0x1788>
   152f0:	mov	r0, r9
   152f4:	bl	16a08 <__assert_fail@plt+0x5b44>
   152f8:	mov	r1, r9
   152fc:	ldr	ip, [sp, #40]	; 0x28
   15300:	mov	r3, fp
   15304:	mov	r2, sl
   15308:	mov	r5, r0
   1530c:	ldr	r9, [sp, #80]	; 0x50
   15310:	ldr	lr, [sp, #84]	; 0x54
   15314:	str	r0, [r4, #4]
   15318:	str	ip, [sp]
   1531c:	str	r7, [sp, #4]
   15320:	str	r6, [sp, #8]
   15324:	str	r9, [sp, #12]
   15328:	str	lr, [sp, #16]
   1532c:	bl	129a0 <__assert_fail@plt+0x1adc>
   15330:	ldr	r3, [sp, #28]
   15334:	mov	r0, r5
   15338:	str	r3, [r8]
   1533c:	add	sp, sp, #92	; 0x5c
   15340:	ldrd	r4, [sp]
   15344:	ldrd	r6, [sp, #8]
   15348:	ldrd	r8, [sp, #16]
   1534c:	ldrd	sl, [sp, #24]
   15350:	add	sp, sp, #32
   15354:	pop	{pc}		; (ldr pc, [sp], #4)
   15358:	mov	r0, #8
   1535c:	mvn	r3, #-2147483648	; 0x80000000
   15360:	add	r1, sp, #36	; 0x24
   15364:	str	r0, [sp]
   15368:	mov	r0, #0
   1536c:	bl	16cac <__assert_fail@plt+0x5de8>
   15370:	ldrd	r2, [r5, #8]
   15374:	mov	r4, r0
   15378:	str	r0, [r5]
   1537c:	strd	r2, [r0]
   15380:	b	15260 <__assert_fail@plt+0x439c>
   15384:	andeq	r9, r2, r8, lsr #5
   15388:	ldr	ip, [pc, #476]	; 1556c <__assert_fail@plt+0x46a8>
   1538c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15390:	movw	r4, #37108	; 0x90f4
   15394:	movt	r4, #2
   15398:	ldrd	r2, [ip, #8]
   1539c:	strd	r6, [sp, #8]
   153a0:	lsr	r7, r1, #5
   153a4:	mov	r6, r0
   153a8:	strd	r8, [sp, #16]
   153ac:	str	lr, [sp, #32]
   153b0:	and	lr, r1, #31
   153b4:	ldrd	r0, [ip]
   153b8:	strd	sl, [sp, #24]
   153bc:	sub	sp, sp, #84	; 0x54
   153c0:	add	r5, sp, #40	; 0x28
   153c4:	strd	r0, [sp, #32]
   153c8:	strd	r2, [sp, #40]	; 0x28
   153cc:	ldrd	r0, [ip, #16]
   153d0:	ldrd	r2, [ip, #24]
   153d4:	strd	r0, [sp, #48]	; 0x30
   153d8:	ldrd	r0, [ip, #32]
   153dc:	strd	r2, [sp, #56]	; 0x38
   153e0:	ldrd	r2, [ip, #40]	; 0x28
   153e4:	strd	r0, [sp, #64]	; 0x40
   153e8:	strd	r2, [sp, #72]	; 0x48
   153ec:	ldr	r1, [r5, r7, lsl #2]
   153f0:	mvn	r3, r1, lsr lr
   153f4:	and	r3, r3, #1
   153f8:	eor	r1, r1, r3, lsl lr
   153fc:	str	r1, [r5, r7, lsl #2]
   15400:	bl	10de0 <__errno_location@plt>
   15404:	mov	r9, r0
   15408:	ldr	sl, [r0]
   1540c:	ldr	r2, [r4, #4]
   15410:	ldr	r7, [r4]
   15414:	cmp	r2, #0
   15418:	bgt	15474 <__assert_fail@plt+0x45b0>
   1541c:	add	r3, r4, #8
   15420:	str	r2, [sp, #28]
   15424:	rsb	r2, r2, #1
   15428:	cmp	r7, r3
   1542c:	beq	15540 <__assert_fail@plt+0x467c>
   15430:	mov	r1, #8
   15434:	mov	r0, r7
   15438:	mvn	r3, #-2147483648	; 0x80000000
   1543c:	str	r1, [sp]
   15440:	add	r1, sp, #28
   15444:	bl	16cac <__assert_fail@plt+0x5de8>
   15448:	mov	r7, r0
   1544c:	str	r0, [r4]
   15450:	ldr	r0, [r4, #4]
   15454:	mov	r1, #0
   15458:	ldr	r2, [sp, #28]
   1545c:	sub	r2, r2, r0
   15460:	add	r0, r7, r0, lsl #3
   15464:	lsl	r2, r2, #3
   15468:	bl	10df8 <memset@plt>
   1546c:	ldr	r3, [sp, #28]
   15470:	str	r3, [r4, #4]
   15474:	ldr	ip, [sp, #32]
   15478:	mvn	r3, #0
   1547c:	mov	r2, r6
   15480:	ldr	r8, [sp, #36]	; 0x24
   15484:	ldr	fp, [r7]
   15488:	ldr	r4, [r7, #4]
   1548c:	str	ip, [sp]
   15490:	orr	r8, r8, #1
   15494:	ldr	ip, [sp, #72]	; 0x48
   15498:	mov	r1, fp
   1549c:	str	r8, [sp, #4]
   154a0:	ldr	lr, [sp, #76]	; 0x4c
   154a4:	mov	r0, r4
   154a8:	str	r5, [sp, #8]
   154ac:	str	ip, [sp, #12]
   154b0:	str	lr, [sp, #16]
   154b4:	bl	129a0 <__assert_fail@plt+0x1adc>
   154b8:	cmp	fp, r0
   154bc:	bhi	1551c <__assert_fail@plt+0x4658>
   154c0:	add	fp, r0, #1
   154c4:	movw	r3, #37288	; 0x91a8
   154c8:	movt	r3, #2
   154cc:	cmp	r4, r3
   154d0:	str	fp, [r7]
   154d4:	beq	154e0 <__assert_fail@plt+0x461c>
   154d8:	mov	r0, r4
   154dc:	bl	1264c <__assert_fail@plt+0x1788>
   154e0:	mov	r0, fp
   154e4:	bl	16a08 <__assert_fail@plt+0x5b44>
   154e8:	ldr	r3, [sp, #32]
   154ec:	mov	r2, r6
   154f0:	mov	r1, fp
   154f4:	mov	r4, r0
   154f8:	ldr	lr, [sp, #72]	; 0x48
   154fc:	ldr	ip, [sp, #76]	; 0x4c
   15500:	str	r0, [r7, #4]
   15504:	stm	sp, {r3, r8}
   15508:	mvn	r3, #0
   1550c:	str	r5, [sp, #8]
   15510:	str	lr, [sp, #12]
   15514:	str	ip, [sp, #16]
   15518:	bl	129a0 <__assert_fail@plt+0x1adc>
   1551c:	mov	r0, r4
   15520:	str	sl, [r9]
   15524:	add	sp, sp, #84	; 0x54
   15528:	ldrd	r4, [sp]
   1552c:	ldrd	r6, [sp, #8]
   15530:	ldrd	r8, [sp, #16]
   15534:	ldrd	sl, [sp, #24]
   15538:	add	sp, sp, #32
   1553c:	pop	{pc}		; (ldr pc, [sp], #4)
   15540:	mov	r0, #8
   15544:	mvn	r3, #-2147483648	; 0x80000000
   15548:	add	r1, sp, #28
   1554c:	str	r0, [sp]
   15550:	mov	r0, #0
   15554:	bl	16cac <__assert_fail@plt+0x5de8>
   15558:	ldrd	r2, [r4, #8]
   1555c:	mov	r7, r0
   15560:	str	r0, [r4]
   15564:	strd	r2, [r0]
   15568:	b	15450 <__assert_fail@plt+0x458c>
   1556c:	andeq	r9, r2, r8, lsr #5
   15570:	ldr	ip, [pc, #472]	; 15750 <__assert_fail@plt+0x488c>
   15574:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15578:	mov	r5, r0
   1557c:	movw	r4, #37108	; 0x90f4
   15580:	movt	r4, #2
   15584:	ldrd	r2, [ip]
   15588:	ldrd	r0, [ip, #8]
   1558c:	strd	r6, [sp, #8]
   15590:	strd	r8, [sp, #16]
   15594:	strd	sl, [sp, #24]
   15598:	str	lr, [sp, #32]
   1559c:	sub	sp, sp, #84	; 0x54
   155a0:	strd	r2, [sp, #32]
   155a4:	strd	r0, [sp, #40]	; 0x28
   155a8:	ldr	r6, [sp, #44]	; 0x2c
   155ac:	ldrd	r2, [ip, #16]
   155b0:	ldrd	r0, [ip, #24]
   155b4:	mvn	lr, r6
   155b8:	and	lr, lr, #67108864	; 0x4000000
   155bc:	eor	lr, lr, r6
   155c0:	ldrd	r6, [ip, #40]	; 0x28
   155c4:	strd	r2, [sp, #48]	; 0x30
   155c8:	ldrd	r2, [ip, #32]
   155cc:	str	lr, [sp, #44]	; 0x2c
   155d0:	strd	r0, [sp, #56]	; 0x38
   155d4:	strd	r2, [sp, #64]	; 0x40
   155d8:	strd	r6, [sp, #72]	; 0x48
   155dc:	bl	10de0 <__errno_location@plt>
   155e0:	mov	r8, r0
   155e4:	ldr	r9, [r0]
   155e8:	ldr	r2, [r4, #4]
   155ec:	ldr	r6, [r4]
   155f0:	cmp	r2, #0
   155f4:	bgt	15650 <__assert_fail@plt+0x478c>
   155f8:	add	r3, r4, #8
   155fc:	str	r2, [sp, #28]
   15600:	rsb	r2, r2, #1
   15604:	cmp	r6, r3
   15608:	beq	15724 <__assert_fail@plt+0x4860>
   1560c:	mov	r1, #8
   15610:	mov	r0, r6
   15614:	mvn	r3, #-2147483648	; 0x80000000
   15618:	str	r1, [sp]
   1561c:	add	r1, sp, #28
   15620:	bl	16cac <__assert_fail@plt+0x5de8>
   15624:	mov	r6, r0
   15628:	str	r0, [r4]
   1562c:	ldr	r0, [r4, #4]
   15630:	mov	r1, #0
   15634:	ldr	r2, [sp, #28]
   15638:	sub	r2, r2, r0
   1563c:	add	r0, r6, r0, lsl #3
   15640:	lsl	r2, r2, #3
   15644:	bl	10df8 <memset@plt>
   15648:	ldr	r3, [sp, #28]
   1564c:	str	r3, [r4, #4]
   15650:	ldr	sl, [r6]
   15654:	add	r0, sp, #40	; 0x28
   15658:	mvn	r3, #0
   1565c:	mov	r2, r5
   15660:	ldr	r7, [sp, #36]	; 0x24
   15664:	ldr	r4, [r6, #4]
   15668:	mov	r1, sl
   1566c:	str	r0, [sp, #8]
   15670:	ldr	lr, [sp, #32]
   15674:	orr	r7, r7, #1
   15678:	ldr	ip, [sp, #72]	; 0x48
   1567c:	mov	r0, r4
   15680:	ldr	fp, [sp, #76]	; 0x4c
   15684:	str	lr, [sp]
   15688:	str	r7, [sp, #4]
   1568c:	str	ip, [sp, #12]
   15690:	str	fp, [sp, #16]
   15694:	bl	129a0 <__assert_fail@plt+0x1adc>
   15698:	cmp	sl, r0
   1569c:	bhi	15700 <__assert_fail@plt+0x483c>
   156a0:	add	sl, r0, #1
   156a4:	movw	r3, #37288	; 0x91a8
   156a8:	movt	r3, #2
   156ac:	cmp	r4, r3
   156b0:	str	sl, [r6]
   156b4:	beq	156c0 <__assert_fail@plt+0x47fc>
   156b8:	mov	r0, r4
   156bc:	bl	1264c <__assert_fail@plt+0x1788>
   156c0:	mov	r0, sl
   156c4:	bl	16a08 <__assert_fail@plt+0x5b44>
   156c8:	ldr	r3, [sp, #32]
   156cc:	mov	r2, r5
   156d0:	add	r5, sp, #40	; 0x28
   156d4:	mov	r1, sl
   156d8:	mov	r4, r0
   156dc:	ldr	lr, [sp, #72]	; 0x48
   156e0:	ldr	ip, [sp, #76]	; 0x4c
   156e4:	str	r0, [r6, #4]
   156e8:	stm	sp, {r3, r7}
   156ec:	mvn	r3, #0
   156f0:	str	r5, [sp, #8]
   156f4:	str	lr, [sp, #12]
   156f8:	str	ip, [sp, #16]
   156fc:	bl	129a0 <__assert_fail@plt+0x1adc>
   15700:	mov	r0, r4
   15704:	str	r9, [r8]
   15708:	add	sp, sp, #84	; 0x54
   1570c:	ldrd	r4, [sp]
   15710:	ldrd	r6, [sp, #8]
   15714:	ldrd	r8, [sp, #16]
   15718:	ldrd	sl, [sp, #24]
   1571c:	add	sp, sp, #32
   15720:	pop	{pc}		; (ldr pc, [sp], #4)
   15724:	mov	r0, #8
   15728:	mvn	r3, #-2147483648	; 0x80000000
   1572c:	add	r1, sp, #28
   15730:	str	r0, [sp]
   15734:	mov	r0, #0
   15738:	bl	16cac <__assert_fail@plt+0x5de8>
   1573c:	ldrd	r2, [r4, #8]
   15740:	mov	r6, r0
   15744:	str	r0, [r4]
   15748:	strd	r2, [r0]
   1574c:	b	1562c <__assert_fail@plt+0x4768>
   15750:	andeq	r9, r2, r8, lsr #5
   15754:	ldr	ip, [pc, #480]	; 1593c <__assert_fail@plt+0x4a78>
   15758:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1575c:	mov	r5, r0
   15760:	movw	r4, #37108	; 0x90f4
   15764:	movt	r4, #2
   15768:	ldrd	r2, [ip]
   1576c:	strd	r6, [sp, #8]
   15770:	mov	r6, r1
   15774:	ldrd	r0, [ip, #8]
   15778:	strd	r8, [sp, #16]
   1577c:	strd	sl, [sp, #24]
   15780:	str	lr, [sp, #32]
   15784:	sub	sp, sp, #84	; 0x54
   15788:	ldrd	r8, [ip, #40]	; 0x28
   1578c:	strd	r2, [sp, #32]
   15790:	strd	r0, [sp, #40]	; 0x28
   15794:	ldrd	r2, [ip, #16]
   15798:	ldr	r7, [sp, #44]	; 0x2c
   1579c:	ldrd	r0, [ip, #24]
   157a0:	strd	r2, [sp, #48]	; 0x30
   157a4:	ldrd	r2, [ip, #32]
   157a8:	mvn	lr, r7
   157ac:	and	lr, lr, #67108864	; 0x4000000
   157b0:	eor	lr, lr, r7
   157b4:	str	lr, [sp, #44]	; 0x2c
   157b8:	strd	r0, [sp, #56]	; 0x38
   157bc:	strd	r2, [sp, #64]	; 0x40
   157c0:	strd	r8, [sp, #72]	; 0x48
   157c4:	bl	10de0 <__errno_location@plt>
   157c8:	mov	r9, r0
   157cc:	ldr	sl, [r0]
   157d0:	ldr	r2, [r4, #4]
   157d4:	ldr	r7, [r4]
   157d8:	cmp	r2, #0
   157dc:	bgt	15838 <__assert_fail@plt+0x4974>
   157e0:	add	r3, r4, #8
   157e4:	str	r2, [sp, #28]
   157e8:	rsb	r2, r2, #1
   157ec:	cmp	r7, r3
   157f0:	beq	15910 <__assert_fail@plt+0x4a4c>
   157f4:	mov	r1, #8
   157f8:	mov	r0, r7
   157fc:	mvn	r3, #-2147483648	; 0x80000000
   15800:	str	r1, [sp]
   15804:	add	r1, sp, #28
   15808:	bl	16cac <__assert_fail@plt+0x5de8>
   1580c:	mov	r7, r0
   15810:	str	r0, [r4]
   15814:	ldr	r0, [r4, #4]
   15818:	mov	r1, #0
   1581c:	ldr	r2, [sp, #28]
   15820:	sub	r2, r2, r0
   15824:	add	r0, r7, r0, lsl #3
   15828:	lsl	r2, r2, #3
   1582c:	bl	10df8 <memset@plt>
   15830:	ldr	r3, [sp, #28]
   15834:	str	r3, [r4, #4]
   15838:	ldr	ip, [sp, #32]
   1583c:	add	r0, sp, #40	; 0x28
   15840:	mov	r3, r6
   15844:	mov	r2, r5
   15848:	ldr	r8, [sp, #36]	; 0x24
   1584c:	ldr	fp, [r7]
   15850:	ldr	r4, [r7, #4]
   15854:	str	ip, [sp]
   15858:	orr	r8, r8, #1
   1585c:	ldr	ip, [sp, #72]	; 0x48
   15860:	mov	r1, fp
   15864:	str	r8, [sp, #4]
   15868:	ldr	lr, [sp, #76]	; 0x4c
   1586c:	str	r0, [sp, #8]
   15870:	mov	r0, r4
   15874:	str	ip, [sp, #12]
   15878:	str	lr, [sp, #16]
   1587c:	bl	129a0 <__assert_fail@plt+0x1adc>
   15880:	cmp	fp, r0
   15884:	bhi	158ec <__assert_fail@plt+0x4a28>
   15888:	add	fp, r0, #1
   1588c:	movw	r3, #37288	; 0x91a8
   15890:	movt	r3, #2
   15894:	cmp	r4, r3
   15898:	str	fp, [r7]
   1589c:	beq	158a8 <__assert_fail@plt+0x49e4>
   158a0:	mov	r0, r4
   158a4:	bl	1264c <__assert_fail@plt+0x1788>
   158a8:	mov	r0, fp
   158ac:	bl	16a08 <__assert_fail@plt+0x5b44>
   158b0:	ldr	lr, [sp, #32]
   158b4:	mov	r2, r5
   158b8:	mov	r3, r6
   158bc:	mov	r1, fp
   158c0:	mov	r4, r0
   158c4:	ldr	r5, [sp, #72]	; 0x48
   158c8:	ldr	ip, [sp, #76]	; 0x4c
   158cc:	str	r0, [r7, #4]
   158d0:	str	lr, [sp]
   158d4:	add	lr, sp, #40	; 0x28
   158d8:	str	r8, [sp, #4]
   158dc:	str	lr, [sp, #8]
   158e0:	str	r5, [sp, #12]
   158e4:	str	ip, [sp, #16]
   158e8:	bl	129a0 <__assert_fail@plt+0x1adc>
   158ec:	mov	r0, r4
   158f0:	str	sl, [r9]
   158f4:	add	sp, sp, #84	; 0x54
   158f8:	ldrd	r4, [sp]
   158fc:	ldrd	r6, [sp, #8]
   15900:	ldrd	r8, [sp, #16]
   15904:	ldrd	sl, [sp, #24]
   15908:	add	sp, sp, #32
   1590c:	pop	{pc}		; (ldr pc, [sp], #4)
   15910:	mov	r0, #8
   15914:	mvn	r3, #-2147483648	; 0x80000000
   15918:	add	r1, sp, #28
   1591c:	str	r0, [sp]
   15920:	mov	r0, #0
   15924:	bl	16cac <__assert_fail@plt+0x5de8>
   15928:	ldrd	r2, [r4, #8]
   1592c:	mov	r7, r0
   15930:	str	r0, [r4]
   15934:	strd	r2, [r0]
   15938:	b	15814 <__assert_fail@plt+0x4950>
   1593c:	andeq	r9, r2, r8, lsr #5
   15940:	strd	r4, [sp, #-12]!
   15944:	mov	r4, #0
   15948:	mov	r5, #0
   1594c:	str	lr, [sp, #8]
   15950:	sub	sp, sp, #100	; 0x64
   15954:	cmp	r1, #10
   15958:	strd	r4, [sp]
   1595c:	strd	r4, [sp, #8]
   15960:	strd	r4, [sp, #16]
   15964:	strd	r4, [sp, #24]
   15968:	strd	r4, [sp, #32]
   1596c:	strd	r4, [sp, #40]	; 0x28
   15970:	beq	159a0 <__assert_fail@plt+0x4adc>
   15974:	mov	ip, #67108864	; 0x4000000
   15978:	mov	r3, sp
   1597c:	str	r1, [sp]
   15980:	mov	r1, r2
   15984:	mvn	r2, #0
   15988:	str	ip, [sp, #12]
   1598c:	bl	1438c <__assert_fail@plt+0x34c8>
   15990:	add	sp, sp, #100	; 0x64
   15994:	ldrd	r4, [sp]
   15998:	add	sp, sp, #8
   1599c:	pop	{pc}		; (ldr pc, [sp], #4)
   159a0:	bl	10eac <abort@plt>
   159a4:	ldr	ip, [pc, #156]	; 15a48 <__assert_fail@plt+0x4b84>
   159a8:	cmp	r2, #0
   159ac:	cmpne	r1, #0
   159b0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   159b4:	strd	r6, [sp, #8]
   159b8:	mov	r6, r2
   159bc:	str	r8, [sp, #16]
   159c0:	mov	r8, r3
   159c4:	strd	sl, [sp, #20]
   159c8:	ldrd	r4, [ip]
   159cc:	str	lr, [sp, #28]
   159d0:	sub	sp, sp, #48	; 0x30
   159d4:	mov	lr, #10
   159d8:	ldrd	r2, [ip, #8]
   159dc:	ldrd	sl, [ip, #16]
   159e0:	strd	r4, [sp]
   159e4:	ldrd	r4, [ip, #32]
   159e8:	str	lr, [sp]
   159ec:	strd	r2, [sp, #8]
   159f0:	strd	sl, [sp, #16]
   159f4:	ldrd	r2, [ip, #24]
   159f8:	ldrd	sl, [ip, #40]	; 0x28
   159fc:	strd	r2, [sp, #24]
   15a00:	strd	r4, [sp, #32]
   15a04:	strd	sl, [sp, #40]	; 0x28
   15a08:	beq	15a44 <__assert_fail@plt+0x4b80>
   15a0c:	mov	r7, r1
   15a10:	mov	r3, sp
   15a14:	mov	r1, r8
   15a18:	mvn	r2, #0
   15a1c:	str	r7, [sp, #40]	; 0x28
   15a20:	str	r6, [sp, #44]	; 0x2c
   15a24:	bl	1438c <__assert_fail@plt+0x34c8>
   15a28:	add	sp, sp, #48	; 0x30
   15a2c:	ldrd	r4, [sp]
   15a30:	ldrd	r6, [sp, #8]
   15a34:	ldr	r8, [sp, #16]
   15a38:	ldrd	sl, [sp, #20]
   15a3c:	add	sp, sp, #28
   15a40:	pop	{pc}		; (ldr pc, [sp], #4)
   15a44:	bl	10eac <abort@plt>
   15a48:	andeq	r9, r2, r8, lsr #5
   15a4c:	ldr	ip, [pc, #156]	; 15af0 <__assert_fail@plt+0x4c2c>
   15a50:	cmp	r2, #0
   15a54:	cmpne	r1, #0
   15a58:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15a5c:	strd	r6, [sp, #8]
   15a60:	mov	r6, r2
   15a64:	str	r8, [sp, #16]
   15a68:	mov	r8, r3
   15a6c:	strd	sl, [sp, #20]
   15a70:	ldrd	r4, [ip]
   15a74:	str	lr, [sp, #28]
   15a78:	sub	sp, sp, #48	; 0x30
   15a7c:	mov	lr, #10
   15a80:	ldrd	r2, [ip, #8]
   15a84:	ldrd	sl, [ip, #16]
   15a88:	strd	r4, [sp]
   15a8c:	ldrd	r4, [ip, #32]
   15a90:	str	lr, [sp]
   15a94:	strd	r2, [sp, #8]
   15a98:	strd	sl, [sp, #16]
   15a9c:	ldrd	r2, [ip, #24]
   15aa0:	ldrd	sl, [ip, #40]	; 0x28
   15aa4:	strd	r2, [sp, #24]
   15aa8:	strd	r4, [sp, #32]
   15aac:	strd	sl, [sp, #40]	; 0x28
   15ab0:	beq	15aec <__assert_fail@plt+0x4c28>
   15ab4:	ldr	r2, [sp, #80]	; 0x50
   15ab8:	mov	r7, r1
   15abc:	mov	r3, sp
   15ac0:	mov	r1, r8
   15ac4:	str	r7, [sp, #40]	; 0x28
   15ac8:	str	r6, [sp, #44]	; 0x2c
   15acc:	bl	1438c <__assert_fail@plt+0x34c8>
   15ad0:	add	sp, sp, #48	; 0x30
   15ad4:	ldrd	r4, [sp]
   15ad8:	ldrd	r6, [sp, #8]
   15adc:	ldr	r8, [sp, #16]
   15ae0:	ldrd	sl, [sp, #20]
   15ae4:	add	sp, sp, #28
   15ae8:	pop	{pc}		; (ldr pc, [sp], #4)
   15aec:	bl	10eac <abort@plt>
   15af0:	andeq	r9, r2, r8, lsr #5
   15af4:	ldr	ip, [pc, #512]	; 15cfc <__assert_fail@plt+0x4e38>
   15af8:	cmp	r0, #0
   15afc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15b00:	ldrd	r4, [ip, #16]
   15b04:	strd	r6, [sp, #8]
   15b08:	clz	r6, r1
   15b0c:	mov	r7, r1
   15b10:	strd	r8, [sp, #16]
   15b14:	mov	r8, r0
   15b18:	lsr	r6, r6, #5
   15b1c:	strd	sl, [sp, #24]
   15b20:	mov	fp, r2
   15b24:	mov	sl, #10
   15b28:	ldrd	r2, [ip]
   15b2c:	moveq	r6, #1
   15b30:	str	lr, [sp, #32]
   15b34:	sub	sp, sp, #92	; 0x5c
   15b38:	cmp	r6, #0
   15b3c:	ldrd	r0, [ip, #8]
   15b40:	strd	r2, [sp, #40]	; 0x28
   15b44:	strd	r4, [sp, #56]	; 0x38
   15b48:	ldrd	r2, [ip, #24]
   15b4c:	strd	r0, [sp, #48]	; 0x30
   15b50:	ldrd	r0, [ip, #32]
   15b54:	str	sl, [sp, #40]	; 0x28
   15b58:	ldrd	r4, [ip, #40]	; 0x28
   15b5c:	strd	r2, [sp, #64]	; 0x40
   15b60:	strd	r0, [sp, #72]	; 0x48
   15b64:	strd	r4, [sp, #80]	; 0x50
   15b68:	bne	15cf8 <__assert_fail@plt+0x4e34>
   15b6c:	movw	r5, #37108	; 0x90f4
   15b70:	movt	r5, #2
   15b74:	str	r8, [sp, #80]	; 0x50
   15b78:	str	r7, [sp, #84]	; 0x54
   15b7c:	bl	10de0 <__errno_location@plt>
   15b80:	ldr	r3, [r0]
   15b84:	mov	r9, r0
   15b88:	ldr	r2, [r5, #4]
   15b8c:	ldr	r4, [r5]
   15b90:	str	r3, [sp, #28]
   15b94:	cmp	r2, #0
   15b98:	movgt	r1, sl
   15b9c:	bgt	15c04 <__assert_fail@plt+0x4d40>
   15ba0:	add	r3, r5, #8
   15ba4:	str	r2, [sp, #36]	; 0x24
   15ba8:	rsb	r2, r2, #1
   15bac:	cmp	r4, r3
   15bb0:	beq	15ccc <__assert_fail@plt+0x4e08>
   15bb4:	mov	r1, #8
   15bb8:	mov	r0, r4
   15bbc:	mvn	r3, #-2147483648	; 0x80000000
   15bc0:	str	r1, [sp]
   15bc4:	add	r1, sp, #36	; 0x24
   15bc8:	bl	16cac <__assert_fail@plt+0x5de8>
   15bcc:	mov	r4, r0
   15bd0:	str	r0, [r5]
   15bd4:	ldr	r0, [r5, #4]
   15bd8:	mov	r1, #0
   15bdc:	ldr	r2, [sp, #36]	; 0x24
   15be0:	sub	r2, r2, r0
   15be4:	add	r0, r4, r0, lsl #3
   15be8:	lsl	r2, r2, #3
   15bec:	bl	10df8 <memset@plt>
   15bf0:	ldr	r3, [sp, #36]	; 0x24
   15bf4:	ldr	r1, [sp, #40]	; 0x28
   15bf8:	ldr	r8, [sp, #80]	; 0x50
   15bfc:	str	r3, [r5, #4]
   15c00:	ldr	r7, [sp, #84]	; 0x54
   15c04:	mvn	r3, #0
   15c08:	mov	r2, fp
   15c0c:	ldr	r6, [sp, #44]	; 0x2c
   15c10:	ldr	sl, [r4]
   15c14:	ldr	r5, [r4, #4]
   15c18:	orr	r6, r6, #1
   15c1c:	stm	sp, {r1, r6}
   15c20:	add	r1, sp, #48	; 0x30
   15c24:	str	r8, [sp, #12]
   15c28:	mov	r0, r5
   15c2c:	str	r1, [sp, #8]
   15c30:	mov	r1, sl
   15c34:	str	r7, [sp, #16]
   15c38:	bl	129a0 <__assert_fail@plt+0x1adc>
   15c3c:	cmp	sl, r0
   15c40:	bhi	15ca4 <__assert_fail@plt+0x4de0>
   15c44:	add	r7, r0, #1
   15c48:	movw	r3, #37288	; 0x91a8
   15c4c:	movt	r3, #2
   15c50:	cmp	r5, r3
   15c54:	str	r7, [r4]
   15c58:	beq	15c64 <__assert_fail@plt+0x4da0>
   15c5c:	mov	r0, r5
   15c60:	bl	1264c <__assert_fail@plt+0x1788>
   15c64:	mov	r0, r7
   15c68:	bl	16a08 <__assert_fail@plt+0x5b44>
   15c6c:	ldr	r3, [sp, #40]	; 0x28
   15c70:	mov	r2, fp
   15c74:	mov	r1, r7
   15c78:	mov	r5, r0
   15c7c:	ldr	lr, [sp, #80]	; 0x50
   15c80:	ldr	ip, [sp, #84]	; 0x54
   15c84:	str	r0, [r4, #4]
   15c88:	add	r4, sp, #48	; 0x30
   15c8c:	stm	sp, {r3, r6}
   15c90:	mvn	r3, #0
   15c94:	str	r4, [sp, #8]
   15c98:	str	lr, [sp, #12]
   15c9c:	str	ip, [sp, #16]
   15ca0:	bl	129a0 <__assert_fail@plt+0x1adc>
   15ca4:	ldr	r3, [sp, #28]
   15ca8:	mov	r0, r5
   15cac:	str	r3, [r9]
   15cb0:	add	sp, sp, #92	; 0x5c
   15cb4:	ldrd	r4, [sp]
   15cb8:	ldrd	r6, [sp, #8]
   15cbc:	ldrd	r8, [sp, #16]
   15cc0:	ldrd	sl, [sp, #24]
   15cc4:	add	sp, sp, #32
   15cc8:	pop	{pc}		; (ldr pc, [sp], #4)
   15ccc:	mov	r1, #8
   15cd0:	mvn	r3, #-2147483648	; 0x80000000
   15cd4:	mov	r0, r6
   15cd8:	str	r1, [sp]
   15cdc:	add	r1, sp, #36	; 0x24
   15ce0:	bl	16cac <__assert_fail@plt+0x5de8>
   15ce4:	ldrd	r2, [r5, #8]
   15ce8:	mov	r4, r0
   15cec:	str	r0, [r5]
   15cf0:	strd	r2, [r0]
   15cf4:	b	15bd4 <__assert_fail@plt+0x4d10>
   15cf8:	bl	10eac <abort@plt>
   15cfc:	andeq	r9, r2, r8, lsr #5
   15d00:	ldr	ip, [pc, #536]	; 15f20 <__assert_fail@plt+0x505c>
   15d04:	cmp	r0, #0
   15d08:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15d0c:	ldrd	r4, [ip, #16]
   15d10:	strd	r6, [sp, #8]
   15d14:	mov	r6, r1
   15d18:	mov	r7, r0
   15d1c:	strd	r8, [sp, #16]
   15d20:	mov	r9, #10
   15d24:	strd	sl, [sp, #24]
   15d28:	mov	sl, r2
   15d2c:	mov	fp, r3
   15d30:	str	lr, [sp, #32]
   15d34:	clz	lr, r1
   15d38:	sub	sp, sp, #92	; 0x5c
   15d3c:	ldrd	r2, [ip]
   15d40:	lsr	lr, lr, #5
   15d44:	moveq	lr, #1
   15d48:	ldrd	r0, [ip, #8]
   15d4c:	cmp	lr, #0
   15d50:	strd	r4, [sp, #56]	; 0x38
   15d54:	ldrd	r4, [ip, #40]	; 0x28
   15d58:	str	lr, [sp, #28]
   15d5c:	strd	r2, [sp, #40]	; 0x28
   15d60:	ldrd	r2, [ip, #24]
   15d64:	strd	r0, [sp, #48]	; 0x30
   15d68:	ldrd	r0, [ip, #32]
   15d6c:	str	r9, [sp, #40]	; 0x28
   15d70:	strd	r2, [sp, #64]	; 0x40
   15d74:	strd	r4, [sp, #80]	; 0x50
   15d78:	strd	r0, [sp, #72]	; 0x48
   15d7c:	bne	15f1c <__assert_fail@plt+0x5058>
   15d80:	movw	r5, #37108	; 0x90f4
   15d84:	movt	r5, #2
   15d88:	str	r7, [sp, #80]	; 0x50
   15d8c:	str	r6, [sp, #84]	; 0x54
   15d90:	bl	10de0 <__errno_location@plt>
   15d94:	ldr	r3, [r0]
   15d98:	mov	r8, r0
   15d9c:	ldr	r2, [r5, #4]
   15da0:	ldr	r4, [r5]
   15da4:	str	r3, [sp, #24]
   15da8:	cmp	r2, #0
   15dac:	movgt	r1, r9
   15db0:	bgt	15e18 <__assert_fail@plt+0x4f54>
   15db4:	add	r3, r5, #8
   15db8:	str	r2, [sp, #36]	; 0x24
   15dbc:	rsb	r2, r2, #1
   15dc0:	cmp	r4, r3
   15dc4:	beq	15ef0 <__assert_fail@plt+0x502c>
   15dc8:	mov	r1, #8
   15dcc:	mov	r0, r4
   15dd0:	mvn	r3, #-2147483648	; 0x80000000
   15dd4:	str	r1, [sp]
   15dd8:	add	r1, sp, #36	; 0x24
   15ddc:	bl	16cac <__assert_fail@plt+0x5de8>
   15de0:	mov	r4, r0
   15de4:	str	r0, [r5]
   15de8:	ldr	r0, [r5, #4]
   15dec:	mov	r1, #0
   15df0:	ldr	r2, [sp, #36]	; 0x24
   15df4:	sub	r2, r2, r0
   15df8:	add	r0, r4, r0, lsl #3
   15dfc:	lsl	r2, r2, #3
   15e00:	bl	10df8 <memset@plt>
   15e04:	ldr	r3, [sp, #36]	; 0x24
   15e08:	ldr	r1, [sp, #40]	; 0x28
   15e0c:	ldr	r7, [sp, #80]	; 0x50
   15e10:	str	r3, [r5, #4]
   15e14:	ldr	r6, [sp, #84]	; 0x54
   15e18:	mov	r3, fp
   15e1c:	mov	r2, sl
   15e20:	ldr	r0, [sp, #44]	; 0x2c
   15e24:	ldr	r9, [r4]
   15e28:	ldr	r5, [r4, #4]
   15e2c:	orr	r0, r0, #1
   15e30:	str	r1, [sp]
   15e34:	add	r1, sp, #48	; 0x30
   15e38:	str	r0, [sp, #4]
   15e3c:	str	r1, [sp, #8]
   15e40:	mov	r1, r9
   15e44:	str	r7, [sp, #12]
   15e48:	str	r6, [sp, #16]
   15e4c:	str	r0, [sp, #28]
   15e50:	mov	r0, r5
   15e54:	bl	129a0 <__assert_fail@plt+0x1adc>
   15e58:	cmp	r9, r0
   15e5c:	bhi	15ec8 <__assert_fail@plt+0x5004>
   15e60:	add	r6, r0, #1
   15e64:	movw	r3, #37288	; 0x91a8
   15e68:	movt	r3, #2
   15e6c:	cmp	r5, r3
   15e70:	str	r6, [r4]
   15e74:	beq	15e80 <__assert_fail@plt+0x4fbc>
   15e78:	mov	r0, r5
   15e7c:	bl	1264c <__assert_fail@plt+0x1788>
   15e80:	mov	r0, r6
   15e84:	bl	16a08 <__assert_fail@plt+0x5b44>
   15e88:	ldr	lr, [sp, #40]	; 0x28
   15e8c:	mov	r1, r6
   15e90:	mov	r3, fp
   15e94:	mov	r2, sl
   15e98:	mov	r5, r0
   15e9c:	ldr	r6, [sp, #80]	; 0x50
   15ea0:	ldr	ip, [sp, #84]	; 0x54
   15ea4:	str	r0, [r4, #4]
   15ea8:	str	lr, [sp]
   15eac:	ldr	lr, [sp, #28]
   15eb0:	str	lr, [sp, #4]
   15eb4:	add	lr, sp, #48	; 0x30
   15eb8:	str	r6, [sp, #12]
   15ebc:	str	lr, [sp, #8]
   15ec0:	str	ip, [sp, #16]
   15ec4:	bl	129a0 <__assert_fail@plt+0x1adc>
   15ec8:	ldr	r3, [sp, #24]
   15ecc:	mov	r0, r5
   15ed0:	str	r3, [r8]
   15ed4:	add	sp, sp, #92	; 0x5c
   15ed8:	ldrd	r4, [sp]
   15edc:	ldrd	r6, [sp, #8]
   15ee0:	ldrd	r8, [sp, #16]
   15ee4:	ldrd	sl, [sp, #24]
   15ee8:	add	sp, sp, #32
   15eec:	pop	{pc}		; (ldr pc, [sp], #4)
   15ef0:	mov	r1, #8
   15ef4:	mvn	r3, #-2147483648	; 0x80000000
   15ef8:	ldr	r0, [sp, #28]
   15efc:	str	r1, [sp]
   15f00:	add	r1, sp, #36	; 0x24
   15f04:	bl	16cac <__assert_fail@plt+0x5de8>
   15f08:	ldrd	r2, [r5, #8]
   15f0c:	mov	r4, r0
   15f10:	str	r0, [r5]
   15f14:	strd	r2, [r0]
   15f18:	b	15de8 <__assert_fail@plt+0x4f24>
   15f1c:	bl	10eac <abort@plt>
   15f20:	andeq	r9, r2, r8, lsr #5
   15f24:	ldr	r3, [pc]	; 15f2c <__assert_fail@plt+0x5068>
   15f28:	b	1438c <__assert_fail@plt+0x34c8>
   15f2c:	andeq	r9, r2, r4, lsl #2
   15f30:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15f34:	movw	r4, #37108	; 0x90f4
   15f38:	movt	r4, #2
   15f3c:	strd	r6, [sp, #8]
   15f40:	strd	r8, [sp, #16]
   15f44:	strd	sl, [sp, #24]
   15f48:	mov	sl, r0
   15f4c:	mov	fp, r1
   15f50:	str	lr, [sp, #32]
   15f54:	sub	sp, sp, #44	; 0x2c
   15f58:	bl	10de0 <__errno_location@plt>
   15f5c:	ldr	r3, [r0]
   15f60:	mov	r8, r0
   15f64:	ldr	r2, [r4, #4]
   15f68:	ldr	r5, [r4]
   15f6c:	str	r3, [sp, #28]
   15f70:	cmp	r2, #0
   15f74:	bgt	15fd0 <__assert_fail@plt+0x510c>
   15f78:	add	r3, r4, #8
   15f7c:	str	r2, [sp, #36]	; 0x24
   15f80:	rsb	r2, r2, #1
   15f84:	cmp	r5, r3
   15f88:	beq	160ac <__assert_fail@plt+0x51e8>
   15f8c:	mov	r1, #8
   15f90:	mov	r0, r5
   15f94:	mvn	r3, #-2147483648	; 0x80000000
   15f98:	str	r1, [sp]
   15f9c:	add	r1, sp, #36	; 0x24
   15fa0:	bl	16cac <__assert_fail@plt+0x5de8>
   15fa4:	mov	r5, r0
   15fa8:	str	r0, [r4]
   15fac:	ldr	r0, [r4, #4]
   15fb0:	mov	r1, #0
   15fb4:	ldr	r2, [sp, #36]	; 0x24
   15fb8:	sub	r2, r2, r0
   15fbc:	add	r0, r5, r0, lsl #3
   15fc0:	lsl	r2, r2, #3
   15fc4:	bl	10df8 <memset@plt>
   15fc8:	ldr	r3, [sp, #36]	; 0x24
   15fcc:	str	r3, [r4, #4]
   15fd0:	ldr	ip, [r4, #16]
   15fd4:	mov	r3, fp
   15fd8:	mov	r2, sl
   15fdc:	ldr	r7, [r4, #20]
   15fe0:	ldr	r0, [pc, #240]	; 160d8 <__assert_fail@plt+0x5214>
   15fe4:	ldr	r9, [r5]
   15fe8:	orr	r7, r7, #1
   15fec:	ldr	r6, [r5, #4]
   15ff0:	str	ip, [sp]
   15ff4:	ldr	ip, [r4, #56]	; 0x38
   15ff8:	mov	r1, r9
   15ffc:	str	r7, [sp, #4]
   16000:	ldr	lr, [r4, #60]	; 0x3c
   16004:	str	r0, [sp, #8]
   16008:	mov	r0, r6
   1600c:	str	ip, [sp, #12]
   16010:	str	lr, [sp, #16]
   16014:	bl	129a0 <__assert_fail@plt+0x1adc>
   16018:	cmp	r9, r0
   1601c:	bhi	16084 <__assert_fail@plt+0x51c0>
   16020:	add	r9, r0, #1
   16024:	movw	r3, #37288	; 0x91a8
   16028:	movt	r3, #2
   1602c:	cmp	r6, r3
   16030:	str	r9, [r5]
   16034:	beq	16040 <__assert_fail@plt+0x517c>
   16038:	mov	r0, r6
   1603c:	bl	1264c <__assert_fail@plt+0x1788>
   16040:	mov	r0, r9
   16044:	bl	16a08 <__assert_fail@plt+0x5b44>
   16048:	ldr	ip, [r4, #16]
   1604c:	mov	r1, r9
   16050:	mov	r3, fp
   16054:	mov	r2, sl
   16058:	mov	r6, r0
   1605c:	ldr	r9, [r4, #56]	; 0x38
   16060:	ldr	lr, [r4, #60]	; 0x3c
   16064:	str	r0, [r5, #4]
   16068:	str	ip, [sp]
   1606c:	ldr	ip, [pc, #100]	; 160d8 <__assert_fail@plt+0x5214>
   16070:	str	r7, [sp, #4]
   16074:	str	ip, [sp, #8]
   16078:	str	r9, [sp, #12]
   1607c:	str	lr, [sp, #16]
   16080:	bl	129a0 <__assert_fail@plt+0x1adc>
   16084:	ldr	r3, [sp, #28]
   16088:	mov	r0, r6
   1608c:	str	r3, [r8]
   16090:	add	sp, sp, #44	; 0x2c
   16094:	ldrd	r4, [sp]
   16098:	ldrd	r6, [sp, #8]
   1609c:	ldrd	r8, [sp, #16]
   160a0:	ldrd	sl, [sp, #24]
   160a4:	add	sp, sp, #32
   160a8:	pop	{pc}		; (ldr pc, [sp], #4)
   160ac:	mov	r0, #8
   160b0:	mvn	r3, #-2147483648	; 0x80000000
   160b4:	add	r1, sp, #36	; 0x24
   160b8:	str	r0, [sp]
   160bc:	mov	r0, #0
   160c0:	bl	16cac <__assert_fail@plt+0x5de8>
   160c4:	ldrd	r2, [r4, #8]
   160c8:	mov	r5, r0
   160cc:	str	r0, [r4]
   160d0:	strd	r2, [r0]
   160d4:	b	15fac <__assert_fail@plt+0x50e8>
   160d8:	andeq	r9, r2, ip, lsl #2
   160dc:	ldr	r3, [pc, #4]	; 160e8 <__assert_fail@plt+0x5224>
   160e0:	mvn	r2, #0
   160e4:	b	1438c <__assert_fail@plt+0x34c8>
   160e8:	andeq	r9, r2, r4, lsl #2
   160ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   160f0:	movw	r4, #37108	; 0x90f4
   160f4:	movt	r4, #2
   160f8:	strd	r6, [sp, #8]
   160fc:	strd	r8, [sp, #16]
   16100:	strd	sl, [sp, #24]
   16104:	mov	sl, r0
   16108:	str	lr, [sp, #32]
   1610c:	sub	sp, sp, #44	; 0x2c
   16110:	bl	10de0 <__errno_location@plt>
   16114:	ldr	r3, [r0]
   16118:	mov	r8, r0
   1611c:	ldr	r2, [r4, #4]
   16120:	ldr	r5, [r4]
   16124:	str	r3, [sp, #28]
   16128:	cmp	r2, #0
   1612c:	bgt	16188 <__assert_fail@plt+0x52c4>
   16130:	add	r3, r4, #8
   16134:	str	r2, [sp, #36]	; 0x24
   16138:	rsb	r2, r2, #1
   1613c:	cmp	r5, r3
   16140:	beq	16250 <__assert_fail@plt+0x538c>
   16144:	mov	r1, #8
   16148:	mov	r0, r5
   1614c:	mvn	r3, #-2147483648	; 0x80000000
   16150:	str	r1, [sp]
   16154:	add	r1, sp, #36	; 0x24
   16158:	bl	16cac <__assert_fail@plt+0x5de8>
   1615c:	mov	r5, r0
   16160:	str	r0, [r4]
   16164:	ldr	r0, [r4, #4]
   16168:	mov	r1, #0
   1616c:	ldr	r2, [sp, #36]	; 0x24
   16170:	sub	r2, r2, r0
   16174:	add	r0, r5, r0, lsl #3
   16178:	lsl	r2, r2, #3
   1617c:	bl	10df8 <memset@plt>
   16180:	ldr	r3, [sp, #36]	; 0x24
   16184:	str	r3, [r4, #4]
   16188:	ldr	ip, [r4, #16]
   1618c:	mvn	r3, #0
   16190:	mov	r2, sl
   16194:	ldr	r7, [r4, #20]
   16198:	ldr	fp, [pc, #220]	; 1627c <__assert_fail@plt+0x53b8>
   1619c:	ldr	r9, [r5]
   161a0:	orr	r7, r7, #1
   161a4:	ldr	r6, [r5, #4]
   161a8:	str	ip, [sp]
   161ac:	ldr	ip, [r4, #56]	; 0x38
   161b0:	mov	r1, r9
   161b4:	stmib	sp, {r7, fp}
   161b8:	ldr	lr, [r4, #60]	; 0x3c
   161bc:	mov	r0, r6
   161c0:	str	ip, [sp, #12]
   161c4:	str	lr, [sp, #16]
   161c8:	bl	129a0 <__assert_fail@plt+0x1adc>
   161cc:	cmp	r9, r0
   161d0:	bhi	16228 <__assert_fail@plt+0x5364>
   161d4:	add	r9, r0, #1
   161d8:	movw	r3, #37288	; 0x91a8
   161dc:	movt	r3, #2
   161e0:	cmp	r6, r3
   161e4:	str	r9, [r5]
   161e8:	beq	161f4 <__assert_fail@plt+0x5330>
   161ec:	mov	r0, r6
   161f0:	bl	1264c <__assert_fail@plt+0x1788>
   161f4:	mov	r0, r9
   161f8:	bl	16a08 <__assert_fail@plt+0x5b44>
   161fc:	ldr	r3, [r4, #16]
   16200:	mov	r2, sl
   16204:	mov	r1, r9
   16208:	mov	r6, r0
   1620c:	ldr	lr, [r4, #56]	; 0x38
   16210:	ldr	ip, [r4, #60]	; 0x3c
   16214:	str	r0, [r5, #4]
   16218:	stm	sp, {r3, r7, fp, lr}
   1621c:	mvn	r3, #0
   16220:	str	ip, [sp, #16]
   16224:	bl	129a0 <__assert_fail@plt+0x1adc>
   16228:	ldr	r3, [sp, #28]
   1622c:	mov	r0, r6
   16230:	str	r3, [r8]
   16234:	add	sp, sp, #44	; 0x2c
   16238:	ldrd	r4, [sp]
   1623c:	ldrd	r6, [sp, #8]
   16240:	ldrd	r8, [sp, #16]
   16244:	ldrd	sl, [sp, #24]
   16248:	add	sp, sp, #32
   1624c:	pop	{pc}		; (ldr pc, [sp], #4)
   16250:	mov	r0, #8
   16254:	mvn	r3, #-2147483648	; 0x80000000
   16258:	add	r1, sp, #36	; 0x24
   1625c:	str	r0, [sp]
   16260:	mov	r0, #0
   16264:	bl	16cac <__assert_fail@plt+0x5de8>
   16268:	ldrd	r2, [r4, #8]
   1626c:	mov	r5, r0
   16270:	str	r0, [r4]
   16274:	strd	r2, [r0]
   16278:	b	16164 <__assert_fail@plt+0x52a0>
   1627c:	andeq	r9, r2, ip, lsl #2
   16280:	cmp	r1, #0
   16284:	strd	r4, [sp, #-16]!
   16288:	mov	ip, r3
   1628c:	str	r6, [sp, #8]
   16290:	mov	r4, r0
   16294:	str	lr, [sp, #12]
   16298:	sub	sp, sp, #32
   1629c:	ldr	r5, [sp, #48]	; 0x30
   162a0:	ldr	r6, [sp, #52]	; 0x34
   162a4:	beq	163e8 <__assert_fail@plt+0x5524>
   162a8:	mov	r3, r1
   162ac:	mov	r1, #1
   162b0:	stm	sp, {r2, ip}
   162b4:	movw	r2, #32496	; 0x7ef0
   162b8:	movt	r2, #1
   162bc:	bl	10e1c <__fprintf_chk@plt>
   162c0:	mov	r2, #5
   162c4:	movw	r1, #32516	; 0x7f04
   162c8:	movt	r1, #1
   162cc:	mov	r0, #0
   162d0:	bl	10d08 <dcgettext@plt>
   162d4:	movw	ip, #2022	; 0x7e6
   162d8:	mov	r3, r0
   162dc:	mov	r1, #1
   162e0:	movw	r2, #33244	; 0x81dc
   162e4:	movt	r2, #1
   162e8:	mov	r0, r4
   162ec:	str	ip, [sp]
   162f0:	bl	10e1c <__fprintf_chk@plt>
   162f4:	mov	r1, r4
   162f8:	mov	r0, #10
   162fc:	bl	10cfc <fputc_unlocked@plt>
   16300:	mov	r2, #5
   16304:	movw	r1, #32520	; 0x7f08
   16308:	movt	r1, #1
   1630c:	mov	r0, #0
   16310:	bl	10d08 <dcgettext@plt>
   16314:	mov	r2, r0
   16318:	mov	r1, #1
   1631c:	movw	r3, #32692	; 0x7fb4
   16320:	movt	r3, #1
   16324:	mov	r0, r4
   16328:	bl	10e1c <__fprintf_chk@plt>
   1632c:	mov	r1, r4
   16330:	mov	r0, #10
   16334:	bl	10cfc <fputc_unlocked@plt>
   16338:	cmp	r6, #9
   1633c:	ldrls	pc, [pc, r6, lsl #2]
   16340:	b	16654 <__assert_fail@plt+0x5790>
   16344:	ldrdeq	r6, [r1], -r4
   16348:	andeq	r6, r1, r4, lsl #8
   1634c:	andeq	r6, r1, r0, asr #8
   16350:	andeq	r6, r1, r0, lsl #9
   16354:	andeq	r6, r1, r8, asr #9
   16358:	andeq	r6, r1, r0, lsl #10
   1635c:	andeq	r6, r1, r8, asr #10
   16360:	muleq	r1, ip, r5
   16364:	strdeq	r6, [r1], -r4
   16368:	andeq	r6, r1, ip, ror #6
   1636c:	movw	r1, #32996	; 0x80e4
   16370:	movt	r1, #1
   16374:	mov	r2, #5
   16378:	mov	r0, #0
   1637c:	bl	10d08 <dcgettext@plt>
   16380:	ldr	lr, [r5, #4]
   16384:	mov	r2, r0
   16388:	mov	r1, #1
   1638c:	mov	r0, r4
   16390:	ldr	r3, [r5, #8]
   16394:	ldr	ip, [r5, #32]
   16398:	str	lr, [sp]
   1639c:	ldr	lr, [r5, #12]
   163a0:	str	ip, [sp, #28]
   163a4:	ldr	ip, [r5, #28]
   163a8:	str	r3, [sp, #4]
   163ac:	ldr	r3, [r5, #16]
   163b0:	str	lr, [sp, #8]
   163b4:	ldr	lr, [r5, #20]
   163b8:	str	ip, [sp, #24]
   163bc:	ldr	ip, [r5, #24]
   163c0:	str	r3, [sp, #12]
   163c4:	ldr	r3, [r5]
   163c8:	str	lr, [sp, #16]
   163cc:	str	ip, [sp, #20]
   163d0:	bl	10e1c <__fprintf_chk@plt>
   163d4:	add	sp, sp, #32
   163d8:	ldrd	r4, [sp]
   163dc:	ldr	r6, [sp, #8]
   163e0:	add	sp, sp, #12
   163e4:	pop	{pc}		; (ldr pc, [sp], #4)
   163e8:	mov	r3, r2
   163ec:	mov	r1, #1
   163f0:	str	ip, [sp]
   163f4:	movw	r2, #32508	; 0x7efc
   163f8:	movt	r2, #1
   163fc:	bl	10e1c <__fprintf_chk@plt>
   16400:	b	162c0 <__assert_fail@plt+0x53fc>
   16404:	mov	r2, #5
   16408:	movw	r1, #32728	; 0x7fd8
   1640c:	movt	r1, #1
   16410:	mov	r0, #0
   16414:	bl	10d08 <dcgettext@plt>
   16418:	ldr	r3, [r5]
   1641c:	mov	r2, r0
   16420:	mov	r1, #1
   16424:	mov	r0, r4
   16428:	add	sp, sp, #32
   1642c:	ldrd	r4, [sp]
   16430:	ldr	r6, [sp, #8]
   16434:	ldr	lr, [sp, #12]
   16438:	add	sp, sp, #16
   1643c:	b	10e1c <__fprintf_chk@plt>
   16440:	mov	r2, #5
   16444:	movw	r1, #32744	; 0x7fe8
   16448:	movt	r1, #1
   1644c:	mov	r0, #0
   16450:	bl	10d08 <dcgettext@plt>
   16454:	ldm	r5, {r3, ip}
   16458:	mov	r2, r0
   1645c:	mov	r1, #1
   16460:	mov	r0, r4
   16464:	str	ip, [sp, #48]	; 0x30
   16468:	add	sp, sp, #32
   1646c:	ldrd	r4, [sp]
   16470:	ldr	r6, [sp, #8]
   16474:	ldr	lr, [sp, #12]
   16478:	add	sp, sp, #16
   1647c:	b	10e1c <__fprintf_chk@plt>
   16480:	mov	r2, #5
   16484:	movw	r1, #32768	; 0x8000
   16488:	movt	r1, #1
   1648c:	mov	r0, #0
   16490:	bl	10d08 <dcgettext@plt>
   16494:	ldm	r5, {r3, lr}
   16498:	mov	r2, r0
   1649c:	mov	r1, #1
   164a0:	mov	r0, r4
   164a4:	ldr	ip, [r5, #8]
   164a8:	str	lr, [sp, #48]	; 0x30
   164ac:	str	ip, [sp, #52]	; 0x34
   164b0:	add	sp, sp, #32
   164b4:	ldrd	r4, [sp]
   164b8:	ldr	r6, [sp, #8]
   164bc:	ldr	lr, [sp, #12]
   164c0:	add	sp, sp, #16
   164c4:	b	10e1c <__fprintf_chk@plt>
   164c8:	mov	r2, #5
   164cc:	movw	r1, #32796	; 0x801c
   164d0:	movt	r1, #1
   164d4:	mov	r0, #0
   164d8:	bl	10d08 <dcgettext@plt>
   164dc:	ldmib	r5, {r3, ip, lr}
   164e0:	mov	r2, r0
   164e4:	mov	r1, #1
   164e8:	mov	r0, r4
   164ec:	str	r3, [sp]
   164f0:	ldr	r3, [r5]
   164f4:	stmib	sp, {ip, lr}
   164f8:	bl	10e1c <__fprintf_chk@plt>
   164fc:	b	163d4 <__assert_fail@plt+0x5510>
   16500:	mov	r2, #5
   16504:	movw	r1, #32828	; 0x803c
   16508:	movt	r1, #1
   1650c:	mov	r0, #0
   16510:	bl	10d08 <dcgettext@plt>
   16514:	ldmib	r5, {ip, lr}
   16518:	mov	r2, r0
   1651c:	mov	r1, #1
   16520:	mov	r0, r4
   16524:	ldr	r3, [r5, #16]
   16528:	str	ip, [sp]
   1652c:	ldr	ip, [r5, #12]
   16530:	str	r3, [sp, #12]
   16534:	ldr	r3, [r5]
   16538:	str	lr, [sp, #4]
   1653c:	str	ip, [sp, #8]
   16540:	bl	10e1c <__fprintf_chk@plt>
   16544:	b	163d4 <__assert_fail@plt+0x5510>
   16548:	mov	r2, #5
   1654c:	movw	r1, #32864	; 0x8060
   16550:	movt	r1, #1
   16554:	mov	r0, #0
   16558:	bl	10d08 <dcgettext@plt>
   1655c:	ldr	lr, [r5, #4]
   16560:	mov	r2, r0
   16564:	mov	r1, #1
   16568:	mov	r0, r4
   1656c:	ldr	r3, [r5, #8]
   16570:	ldr	ip, [r5, #20]
   16574:	str	lr, [sp]
   16578:	ldr	lr, [r5, #12]
   1657c:	str	ip, [sp, #16]
   16580:	ldr	ip, [r5, #16]
   16584:	str	r3, [sp, #4]
   16588:	ldr	r3, [r5]
   1658c:	str	lr, [sp, #8]
   16590:	str	ip, [sp, #12]
   16594:	bl	10e1c <__fprintf_chk@plt>
   16598:	b	163d4 <__assert_fail@plt+0x5510>
   1659c:	mov	r2, #5
   165a0:	movw	r1, #32904	; 0x8088
   165a4:	movt	r1, #1
   165a8:	mov	r0, #0
   165ac:	bl	10d08 <dcgettext@plt>
   165b0:	ldmib	r5, {r3, ip}
   165b4:	mov	r2, r0
   165b8:	mov	r1, #1
   165bc:	mov	r0, r4
   165c0:	ldr	lr, [r5, #24]
   165c4:	str	r3, [sp]
   165c8:	ldr	r3, [r5, #12]
   165cc:	str	lr, [sp, #20]
   165d0:	ldr	lr, [r5, #20]
   165d4:	str	ip, [sp, #4]
   165d8:	ldr	ip, [r5, #16]
   165dc:	str	r3, [sp, #8]
   165e0:	ldr	r3, [r5]
   165e4:	str	ip, [sp, #12]
   165e8:	str	lr, [sp, #16]
   165ec:	bl	10e1c <__fprintf_chk@plt>
   165f0:	b	163d4 <__assert_fail@plt+0x5510>
   165f4:	mov	r2, #5
   165f8:	movw	r1, #32948	; 0x80b4
   165fc:	movt	r1, #1
   16600:	mov	r0, #0
   16604:	bl	10d08 <dcgettext@plt>
   16608:	ldmib	r5, {ip, lr}
   1660c:	mov	r2, r0
   16610:	mov	r1, #1
   16614:	mov	r0, r4
   16618:	ldr	r3, [r5, #28]
   1661c:	str	ip, [sp]
   16620:	ldr	ip, [r5, #12]
   16624:	str	r3, [sp, #24]
   16628:	ldr	r3, [r5, #24]
   1662c:	str	lr, [sp, #4]
   16630:	ldr	lr, [r5, #16]
   16634:	str	ip, [sp, #8]
   16638:	ldr	ip, [r5, #20]
   1663c:	str	r3, [sp, #20]
   16640:	ldr	r3, [r5]
   16644:	str	lr, [sp, #12]
   16648:	str	ip, [sp, #16]
   1664c:	bl	10e1c <__fprintf_chk@plt>
   16650:	b	163d4 <__assert_fail@plt+0x5510>
   16654:	movw	r1, #33048	; 0x8118
   16658:	movt	r1, #1
   1665c:	b	16374 <__assert_fail@plt+0x54b0>
   16660:	strd	r4, [sp, #-12]!
   16664:	str	lr, [sp, #8]
   16668:	sub	sp, sp, #12
   1666c:	ldr	r5, [sp, #24]
   16670:	ldr	ip, [r5]
   16674:	cmp	ip, #0
   16678:	beq	16694 <__assert_fail@plt+0x57d0>
   1667c:	mov	lr, r5
   16680:	mov	ip, #0
   16684:	ldr	r4, [lr, #4]!
   16688:	add	ip, ip, #1
   1668c:	cmp	r4, #0
   16690:	bne	16684 <__assert_fail@plt+0x57c0>
   16694:	stm	sp, {r5, ip}
   16698:	bl	16280 <__assert_fail@plt+0x53bc>
   1669c:	add	sp, sp, #12
   166a0:	ldrd	r4, [sp]
   166a4:	add	sp, sp, #8
   166a8:	pop	{pc}		; (ldr pc, [sp], #4)
   166ac:	push	{lr}		; (str lr, [sp, #-4]!)
   166b0:	sub	sp, sp, #52	; 0x34
   166b4:	ldr	ip, [sp, #56]	; 0x38
   166b8:	ldr	lr, [ip]
   166bc:	cmp	lr, #0
   166c0:	str	lr, [sp, #8]
   166c4:	beq	1675c <__assert_fail@plt+0x5898>
   166c8:	ldr	lr, [ip, #4]
   166cc:	cmp	lr, #0
   166d0:	str	lr, [sp, #12]
   166d4:	beq	16770 <__assert_fail@plt+0x58ac>
   166d8:	ldr	lr, [ip, #8]
   166dc:	cmp	lr, #0
   166e0:	str	lr, [sp, #16]
   166e4:	beq	16778 <__assert_fail@plt+0x58b4>
   166e8:	ldr	lr, [ip, #12]
   166ec:	cmp	lr, #0
   166f0:	str	lr, [sp, #20]
   166f4:	beq	16780 <__assert_fail@plt+0x58bc>
   166f8:	ldr	lr, [ip, #16]
   166fc:	cmp	lr, #0
   16700:	str	lr, [sp, #24]
   16704:	beq	16788 <__assert_fail@plt+0x58c4>
   16708:	ldr	lr, [ip, #20]
   1670c:	cmp	lr, #0
   16710:	str	lr, [sp, #28]
   16714:	beq	16790 <__assert_fail@plt+0x58cc>
   16718:	ldr	lr, [ip, #24]
   1671c:	cmp	lr, #0
   16720:	str	lr, [sp, #32]
   16724:	beq	16798 <__assert_fail@plt+0x58d4>
   16728:	ldr	lr, [ip, #28]
   1672c:	cmp	lr, #0
   16730:	str	lr, [sp, #36]	; 0x24
   16734:	beq	167a0 <__assert_fail@plt+0x58dc>
   16738:	ldr	lr, [ip, #32]
   1673c:	cmp	lr, #0
   16740:	str	lr, [sp, #40]	; 0x28
   16744:	beq	167a8 <__assert_fail@plt+0x58e4>
   16748:	ldr	ip, [ip, #36]	; 0x24
   1674c:	cmp	ip, #0
   16750:	str	ip, [sp, #44]	; 0x2c
   16754:	movne	lr, #10
   16758:	moveq	lr, #9
   1675c:	add	ip, sp, #8
   16760:	stm	sp, {ip, lr}
   16764:	bl	16280 <__assert_fail@plt+0x53bc>
   16768:	add	sp, sp, #52	; 0x34
   1676c:	pop	{pc}		; (ldr pc, [sp], #4)
   16770:	mov	lr, #1
   16774:	b	1675c <__assert_fail@plt+0x5898>
   16778:	mov	lr, #2
   1677c:	b	1675c <__assert_fail@plt+0x5898>
   16780:	mov	lr, #3
   16784:	b	1675c <__assert_fail@plt+0x5898>
   16788:	mov	lr, #4
   1678c:	b	1675c <__assert_fail@plt+0x5898>
   16790:	mov	lr, #5
   16794:	b	1675c <__assert_fail@plt+0x5898>
   16798:	mov	lr, #6
   1679c:	b	1675c <__assert_fail@plt+0x5898>
   167a0:	mov	lr, #7
   167a4:	b	1675c <__assert_fail@plt+0x5898>
   167a8:	mov	lr, #8
   167ac:	b	1675c <__assert_fail@plt+0x5898>
   167b0:	push	{r3}		; (str r3, [sp, #-4]!)
   167b4:	push	{lr}		; (str lr, [sp, #-4]!)
   167b8:	sub	sp, sp, #56	; 0x38
   167bc:	ldr	ip, [sp, #64]	; 0x40
   167c0:	add	r3, sp, #64	; 0x40
   167c4:	str	r3, [sp, #12]
   167c8:	cmp	ip, #0
   167cc:	str	ip, [sp, #16]
   167d0:	beq	16868 <__assert_fail@plt+0x59a4>
   167d4:	ldr	ip, [sp, #68]	; 0x44
   167d8:	cmp	ip, #0
   167dc:	str	ip, [sp, #20]
   167e0:	beq	1688c <__assert_fail@plt+0x59c8>
   167e4:	ldr	ip, [sp, #72]	; 0x48
   167e8:	cmp	ip, #0
   167ec:	str	ip, [sp, #24]
   167f0:	beq	16894 <__assert_fail@plt+0x59d0>
   167f4:	ldr	ip, [sp, #76]	; 0x4c
   167f8:	cmp	ip, #0
   167fc:	str	ip, [sp, #28]
   16800:	beq	1689c <__assert_fail@plt+0x59d8>
   16804:	ldr	ip, [sp, #80]	; 0x50
   16808:	cmp	ip, #0
   1680c:	str	ip, [sp, #32]
   16810:	beq	168a4 <__assert_fail@plt+0x59e0>
   16814:	ldr	ip, [sp, #84]	; 0x54
   16818:	cmp	ip, #0
   1681c:	str	ip, [sp, #36]	; 0x24
   16820:	beq	168ac <__assert_fail@plt+0x59e8>
   16824:	ldr	ip, [sp, #88]	; 0x58
   16828:	cmp	ip, #0
   1682c:	str	ip, [sp, #40]	; 0x28
   16830:	beq	168b4 <__assert_fail@plt+0x59f0>
   16834:	ldr	ip, [sp, #92]	; 0x5c
   16838:	cmp	ip, #0
   1683c:	str	ip, [sp, #44]	; 0x2c
   16840:	beq	168bc <__assert_fail@plt+0x59f8>
   16844:	ldr	ip, [sp, #96]	; 0x60
   16848:	cmp	ip, #0
   1684c:	str	ip, [sp, #48]	; 0x30
   16850:	beq	168c4 <__assert_fail@plt+0x5a00>
   16854:	ldr	r3, [sp, #100]	; 0x64
   16858:	cmp	r3, #0
   1685c:	str	r3, [sp, #52]	; 0x34
   16860:	movne	ip, #10
   16864:	moveq	ip, #9
   16868:	ldr	r3, [sp, #60]	; 0x3c
   1686c:	add	lr, sp, #16
   16870:	str	lr, [sp]
   16874:	str	ip, [sp, #4]
   16878:	bl	16280 <__assert_fail@plt+0x53bc>
   1687c:	add	sp, sp, #56	; 0x38
   16880:	pop	{lr}		; (ldr lr, [sp], #4)
   16884:	add	sp, sp, #4
   16888:	bx	lr
   1688c:	mov	ip, #1
   16890:	b	16868 <__assert_fail@plt+0x59a4>
   16894:	mov	ip, #2
   16898:	b	16868 <__assert_fail@plt+0x59a4>
   1689c:	mov	ip, #3
   168a0:	b	16868 <__assert_fail@plt+0x59a4>
   168a4:	mov	ip, #4
   168a8:	b	16868 <__assert_fail@plt+0x59a4>
   168ac:	mov	ip, #5
   168b0:	b	16868 <__assert_fail@plt+0x59a4>
   168b4:	mov	ip, #6
   168b8:	b	16868 <__assert_fail@plt+0x59a4>
   168bc:	mov	ip, #7
   168c0:	b	16868 <__assert_fail@plt+0x59a4>
   168c4:	mov	ip, #8
   168c8:	b	16868 <__assert_fail@plt+0x59a4>
   168cc:	movw	r3, #37204	; 0x9154
   168d0:	movt	r3, #2
   168d4:	str	r4, [sp, #-8]!
   168d8:	mov	r0, #10
   168dc:	ldr	r1, [r3]
   168e0:	str	lr, [sp, #4]
   168e4:	bl	10cfc <fputc_unlocked@plt>
   168e8:	mov	r2, #5
   168ec:	movw	r1, #33108	; 0x8154
   168f0:	movt	r1, #1
   168f4:	mov	r0, #0
   168f8:	bl	10d08 <dcgettext@plt>
   168fc:	mov	r1, r0
   16900:	movw	r2, #33128	; 0x8168
   16904:	movt	r2, #1
   16908:	mov	r0, #1
   1690c:	bl	10e04 <__printf_chk@plt>
   16910:	mov	r2, #5
   16914:	movw	r1, #33152	; 0x8180
   16918:	movt	r1, #1
   1691c:	mov	r0, #0
   16920:	bl	10d08 <dcgettext@plt>
   16924:	mov	r1, r0
   16928:	movw	r3, #30832	; 0x7870
   1692c:	movt	r3, #1
   16930:	movw	r2, #30872	; 0x7898
   16934:	movt	r2, #1
   16938:	mov	r0, #1
   1693c:	bl	10e04 <__printf_chk@plt>
   16940:	mov	r2, #5
   16944:	movw	r1, #33172	; 0x8194
   16948:	movt	r1, #1
   1694c:	mov	r0, #0
   16950:	bl	10d08 <dcgettext@plt>
   16954:	mov	r1, r0
   16958:	movw	r2, #33212	; 0x81bc
   1695c:	movt	r2, #1
   16960:	mov	r0, #1
   16964:	ldr	r4, [sp]
   16968:	ldr	lr, [sp, #4]
   1696c:	add	sp, sp, #8
   16970:	b	10e04 <__printf_chk@plt>
   16974:	strd	r4, [sp, #-16]!
   16978:	mov	r4, r0
   1697c:	mov	r5, r2
   16980:	str	r6, [sp, #8]
   16984:	mov	r6, r1
   16988:	str	lr, [sp, #12]
   1698c:	bl	17208 <__assert_fail@plt+0x6344>
   16990:	cmp	r0, #0
   16994:	beq	169a8 <__assert_fail@plt+0x5ae4>
   16998:	ldrd	r4, [sp]
   1699c:	ldr	r6, [sp, #8]
   169a0:	add	sp, sp, #12
   169a4:	pop	{pc}		; (ldr pc, [sp], #4)
   169a8:	cmp	r4, #0
   169ac:	beq	169bc <__assert_fail@plt+0x5af8>
   169b0:	cmp	r6, #0
   169b4:	cmpne	r5, #0
   169b8:	beq	16998 <__assert_fail@plt+0x5ad4>
   169bc:	bl	16f78 <__assert_fail@plt+0x60b4>
   169c0:	str	r4, [sp, #-8]!
   169c4:	str	lr, [sp, #4]
   169c8:	bl	17030 <__assert_fail@plt+0x616c>
   169cc:	cmp	r0, #0
   169d0:	beq	169e0 <__assert_fail@plt+0x5b1c>
   169d4:	ldr	r4, [sp]
   169d8:	add	sp, sp, #4
   169dc:	pop	{pc}		; (ldr pc, [sp], #4)
   169e0:	bl	16f78 <__assert_fail@plt+0x60b4>
   169e4:	str	r4, [sp, #-8]!
   169e8:	str	lr, [sp, #4]
   169ec:	bl	17030 <__assert_fail@plt+0x616c>
   169f0:	cmp	r0, #0
   169f4:	beq	16a04 <__assert_fail@plt+0x5b40>
   169f8:	ldr	r4, [sp]
   169fc:	add	sp, sp, #4
   16a00:	pop	{pc}		; (ldr pc, [sp], #4)
   16a04:	bl	16f78 <__assert_fail@plt+0x60b4>
   16a08:	str	r4, [sp, #-8]!
   16a0c:	str	lr, [sp, #4]
   16a10:	bl	17030 <__assert_fail@plt+0x616c>
   16a14:	cmp	r0, #0
   16a18:	beq	16a28 <__assert_fail@plt+0x5b64>
   16a1c:	ldr	r4, [sp]
   16a20:	add	sp, sp, #4
   16a24:	pop	{pc}		; (ldr pc, [sp], #4)
   16a28:	bl	16f78 <__assert_fail@plt+0x60b4>
   16a2c:	strd	r4, [sp, #-16]!
   16a30:	mov	r5, r0
   16a34:	mov	r4, r1
   16a38:	str	r6, [sp, #8]
   16a3c:	str	lr, [sp, #12]
   16a40:	bl	1706c <__assert_fail@plt+0x61a8>
   16a44:	cmp	r0, #0
   16a48:	beq	16a5c <__assert_fail@plt+0x5b98>
   16a4c:	ldrd	r4, [sp]
   16a50:	ldr	r6, [sp, #8]
   16a54:	add	sp, sp, #12
   16a58:	pop	{pc}		; (ldr pc, [sp], #4)
   16a5c:	adds	r4, r4, #0
   16a60:	movne	r4, #1
   16a64:	cmp	r5, #0
   16a68:	moveq	r4, #1
   16a6c:	cmp	r4, #0
   16a70:	beq	16a4c <__assert_fail@plt+0x5b88>
   16a74:	bl	16f78 <__assert_fail@plt+0x60b4>
   16a78:	cmp	r1, #0
   16a7c:	orreq	r1, r1, #1
   16a80:	str	r4, [sp, #-8]!
   16a84:	str	lr, [sp, #4]
   16a88:	bl	1706c <__assert_fail@plt+0x61a8>
   16a8c:	cmp	r0, #0
   16a90:	beq	16aa0 <__assert_fail@plt+0x5bdc>
   16a94:	ldr	r4, [sp]
   16a98:	add	sp, sp, #4
   16a9c:	pop	{pc}		; (ldr pc, [sp], #4)
   16aa0:	bl	16f78 <__assert_fail@plt+0x60b4>
   16aa4:	strd	r4, [sp, #-16]!
   16aa8:	mov	r4, r0
   16aac:	mov	r5, r2
   16ab0:	str	r6, [sp, #8]
   16ab4:	mov	r6, r1
   16ab8:	str	lr, [sp, #12]
   16abc:	bl	17208 <__assert_fail@plt+0x6344>
   16ac0:	cmp	r0, #0
   16ac4:	beq	16ad8 <__assert_fail@plt+0x5c14>
   16ac8:	ldrd	r4, [sp]
   16acc:	ldr	r6, [sp, #8]
   16ad0:	add	sp, sp, #12
   16ad4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ad8:	cmp	r4, #0
   16adc:	beq	16aec <__assert_fail@plt+0x5c28>
   16ae0:	cmp	r6, #0
   16ae4:	cmpne	r5, #0
   16ae8:	beq	16ac8 <__assert_fail@plt+0x5c04>
   16aec:	bl	16f78 <__assert_fail@plt+0x60b4>
   16af0:	cmp	r2, #0
   16af4:	cmpne	r1, #0
   16af8:	str	r4, [sp, #-8]!
   16afc:	moveq	r2, #1
   16b00:	str	lr, [sp, #4]
   16b04:	moveq	r1, r2
   16b08:	bl	17208 <__assert_fail@plt+0x6344>
   16b0c:	cmp	r0, #0
   16b10:	beq	16b20 <__assert_fail@plt+0x5c5c>
   16b14:	ldr	r4, [sp]
   16b18:	add	sp, sp, #4
   16b1c:	pop	{pc}		; (ldr pc, [sp], #4)
   16b20:	bl	16f78 <__assert_fail@plt+0x60b4>
   16b24:	mov	r2, r1
   16b28:	mov	r1, r0
   16b2c:	str	r4, [sp, #-8]!
   16b30:	mov	r0, #0
   16b34:	str	lr, [sp, #4]
   16b38:	bl	17208 <__assert_fail@plt+0x6344>
   16b3c:	cmp	r0, #0
   16b40:	beq	16b50 <__assert_fail@plt+0x5c8c>
   16b44:	ldr	r4, [sp]
   16b48:	add	sp, sp, #4
   16b4c:	pop	{pc}		; (ldr pc, [sp], #4)
   16b50:	bl	16f78 <__assert_fail@plt+0x60b4>
   16b54:	cmp	r1, #0
   16b58:	cmpne	r0, #0
   16b5c:	str	r4, [sp, #-8]!
   16b60:	moveq	r2, #1
   16b64:	movne	r2, r1
   16b68:	str	lr, [sp, #4]
   16b6c:	movne	r1, r0
   16b70:	moveq	r1, r2
   16b74:	mov	r0, #0
   16b78:	bl	17208 <__assert_fail@plt+0x6344>
   16b7c:	cmp	r0, #0
   16b80:	beq	16b90 <__assert_fail@plt+0x5ccc>
   16b84:	ldr	r4, [sp]
   16b88:	add	sp, sp, #4
   16b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   16b90:	bl	16f78 <__assert_fail@plt+0x60b4>
   16b94:	cmp	r0, #0
   16b98:	strd	r4, [sp, #-16]!
   16b9c:	mov	r5, r1
   16ba0:	ldr	r4, [r1]
   16ba4:	str	r6, [sp, #8]
   16ba8:	str	lr, [sp, #12]
   16bac:	beq	16bf4 <__assert_fail@plt+0x5d30>
   16bb0:	lsr	r3, r4, #1
   16bb4:	add	r3, r3, #1
   16bb8:	adds	r4, r4, r3
   16bbc:	bcs	16bf0 <__assert_fail@plt+0x5d2c>
   16bc0:	mov	r2, #1
   16bc4:	mov	r1, r4
   16bc8:	bl	17208 <__assert_fail@plt+0x6344>
   16bcc:	cmp	r0, #0
   16bd0:	beq	16be8 <__assert_fail@plt+0x5d24>
   16bd4:	ldr	r6, [sp, #8]
   16bd8:	str	r4, [r5]
   16bdc:	ldrd	r4, [sp]
   16be0:	add	sp, sp, #12
   16be4:	pop	{pc}		; (ldr pc, [sp], #4)
   16be8:	cmp	r4, #0
   16bec:	beq	16bd4 <__assert_fail@plt+0x5d10>
   16bf0:	bl	16f78 <__assert_fail@plt+0x60b4>
   16bf4:	cmp	r4, #0
   16bf8:	mov	r2, #1
   16bfc:	moveq	r4, #64	; 0x40
   16c00:	mov	r1, r4
   16c04:	bl	17208 <__assert_fail@plt+0x6344>
   16c08:	cmp	r0, #0
   16c0c:	bne	16bd4 <__assert_fail@plt+0x5d10>
   16c10:	b	16bf0 <__assert_fail@plt+0x5d2c>
   16c14:	cmp	r0, #0
   16c18:	strd	r4, [sp, #-16]!
   16c1c:	mov	r5, r1
   16c20:	ldr	r4, [r1]
   16c24:	str	r6, [sp, #8]
   16c28:	mov	r6, r2
   16c2c:	str	lr, [sp, #12]
   16c30:	beq	16c78 <__assert_fail@plt+0x5db4>
   16c34:	lsr	r3, r4, #1
   16c38:	add	r3, r3, #1
   16c3c:	adds	r4, r4, r3
   16c40:	bcs	16c74 <__assert_fail@plt+0x5db0>
   16c44:	mov	r1, r4
   16c48:	bl	17208 <__assert_fail@plt+0x6344>
   16c4c:	cmp	r0, #0
   16c50:	beq	16c68 <__assert_fail@plt+0x5da4>
   16c54:	ldr	r6, [sp, #8]
   16c58:	str	r4, [r5]
   16c5c:	ldrd	r4, [sp]
   16c60:	add	sp, sp, #12
   16c64:	pop	{pc}		; (ldr pc, [sp], #4)
   16c68:	cmp	r4, #0
   16c6c:	cmpne	r6, #0
   16c70:	beq	16c54 <__assert_fail@plt+0x5d90>
   16c74:	bl	16f78 <__assert_fail@plt+0x60b4>
   16c78:	cmp	r4, #0
   16c7c:	bne	16c90 <__assert_fail@plt+0x5dcc>
   16c80:	mov	r4, #64	; 0x40
   16c84:	udiv	r4, r4, r2
   16c88:	cmp	r2, #64	; 0x40
   16c8c:	addhi	r4, r4, #1
   16c90:	mov	r2, r6
   16c94:	mov	r1, r4
   16c98:	mov	r0, #0
   16c9c:	bl	17208 <__assert_fail@plt+0x6344>
   16ca0:	cmp	r0, #0
   16ca4:	bne	16c54 <__assert_fail@plt+0x5d90>
   16ca8:	b	16c74 <__assert_fail@plt+0x5db0>
   16cac:	ldr	ip, [r1]
   16cb0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16cb4:	strd	r6, [sp, #8]
   16cb8:	mov	r7, r1
   16cbc:	mov	r6, r0
   16cc0:	str	r8, [sp, #16]
   16cc4:	mvn	r8, r3
   16cc8:	lsr	r8, r8, #31
   16ccc:	str	lr, [sp, #20]
   16cd0:	asr	r1, ip, #1
   16cd4:	ldr	lr, [sp, #24]
   16cd8:	adds	r4, ip, r1
   16cdc:	mvnvs	r4, #-2147483648	; 0x80000000
   16ce0:	cmp	r3, r4
   16ce4:	movge	r1, #0
   16ce8:	andlt	r1, r8, #1
   16cec:	cmp	r1, #0
   16cf0:	movne	r4, r3
   16cf4:	smull	r0, r1, r4, lr
   16cf8:	cmp	r1, r0, asr #31
   16cfc:	bne	16dac <__assert_fail@plt+0x5ee8>
   16d00:	cmp	r0, #63	; 0x3f
   16d04:	mov	r5, r0
   16d08:	ble	16d78 <__assert_fail@plt+0x5eb4>
   16d0c:	cmp	r6, #0
   16d10:	sub	r1, r4, ip
   16d14:	streq	r6, [r7]
   16d18:	cmp	r1, r2
   16d1c:	bge	16d4c <__assert_fail@plt+0x5e88>
   16d20:	adds	r4, ip, r2
   16d24:	bvs	16da8 <__assert_fail@plt+0x5ee4>
   16d28:	cmp	r4, r3
   16d2c:	movle	r3, #0
   16d30:	andgt	r3, r8, #1
   16d34:	cmp	r3, #0
   16d38:	bne	16da8 <__assert_fail@plt+0x5ee4>
   16d3c:	smull	r0, r1, r4, lr
   16d40:	cmp	r1, r0, asr #31
   16d44:	mov	r5, r0
   16d48:	bne	16da8 <__assert_fail@plt+0x5ee4>
   16d4c:	mov	r1, r5
   16d50:	mov	r0, r6
   16d54:	bl	1706c <__assert_fail@plt+0x61a8>
   16d58:	cmp	r0, #0
   16d5c:	beq	16d8c <__assert_fail@plt+0x5ec8>
   16d60:	ldr	r8, [sp, #16]
   16d64:	str	r4, [r7]
   16d68:	ldrd	r4, [sp]
   16d6c:	ldrd	r6, [sp, #8]
   16d70:	add	sp, sp, #20
   16d74:	pop	{pc}		; (ldr pc, [sp], #4)
   16d78:	mov	r0, #64	; 0x40
   16d7c:	sdiv	r4, r0, lr
   16d80:	mls	r5, lr, r4, r0
   16d84:	sub	r5, r0, r5
   16d88:	b	16d0c <__assert_fail@plt+0x5e48>
   16d8c:	adds	r5, r5, #0
   16d90:	movne	r5, #1
   16d94:	cmp	r6, #0
   16d98:	movne	r6, r5
   16d9c:	moveq	r6, #1
   16da0:	cmp	r6, #0
   16da4:	beq	16d60 <__assert_fail@plt+0x5e9c>
   16da8:	bl	16f78 <__assert_fail@plt+0x60b4>
   16dac:	mvn	r0, #-2147483648	; 0x80000000
   16db0:	b	16d7c <__assert_fail@plt+0x5eb8>
   16db4:	mov	r1, #1
   16db8:	str	r4, [sp, #-8]!
   16dbc:	str	lr, [sp, #4]
   16dc0:	bl	16fbc <__assert_fail@plt+0x60f8>
   16dc4:	cmp	r0, #0
   16dc8:	beq	16dd8 <__assert_fail@plt+0x5f14>
   16dcc:	ldr	r4, [sp]
   16dd0:	add	sp, sp, #4
   16dd4:	pop	{pc}		; (ldr pc, [sp], #4)
   16dd8:	bl	16f78 <__assert_fail@plt+0x60b4>
   16ddc:	mov	r1, #1
   16de0:	str	r4, [sp, #-8]!
   16de4:	str	lr, [sp, #4]
   16de8:	bl	16fbc <__assert_fail@plt+0x60f8>
   16dec:	cmp	r0, #0
   16df0:	beq	16e00 <__assert_fail@plt+0x5f3c>
   16df4:	ldr	r4, [sp]
   16df8:	add	sp, sp, #4
   16dfc:	pop	{pc}		; (ldr pc, [sp], #4)
   16e00:	bl	16f78 <__assert_fail@plt+0x60b4>
   16e04:	str	r4, [sp, #-8]!
   16e08:	str	lr, [sp, #4]
   16e0c:	bl	16fbc <__assert_fail@plt+0x60f8>
   16e10:	cmp	r0, #0
   16e14:	beq	16e24 <__assert_fail@plt+0x5f60>
   16e18:	ldr	r4, [sp]
   16e1c:	add	sp, sp, #4
   16e20:	pop	{pc}		; (ldr pc, [sp], #4)
   16e24:	bl	16f78 <__assert_fail@plt+0x60b4>
   16e28:	str	r4, [sp, #-8]!
   16e2c:	str	lr, [sp, #4]
   16e30:	bl	16fbc <__assert_fail@plt+0x60f8>
   16e34:	cmp	r0, #0
   16e38:	beq	16e48 <__assert_fail@plt+0x5f84>
   16e3c:	ldr	r4, [sp]
   16e40:	add	sp, sp, #4
   16e44:	pop	{pc}		; (ldr pc, [sp], #4)
   16e48:	bl	16f78 <__assert_fail@plt+0x60b4>
   16e4c:	strd	r4, [sp, #-16]!
   16e50:	mov	r4, r1
   16e54:	str	r6, [sp, #8]
   16e58:	mov	r6, r0
   16e5c:	mov	r0, r1
   16e60:	str	lr, [sp, #12]
   16e64:	bl	17030 <__assert_fail@plt+0x616c>
   16e68:	subs	r5, r0, #0
   16e6c:	beq	16e90 <__assert_fail@plt+0x5fcc>
   16e70:	mov	r2, r4
   16e74:	mov	r1, r6
   16e78:	bl	10ccc <memcpy@plt>
   16e7c:	mov	r0, r5
   16e80:	ldrd	r4, [sp]
   16e84:	ldr	r6, [sp, #8]
   16e88:	add	sp, sp, #12
   16e8c:	pop	{pc}		; (ldr pc, [sp], #4)
   16e90:	bl	16f78 <__assert_fail@plt+0x60b4>
   16e94:	strd	r4, [sp, #-16]!
   16e98:	mov	r4, r1
   16e9c:	str	r6, [sp, #8]
   16ea0:	mov	r6, r0
   16ea4:	mov	r0, r1
   16ea8:	str	lr, [sp, #12]
   16eac:	bl	17030 <__assert_fail@plt+0x616c>
   16eb0:	subs	r5, r0, #0
   16eb4:	beq	16ed8 <__assert_fail@plt+0x6014>
   16eb8:	mov	r2, r4
   16ebc:	mov	r1, r6
   16ec0:	bl	10ccc <memcpy@plt>
   16ec4:	mov	r0, r5
   16ec8:	ldrd	r4, [sp]
   16ecc:	ldr	r6, [sp, #8]
   16ed0:	add	sp, sp, #12
   16ed4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ed8:	bl	16f78 <__assert_fail@plt+0x60b4>
   16edc:	strd	r4, [sp, #-16]!
   16ee0:	mov	r4, r1
   16ee4:	str	r6, [sp, #8]
   16ee8:	mov	r6, r0
   16eec:	add	r0, r1, #1
   16ef0:	str	lr, [sp, #12]
   16ef4:	bl	17030 <__assert_fail@plt+0x616c>
   16ef8:	subs	r5, r0, #0
   16efc:	beq	16f28 <__assert_fail@plt+0x6064>
   16f00:	mov	r3, #0
   16f04:	mov	r1, r6
   16f08:	mov	r2, r4
   16f0c:	strb	r3, [r5, r4]
   16f10:	bl	10ccc <memcpy@plt>
   16f14:	mov	r0, r5
   16f18:	ldrd	r4, [sp]
   16f1c:	ldr	r6, [sp, #8]
   16f20:	add	sp, sp, #12
   16f24:	pop	{pc}		; (ldr pc, [sp], #4)
   16f28:	bl	16f78 <__assert_fail@plt+0x60b4>
   16f2c:	strd	r4, [sp, #-16]!
   16f30:	str	r6, [sp, #8]
   16f34:	mov	r6, r0
   16f38:	str	lr, [sp, #12]
   16f3c:	bl	10dd4 <strlen@plt>
   16f40:	add	r4, r0, #1
   16f44:	mov	r0, r4
   16f48:	bl	17030 <__assert_fail@plt+0x616c>
   16f4c:	subs	r5, r0, #0
   16f50:	beq	16f74 <__assert_fail@plt+0x60b0>
   16f54:	mov	r2, r4
   16f58:	mov	r1, r6
   16f5c:	bl	10ccc <memcpy@plt>
   16f60:	mov	r0, r5
   16f64:	ldrd	r4, [sp]
   16f68:	ldr	r6, [sp, #8]
   16f6c:	add	sp, sp, #12
   16f70:	pop	{pc}		; (ldr pc, [sp], #4)
   16f74:	bl	16f78 <__assert_fail@plt+0x60b4>
   16f78:	movw	r3, #37104	; 0x90f0
   16f7c:	movt	r3, #2
   16f80:	str	r4, [sp, #-8]!
   16f84:	ldr	r4, [r3]
   16f88:	mov	r2, #5
   16f8c:	movw	r1, #33292	; 0x820c
   16f90:	movt	r1, #1
   16f94:	mov	r0, #0
   16f98:	str	lr, [sp, #4]
   16f9c:	bl	10d08 <dcgettext@plt>
   16fa0:	mov	r3, r0
   16fa4:	movw	r2, #31612	; 0x7b7c
   16fa8:	movt	r2, #1
   16fac:	mov	r1, #0
   16fb0:	mov	r0, r4
   16fb4:	bl	10d74 <error@plt>
   16fb8:	bl	10eac <abort@plt>
   16fbc:	cmp	r1, #0
   16fc0:	cmpne	r0, #0
   16fc4:	beq	17010 <__assert_fail@plt+0x614c>
   16fc8:	strd	r4, [sp, #-16]!
   16fcc:	umull	r4, r5, r0, r1
   16fd0:	str	r6, [sp, #8]
   16fd4:	str	lr, [sp, #12]
   16fd8:	adds	r3, r5, #0
   16fdc:	movne	r3, #1
   16fe0:	cmp	r4, #0
   16fe4:	blt	16ff0 <__assert_fail@plt+0x612c>
   16fe8:	cmp	r3, #0
   16fec:	beq	1701c <__assert_fail@plt+0x6158>
   16ff0:	bl	10de0 <__errno_location@plt>
   16ff4:	mov	r3, #12
   16ff8:	ldrd	r4, [sp]
   16ffc:	ldr	r6, [sp, #8]
   17000:	add	sp, sp, #12
   17004:	str	r3, [r0]
   17008:	mov	r0, #0
   1700c:	pop	{pc}		; (ldr pc, [sp], #4)
   17010:	mov	r1, #1
   17014:	mov	r0, r1
   17018:	b	10c6c <calloc@plt>
   1701c:	ldrd	r4, [sp]
   17020:	ldr	r6, [sp, #8]
   17024:	ldr	lr, [sp, #12]
   17028:	add	sp, sp, #16
   1702c:	b	10c6c <calloc@plt>
   17030:	cmp	r0, #0
   17034:	beq	17040 <__assert_fail@plt+0x617c>
   17038:	blt	17048 <__assert_fail@plt+0x6184>
   1703c:	b	10d80 <malloc@plt>
   17040:	mov	r0, #1
   17044:	b	10d80 <malloc@plt>
   17048:	str	r4, [sp, #-8]!
   1704c:	str	lr, [sp, #4]
   17050:	bl	10de0 <__errno_location@plt>
   17054:	mov	r3, #12
   17058:	ldr	r4, [sp]
   1705c:	add	sp, sp, #4
   17060:	str	r3, [r0]
   17064:	mov	r0, #0
   17068:	pop	{pc}		; (ldr pc, [sp], #4)
   1706c:	cmp	r0, #0
   17070:	beq	17098 <__assert_fail@plt+0x61d4>
   17074:	cmp	r1, #0
   17078:	str	r4, [sp, #-8]!
   1707c:	str	lr, [sp, #4]
   17080:	beq	170a0 <__assert_fail@plt+0x61dc>
   17084:	blt	170b4 <__assert_fail@plt+0x61f0>
   17088:	ldr	r4, [sp]
   1708c:	ldr	lr, [sp, #4]
   17090:	add	sp, sp, #8
   17094:	b	10d14 <realloc@plt>
   17098:	mov	r0, r1
   1709c:	b	17030 <__assert_fail@plt+0x616c>
   170a0:	bl	1264c <__assert_fail@plt+0x1788>
   170a4:	ldr	r4, [sp]
   170a8:	add	sp, sp, #4
   170ac:	mov	r0, #0
   170b0:	pop	{pc}		; (ldr pc, [sp], #4)
   170b4:	bl	10de0 <__errno_location@plt>
   170b8:	mov	r3, #12
   170bc:	str	r3, [r0]
   170c0:	b	170a4 <__assert_fail@plt+0x61e0>
   170c4:	strd	r4, [sp, #-16]!
   170c8:	mov	r4, r0
   170cc:	str	r6, [sp, #8]
   170d0:	str	lr, [sp, #12]
   170d4:	bl	10d5c <__fpending@plt>
   170d8:	ldr	r5, [r4]
   170dc:	mov	r6, r0
   170e0:	mov	r0, r4
   170e4:	bl	12538 <__assert_fail@plt+0x1674>
   170e8:	mov	r4, r0
   170ec:	and	r5, r5, #32
   170f0:	cmp	r5, #0
   170f4:	bne	1712c <__assert_fail@plt+0x6268>
   170f8:	cmp	r0, #0
   170fc:	beq	17118 <__assert_fail@plt+0x6254>
   17100:	cmp	r6, #0
   17104:	bne	17144 <__assert_fail@plt+0x6280>
   17108:	bl	10de0 <__errno_location@plt>
   1710c:	ldr	r4, [r0]
   17110:	subs	r4, r4, #9
   17114:	mvnne	r4, #0
   17118:	mov	r0, r4
   1711c:	ldrd	r4, [sp]
   17120:	ldr	r6, [sp, #8]
   17124:	add	sp, sp, #12
   17128:	pop	{pc}		; (ldr pc, [sp], #4)
   1712c:	cmp	r0, #0
   17130:	bne	17144 <__assert_fail@plt+0x6280>
   17134:	bl	10de0 <__errno_location@plt>
   17138:	str	r4, [r0]
   1713c:	mvn	r4, #0
   17140:	b	17118 <__assert_fail@plt+0x6254>
   17144:	mvn	r4, #0
   17148:	b	17118 <__assert_fail@plt+0x6254>
   1714c:	mov	r0, #14
   17150:	str	r4, [sp, #-8]!
   17154:	str	lr, [sp, #4]
   17158:	bl	10e70 <nl_langinfo@plt>
   1715c:	cmp	r0, #0
   17160:	beq	17184 <__assert_fail@plt+0x62c0>
   17164:	ldrb	r2, [r0]
   17168:	movw	r3, #33312	; 0x8220
   1716c:	movt	r3, #1
   17170:	ldr	r4, [sp]
   17174:	add	sp, sp, #4
   17178:	cmp	r2, #0
   1717c:	moveq	r0, r3
   17180:	pop	{pc}		; (ldr pc, [sp], #4)
   17184:	ldr	r4, [sp]
   17188:	add	sp, sp, #4
   1718c:	movw	r0, #33312	; 0x8220
   17190:	movt	r0, #1
   17194:	pop	{pc}		; (ldr pc, [sp], #4)
   17198:	strd	r4, [sp, #-20]!	; 0xffffffec
   1719c:	mov	r5, r2
   171a0:	strd	r6, [sp, #8]
   171a4:	subs	r6, r0, #0
   171a8:	mov	r7, r1
   171ac:	str	lr, [sp, #16]
   171b0:	sub	sp, sp, #12
   171b4:	addeq	r6, sp, #4
   171b8:	mov	r0, r6
   171bc:	bl	10d68 <mbrtowc@plt>
   171c0:	cmp	r5, #0
   171c4:	cmnne	r0, #3
   171c8:	mov	r4, r0
   171cc:	bhi	171e8 <__assert_fail@plt+0x6324>
   171d0:	mov	r0, r4
   171d4:	add	sp, sp, #12
   171d8:	ldrd	r4, [sp]
   171dc:	ldrd	r6, [sp, #8]
   171e0:	add	sp, sp, #16
   171e4:	pop	{pc}		; (ldr pc, [sp], #4)
   171e8:	mov	r0, #0
   171ec:	bl	17240 <__assert_fail@plt+0x637c>
   171f0:	cmp	r0, #0
   171f4:	bne	171d0 <__assert_fail@plt+0x630c>
   171f8:	ldrb	r3, [r7]
   171fc:	mov	r4, #1
   17200:	str	r3, [r6]
   17204:	b	171d0 <__assert_fail@plt+0x630c>
   17208:	umull	r2, r3, r1, r2
   1720c:	cmp	r3, #0
   17210:	bne	1721c <__assert_fail@plt+0x6358>
   17214:	mov	r1, r2
   17218:	b	1706c <__assert_fail@plt+0x61a8>
   1721c:	str	r4, [sp, #-8]!
   17220:	str	lr, [sp, #4]
   17224:	bl	10de0 <__errno_location@plt>
   17228:	mov	r3, #12
   1722c:	ldr	r4, [sp]
   17230:	add	sp, sp, #4
   17234:	str	r3, [r0]
   17238:	mov	r0, #0
   1723c:	pop	{pc}		; (ldr pc, [sp], #4)
   17240:	push	{lr}		; (str lr, [sp, #-4]!)
   17244:	sub	sp, sp, #268	; 0x10c
   17248:	movw	r2, #257	; 0x101
   1724c:	add	r1, sp, #4
   17250:	bl	17298 <__assert_fail@plt+0x63d4>
   17254:	cmp	r0, #0
   17258:	movne	r0, #0
   1725c:	bne	17290 <__assert_fail@plt+0x63cc>
   17260:	movw	r1, #33320	; 0x8228
   17264:	movt	r1, #1
   17268:	add	r0, sp, #4
   1726c:	bl	10c90 <strcmp@plt>
   17270:	cmp	r0, #0
   17274:	beq	17290 <__assert_fail@plt+0x63cc>
   17278:	add	r0, sp, #4
   1727c:	movw	r1, #33324	; 0x822c
   17280:	movt	r1, #1
   17284:	bl	10c90 <strcmp@plt>
   17288:	adds	r0, r0, #0
   1728c:	movne	r0, #1
   17290:	add	sp, sp, #268	; 0x10c
   17294:	pop	{pc}		; (ldr pc, [sp], #4)
   17298:	strd	r4, [sp, #-16]!
   1729c:	mov	r5, r1
   172a0:	mov	r1, #0
   172a4:	mov	r4, r2
   172a8:	str	r6, [sp, #8]
   172ac:	str	lr, [sp, #12]
   172b0:	bl	10e58 <setlocale@plt>
   172b4:	subs	r6, r0, #0
   172b8:	beq	17338 <__assert_fail@plt+0x6474>
   172bc:	bl	10dd4 <strlen@plt>
   172c0:	cmp	r4, r0
   172c4:	bhi	172e4 <__assert_fail@plt+0x6420>
   172c8:	cmp	r4, #0
   172cc:	moveq	r0, #34	; 0x22
   172d0:	bne	17308 <__assert_fail@plt+0x6444>
   172d4:	ldrd	r4, [sp]
   172d8:	ldr	r6, [sp, #8]
   172dc:	add	sp, sp, #12
   172e0:	pop	{pc}		; (ldr pc, [sp], #4)
   172e4:	add	r2, r0, #1
   172e8:	mov	r1, r6
   172ec:	mov	r0, r5
   172f0:	bl	10ccc <memcpy@plt>
   172f4:	ldrd	r4, [sp]
   172f8:	mov	r0, #0
   172fc:	ldr	r6, [sp, #8]
   17300:	add	sp, sp, #12
   17304:	pop	{pc}		; (ldr pc, [sp], #4)
   17308:	sub	r4, r4, #1
   1730c:	mov	r1, r6
   17310:	mov	r2, r4
   17314:	mov	r0, r5
   17318:	bl	10ccc <memcpy@plt>
   1731c:	mov	r3, #0
   17320:	mov	r0, #34	; 0x22
   17324:	strb	r3, [r5, r4]
   17328:	ldrd	r4, [sp]
   1732c:	ldr	r6, [sp, #8]
   17330:	add	sp, sp, #12
   17334:	pop	{pc}		; (ldr pc, [sp], #4)
   17338:	cmp	r4, #0
   1733c:	mov	r0, #22
   17340:	strbne	r6, [r5]
   17344:	ldrd	r4, [sp]
   17348:	ldr	r6, [sp, #8]
   1734c:	add	sp, sp, #12
   17350:	pop	{pc}		; (ldr pc, [sp], #4)
   17354:	mov	r1, #0
   17358:	b	10e58 <setlocale@plt>
   1735c:	cmp	r3, #0
   17360:	cmpeq	r2, #0
   17364:	bne	1737c <__assert_fail@plt+0x64b8>
   17368:	cmp	r1, #0
   1736c:	cmpeq	r0, #0
   17370:	mvnne	r1, #0
   17374:	mvnne	r0, #0
   17378:	b	17398 <__assert_fail@plt+0x64d4>
   1737c:	sub	sp, sp, #8
   17380:	push	{sp, lr}
   17384:	bl	173a8 <__assert_fail@plt+0x64e4>
   17388:	ldr	lr, [sp, #4]
   1738c:	add	sp, sp, #8
   17390:	pop	{r2, r3}
   17394:	bx	lr
   17398:	push	{r1, lr}
   1739c:	mov	r0, #8
   173a0:	bl	10c84 <raise@plt>
   173a4:	pop	{r1, pc}
   173a8:	cmp	r1, r3
   173ac:	cmpeq	r0, r2
   173b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173b4:	mov	r4, r0
   173b8:	movcc	r0, #0
   173bc:	mov	r5, r1
   173c0:	ldr	lr, [sp, #36]	; 0x24
   173c4:	movcc	r1, r0
   173c8:	bcc	174c4 <__assert_fail@plt+0x6600>
   173cc:	cmp	r3, #0
   173d0:	clzeq	ip, r2
   173d4:	clzne	ip, r3
   173d8:	addeq	ip, ip, #32
   173dc:	cmp	r5, #0
   173e0:	clzeq	r1, r4
   173e4:	addeq	r1, r1, #32
   173e8:	clzne	r1, r5
   173ec:	sub	ip, ip, r1
   173f0:	sub	sl, ip, #32
   173f4:	lsl	r9, r3, ip
   173f8:	rsb	fp, ip, #32
   173fc:	orr	r9, r9, r2, lsl sl
   17400:	orr	r9, r9, r2, lsr fp
   17404:	lsl	r8, r2, ip
   17408:	cmp	r5, r9
   1740c:	cmpeq	r4, r8
   17410:	movcc	r0, #0
   17414:	movcc	r1, r0
   17418:	bcc	17434 <__assert_fail@plt+0x6570>
   1741c:	mov	r0, #1
   17420:	subs	r4, r4, r8
   17424:	lsl	r1, r0, sl
   17428:	orr	r1, r1, r0, lsr fp
   1742c:	lsl	r0, r0, ip
   17430:	sbc	r5, r5, r9
   17434:	cmp	ip, #0
   17438:	beq	174c4 <__assert_fail@plt+0x6600>
   1743c:	lsr	r6, r8, #1
   17440:	orr	r6, r6, r9, lsl #31
   17444:	lsr	r7, r9, #1
   17448:	mov	r2, ip
   1744c:	b	17470 <__assert_fail@plt+0x65ac>
   17450:	subs	r3, r4, r6
   17454:	sbc	r8, r5, r7
   17458:	adds	r3, r3, r3
   1745c:	adc	r8, r8, r8
   17460:	adds	r4, r3, #1
   17464:	adc	r5, r8, #0
   17468:	subs	r2, r2, #1
   1746c:	beq	1748c <__assert_fail@plt+0x65c8>
   17470:	cmp	r5, r7
   17474:	cmpeq	r4, r6
   17478:	bcs	17450 <__assert_fail@plt+0x658c>
   1747c:	adds	r4, r4, r4
   17480:	adc	r5, r5, r5
   17484:	subs	r2, r2, #1
   17488:	bne	17470 <__assert_fail@plt+0x65ac>
   1748c:	lsr	r3, r4, ip
   17490:	orr	r3, r3, r5, lsl fp
   17494:	lsr	r2, r5, ip
   17498:	orr	r3, r3, r5, lsr sl
   1749c:	adds	r0, r0, r4
   174a0:	mov	r4, r3
   174a4:	lsl	r3, r2, ip
   174a8:	orr	r3, r3, r4, lsl sl
   174ac:	lsl	ip, r4, ip
   174b0:	orr	r3, r3, r4, lsr fp
   174b4:	adc	r1, r1, r5
   174b8:	subs	r0, r0, ip
   174bc:	mov	r5, r2
   174c0:	sbc	r1, r1, r3
   174c4:	cmp	lr, #0
   174c8:	strdne	r4, [lr]
   174cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   174d4:	mov	r7, r0
   174d8:	ldr	r6, [pc, #72]	; 17528 <__assert_fail@plt+0x6664>
   174dc:	ldr	r5, [pc, #72]	; 1752c <__assert_fail@plt+0x6668>
   174e0:	add	r6, pc, r6
   174e4:	add	r5, pc, r5
   174e8:	sub	r6, r6, r5
   174ec:	mov	r8, r1
   174f0:	mov	r9, r2
   174f4:	bl	10c4c <calloc@plt-0x20>
   174f8:	asrs	r6, r6, #2
   174fc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17500:	mov	r4, #0
   17504:	add	r4, r4, #1
   17508:	ldr	r3, [r5], #4
   1750c:	mov	r2, r9
   17510:	mov	r1, r8
   17514:	mov	r0, r7
   17518:	blx	r3
   1751c:	cmp	r6, r4
   17520:	bne	17504 <__assert_fail@plt+0x6640>
   17524:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17528:	andeq	r1, r1, ip, lsr #20
   1752c:	andeq	r1, r1, r4, lsr #20
   17530:	bx	lr
   17534:	ldr	r3, [pc, #12]	; 17548 <__assert_fail@plt+0x6684>
   17538:	mov	r1, #0
   1753c:	add	r3, pc, r3
   17540:	ldr	r2, [r3]
   17544:	b	10dec <__cxa_atexit@plt>
   17548:	muleq	r1, ip, fp

Disassembly of section .fini:

0001754c <.fini>:
   1754c:	push	{r3, lr}
   17550:	pop	{r3, pc}
