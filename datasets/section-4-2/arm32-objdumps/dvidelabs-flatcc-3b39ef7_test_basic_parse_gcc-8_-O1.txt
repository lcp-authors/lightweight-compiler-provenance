
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_basic_parse:     file format elf32-littlearm


Disassembly of section .init:

000123e0 <.init>:
   123e0:	push	{r3, lr}
   123e4:	bl	124fc <_start@@Base+0x3c>
   123e8:	pop	{r3, pc}

Disassembly of section .plt:

000123ec <free@plt-0x14>:
   123ec:	push	{lr}		; (str lr, [sp, #-4]!)
   123f0:	ldr	lr, [pc, #4]	; 123fc <free@plt-0x4>
   123f4:	add	lr, pc, lr
   123f8:	ldr	pc, [lr, #8]!
   123fc:	andeq	sp, r1, r4, lsl #24

00012400 <free@plt>:
   12400:	add	ip, pc, #0, 12
   12404:	add	ip, ip, #118784	; 0x1d000
   12408:	ldr	pc, [ip, #3076]!	; 0xc04

0001240c <memcpy@plt>:
   1240c:	add	ip, pc, #0, 12
   12410:	add	ip, ip, #118784	; 0x1d000
   12414:	ldr	pc, [ip, #3068]!	; 0xbfc

00012418 <memcmp@plt>:
   12418:	add	ip, pc, #0, 12
   1241c:	add	ip, ip, #118784	; 0x1d000
   12420:	ldr	pc, [ip, #3060]!	; 0xbf4

00012424 <realloc@plt>:
   12424:	add	ip, pc, #0, 12
   12428:	add	ip, ip, #118784	; 0x1d000
   1242c:	ldr	pc, [ip, #3052]!	; 0xbec

00012430 <fwrite@plt>:
   12430:	add	ip, pc, #0, 12
   12434:	add	ip, ip, #118784	; 0x1d000
   12438:	ldr	pc, [ip, #3044]!	; 0xbe4

0001243c <malloc@plt>:
   1243c:	add	ip, pc, #0, 12
   12440:	add	ip, ip, #118784	; 0x1d000
   12444:	ldr	pc, [ip, #3036]!	; 0xbdc

00012448 <__libc_start_main@plt>:
   12448:	add	ip, pc, #0, 12
   1244c:	add	ip, ip, #118784	; 0x1d000
   12450:	ldr	pc, [ip, #3028]!	; 0xbd4

00012454 <__gmon_start__@plt>:
   12454:	add	ip, pc, #0, 12
   12458:	add	ip, ip, #118784	; 0x1d000
   1245c:	ldr	pc, [ip, #3020]!	; 0xbcc

00012460 <strlen@plt>:
   12460:	add	ip, pc, #0, 12
   12464:	add	ip, ip, #118784	; 0x1d000
   12468:	ldr	pc, [ip, #3012]!	; 0xbc4

0001246c <fprintf@plt>:
   1246c:	add	ip, pc, #0, 12
   12470:	add	ip, ip, #118784	; 0x1d000
   12474:	ldr	pc, [ip, #3004]!	; 0xbbc

00012478 <posix_memalign@plt>:
   12478:	add	ip, pc, #0, 12
   1247c:	add	ip, ip, #118784	; 0x1d000
   12480:	ldr	pc, [ip, #2996]!	; 0xbb4

00012484 <memset@plt>:
   12484:	add	ip, pc, #0, 12
   12488:	add	ip, ip, #118784	; 0x1d000
   1248c:	ldr	pc, [ip, #2988]!	; 0xbac

00012490 <strtod@plt>:
   12490:	add	ip, pc, #0, 12
   12494:	add	ip, ip, #118784	; 0x1d000
   12498:	ldr	pc, [ip, #2980]!	; 0xba4

0001249c <memchr@plt>:
   1249c:	add	ip, pc, #0, 12
   124a0:	add	ip, ip, #118784	; 0x1d000
   124a4:	ldr	pc, [ip, #2972]!	; 0xb9c

000124a8 <abort@plt>:
   124a8:	add	ip, pc, #0, 12
   124ac:	add	ip, ip, #118784	; 0x1d000
   124b0:	ldr	pc, [ip, #2964]!	; 0xb94

000124b4 <__assert_fail@plt>:
   124b4:	add	ip, pc, #0, 12
   124b8:	add	ip, ip, #118784	; 0x1d000
   124bc:	ldr	pc, [ip, #2956]!	; 0xb8c

Disassembly of section .text:

000124c0 <_start@@Base>:
   124c0:	mov	fp, #0
   124c4:	mov	lr, #0
   124c8:	pop	{r1}		; (ldr r1, [sp], #4)
   124cc:	mov	r2, sp
   124d0:	push	{r2}		; (str r2, [sp, #-4]!)
   124d4:	push	{r0}		; (str r0, [sp, #-4]!)
   124d8:	ldr	ip, [pc, #16]	; 124f0 <_start@@Base+0x30>
   124dc:	push	{ip}		; (str ip, [sp, #-4]!)
   124e0:	ldr	r0, [pc, #12]	; 124f4 <_start@@Base+0x34>
   124e4:	ldr	r3, [pc, #12]	; 124f8 <_start@@Base+0x38>
   124e8:	bl	12448 <__libc_start_main@plt>
   124ec:	bl	124a8 <abort@plt>
   124f0:	andeq	sp, r1, r4, lsr #13
   124f4:	andeq	r3, r1, r0, asr lr
   124f8:	andeq	sp, r1, r4, asr #12
   124fc:	ldr	r3, [pc, #20]	; 12518 <_start@@Base+0x58>
   12500:	ldr	r2, [pc, #20]	; 1251c <_start@@Base+0x5c>
   12504:	add	r3, pc, r3
   12508:	ldr	r2, [r3, r2]
   1250c:	cmp	r2, #0
   12510:	bxeq	lr
   12514:	b	12454 <__gmon_start__@plt>
   12518:	strdeq	sp, [r1], -r4
   1251c:	andeq	r0, r0, ip, asr #32
   12520:	ldr	r0, [pc, #24]	; 12540 <_start@@Base+0x80>
   12524:	ldr	r3, [pc, #24]	; 12544 <_start@@Base+0x84>
   12528:	cmp	r3, r0
   1252c:	bxeq	lr
   12530:	ldr	r3, [pc, #16]	; 12548 <_start@@Base+0x88>
   12534:	cmp	r3, #0
   12538:	bxeq	lr
   1253c:	bx	r3
   12540:	andeq	r0, r3, r8, asr r0
   12544:	andeq	r0, r3, r8, asr r0
   12548:	andeq	r0, r0, r0
   1254c:	ldr	r0, [pc, #36]	; 12578 <_start@@Base+0xb8>
   12550:	ldr	r1, [pc, #36]	; 1257c <_start@@Base+0xbc>
   12554:	sub	r1, r1, r0
   12558:	asr	r1, r1, #2
   1255c:	add	r1, r1, r1, lsr #31
   12560:	asrs	r1, r1, #1
   12564:	bxeq	lr
   12568:	ldr	r3, [pc, #16]	; 12580 <_start@@Base+0xc0>
   1256c:	cmp	r3, #0
   12570:	bxeq	lr
   12574:	bx	r3
   12578:	andeq	r0, r3, r8, asr r0
   1257c:	andeq	r0, r3, r8, asr r0
   12580:	andeq	r0, r0, r0
   12584:	push	{r4, lr}
   12588:	ldr	r4, [pc, #24]	; 125a8 <_start@@Base+0xe8>
   1258c:	ldrb	r3, [r4]
   12590:	cmp	r3, #0
   12594:	popne	{r4, pc}
   12598:	bl	12520 <_start@@Base+0x60>
   1259c:	mov	r3, #1
   125a0:	strb	r3, [r4]
   125a4:	pop	{r4, pc}
   125a8:	andeq	r0, r3, ip, asr r0
   125ac:	b	1254c <_start@@Base+0x8c>

000125b0 <test@@Base>:
   125b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   125b4:	strd	r6, [sp, #8]
   125b8:	strd	r8, [sp, #16]
   125bc:	strd	sl, [sp, #24]
   125c0:	str	lr, [sp, #32]
   125c4:	sub	sp, sp, #116	; 0x74
   125c8:	str	r0, [sp, #12]
   125cc:	mov	r6, r1
   125d0:	mov	r4, r2
   125d4:	str	r3, [sp, #32]
   125d8:	mov	r2, #0
   125dc:	str	r2, [sp, #68]	; 0x44
   125e0:	str	r2, [sp, #76]	; 0x4c
   125e4:	str	r2, [sp, #80]	; 0x50
   125e8:	str	r2, [sp, #88]	; 0x58
   125ec:	str	r2, [sp, #92]	; 0x5c
   125f0:	str	r2, [sp, #96]	; 0x60
   125f4:	str	r2, [sp, #100]	; 0x64
   125f8:	str	r2, [sp, #104]	; 0x68
   125fc:	str	r2, [sp, #108]	; 0x6c
   12600:	mov	r3, #1
   12604:	str	r3, [sp, #84]	; 0x54
   12608:	str	r1, [sp, #72]	; 0x48
   1260c:	mov	r3, r2
   12610:	movw	r1, #55612	; 0xd93c
   12614:	movt	r1, #1
   12618:	bl	14fa0 <flatcc_builder_start_buffer@@Base>
   1261c:	sub	r3, r4, r6
   12620:	cmp	r3, #1
   12624:	ble	12638 <test@@Base+0x88>
   12628:	ldrb	r3, [r6]
   1262c:	cmp	r3, #32
   12630:	bhi	1264c <test@@Base+0x9c>
   12634:	beq	1271c <test@@Base+0x16c>
   12638:	mov	r2, r4
   1263c:	mov	r1, r6
   12640:	add	r0, sp, #68	; 0x44
   12644:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   12648:	mov	r6, r0
   1264c:	cmp	r4, r6
   12650:	beq	12730 <test@@Base+0x180>
   12654:	cmp	r4, r6
   12658:	bls	12668 <test@@Base+0xb8>
   1265c:	ldrb	r3, [r6]
   12660:	cmp	r3, #123	; 0x7b
   12664:	beq	12758 <test@@Base+0x1a8>
   12668:	movw	r3, #88	; 0x58
   1266c:	movt	r3, #3
   12670:	mov	r2, #123	; 0x7b
   12674:	movw	r1, #55636	; 0xd954
   12678:	movt	r1, #1
   1267c:	ldr	r0, [r3]
   12680:	bl	1246c <fprintf@plt>
   12684:	mov	r3, #17
   12688:	mov	r2, r4
   1268c:	mov	r1, r6
   12690:	add	r0, sp, #68	; 0x44
   12694:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   12698:	mov	r5, r0
   1269c:	ldr	r0, [sp, #92]	; 0x5c
   126a0:	cmp	r0, #0
   126a4:	beq	13d7c <test@@Base+0x17cc>
   126a8:	movw	r3, #88	; 0x58
   126ac:	movt	r3, #3
   126b0:	ldr	r6, [r3]
   126b4:	ldr	r8, [sp, #84]	; 0x54
   126b8:	ldr	r4, [sp, #104]	; 0x68
   126bc:	ldr	r3, [sp, #72]	; 0x48
   126c0:	sub	r4, r4, r3
   126c4:	add	r4, r4, #1
   126c8:	bl	19bb0 <flatcc_json_parser_error_string@@Base>
   126cc:	str	r0, [sp]
   126d0:	mov	r3, r4
   126d4:	mov	r2, r8
   126d8:	movw	r1, #55688	; 0xd988
   126dc:	movt	r1, #1
   126e0:	mov	r0, r6
   126e4:	bl	1246c <fprintf@plt>
   126e8:	ldr	r0, [sp, #12]
   126ec:	bl	14770 <flatcc_builder_reset@@Base>
   126f0:	ldr	r3, [sp, #92]	; 0x5c
   126f4:	ldr	r2, [sp, #32]
   126f8:	str	r3, [r2]
   126fc:	mov	r0, r5
   12700:	add	sp, sp, #116	; 0x74
   12704:	ldrd	r4, [sp]
   12708:	ldrd	r6, [sp, #8]
   1270c:	ldrd	r8, [sp, #16]
   12710:	ldrd	sl, [sp, #24]
   12714:	add	sp, sp, #32
   12718:	pop	{pc}		; (ldr pc, [sp], #4)
   1271c:	ldrb	r3, [r6, #1]
   12720:	cmp	r3, #32
   12724:	addhi	r6, r6, #1
   12728:	bls	12638 <test@@Base+0x88>
   1272c:	b	1264c <test@@Base+0x9c>
   12730:	movw	r3, #88	; 0x58
   12734:	movt	r3, #3
   12738:	ldr	r3, [r3]
   1273c:	mov	r2, #13
   12740:	mov	r1, #1
   12744:	movw	r0, #55620	; 0xd944
   12748:	movt	r0, #1
   1274c:	bl	12430 <fwrite@plt>
   12750:	mov	r5, r6
   12754:	b	1269c <test@@Base+0xec>
   12758:	add	r5, r6, #1
   1275c:	sub	r3, r4, r5
   12760:	cmp	r3, #1
   12764:	ble	12778 <test@@Base+0x1c8>
   12768:	ldrb	r3, [r6, #1]
   1276c:	cmp	r3, #32
   12770:	bhi	1278c <test@@Base+0x1dc>
   12774:	beq	127a4 <test@@Base+0x1f4>
   12778:	mov	r2, r4
   1277c:	mov	r1, r5
   12780:	add	r0, sp, #68	; 0x44
   12784:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   12788:	mov	r5, r0
   1278c:	cmp	r4, r5
   12790:	beq	127b8 <test@@Base+0x208>
   12794:	mov	r1, #11
   12798:	ldr	r0, [sp, #12]
   1279c:	bl	15f60 <flatcc_builder_start_table@@Base>
   127a0:	b	12c44 <test@@Base+0x694>
   127a4:	ldrb	r3, [r6, #2]
   127a8:	cmp	r3, #32
   127ac:	addhi	r5, r6, #2
   127b0:	bls	12778 <test@@Base+0x1c8>
   127b4:	b	1278c <test@@Base+0x1dc>
   127b8:	movw	r3, #88	; 0x58
   127bc:	movt	r3, #3
   127c0:	ldr	r3, [r3]
   127c4:	mov	r2, #13
   127c8:	mov	r1, #1
   127cc:	movw	r0, #55620	; 0xd944
   127d0:	movt	r0, #1
   127d4:	bl	12430 <fwrite@plt>
   127d8:	b	1269c <test@@Base+0xec>
   127dc:	mov	r3, #5
   127e0:	mov	r2, r4
   127e4:	mov	r1, r5
   127e8:	add	r0, sp, #68	; 0x44
   127ec:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   127f0:	mov	r5, r0
   127f4:	b	12c74 <test@@Base+0x6c4>
   127f8:	sub	r3, ip, #1
   127fc:	cmp	r3, #7
   12800:	ldrls	pc, [pc, r3, lsl #2]
   12804:	b	1287c <test@@Base+0x2cc>
   12808:	andeq	r2, r1, r0, ror r8
   1280c:	andeq	r2, r1, r4, ror #16
   12810:	andeq	r2, r1, r8, asr r8
   12814:	andeq	r2, r1, ip, asr #16
   12818:	andeq	r2, r1, r0, asr #16
   1281c:	andeq	r2, r1, r4, lsr r8
   12820:	andeq	r2, r1, r8, lsr #16
   12824:	andeq	r2, r1, r0, lsl #25
   12828:	mov	r0, #0
   1282c:	mov	r1, #0
   12830:	b	12c88 <test@@Base+0x6d8>
   12834:	mov	r2, #0
   12838:	mov	r3, r2
   1283c:	b	12c94 <test@@Base+0x6e4>
   12840:	mov	r2, #0
   12844:	mov	r3, r2
   12848:	b	12c9c <test@@Base+0x6ec>
   1284c:	mov	r2, #0
   12850:	mov	r3, r2
   12854:	b	12ca4 <test@@Base+0x6f4>
   12858:	mov	r2, #0
   1285c:	mov	r3, r2
   12860:	b	12cac <test@@Base+0x6fc>
   12864:	mov	r2, #0
   12868:	mov	r3, r2
   1286c:	b	12cb4 <test@@Base+0x704>
   12870:	mov	r2, #0
   12874:	mov	r3, r2
   12878:	b	12cbc <test@@Base+0x70c>
   1287c:	mov	sl, #0
   12880:	mov	fp, #0
   12884:	b	12ccc <test@@Base+0x71c>
   12888:	mov	r5, r4
   1288c:	mov	r1, r4
   12890:	mov	sl, #0
   12894:	mov	fp, #0
   12898:	b	12cd8 <test@@Base+0x728>
   1289c:	mov	r1, r4
   128a0:	b	12cd8 <test@@Base+0x728>
   128a4:	mov	r3, #13
   128a8:	mov	r2, r4
   128ac:	mov	r1, r5
   128b0:	add	r0, sp, #68	; 0x44
   128b4:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   128b8:	mov	r5, r0
   128bc:	b	1269c <test@@Base+0xec>
   128c0:	cmp	r1, r4
   128c4:	beq	12ac0 <test@@Base+0x510>
   128c8:	ldrb	r3, [r5, #5]
   128cc:	cmp	r3, #32
   128d0:	bls	12938 <test@@Base+0x388>
   128d4:	mov	r2, r1
   128d8:	b	128fc <test@@Base+0x34c>
   128dc:	add	r1, r2, #1
   128e0:	cmp	r4, r1
   128e4:	beq	12a24 <test@@Base+0x474>
   128e8:	ldrb	r0, [r1]
   128ec:	add	r2, r2, #1
   128f0:	cmp	r0, #32
   128f4:	bls	12a24 <test@@Base+0x474>
   128f8:	mov	r3, r0
   128fc:	mov	r1, r2
   12900:	cmp	r3, #46	; 0x2e
   12904:	cmpne	r3, #95	; 0x5f
   12908:	beq	128dc <test@@Base+0x32c>
   1290c:	tst	r3, #128	; 0x80
   12910:	bne	128dc <test@@Base+0x32c>
   12914:	sub	r0, r3, #48	; 0x30
   12918:	uxtb	r0, r0
   1291c:	cmp	r0, #9
   12920:	bls	128dc <test@@Base+0x32c>
   12924:	orr	r0, r3, #32
   12928:	sub	r0, r0, #97	; 0x61
   1292c:	uxtb	r0, r0
   12930:	cmp	r0, #25
   12934:	bls	12a1c <test@@Base+0x46c>
   12938:	sub	r3, r4, r1
   1293c:	cmp	r3, #1
   12940:	ble	12954 <test@@Base+0x3a4>
   12944:	ldrb	r3, [r1]
   12948:	cmp	r3, #32
   1294c:	bhi	12964 <test@@Base+0x3b4>
   12950:	beq	12aac <test@@Base+0x4fc>
   12954:	mov	r2, r4
   12958:	add	r0, sp, #68	; 0x44
   1295c:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   12960:	mov	r1, r0
   12964:	cmp	r4, r1
   12968:	beq	12ac8 <test@@Base+0x518>
   1296c:	cmp	r4, r1
   12970:	bls	12b08 <test@@Base+0x558>
   12974:	ldrb	r3, [r1]
   12978:	cmp	r3, #58	; 0x3a
   1297c:	bne	12b08 <test@@Base+0x558>
   12980:	add	r5, r1, #1
   12984:	sub	r3, r4, r5
   12988:	cmp	r3, #1
   1298c:	ble	129a0 <test@@Base+0x3f0>
   12990:	ldrb	r3, [r1, #1]
   12994:	cmp	r3, #32
   12998:	bhi	129b4 <test@@Base+0x404>
   1299c:	beq	12af4 <test@@Base+0x544>
   129a0:	mov	r2, r4
   129a4:	mov	r1, r5
   129a8:	add	r0, sp, #68	; 0x44
   129ac:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   129b0:	mov	r5, r0
   129b4:	cmp	r4, r5
   129b8:	beq	12b44 <test@@Base+0x594>
   129bc:	mov	r3, #1
   129c0:	mov	r2, r3
   129c4:	mov	r1, #0
   129c8:	ldr	r0, [sp, #12]
   129cc:	bl	17b24 <flatcc_builder_table_add@@Base>
   129d0:	subs	r6, r0, #0
   129d4:	beq	1269c <test@@Base+0xec>
   129d8:	mov	r2, #0
   129dc:	mov	r3, #0
   129e0:	strd	r2, [sp, #56]	; 0x38
   129e4:	mov	r3, #0
   129e8:	str	r3, [sp, #52]	; 0x34
   129ec:	strb	r3, [r6]
   129f0:	add	r3, sp, #56	; 0x38
   129f4:	str	r3, [sp]
   129f8:	add	r3, sp, #52	; 0x34
   129fc:	mov	r2, r4
   12a00:	mov	r1, r5
   12a04:	add	r0, sp, #68	; 0x44
   12a08:	bl	1be30 <flatcc_json_parser_integer@@Base>
   12a0c:	cmp	r5, r0
   12a10:	bne	12b68 <test@@Base+0x5b8>
   12a14:	mov	r5, r0
   12a18:	b	1269c <test@@Base+0xec>
   12a1c:	add	r1, r2, #1
   12a20:	b	128e0 <test@@Base+0x330>
   12a24:	cmp	r3, #46	; 0x2e
   12a28:	bne	12938 <test@@Base+0x388>
   12a2c:	mov	r3, #5
   12a30:	mov	r2, r4
   12a34:	add	r0, sp, #68	; 0x44
   12a38:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   12a3c:	mov	r1, r0
   12a40:	b	12938 <test@@Base+0x388>
   12a44:	add	r1, r3, #1
   12a48:	cmp	r4, r1
   12a4c:	beq	12a94 <test@@Base+0x4e4>
   12a50:	ldrb	r3, [r3, #1]
   12a54:	cmp	r3, #34	; 0x22
   12a58:	beq	12a84 <test@@Base+0x4d4>
   12a5c:	cmp	r3, #92	; 0x5c
   12a60:	movne	r3, r1
   12a64:	bne	12a44 <test@@Base+0x494>
   12a68:	sub	r3, r4, r1
   12a6c:	cmp	r3, #1
   12a70:	ble	12a7c <test@@Base+0x4cc>
   12a74:	add	r3, r1, #1
   12a78:	b	12a44 <test@@Base+0x494>
   12a7c:	cmp	r4, r1
   12a80:	beq	12a94 <test@@Base+0x4e4>
   12a84:	ldrb	r3, [r1]
   12a88:	cmp	r3, #34	; 0x22
   12a8c:	addeq	r1, r1, #1
   12a90:	beq	12938 <test@@Base+0x388>
   12a94:	mov	r3, #20
   12a98:	mov	r2, r4
   12a9c:	add	r0, sp, #68	; 0x44
   12aa0:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   12aa4:	mov	r1, r0
   12aa8:	b	12938 <test@@Base+0x388>
   12aac:	ldrb	r3, [r1, #1]
   12ab0:	cmp	r3, #32
   12ab4:	addhi	r1, r1, #1
   12ab8:	bls	12954 <test@@Base+0x3a4>
   12abc:	b	12964 <test@@Base+0x3b4>
   12ac0:	mov	r1, r4
   12ac4:	b	12954 <test@@Base+0x3a4>
   12ac8:	mov	r6, r1
   12acc:	movw	r3, #88	; 0x58
   12ad0:	movt	r3, #3
   12ad4:	ldr	r3, [r3]
   12ad8:	mov	r2, #13
   12adc:	mov	r1, #1
   12ae0:	movw	r0, #55620	; 0xd944
   12ae4:	movt	r0, #1
   12ae8:	bl	12430 <fwrite@plt>
   12aec:	mov	r5, r6
   12af0:	b	1269c <test@@Base+0xec>
   12af4:	ldrb	r3, [r1, #2]
   12af8:	cmp	r3, #32
   12afc:	addhi	r5, r1, #2
   12b00:	bls	129a0 <test@@Base+0x3f0>
   12b04:	b	129b4 <test@@Base+0x404>
   12b08:	mov	r6, r1
   12b0c:	movw	r3, #88	; 0x58
   12b10:	movt	r3, #3
   12b14:	mov	r2, #58	; 0x3a
   12b18:	movw	r1, #55636	; 0xd954
   12b1c:	movt	r1, #1
   12b20:	ldr	r0, [r3]
   12b24:	bl	1246c <fprintf@plt>
   12b28:	mov	r3, #17
   12b2c:	mov	r2, r4
   12b30:	mov	r1, r6
   12b34:	add	r0, sp, #68	; 0x44
   12b38:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   12b3c:	mov	r5, r0
   12b40:	b	1269c <test@@Base+0xec>
   12b44:	movw	r3, #88	; 0x58
   12b48:	movt	r3, #3
   12b4c:	ldr	r3, [r3]
   12b50:	mov	r2, #13
   12b54:	mov	r1, #1
   12b58:	movw	r0, #55620	; 0xd944
   12b5c:	movt	r0, #1
   12b60:	bl	12430 <fwrite@plt>
   12b64:	b	1269c <test@@Base+0xec>
   12b68:	ldr	r3, [sp, #52]	; 0x34
   12b6c:	cmp	r3, #0
   12b70:	bne	12ba0 <test@@Base+0x5f0>
   12b74:	ldrd	r2, [sp, #56]	; 0x38
   12b78:	cmp	r3, #0
   12b7c:	cmpeq	r2, #255	; 0xff
   12b80:	strbls	r2, [r6]
   12b84:	bls	12bbc <test@@Base+0x60c>
   12b88:	mov	r3, #7
   12b8c:	mov	r2, r4
   12b90:	mov	r1, r0
   12b94:	add	r0, sp, #68	; 0x44
   12b98:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   12b9c:	b	12bb4 <test@@Base+0x604>
   12ba0:	mov	r3, #8
   12ba4:	mov	r2, r4
   12ba8:	mov	r1, r0
   12bac:	add	r0, sp, #68	; 0x44
   12bb0:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   12bb4:	cmp	r5, r0
   12bb8:	beq	12d40 <test@@Base+0x790>
   12bbc:	sub	r3, r4, r0
   12bc0:	cmp	r3, #1
   12bc4:	ble	12bd8 <test@@Base+0x628>
   12bc8:	ldrb	r3, [r0]
   12bcc:	cmp	r3, #32
   12bd0:	bhi	12be8 <test@@Base+0x638>
   12bd4:	beq	13c9c <test@@Base+0x16ec>
   12bd8:	mov	r2, r4
   12bdc:	mov	r1, r0
   12be0:	add	r0, sp, #68	; 0x44
   12be4:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   12be8:	cmp	r4, r0
   12bec:	beq	13cb0 <test@@Base+0x1700>
   12bf0:	ldrb	r3, [r0]
   12bf4:	cmp	r3, #44	; 0x2c
   12bf8:	bne	13d14 <test@@Base+0x1764>
   12bfc:	add	r5, r0, #1
   12c00:	sub	r3, r4, r5
   12c04:	cmp	r3, #1
   12c08:	ble	12c1c <test@@Base+0x66c>
   12c0c:	ldrb	r3, [r0, #1]
   12c10:	cmp	r3, #32
   12c14:	bhi	12c30 <test@@Base+0x680>
   12c18:	beq	13cdc <test@@Base+0x172c>
   12c1c:	mov	r2, r4
   12c20:	mov	r1, r5
   12c24:	add	r0, sp, #68	; 0x44
   12c28:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   12c2c:	mov	r5, r0
   12c30:	cmp	r4, r5
   12c34:	beq	13cf0 <test@@Base+0x1740>
   12c38:	ldrb	r3, [r5]
   12c3c:	cmp	r3, #125	; 0x7d
   12c40:	beq	13da0 <test@@Base+0x17f0>
   12c44:	cmp	r5, r4
   12c48:	beq	12888 <test@@Base+0x2d8>
   12c4c:	ldrb	r3, [r5]
   12c50:	cmp	r3, #34	; 0x22
   12c54:	addeq	r5, r5, #1
   12c58:	moveq	r3, #0
   12c5c:	streq	r3, [sp, #80]	; 0x50
   12c60:	beq	12c74 <test@@Base+0x6c4>
   12c64:	cmp	r3, #46	; 0x2e
   12c68:	movne	r3, #1
   12c6c:	strne	r3, [sp, #80]	; 0x50
   12c70:	beq	127dc <test@@Base+0x22c>
   12c74:	sub	ip, r4, r5
   12c78:	cmp	ip, #8
   12c7c:	bls	127f8 <test@@Base+0x248>
   12c80:	ldrb	r0, [r5, #7]
   12c84:	mov	r1, #0
   12c88:	ldrb	r2, [r5, #6]
   12c8c:	orr	r2, r0, r2, lsl #8
   12c90:	mov	r3, r1
   12c94:	ldrb	r0, [r5, #5]
   12c98:	orr	r2, r2, r0, lsl #16
   12c9c:	ldrb	r0, [r5, #4]
   12ca0:	orr	r2, r2, r0, lsl #24
   12ca4:	ldrb	r0, [r5, #3]
   12ca8:	orr	r3, r3, r0
   12cac:	ldrb	r0, [r5, #2]
   12cb0:	orr	r3, r3, r0, lsl #8
   12cb4:	ldrb	r0, [r5, #1]
   12cb8:	orr	r3, r3, r0, lsl #16
   12cbc:	ldrb	r0, [r5]
   12cc0:	mov	r1, #0
   12cc4:	mov	sl, r2
   12cc8:	orr	fp, r3, r0, lsl #24
   12ccc:	cmp	ip, #8
   12cd0:	addgt	r1, r5, #8
   12cd4:	ble	1289c <test@@Base+0x2ec>
   12cd8:	lsr	r8, sl, #16
   12cdc:	lsl	r8, r8, #16
   12ce0:	add	r3, pc, #984	; 0x3d8
   12ce4:	ldrd	r2, [r3]
   12ce8:	cmp	fp, r3
   12cec:	cmpeq	r8, r2
   12cf0:	bhi	12d48 <test@@Base+0x798>
   12cf4:	and	r3, sl, #-16777216	; 0xff000000
   12cf8:	str	r3, [sp, #24]
   12cfc:	str	fp, [sp, #28]
   12d00:	add	r3, pc, #960	; 0x3c0
   12d04:	ldrd	r2, [r3]
   12d08:	ldrd	r0, [sp, #24]
   12d0c:	cmp	r1, r3
   12d10:	cmpeq	r0, r2
   12d14:	bne	128a4 <test@@Base+0x2f4>
   12d18:	add	r1, r5, #5
   12d1c:	ldr	r3, [sp, #80]	; 0x50
   12d20:	cmp	r3, #0
   12d24:	bne	128c0 <test@@Base+0x310>
   12d28:	cmp	r1, r4
   12d2c:	beq	13e28 <test@@Base+0x1878>
   12d30:	ldrb	r3, [r5, #5]
   12d34:	cmp	r3, #34	; 0x22
   12d38:	bne	12a5c <test@@Base+0x4ac>
   12d3c:	b	12a84 <test@@Base+0x4d4>
   12d40:	mov	r5, r0
   12d44:	b	1269c <test@@Base+0xec>
   12d48:	mov	r3, #0
   12d4c:	str	r3, [sp, #16]
   12d50:	str	fp, [sp, #20]
   12d54:	ldrd	r2, [sp, #16]
   12d58:	add	r7, pc, #880	; 0x370
   12d5c:	ldrd	r6, [r7]
   12d60:	cmp	r3, r7
   12d64:	cmpeq	r2, r6
   12d68:	bhi	13880 <test@@Base+0x12d0>
   12d6c:	add	r3, pc, #868	; 0x364
   12d70:	ldrd	r2, [r3]
   12d74:	cmp	fp, r3
   12d78:	cmpeq	sl, r2
   12d7c:	bhi	13054 <test@@Base+0xaa4>
   12d80:	add	r3, pc, #856	; 0x358
   12d84:	ldrd	r2, [r3]
   12d88:	cmp	fp, r3
   12d8c:	cmpeq	r8, r2
   12d90:	bne	12dbc <test@@Base+0x80c>
   12d94:	add	r1, r5, #6
   12d98:	ldr	r3, [sp, #80]	; 0x50
   12d9c:	cmp	r3, #0
   12da0:	bne	12dd8 <test@@Base+0x828>
   12da4:	cmp	r1, r4
   12da8:	beq	13e30 <test@@Base+0x1880>
   12dac:	ldrb	r3, [r5, #6]
   12db0:	cmp	r3, #34	; 0x22
   12db4:	bne	12f50 <test@@Base+0x9a0>
   12db8:	b	12f70 <test@@Base+0x9c0>
   12dbc:	mov	r3, #13
   12dc0:	mov	r2, r4
   12dc4:	mov	r1, r5
   12dc8:	add	r0, sp, #68	; 0x44
   12dcc:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   12dd0:	mov	r5, r0
   12dd4:	b	1269c <test@@Base+0xec>
   12dd8:	cmp	r1, r4
   12ddc:	beq	12fac <test@@Base+0x9fc>
   12de0:	ldrb	r3, [r5, #6]
   12de4:	cmp	r3, #32
   12de8:	bls	12e50 <test@@Base+0x8a0>
   12dec:	mov	r2, r1
   12df0:	b	12e14 <test@@Base+0x864>
   12df4:	add	r1, r2, #1
   12df8:	cmp	r4, r1
   12dfc:	beq	12f14 <test@@Base+0x964>
   12e00:	ldrb	r0, [r1]
   12e04:	add	r2, r2, #1
   12e08:	cmp	r0, #32
   12e0c:	bls	12f14 <test@@Base+0x964>
   12e10:	mov	r3, r0
   12e14:	mov	r1, r2
   12e18:	cmp	r3, #46	; 0x2e
   12e1c:	cmpne	r3, #95	; 0x5f
   12e20:	beq	12df4 <test@@Base+0x844>
   12e24:	tst	r3, #128	; 0x80
   12e28:	bne	12df4 <test@@Base+0x844>
   12e2c:	sub	r0, r3, #48	; 0x30
   12e30:	uxtb	r0, r0
   12e34:	cmp	r0, #9
   12e38:	bls	12df4 <test@@Base+0x844>
   12e3c:	orr	r0, r3, #32
   12e40:	sub	r0, r0, #97	; 0x61
   12e44:	uxtb	r0, r0
   12e48:	cmp	r0, #25
   12e4c:	bls	12f0c <test@@Base+0x95c>
   12e50:	sub	r3, r4, r1
   12e54:	cmp	r3, #1
   12e58:	ble	12e6c <test@@Base+0x8bc>
   12e5c:	ldrb	r3, [r1]
   12e60:	cmp	r3, #32
   12e64:	bhi	12e7c <test@@Base+0x8cc>
   12e68:	beq	12f98 <test@@Base+0x9e8>
   12e6c:	mov	r2, r4
   12e70:	add	r0, sp, #68	; 0x44
   12e74:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   12e78:	mov	r1, r0
   12e7c:	cmp	r4, r1
   12e80:	beq	12fb4 <test@@Base+0xa04>
   12e84:	cmp	r4, r1
   12e88:	bls	12ff4 <test@@Base+0xa44>
   12e8c:	ldrb	r3, [r1]
   12e90:	cmp	r3, #58	; 0x3a
   12e94:	bne	12ff4 <test@@Base+0xa44>
   12e98:	add	r5, r1, #1
   12e9c:	sub	r3, r4, r5
   12ea0:	cmp	r3, #1
   12ea4:	ble	12eb8 <test@@Base+0x908>
   12ea8:	ldrb	r3, [r1, #1]
   12eac:	cmp	r3, #32
   12eb0:	bhi	12ecc <test@@Base+0x91c>
   12eb4:	beq	12fe0 <test@@Base+0xa30>
   12eb8:	mov	r2, r4
   12ebc:	mov	r1, r5
   12ec0:	add	r0, sp, #68	; 0x44
   12ec4:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   12ec8:	mov	r5, r0
   12ecc:	cmp	r4, r5
   12ed0:	beq	13030 <test@@Base+0xa80>
   12ed4:	mov	r3, #8
   12ed8:	mov	r2, r3
   12edc:	mov	r1, #1
   12ee0:	ldr	r0, [sp, #12]
   12ee4:	bl	17b24 <flatcc_builder_table_add@@Base>
   12ee8:	subs	r3, r0, #0
   12eec:	beq	1269c <test@@Base+0xec>
   12ef0:	mov	r2, r4
   12ef4:	mov	r1, r5
   12ef8:	add	r0, sp, #68	; 0x44
   12efc:	bl	1aebc <flatcc_json_parser_double@@Base>
   12f00:	cmp	r0, r5
   12f04:	bne	12bbc <test@@Base+0x60c>
   12f08:	b	1269c <test@@Base+0xec>
   12f0c:	add	r1, r2, #1
   12f10:	b	12df8 <test@@Base+0x848>
   12f14:	cmp	r3, #46	; 0x2e
   12f18:	bne	12e50 <test@@Base+0x8a0>
   12f1c:	mov	r3, #5
   12f20:	mov	r2, r4
   12f24:	add	r0, sp, #68	; 0x44
   12f28:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   12f2c:	mov	r1, r0
   12f30:	b	12e50 <test@@Base+0x8a0>
   12f34:	add	r3, r1, #1
   12f38:	add	r1, r3, #1
   12f3c:	cmp	r4, r1
   12f40:	beq	12f80 <test@@Base+0x9d0>
   12f44:	ldrb	r3, [r3, #1]
   12f48:	cmp	r3, #34	; 0x22
   12f4c:	beq	12f70 <test@@Base+0x9c0>
   12f50:	cmp	r3, #92	; 0x5c
   12f54:	movne	r3, r1
   12f58:	bne	12f38 <test@@Base+0x988>
   12f5c:	sub	r3, r4, r1
   12f60:	cmp	r3, #1
   12f64:	bgt	12f34 <test@@Base+0x984>
   12f68:	cmp	r4, r1
   12f6c:	beq	12f80 <test@@Base+0x9d0>
   12f70:	ldrb	r3, [r1]
   12f74:	cmp	r3, #34	; 0x22
   12f78:	addeq	r1, r1, #1
   12f7c:	beq	12e50 <test@@Base+0x8a0>
   12f80:	mov	r3, #20
   12f84:	mov	r2, r4
   12f88:	add	r0, sp, #68	; 0x44
   12f8c:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   12f90:	mov	r1, r0
   12f94:	b	12e50 <test@@Base+0x8a0>
   12f98:	ldrb	r3, [r1, #1]
   12f9c:	cmp	r3, #32
   12fa0:	addhi	r1, r1, #1
   12fa4:	bls	12e6c <test@@Base+0x8bc>
   12fa8:	b	12e7c <test@@Base+0x8cc>
   12fac:	mov	r1, r4
   12fb0:	b	12e6c <test@@Base+0x8bc>
   12fb4:	mov	r6, r1
   12fb8:	movw	r3, #88	; 0x58
   12fbc:	movt	r3, #3
   12fc0:	ldr	r3, [r3]
   12fc4:	mov	r2, #13
   12fc8:	mov	r1, #1
   12fcc:	movw	r0, #55620	; 0xd944
   12fd0:	movt	r0, #1
   12fd4:	bl	12430 <fwrite@plt>
   12fd8:	mov	r5, r6
   12fdc:	b	1269c <test@@Base+0xec>
   12fe0:	ldrb	r3, [r1, #2]
   12fe4:	cmp	r3, #32
   12fe8:	addhi	r5, r1, #2
   12fec:	bls	12eb8 <test@@Base+0x908>
   12ff0:	b	12ecc <test@@Base+0x91c>
   12ff4:	mov	r6, r1
   12ff8:	movw	r3, #88	; 0x58
   12ffc:	movt	r3, #3
   13000:	mov	r2, #58	; 0x3a
   13004:	movw	r1, #55636	; 0xd954
   13008:	movt	r1, #1
   1300c:	ldr	r0, [r3]
   13010:	bl	1246c <fprintf@plt>
   13014:	mov	r3, #17
   13018:	mov	r2, r4
   1301c:	mov	r1, r6
   13020:	add	r0, sp, #68	; 0x44
   13024:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   13028:	mov	r5, r0
   1302c:	b	1269c <test@@Base+0xec>
   13030:	movw	r3, #88	; 0x58
   13034:	movt	r3, #3
   13038:	ldr	r3, [r3]
   1303c:	mov	r2, #13
   13040:	mov	r1, #1
   13044:	movw	r0, #55620	; 0xd944
   13048:	movt	r0, #1
   1304c:	bl	12430 <fwrite@plt>
   13050:	b	1269c <test@@Base+0xec>
   13054:	add	r3, pc, #140	; 0x8c
   13058:	ldrd	r2, [r3]
   1305c:	cmp	fp, r3
   13060:	cmpeq	sl, r2
   13064:	bne	130a4 <test@@Base+0xaf4>
   13068:	sub	r3, r4, r1
   1306c:	cmp	r3, #8
   13070:	bhi	13100 <test@@Base+0xb50>
   13074:	sub	r3, r3, #1
   13078:	cmp	r3, #7
   1307c:	ldrls	pc, [pc, r3, lsl #2]
   13080:	b	131c0 <test@@Base+0xc10>
   13084:			; <UNDEFINED> instruction: 0x000131b8
   13088:			; <UNDEFINED> instruction: 0x000131b0
   1308c:	andeq	r3, r1, r8, lsr #3
   13090:	andeq	r3, r1, r0, lsr #3
   13094:	muleq	r1, r8, r1
   13098:	muleq	r1, r0, r1
   1309c:	andeq	r3, r1, r8, lsl #3
   130a0:	andeq	r3, r1, r0, lsl #2
   130a4:	mov	r3, #13
   130a8:	mov	r2, r4
   130ac:	mov	r1, r5
   130b0:	add	r0, sp, #68	; 0x44
   130b4:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   130b8:	mov	r5, r0
   130bc:	b	1269c <test@@Base+0xec>
   130c0:	mcrvs	15, 3, pc, cr3, cr15, {7}	; <UNPREDICTABLE>
   130c4:	cmnvc	r5, #-1140850687	; 0xbc000001
   130c8:	strvc	r0, [r0], #-0
   130cc:			; <UNDEFINED> instruction: 0x66697273
   130d0:			; <UNDEFINED> instruction: 0xffffffff
   130d4:	bvc	1d6e2ac <__bss_end__@@Base+0x1d3e24c>
   130d8:	mcrvs	3, 3, r7, cr4, cr15, {0}
   130dc:	cmnvc	r5, #-1140850687	; 0xbc000001
   130e0:	cdpvs	0, 6, cr0, cr4, cr0, {0}
   130e4:	cmnvc	r5, #-1140850687	; 0xbc000001
   130e8:	cdpvs	3, 6, cr7, cr4, cr0, {1}
   130ec:	cmnvc	r5, #-1140850687	; 0xbc000001
   130f0:			; <UNDEFINED> instruction: 0xffffffff
   130f4:	stclvs	6, cr6, [r5], #-460	; 0xfffffe34
   130f8:	andeq	r0, r0, r0
   130fc:	stfvse	f6, [r5], #-400	; 0xfffffe70
   13100:	mov	r3, #0
   13104:	mov	r0, r3
   13108:	ldrb	r2, [r1, #3]
   1310c:	orr	r0, r0, r2
   13110:	ldrb	r2, [r1, #2]
   13114:	orr	r0, r0, r2, lsl #8
   13118:	ldrb	r2, [r1, #1]
   1311c:	orr	r0, r0, r2, lsl #16
   13120:	ldrb	r2, [r1]
   13124:	orr	r3, r0, r2, lsl #24
   13128:	mov	r2, #0
   1312c:	str	r2, [sp, #40]	; 0x28
   13130:	str	r3, [sp, #44]	; 0x2c
   13134:	sub	r3, pc, #76	; 0x4c
   13138:	ldrd	r2, [r3]
   1313c:	ldrd	r6, [sp, #40]	; 0x28
   13140:	cmp	r7, r3
   13144:	cmpeq	r6, r2
   13148:	bhi	13510 <test@@Base+0xf60>
   1314c:	sub	r3, pc, #92	; 0x5c
   13150:	ldrd	r2, [r3]
   13154:	cmp	r7, r3
   13158:	cmpeq	r6, r2
   1315c:	bne	131c8 <test@@Base+0xc18>
   13160:	add	r0, r1, #4
   13164:	ldr	r3, [sp, #80]	; 0x50
   13168:	cmp	r3, #0
   1316c:	bne	131e0 <test@@Base+0xc30>
   13170:	cmp	r0, r4
   13174:	beq	13e38 <test@@Base+0x1888>
   13178:	ldrb	r3, [r1, #4]
   1317c:	cmp	r3, #34	; 0x22
   13180:	bne	13384 <test@@Base+0xdd4>
   13184:	b	133ac <test@@Base+0xdfc>
   13188:	mov	r3, #0
   1318c:	b	13104 <test@@Base+0xb54>
   13190:	mov	r0, #0
   13194:	b	13108 <test@@Base+0xb58>
   13198:	mov	r0, #0
   1319c:	b	13108 <test@@Base+0xb58>
   131a0:	mov	r0, #0
   131a4:	b	13108 <test@@Base+0xb58>
   131a8:	mov	r0, #0
   131ac:	b	13110 <test@@Base+0xb60>
   131b0:	mov	r0, #0
   131b4:	b	13118 <test@@Base+0xb68>
   131b8:	mov	r0, #0
   131bc:	b	13120 <test@@Base+0xb70>
   131c0:	mov	r3, #0
   131c4:	b	13128 <test@@Base+0xb78>
   131c8:	mov	r3, #13
   131cc:	mov	r2, r4
   131d0:	add	r0, sp, #68	; 0x44
   131d4:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   131d8:	mov	r5, r0
   131dc:	b	1269c <test@@Base+0xec>
   131e0:	cmp	r0, r4
   131e4:	beq	133e8 <test@@Base+0xe38>
   131e8:	ldrb	r3, [r1, #4]
   131ec:	cmp	r3, #32
   131f0:	bls	13258 <test@@Base+0xca8>
   131f4:	mov	r2, r0
   131f8:	b	1321c <test@@Base+0xc6c>
   131fc:	add	r0, r2, #1
   13200:	cmp	r4, r0
   13204:	beq	1334c <test@@Base+0xd9c>
   13208:	ldrb	r1, [r0]
   1320c:	add	r2, r2, #1
   13210:	cmp	r1, #32
   13214:	bls	1334c <test@@Base+0xd9c>
   13218:	mov	r3, r1
   1321c:	mov	r0, r2
   13220:	cmp	r3, #46	; 0x2e
   13224:	cmpne	r3, #95	; 0x5f
   13228:	beq	131fc <test@@Base+0xc4c>
   1322c:	tst	r3, #128	; 0x80
   13230:	bne	131fc <test@@Base+0xc4c>
   13234:	sub	r1, r3, #48	; 0x30
   13238:	uxtb	r1, r1
   1323c:	cmp	r1, #9
   13240:	bls	131fc <test@@Base+0xc4c>
   13244:	orr	r1, r3, #32
   13248:	sub	r1, r1, #97	; 0x61
   1324c:	uxtb	r1, r1
   13250:	cmp	r1, #25
   13254:	bls	13344 <test@@Base+0xd94>
   13258:	sub	r3, r4, r0
   1325c:	cmp	r3, #1
   13260:	ble	13274 <test@@Base+0xcc4>
   13264:	ldrb	r3, [r0]
   13268:	cmp	r3, #32
   1326c:	bhi	13284 <test@@Base+0xcd4>
   13270:	beq	133d4 <test@@Base+0xe24>
   13274:	mov	r2, r4
   13278:	mov	r1, r0
   1327c:	add	r0, sp, #68	; 0x44
   13280:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   13284:	cmp	r4, r0
   13288:	beq	133f0 <test@@Base+0xe40>
   1328c:	cmp	r4, r0
   13290:	bls	13430 <test@@Base+0xe80>
   13294:	ldrb	r3, [r0]
   13298:	cmp	r3, #58	; 0x3a
   1329c:	bne	13430 <test@@Base+0xe80>
   132a0:	add	r5, r0, #1
   132a4:	sub	r3, r4, r5
   132a8:	cmp	r3, #1
   132ac:	ble	132c0 <test@@Base+0xd10>
   132b0:	ldrb	r3, [r0, #1]
   132b4:	cmp	r3, #32
   132b8:	bhi	132d4 <test@@Base+0xd24>
   132bc:	beq	1341c <test@@Base+0xe6c>
   132c0:	mov	r2, r4
   132c4:	mov	r1, r5
   132c8:	add	r0, sp, #68	; 0x44
   132cc:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   132d0:	mov	r5, r0
   132d4:	cmp	r4, r5
   132d8:	beq	1346c <test@@Base+0xebc>
   132dc:	mov	r3, #8
   132e0:	mov	r2, r3
   132e4:	mov	r1, #3
   132e8:	ldr	r0, [sp, #12]
   132ec:	bl	17b24 <flatcc_builder_table_add@@Base>
   132f0:	subs	r3, r0, #0
   132f4:	mov	r0, r3
   132f8:	mov	r6, r3
   132fc:	beq	1269c <test@@Base+0xec>
   13300:	mov	r2, #0
   13304:	mov	r3, #0
   13308:	strd	r2, [sp, #56]	; 0x38
   1330c:	mov	r1, #0
   13310:	str	r1, [sp, #52]	; 0x34
   13314:	strd	r2, [r0]
   13318:	add	r3, sp, #56	; 0x38
   1331c:	str	r3, [sp]
   13320:	add	r3, sp, #52	; 0x34
   13324:	mov	r2, r4
   13328:	mov	r1, r5
   1332c:	add	r0, sp, #68	; 0x44
   13330:	bl	1be30 <flatcc_json_parser_integer@@Base>
   13334:	cmp	r5, r0
   13338:	bne	13490 <test@@Base+0xee0>
   1333c:	mov	r5, r0
   13340:	b	1269c <test@@Base+0xec>
   13344:	add	r0, r2, #1
   13348:	b	13200 <test@@Base+0xc50>
   1334c:	cmp	r3, #46	; 0x2e
   13350:	bne	13258 <test@@Base+0xca8>
   13354:	mov	r3, #5
   13358:	mov	r2, r4
   1335c:	mov	r1, r0
   13360:	add	r0, sp, #68	; 0x44
   13364:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   13368:	b	13258 <test@@Base+0xca8>
   1336c:	add	r0, r3, #1
   13370:	cmp	r4, r0
   13374:	beq	133bc <test@@Base+0xe0c>
   13378:	ldrb	r3, [r3, #1]
   1337c:	cmp	r3, #34	; 0x22
   13380:	beq	133ac <test@@Base+0xdfc>
   13384:	cmp	r3, #92	; 0x5c
   13388:	movne	r3, r0
   1338c:	bne	1336c <test@@Base+0xdbc>
   13390:	sub	r3, r4, r0
   13394:	cmp	r3, #1
   13398:	ble	133a4 <test@@Base+0xdf4>
   1339c:	add	r3, r0, #1
   133a0:	b	1336c <test@@Base+0xdbc>
   133a4:	cmp	r4, r0
   133a8:	beq	133bc <test@@Base+0xe0c>
   133ac:	ldrb	r3, [r0]
   133b0:	cmp	r3, #34	; 0x22
   133b4:	addeq	r0, r0, #1
   133b8:	beq	13258 <test@@Base+0xca8>
   133bc:	mov	r3, #20
   133c0:	mov	r2, r4
   133c4:	mov	r1, r0
   133c8:	add	r0, sp, #68	; 0x44
   133cc:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   133d0:	b	13258 <test@@Base+0xca8>
   133d4:	ldrb	r3, [r0, #1]
   133d8:	cmp	r3, #32
   133dc:	addhi	r0, r0, #1
   133e0:	bls	13274 <test@@Base+0xcc4>
   133e4:	b	13284 <test@@Base+0xcd4>
   133e8:	mov	r0, r4
   133ec:	b	13274 <test@@Base+0xcc4>
   133f0:	mov	r6, r0
   133f4:	movw	r3, #88	; 0x58
   133f8:	movt	r3, #3
   133fc:	ldr	r3, [r3]
   13400:	mov	r2, #13
   13404:	mov	r1, #1
   13408:	movw	r0, #55620	; 0xd944
   1340c:	movt	r0, #1
   13410:	bl	12430 <fwrite@plt>
   13414:	mov	r5, r6
   13418:	b	1269c <test@@Base+0xec>
   1341c:	ldrb	r3, [r0, #2]
   13420:	cmp	r3, #32
   13424:	addhi	r5, r0, #2
   13428:	bls	132c0 <test@@Base+0xd10>
   1342c:	b	132d4 <test@@Base+0xd24>
   13430:	mov	r6, r0
   13434:	movw	r3, #88	; 0x58
   13438:	movt	r3, #3
   1343c:	mov	r2, #58	; 0x3a
   13440:	movw	r1, #55636	; 0xd954
   13444:	movt	r1, #1
   13448:	ldr	r0, [r3]
   1344c:	bl	1246c <fprintf@plt>
   13450:	mov	r3, #17
   13454:	mov	r2, r4
   13458:	mov	r1, r6
   1345c:	add	r0, sp, #68	; 0x44
   13460:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   13464:	mov	r5, r0
   13468:	b	1269c <test@@Base+0xec>
   1346c:	movw	r3, #88	; 0x58
   13470:	movt	r3, #3
   13474:	ldr	r3, [r3]
   13478:	mov	r2, #13
   1347c:	mov	r1, #1
   13480:	movw	r0, #55620	; 0xd944
   13484:	movt	r0, #1
   13488:	bl	12430 <fwrite@plt>
   1348c:	b	1269c <test@@Base+0xec>
   13490:	ldrd	r2, [sp, #56]	; 0x38
   13494:	ldr	r1, [sp, #52]	; 0x34
   13498:	cmp	r1, #0
   1349c:	beq	134e4 <test@@Base+0xf34>
   134a0:	cmp	r3, #-2147483648	; 0x80000000
   134a4:	cmpeq	r2, #0
   134a8:	bhi	134c0 <test@@Base+0xf10>
   134ac:	rsbs	r2, r2, #0
   134b0:	rsc	r3, r3, #0
   134b4:	mov	r1, r6
   134b8:	strd	r2, [r6]
   134bc:	b	12bbc <test@@Base+0x60c>
   134c0:	mov	r3, #8
   134c4:	mov	r2, r4
   134c8:	mov	r1, r0
   134cc:	add	r0, sp, #68	; 0x44
   134d0:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   134d4:	cmp	r5, r0
   134d8:	bne	12bbc <test@@Base+0x60c>
   134dc:	mov	r5, r0
   134e0:	b	1269c <test@@Base+0xec>
   134e4:	cmp	r2, #0
   134e8:	sbcs	r1, r3, #0
   134ec:	movge	r1, r6
   134f0:	strdge	r2, [r1]
   134f4:	bge	12bbc <test@@Base+0x60c>
   134f8:	mov	r3, #7
   134fc:	mov	r2, r4
   13500:	mov	r1, r0
   13504:	add	r0, sp, #68	; 0x44
   13508:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1350c:	b	134d4 <test@@Base+0xf24>
   13510:	add	r3, pc, #992	; 0x3e0
   13514:	ldrd	r2, [r3]
   13518:	ldrd	r6, [sp, #40]	; 0x28
   1351c:	cmp	r7, r3
   13520:	cmpeq	r6, r2
   13524:	bne	13550 <test@@Base+0xfa0>
   13528:	add	r0, r1, #4
   1352c:	ldr	r3, [sp, #80]	; 0x50
   13530:	cmp	r3, #0
   13534:	bne	13568 <test@@Base+0xfb8>
   13538:	cmp	r0, r4
   1353c:	beq	13e40 <test@@Base+0x1890>
   13540:	ldrb	r3, [r1, #4]
   13544:	cmp	r3, #34	; 0x22
   13548:	bne	13708 <test@@Base+0x1158>
   1354c:	b	13730 <test@@Base+0x1180>
   13550:	mov	r3, #13
   13554:	mov	r2, r4
   13558:	add	r0, sp, #68	; 0x44
   1355c:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   13560:	mov	r5, r0
   13564:	b	1269c <test@@Base+0xec>
   13568:	cmp	r0, r4
   1356c:	beq	1376c <test@@Base+0x11bc>
   13570:	ldrb	r3, [r1, #4]
   13574:	cmp	r3, #32
   13578:	bls	135e0 <test@@Base+0x1030>
   1357c:	mov	r2, r0
   13580:	b	135a4 <test@@Base+0xff4>
   13584:	add	r0, r2, #1
   13588:	cmp	r4, r0
   1358c:	beq	136d0 <test@@Base+0x1120>
   13590:	ldrb	r1, [r0]
   13594:	add	r2, r2, #1
   13598:	cmp	r1, #32
   1359c:	bls	136d0 <test@@Base+0x1120>
   135a0:	mov	r3, r1
   135a4:	mov	r0, r2
   135a8:	cmp	r3, #46	; 0x2e
   135ac:	cmpne	r3, #95	; 0x5f
   135b0:	beq	13584 <test@@Base+0xfd4>
   135b4:	tst	r3, #128	; 0x80
   135b8:	bne	13584 <test@@Base+0xfd4>
   135bc:	sub	r1, r3, #48	; 0x30
   135c0:	uxtb	r1, r1
   135c4:	cmp	r1, #9
   135c8:	bls	13584 <test@@Base+0xfd4>
   135cc:	orr	r1, r3, #32
   135d0:	sub	r1, r1, #97	; 0x61
   135d4:	uxtb	r1, r1
   135d8:	cmp	r1, #25
   135dc:	bls	136c8 <test@@Base+0x1118>
   135e0:	sub	r3, r4, r0
   135e4:	cmp	r3, #1
   135e8:	ble	135fc <test@@Base+0x104c>
   135ec:	ldrb	r3, [r0]
   135f0:	cmp	r3, #32
   135f4:	bhi	1360c <test@@Base+0x105c>
   135f8:	beq	13758 <test@@Base+0x11a8>
   135fc:	mov	r2, r4
   13600:	mov	r1, r0
   13604:	add	r0, sp, #68	; 0x44
   13608:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1360c:	cmp	r4, r0
   13610:	beq	13774 <test@@Base+0x11c4>
   13614:	cmp	r4, r0
   13618:	bls	137b4 <test@@Base+0x1204>
   1361c:	ldrb	r3, [r0]
   13620:	cmp	r3, #58	; 0x3a
   13624:	bne	137b4 <test@@Base+0x1204>
   13628:	add	r5, r0, #1
   1362c:	sub	r3, r4, r5
   13630:	cmp	r3, #1
   13634:	ble	13648 <test@@Base+0x1098>
   13638:	ldrb	r3, [r0, #1]
   1363c:	cmp	r3, #32
   13640:	bhi	1365c <test@@Base+0x10ac>
   13644:	beq	137a0 <test@@Base+0x11f0>
   13648:	mov	r2, r4
   1364c:	mov	r1, r5
   13650:	add	r0, sp, #68	; 0x44
   13654:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   13658:	mov	r5, r0
   1365c:	cmp	r4, r5
   13660:	beq	137f0 <test@@Base+0x1240>
   13664:	mov	r3, #4
   13668:	mov	r2, r3
   1366c:	mov	r1, #2
   13670:	ldr	r0, [sp, #12]
   13674:	bl	17b24 <flatcc_builder_table_add@@Base>
   13678:	subs	r1, r0, #0
   1367c:	str	r1, [sp, #36]	; 0x24
   13680:	beq	1269c <test@@Base+0xec>
   13684:	mov	r2, #0
   13688:	mov	r3, #0
   1368c:	strd	r2, [sp, #56]	; 0x38
   13690:	mov	r3, #0
   13694:	str	r3, [sp, #52]	; 0x34
   13698:	str	r3, [r1]
   1369c:	add	r3, sp, #56	; 0x38
   136a0:	str	r3, [sp]
   136a4:	add	r3, sp, #52	; 0x34
   136a8:	mov	r2, r4
   136ac:	mov	r1, r5
   136b0:	add	r0, sp, #68	; 0x44
   136b4:	bl	1be30 <flatcc_json_parser_integer@@Base>
   136b8:	cmp	r5, r0
   136bc:	bne	13814 <test@@Base+0x1264>
   136c0:	mov	r5, r0
   136c4:	b	1269c <test@@Base+0xec>
   136c8:	add	r0, r2, #1
   136cc:	b	13588 <test@@Base+0xfd8>
   136d0:	cmp	r3, #46	; 0x2e
   136d4:	bne	135e0 <test@@Base+0x1030>
   136d8:	mov	r3, #5
   136dc:	mov	r2, r4
   136e0:	mov	r1, r0
   136e4:	add	r0, sp, #68	; 0x44
   136e8:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   136ec:	b	135e0 <test@@Base+0x1030>
   136f0:	add	r0, r3, #1
   136f4:	cmp	r4, r0
   136f8:	beq	13740 <test@@Base+0x1190>
   136fc:	ldrb	r3, [r3, #1]
   13700:	cmp	r3, #34	; 0x22
   13704:	beq	13730 <test@@Base+0x1180>
   13708:	cmp	r3, #92	; 0x5c
   1370c:	movne	r3, r0
   13710:	bne	136f0 <test@@Base+0x1140>
   13714:	sub	r3, r4, r0
   13718:	cmp	r3, #1
   1371c:	ble	13728 <test@@Base+0x1178>
   13720:	add	r3, r0, #1
   13724:	b	136f0 <test@@Base+0x1140>
   13728:	cmp	r4, r0
   1372c:	beq	13740 <test@@Base+0x1190>
   13730:	ldrb	r3, [r0]
   13734:	cmp	r3, #34	; 0x22
   13738:	addeq	r0, r0, #1
   1373c:	beq	135e0 <test@@Base+0x1030>
   13740:	mov	r3, #20
   13744:	mov	r2, r4
   13748:	mov	r1, r0
   1374c:	add	r0, sp, #68	; 0x44
   13750:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   13754:	b	135e0 <test@@Base+0x1030>
   13758:	ldrb	r3, [r0, #1]
   1375c:	cmp	r3, #32
   13760:	addhi	r0, r0, #1
   13764:	bls	135fc <test@@Base+0x104c>
   13768:	b	1360c <test@@Base+0x105c>
   1376c:	mov	r0, r4
   13770:	b	135fc <test@@Base+0x104c>
   13774:	mov	r6, r0
   13778:	movw	r3, #88	; 0x58
   1377c:	movt	r3, #3
   13780:	ldr	r3, [r3]
   13784:	mov	r2, #13
   13788:	mov	r1, #1
   1378c:	movw	r0, #55620	; 0xd944
   13790:	movt	r0, #1
   13794:	bl	12430 <fwrite@plt>
   13798:	mov	r5, r6
   1379c:	b	1269c <test@@Base+0xec>
   137a0:	ldrb	r3, [r0, #2]
   137a4:	cmp	r3, #32
   137a8:	addhi	r5, r0, #2
   137ac:	bls	13648 <test@@Base+0x1098>
   137b0:	b	1365c <test@@Base+0x10ac>
   137b4:	mov	r6, r0
   137b8:	movw	r3, #88	; 0x58
   137bc:	movt	r3, #3
   137c0:	mov	r2, #58	; 0x3a
   137c4:	movw	r1, #55636	; 0xd954
   137c8:	movt	r1, #1
   137cc:	ldr	r0, [r3]
   137d0:	bl	1246c <fprintf@plt>
   137d4:	mov	r3, #17
   137d8:	mov	r2, r4
   137dc:	mov	r1, r6
   137e0:	add	r0, sp, #68	; 0x44
   137e4:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   137e8:	mov	r5, r0
   137ec:	b	1269c <test@@Base+0xec>
   137f0:	movw	r3, #88	; 0x58
   137f4:	movt	r3, #3
   137f8:	ldr	r3, [r3]
   137fc:	mov	r2, #13
   13800:	mov	r1, #1
   13804:	movw	r0, #55620	; 0xd944
   13808:	movt	r0, #1
   1380c:	bl	12430 <fwrite@plt>
   13810:	b	1269c <test@@Base+0xec>
   13814:	ldr	r3, [sp, #52]	; 0x34
   13818:	cmp	r3, #0
   1381c:	bne	13844 <test@@Base+0x1294>
   13820:	ldrd	r2, [sp, #56]	; 0x38
   13824:	mvn	r6, #0
   13828:	mov	r7, #0
   1382c:	cmp	r3, r7
   13830:	cmpeq	r2, r6
   13834:	bhi	13868 <test@@Base+0x12b8>
   13838:	ldr	r1, [sp, #36]	; 0x24
   1383c:	str	r2, [r1]
   13840:	b	12bbc <test@@Base+0x60c>
   13844:	mov	r3, #8
   13848:	mov	r2, r4
   1384c:	mov	r1, r0
   13850:	add	r0, sp, #68	; 0x44
   13854:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   13858:	cmp	r5, r0
   1385c:	bne	12bbc <test@@Base+0x60c>
   13860:	mov	r5, r0
   13864:	b	1269c <test@@Base+0xec>
   13868:	mov	r3, #7
   1386c:	mov	r2, r4
   13870:	mov	r1, r0
   13874:	add	r0, sp, #68	; 0x44
   13878:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1387c:	b	13858 <test@@Base+0x12a8>
   13880:	ldrd	r2, [sp, #16]
   13884:	add	r1, pc, #116	; 0x74
   13888:	ldrd	r0, [r1]
   1388c:	cmp	r3, r1
   13890:	cmpeq	r2, r0
   13894:	bne	138c0 <test@@Base+0x1310>
   13898:	add	r1, r5, #4
   1389c:	ldr	r3, [sp, #80]	; 0x50
   138a0:	cmp	r3, #0
   138a4:	bne	138dc <test@@Base+0x132c>
   138a8:	cmp	r1, r4
   138ac:	beq	13e48 <test@@Base+0x1898>
   138b0:	ldrb	r3, [r5, #4]
   138b4:	cmp	r3, #34	; 0x22
   138b8:	bne	13ae8 <test@@Base+0x1538>
   138bc:	b	13b10 <test@@Base+0x1560>
   138c0:	mov	r3, #13
   138c4:	mov	r2, r4
   138c8:	mov	r1, r5
   138cc:	add	r0, sp, #68	; 0x44
   138d0:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   138d4:	mov	r5, r0
   138d8:	b	1269c <test@@Base+0xec>
   138dc:	cmp	r1, r4
   138e0:	beq	13b4c <test@@Base+0x159c>
   138e4:	ldrb	r3, [r5, #4]
   138e8:	cmp	r3, #32
   138ec:	bls	13964 <test@@Base+0x13b4>
   138f0:	mov	r2, r1
   138f4:	b	13928 <test@@Base+0x1378>
   138f8:	andeq	r0, r0, r0
   138fc:	stclvs	6, cr6, [r5], #-464	; 0xfffffe30
   13900:	andeq	r0, r0, r0
   13904:	bvc	1d6eae0 <__bss_end__@@Base+0x1d3ea80>
   13908:	add	r1, r2, #1
   1390c:	cmp	r4, r1
   13910:	beq	13ab0 <test@@Base+0x1500>
   13914:	ldrb	r0, [r1]
   13918:	add	r2, r2, #1
   1391c:	cmp	r0, #32
   13920:	bls	13ab0 <test@@Base+0x1500>
   13924:	mov	r3, r0
   13928:	mov	r1, r2
   1392c:	cmp	r3, #46	; 0x2e
   13930:	cmpne	r3, #95	; 0x5f
   13934:	beq	13908 <test@@Base+0x1358>
   13938:	tst	r3, #128	; 0x80
   1393c:	bne	13908 <test@@Base+0x1358>
   13940:	sub	r0, r3, #48	; 0x30
   13944:	uxtb	r0, r0
   13948:	cmp	r0, #9
   1394c:	bls	13908 <test@@Base+0x1358>
   13950:	orr	r0, r3, #32
   13954:	sub	r0, r0, #97	; 0x61
   13958:	uxtb	r0, r0
   1395c:	cmp	r0, #25
   13960:	bls	13aa8 <test@@Base+0x14f8>
   13964:	sub	r3, r4, r1
   13968:	cmp	r3, #1
   1396c:	ble	13980 <test@@Base+0x13d0>
   13970:	ldrb	r3, [r1]
   13974:	cmp	r3, #32
   13978:	bhi	13990 <test@@Base+0x13e0>
   1397c:	beq	13b38 <test@@Base+0x1588>
   13980:	mov	r2, r4
   13984:	add	r0, sp, #68	; 0x44
   13988:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1398c:	mov	r1, r0
   13990:	cmp	r4, r1
   13994:	beq	13b54 <test@@Base+0x15a4>
   13998:	cmp	r4, r1
   1399c:	bls	13b94 <test@@Base+0x15e4>
   139a0:	ldrb	r3, [r1]
   139a4:	cmp	r3, #58	; 0x3a
   139a8:	bne	13b94 <test@@Base+0x15e4>
   139ac:	add	r5, r1, #1
   139b0:	sub	r3, r4, r5
   139b4:	cmp	r3, #1
   139b8:	ble	139cc <test@@Base+0x141c>
   139bc:	ldrb	r3, [r1, #1]
   139c0:	cmp	r3, #32
   139c4:	bhi	139e0 <test@@Base+0x1430>
   139c8:	beq	13b80 <test@@Base+0x15d0>
   139cc:	mov	r2, r4
   139d0:	mov	r1, r5
   139d4:	add	r0, sp, #68	; 0x44
   139d8:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   139dc:	mov	r5, r0
   139e0:	cmp	r4, r5
   139e4:	beq	13bd0 <test@@Base+0x1620>
   139e8:	ldrb	r3, [r5]
   139ec:	cmp	r3, #34	; 0x22
   139f0:	addeq	r3, r5, #1
   139f4:	streq	r3, [sp, #36]	; 0x24
   139f8:	beq	13a14 <test@@Base+0x1464>
   139fc:	mov	r3, #16
   13a00:	mov	r2, r4
   13a04:	mov	r1, r5
   13a08:	add	r0, sp, #68	; 0x44
   13a0c:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   13a10:	str	r0, [sp, #36]	; 0x24
   13a14:	mov	r2, r4
   13a18:	ldr	r6, [sp, #36]	; 0x24
   13a1c:	mov	r1, r6
   13a20:	add	r0, sp, #68	; 0x44
   13a24:	bl	19e24 <flatcc_json_parser_string_part@@Base>
   13a28:	mov	r5, r0
   13a2c:	cmp	r4, r0
   13a30:	beq	1269c <test@@Base+0xec>
   13a34:	ldrb	r3, [r0]
   13a38:	cmp	r3, #34	; 0x22
   13a3c:	bne	13bf4 <test@@Base+0x1644>
   13a40:	sub	r2, r0, r6
   13a44:	mov	r1, r6
   13a48:	ldr	r0, [sp, #12]
   13a4c:	bl	1785c <flatcc_builder_create_string@@Base>
   13a50:	mov	r3, r0
   13a54:	mov	r6, r3
   13a58:	cmp	r3, #0
   13a5c:	beq	1269c <test@@Base+0xec>
   13a60:	mov	r1, #10
   13a64:	ldr	r0, [sp, #12]
   13a68:	bl	17d14 <flatcc_builder_table_add_offset@@Base>
   13a6c:	cmp	r0, #0
   13a70:	beq	1269c <test@@Base+0xec>
   13a74:	str	r6, [r0]
   13a78:	cmp	r5, r4
   13a7c:	beq	13a90 <test@@Base+0x14e0>
   13a80:	ldrb	r3, [r5]
   13a84:	cmp	r3, #34	; 0x22
   13a88:	addeq	r0, r5, #1
   13a8c:	beq	12bbc <test@@Base+0x60c>
   13a90:	mov	r3, #20
   13a94:	mov	r2, r4
   13a98:	mov	r1, r5
   13a9c:	add	r0, sp, #68	; 0x44
   13aa0:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   13aa4:	b	12bbc <test@@Base+0x60c>
   13aa8:	add	r1, r2, #1
   13aac:	b	1390c <test@@Base+0x135c>
   13ab0:	cmp	r3, #46	; 0x2e
   13ab4:	bne	13964 <test@@Base+0x13b4>
   13ab8:	mov	r3, #5
   13abc:	mov	r2, r4
   13ac0:	add	r0, sp, #68	; 0x44
   13ac4:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   13ac8:	mov	r1, r0
   13acc:	b	13964 <test@@Base+0x13b4>
   13ad0:	add	r1, r3, #1
   13ad4:	cmp	r4, r1
   13ad8:	beq	13b20 <test@@Base+0x1570>
   13adc:	ldrb	r3, [r3, #1]
   13ae0:	cmp	r3, #34	; 0x22
   13ae4:	beq	13b10 <test@@Base+0x1560>
   13ae8:	cmp	r3, #92	; 0x5c
   13aec:	movne	r3, r1
   13af0:	bne	13ad0 <test@@Base+0x1520>
   13af4:	sub	r3, r4, r1
   13af8:	cmp	r3, #1
   13afc:	ble	13b08 <test@@Base+0x1558>
   13b00:	add	r3, r1, #1
   13b04:	b	13ad0 <test@@Base+0x1520>
   13b08:	cmp	r4, r1
   13b0c:	beq	13b20 <test@@Base+0x1570>
   13b10:	ldrb	r3, [r1]
   13b14:	cmp	r3, #34	; 0x22
   13b18:	addeq	r1, r1, #1
   13b1c:	beq	13964 <test@@Base+0x13b4>
   13b20:	mov	r3, #20
   13b24:	mov	r2, r4
   13b28:	add	r0, sp, #68	; 0x44
   13b2c:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   13b30:	mov	r1, r0
   13b34:	b	13964 <test@@Base+0x13b4>
   13b38:	ldrb	r3, [r1, #1]
   13b3c:	cmp	r3, #32
   13b40:	addhi	r1, r1, #1
   13b44:	bls	13980 <test@@Base+0x13d0>
   13b48:	b	13990 <test@@Base+0x13e0>
   13b4c:	mov	r1, r4
   13b50:	b	13980 <test@@Base+0x13d0>
   13b54:	mov	r6, r1
   13b58:	movw	r3, #88	; 0x58
   13b5c:	movt	r3, #3
   13b60:	ldr	r3, [r3]
   13b64:	mov	r2, #13
   13b68:	mov	r1, #1
   13b6c:	movw	r0, #55620	; 0xd944
   13b70:	movt	r0, #1
   13b74:	bl	12430 <fwrite@plt>
   13b78:	mov	r5, r6
   13b7c:	b	1269c <test@@Base+0xec>
   13b80:	ldrb	r3, [r1, #2]
   13b84:	cmp	r3, #32
   13b88:	addhi	r5, r1, #2
   13b8c:	bls	139cc <test@@Base+0x141c>
   13b90:	b	139e0 <test@@Base+0x1430>
   13b94:	mov	r6, r1
   13b98:	movw	r3, #88	; 0x58
   13b9c:	movt	r3, #3
   13ba0:	mov	r2, #58	; 0x3a
   13ba4:	movw	r1, #55636	; 0xd954
   13ba8:	movt	r1, #1
   13bac:	ldr	r0, [r3]
   13bb0:	bl	1246c <fprintf@plt>
   13bb4:	mov	r3, #17
   13bb8:	mov	r2, r4
   13bbc:	mov	r1, r6
   13bc0:	add	r0, sp, #68	; 0x44
   13bc4:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   13bc8:	mov	r5, r0
   13bcc:	b	1269c <test@@Base+0xec>
   13bd0:	movw	r3, #88	; 0x58
   13bd4:	movt	r3, #3
   13bd8:	ldr	r3, [r3]
   13bdc:	mov	r2, #13
   13be0:	mov	r1, #1
   13be4:	movw	r0, #55620	; 0xd944
   13be8:	movt	r0, #1
   13bec:	bl	12430 <fwrite@plt>
   13bf0:	b	1269c <test@@Base+0xec>
   13bf4:	ldr	r6, [sp, #12]
   13bf8:	mov	r0, r6
   13bfc:	bl	15d8c <flatcc_builder_start_string@@Base>
   13c00:	ldr	r3, [sp, #36]	; 0x24
   13c04:	sub	r7, r5, r3
   13c08:	mov	r1, r7
   13c0c:	mov	r0, r6
   13c10:	bl	15868 <flatcc_builder_extend_string@@Base>
   13c14:	cmp	r0, #0
   13c18:	beq	1269c <test@@Base+0xec>
   13c1c:	mov	r2, r7
   13c20:	ldr	r1, [sp, #36]	; 0x24
   13c24:	bl	1240c <memcpy@plt>
   13c28:	add	r3, sp, #64	; 0x40
   13c2c:	mov	r2, r4
   13c30:	mov	r1, r5
   13c34:	add	r0, sp, #68	; 0x44
   13c38:	bl	1a63c <flatcc_json_parser_string_escape@@Base>
   13c3c:	mov	r6, r0
   13c40:	ldrb	r2, [sp, #64]	; 0x40
   13c44:	add	r1, sp, #65	; 0x41
   13c48:	ldr	r7, [sp, #12]
   13c4c:	mov	r0, r7
   13c50:	bl	15924 <flatcc_builder_append_string@@Base>
   13c54:	mov	r2, r4
   13c58:	mov	r1, r6
   13c5c:	add	r0, sp, #68	; 0x44
   13c60:	bl	19e24 <flatcc_json_parser_string_part@@Base>
   13c64:	mov	r5, r0
   13c68:	cmp	r4, r0
   13c6c:	beq	1269c <test@@Base+0xec>
   13c70:	sub	r2, r0, r6
   13c74:	mov	r1, r6
   13c78:	mov	r0, r7
   13c7c:	bl	15924 <flatcc_builder_append_string@@Base>
   13c80:	ldrb	r3, [r5]
   13c84:	cmp	r3, #34	; 0x22
   13c88:	bne	13c28 <test@@Base+0x1678>
   13c8c:	ldr	r0, [sp, #12]
   13c90:	bl	17a00 <flatcc_builder_end_string@@Base>
   13c94:	mov	r3, r0
   13c98:	b	13a54 <test@@Base+0x14a4>
   13c9c:	ldrb	r3, [r0, #1]
   13ca0:	cmp	r3, #32
   13ca4:	addhi	r0, r0, #1
   13ca8:	bls	12bd8 <test@@Base+0x628>
   13cac:	b	12be8 <test@@Base+0x638>
   13cb0:	mov	r6, r0
   13cb4:	movw	r3, #88	; 0x58
   13cb8:	movt	r3, #3
   13cbc:	ldr	r3, [r3]
   13cc0:	mov	r2, #13
   13cc4:	mov	r1, #1
   13cc8:	movw	r0, #55620	; 0xd944
   13ccc:	movt	r0, #1
   13cd0:	bl	12430 <fwrite@plt>
   13cd4:	mov	r5, r6
   13cd8:	b	1269c <test@@Base+0xec>
   13cdc:	ldrb	r3, [r0, #2]
   13ce0:	cmp	r3, #32
   13ce4:	addhi	r5, r0, #2
   13ce8:	bls	12c1c <test@@Base+0x66c>
   13cec:	b	12c30 <test@@Base+0x680>
   13cf0:	movw	r3, #88	; 0x58
   13cf4:	movt	r3, #3
   13cf8:	ldr	r3, [r3]
   13cfc:	mov	r2, #13
   13d00:	mov	r1, #1
   13d04:	movw	r0, #55620	; 0xd944
   13d08:	movt	r0, #1
   13d0c:	bl	12430 <fwrite@plt>
   13d10:	b	1269c <test@@Base+0xec>
   13d14:	mov	r6, r0
   13d18:	cmp	r4, r0
   13d1c:	bls	13d28 <test@@Base+0x1778>
   13d20:	cmp	r3, #125	; 0x7d
   13d24:	beq	13d60 <test@@Base+0x17b0>
   13d28:	movw	r3, #88	; 0x58
   13d2c:	movt	r3, #3
   13d30:	mov	r2, #125	; 0x7d
   13d34:	movw	r1, #55636	; 0xd954
   13d38:	movt	r1, #1
   13d3c:	ldr	r0, [r3]
   13d40:	bl	1246c <fprintf@plt>
   13d44:	mov	r3, #17
   13d48:	mov	r2, r4
   13d4c:	mov	r1, r6
   13d50:	add	r0, sp, #68	; 0x44
   13d54:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   13d58:	mov	r5, r0
   13d5c:	b	1269c <test@@Base+0xec>
   13d60:	mov	r5, r0
   13d64:	b	13dac <test@@Base+0x17fc>
   13d68:	ldrb	r3, [r5, #2]
   13d6c:	cmp	r3, #32
   13d70:	addhi	r5, r5, #2
   13d74:	bls	13de8 <test@@Base+0x1838>
   13d78:	b	13dfc <test@@Base+0x184c>
   13d7c:	movw	r3, #88	; 0x58
   13d80:	movt	r3, #3
   13d84:	ldr	r3, [r3]
   13d88:	mov	r2, #15
   13d8c:	mov	r1, #1
   13d90:	movw	r0, #55700	; 0xd994
   13d94:	movt	r0, #1
   13d98:	bl	12430 <fwrite@plt>
   13d9c:	b	126f0 <test@@Base+0x140>
   13da0:	cmp	r4, r5
   13da4:	movls	r6, r5
   13da8:	bls	13d28 <test@@Base+0x1778>
   13dac:	add	r6, r5, #1
   13db0:	ldr	r7, [sp, #12]
   13db4:	mov	r0, r7
   13db8:	bl	16a38 <flatcc_builder_end_table@@Base>
   13dbc:	mov	r1, r0
   13dc0:	mov	r0, r7
   13dc4:	bl	15074 <flatcc_builder_end_buffer@@Base>
   13dc8:	sub	r3, r4, r6
   13dcc:	cmp	r3, #1
   13dd0:	ble	13de8 <test@@Base+0x1838>
   13dd4:	ldrb	r3, [r5, #1]
   13dd8:	cmp	r3, #32
   13ddc:	movhi	r5, r6
   13de0:	bhi	13dfc <test@@Base+0x184c>
   13de4:	beq	13d68 <test@@Base+0x17b8>
   13de8:	mov	r2, r4
   13dec:	mov	r1, r6
   13df0:	add	r0, sp, #68	; 0x44
   13df4:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   13df8:	mov	r5, r0
   13dfc:	cmp	r4, r5
   13e00:	beq	1269c <test@@Base+0xec>
   13e04:	movw	r3, #88	; 0x58
   13e08:	movt	r3, #3
   13e0c:	ldr	r3, [r3]
   13e10:	mov	r2, #26
   13e14:	mov	r1, #1
   13e18:	movw	r0, #55660	; 0xd96c
   13e1c:	movt	r0, #1
   13e20:	bl	12430 <fwrite@plt>
   13e24:	b	1269c <test@@Base+0xec>
   13e28:	mov	r1, r4
   13e2c:	b	12a94 <test@@Base+0x4e4>
   13e30:	mov	r1, r4
   13e34:	b	12f80 <test@@Base+0x9d0>
   13e38:	mov	r0, r4
   13e3c:	b	133bc <test@@Base+0xe0c>
   13e40:	mov	r0, r4
   13e44:	b	13740 <test@@Base+0x1190>
   13e48:	mov	r1, r4
   13e4c:	b	13b20 <test@@Base+0x1570>

00013e50 <main@@Base>:
   13e50:	push	{lr}		; (str lr, [sp, #-4]!)
   13e54:	sub	sp, sp, #244	; 0xf4
   13e58:	mvn	r3, #0
   13e5c:	str	r3, [sp, #236]	; 0xec
   13e60:	add	r0, sp, #4
   13e64:	bl	145ac <flatcc_builder_init@@Base>
   13e68:	movw	r1, #54964	; 0xd6b4
   13e6c:	movt	r1, #1
   13e70:	add	r3, sp, #236	; 0xec
   13e74:	add	r2, r1, #644	; 0x284
   13e78:	add	r2, r2, #1
   13e7c:	add	r0, sp, #4
   13e80:	bl	125b0 <test@@Base>
   13e84:	add	r0, sp, #4
   13e88:	bl	14790 <flatcc_builder_clear@@Base>
   13e8c:	ldr	r0, [sp, #236]	; 0xec
   13e90:	add	sp, sp, #244	; 0xf4
   13e94:	pop	{pc}		; (ldr pc, [sp], #4)
   13e98:	strd	r4, [sp, #-16]!
   13e9c:	str	r6, [sp, #8]
   13ea0:	str	lr, [sp, #12]
   13ea4:	sub	sp, sp, #8
   13ea8:	mov	r4, r0
   13eac:	mov	r5, r2
   13eb0:	ldr	r2, [r0, #28]
   13eb4:	mov	r3, #1
   13eb8:	str	r3, [sp]
   13ebc:	ldr	r6, [r0, #48]	; 0x30
   13ec0:	add	r2, r1, r2
   13ec4:	add	r1, r0, #60	; 0x3c
   13ec8:	ldr	r0, [r0, #40]	; 0x28
   13ecc:	blx	r6
   13ed0:	cmp	r0, #0
   13ed4:	bne	13f18 <main@@Base+0xc8>
   13ed8:	ldr	r1, [r4, #28]
   13edc:	ldr	r2, [r4, #60]	; 0x3c
   13ee0:	add	r2, r2, r1
   13ee4:	str	r2, [r4, #16]
   13ee8:	ldr	r3, [r4, #64]	; 0x40
   13eec:	sub	r3, r3, r1
   13ef0:	cmp	r3, r5
   13ef4:	movcs	r3, r5
   13ef8:	str	r3, [r4, #24]
   13efc:	ldr	r3, [r4, #32]
   13f00:	str	r5, [r3, #4]
   13f04:	add	sp, sp, #8
   13f08:	ldrd	r4, [sp]
   13f0c:	ldr	r6, [sp, #8]
   13f10:	add	sp, sp, #12
   13f14:	pop	{pc}		; (ldr pc, [sp], #4)
   13f18:	mvn	r0, #0
   13f1c:	b	13f04 <main@@Base+0xb4>

00013f20 <flatcc_builder_default_alloc@@Base>:
   13f20:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13f24:	strd	r6, [sp, #8]
   13f28:	str	r8, [sp, #16]
   13f2c:	str	lr, [sp, #20]
   13f30:	mov	r5, r1
   13f34:	cmp	r2, #0
   13f38:	beq	13f70 <flatcc_builder_default_alloc@@Base+0x50>
   13f3c:	mov	r6, r3
   13f40:	ldr	r3, [sp, #24]
   13f44:	sub	r3, r3, #1
   13f48:	cmp	r3, #6
   13f4c:	ldrls	pc, [pc, r3, lsl #2]
   13f50:	b	1401c <flatcc_builder_default_alloc@@Base+0xfc>
   13f54:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   13f58:	andeq	r4, r1, ip, lsl r0
   13f5c:	andeq	r4, r1, ip, lsl r0
   13f60:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   13f64:	andeq	r4, r1, r4, lsr #32
   13f68:	andeq	r4, r1, ip, lsl r0
   13f6c:	andeq	r4, r1, r4, lsl r0
   13f70:	ldr	r0, [r1]
   13f74:	cmp	r0, #0
   13f78:	moveq	r0, #0
   13f7c:	beq	14000 <flatcc_builder_default_alloc@@Base+0xe0>
   13f80:	bl	12400 <free@plt>
   13f84:	mov	r0, #0
   13f88:	str	r0, [r5]
   13f8c:	str	r0, [r5, #4]
   13f90:	b	14000 <flatcc_builder_default_alloc@@Base+0xe0>
   13f94:	mov	r4, #288	; 0x120
   13f98:	b	13fa0 <flatcc_builder_default_alloc@@Base+0x80>
   13f9c:	mov	r4, #256	; 0x100
   13fa0:	cmp	r4, r2
   13fa4:	bcs	13fb4 <flatcc_builder_default_alloc@@Base+0x94>
   13fa8:	lsl	r4, r4, #1
   13fac:	cmp	r2, r4
   13fb0:	bhi	13fa8 <flatcc_builder_default_alloc@@Base+0x88>
   13fb4:	ldr	r3, [r5, #4]
   13fb8:	cmp	r3, r2
   13fbc:	bcc	13fcc <flatcc_builder_default_alloc@@Base+0xac>
   13fc0:	cmp	r4, r3, lsr #1
   13fc4:	movls	r0, #0
   13fc8:	bls	14000 <flatcc_builder_default_alloc@@Base+0xe0>
   13fcc:	mov	r1, r4
   13fd0:	ldr	r0, [r5]
   13fd4:	bl	12424 <realloc@plt>
   13fd8:	subs	r7, r0, #0
   13fdc:	beq	14040 <flatcc_builder_default_alloc@@Base+0x120>
   13fe0:	cmp	r6, #0
   13fe4:	beq	13ff4 <flatcc_builder_default_alloc@@Base+0xd4>
   13fe8:	ldr	r0, [r5, #4]
   13fec:	cmp	r0, r4
   13ff0:	bcc	1402c <flatcc_builder_default_alloc@@Base+0x10c>
   13ff4:	str	r7, [r5]
   13ff8:	str	r4, [r5, #4]
   13ffc:	mov	r0, #0
   14000:	ldrd	r4, [sp]
   14004:	ldrd	r6, [sp, #8]
   14008:	ldr	r8, [sp, #16]
   1400c:	add	sp, sp, #20
   14010:	pop	{pc}		; (ldr pc, [sp], #4)
   14014:	mov	r4, #64	; 0x40
   14018:	b	13fa0 <flatcc_builder_default_alloc@@Base+0x80>
   1401c:	mov	r4, #32
   14020:	b	13fa0 <flatcc_builder_default_alloc@@Base+0x80>
   14024:	mov	r4, r2
   14028:	b	13fb4 <flatcc_builder_default_alloc@@Base+0x94>
   1402c:	sub	r2, r4, r0
   14030:	mov	r1, #0
   14034:	add	r0, r7, r0
   14038:	bl	12484 <memset@plt>
   1403c:	b	13ff4 <flatcc_builder_default_alloc@@Base+0xd4>
   14040:	mvn	r0, #0
   14044:	b	14000 <flatcc_builder_default_alloc@@Base+0xe0>
   14048:	cmp	r2, #0
   1404c:	bne	1405c <flatcc_builder_default_alloc@@Base+0x13c>
   14050:	ldrh	r2, [r0, #132]	; 0x84
   14054:	cmp	r2, #0
   14058:	moveq	r2, #1
   1405c:	ldrh	ip, [r1]
   14060:	cmp	ip, #3
   14064:	movls	ip, #4
   14068:	strhls	ip, [r1]
   1406c:	ldrh	ip, [r1]
   14070:	cmp	ip, r2
   14074:	strhcc	r2, [r1]
   14078:	cmp	r3, #0
   1407c:	bne	1415c <flatcc_builder_default_alloc@@Base+0x23c>
   14080:	strd	r4, [sp, #-12]!
   14084:	str	lr, [sp, #8]
   14088:	sub	sp, sp, #84	; 0x54
   1408c:	ldr	r4, [r0, #140]	; 0x8c
   14090:	sub	r2, r2, #1
   14094:	ands	r2, r2, r4
   14098:	bne	140b0 <flatcc_builder_default_alloc@@Base+0x190>
   1409c:	mov	r0, #0
   140a0:	add	sp, sp, #84	; 0x54
   140a4:	ldrd	r4, [sp]
   140a8:	add	sp, sp, #8
   140ac:	pop	{pc}		; (ldr pc, [sp], #4)
   140b0:	str	r2, [sp, #8]
   140b4:	movw	r3, #55716	; 0xd9a4
   140b8:	movt	r3, #1
   140bc:	str	r3, [sp, #16]
   140c0:	str	r2, [sp, #20]
   140c4:	mov	r3, #1
   140c8:	str	r3, [sp, #12]
   140cc:	add	r3, r4, r2
   140d0:	str	r3, [r0, #140]	; 0x8c
   140d4:	cmp	r4, r3
   140d8:	bgt	14124 <flatcc_builder_default_alloc@@Base+0x204>
   140dc:	str	r2, [sp]
   140e0:	ldr	r5, [r0, #44]	; 0x2c
   140e4:	mov	r3, r4
   140e8:	mov	r2, #1
   140ec:	add	r1, sp, #16
   140f0:	ldr	r0, [r0, #36]	; 0x24
   140f4:	blx	r5
   140f8:	cmp	r0, #0
   140fc:	bne	14140 <flatcc_builder_default_alloc@@Base+0x220>
   14100:	cmn	r4, #1
   14104:	bne	1409c <flatcc_builder_default_alloc@@Base+0x17c>
   14108:	ldr	r3, [pc, #84]	; 14164 <flatcc_builder_default_alloc@@Base+0x244>
   1410c:	movw	r2, #702	; 0x2be
   14110:	movw	r1, #57588	; 0xe0f4
   14114:	movt	r1, #1
   14118:	movw	r0, #57672	; 0xe148
   1411c:	movt	r0, #1
   14120:	bl	124b4 <__assert_fail@plt>
   14124:	ldr	r3, [pc, #60]	; 14168 <flatcc_builder_default_alloc@@Base+0x248>
   14128:	movw	r2, #673	; 0x2a1
   1412c:	movw	r1, #57588	; 0xe0f4
   14130:	movt	r1, #1
   14134:	movw	r0, #57672	; 0xe148
   14138:	movt	r0, #1
   1413c:	bl	124b4 <__assert_fail@plt>
   14140:	ldr	r3, [pc, #32]	; 14168 <flatcc_builder_default_alloc@@Base+0x248>
   14144:	movw	r2, #677	; 0x2a5
   14148:	movw	r1, #57588	; 0xe0f4
   1414c:	movt	r1, #1
   14150:	movw	r0, #57672	; 0xe148
   14154:	movt	r0, #1
   14158:	bl	124b4 <__assert_fail@plt>
   1415c:	mov	r0, #0
   14160:	bx	lr
   14164:			; <UNDEFINED> instruction: 0x0001dbb0
   14168:	andeq	sp, r1, r4, lsr #23
   1416c:	strd	r4, [sp, #-20]!	; 0xffffffec
   14170:	strd	r6, [sp, #8]
   14174:	str	lr, [sp, #16]
   14178:	sub	sp, sp, #12
   1417c:	mov	r4, r0
   14180:	mov	r6, r1
   14184:	ldr	r3, [r0, #156]	; 0x9c
   14188:	add	r2, r3, #1
   1418c:	str	r2, [r0, #156]	; 0x9c
   14190:	ldr	r1, [r0, #160]	; 0xa0
   14194:	cmp	r2, r1
   14198:	ble	14250 <flatcc_builder_default_alloc@@Base+0x330>
   1419c:	ldr	r1, [r0, #176]	; 0xb0
   141a0:	cmp	r2, r1
   141a4:	cmpgt	r1, #0
   141a8:	bgt	142c4 <flatcc_builder_default_alloc@@Base+0x3a4>
   141ac:	add	r3, r3, r3, lsl #3
   141b0:	lsl	r5, r3, #2
   141b4:	add	r2, r5, #36	; 0x24
   141b8:	ldr	r3, [r0, #88]	; 0x58
   141bc:	cmp	r2, r3
   141c0:	bls	141e8 <flatcc_builder_default_alloc@@Base+0x2c8>
   141c4:	mov	r3, #4
   141c8:	str	r3, [sp]
   141cc:	ldr	r7, [r0, #48]	; 0x30
   141d0:	mov	r3, #0
   141d4:	add	r1, r0, #84	; 0x54
   141d8:	ldr	r0, [r0, #40]	; 0x28
   141dc:	blx	r7
   141e0:	cmp	r0, #0
   141e4:	bne	14234 <flatcc_builder_default_alloc@@Base+0x314>
   141e8:	ldr	r3, [r4, #84]	; 0x54
   141ec:	add	r5, r3, r5
   141f0:	str	r5, [r4, #32]
   141f4:	cmp	r5, #0
   141f8:	beq	142cc <flatcc_builder_default_alloc@@Base+0x3ac>
   141fc:	ldr	r3, [r4, #88]	; 0x58
   14200:	movw	r2, #36409	; 0x8e39
   14204:	movt	r2, #14563	; 0x38e3
   14208:	umull	r2, r3, r2, r3
   1420c:	lsr	r3, r3, #3
   14210:	ldr	r2, [r4, #176]	; 0xb0
   14214:	cmp	r2, #0
   14218:	cmpgt	r3, r2
   1421c:	movgt	r1, #1
   14220:	movle	r1, #0
   14224:	cmp	r1, #0
   14228:	movne	r3, r2
   1422c:	str	r3, [r4, #160]	; 0xa0
   14230:	b	1425c <flatcc_builder_default_alloc@@Base+0x33c>
   14234:	ldr	r3, [pc, #152]	; 142d4 <flatcc_builder_default_alloc@@Base+0x3b4>
   14238:	mov	r2, #308	; 0x134
   1423c:	movw	r1, #57588	; 0xe0f4
   14240:	movt	r1, #1
   14244:	movw	r0, #57672	; 0xe148
   14248:	movt	r0, #1
   1424c:	bl	124b4 <__assert_fail@plt>
   14250:	ldr	r3, [r0, #32]
   14254:	add	r3, r3, #36	; 0x24
   14258:	str	r3, [r0, #32]
   1425c:	ldr	r3, [r4, #32]
   14260:	ldr	r2, [r4, #20]
   14264:	str	r2, [r3, #8]
   14268:	ldr	r3, [r4, #32]
   1426c:	ldrh	r2, [r4, #130]	; 0x82
   14270:	strh	r2, [r3, #12]
   14274:	strh	r6, [r4, #130]	; 0x82
   14278:	ldr	r3, [r4, #32]
   1427c:	ldr	r2, [r4, #28]
   14280:	str	r2, [r3]
   14284:	ldr	r3, [r4, #32]
   14288:	mvn	r2, #3
   1428c:	str	r2, [r3, #4]
   14290:	ldr	r3, [r4, #28]
   14294:	ldr	r2, [r4, #20]
   14298:	add	r3, r3, r2
   1429c:	add	r3, r3, #7
   142a0:	bic	r3, r3, #7
   142a4:	str	r3, [r4, #28]
   142a8:	mov	r0, #0
   142ac:	str	r0, [r4, #20]
   142b0:	add	sp, sp, #12
   142b4:	ldrd	r4, [sp]
   142b8:	ldrd	r6, [sp, #8]
   142bc:	add	sp, sp, #16
   142c0:	pop	{pc}		; (ldr pc, [sp], #4)
   142c4:	mvn	r0, #0
   142c8:	b	142b0 <flatcc_builder_default_alloc@@Base+0x390>
   142cc:	mvn	r0, #0
   142d0:	b	142b0 <flatcc_builder_default_alloc@@Base+0x390>
   142d4:	andeq	sp, r1, r0, asr #23
   142d8:	strd	r4, [sp, #-16]!
   142dc:	str	r6, [sp, #8]
   142e0:	str	lr, [sp, #12]
   142e4:	sub	sp, sp, #88	; 0x58
   142e8:	cmn	r2, #-1073741823	; 0xc0000001
   142ec:	bhi	144d0 <flatcc_builder_default_alloc@@Base+0x5b0>
   142f0:	ldrh	ip, [r0, #128]	; 0x80
   142f4:	cmp	ip, #3
   142f8:	movls	ip, #4
   142fc:	strhls	ip, [r0, #128]	; 0x80
   14300:	str	r2, [sp, #84]	; 0x54
   14304:	ldr	lr, [r0, #136]	; 0x88
   14308:	and	ip, lr, #3
   1430c:	mov	r4, #4
   14310:	str	r4, [sp, #12]
   14314:	add	r5, sp, #84	; 0x54
   14318:	str	r5, [sp, #20]
   1431c:	str	r4, [sp, #24]
   14320:	mov	r4, #1
   14324:	str	r4, [sp, #16]
   14328:	lsls	r4, r2, #2
   1432c:	beq	14348 <flatcc_builder_default_alloc@@Base+0x428>
   14330:	add	r5, r4, #4
   14334:	str	r5, [sp, #12]
   14338:	str	r1, [sp, #28]
   1433c:	str	r4, [sp, #32]
   14340:	mov	r4, #2
   14344:	str	r4, [sp, #16]
   14348:	cmp	ip, #0
   1434c:	beq	14380 <flatcc_builder_default_alloc@@Base+0x460>
   14350:	ldr	r4, [sp, #12]
   14354:	add	r4, r4, ip
   14358:	str	r4, [sp, #12]
   1435c:	ldr	r4, [sp, #16]
   14360:	add	r4, r4, #1
   14364:	add	r5, sp, #88	; 0x58
   14368:	add	r6, r5, r4, lsl #3
   1436c:	movw	r5, #55716	; 0xd9a4
   14370:	movt	r5, #1
   14374:	str	r5, [r6, #-76]	; 0xffffffb4
   14378:	str	ip, [r6, #-72]	; 0xffffffb8
   1437c:	str	r4, [sp, #16]
   14380:	mov	r5, r0
   14384:	ldr	r6, [sp, #12]
   14388:	cmp	r2, #0
   1438c:	beq	14448 <flatcc_builder_default_alloc@@Base+0x528>
   14390:	mov	ip, r3
   14394:	add	r4, r2, r3
   14398:	mov	r2, r1
   1439c:	add	r1, r1, r6
   143a0:	sub	r0, r1, lr
   143a4:	b	143c8 <flatcc_builder_default_alloc@@Base+0x4a8>
   143a8:	cmp	r3, #0
   143ac:	beq	1442c <flatcc_builder_default_alloc@@Base+0x50c>
   143b0:	ldrb	r1, [ip]
   143b4:	cmp	r1, #0
   143b8:	bne	14410 <flatcc_builder_default_alloc@@Base+0x4f0>
   143bc:	add	ip, ip, #1
   143c0:	cmp	ip, r4
   143c4:	beq	14448 <flatcc_builder_default_alloc@@Base+0x528>
   143c8:	ldr	r1, [r2], #4
   143cc:	cmp	r1, #0
   143d0:	beq	143a8 <flatcc_builder_default_alloc@@Base+0x488>
   143d4:	sub	lr, r0, r2
   143d8:	add	r1, lr, r1
   143dc:	str	r1, [r2, #-4]
   143e0:	cmp	r3, #0
   143e4:	beq	143bc <flatcc_builder_default_alloc@@Base+0x49c>
   143e8:	ldrb	r1, [ip]
   143ec:	cmp	r1, #0
   143f0:	bne	143bc <flatcc_builder_default_alloc@@Base+0x49c>
   143f4:	ldr	r3, [pc, #220]	; 144d8 <flatcc_builder_default_alloc@@Base+0x5b8>
   143f8:	movw	r2, #1457	; 0x5b1
   143fc:	movw	r1, #57588	; 0xe0f4
   14400:	movt	r1, #1
   14404:	movw	r0, #57660	; 0xe13c
   14408:	movt	r0, #1
   1440c:	bl	124b4 <__assert_fail@plt>
   14410:	ldr	r3, [pc, #192]	; 144d8 <flatcc_builder_default_alloc@@Base+0x5b8>
   14414:	movw	r2, #1461	; 0x5b5
   14418:	movw	r1, #57588	; 0xe0f4
   1441c:	movt	r1, #1
   14420:	movw	r0, #57676	; 0xe14c
   14424:	movt	r0, #1
   14428:	bl	124b4 <__assert_fail@plt>
   1442c:	ldr	r3, [pc, #164]	; 144d8 <flatcc_builder_default_alloc@@Base+0x5b8>
   14430:	movw	r2, #1463	; 0x5b7
   14434:	movw	r1, #57588	; 0xe0f4
   14438:	movt	r1, #1
   1443c:	movw	r0, #57672	; 0xe148
   14440:	movt	r0, #1
   14444:	bl	124b4 <__assert_fail@plt>
   14448:	ldr	r3, [r5, #136]	; 0x88
   1444c:	sub	r4, r3, r6
   14450:	cmp	r3, r4
   14454:	ble	14498 <flatcc_builder_default_alloc@@Base+0x578>
   14458:	str	r6, [sp]
   1445c:	ldr	r6, [r5, #44]	; 0x2c
   14460:	mov	r3, r4
   14464:	ldr	r2, [sp, #16]
   14468:	add	r1, sp, #20
   1446c:	ldr	r0, [r5, #36]	; 0x24
   14470:	blx	r6
   14474:	cmp	r0, #0
   14478:	streq	r4, [r5, #136]	; 0x88
   1447c:	bne	144b4 <flatcc_builder_default_alloc@@Base+0x594>
   14480:	mov	r0, r4
   14484:	add	sp, sp, #88	; 0x58
   14488:	ldrd	r4, [sp]
   1448c:	ldr	r6, [sp, #8]
   14490:	add	sp, sp, #12
   14494:	pop	{pc}		; (ldr pc, [sp], #4)
   14498:	ldr	r3, [pc, #60]	; 144dc <flatcc_builder_default_alloc@@Base+0x5bc>
   1449c:	movw	r2, #647	; 0x287
   144a0:	movw	r1, #57588	; 0xe0f4
   144a4:	movt	r1, #1
   144a8:	movw	r0, #57672	; 0xe148
   144ac:	movt	r0, #1
   144b0:	bl	124b4 <__assert_fail@plt>
   144b4:	ldr	r3, [pc, #32]	; 144dc <flatcc_builder_default_alloc@@Base+0x5bc>
   144b8:	movw	r2, #651	; 0x28b
   144bc:	movw	r1, #57588	; 0xe0f4
   144c0:	movt	r1, #1
   144c4:	movw	r0, #57672	; 0xe148
   144c8:	movt	r0, #1
   144cc:	bl	124b4 <__assert_fail@plt>
   144d0:	mov	r4, #0
   144d4:	b	14480 <flatcc_builder_default_alloc@@Base+0x560>
   144d8:	ldrdeq	sp, [r1], -r0
   144dc:	strdeq	sp, [r1], -r0

000144e0 <flatcc_builder_flush_vtable_cache@@Base>:
   144e0:	ldr	r3, [r0, #116]	; 0x74
   144e4:	cmp	r3, #0
   144e8:	bxeq	lr
   144ec:	str	r4, [sp, #-8]!
   144f0:	str	lr, [sp, #4]
   144f4:	mov	r4, r0
   144f8:	ldr	r2, [r0, #96]	; 0x60
   144fc:	mov	r1, #0
   14500:	ldr	r0, [r0, #92]	; 0x5c
   14504:	bl	12484 <memset@plt>
   14508:	mov	r3, #16
   1450c:	str	r3, [r4, #124]	; 0x7c
   14510:	mov	r3, #0
   14514:	str	r3, [r4, #120]	; 0x78
   14518:	ldr	r4, [sp]
   1451c:	add	sp, sp, #4
   14520:	pop	{pc}		; (ldr pc, [sp], #4)

00014524 <flatcc_builder_custom_init@@Base>:
   14524:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14528:	strd	r6, [sp, #8]
   1452c:	str	r8, [sp, #16]
   14530:	str	lr, [sp, #20]
   14534:	mov	r4, r0
   14538:	mov	r6, r1
   1453c:	mov	r7, r2
   14540:	mov	r5, r3
   14544:	mov	r2, #232	; 0xe8
   14548:	mov	r1, #0
   1454c:	bl	12484 <memset@plt>
   14550:	cmp	r6, #0
   14554:	beq	14594 <flatcc_builder_custom_init@@Base+0x70>
   14558:	movw	r3, #16160	; 0x3f20
   1455c:	movt	r3, #1
   14560:	cmp	r5, #0
   14564:	moveq	r5, r3
   14568:	ldr	r3, [sp, #24]
   1456c:	str	r3, [r4, #40]	; 0x28
   14570:	str	r5, [r4, #48]	; 0x30
   14574:	str	r7, [r4, #36]	; 0x24
   14578:	str	r6, [r4, #44]	; 0x2c
   1457c:	mov	r0, #0
   14580:	ldrd	r4, [sp]
   14584:	ldrd	r6, [sp, #8]
   14588:	ldr	r8, [sp, #16]
   1458c:	add	sp, sp, #20
   14590:	pop	{pc}		; (ldr pc, [sp], #4)
   14594:	mov	r3, #1
   14598:	str	r3, [r4, #184]	; 0xb8
   1459c:	add	r7, r4, #188	; 0xbc
   145a0:	movw	r6, #34288	; 0x85f0
   145a4:	movt	r6, #1
   145a8:	b	14558 <flatcc_builder_custom_init@@Base+0x34>

000145ac <flatcc_builder_init@@Base>:
   145ac:	str	r4, [sp, #-8]!
   145b0:	str	lr, [sp, #4]
   145b4:	mov	r4, r0
   145b8:	mov	r2, #232	; 0xe8
   145bc:	mov	r1, #0
   145c0:	bl	12484 <memset@plt>
   145c4:	mov	r3, #1
   145c8:	str	r3, [r4, #184]	; 0xb8
   145cc:	movw	r3, #16160	; 0x3f20
   145d0:	movt	r3, #1
   145d4:	str	r3, [r4, #48]	; 0x30
   145d8:	add	r3, r4, #188	; 0xbc
   145dc:	str	r3, [r4, #36]	; 0x24
   145e0:	movw	r3, #34288	; 0x85f0
   145e4:	movt	r3, #1
   145e8:	str	r3, [r4, #44]	; 0x2c
   145ec:	mov	r0, #0
   145f0:	ldr	r4, [sp]
   145f4:	add	sp, sp, #4
   145f8:	pop	{pc}		; (ldr pc, [sp], #4)

000145fc <flatcc_builder_custom_reset@@Base>:
   145fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14600:	strd	r6, [sp, #8]
   14604:	strd	r8, [sp, #16]
   14608:	strd	sl, [sp, #24]
   1460c:	str	lr, [sp, #32]
   14610:	sub	sp, sp, #12
   14614:	mov	r6, r0
   14618:	mov	fp, r1
   1461c:	mov	r9, r2
   14620:	mov	r4, r0
   14624:	mov	r5, #0
   14628:	mov	sl, r5
   1462c:	mov	r8, #1
   14630:	b	14654 <flatcc_builder_custom_reset@@Base+0x58>
   14634:	ldr	r2, [r7, #56]	; 0x38
   14638:	mov	r1, sl
   1463c:	ldr	r0, [r7, #52]	; 0x34
   14640:	bl	12484 <memset@plt>
   14644:	add	r5, r5, #1
   14648:	add	r4, r4, #8
   1464c:	cmp	r5, #8
   14650:	beq	146c4 <flatcc_builder_custom_reset@@Base+0xc8>
   14654:	add	r1, r4, #52	; 0x34
   14658:	mov	r7, r4
   1465c:	ldr	r3, [r4, #52]	; 0x34
   14660:	cmp	r3, #0
   14664:	beq	1469c <flatcc_builder_custom_reset@@Base+0xa0>
   14668:	cmp	r5, #5
   1466c:	cmpne	r9, #0
   14670:	beq	14634 <flatcc_builder_custom_reset@@Base+0x38>
   14674:	str	r5, [sp]
   14678:	mov	r3, r8
   1467c:	mov	r2, r8
   14680:	ldr	r0, [r6, #40]	; 0x28
   14684:	ldr	ip, [r6, #48]	; 0x30
   14688:	blx	ip
   1468c:	cmp	r0, #0
   14690:	beq	14634 <flatcc_builder_custom_reset@@Base+0x38>
   14694:	mvn	r0, #0
   14698:	b	14740 <flatcc_builder_custom_reset@@Base+0x144>
   1469c:	ldr	r3, [r4, #56]	; 0x38
   146a0:	cmp	r3, #0
   146a4:	beq	14644 <flatcc_builder_custom_reset@@Base+0x48>
   146a8:	ldr	r3, [pc, #188]	; 1476c <flatcc_builder_custom_reset@@Base+0x170>
   146ac:	movw	r2, #434	; 0x1b2
   146b0:	movw	r1, #57588	; 0xe0f4
   146b4:	movt	r1, #1
   146b8:	movw	r0, #57692	; 0xe15c
   146bc:	movt	r0, #1
   146c0:	bl	124b4 <__assert_fail@plt>
   146c4:	mov	r3, #0
   146c8:	str	r3, [r6, #120]	; 0x78
   146cc:	ldr	r3, [r6, #124]	; 0x7c
   146d0:	cmp	r3, #0
   146d4:	movne	r3, #16
   146d8:	strne	r3, [r6, #124]	; 0x7c
   146dc:	mov	r3, #0
   146e0:	strh	r3, [r6, #128]	; 0x80
   146e4:	str	r3, [r6, #136]	; 0x88
   146e8:	str	r3, [r6, #140]	; 0x8c
   146ec:	str	r3, [r6, #156]	; 0x9c
   146f0:	str	r3, [r6, #160]	; 0xa0
   146f4:	str	r3, [r6, #20]
   146f8:	str	r3, [r6, #24]
   146fc:	str	r3, [r6, #148]	; 0x94
   14700:	str	r3, [r6, #152]	; 0x98
   14704:	ldr	r2, [r6, #60]	; 0x3c
   14708:	str	r2, [r6, #16]
   1470c:	ldr	r2, [r6, #76]	; 0x4c
   14710:	str	r2, [r6]
   14714:	ldr	r2, [r6, #52]	; 0x34
   14718:	str	r2, [r6, #4]
   1471c:	str	r3, [r6, #32]
   14720:	cmp	fp, r3
   14724:	beq	14734 <flatcc_builder_custom_reset@@Base+0x138>
   14728:	str	r3, [r6, #172]	; 0xac
   1472c:	str	r3, [r6, #176]	; 0xb0
   14730:	str	r3, [r6, #180]	; 0xb4
   14734:	ldr	r0, [r6, #184]	; 0xb8
   14738:	cmp	r0, #0
   1473c:	bne	1475c <flatcc_builder_custom_reset@@Base+0x160>
   14740:	add	sp, sp, #12
   14744:	ldrd	r4, [sp]
   14748:	ldrd	r6, [sp, #8]
   1474c:	ldrd	r8, [sp, #16]
   14750:	ldrd	sl, [sp, #24]
   14754:	add	sp, sp, #32
   14758:	pop	{pc}		; (ldr pc, [sp], #4)
   1475c:	add	r0, r6, #188	; 0xbc
   14760:	bl	18498 <flatcc_emitter_reset@@Base>
   14764:	mov	r0, #0
   14768:	b	14740 <flatcc_builder_custom_reset@@Base+0x144>
   1476c:	strdeq	sp, [r1], -ip

00014770 <flatcc_builder_reset@@Base>:
   14770:	str	r4, [sp, #-8]!
   14774:	str	lr, [sp, #4]
   14778:	mov	r2, #0
   1477c:	mov	r1, r2
   14780:	bl	145fc <flatcc_builder_custom_reset@@Base>
   14784:	ldr	r4, [sp]
   14788:	add	sp, sp, #4
   1478c:	pop	{pc}		; (ldr pc, [sp], #4)

00014790 <flatcc_builder_clear@@Base>:
   14790:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14794:	strd	r6, [sp, #8]
   14798:	str	r8, [sp, #16]
   1479c:	str	lr, [sp, #20]
   147a0:	sub	sp, sp, #8
   147a4:	mov	r6, r0
   147a8:	add	r5, r0, #52	; 0x34
   147ac:	mov	r4, #0
   147b0:	mov	r8, r4
   147b4:	str	r4, [sp]
   147b8:	ldr	r7, [r6, #48]	; 0x30
   147bc:	mov	r3, r8
   147c0:	mov	r2, r8
   147c4:	mov	r1, r5
   147c8:	ldr	r0, [r6, #40]	; 0x28
   147cc:	blx	r7
   147d0:	add	r4, r4, #1
   147d4:	add	r5, r5, #8
   147d8:	cmp	r4, #8
   147dc:	bne	147b4 <flatcc_builder_clear@@Base+0x24>
   147e0:	ldr	r3, [r6, #184]	; 0xb8
   147e4:	cmp	r3, #0
   147e8:	bne	14814 <flatcc_builder_clear@@Base+0x84>
   147ec:	mov	r2, #232	; 0xe8
   147f0:	mov	r1, #0
   147f4:	mov	r0, r6
   147f8:	bl	12484 <memset@plt>
   147fc:	add	sp, sp, #8
   14800:	ldrd	r4, [sp]
   14804:	ldrd	r6, [sp, #8]
   14808:	ldr	r8, [sp, #16]
   1480c:	add	sp, sp, #20
   14810:	pop	{pc}		; (ldr pc, [sp], #4)
   14814:	add	r0, r6, #188	; 0xbc
   14818:	bl	18574 <flatcc_emitter_clear@@Base>
   1481c:	b	147ec <flatcc_builder_clear@@Base+0x5c>

00014820 <flatcc_builder_enter_user_frame_ptr@@Base>:
   14820:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14824:	strd	r6, [sp, #8]
   14828:	str	r8, [sp, #16]
   1482c:	str	lr, [sp, #20]
   14830:	sub	sp, sp, #8
   14834:	mov	r4, r0
   14838:	add	r5, r1, #3
   1483c:	bic	r5, r5, #3
   14840:	add	r5, r5, #4
   14844:	ldr	r6, [r0, #228]	; 0xe4
   14848:	add	r2, r6, r5
   1484c:	ldr	r3, [r0, #112]	; 0x70
   14850:	cmp	r2, r3
   14854:	bls	1487c <flatcc_builder_enter_user_frame_ptr@@Base+0x5c>
   14858:	mov	r3, #7
   1485c:	str	r3, [sp]
   14860:	ldr	r7, [r0, #48]	; 0x30
   14864:	mov	r3, #0
   14868:	add	r1, r0, #108	; 0x6c
   1486c:	ldr	r0, [r0, #40]	; 0x28
   14870:	blx	r7
   14874:	cmp	r0, #0
   14878:	bne	148d4 <flatcc_builder_enter_user_frame_ptr@@Base+0xb4>
   1487c:	ldr	r8, [r4, #108]	; 0x6c
   14880:	adds	r7, r8, r6
   14884:	moveq	r0, #0
   14888:	beq	148bc <flatcc_builder_enter_user_frame_ptr@@Base+0x9c>
   1488c:	mov	r2, r5
   14890:	mov	r1, #0
   14894:	mov	r0, r7
   14898:	bl	12484 <memset@plt>
   1489c:	add	r0, r7, #4
   148a0:	ldr	r3, [r4, #224]	; 0xe0
   148a4:	str	r3, [r8, r6]
   148a8:	ldr	r1, [r4, #228]	; 0xe4
   148ac:	add	r3, r1, #4
   148b0:	str	r3, [r4, #224]	; 0xe0
   148b4:	add	r5, r1, r5
   148b8:	str	r5, [r4, #228]	; 0xe4
   148bc:	add	sp, sp, #8
   148c0:	ldrd	r4, [sp]
   148c4:	ldrd	r6, [sp, #8]
   148c8:	ldr	r8, [sp, #16]
   148cc:	add	sp, sp, #20
   148d0:	pop	{pc}		; (ldr pc, [sp], #4)
   148d4:	ldr	r3, [pc, #20]	; 148f0 <flatcc_builder_enter_user_frame_ptr@@Base+0xd0>
   148d8:	mov	r2, #308	; 0x134
   148dc:	movw	r1, #57588	; 0xe0f4
   148e0:	movt	r1, #1
   148e4:	movw	r0, #57672	; 0xe148
   148e8:	movt	r0, #1
   148ec:	bl	124b4 <__assert_fail@plt>
   148f0:	andeq	sp, r1, r0, asr #23

000148f4 <flatcc_builder_enter_user_frame@@Base>:
   148f4:	strd	r4, [sp, #-20]!	; 0xffffffec
   148f8:	strd	r6, [sp, #8]
   148fc:	str	lr, [sp, #16]
   14900:	sub	sp, sp, #12
   14904:	mov	r4, r0
   14908:	add	r5, r1, #3
   1490c:	bic	r5, r5, #3
   14910:	add	r5, r5, #4
   14914:	ldr	r6, [r0, #228]	; 0xe4
   14918:	add	r2, r6, r5
   1491c:	ldr	r3, [r0, #112]	; 0x70
   14920:	cmp	r2, r3
   14924:	bls	1494c <flatcc_builder_enter_user_frame@@Base+0x58>
   14928:	mov	r3, #7
   1492c:	str	r3, [sp]
   14930:	ldr	r7, [r0, #48]	; 0x30
   14934:	mov	r3, #0
   14938:	add	r1, r0, #108	; 0x6c
   1493c:	ldr	r0, [r0, #40]	; 0x28
   14940:	blx	r7
   14944:	cmp	r0, #0
   14948:	bne	14994 <flatcc_builder_enter_user_frame@@Base+0xa0>
   1494c:	ldr	r7, [r4, #108]	; 0x6c
   14950:	adds	r0, r7, r6
   14954:	beq	14980 <flatcc_builder_enter_user_frame@@Base+0x8c>
   14958:	mov	r2, r5
   1495c:	mov	r1, #0
   14960:	bl	12484 <memset@plt>
   14964:	ldr	r3, [r4, #224]	; 0xe0
   14968:	str	r3, [r7, r6]
   1496c:	ldr	r1, [r4, #228]	; 0xe4
   14970:	add	r0, r1, #4
   14974:	str	r0, [r4, #224]	; 0xe0
   14978:	add	r5, r1, r5
   1497c:	str	r5, [r4, #228]	; 0xe4
   14980:	add	sp, sp, #12
   14984:	ldrd	r4, [sp]
   14988:	ldrd	r6, [sp, #8]
   1498c:	add	sp, sp, #16
   14990:	pop	{pc}		; (ldr pc, [sp], #4)
   14994:	ldr	r3, [pc, #20]	; 149b0 <flatcc_builder_enter_user_frame@@Base+0xbc>
   14998:	mov	r2, #308	; 0x134
   1499c:	movw	r1, #57588	; 0xe0f4
   149a0:	movt	r1, #1
   149a4:	movw	r0, #57672	; 0xe148
   149a8:	movt	r0, #1
   149ac:	bl	124b4 <__assert_fail@plt>
   149b0:	andeq	sp, r1, r0, asr #23

000149b4 <flatcc_builder_exit_user_frame@@Base>:
   149b4:	ldr	r3, [r0, #224]	; 0xe0
   149b8:	cmp	r3, #0
   149bc:	beq	149e0 <flatcc_builder_exit_user_frame@@Base+0x2c>
   149c0:	ldr	r2, [r0, #108]	; 0x6c
   149c4:	add	r2, r2, r3
   149c8:	sub	r3, r3, #4
   149cc:	str	r3, [r0, #228]	; 0xe4
   149d0:	ldr	r3, [r2, #-4]
   149d4:	str	r3, [r0, #224]	; 0xe0
   149d8:	mov	r0, r3
   149dc:	bx	lr
   149e0:	str	r4, [sp, #-8]!
   149e4:	str	lr, [sp, #4]
   149e8:	ldr	r3, [pc, #20]	; 14a04 <flatcc_builder_exit_user_frame@@Base+0x50>
   149ec:	movw	r2, #542	; 0x21e
   149f0:	movw	r1, #57588	; 0xe0f4
   149f4:	movt	r1, #1
   149f8:	movw	r0, #57712	; 0xe170
   149fc:	movt	r0, #1
   14a00:	bl	124b4 <__assert_fail@plt>
   14a04:	andeq	sp, r1, r8, lsl ip

00014a08 <flatcc_builder_exit_user_frame_at@@Base>:
   14a08:	str	r4, [sp, #-8]!
   14a0c:	str	lr, [sp, #4]
   14a10:	ldr	r3, [r0, #224]	; 0xe0
   14a14:	cmp	r3, r1
   14a18:	bcc	14a30 <flatcc_builder_exit_user_frame_at@@Base+0x28>
   14a1c:	str	r1, [r0, #224]	; 0xe0
   14a20:	bl	149b4 <flatcc_builder_exit_user_frame@@Base>
   14a24:	ldr	r4, [sp]
   14a28:	add	sp, sp, #4
   14a2c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a30:	ldr	r3, [pc, #20]	; 14a4c <flatcc_builder_exit_user_frame_at@@Base+0x44>
   14a34:	movw	r2, #551	; 0x227
   14a38:	movw	r1, #57588	; 0xe0f4
   14a3c:	movt	r1, #1
   14a40:	movw	r0, #57740	; 0xe18c
   14a44:	movt	r0, #1
   14a48:	bl	124b4 <__assert_fail@plt>
   14a4c:	andeq	sp, r1, r8, lsr ip

00014a50 <flatcc_builder_get_current_user_frame@@Base>:
   14a50:	ldr	r0, [r0, #224]	; 0xe0
   14a54:	bx	lr

00014a58 <flatcc_builder_get_user_frame_ptr@@Base>:
   14a58:	ldr	r0, [r0, #108]	; 0x6c
   14a5c:	add	r0, r0, r1
   14a60:	bx	lr

00014a64 <flatcc_builder_embed_buffer@@Base>:
   14a64:	strd	r4, [sp, #-16]!
   14a68:	str	r6, [sp, #8]
   14a6c:	str	lr, [sp, #12]
   14a70:	sub	sp, sp, #88	; 0x58
   14a74:	mov	r4, r0
   14a78:	mov	r6, r2
   14a7c:	mov	r5, r3
   14a80:	ldr	r3, [r0, #152]	; 0x98
   14a84:	adds	r3, r3, #0
   14a88:	movne	r3, #1
   14a8c:	mov	r2, r1
   14a90:	add	r1, sp, #104	; 0x68
   14a94:	bl	14048 <flatcc_builder_default_alloc@@Base+0x128>
   14a98:	cmp	r0, #0
   14a9c:	bne	14bf8 <flatcc_builder_embed_buffer@@Base+0x194>
   14aa0:	ldr	r3, [sp, #108]	; 0x6c
   14aa4:	and	r3, r3, #2
   14aa8:	cmp	r3, #0
   14aac:	movne	r2, #4
   14ab0:	moveq	r2, #0
   14ab4:	ldr	r1, [r4, #136]	; 0x88
   14ab8:	sub	r3, r1, r5
   14abc:	sub	r2, r3, r2
   14ac0:	ldrh	r3, [sp, #104]	; 0x68
   14ac4:	sub	r3, r3, #1
   14ac8:	and	r3, r3, r2
   14acc:	add	r2, r5, r3
   14ad0:	str	r2, [sp, #84]	; 0x54
   14ad4:	mov	r2, #0
   14ad8:	str	r2, [sp, #12]
   14adc:	str	r2, [sp, #16]
   14ae0:	ldr	r2, [r4, #152]	; 0x98
   14ae4:	cmp	r2, #0
   14ae8:	beq	14b08 <flatcc_builder_embed_buffer@@Base+0xa4>
   14aec:	mov	r2, #4
   14af0:	str	r2, [sp, #12]
   14af4:	add	r0, sp, #84	; 0x54
   14af8:	str	r0, [sp, #20]
   14afc:	str	r2, [sp, #24]
   14b00:	mov	r2, #1
   14b04:	str	r2, [sp, #16]
   14b08:	cmp	r5, #0
   14b0c:	beq	14b38 <flatcc_builder_embed_buffer@@Base+0xd4>
   14b10:	ldr	r2, [sp, #12]
   14b14:	add	r2, r2, r5
   14b18:	str	r2, [sp, #12]
   14b1c:	ldr	r2, [sp, #16]
   14b20:	add	r2, r2, #1
   14b24:	add	r0, sp, #88	; 0x58
   14b28:	add	r0, r0, r2, lsl #3
   14b2c:	str	r6, [r0, #-76]	; 0xffffffb4
   14b30:	str	r5, [r0, #-72]	; 0xffffffb8
   14b34:	str	r2, [sp, #16]
   14b38:	cmp	r3, #0
   14b3c:	beq	14b70 <flatcc_builder_embed_buffer@@Base+0x10c>
   14b40:	ldr	r2, [sp, #12]
   14b44:	add	r2, r2, r3
   14b48:	str	r2, [sp, #12]
   14b4c:	ldr	r2, [sp, #16]
   14b50:	add	r2, r2, #1
   14b54:	add	r0, sp, #88	; 0x58
   14b58:	add	ip, r0, r2, lsl #3
   14b5c:	movw	r0, #55716	; 0xd9a4
   14b60:	movt	r0, #1
   14b64:	str	r0, [ip, #-76]	; 0xffffffb4
   14b68:	str	r3, [ip, #-72]	; 0xffffffb8
   14b6c:	str	r2, [sp, #16]
   14b70:	ldr	r3, [sp, #12]
   14b74:	sub	r5, r1, r3
   14b78:	cmp	r1, r5
   14b7c:	ble	14bc0 <flatcc_builder_embed_buffer@@Base+0x15c>
   14b80:	str	r3, [sp]
   14b84:	ldr	r6, [r4, #44]	; 0x2c
   14b88:	mov	r3, r5
   14b8c:	ldr	r2, [sp, #16]
   14b90:	add	r1, sp, #20
   14b94:	ldr	r0, [r4, #36]	; 0x24
   14b98:	blx	r6
   14b9c:	cmp	r0, #0
   14ba0:	streq	r5, [r4, #136]	; 0x88
   14ba4:	bne	14bdc <flatcc_builder_embed_buffer@@Base+0x178>
   14ba8:	mov	r0, r5
   14bac:	add	sp, sp, #88	; 0x58
   14bb0:	ldrd	r4, [sp]
   14bb4:	ldr	r6, [sp, #8]
   14bb8:	add	sp, sp, #12
   14bbc:	pop	{pc}		; (ldr pc, [sp], #4)
   14bc0:	ldr	r3, [pc, #56]	; 14c00 <flatcc_builder_embed_buffer@@Base+0x19c>
   14bc4:	movw	r2, #647	; 0x287
   14bc8:	movw	r1, #57588	; 0xe0f4
   14bcc:	movt	r1, #1
   14bd0:	movw	r0, #57672	; 0xe148
   14bd4:	movt	r0, #1
   14bd8:	bl	124b4 <__assert_fail@plt>
   14bdc:	ldr	r3, [pc, #28]	; 14c00 <flatcc_builder_embed_buffer@@Base+0x19c>
   14be0:	movw	r2, #651	; 0x28b
   14be4:	movw	r1, #57588	; 0xe0f4
   14be8:	movt	r1, #1
   14bec:	movw	r0, #57672	; 0xe148
   14bf0:	movt	r0, #1
   14bf4:	bl	124b4 <__assert_fail@plt>
   14bf8:	mov	r5, #0
   14bfc:	b	14ba8 <flatcc_builder_embed_buffer@@Base+0x144>
   14c00:	strdeq	sp, [r1], -r0

00014c04 <flatcc_builder_create_buffer@@Base>:
   14c04:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14c08:	strd	r6, [sp, #8]
   14c0c:	strd	r8, [sp, #16]
   14c10:	str	lr, [sp, #24]
   14c14:	sub	sp, sp, #100	; 0x64
   14c18:	mov	r5, r0
   14c1c:	mov	r8, r1
   14c20:	mov	r4, r3
   14c24:	ldr	r7, [sp, #132]	; 0x84
   14c28:	mov	r3, #0
   14c2c:	str	r3, [sp, #12]
   14c30:	and	r6, r7, #1
   14c34:	mov	r3, r6
   14c38:	add	r1, sp, #128	; 0x80
   14c3c:	bl	14048 <flatcc_builder_default_alloc@@Base+0x128>
   14c40:	cmp	r0, #0
   14c44:	bne	14e40 <flatcc_builder_create_buffer@@Base+0x23c>
   14c48:	ldrh	r2, [sp, #128]	; 0x80
   14c4c:	ldrh	r3, [r5, #128]	; 0x80
   14c50:	cmp	r3, r2
   14c54:	strhcc	r2, [r5, #128]	; 0x80
   14c58:	cmp	r8, #0
   14c5c:	ldrne	r3, [r8]
   14c60:	strne	r3, [sp, #12]
   14c64:	ldr	r1, [sp, #12]
   14c68:	cmp	r1, #0
   14c6c:	movne	r1, #4
   14c70:	and	r3, r7, #2
   14c74:	cmp	r3, #0
   14c78:	movne	ip, #4
   14c7c:	moveq	ip, #0
   14c80:	ldr	r0, [r5, #136]	; 0x88
   14c84:	sub	r3, r0, #4
   14c88:	sub	r3, r3, r1
   14c8c:	sub	r3, r3, ip
   14c90:	sub	r2, r2, #1
   14c94:	and	r3, r3, r2
   14c98:	mov	r2, #0
   14c9c:	str	r2, [sp, #16]
   14ca0:	str	r2, [sp, #20]
   14ca4:	ands	r7, r7, #3
   14ca8:	beq	14cc8 <flatcc_builder_create_buffer@@Base+0xc4>
   14cac:	mov	r2, #4
   14cb0:	str	r2, [sp, #16]
   14cb4:	add	ip, sp, #88	; 0x58
   14cb8:	str	ip, [sp, #24]
   14cbc:	str	r2, [sp, #28]
   14cc0:	mov	r2, #1
   14cc4:	str	r2, [sp, #20]
   14cc8:	ldr	ip, [sp, #16]
   14ccc:	add	ip, ip, #4
   14cd0:	str	ip, [sp, #16]
   14cd4:	ldr	lr, [sp, #20]
   14cd8:	add	r2, lr, #1
   14cdc:	add	r8, sp, #96	; 0x60
   14ce0:	add	r8, r8, r2, lsl #3
   14ce4:	add	r9, sp, #92	; 0x5c
   14ce8:	str	r9, [r8, #-80]	; 0xffffffb0
   14cec:	mov	r9, #4
   14cf0:	str	r9, [r8, #-76]	; 0xffffffb4
   14cf4:	str	r2, [sp, #20]
   14cf8:	cmp	r1, #0
   14cfc:	beq	14d28 <flatcc_builder_create_buffer@@Base+0x124>
   14d00:	add	ip, ip, r1
   14d04:	str	ip, [sp, #16]
   14d08:	add	r2, lr, #2
   14d0c:	add	ip, sp, #96	; 0x60
   14d10:	add	r2, ip, r2, lsl #3
   14d14:	add	ip, sp, #12
   14d18:	str	ip, [r2, #-80]	; 0xffffffb0
   14d1c:	str	r1, [r2, #-76]	; 0xffffffb4
   14d20:	add	lr, lr, #2
   14d24:	str	lr, [sp, #20]
   14d28:	cmp	r3, #0
   14d2c:	beq	14d60 <flatcc_builder_create_buffer@@Base+0x15c>
   14d30:	ldr	r2, [sp, #16]
   14d34:	add	r2, r2, r3
   14d38:	str	r2, [sp, #16]
   14d3c:	ldr	r2, [sp, #20]
   14d40:	add	r2, r2, #1
   14d44:	add	r1, sp, #96	; 0x60
   14d48:	add	ip, r1, r2, lsl #3
   14d4c:	movw	r1, #55716	; 0xd9a4
   14d50:	movt	r1, #1
   14d54:	str	r1, [ip, #-80]	; 0xffffffb0
   14d58:	str	r3, [ip, #-76]	; 0xffffffb4
   14d5c:	str	r2, [sp, #20]
   14d60:	ldr	r1, [sp, #16]
   14d64:	sub	r3, r0, r1
   14d68:	cmp	r7, #0
   14d6c:	movne	r2, #4
   14d70:	moveq	r2, #0
   14d74:	add	r3, r3, r2
   14d78:	cmp	r6, #0
   14d7c:	ldrne	r2, [r5, #144]	; 0x90
   14d80:	ldreq	r2, [r5, #140]	; 0x8c
   14d84:	sub	r2, r2, r3
   14d88:	str	r2, [sp, #88]	; 0x58
   14d8c:	sub	r4, r4, r3
   14d90:	str	r4, [sp, #92]	; 0x5c
   14d94:	sub	r4, r0, r1
   14d98:	cmp	r0, r4
   14d9c:	ble	14dec <flatcc_builder_create_buffer@@Base+0x1e8>
   14da0:	str	r1, [sp]
   14da4:	ldr	r6, [r5, #44]	; 0x2c
   14da8:	mov	r3, r4
   14dac:	ldr	r2, [sp, #20]
   14db0:	add	r1, sp, #24
   14db4:	ldr	r0, [r5, #36]	; 0x24
   14db8:	blx	r6
   14dbc:	cmp	r0, #0
   14dc0:	bne	14e08 <flatcc_builder_create_buffer@@Base+0x204>
   14dc4:	str	r4, [r5, #136]	; 0x88
   14dc8:	cmp	r4, #0
   14dcc:	beq	14e24 <flatcc_builder_create_buffer@@Base+0x220>
   14dd0:	mov	r0, r4
   14dd4:	add	sp, sp, #100	; 0x64
   14dd8:	ldrd	r4, [sp]
   14ddc:	ldrd	r6, [sp, #8]
   14de0:	ldrd	r8, [sp, #16]
   14de4:	add	sp, sp, #24
   14de8:	pop	{pc}		; (ldr pc, [sp], #4)
   14dec:	ldr	r3, [pc, #84]	; 14e48 <flatcc_builder_create_buffer@@Base+0x244>
   14df0:	movw	r2, #647	; 0x287
   14df4:	movw	r1, #57588	; 0xe0f4
   14df8:	movt	r1, #1
   14dfc:	movw	r0, #57672	; 0xe148
   14e00:	movt	r0, #1
   14e04:	bl	124b4 <__assert_fail@plt>
   14e08:	ldr	r3, [pc, #56]	; 14e48 <flatcc_builder_create_buffer@@Base+0x244>
   14e0c:	movw	r2, #651	; 0x28b
   14e10:	movw	r1, #57588	; 0xe0f4
   14e14:	movt	r1, #1
   14e18:	movw	r0, #57672	; 0xe148
   14e1c:	movt	r0, #1
   14e20:	bl	124b4 <__assert_fail@plt>
   14e24:	ldr	r3, [pc, #32]	; 14e4c <flatcc_builder_create_buffer@@Base+0x248>
   14e28:	mov	r2, #772	; 0x304
   14e2c:	movw	r1, #57588	; 0xe0f4
   14e30:	movt	r1, #1
   14e34:	movw	r0, #57672	; 0xe148
   14e38:	movt	r0, #1
   14e3c:	bl	124b4 <__assert_fail@plt>
   14e40:	mov	r4, #0
   14e44:	b	14dd0 <flatcc_builder_create_buffer@@Base+0x1cc>
   14e48:	strdeq	sp, [r1], -r0
   14e4c:	andeq	sp, r1, ip, asr ip

00014e50 <flatcc_builder_create_struct@@Base>:
   14e50:	strd	r4, [sp, #-16]!
   14e54:	str	r6, [sp, #8]
   14e58:	str	lr, [sp, #12]
   14e5c:	sub	sp, sp, #80	; 0x50
   14e60:	cmp	r3, #0
   14e64:	beq	14ebc <flatcc_builder_create_struct@@Base+0x6c>
   14e68:	mov	r4, r0
   14e6c:	ldrh	r0, [r0, #128]	; 0x80
   14e70:	cmp	r0, r3
   14e74:	strhcc	r3, [r4, #128]	; 0x80
   14e78:	ldr	ip, [r4, #136]	; 0x88
   14e7c:	sub	r0, ip, r2
   14e80:	sub	r3, r3, #1
   14e84:	and	r3, r3, r0
   14e88:	mov	r0, #0
   14e8c:	str	r0, [sp, #8]
   14e90:	str	r0, [sp, #12]
   14e94:	cmp	r2, r0
   14e98:	beq	14f10 <flatcc_builder_create_struct@@Base+0xc0>
   14e9c:	str	r2, [sp, #8]
   14ea0:	str	r1, [sp, #16]
   14ea4:	str	r2, [sp, #20]
   14ea8:	mov	r2, #1
   14eac:	str	r2, [sp, #12]
   14eb0:	cmp	r3, r0
   14eb4:	beq	14f48 <flatcc_builder_create_struct@@Base+0xf8>
   14eb8:	b	14f18 <flatcc_builder_create_struct@@Base+0xc8>
   14ebc:	ldr	r3, [pc, #212]	; 14f98 <flatcc_builder_create_struct@@Base+0x148>
   14ec0:	movw	r2, #783	; 0x30f
   14ec4:	movw	r1, #57588	; 0xe0f4
   14ec8:	movt	r1, #1
   14ecc:	movw	r0, #57772	; 0xe1ac
   14ed0:	movt	r0, #1
   14ed4:	bl	124b4 <__assert_fail@plt>
   14ed8:	ldr	r3, [pc, #188]	; 14f9c <flatcc_builder_create_struct@@Base+0x14c>
   14edc:	movw	r2, #647	; 0x287
   14ee0:	movw	r1, #57588	; 0xe0f4
   14ee4:	movt	r1, #1
   14ee8:	movw	r0, #57672	; 0xe148
   14eec:	movt	r0, #1
   14ef0:	bl	124b4 <__assert_fail@plt>
   14ef4:	ldr	r3, [pc, #160]	; 14f9c <flatcc_builder_create_struct@@Base+0x14c>
   14ef8:	movw	r2, #651	; 0x28b
   14efc:	movw	r1, #57588	; 0xe0f4
   14f00:	movt	r1, #1
   14f04:	movw	r0, #57672	; 0xe148
   14f08:	movt	r0, #1
   14f0c:	bl	124b4 <__assert_fail@plt>
   14f10:	cmp	r3, #0
   14f14:	beq	14ed8 <flatcc_builder_create_struct@@Base+0x88>
   14f18:	ldr	r2, [sp, #8]
   14f1c:	add	r2, r2, r3
   14f20:	str	r2, [sp, #8]
   14f24:	ldr	r2, [sp, #12]
   14f28:	add	r2, r2, #1
   14f2c:	add	r1, sp, #80	; 0x50
   14f30:	add	r0, r1, r2, lsl #3
   14f34:	movw	r1, #55716	; 0xd9a4
   14f38:	movt	r1, #1
   14f3c:	str	r1, [r0, #-72]	; 0xffffffb8
   14f40:	str	r3, [r0, #-68]	; 0xffffffbc
   14f44:	str	r2, [sp, #12]
   14f48:	ldr	r3, [sp, #8]
   14f4c:	sub	r5, ip, r3
   14f50:	cmp	ip, r5
   14f54:	ble	14ed8 <flatcc_builder_create_struct@@Base+0x88>
   14f58:	str	r3, [sp]
   14f5c:	ldr	r6, [r4, #44]	; 0x2c
   14f60:	mov	r3, r5
   14f64:	ldr	r2, [sp, #12]
   14f68:	add	r1, sp, #16
   14f6c:	ldr	r0, [r4, #36]	; 0x24
   14f70:	blx	r6
   14f74:	cmp	r0, #0
   14f78:	bne	14ef4 <flatcc_builder_create_struct@@Base+0xa4>
   14f7c:	str	r5, [r4, #136]	; 0x88
   14f80:	mov	r0, r5
   14f84:	add	sp, sp, #80	; 0x50
   14f88:	ldrd	r4, [sp]
   14f8c:	ldr	r6, [sp, #8]
   14f90:	add	sp, sp, #12
   14f94:	pop	{pc}		; (ldr pc, [sp], #4)
   14f98:	andeq	sp, r1, ip, ror ip
   14f9c:	strdeq	sp, [r1], -r0

00014fa0 <flatcc_builder_start_buffer@@Base>:
   14fa0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14fa4:	strd	r6, [sp, #8]
   14fa8:	str	r8, [sp, #16]
   14fac:	str	lr, [sp, #20]
   14fb0:	mov	r4, r0
   14fb4:	mov	r5, r1
   14fb8:	mov	r7, r2
   14fbc:	mov	r6, r3
   14fc0:	ldrh	r1, [r0, #128]	; 0x80
   14fc4:	bl	1416c <flatcc_builder_default_alloc@@Base+0x24c>
   14fc8:	cmp	r0, #0
   14fcc:	bne	1506c <flatcc_builder_start_buffer@@Base+0xcc>
   14fd0:	mov	r3, #1
   14fd4:	strh	r3, [r4, #128]	; 0x80
   14fd8:	ldr	r3, [r4, #32]
   14fdc:	ldrh	r2, [r4, #132]	; 0x84
   14fe0:	strh	r2, [r3, #34]	; 0x22
   14fe4:	strh	r7, [r4, #132]	; 0x84
   14fe8:	ldr	r3, [r4, #32]
   14fec:	ldrh	r2, [r4, #164]	; 0xa4
   14ff0:	strh	r2, [r3, #32]
   14ff4:	strh	r6, [r4, #164]	; 0xa4
   14ff8:	ldr	r3, [r4, #32]
   14ffc:	ldr	r2, [r4, #144]	; 0x90
   15000:	str	r2, [r3, #20]
   15004:	ldr	r3, [r4, #32]
   15008:	ldr	r2, [r4, #152]	; 0x98
   1500c:	str	r2, [r3, #28]
   15010:	ldr	r3, [r4, #136]	; 0x88
   15014:	str	r3, [r4, #144]	; 0x90
   15018:	ldr	r3, [r4, #148]	; 0x94
   1501c:	add	r2, r3, #1
   15020:	str	r2, [r4, #148]	; 0x94
   15024:	str	r3, [r4, #152]	; 0x98
   15028:	ldr	r3, [r4, #32]
   1502c:	ldr	r2, [r4, #168]	; 0xa8
   15030:	str	r2, [r3, #16]
   15034:	movw	r3, #55716	; 0xd9a4
   15038:	movt	r3, #1
   1503c:	cmp	r5, #0
   15040:	moveq	r5, r3
   15044:	ldr	r3, [r5]
   15048:	str	r3, [r4, #168]	; 0xa8
   1504c:	ldr	r3, [r4, #32]
   15050:	mov	r2, #1
   15054:	strh	r2, [r3, #14]
   15058:	ldrd	r4, [sp]
   1505c:	ldrd	r6, [sp, #8]
   15060:	ldr	r8, [sp, #16]
   15064:	add	sp, sp, #20
   15068:	pop	{pc}		; (ldr pc, [sp], #4)
   1506c:	mvn	r0, #0
   15070:	b	15058 <flatcc_builder_start_buffer@@Base+0xb8>

00015074 <flatcc_builder_end_buffer@@Base>:
   15074:	strd	r4, [sp, #-12]!
   15078:	str	lr, [sp, #8]
   1507c:	sub	sp, sp, #12
   15080:	mov	r4, r0
   15084:	ldrh	r2, [r0, #164]	; 0xa4
   15088:	and	r2, r2, #2
   1508c:	ldr	r0, [r0, #152]	; 0x98
   15090:	cmp	r0, #0
   15094:	moveq	r0, r2
   15098:	orrne	r0, r2, #1
   1509c:	ldr	r2, [r4, #32]
   150a0:	ldrh	r2, [r2, #14]
   150a4:	cmp	r2, #1
   150a8:	bne	150f4 <flatcc_builder_end_buffer@@Base+0x80>
   150ac:	ldrh	r2, [r4, #132]	; 0x84
   150b0:	ldrh	r3, [r4, #128]	; 0x80
   150b4:	cmp	r3, r2
   150b8:	strhcc	r2, [r4, #128]	; 0x80
   150bc:	str	r0, [sp, #4]
   150c0:	ldrh	r3, [r4, #128]	; 0x80
   150c4:	str	r3, [sp]
   150c8:	mov	r3, r1
   150cc:	add	r1, r4, #168	; 0xa8
   150d0:	mov	r0, r4
   150d4:	bl	14c04 <flatcc_builder_create_buffer@@Base>
   150d8:	subs	r5, r0, #0
   150dc:	bne	15110 <flatcc_builder_end_buffer@@Base+0x9c>
   150e0:	mov	r0, r5
   150e4:	add	sp, sp, #12
   150e8:	ldrd	r4, [sp]
   150ec:	add	sp, sp, #8
   150f0:	pop	{pc}		; (ldr pc, [sp], #4)
   150f4:	ldr	r3, [pc, #184]	; 151b4 <flatcc_builder_end_buffer@@Base+0x140>
   150f8:	movw	r2, #838	; 0x346
   150fc:	movw	r1, #57588	; 0xe0f4
   15100:	movt	r1, #1
   15104:	movw	r0, #57784	; 0xe1b8
   15108:	movt	r0, #1
   1510c:	bl	124b4 <__assert_fail@plt>
   15110:	ldr	r3, [r4, #32]
   15114:	ldr	r2, [r3, #20]
   15118:	str	r2, [r4, #144]	; 0x90
   1511c:	ldr	r2, [r3, #28]
   15120:	str	r2, [r4, #152]	; 0x98
   15124:	ldr	r2, [r3, #16]
   15128:	str	r2, [r4, #168]	; 0xa8
   1512c:	ldrh	r3, [r3, #32]
   15130:	strh	r3, [r4, #164]	; 0xa4
   15134:	ldr	r2, [r4, #20]
   15138:	mov	r1, #0
   1513c:	ldr	r0, [r4, #16]
   15140:	bl	12484 <memset@plt>
   15144:	ldr	r2, [r4, #32]
   15148:	ldr	r3, [r2, #8]
   1514c:	str	r3, [r4, #20]
   15150:	ldr	r0, [r2]
   15154:	str	r0, [r4, #28]
   15158:	ldr	r1, [r2, #4]
   1515c:	ldr	r3, [r4, #60]	; 0x3c
   15160:	add	r3, r3, r0
   15164:	str	r3, [r4, #16]
   15168:	ldr	r3, [r4, #64]	; 0x40
   1516c:	sub	r3, r3, r0
   15170:	cmp	r3, r1
   15174:	movcs	r3, r1
   15178:	str	r3, [r4, #24]
   1517c:	str	r1, [r2, #4]
   15180:	ldrh	r3, [r4, #130]	; 0x82
   15184:	ldrh	r2, [r4, #128]	; 0x80
   15188:	cmp	r2, r3
   1518c:	strhcc	r3, [r4, #128]	; 0x80
   15190:	ldr	r3, [r4, #32]
   15194:	ldrh	r2, [r3, #12]
   15198:	strh	r2, [r4, #130]	; 0x82
   1519c:	sub	r3, r3, #36	; 0x24
   151a0:	str	r3, [r4, #32]
   151a4:	ldr	r3, [r4, #156]	; 0x9c
   151a8:	sub	r3, r3, #1
   151ac:	str	r3, [r4, #156]	; 0x9c
   151b0:	b	150e0 <flatcc_builder_end_buffer@@Base+0x6c>
   151b4:	muleq	r1, ip, ip

000151b8 <flatcc_builder_start_struct@@Base>:
   151b8:	strd	r4, [sp, #-16]!
   151bc:	str	r6, [sp, #8]
   151c0:	str	lr, [sp, #12]
   151c4:	mov	r4, r0
   151c8:	mov	r5, r1
   151cc:	mov	r1, r2
   151d0:	bl	1416c <flatcc_builder_default_alloc@@Base+0x24c>
   151d4:	cmp	r0, #0
   151d8:	movne	r0, #0
   151dc:	bne	1523c <flatcc_builder_start_struct@@Base+0x84>
   151e0:	ldr	r3, [r4, #32]
   151e4:	mov	r2, #2
   151e8:	strh	r2, [r3, #14]
   151ec:	ldr	r1, [r4, #28]
   151f0:	ldr	r2, [r4, #60]	; 0x3c
   151f4:	add	r2, r2, r1
   151f8:	str	r2, [r4, #16]
   151fc:	ldr	r3, [r4, #64]	; 0x40
   15200:	sub	r3, r3, r1
   15204:	cmn	r3, #4
   15208:	mvnhi	r3, #3
   1520c:	str	r3, [r4, #24]
   15210:	ldr	r3, [r4, #32]
   15214:	mvn	r2, #3
   15218:	str	r2, [r3, #4]
   1521c:	ldr	r6, [r4, #20]
   15220:	add	r5, r5, r6
   15224:	str	r5, [r4, #20]
   15228:	ldr	r3, [r4, #24]
   1522c:	cmp	r5, r3
   15230:	bcs	1524c <flatcc_builder_start_struct@@Base+0x94>
   15234:	ldr	r0, [r4, #16]
   15238:	add	r0, r0, r6
   1523c:	ldrd	r4, [sp]
   15240:	ldr	r6, [sp, #8]
   15244:	add	sp, sp, #12
   15248:	pop	{pc}		; (ldr pc, [sp], #4)
   1524c:	add	r1, r5, #1
   15250:	mov	r0, r4
   15254:	bl	13e98 <main@@Base+0x48>
   15258:	cmp	r0, #0
   1525c:	movne	r0, #0
   15260:	beq	15234 <flatcc_builder_start_struct@@Base+0x7c>
   15264:	b	1523c <flatcc_builder_start_struct@@Base+0x84>

00015268 <flatcc_builder_struct_edit@@Base>:
   15268:	ldr	r0, [r0, #16]
   1526c:	bx	lr

00015270 <flatcc_builder_end_struct@@Base>:
   15270:	strd	r4, [sp, #-16]!
   15274:	str	r6, [sp, #8]
   15278:	str	lr, [sp, #12]
   1527c:	ldr	r3, [r0, #32]
   15280:	ldrh	r3, [r3, #14]
   15284:	cmp	r3, #2
   15288:	bne	152bc <flatcc_builder_end_struct@@Base+0x4c>
   1528c:	mov	r4, r0
   15290:	ldrh	r3, [r0, #130]	; 0x82
   15294:	ldr	r2, [r0, #20]
   15298:	ldr	r1, [r0, #16]
   1529c:	bl	14e50 <flatcc_builder_create_struct@@Base>
   152a0:	subs	r5, r0, #0
   152a4:	bne	152d8 <flatcc_builder_end_struct@@Base+0x68>
   152a8:	mov	r0, r5
   152ac:	ldrd	r4, [sp]
   152b0:	ldr	r6, [sp, #8]
   152b4:	add	sp, sp, #12
   152b8:	pop	{pc}		; (ldr pc, [sp], #4)
   152bc:	ldr	r3, [pc, #148]	; 15358 <flatcc_builder_end_struct@@Base+0xe8>
   152c0:	mov	r2, #872	; 0x368
   152c4:	movw	r1, #57588	; 0xe0f4
   152c8:	movt	r1, #1
   152cc:	movw	r0, #57828	; 0xe1e4
   152d0:	movt	r0, #1
   152d4:	bl	124b4 <__assert_fail@plt>
   152d8:	ldr	r2, [r4, #20]
   152dc:	mov	r1, #0
   152e0:	ldr	r0, [r4, #16]
   152e4:	bl	12484 <memset@plt>
   152e8:	ldr	r2, [r4, #32]
   152ec:	ldr	r3, [r2, #8]
   152f0:	str	r3, [r4, #20]
   152f4:	ldr	r0, [r2]
   152f8:	str	r0, [r4, #28]
   152fc:	ldr	r1, [r2, #4]
   15300:	ldr	r3, [r4, #60]	; 0x3c
   15304:	add	r3, r3, r0
   15308:	str	r3, [r4, #16]
   1530c:	ldr	r3, [r4, #64]	; 0x40
   15310:	sub	r3, r3, r0
   15314:	cmp	r3, r1
   15318:	movcs	r3, r1
   1531c:	str	r3, [r4, #24]
   15320:	str	r1, [r2, #4]
   15324:	ldrh	r3, [r4, #130]	; 0x82
   15328:	ldrh	r2, [r4, #128]	; 0x80
   1532c:	cmp	r2, r3
   15330:	strhcc	r3, [r4, #128]	; 0x80
   15334:	ldr	r3, [r4, #32]
   15338:	ldrh	r2, [r3, #12]
   1533c:	strh	r2, [r4, #130]	; 0x82
   15340:	sub	r3, r3, #36	; 0x24
   15344:	str	r3, [r4, #32]
   15348:	ldr	r3, [r4, #156]	; 0x9c
   1534c:	sub	r3, r3, #1
   15350:	str	r3, [r4, #156]	; 0x9c
   15354:	b	152a8 <flatcc_builder_end_struct@@Base+0x38>
   15358:			; <UNDEFINED> instruction: 0x0001dcb8

0001535c <flatcc_builder_extend_vector@@Base>:
   1535c:	strd	r4, [sp, #-16]!
   15360:	str	r6, [sp, #8]
   15364:	str	lr, [sp, #12]
   15368:	mov	r4, r0
   1536c:	ldr	r2, [r0, #32]
   15370:	ldr	r3, [r2, #20]
   15374:	add	r0, r1, r3
   15378:	ldr	ip, [r2, #24]
   1537c:	cmp	r3, r0
   15380:	movls	r3, #0
   15384:	movhi	r3, #1
   15388:	cmp	ip, r0
   1538c:	orrcc	r3, r3, #1
   15390:	cmp	r3, #0
   15394:	bne	153d4 <flatcc_builder_extend_vector@@Base+0x78>
   15398:	str	r0, [r2, #20]
   1539c:	ldr	r5, [r4, #20]
   153a0:	ldr	r3, [r4, #32]
   153a4:	ldr	r3, [r3, #16]
   153a8:	mla	r1, r3, r1, r5
   153ac:	str	r1, [r4, #20]
   153b0:	ldr	r3, [r4, #24]
   153b4:	cmp	r1, r3
   153b8:	bcs	153f0 <flatcc_builder_extend_vector@@Base+0x94>
   153bc:	ldr	r0, [r4, #16]
   153c0:	add	r0, r0, r5
   153c4:	ldrd	r4, [sp]
   153c8:	ldr	r6, [sp, #8]
   153cc:	add	sp, sp, #12
   153d0:	pop	{pc}		; (ldr pc, [sp], #4)
   153d4:	ldr	r3, [pc, #52]	; 15410 <flatcc_builder_extend_vector@@Base+0xb4>
   153d8:	mov	r2, #892	; 0x37c
   153dc:	movw	r1, #57588	; 0xe0f4
   153e0:	movt	r1, #1
   153e4:	movw	r0, #57872	; 0xe210
   153e8:	movt	r0, #1
   153ec:	bl	124b4 <__assert_fail@plt>
   153f0:	mvn	r2, #3
   153f4:	add	r1, r1, #1
   153f8:	mov	r0, r4
   153fc:	bl	13e98 <main@@Base+0x48>
   15400:	cmp	r0, #0
   15404:	movne	r0, #0
   15408:	beq	153bc <flatcc_builder_extend_vector@@Base+0x60>
   1540c:	b	153c4 <flatcc_builder_extend_vector@@Base+0x68>
   15410:	ldrdeq	sp, [r1], -r4

00015414 <flatcc_builder_vector_push@@Base>:
   15414:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15418:	strd	r6, [sp, #8]
   1541c:	str	r8, [sp, #16]
   15420:	str	lr, [sp, #20]
   15424:	ldr	r3, [r0, #32]
   15428:	ldrh	r2, [r3, #14]
   1542c:	cmp	r2, #4
   15430:	bne	154a8 <flatcc_builder_vector_push@@Base+0x94>
   15434:	mov	r4, r0
   15438:	mov	r6, r1
   1543c:	ldr	r2, [r3, #20]
   15440:	ldr	r1, [r3, #24]
   15444:	cmp	r2, r1
   15448:	bhi	154c4 <flatcc_builder_vector_push@@Base+0xb0>
   1544c:	add	r2, r2, #1
   15450:	str	r2, [r3, #20]
   15454:	ldr	r3, [r0, #32]
   15458:	ldr	r7, [r3, #16]
   1545c:	ldr	r5, [r0, #20]
   15460:	add	r1, r7, r5
   15464:	str	r1, [r0, #20]
   15468:	ldr	r3, [r0, #24]
   1546c:	cmp	r1, r3
   15470:	bcs	154e0 <flatcc_builder_vector_push@@Base+0xcc>
   15474:	ldr	r4, [r4, #16]
   15478:	adds	r4, r4, r5
   1547c:	beq	15490 <flatcc_builder_vector_push@@Base+0x7c>
   15480:	mov	r2, r7
   15484:	mov	r1, r6
   15488:	mov	r0, r4
   1548c:	bl	1240c <memcpy@plt>
   15490:	mov	r0, r4
   15494:	ldrd	r4, [sp]
   15498:	ldrd	r6, [sp, #8]
   1549c:	ldr	r8, [sp, #16]
   154a0:	add	sp, sp, #20
   154a4:	pop	{pc}		; (ldr pc, [sp], #4)
   154a8:	ldr	r3, [pc, #76]	; 154fc <flatcc_builder_vector_push@@Base+0xe8>
   154ac:	movw	r2, #907	; 0x38b
   154b0:	movw	r1, #57588	; 0xe0f4
   154b4:	movt	r1, #1
   154b8:	movw	r0, #57900	; 0xe22c
   154bc:	movt	r0, #1
   154c0:	bl	124b4 <__assert_fail@plt>
   154c4:	ldr	r3, [pc, #48]	; 154fc <flatcc_builder_vector_push@@Base+0xe8>
   154c8:	mov	r2, #908	; 0x38c
   154cc:	movw	r1, #57588	; 0xe0f4
   154d0:	movt	r1, #1
   154d4:	movw	r0, #57944	; 0xe258
   154d8:	movt	r0, #1
   154dc:	bl	124b4 <__assert_fail@plt>
   154e0:	mvn	r2, #3
   154e4:	add	r1, r1, #1
   154e8:	bl	13e98 <main@@Base+0x48>
   154ec:	cmp	r0, #0
   154f0:	movne	r4, #0
   154f4:	beq	15474 <flatcc_builder_vector_push@@Base+0x60>
   154f8:	b	15490 <flatcc_builder_vector_push@@Base+0x7c>
   154fc:	andeq	sp, r1, r8, ror #25

00015500 <flatcc_builder_append_vector@@Base>:
   15500:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15504:	strd	r6, [sp, #8]
   15508:	str	r8, [sp, #16]
   1550c:	str	lr, [sp, #20]
   15510:	mov	r6, r1
   15514:	ldr	r1, [r0, #32]
   15518:	ldrh	r3, [r1, #14]
   1551c:	cmp	r3, #4
   15520:	bne	155ac <flatcc_builder_append_vector@@Base+0xac>
   15524:	mov	r4, r0
   15528:	ldr	r3, [r1, #20]
   1552c:	add	r0, r2, r3
   15530:	ldr	ip, [r1, #24]
   15534:	cmp	r3, r0
   15538:	movls	r3, #0
   1553c:	movhi	r3, #1
   15540:	cmp	ip, r0
   15544:	orrcc	r3, r3, #1
   15548:	cmp	r3, #0
   1554c:	bne	155c8 <flatcc_builder_append_vector@@Base+0xc8>
   15550:	str	r0, [r1, #20]
   15554:	ldr	r3, [r4, #32]
   15558:	ldr	r5, [r3, #16]
   1555c:	mul	r5, r5, r2
   15560:	ldr	r7, [r4, #20]
   15564:	add	r1, r5, r7
   15568:	str	r1, [r4, #20]
   1556c:	ldr	r3, [r4, #24]
   15570:	cmp	r1, r3
   15574:	bcs	155e4 <flatcc_builder_append_vector@@Base+0xe4>
   15578:	ldr	r4, [r4, #16]
   1557c:	adds	r4, r4, r7
   15580:	beq	15594 <flatcc_builder_append_vector@@Base+0x94>
   15584:	mov	r2, r5
   15588:	mov	r1, r6
   1558c:	mov	r0, r4
   15590:	bl	1240c <memcpy@plt>
   15594:	mov	r0, r4
   15598:	ldrd	r4, [sp]
   1559c:	ldrd	r6, [sp, #8]
   155a0:	ldr	r8, [sp, #16]
   155a4:	add	sp, sp, #20
   155a8:	pop	{pc}		; (ldr pc, [sp], #4)
   155ac:	ldr	r3, [pc, #80]	; 15604 <flatcc_builder_append_vector@@Base+0x104>
   155b0:	movw	r2, #915	; 0x393
   155b4:	movw	r1, #57588	; 0xe0f4
   155b8:	movt	r1, #1
   155bc:	movw	r0, #57900	; 0xe22c
   155c0:	movt	r0, #1
   155c4:	bl	124b4 <__assert_fail@plt>
   155c8:	ldr	r3, [pc, #56]	; 15608 <flatcc_builder_append_vector@@Base+0x108>
   155cc:	mov	r2, #892	; 0x37c
   155d0:	movw	r1, #57588	; 0xe0f4
   155d4:	movt	r1, #1
   155d8:	movw	r0, #57872	; 0xe210
   155dc:	movt	r0, #1
   155e0:	bl	124b4 <__assert_fail@plt>
   155e4:	mvn	r2, #3
   155e8:	add	r1, r1, #1
   155ec:	mov	r0, r4
   155f0:	bl	13e98 <main@@Base+0x48>
   155f4:	cmp	r0, #0
   155f8:	movne	r4, #0
   155fc:	beq	15578 <flatcc_builder_append_vector@@Base+0x78>
   15600:	b	15594 <flatcc_builder_append_vector@@Base+0x94>
   15604:	andeq	sp, r1, r4, lsl #26
   15608:	ldrdeq	sp, [r1], -r4

0001560c <flatcc_builder_extend_offset_vector@@Base>:
   1560c:	strd	r4, [sp, #-16]!
   15610:	str	r6, [sp, #8]
   15614:	str	lr, [sp, #12]
   15618:	mov	r4, r0
   1561c:	ldr	r2, [r0, #32]
   15620:	ldr	r3, [r2, #20]
   15624:	adds	r3, r1, r3
   15628:	movcs	ip, #1
   1562c:	movcc	ip, #0
   15630:	cmn	r3, #-1073741823	; 0xc0000001
   15634:	movls	r0, #0
   15638:	movhi	r0, #1
   1563c:	orrs	r0, ip, r0
   15640:	bne	15678 <flatcc_builder_extend_offset_vector@@Base+0x6c>
   15644:	str	r3, [r2, #20]
   15648:	ldr	r5, [r4, #20]
   1564c:	add	r1, r5, r1, lsl #2
   15650:	str	r1, [r4, #20]
   15654:	ldr	r3, [r4, #24]
   15658:	cmp	r1, r3
   1565c:	bcs	15694 <flatcc_builder_extend_offset_vector@@Base+0x88>
   15660:	ldr	r0, [r4, #16]
   15664:	add	r0, r0, r5
   15668:	ldrd	r4, [sp]
   1566c:	ldr	r6, [sp, #8]
   15670:	add	sp, sp, #12
   15674:	pop	{pc}		; (ldr pc, [sp], #4)
   15678:	ldr	r3, [pc, #52]	; 156b4 <flatcc_builder_extend_offset_vector@@Base+0xa8>
   1567c:	mov	r2, #892	; 0x37c
   15680:	movw	r1, #57588	; 0xe0f4
   15684:	movt	r1, #1
   15688:	movw	r0, #57872	; 0xe210
   1568c:	movt	r0, #1
   15690:	bl	124b4 <__assert_fail@plt>
   15694:	mvn	r2, #3
   15698:	add	r1, r1, #1
   1569c:	mov	r0, r4
   156a0:	bl	13e98 <main@@Base+0x48>
   156a4:	cmp	r0, #0
   156a8:	movne	r0, #0
   156ac:	beq	15660 <flatcc_builder_extend_offset_vector@@Base+0x54>
   156b0:	b	15668 <flatcc_builder_extend_offset_vector@@Base+0x5c>
   156b4:	ldrdeq	sp, [r1], -r4

000156b8 <flatcc_builder_offset_vector_push@@Base>:
   156b8:	strd	r4, [sp, #-16]!
   156bc:	str	r6, [sp, #8]
   156c0:	str	lr, [sp, #12]
   156c4:	ldr	r2, [r0, #32]
   156c8:	ldrh	r3, [r2, #14]
   156cc:	cmp	r3, #5
   156d0:	bne	15728 <flatcc_builder_offset_vector_push@@Base+0x70>
   156d4:	mov	r4, r0
   156d8:	mov	r6, r1
   156dc:	ldr	r3, [r2, #20]
   156e0:	cmn	r3, #-1073741823	; 0xc0000001
   156e4:	moveq	r0, #0
   156e8:	beq	15718 <flatcc_builder_offset_vector_push@@Base+0x60>
   156ec:	add	r3, r3, #1
   156f0:	str	r3, [r2, #20]
   156f4:	ldr	r5, [r4, #20]
   156f8:	add	r3, r5, #4
   156fc:	str	r3, [r4, #20]
   15700:	ldr	r2, [r4, #24]
   15704:	cmp	r3, r2
   15708:	bcs	15744 <flatcc_builder_offset_vector_push@@Base+0x8c>
   1570c:	ldr	r3, [r4, #16]
   15710:	adds	r0, r3, r5
   15714:	strne	r6, [r3, r5]
   15718:	ldrd	r4, [sp]
   1571c:	ldr	r6, [sp, #8]
   15720:	add	sp, sp, #12
   15724:	pop	{pc}		; (ldr pc, [sp], #4)
   15728:	ldr	r3, [pc, #52]	; 15764 <flatcc_builder_offset_vector_push@@Base+0xac>
   1572c:	movw	r2, #934	; 0x3a6
   15730:	movw	r1, #57588	; 0xe0f4
   15734:	movt	r1, #1
   15738:	movw	r0, #58008	; 0xe298
   1573c:	movt	r0, #1
   15740:	bl	124b4 <__assert_fail@plt>
   15744:	mvn	r2, #3
   15748:	add	r1, r5, #5
   1574c:	mov	r0, r4
   15750:	bl	13e98 <main@@Base+0x48>
   15754:	cmp	r0, #0
   15758:	movne	r0, #0
   1575c:	beq	1570c <flatcc_builder_offset_vector_push@@Base+0x54>
   15760:	b	15718 <flatcc_builder_offset_vector_push@@Base+0x60>
   15764:	andeq	sp, r1, r4, lsr #26

00015768 <flatcc_builder_append_offset_vector@@Base>:
   15768:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1576c:	strd	r6, [sp, #8]
   15770:	str	r8, [sp, #16]
   15774:	str	lr, [sp, #20]
   15778:	mov	r6, r1
   1577c:	ldr	r1, [r0, #32]
   15780:	ldrh	r3, [r1, #14]
   15784:	cmp	r3, #5
   15788:	bne	15808 <flatcc_builder_append_offset_vector@@Base+0xa0>
   1578c:	mov	r5, r0
   15790:	ldr	r3, [r1, #20]
   15794:	adds	r3, r2, r3
   15798:	movcs	ip, #1
   1579c:	movcc	ip, #0
   157a0:	cmn	r3, #-1073741823	; 0xc0000001
   157a4:	movls	r0, #0
   157a8:	movhi	r0, #1
   157ac:	orrs	r0, ip, r0
   157b0:	bne	15824 <flatcc_builder_append_offset_vector@@Base+0xbc>
   157b4:	str	r3, [r1, #20]
   157b8:	lsl	r4, r2, #2
   157bc:	ldr	r7, [r5, #20]
   157c0:	add	r1, r4, r7
   157c4:	str	r1, [r5, #20]
   157c8:	ldr	r3, [r5, #24]
   157cc:	cmp	r1, r3
   157d0:	bcs	15840 <flatcc_builder_append_offset_vector@@Base+0xd8>
   157d4:	ldr	r5, [r5, #16]
   157d8:	adds	r5, r5, r7
   157dc:	beq	157f0 <flatcc_builder_append_offset_vector@@Base+0x88>
   157e0:	mov	r2, r4
   157e4:	mov	r1, r6
   157e8:	mov	r0, r5
   157ec:	bl	1240c <memcpy@plt>
   157f0:	mov	r0, r5
   157f4:	ldrd	r4, [sp]
   157f8:	ldrd	r6, [sp, #8]
   157fc:	ldr	r8, [sp, #16]
   15800:	add	sp, sp, #20
   15804:	pop	{pc}		; (ldr pc, [sp], #4)
   15808:	ldr	r3, [pc, #80]	; 15860 <flatcc_builder_append_offset_vector@@Base+0xf8>
   1580c:	mov	r2, #948	; 0x3b4
   15810:	movw	r1, #57588	; 0xe0f4
   15814:	movt	r1, #1
   15818:	movw	r0, #58008	; 0xe298
   1581c:	movt	r0, #1
   15820:	bl	124b4 <__assert_fail@plt>
   15824:	ldr	r3, [pc, #56]	; 15864 <flatcc_builder_append_offset_vector@@Base+0xfc>
   15828:	mov	r2, #892	; 0x37c
   1582c:	movw	r1, #57588	; 0xe0f4
   15830:	movt	r1, #1
   15834:	movw	r0, #57872	; 0xe210
   15838:	movt	r0, #1
   1583c:	bl	124b4 <__assert_fail@plt>
   15840:	mvn	r2, #3
   15844:	add	r1, r1, #1
   15848:	mov	r0, r5
   1584c:	bl	13e98 <main@@Base+0x48>
   15850:	cmp	r0, #0
   15854:	movne	r5, #0
   15858:	beq	157d4 <flatcc_builder_append_offset_vector@@Base+0x6c>
   1585c:	b	157f0 <flatcc_builder_append_offset_vector@@Base+0x88>
   15860:	andeq	sp, r1, r8, asr #26
   15864:	ldrdeq	sp, [r1], -r4

00015868 <flatcc_builder_extend_string@@Base>:
   15868:	strd	r4, [sp, #-16]!
   1586c:	str	r6, [sp, #8]
   15870:	str	lr, [sp, #12]
   15874:	ldr	r2, [r0, #32]
   15878:	ldrh	r3, [r2, #14]
   1587c:	cmp	r3, #6
   15880:	bne	158c8 <flatcc_builder_extend_string@@Base+0x60>
   15884:	mov	r4, r0
   15888:	ldr	r3, [r2, #20]
   1588c:	adds	r3, r1, r3
   15890:	bcs	158e4 <flatcc_builder_extend_string@@Base+0x7c>
   15894:	str	r3, [r2, #20]
   15898:	ldr	r5, [r0, #20]
   1589c:	add	r1, r1, r5
   158a0:	str	r1, [r0, #20]
   158a4:	ldr	r3, [r0, #24]
   158a8:	cmp	r1, r3
   158ac:	bcs	15900 <flatcc_builder_extend_string@@Base+0x98>
   158b0:	ldr	r0, [r4, #16]
   158b4:	add	r0, r0, r5
   158b8:	ldrd	r4, [sp]
   158bc:	ldr	r6, [sp, #8]
   158c0:	add	sp, sp, #12
   158c4:	pop	{pc}		; (ldr pc, [sp], #4)
   158c8:	ldr	r3, [pc, #76]	; 1591c <flatcc_builder_extend_string@@Base+0xb4>
   158cc:	movw	r2, #957	; 0x3bd
   158d0:	movw	r1, #57588	; 0xe0f4
   158d4:	movt	r1, #1
   158d8:	movw	r0, #58060	; 0xe2cc
   158dc:	movt	r0, #1
   158e0:	bl	124b4 <__assert_fail@plt>
   158e4:	ldr	r3, [pc, #52]	; 15920 <flatcc_builder_extend_string@@Base+0xb8>
   158e8:	mov	r2, #892	; 0x37c
   158ec:	movw	r1, #57588	; 0xe0f4
   158f0:	movt	r1, #1
   158f4:	movw	r0, #57872	; 0xe210
   158f8:	movt	r0, #1
   158fc:	bl	124b4 <__assert_fail@plt>
   15900:	mvn	r2, #3
   15904:	add	r1, r1, #1
   15908:	bl	13e98 <main@@Base+0x48>
   1590c:	cmp	r0, #0
   15910:	movne	r0, #0
   15914:	beq	158b0 <flatcc_builder_extend_string@@Base+0x48>
   15918:	b	158b8 <flatcc_builder_extend_string@@Base+0x50>
   1591c:	andeq	sp, r1, ip, ror #26
   15920:	ldrdeq	sp, [r1], -r4

00015924 <flatcc_builder_append_string@@Base>:
   15924:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15928:	strd	r6, [sp, #8]
   1592c:	str	r8, [sp, #16]
   15930:	str	lr, [sp, #20]
   15934:	mov	r5, r2
   15938:	ldr	r2, [r0, #32]
   1593c:	ldrh	r3, [r2, #14]
   15940:	cmp	r3, #6
   15944:	bne	159ac <flatcc_builder_append_string@@Base+0x88>
   15948:	mov	r4, r0
   1594c:	mov	r6, r1
   15950:	ldr	r3, [r2, #20]
   15954:	adds	r3, r5, r3
   15958:	bcs	159c8 <flatcc_builder_append_string@@Base+0xa4>
   1595c:	str	r3, [r2, #20]
   15960:	ldr	r7, [r0, #20]
   15964:	add	r1, r5, r7
   15968:	str	r1, [r0, #20]
   1596c:	ldr	r3, [r0, #24]
   15970:	cmp	r1, r3
   15974:	bcs	159e4 <flatcc_builder_append_string@@Base+0xc0>
   15978:	ldr	r4, [r4, #16]
   1597c:	adds	r4, r4, r7
   15980:	beq	15994 <flatcc_builder_append_string@@Base+0x70>
   15984:	mov	r2, r5
   15988:	mov	r1, r6
   1598c:	mov	r0, r4
   15990:	bl	1240c <memcpy@plt>
   15994:	mov	r0, r4
   15998:	ldrd	r4, [sp]
   1599c:	ldrd	r6, [sp, #8]
   159a0:	ldr	r8, [sp, #16]
   159a4:	add	sp, sp, #20
   159a8:	pop	{pc}		; (ldr pc, [sp], #4)
   159ac:	ldr	r3, [pc, #76]	; 15a00 <flatcc_builder_append_string@@Base+0xdc>
   159b0:	movw	r2, #966	; 0x3c6
   159b4:	movw	r1, #57588	; 0xe0f4
   159b8:	movt	r1, #1
   159bc:	movw	r0, #58060	; 0xe2cc
   159c0:	movt	r0, #1
   159c4:	bl	124b4 <__assert_fail@plt>
   159c8:	ldr	r3, [pc, #52]	; 15a04 <flatcc_builder_append_string@@Base+0xe0>
   159cc:	mov	r2, #892	; 0x37c
   159d0:	movw	r1, #57588	; 0xe0f4
   159d4:	movt	r1, #1
   159d8:	movw	r0, #57872	; 0xe210
   159dc:	movt	r0, #1
   159e0:	bl	124b4 <__assert_fail@plt>
   159e4:	mvn	r2, #3
   159e8:	add	r1, r1, #1
   159ec:	bl	13e98 <main@@Base+0x48>
   159f0:	cmp	r0, #0
   159f4:	movne	r4, #0
   159f8:	beq	15978 <flatcc_builder_append_string@@Base+0x54>
   159fc:	b	15994 <flatcc_builder_append_string@@Base+0x70>
   15a00:	andeq	sp, r1, ip, lsl #27
   15a04:	ldrdeq	sp, [r1], -r4

00015a08 <flatcc_builder_append_string_str@@Base>:
   15a08:	strd	r4, [sp, #-16]!
   15a0c:	str	r6, [sp, #8]
   15a10:	str	lr, [sp, #12]
   15a14:	mov	r5, r0
   15a18:	mov	r4, r1
   15a1c:	mov	r0, r1
   15a20:	bl	12460 <strlen@plt>
   15a24:	mov	r2, r0
   15a28:	mov	r1, r4
   15a2c:	mov	r0, r5
   15a30:	bl	15924 <flatcc_builder_append_string@@Base>
   15a34:	ldrd	r4, [sp]
   15a38:	ldr	r6, [sp, #8]
   15a3c:	add	sp, sp, #12
   15a40:	pop	{pc}		; (ldr pc, [sp], #4)

00015a44 <flatcc_builder_append_string_strn@@Base>:
   15a44:	strd	r4, [sp, #-16]!
   15a48:	str	r6, [sp, #8]
   15a4c:	str	lr, [sp, #12]
   15a50:	mov	r6, r0
   15a54:	mov	r4, r1
   15a58:	mov	r5, r2
   15a5c:	mov	r1, #0
   15a60:	mov	r0, r4
   15a64:	bl	1249c <memchr@plt>
   15a68:	cmp	r0, #0
   15a6c:	subne	r5, r0, r4
   15a70:	mov	r2, r5
   15a74:	mov	r1, r4
   15a78:	mov	r0, r6
   15a7c:	bl	15924 <flatcc_builder_append_string@@Base>
   15a80:	ldrd	r4, [sp]
   15a84:	ldr	r6, [sp, #8]
   15a88:	add	sp, sp, #12
   15a8c:	pop	{pc}		; (ldr pc, [sp], #4)

00015a90 <flatcc_builder_truncate_vector@@Base>:
   15a90:	str	r4, [sp, #-8]!
   15a94:	str	lr, [sp, #4]
   15a98:	ldr	ip, [r0, #32]
   15a9c:	ldrh	r3, [ip, #14]
   15aa0:	cmp	r3, #4
   15aa4:	bne	15af4 <flatcc_builder_truncate_vector@@Base+0x64>
   15aa8:	ldr	r3, [ip, #20]
   15aac:	cmp	r3, r1
   15ab0:	bcc	15b10 <flatcc_builder_truncate_vector@@Base+0x80>
   15ab4:	sub	r3, r3, r1
   15ab8:	str	r3, [ip, #20]
   15abc:	ldr	r3, [r0, #32]
   15ac0:	ldr	r2, [r3, #16]
   15ac4:	mul	r2, r2, r1
   15ac8:	ldr	r3, [r0, #20]
   15acc:	sub	r3, r3, r2
   15ad0:	str	r3, [r0, #20]
   15ad4:	ldr	r0, [r0, #16]
   15ad8:	mov	r1, #0
   15adc:	add	r0, r0, r3
   15ae0:	bl	12484 <memset@plt>
   15ae4:	mov	r0, #0
   15ae8:	ldr	r4, [sp]
   15aec:	add	sp, sp, #4
   15af0:	pop	{pc}		; (ldr pc, [sp], #4)
   15af4:	ldr	r3, [pc, #48]	; 15b2c <flatcc_builder_truncate_vector@@Base+0x9c>
   15af8:	movw	r2, #985	; 0x3d9
   15afc:	movw	r1, #57588	; 0xe0f4
   15b00:	movt	r1, #1
   15b04:	movw	r0, #57900	; 0xe22c
   15b08:	movt	r0, #1
   15b0c:	bl	124b4 <__assert_fail@plt>
   15b10:	ldr	r3, [pc, #20]	; 15b2c <flatcc_builder_truncate_vector@@Base+0x9c>
   15b14:	movw	r2, #986	; 0x3da
   15b18:	movw	r1, #57588	; 0xe0f4
   15b1c:	movt	r1, #1
   15b20:	movw	r0, #58104	; 0xe2f8
   15b24:	movt	r0, #1
   15b28:	bl	124b4 <__assert_fail@plt>
   15b2c:	andeq	sp, r1, ip, lsr #27

00015b30 <flatcc_builder_truncate_offset_vector@@Base>:
   15b30:	str	r4, [sp, #-8]!
   15b34:	str	lr, [sp, #4]
   15b38:	ldr	ip, [r0, #32]
   15b3c:	ldrh	r3, [ip, #14]
   15b40:	cmp	r3, #5
   15b44:	bne	15b94 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   15b48:	ldr	r3, [ip, #20]
   15b4c:	cmp	r3, r1
   15b50:	bcc	15bb0 <flatcc_builder_truncate_offset_vector@@Base+0x80>
   15b54:	sub	r3, r3, r1
   15b58:	str	r3, [ip, #20]
   15b5c:	ldr	r3, [r0, #32]
   15b60:	ldr	r2, [r3, #16]
   15b64:	mul	r2, r2, r1
   15b68:	ldr	r3, [r0, #20]
   15b6c:	sub	r3, r3, r2
   15b70:	str	r3, [r0, #20]
   15b74:	ldr	r0, [r0, #16]
   15b78:	mov	r1, #0
   15b7c:	add	r0, r0, r3
   15b80:	bl	12484 <memset@plt>
   15b84:	mov	r0, #0
   15b88:	ldr	r4, [sp]
   15b8c:	add	sp, sp, #4
   15b90:	pop	{pc}		; (ldr pc, [sp], #4)
   15b94:	ldr	r3, [pc, #48]	; 15bcc <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   15b98:	movw	r2, #994	; 0x3e2
   15b9c:	movw	r1, #57588	; 0xe0f4
   15ba0:	movt	r1, #1
   15ba4:	movw	r0, #58008	; 0xe298
   15ba8:	movt	r0, #1
   15bac:	bl	124b4 <__assert_fail@plt>
   15bb0:	ldr	r3, [pc, #20]	; 15bcc <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   15bb4:	movw	r2, #995	; 0x3e3
   15bb8:	movw	r1, #57588	; 0xe0f4
   15bbc:	movt	r1, #1
   15bc0:	movw	r0, #58140	; 0xe31c
   15bc4:	movt	r0, #1
   15bc8:	bl	124b4 <__assert_fail@plt>
   15bcc:	andeq	sp, r1, ip, asr #27

00015bd0 <flatcc_builder_truncate_string@@Base>:
   15bd0:	str	r4, [sp, #-8]!
   15bd4:	str	lr, [sp, #4]
   15bd8:	ldr	r2, [r0, #32]
   15bdc:	ldrh	r3, [r2, #14]
   15be0:	cmp	r3, #6
   15be4:	bne	15c2c <flatcc_builder_truncate_string@@Base+0x5c>
   15be8:	ldr	r3, [r2, #20]
   15bec:	cmp	r3, r1
   15bf0:	bcc	15c48 <flatcc_builder_truncate_string@@Base+0x78>
   15bf4:	sub	r3, r3, r1
   15bf8:	str	r3, [r2, #20]
   15bfc:	ldr	r3, [r0, #20]
   15c00:	sub	r3, r3, r1
   15c04:	str	r3, [r0, #20]
   15c08:	ldr	r0, [r0, #16]
   15c0c:	mov	r2, r1
   15c10:	mov	r1, #0
   15c14:	add	r0, r0, r3
   15c18:	bl	12484 <memset@plt>
   15c1c:	mov	r0, #0
   15c20:	ldr	r4, [sp]
   15c24:	add	sp, sp, #4
   15c28:	pop	{pc}		; (ldr pc, [sp], #4)
   15c2c:	ldr	r3, [pc, #48]	; 15c64 <flatcc_builder_truncate_string@@Base+0x94>
   15c30:	movw	r2, #1003	; 0x3eb
   15c34:	movw	r1, #57588	; 0xe0f4
   15c38:	movt	r1, #1
   15c3c:	movw	r0, #58060	; 0xe2cc
   15c40:	movt	r0, #1
   15c44:	bl	124b4 <__assert_fail@plt>
   15c48:	ldr	r3, [pc, #20]	; 15c64 <flatcc_builder_truncate_string@@Base+0x94>
   15c4c:	mov	r2, #1004	; 0x3ec
   15c50:	movw	r1, #57588	; 0xe0f4
   15c54:	movt	r1, #1
   15c58:	movw	r0, #58200	; 0xe358
   15c5c:	movt	r0, #1
   15c60:	bl	124b4 <__assert_fail@plt>
   15c64:	strdeq	sp, [r1], -r4

00015c68 <flatcc_builder_start_vector@@Base>:
   15c68:	strd	r4, [sp, #-16]!
   15c6c:	str	r6, [sp, #8]
   15c70:	str	lr, [sp, #12]
   15c74:	mov	r4, r0
   15c78:	mov	r6, r1
   15c7c:	mov	r5, r3
   15c80:	cmp	r2, #4
   15c84:	movcs	r1, r2
   15c88:	movcc	r1, #4
   15c8c:	bl	1416c <flatcc_builder_default_alloc@@Base+0x24c>
   15c90:	cmp	r0, #0
   15c94:	bne	15d00 <flatcc_builder_start_vector@@Base+0x98>
   15c98:	ldr	r3, [r4, #32]
   15c9c:	str	r6, [r3, #16]
   15ca0:	ldr	r3, [r4, #32]
   15ca4:	mov	r2, #0
   15ca8:	str	r2, [r3, #20]
   15cac:	ldr	r3, [r4, #32]
   15cb0:	str	r5, [r3, #24]
   15cb4:	ldr	r3, [r4, #32]
   15cb8:	mov	r2, #4
   15cbc:	strh	r2, [r3, #14]
   15cc0:	ldr	r1, [r4, #28]
   15cc4:	ldr	r2, [r4, #60]	; 0x3c
   15cc8:	add	r2, r2, r1
   15ccc:	str	r2, [r4, #16]
   15cd0:	ldr	r3, [r4, #64]	; 0x40
   15cd4:	sub	r3, r3, r1
   15cd8:	cmn	r3, #4
   15cdc:	mvnhi	r3, #3
   15ce0:	str	r3, [r4, #24]
   15ce4:	ldr	r3, [r4, #32]
   15ce8:	mvn	r2, #3
   15cec:	str	r2, [r3, #4]
   15cf0:	ldrd	r4, [sp]
   15cf4:	ldr	r6, [sp, #8]
   15cf8:	add	sp, sp, #12
   15cfc:	pop	{pc}		; (ldr pc, [sp], #4)
   15d00:	mvn	r0, #0
   15d04:	b	15cf0 <flatcc_builder_start_vector@@Base+0x88>

00015d08 <flatcc_builder_start_offset_vector@@Base>:
   15d08:	str	r4, [sp, #-8]!
   15d0c:	str	lr, [sp, #4]
   15d10:	mov	r4, r0
   15d14:	mov	r1, #4
   15d18:	bl	1416c <flatcc_builder_default_alloc@@Base+0x24c>
   15d1c:	cmp	r0, #0
   15d20:	bne	15d84 <flatcc_builder_start_offset_vector@@Base+0x7c>
   15d24:	ldr	r3, [r4, #32]
   15d28:	mov	r2, #4
   15d2c:	str	r2, [r3, #16]
   15d30:	ldr	r3, [r4, #32]
   15d34:	mov	r2, #0
   15d38:	str	r2, [r3, #20]
   15d3c:	ldr	r3, [r4, #32]
   15d40:	mov	r2, #5
   15d44:	strh	r2, [r3, #14]
   15d48:	ldr	r1, [r4, #28]
   15d4c:	ldr	r2, [r4, #60]	; 0x3c
   15d50:	add	r2, r2, r1
   15d54:	str	r2, [r4, #16]
   15d58:	ldr	r3, [r4, #64]	; 0x40
   15d5c:	sub	r3, r3, r1
   15d60:	cmn	r3, #4
   15d64:	mvnhi	r3, #3
   15d68:	str	r3, [r4, #24]
   15d6c:	ldr	r3, [r4, #32]
   15d70:	mvn	r2, #3
   15d74:	str	r2, [r3, #4]
   15d78:	ldr	r4, [sp]
   15d7c:	add	sp, sp, #4
   15d80:	pop	{pc}		; (ldr pc, [sp], #4)
   15d84:	mvn	r0, #0
   15d88:	b	15d78 <flatcc_builder_start_offset_vector@@Base+0x70>

00015d8c <flatcc_builder_start_string@@Base>:
   15d8c:	str	r4, [sp, #-8]!
   15d90:	str	lr, [sp, #4]
   15d94:	mov	r4, r0
   15d98:	mov	r1, #1
   15d9c:	bl	1416c <flatcc_builder_default_alloc@@Base+0x24c>
   15da0:	cmp	r0, #0
   15da4:	bne	15e08 <flatcc_builder_start_string@@Base+0x7c>
   15da8:	ldr	r3, [r4, #32]
   15dac:	mov	r2, #1
   15db0:	str	r2, [r3, #16]
   15db4:	ldr	r3, [r4, #32]
   15db8:	mov	r2, #0
   15dbc:	str	r2, [r3, #20]
   15dc0:	ldr	r3, [r4, #32]
   15dc4:	mov	r2, #6
   15dc8:	strh	r2, [r3, #14]
   15dcc:	ldr	r1, [r4, #28]
   15dd0:	ldr	r2, [r4, #60]	; 0x3c
   15dd4:	add	r2, r2, r1
   15dd8:	str	r2, [r4, #16]
   15ddc:	ldr	r3, [r4, #64]	; 0x40
   15de0:	sub	r3, r3, r1
   15de4:	cmn	r3, #4
   15de8:	mvnhi	r3, #3
   15dec:	str	r3, [r4, #24]
   15df0:	ldr	r3, [r4, #32]
   15df4:	mvn	r2, #3
   15df8:	str	r2, [r3, #4]
   15dfc:	ldr	r4, [sp]
   15e00:	add	sp, sp, #4
   15e04:	pop	{pc}		; (ldr pc, [sp], #4)
   15e08:	mvn	r0, #0
   15e0c:	b	15dfc <flatcc_builder_start_string@@Base+0x70>

00015e10 <flatcc_builder_reserve_table@@Base>:
   15e10:	strd	r4, [sp, #-20]!	; 0xffffffec
   15e14:	strd	r6, [sp, #8]
   15e18:	str	lr, [sp, #16]
   15e1c:	sub	sp, sp, #12
   15e20:	cmp	r1, #0
   15e24:	blt	15f04 <flatcc_builder_reserve_table@@Base+0xf4>
   15e28:	mov	r4, r0
   15e2c:	ldr	r2, [r0, #32]
   15e30:	ldrh	r6, [r2, #28]
   15e34:	ldr	r3, [r2, #16]
   15e38:	add	r6, r3, r6, lsl #1
   15e3c:	add	r1, r1, #2
   15e40:	lsl	r5, r1, #1
   15e44:	add	r2, r6, r5
   15e48:	ldr	r3, [r0, #56]	; 0x38
   15e4c:	cmp	r2, r3
   15e50:	bls	15e78 <flatcc_builder_reserve_table@@Base+0x68>
   15e54:	mov	r3, #0
   15e58:	str	r3, [sp]
   15e5c:	ldr	r7, [r0, #48]	; 0x30
   15e60:	mov	r3, #1
   15e64:	add	r1, r0, #52	; 0x34
   15e68:	ldr	r0, [r0, #40]	; 0x28
   15e6c:	blx	r7
   15e70:	cmp	r0, #0
   15e74:	bne	15f20 <flatcc_builder_reserve_table@@Base+0x110>
   15e78:	ldr	r3, [r4, #52]	; 0x34
   15e7c:	adds	r3, r3, r6
   15e80:	moveq	r3, #0
   15e84:	streq	r3, [r4, #4]
   15e88:	mvneq	r0, #0
   15e8c:	beq	15ef0 <flatcc_builder_reserve_table@@Base+0xe0>
   15e90:	add	r3, r3, #4
   15e94:	str	r3, [r4, #4]
   15e98:	ldr	r3, [r4, #32]
   15e9c:	ldr	r6, [r3, #20]
   15ea0:	add	r2, r5, r6
   15ea4:	sub	r2, r2, #3
   15ea8:	ldr	r3, [r4, #80]	; 0x50
   15eac:	cmp	r2, r3
   15eb0:	bls	15ed8 <flatcc_builder_reserve_table@@Base+0xc8>
   15eb4:	mov	r3, #3
   15eb8:	str	r3, [sp]
   15ebc:	ldr	r5, [r4, #48]	; 0x30
   15ec0:	mov	r3, #0
   15ec4:	add	r1, r4, #76	; 0x4c
   15ec8:	ldr	r0, [r4, #40]	; 0x28
   15ecc:	blx	r5
   15ed0:	cmp	r0, #0
   15ed4:	bne	15f3c <flatcc_builder_reserve_table@@Base+0x12c>
   15ed8:	ldr	r0, [r4, #76]	; 0x4c
   15edc:	add	r0, r0, r6
   15ee0:	str	r0, [r4]
   15ee4:	clz	r0, r0
   15ee8:	lsr	r0, r0, #5
   15eec:	rsb	r0, r0, #0
   15ef0:	add	sp, sp, #12
   15ef4:	ldrd	r4, [sp]
   15ef8:	ldrd	r6, [sp, #8]
   15efc:	add	sp, sp, #16
   15f00:	pop	{pc}		; (ldr pc, [sp], #4)
   15f04:	ldr	r3, [pc, #76]	; 15f58 <flatcc_builder_reserve_table@@Base+0x148>
   15f08:	movw	r2, #1065	; 0x429
   15f0c:	movw	r1, #57588	; 0xe0f4
   15f10:	movt	r1, #1
   15f14:	movw	r0, #58236	; 0xe37c
   15f18:	movt	r0, #1
   15f1c:	bl	124b4 <__assert_fail@plt>
   15f20:	ldr	r3, [pc, #52]	; 15f5c <flatcc_builder_reserve_table@@Base+0x14c>
   15f24:	mov	r2, #308	; 0x134
   15f28:	movw	r1, #57588	; 0xe0f4
   15f2c:	movt	r1, #1
   15f30:	movw	r0, #57672	; 0xe148
   15f34:	movt	r0, #1
   15f38:	bl	124b4 <__assert_fail@plt>
   15f3c:	ldr	r3, [pc, #24]	; 15f5c <flatcc_builder_reserve_table@@Base+0x14c>
   15f40:	mov	r2, #308	; 0x134
   15f44:	movw	r1, #57588	; 0xe0f4
   15f48:	movt	r1, #1
   15f4c:	movw	r0, #57672	; 0xe148
   15f50:	movt	r0, #1
   15f54:	bl	124b4 <__assert_fail@plt>
   15f58:	andeq	sp, r1, r4, lsl lr
   15f5c:	andeq	sp, r1, r0, asr #23

00015f60 <flatcc_builder_start_table@@Base>:
   15f60:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15f64:	strd	r6, [sp, #8]
   15f68:	str	r8, [sp, #16]
   15f6c:	str	lr, [sp, #20]
   15f70:	sub	sp, sp, #8
   15f74:	mov	r4, r0
   15f78:	mov	r5, r1
   15f7c:	mov	r1, #4
   15f80:	bl	1416c <flatcc_builder_default_alloc@@Base+0x24c>
   15f84:	subs	r6, r0, #0
   15f88:	bne	16134 <flatcc_builder_start_table@@Base+0x1d4>
   15f8c:	ldr	r2, [r4, #32]
   15f90:	ldr	r3, [r4, #4]
   15f94:	ldr	r1, [r4, #52]	; 0x34
   15f98:	sub	r3, r3, r1
   15f9c:	str	r3, [r2, #16]
   15fa0:	ldr	r2, [r4, #32]
   15fa4:	ldr	r3, [r4]
   15fa8:	ldr	r1, [r4, #76]	; 0x4c
   15fac:	sub	r3, r3, r1
   15fb0:	str	r3, [r2, #20]
   15fb4:	ldr	r3, [r4, #32]
   15fb8:	ldr	r2, [r4, #12]
   15fbc:	str	r2, [r3, #24]
   15fc0:	ldr	r3, [r4, #32]
   15fc4:	ldrh	r2, [r4, #8]
   15fc8:	strh	r2, [r3, #28]
   15fcc:	movw	r3, #15186	; 0x3b52
   15fd0:	movt	r3, #12137	; 0x2f69
   15fd4:	str	r3, [r4, #12]
   15fd8:	mov	r3, #0
   15fdc:	strh	r3, [r4, #8]
   15fe0:	ldr	r3, [r4, #32]
   15fe4:	mov	r2, #3
   15fe8:	strh	r2, [r3, #14]
   15fec:	ldr	r2, [r4, #32]
   15ff0:	ldrh	r7, [r2, #28]
   15ff4:	ldr	r3, [r2, #16]
   15ff8:	add	r7, r3, r7, lsl #1
   15ffc:	add	r5, r5, #2
   16000:	lsl	r5, r5, #1
   16004:	add	r2, r7, r5
   16008:	ldr	r3, [r4, #56]	; 0x38
   1600c:	cmp	r2, r3
   16010:	bls	16038 <flatcc_builder_start_table@@Base+0xd8>
   16014:	mov	r3, #0
   16018:	str	r3, [sp]
   1601c:	ldr	r8, [r4, #48]	; 0x30
   16020:	mov	r3, #1
   16024:	add	r1, r4, #52	; 0x34
   16028:	ldr	r0, [r4, #40]	; 0x28
   1602c:	blx	r8
   16030:	cmp	r0, #0
   16034:	bne	160fc <flatcc_builder_start_table@@Base+0x19c>
   16038:	ldr	r3, [r4, #52]	; 0x34
   1603c:	adds	r3, r3, r7
   16040:	moveq	r3, #0
   16044:	streq	r3, [r4, #4]
   16048:	mvneq	r6, #0
   1604c:	beq	160e0 <flatcc_builder_start_table@@Base+0x180>
   16050:	add	r3, r3, #4
   16054:	str	r3, [r4, #4]
   16058:	ldr	r3, [r4, #32]
   1605c:	ldr	r7, [r3, #20]
   16060:	sub	r2, r5, #3
   16064:	add	r2, r2, r7
   16068:	ldr	r3, [r4, #80]	; 0x50
   1606c:	cmp	r2, r3
   16070:	bls	16098 <flatcc_builder_start_table@@Base+0x138>
   16074:	mov	r3, #3
   16078:	str	r3, [sp]
   1607c:	ldr	r5, [r4, #48]	; 0x30
   16080:	mov	r3, #0
   16084:	add	r1, r4, #76	; 0x4c
   16088:	ldr	r0, [r4, #40]	; 0x28
   1608c:	blx	r5
   16090:	cmp	r0, #0
   16094:	bne	16118 <flatcc_builder_start_table@@Base+0x1b8>
   16098:	ldr	r3, [r4, #76]	; 0x4c
   1609c:	add	r3, r3, r7
   160a0:	str	r3, [r4]
   160a4:	cmp	r3, #0
   160a8:	beq	1613c <flatcc_builder_start_table@@Base+0x1dc>
   160ac:	ldr	r1, [r4, #28]
   160b0:	ldr	r2, [r4, #60]	; 0x3c
   160b4:	add	r2, r2, r1
   160b8:	str	r2, [r4, #16]
   160bc:	ldr	r3, [r4, #64]	; 0x40
   160c0:	sub	r3, r3, r1
   160c4:	movw	r2, #65532	; 0xfffc
   160c8:	cmp	r3, r2
   160cc:	movwhi	r3, #65532	; 0xfffc
   160d0:	str	r3, [r4, #24]
   160d4:	ldr	r3, [r4, #32]
   160d8:	movw	r2, #65532	; 0xfffc
   160dc:	str	r2, [r3, #4]
   160e0:	mov	r0, r6
   160e4:	add	sp, sp, #8
   160e8:	ldrd	r4, [sp]
   160ec:	ldrd	r6, [sp, #8]
   160f0:	ldr	r8, [sp, #16]
   160f4:	add	sp, sp, #20
   160f8:	pop	{pc}		; (ldr pc, [sp], #4)
   160fc:	ldr	r3, [pc, #64]	; 16144 <flatcc_builder_start_table@@Base+0x1e4>
   16100:	mov	r2, #308	; 0x134
   16104:	movw	r1, #57588	; 0xe0f4
   16108:	movt	r1, #1
   1610c:	movw	r0, #57672	; 0xe148
   16110:	movt	r0, #1
   16114:	bl	124b4 <__assert_fail@plt>
   16118:	ldr	r3, [pc, #36]	; 16144 <flatcc_builder_start_table@@Base+0x1e4>
   1611c:	mov	r2, #308	; 0x134
   16120:	movw	r1, #57588	; 0xe0f4
   16124:	movt	r1, #1
   16128:	movw	r0, #57672	; 0xe148
   1612c:	movt	r0, #1
   16130:	bl	124b4 <__assert_fail@plt>
   16134:	mvn	r6, #0
   16138:	b	160e0 <flatcc_builder_start_table@@Base+0x180>
   1613c:	mvn	r6, #0
   16140:	b	160e0 <flatcc_builder_start_table@@Base+0x180>
   16144:	andeq	sp, r1, r0, asr #23

00016148 <flatcc_builder_create_vtable@@Base>:
   16148:	strd	r4, [sp, #-16]!
   1614c:	str	r6, [sp, #8]
   16150:	str	lr, [sp, #12]
   16154:	sub	sp, sp, #80	; 0x50
   16158:	mov	r5, r0
   1615c:	mov	r3, #0
   16160:	str	r3, [sp, #8]
   16164:	str	r3, [sp, #12]
   16168:	cmp	r2, #0
   1616c:	beq	16208 <flatcc_builder_create_vtable@@Base+0xc0>
   16170:	str	r2, [sp, #8]
   16174:	str	r1, [sp, #16]
   16178:	str	r2, [sp, #20]
   1617c:	mov	r3, #1
   16180:	str	r3, [sp, #12]
   16184:	ldr	r3, [r0, #152]	; 0x98
   16188:	cmp	r3, #0
   1618c:	bne	16220 <flatcc_builder_create_vtable@@Base+0xd8>
   16190:	ldr	r3, [r0, #180]	; 0xb4
   16194:	cmp	r3, #0
   16198:	bne	16220 <flatcc_builder_create_vtable@@Base+0xd8>
   1619c:	ldr	r4, [r0, #140]	; 0x8c
   161a0:	mov	r3, r2
   161a4:	add	r2, r2, r4
   161a8:	str	r2, [r0, #140]	; 0x8c
   161ac:	cmp	r4, r2
   161b0:	ble	1628c <flatcc_builder_create_vtable@@Base+0x144>
   161b4:	ldr	r3, [pc, #276]	; 162d0 <flatcc_builder_create_vtable@@Base+0x188>
   161b8:	movw	r2, #673	; 0x2a1
   161bc:	movw	r1, #57588	; 0xe0f4
   161c0:	movt	r1, #1
   161c4:	movw	r0, #57672	; 0xe148
   161c8:	movt	r0, #1
   161cc:	bl	124b4 <__assert_fail@plt>
   161d0:	ldr	r3, [pc, #252]	; 162d4 <flatcc_builder_create_vtable@@Base+0x18c>
   161d4:	movw	r2, #647	; 0x287
   161d8:	movw	r1, #57588	; 0xe0f4
   161dc:	movt	r1, #1
   161e0:	movw	r0, #57672	; 0xe148
   161e4:	movt	r0, #1
   161e8:	bl	124b4 <__assert_fail@plt>
   161ec:	ldr	r3, [pc, #224]	; 162d4 <flatcc_builder_create_vtable@@Base+0x18c>
   161f0:	movw	r2, #651	; 0x28b
   161f4:	movw	r1, #57588	; 0xe0f4
   161f8:	movt	r1, #1
   161fc:	movw	r0, #57672	; 0xe148
   16200:	movt	r0, #1
   16204:	bl	124b4 <__assert_fail@plt>
   16208:	ldr	r3, [r0, #152]	; 0x98
   1620c:	cmp	r3, #0
   16210:	bne	161d0 <flatcc_builder_create_vtable@@Base+0x88>
   16214:	ldr	r3, [r0, #180]	; 0xb4
   16218:	cmp	r3, #0
   1621c:	beq	1627c <flatcc_builder_create_vtable@@Base+0x134>
   16220:	ldr	r2, [r5, #136]	; 0x88
   16224:	ldr	r3, [sp, #8]
   16228:	sub	r4, r2, r3
   1622c:	cmp	r2, r4
   16230:	ble	161d0 <flatcc_builder_create_vtable@@Base+0x88>
   16234:	str	r3, [sp]
   16238:	ldr	r6, [r5, #44]	; 0x2c
   1623c:	mov	r3, r4
   16240:	ldr	r2, [sp, #12]
   16244:	add	r1, sp, #16
   16248:	ldr	r0, [r5, #36]	; 0x24
   1624c:	blx	r6
   16250:	cmp	r0, #0
   16254:	bne	161ec <flatcc_builder_create_vtable@@Base+0xa4>
   16258:	str	r4, [r5, #136]	; 0x88
   1625c:	cmp	r4, #0
   16260:	addne	r4, r4, #1
   16264:	mov	r0, r4
   16268:	add	sp, sp, #80	; 0x50
   1626c:	ldrd	r4, [sp]
   16270:	ldr	r6, [sp, #8]
   16274:	add	sp, sp, #12
   16278:	pop	{pc}		; (ldr pc, [sp], #4)
   1627c:	ldr	r4, [r5, #140]	; 0x8c
   16280:	ldr	r3, [sp, #8]
   16284:	add	r2, r3, r4
   16288:	str	r2, [r5, #140]	; 0x8c
   1628c:	str	r3, [sp]
   16290:	ldr	r6, [r5, #44]	; 0x2c
   16294:	mov	r3, r4
   16298:	ldr	r2, [sp, #12]
   1629c:	add	r1, sp, #16
   162a0:	ldr	r0, [r5, #36]	; 0x24
   162a4:	blx	r6
   162a8:	cmp	r0, #0
   162ac:	addeq	r4, r4, #1
   162b0:	beq	16264 <flatcc_builder_create_vtable@@Base+0x11c>
   162b4:	ldr	r3, [pc, #20]	; 162d0 <flatcc_builder_create_vtable@@Base+0x188>
   162b8:	movw	r2, #677	; 0x2a5
   162bc:	movw	r1, #57588	; 0xe0f4
   162c0:	movt	r1, #1
   162c4:	movw	r0, #57672	; 0xe148
   162c8:	movt	r0, #1
   162cc:	bl	124b4 <__assert_fail@plt>
   162d0:	andeq	sp, r1, r4, lsr #23
   162d4:	strdeq	sp, [r1], -r0

000162d8 <flatcc_builder_create_cached_vtable@@Base>:
   162d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   162dc:	strd	r6, [sp, #8]
   162e0:	strd	r8, [sp, #16]
   162e4:	strd	sl, [sp, #24]
   162e8:	str	lr, [sp, #32]
   162ec:	sub	sp, sp, #36	; 0x24
   162f0:	mov	r5, r0
   162f4:	str	r1, [sp, #12]
   162f8:	str	r2, [sp, #16]
   162fc:	mov	r6, r3
   16300:	ldr	r3, [r0, #116]	; 0x74
   16304:	cmp	r3, #0
   16308:	beq	16350 <flatcc_builder_create_cached_vtable@@Base+0x78>
   1630c:	ldr	r8, [r5, #116]	; 0x74
   16310:	rsb	r3, r8, #32
   16314:	lsr	r8, r6, r3
   16318:	ldr	sl, [r5, #92]	; 0x5c
   1631c:	adds	r9, sl, r8, lsl #2
   16320:	str	r9, [sp, #20]
   16324:	beq	16660 <flatcc_builder_create_cached_vtable@@Base+0x388>
   16328:	ldr	r6, [sl, r8, lsl #2]
   1632c:	cmp	r6, #0
   16330:	beq	16588 <flatcc_builder_create_cached_vtable@@Base+0x2b0>
   16334:	ldr	fp, [r5, #100]	; 0x64
   16338:	ldr	r7, [r5, #68]	; 0x44
   1633c:	mov	r3, #0
   16340:	str	r3, [sp, #28]
   16344:	str	r8, [sp, #24]
   16348:	ldr	r8, [sp, #16]
   1634c:	b	16458 <flatcc_builder_create_cached_vtable@@Base+0x180>
   16350:	add	r8, r0, #92	; 0x5c
   16354:	ldr	r4, [r0, #124]	; 0x7c
   16358:	cmp	r4, #0
   1635c:	bne	163dc <flatcc_builder_create_cached_vtable@@Base+0x104>
   16360:	ldr	r3, [r0, #104]	; 0x68
   16364:	cmp	r3, #15
   16368:	bhi	16394 <flatcc_builder_create_cached_vtable@@Base+0xbc>
   1636c:	mov	r3, #6
   16370:	str	r3, [sp]
   16374:	ldr	r7, [r0, #48]	; 0x30
   16378:	mov	r3, #0
   1637c:	mov	r2, #16
   16380:	add	r1, r0, #100	; 0x64
   16384:	ldr	r0, [r0, #40]	; 0x28
   16388:	blx	r7
   1638c:	cmp	r0, #0
   16390:	bne	163f8 <flatcc_builder_create_cached_vtable@@Base+0x120>
   16394:	ldr	r3, [r5, #100]	; 0x64
   16398:	cmp	r3, #0
   1639c:	beq	16678 <flatcc_builder_create_cached_vtable@@Base+0x3a0>
   163a0:	mov	r3, #16
   163a4:	str	r3, [r5, #124]	; 0x7c
   163a8:	mov	r3, #5
   163ac:	str	r3, [sp]
   163b0:	ldr	r7, [r5, #48]	; 0x30
   163b4:	mov	r3, #1
   163b8:	mov	r2, #256	; 0x100
   163bc:	mov	r1, r8
   163c0:	ldr	r0, [r5, #40]	; 0x28
   163c4:	blx	r7
   163c8:	cmp	r0, #0
   163cc:	bne	16678 <flatcc_builder_create_cached_vtable@@Base+0x3a0>
   163d0:	ldr	r1, [r5, #96]	; 0x60
   163d4:	mov	r2, #256	; 0x100
   163d8:	b	16418 <flatcc_builder_create_cached_vtable@@Base+0x140>
   163dc:	ldr	r3, [pc, #668]	; 16680 <flatcc_builder_create_cached_vtable@@Base+0x3a8>
   163e0:	movw	r2, #342	; 0x156
   163e4:	movw	r1, #57588	; 0xe0f4
   163e8:	movt	r1, #1
   163ec:	movw	r0, #58248	; 0xe388
   163f0:	movt	r0, #1
   163f4:	bl	124b4 <__assert_fail@plt>
   163f8:	ldr	r3, [pc, #644]	; 16684 <flatcc_builder_create_cached_vtable@@Base+0x3ac>
   163fc:	mov	r2, #308	; 0x134
   16400:	movw	r1, #57588	; 0xe0f4
   16404:	movt	r1, #1
   16408:	movw	r0, #57672	; 0xe148
   1640c:	movt	r0, #1
   16410:	bl	124b4 <__assert_fail@plt>
   16414:	mov	r2, r3
   16418:	lsl	r3, r2, #1
   1641c:	cmp	r3, r1
   16420:	bls	16414 <flatcc_builder_create_cached_vtable@@Base+0x13c>
   16424:	lsr	r3, r2, #2
   16428:	cmp	r2, #7
   1642c:	bls	16440 <flatcc_builder_create_cached_vtable@@Base+0x168>
   16430:	mov	r2, #1
   16434:	add	r4, r4, #1
   16438:	cmp	r3, r2, lsl r4
   1643c:	bhi	16434 <flatcc_builder_create_cached_vtable@@Base+0x15c>
   16440:	str	r4, [r5, #116]	; 0x74
   16444:	b	1630c <flatcc_builder_create_cached_vtable@@Base+0x34>
   16448:	add	r9, r4, #12
   1644c:	ldr	r6, [r4, #12]
   16450:	cmp	r6, #0
   16454:	beq	164e8 <flatcc_builder_create_cached_vtable@@Base+0x210>
   16458:	add	r4, fp, r6
   1645c:	ldr	r3, [r4, #8]
   16460:	add	r1, r7, r3
   16464:	ldrh	r3, [r7, r3]
   16468:	cmp	r3, r8
   1646c:	bne	16448 <flatcc_builder_create_cached_vtable@@Base+0x170>
   16470:	mov	r2, r8
   16474:	ldr	r0, [sp, #12]
   16478:	bl	12418 <memcmp@plt>
   1647c:	cmp	r0, #0
   16480:	bne	16448 <flatcc_builder_create_cached_vtable@@Base+0x170>
   16484:	ldr	r2, [r4, #4]
   16488:	ldr	r3, [r5, #152]	; 0x98
   1648c:	cmp	r2, r3
   16490:	bne	164d8 <flatcc_builder_create_cached_vtable@@Base+0x200>
   16494:	ldr	r8, [sp, #24]
   16498:	ldr	r3, [sp, #20]
   1649c:	cmp	r3, r9
   164a0:	beq	164b8 <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   164a4:	ldr	r3, [r4, #12]
   164a8:	str	r3, [r9]
   164ac:	ldr	r3, [sl, r8, lsl #2]
   164b0:	str	r3, [r4, #12]
   164b4:	str	r6, [sl, r8, lsl #2]
   164b8:	ldr	r0, [r4]
   164bc:	add	sp, sp, #36	; 0x24
   164c0:	ldrd	r4, [sp]
   164c4:	ldrd	r6, [sp, #8]
   164c8:	ldrd	r8, [sp, #16]
   164cc:	ldrd	sl, [sp, #24]
   164d0:	add	sp, sp, #32
   164d4:	pop	{pc}		; (ldr pc, [sp], #4)
   164d8:	add	r9, r4, #12
   164dc:	ldr	r6, [r4, #12]
   164e0:	str	r4, [sp, #28]
   164e4:	b	16450 <flatcc_builder_create_cached_vtable@@Base+0x178>
   164e8:	ldr	r8, [sp, #24]
   164ec:	ldr	r4, [r5, #124]	; 0x7c
   164f0:	add	r2, r4, #16
   164f4:	ldr	r3, [r5, #104]	; 0x68
   164f8:	cmp	r2, r3
   164fc:	bls	16524 <flatcc_builder_create_cached_vtable@@Base+0x24c>
   16500:	mov	r3, #6
   16504:	str	r3, [sp]
   16508:	ldr	r6, [r5, #48]	; 0x30
   1650c:	mov	r3, #0
   16510:	add	r1, r5, #100	; 0x64
   16514:	ldr	r0, [r5, #40]	; 0x28
   16518:	blx	r6
   1651c:	cmp	r0, #0
   16520:	bne	16594 <flatcc_builder_create_cached_vtable@@Base+0x2bc>
   16524:	ldr	r6, [r5, #100]	; 0x64
   16528:	adds	r7, r6, r4
   1652c:	beq	16668 <flatcc_builder_create_cached_vtable@@Base+0x390>
   16530:	ldr	r3, [r5, #124]	; 0x7c
   16534:	add	r2, r3, #16
   16538:	str	r2, [r5, #124]	; 0x7c
   1653c:	ldr	r2, [r5, #152]	; 0x98
   16540:	str	r2, [r7, #4]
   16544:	ldr	r2, [sl, r8, lsl #2]
   16548:	str	r2, [r7, #12]
   1654c:	str	r3, [sl, r8, lsl #2]
   16550:	ldr	r2, [sp, #16]
   16554:	ldr	r1, [sp, #12]
   16558:	mov	r0, r5
   1655c:	bl	16148 <flatcc_builder_create_vtable@@Base>
   16560:	str	r0, [r6, r4]
   16564:	cmp	r0, #0
   16568:	beq	164bc <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   1656c:	ldr	r3, [sp, #28]
   16570:	cmp	r3, #0
   16574:	beq	165b0 <flatcc_builder_create_cached_vtable@@Base+0x2d8>
   16578:	ldr	r3, [r3, #8]
   1657c:	str	r3, [r7, #8]
   16580:	ldr	r0, [r6, r4]
   16584:	b	164bc <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   16588:	mov	r3, #0
   1658c:	str	r3, [sp, #28]
   16590:	b	164ec <flatcc_builder_create_cached_vtable@@Base+0x214>
   16594:	ldr	r3, [pc, #232]	; 16684 <flatcc_builder_create_cached_vtable@@Base+0x3ac>
   16598:	mov	r2, #308	; 0x134
   1659c:	movw	r1, #57588	; 0xe0f4
   165a0:	movt	r1, #1
   165a4:	movw	r0, #57672	; 0xe148
   165a8:	movt	r0, #1
   165ac:	bl	124b4 <__assert_fail@plt>
   165b0:	ldr	r2, [r5, #172]	; 0xac
   165b4:	cmp	r2, #0
   165b8:	beq	165d0 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   165bc:	ldr	r3, [r5, #120]	; 0x78
   165c0:	ldr	r1, [sp, #16]
   165c4:	add	r3, r1, r3
   165c8:	cmp	r2, r3
   165cc:	bcc	16638 <flatcc_builder_create_cached_vtable@@Base+0x360>
   165d0:	ldr	r8, [r5, #120]	; 0x78
   165d4:	ldr	r3, [sp, #16]
   165d8:	add	r2, r8, r3
   165dc:	ldr	r3, [r5, #72]	; 0x48
   165e0:	cmp	r2, r3
   165e4:	bls	1660c <flatcc_builder_create_cached_vtable@@Base+0x334>
   165e8:	mov	r3, #2
   165ec:	str	r3, [sp]
   165f0:	ldr	sl, [r5, #48]	; 0x30
   165f4:	mov	r3, #0
   165f8:	add	r1, r5, #68	; 0x44
   165fc:	ldr	r0, [r5, #40]	; 0x28
   16600:	blx	sl
   16604:	cmp	r0, #0
   16608:	bne	16644 <flatcc_builder_create_cached_vtable@@Base+0x36c>
   1660c:	ldr	r3, [r5, #68]	; 0x44
   16610:	adds	r0, r3, r8
   16614:	beq	16670 <flatcc_builder_create_cached_vtable@@Base+0x398>
   16618:	ldr	r3, [r5, #120]	; 0x78
   1661c:	str	r3, [r7, #8]
   16620:	ldr	r2, [sp, #16]
   16624:	add	r3, r2, r3
   16628:	str	r3, [r5, #120]	; 0x78
   1662c:	ldr	r1, [sp, #12]
   16630:	bl	1240c <memcpy@plt>
   16634:	b	16580 <flatcc_builder_create_cached_vtable@@Base+0x2a8>
   16638:	mov	r0, r5
   1663c:	bl	144e0 <flatcc_builder_flush_vtable_cache@@Base>
   16640:	b	16580 <flatcc_builder_create_cached_vtable@@Base+0x2a8>
   16644:	ldr	r3, [pc, #56]	; 16684 <flatcc_builder_create_cached_vtable@@Base+0x3ac>
   16648:	mov	r2, #308	; 0x134
   1664c:	movw	r1, #57588	; 0xe0f4
   16650:	movt	r1, #1
   16654:	movw	r0, #57672	; 0xe148
   16658:	movt	r0, #1
   1665c:	bl	124b4 <__assert_fail@plt>
   16660:	mov	r0, #0
   16664:	b	164bc <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   16668:	mov	r0, #0
   1666c:	b	164bc <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   16670:	mvn	r0, #0
   16674:	b	164bc <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   16678:	mov	r0, #0
   1667c:	b	164bc <flatcc_builder_create_cached_vtable@@Base+0x1e4>
   16680:	andeq	sp, r1, r4, lsr lr
   16684:	andeq	sp, r1, r0, asr #23

00016688 <flatcc_builder_create_table@@Base>:
   16688:	strd	r4, [sp, #-20]!	; 0xffffffec
   1668c:	strd	r6, [sp, #8]
   16690:	str	lr, [sp, #16]
   16694:	sub	sp, sp, #92	; 0x5c
   16698:	ldr	r7, [sp, #116]	; 0x74
   1669c:	ldr	ip, [sp, #120]	; 0x78
   166a0:	cmp	r7, #0
   166a4:	blt	167ec <flatcc_builder_create_table@@Base+0x164>
   166a8:	mov	r4, r0
   166ac:	tst	ip, #1
   166b0:	beq	16808 <flatcc_builder_create_table@@Base+0x180>
   166b4:	cmp	r3, #4
   166b8:	movcc	r3, #4
   166bc:	ldrh	r0, [r0, #128]	; 0x80
   166c0:	cmp	r0, r3
   166c4:	strhcc	r3, [r4, #128]	; 0x80
   166c8:	ldr	r0, [r4, #136]	; 0x88
   166cc:	sub	r6, r0, r2
   166d0:	sub	r3, r3, #1
   166d4:	and	r6, r6, r3
   166d8:	sub	r0, r0, r2
   166dc:	sub	r0, r0, #4
   166e0:	sub	ip, ip, #1
   166e4:	sub	ip, r0, ip
   166e8:	sub	ip, ip, r6
   166ec:	str	ip, [sp, #84]	; 0x54
   166f0:	cmp	r7, #0
   166f4:	ble	16724 <flatcc_builder_create_table@@Base+0x9c>
   166f8:	ldr	ip, [sp, #112]	; 0x70
   166fc:	add	r7, ip, r7, lsl #1
   16700:	sub	r0, r6, r0
   16704:	sub	lr, r0, #4
   16708:	ldrh	r3, [ip], #2
   1670c:	sub	r5, lr, r3
   16710:	ldr	r0, [r1, r3]
   16714:	add	r0, r0, r5
   16718:	str	r0, [r1, r3]
   1671c:	cmp	r7, ip
   16720:	bne	16708 <flatcc_builder_create_table@@Base+0x80>
   16724:	mov	r3, #4
   16728:	str	r3, [sp, #12]
   1672c:	add	r0, sp, #84	; 0x54
   16730:	str	r0, [sp, #20]
   16734:	str	r3, [sp, #24]
   16738:	mov	r3, #1
   1673c:	str	r3, [sp, #16]
   16740:	cmp	r2, #0
   16744:	beq	16760 <flatcc_builder_create_table@@Base+0xd8>
   16748:	add	r3, r2, #4
   1674c:	str	r3, [sp, #12]
   16750:	str	r1, [sp, #28]
   16754:	str	r2, [sp, #32]
   16758:	mov	r3, #2
   1675c:	str	r3, [sp, #16]
   16760:	cmp	r6, #0
   16764:	beq	16798 <flatcc_builder_create_table@@Base+0x110>
   16768:	ldr	r3, [sp, #12]
   1676c:	add	r3, r3, r6
   16770:	str	r3, [sp, #12]
   16774:	ldr	r3, [sp, #16]
   16778:	add	r3, r3, #1
   1677c:	add	r2, sp, #88	; 0x58
   16780:	add	r1, r2, r3, lsl #3
   16784:	movw	r2, #55716	; 0xd9a4
   16788:	movt	r2, #1
   1678c:	str	r2, [r1, #-76]	; 0xffffffb4
   16790:	str	r6, [r1, #-72]	; 0xffffffb8
   16794:	str	r3, [sp, #16]
   16798:	ldr	r2, [r4, #136]	; 0x88
   1679c:	ldr	r3, [sp, #12]
   167a0:	sub	r5, r2, r3
   167a4:	cmp	r2, r5
   167a8:	ble	16824 <flatcc_builder_create_table@@Base+0x19c>
   167ac:	str	r3, [sp]
   167b0:	ldr	r6, [r4, #44]	; 0x2c
   167b4:	mov	r3, r5
   167b8:	ldr	r2, [sp, #16]
   167bc:	add	r1, sp, #20
   167c0:	ldr	r0, [r4, #36]	; 0x24
   167c4:	blx	r6
   167c8:	cmp	r0, #0
   167cc:	bne	16840 <flatcc_builder_create_table@@Base+0x1b8>
   167d0:	str	r5, [r4, #136]	; 0x88
   167d4:	mov	r0, r5
   167d8:	add	sp, sp, #92	; 0x5c
   167dc:	ldrd	r4, [sp]
   167e0:	ldrd	r6, [sp, #8]
   167e4:	add	sp, sp, #16
   167e8:	pop	{pc}		; (ldr pc, [sp], #4)
   167ec:	ldr	r3, [pc, #104]	; 1685c <flatcc_builder_create_table@@Base+0x1d4>
   167f0:	movw	r2, #1237	; 0x4d5
   167f4:	movw	r1, #57588	; 0xe0f4
   167f8:	movt	r1, #1
   167fc:	movw	r0, #58264	; 0xe398
   16800:	movt	r0, #1
   16804:	bl	124b4 <__assert_fail@plt>
   16808:	ldr	r3, [pc, #76]	; 1685c <flatcc_builder_create_table@@Base+0x1d4>
   1680c:	movw	r2, #1243	; 0x4db
   16810:	movw	r1, #57588	; 0xe0f4
   16814:	movt	r1, #1
   16818:	movw	r0, #58284	; 0xe3ac
   1681c:	movt	r0, #1
   16820:	bl	124b4 <__assert_fail@plt>
   16824:	ldr	r3, [pc, #52]	; 16860 <flatcc_builder_create_table@@Base+0x1d8>
   16828:	movw	r2, #647	; 0x287
   1682c:	movw	r1, #57588	; 0xe0f4
   16830:	movt	r1, #1
   16834:	movw	r0, #57672	; 0xe148
   16838:	movt	r0, #1
   1683c:	bl	124b4 <__assert_fail@plt>
   16840:	ldr	r3, [pc, #24]	; 16860 <flatcc_builder_create_table@@Base+0x1d8>
   16844:	movw	r2, #651	; 0x28b
   16848:	movw	r1, #57588	; 0xe0f4
   1684c:	movt	r1, #1
   16850:	movw	r0, #57672	; 0xe148
   16854:	movt	r0, #1
   16858:	bl	124b4 <__assert_fail@plt>
   1685c:	andeq	sp, r1, r0, asr #28
   16860:	strdeq	sp, [r1], -r0

00016864 <flatcc_builder_check_required_field@@Base>:
   16864:	ldr	r3, [r0, #32]
   16868:	ldrh	r3, [r3, #14]
   1686c:	cmp	r3, #3
   16870:	bne	16898 <flatcc_builder_check_required_field@@Base+0x34>
   16874:	ldrh	r3, [r0, #8]
   16878:	cmp	r3, r1
   1687c:	bls	168bc <flatcc_builder_check_required_field@@Base+0x58>
   16880:	ldr	r3, [r0, #4]
   16884:	lsl	r1, r1, #1
   16888:	ldrh	r0, [r3, r1]
   1688c:	adds	r0, r0, #0
   16890:	movne	r0, #1
   16894:	bx	lr
   16898:	str	r4, [sp, #-8]!
   1689c:	str	lr, [sp, #4]
   168a0:	ldr	r3, [pc, #28]	; 168c4 <flatcc_builder_check_required_field@@Base+0x60>
   168a4:	movw	r2, #1272	; 0x4f8
   168a8:	movw	r1, #57588	; 0xe0f4
   168ac:	movt	r1, #1
   168b0:	movw	r0, #58296	; 0xe3b8
   168b4:	movt	r0, #1
   168b8:	bl	124b4 <__assert_fail@plt>
   168bc:	mov	r0, #0
   168c0:	bx	lr
   168c4:	andeq	sp, r1, ip, asr lr

000168c8 <flatcc_builder_check_union_field@@Base>:
   168c8:	ldr	r3, [r0, #32]
   168cc:	ldrh	r3, [r3, #14]
   168d0:	cmp	r3, #3
   168d4:	bne	16928 <flatcc_builder_check_union_field@@Base+0x60>
   168d8:	cmp	r1, #0
   168dc:	beq	16974 <flatcc_builder_check_union_field@@Base+0xac>
   168e0:	ldrh	r3, [r0, #8]
   168e4:	cmp	r3, r1
   168e8:	bls	1697c <flatcc_builder_check_union_field@@Base+0xb4>
   168ec:	ldr	r3, [r0, #4]
   168f0:	sub	r1, r1, #-2147483647	; 0x80000001
   168f4:	lsl	r1, r1, #1
   168f8:	ldrh	r2, [r3, r1]
   168fc:	cmp	r2, #0
   16900:	beq	1694c <flatcc_builder_check_union_field@@Base+0x84>
   16904:	ldr	r0, [r0, #16]
   16908:	ldrb	r2, [r0, r2]
   1690c:	cmp	r2, #0
   16910:	bne	16960 <flatcc_builder_check_union_field@@Base+0x98>
   16914:	add	r1, r3, r1
   16918:	ldrh	r0, [r1, #2]
   1691c:	clz	r0, r0
   16920:	lsr	r0, r0, #5
   16924:	bx	lr
   16928:	str	r4, [sp, #-8]!
   1692c:	str	lr, [sp, #4]
   16930:	ldr	r3, [pc, #76]	; 16984 <flatcc_builder_check_union_field@@Base+0xbc>
   16934:	movw	r2, #1279	; 0x4ff
   16938:	movw	r1, #57588	; 0xe0f4
   1693c:	movt	r1, #1
   16940:	movw	r0, #58296	; 0xe3b8
   16944:	movt	r0, #1
   16948:	bl	124b4 <__assert_fail@plt>
   1694c:	add	r1, r3, r1
   16950:	ldrh	r0, [r1, #2]
   16954:	clz	r0, r0
   16958:	lsr	r0, r0, #5
   1695c:	bx	lr
   16960:	add	r1, r3, r1
   16964:	ldrh	r0, [r1, #2]
   16968:	adds	r0, r0, #0
   1696c:	movne	r0, #1
   16970:	bx	lr
   16974:	mov	r0, #0
   16978:	bx	lr
   1697c:	mov	r0, #0
   16980:	bx	lr
   16984:	andeq	sp, r1, r0, lsl #29

00016988 <flatcc_builder_check_required@@Base>:
   16988:	ldr	r3, [r0, #32]
   1698c:	ldrh	r3, [r3, #14]
   16990:	cmp	r3, #3
   16994:	bne	169f0 <flatcc_builder_check_required@@Base+0x68>
   16998:	ldrh	r3, [r0, #8]
   1699c:	cmp	r3, r2
   169a0:	blt	16a1c <flatcc_builder_check_required@@Base+0x94>
   169a4:	cmp	r2, #0
   169a8:	ble	16a24 <flatcc_builder_check_required@@Base+0x9c>
   169ac:	ldr	ip, [r0, #4]
   169b0:	ldrh	r3, [r1]
   169b4:	lsl	r3, r3, #1
   169b8:	ldrh	r3, [ip, r3]
   169bc:	cmp	r3, #0
   169c0:	beq	16a2c <flatcc_builder_check_required@@Base+0xa4>
   169c4:	add	r0, r1, #2
   169c8:	add	r2, r1, r2, lsl #1
   169cc:	cmp	r0, r2
   169d0:	beq	16a14 <flatcc_builder_check_required@@Base+0x8c>
   169d4:	ldrh	r3, [r0], #2
   169d8:	lsl	r3, r3, #1
   169dc:	ldrh	r3, [ip, r3]
   169e0:	cmp	r3, #0
   169e4:	bne	169cc <flatcc_builder_check_required@@Base+0x44>
   169e8:	mov	r0, #0
   169ec:	bx	lr
   169f0:	str	r4, [sp, #-8]!
   169f4:	str	lr, [sp, #4]
   169f8:	ldr	r3, [pc, #52]	; 16a34 <flatcc_builder_check_required@@Base+0xac>
   169fc:	movw	r2, #1297	; 0x511
   16a00:	movw	r1, #57588	; 0xe0f4
   16a04:	movt	r1, #1
   16a08:	movw	r0, #58296	; 0xe3b8
   16a0c:	movt	r0, #1
   16a10:	bl	124b4 <__assert_fail@plt>
   16a14:	mov	r0, #1
   16a18:	bx	lr
   16a1c:	mov	r0, #0
   16a20:	bx	lr
   16a24:	mov	r0, #1
   16a28:	bx	lr
   16a2c:	mov	r0, #0
   16a30:	bx	lr
   16a34:	andeq	sp, r1, r4, lsr #29

00016a38 <flatcc_builder_end_table@@Base>:
   16a38:	strd	r4, [sp, #-20]!	; 0xffffffec
   16a3c:	strd	r6, [sp, #8]
   16a40:	str	lr, [sp, #16]
   16a44:	sub	sp, sp, #20
   16a48:	ldr	r3, [r0, #32]
   16a4c:	ldrh	r3, [r3, #14]
   16a50:	cmp	r3, #3
   16a54:	bne	16ad4 <flatcc_builder_end_table@@Base+0x9c>
   16a58:	mov	r4, r0
   16a5c:	ldr	r2, [r0, #4]
   16a60:	sub	r6, r2, #4
   16a64:	ldrh	r5, [r0, #8]
   16a68:	add	r5, r5, #2
   16a6c:	lsl	r5, r5, #1
   16a70:	uxth	r5, r5
   16a74:	strh	r5, [r2, #-4]
   16a78:	ldr	r3, [r0, #20]
   16a7c:	add	r3, r3, #4
   16a80:	uxth	r1, r3
   16a84:	strh	r1, [r2, #-2]
   16a88:	ldr	r3, [r0, #12]
   16a8c:	eor	r3, r3, r5
   16a90:	movw	r2, #31153	; 0x79b1
   16a94:	movt	r2, #40503	; 0x9e37
   16a98:	mul	r3, r2, r3
   16a9c:	eor	r3, r3, r1
   16aa0:	mul	r3, r2, r3
   16aa4:	str	r3, [r0, #12]
   16aa8:	mov	r2, r5
   16aac:	mov	r1, r6
   16ab0:	bl	162d8 <flatcc_builder_create_cached_vtable@@Base>
   16ab4:	subs	r7, r0, #0
   16ab8:	bne	16af0 <flatcc_builder_end_table@@Base+0xb8>
   16abc:	mov	r0, r7
   16ac0:	add	sp, sp, #20
   16ac4:	ldrd	r4, [sp]
   16ac8:	ldrd	r6, [sp, #8]
   16acc:	add	sp, sp, #16
   16ad0:	pop	{pc}		; (ldr pc, [sp], #4)
   16ad4:	ldr	r3, [pc, #284]	; 16bf8 <flatcc_builder_end_table@@Base+0x1c0>
   16ad8:	movw	r2, #1317	; 0x525
   16adc:	movw	r1, #57588	; 0xe0f4
   16ae0:	movt	r1, #1
   16ae4:	movw	r0, #58296	; 0xe3b8
   16ae8:	movt	r0, #1
   16aec:	bl	124b4 <__assert_fail@plt>
   16af0:	mov	r2, r5
   16af4:	mov	r1, #0
   16af8:	mov	r0, r6
   16afc:	bl	12484 <memset@plt>
   16b00:	ldr	r3, [r4, #32]
   16b04:	ldr	r2, [r4, #76]	; 0x4c
   16b08:	ldr	r3, [r3, #20]
   16b0c:	add	r2, r2, r3
   16b10:	str	r7, [sp, #8]
   16b14:	ldr	r3, [r4]
   16b18:	sub	r3, r3, r2
   16b1c:	asr	r3, r3, #1
   16b20:	str	r3, [sp, #4]
   16b24:	str	r2, [sp]
   16b28:	ldrh	r3, [r4, #130]	; 0x82
   16b2c:	ldr	r2, [r4, #20]
   16b30:	ldr	r1, [r4, #16]
   16b34:	mov	r0, r4
   16b38:	bl	16688 <flatcc_builder_create_table@@Base>
   16b3c:	subs	r7, r0, #0
   16b40:	beq	16abc <flatcc_builder_end_table@@Base+0x84>
   16b44:	ldr	r3, [r4, #32]
   16b48:	ldr	r2, [r3, #24]
   16b4c:	str	r2, [r4, #12]
   16b50:	ldrh	r2, [r3, #28]
   16b54:	strh	r2, [r4, #8]
   16b58:	ldr	r2, [r4, #52]	; 0x34
   16b5c:	ldr	r1, [r3, #16]
   16b60:	add	r2, r2, r1
   16b64:	str	r2, [r4, #4]
   16b68:	ldr	r2, [r4, #76]	; 0x4c
   16b6c:	ldr	r3, [r3, #20]
   16b70:	add	r3, r2, r3
   16b74:	str	r3, [r4]
   16b78:	ldr	r2, [r4, #20]
   16b7c:	mov	r1, #0
   16b80:	ldr	r0, [r4, #16]
   16b84:	bl	12484 <memset@plt>
   16b88:	ldr	r2, [r4, #32]
   16b8c:	ldr	r3, [r2, #8]
   16b90:	str	r3, [r4, #20]
   16b94:	ldr	r0, [r2]
   16b98:	str	r0, [r4, #28]
   16b9c:	ldr	r1, [r2, #4]
   16ba0:	ldr	r3, [r4, #60]	; 0x3c
   16ba4:	add	r3, r3, r0
   16ba8:	str	r3, [r4, #16]
   16bac:	ldr	r3, [r4, #64]	; 0x40
   16bb0:	sub	r3, r3, r0
   16bb4:	cmp	r3, r1
   16bb8:	movcs	r3, r1
   16bbc:	str	r3, [r4, #24]
   16bc0:	str	r1, [r2, #4]
   16bc4:	ldrh	r3, [r4, #130]	; 0x82
   16bc8:	ldrh	r2, [r4, #128]	; 0x80
   16bcc:	cmp	r2, r3
   16bd0:	strhcc	r3, [r4, #128]	; 0x80
   16bd4:	ldr	r3, [r4, #32]
   16bd8:	ldrh	r2, [r3, #12]
   16bdc:	strh	r2, [r4, #130]	; 0x82
   16be0:	sub	r3, r3, #36	; 0x24
   16be4:	str	r3, [r4, #32]
   16be8:	ldr	r3, [r4, #156]	; 0x9c
   16bec:	sub	r3, r3, #1
   16bf0:	str	r3, [r4, #156]	; 0x9c
   16bf4:	b	16abc <flatcc_builder_end_table@@Base+0x84>
   16bf8:	andeq	sp, r1, r4, asr #29

00016bfc <flatcc_builder_create_vector@@Base>:
   16bfc:	strd	r4, [sp, #-16]!
   16c00:	str	r6, [sp, #8]
   16c04:	str	lr, [sp, #12]
   16c08:	sub	sp, sp, #88	; 0x58
   16c0c:	mov	r4, r0
   16c10:	ldrh	r0, [sp, #104]	; 0x68
   16c14:	ldr	ip, [sp, #108]	; 0x6c
   16c18:	cmp	r2, ip
   16c1c:	bhi	16d10 <flatcc_builder_create_vector@@Base+0x114>
   16c20:	cmp	r0, #4
   16c24:	movcc	r0, #4
   16c28:	ldrh	ip, [r4, #128]	; 0x80
   16c2c:	cmp	ip, r0
   16c30:	strhcc	r0, [r4, #128]	; 0x80
   16c34:	mul	r3, r3, r2
   16c38:	str	r2, [sp, #84]	; 0x54
   16c3c:	ldr	r2, [r4, #136]	; 0x88
   16c40:	sub	ip, r2, r3
   16c44:	sub	r0, r0, #1
   16c48:	and	r0, r0, ip
   16c4c:	mov	ip, #4
   16c50:	str	ip, [sp, #12]
   16c54:	add	lr, sp, #84	; 0x54
   16c58:	str	lr, [sp, #20]
   16c5c:	str	ip, [sp, #24]
   16c60:	mov	ip, #1
   16c64:	str	ip, [sp, #16]
   16c68:	cmp	r3, #0
   16c6c:	beq	16c88 <flatcc_builder_create_vector@@Base+0x8c>
   16c70:	add	ip, r3, #4
   16c74:	str	ip, [sp, #12]
   16c78:	str	r1, [sp, #28]
   16c7c:	str	r3, [sp, #32]
   16c80:	mov	r3, #2
   16c84:	str	r3, [sp, #16]
   16c88:	cmp	r0, #0
   16c8c:	beq	16cc0 <flatcc_builder_create_vector@@Base+0xc4>
   16c90:	ldr	r3, [sp, #12]
   16c94:	add	r3, r3, r0
   16c98:	str	r3, [sp, #12]
   16c9c:	ldr	r3, [sp, #16]
   16ca0:	add	r3, r3, #1
   16ca4:	add	r1, sp, #88	; 0x58
   16ca8:	add	ip, r1, r3, lsl #3
   16cac:	movw	r1, #55716	; 0xd9a4
   16cb0:	movt	r1, #1
   16cb4:	str	r1, [ip, #-76]	; 0xffffffb4
   16cb8:	str	r0, [ip, #-72]	; 0xffffffb8
   16cbc:	str	r3, [sp, #16]
   16cc0:	ldr	r3, [sp, #12]
   16cc4:	sub	r5, r2, r3
   16cc8:	cmp	r2, r5
   16ccc:	ble	16d2c <flatcc_builder_create_vector@@Base+0x130>
   16cd0:	str	r3, [sp]
   16cd4:	ldr	r6, [r4, #44]	; 0x2c
   16cd8:	mov	r3, r5
   16cdc:	ldr	r2, [sp, #16]
   16ce0:	add	r1, sp, #20
   16ce4:	ldr	r0, [r4, #36]	; 0x24
   16ce8:	blx	r6
   16cec:	cmp	r0, #0
   16cf0:	bne	16d48 <flatcc_builder_create_vector@@Base+0x14c>
   16cf4:	str	r5, [r4, #136]	; 0x88
   16cf8:	mov	r0, r5
   16cfc:	add	sp, sp, #88	; 0x58
   16d00:	ldrd	r4, [sp]
   16d04:	ldr	r6, [sp, #8]
   16d08:	add	sp, sp, #12
   16d0c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d10:	ldr	r3, [pc, #76]	; 16d64 <flatcc_builder_create_vector@@Base+0x168>
   16d14:	movw	r2, #1365	; 0x555
   16d18:	movw	r1, #57588	; 0xe0f4
   16d1c:	movt	r1, #1
   16d20:	movw	r0, #58340	; 0xe3e4
   16d24:	movt	r0, #1
   16d28:	bl	124b4 <__assert_fail@plt>
   16d2c:	ldr	r3, [pc, #52]	; 16d68 <flatcc_builder_create_vector@@Base+0x16c>
   16d30:	movw	r2, #647	; 0x287
   16d34:	movw	r1, #57588	; 0xe0f4
   16d38:	movt	r1, #1
   16d3c:	movw	r0, #57672	; 0xe148
   16d40:	movt	r0, #1
   16d44:	bl	124b4 <__assert_fail@plt>
   16d48:	ldr	r3, [pc, #24]	; 16d68 <flatcc_builder_create_vector@@Base+0x16c>
   16d4c:	movw	r2, #651	; 0x28b
   16d50:	movw	r1, #57588	; 0xe0f4
   16d54:	movt	r1, #1
   16d58:	movw	r0, #57672	; 0xe148
   16d5c:	movt	r0, #1
   16d60:	bl	124b4 <__assert_fail@plt>
   16d64:	andeq	sp, r1, r0, ror #29
   16d68:	strdeq	sp, [r1], -r0

00016d6c <flatcc_builder_end_vector@@Base>:
   16d6c:	strd	r4, [sp, #-12]!
   16d70:	str	lr, [sp, #8]
   16d74:	sub	sp, sp, #12
   16d78:	ldr	r1, [r0, #32]
   16d7c:	ldrh	r3, [r1, #14]
   16d80:	cmp	r3, #4
   16d84:	bne	16dc8 <flatcc_builder_end_vector@@Base+0x5c>
   16d88:	mov	r4, r0
   16d8c:	ldr	r3, [r1, #16]
   16d90:	ldr	r2, [r1, #20]
   16d94:	ldr	r1, [r1, #24]
   16d98:	str	r1, [sp, #4]
   16d9c:	ldrh	r1, [r0, #130]	; 0x82
   16da0:	str	r1, [sp]
   16da4:	ldr	r1, [r0, #16]
   16da8:	bl	16bfc <flatcc_builder_create_vector@@Base>
   16dac:	subs	r5, r0, #0
   16db0:	bne	16de4 <flatcc_builder_end_vector@@Base+0x78>
   16db4:	mov	r0, r5
   16db8:	add	sp, sp, #12
   16dbc:	ldrd	r4, [sp]
   16dc0:	add	sp, sp, #8
   16dc4:	pop	{pc}		; (ldr pc, [sp], #4)
   16dc8:	ldr	r3, [pc, #148]	; 16e64 <flatcc_builder_end_vector@@Base+0xf8>
   16dcc:	movw	r2, #1400	; 0x578
   16dd0:	movw	r1, #57588	; 0xe0f4
   16dd4:	movt	r1, #1
   16dd8:	movw	r0, #57900	; 0xe22c
   16ddc:	movt	r0, #1
   16de0:	bl	124b4 <__assert_fail@plt>
   16de4:	ldr	r2, [r4, #20]
   16de8:	mov	r1, #0
   16dec:	ldr	r0, [r4, #16]
   16df0:	bl	12484 <memset@plt>
   16df4:	ldr	r2, [r4, #32]
   16df8:	ldr	r3, [r2, #8]
   16dfc:	str	r3, [r4, #20]
   16e00:	ldr	r0, [r2]
   16e04:	str	r0, [r4, #28]
   16e08:	ldr	r1, [r2, #4]
   16e0c:	ldr	r3, [r4, #60]	; 0x3c
   16e10:	add	r3, r3, r0
   16e14:	str	r3, [r4, #16]
   16e18:	ldr	r3, [r4, #64]	; 0x40
   16e1c:	sub	r3, r3, r0
   16e20:	cmp	r3, r1
   16e24:	movcs	r3, r1
   16e28:	str	r3, [r4, #24]
   16e2c:	str	r1, [r2, #4]
   16e30:	ldrh	r3, [r4, #130]	; 0x82
   16e34:	ldrh	r2, [r4, #128]	; 0x80
   16e38:	cmp	r2, r3
   16e3c:	strhcc	r3, [r4, #128]	; 0x80
   16e40:	ldr	r3, [r4, #32]
   16e44:	ldrh	r2, [r3, #12]
   16e48:	strh	r2, [r4, #130]	; 0x82
   16e4c:	sub	r3, r3, #36	; 0x24
   16e50:	str	r3, [r4, #32]
   16e54:	ldr	r3, [r4, #156]	; 0x9c
   16e58:	sub	r3, r3, #1
   16e5c:	str	r3, [r4, #156]	; 0x9c
   16e60:	b	16db4 <flatcc_builder_end_vector@@Base+0x48>
   16e64:	andeq	sp, r1, r0, lsl #30

00016e68 <flatcc_builder_vector_count@@Base>:
   16e68:	ldr	r3, [r0, #32]
   16e6c:	ldr	r0, [r3, #20]
   16e70:	bx	lr

00016e74 <flatcc_builder_vector_edit@@Base>:
   16e74:	ldr	r0, [r0, #16]
   16e78:	bx	lr

00016e7c <flatcc_builder_create_offset_vector_direct@@Base>:
   16e7c:	str	r4, [sp, #-8]!
   16e80:	str	lr, [sp, #4]
   16e84:	mov	r3, #0
   16e88:	bl	142d8 <flatcc_builder_default_alloc@@Base+0x3b8>
   16e8c:	ldr	r4, [sp]
   16e90:	add	sp, sp, #4
   16e94:	pop	{pc}		; (ldr pc, [sp], #4)

00016e98 <flatcc_builder_end_offset_vector@@Base>:
   16e98:	strd	r4, [sp, #-16]!
   16e9c:	str	r6, [sp, #8]
   16ea0:	str	lr, [sp, #12]
   16ea4:	ldr	r3, [r0, #32]
   16ea8:	ldrh	r2, [r3, #14]
   16eac:	cmp	r2, #5
   16eb0:	bne	16ee0 <flatcc_builder_end_offset_vector@@Base+0x48>
   16eb4:	mov	r4, r0
   16eb8:	ldr	r2, [r3, #20]
   16ebc:	ldr	r1, [r0, #16]
   16ec0:	bl	16e7c <flatcc_builder_create_offset_vector_direct@@Base>
   16ec4:	subs	r5, r0, #0
   16ec8:	bne	16efc <flatcc_builder_end_offset_vector@@Base+0x64>
   16ecc:	mov	r0, r5
   16ed0:	ldrd	r4, [sp]
   16ed4:	ldr	r6, [sp, #8]
   16ed8:	add	sp, sp, #12
   16edc:	pop	{pc}		; (ldr pc, [sp], #4)
   16ee0:	ldr	r3, [pc, #148]	; 16f7c <flatcc_builder_end_offset_vector@@Base+0xe4>
   16ee4:	movw	r2, #1480	; 0x5c8
   16ee8:	movw	r1, #57588	; 0xe0f4
   16eec:	movt	r1, #1
   16ef0:	movw	r0, #58008	; 0xe298
   16ef4:	movt	r0, #1
   16ef8:	bl	124b4 <__assert_fail@plt>
   16efc:	ldr	r2, [r4, #20]
   16f00:	mov	r1, #0
   16f04:	ldr	r0, [r4, #16]
   16f08:	bl	12484 <memset@plt>
   16f0c:	ldr	r2, [r4, #32]
   16f10:	ldr	r3, [r2, #8]
   16f14:	str	r3, [r4, #20]
   16f18:	ldr	r0, [r2]
   16f1c:	str	r0, [r4, #28]
   16f20:	ldr	r1, [r2, #4]
   16f24:	ldr	r3, [r4, #60]	; 0x3c
   16f28:	add	r3, r3, r0
   16f2c:	str	r3, [r4, #16]
   16f30:	ldr	r3, [r4, #64]	; 0x40
   16f34:	sub	r3, r3, r0
   16f38:	cmp	r3, r1
   16f3c:	movcs	r3, r1
   16f40:	str	r3, [r4, #24]
   16f44:	str	r1, [r2, #4]
   16f48:	ldrh	r3, [r4, #130]	; 0x82
   16f4c:	ldrh	r2, [r4, #128]	; 0x80
   16f50:	cmp	r2, r3
   16f54:	strhcc	r3, [r4, #128]	; 0x80
   16f58:	ldr	r3, [r4, #32]
   16f5c:	ldrh	r2, [r3, #12]
   16f60:	strh	r2, [r4, #130]	; 0x82
   16f64:	sub	r3, r3, #36	; 0x24
   16f68:	str	r3, [r4, #32]
   16f6c:	ldr	r3, [r4, #156]	; 0x9c
   16f70:	sub	r3, r3, #1
   16f74:	str	r3, [r4, #156]	; 0x9c
   16f78:	b	16ecc <flatcc_builder_end_offset_vector@@Base+0x34>
   16f7c:	andeq	sp, r1, ip, lsl pc

00016f80 <flatcc_builder_create_offset_vector@@Base>:
   16f80:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16f84:	strd	r6, [sp, #8]
   16f88:	str	r8, [sp, #16]
   16f8c:	str	lr, [sp, #20]
   16f90:	mov	r5, r0
   16f94:	mov	r7, r1
   16f98:	mov	r6, r2
   16f9c:	bl	15d08 <flatcc_builder_start_offset_vector@@Base>
   16fa0:	subs	r4, r0, #0
   16fa4:	movne	r4, #0
   16fa8:	beq	16fc4 <flatcc_builder_create_offset_vector@@Base+0x44>
   16fac:	mov	r0, r4
   16fb0:	ldrd	r4, [sp]
   16fb4:	ldrd	r6, [sp, #8]
   16fb8:	ldr	r8, [sp, #16]
   16fbc:	add	sp, sp, #20
   16fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   16fc4:	mov	r1, r6
   16fc8:	mov	r0, r5
   16fcc:	bl	1560c <flatcc_builder_extend_offset_vector@@Base>
   16fd0:	cmp	r0, #0
   16fd4:	beq	16fac <flatcc_builder_create_offset_vector@@Base+0x2c>
   16fd8:	lsl	r2, r6, #2
   16fdc:	mov	r1, r7
   16fe0:	bl	1240c <memcpy@plt>
   16fe4:	mov	r0, r5
   16fe8:	bl	16e98 <flatcc_builder_end_offset_vector@@Base>
   16fec:	mov	r4, r0
   16ff0:	b	16fac <flatcc_builder_create_offset_vector@@Base+0x2c>

00016ff4 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   16ff4:	strd	r4, [sp, #-16]!
   16ff8:	str	r6, [sp, #8]
   16ffc:	str	lr, [sp, #12]
   17000:	mov	r4, r0
   17004:	ldr	r2, [r0, #32]
   17008:	ldrh	r0, [r2, #14]
   1700c:	cmp	r0, #5
   17010:	bne	17044 <flatcc_builder_end_offset_vector_for_unions@@Base+0x50>
   17014:	mov	r3, r1
   17018:	ldr	r2, [r2, #20]
   1701c:	ldr	r1, [r4, #16]
   17020:	mov	r0, r4
   17024:	bl	142d8 <flatcc_builder_default_alloc@@Base+0x3b8>
   17028:	subs	r5, r0, #0
   1702c:	bne	17060 <flatcc_builder_end_offset_vector_for_unions@@Base+0x6c>
   17030:	mov	r0, r5
   17034:	ldrd	r4, [sp]
   17038:	ldr	r6, [sp, #8]
   1703c:	add	sp, sp, #12
   17040:	pop	{pc}		; (ldr pc, [sp], #4)
   17044:	ldr	r3, [pc, #148]	; 170e0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xec>
   17048:	movw	r2, #1493	; 0x5d5
   1704c:	movw	r1, #57588	; 0xe0f4
   17050:	movt	r1, #1
   17054:	movw	r0, #58008	; 0xe298
   17058:	movt	r0, #1
   1705c:	bl	124b4 <__assert_fail@plt>
   17060:	ldr	r2, [r4, #20]
   17064:	mov	r1, #0
   17068:	ldr	r0, [r4, #16]
   1706c:	bl	12484 <memset@plt>
   17070:	ldr	r2, [r4, #32]
   17074:	ldr	r3, [r2, #8]
   17078:	str	r3, [r4, #20]
   1707c:	ldr	r0, [r2]
   17080:	str	r0, [r4, #28]
   17084:	ldr	r1, [r2, #4]
   17088:	ldr	r3, [r4, #60]	; 0x3c
   1708c:	add	r3, r3, r0
   17090:	str	r3, [r4, #16]
   17094:	ldr	r3, [r4, #64]	; 0x40
   17098:	sub	r3, r3, r0
   1709c:	cmp	r3, r1
   170a0:	movcs	r3, r1
   170a4:	str	r3, [r4, #24]
   170a8:	str	r1, [r2, #4]
   170ac:	ldrh	r3, [r4, #130]	; 0x82
   170b0:	ldrh	r2, [r4, #128]	; 0x80
   170b4:	cmp	r2, r3
   170b8:	strhcc	r3, [r4, #128]	; 0x80
   170bc:	ldr	r3, [r4, #32]
   170c0:	ldrh	r2, [r3, #12]
   170c4:	strh	r2, [r4, #130]	; 0x82
   170c8:	sub	r3, r3, #36	; 0x24
   170cc:	str	r3, [r4, #32]
   170d0:	ldr	r3, [r4, #156]	; 0x9c
   170d4:	sub	r3, r3, #1
   170d8:	str	r3, [r4, #156]	; 0x9c
   170dc:	b	17030 <flatcc_builder_end_offset_vector_for_unions@@Base+0x3c>
   170e0:	andeq	sp, r1, r0, asr #30

000170e4 <flatcc_builder_offset_vector_edit@@Base>:
   170e4:	ldr	r0, [r0, #16]
   170e8:	bx	lr

000170ec <flatcc_builder_offset_vector_count@@Base>:
   170ec:	ldr	r3, [r0, #32]
   170f0:	ldr	r0, [r3, #20]
   170f4:	bx	lr

000170f8 <flatcc_builder_create_union_vector_direct@@Base>:
   170f8:	strd	r4, [sp, #-20]!	; 0xffffffec
   170fc:	strd	r6, [sp, #8]
   17100:	str	lr, [sp, #16]
   17104:	sub	sp, sp, #12
   17108:	mov	r4, r0
   1710c:	mov	r5, r1
   17110:	mov	r6, r2
   17114:	mov	r1, r3
   17118:	mov	r3, r2
   1711c:	ldr	r2, [sp, #32]
   17120:	mov	r0, r5
   17124:	bl	142d8 <flatcc_builder_default_alloc@@Base+0x3b8>
   17128:	subs	r7, r0, #0
   1712c:	bne	17154 <flatcc_builder_create_union_vector_direct@@Base+0x5c>
   17130:	mov	r3, #0
   17134:	str	r3, [r4]
   17138:	str	r3, [r4, #4]
   1713c:	mov	r0, r4
   17140:	add	sp, sp, #12
   17144:	ldrd	r4, [sp]
   17148:	ldrd	r6, [sp, #8]
   1714c:	add	sp, sp, #16
   17150:	pop	{pc}		; (ldr pc, [sp], #4)
   17154:	mvn	r3, #0
   17158:	str	r3, [sp, #4]
   1715c:	mov	r3, #1
   17160:	str	r3, [sp]
   17164:	ldr	r2, [sp, #32]
   17168:	mov	r1, r6
   1716c:	mov	r0, r5
   17170:	bl	16bfc <flatcc_builder_create_vector@@Base>
   17174:	cmp	r0, #0
   17178:	moveq	r3, #0
   1717c:	streq	r3, [r4]
   17180:	strne	r0, [r4]
   17184:	str	r7, [r4, #4]
   17188:	b	1713c <flatcc_builder_create_union_vector_direct@@Base+0x44>

0001718c <flatcc_builder_create_union_vector@@Base>:
   1718c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17190:	strd	r6, [sp, #8]
   17194:	str	r8, [sp, #16]
   17198:	str	lr, [sp, #20]
   1719c:	sub	sp, sp, #16
   171a0:	mov	r5, r0
   171a4:	mov	r4, r1
   171a8:	mov	r7, r2
   171ac:	mov	r6, r3
   171b0:	mov	r0, r1
   171b4:	bl	15d08 <flatcc_builder_start_offset_vector@@Base>
   171b8:	cmp	r0, #0
   171bc:	beq	171e8 <flatcc_builder_create_union_vector@@Base+0x5c>
   171c0:	mov	r3, #0
   171c4:	str	r3, [r5]
   171c8:	str	r3, [r5, #4]
   171cc:	mov	r0, r5
   171d0:	add	sp, sp, #16
   171d4:	ldrd	r4, [sp]
   171d8:	ldrd	r6, [sp, #8]
   171dc:	ldr	r8, [sp, #16]
   171e0:	add	sp, sp, #20
   171e4:	pop	{pc}		; (ldr pc, [sp], #4)
   171e8:	mov	r1, r6
   171ec:	mov	r0, r4
   171f0:	bl	1560c <flatcc_builder_extend_offset_vector@@Base>
   171f4:	cmp	r0, #0
   171f8:	moveq	r3, #0
   171fc:	streq	r3, [r5]
   17200:	streq	r3, [r5, #4]
   17204:	beq	171cc <flatcc_builder_create_union_vector@@Base+0x40>
   17208:	ldr	r8, [r4, #20]
   1720c:	add	r1, r6, r8
   17210:	str	r1, [r4, #20]
   17214:	ldr	r3, [r4, #24]
   17218:	cmp	r1, r3
   1721c:	bcs	17300 <flatcc_builder_create_union_vector@@Base+0x174>
   17220:	ldr	r3, [r4, #16]
   17224:	adds	r2, r3, r8
   17228:	beq	17318 <flatcc_builder_create_union_vector@@Base+0x18c>
   1722c:	cmp	r6, #0
   17230:	beq	17260 <flatcc_builder_create_union_vector@@Base+0xd4>
   17234:	mov	r1, r7
   17238:	sub	ip, r2, #1
   1723c:	sub	r0, r3, #4
   17240:	add	r7, r7, r6, lsl #3
   17244:	ldrb	lr, [r1]
   17248:	strb	lr, [ip, #1]!
   1724c:	ldr	lr, [r1, #4]
   17250:	str	lr, [r0, #4]!
   17254:	add	r1, r1, #8
   17258:	cmp	r1, r7
   1725c:	bne	17244 <flatcc_builder_create_union_vector@@Base+0xb8>
   17260:	str	r6, [sp]
   17264:	mov	r1, r4
   17268:	add	r0, sp, #8
   1726c:	bl	170f8 <flatcc_builder_create_union_vector_direct@@Base>
   17270:	ldr	r7, [sp, #8]
   17274:	ldr	r6, [sp, #12]
   17278:	ldr	r2, [r4, #20]
   1727c:	mov	r1, #0
   17280:	ldr	r0, [r4, #16]
   17284:	bl	12484 <memset@plt>
   17288:	ldr	r2, [r4, #32]
   1728c:	ldr	r3, [r2, #8]
   17290:	str	r3, [r4, #20]
   17294:	ldr	r0, [r2]
   17298:	str	r0, [r4, #28]
   1729c:	ldr	r1, [r2, #4]
   172a0:	ldr	r3, [r4, #60]	; 0x3c
   172a4:	add	r3, r3, r0
   172a8:	str	r3, [r4, #16]
   172ac:	ldr	r3, [r4, #64]	; 0x40
   172b0:	sub	r3, r3, r0
   172b4:	cmp	r3, r1
   172b8:	movcs	r3, r1
   172bc:	str	r3, [r4, #24]
   172c0:	str	r1, [r2, #4]
   172c4:	ldrh	r3, [r4, #130]	; 0x82
   172c8:	ldrh	r2, [r4, #128]	; 0x80
   172cc:	cmp	r2, r3
   172d0:	strhcc	r3, [r4, #128]	; 0x80
   172d4:	ldr	r3, [r4, #32]
   172d8:	ldrh	r2, [r3, #12]
   172dc:	strh	r2, [r4, #130]	; 0x82
   172e0:	sub	r3, r3, #36	; 0x24
   172e4:	str	r3, [r4, #32]
   172e8:	ldr	r3, [r4, #156]	; 0x9c
   172ec:	sub	r3, r3, #1
   172f0:	str	r3, [r4, #156]	; 0x9c
   172f4:	str	r7, [r5]
   172f8:	str	r6, [r5, #4]
   172fc:	b	171cc <flatcc_builder_create_union_vector@@Base+0x40>
   17300:	mvn	r2, #3
   17304:	add	r1, r1, #1
   17308:	mov	r0, r4
   1730c:	bl	13e98 <main@@Base+0x48>
   17310:	cmp	r0, #0
   17314:	beq	17220 <flatcc_builder_create_union_vector@@Base+0x94>
   17318:	mov	r3, #0
   1731c:	str	r3, [r5]
   17320:	str	r3, [r5, #4]
   17324:	b	171cc <flatcc_builder_create_union_vector@@Base+0x40>

00017328 <flatcc_builder_start_union_vector@@Base>:
   17328:	str	r4, [sp, #-8]!
   1732c:	str	lr, [sp, #4]
   17330:	mov	r4, r0
   17334:	mov	r1, #4
   17338:	bl	1416c <flatcc_builder_default_alloc@@Base+0x24c>
   1733c:	cmp	r0, #0
   17340:	bne	173a4 <flatcc_builder_start_union_vector@@Base+0x7c>
   17344:	ldr	r3, [r4, #32]
   17348:	mov	r2, #8
   1734c:	str	r2, [r3, #16]
   17350:	ldr	r3, [r4, #32]
   17354:	mov	r2, #0
   17358:	str	r2, [r3, #20]
   1735c:	ldr	r3, [r4, #32]
   17360:	mov	r2, #7
   17364:	strh	r2, [r3, #14]
   17368:	ldr	r1, [r4, #28]
   1736c:	ldr	r2, [r4, #60]	; 0x3c
   17370:	add	r2, r2, r1
   17374:	str	r2, [r4, #16]
   17378:	ldr	r3, [r4, #64]	; 0x40
   1737c:	sub	r3, r3, r1
   17380:	cmn	r3, #4
   17384:	mvnhi	r3, #3
   17388:	str	r3, [r4, #24]
   1738c:	ldr	r3, [r4, #32]
   17390:	mvn	r2, #3
   17394:	str	r2, [r3, #4]
   17398:	ldr	r4, [sp]
   1739c:	add	sp, sp, #4
   173a0:	pop	{pc}		; (ldr pc, [sp], #4)
   173a4:	mvn	r0, #0
   173a8:	b	17398 <flatcc_builder_start_union_vector@@Base+0x70>

000173ac <flatcc_builder_end_union_vector@@Base>:
   173ac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   173b0:	strd	r6, [sp, #8]
   173b4:	str	r8, [sp, #16]
   173b8:	str	lr, [sp, #20]
   173bc:	sub	sp, sp, #16
   173c0:	ldr	r3, [r1, #32]
   173c4:	ldrh	r2, [r3, #14]
   173c8:	cmp	r2, #7
   173cc:	bne	174f4 <flatcc_builder_end_union_vector@@Base+0x148>
   173d0:	mov	r6, r0
   173d4:	mov	r4, r1
   173d8:	ldr	r5, [r3, #20]
   173dc:	ldr	r8, [r1, #20]
   173e0:	add	r1, r5, r5, lsl #2
   173e4:	add	r1, r1, r8
   173e8:	str	r1, [r4, #20]
   173ec:	ldr	r3, [r4, #24]
   173f0:	cmp	r1, r3
   173f4:	bcs	17510 <flatcc_builder_end_union_vector@@Base+0x164>
   173f8:	ldr	r7, [r4, #16]
   173fc:	adds	r3, r7, r8
   17400:	beq	17528 <flatcc_builder_end_union_vector@@Base+0x17c>
   17404:	add	r2, r3, r5, lsl #2
   17408:	cmp	r5, #0
   1740c:	beq	1743c <flatcc_builder_end_union_vector@@Base+0x90>
   17410:	mov	r1, r7
   17414:	sub	ip, r2, #1
   17418:	sub	r0, r3, #4
   1741c:	add	r7, r7, r5, lsl #3
   17420:	ldrb	lr, [r1]
   17424:	strb	lr, [ip, #1]!
   17428:	ldr	lr, [r1, #4]
   1742c:	str	lr, [r0, #4]!
   17430:	add	r1, r1, #8
   17434:	cmp	r1, r7
   17438:	bne	17420 <flatcc_builder_end_union_vector@@Base+0x74>
   1743c:	str	r5, [sp]
   17440:	mov	r1, r4
   17444:	add	r0, sp, #8
   17448:	bl	170f8 <flatcc_builder_create_union_vector_direct@@Base>
   1744c:	ldr	r7, [sp, #8]
   17450:	ldr	r5, [sp, #12]
   17454:	ldr	r2, [r4, #20]
   17458:	mov	r1, #0
   1745c:	ldr	r0, [r4, #16]
   17460:	bl	12484 <memset@plt>
   17464:	ldr	r2, [r4, #32]
   17468:	ldr	r3, [r2, #8]
   1746c:	str	r3, [r4, #20]
   17470:	ldr	r0, [r2]
   17474:	str	r0, [r4, #28]
   17478:	ldr	r1, [r2, #4]
   1747c:	ldr	r3, [r4, #60]	; 0x3c
   17480:	add	r3, r3, r0
   17484:	str	r3, [r4, #16]
   17488:	ldr	r3, [r4, #64]	; 0x40
   1748c:	sub	r3, r3, r0
   17490:	cmp	r3, r1
   17494:	movcs	r3, r1
   17498:	str	r3, [r4, #24]
   1749c:	str	r1, [r2, #4]
   174a0:	ldrh	r3, [r4, #130]	; 0x82
   174a4:	ldrh	r2, [r4, #128]	; 0x80
   174a8:	cmp	r2, r3
   174ac:	strhcc	r3, [r4, #128]	; 0x80
   174b0:	ldr	r3, [r4, #32]
   174b4:	ldrh	r2, [r3, #12]
   174b8:	strh	r2, [r4, #130]	; 0x82
   174bc:	sub	r3, r3, #36	; 0x24
   174c0:	str	r3, [r4, #32]
   174c4:	ldr	r3, [r4, #156]	; 0x9c
   174c8:	sub	r3, r3, #1
   174cc:	str	r3, [r4, #156]	; 0x9c
   174d0:	str	r7, [r6]
   174d4:	str	r5, [r6, #4]
   174d8:	mov	r0, r6
   174dc:	add	sp, sp, #16
   174e0:	ldrd	r4, [sp]
   174e4:	ldrd	r6, [sp, #8]
   174e8:	ldr	r8, [sp, #16]
   174ec:	add	sp, sp, #20
   174f0:	pop	{pc}		; (ldr pc, [sp], #4)
   174f4:	ldr	r3, [pc, #60]	; 17538 <flatcc_builder_end_union_vector@@Base+0x18c>
   174f8:	movw	r2, #1617	; 0x651
   174fc:	movw	r1, #57588	; 0xe0f4
   17500:	movt	r1, #1
   17504:	movw	r0, #58360	; 0xe3f8
   17508:	movt	r0, #1
   1750c:	bl	124b4 <__assert_fail@plt>
   17510:	mvn	r2, #3
   17514:	add	r1, r1, #1
   17518:	mov	r0, r4
   1751c:	bl	13e98 <main@@Base+0x48>
   17520:	cmp	r0, #0
   17524:	beq	173f8 <flatcc_builder_end_union_vector@@Base+0x4c>
   17528:	mov	r3, #0
   1752c:	str	r3, [r6]
   17530:	str	r3, [r6, #4]
   17534:	b	174d8 <flatcc_builder_end_union_vector@@Base+0x12c>
   17538:	andeq	sp, r1, ip, ror #30

0001753c <flatcc_builder_union_vector_edit@@Base>:
   1753c:	ldr	r0, [r0, #16]
   17540:	bx	lr

00017544 <flatcc_builder_union_vector_count@@Base>:
   17544:	ldr	r3, [r0, #32]
   17548:	ldr	r0, [r3, #20]
   1754c:	bx	lr

00017550 <flatcc_builder_extend_union_vector@@Base>:
   17550:	strd	r4, [sp, #-16]!
   17554:	str	r6, [sp, #8]
   17558:	str	lr, [sp, #12]
   1755c:	mov	r4, r0
   17560:	ldr	r2, [r0, #32]
   17564:	ldr	r3, [r2, #20]
   17568:	adds	r3, r1, r3
   1756c:	movcs	ip, #1
   17570:	movcc	ip, #0
   17574:	cmn	r3, #-536870911	; 0xe0000001
   17578:	movls	r0, #0
   1757c:	movhi	r0, #1
   17580:	orrs	r0, ip, r0
   17584:	bne	175bc <flatcc_builder_extend_union_vector@@Base+0x6c>
   17588:	str	r3, [r2, #20]
   1758c:	ldr	r5, [r4, #20]
   17590:	add	r1, r5, r1, lsl #3
   17594:	str	r1, [r4, #20]
   17598:	ldr	r3, [r4, #24]
   1759c:	cmp	r1, r3
   175a0:	bcs	175d8 <flatcc_builder_extend_union_vector@@Base+0x88>
   175a4:	ldr	r0, [r4, #16]
   175a8:	add	r0, r0, r5
   175ac:	ldrd	r4, [sp]
   175b0:	ldr	r6, [sp, #8]
   175b4:	add	sp, sp, #12
   175b8:	pop	{pc}		; (ldr pc, [sp], #4)
   175bc:	ldr	r3, [pc, #52]	; 175f8 <flatcc_builder_extend_union_vector@@Base+0xa8>
   175c0:	mov	r2, #892	; 0x37c
   175c4:	movw	r1, #57588	; 0xe0f4
   175c8:	movt	r1, #1
   175cc:	movw	r0, #57872	; 0xe210
   175d0:	movt	r0, #1
   175d4:	bl	124b4 <__assert_fail@plt>
   175d8:	mvn	r2, #3
   175dc:	add	r1, r1, #1
   175e0:	mov	r0, r4
   175e4:	bl	13e98 <main@@Base+0x48>
   175e8:	cmp	r0, #0
   175ec:	movne	r0, #0
   175f0:	beq	175a4 <flatcc_builder_extend_union_vector@@Base+0x54>
   175f4:	b	175ac <flatcc_builder_extend_union_vector@@Base+0x5c>
   175f8:	ldrdeq	sp, [r1], -r4

000175fc <flatcc_builder_truncate_union_vector@@Base>:
   175fc:	str	r4, [sp, #-8]!
   17600:	str	lr, [sp, #4]
   17604:	ldr	ip, [r0, #32]
   17608:	ldrh	r3, [ip, #14]
   1760c:	cmp	r3, #7
   17610:	bne	17660 <flatcc_builder_truncate_union_vector@@Base+0x64>
   17614:	ldr	r3, [ip, #20]
   17618:	cmp	r3, r1
   1761c:	bcc	1767c <flatcc_builder_truncate_union_vector@@Base+0x80>
   17620:	sub	r3, r3, r1
   17624:	str	r3, [ip, #20]
   17628:	ldr	r3, [r0, #32]
   1762c:	ldr	r2, [r3, #16]
   17630:	mul	r2, r2, r1
   17634:	ldr	r3, [r0, #20]
   17638:	sub	r3, r3, r2
   1763c:	str	r3, [r0, #20]
   17640:	ldr	r0, [r0, #16]
   17644:	mov	r1, #0
   17648:	add	r0, r0, r3
   1764c:	bl	12484 <memset@plt>
   17650:	mov	r0, #0
   17654:	ldr	r4, [sp]
   17658:	add	sp, sp, #4
   1765c:	pop	{pc}		; (ldr pc, [sp], #4)
   17660:	ldr	r3, [pc, #48]	; 17698 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   17664:	movw	r2, #1665	; 0x681
   17668:	movw	r1, #57588	; 0xe0f4
   1766c:	movt	r1, #1
   17670:	movw	r0, #58360	; 0xe3f8
   17674:	movt	r0, #1
   17678:	bl	124b4 <__assert_fail@plt>
   1767c:	ldr	r3, [pc, #20]	; 17698 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   17680:	movw	r2, #1666	; 0x682
   17684:	movw	r1, #57588	; 0xe0f4
   17688:	movt	r1, #1
   1768c:	movw	r0, #58140	; 0xe31c
   17690:	movt	r0, #1
   17694:	bl	124b4 <__assert_fail@plt>
   17698:	andeq	sp, r1, ip, lsl #31

0001769c <flatcc_builder_union_vector_push@@Base>:
   1769c:	strd	r4, [sp, #-20]!	; 0xffffffec
   176a0:	strd	r6, [sp, #8]
   176a4:	str	lr, [sp, #16]
   176a8:	sub	sp, sp, #12
   176ac:	add	r3, sp, #8
   176b0:	stmdb	r3, {r1, r2}
   176b4:	ldr	r2, [r0, #32]
   176b8:	ldrh	r3, [r2, #14]
   176bc:	cmp	r3, #7
   176c0:	bne	1771c <flatcc_builder_union_vector_push@@Base+0x80>
   176c4:	mov	r4, r0
   176c8:	ldr	r3, [r2, #20]
   176cc:	cmn	r3, #-536870911	; 0xe0000001
   176d0:	moveq	r0, #0
   176d4:	beq	17708 <flatcc_builder_union_vector_push@@Base+0x6c>
   176d8:	add	r3, r3, #1
   176dc:	str	r3, [r2, #20]
   176e0:	ldr	r5, [r4, #20]
   176e4:	add	r3, r5, #8
   176e8:	str	r3, [r4, #20]
   176ec:	ldr	r2, [r4, #24]
   176f0:	cmp	r3, r2
   176f4:	bcs	17738 <flatcc_builder_union_vector_push@@Base+0x9c>
   176f8:	ldr	r3, [r4, #16]
   176fc:	adds	r0, r3, r5
   17700:	ldrdne	r6, [sp]
   17704:	strdne	r6, [r3, r5]
   17708:	add	sp, sp, #12
   1770c:	ldrd	r4, [sp]
   17710:	ldrd	r6, [sp, #8]
   17714:	add	sp, sp, #16
   17718:	pop	{pc}		; (ldr pc, [sp], #4)
   1771c:	ldr	r3, [pc, #52]	; 17758 <flatcc_builder_union_vector_push@@Base+0xbc>
   17720:	movw	r2, #1677	; 0x68d
   17724:	movw	r1, #57588	; 0xe0f4
   17728:	movt	r1, #1
   1772c:	movw	r0, #58360	; 0xe3f8
   17730:	movt	r0, #1
   17734:	bl	124b4 <__assert_fail@plt>
   17738:	mvn	r2, #3
   1773c:	add	r1, r5, #9
   17740:	mov	r0, r4
   17744:	bl	13e98 <main@@Base+0x48>
   17748:	cmp	r0, #0
   1774c:	movne	r0, #0
   17750:	beq	176f8 <flatcc_builder_union_vector_push@@Base+0x5c>
   17754:	b	17708 <flatcc_builder_union_vector_push@@Base+0x6c>
   17758:			; <UNDEFINED> instruction: 0x0001dfb4

0001775c <flatcc_builder_append_union_vector@@Base>:
   1775c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17760:	strd	r6, [sp, #8]
   17764:	str	r8, [sp, #16]
   17768:	str	lr, [sp, #20]
   1776c:	mov	r6, r1
   17770:	ldr	r1, [r0, #32]
   17774:	ldrh	r3, [r1, #14]
   17778:	cmp	r3, #7
   1777c:	bne	177fc <flatcc_builder_append_union_vector@@Base+0xa0>
   17780:	mov	r5, r0
   17784:	ldr	r3, [r1, #20]
   17788:	adds	r3, r2, r3
   1778c:	movcs	ip, #1
   17790:	movcc	ip, #0
   17794:	cmn	r3, #-536870911	; 0xe0000001
   17798:	movls	r0, #0
   1779c:	movhi	r0, #1
   177a0:	orrs	r0, ip, r0
   177a4:	bne	17818 <flatcc_builder_append_union_vector@@Base+0xbc>
   177a8:	str	r3, [r1, #20]
   177ac:	lsl	r4, r2, #3
   177b0:	ldr	r7, [r5, #20]
   177b4:	add	r1, r4, r7
   177b8:	str	r1, [r5, #20]
   177bc:	ldr	r3, [r5, #24]
   177c0:	cmp	r1, r3
   177c4:	bcs	17834 <flatcc_builder_append_union_vector@@Base+0xd8>
   177c8:	ldr	r5, [r5, #16]
   177cc:	adds	r5, r5, r7
   177d0:	beq	177e4 <flatcc_builder_append_union_vector@@Base+0x88>
   177d4:	mov	r2, r4
   177d8:	mov	r1, r6
   177dc:	mov	r0, r5
   177e0:	bl	1240c <memcpy@plt>
   177e4:	mov	r0, r5
   177e8:	ldrd	r4, [sp]
   177ec:	ldrd	r6, [sp, #8]
   177f0:	ldr	r8, [sp, #16]
   177f4:	add	sp, sp, #20
   177f8:	pop	{pc}		; (ldr pc, [sp], #4)
   177fc:	ldr	r3, [pc, #80]	; 17854 <flatcc_builder_append_union_vector@@Base+0xf8>
   17800:	movw	r2, #1692	; 0x69c
   17804:	movw	r1, #57588	; 0xe0f4
   17808:	movt	r1, #1
   1780c:	movw	r0, #58360	; 0xe3f8
   17810:	movt	r0, #1
   17814:	bl	124b4 <__assert_fail@plt>
   17818:	ldr	r3, [pc, #56]	; 17858 <flatcc_builder_append_union_vector@@Base+0xfc>
   1781c:	mov	r2, #892	; 0x37c
   17820:	movw	r1, #57588	; 0xe0f4
   17824:	movt	r1, #1
   17828:	movw	r0, #57872	; 0xe210
   1782c:	movt	r0, #1
   17830:	bl	124b4 <__assert_fail@plt>
   17834:	mvn	r2, #3
   17838:	add	r1, r1, #1
   1783c:	mov	r0, r5
   17840:	bl	13e98 <main@@Base+0x48>
   17844:	cmp	r0, #0
   17848:	movne	r5, #0
   1784c:	beq	177c8 <flatcc_builder_append_union_vector@@Base+0x6c>
   17850:	b	177e4 <flatcc_builder_append_union_vector@@Base+0x88>
   17854:	ldrdeq	sp, [r1], -r8
   17858:	ldrdeq	sp, [r1], -r4

0001785c <flatcc_builder_create_string@@Base>:
   1785c:	strd	r4, [sp, #-16]!
   17860:	str	r6, [sp, #8]
   17864:	str	lr, [sp, #12]
   17868:	sub	sp, sp, #88	; 0x58
   1786c:	mov	r4, r0
   17870:	str	r2, [sp, #84]	; 0x54
   17874:	ldr	r0, [r0, #136]	; 0x88
   17878:	sub	r3, r0, r2
   1787c:	sub	r3, r3, #1
   17880:	and	r3, r3, #3
   17884:	add	r3, r3, #1
   17888:	mov	ip, #4
   1788c:	str	ip, [sp, #12]
   17890:	add	lr, sp, #84	; 0x54
   17894:	str	lr, [sp, #20]
   17898:	str	ip, [sp, #24]
   1789c:	mov	ip, #1
   178a0:	str	ip, [sp, #16]
   178a4:	cmp	r2, #0
   178a8:	beq	178c4 <flatcc_builder_create_string@@Base+0x68>
   178ac:	add	ip, r2, #4
   178b0:	str	ip, [sp, #12]
   178b4:	str	r1, [sp, #28]
   178b8:	str	r2, [sp, #32]
   178bc:	mov	r2, #2
   178c0:	str	r2, [sp, #16]
   178c4:	ldr	r1, [sp, #12]
   178c8:	add	r1, r3, r1
   178cc:	str	r1, [sp, #12]
   178d0:	ldr	r2, [sp, #16]
   178d4:	add	r2, r2, #1
   178d8:	add	ip, sp, #88	; 0x58
   178dc:	add	lr, ip, r2, lsl #3
   178e0:	movw	ip, #55716	; 0xd9a4
   178e4:	movt	ip, #1
   178e8:	str	ip, [lr, #-76]	; 0xffffffb4
   178ec:	str	r3, [lr, #-72]	; 0xffffffb8
   178f0:	str	r2, [sp, #16]
   178f4:	sub	r5, r0, r1
   178f8:	cmp	r0, r5
   178fc:	ble	1793c <flatcc_builder_create_string@@Base+0xe0>
   17900:	str	r1, [sp]
   17904:	ldr	r6, [r4, #44]	; 0x2c
   17908:	mov	r3, r5
   1790c:	add	r1, sp, #20
   17910:	ldr	r0, [r4, #36]	; 0x24
   17914:	blx	r6
   17918:	cmp	r0, #0
   1791c:	bne	17958 <flatcc_builder_create_string@@Base+0xfc>
   17920:	str	r5, [r4, #136]	; 0x88
   17924:	mov	r0, r5
   17928:	add	sp, sp, #88	; 0x58
   1792c:	ldrd	r4, [sp]
   17930:	ldr	r6, [sp, #8]
   17934:	add	sp, sp, #12
   17938:	pop	{pc}		; (ldr pc, [sp], #4)
   1793c:	add	r3, ip, #588	; 0x24c
   17940:	movw	r2, #647	; 0x287
   17944:	movw	r1, #57588	; 0xe0f4
   17948:	movt	r1, #1
   1794c:	movw	r0, #57672	; 0xe148
   17950:	movt	r0, #1
   17954:	bl	124b4 <__assert_fail@plt>
   17958:	ldr	r3, [pc, #20]	; 17974 <flatcc_builder_create_string@@Base+0x118>
   1795c:	movw	r2, #651	; 0x28b
   17960:	movw	r1, #57588	; 0xe0f4
   17964:	movt	r1, #1
   17968:	movw	r0, #57672	; 0xe148
   1796c:	movt	r0, #1
   17970:	bl	124b4 <__assert_fail@plt>
   17974:	strdeq	sp, [r1], -r0

00017978 <flatcc_builder_create_string_str@@Base>:
   17978:	strd	r4, [sp, #-16]!
   1797c:	str	r6, [sp, #8]
   17980:	str	lr, [sp, #12]
   17984:	mov	r5, r0
   17988:	mov	r4, r1
   1798c:	mov	r0, r1
   17990:	bl	12460 <strlen@plt>
   17994:	mov	r2, r0
   17998:	mov	r1, r4
   1799c:	mov	r0, r5
   179a0:	bl	1785c <flatcc_builder_create_string@@Base>
   179a4:	ldrd	r4, [sp]
   179a8:	ldr	r6, [sp, #8]
   179ac:	add	sp, sp, #12
   179b0:	pop	{pc}		; (ldr pc, [sp], #4)

000179b4 <flatcc_builder_create_string_strn@@Base>:
   179b4:	strd	r4, [sp, #-16]!
   179b8:	str	r6, [sp, #8]
   179bc:	str	lr, [sp, #12]
   179c0:	mov	r6, r0
   179c4:	mov	r4, r1
   179c8:	mov	r5, r2
   179cc:	mov	r1, #0
   179d0:	mov	r0, r4
   179d4:	bl	1249c <memchr@plt>
   179d8:	cmp	r0, #0
   179dc:	subne	r5, r0, r4
   179e0:	mov	r2, r5
   179e4:	mov	r1, r4
   179e8:	mov	r0, r6
   179ec:	bl	1785c <flatcc_builder_create_string@@Base>
   179f0:	ldrd	r4, [sp]
   179f4:	ldr	r6, [sp, #8]
   179f8:	add	sp, sp, #12
   179fc:	pop	{pc}		; (ldr pc, [sp], #4)

00017a00 <flatcc_builder_end_string@@Base>:
   17a00:	strd	r4, [sp, #-16]!
   17a04:	str	r6, [sp, #8]
   17a08:	str	lr, [sp, #12]
   17a0c:	ldr	r3, [r0, #32]
   17a10:	ldrh	r2, [r3, #14]
   17a14:	cmp	r2, #6
   17a18:	bne	17a54 <flatcc_builder_end_string@@Base+0x54>
   17a1c:	mov	r4, r0
   17a20:	ldr	r2, [r0, #20]
   17a24:	ldr	r3, [r3, #20]
   17a28:	cmp	r3, r2
   17a2c:	bne	17a70 <flatcc_builder_end_string@@Base+0x70>
   17a30:	ldr	r1, [r0, #16]
   17a34:	bl	1785c <flatcc_builder_create_string@@Base>
   17a38:	subs	r5, r0, #0
   17a3c:	bne	17a8c <flatcc_builder_end_string@@Base+0x8c>
   17a40:	mov	r0, r5
   17a44:	ldrd	r4, [sp]
   17a48:	ldr	r6, [sp, #8]
   17a4c:	add	sp, sp, #12
   17a50:	pop	{pc}		; (ldr pc, [sp], #4)
   17a54:	ldr	r3, [pc, #176]	; 17b0c <flatcc_builder_end_string@@Base+0x10c>
   17a58:	movw	r2, #1732	; 0x6c4
   17a5c:	movw	r1, #57588	; 0xe0f4
   17a60:	movt	r1, #1
   17a64:	movw	r0, #58060	; 0xe2cc
   17a68:	movt	r0, #1
   17a6c:	bl	124b4 <__assert_fail@plt>
   17a70:	ldr	r3, [pc, #148]	; 17b0c <flatcc_builder_end_string@@Base+0x10c>
   17a74:	movw	r2, #1733	; 0x6c5
   17a78:	movw	r1, #57588	; 0xe0f4
   17a7c:	movt	r1, #1
   17a80:	movw	r0, #58412	; 0xe42c
   17a84:	movt	r0, #1
   17a88:	bl	124b4 <__assert_fail@plt>
   17a8c:	ldr	r2, [r4, #20]
   17a90:	mov	r1, #0
   17a94:	ldr	r0, [r4, #16]
   17a98:	bl	12484 <memset@plt>
   17a9c:	ldr	r2, [r4, #32]
   17aa0:	ldr	r3, [r2, #8]
   17aa4:	str	r3, [r4, #20]
   17aa8:	ldr	r0, [r2]
   17aac:	str	r0, [r4, #28]
   17ab0:	ldr	r1, [r2, #4]
   17ab4:	ldr	r3, [r4, #60]	; 0x3c
   17ab8:	add	r3, r3, r0
   17abc:	str	r3, [r4, #16]
   17ac0:	ldr	r3, [r4, #64]	; 0x40
   17ac4:	sub	r3, r3, r0
   17ac8:	cmp	r3, r1
   17acc:	movcs	r3, r1
   17ad0:	str	r3, [r4, #24]
   17ad4:	str	r1, [r2, #4]
   17ad8:	ldrh	r3, [r4, #130]	; 0x82
   17adc:	ldrh	r2, [r4, #128]	; 0x80
   17ae0:	cmp	r2, r3
   17ae4:	strhcc	r3, [r4, #128]	; 0x80
   17ae8:	ldr	r3, [r4, #32]
   17aec:	ldrh	r2, [r3, #12]
   17af0:	strh	r2, [r4, #130]	; 0x82
   17af4:	sub	r3, r3, #36	; 0x24
   17af8:	str	r3, [r4, #32]
   17afc:	ldr	r3, [r4, #156]	; 0x9c
   17b00:	sub	r3, r3, #1
   17b04:	str	r3, [r4, #156]	; 0x9c
   17b08:	b	17a40 <flatcc_builder_end_string@@Base+0x40>
   17b0c:	strdeq	sp, [r1], -ip

00017b10 <flatcc_builder_string_edit@@Base>:
   17b10:	ldr	r0, [r0, #16]
   17b14:	bx	lr

00017b18 <flatcc_builder_string_len@@Base>:
   17b18:	ldr	r3, [r0, #32]
   17b1c:	ldr	r0, [r3, #20]
   17b20:	bx	lr

00017b24 <flatcc_builder_table_add@@Base>:
   17b24:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17b28:	strd	r6, [sp, #8]
   17b2c:	str	r8, [sp, #16]
   17b30:	str	lr, [sp, #20]
   17b34:	mov	r5, r1
   17b38:	ldr	r1, [r0, #32]
   17b3c:	ldrh	r1, [r1, #14]
   17b40:	cmp	r1, #3
   17b44:	bne	17c04 <flatcc_builder_table_add@@Base+0xe0>
   17b48:	mov	r4, r0
   17b4c:	movw	r1, #32764	; 0x7ffc
   17b50:	cmp	r5, r1
   17b54:	bhi	17c20 <flatcc_builder_table_add@@Base+0xfc>
   17b58:	ldrh	r1, [r0, #130]	; 0x82
   17b5c:	cmp	r1, r3
   17b60:	strhcc	r3, [r0, #130]	; 0x82
   17b64:	ldr	r0, [r0, #4]
   17b68:	lsl	r1, r5, #1
   17b6c:	ldrh	r1, [r0, r1]
   17b70:	cmp	r1, #0
   17b74:	bne	17c3c <flatcc_builder_table_add@@Base+0x118>
   17b78:	ldr	r0, [r4, #12]
   17b7c:	eor	r0, r0, r5
   17b80:	movw	r1, #31153	; 0x79b1
   17b84:	movt	r1, #40503	; 0x9e37
   17b88:	mul	r0, r1, r0
   17b8c:	eor	r0, r0, r2
   17b90:	mul	r0, r1, r0
   17b94:	str	r0, [r4, #12]
   17b98:	uxth	r7, r5
   17b9c:	sub	r6, r3, #1
   17ba0:	ldr	r0, [r4, #20]
   17ba4:	add	r6, r6, r0
   17ba8:	rsb	r3, r3, #0
   17bac:	and	r6, r6, r3
   17bb0:	add	r1, r2, r6
   17bb4:	str	r1, [r4, #20]
   17bb8:	ldr	r3, [r4, #24]
   17bbc:	cmp	r1, r3
   17bc0:	bcs	17c58 <flatcc_builder_table_add@@Base+0x134>
   17bc4:	uxth	r5, r5
   17bc8:	ldr	r3, [r4, #4]
   17bcc:	lsl	r5, r5, #1
   17bd0:	add	r2, r6, #4
   17bd4:	strh	r2, [r3, r5]
   17bd8:	ldrh	r3, [r4, #8]
   17bdc:	cmp	r3, r7
   17be0:	addls	r7, r7, #1
   17be4:	strhls	r7, [r4, #8]
   17be8:	ldr	r0, [r4, #16]
   17bec:	add	r0, r0, r6
   17bf0:	ldrd	r4, [sp]
   17bf4:	ldrd	r6, [sp, #8]
   17bf8:	ldr	r8, [sp, #16]
   17bfc:	add	sp, sp, #20
   17c00:	pop	{pc}		; (ldr pc, [sp], #4)
   17c04:	ldr	r3, [pc, #108]	; 17c78 <flatcc_builder_table_add@@Base+0x154>
   17c08:	movw	r2, #1773	; 0x6ed
   17c0c:	movw	r1, #57588	; 0xe0f4
   17c10:	movt	r1, #1
   17c14:	movw	r0, #58296	; 0xe3b8
   17c18:	movt	r0, #1
   17c1c:	bl	124b4 <__assert_fail@plt>
   17c20:	ldr	r3, [pc, #80]	; 17c78 <flatcc_builder_table_add@@Base+0x154>
   17c24:	movw	r2, #1774	; 0x6ee
   17c28:	movw	r1, #57588	; 0xe0f4
   17c2c:	movt	r1, #1
   17c30:	movw	r0, #58448	; 0xe450
   17c34:	movt	r0, #1
   17c38:	bl	124b4 <__assert_fail@plt>
   17c3c:	ldr	r3, [pc, #52]	; 17c78 <flatcc_builder_table_add@@Base+0x154>
   17c40:	movw	r2, #1784	; 0x6f8
   17c44:	movw	r1, #57588	; 0xe0f4
   17c48:	movt	r1, #1
   17c4c:	movw	r0, #57672	; 0xe148
   17c50:	movt	r0, #1
   17c54:	bl	124b4 <__assert_fail@plt>
   17c58:	movw	r2, #65532	; 0xfffc
   17c5c:	add	r1, r1, #1
   17c60:	mov	r0, r4
   17c64:	bl	13e98 <main@@Base+0x48>
   17c68:	cmp	r0, #0
   17c6c:	movne	r0, #0
   17c70:	beq	17bc4 <flatcc_builder_table_add@@Base+0xa0>
   17c74:	b	17bf0 <flatcc_builder_table_add@@Base+0xcc>
   17c78:	andeq	lr, r1, r8, lsl r0

00017c7c <flatcc_builder_table_edit@@Base>:
   17c7c:	ldr	r2, [r0, #32]
   17c80:	ldrh	r2, [r2, #14]
   17c84:	cmp	r2, #3
   17c88:	bne	17ca0 <flatcc_builder_table_edit@@Base+0x24>
   17c8c:	ldr	r3, [r0, #20]
   17c90:	sub	r3, r3, r1
   17c94:	ldr	r0, [r0, #16]
   17c98:	add	r0, r0, r3
   17c9c:	bx	lr
   17ca0:	str	r4, [sp, #-8]!
   17ca4:	str	lr, [sp, #4]
   17ca8:	ldr	r3, [pc, #20]	; 17cc4 <flatcc_builder_table_edit@@Base+0x48>
   17cac:	movw	r2, #1794	; 0x702
   17cb0:	movw	r1, #57588	; 0xe0f4
   17cb4:	movt	r1, #1
   17cb8:	movw	r0, #58296	; 0xe3b8
   17cbc:	movt	r0, #1
   17cc0:	bl	124b4 <__assert_fail@plt>
   17cc4:	andeq	lr, r1, r4, lsr r0

00017cc8 <flatcc_builder_table_add_copy@@Base>:
   17cc8:	strd	r4, [sp, #-16]!
   17ccc:	str	r6, [sp, #8]
   17cd0:	str	lr, [sp, #12]
   17cd4:	mov	r6, r2
   17cd8:	mov	r5, r3
   17cdc:	ldrh	r3, [sp, #16]
   17ce0:	mov	r2, r5
   17ce4:	bl	17b24 <flatcc_builder_table_add@@Base>
   17ce8:	subs	r4, r0, #0
   17cec:	beq	17d00 <flatcc_builder_table_add_copy@@Base+0x38>
   17cf0:	mov	r2, r5
   17cf4:	mov	r1, r6
   17cf8:	mov	r0, r4
   17cfc:	bl	1240c <memcpy@plt>
   17d00:	mov	r0, r4
   17d04:	ldrd	r4, [sp]
   17d08:	ldr	r6, [sp, #8]
   17d0c:	add	sp, sp, #12
   17d10:	pop	{pc}		; (ldr pc, [sp], #4)

00017d14 <flatcc_builder_table_add_offset@@Base>:
   17d14:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17d18:	strd	r6, [sp, #8]
   17d1c:	str	r8, [sp, #16]
   17d20:	str	lr, [sp, #20]
   17d24:	ldr	r3, [r0, #32]
   17d28:	ldrh	r3, [r3, #14]
   17d2c:	cmp	r3, #3
   17d30:	bne	17df4 <flatcc_builder_table_add_offset@@Base+0xe0>
   17d34:	mov	r4, r0
   17d38:	mov	r5, r1
   17d3c:	movw	r3, #32764	; 0x7ffc
   17d40:	cmp	r1, r3
   17d44:	bhi	17e10 <flatcc_builder_table_add_offset@@Base+0xfc>
   17d48:	ldr	r2, [r0, #4]
   17d4c:	lsl	r3, r1, #1
   17d50:	ldrh	r3, [r2, r3]
   17d54:	cmp	r3, #0
   17d58:	bne	17e2c <flatcc_builder_table_add_offset@@Base+0x118>
   17d5c:	ldr	r3, [r0, #12]
   17d60:	eor	r3, r3, r1
   17d64:	movw	r2, #31153	; 0x79b1
   17d68:	movt	r2, #40503	; 0x9e37
   17d6c:	mul	r3, r2, r3
   17d70:	eor	r3, r3, #4
   17d74:	mul	r3, r2, r3
   17d78:	str	r3, [r0, #12]
   17d7c:	uxth	r7, r1
   17d80:	ldr	r6, [r0, #20]
   17d84:	add	r6, r6, #3
   17d88:	bic	r6, r6, #3
   17d8c:	add	r1, r6, #4
   17d90:	str	r1, [r0, #20]
   17d94:	ldr	r3, [r0, #24]
   17d98:	cmp	r1, r3
   17d9c:	bhi	17e48 <flatcc_builder_table_add_offset@@Base+0x134>
   17da0:	uxth	r2, r6
   17da4:	uxth	r5, r5
   17da8:	ldr	r3, [r4, #4]
   17dac:	lsl	r5, r5, #1
   17db0:	add	r1, r2, #4
   17db4:	strh	r1, [r3, r5]
   17db8:	ldrh	r3, [r4, #8]
   17dbc:	cmp	r3, r7
   17dc0:	addls	r7, r7, #1
   17dc4:	strhls	r7, [r4, #8]
   17dc8:	ldr	r3, [r4]
   17dcc:	add	r1, r3, #2
   17dd0:	str	r1, [r4]
   17dd4:	strh	r2, [r3]
   17dd8:	ldr	r0, [r4, #16]
   17ddc:	add	r0, r0, r6
   17de0:	ldrd	r4, [sp]
   17de4:	ldrd	r6, [sp, #8]
   17de8:	ldr	r8, [sp, #16]
   17dec:	add	sp, sp, #20
   17df0:	pop	{pc}		; (ldr pc, [sp], #4)
   17df4:	ldr	r3, [pc, #100]	; 17e60 <flatcc_builder_table_add_offset@@Base+0x14c>
   17df8:	movw	r2, #1811	; 0x713
   17dfc:	movw	r1, #57588	; 0xe0f4
   17e00:	movt	r1, #1
   17e04:	movw	r0, #58296	; 0xe3b8
   17e08:	movt	r0, #1
   17e0c:	bl	124b4 <__assert_fail@plt>
   17e10:	ldr	r3, [pc, #72]	; 17e60 <flatcc_builder_table_add_offset@@Base+0x14c>
   17e14:	movw	r2, #1812	; 0x714
   17e18:	movw	r1, #57588	; 0xe0f4
   17e1c:	movt	r1, #1
   17e20:	movw	r0, #58448	; 0xe450
   17e24:	movt	r0, #1
   17e28:	bl	124b4 <__assert_fail@plt>
   17e2c:	ldr	r3, [pc, #44]	; 17e60 <flatcc_builder_table_add_offset@@Base+0x14c>
   17e30:	movw	r2, #1819	; 0x71b
   17e34:	movw	r1, #57588	; 0xe0f4
   17e38:	movt	r1, #1
   17e3c:	movw	r0, #57672	; 0xe148
   17e40:	movt	r0, #1
   17e44:	bl	124b4 <__assert_fail@plt>
   17e48:	movw	r2, #65532	; 0xfffc
   17e4c:	bl	13e98 <main@@Base+0x48>
   17e50:	cmp	r0, #0
   17e54:	movne	r0, #0
   17e58:	beq	17da0 <flatcc_builder_table_add_offset@@Base+0x8c>
   17e5c:	b	17de0 <flatcc_builder_table_add_offset@@Base+0xcc>
   17e60:	andeq	lr, r1, r0, asr r0

00017e64 <flatcc_builder_table_add_union@@Base>:
   17e64:	strd	r4, [sp, #-20]!	; 0xffffffec
   17e68:	strd	r6, [sp, #8]
   17e6c:	str	lr, [sp, #16]
   17e70:	sub	sp, sp, #12
   17e74:	mov	r7, r1
   17e78:	add	r1, sp, #8
   17e7c:	stmdb	r1, {r2, r3}
   17e80:	ldrb	r6, [sp]
   17e84:	ldr	r5, [sp, #4]
   17e88:	ldr	r3, [r0, #32]
   17e8c:	ldrh	r3, [r3, #14]
   17e90:	cmp	r3, #3
   17e94:	bne	17f08 <flatcc_builder_table_add_union@@Base+0xa4>
   17e98:	mov	r4, r0
   17e9c:	clz	r3, r6
   17ea0:	lsr	r3, r3, #5
   17ea4:	cmp	r5, #0
   17ea8:	moveq	r3, #0
   17eac:	cmp	r3, #0
   17eb0:	bne	17f24 <flatcc_builder_table_add_union@@Base+0xc0>
   17eb4:	cmp	r5, #0
   17eb8:	beq	17ed0 <flatcc_builder_table_add_union@@Base+0x6c>
   17ebc:	mov	r1, r7
   17ec0:	bl	17d14 <flatcc_builder_table_add_offset@@Base>
   17ec4:	cmp	r0, #0
   17ec8:	strne	r5, [r0]
   17ecc:	beq	17f40 <flatcc_builder_table_add_union@@Base+0xdc>
   17ed0:	mov	r3, #1
   17ed4:	mov	r2, r3
   17ed8:	sub	r1, r7, #1
   17edc:	mov	r0, r4
   17ee0:	bl	17b24 <flatcc_builder_table_add@@Base>
   17ee4:	cmp	r0, #0
   17ee8:	beq	17f5c <flatcc_builder_table_add_union@@Base+0xf8>
   17eec:	strb	r6, [r0]
   17ef0:	mov	r0, #0
   17ef4:	add	sp, sp, #12
   17ef8:	ldrd	r4, [sp]
   17efc:	ldrd	r6, [sp, #8]
   17f00:	add	sp, sp, #16
   17f04:	pop	{pc}		; (ldr pc, [sp], #4)
   17f08:	ldr	r3, [pc, #104]	; 17f78 <flatcc_builder_table_add_union@@Base+0x114>
   17f0c:	movw	r2, #1518	; 0x5ee
   17f10:	movw	r1, #57588	; 0xe0f4
   17f14:	movt	r1, #1
   17f18:	movw	r0, #58296	; 0xe3b8
   17f1c:	movt	r0, #1
   17f20:	bl	124b4 <__assert_fail@plt>
   17f24:	ldr	r3, [pc, #76]	; 17f78 <flatcc_builder_table_add_union@@Base+0x114>
   17f28:	movw	r2, #1519	; 0x5ef
   17f2c:	movw	r1, #57588	; 0xe0f4
   17f30:	movt	r1, #1
   17f34:	movw	r0, #58516	; 0xe494
   17f38:	movt	r0, #1
   17f3c:	bl	124b4 <__assert_fail@plt>
   17f40:	ldr	r3, [pc, #48]	; 17f78 <flatcc_builder_table_add_union@@Base+0x114>
   17f44:	movw	r2, #1522	; 0x5f2
   17f48:	movw	r1, #57588	; 0xe0f4
   17f4c:	movt	r1, #1
   17f50:	movw	r0, #58552	; 0xe4b8
   17f54:	movt	r0, #1
   17f58:	bl	124b4 <__assert_fail@plt>
   17f5c:	ldr	r3, [pc, #20]	; 17f78 <flatcc_builder_table_add_union@@Base+0x114>
   17f60:	movw	r2, #1526	; 0x5f6
   17f64:	movw	r1, #57588	; 0xe0f4
   17f68:	movt	r1, #1
   17f6c:	movw	r0, #58564	; 0xe4c4
   17f70:	movt	r0, #1
   17f74:	bl	124b4 <__assert_fail@plt>
   17f78:	andeq	lr, r1, r0, ror r0

00017f7c <flatcc_builder_table_add_union_vector@@Base>:
   17f7c:	strd	r4, [sp, #-20]!	; 0xffffffec
   17f80:	strd	r6, [sp, #8]
   17f84:	str	lr, [sp, #16]
   17f88:	sub	sp, sp, #12
   17f8c:	mov	r7, r1
   17f90:	add	r1, sp, #8
   17f94:	stmdb	r1, {r2, r3}
   17f98:	ldr	r4, [sp]
   17f9c:	ldr	r6, [sp, #4]
   17fa0:	ldr	r3, [r0, #32]
   17fa4:	ldrh	r3, [r3, #14]
   17fa8:	cmp	r3, #3
   17fac:	bne	17ff8 <flatcc_builder_table_add_union_vector@@Base+0x7c>
   17fb0:	mov	r5, r0
   17fb4:	clz	r3, r6
   17fb8:	lsr	r3, r3, #5
   17fbc:	clz	r2, r4
   17fc0:	lsr	r2, r2, #5
   17fc4:	cmp	r2, r3
   17fc8:	beq	18030 <flatcc_builder_table_add_union_vector@@Base+0xb4>
   17fcc:	adds	r4, r4, #0
   17fd0:	movne	r4, #1
   17fd4:	cmp	r4, r3
   17fd8:	mvnne	r4, #0
   17fdc:	beq	18014 <flatcc_builder_table_add_union_vector@@Base+0x98>
   17fe0:	mov	r0, r4
   17fe4:	add	sp, sp, #12
   17fe8:	ldrd	r4, [sp]
   17fec:	ldrd	r6, [sp, #8]
   17ff0:	add	sp, sp, #16
   17ff4:	pop	{pc}		; (ldr pc, [sp], #4)
   17ff8:	ldr	r3, [pc, #160]	; 180a0 <flatcc_builder_table_add_union_vector@@Base+0x124>
   17ffc:	mov	r2, #1536	; 0x600
   18000:	movw	r1, #57588	; 0xe0f4
   18004:	movt	r1, #1
   18008:	movw	r0, #58296	; 0xe3b8
   1800c:	movt	r0, #1
   18010:	bl	124b4 <__assert_fail@plt>
   18014:	ldr	r3, [pc, #132]	; 180a0 <flatcc_builder_table_add_union_vector@@Base+0x124>
   18018:	movw	r2, #1537	; 0x601
   1801c:	movw	r1, #57588	; 0xe0f4
   18020:	movt	r1, #1
   18024:	movw	r0, #58576	; 0xe4d0
   18028:	movt	r0, #1
   1802c:	bl	124b4 <__assert_fail@plt>
   18030:	cmp	r4, #0
   18034:	beq	17fe0 <flatcc_builder_table_add_union_vector@@Base+0x64>
   18038:	sub	r1, r7, #1
   1803c:	bl	17d14 <flatcc_builder_table_add_offset@@Base>
   18040:	cmp	r0, #0
   18044:	beq	18084 <flatcc_builder_table_add_union_vector@@Base+0x108>
   18048:	str	r4, [r0]
   1804c:	mov	r1, r7
   18050:	mov	r0, r5
   18054:	bl	17d14 <flatcc_builder_table_add_offset@@Base>
   18058:	cmp	r0, #0
   1805c:	strne	r6, [r0]
   18060:	movne	r4, #0
   18064:	bne	17fe0 <flatcc_builder_table_add_union_vector@@Base+0x64>
   18068:	ldr	r3, [pc, #48]	; 180a0 <flatcc_builder_table_add_union_vector@@Base+0x124>
   1806c:	movw	r2, #1544	; 0x608
   18070:	movw	r1, #57588	; 0xe0f4
   18074:	movt	r1, #1
   18078:	movw	r0, #58552	; 0xe4b8
   1807c:	movt	r0, #1
   18080:	bl	124b4 <__assert_fail@plt>
   18084:	ldr	r3, [pc, #20]	; 180a0 <flatcc_builder_table_add_union_vector@@Base+0x124>
   18088:	movw	r2, #1540	; 0x604
   1808c:	movw	r1, #57588	; 0xe0f4
   18090:	movt	r1, #1
   18094:	movw	r0, #58552	; 0xe4b8
   18098:	movt	r0, #1
   1809c:	bl	124b4 <__assert_fail@plt>
   180a0:	muleq	r1, r0, r0

000180a4 <flatcc_builder_push_buffer_alignment@@Base>:
   180a4:	mov	r3, r0
   180a8:	ldrh	r0, [r0, #128]	; 0x80
   180ac:	mov	r2, #4
   180b0:	strh	r2, [r3, #128]	; 0x80
   180b4:	bx	lr

000180b8 <flatcc_builder_pop_buffer_alignment@@Base>:
   180b8:	ldrh	r3, [r0, #128]	; 0x80
   180bc:	cmp	r3, r1
   180c0:	strhcc	r1, [r0, #128]	; 0x80
   180c4:	bx	lr

000180c8 <flatcc_builder_get_buffer_alignment@@Base>:
   180c8:	ldrh	r0, [r0, #128]	; 0x80
   180cc:	bx	lr

000180d0 <flatcc_builder_set_vtable_clustering@@Base>:
   180d0:	clz	r1, r1
   180d4:	lsr	r1, r1, #5
   180d8:	str	r1, [r0, #180]	; 0xb4
   180dc:	bx	lr

000180e0 <flatcc_builder_set_block_align@@Base>:
   180e0:	strh	r1, [r0, #132]	; 0x84
   180e4:	bx	lr

000180e8 <flatcc_builder_get_level@@Base>:
   180e8:	ldr	r0, [r0, #156]	; 0x9c
   180ec:	bx	lr

000180f0 <flatcc_builder_set_max_level@@Base>:
   180f0:	str	r1, [r0, #176]	; 0xb0
   180f4:	ldr	r3, [r0, #160]	; 0xa0
   180f8:	cmp	r3, r1
   180fc:	strlt	r1, [r0, #160]	; 0xa0
   18100:	bx	lr

00018104 <flatcc_builder_get_buffer_size@@Base>:
   18104:	ldr	r2, [r0, #140]	; 0x8c
   18108:	ldr	r0, [r0, #136]	; 0x88
   1810c:	sub	r0, r2, r0
   18110:	bx	lr

00018114 <flatcc_builder_get_buffer_start@@Base>:
   18114:	ldr	r0, [r0, #136]	; 0x88
   18118:	bx	lr

0001811c <flatcc_builder_get_buffer_end@@Base>:
   1811c:	ldr	r0, [r0, #140]	; 0x8c
   18120:	bx	lr

00018124 <flatcc_builder_set_vtable_cache_limit@@Base>:
   18124:	str	r1, [r0, #172]	; 0xac
   18128:	bx	lr

0001812c <flatcc_builder_set_identifier@@Base>:
   1812c:	movw	r3, #55716	; 0xd9a4
   18130:	movt	r3, #1
   18134:	cmp	r1, #0
   18138:	moveq	r1, r3
   1813c:	ldr	r3, [r1]
   18140:	str	r3, [r0, #168]	; 0xa8
   18144:	bx	lr

00018148 <flatcc_builder_get_type@@Base>:
   18148:	ldr	r3, [r0, #32]
   1814c:	cmp	r3, #0
   18150:	ldrhne	r0, [r3, #14]
   18154:	moveq	r0, #0
   18158:	bx	lr

0001815c <flatcc_builder_get_type_at@@Base>:
   1815c:	cmp	r1, #0
   18160:	ble	18188 <flatcc_builder_get_type_at@@Base+0x2c>
   18164:	ldr	r3, [r0, #156]	; 0x9c
   18168:	cmp	r3, r1
   1816c:	blt	18190 <flatcc_builder_get_type_at@@Base+0x34>
   18170:	sub	r1, r1, r3
   18174:	ldr	r3, [r0, #32]
   18178:	add	r1, r1, r1, lsl #3
   1817c:	add	r1, r3, r1, lsl #2
   18180:	ldrh	r0, [r1, #14]
   18184:	bx	lr
   18188:	mov	r0, #0
   1818c:	bx	lr
   18190:	mov	r0, #0
   18194:	bx	lr

00018198 <flatcc_builder_get_direct_buffer@@Base>:
   18198:	ldr	r3, [r0, #184]	; 0xb8
   1819c:	cmp	r3, #0
   181a0:	bne	181b8 <flatcc_builder_get_direct_buffer@@Base+0x20>
   181a4:	cmp	r1, #0
   181a8:	beq	181f8 <flatcc_builder_get_direct_buffer@@Base+0x60>
   181ac:	mov	r0, #0
   181b0:	str	r0, [r1]
   181b4:	bx	lr
   181b8:	ldr	r2, [r0, #188]	; 0xbc
   181bc:	ldr	r3, [r0, #192]	; 0xc0
   181c0:	cmp	r2, r3
   181c4:	beq	181dc <flatcc_builder_get_direct_buffer@@Base+0x44>
   181c8:	cmp	r1, #0
   181cc:	beq	181f0 <flatcc_builder_get_direct_buffer@@Base+0x58>
   181d0:	mov	r0, #0
   181d4:	str	r0, [r1]
   181d8:	bx	lr
   181dc:	cmp	r1, #0
   181e0:	ldrne	r3, [r0, #212]	; 0xd4
   181e4:	strne	r3, [r1]
   181e8:	ldr	r0, [r0, #196]	; 0xc4
   181ec:	bx	lr
   181f0:	mov	r0, r1
   181f4:	bx	lr
   181f8:	mov	r0, r1
   181fc:	bx	lr

00018200 <flatcc_builder_copy_buffer@@Base>:
   18200:	ldr	r3, [r0, #184]	; 0xb8
   18204:	cmp	r3, #0
   18208:	beq	1824c <flatcc_builder_copy_buffer@@Base+0x4c>
   1820c:	str	r4, [sp, #-8]!
   18210:	str	lr, [sp, #4]
   18214:	add	r0, r0, #188	; 0xbc
   18218:	bl	189bc <flatcc_emitter_copy_buffer@@Base>
   1821c:	cmp	r0, #0
   18220:	beq	18230 <flatcc_builder_copy_buffer@@Base+0x30>
   18224:	ldr	r4, [sp]
   18228:	add	sp, sp, #4
   1822c:	pop	{pc}		; (ldr pc, [sp], #4)
   18230:	ldr	r3, [pc, #28]	; 18254 <flatcc_builder_copy_buffer@@Base+0x54>
   18234:	movw	r2, #1926	; 0x786
   18238:	movw	r1, #57588	; 0xe0f4
   1823c:	movt	r1, #1
   18240:	movw	r0, #58616	; 0xe4f8
   18244:	movt	r0, #1
   18248:	bl	124b4 <__assert_fail@plt>
   1824c:	mov	r0, #0
   18250:	bx	lr
   18254:	strheq	lr, [r1], -r8

00018258 <flatcc_builder_finalize_buffer@@Base>:
   18258:	strd	r4, [sp, #-16]!
   1825c:	str	r6, [sp, #8]
   18260:	str	lr, [sp, #12]
   18264:	mov	r5, r0
   18268:	ldr	r4, [r0, #140]	; 0x8c
   1826c:	ldr	r3, [r0, #136]	; 0x88
   18270:	sub	r4, r4, r3
   18274:	cmp	r1, #0
   18278:	strne	r4, [r1]
   1827c:	mov	r0, r4
   18280:	bl	1243c <malloc@plt>
   18284:	subs	r6, r0, #0
   18288:	beq	182b8 <flatcc_builder_finalize_buffer@@Base+0x60>
   1828c:	mov	r2, r4
   18290:	mov	r1, r6
   18294:	mov	r0, r5
   18298:	bl	18200 <flatcc_builder_copy_buffer@@Base>
   1829c:	cmp	r0, #0
   182a0:	beq	182d4 <flatcc_builder_finalize_buffer@@Base+0x7c>
   182a4:	mov	r0, r6
   182a8:	ldrd	r4, [sp]
   182ac:	ldr	r6, [sp, #8]
   182b0:	add	sp, sp, #12
   182b4:	pop	{pc}		; (ldr pc, [sp], #4)
   182b8:	ldr	r3, [pc, #48]	; 182f0 <flatcc_builder_finalize_buffer@@Base+0x98>
   182bc:	movw	r2, #1944	; 0x798
   182c0:	movw	r1, #57588	; 0xe0f4
   182c4:	movt	r1, #1
   182c8:	movw	r0, #57672	; 0xe148
   182cc:	movt	r0, #1
   182d0:	bl	124b4 <__assert_fail@plt>
   182d4:	ldr	r3, [pc, #20]	; 182f0 <flatcc_builder_finalize_buffer@@Base+0x98>
   182d8:	movw	r2, #1948	; 0x79c
   182dc:	movw	r1, #57588	; 0xe0f4
   182e0:	movt	r1, #1
   182e4:	movw	r0, #57672	; 0xe148
   182e8:	movt	r0, #1
   182ec:	bl	124b4 <__assert_fail@plt>
   182f0:	ldrdeq	lr, [r1], -r4

000182f4 <flatcc_builder_finalize_aligned_buffer@@Base>:
   182f4:	strd	r4, [sp, #-20]!	; 0xffffffec
   182f8:	strd	r6, [sp, #8]
   182fc:	str	lr, [sp, #16]
   18300:	sub	sp, sp, #12
   18304:	mov	r7, r0
   18308:	ldr	r4, [r0, #140]	; 0x8c
   1830c:	ldr	r3, [r0, #136]	; 0x88
   18310:	sub	r3, r4, r3
   18314:	subs	r6, r1, #0
   18318:	strne	r3, [r6]
   1831c:	ldrh	r1, [r0, #128]	; 0x80
   18320:	sub	r4, r1, #1
   18324:	add	r4, r4, r3
   18328:	rsb	r3, r1, #0
   1832c:	and	r4, r4, r3
   18330:	mov	r3, #0
   18334:	str	r3, [sp, #4]
   18338:	mov	r2, r4
   1833c:	cmp	r1, #4
   18340:	movcc	r1, #4
   18344:	add	r0, sp, #4
   18348:	bl	12478 <posix_memalign@plt>
   1834c:	cmp	r0, #0
   18350:	beq	18378 <flatcc_builder_finalize_aligned_buffer@@Base+0x84>
   18354:	ldr	r0, [sp, #4]
   18358:	cmp	r0, #0
   1835c:	beq	18364 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   18360:	bl	12400 <free@plt>
   18364:	cmp	r6, #0
   18368:	movne	r5, #0
   1836c:	strne	r5, [r6]
   18370:	moveq	r5, r6
   18374:	b	1839c <flatcc_builder_finalize_aligned_buffer@@Base+0xa8>
   18378:	ldr	r5, [sp, #4]
   1837c:	cmp	r5, #0
   18380:	beq	18364 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>
   18384:	mov	r2, r4
   18388:	mov	r1, r5
   1838c:	mov	r0, r7
   18390:	bl	18200 <flatcc_builder_copy_buffer@@Base>
   18394:	cmp	r0, #0
   18398:	beq	183b4 <flatcc_builder_finalize_aligned_buffer@@Base+0xc0>
   1839c:	mov	r0, r5
   183a0:	add	sp, sp, #12
   183a4:	ldrd	r4, [sp]
   183a8:	ldrd	r6, [sp, #8]
   183ac:	add	sp, sp, #16
   183b0:	pop	{pc}		; (ldr pc, [sp], #4)
   183b4:	mov	r0, r5
   183b8:	bl	12400 <free@plt>
   183bc:	b	18364 <flatcc_builder_finalize_aligned_buffer@@Base+0x70>

000183c0 <flatcc_builder_aligned_alloc@@Base>:
   183c0:	push	{lr}		; (str lr, [sp, #-4]!)
   183c4:	sub	sp, sp, #12
   183c8:	mov	r3, #0
   183cc:	str	r3, [sp, #4]
   183d0:	mov	r2, r1
   183d4:	cmp	r0, #4
   183d8:	movcs	r1, r0
   183dc:	movcc	r1, #4
   183e0:	add	r0, sp, #4
   183e4:	bl	12478 <posix_memalign@plt>
   183e8:	cmp	r0, #0
   183ec:	beq	18408 <flatcc_builder_aligned_alloc@@Base+0x48>
   183f0:	ldr	r0, [sp, #4]
   183f4:	cmp	r0, #0
   183f8:	beq	18408 <flatcc_builder_aligned_alloc@@Base+0x48>
   183fc:	bl	12400 <free@plt>
   18400:	mov	r3, #0
   18404:	str	r3, [sp, #4]
   18408:	ldr	r0, [sp, #4]
   1840c:	add	sp, sp, #12
   18410:	pop	{pc}		; (ldr pc, [sp], #4)

00018414 <flatcc_builder_aligned_free@@Base>:
   18414:	str	r4, [sp, #-8]!
   18418:	str	lr, [sp, #4]
   1841c:	bl	12400 <free@plt>
   18420:	ldr	r4, [sp]
   18424:	add	sp, sp, #4
   18428:	pop	{pc}		; (ldr pc, [sp], #4)

0001842c <flatcc_builder_get_emit_context@@Base>:
   1842c:	ldr	r0, [r0, #36]	; 0x24
   18430:	bx	lr

00018434 <flatcc_emitter_recycle_page@@Base>:
   18434:	ldr	r3, [r0]
   18438:	cmp	r3, r1
   1843c:	beq	18488 <flatcc_emitter_recycle_page@@Base+0x54>
   18440:	ldr	r3, [r0, #4]
   18444:	cmp	r3, r1
   18448:	beq	18490 <flatcc_emitter_recycle_page@@Base+0x5c>
   1844c:	ldr	r2, [r1, #2944]	; 0xb80
   18450:	ldr	r3, [r1, #2948]	; 0xb84
   18454:	str	r3, [r2, #2948]	; 0xb84
   18458:	ldr	r2, [r1, #2944]	; 0xb80
   1845c:	str	r2, [r3, #2944]	; 0xb80
   18460:	ldr	r3, [r0]
   18464:	ldr	r3, [r3, #2948]	; 0xb84
   18468:	str	r3, [r1, #2948]	; 0xb84
   1846c:	ldr	r2, [r0]
   18470:	str	r2, [r1, #2944]	; 0xb80
   18474:	str	r1, [r3, #2944]	; 0xb80
   18478:	ldr	r3, [r1, #2944]	; 0xb80
   1847c:	str	r1, [r3, #2948]	; 0xb84
   18480:	mov	r0, #0
   18484:	bx	lr
   18488:	mvn	r0, #0
   1848c:	bx	lr
   18490:	mvn	r0, #0
   18494:	bx	lr

00018498 <flatcc_emitter_reset@@Base>:
   18498:	ldr	r3, [r0]
   1849c:	cmp	r3, #0
   184a0:	bxeq	lr
   184a4:	str	r3, [r0, #4]
   184a8:	add	r2, r3, #1472	; 0x5c0
   184ac:	str	r2, [r0, #8]
   184b0:	str	r2, [r0, #16]
   184b4:	mov	r2, #1472	; 0x5c0
   184b8:	str	r2, [r0, #12]
   184bc:	str	r2, [r0, #20]
   184c0:	movw	r2, #64064	; 0xfa40
   184c4:	movt	r2, #65535	; 0xffff
   184c8:	str	r2, [r3, #2952]	; 0xb88
   184cc:	ldr	r3, [r0, #32]
   184d0:	cmp	r3, #0
   184d4:	ldreq	r3, [r0, #24]
   184d8:	streq	r3, [r0, #32]
   184dc:	ldr	r3, [r0, #32]
   184e0:	add	r2, r3, r3, lsl #1
   184e4:	ldr	r3, [r0, #24]
   184e8:	lsr	r3, r3, #2
   184ec:	add	r3, r3, r2, lsr #2
   184f0:	str	r3, [r0, #32]
   184f4:	mov	r2, #0
   184f8:	str	r2, [r0, #24]
   184fc:	ldr	r2, [r0, #28]
   18500:	cmp	r2, r3, lsl #1
   18504:	bxls	lr
   18508:	str	r4, [sp, #-8]!
   1850c:	str	lr, [sp, #4]
   18510:	mov	r4, r0
   18514:	ldr	r3, [r0, #4]
   18518:	ldr	r0, [r3, #2944]	; 0xb80
   1851c:	ldr	r2, [r4]
   18520:	cmp	r0, r2
   18524:	beq	18568 <flatcc_emitter_reset@@Base+0xd0>
   18528:	ldr	r2, [r0, #2944]	; 0xb80
   1852c:	str	r2, [r3, #2944]	; 0xb80
   18530:	ldr	r3, [r4, #4]
   18534:	str	r3, [r2, #2948]	; 0xb84
   18538:	bl	12400 <free@plt>
   1853c:	ldr	r3, [r4, #28]
   18540:	sub	r3, r3, #2944	; 0xb80
   18544:	str	r3, [r4, #28]
   18548:	ldr	r2, [r4, #32]
   1854c:	cmp	r3, r2, lsl #1
   18550:	bls	18568 <flatcc_emitter_reset@@Base+0xd0>
   18554:	ldr	r3, [r4, #4]
   18558:	ldr	r0, [r3, #2944]	; 0xb80
   1855c:	ldr	r2, [r4]
   18560:	cmp	r0, r2
   18564:	bne	18528 <flatcc_emitter_reset@@Base+0x90>
   18568:	ldr	r4, [sp]
   1856c:	add	sp, sp, #4
   18570:	pop	{pc}		; (ldr pc, [sp], #4)

00018574 <flatcc_emitter_clear@@Base>:
   18574:	ldr	r3, [r0]
   18578:	cmp	r3, #0
   1857c:	bxeq	lr
   18580:	strd	r4, [sp, #-16]!
   18584:	str	r6, [sp, #8]
   18588:	str	lr, [sp, #12]
   1858c:	mov	r5, r0
   18590:	ldr	r2, [r3, #2948]	; 0xb84
   18594:	mov	r1, #0
   18598:	str	r1, [r2, #2944]	; 0xb80
   1859c:	ldr	r4, [r3, #2944]	; 0xb80
   185a0:	cmp	r4, r1
   185a4:	bne	185b4 <flatcc_emitter_clear@@Base+0x40>
   185a8:	mov	r4, r3
   185ac:	b	185c8 <flatcc_emitter_clear@@Base+0x54>
   185b0:	mov	r4, r3
   185b4:	ldr	r0, [r4, #2948]	; 0xb84
   185b8:	bl	12400 <free@plt>
   185bc:	ldr	r3, [r4, #2944]	; 0xb80
   185c0:	cmp	r3, #0
   185c4:	bne	185b0 <flatcc_emitter_clear@@Base+0x3c>
   185c8:	mov	r0, r4
   185cc:	bl	12400 <free@plt>
   185d0:	mov	r2, #36	; 0x24
   185d4:	mov	r1, #0
   185d8:	mov	r0, r5
   185dc:	bl	12484 <memset@plt>
   185e0:	ldrd	r4, [sp]
   185e4:	ldr	r6, [sp, #8]
   185e8:	add	sp, sp, #12
   185ec:	pop	{pc}		; (ldr pc, [sp], #4)

000185f0 <flatcc_emitter@@Base>:
   185f0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   185f4:	strd	r6, [sp, #8]
   185f8:	strd	r8, [sp, #16]
   185fc:	strd	sl, [sp, #24]
   18600:	str	lr, [sp, #32]
   18604:	sub	sp, sp, #4
   18608:	mov	r4, r0
   1860c:	ldr	ip, [sp, #40]	; 0x28
   18610:	ldr	r0, [r0, #24]
   18614:	add	r0, r0, ip
   18618:	str	r0, [r4, #24]
   1861c:	cmp	r3, #0
   18620:	blt	18650 <flatcc_emitter@@Base+0x60>
   18624:	ldr	r3, [r4, #20]
   18628:	cmp	r3, ip
   1862c:	bcs	18738 <flatcc_emitter@@Base+0x148>
   18630:	cmp	r2, #0
   18634:	moveq	r0, r2
   18638:	beq	18838 <flatcc_emitter@@Base+0x248>
   1863c:	add	r5, r1, #8
   18640:	mov	r8, r2
   18644:	movw	fp, #64064	; 0xfa40
   18648:	movt	fp, #65535	; 0xffff
   1864c:	b	18894 <flatcc_emitter@@Base+0x2a4>
   18650:	ldr	r3, [r4, #12]
   18654:	cmp	r3, ip
   18658:	bcs	18670 <flatcc_emitter@@Base+0x80>
   1865c:	add	r5, r1, r2, lsl #3
   18660:	sub	r8, r2, #1
   18664:	movw	fp, #64064	; 0xfa40
   18668:	movt	fp, #65535	; 0xffff
   1866c:	b	18864 <flatcc_emitter@@Base+0x274>
   18670:	ldr	r6, [r4, #8]
   18674:	sub	r6, r6, ip
   18678:	str	r6, [r4, #8]
   1867c:	sub	ip, r3, ip
   18680:	str	ip, [r4, #12]
   18684:	b	1874c <flatcc_emitter@@Base+0x15c>
   18688:	mov	r2, r6
   1868c:	rsb	r1, r2, #0
   18690:	ldr	r0, [r4, #8]
   18694:	add	r0, r0, r1
   18698:	str	r0, [r4, #8]
   1869c:	sub	r3, r3, r2
   186a0:	str	r3, [r4, #12]
   186a4:	add	r9, r9, r1
   186a8:	sub	r6, r6, r2
   186ac:	mov	r1, r9
   186b0:	bl	1240c <memcpy@plt>
   186b4:	cmp	r6, #0
   186b8:	beq	1885c <flatcc_emitter@@Base+0x26c>
   186bc:	ldr	r3, [r4, #12]
   186c0:	cmp	r3, r6
   186c4:	bcs	18688 <flatcc_emitter@@Base+0x98>
   186c8:	cmp	r3, #0
   186cc:	movne	r2, r3
   186d0:	bne	1868c <flatcc_emitter@@Base+0x9c>
   186d4:	ldr	r7, [r4]
   186d8:	cmp	r7, #0
   186dc:	beq	188f0 <flatcc_emitter@@Base+0x300>
   186e0:	ldr	r2, [r7, #2948]	; 0xb84
   186e4:	ldr	r3, [r4, #4]
   186e8:	cmp	r2, r3
   186ec:	beq	188b4 <flatcc_emitter@@Base+0x2c4>
   186f0:	ldr	r3, [r7, #2952]	; 0xb88
   186f4:	sub	r3, r3, #2944	; 0xb80
   186f8:	str	r3, [r2, #2952]	; 0xb88
   186fc:	ldr	r3, [r4]
   18700:	ldr	r3, [r3, #2948]	; 0xb84
   18704:	str	r3, [r4]
   18708:	ldr	r3, [r4]
   1870c:	add	r2, r3, #2944	; 0xb80
   18710:	str	r2, [r4, #8]
   18714:	mov	r2, #2944	; 0xb80
   18718:	str	r2, [r4, #12]
   1871c:	ldr	r2, [r3, #2944]	; 0xb80
   18720:	ldr	r2, [r2, #2952]	; 0xb88
   18724:	sub	r2, r2, #2944	; 0xb80
   18728:	str	r2, [r3, #2952]	; 0xb88
   1872c:	b	186b4 <flatcc_emitter@@Base+0xc4>
   18730:	mov	r0, #0
   18734:	b	18838 <flatcc_emitter@@Base+0x248>
   18738:	ldr	r6, [r4, #16]
   1873c:	add	r0, r6, ip
   18740:	str	r0, [r4, #16]
   18744:	sub	ip, r3, ip
   18748:	str	ip, [r4, #20]
   1874c:	sub	r4, r2, #1
   18750:	cmp	r2, #0
   18754:	moveq	r0, r2
   18758:	beq	18838 <flatcc_emitter@@Base+0x248>
   1875c:	add	r5, r1, #8
   18760:	ldr	r2, [r5, #-4]
   18764:	ldr	r1, [r5, #-8]
   18768:	mov	r0, r6
   1876c:	bl	1240c <memcpy@plt>
   18770:	ldr	r3, [r5, #-4]
   18774:	add	r6, r6, r3
   18778:	sub	r4, r4, #1
   1877c:	add	r5, r5, #8
   18780:	cmn	r4, #1
   18784:	bne	18760 <flatcc_emitter@@Base+0x170>
   18788:	mov	r0, #0
   1878c:	b	18838 <flatcc_emitter@@Base+0x248>
   18790:	mov	r6, r7
   18794:	mov	r2, r6
   18798:	mov	r1, r9
   1879c:	ldr	r0, [r4, #16]
   187a0:	bl	1240c <memcpy@plt>
   187a4:	sub	r7, r7, r6
   187a8:	add	r9, r9, r6
   187ac:	ldr	r3, [r4, #16]
   187b0:	add	r3, r3, r6
   187b4:	str	r3, [r4, #16]
   187b8:	ldr	r3, [r4, #20]
   187bc:	sub	r6, r3, r6
   187c0:	str	r6, [r4, #20]
   187c4:	cmp	r7, #0
   187c8:	beq	18888 <flatcc_emitter@@Base+0x298>
   187cc:	ldr	r6, [r4, #20]
   187d0:	cmp	r6, r7
   187d4:	bcs	18790 <flatcc_emitter@@Base+0x1a0>
   187d8:	cmp	r6, #0
   187dc:	bne	18794 <flatcc_emitter@@Base+0x1a4>
   187e0:	ldr	r6, [r4, #4]
   187e4:	cmp	r6, #0
   187e8:	beq	18974 <flatcc_emitter@@Base+0x384>
   187ec:	ldr	r3, [r6, #2944]	; 0xb80
   187f0:	ldr	r2, [r4]
   187f4:	cmp	r3, r2
   187f8:	beq	18938 <flatcc_emitter@@Base+0x348>
   187fc:	str	r3, [r4, #4]
   18800:	ldr	r3, [r4, #4]
   18804:	str	r3, [r4, #16]
   18808:	mov	r2, #2944	; 0xb80
   1880c:	str	r2, [r4, #20]
   18810:	ldr	r2, [r3, #2948]	; 0xb84
   18814:	ldr	r2, [r2, #2952]	; 0xb88
   18818:	add	r2, r2, #2944	; 0xb80
   1881c:	str	r2, [r3, #2952]	; 0xb88
   18820:	b	187c4 <flatcc_emitter@@Base+0x1d4>
   18824:	mvn	r0, #0
   18828:	b	18838 <flatcc_emitter@@Base+0x248>
   1882c:	mvn	r0, #0
   18830:	b	18838 <flatcc_emitter@@Base+0x248>
   18834:	mvn	r0, #0
   18838:	add	sp, sp, #4
   1883c:	ldrd	r4, [sp]
   18840:	ldrd	r6, [sp, #8]
   18844:	ldrd	r8, [sp, #16]
   18848:	ldrd	sl, [sp, #24]
   1884c:	add	sp, sp, #32
   18850:	pop	{pc}		; (ldr pc, [sp], #4)
   18854:	mvn	r0, #0
   18858:	b	18838 <flatcc_emitter@@Base+0x248>
   1885c:	sub	r5, r5, #8
   18860:	sub	r8, r8, #1
   18864:	cmn	r8, #1
   18868:	beq	18730 <flatcc_emitter@@Base+0x140>
   1886c:	ldr	r6, [r5, #-4]
   18870:	ldr	r9, [r5, #-8]
   18874:	add	r9, r9, r6
   18878:	cmp	r6, #0
   1887c:	beq	1885c <flatcc_emitter@@Base+0x26c>
   18880:	mov	sl, #1472	; 0x5c0
   18884:	b	186bc <flatcc_emitter@@Base+0xcc>
   18888:	add	r5, r5, #8
   1888c:	subs	r8, r8, #1
   18890:	beq	188ac <flatcc_emitter@@Base+0x2bc>
   18894:	ldr	r9, [r5, #-8]
   18898:	ldr	r7, [r5, #-4]
   1889c:	cmp	r7, #0
   188a0:	beq	18888 <flatcc_emitter@@Base+0x298>
   188a4:	mov	sl, #1472	; 0x5c0
   188a8:	b	187cc <flatcc_emitter@@Base+0x1dc>
   188ac:	mov	r0, #0
   188b0:	b	18838 <flatcc_emitter@@Base+0x248>
   188b4:	movw	r0, #2956	; 0xb8c
   188b8:	bl	1243c <malloc@plt>
   188bc:	cmp	r0, #0
   188c0:	beq	18824 <flatcc_emitter@@Base+0x234>
   188c4:	ldr	r3, [r4, #28]
   188c8:	add	r3, r3, #2944	; 0xb80
   188cc:	str	r3, [r4, #28]
   188d0:	ldr	r3, [r4, #4]
   188d4:	str	r3, [r0, #2948]	; 0xb84
   188d8:	str	r7, [r0, #2944]	; 0xb80
   188dc:	str	r0, [r7, #2948]	; 0xb84
   188e0:	ldr	r3, [r4, #4]
   188e4:	str	r0, [r3, #2944]	; 0xb80
   188e8:	str	r0, [r4]
   188ec:	b	18708 <flatcc_emitter@@Base+0x118>
   188f0:	movw	r0, #2956	; 0xb8c
   188f4:	bl	1243c <malloc@plt>
   188f8:	cmp	r0, #0
   188fc:	beq	1882c <flatcc_emitter@@Base+0x23c>
   18900:	ldr	r3, [r4, #28]
   18904:	add	r3, r3, #2944	; 0xb80
   18908:	str	r3, [r4, #28]
   1890c:	str	r0, [r4]
   18910:	str	r0, [r4, #4]
   18914:	str	r0, [r0, #2944]	; 0xb80
   18918:	str	r0, [r0, #2948]	; 0xb84
   1891c:	add	r3, r0, #1472	; 0x5c0
   18920:	str	r3, [r4, #8]
   18924:	str	r3, [r4, #16]
   18928:	str	sl, [r4, #12]
   1892c:	str	sl, [r4, #20]
   18930:	str	fp, [r0, #2952]	; 0xb88
   18934:	b	186b4 <flatcc_emitter@@Base+0xc4>
   18938:	movw	r0, #2956	; 0xb8c
   1893c:	bl	1243c <malloc@plt>
   18940:	cmp	r0, #0
   18944:	beq	18834 <flatcc_emitter@@Base+0x244>
   18948:	ldr	r3, [r4, #28]
   1894c:	add	r3, r3, #2944	; 0xb80
   18950:	str	r3, [r4, #28]
   18954:	str	r6, [r0, #2948]	; 0xb84
   18958:	ldr	r3, [r4]
   1895c:	str	r3, [r0, #2944]	; 0xb80
   18960:	str	r0, [r3, #2948]	; 0xb84
   18964:	ldr	r3, [r4, #4]
   18968:	str	r0, [r3, #2944]	; 0xb80
   1896c:	str	r0, [r4, #4]
   18970:	b	18800 <flatcc_emitter@@Base+0x210>
   18974:	movw	r0, #2956	; 0xb8c
   18978:	bl	1243c <malloc@plt>
   1897c:	cmp	r0, #0
   18980:	beq	18854 <flatcc_emitter@@Base+0x264>
   18984:	ldr	r3, [r4, #28]
   18988:	add	r3, r3, #2944	; 0xb80
   1898c:	str	r3, [r4, #28]
   18990:	str	r0, [r4]
   18994:	str	r0, [r4, #4]
   18998:	str	r0, [r0, #2944]	; 0xb80
   1899c:	str	r0, [r0, #2948]	; 0xb84
   189a0:	add	r3, r0, #1472	; 0x5c0
   189a4:	str	r3, [r4, #8]
   189a8:	str	r3, [r4, #16]
   189ac:	str	sl, [r4, #12]
   189b0:	str	sl, [r4, #20]
   189b4:	str	fp, [r0, #2952]	; 0xb88
   189b8:	b	187c4 <flatcc_emitter@@Base+0x1d4>

000189bc <flatcc_emitter_copy_buffer@@Base>:
   189bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   189c0:	strd	r6, [sp, #8]
   189c4:	str	r8, [sp, #16]
   189c8:	str	lr, [sp, #20]
   189cc:	ldr	r3, [r0, #24]
   189d0:	cmp	r3, r2
   189d4:	movhi	r4, #0
   189d8:	bhi	18a68 <flatcc_emitter_copy_buffer@@Base+0xac>
   189dc:	ldr	r4, [r0]
   189e0:	cmp	r4, #0
   189e4:	beq	18a68 <flatcc_emitter_copy_buffer@@Base+0xac>
   189e8:	mov	r5, r1
   189ec:	mov	r7, r0
   189f0:	ldr	r2, [r0, #4]
   189f4:	cmp	r4, r2
   189f8:	beq	18a80 <flatcc_emitter_copy_buffer@@Base+0xc4>
   189fc:	ldr	r4, [r0, #12]
   18a00:	rsb	r4, r4, #2944	; 0xb80
   18a04:	mov	r2, r4
   18a08:	ldr	r1, [r0, #8]
   18a0c:	mov	r0, r5
   18a10:	bl	1240c <memcpy@plt>
   18a14:	add	r4, r5, r4
   18a18:	ldr	r3, [r7]
   18a1c:	ldr	r5, [r3, #2944]	; 0xb80
   18a20:	ldr	r3, [r7, #4]
   18a24:	cmp	r5, r3
   18a28:	beq	18a98 <flatcc_emitter_copy_buffer@@Base+0xdc>
   18a2c:	mov	r6, #2944	; 0xb80
   18a30:	mov	r2, r6
   18a34:	mov	r1, r5
   18a38:	mov	r0, r4
   18a3c:	bl	1240c <memcpy@plt>
   18a40:	add	r4, r4, #2944	; 0xb80
   18a44:	ldr	r5, [r5, #2944]	; 0xb80
   18a48:	ldr	r3, [r7, #4]
   18a4c:	cmp	r3, r5
   18a50:	bne	18a30 <flatcc_emitter_copy_buffer@@Base+0x74>
   18a54:	ldr	r2, [r7, #20]
   18a58:	rsb	r2, r2, #2944	; 0xb80
   18a5c:	mov	r1, r5
   18a60:	mov	r0, r4
   18a64:	bl	1240c <memcpy@plt>
   18a68:	mov	r0, r4
   18a6c:	ldrd	r4, [sp]
   18a70:	ldrd	r6, [sp, #8]
   18a74:	ldr	r8, [sp, #16]
   18a78:	add	sp, sp, #20
   18a7c:	pop	{pc}		; (ldr pc, [sp], #4)
   18a80:	mov	r2, r3
   18a84:	ldr	r1, [r0, #8]
   18a88:	mov	r0, r5
   18a8c:	bl	1240c <memcpy@plt>
   18a90:	mov	r4, r5
   18a94:	b	18a68 <flatcc_emitter_copy_buffer@@Base+0xac>
   18a98:	mov	r5, r3
   18a9c:	b	18a54 <flatcc_emitter_copy_buffer@@Base+0x98>
   18aa0:	sub	sp, sp, #8
   18aa4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18aa8:	strd	r6, [sp, #8]
   18aac:	strd	r8, [sp, #16]
   18ab0:	str	sl, [sp, #24]
   18ab4:	str	lr, [sp, #28]
   18ab8:	add	r1, sp, #28
   18abc:	stmib	r1, {r2, r3}
   18ac0:	ldrd	r2, [sp, #32]
   18ac4:	ldr	lr, [sp, #40]	; 0x28
   18ac8:	orrs	r1, r2, r3
   18acc:	beq	18b88 <flatcc_emitter_copy_buffer@@Base+0x1cc>
   18ad0:	mov	r8, #0
   18ad4:	lsr	r9, r3, #22
   18ad8:	lsl	r9, r9, #22
   18adc:	orrs	r1, r8, r9
   18ae0:	subeq	ip, lr, #10
   18ae4:	moveq	r9, #0
   18ae8:	moveq	r8, r9
   18aec:	movteq	r8, #65472	; 0xffc0
   18af0:	bne	18b20 <flatcc_emitter_copy_buffer@@Base+0x164>
   18af4:	lsl	r1, r3, #10
   18af8:	orr	r1, r1, r2, lsr #22
   18afc:	lsl	lr, r2, #10
   18b00:	mov	r2, lr
   18b04:	mov	r3, r1
   18b08:	mov	lr, ip
   18b0c:	mov	r6, r9
   18b10:	and	r7, r1, r8
   18b14:	sub	ip, ip, #10
   18b18:	orrs	r1, r6, r7
   18b1c:	beq	18af4 <flatcc_emitter_copy_buffer@@Base+0x138>
   18b20:	cmp	r2, #0
   18b24:	sbcs	r1, r3, #0
   18b28:	blt	18b54 <flatcc_emitter_copy_buffer@@Base+0x198>
   18b2c:	sub	r1, lr, #1
   18b30:	adds	r4, r2, r2
   18b34:	adc	r5, r3, r3
   18b38:	mov	r2, r4
   18b3c:	mov	r3, r5
   18b40:	mov	lr, r1
   18b44:	sub	r1, r1, #1
   18b48:	cmp	r4, #0
   18b4c:	sbcs	ip, r5, #0
   18b50:	bge	18b30 <flatcc_emitter_copy_buffer@@Base+0x174>
   18b54:	strd	r2, [sp, #32]
   18b58:	str	lr, [sp, #40]	; 0x28
   18b5c:	strd	r2, [r0]
   18b60:	ldrd	r2, [sp, #40]	; 0x28
   18b64:	strd	r2, [r0, #8]
   18b68:	ldrd	r4, [sp]
   18b6c:	ldrd	r6, [sp, #8]
   18b70:	ldrd	r8, [sp, #16]
   18b74:	ldr	sl, [sp, #24]
   18b78:	ldr	lr, [sp, #28]
   18b7c:	add	sp, sp, #32
   18b80:	add	sp, sp, #8
   18b84:	bx	lr
   18b88:	movw	r3, #58624	; 0xe500
   18b8c:	movt	r3, #1
   18b90:	mov	r2, #260	; 0x104
   18b94:	movw	r1, #60800	; 0xed80
   18b98:	movt	r1, #1
   18b9c:	movw	r0, #60888	; 0xedd8
   18ba0:	movt	r0, #1
   18ba4:	bl	124b4 <__assert_fail@plt>

00018ba8 <grisu3_diy_fp_encode_double@@Base>:
   18ba8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18bac:	strd	r6, [sp, #8]
   18bb0:	strd	r8, [sp, #16]
   18bb4:	strd	sl, [sp, #24]
   18bb8:	str	lr, [sp, #32]
   18bbc:	sub	sp, sp, #92	; 0x5c
   18bc0:	mov	r6, r3
   18bc4:	ldr	r7, [sp, #128]	; 0x80
   18bc8:	cmp	r7, #0
   18bcc:	movne	r7, #4
   18bd0:	sub	r5, r2, r3
   18bd4:	strd	r0, [sp, #72]	; 0x48
   18bd8:	mov	r3, #0
   18bdc:	str	r3, [sp, #80]	; 0x50
   18be0:	add	r0, sp, #72	; 0x48
   18be4:	ldrd	r2, [sp, #80]	; 0x50
   18be8:	strd	r2, [sp]
   18bec:	ldm	r0, {r2, r3}
   18bf0:	bl	18aa0 <flatcc_emitter_copy_buffer@@Base+0xe4>
   18bf4:	ldr	r4, [sp, #72]	; 0x48
   18bf8:	ldr	r3, [sp, #76]	; 0x4c
   18bfc:	ldr	r1, [sp, #80]	; 0x50
   18c00:	rsb	ip, r1, #0
   18c04:	lsl	ip, r7, ip
   18c08:	cmn	r5, #348	; 0x15c
   18c0c:	blt	18e0c <grisu3_diy_fp_encode_double@@Base+0x264>
   18c10:	cmp	r5, #348	; 0x15c
   18c14:	bge	18e28 <grisu3_diy_fp_encode_double@@Base+0x280>
   18c18:	add	r0, r5, #348	; 0x15c
   18c1c:	add	r2, r0, #7
   18c20:	cmp	r0, #0
   18c24:	movlt	r0, r2
   18c28:	asr	r0, r0, #3
   18c2c:	movw	r2, #58624	; 0xe500
   18c30:	movt	r2, #1
   18c34:	add	r0, r2, r0, lsl #4
   18c38:	ldrsh	r2, [r0, #66]	; 0x42
   18c3c:	ldr	r7, [r0, #56]	; 0x38
   18c40:	ldr	lr, [r0, #60]	; 0x3c
   18c44:	ldrsh	r0, [r0, #64]	; 0x40
   18c48:	str	r0, [sp, #44]	; 0x2c
   18c4c:	cmp	r5, r2
   18c50:	blt	18e44 <grisu3_diy_fp_encode_double@@Base+0x29c>
   18c54:	add	r0, r2, #7
   18c58:	cmp	r5, r0
   18c5c:	bgt	18e60 <grisu3_diy_fp_encode_double@@Base+0x2b8>
   18c60:	cmp	r5, r2
   18c64:	beq	18d14 <grisu3_diy_fp_encode_double@@Base+0x16c>
   18c68:	sub	r2, r5, r2
   18c6c:	sub	r2, r2, #1
   18c70:	cmp	r2, #6
   18c74:	bhi	18e7c <grisu3_diy_fp_encode_double@@Base+0x2d4>
   18c78:	ldr	r0, [pc, #1052]	; 1909c <grisu3_diy_fp_encode_double@@Base+0x4f4>
   18c7c:	add	sl, r0, r2, lsl #4
   18c80:	ldr	r0, [r0, r2, lsl #4]
   18c84:	ldr	r5, [sl, #4]
   18c88:	umull	r8, r9, r4, r5
   18c8c:	strd	r8, [sp, #16]
   18c90:	umull	r8, r9, r3, r0
   18c94:	strd	r8, [sp, #24]
   18c98:	umull	r4, r5, r4, r0
   18c9c:	mov	r8, r5
   18ca0:	mov	r9, #0
   18ca4:	ldr	r0, [sp, #24]
   18ca8:	adds	r0, r8, r0
   18cac:	adc	r4, r9, r9
   18cb0:	adds	r0, r0, #-2147483648	; 0x80000000
   18cb4:	adc	r4, r4, r9
   18cb8:	ldr	r5, [sp, #16]
   18cbc:	adds	r0, r0, r5
   18cc0:	adc	r8, r4, r9
   18cc4:	mov	r4, r8
   18cc8:	mov	fp, r9
   18ccc:	ldr	r0, [sp, #28]
   18cd0:	ldr	r5, [sp, #20]
   18cd4:	adds	r0, r0, r5
   18cd8:	str	r0, [sp, #32]
   18cdc:	adc	r0, r9, r9
   18ce0:	str	r0, [sp, #36]	; 0x24
   18ce4:	ldrd	r8, [sp, #32]
   18ce8:	ldr	r0, [sl, #4]
   18cec:	umlal	r8, r9, r0, r3
   18cf0:	adds	r4, r4, r8
   18cf4:	adc	r3, fp, r9
   18cf8:	ldr	r0, [sl, #8]
   18cfc:	add	r1, r1, r0
   18d00:	add	r1, r1, #64	; 0x40
   18d04:	add	r6, r6, #1
   18d08:	add	r2, r6, r2
   18d0c:	cmp	r2, #19
   18d10:	addgt	ip, ip, #4
   18d14:	mov	r2, #0
   18d18:	umull	sl, fp, r4, lr
   18d1c:	umull	r8, r9, r3, r7
   18d20:	umull	r4, r5, r4, r7
   18d24:	mov	r6, r5
   18d28:	mov	r7, r2
   18d2c:	adds	r0, r6, r8
   18d30:	adc	r4, r2, r2
   18d34:	adds	r0, r0, #-2147483648	; 0x80000000
   18d38:	adc	r4, r4, r2
   18d3c:	adds	r0, r0, sl
   18d40:	adc	r4, r4, r2
   18d44:	mov	r0, r4
   18d48:	mov	r5, r2
   18d4c:	mov	r8, r2
   18d50:	adds	r2, r9, fp
   18d54:	str	r2, [sp, #8]
   18d58:	adc	r2, r7, r7
   18d5c:	str	r2, [sp, #12]
   18d60:	ldrd	r6, [sp, #8]
   18d64:	umlal	r6, r7, lr, r3
   18d68:	adds	r0, r0, r6
   18d6c:	adc	r5, r5, r7
   18d70:	ldr	r3, [sp, #44]	; 0x2c
   18d74:	add	r1, r1, r3
   18d78:	add	r6, r1, #64	; 0x40
   18d7c:	cmp	ip, r8
   18d80:	movne	r7, #9
   18d84:	moveq	r7, #8
   18d88:	add	r7, ip, r7
   18d8c:	str	r0, [sp, #72]	; 0x48
   18d90:	str	r5, [sp, #76]	; 0x4c
   18d94:	str	r6, [sp, #80]	; 0x50
   18d98:	ldrd	r2, [sp, #80]	; 0x50
   18d9c:	strd	r2, [sp]
   18da0:	add	r3, sp, #72	; 0x48
   18da4:	ldm	r3, {r2, r3}
   18da8:	add	r0, sp, #56	; 0x38
   18dac:	bl	18aa0 <flatcc_emitter_copy_buffer@@Base+0xe4>
   18db0:	ldr	lr, [sp, #56]	; 0x38
   18db4:	str	lr, [sp, #72]	; 0x48
   18db8:	ldr	r3, [sp, #60]	; 0x3c
   18dbc:	str	r3, [sp, #76]	; 0x4c
   18dc0:	mov	ip, r3
   18dc4:	ldr	r4, [sp, #64]	; 0x40
   18dc8:	sub	r0, r6, r4
   18dcc:	lsl	r0, r7, r0
   18dd0:	add	r2, r4, #64	; 0x40
   18dd4:	movw	r3, #64526	; 0xfc0e
   18dd8:	movt	r3, #65535	; 0xffff
   18ddc:	cmp	r2, r3
   18de0:	movge	r5, #0
   18de4:	bge	18ec8 <grisu3_diy_fp_encode_double@@Base+0x320>
   18de8:	mvn	r3, #1072	; 0x430
   18dec:	cmp	r2, r3
   18df0:	blt	18e98 <grisu3_diy_fp_encode_double@@Base+0x2f0>
   18df4:	add	r3, r4, #1136	; 0x470
   18df8:	add	r3, r3, #2
   18dfc:	rsb	r5, r3, #64	; 0x40
   18e00:	cmp	r5, #60	; 0x3c
   18e04:	bgt	18e9c <grisu3_diy_fp_encode_double@@Base+0x2f4>
   18e08:	b	18ec8 <grisu3_diy_fp_encode_double@@Base+0x320>
   18e0c:	ldr	r3, [pc, #652]	; 190a0 <grisu3_diy_fp_encode_double@@Base+0x4f8>
   18e10:	mov	r2, #80	; 0x50
   18e14:	movw	r1, #60900	; 0xede4
   18e18:	movt	r1, #1
   18e1c:	movw	r0, #60988	; 0xee3c
   18e20:	movt	r0, #1
   18e24:	bl	124b4 <__assert_fail@plt>
   18e28:	ldr	r3, [pc, #624]	; 190a0 <grisu3_diy_fp_encode_double@@Base+0x4f8>
   18e2c:	mov	r2, #81	; 0x51
   18e30:	movw	r1, #60900	; 0xede4
   18e34:	movt	r1, #1
   18e38:	movw	r0, #61020	; 0xee5c
   18e3c:	movt	r0, #1
   18e40:	bl	124b4 <__assert_fail@plt>
   18e44:	ldr	r3, [pc, #596]	; 190a0 <grisu3_diy_fp_encode_double@@Base+0x4f8>
   18e48:	mov	r2, #88	; 0x58
   18e4c:	movw	r1, #60900	; 0xede4
   18e50:	movt	r1, #1
   18e54:	movw	r0, #61064	; 0xee88
   18e58:	movt	r0, #1
   18e5c:	bl	124b4 <__assert_fail@plt>
   18e60:	ldr	r3, [pc, #568]	; 190a0 <grisu3_diy_fp_encode_double@@Base+0x4f8>
   18e64:	mov	r2, #89	; 0x59
   18e68:	movw	r1, #60900	; 0xede4
   18e6c:	movt	r1, #1
   18e70:	movw	r0, #61080	; 0xee98
   18e74:	movt	r0, #1
   18e78:	bl	124b4 <__assert_fail@plt>
   18e7c:	ldr	r3, [pc, #544]	; 190a4 <grisu3_diy_fp_encode_double@@Base+0x4fc>
   18e80:	mov	r2, #185	; 0xb9
   18e84:	movw	r1, #60900	; 0xede4
   18e88:	movt	r1, #1
   18e8c:	movw	r0, #61108	; 0xeeb4
   18e90:	movt	r0, #1
   18e94:	bl	124b4 <__assert_fail@plt>
   18e98:	mov	r3, #0
   18e9c:	rsb	r3, r3, #2
   18ea0:	rsb	r1, r3, #32
   18ea4:	sub	r2, r3, #32
   18ea8:	lsr	lr, lr, r3
   18eac:	orr	lr, lr, ip, lsl r1
   18eb0:	orr	lr, lr, ip, lsr r2
   18eb4:	lsr	ip, ip, r3
   18eb8:	add	r4, r4, r3
   18ebc:	asr	r0, r0, r3
   18ec0:	add	r0, r0, #9
   18ec4:	mov	r5, #62	; 0x3e
   18ec8:	rsb	r6, r5, #32
   18ecc:	sub	r1, r5, #32
   18ed0:	lsr	sl, lr, r5
   18ed4:	orr	sl, sl, ip, lsl r6
   18ed8:	orr	sl, sl, ip, lsr r1
   18edc:	lsr	fp, ip, r5
   18ee0:	add	r4, r5, r4
   18ee4:	sub	ip, r5, #1
   18ee8:	mov	r1, #1
   18eec:	and	r1, lr, r1, lsl ip
   18ef0:	lsl	r1, r1, #3
   18ef4:	mov	lr, #8
   18ef8:	lsl	ip, lr, ip
   18efc:	add	lr, r0, ip
   18f00:	cmp	lr, r5
   18f04:	bgt	18f38 <grisu3_diy_fp_encode_double@@Base+0x390>
   18f08:	adds	sl, sl, #1
   18f0c:	adc	fp, fp, #0
   18f10:	mov	r6, #0
   18f14:	and	r7, fp, #2097152	; 0x200000
   18f18:	orrs	r3, r6, r7
   18f1c:	beq	18f38 <grisu3_diy_fp_encode_double@@Base+0x390>
   18f20:	lsr	r5, sl, #1
   18f24:	orr	r5, r5, fp, lsl #31
   18f28:	lsr	r6, fp, #1
   18f2c:	mov	sl, r5
   18f30:	mov	fp, r6
   18f34:	add	r4, r4, #1
   18f38:	mvn	r6, #0
   18f3c:	movw	r7, #65535	; 0xffff
   18f40:	movt	r7, #31
   18f44:	cmp	fp, r7
   18f48:	cmpeq	sl, r6
   18f4c:	bls	18f84 <grisu3_diy_fp_encode_double@@Base+0x3dc>
   18f50:	mov	r2, sl
   18f54:	mov	r3, fp
   18f58:	lsr	r5, r2, #1
   18f5c:	orr	r5, r5, r3, lsl #31
   18f60:	lsr	r8, r3, #1
   18f64:	mov	r2, r5
   18f68:	mov	r3, r8
   18f6c:	add	r4, r4, #1
   18f70:	cmp	r8, r7
   18f74:	cmpeq	r5, r6
   18f78:	bhi	18f58 <grisu3_diy_fp_encode_double@@Base+0x3b0>
   18f7c:	mov	sl, r5
   18f80:	mov	fp, r8
   18f84:	movw	r5, #64462	; 0xfbce
   18f88:	movt	r5, #65535	; 0xffff
   18f8c:	cmp	r4, r5
   18f90:	blt	19090 <grisu3_diy_fp_encode_double@@Base+0x4e8>
   18f94:	mvn	r5, #1072	; 0x430
   18f98:	cmp	r4, r5
   18f9c:	blt	19058 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   18fa0:	mov	r6, #0
   18fa4:	and	r7, fp, #1048576	; 0x100000
   18fa8:	orrs	r3, r6, r7
   18fac:	bne	19004 <grisu3_diy_fp_encode_double@@Base+0x45c>
   18fb0:	sub	r5, r4, #1
   18fb4:	movw	r7, #64462	; 0xfbce
   18fb8:	movt	r7, #65535	; 0xffff
   18fbc:	mov	r8, #0
   18fc0:	mov	r2, sl
   18fc4:	mov	r3, fp
   18fc8:	mov	sl, r7
   18fcc:	adds	r4, r2, r2
   18fd0:	adc	r9, r3, r3
   18fd4:	mov	r2, r4
   18fd8:	mov	r3, r9
   18fdc:	mov	r4, r5
   18fe0:	cmp	r5, sl
   18fe4:	beq	1906c <grisu3_diy_fp_encode_double@@Base+0x4c4>
   18fe8:	mov	r6, r8
   18fec:	and	r7, r9, #1048576	; 0x100000
   18ff0:	sub	r5, r5, #1
   18ff4:	orrs	r9, r6, r7
   18ff8:	beq	18fcc <grisu3_diy_fp_encode_double@@Base+0x424>
   18ffc:	mov	sl, r2
   19000:	mov	fp, r3
   19004:	add	r4, r4, #1072	; 0x430
   19008:	add	r4, r4, #3
   1900c:	ubfx	r3, fp, #0, #20
   19010:	mov	r6, sl
   19014:	orr	r7, r3, r4, lsl #20
   19018:	ldr	r3, [sp, #132]	; 0x84
   1901c:	strd	r6, [r3]
   19020:	sub	r0, ip, r0
   19024:	cmp	lr, r1
   19028:	movgt	lr, #0
   1902c:	movle	lr, #1
   19030:	cmp	r0, r1
   19034:	movlt	r0, lr
   19038:	orrge	r0, lr, #1
   1903c:	add	sp, sp, #92	; 0x5c
   19040:	ldrd	r4, [sp]
   19044:	ldrd	r6, [sp, #8]
   19048:	ldrd	r8, [sp, #16]
   1904c:	ldrd	sl, [sp, #24]
   19050:	add	sp, sp, #32
   19054:	pop	{pc}		; (ldr pc, [sp], #4)
   19058:	movw	r5, #64462	; 0xfbce
   1905c:	movt	r5, #65535	; 0xffff
   19060:	cmp	r4, r5
   19064:	bne	19004 <grisu3_diy_fp_encode_double@@Base+0x45c>
   19068:	b	19074 <grisu3_diy_fp_encode_double@@Base+0x4cc>
   1906c:	mov	sl, r2
   19070:	mov	fp, r9
   19074:	mov	r4, #0
   19078:	and	r5, fp, #1048576	; 0x100000
   1907c:	orrs	r3, r4, r5
   19080:	beq	1900c <grisu3_diy_fp_encode_double@@Base+0x464>
   19084:	movw	r4, #64462	; 0xfbce
   19088:	movt	r4, #65535	; 0xffff
   1908c:	b	19004 <grisu3_diy_fp_encode_double@@Base+0x45c>
   19090:	mov	r6, #0
   19094:	mov	r7, #0
   19098:	b	19018 <grisu3_diy_fp_encode_double@@Base+0x470>
   1909c:	andeq	lr, r1, r8, asr #21
   190a0:	andeq	lr, r1, r8, lsl r5
   190a4:	andeq	lr, r1, r8, lsr #21
   190a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   190ac:	strd	r6, [sp, #8]
   190b0:	strd	r8, [sp, #16]
   190b4:	strd	sl, [sp, #24]
   190b8:	str	lr, [sp, #32]
   190bc:	sub	sp, sp, #44	; 0x2c
   190c0:	mov	ip, r2
   190c4:	str	r2, [sp, #12]
   190c8:	mov	r2, #0
   190cc:	mov	r3, #0
   190d0:	strd	r2, [ip]
   190d4:	cmp	r1, #1000	; 0x3e8
   190d8:	addle	r1, r1, #1
   190dc:	addle	r1, r0, r1
   190e0:	addgt	r1, r0, #1000	; 0x3e8
   190e4:	addgt	r1, r1, #1
   190e8:	cmp	r1, r0
   190ec:	moveq	r6, r0
   190f0:	beq	198f8 <grisu3_diy_fp_encode_double@@Base+0xd50>
   190f4:	ldrb	r3, [r0]
   190f8:	cmp	r3, #45	; 0x2d
   190fc:	movne	r3, r0
   19100:	movne	r2, #0
   19104:	strne	r2, [sp, #16]
   19108:	beq	191f4 <grisu3_diy_fp_encode_double@@Base+0x64c>
   1910c:	ldrb	r4, [r3]
   19110:	cmp	r4, #48	; 0x30
   19114:	beq	1920c <grisu3_diy_fp_encode_double@@Base+0x664>
   19118:	sub	r2, r4, #49	; 0x31
   1911c:	uxtb	r2, r2
   19120:	cmp	r2, #8
   19124:	bhi	19264 <grisu3_diy_fp_encode_double@@Base+0x6bc>
   19128:	add	ip, r3, #1
   1912c:	sub	r4, r4, #48	; 0x30
   19130:	asr	r5, r4, #31
   19134:	cmp	r1, ip
   19138:	beq	198e4 <grisu3_diy_fp_encode_double@@Base+0xd3c>
   1913c:	ldrb	sl, [ip]
   19140:	sub	r3, sl, #48	; 0x30
   19144:	uxtb	r3, r3
   19148:	cmp	r3, #9
   1914c:	movhi	r6, ip
   19150:	bhi	19a8c <grisu3_diy_fp_encode_double@@Base+0xee4>
   19154:	add	r2, ip, #1
   19158:	mov	lr, r1
   1915c:	add	r9, pc, #964	; 0x3c4
   19160:	ldrd	r8, [r9]
   19164:	mov	r6, r2
   19168:	lsl	fp, r5, #2
   1916c:	lsl	r3, r4, #2
   19170:	orr	r7, fp, r4, lsr #30
   19174:	adds	r3, r3, r4
   19178:	adc	r7, r7, r5
   1917c:	adds	r3, r3, r3
   19180:	adc	r7, r7, r7
   19184:	uxtb	sl, sl
   19188:	mov	fp, #0
   1918c:	adds	r3, r3, sl
   19190:	adc	r7, r7, fp
   19194:	subs	r4, r3, #48	; 0x30
   19198:	sbc	r5, r7, #0
   1919c:	cmp	r2, lr
   191a0:	beq	198ec <grisu3_diy_fp_encode_double@@Base+0xd44>
   191a4:	ldrb	sl, [r2], #1
   191a8:	sub	r3, sl, #48	; 0x30
   191ac:	uxtb	r3, r3
   191b0:	cmp	r3, #9
   191b4:	bhi	19a8c <grisu3_diy_fp_encode_double@@Base+0xee4>
   191b8:	cmp	r5, r9
   191bc:	cmpeq	r4, r8
   191c0:	bls	19164 <grisu3_diy_fp_encode_double@@Base+0x5bc>
   191c4:	cmp	sl, #52	; 0x34
   191c8:	movls	sl, #0
   191cc:	movhi	sl, #1
   191d0:	adds	r4, r4, sl
   191d4:	adc	r5, r5, #0
   191d8:	sub	r7, r6, ip
   191dc:	cmp	r1, r6
   191e0:	moveq	r6, #0
   191e4:	beq	198f8 <grisu3_diy_fp_encode_double@@Base+0xd50>
   191e8:	mov	r3, #1
   191ec:	str	r3, [sp, #20]
   191f0:	b	19a98 <grisu3_diy_fp_encode_double@@Base+0xef0>
   191f4:	add	r3, r0, #1
   191f8:	cmp	r1, r3
   191fc:	beq	198cc <grisu3_diy_fp_encode_double@@Base+0xd24>
   19200:	mov	r2, #1
   19204:	str	r2, [sp, #16]
   19208:	b	1910c <grisu3_diy_fp_encode_double@@Base+0x564>
   1920c:	add	ip, r3, #1
   19210:	cmp	r1, ip
   19214:	moveq	r6, #0
   19218:	beq	198f8 <grisu3_diy_fp_encode_double@@Base+0xd50>
   1921c:	ldrb	r2, [r3, #1]
   19220:	orr	lr, r2, #32
   19224:	cmp	lr, #120	; 0x78
   19228:	beq	198d4 <grisu3_diy_fp_encode_double@@Base+0xd2c>
   1922c:	cmp	r2, #48	; 0x30
   19230:	addeq	r3, r3, #2
   19234:	moveq	lr, r1
   19238:	bne	19258 <grisu3_diy_fp_encode_double@@Base+0x6b0>
   1923c:	mov	ip, r3
   19240:	cmp	r3, lr
   19244:	beq	198dc <grisu3_diy_fp_encode_double@@Base+0xd34>
   19248:	add	r3, r3, #1
   1924c:	ldrb	r2, [ip]
   19250:	cmp	r2, #48	; 0x30
   19254:	beq	1923c <grisu3_diy_fp_encode_double@@Base+0x694>
   19258:	mov	r4, #0
   1925c:	mov	r5, #0
   19260:	b	1913c <grisu3_diy_fp_encode_double@@Base+0x594>
   19264:	ldr	r3, [sp, #16]
   19268:	cmp	r3, #0
   1926c:	moveq	r6, r0
   19270:	movne	r6, #0
   19274:	b	198f8 <grisu3_diy_fp_encode_double@@Base+0xd50>
   19278:	add	lr, ip, #1
   1927c:	add	r2, r6, #1
   19280:	cmp	r1, r2
   19284:	beq	19918 <grisu3_diy_fp_encode_double@@Base+0xd70>
   19288:	ldrb	r3, [r6, #1]
   1928c:	sub	r3, r3, #48	; 0x30
   19290:	uxtb	r3, r3
   19294:	cmp	r3, #9
   19298:	bhi	19a70 <grisu3_diy_fp_encode_double@@Base+0xec8>
   1929c:	add	r2, r6, #2
   192a0:	mov	r9, r1
   192a4:	sub	sl, ip, r6
   192a8:	add	ip, sl, r2
   192ac:	mov	lr, r2
   192b0:	cmp	r2, r9
   192b4:	beq	19920 <grisu3_diy_fp_encode_double@@Base+0xd78>
   192b8:	add	r2, r2, #1
   192bc:	ldrb	r3, [lr]
   192c0:	sub	r3, r3, #48	; 0x30
   192c4:	uxtb	r3, r3
   192c8:	cmp	r3, #9
   192cc:	bls	192a8 <grisu3_diy_fp_encode_double@@Base+0x700>
   192d0:	mov	r6, lr
   192d4:	mov	r3, #1
   192d8:	str	r3, [sp, #20]
   192dc:	b	19ae4 <grisu3_diy_fp_encode_double@@Base+0xf3c>
   192e0:	add	r2, r6, #1
   192e4:	mov	sl, r2
   192e8:	ldrb	r8, [r6, #1]
   192ec:	sub	r3, r8, #48	; 0x30
   192f0:	uxtb	r3, r3
   192f4:	cmp	r3, #9
   192f8:	movhi	r6, #0
   192fc:	bhi	198f8 <grisu3_diy_fp_encode_double@@Base+0xd50>
   19300:	cmp	r1, r2
   19304:	beq	19928 <grisu3_diy_fp_encode_double@@Base+0xd80>
   19308:	add	r3, pc, #536	; 0x218
   1930c:	ldrd	r2, [r3]
   19310:	cmp	r5, r3
   19314:	cmpeq	r4, r2
   19318:	bhi	19b7c <grisu3_diy_fp_encode_double@@Base+0xfd4>
   1931c:	add	lr, r6, #2
   19320:	add	r6, r6, ip
   19324:	add	r6, r6, #1
   19328:	str	r1, [sp, #24]
   1932c:	mov	r2, r1
   19330:	str	r0, [sp, #28]
   19334:	mov	fp, lr
   19338:	lsl	r9, r5, #2
   1933c:	lsl	r3, r4, #2
   19340:	orr	ip, r9, r4, lsr #30
   19344:	adds	r3, r3, r4
   19348:	adc	ip, ip, r5
   1934c:	adds	r3, r3, r3
   19350:	adc	ip, ip, ip
   19354:	uxtb	r8, r8
   19358:	mov	r9, #0
   1935c:	adds	r3, r3, r8
   19360:	adc	ip, ip, r9
   19364:	subs	r4, r3, #48	; 0x30
   19368:	sbc	r5, ip, #0
   1936c:	sub	ip, r6, lr
   19370:	cmp	lr, r2
   19374:	beq	19930 <grisu3_diy_fp_encode_double@@Base+0xd88>
   19378:	ldrb	r8, [lr], #1
   1937c:	sub	r3, r8, #48	; 0x30
   19380:	uxtb	r3, r3
   19384:	cmp	r3, #9
   19388:	bhi	193e8 <grisu3_diy_fp_encode_double@@Base+0x840>
   1938c:	add	r1, pc, #404	; 0x194
   19390:	ldrd	r0, [r1]
   19394:	cmp	r5, r1
   19398:	cmpeq	r4, r0
   1939c:	bls	19334 <grisu3_diy_fp_encode_double@@Base+0x78c>
   193a0:	ldr	r1, [sp, #24]
   193a4:	ldr	r0, [sp, #28]
   193a8:	ldr	r3, [sp, #20]
   193ac:	cmp	r3, #0
   193b0:	bne	19a5c <grisu3_diy_fp_encode_double@@Base+0xeb4>
   193b4:	cmp	r8, #52	; 0x34
   193b8:	movls	r2, #0
   193bc:	movhi	r2, #1
   193c0:	adds	r4, r4, r2
   193c4:	adc	r5, r5, #0
   193c8:	sub	r3, fp, sl
   193cc:	add	r7, r7, r3
   193d0:	cmp	r1, fp
   193d4:	moveq	r6, #0
   193d8:	beq	198f8 <grisu3_diy_fp_encode_double@@Base+0xd50>
   193dc:	mov	r3, #1
   193e0:	str	r3, [sp, #20]
   193e4:	b	193f8 <grisu3_diy_fp_encode_double@@Base+0x850>
   193e8:	ldr	r1, [sp, #24]
   193ec:	ldr	r0, [sp, #28]
   193f0:	sub	r3, fp, sl
   193f4:	add	r7, r7, r3
   193f8:	ldrb	r3, [fp]
   193fc:	cmp	r3, #48	; 0x30
   19400:	bne	19a54 <grisu3_diy_fp_encode_double@@Base+0xeac>
   19404:	add	r3, fp, #1
   19408:	mov	r2, r1
   1940c:	sub	fp, ip, fp
   19410:	add	ip, fp, r3
   19414:	mov	r6, r3
   19418:	cmp	r2, r3
   1941c:	beq	19938 <grisu3_diy_fp_encode_double@@Base+0xd90>
   19420:	add	r3, r3, #1
   19424:	ldrb	lr, [r6]
   19428:	cmp	lr, #48	; 0x30
   1942c:	beq	19410 <grisu3_diy_fp_encode_double@@Base+0x868>
   19430:	ldrb	r3, [r6]
   19434:	sub	r3, r3, #49	; 0x31
   19438:	uxtb	r3, r3
   1943c:	cmp	r3, #8
   19440:	bhi	19af0 <grisu3_diy_fp_encode_double@@Base+0xf48>
   19444:	add	r2, r6, #1
   19448:	cmp	r1, r2
   1944c:	beq	19940 <grisu3_diy_fp_encode_double@@Base+0xd98>
   19450:	ldrb	r3, [r6, #1]
   19454:	sub	r3, r3, #48	; 0x30
   19458:	uxtb	r3, r3
   1945c:	cmp	r3, #9
   19460:	bhi	19a44 <grisu3_diy_fp_encode_double@@Base+0xe9c>
   19464:	add	r2, r6, #2
   19468:	mov	lr, r1
   1946c:	mov	r6, r2
   19470:	cmp	lr, r2
   19474:	beq	19948 <grisu3_diy_fp_encode_double@@Base+0xda0>
   19478:	add	r2, r2, #1
   1947c:	ldrb	r3, [r6]
   19480:	sub	r3, r3, #48	; 0x30
   19484:	uxtb	r3, r3
   19488:	cmp	r3, #9
   1948c:	bls	1946c <grisu3_diy_fp_encode_double@@Base+0x8c4>
   19490:	mov	r3, #1
   19494:	str	r3, [sp, #20]
   19498:	b	19af0 <grisu3_diy_fp_encode_double@@Base+0xf48>
   1949c:	add	r2, r6, #2
   194a0:	cmp	r1, r2
   194a4:	beq	19950 <grisu3_diy_fp_encode_double@@Base+0xda8>
   194a8:	mov	fp, #0
   194ac:	b	19b34 <grisu3_diy_fp_encode_double@@Base+0xf8c>
   194b0:	add	r2, r6, #2
   194b4:	cmp	r1, r2
   194b8:	beq	19958 <grisu3_diy_fp_encode_double@@Base+0xdb0>
   194bc:	mov	fp, #1
   194c0:	b	19b34 <grisu3_diy_fp_encode_double@@Base+0xf8c>
   194c4:	mov	r6, r2
   194c8:	cmp	sl, r2
   194cc:	beq	19968 <grisu3_diy_fp_encode_double@@Base+0xdc0>
   194d0:	ldrb	r9, [r2], #1
   194d4:	sub	lr, r9, #48	; 0x30
   194d8:	uxtb	lr, lr
   194dc:	cmp	lr, #9
   194e0:	bhi	19980 <grisu3_diy_fp_encode_double@@Base+0xdd8>
   194e4:	cmp	r3, #32768	; 0x8000
   194e8:	bge	194c4 <grisu3_diy_fp_encode_double@@Base+0x91c>
   194ec:	add	r3, r3, r3, lsl #2
   194f0:	add	r3, r9, r3, lsl #1
   194f4:	sub	r3, r3, #48	; 0x30
   194f8:	b	194c4 <grisu3_diy_fp_encode_double@@Base+0x91c>
   194fc:	mov	r2, #0
   19500:	mov	r3, #0
   19504:	movt	r3, #32752	; 0x7ff0
   19508:	strd	r2, [r9]
   1950c:	ldr	r3, [sp, #16]
   19510:	cmp	r3, #0
   19514:	beq	198f8 <grisu3_diy_fp_encode_double@@Base+0xd50>
   19518:	vldr	d7, [r9]
   1951c:	vneg.f64	d7, d7
   19520:	vstr	d7, [r9]
   19524:	b	198f8 <grisu3_diy_fp_encode_double@@Base+0xd50>
   19528:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   1952c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   19530:	andeq	r0, r0, r0
   19534:	sbcmi	r8, r3, r0, lsl #16
   19538:	andeq	r0, r0, r0
   1953c:	addmi	r4, pc, r0
   19540:	andeq	r0, r0, r0
   19544:	smlawbmi	lr, r0, r4, r8
   19548:	andeq	r0, r0, r0
   1954c:	orrsmi	sp, r7, r4, lsl #15
   19550:	andcs	r0, r0, r0
   19554:	andmi	sl, r2, #95	; 0x5f
   19558:	andge	r0, r0, #0
   1955c:	rsbmi	r1, sp, #148, 20	; 0x94000
   19560:	cdpne	0, 9, cr0, cr0, cr0, {0}
   19564:	sbcsmi	fp, r6, #196, 24	; 0xc400
   19568:	strbcc	r8, [r0, r0]!
   1956c:	movtmi	ip, #4985	; 0x1379
   19570:	strbvs	ip, [lr, -r0, lsl #16]
   19574:			; <UNDEFINED> instruction: 0x43abc16d
   19578:	ldmvc	r5!, {r6, sl, fp, pc}
   1957c:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   19580:			; <UNDEFINED> instruction: 0x064dd592
   19584:	strmi	pc, [r0], #207	; 0xcf
   19588:	usatle	lr, #2, r0, asr #30
   1958c:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   19590:	addsvs	r3, r1, r0, lsl #26
   19594:	mvnmi	r5, #228, 16	; 0xe40000
   19598:	ldrbhi	sl, [r8]
   1959c:	cmnmi	r6, #1459617792	; 0x57000000
   195a0:	ldrtcs	r0, [r4], -r0
   195a4:	movwmi	r6, #52213	; 0xcbf5
   195a8:	strb	r0, [r0, #-0]
   195ac:	adcmi	r3, r2, #156	; 0x9c
   195b0:	stmda	r0, {}	; <UNPREDICTABLE>
   195b4:	eorsmi	r4, r7, #7733248	; 0x760000
   195b8:	andeq	r0, r0, r0
   195bc:	bicmi	ip, sp, r5, ror #26
   195c0:	andeq	r0, r0, r0
   195c4:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   195c8:	andeq	r0, r0, r0
   195cc:	rscsmi	r6, r8, r0, lsl #20
   195d0:	andeq	r0, r0, r0
   195d4:	subsmi	r0, r9, r0
   195d8:	andeq	r0, r0, r0
   195dc:	eormi	r0, r4, r0
   195e0:	mov	r0, r4
   195e4:	mov	r1, r5
   195e8:	bl	1d5d0 <flatcc_json_parser_struct_as_root@@Base+0x438>
   195ec:	vmov	d7, r0, r1
   195f0:	sub	r3, r8, r7
   195f4:	add	r3, r3, #22
   195f8:	cmp	r3, #44	; 0x2c
   195fc:	ldrls	pc, [pc, r3, lsl #2]
   19600:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   19604:			; <UNDEFINED> instruction: 0x000196b8
   19608:	andeq	r9, r1, r8, asr #13
   1960c:	ldrdeq	r9, [r1], -r4
   19610:	andeq	r9, r1, r0, ror #13
   19614:	andeq	r9, r1, ip, ror #13
   19618:	strdeq	r9, [r1], -r8
   1961c:	andeq	r9, r1, r4, lsl #14
   19620:	andeq	r9, r1, r0, lsl r7
   19624:	andeq	r9, r1, ip, lsl r7
   19628:	andeq	r9, r1, r8, lsr #14
   1962c:	andeq	r9, r1, r4, lsr r7
   19630:	andeq	r9, r1, r0, asr #14
   19634:	andeq	r9, r1, ip, asr #14
   19638:	andeq	r9, r1, r8, asr r7
   1963c:	andeq	r9, r1, r4, ror #14
   19640:	andeq	r9, r1, r0, ror r7
   19644:	andeq	r9, r1, ip, ror r7
   19648:	andeq	r9, r1, r8, lsl #15
   1964c:	muleq	r1, r4, r7
   19650:	andeq	r9, r1, r0, lsr #15
   19654:	andeq	r9, r1, ip, lsr #15
   19658:			; <UNDEFINED> instruction: 0x000197b8
   1965c:	andeq	r9, r1, r0, asr #13
   19660:	andeq	r9, r1, r4, asr #15
   19664:	ldrdeq	r9, [r1], -r0
   19668:	ldrdeq	r9, [r1], -ip
   1966c:	andeq	r9, r1, r8, ror #15
   19670:	strdeq	r9, [r1], -r4
   19674:	andeq	r9, r1, r0, lsl #16
   19678:	andeq	r9, r1, ip, lsl #16
   1967c:	andeq	r9, r1, r8, lsl r8
   19680:	andeq	r9, r1, r4, lsr #16
   19684:	andeq	r9, r1, r0, lsr r8
   19688:	andeq	r9, r1, ip, lsr r8
   1968c:	andeq	r9, r1, r8, asr #16
   19690:	andeq	r9, r1, r4, asr r8
   19694:	andeq	r9, r1, r0, ror #16
   19698:	andeq	r9, r1, ip, ror #16
   1969c:	andeq	r9, r1, r8, ror r8
   196a0:	andeq	r9, r1, r4, lsl #17
   196a4:	muleq	r1, r0, r8
   196a8:	muleq	r1, ip, r8
   196ac:	andeq	r9, r1, r8, lsr #17
   196b0:			; <UNDEFINED> instruction: 0x000198b4
   196b4:	andeq	r9, r1, r0, asr #17
   196b8:	vldr	d6, [pc, #-320]	; 19580 <grisu3_diy_fp_encode_double@@Base+0x9d8>
   196bc:	vdiv.f64	d7, d7, d6
   196c0:	vstr	d7, [r9]
   196c4:	b	1950c <grisu3_diy_fp_encode_double@@Base+0x964>
   196c8:	vldr	d6, [pc, #-328]	; 19588 <grisu3_diy_fp_encode_double@@Base+0x9e0>
   196cc:	vdiv.f64	d7, d7, d6
   196d0:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   196d4:	vldr	d6, [pc, #-356]	; 19578 <grisu3_diy_fp_encode_double@@Base+0x9d0>
   196d8:	vdiv.f64	d7, d7, d6
   196dc:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   196e0:	vldr	d6, [pc, #-344]	; 19590 <grisu3_diy_fp_encode_double@@Base+0x9e8>
   196e4:	vdiv.f64	d7, d7, d6
   196e8:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   196ec:	vldr	d6, [pc, #-388]	; 19570 <grisu3_diy_fp_encode_double@@Base+0x9c8>
   196f0:	vdiv.f64	d7, d7, d6
   196f4:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   196f8:	vldr	d6, [pc, #-360]	; 19598 <grisu3_diy_fp_encode_double@@Base+0x9f0>
   196fc:	vdiv.f64	d7, d7, d6
   19700:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   19704:	vldr	d6, [pc, #-420]	; 19568 <grisu3_diy_fp_encode_double@@Base+0x9c0>
   19708:	vdiv.f64	d7, d7, d6
   1970c:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   19710:	vldr	d6, [pc, #-376]	; 195a0 <grisu3_diy_fp_encode_double@@Base+0x9f8>
   19714:	vdiv.f64	d7, d7, d6
   19718:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   1971c:	vldr	d6, [pc, #-452]	; 19560 <grisu3_diy_fp_encode_double@@Base+0x9b8>
   19720:	vdiv.f64	d7, d7, d6
   19724:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   19728:	vldr	d6, [pc, #-392]	; 195a8 <grisu3_diy_fp_encode_double@@Base+0xa00>
   1972c:	vdiv.f64	d7, d7, d6
   19730:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   19734:	vldr	d6, [pc, #-484]	; 19558 <grisu3_diy_fp_encode_double@@Base+0x9b0>
   19738:	vdiv.f64	d7, d7, d6
   1973c:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   19740:	vldr	d6, [pc, #-408]	; 195b0 <grisu3_diy_fp_encode_double@@Base+0xa08>
   19744:	vdiv.f64	d7, d7, d6
   19748:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   1974c:	vldr	d6, [pc, #-516]	; 19550 <grisu3_diy_fp_encode_double@@Base+0x9a8>
   19750:	vdiv.f64	d7, d7, d6
   19754:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   19758:	vldr	d6, [pc, #-424]	; 195b8 <grisu3_diy_fp_encode_double@@Base+0xa10>
   1975c:	vdiv.f64	d7, d7, d6
   19760:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   19764:	vldr	d6, [pc, #-548]	; 19548 <grisu3_diy_fp_encode_double@@Base+0x9a0>
   19768:	vdiv.f64	d7, d7, d6
   1976c:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   19770:	vldr	d6, [pc, #-440]	; 195c0 <grisu3_diy_fp_encode_double@@Base+0xa18>
   19774:	vdiv.f64	d7, d7, d6
   19778:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   1977c:	vldr	d6, [pc, #-580]	; 19540 <grisu3_diy_fp_encode_double@@Base+0x998>
   19780:	vdiv.f64	d7, d7, d6
   19784:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   19788:	vldr	d6, [pc, #-456]	; 195c8 <grisu3_diy_fp_encode_double@@Base+0xa20>
   1978c:	vdiv.f64	d7, d7, d6
   19790:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   19794:	vldr	d6, [pc, #-620]	; 19530 <grisu3_diy_fp_encode_double@@Base+0x988>
   19798:	vdiv.f64	d7, d7, d6
   1979c:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   197a0:	vldr	d6, [pc, #-624]	; 19538 <grisu3_diy_fp_encode_double@@Base+0x990>
   197a4:	vdiv.f64	d7, d7, d6
   197a8:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   197ac:	vldr	d6, [pc, #-484]	; 195d0 <grisu3_diy_fp_encode_double@@Base+0xa28>
   197b0:	vdiv.f64	d7, d7, d6
   197b4:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   197b8:	vldr	d6, [pc, #-488]	; 195d8 <grisu3_diy_fp_encode_double@@Base+0xa30>
   197bc:	vdiv.f64	d7, d7, d6
   197c0:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   197c4:	vldr	d6, [pc, #-500]	; 195d8 <grisu3_diy_fp_encode_double@@Base+0xa30>
   197c8:	vmul.f64	d7, d7, d6
   197cc:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   197d0:	vldr	d6, [pc, #-520]	; 195d0 <grisu3_diy_fp_encode_double@@Base+0xa28>
   197d4:	vmul.f64	d7, d7, d6
   197d8:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   197dc:	vldr	d6, [pc, #-684]	; 19538 <grisu3_diy_fp_encode_double@@Base+0x990>
   197e0:	vmul.f64	d7, d7, d6
   197e4:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   197e8:	vldr	d6, [pc, #-704]	; 19530 <grisu3_diy_fp_encode_double@@Base+0x988>
   197ec:	vmul.f64	d7, d7, d6
   197f0:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   197f4:	vldr	d6, [pc, #-564]	; 195c8 <grisu3_diy_fp_encode_double@@Base+0xa20>
   197f8:	vmul.f64	d7, d7, d6
   197fc:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   19800:	vldr	d6, [pc, #-712]	; 19540 <grisu3_diy_fp_encode_double@@Base+0x998>
   19804:	vmul.f64	d7, d7, d6
   19808:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   1980c:	vldr	d6, [pc, #-596]	; 195c0 <grisu3_diy_fp_encode_double@@Base+0xa18>
   19810:	vmul.f64	d7, d7, d6
   19814:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   19818:	vldr	d6, [pc, #-728]	; 19548 <grisu3_diy_fp_encode_double@@Base+0x9a0>
   1981c:	vmul.f64	d7, d7, d6
   19820:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   19824:	vldr	d6, [pc, #-628]	; 195b8 <grisu3_diy_fp_encode_double@@Base+0xa10>
   19828:	vmul.f64	d7, d7, d6
   1982c:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   19830:	vldr	d6, [pc, #-744]	; 19550 <grisu3_diy_fp_encode_double@@Base+0x9a8>
   19834:	vmul.f64	d7, d7, d6
   19838:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   1983c:	vldr	d6, [pc, #-660]	; 195b0 <grisu3_diy_fp_encode_double@@Base+0xa08>
   19840:	vmul.f64	d7, d7, d6
   19844:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   19848:	vldr	d6, [pc, #-760]	; 19558 <grisu3_diy_fp_encode_double@@Base+0x9b0>
   1984c:	vmul.f64	d7, d7, d6
   19850:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   19854:	vldr	d6, [pc, #-692]	; 195a8 <grisu3_diy_fp_encode_double@@Base+0xa00>
   19858:	vmul.f64	d7, d7, d6
   1985c:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   19860:	vldr	d6, [pc, #-776]	; 19560 <grisu3_diy_fp_encode_double@@Base+0x9b8>
   19864:	vmul.f64	d7, d7, d6
   19868:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   1986c:	vldr	d6, [pc, #-724]	; 195a0 <grisu3_diy_fp_encode_double@@Base+0x9f8>
   19870:	vmul.f64	d7, d7, d6
   19874:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   19878:	vldr	d6, [pc, #-792]	; 19568 <grisu3_diy_fp_encode_double@@Base+0x9c0>
   1987c:	vmul.f64	d7, d7, d6
   19880:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   19884:	vldr	d6, [pc, #-756]	; 19598 <grisu3_diy_fp_encode_double@@Base+0x9f0>
   19888:	vmul.f64	d7, d7, d6
   1988c:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   19890:	vldr	d6, [pc, #-808]	; 19570 <grisu3_diy_fp_encode_double@@Base+0x9c8>
   19894:	vmul.f64	d7, d7, d6
   19898:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   1989c:	vldr	d6, [pc, #-788]	; 19590 <grisu3_diy_fp_encode_double@@Base+0x9e8>
   198a0:	vmul.f64	d7, d7, d6
   198a4:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   198a8:	vldr	d6, [pc, #-824]	; 19578 <grisu3_diy_fp_encode_double@@Base+0x9d0>
   198ac:	vmul.f64	d7, d7, d6
   198b0:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   198b4:	vldr	d6, [pc, #-820]	; 19588 <grisu3_diy_fp_encode_double@@Base+0x9e0>
   198b8:	vmul.f64	d7, d7, d6
   198bc:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   198c0:	vldr	d6, [pc, #-840]	; 19580 <grisu3_diy_fp_encode_double@@Base+0x9d8>
   198c4:	vmul.f64	d7, d7, d6
   198c8:	b	196c0 <grisu3_diy_fp_encode_double@@Base+0xb18>
   198cc:	mov	r6, #0
   198d0:	b	198f8 <grisu3_diy_fp_encode_double@@Base+0xd50>
   198d4:	mov	r6, r0
   198d8:	b	198f8 <grisu3_diy_fp_encode_double@@Base+0xd50>
   198dc:	mov	r6, #0
   198e0:	b	198f8 <grisu3_diy_fp_encode_double@@Base+0xd50>
   198e4:	mov	r6, #0
   198e8:	b	198f8 <grisu3_diy_fp_encode_double@@Base+0xd50>
   198ec:	mov	r6, #0
   198f0:	b	198f8 <grisu3_diy_fp_encode_double@@Base+0xd50>
   198f4:	mov	r6, #0
   198f8:	mov	r0, r6
   198fc:	add	sp, sp, #44	; 0x2c
   19900:	ldrd	r4, [sp]
   19904:	ldrd	r6, [sp, #8]
   19908:	ldrd	r8, [sp, #16]
   1990c:	ldrd	sl, [sp, #24]
   19910:	add	sp, sp, #32
   19914:	pop	{pc}		; (ldr pc, [sp], #4)
   19918:	mov	r6, #0
   1991c:	b	198f8 <grisu3_diy_fp_encode_double@@Base+0xd50>
   19920:	mov	r6, #0
   19924:	b	198f8 <grisu3_diy_fp_encode_double@@Base+0xd50>
   19928:	mov	r6, #0
   1992c:	b	198f8 <grisu3_diy_fp_encode_double@@Base+0xd50>
   19930:	mov	r6, #0
   19934:	b	198f8 <grisu3_diy_fp_encode_double@@Base+0xd50>
   19938:	mov	r6, #0
   1993c:	b	198f8 <grisu3_diy_fp_encode_double@@Base+0xd50>
   19940:	mov	r6, #0
   19944:	b	198f8 <grisu3_diy_fp_encode_double@@Base+0xd50>
   19948:	mov	r6, #0
   1994c:	b	198f8 <grisu3_diy_fp_encode_double@@Base+0xd50>
   19950:	mov	r6, #0
   19954:	b	198f8 <grisu3_diy_fp_encode_double@@Base+0xd50>
   19958:	mov	r6, #0
   1995c:	b	198f8 <grisu3_diy_fp_encode_double@@Base+0xd50>
   19960:	mov	r6, #0
   19964:	b	198f8 <grisu3_diy_fp_encode_double@@Base+0xd50>
   19968:	cmp	fp, #0
   1996c:	moveq	r6, #0
   19970:	bne	19988 <grisu3_diy_fp_encode_double@@Base+0xde0>
   19974:	b	198f8 <grisu3_diy_fp_encode_double@@Base+0xd50>
   19978:	add	r8, ip, r3
   1997c:	b	19998 <grisu3_diy_fp_encode_double@@Base+0xdf0>
   19980:	cmp	fp, #0
   19984:	beq	19978 <grisu3_diy_fp_encode_double@@Base+0xdd0>
   19988:	rsb	r8, r3, #0
   1998c:	add	r8, ip, r8
   19990:	cmp	r1, r6
   19994:	beq	19960 <grisu3_diy_fp_encode_double@@Base+0xdb8>
   19998:	ldr	r9, [sp, #12]
   1999c:	mov	sl, r0
   199a0:	orrs	r3, r4, r5
   199a4:	moveq	r2, #1
   199a8:	movne	r2, #0
   199ac:	cmn	r8, #324	; 0x144
   199b0:	movge	r3, #0
   199b4:	movlt	r3, #1
   199b8:	orrs	r3, r2, r3
   199bc:	bne	1950c <grisu3_diy_fp_encode_double@@Base+0x964>
   199c0:	movw	r3, #310	; 0x136
   199c4:	cmp	r8, r3
   199c8:	bgt	194fc <grisu3_diy_fp_encode_double@@Base+0x954>
   199cc:	mvn	r2, #0
   199d0:	movw	r3, #65535	; 0xffff
   199d4:	movt	r3, #31
   199d8:	cmp	r5, r3
   199dc:	cmpeq	r4, r2
   199e0:	movls	r3, #1
   199e4:	movhi	r3, #0
   199e8:	cmp	r8, #22
   199ec:	movhi	r3, #0
   199f0:	andls	r3, r3, #1
   199f4:	cmp	r3, #0
   199f8:	bne	195e0 <grisu3_diy_fp_encode_double@@Base+0xa38>
   199fc:	str	r9, [sp, #4]
   19a00:	ldr	r3, [sp, #20]
   19a04:	str	r3, [sp]
   19a08:	mov	r3, r7
   19a0c:	mov	r2, r8
   19a10:	mov	r0, r4
   19a14:	mov	r1, r5
   19a18:	bl	18ba8 <grisu3_diy_fp_encode_double@@Base>
   19a1c:	cmp	r0, #0
   19a20:	bne	1950c <grisu3_diy_fp_encode_double@@Base+0x964>
   19a24:	add	r1, sp, #36	; 0x24
   19a28:	mov	r0, sl
   19a2c:	bl	12490 <strtod@plt>
   19a30:	vstr	d0, [r9]
   19a34:	ldr	r3, [sp, #36]	; 0x24
   19a38:	cmp	r6, r3
   19a3c:	movcs	r6, r3
   19a40:	b	198f8 <grisu3_diy_fp_encode_double@@Base+0xd50>
   19a44:	mov	r6, r2
   19a48:	mov	r3, #1
   19a4c:	str	r3, [sp, #20]
   19a50:	b	19af0 <grisu3_diy_fp_encode_double@@Base+0xf48>
   19a54:	mov	r6, fp
   19a58:	b	19430 <grisu3_diy_fp_encode_double@@Base+0x888>
   19a5c:	sub	r3, fp, sl
   19a60:	add	r7, r7, r3
   19a64:	mov	r3, #1
   19a68:	str	r3, [sp, #20]
   19a6c:	b	193f8 <grisu3_diy_fp_encode_double@@Base+0x850>
   19a70:	mov	ip, lr
   19a74:	mov	r6, r2
   19a78:	mov	r3, #1
   19a7c:	str	r3, [sp, #20]
   19a80:	b	19ae4 <grisu3_diy_fp_encode_double@@Base+0xf3c>
   19a84:	mov	ip, #0
   19a88:	b	19ad0 <grisu3_diy_fp_encode_double@@Base+0xf28>
   19a8c:	sub	r7, r6, ip
   19a90:	mov	r3, #0
   19a94:	str	r3, [sp, #20]
   19a98:	ldrb	r3, [r6]
   19a9c:	cmp	r3, #48	; 0x30
   19aa0:	bne	19a84 <grisu3_diy_fp_encode_double@@Base+0xedc>
   19aa4:	add	r3, r6, #1
   19aa8:	mov	lr, r1
   19aac:	mov	ip, #0
   19ab0:	add	ip, ip, #1
   19ab4:	mov	r6, r3
   19ab8:	cmp	r3, lr
   19abc:	beq	198f4 <grisu3_diy_fp_encode_double@@Base+0xd4c>
   19ac0:	add	r3, r3, #1
   19ac4:	ldrb	r2, [r6]
   19ac8:	cmp	r2, #48	; 0x30
   19acc:	beq	19ab0 <grisu3_diy_fp_encode_double@@Base+0xf08>
   19ad0:	ldrb	r3, [r6]
   19ad4:	sub	r3, r3, #49	; 0x31
   19ad8:	uxtb	r3, r3
   19adc:	cmp	r3, #8
   19ae0:	bls	19278 <grisu3_diy_fp_encode_double@@Base+0x6d0>
   19ae4:	ldrb	r3, [r6]
   19ae8:	cmp	r3, #46	; 0x2e
   19aec:	beq	192e0 <grisu3_diy_fp_encode_double@@Base+0x738>
   19af0:	add	ip, r7, ip
   19af4:	ldrb	r3, [r6]
   19af8:	orr	r3, r3, #32
   19afc:	cmp	r3, #101	; 0x65
   19b00:	movne	r8, #0
   19b04:	bne	1998c <grisu3_diy_fp_encode_double@@Base+0xde4>
   19b08:	sub	r3, r1, r6
   19b0c:	cmp	r3, #1
   19b10:	movle	r6, #0
   19b14:	ble	198f8 <grisu3_diy_fp_encode_double@@Base+0xd50>
   19b18:	ldrb	r3, [r6, #1]
   19b1c:	cmp	r3, #43	; 0x2b
   19b20:	beq	1949c <grisu3_diy_fp_encode_double@@Base+0x8f4>
   19b24:	cmp	r3, #45	; 0x2d
   19b28:	beq	194b0 <grisu3_diy_fp_encode_double@@Base+0x908>
   19b2c:	add	r2, r6, #1
   19b30:	mov	fp, #0
   19b34:	ldrb	r8, [r2]
   19b38:	sub	lr, r8, #48	; 0x30
   19b3c:	uxtb	lr, lr
   19b40:	cmp	lr, #9
   19b44:	movhi	r6, #0
   19b48:	bhi	198f8 <grisu3_diy_fp_encode_double@@Base+0xd50>
   19b4c:	add	r6, r2, #1
   19b50:	sub	r3, r8, #48	; 0x30
   19b54:	cmp	r1, r6
   19b58:	beq	19968 <grisu3_diy_fp_encode_double@@Base+0xdc0>
   19b5c:	ldrb	r9, [r2, #1]
   19b60:	sub	lr, r9, #48	; 0x30
   19b64:	uxtb	lr, lr
   19b68:	cmp	lr, #9
   19b6c:	bhi	19980 <grisu3_diy_fp_encode_double@@Base+0xdd8>
   19b70:	add	r2, r2, #2
   19b74:	mov	sl, r1
   19b78:	b	194e4 <grisu3_diy_fp_encode_double@@Base+0x93c>
   19b7c:	ldr	r3, [sp, #20]
   19b80:	cmp	r3, #0
   19b84:	movne	fp, sl
   19b88:	bne	19a5c <grisu3_diy_fp_encode_double@@Base+0xeb4>
   19b8c:	cmp	r8, #52	; 0x34
   19b90:	movls	r2, #0
   19b94:	movhi	r2, #1
   19b98:	adds	r4, r4, r2
   19b9c:	adc	r5, r5, #0
   19ba0:	mov	fp, sl
   19ba4:	mov	r3, #1
   19ba8:	str	r3, [sp, #20]
   19bac:	b	193f8 <grisu3_diy_fp_encode_double@@Base+0x850>

00019bb0 <flatcc_json_parser_error_string@@Base>:
   19bb0:	cmp	r0, #34	; 0x22
   19bb4:	ldrls	pc, [pc, r0, lsl #2]
   19bb8:	b	19de0 <flatcc_json_parser_error_string@@Base+0x230>
   19bbc:	andeq	r9, r1, ip, ror #27
   19bc0:	andeq	r9, r1, r8, asr #24
   19bc4:	andeq	r9, r1, r4, asr ip
   19bc8:	andeq	r9, r1, r0, ror #24
   19bcc:	andeq	r9, r1, ip, ror #24
   19bd0:	andeq	r9, r1, r8, ror ip
   19bd4:	andeq	r9, r1, r4, lsl #25
   19bd8:	muleq	r1, r0, ip
   19bdc:	muleq	r1, ip, ip
   19be0:	andeq	r9, r1, r8, lsr #25
   19be4:			; <UNDEFINED> instruction: 0x00019cb4
   19be8:	andeq	r9, r1, r0, asr #25
   19bec:	andeq	r9, r1, ip, asr #25
   19bf0:	ldrdeq	r9, [r1], -r8
   19bf4:	andeq	r9, r1, r4, ror #25
   19bf8:	strdeq	r9, [r1], -r0
   19bfc:	strdeq	r9, [r1], -ip
   19c00:	andeq	r9, r1, r8, lsl #26
   19c04:	andeq	r9, r1, r4, lsl sp
   19c08:	andeq	r9, r1, r0, lsr #26
   19c0c:	andeq	r9, r1, ip, lsr #26
   19c10:	andeq	r9, r1, r8, lsr sp
   19c14:	andeq	r9, r1, r4, asr #26
   19c18:	andeq	r9, r1, r0, asr sp
   19c1c:	andeq	r9, r1, ip, asr sp
   19c20:	andeq	r9, r1, r8, ror #26
   19c24:	andeq	r9, r1, r4, ror sp
   19c28:	andeq	r9, r1, r0, lsl #27
   19c2c:	andeq	r9, r1, ip, lsl #27
   19c30:	muleq	r1, r8, sp
   19c34:	andeq	r9, r1, r4, lsr #27
   19c38:			; <UNDEFINED> instruction: 0x00019db0
   19c3c:			; <UNDEFINED> instruction: 0x00019dbc
   19c40:	andeq	r9, r1, r8, asr #27
   19c44:	ldrdeq	r9, [r1], -r4
   19c48:	movw	r0, #61836	; 0xf18c
   19c4c:	movt	r0, #1
   19c50:	bx	lr
   19c54:	movw	r0, #61148	; 0xeedc
   19c58:	movt	r0, #1
   19c5c:	bx	lr
   19c60:	movw	r0, #61164	; 0xeeec
   19c64:	movt	r0, #1
   19c68:	bx	lr
   19c6c:	movw	r0, #61180	; 0xeefc
   19c70:	movt	r0, #1
   19c74:	bx	lr
   19c78:	movw	r0, #61196	; 0xef0c
   19c7c:	movt	r0, #1
   19c80:	bx	lr
   19c84:	movw	r0, #61220	; 0xef24
   19c88:	movt	r0, #1
   19c8c:	bx	lr
   19c90:	movw	r0, #61236	; 0xef34
   19c94:	movt	r0, #1
   19c98:	bx	lr
   19c9c:	movw	r0, #61248	; 0xef40
   19ca0:	movt	r0, #1
   19ca4:	bx	lr
   19ca8:	movw	r0, #61260	; 0xef4c
   19cac:	movt	r0, #1
   19cb0:	bx	lr
   19cb4:	movw	r0, #61280	; 0xef60
   19cb8:	movt	r0, #1
   19cbc:	bx	lr
   19cc0:	movw	r0, #61300	; 0xef74
   19cc4:	movt	r0, #1
   19cc8:	bx	lr
   19ccc:	movw	r0, #61316	; 0xef84
   19cd0:	movt	r0, #1
   19cd4:	bx	lr
   19cd8:	movw	r0, #61336	; 0xef98
   19cdc:	movt	r0, #1
   19ce0:	bx	lr
   19ce4:	movw	r0, #61352	; 0xefa8
   19ce8:	movt	r0, #1
   19cec:	bx	lr
   19cf0:	movw	r0, #61380	; 0xefc4
   19cf4:	movt	r0, #1
   19cf8:	bx	lr
   19cfc:	movw	r0, #61400	; 0xefd8
   19d00:	movt	r0, #1
   19d04:	bx	lr
   19d08:	movw	r0, #61416	; 0xefe8
   19d0c:	movt	r0, #1
   19d10:	bx	lr
   19d14:	movw	r0, #61436	; 0xeffc
   19d18:	movt	r0, #1
   19d1c:	bx	lr
   19d20:	movw	r0, #61452	; 0xf00c
   19d24:	movt	r0, #1
   19d28:	bx	lr
   19d2c:	movw	r0, #61468	; 0xf01c
   19d30:	movt	r0, #1
   19d34:	bx	lr
   19d38:	movw	r0, #61488	; 0xf030
   19d3c:	movt	r0, #1
   19d40:	bx	lr
   19d44:	movw	r0, #61504	; 0xf040
   19d48:	movt	r0, #1
   19d4c:	bx	lr
   19d50:	movw	r0, #61520	; 0xf050
   19d54:	movt	r0, #1
   19d58:	bx	lr
   19d5c:	movw	r0, #61556	; 0xf074
   19d60:	movt	r0, #1
   19d64:	bx	lr
   19d68:	movw	r0, #61576	; 0xf088
   19d6c:	movt	r0, #1
   19d70:	bx	lr
   19d74:	movw	r0, #61608	; 0xf0a8
   19d78:	movt	r0, #1
   19d7c:	bx	lr
   19d80:	movw	r0, #61640	; 0xf0c8
   19d84:	movt	r0, #1
   19d88:	bx	lr
   19d8c:	movw	r0, #61668	; 0xf0e4
   19d90:	movt	r0, #1
   19d94:	bx	lr
   19d98:	movw	r0, #61696	; 0xf100
   19d9c:	movt	r0, #1
   19da0:	bx	lr
   19da4:	movw	r0, #61720	; 0xf118
   19da8:	movt	r0, #1
   19dac:	bx	lr
   19db0:	movw	r0, #61752	; 0xf138
   19db4:	movt	r0, #1
   19db8:	bx	lr
   19dbc:	movw	r0, #61776	; 0xf150
   19dc0:	movt	r0, #1
   19dc4:	bx	lr
   19dc8:	movw	r0, #61804	; 0xf16c
   19dcc:	movt	r0, #1
   19dd0:	bx	lr
   19dd4:	movw	r0, #61820	; 0xf17c
   19dd8:	movt	r0, #1
   19ddc:	bx	lr
   19de0:	movw	r0, #61136	; 0xeed0
   19de4:	movt	r0, #1
   19de8:	bx	lr
   19dec:	movw	r0, #61144	; 0xeed8
   19df0:	movt	r0, #1
   19df4:	bx	lr

00019df8 <flatcc_json_parser_set_error@@Base>:
   19df8:	ldr	ip, [r0, #24]
   19dfc:	cmp	ip, #0
   19e00:	bne	19e1c <flatcc_json_parser_set_error@@Base+0x24>
   19e04:	str	r3, [r0, #24]
   19e08:	ldr	r3, [r0, #4]
   19e0c:	sub	r3, r1, r3
   19e10:	add	r3, r3, #1
   19e14:	str	r3, [r0, #20]
   19e18:	str	r1, [r0, #36]	; 0x24
   19e1c:	mov	r0, r2
   19e20:	bx	lr

00019e24 <flatcc_json_parser_string_part@@Base>:
   19e24:	str	r4, [sp, #-8]!
   19e28:	str	lr, [sp, #4]
   19e2c:	cmp	r1, r2
   19e30:	beq	19ec4 <flatcc_json_parser_string_part@@Base+0xa0>
   19e34:	ldrb	ip, [r1]
   19e38:	cmp	ip, #34	; 0x22
   19e3c:	cmpne	ip, #31
   19e40:	movhi	r3, #1
   19e44:	movls	r3, #0
   19e48:	cmp	ip, #92	; 0x5c
   19e4c:	moveq	r3, #0
   19e50:	andne	r3, r3, #1
   19e54:	cmp	r3, #0
   19e58:	beq	19e98 <flatcc_json_parser_string_part@@Base+0x74>
   19e5c:	add	r3, r1, #1
   19e60:	mov	r4, r2
   19e64:	mov	r1, r3
   19e68:	cmp	r3, r4
   19e6c:	beq	19ec8 <flatcc_json_parser_string_part@@Base+0xa4>
   19e70:	ldrb	lr, [r3], #1
   19e74:	cmp	lr, #34	; 0x22
   19e78:	cmpne	lr, #31
   19e7c:	movhi	ip, #1
   19e80:	movls	ip, #0
   19e84:	cmp	lr, #92	; 0x5c
   19e88:	moveq	ip, #0
   19e8c:	andne	ip, ip, #1
   19e90:	cmp	ip, #0
   19e94:	bne	19e64 <flatcc_json_parser_string_part@@Base+0x40>
   19e98:	ldrb	r3, [r1]
   19e9c:	cmp	r3, #31
   19ea0:	bls	19eb4 <flatcc_json_parser_string_part@@Base+0x90>
   19ea4:	mov	r0, r1
   19ea8:	ldr	r4, [sp]
   19eac:	add	sp, sp, #4
   19eb0:	pop	{pc}		; (ldr pc, [sp], #4)
   19eb4:	mov	r3, #17
   19eb8:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   19ebc:	mov	r1, r0
   19ec0:	b	19ea4 <flatcc_json_parser_string_part@@Base+0x80>
   19ec4:	mov	r1, r2
   19ec8:	mov	r3, #20
   19ecc:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   19ed0:	mov	r1, r0
   19ed4:	b	19ea4 <flatcc_json_parser_string_part@@Base+0x80>

00019ed8 <flatcc_json_parser_space_ext@@Base>:
   19ed8:	str	r4, [sp, #-8]!
   19edc:	str	lr, [sp, #4]
   19ee0:	mov	lr, r2
   19ee4:	mov	r4, #0
   19ee8:	cmp	r1, r2
   19eec:	beq	1a018 <flatcc_json_parser_space_ext@@Base+0x140>
   19ef0:	ldrb	r3, [r1]
   19ef4:	cmp	r3, #32
   19ef8:	bne	19f1c <flatcc_json_parser_space_ext@@Base+0x44>
   19efc:	add	r3, r1, #1
   19f00:	mov	r1, r3
   19f04:	cmp	r3, lr
   19f08:	beq	1a01c <flatcc_json_parser_space_ext@@Base+0x144>
   19f0c:	add	r3, r3, #1
   19f10:	ldrb	ip, [r1]
   19f14:	cmp	ip, #32
   19f18:	beq	19f00 <flatcc_json_parser_space_ext@@Base+0x28>
   19f1c:	ldrb	r3, [r1]
   19f20:	cmp	r3, #32
   19f24:	bls	19f7c <flatcc_json_parser_space_ext@@Base+0xa4>
   19f28:	mov	r0, r1
   19f2c:	b	19ffc <flatcc_json_parser_space_ext@@Base+0x124>
   19f30:	sub	r3, r2, r1
   19f34:	cmp	r3, #1
   19f38:	movle	r3, r4
   19f3c:	ble	19f50 <flatcc_json_parser_space_ext@@Base+0x78>
   19f40:	ldrb	r3, [r1, #1]
   19f44:	cmp	r3, #10
   19f48:	movne	r3, #0
   19f4c:	moveq	r3, #1
   19f50:	add	r1, r1, r3
   19f54:	ldr	r3, [r0, #16]
   19f58:	add	r3, r3, #1
   19f5c:	str	r3, [r0, #16]
   19f60:	add	r1, r1, #1
   19f64:	str	r1, [r0, #4]
   19f68:	cmp	r2, r1
   19f6c:	beq	1a010 <flatcc_json_parser_space_ext@@Base+0x138>
   19f70:	ldrb	r3, [r1]
   19f74:	cmp	r3, #32
   19f78:	bhi	1a008 <flatcc_json_parser_space_ext@@Base+0x130>
   19f7c:	sub	r3, r3, #9
   19f80:	cmp	r3, #23
   19f84:	ldrls	pc, [pc, r3, lsl #2]
   19f88:	b	19ff4 <flatcc_json_parser_space_ext@@Base+0x11c>
   19f8c:	andeq	r9, r1, ip, ror #31
   19f90:	andeq	r9, r1, r4, asr pc
   19f94:	strdeq	r9, [r1], -r4
   19f98:	strdeq	r9, [r1], -r4
   19f9c:	andeq	r9, r1, r0, lsr pc
   19fa0:	strdeq	r9, [r1], -r4
   19fa4:	strdeq	r9, [r1], -r4
   19fa8:	strdeq	r9, [r1], -r4
   19fac:	strdeq	r9, [r1], -r4
   19fb0:	strdeq	r9, [r1], -r4
   19fb4:	strdeq	r9, [r1], -r4
   19fb8:	strdeq	r9, [r1], -r4
   19fbc:	strdeq	r9, [r1], -r4
   19fc0:	strdeq	r9, [r1], -r4
   19fc4:	strdeq	r9, [r1], -r4
   19fc8:	strdeq	r9, [r1], -r4
   19fcc:	strdeq	r9, [r1], -r4
   19fd0:	strdeq	r9, [r1], -r4
   19fd4:	strdeq	r9, [r1], -r4
   19fd8:	strdeq	r9, [r1], -r4
   19fdc:	strdeq	r9, [r1], -r4
   19fe0:	strdeq	r9, [r1], -r4
   19fe4:	strdeq	r9, [r1], -r4
   19fe8:	andeq	r9, r1, r8, ror #29
   19fec:	add	r1, r1, #1
   19ff0:	b	19f68 <flatcc_json_parser_space_ext@@Base+0x90>
   19ff4:	mov	r3, #5
   19ff8:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   19ffc:	ldr	r4, [sp]
   1a000:	add	sp, sp, #4
   1a004:	pop	{pc}		; (ldr pc, [sp], #4)
   1a008:	mov	r0, r1
   1a00c:	b	19ffc <flatcc_json_parser_space_ext@@Base+0x124>
   1a010:	mov	r0, r1
   1a014:	b	19ffc <flatcc_json_parser_space_ext@@Base+0x124>
   1a018:	mov	r1, r2
   1a01c:	mov	r0, r1
   1a020:	b	19ffc <flatcc_json_parser_space_ext@@Base+0x124>
   1a024:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a028:	strd	r6, [sp, #8]
   1a02c:	strd	r8, [sp, #16]
   1a030:	strd	sl, [sp, #24]
   1a034:	str	lr, [sp, #32]
   1a038:	sub	sp, sp, #36	; 0x24
   1a03c:	mov	r8, r0
   1a040:	mov	r7, r2
   1a044:	str	r3, [sp, #8]
   1a048:	mov	r3, #0
   1a04c:	ldr	r2, [sp, #72]	; 0x48
   1a050:	strb	r3, [r2]
   1a054:	cmp	r1, r7
   1a058:	beq	1a228 <flatcc_json_parser_space_ext@@Base+0x350>
   1a05c:	ldrb	r3, [r1]
   1a060:	cmp	r3, #34	; 0x22
   1a064:	addeq	r4, r1, #1
   1a068:	moveq	r3, #0
   1a06c:	streq	r3, [r0, #12]
   1a070:	beq	1a0b8 <flatcc_json_parser_space_ext@@Base+0x1e0>
   1a074:	cmp	r3, #46	; 0x2e
   1a078:	movne	r3, #1
   1a07c:	strne	r3, [r0, #12]
   1a080:	movne	r4, r1
   1a084:	beq	1a09c <flatcc_json_parser_space_ext@@Base+0x1c4>
   1a088:	mov	fp, #0
   1a08c:	str	fp, [sp, #12]
   1a090:	add	sl, sp, #16
   1a094:	add	r9, sp, #24
   1a098:	b	1a16c <flatcc_json_parser_space_ext@@Base+0x294>
   1a09c:	mov	r3, #5
   1a0a0:	mov	r2, r7
   1a0a4:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1a0a8:	mov	r4, r0
   1a0ac:	ldr	r3, [r8, #12]
   1a0b0:	cmp	r3, #0
   1a0b4:	bne	1a0e8 <flatcc_json_parser_space_ext@@Base+0x210>
   1a0b8:	sub	r3, r7, r4
   1a0bc:	cmp	r3, #1
   1a0c0:	ble	1a0d4 <flatcc_json_parser_space_ext@@Base+0x1fc>
   1a0c4:	ldrb	r3, [r4]
   1a0c8:	cmp	r3, #32
   1a0cc:	bhi	1a0e8 <flatcc_json_parser_space_ext@@Base+0x210>
   1a0d0:	beq	1a0f4 <flatcc_json_parser_space_ext@@Base+0x21c>
   1a0d4:	mov	r2, r7
   1a0d8:	mov	r1, r4
   1a0dc:	mov	r0, r8
   1a0e0:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1a0e4:	mov	r4, r0
   1a0e8:	cmp	r7, r4
   1a0ec:	bne	1a088 <flatcc_json_parser_space_ext@@Base+0x1b0>
   1a0f0:	b	1a244 <flatcc_json_parser_space_ext@@Base+0x36c>
   1a0f4:	ldrb	r3, [r4, #1]
   1a0f8:	cmp	r3, #32
   1a0fc:	addhi	r4, r4, #1
   1a100:	bls	1a0d4 <flatcc_json_parser_space_ext@@Base+0x1fc>
   1a104:	b	1a0e8 <flatcc_json_parser_space_ext@@Base+0x210>
   1a108:	mov	r4, r0
   1a10c:	cmp	fp, #0
   1a110:	beq	1a120 <flatcc_json_parser_space_ext@@Base+0x248>
   1a114:	ldr	r3, [r8, #12]
   1a118:	cmp	r3, #0
   1a11c:	bne	1a1d0 <flatcc_json_parser_space_ext@@Base+0x2f8>
   1a120:	ldr	r3, [sp, #20]
   1a124:	cmp	r3, #0
   1a128:	bne	1a1ec <flatcc_json_parser_space_ext@@Base+0x314>
   1a12c:	ldrd	r2, [sp, #24]
   1a130:	cmp	r3, #0
   1a134:	cmpeq	r2, #255	; 0xff
   1a138:	uxtbls	r3, r2
   1a13c:	strls	r3, [sp, #12]
   1a140:	bhi	1a210 <flatcc_json_parser_space_ext@@Base+0x338>
   1a144:	ldr	r3, [sp, #72]	; 0x48
   1a148:	ldrb	r3, [r3]
   1a14c:	ldr	r2, [sp, #12]
   1a150:	add	r3, r2, r3
   1a154:	ldr	r2, [sp, #72]	; 0x48
   1a158:	strb	r3, [r2]
   1a15c:	add	fp, fp, #1
   1a160:	ldr	r3, [sp, #16]
   1a164:	cmp	r3, #0
   1a168:	beq	1a244 <flatcc_json_parser_space_ext@@Base+0x36c>
   1a16c:	ldr	r6, [sp, #8]
   1a170:	mov	r5, r4
   1a174:	str	sl, [sp, #4]
   1a178:	str	r9, [sp]
   1a17c:	ldr	r4, [r6]
   1a180:	add	r3, sp, #20
   1a184:	mov	r2, r7
   1a188:	mov	r1, r5
   1a18c:	mov	r0, r8
   1a190:	blx	r4
   1a194:	cmp	r7, r0
   1a198:	beq	1a240 <flatcc_json_parser_space_ext@@Base+0x368>
   1a19c:	cmp	r5, r0
   1a1a0:	bne	1a108 <flatcc_json_parser_space_ext@@Base+0x230>
   1a1a4:	mov	r5, r0
   1a1a8:	ldr	r3, [r6, #4]!
   1a1ac:	cmp	r3, #0
   1a1b0:	bne	1a174 <flatcc_json_parser_space_ext@@Base+0x29c>
   1a1b4:	mov	r3, #23
   1a1b8:	mov	r2, r7
   1a1bc:	mov	r1, r0
   1a1c0:	mov	r0, r8
   1a1c4:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1a1c8:	mov	r4, r0
   1a1cc:	b	1a244 <flatcc_json_parser_space_ext@@Base+0x36c>
   1a1d0:	mov	r3, #14
   1a1d4:	mov	r2, r7
   1a1d8:	mov	r1, r0
   1a1dc:	mov	r0, r8
   1a1e0:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1a1e4:	mov	r4, r0
   1a1e8:	b	1a244 <flatcc_json_parser_space_ext@@Base+0x36c>
   1a1ec:	mov	r3, #8
   1a1f0:	mov	r2, r7
   1a1f4:	mov	r1, r4
   1a1f8:	mov	r0, r8
   1a1fc:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1a200:	cmp	r7, r0
   1a204:	bne	1a144 <flatcc_json_parser_space_ext@@Base+0x26c>
   1a208:	mov	r4, r0
   1a20c:	b	1a244 <flatcc_json_parser_space_ext@@Base+0x36c>
   1a210:	mov	r3, #7
   1a214:	mov	r2, r7
   1a218:	mov	r1, r4
   1a21c:	mov	r0, r8
   1a220:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1a224:	b	1a200 <flatcc_json_parser_space_ext@@Base+0x328>
   1a228:	ldr	r3, [r0, #12]
   1a22c:	cmp	r3, #0
   1a230:	movne	r4, r7
   1a234:	bne	1a244 <flatcc_json_parser_space_ext@@Base+0x36c>
   1a238:	mov	r4, r7
   1a23c:	b	1a0d4 <flatcc_json_parser_space_ext@@Base+0x1fc>
   1a240:	mov	r4, r0
   1a244:	mov	r0, r4
   1a248:	add	sp, sp, #36	; 0x24
   1a24c:	ldrd	r4, [sp]
   1a250:	ldrd	r6, [sp, #8]
   1a254:	ldrd	r8, [sp, #16]
   1a258:	ldrd	sl, [sp, #24]
   1a25c:	add	sp, sp, #32
   1a260:	pop	{pc}		; (ldr pc, [sp], #4)
   1a264:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a268:	strd	r6, [sp, #8]
   1a26c:	strd	r8, [sp, #16]
   1a270:	strd	sl, [sp, #24]
   1a274:	str	lr, [sp, #32]
   1a278:	sub	sp, sp, #28
   1a27c:	mov	r6, r0
   1a280:	mov	r4, r1
   1a284:	mov	r5, r2
   1a288:	str	r3, [sp, #12]
   1a28c:	ldr	r9, [sp, #64]	; 0x40
   1a290:	ldr	sl, [sp, #72]	; 0x48
   1a294:	mov	r3, #0
   1a298:	str	r3, [sp, #20]
   1a29c:	ldr	r0, [r0]
   1a2a0:	bl	15d08 <flatcc_builder_start_offset_vector@@Base>
   1a2a4:	cmp	r0, #0
   1a2a8:	beq	1a2e4 <flatcc_json_parser_space_ext@@Base+0x40c>
   1a2ac:	mov	r3, #33	; 0x21
   1a2b0:	mov	r2, r5
   1a2b4:	mov	r1, r4
   1a2b8:	mov	r0, r6
   1a2bc:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1a2c0:	mov	r4, r0
   1a2c4:	mov	r0, r4
   1a2c8:	add	sp, sp, #28
   1a2cc:	ldrd	r4, [sp]
   1a2d0:	ldrd	r6, [sp, #8]
   1a2d4:	ldrd	r8, [sp, #16]
   1a2d8:	ldrd	sl, [sp, #24]
   1a2dc:	add	sp, sp, #32
   1a2e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2e4:	cmp	r4, r5
   1a2e8:	beq	1a2f8 <flatcc_json_parser_space_ext@@Base+0x420>
   1a2ec:	ldrb	r3, [r4]
   1a2f0:	cmp	r3, #91	; 0x5b
   1a2f4:	beq	1a318 <flatcc_json_parser_space_ext@@Base+0x440>
   1a2f8:	mov	r3, #22
   1a2fc:	mov	r2, r5
   1a300:	mov	r1, r4
   1a304:	mov	r0, r6
   1a308:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1a30c:	mov	r4, r0
   1a310:	mov	r7, #0
   1a314:	b	1a558 <flatcc_json_parser_space_ext@@Base+0x680>
   1a318:	add	r8, r4, #1
   1a31c:	sub	r3, r5, r8
   1a320:	cmp	r3, #1
   1a324:	ble	1a338 <flatcc_json_parser_space_ext@@Base+0x460>
   1a328:	ldrb	r3, [r4, #1]
   1a32c:	cmp	r3, #32
   1a330:	bhi	1a34c <flatcc_json_parser_space_ext@@Base+0x474>
   1a334:	beq	1a374 <flatcc_json_parser_space_ext@@Base+0x49c>
   1a338:	mov	r2, r5
   1a33c:	mov	r1, r8
   1a340:	mov	r0, r6
   1a344:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1a348:	mov	r8, r0
   1a34c:	cmp	r5, r8
   1a350:	beq	1a360 <flatcc_json_parser_space_ext@@Base+0x488>
   1a354:	ldrb	r3, [r8]
   1a358:	cmp	r3, #93	; 0x5d
   1a35c:	beq	1a388 <flatcc_json_parser_space_ext@@Base+0x4b0>
   1a360:	cmp	r9, #0
   1a364:	beq	1a3d4 <flatcc_json_parser_space_ext@@Base+0x4fc>
   1a368:	mov	r7, #0
   1a36c:	add	fp, sp, #20
   1a370:	b	1a4a4 <flatcc_json_parser_space_ext@@Base+0x5cc>
   1a374:	ldrb	r3, [r4, #2]
   1a378:	cmp	r3, #32
   1a37c:	addhi	r8, r4, #2
   1a380:	bls	1a338 <flatcc_json_parser_space_ext@@Base+0x460>
   1a384:	b	1a34c <flatcc_json_parser_space_ext@@Base+0x474>
   1a388:	add	r4, r8, #1
   1a38c:	sub	r3, r5, r4
   1a390:	cmp	r3, #1
   1a394:	ble	1a3a8 <flatcc_json_parser_space_ext@@Base+0x4d0>
   1a398:	ldrb	r3, [r8, #1]
   1a39c:	cmp	r3, #32
   1a3a0:	bhi	1a310 <flatcc_json_parser_space_ext@@Base+0x438>
   1a3a4:	beq	1a3c0 <flatcc_json_parser_space_ext@@Base+0x4e8>
   1a3a8:	mov	r2, r5
   1a3ac:	mov	r1, r4
   1a3b0:	mov	r0, r6
   1a3b4:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1a3b8:	mov	r4, r0
   1a3bc:	b	1a310 <flatcc_json_parser_space_ext@@Base+0x438>
   1a3c0:	ldrb	r3, [r8, #2]
   1a3c4:	cmp	r3, #32
   1a3c8:	addhi	r4, r8, #2
   1a3cc:	bls	1a3a8 <flatcc_json_parser_space_ext@@Base+0x4d0>
   1a3d0:	b	1a310 <flatcc_json_parser_space_ext@@Base+0x438>
   1a3d4:	mov	r3, #30
   1a3d8:	mov	r2, r5
   1a3dc:	mov	r1, r8
   1a3e0:	mov	r0, r6
   1a3e4:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1a3e8:	mov	r4, r0
   1a3ec:	b	1a2c4 <flatcc_json_parser_space_ext@@Base+0x3ec>
   1a3f0:	ldrb	r3, [r4, #1]
   1a3f4:	cmp	r3, #32
   1a3f8:	addhi	r4, r4, #1
   1a3fc:	bls	1a50c <flatcc_json_parser_space_ext@@Base+0x634>
   1a400:	b	1a520 <flatcc_json_parser_space_ext@@Base+0x648>
   1a404:	add	r1, r4, #1
   1a408:	sub	r3, r5, r1
   1a40c:	cmp	r3, #1
   1a410:	ble	1a428 <flatcc_json_parser_space_ext@@Base+0x550>
   1a414:	ldrb	r3, [r4, #1]
   1a418:	cmp	r3, #32
   1a41c:	movhi	r4, r1
   1a420:	bhi	1a554 <flatcc_json_parser_space_ext@@Base+0x67c>
   1a424:	beq	1a43c <flatcc_json_parser_space_ext@@Base+0x564>
   1a428:	mov	r2, r5
   1a42c:	mov	r0, r6
   1a430:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1a434:	mov	r4, r0
   1a438:	b	1a554 <flatcc_json_parser_space_ext@@Base+0x67c>
   1a43c:	ldrb	r3, [r4, #2]
   1a440:	cmp	r3, #32
   1a444:	addhi	r4, r4, #2
   1a448:	bls	1a428 <flatcc_json_parser_space_ext@@Base+0x550>
   1a44c:	b	1a554 <flatcc_json_parser_space_ext@@Base+0x67c>
   1a450:	add	r8, r4, #1
   1a454:	sub	r3, r5, r8
   1a458:	cmp	r3, #1
   1a45c:	ble	1a470 <flatcc_json_parser_space_ext@@Base+0x598>
   1a460:	ldrb	r3, [r4, #1]
   1a464:	cmp	r3, #32
   1a468:	bhi	1a484 <flatcc_json_parser_space_ext@@Base+0x5ac>
   1a46c:	beq	1a57c <flatcc_json_parser_space_ext@@Base+0x6a4>
   1a470:	mov	r2, r5
   1a474:	mov	r1, r8
   1a478:	mov	r0, r6
   1a47c:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1a480:	mov	r8, r0
   1a484:	cmp	r5, r8
   1a488:	beq	1a590 <flatcc_json_parser_space_ext@@Base+0x6b8>
   1a48c:	ldrb	r3, [r8]
   1a490:	cmp	r3, #93	; 0x5d
   1a494:	beq	1a5ac <flatcc_json_parser_space_ext@@Base+0x6d4>
   1a498:	add	r7, r7, #1
   1a49c:	cmp	r9, r7
   1a4a0:	beq	1a3d4 <flatcc_json_parser_space_ext@@Base+0x4fc>
   1a4a4:	ldr	r1, [sp, #12]
   1a4a8:	ldr	r0, [r6]
   1a4ac:	bl	14a58 <flatcc_builder_get_user_frame_ptr@@Base>
   1a4b0:	ldrb	r3, [r0, r7]
   1a4b4:	str	fp, [sp]
   1a4b8:	mov	r2, r5
   1a4bc:	mov	r1, r8
   1a4c0:	mov	r0, r6
   1a4c4:	blx	sl
   1a4c8:	mov	r4, r0
   1a4cc:	cmp	r5, r0
   1a4d0:	beq	1a2c4 <flatcc_json_parser_space_ext@@Base+0x3ec>
   1a4d4:	mov	r1, #1
   1a4d8:	ldr	r0, [r6]
   1a4dc:	bl	1560c <flatcc_builder_extend_offset_vector@@Base>
   1a4e0:	cmp	r0, #0
   1a4e4:	beq	1a2ac <flatcc_json_parser_space_ext@@Base+0x3d4>
   1a4e8:	ldr	r3, [sp, #20]
   1a4ec:	str	r3, [r0]
   1a4f0:	sub	r3, r5, r4
   1a4f4:	cmp	r3, #1
   1a4f8:	ble	1a50c <flatcc_json_parser_space_ext@@Base+0x634>
   1a4fc:	ldrb	r3, [r4]
   1a500:	cmp	r3, #32
   1a504:	bhi	1a528 <flatcc_json_parser_space_ext@@Base+0x650>
   1a508:	beq	1a3f0 <flatcc_json_parser_space_ext@@Base+0x518>
   1a50c:	mov	r2, r5
   1a510:	mov	r1, r4
   1a514:	mov	r0, r6
   1a518:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1a51c:	mov	r4, r0
   1a520:	cmp	r5, r4
   1a524:	beq	1a554 <flatcc_json_parser_space_ext@@Base+0x67c>
   1a528:	ldrb	r3, [r4]
   1a52c:	cmp	r3, #44	; 0x2c
   1a530:	beq	1a450 <flatcc_json_parser_space_ext@@Base+0x578>
   1a534:	cmp	r3, #93	; 0x5d
   1a538:	beq	1a404 <flatcc_json_parser_space_ext@@Base+0x52c>
   1a53c:	mov	r3, #9
   1a540:	mov	r2, r5
   1a544:	mov	r1, r4
   1a548:	mov	r0, r6
   1a54c:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1a550:	mov	r4, r0
   1a554:	add	r7, r7, #1
   1a558:	cmp	r9, r7
   1a55c:	beq	1a5f8 <flatcc_json_parser_space_ext@@Base+0x720>
   1a560:	mov	r3, #30
   1a564:	mov	r2, r5
   1a568:	mov	r1, r4
   1a56c:	mov	r0, r6
   1a570:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1a574:	mov	r4, r0
   1a578:	b	1a2c4 <flatcc_json_parser_space_ext@@Base+0x3ec>
   1a57c:	ldrb	r3, [r4, #2]
   1a580:	cmp	r3, #32
   1a584:	addhi	r8, r4, #2
   1a588:	bls	1a470 <flatcc_json_parser_space_ext@@Base+0x598>
   1a58c:	b	1a484 <flatcc_json_parser_space_ext@@Base+0x5ac>
   1a590:	mov	r3, #9
   1a594:	mov	r2, r5
   1a598:	mov	r1, r8
   1a59c:	mov	r0, r6
   1a5a0:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1a5a4:	mov	r4, r0
   1a5a8:	b	1a554 <flatcc_json_parser_space_ext@@Base+0x67c>
   1a5ac:	add	r4, r8, #1
   1a5b0:	sub	r3, r5, r4
   1a5b4:	cmp	r3, #1
   1a5b8:	ble	1a5cc <flatcc_json_parser_space_ext@@Base+0x6f4>
   1a5bc:	ldrb	r3, [r8, #1]
   1a5c0:	cmp	r3, #32
   1a5c4:	bhi	1a554 <flatcc_json_parser_space_ext@@Base+0x67c>
   1a5c8:	beq	1a5e4 <flatcc_json_parser_space_ext@@Base+0x70c>
   1a5cc:	mov	r2, r5
   1a5d0:	mov	r1, r4
   1a5d4:	mov	r0, r6
   1a5d8:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1a5dc:	mov	r4, r0
   1a5e0:	b	1a554 <flatcc_json_parser_space_ext@@Base+0x67c>
   1a5e4:	ldrb	r3, [r8, #2]
   1a5e8:	cmp	r3, #32
   1a5ec:	addhi	r4, r8, #2
   1a5f0:	bls	1a5cc <flatcc_json_parser_space_ext@@Base+0x6f4>
   1a5f4:	b	1a554 <flatcc_json_parser_space_ext@@Base+0x67c>
   1a5f8:	ldr	r1, [sp, #12]
   1a5fc:	ldr	r0, [r6]
   1a600:	bl	14a58 <flatcc_builder_get_user_frame_ptr@@Base>
   1a604:	mov	r1, r0
   1a608:	ldr	r0, [r6]
   1a60c:	bl	16ff4 <flatcc_builder_end_offset_vector_for_unions@@Base>
   1a610:	str	r0, [sp, #20]
   1a614:	cmp	r0, #0
   1a618:	beq	1a2ac <flatcc_json_parser_space_ext@@Base+0x3d4>
   1a61c:	ldrh	r1, [sp, #68]	; 0x44
   1a620:	ldr	r0, [r6]
   1a624:	bl	17d14 <flatcc_builder_table_add_offset@@Base>
   1a628:	cmp	r0, #0
   1a62c:	beq	1a2ac <flatcc_json_parser_space_ext@@Base+0x3d4>
   1a630:	ldr	r3, [sp, #20]
   1a634:	str	r3, [r0]
   1a638:	b	1a2c4 <flatcc_json_parser_space_ext@@Base+0x3ec>

0001a63c <flatcc_json_parser_string_escape@@Base>:
   1a63c:	str	r4, [sp, #-8]!
   1a640:	str	lr, [sp, #4]
   1a644:	sub	lr, r2, r1
   1a648:	cmp	lr, #1
   1a64c:	ble	1a65c <flatcc_json_parser_string_escape@@Base+0x20>
   1a650:	ldrb	ip, [r1]
   1a654:	cmp	ip, #92	; 0x5c
   1a658:	beq	1a678 <flatcc_json_parser_string_escape@@Base+0x3c>
   1a65c:	mov	ip, #0
   1a660:	strb	ip, [r3]
   1a664:	mov	r3, #18
   1a668:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1a66c:	ldr	r4, [sp]
   1a670:	add	sp, sp, #4
   1a674:	pop	{pc}		; (ldr pc, [sp], #4)
   1a678:	ldrb	ip, [r1, #1]
   1a67c:	sub	ip, ip, #34	; 0x22
   1a680:	cmp	ip, #86	; 0x56
   1a684:	ldrls	pc, [pc, ip, lsl #2]
   1a688:	b	1ab78 <flatcc_json_parser_string_escape@@Base+0x53c>
   1a68c:	andeq	sl, r1, r0, lsr fp
   1a690:	andeq	sl, r1, r8, ror fp
   1a694:	andeq	sl, r1, r8, ror fp
   1a698:	andeq	sl, r1, r8, ror fp
   1a69c:	andeq	sl, r1, r8, ror fp
   1a6a0:	andeq	sl, r1, r8, ror fp
   1a6a4:	andeq	sl, r1, r8, ror fp
   1a6a8:	andeq	sl, r1, r8, ror fp
   1a6ac:	andeq	sl, r1, r8, ror fp
   1a6b0:	andeq	sl, r1, r8, ror fp
   1a6b4:	andeq	sl, r1, r8, ror fp
   1a6b8:	andeq	sl, r1, r8, ror fp
   1a6bc:	andeq	sl, r1, r8, ror fp
   1a6c0:	andeq	sl, r1, r0, ror #22
   1a6c4:	andeq	sl, r1, r8, ror fp
   1a6c8:	andeq	sl, r1, r8, ror fp
   1a6cc:	andeq	sl, r1, r8, ror fp
   1a6d0:	andeq	sl, r1, r8, ror fp
   1a6d4:	andeq	sl, r1, r8, ror fp
   1a6d8:	andeq	sl, r1, r8, ror fp
   1a6dc:	andeq	sl, r1, r8, ror fp
   1a6e0:	andeq	sl, r1, r8, ror fp
   1a6e4:	andeq	sl, r1, r8, ror fp
   1a6e8:	andeq	sl, r1, r8, ror fp
   1a6ec:	andeq	sl, r1, r8, ror fp
   1a6f0:	andeq	sl, r1, r8, ror fp
   1a6f4:	andeq	sl, r1, r8, ror fp
   1a6f8:	andeq	sl, r1, r8, ror fp
   1a6fc:	andeq	sl, r1, r8, ror fp
   1a700:	andeq	sl, r1, r8, ror fp
   1a704:	andeq	sl, r1, r8, ror fp
   1a708:	andeq	sl, r1, r8, ror fp
   1a70c:	andeq	sl, r1, r8, ror fp
   1a710:	andeq	sl, r1, r8, ror fp
   1a714:	andeq	sl, r1, r8, ror fp
   1a718:	andeq	sl, r1, r8, ror fp
   1a71c:	andeq	sl, r1, r8, ror fp
   1a720:	andeq	sl, r1, r8, ror fp
   1a724:	andeq	sl, r1, r8, ror fp
   1a728:	andeq	sl, r1, r8, ror fp
   1a72c:	andeq	sl, r1, r8, ror fp
   1a730:	andeq	sl, r1, r8, ror fp
   1a734:	andeq	sl, r1, r8, ror fp
   1a738:	andeq	sl, r1, r8, ror fp
   1a73c:	andeq	sl, r1, r8, ror fp
   1a740:	andeq	sl, r1, r8, ror fp
   1a744:	andeq	sl, r1, r8, ror fp
   1a748:	andeq	sl, r1, r8, ror fp
   1a74c:	andeq	sl, r1, r8, ror fp
   1a750:	andeq	sl, r1, r8, ror fp
   1a754:	andeq	sl, r1, r8, ror fp
   1a758:	andeq	sl, r1, r8, ror fp
   1a75c:	andeq	sl, r1, r8, ror fp
   1a760:	andeq	sl, r1, r8, ror fp
   1a764:	andeq	sl, r1, r8, ror fp
   1a768:	andeq	sl, r1, r8, ror fp
   1a76c:	andeq	sl, r1, r8, ror fp
   1a770:	andeq	sl, r1, r8, ror fp
   1a774:	andeq	sl, r1, r8, asr #22
   1a778:	andeq	sl, r1, r8, ror fp
   1a77c:	andeq	sl, r1, r8, ror fp
   1a780:	andeq	sl, r1, r8, ror fp
   1a784:	andeq	sl, r1, r8, ror fp
   1a788:	andeq	sl, r1, r8, ror fp
   1a78c:	andeq	sl, r1, r0, lsl #22
   1a790:	andeq	sl, r1, r8, ror fp
   1a794:	andeq	sl, r1, r8, ror fp
   1a798:	andeq	sl, r1, r8, ror fp
   1a79c:	andeq	sl, r1, r8, lsl fp
   1a7a0:	andeq	sl, r1, r8, ror fp
   1a7a4:	andeq	sl, r1, r8, ror fp
   1a7a8:	andeq	sl, r1, r8, ror fp
   1a7ac:	andeq	sl, r1, r8, ror fp
   1a7b0:	andeq	sl, r1, r8, ror fp
   1a7b4:	andeq	sl, r1, r8, ror fp
   1a7b8:	andeq	sl, r1, r8, ror fp
   1a7bc:	ldrdeq	sl, [r1], -r0
   1a7c0:	andeq	sl, r1, r8, ror fp
   1a7c4:	andeq	sl, r1, r8, ror fp
   1a7c8:	andeq	sl, r1, r8, ror fp
   1a7cc:	andeq	sl, r1, r8, ror #21
   1a7d0:	andeq	sl, r1, r8, ror fp
   1a7d4:			; <UNDEFINED> instruction: 0x0001aab8
   1a7d8:			; <UNDEFINED> instruction: 0x0001a8b4
   1a7dc:	andeq	sl, r1, r8, ror fp
   1a7e0:	andeq	sl, r1, r8, ror fp
   1a7e4:	andeq	sl, r1, r8, ror #15
   1a7e8:	mov	ip, #1
   1a7ec:	strb	ip, [r3]
   1a7f0:	cmp	lr, #3
   1a7f4:	ble	1a878 <flatcc_json_parser_string_escape@@Base+0x23c>
   1a7f8:	ldrb	ip, [r1, #2]
   1a7fc:	sub	lr, ip, #48	; 0x30
   1a800:	uxtb	lr, lr
   1a804:	cmp	lr, #9
   1a808:	lslls	ip, ip, #4
   1a80c:	andls	ip, ip, #240	; 0xf0
   1a810:	bls	1a834 <flatcc_json_parser_string_escape@@Base+0x1f8>
   1a814:	orr	ip, ip, #32
   1a818:	sub	lr, ip, #97	; 0x61
   1a81c:	uxtb	lr, lr
   1a820:	cmp	lr, #5
   1a824:	bhi	1a88c <flatcc_json_parser_string_escape@@Base+0x250>
   1a828:	sub	ip, ip, #87	; 0x57
   1a82c:	lsl	ip, ip, #4
   1a830:	uxtb	ip, ip
   1a834:	ldrb	lr, [r1, #3]
   1a838:	sub	r4, lr, #48	; 0x30
   1a83c:	uxtb	r4, r4
   1a840:	cmp	r4, #9
   1a844:	orrls	ip, r4, ip
   1a848:	bls	1a86c <flatcc_json_parser_string_escape@@Base+0x230>
   1a84c:	orr	lr, lr, #32
   1a850:	sub	r4, lr, #97	; 0x61
   1a854:	uxtb	r4, r4
   1a858:	cmp	r4, #5
   1a85c:	bhi	1a8a0 <flatcc_json_parser_string_escape@@Base+0x264>
   1a860:	sub	lr, lr, #87	; 0x57
   1a864:	orr	ip, lr, ip
   1a868:	uxtb	ip, ip
   1a86c:	strb	ip, [r3, #1]
   1a870:	add	r0, r1, #4
   1a874:	b	1a66c <flatcc_json_parser_string_escape@@Base+0x30>
   1a878:	mov	ip, #0
   1a87c:	strb	ip, [r3]
   1a880:	mov	r3, #18
   1a884:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1a888:	b	1a66c <flatcc_json_parser_string_escape@@Base+0x30>
   1a88c:	mov	ip, #0
   1a890:	strb	ip, [r3]
   1a894:	mov	r3, #18
   1a898:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1a89c:	b	1a66c <flatcc_json_parser_string_escape@@Base+0x30>
   1a8a0:	mov	ip, #0
   1a8a4:	strb	ip, [r3]
   1a8a8:	mov	r3, #18
   1a8ac:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1a8b0:	b	1a66c <flatcc_json_parser_string_escape@@Base+0x30>
   1a8b4:	cmp	lr, #5
   1a8b8:	ble	1a97c <flatcc_json_parser_string_escape@@Base+0x340>
   1a8bc:	ldrb	ip, [r1, #2]
   1a8c0:	sub	lr, ip, #48	; 0x30
   1a8c4:	uxtb	lr, lr
   1a8c8:	cmp	lr, #9
   1a8cc:	lslls	ip, ip, #12
   1a8d0:	andls	lr, ip, #61440	; 0xf000
   1a8d4:	bls	1a8f8 <flatcc_json_parser_string_escape@@Base+0x2bc>
   1a8d8:	orr	ip, ip, #32
   1a8dc:	sub	lr, ip, #97	; 0x61
   1a8e0:	uxtb	lr, lr
   1a8e4:	cmp	lr, #5
   1a8e8:	bhi	1a990 <flatcc_json_parser_string_escape@@Base+0x354>
   1a8ec:	sub	ip, ip, #87	; 0x57
   1a8f0:	lsl	ip, ip, #12
   1a8f4:	and	lr, ip, #61440	; 0xf000
   1a8f8:	ldrb	ip, [r1, #3]
   1a8fc:	sub	r4, ip, #48	; 0x30
   1a900:	uxtb	r4, r4
   1a904:	cmp	r4, #9
   1a908:	bhi	1a9a4 <flatcc_json_parser_string_escape@@Base+0x368>
   1a90c:	sub	ip, ip, #48	; 0x30
   1a910:	uxth	ip, ip
   1a914:	orr	ip, lr, ip, lsl #8
   1a918:	and	ip, ip, #65280	; 0xff00
   1a91c:	ldrb	lr, [r1, #4]
   1a920:	sub	r4, lr, #48	; 0x30
   1a924:	uxtb	r4, r4
   1a928:	cmp	r4, #9
   1a92c:	bhi	1a9e0 <flatcc_json_parser_string_escape@@Base+0x3a4>
   1a930:	sub	lr, lr, #48	; 0x30
   1a934:	uxth	lr, lr
   1a938:	orr	ip, ip, lr, lsl #4
   1a93c:	uxth	ip, ip
   1a940:	ldrb	lr, [r1, #5]
   1a944:	sub	r4, lr, #48	; 0x30
   1a948:	uxtb	r4, r4
   1a94c:	cmp	r4, #9
   1a950:	bhi	1aa1c <flatcc_json_parser_string_escape@@Base+0x3e0>
   1a954:	sub	r2, lr, #48	; 0x30
   1a958:	orr	r2, ip, r2
   1a95c:	uxth	r2, r2
   1a960:	cmp	r2, #127	; 0x7f
   1a964:	bhi	1aa54 <flatcc_json_parser_string_escape@@Base+0x418>
   1a968:	mov	r0, #1
   1a96c:	strb	r0, [r3]
   1a970:	strb	r2, [r3, #1]
   1a974:	add	r0, r1, #6
   1a978:	b	1a66c <flatcc_json_parser_string_escape@@Base+0x30>
   1a97c:	mov	ip, #0
   1a980:	strb	ip, [r3]
   1a984:	mov	r3, #18
   1a988:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1a98c:	b	1a66c <flatcc_json_parser_string_escape@@Base+0x30>
   1a990:	mov	ip, #0
   1a994:	strb	ip, [r3]
   1a998:	mov	r3, #18
   1a99c:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1a9a0:	b	1a66c <flatcc_json_parser_string_escape@@Base+0x30>
   1a9a4:	orr	ip, ip, #32
   1a9a8:	sub	r4, ip, #97	; 0x61
   1a9ac:	uxtb	r4, r4
   1a9b0:	cmp	r4, #5
   1a9b4:	bhi	1a9cc <flatcc_json_parser_string_escape@@Base+0x390>
   1a9b8:	sub	ip, ip, #87	; 0x57
   1a9bc:	uxth	ip, ip
   1a9c0:	orr	ip, lr, ip, lsl #8
   1a9c4:	and	ip, ip, #65280	; 0xff00
   1a9c8:	b	1a91c <flatcc_json_parser_string_escape@@Base+0x2e0>
   1a9cc:	mov	ip, #0
   1a9d0:	strb	ip, [r3]
   1a9d4:	mov	r3, #18
   1a9d8:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1a9dc:	b	1a66c <flatcc_json_parser_string_escape@@Base+0x30>
   1a9e0:	orr	lr, lr, #32
   1a9e4:	sub	r4, lr, #97	; 0x61
   1a9e8:	uxtb	r4, r4
   1a9ec:	cmp	r4, #5
   1a9f0:	bhi	1aa08 <flatcc_json_parser_string_escape@@Base+0x3cc>
   1a9f4:	sub	lr, lr, #87	; 0x57
   1a9f8:	uxth	lr, lr
   1a9fc:	orr	ip, ip, lr, lsl #4
   1aa00:	uxth	ip, ip
   1aa04:	b	1a940 <flatcc_json_parser_string_escape@@Base+0x304>
   1aa08:	mov	ip, #0
   1aa0c:	strb	ip, [r3]
   1aa10:	mov	r3, #18
   1aa14:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1aa18:	b	1a66c <flatcc_json_parser_string_escape@@Base+0x30>
   1aa1c:	orr	lr, lr, #32
   1aa20:	sub	r4, lr, #97	; 0x61
   1aa24:	uxtb	r4, r4
   1aa28:	cmp	r4, #5
   1aa2c:	bhi	1aa40 <flatcc_json_parser_string_escape@@Base+0x404>
   1aa30:	sub	r2, lr, #87	; 0x57
   1aa34:	orr	r2, ip, r2
   1aa38:	uxth	r2, r2
   1aa3c:	b	1a960 <flatcc_json_parser_string_escape@@Base+0x324>
   1aa40:	mov	ip, #0
   1aa44:	strb	ip, [r3]
   1aa48:	mov	r3, #18
   1aa4c:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1aa50:	b	1a66c <flatcc_json_parser_string_escape@@Base+0x30>
   1aa54:	cmp	r2, #2048	; 0x800
   1aa58:	bcs	1aa84 <flatcc_json_parser_string_escape@@Base+0x448>
   1aa5c:	mov	r0, #2
   1aa60:	strb	r0, [r3]
   1aa64:	mvn	r0, #63	; 0x3f
   1aa68:	orr	r0, r0, r2, lsr #6
   1aa6c:	strb	r0, [r3, #1]
   1aa70:	and	r2, r2, #63	; 0x3f
   1aa74:	mvn	r2, r2, lsl #25
   1aa78:	mvn	r2, r2, lsr #25
   1aa7c:	strb	r2, [r3, #2]
   1aa80:	b	1a974 <flatcc_json_parser_string_escape@@Base+0x338>
   1aa84:	mov	r0, #3
   1aa88:	strb	r0, [r3]
   1aa8c:	mvn	r0, #31
   1aa90:	orr	r0, r0, r2, lsr #12
   1aa94:	strb	r0, [r3, #1]
   1aa98:	ubfx	ip, r2, #6, #6
   1aa9c:	mvn	r0, #127	; 0x7f
   1aaa0:	orr	ip, r0, ip
   1aaa4:	strb	ip, [r3, #2]
   1aaa8:	and	r2, r2, #63	; 0x3f
   1aaac:	orr	r2, r0, r2
   1aab0:	strb	r2, [r3, #3]
   1aab4:	b	1a974 <flatcc_json_parser_string_escape@@Base+0x338>
   1aab8:	mov	r2, #1
   1aabc:	strb	r2, [r3]
   1aac0:	mov	r2, #9
   1aac4:	strb	r2, [r3, #1]
   1aac8:	add	r0, r1, #2
   1aacc:	b	1a66c <flatcc_json_parser_string_escape@@Base+0x30>
   1aad0:	mov	r2, #1
   1aad4:	strb	r2, [r3]
   1aad8:	mov	r2, #10
   1aadc:	strb	r2, [r3, #1]
   1aae0:	add	r0, r1, #2
   1aae4:	b	1a66c <flatcc_json_parser_string_escape@@Base+0x30>
   1aae8:	mov	r2, #1
   1aaec:	strb	r2, [r3]
   1aaf0:	mov	r2, #13
   1aaf4:	strb	r2, [r3, #1]
   1aaf8:	add	r0, r1, #2
   1aafc:	b	1a66c <flatcc_json_parser_string_escape@@Base+0x30>
   1ab00:	mov	r2, #1
   1ab04:	strb	r2, [r3]
   1ab08:	mov	r2, #8
   1ab0c:	strb	r2, [r3, #1]
   1ab10:	add	r0, r1, #2
   1ab14:	b	1a66c <flatcc_json_parser_string_escape@@Base+0x30>
   1ab18:	mov	r2, #1
   1ab1c:	strb	r2, [r3]
   1ab20:	mov	r2, #12
   1ab24:	strb	r2, [r3, #1]
   1ab28:	add	r0, r1, #2
   1ab2c:	b	1a66c <flatcc_json_parser_string_escape@@Base+0x30>
   1ab30:	mov	r2, #1
   1ab34:	strb	r2, [r3]
   1ab38:	mov	r2, #34	; 0x22
   1ab3c:	strb	r2, [r3, #1]
   1ab40:	add	r0, r1, #2
   1ab44:	b	1a66c <flatcc_json_parser_string_escape@@Base+0x30>
   1ab48:	mov	r2, #1
   1ab4c:	strb	r2, [r3]
   1ab50:	mov	r2, #92	; 0x5c
   1ab54:	strb	r2, [r3, #1]
   1ab58:	add	r0, r1, #2
   1ab5c:	b	1a66c <flatcc_json_parser_string_escape@@Base+0x30>
   1ab60:	mov	r2, #1
   1ab64:	strb	r2, [r3]
   1ab68:	mov	r2, #47	; 0x2f
   1ab6c:	strb	r2, [r3, #1]
   1ab70:	add	r0, r1, #2
   1ab74:	b	1a66c <flatcc_json_parser_string_escape@@Base+0x30>
   1ab78:	mov	ip, #0
   1ab7c:	strb	ip, [r3]
   1ab80:	mov	r3, #18
   1ab84:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1ab88:	b	1a66c <flatcc_json_parser_string_escape@@Base+0x30>

0001ab8c <flatcc_json_parser_skip_constant@@Base>:
   1ab8c:	strd	r4, [sp, #-16]!
   1ab90:	str	r6, [sp, #8]
   1ab94:	str	lr, [sp, #12]
   1ab98:	mov	r6, r0
   1ab9c:	mov	r4, r1
   1aba0:	mov	r5, r2
   1aba4:	cmp	r1, r2
   1aba8:	bne	1abd0 <flatcc_json_parser_skip_constant@@Base+0x44>
   1abac:	mov	r4, r2
   1abb0:	mov	r0, r4
   1abb4:	ldrd	r4, [sp]
   1abb8:	ldr	r6, [sp, #8]
   1abbc:	add	sp, sp, #12
   1abc0:	pop	{pc}		; (ldr pc, [sp], #4)
   1abc4:	add	r4, r4, #1
   1abc8:	cmp	r5, r4
   1abcc:	beq	1abb0 <flatcc_json_parser_skip_constant@@Base+0x24>
   1abd0:	ldrb	r3, [r4]
   1abd4:	cmp	r3, #95	; 0x5f
   1abd8:	movne	r2, #0
   1abdc:	moveq	r2, #1
   1abe0:	orrs	r2, r2, r3, lsr #7
   1abe4:	bne	1abc4 <flatcc_json_parser_skip_constant@@Base+0x38>
   1abe8:	sub	r2, r3, #48	; 0x30
   1abec:	uxtb	r2, r2
   1abf0:	cmp	r3, #46	; 0x2e
   1abf4:	cmpne	r2, #9
   1abf8:	bls	1abc4 <flatcc_json_parser_skip_constant@@Base+0x38>
   1abfc:	orr	r2, r3, #32
   1ac00:	sub	r2, r2, #97	; 0x61
   1ac04:	uxtb	r2, r2
   1ac08:	cmp	r2, #25
   1ac0c:	addls	r4, r4, #1
   1ac10:	bls	1abc8 <flatcc_json_parser_skip_constant@@Base+0x3c>
   1ac14:	sub	r2, r5, r4
   1ac18:	cmp	r2, #1
   1ac1c:	ble	1ac2c <flatcc_json_parser_skip_constant@@Base+0xa0>
   1ac20:	cmp	r3, #32
   1ac24:	bhi	1abb0 <flatcc_json_parser_skip_constant@@Base+0x24>
   1ac28:	beq	1ac4c <flatcc_json_parser_skip_constant@@Base+0xc0>
   1ac2c:	mov	r2, r5
   1ac30:	mov	r1, r4
   1ac34:	mov	r0, r6
   1ac38:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1ac3c:	cmp	r0, r4
   1ac40:	beq	1abb0 <flatcc_json_parser_skip_constant@@Base+0x24>
   1ac44:	mov	r4, r0
   1ac48:	b	1abc8 <flatcc_json_parser_skip_constant@@Base+0x3c>
   1ac4c:	ldrb	r3, [r4, #1]
   1ac50:	cmp	r3, #32
   1ac54:	addhi	r0, r4, #1
   1ac58:	bls	1ac2c <flatcc_json_parser_skip_constant@@Base+0xa0>
   1ac5c:	b	1ac3c <flatcc_json_parser_skip_constant@@Base+0xb0>

0001ac60 <flatcc_json_parser_match_constant@@Base>:
   1ac60:	strd	r4, [sp, #-16]!
   1ac64:	str	r6, [sp, #8]
   1ac68:	str	lr, [sp, #12]
   1ac6c:	sub	lr, r2, r1
   1ac70:	cmp	lr, r3
   1ac74:	ble	1acd0 <flatcc_json_parser_match_constant@@Base+0x70>
   1ac78:	mov	r5, r2
   1ac7c:	mov	r6, r1
   1ac80:	mov	ip, r0
   1ac84:	add	r4, r1, r3
   1ac88:	ldr	r2, [r0, #12]
   1ac8c:	cmp	r2, #0
   1ac90:	bne	1acf0 <flatcc_json_parser_match_constant@@Base+0x90>
   1ac94:	ldrb	r3, [r1, r3]
   1ac98:	cmp	r3, #32
   1ac9c:	beq	1adbc <flatcc_json_parser_match_constant@@Base+0x15c>
   1aca0:	cmp	r3, #34	; 0x22
   1aca4:	beq	1ae04 <flatcc_json_parser_match_constant@@Base+0x1a4>
   1aca8:	cmp	r3, #92	; 0x5c
   1acac:	bne	1ae68 <flatcc_json_parser_match_constant@@Base+0x208>
   1acb0:	mov	r3, #0
   1acb4:	ldr	r2, [sp, #16]
   1acb8:	str	r3, [r2]
   1acbc:	mov	r3, #18
   1acc0:	mov	r2, r5
   1acc4:	mov	r1, r4
   1acc8:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1accc:	b	1ace0 <flatcc_json_parser_match_constant@@Base+0x80>
   1acd0:	mov	r3, #0
   1acd4:	ldr	r2, [sp, #16]
   1acd8:	str	r3, [r2]
   1acdc:	mov	r0, r1
   1ace0:	ldrd	r4, [sp]
   1ace4:	ldr	r6, [sp, #8]
   1ace8:	add	sp, sp, #12
   1acec:	pop	{pc}		; (ldr pc, [sp], #4)
   1acf0:	sub	r2, r5, r4
   1acf4:	cmp	r2, #1
   1acf8:	ble	1ad0c <flatcc_json_parser_match_constant@@Base+0xac>
   1acfc:	ldrb	r3, [r1, r3]
   1ad00:	cmp	r3, #32
   1ad04:	bhi	1ae7c <flatcc_json_parser_match_constant@@Base+0x21c>
   1ad08:	beq	1ad88 <flatcc_json_parser_match_constant@@Base+0x128>
   1ad0c:	mov	r2, r5
   1ad10:	mov	r1, r4
   1ad14:	mov	r0, ip
   1ad18:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1ad1c:	cmp	r5, r0
   1ad20:	beq	1ae8c <flatcc_json_parser_match_constant@@Base+0x22c>
   1ad24:	cmp	r4, r0
   1ad28:	beq	1ad58 <flatcc_json_parser_match_constant@@Base+0xf8>
   1ad2c:	ldrb	r3, [r0]
   1ad30:	cmp	r3, #95	; 0x5f
   1ad34:	movne	r2, #0
   1ad38:	moveq	r2, #1
   1ad3c:	orrs	r2, r2, r3, lsr #7
   1ad40:	bne	1ad9c <flatcc_json_parser_match_constant@@Base+0x13c>
   1ad44:	orr	r3, r3, #32
   1ad48:	sub	r3, r3, #97	; 0x61
   1ad4c:	uxtb	r3, r3
   1ad50:	cmp	r3, #25
   1ad54:	bls	1adac <flatcc_json_parser_match_constant@@Base+0x14c>
   1ad58:	mov	r3, #0
   1ad5c:	ldr	r2, [sp, #16]
   1ad60:	str	r3, [r2]
   1ad64:	ldrb	r2, [r0]
   1ad68:	and	r3, r2, #223	; 0xdf
   1ad6c:	cmp	r2, #44	; 0x2c
   1ad70:	cmpne	r3, #93	; 0x5d
   1ad74:	moveq	r3, #1
   1ad78:	movne	r3, #0
   1ad7c:	cmp	r3, #0
   1ad80:	moveq	r0, r6
   1ad84:	b	1ace0 <flatcc_json_parser_match_constant@@Base+0x80>
   1ad88:	ldrb	r3, [r4, #1]
   1ad8c:	cmp	r3, #32
   1ad90:	addhi	r0, r4, #1
   1ad94:	bls	1ad0c <flatcc_json_parser_match_constant@@Base+0xac>
   1ad98:	b	1ad1c <flatcc_json_parser_match_constant@@Base+0xbc>
   1ad9c:	mov	r3, #1
   1ada0:	ldr	r2, [sp, #16]
   1ada4:	str	r3, [r2]
   1ada8:	b	1ace0 <flatcc_json_parser_match_constant@@Base+0x80>
   1adac:	mov	r3, #1
   1adb0:	ldr	r2, [sp, #16]
   1adb4:	str	r3, [r2]
   1adb8:	b	1ace0 <flatcc_json_parser_match_constant@@Base+0x80>
   1adbc:	add	r3, r4, #1
   1adc0:	cmp	r5, r3
   1adc4:	beq	1ae9c <flatcc_json_parser_match_constant@@Base+0x23c>
   1adc8:	ldrb	r2, [r4, #1]
   1adcc:	cmp	r2, #32
   1add0:	bne	1aeb4 <flatcc_json_parser_match_constant@@Base+0x254>
   1add4:	add	r3, r4, #2
   1add8:	mov	r2, r5
   1addc:	mov	r4, r3
   1ade0:	cmp	r2, r3
   1ade4:	beq	1aea0 <flatcc_json_parser_match_constant@@Base+0x240>
   1ade8:	add	r3, r3, #1
   1adec:	ldrb	r1, [r4]
   1adf0:	cmp	r1, #32
   1adf4:	beq	1addc <flatcc_json_parser_match_constant@@Base+0x17c>
   1adf8:	ldrb	r3, [r4]
   1adfc:	cmp	r3, #34	; 0x22
   1ae00:	bne	1ae40 <flatcc_json_parser_match_constant@@Base+0x1e0>
   1ae04:	add	r0, r4, #1
   1ae08:	cmn	r0, #1
   1ae0c:	bge	1ae20 <flatcc_json_parser_match_constant@@Base+0x1c0>
   1ae10:	ldrb	r3, [r4, #1]
   1ae14:	cmp	r3, #32
   1ae18:	bhi	1ae30 <flatcc_json_parser_match_constant@@Base+0x1d0>
   1ae1c:	beq	1ae54 <flatcc_json_parser_match_constant@@Base+0x1f4>
   1ae20:	mov	r2, #0
   1ae24:	mov	r1, r0
   1ae28:	mov	r0, ip
   1ae2c:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1ae30:	mov	r3, #0
   1ae34:	ldr	r2, [sp, #16]
   1ae38:	str	r3, [r2]
   1ae3c:	b	1ace0 <flatcc_json_parser_match_constant@@Base+0x80>
   1ae40:	mov	r3, #1
   1ae44:	ldr	r2, [sp, #16]
   1ae48:	str	r3, [r2]
   1ae4c:	mov	r0, r4
   1ae50:	b	1ace0 <flatcc_json_parser_match_constant@@Base+0x80>
   1ae54:	ldrb	r3, [r4, #2]
   1ae58:	cmp	r3, #32
   1ae5c:	addhi	r0, r4, #2
   1ae60:	bls	1ae20 <flatcc_json_parser_match_constant@@Base+0x1c0>
   1ae64:	b	1ae30 <flatcc_json_parser_match_constant@@Base+0x1d0>
   1ae68:	mov	r3, #0
   1ae6c:	ldr	r2, [sp, #16]
   1ae70:	str	r3, [r2]
   1ae74:	mov	r0, r1
   1ae78:	b	1ace0 <flatcc_json_parser_match_constant@@Base+0x80>
   1ae7c:	cmp	r4, r5
   1ae80:	movne	r0, r4
   1ae84:	bne	1ad58 <flatcc_json_parser_match_constant@@Base+0xf8>
   1ae88:	mov	r0, r5
   1ae8c:	mov	r3, #0
   1ae90:	ldr	r2, [sp, #16]
   1ae94:	str	r3, [r2]
   1ae98:	b	1ace0 <flatcc_json_parser_match_constant@@Base+0x80>
   1ae9c:	mov	r4, r3
   1aea0:	mov	r3, #0
   1aea4:	ldr	r2, [sp, #16]
   1aea8:	str	r3, [r2]
   1aeac:	mov	r0, r4
   1aeb0:	b	1ace0 <flatcc_json_parser_match_constant@@Base+0x80>
   1aeb4:	mov	r4, r3
   1aeb8:	b	1adf8 <flatcc_json_parser_match_constant@@Base+0x198>

0001aebc <flatcc_json_parser_double@@Base>:
   1aebc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1aec0:	strd	r6, [sp, #8]
   1aec4:	str	r8, [sp, #16]
   1aec8:	str	lr, [sp, #20]
   1aecc:	mov	r4, #0
   1aed0:	mov	r5, #0
   1aed4:	strd	r4, [r3]
   1aed8:	cmp	r1, r2
   1aedc:	beq	1af70 <flatcc_json_parser_double@@Base+0xb4>
   1aee0:	ldrb	ip, [r1]
   1aee4:	cmp	ip, #45	; 0x2d
   1aee8:	addeq	ip, r1, #1
   1aeec:	movne	ip, r1
   1aef0:	mov	r6, r3
   1aef4:	mov	r5, r2
   1aef8:	mov	r4, r1
   1aefc:	mov	r7, r0
   1af00:	sub	r3, r2, ip
   1af04:	cmp	r3, #1
   1af08:	ble	1af20 <flatcc_json_parser_double@@Base+0x64>
   1af0c:	ldrb	r3, [ip]
   1af10:	cmp	r3, #46	; 0x2e
   1af14:	beq	1af94 <flatcc_json_parser_double@@Base+0xd8>
   1af18:	cmp	r3, #48	; 0x30
   1af1c:	beq	1af88 <flatcc_json_parser_double@@Base+0xcc>
   1af20:	mov	r2, r6
   1af24:	sub	r1, r5, r4
   1af28:	mov	r0, r4
   1af2c:	bl	190a8 <grisu3_diy_fp_encode_double@@Base+0x500>
   1af30:	mov	r2, r0
   1af34:	cmp	r4, r0
   1af38:	cmpne	r0, #0
   1af3c:	bne	1af70 <flatcc_json_parser_double@@Base+0xb4>
   1af40:	vldr	d7, [r6]
   1af44:	vabs.f64	d7, d7
   1af48:	vldr	d6, [pc, #96]	; 1afb0 <flatcc_json_parser_double@@Base+0xf4>
   1af4c:	vcmp.f64	d7, d6
   1af50:	vmrs	APSR_nzcv, fpscr
   1af54:	movgt	r3, #7
   1af58:	movle	r3, #6
   1af5c:	mov	r2, r5
   1af60:	mov	r1, r4
   1af64:	mov	r0, r7
   1af68:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1af6c:	mov	r2, r0
   1af70:	mov	r0, r2
   1af74:	ldrd	r4, [sp]
   1af78:	ldrd	r6, [sp, #8]
   1af7c:	ldr	r8, [sp, #16]
   1af80:	add	sp, sp, #20
   1af84:	pop	{pc}		; (ldr pc, [sp], #4)
   1af88:	ldrb	r3, [ip, #1]
   1af8c:	cmp	r3, #48	; 0x30
   1af90:	bne	1af20 <flatcc_json_parser_double@@Base+0x64>
   1af94:	mov	r3, #6
   1af98:	mov	r2, r5
   1af9c:	mov	r1, r4
   1afa0:	mov	r0, r7
   1afa4:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1afa8:	mov	r2, r0
   1afac:	b	1af70 <flatcc_json_parser_double@@Base+0xb4>
   1afb0:			; <UNDEFINED> instruction: 0xffffffff
   1afb4:	svcvc	0x00efffff

0001afb8 <flatcc_json_parser_float@@Base>:
   1afb8:	mov	ip, #0
   1afbc:	str	ip, [r3]
   1afc0:	cmp	r1, r2
   1afc4:	beq	1b0e8 <flatcc_json_parser_float@@Base+0x130>
   1afc8:	strd	r4, [sp, #-20]!	; 0xffffffec
   1afcc:	strd	r6, [sp, #8]
   1afd0:	str	lr, [sp, #16]
   1afd4:	sub	sp, sp, #12
   1afd8:	ldrb	ip, [r1]
   1afdc:	cmp	ip, #45	; 0x2d
   1afe0:	addeq	ip, r1, #1
   1afe4:	movne	ip, r1
   1afe8:	mov	r6, r3
   1afec:	mov	r5, r2
   1aff0:	mov	r4, r1
   1aff4:	mov	r7, r0
   1aff8:	sub	r3, r2, ip
   1affc:	cmp	r3, #1
   1b000:	ble	1b018 <flatcc_json_parser_float@@Base+0x60>
   1b004:	ldrb	r3, [ip]
   1b008:	cmp	r3, #46	; 0x2e
   1b00c:	beq	1b074 <flatcc_json_parser_float@@Base+0xbc>
   1b010:	cmp	r3, #48	; 0x30
   1b014:	beq	1b068 <flatcc_json_parser_float@@Base+0xb0>
   1b018:	mov	r2, sp
   1b01c:	sub	r1, r5, r4
   1b020:	mov	r0, r4
   1b024:	bl	190a8 <grisu3_diy_fp_encode_double@@Base+0x500>
   1b028:	vldr	d6, [sp]
   1b02c:	vcvt.f32.f64	s15, d6
   1b030:	vstr	s15, [r6]
   1b034:	vabs.f32	s15, s15
   1b038:	vldr	s14, [pc, #176]	; 1b0f0 <flatcc_json_parser_float@@Base+0x138>
   1b03c:	vcmp.f32	s15, s14
   1b040:	vmrs	APSR_nzcv, fpscr
   1b044:	bgt	1b08c <flatcc_json_parser_float@@Base+0xd4>
   1b048:	cmp	r4, r0
   1b04c:	cmpne	r0, #0
   1b050:	beq	1b0d0 <flatcc_json_parser_float@@Base+0x118>
   1b054:	add	sp, sp, #12
   1b058:	ldrd	r4, [sp]
   1b05c:	ldrd	r6, [sp, #8]
   1b060:	add	sp, sp, #16
   1b064:	pop	{pc}		; (ldr pc, [sp], #4)
   1b068:	ldrb	r3, [ip, #1]
   1b06c:	cmp	r3, #48	; 0x30
   1b070:	bne	1b018 <flatcc_json_parser_float@@Base+0x60>
   1b074:	mov	r3, #6
   1b078:	mov	r2, r5
   1b07c:	mov	r1, r4
   1b080:	mov	r0, r7
   1b084:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1b088:	b	1b054 <flatcc_json_parser_float@@Base+0x9c>
   1b08c:	vcmpe.f64	d6, #0.0
   1b090:	vmrs	APSR_nzcv, fpscr
   1b094:	vldr	s15, [pc, #88]	; 1b0f4 <flatcc_json_parser_float@@Base+0x13c>
   1b098:	vldr	s14, [pc, #88]	; 1b0f8 <flatcc_json_parser_float@@Base+0x140>
   1b09c:	vmovpl.f32	s15, s14
   1b0a0:	vstr	s15, [r6]
   1b0a4:	vabs.f32	s15, s15
   1b0a8:	vldr	s14, [pc, #64]	; 1b0f0 <flatcc_json_parser_float@@Base+0x138>
   1b0ac:	vcmp.f32	s15, s14
   1b0b0:	vmrs	APSR_nzcv, fpscr
   1b0b4:	ble	1b0d0 <flatcc_json_parser_float@@Base+0x118>
   1b0b8:	mov	r3, #7
   1b0bc:	mov	r2, r5
   1b0c0:	mov	r1, r4
   1b0c4:	mov	r0, r7
   1b0c8:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1b0cc:	b	1b054 <flatcc_json_parser_float@@Base+0x9c>
   1b0d0:	mov	r3, #6
   1b0d4:	mov	r2, r5
   1b0d8:	mov	r1, r4
   1b0dc:	mov	r0, r7
   1b0e0:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1b0e4:	b	1b054 <flatcc_json_parser_float@@Base+0x9c>
   1b0e8:	mov	r0, r2
   1b0ec:	bx	lr
   1b0f0:	svcvc	0x007fffff
   1b0f4:			; <UNDEFINED> instruction: 0xff800000
   1b0f8:	svcvc	0x00800000

0001b0fc <flatcc_json_parser_generic_json@@Base>:
   1b0fc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b100:	strd	r6, [sp, #8]
   1b104:	strd	r8, [sp, #16]
   1b108:	strd	sl, [sp, #24]
   1b10c:	str	lr, [sp, #32]
   1b110:	sub	sp, sp, #524	; 0x20c
   1b114:	mov	r4, r2
   1b118:	cmp	r1, r2
   1b11c:	beq	1ba84 <flatcc_json_parser_generic_json@@Base+0x988>
   1b120:	mov	r8, r0
   1b124:	mov	r6, r1
   1b128:	add	r5, sp, #8
   1b12c:	mov	r7, r5
   1b130:	b	1b928 <flatcc_json_parser_generic_json@@Base+0x82c>
   1b134:	ldrb	r3, [r6]
   1b138:	cmp	r3, #34	; 0x22
   1b13c:	addeq	r6, r6, #1
   1b140:	moveq	r3, #0
   1b144:	streq	r3, [r8, #12]
   1b148:	beq	1b19c <flatcc_json_parser_generic_json@@Base+0xa0>
   1b14c:	cmp	r3, #46	; 0x2e
   1b150:	movne	r3, #1
   1b154:	strne	r3, [r8, #12]
   1b158:	beq	1b178 <flatcc_json_parser_generic_json@@Base+0x7c>
   1b15c:	cmp	r4, r6
   1b160:	beq	1bbf8 <flatcc_json_parser_generic_json@@Base+0xafc>
   1b164:	ldrb	r3, [r6]
   1b168:	cmp	r3, #32
   1b16c:	bhi	1b1d8 <flatcc_json_parser_generic_json@@Base+0xdc>
   1b170:	mov	r0, r6
   1b174:	b	1b214 <flatcc_json_parser_generic_json@@Base+0x118>
   1b178:	mov	r3, #5
   1b17c:	mov	r2, r4
   1b180:	mov	r1, r6
   1b184:	mov	r0, r8
   1b188:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1b18c:	mov	r6, r0
   1b190:	ldr	r3, [r8, #12]
   1b194:	cmp	r3, #0
   1b198:	bne	1b15c <flatcc_json_parser_generic_json@@Base+0x60>
   1b19c:	cmp	r4, r6
   1b1a0:	beq	1b300 <flatcc_json_parser_generic_json@@Base+0x204>
   1b1a4:	ldrb	r3, [r6]
   1b1a8:	cmp	r3, #34	; 0x22
   1b1ac:	bne	1b2cc <flatcc_json_parser_generic_json@@Base+0x1d0>
   1b1b0:	add	r0, r6, #1
   1b1b4:	b	1b214 <flatcc_json_parser_generic_json@@Base+0x118>
   1b1b8:	add	r0, r6, #1
   1b1bc:	cmp	r4, r0
   1b1c0:	beq	1b294 <flatcc_json_parser_generic_json@@Base+0x198>
   1b1c4:	ldrb	r2, [r0]
   1b1c8:	add	r6, r6, #1
   1b1cc:	cmp	r2, #32
   1b1d0:	bls	1b294 <flatcc_json_parser_generic_json@@Base+0x198>
   1b1d4:	mov	r3, r2
   1b1d8:	mov	r0, r6
   1b1dc:	cmp	r3, #46	; 0x2e
   1b1e0:	cmpne	r3, #95	; 0x5f
   1b1e4:	beq	1b1b8 <flatcc_json_parser_generic_json@@Base+0xbc>
   1b1e8:	tst	r3, #128	; 0x80
   1b1ec:	bne	1b1b8 <flatcc_json_parser_generic_json@@Base+0xbc>
   1b1f0:	sub	r2, r3, #48	; 0x30
   1b1f4:	uxtb	r2, r2
   1b1f8:	cmp	r2, #9
   1b1fc:	bls	1b1b8 <flatcc_json_parser_generic_json@@Base+0xbc>
   1b200:	orr	r2, r3, #32
   1b204:	sub	r2, r2, #97	; 0x61
   1b208:	uxtb	r2, r2
   1b20c:	cmp	r2, #25
   1b210:	bls	1b28c <flatcc_json_parser_generic_json@@Base+0x190>
   1b214:	sub	r3, r4, r0
   1b218:	cmp	r3, #1
   1b21c:	ble	1b230 <flatcc_json_parser_generic_json@@Base+0x134>
   1b220:	ldrb	r3, [r0]
   1b224:	cmp	r3, #32
   1b228:	bhi	1b240 <flatcc_json_parser_generic_json@@Base+0x144>
   1b22c:	beq	1b318 <flatcc_json_parser_generic_json@@Base+0x21c>
   1b230:	mov	r2, r4
   1b234:	mov	r1, r0
   1b238:	mov	r0, r8
   1b23c:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1b240:	cmp	r4, r0
   1b244:	beq	1b32c <flatcc_json_parser_generic_json@@Base+0x230>
   1b248:	ldrb	r3, [r0]
   1b24c:	cmp	r3, #58	; 0x3a
   1b250:	bne	1b344 <flatcc_json_parser_generic_json@@Base+0x248>
   1b254:	add	r6, r0, #1
   1b258:	sub	r3, r4, r6
   1b25c:	cmp	r3, #1
   1b260:	ble	1b274 <flatcc_json_parser_generic_json@@Base+0x178>
   1b264:	ldrb	r3, [r0, #1]
   1b268:	cmp	r3, #32
   1b26c:	bhi	1b93c <flatcc_json_parser_generic_json@@Base+0x840>
   1b270:	beq	1b35c <flatcc_json_parser_generic_json@@Base+0x260>
   1b274:	mov	r2, r4
   1b278:	mov	r1, r6
   1b27c:	mov	r0, r8
   1b280:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1b284:	mov	r6, r0
   1b288:	b	1b93c <flatcc_json_parser_generic_json@@Base+0x840>
   1b28c:	add	r0, r6, #1
   1b290:	b	1b1bc <flatcc_json_parser_generic_json@@Base+0xc0>
   1b294:	cmp	r3, #46	; 0x2e
   1b298:	bne	1b214 <flatcc_json_parser_generic_json@@Base+0x118>
   1b29c:	mov	r3, #5
   1b2a0:	mov	r2, r4
   1b2a4:	mov	r1, r0
   1b2a8:	mov	r0, r8
   1b2ac:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1b2b0:	b	1b214 <flatcc_json_parser_generic_json@@Base+0x118>
   1b2b4:	add	r6, r3, #1
   1b2b8:	cmp	r4, r6
   1b2bc:	beq	1b300 <flatcc_json_parser_generic_json@@Base+0x204>
   1b2c0:	ldrb	r3, [r3, #1]
   1b2c4:	cmp	r3, #34	; 0x22
   1b2c8:	beq	1b2f4 <flatcc_json_parser_generic_json@@Base+0x1f8>
   1b2cc:	cmp	r3, #92	; 0x5c
   1b2d0:	movne	r3, r6
   1b2d4:	bne	1b2b4 <flatcc_json_parser_generic_json@@Base+0x1b8>
   1b2d8:	sub	r3, r4, r6
   1b2dc:	cmp	r3, #1
   1b2e0:	ble	1b2ec <flatcc_json_parser_generic_json@@Base+0x1f0>
   1b2e4:	add	r3, r6, #1
   1b2e8:	b	1b2b4 <flatcc_json_parser_generic_json@@Base+0x1b8>
   1b2ec:	cmp	r4, r6
   1b2f0:	beq	1b300 <flatcc_json_parser_generic_json@@Base+0x204>
   1b2f4:	ldrb	r3, [r6]
   1b2f8:	cmp	r3, #34	; 0x22
   1b2fc:	beq	1b1b0 <flatcc_json_parser_generic_json@@Base+0xb4>
   1b300:	mov	r3, #20
   1b304:	mov	r2, r4
   1b308:	mov	r1, r6
   1b30c:	mov	r0, r8
   1b310:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1b314:	b	1b214 <flatcc_json_parser_generic_json@@Base+0x118>
   1b318:	ldrb	r3, [r0, #1]
   1b31c:	cmp	r3, #32
   1b320:	addhi	r0, r0, #1
   1b324:	bls	1b230 <flatcc_json_parser_generic_json@@Base+0x134>
   1b328:	b	1b240 <flatcc_json_parser_generic_json@@Base+0x144>
   1b32c:	mov	r3, #10
   1b330:	mov	r2, r4
   1b334:	mov	r1, r0
   1b338:	mov	r0, r8
   1b33c:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1b340:	b	1ba44 <flatcc_json_parser_generic_json@@Base+0x948>
   1b344:	mov	r3, #4
   1b348:	mov	r2, r4
   1b34c:	mov	r1, r0
   1b350:	mov	r0, r8
   1b354:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1b358:	b	1ba44 <flatcc_json_parser_generic_json@@Base+0x948>
   1b35c:	ldrb	r3, [r0, #2]
   1b360:	cmp	r3, #32
   1b364:	addhi	r6, r0, #2
   1b368:	bls	1b274 <flatcc_json_parser_generic_json@@Base+0x178>
   1b36c:	b	1b93c <flatcc_json_parser_generic_json@@Base+0x840>
   1b370:	cmp	r3, #48	; 0x30
   1b374:	bcs	1bb1c <flatcc_json_parser_generic_json@@Base+0xa20>
   1b378:	cmp	r3, #34	; 0x22
   1b37c:	beq	1b3ac <flatcc_json_parser_generic_json@@Base+0x2b0>
   1b380:	cmp	r3, #45	; 0x2d
   1b384:	beq	1bb1c <flatcc_json_parser_generic_json@@Base+0xa20>
   1b388:	mov	r2, r4
   1b38c:	mov	r1, r6
   1b390:	mov	r0, r8
   1b394:	bl	1ab8c <flatcc_json_parser_skip_constant@@Base>
   1b398:	cmp	r0, r6
   1b39c:	beq	1b670 <flatcc_json_parser_generic_json@@Base+0x574>
   1b3a0:	mov	sl, #10
   1b3a4:	mov	fp, #9
   1b3a8:	b	1b844 <flatcc_json_parser_generic_json@@Base+0x748>
   1b3ac:	cmp	r4, r6
   1b3b0:	addne	r0, r6, #1
   1b3b4:	bne	1b3cc <flatcc_json_parser_generic_json@@Base+0x2d0>
   1b3b8:	mov	r3, #16
   1b3bc:	mov	r2, r4
   1b3c0:	mov	r1, r6
   1b3c4:	mov	r0, r8
   1b3c8:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1b3cc:	cmp	r4, r0
   1b3d0:	beq	1ba94 <flatcc_json_parser_generic_json@@Base+0x998>
   1b3d4:	ldrb	r3, [r0]
   1b3d8:	cmp	r3, #34	; 0x22
   1b3dc:	bne	1b40c <flatcc_json_parser_generic_json@@Base+0x310>
   1b3e0:	b	1b430 <flatcc_json_parser_generic_json@@Base+0x334>
   1b3e4:	add	r3, sp, #4
   1b3e8:	mov	r2, r4
   1b3ec:	mov	r1, r0
   1b3f0:	mov	r0, r8
   1b3f4:	bl	1a63c <flatcc_json_parser_string_escape@@Base>
   1b3f8:	cmp	r4, r0
   1b3fc:	beq	1ba94 <flatcc_json_parser_generic_json@@Base+0x998>
   1b400:	ldrb	r3, [r0]
   1b404:	cmp	r3, #34	; 0x22
   1b408:	beq	1b430 <flatcc_json_parser_generic_json@@Base+0x334>
   1b40c:	mov	r2, r4
   1b410:	mov	r1, r0
   1b414:	mov	r0, r8
   1b418:	bl	19e24 <flatcc_json_parser_string_part@@Base>
   1b41c:	cmp	r4, r0
   1b420:	beq	1b3e4 <flatcc_json_parser_generic_json@@Base+0x2e8>
   1b424:	ldrb	r3, [r0]
   1b428:	cmp	r3, #34	; 0x22
   1b42c:	bne	1b3e4 <flatcc_json_parser_generic_json@@Base+0x2e8>
   1b430:	add	r0, r0, #1
   1b434:	b	1b3a0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   1b438:	add	r6, r6, #1
   1b43c:	cmp	r4, r6
   1b440:	bne	1bb30 <flatcc_json_parser_generic_json@@Base+0xa34>
   1b444:	mov	r3, #6
   1b448:	mov	r2, r6
   1b44c:	mov	r1, r6
   1b450:	mov	r0, r8
   1b454:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1b458:	b	1b3a0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   1b45c:	add	r0, r6, #1
   1b460:	cmp	r4, r0
   1b464:	bne	1bb98 <flatcc_json_parser_generic_json@@Base+0xa9c>
   1b468:	b	1bac4 <flatcc_json_parser_generic_json@@Base+0x9c8>
   1b46c:	mov	r3, #6
   1b470:	mov	r2, r4
   1b474:	mov	r1, r6
   1b478:	mov	r0, r8
   1b47c:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1b480:	b	1b3a0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   1b484:	ldrb	r3, [r0, #1]
   1b488:	sub	r3, r3, #48	; 0x30
   1b48c:	uxtb	r3, r3
   1b490:	cmp	r3, #9
   1b494:	bhi	1b4e8 <flatcc_json_parser_generic_json@@Base+0x3ec>
   1b498:	add	r2, r0, #2
   1b49c:	cmp	r4, r2
   1b4a0:	beq	1bae8 <flatcc_json_parser_generic_json@@Base+0x9ec>
   1b4a4:	ldrb	r3, [r0, #2]
   1b4a8:	sub	r3, r3, #48	; 0x30
   1b4ac:	uxtb	r3, r3
   1b4b0:	cmp	r3, #9
   1b4b4:	bhi	1baf0 <flatcc_json_parser_generic_json@@Base+0x9f4>
   1b4b8:	add	r2, r0, #3
   1b4bc:	mov	r1, r4
   1b4c0:	mov	r0, r2
   1b4c4:	cmp	r1, r2
   1b4c8:	beq	1bac4 <flatcc_json_parser_generic_json@@Base+0x9c8>
   1b4cc:	add	r2, r2, #1
   1b4d0:	ldrb	r3, [r0]
   1b4d4:	sub	r3, r3, #48	; 0x30
   1b4d8:	uxtb	r3, r3
   1b4dc:	cmp	r3, #9
   1b4e0:	bls	1b4c0 <flatcc_json_parser_generic_json@@Base+0x3c4>
   1b4e4:	b	1bba4 <flatcc_json_parser_generic_json@@Base+0xaa8>
   1b4e8:	mov	r3, #6
   1b4ec:	mov	r2, r4
   1b4f0:	add	r1, r0, #1
   1b4f4:	mov	r0, r8
   1b4f8:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1b4fc:	b	1b3a0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   1b500:	add	r1, r0, #1
   1b504:	cmp	r4, r1
   1b508:	beq	1b550 <flatcc_json_parser_generic_json@@Base+0x454>
   1b50c:	ldrb	r3, [r0, #1]
   1b510:	sub	r3, r3, #43	; 0x2b
   1b514:	tst	r3, #253	; 0xfd
   1b518:	bne	1b528 <flatcc_json_parser_generic_json@@Base+0x42c>
   1b51c:	add	r1, r0, #2
   1b520:	cmp	r4, r1
   1b524:	beq	1b53c <flatcc_json_parser_generic_json@@Base+0x440>
   1b528:	ldrb	r3, [r1]
   1b52c:	sub	r3, r3, #48	; 0x30
   1b530:	uxtb	r3, r3
   1b534:	cmp	r3, #9
   1b538:	bls	1b564 <flatcc_json_parser_generic_json@@Base+0x468>
   1b53c:	mov	r3, #6
   1b540:	mov	r2, r4
   1b544:	mov	r0, r8
   1b548:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1b54c:	b	1b3a0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   1b550:	mov	r3, #6
   1b554:	mov	r2, r1
   1b558:	mov	r0, r8
   1b55c:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1b560:	b	1b3a0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   1b564:	add	r0, r1, #1
   1b568:	cmp	r4, r0
   1b56c:	beq	1bac4 <flatcc_json_parser_generic_json@@Base+0x9c8>
   1b570:	ldrb	r3, [r1, #1]
   1b574:	sub	r3, r3, #48	; 0x30
   1b578:	uxtb	r3, r3
   1b57c:	cmp	r3, #9
   1b580:	bhi	1bbb4 <flatcc_json_parser_generic_json@@Base+0xab8>
   1b584:	add	r3, r1, #2
   1b588:	mov	r1, r4
   1b58c:	mov	r0, r3
   1b590:	cmp	r1, r3
   1b594:	beq	1bac4 <flatcc_json_parser_generic_json@@Base+0x9c8>
   1b598:	add	r3, r3, #1
   1b59c:	ldrb	r2, [r0]
   1b5a0:	sub	r2, r2, #48	; 0x30
   1b5a4:	uxtb	r2, r2
   1b5a8:	cmp	r2, #9
   1b5ac:	bls	1b58c <flatcc_json_parser_generic_json@@Base+0x490>
   1b5b0:	b	1bbb4 <flatcc_json_parser_generic_json@@Base+0xab8>
   1b5b4:	add	r3, sp, #520	; 0x208
   1b5b8:	cmp	r5, r3
   1b5bc:	beq	1b618 <flatcc_json_parser_generic_json@@Base+0x51c>
   1b5c0:	mov	r3, #93	; 0x5d
   1b5c4:	strb	r3, [r5], #1
   1b5c8:	add	r1, r6, #1
   1b5cc:	sub	r3, r4, r1
   1b5d0:	cmp	r3, #1
   1b5d4:	ble	1b5ec <flatcc_json_parser_generic_json@@Base+0x4f0>
   1b5d8:	ldrb	r3, [r6, #1]
   1b5dc:	cmp	r3, #32
   1b5e0:	movhi	r6, r1
   1b5e4:	bhi	1b5fc <flatcc_json_parser_generic_json@@Base+0x500>
   1b5e8:	beq	1b630 <flatcc_json_parser_generic_json@@Base+0x534>
   1b5ec:	mov	r2, r4
   1b5f0:	mov	r0, r8
   1b5f4:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1b5f8:	mov	r6, r0
   1b5fc:	cmp	r4, r6
   1b600:	beq	1ba8c <flatcc_json_parser_generic_json@@Base+0x990>
   1b604:	ldrb	r3, [r6]
   1b608:	cmp	r3, #93	; 0x5d
   1b60c:	bne	1b928 <flatcc_json_parser_generic_json@@Base+0x82c>
   1b610:	mov	r0, r6
   1b614:	b	1b3a0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   1b618:	mov	r3, #2
   1b61c:	mov	r2, r4
   1b620:	mov	r1, r6
   1b624:	mov	r0, r8
   1b628:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1b62c:	b	1ba44 <flatcc_json_parser_generic_json@@Base+0x948>
   1b630:	ldrb	r3, [r6, #2]
   1b634:	cmp	r3, #32
   1b638:	addhi	r6, r6, #2
   1b63c:	bls	1b5ec <flatcc_json_parser_generic_json@@Base+0x4f0>
   1b640:	b	1b5fc <flatcc_json_parser_generic_json@@Base+0x500>
   1b644:	mov	r3, #2
   1b648:	mov	r2, r4
   1b64c:	mov	r1, r6
   1b650:	mov	r0, r8
   1b654:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1b658:	b	1ba44 <flatcc_json_parser_generic_json@@Base+0x948>
   1b65c:	ldrb	r3, [r6, #2]
   1b660:	cmp	r3, #32
   1b664:	addhi	r6, r6, #2
   1b668:	bls	1b990 <flatcc_json_parser_generic_json@@Base+0x894>
   1b66c:	b	1b9a0 <flatcc_json_parser_generic_json@@Base+0x8a4>
   1b670:	mov	r3, #5
   1b674:	mov	r2, r4
   1b678:	mov	r1, r6
   1b67c:	mov	r0, r8
   1b680:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1b684:	b	1ba44 <flatcc_json_parser_generic_json@@Base+0x948>
   1b688:	sub	r3, r4, r0
   1b68c:	cmp	r3, #1
   1b690:	ble	1b6a4 <flatcc_json_parser_generic_json@@Base+0x5a8>
   1b694:	ldrb	r3, [r0]
   1b698:	cmp	r3, #32
   1b69c:	bhi	1b6bc <flatcc_json_parser_generic_json@@Base+0x5c0>
   1b6a0:	beq	1b6e8 <flatcc_json_parser_generic_json@@Base+0x5ec>
   1b6a4:	mov	r2, r4
   1b6a8:	mov	r1, r0
   1b6ac:	mov	r0, r8
   1b6b0:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1b6b4:	cmp	r4, r0
   1b6b8:	beq	1b840 <flatcc_json_parser_generic_json@@Base+0x744>
   1b6bc:	ldrb	r3, [r0]
   1b6c0:	cmp	r3, #44	; 0x2c
   1b6c4:	beq	1b744 <flatcc_json_parser_generic_json@@Base+0x648>
   1b6c8:	cmp	r3, #93	; 0x5d
   1b6cc:	beq	1b6fc <flatcc_json_parser_generic_json@@Base+0x600>
   1b6d0:	mov	r3, fp
   1b6d4:	mov	r2, r4
   1b6d8:	mov	r1, r0
   1b6dc:	mov	r0, r8
   1b6e0:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1b6e4:	b	1b840 <flatcc_json_parser_generic_json@@Base+0x744>
   1b6e8:	ldrb	r3, [r0, #1]
   1b6ec:	cmp	r3, #32
   1b6f0:	addhi	r0, r0, #1
   1b6f4:	bls	1b6a4 <flatcc_json_parser_generic_json@@Base+0x5a8>
   1b6f8:	b	1b6b4 <flatcc_json_parser_generic_json@@Base+0x5b8>
   1b6fc:	add	r1, r0, #1
   1b700:	sub	r3, r4, r1
   1b704:	cmp	r3, #1
   1b708:	ble	1b720 <flatcc_json_parser_generic_json@@Base+0x624>
   1b70c:	ldrb	r3, [r0, #1]
   1b710:	cmp	r3, #32
   1b714:	movhi	r0, r1
   1b718:	bhi	1b840 <flatcc_json_parser_generic_json@@Base+0x744>
   1b71c:	beq	1b730 <flatcc_json_parser_generic_json@@Base+0x634>
   1b720:	mov	r2, r4
   1b724:	mov	r0, r8
   1b728:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1b72c:	b	1b840 <flatcc_json_parser_generic_json@@Base+0x744>
   1b730:	ldrb	r3, [r0, #2]
   1b734:	cmp	r3, #32
   1b738:	addhi	r0, r0, #2
   1b73c:	bls	1b720 <flatcc_json_parser_generic_json@@Base+0x624>
   1b740:	b	1b840 <flatcc_json_parser_generic_json@@Base+0x744>
   1b744:	add	r6, r0, #1
   1b748:	sub	r3, r4, r6
   1b74c:	cmp	r3, #1
   1b750:	ble	1b764 <flatcc_json_parser_generic_json@@Base+0x668>
   1b754:	ldrb	r3, [r0, #1]
   1b758:	cmp	r3, #32
   1b75c:	bhi	1b778 <flatcc_json_parser_generic_json@@Base+0x67c>
   1b760:	beq	1b7c0 <flatcc_json_parser_generic_json@@Base+0x6c4>
   1b764:	mov	r2, r4
   1b768:	mov	r1, r6
   1b76c:	mov	r0, r8
   1b770:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1b774:	mov	r6, r0
   1b778:	cmp	r4, r6
   1b77c:	beq	1b7d4 <flatcc_json_parser_generic_json@@Base+0x6d8>
   1b780:	ldrb	r3, [r6]
   1b784:	cmp	r3, #93	; 0x5d
   1b788:	bne	1b928 <flatcc_json_parser_generic_json@@Base+0x82c>
   1b78c:	add	r0, r6, #1
   1b790:	sub	r3, r4, r0
   1b794:	cmp	r3, #1
   1b798:	ble	1b7ac <flatcc_json_parser_generic_json@@Base+0x6b0>
   1b79c:	ldrb	r3, [r6, #1]
   1b7a0:	cmp	r3, #32
   1b7a4:	bhi	1b840 <flatcc_json_parser_generic_json@@Base+0x744>
   1b7a8:	beq	1b7ec <flatcc_json_parser_generic_json@@Base+0x6f0>
   1b7ac:	mov	r2, r4
   1b7b0:	mov	r1, r0
   1b7b4:	mov	r0, r8
   1b7b8:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1b7bc:	b	1b840 <flatcc_json_parser_generic_json@@Base+0x744>
   1b7c0:	ldrb	r3, [r0, #2]
   1b7c4:	cmp	r3, #32
   1b7c8:	addhi	r6, r0, #2
   1b7cc:	bls	1b764 <flatcc_json_parser_generic_json@@Base+0x668>
   1b7d0:	b	1b778 <flatcc_json_parser_generic_json@@Base+0x67c>
   1b7d4:	mov	r3, fp
   1b7d8:	mov	r2, r4
   1b7dc:	mov	r1, r6
   1b7e0:	mov	r0, r8
   1b7e4:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1b7e8:	b	1b840 <flatcc_json_parser_generic_json@@Base+0x744>
   1b7ec:	ldrb	r3, [r6, #2]
   1b7f0:	cmp	r3, #32
   1b7f4:	addhi	r0, r6, #2
   1b7f8:	bls	1b7ac <flatcc_json_parser_generic_json@@Base+0x6b0>
   1b7fc:	b	1b840 <flatcc_json_parser_generic_json@@Base+0x744>
   1b800:	mov	r2, r4
   1b804:	mov	r1, r0
   1b808:	mov	r0, r8
   1b80c:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1b810:	cmp	r4, r0
   1b814:	beq	1b840 <flatcc_json_parser_generic_json@@Base+0x744>
   1b818:	ldrb	r3, [r0]
   1b81c:	cmp	r3, #44	; 0x2c
   1b820:	beq	1b8e0 <flatcc_json_parser_generic_json@@Base+0x7e4>
   1b824:	cmp	r3, #125	; 0x7d
   1b828:	beq	1b898 <flatcc_json_parser_generic_json@@Base+0x79c>
   1b82c:	mov	r3, sl
   1b830:	mov	r2, r4
   1b834:	mov	r1, r0
   1b838:	mov	r0, r8
   1b83c:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1b840:	mov	r5, r9
   1b844:	subs	r3, r5, r7
   1b848:	movne	r3, #1
   1b84c:	cmp	r0, r4
   1b850:	cmpne	r5, r7
   1b854:	beq	1ba30 <flatcc_json_parser_generic_json@@Base+0x934>
   1b858:	sub	r9, r5, #1
   1b85c:	ldrb	r3, [r5, #-1]
   1b860:	cmp	r3, #93	; 0x5d
   1b864:	beq	1b688 <flatcc_json_parser_generic_json@@Base+0x58c>
   1b868:	sub	r3, r4, r0
   1b86c:	cmp	r3, #1
   1b870:	ble	1b800 <flatcc_json_parser_generic_json@@Base+0x704>
   1b874:	ldrb	r3, [r0]
   1b878:	cmp	r3, #32
   1b87c:	bhi	1b818 <flatcc_json_parser_generic_json@@Base+0x71c>
   1b880:	bne	1b800 <flatcc_json_parser_generic_json@@Base+0x704>
   1b884:	ldrb	r3, [r0, #1]
   1b888:	cmp	r3, #32
   1b88c:	addhi	r0, r0, #1
   1b890:	bls	1b800 <flatcc_json_parser_generic_json@@Base+0x704>
   1b894:	b	1b810 <flatcc_json_parser_generic_json@@Base+0x714>
   1b898:	add	r1, r0, #1
   1b89c:	sub	r3, r4, r1
   1b8a0:	cmp	r3, #1
   1b8a4:	ble	1b8bc <flatcc_json_parser_generic_json@@Base+0x7c0>
   1b8a8:	ldrb	r3, [r0, #1]
   1b8ac:	cmp	r3, #32
   1b8b0:	movhi	r0, r1
   1b8b4:	bhi	1b840 <flatcc_json_parser_generic_json@@Base+0x744>
   1b8b8:	beq	1b8cc <flatcc_json_parser_generic_json@@Base+0x7d0>
   1b8bc:	mov	r2, r4
   1b8c0:	mov	r0, r8
   1b8c4:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1b8c8:	b	1b840 <flatcc_json_parser_generic_json@@Base+0x744>
   1b8cc:	ldrb	r3, [r0, #2]
   1b8d0:	cmp	r3, #32
   1b8d4:	addhi	r0, r0, #2
   1b8d8:	bls	1b8bc <flatcc_json_parser_generic_json@@Base+0x7c0>
   1b8dc:	b	1b840 <flatcc_json_parser_generic_json@@Base+0x744>
   1b8e0:	add	r6, r0, #1
   1b8e4:	sub	r3, r4, r6
   1b8e8:	cmp	r3, #1
   1b8ec:	ble	1b900 <flatcc_json_parser_generic_json@@Base+0x804>
   1b8f0:	ldrb	r3, [r0, #1]
   1b8f4:	cmp	r3, #32
   1b8f8:	bhi	1b914 <flatcc_json_parser_generic_json@@Base+0x818>
   1b8fc:	beq	1b9bc <flatcc_json_parser_generic_json@@Base+0x8c0>
   1b900:	mov	r2, r4
   1b904:	mov	r1, r6
   1b908:	mov	r0, r8
   1b90c:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1b910:	mov	r6, r0
   1b914:	cmp	r4, r6
   1b918:	beq	1b9d0 <flatcc_json_parser_generic_json@@Base+0x8d4>
   1b91c:	ldrb	r3, [r6]
   1b920:	cmp	r3, #125	; 0x7d
   1b924:	beq	1b9e8 <flatcc_json_parser_generic_json@@Base+0x8ec>
   1b928:	cmp	r5, r7
   1b92c:	beq	1baf8 <flatcc_json_parser_generic_json@@Base+0x9fc>
   1b930:	ldrb	r3, [r5, #-1]
   1b934:	cmp	r3, #125	; 0x7d
   1b938:	beq	1b134 <flatcc_json_parser_generic_json@@Base+0x38>
   1b93c:	ldrb	r3, [r6]
   1b940:	cmp	r3, #57	; 0x39
   1b944:	bls	1b370 <flatcc_json_parser_generic_json@@Base+0x274>
   1b948:	cmp	r3, #91	; 0x5b
   1b94c:	beq	1b5b4 <flatcc_json_parser_generic_json@@Base+0x4b8>
   1b950:	cmp	r3, #123	; 0x7b
   1b954:	bne	1b388 <flatcc_json_parser_generic_json@@Base+0x28c>
   1b958:	add	r3, sp, #520	; 0x208
   1b95c:	cmp	r5, r3
   1b960:	beq	1b644 <flatcc_json_parser_generic_json@@Base+0x548>
   1b964:	mov	r3, #125	; 0x7d
   1b968:	strb	r3, [r5], #1
   1b96c:	add	r1, r6, #1
   1b970:	sub	r3, r4, r1
   1b974:	cmp	r3, #1
   1b978:	ble	1b990 <flatcc_json_parser_generic_json@@Base+0x894>
   1b97c:	ldrb	r3, [r6, #1]
   1b980:	cmp	r3, #32
   1b984:	movhi	r6, r1
   1b988:	bhi	1b9a0 <flatcc_json_parser_generic_json@@Base+0x8a4>
   1b98c:	beq	1b65c <flatcc_json_parser_generic_json@@Base+0x560>
   1b990:	mov	r2, r4
   1b994:	mov	r0, r8
   1b998:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1b99c:	mov	r6, r0
   1b9a0:	cmp	r4, r6
   1b9a4:	beq	1ba8c <flatcc_json_parser_generic_json@@Base+0x990>
   1b9a8:	ldrb	r3, [r6]
   1b9ac:	cmp	r3, #125	; 0x7d
   1b9b0:	bne	1b928 <flatcc_json_parser_generic_json@@Base+0x82c>
   1b9b4:	mov	r0, r6
   1b9b8:	b	1b3a0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   1b9bc:	ldrb	r3, [r0, #2]
   1b9c0:	cmp	r3, #32
   1b9c4:	addhi	r6, r0, #2
   1b9c8:	bls	1b900 <flatcc_json_parser_generic_json@@Base+0x804>
   1b9cc:	b	1b914 <flatcc_json_parser_generic_json@@Base+0x818>
   1b9d0:	mov	r3, sl
   1b9d4:	mov	r2, r4
   1b9d8:	mov	r1, r6
   1b9dc:	mov	r0, r8
   1b9e0:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1b9e4:	b	1b840 <flatcc_json_parser_generic_json@@Base+0x744>
   1b9e8:	add	r0, r6, #1
   1b9ec:	sub	r3, r4, r0
   1b9f0:	cmp	r3, #1
   1b9f4:	ble	1ba08 <flatcc_json_parser_generic_json@@Base+0x90c>
   1b9f8:	ldrb	r3, [r6, #1]
   1b9fc:	cmp	r3, #32
   1ba00:	bhi	1b840 <flatcc_json_parser_generic_json@@Base+0x744>
   1ba04:	beq	1ba1c <flatcc_json_parser_generic_json@@Base+0x920>
   1ba08:	mov	r2, r4
   1ba0c:	mov	r1, r0
   1ba10:	mov	r0, r8
   1ba14:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1ba18:	b	1b840 <flatcc_json_parser_generic_json@@Base+0x744>
   1ba1c:	ldrb	r3, [r6, #2]
   1ba20:	cmp	r3, #32
   1ba24:	addhi	r0, r6, #2
   1ba28:	bls	1ba08 <flatcc_json_parser_generic_json@@Base+0x90c>
   1ba2c:	b	1b840 <flatcc_json_parser_generic_json@@Base+0x744>
   1ba30:	cmp	r0, r4
   1ba34:	movne	r3, #0
   1ba38:	andeq	r3, r3, #1
   1ba3c:	cmp	r3, #0
   1ba40:	bne	1ba60 <flatcc_json_parser_generic_json@@Base+0x964>
   1ba44:	add	sp, sp, #524	; 0x20c
   1ba48:	ldrd	r4, [sp]
   1ba4c:	ldrd	r6, [sp, #8]
   1ba50:	ldrd	r8, [sp, #16]
   1ba54:	ldrd	sl, [sp, #24]
   1ba58:	add	sp, sp, #32
   1ba5c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba60:	ldrb	r3, [r5, #-1]
   1ba64:	cmp	r3, #93	; 0x5d
   1ba68:	moveq	r3, #9
   1ba6c:	movne	r3, #10
   1ba70:	mov	r2, r4
   1ba74:	mov	r1, r0
   1ba78:	mov	r0, r8
   1ba7c:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1ba80:	b	1ba44 <flatcc_json_parser_generic_json@@Base+0x948>
   1ba84:	mov	r0, r2
   1ba88:	b	1ba44 <flatcc_json_parser_generic_json@@Base+0x948>
   1ba8c:	mov	r0, r4
   1ba90:	b	1ba44 <flatcc_json_parser_generic_json@@Base+0x948>
   1ba94:	mov	r3, #20
   1ba98:	mov	r2, r4
   1ba9c:	mov	r1, r0
   1baa0:	mov	r0, r8
   1baa4:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1baa8:	b	1b3a0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   1baac:	cmp	r3, #9
   1bab0:	bcc	1bac4 <flatcc_json_parser_generic_json@@Base+0x9c8>
   1bab4:	cmp	r3, #11
   1bab8:	bls	1b3a0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   1babc:	cmp	r3, #13
   1bac0:	beq	1b3a0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   1bac4:	mov	r3, #6
   1bac8:	mov	r2, r4
   1bacc:	mov	r1, r0
   1bad0:	mov	r0, r8
   1bad4:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1bad8:	b	1b3a0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   1badc:	cmp	r3, #44	; 0x2c
   1bae0:	bne	1bac4 <flatcc_json_parser_generic_json@@Base+0x9c8>
   1bae4:	b	1b3a0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   1bae8:	mov	r0, r2
   1baec:	b	1bac4 <flatcc_json_parser_generic_json@@Base+0x9c8>
   1baf0:	mov	r0, r2
   1baf4:	b	1bba4 <flatcc_json_parser_generic_json@@Base+0xaa8>
   1baf8:	ldrb	r3, [r6]
   1bafc:	cmp	r3, #57	; 0x39
   1bb00:	bhi	1bbe4 <flatcc_json_parser_generic_json@@Base+0xae8>
   1bb04:	cmp	r3, #48	; 0x30
   1bb08:	bcs	1bb1c <flatcc_json_parser_generic_json@@Base+0xa20>
   1bb0c:	cmp	r3, #34	; 0x22
   1bb10:	beq	1b3ac <flatcc_json_parser_generic_json@@Base+0x2b0>
   1bb14:	cmp	r3, #45	; 0x2d
   1bb18:	bne	1b388 <flatcc_json_parser_generic_json@@Base+0x28c>
   1bb1c:	cmp	r4, r6
   1bb20:	moveq	r0, r6
   1bb24:	beq	1b3a0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   1bb28:	cmp	r3, #45	; 0x2d
   1bb2c:	beq	1b438 <flatcc_json_parser_generic_json@@Base+0x33c>
   1bb30:	ldrb	r3, [r6]
   1bb34:	cmp	r3, #48	; 0x30
   1bb38:	beq	1b45c <flatcc_json_parser_generic_json@@Base+0x360>
   1bb3c:	sub	r3, r3, #49	; 0x31
   1bb40:	uxtb	r3, r3
   1bb44:	cmp	r3, #8
   1bb48:	bhi	1b46c <flatcc_json_parser_generic_json@@Base+0x370>
   1bb4c:	add	r0, r6, #1
   1bb50:	cmp	r4, r0
   1bb54:	beq	1bac4 <flatcc_json_parser_generic_json@@Base+0x9c8>
   1bb58:	ldrb	r3, [r6, #1]
   1bb5c:	sub	r3, r3, #48	; 0x30
   1bb60:	uxtb	r3, r3
   1bb64:	cmp	r3, #9
   1bb68:	bhi	1bb98 <flatcc_json_parser_generic_json@@Base+0xa9c>
   1bb6c:	add	r6, r6, #2
   1bb70:	mov	r2, r4
   1bb74:	mov	r0, r6
   1bb78:	cmp	r6, r2
   1bb7c:	beq	1bac4 <flatcc_json_parser_generic_json@@Base+0x9c8>
   1bb80:	add	r6, r6, #1
   1bb84:	ldrb	r3, [r0]
   1bb88:	sub	r3, r3, #48	; 0x30
   1bb8c:	uxtb	r3, r3
   1bb90:	cmp	r3, #9
   1bb94:	bls	1bb74 <flatcc_json_parser_generic_json@@Base+0xa78>
   1bb98:	ldrb	r3, [r0]
   1bb9c:	cmp	r3, #46	; 0x2e
   1bba0:	beq	1b484 <flatcc_json_parser_generic_json@@Base+0x388>
   1bba4:	ldrb	r3, [r0]
   1bba8:	and	r3, r3, #223	; 0xdf
   1bbac:	cmp	r3, #69	; 0x45
   1bbb0:	beq	1b500 <flatcc_json_parser_generic_json@@Base+0x404>
   1bbb4:	ldrb	r3, [r0]
   1bbb8:	cmp	r3, #32
   1bbbc:	beq	1b3a0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   1bbc0:	bls	1baac <flatcc_json_parser_generic_json@@Base+0x9b0>
   1bbc4:	cmp	r3, #58	; 0x3a
   1bbc8:	beq	1b3a0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   1bbcc:	bls	1badc <flatcc_json_parser_generic_json@@Base+0x9e0>
   1bbd0:	cmp	r3, #93	; 0x5d
   1bbd4:	beq	1b3a0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   1bbd8:	cmp	r3, #125	; 0x7d
   1bbdc:	bne	1bac4 <flatcc_json_parser_generic_json@@Base+0x9c8>
   1bbe0:	b	1b3a0 <flatcc_json_parser_generic_json@@Base+0x2a4>
   1bbe4:	cmp	r3, #91	; 0x5b
   1bbe8:	beq	1b5c0 <flatcc_json_parser_generic_json@@Base+0x4c4>
   1bbec:	cmp	r3, #123	; 0x7b
   1bbf0:	beq	1b958 <flatcc_json_parser_generic_json@@Base+0x85c>
   1bbf4:	b	1b388 <flatcc_json_parser_generic_json@@Base+0x28c>
   1bbf8:	mov	r0, r6
   1bbfc:	b	1b214 <flatcc_json_parser_generic_json@@Base+0x118>

0001bc00 <flatcc_json_parser_unmatched_symbol@@Base>:
   1bc00:	strd	r4, [sp, #-16]!
   1bc04:	str	r6, [sp, #8]
   1bc08:	str	lr, [sp, #12]
   1bc0c:	mov	r5, r0
   1bc10:	mov	r4, r2
   1bc14:	ldr	r3, [r0, #8]
   1bc18:	tst	r3, #1
   1bc1c:	beq	1be1c <flatcc_json_parser_unmatched_symbol@@Base+0x21c>
   1bc20:	ldr	r3, [r0, #12]
   1bc24:	cmp	r3, #0
   1bc28:	bne	1bc48 <flatcc_json_parser_unmatched_symbol@@Base+0x48>
   1bc2c:	cmp	r1, r2
   1bc30:	beq	1be28 <flatcc_json_parser_unmatched_symbol@@Base+0x228>
   1bc34:	ldrb	r3, [r1]
   1bc38:	cmp	r3, #34	; 0x22
   1bc3c:	bne	1bd64 <flatcc_json_parser_unmatched_symbol@@Base+0x164>
   1bc40:	add	r1, r1, #1
   1bc44:	b	1bcc0 <flatcc_json_parser_unmatched_symbol@@Base+0xc0>
   1bc48:	cmp	r1, r2
   1bc4c:	beq	1bdbc <flatcc_json_parser_unmatched_symbol@@Base+0x1bc>
   1bc50:	ldrb	r3, [r1]
   1bc54:	cmp	r3, #32
   1bc58:	bls	1bcc0 <flatcc_json_parser_unmatched_symbol@@Base+0xc0>
   1bc5c:	mov	r2, r1
   1bc60:	b	1bc84 <flatcc_json_parser_unmatched_symbol@@Base+0x84>
   1bc64:	add	r1, r2, #1
   1bc68:	cmp	r4, r1
   1bc6c:	beq	1bd28 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   1bc70:	ldrb	r0, [r1]
   1bc74:	add	r2, r2, #1
   1bc78:	cmp	r0, #32
   1bc7c:	bls	1bd28 <flatcc_json_parser_unmatched_symbol@@Base+0x128>
   1bc80:	mov	r3, r0
   1bc84:	mov	r1, r2
   1bc88:	cmp	r3, #46	; 0x2e
   1bc8c:	cmpne	r3, #95	; 0x5f
   1bc90:	beq	1bc64 <flatcc_json_parser_unmatched_symbol@@Base+0x64>
   1bc94:	tst	r3, #128	; 0x80
   1bc98:	bne	1bc64 <flatcc_json_parser_unmatched_symbol@@Base+0x64>
   1bc9c:	sub	r0, r3, #48	; 0x30
   1bca0:	uxtb	r0, r0
   1bca4:	cmp	r0, #9
   1bca8:	bls	1bc64 <flatcc_json_parser_unmatched_symbol@@Base+0x64>
   1bcac:	orr	r0, r3, #32
   1bcb0:	sub	r0, r0, #97	; 0x61
   1bcb4:	uxtb	r0, r0
   1bcb8:	cmp	r0, #25
   1bcbc:	bls	1bd20 <flatcc_json_parser_unmatched_symbol@@Base+0x120>
   1bcc0:	sub	r3, r4, r1
   1bcc4:	cmp	r3, #1
   1bcc8:	ble	1bcdc <flatcc_json_parser_unmatched_symbol@@Base+0xdc>
   1bccc:	ldrb	r3, [r1]
   1bcd0:	cmp	r3, #32
   1bcd4:	bhi	1bcec <flatcc_json_parser_unmatched_symbol@@Base+0xec>
   1bcd8:	beq	1bda8 <flatcc_json_parser_unmatched_symbol@@Base+0x1a8>
   1bcdc:	mov	r2, r4
   1bce0:	mov	r0, r5
   1bce4:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1bce8:	mov	r1, r0
   1bcec:	cmp	r4, r1
   1bcf0:	beq	1bd00 <flatcc_json_parser_unmatched_symbol@@Base+0x100>
   1bcf4:	ldrb	r3, [r1]
   1bcf8:	cmp	r3, #58	; 0x3a
   1bcfc:	beq	1bdc4 <flatcc_json_parser_unmatched_symbol@@Base+0x1c4>
   1bd00:	mov	r3, #4
   1bd04:	mov	r2, r4
   1bd08:	mov	r0, r5
   1bd0c:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1bd10:	ldrd	r4, [sp]
   1bd14:	ldr	r6, [sp, #8]
   1bd18:	add	sp, sp, #12
   1bd1c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd20:	add	r1, r2, #1
   1bd24:	b	1bc68 <flatcc_json_parser_unmatched_symbol@@Base+0x68>
   1bd28:	cmp	r3, #46	; 0x2e
   1bd2c:	bne	1bcc0 <flatcc_json_parser_unmatched_symbol@@Base+0xc0>
   1bd30:	mov	r3, #5
   1bd34:	mov	r2, r4
   1bd38:	mov	r0, r5
   1bd3c:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1bd40:	mov	r1, r0
   1bd44:	b	1bcc0 <flatcc_json_parser_unmatched_symbol@@Base+0xc0>
   1bd48:	add	r3, r1, #1
   1bd4c:	add	r1, r3, #1
   1bd50:	cmp	r4, r1
   1bd54:	beq	1bd90 <flatcc_json_parser_unmatched_symbol@@Base+0x190>
   1bd58:	ldrb	r3, [r3, #1]
   1bd5c:	cmp	r3, #34	; 0x22
   1bd60:	beq	1bd84 <flatcc_json_parser_unmatched_symbol@@Base+0x184>
   1bd64:	cmp	r3, #92	; 0x5c
   1bd68:	movne	r3, r1
   1bd6c:	bne	1bd4c <flatcc_json_parser_unmatched_symbol@@Base+0x14c>
   1bd70:	sub	r3, r4, r1
   1bd74:	cmp	r3, #1
   1bd78:	bgt	1bd48 <flatcc_json_parser_unmatched_symbol@@Base+0x148>
   1bd7c:	cmp	r4, r1
   1bd80:	beq	1bd90 <flatcc_json_parser_unmatched_symbol@@Base+0x190>
   1bd84:	ldrb	r3, [r1]
   1bd88:	cmp	r3, #34	; 0x22
   1bd8c:	beq	1bc40 <flatcc_json_parser_unmatched_symbol@@Base+0x40>
   1bd90:	mov	r3, #20
   1bd94:	mov	r2, r4
   1bd98:	mov	r0, r5
   1bd9c:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1bda0:	mov	r1, r0
   1bda4:	b	1bcc0 <flatcc_json_parser_unmatched_symbol@@Base+0xc0>
   1bda8:	ldrb	r3, [r1, #1]
   1bdac:	cmp	r3, #32
   1bdb0:	addhi	r1, r1, #1
   1bdb4:	bls	1bcdc <flatcc_json_parser_unmatched_symbol@@Base+0xdc>
   1bdb8:	b	1bcec <flatcc_json_parser_unmatched_symbol@@Base+0xec>
   1bdbc:	mov	r1, r2
   1bdc0:	b	1bcdc <flatcc_json_parser_unmatched_symbol@@Base+0xdc>
   1bdc4:	add	r0, r1, #1
   1bdc8:	sub	r3, r4, r0
   1bdcc:	cmp	r3, #1
   1bdd0:	ble	1bde4 <flatcc_json_parser_unmatched_symbol@@Base+0x1e4>
   1bdd4:	ldrb	r3, [r1, #1]
   1bdd8:	cmp	r3, #32
   1bddc:	bhi	1bdf4 <flatcc_json_parser_unmatched_symbol@@Base+0x1f4>
   1bde0:	beq	1be08 <flatcc_json_parser_unmatched_symbol@@Base+0x208>
   1bde4:	mov	r2, r4
   1bde8:	mov	r1, r0
   1bdec:	mov	r0, r5
   1bdf0:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1bdf4:	mov	r2, r4
   1bdf8:	mov	r1, r0
   1bdfc:	mov	r0, r5
   1be00:	bl	1b0fc <flatcc_json_parser_generic_json@@Base>
   1be04:	b	1bd10 <flatcc_json_parser_unmatched_symbol@@Base+0x110>
   1be08:	ldrb	r3, [r1, #2]
   1be0c:	cmp	r3, #32
   1be10:	addhi	r0, r1, #2
   1be14:	bls	1bde4 <flatcc_json_parser_unmatched_symbol@@Base+0x1e4>
   1be18:	b	1bdf4 <flatcc_json_parser_unmatched_symbol@@Base+0x1f4>
   1be1c:	mov	r3, #13
   1be20:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1be24:	b	1bd10 <flatcc_json_parser_unmatched_symbol@@Base+0x110>
   1be28:	mov	r1, r2
   1be2c:	b	1bd90 <flatcc_json_parser_unmatched_symbol@@Base+0x190>

0001be30 <flatcc_json_parser_integer@@Base>:
   1be30:	cmp	r1, r2
   1be34:	beq	1bf3c <flatcc_json_parser_integer@@Base+0x10c>
   1be38:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1be3c:	strd	r6, [sp, #8]
   1be40:	strd	r8, [sp, #16]
   1be44:	strd	sl, [sp, #24]
   1be48:	str	lr, [sp, #32]
   1be4c:	sub	sp, sp, #12
   1be50:	mov	r8, r0
   1be54:	ldrb	lr, [r1]
   1be58:	cmp	lr, #45	; 0x2d
   1be5c:	movne	lr, #0
   1be60:	moveq	lr, #1
   1be64:	str	lr, [r3]
   1be68:	add	r0, r1, lr
   1be6c:	cmp	r2, r0
   1be70:	beq	1bf94 <flatcc_json_parser_integer@@Base+0x164>
   1be74:	mov	ip, r1
   1be78:	str	r8, [sp, #4]
   1be7c:	ldrb	r8, [r1, lr]
   1be80:	sub	r3, r8, #48	; 0x30
   1be84:	uxtb	r3, r3
   1be88:	cmp	r3, #9
   1be8c:	bhi	1bf4c <flatcc_json_parser_integer@@Base+0x11c>
   1be90:	uxtb	r8, r8
   1be94:	mov	r9, #0
   1be98:	subs	r4, r8, #48	; 0x30
   1be9c:	sbc	r5, r9, #0
   1bea0:	add	lr, r0, #1
   1bea4:	mov	sl, r2
   1bea8:	mov	r0, lr
   1beac:	cmp	lr, sl
   1beb0:	beq	1bf9c <flatcc_json_parser_integer@@Base+0x16c>
   1beb4:	ldrb	r8, [lr], #1
   1beb8:	sub	r3, r8, #48	; 0x30
   1bebc:	uxtb	r3, r3
   1bec0:	cmp	r3, #9
   1bec4:	bhi	1bf54 <flatcc_json_parser_integer@@Base+0x124>
   1bec8:	lsl	fp, r5, #2
   1becc:	lsl	r3, r4, #2
   1bed0:	orr	r9, fp, r4, lsr #30
   1bed4:	adds	r3, r3, r4
   1bed8:	adc	r9, r9, r5
   1bedc:	adds	r3, r3, r3
   1bee0:	adc	r9, r9, r9
   1bee4:	subs	r3, r3, #48	; 0x30
   1bee8:	sbc	fp, r9, #0
   1beec:	uxtb	r8, r8
   1bef0:	mov	r9, #0
   1bef4:	adds	r6, r8, r3
   1bef8:	adc	r7, r9, fp
   1befc:	cmp	r7, r5
   1bf00:	cmpeq	r6, r4
   1bf04:	bcc	1bf14 <flatcc_json_parser_integer@@Base+0xe4>
   1bf08:	mov	r4, r6
   1bf0c:	mov	r5, r7
   1bf10:	b	1bea8 <flatcc_json_parser_integer@@Base+0x78>
   1bf14:	mov	r3, #8
   1bf18:	mov	r1, r0
   1bf1c:	ldr	r0, [sp, #4]
   1bf20:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1bf24:	b	1bf78 <flatcc_json_parser_integer@@Base+0x148>
   1bf28:	mov	r3, #12
   1bf2c:	mov	r1, r0
   1bf30:	ldr	r0, [sp, #4]
   1bf34:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1bf38:	b	1bf78 <flatcc_json_parser_integer@@Base+0x148>
   1bf3c:	mov	r0, r2
   1bf40:	bx	lr
   1bf44:	mov	r0, ip
   1bf48:	b	1bf78 <flatcc_json_parser_integer@@Base+0x148>
   1bf4c:	mov	r4, #0
   1bf50:	mov	r5, #0
   1bf54:	cmp	r0, ip
   1bf58:	beq	1bf44 <flatcc_json_parser_integer@@Base+0x114>
   1bf5c:	ldrb	r3, [r0]
   1bf60:	and	r1, r3, #223	; 0xdf
   1bf64:	cmp	r3, #46	; 0x2e
   1bf68:	cmpne	r1, #69	; 0x45
   1bf6c:	beq	1bf28 <flatcc_json_parser_integer@@Base+0xf8>
   1bf70:	ldr	r3, [sp, #48]	; 0x30
   1bf74:	strd	r4, [r3]
   1bf78:	add	sp, sp, #12
   1bf7c:	ldrd	r4, [sp]
   1bf80:	ldrd	r6, [sp, #8]
   1bf84:	ldrd	r8, [sp, #16]
   1bf88:	ldrd	sl, [sp, #24]
   1bf8c:	add	sp, sp, #32
   1bf90:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf94:	mov	r4, #0
   1bf98:	mov	r5, #0
   1bf9c:	cmp	r1, r0
   1bfa0:	bne	1bf70 <flatcc_json_parser_integer@@Base+0x140>
   1bfa4:	b	1bf78 <flatcc_json_parser_integer@@Base+0x148>

0001bfa8 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   1bfa8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bfac:	strd	r6, [sp, #8]
   1bfb0:	strd	r8, [sp, #16]
   1bfb4:	strd	sl, [sp, #24]
   1bfb8:	str	lr, [sp, #32]
   1bfbc:	sub	sp, sp, #28
   1bfc0:	mov	r7, r0
   1bfc4:	mov	r6, r2
   1bfc8:	mov	r8, r3
   1bfcc:	cmp	r1, r2
   1bfd0:	beq	1bfe4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c>
   1bfd4:	ldrb	r3, [r1]
   1bfd8:	cmp	r3, #34	; 0x22
   1bfdc:	addeq	r4, r1, #1
   1bfe0:	beq	1bff8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x50>
   1bfe4:	mov	r3, #16
   1bfe8:	mov	r2, r6
   1bfec:	mov	r0, r7
   1bff0:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1bff4:	mov	r4, r0
   1bff8:	mov	r2, r6
   1bffc:	mov	r1, r4
   1c000:	mov	r0, r7
   1c004:	bl	19e24 <flatcc_json_parser_string_part@@Base>
   1c008:	mov	r5, r0
   1c00c:	cmp	r6, r0
   1c010:	beq	1c020 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x78>
   1c014:	ldrb	r3, [r0]
   1c018:	cmp	r3, #34	; 0x22
   1c01c:	beq	1c064 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xbc>
   1c020:	mov	r3, #0
   1c024:	str	r3, [r8]
   1c028:	ldr	r3, [sp, #64]	; 0x40
   1c02c:	cmp	r3, #0
   1c030:	movne	r3, #32
   1c034:	moveq	r3, #31
   1c038:	mov	r2, r6
   1c03c:	mov	r1, r5
   1c040:	mov	r0, r7
   1c044:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1c048:	add	sp, sp, #28
   1c04c:	ldrd	r4, [sp]
   1c050:	ldrd	r6, [sp, #8]
   1c054:	ldrd	r8, [sp, #16]
   1c058:	ldrd	sl, [sp, #24]
   1c05c:	add	sp, sp, #32
   1c060:	pop	{pc}		; (ldr pc, [sp], #4)
   1c064:	sub	sl, r0, r4
   1c068:	and	r3, sl, #3
   1c06c:	lsr	r9, sl, #2
   1c070:	add	r9, r9, r9, lsl #1
   1c074:	cmp	r3, #2
   1c078:	addeq	r9, r9, #1
   1c07c:	beq	1c088 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xe0>
   1c080:	cmp	r3, #3
   1c084:	addeq	r9, r9, #2
   1c088:	mvn	r3, #0
   1c08c:	mov	r2, #1
   1c090:	mov	r1, r2
   1c094:	ldr	r0, [r7]
   1c098:	bl	15c68 <flatcc_builder_start_vector@@Base>
   1c09c:	cmp	r0, #0
   1c0a0:	beq	1c0c4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x11c>
   1c0a4:	mov	r3, #0
   1c0a8:	str	r3, [r8]
   1c0ac:	mov	r3, #33	; 0x21
   1c0b0:	mov	r2, r6
   1c0b4:	mov	r1, r5
   1c0b8:	mov	r0, r7
   1c0bc:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1c0c0:	b	1c048 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xa0>
   1c0c4:	mov	r1, r9
   1c0c8:	ldr	r0, [r7]
   1c0cc:	bl	1535c <flatcc_builder_extend_vector@@Base>
   1c0d0:	subs	r3, r0, #0
   1c0d4:	str	r3, [sp]
   1c0d8:	beq	1c0a4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xfc>
   1c0dc:	ldr	r3, [sp, #64]	; 0x40
   1c0e0:	adds	r3, r3, #0
   1c0e4:	movne	r3, #1
   1c0e8:	cmp	r3, #0
   1c0ec:	beq	1c108 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x160>
   1c0f0:	cmp	r3, #1
   1c0f4:	ldreq	r0, [pc, #708]	; 1c3c0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x418>
   1c0f8:	beq	1c10c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x164>
   1c0fc:	mov	r5, #0
   1c100:	add	r5, r4, r5
   1c104:	b	1c020 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x78>
   1c108:	ldr	r0, [pc, #692]	; 1c3c4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x41c>
   1c10c:	cmp	r9, #0
   1c110:	movne	fp, r9
   1c114:	mvneq	fp, #0
   1c118:	str	sl, [sp, #8]
   1c11c:	mov	ip, r4
   1c120:	ldr	r3, [sp]
   1c124:	str	r3, [sp, #4]
   1c128:	add	fp, r3, fp
   1c12c:	ldr	r3, [sp, #4]
   1c130:	sub	r3, fp, r3
   1c134:	str	r3, [sp, #12]
   1c138:	ldr	r1, [sp, #8]
   1c13c:	cmp	r1, #0
   1c140:	beq	1c14c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1a4>
   1c144:	mov	r3, #0
   1c148:	b	1c18c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e4>
   1c14c:	ldr	r1, [sp, #8]
   1c150:	cmp	r1, #2
   1c154:	beq	1c2c4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x31c>
   1c158:	cmp	r1, #3
   1c15c:	beq	1c364 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3bc>
   1c160:	cmp	r1, #0
   1c164:	bne	1c1d8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
   1c168:	b	1c300 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x358>
   1c16c:	add	ip, ip, #1
   1c170:	sub	r1, r1, #1
   1c174:	sub	r3, r3, #1
   1c178:	add	r3, r3, #1
   1c17c:	cmp	r3, #3
   1c180:	bhi	1c25c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2b4>
   1c184:	cmp	r3, r1
   1c188:	beq	1c150 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1a8>
   1c18c:	ldrb	r2, [ip, r3]
   1c190:	ldrb	r2, [r0, r2]
   1c194:	add	lr, sp, #24
   1c198:	add	lr, lr, r3
   1c19c:	strb	r2, [lr, #-4]
   1c1a0:	cmp	r2, #63	; 0x3f
   1c1a4:	bls	1c178 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d0>
   1c1a8:	cmp	r2, #65	; 0x41
   1c1ac:	beq	1c16c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c4>
   1c1b0:	cmp	r2, #66	; 0x42
   1c1b4:	movne	r2, r3
   1c1b8:	beq	1c1e4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x23c>
   1c1bc:	sub	r2, r1, r2
   1c1c0:	cmp	r3, #2
   1c1c4:	beq	1c2c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x320>
   1c1c8:	cmp	r3, #3
   1c1cc:	beq	1c368 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x3c0>
   1c1d0:	cmp	r3, #0
   1c1d4:	beq	1c2f0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x348>
   1c1d8:	ldr	r3, [sp, #8]
   1c1dc:	sub	r5, sl, r3
   1c1e0:	b	1c100 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x158>
   1c1e4:	add	r2, r3, #1
   1c1e8:	cmp	r2, #7
   1c1ec:	movhi	lr, #0
   1c1f0:	movls	lr, #1
   1c1f4:	cmp	r1, r2
   1c1f8:	movls	lr, #0
   1c1fc:	cmp	lr, #0
   1c200:	beq	1c1bc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x214>
   1c204:	add	lr, ip, r2
   1c208:	ldrb	ip, [ip, r2]
   1c20c:	ldrb	ip, [r0, ip]
   1c210:	sub	ip, ip, #65	; 0x41
   1c214:	uxtb	ip, ip
   1c218:	cmp	ip, #1
   1c21c:	bhi	1c1bc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x214>
   1c220:	add	r2, r2, #1
   1c224:	cmp	r1, r2
   1c228:	movls	ip, #0
   1c22c:	movhi	ip, #1
   1c230:	cmp	r2, #7
   1c234:	movhi	ip, #0
   1c238:	cmp	ip, #0
   1c23c:	beq	1c1bc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x214>
   1c240:	ldrb	ip, [lr, #1]!
   1c244:	ldrb	ip, [r0, ip]
   1c248:	sub	ip, ip, #65	; 0x41
   1c24c:	uxtb	ip, ip
   1c250:	cmp	ip, #1
   1c254:	bls	1c220 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x278>
   1c258:	b	1c1bc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x214>
   1c25c:	ldr	r3, [sp, #12]
   1c260:	cmp	r3, #2
   1c264:	bls	1c3b4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40c>
   1c268:	ldrb	lr, [sp, #21]
   1c26c:	ldrb	r2, [sp, #20]
   1c270:	lsr	r3, lr, #4
   1c274:	orr	r3, r3, r2, lsl #2
   1c278:	ldr	r2, [sp, #4]
   1c27c:	strb	r3, [r2]
   1c280:	ldrb	r2, [sp, #22]
   1c284:	lsr	r3, r2, #2
   1c288:	orr	r3, r3, lr, lsl #4
   1c28c:	ldr	lr, [sp, #4]
   1c290:	strb	r3, [lr, #1]
   1c294:	ldrb	r3, [sp, #23]
   1c298:	orr	r3, r3, r2, lsl #6
   1c29c:	strb	r3, [lr, #2]
   1c2a0:	add	r3, lr, #3
   1c2a4:	str	r3, [sp, #4]
   1c2a8:	add	ip, ip, #4
   1c2ac:	sub	r2, r1, #4
   1c2b0:	str	r2, [sp, #8]
   1c2b4:	cmp	r3, fp
   1c2b8:	bne	1c12c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x184>
   1c2bc:	ldr	r2, [sp, #8]
   1c2c0:	b	1c2f0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x348>
   1c2c4:	mov	r2, #0
   1c2c8:	ldrb	r3, [sp, #21]
   1c2cc:	lsl	r1, r3, #4
   1c2d0:	tst	r1, #255	; 0xff
   1c2d4:	bne	1c3b4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40c>
   1c2d8:	ldrb	r1, [sp, #20]
   1c2dc:	lsr	r3, r3, #4
   1c2e0:	orr	r3, r3, r1, lsl #2
   1c2e4:	ldr	r1, [sp, #4]
   1c2e8:	strb	r3, [r1], #1
   1c2ec:	str	r1, [sp, #4]
   1c2f0:	sub	r2, sl, r2
   1c2f4:	cmp	sl, r2
   1c2f8:	addne	r5, r4, r2
   1c2fc:	bne	1c020 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x78>
   1c300:	ldr	r3, [sp, #4]
   1c304:	ldr	r2, [sp]
   1c308:	sub	r1, r3, r2
   1c30c:	cmp	r9, r1
   1c310:	bls	1c328 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x380>
   1c314:	sub	r1, r9, r1
   1c318:	ldr	r0, [r7]
   1c31c:	bl	15a90 <flatcc_builder_truncate_vector@@Base>
   1c320:	cmp	r0, #0
   1c324:	bne	1c0a4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xfc>
   1c328:	ldr	r0, [r7]
   1c32c:	bl	16d6c <flatcc_builder_end_vector@@Base>
   1c330:	str	r0, [r8]
   1c334:	cmp	r0, #0
   1c338:	beq	1c0a4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xfc>
   1c33c:	ldrb	r3, [r5]
   1c340:	cmp	r3, #34	; 0x22
   1c344:	addeq	r0, r5, #1
   1c348:	beq	1c048 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xa0>
   1c34c:	mov	r3, #20
   1c350:	mov	r2, r6
   1c354:	mov	r1, r5
   1c358:	mov	r0, r7
   1c35c:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1c360:	b	1c048 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xa0>
   1c364:	mov	r2, #0
   1c368:	ldrb	r3, [sp, #22]
   1c36c:	lsl	r1, r3, #6
   1c370:	tst	r1, #255	; 0xff
   1c374:	bne	1c3b4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40c>
   1c378:	ldr	r1, [sp, #12]
   1c37c:	cmp	r1, #1
   1c380:	bls	1c3b4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40c>
   1c384:	ldrb	r0, [sp, #21]
   1c388:	ldrb	ip, [sp, #20]
   1c38c:	lsr	r1, r0, #4
   1c390:	orr	r1, r1, ip, lsl #2
   1c394:	ldr	ip, [sp, #4]
   1c398:	strb	r1, [ip]
   1c39c:	lsr	r3, r3, #2
   1c3a0:	orr	r3, r3, r0, lsl #4
   1c3a4:	strb	r3, [ip, #1]
   1c3a8:	add	r3, ip, #2
   1c3ac:	str	r3, [sp, #4]
   1c3b0:	b	1c2f0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x348>
   1c3b4:	ldr	r3, [sp, #8]
   1c3b8:	sub	r5, sl, r3
   1c3bc:	b	1c100 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x158>
   1c3c0:	andeq	lr, r1, r8, lsr ip
   1c3c4:	andeq	lr, r1, r8, lsr fp

0001c3c8 <flatcc_json_parser_build_string@@Base>:
   1c3c8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c3cc:	strd	r6, [sp, #8]
   1c3d0:	str	r8, [sp, #16]
   1c3d4:	str	lr, [sp, #20]
   1c3d8:	sub	sp, sp, #8
   1c3dc:	mov	r5, r0
   1c3e0:	mov	r6, r2
   1c3e4:	mov	r8, r3
   1c3e8:	cmp	r1, r2
   1c3ec:	beq	1c400 <flatcc_json_parser_build_string@@Base+0x38>
   1c3f0:	ldrb	r3, [r1]
   1c3f4:	cmp	r3, #34	; 0x22
   1c3f8:	addeq	r7, r1, #1
   1c3fc:	beq	1c414 <flatcc_json_parser_build_string@@Base+0x4c>
   1c400:	mov	r3, #16
   1c404:	mov	r2, r6
   1c408:	mov	r0, r5
   1c40c:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1c410:	mov	r7, r0
   1c414:	mov	r2, r6
   1c418:	mov	r1, r7
   1c41c:	mov	r0, r5
   1c420:	bl	19e24 <flatcc_json_parser_string_part@@Base>
   1c424:	mov	r4, r0
   1c428:	cmp	r6, r0
   1c42c:	beq	1c43c <flatcc_json_parser_build_string@@Base+0x74>
   1c430:	ldrb	r3, [r0]
   1c434:	cmp	r3, #34	; 0x22
   1c438:	beq	1c470 <flatcc_json_parser_build_string@@Base+0xa8>
   1c43c:	ldr	r0, [r5]
   1c440:	bl	15d8c <flatcc_builder_start_string@@Base>
   1c444:	cmp	r0, #0
   1c448:	beq	1c4b0 <flatcc_json_parser_build_string@@Base+0xe8>
   1c44c:	mov	r3, #0
   1c450:	str	r3, [r8]
   1c454:	mov	r0, r4
   1c458:	add	sp, sp, #8
   1c45c:	ldrd	r4, [sp]
   1c460:	ldrd	r6, [sp, #8]
   1c464:	ldr	r8, [sp, #16]
   1c468:	add	sp, sp, #20
   1c46c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c470:	sub	r2, r0, r7
   1c474:	mov	r1, r7
   1c478:	ldr	r0, [r5]
   1c47c:	bl	1785c <flatcc_builder_create_string@@Base>
   1c480:	str	r0, [r8]
   1c484:	ldrb	r3, [r4]
   1c488:	cmp	r3, #34	; 0x22
   1c48c:	addeq	r4, r4, #1
   1c490:	beq	1c454 <flatcc_json_parser_build_string@@Base+0x8c>
   1c494:	mov	r3, #20
   1c498:	mov	r2, r6
   1c49c:	mov	r1, r4
   1c4a0:	mov	r0, r5
   1c4a4:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1c4a8:	mov	r4, r0
   1c4ac:	b	1c454 <flatcc_json_parser_build_string@@Base+0x8c>
   1c4b0:	sub	r2, r4, r7
   1c4b4:	mov	r1, r7
   1c4b8:	ldr	r0, [r5]
   1c4bc:	bl	15924 <flatcc_builder_append_string@@Base>
   1c4c0:	cmp	r0, #0
   1c4c4:	beq	1c44c <flatcc_json_parser_build_string@@Base+0x84>
   1c4c8:	cmp	r6, r4
   1c4cc:	beq	1c568 <flatcc_json_parser_build_string@@Base+0x1a0>
   1c4d0:	ldrb	r3, [r4]
   1c4d4:	cmp	r3, #34	; 0x22
   1c4d8:	bne	1c500 <flatcc_json_parser_build_string@@Base+0x138>
   1c4dc:	ldr	r0, [r5]
   1c4e0:	bl	17a00 <flatcc_builder_end_string@@Base>
   1c4e4:	str	r0, [r8]
   1c4e8:	b	1c484 <flatcc_json_parser_build_string@@Base+0xbc>
   1c4ec:	mov	r4, r7
   1c4f0:	b	1c44c <flatcc_json_parser_build_string@@Base+0x84>
   1c4f4:	ldrb	r3, [r4]
   1c4f8:	cmp	r3, #34	; 0x22
   1c4fc:	beq	1c4dc <flatcc_json_parser_build_string@@Base+0x114>
   1c500:	add	r3, sp, #4
   1c504:	mov	r2, r6
   1c508:	mov	r1, r4
   1c50c:	mov	r0, r5
   1c510:	bl	1a63c <flatcc_json_parser_string_escape@@Base>
   1c514:	mov	r7, r0
   1c518:	ldrb	r2, [sp, #4]
   1c51c:	add	r1, sp, #5
   1c520:	ldr	r0, [r5]
   1c524:	bl	15924 <flatcc_builder_append_string@@Base>
   1c528:	cmp	r0, #0
   1c52c:	beq	1c4ec <flatcc_json_parser_build_string@@Base+0x124>
   1c530:	mov	r2, r6
   1c534:	mov	r1, r7
   1c538:	mov	r0, r5
   1c53c:	bl	19e24 <flatcc_json_parser_string_part@@Base>
   1c540:	mov	r4, r0
   1c544:	cmp	r6, r0
   1c548:	beq	1c568 <flatcc_json_parser_build_string@@Base+0x1a0>
   1c54c:	sub	r2, r0, r7
   1c550:	mov	r1, r7
   1c554:	ldr	r0, [r5]
   1c558:	bl	15924 <flatcc_builder_append_string@@Base>
   1c55c:	cmp	r0, #0
   1c560:	bne	1c4f4 <flatcc_json_parser_build_string@@Base+0x12c>
   1c564:	b	1c44c <flatcc_json_parser_build_string@@Base+0x84>
   1c568:	ldr	r0, [r5]
   1c56c:	bl	17a00 <flatcc_builder_end_string@@Base>
   1c570:	str	r0, [r8]
   1c574:	b	1c494 <flatcc_json_parser_build_string@@Base+0xcc>

0001c578 <flatcc_json_parser_prepare_unions@@Base>:
   1c578:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c57c:	strd	r6, [sp, #8]
   1c580:	str	r8, [sp, #16]
   1c584:	str	lr, [sp, #20]
   1c588:	mov	r6, r0
   1c58c:	mov	r4, r1
   1c590:	mov	r7, r2
   1c594:	mov	r5, r3
   1c598:	add	r1, r3, r3, lsl #1
   1c59c:	lsl	r1, r1, #3
   1c5a0:	add	r1, r1, #8
   1c5a4:	ldr	r0, [r0]
   1c5a8:	bl	148f4 <flatcc_builder_enter_user_frame@@Base>
   1c5ac:	ldr	r3, [sp, #24]
   1c5b0:	str	r0, [r3]
   1c5b4:	cmp	r0, #0
   1c5b8:	beq	1c5e4 <flatcc_json_parser_prepare_unions@@Base+0x6c>
   1c5bc:	mov	r1, r0
   1c5c0:	ldr	r0, [r6]
   1c5c4:	bl	14a58 <flatcc_builder_get_user_frame_ptr@@Base>
   1c5c8:	str	r5, [r0]
   1c5cc:	mov	r0, r4
   1c5d0:	ldrd	r4, [sp]
   1c5d4:	ldrd	r6, [sp, #8]
   1c5d8:	ldr	r8, [sp, #16]
   1c5dc:	add	sp, sp, #20
   1c5e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c5e4:	mov	r3, #33	; 0x21
   1c5e8:	mov	r2, r7
   1c5ec:	mov	r1, r4
   1c5f0:	mov	r0, r6
   1c5f4:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1c5f8:	b	1c5d0 <flatcc_json_parser_prepare_unions@@Base+0x58>

0001c5fc <flatcc_json_parser_finalize_unions@@Base>:
   1c5fc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c600:	strd	r6, [sp, #8]
   1c604:	str	r8, [sp, #16]
   1c608:	str	lr, [sp, #20]
   1c60c:	mov	r4, r0
   1c610:	mov	r6, r1
   1c614:	mov	r7, r2
   1c618:	mov	r5, r3
   1c61c:	mov	r1, r3
   1c620:	ldr	r0, [r0]
   1c624:	bl	14a58 <flatcc_builder_get_user_frame_ptr@@Base>
   1c628:	ldr	r3, [r0, #4]
   1c62c:	cmp	r3, #0
   1c630:	bne	1c658 <flatcc_json_parser_finalize_unions@@Base+0x5c>
   1c634:	mov	r1, r5
   1c638:	ldr	r0, [r4]
   1c63c:	bl	14a08 <flatcc_builder_exit_user_frame_at@@Base>
   1c640:	mov	r0, r6
   1c644:	ldrd	r4, [sp]
   1c648:	ldrd	r6, [sp, #8]
   1c64c:	ldr	r8, [sp, #16]
   1c650:	add	sp, sp, #20
   1c654:	pop	{pc}		; (ldr pc, [sp], #4)
   1c658:	mov	r3, #27
   1c65c:	mov	r2, r7
   1c660:	mov	r1, r6
   1c664:	mov	r0, r4
   1c668:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1c66c:	mov	r6, r0
   1c670:	b	1c634 <flatcc_json_parser_finalize_unions@@Base+0x38>

0001c674 <flatcc_json_parser_union@@Base>:
   1c674:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c678:	strd	r6, [sp, #8]
   1c67c:	str	lr, [sp, #16]
   1c680:	sub	sp, sp, #20
   1c684:	mov	r5, r0
   1c688:	mov	r7, r1
   1c68c:	mov	r6, r2
   1c690:	mov	r4, r3
   1c694:	ldr	r1, [sp, #44]	; 0x2c
   1c698:	ldr	r0, [r0]
   1c69c:	bl	14a58 <flatcc_builder_get_user_frame_ptr@@Base>
   1c6a0:	add	r3, r4, r4, lsl #1
   1c6a4:	add	r3, r0, r3, lsl #3
   1c6a8:	ldr	r3, [r3, #8]
   1c6ac:	cmp	r3, #0
   1c6b0:	bne	1c74c <flatcc_json_parser_union@@Base+0xd8>
   1c6b4:	add	r3, r4, r4, lsl #1
   1c6b8:	add	r3, r0, r3, lsl #3
   1c6bc:	ldrb	r3, [r3, #20]
   1c6c0:	cmp	r3, #0
   1c6c4:	beq	1c77c <flatcc_json_parser_union@@Base+0x108>
   1c6c8:	add	r4, r4, r4, lsl #1
   1c6cc:	add	r4, r0, r4, lsl #3
   1c6d0:	ldrb	r3, [r4, #21]
   1c6d4:	strb	r3, [sp, #8]
   1c6d8:	cmp	r3, #0
   1c6dc:	beq	1c7c0 <flatcc_json_parser_union@@Base+0x14c>
   1c6e0:	ldr	r2, [r0, #4]
   1c6e4:	sub	r2, r2, #1
   1c6e8:	str	r2, [r0, #4]
   1c6ec:	add	r2, sp, #12
   1c6f0:	str	r2, [sp]
   1c6f4:	mov	r2, r6
   1c6f8:	mov	r1, r7
   1c6fc:	mov	r0, r5
   1c700:	ldr	r4, [sp, #48]	; 0x30
   1c704:	blx	r4
   1c708:	mov	r4, r0
   1c70c:	cmp	r6, r0
   1c710:	beq	1c764 <flatcc_json_parser_union@@Base+0xf0>
   1c714:	add	r3, sp, #16
   1c718:	ldmdb	r3, {r2, r3}
   1c71c:	ldrh	r1, [sp, #40]	; 0x28
   1c720:	ldr	r0, [r5]
   1c724:	bl	17e64 <flatcc_builder_table_add_union@@Base>
   1c728:	cmp	r0, #0
   1c72c:	beq	1c764 <flatcc_json_parser_union@@Base+0xf0>
   1c730:	mov	r3, #28
   1c734:	mov	r2, r6
   1c738:	mov	r1, r4
   1c73c:	mov	r0, r5
   1c740:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1c744:	mov	r4, r0
   1c748:	b	1c764 <flatcc_json_parser_union@@Base+0xf0>
   1c74c:	mov	r3, #28
   1c750:	mov	r2, r6
   1c754:	mov	r1, r7
   1c758:	mov	r0, r5
   1c75c:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1c760:	mov	r4, r0
   1c764:	mov	r0, r4
   1c768:	add	sp, sp, #20
   1c76c:	ldrd	r4, [sp]
   1c770:	ldrd	r6, [sp, #8]
   1c774:	add	sp, sp, #16
   1c778:	pop	{pc}		; (ldr pc, [sp], #4)
   1c77c:	ldr	r3, [r0, #4]
   1c780:	add	r3, r3, #1
   1c784:	str	r3, [r0, #4]
   1c788:	ldr	r1, [r5, #16]
   1c78c:	lsl	r3, r4, #1
   1c790:	add	r2, r3, r4
   1c794:	add	r2, r0, r2, lsl #3
   1c798:	str	r1, [r2, #16]
   1c79c:	ldr	r1, [r5, #4]
   1c7a0:	str	r1, [r2, #12]
   1c7a4:	str	r7, [r2, #8]
   1c7a8:	mov	r2, r6
   1c7ac:	mov	r1, r7
   1c7b0:	mov	r0, r5
   1c7b4:	bl	1b0fc <flatcc_json_parser_generic_json@@Base>
   1c7b8:	mov	r4, r0
   1c7bc:	b	1c764 <flatcc_json_parser_union@@Base+0xf0>
   1c7c0:	mov	r3, #25
   1c7c4:	mov	r2, r6
   1c7c8:	mov	r1, r7
   1c7cc:	mov	r0, r5
   1c7d0:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1c7d4:	mov	r4, r0
   1c7d8:	b	1c764 <flatcc_json_parser_union@@Base+0xf0>

0001c7dc <flatcc_json_parser_union_type@@Base>:
   1c7dc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c7e0:	strd	r6, [sp, #8]
   1c7e4:	strd	r8, [sp, #16]
   1c7e8:	strd	sl, [sp, #24]
   1c7ec:	str	lr, [sp, #32]
   1c7f0:	sub	sp, sp, #36	; 0x24
   1c7f4:	mov	r5, r0
   1c7f8:	mov	r7, r1
   1c7fc:	mov	r6, r2
   1c800:	mov	r4, r3
   1c804:	ldr	r1, [sp, #76]	; 0x4c
   1c808:	ldr	r0, [r0]
   1c80c:	bl	14a58 <flatcc_builder_get_user_frame_ptr@@Base>
   1c810:	add	r9, r0, #8
   1c814:	add	r4, r4, r4, lsl #1
   1c818:	lsl	r4, r4, #3
   1c81c:	add	sl, r9, r4
   1c820:	ldrb	r3, [sl, #12]
   1c824:	cmp	r3, #0
   1c828:	bne	1c8a4 <flatcc_json_parser_union_type@@Base+0xc8>
   1c82c:	mov	r8, r0
   1c830:	mov	r3, #1
   1c834:	strb	r3, [sl, #12]
   1c838:	mov	r2, #0
   1c83c:	mov	r3, #0
   1c840:	strd	r2, [sp, #16]
   1c844:	mov	r3, #0
   1c848:	str	r3, [sp, #12]
   1c84c:	strb	r3, [sl, #13]
   1c850:	cmp	r7, r6
   1c854:	beq	1ca14 <flatcc_json_parser_union_type@@Base+0x238>
   1c858:	add	r3, sp, #16
   1c85c:	str	r3, [sp]
   1c860:	add	r3, sp, #12
   1c864:	mov	r2, r6
   1c868:	mov	r1, r7
   1c86c:	mov	r0, r5
   1c870:	bl	1be30 <flatcc_json_parser_integer@@Base>
   1c874:	mov	fp, r0
   1c878:	cmp	r7, r0
   1c87c:	bne	1c8dc <flatcc_json_parser_union_type@@Base+0x100>
   1c880:	add	r3, sl, #13
   1c884:	str	r3, [sp]
   1c888:	ldr	r3, [sp, #80]	; 0x50
   1c88c:	mov	r2, r6
   1c890:	mov	r1, fp
   1c894:	mov	r0, r5
   1c898:	bl	1a024 <flatcc_json_parser_space_ext@@Base+0x14c>
   1c89c:	mov	fp, r0
   1c8a0:	b	1c938 <flatcc_json_parser_union_type@@Base+0x15c>
   1c8a4:	mov	r3, #28
   1c8a8:	mov	r2, r6
   1c8ac:	mov	r1, r7
   1c8b0:	mov	r0, r5
   1c8b4:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1c8b8:	mov	fp, r0
   1c8bc:	mov	r0, fp
   1c8c0:	add	sp, sp, #36	; 0x24
   1c8c4:	ldrd	r4, [sp]
   1c8c8:	ldrd	r6, [sp, #8]
   1c8cc:	ldrd	r8, [sp, #16]
   1c8d0:	ldrd	sl, [sp, #24]
   1c8d4:	add	sp, sp, #32
   1c8d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c8dc:	ldr	r3, [sp, #12]
   1c8e0:	cmp	r3, #0
   1c8e4:	bne	1c918 <flatcc_json_parser_union_type@@Base+0x13c>
   1c8e8:	ldrd	r2, [sp, #16]
   1c8ec:	cmp	r3, #0
   1c8f0:	cmpeq	r2, #255	; 0xff
   1c8f4:	strbls	r2, [sl, #13]
   1c8f8:	bls	1c938 <flatcc_json_parser_union_type@@Base+0x15c>
   1c8fc:	mov	r3, #7
   1c900:	mov	r2, r6
   1c904:	mov	r1, r0
   1c908:	mov	r0, r5
   1c90c:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1c910:	mov	fp, r0
   1c914:	b	1c930 <flatcc_json_parser_union_type@@Base+0x154>
   1c918:	mov	r3, #8
   1c91c:	mov	r2, r6
   1c920:	mov	r1, r0
   1c924:	mov	r0, r5
   1c928:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1c92c:	mov	fp, r0
   1c930:	cmp	r7, fp
   1c934:	beq	1c880 <flatcc_json_parser_union_type@@Base+0xa4>
   1c938:	ldr	r3, [r9, r4]
   1c93c:	cmp	r3, #0
   1c940:	beq	1c9e0 <flatcc_json_parser_union_type@@Base+0x204>
   1c944:	ldr	r3, [r8, #4]
   1c948:	cmp	r3, #0
   1c94c:	beq	1c9f8 <flatcc_json_parser_union_type@@Base+0x21c>
   1c950:	sub	r3, r3, #1
   1c954:	str	r3, [r8, #4]
   1c958:	ldr	r8, [r5, #16]
   1c95c:	ldr	r7, [r5, #4]
   1c960:	ldr	r3, [sl, #8]
   1c964:	str	r3, [r5, #16]
   1c968:	ldr	r3, [sl, #4]
   1c96c:	str	r3, [r5, #4]
   1c970:	ldrb	r3, [sl, #13]
   1c974:	strb	r3, [sp, #24]
   1c978:	ldr	r1, [r9, r4]
   1c97c:	add	r2, sp, #28
   1c980:	str	r2, [sp]
   1c984:	mov	r2, r6
   1c988:	mov	r0, r5
   1c98c:	ldr	r4, [sp, #84]	; 0x54
   1c990:	blx	r4
   1c994:	cmp	r6, r0
   1c998:	moveq	fp, r6
   1c99c:	beq	1c8bc <flatcc_json_parser_union_type@@Base+0xe0>
   1c9a0:	add	r3, sp, #32
   1c9a4:	ldmdb	r3, {r2, r3}
   1c9a8:	ldrh	r1, [sp, #72]	; 0x48
   1c9ac:	ldr	r0, [r5]
   1c9b0:	bl	17e64 <flatcc_builder_table_add_union@@Base>
   1c9b4:	cmp	r0, #0
   1c9b8:	streq	r8, [r5, #16]
   1c9bc:	streq	r7, [r5, #4]
   1c9c0:	beq	1c8bc <flatcc_json_parser_union_type@@Base+0xe0>
   1c9c4:	mov	r3, #28
   1c9c8:	mov	r2, r6
   1c9cc:	mov	r1, fp
   1c9d0:	mov	r0, r5
   1c9d4:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1c9d8:	mov	fp, r0
   1c9dc:	b	1c8bc <flatcc_json_parser_union_type@@Base+0xe0>
   1c9e0:	ldrb	r2, [sl, #13]
   1c9e4:	ldr	r3, [r8, #4]
   1c9e8:	cmp	r2, #0
   1c9ec:	addne	r3, r3, #1
   1c9f0:	str	r3, [r8, #4]
   1c9f4:	b	1c8bc <flatcc_json_parser_union_type@@Base+0xe0>
   1c9f8:	ldr	r3, [pc, #28]	; 1ca1c <flatcc_json_parser_union_type@@Base+0x240>
   1c9fc:	movw	r2, #965	; 0x3c5
   1ca00:	movw	r1, #61840	; 0xf190
   1ca04:	movt	r1, #1
   1ca08:	movw	r0, #61916	; 0xf1dc
   1ca0c:	movt	r0, #1
   1ca10:	bl	124b4 <__assert_fail@plt>
   1ca14:	mov	fp, r6
   1ca18:	b	1c880 <flatcc_json_parser_union_type@@Base+0xa4>
   1ca1c:	andeq	lr, r1, r8, lsr sp

0001ca20 <flatcc_json_parser_union_vector@@Base>:
   1ca20:	strd	r4, [sp, #-20]!	; 0xffffffec
   1ca24:	strd	r6, [sp, #8]
   1ca28:	str	lr, [sp, #16]
   1ca2c:	sub	sp, sp, #20
   1ca30:	mov	r5, r0
   1ca34:	mov	r6, r1
   1ca38:	mov	r7, r2
   1ca3c:	mov	r4, r3
   1ca40:	ldr	r1, [sp, #44]	; 0x2c
   1ca44:	ldr	r0, [r0]
   1ca48:	bl	14a58 <flatcc_builder_get_user_frame_ptr@@Base>
   1ca4c:	add	r2, r0, #8
   1ca50:	add	r4, r4, r4, lsl #1
   1ca54:	lsl	r3, r4, #3
   1ca58:	add	r1, r2, r3
   1ca5c:	ldr	ip, [r2, r3]
   1ca60:	cmp	ip, #0
   1ca64:	bne	1caa8 <flatcc_json_parser_union_vector@@Base+0x88>
   1ca68:	ldrb	ip, [r1, #12]
   1ca6c:	cmp	ip, #0
   1ca70:	bne	1cad0 <flatcc_json_parser_union_vector@@Base+0xb0>
   1ca74:	ldr	ip, [r0, #4]
   1ca78:	add	ip, ip, #1
   1ca7c:	str	ip, [r0, #4]
   1ca80:	ldr	r0, [r5, #16]
   1ca84:	str	r0, [r1, #8]
   1ca88:	ldr	r0, [r5, #4]
   1ca8c:	str	r0, [r1, #4]
   1ca90:	str	r6, [r2, r3]
   1ca94:	mov	r2, r7
   1ca98:	mov	r1, r6
   1ca9c:	mov	r0, r5
   1caa0:	bl	1b0fc <flatcc_json_parser_generic_json@@Base>
   1caa4:	b	1cabc <flatcc_json_parser_union_vector@@Base+0x9c>
   1caa8:	mov	r3, #28
   1caac:	mov	r2, r7
   1cab0:	mov	r1, r6
   1cab4:	mov	r0, r5
   1cab8:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1cabc:	add	sp, sp, #20
   1cac0:	ldrd	r4, [sp]
   1cac4:	ldrd	r6, [sp, #8]
   1cac8:	add	sp, sp, #16
   1cacc:	pop	{pc}		; (ldr pc, [sp], #4)
   1cad0:	ldr	r3, [r0, #4]
   1cad4:	sub	r3, r3, #1
   1cad8:	str	r3, [r0, #4]
   1cadc:	ldr	r3, [r1, #20]
   1cae0:	ldr	r2, [sp, #48]	; 0x30
   1cae4:	str	r2, [sp, #8]
   1cae8:	ldrh	r2, [sp, #40]	; 0x28
   1caec:	str	r2, [sp, #4]
   1caf0:	ldr	r2, [r1, #16]
   1caf4:	str	r2, [sp]
   1caf8:	mov	r2, r7
   1cafc:	mov	r1, r6
   1cb00:	mov	r0, r5
   1cb04:	bl	1a264 <flatcc_json_parser_space_ext@@Base+0x38c>
   1cb08:	b	1cabc <flatcc_json_parser_union_vector@@Base+0x9c>

0001cb0c <flatcc_json_parser_union_type_vector@@Base>:
   1cb0c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1cb10:	strd	r6, [sp, #8]
   1cb14:	strd	r8, [sp, #16]
   1cb18:	strd	sl, [sp, #24]
   1cb1c:	str	lr, [sp, #32]
   1cb20:	sub	sp, sp, #52	; 0x34
   1cb24:	mov	r7, r0
   1cb28:	mov	r6, r1
   1cb2c:	mov	r5, r2
   1cb30:	mov	r4, r3
   1cb34:	ldrh	r3, [sp, #88]	; 0x58
   1cb38:	str	r3, [sp, #16]
   1cb3c:	ldr	sl, [sp, #104]	; 0x68
   1cb40:	ldr	r1, [sp, #92]	; 0x5c
   1cb44:	ldr	r0, [r0]
   1cb48:	bl	14a58 <flatcc_builder_get_user_frame_ptr@@Base>
   1cb4c:	add	r4, r4, r4, lsl #1
   1cb50:	lsl	r3, r4, #3
   1cb54:	str	r3, [sp, #20]
   1cb58:	add	r0, r0, #8
   1cb5c:	add	fp, r0, r3
   1cb60:	ldrb	r3, [fp, #12]
   1cb64:	cmp	r3, #0
   1cb68:	bne	1cbbc <flatcc_json_parser_union_type_vector@@Base+0xb0>
   1cb6c:	mov	r1, #1
   1cb70:	strb	r1, [fp, #12]
   1cb74:	mvn	r3, #0
   1cb78:	mov	r2, r1
   1cb7c:	ldr	r0, [r7]
   1cb80:	bl	15c68 <flatcc_builder_start_vector@@Base>
   1cb84:	cmp	r0, #0
   1cb88:	beq	1cbd4 <flatcc_json_parser_union_type_vector@@Base+0xc8>
   1cb8c:	mov	r3, #33	; 0x21
   1cb90:	mov	r2, r5
   1cb94:	mov	r1, r6
   1cb98:	mov	r0, r7
   1cb9c:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1cba0:	add	sp, sp, #52	; 0x34
   1cba4:	ldrd	r4, [sp]
   1cba8:	ldrd	r6, [sp, #8]
   1cbac:	ldrd	r8, [sp, #16]
   1cbb0:	ldrd	sl, [sp, #24]
   1cbb4:	add	sp, sp, #32
   1cbb8:	pop	{pc}		; (ldr pc, [sp], #4)
   1cbbc:	mov	r3, #28
   1cbc0:	mov	r2, r5
   1cbc4:	mov	r1, r6
   1cbc8:	mov	r0, r7
   1cbcc:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1cbd0:	b	1cba0 <flatcc_json_parser_union_type_vector@@Base+0x94>
   1cbd4:	cmp	r6, r5
   1cbd8:	beq	1cbe8 <flatcc_json_parser_union_type_vector@@Base+0xdc>
   1cbdc:	ldrb	r3, [r6]
   1cbe0:	cmp	r3, #91	; 0x5b
   1cbe4:	beq	1cd10 <flatcc_json_parser_union_type_vector@@Base+0x204>
   1cbe8:	mov	r3, #22
   1cbec:	mov	r2, r5
   1cbf0:	mov	r1, r6
   1cbf4:	mov	r0, r7
   1cbf8:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1cbfc:	mov	r6, r0
   1cc00:	ldr	r0, [r7]
   1cc04:	bl	16e68 <flatcc_builder_vector_count@@Base>
   1cc08:	mov	r4, r0
   1cc0c:	str	r0, [fp, #16]
   1cc10:	mov	r1, r0
   1cc14:	ldr	r0, [r7]
   1cc18:	bl	148f4 <flatcc_builder_enter_user_frame@@Base>
   1cc1c:	mov	r8, r0
   1cc20:	mov	r1, r0
   1cc24:	ldr	r0, [r7]
   1cc28:	bl	14a58 <flatcc_builder_get_user_frame_ptr@@Base>
   1cc2c:	mov	r9, r0
   1cc30:	ldr	r0, [r7]
   1cc34:	bl	16e74 <flatcc_builder_vector_edit@@Base>
   1cc38:	mov	r2, r4
   1cc3c:	mov	r1, r0
   1cc40:	mov	r0, r9
   1cc44:	bl	1240c <memcpy@plt>
   1cc48:	ldr	r0, [r7]
   1cc4c:	bl	16d6c <flatcc_builder_end_vector@@Base>
   1cc50:	subs	r9, r0, #0
   1cc54:	beq	1cb8c <flatcc_json_parser_union_type_vector@@Base+0x80>
   1cc58:	ldr	r3, [sp, #16]
   1cc5c:	sub	r1, r3, #1
   1cc60:	ldr	r0, [r7]
   1cc64:	bl	17d14 <flatcc_builder_table_add_offset@@Base>
   1cc68:	cmp	r0, #0
   1cc6c:	beq	1cb8c <flatcc_json_parser_union_type_vector@@Base+0x80>
   1cc70:	str	r9, [r0]
   1cc74:	ldr	r1, [sp, #92]	; 0x5c
   1cc78:	ldr	r0, [r7]
   1cc7c:	bl	14a58 <flatcc_builder_get_user_frame_ptr@@Base>
   1cc80:	add	r2, r0, #8
   1cc84:	ldr	r3, [sp, #20]
   1cc88:	add	r1, r2, r3
   1cc8c:	str	r8, [r1, #20]
   1cc90:	ldr	r3, [r2, r3]
   1cc94:	cmp	r3, #0
   1cc98:	beq	1d078 <flatcc_json_parser_union_type_vector@@Base+0x56c>
   1cc9c:	ldr	r3, [r0, #4]
   1cca0:	cmp	r3, #0
   1cca4:	beq	1d08c <flatcc_json_parser_union_type_vector@@Base+0x580>
   1cca8:	sub	r3, r3, #1
   1ccac:	str	r3, [r0, #4]
   1ccb0:	ldr	sl, [r7, #16]
   1ccb4:	ldr	r9, [r7, #4]
   1ccb8:	ldr	r3, [r1, #8]
   1ccbc:	str	r3, [r7, #16]
   1ccc0:	ldr	r3, [r1, #4]
   1ccc4:	str	r3, [r7, #4]
   1ccc8:	ldr	r3, [sp, #20]
   1cccc:	ldr	r1, [r2, r3]
   1ccd0:	ldr	r3, [sp, #100]	; 0x64
   1ccd4:	str	r3, [sp, #8]
   1ccd8:	ldr	r3, [sp, #16]
   1ccdc:	str	r3, [sp, #4]
   1cce0:	str	r4, [sp]
   1cce4:	mov	r3, r8
   1cce8:	mov	r2, r5
   1ccec:	mov	r0, r7
   1ccf0:	bl	1a264 <flatcc_json_parser_space_ext@@Base+0x38c>
   1ccf4:	cmp	r5, r0
   1ccf8:	moveq	r0, r5
   1ccfc:	beq	1cba0 <flatcc_json_parser_union_type_vector@@Base+0x94>
   1cd00:	str	sl, [r7, #16]
   1cd04:	str	r9, [r7, #4]
   1cd08:	mov	r0, r6
   1cd0c:	b	1cba0 <flatcc_json_parser_union_type_vector@@Base+0x94>
   1cd10:	add	r1, r6, #1
   1cd14:	sub	r3, r5, r1
   1cd18:	cmp	r3, #1
   1cd1c:	ble	1cd34 <flatcc_json_parser_union_type_vector@@Base+0x228>
   1cd20:	ldrb	r3, [r6, #1]
   1cd24:	cmp	r3, #32
   1cd28:	movhi	r6, r1
   1cd2c:	bhi	1cd44 <flatcc_json_parser_union_type_vector@@Base+0x238>
   1cd30:	beq	1cd60 <flatcc_json_parser_union_type_vector@@Base+0x254>
   1cd34:	mov	r2, r5
   1cd38:	mov	r0, r7
   1cd3c:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1cd40:	mov	r6, r0
   1cd44:	cmp	r5, r6
   1cd48:	beq	1cd58 <flatcc_json_parser_union_type_vector@@Base+0x24c>
   1cd4c:	ldrb	r3, [r6]
   1cd50:	cmp	r3, #93	; 0x5d
   1cd54:	beq	1cd74 <flatcc_json_parser_union_type_vector@@Base+0x268>
   1cd58:	mov	r8, #0
   1cd5c:	b	1cf70 <flatcc_json_parser_union_type_vector@@Base+0x464>
   1cd60:	ldrb	r3, [r6, #2]
   1cd64:	cmp	r3, #32
   1cd68:	addhi	r6, r6, #2
   1cd6c:	bls	1cd34 <flatcc_json_parser_union_type_vector@@Base+0x228>
   1cd70:	b	1cd44 <flatcc_json_parser_union_type_vector@@Base+0x238>
   1cd74:	add	r1, r6, #1
   1cd78:	sub	r3, r5, r1
   1cd7c:	cmp	r3, #1
   1cd80:	ble	1cd98 <flatcc_json_parser_union_type_vector@@Base+0x28c>
   1cd84:	ldrb	r3, [r6, #1]
   1cd88:	cmp	r3, #32
   1cd8c:	movhi	r6, r1
   1cd90:	bhi	1cc00 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   1cd94:	beq	1cdac <flatcc_json_parser_union_type_vector@@Base+0x2a0>
   1cd98:	mov	r2, r5
   1cd9c:	mov	r0, r7
   1cda0:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1cda4:	mov	r6, r0
   1cda8:	b	1cc00 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   1cdac:	ldrb	r3, [r6, #2]
   1cdb0:	cmp	r3, #32
   1cdb4:	addhi	r6, r6, #2
   1cdb8:	bls	1cd98 <flatcc_json_parser_union_type_vector@@Base+0x28c>
   1cdbc:	b	1cc00 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   1cdc0:	ldr	r3, [sp, #28]
   1cdc4:	cmp	r3, #0
   1cdc8:	bne	1cdfc <flatcc_json_parser_union_type_vector@@Base+0x2f0>
   1cdcc:	ldrd	r2, [sp, #32]
   1cdd0:	cmp	r3, #0
   1cdd4:	cmpeq	r2, #255	; 0xff
   1cdd8:	strbls	r2, [sp, #47]	; 0x2f
   1cddc:	bls	1ce1c <flatcc_json_parser_union_type_vector@@Base+0x310>
   1cde0:	mov	r3, #7
   1cde4:	mov	r2, r5
   1cde8:	mov	r1, r0
   1cdec:	mov	r0, r7
   1cdf0:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1cdf4:	mov	r4, r0
   1cdf8:	b	1ce14 <flatcc_json_parser_union_type_vector@@Base+0x308>
   1cdfc:	mov	r3, #8
   1ce00:	mov	r2, r5
   1ce04:	mov	r1, r0
   1ce08:	mov	r0, r7
   1ce0c:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1ce10:	mov	r4, r0
   1ce14:	cmp	r4, r6
   1ce18:	beq	1cfc8 <flatcc_json_parser_union_type_vector@@Base+0x4bc>
   1ce1c:	ldrb	r0, [sp, #47]	; 0x2f
   1ce20:	blx	sl
   1ce24:	cmp	r0, #0
   1ce28:	bne	1ce3c <flatcc_json_parser_union_type_vector@@Base+0x330>
   1ce2c:	ldr	r3, [r7, #8]
   1ce30:	tst	r3, #1
   1ce34:	beq	1ceb0 <flatcc_json_parser_union_type_vector@@Base+0x3a4>
   1ce38:	strb	r8, [sp, #47]	; 0x2f
   1ce3c:	ldrb	r3, [sp, #47]	; 0x2f
   1ce40:	strb	r3, [r9]
   1ce44:	sub	r3, r5, r4
   1ce48:	cmp	r3, #1
   1ce4c:	ble	1ce60 <flatcc_json_parser_union_type_vector@@Base+0x354>
   1ce50:	ldrb	r3, [r4]
   1ce54:	cmp	r3, #32
   1ce58:	bhi	1ce74 <flatcc_json_parser_union_type_vector@@Base+0x368>
   1ce5c:	beq	1cec8 <flatcc_json_parser_union_type_vector@@Base+0x3bc>
   1ce60:	mov	r2, r5
   1ce64:	mov	r1, r4
   1ce68:	mov	r0, r7
   1ce6c:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1ce70:	mov	r4, r0
   1ce74:	cmp	r5, r4
   1ce78:	beq	1cea8 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   1ce7c:	ldrb	r3, [r4]
   1ce80:	cmp	r3, #44	; 0x2c
   1ce84:	beq	1cf28 <flatcc_json_parser_union_type_vector@@Base+0x41c>
   1ce88:	cmp	r3, #93	; 0x5d
   1ce8c:	beq	1cedc <flatcc_json_parser_union_type_vector@@Base+0x3d0>
   1ce90:	mov	r3, #9
   1ce94:	mov	r2, r5
   1ce98:	mov	r1, r4
   1ce9c:	mov	r0, r7
   1cea0:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1cea4:	mov	r4, r0
   1cea8:	mov	r6, r4
   1ceac:	b	1cc00 <flatcc_json_parser_union_type_vector@@Base+0xf4>
   1ceb0:	mov	r3, #15
   1ceb4:	mov	r2, r5
   1ceb8:	mov	r1, r4
   1cebc:	mov	r0, r7
   1cec0:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1cec4:	b	1cba0 <flatcc_json_parser_union_type_vector@@Base+0x94>
   1cec8:	ldrb	r3, [r4, #1]
   1cecc:	cmp	r3, #32
   1ced0:	addhi	r4, r4, #1
   1ced4:	bls	1ce60 <flatcc_json_parser_union_type_vector@@Base+0x354>
   1ced8:	b	1ce74 <flatcc_json_parser_union_type_vector@@Base+0x368>
   1cedc:	add	r1, r4, #1
   1cee0:	sub	r3, r5, r1
   1cee4:	cmp	r3, #1
   1cee8:	ble	1cf00 <flatcc_json_parser_union_type_vector@@Base+0x3f4>
   1ceec:	ldrb	r3, [r4, #1]
   1cef0:	cmp	r3, #32
   1cef4:	movhi	r4, r1
   1cef8:	bhi	1cea8 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   1cefc:	beq	1cf14 <flatcc_json_parser_union_type_vector@@Base+0x408>
   1cf00:	mov	r2, r5
   1cf04:	mov	r0, r7
   1cf08:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1cf0c:	mov	r4, r0
   1cf10:	b	1cea8 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   1cf14:	ldrb	r3, [r4, #2]
   1cf18:	cmp	r3, #32
   1cf1c:	addhi	r4, r4, #2
   1cf20:	bls	1cf00 <flatcc_json_parser_union_type_vector@@Base+0x3f4>
   1cf24:	b	1cea8 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   1cf28:	add	r6, r4, #1
   1cf2c:	sub	r3, r5, r6
   1cf30:	cmp	r3, #1
   1cf34:	ble	1cf48 <flatcc_json_parser_union_type_vector@@Base+0x43c>
   1cf38:	ldrb	r3, [r4, #1]
   1cf3c:	cmp	r3, #32
   1cf40:	bhi	1cf5c <flatcc_json_parser_union_type_vector@@Base+0x450>
   1cf44:	beq	1cffc <flatcc_json_parser_union_type_vector@@Base+0x4f0>
   1cf48:	mov	r2, r5
   1cf4c:	mov	r1, r6
   1cf50:	mov	r0, r7
   1cf54:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1cf58:	mov	r6, r0
   1cf5c:	cmp	r5, r6
   1cf60:	beq	1d010 <flatcc_json_parser_union_type_vector@@Base+0x504>
   1cf64:	ldrb	r3, [r6]
   1cf68:	cmp	r3, #93	; 0x5d
   1cf6c:	beq	1d02c <flatcc_json_parser_union_type_vector@@Base+0x520>
   1cf70:	mov	r1, #1
   1cf74:	ldr	r0, [r7]
   1cf78:	bl	1535c <flatcc_builder_extend_vector@@Base>
   1cf7c:	subs	r9, r0, #0
   1cf80:	beq	1cb8c <flatcc_json_parser_union_type_vector@@Base+0x80>
   1cf84:	mov	r2, #0
   1cf88:	mov	r3, #0
   1cf8c:	strd	r2, [sp, #32]
   1cf90:	str	r8, [sp, #28]
   1cf94:	strb	r8, [sp, #47]	; 0x2f
   1cf98:	cmp	r5, r6
   1cf9c:	beq	1cfc8 <flatcc_json_parser_union_type_vector@@Base+0x4bc>
   1cfa0:	add	r3, sp, #32
   1cfa4:	str	r3, [sp]
   1cfa8:	add	r3, sp, #28
   1cfac:	mov	r2, r5
   1cfb0:	mov	r1, r6
   1cfb4:	mov	r0, r7
   1cfb8:	bl	1be30 <flatcc_json_parser_integer@@Base>
   1cfbc:	mov	r4, r0
   1cfc0:	cmp	r0, r6
   1cfc4:	bne	1cdc0 <flatcc_json_parser_union_type_vector@@Base+0x2b4>
   1cfc8:	add	r3, sp, #47	; 0x2f
   1cfcc:	str	r3, [sp]
   1cfd0:	ldr	r3, [sp, #96]	; 0x60
   1cfd4:	mov	r2, r5
   1cfd8:	mov	r1, r6
   1cfdc:	mov	r0, r7
   1cfe0:	bl	1a024 <flatcc_json_parser_space_ext@@Base+0x14c>
   1cfe4:	mov	r4, r0
   1cfe8:	cmp	r5, r0
   1cfec:	cmpne	r0, r6
   1cff0:	bne	1ce1c <flatcc_json_parser_union_type_vector@@Base+0x310>
   1cff4:	mov	r6, r0
   1cff8:	b	1cb8c <flatcc_json_parser_union_type_vector@@Base+0x80>
   1cffc:	ldrb	r3, [r4, #2]
   1d000:	cmp	r3, #32
   1d004:	addhi	r6, r4, #2
   1d008:	bls	1cf48 <flatcc_json_parser_union_type_vector@@Base+0x43c>
   1d00c:	b	1cf5c <flatcc_json_parser_union_type_vector@@Base+0x450>
   1d010:	mov	r3, #9
   1d014:	mov	r2, r5
   1d018:	mov	r1, r6
   1d01c:	mov	r0, r7
   1d020:	bl	19df8 <flatcc_json_parser_set_error@@Base>
   1d024:	mov	r4, r0
   1d028:	b	1cea8 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   1d02c:	add	r4, r6, #1
   1d030:	sub	r3, r5, r4
   1d034:	cmp	r3, #1
   1d038:	ble	1d04c <flatcc_json_parser_union_type_vector@@Base+0x540>
   1d03c:	ldrb	r3, [r6, #1]
   1d040:	cmp	r3, #32
   1d044:	bhi	1cea8 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   1d048:	beq	1d064 <flatcc_json_parser_union_type_vector@@Base+0x558>
   1d04c:	mov	r2, r5
   1d050:	mov	r1, r4
   1d054:	mov	r0, r7
   1d058:	bl	19ed8 <flatcc_json_parser_space_ext@@Base>
   1d05c:	mov	r4, r0
   1d060:	b	1cea8 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   1d064:	ldrb	r3, [r6, #2]
   1d068:	cmp	r3, #32
   1d06c:	addhi	r4, r6, #2
   1d070:	bls	1d04c <flatcc_json_parser_union_type_vector@@Base+0x540>
   1d074:	b	1cea8 <flatcc_json_parser_union_type_vector@@Base+0x39c>
   1d078:	ldr	r3, [r0, #4]
   1d07c:	add	r3, r3, #1
   1d080:	str	r3, [r0, #4]
   1d084:	mov	r0, r6
   1d088:	b	1cba0 <flatcc_json_parser_union_type_vector@@Base+0x94>
   1d08c:	ldr	r3, [pc, #20]	; 1d0a8 <flatcc_json_parser_union_type_vector@@Base+0x59c>
   1d090:	movw	r2, #1122	; 0x462
   1d094:	movw	r1, #61840	; 0xf190
   1d098:	movt	r1, #1
   1d09c:	movw	r0, #61916	; 0xf1dc
   1d0a0:	movt	r0, #1
   1d0a4:	bl	124b4 <__assert_fail@plt>
   1d0a8:	andeq	lr, r1, r8, asr sp

0001d0ac <flatcc_json_parser_table_as_root@@Base>:
   1d0ac:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1d0b0:	strd	r6, [sp, #8]
   1d0b4:	strd	r8, [sp, #16]
   1d0b8:	str	lr, [sp, #24]
   1d0bc:	sub	sp, sp, #52	; 0x34
   1d0c0:	mov	r8, r0
   1d0c4:	mov	r5, r2
   1d0c8:	ldr	r9, [sp, #80]	; 0x50
   1d0cc:	asr	r7, r9, #1
   1d0d0:	and	r7, r7, #2
   1d0d4:	subs	r4, r1, #0
   1d0d8:	addeq	r4, sp, #4
   1d0dc:	add	r6, r2, r3
   1d0e0:	mov	r2, #32
   1d0e4:	mov	r1, #0
   1d0e8:	add	r0, r4, #12
   1d0ec:	bl	12484 <memset@plt>
   1d0f0:	str	r8, [r4]
   1d0f4:	str	r5, [r4, #4]
   1d0f8:	mov	r3, #1
   1d0fc:	str	r3, [r4, #16]
   1d100:	str	r9, [r4, #8]
   1d104:	str	r5, [r4, #28]
   1d108:	str	r6, [r4, #32]
   1d10c:	str	r5, [r4, #36]	; 0x24
   1d110:	mov	r3, r7
   1d114:	mov	r2, #0
   1d118:	ldr	r1, [sp, #84]	; 0x54
   1d11c:	mov	r0, r8
   1d120:	bl	14fa0 <flatcc_builder_start_buffer@@Base>
   1d124:	cmp	r0, #0
   1d128:	bne	1d188 <flatcc_json_parser_table_as_root@@Base+0xdc>
   1d12c:	mov	r3, sp
   1d130:	mov	r2, r6
   1d134:	mov	r1, r5
   1d138:	mov	r0, r4
   1d13c:	ldr	r6, [sp, #88]	; 0x58
   1d140:	blx	r6
   1d144:	ldr	r6, [r4, #24]
   1d148:	cmp	r6, #0
   1d14c:	beq	1d16c <flatcc_json_parser_table_as_root@@Base+0xc0>
   1d150:	mov	r0, r6
   1d154:	add	sp, sp, #52	; 0x34
   1d158:	ldrd	r4, [sp]
   1d15c:	ldrd	r6, [sp, #8]
   1d160:	ldrd	r8, [sp, #16]
   1d164:	add	sp, sp, #24
   1d168:	pop	{pc}		; (ldr pc, [sp], #4)
   1d16c:	ldr	r1, [sp]
   1d170:	mov	r0, r8
   1d174:	bl	15074 <flatcc_builder_end_buffer@@Base>
   1d178:	cmp	r0, #0
   1d17c:	beq	1d190 <flatcc_json_parser_table_as_root@@Base+0xe4>
   1d180:	str	r5, [r4, #40]	; 0x28
   1d184:	b	1d150 <flatcc_json_parser_table_as_root@@Base+0xa4>
   1d188:	mvn	r6, #0
   1d18c:	b	1d150 <flatcc_json_parser_table_as_root@@Base+0xa4>
   1d190:	mvn	r6, #0
   1d194:	b	1d150 <flatcc_json_parser_table_as_root@@Base+0xa4>

0001d198 <flatcc_json_parser_struct_as_root@@Base>:
   1d198:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1d19c:	strd	r6, [sp, #8]
   1d1a0:	strd	r8, [sp, #16]
   1d1a4:	str	lr, [sp, #24]
   1d1a8:	sub	sp, sp, #52	; 0x34
   1d1ac:	mov	r8, r0
   1d1b0:	mov	r5, r2
   1d1b4:	ldr	r9, [sp, #80]	; 0x50
   1d1b8:	asr	r7, r9, #1
   1d1bc:	and	r7, r7, #2
   1d1c0:	subs	r4, r1, #0
   1d1c4:	addeq	r4, sp, #4
   1d1c8:	add	r6, r2, r3
   1d1cc:	mov	r2, #32
   1d1d0:	mov	r1, #0
   1d1d4:	add	r0, r4, #12
   1d1d8:	bl	12484 <memset@plt>
   1d1dc:	str	r8, [r4]
   1d1e0:	str	r5, [r4, #4]
   1d1e4:	mov	r3, #1
   1d1e8:	str	r3, [r4, #16]
   1d1ec:	str	r9, [r4, #8]
   1d1f0:	str	r5, [r4, #28]
   1d1f4:	str	r6, [r4, #32]
   1d1f8:	str	r5, [r4, #36]	; 0x24
   1d1fc:	mov	r3, r7
   1d200:	mov	r2, #0
   1d204:	ldr	r1, [sp, #84]	; 0x54
   1d208:	mov	r0, r8
   1d20c:	bl	14fa0 <flatcc_builder_start_buffer@@Base>
   1d210:	cmp	r0, #0
   1d214:	bne	1d274 <flatcc_json_parser_struct_as_root@@Base+0xdc>
   1d218:	mov	r3, sp
   1d21c:	mov	r2, r6
   1d220:	mov	r1, r5
   1d224:	mov	r0, r4
   1d228:	ldr	r6, [sp, #88]	; 0x58
   1d22c:	blx	r6
   1d230:	ldr	r6, [r4, #24]
   1d234:	cmp	r6, #0
   1d238:	beq	1d258 <flatcc_json_parser_struct_as_root@@Base+0xc0>
   1d23c:	mov	r0, r6
   1d240:	add	sp, sp, #52	; 0x34
   1d244:	ldrd	r4, [sp]
   1d248:	ldrd	r6, [sp, #8]
   1d24c:	ldrd	r8, [sp, #16]
   1d250:	add	sp, sp, #24
   1d254:	pop	{pc}		; (ldr pc, [sp], #4)
   1d258:	ldr	r1, [sp]
   1d25c:	mov	r0, r8
   1d260:	bl	15074 <flatcc_builder_end_buffer@@Base>
   1d264:	cmp	r0, #0
   1d268:	beq	1d27c <flatcc_json_parser_struct_as_root@@Base+0xe4>
   1d26c:	str	r5, [r4, #40]	; 0x28
   1d270:	b	1d23c <flatcc_json_parser_struct_as_root@@Base+0xa4>
   1d274:	mvn	r6, #0
   1d278:	b	1d23c <flatcc_json_parser_struct_as_root@@Base+0xa4>
   1d27c:	mvn	r6, #0
   1d280:	b	1d23c <flatcc_json_parser_struct_as_root@@Base+0xa4>
   1d284:	eor	r1, r1, #-2147483648	; 0x80000000
   1d288:	b	1d290 <flatcc_json_parser_struct_as_root@@Base+0xf8>
   1d28c:	eor	r3, r3, #-2147483648	; 0x80000000
   1d290:	push	{r4, r5, lr}
   1d294:	lsl	r4, r1, #1
   1d298:	lsl	r5, r3, #1
   1d29c:	teq	r4, r5
   1d2a0:	teqeq	r0, r2
   1d2a4:	orrsne	ip, r4, r0
   1d2a8:	orrsne	ip, r5, r2
   1d2ac:	mvnsne	ip, r4, asr #21
   1d2b0:	mvnsne	ip, r5, asr #21
   1d2b4:	beq	1d4a0 <flatcc_json_parser_struct_as_root@@Base+0x308>
   1d2b8:	lsr	r4, r4, #21
   1d2bc:	rsbs	r5, r4, r5, lsr #21
   1d2c0:	rsblt	r5, r5, #0
   1d2c4:	ble	1d2e4 <flatcc_json_parser_struct_as_root@@Base+0x14c>
   1d2c8:	add	r4, r4, r5
   1d2cc:	eor	r2, r0, r2
   1d2d0:	eor	r3, r1, r3
   1d2d4:	eor	r0, r2, r0
   1d2d8:	eor	r1, r3, r1
   1d2dc:	eor	r2, r0, r2
   1d2e0:	eor	r3, r1, r3
   1d2e4:	cmp	r5, #54	; 0x36
   1d2e8:	pophi	{r4, r5, pc}
   1d2ec:	tst	r1, #-2147483648	; 0x80000000
   1d2f0:	lsl	r1, r1, #12
   1d2f4:	mov	ip, #1048576	; 0x100000
   1d2f8:	orr	r1, ip, r1, lsr #12
   1d2fc:	beq	1d308 <flatcc_json_parser_struct_as_root@@Base+0x170>
   1d300:	rsbs	r0, r0, #0
   1d304:	rsc	r1, r1, #0
   1d308:	tst	r3, #-2147483648	; 0x80000000
   1d30c:	lsl	r3, r3, #12
   1d310:	orr	r3, ip, r3, lsr #12
   1d314:	beq	1d320 <flatcc_json_parser_struct_as_root@@Base+0x188>
   1d318:	rsbs	r2, r2, #0
   1d31c:	rsc	r3, r3, #0
   1d320:	teq	r4, r5
   1d324:	beq	1d488 <flatcc_json_parser_struct_as_root@@Base+0x2f0>
   1d328:	sub	r4, r4, #1
   1d32c:	rsbs	lr, r5, #32
   1d330:	blt	1d34c <flatcc_json_parser_struct_as_root@@Base+0x1b4>
   1d334:	lsl	ip, r2, lr
   1d338:	adds	r0, r0, r2, lsr r5
   1d33c:	adc	r1, r1, #0
   1d340:	adds	r0, r0, r3, lsl lr
   1d344:	adcs	r1, r1, r3, asr r5
   1d348:	b	1d368 <flatcc_json_parser_struct_as_root@@Base+0x1d0>
   1d34c:	sub	r5, r5, #32
   1d350:	add	lr, lr, #32
   1d354:	cmp	r2, #1
   1d358:	lsl	ip, r3, lr
   1d35c:	orrcs	ip, ip, #2
   1d360:	adds	r0, r0, r3, asr r5
   1d364:	adcs	r1, r1, r3, asr #31
   1d368:	and	r5, r1, #-2147483648	; 0x80000000
   1d36c:	bpl	1d37c <flatcc_json_parser_struct_as_root@@Base+0x1e4>
   1d370:	rsbs	ip, ip, #0
   1d374:	rscs	r0, r0, #0
   1d378:	rsc	r1, r1, #0
   1d37c:	cmp	r1, #1048576	; 0x100000
   1d380:	bcc	1d3c0 <flatcc_json_parser_struct_as_root@@Base+0x228>
   1d384:	cmp	r1, #2097152	; 0x200000
   1d388:	bcc	1d3a8 <flatcc_json_parser_struct_as_root@@Base+0x210>
   1d38c:	lsrs	r1, r1, #1
   1d390:	rrxs	r0, r0
   1d394:	rrx	ip, ip
   1d398:	add	r4, r4, #1
   1d39c:	lsl	r2, r4, #21
   1d3a0:	cmn	r2, #4194304	; 0x400000
   1d3a4:	bcs	1d500 <flatcc_json_parser_struct_as_root@@Base+0x368>
   1d3a8:	cmp	ip, #-2147483648	; 0x80000000
   1d3ac:	lsrseq	ip, r0, #1
   1d3b0:	adcs	r0, r0, #0
   1d3b4:	adc	r1, r1, r4, lsl #20
   1d3b8:	orr	r1, r1, r5
   1d3bc:	pop	{r4, r5, pc}
   1d3c0:	lsls	ip, ip, #1
   1d3c4:	adcs	r0, r0, r0
   1d3c8:	adc	r1, r1, r1
   1d3cc:	tst	r1, #1048576	; 0x100000
   1d3d0:	sub	r4, r4, #1
   1d3d4:	bne	1d3a8 <flatcc_json_parser_struct_as_root@@Base+0x210>
   1d3d8:	teq	r1, #0
   1d3dc:	moveq	r1, r0
   1d3e0:	moveq	r0, #0
   1d3e4:	clz	r3, r1
   1d3e8:	addeq	r3, r3, #32
   1d3ec:	sub	r3, r3, #11
   1d3f0:	subs	r2, r3, #32
   1d3f4:	bge	1d418 <flatcc_json_parser_struct_as_root@@Base+0x280>
   1d3f8:	adds	r2, r2, #12
   1d3fc:	ble	1d414 <flatcc_json_parser_struct_as_root@@Base+0x27c>
   1d400:	add	ip, r2, #20
   1d404:	rsb	r2, r2, #12
   1d408:	lsl	r0, r1, ip
   1d40c:	lsr	r1, r1, r2
   1d410:	b	1d428 <flatcc_json_parser_struct_as_root@@Base+0x290>
   1d414:	add	r2, r2, #20
   1d418:	rsble	ip, r2, #32
   1d41c:	lsl	r1, r1, r2
   1d420:	orrle	r1, r1, r0, lsr ip
   1d424:	lslle	r0, r0, r2
   1d428:	subs	r4, r4, r3
   1d42c:	addge	r1, r1, r4, lsl #20
   1d430:	orrge	r1, r1, r5
   1d434:	popge	{r4, r5, pc}
   1d438:	mvn	r4, r4
   1d43c:	subs	r4, r4, #31
   1d440:	bge	1d47c <flatcc_json_parser_struct_as_root@@Base+0x2e4>
   1d444:	adds	r4, r4, #12
   1d448:	bgt	1d464 <flatcc_json_parser_struct_as_root@@Base+0x2cc>
   1d44c:	add	r4, r4, #20
   1d450:	rsb	r2, r4, #32
   1d454:	lsr	r0, r0, r4
   1d458:	orr	r0, r0, r1, lsl r2
   1d45c:	orr	r1, r5, r1, lsr r4
   1d460:	pop	{r4, r5, pc}
   1d464:	rsb	r4, r4, #12
   1d468:	rsb	r2, r4, #32
   1d46c:	lsr	r0, r0, r2
   1d470:	orr	r0, r0, r1, lsl r4
   1d474:	mov	r1, r5
   1d478:	pop	{r4, r5, pc}
   1d47c:	lsr	r0, r1, r4
   1d480:	mov	r1, r5
   1d484:	pop	{r4, r5, pc}
   1d488:	teq	r4, #0
   1d48c:	eor	r3, r3, #1048576	; 0x100000
   1d490:	eoreq	r1, r1, #1048576	; 0x100000
   1d494:	addeq	r4, r4, #1
   1d498:	subne	r5, r5, #1
   1d49c:	b	1d328 <flatcc_json_parser_struct_as_root@@Base+0x190>
   1d4a0:	mvns	ip, r4, asr #21
   1d4a4:	mvnsne	ip, r5, asr #21
   1d4a8:	beq	1d510 <flatcc_json_parser_struct_as_root@@Base+0x378>
   1d4ac:	teq	r4, r5
   1d4b0:	teqeq	r0, r2
   1d4b4:	beq	1d4c8 <flatcc_json_parser_struct_as_root@@Base+0x330>
   1d4b8:	orrs	ip, r4, r0
   1d4bc:	moveq	r1, r3
   1d4c0:	moveq	r0, r2
   1d4c4:	pop	{r4, r5, pc}
   1d4c8:	teq	r1, r3
   1d4cc:	movne	r1, #0
   1d4d0:	movne	r0, #0
   1d4d4:	popne	{r4, r5, pc}
   1d4d8:	lsrs	ip, r4, #21
   1d4dc:	bne	1d4f0 <flatcc_json_parser_struct_as_root@@Base+0x358>
   1d4e0:	lsls	r0, r0, #1
   1d4e4:	adcs	r1, r1, r1
   1d4e8:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1d4ec:	pop	{r4, r5, pc}
   1d4f0:	adds	r4, r4, #4194304	; 0x400000
   1d4f4:	addcc	r1, r1, #1048576	; 0x100000
   1d4f8:	popcc	{r4, r5, pc}
   1d4fc:	and	r5, r1, #-2147483648	; 0x80000000
   1d500:	orr	r1, r5, #2130706432	; 0x7f000000
   1d504:	orr	r1, r1, #15728640	; 0xf00000
   1d508:	mov	r0, #0
   1d50c:	pop	{r4, r5, pc}
   1d510:	mvns	ip, r4, asr #21
   1d514:	movne	r1, r3
   1d518:	movne	r0, r2
   1d51c:	mvnseq	ip, r5, asr #21
   1d520:	movne	r3, r1
   1d524:	movne	r2, r0
   1d528:	orrs	r4, r0, r1, lsl #12
   1d52c:	orrseq	r5, r2, r3, lsl #12
   1d530:	teqeq	r1, r3
   1d534:	orrne	r1, r1, #524288	; 0x80000
   1d538:	pop	{r4, r5, pc}
   1d53c:	teq	r0, #0
   1d540:	moveq	r1, #0
   1d544:	bxeq	lr
   1d548:	push	{r4, r5, lr}
   1d54c:	mov	r4, #1024	; 0x400
   1d550:	add	r4, r4, #50	; 0x32
   1d554:	mov	r5, #0
   1d558:	mov	r1, #0
   1d55c:	b	1d3d8 <flatcc_json_parser_struct_as_root@@Base+0x240>
   1d560:	teq	r0, #0
   1d564:	moveq	r1, #0
   1d568:	bxeq	lr
   1d56c:	push	{r4, r5, lr}
   1d570:	mov	r4, #1024	; 0x400
   1d574:	add	r4, r4, #50	; 0x32
   1d578:	ands	r5, r0, #-2147483648	; 0x80000000
   1d57c:	rsbmi	r0, r0, #0
   1d580:	mov	r1, #0
   1d584:	b	1d3d8 <flatcc_json_parser_struct_as_root@@Base+0x240>
   1d588:	lsls	r2, r0, #1
   1d58c:	asr	r1, r2, #3
   1d590:	rrx	r1, r1
   1d594:	lsl	r0, r2, #28
   1d598:	andsne	r3, r2, #-16777216	; 0xff000000
   1d59c:	teqne	r3, #-16777216	; 0xff000000
   1d5a0:	eorne	r1, r1, #939524096	; 0x38000000
   1d5a4:	bxne	lr
   1d5a8:	bics	r2, r2, #-16777216	; 0xff000000
   1d5ac:	bxeq	lr
   1d5b0:	teq	r3, #-16777216	; 0xff000000
   1d5b4:	orreq	r1, r1, #524288	; 0x80000
   1d5b8:	bxeq	lr
   1d5bc:	push	{r4, r5, lr}
   1d5c0:	mov	r4, #896	; 0x380
   1d5c4:	and	r5, r1, #-2147483648	; 0x80000000
   1d5c8:	bic	r1, r1, #-2147483648	; 0x80000000
   1d5cc:	b	1d3d8 <flatcc_json_parser_struct_as_root@@Base+0x240>
   1d5d0:	orrs	r2, r0, r1
   1d5d4:	bxeq	lr
   1d5d8:	push	{r4, r5, lr}
   1d5dc:	mov	r5, #0
   1d5e0:	b	1d600 <flatcc_json_parser_struct_as_root@@Base+0x468>
   1d5e4:	orrs	r2, r0, r1
   1d5e8:	bxeq	lr
   1d5ec:	push	{r4, r5, lr}
   1d5f0:	ands	r5, r1, #-2147483648	; 0x80000000
   1d5f4:	bpl	1d600 <flatcc_json_parser_struct_as_root@@Base+0x468>
   1d5f8:	rsbs	r0, r0, #0
   1d5fc:	rsc	r1, r1, #0
   1d600:	mov	r4, #1024	; 0x400
   1d604:	add	r4, r4, #50	; 0x32
   1d608:	lsrs	ip, r1, #22
   1d60c:	beq	1d37c <flatcc_json_parser_struct_as_root@@Base+0x1e4>
   1d610:	mov	r2, #3
   1d614:	lsrs	ip, ip, #3
   1d618:	addne	r2, r2, #3
   1d61c:	lsrs	ip, ip, #3
   1d620:	addne	r2, r2, #3
   1d624:	add	r2, r2, ip, lsr #3
   1d628:	rsb	r3, r2, #32
   1d62c:	lsl	ip, r0, r3
   1d630:	lsr	r0, r0, r2
   1d634:	orr	r0, r0, r1, lsl r3
   1d638:	lsr	r1, r1, r2
   1d63c:	add	r4, r4, r2
   1d640:	b	1d37c <flatcc_json_parser_struct_as_root@@Base+0x1e4>

0001d644 <__libc_csu_init@@Base>:
   1d644:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d648:	mov	r7, r0
   1d64c:	ldr	r6, [pc, #72]	; 1d69c <__libc_csu_init@@Base+0x58>
   1d650:	ldr	r5, [pc, #72]	; 1d6a0 <__libc_csu_init@@Base+0x5c>
   1d654:	add	r6, pc, r6
   1d658:	add	r5, pc, r5
   1d65c:	sub	r6, r6, r5
   1d660:	mov	r8, r1
   1d664:	mov	r9, r2
   1d668:	bl	123e0 <free@plt-0x20>
   1d66c:	asrs	r6, r6, #2
   1d670:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d674:	mov	r4, #0
   1d678:	add	r4, r4, #1
   1d67c:	ldr	r3, [r5], #4
   1d680:	mov	r2, r9
   1d684:	mov	r1, r8
   1d688:	mov	r0, r7
   1d68c:	blx	r3
   1d690:	cmp	r6, r4
   1d694:	bne	1d678 <__libc_csu_init@@Base+0x34>
   1d698:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d69c:			; <UNDEFINED> instruction: 0x000128b8
   1d6a0:			; <UNDEFINED> instruction: 0x000128b0

0001d6a4 <__libc_csu_fini@@Base>:
   1d6a4:	bx	lr

Disassembly of section .fini:

0001d6a8 <.fini>:
   1d6a8:	push	{r3, lr}
   1d6ac:	pop	{r3, pc}
