
../repos/coreutils/src/who:     file format elf32-littlearm


Disassembly of section .init:

00011078 <.init>:
   11078:	push	{r3, lr}
   1107c:	bl	113c8 <__assert_fail@plt+0x48>
   11080:	pop	{r3, pc}

Disassembly of section .plt:

00011084 <calloc@plt-0x14>:
   11084:	push	{lr}		; (str lr, [sp, #-4]!)
   11088:	ldr	lr, [pc, #4]	; 11094 <calloc@plt-0x4>
   1108c:	add	lr, pc, lr
   11090:	ldr	pc, [lr, #8]!
   11094:	andeq	r6, r1, ip, ror #30

00011098 <calloc@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #90112	; 0x16000
   110a0:	ldr	pc, [ip, #3948]!	; 0xf6c

000110a4 <fputs_unlocked@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #90112	; 0x16000
   110ac:	ldr	pc, [ip, #3940]!	; 0xf64

000110b0 <raise@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #90112	; 0x16000
   110b8:	ldr	pc, [ip, #3932]!	; 0xf5c

000110bc <strcmp@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #3924]!	; 0xf54

000110c8 <fflush@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #90112	; 0x16000
   110d0:	ldr	pc, [ip, #3916]!	; 0xf4c

000110d4 <utmpxname@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #90112	; 0x16000
   110dc:	ldr	pc, [ip, #3908]!	; 0xf44

000110e0 <free@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #90112	; 0x16000
   110e8:	ldr	pc, [ip, #3900]!	; 0xf3c

000110ec <gai_strerror@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #3892]!	; 0xf34

000110f8 <_exit@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #3884]!	; 0xf2c

00011104 <memcpy@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #90112	; 0x16000
   1110c:	ldr	pc, [ip, #3876]!	; 0xf24

00011110 <mbsinit@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #90112	; 0x16000
   11118:	ldr	pc, [ip, #3868]!	; 0xf1c

0001111c <time@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #90112	; 0x16000
   11124:	ldr	pc, [ip, #3860]!	; 0xf14

00011128 <stpcpy@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #90112	; 0x16000
   11130:	ldr	pc, [ip, #3852]!	; 0xf0c

00011134 <dcgettext@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #90112	; 0x16000
   1113c:	ldr	pc, [ip, #3844]!	; 0xf04

00011140 <strdup@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #90112	; 0x16000
   11148:	ldr	pc, [ip, #3836]!	; 0xefc

0001114c <setutxent@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #90112	; 0x16000
   11154:	ldr	pc, [ip, #3828]!	; 0xef4

00011158 <realloc@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #90112	; 0x16000
   11160:	ldr	pc, [ip, #3820]!	; 0xeec

00011164 <textdomain@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #90112	; 0x16000
   1116c:	ldr	pc, [ip, #3812]!	; 0xee4

00011170 <iswprint@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #90112	; 0x16000
   11178:	ldr	pc, [ip, #3804]!	; 0xedc

0001117c <fwrite@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #90112	; 0x16000
   11184:	ldr	pc, [ip, #3796]!	; 0xed4

00011188 <lseek64@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #90112	; 0x16000
   11190:	ldr	pc, [ip, #3788]!	; 0xecc

00011194 <__ctype_get_mb_cur_max@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #90112	; 0x16000
   1119c:	ldr	pc, [ip, #3780]!	; 0xec4

000111a0 <__fpending@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #90112	; 0x16000
   111a8:	ldr	pc, [ip, #3772]!	; 0xebc

000111ac <mbrtowc@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #90112	; 0x16000
   111b4:	ldr	pc, [ip, #3764]!	; 0xeb4

000111b8 <error@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #90112	; 0x16000
   111c0:	ldr	pc, [ip, #3756]!	; 0xeac

000111c4 <__asprintf_chk@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #90112	; 0x16000
   111cc:	ldr	pc, [ip, #3748]!	; 0xea4

000111d0 <puts@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #90112	; 0x16000
   111d8:	ldr	pc, [ip, #3740]!	; 0xe9c

000111dc <malloc@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #90112	; 0x16000
   111e4:	ldr	pc, [ip, #3732]!	; 0xe94

000111e8 <__libc_start_main@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #90112	; 0x16000
   111f0:	ldr	pc, [ip, #3724]!	; 0xe8c

000111f4 <strftime@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #90112	; 0x16000
   111fc:	ldr	pc, [ip, #3716]!	; 0xe84

00011200 <__freading@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #90112	; 0x16000
   11208:	ldr	pc, [ip, #3708]!	; 0xe7c

0001120c <localtime@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #90112	; 0x16000
   11214:	ldr	pc, [ip, #3700]!	; 0xe74

00011218 <__gmon_start__@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #90112	; 0x16000
   11220:	ldr	pc, [ip, #3692]!	; 0xe6c

00011224 <getopt_long@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #90112	; 0x16000
   1122c:	ldr	pc, [ip, #3684]!	; 0xe64

00011230 <kill@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #90112	; 0x16000
   11238:	ldr	pc, [ip, #3676]!	; 0xe5c

0001123c <__ctype_b_loc@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #90112	; 0x16000
   11244:	ldr	pc, [ip, #3668]!	; 0xe54

00011248 <exit@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #90112	; 0x16000
   11250:	ldr	pc, [ip, #3660]!	; 0xe4c

00011254 <bcmp@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #90112	; 0x16000
   1125c:	ldr	pc, [ip, #3652]!	; 0xe44

00011260 <ttyname@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #90112	; 0x16000
   11268:	ldr	pc, [ip, #3644]!	; 0xe3c

0001126c <strlen@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #90112	; 0x16000
   11274:	ldr	pc, [ip, #3636]!	; 0xe34

00011278 <strchr@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #90112	; 0x16000
   11280:	ldr	pc, [ip, #3628]!	; 0xe2c

00011284 <__errno_location@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #90112	; 0x16000
   1128c:	ldr	pc, [ip, #3620]!	; 0xe24

00011290 <__sprintf_chk@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #90112	; 0x16000
   11298:	ldr	pc, [ip, #3612]!	; 0xe1c

0001129c <__cxa_atexit@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #90112	; 0x16000
   112a4:	ldr	pc, [ip, #3604]!	; 0xe14

000112a8 <memset@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #90112	; 0x16000
   112b0:	ldr	pc, [ip, #3596]!	; 0xe0c

000112b4 <strncpy@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #90112	; 0x16000
   112bc:	ldr	pc, [ip, #3588]!	; 0xe04

000112c0 <__printf_chk@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #90112	; 0x16000
   112c8:	ldr	pc, [ip, #3580]!	; 0xdfc

000112cc <fileno@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #90112	; 0x16000
   112d4:	ldr	pc, [ip, #3572]!	; 0xdf4

000112d8 <__fprintf_chk@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #90112	; 0x16000
   112e0:	ldr	pc, [ip, #3564]!	; 0xdec

000112e4 <fclose@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #90112	; 0x16000
   112ec:	ldr	pc, [ip, #3556]!	; 0xde4

000112f0 <fseeko64@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #90112	; 0x16000
   112f8:	ldr	pc, [ip, #3548]!	; 0xddc

000112fc <endutxent@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #90112	; 0x16000
   11304:	ldr	pc, [ip, #3540]!	; 0xdd4

00011308 <setlocale@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #90112	; 0x16000
   11310:	ldr	pc, [ip, #3532]!	; 0xdcc

00011314 <strrchr@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #90112	; 0x16000
   1131c:	ldr	pc, [ip, #3524]!	; 0xdc4

00011320 <nl_langinfo@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #90112	; 0x16000
   11328:	ldr	pc, [ip, #3516]!	; 0xdbc

0001132c <freeaddrinfo@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #90112	; 0x16000
   11334:	ldr	pc, [ip, #3508]!	; 0xdb4

00011338 <getaddrinfo@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #90112	; 0x16000
   11340:	ldr	pc, [ip, #3500]!	; 0xdac

00011344 <bindtextdomain@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #90112	; 0x16000
   1134c:	ldr	pc, [ip, #3492]!	; 0xda4

00011350 <__xstat64@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #90112	; 0x16000
   11358:	ldr	pc, [ip, #3484]!	; 0xd9c

0001135c <strncmp@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #90112	; 0x16000
   11364:	ldr	pc, [ip, #3476]!	; 0xd94

00011368 <abort@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #90112	; 0x16000
   11370:	ldr	pc, [ip, #3468]!	; 0xd8c

00011374 <getutxent@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #90112	; 0x16000
   1137c:	ldr	pc, [ip, #3460]!	; 0xd84

00011380 <__assert_fail@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #90112	; 0x16000
   11388:	ldr	pc, [ip, #3452]!	; 0xd7c

Disassembly of section .text:

0001138c <.text>:
   1138c:	mov	fp, #0
   11390:	mov	lr, #0
   11394:	pop	{r1}		; (ldr r1, [sp], #4)
   11398:	mov	r2, sp
   1139c:	push	{r2}		; (str r2, [sp, #-4]!)
   113a0:	push	{r0}		; (str r0, [sp, #-4]!)
   113a4:	ldr	ip, [pc, #16]	; 113bc <__assert_fail@plt+0x3c>
   113a8:	push	{ip}		; (str ip, [sp, #-4]!)
   113ac:	ldr	r0, [pc, #12]	; 113c0 <__assert_fail@plt+0x40>
   113b0:	ldr	r3, [pc, #12]	; 113c4 <__assert_fail@plt+0x44>
   113b4:	bl	111e8 <__libc_start_main@plt>
   113b8:	bl	11368 <abort@plt>
   113bc:	andeq	r6, r1, r4, lsr #13
   113c0:	andeq	r1, r1, ip, ror r7
   113c4:	andeq	r6, r1, r4, asr #12
   113c8:	ldr	r3, [pc, #20]	; 113e4 <__assert_fail@plt+0x64>
   113cc:	ldr	r2, [pc, #20]	; 113e8 <__assert_fail@plt+0x68>
   113d0:	add	r3, pc, r3
   113d4:	ldr	r2, [r3, r2]
   113d8:	cmp	r2, #0
   113dc:	bxeq	lr
   113e0:	b	11218 <__gmon_start__@plt>
   113e4:	andeq	r6, r1, r8, lsr #24
   113e8:	andeq	r0, r0, r8, lsl #2
   113ec:	ldr	r0, [pc, #24]	; 1140c <__assert_fail@plt+0x8c>
   113f0:	ldr	r3, [pc, #24]	; 11410 <__assert_fail@plt+0x90>
   113f4:	cmp	r3, r0
   113f8:	bxeq	lr
   113fc:	ldr	r3, [pc, #16]	; 11414 <__assert_fail@plt+0x94>
   11400:	cmp	r3, #0
   11404:	bxeq	lr
   11408:	bx	r3
   1140c:	andeq	r8, r2, r8, ror #2
   11410:	andeq	r8, r2, r8, ror #2
   11414:	andeq	r0, r0, r0
   11418:	ldr	r0, [pc, #36]	; 11444 <__assert_fail@plt+0xc4>
   1141c:	ldr	r1, [pc, #36]	; 11448 <__assert_fail@plt+0xc8>
   11420:	sub	r1, r1, r0
   11424:	asr	r1, r1, #2
   11428:	add	r1, r1, r1, lsr #31
   1142c:	asrs	r1, r1, #1
   11430:	bxeq	lr
   11434:	ldr	r3, [pc, #16]	; 1144c <__assert_fail@plt+0xcc>
   11438:	cmp	r3, #0
   1143c:	bxeq	lr
   11440:	bx	r3
   11444:	andeq	r8, r2, r8, ror #2
   11448:	andeq	r8, r2, r8, ror #2
   1144c:	andeq	r0, r0, r0
   11450:	push	{r4, lr}
   11454:	ldr	r4, [pc, #24]	; 11474 <__assert_fail@plt+0xf4>
   11458:	ldrb	r3, [r4]
   1145c:	cmp	r3, #0
   11460:	popne	{r4, pc}
   11464:	bl	113ec <__assert_fail@plt+0x6c>
   11468:	mov	r3, #1
   1146c:	strb	r3, [r4]
   11470:	pop	{r4, pc}
   11474:	andeq	r8, r2, r0, lsl #3
   11478:	b	11418 <__assert_fail@plt+0x98>
   1147c:	push	{fp, lr}
   11480:	mov	fp, sp
   11484:	sub	sp, sp, #56	; 0x38
   11488:	mov	r4, r0
   1148c:	cmp	r0, #0
   11490:	bne	11738 <__assert_fail@plt+0x3b8>
   11494:	movw	r1, #26355	; 0x66f3
   11498:	mov	r0, #0
   1149c:	mov	r2, #5
   114a0:	movt	r1, #1
   114a4:	bl	11134 <dcgettext@plt>
   114a8:	mov	r1, r0
   114ac:	movw	r0, #33284	; 0x8204
   114b0:	movt	r0, #2
   114b4:	ldr	r2, [r0]
   114b8:	mov	r0, #1
   114bc:	bl	112c0 <__printf_chk@plt>
   114c0:	movw	r1, #26399	; 0x671f
   114c4:	mov	r0, #0
   114c8:	mov	r2, #5
   114cc:	movt	r1, #1
   114d0:	bl	11134 <dcgettext@plt>
   114d4:	movw	r7, #33148	; 0x817c
   114d8:	movt	r7, #2
   114dc:	ldr	r1, [r7]
   114e0:	bl	110a4 <fputs_unlocked@plt>
   114e4:	movw	r1, #26459	; 0x675b
   114e8:	mov	r0, #0
   114ec:	mov	r2, #5
   114f0:	movt	r1, #1
   114f4:	bl	11134 <dcgettext@plt>
   114f8:	ldr	r1, [r7]
   114fc:	bl	110a4 <fputs_unlocked@plt>
   11500:	movw	r1, #26654	; 0x681e
   11504:	mov	r0, #0
   11508:	mov	r2, #5
   1150c:	movt	r1, #1
   11510:	bl	11134 <dcgettext@plt>
   11514:	ldr	r1, [r7]
   11518:	bl	110a4 <fputs_unlocked@plt>
   1151c:	movw	r1, #26704	; 0x6850
   11520:	mov	r0, #0
   11524:	mov	r2, #5
   11528:	movt	r1, #1
   1152c:	bl	11134 <dcgettext@plt>
   11530:	ldr	r1, [r7]
   11534:	bl	110a4 <fputs_unlocked@plt>
   11538:	movw	r1, #26891	; 0x690b
   1153c:	mov	r0, #0
   11540:	mov	r2, #5
   11544:	movt	r1, #1
   11548:	bl	11134 <dcgettext@plt>
   1154c:	ldr	r1, [r7]
   11550:	bl	110a4 <fputs_unlocked@plt>
   11554:	movw	r1, #27114	; 0x69ea
   11558:	mov	r0, #0
   1155c:	mov	r2, #5
   11560:	movt	r1, #1
   11564:	bl	11134 <dcgettext@plt>
   11568:	ldr	r1, [r7]
   1156c:	bl	110a4 <fputs_unlocked@plt>
   11570:	movw	r1, #27277	; 0x6a8d
   11574:	mov	r0, #0
   11578:	mov	r2, #5
   1157c:	movt	r1, #1
   11580:	bl	11134 <dcgettext@plt>
   11584:	ldr	r1, [r7]
   11588:	bl	110a4 <fputs_unlocked@plt>
   1158c:	movw	r1, #27322	; 0x6aba
   11590:	mov	r0, #0
   11594:	mov	r2, #5
   11598:	movt	r1, #1
   1159c:	bl	11134 <dcgettext@plt>
   115a0:	ldr	r1, [r7]
   115a4:	bl	110a4 <fputs_unlocked@plt>
   115a8:	movw	r1, #27376	; 0x6af0
   115ac:	mov	r0, #0
   115b0:	mov	r2, #5
   115b4:	movt	r1, #1
   115b8:	bl	11134 <dcgettext@plt>
   115bc:	movw	r2, #27501	; 0x6b6d
   115c0:	movw	r3, #27515	; 0x6b7b
   115c4:	mov	r1, r0
   115c8:	mov	r0, #1
   115cc:	movt	r2, #1
   115d0:	movt	r3, #1
   115d4:	bl	112c0 <__printf_chk@plt>
   115d8:	movw	r0, #28712	; 0x7028
   115dc:	mov	r2, #48	; 0x30
   115e0:	mov	r6, sp
   115e4:	movw	r5, #27529	; 0x6b89
   115e8:	movt	r0, #1
   115ec:	movt	r5, #1
   115f0:	add	r1, r0, #32
   115f4:	add	r3, r0, #16
   115f8:	vld1.64	{d18-d19}, [r0], r2
   115fc:	vld1.64	{d16-d17}, [r1]
   11600:	vld1.64	{d20-d21}, [r3]
   11604:	vldr	d22, [r0]
   11608:	add	r1, r6, #32
   1160c:	add	r0, r6, #16
   11610:	vst1.64	{d16-d17}, [r1]
   11614:	movw	r1, #27677	; 0x6c1d
   11618:	vst1.64	{d20-d21}, [r0]
   1161c:	mov	r0, r6
   11620:	movt	r1, #1
   11624:	vst1.64	{d18-d19}, [r0], r2
   11628:	vstr	d22, [r0]
   1162c:	mov	r0, r5
   11630:	bl	110bc <strcmp@plt>
   11634:	cmp	r0, #0
   11638:	ldrne	r1, [r6, #8]!
   1163c:	cmpne	r1, #0
   11640:	bne	1162c <__assert_fail@plt+0x2ac>
   11644:	movw	r1, #27772	; 0x6c7c
   11648:	ldr	r6, [r6, #4]
   1164c:	mov	r0, #0
   11650:	mov	r2, #5
   11654:	movt	r1, #1
   11658:	bl	11134 <dcgettext@plt>
   1165c:	movw	r2, #27572	; 0x6bb4
   11660:	movw	r3, #27795	; 0x6c93
   11664:	mov	r1, r0
   11668:	mov	r0, #1
   1166c:	movt	r2, #1
   11670:	movt	r3, #1
   11674:	bl	112c0 <__printf_chk@plt>
   11678:	cmp	r6, #0
   1167c:	mov	r0, #5
   11680:	mov	r1, #0
   11684:	moveq	r6, r5
   11688:	bl	11308 <setlocale@plt>
   1168c:	cmp	r0, #0
   11690:	beq	116c8 <__assert_fail@plt+0x348>
   11694:	movw	r1, #27835	; 0x6cbb
   11698:	mov	r2, #3
   1169c:	movt	r1, #1
   116a0:	bl	1135c <strncmp@plt>
   116a4:	cmp	r0, #0
   116a8:	beq	116c8 <__assert_fail@plt+0x348>
   116ac:	movw	r1, #27839	; 0x6cbf
   116b0:	mov	r0, #0
   116b4:	mov	r2, #5
   116b8:	movt	r1, #1
   116bc:	bl	11134 <dcgettext@plt>
   116c0:	ldr	r1, [r7]
   116c4:	bl	110a4 <fputs_unlocked@plt>
   116c8:	movw	r1, #27910	; 0x6d06
   116cc:	mov	r0, #0
   116d0:	mov	r2, #5
   116d4:	movt	r1, #1
   116d8:	bl	11134 <dcgettext@plt>
   116dc:	movw	r2, #27795	; 0x6c93
   116e0:	mov	r1, r0
   116e4:	mov	r0, #1
   116e8:	mov	r3, r5
   116ec:	movt	r2, #1
   116f0:	bl	112c0 <__printf_chk@plt>
   116f4:	movw	r1, #27937	; 0x6d21
   116f8:	mov	r0, #0
   116fc:	mov	r2, #5
   11700:	movt	r1, #1
   11704:	bl	11134 <dcgettext@plt>
   11708:	mov	r1, r0
   1170c:	movw	r0, #27705	; 0x6c39
   11710:	movw	r3, #27987	; 0x6d53
   11714:	cmp	r6, r5
   11718:	mov	r2, r6
   1171c:	movt	r0, #1
   11720:	movt	r3, #1
   11724:	moveq	r3, r0
   11728:	mov	r0, #1
   1172c:	bl	112c0 <__printf_chk@plt>
   11730:	mov	r0, r4
   11734:	bl	11248 <exit@plt>
   11738:	movw	r0, #33144	; 0x8178
   1173c:	movw	r1, #26316	; 0x66cc
   11740:	mov	r2, #5
   11744:	movt	r0, #2
   11748:	movt	r1, #1
   1174c:	ldr	r5, [r0]
   11750:	mov	r0, #0
   11754:	bl	11134 <dcgettext@plt>
   11758:	mov	r2, r0
   1175c:	movw	r0, #33284	; 0x8204
   11760:	mov	r1, #1
   11764:	movt	r0, #2
   11768:	ldr	r3, [r0]
   1176c:	mov	r0, r5
   11770:	bl	112d8 <__fprintf_chk@plt>
   11774:	mov	r0, r4
   11778:	bl	11248 <exit@plt>
   1177c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11780:	add	fp, sp, #28
   11784:	sub	sp, sp, #44	; 0x2c
   11788:	mov	r5, r0
   1178c:	ldr	r0, [r1]
   11790:	mov	r4, r1
   11794:	bl	130e8 <__assert_fail@plt+0x1d68>
   11798:	movw	r1, #27987	; 0x6d53
   1179c:	mov	r0, #6
   117a0:	movt	r1, #1
   117a4:	bl	11308 <setlocale@plt>
   117a8:	movw	r6, #27576	; 0x6bb8
   117ac:	movw	r1, #27533	; 0x6b8d
   117b0:	movt	r6, #1
   117b4:	movt	r1, #1
   117b8:	mov	r0, r6
   117bc:	bl	11344 <bindtextdomain@plt>
   117c0:	mov	r0, r6
   117c4:	bl	11164 <textdomain@plt>
   117c8:	movw	r0, #11944	; 0x2ea8
   117cc:	movt	r0, #1
   117d0:	bl	166a8 <__assert_fail@plt+0x5328>
   117d4:	movw	r7, #33156	; 0x8184
   117d8:	movw	r9, #28424	; 0x6f08
   117dc:	mov	r6, #1
   117e0:	mov	sl, #1
   117e4:	movt	r7, #2
   117e8:	movt	r9, #1
   117ec:	add	r0, r7, #14
   117f0:	str	r0, [sp, #28]
   117f4:	add	r0, r7, #10
   117f8:	str	r0, [sp, #24]
   117fc:	add	r0, r7, #7
   11800:	str	r0, [sp, #36]	; 0x24
   11804:	add	r0, r7, #9
   11808:	str	r0, [sp, #32]
   1180c:	add	r0, r7, #8
   11810:	str	r0, [fp, #-32]	; 0xffffffe0
   11814:	add	r0, r7, #11
   11818:	str	r0, [sp, #20]
   1181c:	add	r0, r7, #3
   11820:	str	r0, [sp, #16]
   11824:	b	11834 <__assert_fail@plt+0x4b4>
   11828:	add	r0, r7, #12
   1182c:	mov	sl, r8
   11830:	strb	r6, [r0]
   11834:	movw	r2, #27557	; 0x6ba5
   11838:	mov	r8, sl
   1183c:	mov	sl, #0
   11840:	mov	r0, r5
   11844:	mov	r1, r4
   11848:	mov	r3, r9
   1184c:	movt	r2, #1
   11850:	str	sl, [sp]
   11854:	bl	11224 <getopt_long@plt>
   11858:	add	r1, r0, #3
   1185c:	cmp	r1, #122	; 0x7a
   11860:	bhi	11a64 <__assert_fail@plt+0x6e4>
   11864:	add	r2, pc, #4
   11868:	mov	r0, r7
   1186c:	ldr	pc, [r2, r1, lsl #2]
   11870:	andeq	r1, r1, r4, asr #23
   11874:	andeq	r1, r1, r0, lsr #24
   11878:	strdeq	r1, [r1], -r0
   1187c:			; <UNDEFINED> instruction: 0x00011bbc
   11880:			; <UNDEFINED> instruction: 0x00011bbc
   11884:			; <UNDEFINED> instruction: 0x00011bbc
   11888:			; <UNDEFINED> instruction: 0x00011bbc
   1188c:			; <UNDEFINED> instruction: 0x00011bbc
   11890:			; <UNDEFINED> instruction: 0x00011bbc
   11894:			; <UNDEFINED> instruction: 0x00011bbc
   11898:			; <UNDEFINED> instruction: 0x00011bbc
   1189c:			; <UNDEFINED> instruction: 0x00011bbc
   118a0:			; <UNDEFINED> instruction: 0x00011bbc
   118a4:			; <UNDEFINED> instruction: 0x00011bbc
   118a8:			; <UNDEFINED> instruction: 0x00011bbc
   118ac:			; <UNDEFINED> instruction: 0x00011bbc
   118b0:			; <UNDEFINED> instruction: 0x00011bbc
   118b4:			; <UNDEFINED> instruction: 0x00011bbc
   118b8:			; <UNDEFINED> instruction: 0x00011bbc
   118bc:			; <UNDEFINED> instruction: 0x00011bbc
   118c0:			; <UNDEFINED> instruction: 0x00011bbc
   118c4:			; <UNDEFINED> instruction: 0x00011bbc
   118c8:			; <UNDEFINED> instruction: 0x00011bbc
   118cc:			; <UNDEFINED> instruction: 0x00011bbc
   118d0:			; <UNDEFINED> instruction: 0x00011bbc
   118d4:			; <UNDEFINED> instruction: 0x00011bbc
   118d8:			; <UNDEFINED> instruction: 0x00011bbc
   118dc:			; <UNDEFINED> instruction: 0x00011bbc
   118e0:			; <UNDEFINED> instruction: 0x00011bbc
   118e4:			; <UNDEFINED> instruction: 0x00011bbc
   118e8:			; <UNDEFINED> instruction: 0x00011bbc
   118ec:			; <UNDEFINED> instruction: 0x00011bbc
   118f0:			; <UNDEFINED> instruction: 0x00011bbc
   118f4:			; <UNDEFINED> instruction: 0x00011bbc
   118f8:			; <UNDEFINED> instruction: 0x00011bbc
   118fc:			; <UNDEFINED> instruction: 0x00011bbc
   11900:			; <UNDEFINED> instruction: 0x00011bbc
   11904:			; <UNDEFINED> instruction: 0x00011bbc
   11908:			; <UNDEFINED> instruction: 0x00011bbc
   1190c:			; <UNDEFINED> instruction: 0x00011bbc
   11910:			; <UNDEFINED> instruction: 0x00011bbc
   11914:			; <UNDEFINED> instruction: 0x00011bbc
   11918:			; <UNDEFINED> instruction: 0x00011bbc
   1191c:			; <UNDEFINED> instruction: 0x00011bbc
   11920:			; <UNDEFINED> instruction: 0x00011bbc
   11924:			; <UNDEFINED> instruction: 0x00011bbc
   11928:			; <UNDEFINED> instruction: 0x00011bbc
   1192c:			; <UNDEFINED> instruction: 0x00011bbc
   11930:			; <UNDEFINED> instruction: 0x00011bbc
   11934:			; <UNDEFINED> instruction: 0x00011bbc
   11938:			; <UNDEFINED> instruction: 0x00011bbc
   1193c:			; <UNDEFINED> instruction: 0x00011bbc
   11940:			; <UNDEFINED> instruction: 0x00011bbc
   11944:			; <UNDEFINED> instruction: 0x00011bbc
   11948:			; <UNDEFINED> instruction: 0x00011bbc
   1194c:			; <UNDEFINED> instruction: 0x00011bbc
   11950:			; <UNDEFINED> instruction: 0x00011bbc
   11954:			; <UNDEFINED> instruction: 0x00011bbc
   11958:			; <UNDEFINED> instruction: 0x00011bbc
   1195c:			; <UNDEFINED> instruction: 0x00011bbc
   11960:			; <UNDEFINED> instruction: 0x00011bbc
   11964:			; <UNDEFINED> instruction: 0x00011bbc
   11968:			; <UNDEFINED> instruction: 0x00011bbc
   1196c:			; <UNDEFINED> instruction: 0x00011bbc
   11970:			; <UNDEFINED> instruction: 0x00011bbc
   11974:			; <UNDEFINED> instruction: 0x00011bbc
   11978:			; <UNDEFINED> instruction: 0x00011bbc
   1197c:			; <UNDEFINED> instruction: 0x00011bbc
   11980:			; <UNDEFINED> instruction: 0x00011bbc
   11984:			; <UNDEFINED> instruction: 0x00011bbc
   11988:			; <UNDEFINED> instruction: 0x00011bbc
   1198c:			; <UNDEFINED> instruction: 0x00011bbc
   11990:			; <UNDEFINED> instruction: 0x00011bbc
   11994:			; <UNDEFINED> instruction: 0x00011bbc
   11998:			; <UNDEFINED> instruction: 0x00011bbc
   1199c:	muleq	r1, r4, sl
   119a0:			; <UNDEFINED> instruction: 0x00011bbc
   119a4:			; <UNDEFINED> instruction: 0x00011bbc
   119a8:			; <UNDEFINED> instruction: 0x00011bbc
   119ac:			; <UNDEFINED> instruction: 0x00011bbc
   119b0:			; <UNDEFINED> instruction: 0x00011bbc
   119b4:			; <UNDEFINED> instruction: 0x00011bbc
   119b8:			; <UNDEFINED> instruction: 0x00011bbc
   119bc:			; <UNDEFINED> instruction: 0x00011bbc
   119c0:			; <UNDEFINED> instruction: 0x00011bbc
   119c4:			; <UNDEFINED> instruction: 0x00011bbc
   119c8:			; <UNDEFINED> instruction: 0x00011bbc
   119cc:	andeq	r1, r1, ip, asr sl
   119d0:			; <UNDEFINED> instruction: 0x00011bbc
   119d4:			; <UNDEFINED> instruction: 0x00011bbc
   119d8:			; <UNDEFINED> instruction: 0x00011bbc
   119dc:			; <UNDEFINED> instruction: 0x00011bbc
   119e0:			; <UNDEFINED> instruction: 0x00011bbc
   119e4:			; <UNDEFINED> instruction: 0x00011bbc
   119e8:			; <UNDEFINED> instruction: 0x00011bbc
   119ec:			; <UNDEFINED> instruction: 0x00011bbc
   119f0:			; <UNDEFINED> instruction: 0x00011bbc
   119f4:			; <UNDEFINED> instruction: 0x00011bbc
   119f8:			; <UNDEFINED> instruction: 0x00011bbc
   119fc:			; <UNDEFINED> instruction: 0x00011bbc
   11a00:			; <UNDEFINED> instruction: 0x00011ab0
   11a04:	andeq	r1, r1, r8, asr #21
   11a08:			; <UNDEFINED> instruction: 0x00011bbc
   11a0c:	andeq	r1, r1, r0, lsl #21
   11a10:			; <UNDEFINED> instruction: 0x00011bbc
   11a14:			; <UNDEFINED> instruction: 0x00011bbc
   11a18:			; <UNDEFINED> instruction: 0x00011bbc
   11a1c:			; <UNDEFINED> instruction: 0x00011bbc
   11a20:			; <UNDEFINED> instruction: 0x00011bbc
   11a24:			; <UNDEFINED> instruction: 0x00011bbc
   11a28:			; <UNDEFINED> instruction: 0x00011bbc
   11a2c:	andeq	r1, r1, ip, lsl #21
   11a30:	ldrdeq	r1, [r1], -r0
   11a34:			; <UNDEFINED> instruction: 0x00011bbc
   11a38:			; <UNDEFINED> instruction: 0x00011bbc
   11a3c:	muleq	r1, ip, sl
   11a40:	andeq	r1, r1, r8, lsr #16
   11a44:	andeq	r1, r1, r8, lsr #21
   11a48:	andeq	r1, r1, r8, ror #21
   11a4c:	andeq	r1, r1, r4, ror sl
   11a50:	ldrdeq	r1, [r1], -r8
   11a54:			; <UNDEFINED> instruction: 0x00011bbc
   11a58:	andeq	r1, r1, ip, asr sl
   11a5c:	ldr	r0, [sp, #36]	; 0x24
   11a60:	b	1182c <__assert_fail@plt+0x4ac>
   11a64:	cmp	r0, #256	; 0x100
   11a68:	bne	11bbc <__assert_fail@plt+0x83c>
   11a6c:	ldr	r0, [sp, #28]
   11a70:	b	1182c <__assert_fail@plt+0x4ac>
   11a74:	add	r0, r7, #5
   11a78:	strb	r6, [r0]
   11a7c:	b	11834 <__assert_fail@plt+0x4b4>
   11a80:	strb	r6, [r7, #8]
   11a84:	strb	r6, [r7, #1]
   11a88:	b	11ac4 <__assert_fail@plt+0x744>
   11a8c:	strb	r6, [r7, #2]
   11a90:	b	11adc <__assert_fail@plt+0x75c>
   11a94:	ldr	r0, [sp, #24]
   11a98:	b	1182c <__assert_fail@plt+0x4ac>
   11a9c:	ldr	r0, [sp, #16]
   11aa0:	strb	r6, [r0]
   11aa4:	b	11834 <__assert_fail@plt+0x4b4>
   11aa8:	strb	r6, [r7, #4]
   11aac:	b	11adc <__assert_fail@plt+0x75c>
   11ab0:	movw	r0, #257	; 0x101
   11ab4:	strb	r6, [r7, #8]
   11ab8:	movt	r0, #257	; 0x101
   11abc:	str	r0, [r7]
   11ac0:	str	r0, [r7, #4]
   11ac4:	ldr	r0, [sp, #32]
   11ac8:	strb	r6, [r0]
   11acc:	b	11834 <__assert_fail@plt+0x4b4>
   11ad0:	ldr	r0, [sp, #20]
   11ad4:	b	1182c <__assert_fail@plt+0x4ac>
   11ad8:	strb	r6, [r7, #6]
   11adc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11ae0:	strb	r6, [r0]
   11ae4:	b	11834 <__assert_fail@plt+0x4b4>
   11ae8:	add	r0, r7, #13
   11aec:	b	1182c <__assert_fail@plt+0x4ac>
   11af0:	tst	r8, #1
   11af4:	beq	11b0c <__assert_fail@plt+0x78c>
   11af8:	movw	r0, #33156	; 0x8184
   11afc:	mov	r1, #1
   11b00:	movt	r0, #2
   11b04:	strb	r1, [r0, #13]
   11b08:	strb	r1, [r0, #6]
   11b0c:	movw	r6, #33156	; 0x8184
   11b10:	movt	r6, #2
   11b14:	ldrb	r0, [r6, #9]
   11b18:	cmp	r0, #1
   11b1c:	moveq	r0, #0
   11b20:	strbeq	r0, [r6, #13]
   11b24:	mov	r0, #2
   11b28:	bl	12fbc <__assert_fail@plt+0x1c3c>
   11b2c:	movw	r7, #33136	; 0x8170
   11b30:	cmp	r0, #0
   11b34:	movw	r0, #27633	; 0x6bf1
   11b38:	movw	r2, #27648	; 0x6c00
   11b3c:	mov	r1, #12
   11b40:	movt	r0, #1
   11b44:	movt	r7, #2
   11b48:	movt	r2, #1
   11b4c:	movwne	r1, #16
   11b50:	movne	r2, r0
   11b54:	ldr	r0, [r7]
   11b58:	str	r2, [r6, #16]
   11b5c:	str	r1, [r6, #20]
   11b60:	sub	r1, r5, r0
   11b64:	add	r2, r1, #1
   11b68:	cmp	r2, #2
   11b6c:	bcc	11b88 <__assert_fail@plt+0x808>
   11b70:	cmp	r1, #1
   11b74:	beq	11ba4 <__assert_fail@plt+0x824>
   11b78:	cmp	r1, #2
   11b7c:	bne	11c28 <__assert_fail@plt+0x8a8>
   11b80:	mov	r0, #1
   11b84:	strb	r0, [r6, #11]
   11b88:	movw	r0, #27501	; 0x6b6d
   11b8c:	mov	r1, #1
   11b90:	movt	r0, #1
   11b94:	bl	11c6c <__assert_fail@plt+0x8ec>
   11b98:	mov	r0, #0
   11b9c:	sub	sp, fp, #28
   11ba0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ba4:	ldr	r0, [r4, r0, lsl #2]
   11ba8:	mov	r1, #0
   11bac:	bl	11c6c <__assert_fail@plt+0x8ec>
   11bb0:	mov	r0, #0
   11bb4:	sub	sp, fp, #28
   11bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bbc:	mov	r0, #1
   11bc0:	bl	1147c <__assert_fail@plt+0xfc>
   11bc4:	movw	r0, #33056	; 0x8120
   11bc8:	movw	r2, #27619	; 0x6be3
   11bcc:	movw	r6, #27586	; 0x6bc2
   11bd0:	movw	r7, #27603	; 0x6bd3
   11bd4:	mov	r1, #0
   11bd8:	movt	r0, #2
   11bdc:	movt	r2, #1
   11be0:	movt	r6, #1
   11be4:	movt	r7, #1
   11be8:	ldr	r3, [r0]
   11bec:	movw	r0, #33148	; 0x817c
   11bf0:	stm	sp, {r6, r7}
   11bf4:	str	r2, [sp, #8]
   11bf8:	movw	r2, #27572	; 0x6bb4
   11bfc:	str	r1, [sp, #12]
   11c00:	movw	r1, #27529	; 0x6b89
   11c04:	movt	r0, #2
   11c08:	movt	r1, #1
   11c0c:	movt	r2, #1
   11c10:	ldr	r0, [r0]
   11c14:	bl	158b0 <__assert_fail@plt+0x4530>
   11c18:	mov	r0, #0
   11c1c:	bl	11248 <exit@plt>
   11c20:	mov	r0, #0
   11c24:	bl	1147c <__assert_fail@plt+0xfc>
   11c28:	movw	r1, #27660	; 0x6c0c
   11c2c:	mov	r0, #0
   11c30:	mov	r2, #5
   11c34:	movt	r1, #1
   11c38:	bl	11134 <dcgettext@plt>
   11c3c:	mov	r5, r0
   11c40:	ldr	r0, [r7]
   11c44:	add	r0, r4, r0, lsl #2
   11c48:	ldr	r0, [r0, #8]
   11c4c:	bl	150ac <__assert_fail@plt+0x3d2c>
   11c50:	mov	r3, r0
   11c54:	mov	r0, #0
   11c58:	mov	r1, #0
   11c5c:	mov	r2, r5
   11c60:	bl	111b8 <error@plt>
   11c64:	mov	r0, #1
   11c68:	bl	1147c <__assert_fail@plt+0xfc>
   11c6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c70:	add	fp, sp, #28
   11c74:	sub	sp, sp, #484	; 0x1e4
   11c78:	mov	r3, r1
   11c7c:	add	r1, sp, #52	; 0x34
   11c80:	add	r2, sp, #48	; 0x30
   11c84:	mov	r4, r0
   11c88:	bl	15128 <__assert_fail@plt+0x3da8>
   11c8c:	cmp	r0, #0
   11c90:	bne	12ae4 <__assert_fail@plt+0x1764>
   11c94:	movw	sl, #33156	; 0x8184
   11c98:	ldr	r4, [sp, #48]	; 0x30
   11c9c:	ldr	r8, [sp, #52]	; 0x34
   11ca0:	movt	sl, #2
   11ca4:	ldrb	r0, [sl, #12]
   11ca8:	cmp	r0, #1
   11cac:	bne	11d70 <__assert_fail@plt+0x9f0>
   11cb0:	mov	r5, #0
   11cb4:	cmp	r8, #0
   11cb8:	beq	11d48 <__assert_fail@plt+0x9c8>
   11cbc:	movw	r7, #27987	; 0x6d53
   11cc0:	movw	r9, #28093	; 0x6dbd
   11cc4:	movw	sl, #28242	; 0x6e52
   11cc8:	movt	r7, #1
   11ccc:	movt	r9, #1
   11cd0:	movt	sl, #1
   11cd4:	ldrb	r0, [r4, #44]	; 0x2c
   11cd8:	sub	r8, r8, #1
   11cdc:	cmp	r0, #0
   11ce0:	bne	11d00 <__assert_fail@plt+0x980>
   11ce4:	add	r4, r4, #384	; 0x180
   11ce8:	cmp	r8, #0
   11cec:	beq	11d48 <__assert_fail@plt+0x9c8>
   11cf0:	ldrb	r0, [r4, #44]	; 0x2c
   11cf4:	sub	r8, r8, #1
   11cf8:	cmp	r0, #0
   11cfc:	beq	11ce4 <__assert_fail@plt+0x964>
   11d00:	ldrh	r0, [r4]
   11d04:	cmp	r0, #7
   11d08:	bne	11ce4 <__assert_fail@plt+0x964>
   11d0c:	mov	r0, r4
   11d10:	bl	150c4 <__assert_fail@plt+0x3d44>
   11d14:	mov	r6, r0
   11d18:	mov	r0, #1
   11d1c:	mov	r1, r9
   11d20:	mov	r2, r7
   11d24:	mov	r3, r6
   11d28:	bl	112c0 <__printf_chk@plt>
   11d2c:	mov	r0, r6
   11d30:	bl	12f94 <__assert_fail@plt+0x1c14>
   11d34:	add	r5, r5, #1
   11d38:	mov	r7, sl
   11d3c:	add	r4, r4, #384	; 0x180
   11d40:	cmp	r8, #0
   11d44:	bne	11cf0 <__assert_fail@plt+0x970>
   11d48:	movw	r1, #28098	; 0x6dc2
   11d4c:	mov	r0, #0
   11d50:	mov	r2, #5
   11d54:	movt	r1, #1
   11d58:	bl	11134 <dcgettext@plt>
   11d5c:	mov	r1, r0
   11d60:	mov	r0, #1
   11d64:	mov	r2, r5
   11d68:	bl	112c0 <__printf_chk@plt>
   11d6c:	b	12ad4 <__assert_fail@plt+0x1754>
   11d70:	ldrb	r0, [sl, #10]
   11d74:	cmp	r0, #1
   11d78:	bne	11e4c <__assert_fail@plt+0xacc>
   11d7c:	movw	r1, #28118	; 0x6dd6
   11d80:	mov	r0, #0
   11d84:	mov	r2, #5
   11d88:	movt	r1, #1
   11d8c:	bl	11134 <dcgettext@plt>
   11d90:	movw	r1, #28123	; 0x6ddb
   11d94:	str	r0, [sp, #44]	; 0x2c
   11d98:	mov	r0, #0
   11d9c:	mov	r2, #5
   11da0:	movt	r1, #1
   11da4:	bl	11134 <dcgettext@plt>
   11da8:	movw	r1, #28128	; 0x6de0
   11dac:	mov	r9, r0
   11db0:	mov	r0, #0
   11db4:	mov	r2, #5
   11db8:	movt	r1, #1
   11dbc:	bl	11134 <dcgettext@plt>
   11dc0:	movw	r1, #28133	; 0x6de5
   11dc4:	mov	sl, r0
   11dc8:	mov	r0, #0
   11dcc:	mov	r2, #5
   11dd0:	movt	r1, #1
   11dd4:	bl	11134 <dcgettext@plt>
   11dd8:	movw	r1, #28138	; 0x6dea
   11ddc:	mov	r5, r0
   11de0:	mov	r0, #0
   11de4:	mov	r2, #5
   11de8:	movt	r1, #1
   11dec:	bl	11134 <dcgettext@plt>
   11df0:	movw	r1, #28142	; 0x6dee
   11df4:	mov	r6, r0
   11df8:	mov	r0, #0
   11dfc:	mov	r2, #5
   11e00:	movt	r1, #1
   11e04:	bl	11134 <dcgettext@plt>
   11e08:	movw	r1, #28150	; 0x6df6
   11e0c:	mov	r7, r0
   11e10:	mov	r0, #0
   11e14:	mov	r2, #5
   11e18:	movt	r1, #1
   11e1c:	bl	11134 <dcgettext@plt>
   11e20:	add	r1, sp, #8
   11e24:	stm	sp, {r9, sl}
   11e28:	movw	sl, #33156	; 0x8184
   11e2c:	mov	r2, #32
   11e30:	mvn	r3, #0
   11e34:	stm	r1, {r5, r6, r7}
   11e38:	ldr	r1, [sp, #44]	; 0x2c
   11e3c:	str	r0, [sp, #20]
   11e40:	mvn	r0, #0
   11e44:	movt	sl, #2
   11e48:	bl	12b34 <__assert_fail@plt+0x17b4>
   11e4c:	ldrb	r0, [sl, #11]
   11e50:	cmp	r0, #1
   11e54:	bne	11e84 <__assert_fail@plt+0xb04>
   11e58:	mov	r0, #0
   11e5c:	bl	11260 <ttyname@plt>
   11e60:	cmp	r0, #0
   11e64:	beq	12ad4 <__assert_fail@plt+0x1754>
   11e68:	movw	r1, #28112	; 0x6dd0
   11e6c:	mov	r2, #5
   11e70:	mov	r9, r0
   11e74:	movt	r1, #1
   11e78:	bl	1135c <strncmp@plt>
   11e7c:	cmp	r0, #0
   11e80:	addeq	r9, r9, #5
   11e84:	cmp	r8, #0
   11e88:	beq	12ad4 <__assert_fail@plt+0x1754>
   11e8c:	sub	r0, fp, #184	; 0xb8
   11e90:	str	r9, [sp, #32]
   11e94:	orr	r0, r0, #5
   11e98:	str	r0, [sp, #24]
   11e9c:	mov	r0, #-2147483648	; 0x80000000
   11ea0:	str	r0, [sp, #44]	; 0x2c
   11ea4:	ldrb	r0, [sl, #11]
   11ea8:	cmp	r0, #1
   11eac:	bne	11ef4 <__assert_fail@plt+0xb74>
   11eb0:	add	r1, r4, #8
   11eb4:	mov	r0, r9
   11eb8:	mov	r2, #32
   11ebc:	bl	1135c <strncmp@plt>
   11ec0:	cmp	r0, #0
   11ec4:	beq	11ef4 <__assert_fail@plt+0xb74>
   11ec8:	ldrh	r0, [r4]
   11ecc:	sub	r8, r8, #1
   11ed0:	cmp	r0, #2
   11ed4:	ldreq	r0, [r4, #340]	; 0x154
   11ed8:	add	r4, r4, #384	; 0x180
   11edc:	streq	r0, [sp, #44]	; 0x2c
   11ee0:	cmp	r8, #0
   11ee4:	beq	12ad4 <__assert_fail@plt+0x1754>
   11ee8:	ldrb	r0, [sl, #11]
   11eec:	cmp	r0, #1
   11ef0:	beq	11eb0 <__assert_fail@plt+0xb30>
   11ef4:	ldrb	r0, [sl, #6]
   11ef8:	add	r7, r4, #332	; 0x14c
   11efc:	cmp	r0, #1
   11f00:	bne	120e0 <__assert_fail@plt+0xd60>
   11f04:	mov	r6, r4
   11f08:	ldrb	r0, [r6, #44]!	; 0x2c
   11f0c:	cmp	r0, #0
   11f10:	beq	120e0 <__assert_fail@plt+0xd60>
   11f14:	ldrh	r0, [r4]
   11f18:	cmp	r0, #7
   11f1c:	bne	120e0 <__assert_fail@plt+0xd60>
   11f20:	ldr	r0, [r4, #4]
   11f24:	movw	r3, #28212	; 0x6e34
   11f28:	mov	r1, #1
   11f2c:	mov	r2, #12
   11f30:	movt	r3, #1
   11f34:	str	r0, [sp]
   11f38:	sub	r0, fp, #196	; 0xc4
   11f3c:	bl	11290 <__sprintf_chk@plt>
   11f40:	mov	r0, r4
   11f44:	ldrb	r1, [r0, #8]!
   11f48:	str	r0, [sp, #40]	; 0x28
   11f4c:	sub	r0, fp, #184	; 0xb8
   11f50:	cmp	r1, #47	; 0x2f
   11f54:	beq	11f7c <__assert_fail@plt+0xbfc>
   11f58:	mov	r0, #47	; 0x2f
   11f5c:	ldr	r2, [sp, #24]
   11f60:	cmp	r1, #0
   11f64:	strh	r0, [fp, #-180]	; 0xffffff4c
   11f68:	movw	r0, #25647	; 0x642f
   11f6c:	movt	r0, #30309	; 0x7665
   11f70:	str	r0, [fp, #-184]	; 0xffffff48
   11f74:	mov	r0, r2
   11f78:	beq	11fb4 <__assert_fail@plt+0xc34>
   11f7c:	add	r2, r4, #40	; 0x28
   11f80:	mov	r5, #0
   11f84:	strb	r1, [r0, r5]
   11f88:	add	r1, r4, r5
   11f8c:	mov	r3, r5
   11f90:	add	r1, r1, #9
   11f94:	cmp	r1, r2
   11f98:	bcs	11fac <__assert_fail@plt+0xc2c>
   11f9c:	ldrb	r1, [r1]
   11fa0:	add	r5, r3, #1
   11fa4:	cmp	r1, #0
   11fa8:	bne	11f84 <__assert_fail@plt+0xc04>
   11fac:	add	r0, r0, r3
   11fb0:	add	r2, r0, #1
   11fb4:	mov	r0, #0
   11fb8:	sub	r1, fp, #184	; 0xb8
   11fbc:	strb	r0, [r2]
   11fc0:	mov	r0, #3
   11fc4:	sub	r2, fp, #136	; 0x88
   11fc8:	bl	11350 <__xstat64@plt>
   11fcc:	mov	r1, #63	; 0x3f
   11fd0:	cmp	r0, #0
   11fd4:	beq	12524 <__assert_fail@plt+0x11a4>
   11fd8:	movw	r3, #28221	; 0x6e3d
   11fdc:	str	r1, [sp, #36]	; 0x24
   11fe0:	sub	r0, fp, #143	; 0x8f
   11fe4:	mov	r1, #1
   11fe8:	mov	r2, #7
   11fec:	movt	r3, #1
   11ff0:	bl	11290 <__sprintf_chk@plt>
   11ff4:	ldrb	r3, [r4, #76]	; 0x4c
   11ff8:	cmp	r3, #0
   11ffc:	beq	126c8 <__assert_fail@plt+0x1348>
   12000:	mov	r2, #0
   12004:	add	r0, sp, #56	; 0x38
   12008:	mov	r1, r2
   1200c:	strb	r3, [r0, r2]
   12010:	add	r2, r4, r2
   12014:	add	r3, r2, #77	; 0x4d
   12018:	cmp	r3, r7
   1201c:	bcs	12030 <__assert_fail@plt+0xcb0>
   12020:	ldrb	r3, [r3]
   12024:	add	r2, r1, #1
   12028:	cmp	r3, #0
   1202c:	bne	12008 <__assert_fail@plt+0xc88>
   12030:	add	r1, r0, r1
   12034:	mov	r7, #0
   12038:	strb	r7, [r1, #1]
   1203c:	mov	r1, #58	; 0x3a
   12040:	bl	11278 <strchr@plt>
   12044:	cmp	r0, #0
   12048:	mov	r9, #0
   1204c:	movne	r1, #0
   12050:	strbne	r1, [r0], #1
   12054:	movne	r9, r0
   12058:	ldrb	r0, [sp, #56]	; 0x38
   1205c:	cmp	r0, #0
   12060:	beq	1207c <__assert_fail@plt+0xcfc>
   12064:	ldrb	r0, [sl, #14]
   12068:	cmp	r0, #1
   1206c:	bne	1207c <__assert_fail@plt+0xcfc>
   12070:	add	r0, sp, #56	; 0x38
   12074:	bl	12d4c <__assert_fail@plt+0x19cc>
   12078:	mov	r7, r0
   1207c:	cmp	r7, #0
   12080:	add	r0, sp, #56	; 0x38
   12084:	ldr	r5, [sl, #28]
   12088:	str	r7, [sp, #28]
   1208c:	moveq	r7, r0
   12090:	mov	r0, r7
   12094:	bl	1126c <strlen@plt>
   12098:	mov	sl, r0
   1209c:	cmp	r9, #0
   120a0:	beq	12610 <__assert_fail@plt+0x1290>
   120a4:	mov	r0, r9
   120a8:	bl	1126c <strlen@plt>
   120ac:	add	r0, sl, r0
   120b0:	movw	sl, #33156	; 0x8184
   120b4:	add	r0, r0, #4
   120b8:	movt	sl, #2
   120bc:	cmp	r5, r0
   120c0:	bcs	12648 <__assert_fail@plt+0x12c8>
   120c4:	str	r0, [sl, #28]
   120c8:	ldr	r0, [sl, #24]
   120cc:	bl	12f94 <__assert_fail@plt+0x1c14>
   120d0:	ldr	r0, [sl, #28]
   120d4:	bl	15ae4 <__assert_fail@plt+0x4764>
   120d8:	str	r0, [sl, #24]
   120dc:	b	1264c <__assert_fail@plt+0x12cc>
   120e0:	ldrb	r0, [sl, #4]
   120e4:	cmp	r0, #1
   120e8:	bne	1221c <__assert_fail@plt+0xe9c>
   120ec:	ldrh	r0, [r4]
   120f0:	cmp	r0, #1
   120f4:	bne	1221c <__assert_fail@plt+0xe9c>
   120f8:	ldr	r7, [r4, #4]
   120fc:	ldr	r5, [sl, #32]
   12100:	asr	r0, r7, #31
   12104:	cmp	r5, #0
   12108:	add	r6, r7, r0, lsr #24
   1210c:	bne	12138 <__assert_fail@plt+0xdb8>
   12110:	movw	r1, #28340	; 0x6eb4
   12114:	mov	r0, #0
   12118:	mov	r2, #5
   1211c:	movt	r1, #1
   12120:	bl	11134 <dcgettext@plt>
   12124:	bl	1126c <strlen@plt>
   12128:	add	r0, r0, #3
   1212c:	bl	15ae4 <__assert_fail@plt+0x4764>
   12130:	mov	r5, r0
   12134:	str	r0, [sl, #32]
   12138:	movw	r1, #28340	; 0x6eb4
   1213c:	mov	r0, #0
   12140:	mov	r2, #5
   12144:	asr	r6, r6, #8
   12148:	movt	r1, #1
   1214c:	bl	11134 <dcgettext@plt>
   12150:	movw	r3, #28350	; 0x6ebe
   12154:	uxtb	r1, r7
   12158:	stm	sp, {r0, r1}
   1215c:	mov	r0, r5
   12160:	mov	r1, #1
   12164:	mvn	r2, #0
   12168:	movt	r3, #1
   1216c:	bl	11290 <__sprintf_chk@plt>
   12170:	ldr	r5, [sl, #36]	; 0x24
   12174:	cmp	r5, #0
   12178:	bne	121a4 <__assert_fail@plt+0xe24>
   1217c:	movw	r1, #28356	; 0x6ec4
   12180:	mov	r0, #0
   12184:	mov	r2, #5
   12188:	movt	r1, #1
   1218c:	bl	11134 <dcgettext@plt>
   12190:	bl	1126c <strlen@plt>
   12194:	add	r0, r0, #2
   12198:	bl	15ae4 <__assert_fail@plt+0x4764>
   1219c:	mov	r5, r0
   121a0:	str	r0, [sl, #36]	; 0x24
   121a4:	movw	r1, #28356	; 0x6ec4
   121a8:	mov	r0, #0
   121ac:	mov	r2, #5
   121b0:	movt	r1, #1
   121b4:	bl	11134 <dcgettext@plt>
   121b8:	uxtb	r6, r6
   121bc:	movw	r3, #28362	; 0x6eca
   121c0:	mvn	r2, #0
   121c4:	movt	r3, #1
   121c8:	cmp	r6, #78	; 0x4e
   121cc:	mov	r1, r6
   121d0:	movweq	r1, #83	; 0x53
   121d4:	stm	sp, {r0, r1}
   121d8:	mov	r0, r5
   121dc:	mov	r1, #1
   121e0:	bl	11290 <__sprintf_chk@plt>
   121e4:	ldr	r0, [r4, #340]	; 0x154
   121e8:	ldr	r7, [sl, #32]
   121ec:	str	r0, [sp, #56]	; 0x38
   121f0:	add	r0, sp, #56	; 0x38
   121f4:	bl	1120c <localtime@plt>
   121f8:	cmp	r0, #0
   121fc:	beq	124d0 <__assert_fail@plt+0x1150>
   12200:	ldr	r2, [sl, #16]
   12204:	add	r5, sl, #50	; 0x32
   12208:	mov	r3, r0
   1220c:	mov	r1, #33	; 0x21
   12210:	mov	r0, r5
   12214:	bl	111f4 <strftime@plt>
   12218:	b	124e4 <__assert_fail@plt+0x1164>
   1221c:	ldrb	r0, [sl]
   12220:	cmp	r0, #1
   12224:	bne	12244 <__assert_fail@plt+0xec4>
   12228:	ldrh	r0, [r4]
   1222c:	cmp	r0, #2
   12230:	bne	12244 <__assert_fail@plt+0xec4>
   12234:	movw	r1, #28367	; 0x6ecf
   12238:	mov	r0, #0
   1223c:	movt	r1, #1
   12240:	b	12268 <__assert_fail@plt+0xee8>
   12244:	ldrb	r0, [sl, #5]
   12248:	cmp	r0, #1
   1224c:	bne	122a8 <__assert_fail@plt+0xf28>
   12250:	ldrh	r0, [r4]
   12254:	cmp	r0, #3
   12258:	bne	122a8 <__assert_fail@plt+0xf28>
   1225c:	movw	r1, #28379	; 0x6edb
   12260:	mov	r0, #0
   12264:	movt	r1, #1
   12268:	mov	r2, #5
   1226c:	bl	11134 <dcgettext@plt>
   12270:	mov	r5, r0
   12274:	ldr	r0, [r4, #340]	; 0x154
   12278:	str	r0, [sp, #56]	; 0x38
   1227c:	add	r0, sp, #56	; 0x38
   12280:	bl	1120c <localtime@plt>
   12284:	cmp	r0, #0
   12288:	beq	124a0 <__assert_fail@plt+0x1120>
   1228c:	ldr	r2, [sl, #16]
   12290:	add	r6, sl, #50	; 0x32
   12294:	mov	r3, r0
   12298:	mov	r1, #33	; 0x21
   1229c:	mov	r0, r6
   122a0:	bl	111f4 <strftime@plt>
   122a4:	b	124b4 <__assert_fail@plt+0x1134>
   122a8:	ldrb	r0, [sl, #3]
   122ac:	cmp	r0, #1
   122b0:	bne	12350 <__assert_fail@plt+0xfd0>
   122b4:	ldrh	r0, [r4]
   122b8:	cmp	r0, #5
   122bc:	bne	12350 <__assert_fail@plt+0xfd0>
   122c0:	movw	r5, #28392	; 0x6ee8
   122c4:	mov	r0, #0
   122c8:	mov	r2, #5
   122cc:	movt	r5, #1
   122d0:	mov	r1, r5
   122d4:	bl	11134 <dcgettext@plt>
   122d8:	bl	1126c <strlen@plt>
   122dc:	add	r0, r0, #5
   122e0:	bl	15ae4 <__assert_fail@plt+0x4764>
   122e4:	mov	r6, r0
   122e8:	mov	r0, #0
   122ec:	mov	r1, r5
   122f0:	mov	r2, #5
   122f4:	bl	11134 <dcgettext@plt>
   122f8:	mov	r1, r0
   122fc:	mov	r0, r6
   12300:	bl	11128 <stpcpy@plt>
   12304:	ldrb	r2, [r4, #40]	; 0x28
   12308:	cmp	r2, #0
   1230c:	beq	12640 <__assert_fail@plt+0x12c0>
   12310:	mov	r1, r0
   12314:	strb	r2, [r1], #1
   12318:	ldrb	r2, [r4, #41]	; 0x29
   1231c:	cmp	r2, #0
   12320:	beq	127e0 <__assert_fail@plt+0x1460>
   12324:	strb	r2, [r0, #1]
   12328:	ldrb	r1, [r4, #42]	; 0x2a
   1232c:	cmp	r1, #0
   12330:	beq	127dc <__assert_fail@plt+0x145c>
   12334:	strb	r1, [r0, #2]
   12338:	ldrb	r1, [r4, #43]	; 0x2b
   1233c:	cmp	r1, #0
   12340:	addeq	r1, r0, #3
   12344:	strbne	r1, [r0, #3]
   12348:	addne	r1, r0, #4
   1234c:	b	127e0 <__assert_fail@plt+0x1460>
   12350:	ldrb	r0, [sl, #2]
   12354:	cmp	r0, #1
   12358:	bne	123f8 <__assert_fail@plt+0x1078>
   1235c:	ldrh	r0, [r4]
   12360:	cmp	r0, #6
   12364:	bne	123f8 <__assert_fail@plt+0x1078>
   12368:	movw	r5, #28392	; 0x6ee8
   1236c:	mov	r0, #0
   12370:	mov	r2, #5
   12374:	movt	r5, #1
   12378:	mov	r1, r5
   1237c:	bl	11134 <dcgettext@plt>
   12380:	bl	1126c <strlen@plt>
   12384:	add	r0, r0, #5
   12388:	bl	15ae4 <__assert_fail@plt+0x4764>
   1238c:	mov	r9, r0
   12390:	mov	r0, #0
   12394:	mov	r1, r5
   12398:	mov	r2, #5
   1239c:	bl	11134 <dcgettext@plt>
   123a0:	mov	r1, r0
   123a4:	mov	r0, r9
   123a8:	bl	11128 <stpcpy@plt>
   123ac:	ldrb	r2, [r4, #40]	; 0x28
   123b0:	cmp	r2, #0
   123b4:	beq	126dc <__assert_fail@plt+0x135c>
   123b8:	mov	r1, r0
   123bc:	strb	r2, [r1], #1
   123c0:	ldrb	r2, [r4, #41]	; 0x29
   123c4:	cmp	r2, #0
   123c8:	beq	12898 <__assert_fail@plt+0x1518>
   123cc:	strb	r2, [r0, #1]
   123d0:	ldrb	r1, [r4, #42]	; 0x2a
   123d4:	cmp	r1, #0
   123d8:	beq	12894 <__assert_fail@plt+0x1514>
   123dc:	strb	r1, [r0, #2]
   123e0:	ldrb	r1, [r4, #43]	; 0x2b
   123e4:	cmp	r1, #0
   123e8:	addeq	r1, r0, #3
   123ec:	strbne	r1, [r0, #3]
   123f0:	addne	r1, r0, #4
   123f4:	b	12898 <__assert_fail@plt+0x1518>
   123f8:	ldrb	r0, [sl, #1]
   123fc:	cmp	r0, #1
   12400:	bne	11ec8 <__assert_fail@plt+0xb48>
   12404:	ldrh	r0, [r4]
   12408:	cmp	r0, #8
   1240c:	bne	11ec8 <__assert_fail@plt+0xb48>
   12410:	movw	r5, #28392	; 0x6ee8
   12414:	mov	r0, #0
   12418:	mov	r2, #5
   1241c:	movt	r5, #1
   12420:	mov	r1, r5
   12424:	bl	11134 <dcgettext@plt>
   12428:	bl	1126c <strlen@plt>
   1242c:	add	r0, r0, #5
   12430:	bl	15ae4 <__assert_fail@plt+0x4764>
   12434:	mov	r9, r0
   12438:	mov	r0, #0
   1243c:	mov	r1, r5
   12440:	mov	r2, #5
   12444:	bl	11134 <dcgettext@plt>
   12448:	mov	r1, r0
   1244c:	mov	r0, r9
   12450:	bl	11128 <stpcpy@plt>
   12454:	ldrb	r2, [r4, #40]	; 0x28
   12458:	cmp	r2, #0
   1245c:	beq	127a4 <__assert_fail@plt+0x1424>
   12460:	mov	r1, r0
   12464:	strb	r2, [r1], #1
   12468:	ldrb	r2, [r4, #41]	; 0x29
   1246c:	cmp	r2, #0
   12470:	beq	12958 <__assert_fail@plt+0x15d8>
   12474:	strb	r2, [r0, #1]
   12478:	ldrb	r1, [r4, #42]	; 0x2a
   1247c:	cmp	r1, #0
   12480:	beq	12954 <__assert_fail@plt+0x15d4>
   12484:	strb	r1, [r0, #2]
   12488:	ldrb	r1, [r4, #43]	; 0x2b
   1248c:	cmp	r1, #0
   12490:	addeq	r1, r0, #3
   12494:	strbne	r1, [r0, #3]
   12498:	addne	r1, r0, #4
   1249c:	b	12958 <__assert_fail@plt+0x15d8>
   124a0:	ldr	r0, [sp, #56]	; 0x38
   124a4:	add	r2, sl, #50	; 0x32
   124a8:	asr	r1, r0, #31
   124ac:	bl	13028 <__assert_fail@plt+0x1ca8>
   124b0:	mov	r6, r0
   124b4:	movw	r1, #27987	; 0x6d53
   124b8:	stm	sp, {r5, r6}
   124bc:	movt	r1, #1
   124c0:	str	r1, [sp, #8]
   124c4:	str	r1, [sp, #12]
   124c8:	str	r1, [sp, #16]
   124cc:	b	12510 <__assert_fail@plt+0x1190>
   124d0:	ldr	r0, [sp, #56]	; 0x38
   124d4:	add	r2, sl, #50	; 0x32
   124d8:	asr	r1, r0, #31
   124dc:	bl	13028 <__assert_fail@plt+0x1ca8>
   124e0:	mov	r5, r0
   124e4:	sub	r1, r6, #32
   124e8:	ldr	r0, [sl, #36]	; 0x24
   124ec:	str	r7, [sp]
   124f0:	str	r5, [sp, #4]
   124f4:	cmp	r1, #95	; 0x5f
   124f8:	movw	r1, #27987	; 0x6d53
   124fc:	movt	r1, #1
   12500:	movcs	r0, r1
   12504:	str	r1, [sp, #8]
   12508:	str	r1, [sp, #12]
   1250c:	str	r0, [sp, #16]
   12510:	mvn	r0, #0
   12514:	mov	r2, #32
   12518:	mvn	r3, #0
   1251c:	str	r1, [sp, #20]
   12520:	b	1279c <__assert_fail@plt+0x141c>
   12524:	ldrb	r0, [fp, #-120]	; 0xffffff88
   12528:	ldr	r5, [fp, #-64]	; 0xffffffc0
   1252c:	mov	r1, #43	; 0x2b
   12530:	tst	r0, #16
   12534:	movweq	r1, #45	; 0x2d
   12538:	cmp	r5, #0
   1253c:	beq	11fd8 <__assert_fail@plt+0xc58>
   12540:	movw	r0, #33052	; 0x811c
   12544:	str	r1, [sp, #36]	; 0x24
   12548:	movt	r0, #2
   1254c:	ldr	r0, [r0]
   12550:	cmp	r0, #-2147483648	; 0x80000000
   12554:	bne	12564 <__assert_fail@plt+0x11e4>
   12558:	movw	r0, #33052	; 0x811c
   1255c:	movt	r0, #2
   12560:	bl	1111c <time@plt>
   12564:	ldr	r0, [sp, #44]	; 0x2c
   12568:	cmp	r5, r0
   1256c:	ble	12684 <__assert_fail@plt+0x1304>
   12570:	movw	r0, #33052	; 0x811c
   12574:	movt	r0, #2
   12578:	ldr	r0, [r0]
   1257c:	cmp	r0, r5
   12580:	blt	12684 <__assert_fail@plt+0x1304>
   12584:	movw	r1, #44672	; 0xae80
   12588:	movt	r1, #65534	; 0xfffe
   1258c:	add	r1, r0, r1
   12590:	cmp	r1, r5
   12594:	bge	12684 <__assert_fail@plt+0x1304>
   12598:	sub	r0, r0, r5
   1259c:	movw	r5, #28238	; 0x6e4e
   125a0:	movt	r5, #1
   125a4:	cmp	r0, #60	; 0x3c
   125a8:	blt	1269c <__assert_fail@plt+0x131c>
   125ac:	movw	r1, #20864	; 0x5180
   125b0:	movt	r1, #1
   125b4:	cmp	r0, r1
   125b8:	bge	12b14 <__assert_fail@plt+0x1794>
   125bc:	movw	r1, #46021	; 0xb3c5
   125c0:	movw	r3, #28324	; 0x6ea4
   125c4:	add	r5, sl, #44	; 0x2c
   125c8:	movt	r1, #37282	; 0x91a2
   125cc:	movt	r3, #1
   125d0:	umull	r1, r2, r0, r1
   125d4:	lsr	r1, r2, #11
   125d8:	mov	r2, #3600	; 0xe10
   125dc:	mls	r0, r1, r2, r0
   125e0:	movw	r2, #34953	; 0x8889
   125e4:	str	r1, [sp]
   125e8:	mov	r1, #1
   125ec:	movt	r2, #34952	; 0x8888
   125f0:	uxth	r0, r0
   125f4:	umull	r0, r2, r0, r2
   125f8:	lsr	r0, r2, #5
   125fc:	mov	r2, #6
   12600:	str	r0, [sp, #4]
   12604:	mov	r0, r5
   12608:	bl	11290 <__sprintf_chk@plt>
   1260c:	b	1269c <__assert_fail@plt+0x131c>
   12610:	add	r0, sl, #3
   12614:	movw	sl, #33156	; 0x8184
   12618:	movt	sl, #2
   1261c:	cmp	r5, r0
   12620:	bcs	127ac <__assert_fail@plt+0x142c>
   12624:	str	r0, [sl, #28]
   12628:	ldr	r0, [sl, #24]
   1262c:	bl	12f94 <__assert_fail@plt+0x1c14>
   12630:	ldr	r0, [sl, #28]
   12634:	bl	15ae4 <__assert_fail@plt+0x4764>
   12638:	str	r0, [sl, #24]
   1263c:	b	127b0 <__assert_fail@plt+0x1430>
   12640:	mov	r1, r0
   12644:	b	127e0 <__assert_fail@plt+0x1460>
   12648:	ldr	r0, [sl, #24]
   1264c:	movw	r3, #28225	; 0x6e41
   12650:	ldr	r5, [sp, #28]
   12654:	mov	r1, #1
   12658:	mvn	r2, #0
   1265c:	stm	sp, {r7, r9}
   12660:	movt	r3, #1
   12664:	bl	11290 <__sprintf_chk@plt>
   12668:	ldr	r9, [sp, #32]
   1266c:	cmp	r5, #0
   12670:	beq	1267c <__assert_fail@plt+0x12fc>
   12674:	mov	r0, r7
   12678:	bl	12f94 <__assert_fail@plt+0x1c14>
   1267c:	ldr	r7, [sp, #40]	; 0x28
   12680:	b	1270c <__assert_fail@plt+0x138c>
   12684:	movw	r1, #28334	; 0x6eae
   12688:	mov	r0, #0
   1268c:	mov	r2, #5
   12690:	movt	r1, #1
   12694:	bl	11134 <dcgettext@plt>
   12698:	mov	r5, r0
   1269c:	movw	r3, #28216	; 0x6e38
   126a0:	mov	r0, #6
   126a4:	mov	r1, #1
   126a8:	mov	r2, #7
   126ac:	stm	sp, {r0, r5}
   126b0:	sub	r0, fp, #143	; 0x8f
   126b4:	movt	r3, #1
   126b8:	bl	11290 <__sprintf_chk@plt>
   126bc:	ldrb	r3, [r4, #76]	; 0x4c
   126c0:	cmp	r3, #0
   126c4:	bne	12000 <__assert_fail@plt+0xc80>
   126c8:	ldr	r0, [sl, #28]
   126cc:	cmp	r0, #0
   126d0:	beq	126e4 <__assert_fail@plt+0x1364>
   126d4:	ldr	r0, [sl, #24]
   126d8:	b	12700 <__assert_fail@plt+0x1380>
   126dc:	mov	r1, r0
   126e0:	b	12898 <__assert_fail@plt+0x1518>
   126e4:	mov	r0, #1
   126e8:	str	r0, [sl, #28]
   126ec:	ldr	r0, [sl, #24]
   126f0:	bl	12f94 <__assert_fail@plt+0x1c14>
   126f4:	ldr	r0, [sl, #28]
   126f8:	bl	15ae4 <__assert_fail@plt+0x4764>
   126fc:	str	r0, [sl, #24]
   12700:	ldr	r7, [sp, #40]	; 0x28
   12704:	mov	r1, #0
   12708:	strb	r1, [r0]
   1270c:	ldr	r0, [r4, #340]	; 0x154
   12710:	str	r0, [sp, #56]	; 0x38
   12714:	add	r0, sp, #56	; 0x38
   12718:	bl	1120c <localtime@plt>
   1271c:	cmp	r0, #0
   12720:	beq	12740 <__assert_fail@plt+0x13c0>
   12724:	ldr	r2, [sl, #16]
   12728:	add	r5, sl, #50	; 0x32
   1272c:	mov	r3, r0
   12730:	mov	r1, #33	; 0x21
   12734:	mov	r0, r5
   12738:	bl	111f4 <strftime@plt>
   1273c:	b	12754 <__assert_fail@plt+0x13d4>
   12740:	ldr	r0, [sp, #56]	; 0x38
   12744:	add	r2, sl, #50	; 0x32
   12748:	asr	r1, r0, #31
   1274c:	bl	13028 <__assert_fail@plt+0x1ca8>
   12750:	mov	r5, r0
   12754:	movw	r1, #27987	; 0x6d53
   12758:	ldr	r0, [sl, #24]
   1275c:	mov	r3, #32
   12760:	str	r7, [sp]
   12764:	str	r5, [sp, #4]
   12768:	movt	r1, #1
   1276c:	mov	r2, r1
   12770:	cmp	r0, #0
   12774:	str	r2, [sp, #20]
   12778:	ldr	r2, [sp, #36]	; 0x24
   1277c:	moveq	r0, r1
   12780:	sub	r1, fp, #143	; 0x8f
   12784:	str	r1, [sp, #8]
   12788:	sub	r1, fp, #196	; 0xc4
   1278c:	str	r0, [sp, #16]
   12790:	mov	r0, #32
   12794:	str	r1, [sp, #12]
   12798:	mov	r1, r6
   1279c:	bl	12b34 <__assert_fail@plt+0x17b4>
   127a0:	b	11ec8 <__assert_fail@plt+0xb48>
   127a4:	mov	r1, r0
   127a8:	b	12958 <__assert_fail@plt+0x15d8>
   127ac:	ldr	r0, [sl, #24]
   127b0:	movw	r3, #28233	; 0x6e49
   127b4:	ldr	r9, [sp, #32]
   127b8:	ldr	r5, [sp, #28]
   127bc:	mov	r1, #1
   127c0:	mvn	r2, #0
   127c4:	str	r7, [sp]
   127c8:	movt	r3, #1
   127cc:	bl	11290 <__sprintf_chk@plt>
   127d0:	cmp	r5, #0
   127d4:	bne	12674 <__assert_fail@plt+0x12f4>
   127d8:	b	1267c <__assert_fail@plt+0x12fc>
   127dc:	add	r1, r0, #2
   127e0:	mov	r0, #0
   127e4:	movw	r3, #28212	; 0x6e34
   127e8:	mov	r2, #12
   127ec:	strb	r0, [r1]
   127f0:	movt	r3, #1
   127f4:	mov	r1, #1
   127f8:	ldr	r0, [r4, #4]
   127fc:	str	r0, [sp]
   12800:	sub	r0, fp, #196	; 0xc4
   12804:	bl	11290 <__sprintf_chk@plt>
   12808:	ldr	r0, [r4, #340]	; 0x154
   1280c:	add	r7, r4, #8
   12810:	str	r0, [sp, #56]	; 0x38
   12814:	add	r0, sp, #56	; 0x38
   12818:	bl	1120c <localtime@plt>
   1281c:	cmp	r0, #0
   12820:	beq	12840 <__assert_fail@plt+0x14c0>
   12824:	ldr	r2, [sl, #16]
   12828:	add	r5, sl, #50	; 0x32
   1282c:	mov	r3, r0
   12830:	mov	r1, #33	; 0x21
   12834:	mov	r0, r5
   12838:	bl	111f4 <strftime@plt>
   1283c:	b	12854 <__assert_fail@plt+0x14d4>
   12840:	ldr	r0, [sp, #56]	; 0x38
   12844:	add	r2, sl, #50	; 0x32
   12848:	asr	r1, r0, #31
   1284c:	bl	13028 <__assert_fail@plt+0x1ca8>
   12850:	mov	r5, r0
   12854:	movw	r1, #27987	; 0x6d53
   12858:	sub	r0, fp, #196	; 0xc4
   1285c:	mov	r2, #32
   12860:	mov	r3, #32
   12864:	str	r7, [sp]
   12868:	str	r5, [sp, #4]
   1286c:	str	r6, [sp, #16]
   12870:	movt	r1, #1
   12874:	str	r0, [sp, #12]
   12878:	mvn	r0, #0
   1287c:	str	r1, [sp, #8]
   12880:	str	r1, [sp, #20]
   12884:	bl	12b34 <__assert_fail@plt+0x17b4>
   12888:	mov	r0, r6
   1288c:	bl	12f94 <__assert_fail@plt+0x1c14>
   12890:	b	11ec8 <__assert_fail@plt+0xb48>
   12894:	add	r1, r0, #2
   12898:	mov	r0, #0
   1289c:	movw	r3, #28212	; 0x6e34
   128a0:	mov	r2, #12
   128a4:	strb	r0, [r1]
   128a8:	movt	r3, #1
   128ac:	mov	r1, #1
   128b0:	ldr	r0, [r4, #4]
   128b4:	str	r0, [sp]
   128b8:	sub	r0, fp, #196	; 0xc4
   128bc:	bl	11290 <__sprintf_chk@plt>
   128c0:	movw	r1, #28396	; 0x6eec
   128c4:	mov	r0, #0
   128c8:	mov	r2, #5
   128cc:	movt	r1, #1
   128d0:	bl	11134 <dcgettext@plt>
   128d4:	mov	r5, r0
   128d8:	ldr	r0, [r4, #340]	; 0x154
   128dc:	add	r6, r4, #8
   128e0:	str	r0, [sp, #56]	; 0x38
   128e4:	add	r0, sp, #56	; 0x38
   128e8:	bl	1120c <localtime@plt>
   128ec:	cmp	r0, #0
   128f0:	beq	12910 <__assert_fail@plt+0x1590>
   128f4:	ldr	r2, [sl, #16]
   128f8:	add	r7, sl, #50	; 0x32
   128fc:	mov	r3, r0
   12900:	mov	r1, #33	; 0x21
   12904:	mov	r0, r7
   12908:	bl	111f4 <strftime@plt>
   1290c:	b	12924 <__assert_fail@plt+0x15a4>
   12910:	ldr	r0, [sp, #56]	; 0x38
   12914:	add	r2, sl, #50	; 0x32
   12918:	asr	r1, r0, #31
   1291c:	bl	13028 <__assert_fail@plt+0x1ca8>
   12920:	mov	r7, r0
   12924:	movw	r0, #27987	; 0x6d53
   12928:	stm	sp, {r6, r7}
   1292c:	str	r9, [sp, #16]
   12930:	movt	r0, #1
   12934:	mov	r1, r0
   12938:	str	r0, [sp, #8]
   1293c:	sub	r0, fp, #196	; 0xc4
   12940:	str	r0, [sp, #12]
   12944:	str	r1, [sp, #20]
   12948:	mvn	r0, #0
   1294c:	mov	r1, r5
   12950:	b	12ab8 <__assert_fail@plt+0x1738>
   12954:	add	r1, r0, #2
   12958:	mov	r0, #0
   1295c:	movw	r3, #28212	; 0x6e34
   12960:	mov	r2, #12
   12964:	strb	r0, [r1]
   12968:	movt	r3, #1
   1296c:	mov	r1, #1
   12970:	ldr	r0, [r4, #4]
   12974:	str	r0, [sp]
   12978:	sub	r0, fp, #196	; 0xc4
   1297c:	bl	11290 <__sprintf_chk@plt>
   12980:	ldr	r5, [sl, #40]	; 0x28
   12984:	cmp	r5, #0
   12988:	bne	129d4 <__assert_fail@plt+0x1654>
   1298c:	movw	r1, #28402	; 0x6ef2
   12990:	mov	r0, #0
   12994:	mov	r2, #5
   12998:	movt	r1, #1
   1299c:	bl	11134 <dcgettext@plt>
   129a0:	bl	1126c <strlen@plt>
   129a4:	movw	r1, #28408	; 0x6ef8
   129a8:	mov	r5, r0
   129ac:	mov	r0, #0
   129b0:	mov	r2, #5
   129b4:	movt	r1, #1
   129b8:	bl	11134 <dcgettext@plt>
   129bc:	bl	1126c <strlen@plt>
   129c0:	add	r0, r5, r0
   129c4:	add	r0, r0, #14
   129c8:	bl	15ae4 <__assert_fail@plt+0x4764>
   129cc:	mov	r5, r0
   129d0:	str	r0, [sl, #40]	; 0x28
   129d4:	movw	r1, #28402	; 0x6ef2
   129d8:	mov	r0, #0
   129dc:	mov	r2, #5
   129e0:	movt	r1, #1
   129e4:	bl	11134 <dcgettext@plt>
   129e8:	movw	r1, #28408	; 0x6ef8
   129ec:	ldrsh	sl, [r7]
   129f0:	mov	r6, r0
   129f4:	mov	r0, #0
   129f8:	mov	r2, #5
   129fc:	movt	r1, #1
   12a00:	bl	11134 <dcgettext@plt>
   12a04:	ldrsh	r1, [r7, #2]
   12a08:	movw	r3, #28414	; 0x6efe
   12a0c:	stm	sp, {r6, sl}
   12a10:	str	r0, [sp, #8]
   12a14:	mov	r0, r5
   12a18:	mvn	r2, #0
   12a1c:	movt	r3, #1
   12a20:	str	r1, [sp, #12]
   12a24:	mov	r1, #1
   12a28:	bl	11290 <__sprintf_chk@plt>
   12a2c:	ldr	r0, [r4, #340]	; 0x154
   12a30:	add	r6, r4, #8
   12a34:	str	r0, [sp, #56]	; 0x38
   12a38:	add	r0, sp, #56	; 0x38
   12a3c:	bl	1120c <localtime@plt>
   12a40:	cmp	r0, #0
   12a44:	beq	12a6c <__assert_fail@plt+0x16ec>
   12a48:	movw	sl, #33156	; 0x8184
   12a4c:	mov	r3, r0
   12a50:	mov	r1, #33	; 0x21
   12a54:	movt	sl, #2
   12a58:	ldr	r2, [sl, #16]
   12a5c:	add	r5, sl, #50	; 0x32
   12a60:	mov	r0, r5
   12a64:	bl	111f4 <strftime@plt>
   12a68:	b	12a88 <__assert_fail@plt+0x1708>
   12a6c:	ldr	r0, [sp, #56]	; 0x38
   12a70:	movw	sl, #33156	; 0x8184
   12a74:	movt	sl, #2
   12a78:	add	r2, sl, #50	; 0x32
   12a7c:	asr	r1, r0, #31
   12a80:	bl	13028 <__assert_fail@plt+0x1ca8>
   12a84:	mov	r5, r0
   12a88:	ldr	r0, [sl, #40]	; 0x28
   12a8c:	movw	r2, #27987	; 0x6d53
   12a90:	sub	r1, fp, #196	; 0xc4
   12a94:	str	r6, [sp]
   12a98:	str	r5, [sp, #4]
   12a9c:	str	r9, [sp, #16]
   12aa0:	movt	r2, #1
   12aa4:	str	r1, [sp, #12]
   12aa8:	mov	r1, r2
   12aac:	str	r2, [sp, #8]
   12ab0:	str	r0, [sp, #20]
   12ab4:	mvn	r0, #0
   12ab8:	mov	r2, #32
   12abc:	mov	r3, #32
   12ac0:	bl	12b34 <__assert_fail@plt+0x17b4>
   12ac4:	mov	r0, r9
   12ac8:	bl	12f94 <__assert_fail@plt+0x1c14>
   12acc:	ldr	r9, [sp, #32]
   12ad0:	b	11ec8 <__assert_fail@plt+0xb48>
   12ad4:	ldr	r0, [sp, #48]	; 0x30
   12ad8:	bl	12f94 <__assert_fail@plt+0x1c14>
   12adc:	sub	sp, fp, #28
   12ae0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ae4:	bl	11284 <__errno_location@plt>
   12ae8:	ldr	r5, [r0]
   12aec:	mov	r0, #0
   12af0:	mov	r1, #3
   12af4:	mov	r2, r4
   12af8:	bl	14e00 <__assert_fail@plt+0x3a80>
   12afc:	movw	r2, #28799	; 0x707f
   12b00:	mov	r3, r0
   12b04:	mov	r0, #1
   12b08:	mov	r1, r5
   12b0c:	movt	r2, #1
   12b10:	bl	111b8 <error@plt>
   12b14:	movw	r0, #28244	; 0x6e54
   12b18:	movw	r1, #28274	; 0x6e72
   12b1c:	movw	r3, #28284	; 0x6e7c
   12b20:	mov	r2, #205	; 0xcd
   12b24:	movt	r0, #1
   12b28:	movt	r1, #1
   12b2c:	movt	r3, #1
   12b30:	bl	11380 <__assert_fail@plt>
   12b34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b38:	add	fp, sp, #28
   12b3c:	sub	sp, sp, #76	; 0x4c
   12b40:	movw	r5, #33156	; 0x8184
   12b44:	str	r0, [sp, #44]	; 0x2c
   12b48:	movw	r0, #33048	; 0x8118
   12b4c:	mov	r6, r1
   12b50:	str	r3, [sp, #40]	; 0x28
   12b54:	movt	r0, #2
   12b58:	movt	r5, #2
   12b5c:	strb	r2, [r0, #1]
   12b60:	ldrb	r0, [r5, #8]
   12b64:	cmp	r0, #1
   12b68:	bne	12bb8 <__assert_fail@plt+0x1838>
   12b6c:	ldrb	r0, [r5, #13]
   12b70:	cmp	r0, #0
   12b74:	bne	12bb8 <__assert_fail@plt+0x1838>
   12b78:	ldr	r4, [fp, #16]
   12b7c:	mov	r0, r4
   12b80:	bl	1126c <strlen@plt>
   12b84:	cmp	r0, #6
   12b88:	bhi	12bb8 <__assert_fail@plt+0x1838>
   12b8c:	movw	r3, #28155	; 0x6dfb
   12b90:	sub	r0, fp, #40	; 0x28
   12b94:	mov	r1, #1
   12b98:	mov	r2, #8
   12b9c:	str	r4, [sp]
   12ba0:	movt	r3, #1
   12ba4:	bl	11290 <__sprintf_chk@plt>
   12ba8:	ldrb	r0, [r5, #13]
   12bac:	cmp	r0, #0
   12bb0:	beq	12bcc <__assert_fail@plt+0x184c>
   12bb4:	b	12c00 <__assert_fail@plt+0x1880>
   12bb8:	mov	r0, #0
   12bbc:	strb	r0, [fp, #-40]	; 0xffffffd8
   12bc0:	ldrb	r0, [r5, #13]
   12bc4:	cmp	r0, #0
   12bc8:	bne	12c00 <__assert_fail@plt+0x1880>
   12bcc:	ldr	r4, [fp, #20]
   12bd0:	mov	r0, r4
   12bd4:	bl	1126c <strlen@plt>
   12bd8:	cmp	r0, #11
   12bdc:	bhi	12c00 <__assert_fail@plt+0x1880>
   12be0:	movw	r3, #28161	; 0x6e01
   12be4:	add	r0, sp, #51	; 0x33
   12be8:	mov	r1, #1
   12bec:	mov	r2, #13
   12bf0:	str	r4, [sp]
   12bf4:	movt	r3, #1
   12bf8:	bl	11290 <__sprintf_chk@plt>
   12bfc:	b	12c08 <__assert_fail@plt+0x1888>
   12c00:	mov	r0, #0
   12c04:	strb	r0, [sp, #51]	; 0x33
   12c08:	ldrb	r1, [r5, #9]
   12c0c:	ldr	r4, [fp, #28]
   12c10:	mov	r0, #1
   12c14:	cmp	r1, #1
   12c18:	bne	12c34 <__assert_fail@plt+0x18b4>
   12c1c:	mov	r0, r4
   12c20:	bl	1126c <strlen@plt>
   12c24:	mov	r1, r0
   12c28:	add	r0, r0, #2
   12c2c:	cmp	r1, #12
   12c30:	movwcc	r0, #14
   12c34:	ldr	sl, [fp, #24]
   12c38:	ldr	r9, [fp, #12]
   12c3c:	ldr	r8, [fp, #8]
   12c40:	bl	15ae4 <__assert_fail@plt+0x4764>
   12c44:	mov	r7, r0
   12c48:	ldrb	r0, [r5, #9]
   12c4c:	cmp	r0, #1
   12c50:	bne	12c74 <__assert_fail@plt+0x18f4>
   12c54:	movw	r3, #28167	; 0x6e07
   12c58:	mov	r0, r7
   12c5c:	mov	r1, #1
   12c60:	mvn	r2, #0
   12c64:	str	r4, [sp]
   12c68:	movt	r3, #1
   12c6c:	bl	11290 <__sprintf_chk@plt>
   12c70:	b	12c7c <__assert_fail@plt+0x18fc>
   12c74:	mov	r0, #0
   12c78:	strb	r0, [r7]
   12c7c:	ldrb	r0, [r5, #7]
   12c80:	ldr	r1, [r5, #20]
   12c84:	movw	r5, #28207	; 0x6e2f
   12c88:	cmp	r6, #0
   12c8c:	sub	r3, fp, #40	; 0x28
   12c90:	str	sl, [sp, #32]
   12c94:	str	r7, [sp, #36]	; 0x24
   12c98:	add	r2, sp, #51	; 0x33
   12c9c:	movt	r5, #1
   12ca0:	movne	r5, r6
   12ca4:	movw	r6, #27987	; 0x6d53
   12ca8:	movt	r6, #1
   12cac:	cmp	r0, #0
   12cb0:	movw	r0, #33048	; 0x8118
   12cb4:	movt	r0, #2
   12cb8:	movne	r6, r0
   12cbc:	ldr	r0, [sp, #40]	; 0x28
   12cc0:	stm	sp, {r5, r6}
   12cc4:	str	r3, [sp, #24]
   12cc8:	ldr	r3, [sp, #44]	; 0x2c
   12ccc:	str	r2, [sp, #28]
   12cd0:	movw	r2, #28174	; 0x6e0e
   12cd4:	str	r1, [sp, #16]
   12cd8:	mov	r1, #1
   12cdc:	str	r8, [sp, #12]
   12ce0:	str	r9, [sp, #20]
   12ce4:	movt	r2, #1
   12ce8:	str	r0, [sp, #8]
   12cec:	sub	r0, fp, #32
   12cf0:	bl	111c4 <__asprintf_chk@plt>
   12cf4:	cmn	r0, #1
   12cf8:	beq	12d48 <__assert_fail@plt+0x19c8>
   12cfc:	ldr	r4, [fp, #-32]	; 0xffffffe0
   12d00:	mov	r0, r4
   12d04:	bl	1126c <strlen@plt>
   12d08:	add	r0, r0, r4
   12d0c:	add	r0, r0, #1
   12d10:	ldrb	r1, [r0, #-2]
   12d14:	sub	r0, r0, #1
   12d18:	cmp	r1, #32
   12d1c:	beq	12d10 <__assert_fail@plt+0x1990>
   12d20:	mov	r1, #0
   12d24:	strb	r1, [r0]
   12d28:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d2c:	bl	111d0 <puts@plt>
   12d30:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12d34:	bl	12f94 <__assert_fail@plt+0x1c14>
   12d38:	mov	r0, r7
   12d3c:	bl	12f94 <__assert_fail@plt+0x1c14>
   12d40:	sub	sp, fp, #28
   12d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d48:	bl	16020 <__assert_fail@plt+0x4ca0>
   12d4c:	push	{r4, r5, r6, sl, fp, lr}
   12d50:	add	fp, sp, #16
   12d54:	sub	sp, sp, #8
   12d58:	movw	r6, #33240	; 0x81d8
   12d5c:	mov	r5, r0
   12d60:	mov	r0, #2
   12d64:	mov	r4, #0
   12d68:	add	r3, sp, #4
   12d6c:	mov	r1, #0
   12d70:	movt	r6, #2
   12d74:	str	r4, [sp, #4]
   12d78:	mov	r2, r6
   12d7c:	str	r0, [r2, #4]!
   12d80:	mov	r0, r5
   12d84:	bl	11338 <getaddrinfo@plt>
   12d88:	cmp	r0, #0
   12d8c:	beq	12da0 <__assert_fail@plt+0x1a20>
   12d90:	str	r0, [r6]
   12d94:	mov	r0, r4
   12d98:	sub	sp, fp, #16
   12d9c:	pop	{r4, r5, r6, sl, fp, pc}
   12da0:	ldr	r0, [sp, #4]
   12da4:	ldr	r0, [r0, #24]
   12da8:	cmp	r0, #0
   12dac:	movne	r5, r0
   12db0:	mov	r0, r5
   12db4:	bl	11140 <strdup@plt>
   12db8:	cmp	r0, #0
   12dbc:	mov	r4, r0
   12dc0:	mvneq	r0, #9
   12dc4:	streq	r0, [r6]
   12dc8:	ldr	r0, [sp, #4]
   12dcc:	bl	1132c <freeaddrinfo@plt>
   12dd0:	mov	r0, r4
   12dd4:	sub	sp, fp, #16
   12dd8:	pop	{r4, r5, r6, sl, fp, pc}
   12ddc:	push	{r4, r5, r6, sl, fp, lr}
   12de0:	add	fp, sp, #16
   12de4:	sub	sp, sp, #8
   12de8:	movw	r2, #33240	; 0x81d8
   12dec:	mov	r6, r0
   12df0:	mov	r0, #2
   12df4:	mov	r5, r1
   12df8:	mov	r4, #0
   12dfc:	add	r3, sp, #4
   12e00:	mov	r1, #0
   12e04:	movt	r2, #2
   12e08:	str	r4, [sp, #4]
   12e0c:	str	r0, [r2, #4]!
   12e10:	mov	r0, r6
   12e14:	bl	11338 <getaddrinfo@plt>
   12e18:	cmp	r0, #0
   12e1c:	beq	12e34 <__assert_fail@plt+0x1ab4>
   12e20:	cmp	r5, #0
   12e24:	strne	r0, [r5]
   12e28:	mov	r0, r4
   12e2c:	sub	sp, fp, #16
   12e30:	pop	{r4, r5, r6, sl, fp, pc}
   12e34:	ldr	r0, [sp, #4]
   12e38:	ldr	r0, [r0, #24]
   12e3c:	cmp	r0, #0
   12e40:	movne	r6, r0
   12e44:	mov	r0, r6
   12e48:	bl	11140 <strdup@plt>
   12e4c:	mov	r4, r0
   12e50:	cmp	r5, #0
   12e54:	beq	12e64 <__assert_fail@plt+0x1ae4>
   12e58:	cmp	r4, #0
   12e5c:	mvneq	r0, #9
   12e60:	streq	r0, [r5]
   12e64:	ldr	r0, [sp, #4]
   12e68:	bl	1132c <freeaddrinfo@plt>
   12e6c:	mov	r0, r4
   12e70:	sub	sp, fp, #16
   12e74:	pop	{r4, r5, r6, sl, fp, pc}
   12e78:	movw	r0, #33240	; 0x81d8
   12e7c:	movt	r0, #2
   12e80:	ldr	r0, [r0]
   12e84:	b	110ec <gai_strerror@plt>
   12e88:	movw	r1, #33276	; 0x81fc
   12e8c:	movt	r1, #2
   12e90:	str	r0, [r1, #4]
   12e94:	bx	lr
   12e98:	movw	r1, #33276	; 0x81fc
   12e9c:	movt	r1, #2
   12ea0:	strb	r0, [r1]
   12ea4:	bx	lr
   12ea8:	push	{r4, r5, r6, sl, fp, lr}
   12eac:	add	fp, sp, #16
   12eb0:	sub	sp, sp, #8
   12eb4:	movw	r0, #33148	; 0x817c
   12eb8:	movt	r0, #2
   12ebc:	ldr	r0, [r0]
   12ec0:	bl	1613c <__assert_fail@plt+0x4dbc>
   12ec4:	cmp	r0, #0
   12ec8:	beq	12ef0 <__assert_fail@plt+0x1b70>
   12ecc:	movw	r5, #33276	; 0x81fc
   12ed0:	movt	r5, #2
   12ed4:	ldrb	r0, [r5]
   12ed8:	cmp	r0, #0
   12edc:	beq	12f1c <__assert_fail@plt+0x1b9c>
   12ee0:	bl	11284 <__errno_location@plt>
   12ee4:	ldr	r0, [r0]
   12ee8:	cmp	r0, #32
   12eec:	bne	12f1c <__assert_fail@plt+0x1b9c>
   12ef0:	movw	r0, #33144	; 0x8178
   12ef4:	movt	r0, #2
   12ef8:	ldr	r0, [r0]
   12efc:	bl	1613c <__assert_fail@plt+0x4dbc>
   12f00:	cmp	r0, #0
   12f04:	subeq	sp, fp, #16
   12f08:	popeq	{r4, r5, r6, sl, fp, pc}
   12f0c:	movw	r0, #33060	; 0x8124
   12f10:	movt	r0, #2
   12f14:	ldr	r0, [r0]
   12f18:	bl	110f8 <_exit@plt>
   12f1c:	movw	r1, #28783	; 0x706f
   12f20:	mov	r0, #0
   12f24:	mov	r2, #5
   12f28:	movt	r1, #1
   12f2c:	bl	11134 <dcgettext@plt>
   12f30:	ldr	r6, [r5, #4]
   12f34:	mov	r4, r0
   12f38:	bl	11284 <__errno_location@plt>
   12f3c:	ldr	r5, [r0]
   12f40:	cmp	r6, #0
   12f44:	bne	12f60 <__assert_fail@plt+0x1be0>
   12f48:	movw	r2, #28799	; 0x707f
   12f4c:	mov	r0, #0
   12f50:	mov	r1, r5
   12f54:	mov	r3, r4
   12f58:	movt	r2, #1
   12f5c:	b	12f80 <__assert_fail@plt+0x1c00>
   12f60:	mov	r0, r6
   12f64:	bl	14d24 <__assert_fail@plt+0x39a4>
   12f68:	movw	r2, #28795	; 0x707b
   12f6c:	mov	r3, r0
   12f70:	str	r4, [sp]
   12f74:	mov	r0, #0
   12f78:	mov	r1, r5
   12f7c:	movt	r2, #1
   12f80:	bl	111b8 <error@plt>
   12f84:	movw	r0, #33060	; 0x8124
   12f88:	movt	r0, #2
   12f8c:	ldr	r0, [r0]
   12f90:	bl	110f8 <_exit@plt>
   12f94:	push	{r4, r5, r6, sl, fp, lr}
   12f98:	add	fp, sp, #16
   12f9c:	mov	r4, r0
   12fa0:	bl	11284 <__errno_location@plt>
   12fa4:	ldr	r6, [r0]
   12fa8:	mov	r5, r0
   12fac:	mov	r0, r4
   12fb0:	bl	110e0 <free@plt>
   12fb4:	str	r6, [r5]
   12fb8:	pop	{r4, r5, r6, sl, fp, pc}
   12fbc:	push	{r4, sl, fp, lr}
   12fc0:	add	fp, sp, #8
   12fc4:	sub	sp, sp, #264	; 0x108
   12fc8:	add	r1, sp, #7
   12fcc:	movw	r2, #257	; 0x101
   12fd0:	bl	15384 <__assert_fail@plt+0x4004>
   12fd4:	mov	r4, #0
   12fd8:	cmp	r0, #0
   12fdc:	bne	1301c <__assert_fail@plt+0x1c9c>
   12fe0:	movw	r1, #28802	; 0x7082
   12fe4:	add	r0, sp, #7
   12fe8:	mov	r2, #2
   12fec:	movt	r1, #1
   12ff0:	bl	11254 <bcmp@plt>
   12ff4:	cmp	r0, #0
   12ff8:	beq	1301c <__assert_fail@plt+0x1c9c>
   12ffc:	movw	r1, #28804	; 0x7084
   13000:	add	r0, sp, #7
   13004:	mov	r2, #6
   13008:	movt	r1, #1
   1300c:	bl	11254 <bcmp@plt>
   13010:	cmp	r0, #0
   13014:	mov	r4, r0
   13018:	movwne	r4, #1
   1301c:	mov	r0, r4
   13020:	sub	sp, fp, #8
   13024:	pop	{r4, sl, fp, pc}
   13028:	push	{r4, r5, r6, sl, fp, lr}
   1302c:	add	fp, sp, #16
   13030:	mov	r5, r0
   13034:	mov	r0, #0
   13038:	mov	r4, r1
   1303c:	add	r6, r2, #19
   13040:	cmp	r1, #0
   13044:	strb	r0, [r2, #20]
   13048:	bmi	13098 <__assert_fail@plt+0x1d18>
   1304c:	mov	r0, r5
   13050:	mov	r1, r4
   13054:	mov	r2, #10
   13058:	mov	r3, #0
   1305c:	bl	16438 <__assert_fail@plt+0x50b8>
   13060:	add	r2, r0, r0, lsl #2
   13064:	sub	r2, r5, r2, lsl #1
   13068:	add	r2, r2, #48	; 0x30
   1306c:	strb	r2, [r6], #-1
   13070:	adds	r2, r5, #9
   13074:	mov	r5, r0
   13078:	adc	r3, r4, #0
   1307c:	rsbs	r2, r2, #18
   13080:	mov	r4, r1
   13084:	rscs	r2, r3, #0
   13088:	bcc	1304c <__assert_fail@plt+0x1ccc>
   1308c:	add	r6, r6, #1
   13090:	mov	r0, r6
   13094:	pop	{r4, r5, r6, sl, fp, pc}
   13098:	mov	r0, r5
   1309c:	mov	r1, r4
   130a0:	mov	r2, #10
   130a4:	mov	r3, #0
   130a8:	bl	16438 <__assert_fail@plt+0x50b8>
   130ac:	add	r2, r0, r0, lsl #2
   130b0:	rsb	r2, r5, r2, lsl #1
   130b4:	add	r2, r2, #48	; 0x30
   130b8:	strb	r2, [r6], #-1
   130bc:	adds	r2, r5, #9
   130c0:	mov	r5, r0
   130c4:	adc	r3, r4, #0
   130c8:	rsbs	r2, r2, #18
   130cc:	mov	r4, r1
   130d0:	rscs	r2, r3, #0
   130d4:	bcc	13098 <__assert_fail@plt+0x1d18>
   130d8:	mov	r0, #45	; 0x2d
   130dc:	strb	r0, [r6]
   130e0:	mov	r0, r6
   130e4:	pop	{r4, r5, r6, sl, fp, pc}
   130e8:	push	{r4, r5, fp, lr}
   130ec:	add	fp, sp, #8
   130f0:	cmp	r0, #0
   130f4:	beq	13188 <__assert_fail@plt+0x1e08>
   130f8:	mov	r1, #47	; 0x2f
   130fc:	mov	r4, r0
   13100:	bl	11314 <strrchr@plt>
   13104:	cmp	r0, #0
   13108:	mov	r5, r4
   1310c:	addne	r5, r0, #1
   13110:	sub	r0, r5, r4
   13114:	cmp	r0, #7
   13118:	blt	1316c <__assert_fail@plt+0x1dec>
   1311c:	movw	r1, #28866	; 0x70c2
   13120:	sub	r0, r5, #7
   13124:	mov	r2, #7
   13128:	movt	r1, #1
   1312c:	bl	1135c <strncmp@plt>
   13130:	cmp	r0, #0
   13134:	bne	1316c <__assert_fail@plt+0x1dec>
   13138:	movw	r1, #28874	; 0x70ca
   1313c:	mov	r0, r5
   13140:	mov	r2, #3
   13144:	movt	r1, #1
   13148:	bl	1135c <strncmp@plt>
   1314c:	cmp	r0, #0
   13150:	beq	1315c <__assert_fail@plt+0x1ddc>
   13154:	mov	r4, r5
   13158:	b	1316c <__assert_fail@plt+0x1dec>
   1315c:	movw	r0, #33128	; 0x8168
   13160:	add	r4, r5, #3
   13164:	movt	r0, #2
   13168:	str	r4, [r0]
   1316c:	movw	r0, #33132	; 0x816c
   13170:	movt	r0, #2
   13174:	str	r4, [r0]
   13178:	movw	r0, #33284	; 0x8204
   1317c:	movt	r0, #2
   13180:	str	r4, [r0]
   13184:	pop	{r4, r5, fp, pc}
   13188:	movw	r0, #33144	; 0x8178
   1318c:	mov	r1, #55	; 0x37
   13190:	mov	r2, #1
   13194:	movt	r0, #2
   13198:	ldr	r3, [r0]
   1319c:	movw	r0, #28810	; 0x708a
   131a0:	movt	r0, #1
   131a4:	bl	1117c <fwrite@plt>
   131a8:	bl	11368 <abort@plt>
   131ac:	push	{r4, r5, r6, sl, fp, lr}
   131b0:	add	fp, sp, #16
   131b4:	mov	r4, r0
   131b8:	movw	r0, #33288	; 0x8208
   131bc:	movt	r0, #2
   131c0:	cmp	r4, #0
   131c4:	moveq	r4, r0
   131c8:	bl	11284 <__errno_location@plt>
   131cc:	ldr	r6, [r0]
   131d0:	mov	r5, r0
   131d4:	mov	r0, r4
   131d8:	mov	r1, #48	; 0x30
   131dc:	bl	15f44 <__assert_fail@plt+0x4bc4>
   131e0:	str	r6, [r5]
   131e4:	pop	{r4, r5, r6, sl, fp, pc}
   131e8:	movw	r1, #33288	; 0x8208
   131ec:	cmp	r0, #0
   131f0:	movt	r1, #2
   131f4:	movne	r1, r0
   131f8:	ldr	r0, [r1]
   131fc:	bx	lr
   13200:	movw	r2, #33288	; 0x8208
   13204:	cmp	r0, #0
   13208:	movt	r2, #2
   1320c:	movne	r2, r0
   13210:	str	r1, [r2]
   13214:	bx	lr
   13218:	movw	r3, #33288	; 0x8208
   1321c:	cmp	r0, #0
   13220:	and	r2, r2, #1
   13224:	movt	r3, #2
   13228:	movne	r3, r0
   1322c:	ubfx	r0, r1, #5, #3
   13230:	and	r1, r1, #31
   13234:	add	ip, r3, r0, lsl #2
   13238:	mov	r0, #1
   1323c:	ldr	r3, [ip, #8]
   13240:	and	r0, r0, r3, lsr r1
   13244:	eor	r2, r0, r2
   13248:	eor	r1, r3, r2, lsl r1
   1324c:	str	r1, [ip, #8]
   13250:	bx	lr
   13254:	movw	r2, #33288	; 0x8208
   13258:	cmp	r0, #0
   1325c:	movt	r2, #2
   13260:	movne	r2, r0
   13264:	ldr	r0, [r2, #4]
   13268:	str	r1, [r2, #4]
   1326c:	bx	lr
   13270:	push	{fp, lr}
   13274:	mov	fp, sp
   13278:	movw	r3, #33288	; 0x8208
   1327c:	cmp	r0, #0
   13280:	movt	r3, #2
   13284:	movne	r3, r0
   13288:	cmp	r1, #0
   1328c:	mov	r0, #10
   13290:	cmpne	r2, #0
   13294:	str	r0, [r3]
   13298:	bne	132a0 <__assert_fail@plt+0x1f20>
   1329c:	bl	11368 <abort@plt>
   132a0:	str	r1, [r3, #40]	; 0x28
   132a4:	str	r2, [r3, #44]	; 0x2c
   132a8:	pop	{fp, pc}
   132ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132b0:	add	fp, sp, #28
   132b4:	sub	sp, sp, #20
   132b8:	mov	r7, r0
   132bc:	ldr	r0, [fp, #8]
   132c0:	movw	r5, #33288	; 0x8208
   132c4:	mov	r8, r3
   132c8:	mov	r9, r2
   132cc:	mov	sl, r1
   132d0:	movt	r5, #2
   132d4:	cmp	r0, #0
   132d8:	movne	r5, r0
   132dc:	bl	11284 <__errno_location@plt>
   132e0:	ldr	r2, [r5, #40]	; 0x28
   132e4:	ldr	r3, [r5, #44]	; 0x2c
   132e8:	mov	r4, r0
   132ec:	ldm	r5, {r0, r1}
   132f0:	add	r5, r5, #8
   132f4:	ldr	r6, [r4]
   132f8:	stm	sp, {r0, r1, r5}
   132fc:	mov	r0, r7
   13300:	mov	r1, sl
   13304:	str	r2, [sp, #12]
   13308:	str	r3, [sp, #16]
   1330c:	mov	r2, r9
   13310:	mov	r3, r8
   13314:	bl	13324 <__assert_fail@plt+0x1fa4>
   13318:	str	r6, [r4]
   1331c:	sub	sp, fp, #28
   13320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13324:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13328:	add	fp, sp, #28
   1332c:	sub	sp, sp, #156	; 0x9c
   13330:	str	r0, [fp, #-84]	; 0xffffffac
   13334:	add	r0, r2, #1
   13338:	mov	r6, r1
   1333c:	mov	r7, r3
   13340:	str	r2, [fp, #-80]	; 0xffffffb0
   13344:	str	r0, [sp, #80]	; 0x50
   13348:	ldr	r0, [fp, #12]
   1334c:	and	r1, r0, #1
   13350:	str	r1, [sp, #36]	; 0x24
   13354:	and	r1, r0, #4
   13358:	str	r1, [sp, #32]
   1335c:	ubfx	r8, r0, #1, #1
   13360:	bl	11194 <__ctype_get_mb_cur_max@plt>
   13364:	str	r0, [sp, #40]	; 0x28
   13368:	ldr	r0, [fp, #24]
   1336c:	ldr	r4, [fp, #8]
   13370:	mov	r1, #0
   13374:	str	r1, [fp, #-52]	; 0xffffffcc
   13378:	mov	r1, #0
   1337c:	str	r1, [sp, #60]	; 0x3c
   13380:	mov	r1, #1
   13384:	str	r1, [sp, #84]	; 0x54
   13388:	str	r0, [sp, #76]	; 0x4c
   1338c:	ldr	r0, [fp, #20]
   13390:	str	r0, [sp, #72]	; 0x48
   13394:	mov	r0, #0
   13398:	str	r0, [sp, #56]	; 0x38
   1339c:	mov	r0, #0
   133a0:	str	r0, [fp, #-88]	; 0xffffffa8
   133a4:	mov	r0, #0
   133a8:	str	r0, [fp, #-72]	; 0xffffffb8
   133ac:	mov	r0, #0
   133b0:	cmp	r4, #10
   133b4:	bhi	146d0 <__assert_fail@plt+0x3350>
   133b8:	add	r1, pc, #24
   133bc:	ldr	ip, [fp, #-84]	; 0xffffffac
   133c0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   133c4:	mov	r5, r6
   133c8:	mov	r9, #0
   133cc:	mov	r2, #1
   133d0:	mov	r3, #0
   133d4:	ldr	pc, [r1, r4, lsl #2]
   133d8:	andeq	r3, r1, r0, lsr #9
   133dc:	ldrdeq	r3, [r1], -ip
   133e0:			; <UNDEFINED> instruction: 0x000134b0
   133e4:	muleq	r1, r8, r4
   133e8:	ldrdeq	r3, [r1], -r0
   133ec:	andeq	r3, r1, r4, lsr r5
   133f0:	andeq	r3, r1, r0, asr #9
   133f4:	andeq	r3, r1, ip, lsr #15
   133f8:	andeq	r3, r1, r4, lsl #8
   133fc:	andeq	r3, r1, r4, lsl #8
   13400:	andeq	r3, r1, ip, lsr r6
   13404:	movw	r6, #28956	; 0x711c
   13408:	mov	r0, #0
   1340c:	mov	r2, #5
   13410:	movt	r6, #1
   13414:	mov	r1, r6
   13418:	bl	11134 <dcgettext@plt>
   1341c:	cmp	r0, r6
   13420:	str	r0, [sp, #72]	; 0x48
   13424:	bne	13614 <__assert_fail@plt+0x2294>
   13428:	bl	16360 <__assert_fail@plt+0x4fe0>
   1342c:	ldrb	r1, [r0]
   13430:	and	r1, r1, #223	; 0xdf
   13434:	cmp	r1, #71	; 0x47
   13438:	beq	13594 <__assert_fail@plt+0x2214>
   1343c:	cmp	r1, #85	; 0x55
   13440:	bne	135f8 <__assert_fail@plt+0x2278>
   13444:	ldrb	r1, [r0, #1]
   13448:	and	r1, r1, #223	; 0xdf
   1344c:	cmp	r1, #84	; 0x54
   13450:	bne	135f8 <__assert_fail@plt+0x2278>
   13454:	ldrb	r1, [r0, #2]
   13458:	and	r1, r1, #223	; 0xdf
   1345c:	cmp	r1, #70	; 0x46
   13460:	bne	135f8 <__assert_fail@plt+0x2278>
   13464:	ldrb	r1, [r0, #3]
   13468:	cmp	r1, #45	; 0x2d
   1346c:	bne	135f8 <__assert_fail@plt+0x2278>
   13470:	ldrb	r1, [r0, #4]
   13474:	cmp	r1, #56	; 0x38
   13478:	bne	135f8 <__assert_fail@plt+0x2278>
   1347c:	ldrb	r0, [r0, #5]
   13480:	cmp	r0, #0
   13484:	movw	r0, #28960	; 0x7120
   13488:	movt	r0, #1
   1348c:	str	r0, [sp, #72]	; 0x48
   13490:	bne	135f8 <__assert_fail@plt+0x2278>
   13494:	b	13614 <__assert_fail@plt+0x2294>
   13498:	mov	r0, #1
   1349c:	b	134dc <__assert_fail@plt+0x215c>
   134a0:	mov	r4, #0
   134a4:	mov	r9, #0
   134a8:	mov	r2, r0
   134ac:	b	1352c <__assert_fail@plt+0x21ac>
   134b0:	tst	r8, #1
   134b4:	bne	134dc <__assert_fail@plt+0x215c>
   134b8:	mov	r2, r0
   134bc:	b	13504 <__assert_fail@plt+0x2184>
   134c0:	mov	r0, #1
   134c4:	mov	r9, #0
   134c8:	mov	r4, #5
   134cc:	b	13548 <__assert_fail@plt+0x21c8>
   134d0:	mov	r2, #1
   134d4:	tst	r8, #1
   134d8:	beq	13504 <__assert_fail@plt+0x2184>
   134dc:	mov	r1, #1
   134e0:	mov	r9, #0
   134e4:	mov	r4, #2
   134e8:	mov	r2, r0
   134ec:	mov	r3, #1
   134f0:	str	r1, [fp, #-72]	; 0xffffffb8
   134f4:	movw	r1, #28958	; 0x711e
   134f8:	movt	r1, #1
   134fc:	str	r1, [fp, #-88]	; 0xffffffa8
   13500:	b	137ac <__assert_fail@plt+0x242c>
   13504:	cmp	r5, #0
   13508:	mov	r9, #1
   1350c:	mov	r4, #2
   13510:	movne	r0, #39	; 0x27
   13514:	strbne	r0, [ip]
   13518:	movw	r0, #28958	; 0x711e
   1351c:	movt	r0, #1
   13520:	str	r0, [fp, #-88]	; 0xffffffa8
   13524:	mov	r0, #1
   13528:	str	r0, [fp, #-72]	; 0xffffffb8
   1352c:	mov	r3, #0
   13530:	b	137ac <__assert_fail@plt+0x242c>
   13534:	mov	r4, #5
   13538:	tst	r8, #1
   1353c:	beq	13564 <__assert_fail@plt+0x21e4>
   13540:	mov	r0, #1
   13544:	mov	r9, #0
   13548:	str	r0, [fp, #-72]	; 0xffffffb8
   1354c:	movw	r0, #28954	; 0x711a
   13550:	mov	r2, #1
   13554:	mov	r3, #1
   13558:	movt	r0, #1
   1355c:	str	r0, [fp, #-88]	; 0xffffffa8
   13560:	b	137ac <__assert_fail@plt+0x242c>
   13564:	cmp	r5, #0
   13568:	mov	r3, #0
   1356c:	mov	r9, #1
   13570:	mov	r2, #1
   13574:	movne	r0, #34	; 0x22
   13578:	strbne	r0, [ip]
   1357c:	movw	r0, #28954	; 0x711a
   13580:	movt	r0, #1
   13584:	str	r0, [fp, #-88]	; 0xffffffa8
   13588:	mov	r0, #1
   1358c:	str	r0, [fp, #-72]	; 0xffffffb8
   13590:	b	137ac <__assert_fail@plt+0x242c>
   13594:	ldrb	r1, [r0, #1]
   13598:	and	r1, r1, #223	; 0xdf
   1359c:	cmp	r1, #66	; 0x42
   135a0:	bne	135f8 <__assert_fail@plt+0x2278>
   135a4:	ldrb	r1, [r0, #2]
   135a8:	cmp	r1, #49	; 0x31
   135ac:	bne	135f8 <__assert_fail@plt+0x2278>
   135b0:	ldrb	r1, [r0, #3]
   135b4:	cmp	r1, #56	; 0x38
   135b8:	bne	135f8 <__assert_fail@plt+0x2278>
   135bc:	ldrb	r1, [r0, #4]
   135c0:	cmp	r1, #48	; 0x30
   135c4:	bne	135f8 <__assert_fail@plt+0x2278>
   135c8:	ldrb	r1, [r0, #5]
   135cc:	cmp	r1, #51	; 0x33
   135d0:	bne	135f8 <__assert_fail@plt+0x2278>
   135d4:	ldrb	r1, [r0, #6]
   135d8:	cmp	r1, #48	; 0x30
   135dc:	bne	135f8 <__assert_fail@plt+0x2278>
   135e0:	ldrb	r0, [r0, #7]
   135e4:	cmp	r0, #0
   135e8:	movw	r0, #28968	; 0x7128
   135ec:	movt	r0, #1
   135f0:	str	r0, [sp, #72]	; 0x48
   135f4:	beq	13614 <__assert_fail@plt+0x2294>
   135f8:	movw	r1, #28954	; 0x711a
   135fc:	movw	r0, #28958	; 0x711e
   13600:	cmp	r4, #9
   13604:	movt	r1, #1
   13608:	movt	r0, #1
   1360c:	moveq	r0, r1
   13610:	str	r0, [sp, #72]	; 0x48
   13614:	movw	r6, #28958	; 0x711e
   13618:	mov	r0, #0
   1361c:	mov	r2, #5
   13620:	movt	r6, #1
   13624:	mov	r1, r6
   13628:	bl	11134 <dcgettext@plt>
   1362c:	cmp	r0, r6
   13630:	str	r0, [sp, #76]	; 0x4c
   13634:	beq	13680 <__assert_fail@plt+0x2300>
   13638:	ldr	ip, [fp, #-84]	; 0xffffffac
   1363c:	mov	r9, #0
   13640:	tst	r8, #1
   13644:	bne	13788 <__assert_fail@plt+0x2408>
   13648:	ldr	r0, [sp, #72]	; 0x48
   1364c:	ldrb	r0, [r0]
   13650:	cmp	r0, #0
   13654:	beq	13788 <__assert_fail@plt+0x2408>
   13658:	ldr	r1, [sp, #72]	; 0x48
   1365c:	mov	r9, #0
   13660:	add	r1, r1, #1
   13664:	cmp	r9, r5
   13668:	strbcc	r0, [ip, r9]
   1366c:	ldrb	r0, [r1, r9]
   13670:	add	r9, r9, #1
   13674:	cmp	r0, #0
   13678:	bne	13664 <__assert_fail@plt+0x22e4>
   1367c:	b	13788 <__assert_fail@plt+0x2408>
   13680:	bl	16360 <__assert_fail@plt+0x4fe0>
   13684:	ldrb	r1, [r0]
   13688:	and	r1, r1, #223	; 0xdf
   1368c:	cmp	r1, #71	; 0x47
   13690:	beq	13700 <__assert_fail@plt+0x2380>
   13694:	ldr	ip, [fp, #-84]	; 0xffffffac
   13698:	cmp	r1, #85	; 0x55
   1369c:	bne	1375c <__assert_fail@plt+0x23dc>
   136a0:	ldrb	r1, [r0, #1]
   136a4:	and	r1, r1, #223	; 0xdf
   136a8:	cmp	r1, #84	; 0x54
   136ac:	bne	1375c <__assert_fail@plt+0x23dc>
   136b0:	ldrb	r1, [r0, #2]
   136b4:	and	r1, r1, #223	; 0xdf
   136b8:	cmp	r1, #70	; 0x46
   136bc:	bne	1375c <__assert_fail@plt+0x23dc>
   136c0:	ldrb	r1, [r0, #3]
   136c4:	cmp	r1, #45	; 0x2d
   136c8:	bne	1375c <__assert_fail@plt+0x23dc>
   136cc:	ldrb	r1, [r0, #4]
   136d0:	cmp	r1, #56	; 0x38
   136d4:	bne	1375c <__assert_fail@plt+0x23dc>
   136d8:	ldrb	r0, [r0, #5]
   136dc:	cmp	r0, #0
   136e0:	bne	1375c <__assert_fail@plt+0x23dc>
   136e4:	movw	r0, #28964	; 0x7124
   136e8:	movt	r0, #1
   136ec:	str	r0, [sp, #76]	; 0x4c
   136f0:	mov	r9, #0
   136f4:	tst	r8, #1
   136f8:	beq	13648 <__assert_fail@plt+0x22c8>
   136fc:	b	13788 <__assert_fail@plt+0x2408>
   13700:	ldrb	r1, [r0, #1]
   13704:	ldr	ip, [fp, #-84]	; 0xffffffac
   13708:	and	r1, r1, #223	; 0xdf
   1370c:	cmp	r1, #66	; 0x42
   13710:	bne	1375c <__assert_fail@plt+0x23dc>
   13714:	ldrb	r1, [r0, #2]
   13718:	cmp	r1, #49	; 0x31
   1371c:	bne	1375c <__assert_fail@plt+0x23dc>
   13720:	ldrb	r1, [r0, #3]
   13724:	cmp	r1, #56	; 0x38
   13728:	bne	1375c <__assert_fail@plt+0x23dc>
   1372c:	ldrb	r1, [r0, #4]
   13730:	cmp	r1, #48	; 0x30
   13734:	bne	1375c <__assert_fail@plt+0x23dc>
   13738:	ldrb	r1, [r0, #5]
   1373c:	cmp	r1, #51	; 0x33
   13740:	bne	1375c <__assert_fail@plt+0x23dc>
   13744:	ldrb	r1, [r0, #6]
   13748:	cmp	r1, #48	; 0x30
   1374c:	bne	1375c <__assert_fail@plt+0x23dc>
   13750:	ldrb	r0, [r0, #7]
   13754:	cmp	r0, #0
   13758:	beq	14570 <__assert_fail@plt+0x31f0>
   1375c:	movw	r0, #28958	; 0x711e
   13760:	cmp	r4, #9
   13764:	movt	r0, #1
   13768:	mov	r1, r0
   1376c:	movw	r0, #28954	; 0x711a
   13770:	movt	r0, #1
   13774:	moveq	r1, r0
   13778:	str	r1, [sp, #76]	; 0x4c
   1377c:	mov	r9, #0
   13780:	tst	r8, #1
   13784:	beq	13648 <__assert_fail@plt+0x22c8>
   13788:	ldr	r6, [sp, #76]	; 0x4c
   1378c:	mov	r0, r6
   13790:	bl	1126c <strlen@plt>
   13794:	ldr	ip, [fp, #-84]	; 0xffffffac
   13798:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1379c:	str	r0, [fp, #-72]	; 0xffffffb8
   137a0:	str	r6, [fp, #-88]	; 0xffffffa8
   137a4:	mov	r2, #1
   137a8:	mov	r3, r8
   137ac:	ldr	r0, [fp, #-72]	; 0xffffffb8
   137b0:	str	r4, [fp, #-64]	; 0xffffffc0
   137b4:	mov	sl, #0
   137b8:	str	r3, [fp, #-76]	; 0xffffffb4
   137bc:	str	r2, [sp, #88]	; 0x58
   137c0:	cmp	r0, #0
   137c4:	movwne	r0, #1
   137c8:	and	r1, r0, r3
   137cc:	and	r1, r2, r1
   137d0:	str	r1, [sp, #48]	; 0x30
   137d4:	sub	r1, r4, #2
   137d8:	clz	r1, r1
   137dc:	lsr	r1, r1, #5
   137e0:	and	r1, r1, r3
   137e4:	str	r1, [sp, #44]	; 0x2c
   137e8:	subs	r1, r4, #2
   137ec:	eor	r4, r3, #1
   137f0:	movwne	r1, #1
   137f4:	str	r4, [sp, #92]	; 0x5c
   137f8:	orr	r4, r1, r4
   137fc:	and	r1, r1, r2
   13800:	and	r0, r0, r1
   13804:	str	r4, [sp, #64]	; 0x40
   13808:	ldr	r4, [sp, #84]	; 0x54
   1380c:	str	r0, [fp, #-60]	; 0xffffffc4
   13810:	orr	r0, r1, r3
   13814:	ldr	r1, [fp, #16]
   13818:	eor	r0, r0, #1
   1381c:	clz	r1, r1
   13820:	lsr	r1, r1, #5
   13824:	orr	r0, r1, r0
   13828:	str	r0, [fp, #-68]	; 0xffffffbc
   1382c:	eor	r0, r2, #1
   13830:	str	r0, [sp, #52]	; 0x34
   13834:	cmn	r7, #1
   13838:	beq	13848 <__assert_fail@plt+0x24c8>
   1383c:	cmp	sl, r7
   13840:	bne	13854 <__assert_fail@plt+0x24d4>
   13844:	b	144e8 <__assert_fail@plt+0x3168>
   13848:	ldrb	r0, [lr, sl]
   1384c:	cmp	r0, #0
   13850:	beq	144f0 <__assert_fail@plt+0x3170>
   13854:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13858:	cmp	r0, #0
   1385c:	beq	138bc <__assert_fail@plt+0x253c>
   13860:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13864:	mov	r6, r5
   13868:	add	r5, sl, r0
   1386c:	cmp	r0, #2
   13870:	bcc	138dc <__assert_fail@plt+0x255c>
   13874:	mov	r0, #0
   13878:	cmn	r7, #1
   1387c:	str	r0, [fp, #-56]	; 0xffffffc8
   13880:	bne	13898 <__assert_fail@plt+0x2518>
   13884:	mov	r0, lr
   13888:	bl	1126c <strlen@plt>
   1388c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13890:	ldr	ip, [fp, #-84]	; 0xffffffac
   13894:	mov	r7, r0
   13898:	cmp	r5, r7
   1389c:	bls	138ec <__assert_fail@plt+0x256c>
   138a0:	mov	r0, #0
   138a4:	mov	r5, r6
   138a8:	str	r0, [fp, #-48]	; 0xffffffd0
   138ac:	ldrb	r6, [lr, sl]
   138b0:	cmp	r6, #126	; 0x7e
   138b4:	bls	1393c <__assert_fail@plt+0x25bc>
   138b8:	b	13e98 <__assert_fail@plt+0x2b18>
   138bc:	mov	r0, #0
   138c0:	str	r0, [fp, #-56]	; 0xffffffc8
   138c4:	mov	r0, #0
   138c8:	str	r0, [fp, #-48]	; 0xffffffd0
   138cc:	ldrb	r6, [lr, sl]
   138d0:	cmp	r6, #126	; 0x7e
   138d4:	bls	1393c <__assert_fail@plt+0x25bc>
   138d8:	b	13e98 <__assert_fail@plt+0x2b18>
   138dc:	mov	r0, #0
   138e0:	str	r0, [fp, #-56]	; 0xffffffc8
   138e4:	cmp	r5, r7
   138e8:	bhi	138a0 <__assert_fail@plt+0x2520>
   138ec:	ldr	r1, [fp, #-88]	; 0xffffffa8
   138f0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   138f4:	add	r0, lr, sl
   138f8:	bl	11254 <bcmp@plt>
   138fc:	ldr	r2, [sp, #92]	; 0x5c
   13900:	cmp	r0, #0
   13904:	mov	r1, r0
   13908:	mov	r5, r6
   1390c:	movwne	r1, #1
   13910:	orr	r1, r1, r2
   13914:	tst	r1, #1
   13918:	beq	145b0 <__assert_fail@plt+0x3230>
   1391c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13920:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13924:	clz	r0, r0
   13928:	lsr	r0, r0, #5
   1392c:	str	r0, [fp, #-48]	; 0xffffffd0
   13930:	ldrb	r6, [lr, sl]
   13934:	cmp	r6, #126	; 0x7e
   13938:	bhi	13e98 <__assert_fail@plt+0x2b18>
   1393c:	add	r3, pc, #16
   13940:	mov	r8, #1
   13944:	mov	r2, #110	; 0x6e
   13948:	mov	r0, #97	; 0x61
   1394c:	mov	r1, #0
   13950:	ldr	pc, [r3, r6, lsl #2]
   13954:	andeq	r3, r1, r0, asr ip
   13958:	muleq	r1, r8, lr
   1395c:	muleq	r1, r8, lr
   13960:	muleq	r1, r8, lr
   13964:	muleq	r1, r8, lr
   13968:	muleq	r1, r8, lr
   1396c:	muleq	r1, r8, lr
   13970:	andeq	r3, r1, ip, asr #30
   13974:	andeq	r3, r1, r0, lsr ip
   13978:	andeq	r3, r1, r8, lsr #24
   1397c:	andeq	r3, r1, ip, lsr ip
   13980:	andeq	r3, r1, ip, ror #26
   13984:	andeq	r3, r1, r0, lsr #24
   13988:	andeq	r3, r1, r8, lsr ip
   1398c:	muleq	r1, r8, lr
   13990:	muleq	r1, r8, lr
   13994:	muleq	r1, r8, lr
   13998:	muleq	r1, r8, lr
   1399c:	muleq	r1, r8, lr
   139a0:	muleq	r1, r8, lr
   139a4:	muleq	r1, r8, lr
   139a8:	muleq	r1, r8, lr
   139ac:	muleq	r1, r8, lr
   139b0:	muleq	r1, r8, lr
   139b4:	muleq	r1, r8, lr
   139b8:	muleq	r1, r8, lr
   139bc:	muleq	r1, r8, lr
   139c0:	muleq	r1, r8, lr
   139c4:	muleq	r1, r8, lr
   139c8:	muleq	r1, r8, lr
   139cc:	muleq	r1, r8, lr
   139d0:	muleq	r1, r8, lr
   139d4:	andeq	r3, r1, r4, asr #23
   139d8:	andeq	r3, r1, r8, asr #23
   139dc:	andeq	r3, r1, r8, asr #23
   139e0:			; <UNDEFINED> instruction: 0x00013bb8
   139e4:	andeq	r3, r1, r8, asr #23
   139e8:	andeq	r3, r1, r0, asr fp
   139ec:	andeq	r3, r1, r8, asr #23
   139f0:	andeq	r3, r1, r4, ror sp
   139f4:	andeq	r3, r1, r8, asr #23
   139f8:	andeq	r3, r1, r8, asr #23
   139fc:	andeq	r3, r1, r8, asr #23
   13a00:	andeq	r3, r1, r0, asr fp
   13a04:	andeq	r3, r1, r0, asr fp
   13a08:	andeq	r3, r1, r0, asr fp
   13a0c:	andeq	r3, r1, r0, asr fp
   13a10:	andeq	r3, r1, r0, asr fp
   13a14:	andeq	r3, r1, r0, asr fp
   13a18:	andeq	r3, r1, r0, asr fp
   13a1c:	andeq	r3, r1, r0, asr fp
   13a20:	andeq	r3, r1, r0, asr fp
   13a24:	andeq	r3, r1, r0, asr fp
   13a28:	andeq	r3, r1, r0, asr fp
   13a2c:	andeq	r3, r1, r0, asr fp
   13a30:	andeq	r3, r1, r0, asr fp
   13a34:	andeq	r3, r1, r0, asr fp
   13a38:	andeq	r3, r1, r0, asr fp
   13a3c:	andeq	r3, r1, r0, asr fp
   13a40:	andeq	r3, r1, r8, asr #23
   13a44:	andeq	r3, r1, r8, asr #23
   13a48:	andeq	r3, r1, r8, asr #23
   13a4c:	andeq	r3, r1, r8, asr #23
   13a50:	andeq	r3, r1, r8, lsr sp
   13a54:	muleq	r1, r8, lr
   13a58:	andeq	r3, r1, r0, asr fp
   13a5c:	andeq	r3, r1, r0, asr fp
   13a60:	andeq	r3, r1, r0, asr fp
   13a64:	andeq	r3, r1, r0, asr fp
   13a68:	andeq	r3, r1, r0, asr fp
   13a6c:	andeq	r3, r1, r0, asr fp
   13a70:	andeq	r3, r1, r0, asr fp
   13a74:	andeq	r3, r1, r0, asr fp
   13a78:	andeq	r3, r1, r0, asr fp
   13a7c:	andeq	r3, r1, r0, asr fp
   13a80:	andeq	r3, r1, r0, asr fp
   13a84:	andeq	r3, r1, r0, asr fp
   13a88:	andeq	r3, r1, r0, asr fp
   13a8c:	andeq	r3, r1, r0, asr fp
   13a90:	andeq	r3, r1, r0, asr fp
   13a94:	andeq	r3, r1, r0, asr fp
   13a98:	andeq	r3, r1, r0, asr fp
   13a9c:	andeq	r3, r1, r0, asr fp
   13aa0:	andeq	r3, r1, r0, asr fp
   13aa4:	andeq	r3, r1, r0, asr fp
   13aa8:	andeq	r3, r1, r0, asr fp
   13aac:	andeq	r3, r1, r0, asr fp
   13ab0:	andeq	r3, r1, r0, asr fp
   13ab4:	andeq	r3, r1, r0, asr fp
   13ab8:	andeq	r3, r1, r0, asr fp
   13abc:	andeq	r3, r1, r0, asr fp
   13ac0:	andeq	r3, r1, r8, asr #23
   13ac4:	strdeq	r3, [r1], -ip
   13ac8:	andeq	r3, r1, r0, asr fp
   13acc:	andeq	r3, r1, r8, asr #23
   13ad0:	andeq	r3, r1, r0, asr fp
   13ad4:	andeq	r3, r1, r8, asr #23
   13ad8:	andeq	r3, r1, r0, asr fp
   13adc:	andeq	r3, r1, r0, asr fp
   13ae0:	andeq	r3, r1, r0, asr fp
   13ae4:	andeq	r3, r1, r0, asr fp
   13ae8:	andeq	r3, r1, r0, asr fp
   13aec:	andeq	r3, r1, r0, asr fp
   13af0:	andeq	r3, r1, r0, asr fp
   13af4:	andeq	r3, r1, r0, asr fp
   13af8:	andeq	r3, r1, r0, asr fp
   13afc:	andeq	r3, r1, r0, asr fp
   13b00:	andeq	r3, r1, r0, asr fp
   13b04:	andeq	r3, r1, r0, asr fp
   13b08:	andeq	r3, r1, r0, asr fp
   13b0c:	andeq	r3, r1, r0, asr fp
   13b10:	andeq	r3, r1, r0, asr fp
   13b14:	andeq	r3, r1, r0, asr fp
   13b18:	andeq	r3, r1, r0, asr fp
   13b1c:	andeq	r3, r1, r0, asr fp
   13b20:	andeq	r3, r1, r0, asr fp
   13b24:	andeq	r3, r1, r0, asr fp
   13b28:	andeq	r3, r1, r0, asr fp
   13b2c:	andeq	r3, r1, r0, asr fp
   13b30:	andeq	r3, r1, r0, asr fp
   13b34:	andeq	r3, r1, r0, asr fp
   13b38:	andeq	r3, r1, r0, asr fp
   13b3c:	andeq	r3, r1, r0, asr fp
   13b40:	muleq	r1, r0, fp
   13b44:	andeq	r3, r1, r8, asr #23
   13b48:	muleq	r1, r0, fp
   13b4c:			; <UNDEFINED> instruction: 0x00013bb8
   13b50:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13b54:	tst	r0, #1
   13b58:	bne	13e10 <__assert_fail@plt+0x2a90>
   13b5c:	ldr	r1, [fp, #16]
   13b60:	ubfx	r0, r6, #5, #3
   13b64:	mov	r2, #1
   13b68:	ldr	r0, [r1, r0, lsl #2]
   13b6c:	and	r1, r6, #31
   13b70:	tst	r0, r2, lsl r1
   13b74:	beq	13e10 <__assert_fail@plt+0x2a90>
   13b78:	mov	r0, r6
   13b7c:	mov	r1, r8
   13b80:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13b84:	tst	r2, #1
   13b88:	beq	13e30 <__assert_fail@plt+0x2ab0>
   13b8c:	b	1458c <__assert_fail@plt+0x320c>
   13b90:	cmp	r7, #1
   13b94:	beq	13bb8 <__assert_fail@plt+0x2838>
   13b98:	mov	r8, #0
   13b9c:	cmn	r7, #1
   13ba0:	bne	13dfc <__assert_fail@plt+0x2a7c>
   13ba4:	ldrb	r0, [lr, #1]
   13ba8:	cmp	r0, #0
   13bac:	beq	13bb8 <__assert_fail@plt+0x2838>
   13bb0:	mvn	r7, #0
   13bb4:	b	13dfc <__assert_fail@plt+0x2a7c>
   13bb8:	mov	r8, #0
   13bbc:	cmp	sl, #0
   13bc0:	bne	13dfc <__assert_fail@plt+0x2a7c>
   13bc4:	mov	r1, #1
   13bc8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13bcc:	cmp	r0, #2
   13bd0:	bne	13be8 <__assert_fail@plt+0x2868>
   13bd4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13bd8:	mov	r8, r1
   13bdc:	tst	r0, #1
   13be0:	beq	13b50 <__assert_fail@plt+0x27d0>
   13be4:	b	1458c <__assert_fail@plt+0x320c>
   13be8:	mov	r8, r1
   13bec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13bf0:	tst	r0, #1
   13bf4:	beq	13b5c <__assert_fail@plt+0x27dc>
   13bf8:	b	13e10 <__assert_fail@plt+0x2a90>
   13bfc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13c00:	cmp	r0, #2
   13c04:	bne	13ec4 <__assert_fail@plt+0x2b44>
   13c08:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13c0c:	tst	r0, #1
   13c10:	bne	1458c <__assert_fail@plt+0x320c>
   13c14:	mov	r0, #0
   13c18:	str	r0, [fp, #-56]	; 0xffffffc8
   13c1c:	b	13edc <__assert_fail@plt+0x2b5c>
   13c20:	mov	r0, #102	; 0x66
   13c24:	b	13f4c <__assert_fail@plt+0x2bcc>
   13c28:	mov	r2, #116	; 0x74
   13c2c:	b	13c3c <__assert_fail@plt+0x28bc>
   13c30:	mov	r0, #98	; 0x62
   13c34:	b	13f4c <__assert_fail@plt+0x2bcc>
   13c38:	mov	r2, #114	; 0x72
   13c3c:	ldr	r0, [sp, #64]	; 0x40
   13c40:	tst	r0, #1
   13c44:	mov	r0, r2
   13c48:	bne	13f4c <__assert_fail@plt+0x2bcc>
   13c4c:	b	1458c <__assert_fail@plt+0x320c>
   13c50:	ldr	r0, [sp, #88]	; 0x58
   13c54:	tst	r0, #1
   13c58:	beq	13f6c <__assert_fail@plt+0x2bec>
   13c5c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13c60:	tst	r0, #1
   13c64:	bne	146c8 <__assert_fail@plt+0x3348>
   13c68:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13c6c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13c70:	subs	r0, r0, #2
   13c74:	movwne	r0, #1
   13c78:	orr	r0, r0, r1
   13c7c:	tst	r0, #1
   13c80:	bne	13cbc <__assert_fail@plt+0x293c>
   13c84:	cmp	r9, r5
   13c88:	movcc	r0, #39	; 0x27
   13c8c:	strbcc	r0, [ip, r9]
   13c90:	add	r0, r9, #1
   13c94:	cmp	r0, r5
   13c98:	movcc	r1, #36	; 0x24
   13c9c:	strbcc	r1, [ip, r0]
   13ca0:	add	r0, r9, #2
   13ca4:	add	r9, r9, #3
   13ca8:	cmp	r0, r5
   13cac:	movcc	r1, #39	; 0x27
   13cb0:	strbcc	r1, [ip, r0]
   13cb4:	mov	r0, #1
   13cb8:	str	r0, [fp, #-52]	; 0xffffffcc
   13cbc:	mov	r1, #1
   13cc0:	cmp	r9, r5
   13cc4:	mov	r8, #0
   13cc8:	mov	r6, #48	; 0x30
   13ccc:	str	r1, [fp, #-56]	; 0xffffffc8
   13cd0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13cd4:	movcc	r0, #92	; 0x5c
   13cd8:	strbcc	r0, [ip, r9]
   13cdc:	add	r0, r9, #1
   13ce0:	cmp	r1, #2
   13ce4:	beq	14138 <__assert_fail@plt+0x2db8>
   13ce8:	add	r1, sl, #1
   13cec:	cmp	r1, r7
   13cf0:	bcs	14138 <__assert_fail@plt+0x2db8>
   13cf4:	ldrb	r1, [lr, r1]
   13cf8:	sub	r1, r1, #48	; 0x30
   13cfc:	uxtb	r1, r1
   13d00:	cmp	r1, #9
   13d04:	bhi	14138 <__assert_fail@plt+0x2db8>
   13d08:	cmp	r0, r5
   13d0c:	movcc	r1, #48	; 0x30
   13d10:	strbcc	r1, [ip, r0]
   13d14:	add	r0, r9, #2
   13d18:	add	r9, r9, #3
   13d1c:	cmp	r0, r5
   13d20:	movcc	r1, #48	; 0x30
   13d24:	strbcc	r1, [ip, r0]
   13d28:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13d2c:	tst	r0, #1
   13d30:	beq	13b5c <__assert_fail@plt+0x27dc>
   13d34:	b	13e10 <__assert_fail@plt+0x2a90>
   13d38:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13d3c:	mov	r6, #63	; 0x3f
   13d40:	cmp	r0, #5
   13d44:	beq	1414c <__assert_fail@plt+0x2dcc>
   13d48:	mov	r1, #0
   13d4c:	cmp	r0, #2
   13d50:	str	r1, [fp, #-56]	; 0xffffffc8
   13d54:	bne	14214 <__assert_fail@plt+0x2e94>
   13d58:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13d5c:	mov	r8, #0
   13d60:	tst	r0, #1
   13d64:	beq	13b50 <__assert_fail@plt+0x27d0>
   13d68:	b	1458c <__assert_fail@plt+0x320c>
   13d6c:	mov	r0, #118	; 0x76
   13d70:	b	13f4c <__assert_fail@plt+0x2bcc>
   13d74:	mov	r0, #1
   13d78:	mov	r6, #39	; 0x27
   13d7c:	str	r0, [sp, #60]	; 0x3c
   13d80:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13d84:	cmp	r0, #2
   13d88:	bne	13f8c <__assert_fail@plt+0x2c0c>
   13d8c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13d90:	tst	r0, #1
   13d94:	bne	1458c <__assert_fail@plt+0x320c>
   13d98:	ldr	r2, [sp, #56]	; 0x38
   13d9c:	clz	r1, r5
   13da0:	mov	r8, #1
   13da4:	lsr	r1, r1, #5
   13da8:	cmp	r2, #0
   13dac:	mov	r0, r2
   13db0:	movwne	r0, #1
   13db4:	orrs	r0, r0, r1
   13db8:	moveq	r2, r5
   13dbc:	moveq	r5, r0
   13dc0:	cmp	r9, r5
   13dc4:	str	r2, [sp, #56]	; 0x38
   13dc8:	movcc	r0, #39	; 0x27
   13dcc:	strbcc	r0, [ip, r9]
   13dd0:	add	r0, r9, #1
   13dd4:	cmp	r0, r5
   13dd8:	movcc	r1, #92	; 0x5c
   13ddc:	strbcc	r1, [ip, r0]
   13de0:	add	r0, r9, #2
   13de4:	add	r9, r9, #3
   13de8:	cmp	r0, r5
   13dec:	movcc	r1, #39	; 0x27
   13df0:	strbcc	r1, [ip, r0]
   13df4:	mov	r0, #0
   13df8:	str	r0, [fp, #-52]	; 0xffffffcc
   13dfc:	mov	r0, #0
   13e00:	str	r0, [fp, #-56]	; 0xffffffc8
   13e04:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13e08:	tst	r0, #1
   13e0c:	beq	13b5c <__assert_fail@plt+0x27dc>
   13e10:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13e14:	mov	r1, r8
   13e18:	cmp	r0, #0
   13e1c:	mov	r0, r6
   13e20:	beq	13ee4 <__assert_fail@plt+0x2b64>
   13e24:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13e28:	tst	r2, #1
   13e2c:	bne	1458c <__assert_fail@plt+0x320c>
   13e30:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13e34:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13e38:	subs	r2, r2, #2
   13e3c:	movwne	r2, #1
   13e40:	orr	r2, r2, r3
   13e44:	tst	r2, #1
   13e48:	bne	13e84 <__assert_fail@plt+0x2b04>
   13e4c:	cmp	r9, r5
   13e50:	movcc	r2, #39	; 0x27
   13e54:	strbcc	r2, [ip, r9]
   13e58:	add	r2, r9, #1
   13e5c:	cmp	r2, r5
   13e60:	movcc	r3, #36	; 0x24
   13e64:	strbcc	r3, [ip, r2]
   13e68:	add	r2, r9, #2
   13e6c:	add	r9, r9, #3
   13e70:	cmp	r2, r5
   13e74:	movcc	r3, #39	; 0x27
   13e78:	strbcc	r3, [ip, r2]
   13e7c:	mov	r2, #1
   13e80:	str	r2, [fp, #-52]	; 0xffffffcc
   13e84:	cmp	r9, r5
   13e88:	movcc	r2, #92	; 0x5c
   13e8c:	strbcc	r2, [ip, r9]
   13e90:	add	r9, r9, #1
   13e94:	b	13f2c <__assert_fail@plt+0x2bac>
   13e98:	ldr	r0, [sp, #40]	; 0x28
   13e9c:	cmp	r0, #1
   13ea0:	bne	13fa0 <__assert_fail@plt+0x2c20>
   13ea4:	bl	1123c <__ctype_b_loc@plt>
   13ea8:	ldr	r0, [r0]
   13eac:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13eb0:	mov	r1, #1
   13eb4:	add	r0, r0, r6, lsl #1
   13eb8:	ldrb	r0, [r0, #1]
   13ebc:	ubfx	r8, r0, #6, #1
   13ec0:	b	142f8 <__assert_fail@plt+0x2f78>
   13ec4:	ldr	r1, [sp, #48]	; 0x30
   13ec8:	mov	r0, #0
   13ecc:	str	r0, [fp, #-56]	; 0xffffffc8
   13ed0:	mov	r0, #92	; 0x5c
   13ed4:	cmp	r1, #0
   13ed8:	beq	13f4c <__assert_fail@plt+0x2bcc>
   13edc:	mov	r6, #92	; 0x5c
   13ee0:	mov	r8, #0
   13ee4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13ee8:	cmp	r0, #0
   13eec:	bne	13f24 <__assert_fail@plt+0x2ba4>
   13ef0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13ef4:	tst	r0, #1
   13ef8:	beq	13f24 <__assert_fail@plt+0x2ba4>
   13efc:	cmp	r9, r5
   13f00:	movcc	r0, #39	; 0x27
   13f04:	strbcc	r0, [ip, r9]
   13f08:	add	r0, r9, #1
   13f0c:	add	r9, r9, #2
   13f10:	cmp	r0, r5
   13f14:	movcc	r1, #39	; 0x27
   13f18:	strbcc	r1, [ip, r0]
   13f1c:	mov	r0, #0
   13f20:	str	r0, [fp, #-52]	; 0xffffffcc
   13f24:	mov	r1, r8
   13f28:	mov	r0, r6
   13f2c:	cmp	r9, r5
   13f30:	and	r4, r4, r1
   13f34:	strbcc	r0, [ip, r9]
   13f38:	add	r9, r9, #1
   13f3c:	add	sl, sl, #1
   13f40:	cmn	r7, #1
   13f44:	bne	1383c <__assert_fail@plt+0x24bc>
   13f48:	b	13848 <__assert_fail@plt+0x24c8>
   13f4c:	mov	r1, #0
   13f50:	mov	r8, #0
   13f54:	str	r1, [fp, #-56]	; 0xffffffc8
   13f58:	ldr	r1, [sp, #88]	; 0x58
   13f5c:	tst	r1, #1
   13f60:	mov	r1, #0
   13f64:	beq	13b50 <__assert_fail@plt+0x27d0>
   13f68:	b	13e24 <__assert_fail@plt+0x2aa4>
   13f6c:	ldr	r0, [sp, #36]	; 0x24
   13f70:	mov	r6, #0
   13f74:	mov	r8, #0
   13f78:	cmp	r0, #0
   13f7c:	mov	r0, #0
   13f80:	str	r0, [fp, #-56]	; 0xffffffc8
   13f84:	bne	13f3c <__assert_fail@plt+0x2bbc>
   13f88:	b	13b50 <__assert_fail@plt+0x27d0>
   13f8c:	mov	r8, #1
   13f90:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13f94:	tst	r0, #1
   13f98:	beq	13b5c <__assert_fail@plt+0x27dc>
   13f9c:	b	13e10 <__assert_fail@plt+0x2a90>
   13fa0:	mov	r0, #0
   13fa4:	cmn	r7, #1
   13fa8:	str	r0, [fp, #-36]	; 0xffffffdc
   13fac:	str	r0, [fp, #-40]	; 0xffffffd8
   13fb0:	bne	13fc4 <__assert_fail@plt+0x2c44>
   13fb4:	mov	r0, lr
   13fb8:	bl	1126c <strlen@plt>
   13fbc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   13fc0:	mov	r7, r0
   13fc4:	ldr	r0, [sp, #44]	; 0x2c
   13fc8:	str	r4, [sp, #84]	; 0x54
   13fcc:	str	r5, [sp, #28]
   13fd0:	cmp	r0, #0
   13fd4:	beq	14228 <__assert_fail@plt+0x2ea8>
   13fd8:	ldr	r0, [sp, #80]	; 0x50
   13fdc:	mov	r8, #1
   13fe0:	mov	r5, #0
   13fe4:	add	r0, r0, sl
   13fe8:	str	r0, [sp, #24]
   13fec:	sub	r0, fp, #40	; 0x28
   13ff0:	mov	r3, r0
   13ff4:	b	14030 <__assert_fail@plt+0x2cb0>
   13ff8:	ldr	r5, [sp, #68]	; 0x44
   13ffc:	add	r5, r0, r5
   14000:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14004:	bl	11170 <iswprint@plt>
   14008:	cmp	r0, #0
   1400c:	sub	r4, fp, #40	; 0x28
   14010:	movwne	r0, #1
   14014:	and	r8, r8, r0
   14018:	mov	r0, r4
   1401c:	bl	11110 <mbsinit@plt>
   14020:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14024:	mov	r3, r4
   14028:	cmp	r0, #0
   1402c:	bne	142ec <__assert_fail@plt+0x2f6c>
   14030:	str	r5, [sp, #68]	; 0x44
   14034:	add	r5, r5, sl
   14038:	sub	r0, fp, #44	; 0x2c
   1403c:	add	r1, lr, r5
   14040:	sub	r2, r7, r5
   14044:	bl	16398 <__assert_fail@plt+0x5018>
   14048:	cmn	r0, #2
   1404c:	beq	142ac <__assert_fail@plt+0x2f2c>
   14050:	ldr	ip, [fp, #-84]	; 0xffffffac
   14054:	cmn	r0, #1
   14058:	beq	142a0 <__assert_fail@plt+0x2f20>
   1405c:	cmp	r0, #0
   14060:	beq	142a4 <__assert_fail@plt+0x2f24>
   14064:	cmp	r0, #2
   14068:	bcc	13ff8 <__assert_fail@plt+0x2c78>
   1406c:	ldr	r1, [sp, #68]	; 0x44
   14070:	ldr	r2, [sp, #24]
   14074:	add	r1, r2, r1
   14078:	sub	r2, r0, #1
   1407c:	ldrb	r3, [r1]
   14080:	sub	r3, r3, #91	; 0x5b
   14084:	cmp	r3, #33	; 0x21
   14088:	bls	140a8 <__assert_fail@plt+0x2d28>
   1408c:	add	r1, r1, #1
   14090:	subs	r2, r2, #1
   14094:	beq	13ff8 <__assert_fail@plt+0x2c78>
   14098:	ldrb	r3, [r1]
   1409c:	sub	r3, r3, #91	; 0x5b
   140a0:	cmp	r3, #33	; 0x21
   140a4:	bhi	1408c <__assert_fail@plt+0x2d0c>
   140a8:	add	r5, pc, #0
   140ac:	ldr	pc, [r5, r3, lsl #2]
   140b0:	andeq	r4, r1, r4, asr #11
   140b4:	andeq	r4, r1, r4, asr #11
   140b8:	andeq	r4, r1, ip, lsl #1
   140bc:	andeq	r4, r1, r4, asr #11
   140c0:	andeq	r4, r1, ip, lsl #1
   140c4:	andeq	r4, r1, r4, asr #11
   140c8:	andeq	r4, r1, ip, lsl #1
   140cc:	andeq	r4, r1, ip, lsl #1
   140d0:	andeq	r4, r1, ip, lsl #1
   140d4:	andeq	r4, r1, ip, lsl #1
   140d8:	andeq	r4, r1, ip, lsl #1
   140dc:	andeq	r4, r1, ip, lsl #1
   140e0:	andeq	r4, r1, ip, lsl #1
   140e4:	andeq	r4, r1, ip, lsl #1
   140e8:	andeq	r4, r1, ip, lsl #1
   140ec:	andeq	r4, r1, ip, lsl #1
   140f0:	andeq	r4, r1, ip, lsl #1
   140f4:	andeq	r4, r1, ip, lsl #1
   140f8:	andeq	r4, r1, ip, lsl #1
   140fc:	andeq	r4, r1, ip, lsl #1
   14100:	andeq	r4, r1, ip, lsl #1
   14104:	andeq	r4, r1, ip, lsl #1
   14108:	andeq	r4, r1, ip, lsl #1
   1410c:	andeq	r4, r1, ip, lsl #1
   14110:	andeq	r4, r1, ip, lsl #1
   14114:	andeq	r4, r1, ip, lsl #1
   14118:	andeq	r4, r1, ip, lsl #1
   1411c:	andeq	r4, r1, ip, lsl #1
   14120:	andeq	r4, r1, ip, lsl #1
   14124:	andeq	r4, r1, ip, lsl #1
   14128:	andeq	r4, r1, ip, lsl #1
   1412c:	andeq	r4, r1, ip, lsl #1
   14130:	andeq	r4, r1, ip, lsl #1
   14134:	andeq	r4, r1, r4, asr #11
   14138:	mov	r9, r0
   1413c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14140:	tst	r0, #1
   14144:	beq	13b5c <__assert_fail@plt+0x27dc>
   14148:	b	13e10 <__assert_fail@plt+0x2a90>
   1414c:	mov	r0, #0
   14150:	str	r0, [fp, #-56]	; 0xffffffc8
   14154:	ldr	r0, [sp, #32]
   14158:	cmp	r0, #0
   1415c:	beq	14214 <__assert_fail@plt+0x2e94>
   14160:	add	r0, sl, #2
   14164:	mov	r1, r7
   14168:	cmp	r0, r7
   1416c:	bcs	14214 <__assert_fail@plt+0x2e94>
   14170:	add	r1, sl, lr
   14174:	ldrb	r1, [r1, #1]
   14178:	cmp	r1, #63	; 0x3f
   1417c:	bne	14214 <__assert_fail@plt+0x2e94>
   14180:	ldrb	r8, [lr, r0]
   14184:	sub	r2, r8, #33	; 0x21
   14188:	cmp	r2, #29
   1418c:	bhi	14214 <__assert_fail@plt+0x2e94>
   14190:	mov	r1, r4
   14194:	movw	r4, #20929	; 0x51c1
   14198:	mov	r3, #1
   1419c:	movt	r4, #14336	; 0x3800
   141a0:	tst	r4, r3, lsl r2
   141a4:	beq	144d0 <__assert_fail@plt+0x3150>
   141a8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   141ac:	tst	r2, #1
   141b0:	bne	1458c <__assert_fail@plt+0x320c>
   141b4:	cmp	r9, r5
   141b8:	mov	r6, r8
   141bc:	mov	r4, r1
   141c0:	mov	sl, r0
   141c4:	mov	r8, #0
   141c8:	movcc	r2, #63	; 0x3f
   141cc:	strbcc	r2, [ip, r9]
   141d0:	add	r2, r9, #1
   141d4:	cmp	r2, r5
   141d8:	movcc	r3, #34	; 0x22
   141dc:	strbcc	r3, [ip, r2]
   141e0:	add	r2, r9, #2
   141e4:	cmp	r2, r5
   141e8:	movcc	r3, #34	; 0x22
   141ec:	strbcc	r3, [ip, r2]
   141f0:	add	r2, r9, #3
   141f4:	add	r9, r9, #4
   141f8:	cmp	r2, r5
   141fc:	movcc	r3, #63	; 0x3f
   14200:	strbcc	r3, [ip, r2]
   14204:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14208:	tst	r0, #1
   1420c:	beq	13b5c <__assert_fail@plt+0x27dc>
   14210:	b	13e10 <__assert_fail@plt+0x2a90>
   14214:	mov	r8, #0
   14218:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1421c:	tst	r0, #1
   14220:	beq	13b5c <__assert_fail@plt+0x27dc>
   14224:	b	13e10 <__assert_fail@plt+0x2a90>
   14228:	mov	r8, #1
   1422c:	mov	r5, #0
   14230:	sub	r4, fp, #40	; 0x28
   14234:	str	r5, [sp, #68]	; 0x44
   14238:	add	r5, r5, sl
   1423c:	sub	r0, fp, #44	; 0x2c
   14240:	mov	r3, r4
   14244:	add	r1, lr, r5
   14248:	sub	r2, r7, r5
   1424c:	bl	16398 <__assert_fail@plt+0x5018>
   14250:	cmn	r0, #2
   14254:	beq	142ac <__assert_fail@plt+0x2f2c>
   14258:	cmn	r0, #1
   1425c:	beq	142a0 <__assert_fail@plt+0x2f20>
   14260:	ldr	r5, [sp, #68]	; 0x44
   14264:	cmp	r0, #0
   14268:	beq	142e8 <__assert_fail@plt+0x2f68>
   1426c:	add	r5, r0, r5
   14270:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14274:	bl	11170 <iswprint@plt>
   14278:	cmp	r0, #0
   1427c:	sub	r4, fp, #40	; 0x28
   14280:	movwne	r0, #1
   14284:	and	r8, r8, r0
   14288:	mov	r0, r4
   1428c:	bl	11110 <mbsinit@plt>
   14290:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14294:	cmp	r0, #0
   14298:	beq	14234 <__assert_fail@plt+0x2eb4>
   1429c:	b	142ec <__assert_fail@plt+0x2f6c>
   142a0:	mov	r8, #0
   142a4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   142a8:	b	142e0 <__assert_fail@plt+0x2f60>
   142ac:	ldr	lr, [fp, #-80]	; 0xffffffb0
   142b0:	mov	r8, #0
   142b4:	cmp	r5, r7
   142b8:	bcs	142e0 <__assert_fail@plt+0x2f60>
   142bc:	ldrb	r0, [lr, r5]
   142c0:	cmp	r0, #0
   142c4:	beq	142e0 <__assert_fail@plt+0x2f60>
   142c8:	ldr	r0, [sp, #68]	; 0x44
   142cc:	add	r0, r0, #1
   142d0:	add	r5, r0, sl
   142d4:	str	r0, [sp, #68]	; 0x44
   142d8:	cmp	r5, r7
   142dc:	bcc	142bc <__assert_fail@plt+0x2f3c>
   142e0:	ldr	r5, [sp, #68]	; 0x44
   142e4:	b	142ec <__assert_fail@plt+0x2f6c>
   142e8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   142ec:	mov	r1, r5
   142f0:	ldr	r5, [sp, #28]
   142f4:	ldr	r4, [sp, #84]	; 0x54
   142f8:	ldr	r0, [sp, #52]	; 0x34
   142fc:	ldr	ip, [fp, #-84]	; 0xffffffac
   14300:	cmp	r1, #1
   14304:	orr	r2, r8, r0
   14308:	mov	r0, r1
   1430c:	bhi	14318 <__assert_fail@plt+0x2f98>
   14310:	tst	r2, #1
   14314:	bne	13b50 <__assert_fail@plt+0x27d0>
   14318:	add	r0, r0, sl
   1431c:	str	r2, [sp, #84]	; 0x54
   14320:	str	r0, [fp, #-56]	; 0xffffffc8
   14324:	mov	r0, #0
   14328:	tst	r2, #1
   1432c:	bne	1440c <__assert_fail@plt+0x308c>
   14330:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14334:	tst	r1, #1
   14338:	bne	1458c <__assert_fail@plt+0x320c>
   1433c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14340:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14344:	subs	r2, r1, #2
   14348:	movwne	r2, #1
   1434c:	orr	r2, r2, r0
   14350:	tst	r2, #1
   14354:	bne	14390 <__assert_fail@plt+0x3010>
   14358:	cmp	r9, r5
   1435c:	add	r2, r9, #1
   14360:	mov	r0, #1
   14364:	movcc	r1, #39	; 0x27
   14368:	str	r0, [fp, #-52]	; 0xffffffcc
   1436c:	strbcc	r1, [ip, r9]
   14370:	cmp	r2, r5
   14374:	movcc	r1, #36	; 0x24
   14378:	strbcc	r1, [ip, r2]
   1437c:	add	r2, r9, #2
   14380:	add	r9, r9, #3
   14384:	cmp	r2, r5
   14388:	movcc	r1, #39	; 0x27
   1438c:	strbcc	r1, [ip, r2]
   14390:	cmp	r9, r5
   14394:	add	r2, r9, #1
   14398:	movcc	r1, #92	; 0x5c
   1439c:	strbcc	r1, [ip, r9]
   143a0:	cmp	r2, r5
   143a4:	bcs	143b8 <__assert_fail@plt+0x3038>
   143a8:	uxtb	r3, r6
   143ac:	mov	r1, #48	; 0x30
   143b0:	orr	r3, r1, r3, lsr #6
   143b4:	strb	r3, [ip, r2]
   143b8:	add	r2, r9, #2
   143bc:	add	r9, r9, #3
   143c0:	cmp	r2, r5
   143c4:	lsrcc	r3, r6, #3
   143c8:	movcc	r1, #6
   143cc:	bficc	r3, r1, #3, #29
   143d0:	mov	r1, #6
   143d4:	bfi	r6, r1, #3, #29
   143d8:	strbcc	r3, [ip, r2]
   143dc:	mov	r2, #1
   143e0:	b	14440 <__assert_fail@plt+0x30c0>
   143e4:	ldr	r1, [sp, #80]	; 0x50
   143e8:	cmp	r9, r2
   143ec:	mov	r5, r2
   143f0:	ldr	r2, [sp, #84]	; 0x54
   143f4:	strbcc	r6, [ip, r9]
   143f8:	add	r9, r9, #1
   143fc:	ldrb	r6, [r1, sl]
   14400:	mov	sl, r3
   14404:	tst	r2, #1
   14408:	beq	14330 <__assert_fail@plt+0x2fb0>
   1440c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   14410:	tst	r1, #1
   14414:	beq	14434 <__assert_fail@plt+0x30b4>
   14418:	cmp	r9, r5
   1441c:	mov	r2, r0
   14420:	movcc	r1, #92	; 0x5c
   14424:	strbcc	r1, [ip, r9]
   14428:	add	r9, r9, #1
   1442c:	mov	r1, #0
   14430:	b	1443c <__assert_fail@plt+0x30bc>
   14434:	mov	r1, #0
   14438:	mov	r2, r0
   1443c:	str	r1, [fp, #-48]	; 0xffffffd0
   14440:	mov	r0, r2
   14444:	and	r1, r2, #1
   14448:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1444c:	add	r3, sl, #1
   14450:	cmp	r2, r3
   14454:	bls	144b4 <__assert_fail@plt+0x3134>
   14458:	mov	r2, r5
   1445c:	ldr	r5, [fp, #-52]	; 0xffffffcc
   14460:	cmp	r1, #0
   14464:	movwne	r1, #1
   14468:	mvn	r5, r5
   1446c:	orr	r5, r5, r1
   14470:	tst	r5, #1
   14474:	bne	143e4 <__assert_fail@plt+0x3064>
   14478:	cmp	r9, r2
   1447c:	movcc	r5, r4
   14480:	movcc	r4, #39	; 0x27
   14484:	strbcc	r4, [ip, r9]
   14488:	movcc	r4, r5
   1448c:	add	r5, r9, #1
   14490:	add	r9, r9, #2
   14494:	cmp	r5, r2
   14498:	movcc	r1, r4
   1449c:	movcc	r4, #39	; 0x27
   144a0:	strbcc	r4, [ip, r5]
   144a4:	movcc	r4, r1
   144a8:	mov	r1, #0
   144ac:	str	r1, [fp, #-52]	; 0xffffffcc
   144b0:	b	143e4 <__assert_fail@plt+0x3064>
   144b4:	cmp	r1, #0
   144b8:	movwne	r1, #1
   144bc:	str	r1, [fp, #-56]	; 0xffffffc8
   144c0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   144c4:	cmp	r0, #0
   144c8:	beq	13ef0 <__assert_fail@plt+0x2b70>
   144cc:	b	13f24 <__assert_fail@plt+0x2ba4>
   144d0:	mov	r8, #0
   144d4:	mov	r4, r1
   144d8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   144dc:	tst	r0, #1
   144e0:	beq	13b5c <__assert_fail@plt+0x27dc>
   144e4:	b	13e10 <__assert_fail@plt+0x2a90>
   144e8:	mov	r7, sl
   144ec:	b	144f4 <__assert_fail@plt+0x3174>
   144f0:	mvn	r7, #0
   144f4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   144f8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   144fc:	ldr	r2, [sp, #88]	; 0x58
   14500:	eor	r0, r1, #2
   14504:	orr	r0, r0, r9
   14508:	clz	r0, r0
   1450c:	lsr	r0, r0, #5
   14510:	tst	r3, r0
   14514:	bne	1458c <__assert_fail@plt+0x320c>
   14518:	subs	r0, r1, #2
   1451c:	movwne	r0, #1
   14520:	orr	r0, r3, r0
   14524:	tst	r0, #1
   14528:	ldreq	r0, [sp, #60]	; 0x3c
   1452c:	eoreq	r0, r0, #1
   14530:	tsteq	r0, #1
   14534:	bne	14668 <__assert_fail@plt+0x32e8>
   14538:	tst	r4, #1
   1453c:	bne	1462c <__assert_fail@plt+0x32ac>
   14540:	ldr	r6, [sp, #56]	; 0x38
   14544:	mov	r8, #0
   14548:	cmp	r6, #0
   1454c:	beq	14664 <__assert_fail@plt+0x32e4>
   14550:	mov	r1, #0
   14554:	mov	r4, #2
   14558:	cmp	r5, #0
   1455c:	mov	r0, r2
   14560:	mov	r3, #0
   14564:	str	r1, [sp, #84]	; 0x54
   14568:	beq	133b0 <__assert_fail@plt+0x2030>
   1456c:	b	14668 <__assert_fail@plt+0x32e8>
   14570:	movw	r0, #28972	; 0x712c
   14574:	movt	r0, #1
   14578:	str	r0, [sp, #76]	; 0x4c
   1457c:	mov	r9, #0
   14580:	tst	r8, #1
   14584:	beq	13648 <__assert_fail@plt+0x22c8>
   14588:	b	13788 <__assert_fail@plt+0x2408>
   1458c:	ldr	r1, [sp, #88]	; 0x58
   14590:	mov	r0, #2
   14594:	tst	r1, #1
   14598:	movwne	r0, #4
   1459c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   145a0:	ldr	r1, [fp, #12]
   145a4:	cmp	r2, #2
   145a8:	moveq	r2, r0
   145ac:	b	145e4 <__assert_fail@plt+0x3264>
   145b0:	ldr	ip, [fp, #-84]	; 0xffffffac
   145b4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   145b8:	ldr	r1, [fp, #12]
   145bc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   145c0:	b	145e4 <__assert_fail@plt+0x3264>
   145c4:	ldr	r1, [sp, #88]	; 0x58
   145c8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   145cc:	ldr	r5, [sp, #28]
   145d0:	mov	r0, #2
   145d4:	tst	r1, #1
   145d8:	ldr	r1, [fp, #12]
   145dc:	movwne	r0, #4
   145e0:	mov	r2, r0
   145e4:	mov	r0, #0
   145e8:	bic	r1, r1, #2
   145ec:	str	r2, [sp]
   145f0:	mov	r2, lr
   145f4:	str	r0, [sp, #8]
   145f8:	ldr	r0, [sp, #72]	; 0x48
   145fc:	str	r1, [sp, #4]
   14600:	mov	r1, r5
   14604:	str	r0, [sp, #12]
   14608:	ldr	r0, [sp, #76]	; 0x4c
   1460c:	str	r0, [sp, #16]
   14610:	mov	r0, ip
   14614:	mov	r3, r7
   14618:	bl	13324 <__assert_fail@plt+0x1fa4>
   1461c:	mov	r9, r0
   14620:	mov	r0, r9
   14624:	sub	sp, fp, #28
   14628:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1462c:	mov	r0, #5
   14630:	ldr	r1, [sp, #56]	; 0x38
   14634:	ldr	r2, [fp, #-80]	; 0xffffffb0
   14638:	str	r0, [sp]
   1463c:	ldr	r0, [fp, #12]
   14640:	str	r0, [sp, #4]
   14644:	ldr	r0, [fp, #16]
   14648:	str	r0, [sp, #8]
   1464c:	ldr	r0, [sp, #72]	; 0x48
   14650:	str	r0, [sp, #12]
   14654:	ldr	r0, [sp, #76]	; 0x4c
   14658:	str	r0, [sp, #16]
   1465c:	ldr	r0, [fp, #-84]	; 0xffffffac
   14660:	b	14614 <__assert_fail@plt+0x3294>
   14664:	mov	r3, #0
   14668:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1466c:	cmp	r1, #0
   14670:	beq	146ac <__assert_fail@plt+0x332c>
   14674:	ldr	r2, [fp, #-84]	; 0xffffffac
   14678:	tst	r3, #1
   1467c:	bne	146b0 <__assert_fail@plt+0x3330>
   14680:	ldrb	r0, [r1]
   14684:	cmp	r0, #0
   14688:	beq	146b0 <__assert_fail@plt+0x3330>
   1468c:	add	r1, r1, #1
   14690:	cmp	r9, r5
   14694:	strbcc	r0, [r2, r9]
   14698:	add	r9, r9, #1
   1469c:	ldrb	r0, [r1], #1
   146a0:	cmp	r0, #0
   146a4:	bne	14690 <__assert_fail@plt+0x3310>
   146a8:	b	146b0 <__assert_fail@plt+0x3330>
   146ac:	ldr	r2, [fp, #-84]	; 0xffffffac
   146b0:	cmp	r9, r5
   146b4:	movcc	r0, #0
   146b8:	strbcc	r0, [r2, r9]
   146bc:	mov	r0, r9
   146c0:	sub	sp, fp, #28
   146c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146c8:	mov	r0, #4
   146cc:	b	1459c <__assert_fail@plt+0x321c>
   146d0:	bl	11368 <abort@plt>
   146d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146d8:	add	fp, sp, #28
   146dc:	sub	sp, sp, #28
   146e0:	movw	r5, #33288	; 0x8208
   146e4:	cmp	r2, #0
   146e8:	mov	r4, r1
   146ec:	mov	r7, r0
   146f0:	str	r0, [sp, #20]
   146f4:	movt	r5, #2
   146f8:	movne	r5, r2
   146fc:	bl	11284 <__errno_location@plt>
   14700:	mov	sl, r0
   14704:	ldr	r2, [r5, #40]	; 0x28
   14708:	ldr	r3, [r5, #44]	; 0x2c
   1470c:	ldm	r5, {r0, r1}
   14710:	orr	r8, r1, #1
   14714:	add	r9, r5, #8
   14718:	mov	r1, #0
   1471c:	ldr	r6, [sl]
   14720:	stm	sp, {r0, r8, r9}
   14724:	mov	r0, #0
   14728:	str	r2, [sp, #12]
   1472c:	str	r3, [sp, #16]
   14730:	mov	r2, r7
   14734:	mov	r3, r4
   14738:	str	r6, [sp, #24]
   1473c:	mov	r6, r4
   14740:	bl	13324 <__assert_fail@plt+0x1fa4>
   14744:	add	r7, r0, #1
   14748:	mov	r0, r7
   1474c:	bl	15b14 <__assert_fail@plt+0x4794>
   14750:	mov	r4, r0
   14754:	ldr	r0, [r5]
   14758:	ldr	r2, [r5, #44]	; 0x2c
   1475c:	ldr	r1, [r5, #40]	; 0x28
   14760:	mov	r3, r6
   14764:	stm	sp, {r0, r8, r9}
   14768:	str	r2, [sp, #16]
   1476c:	ldr	r2, [sp, #20]
   14770:	str	r1, [sp, #12]
   14774:	mov	r0, r4
   14778:	mov	r1, r7
   1477c:	bl	13324 <__assert_fail@plt+0x1fa4>
   14780:	ldr	r0, [sp, #24]
   14784:	str	r0, [sl]
   14788:	mov	r0, r4
   1478c:	sub	sp, fp, #28
   14790:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14794:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14798:	add	fp, sp, #28
   1479c:	sub	sp, sp, #36	; 0x24
   147a0:	movw	r8, #33288	; 0x8208
   147a4:	cmp	r3, #0
   147a8:	mov	r4, r2
   147ac:	str	r2, [sp, #24]
   147b0:	mov	r5, r1
   147b4:	mov	r6, r0
   147b8:	str	r0, [sp, #20]
   147bc:	movt	r8, #2
   147c0:	movne	r8, r3
   147c4:	bl	11284 <__errno_location@plt>
   147c8:	str	r0, [sp, #28]
   147cc:	ldr	r1, [r8, #40]	; 0x28
   147d0:	ldr	r2, [r8, #44]	; 0x2c
   147d4:	ldr	r7, [r0]
   147d8:	cmp	r4, #0
   147dc:	add	sl, r8, #8
   147e0:	mov	r0, #0
   147e4:	ldm	r8, {r3, r9}
   147e8:	orreq	r9, r9, #1
   147ec:	stm	sp, {r3, r9, sl}
   147f0:	str	r1, [sp, #12]
   147f4:	str	r2, [sp, #16]
   147f8:	mov	r1, #0
   147fc:	mov	r2, r6
   14800:	mov	r3, r5
   14804:	str	r7, [sp, #32]
   14808:	mov	r7, r5
   1480c:	bl	13324 <__assert_fail@plt+0x1fa4>
   14810:	add	r4, r0, #1
   14814:	mov	r5, r0
   14818:	mov	r0, r4
   1481c:	bl	15b14 <__assert_fail@plt+0x4794>
   14820:	mov	r6, r0
   14824:	ldr	r0, [r8]
   14828:	ldr	r2, [r8, #44]	; 0x2c
   1482c:	ldr	r1, [r8, #40]	; 0x28
   14830:	mov	r3, r7
   14834:	stm	sp, {r0, r9, sl}
   14838:	str	r2, [sp, #16]
   1483c:	ldr	r2, [sp, #20]
   14840:	str	r1, [sp, #12]
   14844:	mov	r0, r6
   14848:	mov	r1, r4
   1484c:	bl	13324 <__assert_fail@plt+0x1fa4>
   14850:	ldr	r0, [sp, #24]
   14854:	ldr	r1, [sp, #32]
   14858:	ldr	r2, [sp, #28]
   1485c:	cmp	r0, #0
   14860:	str	r1, [r2]
   14864:	strne	r5, [r0]
   14868:	mov	r0, r6
   1486c:	sub	sp, fp, #28
   14870:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14874:	push	{r4, r5, r6, r7, fp, lr}
   14878:	add	fp, sp, #16
   1487c:	movw	r4, #33112	; 0x8158
   14880:	movt	r4, #2
   14884:	ldrd	r6, [r4]
   14888:	cmp	r7, #2
   1488c:	blt	148b8 <__assert_fail@plt+0x3538>
   14890:	add	r5, r6, #12
   14894:	mov	r7, #0
   14898:	ldr	r0, [r5, r7, lsl #3]
   1489c:	bl	12f94 <__assert_fail@plt+0x1c14>
   148a0:	ldr	r1, [r4, #4]
   148a4:	add	r2, r7, #2
   148a8:	add	r0, r7, #1
   148ac:	mov	r7, r0
   148b0:	cmp	r2, r1
   148b4:	blt	14898 <__assert_fail@plt+0x3518>
   148b8:	ldr	r0, [r6, #4]
   148bc:	movw	r5, #33336	; 0x8238
   148c0:	movt	r5, #2
   148c4:	cmp	r0, r5
   148c8:	beq	148dc <__assert_fail@plt+0x355c>
   148cc:	bl	12f94 <__assert_fail@plt+0x1c14>
   148d0:	mov	r0, #256	; 0x100
   148d4:	str	r0, [r4, #8]
   148d8:	str	r5, [r4, #12]
   148dc:	add	r5, r4, #8
   148e0:	cmp	r6, r5
   148e4:	beq	148f4 <__assert_fail@plt+0x3574>
   148e8:	mov	r0, r6
   148ec:	bl	12f94 <__assert_fail@plt+0x1c14>
   148f0:	str	r5, [r4]
   148f4:	mov	r0, #1
   148f8:	str	r0, [r4, #4]
   148fc:	pop	{r4, r5, r6, r7, fp, pc}
   14900:	movw	r3, #33288	; 0x8208
   14904:	mvn	r2, #0
   14908:	movt	r3, #2
   1490c:	b	14910 <__assert_fail@plt+0x3590>
   14910:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14914:	add	fp, sp, #28
   14918:	sub	sp, sp, #44	; 0x2c
   1491c:	mov	r7, r3
   14920:	str	r2, [sp, #36]	; 0x24
   14924:	str	r1, [sp, #32]
   14928:	mov	r5, r0
   1492c:	bl	11284 <__errno_location@plt>
   14930:	cmp	r5, #0
   14934:	bmi	14a9c <__assert_fail@plt+0x371c>
   14938:	cmn	r5, #-2147483647	; 0x80000001
   1493c:	beq	14a9c <__assert_fail@plt+0x371c>
   14940:	movw	r8, #33112	; 0x8158
   14944:	mov	r4, r0
   14948:	ldr	r0, [r0]
   1494c:	movt	r8, #2
   14950:	str	r4, [sp, #28]
   14954:	ldr	r1, [r8, #4]
   14958:	ldr	r6, [r8]
   1495c:	str	r0, [sp, #24]
   14960:	cmp	r1, r5
   14964:	ble	14970 <__assert_fail@plt+0x35f0>
   14968:	mov	sl, r6
   1496c:	b	149d8 <__assert_fail@plt+0x3658>
   14970:	mov	r0, #8
   14974:	add	r9, r8, #8
   14978:	str	r1, [fp, #-32]	; 0xffffffe0
   1497c:	sub	r1, r5, r1
   14980:	mvn	r3, #-2147483648	; 0x80000000
   14984:	str	r0, [sp]
   14988:	subs	r0, r6, r9
   1498c:	add	r2, r1, #1
   14990:	sub	r1, fp, #32
   14994:	movne	r0, r6
   14998:	bl	15d14 <__assert_fail@plt+0x4994>
   1499c:	mov	sl, r0
   149a0:	cmp	r6, r9
   149a4:	str	r0, [r8]
   149a8:	bne	149b4 <__assert_fail@plt+0x3634>
   149ac:	ldrd	r0, [r8, #8]
   149b0:	stm	sl, {r0, r1}
   149b4:	ldr	r1, [r8, #4]
   149b8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   149bc:	add	r0, sl, r1, lsl #3
   149c0:	sub	r1, r2, r1
   149c4:	lsl	r2, r1, #3
   149c8:	mov	r1, #0
   149cc:	bl	112a8 <memset@plt>
   149d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   149d4:	str	r0, [r8, #4]
   149d8:	mov	r9, sl
   149dc:	ldm	r7, {r0, r1}
   149e0:	orr	r8, r1, #1
   149e4:	add	r1, r7, #8
   149e8:	ldr	r2, [r7, #40]	; 0x28
   149ec:	ldr	r3, [r7, #44]	; 0x2c
   149f0:	ldr	r6, [r9, r5, lsl #3]!
   149f4:	str	r1, [sp, #20]
   149f8:	ldr	r4, [r9, #4]!
   149fc:	stm	sp, {r0, r8}
   14a00:	add	r0, sp, #8
   14a04:	stm	r0, {r1, r2, r3}
   14a08:	ldr	r2, [sp, #32]
   14a0c:	ldr	r3, [sp, #36]	; 0x24
   14a10:	mov	r1, r6
   14a14:	mov	r0, r4
   14a18:	bl	13324 <__assert_fail@plt+0x1fa4>
   14a1c:	cmp	r6, r0
   14a20:	bhi	14a84 <__assert_fail@plt+0x3704>
   14a24:	add	r6, r0, #1
   14a28:	movw	r0, #33336	; 0x8238
   14a2c:	movt	r0, #2
   14a30:	str	r6, [sl, r5, lsl #3]
   14a34:	cmp	r4, r0
   14a38:	beq	14a44 <__assert_fail@plt+0x36c4>
   14a3c:	mov	r0, r4
   14a40:	bl	12f94 <__assert_fail@plt+0x1c14>
   14a44:	mov	r0, r6
   14a48:	bl	15b14 <__assert_fail@plt+0x4794>
   14a4c:	str	r0, [r9]
   14a50:	mov	r4, r0
   14a54:	add	r3, sp, #8
   14a58:	ldr	r0, [r7]
   14a5c:	ldr	r1, [r7, #40]	; 0x28
   14a60:	ldr	r2, [r7, #44]	; 0x2c
   14a64:	stm	sp, {r0, r8}
   14a68:	ldr	r0, [sp, #20]
   14a6c:	stm	r3, {r0, r1, r2}
   14a70:	ldr	r2, [sp, #32]
   14a74:	ldr	r3, [sp, #36]	; 0x24
   14a78:	mov	r0, r4
   14a7c:	mov	r1, r6
   14a80:	bl	13324 <__assert_fail@plt+0x1fa4>
   14a84:	ldr	r1, [sp, #24]
   14a88:	ldr	r0, [sp, #28]
   14a8c:	str	r1, [r0]
   14a90:	mov	r0, r4
   14a94:	sub	sp, fp, #28
   14a98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a9c:	bl	11368 <abort@plt>
   14aa0:	movw	r3, #33288	; 0x8208
   14aa4:	movt	r3, #2
   14aa8:	b	14910 <__assert_fail@plt+0x3590>
   14aac:	movw	r3, #33288	; 0x8208
   14ab0:	mov	r1, r0
   14ab4:	mov	r0, #0
   14ab8:	mvn	r2, #0
   14abc:	movt	r3, #2
   14ac0:	b	14910 <__assert_fail@plt+0x3590>
   14ac4:	movw	r3, #33288	; 0x8208
   14ac8:	mov	r2, r1
   14acc:	mov	r1, r0
   14ad0:	mov	r0, #0
   14ad4:	movt	r3, #2
   14ad8:	b	14910 <__assert_fail@plt+0x3590>
   14adc:	push	{fp, lr}
   14ae0:	mov	fp, sp
   14ae4:	sub	sp, sp, #48	; 0x30
   14ae8:	vmov.i32	q8, #0	; 0x00000000
   14aec:	mov	ip, #32
   14af0:	mov	r3, sp
   14af4:	mov	lr, r2
   14af8:	cmp	r1, #10
   14afc:	add	r2, r3, #16
   14b00:	vst1.64	{d16-d17}, [r3], ip
   14b04:	vst1.64	{d16-d17}, [r2]
   14b08:	vst1.64	{d16-d17}, [r3]
   14b0c:	beq	14b2c <__assert_fail@plt+0x37ac>
   14b10:	str	r1, [sp]
   14b14:	mov	r3, sp
   14b18:	mov	r1, lr
   14b1c:	mvn	r2, #0
   14b20:	bl	14910 <__assert_fail@plt+0x3590>
   14b24:	mov	sp, fp
   14b28:	pop	{fp, pc}
   14b2c:	bl	11368 <abort@plt>
   14b30:	push	{r4, sl, fp, lr}
   14b34:	add	fp, sp, #8
   14b38:	sub	sp, sp, #48	; 0x30
   14b3c:	vmov.i32	q8, #0	; 0x00000000
   14b40:	mov	ip, r3
   14b44:	mov	r3, sp
   14b48:	mov	lr, #32
   14b4c:	cmp	r1, #10
   14b50:	add	r4, r3, #16
   14b54:	vst1.64	{d16-d17}, [r3], lr
   14b58:	vst1.64	{d16-d17}, [r4]
   14b5c:	vst1.64	{d16-d17}, [r3]
   14b60:	beq	14b80 <__assert_fail@plt+0x3800>
   14b64:	str	r1, [sp]
   14b68:	mov	r1, r2
   14b6c:	mov	r3, sp
   14b70:	mov	r2, ip
   14b74:	bl	14910 <__assert_fail@plt+0x3590>
   14b78:	sub	sp, fp, #8
   14b7c:	pop	{r4, sl, fp, pc}
   14b80:	bl	11368 <abort@plt>
   14b84:	push	{fp, lr}
   14b88:	mov	fp, sp
   14b8c:	sub	sp, sp, #48	; 0x30
   14b90:	vmov.i32	q8, #0	; 0x00000000
   14b94:	mov	r3, sp
   14b98:	mov	ip, #32
   14b9c:	cmp	r0, #10
   14ba0:	add	r2, r3, #16
   14ba4:	vst1.64	{d16-d17}, [r3], ip
   14ba8:	vst1.64	{d16-d17}, [r2]
   14bac:	vst1.64	{d16-d17}, [r3]
   14bb0:	beq	14bd0 <__assert_fail@plt+0x3850>
   14bb4:	str	r0, [sp]
   14bb8:	mov	r3, sp
   14bbc:	mov	r0, #0
   14bc0:	mvn	r2, #0
   14bc4:	bl	14910 <__assert_fail@plt+0x3590>
   14bc8:	mov	sp, fp
   14bcc:	pop	{fp, pc}
   14bd0:	bl	11368 <abort@plt>
   14bd4:	push	{fp, lr}
   14bd8:	mov	fp, sp
   14bdc:	sub	sp, sp, #48	; 0x30
   14be0:	vmov.i32	q8, #0	; 0x00000000
   14be4:	mov	r3, sp
   14be8:	mov	ip, #32
   14bec:	cmp	r0, #10
   14bf0:	add	lr, r3, #16
   14bf4:	vst1.64	{d16-d17}, [r3], ip
   14bf8:	vst1.64	{d16-d17}, [lr]
   14bfc:	vst1.64	{d16-d17}, [r3]
   14c00:	beq	14c1c <__assert_fail@plt+0x389c>
   14c04:	str	r0, [sp]
   14c08:	mov	r3, sp
   14c0c:	mov	r0, #0
   14c10:	bl	14910 <__assert_fail@plt+0x3590>
   14c14:	mov	sp, fp
   14c18:	pop	{fp, pc}
   14c1c:	bl	11368 <abort@plt>
   14c20:	push	{r4, sl, fp, lr}
   14c24:	add	fp, sp, #8
   14c28:	sub	sp, sp, #48	; 0x30
   14c2c:	mov	lr, r0
   14c30:	movw	r0, #33288	; 0x8208
   14c34:	mov	ip, r1
   14c38:	mov	r1, #32
   14c3c:	mov	r4, #1
   14c40:	movt	r0, #2
   14c44:	add	r3, r0, #16
   14c48:	vld1.64	{d16-d17}, [r0], r1
   14c4c:	vld1.64	{d20-d21}, [r0]
   14c50:	vld1.64	{d18-d19}, [r3]
   14c54:	mov	r3, sp
   14c58:	add	r0, r3, #32
   14c5c:	add	r1, r3, #16
   14c60:	vst1.64	{d20-d21}, [r0]
   14c64:	mov	r0, #28
   14c68:	vst1.64	{d18-d19}, [r1]
   14c6c:	mov	r1, r3
   14c70:	and	r0, r0, r2, lsr #3
   14c74:	and	r2, r2, #31
   14c78:	vst1.64	{d16-d17}, [r1], r0
   14c7c:	ldr	r0, [r1, #8]
   14c80:	bic	r4, r4, r0, lsr r2
   14c84:	eor	r0, r0, r4, lsl r2
   14c88:	mov	r2, ip
   14c8c:	str	r0, [r1, #8]
   14c90:	mov	r0, #0
   14c94:	mov	r1, lr
   14c98:	bl	14910 <__assert_fail@plt+0x3590>
   14c9c:	sub	sp, fp, #8
   14ca0:	pop	{r4, sl, fp, pc}
   14ca4:	push	{fp, lr}
   14ca8:	mov	fp, sp
   14cac:	sub	sp, sp, #48	; 0x30
   14cb0:	mov	ip, r0
   14cb4:	movw	r0, #33288	; 0x8208
   14cb8:	mov	r2, #32
   14cbc:	movt	r0, #2
   14cc0:	add	r3, r0, #16
   14cc4:	vld1.64	{d16-d17}, [r0], r2
   14cc8:	vld1.64	{d20-d21}, [r0]
   14ccc:	vld1.64	{d18-d19}, [r3]
   14cd0:	mov	r3, sp
   14cd4:	add	r0, r3, #32
   14cd8:	add	r2, r3, #16
   14cdc:	vst1.64	{d20-d21}, [r0]
   14ce0:	mov	r0, #28
   14ce4:	vst1.64	{d18-d19}, [r2]
   14ce8:	mov	r2, r3
   14cec:	and	r0, r0, r1, lsr #3
   14cf0:	and	r1, r1, #31
   14cf4:	vst1.64	{d16-d17}, [r2], r0
   14cf8:	mov	r0, #1
   14cfc:	ldr	lr, [r2, #8]
   14d00:	bic	r0, r0, lr, lsr r1
   14d04:	eor	r0, lr, r0, lsl r1
   14d08:	mov	r1, ip
   14d0c:	str	r0, [r2, #8]
   14d10:	mov	r0, #0
   14d14:	mvn	r2, #0
   14d18:	bl	14910 <__assert_fail@plt+0x3590>
   14d1c:	mov	sp, fp
   14d20:	pop	{fp, pc}
   14d24:	push	{fp, lr}
   14d28:	mov	fp, sp
   14d2c:	sub	sp, sp, #48	; 0x30
   14d30:	mov	r1, r0
   14d34:	movw	r0, #33288	; 0x8208
   14d38:	mov	r3, #32
   14d3c:	movt	r0, #2
   14d40:	add	r2, r0, #16
   14d44:	vld1.64	{d16-d17}, [r0], r3
   14d48:	mov	r3, sp
   14d4c:	vld1.64	{d18-d19}, [r2]
   14d50:	vld1.64	{d20-d21}, [r0]
   14d54:	add	r2, r3, #16
   14d58:	add	r0, r3, #32
   14d5c:	vst1.64	{d18-d19}, [r2]
   14d60:	vst1.64	{d20-d21}, [r0]
   14d64:	mov	r0, #12
   14d68:	mov	r2, r3
   14d6c:	vst1.64	{d16-d17}, [r2], r0
   14d70:	ldr	r0, [r2]
   14d74:	orr	r0, r0, #67108864	; 0x4000000
   14d78:	str	r0, [r2]
   14d7c:	mov	r0, #0
   14d80:	mvn	r2, #0
   14d84:	bl	14910 <__assert_fail@plt+0x3590>
   14d88:	mov	sp, fp
   14d8c:	pop	{fp, pc}
   14d90:	push	{fp, lr}
   14d94:	mov	fp, sp
   14d98:	sub	sp, sp, #48	; 0x30
   14d9c:	mov	ip, r1
   14da0:	mov	r1, r0
   14da4:	movw	r0, #33288	; 0x8208
   14da8:	mov	r2, #32
   14dac:	movt	r0, #2
   14db0:	add	r3, r0, #16
   14db4:	vld1.64	{d16-d17}, [r0], r2
   14db8:	vld1.64	{d18-d19}, [r3]
   14dbc:	vld1.64	{d20-d21}, [r0]
   14dc0:	mov	r3, sp
   14dc4:	add	r2, r3, #16
   14dc8:	add	r0, r3, #32
   14dcc:	vst1.64	{d18-d19}, [r2]
   14dd0:	vst1.64	{d20-d21}, [r0]
   14dd4:	mov	r0, #12
   14dd8:	mov	r2, r3
   14ddc:	vst1.64	{d16-d17}, [r2], r0
   14de0:	ldr	r0, [r2]
   14de4:	orr	r0, r0, #67108864	; 0x4000000
   14de8:	str	r0, [r2]
   14dec:	mov	r0, #0
   14df0:	mov	r2, ip
   14df4:	bl	14910 <__assert_fail@plt+0x3590>
   14df8:	mov	sp, fp
   14dfc:	pop	{fp, pc}
   14e00:	push	{r4, sl, fp, lr}
   14e04:	add	fp, sp, #8
   14e08:	sub	sp, sp, #96	; 0x60
   14e0c:	vmov.i32	q8, #0	; 0x00000000
   14e10:	mov	ip, r2
   14e14:	mov	r2, sp
   14e18:	mov	r4, #28
   14e1c:	cmp	r1, #10
   14e20:	mov	r3, r2
   14e24:	add	lr, r2, #16
   14e28:	vst1.64	{d16-d17}, [r3], r4
   14e2c:	vst1.64	{d16-d17}, [lr]
   14e30:	vst1.32	{d16-d17}, [r3]
   14e34:	beq	14e84 <__assert_fail@plt+0x3b04>
   14e38:	vld1.64	{d16-d17}, [r2], r4
   14e3c:	vld1.64	{d18-d19}, [lr]
   14e40:	add	r3, sp, #48	; 0x30
   14e44:	vld1.32	{d20-d21}, [r2]
   14e48:	add	r2, r3, #20
   14e4c:	add	r4, r3, #4
   14e50:	vst1.32	{d18-d19}, [r2]
   14e54:	add	r2, r3, #32
   14e58:	vst1.32	{d16-d17}, [r4]
   14e5c:	vst1.32	{d20-d21}, [r2]
   14e60:	str	r1, [sp, #48]	; 0x30
   14e64:	mvn	r2, #0
   14e68:	ldr	r1, [sp, #60]	; 0x3c
   14e6c:	orr	r1, r1, #67108864	; 0x4000000
   14e70:	str	r1, [sp, #60]	; 0x3c
   14e74:	mov	r1, ip
   14e78:	bl	14910 <__assert_fail@plt+0x3590>
   14e7c:	sub	sp, fp, #8
   14e80:	pop	{r4, sl, fp, pc}
   14e84:	bl	11368 <abort@plt>
   14e88:	push	{r4, r5, r6, sl, fp, lr}
   14e8c:	add	fp, sp, #16
   14e90:	sub	sp, sp, #48	; 0x30
   14e94:	mov	ip, r3
   14e98:	movw	r3, #33288	; 0x8208
   14e9c:	mov	r6, #32
   14ea0:	cmp	r1, #0
   14ea4:	mov	r4, sp
   14ea8:	movt	r3, #2
   14eac:	cmpne	r2, #0
   14eb0:	add	r5, r4, #16
   14eb4:	add	lr, r3, #16
   14eb8:	vld1.64	{d16-d17}, [r3], r6
   14ebc:	vld1.64	{d18-d19}, [lr]
   14ec0:	vld1.64	{d20-d21}, [r3]
   14ec4:	mov	r3, #10
   14ec8:	vst1.64	{d16-d17}, [r4], r6
   14ecc:	vst1.64	{d18-d19}, [r5]
   14ed0:	vst1.64	{d20-d21}, [r4]
   14ed4:	str	r3, [sp]
   14ed8:	bne	14ee0 <__assert_fail@plt+0x3b60>
   14edc:	bl	11368 <abort@plt>
   14ee0:	str	r2, [sp, #44]	; 0x2c
   14ee4:	str	r1, [sp, #40]	; 0x28
   14ee8:	mov	r3, sp
   14eec:	mov	r1, ip
   14ef0:	mvn	r2, #0
   14ef4:	bl	14910 <__assert_fail@plt+0x3590>
   14ef8:	sub	sp, fp, #16
   14efc:	pop	{r4, r5, r6, sl, fp, pc}
   14f00:	push	{r4, r5, r6, sl, fp, lr}
   14f04:	add	fp, sp, #16
   14f08:	sub	sp, sp, #48	; 0x30
   14f0c:	mov	lr, r3
   14f10:	movw	r3, #33288	; 0x8208
   14f14:	mov	r6, #32
   14f18:	cmp	r1, #0
   14f1c:	mov	r4, sp
   14f20:	movt	r3, #2
   14f24:	cmpne	r2, #0
   14f28:	add	r5, r4, #16
   14f2c:	add	ip, r3, #16
   14f30:	vld1.64	{d16-d17}, [r3], r6
   14f34:	vld1.64	{d18-d19}, [ip]
   14f38:	vld1.64	{d20-d21}, [r3]
   14f3c:	mov	r3, #10
   14f40:	vst1.64	{d16-d17}, [r4], r6
   14f44:	vst1.64	{d18-d19}, [r5]
   14f48:	vst1.64	{d20-d21}, [r4]
   14f4c:	str	r3, [sp]
   14f50:	bne	14f58 <__assert_fail@plt+0x3bd8>
   14f54:	bl	11368 <abort@plt>
   14f58:	ldr	ip, [fp, #8]
   14f5c:	str	r2, [sp, #44]	; 0x2c
   14f60:	str	r1, [sp, #40]	; 0x28
   14f64:	mov	r3, sp
   14f68:	mov	r1, lr
   14f6c:	mov	r2, ip
   14f70:	bl	14910 <__assert_fail@plt+0x3590>
   14f74:	sub	sp, fp, #16
   14f78:	pop	{r4, r5, r6, sl, fp, pc}
   14f7c:	push	{r4, sl, fp, lr}
   14f80:	add	fp, sp, #8
   14f84:	sub	sp, sp, #48	; 0x30
   14f88:	movw	r3, #33288	; 0x8208
   14f8c:	mov	lr, #32
   14f90:	mov	ip, r2
   14f94:	cmp	r0, #0
   14f98:	movt	r3, #2
   14f9c:	cmpne	r1, #0
   14fa0:	add	r2, r3, #16
   14fa4:	vld1.64	{d16-d17}, [r3], lr
   14fa8:	vld1.64	{d20-d21}, [r3]
   14fac:	vld1.64	{d18-d19}, [r2]
   14fb0:	mov	r2, sp
   14fb4:	add	r4, r2, #16
   14fb8:	vst1.64	{d16-d17}, [r2], lr
   14fbc:	vst1.64	{d20-d21}, [r2]
   14fc0:	mov	r2, #10
   14fc4:	vst1.64	{d18-d19}, [r4]
   14fc8:	str	r2, [sp]
   14fcc:	bne	14fd4 <__assert_fail@plt+0x3c54>
   14fd0:	bl	11368 <abort@plt>
   14fd4:	str	r1, [sp, #44]	; 0x2c
   14fd8:	str	r0, [sp, #40]	; 0x28
   14fdc:	mov	r3, sp
   14fe0:	mov	r0, #0
   14fe4:	mov	r1, ip
   14fe8:	mvn	r2, #0
   14fec:	bl	14910 <__assert_fail@plt+0x3590>
   14ff0:	sub	sp, fp, #8
   14ff4:	pop	{r4, sl, fp, pc}
   14ff8:	push	{r4, r5, fp, lr}
   14ffc:	add	fp, sp, #8
   15000:	sub	sp, sp, #48	; 0x30
   15004:	mov	ip, r3
   15008:	movw	r3, #33288	; 0x8208
   1500c:	mov	r4, #32
   15010:	mov	lr, r2
   15014:	cmp	r0, #0
   15018:	movt	r3, #2
   1501c:	cmpne	r1, #0
   15020:	add	r2, r3, #16
   15024:	vld1.64	{d16-d17}, [r3], r4
   15028:	vld1.64	{d20-d21}, [r3]
   1502c:	vld1.64	{d18-d19}, [r2]
   15030:	mov	r2, sp
   15034:	add	r5, r2, #16
   15038:	vst1.64	{d16-d17}, [r2], r4
   1503c:	vst1.64	{d20-d21}, [r2]
   15040:	mov	r2, #10
   15044:	vst1.64	{d18-d19}, [r5]
   15048:	str	r2, [sp]
   1504c:	bne	15054 <__assert_fail@plt+0x3cd4>
   15050:	bl	11368 <abort@plt>
   15054:	str	r1, [sp, #44]	; 0x2c
   15058:	str	r0, [sp, #40]	; 0x28
   1505c:	mov	r3, sp
   15060:	mov	r0, #0
   15064:	mov	r1, lr
   15068:	mov	r2, ip
   1506c:	bl	14910 <__assert_fail@plt+0x3590>
   15070:	sub	sp, fp, #8
   15074:	pop	{r4, r5, fp, pc}
   15078:	movw	r3, #33064	; 0x8128
   1507c:	movt	r3, #2
   15080:	b	14910 <__assert_fail@plt+0x3590>
   15084:	movw	r3, #33064	; 0x8128
   15088:	mov	r2, r1
   1508c:	mov	r1, r0
   15090:	mov	r0, #0
   15094:	movt	r3, #2
   15098:	b	14910 <__assert_fail@plt+0x3590>
   1509c:	movw	r3, #33064	; 0x8128
   150a0:	mvn	r2, #0
   150a4:	movt	r3, #2
   150a8:	b	14910 <__assert_fail@plt+0x3590>
   150ac:	movw	r3, #33064	; 0x8128
   150b0:	mov	r1, r0
   150b4:	mov	r0, #0
   150b8:	mvn	r2, #0
   150bc:	movt	r3, #2
   150c0:	b	14910 <__assert_fail@plt+0x3590>
   150c4:	push	{r4, r5, fp, lr}
   150c8:	add	fp, sp, #8
   150cc:	mov	r5, r0
   150d0:	mov	r0, #33	; 0x21
   150d4:	bl	15ae4 <__assert_fail@plt+0x4764>
   150d8:	add	r1, r5, #44	; 0x2c
   150dc:	mov	r2, #32
   150e0:	mov	r4, r0
   150e4:	bl	112b4 <strncpy@plt>
   150e8:	mov	r5, #0
   150ec:	strb	r5, [r0, #32]
   150f0:	bl	1126c <strlen@plt>
   150f4:	cmp	r0, #1
   150f8:	blt	15120 <__assert_fail@plt+0x3da0>
   150fc:	add	r1, r4, r0
   15100:	mov	r0, r1
   15104:	ldrb	r2, [r0, #-1]!
   15108:	cmp	r2, #32
   1510c:	bne	15120 <__assert_fail@plt+0x3da0>
   15110:	strb	r5, [r1, #-1]
   15114:	cmp	r4, r0
   15118:	mov	r1, r0
   1511c:	bcc	15104 <__assert_fail@plt+0x3d84>
   15120:	mov	r0, r4
   15124:	pop	{r4, r5, fp, pc}
   15128:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1512c:	add	fp, sp, #28
   15130:	sub	sp, sp, #12
   15134:	mov	r6, #0
   15138:	mov	r4, r3
   1513c:	str	r2, [sp, #4]
   15140:	mov	sl, r1
   15144:	str	r6, [sp, #8]
   15148:	bl	110d4 <utmpxname@plt>
   1514c:	bl	1114c <setutxent@plt>
   15150:	bl	11374 <getutxent@plt>
   15154:	cmp	r0, #0
   15158:	beq	1521c <__assert_fail@plt+0x3e9c>
   1515c:	mov	r7, r0
   15160:	and	r8, r4, #1
   15164:	mov	r5, #0
   15168:	tst	r4, #2
   1516c:	bne	15224 <__assert_fail@plt+0x3ea4>
   15170:	mov	r9, #384	; 0x180
   15174:	add	r4, sp, #8
   15178:	mov	r6, #0
   1517c:	ldrb	r0, [r7, #44]	; 0x2c
   15180:	cmp	r0, #0
   15184:	cmpne	r8, #0
   15188:	bne	151e0 <__assert_fail@plt+0x3e60>
   1518c:	ldr	r0, [sp, #8]
   15190:	cmp	r5, r0
   15194:	bne	151b4 <__assert_fail@plt+0x3e34>
   15198:	mov	r0, r6
   1519c:	mov	r1, r4
   151a0:	mov	r2, #1
   151a4:	mvn	r3, #0
   151a8:	str	r9, [sp]
   151ac:	bl	15d14 <__assert_fail@plt+0x4994>
   151b0:	mov	r6, r0
   151b4:	add	r0, r5, r5, lsl #1
   151b8:	mov	r1, r7
   151bc:	mov	r2, #384	; 0x180
   151c0:	add	r0, r6, r0, lsl #7
   151c4:	bl	11104 <memcpy@plt>
   151c8:	add	r5, r5, #1
   151cc:	bl	11374 <getutxent@plt>
   151d0:	mov	r7, r0
   151d4:	cmp	r0, #0
   151d8:	bne	1517c <__assert_fail@plt+0x3dfc>
   151dc:	b	15368 <__assert_fail@plt+0x3fe8>
   151e0:	ldrh	r0, [r7]
   151e4:	cmp	r0, #7
   151e8:	bne	1518c <__assert_fail@plt+0x3e0c>
   151ec:	ldr	r0, [r7, #4]
   151f0:	cmp	r0, #1
   151f4:	blt	1518c <__assert_fail@plt+0x3e0c>
   151f8:	mov	r1, #0
   151fc:	bl	11230 <kill@plt>
   15200:	cmn	r0, #1
   15204:	bgt	1518c <__assert_fail@plt+0x3e0c>
   15208:	bl	11284 <__errno_location@plt>
   1520c:	ldr	r0, [r0]
   15210:	cmp	r0, #3
   15214:	bne	1518c <__assert_fail@plt+0x3e0c>
   15218:	b	151cc <__assert_fail@plt+0x3e4c>
   1521c:	mov	r5, #0
   15220:	b	15368 <__assert_fail@plt+0x3fe8>
   15224:	cmp	r8, #0
   15228:	bne	152b4 <__assert_fail@plt+0x3f34>
   1522c:	mov	r8, #384	; 0x180
   15230:	add	r4, sp, #8
   15234:	mov	r6, #0
   15238:	ldrb	r0, [r7, #44]	; 0x2c
   1523c:	cmp	r0, #0
   15240:	bne	1527c <__assert_fail@plt+0x3efc>
   15244:	b	15260 <__assert_fail@plt+0x3ee0>
   15248:	add	r0, r5, r5, lsl #1
   1524c:	mov	r1, r7
   15250:	mov	r2, #384	; 0x180
   15254:	add	r0, r6, r0, lsl #7
   15258:	bl	11104 <memcpy@plt>
   1525c:	add	r5, r5, #1
   15260:	bl	11374 <getutxent@plt>
   15264:	mov	r7, r0
   15268:	cmp	r0, #0
   1526c:	beq	15368 <__assert_fail@plt+0x3fe8>
   15270:	ldrb	r0, [r7, #44]	; 0x2c
   15274:	cmp	r0, #0
   15278:	beq	15260 <__assert_fail@plt+0x3ee0>
   1527c:	ldrh	r0, [r7]
   15280:	cmp	r0, #7
   15284:	bne	15260 <__assert_fail@plt+0x3ee0>
   15288:	ldr	r0, [sp, #8]
   1528c:	cmp	r5, r0
   15290:	bne	15248 <__assert_fail@plt+0x3ec8>
   15294:	mov	r0, r6
   15298:	mov	r1, r4
   1529c:	mov	r2, #1
   152a0:	mvn	r3, #0
   152a4:	str	r8, [sp]
   152a8:	bl	15d14 <__assert_fail@plt+0x4994>
   152ac:	mov	r6, r0
   152b0:	b	15248 <__assert_fail@plt+0x3ec8>
   152b4:	mov	r4, #384	; 0x180
   152b8:	add	r8, sp, #8
   152bc:	mov	r6, #0
   152c0:	ldrb	r0, [r7, #44]	; 0x2c
   152c4:	cmp	r0, #0
   152c8:	bne	15304 <__assert_fail@plt+0x3f84>
   152cc:	b	152e8 <__assert_fail@plt+0x3f68>
   152d0:	add	r0, r5, r5, lsl #1
   152d4:	mov	r1, r7
   152d8:	mov	r2, #384	; 0x180
   152dc:	add	r0, r6, r0, lsl #7
   152e0:	bl	11104 <memcpy@plt>
   152e4:	add	r5, r5, #1
   152e8:	bl	11374 <getutxent@plt>
   152ec:	mov	r7, r0
   152f0:	cmp	r0, #0
   152f4:	beq	15368 <__assert_fail@plt+0x3fe8>
   152f8:	ldrb	r0, [r7, #44]	; 0x2c
   152fc:	cmp	r0, #0
   15300:	beq	152e8 <__assert_fail@plt+0x3f68>
   15304:	ldrh	r0, [r7]
   15308:	cmp	r0, #7
   1530c:	bne	152e8 <__assert_fail@plt+0x3f68>
   15310:	ldr	r0, [r7, #4]
   15314:	cmp	r0, #1
   15318:	blt	1533c <__assert_fail@plt+0x3fbc>
   1531c:	mov	r1, #0
   15320:	bl	11230 <kill@plt>
   15324:	cmn	r0, #1
   15328:	bgt	1533c <__assert_fail@plt+0x3fbc>
   1532c:	bl	11284 <__errno_location@plt>
   15330:	ldr	r0, [r0]
   15334:	cmp	r0, #3
   15338:	beq	152e8 <__assert_fail@plt+0x3f68>
   1533c:	ldr	r0, [sp, #8]
   15340:	cmp	r5, r0
   15344:	bne	152d0 <__assert_fail@plt+0x3f50>
   15348:	mov	r0, r6
   1534c:	mov	r1, r8
   15350:	mov	r2, #1
   15354:	mvn	r3, #0
   15358:	str	r4, [sp]
   1535c:	bl	15d14 <__assert_fail@plt+0x4994>
   15360:	mov	r6, r0
   15364:	b	152d0 <__assert_fail@plt+0x3f50>
   15368:	bl	112fc <endutxent@plt>
   1536c:	ldr	r0, [sp, #4]
   15370:	str	r5, [sl]
   15374:	str	r6, [r0]
   15378:	mov	r0, #0
   1537c:	sub	sp, fp, #28
   15380:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15384:	push	{r4, r5, r6, r7, fp, lr}
   15388:	add	fp, sp, #16
   1538c:	mov	r4, r1
   15390:	mov	r1, #0
   15394:	mov	r6, r2
   15398:	bl	11308 <setlocale@plt>
   1539c:	cmp	r0, #0
   153a0:	beq	153d0 <__assert_fail@plt+0x4050>
   153a4:	mov	r7, r0
   153a8:	bl	1126c <strlen@plt>
   153ac:	cmp	r0, r6
   153b0:	bcs	153ec <__assert_fail@plt+0x406c>
   153b4:	add	r2, r0, #1
   153b8:	mov	r0, r4
   153bc:	mov	r1, r7
   153c0:	bl	11104 <memcpy@plt>
   153c4:	mov	r5, #0
   153c8:	mov	r0, r5
   153cc:	pop	{r4, r5, r6, r7, fp, pc}
   153d0:	mov	r5, #22
   153d4:	cmp	r6, #0
   153d8:	beq	15414 <__assert_fail@plt+0x4094>
   153dc:	mov	r0, #0
   153e0:	strb	r0, [r4]
   153e4:	mov	r0, r5
   153e8:	pop	{r4, r5, r6, r7, fp, pc}
   153ec:	mov	r5, #34	; 0x22
   153f0:	cmp	r6, #0
   153f4:	beq	15414 <__assert_fail@plt+0x4094>
   153f8:	sub	r6, r6, #1
   153fc:	mov	r0, r4
   15400:	mov	r1, r7
   15404:	mov	r2, r6
   15408:	bl	11104 <memcpy@plt>
   1540c:	mov	r0, #0
   15410:	strb	r0, [r4, r6]
   15414:	mov	r0, r5
   15418:	pop	{r4, r5, r6, r7, fp, pc}
   1541c:	mov	r1, #0
   15420:	b	11308 <setlocale@plt>
   15424:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15428:	add	fp, sp, #24
   1542c:	sub	sp, sp, #32
   15430:	ldr	r6, [fp, #12]
   15434:	ldr	r7, [fp, #8]
   15438:	mov	r4, r2
   1543c:	mov	r8, r0
   15440:	cmp	r1, #0
   15444:	beq	1546c <__assert_fail@plt+0x40ec>
   15448:	movw	r2, #29060	; 0x7184
   1544c:	mov	r5, r1
   15450:	str	r3, [sp, #4]
   15454:	str	r4, [sp]
   15458:	mov	r0, r8
   1545c:	mov	r1, #1
   15460:	movt	r2, #1
   15464:	mov	r3, r5
   15468:	b	15484 <__assert_fail@plt+0x4104>
   1546c:	movw	r2, #29072	; 0x7190
   15470:	str	r3, [sp]
   15474:	mov	r0, r8
   15478:	mov	r1, #1
   1547c:	mov	r3, r4
   15480:	movt	r2, #1
   15484:	bl	112d8 <__fprintf_chk@plt>
   15488:	movw	r1, #29079	; 0x7197
   1548c:	mov	r0, #0
   15490:	mov	r2, #5
   15494:	movt	r1, #1
   15498:	bl	11134 <dcgettext@plt>
   1549c:	movw	r2, #29797	; 0x7465
   154a0:	mov	r3, r0
   154a4:	movw	r0, #2022	; 0x7e6
   154a8:	mov	r1, #1
   154ac:	movt	r2, #1
   154b0:	str	r0, [sp]
   154b4:	mov	r0, r8
   154b8:	bl	112d8 <__fprintf_chk@plt>
   154bc:	movw	r4, #27986	; 0x6d52
   154c0:	mov	r1, r8
   154c4:	movt	r4, #1
   154c8:	mov	r0, r4
   154cc:	bl	110a4 <fputs_unlocked@plt>
   154d0:	movw	r1, #29083	; 0x719b
   154d4:	mov	r0, #0
   154d8:	mov	r2, #5
   154dc:	movt	r1, #1
   154e0:	bl	11134 <dcgettext@plt>
   154e4:	movw	r3, #29254	; 0x7246
   154e8:	mov	r2, r0
   154ec:	mov	r0, r8
   154f0:	mov	r1, #1
   154f4:	movt	r3, #1
   154f8:	bl	112d8 <__fprintf_chk@plt>
   154fc:	mov	r0, r4
   15500:	mov	r1, r8
   15504:	bl	110a4 <fputs_unlocked@plt>
   15508:	cmp	r6, #9
   1550c:	bhi	15548 <__assert_fail@plt+0x41c8>
   15510:	add	r0, pc, #0
   15514:	ldr	pc, [r0, r6, lsl #2]
   15518:	andeq	r5, r1, r0, asr #10
   1551c:	andeq	r5, r1, r4, asr r5
   15520:	andeq	r5, r1, r4, lsl #11
   15524:	andeq	r5, r1, ip, lsr #11
   15528:	ldrdeq	r5, [r1], -r4
   1552c:	strdeq	r5, [r1], -ip
   15530:	andeq	r5, r1, r4, lsr #12
   15534:	andeq	r5, r1, ip, asr r6
   15538:	andeq	r5, r1, r4, lsl #14
   1553c:	andeq	r5, r1, ip, lsr #13
   15540:	sub	sp, fp, #24
   15544:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15548:	movw	r1, #29607	; 0x73a7
   1554c:	movt	r1, #1
   15550:	b	156b4 <__assert_fail@plt+0x4334>
   15554:	movw	r1, #29288	; 0x7268
   15558:	mov	r0, #0
   1555c:	mov	r2, #5
   15560:	movt	r1, #1
   15564:	bl	11134 <dcgettext@plt>
   15568:	ldr	r3, [r7]
   1556c:	mov	r2, r0
   15570:	mov	r0, r8
   15574:	mov	r1, #1
   15578:	sub	sp, fp, #24
   1557c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15580:	b	112d8 <__fprintf_chk@plt>
   15584:	movw	r1, #29304	; 0x7278
   15588:	mov	r0, #0
   1558c:	mov	r2, #5
   15590:	movt	r1, #1
   15594:	bl	11134 <dcgettext@plt>
   15598:	mov	r2, r0
   1559c:	ldr	r3, [r7]
   155a0:	ldr	r0, [r7, #4]
   155a4:	str	r0, [sp]
   155a8:	b	15698 <__assert_fail@plt+0x4318>
   155ac:	movw	r1, #29327	; 0x728f
   155b0:	mov	r0, #0
   155b4:	mov	r2, #5
   155b8:	movt	r1, #1
   155bc:	bl	11134 <dcgettext@plt>
   155c0:	mov	r2, r0
   155c4:	ldr	r3, [r7]
   155c8:	ldmib	r7, {r0, r1}
   155cc:	stm	sp, {r0, r1}
   155d0:	b	15698 <__assert_fail@plt+0x4318>
   155d4:	movw	r1, #29355	; 0x72ab
   155d8:	mov	r0, #0
   155dc:	mov	r2, #5
   155e0:	movt	r1, #1
   155e4:	bl	11134 <dcgettext@plt>
   155e8:	ldr	r3, [r7]
   155ec:	mov	r2, r0
   155f0:	ldmib	r7, {r0, r1, r7}
   155f4:	stm	sp, {r0, r1, r7}
   155f8:	b	15698 <__assert_fail@plt+0x4318>
   155fc:	movw	r1, #29387	; 0x72cb
   15600:	mov	r0, #0
   15604:	mov	r2, #5
   15608:	movt	r1, #1
   1560c:	bl	11134 <dcgettext@plt>
   15610:	ldr	r3, [r7]
   15614:	mov	r2, r0
   15618:	ldmib	r7, {r0, r1, r6, r7}
   1561c:	stm	sp, {r0, r1, r6, r7}
   15620:	b	15698 <__assert_fail@plt+0x4318>
   15624:	movw	r1, #29423	; 0x72ef
   15628:	mov	r0, #0
   1562c:	mov	r2, #5
   15630:	movt	r1, #1
   15634:	bl	11134 <dcgettext@plt>
   15638:	mov	r2, r0
   1563c:	ldr	r3, [r7]
   15640:	ldmib	r7, {r0, r1, r6}
   15644:	ldr	r5, [r7, #16]
   15648:	ldr	r7, [r7, #20]
   1564c:	stm	sp, {r0, r1, r6}
   15650:	str	r5, [sp, #12]
   15654:	str	r7, [sp, #16]
   15658:	b	15698 <__assert_fail@plt+0x4318>
   1565c:	movw	r1, #29463	; 0x7317
   15660:	mov	r0, #0
   15664:	mov	r2, #5
   15668:	movt	r1, #1
   1566c:	bl	11134 <dcgettext@plt>
   15670:	mov	r2, r0
   15674:	ldr	r3, [r7]
   15678:	ldmib	r7, {r0, r1, r6}
   1567c:	ldr	r5, [r7, #16]
   15680:	ldr	r4, [r7, #20]
   15684:	ldr	r7, [r7, #24]
   15688:	stm	sp, {r0, r1, r6}
   1568c:	str	r5, [sp, #12]
   15690:	str	r4, [sp, #16]
   15694:	str	r7, [sp, #20]
   15698:	mov	r0, r8
   1569c:	mov	r1, #1
   156a0:	bl	112d8 <__fprintf_chk@plt>
   156a4:	sub	sp, fp, #24
   156a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   156ac:	movw	r1, #29555	; 0x7373
   156b0:	movt	r1, #1
   156b4:	mov	r0, #0
   156b8:	mov	r2, #5
   156bc:	bl	11134 <dcgettext@plt>
   156c0:	mov	ip, r0
   156c4:	ldr	r3, [r7]
   156c8:	ldr	r0, [r7, #4]
   156cc:	ldr	r1, [r7, #8]
   156d0:	ldr	r6, [r7, #12]
   156d4:	ldr	r5, [r7, #16]
   156d8:	ldr	r4, [r7, #20]
   156dc:	ldr	r2, [r7, #24]
   156e0:	ldr	lr, [r7, #28]
   156e4:	ldr	r7, [r7, #32]
   156e8:	stm	sp, {r0, r1, r6}
   156ec:	str	r5, [sp, #12]
   156f0:	str	r4, [sp, #16]
   156f4:	str	r2, [sp, #20]
   156f8:	str	lr, [sp, #24]
   156fc:	str	r7, [sp, #28]
   15700:	b	15748 <__assert_fail@plt+0x43c8>
   15704:	movw	r1, #29507	; 0x7343
   15708:	mov	r0, #0
   1570c:	mov	r2, #5
   15710:	movt	r1, #1
   15714:	bl	11134 <dcgettext@plt>
   15718:	mov	ip, r0
   1571c:	ldr	r3, [r7]
   15720:	ldmib	r7, {r0, r1, r6}
   15724:	ldr	r5, [r7, #16]
   15728:	ldr	r4, [r7, #20]
   1572c:	ldr	r2, [r7, #24]
   15730:	ldr	r7, [r7, #28]
   15734:	stm	sp, {r0, r1, r6}
   15738:	str	r5, [sp, #12]
   1573c:	str	r4, [sp, #16]
   15740:	str	r2, [sp, #20]
   15744:	str	r7, [sp, #24]
   15748:	mov	r0, r8
   1574c:	mov	r1, #1
   15750:	mov	r2, ip
   15754:	bl	112d8 <__fprintf_chk@plt>
   15758:	sub	sp, fp, #24
   1575c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15760:	push	{r4, sl, fp, lr}
   15764:	add	fp, sp, #8
   15768:	sub	sp, sp, #8
   1576c:	ldr	ip, [fp, #8]
   15770:	mov	lr, #0
   15774:	ldr	r4, [ip, lr, lsl #2]
   15778:	add	lr, lr, #1
   1577c:	cmp	r4, #0
   15780:	bne	15774 <__assert_fail@plt+0x43f4>
   15784:	sub	r4, lr, #1
   15788:	str	ip, [sp]
   1578c:	str	r4, [sp, #4]
   15790:	bl	15424 <__assert_fail@plt+0x40a4>
   15794:	sub	sp, fp, #8
   15798:	pop	{r4, sl, fp, pc}
   1579c:	push	{fp, lr}
   157a0:	mov	fp, sp
   157a4:	sub	sp, sp, #48	; 0x30
   157a8:	ldr	ip, [fp, #8]
   157ac:	ldr	lr, [ip]
   157b0:	cmp	lr, #0
   157b4:	str	lr, [sp, #8]
   157b8:	beq	15854 <__assert_fail@plt+0x44d4>
   157bc:	ldr	lr, [ip, #4]
   157c0:	cmp	lr, #0
   157c4:	str	lr, [sp, #12]
   157c8:	beq	1585c <__assert_fail@plt+0x44dc>
   157cc:	ldr	lr, [ip, #8]
   157d0:	cmp	lr, #0
   157d4:	str	lr, [sp, #16]
   157d8:	beq	15864 <__assert_fail@plt+0x44e4>
   157dc:	ldr	lr, [ip, #12]
   157e0:	cmp	lr, #0
   157e4:	str	lr, [sp, #20]
   157e8:	beq	1586c <__assert_fail@plt+0x44ec>
   157ec:	ldr	lr, [ip, #16]
   157f0:	cmp	lr, #0
   157f4:	str	lr, [sp, #24]
   157f8:	beq	15874 <__assert_fail@plt+0x44f4>
   157fc:	ldr	lr, [ip, #20]
   15800:	cmp	lr, #0
   15804:	str	lr, [sp, #28]
   15808:	beq	1587c <__assert_fail@plt+0x44fc>
   1580c:	ldr	lr, [ip, #24]
   15810:	cmp	lr, #0
   15814:	str	lr, [sp, #32]
   15818:	beq	15884 <__assert_fail@plt+0x4504>
   1581c:	ldr	lr, [ip, #28]
   15820:	cmp	lr, #0
   15824:	str	lr, [sp, #36]	; 0x24
   15828:	beq	1588c <__assert_fail@plt+0x450c>
   1582c:	ldr	lr, [ip, #32]
   15830:	cmp	lr, #0
   15834:	str	lr, [sp, #40]	; 0x28
   15838:	beq	15894 <__assert_fail@plt+0x4514>
   1583c:	ldr	lr, [ip, #36]	; 0x24
   15840:	mov	ip, #10
   15844:	cmp	lr, #0
   15848:	str	lr, [sp, #44]	; 0x2c
   1584c:	movweq	ip, #9
   15850:	b	15898 <__assert_fail@plt+0x4518>
   15854:	mov	ip, #0
   15858:	b	15898 <__assert_fail@plt+0x4518>
   1585c:	mov	ip, #1
   15860:	b	15898 <__assert_fail@plt+0x4518>
   15864:	mov	ip, #2
   15868:	b	15898 <__assert_fail@plt+0x4518>
   1586c:	mov	ip, #3
   15870:	b	15898 <__assert_fail@plt+0x4518>
   15874:	mov	ip, #4
   15878:	b	15898 <__assert_fail@plt+0x4518>
   1587c:	mov	ip, #5
   15880:	b	15898 <__assert_fail@plt+0x4518>
   15884:	mov	ip, #6
   15888:	b	15898 <__assert_fail@plt+0x4518>
   1588c:	mov	ip, #7
   15890:	b	15898 <__assert_fail@plt+0x4518>
   15894:	mov	ip, #8
   15898:	add	lr, sp, #8
   1589c:	str	ip, [sp, #4]
   158a0:	str	lr, [sp]
   158a4:	bl	15424 <__assert_fail@plt+0x40a4>
   158a8:	mov	sp, fp
   158ac:	pop	{fp, pc}
   158b0:	push	{fp, lr}
   158b4:	mov	fp, sp
   158b8:	sub	sp, sp, #56	; 0x38
   158bc:	add	ip, fp, #8
   158c0:	str	ip, [sp, #12]
   158c4:	ldr	lr, [fp, #8]
   158c8:	cmp	lr, #0
   158cc:	str	lr, [sp, #16]
   158d0:	beq	1596c <__assert_fail@plt+0x45ec>
   158d4:	ldr	lr, [ip, #4]
   158d8:	cmp	lr, #0
   158dc:	str	lr, [sp, #20]
   158e0:	beq	15974 <__assert_fail@plt+0x45f4>
   158e4:	ldr	lr, [ip, #8]
   158e8:	cmp	lr, #0
   158ec:	str	lr, [sp, #24]
   158f0:	beq	1597c <__assert_fail@plt+0x45fc>
   158f4:	ldr	lr, [ip, #12]
   158f8:	cmp	lr, #0
   158fc:	str	lr, [sp, #28]
   15900:	beq	15984 <__assert_fail@plt+0x4604>
   15904:	ldr	lr, [ip, #16]
   15908:	cmp	lr, #0
   1590c:	str	lr, [sp, #32]
   15910:	beq	1598c <__assert_fail@plt+0x460c>
   15914:	ldr	lr, [ip, #20]
   15918:	cmp	lr, #0
   1591c:	str	lr, [sp, #36]	; 0x24
   15920:	beq	15994 <__assert_fail@plt+0x4614>
   15924:	ldr	lr, [ip, #24]
   15928:	cmp	lr, #0
   1592c:	str	lr, [sp, #40]	; 0x28
   15930:	beq	1599c <__assert_fail@plt+0x461c>
   15934:	ldr	lr, [ip, #28]
   15938:	cmp	lr, #0
   1593c:	str	lr, [sp, #44]	; 0x2c
   15940:	beq	159a4 <__assert_fail@plt+0x4624>
   15944:	ldr	lr, [ip, #32]
   15948:	cmp	lr, #0
   1594c:	str	lr, [sp, #48]	; 0x30
   15950:	beq	159ac <__assert_fail@plt+0x462c>
   15954:	ldr	lr, [ip, #36]	; 0x24
   15958:	mov	ip, #10
   1595c:	cmp	lr, #0
   15960:	str	lr, [sp, #52]	; 0x34
   15964:	movweq	ip, #9
   15968:	b	159b0 <__assert_fail@plt+0x4630>
   1596c:	mov	ip, #0
   15970:	b	159b0 <__assert_fail@plt+0x4630>
   15974:	mov	ip, #1
   15978:	b	159b0 <__assert_fail@plt+0x4630>
   1597c:	mov	ip, #2
   15980:	b	159b0 <__assert_fail@plt+0x4630>
   15984:	mov	ip, #3
   15988:	b	159b0 <__assert_fail@plt+0x4630>
   1598c:	mov	ip, #4
   15990:	b	159b0 <__assert_fail@plt+0x4630>
   15994:	mov	ip, #5
   15998:	b	159b0 <__assert_fail@plt+0x4630>
   1599c:	mov	ip, #6
   159a0:	b	159b0 <__assert_fail@plt+0x4630>
   159a4:	mov	ip, #7
   159a8:	b	159b0 <__assert_fail@plt+0x4630>
   159ac:	mov	ip, #8
   159b0:	add	lr, sp, #16
   159b4:	str	ip, [sp, #4]
   159b8:	str	lr, [sp]
   159bc:	bl	15424 <__assert_fail@plt+0x40a4>
   159c0:	mov	sp, fp
   159c4:	pop	{fp, pc}
   159c8:	push	{fp, lr}
   159cc:	mov	fp, sp
   159d0:	movw	r0, #33148	; 0x817c
   159d4:	movt	r0, #2
   159d8:	ldr	r1, [r0]
   159dc:	movw	r0, #27986	; 0x6d52
   159e0:	movt	r0, #1
   159e4:	bl	110a4 <fputs_unlocked@plt>
   159e8:	movw	r1, #29667	; 0x73e3
   159ec:	mov	r0, #0
   159f0:	mov	r2, #5
   159f4:	movt	r1, #1
   159f8:	bl	11134 <dcgettext@plt>
   159fc:	movw	r2, #29687	; 0x73f7
   15a00:	mov	r1, r0
   15a04:	mov	r0, #1
   15a08:	movt	r2, #1
   15a0c:	bl	112c0 <__printf_chk@plt>
   15a10:	movw	r1, #29709	; 0x740d
   15a14:	mov	r0, #0
   15a18:	mov	r2, #5
   15a1c:	movt	r1, #1
   15a20:	bl	11134 <dcgettext@plt>
   15a24:	movw	r2, #27572	; 0x6bb4
   15a28:	movw	r3, #27795	; 0x6c93
   15a2c:	mov	r1, r0
   15a30:	mov	r0, #1
   15a34:	movt	r2, #1
   15a38:	movt	r3, #1
   15a3c:	bl	112c0 <__printf_chk@plt>
   15a40:	movw	r1, #29729	; 0x7421
   15a44:	mov	r0, #0
   15a48:	mov	r2, #5
   15a4c:	movt	r1, #1
   15a50:	bl	11134 <dcgettext@plt>
   15a54:	movw	r2, #29768	; 0x7448
   15a58:	mov	r1, r0
   15a5c:	mov	r0, #1
   15a60:	movt	r2, #1
   15a64:	pop	{fp, lr}
   15a68:	b	112c0 <__printf_chk@plt>
   15a6c:	push	{r4, r5, r6, sl, fp, lr}
   15a70:	add	fp, sp, #16
   15a74:	mov	r4, r2
   15a78:	mov	r5, r1
   15a7c:	mov	r6, r0
   15a80:	bl	163fc <__assert_fail@plt+0x507c>
   15a84:	cmp	r0, #0
   15a88:	popne	{r4, r5, r6, sl, fp, pc}
   15a8c:	cmp	r6, #0
   15a90:	beq	15aa4 <__assert_fail@plt+0x4724>
   15a94:	cmp	r5, #0
   15a98:	cmpne	r4, #0
   15a9c:	bne	15aa4 <__assert_fail@plt+0x4724>
   15aa0:	pop	{r4, r5, r6, sl, fp, pc}
   15aa4:	bl	16020 <__assert_fail@plt+0x4ca0>
   15aa8:	push	{r4, r5, r6, sl, fp, lr}
   15aac:	add	fp, sp, #16
   15ab0:	mov	r4, r2
   15ab4:	mov	r5, r1
   15ab8:	mov	r6, r0
   15abc:	bl	163fc <__assert_fail@plt+0x507c>
   15ac0:	cmp	r0, #0
   15ac4:	popne	{r4, r5, r6, sl, fp, pc}
   15ac8:	cmp	r6, #0
   15acc:	beq	15ae0 <__assert_fail@plt+0x4760>
   15ad0:	cmp	r5, #0
   15ad4:	cmpne	r4, #0
   15ad8:	bne	15ae0 <__assert_fail@plt+0x4760>
   15adc:	pop	{r4, r5, r6, sl, fp, pc}
   15ae0:	bl	16020 <__assert_fail@plt+0x4ca0>
   15ae4:	push	{fp, lr}
   15ae8:	mov	fp, sp
   15aec:	bl	160b8 <__assert_fail@plt+0x4d38>
   15af0:	cmp	r0, #0
   15af4:	popne	{fp, pc}
   15af8:	bl	16020 <__assert_fail@plt+0x4ca0>
   15afc:	push	{fp, lr}
   15b00:	mov	fp, sp
   15b04:	bl	160b8 <__assert_fail@plt+0x4d38>
   15b08:	cmp	r0, #0
   15b0c:	popne	{fp, pc}
   15b10:	bl	16020 <__assert_fail@plt+0x4ca0>
   15b14:	push	{fp, lr}
   15b18:	mov	fp, sp
   15b1c:	bl	160b8 <__assert_fail@plt+0x4d38>
   15b20:	cmp	r0, #0
   15b24:	popne	{fp, pc}
   15b28:	bl	16020 <__assert_fail@plt+0x4ca0>
   15b2c:	push	{r4, r5, fp, lr}
   15b30:	add	fp, sp, #8
   15b34:	mov	r4, r1
   15b38:	mov	r5, r0
   15b3c:	bl	160e8 <__assert_fail@plt+0x4d68>
   15b40:	cmp	r0, #0
   15b44:	popne	{r4, r5, fp, pc}
   15b48:	cmp	r5, #0
   15b4c:	beq	15b5c <__assert_fail@plt+0x47dc>
   15b50:	cmp	r4, #0
   15b54:	bne	15b5c <__assert_fail@plt+0x47dc>
   15b58:	pop	{r4, r5, fp, pc}
   15b5c:	bl	16020 <__assert_fail@plt+0x4ca0>
   15b60:	push	{fp, lr}
   15b64:	mov	fp, sp
   15b68:	cmp	r1, #0
   15b6c:	orreq	r1, r1, #1
   15b70:	bl	160e8 <__assert_fail@plt+0x4d68>
   15b74:	cmp	r0, #0
   15b78:	popne	{fp, pc}
   15b7c:	bl	16020 <__assert_fail@plt+0x4ca0>
   15b80:	push	{fp, lr}
   15b84:	mov	fp, sp
   15b88:	clz	r3, r2
   15b8c:	lsr	ip, r3, #5
   15b90:	clz	r3, r1
   15b94:	lsr	r3, r3, #5
   15b98:	orrs	r3, r3, ip
   15b9c:	movwne	r1, #1
   15ba0:	movwne	r2, #1
   15ba4:	bl	163fc <__assert_fail@plt+0x507c>
   15ba8:	cmp	r0, #0
   15bac:	popne	{fp, pc}
   15bb0:	bl	16020 <__assert_fail@plt+0x4ca0>
   15bb4:	push	{fp, lr}
   15bb8:	mov	fp, sp
   15bbc:	mov	r2, r1
   15bc0:	mov	r1, r0
   15bc4:	mov	r0, #0
   15bc8:	bl	163fc <__assert_fail@plt+0x507c>
   15bcc:	cmp	r0, #0
   15bd0:	popne	{fp, pc}
   15bd4:	bl	16020 <__assert_fail@plt+0x4ca0>
   15bd8:	push	{fp, lr}
   15bdc:	mov	fp, sp
   15be0:	mov	r2, r1
   15be4:	mov	r1, r0
   15be8:	clz	r0, r2
   15bec:	clz	r3, r1
   15bf0:	lsr	r0, r0, #5
   15bf4:	lsr	r3, r3, #5
   15bf8:	orrs	r0, r3, r0
   15bfc:	mov	r0, #0
   15c00:	movwne	r1, #1
   15c04:	movwne	r2, #1
   15c08:	bl	163fc <__assert_fail@plt+0x507c>
   15c0c:	cmp	r0, #0
   15c10:	popne	{fp, pc}
   15c14:	bl	16020 <__assert_fail@plt+0x4ca0>
   15c18:	push	{r4, r5, r6, sl, fp, lr}
   15c1c:	add	fp, sp, #16
   15c20:	ldr	r5, [r1]
   15c24:	mov	r4, r1
   15c28:	mov	r6, r0
   15c2c:	cmp	r0, #0
   15c30:	beq	15c48 <__assert_fail@plt+0x48c8>
   15c34:	mov	r0, #1
   15c38:	add	r0, r0, r5, lsr #1
   15c3c:	adds	r5, r5, r0
   15c40:	bcc	15c50 <__assert_fail@plt+0x48d0>
   15c44:	b	15c8c <__assert_fail@plt+0x490c>
   15c48:	cmp	r5, #0
   15c4c:	movweq	r5, #64	; 0x40
   15c50:	mov	r0, r6
   15c54:	mov	r1, r5
   15c58:	mov	r2, #1
   15c5c:	bl	163fc <__assert_fail@plt+0x507c>
   15c60:	cmp	r5, #0
   15c64:	mov	r1, r5
   15c68:	movwne	r1, #1
   15c6c:	cmp	r0, #0
   15c70:	bne	15c84 <__assert_fail@plt+0x4904>
   15c74:	clz	r2, r6
   15c78:	lsr	r2, r2, #5
   15c7c:	orrs	r1, r2, r1
   15c80:	bne	15c8c <__assert_fail@plt+0x490c>
   15c84:	str	r5, [r4]
   15c88:	pop	{r4, r5, r6, sl, fp, pc}
   15c8c:	bl	16020 <__assert_fail@plt+0x4ca0>
   15c90:	push	{r4, r5, r6, r7, fp, lr}
   15c94:	add	fp, sp, #16
   15c98:	ldr	r5, [r1]
   15c9c:	mov	r6, r2
   15ca0:	mov	r4, r1
   15ca4:	mov	r7, r0
   15ca8:	cmp	r0, #0
   15cac:	beq	15cc4 <__assert_fail@plt+0x4944>
   15cb0:	mov	r0, #1
   15cb4:	add	r0, r0, r5, lsr #1
   15cb8:	adds	r5, r5, r0
   15cbc:	bcc	15cdc <__assert_fail@plt+0x495c>
   15cc0:	b	15d10 <__assert_fail@plt+0x4990>
   15cc4:	cmp	r5, #0
   15cc8:	bne	15cdc <__assert_fail@plt+0x495c>
   15ccc:	mov	r0, #64	; 0x40
   15cd0:	cmp	r6, #64	; 0x40
   15cd4:	udiv	r5, r0, r6
   15cd8:	addhi	r5, r5, #1
   15cdc:	mov	r0, r7
   15ce0:	mov	r1, r5
   15ce4:	mov	r2, r6
   15ce8:	bl	163fc <__assert_fail@plt+0x507c>
   15cec:	cmp	r0, #0
   15cf0:	bne	15d08 <__assert_fail@plt+0x4988>
   15cf4:	cmp	r7, #0
   15cf8:	beq	15d10 <__assert_fail@plt+0x4990>
   15cfc:	cmp	r6, #0
   15d00:	cmpne	r5, #0
   15d04:	bne	15d10 <__assert_fail@plt+0x4990>
   15d08:	str	r5, [r4]
   15d0c:	pop	{r4, r5, r6, r7, fp, pc}
   15d10:	bl	16020 <__assert_fail@plt+0x4ca0>
   15d14:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15d18:	add	fp, sp, #24
   15d1c:	mov	r8, r1
   15d20:	ldr	r1, [r1]
   15d24:	mov	r5, r0
   15d28:	add	r0, r1, r1, asr #1
   15d2c:	cmp	r0, r1
   15d30:	mvnvs	r0, #-2147483648	; 0x80000000
   15d34:	cmp	r0, r3
   15d38:	mov	r7, r0
   15d3c:	movgt	r7, r3
   15d40:	cmn	r3, #1
   15d44:	movle	r7, r0
   15d48:	ldr	r0, [fp, #8]
   15d4c:	cmn	r0, #1
   15d50:	ble	15d78 <__assert_fail@plt+0x49f8>
   15d54:	cmp	r0, #0
   15d58:	beq	15dcc <__assert_fail@plt+0x4a4c>
   15d5c:	cmn	r7, #1
   15d60:	ble	15da0 <__assert_fail@plt+0x4a20>
   15d64:	mvn	r4, #-2147483648	; 0x80000000
   15d68:	udiv	r6, r4, r0
   15d6c:	cmp	r6, r7
   15d70:	bge	15dcc <__assert_fail@plt+0x4a4c>
   15d74:	b	15ddc <__assert_fail@plt+0x4a5c>
   15d78:	cmn	r7, #1
   15d7c:	ble	15dbc <__assert_fail@plt+0x4a3c>
   15d80:	cmn	r0, #1
   15d84:	beq	15dcc <__assert_fail@plt+0x4a4c>
   15d88:	mov	r6, #-2147483648	; 0x80000000
   15d8c:	mvn	r4, #-2147483648	; 0x80000000
   15d90:	sdiv	r6, r6, r0
   15d94:	cmp	r6, r7
   15d98:	bge	15dcc <__assert_fail@plt+0x4a4c>
   15d9c:	b	15ddc <__assert_fail@plt+0x4a5c>
   15da0:	beq	15dcc <__assert_fail@plt+0x4a4c>
   15da4:	mov	r6, #-2147483648	; 0x80000000
   15da8:	mvn	r4, #-2147483648	; 0x80000000
   15dac:	sdiv	r6, r6, r7
   15db0:	cmp	r6, r0
   15db4:	bge	15dcc <__assert_fail@plt+0x4a4c>
   15db8:	b	15ddc <__assert_fail@plt+0x4a5c>
   15dbc:	mvn	r4, #-2147483648	; 0x80000000
   15dc0:	sdiv	r6, r4, r0
   15dc4:	cmp	r7, r6
   15dc8:	blt	15ddc <__assert_fail@plt+0x4a5c>
   15dcc:	mul	r6, r7, r0
   15dd0:	mov	r4, #64	; 0x40
   15dd4:	cmp	r6, #63	; 0x3f
   15dd8:	bgt	15de4 <__assert_fail@plt+0x4a64>
   15ddc:	sdiv	r7, r4, r0
   15de0:	mul	r6, r7, r0
   15de4:	cmp	r5, #0
   15de8:	moveq	r4, #0
   15dec:	streq	r4, [r8]
   15df0:	sub	r4, r7, r1
   15df4:	cmp	r4, r2
   15df8:	bge	15ea4 <__assert_fail@plt+0x4b24>
   15dfc:	add	r7, r1, r2
   15e00:	mov	r6, #0
   15e04:	mov	r2, #0
   15e08:	cmp	r7, r3
   15e0c:	movwgt	r6, #1
   15e10:	cmn	r3, #1
   15e14:	movwgt	r2, #1
   15e18:	cmp	r7, r1
   15e1c:	bvs	15ed8 <__assert_fail@plt+0x4b58>
   15e20:	ands	r1, r2, r6
   15e24:	bne	15ed8 <__assert_fail@plt+0x4b58>
   15e28:	cmn	r0, #1
   15e2c:	ble	15e54 <__assert_fail@plt+0x4ad4>
   15e30:	cmp	r0, #0
   15e34:	beq	15ea0 <__assert_fail@plt+0x4b20>
   15e38:	cmn	r7, #1
   15e3c:	ble	15e78 <__assert_fail@plt+0x4af8>
   15e40:	mvn	r1, #-2147483648	; 0x80000000
   15e44:	udiv	r1, r1, r0
   15e48:	cmp	r1, r7
   15e4c:	bge	15ea0 <__assert_fail@plt+0x4b20>
   15e50:	b	15ed8 <__assert_fail@plt+0x4b58>
   15e54:	cmn	r7, #1
   15e58:	ble	15e90 <__assert_fail@plt+0x4b10>
   15e5c:	cmn	r0, #1
   15e60:	beq	15ea0 <__assert_fail@plt+0x4b20>
   15e64:	mov	r1, #-2147483648	; 0x80000000
   15e68:	sdiv	r1, r1, r0
   15e6c:	cmp	r1, r7
   15e70:	bge	15ea0 <__assert_fail@plt+0x4b20>
   15e74:	b	15ed8 <__assert_fail@plt+0x4b58>
   15e78:	beq	15ea0 <__assert_fail@plt+0x4b20>
   15e7c:	mov	r1, #-2147483648	; 0x80000000
   15e80:	sdiv	r1, r1, r7
   15e84:	cmp	r1, r0
   15e88:	bge	15ea0 <__assert_fail@plt+0x4b20>
   15e8c:	b	15ed8 <__assert_fail@plt+0x4b58>
   15e90:	mvn	r1, #-2147483648	; 0x80000000
   15e94:	sdiv	r1, r1, r0
   15e98:	cmp	r7, r1
   15e9c:	blt	15ed8 <__assert_fail@plt+0x4b58>
   15ea0:	mul	r6, r7, r0
   15ea4:	mov	r0, r5
   15ea8:	mov	r1, r6
   15eac:	bl	160e8 <__assert_fail@plt+0x4d68>
   15eb0:	cmp	r6, #0
   15eb4:	movwne	r6, #1
   15eb8:	cmp	r0, #0
   15ebc:	bne	15ed0 <__assert_fail@plt+0x4b50>
   15ec0:	clz	r1, r5
   15ec4:	lsr	r1, r1, #5
   15ec8:	orrs	r1, r1, r6
   15ecc:	bne	15ed8 <__assert_fail@plt+0x4b58>
   15ed0:	str	r7, [r8]
   15ed4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15ed8:	bl	16020 <__assert_fail@plt+0x4ca0>
   15edc:	push	{fp, lr}
   15ee0:	mov	fp, sp
   15ee4:	mov	r1, #1
   15ee8:	bl	16064 <__assert_fail@plt+0x4ce4>
   15eec:	cmp	r0, #0
   15ef0:	popne	{fp, pc}
   15ef4:	bl	16020 <__assert_fail@plt+0x4ca0>
   15ef8:	push	{fp, lr}
   15efc:	mov	fp, sp
   15f00:	bl	16064 <__assert_fail@plt+0x4ce4>
   15f04:	cmp	r0, #0
   15f08:	popne	{fp, pc}
   15f0c:	bl	16020 <__assert_fail@plt+0x4ca0>
   15f10:	push	{fp, lr}
   15f14:	mov	fp, sp
   15f18:	mov	r1, #1
   15f1c:	bl	16064 <__assert_fail@plt+0x4ce4>
   15f20:	cmp	r0, #0
   15f24:	popne	{fp, pc}
   15f28:	bl	16020 <__assert_fail@plt+0x4ca0>
   15f2c:	push	{fp, lr}
   15f30:	mov	fp, sp
   15f34:	bl	16064 <__assert_fail@plt+0x4ce4>
   15f38:	cmp	r0, #0
   15f3c:	popne	{fp, pc}
   15f40:	bl	16020 <__assert_fail@plt+0x4ca0>
   15f44:	push	{r4, r5, fp, lr}
   15f48:	add	fp, sp, #8
   15f4c:	mov	r5, r0
   15f50:	mov	r0, r1
   15f54:	mov	r4, r1
   15f58:	bl	160b8 <__assert_fail@plt+0x4d38>
   15f5c:	cmp	r0, #0
   15f60:	beq	15f74 <__assert_fail@plt+0x4bf4>
   15f64:	mov	r1, r5
   15f68:	mov	r2, r4
   15f6c:	pop	{r4, r5, fp, lr}
   15f70:	b	11104 <memcpy@plt>
   15f74:	bl	16020 <__assert_fail@plt+0x4ca0>
   15f78:	push	{r4, r5, fp, lr}
   15f7c:	add	fp, sp, #8
   15f80:	mov	r5, r0
   15f84:	mov	r0, r1
   15f88:	mov	r4, r1
   15f8c:	bl	160b8 <__assert_fail@plt+0x4d38>
   15f90:	cmp	r0, #0
   15f94:	beq	15fa8 <__assert_fail@plt+0x4c28>
   15f98:	mov	r1, r5
   15f9c:	mov	r2, r4
   15fa0:	pop	{r4, r5, fp, lr}
   15fa4:	b	11104 <memcpy@plt>
   15fa8:	bl	16020 <__assert_fail@plt+0x4ca0>
   15fac:	push	{r4, r5, fp, lr}
   15fb0:	add	fp, sp, #8
   15fb4:	mov	r5, r0
   15fb8:	add	r0, r1, #1
   15fbc:	mov	r4, r1
   15fc0:	bl	160b8 <__assert_fail@plt+0x4d38>
   15fc4:	cmp	r0, #0
   15fc8:	beq	15fe4 <__assert_fail@plt+0x4c64>
   15fcc:	mov	r1, #0
   15fd0:	mov	r2, r4
   15fd4:	strb	r1, [r0, r4]
   15fd8:	mov	r1, r5
   15fdc:	pop	{r4, r5, fp, lr}
   15fe0:	b	11104 <memcpy@plt>
   15fe4:	bl	16020 <__assert_fail@plt+0x4ca0>
   15fe8:	push	{r4, r5, fp, lr}
   15fec:	add	fp, sp, #8
   15ff0:	mov	r4, r0
   15ff4:	bl	1126c <strlen@plt>
   15ff8:	add	r5, r0, #1
   15ffc:	mov	r0, r5
   16000:	bl	160b8 <__assert_fail@plt+0x4d38>
   16004:	cmp	r0, #0
   16008:	beq	1601c <__assert_fail@plt+0x4c9c>
   1600c:	mov	r1, r4
   16010:	mov	r2, r5
   16014:	pop	{r4, r5, fp, lr}
   16018:	b	11104 <memcpy@plt>
   1601c:	bl	16020 <__assert_fail@plt+0x4ca0>
   16020:	push	{fp, lr}
   16024:	mov	fp, sp
   16028:	movw	r0, #33060	; 0x8124
   1602c:	movw	r1, #29844	; 0x7494
   16030:	mov	r2, #5
   16034:	movt	r0, #2
   16038:	movt	r1, #1
   1603c:	ldr	r4, [r0]
   16040:	mov	r0, #0
   16044:	bl	11134 <dcgettext@plt>
   16048:	movw	r2, #28799	; 0x707f
   1604c:	mov	r3, r0
   16050:	mov	r0, r4
   16054:	mov	r1, #0
   16058:	movt	r2, #1
   1605c:	bl	111b8 <error@plt>
   16060:	bl	11368 <abort@plt>
   16064:	clz	r2, r1
   16068:	clz	r3, r0
   1606c:	lsr	r2, r2, #5
   16070:	lsr	r3, r3, #5
   16074:	orrs	r2, r3, r2
   16078:	movwne	r1, #1
   1607c:	movwne	r0, #1
   16080:	cmp	r1, #0
   16084:	beq	160b4 <__assert_fail@plt+0x4d34>
   16088:	mvn	r2, #-2147483648	; 0x80000000
   1608c:	udiv	r2, r2, r1
   16090:	cmp	r2, r0
   16094:	bcs	160b4 <__assert_fail@plt+0x4d34>
   16098:	push	{fp, lr}
   1609c:	mov	fp, sp
   160a0:	bl	11284 <__errno_location@plt>
   160a4:	mov	r1, #12
   160a8:	str	r1, [r0]
   160ac:	mov	r0, #0
   160b0:	pop	{fp, pc}
   160b4:	b	11098 <calloc@plt>
   160b8:	cmp	r0, #0
   160bc:	movweq	r0, #1
   160c0:	cmn	r0, #1
   160c4:	ble	160cc <__assert_fail@plt+0x4d4c>
   160c8:	b	111dc <malloc@plt>
   160cc:	push	{fp, lr}
   160d0:	mov	fp, sp
   160d4:	bl	11284 <__errno_location@plt>
   160d8:	mov	r1, #12
   160dc:	str	r1, [r0]
   160e0:	mov	r0, #0
   160e4:	pop	{fp, pc}
   160e8:	push	{fp, lr}
   160ec:	mov	fp, sp
   160f0:	cmp	r0, #0
   160f4:	beq	16110 <__assert_fail@plt+0x4d90>
   160f8:	cmp	r1, #0
   160fc:	beq	1611c <__assert_fail@plt+0x4d9c>
   16100:	cmn	r1, #1
   16104:	ble	16128 <__assert_fail@plt+0x4da8>
   16108:	pop	{fp, lr}
   1610c:	b	11158 <realloc@plt>
   16110:	mov	r0, r1
   16114:	pop	{fp, lr}
   16118:	b	160b8 <__assert_fail@plt+0x4d38>
   1611c:	bl	12f94 <__assert_fail@plt+0x1c14>
   16120:	mov	r0, #0
   16124:	pop	{fp, pc}
   16128:	bl	11284 <__errno_location@plt>
   1612c:	mov	r1, #12
   16130:	str	r1, [r0]
   16134:	mov	r0, #0
   16138:	pop	{fp, pc}
   1613c:	push	{r4, r5, r6, sl, fp, lr}
   16140:	add	fp, sp, #16
   16144:	mov	r4, r0
   16148:	bl	111a0 <__fpending@plt>
   1614c:	ldr	r6, [r4]
   16150:	mov	r5, r0
   16154:	mov	r0, r4
   16158:	bl	161c0 <__assert_fail@plt+0x4e40>
   1615c:	tst	r6, #32
   16160:	bne	16198 <__assert_fail@plt+0x4e18>
   16164:	cmp	r0, #0
   16168:	mov	r4, r0
   1616c:	mvnne	r4, #0
   16170:	cmp	r5, #0
   16174:	bne	161a4 <__assert_fail@plt+0x4e24>
   16178:	cmp	r0, #0
   1617c:	beq	161a4 <__assert_fail@plt+0x4e24>
   16180:	bl	11284 <__errno_location@plt>
   16184:	ldr	r0, [r0]
   16188:	subs	r4, r0, #9
   1618c:	mvnne	r4, #0
   16190:	mov	r0, r4
   16194:	pop	{r4, r5, r6, sl, fp, pc}
   16198:	mvn	r4, #0
   1619c:	cmp	r0, #0
   161a0:	beq	161ac <__assert_fail@plt+0x4e2c>
   161a4:	mov	r0, r4
   161a8:	pop	{r4, r5, r6, sl, fp, pc}
   161ac:	bl	11284 <__errno_location@plt>
   161b0:	mov	r1, #0
   161b4:	str	r1, [r0]
   161b8:	mov	r0, r4
   161bc:	pop	{r4, r5, r6, sl, fp, pc}
   161c0:	push	{r4, r5, r6, sl, fp, lr}
   161c4:	add	fp, sp, #16
   161c8:	sub	sp, sp, #8
   161cc:	mov	r4, r0
   161d0:	bl	112cc <fileno@plt>
   161d4:	cmn	r0, #1
   161d8:	ble	1624c <__assert_fail@plt+0x4ecc>
   161dc:	mov	r0, r4
   161e0:	bl	11200 <__freading@plt>
   161e4:	cmp	r0, #0
   161e8:	beq	16214 <__assert_fail@plt+0x4e94>
   161ec:	mov	r0, r4
   161f0:	bl	112cc <fileno@plt>
   161f4:	mov	r1, #1
   161f8:	mov	r2, #0
   161fc:	mov	r3, #0
   16200:	str	r1, [sp]
   16204:	bl	11188 <lseek64@plt>
   16208:	and	r0, r0, r1
   1620c:	cmn	r0, #1
   16210:	beq	1624c <__assert_fail@plt+0x4ecc>
   16214:	mov	r0, r4
   16218:	bl	1625c <__assert_fail@plt+0x4edc>
   1621c:	cmp	r0, #0
   16220:	beq	1624c <__assert_fail@plt+0x4ecc>
   16224:	bl	11284 <__errno_location@plt>
   16228:	ldr	r6, [r0]
   1622c:	mov	r5, r0
   16230:	mov	r0, r4
   16234:	bl	112e4 <fclose@plt>
   16238:	cmp	r6, #0
   1623c:	strne	r6, [r5]
   16240:	mvnne	r0, #0
   16244:	sub	sp, fp, #16
   16248:	pop	{r4, r5, r6, sl, fp, pc}
   1624c:	mov	r0, r4
   16250:	sub	sp, fp, #16
   16254:	pop	{r4, r5, r6, sl, fp, lr}
   16258:	b	112e4 <fclose@plt>
   1625c:	push	{r4, sl, fp, lr}
   16260:	add	fp, sp, #8
   16264:	sub	sp, sp, #8
   16268:	mov	r4, r0
   1626c:	cmp	r0, #0
   16270:	beq	162a8 <__assert_fail@plt+0x4f28>
   16274:	mov	r0, r4
   16278:	bl	11200 <__freading@plt>
   1627c:	cmp	r0, #0
   16280:	beq	162a8 <__assert_fail@plt+0x4f28>
   16284:	ldrb	r0, [r4, #1]
   16288:	tst	r0, #1
   1628c:	beq	162a8 <__assert_fail@plt+0x4f28>
   16290:	mov	r0, #1
   16294:	mov	r2, #0
   16298:	mov	r3, #0
   1629c:	str	r0, [sp]
   162a0:	mov	r0, r4
   162a4:	bl	162b8 <__assert_fail@plt+0x4f38>
   162a8:	mov	r0, r4
   162ac:	sub	sp, fp, #8
   162b0:	pop	{r4, sl, fp, lr}
   162b4:	b	110c8 <fflush@plt>
   162b8:	push	{r4, r5, r6, r7, fp, lr}
   162bc:	add	fp, sp, #16
   162c0:	sub	sp, sp, #8
   162c4:	mov	r4, r0
   162c8:	ldr	r0, [r0, #4]
   162cc:	mov	r5, r3
   162d0:	mov	r6, r2
   162d4:	ldr	r1, [r4, #8]
   162d8:	cmp	r1, r0
   162dc:	bne	162f8 <__assert_fail@plt+0x4f78>
   162e0:	ldrd	r0, [r4, #16]
   162e4:	cmp	r1, r0
   162e8:	bne	162f8 <__assert_fail@plt+0x4f78>
   162ec:	ldr	r0, [r4, #36]	; 0x24
   162f0:	cmp	r0, #0
   162f4:	beq	16310 <__assert_fail@plt+0x4f90>
   162f8:	mov	r0, r4
   162fc:	mov	r2, r6
   16300:	mov	r3, r5
   16304:	sub	sp, fp, #16
   16308:	pop	{r4, r5, r6, r7, fp, lr}
   1630c:	b	112f0 <fseeko64@plt>
   16310:	ldr	r7, [fp, #8]
   16314:	mov	r0, r4
   16318:	bl	112cc <fileno@plt>
   1631c:	mov	r2, r6
   16320:	mov	r3, r5
   16324:	str	r7, [sp]
   16328:	bl	11188 <lseek64@plt>
   1632c:	and	r2, r0, r1
   16330:	cmn	r2, #1
   16334:	beq	16354 <__assert_fail@plt+0x4fd4>
   16338:	strd	r0, [r4, #80]	; 0x50
   1633c:	ldr	r0, [r4]
   16340:	bic	r0, r0, #16
   16344:	str	r0, [r4]
   16348:	mov	r0, #0
   1634c:	sub	sp, fp, #16
   16350:	pop	{r4, r5, r6, r7, fp, pc}
   16354:	mvn	r0, #0
   16358:	sub	sp, fp, #16
   1635c:	pop	{r4, r5, r6, r7, fp, pc}
   16360:	push	{fp, lr}
   16364:	mov	fp, sp
   16368:	mov	r0, #14
   1636c:	bl	11320 <nl_langinfo@plt>
   16370:	movw	r1, #27987	; 0x6d53
   16374:	cmp	r0, #0
   16378:	movt	r1, #1
   1637c:	movne	r1, r0
   16380:	movw	r0, #29861	; 0x74a5
   16384:	ldrb	r2, [r1]
   16388:	movt	r0, #1
   1638c:	cmp	r2, #0
   16390:	movne	r0, r1
   16394:	pop	{fp, pc}
   16398:	push	{r4, r5, r6, r7, fp, lr}
   1639c:	add	fp, sp, #16
   163a0:	sub	sp, sp, #8
   163a4:	cmp	r0, #0
   163a8:	add	r5, sp, #4
   163ac:	mov	r7, r2
   163b0:	mov	r4, r1
   163b4:	movne	r5, r0
   163b8:	mov	r0, r5
   163bc:	bl	111ac <mbrtowc@plt>
   163c0:	mov	r6, r0
   163c4:	cmp	r7, #0
   163c8:	beq	163f0 <__assert_fail@plt+0x5070>
   163cc:	cmn	r6, #2
   163d0:	bcc	163f0 <__assert_fail@plt+0x5070>
   163d4:	mov	r0, #0
   163d8:	bl	12fbc <__assert_fail@plt+0x1c3c>
   163dc:	cmp	r0, #0
   163e0:	bne	163f0 <__assert_fail@plt+0x5070>
   163e4:	ldrb	r0, [r4]
   163e8:	mov	r6, #1
   163ec:	str	r0, [r5]
   163f0:	mov	r0, r6
   163f4:	sub	sp, fp, #16
   163f8:	pop	{r4, r5, r6, r7, fp, pc}
   163fc:	cmp	r2, #0
   16400:	beq	16430 <__assert_fail@plt+0x50b0>
   16404:	mvn	r3, #0
   16408:	udiv	r3, r3, r2
   1640c:	cmp	r3, r1
   16410:	bcs	16430 <__assert_fail@plt+0x50b0>
   16414:	push	{fp, lr}
   16418:	mov	fp, sp
   1641c:	bl	11284 <__errno_location@plt>
   16420:	mov	r1, #12
   16424:	str	r1, [r0]
   16428:	mov	r0, #0
   1642c:	pop	{fp, pc}
   16430:	mul	r1, r2, r1
   16434:	b	160e8 <__assert_fail@plt+0x4d68>
   16438:	cmp	r3, #0
   1643c:	cmpeq	r2, #0
   16440:	bne	16464 <__assert_fail@plt+0x50e4>
   16444:	cmp	r1, #0
   16448:	movlt	r1, #-2147483648	; 0x80000000
   1644c:	movlt	r0, #0
   16450:	blt	16460 <__assert_fail@plt+0x50e0>
   16454:	cmpeq	r0, #0
   16458:	mvnne	r1, #-2147483648	; 0x80000000
   1645c:	mvnne	r0, #0
   16460:	b	1650c <__assert_fail@plt+0x518c>
   16464:	sub	sp, sp, #8
   16468:	push	{sp, lr}
   1646c:	cmp	r1, #0
   16470:	blt	16490 <__assert_fail@plt+0x5110>
   16474:	cmp	r3, #0
   16478:	blt	164c4 <__assert_fail@plt+0x5144>
   1647c:	bl	1651c <__assert_fail@plt+0x519c>
   16480:	ldr	lr, [sp, #4]
   16484:	add	sp, sp, #8
   16488:	pop	{r2, r3}
   1648c:	bx	lr
   16490:	rsbs	r0, r0, #0
   16494:	sbc	r1, r1, r1, lsl #1
   16498:	cmp	r3, #0
   1649c:	blt	164e8 <__assert_fail@plt+0x5168>
   164a0:	bl	1651c <__assert_fail@plt+0x519c>
   164a4:	ldr	lr, [sp, #4]
   164a8:	add	sp, sp, #8
   164ac:	pop	{r2, r3}
   164b0:	rsbs	r0, r0, #0
   164b4:	sbc	r1, r1, r1, lsl #1
   164b8:	rsbs	r2, r2, #0
   164bc:	sbc	r3, r3, r3, lsl #1
   164c0:	bx	lr
   164c4:	rsbs	r2, r2, #0
   164c8:	sbc	r3, r3, r3, lsl #1
   164cc:	bl	1651c <__assert_fail@plt+0x519c>
   164d0:	ldr	lr, [sp, #4]
   164d4:	add	sp, sp, #8
   164d8:	pop	{r2, r3}
   164dc:	rsbs	r0, r0, #0
   164e0:	sbc	r1, r1, r1, lsl #1
   164e4:	bx	lr
   164e8:	rsbs	r2, r2, #0
   164ec:	sbc	r3, r3, r3, lsl #1
   164f0:	bl	1651c <__assert_fail@plt+0x519c>
   164f4:	ldr	lr, [sp, #4]
   164f8:	add	sp, sp, #8
   164fc:	pop	{r2, r3}
   16500:	rsbs	r2, r2, #0
   16504:	sbc	r3, r3, r3, lsl #1
   16508:	bx	lr
   1650c:	push	{r1, lr}
   16510:	mov	r0, #8
   16514:	bl	110b0 <raise@plt>
   16518:	pop	{r1, pc}
   1651c:	cmp	r1, r3
   16520:	cmpeq	r0, r2
   16524:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16528:	mov	r4, r0
   1652c:	movcc	r0, #0
   16530:	mov	r5, r1
   16534:	ldr	lr, [sp, #36]	; 0x24
   16538:	movcc	r1, r0
   1653c:	bcc	16638 <__assert_fail@plt+0x52b8>
   16540:	cmp	r3, #0
   16544:	clzeq	ip, r2
   16548:	clzne	ip, r3
   1654c:	addeq	ip, ip, #32
   16550:	cmp	r5, #0
   16554:	clzeq	r1, r4
   16558:	addeq	r1, r1, #32
   1655c:	clzne	r1, r5
   16560:	sub	ip, ip, r1
   16564:	sub	sl, ip, #32
   16568:	lsl	r9, r3, ip
   1656c:	rsb	fp, ip, #32
   16570:	orr	r9, r9, r2, lsl sl
   16574:	orr	r9, r9, r2, lsr fp
   16578:	lsl	r8, r2, ip
   1657c:	cmp	r5, r9
   16580:	cmpeq	r4, r8
   16584:	movcc	r0, #0
   16588:	movcc	r1, r0
   1658c:	bcc	165a8 <__assert_fail@plt+0x5228>
   16590:	mov	r0, #1
   16594:	subs	r4, r4, r8
   16598:	lsl	r1, r0, sl
   1659c:	orr	r1, r1, r0, lsr fp
   165a0:	lsl	r0, r0, ip
   165a4:	sbc	r5, r5, r9
   165a8:	cmp	ip, #0
   165ac:	beq	16638 <__assert_fail@plt+0x52b8>
   165b0:	lsr	r6, r8, #1
   165b4:	orr	r6, r6, r9, lsl #31
   165b8:	lsr	r7, r9, #1
   165bc:	mov	r2, ip
   165c0:	b	165e4 <__assert_fail@plt+0x5264>
   165c4:	subs	r3, r4, r6
   165c8:	sbc	r8, r5, r7
   165cc:	adds	r3, r3, r3
   165d0:	adc	r8, r8, r8
   165d4:	adds	r4, r3, #1
   165d8:	adc	r5, r8, #0
   165dc:	subs	r2, r2, #1
   165e0:	beq	16600 <__assert_fail@plt+0x5280>
   165e4:	cmp	r5, r7
   165e8:	cmpeq	r4, r6
   165ec:	bcs	165c4 <__assert_fail@plt+0x5244>
   165f0:	adds	r4, r4, r4
   165f4:	adc	r5, r5, r5
   165f8:	subs	r2, r2, #1
   165fc:	bne	165e4 <__assert_fail@plt+0x5264>
   16600:	lsr	r3, r4, ip
   16604:	orr	r3, r3, r5, lsl fp
   16608:	lsr	r2, r5, ip
   1660c:	orr	r3, r3, r5, lsr sl
   16610:	adds	r0, r0, r4
   16614:	mov	r4, r3
   16618:	lsl	r3, r2, ip
   1661c:	orr	r3, r3, r4, lsl sl
   16620:	lsl	ip, r4, ip
   16624:	orr	r3, r3, r4, lsr fp
   16628:	adc	r1, r1, r5
   1662c:	subs	r0, r0, ip
   16630:	mov	r5, r2
   16634:	sbc	r1, r1, r3
   16638:	cmp	lr, #0
   1663c:	strdne	r4, [lr]
   16640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16644:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16648:	mov	r7, r0
   1664c:	ldr	r6, [pc, #72]	; 1669c <__assert_fail@plt+0x531c>
   16650:	ldr	r5, [pc, #72]	; 166a0 <__assert_fail@plt+0x5320>
   16654:	add	r6, pc, r6
   16658:	add	r5, pc, r5
   1665c:	sub	r6, r6, r5
   16660:	mov	r8, r1
   16664:	mov	r9, r2
   16668:	bl	11078 <calloc@plt-0x20>
   1666c:	asrs	r6, r6, #2
   16670:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16674:	mov	r4, #0
   16678:	add	r4, r4, #1
   1667c:	ldr	r3, [r5], #4
   16680:	mov	r2, r9
   16684:	mov	r1, r8
   16688:	mov	r0, r7
   1668c:	blx	r3
   16690:	cmp	r6, r4
   16694:	bne	16678 <__assert_fail@plt+0x52f8>
   16698:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1669c:			; <UNDEFINED> instruction: 0x000118b0
   166a0:	andeq	r1, r1, r8, lsr #17
   166a4:	bx	lr
   166a8:	ldr	r3, [pc, #12]	; 166bc <__assert_fail@plt+0x533c>
   166ac:	mov	r1, #0
   166b0:	add	r3, pc, r3
   166b4:	ldr	r2, [r3]
   166b8:	b	1129c <__cxa_atexit@plt>
   166bc:	andeq	r1, r1, ip, asr sl

Disassembly of section .fini:

000166c0 <.fini>:
   166c0:	push	{r3, lr}
   166c4:	pop	{r3, pc}
