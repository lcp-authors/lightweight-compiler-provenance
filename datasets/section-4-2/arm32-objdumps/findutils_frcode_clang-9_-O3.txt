
../repos/findutils/locate/frcode:     file format elf32-littlearm


Disassembly of section .init:

00010c68 <.init>:
   10c68:	push	{r3, lr}
   10c6c:	bl	10ed4 <__assert_fail@plt+0x48>
   10c70:	pop	{r3, pc}

Disassembly of section .plt:

00010c74 <calloc@plt-0x14>:
   10c74:	push	{lr}		; (str lr, [sp, #-4]!)
   10c78:	ldr	lr, [pc, #4]	; 10c84 <calloc@plt-0x4>
   10c7c:	add	lr, pc, lr
   10c80:	ldr	pc, [lr, #8]!
   10c84:	andeq	r5, r1, ip, ror r3

00010c88 <calloc@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #86016	; 0x15000
   10c90:	ldr	pc, [ip, #892]!	; 0x37c

00010c94 <strtol@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #86016	; 0x15000
   10c9c:	ldr	pc, [ip, #884]!	; 0x374

00010ca0 <printf@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #86016	; 0x15000
   10ca8:	ldr	pc, [ip, #876]!	; 0x36c

00010cac <fflush@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #86016	; 0x15000
   10cb4:	ldr	pc, [ip, #868]!	; 0x364

00010cb8 <free@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #86016	; 0x15000
   10cc0:	ldr	pc, [ip, #860]!	; 0x35c

00010cc4 <ferror@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #86016	; 0x15000
   10ccc:	ldr	pc, [ip, #852]!	; 0x354

00010cd0 <_exit@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #86016	; 0x15000
   10cd8:	ldr	pc, [ip, #844]!	; 0x34c

00010cdc <memcpy@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #86016	; 0x15000
   10ce4:	ldr	pc, [ip, #836]!	; 0x344

00010ce8 <mbsinit@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #86016	; 0x15000
   10cf0:	ldr	pc, [ip, #828]!	; 0x33c

00010cf4 <dcgettext@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #86016	; 0x15000
   10cfc:	ldr	pc, [ip, #820]!	; 0x334

00010d00 <realloc@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #86016	; 0x15000
   10d08:	ldr	pc, [ip, #812]!	; 0x32c

00010d0c <iswprint@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #86016	; 0x15000
   10d14:	ldr	pc, [ip, #804]!	; 0x324

00010d18 <fwrite@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #86016	; 0x15000
   10d20:	ldr	pc, [ip, #796]!	; 0x31c

00010d24 <lseek64@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #86016	; 0x15000
   10d2c:	ldr	pc, [ip, #788]!	; 0x314

00010d30 <__ctype_get_mb_cur_max@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #86016	; 0x15000
   10d38:	ldr	pc, [ip, #780]!	; 0x30c

00010d3c <__fpending@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #86016	; 0x15000
   10d44:	ldr	pc, [ip, #772]!	; 0x304

00010d48 <mbrtowc@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #86016	; 0x15000
   10d50:	ldr	pc, [ip, #764]!	; 0x2fc

00010d54 <error@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #86016	; 0x15000
   10d5c:	ldr	pc, [ip, #756]!	; 0x2f4

00010d60 <malloc@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #86016	; 0x15000
   10d68:	ldr	pc, [ip, #748]!	; 0x2ec

00010d6c <__libc_start_main@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #86016	; 0x15000
   10d74:	ldr	pc, [ip, #740]!	; 0x2e4

00010d78 <__freading@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #86016	; 0x15000
   10d80:	ldr	pc, [ip, #732]!	; 0x2dc

00010d84 <__gmon_start__@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #86016	; 0x15000
   10d8c:	ldr	pc, [ip, #724]!	; 0x2d4

00010d90 <getopt_long@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #86016	; 0x15000
   10d98:	ldr	pc, [ip, #716]!	; 0x2cc

00010d9c <__ctype_b_loc@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #86016	; 0x15000
   10da4:	ldr	pc, [ip, #708]!	; 0x2c4

00010da8 <exit@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #86016	; 0x15000
   10db0:	ldr	pc, [ip, #700]!	; 0x2bc

00010db4 <bcmp@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #86016	; 0x15000
   10dbc:	ldr	pc, [ip, #692]!	; 0x2b4

00010dc0 <strlen@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #86016	; 0x15000
   10dc8:	ldr	pc, [ip, #684]!	; 0x2ac

00010dcc <fprintf@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #86016	; 0x15000
   10dd4:	ldr	pc, [ip, #676]!	; 0x2a4

00010dd8 <__errno_location@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #86016	; 0x15000
   10de0:	ldr	pc, [ip, #668]!	; 0x29c

00010de4 <__cxa_atexit@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #86016	; 0x15000
   10dec:	ldr	pc, [ip, #660]!	; 0x294

00010df0 <memset@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #86016	; 0x15000
   10df8:	ldr	pc, [ip, #652]!	; 0x28c

00010dfc <fileno@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #86016	; 0x15000
   10e04:	ldr	pc, [ip, #644]!	; 0x284

00010e08 <fclose@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #86016	; 0x15000
   10e10:	ldr	pc, [ip, #636]!	; 0x27c

00010e14 <fseeko64@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #86016	; 0x15000
   10e1c:	ldr	pc, [ip, #628]!	; 0x274

00010e20 <setlocale@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #86016	; 0x15000
   10e28:	ldr	pc, [ip, #620]!	; 0x26c

00010e2c <strrchr@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #86016	; 0x15000
   10e34:	ldr	pc, [ip, #612]!	; 0x264

00010e38 <nl_langinfo@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #86016	; 0x15000
   10e40:	ldr	pc, [ip, #604]!	; 0x25c

00010e44 <fputc@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #86016	; 0x15000
   10e4c:	ldr	pc, [ip, #596]!	; 0x254

00010e50 <putc@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #86016	; 0x15000
   10e58:	ldr	pc, [ip, #588]!	; 0x24c

00010e5c <getdelim@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #86016	; 0x15000
   10e64:	ldr	pc, [ip, #580]!	; 0x244

00010e68 <fputs@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #86016	; 0x15000
   10e70:	ldr	pc, [ip, #572]!	; 0x23c

00010e74 <strncmp@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #86016	; 0x15000
   10e7c:	ldr	pc, [ip, #564]!	; 0x234

00010e80 <abort@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #86016	; 0x15000
   10e88:	ldr	pc, [ip, #556]!	; 0x22c

00010e8c <__assert_fail@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #86016	; 0x15000
   10e94:	ldr	pc, [ip, #548]!	; 0x224

Disassembly of section .text:

00010e98 <.text>:
   10e98:	mov	fp, #0
   10e9c:	mov	lr, #0
   10ea0:	pop	{r1}		; (ldr r1, [sp], #4)
   10ea4:	mov	r2, sp
   10ea8:	push	{r2}		; (str r2, [sp, #-4]!)
   10eac:	push	{r0}		; (str r0, [sp, #-4]!)
   10eb0:	ldr	ip, [pc, #16]	; 10ec8 <__assert_fail@plt+0x3c>
   10eb4:	push	{ip}		; (str ip, [sp, #-4]!)
   10eb8:	ldr	r0, [pc, #12]	; 10ecc <__assert_fail@plt+0x40>
   10ebc:	ldr	r3, [pc, #12]	; 10ed0 <__assert_fail@plt+0x44>
   10ec0:	bl	10d6c <__libc_start_main@plt>
   10ec4:	bl	10e80 <abort@plt>
   10ec8:	andeq	r4, r1, r0, lsl r9
   10ecc:	andeq	r0, r1, r8, lsl #31
   10ed0:			; <UNDEFINED> instruction: 0x000148b0
   10ed4:	ldr	r3, [pc, #20]	; 10ef0 <__assert_fail@plt+0x64>
   10ed8:	ldr	r2, [pc, #20]	; 10ef4 <__assert_fail@plt+0x68>
   10edc:	add	r3, pc, r3
   10ee0:	ldr	r2, [r3, r2]
   10ee4:	cmp	r2, #0
   10ee8:	bxeq	lr
   10eec:	b	10d84 <__gmon_start__@plt>
   10ef0:	andeq	r5, r1, ip, lsl r1
   10ef4:	strheq	r0, [r0], -ip
   10ef8:	ldr	r0, [pc, #24]	; 10f18 <__assert_fail@plt+0x8c>
   10efc:	ldr	r3, [pc, #24]	; 10f1c <__assert_fail@plt+0x90>
   10f00:	cmp	r3, r0
   10f04:	bxeq	lr
   10f08:	ldr	r3, [pc, #16]	; 10f20 <__assert_fail@plt+0x94>
   10f0c:	cmp	r3, #0
   10f10:	bxeq	lr
   10f14:	bx	r3
   10f18:	andeq	r6, r2, r0, lsl r1
   10f1c:	andeq	r6, r2, r0, lsl r1
   10f20:	andeq	r0, r0, r0
   10f24:	ldr	r0, [pc, #36]	; 10f50 <__assert_fail@plt+0xc4>
   10f28:	ldr	r1, [pc, #36]	; 10f54 <__assert_fail@plt+0xc8>
   10f2c:	sub	r1, r1, r0
   10f30:	asr	r1, r1, #2
   10f34:	add	r1, r1, r1, lsr #31
   10f38:	asrs	r1, r1, #1
   10f3c:	bxeq	lr
   10f40:	ldr	r3, [pc, #16]	; 10f58 <__assert_fail@plt+0xcc>
   10f44:	cmp	r3, #0
   10f48:	bxeq	lr
   10f4c:	bx	r3
   10f50:	andeq	r6, r2, r0, lsl r1
   10f54:	andeq	r6, r2, r0, lsl r1
   10f58:	andeq	r0, r0, r0
   10f5c:	push	{r4, lr}
   10f60:	ldr	r4, [pc, #24]	; 10f80 <__assert_fail@plt+0xf4>
   10f64:	ldrb	r3, [r4]
   10f68:	cmp	r3, #0
   10f6c:	popne	{r4, pc}
   10f70:	bl	10ef8 <__assert_fail@plt+0x6c>
   10f74:	mov	r3, #1
   10f78:	strb	r3, [r4]
   10f7c:	pop	{r4, pc}
   10f80:	andeq	r6, r2, r4, lsr r1
   10f84:	b	10f24 <__assert_fail@plt+0x98>
   10f88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f8c:	add	fp, sp, #28
   10f90:	sub	sp, sp, #28
   10f94:	mov	r4, r0
   10f98:	ldr	r0, [r1]
   10f9c:	mov	r6, r1
   10fa0:	cmp	r0, #0
   10fa4:	movweq	r0, #18744	; 0x4938
   10fa8:	movteq	r0, #1
   10fac:	bl	11830 <__assert_fail@plt+0x9a4>
   10fb0:	movw	r0, #5956	; 0x1744
   10fb4:	movt	r0, #1
   10fb8:	bl	14914 <__assert_fail@plt+0x3a88>
   10fbc:	cmp	r0, #0
   10fc0:	bne	114c8 <__assert_fail@plt+0x63c>
   10fc4:	movw	r0, #1026	; 0x402
   10fc8:	str	r0, [sp, #16]
   10fcc:	movw	r0, #1026	; 0x402
   10fd0:	bl	13ec4 <__assert_fail@plt+0x3038>
   10fd4:	str	r0, [sp, #20]
   10fd8:	movw	r0, #1026	; 0x402
   10fdc:	bl	13ec4 <__assert_fail@plt+0x3038>
   10fe0:	mov	r1, #0
   10fe4:	movw	r2, #18786	; 0x4962
   10fe8:	movw	r3, #19272	; 0x4b48
   10fec:	mov	r5, r0
   10ff0:	mov	r9, #0
   10ff4:	strb	r1, [r0]
   10ff8:	mov	r0, #10
   10ffc:	movt	r2, #1
   11000:	movt	r3, #1
   11004:	str	r0, [sp, #12]
   11008:	mov	r0, #0
   1100c:	str	r0, [sp, #8]
   11010:	str	r1, [sp]
   11014:	mov	r0, r4
   11018:	mov	r1, r6
   1101c:	mov	sl, r4
   11020:	mov	r7, r6
   11024:	mov	r4, r2
   11028:	mov	r8, r3
   1102c:	bl	10d90 <getopt_long@plt>
   11030:	cmp	r0, #82	; 0x52
   11034:	ble	110ec <__assert_fail@plt+0x260>
   11038:	movw	r6, #24880	; 0x6130
   1103c:	cmp	r0, #83	; 0x53
   11040:	movt	r6, #2
   11044:	bne	11120 <__assert_fail@plt+0x294>
   11048:	ldr	r9, [r6]
   1104c:	bl	10dd8 <__errno_location@plt>
   11050:	mov	r1, r0
   11054:	mov	r0, #0
   11058:	mov	r2, #10
   1105c:	str	r9, [sp, #4]
   11060:	str	r0, [r1]
   11064:	str	r1, [sp, #8]
   11068:	mov	r0, r9
   1106c:	add	r1, sp, #24
   11070:	bl	10c94 <strtol@plt>
   11074:	cmp	r0, #0
   11078:	beq	110a4 <__assert_fail@plt+0x218>
   1107c:	add	r1, r0, #-2147483647	; 0x80000001
   11080:	mov	r2, r4
   11084:	mov	r3, r8
   11088:	cmp	r1, #1
   1108c:	bhi	110bc <__assert_fail@plt+0x230>
   11090:	ldr	r1, [sp, #8]
   11094:	ldr	r1, [r1]
   11098:	cmp	r1, #0
   1109c:	beq	110bc <__assert_fail@plt+0x230>
   110a0:	b	11420 <__assert_fail@plt+0x594>
   110a4:	ldr	r2, [r6]
   110a8:	ldr	r1, [sp, #24]
   110ac:	mov	r3, r8
   110b0:	cmp	r1, r2
   110b4:	mov	r2, r4
   110b8:	beq	11448 <__assert_fail@plt+0x5bc>
   110bc:	ldr	r8, [sp, #24]
   110c0:	ldrb	r1, [r8]
   110c4:	cmp	r1, #0
   110c8:	bne	1146c <__assert_fail@plt+0x5e0>
   110cc:	mov	r4, sl
   110d0:	mov	r6, r7
   110d4:	mov	r9, #1
   110d8:	cmp	r0, #2
   110dc:	mov	r1, #0
   110e0:	str	r0, [sp, #8]
   110e4:	bcc	11010 <__assert_fail@plt+0x184>
   110e8:	b	11498 <__assert_fail@plt+0x60c>
   110ec:	cmn	r0, #1
   110f0:	beq	11140 <__assert_fail@plt+0x2b4>
   110f4:	cmp	r0, #48	; 0x30
   110f8:	ldr	r0, [sp, #8]
   110fc:	bne	114c0 <__assert_fail@plt+0x634>
   11100:	mov	r1, #0
   11104:	mov	r2, r4
   11108:	mov	r3, r8
   1110c:	mov	r4, sl
   11110:	mov	r6, r7
   11114:	str	r1, [sp, #12]
   11118:	mov	r1, #0
   1111c:	b	1100c <__assert_fail@plt+0x180>
   11120:	cmp	r0, #118	; 0x76
   11124:	bne	113d0 <__assert_fail@plt+0x544>
   11128:	movw	r0, #18744	; 0x4938
   1112c:	movt	r0, #1
   11130:	bl	11608 <__assert_fail@plt+0x77c>
   11134:	mov	r0, #0
   11138:	sub	sp, fp, #28
   1113c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11140:	movw	r0, #24856	; 0x6118
   11144:	ldr	r1, [sp, #8]
   11148:	movt	r0, #2
   1114c:	ldr	r0, [r0]
   11150:	cmp	r0, sl
   11154:	bne	114f4 <__assert_fail@plt+0x668>
   11158:	movw	r4, #24876	; 0x612c
   1115c:	cmp	r9, #0
   11160:	movt	r4, #2
   11164:	beq	1118c <__assert_fail@plt+0x300>
   11168:	cmp	r1, #0
   1116c:	ldr	r1, [r4]
   11170:	mov	r0, #49	; 0x31
   11174:	movweq	r0, #48	; 0x30
   11178:	bl	10e44 <fputc@plt>
   1117c:	ldr	r1, [r4]
   11180:	mov	r0, #0
   11184:	bl	10e44 <fputc@plt>
   11188:	b	111ac <__assert_fail@plt+0x320>
   1118c:	ldr	r3, [r4]
   11190:	movw	r0, #19336	; 0x4b88
   11194:	mov	r1, #1
   11198:	mov	r2, #10
   1119c:	movt	r0, #1
   111a0:	bl	10d18 <fwrite@plt>
   111a4:	cmp	r0, #10
   111a8:	bne	11520 <__assert_fail@plt+0x694>
   111ac:	movw	r0, #24872	; 0x6128
   111b0:	ldr	r4, [sp, #12]
   111b4:	add	r1, sp, #16
   111b8:	movt	r0, #2
   111bc:	ldr	r3, [r0]
   111c0:	add	r0, sp, #20
   111c4:	mov	r2, r4
   111c8:	bl	10e5c <getdelim@plt>
   111cc:	mov	r1, r0
   111d0:	ldr	r0, [sp, #20]
   111d4:	cmp	r1, #1
   111d8:	blt	113b0 <__assert_fail@plt+0x524>
   111dc:	movw	sl, #1026	; 0x402
   111e0:	mov	r7, #0
   111e4:	sub	r1, r1, #1
   111e8:	ldrb	r2, [r0, r1]
   111ec:	cmp	r4, r2
   111f0:	bne	11210 <__assert_fail@plt+0x384>
   111f4:	mov	r2, #0
   111f8:	strb	r2, [r0, r1]
   111fc:	ldrb	r2, [r5]
   11200:	mov	r1, r5
   11204:	cmp	r2, #0
   11208:	bne	11244 <__assert_fail@plt+0x3b8>
   1120c:	b	11294 <__assert_fail@plt+0x408>
   11210:	movw	r1, #18892	; 0x49cc
   11214:	mov	r0, #0
   11218:	mov	r2, #5
   1121c:	movt	r1, #1
   11220:	bl	10cf4 <dcgettext@plt>
   11224:	mov	r2, r0
   11228:	mov	r0, #0
   1122c:	mov	r1, #0
   11230:	bl	10d54 <error@plt>
   11234:	ldrb	r2, [r5]
   11238:	mov	r1, r5
   1123c:	cmp	r2, #0
   11240:	beq	11294 <__assert_fail@plt+0x408>
   11244:	ldr	r0, [sp, #20]
   11248:	ldrb	r1, [r0]
   1124c:	cmp	r2, r1
   11250:	mov	r1, r5
   11254:	bne	11294 <__assert_fail@plt+0x408>
   11258:	mov	r1, #1
   1125c:	cmn	r1, #-2147483647	; 0x80000001
   11260:	beq	1128c <__assert_fail@plt+0x400>
   11264:	ldrb	r3, [r5, r1]
   11268:	add	r2, r1, #1
   1126c:	cmp	r3, #0
   11270:	beq	11284 <__assert_fail@plt+0x3f8>
   11274:	ldrb	r1, [r0, r1]
   11278:	cmp	r3, r1
   1127c:	mov	r1, r2
   11280:	beq	1125c <__assert_fail@plt+0x3d0>
   11284:	add	r0, r5, r2
   11288:	b	11290 <__assert_fail@plt+0x404>
   1128c:	add	r0, r5, r1
   11290:	sub	r1, r0, #1
   11294:	sub	r8, r1, r5
   11298:	mov	r1, #0
   1129c:	movw	r4, #24876	; 0x612c
   112a0:	sub	r6, r8, r7
   112a4:	movt	r4, #2
   112a8:	add	r0, r6, #32768	; 0x8000
   112ac:	cmp	r1, r0, lsr #16
   112b0:	rsbne	r6, r7, #0
   112b4:	movwne	r8, #0
   112b8:	cmp	r9, #0
   112bc:	bne	11330 <__assert_fail@plt+0x4a4>
   112c0:	ldr	r1, [r4]
   112c4:	add	r0, r6, #127	; 0x7f
   112c8:	cmp	r0, #255	; 0xff
   112cc:	bcc	11320 <__assert_fail@plt+0x494>
   112d0:	mov	r0, #128	; 0x80
   112d4:	bl	10e50 <putc@plt>
   112d8:	cmn	r0, #1
   112dc:	beq	113cc <__assert_fail@plt+0x540>
   112e0:	cmp	r6, #32768	; 0x8000
   112e4:	bge	113e0 <__assert_fail@plt+0x554>
   112e8:	cmn	r6, #32768	; 0x8000
   112ec:	blt	11400 <__assert_fail@plt+0x574>
   112f0:	ldr	r7, [r4]
   112f4:	asr	r0, r6, #8
   112f8:	mov	r1, r7
   112fc:	bl	10e50 <putc@plt>
   11300:	cmn	r0, #1
   11304:	beq	113cc <__assert_fail@plt+0x540>
   11308:	mov	r0, r6
   1130c:	mov	r1, r7
   11310:	bl	10e50 <putc@plt>
   11314:	cmn	r0, #1
   11318:	bne	11330 <__assert_fail@plt+0x4a4>
   1131c:	b	113cc <__assert_fail@plt+0x540>
   11320:	mov	r0, r6
   11324:	bl	10e50 <putc@plt>
   11328:	cmn	r0, #1
   1132c:	beq	113cc <__assert_fail@plt+0x540>
   11330:	ldr	r0, [sp, #20]
   11334:	ldr	r1, [r4]
   11338:	add	r0, r0, r8
   1133c:	bl	10e68 <fputs@plt>
   11340:	cmn	r0, #1
   11344:	beq	113cc <__assert_fail@plt+0x540>
   11348:	ldr	r1, [r4]
   1134c:	mov	r0, #0
   11350:	bl	10e50 <putc@plt>
   11354:	cmn	r0, #1
   11358:	beq	113cc <__assert_fail@plt+0x540>
   1135c:	movw	r0, #24872	; 0x6128
   11360:	ldr	r4, [sp, #12]
   11364:	ldr	r6, [sp, #20]
   11368:	ldr	r7, [sp, #16]
   1136c:	add	r1, sp, #16
   11370:	str	r5, [sp, #20]
   11374:	str	sl, [sp, #16]
   11378:	movt	r0, #2
   1137c:	ldr	r3, [r0]
   11380:	add	r0, sp, #20
   11384:	mov	r2, r4
   11388:	bl	10e5c <getdelim@plt>
   1138c:	mov	r1, r0
   11390:	ldr	r0, [sp, #20]
   11394:	mov	sl, r7
   11398:	mov	r9, #0
   1139c:	mov	r5, r6
   113a0:	mov	r7, r8
   113a4:	cmp	r1, #0
   113a8:	bgt	111e4 <__assert_fail@plt+0x358>
   113ac:	b	113b4 <__assert_fail@plt+0x528>
   113b0:	mov	r6, r5
   113b4:	bl	144f4 <__assert_fail@plt+0x3668>
   113b8:	mov	r0, r6
   113bc:	bl	144f4 <__assert_fail@plt+0x3668>
   113c0:	mov	r0, #0
   113c4:	sub	sp, fp, #28
   113c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113cc:	bl	115d4 <__assert_fail@plt+0x748>
   113d0:	cmp	r0, #104	; 0x68
   113d4:	bne	114c0 <__assert_fail@plt+0x634>
   113d8:	mov	r0, #0
   113dc:	bl	11534 <__assert_fail@plt+0x6a8>
   113e0:	movw	r0, #19207	; 0x4b07
   113e4:	movw	r1, #19221	; 0x4b15
   113e8:	movw	r3, #19230	; 0x4b1e
   113ec:	mov	r2, #104	; 0x68
   113f0:	movt	r0, #1
   113f4:	movt	r1, #1
   113f8:	movt	r3, #1
   113fc:	bl	10e8c <__assert_fail@plt>
   11400:	movw	r0, #19257	; 0x4b39
   11404:	movw	r1, #19221	; 0x4b15
   11408:	movw	r3, #19230	; 0x4b1e
   1140c:	mov	r2, #105	; 0x69
   11410:	movt	r0, #1
   11414:	movt	r1, #1
   11418:	movt	r3, #1
   1141c:	bl	10e8c <__assert_fail@plt>
   11420:	movw	r1, #19014	; 0x4a46
   11424:	mov	r0, #0
   11428:	mov	r2, #5
   1142c:	movt	r1, #1
   11430:	bl	10cf4 <dcgettext@plt>
   11434:	mov	r2, r0
   11438:	ldr	r3, [sp, #4]
   1143c:	mov	r0, #1
   11440:	mov	r1, #0
   11444:	bl	10d54 <error@plt>
   11448:	movw	r1, #18955	; 0x4a0b
   1144c:	mov	r0, #0
   11450:	mov	r2, #5
   11454:	movt	r1, #1
   11458:	bl	10cf4 <dcgettext@plt>
   1145c:	mov	r2, r0
   11460:	mov	r0, #1
   11464:	mov	r1, #0
   11468:	bl	10d54 <error@plt>
   1146c:	movw	r1, #19066	; 0x4a7a
   11470:	mov	r0, #0
   11474:	mov	r2, #5
   11478:	movt	r1, #1
   1147c:	bl	10cf4 <dcgettext@plt>
   11480:	mov	r2, r0
   11484:	str	r8, [sp]
   11488:	ldr	r3, [sp, #4]
   1148c:	mov	r0, #1
   11490:	mov	r1, #0
   11494:	bl	10d54 <error@plt>
   11498:	movw	r1, #18792	; 0x4968
   1149c:	mov	r0, #0
   114a0:	mov	r2, #5
   114a4:	movt	r1, #1
   114a8:	bl	10cf4 <dcgettext@plt>
   114ac:	ldr	r3, [sp, #8]
   114b0:	mov	r2, r0
   114b4:	mov	r0, #1
   114b8:	mov	r1, #0
   114bc:	bl	10d54 <error@plt>
   114c0:	mov	r0, #1
   114c4:	bl	11534 <__assert_fail@plt+0x6a8>
   114c8:	bl	10dd8 <__errno_location@plt>
   114cc:	ldr	r4, [r0]
   114d0:	movw	r1, #18751	; 0x493f
   114d4:	movt	r1, #1
   114d8:	mov	r0, #0
   114dc:	mov	r2, #5
   114e0:	bl	10cf4 <dcgettext@plt>
   114e4:	mov	r2, r0
   114e8:	mov	r0, #1
   114ec:	mov	r1, r4
   114f0:	bl	10d54 <error@plt>
   114f4:	movw	r1, #18835	; 0x4993
   114f8:	mov	r0, #0
   114fc:	mov	r2, #5
   11500:	movt	r1, #1
   11504:	bl	10cf4 <dcgettext@plt>
   11508:	mov	r2, r0
   1150c:	mov	r0, #0
   11510:	mov	r1, #0
   11514:	bl	10d54 <error@plt>
   11518:	mov	r0, #1
   1151c:	bl	11534 <__assert_fail@plt+0x6a8>
   11520:	bl	10dd8 <__errno_location@plt>
   11524:	ldr	r4, [r0]
   11528:	movw	r1, #18857	; 0x49a9
   1152c:	movt	r1, #1
   11530:	b	114d8 <__assert_fail@plt+0x64c>
   11534:	push	{fp, lr}
   11538:	mov	fp, sp
   1153c:	cmp	r0, #0
   11540:	bne	11590 <__assert_fail@plt+0x704>
   11544:	movw	r5, #24876	; 0x612c
   11548:	movw	r1, #19149	; 0x4acd
   1154c:	mov	r0, #0
   11550:	mov	r2, #5
   11554:	movt	r5, #2
   11558:	movt	r1, #1
   1155c:	ldr	r4, [r5]
   11560:	bl	10cf4 <dcgettext@plt>
   11564:	movw	r6, #24896	; 0x6140
   11568:	mov	r1, r0
   1156c:	mov	r0, r4
   11570:	movt	r6, #2
   11574:	ldr	r2, [r6]
   11578:	bl	10dcc <fprintf@plt>
   1157c:	ldr	r0, [r5]
   11580:	ldr	r1, [r6]
   11584:	bl	116b8 <__assert_fail@plt+0x82c>
   11588:	mov	r0, #0
   1158c:	bl	10da8 <exit@plt>
   11590:	mov	r4, r0
   11594:	movw	r0, #24864	; 0x6120
   11598:	movw	r1, #19110	; 0x4aa6
   1159c:	mov	r2, #5
   115a0:	movt	r0, #2
   115a4:	movt	r1, #1
   115a8:	ldr	r5, [r0]
   115ac:	mov	r0, #0
   115b0:	bl	10cf4 <dcgettext@plt>
   115b4:	mov	r1, r0
   115b8:	movw	r0, #24896	; 0x6140
   115bc:	movt	r0, #2
   115c0:	ldr	r2, [r0]
   115c4:	mov	r0, r5
   115c8:	bl	10dcc <fprintf@plt>
   115cc:	mov	r0, r4
   115d0:	bl	10da8 <exit@plt>
   115d4:	push	{fp, lr}
   115d8:	mov	fp, sp
   115dc:	bl	10dd8 <__errno_location@plt>
   115e0:	movw	r1, #19195	; 0x4afb
   115e4:	ldr	r4, [r0]
   115e8:	mov	r0, #0
   115ec:	mov	r2, #5
   115f0:	movt	r1, #1
   115f4:	bl	10cf4 <dcgettext@plt>
   115f8:	mov	r2, r0
   115fc:	mov	r0, #1
   11600:	mov	r1, r4
   11604:	bl	10d54 <error@plt>
   11608:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1160c:	add	fp, sp, #24
   11610:	sub	sp, sp, #16
   11614:	mov	r8, r0
   11618:	movw	r0, #24864	; 0x6120
   1161c:	movt	r0, #2
   11620:	ldr	r0, [r0]
   11624:	bl	14498 <__assert_fail@plt+0x360c>
   11628:	movw	r0, #24876	; 0x612c
   1162c:	movw	r1, #19374	; 0x4bae
   11630:	mov	r2, #5
   11634:	mov	r9, #0
   11638:	movt	r0, #2
   1163c:	movt	r1, #1
   11640:	ldr	r6, [r0]
   11644:	movw	r0, #24776	; 0x60c8
   11648:	movt	r0, #2
   1164c:	ldr	r5, [r0]
   11650:	mov	r0, #0
   11654:	bl	10cf4 <dcgettext@plt>
   11658:	movw	r1, #19389	; 0x4bbd
   1165c:	mov	r7, r0
   11660:	mov	r0, #0
   11664:	mov	r2, #5
   11668:	movt	r1, #1
   1166c:	bl	10cf4 <dcgettext@plt>
   11670:	movw	r1, #19404	; 0x4bcc
   11674:	mov	r4, r0
   11678:	mov	r0, #0
   1167c:	mov	r2, #5
   11680:	movt	r1, #1
   11684:	bl	10cf4 <dcgettext@plt>
   11688:	movw	r2, #19360	; 0x4ba0
   1168c:	str	r0, [sp, #8]
   11690:	mov	r0, r6
   11694:	mov	r1, r8
   11698:	mov	r3, r5
   1169c:	str	r7, [sp]
   116a0:	str	r4, [sp, #4]
   116a4:	str	r9, [sp, #12]
   116a8:	movt	r2, #1
   116ac:	bl	13cac <__assert_fail@plt+0x2e20>
   116b0:	sub	sp, fp, #24
   116b4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   116b8:	push	{r4, r5, fp, lr}
   116bc:	add	fp, sp, #8
   116c0:	sub	sp, sp, #16
   116c4:	mov	r4, r1
   116c8:	movw	r1, #19417	; 0x4bd9
   116cc:	mov	r5, r0
   116d0:	mov	r0, #0
   116d4:	mov	r2, #5
   116d8:	movt	r1, #1
   116dc:	bl	10cf4 <dcgettext@plt>
   116e0:	movw	r2, #19662	; 0x4cce
   116e4:	movw	r3, #19360	; 0x4ba0
   116e8:	mov	r1, r0
   116ec:	movw	r0, #19709	; 0x4cfd
   116f0:	movt	r2, #1
   116f4:	movt	r0, #1
   116f8:	movt	r3, #1
   116fc:	str	r2, [sp, #4]
   11700:	movw	r2, #19623	; 0x4ca7
   11704:	str	r3, [sp]
   11708:	str	r0, [sp, #8]
   1170c:	mov	r0, r5
   11710:	mov	r3, r4
   11714:	movt	r2, #1
   11718:	bl	10dcc <fprintf@plt>
   1171c:	sub	sp, fp, #8
   11720:	pop	{r4, r5, fp, pc}
   11724:	movw	r1, #24888	; 0x6138
   11728:	movt	r1, #2
   1172c:	str	r0, [r1, #4]
   11730:	bx	lr
   11734:	movw	r1, #24888	; 0x6138
   11738:	movt	r1, #2
   1173c:	strb	r0, [r1]
   11740:	bx	lr
   11744:	push	{r4, r5, r6, sl, fp, lr}
   11748:	add	fp, sp, #16
   1174c:	sub	sp, sp, #8
   11750:	movw	r0, #24876	; 0x612c
   11754:	movt	r0, #2
   11758:	ldr	r0, [r0]
   1175c:	bl	146e8 <__assert_fail@plt+0x385c>
   11760:	cmp	r0, #0
   11764:	beq	1178c <__assert_fail@plt+0x900>
   11768:	movw	r5, #24888	; 0x6138
   1176c:	movt	r5, #2
   11770:	ldrb	r0, [r5]
   11774:	cmp	r0, #0
   11778:	beq	117b8 <__assert_fail@plt+0x92c>
   1177c:	bl	10dd8 <__errno_location@plt>
   11780:	ldr	r0, [r0]
   11784:	cmp	r0, #32
   11788:	bne	117b8 <__assert_fail@plt+0x92c>
   1178c:	movw	r0, #24864	; 0x6120
   11790:	movt	r0, #2
   11794:	ldr	r0, [r0]
   11798:	bl	146e8 <__assert_fail@plt+0x385c>
   1179c:	cmp	r0, #0
   117a0:	subeq	sp, fp, #16
   117a4:	popeq	{r4, r5, r6, sl, fp, pc}
   117a8:	movw	r0, #24780	; 0x60cc
   117ac:	movt	r0, #2
   117b0:	ldr	r0, [r0]
   117b4:	bl	10cd0 <_exit@plt>
   117b8:	movw	r1, #19195	; 0x4afb
   117bc:	mov	r0, #0
   117c0:	mov	r2, #5
   117c4:	movt	r1, #1
   117c8:	bl	10cf4 <dcgettext@plt>
   117cc:	ldr	r6, [r5, #4]
   117d0:	mov	r4, r0
   117d4:	bl	10dd8 <__errno_location@plt>
   117d8:	ldr	r5, [r0]
   117dc:	cmp	r6, #0
   117e0:	bne	117fc <__assert_fail@plt+0x970>
   117e4:	movw	r2, #19735	; 0x4d17
   117e8:	mov	r0, #0
   117ec:	mov	r1, r5
   117f0:	mov	r3, r4
   117f4:	movt	r2, #1
   117f8:	b	1181c <__assert_fail@plt+0x990>
   117fc:	mov	r0, r6
   11800:	bl	1346c <__assert_fail@plt+0x25e0>
   11804:	movw	r2, #19731	; 0x4d13
   11808:	mov	r3, r0
   1180c:	str	r4, [sp]
   11810:	mov	r0, #0
   11814:	mov	r1, r5
   11818:	movt	r2, #1
   1181c:	bl	10d54 <error@plt>
   11820:	movw	r0, #24780	; 0x60cc
   11824:	movt	r0, #2
   11828:	ldr	r0, [r0]
   1182c:	bl	10cd0 <_exit@plt>
   11830:	push	{r4, r5, fp, lr}
   11834:	add	fp, sp, #8
   11838:	cmp	r0, #0
   1183c:	beq	118d0 <__assert_fail@plt+0xa44>
   11840:	mov	r1, #47	; 0x2f
   11844:	mov	r4, r0
   11848:	bl	10e2c <strrchr@plt>
   1184c:	cmp	r0, #0
   11850:	mov	r5, r4
   11854:	addne	r5, r0, #1
   11858:	sub	r0, r5, r4
   1185c:	cmp	r0, #7
   11860:	blt	118b4 <__assert_fail@plt+0xa28>
   11864:	movw	r1, #19794	; 0x4d52
   11868:	sub	r0, r5, #7
   1186c:	mov	r2, #7
   11870:	movt	r1, #1
   11874:	bl	10e74 <strncmp@plt>
   11878:	cmp	r0, #0
   1187c:	bne	118b4 <__assert_fail@plt+0xa28>
   11880:	movw	r1, #19802	; 0x4d5a
   11884:	mov	r0, r5
   11888:	mov	r2, #3
   1188c:	movt	r1, #1
   11890:	bl	10e74 <strncmp@plt>
   11894:	cmp	r0, #0
   11898:	beq	118a4 <__assert_fail@plt+0xa18>
   1189c:	mov	r4, r5
   118a0:	b	118b4 <__assert_fail@plt+0xa28>
   118a4:	movw	r0, #24848	; 0x6110
   118a8:	add	r4, r5, #3
   118ac:	movt	r0, #2
   118b0:	str	r4, [r0]
   118b4:	movw	r0, #24852	; 0x6114
   118b8:	movt	r0, #2
   118bc:	str	r4, [r0]
   118c0:	movw	r0, #24896	; 0x6140
   118c4:	movt	r0, #2
   118c8:	str	r4, [r0]
   118cc:	pop	{r4, r5, fp, pc}
   118d0:	movw	r0, #24864	; 0x6120
   118d4:	mov	r1, #55	; 0x37
   118d8:	mov	r2, #1
   118dc:	movt	r0, #2
   118e0:	ldr	r3, [r0]
   118e4:	movw	r0, #19738	; 0x4d1a
   118e8:	movt	r0, #1
   118ec:	bl	10d18 <fwrite@plt>
   118f0:	bl	10e80 <abort@plt>
   118f4:	push	{r4, r5, r6, sl, fp, lr}
   118f8:	add	fp, sp, #16
   118fc:	mov	r4, r0
   11900:	movw	r0, #24904	; 0x6148
   11904:	movt	r0, #2
   11908:	cmp	r4, #0
   1190c:	moveq	r4, r0
   11910:	bl	10dd8 <__errno_location@plt>
   11914:	ldr	r6, [r0]
   11918:	mov	r5, r0
   1191c:	mov	r0, r4
   11920:	mov	r1, #48	; 0x30
   11924:	bl	14324 <__assert_fail@plt+0x3498>
   11928:	str	r6, [r5]
   1192c:	pop	{r4, r5, r6, sl, fp, pc}
   11930:	movw	r1, #24904	; 0x6148
   11934:	cmp	r0, #0
   11938:	movt	r1, #2
   1193c:	movne	r1, r0
   11940:	ldr	r0, [r1]
   11944:	bx	lr
   11948:	movw	r2, #24904	; 0x6148
   1194c:	cmp	r0, #0
   11950:	movt	r2, #2
   11954:	movne	r2, r0
   11958:	str	r1, [r2]
   1195c:	bx	lr
   11960:	movw	r3, #24904	; 0x6148
   11964:	cmp	r0, #0
   11968:	and	r2, r2, #1
   1196c:	movt	r3, #2
   11970:	movne	r3, r0
   11974:	ubfx	r0, r1, #5, #3
   11978:	and	r1, r1, #31
   1197c:	add	ip, r3, r0, lsl #2
   11980:	mov	r0, #1
   11984:	ldr	r3, [ip, #8]
   11988:	and	r0, r0, r3, lsr r1
   1198c:	eor	r2, r0, r2
   11990:	eor	r1, r3, r2, lsl r1
   11994:	str	r1, [ip, #8]
   11998:	bx	lr
   1199c:	movw	r2, #24904	; 0x6148
   119a0:	cmp	r0, #0
   119a4:	movt	r2, #2
   119a8:	movne	r2, r0
   119ac:	ldr	r0, [r2, #4]
   119b0:	str	r1, [r2, #4]
   119b4:	bx	lr
   119b8:	push	{fp, lr}
   119bc:	mov	fp, sp
   119c0:	movw	r3, #24904	; 0x6148
   119c4:	cmp	r0, #0
   119c8:	movt	r3, #2
   119cc:	movne	r3, r0
   119d0:	cmp	r1, #0
   119d4:	mov	r0, #10
   119d8:	cmpne	r2, #0
   119dc:	str	r0, [r3]
   119e0:	bne	119e8 <__assert_fail@plt+0xb5c>
   119e4:	bl	10e80 <abort@plt>
   119e8:	str	r1, [r3, #40]	; 0x28
   119ec:	str	r2, [r3, #44]	; 0x2c
   119f0:	pop	{fp, pc}
   119f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119f8:	add	fp, sp, #28
   119fc:	sub	sp, sp, #20
   11a00:	mov	r7, r0
   11a04:	ldr	r0, [fp, #8]
   11a08:	movw	r5, #24904	; 0x6148
   11a0c:	mov	r8, r3
   11a10:	mov	r9, r2
   11a14:	mov	sl, r1
   11a18:	movt	r5, #2
   11a1c:	cmp	r0, #0
   11a20:	movne	r5, r0
   11a24:	bl	10dd8 <__errno_location@plt>
   11a28:	ldr	r2, [r5, #40]	; 0x28
   11a2c:	ldr	r3, [r5, #44]	; 0x2c
   11a30:	mov	r4, r0
   11a34:	ldm	r5, {r0, r1}
   11a38:	add	r5, r5, #8
   11a3c:	ldr	r6, [r4]
   11a40:	stm	sp, {r0, r1, r5}
   11a44:	mov	r0, r7
   11a48:	mov	r1, sl
   11a4c:	str	r2, [sp, #12]
   11a50:	str	r3, [sp, #16]
   11a54:	mov	r2, r9
   11a58:	mov	r3, r8
   11a5c:	bl	11a6c <__assert_fail@plt+0xbe0>
   11a60:	str	r6, [r4]
   11a64:	sub	sp, fp, #28
   11a68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a70:	add	fp, sp, #28
   11a74:	sub	sp, sp, #156	; 0x9c
   11a78:	str	r0, [fp, #-84]	; 0xffffffac
   11a7c:	add	r0, r2, #1
   11a80:	mov	r6, r1
   11a84:	mov	r7, r3
   11a88:	str	r2, [fp, #-80]	; 0xffffffb0
   11a8c:	str	r0, [sp, #80]	; 0x50
   11a90:	ldr	r0, [fp, #12]
   11a94:	and	r1, r0, #1
   11a98:	str	r1, [sp, #36]	; 0x24
   11a9c:	and	r1, r0, #4
   11aa0:	str	r1, [sp, #32]
   11aa4:	ubfx	r8, r0, #1, #1
   11aa8:	bl	10d30 <__ctype_get_mb_cur_max@plt>
   11aac:	str	r0, [sp, #40]	; 0x28
   11ab0:	ldr	r0, [fp, #24]
   11ab4:	ldr	r4, [fp, #8]
   11ab8:	mov	r1, #0
   11abc:	str	r1, [fp, #-52]	; 0xffffffcc
   11ac0:	mov	r1, #0
   11ac4:	str	r1, [sp, #60]	; 0x3c
   11ac8:	mov	r1, #1
   11acc:	str	r1, [sp, #84]	; 0x54
   11ad0:	str	r0, [sp, #76]	; 0x4c
   11ad4:	ldr	r0, [fp, #20]
   11ad8:	str	r0, [sp, #72]	; 0x48
   11adc:	mov	r0, #0
   11ae0:	str	r0, [sp, #56]	; 0x38
   11ae4:	mov	r0, #0
   11ae8:	str	r0, [fp, #-88]	; 0xffffffa8
   11aec:	mov	r0, #0
   11af0:	str	r0, [fp, #-72]	; 0xffffffb8
   11af4:	mov	r0, #0
   11af8:	cmp	r4, #10
   11afc:	bhi	12e18 <__assert_fail@plt+0x1f8c>
   11b00:	add	r1, pc, #24
   11b04:	ldr	ip, [fp, #-84]	; 0xffffffac
   11b08:	ldr	lr, [fp, #-80]	; 0xffffffb0
   11b0c:	mov	r5, r6
   11b10:	mov	r9, #0
   11b14:	mov	r2, #1
   11b18:	mov	r3, #0
   11b1c:	ldr	pc, [r1, r4, lsl #2]
   11b20:	andeq	r1, r1, r8, ror #23
   11b24:	andeq	r1, r1, r4, lsr #24
   11b28:	strdeq	r1, [r1], -r8
   11b2c:	andeq	r1, r1, r0, ror #23
   11b30:	andeq	r1, r1, r8, lsl ip
   11b34:	andeq	r1, r1, ip, ror ip
   11b38:	andeq	r1, r1, r8, lsl #24
   11b3c:	strdeq	r1, [r1], -r4
   11b40:	andeq	r1, r1, ip, asr #22
   11b44:	andeq	r1, r1, ip, asr #22
   11b48:	andeq	r1, r1, r4, lsl #27
   11b4c:	movw	r6, #19884	; 0x4dac
   11b50:	mov	r0, #0
   11b54:	mov	r2, #5
   11b58:	movt	r6, #1
   11b5c:	mov	r1, r6
   11b60:	bl	10cf4 <dcgettext@plt>
   11b64:	cmp	r0, r6
   11b68:	str	r0, [sp, #72]	; 0x48
   11b6c:	bne	11d5c <__assert_fail@plt+0xed0>
   11b70:	bl	147d8 <__assert_fail@plt+0x394c>
   11b74:	ldrb	r1, [r0]
   11b78:	and	r1, r1, #223	; 0xdf
   11b7c:	cmp	r1, #71	; 0x47
   11b80:	beq	11cdc <__assert_fail@plt+0xe50>
   11b84:	cmp	r1, #85	; 0x55
   11b88:	bne	11d40 <__assert_fail@plt+0xeb4>
   11b8c:	ldrb	r1, [r0, #1]
   11b90:	and	r1, r1, #223	; 0xdf
   11b94:	cmp	r1, #84	; 0x54
   11b98:	bne	11d40 <__assert_fail@plt+0xeb4>
   11b9c:	ldrb	r1, [r0, #2]
   11ba0:	and	r1, r1, #223	; 0xdf
   11ba4:	cmp	r1, #70	; 0x46
   11ba8:	bne	11d40 <__assert_fail@plt+0xeb4>
   11bac:	ldrb	r1, [r0, #3]
   11bb0:	cmp	r1, #45	; 0x2d
   11bb4:	bne	11d40 <__assert_fail@plt+0xeb4>
   11bb8:	ldrb	r1, [r0, #4]
   11bbc:	cmp	r1, #56	; 0x38
   11bc0:	bne	11d40 <__assert_fail@plt+0xeb4>
   11bc4:	ldrb	r0, [r0, #5]
   11bc8:	cmp	r0, #0
   11bcc:	movw	r0, #19888	; 0x4db0
   11bd0:	movt	r0, #1
   11bd4:	str	r0, [sp, #72]	; 0x48
   11bd8:	bne	11d40 <__assert_fail@plt+0xeb4>
   11bdc:	b	11d5c <__assert_fail@plt+0xed0>
   11be0:	mov	r0, #1
   11be4:	b	11c24 <__assert_fail@plt+0xd98>
   11be8:	mov	r4, #0
   11bec:	mov	r9, #0
   11bf0:	mov	r2, r0
   11bf4:	b	11c74 <__assert_fail@plt+0xde8>
   11bf8:	tst	r8, #1
   11bfc:	bne	11c24 <__assert_fail@plt+0xd98>
   11c00:	mov	r2, r0
   11c04:	b	11c4c <__assert_fail@plt+0xdc0>
   11c08:	mov	r0, #1
   11c0c:	mov	r9, #0
   11c10:	mov	r4, #5
   11c14:	b	11c90 <__assert_fail@plt+0xe04>
   11c18:	mov	r2, #1
   11c1c:	tst	r8, #1
   11c20:	beq	11c4c <__assert_fail@plt+0xdc0>
   11c24:	mov	r1, #1
   11c28:	mov	r9, #0
   11c2c:	mov	r4, #2
   11c30:	mov	r2, r0
   11c34:	mov	r3, #1
   11c38:	str	r1, [fp, #-72]	; 0xffffffb8
   11c3c:	movw	r1, #19886	; 0x4dae
   11c40:	movt	r1, #1
   11c44:	str	r1, [fp, #-88]	; 0xffffffa8
   11c48:	b	11ef4 <__assert_fail@plt+0x1068>
   11c4c:	cmp	r5, #0
   11c50:	mov	r9, #1
   11c54:	mov	r4, #2
   11c58:	movne	r0, #39	; 0x27
   11c5c:	strbne	r0, [ip]
   11c60:	movw	r0, #19886	; 0x4dae
   11c64:	movt	r0, #1
   11c68:	str	r0, [fp, #-88]	; 0xffffffa8
   11c6c:	mov	r0, #1
   11c70:	str	r0, [fp, #-72]	; 0xffffffb8
   11c74:	mov	r3, #0
   11c78:	b	11ef4 <__assert_fail@plt+0x1068>
   11c7c:	mov	r4, #5
   11c80:	tst	r8, #1
   11c84:	beq	11cac <__assert_fail@plt+0xe20>
   11c88:	mov	r0, #1
   11c8c:	mov	r9, #0
   11c90:	str	r0, [fp, #-72]	; 0xffffffb8
   11c94:	movw	r0, #19882	; 0x4daa
   11c98:	mov	r2, #1
   11c9c:	mov	r3, #1
   11ca0:	movt	r0, #1
   11ca4:	str	r0, [fp, #-88]	; 0xffffffa8
   11ca8:	b	11ef4 <__assert_fail@plt+0x1068>
   11cac:	cmp	r5, #0
   11cb0:	mov	r3, #0
   11cb4:	mov	r9, #1
   11cb8:	mov	r2, #1
   11cbc:	movne	r0, #34	; 0x22
   11cc0:	strbne	r0, [ip]
   11cc4:	movw	r0, #19882	; 0x4daa
   11cc8:	movt	r0, #1
   11ccc:	str	r0, [fp, #-88]	; 0xffffffa8
   11cd0:	mov	r0, #1
   11cd4:	str	r0, [fp, #-72]	; 0xffffffb8
   11cd8:	b	11ef4 <__assert_fail@plt+0x1068>
   11cdc:	ldrb	r1, [r0, #1]
   11ce0:	and	r1, r1, #223	; 0xdf
   11ce4:	cmp	r1, #66	; 0x42
   11ce8:	bne	11d40 <__assert_fail@plt+0xeb4>
   11cec:	ldrb	r1, [r0, #2]
   11cf0:	cmp	r1, #49	; 0x31
   11cf4:	bne	11d40 <__assert_fail@plt+0xeb4>
   11cf8:	ldrb	r1, [r0, #3]
   11cfc:	cmp	r1, #56	; 0x38
   11d00:	bne	11d40 <__assert_fail@plt+0xeb4>
   11d04:	ldrb	r1, [r0, #4]
   11d08:	cmp	r1, #48	; 0x30
   11d0c:	bne	11d40 <__assert_fail@plt+0xeb4>
   11d10:	ldrb	r1, [r0, #5]
   11d14:	cmp	r1, #51	; 0x33
   11d18:	bne	11d40 <__assert_fail@plt+0xeb4>
   11d1c:	ldrb	r1, [r0, #6]
   11d20:	cmp	r1, #48	; 0x30
   11d24:	bne	11d40 <__assert_fail@plt+0xeb4>
   11d28:	ldrb	r0, [r0, #7]
   11d2c:	cmp	r0, #0
   11d30:	movw	r0, #19896	; 0x4db8
   11d34:	movt	r0, #1
   11d38:	str	r0, [sp, #72]	; 0x48
   11d3c:	beq	11d5c <__assert_fail@plt+0xed0>
   11d40:	movw	r1, #19882	; 0x4daa
   11d44:	movw	r0, #19886	; 0x4dae
   11d48:	cmp	r4, #9
   11d4c:	movt	r1, #1
   11d50:	movt	r0, #1
   11d54:	moveq	r0, r1
   11d58:	str	r0, [sp, #72]	; 0x48
   11d5c:	movw	r6, #19886	; 0x4dae
   11d60:	mov	r0, #0
   11d64:	mov	r2, #5
   11d68:	movt	r6, #1
   11d6c:	mov	r1, r6
   11d70:	bl	10cf4 <dcgettext@plt>
   11d74:	cmp	r0, r6
   11d78:	str	r0, [sp, #76]	; 0x4c
   11d7c:	beq	11dc8 <__assert_fail@plt+0xf3c>
   11d80:	ldr	ip, [fp, #-84]	; 0xffffffac
   11d84:	mov	r9, #0
   11d88:	tst	r8, #1
   11d8c:	bne	11ed0 <__assert_fail@plt+0x1044>
   11d90:	ldr	r0, [sp, #72]	; 0x48
   11d94:	ldrb	r0, [r0]
   11d98:	cmp	r0, #0
   11d9c:	beq	11ed0 <__assert_fail@plt+0x1044>
   11da0:	ldr	r1, [sp, #72]	; 0x48
   11da4:	mov	r9, #0
   11da8:	add	r1, r1, #1
   11dac:	cmp	r9, r5
   11db0:	strbcc	r0, [ip, r9]
   11db4:	ldrb	r0, [r1, r9]
   11db8:	add	r9, r9, #1
   11dbc:	cmp	r0, #0
   11dc0:	bne	11dac <__assert_fail@plt+0xf20>
   11dc4:	b	11ed0 <__assert_fail@plt+0x1044>
   11dc8:	bl	147d8 <__assert_fail@plt+0x394c>
   11dcc:	ldrb	r1, [r0]
   11dd0:	and	r1, r1, #223	; 0xdf
   11dd4:	cmp	r1, #71	; 0x47
   11dd8:	beq	11e48 <__assert_fail@plt+0xfbc>
   11ddc:	ldr	ip, [fp, #-84]	; 0xffffffac
   11de0:	cmp	r1, #85	; 0x55
   11de4:	bne	11ea4 <__assert_fail@plt+0x1018>
   11de8:	ldrb	r1, [r0, #1]
   11dec:	and	r1, r1, #223	; 0xdf
   11df0:	cmp	r1, #84	; 0x54
   11df4:	bne	11ea4 <__assert_fail@plt+0x1018>
   11df8:	ldrb	r1, [r0, #2]
   11dfc:	and	r1, r1, #223	; 0xdf
   11e00:	cmp	r1, #70	; 0x46
   11e04:	bne	11ea4 <__assert_fail@plt+0x1018>
   11e08:	ldrb	r1, [r0, #3]
   11e0c:	cmp	r1, #45	; 0x2d
   11e10:	bne	11ea4 <__assert_fail@plt+0x1018>
   11e14:	ldrb	r1, [r0, #4]
   11e18:	cmp	r1, #56	; 0x38
   11e1c:	bne	11ea4 <__assert_fail@plt+0x1018>
   11e20:	ldrb	r0, [r0, #5]
   11e24:	cmp	r0, #0
   11e28:	bne	11ea4 <__assert_fail@plt+0x1018>
   11e2c:	movw	r0, #19892	; 0x4db4
   11e30:	movt	r0, #1
   11e34:	str	r0, [sp, #76]	; 0x4c
   11e38:	mov	r9, #0
   11e3c:	tst	r8, #1
   11e40:	beq	11d90 <__assert_fail@plt+0xf04>
   11e44:	b	11ed0 <__assert_fail@plt+0x1044>
   11e48:	ldrb	r1, [r0, #1]
   11e4c:	ldr	ip, [fp, #-84]	; 0xffffffac
   11e50:	and	r1, r1, #223	; 0xdf
   11e54:	cmp	r1, #66	; 0x42
   11e58:	bne	11ea4 <__assert_fail@plt+0x1018>
   11e5c:	ldrb	r1, [r0, #2]
   11e60:	cmp	r1, #49	; 0x31
   11e64:	bne	11ea4 <__assert_fail@plt+0x1018>
   11e68:	ldrb	r1, [r0, #3]
   11e6c:	cmp	r1, #56	; 0x38
   11e70:	bne	11ea4 <__assert_fail@plt+0x1018>
   11e74:	ldrb	r1, [r0, #4]
   11e78:	cmp	r1, #48	; 0x30
   11e7c:	bne	11ea4 <__assert_fail@plt+0x1018>
   11e80:	ldrb	r1, [r0, #5]
   11e84:	cmp	r1, #51	; 0x33
   11e88:	bne	11ea4 <__assert_fail@plt+0x1018>
   11e8c:	ldrb	r1, [r0, #6]
   11e90:	cmp	r1, #48	; 0x30
   11e94:	bne	11ea4 <__assert_fail@plt+0x1018>
   11e98:	ldrb	r0, [r0, #7]
   11e9c:	cmp	r0, #0
   11ea0:	beq	12cb8 <__assert_fail@plt+0x1e2c>
   11ea4:	movw	r0, #19886	; 0x4dae
   11ea8:	cmp	r4, #9
   11eac:	movt	r0, #1
   11eb0:	mov	r1, r0
   11eb4:	movw	r0, #19882	; 0x4daa
   11eb8:	movt	r0, #1
   11ebc:	moveq	r1, r0
   11ec0:	str	r1, [sp, #76]	; 0x4c
   11ec4:	mov	r9, #0
   11ec8:	tst	r8, #1
   11ecc:	beq	11d90 <__assert_fail@plt+0xf04>
   11ed0:	ldr	r6, [sp, #76]	; 0x4c
   11ed4:	mov	r0, r6
   11ed8:	bl	10dc0 <strlen@plt>
   11edc:	ldr	ip, [fp, #-84]	; 0xffffffac
   11ee0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   11ee4:	str	r0, [fp, #-72]	; 0xffffffb8
   11ee8:	str	r6, [fp, #-88]	; 0xffffffa8
   11eec:	mov	r2, #1
   11ef0:	mov	r3, r8
   11ef4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11ef8:	str	r4, [fp, #-64]	; 0xffffffc0
   11efc:	mov	sl, #0
   11f00:	str	r3, [fp, #-76]	; 0xffffffb4
   11f04:	str	r2, [sp, #88]	; 0x58
   11f08:	cmp	r0, #0
   11f0c:	movwne	r0, #1
   11f10:	and	r1, r0, r3
   11f14:	and	r1, r2, r1
   11f18:	str	r1, [sp, #48]	; 0x30
   11f1c:	sub	r1, r4, #2
   11f20:	clz	r1, r1
   11f24:	lsr	r1, r1, #5
   11f28:	and	r1, r1, r3
   11f2c:	str	r1, [sp, #44]	; 0x2c
   11f30:	subs	r1, r4, #2
   11f34:	eor	r4, r3, #1
   11f38:	movwne	r1, #1
   11f3c:	str	r4, [sp, #92]	; 0x5c
   11f40:	orr	r4, r1, r4
   11f44:	and	r1, r1, r2
   11f48:	and	r0, r0, r1
   11f4c:	str	r4, [sp, #64]	; 0x40
   11f50:	ldr	r4, [sp, #84]	; 0x54
   11f54:	str	r0, [fp, #-60]	; 0xffffffc4
   11f58:	orr	r0, r1, r3
   11f5c:	ldr	r1, [fp, #16]
   11f60:	eor	r0, r0, #1
   11f64:	clz	r1, r1
   11f68:	lsr	r1, r1, #5
   11f6c:	orr	r0, r1, r0
   11f70:	str	r0, [fp, #-68]	; 0xffffffbc
   11f74:	eor	r0, r2, #1
   11f78:	str	r0, [sp, #52]	; 0x34
   11f7c:	cmn	r7, #1
   11f80:	beq	11f90 <__assert_fail@plt+0x1104>
   11f84:	cmp	sl, r7
   11f88:	bne	11f9c <__assert_fail@plt+0x1110>
   11f8c:	b	12c30 <__assert_fail@plt+0x1da4>
   11f90:	ldrb	r0, [lr, sl]
   11f94:	cmp	r0, #0
   11f98:	beq	12c38 <__assert_fail@plt+0x1dac>
   11f9c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11fa0:	cmp	r0, #0
   11fa4:	beq	12004 <__assert_fail@plt+0x1178>
   11fa8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   11fac:	mov	r6, r5
   11fb0:	add	r5, sl, r0
   11fb4:	cmp	r0, #2
   11fb8:	bcc	12024 <__assert_fail@plt+0x1198>
   11fbc:	mov	r0, #0
   11fc0:	cmn	r7, #1
   11fc4:	str	r0, [fp, #-56]	; 0xffffffc8
   11fc8:	bne	11fe0 <__assert_fail@plt+0x1154>
   11fcc:	mov	r0, lr
   11fd0:	bl	10dc0 <strlen@plt>
   11fd4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   11fd8:	ldr	ip, [fp, #-84]	; 0xffffffac
   11fdc:	mov	r7, r0
   11fe0:	cmp	r5, r7
   11fe4:	bls	12034 <__assert_fail@plt+0x11a8>
   11fe8:	mov	r0, #0
   11fec:	mov	r5, r6
   11ff0:	str	r0, [fp, #-48]	; 0xffffffd0
   11ff4:	ldrb	r6, [lr, sl]
   11ff8:	cmp	r6, #126	; 0x7e
   11ffc:	bls	12084 <__assert_fail@plt+0x11f8>
   12000:	b	125e0 <__assert_fail@plt+0x1754>
   12004:	mov	r0, #0
   12008:	str	r0, [fp, #-56]	; 0xffffffc8
   1200c:	mov	r0, #0
   12010:	str	r0, [fp, #-48]	; 0xffffffd0
   12014:	ldrb	r6, [lr, sl]
   12018:	cmp	r6, #126	; 0x7e
   1201c:	bls	12084 <__assert_fail@plt+0x11f8>
   12020:	b	125e0 <__assert_fail@plt+0x1754>
   12024:	mov	r0, #0
   12028:	str	r0, [fp, #-56]	; 0xffffffc8
   1202c:	cmp	r5, r7
   12030:	bhi	11fe8 <__assert_fail@plt+0x115c>
   12034:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12038:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1203c:	add	r0, lr, sl
   12040:	bl	10db4 <bcmp@plt>
   12044:	ldr	r2, [sp, #92]	; 0x5c
   12048:	cmp	r0, #0
   1204c:	mov	r1, r0
   12050:	mov	r5, r6
   12054:	movwne	r1, #1
   12058:	orr	r1, r1, r2
   1205c:	tst	r1, #1
   12060:	beq	12cf8 <__assert_fail@plt+0x1e6c>
   12064:	ldr	ip, [fp, #-84]	; 0xffffffac
   12068:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1206c:	clz	r0, r0
   12070:	lsr	r0, r0, #5
   12074:	str	r0, [fp, #-48]	; 0xffffffd0
   12078:	ldrb	r6, [lr, sl]
   1207c:	cmp	r6, #126	; 0x7e
   12080:	bhi	125e0 <__assert_fail@plt+0x1754>
   12084:	add	r3, pc, #16
   12088:	mov	r8, #1
   1208c:	mov	r2, #110	; 0x6e
   12090:	mov	r0, #97	; 0x61
   12094:	mov	r1, #0
   12098:	ldr	pc, [r3, r6, lsl #2]
   1209c:	muleq	r1, r8, r3
   120a0:	andeq	r2, r1, r0, ror #11
   120a4:	andeq	r2, r1, r0, ror #11
   120a8:	andeq	r2, r1, r0, ror #11
   120ac:	andeq	r2, r1, r0, ror #11
   120b0:	andeq	r2, r1, r0, ror #11
   120b4:	andeq	r2, r1, r0, ror #11
   120b8:	muleq	r1, r4, r6
   120bc:	andeq	r2, r1, r8, ror r3
   120c0:	andeq	r2, r1, r0, ror r3
   120c4:	andeq	r2, r1, r4, lsl #7
   120c8:			; <UNDEFINED> instruction: 0x000124b4
   120cc:	andeq	r2, r1, r8, ror #6
   120d0:	andeq	r2, r1, r0, lsl #7
   120d4:	andeq	r2, r1, r0, ror #11
   120d8:	andeq	r2, r1, r0, ror #11
   120dc:	andeq	r2, r1, r0, ror #11
   120e0:	andeq	r2, r1, r0, ror #11
   120e4:	andeq	r2, r1, r0, ror #11
   120e8:	andeq	r2, r1, r0, ror #11
   120ec:	andeq	r2, r1, r0, ror #11
   120f0:	andeq	r2, r1, r0, ror #11
   120f4:	andeq	r2, r1, r0, ror #11
   120f8:	andeq	r2, r1, r0, ror #11
   120fc:	andeq	r2, r1, r0, ror #11
   12100:	andeq	r2, r1, r0, ror #11
   12104:	andeq	r2, r1, r0, ror #11
   12108:	andeq	r2, r1, r0, ror #11
   1210c:	andeq	r2, r1, r0, ror #11
   12110:	andeq	r2, r1, r0, ror #11
   12114:	andeq	r2, r1, r0, ror #11
   12118:	andeq	r2, r1, r0, ror #11
   1211c:	andeq	r2, r1, ip, lsl #6
   12120:	andeq	r2, r1, r0, lsl r3
   12124:	andeq	r2, r1, r0, lsl r3
   12128:	andeq	r2, r1, r0, lsl #6
   1212c:	andeq	r2, r1, r0, lsl r3
   12130:	muleq	r1, r8, r2
   12134:	andeq	r2, r1, r0, lsl r3
   12138:			; <UNDEFINED> instruction: 0x000124bc
   1213c:	andeq	r2, r1, r0, lsl r3
   12140:	andeq	r2, r1, r0, lsl r3
   12144:	andeq	r2, r1, r0, lsl r3
   12148:	muleq	r1, r8, r2
   1214c:	muleq	r1, r8, r2
   12150:	muleq	r1, r8, r2
   12154:	muleq	r1, r8, r2
   12158:	muleq	r1, r8, r2
   1215c:	muleq	r1, r8, r2
   12160:	muleq	r1, r8, r2
   12164:	muleq	r1, r8, r2
   12168:	muleq	r1, r8, r2
   1216c:	muleq	r1, r8, r2
   12170:	muleq	r1, r8, r2
   12174:	muleq	r1, r8, r2
   12178:	muleq	r1, r8, r2
   1217c:	muleq	r1, r8, r2
   12180:	muleq	r1, r8, r2
   12184:	muleq	r1, r8, r2
   12188:	andeq	r2, r1, r0, lsl r3
   1218c:	andeq	r2, r1, r0, lsl r3
   12190:	andeq	r2, r1, r0, lsl r3
   12194:	andeq	r2, r1, r0, lsl r3
   12198:	andeq	r2, r1, r0, lsl #9
   1219c:	andeq	r2, r1, r0, ror #11
   121a0:	muleq	r1, r8, r2
   121a4:	muleq	r1, r8, r2
   121a8:	muleq	r1, r8, r2
   121ac:	muleq	r1, r8, r2
   121b0:	muleq	r1, r8, r2
   121b4:	muleq	r1, r8, r2
   121b8:	muleq	r1, r8, r2
   121bc:	muleq	r1, r8, r2
   121c0:	muleq	r1, r8, r2
   121c4:	muleq	r1, r8, r2
   121c8:	muleq	r1, r8, r2
   121cc:	muleq	r1, r8, r2
   121d0:	muleq	r1, r8, r2
   121d4:	muleq	r1, r8, r2
   121d8:	muleq	r1, r8, r2
   121dc:	muleq	r1, r8, r2
   121e0:	muleq	r1, r8, r2
   121e4:	muleq	r1, r8, r2
   121e8:	muleq	r1, r8, r2
   121ec:	muleq	r1, r8, r2
   121f0:	muleq	r1, r8, r2
   121f4:	muleq	r1, r8, r2
   121f8:	muleq	r1, r8, r2
   121fc:	muleq	r1, r8, r2
   12200:	muleq	r1, r8, r2
   12204:	muleq	r1, r8, r2
   12208:	andeq	r2, r1, r0, lsl r3
   1220c:	andeq	r2, r1, r4, asr #6
   12210:	muleq	r1, r8, r2
   12214:	andeq	r2, r1, r0, lsl r3
   12218:	muleq	r1, r8, r2
   1221c:	andeq	r2, r1, r0, lsl r3
   12220:	muleq	r1, r8, r2
   12224:	muleq	r1, r8, r2
   12228:	muleq	r1, r8, r2
   1222c:	muleq	r1, r8, r2
   12230:	muleq	r1, r8, r2
   12234:	muleq	r1, r8, r2
   12238:	muleq	r1, r8, r2
   1223c:	muleq	r1, r8, r2
   12240:	muleq	r1, r8, r2
   12244:	muleq	r1, r8, r2
   12248:	muleq	r1, r8, r2
   1224c:	muleq	r1, r8, r2
   12250:	muleq	r1, r8, r2
   12254:	muleq	r1, r8, r2
   12258:	muleq	r1, r8, r2
   1225c:	muleq	r1, r8, r2
   12260:	muleq	r1, r8, r2
   12264:	muleq	r1, r8, r2
   12268:	muleq	r1, r8, r2
   1226c:	muleq	r1, r8, r2
   12270:	muleq	r1, r8, r2
   12274:	muleq	r1, r8, r2
   12278:	muleq	r1, r8, r2
   1227c:	muleq	r1, r8, r2
   12280:	muleq	r1, r8, r2
   12284:	muleq	r1, r8, r2
   12288:	ldrdeq	r2, [r1], -r8
   1228c:	andeq	r2, r1, r0, lsl r3
   12290:	ldrdeq	r2, [r1], -r8
   12294:	andeq	r2, r1, r0, lsl #6
   12298:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1229c:	tst	r0, #1
   122a0:	bne	12558 <__assert_fail@plt+0x16cc>
   122a4:	ldr	r1, [fp, #16]
   122a8:	ubfx	r0, r6, #5, #3
   122ac:	mov	r2, #1
   122b0:	ldr	r0, [r1, r0, lsl #2]
   122b4:	and	r1, r6, #31
   122b8:	tst	r0, r2, lsl r1
   122bc:	beq	12558 <__assert_fail@plt+0x16cc>
   122c0:	mov	r0, r6
   122c4:	mov	r1, r8
   122c8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   122cc:	tst	r2, #1
   122d0:	beq	12578 <__assert_fail@plt+0x16ec>
   122d4:	b	12cd4 <__assert_fail@plt+0x1e48>
   122d8:	cmp	r7, #1
   122dc:	beq	12300 <__assert_fail@plt+0x1474>
   122e0:	mov	r8, #0
   122e4:	cmn	r7, #1
   122e8:	bne	12544 <__assert_fail@plt+0x16b8>
   122ec:	ldrb	r0, [lr, #1]
   122f0:	cmp	r0, #0
   122f4:	beq	12300 <__assert_fail@plt+0x1474>
   122f8:	mvn	r7, #0
   122fc:	b	12544 <__assert_fail@plt+0x16b8>
   12300:	mov	r8, #0
   12304:	cmp	sl, #0
   12308:	bne	12544 <__assert_fail@plt+0x16b8>
   1230c:	mov	r1, #1
   12310:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12314:	cmp	r0, #2
   12318:	bne	12330 <__assert_fail@plt+0x14a4>
   1231c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12320:	mov	r8, r1
   12324:	tst	r0, #1
   12328:	beq	12298 <__assert_fail@plt+0x140c>
   1232c:	b	12cd4 <__assert_fail@plt+0x1e48>
   12330:	mov	r8, r1
   12334:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12338:	tst	r0, #1
   1233c:	beq	122a4 <__assert_fail@plt+0x1418>
   12340:	b	12558 <__assert_fail@plt+0x16cc>
   12344:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12348:	cmp	r0, #2
   1234c:	bne	1260c <__assert_fail@plt+0x1780>
   12350:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12354:	tst	r0, #1
   12358:	bne	12cd4 <__assert_fail@plt+0x1e48>
   1235c:	mov	r0, #0
   12360:	str	r0, [fp, #-56]	; 0xffffffc8
   12364:	b	12624 <__assert_fail@plt+0x1798>
   12368:	mov	r0, #102	; 0x66
   1236c:	b	12694 <__assert_fail@plt+0x1808>
   12370:	mov	r2, #116	; 0x74
   12374:	b	12384 <__assert_fail@plt+0x14f8>
   12378:	mov	r0, #98	; 0x62
   1237c:	b	12694 <__assert_fail@plt+0x1808>
   12380:	mov	r2, #114	; 0x72
   12384:	ldr	r0, [sp, #64]	; 0x40
   12388:	tst	r0, #1
   1238c:	mov	r0, r2
   12390:	bne	12694 <__assert_fail@plt+0x1808>
   12394:	b	12cd4 <__assert_fail@plt+0x1e48>
   12398:	ldr	r0, [sp, #88]	; 0x58
   1239c:	tst	r0, #1
   123a0:	beq	126b4 <__assert_fail@plt+0x1828>
   123a4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   123a8:	tst	r0, #1
   123ac:	bne	12e10 <__assert_fail@plt+0x1f84>
   123b0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   123b4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   123b8:	subs	r0, r0, #2
   123bc:	movwne	r0, #1
   123c0:	orr	r0, r0, r1
   123c4:	tst	r0, #1
   123c8:	bne	12404 <__assert_fail@plt+0x1578>
   123cc:	cmp	r9, r5
   123d0:	movcc	r0, #39	; 0x27
   123d4:	strbcc	r0, [ip, r9]
   123d8:	add	r0, r9, #1
   123dc:	cmp	r0, r5
   123e0:	movcc	r1, #36	; 0x24
   123e4:	strbcc	r1, [ip, r0]
   123e8:	add	r0, r9, #2
   123ec:	add	r9, r9, #3
   123f0:	cmp	r0, r5
   123f4:	movcc	r1, #39	; 0x27
   123f8:	strbcc	r1, [ip, r0]
   123fc:	mov	r0, #1
   12400:	str	r0, [fp, #-52]	; 0xffffffcc
   12404:	mov	r1, #1
   12408:	cmp	r9, r5
   1240c:	mov	r8, #0
   12410:	mov	r6, #48	; 0x30
   12414:	str	r1, [fp, #-56]	; 0xffffffc8
   12418:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1241c:	movcc	r0, #92	; 0x5c
   12420:	strbcc	r0, [ip, r9]
   12424:	add	r0, r9, #1
   12428:	cmp	r1, #2
   1242c:	beq	12880 <__assert_fail@plt+0x19f4>
   12430:	add	r1, sl, #1
   12434:	cmp	r1, r7
   12438:	bcs	12880 <__assert_fail@plt+0x19f4>
   1243c:	ldrb	r1, [lr, r1]
   12440:	sub	r1, r1, #48	; 0x30
   12444:	uxtb	r1, r1
   12448:	cmp	r1, #9
   1244c:	bhi	12880 <__assert_fail@plt+0x19f4>
   12450:	cmp	r0, r5
   12454:	movcc	r1, #48	; 0x30
   12458:	strbcc	r1, [ip, r0]
   1245c:	add	r0, r9, #2
   12460:	add	r9, r9, #3
   12464:	cmp	r0, r5
   12468:	movcc	r1, #48	; 0x30
   1246c:	strbcc	r1, [ip, r0]
   12470:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12474:	tst	r0, #1
   12478:	beq	122a4 <__assert_fail@plt+0x1418>
   1247c:	b	12558 <__assert_fail@plt+0x16cc>
   12480:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12484:	mov	r6, #63	; 0x3f
   12488:	cmp	r0, #5
   1248c:	beq	12894 <__assert_fail@plt+0x1a08>
   12490:	mov	r1, #0
   12494:	cmp	r0, #2
   12498:	str	r1, [fp, #-56]	; 0xffffffc8
   1249c:	bne	1295c <__assert_fail@plt+0x1ad0>
   124a0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   124a4:	mov	r8, #0
   124a8:	tst	r0, #1
   124ac:	beq	12298 <__assert_fail@plt+0x140c>
   124b0:	b	12cd4 <__assert_fail@plt+0x1e48>
   124b4:	mov	r0, #118	; 0x76
   124b8:	b	12694 <__assert_fail@plt+0x1808>
   124bc:	mov	r0, #1
   124c0:	mov	r6, #39	; 0x27
   124c4:	str	r0, [sp, #60]	; 0x3c
   124c8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   124cc:	cmp	r0, #2
   124d0:	bne	126d4 <__assert_fail@plt+0x1848>
   124d4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   124d8:	tst	r0, #1
   124dc:	bne	12cd4 <__assert_fail@plt+0x1e48>
   124e0:	ldr	r2, [sp, #56]	; 0x38
   124e4:	clz	r1, r5
   124e8:	mov	r8, #1
   124ec:	lsr	r1, r1, #5
   124f0:	cmp	r2, #0
   124f4:	mov	r0, r2
   124f8:	movwne	r0, #1
   124fc:	orrs	r0, r0, r1
   12500:	moveq	r2, r5
   12504:	moveq	r5, r0
   12508:	cmp	r9, r5
   1250c:	str	r2, [sp, #56]	; 0x38
   12510:	movcc	r0, #39	; 0x27
   12514:	strbcc	r0, [ip, r9]
   12518:	add	r0, r9, #1
   1251c:	cmp	r0, r5
   12520:	movcc	r1, #92	; 0x5c
   12524:	strbcc	r1, [ip, r0]
   12528:	add	r0, r9, #2
   1252c:	add	r9, r9, #3
   12530:	cmp	r0, r5
   12534:	movcc	r1, #39	; 0x27
   12538:	strbcc	r1, [ip, r0]
   1253c:	mov	r0, #0
   12540:	str	r0, [fp, #-52]	; 0xffffffcc
   12544:	mov	r0, #0
   12548:	str	r0, [fp, #-56]	; 0xffffffc8
   1254c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12550:	tst	r0, #1
   12554:	beq	122a4 <__assert_fail@plt+0x1418>
   12558:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1255c:	mov	r1, r8
   12560:	cmp	r0, #0
   12564:	mov	r0, r6
   12568:	beq	1262c <__assert_fail@plt+0x17a0>
   1256c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12570:	tst	r2, #1
   12574:	bne	12cd4 <__assert_fail@plt+0x1e48>
   12578:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1257c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   12580:	subs	r2, r2, #2
   12584:	movwne	r2, #1
   12588:	orr	r2, r2, r3
   1258c:	tst	r2, #1
   12590:	bne	125cc <__assert_fail@plt+0x1740>
   12594:	cmp	r9, r5
   12598:	movcc	r2, #39	; 0x27
   1259c:	strbcc	r2, [ip, r9]
   125a0:	add	r2, r9, #1
   125a4:	cmp	r2, r5
   125a8:	movcc	r3, #36	; 0x24
   125ac:	strbcc	r3, [ip, r2]
   125b0:	add	r2, r9, #2
   125b4:	add	r9, r9, #3
   125b8:	cmp	r2, r5
   125bc:	movcc	r3, #39	; 0x27
   125c0:	strbcc	r3, [ip, r2]
   125c4:	mov	r2, #1
   125c8:	str	r2, [fp, #-52]	; 0xffffffcc
   125cc:	cmp	r9, r5
   125d0:	movcc	r2, #92	; 0x5c
   125d4:	strbcc	r2, [ip, r9]
   125d8:	add	r9, r9, #1
   125dc:	b	12674 <__assert_fail@plt+0x17e8>
   125e0:	ldr	r0, [sp, #40]	; 0x28
   125e4:	cmp	r0, #1
   125e8:	bne	126e8 <__assert_fail@plt+0x185c>
   125ec:	bl	10d9c <__ctype_b_loc@plt>
   125f0:	ldr	r0, [r0]
   125f4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   125f8:	mov	r1, #1
   125fc:	add	r0, r0, r6, lsl #1
   12600:	ldrb	r0, [r0, #1]
   12604:	ubfx	r8, r0, #6, #1
   12608:	b	12a40 <__assert_fail@plt+0x1bb4>
   1260c:	ldr	r1, [sp, #48]	; 0x30
   12610:	mov	r0, #0
   12614:	str	r0, [fp, #-56]	; 0xffffffc8
   12618:	mov	r0, #92	; 0x5c
   1261c:	cmp	r1, #0
   12620:	beq	12694 <__assert_fail@plt+0x1808>
   12624:	mov	r6, #92	; 0x5c
   12628:	mov	r8, #0
   1262c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12630:	cmp	r0, #0
   12634:	bne	1266c <__assert_fail@plt+0x17e0>
   12638:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1263c:	tst	r0, #1
   12640:	beq	1266c <__assert_fail@plt+0x17e0>
   12644:	cmp	r9, r5
   12648:	movcc	r0, #39	; 0x27
   1264c:	strbcc	r0, [ip, r9]
   12650:	add	r0, r9, #1
   12654:	add	r9, r9, #2
   12658:	cmp	r0, r5
   1265c:	movcc	r1, #39	; 0x27
   12660:	strbcc	r1, [ip, r0]
   12664:	mov	r0, #0
   12668:	str	r0, [fp, #-52]	; 0xffffffcc
   1266c:	mov	r1, r8
   12670:	mov	r0, r6
   12674:	cmp	r9, r5
   12678:	and	r4, r4, r1
   1267c:	strbcc	r0, [ip, r9]
   12680:	add	r9, r9, #1
   12684:	add	sl, sl, #1
   12688:	cmn	r7, #1
   1268c:	bne	11f84 <__assert_fail@plt+0x10f8>
   12690:	b	11f90 <__assert_fail@plt+0x1104>
   12694:	mov	r1, #0
   12698:	mov	r8, #0
   1269c:	str	r1, [fp, #-56]	; 0xffffffc8
   126a0:	ldr	r1, [sp, #88]	; 0x58
   126a4:	tst	r1, #1
   126a8:	mov	r1, #0
   126ac:	beq	12298 <__assert_fail@plt+0x140c>
   126b0:	b	1256c <__assert_fail@plt+0x16e0>
   126b4:	ldr	r0, [sp, #36]	; 0x24
   126b8:	mov	r6, #0
   126bc:	mov	r8, #0
   126c0:	cmp	r0, #0
   126c4:	mov	r0, #0
   126c8:	str	r0, [fp, #-56]	; 0xffffffc8
   126cc:	bne	12684 <__assert_fail@plt+0x17f8>
   126d0:	b	12298 <__assert_fail@plt+0x140c>
   126d4:	mov	r8, #1
   126d8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   126dc:	tst	r0, #1
   126e0:	beq	122a4 <__assert_fail@plt+0x1418>
   126e4:	b	12558 <__assert_fail@plt+0x16cc>
   126e8:	mov	r0, #0
   126ec:	cmn	r7, #1
   126f0:	str	r0, [fp, #-36]	; 0xffffffdc
   126f4:	str	r0, [fp, #-40]	; 0xffffffd8
   126f8:	bne	1270c <__assert_fail@plt+0x1880>
   126fc:	mov	r0, lr
   12700:	bl	10dc0 <strlen@plt>
   12704:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12708:	mov	r7, r0
   1270c:	ldr	r0, [sp, #44]	; 0x2c
   12710:	str	r4, [sp, #84]	; 0x54
   12714:	str	r5, [sp, #28]
   12718:	cmp	r0, #0
   1271c:	beq	12970 <__assert_fail@plt+0x1ae4>
   12720:	ldr	r0, [sp, #80]	; 0x50
   12724:	mov	r8, #1
   12728:	mov	r5, #0
   1272c:	add	r0, r0, sl
   12730:	str	r0, [sp, #24]
   12734:	sub	r0, fp, #40	; 0x28
   12738:	mov	r3, r0
   1273c:	b	12778 <__assert_fail@plt+0x18ec>
   12740:	ldr	r5, [sp, #68]	; 0x44
   12744:	add	r5, r0, r5
   12748:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1274c:	bl	10d0c <iswprint@plt>
   12750:	cmp	r0, #0
   12754:	sub	r4, fp, #40	; 0x28
   12758:	movwne	r0, #1
   1275c:	and	r8, r8, r0
   12760:	mov	r0, r4
   12764:	bl	10ce8 <mbsinit@plt>
   12768:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1276c:	mov	r3, r4
   12770:	cmp	r0, #0
   12774:	bne	12a34 <__assert_fail@plt+0x1ba8>
   12778:	str	r5, [sp, #68]	; 0x44
   1277c:	add	r5, r5, sl
   12780:	sub	r0, fp, #44	; 0x2c
   12784:	add	r1, lr, r5
   12788:	sub	r2, r7, r5
   1278c:	bl	145f4 <__assert_fail@plt+0x3768>
   12790:	cmn	r0, #2
   12794:	beq	129f4 <__assert_fail@plt+0x1b68>
   12798:	ldr	ip, [fp, #-84]	; 0xffffffac
   1279c:	cmn	r0, #1
   127a0:	beq	129e8 <__assert_fail@plt+0x1b5c>
   127a4:	cmp	r0, #0
   127a8:	beq	129ec <__assert_fail@plt+0x1b60>
   127ac:	cmp	r0, #2
   127b0:	bcc	12740 <__assert_fail@plt+0x18b4>
   127b4:	ldr	r1, [sp, #68]	; 0x44
   127b8:	ldr	r2, [sp, #24]
   127bc:	add	r1, r2, r1
   127c0:	sub	r2, r0, #1
   127c4:	ldrb	r3, [r1]
   127c8:	sub	r3, r3, #91	; 0x5b
   127cc:	cmp	r3, #33	; 0x21
   127d0:	bls	127f0 <__assert_fail@plt+0x1964>
   127d4:	add	r1, r1, #1
   127d8:	subs	r2, r2, #1
   127dc:	beq	12740 <__assert_fail@plt+0x18b4>
   127e0:	ldrb	r3, [r1]
   127e4:	sub	r3, r3, #91	; 0x5b
   127e8:	cmp	r3, #33	; 0x21
   127ec:	bhi	127d4 <__assert_fail@plt+0x1948>
   127f0:	add	r5, pc, #0
   127f4:	ldr	pc, [r5, r3, lsl #2]
   127f8:	andeq	r2, r1, ip, lsl #26
   127fc:	andeq	r2, r1, ip, lsl #26
   12800:	ldrdeq	r2, [r1], -r4
   12804:	andeq	r2, r1, ip, lsl #26
   12808:	ldrdeq	r2, [r1], -r4
   1280c:	andeq	r2, r1, ip, lsl #26
   12810:	ldrdeq	r2, [r1], -r4
   12814:	ldrdeq	r2, [r1], -r4
   12818:	ldrdeq	r2, [r1], -r4
   1281c:	ldrdeq	r2, [r1], -r4
   12820:	ldrdeq	r2, [r1], -r4
   12824:	ldrdeq	r2, [r1], -r4
   12828:	ldrdeq	r2, [r1], -r4
   1282c:	ldrdeq	r2, [r1], -r4
   12830:	ldrdeq	r2, [r1], -r4
   12834:	ldrdeq	r2, [r1], -r4
   12838:	ldrdeq	r2, [r1], -r4
   1283c:	ldrdeq	r2, [r1], -r4
   12840:	ldrdeq	r2, [r1], -r4
   12844:	ldrdeq	r2, [r1], -r4
   12848:	ldrdeq	r2, [r1], -r4
   1284c:	ldrdeq	r2, [r1], -r4
   12850:	ldrdeq	r2, [r1], -r4
   12854:	ldrdeq	r2, [r1], -r4
   12858:	ldrdeq	r2, [r1], -r4
   1285c:	ldrdeq	r2, [r1], -r4
   12860:	ldrdeq	r2, [r1], -r4
   12864:	ldrdeq	r2, [r1], -r4
   12868:	ldrdeq	r2, [r1], -r4
   1286c:	ldrdeq	r2, [r1], -r4
   12870:	ldrdeq	r2, [r1], -r4
   12874:	ldrdeq	r2, [r1], -r4
   12878:	ldrdeq	r2, [r1], -r4
   1287c:	andeq	r2, r1, ip, lsl #26
   12880:	mov	r9, r0
   12884:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12888:	tst	r0, #1
   1288c:	beq	122a4 <__assert_fail@plt+0x1418>
   12890:	b	12558 <__assert_fail@plt+0x16cc>
   12894:	mov	r0, #0
   12898:	str	r0, [fp, #-56]	; 0xffffffc8
   1289c:	ldr	r0, [sp, #32]
   128a0:	cmp	r0, #0
   128a4:	beq	1295c <__assert_fail@plt+0x1ad0>
   128a8:	add	r0, sl, #2
   128ac:	mov	r1, r7
   128b0:	cmp	r0, r7
   128b4:	bcs	1295c <__assert_fail@plt+0x1ad0>
   128b8:	add	r1, sl, lr
   128bc:	ldrb	r1, [r1, #1]
   128c0:	cmp	r1, #63	; 0x3f
   128c4:	bne	1295c <__assert_fail@plt+0x1ad0>
   128c8:	ldrb	r8, [lr, r0]
   128cc:	sub	r2, r8, #33	; 0x21
   128d0:	cmp	r2, #29
   128d4:	bhi	1295c <__assert_fail@plt+0x1ad0>
   128d8:	mov	r1, r4
   128dc:	movw	r4, #20929	; 0x51c1
   128e0:	mov	r3, #1
   128e4:	movt	r4, #14336	; 0x3800
   128e8:	tst	r4, r3, lsl r2
   128ec:	beq	12c18 <__assert_fail@plt+0x1d8c>
   128f0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   128f4:	tst	r2, #1
   128f8:	bne	12cd4 <__assert_fail@plt+0x1e48>
   128fc:	cmp	r9, r5
   12900:	mov	r6, r8
   12904:	mov	r4, r1
   12908:	mov	sl, r0
   1290c:	mov	r8, #0
   12910:	movcc	r2, #63	; 0x3f
   12914:	strbcc	r2, [ip, r9]
   12918:	add	r2, r9, #1
   1291c:	cmp	r2, r5
   12920:	movcc	r3, #34	; 0x22
   12924:	strbcc	r3, [ip, r2]
   12928:	add	r2, r9, #2
   1292c:	cmp	r2, r5
   12930:	movcc	r3, #34	; 0x22
   12934:	strbcc	r3, [ip, r2]
   12938:	add	r2, r9, #3
   1293c:	add	r9, r9, #4
   12940:	cmp	r2, r5
   12944:	movcc	r3, #63	; 0x3f
   12948:	strbcc	r3, [ip, r2]
   1294c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12950:	tst	r0, #1
   12954:	beq	122a4 <__assert_fail@plt+0x1418>
   12958:	b	12558 <__assert_fail@plt+0x16cc>
   1295c:	mov	r8, #0
   12960:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12964:	tst	r0, #1
   12968:	beq	122a4 <__assert_fail@plt+0x1418>
   1296c:	b	12558 <__assert_fail@plt+0x16cc>
   12970:	mov	r8, #1
   12974:	mov	r5, #0
   12978:	sub	r4, fp, #40	; 0x28
   1297c:	str	r5, [sp, #68]	; 0x44
   12980:	add	r5, r5, sl
   12984:	sub	r0, fp, #44	; 0x2c
   12988:	mov	r3, r4
   1298c:	add	r1, lr, r5
   12990:	sub	r2, r7, r5
   12994:	bl	145f4 <__assert_fail@plt+0x3768>
   12998:	cmn	r0, #2
   1299c:	beq	129f4 <__assert_fail@plt+0x1b68>
   129a0:	cmn	r0, #1
   129a4:	beq	129e8 <__assert_fail@plt+0x1b5c>
   129a8:	ldr	r5, [sp, #68]	; 0x44
   129ac:	cmp	r0, #0
   129b0:	beq	12a30 <__assert_fail@plt+0x1ba4>
   129b4:	add	r5, r0, r5
   129b8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   129bc:	bl	10d0c <iswprint@plt>
   129c0:	cmp	r0, #0
   129c4:	sub	r4, fp, #40	; 0x28
   129c8:	movwne	r0, #1
   129cc:	and	r8, r8, r0
   129d0:	mov	r0, r4
   129d4:	bl	10ce8 <mbsinit@plt>
   129d8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   129dc:	cmp	r0, #0
   129e0:	beq	1297c <__assert_fail@plt+0x1af0>
   129e4:	b	12a34 <__assert_fail@plt+0x1ba8>
   129e8:	mov	r8, #0
   129ec:	ldr	lr, [fp, #-80]	; 0xffffffb0
   129f0:	b	12a28 <__assert_fail@plt+0x1b9c>
   129f4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   129f8:	mov	r8, #0
   129fc:	cmp	r5, r7
   12a00:	bcs	12a28 <__assert_fail@plt+0x1b9c>
   12a04:	ldrb	r0, [lr, r5]
   12a08:	cmp	r0, #0
   12a0c:	beq	12a28 <__assert_fail@plt+0x1b9c>
   12a10:	ldr	r0, [sp, #68]	; 0x44
   12a14:	add	r0, r0, #1
   12a18:	add	r5, r0, sl
   12a1c:	str	r0, [sp, #68]	; 0x44
   12a20:	cmp	r5, r7
   12a24:	bcc	12a04 <__assert_fail@plt+0x1b78>
   12a28:	ldr	r5, [sp, #68]	; 0x44
   12a2c:	b	12a34 <__assert_fail@plt+0x1ba8>
   12a30:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12a34:	mov	r1, r5
   12a38:	ldr	r5, [sp, #28]
   12a3c:	ldr	r4, [sp, #84]	; 0x54
   12a40:	ldr	r0, [sp, #52]	; 0x34
   12a44:	ldr	ip, [fp, #-84]	; 0xffffffac
   12a48:	cmp	r1, #1
   12a4c:	orr	r2, r8, r0
   12a50:	mov	r0, r1
   12a54:	bhi	12a60 <__assert_fail@plt+0x1bd4>
   12a58:	tst	r2, #1
   12a5c:	bne	12298 <__assert_fail@plt+0x140c>
   12a60:	add	r0, r0, sl
   12a64:	str	r2, [sp, #84]	; 0x54
   12a68:	str	r0, [fp, #-56]	; 0xffffffc8
   12a6c:	mov	r0, #0
   12a70:	tst	r2, #1
   12a74:	bne	12b54 <__assert_fail@plt+0x1cc8>
   12a78:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12a7c:	tst	r1, #1
   12a80:	bne	12cd4 <__assert_fail@plt+0x1e48>
   12a84:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12a88:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12a8c:	subs	r2, r1, #2
   12a90:	movwne	r2, #1
   12a94:	orr	r2, r2, r0
   12a98:	tst	r2, #1
   12a9c:	bne	12ad8 <__assert_fail@plt+0x1c4c>
   12aa0:	cmp	r9, r5
   12aa4:	add	r2, r9, #1
   12aa8:	mov	r0, #1
   12aac:	movcc	r1, #39	; 0x27
   12ab0:	str	r0, [fp, #-52]	; 0xffffffcc
   12ab4:	strbcc	r1, [ip, r9]
   12ab8:	cmp	r2, r5
   12abc:	movcc	r1, #36	; 0x24
   12ac0:	strbcc	r1, [ip, r2]
   12ac4:	add	r2, r9, #2
   12ac8:	add	r9, r9, #3
   12acc:	cmp	r2, r5
   12ad0:	movcc	r1, #39	; 0x27
   12ad4:	strbcc	r1, [ip, r2]
   12ad8:	cmp	r9, r5
   12adc:	add	r2, r9, #1
   12ae0:	movcc	r1, #92	; 0x5c
   12ae4:	strbcc	r1, [ip, r9]
   12ae8:	cmp	r2, r5
   12aec:	bcs	12b00 <__assert_fail@plt+0x1c74>
   12af0:	uxtb	r3, r6
   12af4:	mov	r1, #48	; 0x30
   12af8:	orr	r3, r1, r3, lsr #6
   12afc:	strb	r3, [ip, r2]
   12b00:	add	r2, r9, #2
   12b04:	add	r9, r9, #3
   12b08:	cmp	r2, r5
   12b0c:	lsrcc	r3, r6, #3
   12b10:	movcc	r1, #6
   12b14:	bficc	r3, r1, #3, #29
   12b18:	mov	r1, #6
   12b1c:	bfi	r6, r1, #3, #29
   12b20:	strbcc	r3, [ip, r2]
   12b24:	mov	r2, #1
   12b28:	b	12b88 <__assert_fail@plt+0x1cfc>
   12b2c:	ldr	r1, [sp, #80]	; 0x50
   12b30:	cmp	r9, r2
   12b34:	mov	r5, r2
   12b38:	ldr	r2, [sp, #84]	; 0x54
   12b3c:	strbcc	r6, [ip, r9]
   12b40:	add	r9, r9, #1
   12b44:	ldrb	r6, [r1, sl]
   12b48:	mov	sl, r3
   12b4c:	tst	r2, #1
   12b50:	beq	12a78 <__assert_fail@plt+0x1bec>
   12b54:	ldr	r1, [fp, #-48]	; 0xffffffd0
   12b58:	tst	r1, #1
   12b5c:	beq	12b7c <__assert_fail@plt+0x1cf0>
   12b60:	cmp	r9, r5
   12b64:	mov	r2, r0
   12b68:	movcc	r1, #92	; 0x5c
   12b6c:	strbcc	r1, [ip, r9]
   12b70:	add	r9, r9, #1
   12b74:	mov	r1, #0
   12b78:	b	12b84 <__assert_fail@plt+0x1cf8>
   12b7c:	mov	r1, #0
   12b80:	mov	r2, r0
   12b84:	str	r1, [fp, #-48]	; 0xffffffd0
   12b88:	mov	r0, r2
   12b8c:	and	r1, r2, #1
   12b90:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12b94:	add	r3, sl, #1
   12b98:	cmp	r2, r3
   12b9c:	bls	12bfc <__assert_fail@plt+0x1d70>
   12ba0:	mov	r2, r5
   12ba4:	ldr	r5, [fp, #-52]	; 0xffffffcc
   12ba8:	cmp	r1, #0
   12bac:	movwne	r1, #1
   12bb0:	mvn	r5, r5
   12bb4:	orr	r5, r5, r1
   12bb8:	tst	r5, #1
   12bbc:	bne	12b2c <__assert_fail@plt+0x1ca0>
   12bc0:	cmp	r9, r2
   12bc4:	movcc	r5, r4
   12bc8:	movcc	r4, #39	; 0x27
   12bcc:	strbcc	r4, [ip, r9]
   12bd0:	movcc	r4, r5
   12bd4:	add	r5, r9, #1
   12bd8:	add	r9, r9, #2
   12bdc:	cmp	r5, r2
   12be0:	movcc	r1, r4
   12be4:	movcc	r4, #39	; 0x27
   12be8:	strbcc	r4, [ip, r5]
   12bec:	movcc	r4, r1
   12bf0:	mov	r1, #0
   12bf4:	str	r1, [fp, #-52]	; 0xffffffcc
   12bf8:	b	12b2c <__assert_fail@plt+0x1ca0>
   12bfc:	cmp	r1, #0
   12c00:	movwne	r1, #1
   12c04:	str	r1, [fp, #-56]	; 0xffffffc8
   12c08:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12c0c:	cmp	r0, #0
   12c10:	beq	12638 <__assert_fail@plt+0x17ac>
   12c14:	b	1266c <__assert_fail@plt+0x17e0>
   12c18:	mov	r8, #0
   12c1c:	mov	r4, r1
   12c20:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12c24:	tst	r0, #1
   12c28:	beq	122a4 <__assert_fail@plt+0x1418>
   12c2c:	b	12558 <__assert_fail@plt+0x16cc>
   12c30:	mov	r7, sl
   12c34:	b	12c3c <__assert_fail@plt+0x1db0>
   12c38:	mvn	r7, #0
   12c3c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12c40:	ldr	r3, [fp, #-76]	; 0xffffffb4
   12c44:	ldr	r2, [sp, #88]	; 0x58
   12c48:	eor	r0, r1, #2
   12c4c:	orr	r0, r0, r9
   12c50:	clz	r0, r0
   12c54:	lsr	r0, r0, #5
   12c58:	tst	r3, r0
   12c5c:	bne	12cd4 <__assert_fail@plt+0x1e48>
   12c60:	subs	r0, r1, #2
   12c64:	movwne	r0, #1
   12c68:	orr	r0, r3, r0
   12c6c:	tst	r0, #1
   12c70:	ldreq	r0, [sp, #60]	; 0x3c
   12c74:	eoreq	r0, r0, #1
   12c78:	tsteq	r0, #1
   12c7c:	bne	12db0 <__assert_fail@plt+0x1f24>
   12c80:	tst	r4, #1
   12c84:	bne	12d74 <__assert_fail@plt+0x1ee8>
   12c88:	ldr	r6, [sp, #56]	; 0x38
   12c8c:	mov	r8, #0
   12c90:	cmp	r6, #0
   12c94:	beq	12dac <__assert_fail@plt+0x1f20>
   12c98:	mov	r1, #0
   12c9c:	mov	r4, #2
   12ca0:	cmp	r5, #0
   12ca4:	mov	r0, r2
   12ca8:	mov	r3, #0
   12cac:	str	r1, [sp, #84]	; 0x54
   12cb0:	beq	11af8 <__assert_fail@plt+0xc6c>
   12cb4:	b	12db0 <__assert_fail@plt+0x1f24>
   12cb8:	movw	r0, #19900	; 0x4dbc
   12cbc:	movt	r0, #1
   12cc0:	str	r0, [sp, #76]	; 0x4c
   12cc4:	mov	r9, #0
   12cc8:	tst	r8, #1
   12ccc:	beq	11d90 <__assert_fail@plt+0xf04>
   12cd0:	b	11ed0 <__assert_fail@plt+0x1044>
   12cd4:	ldr	r1, [sp, #88]	; 0x58
   12cd8:	mov	r0, #2
   12cdc:	tst	r1, #1
   12ce0:	movwne	r0, #4
   12ce4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12ce8:	ldr	r1, [fp, #12]
   12cec:	cmp	r2, #2
   12cf0:	moveq	r2, r0
   12cf4:	b	12d2c <__assert_fail@plt+0x1ea0>
   12cf8:	ldr	ip, [fp, #-84]	; 0xffffffac
   12cfc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12d00:	ldr	r1, [fp, #12]
   12d04:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12d08:	b	12d2c <__assert_fail@plt+0x1ea0>
   12d0c:	ldr	r1, [sp, #88]	; 0x58
   12d10:	ldr	lr, [fp, #-80]	; 0xffffffb0
   12d14:	ldr	r5, [sp, #28]
   12d18:	mov	r0, #2
   12d1c:	tst	r1, #1
   12d20:	ldr	r1, [fp, #12]
   12d24:	movwne	r0, #4
   12d28:	mov	r2, r0
   12d2c:	mov	r0, #0
   12d30:	bic	r1, r1, #2
   12d34:	str	r2, [sp]
   12d38:	mov	r2, lr
   12d3c:	str	r0, [sp, #8]
   12d40:	ldr	r0, [sp, #72]	; 0x48
   12d44:	str	r1, [sp, #4]
   12d48:	mov	r1, r5
   12d4c:	str	r0, [sp, #12]
   12d50:	ldr	r0, [sp, #76]	; 0x4c
   12d54:	str	r0, [sp, #16]
   12d58:	mov	r0, ip
   12d5c:	mov	r3, r7
   12d60:	bl	11a6c <__assert_fail@plt+0xbe0>
   12d64:	mov	r9, r0
   12d68:	mov	r0, r9
   12d6c:	sub	sp, fp, #28
   12d70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d74:	mov	r0, #5
   12d78:	ldr	r1, [sp, #56]	; 0x38
   12d7c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   12d80:	str	r0, [sp]
   12d84:	ldr	r0, [fp, #12]
   12d88:	str	r0, [sp, #4]
   12d8c:	ldr	r0, [fp, #16]
   12d90:	str	r0, [sp, #8]
   12d94:	ldr	r0, [sp, #72]	; 0x48
   12d98:	str	r0, [sp, #12]
   12d9c:	ldr	r0, [sp, #76]	; 0x4c
   12da0:	str	r0, [sp, #16]
   12da4:	ldr	r0, [fp, #-84]	; 0xffffffac
   12da8:	b	12d5c <__assert_fail@plt+0x1ed0>
   12dac:	mov	r3, #0
   12db0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12db4:	cmp	r1, #0
   12db8:	beq	12df4 <__assert_fail@plt+0x1f68>
   12dbc:	ldr	r2, [fp, #-84]	; 0xffffffac
   12dc0:	tst	r3, #1
   12dc4:	bne	12df8 <__assert_fail@plt+0x1f6c>
   12dc8:	ldrb	r0, [r1]
   12dcc:	cmp	r0, #0
   12dd0:	beq	12df8 <__assert_fail@plt+0x1f6c>
   12dd4:	add	r1, r1, #1
   12dd8:	cmp	r9, r5
   12ddc:	strbcc	r0, [r2, r9]
   12de0:	add	r9, r9, #1
   12de4:	ldrb	r0, [r1], #1
   12de8:	cmp	r0, #0
   12dec:	bne	12dd8 <__assert_fail@plt+0x1f4c>
   12df0:	b	12df8 <__assert_fail@plt+0x1f6c>
   12df4:	ldr	r2, [fp, #-84]	; 0xffffffac
   12df8:	cmp	r9, r5
   12dfc:	movcc	r0, #0
   12e00:	strbcc	r0, [r2, r9]
   12e04:	mov	r0, r9
   12e08:	sub	sp, fp, #28
   12e0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e10:	mov	r0, #4
   12e14:	b	12ce4 <__assert_fail@plt+0x1e58>
   12e18:	bl	10e80 <abort@plt>
   12e1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e20:	add	fp, sp, #28
   12e24:	sub	sp, sp, #28
   12e28:	movw	r5, #24904	; 0x6148
   12e2c:	cmp	r2, #0
   12e30:	mov	r4, r1
   12e34:	mov	r7, r0
   12e38:	str	r0, [sp, #20]
   12e3c:	movt	r5, #2
   12e40:	movne	r5, r2
   12e44:	bl	10dd8 <__errno_location@plt>
   12e48:	mov	sl, r0
   12e4c:	ldr	r2, [r5, #40]	; 0x28
   12e50:	ldr	r3, [r5, #44]	; 0x2c
   12e54:	ldm	r5, {r0, r1}
   12e58:	orr	r8, r1, #1
   12e5c:	add	r9, r5, #8
   12e60:	mov	r1, #0
   12e64:	ldr	r6, [sl]
   12e68:	stm	sp, {r0, r8, r9}
   12e6c:	mov	r0, #0
   12e70:	str	r2, [sp, #12]
   12e74:	str	r3, [sp, #16]
   12e78:	mov	r2, r7
   12e7c:	mov	r3, r4
   12e80:	str	r6, [sp, #24]
   12e84:	mov	r6, r4
   12e88:	bl	11a6c <__assert_fail@plt+0xbe0>
   12e8c:	add	r7, r0, #1
   12e90:	mov	r0, r7
   12e94:	bl	13ef4 <__assert_fail@plt+0x3068>
   12e98:	mov	r4, r0
   12e9c:	ldr	r0, [r5]
   12ea0:	ldr	r2, [r5, #44]	; 0x2c
   12ea4:	ldr	r1, [r5, #40]	; 0x28
   12ea8:	mov	r3, r6
   12eac:	stm	sp, {r0, r8, r9}
   12eb0:	str	r2, [sp, #16]
   12eb4:	ldr	r2, [sp, #20]
   12eb8:	str	r1, [sp, #12]
   12ebc:	mov	r0, r4
   12ec0:	mov	r1, r7
   12ec4:	bl	11a6c <__assert_fail@plt+0xbe0>
   12ec8:	ldr	r0, [sp, #24]
   12ecc:	str	r0, [sl]
   12ed0:	mov	r0, r4
   12ed4:	sub	sp, fp, #28
   12ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12edc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ee0:	add	fp, sp, #28
   12ee4:	sub	sp, sp, #36	; 0x24
   12ee8:	movw	r8, #24904	; 0x6148
   12eec:	cmp	r3, #0
   12ef0:	mov	r4, r2
   12ef4:	str	r2, [sp, #24]
   12ef8:	mov	r5, r1
   12efc:	mov	r6, r0
   12f00:	str	r0, [sp, #20]
   12f04:	movt	r8, #2
   12f08:	movne	r8, r3
   12f0c:	bl	10dd8 <__errno_location@plt>
   12f10:	str	r0, [sp, #28]
   12f14:	ldr	r1, [r8, #40]	; 0x28
   12f18:	ldr	r2, [r8, #44]	; 0x2c
   12f1c:	ldr	r7, [r0]
   12f20:	cmp	r4, #0
   12f24:	add	sl, r8, #8
   12f28:	mov	r0, #0
   12f2c:	ldm	r8, {r3, r9}
   12f30:	orreq	r9, r9, #1
   12f34:	stm	sp, {r3, r9, sl}
   12f38:	str	r1, [sp, #12]
   12f3c:	str	r2, [sp, #16]
   12f40:	mov	r1, #0
   12f44:	mov	r2, r6
   12f48:	mov	r3, r5
   12f4c:	str	r7, [sp, #32]
   12f50:	mov	r7, r5
   12f54:	bl	11a6c <__assert_fail@plt+0xbe0>
   12f58:	add	r4, r0, #1
   12f5c:	mov	r5, r0
   12f60:	mov	r0, r4
   12f64:	bl	13ef4 <__assert_fail@plt+0x3068>
   12f68:	mov	r6, r0
   12f6c:	ldr	r0, [r8]
   12f70:	ldr	r2, [r8, #44]	; 0x2c
   12f74:	ldr	r1, [r8, #40]	; 0x28
   12f78:	mov	r3, r7
   12f7c:	stm	sp, {r0, r9, sl}
   12f80:	str	r2, [sp, #16]
   12f84:	ldr	r2, [sp, #20]
   12f88:	str	r1, [sp, #12]
   12f8c:	mov	r0, r6
   12f90:	mov	r1, r4
   12f94:	bl	11a6c <__assert_fail@plt+0xbe0>
   12f98:	ldr	r0, [sp, #24]
   12f9c:	ldr	r1, [sp, #32]
   12fa0:	ldr	r2, [sp, #28]
   12fa4:	cmp	r0, #0
   12fa8:	str	r1, [r2]
   12fac:	strne	r5, [r0]
   12fb0:	mov	r0, r6
   12fb4:	sub	sp, fp, #28
   12fb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fbc:	push	{r4, r5, r6, r7, fp, lr}
   12fc0:	add	fp, sp, #16
   12fc4:	movw	r4, #24832	; 0x6100
   12fc8:	movt	r4, #2
   12fcc:	ldrd	r6, [r4]
   12fd0:	cmp	r7, #2
   12fd4:	blt	13000 <__assert_fail@plt+0x2174>
   12fd8:	add	r5, r6, #12
   12fdc:	mov	r7, #0
   12fe0:	ldr	r0, [r5, r7, lsl #3]
   12fe4:	bl	144f4 <__assert_fail@plt+0x3668>
   12fe8:	ldr	r1, [r4, #4]
   12fec:	add	r2, r7, #2
   12ff0:	add	r0, r7, #1
   12ff4:	mov	r7, r0
   12ff8:	cmp	r2, r1
   12ffc:	blt	12fe0 <__assert_fail@plt+0x2154>
   13000:	ldr	r0, [r6, #4]
   13004:	movw	r5, #24952	; 0x6178
   13008:	movt	r5, #2
   1300c:	cmp	r0, r5
   13010:	beq	13024 <__assert_fail@plt+0x2198>
   13014:	bl	144f4 <__assert_fail@plt+0x3668>
   13018:	mov	r0, #256	; 0x100
   1301c:	str	r0, [r4, #8]
   13020:	str	r5, [r4, #12]
   13024:	add	r5, r4, #8
   13028:	cmp	r6, r5
   1302c:	beq	1303c <__assert_fail@plt+0x21b0>
   13030:	mov	r0, r6
   13034:	bl	144f4 <__assert_fail@plt+0x3668>
   13038:	str	r5, [r4]
   1303c:	mov	r0, #1
   13040:	str	r0, [r4, #4]
   13044:	pop	{r4, r5, r6, r7, fp, pc}
   13048:	movw	r3, #24904	; 0x6148
   1304c:	mvn	r2, #0
   13050:	movt	r3, #2
   13054:	b	13058 <__assert_fail@plt+0x21cc>
   13058:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1305c:	add	fp, sp, #28
   13060:	sub	sp, sp, #44	; 0x2c
   13064:	mov	r7, r3
   13068:	str	r2, [sp, #36]	; 0x24
   1306c:	str	r1, [sp, #32]
   13070:	mov	r5, r0
   13074:	bl	10dd8 <__errno_location@plt>
   13078:	cmp	r5, #0
   1307c:	bmi	131e4 <__assert_fail@plt+0x2358>
   13080:	cmn	r5, #-2147483647	; 0x80000001
   13084:	beq	131e4 <__assert_fail@plt+0x2358>
   13088:	movw	r8, #24832	; 0x6100
   1308c:	mov	r4, r0
   13090:	ldr	r0, [r0]
   13094:	movt	r8, #2
   13098:	str	r4, [sp, #28]
   1309c:	ldr	r1, [r8, #4]
   130a0:	ldr	r6, [r8]
   130a4:	str	r0, [sp, #24]
   130a8:	cmp	r1, r5
   130ac:	ble	130b8 <__assert_fail@plt+0x222c>
   130b0:	mov	sl, r6
   130b4:	b	13120 <__assert_fail@plt+0x2294>
   130b8:	mov	r0, #8
   130bc:	add	r9, r8, #8
   130c0:	str	r1, [fp, #-32]	; 0xffffffe0
   130c4:	sub	r1, r5, r1
   130c8:	mvn	r3, #-2147483648	; 0x80000000
   130cc:	str	r0, [sp]
   130d0:	subs	r0, r6, r9
   130d4:	add	r2, r1, #1
   130d8:	sub	r1, fp, #32
   130dc:	movne	r0, r6
   130e0:	bl	140f4 <__assert_fail@plt+0x3268>
   130e4:	mov	sl, r0
   130e8:	cmp	r6, r9
   130ec:	str	r0, [r8]
   130f0:	bne	130fc <__assert_fail@plt+0x2270>
   130f4:	ldrd	r0, [r8, #8]
   130f8:	stm	sl, {r0, r1}
   130fc:	ldr	r1, [r8, #4]
   13100:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13104:	add	r0, sl, r1, lsl #3
   13108:	sub	r1, r2, r1
   1310c:	lsl	r2, r1, #3
   13110:	mov	r1, #0
   13114:	bl	10df0 <memset@plt>
   13118:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1311c:	str	r0, [r8, #4]
   13120:	mov	r9, sl
   13124:	ldm	r7, {r0, r1}
   13128:	orr	r8, r1, #1
   1312c:	add	r1, r7, #8
   13130:	ldr	r2, [r7, #40]	; 0x28
   13134:	ldr	r3, [r7, #44]	; 0x2c
   13138:	ldr	r6, [r9, r5, lsl #3]!
   1313c:	str	r1, [sp, #20]
   13140:	ldr	r4, [r9, #4]!
   13144:	stm	sp, {r0, r8}
   13148:	add	r0, sp, #8
   1314c:	stm	r0, {r1, r2, r3}
   13150:	ldr	r2, [sp, #32]
   13154:	ldr	r3, [sp, #36]	; 0x24
   13158:	mov	r1, r6
   1315c:	mov	r0, r4
   13160:	bl	11a6c <__assert_fail@plt+0xbe0>
   13164:	cmp	r6, r0
   13168:	bhi	131cc <__assert_fail@plt+0x2340>
   1316c:	add	r6, r0, #1
   13170:	movw	r0, #24952	; 0x6178
   13174:	movt	r0, #2
   13178:	str	r6, [sl, r5, lsl #3]
   1317c:	cmp	r4, r0
   13180:	beq	1318c <__assert_fail@plt+0x2300>
   13184:	mov	r0, r4
   13188:	bl	144f4 <__assert_fail@plt+0x3668>
   1318c:	mov	r0, r6
   13190:	bl	13ef4 <__assert_fail@plt+0x3068>
   13194:	str	r0, [r9]
   13198:	mov	r4, r0
   1319c:	add	r3, sp, #8
   131a0:	ldr	r0, [r7]
   131a4:	ldr	r1, [r7, #40]	; 0x28
   131a8:	ldr	r2, [r7, #44]	; 0x2c
   131ac:	stm	sp, {r0, r8}
   131b0:	ldr	r0, [sp, #20]
   131b4:	stm	r3, {r0, r1, r2}
   131b8:	ldr	r2, [sp, #32]
   131bc:	ldr	r3, [sp, #36]	; 0x24
   131c0:	mov	r0, r4
   131c4:	mov	r1, r6
   131c8:	bl	11a6c <__assert_fail@plt+0xbe0>
   131cc:	ldr	r1, [sp, #24]
   131d0:	ldr	r0, [sp, #28]
   131d4:	str	r1, [r0]
   131d8:	mov	r0, r4
   131dc:	sub	sp, fp, #28
   131e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131e4:	bl	10e80 <abort@plt>
   131e8:	movw	r3, #24904	; 0x6148
   131ec:	movt	r3, #2
   131f0:	b	13058 <__assert_fail@plt+0x21cc>
   131f4:	movw	r3, #24904	; 0x6148
   131f8:	mov	r1, r0
   131fc:	mov	r0, #0
   13200:	mvn	r2, #0
   13204:	movt	r3, #2
   13208:	b	13058 <__assert_fail@plt+0x21cc>
   1320c:	movw	r3, #24904	; 0x6148
   13210:	mov	r2, r1
   13214:	mov	r1, r0
   13218:	mov	r0, #0
   1321c:	movt	r3, #2
   13220:	b	13058 <__assert_fail@plt+0x21cc>
   13224:	push	{fp, lr}
   13228:	mov	fp, sp
   1322c:	sub	sp, sp, #48	; 0x30
   13230:	vmov.i32	q8, #0	; 0x00000000
   13234:	mov	ip, #32
   13238:	mov	r3, sp
   1323c:	mov	lr, r2
   13240:	cmp	r1, #10
   13244:	add	r2, r3, #16
   13248:	vst1.64	{d16-d17}, [r3], ip
   1324c:	vst1.64	{d16-d17}, [r2]
   13250:	vst1.64	{d16-d17}, [r3]
   13254:	beq	13274 <__assert_fail@plt+0x23e8>
   13258:	str	r1, [sp]
   1325c:	mov	r3, sp
   13260:	mov	r1, lr
   13264:	mvn	r2, #0
   13268:	bl	13058 <__assert_fail@plt+0x21cc>
   1326c:	mov	sp, fp
   13270:	pop	{fp, pc}
   13274:	bl	10e80 <abort@plt>
   13278:	push	{r4, sl, fp, lr}
   1327c:	add	fp, sp, #8
   13280:	sub	sp, sp, #48	; 0x30
   13284:	vmov.i32	q8, #0	; 0x00000000
   13288:	mov	ip, r3
   1328c:	mov	r3, sp
   13290:	mov	lr, #32
   13294:	cmp	r1, #10
   13298:	add	r4, r3, #16
   1329c:	vst1.64	{d16-d17}, [r3], lr
   132a0:	vst1.64	{d16-d17}, [r4]
   132a4:	vst1.64	{d16-d17}, [r3]
   132a8:	beq	132c8 <__assert_fail@plt+0x243c>
   132ac:	str	r1, [sp]
   132b0:	mov	r1, r2
   132b4:	mov	r3, sp
   132b8:	mov	r2, ip
   132bc:	bl	13058 <__assert_fail@plt+0x21cc>
   132c0:	sub	sp, fp, #8
   132c4:	pop	{r4, sl, fp, pc}
   132c8:	bl	10e80 <abort@plt>
   132cc:	push	{fp, lr}
   132d0:	mov	fp, sp
   132d4:	sub	sp, sp, #48	; 0x30
   132d8:	vmov.i32	q8, #0	; 0x00000000
   132dc:	mov	r3, sp
   132e0:	mov	ip, #32
   132e4:	cmp	r0, #10
   132e8:	add	r2, r3, #16
   132ec:	vst1.64	{d16-d17}, [r3], ip
   132f0:	vst1.64	{d16-d17}, [r2]
   132f4:	vst1.64	{d16-d17}, [r3]
   132f8:	beq	13318 <__assert_fail@plt+0x248c>
   132fc:	str	r0, [sp]
   13300:	mov	r3, sp
   13304:	mov	r0, #0
   13308:	mvn	r2, #0
   1330c:	bl	13058 <__assert_fail@plt+0x21cc>
   13310:	mov	sp, fp
   13314:	pop	{fp, pc}
   13318:	bl	10e80 <abort@plt>
   1331c:	push	{fp, lr}
   13320:	mov	fp, sp
   13324:	sub	sp, sp, #48	; 0x30
   13328:	vmov.i32	q8, #0	; 0x00000000
   1332c:	mov	r3, sp
   13330:	mov	ip, #32
   13334:	cmp	r0, #10
   13338:	add	lr, r3, #16
   1333c:	vst1.64	{d16-d17}, [r3], ip
   13340:	vst1.64	{d16-d17}, [lr]
   13344:	vst1.64	{d16-d17}, [r3]
   13348:	beq	13364 <__assert_fail@plt+0x24d8>
   1334c:	str	r0, [sp]
   13350:	mov	r3, sp
   13354:	mov	r0, #0
   13358:	bl	13058 <__assert_fail@plt+0x21cc>
   1335c:	mov	sp, fp
   13360:	pop	{fp, pc}
   13364:	bl	10e80 <abort@plt>
   13368:	push	{r4, sl, fp, lr}
   1336c:	add	fp, sp, #8
   13370:	sub	sp, sp, #48	; 0x30
   13374:	mov	lr, r0
   13378:	movw	r0, #24904	; 0x6148
   1337c:	mov	ip, r1
   13380:	mov	r1, #32
   13384:	mov	r4, #1
   13388:	movt	r0, #2
   1338c:	add	r3, r0, #16
   13390:	vld1.64	{d16-d17}, [r0], r1
   13394:	vld1.64	{d20-d21}, [r0]
   13398:	vld1.64	{d18-d19}, [r3]
   1339c:	mov	r3, sp
   133a0:	add	r0, r3, #32
   133a4:	add	r1, r3, #16
   133a8:	vst1.64	{d20-d21}, [r0]
   133ac:	mov	r0, #28
   133b0:	vst1.64	{d18-d19}, [r1]
   133b4:	mov	r1, r3
   133b8:	and	r0, r0, r2, lsr #3
   133bc:	and	r2, r2, #31
   133c0:	vst1.64	{d16-d17}, [r1], r0
   133c4:	ldr	r0, [r1, #8]
   133c8:	bic	r4, r4, r0, lsr r2
   133cc:	eor	r0, r0, r4, lsl r2
   133d0:	mov	r2, ip
   133d4:	str	r0, [r1, #8]
   133d8:	mov	r0, #0
   133dc:	mov	r1, lr
   133e0:	bl	13058 <__assert_fail@plt+0x21cc>
   133e4:	sub	sp, fp, #8
   133e8:	pop	{r4, sl, fp, pc}
   133ec:	push	{fp, lr}
   133f0:	mov	fp, sp
   133f4:	sub	sp, sp, #48	; 0x30
   133f8:	mov	ip, r0
   133fc:	movw	r0, #24904	; 0x6148
   13400:	mov	r2, #32
   13404:	movt	r0, #2
   13408:	add	r3, r0, #16
   1340c:	vld1.64	{d16-d17}, [r0], r2
   13410:	vld1.64	{d20-d21}, [r0]
   13414:	vld1.64	{d18-d19}, [r3]
   13418:	mov	r3, sp
   1341c:	add	r0, r3, #32
   13420:	add	r2, r3, #16
   13424:	vst1.64	{d20-d21}, [r0]
   13428:	mov	r0, #28
   1342c:	vst1.64	{d18-d19}, [r2]
   13430:	mov	r2, r3
   13434:	and	r0, r0, r1, lsr #3
   13438:	and	r1, r1, #31
   1343c:	vst1.64	{d16-d17}, [r2], r0
   13440:	mov	r0, #1
   13444:	ldr	lr, [r2, #8]
   13448:	bic	r0, r0, lr, lsr r1
   1344c:	eor	r0, lr, r0, lsl r1
   13450:	mov	r1, ip
   13454:	str	r0, [r2, #8]
   13458:	mov	r0, #0
   1345c:	mvn	r2, #0
   13460:	bl	13058 <__assert_fail@plt+0x21cc>
   13464:	mov	sp, fp
   13468:	pop	{fp, pc}
   1346c:	push	{fp, lr}
   13470:	mov	fp, sp
   13474:	sub	sp, sp, #48	; 0x30
   13478:	mov	r1, r0
   1347c:	movw	r0, #24904	; 0x6148
   13480:	mov	r3, #32
   13484:	movt	r0, #2
   13488:	add	r2, r0, #16
   1348c:	vld1.64	{d16-d17}, [r0], r3
   13490:	mov	r3, sp
   13494:	vld1.64	{d18-d19}, [r2]
   13498:	vld1.64	{d20-d21}, [r0]
   1349c:	add	r2, r3, #16
   134a0:	add	r0, r3, #32
   134a4:	vst1.64	{d18-d19}, [r2]
   134a8:	vst1.64	{d20-d21}, [r0]
   134ac:	mov	r0, #12
   134b0:	mov	r2, r3
   134b4:	vst1.64	{d16-d17}, [r2], r0
   134b8:	ldr	r0, [r2]
   134bc:	orr	r0, r0, #67108864	; 0x4000000
   134c0:	str	r0, [r2]
   134c4:	mov	r0, #0
   134c8:	mvn	r2, #0
   134cc:	bl	13058 <__assert_fail@plt+0x21cc>
   134d0:	mov	sp, fp
   134d4:	pop	{fp, pc}
   134d8:	push	{fp, lr}
   134dc:	mov	fp, sp
   134e0:	sub	sp, sp, #48	; 0x30
   134e4:	mov	ip, r1
   134e8:	mov	r1, r0
   134ec:	movw	r0, #24904	; 0x6148
   134f0:	mov	r2, #32
   134f4:	movt	r0, #2
   134f8:	add	r3, r0, #16
   134fc:	vld1.64	{d16-d17}, [r0], r2
   13500:	vld1.64	{d18-d19}, [r3]
   13504:	vld1.64	{d20-d21}, [r0]
   13508:	mov	r3, sp
   1350c:	add	r2, r3, #16
   13510:	add	r0, r3, #32
   13514:	vst1.64	{d18-d19}, [r2]
   13518:	vst1.64	{d20-d21}, [r0]
   1351c:	mov	r0, #12
   13520:	mov	r2, r3
   13524:	vst1.64	{d16-d17}, [r2], r0
   13528:	ldr	r0, [r2]
   1352c:	orr	r0, r0, #67108864	; 0x4000000
   13530:	str	r0, [r2]
   13534:	mov	r0, #0
   13538:	mov	r2, ip
   1353c:	bl	13058 <__assert_fail@plt+0x21cc>
   13540:	mov	sp, fp
   13544:	pop	{fp, pc}
   13548:	push	{r4, sl, fp, lr}
   1354c:	add	fp, sp, #8
   13550:	sub	sp, sp, #96	; 0x60
   13554:	vmov.i32	q8, #0	; 0x00000000
   13558:	mov	ip, r2
   1355c:	mov	r2, sp
   13560:	mov	r4, #28
   13564:	cmp	r1, #10
   13568:	mov	r3, r2
   1356c:	add	lr, r2, #16
   13570:	vst1.64	{d16-d17}, [r3], r4
   13574:	vst1.64	{d16-d17}, [lr]
   13578:	vst1.32	{d16-d17}, [r3]
   1357c:	beq	135cc <__assert_fail@plt+0x2740>
   13580:	vld1.64	{d16-d17}, [r2], r4
   13584:	vld1.64	{d18-d19}, [lr]
   13588:	add	r3, sp, #48	; 0x30
   1358c:	vld1.32	{d20-d21}, [r2]
   13590:	add	r2, r3, #20
   13594:	add	r4, r3, #4
   13598:	vst1.32	{d18-d19}, [r2]
   1359c:	add	r2, r3, #32
   135a0:	vst1.32	{d16-d17}, [r4]
   135a4:	vst1.32	{d20-d21}, [r2]
   135a8:	str	r1, [sp, #48]	; 0x30
   135ac:	mvn	r2, #0
   135b0:	ldr	r1, [sp, #60]	; 0x3c
   135b4:	orr	r1, r1, #67108864	; 0x4000000
   135b8:	str	r1, [sp, #60]	; 0x3c
   135bc:	mov	r1, ip
   135c0:	bl	13058 <__assert_fail@plt+0x21cc>
   135c4:	sub	sp, fp, #8
   135c8:	pop	{r4, sl, fp, pc}
   135cc:	bl	10e80 <abort@plt>
   135d0:	push	{r4, r5, r6, sl, fp, lr}
   135d4:	add	fp, sp, #16
   135d8:	sub	sp, sp, #48	; 0x30
   135dc:	mov	ip, r3
   135e0:	movw	r3, #24904	; 0x6148
   135e4:	mov	r6, #32
   135e8:	cmp	r1, #0
   135ec:	mov	r4, sp
   135f0:	movt	r3, #2
   135f4:	cmpne	r2, #0
   135f8:	add	r5, r4, #16
   135fc:	add	lr, r3, #16
   13600:	vld1.64	{d16-d17}, [r3], r6
   13604:	vld1.64	{d18-d19}, [lr]
   13608:	vld1.64	{d20-d21}, [r3]
   1360c:	mov	r3, #10
   13610:	vst1.64	{d16-d17}, [r4], r6
   13614:	vst1.64	{d18-d19}, [r5]
   13618:	vst1.64	{d20-d21}, [r4]
   1361c:	str	r3, [sp]
   13620:	bne	13628 <__assert_fail@plt+0x279c>
   13624:	bl	10e80 <abort@plt>
   13628:	str	r2, [sp, #44]	; 0x2c
   1362c:	str	r1, [sp, #40]	; 0x28
   13630:	mov	r3, sp
   13634:	mov	r1, ip
   13638:	mvn	r2, #0
   1363c:	bl	13058 <__assert_fail@plt+0x21cc>
   13640:	sub	sp, fp, #16
   13644:	pop	{r4, r5, r6, sl, fp, pc}
   13648:	push	{r4, r5, r6, sl, fp, lr}
   1364c:	add	fp, sp, #16
   13650:	sub	sp, sp, #48	; 0x30
   13654:	mov	lr, r3
   13658:	movw	r3, #24904	; 0x6148
   1365c:	mov	r6, #32
   13660:	cmp	r1, #0
   13664:	mov	r4, sp
   13668:	movt	r3, #2
   1366c:	cmpne	r2, #0
   13670:	add	r5, r4, #16
   13674:	add	ip, r3, #16
   13678:	vld1.64	{d16-d17}, [r3], r6
   1367c:	vld1.64	{d18-d19}, [ip]
   13680:	vld1.64	{d20-d21}, [r3]
   13684:	mov	r3, #10
   13688:	vst1.64	{d16-d17}, [r4], r6
   1368c:	vst1.64	{d18-d19}, [r5]
   13690:	vst1.64	{d20-d21}, [r4]
   13694:	str	r3, [sp]
   13698:	bne	136a0 <__assert_fail@plt+0x2814>
   1369c:	bl	10e80 <abort@plt>
   136a0:	ldr	ip, [fp, #8]
   136a4:	str	r2, [sp, #44]	; 0x2c
   136a8:	str	r1, [sp, #40]	; 0x28
   136ac:	mov	r3, sp
   136b0:	mov	r1, lr
   136b4:	mov	r2, ip
   136b8:	bl	13058 <__assert_fail@plt+0x21cc>
   136bc:	sub	sp, fp, #16
   136c0:	pop	{r4, r5, r6, sl, fp, pc}
   136c4:	push	{r4, sl, fp, lr}
   136c8:	add	fp, sp, #8
   136cc:	sub	sp, sp, #48	; 0x30
   136d0:	movw	r3, #24904	; 0x6148
   136d4:	mov	lr, #32
   136d8:	mov	ip, r2
   136dc:	cmp	r0, #0
   136e0:	movt	r3, #2
   136e4:	cmpne	r1, #0
   136e8:	add	r2, r3, #16
   136ec:	vld1.64	{d16-d17}, [r3], lr
   136f0:	vld1.64	{d20-d21}, [r3]
   136f4:	vld1.64	{d18-d19}, [r2]
   136f8:	mov	r2, sp
   136fc:	add	r4, r2, #16
   13700:	vst1.64	{d16-d17}, [r2], lr
   13704:	vst1.64	{d20-d21}, [r2]
   13708:	mov	r2, #10
   1370c:	vst1.64	{d18-d19}, [r4]
   13710:	str	r2, [sp]
   13714:	bne	1371c <__assert_fail@plt+0x2890>
   13718:	bl	10e80 <abort@plt>
   1371c:	str	r1, [sp, #44]	; 0x2c
   13720:	str	r0, [sp, #40]	; 0x28
   13724:	mov	r3, sp
   13728:	mov	r0, #0
   1372c:	mov	r1, ip
   13730:	mvn	r2, #0
   13734:	bl	13058 <__assert_fail@plt+0x21cc>
   13738:	sub	sp, fp, #8
   1373c:	pop	{r4, sl, fp, pc}
   13740:	push	{r4, r5, fp, lr}
   13744:	add	fp, sp, #8
   13748:	sub	sp, sp, #48	; 0x30
   1374c:	mov	ip, r3
   13750:	movw	r3, #24904	; 0x6148
   13754:	mov	r4, #32
   13758:	mov	lr, r2
   1375c:	cmp	r0, #0
   13760:	movt	r3, #2
   13764:	cmpne	r1, #0
   13768:	add	r2, r3, #16
   1376c:	vld1.64	{d16-d17}, [r3], r4
   13770:	vld1.64	{d20-d21}, [r3]
   13774:	vld1.64	{d18-d19}, [r2]
   13778:	mov	r2, sp
   1377c:	add	r5, r2, #16
   13780:	vst1.64	{d16-d17}, [r2], r4
   13784:	vst1.64	{d20-d21}, [r2]
   13788:	mov	r2, #10
   1378c:	vst1.64	{d18-d19}, [r5]
   13790:	str	r2, [sp]
   13794:	bne	1379c <__assert_fail@plt+0x2910>
   13798:	bl	10e80 <abort@plt>
   1379c:	str	r1, [sp, #44]	; 0x2c
   137a0:	str	r0, [sp, #40]	; 0x28
   137a4:	mov	r3, sp
   137a8:	mov	r0, #0
   137ac:	mov	r1, lr
   137b0:	mov	r2, ip
   137b4:	bl	13058 <__assert_fail@plt+0x21cc>
   137b8:	sub	sp, fp, #8
   137bc:	pop	{r4, r5, fp, pc}
   137c0:	movw	r3, #24784	; 0x60d0
   137c4:	movt	r3, #2
   137c8:	b	13058 <__assert_fail@plt+0x21cc>
   137cc:	movw	r3, #24784	; 0x60d0
   137d0:	mov	r2, r1
   137d4:	mov	r1, r0
   137d8:	mov	r0, #0
   137dc:	movt	r3, #2
   137e0:	b	13058 <__assert_fail@plt+0x21cc>
   137e4:	movw	r3, #24784	; 0x60d0
   137e8:	mvn	r2, #0
   137ec:	movt	r3, #2
   137f0:	b	13058 <__assert_fail@plt+0x21cc>
   137f4:	movw	r3, #24784	; 0x60d0
   137f8:	mov	r1, r0
   137fc:	mov	r0, #0
   13800:	mvn	r2, #0
   13804:	movt	r3, #2
   13808:	b	13058 <__assert_fail@plt+0x21cc>
   1380c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13810:	add	fp, sp, #24
   13814:	sub	sp, sp, #32
   13818:	ldr	r7, [fp, #12]
   1381c:	ldr	r6, [fp, #8]
   13820:	mov	r4, r2
   13824:	mov	r5, r0
   13828:	cmp	r1, #0
   1382c:	beq	1384c <__assert_fail@plt+0x29c0>
   13830:	mov	r2, r1
   13834:	movw	r1, #19988	; 0x4e14
   13838:	str	r3, [sp]
   1383c:	mov	r0, r5
   13840:	mov	r3, r4
   13844:	movt	r1, #1
   13848:	b	1385c <__assert_fail@plt+0x29d0>
   1384c:	movw	r1, #20000	; 0x4e20
   13850:	mov	r0, r5
   13854:	mov	r2, r4
   13858:	movt	r1, #1
   1385c:	bl	10dcc <fprintf@plt>
   13860:	movw	r1, #20007	; 0x4e27
   13864:	mov	r0, #0
   13868:	mov	r2, #5
   1386c:	movt	r1, #1
   13870:	bl	10cf4 <dcgettext@plt>
   13874:	movw	r1, #20703	; 0x50df
   13878:	mov	r2, r0
   1387c:	mov	r0, r5
   13880:	movw	r3, #2022	; 0x7e6
   13884:	movt	r1, #1
   13888:	bl	10dcc <fprintf@plt>
   1388c:	mov	r0, #10
   13890:	mov	r1, r5
   13894:	bl	10e44 <fputc@plt>
   13898:	movw	r1, #20011	; 0x4e2b
   1389c:	mov	r0, #0
   138a0:	mov	r2, #5
   138a4:	movt	r1, #1
   138a8:	bl	10cf4 <dcgettext@plt>
   138ac:	movw	r2, #20182	; 0x4ed6
   138b0:	mov	r1, r0
   138b4:	mov	r0, r5
   138b8:	movt	r2, #1
   138bc:	bl	10dcc <fprintf@plt>
   138c0:	mov	r0, #10
   138c4:	mov	r1, r5
   138c8:	bl	10e44 <fputc@plt>
   138cc:	cmp	r7, #9
   138d0:	bhi	1390c <__assert_fail@plt+0x2a80>
   138d4:	add	r0, pc, #0
   138d8:	ldr	pc, [r0, r7, lsl #2]
   138dc:	andeq	r3, r1, r4, lsl #18
   138e0:	andeq	r3, r1, r8, lsl r9
   138e4:	andeq	r3, r1, r4, asr #18
   138e8:	andeq	r3, r1, r0, ror r9
   138ec:	andeq	r3, r1, r4, lsr #19
   138f0:	ldrdeq	r3, [r1], -ip
   138f4:	andeq	r3, r1, ip, lsl sl
   138f8:	andeq	r3, r1, r4, ror #20
   138fc:	andeq	r3, r1, r0, lsl #22
   13900:	andeq	r3, r1, r8, lsr #21
   13904:	sub	sp, fp, #24
   13908:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1390c:	movw	r1, #20535	; 0x5037
   13910:	movt	r1, #1
   13914:	b	13ab0 <__assert_fail@plt+0x2c24>
   13918:	movw	r1, #20216	; 0x4ef8
   1391c:	mov	r0, #0
   13920:	mov	r2, #5
   13924:	movt	r1, #1
   13928:	bl	10cf4 <dcgettext@plt>
   1392c:	ldr	r2, [r6]
   13930:	mov	r1, r0
   13934:	mov	r0, r5
   13938:	sub	sp, fp, #24
   1393c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13940:	b	10dcc <fprintf@plt>
   13944:	movw	r1, #20232	; 0x4f08
   13948:	mov	r0, #0
   1394c:	mov	r2, #5
   13950:	movt	r1, #1
   13954:	bl	10cf4 <dcgettext@plt>
   13958:	ldm	r6, {r2, r3}
   1395c:	mov	r1, r0
   13960:	mov	r0, r5
   13964:	sub	sp, fp, #24
   13968:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1396c:	b	10dcc <fprintf@plt>
   13970:	movw	r1, #20255	; 0x4f1f
   13974:	mov	r0, #0
   13978:	mov	r2, #5
   1397c:	movt	r1, #1
   13980:	bl	10cf4 <dcgettext@plt>
   13984:	mov	r1, r0
   13988:	ldr	r0, [r6, #8]
   1398c:	ldm	r6, {r2, r3}
   13990:	str	r0, [sp]
   13994:	mov	r0, r5
   13998:	bl	10dcc <fprintf@plt>
   1399c:	sub	sp, fp, #24
   139a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   139a4:	movw	r1, #20283	; 0x4f3b
   139a8:	mov	r0, #0
   139ac:	mov	r2, #5
   139b0:	movt	r1, #1
   139b4:	bl	10cf4 <dcgettext@plt>
   139b8:	mov	r1, r0
   139bc:	ldr	r0, [r6, #8]
   139c0:	ldm	r6, {r2, r3}
   139c4:	ldr	r7, [r6, #12]
   139c8:	stm	sp, {r0, r7}
   139cc:	mov	r0, r5
   139d0:	bl	10dcc <fprintf@plt>
   139d4:	sub	sp, fp, #24
   139d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   139dc:	movw	r1, #20315	; 0x4f5b
   139e0:	mov	r0, #0
   139e4:	mov	r2, #5
   139e8:	movt	r1, #1
   139ec:	bl	10cf4 <dcgettext@plt>
   139f0:	mov	r1, r0
   139f4:	ldm	r6, {r2, r3}
   139f8:	ldr	r0, [r6, #8]
   139fc:	ldr	r7, [r6, #12]
   13a00:	ldr	r6, [r6, #16]
   13a04:	stm	sp, {r0, r7}
   13a08:	str	r6, [sp, #8]
   13a0c:	mov	r0, r5
   13a10:	bl	10dcc <fprintf@plt>
   13a14:	sub	sp, fp, #24
   13a18:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13a1c:	movw	r1, #20351	; 0x4f7f
   13a20:	mov	r0, #0
   13a24:	mov	r2, #5
   13a28:	movt	r1, #1
   13a2c:	bl	10cf4 <dcgettext@plt>
   13a30:	mov	r1, r0
   13a34:	ldm	r6, {r2, r3}
   13a38:	ldr	r0, [r6, #8]
   13a3c:	ldr	r7, [r6, #12]
   13a40:	ldr	r4, [r6, #16]
   13a44:	ldr	r6, [r6, #20]
   13a48:	stm	sp, {r0, r7}
   13a4c:	str	r4, [sp, #8]
   13a50:	str	r6, [sp, #12]
   13a54:	mov	r0, r5
   13a58:	bl	10dcc <fprintf@plt>
   13a5c:	sub	sp, fp, #24
   13a60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13a64:	movw	r1, #20391	; 0x4fa7
   13a68:	mov	r0, #0
   13a6c:	mov	r2, #5
   13a70:	movt	r1, #1
   13a74:	bl	10cf4 <dcgettext@plt>
   13a78:	mov	ip, r0
   13a7c:	ldm	r6, {r2, r3}
   13a80:	ldr	r0, [r6, #8]
   13a84:	ldr	r7, [r6, #12]
   13a88:	ldr	r4, [r6, #16]
   13a8c:	ldr	r1, [r6, #20]
   13a90:	ldr	r6, [r6, #24]
   13a94:	stm	sp, {r0, r7}
   13a98:	str	r4, [sp, #8]
   13a9c:	str	r1, [sp, #12]
   13aa0:	str	r6, [sp, #16]
   13aa4:	b	13b48 <__assert_fail@plt+0x2cbc>
   13aa8:	movw	r1, #20483	; 0x5003
   13aac:	movt	r1, #1
   13ab0:	mov	r0, #0
   13ab4:	mov	r2, #5
   13ab8:	bl	10cf4 <dcgettext@plt>
   13abc:	mov	ip, r0
   13ac0:	ldr	r2, [r6]
   13ac4:	ldr	r3, [r6, #4]
   13ac8:	ldr	r0, [r6, #8]
   13acc:	ldr	r7, [r6, #12]
   13ad0:	ldr	r4, [r6, #16]
   13ad4:	ldr	r1, [r6, #20]
   13ad8:	ldr	lr, [r6, #24]
   13adc:	ldr	r8, [r6, #28]
   13ae0:	ldr	r6, [r6, #32]
   13ae4:	stm	sp, {r0, r7}
   13ae8:	str	r4, [sp, #8]
   13aec:	str	r1, [sp, #12]
   13af0:	str	lr, [sp, #16]
   13af4:	str	r8, [sp, #20]
   13af8:	str	r6, [sp, #24]
   13afc:	b	13b48 <__assert_fail@plt+0x2cbc>
   13b00:	movw	r1, #20435	; 0x4fd3
   13b04:	mov	r0, #0
   13b08:	mov	r2, #5
   13b0c:	movt	r1, #1
   13b10:	bl	10cf4 <dcgettext@plt>
   13b14:	mov	ip, r0
   13b18:	ldm	r6, {r2, r3}
   13b1c:	ldr	r0, [r6, #8]
   13b20:	ldr	r7, [r6, #12]
   13b24:	ldr	r4, [r6, #16]
   13b28:	ldr	r1, [r6, #20]
   13b2c:	ldr	lr, [r6, #24]
   13b30:	ldr	r6, [r6, #28]
   13b34:	stm	sp, {r0, r7}
   13b38:	str	r4, [sp, #8]
   13b3c:	str	r1, [sp, #12]
   13b40:	str	lr, [sp, #16]
   13b44:	str	r6, [sp, #20]
   13b48:	mov	r0, r5
   13b4c:	mov	r1, ip
   13b50:	bl	10dcc <fprintf@plt>
   13b54:	sub	sp, fp, #24
   13b58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b5c:	push	{r4, sl, fp, lr}
   13b60:	add	fp, sp, #8
   13b64:	sub	sp, sp, #8
   13b68:	ldr	ip, [fp, #8]
   13b6c:	mov	lr, #0
   13b70:	ldr	r4, [ip, lr, lsl #2]
   13b74:	add	lr, lr, #1
   13b78:	cmp	r4, #0
   13b7c:	bne	13b70 <__assert_fail@plt+0x2ce4>
   13b80:	sub	r4, lr, #1
   13b84:	str	ip, [sp]
   13b88:	str	r4, [sp, #4]
   13b8c:	bl	1380c <__assert_fail@plt+0x2980>
   13b90:	sub	sp, fp, #8
   13b94:	pop	{r4, sl, fp, pc}
   13b98:	push	{fp, lr}
   13b9c:	mov	fp, sp
   13ba0:	sub	sp, sp, #48	; 0x30
   13ba4:	ldr	ip, [fp, #8]
   13ba8:	ldr	lr, [ip]
   13bac:	cmp	lr, #0
   13bb0:	str	lr, [sp, #8]
   13bb4:	beq	13c50 <__assert_fail@plt+0x2dc4>
   13bb8:	ldr	lr, [ip, #4]
   13bbc:	cmp	lr, #0
   13bc0:	str	lr, [sp, #12]
   13bc4:	beq	13c58 <__assert_fail@plt+0x2dcc>
   13bc8:	ldr	lr, [ip, #8]
   13bcc:	cmp	lr, #0
   13bd0:	str	lr, [sp, #16]
   13bd4:	beq	13c60 <__assert_fail@plt+0x2dd4>
   13bd8:	ldr	lr, [ip, #12]
   13bdc:	cmp	lr, #0
   13be0:	str	lr, [sp, #20]
   13be4:	beq	13c68 <__assert_fail@plt+0x2ddc>
   13be8:	ldr	lr, [ip, #16]
   13bec:	cmp	lr, #0
   13bf0:	str	lr, [sp, #24]
   13bf4:	beq	13c70 <__assert_fail@plt+0x2de4>
   13bf8:	ldr	lr, [ip, #20]
   13bfc:	cmp	lr, #0
   13c00:	str	lr, [sp, #28]
   13c04:	beq	13c78 <__assert_fail@plt+0x2dec>
   13c08:	ldr	lr, [ip, #24]
   13c0c:	cmp	lr, #0
   13c10:	str	lr, [sp, #32]
   13c14:	beq	13c80 <__assert_fail@plt+0x2df4>
   13c18:	ldr	lr, [ip, #28]
   13c1c:	cmp	lr, #0
   13c20:	str	lr, [sp, #36]	; 0x24
   13c24:	beq	13c88 <__assert_fail@plt+0x2dfc>
   13c28:	ldr	lr, [ip, #32]
   13c2c:	cmp	lr, #0
   13c30:	str	lr, [sp, #40]	; 0x28
   13c34:	beq	13c90 <__assert_fail@plt+0x2e04>
   13c38:	ldr	lr, [ip, #36]	; 0x24
   13c3c:	mov	ip, #10
   13c40:	cmp	lr, #0
   13c44:	str	lr, [sp, #44]	; 0x2c
   13c48:	movweq	ip, #9
   13c4c:	b	13c94 <__assert_fail@plt+0x2e08>
   13c50:	mov	ip, #0
   13c54:	b	13c94 <__assert_fail@plt+0x2e08>
   13c58:	mov	ip, #1
   13c5c:	b	13c94 <__assert_fail@plt+0x2e08>
   13c60:	mov	ip, #2
   13c64:	b	13c94 <__assert_fail@plt+0x2e08>
   13c68:	mov	ip, #3
   13c6c:	b	13c94 <__assert_fail@plt+0x2e08>
   13c70:	mov	ip, #4
   13c74:	b	13c94 <__assert_fail@plt+0x2e08>
   13c78:	mov	ip, #5
   13c7c:	b	13c94 <__assert_fail@plt+0x2e08>
   13c80:	mov	ip, #6
   13c84:	b	13c94 <__assert_fail@plt+0x2e08>
   13c88:	mov	ip, #7
   13c8c:	b	13c94 <__assert_fail@plt+0x2e08>
   13c90:	mov	ip, #8
   13c94:	add	lr, sp, #8
   13c98:	str	ip, [sp, #4]
   13c9c:	str	lr, [sp]
   13ca0:	bl	1380c <__assert_fail@plt+0x2980>
   13ca4:	mov	sp, fp
   13ca8:	pop	{fp, pc}
   13cac:	push	{fp, lr}
   13cb0:	mov	fp, sp
   13cb4:	sub	sp, sp, #56	; 0x38
   13cb8:	add	ip, fp, #8
   13cbc:	str	ip, [sp, #12]
   13cc0:	ldr	lr, [fp, #8]
   13cc4:	cmp	lr, #0
   13cc8:	str	lr, [sp, #16]
   13ccc:	beq	13d68 <__assert_fail@plt+0x2edc>
   13cd0:	ldr	lr, [ip, #4]
   13cd4:	cmp	lr, #0
   13cd8:	str	lr, [sp, #20]
   13cdc:	beq	13d70 <__assert_fail@plt+0x2ee4>
   13ce0:	ldr	lr, [ip, #8]
   13ce4:	cmp	lr, #0
   13ce8:	str	lr, [sp, #24]
   13cec:	beq	13d78 <__assert_fail@plt+0x2eec>
   13cf0:	ldr	lr, [ip, #12]
   13cf4:	cmp	lr, #0
   13cf8:	str	lr, [sp, #28]
   13cfc:	beq	13d80 <__assert_fail@plt+0x2ef4>
   13d00:	ldr	lr, [ip, #16]
   13d04:	cmp	lr, #0
   13d08:	str	lr, [sp, #32]
   13d0c:	beq	13d88 <__assert_fail@plt+0x2efc>
   13d10:	ldr	lr, [ip, #20]
   13d14:	cmp	lr, #0
   13d18:	str	lr, [sp, #36]	; 0x24
   13d1c:	beq	13d90 <__assert_fail@plt+0x2f04>
   13d20:	ldr	lr, [ip, #24]
   13d24:	cmp	lr, #0
   13d28:	str	lr, [sp, #40]	; 0x28
   13d2c:	beq	13d98 <__assert_fail@plt+0x2f0c>
   13d30:	ldr	lr, [ip, #28]
   13d34:	cmp	lr, #0
   13d38:	str	lr, [sp, #44]	; 0x2c
   13d3c:	beq	13da0 <__assert_fail@plt+0x2f14>
   13d40:	ldr	lr, [ip, #32]
   13d44:	cmp	lr, #0
   13d48:	str	lr, [sp, #48]	; 0x30
   13d4c:	beq	13da8 <__assert_fail@plt+0x2f1c>
   13d50:	ldr	lr, [ip, #36]	; 0x24
   13d54:	mov	ip, #10
   13d58:	cmp	lr, #0
   13d5c:	str	lr, [sp, #52]	; 0x34
   13d60:	movweq	ip, #9
   13d64:	b	13dac <__assert_fail@plt+0x2f20>
   13d68:	mov	ip, #0
   13d6c:	b	13dac <__assert_fail@plt+0x2f20>
   13d70:	mov	ip, #1
   13d74:	b	13dac <__assert_fail@plt+0x2f20>
   13d78:	mov	ip, #2
   13d7c:	b	13dac <__assert_fail@plt+0x2f20>
   13d80:	mov	ip, #3
   13d84:	b	13dac <__assert_fail@plt+0x2f20>
   13d88:	mov	ip, #4
   13d8c:	b	13dac <__assert_fail@plt+0x2f20>
   13d90:	mov	ip, #5
   13d94:	b	13dac <__assert_fail@plt+0x2f20>
   13d98:	mov	ip, #6
   13d9c:	b	13dac <__assert_fail@plt+0x2f20>
   13da0:	mov	ip, #7
   13da4:	b	13dac <__assert_fail@plt+0x2f20>
   13da8:	mov	ip, #8
   13dac:	add	lr, sp, #16
   13db0:	str	ip, [sp, #4]
   13db4:	str	lr, [sp]
   13db8:	bl	1380c <__assert_fail@plt+0x2980>
   13dbc:	mov	sp, fp
   13dc0:	pop	{fp, pc}
   13dc4:	push	{fp, lr}
   13dc8:	mov	fp, sp
   13dcc:	movw	r0, #24876	; 0x612c
   13dd0:	movt	r0, #2
   13dd4:	ldr	r1, [r0]
   13dd8:	mov	r0, #10
   13ddc:	bl	10e44 <fputc@plt>
   13de0:	movw	r1, #20595	; 0x5073
   13de4:	mov	r0, #0
   13de8:	mov	r2, #5
   13dec:	movt	r1, #1
   13df0:	bl	10cf4 <dcgettext@plt>
   13df4:	movw	r1, #19709	; 0x4cfd
   13df8:	movt	r1, #1
   13dfc:	bl	10ca0 <printf@plt>
   13e00:	movw	r1, #20615	; 0x5087
   13e04:	mov	r0, #0
   13e08:	mov	r2, #5
   13e0c:	movt	r1, #1
   13e10:	bl	10cf4 <dcgettext@plt>
   13e14:	movw	r1, #19360	; 0x4ba0
   13e18:	movw	r2, #19623	; 0x4ca7
   13e1c:	movt	r1, #1
   13e20:	movt	r2, #1
   13e24:	bl	10ca0 <printf@plt>
   13e28:	movw	r1, #20635	; 0x509b
   13e2c:	mov	r0, #0
   13e30:	mov	r2, #5
   13e34:	movt	r1, #1
   13e38:	bl	10cf4 <dcgettext@plt>
   13e3c:	movw	r1, #20674	; 0x50c2
   13e40:	movt	r1, #1
   13e44:	pop	{fp, lr}
   13e48:	b	10ca0 <printf@plt>
   13e4c:	push	{r4, r5, r6, sl, fp, lr}
   13e50:	add	fp, sp, #16
   13e54:	mov	r4, r2
   13e58:	mov	r5, r1
   13e5c:	mov	r6, r0
   13e60:	bl	146ac <__assert_fail@plt+0x3820>
   13e64:	cmp	r0, #0
   13e68:	popne	{r4, r5, r6, sl, fp, pc}
   13e6c:	cmp	r6, #0
   13e70:	beq	13e84 <__assert_fail@plt+0x2ff8>
   13e74:	cmp	r5, #0
   13e78:	cmpne	r4, #0
   13e7c:	bne	13e84 <__assert_fail@plt+0x2ff8>
   13e80:	pop	{r4, r5, r6, sl, fp, pc}
   13e84:	bl	14400 <__assert_fail@plt+0x3574>
   13e88:	push	{r4, r5, r6, sl, fp, lr}
   13e8c:	add	fp, sp, #16
   13e90:	mov	r4, r2
   13e94:	mov	r5, r1
   13e98:	mov	r6, r0
   13e9c:	bl	146ac <__assert_fail@plt+0x3820>
   13ea0:	cmp	r0, #0
   13ea4:	popne	{r4, r5, r6, sl, fp, pc}
   13ea8:	cmp	r6, #0
   13eac:	beq	13ec0 <__assert_fail@plt+0x3034>
   13eb0:	cmp	r5, #0
   13eb4:	cmpne	r4, #0
   13eb8:	bne	13ec0 <__assert_fail@plt+0x3034>
   13ebc:	pop	{r4, r5, r6, sl, fp, pc}
   13ec0:	bl	14400 <__assert_fail@plt+0x3574>
   13ec4:	push	{fp, lr}
   13ec8:	mov	fp, sp
   13ecc:	bl	145c4 <__assert_fail@plt+0x3738>
   13ed0:	cmp	r0, #0
   13ed4:	popne	{fp, pc}
   13ed8:	bl	14400 <__assert_fail@plt+0x3574>
   13edc:	push	{fp, lr}
   13ee0:	mov	fp, sp
   13ee4:	bl	145c4 <__assert_fail@plt+0x3738>
   13ee8:	cmp	r0, #0
   13eec:	popne	{fp, pc}
   13ef0:	bl	14400 <__assert_fail@plt+0x3574>
   13ef4:	push	{fp, lr}
   13ef8:	mov	fp, sp
   13efc:	bl	145c4 <__assert_fail@plt+0x3738>
   13f00:	cmp	r0, #0
   13f04:	popne	{fp, pc}
   13f08:	bl	14400 <__assert_fail@plt+0x3574>
   13f0c:	push	{r4, r5, fp, lr}
   13f10:	add	fp, sp, #8
   13f14:	mov	r4, r1
   13f18:	mov	r5, r0
   13f1c:	bl	14658 <__assert_fail@plt+0x37cc>
   13f20:	cmp	r0, #0
   13f24:	popne	{r4, r5, fp, pc}
   13f28:	cmp	r5, #0
   13f2c:	beq	13f3c <__assert_fail@plt+0x30b0>
   13f30:	cmp	r4, #0
   13f34:	bne	13f3c <__assert_fail@plt+0x30b0>
   13f38:	pop	{r4, r5, fp, pc}
   13f3c:	bl	14400 <__assert_fail@plt+0x3574>
   13f40:	push	{fp, lr}
   13f44:	mov	fp, sp
   13f48:	cmp	r1, #0
   13f4c:	orreq	r1, r1, #1
   13f50:	bl	14658 <__assert_fail@plt+0x37cc>
   13f54:	cmp	r0, #0
   13f58:	popne	{fp, pc}
   13f5c:	bl	14400 <__assert_fail@plt+0x3574>
   13f60:	push	{fp, lr}
   13f64:	mov	fp, sp
   13f68:	clz	r3, r2
   13f6c:	lsr	ip, r3, #5
   13f70:	clz	r3, r1
   13f74:	lsr	r3, r3, #5
   13f78:	orrs	r3, r3, ip
   13f7c:	movwne	r1, #1
   13f80:	movwne	r2, #1
   13f84:	bl	146ac <__assert_fail@plt+0x3820>
   13f88:	cmp	r0, #0
   13f8c:	popne	{fp, pc}
   13f90:	bl	14400 <__assert_fail@plt+0x3574>
   13f94:	push	{fp, lr}
   13f98:	mov	fp, sp
   13f9c:	mov	r2, r1
   13fa0:	mov	r1, r0
   13fa4:	mov	r0, #0
   13fa8:	bl	146ac <__assert_fail@plt+0x3820>
   13fac:	cmp	r0, #0
   13fb0:	popne	{fp, pc}
   13fb4:	bl	14400 <__assert_fail@plt+0x3574>
   13fb8:	push	{fp, lr}
   13fbc:	mov	fp, sp
   13fc0:	mov	r2, r1
   13fc4:	mov	r1, r0
   13fc8:	clz	r0, r2
   13fcc:	clz	r3, r1
   13fd0:	lsr	r0, r0, #5
   13fd4:	lsr	r3, r3, #5
   13fd8:	orrs	r0, r3, r0
   13fdc:	mov	r0, #0
   13fe0:	movwne	r1, #1
   13fe4:	movwne	r2, #1
   13fe8:	bl	146ac <__assert_fail@plt+0x3820>
   13fec:	cmp	r0, #0
   13ff0:	popne	{fp, pc}
   13ff4:	bl	14400 <__assert_fail@plt+0x3574>
   13ff8:	push	{r4, r5, r6, sl, fp, lr}
   13ffc:	add	fp, sp, #16
   14000:	ldr	r5, [r1]
   14004:	mov	r4, r1
   14008:	mov	r6, r0
   1400c:	cmp	r0, #0
   14010:	beq	14028 <__assert_fail@plt+0x319c>
   14014:	mov	r0, #1
   14018:	add	r0, r0, r5, lsr #1
   1401c:	adds	r5, r5, r0
   14020:	bcc	14030 <__assert_fail@plt+0x31a4>
   14024:	b	1406c <__assert_fail@plt+0x31e0>
   14028:	cmp	r5, #0
   1402c:	movweq	r5, #64	; 0x40
   14030:	mov	r0, r6
   14034:	mov	r1, r5
   14038:	mov	r2, #1
   1403c:	bl	146ac <__assert_fail@plt+0x3820>
   14040:	cmp	r5, #0
   14044:	mov	r1, r5
   14048:	movwne	r1, #1
   1404c:	cmp	r0, #0
   14050:	bne	14064 <__assert_fail@plt+0x31d8>
   14054:	clz	r2, r6
   14058:	lsr	r2, r2, #5
   1405c:	orrs	r1, r2, r1
   14060:	bne	1406c <__assert_fail@plt+0x31e0>
   14064:	str	r5, [r4]
   14068:	pop	{r4, r5, r6, sl, fp, pc}
   1406c:	bl	14400 <__assert_fail@plt+0x3574>
   14070:	push	{r4, r5, r6, r7, fp, lr}
   14074:	add	fp, sp, #16
   14078:	ldr	r5, [r1]
   1407c:	mov	r6, r2
   14080:	mov	r4, r1
   14084:	mov	r7, r0
   14088:	cmp	r0, #0
   1408c:	beq	140a4 <__assert_fail@plt+0x3218>
   14090:	mov	r0, #1
   14094:	add	r0, r0, r5, lsr #1
   14098:	adds	r5, r5, r0
   1409c:	bcc	140bc <__assert_fail@plt+0x3230>
   140a0:	b	140f0 <__assert_fail@plt+0x3264>
   140a4:	cmp	r5, #0
   140a8:	bne	140bc <__assert_fail@plt+0x3230>
   140ac:	mov	r0, #64	; 0x40
   140b0:	cmp	r6, #64	; 0x40
   140b4:	udiv	r5, r0, r6
   140b8:	addhi	r5, r5, #1
   140bc:	mov	r0, r7
   140c0:	mov	r1, r5
   140c4:	mov	r2, r6
   140c8:	bl	146ac <__assert_fail@plt+0x3820>
   140cc:	cmp	r0, #0
   140d0:	bne	140e8 <__assert_fail@plt+0x325c>
   140d4:	cmp	r7, #0
   140d8:	beq	140f0 <__assert_fail@plt+0x3264>
   140dc:	cmp	r6, #0
   140e0:	cmpne	r5, #0
   140e4:	bne	140f0 <__assert_fail@plt+0x3264>
   140e8:	str	r5, [r4]
   140ec:	pop	{r4, r5, r6, r7, fp, pc}
   140f0:	bl	14400 <__assert_fail@plt+0x3574>
   140f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   140f8:	add	fp, sp, #24
   140fc:	mov	r8, r1
   14100:	ldr	r1, [r1]
   14104:	mov	r5, r0
   14108:	add	r0, r1, r1, asr #1
   1410c:	cmp	r0, r1
   14110:	mvnvs	r0, #-2147483648	; 0x80000000
   14114:	cmp	r0, r3
   14118:	mov	r7, r0
   1411c:	movgt	r7, r3
   14120:	cmn	r3, #1
   14124:	movle	r7, r0
   14128:	ldr	r0, [fp, #8]
   1412c:	cmn	r0, #1
   14130:	ble	14158 <__assert_fail@plt+0x32cc>
   14134:	cmp	r0, #0
   14138:	beq	141ac <__assert_fail@plt+0x3320>
   1413c:	cmn	r7, #1
   14140:	ble	14180 <__assert_fail@plt+0x32f4>
   14144:	mvn	r4, #-2147483648	; 0x80000000
   14148:	udiv	r6, r4, r0
   1414c:	cmp	r6, r7
   14150:	bge	141ac <__assert_fail@plt+0x3320>
   14154:	b	141bc <__assert_fail@plt+0x3330>
   14158:	cmn	r7, #1
   1415c:	ble	1419c <__assert_fail@plt+0x3310>
   14160:	cmn	r0, #1
   14164:	beq	141ac <__assert_fail@plt+0x3320>
   14168:	mov	r6, #-2147483648	; 0x80000000
   1416c:	mvn	r4, #-2147483648	; 0x80000000
   14170:	sdiv	r6, r6, r0
   14174:	cmp	r6, r7
   14178:	bge	141ac <__assert_fail@plt+0x3320>
   1417c:	b	141bc <__assert_fail@plt+0x3330>
   14180:	beq	141ac <__assert_fail@plt+0x3320>
   14184:	mov	r6, #-2147483648	; 0x80000000
   14188:	mvn	r4, #-2147483648	; 0x80000000
   1418c:	sdiv	r6, r6, r7
   14190:	cmp	r6, r0
   14194:	bge	141ac <__assert_fail@plt+0x3320>
   14198:	b	141bc <__assert_fail@plt+0x3330>
   1419c:	mvn	r4, #-2147483648	; 0x80000000
   141a0:	sdiv	r6, r4, r0
   141a4:	cmp	r7, r6
   141a8:	blt	141bc <__assert_fail@plt+0x3330>
   141ac:	mul	r6, r7, r0
   141b0:	mov	r4, #64	; 0x40
   141b4:	cmp	r6, #63	; 0x3f
   141b8:	bgt	141c4 <__assert_fail@plt+0x3338>
   141bc:	sdiv	r7, r4, r0
   141c0:	mul	r6, r7, r0
   141c4:	cmp	r5, #0
   141c8:	moveq	r4, #0
   141cc:	streq	r4, [r8]
   141d0:	sub	r4, r7, r1
   141d4:	cmp	r4, r2
   141d8:	bge	14284 <__assert_fail@plt+0x33f8>
   141dc:	add	r7, r1, r2
   141e0:	mov	r6, #0
   141e4:	mov	r2, #0
   141e8:	cmp	r7, r3
   141ec:	movwgt	r6, #1
   141f0:	cmn	r3, #1
   141f4:	movwgt	r2, #1
   141f8:	cmp	r7, r1
   141fc:	bvs	142b8 <__assert_fail@plt+0x342c>
   14200:	ands	r1, r2, r6
   14204:	bne	142b8 <__assert_fail@plt+0x342c>
   14208:	cmn	r0, #1
   1420c:	ble	14234 <__assert_fail@plt+0x33a8>
   14210:	cmp	r0, #0
   14214:	beq	14280 <__assert_fail@plt+0x33f4>
   14218:	cmn	r7, #1
   1421c:	ble	14258 <__assert_fail@plt+0x33cc>
   14220:	mvn	r1, #-2147483648	; 0x80000000
   14224:	udiv	r1, r1, r0
   14228:	cmp	r1, r7
   1422c:	bge	14280 <__assert_fail@plt+0x33f4>
   14230:	b	142b8 <__assert_fail@plt+0x342c>
   14234:	cmn	r7, #1
   14238:	ble	14270 <__assert_fail@plt+0x33e4>
   1423c:	cmn	r0, #1
   14240:	beq	14280 <__assert_fail@plt+0x33f4>
   14244:	mov	r1, #-2147483648	; 0x80000000
   14248:	sdiv	r1, r1, r0
   1424c:	cmp	r1, r7
   14250:	bge	14280 <__assert_fail@plt+0x33f4>
   14254:	b	142b8 <__assert_fail@plt+0x342c>
   14258:	beq	14280 <__assert_fail@plt+0x33f4>
   1425c:	mov	r1, #-2147483648	; 0x80000000
   14260:	sdiv	r1, r1, r7
   14264:	cmp	r1, r0
   14268:	bge	14280 <__assert_fail@plt+0x33f4>
   1426c:	b	142b8 <__assert_fail@plt+0x342c>
   14270:	mvn	r1, #-2147483648	; 0x80000000
   14274:	sdiv	r1, r1, r0
   14278:	cmp	r7, r1
   1427c:	blt	142b8 <__assert_fail@plt+0x342c>
   14280:	mul	r6, r7, r0
   14284:	mov	r0, r5
   14288:	mov	r1, r6
   1428c:	bl	14658 <__assert_fail@plt+0x37cc>
   14290:	cmp	r6, #0
   14294:	movwne	r6, #1
   14298:	cmp	r0, #0
   1429c:	bne	142b0 <__assert_fail@plt+0x3424>
   142a0:	clz	r1, r5
   142a4:	lsr	r1, r1, #5
   142a8:	orrs	r1, r1, r6
   142ac:	bne	142b8 <__assert_fail@plt+0x342c>
   142b0:	str	r7, [r8]
   142b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   142b8:	bl	14400 <__assert_fail@plt+0x3574>
   142bc:	push	{fp, lr}
   142c0:	mov	fp, sp
   142c4:	mov	r1, #1
   142c8:	bl	14444 <__assert_fail@plt+0x35b8>
   142cc:	cmp	r0, #0
   142d0:	popne	{fp, pc}
   142d4:	bl	14400 <__assert_fail@plt+0x3574>
   142d8:	push	{fp, lr}
   142dc:	mov	fp, sp
   142e0:	bl	14444 <__assert_fail@plt+0x35b8>
   142e4:	cmp	r0, #0
   142e8:	popne	{fp, pc}
   142ec:	bl	14400 <__assert_fail@plt+0x3574>
   142f0:	push	{fp, lr}
   142f4:	mov	fp, sp
   142f8:	mov	r1, #1
   142fc:	bl	14444 <__assert_fail@plt+0x35b8>
   14300:	cmp	r0, #0
   14304:	popne	{fp, pc}
   14308:	bl	14400 <__assert_fail@plt+0x3574>
   1430c:	push	{fp, lr}
   14310:	mov	fp, sp
   14314:	bl	14444 <__assert_fail@plt+0x35b8>
   14318:	cmp	r0, #0
   1431c:	popne	{fp, pc}
   14320:	bl	14400 <__assert_fail@plt+0x3574>
   14324:	push	{r4, r5, fp, lr}
   14328:	add	fp, sp, #8
   1432c:	mov	r5, r0
   14330:	mov	r0, r1
   14334:	mov	r4, r1
   14338:	bl	145c4 <__assert_fail@plt+0x3738>
   1433c:	cmp	r0, #0
   14340:	beq	14354 <__assert_fail@plt+0x34c8>
   14344:	mov	r1, r5
   14348:	mov	r2, r4
   1434c:	pop	{r4, r5, fp, lr}
   14350:	b	10cdc <memcpy@plt>
   14354:	bl	14400 <__assert_fail@plt+0x3574>
   14358:	push	{r4, r5, fp, lr}
   1435c:	add	fp, sp, #8
   14360:	mov	r5, r0
   14364:	mov	r0, r1
   14368:	mov	r4, r1
   1436c:	bl	145c4 <__assert_fail@plt+0x3738>
   14370:	cmp	r0, #0
   14374:	beq	14388 <__assert_fail@plt+0x34fc>
   14378:	mov	r1, r5
   1437c:	mov	r2, r4
   14380:	pop	{r4, r5, fp, lr}
   14384:	b	10cdc <memcpy@plt>
   14388:	bl	14400 <__assert_fail@plt+0x3574>
   1438c:	push	{r4, r5, fp, lr}
   14390:	add	fp, sp, #8
   14394:	mov	r5, r0
   14398:	add	r0, r1, #1
   1439c:	mov	r4, r1
   143a0:	bl	145c4 <__assert_fail@plt+0x3738>
   143a4:	cmp	r0, #0
   143a8:	beq	143c4 <__assert_fail@plt+0x3538>
   143ac:	mov	r1, #0
   143b0:	mov	r2, r4
   143b4:	strb	r1, [r0, r4]
   143b8:	mov	r1, r5
   143bc:	pop	{r4, r5, fp, lr}
   143c0:	b	10cdc <memcpy@plt>
   143c4:	bl	14400 <__assert_fail@plt+0x3574>
   143c8:	push	{r4, r5, fp, lr}
   143cc:	add	fp, sp, #8
   143d0:	mov	r4, r0
   143d4:	bl	10dc0 <strlen@plt>
   143d8:	add	r5, r0, #1
   143dc:	mov	r0, r5
   143e0:	bl	145c4 <__assert_fail@plt+0x3738>
   143e4:	cmp	r0, #0
   143e8:	beq	143fc <__assert_fail@plt+0x3570>
   143ec:	mov	r1, r4
   143f0:	mov	r2, r5
   143f4:	pop	{r4, r5, fp, lr}
   143f8:	b	10cdc <memcpy@plt>
   143fc:	bl	14400 <__assert_fail@plt+0x3574>
   14400:	push	{fp, lr}
   14404:	mov	fp, sp
   14408:	movw	r0, #24780	; 0x60cc
   1440c:	movw	r1, #20750	; 0x510e
   14410:	mov	r2, #5
   14414:	movt	r0, #2
   14418:	movt	r1, #1
   1441c:	ldr	r4, [r0]
   14420:	mov	r0, #0
   14424:	bl	10cf4 <dcgettext@plt>
   14428:	movw	r2, #19735	; 0x4d17
   1442c:	mov	r3, r0
   14430:	mov	r0, r4
   14434:	mov	r1, #0
   14438:	movt	r2, #1
   1443c:	bl	10d54 <error@plt>
   14440:	bl	10e80 <abort@plt>
   14444:	clz	r2, r1
   14448:	clz	r3, r0
   1444c:	lsr	r2, r2, #5
   14450:	lsr	r3, r3, #5
   14454:	orrs	r2, r3, r2
   14458:	movwne	r1, #1
   1445c:	movwne	r0, #1
   14460:	cmp	r1, #0
   14464:	beq	14494 <__assert_fail@plt+0x3608>
   14468:	mvn	r2, #-2147483648	; 0x80000000
   1446c:	udiv	r2, r2, r1
   14470:	cmp	r2, r0
   14474:	bcs	14494 <__assert_fail@plt+0x3608>
   14478:	push	{fp, lr}
   1447c:	mov	fp, sp
   14480:	bl	10dd8 <__errno_location@plt>
   14484:	mov	r1, #12
   14488:	str	r1, [r0]
   1448c:	mov	r0, #0
   14490:	pop	{fp, pc}
   14494:	b	10c88 <calloc@plt>
   14498:	push	{r4, sl, fp, lr}
   1449c:	add	fp, sp, #8
   144a0:	sub	sp, sp, #8
   144a4:	mov	r4, r0
   144a8:	cmp	r0, #0
   144ac:	beq	144e4 <__assert_fail@plt+0x3658>
   144b0:	mov	r0, r4
   144b4:	bl	10d78 <__freading@plt>
   144b8:	cmp	r0, #0
   144bc:	beq	144e4 <__assert_fail@plt+0x3658>
   144c0:	ldrb	r0, [r4, #1]
   144c4:	tst	r0, #1
   144c8:	beq	144e4 <__assert_fail@plt+0x3658>
   144cc:	mov	r0, #1
   144d0:	mov	r2, #0
   144d4:	mov	r3, #0
   144d8:	str	r0, [sp]
   144dc:	mov	r0, r4
   144e0:	bl	1451c <__assert_fail@plt+0x3690>
   144e4:	mov	r0, r4
   144e8:	sub	sp, fp, #8
   144ec:	pop	{r4, sl, fp, lr}
   144f0:	b	10cac <fflush@plt>
   144f4:	push	{r4, r5, r6, sl, fp, lr}
   144f8:	add	fp, sp, #16
   144fc:	mov	r4, r0
   14500:	bl	10dd8 <__errno_location@plt>
   14504:	ldr	r6, [r0]
   14508:	mov	r5, r0
   1450c:	mov	r0, r4
   14510:	bl	10cb8 <free@plt>
   14514:	str	r6, [r5]
   14518:	pop	{r4, r5, r6, sl, fp, pc}
   1451c:	push	{r4, r5, r6, r7, fp, lr}
   14520:	add	fp, sp, #16
   14524:	sub	sp, sp, #8
   14528:	mov	r4, r0
   1452c:	ldr	r0, [r0, #4]
   14530:	mov	r5, r3
   14534:	mov	r6, r2
   14538:	ldr	r1, [r4, #8]
   1453c:	cmp	r1, r0
   14540:	bne	1455c <__assert_fail@plt+0x36d0>
   14544:	ldrd	r0, [r4, #16]
   14548:	cmp	r1, r0
   1454c:	bne	1455c <__assert_fail@plt+0x36d0>
   14550:	ldr	r0, [r4, #36]	; 0x24
   14554:	cmp	r0, #0
   14558:	beq	14574 <__assert_fail@plt+0x36e8>
   1455c:	mov	r0, r4
   14560:	mov	r2, r6
   14564:	mov	r3, r5
   14568:	sub	sp, fp, #16
   1456c:	pop	{r4, r5, r6, r7, fp, lr}
   14570:	b	10e14 <fseeko64@plt>
   14574:	ldr	r7, [fp, #8]
   14578:	mov	r0, r4
   1457c:	bl	10dfc <fileno@plt>
   14580:	mov	r2, r6
   14584:	mov	r3, r5
   14588:	str	r7, [sp]
   1458c:	bl	10d24 <lseek64@plt>
   14590:	and	r2, r0, r1
   14594:	cmn	r2, #1
   14598:	beq	145b8 <__assert_fail@plt+0x372c>
   1459c:	strd	r0, [r4, #80]	; 0x50
   145a0:	ldr	r0, [r4]
   145a4:	bic	r0, r0, #16
   145a8:	str	r0, [r4]
   145ac:	mov	r0, #0
   145b0:	sub	sp, fp, #16
   145b4:	pop	{r4, r5, r6, r7, fp, pc}
   145b8:	mvn	r0, #0
   145bc:	sub	sp, fp, #16
   145c0:	pop	{r4, r5, r6, r7, fp, pc}
   145c4:	cmp	r0, #0
   145c8:	movweq	r0, #1
   145cc:	cmn	r0, #1
   145d0:	ble	145d8 <__assert_fail@plt+0x374c>
   145d4:	b	10d60 <malloc@plt>
   145d8:	push	{fp, lr}
   145dc:	mov	fp, sp
   145e0:	bl	10dd8 <__errno_location@plt>
   145e4:	mov	r1, #12
   145e8:	str	r1, [r0]
   145ec:	mov	r0, #0
   145f0:	pop	{fp, pc}
   145f4:	push	{r4, r5, r6, r7, fp, lr}
   145f8:	add	fp, sp, #16
   145fc:	sub	sp, sp, #8
   14600:	cmp	r0, #0
   14604:	add	r5, sp, #4
   14608:	mov	r7, r2
   1460c:	mov	r4, r1
   14610:	movne	r5, r0
   14614:	mov	r0, r5
   14618:	bl	10d48 <mbrtowc@plt>
   1461c:	mov	r6, r0
   14620:	cmp	r7, #0
   14624:	beq	1464c <__assert_fail@plt+0x37c0>
   14628:	cmn	r6, #2
   1462c:	bcc	1464c <__assert_fail@plt+0x37c0>
   14630:	mov	r0, #0
   14634:	bl	1476c <__assert_fail@plt+0x38e0>
   14638:	cmp	r0, #0
   1463c:	bne	1464c <__assert_fail@plt+0x37c0>
   14640:	ldrb	r0, [r4]
   14644:	mov	r6, #1
   14648:	str	r0, [r5]
   1464c:	mov	r0, r6
   14650:	sub	sp, fp, #16
   14654:	pop	{r4, r5, r6, r7, fp, pc}
   14658:	push	{fp, lr}
   1465c:	mov	fp, sp
   14660:	cmp	r0, #0
   14664:	beq	14680 <__assert_fail@plt+0x37f4>
   14668:	cmp	r1, #0
   1466c:	beq	1468c <__assert_fail@plt+0x3800>
   14670:	cmn	r1, #1
   14674:	ble	14698 <__assert_fail@plt+0x380c>
   14678:	pop	{fp, lr}
   1467c:	b	10d00 <realloc@plt>
   14680:	mov	r0, r1
   14684:	pop	{fp, lr}
   14688:	b	145c4 <__assert_fail@plt+0x3738>
   1468c:	bl	144f4 <__assert_fail@plt+0x3668>
   14690:	mov	r0, #0
   14694:	pop	{fp, pc}
   14698:	bl	10dd8 <__errno_location@plt>
   1469c:	mov	r1, #12
   146a0:	str	r1, [r0]
   146a4:	mov	r0, #0
   146a8:	pop	{fp, pc}
   146ac:	cmp	r2, #0
   146b0:	beq	146e0 <__assert_fail@plt+0x3854>
   146b4:	mvn	r3, #0
   146b8:	udiv	r3, r3, r2
   146bc:	cmp	r3, r1
   146c0:	bcs	146e0 <__assert_fail@plt+0x3854>
   146c4:	push	{fp, lr}
   146c8:	mov	fp, sp
   146cc:	bl	10dd8 <__errno_location@plt>
   146d0:	mov	r1, #12
   146d4:	str	r1, [r0]
   146d8:	mov	r0, #0
   146dc:	pop	{fp, pc}
   146e0:	mul	r1, r2, r1
   146e4:	b	14658 <__assert_fail@plt+0x37cc>
   146e8:	push	{r4, r5, r6, sl, fp, lr}
   146ec:	add	fp, sp, #16
   146f0:	mov	r4, r0
   146f4:	bl	10d3c <__fpending@plt>
   146f8:	mov	r5, r0
   146fc:	mov	r0, r4
   14700:	bl	10cc4 <ferror@plt>
   14704:	mov	r6, r0
   14708:	mov	r0, r4
   1470c:	bl	10e08 <fclose@plt>
   14710:	cmp	r6, #0
   14714:	beq	14738 <__assert_fail@plt+0x38ac>
   14718:	mvn	r4, #0
   1471c:	cmp	r0, #0
   14720:	bne	14764 <__assert_fail@plt+0x38d8>
   14724:	bl	10dd8 <__errno_location@plt>
   14728:	mov	r1, #0
   1472c:	str	r1, [r0]
   14730:	mov	r0, r4
   14734:	pop	{r4, r5, r6, sl, fp, pc}
   14738:	cmp	r0, #0
   1473c:	mov	r4, r0
   14740:	mvnne	r4, #0
   14744:	cmp	r5, #0
   14748:	bne	14764 <__assert_fail@plt+0x38d8>
   1474c:	cmp	r0, #0
   14750:	beq	14764 <__assert_fail@plt+0x38d8>
   14754:	bl	10dd8 <__errno_location@plt>
   14758:	ldr	r0, [r0]
   1475c:	subs	r4, r0, #9
   14760:	mvnne	r4, #0
   14764:	mov	r0, r4
   14768:	pop	{r4, r5, r6, sl, fp, pc}
   1476c:	push	{r4, sl, fp, lr}
   14770:	add	fp, sp, #8
   14774:	sub	sp, sp, #264	; 0x108
   14778:	add	r1, sp, #7
   1477c:	movw	r2, #257	; 0x101
   14780:	bl	14810 <__assert_fail@plt+0x3984>
   14784:	mov	r4, #0
   14788:	cmp	r0, #0
   1478c:	bne	147cc <__assert_fail@plt+0x3940>
   14790:	movw	r1, #20767	; 0x511f
   14794:	add	r0, sp, #7
   14798:	mov	r2, #2
   1479c:	movt	r1, #1
   147a0:	bl	10db4 <bcmp@plt>
   147a4:	cmp	r0, #0
   147a8:	beq	147cc <__assert_fail@plt+0x3940>
   147ac:	movw	r1, #20769	; 0x5121
   147b0:	add	r0, sp, #7
   147b4:	mov	r2, #6
   147b8:	movt	r1, #1
   147bc:	bl	10db4 <bcmp@plt>
   147c0:	cmp	r0, #0
   147c4:	mov	r4, r0
   147c8:	movwne	r4, #1
   147cc:	mov	r0, r4
   147d0:	sub	sp, fp, #8
   147d4:	pop	{r4, sl, fp, pc}
   147d8:	push	{fp, lr}
   147dc:	mov	fp, sp
   147e0:	mov	r0, #14
   147e4:	bl	10e38 <nl_langinfo@plt>
   147e8:	movw	r1, #19622	; 0x4ca6
   147ec:	cmp	r0, #0
   147f0:	movt	r1, #1
   147f4:	movne	r1, r0
   147f8:	movw	r0, #20775	; 0x5127
   147fc:	ldrb	r2, [r1]
   14800:	movt	r0, #1
   14804:	cmp	r2, #0
   14808:	movne	r0, r1
   1480c:	pop	{fp, pc}
   14810:	push	{r4, r5, r6, r7, fp, lr}
   14814:	add	fp, sp, #16
   14818:	mov	r4, r1
   1481c:	mov	r1, #0
   14820:	mov	r6, r2
   14824:	bl	10e20 <setlocale@plt>
   14828:	cmp	r0, #0
   1482c:	beq	1485c <__assert_fail@plt+0x39d0>
   14830:	mov	r7, r0
   14834:	bl	10dc0 <strlen@plt>
   14838:	cmp	r0, r6
   1483c:	bcs	14878 <__assert_fail@plt+0x39ec>
   14840:	add	r2, r0, #1
   14844:	mov	r0, r4
   14848:	mov	r1, r7
   1484c:	bl	10cdc <memcpy@plt>
   14850:	mov	r5, #0
   14854:	mov	r0, r5
   14858:	pop	{r4, r5, r6, r7, fp, pc}
   1485c:	mov	r5, #22
   14860:	cmp	r6, #0
   14864:	beq	148a0 <__assert_fail@plt+0x3a14>
   14868:	mov	r0, #0
   1486c:	strb	r0, [r4]
   14870:	mov	r0, r5
   14874:	pop	{r4, r5, r6, r7, fp, pc}
   14878:	mov	r5, #34	; 0x22
   1487c:	cmp	r6, #0
   14880:	beq	148a0 <__assert_fail@plt+0x3a14>
   14884:	sub	r6, r6, #1
   14888:	mov	r0, r4
   1488c:	mov	r1, r7
   14890:	mov	r2, r6
   14894:	bl	10cdc <memcpy@plt>
   14898:	mov	r0, #0
   1489c:	strb	r0, [r4, r6]
   148a0:	mov	r0, r5
   148a4:	pop	{r4, r5, r6, r7, fp, pc}
   148a8:	mov	r1, #0
   148ac:	b	10e20 <setlocale@plt>
   148b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   148b4:	mov	r7, r0
   148b8:	ldr	r6, [pc, #72]	; 14908 <__assert_fail@plt+0x3a7c>
   148bc:	ldr	r5, [pc, #72]	; 1490c <__assert_fail@plt+0x3a80>
   148c0:	add	r6, pc, r6
   148c4:	add	r5, pc, r5
   148c8:	sub	r6, r6, r5
   148cc:	mov	r8, r1
   148d0:	mov	r9, r2
   148d4:	bl	10c68 <calloc@plt-0x20>
   148d8:	asrs	r6, r6, #2
   148dc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   148e0:	mov	r4, #0
   148e4:	add	r4, r4, #1
   148e8:	ldr	r3, [r5], #4
   148ec:	mov	r2, r9
   148f0:	mov	r1, r8
   148f4:	mov	r0, r7
   148f8:	blx	r3
   148fc:	cmp	r6, r4
   14900:	bne	148e4 <__assert_fail@plt+0x3a58>
   14904:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14908:	andeq	r1, r1, r4, asr #12
   1490c:	andeq	r1, r1, ip, lsr r6
   14910:	bx	lr
   14914:	ldr	r3, [pc, #12]	; 14928 <__assert_fail@plt+0x3a9c>
   14918:	mov	r1, #0
   1491c:	add	r3, pc, r3
   14920:	ldr	r2, [r3]
   14924:	b	10de4 <__cxa_atexit@plt>
   14928:	andeq	r1, r1, r0, lsr #15

Disassembly of section .fini:

0001492c <.fini>:
   1492c:	push	{r3, lr}
   14930:	pop	{r3, pc}
