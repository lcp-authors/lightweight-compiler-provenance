
../repos/coreutils/src/pr:     file format elf32-littlearm


Disassembly of section .init:

00011294 <.init>:
   11294:	push	{r3, lr}
   11298:	bl	11650 <__assert_fail@plt+0x48>
   1129c:	pop	{r3, pc}

Disassembly of section .plt:

000112a0 <fdopen@plt-0x14>:
   112a0:	push	{lr}		; (str lr, [sp, #-4]!)
   112a4:	ldr	lr, [pc, #4]	; 112b0 <fdopen@plt-0x4>
   112a8:	add	lr, pc, lr
   112ac:	ldr	pc, [lr, #8]!
   112b0:	andeq	pc, r1, r0, asr sp	; <UNPREDICTABLE>

000112b4 <fdopen@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #126976	; 0x1f000
   112bc:	ldr	pc, [ip, #3408]!	; 0xd50

000112c0 <calloc@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #126976	; 0x1f000
   112c8:	ldr	pc, [ip, #3400]!	; 0xd48

000112cc <fputs_unlocked@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #126976	; 0x1f000
   112d4:	ldr	pc, [ip, #3392]!	; 0xd40

000112d8 <raise@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #126976	; 0x1f000
   112e0:	ldr	pc, [ip, #3384]!	; 0xd38

000112e4 <gmtime_r@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #126976	; 0x1f000
   112ec:	ldr	pc, [ip, #3376]!	; 0xd30

000112f0 <strcmp@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #126976	; 0x1f000
   112f8:	ldr	pc, [ip, #3368]!	; 0xd28

000112fc <strtol@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #126976	; 0x1f000
   11304:	ldr	pc, [ip, #3360]!	; 0xd20

00011308 <posix_fadvise64@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #126976	; 0x1f000
   11310:	ldr	pc, [ip, #3352]!	; 0xd18

00011314 <mktime@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #126976	; 0x1f000
   1131c:	ldr	pc, [ip, #3344]!	; 0xd10

00011320 <fflush@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #126976	; 0x1f000
   11328:	ldr	pc, [ip, #3336]!	; 0xd08

0001132c <wcwidth@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #126976	; 0x1f000
   11334:	ldr	pc, [ip, #3328]!	; 0xd00

00011338 <free@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #126976	; 0x1f000
   11340:	ldr	pc, [ip, #3320]!	; 0xcf8

00011344 <clock_gettime@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #126976	; 0x1f000
   1134c:	ldr	pc, [ip, #3312]!	; 0xcf0

00011350 <_exit@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #126976	; 0x1f000
   11358:	ldr	pc, [ip, #3304]!	; 0xce8

0001135c <memcpy@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #126976	; 0x1f000
   11364:	ldr	pc, [ip, #3296]!	; 0xce0

00011368 <__strtoull_internal@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #126976	; 0x1f000
   11370:	ldr	pc, [ip, #3288]!	; 0xcd8

00011374 <mbsinit@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #126976	; 0x1f000
   1137c:	ldr	pc, [ip, #3280]!	; 0xcd0

00011380 <memcmp@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #126976	; 0x1f000
   11388:	ldr	pc, [ip, #3272]!	; 0xcc8

0001138c <dcgettext@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #126976	; 0x1f000
   11394:	ldr	pc, [ip, #3264]!	; 0xcc0

00011398 <realloc@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #126976	; 0x1f000
   113a0:	ldr	pc, [ip, #3256]!	; 0xcb8

000113a4 <localtime_r@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #126976	; 0x1f000
   113ac:	ldr	pc, [ip, #3248]!	; 0xcb0

000113b0 <textdomain@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #126976	; 0x1f000
   113b8:	ldr	pc, [ip, #3240]!	; 0xca8

000113bc <iswcntrl@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #126976	; 0x1f000
   113c4:	ldr	pc, [ip, #3232]!	; 0xca0

000113c8 <iswprint@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #126976	; 0x1f000
   113d0:	ldr	pc, [ip, #3224]!	; 0xc98

000113d4 <tzset@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #126976	; 0x1f000
   113dc:	ldr	pc, [ip, #3216]!	; 0xc90

000113e0 <__fxstat64@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #126976	; 0x1f000
   113e8:	ldr	pc, [ip, #3208]!	; 0xc88

000113ec <fwrite@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #126976	; 0x1f000
   113f4:	ldr	pc, [ip, #3200]!	; 0xc80

000113f8 <lseek64@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #126976	; 0x1f000
   11400:	ldr	pc, [ip, #3192]!	; 0xc78

00011404 <__ctype_get_mb_cur_max@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #126976	; 0x1f000
   1140c:	ldr	pc, [ip, #3184]!	; 0xc70

00011410 <__fpending@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #126976	; 0x1f000
   11418:	ldr	pc, [ip, #3176]!	; 0xc68

0001141c <mbrtowc@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #126976	; 0x1f000
   11424:	ldr	pc, [ip, #3168]!	; 0xc60

00011428 <error@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #126976	; 0x1f000
   11430:	ldr	pc, [ip, #3160]!	; 0xc58

00011434 <getenv@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #126976	; 0x1f000
   1143c:	ldr	pc, [ip, #3152]!	; 0xc50

00011440 <malloc@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #126976	; 0x1f000
   11448:	ldr	pc, [ip, #3144]!	; 0xc48

0001144c <__libc_start_main@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #126976	; 0x1f000
   11454:	ldr	pc, [ip, #3136]!	; 0xc40

00011458 <strftime@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #126976	; 0x1f000
   11460:	ldr	pc, [ip, #3128]!	; 0xc38

00011464 <__freading@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #126976	; 0x1f000
   1146c:	ldr	pc, [ip, #3120]!	; 0xc30

00011470 <__ctype_tolower_loc@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #126976	; 0x1f000
   11478:	ldr	pc, [ip, #3112]!	; 0xc28

0001147c <__ctype_toupper_loc@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #126976	; 0x1f000
   11484:	ldr	pc, [ip, #3104]!	; 0xc20

00011488 <__gmon_start__@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #126976	; 0x1f000
   11490:	ldr	pc, [ip, #3096]!	; 0xc18

00011494 <getopt_long@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #126976	; 0x1f000
   1149c:	ldr	pc, [ip, #3088]!	; 0xc10

000114a0 <__ctype_b_loc@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #126976	; 0x1f000
   114a8:	ldr	pc, [ip, #3080]!	; 0xc08

000114ac <exit@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #126976	; 0x1f000
   114b4:	ldr	pc, [ip, #3072]!	; 0xc00

000114b8 <strlen@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #126976	; 0x1f000
   114c0:	ldr	pc, [ip, #3064]!	; 0xbf8

000114c4 <strchr@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #126976	; 0x1f000
   114cc:	ldr	pc, [ip, #3056]!	; 0xbf0

000114d0 <setenv@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #126976	; 0x1f000
   114d8:	ldr	pc, [ip, #3048]!	; 0xbe8

000114dc <ungetc@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #126976	; 0x1f000
   114e4:	ldr	pc, [ip, #3040]!	; 0xbe0

000114e8 <__errno_location@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #126976	; 0x1f000
   114f0:	ldr	pc, [ip, #3032]!	; 0xbd8

000114f4 <__sprintf_chk@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #126976	; 0x1f000
   114fc:	ldr	pc, [ip, #3024]!	; 0xbd0

00011500 <__cxa_atexit@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #126976	; 0x1f000
   11508:	ldr	pc, [ip, #3016]!	; 0xbc8

0001150c <memset@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #126976	; 0x1f000
   11514:	ldr	pc, [ip, #3008]!	; 0xbc0

00011518 <__printf_chk@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #126976	; 0x1f000
   11520:	ldr	pc, [ip, #3000]!	; 0xbb8

00011524 <fileno@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #126976	; 0x1f000
   1152c:	ldr	pc, [ip, #2992]!	; 0xbb0

00011530 <__fprintf_chk@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #126976	; 0x1f000
   11538:	ldr	pc, [ip, #2984]!	; 0xba8

0001153c <fclose@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #126976	; 0x1f000
   11544:	ldr	pc, [ip, #2976]!	; 0xba0

00011548 <fseeko64@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #126976	; 0x1f000
   11550:	ldr	pc, [ip, #2968]!	; 0xb98

00011554 <fcntl64@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #126976	; 0x1f000
   1155c:	ldr	pc, [ip, #2960]!	; 0xb90

00011560 <__uflow@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #126976	; 0x1f000
   11568:	ldr	pc, [ip, #2952]!	; 0xb88

0001156c <__overflow@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #126976	; 0x1f000
   11574:	ldr	pc, [ip, #2944]!	; 0xb80

00011578 <setlocale@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #126976	; 0x1f000
   11580:	ldr	pc, [ip, #2936]!	; 0xb78

00011584 <strrchr@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #126976	; 0x1f000
   1158c:	ldr	pc, [ip, #2928]!	; 0xb70

00011590 <nl_langinfo@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #126976	; 0x1f000
   11598:	ldr	pc, [ip, #2920]!	; 0xb68

0001159c <timegm@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #126976	; 0x1f000
   115a4:	ldr	pc, [ip, #2912]!	; 0xb60

000115a8 <clearerr_unlocked@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #126976	; 0x1f000
   115b0:	ldr	pc, [ip, #2904]!	; 0xb58

000115b4 <__strtoll_internal@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #126976	; 0x1f000
   115bc:	ldr	pc, [ip, #2896]!	; 0xb50

000115c0 <fopen64@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #126976	; 0x1f000
   115c8:	ldr	pc, [ip, #2888]!	; 0xb48

000115cc <bindtextdomain@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #126976	; 0x1f000
   115d4:	ldr	pc, [ip, #2880]!	; 0xb40

000115d8 <unsetenv@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #126976	; 0x1f000
   115e0:	ldr	pc, [ip, #2872]!	; 0xb38

000115e4 <strncmp@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #126976	; 0x1f000
   115ec:	ldr	pc, [ip, #2864]!	; 0xb30

000115f0 <abort@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #126976	; 0x1f000
   115f8:	ldr	pc, [ip, #2856]!	; 0xb28

000115fc <close@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #126976	; 0x1f000
   11604:	ldr	pc, [ip, #2848]!	; 0xb20

00011608 <__assert_fail@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #126976	; 0x1f000
   11610:	ldr	pc, [ip, #2840]!	; 0xb18

Disassembly of section .text:

00011614 <.text>:
   11614:	mov	fp, #0
   11618:	mov	lr, #0
   1161c:	pop	{r1}		; (ldr r1, [sp], #4)
   11620:	mov	r2, sp
   11624:	push	{r2}		; (str r2, [sp, #-4]!)
   11628:	push	{r0}		; (str r0, [sp, #-4]!)
   1162c:	ldr	ip, [pc, #16]	; 11644 <__assert_fail@plt+0x3c>
   11630:	push	{ip}		; (str ip, [sp, #-4]!)
   11634:	ldr	r0, [pc, #12]	; 11648 <__assert_fail@plt+0x40>
   11638:	ldr	r3, [pc, #12]	; 1164c <__assert_fail@plt+0x44>
   1163c:	bl	1144c <__libc_start_main@plt>
   11640:	bl	115f0 <abort@plt>
   11644:	andeq	lr, r1, r4, ror #22
   11648:	andeq	r1, r1, r4, lsl #14
   1164c:	andeq	lr, r1, r4, lsl #22
   11650:	ldr	r3, [pc, #20]	; 1166c <__assert_fail@plt+0x64>
   11654:	ldr	r2, [pc, #20]	; 11670 <__assert_fail@plt+0x68>
   11658:	add	r3, pc, r3
   1165c:	ldr	r2, [r3, r2]
   11660:	cmp	r2, #0
   11664:	bxeq	lr
   11668:	b	11488 <__gmon_start__@plt>
   1166c:	andeq	pc, r1, r0, lsr #19
   11670:	andeq	r0, r0, ip, lsr #2
   11674:	ldr	r0, [pc, #24]	; 11694 <__assert_fail@plt+0x8c>
   11678:	ldr	r3, [pc, #24]	; 11698 <__assert_fail@plt+0x90>
   1167c:	cmp	r3, r0
   11680:	bxeq	lr
   11684:	ldr	r3, [pc, #16]	; 1169c <__assert_fail@plt+0x94>
   11688:	cmp	r3, #0
   1168c:	bxeq	lr
   11690:	bx	r3
   11694:			; <UNDEFINED> instruction: 0x000311b8
   11698:			; <UNDEFINED> instruction: 0x000311b8
   1169c:	andeq	r0, r0, r0
   116a0:	ldr	r0, [pc, #36]	; 116cc <__assert_fail@plt+0xc4>
   116a4:	ldr	r1, [pc, #36]	; 116d0 <__assert_fail@plt+0xc8>
   116a8:	sub	r1, r1, r0
   116ac:	asr	r1, r1, #2
   116b0:	add	r1, r1, r1, lsr #31
   116b4:	asrs	r1, r1, #1
   116b8:	bxeq	lr
   116bc:	ldr	r3, [pc, #16]	; 116d4 <__assert_fail@plt+0xcc>
   116c0:	cmp	r3, #0
   116c4:	bxeq	lr
   116c8:	bx	r3
   116cc:			; <UNDEFINED> instruction: 0x000311b8
   116d0:			; <UNDEFINED> instruction: 0x000311b8
   116d4:	andeq	r0, r0, r0
   116d8:	push	{r4, lr}
   116dc:	ldr	r4, [pc, #24]	; 116fc <__assert_fail@plt+0xf4>
   116e0:	ldrb	r3, [r4]
   116e4:	cmp	r3, #0
   116e8:	popne	{r4, pc}
   116ec:	bl	11674 <__assert_fail@plt+0x6c>
   116f0:	mov	r3, #1
   116f4:	strb	r3, [r4]
   116f8:	pop	{r4, pc}
   116fc:	ldrdeq	r1, [r3], -ip
   11700:	b	116a0 <__assert_fail@plt+0x98>
   11704:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11708:	add	fp, sp, #28
   1170c:	sub	sp, sp, #44	; 0x2c
   11710:	mov	r4, #0
   11714:	mov	sl, r0
   11718:	str	r1, [sp, #32]
   1171c:	str	r4, [fp, #-32]	; 0xffffffe0
   11720:	ldr	r0, [r1]
   11724:	bl	1819c <__assert_fail@plt+0x6b94>
   11728:	movw	r1, #65108	; 0xfe54
   1172c:	mov	r0, #6
   11730:	movt	r1, #1
   11734:	bl	11578 <setlocale@plt>
   11738:	movw	r5, #60607	; 0xecbf
   1173c:	movw	r1, #60300	; 0xeb8c
   11740:	movt	r5, #1
   11744:	movt	r1, #1
   11748:	mov	r0, r5
   1174c:	bl	115cc <bindtextdomain@plt>
   11750:	mov	r0, r5
   11754:	bl	113b0 <textdomain@plt>
   11758:	movw	r0, #24408	; 0x5f58
   1175c:	movt	r0, #1
   11760:	bl	1eb68 <__assert_fail@plt+0xd560>
   11764:	cmp	sl, #2
   11768:	blt	1177c <__assert_fail@plt+0x174>
   1176c:	sub	r0, sl, #1
   11770:	mov	r1, #4
   11774:	bl	1ad54 <__assert_fail@plt+0x974c>
   11778:	mov	r4, r0
   1177c:	ldr	r1, [sp, #32]
   11780:	mvn	r0, #0
   11784:	movw	r2, #136	; 0x88
   11788:	movw	r3, #192	; 0xc0
   1178c:	str	r0, [sp, #36]	; 0x24
   11790:	add	r0, sp, #36	; 0x24
   11794:	movt	r2, #2
   11798:	movt	r3, #2
   1179c:	str	r0, [sp]
   117a0:	mov	r0, sl
   117a4:	bl	11494 <getopt_long@plt>
   117a8:	cmn	r0, #1
   117ac:	beq	122bc <__assert_fail@plt+0xcb4>
   117b0:	mov	r8, r0
   117b4:	mov	r0, #0
   117b8:	mov	r9, #0
   117bc:	mov	r6, #0
   117c0:	mov	r7, #0
   117c4:	str	r0, [sp, #20]
   117c8:	mov	r0, #0
   117cc:	str	r0, [sp, #28]
   117d0:	mov	r0, #0
   117d4:	str	r0, [sp, #24]
   117d8:	sub	r0, r8, #48	; 0x30
   117dc:	cmp	r0, #9
   117e0:	bhi	11818 <__assert_fail@plt+0x210>
   117e4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   117e8:	add	r5, r9, #1
   117ec:	cmp	r5, r0
   117f0:	bcc	11804 <__assert_fail@plt+0x1fc>
   117f4:	mov	r0, r6
   117f8:	sub	r1, fp, #32
   117fc:	bl	1adb8 <__assert_fail@plt+0x97b0>
   11800:	mov	r6, r0
   11804:	mov	r0, #0
   11808:	strb	r8, [r6, r9]
   1180c:	mov	r9, r5
   11810:	strb	r0, [r6, r5]
   11814:	b	12208 <__assert_fail@plt+0xc00>
   11818:	add	r0, r8, #3
   1181c:	cmp	r0, #260	; 0x104
   11820:	bhi	12598 <__assert_fail@plt+0xf90>
   11824:	add	r1, pc, #0
   11828:	ldr	pc, [r1, r0, lsl #2]
   1182c:	andeq	r2, r1, r0, lsr #11
   11830:	strdeq	r2, [r1], -r4
   11834:	muleq	r1, r8, r5
   11838:	muleq	r1, r8, r5
   1183c:	andeq	r2, r1, r8, asr #1
   11840:	muleq	r1, r8, r5
   11844:	muleq	r1, r8, r5
   11848:	muleq	r1, r8, r5
   1184c:	muleq	r1, r8, r5
   11850:	muleq	r1, r8, r5
   11854:	muleq	r1, r8, r5
   11858:	muleq	r1, r8, r5
   1185c:	muleq	r1, r8, r5
   11860:	muleq	r1, r8, r5
   11864:	muleq	r1, r8, r5
   11868:	muleq	r1, r8, r5
   1186c:	muleq	r1, r8, r5
   11870:	muleq	r1, r8, r5
   11874:	muleq	r1, r8, r5
   11878:	muleq	r1, r8, r5
   1187c:	muleq	r1, r8, r5
   11880:	muleq	r1, r8, r5
   11884:	muleq	r1, r8, r5
   11888:	muleq	r1, r8, r5
   1188c:	muleq	r1, r8, r5
   11890:	muleq	r1, r8, r5
   11894:	muleq	r1, r8, r5
   11898:	muleq	r1, r8, r5
   1189c:	muleq	r1, r8, r5
   118a0:	muleq	r1, r8, r5
   118a4:	muleq	r1, r8, r5
   118a8:	muleq	r1, r8, r5
   118ac:	muleq	r1, r8, r5
   118b0:	muleq	r1, r8, r5
   118b4:	muleq	r1, r8, r5
   118b8:	muleq	r1, r8, r5
   118bc:	muleq	r1, r8, r5
   118c0:	muleq	r1, r8, r5
   118c4:	muleq	r1, r8, r5
   118c8:	muleq	r1, r8, r5
   118cc:	muleq	r1, r8, r5
   118d0:	muleq	r1, r8, r5
   118d4:	muleq	r1, r8, r5
   118d8:	muleq	r1, r8, r5
   118dc:	muleq	r1, r8, r5
   118e0:	muleq	r1, r8, r5
   118e4:	muleq	r1, r8, r5
   118e8:	muleq	r1, r8, r5
   118ec:	muleq	r1, r8, r5
   118f0:	muleq	r1, r8, r5
   118f4:	muleq	r1, r8, r5
   118f8:	muleq	r1, r8, r5
   118fc:	muleq	r1, r8, r5
   11900:	muleq	r1, r8, r5
   11904:	muleq	r1, r8, r5
   11908:	muleq	r1, r8, r5
   1190c:	muleq	r1, r8, r5
   11910:	muleq	r1, r8, r5
   11914:	muleq	r1, r8, r5
   11918:	muleq	r1, r8, r5
   1191c:	muleq	r1, r8, r5
   11920:	muleq	r1, r8, r5
   11924:	muleq	r1, r8, r5
   11928:	muleq	r1, r8, r5
   1192c:	muleq	r1, r8, r5
   11930:	muleq	r1, r8, r5
   11934:	muleq	r1, r8, r5
   11938:	muleq	r1, r8, r5
   1193c:	muleq	r1, r8, r5
   11940:	muleq	r1, r8, r5
   11944:	muleq	r1, r8, r5
   11948:	andeq	r1, r1, ip, ror #31
   1194c:	muleq	r1, r8, r5
   11950:	andeq	r1, r1, r0, asr #24
   11954:	muleq	r1, r8, r5
   11958:	muleq	r1, r8, r5
   1195c:	muleq	r1, r8, r5
   11960:	andeq	r2, r1, ip, lsr #2
   11964:	muleq	r1, r8, r5
   11968:	muleq	r1, r8, r5
   1196c:	muleq	r1, r8, r5
   11970:	andeq	r1, r1, r0, lsl pc
   11974:	muleq	r1, r8, r5
   11978:	muleq	r1, r8, r5
   1197c:	muleq	r1, r8, r5
   11980:	muleq	r1, r8, r5
   11984:	andeq	r1, r1, r0, lsr #29
   11988:	andeq	r1, r1, r0, lsl #31
   1198c:	muleq	r1, r8, r5
   11990:	muleq	r1, r8, r5
   11994:	andeq	r1, r1, r8, ror #26
   11998:	muleq	r1, r8, r5
   1199c:	muleq	r1, r8, r5
   119a0:	muleq	r1, r8, r5
   119a4:	muleq	r1, r8, r5
   119a8:	muleq	r1, r8, r5
   119ac:	muleq	r1, r8, r5
   119b0:	muleq	r1, r8, r5
   119b4:	muleq	r1, r8, r5
   119b8:	muleq	r1, r8, r5
   119bc:	andeq	r2, r1, r4, asr #2
   119c0:	andeq	r1, r1, r0, ror #31
   119c4:	muleq	r1, r4, lr
   119c8:	ldrdeq	r1, [r1], -r4
   119cc:	muleq	r1, r0, r1
   119d0:	andeq	r1, r1, r0, asr #24
   119d4:	muleq	r1, r8, r5
   119d8:	andeq	r1, r1, r4, lsr #31
   119dc:	andeq	r2, r1, r8, asr #3
   119e0:	muleq	r1, r8, r5
   119e4:	muleq	r1, r8, r5
   119e8:	andeq	r2, r1, r8, rrx
   119ec:	andeq	r1, r1, ip, asr #26
   119f0:	andeq	r1, r1, r0, asr lr
   119f4:	andeq	r2, r1, r8
   119f8:	muleq	r1, r8, r5
   119fc:	muleq	r1, r8, r5
   11a00:	ldrdeq	r1, [r1], -ip
   11a04:	andeq	r1, r1, r8, ror #27
   11a08:			; <UNDEFINED> instruction: 0x00011fb8
   11a0c:	muleq	r1, r8, r5
   11a10:	andeq	r2, r1, r8, lsr r1
   11a14:	andeq	r1, r1, ip, asr #25
   11a18:	muleq	r1, r8, r5
   11a1c:	muleq	r1, r8, r5
   11a20:	muleq	r1, r8, r5
   11a24:	muleq	r1, r8, r5
   11a28:	muleq	r1, r8, r5
   11a2c:	muleq	r1, r8, r5
   11a30:	muleq	r1, r8, r5
   11a34:	muleq	r1, r8, r5
   11a38:	muleq	r1, r8, r5
   11a3c:	muleq	r1, r8, r5
   11a40:	muleq	r1, r8, r5
   11a44:	muleq	r1, r8, r5
   11a48:	muleq	r1, r8, r5
   11a4c:	muleq	r1, r8, r5
   11a50:	muleq	r1, r8, r5
   11a54:	muleq	r1, r8, r5
   11a58:	muleq	r1, r8, r5
   11a5c:	muleq	r1, r8, r5
   11a60:	muleq	r1, r8, r5
   11a64:	muleq	r1, r8, r5
   11a68:	muleq	r1, r8, r5
   11a6c:	muleq	r1, r8, r5
   11a70:	muleq	r1, r8, r5
   11a74:	muleq	r1, r8, r5
   11a78:	muleq	r1, r8, r5
   11a7c:	muleq	r1, r8, r5
   11a80:	muleq	r1, r8, r5
   11a84:	muleq	r1, r8, r5
   11a88:	muleq	r1, r8, r5
   11a8c:	muleq	r1, r8, r5
   11a90:	muleq	r1, r8, r5
   11a94:	muleq	r1, r8, r5
   11a98:	muleq	r1, r8, r5
   11a9c:	muleq	r1, r8, r5
   11aa0:	muleq	r1, r8, r5
   11aa4:	muleq	r1, r8, r5
   11aa8:	muleq	r1, r8, r5
   11aac:	muleq	r1, r8, r5
   11ab0:	muleq	r1, r8, r5
   11ab4:	muleq	r1, r8, r5
   11ab8:	muleq	r1, r8, r5
   11abc:	muleq	r1, r8, r5
   11ac0:	muleq	r1, r8, r5
   11ac4:	muleq	r1, r8, r5
   11ac8:	muleq	r1, r8, r5
   11acc:	muleq	r1, r8, r5
   11ad0:	muleq	r1, r8, r5
   11ad4:	muleq	r1, r8, r5
   11ad8:	muleq	r1, r8, r5
   11adc:	muleq	r1, r8, r5
   11ae0:	muleq	r1, r8, r5
   11ae4:	muleq	r1, r8, r5
   11ae8:	muleq	r1, r8, r5
   11aec:	muleq	r1, r8, r5
   11af0:	muleq	r1, r8, r5
   11af4:	muleq	r1, r8, r5
   11af8:	muleq	r1, r8, r5
   11afc:	muleq	r1, r8, r5
   11b00:	muleq	r1, r8, r5
   11b04:	muleq	r1, r8, r5
   11b08:	muleq	r1, r8, r5
   11b0c:	muleq	r1, r8, r5
   11b10:	muleq	r1, r8, r5
   11b14:	muleq	r1, r8, r5
   11b18:	muleq	r1, r8, r5
   11b1c:	muleq	r1, r8, r5
   11b20:	muleq	r1, r8, r5
   11b24:	muleq	r1, r8, r5
   11b28:	muleq	r1, r8, r5
   11b2c:	muleq	r1, r8, r5
   11b30:	muleq	r1, r8, r5
   11b34:	muleq	r1, r8, r5
   11b38:	muleq	r1, r8, r5
   11b3c:	muleq	r1, r8, r5
   11b40:	muleq	r1, r8, r5
   11b44:	muleq	r1, r8, r5
   11b48:	muleq	r1, r8, r5
   11b4c:	muleq	r1, r8, r5
   11b50:	muleq	r1, r8, r5
   11b54:	muleq	r1, r8, r5
   11b58:	muleq	r1, r8, r5
   11b5c:	muleq	r1, r8, r5
   11b60:	muleq	r1, r8, r5
   11b64:	muleq	r1, r8, r5
   11b68:	muleq	r1, r8, r5
   11b6c:	muleq	r1, r8, r5
   11b70:	muleq	r1, r8, r5
   11b74:	muleq	r1, r8, r5
   11b78:	muleq	r1, r8, r5
   11b7c:	muleq	r1, r8, r5
   11b80:	muleq	r1, r8, r5
   11b84:	muleq	r1, r8, r5
   11b88:	muleq	r1, r8, r5
   11b8c:	muleq	r1, r8, r5
   11b90:	muleq	r1, r8, r5
   11b94:	muleq	r1, r8, r5
   11b98:	muleq	r1, r8, r5
   11b9c:	muleq	r1, r8, r5
   11ba0:	muleq	r1, r8, r5
   11ba4:	muleq	r1, r8, r5
   11ba8:	muleq	r1, r8, r5
   11bac:	muleq	r1, r8, r5
   11bb0:	muleq	r1, r8, r5
   11bb4:	muleq	r1, r8, r5
   11bb8:	muleq	r1, r8, r5
   11bbc:	muleq	r1, r8, r5
   11bc0:	muleq	r1, r8, r5
   11bc4:	muleq	r1, r8, r5
   11bc8:	muleq	r1, r8, r5
   11bcc:	muleq	r1, r8, r5
   11bd0:	muleq	r1, r8, r5
   11bd4:	muleq	r1, r8, r5
   11bd8:	muleq	r1, r8, r5
   11bdc:	muleq	r1, r8, r5
   11be0:	muleq	r1, r8, r5
   11be4:	muleq	r1, r8, r5
   11be8:	muleq	r1, r8, r5
   11bec:	muleq	r1, r8, r5
   11bf0:	muleq	r1, r8, r5
   11bf4:	muleq	r1, r8, r5
   11bf8:	muleq	r1, r8, r5
   11bfc:	muleq	r1, r8, r5
   11c00:	muleq	r1, r8, r5
   11c04:	muleq	r1, r8, r5
   11c08:	muleq	r1, r8, r5
   11c0c:	muleq	r1, r8, r5
   11c10:	muleq	r1, r8, r5
   11c14:	muleq	r1, r8, r5
   11c18:	muleq	r1, r8, r5
   11c1c:	muleq	r1, r8, r5
   11c20:	muleq	r1, r8, r5
   11c24:	muleq	r1, r8, r5
   11c28:	muleq	r1, r8, r5
   11c2c:	muleq	r1, r8, r5
   11c30:	muleq	r1, r8, r5
   11c34:	muleq	r1, r8, r5
   11c38:	andeq	r1, r1, ip, asr #24
   11c3c:	andeq	r2, r1, r0, ror #2
   11c40:	movw	r0, #4597	; 0x11f5
   11c44:	movt	r0, #3
   11c48:	b	121fc <__assert_fail@plt+0xbf4>
   11c4c:	movw	r0, #4568	; 0x11d8
   11c50:	movw	r1, #64981	; 0xfdd5
   11c54:	mov	r2, #5
   11c58:	mov	r9, #0
   11c5c:	movt	r0, #3
   11c60:	movt	r1, #1
   11c64:	ldr	r8, [r0]
   11c68:	mov	r0, #0
   11c6c:	bl	1138c <dcgettext@plt>
   11c70:	mvn	r1, #-2147483648	; 0x80000000
   11c74:	mov	r2, #1
   11c78:	mov	r3, #0
   11c7c:	mov	r5, #1
   11c80:	stm	sp, {r1, r9}
   11c84:	movw	r1, #65108	; 0xfe54
   11c88:	str	r0, [sp, #12]
   11c8c:	mov	r0, r8
   11c90:	str	r9, [sp, #16]
   11c94:	movt	r1, #1
   11c98:	str	r1, [sp, #8]
   11c9c:	bl	1b330 <__assert_fail@plt+0x9d28>
   11ca0:	movw	r1, #4456	; 0x1168
   11ca4:	movt	r1, #3
   11ca8:	str	r0, [r1]
   11cac:	movw	r0, #4632	; 0x1218
   11cb0:	movt	r0, #3
   11cb4:	strb	r5, [r0]
   11cb8:	mov	r0, r6
   11cbc:	bl	1622c <__assert_fail@plt+0x4c24>
   11cc0:	mov	r6, #0
   11cc4:	str	r9, [fp, #-32]	; 0xffffffe0
   11cc8:	b	12208 <__assert_fail@plt+0xc00>
   11ccc:	movw	r0, #4568	; 0x11d8
   11cd0:	movw	r1, #60510	; 0xec5e
   11cd4:	mov	r2, #5
   11cd8:	mov	r9, #0
   11cdc:	movt	r0, #3
   11ce0:	movt	r1, #1
   11ce4:	ldr	r8, [r0]
   11ce8:	mov	r0, #0
   11cec:	bl	1138c <dcgettext@plt>
   11cf0:	mvn	r1, #-2147483648	; 0x80000000
   11cf4:	mov	r2, #1
   11cf8:	mov	r3, #0
   11cfc:	stm	sp, {r1, r9}
   11d00:	movw	r1, #65108	; 0xfe54
   11d04:	str	r0, [sp, #12]
   11d08:	mov	r0, #1
   11d0c:	str	r9, [sp, #16]
   11d10:	movt	r1, #1
   11d14:	str	r0, [sp, #24]
   11d18:	mov	r0, r8
   11d1c:	str	r1, [sp, #8]
   11d20:	bl	1b330 <__assert_fail@plt+0x9d28>
   11d24:	movw	r1, #4627	; 0x1213
   11d28:	movt	r1, #3
   11d2c:	ldrb	r1, [r1]
   11d30:	cmp	r1, #0
   11d34:	movweq	r1, #4444	; 0x115c
   11d38:	movteq	r1, #3
   11d3c:	streq	r0, [r1]
   11d40:	mov	r0, #1
   11d44:	str	r0, [sp, #28]
   11d48:	b	12208 <__assert_fail@plt+0xc00>
   11d4c:	movw	r0, #4585	; 0x11e9
   11d50:	mov	r1, #1
   11d54:	movt	r0, #3
   11d58:	strb	r1, [r0]
   11d5c:	movw	r0, #4606	; 0x11fe
   11d60:	movt	r0, #3
   11d64:	b	12200 <__assert_fail@plt+0xbf8>
   11d68:	movw	r0, #4627	; 0x1213
   11d6c:	mov	r1, #1
   11d70:	mov	r2, #5
   11d74:	mov	r8, #0
   11d78:	movt	r0, #3
   11d7c:	strb	r1, [r0]
   11d80:	movw	r0, #4568	; 0x11d8
   11d84:	movw	r1, #60555	; 0xec8b
   11d88:	movt	r0, #3
   11d8c:	movt	r1, #1
   11d90:	ldr	r5, [r0]
   11d94:	mov	r0, #0
   11d98:	bl	1138c <dcgettext@plt>
   11d9c:	mvn	r1, #-2147483648	; 0x80000000
   11da0:	mov	r2, #1
   11da4:	mov	r3, #0
   11da8:	stm	sp, {r1, r8}
   11dac:	movw	r1, #65108	; 0xfe54
   11db0:	str	r0, [sp, #12]
   11db4:	mov	r0, #0
   11db8:	str	r8, [sp, #16]
   11dbc:	movt	r1, #1
   11dc0:	str	r0, [sp, #28]
   11dc4:	mov	r0, r5
   11dc8:	str	r1, [sp, #8]
   11dcc:	bl	1b330 <__assert_fail@plt+0x9d28>
   11dd0:	movw	r1, #4444	; 0x115c
   11dd4:	movt	r1, #3
   11dd8:	b	12000 <__assert_fail@plt+0x9f8>
   11ddc:	movw	r0, #4616	; 0x1208
   11de0:	movt	r0, #3
   11de4:	b	121fc <__assert_fail@plt+0xbf4>
   11de8:	movw	r0, #4568	; 0x11d8
   11dec:	mov	r9, #0
   11df0:	movt	r0, #3
   11df4:	ldr	r8, [r0]
   11df8:	mov	r0, #1
   11dfc:	str	r0, [sp, #24]
   11e00:	cmp	r8, #0
   11e04:	beq	11e44 <__assert_fail@plt+0x83c>
   11e08:	movw	r0, #4617	; 0x1209
   11e0c:	movt	r0, #3
   11e10:	ldrb	r0, [r0]
   11e14:	cmp	r0, #0
   11e18:	bne	11e44 <__assert_fail@plt+0x83c>
   11e1c:	mov	r0, r8
   11e20:	bl	114b8 <strlen@plt>
   11e24:	cmn	r0, #1
   11e28:	ble	125fc <__assert_fail@plt+0xff4>
   11e2c:	movw	r1, #4440	; 0x1158
   11e30:	movt	r1, #3
   11e34:	str	r8, [r1]
   11e38:	movw	r1, #4620	; 0x120c
   11e3c:	movt	r1, #3
   11e40:	str	r0, [r1]
   11e44:	mov	r0, #1
   11e48:	str	r0, [sp, #20]
   11e4c:	b	12208 <__assert_fail@plt+0xc00>
   11e50:	movw	r0, #4607	; 0x11ff
   11e54:	mov	r1, #1
   11e58:	mov	r9, #0
   11e5c:	movt	r0, #3
   11e60:	strb	r1, [r0]
   11e64:	movw	r0, #4568	; 0x11d8
   11e68:	movt	r0, #3
   11e6c:	ldr	r0, [r0]
   11e70:	cmp	r0, #0
   11e74:	beq	12208 <__assert_fail@plt+0xc00>
   11e78:	movw	r2, #4428	; 0x114c
   11e7c:	movw	r3, #4432	; 0x1150
   11e80:	mov	r1, #110	; 0x6e
   11e84:	movt	r2, #3
   11e88:	movt	r3, #3
   11e8c:	bl	127c8 <__assert_fail@plt+0x11c0>
   11e90:	b	12208 <__assert_fail@plt+0xc00>
   11e94:	movw	r0, #4587	; 0x11eb
   11e98:	movt	r0, #3
   11e9c:	b	121fc <__assert_fail@plt+0xbf4>
   11ea0:	movw	r8, #4620	; 0x120c
   11ea4:	mov	r0, #0
   11ea8:	movw	r9, #4440	; 0x1158
   11eac:	mov	r1, #1
   11eb0:	movt	r8, #3
   11eb4:	movt	r9, #3
   11eb8:	str	r0, [r8]
   11ebc:	movw	r0, #65108	; 0xfe54
   11ec0:	movt	r0, #1
   11ec4:	str	r0, [r9]
   11ec8:	movw	r0, #4617	; 0x1209
   11ecc:	movt	r0, #3
   11ed0:	strb	r1, [r0]
   11ed4:	movw	r0, #4568	; 0x11d8
   11ed8:	movt	r0, #3
   11edc:	ldr	r5, [r0]
   11ee0:	cmp	r5, #0
   11ee4:	beq	11f00 <__assert_fail@plt+0x8f8>
   11ee8:	mov	r0, r5
   11eec:	bl	114b8 <strlen@plt>
   11ef0:	cmn	r0, #1
   11ef4:	ble	125fc <__assert_fail@plt+0xff4>
   11ef8:	str	r5, [r9]
   11efc:	str	r0, [r8]
   11f00:	mov	r0, #0
   11f04:	mov	r9, #0
   11f08:	str	r0, [sp, #20]
   11f0c:	b	12208 <__assert_fail@plt+0xc00>
   11f10:	movw	r0, #4608	; 0x1200
   11f14:	mov	r1, #1
   11f18:	mov	r2, #5
   11f1c:	mov	r9, #0
   11f20:	movt	r0, #3
   11f24:	strb	r1, [r0]
   11f28:	movw	r0, #4568	; 0x11d8
   11f2c:	movw	r1, #60437	; 0xec15
   11f30:	movt	r0, #3
   11f34:	movt	r1, #1
   11f38:	ldr	r8, [r0]
   11f3c:	mov	r0, #0
   11f40:	bl	1138c <dcgettext@plt>
   11f44:	mvn	r1, #-2147483648	; 0x80000000
   11f48:	mov	r2, #-2147483648	; 0x80000000
   11f4c:	mvn	r3, #0
   11f50:	stm	sp, {r1, r9}
   11f54:	movw	r1, #65108	; 0xfe54
   11f58:	str	r0, [sp, #12]
   11f5c:	mov	r0, r8
   11f60:	str	r9, [sp, #16]
   11f64:	movt	r1, #1
   11f68:	str	r1, [sp, #8]
   11f6c:	bl	1b330 <__assert_fail@plt+0x9d28>
   11f70:	movw	r1, #4436	; 0x1154
   11f74:	movt	r1, #3
   11f78:	str	r0, [r1]
   11f7c:	b	12208 <__assert_fail@plt+0xc00>
   11f80:	movw	r0, #4625	; 0x1211
   11f84:	mov	r9, #0
   11f88:	mov	r1, #1
   11f8c:	movt	r0, #3
   11f90:	strb	r9, [r0]
   11f94:	movw	r0, #4624	; 0x1210
   11f98:	movt	r0, #3
   11f9c:	strb	r1, [r0]
   11fa0:	b	12208 <__assert_fail@plt+0xc00>
   11fa4:	movw	r0, #4568	; 0x11d8
   11fa8:	movw	r1, #4600	; 0x11f8
   11fac:	movt	r0, #3
   11fb0:	movt	r1, #3
   11fb4:	b	11ffc <__assert_fail@plt+0x9f4>
   11fb8:	movw	r0, #4625	; 0x1211
   11fbc:	mov	r1, #1
   11fc0:	movt	r0, #3
   11fc4:	strb	r1, [r0]
   11fc8:	movw	r0, #4624	; 0x1210
   11fcc:	movt	r0, #3
   11fd0:	b	12200 <__assert_fail@plt+0xbf8>
   11fd4:	movw	r0, #4588	; 0x11ec
   11fd8:	movt	r0, #3
   11fdc:	b	121fc <__assert_fail@plt+0xbf4>
   11fe0:	movw	r0, #4586	; 0x11ea
   11fe4:	movt	r0, #3
   11fe8:	b	121fc <__assert_fail@plt+0xbf4>
   11fec:	movw	r0, #4568	; 0x11d8
   11ff0:	movw	r1, #4592	; 0x11f0
   11ff4:	movt	r0, #3
   11ff8:	movt	r1, #3
   11ffc:	ldr	r0, [r0]
   12000:	str	r0, [r1]
   12004:	b	12204 <__assert_fail@plt+0xbfc>
   12008:	movw	r0, #4568	; 0x11d8
   1200c:	movw	r1, #60478	; 0xec3e
   12010:	mov	r2, #5
   12014:	mov	r9, #0
   12018:	movt	r0, #3
   1201c:	movt	r1, #1
   12020:	ldr	r8, [r0]
   12024:	mov	r0, #0
   12028:	bl	1138c <dcgettext@plt>
   1202c:	mvn	r1, #-2147483648	; 0x80000000
   12030:	mov	r2, #0
   12034:	mov	r3, #0
   12038:	stm	sp, {r1, r9}
   1203c:	movw	r1, #65108	; 0xfe54
   12040:	str	r0, [sp, #12]
   12044:	mov	r0, r8
   12048:	str	r9, [sp, #16]
   1204c:	movt	r1, #1
   12050:	str	r1, [sp, #8]
   12054:	bl	1b330 <__assert_fail@plt+0x9d28>
   12058:	movw	r1, #4612	; 0x1204
   1205c:	movt	r1, #3
   12060:	str	r0, [r1]
   12064:	b	12208 <__assert_fail@plt+0xc00>
   12068:	movw	r0, #4568	; 0x11d8
   1206c:	movw	r1, #60396	; 0xebec
   12070:	mov	r2, #5
   12074:	mov	r9, #0
   12078:	movt	r0, #3
   1207c:	movt	r1, #1
   12080:	ldr	r8, [r0]
   12084:	mov	r0, #0
   12088:	bl	1138c <dcgettext@plt>
   1208c:	mvn	r1, #-2147483648	; 0x80000000
   12090:	mov	r2, #1
   12094:	mov	r3, #0
   12098:	stm	sp, {r1, r9}
   1209c:	movw	r1, #65108	; 0xfe54
   120a0:	str	r0, [sp, #12]
   120a4:	mov	r0, r8
   120a8:	str	r9, [sp, #16]
   120ac:	movt	r1, #1
   120b0:	str	r1, [sp, #8]
   120b4:	bl	1b330 <__assert_fail@plt+0x9d28>
   120b8:	movw	r1, #4424	; 0x1148
   120bc:	movt	r1, #3
   120c0:	str	r0, [r1]
   120c4:	b	12208 <__assert_fail@plt+0xc00>
   120c8:	movw	r0, #4576	; 0x11e0
   120cc:	movt	r0, #3
   120d0:	ldrd	r0, [r0]
   120d4:	orrs	r0, r0, r1
   120d8:	bne	12110 <__assert_fail@plt+0xb08>
   120dc:	movw	r0, #4568	; 0x11d8
   120e0:	movt	r0, #3
   120e4:	ldr	r0, [r0]
   120e8:	ldrb	r1, [r0]
   120ec:	cmp	r1, #43	; 0x2b
   120f0:	bne	12110 <__assert_fail@plt+0xb08>
   120f4:	add	r2, r0, #1
   120f8:	mvn	r0, #1
   120fc:	mov	r1, #43	; 0x2b
   12100:	bl	1269c <__assert_fail@plt+0x1094>
   12104:	mov	r9, #0
   12108:	cmp	r0, #0
   1210c:	bne	12208 <__assert_fail@plt+0xc00>
   12110:	movw	r0, #4568	; 0x11d8
   12114:	mov	r9, #0
   12118:	movt	r0, #3
   1211c:	ldr	r0, [r0]
   12120:	str	r0, [r4, r7, lsl #2]
   12124:	add	r7, r7, #1
   12128:	b	12208 <__assert_fail@plt+0xc00>
   1212c:	movw	r0, #4605	; 0x11fd
   12130:	movt	r0, #3
   12134:	b	121fc <__assert_fail@plt+0xbf4>
   12138:	movw	r0, #4626	; 0x1212
   1213c:	movt	r0, #3
   12140:	b	121fc <__assert_fail@plt+0xbf4>
   12144:	movw	r0, #4585	; 0x11e9
   12148:	mov	r1, #1
   1214c:	movt	r0, #3
   12150:	strb	r1, [r0]
   12154:	movw	r0, #4584	; 0x11e8
   12158:	movt	r0, #3
   1215c:	b	12200 <__assert_fail@plt+0xbf8>
   12160:	movw	r8, #4568	; 0x11d8
   12164:	movt	r8, #3
   12168:	ldr	r2, [r8]
   1216c:	cmp	r2, #0
   12170:	beq	12600 <__assert_fail@plt+0xff8>
   12174:	ldr	r0, [sp, #36]	; 0x24
   12178:	mov	r1, #0
   1217c:	mov	r9, #0
   12180:	bl	1269c <__assert_fail@plt+0x1094>
   12184:	cmp	r0, #0
   12188:	bne	12208 <__assert_fail@plt+0xc00>
   1218c:	b	1260c <__assert_fail@plt+0x1004>
   12190:	movw	r0, #4568	; 0x11d8
   12194:	movt	r0, #3
   12198:	ldr	r0, [r0]
   1219c:	cmp	r0, #0
   121a0:	beq	121bc <__assert_fail@plt+0xbb4>
   121a4:	movw	r2, #4408	; 0x1138
   121a8:	movw	r3, #4412	; 0x113c
   121ac:	mov	r1, #101	; 0x65
   121b0:	movt	r2, #3
   121b4:	movt	r3, #3
   121b8:	bl	127c8 <__assert_fail@plt+0x11c0>
   121bc:	movw	r0, #4596	; 0x11f4
   121c0:	movt	r0, #3
   121c4:	b	121fc <__assert_fail@plt+0xbf4>
   121c8:	movw	r0, #4568	; 0x11d8
   121cc:	movt	r0, #3
   121d0:	ldr	r0, [r0]
   121d4:	cmp	r0, #0
   121d8:	beq	121f4 <__assert_fail@plt+0xbec>
   121dc:	movw	r2, #4416	; 0x1140
   121e0:	movw	r3, #4420	; 0x1144
   121e4:	mov	r1, #105	; 0x69
   121e8:	movt	r2, #3
   121ec:	movt	r3, #3
   121f0:	bl	127c8 <__assert_fail@plt+0x11c0>
   121f4:	movw	r0, #4604	; 0x11fc
   121f8:	movt	r0, #3
   121fc:	mov	r1, #1
   12200:	strb	r1, [r0]
   12204:	mov	r9, #0
   12208:	ldr	r1, [sp, #32]
   1220c:	mvn	r0, #0
   12210:	movw	r2, #136	; 0x88
   12214:	movw	r3, #192	; 0xc0
   12218:	str	r0, [sp, #36]	; 0x24
   1221c:	add	r0, sp, #36	; 0x24
   12220:	movt	r2, #2
   12224:	movt	r3, #2
   12228:	str	r0, [sp]
   1222c:	mov	r0, sl
   12230:	bl	11494 <getopt_long@plt>
   12234:	mov	r8, r0
   12238:	cmn	r0, #1
   1223c:	bne	117d8 <__assert_fail@plt+0x1d0>
   12240:	cmp	r6, #0
   12244:	beq	122b0 <__assert_fail@plt+0xca8>
   12248:	movw	r1, #64981	; 0xfdd5
   1224c:	mov	r0, #0
   12250:	mov	r2, #5
   12254:	mov	r5, #0
   12258:	movt	r1, #1
   1225c:	bl	1138c <dcgettext@plt>
   12260:	mvn	r1, #-2147483648	; 0x80000000
   12264:	mov	r2, #1
   12268:	mov	r3, #0
   1226c:	stm	sp, {r1, r5}
   12270:	movw	r1, #65108	; 0xfe54
   12274:	str	r0, [sp, #12]
   12278:	mov	r0, r6
   1227c:	str	r5, [sp, #16]
   12280:	mov	r5, #1
   12284:	movt	r1, #1
   12288:	str	r1, [sp, #8]
   1228c:	bl	1b330 <__assert_fail@plt+0x9d28>
   12290:	movw	r1, #4456	; 0x1168
   12294:	movt	r1, #3
   12298:	str	r0, [r1]
   1229c:	movw	r0, #4632	; 0x1218
   122a0:	movt	r0, #3
   122a4:	strb	r5, [r0]
   122a8:	mov	r0, r6
   122ac:	bl	1622c <__assert_fail@plt+0x4c24>
   122b0:	ldr	r9, [sp, #20]
   122b4:	ldr	r6, [sp, #24]
   122b8:	b	122d0 <__assert_fail@plt+0xcc8>
   122bc:	mov	r0, #0
   122c0:	mov	r7, #0
   122c4:	mov	r9, #0
   122c8:	mov	r6, #0
   122cc:	str	r0, [sp, #28]
   122d0:	movw	r5, #4592	; 0x11f0
   122d4:	movt	r5, #3
   122d8:	ldr	r0, [r5]
   122dc:	cmp	r0, #0
   122e0:	bne	12328 <__assert_fail@plt+0xd20>
   122e4:	movw	r0, #60645	; 0xece5
   122e8:	movt	r0, #1
   122ec:	bl	11434 <getenv@plt>
   122f0:	cmp	r0, #0
   122f4:	beq	1231c <__assert_fail@plt+0xd14>
   122f8:	mov	r0, #2
   122fc:	bl	1631c <__assert_fail@plt+0x4d14>
   12300:	movw	r2, #60676	; 0xed04
   12304:	movw	r1, #60661	; 0xecf5
   12308:	cmp	r0, #0
   1230c:	movt	r2, #1
   12310:	movt	r1, #1
   12314:	movne	r1, r2
   12318:	b	12324 <__assert_fail@plt+0xd1c>
   1231c:	movw	r1, #60676	; 0xed04
   12320:	movt	r1, #1
   12324:	str	r1, [r5]
   12328:	movw	r0, #60691	; 0xed13
   1232c:	movt	r0, #1
   12330:	bl	11434 <getenv@plt>
   12334:	bl	19fac <__assert_fail@plt+0x89a4>
   12338:	movw	r1, #4628	; 0x1214
   1233c:	movt	r1, #3
   12340:	str	r0, [r1]
   12344:	movw	r0, #4576	; 0x11e0
   12348:	movt	r0, #3
   1234c:	ldrd	r2, [r0]
   12350:	orrs	r1, r2, r3
   12354:	bne	12368 <__assert_fail@plt+0xd60>
   12358:	mov	r2, #1
   1235c:	mov	r1, #0
   12360:	str	r2, [r0]
   12364:	str	r1, [r0, #4]
   12368:	movw	r0, #4606	; 0x11fe
   1236c:	movt	r0, #3
   12370:	ldrb	r8, [r0]
   12374:	cmp	r8, #1
   12378:	bne	123a4 <__assert_fail@plt+0xd9c>
   1237c:	movw	r0, #4632	; 0x1218
   12380:	movt	r0, #3
   12384:	ldrb	r0, [r0]
   12388:	cmp	r0, #1
   1238c:	beq	12640 <__assert_fail@plt+0x1038>
   12390:	movw	r0, #4584	; 0x11e8
   12394:	movt	r0, #3
   12398:	ldrb	r0, [r0]
   1239c:	cmp	r0, #1
   123a0:	beq	1264c <__assert_fail@plt+0x1044>
   123a4:	tst	r6, #1
   123a8:	beq	1247c <__assert_fail@plt+0xe74>
   123ac:	ldr	r0, [sp, #28]
   123b0:	tst	r0, #1
   123b4:	beq	123f8 <__assert_fail@plt+0xdf0>
   123b8:	cmp	r8, #0
   123bc:	bne	123d4 <__assert_fail@plt+0xdcc>
   123c0:	movw	r0, #4632	; 0x1218
   123c4:	movt	r0, #3
   123c8:	ldrb	r0, [r0]
   123cc:	cmp	r0, #1
   123d0:	bne	1246c <__assert_fail@plt+0xe64>
   123d4:	movw	r1, #4627	; 0x1213
   123d8:	mov	r0, #1
   123dc:	tst	r9, #1
   123e0:	movt	r1, #3
   123e4:	strb	r0, [r1]
   123e8:	movwne	r1, #4617	; 0x1209
   123ec:	movtne	r1, #3
   123f0:	strbne	r0, [r1]
   123f4:	b	1247c <__assert_fail@plt+0xe74>
   123f8:	movw	r0, #4617	; 0x1209
   123fc:	movt	r0, #3
   12400:	ldrb	r1, [r0]
   12404:	cmp	r1, #0
   12408:	eoreq	r1, r9, #1
   1240c:	tsteq	r1, #1
   12410:	bne	1247c <__assert_fail@plt+0xe74>
   12414:	cmp	r8, #0
   12418:	bne	12430 <__assert_fail@plt+0xe28>
   1241c:	movw	r1, #4632	; 0x1218
   12420:	movt	r1, #3
   12424:	ldrb	r1, [r1]
   12428:	cmp	r1, #1
   1242c:	bne	1247c <__assert_fail@plt+0xe74>
   12430:	movw	r1, #4627	; 0x1213
   12434:	movt	r1, #3
   12438:	ldrb	r1, [r1]
   1243c:	cmp	r1, #0
   12440:	bne	12474 <__assert_fail@plt+0xe6c>
   12444:	movw	r2, #4605	; 0x11fd
   12448:	mov	r1, #1
   1244c:	movt	r2, #3
   12450:	strb	r1, [r2]
   12454:	movw	r2, #4620	; 0x120c
   12458:	movt	r2, #3
   1245c:	ldr	r2, [r2]
   12460:	cmp	r2, #1
   12464:	strbge	r1, [r0]
   12468:	b	1247c <__assert_fail@plt+0xe74>
   1246c:	movw	r0, #4605	; 0x11fd
   12470:	movt	r0, #3
   12474:	mov	r1, #1
   12478:	strb	r1, [r0]
   1247c:	movw	r5, #4544	; 0x11c0
   12480:	movt	r5, #3
   12484:	ldr	r6, [r5]
   12488:	cmp	r6, sl
   1248c:	bge	124b4 <__assert_fail@plt+0xeac>
   12490:	ldr	r1, [sp, #32]
   12494:	sub	r2, sl, r6
   12498:	add	r0, r4, r7, lsl #2
   1249c:	lsl	r2, r2, #2
   124a0:	add	r1, r1, r6, lsl #2
   124a4:	bl	1135c <memcpy@plt>
   124a8:	add	r0, r7, sl
   124ac:	str	sl, [r5]
   124b0:	sub	r7, r0, r6
   124b4:	cmp	r7, #0
   124b8:	beq	124ec <__assert_fail@plt+0xee4>
   124bc:	cmp	r8, #0
   124c0:	beq	124d0 <__assert_fail@plt+0xec8>
   124c4:	mov	r0, r7
   124c8:	mov	r1, r4
   124cc:	b	124f4 <__assert_fail@plt+0xeec>
   124d0:	mov	r0, #1
   124d4:	mov	r1, r4
   124d8:	bl	12c6c <__assert_fail@plt+0x1664>
   124dc:	subs	r7, r7, #1
   124e0:	add	r4, r4, #4
   124e4:	bne	124d0 <__assert_fail@plt+0xec8>
   124e8:	b	124f8 <__assert_fail@plt+0xef0>
   124ec:	mov	r0, #0
   124f0:	mov	r1, #0
   124f4:	bl	12c6c <__assert_fail@plt+0x1664>
   124f8:	movw	r0, #4664	; 0x1238
   124fc:	movt	r0, #3
   12500:	ldr	r0, [r0]
   12504:	bl	1622c <__assert_fail@plt+0x4c24>
   12508:	movw	r0, #4668	; 0x123c
   1250c:	movt	r0, #3
   12510:	ldr	r0, [r0]
   12514:	bl	1622c <__assert_fail@plt+0x4c24>
   12518:	movw	r0, #4676	; 0x1244
   1251c:	movt	r0, #3
   12520:	ldr	r0, [r0]
   12524:	bl	1622c <__assert_fail@plt+0x4c24>
   12528:	movw	r0, #4708	; 0x1264
   1252c:	movt	r0, #3
   12530:	ldr	r0, [r0]
   12534:	bl	1622c <__assert_fail@plt+0x4c24>
   12538:	movw	r0, #4712	; 0x1268
   1253c:	movt	r0, #3
   12540:	ldr	r0, [r0]
   12544:	bl	1622c <__assert_fail@plt+0x4c24>
   12548:	movw	r0, #4716	; 0x126c
   1254c:	movt	r0, #3
   12550:	ldr	r0, [r0]
   12554:	bl	1622c <__assert_fail@plt+0x4c24>
   12558:	movw	r0, #4633	; 0x1219
   1255c:	movt	r0, #3
   12560:	ldrb	r0, [r0]
   12564:	cmp	r0, #1
   12568:	bne	12584 <__assert_fail@plt+0xf7c>
   1256c:	movw	r0, #4560	; 0x11d0
   12570:	movt	r0, #3
   12574:	ldr	r0, [r0]
   12578:	bl	16080 <__assert_fail@plt+0x4a78>
   1257c:	cmn	r0, #1
   12580:	beq	12670 <__assert_fail@plt+0x1068>
   12584:	movw	r0, #4634	; 0x121a
   12588:	movt	r0, #3
   1258c:	ldrb	r0, [r0]
   12590:	sub	sp, fp, #28
   12594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12598:	mov	r0, #1
   1259c:	bl	12884 <__assert_fail@plt+0x127c>
   125a0:	movw	r0, #4464	; 0x1170
   125a4:	movw	r2, #60630	; 0xecd6
   125a8:	mov	r1, #0
   125ac:	movw	r7, #60617	; 0xecc9
   125b0:	movt	r0, #3
   125b4:	movt	r2, #1
   125b8:	str	r1, [sp, #8]
   125bc:	movw	r1, #60600	; 0xecb8
   125c0:	movt	r7, #1
   125c4:	ldr	r3, [r0]
   125c8:	movw	r0, #4564	; 0x11d4
   125cc:	str	r2, [sp, #4]
   125d0:	movw	r2, #60603	; 0xecbb
   125d4:	movt	r1, #1
   125d8:	str	r7, [sp]
   125dc:	movt	r0, #3
   125e0:	movt	r2, #1
   125e4:	ldr	r0, [r0]
   125e8:	bl	1aa50 <__assert_fail@plt+0x9448>
   125ec:	mov	r0, #0
   125f0:	bl	114ac <exit@plt>
   125f4:	mov	r0, #0
   125f8:	bl	12884 <__assert_fail@plt+0x127c>
   125fc:	bl	144dc <__assert_fail@plt+0x2ed4>
   12600:	movw	r1, #60324	; 0xeba4
   12604:	movt	r1, #1
   12608:	b	12654 <__assert_fail@plt+0x104c>
   1260c:	movw	r1, #60374	; 0xebd6
   12610:	mov	r0, #0
   12614:	mov	r2, #5
   12618:	movt	r1, #1
   1261c:	bl	1138c <dcgettext@plt>
   12620:	mov	r4, r0
   12624:	ldr	r0, [r8]
   12628:	bl	19dd0 <__assert_fail@plt+0x87c8>
   1262c:	mov	r3, r0
   12630:	mov	r0, #1
   12634:	mov	r1, #0
   12638:	mov	r2, r4
   1263c:	bl	11428 <error@plt>
   12640:	movw	r1, #60694	; 0xed16
   12644:	movt	r1, #1
   12648:	b	12654 <__assert_fail@plt+0x104c>
   1264c:	movw	r1, #60753	; 0xed51
   12650:	movt	r1, #1
   12654:	mov	r0, #0
   12658:	mov	r2, #5
   1265c:	bl	1138c <dcgettext@plt>
   12660:	mov	r2, r0
   12664:	mov	r0, #1
   12668:	mov	r1, #0
   1266c:	bl	11428 <error@plt>
   12670:	bl	114e8 <__errno_location@plt>
   12674:	ldr	r4, [r0]
   12678:	movw	r1, #60814	; 0xed8e
   1267c:	mov	r0, #0
   12680:	mov	r2, #5
   12684:	movt	r1, #1
   12688:	bl	1138c <dcgettext@plt>
   1268c:	mov	r2, r0
   12690:	mov	r0, #1
   12694:	mov	r1, r4
   12698:	bl	11428 <error@plt>
   1269c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   126a0:	add	fp, sp, #24
   126a4:	sub	sp, sp, #32
   126a8:	movw	r6, #65108	; 0xfe54
   126ac:	mvn	r5, #0
   126b0:	mov	r8, r1
   126b4:	mov	r9, r0
   126b8:	mov	r7, r2
   126bc:	mov	r0, r2
   126c0:	add	r1, sp, #28
   126c4:	add	r3, sp, #16
   126c8:	mov	r2, #10
   126cc:	movt	r6, #1
   126d0:	str	r5, [sp, #12]
   126d4:	str	r5, [sp, #8]
   126d8:	str	r6, [sp]
   126dc:	bl	1d80c <__assert_fail@plt+0xc204>
   126e0:	orr	r1, r0, #2
   126e4:	cmp	r1, #2
   126e8:	bne	127b0 <__assert_fail@plt+0x11a8>
   126ec:	ldr	r3, [sp, #28]
   126f0:	mov	r4, #0
   126f4:	cmp	r3, r7
   126f8:	ldrne	r0, [sp, #16]
   126fc:	ldrne	r1, [sp, #20]
   12700:	orrsne	r2, r0, r1
   12704:	bne	12714 <__assert_fail@plt+0x110c>
   12708:	mov	r0, r4
   1270c:	sub	sp, fp, #24
   12710:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12714:	ldrb	r2, [r3]
   12718:	cmp	r2, #58	; 0x3a
   1271c:	bne	1277c <__assert_fail@plt+0x1174>
   12720:	add	r5, r3, #1
   12724:	add	r1, sp, #28
   12728:	add	r3, sp, #8
   1272c:	mov	r2, #10
   12730:	str	r6, [sp]
   12734:	mov	r0, r5
   12738:	bl	1d80c <__assert_fail@plt+0xc204>
   1273c:	cmp	r0, #0
   12740:	bne	127b0 <__assert_fail@plt+0x11a8>
   12744:	ldr	r2, [sp, #28]
   12748:	cmp	r5, r2
   1274c:	beq	12708 <__assert_fail@plt+0x1100>
   12750:	ldr	r0, [sp, #16]
   12754:	ldr	r5, [sp, #8]
   12758:	ldr	r1, [sp, #20]
   1275c:	ldr	r3, [sp, #12]
   12760:	subs	r7, r5, r0
   12764:	sbcs	r7, r3, r1
   12768:	bcc	12708 <__assert_fail@plt+0x1100>
   1276c:	ldrb	r2, [r2]
   12770:	cmp	r2, #0
   12774:	bne	12708 <__assert_fail@plt+0x1100>
   12778:	b	12788 <__assert_fail@plt+0x1180>
   1277c:	mvn	r3, #0
   12780:	cmp	r2, #0
   12784:	bne	12708 <__assert_fail@plt+0x1100>
   12788:	movw	r2, #4448	; 0x1160
   1278c:	movw	r7, #4576	; 0x11e0
   12790:	mov	r4, #1
   12794:	movt	r7, #3
   12798:	movt	r2, #3
   1279c:	str	r0, [r7]
   127a0:	str	r5, [r2]
   127a4:	str	r3, [r2, #4]
   127a8:	str	r1, [r7, #4]
   127ac:	b	12708 <__assert_fail@plt+0x1100>
   127b0:	movw	r3, #192	; 0xc0
   127b4:	mov	r1, r9
   127b8:	mov	r2, r8
   127bc:	str	r7, [sp]
   127c0:	movt	r3, #2
   127c4:	bl	1d748 <__assert_fail@plt+0xc140>
   127c8:	push	{r4, r5, r6, r7, fp, lr}
   127cc:	add	fp, sp, #16
   127d0:	sub	sp, sp, #8
   127d4:	mov	r5, r0
   127d8:	ldrb	r0, [r0]
   127dc:	mov	r4, r1
   127e0:	mov	r6, r3
   127e4:	sub	r1, r0, #48	; 0x30
   127e8:	cmp	r1, #10
   127ec:	strbcs	r0, [r2]
   127f0:	ldrbcs	r0, [r5, #1]!
   127f4:	cmp	r0, #0
   127f8:	beq	12834 <__assert_fail@plt+0x122c>
   127fc:	movw	r0, #65108	; 0xfe54
   12800:	add	r3, sp, #4
   12804:	mov	r1, #0
   12808:	mov	r2, #10
   1280c:	movt	r0, #1
   12810:	str	r0, [sp]
   12814:	mov	r0, r5
   12818:	bl	1cc50 <__assert_fail@plt+0xb648>
   1281c:	cmp	r0, #0
   12820:	bne	1283c <__assert_fail@plt+0x1234>
   12824:	ldr	r0, [sp, #4]
   12828:	cmp	r0, #0
   1282c:	ble	1283c <__assert_fail@plt+0x1234>
   12830:	str	r0, [r6]
   12834:	sub	sp, fp, #16
   12838:	pop	{r4, r5, r6, r7, fp, pc}
   1283c:	bl	114e8 <__errno_location@plt>
   12840:	ldr	r6, [r0]
   12844:	movw	r1, #65024	; 0xfe00
   12848:	mov	r0, #0
   1284c:	mov	r2, #5
   12850:	movt	r1, #1
   12854:	bl	1138c <dcgettext@plt>
   12858:	mov	r7, r0
   1285c:	mov	r0, r5
   12860:	bl	19dd0 <__assert_fail@plt+0x87c8>
   12864:	str	r0, [sp]
   12868:	mov	r0, #0
   1286c:	mov	r1, r6
   12870:	mov	r2, r7
   12874:	mov	r3, r4
   12878:	bl	11428 <error@plt>
   1287c:	mov	r0, #1
   12880:	bl	12884 <__assert_fail@plt+0x127c>
   12884:	push	{fp, lr}
   12888:	mov	fp, sp
   1288c:	sub	sp, sp, #56	; 0x38
   12890:	mov	r4, r0
   12894:	cmp	r0, #0
   12898:	bne	12c28 <__assert_fail@plt+0x1620>
   1289c:	movw	r1, #60868	; 0xedc4
   128a0:	mov	r0, #0
   128a4:	mov	r2, #5
   128a8:	movt	r1, #1
   128ac:	bl	1138c <dcgettext@plt>
   128b0:	mov	r1, r0
   128b4:	movw	r0, #4768	; 0x12a0
   128b8:	movt	r0, #3
   128bc:	ldr	r2, [r0]
   128c0:	mov	r0, #1
   128c4:	bl	11518 <__printf_chk@plt>
   128c8:	movw	r1, #60901	; 0xede5
   128cc:	mov	r0, #0
   128d0:	mov	r2, #5
   128d4:	movt	r1, #1
   128d8:	bl	1138c <dcgettext@plt>
   128dc:	movw	r7, #4564	; 0x11d4
   128e0:	movt	r7, #3
   128e4:	ldr	r1, [r7]
   128e8:	bl	112cc <fputs_unlocked@plt>
   128ec:	movw	r1, #65230	; 0xfece
   128f0:	mov	r0, #0
   128f4:	mov	r2, #5
   128f8:	movt	r1, #1
   128fc:	bl	1138c <dcgettext@plt>
   12900:	ldr	r1, [r7]
   12904:	bl	112cc <fputs_unlocked@plt>
   12908:	movw	r1, #65286	; 0xff06
   1290c:	mov	r0, #0
   12910:	mov	r2, #5
   12914:	movt	r1, #1
   12918:	bl	1138c <dcgettext@plt>
   1291c:	ldr	r1, [r7]
   12920:	bl	112cc <fputs_unlocked@plt>
   12924:	movw	r1, #60946	; 0xee12
   12928:	mov	r0, #0
   1292c:	mov	r2, #5
   12930:	movt	r1, #1
   12934:	bl	1138c <dcgettext@plt>
   12938:	ldr	r1, [r7]
   1293c:	bl	112cc <fputs_unlocked@plt>
   12940:	movw	r1, #61280	; 0xef60
   12944:	mov	r0, #0
   12948:	mov	r2, #5
   1294c:	movt	r1, #1
   12950:	bl	1138c <dcgettext@plt>
   12954:	ldr	r1, [r7]
   12958:	bl	112cc <fputs_unlocked@plt>
   1295c:	movw	r1, #61550	; 0xf06e
   12960:	mov	r0, #0
   12964:	mov	r2, #5
   12968:	movt	r1, #1
   1296c:	bl	1138c <dcgettext@plt>
   12970:	ldr	r1, [r7]
   12974:	bl	112cc <fputs_unlocked@plt>
   12978:	movw	r1, #61950	; 0xf1fe
   1297c:	mov	r0, #0
   12980:	mov	r2, #5
   12984:	movt	r1, #1
   12988:	bl	1138c <dcgettext@plt>
   1298c:	ldr	r1, [r7]
   12990:	bl	112cc <fputs_unlocked@plt>
   12994:	movw	r1, #62377	; 0xf3a9
   12998:	mov	r0, #0
   1299c:	mov	r2, #5
   129a0:	movt	r1, #1
   129a4:	bl	1138c <dcgettext@plt>
   129a8:	ldr	r1, [r7]
   129ac:	bl	112cc <fputs_unlocked@plt>
   129b0:	movw	r1, #62597	; 0xf485
   129b4:	mov	r0, #0
   129b8:	mov	r2, #5
   129bc:	movt	r1, #1
   129c0:	bl	1138c <dcgettext@plt>
   129c4:	ldr	r1, [r7]
   129c8:	bl	112cc <fputs_unlocked@plt>
   129cc:	movw	r1, #62741	; 0xf515
   129d0:	mov	r0, #0
   129d4:	mov	r2, #5
   129d8:	movt	r1, #1
   129dc:	bl	1138c <dcgettext@plt>
   129e0:	ldr	r1, [r7]
   129e4:	bl	112cc <fputs_unlocked@plt>
   129e8:	movw	r1, #63087	; 0xf66f
   129ec:	mov	r0, #0
   129f0:	mov	r2, #5
   129f4:	movt	r1, #1
   129f8:	bl	1138c <dcgettext@plt>
   129fc:	ldr	r1, [r7]
   12a00:	bl	112cc <fputs_unlocked@plt>
   12a04:	movw	r1, #63340	; 0xf76c
   12a08:	mov	r0, #0
   12a0c:	mov	r2, #5
   12a10:	movt	r1, #1
   12a14:	bl	1138c <dcgettext@plt>
   12a18:	ldr	r1, [r7]
   12a1c:	bl	112cc <fputs_unlocked@plt>
   12a20:	movw	r1, #63666	; 0xf8b2
   12a24:	mov	r0, #0
   12a28:	mov	r2, #5
   12a2c:	movt	r1, #1
   12a30:	bl	1138c <dcgettext@plt>
   12a34:	ldr	r1, [r7]
   12a38:	bl	112cc <fputs_unlocked@plt>
   12a3c:	movw	r1, #63902	; 0xf99e
   12a40:	mov	r0, #0
   12a44:	mov	r2, #5
   12a48:	movt	r1, #1
   12a4c:	bl	1138c <dcgettext@plt>
   12a50:	ldr	r1, [r7]
   12a54:	bl	112cc <fputs_unlocked@plt>
   12a58:	movw	r1, #64006	; 0xfa06
   12a5c:	mov	r0, #0
   12a60:	mov	r2, #5
   12a64:	movt	r1, #1
   12a68:	bl	1138c <dcgettext@plt>
   12a6c:	ldr	r1, [r7]
   12a70:	bl	112cc <fputs_unlocked@plt>
   12a74:	movw	r1, #64407	; 0xfb97
   12a78:	mov	r0, #0
   12a7c:	mov	r2, #5
   12a80:	movt	r1, #1
   12a84:	bl	1138c <dcgettext@plt>
   12a88:	ldr	r1, [r7]
   12a8c:	bl	112cc <fputs_unlocked@plt>
   12a90:	movw	r1, #64622	; 0xfc6e
   12a94:	mov	r0, #0
   12a98:	mov	r2, #5
   12a9c:	movt	r1, #1
   12aa0:	bl	1138c <dcgettext@plt>
   12aa4:	ldr	r1, [r7]
   12aa8:	bl	112cc <fputs_unlocked@plt>
   12aac:	movw	r1, #64667	; 0xfc9b
   12ab0:	mov	r0, #0
   12ab4:	mov	r2, #5
   12ab8:	movt	r1, #1
   12abc:	bl	1138c <dcgettext@plt>
   12ac0:	ldr	r1, [r7]
   12ac4:	bl	112cc <fputs_unlocked@plt>
   12ac8:	movw	r0, #624	; 0x270
   12acc:	mov	r2, #48	; 0x30
   12ad0:	mov	r6, sp
   12ad4:	movw	r5, #60600	; 0xecb8
   12ad8:	movt	r0, #2
   12adc:	movt	r5, #1
   12ae0:	add	r1, r0, #32
   12ae4:	add	r3, r0, #16
   12ae8:	vld1.64	{d18-d19}, [r0], r2
   12aec:	vld1.64	{d16-d17}, [r1]
   12af0:	vld1.64	{d20-d21}, [r3]
   12af4:	add	r1, r6, #32
   12af8:	vldr	d22, [r0]
   12afc:	add	r0, r6, #16
   12b00:	vst1.64	{d16-d17}, [r1]
   12b04:	movw	r1, #65361	; 0xff51
   12b08:	vst1.64	{d20-d21}, [r0]
   12b0c:	mov	r0, r6
   12b10:	vst1.64	{d18-d19}, [r0], r2
   12b14:	movt	r1, #1
   12b18:	vstr	d22, [r0]
   12b1c:	mov	r0, r5
   12b20:	bl	112f0 <strcmp@plt>
   12b24:	cmp	r0, #0
   12b28:	ldrne	r1, [r6, #8]!
   12b2c:	cmpne	r1, #0
   12b30:	bne	12b1c <__assert_fail@plt+0x1514>
   12b34:	ldr	r6, [r6, #4]
   12b38:	movw	r1, #65456	; 0xffb0
   12b3c:	mov	r0, #0
   12b40:	mov	r2, #5
   12b44:	movt	r1, #1
   12b48:	bl	1138c <dcgettext@plt>
   12b4c:	movw	r2, #60603	; 0xecbb
   12b50:	movw	r3, #65479	; 0xffc7
   12b54:	mov	r1, r0
   12b58:	mov	r0, #1
   12b5c:	movt	r2, #1
   12b60:	movt	r3, #1
   12b64:	bl	11518 <__printf_chk@plt>
   12b68:	cmp	r6, #0
   12b6c:	mov	r0, #5
   12b70:	mov	r1, #0
   12b74:	moveq	r6, r5
   12b78:	bl	11578 <setlocale@plt>
   12b7c:	cmp	r0, #0
   12b80:	beq	12bb8 <__assert_fail@plt+0x15b0>
   12b84:	movw	r1, #65519	; 0xffef
   12b88:	mov	r2, #3
   12b8c:	movt	r1, #1
   12b90:	bl	115e4 <strncmp@plt>
   12b94:	cmp	r0, #0
   12b98:	beq	12bb8 <__assert_fail@plt+0x15b0>
   12b9c:	movw	r1, #65523	; 0xfff3
   12ba0:	mov	r0, #0
   12ba4:	mov	r2, #5
   12ba8:	movt	r1, #1
   12bac:	bl	1138c <dcgettext@plt>
   12bb0:	ldr	r1, [r7]
   12bb4:	bl	112cc <fputs_unlocked@plt>
   12bb8:	movw	r1, #58	; 0x3a
   12bbc:	mov	r0, #0
   12bc0:	mov	r2, #5
   12bc4:	movt	r1, #2
   12bc8:	bl	1138c <dcgettext@plt>
   12bcc:	movw	r2, #65479	; 0xffc7
   12bd0:	mov	r1, r0
   12bd4:	mov	r0, #1
   12bd8:	mov	r3, r5
   12bdc:	movt	r2, #1
   12be0:	bl	11518 <__printf_chk@plt>
   12be4:	movw	r1, #85	; 0x55
   12be8:	mov	r0, #0
   12bec:	mov	r2, #5
   12bf0:	movt	r1, #2
   12bf4:	bl	1138c <dcgettext@plt>
   12bf8:	movw	r3, #65108	; 0xfe54
   12bfc:	mov	r1, r0
   12c00:	movw	r0, #65389	; 0xff6d
   12c04:	cmp	r6, r5
   12c08:	mov	r2, r6
   12c0c:	movt	r0, #1
   12c10:	movt	r3, #1
   12c14:	moveq	r3, r0
   12c18:	mov	r0, #1
   12c1c:	bl	11518 <__printf_chk@plt>
   12c20:	mov	r0, r4
   12c24:	bl	114ac <exit@plt>
   12c28:	movw	r0, #4552	; 0x11c8
   12c2c:	movw	r1, #60829	; 0xed9d
   12c30:	mov	r2, #5
   12c34:	movt	r0, #3
   12c38:	movt	r1, #1
   12c3c:	ldr	r5, [r0]
   12c40:	mov	r0, #0
   12c44:	bl	1138c <dcgettext@plt>
   12c48:	mov	r2, r0
   12c4c:	movw	r0, #4768	; 0x12a0
   12c50:	mov	r1, #1
   12c54:	movt	r0, #3
   12c58:	ldr	r3, [r0]
   12c5c:	mov	r0, r5
   12c60:	bl	11530 <__fprintf_chk@plt>
   12c64:	mov	r0, r4
   12c68:	bl	114ac <exit@plt>
   12c6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c70:	add	fp, sp, #28
   12c74:	sub	sp, sp, #44	; 0x2c
   12c78:	mov	r5, r0
   12c7c:	movw	r0, #4424	; 0x1148
   12c80:	movw	r2, #4652	; 0x122c
   12c84:	mov	r4, r1
   12c88:	movt	r0, #3
   12c8c:	movt	r2, #3
   12c90:	ldr	r0, [r0]
   12c94:	subs	r1, r0, #10
   12c98:	str	r1, [r2]
   12c9c:	bgt	12cc0 <__assert_fail@plt+0x16b8>
   12ca0:	movw	r1, #4625	; 0x1211
   12ca4:	mov	r2, #1
   12ca8:	movt	r1, #3
   12cac:	strb	r2, [r1]
   12cb0:	movw	r1, #4624	; 0x1210
   12cb4:	movt	r1, #3
   12cb8:	strb	r2, [r1]
   12cbc:	b	12cd4 <__assert_fail@plt+0x16cc>
   12cc0:	movw	r2, #4624	; 0x1210
   12cc4:	movt	r2, #3
   12cc8:	ldrb	r2, [r2]
   12ccc:	cmp	r2, #1
   12cd0:	bne	12ce4 <__assert_fail@plt+0x16dc>
   12cd4:	movw	r1, #4652	; 0x122c
   12cd8:	movt	r1, #3
   12cdc:	str	r0, [r1]
   12ce0:	mov	r1, r0
   12ce4:	movw	r0, #4588	; 0x11ec
   12ce8:	movt	r0, #3
   12cec:	ldrb	r0, [r0]
   12cf0:	cmp	r0, #1
   12cf4:	bne	12d0c <__assert_fail@plt+0x1704>
   12cf8:	add	r0, r1, r1, lsr #31
   12cfc:	movw	r1, #4652	; 0x122c
   12d00:	asr	r0, r0, #1
   12d04:	movt	r1, #3
   12d08:	str	r0, [r1]
   12d0c:	movw	r0, #4606	; 0x11fe
   12d10:	cmp	r5, #0
   12d14:	movt	r0, #3
   12d18:	beq	12d3c <__assert_fail@plt+0x1734>
   12d1c:	ldrb	r0, [r0]
   12d20:	mov	r1, #0
   12d24:	cmp	r0, #1
   12d28:	movweq	r0, #4456	; 0x1168
   12d2c:	moveq	r1, #1
   12d30:	movteq	r0, #3
   12d34:	streq	r5, [r0]
   12d38:	b	12d44 <__assert_fail@plt+0x173c>
   12d3c:	mov	r1, #0
   12d40:	strb	r1, [r0]
   12d44:	movw	r3, #4585	; 0x11e9
   12d48:	movt	r3, #3
   12d4c:	ldrb	r0, [r3]
   12d50:	cmp	r0, #0
   12d54:	movweq	r0, #4586	; 0x11ea
   12d58:	moveq	r2, #1
   12d5c:	movteq	r0, #3
   12d60:	strbeq	r2, [r0]
   12d64:	movw	r0, #4456	; 0x1168
   12d68:	movt	r0, #3
   12d6c:	ldr	r0, [r0]
   12d70:	cmp	r0, #2
   12d74:	blt	12dfc <__assert_fail@plt+0x17f4>
   12d78:	movw	r3, #4617	; 0x1209
   12d7c:	movw	r2, #4605	; 0x11fd
   12d80:	movt	r3, #3
   12d84:	movt	r2, #3
   12d88:	ldrb	r7, [r3]
   12d8c:	ldrb	r2, [r2]
   12d90:	cmp	r7, #0
   12d94:	beq	12e14 <__assert_fail@plt+0x180c>
   12d98:	movw	r3, #4620	; 0x120c
   12d9c:	movt	r3, #3
   12da0:	ldr	r3, [r3]
   12da4:	cmp	r3, #1
   12da8:	bne	12dd4 <__assert_fail@plt+0x17cc>
   12dac:	eors	r7, r2, #1
   12db0:	beq	12dd4 <__assert_fail@plt+0x17cc>
   12db4:	movw	r7, #4440	; 0x1158
   12db8:	movt	r7, #3
   12dbc:	ldr	r6, [r7]
   12dc0:	ldrb	r6, [r6]
   12dc4:	cmp	r6, #9
   12dc8:	movweq	r6, #65109	; 0xfe55
   12dcc:	movteq	r6, #1
   12dd0:	streq	r6, [r7]
   12dd4:	movw	r7, #4627	; 0x1213
   12dd8:	cmp	r3, #1
   12ddc:	mov	r6, #1
   12de0:	movt	r7, #3
   12de4:	strb	r6, [r7]
   12de8:	bne	12e64 <__assert_fail@plt+0x185c>
   12dec:	movw	r3, #4440	; 0x1158
   12df0:	movt	r3, #3
   12df4:	ldr	r3, [r3]
   12df8:	b	12e58 <__assert_fail@plt+0x1850>
   12dfc:	mov	r2, #1
   12e00:	strb	r2, [r3]
   12e04:	movw	r2, #4605	; 0x11fd
   12e08:	movt	r2, #3
   12e0c:	ldrb	r2, [r2]
   12e10:	b	12e84 <__assert_fail@plt+0x187c>
   12e14:	mov	r6, #1
   12e18:	movw	r7, #4620	; 0x120c
   12e1c:	cmp	r2, #0
   12e20:	strb	r6, [r3]
   12e24:	movw	r3, #4627	; 0x1213
   12e28:	movt	r7, #3
   12e2c:	movt	r3, #3
   12e30:	str	r6, [r7]
   12e34:	movw	r7, #65107	; 0xfe53
   12e38:	strb	r6, [r3]
   12e3c:	movw	r3, #65109	; 0xfe55
   12e40:	movt	r7, #1
   12e44:	movt	r3, #1
   12e48:	movne	r3, r7
   12e4c:	movw	r7, #4440	; 0x1158
   12e50:	movt	r7, #3
   12e54:	str	r3, [r7]
   12e58:	ldrb	r3, [r3]
   12e5c:	cmp	r3, #9
   12e60:	beq	12e74 <__assert_fail@plt+0x186c>
   12e64:	movw	r3, #4596	; 0x11f4
   12e68:	mov	r7, #1
   12e6c:	movt	r3, #3
   12e70:	strb	r7, [r3]
   12e74:	movw	r3, #4604	; 0x11fc
   12e78:	mov	r7, #1
   12e7c:	movt	r3, #3
   12e80:	strb	r7, [r3]
   12e84:	cmp	r2, #0
   12e88:	movwne	r2, #4627	; 0x1213
   12e8c:	movne	r3, #0
   12e90:	movtne	r2, #3
   12e94:	strbne	r3, [r2]
   12e98:	movw	r2, #4607	; 0x11ff
   12e9c:	mov	r3, #0
   12ea0:	movt	r2, #3
   12ea4:	ldrb	ip, [r2]
   12ea8:	cmp	ip, #1
   12eac:	bne	12f18 <__assert_fail@plt+0x1910>
   12eb0:	movw	r3, #4436	; 0x1154
   12eb4:	movw	r7, #4460	; 0x116c
   12eb8:	movt	r3, #3
   12ebc:	movt	r7, #3
   12ec0:	ldr	r3, [r3]
   12ec4:	str	r3, [r7]
   12ec8:	movw	r7, #4428	; 0x114c
   12ecc:	movw	r3, #4432	; 0x1150
   12ed0:	movt	r7, #3
   12ed4:	movt	r3, #3
   12ed8:	ldrb	r7, [r7]
   12edc:	ldr	r3, [r3]
   12ee0:	cmp	r7, #9
   12ee4:	bne	12efc <__assert_fail@plt+0x18f4>
   12ee8:	asr	r7, r3, #31
   12eec:	add	r3, r3, r7, lsr #29
   12ef0:	bic	r3, r3, #7
   12ef4:	add	r3, r3, #8
   12ef8:	b	12f00 <__assert_fail@plt+0x18f8>
   12efc:	add	r3, r3, #1
   12f00:	movw	r7, #4656	; 0x1230
   12f04:	cmp	r1, #0
   12f08:	movt	r7, #3
   12f0c:	movne	r1, r3
   12f10:	str	r3, [r7]
   12f14:	mov	r3, r1
   12f18:	movw	r1, #4620	; 0x120c
   12f1c:	sub	r6, r0, #1
   12f20:	movt	r1, #3
   12f24:	ldr	r1, [r1]
   12f28:	cmn	r1, #1
   12f2c:	ble	12f54 <__assert_fail@plt+0x194c>
   12f30:	cmp	r1, #0
   12f34:	beq	12fb0 <__assert_fail@plt+0x19a8>
   12f38:	cmp	r0, #0
   12f3c:	ble	12f7c <__assert_fail@plt+0x1974>
   12f40:	mvn	r7, #-2147483648	; 0x80000000
   12f44:	udiv	r2, r7, r1
   12f48:	cmp	r2, r6
   12f4c:	bge	12fb0 <__assert_fail@plt+0x19a8>
   12f50:	b	12fb4 <__assert_fail@plt+0x19ac>
   12f54:	cmp	r0, #0
   12f58:	ble	12f98 <__assert_fail@plt+0x1990>
   12f5c:	cmn	r1, #1
   12f60:	beq	12fb0 <__assert_fail@plt+0x19a8>
   12f64:	mov	r2, #-2147483648	; 0x80000000
   12f68:	mvn	r7, #-2147483648	; 0x80000000
   12f6c:	sdiv	r2, r2, r1
   12f70:	cmp	r2, r6
   12f74:	bge	12fb0 <__assert_fail@plt+0x19a8>
   12f78:	b	12fb4 <__assert_fail@plt+0x19ac>
   12f7c:	beq	12fac <__assert_fail@plt+0x19a4>
   12f80:	mov	r2, #-2147483648	; 0x80000000
   12f84:	mvn	r7, #-2147483648	; 0x80000000
   12f88:	sdiv	r2, r2, r6
   12f8c:	cmp	r2, r1
   12f90:	mulge	r7, r6, r1
   12f94:	b	12fb4 <__assert_fail@plt+0x19ac>
   12f98:	mvn	r7, #-2147483648	; 0x80000000
   12f9c:	sdiv	r2, r7, r1
   12fa0:	cmp	r0, r2
   12fa4:	bgt	12fb0 <__assert_fail@plt+0x19a8>
   12fa8:	b	12fb4 <__assert_fail@plt+0x19ac>
   12fac:	mvn	r6, #0
   12fb0:	mul	r7, r6, r1
   12fb4:	movw	r1, #4444	; 0x115c
   12fb8:	movt	r1, #3
   12fbc:	ldr	r1, [r1]
   12fc0:	sub	r1, r1, r3
   12fc4:	subs	r1, r1, r7
   12fc8:	movvs	r1, #0
   12fcc:	sdiv	r0, r1, r0
   12fd0:	movw	r1, #4660	; 0x1234
   12fd4:	movt	r1, #3
   12fd8:	cmp	r0, #0
   12fdc:	str	r0, [r1]
   12fe0:	ble	144b8 <__assert_fail@plt+0x2eb0>
   12fe4:	cmp	ip, #0
   12fe8:	beq	1301c <__assert_fail@plt+0x1a14>
   12fec:	movw	r6, #4664	; 0x1238
   12ff0:	movt	r6, #3
   12ff4:	ldr	r0, [r6]
   12ff8:	bl	1622c <__assert_fail@plt+0x4c24>
   12ffc:	movw	r0, #4432	; 0x1150
   13000:	movt	r0, #3
   13004:	ldr	r0, [r0]
   13008:	cmp	r0, #11
   1300c:	movls	r0, #11
   13010:	add	r0, r0, #1
   13014:	bl	1ac84 <__assert_fail@plt+0x967c>
   13018:	str	r0, [r6]
   1301c:	movw	r6, #4668	; 0x123c
   13020:	movt	r6, #3
   13024:	ldr	r0, [r6]
   13028:	bl	1622c <__assert_fail@plt+0x4c24>
   1302c:	movw	r0, #4412	; 0x113c
   13030:	movt	r0, #3
   13034:	ldr	r0, [r0]
   13038:	cmp	r0, #8
   1303c:	movle	r0, #8
   13040:	bl	1ac84 <__assert_fail@plt+0x967c>
   13044:	movw	r8, #4672	; 0x1240
   13048:	movw	r7, #4676	; 0x1244
   1304c:	str	r0, [r6]
   13050:	mov	r0, #0
   13054:	movt	r8, #3
   13058:	movt	r7, #3
   1305c:	str	r0, [r8]
   13060:	ldr	r0, [r7]
   13064:	bl	1622c <__assert_fail@plt+0x4c24>
   13068:	movw	r0, #4456	; 0x1168
   1306c:	mov	r1, #40	; 0x28
   13070:	movt	r0, #3
   13074:	ldr	r0, [r0]
   13078:	bl	1ad54 <__assert_fail@plt+0x974c>
   1307c:	mov	r6, r0
   13080:	str	r0, [r7]
   13084:	movw	r0, #4606	; 0x11fe
   13088:	movt	r0, #3
   1308c:	ldrb	r0, [r0]
   13090:	cmp	r0, #1
   13094:	beq	130e4 <__assert_fail@plt+0x1adc>
   13098:	cmp	r5, #1
   1309c:	blt	1314c <__assert_fail@plt+0x1b44>
   130a0:	ldr	r0, [r4]
   130a4:	mov	r1, r6
   130a8:	bl	14508 <__assert_fail@plt+0x2f00>
   130ac:	cmp	r0, #0
   130b0:	beq	144b0 <__assert_fail@plt+0x2ea8>
   130b4:	ldr	r0, [r6]
   130b8:	ldr	r4, [r4]
   130bc:	bl	11524 <fileno@plt>
   130c0:	mov	r1, r0
   130c4:	mov	r0, r4
   130c8:	bl	1462c <__assert_fail@plt+0x3024>
   130cc:	mov	r0, #0
   130d0:	add	r4, r6, #4
   130d4:	str	r0, [r6, #24]
   130d8:	b	131b4 <__assert_fail@plt+0x1bac>
   130dc:	add	r4, r4, #4
   130e0:	add	r6, r6, #40	; 0x28
   130e4:	cmp	r5, #0
   130e8:	beq	13124 <__assert_fail@plt+0x1b1c>
   130ec:	ldr	r0, [r4]
   130f0:	mov	r1, r6
   130f4:	bl	14508 <__assert_fail@plt+0x2f00>
   130f8:	sub	r5, r5, #1
   130fc:	cmp	r0, #0
   13100:	bne	130dc <__assert_fail@plt+0x1ad4>
   13104:	movw	r0, #4456	; 0x1168
   13108:	sub	r6, r6, #40	; 0x28
   1310c:	movt	r0, #3
   13110:	mov	r1, r0
   13114:	ldr	r0, [r0]
   13118:	sub	r0, r0, #1
   1311c:	str	r0, [r1]
   13120:	b	130dc <__assert_fail@plt+0x1ad4>
   13124:	movw	r0, #4456	; 0x1168
   13128:	movt	r0, #3
   1312c:	ldr	r0, [r0]
   13130:	cmp	r0, #0
   13134:	beq	144b0 <__assert_fail@plt+0x2ea8>
   13138:	movw	r0, #65108	; 0xfe54
   1313c:	mvn	r1, #0
   13140:	movt	r0, #1
   13144:	bl	1462c <__assert_fail@plt+0x3024>
   13148:	b	131f4 <__assert_fail@plt+0x1bec>
   1314c:	movw	r1, #60814	; 0xed8e
   13150:	mov	r0, #0
   13154:	mov	r2, #5
   13158:	mov	r5, #0
   1315c:	movt	r1, #1
   13160:	bl	1138c <dcgettext@plt>
   13164:	mov	r4, r6
   13168:	mov	r1, #1
   1316c:	str	r0, [r4, #4]!
   13170:	movw	r0, #4560	; 0x11d0
   13174:	movt	r0, #3
   13178:	ldr	r0, [r0]
   1317c:	str	r0, [r6]
   13180:	movw	r0, #4633	; 0x1219
   13184:	strb	r5, [r6, #37]	; 0x25
   13188:	str	r5, [r6, #8]
   1318c:	movt	r0, #3
   13190:	strb	r1, [r0]
   13194:	ldr	r0, [r8]
   13198:	mvn	r1, #0
   1319c:	add	r0, r0, #1
   131a0:	str	r0, [r8]
   131a4:	movw	r0, #65108	; 0xfe54
   131a8:	movt	r0, #1
   131ac:	bl	1462c <__assert_fail@plt+0x3024>
   131b0:	str	r5, [r6, #24]
   131b4:	movw	r0, #4456	; 0x1168
   131b8:	movt	r0, #3
   131bc:	ldr	r2, [r0]
   131c0:	cmp	r2, #1
   131c4:	beq	131f4 <__assert_fail@plt+0x1bec>
   131c8:	ldr	r0, [r6]
   131cc:	ldr	r1, [r4]
   131d0:	rsb	r2, r2, #1
   131d4:	add	r3, r6, #40	; 0x28
   131d8:	mov	r7, #0
   131dc:	stm	r3, {r0, r1, r7}
   131e0:	strb	r7, [r3, #37]	; 0x25
   131e4:	str	r7, [r3, #24]
   131e8:	adds	r2, r2, #1
   131ec:	add	r3, r3, #40	; 0x28
   131f0:	bne	131dc <__assert_fail@plt+0x1bd4>
   131f4:	ldr	r0, [r8]
   131f8:	movw	r1, #4680	; 0x1248
   131fc:	movw	r8, #4585	; 0x11e9
   13200:	movt	r1, #3
   13204:	movt	r8, #3
   13208:	str	r0, [r1]
   1320c:	ldrb	r0, [r8]
   13210:	cmp	r0, #0
   13214:	bne	133e4 <__assert_fail@plt+0x1ddc>
   13218:	movw	r0, #4456	; 0x1168
   1321c:	movw	r1, #4652	; 0x122c
   13220:	movt	r0, #3
   13224:	movt	r1, #3
   13228:	ldr	r0, [r0]
   1322c:	cmn	r0, #1
   13230:	ble	1325c <__assert_fail@plt+0x1c54>
   13234:	ldr	r1, [r1]
   13238:	cmp	r0, #0
   1323c:	beq	132b4 <__assert_fail@plt+0x1cac>
   13240:	cmn	r1, #1
   13244:	ble	13284 <__assert_fail@plt+0x1c7c>
   13248:	mvn	r2, #-2147483648	; 0x80000000
   1324c:	udiv	r2, r2, r0
   13250:	cmp	r2, r1
   13254:	bge	132b4 <__assert_fail@plt+0x1cac>
   13258:	b	132d0 <__assert_fail@plt+0x1cc8>
   1325c:	ldr	r1, [r1]
   13260:	cmn	r1, #1
   13264:	ble	1329c <__assert_fail@plt+0x1c94>
   13268:	cmn	r0, #1
   1326c:	beq	132b4 <__assert_fail@plt+0x1cac>
   13270:	mov	r2, #-2147483648	; 0x80000000
   13274:	sdiv	r2, r2, r0
   13278:	cmp	r2, r1
   1327c:	bge	132b4 <__assert_fail@plt+0x1cac>
   13280:	b	132d0 <__assert_fail@plt+0x1cc8>
   13284:	beq	132b0 <__assert_fail@plt+0x1ca8>
   13288:	mov	r2, #-2147483648	; 0x80000000
   1328c:	sdiv	r2, r2, r1
   13290:	cmp	r2, r0
   13294:	bge	132b4 <__assert_fail@plt+0x1cac>
   13298:	b	132d0 <__assert_fail@plt+0x1cc8>
   1329c:	mvn	r2, #-2147483648	; 0x80000000
   132a0:	sdiv	r2, r2, r0
   132a4:	cmp	r1, r2
   132a8:	bge	132b4 <__assert_fail@plt+0x1cac>
   132ac:	b	132d0 <__assert_fail@plt+0x1cc8>
   132b0:	mvn	r1, #0
   132b4:	mul	r4, r1, r0
   132b8:	adds	r5, r4, #1
   132bc:	movwvc	r0, #4660	; 0x1234
   132c0:	movtvc	r0, #3
   132c4:	ldrvc	r0, [r0]
   132c8:	addsvc	r6, r0, #1
   132cc:	bvc	132d4 <__assert_fail@plt+0x1ccc>
   132d0:	bl	144dc <__assert_fail@plt+0x2ed4>
   132d4:	cmn	r6, #1
   132d8:	ble	13300 <__assert_fail@plt+0x1cf8>
   132dc:	cmp	r6, #0
   132e0:	beq	1334c <__assert_fail@plt+0x1d44>
   132e4:	cmn	r4, #1
   132e8:	ble	13324 <__assert_fail@plt+0x1d1c>
   132ec:	mvn	r0, #-2147483648	; 0x80000000
   132f0:	udiv	r0, r0, r6
   132f4:	cmp	r0, r4
   132f8:	bge	1334c <__assert_fail@plt+0x1d44>
   132fc:	b	132d0 <__assert_fail@plt+0x1cc8>
   13300:	cmn	r4, #1
   13304:	ble	1333c <__assert_fail@plt+0x1d34>
   13308:	cmn	r6, #1
   1330c:	beq	1334c <__assert_fail@plt+0x1d44>
   13310:	mov	r0, #-2147483648	; 0x80000000
   13314:	sdiv	r0, r0, r6
   13318:	cmp	r0, r4
   1331c:	bge	1334c <__assert_fail@plt+0x1d44>
   13320:	b	132d0 <__assert_fail@plt+0x1cc8>
   13324:	beq	1334c <__assert_fail@plt+0x1d44>
   13328:	mov	r0, #-2147483648	; 0x80000000
   1332c:	sdiv	r0, r0, r4
   13330:	cmp	r0, r6
   13334:	bge	1334c <__assert_fail@plt+0x1d44>
   13338:	b	132d0 <__assert_fail@plt+0x1cc8>
   1333c:	mvn	r0, #-2147483648	; 0x80000000
   13340:	sdiv	r0, r0, r6
   13344:	cmp	r4, r0
   13348:	blt	132d0 <__assert_fail@plt+0x1cc8>
   1334c:	movw	r7, #4708	; 0x1264
   13350:	movt	r7, #3
   13354:	ldr	r0, [r7]
   13358:	bl	1622c <__assert_fail@plt+0x4c24>
   1335c:	mov	r0, r5
   13360:	mov	r1, #4
   13364:	bl	1ad54 <__assert_fail@plt+0x974c>
   13368:	movw	r5, #4712	; 0x1268
   1336c:	str	r0, [r7]
   13370:	movt	r5, #3
   13374:	ldr	r0, [r5]
   13378:	bl	1622c <__assert_fail@plt+0x4c24>
   1337c:	mov	r0, r4
   13380:	mov	r1, #4
   13384:	bl	1ad54 <__assert_fail@plt+0x974c>
   13388:	str	r0, [r5]
   1338c:	movw	r5, #4716	; 0x126c
   13390:	movt	r5, #3
   13394:	ldr	r0, [r5]
   13398:	bl	1622c <__assert_fail@plt+0x4c24>
   1339c:	mul	r4, r6, r4
   133a0:	movw	r6, #4617	; 0x1209
   133a4:	mov	r1, #1
   133a8:	mov	r7, #1
   133ac:	movt	r6, #3
   133b0:	ldrb	r0, [r6]
   133b4:	cmp	r0, #0
   133b8:	mov	r0, r4
   133bc:	movwne	r1, #2
   133c0:	bl	1ad54 <__assert_fail@plt+0x974c>
   133c4:	str	r0, [r5]
   133c8:	ldrb	r0, [r6]
   133cc:	movw	r1, #4720	; 0x1270
   133d0:	movt	r1, #3
   133d4:	cmp	r0, #0
   133d8:	movwne	r7, #2
   133dc:	mul	r0, r7, r4
   133e0:	str	r0, [r1]
   133e4:	movw	r0, #4576	; 0x11e0
   133e8:	mov	r9, #0
   133ec:	movt	r0, #3
   133f0:	ldm	r0, {r1, r2}
   133f4:	mov	r0, #1
   133f8:	str	r1, [sp, #36]	; 0x24
   133fc:	subs	r1, r1, #2
   13400:	str	r2, [fp, #-32]	; 0xffffffe0
   13404:	sbcs	r1, r2, #0
   13408:	mov	r1, #0
   1340c:	bcc	136b4 <__assert_fail@plt+0x20ac>
   13410:	movw	r0, #4456	; 0x1168
   13414:	mov	r9, #1
   13418:	mov	r8, #0
   1341c:	movt	r0, #3
   13420:	ldr	r7, [r0]
   13424:	movw	r0, #4652	; 0x122c
   13428:	movt	r0, #3
   1342c:	ldr	r1, [r0]
   13430:	cmp	r1, #2
   13434:	blt	134a4 <__assert_fail@plt+0x1e9c>
   13438:	mov	r6, #1
   1343c:	cmp	r7, #1
   13440:	blt	13498 <__assert_fail@plt+0x1e90>
   13444:	movw	r0, #4676	; 0x1244
   13448:	mov	r5, #1
   1344c:	movt	r0, #3
   13450:	ldr	r4, [r0]
   13454:	ldr	r0, [r4, #8]
   13458:	cmp	r0, #0
   1345c:	bne	13478 <__assert_fail@plt+0x1e70>
   13460:	mov	r0, r4
   13464:	mov	r1, r5
   13468:	bl	147ec <__assert_fail@plt+0x31e4>
   1346c:	movw	r0, #4456	; 0x1168
   13470:	movt	r0, #3
   13474:	ldr	r7, [r0]
   13478:	add	r0, r5, #1
   1347c:	cmp	r5, r7
   13480:	add	r4, r4, #40	; 0x28
   13484:	mov	r5, r0
   13488:	blt	13454 <__assert_fail@plt+0x1e4c>
   1348c:	movw	r0, #4652	; 0x122c
   13490:	movt	r0, #3
   13494:	ldr	r1, [r0]
   13498:	add	r6, r6, #1
   1349c:	cmp	r6, r1
   134a0:	blt	1343c <__assert_fail@plt+0x1e34>
   134a4:	movw	r0, #4724	; 0x1274
   134a8:	mov	r1, #1
   134ac:	cmp	r7, #0
   134b0:	movt	r0, #3
   134b4:	strb	r1, [r0]
   134b8:	movw	r0, #4676	; 0x1244
   134bc:	movt	r0, #3
   134c0:	ble	13560 <__assert_fail@plt+0x1f58>
   134c4:	ldr	r4, [r0]
   134c8:	mov	r5, #1
   134cc:	ldr	r0, [r4, #8]
   134d0:	cmp	r0, #0
   134d4:	bne	134f0 <__assert_fail@plt+0x1ee8>
   134d8:	mov	r0, r4
   134dc:	mov	r1, r5
   134e0:	bl	147ec <__assert_fail@plt+0x31e4>
   134e4:	movw	r0, #4456	; 0x1168
   134e8:	movt	r0, #3
   134ec:	ldr	r7, [r0]
   134f0:	add	r0, r5, #1
   134f4:	cmp	r5, r7
   134f8:	add	r4, r4, #40	; 0x28
   134fc:	mov	r5, r0
   13500:	blt	134cc <__assert_fail@plt+0x1ec4>
   13504:	movw	r0, #4676	; 0x1244
   13508:	cmp	r7, #1
   1350c:	mov	r6, #2
   13510:	movt	r0, #3
   13514:	ldr	r1, [r0]
   13518:	movw	r0, #4585	; 0x11e9
   1351c:	movt	r0, #3
   13520:	ldrb	r2, [r0]
   13524:	blt	13554 <__assert_fail@plt+0x1f4c>
   13528:	cmp	r2, #0
   1352c:	bne	13554 <__assert_fail@plt+0x1f4c>
   13530:	mov	r0, #8
   13534:	mov	r2, r7
   13538:	ldr	r3, [r1, r0]
   1353c:	cmp	r3, #3
   13540:	strne	r6, [r1, r0]
   13544:	add	r0, r0, #40	; 0x28
   13548:	subs	r2, r2, #1
   1354c:	bne	13538 <__assert_fail@plt+0x1f30>
   13550:	mov	r2, #0
   13554:	cmp	r7, #0
   13558:	bne	13578 <__assert_fail@plt+0x1f70>
   1355c:	b	135b8 <__assert_fail@plt+0x1fb0>
   13560:	ldr	r1, [r0]
   13564:	movw	r0, #4585	; 0x11e9
   13568:	movt	r0, #3
   1356c:	ldrb	r2, [r0]
   13570:	cmp	r7, #0
   13574:	beq	135b8 <__assert_fail@plt+0x1fb0>
   13578:	add	r3, r1, #8
   1357c:	mov	r0, r7
   13580:	ldr	r6, [r3]
   13584:	cmp	r6, #2
   13588:	bne	135ac <__assert_fail@plt+0x1fa4>
   1358c:	mov	r6, #0
   13590:	str	r6, [r3]
   13594:	movw	r6, #4680	; 0x1248
   13598:	movt	r6, #3
   1359c:	mov	r5, r6
   135a0:	ldr	r6, [r6]
   135a4:	add	r6, r6, #1
   135a8:	str	r6, [r5]
   135ac:	add	r3, r3, #40	; 0x28
   135b0:	subs	r0, r0, #1
   135b4:	bne	13580 <__assert_fail@plt+0x1f78>
   135b8:	cmp	r2, #0
   135bc:	beq	135e8 <__assert_fail@plt+0x1fe0>
   135c0:	movw	r1, #4724	; 0x1274
   135c4:	mov	r0, #0
   135c8:	movt	r1, #3
   135cc:	strb	r0, [r1]
   135d0:	movw	r0, #4680	; 0x1248
   135d4:	movt	r0, #3
   135d8:	ldr	r0, [r0]
   135dc:	cmp	r0, #1
   135e0:	bge	13614 <__assert_fail@plt+0x200c>
   135e4:	b	13650 <__assert_fail@plt+0x2048>
   135e8:	ldr	r0, [r1, #8]
   135ec:	cmp	r0, #3
   135f0:	beq	13634 <__assert_fail@plt+0x202c>
   135f4:	movw	r1, #4724	; 0x1274
   135f8:	mov	r0, #0
   135fc:	movt	r1, #3
   13600:	strb	r0, [r1]
   13604:	movw	r0, #4680	; 0x1248
   13608:	mov	r1, #1
   1360c:	movt	r0, #3
   13610:	str	r1, [r0]
   13614:	ldr	r0, [sp, #36]	; 0x24
   13618:	adds	r9, r9, #1
   1361c:	adc	r8, r8, #0
   13620:	subs	r0, r9, r0
   13624:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13628:	sbcs	r0, r8, r0
   1362c:	bcc	13424 <__assert_fail@plt+0x1e1c>
   13630:	b	1369c <__assert_fail@plt+0x2094>
   13634:	movw	r1, #4724	; 0x1274
   13638:	mov	r0, #0
   1363c:	movt	r1, #3
   13640:	strb	r0, [r1]
   13644:	movw	r1, #4680	; 0x1248
   13648:	movt	r1, #3
   1364c:	str	r0, [r1]
   13650:	movw	r1, #65119	; 0xfe5f
   13654:	mov	r0, #0
   13658:	mov	r2, #5
   1365c:	movt	r1, #1
   13660:	bl	1138c <dcgettext@plt>
   13664:	mov	r2, r0
   13668:	ldr	r0, [sp, #36]	; 0x24
   1366c:	mov	r1, #0
   13670:	str	r0, [sp]
   13674:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13678:	stmib	sp, {r0, r9}
   1367c:	mov	r0, #0
   13680:	str	r8, [sp, #12]
   13684:	bl	11428 <error@plt>
   13688:	movw	r0, #4680	; 0x1248
   1368c:	movt	r0, #3
   13690:	ldr	r0, [r0]
   13694:	cmp	r0, #1
   13698:	blt	144b0 <__assert_fail@plt+0x2ea8>
   1369c:	movw	r0, #4576	; 0x11e0
   136a0:	movw	r8, #4585	; 0x11e9
   136a4:	mov	r9, #0
   136a8:	movt	r0, #3
   136ac:	movt	r8, #3
   136b0:	ldrd	r0, [r0]
   136b4:	movw	r2, #4640	; 0x1220
   136b8:	movt	r2, #3
   136bc:	strd	r0, [r2]
   136c0:	movw	r0, #4627	; 0x1213
   136c4:	movt	r0, #3
   136c8:	ldrb	sl, [r0]
   136cc:	movw	r0, #4612	; 0x1204
   136d0:	movt	r0, #3
   136d4:	ldr	r0, [r0]
   136d8:	cmp	sl, #1
   136dc:	bne	1373c <__assert_fail@plt+0x2134>
   136e0:	movw	r1, #4606	; 0x11fe
   136e4:	movt	r1, #3
   136e8:	ldrb	r1, [r1]
   136ec:	cmp	r1, #1
   136f0:	bne	1372c <__assert_fail@plt+0x2124>
   136f4:	movw	r1, #4607	; 0x11ff
   136f8:	movt	r1, #3
   136fc:	ldrb	r1, [r1]
   13700:	cmp	r1, #1
   13704:	bne	1372c <__assert_fail@plt+0x2124>
   13708:	movw	r1, #4660	; 0x1234
   1370c:	movw	r2, #4656	; 0x1230
   13710:	movt	r1, #3
   13714:	movt	r2, #3
   13718:	ldr	r1, [r1]
   1371c:	ldr	r2, [r2]
   13720:	add	r1, r1, r0
   13724:	add	r9, r1, r2
   13728:	b	1373c <__assert_fail@plt+0x2134>
   1372c:	movw	r1, #4660	; 0x1234
   13730:	movt	r1, #3
   13734:	ldr	r1, [r1]
   13738:	add	r9, r1, r0
   1373c:	movw	r1, #4620	; 0x120c
   13740:	ldrb	r5, [r8]
   13744:	movt	r1, #3
   13748:	ldr	r1, [r1]
   1374c:	add	r2, r1, r0
   13750:	movw	r0, #4456	; 0x1168
   13754:	str	r1, [fp, #-32]	; 0xffffffe0
   13758:	movt	r0, #3
   1375c:	ldr	ip, [r0]
   13760:	movw	r0, #4676	; 0x1244
   13764:	movt	r0, #3
   13768:	ldr	r4, [r0]
   1376c:	mov	r0, #1
   13770:	cmp	ip, #2
   13774:	blt	13888 <__assert_fail@plt+0x2280>
   13778:	movw	r0, #20248	; 0x4f18
   1377c:	movw	r1, #19456	; 0x4c00
   13780:	cmp	r5, #0
   13784:	movw	r7, #19364	; 0x4ba4
   13788:	str	r5, [sp, #20]
   1378c:	add	r5, r4, #32
   13790:	str	sl, [sp, #24]
   13794:	movt	r0, #1
   13798:	movt	r1, #1
   1379c:	movt	r7, #1
   137a0:	movne	r1, r0
   137a4:	rsb	r0, ip, #1
   137a8:	str	r1, [sp, #36]	; 0x24
   137ac:	movw	r1, #20056	; 0x4e58
   137b0:	str	r0, [sp, #32]
   137b4:	movt	r1, #1
   137b8:	movne	r7, r1
   137bc:	sub	r1, ip, #1
   137c0:	str	r1, [sp, #16]
   137c4:	movw	r1, #4660	; 0x1234
   137c8:	movt	r1, #3
   137cc:	ldr	r3, [r1]
   137d0:	movw	r1, #4607	; 0x11ff
   137d4:	movt	r1, #3
   137d8:	ldrb	r0, [r1]
   137dc:	movw	r1, #4606	; 0x11fe
   137e0:	movt	r1, #3
   137e4:	ldrb	r1, [r1]
   137e8:	eor	r1, r1, #1
   137ec:	str	r1, [sp, #28]
   137f0:	mov	r1, #0
   137f4:	ldr	r6, [sp, #36]	; 0x24
   137f8:	cmp	r0, #0
   137fc:	mov	lr, #0
   13800:	str	r6, [r5, #-20]	; 0xffffffec
   13804:	str	r7, [r5, #-16]
   13808:	beq	1382c <__assert_fail@plt+0x2224>
   1380c:	mov	sl, r0
   13810:	ldr	r0, [sp, #28]
   13814:	clz	r6, r1
   13818:	mov	r8, r9
   1381c:	lsr	r6, r6, #5
   13820:	orr	lr, r6, r0
   13824:	mov	r0, sl
   13828:	ldr	sl, [sp, #24]
   1382c:	str	r2, [r5]
   13830:	and	r2, lr, #1
   13834:	cmp	sl, #0
   13838:	sub	r1, r1, #1
   1383c:	strb	r2, [r5, #4]
   13840:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13844:	add	r5, r5, #40	; 0x28
   13848:	add	r6, r9, r2
   1384c:	mov	r2, sl
   13850:	mov	r9, sl
   13854:	movne	r2, r6
   13858:	addne	r9, r6, r3
   1385c:	ldr	r6, [sp, #32]
   13860:	cmp	r6, r1
   13864:	bne	137f4 <__assert_fail@plt+0x21ec>
   13868:	ldr	r0, [sp, #16]
   1386c:	ldr	r5, [sp, #20]
   13870:	add	r0, r0, r0, lsl #2
   13874:	add	r3, r4, r0, lsl #3
   13878:	mov	r0, ip
   1387c:	cmp	r5, #0
   13880:	beq	13894 <__assert_fail@plt+0x228c>
   13884:	b	138bc <__assert_fail@plt+0x22b4>
   13888:	mov	r3, r4
   1388c:	cmp	r5, #0
   13890:	bne	138bc <__assert_fail@plt+0x22b4>
   13894:	movw	r1, #4586	; 0x11ea
   13898:	movt	r1, #3
   1389c:	ldrb	r1, [r1]
   138a0:	cmp	r1, #0
   138a4:	beq	138bc <__assert_fail@plt+0x22b4>
   138a8:	movw	r1, #19456	; 0x4c00
   138ac:	movw	r7, #19364	; 0x4ba4
   138b0:	movt	r1, #1
   138b4:	movt	r7, #1
   138b8:	b	138cc <__assert_fail@plt+0x22c4>
   138bc:	movw	r1, #20248	; 0x4f18
   138c0:	movw	r7, #20056	; 0x4e58
   138c4:	movt	r1, #1
   138c8:	movt	r7, #1
   138cc:	str	r1, [r3, #12]
   138d0:	movw	r1, #4607	; 0x11ff
   138d4:	str	r7, [r3, #16]
   138d8:	mov	r6, #0
   138dc:	movt	r1, #3
   138e0:	ldrb	r1, [r1]
   138e4:	cmp	r1, #1
   138e8:	mov	r1, #0
   138ec:	bne	13914 <__assert_fail@plt+0x230c>
   138f0:	movw	r1, #4606	; 0x11fe
   138f4:	sub	r0, r0, #1
   138f8:	movt	r1, #3
   138fc:	clz	r0, r0
   13900:	ldrb	r1, [r1]
   13904:	lsr	r0, r0, #5
   13908:	mvn	r1, r1
   1390c:	orr	r0, r0, r1
   13910:	and	r1, r0, #1
   13914:	movw	r0, #4460	; 0x116c
   13918:	str	r2, [r3, #32]
   1391c:	strb	r1, [r3, #36]	; 0x24
   13920:	movw	r1, #4648	; 0x1228
   13924:	movw	r7, #4680	; 0x1248
   13928:	movt	r0, #3
   1392c:	movt	r7, #3
   13930:	movt	r1, #3
   13934:	ldr	r0, [r0]
   13938:	str	r0, [r1]
   1393c:	b	13950 <__assert_fail@plt+0x2348>
   13940:	ldr	r0, [r4, #8]
   13944:	subs	r0, r0, #3
   13948:	movwne	r0, #1
   1394c:	str	r0, [r7]
   13950:	tst	r5, #1
   13954:	beq	139a0 <__assert_fail@plt+0x2398>
   13958:	cmp	ip, #0
   1395c:	beq	144b0 <__assert_fail@plt+0x2ea8>
   13960:	movw	r1, #4652	; 0x122c
   13964:	add	r0, r4, #28
   13968:	mov	r2, ip
   1396c:	movt	r1, #3
   13970:	ldr	r1, [r1]
   13974:	ldr	r3, [r0, #-20]	; 0xffffffec
   13978:	cmp	r3, #0
   1397c:	mov	r3, #0
   13980:	moveq	r3, r1
   13984:	subs	r2, r2, #1
   13988:	str	r3, [r0]
   1398c:	add	r0, r0, #40	; 0x28
   13990:	bne	13974 <__assert_fail@plt+0x236c>
   13994:	cmp	ip, #0
   13998:	bne	13c28 <__assert_fail@plt+0x2620>
   1399c:	b	144b0 <__assert_fail@plt+0x2ea8>
   139a0:	movw	r0, #4728	; 0x1278
   139a4:	movt	r0, #3
   139a8:	str	r6, [r0]
   139ac:	movw	r0, #4586	; 0x11ea
   139b0:	movt	r0, #3
   139b4:	ldrb	r0, [r0]
   139b8:	eor	r1, r0, #1
   139bc:	sub	r5, ip, r1
   139c0:	cmp	r5, #1
   139c4:	blt	13b28 <__assert_fail@plt+0x2520>
   139c8:	add	r1, r4, #24
   139cc:	mov	r2, r5
   139d0:	mov	r3, #0
   139d4:	str	r3, [r1], #40	; 0x28
   139d8:	subs	r2, r2, #1
   139dc:	bne	139d4 <__assert_fail@plt+0x23cc>
   139e0:	cmp	r5, #1
   139e4:	blt	13b28 <__assert_fail@plt+0x2520>
   139e8:	ldr	r1, [r7]
   139ec:	cmp	r1, #0
   139f0:	beq	13b28 <__assert_fail@plt+0x2520>
   139f4:	mov	sl, #1
   139f8:	mov	r0, #0
   139fc:	mov	r6, #0
   13a00:	b	13ac4 <__assert_fail@plt+0x24bc>
   13a04:	rsb	r9, r2, #1
   13a08:	ldr	r2, [r4, #8]
   13a0c:	mov	r8, r0
   13a10:	b	13a54 <__assert_fail@plt+0x244c>
   13a14:	ldr	r1, [r4, #24]
   13a18:	movw	r3, #4752	; 0x1290
   13a1c:	movt	r3, #3
   13a20:	add	r1, r1, #1
   13a24:	str	r1, [r4, #24]
   13a28:	movw	r1, #4708	; 0x1264
   13a2c:	movt	r1, #3
   13a30:	ldr	r1, [r1]
   13a34:	str	r8, [r1, r6, lsl #2]
   13a38:	movw	r1, #4712	; 0x1268
   13a3c:	movt	r1, #3
   13a40:	ldr	r3, [r3]
   13a44:	ldr	r1, [r1]
   13a48:	str	r3, [r1, r6, lsl #2]
   13a4c:	add	r6, r6, #1
   13a50:	b	13aa4 <__assert_fail@plt+0x249c>
   13a54:	cmp	r2, #0
   13a58:	bne	13aa0 <__assert_fail@plt+0x2498>
   13a5c:	movw	r1, #4752	; 0x1290
   13a60:	mov	r0, #0
   13a64:	movt	r1, #3
   13a68:	str	r0, [r1]
   13a6c:	mov	r0, r4
   13a70:	bl	14f18 <__assert_fail@plt+0x3910>
   13a74:	cmp	r0, #0
   13a78:	moveq	r0, r4
   13a7c:	bleq	15df4 <__assert_fail@plt+0x47ec>
   13a80:	movw	r0, #4728	; 0x1278
   13a84:	ldr	r2, [r4, #8]
   13a88:	movt	r0, #3
   13a8c:	ldr	r0, [r0]
   13a90:	cmp	r2, #0
   13a94:	beq	13a14 <__assert_fail@plt+0x240c>
   13a98:	cmp	r8, r0
   13a9c:	bne	13a14 <__assert_fail@plt+0x240c>
   13aa0:	mov	r0, r8
   13aa4:	ldr	r1, [r7]
   13aa8:	cmp	r9, #0
   13aac:	beq	13ae0 <__assert_fail@plt+0x24d8>
   13ab0:	add	r9, r9, #1
   13ab4:	cmp	r1, #0
   13ab8:	mov	r8, r0
   13abc:	bne	13a54 <__assert_fail@plt+0x244c>
   13ac0:	b	13ae0 <__assert_fail@plt+0x24d8>
   13ac4:	cmp	r1, #0
   13ac8:	str	r6, [r4, #20]
   13acc:	movwne	r2, #4652	; 0x122c
   13ad0:	movtne	r2, #3
   13ad4:	ldrne	r2, [r2]
   13ad8:	cmpne	r2, #0
   13adc:	bne	13a04 <__assert_fail@plt+0x23fc>
   13ae0:	cmp	sl, r5
   13ae4:	mov	r2, r5
   13ae8:	bge	13afc <__assert_fail@plt+0x24f4>
   13aec:	add	r4, r4, #40	; 0x28
   13af0:	add	sl, sl, #1
   13af4:	cmp	r1, #0
   13af8:	bne	13ac4 <__assert_fail@plt+0x24bc>
   13afc:	movw	r1, #4586	; 0x11ea
   13b00:	movw	r2, #4708	; 0x1264
   13b04:	mov	lr, #0
   13b08:	movt	r1, #3
   13b0c:	movt	r2, #3
   13b10:	ldrb	r1, [r1]
   13b14:	ldr	r2, [r2]
   13b18:	cmp	r1, #0
   13b1c:	str	r0, [r2, r6, lsl #2]
   13b20:	bne	13b48 <__assert_fail@plt+0x2540>
   13b24:	b	13ba8 <__assert_fail@plt+0x25a0>
   13b28:	movw	r1, #4708	; 0x1264
   13b2c:	mov	r6, #0
   13b30:	cmp	r0, #0
   13b34:	mov	lr, #0
   13b38:	movt	r1, #3
   13b3c:	ldr	r1, [r1]
   13b40:	str	r6, [r1]
   13b44:	beq	13ba8 <__assert_fail@plt+0x25a0>
   13b48:	movw	r0, #4456	; 0x1168
   13b4c:	mov	lr, #1
   13b50:	movt	r0, #3
   13b54:	ldr	r1, [r0]
   13b58:	cmp	r1, #1
   13b5c:	blt	13ba8 <__assert_fail@plt+0x25a0>
   13b60:	movw	r2, #4676	; 0x1244
   13b64:	sdiv	r0, r6, r1
   13b68:	mov	r4, #0
   13b6c:	movt	r2, #3
   13b70:	mls	r3, r0, r1, r6
   13b74:	mov	r6, #0
   13b78:	ldr	r7, [r2]
   13b7c:	add	r7, r7, #20
   13b80:	add	r6, r6, #1
   13b84:	mov	r2, r0
   13b88:	str	r4, [r7]
   13b8c:	cmp	r6, r3
   13b90:	addle	r2, r2, #1
   13b94:	cmp	r1, r6
   13b98:	str	r2, [r7, #4]
   13b9c:	add	r4, r2, r4
   13ba0:	add	r7, r7, #40	; 0x28
   13ba4:	bne	13b80 <__assert_fail@plt+0x2578>
   13ba8:	movw	r0, #4676	; 0x1244
   13bac:	movt	r0, #3
   13bb0:	ldr	r4, [r0]
   13bb4:	movw	r0, #4456	; 0x1168
   13bb8:	movt	r0, #3
   13bbc:	ldr	ip, [r0]
   13bc0:	mov	r1, r4
   13bc4:	subs	r2, ip, #1
   13bc8:	beq	13bf0 <__assert_fail@plt+0x25e8>
   13bcc:	add	r1, r4, #28
   13bd0:	rsb	r3, ip, #1
   13bd4:	ldr	r0, [r1, #-4]
   13bd8:	adds	r3, r3, #1
   13bdc:	str	r0, [r1]
   13be0:	add	r1, r1, #40	; 0x28
   13be4:	bne	13bd4 <__assert_fail@plt+0x25cc>
   13be8:	add	r0, r2, r2, lsl #2
   13bec:	add	r1, r4, r0, lsl #3
   13bf0:	cmp	lr, #0
   13bf4:	beq	13c04 <__assert_fail@plt+0x25fc>
   13bf8:	add	r2, r1, #24
   13bfc:	ldr	r0, [r2]
   13c00:	b	13c1c <__assert_fail@plt+0x2614>
   13c04:	ldr	r2, [r1, #8]
   13c08:	mov	r0, #0
   13c0c:	cmp	r2, #0
   13c10:	movw	r2, #4652	; 0x122c
   13c14:	movt	r2, #3
   13c18:	ldreq	r0, [r2]
   13c1c:	str	r0, [r1, #28]
   13c20:	cmp	ip, #0
   13c24:	beq	144b0 <__assert_fail@plt+0x2ea8>
   13c28:	movw	r0, #4585	; 0x11e9
   13c2c:	add	r2, r4, #28
   13c30:	mov	r3, #0
   13c34:	movt	r0, #3
   13c38:	ldrb	r7, [r0]
   13c3c:	mov	r0, ip
   13c40:	ldr	r1, [r2, #-20]	; 0xffffffec
   13c44:	cmp	r1, #2
   13c48:	bcs	13c54 <__assert_fail@plt+0x264c>
   13c4c:	add	r3, r3, #1
   13c50:	b	13c70 <__assert_fail@plt+0x2668>
   13c54:	cmp	r7, #0
   13c58:	bne	13c70 <__assert_fail@plt+0x2668>
   13c5c:	ldr	r1, [r2, #-4]
   13c60:	cmp	r1, #1
   13c64:	ldrge	r1, [r2]
   13c68:	cmpge	r1, #1
   13c6c:	bge	13c4c <__assert_fail@plt+0x2644>
   13c70:	add	r2, r2, #40	; 0x28
   13c74:	subs	r0, r0, #1
   13c78:	bne	13c40 <__assert_fail@plt+0x2638>
   13c7c:	cmp	r3, #0
   13c80:	beq	144b0 <__assert_fail@plt+0x2ea8>
   13c84:	movw	r0, #4624	; 0x1210
   13c88:	movw	sl, #4588	; 0x11ec
   13c8c:	mov	r9, #0
   13c90:	movw	r8, #4585	; 0x11e9
   13c94:	movt	r0, #3
   13c98:	movt	sl, #3
   13c9c:	movt	r8, #3
   13ca0:	ldrb	r0, [r0]
   13ca4:	cmp	r0, #0
   13ca8:	movweq	r1, #4733	; 0x127d
   13cac:	moveq	r0, #1
   13cb0:	movteq	r1, #3
   13cb4:	strbeq	r0, [r1]
   13cb8:	movw	r0, #4732	; 0x127c
   13cbc:	movw	r1, #4652	; 0x122c
   13cc0:	movt	r1, #3
   13cc4:	movt	r0, #3
   13cc8:	strb	r9, [r0]
   13ccc:	ldrb	r0, [sl]
   13cd0:	ldr	r1, [r1]
   13cd4:	lsl	sl, r1, r0
   13cd8:	cmp	sl, #1
   13cdc:	blt	14280 <__assert_fail@plt+0x2c78>
   13ce0:	mov	r9, #0
   13ce4:	b	13cf8 <__assert_fail@plt+0x26f0>
   13ce8:	movw	r0, #4676	; 0x1244
   13cec:	ldrb	r7, [r8]
   13cf0:	movt	r0, #3
   13cf4:	ldr	r4, [r0]
   13cf8:	add	r2, r4, #28
   13cfc:	mov	r0, ip
   13d00:	mov	r3, #0
   13d04:	ldr	r1, [r2, #-20]	; 0xffffffec
   13d08:	cmp	r1, #2
   13d0c:	bcs	13d18 <__assert_fail@plt+0x2710>
   13d10:	add	r3, r3, #1
   13d14:	b	13d34 <__assert_fail@plt+0x272c>
   13d18:	tst	r7, #1
   13d1c:	bne	13d34 <__assert_fail@plt+0x272c>
   13d20:	ldr	r1, [r2, #-4]
   13d24:	cmp	r1, #1
   13d28:	ldrge	r1, [r2]
   13d2c:	cmpge	r1, #1
   13d30:	bge	13d10 <__assert_fail@plt+0x2708>
   13d34:	add	r2, r2, #40	; 0x28
   13d38:	subs	r0, r0, #1
   13d3c:	bne	13d04 <__assert_fail@plt+0x26fc>
   13d40:	mov	r5, #0
   13d44:	cmp	r3, #0
   13d48:	beq	14284 <__assert_fail@plt+0x2c7c>
   13d4c:	movw	r0, #4740	; 0x1284
   13d50:	movw	r7, #4617	; 0x1209
   13d54:	mov	r1, #1
   13d58:	cmp	ip, #1
   13d5c:	movt	r0, #3
   13d60:	movt	r7, #3
   13d64:	str	r5, [r0]
   13d68:	movw	r0, #4744	; 0x1288
   13d6c:	movt	r0, #3
   13d70:	str	r5, [r0]
   13d74:	movw	r0, #4748	; 0x128c
   13d78:	movt	r0, #3
   13d7c:	str	r5, [r0]
   13d80:	movw	r0, #4732	; 0x127c
   13d84:	movt	r0, #3
   13d88:	strb	r5, [r0]
   13d8c:	movw	r0, #4758	; 0x1296
   13d90:	movt	r0, #3
   13d94:	strb	r5, [r0]
   13d98:	movw	r0, #4759	; 0x1297
   13d9c:	movt	r0, #3
   13da0:	strb	r1, [r0]
   13da4:	blt	14178 <__assert_fail@plt+0x2b70>
   13da8:	mov	r6, #1
   13dac:	movw	r0, #4752	; 0x1290
   13db0:	movt	r0, #3
   13db4:	str	r5, [r0]
   13db8:	ldr	r0, [r4, #28]
   13dbc:	cmp	r0, #0
   13dc0:	bgt	13dd0 <__assert_fail@plt+0x27c8>
   13dc4:	ldr	r0, [r4, #8]
   13dc8:	cmp	r0, #1
   13dcc:	bne	13fac <__assert_fail@plt+0x29a4>
   13dd0:	movw	r0, #4756	; 0x1294
   13dd4:	movw	r1, #4736	; 0x1280
   13dd8:	movt	r0, #3
   13ddc:	movt	r1, #3
   13de0:	strb	r5, [r0]
   13de4:	ldr	r0, [r4, #32]
   13de8:	str	r0, [r1]
   13dec:	mov	r0, r4
   13df0:	ldr	r1, [r4, #12]
   13df4:	blx	r1
   13df8:	cmp	r0, #0
   13dfc:	moveq	r0, r4
   13e00:	bleq	15df4 <__assert_fail@plt+0x47ec>
   13e04:	movw	r0, #4732	; 0x127c
   13e08:	ldr	r1, [r4, #28]
   13e0c:	movt	r0, #3
   13e10:	ldrb	r0, [r0]
   13e14:	sub	r2, r1, #1
   13e18:	str	r2, [r4, #28]
   13e1c:	and	r2, r9, #1
   13e20:	orrs	r9, r0, r2
   13e24:	movwne	r9, #1
   13e28:	cmp	r1, #1
   13e2c:	bgt	13eb0 <__assert_fail@plt+0x28a8>
   13e30:	movw	r1, #4456	; 0x1168
   13e34:	movt	r1, #3
   13e38:	ldr	ip, [r1]
   13e3c:	cmp	ip, #0
   13e40:	beq	14258 <__assert_fail@plt+0x2c50>
   13e44:	movw	r1, #4676	; 0x1244
   13e48:	ldrb	r2, [r8]
   13e4c:	mov	r3, #0
   13e50:	movt	r1, #3
   13e54:	ldr	r1, [r1]
   13e58:	add	r7, r1, #28
   13e5c:	mov	r1, ip
   13e60:	ldr	r5, [r7, #-20]	; 0xffffffec
   13e64:	cmp	r5, #2
   13e68:	bcs	13e74 <__assert_fail@plt+0x286c>
   13e6c:	add	r3, r3, #1
   13e70:	b	13e90 <__assert_fail@plt+0x2888>
   13e74:	cmp	r2, #0
   13e78:	bne	13e90 <__assert_fail@plt+0x2888>
   13e7c:	ldr	r5, [r7, #-4]
   13e80:	cmp	r5, #1
   13e84:	ldrge	r5, [r7]
   13e88:	cmpge	r5, #1
   13e8c:	bge	13e6c <__assert_fail@plt+0x2864>
   13e90:	add	r7, r7, #40	; 0x28
   13e94:	subs	r1, r1, #1
   13e98:	bne	13e60 <__assert_fail@plt+0x2858>
   13e9c:	movw	r7, #4617	; 0x1209
   13ea0:	cmp	r3, #0
   13ea4:	mov	r5, #0
   13ea8:	movt	r7, #3
   13eac:	beq	14134 <__assert_fail@plt+0x2b2c>
   13eb0:	movw	r0, #4606	; 0x11fe
   13eb4:	movt	r0, #3
   13eb8:	ldrb	r0, [r0]
   13ebc:	cmp	r0, #1
   13ec0:	bne	140e4 <__assert_fail@plt+0x2adc>
   13ec4:	ldr	r0, [r4, #8]
   13ec8:	cmp	r0, #0
   13ecc:	beq	140e4 <__assert_fail@plt+0x2adc>
   13ed0:	movw	r1, #4759	; 0x1297
   13ed4:	movt	r1, #3
   13ed8:	ldrb	r1, [r1]
   13edc:	cmp	r1, #1
   13ee0:	beq	13fd4 <__assert_fail@plt+0x29cc>
   13ee4:	cmp	r0, #3
   13ee8:	beq	13f08 <__assert_fail@plt+0x2900>
   13eec:	cmp	r0, #2
   13ef0:	bne	140e4 <__assert_fail@plt+0x2adc>
   13ef4:	movw	r0, #4756	; 0x1294
   13ef8:	movt	r0, #3
   13efc:	ldrb	r0, [r0]
   13f00:	cmp	r0, #1
   13f04:	bne	140e4 <__assert_fail@plt+0x2adc>
   13f08:	ldr	r0, [r4, #32]
   13f0c:	movw	r1, #4736	; 0x1280
   13f10:	movt	r1, #3
   13f14:	str	r0, [r1]
   13f18:	movw	r1, #4620	; 0x120c
   13f1c:	movt	r1, #3
   13f20:	ldr	r1, [r1]
   13f24:	cmp	r0, r1
   13f28:	ble	140c8 <__assert_fail@plt+0x2ac0>
   13f2c:	movw	r3, #4604	; 0x11fc
   13f30:	movw	r2, #4744	; 0x1288
   13f34:	sub	r8, r0, r1
   13f38:	movt	r3, #3
   13f3c:	movt	r2, #3
   13f40:	ldrb	r3, [r3]
   13f44:	ldr	r2, [r2]
   13f48:	cmp	r3, #0
   13f4c:	bne	14030 <__assert_fail@plt+0x2a28>
   13f50:	movw	r5, #4564	; 0x11d4
   13f54:	cmp	r8, r2
   13f58:	movt	r5, #3
   13f5c:	ble	1409c <__assert_fail@plt+0x2a94>
   13f60:	sub	r0, r0, r2
   13f64:	sub	r7, r0, r1
   13f68:	ldr	r0, [r5]
   13f6c:	ldr	r1, [r0, #20]
   13f70:	ldr	r2, [r0, #24]
   13f74:	cmp	r1, r2
   13f78:	bcs	13f98 <__assert_fail@plt+0x2990>
   13f7c:	add	r2, r1, #1
   13f80:	str	r2, [r0, #20]
   13f84:	mov	r0, #32
   13f88:	strb	r0, [r1]
   13f8c:	subs	r7, r7, #1
   13f90:	bne	13f68 <__assert_fail@plt+0x2960>
   13f94:	b	1409c <__assert_fail@plt+0x2a94>
   13f98:	mov	r1, #32
   13f9c:	bl	1156c <__overflow@plt>
   13fa0:	subs	r7, r7, #1
   13fa4:	bne	13f68 <__assert_fail@plt+0x2960>
   13fa8:	b	1409c <__assert_fail@plt+0x2a94>
   13fac:	movw	r0, #4606	; 0x11fe
   13fb0:	movt	r0, #3
   13fb4:	ldrb	r0, [r0]
   13fb8:	cmp	r0, #1
   13fbc:	bne	140e4 <__assert_fail@plt+0x2adc>
   13fc0:	movw	r0, #4759	; 0x1297
   13fc4:	movt	r0, #3
   13fc8:	ldrb	r0, [r0]
   13fcc:	cmp	r0, #1
   13fd0:	bne	13fe8 <__assert_fail@plt+0x29e0>
   13fd4:	movw	r0, #4758	; 0x1296
   13fd8:	mov	r1, #1
   13fdc:	movt	r0, #3
   13fe0:	strb	r1, [r0]
   13fe4:	b	140e4 <__assert_fail@plt+0x2adc>
   13fe8:	ldr	r0, [r4, #32]
   13fec:	movw	r1, #4736	; 0x1280
   13ff0:	movt	r1, #3
   13ff4:	str	r0, [r1]
   13ff8:	movw	r1, #4620	; 0x120c
   13ffc:	movt	r1, #3
   14000:	ldr	r1, [r1]
   14004:	cmp	r0, r1
   14008:	ble	140c8 <__assert_fail@plt+0x2ac0>
   1400c:	movw	r3, #4604	; 0x11fc
   14010:	movw	r2, #4744	; 0x1288
   14014:	sub	r8, r0, r1
   14018:	movt	r3, #3
   1401c:	movt	r2, #3
   14020:	ldrb	r3, [r3]
   14024:	ldr	r2, [r2]
   14028:	cmp	r3, #0
   1402c:	beq	14044 <__assert_fail@plt+0x2a3c>
   14030:	movw	r1, #4740	; 0x1284
   14034:	sub	r0, r8, r2
   14038:	movt	r1, #3
   1403c:	str	r0, [r1]
   14040:	b	140b4 <__assert_fail@plt+0x2aac>
   14044:	movw	r5, #4564	; 0x11d4
   14048:	cmp	r8, r2
   1404c:	movt	r5, #3
   14050:	ble	1409c <__assert_fail@plt+0x2a94>
   14054:	sub	r0, r0, r2
   14058:	sub	r7, r0, r1
   1405c:	ldr	r0, [r5]
   14060:	ldr	r1, [r0, #20]
   14064:	ldr	r2, [r0, #24]
   14068:	cmp	r1, r2
   1406c:	bcs	1408c <__assert_fail@plt+0x2a84>
   14070:	add	r2, r1, #1
   14074:	str	r2, [r0, #20]
   14078:	mov	r0, #32
   1407c:	strb	r0, [r1]
   14080:	subs	r7, r7, #1
   14084:	bne	1405c <__assert_fail@plt+0x2a54>
   14088:	b	1409c <__assert_fail@plt+0x2a94>
   1408c:	mov	r1, #32
   14090:	bl	1156c <__overflow@plt>
   14094:	subs	r7, r7, #1
   14098:	bne	1405c <__assert_fail@plt+0x2a54>
   1409c:	movw	r0, #4744	; 0x1288
   140a0:	movw	r7, #4617	; 0x1209
   140a4:	mov	r5, #0
   140a8:	movt	r0, #3
   140ac:	movt	r7, #3
   140b0:	str	r8, [r0]
   140b4:	movw	r0, #4736	; 0x1280
   140b8:	movw	r8, #4585	; 0x11e9
   140bc:	movt	r0, #3
   140c0:	movt	r8, #3
   140c4:	str	r5, [r0]
   140c8:	ldrb	r0, [r7]
   140cc:	cmp	r0, #1
   140d0:	bleq	15848 <__assert_fail@plt+0x4240>
   140d4:	ldrb	r0, [r4, #36]	; 0x24
   140d8:	cmp	r0, #0
   140dc:	movne	r0, r4
   140e0:	blne	15c60 <__assert_fail@plt+0x4658>
   140e4:	ldrb	r0, [r7]
   140e8:	cmp	r0, #1
   140ec:	bne	14108 <__assert_fail@plt+0x2b00>
   140f0:	movw	r0, #4748	; 0x128c
   140f4:	movt	r0, #3
   140f8:	mov	r1, r0
   140fc:	ldr	r0, [r0]
   14100:	add	r0, r0, #1
   14104:	str	r0, [r1]
   14108:	movw	r1, #4456	; 0x1168
   1410c:	add	r0, r6, #1
   14110:	add	r4, r4, #40	; 0x28
   14114:	movt	r1, #3
   14118:	ldr	ip, [r1]
   1411c:	cmp	r6, ip
   14120:	mov	r6, r0
   14124:	blt	13dac <__assert_fail@plt+0x27a4>
   14128:	movw	r0, #4732	; 0x127c
   1412c:	movt	r0, #3
   14130:	ldrb	r0, [r0]
   14134:	cmp	r0, #0
   14138:	beq	14178 <__assert_fail@plt+0x2b70>
   1413c:	movw	r0, #4564	; 0x11d4
   14140:	movt	r0, #3
   14144:	ldr	r0, [r0]
   14148:	ldr	r1, [r0, #20]
   1414c:	ldr	r2, [r0, #24]
   14150:	cmp	r1, r2
   14154:	bcs	14274 <__assert_fail@plt+0x2c6c>
   14158:	add	r2, r1, #1
   1415c:	str	r2, [r0, #20]
   14160:	mov	r0, #10
   14164:	strb	r0, [r1]
   14168:	movw	r0, #4456	; 0x1168
   1416c:	sub	sl, sl, #1
   14170:	movt	r0, #3
   14174:	ldr	ip, [r0]
   14178:	cmp	ip, #0
   1417c:	beq	141dc <__assert_fail@plt+0x2bd4>
   14180:	movw	r1, #4676	; 0x1244
   14184:	ldrb	r0, [r8]
   14188:	mov	r2, #0
   1418c:	movt	r1, #3
   14190:	ldr	r1, [r1]
   14194:	add	r3, r1, #28
   14198:	ldr	r1, [r3, #-20]	; 0xffffffec
   1419c:	cmp	r1, #2
   141a0:	bcs	141ac <__assert_fail@plt+0x2ba4>
   141a4:	add	r2, r2, #1
   141a8:	b	141c8 <__assert_fail@plt+0x2bc0>
   141ac:	cmp	r0, #0
   141b0:	bne	141c8 <__assert_fail@plt+0x2bc0>
   141b4:	ldr	r1, [r3, #-4]
   141b8:	cmp	r1, #1
   141bc:	ldrge	r1, [r3]
   141c0:	cmpge	r1, #1
   141c4:	bge	141a4 <__assert_fail@plt+0x2b9c>
   141c8:	add	r3, r3, #40	; 0x28
   141cc:	subs	ip, ip, #1
   141d0:	bne	14198 <__assert_fail@plt+0x2b90>
   141d4:	cmp	r2, #0
   141d8:	bne	141f0 <__assert_fail@plt+0x2be8>
   141dc:	movw	r0, #4624	; 0x1210
   141e0:	movt	r0, #3
   141e4:	ldrb	r0, [r0]
   141e8:	cmp	r0, #0
   141ec:	bne	14284 <__assert_fail@plt+0x2c7c>
   141f0:	movw	r0, #4588	; 0x11ec
   141f4:	movt	r0, #3
   141f8:	ldrb	r0, [r0]
   141fc:	and	r0, r9, r0
   14200:	tst	r0, #1
   14204:	beq	14238 <__assert_fail@plt+0x2c30>
   14208:	movw	r0, #4564	; 0x11d4
   1420c:	movt	r0, #3
   14210:	ldr	r0, [r0]
   14214:	ldr	r1, [r0, #20]
   14218:	ldr	r2, [r0, #24]
   1421c:	cmp	r1, r2
   14220:	bcs	14268 <__assert_fail@plt+0x2c60>
   14224:	add	r2, r1, #1
   14228:	str	r2, [r0, #20]
   1422c:	mov	r0, #10
   14230:	strb	r0, [r1]
   14234:	sub	sl, sl, #1
   14238:	cmp	sl, #1
   1423c:	blt	14284 <__assert_fail@plt+0x2c7c>
   14240:	movw	r0, #4456	; 0x1168
   14244:	movt	r0, #3
   14248:	ldr	ip, [r0]
   1424c:	cmp	ip, #0
   14250:	bne	13ce8 <__assert_fail@plt+0x26e0>
   14254:	b	142cc <__assert_fail@plt+0x2cc4>
   14258:	mov	ip, #0
   1425c:	cmp	r0, #0
   14260:	bne	1413c <__assert_fail@plt+0x2b34>
   14264:	b	14178 <__assert_fail@plt+0x2b70>
   14268:	mov	r1, #10
   1426c:	bl	1156c <__overflow@plt>
   14270:	b	14234 <__assert_fail@plt+0x2c2c>
   14274:	mov	r1, #10
   14278:	bl	1156c <__overflow@plt>
   1427c:	b	14168 <__assert_fail@plt+0x2b60>
   14280:	mov	r5, #0
   14284:	cmp	sl, #0
   14288:	bne	142cc <__assert_fail@plt+0x2cc4>
   1428c:	movw	r0, #4456	; 0x1168
   14290:	movt	r0, #3
   14294:	ldr	r0, [r0]
   14298:	cmp	r0, #1
   1429c:	blt	142cc <__assert_fail@plt+0x2cc4>
   142a0:	movw	r1, #4676	; 0x1244
   142a4:	movt	r1, #3
   142a8:	ldr	r1, [r1]
   142ac:	add	r1, r1, #37	; 0x25
   142b0:	ldr	r2, [r1, #-29]	; 0xffffffe3
   142b4:	cmp	r2, #0
   142b8:	moveq	r2, #1
   142bc:	strbeq	r2, [r1]
   142c0:	subs	r0, r0, #1
   142c4:	add	r1, r1, #40	; 0x28
   142c8:	bne	142b0 <__assert_fail@plt+0x2ca8>
   142cc:	movw	r1, #4732	; 0x127c
   142d0:	ands	r0, r9, #1
   142d4:	movt	r1, #3
   142d8:	strb	r0, [r1]
   142dc:	beq	142f4 <__assert_fail@plt+0x2cec>
   142e0:	movw	r0, #4624	; 0x1210
   142e4:	movt	r0, #3
   142e8:	ldrb	r0, [r0]
   142ec:	cmp	r0, #0
   142f0:	beq	14358 <__assert_fail@plt+0x2d50>
   142f4:	movw	r0, #4625	; 0x1211
   142f8:	movt	r0, #3
   142fc:	ldrb	r0, [r0]
   14300:	cmp	r0, #1
   14304:	bne	1440c <__assert_fail@plt+0x2e04>
   14308:	movw	r0, #4757	; 0x1295
   1430c:	movt	r0, #3
   14310:	ldrb	r0, [r0]
   14314:	cmp	r0, #1
   14318:	bne	1440c <__assert_fail@plt+0x2e04>
   1431c:	movw	r0, #4564	; 0x11d4
   14320:	movt	r0, #3
   14324:	ldr	r0, [r0]
   14328:	ldr	r1, [r0, #20]
   1432c:	ldr	r2, [r0, #24]
   14330:	cmp	r1, r2
   14334:	bcs	143f8 <__assert_fail@plt+0x2df0>
   14338:	add	r2, r1, #1
   1433c:	str	r2, [r0, #20]
   14340:	mov	r0, #12
   14344:	strb	r0, [r1]
   14348:	movw	r0, #4757	; 0x1295
   1434c:	movt	r0, #3
   14350:	strb	r5, [r0]
   14354:	b	1440c <__assert_fail@plt+0x2e04>
   14358:	movw	r0, #4597	; 0x11f5
   1435c:	movt	r0, #3
   14360:	ldrb	r0, [r0]
   14364:	cmp	r0, #0
   14368:	beq	1439c <__assert_fail@plt+0x2d94>
   1436c:	movw	r0, #4564	; 0x11d4
   14370:	movt	r0, #3
   14374:	ldr	r0, [r0]
   14378:	ldr	r1, [r0, #20]
   1437c:	ldr	r2, [r0, #24]
   14380:	cmp	r1, r2
   14384:	bcs	14404 <__assert_fail@plt+0x2dfc>
   14388:	add	r2, r1, #1
   1438c:	str	r2, [r0, #20]
   14390:	mov	r0, #12
   14394:	strb	r0, [r1]
   14398:	b	1440c <__assert_fail@plt+0x2e04>
   1439c:	adds	r0, sl, #5
   143a0:	beq	1440c <__assert_fail@plt+0x2e04>
   143a4:	mvn	r0, #4
   143a8:	sub	r4, r0, sl
   143ac:	movw	r0, #4564	; 0x11d4
   143b0:	movt	r0, #3
   143b4:	ldr	r0, [r0]
   143b8:	ldr	r1, [r0, #20]
   143bc:	ldr	r2, [r0, #24]
   143c0:	cmp	r1, r2
   143c4:	bcs	143e4 <__assert_fail@plt+0x2ddc>
   143c8:	add	r2, r1, #1
   143cc:	str	r2, [r0, #20]
   143d0:	mov	r0, #10
   143d4:	strb	r0, [r1]
   143d8:	adds	r4, r4, #1
   143dc:	bne	143ac <__assert_fail@plt+0x2da4>
   143e0:	b	1440c <__assert_fail@plt+0x2e04>
   143e4:	mov	r1, #10
   143e8:	bl	1156c <__overflow@plt>
   143ec:	adds	r4, r4, #1
   143f0:	bne	143ac <__assert_fail@plt+0x2da4>
   143f4:	b	1440c <__assert_fail@plt+0x2e04>
   143f8:	mov	r1, #12
   143fc:	bl	1156c <__overflow@plt>
   14400:	b	14348 <__assert_fail@plt+0x2d40>
   14404:	mov	r1, #12
   14408:	bl	1156c <__overflow@plt>
   1440c:	movw	r0, #4640	; 0x1220
   14410:	mov	r6, #0
   14414:	movt	r0, #3
   14418:	mov	r2, r0
   1441c:	ldrd	r0, [r0]
   14420:	adds	r0, r0, #1
   14424:	adc	r1, r1, #0
   14428:	strd	r0, [r2]
   1442c:	movw	r2, #4448	; 0x1160
   14430:	movt	r2, #3
   14434:	ldrd	r2, [r2]
   14438:	subs	r0, r2, r0
   1443c:	sbcs	r0, r3, r1
   14440:	bcc	144b0 <__assert_fail@plt+0x2ea8>
   14444:	movw	r0, #4676	; 0x1244
   14448:	movw	r3, #4585	; 0x11e9
   1444c:	movw	r7, #4680	; 0x1248
   14450:	movt	r0, #3
   14454:	movt	r3, #3
   14458:	movt	r7, #3
   1445c:	ldr	r4, [r0]
   14460:	movw	r0, #4456	; 0x1168
   14464:	movt	r0, #3
   14468:	ldr	ip, [r0]
   1446c:	cmp	ip, #0
   14470:	beq	144a0 <__assert_fail@plt+0x2e98>
   14474:	add	r0, r4, #8
   14478:	mov	r1, ip
   1447c:	ldr	r2, [r0]
   14480:	cmp	r2, #2
   14484:	streq	r6, [r0]
   14488:	add	r0, r0, #40	; 0x28
   1448c:	ldreq	r2, [r7]
   14490:	addeq	r2, r2, #1
   14494:	streq	r2, [r7]
   14498:	subs	r1, r1, #1
   1449c:	bne	1447c <__assert_fail@plt+0x2e74>
   144a0:	ldrb	r5, [r3]
   144a4:	cmp	r5, #0
   144a8:	bne	13950 <__assert_fail@plt+0x2348>
   144ac:	b	13940 <__assert_fail@plt+0x2338>
   144b0:	sub	sp, fp, #28
   144b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144b8:	movw	r1, #65085	; 0xfe3d
   144bc:	mov	r0, #0
   144c0:	mov	r2, #5
   144c4:	movt	r1, #1
   144c8:	bl	1138c <dcgettext@plt>
   144cc:	mov	r2, r0
   144d0:	mov	r0, #1
   144d4:	mov	r1, #0
   144d8:	bl	11428 <error@plt>
   144dc:	push	{fp, lr}
   144e0:	mov	fp, sp
   144e4:	movw	r1, #65007	; 0xfdef
   144e8:	mov	r0, #0
   144ec:	mov	r2, #5
   144f0:	movt	r1, #1
   144f4:	bl	1138c <dcgettext@plt>
   144f8:	mov	r2, r0
   144fc:	mov	r0, #1
   14500:	mov	r1, #0
   14504:	bl	11428 <error@plt>
   14508:	push	{r4, r5, r6, sl, fp, lr}
   1450c:	add	fp, sp, #16
   14510:	mov	r5, r1
   14514:	movw	r1, #2001	; 0x7d1
   14518:	mov	r4, r0
   1451c:	movt	r1, #2
   14520:	bl	112f0 <strcmp@plt>
   14524:	cmp	r0, #0
   14528:	beq	14580 <__assert_fail@plt+0x2f78>
   1452c:	movw	r1, #60476	; 0xec3c
   14530:	mov	r0, r4
   14534:	str	r4, [r5, #4]
   14538:	movt	r1, #1
   1453c:	bl	16178 <__assert_fail@plt+0x4b70>
   14540:	str	r0, [r5]
   14544:	cmp	r0, #0
   14548:	beq	145c0 <__assert_fail@plt+0x2fb8>
   1454c:	mov	r1, #2
   14550:	bl	16044 <__assert_fail@plt+0x4a3c>
   14554:	mov	r0, #0
   14558:	strb	r0, [r5, #37]	; 0x25
   1455c:	str	r0, [r5, #8]
   14560:	movw	r0, #4672	; 0x1240
   14564:	mov	r5, #1
   14568:	movt	r0, #3
   1456c:	ldr	r1, [r0]
   14570:	add	r1, r1, #1
   14574:	str	r1, [r0]
   14578:	mov	r0, r5
   1457c:	pop	{r4, r5, r6, sl, fp, pc}
   14580:	movw	r1, #60814	; 0xed8e
   14584:	mov	r0, #0
   14588:	mov	r2, #5
   1458c:	movt	r1, #1
   14590:	bl	1138c <dcgettext@plt>
   14594:	str	r0, [r5, #4]
   14598:	movw	r0, #4560	; 0x11d0
   1459c:	movw	r1, #4633	; 0x1219
   145a0:	mov	r2, #1
   145a4:	movt	r0, #3
   145a8:	movt	r1, #3
   145ac:	ldr	r0, [r0]
   145b0:	str	r0, [r5]
   145b4:	strb	r2, [r1]
   145b8:	cmp	r0, #0
   145bc:	bne	1454c <__assert_fail@plt+0x2f44>
   145c0:	movw	r0, #4634	; 0x121a
   145c4:	mov	r1, #1
   145c8:	mov	r5, #0
   145cc:	movt	r0, #3
   145d0:	strb	r1, [r0]
   145d4:	movw	r0, #4616	; 0x1208
   145d8:	movt	r0, #3
   145dc:	ldrb	r0, [r0]
   145e0:	cmp	r0, #0
   145e4:	beq	145f0 <__assert_fail@plt+0x2fe8>
   145e8:	mov	r0, r5
   145ec:	pop	{r4, r5, r6, sl, fp, pc}
   145f0:	bl	114e8 <__errno_location@plt>
   145f4:	ldr	r6, [r0]
   145f8:	mov	r0, #0
   145fc:	mov	r1, #3
   14600:	mov	r2, r4
   14604:	mov	r5, #0
   14608:	bl	19b24 <__assert_fail@plt+0x851c>
   1460c:	movw	r2, #711	; 0x2c7
   14610:	mov	r3, r0
   14614:	mov	r0, #0
   14618:	mov	r1, r6
   1461c:	movt	r2, #2
   14620:	bl	11428 <error@plt>
   14624:	mov	r0, r5
   14628:	pop	{r4, r5, r6, sl, fp, pc}
   1462c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14630:	add	fp, sp, #28
   14634:	sub	sp, sp, #196	; 0xc4
   14638:	mov	r5, r1
   1463c:	movw	r1, #2001	; 0x7d1
   14640:	mov	r4, r0
   14644:	movt	r1, #2
   14648:	bl	112f0 <strcmp@plt>
   1464c:	cmp	r0, #0
   14650:	mvneq	r5, #0
   14654:	cmp	r5, #0
   14658:	blt	14678 <__assert_fail@plt+0x3070>
   1465c:	add	r6, sp, #88	; 0x58
   14660:	mov	r0, #3
   14664:	mov	r1, r5
   14668:	mov	r2, r6
   1466c:	bl	113e0 <__fxstat64@plt>
   14670:	cmp	r0, #0
   14674:	beq	146a0 <__assert_fail@plt+0x3098>
   14678:	movw	r6, #4688	; 0x1250
   1467c:	movt	r6, #3
   14680:	ldr	r0, [r6]
   14684:	cmp	r0, #0
   14688:	bne	146a4 <__assert_fail@plt+0x309c>
   1468c:	movw	r6, #4688	; 0x1250
   14690:	movt	r6, #3
   14694:	mov	r0, r6
   14698:	bl	162f8 <__assert_fail@plt+0x4cf0>
   1469c:	b	146a4 <__assert_fail@plt+0x309c>
   146a0:	add	r6, r6, #80	; 0x50
   146a4:	movw	sl, #4628	; 0x1214
   146a8:	ldrd	r8, [r6]
   146ac:	add	r1, sp, #80	; 0x50
   146b0:	add	r2, sp, #36	; 0x24
   146b4:	movt	sl, #3
   146b8:	ldr	r0, [sl]
   146bc:	str	r9, [sp, #84]	; 0x54
   146c0:	str	r8, [sp, #80]	; 0x50
   146c4:	bl	1a060 <__assert_fail@plt+0x8a58>
   146c8:	cmp	r0, #0
   146cc:	beq	14730 <__assert_fail@plt+0x3128>
   146d0:	movw	r0, #4592	; 0x11f0
   146d4:	add	r8, sp, #36	; 0x24
   146d8:	mvn	r1, #0
   146dc:	movt	r0, #3
   146e0:	mov	r3, r8
   146e4:	ldr	r2, [r0]
   146e8:	ldr	r0, [sl]
   146ec:	stm	sp, {r0, r9}
   146f0:	mov	r0, #0
   146f4:	bl	167fc <__assert_fail@plt+0x51f4>
   146f8:	add	r7, r0, #1
   146fc:	mov	r0, r7
   14700:	bl	1ac84 <__assert_fail@plt+0x967c>
   14704:	mov	r6, r0
   14708:	movw	r0, #4592	; 0x11f0
   1470c:	mov	r1, r7
   14710:	mov	r3, r8
   14714:	movt	r0, #3
   14718:	ldr	r2, [r0]
   1471c:	ldr	r0, [sl]
   14720:	stm	sp, {r0, r9}
   14724:	mov	r0, r6
   14728:	bl	167fc <__assert_fail@plt+0x51f4>
   1472c:	b	14768 <__assert_fail@plt+0x3160>
   14730:	mov	r0, #33	; 0x21
   14734:	bl	1ac84 <__assert_fail@plt+0x967c>
   14738:	mov	r6, r0
   1473c:	ldr	r0, [sp, #80]	; 0x50
   14740:	add	r2, sp, #15
   14744:	asr	r1, r0, #31
   14748:	bl	16380 <__assert_fail@plt+0x4d78>
   1474c:	movw	r3, #65111	; 0xfe57
   14750:	stm	sp, {r0, r9}
   14754:	mov	r0, r6
   14758:	mov	r1, #1
   1475c:	mov	r2, #33	; 0x21
   14760:	movt	r3, #1
   14764:	bl	114f4 <__sprintf_chk@plt>
   14768:	movw	r7, #4696	; 0x1258
   1476c:	movt	r7, #3
   14770:	ldr	r0, [r7]
   14774:	bl	1622c <__assert_fail@plt+0x4c24>
   14778:	movw	r0, #65108	; 0xfe54
   1477c:	cmp	r5, #0
   14780:	movw	r5, #4700	; 0x125c
   14784:	mov	r1, #0
   14788:	str	r6, [r7]
   1478c:	movt	r0, #1
   14790:	movt	r5, #3
   14794:	movlt	r4, r0
   14798:	movw	r0, #4600	; 0x11f8
   1479c:	movt	r0, #3
   147a0:	ldr	r0, [r0]
   147a4:	cmp	r0, #0
   147a8:	movne	r4, r0
   147ac:	movw	r0, #4444	; 0x115c
   147b0:	movt	r0, #3
   147b4:	str	r4, [r5]
   147b8:	ldr	r4, [r0]
   147bc:	mov	r0, r6
   147c0:	bl	16440 <__assert_fail@plt+0x4e38>
   147c4:	sub	r4, r4, r0
   147c8:	ldr	r0, [r5]
   147cc:	mov	r1, #0
   147d0:	bl	16440 <__assert_fail@plt+0x4e38>
   147d4:	movw	r1, #4704	; 0x1260
   147d8:	sub	r0, r4, r0
   147dc:	movt	r1, #3
   147e0:	str	r0, [r1]
   147e4:	sub	sp, fp, #28
   147e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   147f0:	add	fp, sp, #24
   147f4:	ldr	r7, [r0]
   147f8:	mov	r8, r1
   147fc:	mov	r5, r0
   14800:	ldmib	r7, {r0, r1}
   14804:	cmp	r0, r1
   14808:	bcs	14a30 <__assert_fail@plt+0x3428>
   1480c:	add	r1, r0, #1
   14810:	str	r1, [r7, #4]
   14814:	ldrb	r6, [r0]
   14818:	cmp	r6, #12
   1481c:	bne	1486c <__assert_fail@plt+0x3264>
   14820:	ldrb	r0, [r5, #37]	; 0x25
   14824:	cmp	r0, #0
   14828:	beq	14868 <__assert_fail@plt+0x3260>
   1482c:	ldmib	r7, {r0, r1}
   14830:	cmp	r0, r1
   14834:	bcs	14a5c <__assert_fail@plt+0x3454>
   14838:	add	r1, r0, #1
   1483c:	str	r1, [r7, #4]
   14840:	ldrb	r6, [r0]
   14844:	cmp	r6, #10
   14848:	bne	1486c <__assert_fail@plt+0x3264>
   1484c:	ldmib	r7, {r0, r1}
   14850:	cmp	r0, r1
   14854:	bcs	14a74 <__assert_fail@plt+0x346c>
   14858:	add	r1, r0, #1
   1485c:	str	r1, [r7, #4]
   14860:	ldrb	r6, [r0]
   14864:	b	1486c <__assert_fail@plt+0x3264>
   14868:	mov	r6, #12
   1486c:	movw	r4, #4724	; 0x1274
   14870:	movt	r4, #3
   14874:	ldrb	r0, [r4]
   14878:	strb	r0, [r5, #37]	; 0x25
   1487c:	mov	r0, r6
   14880:	cmn	r0, #1
   14884:	bne	148a0 <__assert_fail@plt+0x3298>
   14888:	b	148cc <__assert_fail@plt+0x32c4>
   1488c:	add	r1, r0, #1
   14890:	str	r1, [r7, #4]
   14894:	ldrb	r0, [r0]
   14898:	cmn	r0, #1
   1489c:	beq	148cc <__assert_fail@plt+0x32c4>
   148a0:	cmp	r0, #10
   148a4:	beq	149e4 <__assert_fail@plt+0x33dc>
   148a8:	cmp	r0, #12
   148ac:	beq	148d8 <__assert_fail@plt+0x32d0>
   148b0:	ldmib	r7, {r0, r1}
   148b4:	cmp	r0, r1
   148b8:	bcc	1488c <__assert_fail@plt+0x3284>
   148bc:	mov	r0, r7
   148c0:	bl	11560 <__uflow@plt>
   148c4:	cmn	r0, #1
   148c8:	bne	148a0 <__assert_fail@plt+0x3298>
   148cc:	mov	r0, r5
   148d0:	bl	14a84 <__assert_fail@plt+0x347c>
   148d4:	b	149e4 <__assert_fail@plt+0x33dc>
   148d8:	ldrb	r0, [r4]
   148dc:	cmp	r0, #1
   148e0:	bne	14938 <__assert_fail@plt+0x3330>
   148e4:	movw	r0, #4606	; 0x11fe
   148e8:	movt	r0, #3
   148ec:	ldrb	r0, [r0]
   148f0:	cmp	r0, #0
   148f4:	beq	14904 <__assert_fail@plt+0x32fc>
   148f8:	mov	r0, #0
   148fc:	strb	r0, [r5, #37]	; 0x25
   14900:	b	14938 <__assert_fail@plt+0x3330>
   14904:	movw	r0, #4456	; 0x1168
   14908:	movt	r0, #3
   1490c:	ldr	r0, [r0]
   14910:	cmp	r0, #0
   14914:	beq	14938 <__assert_fail@plt+0x3330>
   14918:	movw	r1, #4676	; 0x1244
   1491c:	mov	r2, #0
   14920:	movt	r1, #3
   14924:	ldr	r1, [r1]
   14928:	add	r1, r1, #37	; 0x25
   1492c:	strb	r2, [r1], #40	; 0x28
   14930:	subs	r0, r0, #1
   14934:	bne	1492c <__assert_fail@plt+0x3324>
   14938:	ldmib	r7, {r0, r1}
   1493c:	cmp	r0, r1
   14940:	bcs	14a48 <__assert_fail@plt+0x3440>
   14944:	add	r1, r0, #1
   14948:	str	r1, [r7, #4]
   1494c:	ldrb	r0, [r0]
   14950:	cmp	r0, #10
   14954:	beq	14960 <__assert_fail@plt+0x3358>
   14958:	mov	r1, r7
   1495c:	bl	114dc <ungetc@plt>
   14960:	movw	r0, #4606	; 0x11fe
   14964:	movt	r0, #3
   14968:	ldrb	r0, [r0]
   1496c:	cmp	r0, #0
   14970:	beq	14980 <__assert_fail@plt+0x3378>
   14974:	mov	r0, #2
   14978:	str	r0, [r5, #8]
   1497c:	b	149c8 <__assert_fail@plt+0x33c0>
   14980:	movw	r0, #4456	; 0x1168
   14984:	movt	r0, #3
   14988:	ldr	r0, [r0]
   1498c:	cmp	r0, #0
   14990:	beq	149c8 <__assert_fail@plt+0x33c0>
   14994:	movw	r1, #4585	; 0x11e9
   14998:	movt	r1, #3
   1499c:	ldrb	r2, [r1]
   149a0:	mov	r1, #1
   149a4:	cmp	r2, #0
   149a8:	movw	r2, #4676	; 0x1244
   149ac:	movt	r2, #3
   149b0:	movwne	r1, #2
   149b4:	ldr	r2, [r2]
   149b8:	add	r2, r2, #8
   149bc:	str	r1, [r2], #40	; 0x28
   149c0:	subs	r0, r0, #1
   149c4:	bne	149bc <__assert_fail@plt+0x33b4>
   149c8:	mov	r0, #0
   149cc:	str	r0, [r5, #28]
   149d0:	movw	r0, #4680	; 0x1248
   149d4:	movt	r0, #3
   149d8:	ldr	r1, [r0]
   149dc:	sub	r1, r1, #1
   149e0:	str	r1, [r0]
   149e4:	movw	r0, #4608	; 0x1200
   149e8:	movt	r0, #3
   149ec:	ldrb	r0, [r0]
   149f0:	cmp	r0, #0
   149f4:	popne	{r4, r5, r6, r7, r8, sl, fp, pc}
   149f8:	subs	r0, r8, #1
   149fc:	movwne	r0, #1
   14a00:	cmp	r6, #12
   14a04:	beq	14a2c <__assert_fail@plt+0x3424>
   14a08:	movw	r1, #4606	; 0x11fe
   14a0c:	movt	r1, #3
   14a10:	ldrb	r1, [r1]
   14a14:	ands	r0, r0, r1
   14a18:	movweq	r0, #4460	; 0x116c
   14a1c:	movteq	r0, #3
   14a20:	ldreq	r1, [r0]
   14a24:	addeq	r1, r1, #1
   14a28:	streq	r1, [r0]
   14a2c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a30:	mov	r0, r7
   14a34:	bl	11560 <__uflow@plt>
   14a38:	mov	r6, r0
   14a3c:	cmp	r6, #12
   14a40:	beq	14820 <__assert_fail@plt+0x3218>
   14a44:	b	1486c <__assert_fail@plt+0x3264>
   14a48:	mov	r0, r7
   14a4c:	bl	11560 <__uflow@plt>
   14a50:	cmp	r0, #10
   14a54:	bne	14958 <__assert_fail@plt+0x3350>
   14a58:	b	14960 <__assert_fail@plt+0x3358>
   14a5c:	mov	r0, r7
   14a60:	bl	11560 <__uflow@plt>
   14a64:	mov	r6, r0
   14a68:	cmp	r6, #10
   14a6c:	beq	1484c <__assert_fail@plt+0x3244>
   14a70:	b	1486c <__assert_fail@plt+0x3264>
   14a74:	mov	r0, r7
   14a78:	bl	11560 <__uflow@plt>
   14a7c:	mov	r6, r0
   14a80:	b	1486c <__assert_fail@plt+0x3264>
   14a84:	push	{r4, r5, r6, sl, fp, lr}
   14a88:	add	fp, sp, #16
   14a8c:	mov	r4, r0
   14a90:	ldr	r0, [r0, #8]
   14a94:	cmp	r0, #3
   14a98:	popeq	{r4, r5, r6, sl, fp, pc}
   14a9c:	bl	114e8 <__errno_location@plt>
   14aa0:	mov	r6, r0
   14aa4:	ldr	r1, [r0]
   14aa8:	ldr	r0, [r4]
   14aac:	ldr	r2, [r0]
   14ab0:	lsl	r2, r2, #26
   14ab4:	and	r5, r1, r2, asr #31
   14ab8:	bl	11524 <fileno@plt>
   14abc:	mov	r1, r0
   14ac0:	ldr	r0, [r4]
   14ac4:	cmp	r1, #0
   14ac8:	beq	14b70 <__assert_fail@plt+0x3568>
   14acc:	bl	16080 <__assert_fail@plt+0x4a78>
   14ad0:	cmp	r5, #0
   14ad4:	bne	14ae0 <__assert_fail@plt+0x34d8>
   14ad8:	cmp	r0, #0
   14adc:	ldrne	r5, [r6]
   14ae0:	cmp	r5, #0
   14ae4:	bne	14b7c <__assert_fail@plt+0x3574>
   14ae8:	movw	r0, #4606	; 0x11fe
   14aec:	movt	r0, #3
   14af0:	ldrb	r0, [r0]
   14af4:	cmp	r0, #0
   14af8:	beq	14b10 <__assert_fail@plt+0x3508>
   14afc:	mov	r0, #0
   14b00:	str	r0, [r4, #28]
   14b04:	mov	r0, #3
   14b08:	str	r0, [r4, #8]
   14b0c:	b	14b58 <__assert_fail@plt+0x3550>
   14b10:	movw	r0, #4456	; 0x1168
   14b14:	movt	r0, #3
   14b18:	ldr	r0, [r0]
   14b1c:	cmp	r0, #0
   14b20:	beq	14b58 <__assert_fail@plt+0x3550>
   14b24:	movw	r1, #4676	; 0x1244
   14b28:	mov	r2, #3
   14b2c:	mov	r3, #0
   14b30:	movt	r1, #3
   14b34:	ldr	r1, [r1]
   14b38:	add	r1, r1, #24
   14b3c:	str	r2, [r1, #-16]
   14b40:	ldr	r6, [r1]
   14b44:	cmp	r6, #0
   14b48:	streq	r3, [r1, #4]
   14b4c:	add	r1, r1, #40	; 0x28
   14b50:	subs	r0, r0, #1
   14b54:	bne	14b3c <__assert_fail@plt+0x3534>
   14b58:	movw	r0, #4680	; 0x1248
   14b5c:	movt	r0, #3
   14b60:	ldr	r1, [r0]
   14b64:	sub	r1, r1, #1
   14b68:	str	r1, [r0]
   14b6c:	pop	{r4, r5, r6, sl, fp, pc}
   14b70:	bl	115a8 <clearerr_unlocked@plt>
   14b74:	cmp	r5, #0
   14b78:	beq	14ae8 <__assert_fail@plt+0x34e0>
   14b7c:	ldr	r2, [r4, #4]
   14b80:	mov	r0, #0
   14b84:	mov	r1, #3
   14b88:	bl	19b24 <__assert_fail@plt+0x851c>
   14b8c:	movw	r2, #711	; 0x2c7
   14b90:	mov	r3, r0
   14b94:	mov	r0, #1
   14b98:	mov	r1, r5
   14b9c:	movt	r2, #2
   14ba0:	bl	11428 <error@plt>
   14ba4:	push	{r4, r5, r6, sl, fp, lr}
   14ba8:	add	fp, sp, #16
   14bac:	movw	r5, #4728	; 0x1278
   14bb0:	movw	r2, #4720	; 0x1270
   14bb4:	movw	r6, #4716	; 0x126c
   14bb8:	mov	r4, r0
   14bbc:	movt	r2, #3
   14bc0:	movt	r5, #3
   14bc4:	movt	r6, #3
   14bc8:	ldr	r1, [r5]
   14bcc:	ldr	r2, [r2]
   14bd0:	ldr	r0, [r6]
   14bd4:	cmp	r1, r2
   14bd8:	bcc	14bf0 <__assert_fail@plt+0x35e8>
   14bdc:	movw	r1, #4720	; 0x1270
   14be0:	movt	r1, #3
   14be4:	bl	1adb8 <__assert_fail@plt+0x97b0>
   14be8:	ldr	r1, [r5]
   14bec:	str	r0, [r6]
   14bf0:	add	r2, r1, #1
   14bf4:	str	r2, [r5]
   14bf8:	strb	r4, [r0, r1]
   14bfc:	pop	{r4, r5, r6, sl, fp, pc}
   14c00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c04:	add	fp, sp, #28
   14c08:	sub	sp, sp, #12
   14c0c:	ldr	r2, [r0, #20]
   14c10:	movw	r1, #4708	; 0x1264
   14c14:	mov	r9, r0
   14c18:	movw	r8, #4732	; 0x127c
   14c1c:	movt	r1, #3
   14c20:	movt	r8, #3
   14c24:	add	r0, r2, #1
   14c28:	str	r2, [sp, #8]
   14c2c:	str	r0, [r9, #20]
   14c30:	ldr	r1, [r1]
   14c34:	ldr	r7, [r1, r0, lsl #2]
   14c38:	mov	r0, #1
   14c3c:	ldr	r6, [r1, r2, lsl #2]
   14c40:	strb	r0, [r8]
   14c44:	movw	r0, #4716	; 0x126c
   14c48:	movt	r0, #3
   14c4c:	ldr	sl, [r0]
   14c50:	movw	r0, #4733	; 0x127d
   14c54:	movt	r0, #3
   14c58:	ldrb	r0, [r0]
   14c5c:	cmp	r0, #1
   14c60:	bleq	15698 <__assert_fail@plt+0x4090>
   14c64:	ldr	r0, [r9, #8]
   14c68:	cmp	r0, #1
   14c6c:	bne	14cc0 <__assert_fail@plt+0x36b8>
   14c70:	movw	r0, #4456	; 0x1168
   14c74:	movw	r1, #4676	; 0x1244
   14c78:	mov	r5, r6
   14c7c:	movt	r0, #3
   14c80:	movt	r1, #3
   14c84:	ldr	r0, [r0]
   14c88:	ldr	r1, [r1]
   14c8c:	cmp	r0, #1
   14c90:	blt	14cb0 <__assert_fail@plt+0x36a8>
   14c94:	add	r2, r1, #8
   14c98:	mov	r3, #0
   14c9c:	mov	r6, #2
   14ca0:	add	r3, r3, #1
   14ca4:	str	r6, [r2], #40	; 0x28
   14ca8:	cmp	r3, r0
   14cac:	blt	14ca0 <__assert_fail@plt+0x3698>
   14cb0:	ldr	r0, [r1, #28]
   14cb4:	mov	r6, r5
   14cb8:	cmp	r0, #0
   14cbc:	ble	14e34 <__assert_fail@plt+0x382c>
   14cc0:	movw	r4, #4736	; 0x1280
   14cc4:	movw	r5, #4620	; 0x120c
   14cc8:	movt	r4, #3
   14ccc:	movt	r5, #3
   14cd0:	ldr	r0, [r4]
   14cd4:	ldr	r1, [r5]
   14cd8:	cmp	r0, r1
   14cdc:	ble	14d9c <__assert_fail@plt+0x3794>
   14ce0:	movw	r3, #4604	; 0x11fc
   14ce4:	movw	lr, #4744	; 0x1288
   14ce8:	sub	ip, r0, r1
   14cec:	movt	r3, #3
   14cf0:	movt	lr, #3
   14cf4:	ldrb	r3, [r3]
   14cf8:	ldr	r2, [lr]
   14cfc:	cmp	r3, #0
   14d00:	beq	14d18 <__assert_fail@plt+0x3710>
   14d04:	movw	r1, #4740	; 0x1284
   14d08:	sub	r0, ip, r2
   14d0c:	movt	r1, #3
   14d10:	str	r0, [r1]
   14d14:	b	14d94 <__assert_fail@plt+0x378c>
   14d18:	cmp	ip, r2
   14d1c:	stm	sp, {r6, sl}
   14d20:	ble	14d8c <__assert_fail@plt+0x3784>
   14d24:	movw	sl, #4564	; 0x11d4
   14d28:	sub	r0, r0, r2
   14d2c:	mov	r6, #32
   14d30:	sub	r8, r0, r1
   14d34:	movt	sl, #3
   14d38:	ldr	r0, [sl]
   14d3c:	ldr	r1, [r0, #20]
   14d40:	ldr	r2, [r0, #24]
   14d44:	cmp	r1, r2
   14d48:	bcs	14d64 <__assert_fail@plt+0x375c>
   14d4c:	add	r2, r1, #1
   14d50:	str	r2, [r0, #20]
   14d54:	strb	r6, [r1]
   14d58:	subs	r8, r8, #1
   14d5c:	bne	14d38 <__assert_fail@plt+0x3730>
   14d60:	b	14d8c <__assert_fail@plt+0x3784>
   14d64:	mov	r1, #32
   14d68:	mov	r4, ip
   14d6c:	bl	1156c <__overflow@plt>
   14d70:	movw	lr, #4744	; 0x1288
   14d74:	mov	ip, r4
   14d78:	movw	r4, #4736	; 0x1280
   14d7c:	movt	lr, #3
   14d80:	movt	r4, #3
   14d84:	subs	r8, r8, #1
   14d88:	bne	14d38 <__assert_fail@plt+0x3730>
   14d8c:	str	ip, [lr]
   14d90:	ldm	sp, {r6, sl}
   14d94:	mov	r0, #0
   14d98:	str	r0, [r4]
   14d9c:	movw	r0, #4617	; 0x1209
   14da0:	movt	r0, #3
   14da4:	ldrb	r0, [r0]
   14da8:	cmp	r0, #1
   14dac:	bleq	15848 <__assert_fail@plt+0x4240>
   14db0:	cmp	r6, r7
   14db4:	beq	14dd4 <__assert_fail@plt+0x37cc>
   14db8:	mov	r0, r6
   14dbc:	add	r6, sl, r6
   14dc0:	sub	r7, r7, r0
   14dc4:	ldrb	r0, [r6], #1
   14dc8:	bl	14e58 <__assert_fail@plt+0x3850>
   14dcc:	subs	r7, r7, #1
   14dd0:	bne	14dc4 <__assert_fail@plt+0x37bc>
   14dd4:	movw	r0, #4740	; 0x1284
   14dd8:	movt	r0, #3
   14ddc:	ldr	r0, [r0]
   14de0:	cmp	r0, #0
   14de4:	bne	14e4c <__assert_fail@plt+0x3844>
   14de8:	movw	r0, #4712	; 0x1268
   14dec:	ldr	r1, [sp, #8]
   14df0:	movw	r7, #4612	; 0x1204
   14df4:	ldr	r3, [r9, #32]
   14df8:	ldr	r2, [r5]
   14dfc:	movt	r0, #3
   14e00:	movt	r7, #3
   14e04:	ldr	r0, [r0]
   14e08:	ldr	r7, [r7]
   14e0c:	ldr	r0, [r0, r1, lsl #2]
   14e10:	movw	r1, #4744	; 0x1288
   14e14:	movt	r1, #3
   14e18:	add	r0, r0, r3
   14e1c:	sub	r3, r3, r2
   14e20:	cmp	r3, r7
   14e24:	str	r0, [r1]
   14e28:	subeq	r0, r0, r2
   14e2c:	streq	r0, [r1]
   14e30:	b	14e4c <__assert_fail@plt+0x3844>
   14e34:	movw	r0, #4624	; 0x1210
   14e38:	movt	r0, #3
   14e3c:	ldrb	r0, [r0]
   14e40:	cmp	r0, #1
   14e44:	moveq	r0, #0
   14e48:	strbeq	r0, [r8]
   14e4c:	mov	r0, #1
   14e50:	sub	sp, fp, #28
   14e54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e58:	push	{r4, sl, fp, lr}
   14e5c:	add	fp, sp, #8
   14e60:	mov	r4, r0
   14e64:	movw	r0, #4604	; 0x11fc
   14e68:	movt	r0, #3
   14e6c:	ldrb	r0, [r0]
   14e70:	cmp	r0, #1
   14e74:	bne	14ee4 <__assert_fail@plt+0x38dc>
   14e78:	movw	r0, #4740	; 0x1284
   14e7c:	cmp	r4, #32
   14e80:	movt	r0, #3
   14e84:	ldr	r1, [r0]
   14e88:	addeq	r1, r1, #1
   14e8c:	streq	r1, [r0]
   14e90:	popeq	{r4, sl, fp, pc}
   14e94:	cmp	r1, #1
   14e98:	blge	1597c <__assert_fail@plt+0x4374>
   14e9c:	bl	114a0 <__ctype_b_loc@plt>
   14ea0:	ldr	r0, [r0]
   14ea4:	add	r0, r0, r4, lsl #1
   14ea8:	ldrb	r0, [r0, #1]
   14eac:	tst	r0, #64	; 0x40
   14eb0:	bne	14ed0 <__assert_fail@plt+0x38c8>
   14eb4:	cmp	r4, #8
   14eb8:	bne	14ee4 <__assert_fail@plt+0x38dc>
   14ebc:	movw	r0, #4744	; 0x1288
   14ec0:	movt	r0, #3
   14ec4:	ldr	r1, [r0]
   14ec8:	sub	r1, r1, #1
   14ecc:	b	14ee0 <__assert_fail@plt+0x38d8>
   14ed0:	movw	r0, #4744	; 0x1288
   14ed4:	movt	r0, #3
   14ed8:	ldr	r1, [r0]
   14edc:	add	r1, r1, #1
   14ee0:	str	r1, [r0]
   14ee4:	movw	r0, #4564	; 0x11d4
   14ee8:	movt	r0, #3
   14eec:	ldr	r0, [r0]
   14ef0:	ldr	r1, [r0, #20]
   14ef4:	ldr	r2, [r0, #24]
   14ef8:	cmp	r1, r2
   14efc:	addcc	r2, r1, #1
   14f00:	strcc	r2, [r0, #20]
   14f04:	strbcc	r4, [r1]
   14f08:	popcc	{r4, sl, fp, pc}
   14f0c:	mov	r1, r4
   14f10:	pop	{r4, sl, fp, lr}
   14f14:	b	1156c <__overflow@plt>
   14f18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f1c:	add	fp, sp, #28
   14f20:	sub	sp, sp, #12
   14f24:	mov	r4, r0
   14f28:	ldr	r0, [r0]
   14f2c:	ldmib	r0, {r1, r2}
   14f30:	cmp	r1, r2
   14f34:	bcs	1564c <__assert_fail@plt+0x4044>
   14f38:	add	r2, r1, #1
   14f3c:	str	r2, [r0, #4]
   14f40:	ldrb	r5, [r1]
   14f44:	movw	sl, #4752	; 0x1290
   14f48:	cmp	r5, #12
   14f4c:	movt	sl, #3
   14f50:	ldr	r7, [sl]
   14f54:	bne	14fa4 <__assert_fail@plt+0x399c>
   14f58:	ldrb	r0, [r4, #37]	; 0x25
   14f5c:	cmp	r0, #0
   14f60:	beq	152a0 <__assert_fail@plt+0x3c98>
   14f64:	ldr	r0, [r4]
   14f68:	ldmib	r0, {r1, r2}
   14f6c:	cmp	r1, r2
   14f70:	bcs	15668 <__assert_fail@plt+0x4060>
   14f74:	add	r2, r1, #1
   14f78:	str	r2, [r0, #4]
   14f7c:	ldrb	r5, [r1]
   14f80:	cmp	r5, #10
   14f84:	bne	14fa4 <__assert_fail@plt+0x399c>
   14f88:	ldr	r0, [r4]
   14f8c:	ldmib	r0, {r1, r2}
   14f90:	cmp	r1, r2
   14f94:	bcs	1567c <__assert_fail@plt+0x4074>
   14f98:	add	r2, r1, #1
   14f9c:	str	r2, [r0, #4]
   14fa0:	ldrb	r5, [r1]
   14fa4:	mov	r0, #0
   14fa8:	cmn	r5, #1
   14fac:	strb	r0, [r4, #37]	; 0x25
   14fb0:	beq	14fd4 <__assert_fail@plt+0x39cc>
   14fb4:	cmp	r5, #10
   14fb8:	beq	14fe0 <__assert_fail@plt+0x39d8>
   14fbc:	cmp	r5, #12
   14fc0:	beq	152a8 <__assert_fail@plt+0x3ca0>
   14fc4:	uxtb	r0, r5
   14fc8:	bl	15a8c <__assert_fail@plt+0x4484>
   14fcc:	mov	r6, r0
   14fd0:	b	14fe0 <__assert_fail@plt+0x39d8>
   14fd4:	mov	r0, r4
   14fd8:	bl	14a84 <__assert_fail@plt+0x347c>
   14fdc:	b	153c8 <__assert_fail@plt+0x3dc0>
   14fe0:	movw	r0, #4627	; 0x1213
   14fe4:	movt	r0, #3
   14fe8:	ldrb	r0, [r0]
   14fec:	cmp	r0, #1
   14ff0:	bne	1500c <__assert_fail@plt+0x3a04>
   14ff4:	movw	r0, #4660	; 0x1234
   14ff8:	ldr	r1, [sl]
   14ffc:	movt	r0, #3
   15000:	ldr	r0, [r0]
   15004:	cmp	r1, r0
   15008:	bgt	15564 <__assert_fail@plt+0x3f5c>
   1500c:	ldr	r0, [r4, #16]
   15010:	movw	r1, #19364	; 0x4ba4
   15014:	movt	r1, #1
   15018:	cmp	r0, r1
   1501c:	beq	1545c <__assert_fail@plt+0x3e54>
   15020:	movw	r0, #4732	; 0x127c
   15024:	mov	r1, #1
   15028:	movt	r0, #3
   1502c:	strb	r1, [r0]
   15030:	movw	r0, #4733	; 0x127d
   15034:	movt	r0, #3
   15038:	ldrb	r0, [r0]
   1503c:	cmp	r0, #1
   15040:	bne	15058 <__assert_fail@plt+0x3a50>
   15044:	movw	r0, #4585	; 0x11e9
   15048:	movt	r0, #3
   1504c:	ldrb	r0, [r0]
   15050:	cmp	r0, #1
   15054:	bleq	15698 <__assert_fail@plt+0x4090>
   15058:	movw	r0, #4606	; 0x11fe
   1505c:	str	r5, [sp, #4]
   15060:	movt	r0, #3
   15064:	ldrb	r0, [r0]
   15068:	cmp	r0, #1
   1506c:	bne	15248 <__assert_fail@plt+0x3c40>
   15070:	movw	r0, #4758	; 0x1296
   15074:	movt	r0, #3
   15078:	ldrb	r0, [r0]
   1507c:	cmp	r0, #1
   15080:	bne	15248 <__assert_fail@plt+0x3c40>
   15084:	movw	r5, #4748	; 0x128c
   15088:	mov	r0, #0
   1508c:	movt	r5, #3
   15090:	ldr	r1, [r5]
   15094:	str	r0, [r5]
   15098:	cmp	r1, #1
   1509c:	str	r1, [sp, #8]
   150a0:	blt	151fc <__assert_fail@plt+0x3bf4>
   150a4:	movw	r0, #4676	; 0x1244
   150a8:	movw	ip, #4564	; 0x11d4
   150ac:	mov	r8, #1
   150b0:	mov	r9, #32
   150b4:	movt	r0, #3
   150b8:	movt	ip, #3
   150bc:	ldr	r7, [r0]
   150c0:	ldr	r0, [r7, #32]
   150c4:	movw	r1, #4736	; 0x1280
   150c8:	movt	r1, #3
   150cc:	str	r0, [r1]
   150d0:	movw	r1, #4620	; 0x120c
   150d4:	movt	r1, #3
   150d8:	ldr	r1, [r1]
   150dc:	cmp	r0, r1
   150e0:	ble	1519c <__assert_fail@plt+0x3b94>
   150e4:	movw	r3, #4604	; 0x11fc
   150e8:	movw	r2, #4744	; 0x1288
   150ec:	sub	r5, r0, r1
   150f0:	movt	r3, #3
   150f4:	movt	r2, #3
   150f8:	ldrb	r3, [r3]
   150fc:	ldr	r2, [r2]
   15100:	cmp	r3, #0
   15104:	beq	1511c <__assert_fail@plt+0x3b14>
   15108:	movw	r1, #4740	; 0x1284
   1510c:	sub	r0, r5, r2
   15110:	movt	r1, #3
   15114:	str	r0, [r1]
   15118:	b	15184 <__assert_fail@plt+0x3b7c>
   1511c:	cmp	r5, r2
   15120:	ble	15170 <__assert_fail@plt+0x3b68>
   15124:	sub	r0, r0, r2
   15128:	sub	sl, r0, r1
   1512c:	ldr	r0, [ip]
   15130:	ldr	r1, [r0, #20]
   15134:	ldr	r2, [r0, #24]
   15138:	cmp	r1, r2
   1513c:	bcs	15158 <__assert_fail@plt+0x3b50>
   15140:	add	r2, r1, #1
   15144:	str	r2, [r0, #20]
   15148:	strb	r9, [r1]
   1514c:	subs	sl, sl, #1
   15150:	bne	1512c <__assert_fail@plt+0x3b24>
   15154:	b	15170 <__assert_fail@plt+0x3b68>
   15158:	mov	r1, #32
   1515c:	bl	1156c <__overflow@plt>
   15160:	movw	ip, #4564	; 0x11d4
   15164:	movt	ip, #3
   15168:	subs	sl, sl, #1
   1516c:	bne	1512c <__assert_fail@plt+0x3b24>
   15170:	movw	r0, #4744	; 0x1288
   15174:	movw	sl, #4752	; 0x1290
   15178:	movt	r0, #3
   1517c:	movt	sl, #3
   15180:	str	r5, [r0]
   15184:	movw	r1, #4736	; 0x1280
   15188:	movw	r5, #4748	; 0x128c
   1518c:	mov	r0, #0
   15190:	movt	r1, #3
   15194:	movt	r5, #3
   15198:	str	r0, [r1]
   1519c:	movw	r0, #4617	; 0x1209
   151a0:	movt	r0, #3
   151a4:	ldrb	r0, [r0]
   151a8:	cmp	r0, #1
   151ac:	bne	151bc <__assert_fail@plt+0x3bb4>
   151b0:	bl	15848 <__assert_fail@plt+0x4240>
   151b4:	movw	ip, #4564	; 0x11d4
   151b8:	movt	ip, #3
   151bc:	ldrb	r0, [r7, #36]	; 0x24
   151c0:	cmp	r0, #0
   151c4:	beq	151d8 <__assert_fail@plt+0x3bd0>
   151c8:	mov	r0, r7
   151cc:	bl	15c60 <__assert_fail@plt+0x4658>
   151d0:	movw	ip, #4564	; 0x11d4
   151d4:	movt	ip, #3
   151d8:	ldr	r0, [r5]
   151dc:	ldr	r1, [sp, #8]
   151e0:	add	r7, r7, #40	; 0x28
   151e4:	add	r0, r0, #1
   151e8:	cmp	r8, r1
   151ec:	str	r0, [r5]
   151f0:	add	r0, r8, #1
   151f4:	mov	r8, r0
   151f8:	bne	150c0 <__assert_fail@plt+0x3ab8>
   151fc:	movw	r1, #4758	; 0x1296
   15200:	ldr	r0, [r4, #32]
   15204:	mov	r2, #0
   15208:	movt	r1, #3
   1520c:	strb	r2, [r1]
   15210:	movw	r1, #4736	; 0x1280
   15214:	movt	r1, #3
   15218:	str	r0, [r1]
   1521c:	movw	r1, #4627	; 0x1213
   15220:	movw	r0, #4660	; 0x1234
   15224:	movt	r1, #3
   15228:	movt	r0, #3
   1522c:	ldrb	r1, [r1]
   15230:	ldr	r0, [r0]
   15234:	cmp	r1, #0
   15238:	moveq	r0, r1
   1523c:	movw	r1, #4740	; 0x1284
   15240:	movt	r1, #3
   15244:	str	r0, [r1]
   15248:	movw	r8, #4736	; 0x1280
   1524c:	movw	r1, #4620	; 0x120c
   15250:	movt	r1, #3
   15254:	movt	r8, #3
   15258:	ldr	r0, [r8]
   1525c:	ldr	r1, [r1]
   15260:	cmp	r0, r1
   15264:	ble	15444 <__assert_fail@plt+0x3e3c>
   15268:	movw	r3, #4604	; 0x11fc
   1526c:	movw	ip, #4744	; 0x1288
   15270:	sub	sl, r0, r1
   15274:	movt	r3, #3
   15278:	movt	ip, #3
   1527c:	ldrb	r3, [r3]
   15280:	ldr	r2, [ip]
   15284:	cmp	r3, #0
   15288:	beq	153d0 <__assert_fail@plt+0x3dc8>
   1528c:	movw	r1, #4740	; 0x1284
   15290:	sub	r0, sl, r2
   15294:	movt	r1, #3
   15298:	str	r0, [r1]
   1529c:	b	15434 <__assert_fail@plt+0x3e2c>
   152a0:	mov	r0, #0
   152a4:	strb	r0, [r4, #37]	; 0x25
   152a8:	ldr	r0, [r4]
   152ac:	ldmib	r0, {r1, r2}
   152b0:	cmp	r1, r2
   152b4:	bcs	15658 <__assert_fail@plt+0x4050>
   152b8:	add	r2, r1, #1
   152bc:	str	r2, [r0, #4]
   152c0:	ldrb	r0, [r1]
   152c4:	cmp	r0, #10
   152c8:	beq	152d4 <__assert_fail@plt+0x3ccc>
   152cc:	ldr	r1, [r4]
   152d0:	bl	114dc <ungetc@plt>
   152d4:	movw	r0, #4756	; 0x1294
   152d8:	mov	r1, #1
   152dc:	movt	r0, #3
   152e0:	strb	r1, [r0]
   152e4:	movw	r0, #4733	; 0x127d
   152e8:	movt	r0, #3
   152ec:	ldrb	r0, [r0]
   152f0:	cmp	r0, #1
   152f4:	bne	15324 <__assert_fail@plt+0x3d1c>
   152f8:	movw	r0, #4585	; 0x11e9
   152fc:	movt	r0, #3
   15300:	ldrb	r0, [r0]
   15304:	cmp	r0, #1
   15308:	bne	15324 <__assert_fail@plt+0x3d1c>
   1530c:	movw	r0, #4732	; 0x127c
   15310:	mov	r1, #1
   15314:	movt	r0, #3
   15318:	strb	r1, [r0]
   1531c:	bl	15698 <__assert_fail@plt+0x4090>
   15320:	b	15344 <__assert_fail@plt+0x3d3c>
   15324:	movw	r0, #4625	; 0x1211
   15328:	movt	r0, #3
   1532c:	ldrb	r0, [r0]
   15330:	cmp	r0, #1
   15334:	movweq	r0, #4757	; 0x1295
   15338:	moveq	r1, #1
   1533c:	movteq	r0, #3
   15340:	strbeq	r1, [r0]
   15344:	movw	r0, #4606	; 0x11fe
   15348:	movt	r0, #3
   1534c:	ldrb	r0, [r0]
   15350:	cmp	r0, #0
   15354:	beq	15364 <__assert_fail@plt+0x3d5c>
   15358:	mov	r0, #2
   1535c:	str	r0, [r4, #8]
   15360:	b	153ac <__assert_fail@plt+0x3da4>
   15364:	movw	r0, #4456	; 0x1168
   15368:	movt	r0, #3
   1536c:	ldr	r0, [r0]
   15370:	cmp	r0, #0
   15374:	beq	153ac <__assert_fail@plt+0x3da4>
   15378:	movw	r1, #4585	; 0x11e9
   1537c:	movt	r1, #3
   15380:	ldrb	r2, [r1]
   15384:	mov	r1, #1
   15388:	cmp	r2, #0
   1538c:	movw	r2, #4676	; 0x1244
   15390:	movt	r2, #3
   15394:	movwne	r1, #2
   15398:	ldr	r2, [r2]
   1539c:	add	r2, r2, #8
   153a0:	str	r1, [r2], #40	; 0x28
   153a4:	subs	r0, r0, #1
   153a8:	bne	153a0 <__assert_fail@plt+0x3d98>
   153ac:	mov	r0, #0
   153b0:	str	r0, [r4, #28]
   153b4:	movw	r0, #4680	; 0x1248
   153b8:	movt	r0, #3
   153bc:	ldr	r1, [r0]
   153c0:	sub	r1, r1, #1
   153c4:	str	r1, [r0]
   153c8:	mov	r9, #1
   153cc:	b	1556c <__assert_fail@plt+0x3f64>
   153d0:	cmp	sl, r2
   153d4:	ble	15430 <__assert_fail@plt+0x3e28>
   153d8:	movw	r7, #4564	; 0x11d4
   153dc:	sub	r0, r0, r2
   153e0:	mov	r9, #32
   153e4:	sub	r5, r0, r1
   153e8:	movt	r7, #3
   153ec:	ldr	r0, [r7]
   153f0:	ldr	r1, [r0, #20]
   153f4:	ldr	r2, [r0, #24]
   153f8:	cmp	r1, r2
   153fc:	bcs	15418 <__assert_fail@plt+0x3e10>
   15400:	add	r2, r1, #1
   15404:	str	r2, [r0, #20]
   15408:	strb	r9, [r1]
   1540c:	subs	r5, r5, #1
   15410:	bne	153ec <__assert_fail@plt+0x3de4>
   15414:	b	15430 <__assert_fail@plt+0x3e28>
   15418:	mov	r1, #32
   1541c:	bl	1156c <__overflow@plt>
   15420:	movw	ip, #4744	; 0x1288
   15424:	movt	ip, #3
   15428:	subs	r5, r5, #1
   1542c:	bne	153ec <__assert_fail@plt+0x3de4>
   15430:	str	sl, [ip]
   15434:	movw	sl, #4752	; 0x1290
   15438:	mov	r0, #0
   1543c:	movt	sl, #3
   15440:	str	r0, [r8]
   15444:	movw	r0, #4617	; 0x1209
   15448:	ldr	r5, [sp, #4]
   1544c:	movt	r0, #3
   15450:	ldrb	r0, [r0]
   15454:	cmp	r0, #1
   15458:	bleq	15848 <__assert_fail@plt+0x4240>
   1545c:	ldrb	r0, [r4, #36]	; 0x24
   15460:	cmp	r0, #0
   15464:	movne	r0, r4
   15468:	blne	15c60 <__assert_fail@plt+0x4658>
   1546c:	movw	r0, #4759	; 0x1297
   15470:	mov	r1, #0
   15474:	mov	r9, #1
   15478:	cmp	r5, #10
   1547c:	movt	r0, #3
   15480:	strb	r1, [r0]
   15484:	beq	1556c <__assert_fail@plt+0x3f64>
   15488:	cmp	r6, #0
   1548c:	beq	154b0 <__assert_fail@plt+0x3ea8>
   15490:	movw	r0, #4668	; 0x123c
   15494:	movt	r0, #3
   15498:	ldr	r5, [r0]
   1549c:	ldrb	r0, [r5], #1
   154a0:	ldr	r1, [r4, #16]
   154a4:	blx	r1
   154a8:	subs	r6, r6, #1
   154ac:	bne	1549c <__assert_fail@plt+0x3e94>
   154b0:	movw	r6, #4660	; 0x1234
   154b4:	movw	r8, #4668	; 0x123c
   154b8:	movt	r6, #3
   154bc:	movt	r8, #3
   154c0:	ldr	r0, [r4]
   154c4:	ldmib	r0, {r1, r2}
   154c8:	cmp	r1, r2
   154cc:	bcs	1554c <__assert_fail@plt+0x3f44>
   154d0:	add	r2, r1, #1
   154d4:	str	r2, [r0, #4]
   154d8:	ldrb	r0, [r1]
   154dc:	cmn	r0, #1
   154e0:	beq	15558 <__assert_fail@plt+0x3f50>
   154e4:	cmp	r0, #10
   154e8:	beq	1556c <__assert_fail@plt+0x3f64>
   154ec:	cmp	r0, #12
   154f0:	beq	15578 <__assert_fail@plt+0x3f70>
   154f4:	ldr	r7, [sl]
   154f8:	uxtb	r0, r0
   154fc:	bl	15a8c <__assert_fail@plt+0x4484>
   15500:	mov	r5, r0
   15504:	movw	r0, #4627	; 0x1213
   15508:	movt	r0, #3
   1550c:	ldrb	r0, [r0]
   15510:	cmp	r0, #1
   15514:	bne	15528 <__assert_fail@plt+0x3f20>
   15518:	ldr	r0, [r6]
   1551c:	ldr	r1, [sl]
   15520:	cmp	r1, r0
   15524:	bgt	15564 <__assert_fail@plt+0x3f5c>
   15528:	cmp	r5, #0
   1552c:	beq	154c0 <__assert_fail@plt+0x3eb8>
   15530:	ldr	r7, [r8]
   15534:	ldrb	r0, [r7], #1
   15538:	ldr	r1, [r4, #16]
   1553c:	blx	r1
   15540:	subs	r5, r5, #1
   15544:	bne	15534 <__assert_fail@plt+0x3f2c>
   15548:	b	154c0 <__assert_fail@plt+0x3eb8>
   1554c:	bl	11560 <__uflow@plt>
   15550:	cmn	r0, #1
   15554:	bne	154e4 <__assert_fail@plt+0x3edc>
   15558:	mov	r0, r4
   1555c:	bl	14a84 <__assert_fail@plt+0x347c>
   15560:	b	1556c <__assert_fail@plt+0x3f64>
   15564:	str	r7, [sl]
   15568:	mov	r9, #0
   1556c:	mov	r0, r9
   15570:	sub	sp, fp, #28
   15574:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15578:	ldr	r0, [r4]
   1557c:	ldmib	r0, {r1, r2}
   15580:	cmp	r1, r2
   15584:	bcs	15688 <__assert_fail@plt+0x4080>
   15588:	add	r2, r1, #1
   1558c:	str	r2, [r0, #4]
   15590:	ldrb	r0, [r1]
   15594:	cmp	r0, #10
   15598:	beq	155a4 <__assert_fail@plt+0x3f9c>
   1559c:	ldr	r1, [r4]
   155a0:	bl	114dc <ungetc@plt>
   155a4:	movw	r0, #4625	; 0x1211
   155a8:	movt	r0, #3
   155ac:	ldrb	r0, [r0]
   155b0:	cmp	r0, #1
   155b4:	movweq	r0, #4757	; 0x1295
   155b8:	moveq	r1, #1
   155bc:	movteq	r0, #3
   155c0:	strbeq	r1, [r0]
   155c4:	movw	r0, #4606	; 0x11fe
   155c8:	movt	r0, #3
   155cc:	ldrb	r0, [r0]
   155d0:	cmp	r0, #0
   155d4:	beq	155e4 <__assert_fail@plt+0x3fdc>
   155d8:	mov	r0, #2
   155dc:	str	r0, [r4, #8]
   155e0:	b	1562c <__assert_fail@plt+0x4024>
   155e4:	movw	r0, #4456	; 0x1168
   155e8:	movt	r0, #3
   155ec:	ldr	r0, [r0]
   155f0:	cmp	r0, #0
   155f4:	beq	1562c <__assert_fail@plt+0x4024>
   155f8:	movw	r1, #4585	; 0x11e9
   155fc:	movt	r1, #3
   15600:	ldrb	r2, [r1]
   15604:	mov	r1, #1
   15608:	cmp	r2, #0
   1560c:	movw	r2, #4676	; 0x1244
   15610:	movt	r2, #3
   15614:	movwne	r1, #2
   15618:	ldr	r2, [r2]
   1561c:	add	r2, r2, #8
   15620:	str	r1, [r2], #40	; 0x28
   15624:	subs	r0, r0, #1
   15628:	bne	15620 <__assert_fail@plt+0x4018>
   1562c:	mov	r0, #0
   15630:	str	r0, [r4, #28]
   15634:	movw	r0, #4680	; 0x1248
   15638:	movt	r0, #3
   1563c:	ldr	r1, [r0]
   15640:	sub	r1, r1, #1
   15644:	str	r1, [r0]
   15648:	b	1556c <__assert_fail@plt+0x3f64>
   1564c:	bl	11560 <__uflow@plt>
   15650:	mov	r5, r0
   15654:	b	14f44 <__assert_fail@plt+0x393c>
   15658:	bl	11560 <__uflow@plt>
   1565c:	cmp	r0, #10
   15660:	bne	152cc <__assert_fail@plt+0x3cc4>
   15664:	b	152d4 <__assert_fail@plt+0x3ccc>
   15668:	bl	11560 <__uflow@plt>
   1566c:	mov	r5, r0
   15670:	cmp	r5, #10
   15674:	beq	14f88 <__assert_fail@plt+0x3980>
   15678:	b	14fa4 <__assert_fail@plt+0x399c>
   1567c:	bl	11560 <__uflow@plt>
   15680:	mov	r5, r0
   15684:	b	14fa4 <__assert_fail@plt+0x399c>
   15688:	bl	11560 <__uflow@plt>
   1568c:	cmp	r0, #10
   15690:	bne	1559c <__assert_fail@plt+0x3f94>
   15694:	b	155a4 <__assert_fail@plt+0x3f9c>
   15698:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1569c:	add	fp, sp, #24
   156a0:	sub	sp, sp, #312	; 0x138
   156a4:	movw	r4, #4744	; 0x1288
   156a8:	mov	r0, #0
   156ac:	movw	r8, #4612	; 0x1204
   156b0:	movt	r4, #3
   156b4:	movt	r8, #3
   156b8:	str	r0, [r4]
   156bc:	movw	r0, #4604	; 0x11fc
   156c0:	ldr	r9, [r8]
   156c4:	movt	r0, #3
   156c8:	ldrb	r0, [r0]
   156cc:	cmp	r0, #0
   156d0:	beq	156e0 <__assert_fail@plt+0x40d8>
   156d4:	movw	r4, #4740	; 0x1284
   156d8:	movt	r4, #3
   156dc:	b	15734 <__assert_fail@plt+0x412c>
   156e0:	cmp	r9, #1
   156e4:	blt	15734 <__assert_fail@plt+0x412c>
   156e8:	movw	r7, #4564	; 0x11d4
   156ec:	mov	r5, #32
   156f0:	mov	r6, r9
   156f4:	movt	r7, #3
   156f8:	ldr	r0, [r7]
   156fc:	ldr	r1, [r0, #20]
   15700:	ldr	r2, [r0, #24]
   15704:	cmp	r1, r2
   15708:	bcs	15724 <__assert_fail@plt+0x411c>
   1570c:	add	r2, r1, #1
   15710:	str	r2, [r0, #20]
   15714:	strb	r5, [r1]
   15718:	subs	r6, r6, #1
   1571c:	bne	156f8 <__assert_fail@plt+0x40f0>
   15720:	b	15734 <__assert_fail@plt+0x412c>
   15724:	mov	r1, #32
   15728:	bl	1156c <__overflow@plt>
   1572c:	subs	r6, r6, #1
   15730:	bne	156f8 <__assert_fail@plt+0x40f0>
   15734:	str	r9, [r4]
   15738:	bl	1597c <__assert_fail@plt+0x4374>
   1573c:	movw	r4, #4640	; 0x1220
   15740:	movt	r4, #3
   15744:	ldrd	r0, [r4]
   15748:	orrs	r0, r0, r1
   1574c:	beq	15824 <__assert_fail@plt+0x421c>
   15750:	movw	r1, #65190	; 0xfea6
   15754:	mov	r0, #0
   15758:	mov	r2, #5
   1575c:	mov	r6, #0
   15760:	movt	r1, #1
   15764:	bl	1138c <dcgettext@plt>
   15768:	mov	r3, r0
   1576c:	ldrd	r0, [r4]
   15770:	add	r4, sp, #32
   15774:	mov	r2, #276	; 0x114
   15778:	stm	sp, {r0, r1}
   1577c:	mov	r0, r4
   15780:	mov	r1, #1
   15784:	bl	114f4 <__sprintf_chk@plt>
   15788:	movw	r0, #4704	; 0x1260
   1578c:	mov	r1, #0
   15790:	movt	r0, #3
   15794:	ldr	r5, [r0]
   15798:	mov	r0, r4
   1579c:	bl	16440 <__assert_fail@plt+0x4e38>
   157a0:	movw	r1, #4696	; 0x1258
   157a4:	movw	r3, #4700	; 0x125c
   157a8:	sub	r0, r5, r0
   157ac:	movw	r5, #65109	; 0xfe55
   157b0:	ldr	r2, [r8]
   157b4:	movt	r1, #3
   157b8:	movt	r3, #3
   157bc:	bic	r0, r0, r0, asr #31
   157c0:	movt	r5, #1
   157c4:	ldr	r1, [r1]
   157c8:	ldr	r3, [r3]
   157cc:	sub	r7, r0, r0, lsr #1
   157d0:	lsr	r0, r0, #1
   157d4:	str	r1, [sp]
   157d8:	stmib	sp, {r0, r5}
   157dc:	movw	r1, #65200	; 0xfeb0
   157e0:	str	r3, [sp, #12]
   157e4:	movw	r3, #65108	; 0xfe54
   157e8:	mov	r0, #1
   157ec:	str	r7, [sp, #16]
   157f0:	str	r5, [sp, #20]
   157f4:	str	r4, [sp, #24]
   157f8:	movt	r1, #1
   157fc:	movt	r3, #1
   15800:	bl	11518 <__printf_chk@plt>
   15804:	movw	r0, #4733	; 0x127d
   15808:	movt	r0, #3
   1580c:	strb	r6, [r0]
   15810:	movw	r0, #4744	; 0x1288
   15814:	movt	r0, #3
   15818:	str	r6, [r0]
   1581c:	sub	sp, fp, #24
   15820:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15824:	movw	r1, #65169	; 0xfe91
   15828:	mov	r0, #0
   1582c:	mov	r2, #5
   15830:	movt	r1, #1
   15834:	bl	1138c <dcgettext@plt>
   15838:	mov	r2, r0
   1583c:	mov	r0, #1
   15840:	mov	r1, #0
   15844:	bl	11428 <error@plt>
   15848:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1584c:	add	fp, sp, #28
   15850:	sub	sp, sp, #4
   15854:	movw	r0, #4748	; 0x128c
   15858:	movt	r0, #3
   1585c:	ldr	r0, [r0]
   15860:	cmp	r0, #1
   15864:	blt	1595c <__assert_fail@plt+0x4354>
   15868:	movw	r0, #4440	; 0x1158
   1586c:	movw	r6, #4740	; 0x1284
   15870:	movw	r7, #4564	; 0x11d4
   15874:	movw	r4, #4744	; 0x1288
   15878:	movt	r0, #3
   1587c:	movt	r6, #3
   15880:	movt	r7, #3
   15884:	movt	r4, #3
   15888:	ldr	r8, [r0]
   1588c:	movw	r0, #4620	; 0x120c
   15890:	movt	r0, #3
   15894:	ldr	sl, [r0]
   15898:	subs	r0, sl, #1
   1589c:	blt	158ac <__assert_fail@plt+0x42a4>
   158a0:	mov	r5, sl
   158a4:	mov	r9, r8
   158a8:	b	158bc <__assert_fail@plt+0x42b4>
   158ac:	mov	sl, r0
   158b0:	b	1592c <__assert_fail@plt+0x4324>
   158b4:	bl	1156c <__overflow@plt>
   158b8:	b	15904 <__assert_fail@plt+0x42fc>
   158bc:	ldrb	r1, [r9]
   158c0:	ldr	r0, [r6]
   158c4:	cmp	r1, #32
   158c8:	bne	158d4 <__assert_fail@plt+0x42cc>
   158cc:	mov	r1, r6
   158d0:	b	1590c <__assert_fail@plt+0x4304>
   158d4:	cmp	r0, #1
   158d8:	blt	158e4 <__assert_fail@plt+0x42dc>
   158dc:	bl	1597c <__assert_fail@plt+0x4374>
   158e0:	ldrb	r1, [r9]
   158e4:	ldr	r0, [r7]
   158e8:	ldr	r2, [r0, #20]
   158ec:	ldr	r3, [r0, #24]
   158f0:	cmp	r2, r3
   158f4:	bcs	158b4 <__assert_fail@plt+0x42ac>
   158f8:	add	r3, r2, #1
   158fc:	str	r3, [r0, #20]
   15900:	strb	r1, [r2]
   15904:	ldr	r0, [r4]
   15908:	mov	r1, r4
   1590c:	sub	r5, r5, #1
   15910:	add	r0, r0, #1
   15914:	add	r9, r9, #1
   15918:	cmp	r5, #0
   1591c:	str	r0, [r1]
   15920:	bgt	158bc <__assert_fail@plt+0x42b4>
   15924:	add	r8, r8, sl
   15928:	mvn	sl, #0
   1592c:	ldr	r0, [r6]
   15930:	cmp	r0, #1
   15934:	blge	1597c <__assert_fail@plt+0x4374>
   15938:	movw	r0, #4748	; 0x128c
   1593c:	movt	r0, #3
   15940:	mov	r1, r0
   15944:	ldr	r0, [r0]
   15948:	subs	r0, r0, #1
   1594c:	str	r0, [r1]
   15950:	bgt	15898 <__assert_fail@plt+0x4290>
   15954:	sub	sp, fp, #28
   15958:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1595c:	movw	r0, #4740	; 0x1284
   15960:	movt	r0, #3
   15964:	ldr	r0, [r0]
   15968:	cmp	r0, #1
   1596c:	blt	15954 <__assert_fail@plt+0x434c>
   15970:	sub	sp, fp, #28
   15974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15978:	b	1597c <__assert_fail@plt+0x4374>
   1597c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15980:	add	fp, sp, #28
   15984:	sub	sp, sp, #4
   15988:	movw	r8, #4744	; 0x1288
   1598c:	movw	r9, #4740	; 0x1284
   15990:	movt	r8, #3
   15994:	movt	r9, #3
   15998:	ldr	r1, [r9]
   1599c:	ldr	r0, [r8]
   159a0:	add	r6, r1, r0
   159a4:	cmp	r1, #2
   159a8:	blt	15a24 <__assert_fail@plt+0x441c>
   159ac:	movw	r7, #4420	; 0x1144
   159b0:	movw	sl, #4416	; 0x1140
   159b4:	movw	r5, #4564	; 0x11d4
   159b8:	movt	r7, #3
   159bc:	movt	sl, #3
   159c0:	movt	r5, #3
   159c4:	ldr	r1, [r7]
   159c8:	sdiv	r2, r0, r1
   159cc:	mul	r2, r2, r1
   159d0:	sub	r2, r2, r0
   159d4:	add	r1, r1, r2
   159d8:	add	r4, r1, r0
   159dc:	cmp	r6, r4
   159e0:	blt	15a24 <__assert_fail@plt+0x441c>
   159e4:	ldr	r0, [r5]
   159e8:	ldrb	r1, [sl]
   159ec:	ldr	r2, [r0, #20]
   159f0:	ldr	r3, [r0, #24]
   159f4:	cmp	r2, r3
   159f8:	bcs	15a1c <__assert_fail@plt+0x4414>
   159fc:	add	r3, r2, #1
   15a00:	str	r3, [r0, #20]
   15a04:	strb	r1, [r2]
   15a08:	sub	r0, r6, r4
   15a0c:	cmp	r0, #1
   15a10:	mov	r0, r4
   15a14:	bgt	159c4 <__assert_fail@plt+0x43bc>
   15a18:	b	15a24 <__assert_fail@plt+0x441c>
   15a1c:	bl	1156c <__overflow@plt>
   15a20:	b	15a08 <__assert_fail@plt+0x4400>
   15a24:	cmp	r0, r6
   15a28:	bge	15a78 <__assert_fail@plt+0x4470>
   15a2c:	movw	r5, #4564	; 0x11d4
   15a30:	sub	r4, r6, r0
   15a34:	mov	r7, #32
   15a38:	movt	r5, #3
   15a3c:	ldr	r0, [r5]
   15a40:	ldr	r1, [r0, #20]
   15a44:	ldr	r2, [r0, #24]
   15a48:	cmp	r1, r2
   15a4c:	bcs	15a68 <__assert_fail@plt+0x4460>
   15a50:	add	r2, r1, #1
   15a54:	str	r2, [r0, #20]
   15a58:	strb	r7, [r1]
   15a5c:	subs	r4, r4, #1
   15a60:	bne	15a3c <__assert_fail@plt+0x4434>
   15a64:	b	15a78 <__assert_fail@plt+0x4470>
   15a68:	mov	r1, #32
   15a6c:	bl	1156c <__overflow@plt>
   15a70:	subs	r4, r4, #1
   15a74:	bne	15a3c <__assert_fail@plt+0x4434>
   15a78:	mov	r0, #0
   15a7c:	str	r6, [r8]
   15a80:	str	r0, [r9]
   15a84:	sub	sp, fp, #28
   15a88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a8c:	push	{r4, r5, r6, r7, fp, lr}
   15a90:	add	fp, sp, #16
   15a94:	sub	sp, sp, #8
   15a98:	mov	r6, r0
   15a9c:	movw	r0, #4668	; 0x123c
   15aa0:	movt	r0, #3
   15aa4:	ldr	r5, [r0]
   15aa8:	movw	r0, #4408	; 0x1138
   15aac:	movt	r0, #3
   15ab0:	ldrb	r1, [r0]
   15ab4:	movw	r0, #4412	; 0x113c
   15ab8:	movt	r0, #3
   15abc:	ldr	r0, [r0]
   15ac0:	cmp	r1, r6
   15ac4:	movne	r0, #8
   15ac8:	cmp	r6, #9
   15acc:	cmpne	r1, r6
   15ad0:	bne	15b24 <__assert_fail@plt+0x451c>
   15ad4:	movw	r1, #4752	; 0x1290
   15ad8:	movt	r1, #3
   15adc:	ldr	r7, [r1]
   15ae0:	sdiv	r1, r7, r0
   15ae4:	mul	r1, r1, r0
   15ae8:	sub	r1, r1, r7
   15aec:	add	r4, r0, r1
   15af0:	movw	r0, #4596	; 0x11f4
   15af4:	movt	r0, #3
   15af8:	ldrb	r0, [r0]
   15afc:	cmp	r0, #1
   15b00:	bne	15b94 <__assert_fail@plt+0x458c>
   15b04:	cmp	r4, #0
   15b08:	beq	15c34 <__assert_fail@plt+0x462c>
   15b0c:	mov	r0, r5
   15b10:	mov	r1, #32
   15b14:	mov	r2, r4
   15b18:	bl	1150c <memset@plt>
   15b1c:	mov	r0, r4
   15b20:	b	15b9c <__assert_fail@plt+0x4594>
   15b24:	bl	114a0 <__ctype_b_loc@plt>
   15b28:	ldr	r0, [r0]
   15b2c:	add	r0, r0, r6, lsl #1
   15b30:	ldrb	r0, [r0, #1]
   15b34:	tst	r0, #64	; 0x40
   15b38:	bne	15bb8 <__assert_fail@plt+0x45b0>
   15b3c:	movw	r0, #4626	; 0x1212
   15b40:	movt	r0, #3
   15b44:	ldrb	r0, [r0]
   15b48:	cmp	r0, #1
   15b4c:	bne	15bfc <__assert_fail@plt+0x45f4>
   15b50:	movw	r3, #65221	; 0xfec5
   15b54:	mov	r0, #92	; 0x5c
   15b58:	mov	r1, #1
   15b5c:	mov	r2, #4
   15b60:	mov	r4, #4
   15b64:	strb	r0, [r5]
   15b68:	add	r0, sp, #4
   15b6c:	movt	r3, #1
   15b70:	str	r6, [sp]
   15b74:	bl	114f4 <__sprintf_chk@plt>
   15b78:	ldrb	r0, [sp, #4]
   15b7c:	strb	r0, [r5, #1]
   15b80:	ldrb	r0, [sp, #5]
   15b84:	strb	r0, [r5, #2]
   15b88:	ldrb	r0, [sp, #6]
   15b8c:	strb	r0, [r5, #3]
   15b90:	b	15bc0 <__assert_fail@plt+0x45b8>
   15b94:	strb	r6, [r5]
   15b98:	mov	r0, #1
   15b9c:	mov	r1, #0
   15ba0:	cmn	r4, #1
   15ba4:	bgt	15bd8 <__assert_fail@plt+0x45d0>
   15ba8:	cmp	r7, #0
   15bac:	bne	15bd8 <__assert_fail@plt+0x45d0>
   15bb0:	mov	r0, #0
   15bb4:	b	15be8 <__assert_fail@plt+0x45e0>
   15bb8:	mov	r4, #1
   15bbc:	strb	r6, [r5]
   15bc0:	movw	r0, #4752	; 0x1290
   15bc4:	movt	r0, #3
   15bc8:	ldr	r7, [r0]
   15bcc:	mov	r0, r4
   15bd0:	add	r1, r7, r4
   15bd4:	b	15be8 <__assert_fail@plt+0x45e0>
   15bd8:	rsb	r2, r4, #0
   15bdc:	cmp	r7, r2
   15be0:	cmple	r4, #0
   15be4:	addge	r1, r7, r4
   15be8:	movw	r2, #4752	; 0x1290
   15bec:	movt	r2, #3
   15bf0:	str	r1, [r2]
   15bf4:	sub	sp, fp, #16
   15bf8:	pop	{r4, r5, r6, r7, fp, pc}
   15bfc:	movw	r0, #4587	; 0x11eb
   15c00:	movt	r0, #3
   15c04:	ldrb	r0, [r0]
   15c08:	cmp	r0, #1
   15c0c:	bne	15c40 <__assert_fail@plt+0x4638>
   15c10:	sxtb	r0, r6
   15c14:	cmp	r0, #0
   15c18:	blt	15b50 <__assert_fail@plt+0x4548>
   15c1c:	mov	r0, #94	; 0x5e
   15c20:	mov	r4, #2
   15c24:	strb	r0, [r5]
   15c28:	eor	r0, r6, #64	; 0x40
   15c2c:	strb	r0, [r5, #1]
   15c30:	b	15bc0 <__assert_fail@plt+0x45b8>
   15c34:	mov	r4, #0
   15c38:	mov	r0, #0
   15c3c:	b	15bd0 <__assert_fail@plt+0x45c8>
   15c40:	movw	r0, #4752	; 0x1290
   15c44:	strb	r6, [r5]
   15c48:	mov	r4, #0
   15c4c:	cmp	r6, #8
   15c50:	movt	r0, #3
   15c54:	mvneq	r4, #0
   15c58:	ldr	r7, [r0]
   15c5c:	b	15b98 <__assert_fail@plt+0x4590>
   15c60:	push	{r4, r5, r6, r7, fp, lr}
   15c64:	add	fp, sp, #16
   15c68:	sub	sp, sp, #8
   15c6c:	movw	r5, #4432	; 0x1150
   15c70:	movw	r7, #4648	; 0x1228
   15c74:	movw	r6, #4664	; 0x1238
   15c78:	mov	r4, r0
   15c7c:	movw	r3, #65226	; 0xfeca
   15c80:	movt	r5, #3
   15c84:	movt	r7, #3
   15c88:	movt	r6, #3
   15c8c:	movt	r3, #1
   15c90:	ldr	r1, [r5]
   15c94:	ldr	r2, [r7]
   15c98:	ldr	r0, [r6]
   15c9c:	stm	sp, {r1, r2}
   15ca0:	mov	r1, #1
   15ca4:	mvn	r2, #0
   15ca8:	bl	114f4 <__sprintf_chk@plt>
   15cac:	ldr	r1, [r7]
   15cb0:	add	r1, r1, #1
   15cb4:	str	r1, [r7]
   15cb8:	ldr	r7, [r5]
   15cbc:	cmp	r7, #1
   15cc0:	blt	15ce0 <__assert_fail@plt+0x46d8>
   15cc4:	ldr	r1, [r6]
   15cc8:	add	r6, r1, r0
   15ccc:	ldrb	r0, [r6, -r7]
   15cd0:	ldr	r1, [r4, #16]
   15cd4:	blx	r1
   15cd8:	subs	r7, r7, #1
   15cdc:	bgt	15ccc <__assert_fail@plt+0x46c4>
   15ce0:	movw	r0, #4456	; 0x1168
   15ce4:	movt	r0, #3
   15ce8:	ldr	r0, [r0]
   15cec:	cmp	r0, #2
   15cf0:	blt	15d48 <__assert_fail@plt+0x4740>
   15cf4:	movw	r0, #4428	; 0x114c
   15cf8:	movt	r0, #3
   15cfc:	ldrb	r0, [r0]
   15d00:	cmp	r0, #9
   15d04:	bne	15d9c <__assert_fail@plt+0x4794>
   15d08:	movw	r1, #4656	; 0x1230
   15d0c:	ldr	r0, [r5]
   15d10:	movt	r1, #3
   15d14:	ldr	r1, [r1]
   15d18:	sub	r2, r1, r0
   15d1c:	cmp	r2, #1
   15d20:	blt	15da4 <__assert_fail@plt+0x479c>
   15d24:	add	r1, r1, #1
   15d28:	sub	r5, r1, r0
   15d2c:	ldr	r1, [r4, #16]
   15d30:	mov	r0, #32
   15d34:	blx	r1
   15d38:	sub	r5, r5, #1
   15d3c:	cmp	r5, #1
   15d40:	bgt	15d2c <__assert_fail@plt+0x4724>
   15d44:	b	15da4 <__assert_fail@plt+0x479c>
   15d48:	movw	r5, #4428	; 0x114c
   15d4c:	ldr	r1, [r4, #16]
   15d50:	movt	r5, #3
   15d54:	ldrb	r0, [r5]
   15d58:	blx	r1
   15d5c:	ldrb	r0, [r5]
   15d60:	cmp	r0, #9
   15d64:	bne	15da4 <__assert_fail@plt+0x479c>
   15d68:	movw	r0, #4744	; 0x1288
   15d6c:	movw	r2, #4420	; 0x1144
   15d70:	movt	r2, #3
   15d74:	movt	r0, #3
   15d78:	ldr	r1, [r0]
   15d7c:	ldr	r2, [r2]
   15d80:	sdiv	r7, r1, r2
   15d84:	add	r3, r2, r1
   15d88:	mul	r2, r7, r2
   15d8c:	sub	r1, r2, r1
   15d90:	add	r1, r3, r1
   15d94:	str	r1, [r0]
   15d98:	b	15da4 <__assert_fail@plt+0x479c>
   15d9c:	ldr	r1, [r4, #16]
   15da0:	blx	r1
   15da4:	movw	r0, #4627	; 0x1213
   15da8:	movt	r0, #3
   15dac:	ldrb	r0, [r0]
   15db0:	cmp	r0, #1
   15db4:	bne	15dec <__assert_fail@plt+0x47e4>
   15db8:	movw	r0, #4606	; 0x11fe
   15dbc:	movt	r0, #3
   15dc0:	ldrb	r0, [r0]
   15dc4:	cmp	r0, #0
   15dc8:	bne	15dec <__assert_fail@plt+0x47e4>
   15dcc:	movw	r0, #4656	; 0x1230
   15dd0:	movw	r1, #4752	; 0x1290
   15dd4:	movt	r0, #3
   15dd8:	movt	r1, #3
   15ddc:	ldr	r0, [r0]
   15de0:	ldr	r2, [r1]
   15de4:	add	r0, r2, r0
   15de8:	str	r0, [r1]
   15dec:	sub	sp, fp, #16
   15df0:	pop	{r4, r5, r6, r7, fp, pc}
   15df4:	push	{r4, r5, fp, lr}
   15df8:	add	fp, sp, #8
   15dfc:	ldr	r5, [r0]
   15e00:	mov	r4, r0
   15e04:	ldmib	r5, {r0, r1}
   15e08:	cmp	r0, r1
   15e0c:	bcs	15e38 <__assert_fail@plt+0x4830>
   15e10:	add	r1, r0, #1
   15e14:	str	r1, [r5, #4]
   15e18:	ldrb	r0, [r0]
   15e1c:	cmn	r0, #1
   15e20:	beq	15e48 <__assert_fail@plt+0x4840>
   15e24:	cmp	r0, #10
   15e28:	popeq	{r4, r5, fp, pc}
   15e2c:	cmp	r0, #12
   15e30:	bne	15e04 <__assert_fail@plt+0x47fc>
   15e34:	b	15e54 <__assert_fail@plt+0x484c>
   15e38:	mov	r0, r5
   15e3c:	bl	11560 <__uflow@plt>
   15e40:	cmn	r0, #1
   15e44:	bne	15e24 <__assert_fail@plt+0x481c>
   15e48:	mov	r0, r4
   15e4c:	pop	{r4, r5, fp, lr}
   15e50:	b	14a84 <__assert_fail@plt+0x347c>
   15e54:	ldmib	r5, {r0, r1}
   15e58:	cmp	r0, r1
   15e5c:	bcs	15f24 <__assert_fail@plt+0x491c>
   15e60:	add	r1, r0, #1
   15e64:	str	r1, [r5, #4]
   15e68:	ldrb	r0, [r0]
   15e6c:	cmp	r0, #10
   15e70:	beq	15e7c <__assert_fail@plt+0x4874>
   15e74:	mov	r1, r5
   15e78:	bl	114dc <ungetc@plt>
   15e7c:	movw	r0, #4625	; 0x1211
   15e80:	movt	r0, #3
   15e84:	ldrb	r0, [r0]
   15e88:	cmp	r0, #1
   15e8c:	movweq	r0, #4757	; 0x1295
   15e90:	moveq	r1, #1
   15e94:	movteq	r0, #3
   15e98:	strbeq	r1, [r0]
   15e9c:	movw	r0, #4606	; 0x11fe
   15ea0:	movt	r0, #3
   15ea4:	ldrb	r0, [r0]
   15ea8:	cmp	r0, #0
   15eac:	beq	15ebc <__assert_fail@plt+0x48b4>
   15eb0:	mov	r0, #2
   15eb4:	str	r0, [r4, #8]
   15eb8:	b	15f04 <__assert_fail@plt+0x48fc>
   15ebc:	movw	r0, #4456	; 0x1168
   15ec0:	movt	r0, #3
   15ec4:	ldr	r0, [r0]
   15ec8:	cmp	r0, #0
   15ecc:	beq	15f04 <__assert_fail@plt+0x48fc>
   15ed0:	movw	r1, #4585	; 0x11e9
   15ed4:	movt	r1, #3
   15ed8:	ldrb	r2, [r1]
   15edc:	mov	r1, #1
   15ee0:	cmp	r2, #0
   15ee4:	movw	r2, #4676	; 0x1244
   15ee8:	movt	r2, #3
   15eec:	movwne	r1, #2
   15ef0:	ldr	r2, [r2]
   15ef4:	add	r2, r2, #8
   15ef8:	str	r1, [r2], #40	; 0x28
   15efc:	subs	r0, r0, #1
   15f00:	bne	15ef8 <__assert_fail@plt+0x48f0>
   15f04:	mov	r0, #0
   15f08:	str	r0, [r4, #28]
   15f0c:	movw	r0, #4680	; 0x1248
   15f10:	movt	r0, #3
   15f14:	ldr	r1, [r0]
   15f18:	sub	r1, r1, #1
   15f1c:	str	r1, [r0]
   15f20:	pop	{r4, r5, fp, pc}
   15f24:	mov	r0, r5
   15f28:	bl	11560 <__uflow@plt>
   15f2c:	cmp	r0, #10
   15f30:	bne	15e74 <__assert_fail@plt+0x486c>
   15f34:	b	15e7c <__assert_fail@plt+0x4874>
   15f38:	movw	r1, #4760	; 0x1298
   15f3c:	movt	r1, #3
   15f40:	str	r0, [r1]
   15f44:	bx	lr
   15f48:	movw	r1, #4764	; 0x129c
   15f4c:	movt	r1, #3
   15f50:	strb	r0, [r1]
   15f54:	bx	lr
   15f58:	push	{r4, r5, r6, sl, fp, lr}
   15f5c:	add	fp, sp, #16
   15f60:	sub	sp, sp, #8
   15f64:	movw	r0, #4564	; 0x11d4
   15f68:	movt	r0, #3
   15f6c:	ldr	r0, [r0]
   15f70:	bl	1e584 <__assert_fail@plt+0xcf7c>
   15f74:	cmp	r0, #0
   15f78:	beq	15fa0 <__assert_fail@plt+0x4998>
   15f7c:	movw	r0, #4764	; 0x129c
   15f80:	movt	r0, #3
   15f84:	ldrb	r0, [r0]
   15f88:	cmp	r0, #0
   15f8c:	beq	15fc0 <__assert_fail@plt+0x49b8>
   15f90:	bl	114e8 <__errno_location@plt>
   15f94:	ldr	r0, [r0]
   15f98:	cmp	r0, #32
   15f9c:	bne	15fc0 <__assert_fail@plt+0x49b8>
   15fa0:	movw	r0, #4552	; 0x11c8
   15fa4:	movt	r0, #3
   15fa8:	ldr	r0, [r0]
   15fac:	bl	1e584 <__assert_fail@plt+0xcf7c>
   15fb0:	cmp	r0, #0
   15fb4:	subeq	sp, fp, #16
   15fb8:	popeq	{r4, r5, r6, sl, fp, pc}
   15fbc:	b	16030 <__assert_fail@plt+0x4a28>
   15fc0:	movw	r1, #695	; 0x2b7
   15fc4:	mov	r0, #0
   15fc8:	mov	r2, #5
   15fcc:	movt	r1, #2
   15fd0:	bl	1138c <dcgettext@plt>
   15fd4:	mov	r4, r0
   15fd8:	movw	r0, #4760	; 0x1298
   15fdc:	movt	r0, #3
   15fe0:	ldr	r6, [r0]
   15fe4:	bl	114e8 <__errno_location@plt>
   15fe8:	ldr	r5, [r0]
   15fec:	cmp	r6, #0
   15ff0:	bne	1600c <__assert_fail@plt+0x4a04>
   15ff4:	movw	r2, #711	; 0x2c7
   15ff8:	mov	r0, #0
   15ffc:	mov	r1, r5
   16000:	mov	r3, r4
   16004:	movt	r2, #2
   16008:	b	1602c <__assert_fail@plt+0x4a24>
   1600c:	mov	r0, r6
   16010:	bl	19a48 <__assert_fail@plt+0x8440>
   16014:	movw	r2, #707	; 0x2c3
   16018:	mov	r3, r0
   1601c:	str	r4, [sp]
   16020:	mov	r0, #0
   16024:	mov	r1, r5
   16028:	movt	r2, #2
   1602c:	bl	11428 <error@plt>
   16030:	movw	r0, #4468	; 0x1174
   16034:	movt	r0, #3
   16038:	ldr	r0, [r0]
   1603c:	bl	11350 <_exit@plt>
   16040:	b	11308 <posix_fadvise64@plt>
   16044:	cmp	r0, #0
   16048:	bxeq	lr
   1604c:	push	{r4, sl, fp, lr}
   16050:	add	fp, sp, #8
   16054:	sub	sp, sp, #16
   16058:	mov	r4, r1
   1605c:	bl	11524 <fileno@plt>
   16060:	mov	r1, #0
   16064:	mov	r2, #0
   16068:	mov	r3, #0
   1606c:	str	r1, [sp]
   16070:	stmib	sp, {r1, r4}
   16074:	bl	11308 <posix_fadvise64@plt>
   16078:	sub	sp, fp, #8
   1607c:	pop	{r4, sl, fp, pc}
   16080:	push	{r4, r5, r6, sl, fp, lr}
   16084:	add	fp, sp, #16
   16088:	sub	sp, sp, #8
   1608c:	mov	r4, r0
   16090:	bl	11524 <fileno@plt>
   16094:	cmn	r0, #1
   16098:	ble	1610c <__assert_fail@plt+0x4b04>
   1609c:	mov	r0, r4
   160a0:	bl	11464 <__freading@plt>
   160a4:	cmp	r0, #0
   160a8:	beq	160d4 <__assert_fail@plt+0x4acc>
   160ac:	mov	r0, r4
   160b0:	bl	11524 <fileno@plt>
   160b4:	mov	r1, #1
   160b8:	mov	r2, #0
   160bc:	mov	r3, #0
   160c0:	str	r1, [sp]
   160c4:	bl	113f8 <lseek64@plt>
   160c8:	and	r0, r0, r1
   160cc:	cmn	r0, #1
   160d0:	beq	1610c <__assert_fail@plt+0x4b04>
   160d4:	mov	r0, r4
   160d8:	bl	1611c <__assert_fail@plt+0x4b14>
   160dc:	cmp	r0, #0
   160e0:	beq	1610c <__assert_fail@plt+0x4b04>
   160e4:	bl	114e8 <__errno_location@plt>
   160e8:	ldr	r6, [r0]
   160ec:	mov	r5, r0
   160f0:	mov	r0, r4
   160f4:	bl	1153c <fclose@plt>
   160f8:	cmp	r6, #0
   160fc:	strne	r6, [r5]
   16100:	mvnne	r0, #0
   16104:	sub	sp, fp, #16
   16108:	pop	{r4, r5, r6, sl, fp, pc}
   1610c:	mov	r0, r4
   16110:	sub	sp, fp, #16
   16114:	pop	{r4, r5, r6, sl, fp, lr}
   16118:	b	1153c <fclose@plt>
   1611c:	push	{r4, sl, fp, lr}
   16120:	add	fp, sp, #8
   16124:	sub	sp, sp, #8
   16128:	mov	r4, r0
   1612c:	cmp	r0, #0
   16130:	beq	1614c <__assert_fail@plt+0x4b44>
   16134:	mov	r0, r4
   16138:	bl	11464 <__freading@plt>
   1613c:	cmp	r0, #0
   16140:	ldrbne	r0, [r4, #1]
   16144:	tstne	r0, #1
   16148:	bne	1615c <__assert_fail@plt+0x4b54>
   1614c:	mov	r0, r4
   16150:	sub	sp, fp, #8
   16154:	pop	{r4, sl, fp, lr}
   16158:	b	11320 <fflush@plt>
   1615c:	mov	r0, #1
   16160:	mov	r2, #0
   16164:	mov	r3, #0
   16168:	str	r0, [sp]
   1616c:	mov	r0, r4
   16170:	bl	16254 <__assert_fail@plt+0x4c4c>
   16174:	b	1614c <__assert_fail@plt+0x4b44>
   16178:	push	{r4, r5, r6, r7, fp, lr}
   1617c:	add	fp, sp, #16
   16180:	mov	r5, r1
   16184:	bl	115c0 <fopen64@plt>
   16188:	mov	r4, #0
   1618c:	cmp	r0, #0
   16190:	beq	161e0 <__assert_fail@plt+0x4bd8>
   16194:	mov	r6, r0
   16198:	bl	11524 <fileno@plt>
   1619c:	cmp	r0, #2
   161a0:	movhi	r0, r6
   161a4:	pophi	{r4, r5, r6, r7, fp, pc}
   161a8:	bl	1a5c0 <__assert_fail@plt+0x8fb8>
   161ac:	cmn	r0, #1
   161b0:	ble	1620c <__assert_fail@plt+0x4c04>
   161b4:	mov	r7, r0
   161b8:	mov	r0, r6
   161bc:	bl	16080 <__assert_fail@plt+0x4a78>
   161c0:	cmp	r0, #0
   161c4:	bne	161e8 <__assert_fail@plt+0x4be0>
   161c8:	mov	r0, r7
   161cc:	mov	r1, r5
   161d0:	bl	112b4 <fdopen@plt>
   161d4:	mov	r4, r0
   161d8:	cmp	r0, #0
   161dc:	beq	161e8 <__assert_fail@plt+0x4be0>
   161e0:	mov	r0, r4
   161e4:	pop	{r4, r5, r6, r7, fp, pc}
   161e8:	bl	114e8 <__errno_location@plt>
   161ec:	ldr	r5, [r0]
   161f0:	mov	r4, r0
   161f4:	mov	r0, r7
   161f8:	bl	115fc <close@plt>
   161fc:	str	r5, [r4]
   16200:	mov	r4, #0
   16204:	mov	r0, r4
   16208:	pop	{r4, r5, r6, r7, fp, pc}
   1620c:	bl	114e8 <__errno_location@plt>
   16210:	ldr	r7, [r0]
   16214:	mov	r5, r0
   16218:	mov	r0, r6
   1621c:	bl	16080 <__assert_fail@plt+0x4a78>
   16220:	mov	r0, r4
   16224:	str	r7, [r5]
   16228:	pop	{r4, r5, r6, r7, fp, pc}
   1622c:	push	{r4, r5, r6, sl, fp, lr}
   16230:	add	fp, sp, #16
   16234:	mov	r4, r0
   16238:	bl	114e8 <__errno_location@plt>
   1623c:	ldr	r6, [r0]
   16240:	mov	r5, r0
   16244:	mov	r0, r4
   16248:	bl	11338 <free@plt>
   1624c:	str	r6, [r5]
   16250:	pop	{r4, r5, r6, sl, fp, pc}
   16254:	push	{r4, r5, r6, r7, fp, lr}
   16258:	add	fp, sp, #16
   1625c:	sub	sp, sp, #8
   16260:	mov	r4, r0
   16264:	ldr	r0, [r0, #4]
   16268:	mov	r5, r3
   1626c:	mov	r6, r2
   16270:	ldr	r1, [r4, #8]
   16274:	cmp	r1, r0
   16278:	bne	16294 <__assert_fail@plt+0x4c8c>
   1627c:	ldrd	r0, [r4, #16]
   16280:	cmp	r1, r0
   16284:	bne	16294 <__assert_fail@plt+0x4c8c>
   16288:	ldr	r0, [r4, #36]	; 0x24
   1628c:	cmp	r0, #0
   16290:	beq	162ac <__assert_fail@plt+0x4ca4>
   16294:	mov	r0, r4
   16298:	mov	r2, r6
   1629c:	mov	r3, r5
   162a0:	sub	sp, fp, #16
   162a4:	pop	{r4, r5, r6, r7, fp, lr}
   162a8:	b	11548 <fseeko64@plt>
   162ac:	ldr	r7, [fp, #8]
   162b0:	mov	r0, r4
   162b4:	bl	11524 <fileno@plt>
   162b8:	mov	r2, r6
   162bc:	mov	r3, r5
   162c0:	str	r7, [sp]
   162c4:	bl	113f8 <lseek64@plt>
   162c8:	and	r2, r0, r1
   162cc:	cmn	r2, #1
   162d0:	mvneq	r0, #0
   162d4:	subeq	sp, fp, #16
   162d8:	popeq	{r4, r5, r6, r7, fp, pc}
   162dc:	strd	r0, [r4, #80]	; 0x50
   162e0:	ldr	r0, [r4]
   162e4:	bic	r0, r0, #16
   162e8:	str	r0, [r4]
   162ec:	mov	r0, #0
   162f0:	sub	sp, fp, #16
   162f4:	pop	{r4, r5, r6, r7, fp, pc}
   162f8:	mov	r1, r0
   162fc:	mov	r0, #0
   16300:	b	11344 <clock_gettime@plt>
   16304:	push	{fp, lr}
   16308:	mov	fp, sp
   1630c:	mov	r1, r0
   16310:	mov	r0, #0
   16314:	bl	11344 <clock_gettime@plt>
   16318:	pop	{fp, pc}
   1631c:	push	{r4, sl, fp, lr}
   16320:	add	fp, sp, #8
   16324:	sub	sp, sp, #264	; 0x108
   16328:	add	r1, sp, #7
   1632c:	movw	r2, #257	; 0x101
   16330:	bl	19f08 <__assert_fail@plt+0x8900>
   16334:	mov	r4, #0
   16338:	cmp	r0, #0
   1633c:	bne	16374 <__assert_fail@plt+0x4d6c>
   16340:	movw	r1, #714	; 0x2ca
   16344:	add	r0, sp, #7
   16348:	movt	r1, #2
   1634c:	bl	112f0 <strcmp@plt>
   16350:	cmp	r0, #0
   16354:	beq	16374 <__assert_fail@plt+0x4d6c>
   16358:	movw	r1, #716	; 0x2cc
   1635c:	add	r0, sp, #7
   16360:	movt	r1, #2
   16364:	bl	112f0 <strcmp@plt>
   16368:	mov	r4, r0
   1636c:	cmp	r0, #0
   16370:	movwne	r4, #1
   16374:	mov	r0, r4
   16378:	sub	sp, fp, #8
   1637c:	pop	{r4, sl, fp, pc}
   16380:	push	{r4, r5, r6, sl, fp, lr}
   16384:	add	fp, sp, #16
   16388:	mov	r5, r0
   1638c:	mov	r0, #0
   16390:	mov	r4, r1
   16394:	add	r6, r2, #19
   16398:	cmp	r1, #0
   1639c:	strb	r0, [r2, #20]
   163a0:	blt	163f0 <__assert_fail@plt+0x4de8>
   163a4:	mov	r0, r5
   163a8:	mov	r1, r4
   163ac:	mov	r2, #10
   163b0:	mov	r3, #0
   163b4:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   163b8:	add	r2, r0, r0, lsl #2
   163bc:	sub	r2, r5, r2, lsl #1
   163c0:	add	r2, r2, #48	; 0x30
   163c4:	strb	r2, [r6], #-1
   163c8:	adds	r2, r5, #9
   163cc:	mov	r5, r0
   163d0:	adc	r3, r4, #0
   163d4:	rsbs	r2, r2, #18
   163d8:	mov	r4, r1
   163dc:	rscs	r2, r3, #0
   163e0:	bcc	163a4 <__assert_fail@plt+0x4d9c>
   163e4:	add	r6, r6, #1
   163e8:	mov	r0, r6
   163ec:	pop	{r4, r5, r6, sl, fp, pc}
   163f0:	mov	r0, r5
   163f4:	mov	r1, r4
   163f8:	mov	r2, #10
   163fc:	mov	r3, #0
   16400:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   16404:	add	r2, r0, r0, lsl #2
   16408:	rsb	r2, r5, r2, lsl #1
   1640c:	add	r2, r2, #48	; 0x30
   16410:	strb	r2, [r6], #-1
   16414:	adds	r2, r5, #9
   16418:	mov	r5, r0
   1641c:	adc	r3, r4, #0
   16420:	rsbs	r2, r2, #18
   16424:	mov	r4, r1
   16428:	rscs	r2, r3, #0
   1642c:	bcc	163f0 <__assert_fail@plt+0x4de8>
   16430:	mov	r0, #45	; 0x2d
   16434:	strb	r0, [r6]
   16438:	mov	r0, r6
   1643c:	pop	{r4, r5, r6, sl, fp, pc}
   16440:	push	{r4, r5, fp, lr}
   16444:	add	fp, sp, #8
   16448:	mov	r4, r1
   1644c:	mov	r5, r0
   16450:	bl	114b8 <strlen@plt>
   16454:	mov	r1, r0
   16458:	mov	r0, r5
   1645c:	mov	r2, r4
   16460:	pop	{r4, r5, fp, lr}
   16464:	b	16468 <__assert_fail@plt+0x4e60>
   16468:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1646c:	add	fp, sp, #28
   16470:	sub	sp, sp, #28
   16474:	mov	r4, r2
   16478:	mov	r5, r1
   1647c:	mov	r7, r0
   16480:	add	r6, r0, r1
   16484:	bl	11404 <__ctype_get_mb_cur_max@plt>
   16488:	cmp	r0, #1
   1648c:	bls	1677c <__assert_fail@plt+0x5174>
   16490:	cmp	r5, #1
   16494:	blt	167e4 <__assert_fail@plt+0x51dc>
   16498:	and	r2, r4, #1
   1649c:	and	sl, r4, #2
   164a0:	mov	r5, #0
   164a4:	add	r8, sp, #12
   164a8:	add	r9, sp, #16
   164ac:	mov	r4, #0
   164b0:	eor	r3, r2, #1
   164b4:	ldrb	r0, [r7]
   164b8:	sub	r0, r0, #32
   164bc:	cmp	r0, #94	; 0x5e
   164c0:	bhi	1665c <__assert_fail@plt+0x5054>
   164c4:	add	r1, pc, #0
   164c8:	ldr	pc, [r1, r0, lsl #2]
   164cc:	andeq	r6, r1, r8, asr #12
   164d0:	andeq	r6, r1, r8, asr #12
   164d4:	andeq	r6, r1, r8, asr #12
   164d8:	andeq	r6, r1, r8, asr #12
   164dc:	andeq	r6, r1, ip, asr r6
   164e0:	andeq	r6, r1, r8, asr #12
   164e4:	andeq	r6, r1, r8, asr #12
   164e8:	andeq	r6, r1, r8, asr #12
   164ec:	andeq	r6, r1, r8, asr #12
   164f0:	andeq	r6, r1, r8, asr #12
   164f4:	andeq	r6, r1, r8, asr #12
   164f8:	andeq	r6, r1, r8, asr #12
   164fc:	andeq	r6, r1, r8, asr #12
   16500:	andeq	r6, r1, r8, asr #12
   16504:	andeq	r6, r1, r8, asr #12
   16508:	andeq	r6, r1, r8, asr #12
   1650c:	andeq	r6, r1, r8, asr #12
   16510:	andeq	r6, r1, r8, asr #12
   16514:	andeq	r6, r1, r8, asr #12
   16518:	andeq	r6, r1, r8, asr #12
   1651c:	andeq	r6, r1, r8, asr #12
   16520:	andeq	r6, r1, r8, asr #12
   16524:	andeq	r6, r1, r8, asr #12
   16528:	andeq	r6, r1, r8, asr #12
   1652c:	andeq	r6, r1, r8, asr #12
   16530:	andeq	r6, r1, r8, asr #12
   16534:	andeq	r6, r1, r8, asr #12
   16538:	andeq	r6, r1, r8, asr #12
   1653c:	andeq	r6, r1, r8, asr #12
   16540:	andeq	r6, r1, r8, asr #12
   16544:	andeq	r6, r1, r8, asr #12
   16548:	andeq	r6, r1, r8, asr #12
   1654c:	andeq	r6, r1, ip, asr r6
   16550:	andeq	r6, r1, r8, asr #12
   16554:	andeq	r6, r1, r8, asr #12
   16558:	andeq	r6, r1, r8, asr #12
   1655c:	andeq	r6, r1, r8, asr #12
   16560:	andeq	r6, r1, r8, asr #12
   16564:	andeq	r6, r1, r8, asr #12
   16568:	andeq	r6, r1, r8, asr #12
   1656c:	andeq	r6, r1, r8, asr #12
   16570:	andeq	r6, r1, r8, asr #12
   16574:	andeq	r6, r1, r8, asr #12
   16578:	andeq	r6, r1, r8, asr #12
   1657c:	andeq	r6, r1, r8, asr #12
   16580:	andeq	r6, r1, r8, asr #12
   16584:	andeq	r6, r1, r8, asr #12
   16588:	andeq	r6, r1, r8, asr #12
   1658c:	andeq	r6, r1, r8, asr #12
   16590:	andeq	r6, r1, r8, asr #12
   16594:	andeq	r6, r1, r8, asr #12
   16598:	andeq	r6, r1, r8, asr #12
   1659c:	andeq	r6, r1, r8, asr #12
   165a0:	andeq	r6, r1, r8, asr #12
   165a4:	andeq	r6, r1, r8, asr #12
   165a8:	andeq	r6, r1, r8, asr #12
   165ac:	andeq	r6, r1, r8, asr #12
   165b0:	andeq	r6, r1, r8, asr #12
   165b4:	andeq	r6, r1, r8, asr #12
   165b8:	andeq	r6, r1, r8, asr #12
   165bc:	andeq	r6, r1, r8, asr #12
   165c0:	andeq	r6, r1, r8, asr #12
   165c4:	andeq	r6, r1, r8, asr #12
   165c8:	andeq	r6, r1, r8, asr #12
   165cc:	andeq	r6, r1, ip, asr r6
   165d0:	andeq	r6, r1, r8, asr #12
   165d4:	andeq	r6, r1, r8, asr #12
   165d8:	andeq	r6, r1, r8, asr #12
   165dc:	andeq	r6, r1, r8, asr #12
   165e0:	andeq	r6, r1, r8, asr #12
   165e4:	andeq	r6, r1, r8, asr #12
   165e8:	andeq	r6, r1, r8, asr #12
   165ec:	andeq	r6, r1, r8, asr #12
   165f0:	andeq	r6, r1, r8, asr #12
   165f4:	andeq	r6, r1, r8, asr #12
   165f8:	andeq	r6, r1, r8, asr #12
   165fc:	andeq	r6, r1, r8, asr #12
   16600:	andeq	r6, r1, r8, asr #12
   16604:	andeq	r6, r1, r8, asr #12
   16608:	andeq	r6, r1, r8, asr #12
   1660c:	andeq	r6, r1, r8, asr #12
   16610:	andeq	r6, r1, r8, asr #12
   16614:	andeq	r6, r1, r8, asr #12
   16618:	andeq	r6, r1, r8, asr #12
   1661c:	andeq	r6, r1, r8, asr #12
   16620:	andeq	r6, r1, r8, asr #12
   16624:	andeq	r6, r1, r8, asr #12
   16628:	andeq	r6, r1, r8, asr #12
   1662c:	andeq	r6, r1, r8, asr #12
   16630:	andeq	r6, r1, r8, asr #12
   16634:	andeq	r6, r1, r8, asr #12
   16638:	andeq	r6, r1, r8, asr #12
   1663c:	andeq	r6, r1, r8, asr #12
   16640:	andeq	r6, r1, r8, asr #12
   16644:	andeq	r6, r1, r8, asr #12
   16648:	add	r4, r4, #1
   1664c:	add	r7, r7, #1
   16650:	cmp	r7, r6
   16654:	bcc	164b4 <__assert_fail@plt+0x4eac>
   16658:	b	167f0 <__assert_fail@plt+0x51e8>
   1665c:	str	r3, [sp, #4]
   16660:	str	r2, [sp, #8]
   16664:	str	r5, [sp, #20]
   16668:	str	r5, [sp, #16]
   1666c:	sub	r2, r6, r7
   16670:	mov	r0, r8
   16674:	mov	r1, r7
   16678:	mov	r3, r9
   1667c:	mov	r5, r7
   16680:	bl	1e820 <__assert_fail@plt+0xd218>
   16684:	cmp	r0, #0
   16688:	beq	166a4 <__assert_fail@plt+0x509c>
   1668c:	mov	r7, r0
   16690:	cmn	r0, #2
   16694:	beq	16714 <__assert_fail@plt+0x510c>
   16698:	cmn	r7, #1
   1669c:	bne	166a8 <__assert_fail@plt+0x50a0>
   166a0:	b	16734 <__assert_fail@plt+0x512c>
   166a4:	mov	r7, #1
   166a8:	ldr	r0, [sp, #12]
   166ac:	bl	1132c <wcwidth@plt>
   166b0:	cmp	r0, #0
   166b4:	blt	166d0 <__assert_fail@plt+0x50c8>
   166b8:	mvn	r1, #-2147483648	; 0x80000000
   166bc:	sub	r1, r1, r4
   166c0:	cmp	r0, r1
   166c4:	bgt	1670c <__assert_fail@plt+0x5104>
   166c8:	add	r4, r0, r4
   166cc:	b	166f4 <__assert_fail@plt+0x50ec>
   166d0:	cmp	sl, #0
   166d4:	bne	1675c <__assert_fail@plt+0x5154>
   166d8:	ldr	r0, [sp, #12]
   166dc:	bl	113bc <iswcntrl@plt>
   166e0:	cmp	r0, #0
   166e4:	bne	166f4 <__assert_fail@plt+0x50ec>
   166e8:	cmn	r4, #-2147483647	; 0x80000001
   166ec:	beq	1670c <__assert_fail@plt+0x5104>
   166f0:	add	r4, r4, #1
   166f4:	mov	r0, r9
   166f8:	add	r7, r5, r7
   166fc:	bl	11374 <mbsinit@plt>
   16700:	cmp	r0, #0
   16704:	beq	1666c <__assert_fail@plt+0x5064>
   16708:	b	1674c <__assert_fail@plt+0x5144>
   1670c:	mov	r0, #7
   16710:	b	16760 <__assert_fail@plt+0x5158>
   16714:	ldr	r0, [sp, #4]
   16718:	ldr	r1, [sp, #8]
   1671c:	mov	r7, r6
   16720:	add	r4, r4, r0
   16724:	mov	r0, #1
   16728:	cmp	r1, #0
   1672c:	beq	1674c <__assert_fail@plt+0x5144>
   16730:	b	16760 <__assert_fail@plt+0x5158>
   16734:	ldr	r1, [sp, #8]
   16738:	mov	r0, #1
   1673c:	cmp	r1, #0
   16740:	bne	16760 <__assert_fail@plt+0x5158>
   16744:	add	r4, r4, #1
   16748:	add	r7, r5, #1
   1674c:	ldr	r2, [sp, #8]
   16750:	ldr	r3, [sp, #4]
   16754:	mov	r5, #0
   16758:	b	16650 <__assert_fail@plt+0x5048>
   1675c:	mov	r0, #1
   16760:	ldr	r2, [sp, #8]
   16764:	ldr	r3, [sp, #4]
   16768:	mov	r7, r5
   1676c:	cmp	r0, #0
   16770:	mov	r5, #0
   16774:	beq	16650 <__assert_fail@plt+0x5048>
   16778:	b	167d4 <__assert_fail@plt+0x51cc>
   1677c:	and	r8, r4, #2
   16780:	mov	r4, #0
   16784:	cmp	r7, r6
   16788:	bcs	167f0 <__assert_fail@plt+0x51e8>
   1678c:	ldrb	r5, [r7], #1
   16790:	bl	114a0 <__ctype_b_loc@plt>
   16794:	ldr	r0, [r0]
   16798:	add	r0, r0, r5, lsl #1
   1679c:	ldrh	r1, [r0]
   167a0:	tst	r1, #16384	; 0x4000
   167a4:	bne	167bc <__assert_fail@plt+0x51b4>
   167a8:	cmp	r8, #0
   167ac:	bne	167ec <__assert_fail@plt+0x51e4>
   167b0:	mov	r0, #0
   167b4:	tst	r1, #2
   167b8:	bne	167cc <__assert_fail@plt+0x51c4>
   167bc:	cmn	r4, #-2147483647	; 0x80000001
   167c0:	mov	r0, #0
   167c4:	mvneq	r0, #0
   167c8:	addne	r4, r4, #1
   167cc:	ands	r0, r0, #7
   167d0:	beq	16784 <__assert_fail@plt+0x517c>
   167d4:	mvn	r4, #0
   167d8:	cmp	r0, #7
   167dc:	mvneq	r4, #-2147483648	; 0x80000000
   167e0:	b	167f0 <__assert_fail@plt+0x51e8>
   167e4:	mov	r4, #0
   167e8:	b	167f0 <__assert_fail@plt+0x51e8>
   167ec:	mvn	r4, #0
   167f0:	mov	r0, r4
   167f4:	sub	sp, fp, #28
   167f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167fc:	push	{fp, lr}
   16800:	mov	fp, sp
   16804:	sub	sp, sp, #24
   16808:	mvn	ip, #0
   1680c:	str	ip, [sp, #8]
   16810:	mov	ip, #0
   16814:	str	ip, [sp, #4]
   16818:	str	ip, [sp]
   1681c:	ldr	ip, [fp, #12]
   16820:	str	ip, [sp, #16]
   16824:	ldr	ip, [fp, #8]
   16828:	str	ip, [sp, #12]
   1682c:	bl	16838 <__assert_fail@plt+0x5230>
   16830:	mov	sp, fp
   16834:	pop	{fp, pc}
   16838:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1683c:	add	fp, sp, #28
   16840:	sub	sp, sp, #124	; 0x7c
   16844:	sub	sp, sp, #1024	; 0x400
   16848:	mov	r4, r3
   1684c:	mov	sl, r2
   16850:	str	r1, [sp, #88]	; 0x58
   16854:	mov	r5, r0
   16858:	bl	114e8 <__errno_location@plt>
   1685c:	mov	r2, r4
   16860:	ldrb	r3, [sl]
   16864:	str	r0, [sp, #60]	; 0x3c
   16868:	ldr	r0, [r0]
   1686c:	movw	r6, #65108	; 0xfe54
   16870:	ldr	r1, [r2, #8]!
   16874:	movt	r6, #1
   16878:	str	r0, [sp, #56]	; 0x38
   1687c:	cmp	r1, #0
   16880:	mov	r7, r1
   16884:	movweq	r7, #12
   16888:	cmp	r1, #12
   1688c:	subgt	r7, r1, #12
   16890:	ldr	r1, [r2, #32]
   16894:	cmp	r1, #0
   16898:	movne	r6, r1
   1689c:	cmp	r3, #0
   168a0:	beq	16920 <__assert_fail@plt+0x5318>
   168a4:	sub	r0, fp, #48	; 0x30
   168a8:	mvn	r1, #13
   168ac:	ldr	r9, [fp, #16]
   168b0:	sub	r8, r6, #1
   168b4:	str	r6, [sp, #36]	; 0x24
   168b8:	movw	r6, #52428	; 0xcccc
   168bc:	str	r4, [sp, #72]	; 0x48
   168c0:	mov	lr, #0
   168c4:	mov	ip, r5
   168c8:	str	r7, [sp, #44]	; 0x2c
   168cc:	str	r2, [sp, #48]	; 0x30
   168d0:	sub	r1, r1, r0
   168d4:	movt	r6, #3276	; 0xccc
   168d8:	str	r8, [sp, #20]
   168dc:	str	r1, [sp, #28]
   168e0:	add	r1, r0, #13
   168e4:	add	r0, r0, #14
   168e8:	str	r1, [sp, #24]
   168ec:	add	r1, sp, #96	; 0x60
   168f0:	str	r0, [sp, #64]	; 0x40
   168f4:	add	r1, r1, #1
   168f8:	str	r1, [sp, #32]
   168fc:	add	r1, r4, #12
   16900:	mov	r4, #-2147483648	; 0x80000000
   16904:	str	r1, [sp, #40]	; 0x28
   16908:	sub	r1, fp, #53	; 0x35
   1690c:	add	r0, r1, #3
   16910:	str	r0, [sp, #52]	; 0x34
   16914:	add	r0, r1, #2
   16918:	str	r0, [sp, #68]	; 0x44
   1691c:	b	16c4c <__assert_fail@plt+0x5644>
   16920:	mov	lr, #0
   16924:	mov	ip, r5
   16928:	b	18154 <__assert_fail@plt+0x6b4c>
   1692c:	sub	r0, r9, #6
   16930:	bic	r8, r0, r0, asr #31
   16934:	b	1743c <__assert_fail@plt+0x5e34>
   16938:	movw	r6, #63636	; 0xf894
   1693c:	movt	r6, #65535	; 0xffff
   16940:	sub	r6, r6, r3
   16944:	add	r3, r7, #100	; 0x64
   16948:	cmp	lr, r6
   1694c:	rsblt	r3, r7, #0
   16950:	ldr	lr, [sp, #76]	; 0x4c
   16954:	ldr	r7, [fp, #12]
   16958:	cmp	r5, #0
   1695c:	mov	r4, #0
   16960:	moveq	r5, r7
   16964:	mov	r7, #0
   16968:	cmp	r5, #43	; 0x2b
   1696c:	bne	176cc <__assert_fail@plt+0x60c4>
   16970:	ldr	r8, [sp, #80]	; 0x50
   16974:	mov	r4, #0
   16978:	movw	r6, #9999	; 0x270f
   1697c:	mov	ip, #0
   16980:	cmp	r8, r9
   16984:	movwlt	r4, #1
   16988:	cmp	r8, #2
   1698c:	movweq	r6, #99	; 0x63
   16990:	cmp	r6, r3
   16994:	movwcc	ip, #1
   16998:	orr	r4, r4, ip
   1699c:	ldr	ip, [sp, #84]	; 0x54
   169a0:	b	176cc <__assert_fail@plt+0x60c4>
   169a4:	movw	r4, #63636	; 0xf894
   169a8:	ldr	ip, [sp, #84]	; 0x54
   169ac:	str	r3, [sp, #80]	; 0x50
   169b0:	add	r3, r6, #100	; 0x64
   169b4:	movt	r4, #65535	; 0xffff
   169b8:	cmp	r7, r4
   169bc:	rsblt	r3, r6, #0
   169c0:	b	16954 <__assert_fail@plt+0x534c>
   169c4:	cmp	r7, #0
   169c8:	beq	16bac <__assert_fail@plt+0x55a4>
   169cc:	movw	r6, #10000	; 0x2710
   169d0:	mov	r4, #1
   169d4:	mla	r3, r3, r6, r7
   169d8:	mov	r7, #100	; 0x64
   169dc:	mla	r3, ip, r7, r3
   169e0:	mov	r7, #9
   169e4:	str	r7, [sp, #80]	; 0x50
   169e8:	mov	r7, #20
   169ec:	b	16bcc <__assert_fail@plt+0x55c4>
   169f0:	sub	r1, fp, #48	; 0x30
   169f4:	mov	r0, r6
   169f8:	mov	r2, r4
   169fc:	mov	r7, lr
   16a00:	bl	1135c <memcpy@plt>
   16a04:	mov	lr, r7
   16a08:	add	ip, r6, r4
   16a0c:	cmp	r5, #45	; 0x2d
   16a10:	mov	r6, #0
   16a14:	subne	r0, r9, r4
   16a18:	bicne	r6, r0, r0, asr #31
   16a1c:	sub	r0, r8, r4
   16a20:	cmp	r6, r0
   16a24:	bcs	18178 <__assert_fail@plt+0x6b70>
   16a28:	cmp	ip, #0
   16a2c:	cmpne	r6, #0
   16a30:	beq	16bfc <__assert_fail@plt+0x55f4>
   16a34:	uxtb	r0, r5
   16a38:	cmp	r0, #48	; 0x30
   16a3c:	cmpne	r0, #43	; 0x2b
   16a40:	bne	16bd8 <__assert_fail@plt+0x55d0>
   16a44:	mov	r0, ip
   16a48:	mov	r7, ip
   16a4c:	mov	r1, #48	; 0x30
   16a50:	b	16be4 <__assert_fail@plt+0x55dc>
   16a54:	mov	r1, #32
   16a58:	mov	r5, r2
   16a5c:	bl	1150c <memset@plt>
   16a60:	ldr	r0, [sp, #84]	; 0x54
   16a64:	ldr	lr, [sp, #76]	; 0x4c
   16a68:	add	ip, r0, r5
   16a6c:	tst	r7, #1
   16a70:	beq	16ac0 <__assert_fail@plt+0x54b8>
   16a74:	ldr	r8, [sp, #20]
   16a78:	cmp	r9, #0
   16a7c:	beq	16b38 <__assert_fail@plt+0x5530>
   16a80:	cmp	r6, r9
   16a84:	movls	r6, r9
   16a88:	add	r0, r0, r6
   16a8c:	mov	r6, ip
   16a90:	sub	r5, r0, #1
   16a94:	bl	11470 <__ctype_tolower_loc@plt>
   16a98:	ldr	lr, [sp, #76]	; 0x4c
   16a9c:	mov	ip, r6
   16aa0:	mov	r1, r9
   16aa4:	ldrb	r2, [r8, r1]
   16aa8:	ldr	r3, [r0]
   16aac:	subs	r1, r1, #1
   16ab0:	ldr	r2, [r3, r2, lsl #2]
   16ab4:	strb	r2, [r5], #-1
   16ab8:	bne	16aa4 <__assert_fail@plt+0x549c>
   16abc:	b	16b38 <__assert_fail@plt+0x5530>
   16ac0:	eor	r1, r7, #1
   16ac4:	and	r1, r8, r1
   16ac8:	tst	r1, #1
   16acc:	beq	16b1c <__assert_fail@plt+0x5514>
   16ad0:	ldr	r8, [sp, #20]
   16ad4:	cmp	r9, #0
   16ad8:	beq	16b38 <__assert_fail@plt+0x5530>
   16adc:	cmp	r6, r9
   16ae0:	movls	r6, r9
   16ae4:	add	r0, r0, r6
   16ae8:	mov	r6, ip
   16aec:	sub	r5, r0, #1
   16af0:	bl	1147c <__ctype_toupper_loc@plt>
   16af4:	ldr	lr, [sp, #76]	; 0x4c
   16af8:	mov	ip, r6
   16afc:	mov	r1, r9
   16b00:	ldrb	r2, [r8, r1]
   16b04:	ldr	r3, [r0]
   16b08:	subs	r1, r1, #1
   16b0c:	ldr	r2, [r3, r2, lsl #2]
   16b10:	strb	r2, [r5], #-1
   16b14:	bne	16b00 <__assert_fail@plt+0x54f8>
   16b18:	b	16b38 <__assert_fail@plt+0x5530>
   16b1c:	ldr	r1, [sp, #36]	; 0x24
   16b20:	mov	r0, ip
   16b24:	mov	r2, r9
   16b28:	mov	r5, ip
   16b2c:	bl	1135c <memcpy@plt>
   16b30:	ldr	lr, [sp, #76]	; 0x4c
   16b34:	mov	ip, r5
   16b38:	add	ip, ip, r9
   16b3c:	movw	r6, #52428	; 0xcccc
   16b40:	add	lr, r4, lr
   16b44:	b	17fc0 <__assert_fail@plt+0x69b8>
   16b48:	mov	r0, ip
   16b4c:	mov	r1, #32
   16b50:	mov	r2, r4
   16b54:	mov	r5, lr
   16b58:	mov	r7, ip
   16b5c:	bl	1150c <memset@plt>
   16b60:	mov	ip, r7
   16b64:	mov	lr, r5
   16b68:	add	ip, r7, r4
   16b6c:	mov	r4, #-2147483648	; 0x80000000
   16b70:	mov	r0, #10
   16b74:	b	16ba4 <__assert_fail@plt+0x559c>
   16b78:	mov	r0, ip
   16b7c:	mov	r1, #32
   16b80:	mov	r2, r4
   16b84:	mov	r5, lr
   16b88:	mov	r7, ip
   16b8c:	bl	1150c <memset@plt>
   16b90:	mov	ip, r7
   16b94:	mov	lr, r5
   16b98:	add	ip, r7, r4
   16b9c:	mov	r4, #-2147483648	; 0x80000000
   16ba0:	mov	r0, #9
   16ba4:	strb	r0, [ip], #1
   16ba8:	b	18138 <__assert_fail@plt+0x6b30>
   16bac:	cmp	ip, #0
   16bb0:	beq	16c44 <__assert_fail@plt+0x563c>
   16bb4:	mov	r7, #100	; 0x64
   16bb8:	mov	r4, #1
   16bbc:	mla	r3, r3, r7, ip
   16bc0:	mov	r7, #6
   16bc4:	str	r7, [sp, #80]	; 0x50
   16bc8:	mov	r7, #4
   16bcc:	ldr	lr, [sp, #76]	; 0x4c
   16bd0:	mov	ip, r8
   16bd4:	b	176cc <__assert_fail@plt+0x60c4>
   16bd8:	mov	r0, ip
   16bdc:	mov	r7, ip
   16be0:	mov	r1, #32
   16be4:	mov	r2, r6
   16be8:	mov	r5, lr
   16bec:	bl	1150c <memset@plt>
   16bf0:	mov	lr, r5
   16bf4:	add	ip, r7, r6
   16bf8:	mov	r0, r7
   16bfc:	add	r0, r6, lr
   16c00:	movw	r6, #52428	; 0xcccc
   16c04:	add	lr, r0, r4
   16c08:	movt	r6, #3276	; 0xccc
   16c0c:	mov	r4, #-2147483648	; 0x80000000
   16c10:	b	18144 <__assert_fail@plt+0x6b3c>
   16c14:	mov	r0, ip
   16c18:	mov	r1, #32
   16c1c:	mov	r2, r4
   16c20:	mov	r5, lr
   16c24:	mov	r7, ip
   16c28:	bl	1150c <memset@plt>
   16c2c:	ldrb	r1, [sl]
   16c30:	mov	ip, r7
   16c34:	mov	lr, r5
   16c38:	add	ip, r7, r4
   16c3c:	strb	r1, [ip], #1
   16c40:	b	18134 <__assert_fail@plt+0x6b2c>
   16c44:	mov	r7, #3
   16c48:	b	17ef4 <__assert_fail@plt+0x68ec>
   16c4c:	uxtb	r1, r3
   16c50:	cmp	r1, #37	; 0x25
   16c54:	bne	16c70 <__assert_fail@plt+0x5668>
   16c58:	ldr	r0, [fp, #8]
   16c5c:	mov	r7, #0
   16c60:	mov	r5, #0
   16c64:	str	sl, [sp, #80]	; 0x50
   16c68:	str	r0, [sp, #92]	; 0x5c
   16c6c:	b	16d60 <__assert_fail@plt+0x5758>
   16c70:	ldr	r0, [sp, #88]	; 0x58
   16c74:	bic	r1, r9, r9, asr #31
   16c78:	cmp	r1, #1
   16c7c:	mov	r5, r1
   16c80:	movls	r5, #1
   16c84:	sub	r2, r0, lr
   16c88:	cmp	r5, r2
   16c8c:	bcs	18178 <__assert_fail@plt+0x6b70>
   16c90:	cmp	ip, #0
   16c94:	beq	16df4 <__assert_fail@plt+0x57ec>
   16c98:	cmp	r1, #2
   16c9c:	bcc	16cd8 <__assert_fail@plt+0x56d0>
   16ca0:	sub	r4, r1, #1
   16ca4:	mov	r0, ip
   16ca8:	mov	r1, #32
   16cac:	mov	r6, lr
   16cb0:	mov	r7, ip
   16cb4:	mov	r2, r4
   16cb8:	bl	1150c <memset@plt>
   16cbc:	ldrb	r3, [sl]
   16cc0:	mov	ip, r7
   16cc4:	mov	lr, r6
   16cc8:	movw	r6, #52428	; 0xcccc
   16ccc:	add	ip, r7, r4
   16cd0:	movt	r6, #3276	; 0xccc
   16cd4:	mov	r4, #-2147483648	; 0x80000000
   16cd8:	strb	r3, [ip], #1
   16cdc:	add	lr, r5, lr
   16ce0:	b	18144 <__assert_fail@plt+0x6b3c>
   16ce4:	mov	r7, #1
   16ce8:	b	16d60 <__assert_fail@plt+0x5758>
   16cec:	add	r1, r1, #1
   16cf0:	add	sl, sl, #1
   16cf4:	mov	r5, r0
   16cf8:	ldrb	r0, [sl]
   16cfc:	sub	r2, r0, #35	; 0x23
   16d00:	cmp	r2, #13
   16d04:	bhi	16d48 <__assert_fail@plt+0x5740>
   16d08:	add	r3, pc, #0
   16d0c:	ldr	pc, [r3, r2, lsl #2]
   16d10:	andeq	r6, r1, r4, ror #25
   16d14:	andeq	r6, r1, ip, ror #26
   16d18:	andeq	r6, r1, ip, ror #26
   16d1c:	andeq	r6, r1, ip, ror #26
   16d20:	andeq	r6, r1, ip, ror #26
   16d24:	andeq	r6, r1, ip, ror #26
   16d28:	andeq	r6, r1, ip, ror #26
   16d2c:	andeq	r6, r1, ip, ror #26
   16d30:	andeq	r6, r1, ip, ror #25
   16d34:	andeq	r6, r1, ip, ror #26
   16d38:	andeq	r6, r1, ip, ror #25
   16d3c:	andeq	r6, r1, ip, ror #26
   16d40:	andeq	r6, r1, ip, ror #26
   16d44:	andeq	r6, r1, ip, ror #25
   16d48:	cmp	r0, #95	; 0x5f
   16d4c:	beq	16cec <__assert_fail@plt+0x56e4>
   16d50:	cmp	r0, #94	; 0x5e
   16d54:	bne	16d6c <__assert_fail@plt+0x5764>
   16d58:	mov	r0, #1
   16d5c:	str	r0, [sp, #92]	; 0x5c
   16d60:	add	r1, sl, #2
   16d64:	add	sl, sl, #1
   16d68:	b	16cf8 <__assert_fail@plt+0x56f0>
   16d6c:	sub	r2, r0, #48	; 0x30
   16d70:	cmp	r2, #9
   16d74:	bhi	16dd4 <__assert_fail@plt+0x57cc>
   16d78:	mov	r9, #0
   16d7c:	cmn	r9, #1
   16d80:	ble	16d90 <__assert_fail@plt+0x5788>
   16d84:	cmp	r9, r6
   16d88:	bgt	16da0 <__assert_fail@plt+0x5798>
   16d8c:	b	16da8 <__assert_fail@plt+0x57a0>
   16d90:	beq	16da8 <__assert_fail@plt+0x57a0>
   16d94:	sdiv	r2, r4, r9
   16d98:	cmp	r2, #10
   16d9c:	bge	16da8 <__assert_fail@plt+0x57a0>
   16da0:	mvn	r9, #-2147483648	; 0x80000000
   16da4:	b	16dc0 <__assert_fail@plt+0x57b8>
   16da8:	add	r2, r9, r9, lsl #2
   16dac:	lsl	r3, r2, #1
   16db0:	uxtab	r0, r3, r0
   16db4:	sub	r9, r0, #48	; 0x30
   16db8:	cmp	r9, r2, lsl #1
   16dbc:	mvnvs	r9, #-2147483648	; 0x80000000
   16dc0:	ldrb	r0, [r1], #1
   16dc4:	sub	r2, r0, #48	; 0x30
   16dc8:	cmp	r2, #10
   16dcc:	bcc	16d7c <__assert_fail@plt+0x5774>
   16dd0:	sub	sl, r1, #1
   16dd4:	cmp	r0, #79	; 0x4f
   16dd8:	str	ip, [sp, #84]	; 0x54
   16ddc:	cmpne	r0, #69	; 0x45
   16de0:	bne	16e00 <__assert_fail@plt+0x57f8>
   16de4:	ldrb	r1, [sl, #1]!
   16de8:	cmp	r1, #122	; 0x7a
   16dec:	bls	16e10 <__assert_fail@plt+0x5808>
   16df0:	b	17a0c <__assert_fail@plt+0x6404>
   16df4:	mov	ip, #0
   16df8:	add	lr, r5, lr
   16dfc:	b	18144 <__assert_fail@plt+0x6b3c>
   16e00:	mov	r1, r0
   16e04:	mov	r0, #0
   16e08:	cmp	r1, #122	; 0x7a
   16e0c:	bhi	17a0c <__assert_fail@plt+0x6404>
   16e10:	movw	r4, #60685	; 0xed0d
   16e14:	add	r2, pc, #12
   16e18:	mov	r6, #0
   16e1c:	mvn	r8, #0
   16e20:	movt	r4, #1
   16e24:	ldr	pc, [r2, r1, lsl #2]
   16e28:	andeq	r7, r1, r4, lsr #2
   16e2c:	andeq	r7, r1, ip, lsl #20
   16e30:	andeq	r7, r1, ip, lsl #20
   16e34:	andeq	r7, r1, ip, lsl #20
   16e38:	andeq	r7, r1, ip, lsl #20
   16e3c:	andeq	r7, r1, ip, lsl #20
   16e40:	andeq	r7, r1, ip, lsl #20
   16e44:	andeq	r7, r1, ip, lsl #20
   16e48:	andeq	r7, r1, ip, lsl #20
   16e4c:	andeq	r7, r1, ip, lsl #20
   16e50:	andeq	r7, r1, ip, lsl #20
   16e54:	andeq	r7, r1, ip, lsl #20
   16e58:	andeq	r7, r1, ip, lsl #20
   16e5c:	andeq	r7, r1, ip, lsl #20
   16e60:	andeq	r7, r1, ip, lsl #20
   16e64:	andeq	r7, r1, ip, lsl #20
   16e68:	andeq	r7, r1, ip, lsl #20
   16e6c:	andeq	r7, r1, ip, lsl #20
   16e70:	andeq	r7, r1, ip, lsl #20
   16e74:	andeq	r7, r1, ip, lsl #20
   16e78:	andeq	r7, r1, ip, lsl #20
   16e7c:	andeq	r7, r1, ip, lsl #20
   16e80:	andeq	r7, r1, ip, lsl #20
   16e84:	andeq	r7, r1, ip, lsl #20
   16e88:	andeq	r7, r1, ip, lsl #20
   16e8c:	andeq	r7, r1, ip, lsl #20
   16e90:	andeq	r7, r1, ip, lsl #20
   16e94:	andeq	r7, r1, ip, lsl #20
   16e98:	andeq	r7, r1, ip, lsl #20
   16e9c:	andeq	r7, r1, ip, lsl #20
   16ea0:	andeq	r7, r1, ip, lsl #20
   16ea4:	andeq	r7, r1, ip, lsl #20
   16ea8:	andeq	r7, r1, ip, lsl #20
   16eac:	andeq	r7, r1, ip, lsl #20
   16eb0:	andeq	r7, r1, ip, lsl #20
   16eb4:	andeq	r7, r1, ip, lsl #20
   16eb8:	andeq	r7, r1, ip, lsl #20
   16ebc:	andeq	r7, r1, r0, lsr r1
   16ec0:	andeq	r7, r1, ip, lsl #20
   16ec4:	andeq	r7, r1, ip, lsl #20
   16ec8:	andeq	r7, r1, ip, lsl #20
   16ecc:	andeq	r7, r1, ip, lsl #20
   16ed0:	andeq	r7, r1, ip, lsl #20
   16ed4:	andeq	r7, r1, ip, lsl #20
   16ed8:	andeq	r7, r1, ip, lsl #20
   16edc:	andeq	r7, r1, ip, lsl #20
   16ee0:	andeq	r7, r1, ip, lsl #20
   16ee4:	andeq	r7, r1, ip, lsl #20
   16ee8:	andeq	r7, r1, ip, lsl #20
   16eec:	andeq	r7, r1, ip, lsl #20
   16ef0:	andeq	r7, r1, ip, lsl #20
   16ef4:	andeq	r7, r1, ip, lsl #20
   16ef8:	andeq	r7, r1, ip, lsl #20
   16efc:	andeq	r7, r1, ip, lsl #20
   16f00:	andeq	r7, r1, ip, lsl #20
   16f04:	andeq	r7, r1, ip, lsl #20
   16f08:	andeq	r7, r1, ip, lsl #20
   16f0c:	andeq	r7, r1, ip, lsl #20
   16f10:	muleq	r1, ip, r1
   16f14:	andeq	r7, r1, ip, lsl #20
   16f18:	andeq	r7, r1, ip, lsl #20
   16f1c:	andeq	r7, r1, ip, lsl #20
   16f20:	andeq	r7, r1, ip, lsl #20
   16f24:	andeq	r7, r1, ip, lsl #20
   16f28:	andeq	r7, r1, ip, lsl #20
   16f2c:	andeq	r7, r1, r0, lsl r2
   16f30:	andeq	r7, r1, r0, lsr r2
   16f34:	andeq	r7, r1, r0, asr r2
   16f38:	andeq	r7, r1, r4, ror #4
   16f3c:	andeq	r7, r1, ip, lsl #20
   16f40:	andeq	r7, r1, r8, ror r2
   16f44:	andeq	r7, r1, r4, lsl r0
   16f48:	andeq	r7, r1, r4, lsr #5
   16f4c:			; <UNDEFINED> instruction: 0x000172b8
   16f50:	andeq	r7, r1, ip, lsl #20
   16f54:	andeq	r7, r1, ip, lsl #20
   16f58:	andeq	r7, r1, ip, lsl #20
   16f5c:	andeq	r7, r1, r8, asr #5
   16f60:	ldrdeq	r7, [r1], -ip
   16f64:	andeq	r7, r1, ip, lsl #20
   16f68:	andeq	r7, r1, r0, lsl #8
   16f6c:	andeq	r7, r1, ip, lsl #20
   16f70:	andeq	r7, r1, ip, lsr r4
   16f74:	andeq	r7, r1, r0, lsr #8
   16f78:	andeq	r7, r1, r4, lsr r4
   16f7c:	ldrdeq	r7, [r1], -ip
   16f80:	andeq	r7, r1, r4, lsl r0
   16f84:	andeq	r7, r1, r8, lsl #10
   16f88:	andeq	r7, r1, r4, asr r5
   16f8c:	andeq	r7, r1, r8, ror #10
   16f90:	andeq	r7, r1, r4, lsr #11
   16f94:	andeq	r7, r1, ip, lsl #20
   16f98:	andeq	r7, r1, ip, lsl #20
   16f9c:	andeq	r7, r1, ip, lsl #20
   16fa0:	andeq	r7, r1, ip, lsl #20
   16fa4:	andeq	r7, r1, ip, lsl #20
   16fa8:	andeq	r7, r1, ip, lsl #20
   16fac:	andeq	r7, r1, r4, lsl r6
   16fb0:	andeq	r7, r1, r8, lsl #2
   16fb4:	andeq	r7, r1, r4, lsr r6
   16fb8:	andeq	r7, r1, r8, asr #12
   16fbc:	andeq	r7, r1, ip, asr r6
   16fc0:	andeq	r7, r1, ip, lsl #20
   16fc4:	andeq	r7, r1, r4, lsl r0
   16fc8:	andeq	r7, r1, r8, lsl #2
   16fcc:	andeq	r7, r1, ip, lsl #20
   16fd0:	andeq	r7, r1, ip, ror #12
   16fd4:	andeq	r7, r1, r4, lsl #13
   16fd8:	muleq	r1, r8, r6
   16fdc:	andeq	r7, r1, r0, ror #15
   16fe0:	andeq	r7, r1, r0, lsl r8
   16fe4:	andeq	r7, r1, ip, lsl #20
   16fe8:	andeq	r7, r1, r4, lsl #8
   16fec:	andeq	r7, r1, ip, ror #16
   16ff0:	andeq	r7, r1, ip, lsl #30
   16ff4:	muleq	r1, r8, r8
   16ff8:	andeq	r7, r1, ip, asr r9
   16ffc:			; <UNDEFINED> instruction: 0x000179b8
   17000:	andeq	r7, r1, ip, lsl #20
   17004:	andeq	r7, r1, ip, ror #19
   17008:	andeq	r7, r1, r4, lsl #20
   1700c:	andeq	r7, r1, r0, lsr fp
   17010:	andeq	r7, r1, r0, asr #3
   17014:	cmp	r0, #69	; 0x45
   17018:	beq	17a0c <__assert_fail@plt+0x6404>
   1701c:	ldr	r2, [sp, #72]	; 0x48
   17020:	str	lr, [sp, #76]	; 0x4c
   17024:	movw	r6, #9363	; 0x2493
   17028:	movt	r6, #37449	; 0x9249
   1702c:	add	lr, r2, #20
   17030:	movw	r2, #382	; 0x17e
   17034:	ldm	lr, {r3, r8, lr}
   17038:	add	r2, lr, r2
   1703c:	cmp	r3, #0
   17040:	str	r3, [sp, #80]	; 0x50
   17044:	sub	r2, r2, r8
   17048:	smmla	r4, r2, r6, r2
   1704c:	asr	r7, r4, #2
   17050:	add	r4, r7, r4, lsr #31
   17054:	rsb	r4, r4, r4, lsl #3
   17058:	sub	r2, r4, r2
   1705c:	add	r2, lr, r2
   17060:	add	r4, r2, #3
   17064:	mvn	r2, #99	; 0x63
   17068:	movwlt	r2, #300	; 0x12c
   1706c:	cmn	r4, #1
   17070:	add	r2, r2, r3
   17074:	ble	17c90 <__assert_fail@plt+0x6688>
   17078:	movw	r7, #365	; 0x16d
   1707c:	tst	r2, #3
   17080:	bne	170c4 <__assert_fail@plt+0x5abc>
   17084:	movw	r7, #34079	; 0x851f
   17088:	mov	ip, #100	; 0x64
   1708c:	movt	r7, #20971	; 0x51eb
   17090:	smmul	r7, r2, r7
   17094:	asr	r3, r7, #5
   17098:	add	r3, r3, r7, lsr #31
   1709c:	mls	ip, r3, ip, r2
   170a0:	asr	r3, r7, #7
   170a4:	add	r3, r3, r7, lsr #31
   170a8:	mov	r7, #400	; 0x190
   170ac:	mls	r2, r3, r7, r2
   170b0:	movw	r7, #365	; 0x16d
   170b4:	cmp	r2, #0
   170b8:	movweq	r7, #366	; 0x16e
   170bc:	cmp	ip, #0
   170c0:	movwne	r7, #366	; 0x16e
   170c4:	movw	r3, #382	; 0x17e
   170c8:	add	r2, r8, r7
   170cc:	mov	r7, r6
   170d0:	add	r3, lr, r3
   170d4:	sub	r2, r3, r2
   170d8:	smmla	r2, r2, r6, r2
   170dc:	asr	r3, r2, #2
   170e0:	add	r2, r3, r2, lsr #31
   170e4:	movw	r3, #379	; 0x17b
   170e8:	rsb	r2, r2, r2, lsl #3
   170ec:	add	r2, r2, r8
   170f0:	sub	r2, r2, r3
   170f4:	mov	r3, #1
   170f8:	cmn	r2, #1
   170fc:	eor	r3, r3, r2, lsr #31
   17100:	movgt	r4, r2
   17104:	b	17d10 <__assert_fail@plt+0x6708>
   17108:	ldr	r2, [sp, #92]	; 0x5c
   1710c:	mov	r6, #0
   17110:	cmp	r0, #69	; 0x45
   17114:	orr	r2, r7, r2
   17118:	str	r2, [sp, #92]	; 0x5c
   1711c:	beq	17a0c <__assert_fail@plt+0x6404>
   17120:	b	17f0c <__assert_fail@plt+0x6904>
   17124:	ldr	ip, [sp, #84]	; 0x54
   17128:	sub	r8, sl, #1
   1712c:	b	17a14 <__assert_fail@plt+0x640c>
   17130:	ldr	r0, [sp, #80]	; 0x50
   17134:	ldr	ip, [sp, #84]	; 0x54
   17138:	sub	r8, sl, #1
   1713c:	cmp	r8, r0
   17140:	bne	17a14 <__assert_fail@plt+0x640c>
   17144:	ldr	r1, [sp, #88]	; 0x58
   17148:	subs	r0, r5, #45	; 0x2d
   1714c:	bicne	r0, r9, r9, asr #31
   17150:	cmp	r0, #1
   17154:	mov	r6, r0
   17158:	movls	r6, #1
   1715c:	sub	r1, r1, lr
   17160:	cmp	r6, r1
   17164:	bcs	18178 <__assert_fail@plt+0x6b70>
   17168:	cmp	ip, #0
   1716c:	beq	17be4 <__assert_fail@plt+0x65dc>
   17170:	mov	r1, #37	; 0x25
   17174:	cmp	r0, #2
   17178:	bcc	16c3c <__assert_fail@plt+0x5634>
   1717c:	uxtb	r1, r5
   17180:	sub	r4, r0, #1
   17184:	cmp	r1, #48	; 0x30
   17188:	cmpne	r1, #43	; 0x2b
   1718c:	bne	16c14 <__assert_fail@plt+0x560c>
   17190:	mov	r0, ip
   17194:	mov	r1, #48	; 0x30
   17198:	b	16c1c <__assert_fail@plt+0x5614>
   1719c:	mov	r6, #1
   171a0:	b	171a8 <__assert_fail@plt+0x5ba0>
   171a4:	add	r6, r6, #1
   171a8:	ldrb	r2, [sl, r6]
   171ac:	cmp	r2, #58	; 0x3a
   171b0:	beq	171a4 <__assert_fail@plt+0x5b9c>
   171b4:	cmp	r2, #122	; 0x7a
   171b8:	bne	17a0c <__assert_fail@plt+0x6404>
   171bc:	add	sl, sl, r6
   171c0:	ldr	r3, [sp, #72]	; 0x48
   171c4:	ldr	r2, [r3, #32]
   171c8:	cmp	r2, #0
   171cc:	blt	17fb8 <__assert_fail@plt+0x69b0>
   171d0:	str	lr, [sp, #76]	; 0x4c
   171d4:	ldr	lr, [r3, #36]	; 0x24
   171d8:	cmp	lr, #0
   171dc:	blt	17e78 <__assert_fail@plt+0x6870>
   171e0:	ldr	ip, [sp, #84]	; 0x54
   171e4:	mov	r2, #0
   171e8:	bne	17e80 <__assert_fail@plt+0x6878>
   171ec:	ldr	r2, [sp, #36]	; 0x24
   171f0:	ldrb	r2, [r2]
   171f4:	sub	r2, r2, #45	; 0x2d
   171f8:	clz	r2, r2
   171fc:	lsr	r2, r2, #5
   17200:	cmp	r6, #3
   17204:	bls	17e88 <__assert_fail@plt+0x6880>
   17208:	ldr	lr, [sp, #76]	; 0x4c
   1720c:	b	17a10 <__assert_fail@plt+0x6408>
   17210:	cmp	r0, #0
   17214:	bne	17a0c <__assert_fail@plt+0x6404>
   17218:	ldr	r1, [sp, #92]	; 0x5c
   1721c:	mov	r6, #0
   17220:	orr	r1, r7, r1
   17224:	str	r1, [sp, #92]	; 0x5c
   17228:	mov	r1, #65	; 0x41
   1722c:	b	17f0c <__assert_fail@plt+0x6904>
   17230:	cmp	r0, #69	; 0x45
   17234:	beq	17a0c <__assert_fail@plt+0x6404>
   17238:	ldr	r1, [sp, #92]	; 0x5c
   1723c:	mov	r6, #0
   17240:	orr	r1, r7, r1
   17244:	str	r1, [sp, #92]	; 0x5c
   17248:	mov	r1, #66	; 0x42
   1724c:	b	17f0c <__assert_fail@plt+0x6904>
   17250:	cmp	r0, #69	; 0x45
   17254:	bne	17d74 <__assert_fail@plt+0x676c>
   17258:	mov	r6, #0
   1725c:	mov	r1, #67	; 0x43
   17260:	b	17f0c <__assert_fail@plt+0x6904>
   17264:	cmp	r0, #0
   17268:	bne	17a0c <__assert_fail@plt+0x6404>
   1726c:	movw	r4, #722	; 0x2d2
   17270:	movt	r4, #2
   17274:	b	1743c <__assert_fail@plt+0x5e34>
   17278:	cmp	r0, #0
   1727c:	bne	17a0c <__assert_fail@plt+0x6404>
   17280:	movw	r4, #731	; 0x2db
   17284:	cmp	r5, #0
   17288:	movt	r4, #2
   1728c:	bne	1692c <__assert_fail@plt+0x5324>
   17290:	cmp	r9, #0
   17294:	bge	1692c <__assert_fail@plt+0x5324>
   17298:	mov	r5, #43	; 0x2b
   1729c:	mov	r8, #4
   172a0:	b	1743c <__assert_fail@plt+0x5e34>
   172a4:	cmp	r0, #69	; 0x45
   172a8:	beq	17a0c <__assert_fail@plt+0x6404>
   172ac:	ldr	r2, [sp, #48]	; 0x30
   172b0:	ldr	r3, [r2]
   172b4:	b	176ac <__assert_fail@plt+0x60a4>
   172b8:	cmp	r0, #69	; 0x45
   172bc:	beq	17a0c <__assert_fail@plt+0x6404>
   172c0:	ldr	r3, [sp, #44]	; 0x2c
   172c4:	b	176ac <__assert_fail@plt+0x60a4>
   172c8:	cmp	r0, #69	; 0x45
   172cc:	beq	17a0c <__assert_fail@plt+0x6404>
   172d0:	ldr	r2, [sp, #72]	; 0x48
   172d4:	ldr	r3, [r2, #4]
   172d8:	b	176ac <__assert_fail@plt+0x60a4>
   172dc:	cmp	r0, #69	; 0x45
   172e0:	beq	17a0c <__assert_fail@plt+0x6404>
   172e4:	ldr	r0, [fp, #24]
   172e8:	cmp	r9, #1
   172ec:	mov	r4, #9
   172f0:	mov	r7, #8
   172f4:	movwlt	r9, #9
   172f8:	cmp	r9, r4
   172fc:	bge	17324 <__assert_fail@plt+0x5d1c>
   17300:	movw	r1, #26215	; 0x6667
   17304:	sub	r7, r7, #1
   17308:	sub	r4, r4, #1
   1730c:	movt	r1, #26214	; 0x6666
   17310:	smmul	r0, r0, r1
   17314:	asr	r1, r0, #2
   17318:	add	r0, r1, r0, lsr #31
   1731c:	cmp	r9, r4
   17320:	blt	17300 <__assert_fail@plt+0x5cf8>
   17324:	movw	r1, #26215	; 0x6667
   17328:	cmp	r4, #2
   1732c:	movt	r1, #26214	; 0x6666
   17330:	blt	17350 <__assert_fail@plt+0x5d48>
   17334:	smmul	r2, r0, r1
   17338:	asr	r3, r2, #2
   1733c:	add	r2, r3, r2, lsr #31
   17340:	add	r2, r2, r2, lsl #2
   17344:	sub	r2, r0, r2, lsl #1
   17348:	cmp	r2, #0
   1734c:	beq	17300 <__assert_fail@plt+0x5cf8>
   17350:	cmp	r4, #1
   17354:	mov	r2, r7
   17358:	sub	ip, fp, #48	; 0x30
   1735c:	blt	17394 <__assert_fail@plt+0x5d8c>
   17360:	smmul	r3, r0, r1
   17364:	asr	r6, r3, #2
   17368:	add	r3, r6, r3, lsr #31
   1736c:	add	r6, r3, r3, lsl #2
   17370:	sub	r0, r0, r6, lsl #1
   17374:	add	r0, r0, #48	; 0x30
   17378:	strb	r0, [ip, r2]
   1737c:	sub	r0, r2, #1
   17380:	add	r2, r2, #1
   17384:	cmp	r2, #1
   17388:	mov	r2, r0
   1738c:	mov	r0, r3
   17390:	bgt	17360 <__assert_fail@plt+0x5d58>
   17394:	ldr	r0, [sp, #88]	; 0x58
   17398:	cmp	r5, #0
   1739c:	movweq	r5, #48	; 0x30
   173a0:	sub	r8, r0, lr
   173a4:	cmp	r4, r8
   173a8:	bcs	18178 <__assert_fail@plt+0x6b70>
   173ac:	ldr	r6, [sp, #84]	; 0x54
   173b0:	mov	ip, #0
   173b4:	cmp	r6, #0
   173b8:	beq	16a0c <__assert_fail@plt+0x5404>
   173bc:	ldr	r0, [sp, #92]	; 0x5c
   173c0:	tst	r0, #1
   173c4:	beq	169f0 <__assert_fail@plt+0x53e8>
   173c8:	cmp	r4, #0
   173cc:	beq	16a08 <__assert_fail@plt+0x5400>
   173d0:	str	lr, [sp, #76]	; 0x4c
   173d4:	bl	1147c <__ctype_toupper_loc@plt>
   173d8:	ldr	lr, [sp, #76]	; 0x4c
   173dc:	sub	r3, fp, #48	; 0x30
   173e0:	ldrb	r1, [r3, r7]
   173e4:	ldr	r2, [r0]
   173e8:	ldr	r1, [r2, r1, lsl #2]
   173ec:	strb	r1, [r6, r7]
   173f0:	sub	r7, r7, #1
   173f4:	cmn	r7, #1
   173f8:	bne	173e0 <__assert_fail@plt+0x5dd8>
   173fc:	b	16a08 <__assert_fail@plt+0x5400>
   17400:	mov	r6, #1
   17404:	ldr	r2, [sp, #92]	; 0x5c
   17408:	eor	r1, r7, #1
   1740c:	orr	r6, r7, r6
   17410:	and	r2, r2, r1
   17414:	mov	r1, #112	; 0x70
   17418:	str	r2, [sp, #92]	; 0x5c
   1741c:	b	17f0c <__assert_fail@plt+0x6904>
   17420:	cmp	r0, #69	; 0x45
   17424:	beq	17a0c <__assert_fail@plt+0x6404>
   17428:	ldr	r2, [sp, #72]	; 0x48
   1742c:	ldr	r3, [r2]
   17430:	b	176ac <__assert_fail@plt+0x60a4>
   17434:	movw	r4, #740	; 0x2e4
   17438:	movt	r4, #2
   1743c:	ldr	r0, [sp, #92]	; 0x5c
   17440:	mvn	r1, #0
   17444:	mov	r2, r4
   17448:	and	r0, r0, #1
   1744c:	str	r0, [sp, #92]	; 0x5c
   17450:	stm	sp, {r0, r5, r8}
   17454:	ldr	r0, [fp, #20]
   17458:	str	lr, [sp, #76]	; 0x4c
   1745c:	ldr	r3, [sp, #72]	; 0x48
   17460:	str	r0, [sp, #12]
   17464:	ldr	r0, [fp, #24]
   17468:	str	r0, [sp, #16]
   1746c:	mov	r0, #0
   17470:	bl	16838 <__assert_fail@plt+0x5230>
   17474:	mov	r7, r0
   17478:	subs	r0, r5, #45	; 0x2d
   1747c:	ldr	lr, [sp, #76]	; 0x4c
   17480:	ldr	r1, [sp, #88]	; 0x58
   17484:	movne	r0, r9
   17488:	cmp	r9, #0
   1748c:	mov	r6, r7
   17490:	movwlt	r0, #0
   17494:	cmp	r0, r7
   17498:	movhi	r6, r0
   1749c:	sub	r9, r1, lr
   174a0:	cmp	r6, r9
   174a4:	bcs	18178 <__assert_fail@plt+0x6b70>
   174a8:	ldr	ip, [sp, #84]	; 0x54
   174ac:	cmp	ip, #0
   174b0:	beq	17be4 <__assert_fail@plt+0x65dc>
   174b4:	cmp	r0, r7
   174b8:	bls	17b44 <__assert_fail@plt+0x653c>
   174bc:	cmp	r5, #48	; 0x30
   174c0:	sub	r2, r0, r7
   174c4:	cmpne	r5, #43	; 0x2b
   174c8:	str	r2, [sp, #80]	; 0x50
   174cc:	bne	180dc <__assert_fail@plt+0x6ad4>
   174d0:	mov	r0, ip
   174d4:	mov	r1, #48	; 0x30
   174d8:	b	180e4 <__assert_fail@plt+0x6adc>
   174dc:	cmp	r0, #69	; 0x45
   174e0:	beq	17a0c <__assert_fail@plt+0x6404>
   174e4:	ldr	r3, [sp, #72]	; 0x48
   174e8:	ldr	r2, [r3, #24]
   174ec:	ldr	r3, [r3, #28]
   174f0:	add	r3, r3, #7
   174f4:	sub	r2, r3, r2
   174f8:	movw	r3, #9363	; 0x2493
   174fc:	movt	r3, #37449	; 0x9249
   17500:	smmla	r2, r2, r3, r2
   17504:	b	17548 <__assert_fail@plt+0x5f40>
   17508:	cmp	r0, #69	; 0x45
   1750c:	beq	17a0c <__assert_fail@plt+0x6404>
   17510:	ldr	r3, [sp, #72]	; 0x48
   17514:	movw	r7, #9363	; 0x2493
   17518:	movt	r7, #37449	; 0x9249
   1751c:	ldr	r2, [r3, #24]
   17520:	ldr	r3, [r3, #28]
   17524:	add	r2, r2, #6
   17528:	smmla	r6, r2, r7, r2
   1752c:	asr	r4, r6, #2
   17530:	add	r6, r4, r6, lsr #31
   17534:	rsb	r6, r6, r6, lsl #3
   17538:	sub	r2, r6, r2
   1753c:	add	r2, r3, r2
   17540:	add	r2, r2, #7
   17544:	smmla	r2, r2, r7, r2
   17548:	asr	r3, r2, #2
   1754c:	add	r3, r3, r2, lsr #31
   17550:	b	176ac <__assert_fail@plt+0x60a4>
   17554:	cmp	r0, #79	; 0x4f
   17558:	beq	17a0c <__assert_fail@plt+0x6404>
   1755c:	mov	r6, #0
   17560:	mov	r1, #88	; 0x58
   17564:	b	17f0c <__assert_fail@plt+0x6904>
   17568:	cmp	r0, #69	; 0x45
   1756c:	beq	17f04 <__assert_fail@plt+0x68fc>
   17570:	cmp	r0, #79	; 0x4f
   17574:	beq	17a0c <__assert_fail@plt+0x6404>
   17578:	ldr	r2, [sp, #72]	; 0x48
   1757c:	movw	r7, #63636	; 0xf894
   17580:	movt	r7, #65535	; 0xffff
   17584:	ldr	r3, [r2, #20]
   17588:	mov	r2, #0
   1758c:	cmp	r3, r7
   17590:	movw	r7, #1900	; 0x76c
   17594:	add	r3, r3, r7
   17598:	movwlt	r2, #1
   1759c:	mov	r7, #4
   175a0:	b	17dc4 <__assert_fail@plt+0x67bc>
   175a4:	ldr	r0, [sp, #36]	; 0x24
   175a8:	ldr	r8, [sp, #92]	; 0x5c
   175ac:	subs	r6, r5, #45	; 0x2d
   175b0:	str	lr, [sp, #76]	; 0x4c
   175b4:	bicne	r6, r9, r9, asr #31
   175b8:	bl	114b8 <strlen@plt>
   175bc:	ldr	lr, [sp, #76]	; 0x4c
   175c0:	mov	r9, r0
   175c4:	cmp	r6, r0
   175c8:	mov	r4, r0
   175cc:	ldr	r0, [sp, #88]	; 0x58
   175d0:	movhi	r4, r6
   175d4:	sub	r0, r0, lr
   175d8:	cmp	r4, r0
   175dc:	bcs	18178 <__assert_fail@plt+0x6b70>
   175e0:	ldr	r0, [sp, #84]	; 0x54
   175e4:	cmp	r0, #0
   175e8:	beq	17e70 <__assert_fail@plt+0x6868>
   175ec:	cmp	r6, r9
   175f0:	mov	ip, r0
   175f4:	bls	16a6c <__assert_fail@plt+0x5464>
   175f8:	uxtb	r1, r5
   175fc:	sub	r2, r6, r9
   17600:	cmp	r1, #48	; 0x30
   17604:	cmpne	r1, #43	; 0x2b
   17608:	bne	16a54 <__assert_fail@plt+0x544c>
   1760c:	mov	r1, #48	; 0x30
   17610:	b	16a58 <__assert_fail@plt+0x5450>
   17614:	cmp	r0, #0
   17618:	bne	17a0c <__assert_fail@plt+0x6404>
   1761c:	ldr	r1, [sp, #92]	; 0x5c
   17620:	mov	r6, #0
   17624:	orr	r1, r7, r1
   17628:	str	r1, [sp, #92]	; 0x5c
   1762c:	mov	r1, #97	; 0x61
   17630:	b	17f0c <__assert_fail@plt+0x6904>
   17634:	cmp	r0, #79	; 0x4f
   17638:	beq	17a0c <__assert_fail@plt+0x6404>
   1763c:	mov	r6, #0
   17640:	mov	r1, #99	; 0x63
   17644:	b	17f0c <__assert_fail@plt+0x6904>
   17648:	cmp	r0, #69	; 0x45
   1764c:	beq	17a0c <__assert_fail@plt+0x6404>
   17650:	ldr	r2, [sp, #40]	; 0x28
   17654:	ldr	r3, [r2]
   17658:	b	176ac <__assert_fail@plt+0x60a4>
   1765c:	ldr	r2, [sp, #40]	; 0x28
   17660:	cmp	r0, #69	; 0x45
   17664:	bne	17690 <__assert_fail@plt+0x6088>
   17668:	b	17a0c <__assert_fail@plt+0x6404>
   1766c:	cmp	r0, #69	; 0x45
   17670:	beq	17a0c <__assert_fail@plt+0x6404>
   17674:	ldr	r2, [sp, #72]	; 0x48
   17678:	mov	r7, #3
   1767c:	ldr	r3, [r2, #28]
   17680:	b	177f4 <__assert_fail@plt+0x61ec>
   17684:	ldr	r2, [sp, #48]	; 0x30
   17688:	cmp	r0, #69	; 0x45
   1768c:	beq	17a0c <__assert_fail@plt+0x6404>
   17690:	ldr	r3, [r2]
   17694:	b	176a4 <__assert_fail@plt+0x609c>
   17698:	ldr	r3, [sp, #44]	; 0x2c
   1769c:	cmp	r0, #69	; 0x45
   176a0:	beq	17a0c <__assert_fail@plt+0x6404>
   176a4:	cmp	r5, #0
   176a8:	movweq	r5, #95	; 0x5f
   176ac:	mov	r2, #2
   176b0:	str	r2, [sp, #80]	; 0x50
   176b4:	ldr	ip, [sp, #84]	; 0x54
   176b8:	lsr	r2, r3, #31
   176bc:	cmp	r2, #0
   176c0:	mov	r7, #0
   176c4:	mov	r4, #0
   176c8:	movwne	r2, #1
   176cc:	cmp	r0, #79	; 0x4f
   176d0:	moveq	r6, #0
   176d4:	cmpeq	r2, #0
   176d8:	beq	17f0c <__assert_fail@plt+0x6904>
   176dc:	ldr	r8, [sp, #64]	; 0x40
   176e0:	cmp	r2, #0
   176e4:	rsbne	r3, r3, #0
   176e8:	tst	r7, #1
   176ec:	asr	r7, r7, #1
   176f0:	movne	r0, #58	; 0x3a
   176f4:	strbne	r0, [r8, #-1]!
   176f8:	movw	r0, #52429	; 0xcccd
   176fc:	cmp	r3, #9
   17700:	movt	r0, #52428	; 0xcccc
   17704:	umull	r0, r1, r3, r0
   17708:	lsr	r0, r1, #3
   1770c:	add	r1, r0, r0, lsl #2
   17710:	sub	r1, r3, r1, lsl #1
   17714:	mov	r3, r0
   17718:	orr	r1, r1, #48	; 0x30
   1771c:	strb	r1, [r8, #-1]!
   17720:	bhi	176e8 <__assert_fail@plt+0x60e0>
   17724:	cmp	r7, #0
   17728:	mov	r3, r0
   1772c:	bne	176e8 <__assert_fail@plt+0x60e0>
   17730:	ldr	r3, [sp, #80]	; 0x50
   17734:	cmp	r9, #0
   17738:	movge	r3, r9
   1773c:	cmp	r4, #0
   17740:	movwne	r4, #43	; 0x2b
   17744:	cmp	r5, #0
   17748:	movweq	r5, #48	; 0x30
   1774c:	ldr	r1, [sp, #64]	; 0x40
   17750:	cmp	r2, #0
   17754:	mov	r0, r3
   17758:	movwne	r4, #45	; 0x2d
   1775c:	cmp	r4, #0
   17760:	subne	r0, r0, #1
   17764:	sub	r9, r1, r8
   17768:	sub	r6, r0, r9
   1776c:	mov	r0, r4
   17770:	cmp	r6, #1
   17774:	movwlt	r6, #0
   17778:	subs	r4, r5, #45	; 0x2d
   1777c:	moveq	r6, r4
   17780:	cmp	r0, #0
   17784:	beq	177d0 <__assert_fail@plt+0x61c8>
   17788:	mov	r7, r0
   1778c:	cmp	r5, #95	; 0x5f
   17790:	bne	177d8 <__assert_fail@plt+0x61d0>
   17794:	cmp	ip, #0
   17798:	beq	17b50 <__assert_fail@plt+0x6548>
   1779c:	mov	r0, ip
   177a0:	mov	r1, #32
   177a4:	mov	r2, r6
   177a8:	str	sl, [sp, #80]	; 0x50
   177ac:	str	lr, [sp, #76]	; 0x4c
   177b0:	mov	sl, r3
   177b4:	bl	1150c <memset@plt>
   177b8:	ldr	ip, [sp, #84]	; 0x54
   177bc:	mov	r3, sl
   177c0:	ldr	lr, [sp, #76]	; 0x4c
   177c4:	ldr	sl, [sp, #80]	; 0x50
   177c8:	add	ip, ip, r6
   177cc:	b	17b54 <__assert_fail@plt+0x654c>
   177d0:	ldr	r1, [sp, #92]	; 0x5c
   177d4:	b	17b84 <__assert_fail@plt+0x657c>
   177d8:	ldr	r1, [sp, #92]	; 0x5c
   177dc:	b	17b60 <__assert_fail@plt+0x6558>
   177e0:	cmp	r0, #69	; 0x45
   177e4:	beq	17a0c <__assert_fail@plt+0x6404>
   177e8:	ldr	r2, [sp, #72]	; 0x48
   177ec:	mov	r7, #2
   177f0:	ldr	r3, [r2, #16]
   177f4:	mov	r2, #0
   177f8:	cmn	r3, #1
   177fc:	add	r3, r3, #1
   17800:	movwlt	r2, #1
   17804:	ldr	ip, [sp, #84]	; 0x54
   17808:	str	r7, [sp, #80]	; 0x50
   1780c:	b	176bc <__assert_fail@plt+0x60b4>
   17810:	ldr	r1, [sp, #88]	; 0x58
   17814:	subs	r0, r5, #45	; 0x2d
   17818:	bicne	r0, r9, r9, asr #31
   1781c:	cmp	r0, #1
   17820:	mov	r6, r0
   17824:	movls	r6, #1
   17828:	sub	r1, r1, lr
   1782c:	cmp	r6, r1
   17830:	bcs	18178 <__assert_fail@plt+0x6b70>
   17834:	ldr	ip, [sp, #84]	; 0x54
   17838:	mov	r4, #-2147483648	; 0x80000000
   1783c:	cmp	ip, #0
   17840:	beq	17bec <__assert_fail@plt+0x65e4>
   17844:	cmp	r0, #2
   17848:	bcc	16b70 <__assert_fail@plt+0x5568>
   1784c:	uxtb	r1, r5
   17850:	sub	r4, r0, #1
   17854:	cmp	r1, #48	; 0x30
   17858:	cmpne	r1, #43	; 0x2b
   1785c:	bne	16b48 <__assert_fail@plt+0x5540>
   17860:	mov	r0, ip
   17864:	mov	r1, #48	; 0x30
   17868:	b	16b50 <__assert_fail@plt+0x5548>
   1786c:	ldr	r2, [sp, #72]	; 0x48
   17870:	ldr	ip, [sp, #84]	; 0x54
   17874:	mov	r3, #11
   17878:	mov	r7, #1
   1787c:	ldr	r2, [r2, #16]
   17880:	mul	r2, r2, r3
   17884:	mov	r3, #1
   17888:	str	r3, [sp, #80]	; 0x50
   1788c:	add	r3, r7, r2, asr #5
   17890:	mov	r2, #0
   17894:	b	176bc <__assert_fail@plt+0x60b4>
   17898:	ldr	r2, [sp, #72]	; 0x48
   1789c:	mov	r0, #28
   178a0:	add	r1, sp, #96	; 0x60
   178a4:	str	lr, [sp, #76]	; 0x4c
   178a8:	mov	r4, r1
   178ac:	mov	r3, r2
   178b0:	add	r2, r2, #16
   178b4:	vld1.32	{d16-d17}, [r3], r0
   178b8:	vld1.32	{d18-d19}, [r2]
   178bc:	add	r2, r1, #16
   178c0:	vld1.32	{d20-d21}, [r3]
   178c4:	vst1.64	{d16-d17}, [r4], r0
   178c8:	mvn	r0, #0
   178cc:	vst1.64	{d18-d19}, [r2]
   178d0:	vst1.32	{d20-d21}, [r4]
   178d4:	str	r0, [r4]
   178d8:	ldr	r0, [fp, #20]
   178dc:	bl	1a434 <__assert_fail@plt+0x8e2c>
   178e0:	ldr	r1, [r4]
   178e4:	cmp	r1, #0
   178e8:	blt	18194 <__assert_fail@plt+0x6b8c>
   178ec:	ldr	r1, [sp, #24]
   178f0:	lsr	r2, r0, #31
   178f4:	mov	r3, r0
   178f8:	movw	r7, #26215	; 0x6667
   178fc:	cmp	r0, #0
   17900:	movt	r7, #26214	; 0x6666
   17904:	smmul	r7, r3, r7
   17908:	asr	r6, r7, #2
   1790c:	add	r7, r6, r7, lsr #31
   17910:	add	r6, r7, r7, lsl #2
   17914:	sub	r6, r3, r6, lsl #1
   17918:	add	r3, r3, #9
   1791c:	rsblt	r6, r6, #0
   17920:	cmp	r3, #18
   17924:	mov	r3, r7
   17928:	add	r6, r6, #48	; 0x30
   1792c:	strb	r6, [r1], #-1
   17930:	bhi	178f8 <__assert_fail@plt+0x62f0>
   17934:	ldr	lr, [sp, #76]	; 0x4c
   17938:	ldr	ip, [sp, #84]	; 0x54
   1793c:	cmp	r9, #0
   17940:	add	r8, r1, #1
   17944:	mov	r4, #0
   17948:	movwlt	r9, #1
   1794c:	cmp	r5, #0
   17950:	movweq	r5, #48	; 0x30
   17954:	mov	r3, r9
   17958:	b	1774c <__assert_fail@plt+0x6144>
   1795c:	ldr	r1, [sp, #88]	; 0x58
   17960:	subs	r0, r5, #45	; 0x2d
   17964:	bicne	r0, r9, r9, asr #31
   17968:	cmp	r0, #1
   1796c:	mov	r6, r0
   17970:	movls	r6, #1
   17974:	sub	r1, r1, lr
   17978:	cmp	r6, r1
   1797c:	bcs	18178 <__assert_fail@plt+0x6b70>
   17980:	ldr	ip, [sp, #84]	; 0x54
   17984:	mov	r4, #-2147483648	; 0x80000000
   17988:	cmp	ip, #0
   1798c:	beq	17bec <__assert_fail@plt+0x65e4>
   17990:	cmp	r0, #2
   17994:	bcc	16ba0 <__assert_fail@plt+0x5598>
   17998:	uxtb	r1, r5
   1799c:	sub	r4, r0, #1
   179a0:	cmp	r1, #48	; 0x30
   179a4:	cmpne	r1, #43	; 0x2b
   179a8:	bne	16b78 <__assert_fail@plt+0x5570>
   179ac:	mov	r0, ip
   179b0:	mov	r1, #48	; 0x30
   179b4:	b	16b80 <__assert_fail@plt+0x5578>
   179b8:	ldr	r2, [sp, #72]	; 0x48
   179bc:	movw	r3, #9363	; 0x2493
   179c0:	movt	r3, #37449	; 0x9249
   179c4:	ldr	r2, [r2, #24]
   179c8:	add	r2, r2, #6
   179cc:	smmla	r3, r2, r3, r2
   179d0:	asr	r7, r3, #2
   179d4:	add	r3, r7, r3, lsr #31
   179d8:	rsb	r3, r3, r3, lsl #3
   179dc:	sub	r2, r2, r3
   179e0:	add	r3, r2, #1
   179e4:	mov	r2, #1
   179e8:	b	176b0 <__assert_fail@plt+0x60a8>
   179ec:	cmp	r0, #69	; 0x45
   179f0:	beq	17a0c <__assert_fail@plt+0x6404>
   179f4:	ldr	r2, [sp, #72]	; 0x48
   179f8:	ldr	r3, [r2, #24]
   179fc:	mov	r2, #1
   17a00:	b	176b0 <__assert_fail@plt+0x60a8>
   17a04:	cmp	r0, #79	; 0x4f
   17a08:	bne	17dd0 <__assert_fail@plt+0x67c8>
   17a0c:	ldr	ip, [sp, #84]	; 0x54
   17a10:	mov	r8, sl
   17a14:	ldr	r1, [sp, #80]	; 0x50
   17a18:	subs	r7, r5, #45	; 0x2d
   17a1c:	bicne	r7, r9, r9, asr #31
   17a20:	sub	r0, r8, r1
   17a24:	add	r6, r0, #1
   17a28:	ldr	r0, [sp, #88]	; 0x58
   17a2c:	cmp	r7, r6
   17a30:	mov	r4, r6
   17a34:	movhi	r4, r7
   17a38:	sub	r0, r0, lr
   17a3c:	cmp	r4, r0
   17a40:	bcs	18178 <__assert_fail@plt+0x6b70>
   17a44:	cmp	ip, #0
   17a48:	beq	17a7c <__assert_fail@plt+0x6474>
   17a4c:	cmp	r7, r6
   17a50:	mov	r9, ip
   17a54:	bls	17aa8 <__assert_fail@plt+0x64a0>
   17a58:	uxtb	r0, r5
   17a5c:	mov	sl, lr
   17a60:	sub	r9, r7, r6
   17a64:	cmp	r0, #48	; 0x30
   17a68:	cmpne	r0, #43	; 0x2b
   17a6c:	bne	17a84 <__assert_fail@plt+0x647c>
   17a70:	mov	r0, ip
   17a74:	mov	r1, #48	; 0x30
   17a78:	b	17a8c <__assert_fail@plt+0x6484>
   17a7c:	mov	ip, #0
   17a80:	b	17b20 <__assert_fail@plt+0x6518>
   17a84:	mov	r0, ip
   17a88:	mov	r1, #32
   17a8c:	mov	r2, r9
   17a90:	mov	r5, ip
   17a94:	bl	1150c <memset@plt>
   17a98:	ldr	r1, [sp, #80]	; 0x50
   17a9c:	add	r9, r5, r9
   17aa0:	mov	lr, sl
   17aa4:	mov	ip, r5
   17aa8:	ldr	r0, [sp, #92]	; 0x5c
   17aac:	tst	r0, #1
   17ab0:	beq	17b08 <__assert_fail@plt+0x6500>
   17ab4:	cmp	r6, #0
   17ab8:	beq	17b1c <__assert_fail@plt+0x6514>
   17abc:	add	r0, r8, #1
   17ac0:	sub	r5, r1, r8
   17ac4:	mov	sl, lr
   17ac8:	sub	r0, r0, r1
   17acc:	cmp	r7, r0
   17ad0:	movhi	r0, r7
   17ad4:	add	r0, ip, r0
   17ad8:	sub	r7, r0, #1
   17adc:	bl	1147c <__ctype_toupper_loc@plt>
   17ae0:	ldr	r3, [sp, #80]	; 0x50
   17ae4:	mov	lr, sl
   17ae8:	ldrb	r1, [r3, -r5]
   17aec:	ldr	r2, [r0]
   17af0:	add	r5, r5, #1
   17af4:	cmp	r5, #1
   17af8:	ldr	r1, [r2, r1, lsl #2]
   17afc:	strb	r1, [r7], #-1
   17b00:	bne	17ae8 <__assert_fail@plt+0x64e0>
   17b04:	b	17b1c <__assert_fail@plt+0x6514>
   17b08:	mov	r0, r9
   17b0c:	mov	r2, r6
   17b10:	mov	r5, lr
   17b14:	bl	1135c <memcpy@plt>
   17b18:	mov	lr, r5
   17b1c:	add	ip, r9, r6
   17b20:	add	lr, r4, lr
   17b24:	mov	sl, r8
   17b28:	mov	r4, #-2147483648	; 0x80000000
   17b2c:	b	1813c <__assert_fail@plt+0x6b34>
   17b30:	cmp	r0, #69	; 0x45
   17b34:	bne	17ddc <__assert_fail@plt+0x67d4>
   17b38:	mov	r6, #0
   17b3c:	mov	r1, #121	; 0x79
   17b40:	b	17f0c <__assert_fail@plt+0x6904>
   17b44:	ldr	r3, [sp, #72]	; 0x48
   17b48:	ldr	r0, [sp, #92]	; 0x5c
   17b4c:	b	18100 <__assert_fail@plt+0x6af8>
   17b50:	mov	ip, #0
   17b54:	ldr	r1, [sp, #92]	; 0x5c
   17b58:	sub	r3, r3, r6
   17b5c:	add	lr, r6, lr
   17b60:	ldr	r0, [sp, #88]	; 0x58
   17b64:	sub	r0, r0, lr
   17b68:	cmp	r0, #2
   17b6c:	bcc	18178 <__assert_fail@plt+0x6b70>
   17b70:	cmp	ip, #0
   17b74:	sub	r3, r3, #1
   17b78:	add	lr, lr, #1
   17b7c:	strbne	r7, [ip], #1
   17b80:	moveq	ip, #0
   17b84:	ldr	r0, [sp, #88]	; 0x58
   17b88:	cmp	r5, #45	; 0x2d
   17b8c:	mov	r6, r9
   17b90:	bicne	r4, r3, r3, asr #31
   17b94:	cmp	r4, r9
   17b98:	movhi	r6, r4
   17b9c:	sub	r0, r0, lr
   17ba0:	cmp	r6, r0
   17ba4:	bcs	18178 <__assert_fail@plt+0x6b70>
   17ba8:	cmp	ip, #0
   17bac:	beq	17be4 <__assert_fail@plt+0x65dc>
   17bb0:	str	sl, [sp, #80]	; 0x50
   17bb4:	cmp	r4, r9
   17bb8:	mov	sl, ip
   17bbc:	bls	17c18 <__assert_fail@plt+0x6610>
   17bc0:	cmp	r5, #48	; 0x30
   17bc4:	mov	r7, lr
   17bc8:	sub	sl, r4, r9
   17bcc:	str	r1, [sp, #92]	; 0x5c
   17bd0:	cmpne	r5, #43	; 0x2b
   17bd4:	bne	17bf4 <__assert_fail@plt+0x65ec>
   17bd8:	mov	r0, ip
   17bdc:	mov	r1, #48	; 0x30
   17be0:	b	17bfc <__assert_fail@plt+0x65f4>
   17be4:	mov	ip, #0
   17be8:	b	18134 <__assert_fail@plt+0x6b2c>
   17bec:	mov	ip, #0
   17bf0:	b	18138 <__assert_fail@plt+0x6b30>
   17bf4:	mov	r0, ip
   17bf8:	mov	r1, #32
   17bfc:	mov	r2, sl
   17c00:	mov	r5, ip
   17c04:	bl	1150c <memset@plt>
   17c08:	ldr	r1, [sp, #92]	; 0x5c
   17c0c:	add	sl, r5, sl
   17c10:	mov	lr, r7
   17c14:	mov	ip, r5
   17c18:	tst	r1, #1
   17c1c:	beq	17c6c <__assert_fail@plt+0x6664>
   17c20:	cmp	r9, #0
   17c24:	beq	17c84 <__assert_fail@plt+0x667c>
   17c28:	ldr	r0, [sp, #28]
   17c2c:	cmp	r4, r9
   17c30:	sub	r7, r8, #1
   17c34:	movls	r4, r9
   17c38:	add	r5, r0, r8
   17c3c:	add	r0, ip, r4
   17c40:	mov	r8, lr
   17c44:	sub	r4, r0, #1
   17c48:	bl	1147c <__ctype_toupper_loc@plt>
   17c4c:	mov	lr, r8
   17c50:	ldrb	r1, [r7, -r5]
   17c54:	ldr	r2, [r0]
   17c58:	adds	r5, r5, #1
   17c5c:	ldr	r1, [r2, r1, lsl #2]
   17c60:	strb	r1, [r4], #-1
   17c64:	bne	17c50 <__assert_fail@plt+0x6648>
   17c68:	b	17c84 <__assert_fail@plt+0x667c>
   17c6c:	mov	r0, sl
   17c70:	mov	r1, r8
   17c74:	mov	r2, r9
   17c78:	mov	r4, lr
   17c7c:	bl	1135c <memcpy@plt>
   17c80:	mov	lr, r4
   17c84:	add	ip, sl, r9
   17c88:	ldr	sl, [sp, #80]	; 0x50
   17c8c:	b	18134 <__assert_fail@plt+0x6b2c>
   17c90:	sub	r2, r2, #1
   17c94:	movw	r4, #365	; 0x16d
   17c98:	tst	r2, #3
   17c9c:	bne	17ce0 <__assert_fail@plt+0x66d8>
   17ca0:	movw	r4, #34079	; 0x851f
   17ca4:	movt	r4, #20971	; 0x51eb
   17ca8:	smmul	r4, r2, r4
   17cac:	asr	r7, r4, #5
   17cb0:	add	r3, r7, r4, lsr #31
   17cb4:	mov	r7, #100	; 0x64
   17cb8:	mls	r3, r3, r7, r2
   17cbc:	asr	r7, r4, #7
   17cc0:	add	r4, r7, r4, lsr #31
   17cc4:	mov	r7, #400	; 0x190
   17cc8:	mls	r2, r4, r7, r2
   17ccc:	movw	r4, #365	; 0x16d
   17cd0:	cmp	r2, #0
   17cd4:	movweq	r4, #366	; 0x16e
   17cd8:	cmp	r3, #0
   17cdc:	movwne	r4, #366	; 0x16e
   17ce0:	add	r2, r4, lr
   17ce4:	movw	r4, #382	; 0x17e
   17ce8:	mov	r7, r6
   17cec:	sub	r3, r4, r8
   17cf0:	add	r2, r3, r2
   17cf4:	smmla	r2, r2, r6, r2
   17cf8:	asr	r4, r2, #2
   17cfc:	add	r2, r4, r2, lsr #31
   17d00:	rsb	r2, r2, r2, lsl #3
   17d04:	sub	r2, r2, r3
   17d08:	mvn	r3, #0
   17d0c:	add	r4, r2, #3
   17d10:	ldr	ip, [sp, #84]	; 0x54
   17d14:	ldr	lr, [sp, #80]	; 0x50
   17d18:	cmp	r1, #71	; 0x47
   17d1c:	beq	17e20 <__assert_fail@plt+0x6818>
   17d20:	cmp	r1, #103	; 0x67
   17d24:	bne	17e50 <__assert_fail@plt+0x6848>
   17d28:	movw	r2, #34079	; 0x851f
   17d2c:	movt	r2, #20971	; 0x51eb
   17d30:	smmul	r7, lr, r2
   17d34:	asr	r6, r7, #5
   17d38:	add	r7, r6, r7, lsr #31
   17d3c:	mov	r6, #100	; 0x64
   17d40:	mls	r7, r7, r6, lr
   17d44:	add	r7, r3, r7
   17d48:	smmul	r2, r7, r2
   17d4c:	asr	r4, r2, #5
   17d50:	add	r2, r4, r2, lsr #31
   17d54:	mls	r7, r2, r6, r7
   17d58:	mov	r2, #2
   17d5c:	str	r2, [sp, #80]	; 0x50
   17d60:	mov	r2, #0
   17d64:	cmn	r7, #1
   17d68:	ble	16938 <__assert_fail@plt+0x5330>
   17d6c:	mov	r3, r7
   17d70:	b	16950 <__assert_fail@plt+0x5348>
   17d74:	ldr	r2, [sp, #72]	; 0x48
   17d78:	movw	r6, #63636	; 0xf894
   17d7c:	mov	r3, #0
   17d80:	mvn	r4, #98	; 0x62
   17d84:	movt	r6, #65535	; 0xffff
   17d88:	ldr	r7, [r2, #20]
   17d8c:	mov	r2, #0
   17d90:	cmp	r7, r6
   17d94:	movwge	r3, #1
   17d98:	cmp	r7, r6
   17d9c:	and	r3, r3, r7, lsr #31
   17da0:	movwlt	r2, #1
   17da4:	smlabb	r3, r3, r4, r7
   17da8:	movw	r4, #34079	; 0x851f
   17dac:	mov	r7, #2
   17db0:	movt	r4, #20971	; 0x51eb
   17db4:	smmul	r3, r3, r4
   17db8:	asr	r4, r3, #5
   17dbc:	add	r3, r4, r3, lsr #31
   17dc0:	add	r3, r3, #19
   17dc4:	ldr	ip, [sp, #84]	; 0x54
   17dc8:	str	r7, [sp, #80]	; 0x50
   17dcc:	b	16954 <__assert_fail@plt+0x534c>
   17dd0:	mov	r6, #0
   17dd4:	mov	r1, #120	; 0x78
   17dd8:	b	17f0c <__assert_fail@plt+0x6904>
   17ddc:	ldr	r2, [sp, #72]	; 0x48
   17de0:	ldr	r7, [r2, #20]
   17de4:	movw	r2, #34079	; 0x851f
   17de8:	movt	r2, #20971	; 0x51eb
   17dec:	smmul	r2, r7, r2
   17df0:	asr	r3, r2, #5
   17df4:	add	r2, r3, r2, lsr #31
   17df8:	mov	r3, #100	; 0x64
   17dfc:	mls	r6, r2, r3, r7
   17e00:	mov	r2, #0
   17e04:	mov	r3, #2
   17e08:	cmn	r6, #1
   17e0c:	ble	169a4 <__assert_fail@plt+0x539c>
   17e10:	ldr	ip, [sp, #84]	; 0x54
   17e14:	str	r3, [sp, #80]	; 0x50
   17e18:	mov	r3, r6
   17e1c:	b	16954 <__assert_fail@plt+0x534c>
   17e20:	movw	r2, #63636	; 0xf894
   17e24:	movt	r2, #65535	; 0xffff
   17e28:	sub	r7, r2, r3
   17e2c:	add	r3, lr, r3
   17e30:	mov	r2, #0
   17e34:	cmp	lr, r7
   17e38:	movw	r7, #1900	; 0x76c
   17e3c:	add	r3, r3, r7
   17e40:	mov	r7, #4
   17e44:	movwlt	r2, #1
   17e48:	str	r7, [sp, #80]	; 0x50
   17e4c:	b	16950 <__assert_fail@plt+0x5348>
   17e50:	smmla	r2, r4, r7, r4
   17e54:	ldr	lr, [sp, #76]	; 0x4c
   17e58:	asr	r3, r2, #2
   17e5c:	add	r2, r3, r2, lsr #31
   17e60:	add	r3, r2, #1
   17e64:	mov	r2, #2
   17e68:	str	r2, [sp, #80]	; 0x50
   17e6c:	b	176b8 <__assert_fail@plt+0x60b0>
   17e70:	mov	ip, #0
   17e74:	b	16b3c <__assert_fail@plt+0x5534>
   17e78:	ldr	ip, [sp, #84]	; 0x54
   17e7c:	mov	r2, #1
   17e80:	cmp	r6, #3
   17e84:	bhi	17208 <__assert_fail@plt+0x5c00>
   17e88:	mov	r8, ip
   17e8c:	movw	ip, #34953	; 0x8889
   17e90:	movt	ip, #34952	; 0x8888
   17e94:	smmla	r4, lr, ip, lr
   17e98:	asr	r3, r4, #5
   17e9c:	add	r4, r3, r4, lsr #31
   17ea0:	smmla	r3, r4, ip, r4
   17ea4:	asr	r7, r3, #5
   17ea8:	add	r3, r7, r3, lsr #31
   17eac:	rsb	r3, r3, r3, lsl #4
   17eb0:	sub	ip, r4, r3, lsl #2
   17eb4:	movw	r3, #46021	; 0xb3c5
   17eb8:	rsb	r4, r4, r4, lsl #4
   17ebc:	movt	r3, #37282	; 0x91a2
   17ec0:	smmla	r3, lr, r3, lr
   17ec4:	asr	r7, r3, #11
   17ec8:	add	r3, r7, r3, lsr #31
   17ecc:	sub	r7, lr, r4, lsl #2
   17ed0:	add	r4, pc, #0
   17ed4:	ldr	pc, [r4, r6, lsl #2]
   17ed8:	andeq	r7, r1, r8, ror #29
   17edc:			; <UNDEFINED> instruction: 0x00016bb4
   17ee0:	andeq	r6, r1, ip, asr #19
   17ee4:	andeq	r6, r1, r4, asr #19
   17ee8:	mov	r7, #100	; 0x64
   17eec:	mla	r3, r3, r7, ip
   17ef0:	mov	r7, #5
   17ef4:	str	r7, [sp, #80]	; 0x50
   17ef8:	mov	r4, #1
   17efc:	mov	r7, #0
   17f00:	b	16bcc <__assert_fail@plt+0x55c4>
   17f04:	mov	r6, #0
   17f08:	mov	r1, #89	; 0x59
   17f0c:	movw	r2, #9504	; 0x2520
   17f10:	cmp	r0, #0
   17f14:	ldr	r3, [sp, #72]	; 0x48
   17f18:	str	lr, [sp, #76]	; 0x4c
   17f1c:	strh	r2, [fp, #-53]	; 0xffffffcb
   17f20:	ldr	r2, [sp, #68]	; 0x44
   17f24:	strbne	r0, [fp, #-51]	; 0xffffffcd
   17f28:	mov	r0, #0
   17f2c:	ldrne	r2, [sp, #52]	; 0x34
   17f30:	strb	r0, [r2, #1]
   17f34:	strb	r1, [r2]
   17f38:	add	r0, sp, #96	; 0x60
   17f3c:	sub	r2, fp, #53	; 0x35
   17f40:	mov	r1, #1024	; 0x400
   17f44:	bl	11458 <strftime@plt>
   17f48:	cmp	r0, #0
   17f4c:	beq	17fb4 <__assert_fail@plt+0x69ac>
   17f50:	subs	r8, r5, #45	; 0x2d
   17f54:	ldr	lr, [sp, #76]	; 0x4c
   17f58:	movne	r8, r9
   17f5c:	cmp	r9, #0
   17f60:	sub	r9, r0, #1
   17f64:	ldr	r0, [sp, #88]	; 0x58
   17f68:	movwlt	r8, #0
   17f6c:	mov	r7, r9
   17f70:	cmp	r8, r9
   17f74:	movhi	r7, r8
   17f78:	sub	r0, r0, lr
   17f7c:	cmp	r7, r0
   17f80:	bcs	18178 <__assert_fail@plt+0x6b70>
   17f84:	ldr	r0, [sp, #84]	; 0x54
   17f88:	cmp	r0, #0
   17f8c:	beq	17fc8 <__assert_fail@plt+0x69c0>
   17f90:	cmp	r8, r9
   17f94:	mov	ip, r0
   17f98:	bls	17ff4 <__assert_fail@plt+0x69ec>
   17f9c:	cmp	r5, #48	; 0x30
   17fa0:	sub	r4, r8, r9
   17fa4:	cmpne	r5, #43	; 0x2b
   17fa8:	bne	17fd8 <__assert_fail@plt+0x69d0>
   17fac:	mov	r1, #48	; 0x30
   17fb0:	b	17fdc <__assert_fail@plt+0x69d4>
   17fb4:	ldr	lr, [sp, #76]	; 0x4c
   17fb8:	ldr	ip, [sp, #84]	; 0x54
   17fbc:	movw	r6, #52428	; 0xcccc
   17fc0:	mov	r4, #-2147483648	; 0x80000000
   17fc4:	b	18140 <__assert_fail@plt+0x6b38>
   17fc8:	movw	r6, #52428	; 0xcccc
   17fcc:	mov	ip, #0
   17fd0:	movt	r6, #3276	; 0xccc
   17fd4:	b	180d0 <__assert_fail@plt+0x6ac8>
   17fd8:	mov	r1, #32
   17fdc:	mov	r2, r4
   17fe0:	mov	r5, r0
   17fe4:	bl	1150c <memset@plt>
   17fe8:	ldr	lr, [sp, #76]	; 0x4c
   17fec:	add	ip, r5, r4
   17ff0:	mov	r0, r5
   17ff4:	tst	r6, #1
   17ff8:	beq	18050 <__assert_fail@plt+0x6a48>
   17ffc:	movw	r6, #52428	; 0xcccc
   18000:	cmp	r9, #0
   18004:	movt	r6, #3276	; 0xccc
   18008:	beq	180cc <__assert_fail@plt+0x6ac4>
   1800c:	cmp	r8, r9
   18010:	mov	r4, ip
   18014:	movls	r8, r9
   18018:	add	r0, r0, r8
   1801c:	sub	r5, r0, #1
   18020:	bl	11470 <__ctype_tolower_loc@plt>
   18024:	ldr	lr, [sp, #76]	; 0x4c
   18028:	mov	ip, r4
   1802c:	add	r4, sp, #96	; 0x60
   18030:	mov	r1, r9
   18034:	ldrb	r2, [r4, r1]
   18038:	ldr	r3, [r0]
   1803c:	subs	r1, r1, #1
   18040:	ldr	r2, [r3, r2, lsl #2]
   18044:	strb	r2, [r5], #-1
   18048:	bne	18034 <__assert_fail@plt+0x6a2c>
   1804c:	b	180cc <__assert_fail@plt+0x6ac4>
   18050:	ldr	r1, [sp, #92]	; 0x5c
   18054:	movw	r6, #52428	; 0xcccc
   18058:	movt	r6, #3276	; 0xccc
   1805c:	tst	r1, #1
   18060:	beq	180b0 <__assert_fail@plt+0x6aa8>
   18064:	cmp	r9, #0
   18068:	beq	180cc <__assert_fail@plt+0x6ac4>
   1806c:	cmp	r8, r9
   18070:	mov	r4, ip
   18074:	movls	r8, r9
   18078:	add	r0, r0, r8
   1807c:	sub	r5, r0, #1
   18080:	bl	1147c <__ctype_toupper_loc@plt>
   18084:	ldr	lr, [sp, #76]	; 0x4c
   18088:	mov	ip, r4
   1808c:	add	r4, sp, #96	; 0x60
   18090:	mov	r1, r9
   18094:	ldrb	r2, [r4, r1]
   18098:	ldr	r3, [r0]
   1809c:	subs	r1, r1, #1
   180a0:	ldr	r2, [r3, r2, lsl #2]
   180a4:	strb	r2, [r5], #-1
   180a8:	bne	18094 <__assert_fail@plt+0x6a8c>
   180ac:	b	180cc <__assert_fail@plt+0x6ac4>
   180b0:	ldr	r1, [sp, #32]
   180b4:	mov	r0, ip
   180b8:	mov	r2, r9
   180bc:	mov	r4, ip
   180c0:	bl	1135c <memcpy@plt>
   180c4:	ldr	lr, [sp, #76]	; 0x4c
   180c8:	mov	ip, r4
   180cc:	add	ip, ip, r9
   180d0:	add	lr, r7, lr
   180d4:	mov	r4, #-2147483648	; 0x80000000
   180d8:	b	18144 <__assert_fail@plt+0x6b3c>
   180dc:	mov	r0, ip
   180e0:	mov	r1, #32
   180e4:	ldr	r2, [sp, #80]	; 0x50
   180e8:	bl	1150c <memset@plt>
   180ec:	ldr	r1, [sp, #80]	; 0x50
   180f0:	ldr	ip, [sp, #84]	; 0x54
   180f4:	ldr	r3, [sp, #72]	; 0x48
   180f8:	ldr	r0, [sp, #92]	; 0x5c
   180fc:	add	ip, ip, r1
   18100:	stm	sp, {r0, r5, r8}
   18104:	ldr	r0, [fp, #20]
   18108:	mov	r2, r4
   1810c:	mov	r1, r9
   18110:	mov	r4, ip
   18114:	str	r0, [sp, #12]
   18118:	ldr	r0, [fp, #24]
   1811c:	str	r0, [sp, #16]
   18120:	mov	r0, ip
   18124:	bl	16838 <__assert_fail@plt+0x5230>
   18128:	ldr	lr, [sp, #76]	; 0x4c
   1812c:	mov	ip, r4
   18130:	add	ip, r4, r7
   18134:	mov	r4, #-2147483648	; 0x80000000
   18138:	add	lr, r6, lr
   1813c:	movw	r6, #52428	; 0xcccc
   18140:	movt	r6, #3276	; 0xccc
   18144:	ldrb	r3, [sl, #1]!
   18148:	mvn	r9, #0
   1814c:	cmp	r3, #0
   18150:	bne	16c4c <__assert_fail@plt+0x5644>
   18154:	ldr	r0, [sp, #88]	; 0x58
   18158:	ldr	r1, [sp, #56]	; 0x38
   1815c:	cmp	r0, #0
   18160:	cmpne	ip, #0
   18164:	movne	r0, #0
   18168:	strbne	r0, [ip]
   1816c:	ldr	r0, [sp, #60]	; 0x3c
   18170:	str	r1, [r0]
   18174:	b	18188 <__assert_fail@plt+0x6b80>
   18178:	mov	r0, #34	; 0x22
   1817c:	ldr	r1, [sp, #60]	; 0x3c
   18180:	mov	lr, #0
   18184:	str	r0, [r1]
   18188:	mov	r0, lr
   1818c:	sub	sp, fp, #28
   18190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18194:	mov	r0, #75	; 0x4b
   18198:	b	1817c <__assert_fail@plt+0x6b74>
   1819c:	push	{r4, r5, fp, lr}
   181a0:	add	fp, sp, #8
   181a4:	cmp	r0, #0
   181a8:	beq	1823c <__assert_fail@plt+0x6c34>
   181ac:	mov	r1, #47	; 0x2f
   181b0:	mov	r4, r0
   181b4:	bl	11584 <strrchr@plt>
   181b8:	cmp	r0, #0
   181bc:	mov	r5, r4
   181c0:	addne	r5, r0, #1
   181c4:	sub	r0, r5, r4
   181c8:	cmp	r0, #7
   181cc:	blt	18220 <__assert_fail@plt+0x6c18>
   181d0:	movw	r1, #805	; 0x325
   181d4:	sub	r0, r5, #7
   181d8:	mov	r2, #7
   181dc:	movt	r1, #2
   181e0:	bl	115e4 <strncmp@plt>
   181e4:	cmp	r0, #0
   181e8:	bne	18220 <__assert_fail@plt+0x6c18>
   181ec:	movw	r1, #813	; 0x32d
   181f0:	mov	r0, r5
   181f4:	mov	r2, #3
   181f8:	movt	r1, #2
   181fc:	bl	115e4 <strncmp@plt>
   18200:	cmp	r0, #0
   18204:	beq	18210 <__assert_fail@plt+0x6c08>
   18208:	mov	r4, r5
   1820c:	b	18220 <__assert_fail@plt+0x6c18>
   18210:	movw	r0, #4536	; 0x11b8
   18214:	add	r4, r5, #3
   18218:	movt	r0, #3
   1821c:	str	r4, [r0]
   18220:	movw	r0, #4540	; 0x11bc
   18224:	movt	r0, #3
   18228:	str	r4, [r0]
   1822c:	movw	r0, #4768	; 0x12a0
   18230:	movt	r0, #3
   18234:	str	r4, [r0]
   18238:	pop	{r4, r5, fp, pc}
   1823c:	movw	r0, #4552	; 0x11c8
   18240:	mov	r1, #55	; 0x37
   18244:	mov	r2, #1
   18248:	movt	r0, #3
   1824c:	ldr	r3, [r0]
   18250:	movw	r0, #749	; 0x2ed
   18254:	movt	r0, #2
   18258:	bl	113ec <fwrite@plt>
   1825c:	bl	115f0 <abort@plt>
   18260:	push	{r4, r5, r6, sl, fp, lr}
   18264:	add	fp, sp, #16
   18268:	mov	r4, r0
   1826c:	movw	r0, #4776	; 0x12a8
   18270:	movt	r0, #3
   18274:	cmp	r4, #0
   18278:	moveq	r4, r0
   1827c:	bl	114e8 <__errno_location@plt>
   18280:	ldr	r6, [r0]
   18284:	mov	r5, r0
   18288:	mov	r0, r4
   1828c:	mov	r1, #48	; 0x30
   18290:	bl	1b0e4 <__assert_fail@plt+0x9adc>
   18294:	str	r6, [r5]
   18298:	pop	{r4, r5, r6, sl, fp, pc}
   1829c:	movw	r1, #4776	; 0x12a8
   182a0:	cmp	r0, #0
   182a4:	movt	r1, #3
   182a8:	movne	r1, r0
   182ac:	ldr	r0, [r1]
   182b0:	bx	lr
   182b4:	movw	r2, #4776	; 0x12a8
   182b8:	cmp	r0, #0
   182bc:	movt	r2, #3
   182c0:	movne	r2, r0
   182c4:	str	r1, [r2]
   182c8:	bx	lr
   182cc:	movw	r3, #4776	; 0x12a8
   182d0:	cmp	r0, #0
   182d4:	movt	r3, #3
   182d8:	movne	r3, r0
   182dc:	ubfx	r0, r1, #5, #3
   182e0:	and	r1, r1, #31
   182e4:	add	r0, r3, r0, lsl #2
   182e8:	ldr	r3, [r0, #8]
   182ec:	eor	r2, r2, r3, lsr r1
   182f0:	and	r2, r2, #1
   182f4:	eor	r2, r3, r2, lsl r1
   182f8:	str	r2, [r0, #8]
   182fc:	mov	r0, #1
   18300:	and	r0, r0, r3, lsr r1
   18304:	bx	lr
   18308:	movw	r2, #4776	; 0x12a8
   1830c:	cmp	r0, #0
   18310:	movt	r2, #3
   18314:	movne	r2, r0
   18318:	ldr	r0, [r2, #4]
   1831c:	str	r1, [r2, #4]
   18320:	bx	lr
   18324:	movw	r3, #4776	; 0x12a8
   18328:	cmp	r0, #0
   1832c:	movt	r3, #3
   18330:	movne	r3, r0
   18334:	cmp	r1, #0
   18338:	mov	r0, #10
   1833c:	cmpne	r2, #0
   18340:	str	r0, [r3]
   18344:	bne	18354 <__assert_fail@plt+0x6d4c>
   18348:	push	{fp, lr}
   1834c:	mov	fp, sp
   18350:	bl	115f0 <abort@plt>
   18354:	str	r1, [r3, #40]	; 0x28
   18358:	str	r2, [r3, #44]	; 0x2c
   1835c:	bx	lr
   18360:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18364:	add	fp, sp, #28
   18368:	sub	sp, sp, #20
   1836c:	mov	r7, r0
   18370:	ldr	r0, [fp, #8]
   18374:	movw	r5, #4776	; 0x12a8
   18378:	mov	r8, r3
   1837c:	mov	r9, r2
   18380:	mov	sl, r1
   18384:	movt	r5, #3
   18388:	cmp	r0, #0
   1838c:	movne	r5, r0
   18390:	bl	114e8 <__errno_location@plt>
   18394:	mov	r4, r0
   18398:	ldm	r5, {r0, r1}
   1839c:	ldr	r2, [r5, #40]	; 0x28
   183a0:	ldr	r3, [r5, #44]	; 0x2c
   183a4:	add	r5, r5, #8
   183a8:	ldr	r6, [r4]
   183ac:	stm	sp, {r0, r1, r5}
   183b0:	str	r2, [sp, #12]
   183b4:	str	r3, [sp, #16]
   183b8:	mov	r0, r7
   183bc:	mov	r1, sl
   183c0:	mov	r2, r9
   183c4:	mov	r3, r8
   183c8:	bl	183d8 <__assert_fail@plt+0x6dd0>
   183cc:	str	r6, [r4]
   183d0:	sub	sp, fp, #28
   183d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183dc:	add	fp, sp, #28
   183e0:	sub	sp, sp, #156	; 0x9c
   183e4:	str	r0, [sp, #80]	; 0x50
   183e8:	ldr	r0, [fp, #12]
   183ec:	mov	r6, r1
   183f0:	mov	r9, r3
   183f4:	str	r2, [fp, #-84]	; 0xffffffac
   183f8:	and	r1, r0, #4
   183fc:	str	r1, [sp, #32]
   18400:	and	r1, r0, #1
   18404:	str	r1, [sp, #36]	; 0x24
   18408:	ubfx	r4, r0, #1, #1
   1840c:	bl	11404 <__ctype_get_mb_cur_max@plt>
   18410:	str	r0, [sp, #40]	; 0x28
   18414:	ldr	r0, [fp, #24]
   18418:	ldr	r7, [fp, #8]
   1841c:	mov	r1, #0
   18420:	mov	r5, #1
   18424:	str	r1, [fp, #-56]	; 0xffffffc8
   18428:	mov	r1, #0
   1842c:	str	r1, [sp, #60]	; 0x3c
   18430:	str	r0, [sp, #76]	; 0x4c
   18434:	ldr	r0, [fp, #20]
   18438:	str	r0, [sp, #72]	; 0x48
   1843c:	mov	r0, #0
   18440:	str	r0, [sp, #56]	; 0x38
   18444:	mov	r0, #0
   18448:	str	r0, [sp, #92]	; 0x5c
   1844c:	mov	r0, #0
   18450:	str	r0, [fp, #-76]	; 0xffffffb4
   18454:	mov	r0, #0
   18458:	cmp	r7, #10
   1845c:	bhi	193dc <__assert_fail@plt+0x7dd4>
   18460:	add	r1, pc, #28
   18464:	mov	sl, r6
   18468:	ldr	r6, [sp, #80]	; 0x50
   1846c:	ldr	ip, [fp, #-84]	; 0xffffffac
   18470:	mov	r8, #0
   18474:	mov	r2, #1
   18478:	mov	r3, #0
   1847c:	mov	lr, r9
   18480:	ldr	pc, [r1, r7, lsl #2]
   18484:	andeq	r8, r1, r8, ror #10
   18488:	muleq	r1, r4, r5
   1848c:	andeq	r8, r1, r8, asr r5
   18490:	andeq	r8, r1, r0, asr r5
   18494:	andeq	r8, r1, r8, lsl #11
   18498:	ldrdeq	r8, [r1], -ip
   1849c:	andeq	r8, r1, r8, ror r5
   184a0:	andeq	r8, r1, r8, lsr r6
   184a4:			; <UNDEFINED> instruction: 0x000184b0
   184a8:			; <UNDEFINED> instruction: 0x000184b0
   184ac:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   184b0:	movw	r0, #895	; 0x37f
   184b4:	mov	r1, r7
   184b8:	movt	r0, #2
   184bc:	bl	19de8 <__assert_fail@plt+0x87e0>
   184c0:	str	r0, [sp, #72]	; 0x48
   184c4:	movw	r0, #2028	; 0x7ec
   184c8:	mov	r1, r7
   184cc:	movt	r0, #2
   184d0:	bl	19de8 <__assert_fail@plt+0x87e0>
   184d4:	str	r0, [sp, #76]	; 0x4c
   184d8:	str	r5, [fp, #-48]	; 0xffffffd0
   184dc:	mov	r8, #0
   184e0:	mov	r5, r7
   184e4:	tst	r4, #1
   184e8:	bne	18520 <__assert_fail@plt+0x6f18>
   184ec:	ldr	r0, [sp, #72]	; 0x48
   184f0:	ldrb	r0, [r0]
   184f4:	cmp	r0, #0
   184f8:	beq	18520 <__assert_fail@plt+0x6f18>
   184fc:	ldr	r1, [sp, #72]	; 0x48
   18500:	mov	r8, #0
   18504:	add	r1, r1, #1
   18508:	cmp	r8, sl
   1850c:	strbcc	r0, [r6, r8]
   18510:	ldrb	r0, [r1, r8]
   18514:	add	r8, r8, #1
   18518:	cmp	r0, #0
   1851c:	bne	18508 <__assert_fail@plt+0x6f00>
   18520:	ldr	r7, [sp, #76]	; 0x4c
   18524:	mov	r0, r7
   18528:	bl	114b8 <strlen@plt>
   1852c:	str	r7, [sp, #92]	; 0x5c
   18530:	mov	r7, r5
   18534:	ldr	ip, [fp, #-84]	; 0xffffffac
   18538:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1853c:	str	r0, [fp, #-76]	; 0xffffffb4
   18540:	mov	r2, #1
   18544:	mov	r3, r4
   18548:	mov	lr, r9
   1854c:	b	18638 <__assert_fail@plt+0x7030>
   18550:	mov	r0, #1
   18554:	b	18594 <__assert_fail@plt+0x6f8c>
   18558:	tst	r4, #1
   1855c:	bne	18594 <__assert_fail@plt+0x6f8c>
   18560:	mov	r2, r0
   18564:	b	185bc <__assert_fail@plt+0x6fb4>
   18568:	mov	r7, #0
   1856c:	mov	r8, #0
   18570:	mov	r2, r0
   18574:	b	18634 <__assert_fail@plt+0x702c>
   18578:	mov	r0, #1
   1857c:	mov	r8, #0
   18580:	mov	r7, #5
   18584:	b	185f0 <__assert_fail@plt+0x6fe8>
   18588:	mov	r2, #1
   1858c:	tst	r4, #1
   18590:	beq	185bc <__assert_fail@plt+0x6fb4>
   18594:	mov	r1, #1
   18598:	mov	r8, #0
   1859c:	mov	r7, #2
   185a0:	mov	r2, r0
   185a4:	mov	r3, #1
   185a8:	str	r1, [fp, #-76]	; 0xffffffb4
   185ac:	movw	r1, #2028	; 0x7ec
   185b0:	movt	r1, #2
   185b4:	str	r1, [sp, #92]	; 0x5c
   185b8:	b	18638 <__assert_fail@plt+0x7030>
   185bc:	cmp	sl, #0
   185c0:	mov	r8, #1
   185c4:	mov	r7, #2
   185c8:	movne	r0, #39	; 0x27
   185cc:	strbne	r0, [r6]
   185d0:	movw	r0, #2028	; 0x7ec
   185d4:	movt	r0, #2
   185d8:	b	18628 <__assert_fail@plt+0x7020>
   185dc:	mov	r7, #5
   185e0:	tst	r4, #1
   185e4:	beq	1860c <__assert_fail@plt+0x7004>
   185e8:	mov	r0, #1
   185ec:	mov	r8, #0
   185f0:	str	r0, [fp, #-76]	; 0xffffffb4
   185f4:	movw	r0, #893	; 0x37d
   185f8:	mov	r2, #1
   185fc:	mov	r3, #1
   18600:	movt	r0, #2
   18604:	str	r0, [sp, #92]	; 0x5c
   18608:	b	18638 <__assert_fail@plt+0x7030>
   1860c:	cmp	sl, #0
   18610:	mov	r8, #1
   18614:	mov	r2, #1
   18618:	movne	r0, #34	; 0x22
   1861c:	strbne	r0, [r6]
   18620:	movw	r0, #893	; 0x37d
   18624:	movt	r0, #2
   18628:	str	r0, [sp, #92]	; 0x5c
   1862c:	mov	r0, #1
   18630:	str	r0, [fp, #-76]	; 0xffffffb4
   18634:	mov	r3, #0
   18638:	ldr	r0, [fp, #16]
   1863c:	str	r3, [fp, #-72]	; 0xffffffb8
   18640:	str	r7, [fp, #-64]	; 0xffffffc0
   18644:	str	r2, [sp, #84]	; 0x54
   18648:	cmp	r0, #0
   1864c:	movwne	r0, #1
   18650:	and	r0, r0, r3
   18654:	str	r0, [fp, #-88]	; 0xffffffa8
   18658:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1865c:	cmp	r0, #0
   18660:	movwne	r0, #1
   18664:	subs	r4, r7, #2
   18668:	mov	r7, #0
   1866c:	and	r1, r0, r3
   18670:	str	r4, [fp, #-80]	; 0xffffffb0
   18674:	and	r1, r2, r1
   18678:	str	r1, [sp, #48]	; 0x30
   1867c:	clz	r1, r4
   18680:	lsr	r1, r1, #5
   18684:	and	r1, r1, r3
   18688:	eor	r3, r3, #1
   1868c:	str	r1, [sp, #64]	; 0x40
   18690:	mov	r1, r4
   18694:	str	r3, [sp, #88]	; 0x58
   18698:	movwne	r1, #1
   1869c:	orr	r3, r1, r3
   186a0:	and	r1, r1, r2
   186a4:	and	r0, r0, r1
   186a8:	str	r3, [sp, #68]	; 0x44
   186ac:	str	r1, [fp, #-68]	; 0xffffffbc
   186b0:	str	r0, [fp, #-60]	; 0xffffffc4
   186b4:	eor	r0, r2, #1
   186b8:	str	r0, [sp, #52]	; 0x34
   186bc:	cmn	lr, #1
   186c0:	beq	186d0 <__assert_fail@plt+0x70c8>
   186c4:	cmp	r7, lr
   186c8:	bne	186dc <__assert_fail@plt+0x70d4>
   186cc:	b	19204 <__assert_fail@plt+0x7bfc>
   186d0:	ldrb	r0, [ip, r7]
   186d4:	cmp	r0, #0
   186d8:	beq	1920c <__assert_fail@plt+0x7c04>
   186dc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   186e0:	mov	r9, #0
   186e4:	str	r5, [fp, #-48]	; 0xffffffd0
   186e8:	cmp	r0, #0
   186ec:	beq	18720 <__assert_fail@plt+0x7118>
   186f0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   186f4:	add	r4, r7, r0
   186f8:	cmp	r0, #2
   186fc:	bcc	18718 <__assert_fail@plt+0x7110>
   18700:	cmn	lr, #1
   18704:	bne	18718 <__assert_fail@plt+0x7110>
   18708:	mov	r0, ip
   1870c:	bl	114b8 <strlen@plt>
   18710:	ldr	ip, [fp, #-84]	; 0xffffffac
   18714:	mov	lr, r0
   18718:	cmp	r4, lr
   1871c:	bls	18728 <__assert_fail@plt+0x7120>
   18720:	mov	r0, #0
   18724:	b	18768 <__assert_fail@plt+0x7160>
   18728:	ldr	r1, [sp, #92]	; 0x5c
   1872c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   18730:	add	r0, ip, r7
   18734:	mov	r4, lr
   18738:	bl	11380 <memcmp@plt>
   1873c:	ldr	r2, [sp, #88]	; 0x58
   18740:	cmp	r0, #0
   18744:	mov	r1, r0
   18748:	movwne	r1, #1
   1874c:	orr	r1, r1, r2
   18750:	tst	r1, #1
   18754:	beq	1929c <__assert_fail@plt+0x7c94>
   18758:	ldr	ip, [fp, #-84]	; 0xffffffac
   1875c:	clz	r0, r0
   18760:	mov	lr, r4
   18764:	lsr	r0, r0, #5
   18768:	str	r0, [fp, #-52]	; 0xffffffcc
   1876c:	ldrb	r5, [ip, r7]
   18770:	cmp	r5, #126	; 0x7e
   18774:	bhi	18b2c <__assert_fail@plt+0x7524>
   18778:	add	r3, pc, #16
   1877c:	mov	r4, #1
   18780:	mov	r2, #110	; 0x6e
   18784:	mov	r0, #97	; 0x61
   18788:	mov	r1, #0
   1878c:	ldr	pc, [r3, r5, lsl #2]
   18790:	andeq	r8, r1, r8, lsr #20
   18794:	andeq	r8, r1, ip, lsr #22
   18798:	andeq	r8, r1, ip, lsr #22
   1879c:	andeq	r8, r1, ip, lsr #22
   187a0:	andeq	r8, r1, ip, lsr #22
   187a4:	andeq	r8, r1, ip, lsr #22
   187a8:	andeq	r8, r1, ip, lsr #22
   187ac:	andeq	r8, r1, r0, ror #23
   187b0:	andeq	r8, r1, r8, lsl #20
   187b4:	andeq	r8, r1, r0, lsl #20
   187b8:	andeq	r8, r1, r4, lsl sl
   187bc:	muleq	r1, r4, sl
   187c0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187c4:	andeq	r8, r1, r0, lsl sl
   187c8:	andeq	r8, r1, ip, lsr #22
   187cc:	andeq	r8, r1, ip, lsr #22
   187d0:	andeq	r8, r1, ip, lsr #22
   187d4:	andeq	r8, r1, ip, lsr #22
   187d8:	andeq	r8, r1, ip, lsr #22
   187dc:	andeq	r8, r1, ip, lsr #22
   187e0:	andeq	r8, r1, ip, lsr #22
   187e4:	andeq	r8, r1, ip, lsr #22
   187e8:	andeq	r8, r1, ip, lsr #22
   187ec:	andeq	r8, r1, ip, lsr #22
   187f0:	andeq	r8, r1, ip, lsr #22
   187f4:	andeq	r8, r1, ip, lsr #22
   187f8:	andeq	r8, r1, ip, lsr #22
   187fc:	andeq	r8, r1, ip, lsr #22
   18800:	andeq	r8, r1, ip, lsr #22
   18804:	andeq	r8, r1, ip, lsr #22
   18808:	andeq	r8, r1, ip, lsr #22
   1880c:	andeq	r8, r1, ip, lsr #22
   18810:	muleq	r1, r8, fp
   18814:	muleq	r1, ip, fp
   18818:	muleq	r1, ip, fp
   1881c:	andeq	r8, r1, r0, lsr #19
   18820:	muleq	r1, ip, fp
   18824:	andeq	r8, r1, ip, lsl #19
   18828:	muleq	r1, ip, fp
   1882c:	muleq	r1, ip, sl
   18830:	muleq	r1, ip, fp
   18834:	muleq	r1, ip, fp
   18838:	muleq	r1, ip, fp
   1883c:	andeq	r8, r1, ip, lsl #19
   18840:	andeq	r8, r1, ip, lsl #19
   18844:	andeq	r8, r1, ip, lsl #19
   18848:	andeq	r8, r1, ip, lsl #19
   1884c:	andeq	r8, r1, ip, lsl #19
   18850:	andeq	r8, r1, ip, lsl #19
   18854:	andeq	r8, r1, ip, lsl #19
   18858:	andeq	r8, r1, ip, lsl #19
   1885c:	andeq	r8, r1, ip, lsl #19
   18860:	andeq	r8, r1, ip, lsl #19
   18864:	andeq	r8, r1, ip, lsl #19
   18868:	andeq	r8, r1, ip, lsl #19
   1886c:	andeq	r8, r1, ip, lsl #19
   18870:	andeq	r8, r1, ip, lsl #19
   18874:	andeq	r8, r1, ip, lsl #19
   18878:	andeq	r8, r1, ip, lsl #19
   1887c:	muleq	r1, ip, fp
   18880:	muleq	r1, ip, fp
   18884:	muleq	r1, ip, fp
   18888:	muleq	r1, ip, fp
   1888c:	andeq	r8, r1, r8, ror #20
   18890:	andeq	r8, r1, ip, lsr #22
   18894:	andeq	r8, r1, ip, lsl #19
   18898:	andeq	r8, r1, ip, lsl #19
   1889c:	andeq	r8, r1, ip, lsl #19
   188a0:	andeq	r8, r1, ip, lsl #19
   188a4:	andeq	r8, r1, ip, lsl #19
   188a8:	andeq	r8, r1, ip, lsl #19
   188ac:	andeq	r8, r1, ip, lsl #19
   188b0:	andeq	r8, r1, ip, lsl #19
   188b4:	andeq	r8, r1, ip, lsl #19
   188b8:	andeq	r8, r1, ip, lsl #19
   188bc:	andeq	r8, r1, ip, lsl #19
   188c0:	andeq	r8, r1, ip, lsl #19
   188c4:	andeq	r8, r1, ip, lsl #19
   188c8:	andeq	r8, r1, ip, lsl #19
   188cc:	andeq	r8, r1, ip, lsl #19
   188d0:	andeq	r8, r1, ip, lsl #19
   188d4:	andeq	r8, r1, ip, lsl #19
   188d8:	andeq	r8, r1, ip, lsl #19
   188dc:	andeq	r8, r1, ip, lsl #19
   188e0:	andeq	r8, r1, ip, lsl #19
   188e4:	andeq	r8, r1, ip, lsl #19
   188e8:	andeq	r8, r1, ip, lsl #19
   188ec:	andeq	r8, r1, ip, lsl #19
   188f0:	andeq	r8, r1, ip, lsl #19
   188f4:	andeq	r8, r1, ip, lsl #19
   188f8:	andeq	r8, r1, ip, lsl #19
   188fc:	muleq	r1, ip, fp
   18900:	ldrdeq	r8, [r1], -r4
   18904:	andeq	r8, r1, ip, lsl #19
   18908:	muleq	r1, ip, fp
   1890c:	andeq	r8, r1, ip, lsl #19
   18910:	muleq	r1, ip, fp
   18914:	andeq	r8, r1, ip, lsl #19
   18918:	andeq	r8, r1, ip, lsl #19
   1891c:	andeq	r8, r1, ip, lsl #19
   18920:	andeq	r8, r1, ip, lsl #19
   18924:	andeq	r8, r1, ip, lsl #19
   18928:	andeq	r8, r1, ip, lsl #19
   1892c:	andeq	r8, r1, ip, lsl #19
   18930:	andeq	r8, r1, ip, lsl #19
   18934:	andeq	r8, r1, ip, lsl #19
   18938:	andeq	r8, r1, ip, lsl #19
   1893c:	andeq	r8, r1, ip, lsl #19
   18940:	andeq	r8, r1, ip, lsl #19
   18944:	andeq	r8, r1, ip, lsl #19
   18948:	andeq	r8, r1, ip, lsl #19
   1894c:	andeq	r8, r1, ip, lsl #19
   18950:	andeq	r8, r1, ip, lsl #19
   18954:	andeq	r8, r1, ip, lsl #19
   18958:	andeq	r8, r1, ip, lsl #19
   1895c:	andeq	r8, r1, ip, lsl #19
   18960:	andeq	r8, r1, ip, lsl #19
   18964:	andeq	r8, r1, ip, lsl #19
   18968:	andeq	r8, r1, ip, lsl #19
   1896c:	andeq	r8, r1, ip, lsl #19
   18970:	andeq	r8, r1, ip, lsl #19
   18974:	andeq	r8, r1, ip, lsl #19
   18978:	andeq	r8, r1, ip, lsl #19
   1897c:			; <UNDEFINED> instruction: 0x000189b4
   18980:	muleq	r1, ip, fp
   18984:			; <UNDEFINED> instruction: 0x000189b4
   18988:	andeq	r8, r1, r0, lsr #19
   1898c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18990:	cmp	r0, #0
   18994:	beq	18bf4 <__assert_fail@plt+0x75ec>
   18998:	ldr	r0, [fp, #16]
   1899c:	b	18bf8 <__assert_fail@plt+0x75f0>
   189a0:	mov	r4, #0
   189a4:	cmp	r7, #0
   189a8:	beq	18b98 <__assert_fail@plt+0x7590>
   189ac:	mov	r9, #0
   189b0:	b	1898c <__assert_fail@plt+0x7384>
   189b4:	mov	r4, #0
   189b8:	cmn	lr, #1
   189bc:	beq	18b7c <__assert_fail@plt+0x7574>
   189c0:	cmp	r7, #0
   189c4:	bne	189ac <__assert_fail@plt+0x73a4>
   189c8:	cmp	lr, #1
   189cc:	beq	18b98 <__assert_fail@plt+0x7590>
   189d0:	b	189ac <__assert_fail@plt+0x73a4>
   189d4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   189d8:	cmp	r0, #2
   189dc:	bne	18bbc <__assert_fail@plt+0x75b4>
   189e0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   189e4:	tst	r0, #1
   189e8:	bne	192b8 <__assert_fail@plt+0x7cb0>
   189ec:	mov	r9, #0
   189f0:	mov	r0, #92	; 0x5c
   189f4:	b	18bd0 <__assert_fail@plt+0x75c8>
   189f8:	mov	r0, #102	; 0x66
   189fc:	b	18be0 <__assert_fail@plt+0x75d8>
   18a00:	mov	r2, #116	; 0x74
   18a04:	b	18a14 <__assert_fail@plt+0x740c>
   18a08:	mov	r0, #98	; 0x62
   18a0c:	b	18be0 <__assert_fail@plt+0x75d8>
   18a10:	mov	r2, #114	; 0x72
   18a14:	ldr	r0, [sp, #68]	; 0x44
   18a18:	tst	r0, #1
   18a1c:	mov	r0, r2
   18a20:	bne	18be0 <__assert_fail@plt+0x75d8>
   18a24:	b	192b8 <__assert_fail@plt+0x7cb0>
   18a28:	ldr	r0, [sp, #84]	; 0x54
   18a2c:	tst	r0, #1
   18a30:	beq	18cd0 <__assert_fail@plt+0x76c8>
   18a34:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18a38:	tst	r0, #1
   18a3c:	bne	193c8 <__assert_fail@plt+0x7dc0>
   18a40:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18a44:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18a48:	cmp	r0, #2
   18a4c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   18a50:	movwne	r0, #1
   18a54:	orr	r0, r0, r2
   18a58:	tst	r0, #1
   18a5c:	beq	190a0 <__assert_fail@plt+0x7a98>
   18a60:	mov	r0, r8
   18a64:	b	190d4 <__assert_fail@plt+0x7acc>
   18a68:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18a6c:	mov	r9, #0
   18a70:	mov	r5, #63	; 0x3f
   18a74:	cmp	r0, #5
   18a78:	beq	18e84 <__assert_fail@plt+0x787c>
   18a7c:	cmp	r0, #2
   18a80:	bne	18f28 <__assert_fail@plt+0x7920>
   18a84:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18a88:	tst	r0, #1
   18a8c:	beq	18f2c <__assert_fail@plt+0x7924>
   18a90:	b	192b8 <__assert_fail@plt+0x7cb0>
   18a94:	mov	r0, #118	; 0x76
   18a98:	b	18be0 <__assert_fail@plt+0x75d8>
   18a9c:	mov	r0, #1
   18aa0:	mov	r5, #39	; 0x27
   18aa4:	str	r0, [sp, #60]	; 0x3c
   18aa8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18aac:	cmp	r0, #2
   18ab0:	bne	18b24 <__assert_fail@plt+0x751c>
   18ab4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18ab8:	tst	r0, #1
   18abc:	bne	192b8 <__assert_fail@plt+0x7cb0>
   18ac0:	ldr	r2, [sp, #56]	; 0x38
   18ac4:	clz	r1, sl
   18ac8:	mov	r9, #0
   18acc:	lsr	r1, r1, #5
   18ad0:	cmp	r2, #0
   18ad4:	mov	r0, r2
   18ad8:	movwne	r0, #1
   18adc:	orrs	r0, r0, r1
   18ae0:	moveq	r2, sl
   18ae4:	moveq	sl, r0
   18ae8:	cmp	r8, sl
   18aec:	str	r2, [sp, #56]	; 0x38
   18af0:	movcc	r0, #39	; 0x27
   18af4:	strbcc	r0, [r6, r8]
   18af8:	add	r0, r8, #1
   18afc:	cmp	r0, sl
   18b00:	movcc	r1, #92	; 0x5c
   18b04:	strbcc	r1, [r6, r0]
   18b08:	add	r0, r8, #2
   18b0c:	add	r8, r8, #3
   18b10:	cmp	r0, sl
   18b14:	movcc	r1, #39	; 0x27
   18b18:	strbcc	r1, [r6, r0]
   18b1c:	mov	r0, #0
   18b20:	str	r0, [fp, #-56]	; 0xffffffc8
   18b24:	mov	r4, #1
   18b28:	b	1898c <__assert_fail@plt+0x7384>
   18b2c:	ldr	r0, [sp, #40]	; 0x28
   18b30:	cmp	r0, #1
   18b34:	bne	18cfc <__assert_fail@plt+0x76f4>
   18b38:	str	lr, [sp, #28]
   18b3c:	bl	114a0 <__ctype_b_loc@plt>
   18b40:	ldr	r0, [r0]
   18b44:	ldr	ip, [fp, #-84]	; 0xffffffac
   18b48:	mov	r1, #1
   18b4c:	add	r0, r0, r5, lsl #1
   18b50:	ldrb	r0, [r0, #1]
   18b54:	ubfx	r4, r0, #6, #1
   18b58:	ldr	r0, [sp, #52]	; 0x34
   18b5c:	mov	r2, r1
   18b60:	cmp	r1, #1
   18b64:	orr	r0, r4, r0
   18b68:	bhi	18f34 <__assert_fail@plt+0x792c>
   18b6c:	tst	r0, #1
   18b70:	beq	18f34 <__assert_fail@plt+0x792c>
   18b74:	ldr	lr, [sp, #28]
   18b78:	b	1898c <__assert_fail@plt+0x7384>
   18b7c:	cmp	r7, #0
   18b80:	ldrbeq	r0, [ip, #1]
   18b84:	cmpeq	r0, #0
   18b88:	beq	18b98 <__assert_fail@plt+0x7590>
   18b8c:	mvn	lr, #0
   18b90:	mov	r9, #0
   18b94:	b	1898c <__assert_fail@plt+0x7384>
   18b98:	mov	r1, #1
   18b9c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   18ba0:	cmp	r0, #2
   18ba4:	bne	18bb4 <__assert_fail@plt+0x75ac>
   18ba8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18bac:	tst	r0, #1
   18bb0:	bne	192b8 <__assert_fail@plt+0x7cb0>
   18bb4:	mov	r4, r1
   18bb8:	b	1898c <__assert_fail@plt+0x7384>
   18bbc:	ldr	r1, [sp, #48]	; 0x30
   18bc0:	mov	r9, #0
   18bc4:	mov	r0, #92	; 0x5c
   18bc8:	cmp	r1, #0
   18bcc:	beq	18be0 <__assert_fail@plt+0x75d8>
   18bd0:	mov	r4, #0
   18bd4:	cmp	r9, #0
   18bd8:	beq	1916c <__assert_fail@plt+0x7b64>
   18bdc:	b	191a8 <__assert_fail@plt+0x7ba0>
   18be0:	ldr	r1, [sp, #84]	; 0x54
   18be4:	mov	r4, #0
   18be8:	mov	r9, #0
   18bec:	tst	r1, #1
   18bf0:	bne	18c30 <__assert_fail@plt+0x7628>
   18bf4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   18bf8:	cmp	r0, #0
   18bfc:	mov	r0, r5
   18c00:	beq	18c24 <__assert_fail@plt+0x761c>
   18c04:	ldr	r1, [fp, #16]
   18c08:	ubfx	r0, r5, #5, #3
   18c0c:	mov	r2, #1
   18c10:	ldr	r0, [r1, r0, lsl #2]
   18c14:	and	r1, r5, #31
   18c18:	tst	r0, r2, lsl r1
   18c1c:	mov	r0, r5
   18c20:	bne	18c30 <__assert_fail@plt+0x7628>
   18c24:	ldr	r1, [fp, #-52]	; 0xffffffcc
   18c28:	cmp	r1, #0
   18c2c:	beq	19164 <__assert_fail@plt+0x7b5c>
   18c30:	ldr	r1, [fp, #-72]	; 0xffffffb8
   18c34:	tst	r1, #1
   18c38:	bne	19290 <__assert_fail@plt+0x7c88>
   18c3c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   18c40:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18c44:	cmp	r1, #2
   18c48:	ldr	r1, [fp, #-80]	; 0xffffffb0
   18c4c:	movwne	r1, #1
   18c50:	orr	r1, r1, r2
   18c54:	tst	r1, #1
   18c58:	beq	18c64 <__assert_fail@plt+0x765c>
   18c5c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   18c60:	b	18ca0 <__assert_fail@plt+0x7698>
   18c64:	cmp	r8, sl
   18c68:	ldr	r5, [fp, #-48]	; 0xffffffd0
   18c6c:	movcc	r1, #39	; 0x27
   18c70:	strbcc	r1, [r6, r8]
   18c74:	add	r1, r8, #1
   18c78:	cmp	r1, sl
   18c7c:	movcc	r2, #36	; 0x24
   18c80:	strbcc	r2, [r6, r1]
   18c84:	add	r1, r8, #2
   18c88:	add	r8, r8, #3
   18c8c:	cmp	r1, sl
   18c90:	movcc	r2, #39	; 0x27
   18c94:	strbcc	r2, [r6, r1]
   18c98:	mov	r1, #1
   18c9c:	str	r1, [fp, #-56]	; 0xffffffc8
   18ca0:	cmp	r8, sl
   18ca4:	movcc	r1, #92	; 0x5c
   18ca8:	strbcc	r1, [r6, r8]
   18cac:	add	r8, r8, #1
   18cb0:	cmp	r8, sl
   18cb4:	and	r5, r5, r4
   18cb8:	add	r7, r7, #1
   18cbc:	strbcc	r0, [r6, r8]
   18cc0:	add	r8, r8, #1
   18cc4:	cmn	lr, #1
   18cc8:	bne	186c4 <__assert_fail@plt+0x70bc>
   18ccc:	b	186d0 <__assert_fail@plt+0x70c8>
   18cd0:	ldr	r0, [sp, #36]	; 0x24
   18cd4:	mov	r4, #0
   18cd8:	mov	r9, #0
   18cdc:	mov	r5, #0
   18ce0:	cmp	r0, #0
   18ce4:	beq	18bf4 <__assert_fail@plt+0x75ec>
   18ce8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   18cec:	add	r7, r7, #1
   18cf0:	cmn	lr, #1
   18cf4:	bne	186c4 <__assert_fail@plt+0x70bc>
   18cf8:	b	186d0 <__assert_fail@plt+0x70c8>
   18cfc:	mov	r0, #0
   18d00:	cmn	lr, #1
   18d04:	str	r0, [fp, #-36]	; 0xffffffdc
   18d08:	str	r0, [fp, #-40]	; 0xffffffd8
   18d0c:	bne	18d20 <__assert_fail@plt+0x7718>
   18d10:	mov	r0, ip
   18d14:	bl	114b8 <strlen@plt>
   18d18:	ldr	ip, [fp, #-84]	; 0xffffffac
   18d1c:	mov	lr, r0
   18d20:	add	r0, ip, r7
   18d24:	mov	r4, #1
   18d28:	mov	r6, #0
   18d2c:	str	lr, [sp, #28]
   18d30:	str	r0, [sp, #24]
   18d34:	sub	r0, fp, #40	; 0x28
   18d38:	mov	r3, r0
   18d3c:	str	r6, [sp, #44]	; 0x2c
   18d40:	add	r6, r6, r7
   18d44:	sub	r0, fp, #44	; 0x2c
   18d48:	add	r1, ip, r6
   18d4c:	sub	r2, lr, r6
   18d50:	bl	1e820 <__assert_fail@plt+0xd218>
   18d54:	cmp	r0, #0
   18d58:	beq	191f0 <__assert_fail@plt+0x7be8>
   18d5c:	cmn	r0, #1
   18d60:	beq	191b0 <__assert_fail@plt+0x7ba8>
   18d64:	ldr	lr, [sp, #28]
   18d68:	cmn	r0, #2
   18d6c:	beq	191b8 <__assert_fail@plt+0x7bb0>
   18d70:	ldr	r2, [sp, #64]	; 0x40
   18d74:	cmp	r0, #2
   18d78:	mov	r1, #0
   18d7c:	movwcc	r1, #1
   18d80:	eor	r2, r2, #1
   18d84:	orrs	r1, r2, r1
   18d88:	bne	18e48 <__assert_fail@plt+0x7840>
   18d8c:	ldr	r1, [sp, #44]	; 0x2c
   18d90:	ldr	r2, [sp, #24]
   18d94:	add	r1, r2, r1
   18d98:	mov	r2, #1
   18d9c:	ldrb	r3, [r1, r2]
   18da0:	sub	r3, r3, #91	; 0x5b
   18da4:	cmp	r3, #33	; 0x21
   18da8:	bhi	18e3c <__assert_fail@plt+0x7834>
   18dac:	add	r6, pc, #0
   18db0:	ldr	pc, [r6, r3, lsl #2]
   18db4:			; <UNDEFINED> instruction: 0x000192b0
   18db8:			; <UNDEFINED> instruction: 0x000192b0
   18dbc:	andeq	r8, r1, ip, lsr lr
   18dc0:			; <UNDEFINED> instruction: 0x000192b0
   18dc4:	andeq	r8, r1, ip, lsr lr
   18dc8:			; <UNDEFINED> instruction: 0x000192b0
   18dcc:	andeq	r8, r1, ip, lsr lr
   18dd0:	andeq	r8, r1, ip, lsr lr
   18dd4:	andeq	r8, r1, ip, lsr lr
   18dd8:	andeq	r8, r1, ip, lsr lr
   18ddc:	andeq	r8, r1, ip, lsr lr
   18de0:	andeq	r8, r1, ip, lsr lr
   18de4:	andeq	r8, r1, ip, lsr lr
   18de8:	andeq	r8, r1, ip, lsr lr
   18dec:	andeq	r8, r1, ip, lsr lr
   18df0:	andeq	r8, r1, ip, lsr lr
   18df4:	andeq	r8, r1, ip, lsr lr
   18df8:	andeq	r8, r1, ip, lsr lr
   18dfc:	andeq	r8, r1, ip, lsr lr
   18e00:	andeq	r8, r1, ip, lsr lr
   18e04:	andeq	r8, r1, ip, lsr lr
   18e08:	andeq	r8, r1, ip, lsr lr
   18e0c:	andeq	r8, r1, ip, lsr lr
   18e10:	andeq	r8, r1, ip, lsr lr
   18e14:	andeq	r8, r1, ip, lsr lr
   18e18:	andeq	r8, r1, ip, lsr lr
   18e1c:	andeq	r8, r1, ip, lsr lr
   18e20:	andeq	r8, r1, ip, lsr lr
   18e24:	andeq	r8, r1, ip, lsr lr
   18e28:	andeq	r8, r1, ip, lsr lr
   18e2c:	andeq	r8, r1, ip, lsr lr
   18e30:	andeq	r8, r1, ip, lsr lr
   18e34:	andeq	r8, r1, ip, lsr lr
   18e38:			; <UNDEFINED> instruction: 0x000192b0
   18e3c:	add	r2, r2, #1
   18e40:	cmp	r2, r0
   18e44:	bcc	18d9c <__assert_fail@plt+0x7794>
   18e48:	ldr	r6, [sp, #44]	; 0x2c
   18e4c:	add	r6, r0, r6
   18e50:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18e54:	bl	113c8 <iswprint@plt>
   18e58:	cmp	r0, #0
   18e5c:	movwne	r0, #1
   18e60:	and	r4, r4, r0
   18e64:	sub	r0, fp, #40	; 0x28
   18e68:	bl	11374 <mbsinit@plt>
   18e6c:	ldr	lr, [sp, #28]
   18e70:	ldr	ip, [fp, #-84]	; 0xffffffac
   18e74:	sub	r3, fp, #40	; 0x28
   18e78:	cmp	r0, #0
   18e7c:	beq	18d3c <__assert_fail@plt+0x7734>
   18e80:	b	191f8 <__assert_fail@plt+0x7bf0>
   18e84:	ldr	r0, [sp, #32]
   18e88:	cmp	r0, #0
   18e8c:	beq	18f28 <__assert_fail@plt+0x7920>
   18e90:	add	r0, r7, #2
   18e94:	cmp	r0, lr
   18e98:	bcs	18f28 <__assert_fail@plt+0x7920>
   18e9c:	add	r1, ip, r7
   18ea0:	ldrb	r1, [r1, #1]
   18ea4:	cmp	r1, #63	; 0x3f
   18ea8:	bne	18f28 <__assert_fail@plt+0x7920>
   18eac:	ldrb	r5, [ip, r0]
   18eb0:	sub	r1, r5, #33	; 0x21
   18eb4:	cmp	r1, #29
   18eb8:	bhi	18f28 <__assert_fail@plt+0x7920>
   18ebc:	movw	r3, #20929	; 0x51c1
   18ec0:	mov	r2, #1
   18ec4:	movt	r3, #14336	; 0x3800
   18ec8:	tst	r3, r2, lsl r1
   18ecc:	beq	18f28 <__assert_fail@plt+0x7920>
   18ed0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   18ed4:	tst	r1, #1
   18ed8:	bne	193d0 <__assert_fail@plt+0x7dc8>
   18edc:	cmp	r8, sl
   18ee0:	mov	r7, r0
   18ee4:	mov	r4, #0
   18ee8:	movcc	r1, #63	; 0x3f
   18eec:	strbcc	r1, [r6, r8]
   18ef0:	add	r1, r8, #1
   18ef4:	cmp	r1, sl
   18ef8:	movcc	r2, #34	; 0x22
   18efc:	strbcc	r2, [r6, r1]
   18f00:	add	r1, r8, #2
   18f04:	cmp	r1, sl
   18f08:	movcc	r2, #34	; 0x22
   18f0c:	strbcc	r2, [r6, r1]
   18f10:	add	r1, r8, #3
   18f14:	add	r8, r8, #4
   18f18:	cmp	r1, sl
   18f1c:	movcc	r2, #63	; 0x3f
   18f20:	strbcc	r2, [r6, r1]
   18f24:	b	1898c <__assert_fail@plt+0x7384>
   18f28:	mov	r5, #63	; 0x3f
   18f2c:	mov	r4, #0
   18f30:	b	1898c <__assert_fail@plt+0x7384>
   18f34:	add	r1, r2, r7
   18f38:	ldr	lr, [sp, #28]
   18f3c:	mov	r3, #0
   18f40:	str	r1, [sp, #44]	; 0x2c
   18f44:	add	r1, r7, #1
   18f48:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18f4c:	tst	r0, #1
   18f50:	bne	19024 <__assert_fail@plt+0x7a1c>
   18f54:	ldr	r2, [fp, #-72]	; 0xffffffb8
   18f58:	tst	r2, #1
   18f5c:	bne	19318 <__assert_fail@plt+0x7d10>
   18f60:	ldr	r3, [fp, #-80]	; 0xffffffb0
   18f64:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18f68:	cmp	r7, #2
   18f6c:	movwne	r3, #1
   18f70:	orr	r3, r3, r2
   18f74:	tst	r3, #1
   18f78:	bne	18fb4 <__assert_fail@plt+0x79ac>
   18f7c:	cmp	r8, sl
   18f80:	add	r3, r8, #1
   18f84:	movcc	r2, #39	; 0x27
   18f88:	strbcc	r2, [r6, r8]
   18f8c:	cmp	r3, sl
   18f90:	movcc	r2, #36	; 0x24
   18f94:	strbcc	r2, [r6, r3]
   18f98:	add	r3, r8, #2
   18f9c:	add	r8, r8, #3
   18fa0:	cmp	r3, sl
   18fa4:	movcc	r2, #39	; 0x27
   18fa8:	strbcc	r2, [r6, r3]
   18fac:	mov	r2, #1
   18fb0:	str	r2, [fp, #-56]	; 0xffffffc8
   18fb4:	cmp	r8, sl
   18fb8:	movcc	r3, #92	; 0x5c
   18fbc:	strbcc	r3, [r6, r8]
   18fc0:	add	r3, r8, #1
   18fc4:	cmp	r3, sl
   18fc8:	andcc	r7, r5, #192	; 0xc0
   18fcc:	movcc	r2, #48	; 0x30
   18fd0:	orrcc	r7, r2, r7, lsr #6
   18fd4:	strbcc	r7, [r6, r3]
   18fd8:	add	r3, r8, #2
   18fdc:	add	r8, r8, #3
   18fe0:	cmp	r3, sl
   18fe4:	lsrcc	r7, r5, #3
   18fe8:	movcc	r2, #6
   18fec:	bficc	r7, r2, #3, #29
   18ff0:	mov	r2, #6
   18ff4:	strbcc	r7, [r6, r3]
   18ff8:	bfi	r5, r2, #3, #29
   18ffc:	mov	r3, #1
   19000:	b	19048 <__assert_fail@plt+0x7a40>
   19004:	cmp	r8, sl
   19008:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1900c:	strbcc	r5, [r6, r8]
   19010:	add	r8, r8, #1
   19014:	ldrb	r5, [ip, r1]
   19018:	add	r1, r1, #1
   1901c:	tst	r0, #1
   19020:	beq	18f54 <__assert_fail@plt+0x794c>
   19024:	ldr	r2, [fp, #-52]	; 0xffffffcc
   19028:	tst	r2, #1
   1902c:	beq	19040 <__assert_fail@plt+0x7a38>
   19030:	cmp	r8, sl
   19034:	movcc	r7, #92	; 0x5c
   19038:	strbcc	r7, [r6, r8]
   1903c:	add	r8, r8, #1
   19040:	mov	r2, #0
   19044:	str	r2, [fp, #-52]	; 0xffffffcc
   19048:	ldr	r2, [sp, #44]	; 0x2c
   1904c:	and	r9, r3, #1
   19050:	cmp	r2, r1
   19054:	bls	19154 <__assert_fail@plt+0x7b4c>
   19058:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1905c:	cmp	r9, #0
   19060:	movwne	r9, #1
   19064:	mvn	r7, r2
   19068:	orr	r7, r7, r9
   1906c:	tst	r7, #1
   19070:	bne	19004 <__assert_fail@plt+0x79fc>
   19074:	cmp	r8, sl
   19078:	movcc	r7, #39	; 0x27
   1907c:	strbcc	r7, [r6, r8]
   19080:	add	r7, r8, #1
   19084:	add	r8, r8, #2
   19088:	cmp	r7, sl
   1908c:	movcc	r2, #39	; 0x27
   19090:	strbcc	r2, [r6, r7]
   19094:	mov	r2, #0
   19098:	str	r2, [fp, #-56]	; 0xffffffc8
   1909c:	b	19004 <__assert_fail@plt+0x79fc>
   190a0:	cmp	r8, sl
   190a4:	mov	r2, #1
   190a8:	movcc	r0, #39	; 0x27
   190ac:	strbcc	r0, [r6, r8]
   190b0:	add	r0, r8, #1
   190b4:	cmp	r0, sl
   190b8:	movcc	r1, #36	; 0x24
   190bc:	strbcc	r1, [r6, r0]
   190c0:	add	r0, r8, #2
   190c4:	cmp	r0, sl
   190c8:	movcc	r1, #39	; 0x27
   190cc:	strbcc	r1, [r6, r0]
   190d0:	add	r0, r8, #3
   190d4:	cmp	r0, sl
   190d8:	add	r8, r0, #1
   190dc:	str	r2, [fp, #-56]	; 0xffffffc8
   190e0:	movcc	r1, #92	; 0x5c
   190e4:	strbcc	r1, [r6, r0]
   190e8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   190ec:	cmp	r1, #2
   190f0:	beq	19144 <__assert_fail@plt+0x7b3c>
   190f4:	add	r1, r7, #1
   190f8:	mov	r4, #0
   190fc:	mov	r9, #1
   19100:	mov	r5, #48	; 0x30
   19104:	cmp	r1, lr
   19108:	bcs	1898c <__assert_fail@plt+0x7384>
   1910c:	ldrb	r1, [ip, r1]
   19110:	sub	r1, r1, #48	; 0x30
   19114:	uxtb	r1, r1
   19118:	cmp	r1, #9
   1911c:	bhi	1898c <__assert_fail@plt+0x7384>
   19120:	cmp	r8, sl
   19124:	movcc	r1, #48	; 0x30
   19128:	strbcc	r1, [r6, r8]
   1912c:	add	r1, r0, #2
   19130:	add	r8, r0, #3
   19134:	cmp	r1, sl
   19138:	movcc	r2, #48	; 0x30
   1913c:	strbcc	r2, [r6, r1]
   19140:	b	1898c <__assert_fail@plt+0x7384>
   19144:	mov	r0, #48	; 0x30
   19148:	mov	r9, #1
   1914c:	mov	r4, #0
   19150:	b	18c24 <__assert_fail@plt+0x761c>
   19154:	cmp	r9, #0
   19158:	sub	r7, r1, #1
   1915c:	mov	r0, r5
   19160:	movwne	r9, #1
   19164:	cmp	r9, #0
   19168:	bne	191a8 <__assert_fail@plt+0x7ba0>
   1916c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   19170:	tst	r1, #1
   19174:	beq	191a8 <__assert_fail@plt+0x7ba0>
   19178:	cmp	r8, sl
   1917c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   19180:	movcc	r1, #39	; 0x27
   19184:	strbcc	r1, [r6, r8]
   19188:	add	r1, r8, #1
   1918c:	add	r8, r8, #2
   19190:	cmp	r1, sl
   19194:	movcc	r2, #39	; 0x27
   19198:	strbcc	r2, [r6, r1]
   1919c:	mov	r1, #0
   191a0:	str	r1, [fp, #-56]	; 0xffffffc8
   191a4:	b	18cb0 <__assert_fail@plt+0x76a8>
   191a8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   191ac:	b	18cb0 <__assert_fail@plt+0x76a8>
   191b0:	mov	r4, #0
   191b4:	b	191f0 <__assert_fail@plt+0x7be8>
   191b8:	mov	r4, #0
   191bc:	cmp	lr, r6
   191c0:	bls	191f0 <__assert_fail@plt+0x7be8>
   191c4:	ldr	ip, [fp, #-84]	; 0xffffffac
   191c8:	ldr	r6, [sp, #44]	; 0x2c
   191cc:	ldr	r0, [sp, #24]
   191d0:	ldrb	r0, [r0, r6]
   191d4:	cmp	r0, #0
   191d8:	beq	191f8 <__assert_fail@plt+0x7bf0>
   191dc:	add	r6, r6, #1
   191e0:	add	r0, r7, r6
   191e4:	cmp	r0, lr
   191e8:	bcc	191cc <__assert_fail@plt+0x7bc4>
   191ec:	b	191f8 <__assert_fail@plt+0x7bf0>
   191f0:	ldr	ip, [fp, #-84]	; 0xffffffac
   191f4:	ldr	r6, [sp, #44]	; 0x2c
   191f8:	mov	r1, r6
   191fc:	ldr	r6, [sp, #80]	; 0x50
   19200:	b	18b58 <__assert_fail@plt+0x7550>
   19204:	mov	lr, r7
   19208:	b	19210 <__assert_fail@plt+0x7c08>
   1920c:	mvn	lr, #0
   19210:	ldr	r7, [fp, #-64]	; 0xffffffc0
   19214:	ldr	r1, [fp, #-72]	; 0xffffffb8
   19218:	eor	r0, r7, #2
   1921c:	orr	r0, r0, r8
   19220:	clz	r0, r0
   19224:	lsr	r0, r0, #5
   19228:	tst	r1, r0
   1922c:	bne	192b8 <__assert_fail@plt+0x7cb0>
   19230:	mov	r0, r1
   19234:	ldr	r1, [fp, #-80]	; 0xffffffb0
   19238:	cmp	r7, #2
   1923c:	movwne	r1, #1
   19240:	orr	r0, r0, r1
   19244:	tst	r0, #1
   19248:	ldreq	r0, [sp, #60]	; 0x3c
   1924c:	eoreq	r0, r0, #1
   19250:	tsteq	r0, #1
   19254:	bne	19364 <__assert_fail@plt+0x7d5c>
   19258:	mov	r9, lr
   1925c:	tst	r5, #1
   19260:	bne	19320 <__assert_fail@plt+0x7d18>
   19264:	ldr	r6, [sp, #56]	; 0x38
   19268:	mov	r4, #0
   1926c:	cmp	r6, #0
   19270:	beq	1935c <__assert_fail@plt+0x7d54>
   19274:	ldr	r0, [sp, #84]	; 0x54
   19278:	mov	r1, #0
   1927c:	cmp	sl, #0
   19280:	mov	r5, #0
   19284:	str	r1, [fp, #-72]	; 0xffffffb8
   19288:	beq	18458 <__assert_fail@plt+0x6e50>
   1928c:	b	19364 <__assert_fail@plt+0x7d5c>
   19290:	ldr	r7, [fp, #-64]	; 0xffffffc0
   19294:	ldr	r2, [sp, #84]	; 0x54
   19298:	b	192c0 <__assert_fail@plt+0x7cb8>
   1929c:	ldr	ip, [fp, #-84]	; 0xffffffac
   192a0:	mov	r2, #1
   192a4:	mov	lr, r4
   192a8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   192ac:	b	192c0 <__assert_fail@plt+0x7cb8>
   192b0:	ldr	r6, [sp, #80]	; 0x50
   192b4:	ldr	ip, [fp, #-84]	; 0xffffffac
   192b8:	ldr	r2, [sp, #84]	; 0x54
   192bc:	mov	r7, #2
   192c0:	mov	r0, #0
   192c4:	ldr	r1, [fp, #12]
   192c8:	tst	r2, #1
   192cc:	mov	r2, r7
   192d0:	mov	r3, lr
   192d4:	str	r0, [sp, #8]
   192d8:	ldr	r0, [sp, #72]	; 0x48
   192dc:	movwne	r2, #4
   192e0:	cmp	r7, #2
   192e4:	movne	r2, r7
   192e8:	str	r2, [sp]
   192ec:	mov	r2, ip
   192f0:	bic	r1, r1, #2
   192f4:	str	r0, [sp, #12]
   192f8:	ldr	r0, [sp, #76]	; 0x4c
   192fc:	str	r1, [sp, #4]
   19300:	mov	r1, sl
   19304:	str	r0, [sp, #16]
   19308:	mov	r0, r6
   1930c:	bl	183d8 <__assert_fail@plt+0x6dd0>
   19310:	mov	r8, r0
   19314:	b	193bc <__assert_fail@plt+0x7db4>
   19318:	ldr	r2, [sp, #84]	; 0x54
   1931c:	b	192c0 <__assert_fail@plt+0x7cb8>
   19320:	mov	r0, #5
   19324:	ldr	r1, [sp, #56]	; 0x38
   19328:	ldr	r2, [fp, #-84]	; 0xffffffac
   1932c:	mov	r3, r9
   19330:	str	r0, [sp]
   19334:	ldr	r0, [fp, #12]
   19338:	str	r0, [sp, #4]
   1933c:	ldr	r0, [fp, #16]
   19340:	str	r0, [sp, #8]
   19344:	ldr	r0, [sp, #72]	; 0x48
   19348:	str	r0, [sp, #12]
   1934c:	ldr	r0, [sp, #76]	; 0x4c
   19350:	str	r0, [sp, #16]
   19354:	ldr	r0, [sp, #80]	; 0x50
   19358:	b	1930c <__assert_fail@plt+0x7d04>
   1935c:	mov	r0, #0
   19360:	str	r0, [fp, #-72]	; 0xffffffb8
   19364:	ldr	r1, [sp, #92]	; 0x5c
   19368:	cmp	r1, #0
   1936c:	beq	193ac <__assert_fail@plt+0x7da4>
   19370:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19374:	ldr	r2, [sp, #80]	; 0x50
   19378:	tst	r0, #1
   1937c:	bne	193b0 <__assert_fail@plt+0x7da8>
   19380:	ldrb	r0, [r1]
   19384:	cmp	r0, #0
   19388:	beq	193b0 <__assert_fail@plt+0x7da8>
   1938c:	add	r1, r1, #1
   19390:	cmp	r8, sl
   19394:	strbcc	r0, [r2, r8]
   19398:	add	r8, r8, #1
   1939c:	ldrb	r0, [r1], #1
   193a0:	cmp	r0, #0
   193a4:	bne	19390 <__assert_fail@plt+0x7d88>
   193a8:	b	193b0 <__assert_fail@plt+0x7da8>
   193ac:	ldr	r2, [sp, #80]	; 0x50
   193b0:	cmp	r8, sl
   193b4:	movcc	r0, #0
   193b8:	strbcc	r0, [r2, r8]
   193bc:	mov	r0, r8
   193c0:	sub	sp, fp, #28
   193c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193c8:	mov	r2, #1
   193cc:	b	192a8 <__assert_fail@plt+0x7ca0>
   193d0:	ldr	r2, [sp, #84]	; 0x54
   193d4:	mov	r7, #5
   193d8:	b	192c0 <__assert_fail@plt+0x7cb8>
   193dc:	bl	115f0 <abort@plt>
   193e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193e4:	add	fp, sp, #28
   193e8:	sub	sp, sp, #28
   193ec:	movw	r5, #4776	; 0x12a8
   193f0:	cmp	r2, #0
   193f4:	mov	r4, r1
   193f8:	mov	r7, r0
   193fc:	str	r0, [sp, #20]
   19400:	movt	r5, #3
   19404:	movne	r5, r2
   19408:	bl	114e8 <__errno_location@plt>
   1940c:	mov	sl, r0
   19410:	ldm	r5, {r0, r1}
   19414:	ldr	r2, [r5, #40]	; 0x28
   19418:	ldr	r3, [r5, #44]	; 0x2c
   1941c:	add	r9, r5, #8
   19420:	ldr	r6, [sl]
   19424:	orr	r8, r1, #1
   19428:	mov	r1, #0
   1942c:	str	r6, [sp, #24]
   19430:	stm	sp, {r0, r8, r9}
   19434:	str	r2, [sp, #12]
   19438:	str	r3, [sp, #16]
   1943c:	mov	r0, #0
   19440:	mov	r2, r7
   19444:	mov	r3, r4
   19448:	mov	r6, r4
   1944c:	bl	183d8 <__assert_fail@plt+0x6dd0>
   19450:	add	r7, r0, #1
   19454:	mov	r0, r7
   19458:	bl	1acb4 <__assert_fail@plt+0x96ac>
   1945c:	mov	r4, r0
   19460:	ldr	r0, [r5]
   19464:	ldr	r2, [r5, #44]	; 0x2c
   19468:	ldr	r1, [r5, #40]	; 0x28
   1946c:	mov	r3, r6
   19470:	stm	sp, {r0, r8, r9}
   19474:	str	r2, [sp, #16]
   19478:	str	r1, [sp, #12]
   1947c:	mov	r0, r4
   19480:	mov	r1, r7
   19484:	ldr	r2, [sp, #20]
   19488:	bl	183d8 <__assert_fail@plt+0x6dd0>
   1948c:	ldr	r0, [sp, #24]
   19490:	str	r0, [sl]
   19494:	mov	r0, r4
   19498:	sub	sp, fp, #28
   1949c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   194a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194a4:	add	fp, sp, #28
   194a8:	sub	sp, sp, #36	; 0x24
   194ac:	movw	r8, #4776	; 0x12a8
   194b0:	cmp	r3, #0
   194b4:	mov	r4, r2
   194b8:	str	r2, [sp, #24]
   194bc:	mov	r5, r1
   194c0:	mov	r6, r0
   194c4:	str	r0, [sp, #20]
   194c8:	movt	r8, #3
   194cc:	movne	r8, r3
   194d0:	bl	114e8 <__errno_location@plt>
   194d4:	str	r0, [sp, #28]
   194d8:	cmp	r4, #0
   194dc:	add	sl, r8, #8
   194e0:	ldm	r8, {r3, r9}
   194e4:	ldr	r7, [r0]
   194e8:	ldr	r1, [r8, #40]	; 0x28
   194ec:	ldr	r2, [r8, #44]	; 0x2c
   194f0:	mov	r0, #0
   194f4:	orreq	r9, r9, #1
   194f8:	str	r7, [sp, #32]
   194fc:	mov	r7, r5
   19500:	stm	sp, {r3, r9, sl}
   19504:	str	r1, [sp, #12]
   19508:	str	r2, [sp, #16]
   1950c:	mov	r1, #0
   19510:	mov	r2, r6
   19514:	mov	r3, r5
   19518:	bl	183d8 <__assert_fail@plt+0x6dd0>
   1951c:	add	r4, r0, #1
   19520:	mov	r5, r0
   19524:	mov	r0, r4
   19528:	bl	1acb4 <__assert_fail@plt+0x96ac>
   1952c:	mov	r6, r0
   19530:	ldr	r0, [r8]
   19534:	ldr	r2, [r8, #44]	; 0x2c
   19538:	ldr	r1, [r8, #40]	; 0x28
   1953c:	mov	r3, r7
   19540:	stm	sp, {r0, r9, sl}
   19544:	str	r2, [sp, #16]
   19548:	str	r1, [sp, #12]
   1954c:	mov	r0, r6
   19550:	mov	r1, r4
   19554:	ldr	r2, [sp, #20]
   19558:	bl	183d8 <__assert_fail@plt+0x6dd0>
   1955c:	ldr	r0, [sp, #24]
   19560:	ldr	r1, [sp, #32]
   19564:	ldr	r2, [sp, #28]
   19568:	cmp	r0, #0
   1956c:	str	r1, [r2]
   19570:	strne	r5, [r0]
   19574:	mov	r0, r6
   19578:	sub	sp, fp, #28
   1957c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19580:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19584:	add	fp, sp, #24
   19588:	movw	r5, #4476	; 0x117c
   1958c:	movw	r8, #4472	; 0x1178
   19590:	movt	r5, #3
   19594:	movt	r8, #3
   19598:	ldr	r0, [r5]
   1959c:	ldr	r4, [r8]
   195a0:	cmp	r0, #2
   195a4:	blt	195d0 <__assert_fail@plt+0x7fc8>
   195a8:	add	r7, r4, #12
   195ac:	mov	r6, #0
   195b0:	ldr	r0, [r7, r6, lsl #3]
   195b4:	bl	1622c <__assert_fail@plt+0x4c24>
   195b8:	ldr	r1, [r5]
   195bc:	add	r2, r6, #2
   195c0:	add	r0, r6, #1
   195c4:	mov	r6, r0
   195c8:	cmp	r2, r1
   195cc:	blt	195b0 <__assert_fail@plt+0x7fa8>
   195d0:	ldr	r0, [r4, #4]
   195d4:	movw	r7, #4824	; 0x12d8
   195d8:	movt	r7, #3
   195dc:	cmp	r0, r7
   195e0:	beq	195f8 <__assert_fail@plt+0x7ff0>
   195e4:	bl	1622c <__assert_fail@plt+0x4c24>
   195e8:	movw	r0, #4480	; 0x1180
   195ec:	mov	r6, #256	; 0x100
   195f0:	movt	r0, #3
   195f4:	strd	r6, [r0]
   195f8:	movw	r6, #4480	; 0x1180
   195fc:	movt	r6, #3
   19600:	cmp	r4, r6
   19604:	beq	19614 <__assert_fail@plt+0x800c>
   19608:	mov	r0, r4
   1960c:	bl	1622c <__assert_fail@plt+0x4c24>
   19610:	str	r6, [r8]
   19614:	mov	r0, #1
   19618:	str	r0, [r5]
   1961c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19620:	movw	r3, #4776	; 0x12a8
   19624:	mvn	r2, #0
   19628:	movt	r3, #3
   1962c:	b	19630 <__assert_fail@plt+0x8028>
   19630:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19634:	add	fp, sp, #28
   19638:	sub	sp, sp, #44	; 0x2c
   1963c:	mov	r7, r3
   19640:	str	r2, [sp, #36]	; 0x24
   19644:	str	r1, [sp, #32]
   19648:	mov	r5, r0
   1964c:	bl	114e8 <__errno_location@plt>
   19650:	cmp	r5, #0
   19654:	blt	197c0 <__assert_fail@plt+0x81b8>
   19658:	cmn	r5, #-2147483647	; 0x80000001
   1965c:	beq	197c0 <__assert_fail@plt+0x81b8>
   19660:	movw	r8, #4476	; 0x117c
   19664:	movw	r4, #4472	; 0x1178
   19668:	str	r0, [sp, #28]
   1966c:	ldr	r0, [r0]
   19670:	movt	r8, #3
   19674:	movt	r4, #3
   19678:	ldr	r1, [r8]
   1967c:	ldr	r6, [r4]
   19680:	str	r0, [sp, #24]
   19684:	cmp	r1, r5
   19688:	ble	19694 <__assert_fail@plt+0x808c>
   1968c:	mov	sl, r6
   19690:	b	196fc <__assert_fail@plt+0x80f4>
   19694:	movw	r9, #4480	; 0x1180
   19698:	mov	r0, #8
   1969c:	add	r2, r5, #1
   196a0:	str	r1, [fp, #-32]	; 0xffffffe0
   196a4:	mvn	r3, #-2147483648	; 0x80000000
   196a8:	movt	r9, #3
   196ac:	str	r0, [sp]
   196b0:	sub	r2, r2, r1
   196b4:	sub	r1, fp, #32
   196b8:	subs	r0, r6, r9
   196bc:	movne	r0, r6
   196c0:	bl	1aeb4 <__assert_fail@plt+0x98ac>
   196c4:	cmp	r6, r9
   196c8:	mov	sl, r0
   196cc:	str	r0, [r4]
   196d0:	ldrdeq	r0, [r9]
   196d4:	stmeq	sl, {r0, r1}
   196d8:	ldr	r1, [r8]
   196dc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   196e0:	add	r0, sl, r1, lsl #3
   196e4:	sub	r1, r2, r1
   196e8:	lsl	r2, r1, #3
   196ec:	mov	r1, #0
   196f0:	bl	1150c <memset@plt>
   196f4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   196f8:	str	r0, [r8]
   196fc:	mov	r9, sl
   19700:	ldr	r6, [r9, r5, lsl #3]!
   19704:	ldr	r4, [r9, #4]!
   19708:	ldm	r7, {r0, r1}
   1970c:	ldr	r2, [r7, #40]	; 0x28
   19710:	ldr	r3, [r7, #44]	; 0x2c
   19714:	orr	r8, r1, #1
   19718:	add	r1, r7, #8
   1971c:	stm	sp, {r0, r8}
   19720:	add	r0, sp, #8
   19724:	str	r1, [sp, #20]
   19728:	stm	r0, {r1, r2, r3}
   1972c:	mov	r0, r4
   19730:	mov	r1, r6
   19734:	ldr	r2, [sp, #32]
   19738:	ldr	r3, [sp, #36]	; 0x24
   1973c:	bl	183d8 <__assert_fail@plt+0x6dd0>
   19740:	cmp	r6, r0
   19744:	bhi	197a8 <__assert_fail@plt+0x81a0>
   19748:	add	r6, r0, #1
   1974c:	movw	r0, #4824	; 0x12d8
   19750:	movt	r0, #3
   19754:	str	r6, [sl, r5, lsl #3]
   19758:	cmp	r4, r0
   1975c:	beq	19768 <__assert_fail@plt+0x8160>
   19760:	mov	r0, r4
   19764:	bl	1622c <__assert_fail@plt+0x4c24>
   19768:	mov	r0, r6
   1976c:	bl	1acb4 <__assert_fail@plt+0x96ac>
   19770:	str	r0, [r9]
   19774:	mov	r4, r0
   19778:	add	r3, sp, #8
   1977c:	ldr	r0, [r7]
   19780:	ldr	r1, [r7, #40]	; 0x28
   19784:	ldr	r2, [r7, #44]	; 0x2c
   19788:	stm	sp, {r0, r8}
   1978c:	ldr	r0, [sp, #20]
   19790:	stm	r3, {r0, r1, r2}
   19794:	mov	r0, r4
   19798:	mov	r1, r6
   1979c:	ldr	r2, [sp, #32]
   197a0:	ldr	r3, [sp, #36]	; 0x24
   197a4:	bl	183d8 <__assert_fail@plt+0x6dd0>
   197a8:	ldr	r0, [sp, #28]
   197ac:	ldr	r1, [sp, #24]
   197b0:	str	r1, [r0]
   197b4:	mov	r0, r4
   197b8:	sub	sp, fp, #28
   197bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197c0:	bl	115f0 <abort@plt>
   197c4:	movw	r3, #4776	; 0x12a8
   197c8:	movt	r3, #3
   197cc:	b	19630 <__assert_fail@plt+0x8028>
   197d0:	movw	r3, #4776	; 0x12a8
   197d4:	mov	r1, r0
   197d8:	mov	r0, #0
   197dc:	mvn	r2, #0
   197e0:	movt	r3, #3
   197e4:	b	19630 <__assert_fail@plt+0x8028>
   197e8:	movw	r3, #4776	; 0x12a8
   197ec:	mov	r2, r1
   197f0:	mov	r1, r0
   197f4:	mov	r0, #0
   197f8:	movt	r3, #3
   197fc:	b	19630 <__assert_fail@plt+0x8028>
   19800:	push	{fp, lr}
   19804:	mov	fp, sp
   19808:	sub	sp, sp, #48	; 0x30
   1980c:	vmov.i32	q8, #0	; 0x00000000
   19810:	mov	ip, #32
   19814:	mov	r3, sp
   19818:	mov	lr, r2
   1981c:	cmp	r1, #10
   19820:	add	r2, r3, #16
   19824:	vst1.64	{d16-d17}, [r3], ip
   19828:	vst1.64	{d16-d17}, [r3]
   1982c:	vst1.64	{d16-d17}, [r2]
   19830:	beq	19850 <__assert_fail@plt+0x8248>
   19834:	str	r1, [sp]
   19838:	mov	r3, sp
   1983c:	mov	r1, lr
   19840:	mvn	r2, #0
   19844:	bl	19630 <__assert_fail@plt+0x8028>
   19848:	mov	sp, fp
   1984c:	pop	{fp, pc}
   19850:	bl	115f0 <abort@plt>
   19854:	push	{r4, sl, fp, lr}
   19858:	add	fp, sp, #8
   1985c:	sub	sp, sp, #48	; 0x30
   19860:	mov	ip, r3
   19864:	mov	r3, sp
   19868:	vmov.i32	q8, #0	; 0x00000000
   1986c:	mov	lr, #32
   19870:	cmp	r1, #10
   19874:	add	r4, r3, #16
   19878:	vst1.64	{d16-d17}, [r3], lr
   1987c:	vst1.64	{d16-d17}, [r3]
   19880:	vst1.64	{d16-d17}, [r4]
   19884:	beq	198a4 <__assert_fail@plt+0x829c>
   19888:	str	r1, [sp]
   1988c:	mov	r1, r2
   19890:	mov	r3, sp
   19894:	mov	r2, ip
   19898:	bl	19630 <__assert_fail@plt+0x8028>
   1989c:	sub	sp, fp, #8
   198a0:	pop	{r4, sl, fp, pc}
   198a4:	bl	115f0 <abort@plt>
   198a8:	push	{fp, lr}
   198ac:	mov	fp, sp
   198b0:	sub	sp, sp, #48	; 0x30
   198b4:	mov	r3, sp
   198b8:	vmov.i32	q8, #0	; 0x00000000
   198bc:	mov	ip, #32
   198c0:	cmp	r0, #10
   198c4:	add	r2, r3, #16
   198c8:	vst1.64	{d16-d17}, [r3], ip
   198cc:	vst1.64	{d16-d17}, [r3]
   198d0:	vst1.64	{d16-d17}, [r2]
   198d4:	beq	198f4 <__assert_fail@plt+0x82ec>
   198d8:	str	r0, [sp]
   198dc:	mov	r3, sp
   198e0:	mov	r0, #0
   198e4:	mvn	r2, #0
   198e8:	bl	19630 <__assert_fail@plt+0x8028>
   198ec:	mov	sp, fp
   198f0:	pop	{fp, pc}
   198f4:	bl	115f0 <abort@plt>
   198f8:	push	{fp, lr}
   198fc:	mov	fp, sp
   19900:	sub	sp, sp, #48	; 0x30
   19904:	mov	r3, sp
   19908:	vmov.i32	q8, #0	; 0x00000000
   1990c:	mov	ip, #32
   19910:	cmp	r0, #10
   19914:	add	lr, r3, #16
   19918:	vst1.64	{d16-d17}, [r3], ip
   1991c:	vst1.64	{d16-d17}, [r3]
   19920:	vst1.64	{d16-d17}, [lr]
   19924:	beq	19940 <__assert_fail@plt+0x8338>
   19928:	str	r0, [sp]
   1992c:	mov	r3, sp
   19930:	mov	r0, #0
   19934:	bl	19630 <__assert_fail@plt+0x8028>
   19938:	mov	sp, fp
   1993c:	pop	{fp, pc}
   19940:	bl	115f0 <abort@plt>
   19944:	push	{r4, sl, fp, lr}
   19948:	add	fp, sp, #8
   1994c:	sub	sp, sp, #48	; 0x30
   19950:	mov	lr, r0
   19954:	movw	r0, #4776	; 0x12a8
   19958:	mov	r3, #32
   1995c:	mov	ip, r1
   19960:	mov	r4, #1
   19964:	movt	r0, #3
   19968:	add	r1, r0, #16
   1996c:	vld1.64	{d16-d17}, [r0], r3
   19970:	mov	r3, sp
   19974:	vld1.64	{d18-d19}, [r1]
   19978:	add	r1, r3, #16
   1997c:	vld1.64	{d20-d21}, [r0]
   19980:	add	r0, r3, #32
   19984:	vst1.64	{d18-d19}, [r1]
   19988:	mov	r1, r3
   1998c:	vst1.64	{d20-d21}, [r0]
   19990:	mov	r0, #28
   19994:	and	r0, r0, r2, lsr #3
   19998:	and	r2, r2, #31
   1999c:	vst1.64	{d16-d17}, [r1], r0
   199a0:	ldr	r0, [r1, #8]
   199a4:	bic	r4, r4, r0, lsr r2
   199a8:	eor	r0, r0, r4, lsl r2
   199ac:	mov	r2, ip
   199b0:	str	r0, [r1, #8]
   199b4:	mov	r0, #0
   199b8:	mov	r1, lr
   199bc:	bl	19630 <__assert_fail@plt+0x8028>
   199c0:	sub	sp, fp, #8
   199c4:	pop	{r4, sl, fp, pc}
   199c8:	push	{fp, lr}
   199cc:	mov	fp, sp
   199d0:	sub	sp, sp, #48	; 0x30
   199d4:	mov	ip, r0
   199d8:	movw	r0, #4776	; 0x12a8
   199dc:	mov	r3, #32
   199e0:	movt	r0, #3
   199e4:	add	r2, r0, #16
   199e8:	vld1.64	{d16-d17}, [r0], r3
   199ec:	mov	r3, sp
   199f0:	vld1.64	{d18-d19}, [r2]
   199f4:	add	r2, r3, #16
   199f8:	vld1.64	{d20-d21}, [r0]
   199fc:	add	r0, r3, #32
   19a00:	vst1.64	{d18-d19}, [r2]
   19a04:	mov	r2, r3
   19a08:	vst1.64	{d20-d21}, [r0]
   19a0c:	mov	r0, #28
   19a10:	and	r0, r0, r1, lsr #3
   19a14:	and	r1, r1, #31
   19a18:	vst1.64	{d16-d17}, [r2], r0
   19a1c:	mov	r0, #1
   19a20:	ldr	lr, [r2, #8]
   19a24:	bic	r0, r0, lr, lsr r1
   19a28:	eor	r0, lr, r0, lsl r1
   19a2c:	mov	r1, ip
   19a30:	str	r0, [r2, #8]
   19a34:	mov	r0, #0
   19a38:	mvn	r2, #0
   19a3c:	bl	19630 <__assert_fail@plt+0x8028>
   19a40:	mov	sp, fp
   19a44:	pop	{fp, pc}
   19a48:	push	{fp, lr}
   19a4c:	mov	fp, sp
   19a50:	sub	sp, sp, #48	; 0x30
   19a54:	movw	r2, #4776	; 0x12a8
   19a58:	mov	r3, #32
   19a5c:	mov	r1, r0
   19a60:	movt	r2, #3
   19a64:	add	r0, r2, #16
   19a68:	vld1.64	{d16-d17}, [r2], r3
   19a6c:	mov	r3, sp
   19a70:	vld1.64	{d18-d19}, [r0]
   19a74:	add	r0, r3, #16
   19a78:	vld1.64	{d20-d21}, [r2]
   19a7c:	mov	r2, r3
   19a80:	vst1.64	{d18-d19}, [r0]
   19a84:	add	r0, r3, #32
   19a88:	vst1.64	{d20-d21}, [r0]
   19a8c:	mov	r0, #12
   19a90:	vst1.64	{d16-d17}, [r2], r0
   19a94:	ldr	r0, [r2]
   19a98:	orr	r0, r0, #67108864	; 0x4000000
   19a9c:	str	r0, [r2]
   19aa0:	mov	r0, #0
   19aa4:	mvn	r2, #0
   19aa8:	bl	19630 <__assert_fail@plt+0x8028>
   19aac:	mov	sp, fp
   19ab0:	pop	{fp, pc}
   19ab4:	push	{fp, lr}
   19ab8:	mov	fp, sp
   19abc:	sub	sp, sp, #48	; 0x30
   19ac0:	mov	ip, r1
   19ac4:	mov	r1, r0
   19ac8:	movw	r0, #4776	; 0x12a8
   19acc:	mov	r3, #32
   19ad0:	movt	r0, #3
   19ad4:	add	r2, r0, #16
   19ad8:	vld1.64	{d16-d17}, [r0], r3
   19adc:	mov	r3, sp
   19ae0:	vld1.64	{d18-d19}, [r2]
   19ae4:	add	r2, r3, #16
   19ae8:	vld1.64	{d20-d21}, [r0]
   19aec:	add	r0, r3, #32
   19af0:	vst1.64	{d18-d19}, [r2]
   19af4:	mov	r2, r3
   19af8:	vst1.64	{d20-d21}, [r0]
   19afc:	mov	r0, #12
   19b00:	vst1.64	{d16-d17}, [r2], r0
   19b04:	ldr	r0, [r2]
   19b08:	orr	r0, r0, #67108864	; 0x4000000
   19b0c:	str	r0, [r2]
   19b10:	mov	r0, #0
   19b14:	mov	r2, ip
   19b18:	bl	19630 <__assert_fail@plt+0x8028>
   19b1c:	mov	sp, fp
   19b20:	pop	{fp, pc}
   19b24:	push	{r4, sl, fp, lr}
   19b28:	add	fp, sp, #8
   19b2c:	sub	sp, sp, #96	; 0x60
   19b30:	mov	ip, r2
   19b34:	mov	r2, sp
   19b38:	vmov.i32	q8, #0	; 0x00000000
   19b3c:	mov	r4, #28
   19b40:	cmp	r1, #10
   19b44:	mov	r3, r2
   19b48:	add	lr, r2, #16
   19b4c:	vst1.64	{d16-d17}, [r3], r4
   19b50:	vst1.64	{d16-d17}, [lr]
   19b54:	vst1.32	{d16-d17}, [r3]
   19b58:	beq	19ba8 <__assert_fail@plt+0x85a0>
   19b5c:	vld1.64	{d16-d17}, [r2], r4
   19b60:	vld1.64	{d18-d19}, [lr]
   19b64:	add	r3, sp, #48	; 0x30
   19b68:	add	r4, r3, #4
   19b6c:	vld1.32	{d20-d21}, [r2]
   19b70:	add	r2, r3, #20
   19b74:	vst1.32	{d16-d17}, [r4]
   19b78:	vst1.32	{d18-d19}, [r2]
   19b7c:	add	r2, r3, #32
   19b80:	vst1.32	{d20-d21}, [r2]
   19b84:	str	r1, [sp, #48]	; 0x30
   19b88:	mvn	r2, #0
   19b8c:	ldr	r1, [sp, #60]	; 0x3c
   19b90:	orr	r1, r1, #67108864	; 0x4000000
   19b94:	str	r1, [sp, #60]	; 0x3c
   19b98:	mov	r1, ip
   19b9c:	bl	19630 <__assert_fail@plt+0x8028>
   19ba0:	sub	sp, fp, #8
   19ba4:	pop	{r4, sl, fp, pc}
   19ba8:	bl	115f0 <abort@plt>
   19bac:	push	{r4, r5, fp, lr}
   19bb0:	add	fp, sp, #8
   19bb4:	sub	sp, sp, #48	; 0x30
   19bb8:	mov	ip, r3
   19bbc:	movw	r3, #4776	; 0x12a8
   19bc0:	mov	lr, #32
   19bc4:	cmp	r1, #0
   19bc8:	mov	r5, sp
   19bcc:	movt	r3, #3
   19bd0:	cmpne	r2, #0
   19bd4:	add	r4, r3, #16
   19bd8:	vld1.64	{d16-d17}, [r3], lr
   19bdc:	vld1.64	{d18-d19}, [r4]
   19be0:	add	r4, r5, #16
   19be4:	vld1.64	{d20-d21}, [r3]
   19be8:	vst1.64	{d16-d17}, [r5], lr
   19bec:	mov	r3, #10
   19bf0:	vst1.64	{d18-d19}, [r4]
   19bf4:	vst1.64	{d20-d21}, [r5]
   19bf8:	str	r3, [sp]
   19bfc:	bne	19c04 <__assert_fail@plt+0x85fc>
   19c00:	bl	115f0 <abort@plt>
   19c04:	str	r2, [sp, #44]	; 0x2c
   19c08:	str	r1, [sp, #40]	; 0x28
   19c0c:	mov	r3, sp
   19c10:	mov	r1, ip
   19c14:	mvn	r2, #0
   19c18:	bl	19630 <__assert_fail@plt+0x8028>
   19c1c:	sub	sp, fp, #8
   19c20:	pop	{r4, r5, fp, pc}
   19c24:	push	{r4, r5, fp, lr}
   19c28:	add	fp, sp, #8
   19c2c:	sub	sp, sp, #48	; 0x30
   19c30:	mov	lr, r3
   19c34:	movw	r3, #4776	; 0x12a8
   19c38:	mov	ip, #32
   19c3c:	cmp	r1, #0
   19c40:	mov	r5, sp
   19c44:	movt	r3, #3
   19c48:	cmpne	r2, #0
   19c4c:	add	r4, r3, #16
   19c50:	vld1.64	{d16-d17}, [r3], ip
   19c54:	vld1.64	{d18-d19}, [r4]
   19c58:	add	r4, r5, #16
   19c5c:	vld1.64	{d20-d21}, [r3]
   19c60:	vst1.64	{d16-d17}, [r5], ip
   19c64:	mov	r3, #10
   19c68:	vst1.64	{d18-d19}, [r4]
   19c6c:	vst1.64	{d20-d21}, [r5]
   19c70:	str	r3, [sp]
   19c74:	bne	19c7c <__assert_fail@plt+0x8674>
   19c78:	bl	115f0 <abort@plt>
   19c7c:	ldr	ip, [fp, #8]
   19c80:	str	r2, [sp, #44]	; 0x2c
   19c84:	str	r1, [sp, #40]	; 0x28
   19c88:	mov	r3, sp
   19c8c:	mov	r1, lr
   19c90:	mov	r2, ip
   19c94:	bl	19630 <__assert_fail@plt+0x8028>
   19c98:	sub	sp, fp, #8
   19c9c:	pop	{r4, r5, fp, pc}
   19ca0:	push	{r4, sl, fp, lr}
   19ca4:	add	fp, sp, #8
   19ca8:	sub	sp, sp, #48	; 0x30
   19cac:	mov	ip, r2
   19cb0:	movw	r2, #4776	; 0x12a8
   19cb4:	mov	lr, #32
   19cb8:	cmp	r0, #0
   19cbc:	mov	r4, sp
   19cc0:	movt	r2, #3
   19cc4:	cmpne	r1, #0
   19cc8:	add	r3, r2, #16
   19ccc:	vld1.64	{d16-d17}, [r2], lr
   19cd0:	vld1.64	{d18-d19}, [r3]
   19cd4:	add	r3, r4, #16
   19cd8:	vld1.64	{d20-d21}, [r2]
   19cdc:	vst1.64	{d16-d17}, [r4], lr
   19ce0:	mov	r2, #10
   19ce4:	vst1.64	{d18-d19}, [r3]
   19ce8:	vst1.64	{d20-d21}, [r4]
   19cec:	str	r2, [sp]
   19cf0:	bne	19cf8 <__assert_fail@plt+0x86f0>
   19cf4:	bl	115f0 <abort@plt>
   19cf8:	str	r1, [sp, #44]	; 0x2c
   19cfc:	str	r0, [sp, #40]	; 0x28
   19d00:	mov	r3, sp
   19d04:	mov	r0, #0
   19d08:	mov	r1, ip
   19d0c:	mvn	r2, #0
   19d10:	bl	19630 <__assert_fail@plt+0x8028>
   19d14:	sub	sp, fp, #8
   19d18:	pop	{r4, sl, fp, pc}
   19d1c:	push	{r4, r5, fp, lr}
   19d20:	add	fp, sp, #8
   19d24:	sub	sp, sp, #48	; 0x30
   19d28:	mov	lr, r2
   19d2c:	movw	r2, #4776	; 0x12a8
   19d30:	mov	ip, r3
   19d34:	mov	r3, #32
   19d38:	cmp	r0, #0
   19d3c:	mov	r5, sp
   19d40:	movt	r2, #3
   19d44:	cmpne	r1, #0
   19d48:	add	r4, r2, #16
   19d4c:	vld1.64	{d16-d17}, [r2], r3
   19d50:	vld1.64	{d18-d19}, [r4]
   19d54:	add	r4, r5, #16
   19d58:	vld1.64	{d20-d21}, [r2]
   19d5c:	vst1.64	{d16-d17}, [r5], r3
   19d60:	mov	r2, #10
   19d64:	vst1.64	{d18-d19}, [r4]
   19d68:	vst1.64	{d20-d21}, [r5]
   19d6c:	str	r2, [sp]
   19d70:	bne	19d78 <__assert_fail@plt+0x8770>
   19d74:	bl	115f0 <abort@plt>
   19d78:	str	r1, [sp, #44]	; 0x2c
   19d7c:	str	r0, [sp, #40]	; 0x28
   19d80:	mov	r3, sp
   19d84:	mov	r0, #0
   19d88:	mov	r1, lr
   19d8c:	mov	r2, ip
   19d90:	bl	19630 <__assert_fail@plt+0x8028>
   19d94:	sub	sp, fp, #8
   19d98:	pop	{r4, r5, fp, pc}
   19d9c:	movw	r3, #4488	; 0x1188
   19da0:	movt	r3, #3
   19da4:	b	19630 <__assert_fail@plt+0x8028>
   19da8:	movw	r3, #4488	; 0x1188
   19dac:	mov	r2, r1
   19db0:	mov	r1, r0
   19db4:	mov	r0, #0
   19db8:	movt	r3, #3
   19dbc:	b	19630 <__assert_fail@plt+0x8028>
   19dc0:	movw	r3, #4488	; 0x1188
   19dc4:	mvn	r2, #0
   19dc8:	movt	r3, #3
   19dcc:	b	19630 <__assert_fail@plt+0x8028>
   19dd0:	movw	r3, #4488	; 0x1188
   19dd4:	mov	r1, r0
   19dd8:	mov	r0, #0
   19ddc:	mvn	r2, #0
   19de0:	movt	r3, #3
   19de4:	b	19630 <__assert_fail@plt+0x8028>
   19de8:	push	{r4, r5, fp, lr}
   19dec:	add	fp, sp, #8
   19df0:	mov	r5, r0
   19df4:	mov	r4, r1
   19df8:	mov	r0, #0
   19dfc:	mov	r2, #5
   19e00:	mov	r1, r5
   19e04:	bl	1138c <dcgettext@plt>
   19e08:	cmp	r0, r5
   19e0c:	popne	{r4, r5, fp, pc}
   19e10:	bl	1e7e8 <__assert_fail@plt+0xd1e0>
   19e14:	ldrb	r1, [r0]
   19e18:	and	r1, r1, #223	; 0xdf
   19e1c:	cmp	r1, #71	; 0x47
   19e20:	beq	19e88 <__assert_fail@plt+0x8880>
   19e24:	cmp	r1, #85	; 0x55
   19e28:	bne	19eac <__assert_fail@plt+0x88a4>
   19e2c:	ldrb	r1, [r0, #1]
   19e30:	and	r1, r1, #223	; 0xdf
   19e34:	cmp	r1, #84	; 0x54
   19e38:	bne	19eac <__assert_fail@plt+0x88a4>
   19e3c:	ldrb	r1, [r0, #2]
   19e40:	and	r1, r1, #223	; 0xdf
   19e44:	cmp	r1, #70	; 0x46
   19e48:	ldrbeq	r1, [r0, #3]
   19e4c:	cmpeq	r1, #45	; 0x2d
   19e50:	bne	19eac <__assert_fail@plt+0x88a4>
   19e54:	ldrb	r1, [r0, #4]
   19e58:	cmp	r1, #56	; 0x38
   19e5c:	ldrbeq	r0, [r0, #5]
   19e60:	cmpeq	r0, #0
   19e64:	bne	19eac <__assert_fail@plt+0x88a4>
   19e68:	ldrb	r1, [r5]
   19e6c:	movw	r2, #897	; 0x381
   19e70:	movw	r0, #901	; 0x385
   19e74:	movt	r2, #2
   19e78:	movt	r0, #2
   19e7c:	cmp	r1, #96	; 0x60
   19e80:	moveq	r0, r2
   19e84:	pop	{r4, r5, fp, pc}
   19e88:	ldrb	r1, [r0, #1]
   19e8c:	and	r1, r1, #223	; 0xdf
   19e90:	cmp	r1, #66	; 0x42
   19e94:	bne	19eac <__assert_fail@plt+0x88a4>
   19e98:	ldrb	r1, [r0, #2]
   19e9c:	cmp	r1, #49	; 0x31
   19ea0:	ldrbeq	r1, [r0, #3]
   19ea4:	cmpeq	r1, #56	; 0x38
   19ea8:	beq	19ec8 <__assert_fail@plt+0x88c0>
   19eac:	movw	r1, #893	; 0x37d
   19eb0:	movw	r0, #2028	; 0x7ec
   19eb4:	cmp	r4, #9
   19eb8:	movt	r1, #2
   19ebc:	movt	r0, #2
   19ec0:	moveq	r0, r1
   19ec4:	pop	{r4, r5, fp, pc}
   19ec8:	ldrb	r1, [r0, #4]
   19ecc:	cmp	r1, #48	; 0x30
   19ed0:	ldrbeq	r1, [r0, #5]
   19ed4:	cmpeq	r1, #51	; 0x33
   19ed8:	bne	19eac <__assert_fail@plt+0x88a4>
   19edc:	ldrb	r1, [r0, #6]
   19ee0:	cmp	r1, #48	; 0x30
   19ee4:	ldrbeq	r0, [r0, #7]
   19ee8:	cmpeq	r0, #0
   19eec:	bne	19eac <__assert_fail@plt+0x88a4>
   19ef0:	ldrb	r1, [r5]
   19ef4:	movw	r2, #905	; 0x389
   19ef8:	movw	r0, #909	; 0x38d
   19efc:	movt	r2, #2
   19f00:	movt	r0, #2
   19f04:	b	19e7c <__assert_fail@plt+0x8874>
   19f08:	push	{r4, r5, r6, r7, fp, lr}
   19f0c:	add	fp, sp, #16
   19f10:	mov	r4, r1
   19f14:	mov	r1, #0
   19f18:	mov	r6, r2
   19f1c:	bl	11578 <setlocale@plt>
   19f20:	cmp	r0, #0
   19f24:	beq	19f54 <__assert_fail@plt+0x894c>
   19f28:	mov	r7, r0
   19f2c:	bl	114b8 <strlen@plt>
   19f30:	cmp	r0, r6
   19f34:	bcs	19f74 <__assert_fail@plt+0x896c>
   19f38:	add	r2, r0, #1
   19f3c:	mov	r0, r4
   19f40:	mov	r1, r7
   19f44:	bl	1135c <memcpy@plt>
   19f48:	mov	r5, #0
   19f4c:	mov	r0, r5
   19f50:	pop	{r4, r5, r6, r7, fp, pc}
   19f54:	cmp	r6, #0
   19f58:	mov	r5, #22
   19f5c:	movne	r0, #0
   19f60:	strbne	r0, [r4]
   19f64:	movne	r0, r5
   19f68:	popne	{r4, r5, r6, r7, fp, pc}
   19f6c:	mov	r0, r5
   19f70:	pop	{r4, r5, r6, r7, fp, pc}
   19f74:	mov	r5, #34	; 0x22
   19f78:	cmp	r6, #0
   19f7c:	beq	19f9c <__assert_fail@plt+0x8994>
   19f80:	sub	r6, r6, #1
   19f84:	mov	r0, r4
   19f88:	mov	r1, r7
   19f8c:	mov	r2, r6
   19f90:	bl	1135c <memcpy@plt>
   19f94:	mov	r0, #0
   19f98:	strb	r0, [r4, r6]
   19f9c:	mov	r0, r5
   19fa0:	pop	{r4, r5, r6, r7, fp, pc}
   19fa4:	mov	r1, #0
   19fa8:	b	11578 <setlocale@plt>
   19fac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19fb0:	add	fp, sp, #24
   19fb4:	mov	r4, r0
   19fb8:	cmp	r0, #0
   19fbc:	beq	19fe0 <__assert_fail@plt+0x89d8>
   19fc0:	mov	r0, r4
   19fc4:	bl	114b8 <strlen@plt>
   19fc8:	add	r5, r0, #1
   19fcc:	cmp	r5, #58	; 0x3a
   19fd0:	bls	19fe4 <__assert_fail@plt+0x89dc>
   19fd4:	add	r0, r0, #10
   19fd8:	bic	r0, r0, #3
   19fdc:	b	19fe8 <__assert_fail@plt+0x89e0>
   19fe0:	mov	r5, #0
   19fe4:	mov	r0, #64	; 0x40
   19fe8:	bl	1e500 <__assert_fail@plt+0xcef8>
   19fec:	mov	r6, r0
   19ff0:	cmp	r0, #0
   19ff4:	beq	1a030 <__assert_fail@plt+0x8a28>
   19ff8:	cmp	r4, #0
   19ffc:	mov	r0, r4
   1a000:	mov	r8, #0
   1a004:	mov	r7, r6
   1a008:	movwne	r0, #1
   1a00c:	str	r8, [r6]
   1a010:	strb	r0, [r6, #4]
   1a014:	strb	r8, [r7, #5]!
   1a018:	beq	1a030 <__assert_fail@plt+0x8a28>
   1a01c:	mov	r0, r7
   1a020:	mov	r1, r4
   1a024:	mov	r2, r5
   1a028:	bl	1135c <memcpy@plt>
   1a02c:	strb	r8, [r7, r5]
   1a030:	mov	r0, r6
   1a034:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a038:	push	{r4, sl, fp, lr}
   1a03c:	add	fp, sp, #8
   1a040:	cmp	r0, #2
   1a044:	popcc	{r4, sl, fp, pc}
   1a048:	ldr	r4, [r0]
   1a04c:	bl	1622c <__assert_fail@plt+0x4c24>
   1a050:	cmp	r4, #0
   1a054:	mov	r0, r4
   1a058:	bne	1a048 <__assert_fail@plt+0x8a40>
   1a05c:	pop	{r4, sl, fp, pc}
   1a060:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a064:	add	fp, sp, #28
   1a068:	sub	sp, sp, #4
   1a06c:	mov	sl, r2
   1a070:	mov	r7, r1
   1a074:	cmp	r0, #0
   1a078:	beq	1a148 <__assert_fail@plt+0x8b40>
   1a07c:	mov	r6, r0
   1a080:	bl	1a184 <__assert_fail@plt+0x8b7c>
   1a084:	cmp	r0, #0
   1a088:	moveq	r0, #0
   1a08c:	subeq	sp, fp, #28
   1a090:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a094:	mov	r4, r0
   1a098:	mov	r0, r7
   1a09c:	mov	r1, sl
   1a0a0:	bl	113a4 <localtime_r@plt>
   1a0a4:	mov	r7, #1
   1a0a8:	cmp	r0, #0
   1a0ac:	mov	r9, #1
   1a0b0:	beq	1a0c4 <__assert_fail@plt+0x8abc>
   1a0b4:	mov	r0, r6
   1a0b8:	mov	r1, sl
   1a0bc:	bl	1a2d0 <__assert_fail@plt+0x8cc8>
   1a0c0:	eor	r9, r0, #1
   1a0c4:	cmp	r4, #1
   1a0c8:	beq	1a12c <__assert_fail@plt+0x8b24>
   1a0cc:	bl	114e8 <__errno_location@plt>
   1a0d0:	mov	r6, r0
   1a0d4:	ldr	r8, [r0]
   1a0d8:	ldrb	r0, [r4, #4]
   1a0dc:	cmp	r0, #0
   1a0e0:	beq	1a15c <__assert_fail@plt+0x8b54>
   1a0e4:	movw	r0, #60691	; 0xed13
   1a0e8:	add	r1, r4, #5
   1a0ec:	mov	r2, #1
   1a0f0:	movt	r0, #1
   1a0f4:	bl	114d0 <setenv@plt>
   1a0f8:	cmp	r0, #0
   1a0fc:	beq	1a170 <__assert_fail@plt+0x8b68>
   1a100:	ldr	r8, [r6]
   1a104:	mov	r7, #0
   1a108:	cmp	r4, #2
   1a10c:	bcc	1a128 <__assert_fail@plt+0x8b20>
   1a110:	ldr	r5, [r4]
   1a114:	mov	r0, r4
   1a118:	bl	1622c <__assert_fail@plt+0x4c24>
   1a11c:	cmp	r5, #0
   1a120:	mov	r4, r5
   1a124:	bne	1a110 <__assert_fail@plt+0x8b08>
   1a128:	str	r8, [r6]
   1a12c:	cmp	r7, #0
   1a130:	moveq	sl, r7
   1a134:	cmp	r9, #0
   1a138:	movwne	sl, #0
   1a13c:	mov	r0, sl
   1a140:	sub	sp, fp, #28
   1a144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a148:	mov	r0, r7
   1a14c:	mov	r1, sl
   1a150:	sub	sp, fp, #28
   1a154:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a158:	b	112e4 <gmtime_r@plt>
   1a15c:	movw	r0, #60691	; 0xed13
   1a160:	movt	r0, #1
   1a164:	bl	115d8 <unsetenv@plt>
   1a168:	cmp	r0, #0
   1a16c:	bne	1a100 <__assert_fail@plt+0x8af8>
   1a170:	bl	113d4 <tzset@plt>
   1a174:	mov	r7, #1
   1a178:	cmp	r4, #2
   1a17c:	bcs	1a110 <__assert_fail@plt+0x8b08>
   1a180:	b	1a128 <__assert_fail@plt+0x8b20>
   1a184:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a188:	add	fp, sp, #28
   1a18c:	sub	sp, sp, #4
   1a190:	mov	r4, r0
   1a194:	movw	r0, #60691	; 0xed13
   1a198:	movt	r0, #1
   1a19c:	bl	11434 <getenv@plt>
   1a1a0:	mov	r6, r0
   1a1a4:	ldrb	r0, [r4, #4]
   1a1a8:	cmp	r6, #0
   1a1ac:	beq	1a1f0 <__assert_fail@plt+0x8be8>
   1a1b0:	cmp	r0, #0
   1a1b4:	beq	1a1cc <__assert_fail@plt+0x8bc4>
   1a1b8:	add	r0, r4, #5
   1a1bc:	mov	r1, r6
   1a1c0:	bl	112f0 <strcmp@plt>
   1a1c4:	cmp	r0, #0
   1a1c8:	beq	1a2a4 <__assert_fail@plt+0x8c9c>
   1a1cc:	mov	r0, r6
   1a1d0:	bl	114b8 <strlen@plt>
   1a1d4:	add	r8, r0, #1
   1a1d8:	mov	r9, #1
   1a1dc:	cmp	r8, #58	; 0x3a
   1a1e0:	bls	1a200 <__assert_fail@plt+0x8bf8>
   1a1e4:	add	r0, r0, #10
   1a1e8:	bic	r0, r0, #3
   1a1ec:	b	1a204 <__assert_fail@plt+0x8bfc>
   1a1f0:	mov	r9, #0
   1a1f4:	cmp	r0, #0
   1a1f8:	mov	r8, #0
   1a1fc:	beq	1a2a4 <__assert_fail@plt+0x8c9c>
   1a200:	mov	r0, #64	; 0x40
   1a204:	bl	1e500 <__assert_fail@plt+0xcef8>
   1a208:	cmp	r0, #0
   1a20c:	beq	1a29c <__assert_fail@plt+0x8c94>
   1a210:	mov	sl, #0
   1a214:	mov	r7, r0
   1a218:	strb	r9, [r0, #4]
   1a21c:	mov	r5, r0
   1a220:	cmp	r9, #0
   1a224:	str	sl, [r0]
   1a228:	strb	sl, [r7, #5]!
   1a22c:	beq	1a244 <__assert_fail@plt+0x8c3c>
   1a230:	mov	r0, r7
   1a234:	mov	r1, r6
   1a238:	mov	r2, r8
   1a23c:	bl	1135c <memcpy@plt>
   1a240:	strb	sl, [r7, r8]
   1a244:	ldrb	r0, [r4, #4]
   1a248:	cmp	r0, #0
   1a24c:	beq	1a2ac <__assert_fail@plt+0x8ca4>
   1a250:	movw	r0, #60691	; 0xed13
   1a254:	add	r1, r4, #5
   1a258:	mov	r2, #1
   1a25c:	movt	r0, #1
   1a260:	bl	114d0 <setenv@plt>
   1a264:	cmp	r0, #0
   1a268:	beq	1a2c0 <__assert_fail@plt+0x8cb8>
   1a26c:	bl	114e8 <__errno_location@plt>
   1a270:	ldr	r6, [r0]
   1a274:	mov	r4, r0
   1a278:	cmp	r5, #2
   1a27c:	bcc	1a298 <__assert_fail@plt+0x8c90>
   1a280:	ldr	r7, [r5]
   1a284:	mov	r0, r5
   1a288:	bl	1622c <__assert_fail@plt+0x4c24>
   1a28c:	cmp	r7, #0
   1a290:	mov	r5, r7
   1a294:	bne	1a280 <__assert_fail@plt+0x8c78>
   1a298:	str	r6, [r4]
   1a29c:	mov	r5, #0
   1a2a0:	b	1a2c4 <__assert_fail@plt+0x8cbc>
   1a2a4:	mov	r5, #1
   1a2a8:	b	1a2c4 <__assert_fail@plt+0x8cbc>
   1a2ac:	movw	r0, #60691	; 0xed13
   1a2b0:	movt	r0, #1
   1a2b4:	bl	115d8 <unsetenv@plt>
   1a2b8:	cmp	r0, #0
   1a2bc:	bne	1a26c <__assert_fail@plt+0x8c64>
   1a2c0:	bl	113d4 <tzset@plt>
   1a2c4:	mov	r0, r5
   1a2c8:	sub	sp, fp, #28
   1a2cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2d4:	add	fp, sp, #28
   1a2d8:	sub	sp, sp, #4
   1a2dc:	ldr	r7, [r1, #40]	; 0x28
   1a2e0:	mov	r8, #1
   1a2e4:	cmp	r7, #0
   1a2e8:	beq	1a38c <__assert_fail@plt+0x8d84>
   1a2ec:	mov	r5, r1
   1a2f0:	mov	r6, r0
   1a2f4:	cmp	r7, r1
   1a2f8:	bcc	1a308 <__assert_fail@plt+0x8d00>
   1a2fc:	add	r0, r5, #44	; 0x2c
   1a300:	cmp	r7, r0
   1a304:	bcc	1a38c <__assert_fail@plt+0x8d84>
   1a308:	ldrb	r0, [r7]
   1a30c:	cmp	r0, #0
   1a310:	beq	1a380 <__assert_fail@plt+0x8d78>
   1a314:	add	r4, r6, #5
   1a318:	b	1a32c <__assert_fail@plt+0x8d24>
   1a31c:	ldr	r0, [r6]
   1a320:	cmp	r0, #0
   1a324:	addne	r4, r0, #5
   1a328:	movne	r6, r0
   1a32c:	mov	r0, r4
   1a330:	mov	r1, r7
   1a334:	bl	112f0 <strcmp@plt>
   1a338:	cmp	r0, #0
   1a33c:	beq	1a388 <__assert_fail@plt+0x8d80>
   1a340:	ldrb	r0, [r4]
   1a344:	cmp	r0, #0
   1a348:	bne	1a364 <__assert_fail@plt+0x8d5c>
   1a34c:	add	r0, r6, #5
   1a350:	cmp	r4, r0
   1a354:	bne	1a398 <__assert_fail@plt+0x8d90>
   1a358:	ldrb	r0, [r6, #4]
   1a35c:	cmp	r0, #0
   1a360:	beq	1a398 <__assert_fail@plt+0x8d90>
   1a364:	mov	r0, r4
   1a368:	bl	114b8 <strlen@plt>
   1a36c:	add	r4, r4, r0
   1a370:	ldrb	r0, [r4, #1]!
   1a374:	cmp	r0, #0
   1a378:	bne	1a32c <__assert_fail@plt+0x8d24>
   1a37c:	b	1a31c <__assert_fail@plt+0x8d14>
   1a380:	movw	r4, #65108	; 0xfe54
   1a384:	movt	r4, #1
   1a388:	str	r4, [r5, #40]	; 0x28
   1a38c:	mov	r0, r8
   1a390:	sub	sp, fp, #28
   1a394:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a398:	add	r0, r6, #64	; 0x40
   1a39c:	sub	sl, r0, r4
   1a3a0:	mov	r0, r7
   1a3a4:	bl	114b8 <strlen@plt>
   1a3a8:	add	r9, r0, #1
   1a3ac:	cmp	r9, sl
   1a3b0:	bge	1a3d0 <__assert_fail@plt+0x8dc8>
   1a3b4:	mov	r0, r4
   1a3b8:	mov	r1, r7
   1a3bc:	mov	r2, r9
   1a3c0:	bl	1135c <memcpy@plt>
   1a3c4:	mov	r0, #0
   1a3c8:	strb	r0, [r4, r9]
   1a3cc:	b	1a388 <__assert_fail@plt+0x8d80>
   1a3d0:	add	r0, r0, #10
   1a3d4:	cmp	r9, #59	; 0x3b
   1a3d8:	bic	r0, r0, #3
   1a3dc:	movwcc	r0, #64	; 0x40
   1a3e0:	bl	1e500 <__assert_fail@plt+0xcef8>
   1a3e4:	cmp	r0, #0
   1a3e8:	beq	1a428 <__assert_fail@plt+0x8e20>
   1a3ec:	mov	sl, r0
   1a3f0:	mov	r0, #0
   1a3f4:	mov	r1, r7
   1a3f8:	mov	r2, r9
   1a3fc:	str	r0, [sl]
   1a400:	mov	r0, #1
   1a404:	add	r4, sl, #5
   1a408:	strh	r0, [sl, #4]
   1a40c:	mov	r0, r4
   1a410:	bl	1135c <memcpy@plt>
   1a414:	mov	r0, #0
   1a418:	strb	r0, [r4, r9]
   1a41c:	str	sl, [r6]
   1a420:	strb	r0, [sl, #4]
   1a424:	b	1a388 <__assert_fail@plt+0x8d80>
   1a428:	mov	r8, #0
   1a42c:	str	r8, [r6]
   1a430:	b	1a38c <__assert_fail@plt+0x8d84>
   1a434:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a438:	add	fp, sp, #28
   1a43c:	sub	sp, sp, #52	; 0x34
   1a440:	mov	r4, r1
   1a444:	cmp	r0, #0
   1a448:	beq	1a554 <__assert_fail@plt+0x8f4c>
   1a44c:	mov	r6, r0
   1a450:	bl	1a184 <__assert_fail@plt+0x8b7c>
   1a454:	cmp	r0, #0
   1a458:	beq	1a54c <__assert_fail@plt+0x8f44>
   1a45c:	mov	r8, r0
   1a460:	mov	r0, #32
   1a464:	mov	r1, r4
   1a468:	add	r5, sp, #8
   1a46c:	vld1.32	{d16-d17}, [r1], r0
   1a470:	mov	r2, r5
   1a474:	vst1.32	{d16-d17}, [r2], r0
   1a478:	ldr	r0, [r4, #16]
   1a47c:	ldr	r3, [r4, #20]
   1a480:	str	r0, [sp, #24]
   1a484:	mvn	r0, #0
   1a488:	str	r0, [sp, #36]	; 0x24
   1a48c:	str	r3, [sp, #28]
   1a490:	ldr	r0, [r1]
   1a494:	str	r0, [r2]
   1a498:	mov	r0, r5
   1a49c:	bl	11314 <mktime@plt>
   1a4a0:	mov	r9, r0
   1a4a4:	ldr	r0, [sp, #36]	; 0x24
   1a4a8:	mov	sl, #1
   1a4ac:	mov	r1, #1
   1a4b0:	cmp	r0, #0
   1a4b4:	blt	1a4c8 <__assert_fail@plt+0x8ec0>
   1a4b8:	add	r1, sp, #8
   1a4bc:	mov	r0, r6
   1a4c0:	bl	1a2d0 <__assert_fail@plt+0x8cc8>
   1a4c4:	eor	r1, r0, #1
   1a4c8:	cmp	r8, #1
   1a4cc:	beq	1a540 <__assert_fail@plt+0x8f38>
   1a4d0:	str	r1, [sp, #4]
   1a4d4:	bl	114e8 <__errno_location@plt>
   1a4d8:	mov	r6, r0
   1a4dc:	ldr	r7, [r0]
   1a4e0:	ldrb	r0, [r8, #4]
   1a4e4:	cmp	r0, #0
   1a4e8:	beq	1a594 <__assert_fail@plt+0x8f8c>
   1a4ec:	movw	r0, #60691	; 0xed13
   1a4f0:	add	r1, r8, #5
   1a4f4:	mov	r2, #1
   1a4f8:	movt	r0, #1
   1a4fc:	bl	114d0 <setenv@plt>
   1a500:	cmp	r0, #0
   1a504:	beq	1a5a8 <__assert_fail@plt+0x8fa0>
   1a508:	ldr	r0, [r6]
   1a50c:	mov	sl, #0
   1a510:	str	r0, [sp]
   1a514:	cmp	r8, #2
   1a518:	bcc	1a534 <__assert_fail@plt+0x8f2c>
   1a51c:	ldr	r7, [r8]
   1a520:	mov	r0, r8
   1a524:	bl	1622c <__assert_fail@plt+0x4c24>
   1a528:	cmp	r7, #0
   1a52c:	mov	r8, r7
   1a530:	bne	1a51c <__assert_fail@plt+0x8f14>
   1a534:	ldr	r0, [sp]
   1a538:	ldr	r1, [sp, #4]
   1a53c:	str	r0, [r6]
   1a540:	eor	r0, sl, #1
   1a544:	orrs	r0, r1, r0
   1a548:	beq	1a564 <__assert_fail@plt+0x8f5c>
   1a54c:	mvn	r9, #0
   1a550:	b	1a588 <__assert_fail@plt+0x8f80>
   1a554:	mov	r0, r4
   1a558:	sub	sp, fp, #28
   1a55c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a560:	b	1159c <timegm@plt>
   1a564:	mov	r0, #28
   1a568:	add	r1, r5, #16
   1a56c:	vld1.32	{d16-d17}, [r5], r0
   1a570:	vld1.64	{d18-d19}, [r1]
   1a574:	add	r1, r4, #16
   1a578:	vld1.32	{d20-d21}, [r5]
   1a57c:	vst1.32	{d16-d17}, [r4], r0
   1a580:	vst1.32	{d18-d19}, [r1]
   1a584:	vst1.32	{d20-d21}, [r4]
   1a588:	mov	r0, r9
   1a58c:	sub	sp, fp, #28
   1a590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a594:	movw	r0, #60691	; 0xed13
   1a598:	movt	r0, #1
   1a59c:	bl	115d8 <unsetenv@plt>
   1a5a0:	cmp	r0, #0
   1a5a4:	bne	1a508 <__assert_fail@plt+0x8f00>
   1a5a8:	str	r7, [sp]
   1a5ac:	bl	113d4 <tzset@plt>
   1a5b0:	mov	sl, #1
   1a5b4:	cmp	r8, #2
   1a5b8:	bcs	1a51c <__assert_fail@plt+0x8f14>
   1a5bc:	b	1a534 <__assert_fail@plt+0x8f2c>
   1a5c0:	mov	r1, #0
   1a5c4:	mov	r2, #3
   1a5c8:	b	1e608 <__assert_fail@plt+0xd000>
   1a5cc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a5d0:	add	fp, sp, #24
   1a5d4:	sub	sp, sp, #32
   1a5d8:	ldr	r6, [fp, #12]
   1a5dc:	ldr	r7, [fp, #8]
   1a5e0:	mov	r4, r2
   1a5e4:	mov	r8, r0
   1a5e8:	cmp	r1, #0
   1a5ec:	beq	1a614 <__assert_fail@plt+0x900c>
   1a5f0:	movw	r2, #996	; 0x3e4
   1a5f4:	mov	r5, r1
   1a5f8:	str	r3, [sp, #4]
   1a5fc:	str	r4, [sp]
   1a600:	mov	r0, r8
   1a604:	mov	r1, #1
   1a608:	movt	r2, #2
   1a60c:	mov	r3, r5
   1a610:	b	1a62c <__assert_fail@plt+0x9024>
   1a614:	movw	r2, #1008	; 0x3f0
   1a618:	str	r3, [sp]
   1a61c:	mov	r0, r8
   1a620:	mov	r1, #1
   1a624:	mov	r3, r4
   1a628:	movt	r2, #2
   1a62c:	bl	11530 <__fprintf_chk@plt>
   1a630:	movw	r1, #1015	; 0x3f7
   1a634:	mov	r0, #0
   1a638:	mov	r2, #5
   1a63c:	movt	r1, #2
   1a640:	bl	1138c <dcgettext@plt>
   1a644:	movw	r2, #1733	; 0x6c5
   1a648:	mov	r3, r0
   1a64c:	movw	r0, #2022	; 0x7e6
   1a650:	mov	r1, #1
   1a654:	str	r0, [sp]
   1a658:	movt	r2, #2
   1a65c:	mov	r0, r8
   1a660:	bl	11530 <__fprintf_chk@plt>
   1a664:	movw	r4, #65219	; 0xfec3
   1a668:	mov	r1, r8
   1a66c:	movt	r4, #1
   1a670:	mov	r0, r4
   1a674:	bl	112cc <fputs_unlocked@plt>
   1a678:	movw	r1, #1019	; 0x3fb
   1a67c:	mov	r0, #0
   1a680:	mov	r2, #5
   1a684:	movt	r1, #2
   1a688:	bl	1138c <dcgettext@plt>
   1a68c:	movw	r3, #1190	; 0x4a6
   1a690:	mov	r2, r0
   1a694:	mov	r0, r8
   1a698:	mov	r1, #1
   1a69c:	movt	r3, #2
   1a6a0:	bl	11530 <__fprintf_chk@plt>
   1a6a4:	mov	r0, r4
   1a6a8:	mov	r1, r8
   1a6ac:	bl	112cc <fputs_unlocked@plt>
   1a6b0:	cmp	r6, #9
   1a6b4:	bhi	1a6f0 <__assert_fail@plt+0x90e8>
   1a6b8:	add	r0, pc, #0
   1a6bc:	ldr	pc, [r0, r6, lsl #2]
   1a6c0:	andeq	sl, r1, r8, ror #13
   1a6c4:	strdeq	sl, [r1], -ip
   1a6c8:	andeq	sl, r1, ip, lsr #14
   1a6cc:	andeq	sl, r1, r4, asr r7
   1a6d0:	andeq	sl, r1, ip, ror r7
   1a6d4:	andeq	sl, r1, r4, lsr #15
   1a6d8:	andeq	sl, r1, ip, asr #15
   1a6dc:	andeq	sl, r1, r4, lsl #16
   1a6e0:	andeq	sl, r1, r4, lsr #17
   1a6e4:	andeq	sl, r1, ip, asr #16
   1a6e8:	sub	sp, fp, #24
   1a6ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a6f0:	movw	r1, #1543	; 0x607
   1a6f4:	movt	r1, #2
   1a6f8:	b	1a854 <__assert_fail@plt+0x924c>
   1a6fc:	movw	r1, #1224	; 0x4c8
   1a700:	mov	r0, #0
   1a704:	mov	r2, #5
   1a708:	movt	r1, #2
   1a70c:	bl	1138c <dcgettext@plt>
   1a710:	ldr	r3, [r7]
   1a714:	mov	r2, r0
   1a718:	mov	r0, r8
   1a71c:	mov	r1, #1
   1a720:	sub	sp, fp, #24
   1a724:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a728:	b	11530 <__fprintf_chk@plt>
   1a72c:	movw	r1, #1240	; 0x4d8
   1a730:	mov	r0, #0
   1a734:	mov	r2, #5
   1a738:	movt	r1, #2
   1a73c:	bl	1138c <dcgettext@plt>
   1a740:	mov	r2, r0
   1a744:	ldr	r3, [r7]
   1a748:	ldr	r0, [r7, #4]
   1a74c:	str	r0, [sp]
   1a750:	b	1a840 <__assert_fail@plt+0x9238>
   1a754:	movw	r1, #1263	; 0x4ef
   1a758:	mov	r0, #0
   1a75c:	mov	r2, #5
   1a760:	movt	r1, #2
   1a764:	bl	1138c <dcgettext@plt>
   1a768:	ldr	r3, [r7]
   1a76c:	mov	r2, r0
   1a770:	ldmib	r7, {r0, r1}
   1a774:	stm	sp, {r0, r1}
   1a778:	b	1a840 <__assert_fail@plt+0x9238>
   1a77c:	movw	r1, #1291	; 0x50b
   1a780:	mov	r0, #0
   1a784:	mov	r2, #5
   1a788:	movt	r1, #2
   1a78c:	bl	1138c <dcgettext@plt>
   1a790:	ldr	r3, [r7]
   1a794:	mov	r2, r0
   1a798:	ldmib	r7, {r0, r1, r7}
   1a79c:	stm	sp, {r0, r1, r7}
   1a7a0:	b	1a840 <__assert_fail@plt+0x9238>
   1a7a4:	movw	r1, #1323	; 0x52b
   1a7a8:	mov	r0, #0
   1a7ac:	mov	r2, #5
   1a7b0:	movt	r1, #2
   1a7b4:	bl	1138c <dcgettext@plt>
   1a7b8:	ldr	r3, [r7]
   1a7bc:	mov	r2, r0
   1a7c0:	ldmib	r7, {r0, r1, r6, r7}
   1a7c4:	stm	sp, {r0, r1, r6, r7}
   1a7c8:	b	1a840 <__assert_fail@plt+0x9238>
   1a7cc:	movw	r1, #1359	; 0x54f
   1a7d0:	mov	r0, #0
   1a7d4:	mov	r2, #5
   1a7d8:	movt	r1, #2
   1a7dc:	bl	1138c <dcgettext@plt>
   1a7e0:	ldr	r3, [r7]
   1a7e4:	mov	r2, r0
   1a7e8:	ldmib	r7, {r0, r1, r6}
   1a7ec:	ldr	r5, [r7, #16]
   1a7f0:	ldr	r7, [r7, #20]
   1a7f4:	stm	sp, {r0, r1, r6}
   1a7f8:	str	r5, [sp, #12]
   1a7fc:	str	r7, [sp, #16]
   1a800:	b	1a840 <__assert_fail@plt+0x9238>
   1a804:	movw	r1, #1399	; 0x577
   1a808:	mov	r0, #0
   1a80c:	mov	r2, #5
   1a810:	movt	r1, #2
   1a814:	bl	1138c <dcgettext@plt>
   1a818:	ldr	r3, [r7]
   1a81c:	mov	r2, r0
   1a820:	ldmib	r7, {r0, r1, r6}
   1a824:	ldr	r5, [r7, #16]
   1a828:	ldr	r4, [r7, #20]
   1a82c:	ldr	r7, [r7, #24]
   1a830:	stm	sp, {r0, r1, r6}
   1a834:	str	r5, [sp, #12]
   1a838:	str	r4, [sp, #16]
   1a83c:	str	r7, [sp, #20]
   1a840:	mov	r0, r8
   1a844:	mov	r1, #1
   1a848:	b	1a8f4 <__assert_fail@plt+0x92ec>
   1a84c:	movw	r1, #1491	; 0x5d3
   1a850:	movt	r1, #2
   1a854:	mov	r0, #0
   1a858:	mov	r2, #5
   1a85c:	bl	1138c <dcgettext@plt>
   1a860:	mov	ip, r0
   1a864:	ldr	r3, [r7]
   1a868:	ldr	r0, [r7, #4]
   1a86c:	ldr	r1, [r7, #8]
   1a870:	ldr	r6, [r7, #12]
   1a874:	ldr	r5, [r7, #16]
   1a878:	ldr	r4, [r7, #20]
   1a87c:	ldr	r2, [r7, #24]
   1a880:	ldr	lr, [r7, #28]
   1a884:	ldr	r7, [r7, #32]
   1a888:	stm	sp, {r0, r1, r6}
   1a88c:	str	r5, [sp, #12]
   1a890:	str	r4, [sp, #16]
   1a894:	str	r2, [sp, #20]
   1a898:	str	lr, [sp, #24]
   1a89c:	str	r7, [sp, #28]
   1a8a0:	b	1a8e8 <__assert_fail@plt+0x92e0>
   1a8a4:	movw	r1, #1443	; 0x5a3
   1a8a8:	mov	r0, #0
   1a8ac:	mov	r2, #5
   1a8b0:	movt	r1, #2
   1a8b4:	bl	1138c <dcgettext@plt>
   1a8b8:	mov	ip, r0
   1a8bc:	ldr	r3, [r7]
   1a8c0:	ldmib	r7, {r0, r1, r6}
   1a8c4:	ldr	r5, [r7, #16]
   1a8c8:	ldr	r4, [r7, #20]
   1a8cc:	ldr	r2, [r7, #24]
   1a8d0:	ldr	r7, [r7, #28]
   1a8d4:	stm	sp, {r0, r1, r6}
   1a8d8:	str	r5, [sp, #12]
   1a8dc:	str	r4, [sp, #16]
   1a8e0:	str	r2, [sp, #20]
   1a8e4:	str	r7, [sp, #24]
   1a8e8:	mov	r0, r8
   1a8ec:	mov	r1, #1
   1a8f0:	mov	r2, ip
   1a8f4:	bl	11530 <__fprintf_chk@plt>
   1a8f8:	sub	sp, fp, #24
   1a8fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a900:	push	{r4, sl, fp, lr}
   1a904:	add	fp, sp, #8
   1a908:	sub	sp, sp, #8
   1a90c:	ldr	ip, [fp, #8]
   1a910:	mov	lr, #0
   1a914:	ldr	r4, [ip, lr, lsl #2]
   1a918:	add	lr, lr, #1
   1a91c:	cmp	r4, #0
   1a920:	bne	1a914 <__assert_fail@plt+0x930c>
   1a924:	sub	r4, lr, #1
   1a928:	str	ip, [sp]
   1a92c:	str	r4, [sp, #4]
   1a930:	bl	1a5cc <__assert_fail@plt+0x8fc4>
   1a934:	sub	sp, fp, #8
   1a938:	pop	{r4, sl, fp, pc}
   1a93c:	push	{fp, lr}
   1a940:	mov	fp, sp
   1a944:	sub	sp, sp, #48	; 0x30
   1a948:	ldr	ip, [fp, #8]
   1a94c:	ldr	lr, [ip]
   1a950:	cmp	lr, #0
   1a954:	str	lr, [sp, #8]
   1a958:	beq	1a9f4 <__assert_fail@plt+0x93ec>
   1a95c:	ldr	lr, [ip, #4]
   1a960:	cmp	lr, #0
   1a964:	str	lr, [sp, #12]
   1a968:	beq	1a9fc <__assert_fail@plt+0x93f4>
   1a96c:	ldr	lr, [ip, #8]
   1a970:	cmp	lr, #0
   1a974:	str	lr, [sp, #16]
   1a978:	beq	1aa04 <__assert_fail@plt+0x93fc>
   1a97c:	ldr	lr, [ip, #12]
   1a980:	cmp	lr, #0
   1a984:	str	lr, [sp, #20]
   1a988:	beq	1aa0c <__assert_fail@plt+0x9404>
   1a98c:	ldr	lr, [ip, #16]
   1a990:	cmp	lr, #0
   1a994:	str	lr, [sp, #24]
   1a998:	beq	1aa14 <__assert_fail@plt+0x940c>
   1a99c:	ldr	lr, [ip, #20]
   1a9a0:	cmp	lr, #0
   1a9a4:	str	lr, [sp, #28]
   1a9a8:	beq	1aa1c <__assert_fail@plt+0x9414>
   1a9ac:	ldr	lr, [ip, #24]
   1a9b0:	cmp	lr, #0
   1a9b4:	str	lr, [sp, #32]
   1a9b8:	beq	1aa24 <__assert_fail@plt+0x941c>
   1a9bc:	ldr	lr, [ip, #28]
   1a9c0:	cmp	lr, #0
   1a9c4:	str	lr, [sp, #36]	; 0x24
   1a9c8:	beq	1aa2c <__assert_fail@plt+0x9424>
   1a9cc:	ldr	lr, [ip, #32]
   1a9d0:	cmp	lr, #0
   1a9d4:	str	lr, [sp, #40]	; 0x28
   1a9d8:	beq	1aa34 <__assert_fail@plt+0x942c>
   1a9dc:	ldr	lr, [ip, #36]	; 0x24
   1a9e0:	mov	ip, #10
   1a9e4:	cmp	lr, #0
   1a9e8:	str	lr, [sp, #44]	; 0x2c
   1a9ec:	movweq	ip, #9
   1a9f0:	b	1aa38 <__assert_fail@plt+0x9430>
   1a9f4:	mov	ip, #0
   1a9f8:	b	1aa38 <__assert_fail@plt+0x9430>
   1a9fc:	mov	ip, #1
   1aa00:	b	1aa38 <__assert_fail@plt+0x9430>
   1aa04:	mov	ip, #2
   1aa08:	b	1aa38 <__assert_fail@plt+0x9430>
   1aa0c:	mov	ip, #3
   1aa10:	b	1aa38 <__assert_fail@plt+0x9430>
   1aa14:	mov	ip, #4
   1aa18:	b	1aa38 <__assert_fail@plt+0x9430>
   1aa1c:	mov	ip, #5
   1aa20:	b	1aa38 <__assert_fail@plt+0x9430>
   1aa24:	mov	ip, #6
   1aa28:	b	1aa38 <__assert_fail@plt+0x9430>
   1aa2c:	mov	ip, #7
   1aa30:	b	1aa38 <__assert_fail@plt+0x9430>
   1aa34:	mov	ip, #8
   1aa38:	add	lr, sp, #8
   1aa3c:	str	ip, [sp, #4]
   1aa40:	str	lr, [sp]
   1aa44:	bl	1a5cc <__assert_fail@plt+0x8fc4>
   1aa48:	mov	sp, fp
   1aa4c:	pop	{fp, pc}
   1aa50:	push	{fp, lr}
   1aa54:	mov	fp, sp
   1aa58:	sub	sp, sp, #56	; 0x38
   1aa5c:	add	ip, fp, #8
   1aa60:	str	ip, [sp, #12]
   1aa64:	ldr	lr, [fp, #8]
   1aa68:	cmp	lr, #0
   1aa6c:	str	lr, [sp, #16]
   1aa70:	beq	1ab0c <__assert_fail@plt+0x9504>
   1aa74:	ldr	lr, [ip, #4]
   1aa78:	cmp	lr, #0
   1aa7c:	str	lr, [sp, #20]
   1aa80:	beq	1ab14 <__assert_fail@plt+0x950c>
   1aa84:	ldr	lr, [ip, #8]
   1aa88:	cmp	lr, #0
   1aa8c:	str	lr, [sp, #24]
   1aa90:	beq	1ab1c <__assert_fail@plt+0x9514>
   1aa94:	ldr	lr, [ip, #12]
   1aa98:	cmp	lr, #0
   1aa9c:	str	lr, [sp, #28]
   1aaa0:	beq	1ab24 <__assert_fail@plt+0x951c>
   1aaa4:	ldr	lr, [ip, #16]
   1aaa8:	cmp	lr, #0
   1aaac:	str	lr, [sp, #32]
   1aab0:	beq	1ab2c <__assert_fail@plt+0x9524>
   1aab4:	ldr	lr, [ip, #20]
   1aab8:	cmp	lr, #0
   1aabc:	str	lr, [sp, #36]	; 0x24
   1aac0:	beq	1ab34 <__assert_fail@plt+0x952c>
   1aac4:	ldr	lr, [ip, #24]
   1aac8:	cmp	lr, #0
   1aacc:	str	lr, [sp, #40]	; 0x28
   1aad0:	beq	1ab3c <__assert_fail@plt+0x9534>
   1aad4:	ldr	lr, [ip, #28]
   1aad8:	cmp	lr, #0
   1aadc:	str	lr, [sp, #44]	; 0x2c
   1aae0:	beq	1ab44 <__assert_fail@plt+0x953c>
   1aae4:	ldr	lr, [ip, #32]
   1aae8:	cmp	lr, #0
   1aaec:	str	lr, [sp, #48]	; 0x30
   1aaf0:	beq	1ab4c <__assert_fail@plt+0x9544>
   1aaf4:	ldr	lr, [ip, #36]	; 0x24
   1aaf8:	mov	ip, #10
   1aafc:	cmp	lr, #0
   1ab00:	str	lr, [sp, #52]	; 0x34
   1ab04:	movweq	ip, #9
   1ab08:	b	1ab50 <__assert_fail@plt+0x9548>
   1ab0c:	mov	ip, #0
   1ab10:	b	1ab50 <__assert_fail@plt+0x9548>
   1ab14:	mov	ip, #1
   1ab18:	b	1ab50 <__assert_fail@plt+0x9548>
   1ab1c:	mov	ip, #2
   1ab20:	b	1ab50 <__assert_fail@plt+0x9548>
   1ab24:	mov	ip, #3
   1ab28:	b	1ab50 <__assert_fail@plt+0x9548>
   1ab2c:	mov	ip, #4
   1ab30:	b	1ab50 <__assert_fail@plt+0x9548>
   1ab34:	mov	ip, #5
   1ab38:	b	1ab50 <__assert_fail@plt+0x9548>
   1ab3c:	mov	ip, #6
   1ab40:	b	1ab50 <__assert_fail@plt+0x9548>
   1ab44:	mov	ip, #7
   1ab48:	b	1ab50 <__assert_fail@plt+0x9548>
   1ab4c:	mov	ip, #8
   1ab50:	add	lr, sp, #16
   1ab54:	str	ip, [sp, #4]
   1ab58:	str	lr, [sp]
   1ab5c:	bl	1a5cc <__assert_fail@plt+0x8fc4>
   1ab60:	mov	sp, fp
   1ab64:	pop	{fp, pc}
   1ab68:	push	{fp, lr}
   1ab6c:	mov	fp, sp
   1ab70:	movw	r0, #4564	; 0x11d4
   1ab74:	movt	r0, #3
   1ab78:	ldr	r1, [r0]
   1ab7c:	movw	r0, #65219	; 0xfec3
   1ab80:	movt	r0, #1
   1ab84:	bl	112cc <fputs_unlocked@plt>
   1ab88:	movw	r1, #1603	; 0x643
   1ab8c:	mov	r0, #0
   1ab90:	mov	r2, #5
   1ab94:	movt	r1, #2
   1ab98:	bl	1138c <dcgettext@plt>
   1ab9c:	movw	r2, #1623	; 0x657
   1aba0:	mov	r1, r0
   1aba4:	mov	r0, #1
   1aba8:	movt	r2, #2
   1abac:	bl	11518 <__printf_chk@plt>
   1abb0:	movw	r1, #1645	; 0x66d
   1abb4:	mov	r0, #0
   1abb8:	mov	r2, #5
   1abbc:	movt	r1, #2
   1abc0:	bl	1138c <dcgettext@plt>
   1abc4:	movw	r2, #60603	; 0xecbb
   1abc8:	movw	r3, #65479	; 0xffc7
   1abcc:	mov	r1, r0
   1abd0:	mov	r0, #1
   1abd4:	movt	r2, #1
   1abd8:	movt	r3, #1
   1abdc:	bl	11518 <__printf_chk@plt>
   1abe0:	movw	r1, #1665	; 0x681
   1abe4:	mov	r0, #0
   1abe8:	mov	r2, #5
   1abec:	movt	r1, #2
   1abf0:	bl	1138c <dcgettext@plt>
   1abf4:	movw	r2, #1704	; 0x6a8
   1abf8:	mov	r1, r0
   1abfc:	mov	r0, #1
   1ac00:	movt	r2, #2
   1ac04:	pop	{fp, lr}
   1ac08:	b	11518 <__printf_chk@plt>
   1ac0c:	push	{r4, r5, r6, sl, fp, lr}
   1ac10:	add	fp, sp, #16
   1ac14:	mov	r4, r2
   1ac18:	mov	r5, r1
   1ac1c:	mov	r6, r0
   1ac20:	bl	1e880 <__assert_fail@plt+0xd278>
   1ac24:	cmp	r0, #0
   1ac28:	popne	{r4, r5, r6, sl, fp, pc}
   1ac2c:	cmp	r6, #0
   1ac30:	beq	1ac44 <__assert_fail@plt+0x963c>
   1ac34:	cmp	r5, #0
   1ac38:	cmpne	r4, #0
   1ac3c:	bne	1ac44 <__assert_fail@plt+0x963c>
   1ac40:	pop	{r4, r5, r6, sl, fp, pc}
   1ac44:	bl	1b1e4 <__assert_fail@plt+0x9bdc>
   1ac48:	push	{r4, r5, r6, sl, fp, lr}
   1ac4c:	add	fp, sp, #16
   1ac50:	mov	r4, r2
   1ac54:	mov	r5, r1
   1ac58:	mov	r6, r0
   1ac5c:	bl	1e880 <__assert_fail@plt+0xd278>
   1ac60:	cmp	r0, #0
   1ac64:	popne	{r4, r5, r6, sl, fp, pc}
   1ac68:	cmp	r6, #0
   1ac6c:	beq	1ac80 <__assert_fail@plt+0x9678>
   1ac70:	cmp	r5, #0
   1ac74:	cmpne	r4, #0
   1ac78:	bne	1ac80 <__assert_fail@plt+0x9678>
   1ac7c:	pop	{r4, r5, r6, sl, fp, pc}
   1ac80:	bl	1b1e4 <__assert_fail@plt+0x9bdc>
   1ac84:	push	{fp, lr}
   1ac88:	mov	fp, sp
   1ac8c:	bl	1e500 <__assert_fail@plt+0xcef8>
   1ac90:	cmp	r0, #0
   1ac94:	popne	{fp, pc}
   1ac98:	bl	1b1e4 <__assert_fail@plt+0x9bdc>
   1ac9c:	push	{fp, lr}
   1aca0:	mov	fp, sp
   1aca4:	bl	1e500 <__assert_fail@plt+0xcef8>
   1aca8:	cmp	r0, #0
   1acac:	popne	{fp, pc}
   1acb0:	bl	1b1e4 <__assert_fail@plt+0x9bdc>
   1acb4:	push	{fp, lr}
   1acb8:	mov	fp, sp
   1acbc:	bl	1e500 <__assert_fail@plt+0xcef8>
   1acc0:	cmp	r0, #0
   1acc4:	popne	{fp, pc}
   1acc8:	bl	1b1e4 <__assert_fail@plt+0x9bdc>
   1accc:	push	{r4, r5, fp, lr}
   1acd0:	add	fp, sp, #8
   1acd4:	mov	r4, r1
   1acd8:	mov	r5, r0
   1acdc:	bl	1e530 <__assert_fail@plt+0xcf28>
   1ace0:	cmp	r0, #0
   1ace4:	popne	{r4, r5, fp, pc}
   1ace8:	cmp	r5, #0
   1acec:	beq	1acfc <__assert_fail@plt+0x96f4>
   1acf0:	cmp	r4, #0
   1acf4:	bne	1acfc <__assert_fail@plt+0x96f4>
   1acf8:	pop	{r4, r5, fp, pc}
   1acfc:	bl	1b1e4 <__assert_fail@plt+0x9bdc>
   1ad00:	push	{fp, lr}
   1ad04:	mov	fp, sp
   1ad08:	cmp	r1, #0
   1ad0c:	orreq	r1, r1, #1
   1ad10:	bl	1e530 <__assert_fail@plt+0xcf28>
   1ad14:	cmp	r0, #0
   1ad18:	popne	{fp, pc}
   1ad1c:	bl	1b1e4 <__assert_fail@plt+0x9bdc>
   1ad20:	push	{fp, lr}
   1ad24:	mov	fp, sp
   1ad28:	clz	r3, r2
   1ad2c:	lsr	ip, r3, #5
   1ad30:	clz	r3, r1
   1ad34:	lsr	r3, r3, #5
   1ad38:	orrs	r3, r3, ip
   1ad3c:	movwne	r1, #1
   1ad40:	movwne	r2, #1
   1ad44:	bl	1e880 <__assert_fail@plt+0xd278>
   1ad48:	cmp	r0, #0
   1ad4c:	popne	{fp, pc}
   1ad50:	bl	1b1e4 <__assert_fail@plt+0x9bdc>
   1ad54:	push	{fp, lr}
   1ad58:	mov	fp, sp
   1ad5c:	mov	r2, r1
   1ad60:	mov	r1, r0
   1ad64:	mov	r0, #0
   1ad68:	bl	1e880 <__assert_fail@plt+0xd278>
   1ad6c:	cmp	r0, #0
   1ad70:	popne	{fp, pc}
   1ad74:	bl	1b1e4 <__assert_fail@plt+0x9bdc>
   1ad78:	push	{fp, lr}
   1ad7c:	mov	fp, sp
   1ad80:	mov	r2, r1
   1ad84:	mov	r1, r0
   1ad88:	clz	r0, r2
   1ad8c:	clz	r3, r1
   1ad90:	lsr	r0, r0, #5
   1ad94:	lsr	r3, r3, #5
   1ad98:	orrs	r0, r3, r0
   1ad9c:	movwne	r1, #1
   1ada0:	movwne	r2, #1
   1ada4:	mov	r0, #0
   1ada8:	bl	1e880 <__assert_fail@plt+0xd278>
   1adac:	cmp	r0, #0
   1adb0:	popne	{fp, pc}
   1adb4:	bl	1b1e4 <__assert_fail@plt+0x9bdc>
   1adb8:	push	{r4, r5, r6, sl, fp, lr}
   1adbc:	add	fp, sp, #16
   1adc0:	ldr	r5, [r1]
   1adc4:	mov	r4, r1
   1adc8:	mov	r6, r0
   1adcc:	cmp	r0, #0
   1add0:	beq	1ade8 <__assert_fail@plt+0x97e0>
   1add4:	mov	r0, #1
   1add8:	add	r0, r0, r5, lsr #1
   1addc:	adds	r5, r5, r0
   1ade0:	bcc	1adf0 <__assert_fail@plt+0x97e8>
   1ade4:	b	1ae2c <__assert_fail@plt+0x9824>
   1ade8:	cmp	r5, #0
   1adec:	movweq	r5, #64	; 0x40
   1adf0:	mov	r0, r6
   1adf4:	mov	r1, r5
   1adf8:	mov	r2, #1
   1adfc:	bl	1e880 <__assert_fail@plt+0xd278>
   1ae00:	cmp	r5, #0
   1ae04:	mov	r1, r5
   1ae08:	movwne	r1, #1
   1ae0c:	cmp	r0, #0
   1ae10:	bne	1ae24 <__assert_fail@plt+0x981c>
   1ae14:	clz	r2, r6
   1ae18:	lsr	r2, r2, #5
   1ae1c:	orrs	r1, r2, r1
   1ae20:	bne	1ae2c <__assert_fail@plt+0x9824>
   1ae24:	str	r5, [r4]
   1ae28:	pop	{r4, r5, r6, sl, fp, pc}
   1ae2c:	bl	1b1e4 <__assert_fail@plt+0x9bdc>
   1ae30:	push	{r4, r5, r6, r7, fp, lr}
   1ae34:	add	fp, sp, #16
   1ae38:	ldr	r5, [r1]
   1ae3c:	mov	r6, r2
   1ae40:	mov	r4, r1
   1ae44:	mov	r7, r0
   1ae48:	cmp	r0, #0
   1ae4c:	beq	1ae64 <__assert_fail@plt+0x985c>
   1ae50:	mov	r0, #1
   1ae54:	add	r0, r0, r5, lsr #1
   1ae58:	adds	r5, r5, r0
   1ae5c:	bcc	1ae7c <__assert_fail@plt+0x9874>
   1ae60:	b	1aeb0 <__assert_fail@plt+0x98a8>
   1ae64:	cmp	r5, #0
   1ae68:	bne	1ae7c <__assert_fail@plt+0x9874>
   1ae6c:	mov	r0, #64	; 0x40
   1ae70:	cmp	r6, #64	; 0x40
   1ae74:	udiv	r5, r0, r6
   1ae78:	addhi	r5, r5, #1
   1ae7c:	mov	r0, r7
   1ae80:	mov	r1, r5
   1ae84:	mov	r2, r6
   1ae88:	bl	1e880 <__assert_fail@plt+0xd278>
   1ae8c:	cmp	r0, #0
   1ae90:	bne	1aea8 <__assert_fail@plt+0x98a0>
   1ae94:	cmp	r7, #0
   1ae98:	beq	1aeb0 <__assert_fail@plt+0x98a8>
   1ae9c:	cmp	r6, #0
   1aea0:	cmpne	r5, #0
   1aea4:	bne	1aeb0 <__assert_fail@plt+0x98a8>
   1aea8:	str	r5, [r4]
   1aeac:	pop	{r4, r5, r6, r7, fp, pc}
   1aeb0:	bl	1b1e4 <__assert_fail@plt+0x9bdc>
   1aeb4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1aeb8:	add	fp, sp, #24
   1aebc:	mov	r8, r1
   1aec0:	ldr	r1, [r1]
   1aec4:	mov	r5, r0
   1aec8:	add	r0, r1, r1, asr #1
   1aecc:	cmp	r0, r1
   1aed0:	mvnvs	r0, #-2147483648	; 0x80000000
   1aed4:	cmp	r0, r3
   1aed8:	mov	r7, r0
   1aedc:	movgt	r7, r3
   1aee0:	cmn	r3, #1
   1aee4:	movle	r7, r0
   1aee8:	ldr	r0, [fp, #8]
   1aeec:	cmn	r0, #1
   1aef0:	ble	1af18 <__assert_fail@plt+0x9910>
   1aef4:	cmp	r0, #0
   1aef8:	beq	1af6c <__assert_fail@plt+0x9964>
   1aefc:	cmn	r7, #1
   1af00:	ble	1af40 <__assert_fail@plt+0x9938>
   1af04:	mvn	r4, #-2147483648	; 0x80000000
   1af08:	udiv	r6, r4, r0
   1af0c:	cmp	r6, r7
   1af10:	bge	1af6c <__assert_fail@plt+0x9964>
   1af14:	b	1af7c <__assert_fail@plt+0x9974>
   1af18:	cmn	r7, #1
   1af1c:	ble	1af5c <__assert_fail@plt+0x9954>
   1af20:	cmn	r0, #1
   1af24:	beq	1af6c <__assert_fail@plt+0x9964>
   1af28:	mov	r6, #-2147483648	; 0x80000000
   1af2c:	mvn	r4, #-2147483648	; 0x80000000
   1af30:	sdiv	r6, r6, r0
   1af34:	cmp	r6, r7
   1af38:	bge	1af6c <__assert_fail@plt+0x9964>
   1af3c:	b	1af7c <__assert_fail@plt+0x9974>
   1af40:	beq	1af6c <__assert_fail@plt+0x9964>
   1af44:	mov	r6, #-2147483648	; 0x80000000
   1af48:	mvn	r4, #-2147483648	; 0x80000000
   1af4c:	sdiv	r6, r6, r7
   1af50:	cmp	r6, r0
   1af54:	bge	1af6c <__assert_fail@plt+0x9964>
   1af58:	b	1af7c <__assert_fail@plt+0x9974>
   1af5c:	mvn	r4, #-2147483648	; 0x80000000
   1af60:	sdiv	r6, r4, r0
   1af64:	cmp	r7, r6
   1af68:	blt	1af7c <__assert_fail@plt+0x9974>
   1af6c:	mul	r6, r7, r0
   1af70:	mov	r4, #64	; 0x40
   1af74:	cmp	r6, #63	; 0x3f
   1af78:	bgt	1af84 <__assert_fail@plt+0x997c>
   1af7c:	sdiv	r7, r4, r0
   1af80:	mul	r6, r7, r0
   1af84:	cmp	r5, #0
   1af88:	moveq	r4, #0
   1af8c:	streq	r4, [r8]
   1af90:	sub	r4, r7, r1
   1af94:	cmp	r4, r2
   1af98:	bge	1b044 <__assert_fail@plt+0x9a3c>
   1af9c:	add	r7, r1, r2
   1afa0:	mov	r6, #0
   1afa4:	mov	r2, #0
   1afa8:	cmp	r7, r3
   1afac:	movwgt	r6, #1
   1afb0:	cmn	r3, #1
   1afb4:	movwgt	r2, #1
   1afb8:	cmp	r7, r1
   1afbc:	bvs	1b078 <__assert_fail@plt+0x9a70>
   1afc0:	ands	r1, r2, r6
   1afc4:	bne	1b078 <__assert_fail@plt+0x9a70>
   1afc8:	cmn	r0, #1
   1afcc:	ble	1aff4 <__assert_fail@plt+0x99ec>
   1afd0:	cmp	r0, #0
   1afd4:	beq	1b040 <__assert_fail@plt+0x9a38>
   1afd8:	cmn	r7, #1
   1afdc:	ble	1b018 <__assert_fail@plt+0x9a10>
   1afe0:	mvn	r1, #-2147483648	; 0x80000000
   1afe4:	udiv	r1, r1, r0
   1afe8:	cmp	r1, r7
   1afec:	bge	1b040 <__assert_fail@plt+0x9a38>
   1aff0:	b	1b078 <__assert_fail@plt+0x9a70>
   1aff4:	cmn	r7, #1
   1aff8:	ble	1b030 <__assert_fail@plt+0x9a28>
   1affc:	cmn	r0, #1
   1b000:	beq	1b040 <__assert_fail@plt+0x9a38>
   1b004:	mov	r1, #-2147483648	; 0x80000000
   1b008:	sdiv	r1, r1, r0
   1b00c:	cmp	r1, r7
   1b010:	bge	1b040 <__assert_fail@plt+0x9a38>
   1b014:	b	1b078 <__assert_fail@plt+0x9a70>
   1b018:	beq	1b040 <__assert_fail@plt+0x9a38>
   1b01c:	mov	r1, #-2147483648	; 0x80000000
   1b020:	sdiv	r1, r1, r7
   1b024:	cmp	r1, r0
   1b028:	bge	1b040 <__assert_fail@plt+0x9a38>
   1b02c:	b	1b078 <__assert_fail@plt+0x9a70>
   1b030:	mvn	r1, #-2147483648	; 0x80000000
   1b034:	sdiv	r1, r1, r0
   1b038:	cmp	r7, r1
   1b03c:	blt	1b078 <__assert_fail@plt+0x9a70>
   1b040:	mul	r6, r7, r0
   1b044:	mov	r0, r5
   1b048:	mov	r1, r6
   1b04c:	bl	1e530 <__assert_fail@plt+0xcf28>
   1b050:	cmp	r6, #0
   1b054:	movwne	r6, #1
   1b058:	cmp	r0, #0
   1b05c:	bne	1b070 <__assert_fail@plt+0x9a68>
   1b060:	clz	r1, r5
   1b064:	lsr	r1, r1, #5
   1b068:	orrs	r1, r1, r6
   1b06c:	bne	1b078 <__assert_fail@plt+0x9a70>
   1b070:	str	r7, [r8]
   1b074:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b078:	bl	1b1e4 <__assert_fail@plt+0x9bdc>
   1b07c:	push	{fp, lr}
   1b080:	mov	fp, sp
   1b084:	mov	r1, #1
   1b088:	bl	1e4ac <__assert_fail@plt+0xcea4>
   1b08c:	cmp	r0, #0
   1b090:	popne	{fp, pc}
   1b094:	bl	1b1e4 <__assert_fail@plt+0x9bdc>
   1b098:	push	{fp, lr}
   1b09c:	mov	fp, sp
   1b0a0:	bl	1e4ac <__assert_fail@plt+0xcea4>
   1b0a4:	cmp	r0, #0
   1b0a8:	popne	{fp, pc}
   1b0ac:	bl	1b1e4 <__assert_fail@plt+0x9bdc>
   1b0b0:	push	{fp, lr}
   1b0b4:	mov	fp, sp
   1b0b8:	mov	r1, #1
   1b0bc:	bl	1e4ac <__assert_fail@plt+0xcea4>
   1b0c0:	cmp	r0, #0
   1b0c4:	popne	{fp, pc}
   1b0c8:	bl	1b1e4 <__assert_fail@plt+0x9bdc>
   1b0cc:	push	{fp, lr}
   1b0d0:	mov	fp, sp
   1b0d4:	bl	1e4ac <__assert_fail@plt+0xcea4>
   1b0d8:	cmp	r0, #0
   1b0dc:	popne	{fp, pc}
   1b0e0:	bl	1b1e4 <__assert_fail@plt+0x9bdc>
   1b0e4:	push	{r4, r5, r6, sl, fp, lr}
   1b0e8:	add	fp, sp, #16
   1b0ec:	mov	r5, r0
   1b0f0:	mov	r0, r1
   1b0f4:	mov	r4, r1
   1b0f8:	bl	1e500 <__assert_fail@plt+0xcef8>
   1b0fc:	cmp	r0, #0
   1b100:	beq	1b11c <__assert_fail@plt+0x9b14>
   1b104:	mov	r1, r5
   1b108:	mov	r2, r4
   1b10c:	mov	r6, r0
   1b110:	bl	1135c <memcpy@plt>
   1b114:	mov	r0, r6
   1b118:	pop	{r4, r5, r6, sl, fp, pc}
   1b11c:	bl	1b1e4 <__assert_fail@plt+0x9bdc>
   1b120:	push	{r4, r5, r6, sl, fp, lr}
   1b124:	add	fp, sp, #16
   1b128:	mov	r5, r0
   1b12c:	mov	r0, r1
   1b130:	mov	r4, r1
   1b134:	bl	1e500 <__assert_fail@plt+0xcef8>
   1b138:	cmp	r0, #0
   1b13c:	beq	1b158 <__assert_fail@plt+0x9b50>
   1b140:	mov	r1, r5
   1b144:	mov	r2, r4
   1b148:	mov	r6, r0
   1b14c:	bl	1135c <memcpy@plt>
   1b150:	mov	r0, r6
   1b154:	pop	{r4, r5, r6, sl, fp, pc}
   1b158:	bl	1b1e4 <__assert_fail@plt+0x9bdc>
   1b15c:	push	{r4, r5, r6, sl, fp, lr}
   1b160:	add	fp, sp, #16
   1b164:	mov	r5, r0
   1b168:	add	r0, r1, #1
   1b16c:	mov	r4, r1
   1b170:	bl	1e500 <__assert_fail@plt+0xcef8>
   1b174:	cmp	r0, #0
   1b178:	beq	1b1a0 <__assert_fail@plt+0x9b98>
   1b17c:	mov	r6, r0
   1b180:	mov	r0, #0
   1b184:	mov	r1, r5
   1b188:	mov	r2, r4
   1b18c:	strb	r0, [r6, r4]
   1b190:	mov	r0, r6
   1b194:	bl	1135c <memcpy@plt>
   1b198:	mov	r0, r6
   1b19c:	pop	{r4, r5, r6, sl, fp, pc}
   1b1a0:	bl	1b1e4 <__assert_fail@plt+0x9bdc>
   1b1a4:	push	{r4, r5, r6, sl, fp, lr}
   1b1a8:	add	fp, sp, #16
   1b1ac:	mov	r4, r0
   1b1b0:	bl	114b8 <strlen@plt>
   1b1b4:	add	r5, r0, #1
   1b1b8:	mov	r0, r5
   1b1bc:	bl	1e500 <__assert_fail@plt+0xcef8>
   1b1c0:	cmp	r0, #0
   1b1c4:	beq	1b1e0 <__assert_fail@plt+0x9bd8>
   1b1c8:	mov	r1, r4
   1b1cc:	mov	r2, r5
   1b1d0:	mov	r6, r0
   1b1d4:	bl	1135c <memcpy@plt>
   1b1d8:	mov	r0, r6
   1b1dc:	pop	{r4, r5, r6, sl, fp, pc}
   1b1e0:	bl	1b1e4 <__assert_fail@plt+0x9bdc>
   1b1e4:	push	{fp, lr}
   1b1e8:	mov	fp, sp
   1b1ec:	movw	r0, #4468	; 0x1174
   1b1f0:	movw	r1, #1780	; 0x6f4
   1b1f4:	mov	r2, #5
   1b1f8:	movt	r0, #3
   1b1fc:	movt	r1, #2
   1b200:	ldr	r4, [r0]
   1b204:	mov	r0, #0
   1b208:	bl	1138c <dcgettext@plt>
   1b20c:	movw	r2, #711	; 0x2c7
   1b210:	mov	r3, r0
   1b214:	mov	r0, r4
   1b218:	mov	r1, #0
   1b21c:	movt	r2, #2
   1b220:	bl	11428 <error@plt>
   1b224:	bl	115f0 <abort@plt>
   1b228:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b22c:	add	fp, sp, #24
   1b230:	sub	sp, sp, #16
   1b234:	mov	r8, r0
   1b238:	ldr	r0, [fp, #16]
   1b23c:	mov	r7, r3
   1b240:	mov	r4, r2
   1b244:	mov	r2, r1
   1b248:	add	r3, sp, #8
   1b24c:	mov	r1, #0
   1b250:	str	r0, [sp]
   1b254:	mov	r0, r8
   1b258:	bl	1b338 <__assert_fail@plt+0x9d30>
   1b25c:	cmp	r0, #0
   1b260:	bne	1b30c <__assert_fail@plt+0x9d04>
   1b264:	ldr	r6, [sp, #8]
   1b268:	ldr	r5, [sp, #12]
   1b26c:	subs	r0, r6, r4
   1b270:	sbcs	r0, r5, r7
   1b274:	blt	1b298 <__assert_fail@plt+0x9c90>
   1b278:	ldr	r1, [fp, #8]
   1b27c:	ldr	r0, [fp, #12]
   1b280:	subs	r1, r1, r6
   1b284:	sbcs	r0, r0, r5
   1b288:	movge	r0, r6
   1b28c:	movge	r1, r5
   1b290:	subge	sp, fp, #24
   1b294:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b298:	subs	r0, r6, #1073741824	; 0x40000000
   1b29c:	sbcs	r0, r5, #0
   1b2a0:	blt	1b2b0 <__assert_fail@plt+0x9ca8>
   1b2a4:	bl	114e8 <__errno_location@plt>
   1b2a8:	mov	r1, #75	; 0x4b
   1b2ac:	b	1b2cc <__assert_fail@plt+0x9cc4>
   1b2b0:	bl	114e8 <__errno_location@plt>
   1b2b4:	mvn	r2, #1073741824	; 0x40000000
   1b2b8:	mvn	r1, #0
   1b2bc:	subs	r2, r2, r6
   1b2c0:	sbcs	r1, r1, r5
   1b2c4:	movlt	r1, #34	; 0x22
   1b2c8:	movge	r1, #75	; 0x4b
   1b2cc:	str	r1, [r0]
   1b2d0:	ldr	r6, [r0]
   1b2d4:	ldr	r4, [fp, #24]
   1b2d8:	ldr	r5, [fp, #20]
   1b2dc:	mov	r0, r8
   1b2e0:	bl	19dd0 <__assert_fail@plt+0x87c8>
   1b2e4:	subs	r1, r6, #22
   1b2e8:	movw	r2, #707	; 0x2c3
   1b2ec:	str	r0, [sp]
   1b2f0:	mov	r3, r5
   1b2f4:	movne	r1, r6
   1b2f8:	cmp	r4, #0
   1b2fc:	movt	r2, #2
   1b300:	movweq	r4, #1
   1b304:	mov	r0, r4
   1b308:	bl	11428 <error@plt>
   1b30c:	cmp	r0, #1
   1b310:	beq	1b2a4 <__assert_fail@plt+0x9c9c>
   1b314:	cmp	r0, #3
   1b318:	bne	1b328 <__assert_fail@plt+0x9d20>
   1b31c:	bl	114e8 <__errno_location@plt>
   1b320:	mov	r1, #0
   1b324:	b	1b2cc <__assert_fail@plt+0x9cc4>
   1b328:	bl	114e8 <__errno_location@plt>
   1b32c:	b	1b2d0 <__assert_fail@plt+0x9cc8>
   1b330:	mov	r1, #10
   1b334:	b	1b228 <__assert_fail@plt+0x9c20>
   1b338:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b33c:	add	fp, sp, #28
   1b340:	sub	sp, sp, #36	; 0x24
   1b344:	cmp	r2, #37	; 0x25
   1b348:	bcs	1cc30 <__assert_fail@plt+0xb628>
   1b34c:	ldr	r8, [fp, #8]
   1b350:	mov	r9, r3
   1b354:	mov	r6, r2
   1b358:	mov	r7, r1
   1b35c:	mov	r4, r0
   1b360:	bl	114e8 <__errno_location@plt>
   1b364:	add	sl, sp, #32
   1b368:	cmp	r7, #0
   1b36c:	mov	r5, r0
   1b370:	mov	r0, #0
   1b374:	mov	r2, r6
   1b378:	mov	r3, #0
   1b37c:	movne	sl, r7
   1b380:	str	r0, [r5]
   1b384:	mov	r0, r4
   1b388:	mov	r1, sl
   1b38c:	bl	115b4 <__strtoll_internal@plt>
   1b390:	mov	r7, r1
   1b394:	ldr	r1, [sl]
   1b398:	cmp	r1, r4
   1b39c:	beq	1b3cc <__assert_fail@plt+0x9dc4>
   1b3a0:	mov	r6, r0
   1b3a4:	ldr	r0, [r5]
   1b3a8:	cmp	r0, #0
   1b3ac:	beq	1b40c <__assert_fail@plt+0x9e04>
   1b3b0:	mov	r5, #4
   1b3b4:	cmp	r0, #34	; 0x22
   1b3b8:	bne	1c840 <__assert_fail@plt+0xb238>
   1b3bc:	mov	r5, #1
   1b3c0:	cmp	r8, #0
   1b3c4:	bne	1b418 <__assert_fail@plt+0x9e10>
   1b3c8:	b	1c83c <__assert_fail@plt+0xb234>
   1b3cc:	mov	r5, #4
   1b3d0:	cmp	r8, #0
   1b3d4:	beq	1c840 <__assert_fail@plt+0xb238>
   1b3d8:	mov	r6, r1
   1b3dc:	ldrb	r1, [r4]
   1b3e0:	cmp	r1, #0
   1b3e4:	beq	1c840 <__assert_fail@plt+0xb238>
   1b3e8:	mov	r0, r8
   1b3ec:	bl	114c4 <strchr@plt>
   1b3f0:	cmp	r0, #0
   1b3f4:	beq	1c840 <__assert_fail@plt+0xb238>
   1b3f8:	mov	r1, r6
   1b3fc:	mov	r5, #0
   1b400:	mov	r6, #1
   1b404:	mov	r7, #0
   1b408:	b	1b418 <__assert_fail@plt+0x9e10>
   1b40c:	mov	r5, r0
   1b410:	cmp	r8, #0
   1b414:	beq	1c83c <__assert_fail@plt+0xb234>
   1b418:	ldrb	r4, [r1]
   1b41c:	cmp	r4, #0
   1b420:	beq	1c83c <__assert_fail@plt+0xb234>
   1b424:	str	r1, [sp, #20]
   1b428:	mov	r0, r8
   1b42c:	mov	r1, r4
   1b430:	bl	114c4 <strchr@plt>
   1b434:	cmp	r0, #0
   1b438:	beq	1b6c4 <__assert_fail@plt+0xa0bc>
   1b43c:	sub	r0, r4, #69	; 0x45
   1b440:	mov	r1, #1
   1b444:	mov	r3, #0
   1b448:	mov	r2, #1024	; 0x400
   1b44c:	cmp	r0, #47	; 0x2f
   1b450:	str	r1, [sp, #16]
   1b454:	bhi	1b590 <__assert_fail@plt+0x9f88>
   1b458:	add	r1, pc, #0
   1b45c:	ldr	pc, [r1, r0, lsl #2]
   1b460:	andeq	fp, r1, r0, lsr #10
   1b464:	muleq	r1, r0, r5
   1b468:	andeq	fp, r1, r0, lsr #10
   1b46c:	muleq	r1, r0, r5
   1b470:	muleq	r1, r0, r5
   1b474:	muleq	r1, r0, r5
   1b478:	andeq	fp, r1, r0, lsr #10
   1b47c:	muleq	r1, r0, r5
   1b480:	andeq	fp, r1, r0, lsr #10
   1b484:	muleq	r1, r0, r5
   1b488:	muleq	r1, r0, r5
   1b48c:	andeq	fp, r1, r0, lsr #10
   1b490:	muleq	r1, r0, r5
   1b494:	muleq	r1, r0, r5
   1b498:	muleq	r1, r0, r5
   1b49c:	andeq	fp, r1, r0, lsr #10
   1b4a0:	muleq	r1, r0, r5
   1b4a4:	muleq	r1, r0, r5
   1b4a8:	muleq	r1, r0, r5
   1b4ac:	muleq	r1, r0, r5
   1b4b0:	andeq	fp, r1, r0, lsr #10
   1b4b4:	andeq	fp, r1, r0, lsr #10
   1b4b8:	muleq	r1, r0, r5
   1b4bc:	muleq	r1, r0, r5
   1b4c0:	muleq	r1, r0, r5
   1b4c4:	muleq	r1, r0, r5
   1b4c8:	muleq	r1, r0, r5
   1b4cc:	muleq	r1, r0, r5
   1b4d0:	muleq	r1, r0, r5
   1b4d4:	muleq	r1, r0, r5
   1b4d8:	muleq	r1, r0, r5
   1b4dc:	muleq	r1, r0, r5
   1b4e0:	muleq	r1, r0, r5
   1b4e4:	muleq	r1, r0, r5
   1b4e8:	andeq	fp, r1, r0, lsr #10
   1b4ec:	muleq	r1, r0, r5
   1b4f0:	muleq	r1, r0, r5
   1b4f4:	muleq	r1, r0, r5
   1b4f8:	andeq	fp, r1, r0, lsr #10
   1b4fc:	muleq	r1, r0, r5
   1b500:	andeq	fp, r1, r0, lsr #10
   1b504:	muleq	r1, r0, r5
   1b508:	muleq	r1, r0, r5
   1b50c:	muleq	r1, r0, r5
   1b510:	muleq	r1, r0, r5
   1b514:	muleq	r1, r0, r5
   1b518:	muleq	r1, r0, r5
   1b51c:	andeq	fp, r1, r0, lsr #10
   1b520:	mov	r0, r8
   1b524:	mov	r1, #48	; 0x30
   1b528:	bl	114c4 <strchr@plt>
   1b52c:	cmp	r0, #0
   1b530:	beq	1b55c <__assert_fail@plt+0x9f54>
   1b534:	ldr	r1, [sp, #20]
   1b538:	ldrb	r0, [r1, #1]
   1b53c:	cmp	r0, #66	; 0x42
   1b540:	cmpne	r0, #68	; 0x44
   1b544:	bne	1b564 <__assert_fail@plt+0x9f5c>
   1b548:	mov	r0, #2
   1b54c:	mov	r2, #1000	; 0x3e8
   1b550:	mov	r3, #0
   1b554:	str	r0, [sp, #16]
   1b558:	b	1b590 <__assert_fail@plt+0x9f88>
   1b55c:	mov	r3, #0
   1b560:	b	1b58c <__assert_fail@plt+0x9f84>
   1b564:	cmp	r0, #105	; 0x69
   1b568:	mov	r3, #0
   1b56c:	bne	1b58c <__assert_fail@plt+0x9f84>
   1b570:	ldrb	r0, [r1, #2]
   1b574:	mov	r1, #1
   1b578:	mov	r2, #1024	; 0x400
   1b57c:	cmp	r0, #66	; 0x42
   1b580:	movweq	r1, #3
   1b584:	str	r1, [sp, #16]
   1b588:	b	1b590 <__assert_fail@plt+0x9f88>
   1b58c:	mov	r2, #1024	; 0x400
   1b590:	sub	r0, r4, #66	; 0x42
   1b594:	cmp	r0, #53	; 0x35
   1b598:	bhi	1b6c4 <__assert_fail@plt+0xa0bc>
   1b59c:	add	r1, pc, #8
   1b5a0:	str	r3, [sp, #28]
   1b5a4:	str	r2, [sp, #24]
   1b5a8:	ldr	pc, [r1, r0, lsl #2]
   1b5ac:	andeq	fp, r1, r4, asr #15
   1b5b0:	andeq	fp, r1, r4, asr #13
   1b5b4:	andeq	fp, r1, r4, asr #13
   1b5b8:	ldrdeq	fp, [r1], -r8
   1b5bc:	andeq	fp, r1, r4, asr #13
   1b5c0:	andeq	fp, r1, r4, lsl #13
   1b5c4:	andeq	fp, r1, r4, asr #13
   1b5c8:	andeq	fp, r1, r4, asr #13
   1b5cc:	andeq	fp, r1, r4, asr #13
   1b5d0:	andeq	fp, r1, ip, asr #13
   1b5d4:	andeq	fp, r1, r4, asr #13
   1b5d8:	strdeq	fp, [r1], -ip
   1b5dc:	andeq	fp, r1, r4, asr #13
   1b5e0:	andeq	fp, r1, r4, asr #13
   1b5e4:	andeq	fp, r1, ip, lsl r8
   1b5e8:	andeq	fp, r1, r4, asr #13
   1b5ec:	andeq	fp, r1, r4, asr #13
   1b5f0:	andeq	fp, r1, r4, asr #13
   1b5f4:	andeq	fp, r1, ip, lsr r7
   1b5f8:	andeq	fp, r1, r4, asr #13
   1b5fc:	andeq	fp, r1, r4, asr #13
   1b600:	andeq	fp, r1, r4, asr #13
   1b604:	andeq	fp, r1, r4, asr #13
   1b608:	andeq	fp, r1, r0, ror #16
   1b60c:	andeq	fp, r1, r0, lsl #15
   1b610:	andeq	fp, r1, r4, asr #13
   1b614:	andeq	fp, r1, r4, asr #13
   1b618:	andeq	fp, r1, r4, asr #13
   1b61c:	andeq	fp, r1, r4, asr #13
   1b620:	andeq	fp, r1, r4, asr #13
   1b624:	andeq	fp, r1, r4, asr #13
   1b628:	andeq	fp, r1, r4, asr #13
   1b62c:	andeq	fp, r1, r4, lsr #17
   1b630:	andeq	ip, r1, ip, lsl r8
   1b634:	andeq	fp, r1, r4, asr #13
   1b638:	andeq	fp, r1, r4, asr #13
   1b63c:	andeq	fp, r1, r4, asr #13
   1b640:	andeq	fp, r1, r4, lsl #13
   1b644:	andeq	fp, r1, r4, asr #13
   1b648:	andeq	fp, r1, r4, asr #13
   1b64c:	andeq	fp, r1, r4, asr #13
   1b650:	andeq	fp, r1, ip, asr #13
   1b654:	andeq	fp, r1, r4, asr #13
   1b658:	strdeq	fp, [r1], -ip
   1b65c:	andeq	fp, r1, r4, asr #13
   1b660:	andeq	fp, r1, r4, asr #13
   1b664:	andeq	fp, r1, r4, asr #13
   1b668:	andeq	fp, r1, r4, asr #13
   1b66c:	andeq	fp, r1, r4, asr #13
   1b670:	andeq	fp, r1, r4, asr #13
   1b674:	andeq	fp, r1, ip, lsr r7
   1b678:	andeq	fp, r1, r4, asr #13
   1b67c:	andeq	fp, r1, r4, asr #13
   1b680:			; <UNDEFINED> instruction: 0x0001b8b8
   1b684:	cmn	r7, #1
   1b688:	str	r9, [sp, #12]
   1b68c:	ble	1b8cc <__assert_fail@plt+0xa2c4>
   1b690:	ldr	r3, [sp, #28]
   1b694:	mvn	r0, #0
   1b698:	mvn	r1, #-2147483648	; 0x80000000
   1b69c:	mvn	r8, #0
   1b6a0:	mvn	r9, #-2147483648	; 0x80000000
   1b6a4:	bl	1e990 <__assert_fail@plt+0xd388>
   1b6a8:	ldr	r2, [sp, #24]
   1b6ac:	ldr	r3, [sp, #28]
   1b6b0:	subs	r0, r0, r6
   1b6b4:	mov	r4, #1
   1b6b8:	sbcs	r0, r1, r7
   1b6bc:	bge	1b90c <__assert_fail@plt+0xa304>
   1b6c0:	b	1b924 <__assert_fail@plt+0xa31c>
   1b6c4:	orr	r5, r5, #2
   1b6c8:	b	1c83c <__assert_fail@plt+0xb234>
   1b6cc:	cmn	r7, #1
   1b6d0:	ble	1b960 <__assert_fail@plt+0xa358>
   1b6d4:	ldr	r3, [sp, #28]
   1b6d8:	mvn	r0, #0
   1b6dc:	mvn	r1, #-2147483648	; 0x80000000
   1b6e0:	bl	1e990 <__assert_fail@plt+0xd388>
   1b6e4:	ldr	r2, [sp, #24]
   1b6e8:	ldr	r3, [sp, #28]
   1b6ec:	subs	r0, r0, r6
   1b6f0:	sbcs	r0, r1, r7
   1b6f4:	bge	1b994 <__assert_fail@plt+0xa38c>
   1b6f8:	b	1c0a4 <__assert_fail@plt+0xaa9c>
   1b6fc:	cmn	r7, #1
   1b700:	str	r9, [sp, #12]
   1b704:	ble	1b9a8 <__assert_fail@plt+0xa3a0>
   1b708:	ldr	r3, [sp, #28]
   1b70c:	mvn	r0, #0
   1b710:	mvn	r1, #-2147483648	; 0x80000000
   1b714:	mvn	r8, #0
   1b718:	mvn	r9, #-2147483648	; 0x80000000
   1b71c:	bl	1e990 <__assert_fail@plt+0xd388>
   1b720:	ldr	r2, [sp, #24]
   1b724:	ldr	r3, [sp, #28]
   1b728:	subs	r0, r0, r6
   1b72c:	mov	r4, #1
   1b730:	sbcs	r0, r1, r7
   1b734:	bge	1b9e8 <__assert_fail@plt+0xa3e0>
   1b738:	b	1ba00 <__assert_fail@plt+0xa3f8>
   1b73c:	cmn	r7, #1
   1b740:	str	r9, [sp, #12]
   1b744:	ble	1ba38 <__assert_fail@plt+0xa430>
   1b748:	ldr	r3, [sp, #28]
   1b74c:	mvn	r0, #0
   1b750:	mvn	r1, #-2147483648	; 0x80000000
   1b754:	mvn	r9, #-2147483648	; 0x80000000
   1b758:	str	r0, [sp, #8]
   1b75c:	mvn	r0, #0
   1b760:	bl	1e990 <__assert_fail@plt+0xd388>
   1b764:	ldr	r2, [sp, #24]
   1b768:	ldr	r3, [sp, #28]
   1b76c:	subs	r0, r0, r6
   1b770:	mov	r4, #1
   1b774:	sbcs	r0, r1, r7
   1b778:	bge	1ba7c <__assert_fail@plt+0xa474>
   1b77c:	b	1ba98 <__assert_fail@plt+0xa490>
   1b780:	cmp	r7, #0
   1b784:	str	r9, [sp, #12]
   1b788:	blt	1bd80 <__assert_fail@plt+0xa778>
   1b78c:	ldr	r3, [sp, #28]
   1b790:	mvn	r0, #0
   1b794:	mvn	r1, #-2147483648	; 0x80000000
   1b798:	mvn	r9, #-2147483648	; 0x80000000
   1b79c:	str	r0, [sp, #8]
   1b7a0:	mvn	r0, #0
   1b7a4:	bl	1e990 <__assert_fail@plt+0xd388>
   1b7a8:	ldr	r2, [sp, #24]
   1b7ac:	ldr	r3, [sp, #28]
   1b7b0:	subs	r0, r0, r6
   1b7b4:	mov	r4, #1
   1b7b8:	sbcs	r0, r1, r7
   1b7bc:	bge	1bdc4 <__assert_fail@plt+0xa7bc>
   1b7c0:	b	1bde0 <__assert_fail@plt+0xa7d8>
   1b7c4:	cmn	r7, #1
   1b7c8:	ble	1be1c <__assert_fail@plt+0xa814>
   1b7cc:	cmp	r7, #2097152	; 0x200000
   1b7d0:	blt	1be4c <__assert_fail@plt+0xa844>
   1b7d4:	b	1c0a4 <__assert_fail@plt+0xaa9c>
   1b7d8:	cmp	r7, #0
   1b7dc:	str	r9, [sp, #12]
   1b7e0:	blt	1be5c <__assert_fail@plt+0xa854>
   1b7e4:	ldr	r3, [sp, #28]
   1b7e8:	mvn	r0, #0
   1b7ec:	mvn	r1, #-2147483648	; 0x80000000
   1b7f0:	mvn	r9, #-2147483648	; 0x80000000
   1b7f4:	str	r0, [sp, #8]
   1b7f8:	mvn	r0, #0
   1b7fc:	bl	1e990 <__assert_fail@plt+0xd388>
   1b800:	ldr	r2, [sp, #24]
   1b804:	ldr	r3, [sp, #28]
   1b808:	subs	r0, r0, r6
   1b80c:	mov	r4, #1
   1b810:	sbcs	r0, r1, r7
   1b814:	bge	1bea0 <__assert_fail@plt+0xa898>
   1b818:	b	1bebc <__assert_fail@plt+0xa8b4>
   1b81c:	cmp	r7, #0
   1b820:	str	r9, [sp, #12]
   1b824:	blt	1bef8 <__assert_fail@plt+0xa8f0>
   1b828:	ldr	r3, [sp, #28]
   1b82c:	mvn	r0, #0
   1b830:	mvn	r1, #-2147483648	; 0x80000000
   1b834:	mvn	r8, #-2147483648	; 0x80000000
   1b838:	str	r0, [sp, #8]
   1b83c:	mvn	r0, #0
   1b840:	bl	1e990 <__assert_fail@plt+0xd388>
   1b844:	ldr	r2, [sp, #24]
   1b848:	ldr	r3, [sp, #28]
   1b84c:	subs	r0, r0, r6
   1b850:	mov	r4, #1
   1b854:	sbcs	r0, r1, r7
   1b858:	bge	1bf3c <__assert_fail@plt+0xa934>
   1b85c:	b	1bf58 <__assert_fail@plt+0xa950>
   1b860:	cmp	r7, #0
   1b864:	str	r9, [sp, #12]
   1b868:	blt	1bf94 <__assert_fail@plt+0xa98c>
   1b86c:	ldr	r3, [sp, #28]
   1b870:	mvn	r0, #0
   1b874:	mvn	r1, #-2147483648	; 0x80000000
   1b878:	mvn	r9, #-2147483648	; 0x80000000
   1b87c:	str	r0, [sp, #8]
   1b880:	mvn	r0, #0
   1b884:	bl	1e990 <__assert_fail@plt+0xd388>
   1b888:	ldr	r2, [sp, #24]
   1b88c:	ldr	r3, [sp, #28]
   1b890:	subs	r0, r0, r6
   1b894:	mov	r4, #1
   1b898:	sbcs	r0, r1, r7
   1b89c:	bge	1bfd8 <__assert_fail@plt+0xa9d0>
   1b8a0:	b	1bff4 <__assert_fail@plt+0xa9ec>
   1b8a4:	cmn	r7, #1
   1b8a8:	ble	1c034 <__assert_fail@plt+0xaa2c>
   1b8ac:	cmp	r7, #4194304	; 0x400000
   1b8b0:	blt	1c064 <__assert_fail@plt+0xaa5c>
   1b8b4:	b	1c0a4 <__assert_fail@plt+0xaa9c>
   1b8b8:	cmn	r7, #1
   1b8bc:	ble	1c074 <__assert_fail@plt+0xaa6c>
   1b8c0:	cmp	r7, #1073741824	; 0x40000000
   1b8c4:	bge	1c0a4 <__assert_fail@plt+0xaa9c>
   1b8c8:	b	1c0c4 <__assert_fail@plt+0xaabc>
   1b8cc:	and	r0, r6, r7
   1b8d0:	cmn	r0, #1
   1b8d4:	beq	1b90c <__assert_fail@plt+0xa304>
   1b8d8:	mov	r0, #0
   1b8dc:	mov	r1, #-2147483648	; 0x80000000
   1b8e0:	mov	r2, r6
   1b8e4:	mov	r3, r7
   1b8e8:	mov	r8, #0
   1b8ec:	mov	r9, #-2147483648	; 0x80000000
   1b8f0:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1b8f4:	ldr	r2, [sp, #24]
   1b8f8:	ldr	r3, [sp, #28]
   1b8fc:	mov	r4, #1
   1b900:	subs	r0, r0, r2
   1b904:	sbcs	r0, r1, r3
   1b908:	blt	1bad4 <__assert_fail@plt+0xa4cc>
   1b90c:	umull	r8, r0, r6, r2
   1b910:	mov	r4, #0
   1b914:	mla	r0, r6, r3, r0
   1b918:	mla	r9, r7, r2, r0
   1b91c:	cmp	r9, #0
   1b920:	blt	1bad4 <__assert_fail@plt+0xa4cc>
   1b924:	ldr	r3, [sp, #28]
   1b928:	mvn	r0, #-2147483648	; 0x80000000
   1b92c:	mvn	r1, #-2147483648	; 0x80000000
   1b930:	mov	r6, r4
   1b934:	mvn	r4, #0
   1b938:	str	r0, [sp, #8]
   1b93c:	mvn	r0, #0
   1b940:	bl	1e990 <__assert_fail@plt+0xd388>
   1b944:	ldr	r2, [sp, #24]
   1b948:	ldr	r3, [sp, #28]
   1b94c:	subs	r0, r0, r8
   1b950:	mov	r7, #1
   1b954:	sbcs	r0, r1, r9
   1b958:	bge	1bb10 <__assert_fail@plt+0xa508>
   1b95c:	b	1bb2c <__assert_fail@plt+0xa524>
   1b960:	and	r0, r6, r7
   1b964:	cmn	r0, #1
   1b968:	beq	1b994 <__assert_fail@plt+0xa38c>
   1b96c:	mov	r0, #0
   1b970:	mov	r1, #-2147483648	; 0x80000000
   1b974:	mov	r2, r6
   1b978:	mov	r3, r7
   1b97c:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1b980:	ldr	r2, [sp, #24]
   1b984:	ldr	r3, [sp, #28]
   1b988:	subs	r0, r0, r2
   1b98c:	sbcs	r0, r1, r3
   1b990:	blt	1c0a4 <__assert_fail@plt+0xaa9c>
   1b994:	umull	r0, r1, r6, r2
   1b998:	mla	r1, r6, r3, r1
   1b99c:	mov	r6, r0
   1b9a0:	mla	r7, r7, r2, r1
   1b9a4:	b	1c81c <__assert_fail@plt+0xb214>
   1b9a8:	and	r0, r6, r7
   1b9ac:	cmn	r0, #1
   1b9b0:	beq	1b9e8 <__assert_fail@plt+0xa3e0>
   1b9b4:	mov	r0, #0
   1b9b8:	mov	r1, #-2147483648	; 0x80000000
   1b9bc:	mov	r2, r6
   1b9c0:	mov	r3, r7
   1b9c4:	mov	r8, #0
   1b9c8:	mov	r9, #-2147483648	; 0x80000000
   1b9cc:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1b9d0:	ldr	r2, [sp, #24]
   1b9d4:	ldr	r3, [sp, #28]
   1b9d8:	mov	r4, #1
   1b9dc:	subs	r0, r0, r2
   1b9e0:	sbcs	r0, r1, r3
   1b9e4:	blt	1bbc0 <__assert_fail@plt+0xa5b8>
   1b9e8:	umull	r8, r0, r6, r2
   1b9ec:	mov	r4, #0
   1b9f0:	mla	r0, r6, r3, r0
   1b9f4:	mla	r9, r7, r2, r0
   1b9f8:	cmp	r9, #0
   1b9fc:	blt	1bbc0 <__assert_fail@plt+0xa5b8>
   1ba00:	ldr	r3, [sp, #28]
   1ba04:	mvn	r0, #0
   1ba08:	mvn	r1, #-2147483648	; 0x80000000
   1ba0c:	str	r4, [sp, #8]
   1ba10:	mvn	r6, #0
   1ba14:	mvn	r7, #-2147483648	; 0x80000000
   1ba18:	bl	1e990 <__assert_fail@plt+0xd388>
   1ba1c:	ldr	r4, [sp, #24]
   1ba20:	ldr	r3, [sp, #28]
   1ba24:	subs	r0, r0, r8
   1ba28:	mov	r2, #1
   1ba2c:	sbcs	r0, r1, r9
   1ba30:	bge	1bbf8 <__assert_fail@plt+0xa5f0>
   1ba34:	b	1bd30 <__assert_fail@plt+0xa728>
   1ba38:	and	r0, r6, r7
   1ba3c:	cmn	r0, #1
   1ba40:	beq	1ba7c <__assert_fail@plt+0xa474>
   1ba44:	mov	r0, #0
   1ba48:	mov	r1, #-2147483648	; 0x80000000
   1ba4c:	mov	r2, r6
   1ba50:	mov	r3, r7
   1ba54:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1ba58:	ldr	r2, [sp, #24]
   1ba5c:	ldr	r3, [sp, #28]
   1ba60:	mov	r4, #1
   1ba64:	mov	r9, #-2147483648	; 0x80000000
   1ba68:	subs	r0, r0, r2
   1ba6c:	sbcs	r0, r1, r3
   1ba70:	mov	r0, #0
   1ba74:	str	r0, [sp, #8]
   1ba78:	blt	1bc0c <__assert_fail@plt+0xa604>
   1ba7c:	umull	r1, r0, r6, r2
   1ba80:	mov	r4, #0
   1ba84:	mla	r0, r6, r3, r0
   1ba88:	str	r1, [sp, #8]
   1ba8c:	mla	r9, r7, r2, r0
   1ba90:	cmp	r9, #0
   1ba94:	blt	1bc0c <__assert_fail@plt+0xa604>
   1ba98:	ldr	r3, [sp, #28]
   1ba9c:	mvn	r0, #0
   1baa0:	mvn	r1, #-2147483648	; 0x80000000
   1baa4:	str	r4, [sp, #4]
   1baa8:	mvn	r6, #0
   1baac:	mvn	r8, #-2147483648	; 0x80000000
   1bab0:	bl	1e990 <__assert_fail@plt+0xd388>
   1bab4:	ldr	r4, [sp, #8]
   1bab8:	ldr	r2, [sp, #24]
   1babc:	ldr	r3, [sp, #28]
   1bac0:	mov	r7, #1
   1bac4:	subs	r0, r0, r4
   1bac8:	sbcs	r0, r1, r9
   1bacc:	bge	1bc48 <__assert_fail@plt+0xa640>
   1bad0:	b	1bc60 <__assert_fail@plt+0xa658>
   1bad4:	mov	r0, #-2147483648	; 0x80000000
   1bad8:	mov	r1, #-2147483648	; 0x80000000
   1badc:	mov	r2, r8
   1bae0:	mov	r3, r9
   1bae4:	mov	r6, r4
   1bae8:	mov	r4, #0
   1baec:	str	r0, [sp, #8]
   1baf0:	mov	r0, #0
   1baf4:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1baf8:	ldr	r2, [sp, #24]
   1bafc:	ldr	r3, [sp, #28]
   1bb00:	mov	r7, #1
   1bb04:	subs	r0, r0, r2
   1bb08:	sbcs	r0, r1, r3
   1bb0c:	blt	1bb80 <__assert_fail@plt+0xa578>
   1bb10:	umull	r4, r0, r8, r2
   1bb14:	mov	r7, r6
   1bb18:	mla	r0, r8, r3, r0
   1bb1c:	mla	r0, r9, r2, r0
   1bb20:	cmp	r0, #0
   1bb24:	str	r0, [sp, #8]
   1bb28:	blt	1bb80 <__assert_fail@plt+0xa578>
   1bb2c:	ldr	r3, [sp, #28]
   1bb30:	mvn	r0, #0
   1bb34:	mvn	r1, #-2147483648	; 0x80000000
   1bb38:	mov	r9, r7
   1bb3c:	mvn	r6, #0
   1bb40:	mvn	r7, #-2147483648	; 0x80000000
   1bb44:	bl	1e990 <__assert_fail@plt+0xd388>
   1bb48:	ldr	r8, [sp, #8]
   1bb4c:	ldr	r3, [sp, #24]
   1bb50:	ldr	ip, [sp, #28]
   1bb54:	subs	r0, r0, r4
   1bb58:	mov	r2, #1
   1bb5c:	sbcs	r0, r1, r8
   1bb60:	blt	1bb74 <__assert_fail@plt+0xa56c>
   1bb64:	umull	r6, r0, r4, r3
   1bb68:	mov	r2, #0
   1bb6c:	mla	r0, r4, ip, r0
   1bb70:	mla	r7, r8, r3, r0
   1bb74:	orr	r3, r2, r9
   1bb78:	ldr	r9, [sp, #12]
   1bb7c:	b	1c81c <__assert_fail@plt+0xb214>
   1bb80:	ldr	r8, [sp, #8]
   1bb84:	mov	r0, #0
   1bb88:	mov	r1, #-2147483648	; 0x80000000
   1bb8c:	mov	r2, r4
   1bb90:	mov	r9, r7
   1bb94:	mov	r6, #0
   1bb98:	mov	r7, #-2147483648	; 0x80000000
   1bb9c:	mov	r3, r8
   1bba0:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1bba4:	ldr	r3, [sp, #24]
   1bba8:	ldr	ip, [sp, #28]
   1bbac:	mov	r2, #1
   1bbb0:	subs	r0, r0, r3
   1bbb4:	sbcs	r0, r1, ip
   1bbb8:	bge	1bb64 <__assert_fail@plt+0xa55c>
   1bbbc:	b	1bb74 <__assert_fail@plt+0xa56c>
   1bbc0:	mov	r0, #0
   1bbc4:	mov	r1, #-2147483648	; 0x80000000
   1bbc8:	mov	r2, r8
   1bbcc:	mov	r3, r9
   1bbd0:	str	r4, [sp, #8]
   1bbd4:	mov	r6, #0
   1bbd8:	mov	r7, #-2147483648	; 0x80000000
   1bbdc:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1bbe0:	ldr	r4, [sp, #24]
   1bbe4:	ldr	r3, [sp, #28]
   1bbe8:	mov	r2, #1
   1bbec:	subs	r0, r0, r4
   1bbf0:	sbcs	r0, r1, r3
   1bbf4:	blt	1bd30 <__assert_fail@plt+0xa728>
   1bbf8:	umull	r6, r0, r8, r4
   1bbfc:	mov	r2, #0
   1bc00:	mla	r0, r8, r3, r0
   1bc04:	mla	r7, r9, r4, r0
   1bc08:	b	1bd30 <__assert_fail@plt+0xa728>
   1bc0c:	str	r4, [sp, #4]
   1bc10:	ldr	r4, [sp, #8]
   1bc14:	mov	r0, #0
   1bc18:	mov	r1, #-2147483648	; 0x80000000
   1bc1c:	mov	r3, r9
   1bc20:	mov	r2, r4
   1bc24:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1bc28:	ldr	r2, [sp, #24]
   1bc2c:	ldr	r3, [sp, #28]
   1bc30:	mov	r7, #1
   1bc34:	mov	r6, #0
   1bc38:	mov	r8, #-2147483648	; 0x80000000
   1bc3c:	subs	r0, r0, r2
   1bc40:	sbcs	r0, r1, r3
   1bc44:	blt	1bc98 <__assert_fail@plt+0xa690>
   1bc48:	umull	r6, r0, r4, r2
   1bc4c:	ldr	r7, [sp, #4]
   1bc50:	mla	r0, r4, r3, r0
   1bc54:	mla	r8, r9, r2, r0
   1bc58:	cmp	r8, #0
   1bc5c:	blt	1bc98 <__assert_fail@plt+0xa690>
   1bc60:	ldr	r3, [sp, #28]
   1bc64:	mvn	r0, #0
   1bc68:	mvn	r1, #-2147483648	; 0x80000000
   1bc6c:	str	r7, [sp, #8]
   1bc70:	mvn	r4, #0
   1bc74:	mvn	r9, #-2147483648	; 0x80000000
   1bc78:	bl	1e990 <__assert_fail@plt+0xd388>
   1bc7c:	ldr	r2, [sp, #24]
   1bc80:	ldr	r3, [sp, #28]
   1bc84:	subs	r0, r0, r6
   1bc88:	mov	r7, #1
   1bc8c:	sbcs	r0, r1, r8
   1bc90:	bge	1bcd0 <__assert_fail@plt+0xa6c8>
   1bc94:	b	1bce8 <__assert_fail@plt+0xa6e0>
   1bc98:	mov	r0, #0
   1bc9c:	mov	r1, #-2147483648	; 0x80000000
   1bca0:	mov	r2, r6
   1bca4:	mov	r3, r8
   1bca8:	str	r7, [sp, #8]
   1bcac:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1bcb0:	ldr	r2, [sp, #24]
   1bcb4:	ldr	r3, [sp, #28]
   1bcb8:	mov	r7, #1
   1bcbc:	mov	r4, #0
   1bcc0:	mov	r9, #-2147483648	; 0x80000000
   1bcc4:	subs	r0, r0, r2
   1bcc8:	sbcs	r0, r1, r3
   1bccc:	blt	1bd40 <__assert_fail@plt+0xa738>
   1bcd0:	umull	r4, r0, r6, r2
   1bcd4:	ldr	r7, [sp, #8]
   1bcd8:	mla	r0, r6, r3, r0
   1bcdc:	mla	r9, r8, r2, r0
   1bce0:	cmp	r9, #0
   1bce4:	blt	1bd40 <__assert_fail@plt+0xa738>
   1bce8:	ldr	r3, [sp, #28]
   1bcec:	mvn	r0, #0
   1bcf0:	mvn	r1, #-2147483648	; 0x80000000
   1bcf4:	str	r7, [sp, #8]
   1bcf8:	mvn	r6, #0
   1bcfc:	mvn	r7, #-2147483648	; 0x80000000
   1bd00:	bl	1e990 <__assert_fail@plt+0xd388>
   1bd04:	ldr	r3, [sp, #24]
   1bd08:	ldr	ip, [sp, #28]
   1bd0c:	subs	r0, r0, r4
   1bd10:	mov	r2, #1
   1bd14:	mov	r8, r4
   1bd18:	sbcs	r0, r1, r9
   1bd1c:	blt	1bd30 <__assert_fail@plt+0xa728>
   1bd20:	umull	r6, r0, r8, r3
   1bd24:	mov	r2, #0
   1bd28:	mla	r0, r8, ip, r0
   1bd2c:	mla	r7, r9, r3, r0
   1bd30:	ldr	r0, [sp, #8]
   1bd34:	ldr	r9, [sp, #12]
   1bd38:	orr	r3, r2, r0
   1bd3c:	b	1c81c <__assert_fail@plt+0xb214>
   1bd40:	mov	r0, #0
   1bd44:	mov	r1, #-2147483648	; 0x80000000
   1bd48:	mov	r2, r4
   1bd4c:	mov	r3, r9
   1bd50:	str	r7, [sp, #8]
   1bd54:	mov	r8, r4
   1bd58:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1bd5c:	ldr	r3, [sp, #24]
   1bd60:	ldr	ip, [sp, #28]
   1bd64:	mov	r2, #1
   1bd68:	mov	r6, #0
   1bd6c:	mov	r7, #-2147483648	; 0x80000000
   1bd70:	subs	r0, r0, r3
   1bd74:	sbcs	r0, r1, ip
   1bd78:	bge	1bd20 <__assert_fail@plt+0xa718>
   1bd7c:	b	1bd30 <__assert_fail@plt+0xa728>
   1bd80:	and	r0, r6, r7
   1bd84:	cmn	r0, #1
   1bd88:	beq	1bdc4 <__assert_fail@plt+0xa7bc>
   1bd8c:	mov	r0, #0
   1bd90:	mov	r1, #-2147483648	; 0x80000000
   1bd94:	mov	r2, r6
   1bd98:	mov	r3, r7
   1bd9c:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1bda0:	ldr	r2, [sp, #24]
   1bda4:	ldr	r3, [sp, #28]
   1bda8:	mov	r4, #1
   1bdac:	mov	r9, #-2147483648	; 0x80000000
   1bdb0:	subs	r0, r0, r2
   1bdb4:	sbcs	r0, r1, r3
   1bdb8:	mov	r0, #0
   1bdbc:	str	r0, [sp, #8]
   1bdc0:	blt	1c0d4 <__assert_fail@plt+0xaacc>
   1bdc4:	umull	r1, r0, r6, r2
   1bdc8:	mov	r4, #0
   1bdcc:	mla	r0, r6, r3, r0
   1bdd0:	str	r1, [sp, #8]
   1bdd4:	mla	r9, r7, r2, r0
   1bdd8:	cmp	r9, #0
   1bddc:	blt	1c0d4 <__assert_fail@plt+0xaacc>
   1bde0:	ldr	r3, [sp, #28]
   1bde4:	mvn	r0, #0
   1bde8:	mvn	r1, #-2147483648	; 0x80000000
   1bdec:	str	r4, [sp, #4]
   1bdf0:	mvn	r8, #0
   1bdf4:	mvn	r4, #-2147483648	; 0x80000000
   1bdf8:	bl	1e990 <__assert_fail@plt+0xd388>
   1bdfc:	ldr	r6, [sp, #8]
   1be00:	ldr	r2, [sp, #24]
   1be04:	ldr	r3, [sp, #28]
   1be08:	mov	r7, #1
   1be0c:	subs	r0, r0, r6
   1be10:	sbcs	r0, r1, r9
   1be14:	bge	1c110 <__assert_fail@plt+0xab08>
   1be18:	b	1c128 <__assert_fail@plt+0xab20>
   1be1c:	and	r0, r6, r7
   1be20:	cmn	r0, #1
   1be24:	beq	1be4c <__assert_fail@plt+0xa844>
   1be28:	mov	r0, #0
   1be2c:	mov	r1, #-2147483648	; 0x80000000
   1be30:	mov	r2, r6
   1be34:	mov	r3, r7
   1be38:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1be3c:	ldr	r3, [sp, #28]
   1be40:	subs	r0, r0, #1024	; 0x400
   1be44:	sbcs	r0, r1, #0
   1be48:	blt	1c0a4 <__assert_fail@plt+0xaa9c>
   1be4c:	lsl	r0, r7, #10
   1be50:	orr	r7, r0, r6, lsr #22
   1be54:	lsl	r6, r6, #10
   1be58:	b	1c81c <__assert_fail@plt+0xb214>
   1be5c:	and	r0, r6, r7
   1be60:	cmn	r0, #1
   1be64:	beq	1bea0 <__assert_fail@plt+0xa898>
   1be68:	mov	r0, #0
   1be6c:	mov	r1, #-2147483648	; 0x80000000
   1be70:	mov	r2, r6
   1be74:	mov	r3, r7
   1be78:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1be7c:	ldr	r2, [sp, #24]
   1be80:	ldr	r3, [sp, #28]
   1be84:	mov	r4, #1
   1be88:	mov	r9, #-2147483648	; 0x80000000
   1be8c:	subs	r0, r0, r2
   1be90:	sbcs	r0, r1, r3
   1be94:	mov	r0, #0
   1be98:	str	r0, [sp, #8]
   1be9c:	blt	1c3ec <__assert_fail@plt+0xade4>
   1bea0:	umull	r1, r0, r6, r2
   1bea4:	mov	r4, #0
   1bea8:	mla	r0, r6, r3, r0
   1beac:	str	r1, [sp, #8]
   1beb0:	mla	r9, r7, r2, r0
   1beb4:	cmp	r9, #0
   1beb8:	blt	1c3ec <__assert_fail@plt+0xade4>
   1bebc:	ldr	r3, [sp, #28]
   1bec0:	mvn	r0, #0
   1bec4:	mvn	r1, #-2147483648	; 0x80000000
   1bec8:	str	r4, [sp, #4]
   1becc:	mvn	r8, #0
   1bed0:	mvn	r4, #-2147483648	; 0x80000000
   1bed4:	bl	1e990 <__assert_fail@plt+0xd388>
   1bed8:	ldr	r6, [sp, #8]
   1bedc:	ldr	r2, [sp, #24]
   1bee0:	ldr	r3, [sp, #28]
   1bee4:	mov	r7, #1
   1bee8:	subs	r0, r0, r6
   1beec:	sbcs	r0, r1, r9
   1bef0:	bge	1c428 <__assert_fail@plt+0xae20>
   1bef4:	b	1c440 <__assert_fail@plt+0xae38>
   1bef8:	and	r0, r6, r7
   1befc:	cmn	r0, #1
   1bf00:	beq	1bf3c <__assert_fail@plt+0xa934>
   1bf04:	mov	r0, #0
   1bf08:	mov	r1, #-2147483648	; 0x80000000
   1bf0c:	mov	r2, r6
   1bf10:	mov	r3, r7
   1bf14:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1bf18:	ldr	r2, [sp, #24]
   1bf1c:	ldr	r3, [sp, #28]
   1bf20:	mov	r4, #1
   1bf24:	mov	r8, #-2147483648	; 0x80000000
   1bf28:	subs	r0, r0, r2
   1bf2c:	sbcs	r0, r1, r3
   1bf30:	mov	r0, #0
   1bf34:	str	r0, [sp, #8]
   1bf38:	blt	1c668 <__assert_fail@plt+0xb060>
   1bf3c:	umull	r1, r0, r6, r2
   1bf40:	mov	r4, #0
   1bf44:	mla	r0, r6, r3, r0
   1bf48:	str	r1, [sp, #8]
   1bf4c:	mla	r8, r7, r2, r0
   1bf50:	cmp	r8, #0
   1bf54:	blt	1c668 <__assert_fail@plt+0xb060>
   1bf58:	ldr	r3, [sp, #28]
   1bf5c:	mvn	r0, #0
   1bf60:	mvn	r1, #-2147483648	; 0x80000000
   1bf64:	str	r4, [sp, #4]
   1bf68:	mvn	r9, #0
   1bf6c:	mvn	r4, #-2147483648	; 0x80000000
   1bf70:	bl	1e990 <__assert_fail@plt+0xd388>
   1bf74:	ldr	r6, [sp, #8]
   1bf78:	ldr	r2, [sp, #24]
   1bf7c:	ldr	r3, [sp, #28]
   1bf80:	mov	r7, #1
   1bf84:	subs	r0, r0, r6
   1bf88:	sbcs	r0, r1, r8
   1bf8c:	bge	1c6a4 <__assert_fail@plt+0xb09c>
   1bf90:	b	1c6bc <__assert_fail@plt+0xb0b4>
   1bf94:	and	r0, r6, r7
   1bf98:	cmn	r0, #1
   1bf9c:	beq	1bfd8 <__assert_fail@plt+0xa9d0>
   1bfa0:	mov	r0, #0
   1bfa4:	mov	r1, #-2147483648	; 0x80000000
   1bfa8:	mov	r2, r6
   1bfac:	mov	r3, r7
   1bfb0:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1bfb4:	ldr	r2, [sp, #24]
   1bfb8:	ldr	r3, [sp, #28]
   1bfbc:	mov	r4, #1
   1bfc0:	mov	r9, #-2147483648	; 0x80000000
   1bfc4:	subs	r0, r0, r2
   1bfc8:	sbcs	r0, r1, r3
   1bfcc:	mov	r0, #0
   1bfd0:	str	r0, [sp, #8]
   1bfd4:	blt	1c884 <__assert_fail@plt+0xb27c>
   1bfd8:	umull	r1, r0, r6, r2
   1bfdc:	mov	r4, #0
   1bfe0:	mla	r0, r6, r3, r0
   1bfe4:	str	r1, [sp, #8]
   1bfe8:	mla	r9, r7, r2, r0
   1bfec:	cmp	r9, #0
   1bff0:	blt	1c884 <__assert_fail@plt+0xb27c>
   1bff4:	ldr	r3, [sp, #28]
   1bff8:	mvn	r0, #0
   1bffc:	mvn	r1, #-2147483648	; 0x80000000
   1c000:	str	r4, [sp]
   1c004:	mvn	r8, #-2147483648	; 0x80000000
   1c008:	str	r0, [sp, #4]
   1c00c:	mvn	r0, #0
   1c010:	bl	1e990 <__assert_fail@plt+0xd388>
   1c014:	ldr	r6, [sp, #8]
   1c018:	ldr	r2, [sp, #24]
   1c01c:	ldr	r3, [sp, #28]
   1c020:	mov	r7, #1
   1c024:	subs	r0, r0, r6
   1c028:	sbcs	r0, r1, r9
   1c02c:	bge	1c8c4 <__assert_fail@plt+0xb2bc>
   1c030:	b	1c8e0 <__assert_fail@plt+0xb2d8>
   1c034:	and	r0, r6, r7
   1c038:	cmn	r0, #1
   1c03c:	beq	1c064 <__assert_fail@plt+0xaa5c>
   1c040:	mov	r0, #0
   1c044:	mov	r1, #-2147483648	; 0x80000000
   1c048:	mov	r2, r6
   1c04c:	mov	r3, r7
   1c050:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1c054:	ldr	r3, [sp, #28]
   1c058:	subs	r0, r0, #512	; 0x200
   1c05c:	sbcs	r0, r1, #0
   1c060:	blt	1c0a4 <__assert_fail@plt+0xaa9c>
   1c064:	lsl	r0, r7, #9
   1c068:	orr	r7, r0, r6, lsr #23
   1c06c:	lsl	r6, r6, #9
   1c070:	b	1c81c <__assert_fail@plt+0xb214>
   1c074:	and	r0, r6, r7
   1c078:	cmn	r0, #1
   1c07c:	beq	1c0c4 <__assert_fail@plt+0xaabc>
   1c080:	mov	r0, #0
   1c084:	mov	r1, #-2147483648	; 0x80000000
   1c088:	mov	r2, r6
   1c08c:	mov	r3, r7
   1c090:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1c094:	ldr	r3, [sp, #28]
   1c098:	subs	r0, r0, #2
   1c09c:	sbcs	r0, r1, #0
   1c0a0:	bge	1c0c4 <__assert_fail@plt+0xaabc>
   1c0a4:	mvn	r0, #-2147483648	; 0x80000000
   1c0a8:	cmp	r7, #0
   1c0ac:	mvn	r6, #0
   1c0b0:	mov	r3, #1
   1c0b4:	movlt	r0, #-2147483648	; 0x80000000
   1c0b8:	movwlt	r6, #0
   1c0bc:	mov	r7, r0
   1c0c0:	b	1c81c <__assert_fail@plt+0xb214>
   1c0c4:	lsl	r0, r7, #1
   1c0c8:	orr	r7, r0, r6, lsr #31
   1c0cc:	lsl	r6, r6, #1
   1c0d0:	b	1c81c <__assert_fail@plt+0xb214>
   1c0d4:	ldr	r6, [sp, #8]
   1c0d8:	mov	r0, #0
   1c0dc:	mov	r1, #-2147483648	; 0x80000000
   1c0e0:	mov	r3, r9
   1c0e4:	str	r4, [sp, #4]
   1c0e8:	mov	r2, r6
   1c0ec:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1c0f0:	ldr	r2, [sp, #24]
   1c0f4:	ldr	r3, [sp, #28]
   1c0f8:	mov	r7, #1
   1c0fc:	mov	r8, #0
   1c100:	mov	r4, #-2147483648	; 0x80000000
   1c104:	subs	r0, r0, r2
   1c108:	sbcs	r0, r1, r3
   1c10c:	blt	1c160 <__assert_fail@plt+0xab58>
   1c110:	umull	r8, r0, r6, r2
   1c114:	ldr	r7, [sp, #4]
   1c118:	mla	r0, r6, r3, r0
   1c11c:	mla	r4, r9, r2, r0
   1c120:	cmp	r4, #0
   1c124:	blt	1c160 <__assert_fail@plt+0xab58>
   1c128:	ldr	r3, [sp, #28]
   1c12c:	mvn	r0, #0
   1c130:	mvn	r1, #-2147483648	; 0x80000000
   1c134:	str	r7, [sp, #8]
   1c138:	mvn	r7, #0
   1c13c:	mvn	r9, #-2147483648	; 0x80000000
   1c140:	bl	1e990 <__assert_fail@plt+0xd388>
   1c144:	ldr	r2, [sp, #24]
   1c148:	ldr	r3, [sp, #28]
   1c14c:	subs	r0, r0, r8
   1c150:	mov	r6, #1
   1c154:	sbcs	r0, r1, r4
   1c158:	bge	1c198 <__assert_fail@plt+0xab90>
   1c15c:	b	1c1b0 <__assert_fail@plt+0xaba8>
   1c160:	mov	r0, #0
   1c164:	mov	r1, #-2147483648	; 0x80000000
   1c168:	mov	r2, r8
   1c16c:	mov	r3, r4
   1c170:	str	r7, [sp, #8]
   1c174:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1c178:	ldr	r2, [sp, #24]
   1c17c:	ldr	r3, [sp, #28]
   1c180:	mov	r6, #1
   1c184:	mov	r7, #0
   1c188:	mov	r9, #-2147483648	; 0x80000000
   1c18c:	subs	r0, r0, r2
   1c190:	sbcs	r0, r1, r3
   1c194:	blt	1c1f0 <__assert_fail@plt+0xabe8>
   1c198:	umull	r7, r0, r8, r2
   1c19c:	ldr	r6, [sp, #8]
   1c1a0:	mla	r0, r8, r3, r0
   1c1a4:	mla	r9, r4, r2, r0
   1c1a8:	cmp	r9, #0
   1c1ac:	blt	1c1f0 <__assert_fail@plt+0xabe8>
   1c1b0:	ldr	r3, [sp, #28]
   1c1b4:	mvn	r0, #0
   1c1b8:	mvn	r1, #-2147483648	; 0x80000000
   1c1bc:	str	r6, [sp, #8]
   1c1c0:	mvn	r8, #0
   1c1c4:	mvn	r4, #-2147483648	; 0x80000000
   1c1c8:	bl	1e990 <__assert_fail@plt+0xd388>
   1c1cc:	ldr	r2, [sp, #24]
   1c1d0:	ldr	r3, [sp, #28]
   1c1d4:	subs	r0, r0, r7
   1c1d8:	sbcs	r0, r1, r9
   1c1dc:	bge	1c234 <__assert_fail@plt+0xac2c>
   1c1e0:	mov	r0, #1
   1c1e4:	mov	r6, #0
   1c1e8:	str	r0, [sp, #8]
   1c1ec:	b	1c24c <__assert_fail@plt+0xac44>
   1c1f0:	mov	r0, #0
   1c1f4:	mov	r1, #-2147483648	; 0x80000000
   1c1f8:	mov	r2, r7
   1c1fc:	mov	r3, r9
   1c200:	str	r6, [sp, #8]
   1c204:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1c208:	ldr	r2, [sp, #24]
   1c20c:	ldr	r3, [sp, #28]
   1c210:	subs	r0, r0, r2
   1c214:	sbcs	r0, r1, r3
   1c218:	bge	1c234 <__assert_fail@plt+0xac2c>
   1c21c:	mov	r0, #1
   1c220:	mov	r8, #0
   1c224:	mov	r4, #-2147483648	; 0x80000000
   1c228:	mov	r6, #0
   1c22c:	str	r0, [sp, #8]
   1c230:	b	1c284 <__assert_fail@plt+0xac7c>
   1c234:	umull	r8, r0, r7, r2
   1c238:	mov	r6, #0
   1c23c:	mla	r0, r7, r3, r0
   1c240:	mla	r4, r9, r2, r0
   1c244:	cmp	r4, #0
   1c248:	blt	1c284 <__assert_fail@plt+0xac7c>
   1c24c:	ldr	r3, [sp, #28]
   1c250:	mvn	r0, #0
   1c254:	mvn	r1, #-2147483648	; 0x80000000
   1c258:	mvn	r9, #0
   1c25c:	mvn	r7, #-2147483648	; 0x80000000
   1c260:	bl	1e990 <__assert_fail@plt+0xd388>
   1c264:	ldr	r2, [sp, #24]
   1c268:	ldr	r3, [sp, #28]
   1c26c:	subs	r0, r0, r8
   1c270:	sbcs	r0, r1, r4
   1c274:	bge	1c2c0 <__assert_fail@plt+0xacb8>
   1c278:	mov	r0, #1
   1c27c:	str	r0, [sp, #8]
   1c280:	b	1c2d4 <__assert_fail@plt+0xaccc>
   1c284:	mov	r0, #0
   1c288:	mov	r1, #-2147483648	; 0x80000000
   1c28c:	mov	r2, r8
   1c290:	mov	r3, r4
   1c294:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1c298:	ldr	r2, [sp, #24]
   1c29c:	ldr	r3, [sp, #28]
   1c2a0:	subs	r0, r0, r2
   1c2a4:	sbcs	r0, r1, r3
   1c2a8:	bge	1c2c0 <__assert_fail@plt+0xacb8>
   1c2ac:	mov	r0, #1
   1c2b0:	mov	r9, #0
   1c2b4:	mov	r7, #-2147483648	; 0x80000000
   1c2b8:	str	r0, [sp, #8]
   1c2bc:	b	1c310 <__assert_fail@plt+0xad08>
   1c2c0:	umull	r9, r0, r8, r2
   1c2c4:	mla	r0, r8, r3, r0
   1c2c8:	mla	r7, r4, r2, r0
   1c2cc:	cmp	r7, #0
   1c2d0:	blt	1c310 <__assert_fail@plt+0xad08>
   1c2d4:	ldr	r3, [sp, #28]
   1c2d8:	mvn	r0, #0
   1c2dc:	mvn	r1, #-2147483648	; 0x80000000
   1c2e0:	mvn	r8, #0
   1c2e4:	mvn	r4, #-2147483648	; 0x80000000
   1c2e8:	bl	1e990 <__assert_fail@plt+0xd388>
   1c2ec:	ldr	r2, [sp, #24]
   1c2f0:	ldr	r3, [sp, #28]
   1c2f4:	subs	r0, r0, r9
   1c2f8:	sbcs	r0, r1, r7
   1c2fc:	bge	1c350 <__assert_fail@plt+0xad48>
   1c300:	ldr	r9, [sp, #12]
   1c304:	mov	r0, #1
   1c308:	str	r0, [sp, #8]
   1c30c:	b	1c368 <__assert_fail@plt+0xad60>
   1c310:	mov	r0, #0
   1c314:	mov	r1, #-2147483648	; 0x80000000
   1c318:	mov	r2, r9
   1c31c:	mov	r3, r7
   1c320:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1c324:	ldr	r2, [sp, #24]
   1c328:	ldr	r3, [sp, #28]
   1c32c:	subs	r0, r0, r2
   1c330:	sbcs	r0, r1, r3
   1c334:	bge	1c350 <__assert_fail@plt+0xad48>
   1c338:	ldr	r9, [sp, #12]
   1c33c:	mov	r0, #1
   1c340:	mov	r8, #0
   1c344:	mov	r4, #-2147483648	; 0x80000000
   1c348:	str	r0, [sp, #8]
   1c34c:	b	1c3b8 <__assert_fail@plt+0xadb0>
   1c350:	umull	r8, r0, r9, r2
   1c354:	mla	r0, r9, r3, r0
   1c358:	ldr	r9, [sp, #12]
   1c35c:	mla	r4, r7, r2, r0
   1c360:	cmp	r4, #0
   1c364:	blt	1c3b8 <__assert_fail@plt+0xadb0>
   1c368:	ldr	r3, [sp, #28]
   1c36c:	mvn	r0, #0
   1c370:	mvn	r1, #-2147483648	; 0x80000000
   1c374:	mvn	r6, #0
   1c378:	bl	1e990 <__assert_fail@plt+0xd388>
   1c37c:	ldr	r7, [sp, #24]
   1c380:	ldr	r3, [sp, #28]
   1c384:	subs	r0, r0, r8
   1c388:	mov	r2, #1
   1c38c:	sbcs	r0, r1, r4
   1c390:	mvn	r0, #-2147483648	; 0x80000000
   1c394:	blt	1c3a8 <__assert_fail@plt+0xada0>
   1c398:	umull	r6, r0, r8, r7
   1c39c:	mov	r2, #0
   1c3a0:	mla	r0, r8, r3, r0
   1c3a4:	mla	r0, r4, r7, r0
   1c3a8:	ldr	r1, [sp, #8]
   1c3ac:	mov	r7, r0
   1c3b0:	orr	r3, r2, r1
   1c3b4:	b	1c81c <__assert_fail@plt+0xb214>
   1c3b8:	mov	r0, #0
   1c3bc:	mov	r1, #-2147483648	; 0x80000000
   1c3c0:	mov	r2, r8
   1c3c4:	mov	r3, r4
   1c3c8:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1c3cc:	ldr	r7, [sp, #24]
   1c3d0:	ldr	r3, [sp, #28]
   1c3d4:	mov	r2, #1
   1c3d8:	subs	r0, r0, r7
   1c3dc:	sbcs	r0, r1, r3
   1c3e0:	mov	r0, #-2147483648	; 0x80000000
   1c3e4:	bge	1c398 <__assert_fail@plt+0xad90>
   1c3e8:	b	1c3a8 <__assert_fail@plt+0xada0>
   1c3ec:	ldr	r6, [sp, #8]
   1c3f0:	mov	r0, #0
   1c3f4:	mov	r1, #-2147483648	; 0x80000000
   1c3f8:	mov	r3, r9
   1c3fc:	str	r4, [sp, #4]
   1c400:	mov	r2, r6
   1c404:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1c408:	ldr	r2, [sp, #24]
   1c40c:	ldr	r3, [sp, #28]
   1c410:	mov	r7, #1
   1c414:	mov	r8, #0
   1c418:	mov	r4, #-2147483648	; 0x80000000
   1c41c:	subs	r0, r0, r2
   1c420:	sbcs	r0, r1, r3
   1c424:	blt	1c47c <__assert_fail@plt+0xae74>
   1c428:	umull	r8, r0, r6, r2
   1c42c:	ldr	r7, [sp, #4]
   1c430:	mla	r0, r6, r3, r0
   1c434:	mla	r4, r9, r2, r0
   1c438:	cmp	r4, #0
   1c43c:	blt	1c47c <__assert_fail@plt+0xae74>
   1c440:	ldr	r3, [sp, #28]
   1c444:	mvn	r0, #0
   1c448:	mvn	r1, #-2147483648	; 0x80000000
   1c44c:	str	r7, [sp, #4]
   1c450:	mvn	r7, #0
   1c454:	mvn	r9, #-2147483648	; 0x80000000
   1c458:	bl	1e990 <__assert_fail@plt+0xd388>
   1c45c:	ldr	r2, [sp, #24]
   1c460:	ldr	r3, [sp, #28]
   1c464:	subs	r0, r0, r8
   1c468:	mov	r6, #1
   1c46c:	sbcs	r0, r1, r4
   1c470:	str	r6, [sp, #8]
   1c474:	bge	1c4b8 <__assert_fail@plt+0xaeb0>
   1c478:	b	1c4d4 <__assert_fail@plt+0xaecc>
   1c47c:	mov	r0, #0
   1c480:	mov	r1, #-2147483648	; 0x80000000
   1c484:	mov	r2, r8
   1c488:	mov	r3, r4
   1c48c:	str	r7, [sp, #4]
   1c490:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1c494:	ldr	r2, [sp, #24]
   1c498:	ldr	r3, [sp, #28]
   1c49c:	mov	r7, #1
   1c4a0:	mov	r9, #-2147483648	; 0x80000000
   1c4a4:	str	r7, [sp, #8]
   1c4a8:	mov	r7, #0
   1c4ac:	subs	r0, r0, r2
   1c4b0:	sbcs	r0, r1, r3
   1c4b4:	blt	1c50c <__assert_fail@plt+0xaf04>
   1c4b8:	umull	r7, r0, r8, r2
   1c4bc:	mla	r0, r8, r3, r0
   1c4c0:	mla	r9, r4, r2, r0
   1c4c4:	ldr	r0, [sp, #4]
   1c4c8:	cmp	r9, #0
   1c4cc:	str	r0, [sp, #8]
   1c4d0:	blt	1c50c <__assert_fail@plt+0xaf04>
   1c4d4:	ldr	r3, [sp, #28]
   1c4d8:	mvn	r0, #0
   1c4dc:	mvn	r1, #-2147483648	; 0x80000000
   1c4e0:	mvn	r4, #0
   1c4e4:	mvn	r8, #-2147483648	; 0x80000000
   1c4e8:	bl	1e990 <__assert_fail@plt+0xd388>
   1c4ec:	ldr	r2, [sp, #24]
   1c4f0:	ldr	r3, [sp, #28]
   1c4f4:	subs	r0, r0, r7
   1c4f8:	sbcs	r0, r1, r9
   1c4fc:	bge	1c548 <__assert_fail@plt+0xaf40>
   1c500:	mov	r0, #1
   1c504:	str	r0, [sp, #8]
   1c508:	b	1c55c <__assert_fail@plt+0xaf54>
   1c50c:	mov	r0, #0
   1c510:	mov	r1, #-2147483648	; 0x80000000
   1c514:	mov	r2, r7
   1c518:	mov	r3, r9
   1c51c:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1c520:	ldr	r2, [sp, #24]
   1c524:	ldr	r3, [sp, #28]
   1c528:	subs	r0, r0, r2
   1c52c:	sbcs	r0, r1, r3
   1c530:	bge	1c548 <__assert_fail@plt+0xaf40>
   1c534:	mov	r0, #1
   1c538:	mov	r4, #0
   1c53c:	mov	r8, #-2147483648	; 0x80000000
   1c540:	str	r0, [sp, #8]
   1c544:	b	1c590 <__assert_fail@plt+0xaf88>
   1c548:	umull	r4, r0, r7, r2
   1c54c:	mla	r0, r7, r3, r0
   1c550:	mla	r8, r9, r2, r0
   1c554:	cmp	r8, #0
   1c558:	blt	1c590 <__assert_fail@plt+0xaf88>
   1c55c:	ldr	r3, [sp, #28]
   1c560:	mvn	r0, #0
   1c564:	mvn	r1, #-2147483648	; 0x80000000
   1c568:	mvn	r6, #0
   1c56c:	mvn	r9, #-2147483648	; 0x80000000
   1c570:	bl	1e990 <__assert_fail@plt+0xd388>
   1c574:	ldr	r2, [sp, #24]
   1c578:	ldr	r3, [sp, #28]
   1c57c:	subs	r0, r0, r4
   1c580:	sbcs	r0, r1, r8
   1c584:	bge	1c5c8 <__assert_fail@plt+0xafc0>
   1c588:	mov	r8, #1
   1c58c:	b	1c5e0 <__assert_fail@plt+0xafd8>
   1c590:	mov	r0, #0
   1c594:	mov	r1, #-2147483648	; 0x80000000
   1c598:	mov	r2, r4
   1c59c:	mov	r3, r8
   1c5a0:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1c5a4:	ldr	r2, [sp, #24]
   1c5a8:	ldr	r3, [sp, #28]
   1c5ac:	subs	r0, r0, r2
   1c5b0:	sbcs	r0, r1, r3
   1c5b4:	bge	1c5c8 <__assert_fail@plt+0xafc0>
   1c5b8:	mov	r8, #1
   1c5bc:	mov	r6, #0
   1c5c0:	mov	r9, #-2147483648	; 0x80000000
   1c5c4:	b	1c630 <__assert_fail@plt+0xb028>
   1c5c8:	umull	r6, r0, r4, r2
   1c5cc:	mla	r0, r4, r3, r0
   1c5d0:	mla	r9, r8, r2, r0
   1c5d4:	ldr	r8, [sp, #8]
   1c5d8:	cmp	r9, #0
   1c5dc:	blt	1c630 <__assert_fail@plt+0xb028>
   1c5e0:	ldr	r3, [sp, #28]
   1c5e4:	mvn	r0, #0
   1c5e8:	mvn	r1, #-2147483648	; 0x80000000
   1c5ec:	mvn	r4, #0
   1c5f0:	mvn	r7, #-2147483648	; 0x80000000
   1c5f4:	bl	1e990 <__assert_fail@plt+0xd388>
   1c5f8:	ldr	r3, [sp, #24]
   1c5fc:	ldr	ip, [sp, #28]
   1c600:	subs	r0, r0, r6
   1c604:	mov	r2, #1
   1c608:	sbcs	r0, r1, r9
   1c60c:	blt	1c620 <__assert_fail@plt+0xb018>
   1c610:	umull	r4, r0, r6, r3
   1c614:	mov	r2, #0
   1c618:	mla	r0, r6, ip, r0
   1c61c:	mla	r7, r9, r3, r0
   1c620:	ldr	r9, [sp, #12]
   1c624:	orr	r3, r2, r8
   1c628:	mov	r6, r4
   1c62c:	b	1c81c <__assert_fail@plt+0xb214>
   1c630:	mov	r0, #0
   1c634:	mov	r1, #-2147483648	; 0x80000000
   1c638:	mov	r2, r6
   1c63c:	mov	r3, r9
   1c640:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1c644:	ldr	r3, [sp, #24]
   1c648:	ldr	ip, [sp, #28]
   1c64c:	mov	r2, #1
   1c650:	mov	r4, #0
   1c654:	mov	r7, #-2147483648	; 0x80000000
   1c658:	subs	r0, r0, r3
   1c65c:	sbcs	r0, r1, ip
   1c660:	bge	1c610 <__assert_fail@plt+0xb008>
   1c664:	b	1c620 <__assert_fail@plt+0xb018>
   1c668:	ldr	r6, [sp, #8]
   1c66c:	mov	r0, #0
   1c670:	mov	r1, #-2147483648	; 0x80000000
   1c674:	mov	r3, r8
   1c678:	str	r4, [sp, #4]
   1c67c:	mov	r2, r6
   1c680:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1c684:	ldr	r2, [sp, #24]
   1c688:	ldr	r3, [sp, #28]
   1c68c:	mov	r7, #1
   1c690:	mov	r9, #0
   1c694:	mov	r4, #-2147483648	; 0x80000000
   1c698:	subs	r0, r0, r2
   1c69c:	sbcs	r0, r1, r3
   1c6a0:	blt	1c6f8 <__assert_fail@plt+0xb0f0>
   1c6a4:	umull	r9, r0, r6, r2
   1c6a8:	ldr	r7, [sp, #4]
   1c6ac:	mla	r0, r6, r3, r0
   1c6b0:	mla	r4, r8, r2, r0
   1c6b4:	cmp	r4, #0
   1c6b8:	blt	1c6f8 <__assert_fail@plt+0xb0f0>
   1c6bc:	ldr	r3, [sp, #28]
   1c6c0:	mvn	r0, #0
   1c6c4:	mvn	r1, #-2147483648	; 0x80000000
   1c6c8:	str	r7, [sp, #4]
   1c6cc:	mvn	r8, #0
   1c6d0:	mvn	r7, #-2147483648	; 0x80000000
   1c6d4:	bl	1e990 <__assert_fail@plt+0xd388>
   1c6d8:	ldr	r2, [sp, #24]
   1c6dc:	ldr	r3, [sp, #28]
   1c6e0:	subs	r0, r0, r9
   1c6e4:	mov	r6, #1
   1c6e8:	sbcs	r0, r1, r4
   1c6ec:	str	r6, [sp, #8]
   1c6f0:	bge	1c734 <__assert_fail@plt+0xb12c>
   1c6f4:	b	1c750 <__assert_fail@plt+0xb148>
   1c6f8:	mov	r0, #0
   1c6fc:	mov	r1, #-2147483648	; 0x80000000
   1c700:	mov	r2, r9
   1c704:	mov	r3, r4
   1c708:	str	r7, [sp, #4]
   1c70c:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1c710:	ldr	r2, [sp, #24]
   1c714:	ldr	r3, [sp, #28]
   1c718:	mov	r7, #1
   1c71c:	mov	r8, #0
   1c720:	str	r7, [sp, #8]
   1c724:	mov	r7, #-2147483648	; 0x80000000
   1c728:	subs	r0, r0, r2
   1c72c:	sbcs	r0, r1, r3
   1c730:	blt	1c784 <__assert_fail@plt+0xb17c>
   1c734:	umull	r8, r0, r9, r2
   1c738:	mla	r0, r9, r3, r0
   1c73c:	mla	r7, r4, r2, r0
   1c740:	ldr	r0, [sp, #4]
   1c744:	cmp	r7, #0
   1c748:	str	r0, [sp, #8]
   1c74c:	blt	1c784 <__assert_fail@plt+0xb17c>
   1c750:	ldr	r3, [sp, #28]
   1c754:	mvn	r0, #0
   1c758:	mvn	r1, #-2147483648	; 0x80000000
   1c75c:	mvn	r4, #0
   1c760:	mvn	r9, #-2147483648	; 0x80000000
   1c764:	bl	1e990 <__assert_fail@plt+0xd388>
   1c768:	ldr	r2, [sp, #24]
   1c76c:	ldr	r3, [sp, #28]
   1c770:	subs	r0, r0, r8
   1c774:	sbcs	r0, r1, r7
   1c778:	bge	1c7bc <__assert_fail@plt+0xb1b4>
   1c77c:	mov	r8, #1
   1c780:	b	1c7d4 <__assert_fail@plt+0xb1cc>
   1c784:	mov	r0, #0
   1c788:	mov	r1, #-2147483648	; 0x80000000
   1c78c:	mov	r2, r8
   1c790:	mov	r3, r7
   1c794:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1c798:	ldr	r2, [sp, #24]
   1c79c:	ldr	r3, [sp, #28]
   1c7a0:	subs	r0, r0, r2
   1c7a4:	sbcs	r0, r1, r3
   1c7a8:	bge	1c7bc <__assert_fail@plt+0xb1b4>
   1c7ac:	mov	r8, #1
   1c7b0:	mov	r4, #0
   1c7b4:	mov	r9, #-2147483648	; 0x80000000
   1c7b8:	b	1c84c <__assert_fail@plt+0xb244>
   1c7bc:	umull	r4, r0, r8, r2
   1c7c0:	mla	r0, r8, r3, r0
   1c7c4:	ldr	r8, [sp, #8]
   1c7c8:	mla	r9, r7, r2, r0
   1c7cc:	cmp	r9, #0
   1c7d0:	blt	1c84c <__assert_fail@plt+0xb244>
   1c7d4:	ldr	r3, [sp, #28]
   1c7d8:	mvn	r0, #0
   1c7dc:	mvn	r1, #-2147483648	; 0x80000000
   1c7e0:	mvn	r6, #0
   1c7e4:	mvn	r7, #-2147483648	; 0x80000000
   1c7e8:	bl	1e990 <__assert_fail@plt+0xd388>
   1c7ec:	ldr	r3, [sp, #24]
   1c7f0:	ldr	ip, [sp, #28]
   1c7f4:	subs	r0, r0, r4
   1c7f8:	mov	r2, #1
   1c7fc:	sbcs	r0, r1, r9
   1c800:	blt	1c814 <__assert_fail@plt+0xb20c>
   1c804:	umull	r6, r0, r4, r3
   1c808:	mov	r2, #0
   1c80c:	mla	r0, r4, ip, r0
   1c810:	mla	r7, r9, r3, r0
   1c814:	ldr	r9, [sp, #12]
   1c818:	orr	r3, r2, r8
   1c81c:	ldr	r1, [sp, #20]
   1c820:	ldr	r2, [sp, #16]
   1c824:	orr	r5, r3, r5
   1c828:	add	r0, r1, r2
   1c82c:	str	r0, [sl]
   1c830:	ldrb	r0, [r1, r2]
   1c834:	cmp	r0, #0
   1c838:	orrne	r5, r5, #2
   1c83c:	strd	r6, [r9]
   1c840:	mov	r0, r5
   1c844:	sub	sp, fp, #28
   1c848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c84c:	mov	r0, #0
   1c850:	mov	r1, #-2147483648	; 0x80000000
   1c854:	mov	r2, r4
   1c858:	mov	r3, r9
   1c85c:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1c860:	ldr	r3, [sp, #24]
   1c864:	ldr	ip, [sp, #28]
   1c868:	mov	r2, #1
   1c86c:	mov	r6, #0
   1c870:	mov	r7, #-2147483648	; 0x80000000
   1c874:	subs	r0, r0, r3
   1c878:	sbcs	r0, r1, ip
   1c87c:	bge	1c804 <__assert_fail@plt+0xb1fc>
   1c880:	b	1c814 <__assert_fail@plt+0xb20c>
   1c884:	ldr	r6, [sp, #8]
   1c888:	mov	r0, #0
   1c88c:	mov	r1, #-2147483648	; 0x80000000
   1c890:	mov	r3, r9
   1c894:	str	r4, [sp]
   1c898:	mov	r2, r6
   1c89c:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1c8a0:	ldr	r2, [sp, #24]
   1c8a4:	ldr	r3, [sp, #28]
   1c8a8:	mov	r7, #1
   1c8ac:	mov	r8, #-2147483648	; 0x80000000
   1c8b0:	subs	r0, r0, r2
   1c8b4:	sbcs	r0, r1, r3
   1c8b8:	mov	r0, #0
   1c8bc:	str	r0, [sp, #4]
   1c8c0:	blt	1c920 <__assert_fail@plt+0xb318>
   1c8c4:	umull	r1, r0, r6, r2
   1c8c8:	ldr	r7, [sp]
   1c8cc:	mla	r0, r6, r3, r0
   1c8d0:	str	r1, [sp, #4]
   1c8d4:	mla	r8, r9, r2, r0
   1c8d8:	cmp	r8, #0
   1c8dc:	blt	1c920 <__assert_fail@plt+0xb318>
   1c8e0:	ldr	r3, [sp, #28]
   1c8e4:	mvn	r0, #0
   1c8e8:	mvn	r1, #-2147483648	; 0x80000000
   1c8ec:	str	r7, [sp]
   1c8f0:	mvn	r7, #0
   1c8f4:	mvn	r4, #-2147483648	; 0x80000000
   1c8f8:	bl	1e990 <__assert_fail@plt+0xd388>
   1c8fc:	mov	r6, #1
   1c900:	ldr	r2, [sp, #24]
   1c904:	ldr	r3, [sp, #28]
   1c908:	str	r6, [sp, #8]
   1c90c:	ldr	r6, [sp, #4]
   1c910:	subs	r0, r0, r6
   1c914:	sbcs	r0, r1, r8
   1c918:	bge	1c960 <__assert_fail@plt+0xb358>
   1c91c:	b	1c97c <__assert_fail@plt+0xb374>
   1c920:	ldr	r6, [sp, #4]
   1c924:	mov	r0, #0
   1c928:	mov	r1, #-2147483648	; 0x80000000
   1c92c:	mov	r3, r8
   1c930:	str	r7, [sp]
   1c934:	mov	r2, r6
   1c938:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1c93c:	ldr	r2, [sp, #24]
   1c940:	ldr	r3, [sp, #28]
   1c944:	mov	r7, #1
   1c948:	mov	r4, #-2147483648	; 0x80000000
   1c94c:	str	r7, [sp, #8]
   1c950:	mov	r7, #0
   1c954:	subs	r0, r0, r2
   1c958:	sbcs	r0, r1, r3
   1c95c:	blt	1c9b4 <__assert_fail@plt+0xb3ac>
   1c960:	umull	r7, r0, r6, r2
   1c964:	mla	r0, r6, r3, r0
   1c968:	mla	r4, r8, r2, r0
   1c96c:	ldr	r0, [sp]
   1c970:	cmp	r4, #0
   1c974:	str	r0, [sp, #8]
   1c978:	blt	1c9b4 <__assert_fail@plt+0xb3ac>
   1c97c:	ldr	r3, [sp, #28]
   1c980:	mvn	r0, #0
   1c984:	mvn	r1, #-2147483648	; 0x80000000
   1c988:	mvn	r9, #0
   1c98c:	mvn	r8, #-2147483648	; 0x80000000
   1c990:	bl	1e990 <__assert_fail@plt+0xd388>
   1c994:	ldr	r2, [sp, #24]
   1c998:	ldr	r3, [sp, #28]
   1c99c:	subs	r0, r0, r7
   1c9a0:	sbcs	r0, r1, r4
   1c9a4:	bge	1c9f0 <__assert_fail@plt+0xb3e8>
   1c9a8:	mov	r0, #1
   1c9ac:	str	r0, [sp, #8]
   1c9b0:	b	1ca04 <__assert_fail@plt+0xb3fc>
   1c9b4:	mov	r0, #0
   1c9b8:	mov	r1, #-2147483648	; 0x80000000
   1c9bc:	mov	r2, r7
   1c9c0:	mov	r3, r4
   1c9c4:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1c9c8:	ldr	r2, [sp, #24]
   1c9cc:	ldr	r3, [sp, #28]
   1c9d0:	subs	r0, r0, r2
   1c9d4:	sbcs	r0, r1, r3
   1c9d8:	bge	1c9f0 <__assert_fail@plt+0xb3e8>
   1c9dc:	mov	r0, #1
   1c9e0:	mov	r9, #0
   1c9e4:	mov	r8, #-2147483648	; 0x80000000
   1c9e8:	str	r0, [sp, #8]
   1c9ec:	b	1ca3c <__assert_fail@plt+0xb434>
   1c9f0:	umull	r9, r0, r7, r2
   1c9f4:	mla	r0, r7, r3, r0
   1c9f8:	mla	r8, r4, r2, r0
   1c9fc:	cmp	r8, #0
   1ca00:	blt	1ca3c <__assert_fail@plt+0xb434>
   1ca04:	ldr	r3, [sp, #28]
   1ca08:	mvn	r0, #0
   1ca0c:	mvn	r1, #-2147483648	; 0x80000000
   1ca10:	mvn	r4, #0
   1ca14:	mvn	r7, #-2147483648	; 0x80000000
   1ca18:	bl	1e990 <__assert_fail@plt+0xd388>
   1ca1c:	ldr	r2, [sp, #24]
   1ca20:	ldr	r3, [sp, #28]
   1ca24:	subs	r0, r0, r9
   1ca28:	sbcs	r0, r1, r8
   1ca2c:	bge	1ca78 <__assert_fail@plt+0xb470>
   1ca30:	mov	r0, #1
   1ca34:	str	r0, [sp, #8]
   1ca38:	b	1ca8c <__assert_fail@plt+0xb484>
   1ca3c:	mov	r0, #0
   1ca40:	mov	r1, #-2147483648	; 0x80000000
   1ca44:	mov	r2, r9
   1ca48:	mov	r3, r8
   1ca4c:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1ca50:	ldr	r2, [sp, #24]
   1ca54:	ldr	r3, [sp, #28]
   1ca58:	subs	r0, r0, r2
   1ca5c:	sbcs	r0, r1, r3
   1ca60:	bge	1ca78 <__assert_fail@plt+0xb470>
   1ca64:	mov	r0, #1
   1ca68:	mov	r4, #0
   1ca6c:	mov	r7, #-2147483648	; 0x80000000
   1ca70:	str	r0, [sp, #8]
   1ca74:	b	1cac4 <__assert_fail@plt+0xb4bc>
   1ca78:	umull	r4, r0, r9, r2
   1ca7c:	mla	r0, r9, r3, r0
   1ca80:	mla	r7, r8, r2, r0
   1ca84:	cmp	r7, #0
   1ca88:	blt	1cac4 <__assert_fail@plt+0xb4bc>
   1ca8c:	ldr	r3, [sp, #28]
   1ca90:	mvn	r0, #0
   1ca94:	mvn	r1, #-2147483648	; 0x80000000
   1ca98:	mvn	r8, #0
   1ca9c:	mvn	r9, #-2147483648	; 0x80000000
   1caa0:	bl	1e990 <__assert_fail@plt+0xd388>
   1caa4:	ldr	r2, [sp, #24]
   1caa8:	ldr	r3, [sp, #28]
   1caac:	subs	r0, r0, r4
   1cab0:	sbcs	r0, r1, r7
   1cab4:	bge	1cb00 <__assert_fail@plt+0xb4f8>
   1cab8:	mov	r0, #1
   1cabc:	str	r0, [sp, #8]
   1cac0:	b	1cb14 <__assert_fail@plt+0xb50c>
   1cac4:	mov	r0, #0
   1cac8:	mov	r1, #-2147483648	; 0x80000000
   1cacc:	mov	r2, r4
   1cad0:	mov	r3, r7
   1cad4:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1cad8:	ldr	r2, [sp, #24]
   1cadc:	ldr	r3, [sp, #28]
   1cae0:	subs	r0, r0, r2
   1cae4:	sbcs	r0, r1, r3
   1cae8:	bge	1cb00 <__assert_fail@plt+0xb4f8>
   1caec:	mov	r0, #1
   1caf0:	mov	r8, #0
   1caf4:	mov	r9, #-2147483648	; 0x80000000
   1caf8:	str	r0, [sp, #8]
   1cafc:	b	1cb50 <__assert_fail@plt+0xb548>
   1cb00:	umull	r8, r0, r4, r2
   1cb04:	mla	r0, r4, r3, r0
   1cb08:	mla	r9, r7, r2, r0
   1cb0c:	cmp	r9, #0
   1cb10:	blt	1cb50 <__assert_fail@plt+0xb548>
   1cb14:	ldr	r3, [sp, #28]
   1cb18:	mvn	r0, #0
   1cb1c:	mvn	r1, #-2147483648	; 0x80000000
   1cb20:	mvn	r4, #0
   1cb24:	mvn	r6, #-2147483648	; 0x80000000
   1cb28:	bl	1e990 <__assert_fail@plt+0xd388>
   1cb2c:	ldr	r2, [sp, #24]
   1cb30:	ldr	r3, [sp, #28]
   1cb34:	subs	r0, r0, r8
   1cb38:	sbcs	r0, r1, r9
   1cb3c:	bge	1cb90 <__assert_fail@plt+0xb588>
   1cb40:	ldr	r9, [sp, #12]
   1cb44:	mov	r0, #1
   1cb48:	str	r0, [sp, #8]
   1cb4c:	b	1cba8 <__assert_fail@plt+0xb5a0>
   1cb50:	mov	r0, #0
   1cb54:	mov	r1, #-2147483648	; 0x80000000
   1cb58:	mov	r2, r8
   1cb5c:	mov	r3, r9
   1cb60:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1cb64:	ldr	r2, [sp, #24]
   1cb68:	ldr	r3, [sp, #28]
   1cb6c:	subs	r0, r0, r2
   1cb70:	sbcs	r0, r1, r3
   1cb74:	bge	1cb90 <__assert_fail@plt+0xb588>
   1cb78:	ldr	r9, [sp, #12]
   1cb7c:	mov	r0, #1
   1cb80:	mov	r4, #0
   1cb84:	mov	r6, #-2147483648	; 0x80000000
   1cb88:	str	r0, [sp, #8]
   1cb8c:	b	1cbf4 <__assert_fail@plt+0xb5ec>
   1cb90:	umull	r4, r0, r8, r2
   1cb94:	mla	r0, r8, r3, r0
   1cb98:	mla	r6, r9, r2, r0
   1cb9c:	ldr	r9, [sp, #12]
   1cba0:	cmp	r6, #0
   1cba4:	blt	1cbf4 <__assert_fail@plt+0xb5ec>
   1cba8:	ldr	r3, [sp, #28]
   1cbac:	mvn	r0, #0
   1cbb0:	mvn	r1, #-2147483648	; 0x80000000
   1cbb4:	mov	r8, r6
   1cbb8:	mvn	r6, #0
   1cbbc:	mvn	r7, #-2147483648	; 0x80000000
   1cbc0:	bl	1e990 <__assert_fail@plt+0xd388>
   1cbc4:	ldr	r3, [sp, #24]
   1cbc8:	ldr	ip, [sp, #28]
   1cbcc:	subs	r0, r0, r4
   1cbd0:	mov	r2, #1
   1cbd4:	sbcs	r0, r1, r8
   1cbd8:	blt	1cbec <__assert_fail@plt+0xb5e4>
   1cbdc:	umull	r6, r0, r4, r3
   1cbe0:	mov	r2, #0
   1cbe4:	mla	r0, r4, ip, r0
   1cbe8:	mla	r7, r8, r3, r0
   1cbec:	ldr	r0, [sp, #8]
   1cbf0:	b	1bd38 <__assert_fail@plt+0xa730>
   1cbf4:	mov	r0, #0
   1cbf8:	mov	r1, #-2147483648	; 0x80000000
   1cbfc:	mov	r2, r4
   1cc00:	mov	r3, r6
   1cc04:	bl	1e8bc <__assert_fail@plt+0xd2b4>
   1cc08:	ldr	r3, [sp, #24]
   1cc0c:	ldr	ip, [sp, #28]
   1cc10:	mov	r8, r6
   1cc14:	mov	r2, #1
   1cc18:	mov	r6, #0
   1cc1c:	mov	r7, #-2147483648	; 0x80000000
   1cc20:	subs	r0, r0, r3
   1cc24:	sbcs	r0, r1, ip
   1cc28:	bge	1cbdc <__assert_fail@plt+0xb5d4>
   1cc2c:	b	1cbec <__assert_fail@plt+0xb5e4>
   1cc30:	movw	r0, #1797	; 0x705
   1cc34:	movw	r1, #1835	; 0x72b
   1cc38:	movw	r3, #1851	; 0x73b
   1cc3c:	mov	r2, #85	; 0x55
   1cc40:	movt	r0, #2
   1cc44:	movt	r1, #2
   1cc48:	movt	r3, #2
   1cc4c:	bl	11608 <__assert_fail@plt>
   1cc50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc54:	add	fp, sp, #28
   1cc58:	sub	sp, sp, #12
   1cc5c:	cmp	r2, #37	; 0x25
   1cc60:	bcs	1d728 <__assert_fail@plt+0xc120>
   1cc64:	ldr	r8, [fp, #8]
   1cc68:	mov	r9, r3
   1cc6c:	mov	r7, r2
   1cc70:	mov	r4, r1
   1cc74:	mov	r5, r0
   1cc78:	bl	114e8 <__errno_location@plt>
   1cc7c:	add	sl, sp, #8
   1cc80:	cmp	r4, #0
   1cc84:	mov	r6, r0
   1cc88:	mov	r0, #0
   1cc8c:	mov	r2, r7
   1cc90:	movne	sl, r4
   1cc94:	str	r0, [r6]
   1cc98:	mov	r0, r5
   1cc9c:	mov	r1, sl
   1cca0:	bl	112fc <strtol@plt>
   1cca4:	ldr	r4, [sl]
   1cca8:	str	r9, [sp, #4]
   1ccac:	cmp	r4, r5
   1ccb0:	beq	1cce0 <__assert_fail@plt+0xb6d8>
   1ccb4:	mov	r7, r0
   1ccb8:	ldr	r0, [r6]
   1ccbc:	cmp	r0, #0
   1ccc0:	beq	1cd10 <__assert_fail@plt+0xb708>
   1ccc4:	mov	r9, #4
   1ccc8:	cmp	r0, #34	; 0x22
   1cccc:	bne	1d704 <__assert_fail@plt+0xc0fc>
   1ccd0:	mov	r9, #1
   1ccd4:	cmp	r8, #0
   1ccd8:	bne	1cd1c <__assert_fail@plt+0xb714>
   1ccdc:	b	1d6fc <__assert_fail@plt+0xc0f4>
   1cce0:	cmp	r8, #0
   1cce4:	mov	r9, #4
   1cce8:	ldrbne	r1, [r5]
   1ccec:	cmpne	r1, #0
   1ccf0:	beq	1d704 <__assert_fail@plt+0xc0fc>
   1ccf4:	mov	r0, r8
   1ccf8:	bl	114c4 <strchr@plt>
   1ccfc:	cmp	r0, #0
   1cd00:	beq	1d704 <__assert_fail@plt+0xc0fc>
   1cd04:	mov	r7, #1
   1cd08:	mov	r9, #0
   1cd0c:	b	1cd1c <__assert_fail@plt+0xb714>
   1cd10:	mov	r9, r0
   1cd14:	cmp	r8, #0
   1cd18:	beq	1d6fc <__assert_fail@plt+0xc0f4>
   1cd1c:	ldrb	r5, [r4]
   1cd20:	cmp	r5, #0
   1cd24:	beq	1d6fc <__assert_fail@plt+0xc0f4>
   1cd28:	mov	r0, r8
   1cd2c:	mov	r1, r5
   1cd30:	bl	114c4 <strchr@plt>
   1cd34:	cmp	r0, #0
   1cd38:	beq	1cf78 <__assert_fail@plt+0xb970>
   1cd3c:	sub	r0, r5, #69	; 0x45
   1cd40:	mov	ip, #1
   1cd44:	mov	r6, #1024	; 0x400
   1cd48:	cmp	r0, #47	; 0x2f
   1cd4c:	bhi	1ce68 <__assert_fail@plt+0xb860>
   1cd50:	add	r1, pc, #0
   1cd54:	ldr	pc, [r1, r0, lsl #2]
   1cd58:	andeq	ip, r1, r8, lsl lr
   1cd5c:	andeq	ip, r1, r8, ror #28
   1cd60:	andeq	ip, r1, r8, lsl lr
   1cd64:	andeq	ip, r1, r8, ror #28
   1cd68:	andeq	ip, r1, r8, ror #28
   1cd6c:	andeq	ip, r1, r8, ror #28
   1cd70:	andeq	ip, r1, r8, lsl lr
   1cd74:	andeq	ip, r1, r8, ror #28
   1cd78:	andeq	ip, r1, r8, lsl lr
   1cd7c:	andeq	ip, r1, r8, ror #28
   1cd80:	andeq	ip, r1, r8, ror #28
   1cd84:	andeq	ip, r1, r8, lsl lr
   1cd88:	andeq	ip, r1, r8, ror #28
   1cd8c:	andeq	ip, r1, r8, ror #28
   1cd90:	andeq	ip, r1, r8, ror #28
   1cd94:	andeq	ip, r1, r8, lsl lr
   1cd98:	andeq	ip, r1, r8, ror #28
   1cd9c:	andeq	ip, r1, r8, ror #28
   1cda0:	andeq	ip, r1, r8, ror #28
   1cda4:	andeq	ip, r1, r8, ror #28
   1cda8:	andeq	ip, r1, r8, lsl lr
   1cdac:	andeq	ip, r1, r8, lsl lr
   1cdb0:	andeq	ip, r1, r8, ror #28
   1cdb4:	andeq	ip, r1, r8, ror #28
   1cdb8:	andeq	ip, r1, r8, ror #28
   1cdbc:	andeq	ip, r1, r8, ror #28
   1cdc0:	andeq	ip, r1, r8, ror #28
   1cdc4:	andeq	ip, r1, r8, ror #28
   1cdc8:	andeq	ip, r1, r8, ror #28
   1cdcc:	andeq	ip, r1, r8, ror #28
   1cdd0:	andeq	ip, r1, r8, ror #28
   1cdd4:	andeq	ip, r1, r8, ror #28
   1cdd8:	andeq	ip, r1, r8, ror #28
   1cddc:	andeq	ip, r1, r8, ror #28
   1cde0:	andeq	ip, r1, r8, lsl lr
   1cde4:	andeq	ip, r1, r8, ror #28
   1cde8:	andeq	ip, r1, r8, ror #28
   1cdec:	andeq	ip, r1, r8, ror #28
   1cdf0:	andeq	ip, r1, r8, lsl lr
   1cdf4:	andeq	ip, r1, r8, ror #28
   1cdf8:	andeq	ip, r1, r8, lsl lr
   1cdfc:	andeq	ip, r1, r8, ror #28
   1ce00:	andeq	ip, r1, r8, ror #28
   1ce04:	andeq	ip, r1, r8, ror #28
   1ce08:	andeq	ip, r1, r8, ror #28
   1ce0c:	andeq	ip, r1, r8, ror #28
   1ce10:	andeq	ip, r1, r8, ror #28
   1ce14:	andeq	ip, r1, r8, lsl lr
   1ce18:	mov	r0, r8
   1ce1c:	mov	r1, #48	; 0x30
   1ce20:	bl	114c4 <strchr@plt>
   1ce24:	cmp	r0, #0
   1ce28:	beq	1ce64 <__assert_fail@plt+0xb85c>
   1ce2c:	ldrb	r0, [r4, #1]
   1ce30:	cmp	r0, #66	; 0x42
   1ce34:	cmpne	r0, #68	; 0x44
   1ce38:	bne	1ce48 <__assert_fail@plt+0xb840>
   1ce3c:	mov	ip, #2
   1ce40:	mov	r6, #1000	; 0x3e8
   1ce44:	b	1ce68 <__assert_fail@plt+0xb860>
   1ce48:	cmp	r0, #105	; 0x69
   1ce4c:	bne	1ce64 <__assert_fail@plt+0xb85c>
   1ce50:	ldrb	r0, [r4, #2]
   1ce54:	mov	ip, #1
   1ce58:	cmp	r0, #66	; 0x42
   1ce5c:	movweq	ip, #3
   1ce60:	b	1ce68 <__assert_fail@plt+0xb860>
   1ce64:	mov	ip, #1
   1ce68:	sub	r1, r5, #66	; 0x42
   1ce6c:	cmp	r1, #53	; 0x35
   1ce70:	bhi	1cf78 <__assert_fail@plt+0xb970>
   1ce74:	add	r2, pc, #4
   1ce78:	mov	r0, #0
   1ce7c:	ldr	pc, [r2, r1, lsl #2]
   1ce80:	andeq	sp, r1, r0
   1ce84:	andeq	ip, r1, r8, ror pc
   1ce88:	andeq	ip, r1, r8, ror pc
   1ce8c:	andeq	sp, r1, r4, lsl r0
   1ce90:	andeq	ip, r1, r8, ror pc
   1ce94:	andeq	ip, r1, r8, asr pc
   1ce98:	andeq	ip, r1, r8, ror pc
   1ce9c:	andeq	ip, r1, r8, ror pc
   1cea0:	andeq	ip, r1, r8, ror pc
   1cea4:	andeq	ip, r1, r4, lsl #31
   1cea8:	andeq	ip, r1, r8, ror pc
   1ceac:	andeq	ip, r1, r0, lsr #31
   1ceb0:	andeq	ip, r1, r8, ror pc
   1ceb4:	andeq	ip, r1, r8, ror pc
   1ceb8:	andeq	sp, r1, r4, lsr r0
   1cebc:	andeq	ip, r1, r8, ror pc
   1cec0:	andeq	ip, r1, r8, ror pc
   1cec4:	andeq	ip, r1, r8, ror pc
   1cec8:	andeq	ip, r1, r0, asr #31
   1cecc:	andeq	ip, r1, r8, ror pc
   1ced0:	andeq	ip, r1, r8, ror pc
   1ced4:	andeq	ip, r1, r8, ror pc
   1ced8:	andeq	ip, r1, r8, ror pc
   1cedc:	andeq	sp, r1, r4, asr r0
   1cee0:	andeq	ip, r1, r0, ror #31
   1cee4:	andeq	ip, r1, r8, ror pc
   1cee8:	andeq	ip, r1, r8, ror pc
   1ceec:	andeq	ip, r1, r8, ror pc
   1cef0:	andeq	ip, r1, r8, ror pc
   1cef4:	andeq	ip, r1, r8, ror pc
   1cef8:	andeq	ip, r1, r8, ror pc
   1cefc:	andeq	ip, r1, r8, ror pc
   1cf00:	andeq	sp, r1, r4, ror r0
   1cf04:	andeq	sp, r1, r4, ror #13
   1cf08:	andeq	ip, r1, r8, ror pc
   1cf0c:	andeq	ip, r1, r8, ror pc
   1cf10:	andeq	ip, r1, r8, ror pc
   1cf14:	andeq	ip, r1, r8, asr pc
   1cf18:	andeq	ip, r1, r8, ror pc
   1cf1c:	andeq	ip, r1, r8, ror pc
   1cf20:	andeq	ip, r1, r8, ror pc
   1cf24:	andeq	ip, r1, r4, lsl #31
   1cf28:	andeq	ip, r1, r8, ror pc
   1cf2c:	andeq	ip, r1, r0, lsr #31
   1cf30:	andeq	ip, r1, r8, ror pc
   1cf34:	andeq	ip, r1, r8, ror pc
   1cf38:	andeq	ip, r1, r8, ror pc
   1cf3c:	andeq	ip, r1, r8, ror pc
   1cf40:	andeq	ip, r1, r8, ror pc
   1cf44:	andeq	ip, r1, r8, ror pc
   1cf48:	andeq	ip, r1, r0, asr #31
   1cf4c:	andeq	ip, r1, r8, ror pc
   1cf50:	andeq	ip, r1, r8, ror pc
   1cf54:	muleq	r1, r4, r0
   1cf58:	cmn	r7, #1
   1cf5c:	ble	1d0a8 <__assert_fail@plt+0xbaa0>
   1cf60:	mvn	r2, #-2147483648	; 0x80000000
   1cf64:	mov	r3, #1
   1cf68:	udiv	r0, r2, r6
   1cf6c:	cmp	r0, r7
   1cf70:	bge	1d0c0 <__assert_fail@plt+0xbab8>
   1cf74:	b	1d180 <__assert_fail@plt+0xbb78>
   1cf78:	ldr	r0, [sp, #4]
   1cf7c:	orr	r9, r9, #2
   1cf80:	b	1d700 <__assert_fail@plt+0xc0f8>
   1cf84:	cmn	r7, #1
   1cf88:	ble	1d0d4 <__assert_fail@plt+0xbacc>
   1cf8c:	mvn	r1, #-2147483648	; 0x80000000
   1cf90:	udiv	r1, r1, r6
   1cf94:	cmp	r1, r7
   1cf98:	bge	1d0e8 <__assert_fail@plt+0xbae0>
   1cf9c:	b	1d350 <__assert_fail@plt+0xbd48>
   1cfa0:	cmn	r7, #1
   1cfa4:	ble	1d0f0 <__assert_fail@plt+0xbae8>
   1cfa8:	mvn	r1, #-2147483648	; 0x80000000
   1cfac:	mov	r0, #1
   1cfb0:	udiv	r2, r1, r6
   1cfb4:	cmp	r2, r7
   1cfb8:	bge	1d108 <__assert_fail@plt+0xbb00>
   1cfbc:	b	1d1bc <__assert_fail@plt+0xbbb4>
   1cfc0:	cmn	r7, #1
   1cfc4:	ble	1d11c <__assert_fail@plt+0xbb14>
   1cfc8:	mvn	r0, #-2147483648	; 0x80000000
   1cfcc:	mov	r1, #1
   1cfd0:	udiv	r2, r0, r6
   1cfd4:	cmp	r2, r7
   1cfd8:	bge	1d134 <__assert_fail@plt+0xbb2c>
   1cfdc:	b	1d144 <__assert_fail@plt+0xbb3c>
   1cfe0:	cmp	r7, #0
   1cfe4:	blt	1d1f4 <__assert_fail@plt+0xbbec>
   1cfe8:	mvn	r0, #-2147483648	; 0x80000000
   1cfec:	mov	r3, #1
   1cff0:	udiv	r1, r0, r6
   1cff4:	cmp	r1, r7
   1cff8:	bge	1d210 <__assert_fail@plt+0xbc08>
   1cffc:	b	1d220 <__assert_fail@plt+0xbc18>
   1d000:	cmn	r7, #1
   1d004:	ble	1d238 <__assert_fail@plt+0xbc30>
   1d008:	cmp	r7, #2097152	; 0x200000
   1d00c:	blt	1d24c <__assert_fail@plt+0xbc44>
   1d010:	b	1d350 <__assert_fail@plt+0xbd48>
   1d014:	cmp	r7, #0
   1d018:	blt	1d254 <__assert_fail@plt+0xbc4c>
   1d01c:	mvn	r0, #-2147483648	; 0x80000000
   1d020:	mov	r3, #1
   1d024:	udiv	r1, r0, r6
   1d028:	cmp	r1, r7
   1d02c:	bge	1d270 <__assert_fail@plt+0xbc68>
   1d030:	b	1d280 <__assert_fail@plt+0xbc78>
   1d034:	cmp	r7, #0
   1d038:	blt	1d298 <__assert_fail@plt+0xbc90>
   1d03c:	mvn	r0, #-2147483648	; 0x80000000
   1d040:	mov	r3, #1
   1d044:	udiv	r1, r0, r6
   1d048:	cmp	r1, r7
   1d04c:	bge	1d2b4 <__assert_fail@plt+0xbcac>
   1d050:	b	1d2c4 <__assert_fail@plt+0xbcbc>
   1d054:	cmp	r7, #0
   1d058:	blt	1d2dc <__assert_fail@plt+0xbcd4>
   1d05c:	mvn	r0, #-2147483648	; 0x80000000
   1d060:	mov	r3, #1
   1d064:	udiv	r1, r0, r6
   1d068:	cmp	r1, r7
   1d06c:	bge	1d2f8 <__assert_fail@plt+0xbcf0>
   1d070:	b	1d308 <__assert_fail@plt+0xbd00>
   1d074:	cmn	r7, #1
   1d078:	ble	1d320 <__assert_fail@plt+0xbd18>
   1d07c:	movw	r1, #65535	; 0xffff
   1d080:	movt	r1, #31
   1d084:	add	r1, r1, #2097152	; 0x200000
   1d088:	cmp	r7, r1
   1d08c:	ble	1d334 <__assert_fail@plt+0xbd2c>
   1d090:	b	1d350 <__assert_fail@plt+0xbd48>
   1d094:	cmn	r7, #1
   1d098:	ble	1d33c <__assert_fail@plt+0xbd34>
   1d09c:	cmp	r7, #1073741824	; 0x40000000
   1d0a0:	bge	1d350 <__assert_fail@plt+0xbd48>
   1d0a4:	b	1d368 <__assert_fail@plt+0xbd60>
   1d0a8:	beq	1d0c0 <__assert_fail@plt+0xbab8>
   1d0ac:	mov	r2, #-2147483648	; 0x80000000
   1d0b0:	mov	r3, #1
   1d0b4:	sdiv	r0, r2, r7
   1d0b8:	cmp	r0, r6
   1d0bc:	blt	1d198 <__assert_fail@plt+0xbb90>
   1d0c0:	mul	r2, r7, r6
   1d0c4:	mov	r3, #0
   1d0c8:	cmp	r2, #0
   1d0cc:	bge	1d180 <__assert_fail@plt+0xbb78>
   1d0d0:	b	1d198 <__assert_fail@plt+0xbb90>
   1d0d4:	beq	1d0e8 <__assert_fail@plt+0xbae0>
   1d0d8:	mov	r1, #-2147483648	; 0x80000000
   1d0dc:	sdiv	r1, r1, r7
   1d0e0:	cmp	r1, r6
   1d0e4:	blt	1d350 <__assert_fail@plt+0xbd48>
   1d0e8:	mul	r7, r7, r6
   1d0ec:	b	1d6e4 <__assert_fail@plt+0xc0dc>
   1d0f0:	beq	1d108 <__assert_fail@plt+0xbb00>
   1d0f4:	mov	r1, #-2147483648	; 0x80000000
   1d0f8:	mov	r0, #1
   1d0fc:	sdiv	r2, r1, r7
   1d100:	cmp	r2, r6
   1d104:	blt	1d1d4 <__assert_fail@plt+0xbbcc>
   1d108:	mul	r1, r7, r6
   1d10c:	mov	r0, #0
   1d110:	cmp	r1, #0
   1d114:	bge	1d1bc <__assert_fail@plt+0xbbb4>
   1d118:	b	1d1d4 <__assert_fail@plt+0xbbcc>
   1d11c:	beq	1d134 <__assert_fail@plt+0xbb2c>
   1d120:	mov	r0, #-2147483648	; 0x80000000
   1d124:	mov	r1, #1
   1d128:	sdiv	r2, r0, r7
   1d12c:	cmp	r2, r6
   1d130:	blt	1d15c <__assert_fail@plt+0xbb54>
   1d134:	mul	r0, r7, r6
   1d138:	mov	r1, #0
   1d13c:	cmp	r0, #0
   1d140:	blt	1d15c <__assert_fail@plt+0xbb54>
   1d144:	mvn	r2, #-2147483648	; 0x80000000
   1d148:	mov	r3, #1
   1d14c:	udiv	r7, r2, r6
   1d150:	cmp	r7, r0
   1d154:	blt	1d180 <__assert_fail@plt+0xbb78>
   1d158:	b	1d170 <__assert_fail@plt+0xbb68>
   1d15c:	mov	r2, #-2147483648	; 0x80000000
   1d160:	mov	r3, #1
   1d164:	sdiv	r7, r2, r0
   1d168:	cmp	r7, r6
   1d16c:	blt	1d198 <__assert_fail@plt+0xbb90>
   1d170:	mul	r2, r0, r6
   1d174:	mov	r3, r1
   1d178:	cmp	r2, #0
   1d17c:	blt	1d198 <__assert_fail@plt+0xbb90>
   1d180:	mvn	r1, #-2147483648	; 0x80000000
   1d184:	mov	r0, #1
   1d188:	udiv	r7, r1, r6
   1d18c:	cmp	r7, r2
   1d190:	blt	1d1bc <__assert_fail@plt+0xbbb4>
   1d194:	b	1d1ac <__assert_fail@plt+0xbba4>
   1d198:	mov	r1, #-2147483648	; 0x80000000
   1d19c:	mov	r0, #1
   1d1a0:	sdiv	r7, r1, r2
   1d1a4:	cmp	r7, r6
   1d1a8:	blt	1d1d4 <__assert_fail@plt+0xbbcc>
   1d1ac:	mul	r1, r2, r6
   1d1b0:	mov	r0, r3
   1d1b4:	cmp	r1, #0
   1d1b8:	blt	1d1d4 <__assert_fail@plt+0xbbcc>
   1d1bc:	mvn	r7, #-2147483648	; 0x80000000
   1d1c0:	mov	r2, #1
   1d1c4:	udiv	r3, r7, r6
   1d1c8:	cmp	r3, r1
   1d1cc:	blt	1d6e0 <__assert_fail@plt+0xc0d8>
   1d1d0:	b	1d1e8 <__assert_fail@plt+0xbbe0>
   1d1d4:	mov	r7, #-2147483648	; 0x80000000
   1d1d8:	mov	r2, #1
   1d1dc:	sdiv	r3, r7, r1
   1d1e0:	cmp	r3, r6
   1d1e4:	blt	1d6e0 <__assert_fail@plt+0xc0d8>
   1d1e8:	mov	r2, #0
   1d1ec:	mul	r7, r1, r6
   1d1f0:	b	1d6e0 <__assert_fail@plt+0xc0d8>
   1d1f4:	cmn	r7, #1
   1d1f8:	beq	1d210 <__assert_fail@plt+0xbc08>
   1d1fc:	mov	r0, #-2147483648	; 0x80000000
   1d200:	mov	r3, #1
   1d204:	sdiv	r1, r0, r7
   1d208:	cmp	r1, r6
   1d20c:	blt	1d370 <__assert_fail@plt+0xbd68>
   1d210:	mul	r0, r7, r6
   1d214:	mov	r3, #0
   1d218:	cmp	r0, #0
   1d21c:	blt	1d370 <__assert_fail@plt+0xbd68>
   1d220:	mvn	r1, #-2147483648	; 0x80000000
   1d224:	mov	r2, #1
   1d228:	udiv	r7, r1, r6
   1d22c:	cmp	r7, r0
   1d230:	bge	1d384 <__assert_fail@plt+0xbd7c>
   1d234:	b	1d394 <__assert_fail@plt+0xbd8c>
   1d238:	beq	1d24c <__assert_fail@plt+0xbc44>
   1d23c:	mov	r1, #-2147483648	; 0x80000000
   1d240:	sdiv	r1, r1, r7
   1d244:	cmp	r1, #1024	; 0x400
   1d248:	blt	1d350 <__assert_fail@plt+0xbd48>
   1d24c:	lsl	r7, r7, #10
   1d250:	b	1d6e4 <__assert_fail@plt+0xc0dc>
   1d254:	cmn	r7, #1
   1d258:	beq	1d270 <__assert_fail@plt+0xbc68>
   1d25c:	mov	r0, #-2147483648	; 0x80000000
   1d260:	mov	r3, #1
   1d264:	sdiv	r1, r0, r7
   1d268:	cmp	r1, r6
   1d26c:	blt	1d440 <__assert_fail@plt+0xbe38>
   1d270:	mul	r0, r7, r6
   1d274:	mov	r3, #0
   1d278:	cmp	r0, #0
   1d27c:	blt	1d440 <__assert_fail@plt+0xbe38>
   1d280:	mvn	r1, #-2147483648	; 0x80000000
   1d284:	mov	r2, #1
   1d288:	udiv	r7, r1, r6
   1d28c:	cmp	r7, r0
   1d290:	bge	1d454 <__assert_fail@plt+0xbe4c>
   1d294:	b	1d464 <__assert_fail@plt+0xbe5c>
   1d298:	cmn	r7, #1
   1d29c:	beq	1d2b4 <__assert_fail@plt+0xbcac>
   1d2a0:	mov	r0, #-2147483648	; 0x80000000
   1d2a4:	mov	r3, #1
   1d2a8:	sdiv	r1, r0, r7
   1d2ac:	cmp	r1, r6
   1d2b0:	blt	1d510 <__assert_fail@plt+0xbf08>
   1d2b4:	mul	r0, r7, r6
   1d2b8:	mov	r3, #0
   1d2bc:	cmp	r0, #0
   1d2c0:	blt	1d510 <__assert_fail@plt+0xbf08>
   1d2c4:	mvn	r1, #-2147483648	; 0x80000000
   1d2c8:	mov	r2, #1
   1d2cc:	udiv	r7, r1, r6
   1d2d0:	cmp	r7, r0
   1d2d4:	bge	1d524 <__assert_fail@plt+0xbf1c>
   1d2d8:	b	1d534 <__assert_fail@plt+0xbf2c>
   1d2dc:	cmn	r7, #1
   1d2e0:	beq	1d2f8 <__assert_fail@plt+0xbcf0>
   1d2e4:	mov	r0, #-2147483648	; 0x80000000
   1d2e8:	mov	r3, #1
   1d2ec:	sdiv	r1, r0, r7
   1d2f0:	cmp	r1, r6
   1d2f4:	blt	1d574 <__assert_fail@plt+0xbf6c>
   1d2f8:	mul	r0, r7, r6
   1d2fc:	mov	r3, #0
   1d300:	cmp	r0, #0
   1d304:	blt	1d574 <__assert_fail@plt+0xbf6c>
   1d308:	mvn	r1, #-2147483648	; 0x80000000
   1d30c:	mov	r2, #1
   1d310:	udiv	r7, r1, r6
   1d314:	cmp	r7, r0
   1d318:	bge	1d588 <__assert_fail@plt+0xbf80>
   1d31c:	b	1d598 <__assert_fail@plt+0xbf90>
   1d320:	beq	1d334 <__assert_fail@plt+0xbd2c>
   1d324:	mov	r1, #-2147483648	; 0x80000000
   1d328:	sdiv	r1, r1, r7
   1d32c:	cmp	r1, #512	; 0x200
   1d330:	blt	1d350 <__assert_fail@plt+0xbd48>
   1d334:	lsl	r7, r7, #9
   1d338:	b	1d6e4 <__assert_fail@plt+0xc0dc>
   1d33c:	beq	1d368 <__assert_fail@plt+0xbd60>
   1d340:	mov	r1, #-2147483648	; 0x80000000
   1d344:	sdiv	r1, r1, r7
   1d348:	cmp	r1, #2
   1d34c:	bge	1d368 <__assert_fail@plt+0xbd60>
   1d350:	mvn	r1, #-2147483648	; 0x80000000
   1d354:	cmp	r7, #0
   1d358:	mov	r0, #1
   1d35c:	movlt	r1, #-2147483648	; 0x80000000
   1d360:	mov	r7, r1
   1d364:	b	1d6e4 <__assert_fail@plt+0xc0dc>
   1d368:	lsl	r7, r7, #1
   1d36c:	b	1d6e4 <__assert_fail@plt+0xc0dc>
   1d370:	mov	r1, #-2147483648	; 0x80000000
   1d374:	mov	r2, #1
   1d378:	sdiv	r7, r1, r0
   1d37c:	cmp	r7, r6
   1d380:	blt	1d3ac <__assert_fail@plt+0xbda4>
   1d384:	mul	r1, r0, r6
   1d388:	mov	r2, r3
   1d38c:	cmp	r1, #0
   1d390:	blt	1d3ac <__assert_fail@plt+0xbda4>
   1d394:	mvn	r3, #-2147483648	; 0x80000000
   1d398:	mov	r0, #1
   1d39c:	udiv	r7, r3, r6
   1d3a0:	cmp	r7, r1
   1d3a4:	bge	1d3c0 <__assert_fail@plt+0xbdb8>
   1d3a8:	b	1d3d0 <__assert_fail@plt+0xbdc8>
   1d3ac:	mov	r3, #-2147483648	; 0x80000000
   1d3b0:	mov	r0, #1
   1d3b4:	sdiv	r7, r3, r1
   1d3b8:	cmp	r7, r6
   1d3bc:	blt	1d3e8 <__assert_fail@plt+0xbde0>
   1d3c0:	mul	r3, r1, r6
   1d3c4:	mov	r0, r2
   1d3c8:	cmp	r3, #0
   1d3cc:	blt	1d3e8 <__assert_fail@plt+0xbde0>
   1d3d0:	mvn	r1, #-2147483648	; 0x80000000
   1d3d4:	udiv	r2, r1, r6
   1d3d8:	cmp	r2, r3
   1d3dc:	bge	1d400 <__assert_fail@plt+0xbdf8>
   1d3e0:	mov	r0, #1
   1d3e4:	b	1d40c <__assert_fail@plt+0xbe04>
   1d3e8:	mov	r1, #-2147483648	; 0x80000000
   1d3ec:	sdiv	r2, r1, r3
   1d3f0:	cmp	r2, r6
   1d3f4:	bge	1d400 <__assert_fail@plt+0xbdf8>
   1d3f8:	mov	r0, #1
   1d3fc:	b	1d420 <__assert_fail@plt+0xbe18>
   1d400:	mul	r1, r3, r6
   1d404:	cmp	r1, #0
   1d408:	blt	1d420 <__assert_fail@plt+0xbe18>
   1d40c:	mvn	r2, #-2147483648	; 0x80000000
   1d410:	udiv	r3, r2, r6
   1d414:	cmp	r3, r1
   1d418:	bge	1d430 <__assert_fail@plt+0xbe28>
   1d41c:	b	1d4b0 <__assert_fail@plt+0xbea8>
   1d420:	mov	r2, #-2147483648	; 0x80000000
   1d424:	sdiv	r3, r2, r1
   1d428:	cmp	r3, r6
   1d42c:	blt	1d4c8 <__assert_fail@plt+0xbec0>
   1d430:	mul	r2, r1, r6
   1d434:	cmp	r2, #0
   1d438:	bge	1d4dc <__assert_fail@plt+0xbed4>
   1d43c:	b	1d4f0 <__assert_fail@plt+0xbee8>
   1d440:	mov	r1, #-2147483648	; 0x80000000
   1d444:	mov	r2, #1
   1d448:	sdiv	r7, r1, r0
   1d44c:	cmp	r7, r6
   1d450:	blt	1d47c <__assert_fail@plt+0xbe74>
   1d454:	mul	r1, r0, r6
   1d458:	mov	r2, r3
   1d45c:	cmp	r1, #0
   1d460:	blt	1d47c <__assert_fail@plt+0xbe74>
   1d464:	mvn	r3, #-2147483648	; 0x80000000
   1d468:	mov	r0, #1
   1d46c:	udiv	r7, r3, r6
   1d470:	cmp	r7, r1
   1d474:	bge	1d490 <__assert_fail@plt+0xbe88>
   1d478:	b	1d4a0 <__assert_fail@plt+0xbe98>
   1d47c:	mov	r3, #-2147483648	; 0x80000000
   1d480:	mov	r0, #1
   1d484:	sdiv	r7, r3, r1
   1d488:	cmp	r7, r6
   1d48c:	blt	1d4b8 <__assert_fail@plt+0xbeb0>
   1d490:	mul	r3, r1, r6
   1d494:	mov	r0, r2
   1d498:	cmp	r3, #0
   1d49c:	blt	1d4b8 <__assert_fail@plt+0xbeb0>
   1d4a0:	mvn	r2, #-2147483648	; 0x80000000
   1d4a4:	udiv	r1, r2, r6
   1d4a8:	cmp	r1, r3
   1d4ac:	bge	1d4d0 <__assert_fail@plt+0xbec8>
   1d4b0:	mov	r0, #1
   1d4b4:	b	1d4dc <__assert_fail@plt+0xbed4>
   1d4b8:	mov	r2, #-2147483648	; 0x80000000
   1d4bc:	sdiv	r1, r2, r3
   1d4c0:	cmp	r1, r6
   1d4c4:	bge	1d4d0 <__assert_fail@plt+0xbec8>
   1d4c8:	mov	r0, #1
   1d4cc:	b	1d4f0 <__assert_fail@plt+0xbee8>
   1d4d0:	mul	r2, r3, r6
   1d4d4:	cmp	r2, #0
   1d4d8:	blt	1d4f0 <__assert_fail@plt+0xbee8>
   1d4dc:	mvn	r1, #-2147483648	; 0x80000000
   1d4e0:	udiv	r3, r1, r6
   1d4e4:	cmp	r3, r2
   1d4e8:	bge	1d500 <__assert_fail@plt+0xbef8>
   1d4ec:	b	1d698 <__assert_fail@plt+0xc090>
   1d4f0:	mov	r1, #-2147483648	; 0x80000000
   1d4f4:	sdiv	r3, r1, r2
   1d4f8:	cmp	r3, r6
   1d4fc:	blt	1d6b0 <__assert_fail@plt+0xc0a8>
   1d500:	mul	r1, r2, r6
   1d504:	cmp	r1, #0
   1d508:	bge	1d6c4 <__assert_fail@plt+0xc0bc>
   1d50c:	b	1d710 <__assert_fail@plt+0xc108>
   1d510:	mov	r1, #-2147483648	; 0x80000000
   1d514:	mov	r2, #1
   1d518:	sdiv	r7, r1, r0
   1d51c:	cmp	r7, r6
   1d520:	blt	1d54c <__assert_fail@plt+0xbf44>
   1d524:	mul	r1, r0, r6
   1d528:	mov	r2, r3
   1d52c:	cmp	r1, #0
   1d530:	blt	1d54c <__assert_fail@plt+0xbf44>
   1d534:	mvn	r3, #-2147483648	; 0x80000000
   1d538:	mov	r0, #1
   1d53c:	udiv	r7, r3, r6
   1d540:	cmp	r7, r1
   1d544:	bge	1d560 <__assert_fail@plt+0xbf58>
   1d548:	b	1d688 <__assert_fail@plt+0xc080>
   1d54c:	mov	r3, #-2147483648	; 0x80000000
   1d550:	mov	r0, #1
   1d554:	sdiv	r7, r3, r1
   1d558:	cmp	r7, r6
   1d55c:	blt	1d6a0 <__assert_fail@plt+0xc098>
   1d560:	mul	r3, r1, r6
   1d564:	mov	r0, r2
   1d568:	cmp	r3, #0
   1d56c:	bge	1d688 <__assert_fail@plt+0xc080>
   1d570:	b	1d6a0 <__assert_fail@plt+0xc098>
   1d574:	mov	r1, #-2147483648	; 0x80000000
   1d578:	mov	r2, #1
   1d57c:	sdiv	r7, r1, r0
   1d580:	cmp	r7, r6
   1d584:	blt	1d5b0 <__assert_fail@plt+0xbfa8>
   1d588:	mul	r1, r0, r6
   1d58c:	mov	r2, r3
   1d590:	cmp	r1, #0
   1d594:	blt	1d5b0 <__assert_fail@plt+0xbfa8>
   1d598:	mvn	r3, #-2147483648	; 0x80000000
   1d59c:	mov	r0, #1
   1d5a0:	udiv	r7, r3, r6
   1d5a4:	cmp	r7, r1
   1d5a8:	bge	1d5c4 <__assert_fail@plt+0xbfbc>
   1d5ac:	b	1d5d4 <__assert_fail@plt+0xbfcc>
   1d5b0:	mov	r3, #-2147483648	; 0x80000000
   1d5b4:	mov	r0, #1
   1d5b8:	sdiv	r7, r3, r1
   1d5bc:	cmp	r7, r6
   1d5c0:	blt	1d5ec <__assert_fail@plt+0xbfe4>
   1d5c4:	mul	r3, r1, r6
   1d5c8:	mov	r0, r2
   1d5cc:	cmp	r3, #0
   1d5d0:	blt	1d5ec <__assert_fail@plt+0xbfe4>
   1d5d4:	mvn	r1, #-2147483648	; 0x80000000
   1d5d8:	udiv	r2, r1, r6
   1d5dc:	cmp	r2, r3
   1d5e0:	bge	1d604 <__assert_fail@plt+0xbffc>
   1d5e4:	mov	r0, #1
   1d5e8:	b	1d610 <__assert_fail@plt+0xc008>
   1d5ec:	mov	r1, #-2147483648	; 0x80000000
   1d5f0:	sdiv	r2, r1, r3
   1d5f4:	cmp	r2, r6
   1d5f8:	bge	1d604 <__assert_fail@plt+0xbffc>
   1d5fc:	mov	r0, #1
   1d600:	b	1d628 <__assert_fail@plt+0xc020>
   1d604:	mul	r1, r3, r6
   1d608:	cmp	r1, #0
   1d60c:	blt	1d628 <__assert_fail@plt+0xc020>
   1d610:	mvn	r2, #-2147483648	; 0x80000000
   1d614:	udiv	r3, r2, r6
   1d618:	cmp	r3, r1
   1d61c:	bge	1d640 <__assert_fail@plt+0xc038>
   1d620:	mov	r0, #1
   1d624:	b	1d64c <__assert_fail@plt+0xc044>
   1d628:	mov	r2, #-2147483648	; 0x80000000
   1d62c:	sdiv	r3, r2, r1
   1d630:	cmp	r3, r6
   1d634:	bge	1d640 <__assert_fail@plt+0xc038>
   1d638:	mov	r0, #1
   1d63c:	b	1d664 <__assert_fail@plt+0xc05c>
   1d640:	mul	r2, r1, r6
   1d644:	cmp	r2, #0
   1d648:	blt	1d664 <__assert_fail@plt+0xc05c>
   1d64c:	mvn	r3, #-2147483648	; 0x80000000
   1d650:	udiv	r1, r3, r6
   1d654:	cmp	r1, r2
   1d658:	bge	1d67c <__assert_fail@plt+0xc074>
   1d65c:	mov	r0, #1
   1d660:	b	1d688 <__assert_fail@plt+0xc080>
   1d664:	mov	r3, #-2147483648	; 0x80000000
   1d668:	sdiv	r1, r3, r2
   1d66c:	cmp	r1, r6
   1d670:	bge	1d67c <__assert_fail@plt+0xc074>
   1d674:	mov	r0, #1
   1d678:	b	1d6a0 <__assert_fail@plt+0xc098>
   1d67c:	mul	r3, r2, r6
   1d680:	cmp	r3, #0
   1d684:	blt	1d6a0 <__assert_fail@plt+0xc098>
   1d688:	mvn	r1, #-2147483648	; 0x80000000
   1d68c:	udiv	r2, r1, r6
   1d690:	cmp	r2, r3
   1d694:	bge	1d6b8 <__assert_fail@plt+0xc0b0>
   1d698:	mov	r0, #1
   1d69c:	b	1d6c4 <__assert_fail@plt+0xc0bc>
   1d6a0:	mov	r1, #-2147483648	; 0x80000000
   1d6a4:	sdiv	r2, r1, r3
   1d6a8:	cmp	r2, r6
   1d6ac:	bge	1d6b8 <__assert_fail@plt+0xc0b0>
   1d6b0:	mov	r0, #1
   1d6b4:	b	1d710 <__assert_fail@plt+0xc108>
   1d6b8:	mul	r1, r3, r6
   1d6bc:	cmp	r1, #0
   1d6c0:	blt	1d710 <__assert_fail@plt+0xc108>
   1d6c4:	mvn	r7, #-2147483648	; 0x80000000
   1d6c8:	mov	r2, #1
   1d6cc:	udiv	r3, r7, r6
   1d6d0:	cmp	r3, r1
   1d6d4:	blt	1d6e0 <__assert_fail@plt+0xc0d8>
   1d6d8:	mul	r7, r1, r6
   1d6dc:	mov	r2, #0
   1d6e0:	orr	r0, r2, r0
   1d6e4:	add	r1, r4, ip
   1d6e8:	orr	r9, r0, r9
   1d6ec:	str	r1, [sl]
   1d6f0:	ldrb	r1, [r4, ip]
   1d6f4:	cmp	r1, #0
   1d6f8:	orrne	r9, r9, #2
   1d6fc:	ldr	r0, [sp, #4]
   1d700:	str	r7, [r0]
   1d704:	mov	r0, r9
   1d708:	sub	sp, fp, #28
   1d70c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d710:	mov	r7, #-2147483648	; 0x80000000
   1d714:	mov	r2, #1
   1d718:	sdiv	r3, r7, r1
   1d71c:	cmp	r3, r6
   1d720:	bge	1d6d8 <__assert_fail@plt+0xc0d0>
   1d724:	b	1d6e0 <__assert_fail@plt+0xc0d8>
   1d728:	movw	r0, #1797	; 0x705
   1d72c:	movw	r1, #1837	; 0x72d
   1d730:	movw	r3, #1929	; 0x789
   1d734:	mov	r2, #85	; 0x55
   1d738:	movt	r0, #2
   1d73c:	movt	r1, #2
   1d740:	movt	r3, #2
   1d744:	bl	11608 <__assert_fail@plt>
   1d748:	push	{fp, lr}
   1d74c:	mov	fp, sp
   1d750:	sub	sp, sp, #8
   1d754:	movw	ip, #4468	; 0x1174
   1d758:	movt	ip, #3
   1d75c:	ldr	ip, [ip]
   1d760:	str	ip, [sp, #4]
   1d764:	ldr	ip, [fp, #8]
   1d768:	str	ip, [sp]
   1d76c:	bl	1d774 <__assert_fail@plt+0xc16c>
   1d770:	bl	115f0 <abort@plt>
   1d774:	push	{r4, r5, r6, r7, fp, lr}
   1d778:	add	fp, sp, #16
   1d77c:	sub	sp, sp, #16
   1d780:	sub	r0, r0, #1
   1d784:	cmp	r0, #4
   1d788:	bcs	1d808 <__assert_fail@plt+0xc200>
   1d78c:	mov	r5, r1
   1d790:	movw	r1, #2096	; 0x830
   1d794:	ldr	r4, [fp, #12]
   1d798:	ldr	r6, [fp, #8]
   1d79c:	movt	r1, #2
   1d7a0:	cmn	r5, #1
   1d7a4:	ldr	r1, [r1, r0, lsl #2]
   1d7a8:	ble	1d7bc <__assert_fail@plt+0xc1b4>
   1d7ac:	ldr	r7, [r3, r5, lsl #4]
   1d7b0:	movw	r5, #2000	; 0x7d0
   1d7b4:	movt	r5, #2
   1d7b8:	b	1d7d8 <__assert_fail@plt+0xc1d0>
   1d7bc:	mov	r0, #0
   1d7c0:	add	r7, sp, #14
   1d7c4:	strb	r0, [sp, #15]
   1d7c8:	movw	r0, #2000	; 0x7d0
   1d7cc:	strb	r2, [sp, #14]
   1d7d0:	movt	r0, #2
   1d7d4:	sub	r5, r0, r5
   1d7d8:	mov	r0, #0
   1d7dc:	mov	r2, #5
   1d7e0:	bl	1138c <dcgettext@plt>
   1d7e4:	mov	r2, r0
   1d7e8:	mov	r0, r4
   1d7ec:	mov	r1, #0
   1d7f0:	mov	r3, r5
   1d7f4:	str	r7, [sp]
   1d7f8:	str	r6, [sp, #4]
   1d7fc:	bl	11428 <error@plt>
   1d800:	sub	sp, fp, #16
   1d804:	pop	{r4, r5, r6, r7, fp, pc}
   1d808:	bl	115f0 <abort@plt>
   1d80c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d810:	add	fp, sp, #28
   1d814:	sub	sp, sp, #44	; 0x2c
   1d818:	cmp	r2, #37	; 0x25
   1d81c:	bcs	1e48c <__assert_fail@plt+0xce84>
   1d820:	ldr	sl, [fp, #8]
   1d824:	mov	r6, r2
   1d828:	mov	r7, r1
   1d82c:	mov	r4, r0
   1d830:	str	r3, [sp, #36]	; 0x24
   1d834:	bl	114e8 <__errno_location@plt>
   1d838:	mov	r5, r0
   1d83c:	mov	r0, #0
   1d840:	str	r0, [r5]
   1d844:	bl	114a0 <__ctype_b_loc@plt>
   1d848:	ldr	r1, [r0]
   1d84c:	mov	r2, r4
   1d850:	ldrb	r0, [r2], #1
   1d854:	add	r3, r1, r0, lsl #1
   1d858:	ldrb	r3, [r3, #1]
   1d85c:	tst	r3, #32
   1d860:	bne	1d850 <__assert_fail@plt+0xc248>
   1d864:	sub	r9, fp, #32
   1d868:	cmp	r7, #0
   1d86c:	mov	r8, #4
   1d870:	movne	r9, r7
   1d874:	cmp	r0, #45	; 0x2d
   1d878:	beq	1e480 <__assert_fail@plt+0xce78>
   1d87c:	mov	r0, r4
   1d880:	mov	r1, r9
   1d884:	mov	r2, r6
   1d888:	mov	r3, #0
   1d88c:	bl	11368 <__strtoull_internal@plt>
   1d890:	mov	r7, r1
   1d894:	ldr	r1, [r9]
   1d898:	cmp	r1, r4
   1d89c:	beq	1d8c8 <__assert_fail@plt+0xc2c0>
   1d8a0:	mov	r6, r0
   1d8a4:	ldr	r0, [r5]
   1d8a8:	cmp	r0, #0
   1d8ac:	beq	1d904 <__assert_fail@plt+0xc2fc>
   1d8b0:	cmp	r0, #34	; 0x22
   1d8b4:	bne	1e480 <__assert_fail@plt+0xce78>
   1d8b8:	mov	r8, #1
   1d8bc:	cmp	sl, #0
   1d8c0:	bne	1d910 <__assert_fail@plt+0xc308>
   1d8c4:	b	1e478 <__assert_fail@plt+0xce70>
   1d8c8:	cmp	sl, #0
   1d8cc:	beq	1e480 <__assert_fail@plt+0xce78>
   1d8d0:	mov	r5, r1
   1d8d4:	ldrb	r1, [r4]
   1d8d8:	cmp	r1, #0
   1d8dc:	beq	1e480 <__assert_fail@plt+0xce78>
   1d8e0:	mov	r0, sl
   1d8e4:	bl	114c4 <strchr@plt>
   1d8e8:	cmp	r0, #0
   1d8ec:	beq	1e480 <__assert_fail@plt+0xce78>
   1d8f0:	mov	r1, r5
   1d8f4:	mov	r8, #0
   1d8f8:	mov	r6, #1
   1d8fc:	mov	r7, #0
   1d900:	b	1d910 <__assert_fail@plt+0xc308>
   1d904:	mov	r8, r0
   1d908:	cmp	sl, #0
   1d90c:	beq	1e478 <__assert_fail@plt+0xce70>
   1d910:	ldrb	r4, [r1]
   1d914:	cmp	r4, #0
   1d918:	beq	1e478 <__assert_fail@plt+0xce70>
   1d91c:	str	r1, [sp, #32]
   1d920:	mov	r0, sl
   1d924:	mov	r1, r4
   1d928:	bl	114c4 <strchr@plt>
   1d92c:	cmp	r0, #0
   1d930:	beq	1dbf8 <__assert_fail@plt+0xc5f0>
   1d934:	sub	r0, r4, #69	; 0x45
   1d938:	mov	r1, #1
   1d93c:	mov	r3, #0
   1d940:	mov	r5, #1024	; 0x400
   1d944:	cmp	r0, #47	; 0x2f
   1d948:	str	r1, [sp, #28]
   1d94c:	bhi	1da50 <__assert_fail@plt+0xc448>
   1d950:	add	r1, pc, #0
   1d954:	ldr	pc, [r1, r0, lsl #2]
   1d958:	andeq	sp, r1, r8, lsl sl
   1d95c:	andeq	sp, r1, r0, asr sl
   1d960:	andeq	sp, r1, r8, lsl sl
   1d964:	andeq	sp, r1, r0, asr sl
   1d968:	andeq	sp, r1, r0, asr sl
   1d96c:	andeq	sp, r1, r0, asr sl
   1d970:	andeq	sp, r1, r8, lsl sl
   1d974:	andeq	sp, r1, r0, asr sl
   1d978:	andeq	sp, r1, r8, lsl sl
   1d97c:	andeq	sp, r1, r0, asr sl
   1d980:	andeq	sp, r1, r0, asr sl
   1d984:	andeq	sp, r1, r8, lsl sl
   1d988:	andeq	sp, r1, r0, asr sl
   1d98c:	andeq	sp, r1, r0, asr sl
   1d990:	andeq	sp, r1, r0, asr sl
   1d994:	andeq	sp, r1, r8, lsl sl
   1d998:	andeq	sp, r1, r0, asr sl
   1d99c:	andeq	sp, r1, r0, asr sl
   1d9a0:	andeq	sp, r1, r0, asr sl
   1d9a4:	andeq	sp, r1, r0, asr sl
   1d9a8:	andeq	sp, r1, r8, lsl sl
   1d9ac:	andeq	sp, r1, r8, lsl sl
   1d9b0:	andeq	sp, r1, r0, asr sl
   1d9b4:	andeq	sp, r1, r0, asr sl
   1d9b8:	andeq	sp, r1, r0, asr sl
   1d9bc:	andeq	sp, r1, r0, asr sl
   1d9c0:	andeq	sp, r1, r0, asr sl
   1d9c4:	andeq	sp, r1, r0, asr sl
   1d9c8:	andeq	sp, r1, r0, asr sl
   1d9cc:	andeq	sp, r1, r0, asr sl
   1d9d0:	andeq	sp, r1, r0, asr sl
   1d9d4:	andeq	sp, r1, r0, asr sl
   1d9d8:	andeq	sp, r1, r0, asr sl
   1d9dc:	andeq	sp, r1, r0, asr sl
   1d9e0:	andeq	sp, r1, r8, lsl sl
   1d9e4:	andeq	sp, r1, r0, asr sl
   1d9e8:	andeq	sp, r1, r0, asr sl
   1d9ec:	andeq	sp, r1, r0, asr sl
   1d9f0:	andeq	sp, r1, r8, lsl sl
   1d9f4:	andeq	sp, r1, r0, asr sl
   1d9f8:	andeq	sp, r1, r8, lsl sl
   1d9fc:	andeq	sp, r1, r0, asr sl
   1da00:	andeq	sp, r1, r0, asr sl
   1da04:	andeq	sp, r1, r0, asr sl
   1da08:	andeq	sp, r1, r0, asr sl
   1da0c:	andeq	sp, r1, r0, asr sl
   1da10:	andeq	sp, r1, r0, asr sl
   1da14:	andeq	sp, r1, r8, lsl sl
   1da18:	mov	r0, sl
   1da1c:	mov	r1, #48	; 0x30
   1da20:	bl	114c4 <strchr@plt>
   1da24:	cmp	r0, #0
   1da28:	beq	1da4c <__assert_fail@plt+0xc444>
   1da2c:	ldr	r1, [sp, #32]
   1da30:	ldrb	r0, [r1, #1]
   1da34:	cmp	r0, #66	; 0x42
   1da38:	cmpne	r0, #68	; 0x44
   1da3c:	bne	1dc04 <__assert_fail@plt+0xc5fc>
   1da40:	mov	r5, #1000	; 0x3e8
   1da44:	mov	r0, #2
   1da48:	str	r0, [sp, #28]
   1da4c:	mov	r3, #0
   1da50:	sub	r0, r4, #66	; 0x42
   1da54:	cmp	r0, #53	; 0x35
   1da58:	bhi	1dbf8 <__assert_fail@plt+0xc5f0>
   1da5c:	add	r1, pc, #0
   1da60:	ldr	pc, [r1, r0, lsl #2]
   1da64:	andeq	sp, r1, r0, lsl #31
   1da68:	strdeq	sp, [r1], -r8
   1da6c:	strdeq	sp, [r1], -r8
   1da70:	andeq	sp, r1, r8, lsr #31
   1da74:	strdeq	sp, [r1], -r8
   1da78:	andeq	sp, r1, ip, lsr fp
   1da7c:	strdeq	sp, [r1], -r8
   1da80:	strdeq	sp, [r1], -r8
   1da84:	strdeq	sp, [r1], -r8
   1da88:	andeq	sp, r1, r8, lsr #24
   1da8c:	strdeq	sp, [r1], -r8
   1da90:	andeq	sp, r1, r0, ror ip
   1da94:	strdeq	sp, [r1], -r8
   1da98:	strdeq	sp, [r1], -r8
   1da9c:	andeq	lr, r1, r0, lsl #2
   1daa0:	strdeq	sp, [r1], -r8
   1daa4:	strdeq	sp, [r1], -r8
   1daa8:	strdeq	sp, [r1], -r8
   1daac:	strdeq	sp, [r1], -ip
   1dab0:	strdeq	sp, [r1], -r8
   1dab4:	strdeq	sp, [r1], -r8
   1dab8:	strdeq	sp, [r1], -r8
   1dabc:	strdeq	sp, [r1], -r8
   1dac0:	andeq	lr, r1, r8, lsr #4
   1dac4:	andeq	sp, r1, r4, ror #27
   1dac8:	strdeq	sp, [r1], -r8
   1dacc:	strdeq	sp, [r1], -r8
   1dad0:	strdeq	sp, [r1], -r8
   1dad4:	strdeq	sp, [r1], -r8
   1dad8:	strdeq	sp, [r1], -r8
   1dadc:	strdeq	sp, [r1], -r8
   1dae0:	strdeq	sp, [r1], -r8
   1dae4:	andeq	lr, r1, r0, lsl #8
   1dae8:	andeq	lr, r1, r8, asr r4
   1daec:	strdeq	sp, [r1], -r8
   1daf0:	strdeq	sp, [r1], -r8
   1daf4:	strdeq	sp, [r1], -r8
   1daf8:	andeq	sp, r1, ip, lsr fp
   1dafc:	strdeq	sp, [r1], -r8
   1db00:	strdeq	sp, [r1], -r8
   1db04:	strdeq	sp, [r1], -r8
   1db08:	andeq	sp, r1, r8, lsr #24
   1db0c:	strdeq	sp, [r1], -r8
   1db10:	andeq	sp, r1, r0, ror ip
   1db14:	strdeq	sp, [r1], -r8
   1db18:	strdeq	sp, [r1], -r8
   1db1c:	strdeq	sp, [r1], -r8
   1db20:	strdeq	sp, [r1], -r8
   1db24:	strdeq	sp, [r1], -r8
   1db28:	strdeq	sp, [r1], -r8
   1db2c:	strdeq	sp, [r1], -ip
   1db30:	strdeq	sp, [r1], -r8
   1db34:	strdeq	sp, [r1], -r8
   1db38:	andeq	lr, r1, r4, lsr r4
   1db3c:	mvn	r0, #0
   1db40:	mvn	r1, #0
   1db44:	mov	r2, r5
   1db48:	mov	sl, r3
   1db4c:	bl	1e990 <__assert_fail@plt+0xd388>
   1db50:	subs	r3, r0, r6
   1db54:	mov	lr, #0
   1db58:	umull	r4, r2, r6, r5
   1db5c:	str	r1, [sp, #20]
   1db60:	sbcs	r3, r1, r7
   1db64:	mla	ip, r6, sl, r2
   1db68:	mov	r2, r1
   1db6c:	movwcc	lr, #1
   1db70:	mla	r7, r7, r5, ip
   1db74:	mov	r2, #0
   1db78:	cmp	lr, #0
   1db7c:	mvnne	r4, #0
   1db80:	mvnne	r7, #0
   1db84:	subs	r6, r0, r4
   1db88:	sbcs	r6, r1, r7
   1db8c:	movwcc	r2, #1
   1db90:	umull	r3, r6, r4, r5
   1db94:	cmp	r2, #0
   1db98:	str	r6, [sp, #16]
   1db9c:	mvnne	r3, #0
   1dba0:	cmp	r2, #0
   1dba4:	umull	r6, ip, r3, r5
   1dba8:	mla	r1, r3, sl, ip
   1dbac:	ldr	ip, [sp, #16]
   1dbb0:	str	r1, [sp, #12]
   1dbb4:	mla	r4, r4, sl, ip
   1dbb8:	mla	r4, r7, r5, r4
   1dbbc:	ldr	r7, [sp, #12]
   1dbc0:	mvnne	r4, #0
   1dbc4:	subs	r0, r0, r3
   1dbc8:	ldr	r0, [sp, #20]
   1dbcc:	mla	r7, r4, r5, r7
   1dbd0:	sbcs	r0, r0, r4
   1dbd4:	mov	r0, #0
   1dbd8:	movwcc	r0, #1
   1dbdc:	cmp	r0, #0
   1dbe0:	mov	r1, r0
   1dbe4:	orr	r0, lr, r2
   1dbe8:	mvnne	r7, #0
   1dbec:	mvnne	r6, #0
   1dbf0:	orr	r3, r0, r1
   1dbf4:	b	1e458 <__assert_fail@plt+0xce50>
   1dbf8:	ldr	r0, [sp, #36]	; 0x24
   1dbfc:	orr	r8, r8, #2
   1dc00:	b	1e47c <__assert_fail@plt+0xce74>
   1dc04:	cmp	r0, #105	; 0x69
   1dc08:	mov	r3, #0
   1dc0c:	bne	1da50 <__assert_fail@plt+0xc448>
   1dc10:	ldrb	r0, [r1, #2]
   1dc14:	mov	r1, #1
   1dc18:	cmp	r0, #66	; 0x42
   1dc1c:	movweq	r1, #3
   1dc20:	str	r1, [sp, #28]
   1dc24:	b	1da50 <__assert_fail@plt+0xc448>
   1dc28:	mvn	r0, #0
   1dc2c:	mvn	r1, #0
   1dc30:	mov	r2, r5
   1dc34:	mov	r4, r3
   1dc38:	bl	1e990 <__assert_fail@plt+0xd388>
   1dc3c:	subs	r0, r0, r6
   1dc40:	mov	r2, #0
   1dc44:	sbcs	r0, r1, r7
   1dc48:	movwcc	r2, #1
   1dc4c:	umull	r0, r1, r6, r5
   1dc50:	mla	r1, r6, r4, r1
   1dc54:	cmp	r2, #0
   1dc58:	mov	r3, r2
   1dc5c:	mla	r7, r7, r5, r1
   1dc60:	mvnne	r0, #0
   1dc64:	mvnne	r7, #0
   1dc68:	mov	r6, r0
   1dc6c:	b	1e458 <__assert_fail@plt+0xce50>
   1dc70:	mvn	r0, #0
   1dc74:	mvn	r1, #0
   1dc78:	mov	r2, r5
   1dc7c:	str	r3, [sp, #24]
   1dc80:	bl	1e990 <__assert_fail@plt+0xd388>
   1dc84:	subs	r3, r0, r6
   1dc88:	mov	ip, r0
   1dc8c:	umull	r4, r0, r6, r5
   1dc90:	mov	sl, #0
   1dc94:	sbcs	r3, r1, r7
   1dc98:	str	r0, [sp, #20]
   1dc9c:	ldr	r0, [sp, #24]
   1dca0:	mov	r3, #0
   1dca4:	movwcc	r3, #1
   1dca8:	cmp	r3, #0
   1dcac:	mvnne	r4, #0
   1dcb0:	cmp	r3, #0
   1dcb4:	umull	lr, r2, r4, r5
   1dcb8:	mla	r2, r4, r0, r2
   1dcbc:	str	r2, [sp, #16]
   1dcc0:	ldr	r2, [sp, #20]
   1dcc4:	mla	r6, r6, r0, r2
   1dcc8:	ldr	r0, [sp, #16]
   1dccc:	mla	r6, r7, r5, r6
   1dcd0:	mvnne	r6, #0
   1dcd4:	mla	r7, r6, r5, r0
   1dcd8:	subs	r0, ip, r4
   1dcdc:	sbcs	r0, r1, r6
   1dce0:	movwcc	sl, #1
   1dce4:	cmp	sl, #0
   1dce8:	orr	r3, r3, sl
   1dcec:	mvnne	lr, #0
   1dcf0:	mvnne	r7, #0
   1dcf4:	mov	r6, lr
   1dcf8:	b	1e458 <__assert_fail@plt+0xce50>
   1dcfc:	mvn	r0, #0
   1dd00:	mvn	r1, #0
   1dd04:	mov	r2, r5
   1dd08:	mov	sl, r3
   1dd0c:	bl	1e990 <__assert_fail@plt+0xd388>
   1dd10:	subs	r3, r0, r6
   1dd14:	mov	ip, r1
   1dd18:	umull	r2, lr, r6, r5
   1dd1c:	str	r0, [sp, #20]
   1dd20:	sbcs	r3, r1, r7
   1dd24:	mov	r1, #0
   1dd28:	mla	r6, r6, sl, lr
   1dd2c:	mov	lr, #0
   1dd30:	str	ip, [sp, #16]
   1dd34:	movwcc	r1, #1
   1dd38:	mla	r7, r7, r5, r6
   1dd3c:	cmp	r1, #0
   1dd40:	mvnne	r2, #0
   1dd44:	cmp	r1, #0
   1dd48:	umull	r3, r4, r2, r5
   1dd4c:	mvnne	r7, #0
   1dd50:	mla	r4, r2, sl, r4
   1dd54:	subs	r2, r0, r2
   1dd58:	sbcs	r2, ip, r7
   1dd5c:	mla	r4, r7, r5, r4
   1dd60:	movwcc	lr, #1
   1dd64:	mov	r2, #0
   1dd68:	cmp	lr, #0
   1dd6c:	mvnne	r3, #0
   1dd70:	mvnne	r4, #0
   1dd74:	subs	r7, r0, r3
   1dd78:	mov	r0, r5
   1dd7c:	sbcs	r7, ip, r4
   1dd80:	movwcc	r2, #1
   1dd84:	umull	r5, r7, r3, r5
   1dd88:	cmp	r2, #0
   1dd8c:	mla	r3, r3, sl, r7
   1dd90:	mvnne	r5, #0
   1dd94:	mla	r3, r4, r0, r3
   1dd98:	cmp	r2, #0
   1dd9c:	umull	r6, ip, r5, r0
   1dda0:	mvnne	r3, #0
   1dda4:	mla	ip, r5, sl, ip
   1dda8:	mla	r7, r3, r0, ip
   1ddac:	ldr	r0, [sp, #20]
   1ddb0:	subs	r0, r0, r5
   1ddb4:	ldr	r0, [sp, #16]
   1ddb8:	sbcs	r0, r0, r3
   1ddbc:	mov	r0, #0
   1ddc0:	movwcc	r0, #1
   1ddc4:	cmp	r0, #0
   1ddc8:	mov	r3, r0
   1ddcc:	orr	r0, r1, lr
   1ddd0:	orr	r0, r0, r2
   1ddd4:	mvnne	r7, #0
   1ddd8:	mvnne	r6, #0
   1dddc:	orr	r3, r0, r3
   1dde0:	b	1e458 <__assert_fail@plt+0xce50>
   1dde4:	mvn	r0, #0
   1dde8:	mvn	r1, #0
   1ddec:	mov	r2, r5
   1ddf0:	mov	r4, r3
   1ddf4:	str	r3, [sp, #24]
   1ddf8:	bl	1e990 <__assert_fail@plt+0xd388>
   1ddfc:	umull	r3, r2, r6, r5
   1de00:	mla	r2, r6, r4, r2
   1de04:	subs	r6, r0, r6
   1de08:	sbcs	r6, r1, r7
   1de0c:	mla	ip, r7, r5, r2
   1de10:	ldr	r2, [sp, #24]
   1de14:	mov	r6, #0
   1de18:	movwcc	r6, #1
   1de1c:	cmp	r6, #0
   1de20:	str	r6, [sp, #20]
   1de24:	mov	r6, #0
   1de28:	mvnne	r3, #0
   1de2c:	mvnne	ip, #0
   1de30:	subs	r4, r0, r3
   1de34:	umull	r7, lr, r3, r5
   1de38:	sbcs	r4, r1, ip
   1de3c:	mla	r3, r3, r2, lr
   1de40:	movwcc	r6, #1
   1de44:	cmp	r6, #0
   1de48:	str	r6, [sp, #16]
   1de4c:	mvnne	r7, #0
   1de50:	cmp	r6, #0
   1de54:	umull	sl, r4, r7, r5
   1de58:	mla	r4, r7, r2, r4
   1de5c:	mla	r2, ip, r5, r3
   1de60:	mov	ip, #0
   1de64:	mvnne	r2, #0
   1de68:	subs	r3, r0, r7
   1de6c:	mla	r6, r2, r5, r4
   1de70:	mov	r4, r0
   1de74:	sbcs	r2, r1, r2
   1de78:	mov	r0, #0
   1de7c:	movwcc	r0, #1
   1de80:	mov	r3, r4
   1de84:	cmp	r0, #0
   1de88:	str	r0, [sp, #12]
   1de8c:	mov	r0, r1
   1de90:	str	r3, [sp, #4]
   1de94:	mvnne	sl, #0
   1de98:	mvnne	r6, #0
   1de9c:	str	r0, [sp, #8]
   1dea0:	subs	r2, r4, sl
   1dea4:	ldr	r4, [sp, #24]
   1dea8:	sbcs	r2, r1, r6
   1deac:	movwcc	ip, #1
   1deb0:	umull	r7, r2, sl, r5
   1deb4:	cmp	ip, #0
   1deb8:	mla	r2, sl, r4, r2
   1debc:	mvnne	r7, #0
   1dec0:	cmp	ip, #0
   1dec4:	mov	sl, #0
   1dec8:	umull	r1, lr, r7, r5
   1decc:	mla	r2, r6, r5, r2
   1ded0:	mvnne	r2, #0
   1ded4:	mla	lr, r7, r4, lr
   1ded8:	subs	r6, r3, r7
   1dedc:	mla	lr, r2, r5, lr
   1dee0:	sbcs	r2, r0, r2
   1dee4:	movwcc	sl, #1
   1dee8:	mov	r2, #0
   1deec:	cmp	sl, #0
   1def0:	mvnne	r1, #0
   1def4:	mvnne	lr, #0
   1def8:	subs	r6, r3, r1
   1defc:	ldr	r3, [sp, #24]
   1df00:	sbcs	r6, r0, lr
   1df04:	umull	r0, r7, r1, r5
   1df08:	movwcc	r2, #1
   1df0c:	cmp	r2, #0
   1df10:	mvnne	r0, #0
   1df14:	mla	r1, r1, r3, r7
   1df18:	cmp	r2, #0
   1df1c:	umull	r6, r4, r0, r5
   1df20:	mla	r1, lr, r5, r1
   1df24:	mla	r4, r0, r3, r4
   1df28:	ldr	r3, [sp, #4]
   1df2c:	mvnne	r1, #0
   1df30:	mla	r7, r1, r5, r4
   1df34:	ldr	r5, [sp, #16]
   1df38:	subs	r0, r3, r0
   1df3c:	ldr	r0, [sp, #8]
   1df40:	sbcs	r0, r0, r1
   1df44:	mov	r0, #0
   1df48:	movwcc	r0, #1
   1df4c:	cmp	r0, #0
   1df50:	mov	r1, r0
   1df54:	ldr	r0, [sp, #20]
   1df58:	mvnne	r7, #0
   1df5c:	mvnne	r6, #0
   1df60:	orr	r0, r0, r5
   1df64:	ldr	r5, [sp, #12]
   1df68:	orr	r0, r0, r5
   1df6c:	orr	r0, r0, ip
   1df70:	orr	r0, r0, sl
   1df74:	orr	r0, r0, r2
   1df78:	orr	r0, r0, r1
   1df7c:	b	1e3f8 <__assert_fail@plt+0xcdf0>
   1df80:	mov	r1, #0
   1df84:	lsl	r2, r7, #10
   1df88:	lsl	r0, r6, #10
   1df8c:	lsr	r3, r7, #22
   1df90:	cmp	r1, r7, lsr #22
   1df94:	orr	r2, r2, r6, lsr #22
   1df98:	mvnne	r0, #0
   1df9c:	movwne	r3, #1
   1dfa0:	cmp	r1, r7, lsr #22
   1dfa4:	b	1e424 <__assert_fail@plt+0xce1c>
   1dfa8:	mvn	r0, #0
   1dfac:	mvn	r1, #0
   1dfb0:	mov	r2, r5
   1dfb4:	mov	sl, r3
   1dfb8:	bl	1e990 <__assert_fail@plt+0xd388>
   1dfbc:	subs	r2, r0, r6
   1dfc0:	mov	ip, r0
   1dfc4:	mov	r0, #0
   1dfc8:	sbcs	r2, r1, r7
   1dfcc:	movwcc	r0, #1
   1dfd0:	umull	r4, r2, r6, r5
   1dfd4:	cmp	r0, #0
   1dfd8:	mla	r2, r6, sl, r2
   1dfdc:	str	r0, [sp, #20]
   1dfe0:	mvnne	r4, #0
   1dfe4:	cmp	r0, #0
   1dfe8:	mla	r2, r7, r5, r2
   1dfec:	mov	r0, #0
   1dff0:	umull	lr, r3, r4, r5
   1dff4:	mvnne	r2, #0
   1dff8:	mla	r3, r4, sl, r3
   1dffc:	mla	r6, r2, r5, r3
   1e000:	subs	r3, ip, r4
   1e004:	sbcs	r2, r1, r2
   1e008:	mov	r3, r1
   1e00c:	movwcc	r0, #1
   1e010:	str	r3, [sp, #8]
   1e014:	cmp	r0, #0
   1e018:	str	r0, [sp, #16]
   1e01c:	mov	r0, ip
   1e020:	mvnne	lr, #0
   1e024:	mvnne	r6, #0
   1e028:	str	r0, [sp, #12]
   1e02c:	subs	r2, ip, lr
   1e030:	umull	r7, r4, lr, r5
   1e034:	sbcs	r2, r1, r6
   1e038:	mla	r4, lr, sl, r4
   1e03c:	mov	r2, #0
   1e040:	mla	r6, r6, r5, r4
   1e044:	mov	r4, #0
   1e048:	movwcc	r2, #1
   1e04c:	cmp	r2, #0
   1e050:	mvnne	r7, #0
   1e054:	cmp	r2, #0
   1e058:	umull	r1, ip, r7, r5
   1e05c:	mvnne	r6, #0
   1e060:	mla	ip, r7, sl, ip
   1e064:	subs	r7, r0, r7
   1e068:	mla	lr, r6, r5, ip
   1e06c:	sbcs	r7, r3, r6
   1e070:	mov	ip, #0
   1e074:	movwcc	ip, #1
   1e078:	cmp	ip, #0
   1e07c:	mvnne	r1, #0
   1e080:	mvnne	lr, #0
   1e084:	subs	r7, r0, r1
   1e088:	sbcs	r7, r3, lr
   1e08c:	movwcc	r4, #1
   1e090:	umull	r0, r7, r1, r5
   1e094:	cmp	r4, #0
   1e098:	mla	r1, r1, sl, r7
   1e09c:	mvnne	r0, #0
   1e0a0:	mla	r1, lr, r5, r1
   1e0a4:	cmp	r4, #0
   1e0a8:	umull	r6, r3, r0, r5
   1e0ac:	mvnne	r1, #0
   1e0b0:	mla	r3, r0, sl, r3
   1e0b4:	mla	r7, r1, r5, r3
   1e0b8:	ldr	r3, [sp, #12]
   1e0bc:	subs	r0, r3, r0
   1e0c0:	ldr	r3, [sp, #16]
   1e0c4:	ldr	r0, [sp, #8]
   1e0c8:	sbcs	r0, r0, r1
   1e0cc:	mov	r0, #0
   1e0d0:	movwcc	r0, #1
   1e0d4:	cmp	r0, #0
   1e0d8:	mov	r1, r0
   1e0dc:	ldr	r0, [sp, #20]
   1e0e0:	mvnne	r7, #0
   1e0e4:	mvnne	r6, #0
   1e0e8:	orr	r0, r0, r3
   1e0ec:	orr	r0, r0, r2
   1e0f0:	orr	r0, r0, ip
   1e0f4:	orr	r0, r0, r4
   1e0f8:	orr	r3, r0, r1
   1e0fc:	b	1e458 <__assert_fail@plt+0xce50>
   1e100:	mvn	r0, #0
   1e104:	mvn	r1, #0
   1e108:	mov	r2, r5
   1e10c:	mov	sl, r3
   1e110:	bl	1e990 <__assert_fail@plt+0xd388>
   1e114:	umull	r3, r2, r6, r5
   1e118:	mov	lr, r1
   1e11c:	mov	r1, r0
   1e120:	mla	r2, r6, sl, r2
   1e124:	subs	r6, r0, r6
   1e128:	mov	r0, #0
   1e12c:	sbcs	r6, lr, r7
   1e130:	mla	r2, r7, r5, r2
   1e134:	movwcc	r0, #1
   1e138:	cmp	r0, #0
   1e13c:	str	r0, [sp, #20]
   1e140:	mov	r0, r1
   1e144:	mvnne	r3, #0
   1e148:	mvnne	r2, #0
   1e14c:	str	r0, [sp, #16]
   1e150:	subs	r4, r1, r3
   1e154:	umull	r7, ip, r3, r5
   1e158:	sbcs	r4, lr, r2
   1e15c:	mla	r3, r3, sl, ip
   1e160:	mov	ip, #0
   1e164:	mov	r4, #0
   1e168:	mla	r2, r2, r5, r3
   1e16c:	movwcc	r4, #1
   1e170:	cmp	r4, #0
   1e174:	mvnne	r7, #0
   1e178:	cmp	r4, #0
   1e17c:	umull	r1, r6, r7, r5
   1e180:	mvnne	r2, #0
   1e184:	mla	r6, r7, sl, r6
   1e188:	mla	r3, r2, r5, r6
   1e18c:	subs	r6, r0, r7
   1e190:	sbcs	r2, lr, r2
   1e194:	movwcc	ip, #1
   1e198:	mov	r2, #0
   1e19c:	cmp	ip, #0
   1e1a0:	mvnne	r1, #0
   1e1a4:	mvnne	r3, #0
   1e1a8:	subs	r6, r0, r1
   1e1ac:	sbcs	r6, lr, r3
   1e1b0:	movwcc	r2, #1
   1e1b4:	umull	r0, r6, r1, r5
   1e1b8:	cmp	r2, #0
   1e1bc:	str	r6, [sp, #12]
   1e1c0:	mvnne	r0, #0
   1e1c4:	cmp	r2, #0
   1e1c8:	umull	r6, r7, r0, r5
   1e1cc:	mla	r7, r0, sl, r7
   1e1d0:	str	r7, [sp, #8]
   1e1d4:	ldr	r7, [sp, #12]
   1e1d8:	mla	r1, r1, sl, r7
   1e1dc:	mla	r1, r3, r5, r1
   1e1e0:	ldr	r3, [sp, #8]
   1e1e4:	mvnne	r1, #0
   1e1e8:	mla	r7, r1, r5, r3
   1e1ec:	ldr	r3, [sp, #16]
   1e1f0:	subs	r0, r3, r0
   1e1f4:	sbcs	r0, lr, r1
   1e1f8:	mov	r0, #0
   1e1fc:	movwcc	r0, #1
   1e200:	cmp	r0, #0
   1e204:	mov	r1, r0
   1e208:	ldr	r0, [sp, #20]
   1e20c:	mvnne	r7, #0
   1e210:	mvnne	r6, #0
   1e214:	orr	r0, r0, r4
   1e218:	orr	r0, r0, ip
   1e21c:	orr	r0, r0, r2
   1e220:	orr	r3, r0, r1
   1e224:	b	1e458 <__assert_fail@plt+0xce50>
   1e228:	mvn	r0, #0
   1e22c:	mvn	r1, #0
   1e230:	mov	r2, r5
   1e234:	mov	sl, r3
   1e238:	bl	1e990 <__assert_fail@plt+0xd388>
   1e23c:	mov	lr, r0
   1e240:	subs	r0, r0, r6
   1e244:	mov	r2, #0
   1e248:	mov	ip, r1
   1e24c:	str	sl, [sp, #24]
   1e250:	sbcs	r0, r1, r7
   1e254:	umull	r3, r1, r6, r5
   1e258:	str	lr, [sp, #4]
   1e25c:	movwcc	r2, #1
   1e260:	mla	r6, r6, sl, r1
   1e264:	mov	r1, #0
   1e268:	cmp	r2, #0
   1e26c:	mla	r7, r7, r5, r6
   1e270:	str	r2, [sp, #20]
   1e274:	mvnne	r3, #0
   1e278:	cmp	r2, #0
   1e27c:	mov	r2, #0
   1e280:	umull	r0, r4, r3, r5
   1e284:	mvnne	r7, #0
   1e288:	mla	r4, r3, sl, r4
   1e28c:	subs	r3, lr, r3
   1e290:	sbcs	r3, ip, r7
   1e294:	mla	r4, r7, r5, r4
   1e298:	movwcc	r1, #1
   1e29c:	cmp	r1, #0
   1e2a0:	str	r1, [sp, #16]
   1e2a4:	mvnne	r0, #0
   1e2a8:	mvnne	r4, #0
   1e2ac:	subs	r3, lr, r0
   1e2b0:	sbcs	r3, ip, r4
   1e2b4:	movwcc	r2, #1
   1e2b8:	umull	r6, r3, r0, r5
   1e2bc:	cmp	r2, #0
   1e2c0:	mla	r0, r0, sl, r3
   1e2c4:	str	r2, [sp, #12]
   1e2c8:	mvnne	r6, #0
   1e2cc:	mla	r0, r4, r5, r0
   1e2d0:	cmp	r2, #0
   1e2d4:	ldr	r4, [sp, #24]
   1e2d8:	umull	r1, r7, r6, r5
   1e2dc:	mvnne	r0, #0
   1e2e0:	subs	r3, lr, r6
   1e2e4:	mla	r7, r6, sl, r7
   1e2e8:	mov	r3, ip
   1e2ec:	mla	r7, r0, r5, r7
   1e2f0:	sbcs	r0, ip, r0
   1e2f4:	str	r3, [sp]
   1e2f8:	mov	r0, #0
   1e2fc:	movwcc	r0, #1
   1e300:	cmp	r0, #0
   1e304:	str	r0, [sp, #8]
   1e308:	mvnne	r1, #0
   1e30c:	mvnne	r7, #0
   1e310:	subs	r0, lr, r1
   1e314:	sbcs	r0, ip, r7
   1e318:	mov	ip, #0
   1e31c:	movwcc	ip, #1
   1e320:	umull	r6, r0, r1, r5
   1e324:	cmp	ip, #0
   1e328:	mla	r1, r1, r4, r0
   1e32c:	mov	r0, lr
   1e330:	mvnne	r6, #0
   1e334:	mla	r1, r7, r5, r1
   1e338:	cmp	ip, #0
   1e33c:	umull	r2, sl, r6, r5
   1e340:	mvnne	r1, #0
   1e344:	mla	sl, r6, r4, sl
   1e348:	subs	r6, lr, r6
   1e34c:	mov	lr, #0
   1e350:	mla	r7, r1, r5, sl
   1e354:	sbcs	r1, r3, r1
   1e358:	movwcc	lr, #1
   1e35c:	ldr	r1, [sp, #24]
   1e360:	cmp	lr, #0
   1e364:	mvnne	r2, #0
   1e368:	mvnne	r7, #0
   1e36c:	subs	r6, r0, r2
   1e370:	umull	r0, sl, r2, r5
   1e374:	sbcs	r6, r3, r7
   1e378:	mov	r3, #0
   1e37c:	mla	r2, r2, r1, sl
   1e380:	movwcc	r3, #1
   1e384:	mla	r2, r7, r5, r2
   1e388:	cmp	r3, #0
   1e38c:	mvnne	r0, #0
   1e390:	cmp	r3, #0
   1e394:	umull	r6, r4, r0, r5
   1e398:	mvnne	r2, #0
   1e39c:	mla	r4, r0, r1, r4
   1e3a0:	ldr	r1, [sp, #4]
   1e3a4:	mla	r7, r2, r5, r4
   1e3a8:	ldr	r5, [sp, #16]
   1e3ac:	subs	r0, r1, r0
   1e3b0:	ldr	r0, [sp]
   1e3b4:	sbcs	r0, r0, r2
   1e3b8:	mov	r0, #0
   1e3bc:	movwcc	r0, #1
   1e3c0:	cmp	r0, #0
   1e3c4:	mov	r2, r0
   1e3c8:	ldr	r0, [sp, #20]
   1e3cc:	mvnne	r7, #0
   1e3d0:	mvnne	r6, #0
   1e3d4:	orr	r0, r0, r5
   1e3d8:	ldr	r5, [sp, #12]
   1e3dc:	orr	r0, r0, r5
   1e3e0:	ldr	r5, [sp, #8]
   1e3e4:	orr	r0, r0, r5
   1e3e8:	orr	r0, r0, ip
   1e3ec:	orr	r0, r0, lr
   1e3f0:	orr	r0, r0, r3
   1e3f4:	orr	r0, r0, r2
   1e3f8:	and	r3, r0, #1
   1e3fc:	b	1e458 <__assert_fail@plt+0xce50>
   1e400:	mov	r1, #0
   1e404:	lsl	r2, r7, #9
   1e408:	lsl	r0, r6, #9
   1e40c:	lsr	r3, r7, #23
   1e410:	cmp	r1, r7, lsr #23
   1e414:	orr	r2, r2, r6, lsr #23
   1e418:	mvnne	r0, #0
   1e41c:	movwne	r3, #1
   1e420:	cmp	r1, r7, lsr #23
   1e424:	mvnne	r2, #0
   1e428:	mov	r6, r0
   1e42c:	mov	r7, r2
   1e430:	b	1e458 <__assert_fail@plt+0xce50>
   1e434:	lsl	r1, r7, #1
   1e438:	lsl	r0, r6, #1
   1e43c:	cmp	r7, #0
   1e440:	lsr	r3, r7, #31
   1e444:	orr	r1, r1, r6, lsr #31
   1e448:	mvnlt	r0, #0
   1e44c:	mvnlt	r1, #0
   1e450:	mov	r6, r0
   1e454:	mov	r7, r1
   1e458:	ldr	r1, [sp, #32]
   1e45c:	ldr	r2, [sp, #28]
   1e460:	orr	r8, r3, r8
   1e464:	add	r0, r1, r2
   1e468:	str	r0, [r9]
   1e46c:	ldrb	r0, [r1, r2]
   1e470:	cmp	r0, #0
   1e474:	orrne	r8, r8, #2
   1e478:	ldr	r0, [sp, #36]	; 0x24
   1e47c:	strd	r6, [r0]
   1e480:	mov	r0, r8
   1e484:	sub	sp, fp, #28
   1e488:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e48c:	movw	r0, #1797	; 0x705
   1e490:	movw	r1, #1835	; 0x72b
   1e494:	movw	r3, #2112	; 0x840
   1e498:	mov	r2, #85	; 0x55
   1e49c:	movt	r0, #2
   1e4a0:	movt	r1, #2
   1e4a4:	movt	r3, #2
   1e4a8:	bl	11608 <__assert_fail@plt>
   1e4ac:	clz	r2, r1
   1e4b0:	clz	r3, r0
   1e4b4:	lsr	r2, r2, #5
   1e4b8:	lsr	r3, r3, #5
   1e4bc:	orrs	r2, r3, r2
   1e4c0:	movwne	r1, #1
   1e4c4:	movwne	r0, #1
   1e4c8:	cmp	r1, #0
   1e4cc:	beq	1e4fc <__assert_fail@plt+0xcef4>
   1e4d0:	mvn	r2, #-2147483648	; 0x80000000
   1e4d4:	udiv	r2, r2, r1
   1e4d8:	cmp	r2, r0
   1e4dc:	bcs	1e4fc <__assert_fail@plt+0xcef4>
   1e4e0:	push	{fp, lr}
   1e4e4:	mov	fp, sp
   1e4e8:	bl	114e8 <__errno_location@plt>
   1e4ec:	mov	r1, #12
   1e4f0:	str	r1, [r0]
   1e4f4:	mov	r0, #0
   1e4f8:	pop	{fp, pc}
   1e4fc:	b	112c0 <calloc@plt>
   1e500:	cmp	r0, #0
   1e504:	movweq	r0, #1
   1e508:	cmn	r0, #1
   1e50c:	ble	1e514 <__assert_fail@plt+0xcf0c>
   1e510:	b	11440 <malloc@plt>
   1e514:	push	{fp, lr}
   1e518:	mov	fp, sp
   1e51c:	bl	114e8 <__errno_location@plt>
   1e520:	mov	r1, #12
   1e524:	str	r1, [r0]
   1e528:	mov	r0, #0
   1e52c:	pop	{fp, pc}
   1e530:	push	{fp, lr}
   1e534:	mov	fp, sp
   1e538:	cmp	r0, #0
   1e53c:	beq	1e558 <__assert_fail@plt+0xcf50>
   1e540:	cmp	r1, #0
   1e544:	beq	1e564 <__assert_fail@plt+0xcf5c>
   1e548:	cmn	r1, #1
   1e54c:	ble	1e570 <__assert_fail@plt+0xcf68>
   1e550:	pop	{fp, lr}
   1e554:	b	11398 <realloc@plt>
   1e558:	mov	r0, r1
   1e55c:	pop	{fp, lr}
   1e560:	b	1e500 <__assert_fail@plt+0xcef8>
   1e564:	bl	1622c <__assert_fail@plt+0x4c24>
   1e568:	mov	r0, #0
   1e56c:	pop	{fp, pc}
   1e570:	bl	114e8 <__errno_location@plt>
   1e574:	mov	r1, #12
   1e578:	str	r1, [r0]
   1e57c:	mov	r0, #0
   1e580:	pop	{fp, pc}
   1e584:	push	{r4, r5, r6, sl, fp, lr}
   1e588:	add	fp, sp, #16
   1e58c:	mov	r4, r0
   1e590:	bl	11410 <__fpending@plt>
   1e594:	ldr	r6, [r4]
   1e598:	mov	r5, r0
   1e59c:	mov	r0, r4
   1e5a0:	bl	16080 <__assert_fail@plt+0x4a78>
   1e5a4:	tst	r6, #32
   1e5a8:	bne	1e5e0 <__assert_fail@plt+0xcfd8>
   1e5ac:	cmp	r0, #0
   1e5b0:	mov	r4, r0
   1e5b4:	mvnne	r4, #0
   1e5b8:	cmp	r5, #0
   1e5bc:	bne	1e5ec <__assert_fail@plt+0xcfe4>
   1e5c0:	cmp	r0, #0
   1e5c4:	beq	1e5ec <__assert_fail@plt+0xcfe4>
   1e5c8:	bl	114e8 <__errno_location@plt>
   1e5cc:	ldr	r0, [r0]
   1e5d0:	subs	r4, r0, #9
   1e5d4:	mvnne	r4, #0
   1e5d8:	mov	r0, r4
   1e5dc:	pop	{r4, r5, r6, sl, fp, pc}
   1e5e0:	mvn	r4, #0
   1e5e4:	cmp	r0, #0
   1e5e8:	beq	1e5f4 <__assert_fail@plt+0xcfec>
   1e5ec:	mov	r0, r4
   1e5f0:	pop	{r4, r5, r6, sl, fp, pc}
   1e5f4:	bl	114e8 <__errno_location@plt>
   1e5f8:	mov	r1, #0
   1e5fc:	str	r1, [r0]
   1e600:	mov	r0, r4
   1e604:	pop	{r4, r5, r6, sl, fp, pc}
   1e608:	sub	sp, sp, #8
   1e60c:	push	{r4, r5, r6, r7, fp, lr}
   1e610:	add	fp, sp, #16
   1e614:	sub	sp, sp, #8
   1e618:	mov	r5, r0
   1e61c:	add	r0, fp, #8
   1e620:	cmp	r1, #11
   1e624:	str	r3, [fp, #12]
   1e628:	str	r2, [fp, #8]
   1e62c:	str	r0, [sp, #4]
   1e630:	bhi	1e66c <__assert_fail@plt+0xd064>
   1e634:	mov	r0, #1
   1e638:	movw	r2, #1300	; 0x514
   1e63c:	tst	r2, r0, lsl r1
   1e640:	bne	1e72c <__assert_fail@plt+0xd124>
   1e644:	movw	r2, #2570	; 0xa0a
   1e648:	tst	r2, r0, lsl r1
   1e64c:	bne	1e694 <__assert_fail@plt+0xd08c>
   1e650:	cmp	r1, #0
   1e654:	bne	1e66c <__assert_fail@plt+0xd064>
   1e658:	ldr	r0, [sp, #4]
   1e65c:	add	r1, r0, #4
   1e660:	str	r1, [sp, #4]
   1e664:	mov	r1, #0
   1e668:	b	1e738 <__assert_fail@plt+0xd130>
   1e66c:	sub	r0, r1, #1024	; 0x400
   1e670:	cmp	r0, #10
   1e674:	bhi	1e72c <__assert_fail@plt+0xd124>
   1e678:	mov	r2, #1
   1e67c:	movw	r3, #645	; 0x285
   1e680:	tst	r3, r2, lsl r0
   1e684:	bne	1e72c <__assert_fail@plt+0xd124>
   1e688:	movw	r3, #1282	; 0x502
   1e68c:	tst	r3, r2, lsl r0
   1e690:	beq	1e6a0 <__assert_fail@plt+0xd098>
   1e694:	mov	r0, r5
   1e698:	bl	11554 <fcntl64@plt>
   1e69c:	b	1e744 <__assert_fail@plt+0xd13c>
   1e6a0:	cmp	r0, #6
   1e6a4:	bne	1e72c <__assert_fail@plt+0xd124>
   1e6a8:	ldr	r0, [sp, #4]
   1e6ac:	movw	r7, #5080	; 0x13d8
   1e6b0:	movt	r7, #3
   1e6b4:	add	r1, r0, #4
   1e6b8:	str	r1, [sp, #4]
   1e6bc:	ldr	r6, [r0]
   1e6c0:	ldr	r0, [r7]
   1e6c4:	cmp	r0, #0
   1e6c8:	blt	1e768 <__assert_fail@plt+0xd160>
   1e6cc:	mov	r0, r5
   1e6d0:	movw	r1, #1030	; 0x406
   1e6d4:	mov	r2, r6
   1e6d8:	bl	11554 <fcntl64@plt>
   1e6dc:	mov	r4, r0
   1e6e0:	cmn	r0, #1
   1e6e4:	bgt	1e75c <__assert_fail@plt+0xd154>
   1e6e8:	bl	114e8 <__errno_location@plt>
   1e6ec:	ldr	r0, [r0]
   1e6f0:	cmp	r0, #22
   1e6f4:	bne	1e75c <__assert_fail@plt+0xd154>
   1e6f8:	mov	r0, r5
   1e6fc:	mov	r1, #0
   1e700:	mov	r2, r6
   1e704:	bl	11554 <fcntl64@plt>
   1e708:	mov	r4, r0
   1e70c:	cmp	r0, #0
   1e710:	blt	1e748 <__assert_fail@plt+0xd140>
   1e714:	mvn	r0, #0
   1e718:	str	r0, [r7]
   1e71c:	mov	r0, #1
   1e720:	cmp	r0, #0
   1e724:	bne	1e794 <__assert_fail@plt+0xd18c>
   1e728:	b	1e748 <__assert_fail@plt+0xd140>
   1e72c:	ldr	r0, [sp, #4]
   1e730:	add	r2, r0, #4
   1e734:	str	r2, [sp, #4]
   1e738:	ldr	r2, [r0]
   1e73c:	mov	r0, r5
   1e740:	bl	11554 <fcntl64@plt>
   1e744:	mov	r4, r0
   1e748:	mov	r0, r4
   1e74c:	sub	sp, fp, #16
   1e750:	pop	{r4, r5, r6, r7, fp, lr}
   1e754:	add	sp, sp, #8
   1e758:	bx	lr
   1e75c:	mov	r0, #1
   1e760:	str	r0, [r7]
   1e764:	b	1e748 <__assert_fail@plt+0xd140>
   1e768:	mov	r0, r5
   1e76c:	mov	r1, #0
   1e770:	mov	r2, r6
   1e774:	bl	11554 <fcntl64@plt>
   1e778:	mov	r4, r0
   1e77c:	ldr	r0, [r7]
   1e780:	add	r0, r0, #1
   1e784:	clz	r0, r0
   1e788:	lsr	r0, r0, #5
   1e78c:	cmp	r0, #0
   1e790:	beq	1e748 <__assert_fail@plt+0xd140>
   1e794:	cmp	r4, #0
   1e798:	blt	1e748 <__assert_fail@plt+0xd140>
   1e79c:	mov	r0, r4
   1e7a0:	mov	r1, #1
   1e7a4:	bl	11554 <fcntl64@plt>
   1e7a8:	cmp	r0, #0
   1e7ac:	blt	1e7c8 <__assert_fail@plt+0xd1c0>
   1e7b0:	orr	r2, r0, #1
   1e7b4:	mov	r0, r4
   1e7b8:	mov	r1, #2
   1e7bc:	bl	11554 <fcntl64@plt>
   1e7c0:	cmn	r0, #1
   1e7c4:	bne	1e748 <__assert_fail@plt+0xd140>
   1e7c8:	bl	114e8 <__errno_location@plt>
   1e7cc:	ldr	r6, [r0]
   1e7d0:	mov	r5, r0
   1e7d4:	mov	r0, r4
   1e7d8:	bl	115fc <close@plt>
   1e7dc:	str	r6, [r5]
   1e7e0:	mvn	r4, #0
   1e7e4:	b	1e748 <__assert_fail@plt+0xd140>
   1e7e8:	push	{fp, lr}
   1e7ec:	mov	fp, sp
   1e7f0:	mov	r0, #14
   1e7f4:	bl	11590 <nl_langinfo@plt>
   1e7f8:	movw	r1, #65108	; 0xfe54
   1e7fc:	cmp	r0, #0
   1e800:	movt	r1, #1
   1e804:	movne	r1, r0
   1e808:	movw	r0, #2191	; 0x88f
   1e80c:	ldrb	r2, [r1]
   1e810:	movt	r0, #2
   1e814:	cmp	r2, #0
   1e818:	movne	r0, r1
   1e81c:	pop	{fp, pc}
   1e820:	push	{r4, r5, r6, r7, fp, lr}
   1e824:	add	fp, sp, #16
   1e828:	sub	sp, sp, #8
   1e82c:	add	r5, sp, #4
   1e830:	cmp	r0, #0
   1e834:	mov	r7, r2
   1e838:	mov	r4, r1
   1e83c:	movne	r5, r0
   1e840:	mov	r0, r5
   1e844:	bl	1141c <mbrtowc@plt>
   1e848:	mov	r6, r0
   1e84c:	cmp	r7, #0
   1e850:	beq	1e874 <__assert_fail@plt+0xd26c>
   1e854:	cmn	r6, #2
   1e858:	bcc	1e874 <__assert_fail@plt+0xd26c>
   1e85c:	mov	r0, #0
   1e860:	bl	1631c <__assert_fail@plt+0x4d14>
   1e864:	cmp	r0, #0
   1e868:	ldrbeq	r0, [r4]
   1e86c:	moveq	r6, #1
   1e870:	streq	r0, [r5]
   1e874:	mov	r0, r6
   1e878:	sub	sp, fp, #16
   1e87c:	pop	{r4, r5, r6, r7, fp, pc}
   1e880:	cmp	r2, #0
   1e884:	beq	1e8b4 <__assert_fail@plt+0xd2ac>
   1e888:	mvn	r3, #0
   1e88c:	udiv	r3, r3, r2
   1e890:	cmp	r3, r1
   1e894:	bcs	1e8b4 <__assert_fail@plt+0xd2ac>
   1e898:	push	{fp, lr}
   1e89c:	mov	fp, sp
   1e8a0:	bl	114e8 <__errno_location@plt>
   1e8a4:	mov	r1, #12
   1e8a8:	str	r1, [r0]
   1e8ac:	mov	r0, #0
   1e8b0:	pop	{fp, pc}
   1e8b4:	mul	r1, r2, r1
   1e8b8:	b	1e530 <__assert_fail@plt+0xcf28>
   1e8bc:	cmp	r3, #0
   1e8c0:	cmpeq	r2, #0
   1e8c4:	bne	1e8e8 <__assert_fail@plt+0xd2e0>
   1e8c8:	cmp	r1, #0
   1e8cc:	movlt	r1, #-2147483648	; 0x80000000
   1e8d0:	movlt	r0, #0
   1e8d4:	blt	1e8e4 <__assert_fail@plt+0xd2dc>
   1e8d8:	cmpeq	r0, #0
   1e8dc:	mvnne	r1, #-2147483648	; 0x80000000
   1e8e0:	mvnne	r0, #0
   1e8e4:	b	1e9cc <__assert_fail@plt+0xd3c4>
   1e8e8:	sub	sp, sp, #8
   1e8ec:	push	{sp, lr}
   1e8f0:	cmp	r1, #0
   1e8f4:	blt	1e914 <__assert_fail@plt+0xd30c>
   1e8f8:	cmp	r3, #0
   1e8fc:	blt	1e948 <__assert_fail@plt+0xd340>
   1e900:	bl	1e9dc <__assert_fail@plt+0xd3d4>
   1e904:	ldr	lr, [sp, #4]
   1e908:	add	sp, sp, #8
   1e90c:	pop	{r2, r3}
   1e910:	bx	lr
   1e914:	rsbs	r0, r0, #0
   1e918:	sbc	r1, r1, r1, lsl #1
   1e91c:	cmp	r3, #0
   1e920:	blt	1e96c <__assert_fail@plt+0xd364>
   1e924:	bl	1e9dc <__assert_fail@plt+0xd3d4>
   1e928:	ldr	lr, [sp, #4]
   1e92c:	add	sp, sp, #8
   1e930:	pop	{r2, r3}
   1e934:	rsbs	r0, r0, #0
   1e938:	sbc	r1, r1, r1, lsl #1
   1e93c:	rsbs	r2, r2, #0
   1e940:	sbc	r3, r3, r3, lsl #1
   1e944:	bx	lr
   1e948:	rsbs	r2, r2, #0
   1e94c:	sbc	r3, r3, r3, lsl #1
   1e950:	bl	1e9dc <__assert_fail@plt+0xd3d4>
   1e954:	ldr	lr, [sp, #4]
   1e958:	add	sp, sp, #8
   1e95c:	pop	{r2, r3}
   1e960:	rsbs	r0, r0, #0
   1e964:	sbc	r1, r1, r1, lsl #1
   1e968:	bx	lr
   1e96c:	rsbs	r2, r2, #0
   1e970:	sbc	r3, r3, r3, lsl #1
   1e974:	bl	1e9dc <__assert_fail@plt+0xd3d4>
   1e978:	ldr	lr, [sp, #4]
   1e97c:	add	sp, sp, #8
   1e980:	pop	{r2, r3}
   1e984:	rsbs	r2, r2, #0
   1e988:	sbc	r3, r3, r3, lsl #1
   1e98c:	bx	lr
   1e990:	cmp	r3, #0
   1e994:	cmpeq	r2, #0
   1e998:	bne	1e9b0 <__assert_fail@plt+0xd3a8>
   1e99c:	cmp	r1, #0
   1e9a0:	cmpeq	r0, #0
   1e9a4:	mvnne	r1, #0
   1e9a8:	mvnne	r0, #0
   1e9ac:	b	1e9cc <__assert_fail@plt+0xd3c4>
   1e9b0:	sub	sp, sp, #8
   1e9b4:	push	{sp, lr}
   1e9b8:	bl	1e9dc <__assert_fail@plt+0xd3d4>
   1e9bc:	ldr	lr, [sp, #4]
   1e9c0:	add	sp, sp, #8
   1e9c4:	pop	{r2, r3}
   1e9c8:	bx	lr
   1e9cc:	push	{r1, lr}
   1e9d0:	mov	r0, #8
   1e9d4:	bl	112d8 <raise@plt>
   1e9d8:	pop	{r1, pc}
   1e9dc:	cmp	r1, r3
   1e9e0:	cmpeq	r0, r2
   1e9e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e9e8:	mov	r4, r0
   1e9ec:	movcc	r0, #0
   1e9f0:	mov	r5, r1
   1e9f4:	ldr	lr, [sp, #36]	; 0x24
   1e9f8:	movcc	r1, r0
   1e9fc:	bcc	1eaf8 <__assert_fail@plt+0xd4f0>
   1ea00:	cmp	r3, #0
   1ea04:	clzeq	ip, r2
   1ea08:	clzne	ip, r3
   1ea0c:	addeq	ip, ip, #32
   1ea10:	cmp	r5, #0
   1ea14:	clzeq	r1, r4
   1ea18:	addeq	r1, r1, #32
   1ea1c:	clzne	r1, r5
   1ea20:	sub	ip, ip, r1
   1ea24:	sub	sl, ip, #32
   1ea28:	lsl	r9, r3, ip
   1ea2c:	rsb	fp, ip, #32
   1ea30:	orr	r9, r9, r2, lsl sl
   1ea34:	orr	r9, r9, r2, lsr fp
   1ea38:	lsl	r8, r2, ip
   1ea3c:	cmp	r5, r9
   1ea40:	cmpeq	r4, r8
   1ea44:	movcc	r0, #0
   1ea48:	movcc	r1, r0
   1ea4c:	bcc	1ea68 <__assert_fail@plt+0xd460>
   1ea50:	mov	r0, #1
   1ea54:	subs	r4, r4, r8
   1ea58:	lsl	r1, r0, sl
   1ea5c:	orr	r1, r1, r0, lsr fp
   1ea60:	lsl	r0, r0, ip
   1ea64:	sbc	r5, r5, r9
   1ea68:	cmp	ip, #0
   1ea6c:	beq	1eaf8 <__assert_fail@plt+0xd4f0>
   1ea70:	lsr	r6, r8, #1
   1ea74:	orr	r6, r6, r9, lsl #31
   1ea78:	lsr	r7, r9, #1
   1ea7c:	mov	r2, ip
   1ea80:	b	1eaa4 <__assert_fail@plt+0xd49c>
   1ea84:	subs	r3, r4, r6
   1ea88:	sbc	r8, r5, r7
   1ea8c:	adds	r3, r3, r3
   1ea90:	adc	r8, r8, r8
   1ea94:	adds	r4, r3, #1
   1ea98:	adc	r5, r8, #0
   1ea9c:	subs	r2, r2, #1
   1eaa0:	beq	1eac0 <__assert_fail@plt+0xd4b8>
   1eaa4:	cmp	r5, r7
   1eaa8:	cmpeq	r4, r6
   1eaac:	bcs	1ea84 <__assert_fail@plt+0xd47c>
   1eab0:	adds	r4, r4, r4
   1eab4:	adc	r5, r5, r5
   1eab8:	subs	r2, r2, #1
   1eabc:	bne	1eaa4 <__assert_fail@plt+0xd49c>
   1eac0:	lsr	r3, r4, ip
   1eac4:	orr	r3, r3, r5, lsl fp
   1eac8:	lsr	r2, r5, ip
   1eacc:	orr	r3, r3, r5, lsr sl
   1ead0:	adds	r0, r0, r4
   1ead4:	mov	r4, r3
   1ead8:	lsl	r3, r2, ip
   1eadc:	orr	r3, r3, r4, lsl sl
   1eae0:	lsl	ip, r4, ip
   1eae4:	orr	r3, r3, r4, lsr fp
   1eae8:	adc	r1, r1, r5
   1eaec:	subs	r0, r0, ip
   1eaf0:	mov	r5, r2
   1eaf4:	sbc	r1, r1, r3
   1eaf8:	cmp	lr, #0
   1eafc:	strdne	r4, [lr]
   1eb00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb04:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1eb08:	mov	r7, r0
   1eb0c:	ldr	r6, [pc, #72]	; 1eb5c <__assert_fail@plt+0xd554>
   1eb10:	ldr	r5, [pc, #72]	; 1eb60 <__assert_fail@plt+0xd558>
   1eb14:	add	r6, pc, r6
   1eb18:	add	r5, pc, r5
   1eb1c:	sub	r6, r6, r5
   1eb20:	mov	r8, r1
   1eb24:	mov	r9, r2
   1eb28:	bl	11294 <fdopen@plt-0x20>
   1eb2c:	asrs	r6, r6, #2
   1eb30:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1eb34:	mov	r4, #0
   1eb38:	add	r4, r4, #1
   1eb3c:	ldr	r3, [r5], #4
   1eb40:	mov	r2, r9
   1eb44:	mov	r1, r8
   1eb48:	mov	r0, r7
   1eb4c:	blx	r3
   1eb50:	cmp	r6, r4
   1eb54:	bne	1eb38 <__assert_fail@plt+0xd530>
   1eb58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1eb5c:	strdeq	r2, [r1], -r0
   1eb60:	andeq	r2, r1, r8, ror #7
   1eb64:	bx	lr
   1eb68:	ldr	r3, [pc, #12]	; 1eb7c <__assert_fail@plt+0xd574>
   1eb6c:	mov	r1, #0
   1eb70:	add	r3, pc, r3
   1eb74:	ldr	r2, [r3]
   1eb78:	b	11500 <__cxa_atexit@plt>
   1eb7c:			; <UNDEFINED> instruction: 0x000125bc

Disassembly of section .fini:

0001eb80 <.fini>:
   1eb80:	push	{r3, lr}
   1eb84:	pop	{r3, pc}
