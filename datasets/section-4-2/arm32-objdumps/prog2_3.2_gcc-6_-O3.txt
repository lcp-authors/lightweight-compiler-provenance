
../repos/prog2/3.2:     file format elf32-littlearm


Disassembly of section .init:

00010690 <.init>:
   10690:	push	{r3, lr}
   10694:	bl	10a28 <_start@@Base+0x3c>
   10698:	pop	{r3, pc}

Disassembly of section .plt:

0001069c <printf@plt-0x14>:
   1069c:	push	{lr}		; (str lr, [sp, #-4]!)
   106a0:	ldr	lr, [pc, #4]	; 106ac <printf@plt-0x4>
   106a4:	add	lr, pc, lr
   106a8:	ldr	pc, [lr, #8]!
   106ac:	andeq	r1, r1, r4, asr r9

000106b0 <printf@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #69632	; 0x11000
   106b8:	ldr	pc, [ip, #2388]!	; 0x954

000106bc <puts@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #69632	; 0x11000
   106c4:	ldr	pc, [ip, #2380]!	; 0x94c

000106c8 <__libc_start_main@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #69632	; 0x11000
   106d0:	ldr	pc, [ip, #2372]!	; 0x944

000106d4 <__gmon_start__@plt>:
   106d4:	add	ip, pc, #0, 12
   106d8:	add	ip, ip, #69632	; 0x11000
   106dc:	ldr	pc, [ip, #2364]!	; 0x93c

000106e0 <strlen@plt>:
   106e0:	add	ip, pc, #0, 12
   106e4:	add	ip, ip, #69632	; 0x11000
   106e8:	ldr	pc, [ip, #2356]!	; 0x934

000106ec <abort@plt>:
   106ec:	add	ip, pc, #0, 12
   106f0:	add	ip, ip, #69632	; 0x11000
   106f4:	ldr	pc, [ip, #2348]!	; 0x92c

Disassembly of section .text:

000106f8 <main@@Base>:
   106f8:	push	{r4, r5, r6, r7, r8, lr}
   106fc:	sub	sp, sp, #72	; 0x48
   10700:	ldr	r4, [pc, #680]	; 109b0 <main@@Base+0x2b8>
   10704:	add	ip, sp, #24
   10708:	mov	r5, ip
   1070c:	ldm	r4!, {r0, r1, r2, r3}
   10710:	add	r7, sp, #48	; 0x30
   10714:	mov	lr, r7
   10718:	add	r6, sp, #44	; 0x2c
   1071c:	stmia	ip!, {r0, r1, r2, r3}
   10720:	add	r8, sp, #68	; 0x44
   10724:	ldm	r4, {r0, r1}
   10728:	ldr	r4, [pc, #644]	; 109b4 <main@@Base+0x2bc>
   1072c:	stm	ip, {r0, r1}
   10730:	ldm	r5!, {r0, r1, r2, r3}
   10734:	mov	r5, r6
   10738:	stmia	lr!, {r0, r1, r2, r3}
   1073c:	ldm	ip, {r0, r1}
   10740:	stm	lr, {r0, r1}
   10744:	ldr	r0, [pc, #620]	; 109b8 <main@@Base+0x2c0>
   10748:	bl	106bc <puts@plt>
   1074c:	ldr	r0, [pc, #616]	; 109bc <main@@Base+0x2c4>
   10750:	bl	106b0 <printf@plt>
   10754:	ldr	r1, [r5, #4]!
   10758:	mov	r0, r4
   1075c:	bl	106b0 <printf@plt>
   10760:	cmp	r5, r8
   10764:	bne	10754 <main@@Base+0x5c>
   10768:	ldr	r0, [pc, #592]	; 109c0 <main@@Base+0x2c8>
   1076c:	bl	106bc <puts@plt>
   10770:	ldr	r3, [pc, #588]	; 109c4 <main@@Base+0x2cc>
   10774:	mov	r2, #4
   10778:	mov	r1, #6
   1077c:	mov	r0, r7
   10780:	bl	10cb8 <sort@@Base>
   10784:	ldr	r0, [pc, #572]	; 109c8 <main@@Base+0x2d0>
   10788:	bl	106b0 <printf@plt>
   1078c:	ldr	r8, [pc, #544]	; 109b4 <main@@Base+0x2bc>
   10790:	mov	r4, r6
   10794:	ldr	r1, [r4, #4]!
   10798:	mov	r0, r8
   1079c:	bl	106b0 <printf@plt>
   107a0:	cmp	r4, r5
   107a4:	bne	10794 <main@@Base+0x9c>
   107a8:	ldr	r0, [pc, #528]	; 109c0 <main@@Base+0x2c8>
   107ac:	bl	106bc <puts@plt>
   107b0:	add	lr, sp, #24
   107b4:	mov	ip, r7
   107b8:	ldm	lr!, {r0, r1, r2, r3}
   107bc:	stmia	ip!, {r0, r1, r2, r3}
   107c0:	ldm	lr, {r0, r1}
   107c4:	stm	ip, {r0, r1}
   107c8:	ldr	r0, [pc, #508]	; 109cc <main@@Base+0x2d4>
   107cc:	bl	106bc <puts@plt>
   107d0:	ldr	r3, [sp, #48]	; 0x30
   107d4:	mov	r1, #4
   107d8:	cmp	r3, r1
   107dc:	str	r1, [sp, #12]
   107e0:	moveq	r2, #0
   107e4:	bne	10948 <main@@Base+0x250>
   107e8:	mov	r1, #4
   107ec:	ldr	r0, [pc, #476]	; 109d0 <main@@Base+0x2d8>
   107f0:	bl	106b0 <printf@plt>
   107f4:	add	lr, sp, #24
   107f8:	mov	ip, r7
   107fc:	ldm	lr!, {r0, r1, r2, r3}
   10800:	ldr	r5, [pc, #444]	; 109c4 <main@@Base+0x2cc>
   10804:	stmia	ip!, {r0, r1, r2, r3}
   10808:	mov	r3, r5
   1080c:	ldm	lr, {r0, r1}
   10810:	mov	r2, #4
   10814:	stm	ip, {r0, r1}
   10818:	mov	r1, #6
   1081c:	mov	r0, r7
   10820:	bl	10cb8 <sort@@Base>
   10824:	ldr	r0, [pc, #424]	; 109d4 <main@@Base+0x2dc>
   10828:	bl	106bc <puts@plt>
   1082c:	str	r5, [sp]
   10830:	mov	r3, #4
   10834:	mov	r2, #6
   10838:	mov	r1, r7
   1083c:	add	r0, sp, #12
   10840:	bl	10f60 <binary_search@@Base>
   10844:	cmp	r0, #0
   10848:	beq	109a0 <main@@Base+0x2a8>
   1084c:	sub	r2, r0, r7
   10850:	ldr	r1, [sp, #12]
   10854:	asr	r2, r2, #2
   10858:	ldr	r0, [pc, #368]	; 109d0 <main@@Base+0x2d8>
   1085c:	bl	106b0 <printf@plt>
   10860:	add	lr, sp, #24
   10864:	mov	ip, r7
   10868:	ldm	lr!, {r0, r1, r2, r3}
   1086c:	mov	r5, r6
   10870:	ldr	r8, [pc, #316]	; 109b4 <main@@Base+0x2bc>
   10874:	stmia	ip!, {r0, r1, r2, r3}
   10878:	ldm	lr, {r0, r1}
   1087c:	stm	ip, {r0, r1}
   10880:	ldr	r0, [pc, #336]	; 109d8 <main@@Base+0x2e0>
   10884:	bl	106bc <puts@plt>
   10888:	ldr	r0, [pc, #300]	; 109bc <main@@Base+0x2c4>
   1088c:	bl	106b0 <printf@plt>
   10890:	ldr	r1, [r5, #4]!
   10894:	mov	r0, r8
   10898:	bl	106b0 <printf@plt>
   1089c:	cmp	r5, r4
   108a0:	bne	10890 <main@@Base+0x198>
   108a4:	ldr	r0, [pc, #276]	; 109c0 <main@@Base+0x2c8>
   108a8:	bl	106bc <puts@plt>
   108ac:	mov	r0, r7
   108b0:	ldr	r3, [pc, #268]	; 109c4 <main@@Base+0x2cc>
   108b4:	mov	r2, #4
   108b8:	mov	r1, #6
   108bc:	bl	10fe0 <insertion_sort@@Base>
   108c0:	ldr	r0, [pc, #256]	; 109c8 <main@@Base+0x2d0>
   108c4:	bl	106b0 <printf@plt>
   108c8:	ldr	r5, [pc, #228]	; 109b4 <main@@Base+0x2bc>
   108cc:	ldr	r1, [r6, #4]!
   108d0:	mov	r0, r5
   108d4:	bl	106b0 <printf@plt>
   108d8:	cmp	r6, r4
   108dc:	bne	108cc <main@@Base+0x1d4>
   108e0:	ldr	r0, [pc, #216]	; 109c0 <main@@Base+0x2c8>
   108e4:	bl	106bc <puts@plt>
   108e8:	ldr	r0, [pc, #236]	; 109dc <main@@Base+0x2e4>
   108ec:	bl	106bc <puts@plt>
   108f0:	ldr	r3, [pc, #232]	; 109e0 <main@@Base+0x2e8>
   108f4:	ldm	r3, {r0, r1}
   108f8:	str	r0, [sp, #16]
   108fc:	ldr	r0, [pc, #184]	; 109bc <main@@Base+0x2c4>
   10900:	strb	r1, [sp, #20]
   10904:	bl	106b0 <printf@plt>
   10908:	add	r0, sp, #16
   1090c:	bl	106bc <puts@plt>
   10910:	add	r0, sp, #16
   10914:	bl	106e0 <strlen@plt>
   10918:	ldr	r3, [pc, #196]	; 109e4 <main@@Base+0x2ec>
   1091c:	mov	r2, #1
   10920:	mov	r1, r0
   10924:	add	r0, sp, #16
   10928:	bl	10cb8 <sort@@Base>
   1092c:	ldr	r0, [pc, #148]	; 109c8 <main@@Base+0x2d0>
   10930:	bl	106b0 <printf@plt>
   10934:	add	r0, sp, #16
   10938:	bl	106bc <puts@plt>
   1093c:	mov	r0, #0
   10940:	add	sp, sp, #72	; 0x48
   10944:	pop	{r4, r5, r6, r7, r8, pc}
   10948:	ldr	r3, [sp, #54]	; 0x36
   1094c:	cmp	r3, r1
   10950:	moveq	r2, #1
   10954:	beq	107e8 <main@@Base+0xf0>
   10958:	ldr	r3, [sp, #60]	; 0x3c
   1095c:	cmp	r3, r1
   10960:	moveq	r2, #2
   10964:	beq	107e8 <main@@Base+0xf0>
   10968:	ldr	r3, [sp, #66]	; 0x42
   1096c:	cmp	r3, r1
   10970:	moveq	r2, #3
   10974:	beq	107e8 <main@@Base+0xf0>
   10978:	ldr	r2, [sp, #72]	; 0x48
   1097c:	cmp	r2, r1
   10980:	beq	107e8 <main@@Base+0xf0>
   10984:	ldr	r3, [sp, #78]	; 0x4e
   10988:	cmp	r3, r1
   1098c:	moveq	r2, #5
   10990:	beq	107e8 <main@@Base+0xf0>
   10994:	ldr	r0, [pc, #76]	; 109e8 <main@@Base+0x2f0>
   10998:	bl	106b0 <printf@plt>
   1099c:	b	107f4 <main@@Base+0xfc>
   109a0:	ldr	r1, [sp, #12]
   109a4:	ldr	r0, [pc, #60]	; 109e8 <main@@Base+0x2f0>
   109a8:	bl	106b0 <printf@plt>
   109ac:	b	10860 <main@@Base+0x168>
   109b0:	andeq	r1, r1, r8, ror #5
   109b4:	andeq	r1, r1, r8, lsl r3
   109b8:	andeq	r1, r1, r0, lsl #6
   109bc:	andeq	r1, r1, r0, lsl r3
   109c0:	andeq	r1, r1, r8, ror #6
   109c4:	andeq	r0, r1, r4, lsl fp
   109c8:	andeq	r1, r1, ip, lsl r3
   109cc:	andeq	r1, r1, r4, lsr #6
   109d0:	andeq	r1, r1, ip, lsr r3
   109d4:	andeq	r1, r1, r0, lsr r3
   109d8:	muleq	r1, r0, r3
   109dc:	muleq	r1, ip, r3
   109e0:	andeq	r1, r1, r8, lsr #7
   109e4:	andeq	r0, r1, r8, lsr fp
   109e8:	andeq	r1, r1, ip, ror #6

000109ec <_start@@Base>:
   109ec:	mov	fp, #0
   109f0:	mov	lr, #0
   109f4:	pop	{r1}		; (ldr r1, [sp], #4)
   109f8:	mov	r2, sp
   109fc:	push	{r2}		; (str r2, [sp, #-4]!)
   10a00:	push	{r0}		; (str r0, [sp, #-4]!)
   10a04:	ldr	ip, [pc, #16]	; 10a1c <_start@@Base+0x30>
   10a08:	push	{ip}		; (str ip, [sp, #-4]!)
   10a0c:	ldr	r0, [pc, #12]	; 10a20 <_start@@Base+0x34>
   10a10:	ldr	r3, [pc, #12]	; 10a24 <_start@@Base+0x38>
   10a14:	bl	106c8 <__libc_start_main@plt>
   10a18:	bl	106ec <abort@plt>
   10a1c:	ldrdeq	r1, [r1], -r8
   10a20:	strdeq	r0, [r1], -r8
   10a24:	andeq	r1, r1, r8, ror r2
   10a28:	ldr	r3, [pc, #20]	; 10a44 <_start@@Base+0x58>
   10a2c:	ldr	r2, [pc, #20]	; 10a48 <_start@@Base+0x5c>
   10a30:	add	r3, pc, r3
   10a34:	ldr	r2, [r3, r2]
   10a38:	cmp	r2, #0
   10a3c:	bxeq	lr
   10a40:	b	106d4 <__gmon_start__@plt>
   10a44:	andeq	r1, r1, r8, asr #11
   10a48:	andeq	r0, r0, r4, lsr #32
   10a4c:	ldr	r3, [pc, #28]	; 10a70 <_start@@Base+0x84>
   10a50:	ldr	r0, [pc, #28]	; 10a74 <_start@@Base+0x88>
   10a54:	sub	r3, r3, r0
   10a58:	cmp	r3, #6
   10a5c:	bxls	lr
   10a60:	ldr	r3, [pc, #16]	; 10a78 <_start@@Base+0x8c>
   10a64:	cmp	r3, #0
   10a68:	bxeq	lr
   10a6c:	bx	r3
   10a70:	andeq	r2, r2, r3, lsr r0
   10a74:	andeq	r2, r2, r0, lsr r0
   10a78:	andeq	r0, r0, r0
   10a7c:	ldr	r1, [pc, #36]	; 10aa8 <_start@@Base+0xbc>
   10a80:	ldr	r0, [pc, #36]	; 10aac <_start@@Base+0xc0>
   10a84:	sub	r1, r1, r0
   10a88:	asr	r1, r1, #2
   10a8c:	add	r1, r1, r1, lsr #31
   10a90:	asrs	r1, r1, #1
   10a94:	bxeq	lr
   10a98:	ldr	r3, [pc, #16]	; 10ab0 <_start@@Base+0xc4>
   10a9c:	cmp	r3, #0
   10aa0:	bxeq	lr
   10aa4:	bx	r3
   10aa8:	andeq	r2, r2, r0, lsr r0
   10aac:	andeq	r2, r2, r0, lsr r0
   10ab0:	andeq	r0, r0, r0
   10ab4:	push	{r4, lr}
   10ab8:	ldr	r4, [pc, #24]	; 10ad8 <_start@@Base+0xec>
   10abc:	ldrb	r3, [r4]
   10ac0:	cmp	r3, #0
   10ac4:	popne	{r4, pc}
   10ac8:	bl	10a4c <_start@@Base+0x60>
   10acc:	mov	r3, #1
   10ad0:	strb	r3, [r4]
   10ad4:	pop	{r4, pc}
   10ad8:	andeq	r2, r2, r0, lsr r0
   10adc:	ldr	r0, [pc, #40]	; 10b0c <_start@@Base+0x120>
   10ae0:	ldr	r3, [r0]
   10ae4:	cmp	r3, #0
   10ae8:	bne	10af0 <_start@@Base+0x104>
   10aec:	b	10a7c <_start@@Base+0x90>
   10af0:	ldr	r3, [pc, #24]	; 10b10 <_start@@Base+0x124>
   10af4:	cmp	r3, #0
   10af8:	beq	10aec <_start@@Base+0x100>
   10afc:	push	{r4, lr}
   10b00:	blx	r3
   10b04:	pop	{r4, lr}
   10b08:	b	10a7c <_start@@Base+0x90>
   10b0c:	andeq	r1, r2, r4, lsl pc
   10b10:	andeq	r0, r0, r0

00010b14 <comp_int_asc@@Base>:
   10b14:	ldr	r2, [r0]
   10b18:	ldr	r3, [r1]
   10b1c:	cmp	r2, r3
   10b20:	blt	10b30 <comp_int_asc@@Base+0x1c>
   10b24:	movgt	r0, #1
   10b28:	movle	r0, #0
   10b2c:	bx	lr
   10b30:	mvn	r0, #0
   10b34:	bx	lr

00010b38 <comp_char_desc@@Base>:
   10b38:	ldrb	r2, [r0]
   10b3c:	ldrb	r3, [r1]
   10b40:	cmp	r2, r3
   10b44:	bcc	10b54 <comp_char_desc@@Base+0x1c>
   10b48:	mvnhi	r0, #0
   10b4c:	movls	r0, #0
   10b50:	bx	lr
   10b54:	mov	r0, #1
   10b58:	bx	lr

00010b5c <get_elem@@Base>:
   10b5c:	mla	r0, r2, r1, r0
   10b60:	bx	lr

00010b64 <swap@@Base>:
   10b64:	cmp	r2, #0
   10b68:	bxle	lr
   10b6c:	add	r3, r0, #4
   10b70:	add	ip, r1, #4
   10b74:	cmp	r0, ip
   10b78:	cmpcc	r1, r3
   10b7c:	movcs	r3, #1
   10b80:	movcc	r3, #0
   10b84:	cmp	r2, #7
   10b88:	movls	r3, #0
   10b8c:	andhi	r3, r3, #1
   10b90:	cmp	r3, #0
   10b94:	beq	10c90 <swap@@Base+0x12c>
   10b98:	rsb	r3, r0, #0
   10b9c:	ands	r3, r3, #3
   10ba0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ba4:	beq	10c88 <swap@@Base+0x124>
   10ba8:	ldrb	ip, [r0]
   10bac:	ldrb	lr, [r1]
   10bb0:	cmp	r3, #1
   10bb4:	strb	lr, [r0]
   10bb8:	strb	ip, [r1]
   10bbc:	beq	10c88 <swap@@Base+0x124>
   10bc0:	ldrb	ip, [r0, #1]
   10bc4:	ldrb	lr, [r1, #1]
   10bc8:	cmp	r3, #3
   10bcc:	moveq	r8, r3
   10bd0:	strb	lr, [r0, #1]
   10bd4:	strb	ip, [r1, #1]
   10bd8:	ldrbeq	lr, [r1, #2]
   10bdc:	ldrbeq	ip, [r0, #2]
   10be0:	movne	r8, #2
   10be4:	strbeq	lr, [r0, #2]
   10be8:	strbeq	ip, [r1, #2]
   10bec:	sub	r7, r2, r3
   10bf0:	sub	ip, r7, #4
   10bf4:	add	r5, r0, r3
   10bf8:	lsr	ip, ip, #2
   10bfc:	add	r4, ip, #1
   10c00:	add	r3, r1, r3
   10c04:	lsl	ip, r4, #2
   10c08:	sub	r9, r5, #4
   10c0c:	mov	r6, r3
   10c10:	mov	lr, #0
   10c14:	ldr	sl, [r9, #4]!
   10c18:	ldr	fp, [r3], #4
   10c1c:	add	lr, lr, #1
   10c20:	cmp	r4, lr
   10c24:	str	fp, [r5], #4
   10c28:	str	sl, [r6], #4
   10c2c:	bhi	10c14 <swap@@Base+0xb0>
   10c30:	cmp	r7, ip
   10c34:	add	r3, ip, r8
   10c38:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c3c:	ldrb	lr, [r0, r3]
   10c40:	ldrb	r4, [r1, r3]
   10c44:	add	ip, r3, #1
   10c48:	cmp	r2, ip
   10c4c:	strb	r4, [r0, r3]
   10c50:	strb	lr, [r1, r3]
   10c54:	pople	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c58:	ldrb	lr, [r0, ip]
   10c5c:	ldrb	r4, [r1, ip]
   10c60:	add	r3, r3, #2
   10c64:	cmp	r2, r3
   10c68:	strb	r4, [r0, ip]
   10c6c:	strb	lr, [r1, ip]
   10c70:	ble	10cb4 <swap@@Base+0x150>
   10c74:	ldrb	r2, [r0, r3]
   10c78:	ldrb	ip, [r1, r3]
   10c7c:	strb	ip, [r0, r3]
   10c80:	strb	r2, [r1, r3]
   10c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c88:	mov	r8, r3
   10c8c:	b	10bec <swap@@Base+0x88>
   10c90:	add	r2, r0, r2
   10c94:	sub	r1, r1, #1
   10c98:	ldrb	ip, [r1, #1]
   10c9c:	ldrb	r3, [r0]
   10ca0:	strb	ip, [r0], #1
   10ca4:	cmp	r0, r2
   10ca8:	strb	r3, [r1, #1]!
   10cac:	bne	10c98 <swap@@Base+0x134>
   10cb0:	bx	lr
   10cb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010cb8 <sort@@Base>:
   10cb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10cbc:	subs	r9, r1, #0
   10cc0:	sub	sp, sp, #36	; 0x24
   10cc4:	ble	10ef4 <sort@@Base+0x23c>
   10cc8:	cmp	r2, #1
   10ccc:	mov	r5, r2
   10cd0:	mov	fp, r3
   10cd4:	movlt	r2, #1
   10cd8:	rsb	r3, r0, #1
   10cdc:	str	r2, [sp, #4]
   10ce0:	str	r3, [sp, #8]
   10ce4:	mov	r2, #0
   10ce8:	add	r3, r5, #1
   10cec:	str	r3, [sp, #12]
   10cf0:	sub	sl, r0, #1
   10cf4:	mov	r3, r2
   10cf8:	str	r0, [sp, #28]
   10cfc:	str	r2, [sp]
   10d00:	add	r3, r3, #1
   10d04:	cmp	r9, r3
   10d08:	str	r3, [sp]
   10d0c:	add	r6, sl, #1
   10d10:	ble	10eec <sort@@Base+0x234>
   10d14:	ldr	r2, [sp, #12]
   10d18:	mov	r4, r6
   10d1c:	add	r7, r2, sl
   10d20:	mov	r8, r3
   10d24:	mov	r1, r4
   10d28:	mov	r0, r7
   10d2c:	blx	fp
   10d30:	add	r8, r8, #1
   10d34:	cmp	r0, #0
   10d38:	movlt	r4, r7
   10d3c:	cmp	r9, r8
   10d40:	add	r7, r7, r5
   10d44:	bne	10d24 <sort@@Base+0x6c>
   10d48:	cmp	r5, #0
   10d4c:	ble	10eb0 <sort@@Base+0x1f8>
   10d50:	add	r3, r4, #4
   10d54:	add	r2, sl, #5
   10d58:	cmp	r4, r2
   10d5c:	cmpcc	r6, r3
   10d60:	ldr	r2, [sp, #4]
   10d64:	movcs	r3, #1
   10d68:	movcc	r3, #0
   10d6c:	cmp	r2, #7
   10d70:	movls	r3, #0
   10d74:	andhi	r3, r3, #1
   10d78:	ldr	r2, [sp, #8]
   10d7c:	cmp	r3, #0
   10d80:	add	r1, r2, sl
   10d84:	beq	10ec4 <sort@@Base+0x20c>
   10d88:	rsb	r3, r4, #0
   10d8c:	ands	r3, r3, #3
   10d90:	beq	10ebc <sort@@Base+0x204>
   10d94:	ldrb	r2, [r4]
   10d98:	ldrb	r0, [sl, #1]
   10d9c:	cmp	r3, #1
   10da0:	strb	r0, [r4]
   10da4:	strb	r2, [sl, #1]
   10da8:	beq	10ebc <sort@@Base+0x204>
   10dac:	ldrb	r2, [r4, #1]
   10db0:	ldrb	r0, [sl, #2]
   10db4:	cmp	r3, #3
   10db8:	strb	r0, [r4, #1]
   10dbc:	strb	r2, [sl, #2]
   10dc0:	ldrbeq	ip, [sl, #3]
   10dc4:	ldrbeq	r0, [r4, #2]
   10dc8:	moveq	r2, r3
   10dcc:	movne	r2, #2
   10dd0:	strbeq	ip, [r4, #2]
   10dd4:	strbeq	r0, [sl, #3]
   10dd8:	ldr	r0, [sp, #4]
   10ddc:	cmp	r5, #0
   10de0:	sub	r0, r0, r3
   10de4:	sub	ip, r0, #4
   10de8:	str	r0, [sp, #16]
   10dec:	lsr	ip, ip, #2
   10df0:	subgt	r0, r5, #1
   10df4:	movle	r0, #0
   10df8:	add	r7, ip, #1
   10dfc:	sub	r0, r0, r3
   10e00:	cmp	r0, #2
   10e04:	lsl	r0, r7, #2
   10e08:	str	r0, [sp, #20]
   10e0c:	bls	10e60 <sort@@Base+0x1a8>
   10e10:	ldr	r0, [sp, #28]
   10e14:	add	r1, r3, r1
   10e18:	add	r1, r0, r1
   10e1c:	add	r3, r4, r3
   10e20:	mov	lr, r1
   10e24:	sub	ip, r3, #4
   10e28:	mov	r0, #0
   10e2c:	str	r4, [sp, #24]
   10e30:	ldr	r4, [ip, #4]!
   10e34:	ldr	r8, [r1], #4
   10e38:	add	r0, r0, #1
   10e3c:	cmp	r7, r0
   10e40:	str	r8, [r3], #4
   10e44:	str	r4, [lr], #4
   10e48:	bhi	10e30 <sort@@Base+0x178>
   10e4c:	add	r1, sp, #16
   10e50:	ldm	r1, {r1, r3, r4}
   10e54:	cmp	r1, r3
   10e58:	add	r2, r2, r3
   10e5c:	beq	10ea4 <sort@@Base+0x1ec>
   10e60:	ldrb	r1, [r4, r2]
   10e64:	ldrb	r0, [r6, r2]
   10e68:	add	r3, r2, #1
   10e6c:	cmp	r5, r3
   10e70:	strb	r0, [r4, r2]
   10e74:	strb	r1, [r6, r2]
   10e78:	ble	10ea4 <sort@@Base+0x1ec>
   10e7c:	ldrb	r1, [r4, r3]
   10e80:	ldrb	r0, [r6, r3]
   10e84:	add	r2, r2, #2
   10e88:	cmp	r5, r2
   10e8c:	strb	r0, [r4, r3]
   10e90:	strb	r1, [r6, r3]
   10e94:	ldrbgt	r3, [r4, r2]
   10e98:	ldrbgt	r1, [r6, r2]
   10e9c:	strbgt	r1, [r4, r2]
   10ea0:	strbgt	r3, [r6, r2]
   10ea4:	ldr	r3, [sp]
   10ea8:	cmp	r9, r3
   10eac:	ble	10ef4 <sort@@Base+0x23c>
   10eb0:	add	sl, sl, r5
   10eb4:	ldr	r3, [sp]
   10eb8:	b	10d00 <sort@@Base+0x48>
   10ebc:	mov	r2, r3
   10ec0:	b	10dd8 <sort@@Base+0x120>
   10ec4:	sub	r4, r4, #1
   10ec8:	mov	r2, sl
   10ecc:	ldrb	r1, [r4, #1]
   10ed0:	ldrb	r0, [r2, #1]
   10ed4:	add	r3, r3, #1
   10ed8:	cmp	r3, r5
   10edc:	strb	r0, [r4, #1]!
   10ee0:	strb	r1, [r2, #1]!
   10ee4:	blt	10ecc <sort@@Base+0x214>
   10ee8:	b	10ea4 <sort@@Base+0x1ec>
   10eec:	cmp	r5, #0
   10ef0:	bgt	10efc <sort@@Base+0x244>
   10ef4:	add	sp, sp, #36	; 0x24
   10ef8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10efc:	mov	r4, r6
   10f00:	b	10d50 <sort@@Base+0x98>

00010f04 <linear_search@@Base>:
   10f04:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10f08:	subs	r6, r2, #0
   10f0c:	ldr	r8, [sp, #32]
   10f10:	ble	10f58 <linear_search@@Base+0x54>
   10f14:	mov	r9, r3
   10f18:	mov	sl, r1
   10f1c:	mov	r7, r0
   10f20:	mov	r4, r1
   10f24:	mov	r5, #0
   10f28:	b	10f38 <linear_search@@Base+0x34>
   10f2c:	add	r5, r5, #1
   10f30:	cmp	r6, r5
   10f34:	beq	10f58 <linear_search@@Base+0x54>
   10f38:	mov	r0, r4
   10f3c:	mov	r1, r7
   10f40:	blx	r8
   10f44:	add	r4, r4, r6
   10f48:	cmp	r0, #0
   10f4c:	bne	10f2c <linear_search@@Base+0x28>
   10f50:	mla	r0, r5, r9, sl
   10f54:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10f58:	mov	r0, #0
   10f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00010f60 <binary_search@@Base>:
   10f60:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f64:	subs	r6, r2, #1
   10f68:	ldr	r8, [sp, #40]	; 0x28
   10f6c:	bmi	10fc4 <binary_search@@Base+0x64>
   10f70:	mov	sl, r3
   10f74:	mov	r9, r1
   10f78:	mov	r7, r0
   10f7c:	mov	r5, #0
   10f80:	add	r2, r5, r6
   10f84:	mov	r0, r7
   10f88:	add	r2, r2, r2, lsr #31
   10f8c:	asr	r4, r2, #1
   10f90:	mla	fp, sl, r4, r9
   10f94:	mov	r1, fp
   10f98:	blx	r8
   10f9c:	mov	r1, fp
   10fa0:	cmp	r0, #0
   10fa4:	mov	r0, r7
   10fa8:	bne	10fc8 <binary_search@@Base+0x68>
   10fac:	blx	r8
   10fb0:	cmn	r0, #1
   10fb4:	beq	10fd0 <binary_search@@Base+0x70>
   10fb8:	add	r5, r4, #1
   10fbc:	cmp	r5, r6
   10fc0:	ble	10f80 <binary_search@@Base+0x20>
   10fc4:	mov	fp, #0
   10fc8:	mov	r0, fp
   10fcc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10fd0:	sub	r6, r4, #1
   10fd4:	cmp	r6, r5
   10fd8:	bge	10f80 <binary_search@@Base+0x20>
   10fdc:	b	10fc4 <binary_search@@Base+0x64>

00010fe0 <insertion_sort@@Base>:
   10fe0:	cmp	r1, #1
   10fe4:	ble	11274 <insertion_sort@@Base+0x294>
   10fe8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fec:	sub	sp, sp, #52	; 0x34
   10ff0:	mov	fp, r0
   10ff4:	str	r3, [sp, #8]
   10ff8:	add	r3, r0, r2
   10ffc:	mov	sl, r2
   11000:	str	r3, [sp, #32]
   11004:	mov	r2, #1
   11008:	rsb	r3, r3, #0
   1100c:	str	r1, [sp, #44]	; 0x2c
   11010:	str	r2, [sp, #28]
   11014:	str	r3, [sp, #40]	; 0x28
   11018:	str	sl, [sp, #36]	; 0x24
   1101c:	ldr	r3, [sp, #32]
   11020:	ldr	r2, [sp, #36]	; 0x24
   11024:	ldr	r8, [sp, #40]	; 0x28
   11028:	sub	r5, r2, sl
   1102c:	sub	r6, r3, sl
   11030:	mov	r4, r3
   11034:	mov	r3, r8
   11038:	mov	r7, r2
   1103c:	mov	r8, r5
   11040:	ldr	r9, [sp, #28]
   11044:	mov	r5, r3
   11048:	b	1118c <insertion_sort@@Base+0x1ac>
   1104c:	ldrb	r2, [r4]
   11050:	ldrb	r1, [r6]
   11054:	cmp	r3, #1
   11058:	strb	r1, [r4]
   1105c:	strb	r2, [r6]
   11060:	beq	11224 <insertion_sort@@Base+0x244>
   11064:	ldrb	r2, [r4, #1]
   11068:	ldrb	r1, [r6, #1]
   1106c:	cmp	r3, #3
   11070:	strb	r1, [r4, #1]
   11074:	strb	r2, [r6, #1]
   11078:	bne	11218 <insertion_sort@@Base+0x238>
   1107c:	ldrb	r2, [r4, #2]
   11080:	ldrb	r1, [r6, #2]
   11084:	mov	r0, #3
   11088:	str	r0, [sp, #4]
   1108c:	strb	r1, [r4, #2]
   11090:	strb	r2, [r6, #2]
   11094:	sub	r2, sl, r3
   11098:	sub	r1, r2, #4
   1109c:	add	r0, r3, r7
   110a0:	lsr	r1, r1, #2
   110a4:	add	r1, r1, #1
   110a8:	add	r3, r3, r8
   110ac:	str	r2, [sp, #12]
   110b0:	add	r0, fp, r0
   110b4:	lsl	r2, r1, #2
   110b8:	add	r3, fp, r3
   110bc:	str	r2, [sp, #16]
   110c0:	mov	lr, r3
   110c4:	sub	r2, r0, #4
   110c8:	mov	ip, #0
   110cc:	str	r9, [sp, #20]
   110d0:	str	r4, [sp, #24]
   110d4:	ldr	r4, [r2, #4]!
   110d8:	ldr	r9, [r3], #4
   110dc:	add	ip, ip, #1
   110e0:	cmp	r1, ip
   110e4:	str	r9, [r0], #4
   110e8:	str	r4, [lr], #4
   110ec:	bhi	110d4 <insertion_sort@@Base+0xf4>
   110f0:	ldr	r2, [sp, #12]
   110f4:	ldr	r3, [sp, #16]
   110f8:	ldr	r9, [sp, #20]
   110fc:	cmp	r2, r3
   11100:	ldr	r2, [sp, #4]
   11104:	ldr	r4, [sp, #24]
   11108:	add	r2, r3, r2
   1110c:	beq	11170 <insertion_sort@@Base+0x190>
   11110:	add	r0, r2, r7
   11114:	add	r1, r2, r8
   11118:	ldrb	ip, [fp, r0]
   1111c:	ldrb	lr, [fp, r1]
   11120:	add	r3, r2, #1
   11124:	cmp	r3, sl
   11128:	strb	lr, [fp, r0]
   1112c:	strb	ip, [fp, r1]
   11130:	bge	11170 <insertion_sort@@Base+0x190>
   11134:	add	r1, r3, r7
   11138:	add	r3, r3, r8
   1113c:	ldrb	r0, [fp, r1]
   11140:	ldrb	ip, [fp, r3]
   11144:	add	r2, r2, #2
   11148:	cmp	sl, r2
   1114c:	strb	ip, [fp, r1]
   11150:	strb	r0, [fp, r3]
   11154:	ble	11170 <insertion_sort@@Base+0x190>
   11158:	add	r3, r2, r7
   1115c:	add	r2, r2, r8
   11160:	ldrb	r1, [fp, r3]
   11164:	ldrb	r0, [fp, r2]
   11168:	strb	r0, [fp, r3]
   1116c:	strb	r1, [fp, r2]
   11170:	cmp	r9, #0
   11174:	sub	r4, r4, sl
   11178:	sub	r6, r6, sl
   1117c:	sub	r7, r7, sl
   11180:	sub	r8, r8, sl
   11184:	add	r5, r5, sl
   11188:	beq	11230 <insertion_sort@@Base+0x250>
   1118c:	mov	r1, r6
   11190:	mov	r0, r4
   11194:	ldr	r3, [sp, #8]
   11198:	blx	r3
   1119c:	sub	r9, r9, #1
   111a0:	cmn	r0, #1
   111a4:	bne	11230 <insertion_sort@@Base+0x250>
   111a8:	cmp	sl, #0
   111ac:	ble	11170 <insertion_sort@@Base+0x190>
   111b0:	add	r3, r7, #4
   111b4:	add	r2, r8, #4
   111b8:	cmp	r7, r2
   111bc:	cmplt	r8, r3
   111c0:	movge	r3, #1
   111c4:	movlt	r3, #0
   111c8:	cmp	sl, #7
   111cc:	movls	r3, #0
   111d0:	andhi	r3, r3, #1
   111d4:	cmp	r3, #0
   111d8:	beq	111f0 <insertion_sort@@Base+0x210>
   111dc:	ands	r3, r5, #3
   111e0:	bne	1104c <insertion_sort@@Base+0x6c>
   111e4:	mov	r2, #0
   111e8:	str	r2, [sp, #4]
   111ec:	b	11094 <insertion_sort@@Base+0xb4>
   111f0:	add	ip, r4, sl
   111f4:	mov	r2, r6
   111f8:	mov	r3, r4
   111fc:	ldrb	r0, [r2]
   11200:	ldrb	r1, [r3]
   11204:	strb	r0, [r3], #1
   11208:	cmp	r3, ip
   1120c:	strb	r1, [r2], #1
   11210:	bne	111fc <insertion_sort@@Base+0x21c>
   11214:	b	11170 <insertion_sort@@Base+0x190>
   11218:	mov	r2, #2
   1121c:	str	r2, [sp, #4]
   11220:	b	11094 <insertion_sort@@Base+0xb4>
   11224:	mov	r2, #1
   11228:	str	r2, [sp, #4]
   1122c:	b	11094 <insertion_sort@@Base+0xb4>
   11230:	ldr	r3, [sp, #28]
   11234:	ldr	r2, [sp, #44]	; 0x2c
   11238:	add	r3, r3, #1
   1123c:	str	r3, [sp, #28]
   11240:	cmp	r2, r3
   11244:	ldr	r3, [sp, #32]
   11248:	add	r3, r3, sl
   1124c:	str	r3, [sp, #32]
   11250:	ldr	r3, [sp, #36]	; 0x24
   11254:	add	r3, r3, sl
   11258:	str	r3, [sp, #36]	; 0x24
   1125c:	ldr	r3, [sp, #40]	; 0x28
   11260:	sub	r3, r3, sl
   11264:	str	r3, [sp, #40]	; 0x28
   11268:	bne	1101c <insertion_sort@@Base+0x3c>
   1126c:	add	sp, sp, #52	; 0x34
   11270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11274:	bx	lr

00011278 <__libc_csu_init@@Base>:
   11278:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1127c:	mov	r7, r0
   11280:	ldr	r6, [pc, #72]	; 112d0 <__libc_csu_init@@Base+0x58>
   11284:	ldr	r5, [pc, #72]	; 112d4 <__libc_csu_init@@Base+0x5c>
   11288:	add	r6, pc, r6
   1128c:	add	r5, pc, r5
   11290:	sub	r6, r6, r5
   11294:	mov	r8, r1
   11298:	mov	r9, r2
   1129c:	bl	10690 <printf@plt-0x20>
   112a0:	asrs	r6, r6, #2
   112a4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   112a8:	mov	r4, #0
   112ac:	add	r4, r4, #1
   112b0:	ldr	r3, [r5], #4
   112b4:	mov	r2, r9
   112b8:	mov	r1, r8
   112bc:	mov	r0, r7
   112c0:	blx	r3
   112c4:	cmp	r6, r4
   112c8:	bne	112ac <__libc_csu_init@@Base+0x34>
   112cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   112d0:	andeq	r0, r1, r0, lsl #25
   112d4:	andeq	r0, r1, r8, ror ip

000112d8 <__libc_csu_fini@@Base>:
   112d8:	bx	lr

Disassembly of section .fini:

000112dc <.fini>:
   112dc:	push	{r3, lr}
   112e0:	pop	{r3, pc}
