
../repos/coreutils/src/basenc:     file format elf32-littlearm


Disassembly of section .init:

00010cc4 <.init>:
   10cc4:	push	{r3, lr}
   10cc8:	bl	11898 <__assert_fail@plt+0x938>
   10ccc:	pop	{r3, pc}

Disassembly of section .plt:

00010cd0 <calloc@plt-0x14>:
   10cd0:	push	{lr}		; (str lr, [sp, #-4]!)
   10cd4:	ldr	lr, [pc, #4]	; 10ce0 <calloc@plt-0x4>
   10cd8:	add	lr, pc, lr
   10cdc:	ldr	pc, [lr, #8]!
   10ce0:	andeq	r7, r1, r0, lsr #6

00010ce4 <calloc@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #94208	; 0x17000
   10cec:	ldr	pc, [ip, #800]!	; 0x320

00010cf0 <fputs_unlocked@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #94208	; 0x17000
   10cf8:	ldr	pc, [ip, #792]!	; 0x318

00010cfc <raise@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #94208	; 0x17000
   10d04:	ldr	pc, [ip, #784]!	; 0x310

00010d08 <strcmp@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #94208	; 0x17000
   10d10:	ldr	pc, [ip, #776]!	; 0x308

00010d14 <posix_fadvise64@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #94208	; 0x17000
   10d1c:	ldr	pc, [ip, #768]!	; 0x300

00010d20 <fflush@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #94208	; 0x17000
   10d28:	ldr	pc, [ip, #760]!	; 0x2f8

00010d2c <memmove@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #94208	; 0x17000
   10d34:	ldr	pc, [ip, #752]!	; 0x2f0

00010d38 <free@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #94208	; 0x17000
   10d40:	ldr	pc, [ip, #744]!	; 0x2e8

00010d44 <_exit@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #94208	; 0x17000
   10d4c:	ldr	pc, [ip, #736]!	; 0x2e0

00010d50 <memcpy@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #94208	; 0x17000
   10d58:	ldr	pc, [ip, #728]!	; 0x2d8

00010d5c <mbsinit@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #94208	; 0x17000
   10d64:	ldr	pc, [ip, #720]!	; 0x2d0

00010d68 <fwrite_unlocked@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #94208	; 0x17000
   10d70:	ldr	pc, [ip, #712]!	; 0x2c8

00010d74 <memcmp@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #94208	; 0x17000
   10d7c:	ldr	pc, [ip, #704]!	; 0x2c0

00010d80 <fputc_unlocked@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #94208	; 0x17000
   10d88:	ldr	pc, [ip, #696]!	; 0x2b8

00010d8c <dcgettext@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #94208	; 0x17000
   10d94:	ldr	pc, [ip, #688]!	; 0x2b0

00010d98 <realloc@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #94208	; 0x17000
   10da0:	ldr	pc, [ip, #680]!	; 0x2a8

00010da4 <textdomain@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #94208	; 0x17000
   10dac:	ldr	pc, [ip, #672]!	; 0x2a0

00010db0 <iswprint@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #94208	; 0x17000
   10db8:	ldr	pc, [ip, #664]!	; 0x298

00010dbc <lseek64@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #94208	; 0x17000
   10dc4:	ldr	pc, [ip, #656]!	; 0x290

00010dc8 <__ctype_get_mb_cur_max@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #94208	; 0x17000
   10dd0:	ldr	pc, [ip, #648]!	; 0x288

00010dd4 <__fpending@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #94208	; 0x17000
   10ddc:	ldr	pc, [ip, #640]!	; 0x280

00010de0 <ferror_unlocked@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #94208	; 0x17000
   10de8:	ldr	pc, [ip, #632]!	; 0x278

00010dec <mbrtowc@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #94208	; 0x17000
   10df4:	ldr	pc, [ip, #624]!	; 0x270

00010df8 <error@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #94208	; 0x17000
   10e00:	ldr	pc, [ip, #616]!	; 0x268

00010e04 <malloc@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #94208	; 0x17000
   10e0c:	ldr	pc, [ip, #608]!	; 0x260

00010e10 <__libc_start_main@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #94208	; 0x17000
   10e18:	ldr	pc, [ip, #600]!	; 0x258

00010e1c <__freading@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #94208	; 0x17000
   10e24:	ldr	pc, [ip, #592]!	; 0x250

00010e28 <__gmon_start__@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #94208	; 0x17000
   10e30:	ldr	pc, [ip, #584]!	; 0x248

00010e34 <getopt_long@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #94208	; 0x17000
   10e3c:	ldr	pc, [ip, #576]!	; 0x240

00010e40 <__ctype_b_loc@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #94208	; 0x17000
   10e48:	ldr	pc, [ip, #568]!	; 0x238

00010e4c <exit@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #94208	; 0x17000
   10e54:	ldr	pc, [ip, #560]!	; 0x230

00010e58 <strlen@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #94208	; 0x17000
   10e60:	ldr	pc, [ip, #552]!	; 0x228

00010e64 <strchr@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #94208	; 0x17000
   10e6c:	ldr	pc, [ip, #544]!	; 0x220

00010e70 <__errno_location@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #94208	; 0x17000
   10e78:	ldr	pc, [ip, #536]!	; 0x218

00010e7c <__cxa_atexit@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #94208	; 0x17000
   10e84:	ldr	pc, [ip, #528]!	; 0x210

00010e88 <memset@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #94208	; 0x17000
   10e90:	ldr	pc, [ip, #520]!	; 0x208

00010e94 <__printf_chk@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #94208	; 0x17000
   10e9c:	ldr	pc, [ip, #512]!	; 0x200

00010ea0 <fileno@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #94208	; 0x17000
   10ea8:	ldr	pc, [ip, #504]!	; 0x1f8

00010eac <__fprintf_chk@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #94208	; 0x17000
   10eb4:	ldr	pc, [ip, #496]!	; 0x1f0

00010eb8 <memchr@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #488]!	; 0x1e8

00010ec4 <strtoimax@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #480]!	; 0x1e0

00010ed0 <fclose@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #472]!	; 0x1d8

00010edc <fseeko64@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #464]!	; 0x1d0

00010ee8 <setlocale@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #456]!	; 0x1c8

00010ef4 <strrchr@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #448]!	; 0x1c0

00010f00 <nl_langinfo@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #440]!	; 0x1b8

00010f0c <fopen64@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #432]!	; 0x1b0

00010f18 <bindtextdomain@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #424]!	; 0x1a8

00010f24 <fread_unlocked@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #416]!	; 0x1a0

00010f30 <fputs@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #408]!	; 0x198

00010f3c <strncmp@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #400]!	; 0x190

00010f48 <abort@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #392]!	; 0x188

00010f54 <feof_unlocked@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #384]!	; 0x180

00010f60 <__assert_fail@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #94208	; 0x17000
   10f68:	ldr	pc, [ip, #376]!	; 0x178

Disassembly of section .text:

00010f6c <.text>:
   10f6c:	push	{r4, lr}
   10f70:	bl	10e70 <__errno_location@plt>
   10f74:	mov	r3, #12
   10f78:	str	r3, [r0]
   10f7c:	mov	r0, #0
   10f80:	pop	{r4, pc}
   10f84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f88:	mov	r9, r0
   10f8c:	sub	sp, sp, #76	; 0x4c
   10f90:	mov	r7, r1
   10f94:	mov	r4, #0
   10f98:	mov	r6, #76	; 0x4c
   10f9c:	mov	r8, r4
   10fa0:	ldr	fp, [pc, #1984]	; 11768 <__assert_fail@plt+0x808>
   10fa4:	ldr	sl, [pc, #1984]	; 1176c <__assert_fail@plt+0x80c>
   10fa8:	ldr	r0, [r1]
   10fac:	bl	1386c <__assert_fail@plt+0x290c>
   10fb0:	ldr	r1, [pc, #1976]	; 11770 <__assert_fail@plt+0x810>
   10fb4:	mov	r0, #6
   10fb8:	bl	10ee8 <setlocale@plt>
   10fbc:	ldr	r1, [pc, #1968]	; 11774 <__assert_fail@plt+0x814>
   10fc0:	ldr	r0, [pc, #1968]	; 11778 <__assert_fail@plt+0x818>
   10fc4:	bl	10f18 <bindtextdomain@plt>
   10fc8:	ldr	r0, [pc, #1960]	; 11778 <__assert_fail@plt+0x818>
   10fcc:	bl	10da4 <textdomain@plt>
   10fd0:	ldr	r0, [pc, #1956]	; 1177c <__assert_fail@plt+0x81c>
   10fd4:	bl	16124 <__assert_fail@plt+0x51c4>
   10fd8:	str	r4, [sp, #24]
   10fdc:	mov	r5, #0
   10fe0:	mov	r3, fp
   10fe4:	ldr	r2, [pc, #1940]	; 11780 <__assert_fail@plt+0x820>
   10fe8:	mov	r1, r7
   10fec:	mov	r0, r9
   10ff0:	str	r5, [sp]
   10ff4:	bl	10e34 <getopt_long@plt>
   10ff8:	cmn	r0, #1
   10ffc:	bne	11034 <__assert_fail@plt+0xd4>
   11000:	sub	r4, r4, #256	; 0x100
   11004:	ldr	r5, [pc, #1912]	; 11784 <__assert_fail@plt+0x824>
   11008:	cmp	r4, #7
   1100c:	ldrls	pc, [pc, r4, lsl #2]
   11010:	b	112ec <__assert_fail@plt+0x38c>
   11014:	andeq	r1, r1, ip, asr r1
   11018:	ldrdeq	r1, [r1], -r4
   1101c:	strdeq	r1, [r1], -ip
   11020:	andeq	r1, r1, r4, lsr #4
   11024:	andeq	r1, r1, ip, asr #4
   11028:	andeq	r1, r1, r4, ror r2
   1102c:	muleq	r1, ip, r2
   11030:	andeq	r1, r1, r4, asr #5
   11034:	cmp	r0, #105	; 0x69
   11038:	beq	11148 <__assert_fail@plt+0x1e8>
   1103c:	bgt	1108c <__assert_fail@plt+0x12c>
   11040:	cmn	r0, #2
   11044:	beq	11140 <__assert_fail@plt+0x1e0>
   11048:	cmp	r0, #100	; 0x64
   1104c:	beq	11154 <__assert_fail@plt+0x1f4>
   11050:	cmn	r0, #3
   11054:	bne	1130c <__assert_fail@plt+0x3ac>
   11058:	ldr	r3, [pc, #1832]	; 11788 <__assert_fail@plt+0x828>
   1105c:	ldr	r0, [pc, #1832]	; 1178c <__assert_fail@plt+0x82c>
   11060:	ldr	r2, [pc, #1832]	; 11790 <__assert_fail@plt+0x830>
   11064:	stmib	sp, {r3, r5}
   11068:	ldr	r3, [pc, #1828]	; 11794 <__assert_fail@plt+0x834>
   1106c:	ldr	r1, [pc, #1828]	; 11798 <__assert_fail@plt+0x838>
   11070:	str	r3, [sp]
   11074:	ldr	r3, [pc, #1824]	; 1179c <__assert_fail@plt+0x83c>
   11078:	ldr	r0, [r0]
   1107c:	ldr	r3, [r3]
   11080:	bl	152b8 <__assert_fail@plt+0x4358>
   11084:	mov	r0, r5
   11088:	bl	10e4c <exit@plt>
   1108c:	cmp	r0, #119	; 0x77
   11090:	beq	110ac <__assert_fail@plt+0x14c>
   11094:	blt	1130c <__assert_fail@plt+0x3ac>
   11098:	sub	r3, r0, #256	; 0x100
   1109c:	cmp	r3, #7
   110a0:	bhi	1130c <__assert_fail@plt+0x3ac>
   110a4:	mov	r4, r0
   110a8:	b	10fdc <__assert_fail@plt+0x7c>
   110ac:	ldr	r3, [pc, #1724]	; 11770 <__assert_fail@plt+0x810>
   110b0:	mov	r2, #10
   110b4:	mov	r1, r5
   110b8:	str	r3, [sp]
   110bc:	add	r3, sp, #48	; 0x30
   110c0:	ldr	r0, [sl]
   110c4:	bl	1573c <__assert_fail@plt+0x47dc>
   110c8:	cmp	r0, #1
   110cc:	bhi	110e0 <__assert_fail@plt+0x180>
   110d0:	ldrd	r2, [sp, #48]	; 0x30
   110d4:	cmp	r2, #0
   110d8:	sbcs	r1, r3, #0
   110dc:	bge	11114 <__assert_fail@plt+0x1b4>
   110e0:	mov	r2, #5
   110e4:	ldr	r1, [pc, #1716]	; 117a0 <__assert_fail@plt+0x840>
   110e8:	mov	r0, #0
   110ec:	bl	10d8c <dcgettext@plt>
   110f0:	mov	r4, r0
   110f4:	ldr	r0, [sl]
   110f8:	bl	14e6c <__assert_fail@plt+0x3f0c>
   110fc:	mov	r3, r4
   11100:	ldr	r2, [pc, #1692]	; 117a4 <__assert_fail@plt+0x844>
   11104:	mov	r1, #0
   11108:	str	r0, [sp]
   1110c:	mov	r0, #1
   11110:	bl	10df8 <error@plt>
   11114:	eor	ip, r0, #1
   11118:	mvn	r0, #-2147483648	; 0x80000000
   1111c:	cmp	r0, r2
   11120:	mov	r1, #0
   11124:	sbcs	r1, r1, r3
   11128:	movlt	r0, #0
   1112c:	andge	r0, ip, #1
   11130:	cmp	r0, #0
   11134:	moveq	r2, #0
   11138:	mov	r6, r2
   1113c:	b	10fdc <__assert_fail@plt+0x7c>
   11140:	mov	r0, r5
   11144:	bl	12344 <__assert_fail@plt+0x13e4>
   11148:	mov	r3, #1
   1114c:	str	r3, [sp, #24]
   11150:	b	10fdc <__assert_fail@plt+0x7c>
   11154:	mov	r8, #1
   11158:	b	10fdc <__assert_fail@plt+0x7c>
   1115c:	ldr	r3, [pc, #1604]	; 117a8 <__assert_fail@plt+0x848>
   11160:	str	r3, [r5]
   11164:	ldr	r3, [pc, #1600]	; 117ac <__assert_fail@plt+0x84c>
   11168:	str	r3, [r5, #4]
   1116c:	ldr	r3, [pc, #1596]	; 117b0 <__assert_fail@plt+0x850>
   11170:	str	r3, [r5, #8]
   11174:	ldr	r3, [pc, #1592]	; 117b4 <__assert_fail@plt+0x854>
   11178:	str	r3, [r5, #12]
   1117c:	ldr	r3, [pc, #1588]	; 117b8 <__assert_fail@plt+0x858>
   11180:	str	r3, [r5, #16]
   11184:	ldr	r4, [pc, #1584]	; 117bc <__assert_fail@plt+0x85c>
   11188:	ldr	r3, [r4]
   1118c:	sub	r2, r9, r3
   11190:	cmp	r2, #1
   11194:	ble	11314 <__assert_fail@plt+0x3b4>
   11198:	mov	r2, #5
   1119c:	ldr	r1, [pc, #1564]	; 117c0 <__assert_fail@plt+0x860>
   111a0:	mov	r0, #0
   111a4:	bl	10d8c <dcgettext@plt>
   111a8:	ldr	r3, [r4]
   111ac:	mov	r5, r0
   111b0:	add	r3, r3, #1
   111b4:	ldr	r0, [r7, r3, lsl #2]
   111b8:	bl	14e6c <__assert_fail@plt+0x3f0c>
   111bc:	mov	r1, #0
   111c0:	mov	r3, r0
   111c4:	mov	r2, r5
   111c8:	mov	r0, r1
   111cc:	bl	10df8 <error@plt>
   111d0:	b	1130c <__assert_fail@plt+0x3ac>
   111d4:	ldr	r3, [pc, #1484]	; 117a8 <__assert_fail@plt+0x848>
   111d8:	str	r3, [r5]
   111dc:	ldr	r3, [pc, #1504]	; 117c4 <__assert_fail@plt+0x864>
   111e0:	str	r3, [r5, #4]
   111e4:	ldr	r3, [pc, #1500]	; 117c8 <__assert_fail@plt+0x868>
   111e8:	str	r3, [r5, #8]
   111ec:	ldr	r3, [pc, #1496]	; 117cc <__assert_fail@plt+0x86c>
   111f0:	str	r3, [r5, #12]
   111f4:	ldr	r3, [pc, #1492]	; 117d0 <__assert_fail@plt+0x870>
   111f8:	b	11180 <__assert_fail@plt+0x220>
   111fc:	ldr	r3, [pc, #1488]	; 117d4 <__assert_fail@plt+0x874>
   11200:	str	r3, [r5]
   11204:	ldr	r3, [pc, #1484]	; 117d8 <__assert_fail@plt+0x878>
   11208:	str	r3, [r5, #4]
   1120c:	ldr	r3, [pc, #1480]	; 117dc <__assert_fail@plt+0x87c>
   11210:	str	r3, [r5, #8]
   11214:	ldr	r3, [pc, #1476]	; 117e0 <__assert_fail@plt+0x880>
   11218:	str	r3, [r5, #12]
   1121c:	ldr	r3, [pc, #1472]	; 117e4 <__assert_fail@plt+0x884>
   11220:	b	11180 <__assert_fail@plt+0x220>
   11224:	ldr	r3, [pc, #1448]	; 117d4 <__assert_fail@plt+0x874>
   11228:	str	r3, [r5]
   1122c:	ldr	r3, [pc, #1460]	; 117e8 <__assert_fail@plt+0x888>
   11230:	str	r3, [r5, #4]
   11234:	ldr	r3, [pc, #1456]	; 117ec <__assert_fail@plt+0x88c>
   11238:	str	r3, [r5, #8]
   1123c:	ldr	r3, [pc, #1452]	; 117f0 <__assert_fail@plt+0x890>
   11240:	str	r3, [r5, #12]
   11244:	ldr	r3, [pc, #1448]	; 117f4 <__assert_fail@plt+0x894>
   11248:	b	11180 <__assert_fail@plt+0x220>
   1124c:	ldr	r3, [pc, #1444]	; 117f8 <__assert_fail@plt+0x898>
   11250:	str	r3, [r5]
   11254:	ldr	r3, [pc, #1440]	; 117fc <__assert_fail@plt+0x89c>
   11258:	str	r3, [r5, #4]
   1125c:	ldr	r3, [pc, #1436]	; 11800 <__assert_fail@plt+0x8a0>
   11260:	str	r3, [r5, #8]
   11264:	ldr	r3, [pc, #1432]	; 11804 <__assert_fail@plt+0x8a4>
   11268:	str	r3, [r5, #12]
   1126c:	ldr	r3, [pc, #1428]	; 11808 <__assert_fail@plt+0x8a8>
   11270:	b	11180 <__assert_fail@plt+0x220>
   11274:	ldr	r3, [pc, #1424]	; 1180c <__assert_fail@plt+0x8ac>
   11278:	str	r3, [r5]
   1127c:	ldr	r3, [pc, #1420]	; 11810 <__assert_fail@plt+0x8b0>
   11280:	str	r3, [r5, #4]
   11284:	ldr	r3, [pc, #1416]	; 11814 <__assert_fail@plt+0x8b4>
   11288:	str	r3, [r5, #8]
   1128c:	ldr	r3, [pc, #1412]	; 11818 <__assert_fail@plt+0x8b8>
   11290:	str	r3, [r5, #12]
   11294:	ldr	r3, [pc, #1408]	; 1181c <__assert_fail@plt+0x8bc>
   11298:	b	11180 <__assert_fail@plt+0x220>
   1129c:	ldr	r3, [pc, #1384]	; 1180c <__assert_fail@plt+0x8ac>
   112a0:	str	r3, [r5]
   112a4:	ldr	r3, [pc, #1380]	; 11810 <__assert_fail@plt+0x8b0>
   112a8:	str	r3, [r5, #4]
   112ac:	ldr	r3, [pc, #1388]	; 11820 <__assert_fail@plt+0x8c0>
   112b0:	str	r3, [r5, #8]
   112b4:	ldr	r3, [pc, #1372]	; 11818 <__assert_fail@plt+0x8b8>
   112b8:	str	r3, [r5, #12]
   112bc:	ldr	r3, [pc, #1376]	; 11824 <__assert_fail@plt+0x8c4>
   112c0:	b	11180 <__assert_fail@plt+0x220>
   112c4:	ldr	r3, [pc, #1372]	; 11828 <__assert_fail@plt+0x8c8>
   112c8:	str	r3, [r5]
   112cc:	ldr	r3, [pc, #1368]	; 1182c <__assert_fail@plt+0x8cc>
   112d0:	str	r3, [r5, #4]
   112d4:	ldr	r3, [pc, #1364]	; 11830 <__assert_fail@plt+0x8d0>
   112d8:	str	r3, [r5, #8]
   112dc:	ldr	r3, [pc, #1360]	; 11834 <__assert_fail@plt+0x8d4>
   112e0:	str	r3, [r5, #12]
   112e4:	ldr	r3, [pc, #1356]	; 11838 <__assert_fail@plt+0x8d8>
   112e8:	b	11180 <__assert_fail@plt+0x220>
   112ec:	mov	r2, #5
   112f0:	ldr	r1, [pc, #1348]	; 1183c <__assert_fail@plt+0x8dc>
   112f4:	mov	r0, #0
   112f8:	bl	10d8c <dcgettext@plt>
   112fc:	mov	r1, #0
   11300:	mov	r2, r0
   11304:	mov	r0, r1
   11308:	bl	10df8 <error@plt>
   1130c:	mov	r0, #1
   11310:	b	11144 <__assert_fail@plt+0x1e4>
   11314:	cmp	r3, r9
   11318:	bge	113dc <__assert_fail@plt+0x47c>
   1131c:	ldr	r3, [r7, r3, lsl #2]
   11320:	ldr	r1, [pc, #1304]	; 11840 <__assert_fail@plt+0x8e0>
   11324:	mov	r0, r3
   11328:	str	r3, [sp, #20]
   1132c:	bl	10d08 <strcmp@plt>
   11330:	cmp	r0, #0
   11334:	bne	113e8 <__assert_fail@plt+0x488>
   11338:	ldr	r3, [pc, #1284]	; 11844 <__assert_fail@plt+0x8e4>
   1133c:	ldr	r4, [r3]
   11340:	mov	r1, #2
   11344:	mov	r0, r4
   11348:	ldr	r7, [pc, #1084]	; 1178c <__assert_fail@plt+0x82c>
   1134c:	bl	1365c <__assert_fail@plt+0x26fc>
   11350:	cmp	r8, #0
   11354:	ldr	r3, [r7]
   11358:	str	r3, [sp, #28]
   1135c:	beq	115c8 <__assert_fail@plt+0x668>
   11360:	movw	r0, #4200	; 0x1068
   11364:	ldr	r3, [r5]
   11368:	add	r6, sp, #48	; 0x30
   1136c:	blx	r3
   11370:	bl	15380 <__assert_fail@plt+0x4420>
   11374:	mov	r7, r0
   11378:	movw	r0, #4200	; 0x1068
   1137c:	bl	15380 <__assert_fail@plt+0x4420>
   11380:	mov	r3, #0
   11384:	mov	fp, r0
   11388:	mov	r0, r6
   1138c:	str	r3, [sp, #64]	; 0x40
   11390:	ldr	r3, [r5, #12]
   11394:	blx	r3
   11398:	str	r6, [sp, #32]
   1139c:	mov	r6, #0
   113a0:	movw	r0, #4200	; 0x1068
   113a4:	ldr	r3, [r5]
   113a8:	add	r8, r7, r6
   113ac:	blx	r3
   113b0:	sub	r2, r0, r6
   113b4:	mov	r3, r4
   113b8:	mov	r0, r8
   113bc:	mov	r1, #1
   113c0:	bl	10f24 <fread_unlocked@plt>
   113c4:	ldr	r3, [sp, #24]
   113c8:	mov	r8, r0
   113cc:	cmp	r3, #0
   113d0:	beq	11464 <__assert_fail@plt+0x504>
   113d4:	mov	r9, #0
   113d8:	b	1145c <__assert_fail@plt+0x4fc>
   113dc:	ldr	r3, [pc, #1116]	; 11840 <__assert_fail@plt+0x8e0>
   113e0:	str	r3, [sp, #20]
   113e4:	b	11338 <__assert_fail@plt+0x3d8>
   113e8:	ldr	r1, [pc, #1112]	; 11848 <__assert_fail@plt+0x8e8>
   113ec:	ldr	r0, [sp, #20]
   113f0:	bl	10f0c <fopen64@plt>
   113f4:	subs	r4, r0, #0
   113f8:	bne	11340 <__assert_fail@plt+0x3e0>
   113fc:	bl	10e70 <__errno_location@plt>
   11400:	ldr	r5, [r0]
   11404:	mov	r1, #3
   11408:	mov	r0, r4
   1140c:	ldr	r2, [sp, #20]
   11410:	bl	14d2c <__assert_fail@plt+0x3dcc>
   11414:	mov	r3, r0
   11418:	ldr	r2, [pc, #1068]	; 1184c <__assert_fail@plt+0x8ec>
   1141c:	mov	r0, #1
   11420:	mov	r1, r5
   11424:	bl	10df8 <error@plt>
   11428:	add	r1, r6, r9
   1142c:	ldr	r3, [r5, #4]
   11430:	add	sl, r7, r1
   11434:	ldrb	r0, [r7, r1]
   11438:	str	r1, [sp, #36]	; 0x24
   1143c:	blx	r3
   11440:	cmp	r0, #0
   11444:	bne	11458 <__assert_fail@plt+0x4f8>
   11448:	ldr	r1, [sp, #36]	; 0x24
   1144c:	ldrb	r3, [r7, r1]
   11450:	cmp	r3, #61	; 0x3d
   11454:	bne	1148c <__assert_fail@plt+0x52c>
   11458:	add	r9, r9, #1
   1145c:	cmp	r9, r8
   11460:	blt	11428 <__assert_fail@plt+0x4c8>
   11464:	mov	r0, r4
   11468:	add	r6, r6, r8
   1146c:	bl	10de0 <ferror_unlocked@plt>
   11470:	cmp	r0, #0
   11474:	beq	114a8 <__assert_fail@plt+0x548>
   11478:	bl	10e70 <__errno_location@plt>
   1147c:	mov	r2, #5
   11480:	ldr	r1, [pc, #968]	; 11850 <__assert_fail@plt+0x8f0>
   11484:	ldr	r4, [r0]
   11488:	b	11584 <__assert_fail@plt+0x624>
   1148c:	sub	r8, r8, #1
   11490:	add	r1, r1, #1
   11494:	sub	r2, r8, r9
   11498:	add	r1, r7, r1
   1149c:	mov	r0, sl
   114a0:	bl	10d2c <memmove@plt>
   114a4:	b	1145c <__assert_fail@plt+0x4fc>
   114a8:	movw	r0, #4200	; 0x1068
   114ac:	ldr	r3, [r5]
   114b0:	blx	r3
   114b4:	cmp	r6, r0
   114b8:	blt	114fc <__assert_fail@plt+0x59c>
   114bc:	mov	r8, #0
   114c0:	add	sl, sp, #44	; 0x2c
   114c4:	mov	r0, r4
   114c8:	bl	10f54 <feof_unlocked@plt>
   114cc:	cmp	r0, #0
   114d0:	movne	r3, #2
   114d4:	moveq	r3, #1
   114d8:	cmp	r8, r3
   114dc:	blt	11510 <__assert_fail@plt+0x5b0>
   114e0:	mov	r0, r4
   114e4:	bl	10f54 <feof_unlocked@plt>
   114e8:	cmp	r0, #0
   114ec:	beq	1139c <__assert_fail@plt+0x43c>
   114f0:	mov	r0, r4
   114f4:	ldr	r1, [sp, #20]
   114f8:	bl	11c8c <__assert_fail@plt+0xd2c>
   114fc:	mov	r0, r4
   11500:	bl	10f54 <feof_unlocked@plt>
   11504:	cmp	r0, #0
   11508:	beq	113a0 <__assert_fail@plt+0x440>
   1150c:	b	114bc <__assert_fail@plt+0x55c>
   11510:	cmp	r8, #1
   11514:	bne	11524 <__assert_fail@plt+0x5c4>
   11518:	ldr	r3, [sp, #48]	; 0x30
   1151c:	cmp	r3, #0
   11520:	beq	114e0 <__assert_fail@plt+0x580>
   11524:	movw	r3, #4200	; 0x1068
   11528:	cmp	r8, #0
   1152c:	ldr	r9, [r5, #16]
   11530:	moveq	r2, r6
   11534:	movne	r2, #0
   11538:	str	sl, [sp]
   1153c:	mov	r1, r7
   11540:	str	r3, [sp, #44]	; 0x2c
   11544:	mov	r3, fp
   11548:	ldr	r0, [sp, #32]
   1154c:	blx	r9
   11550:	mov	r9, r0
   11554:	mov	r1, #1
   11558:	ldr	r3, [sp, #28]
   1155c:	mov	r0, fp
   11560:	ldr	r2, [sp, #44]	; 0x2c
   11564:	bl	10d68 <fwrite_unlocked@plt>
   11568:	ldr	r3, [sp, #44]	; 0x2c
   1156c:	cmp	r0, r3
   11570:	bcs	11598 <__assert_fail@plt+0x638>
   11574:	bl	10e70 <__errno_location@plt>
   11578:	ldr	r1, [pc, #724]	; 11854 <__assert_fail@plt+0x8f4>
   1157c:	mov	r2, #5
   11580:	ldr	r4, [r0]
   11584:	mov	r0, #0
   11588:	bl	10d8c <dcgettext@plt>
   1158c:	mov	r2, r0
   11590:	mov	r1, r4
   11594:	b	115b8 <__assert_fail@plt+0x658>
   11598:	cmp	r9, #0
   1159c:	bne	115c0 <__assert_fail@plt+0x660>
   115a0:	mov	r2, #5
   115a4:	ldr	r1, [pc, #684]	; 11858 <__assert_fail@plt+0x8f8>
   115a8:	mov	r0, r9
   115ac:	bl	10d8c <dcgettext@plt>
   115b0:	mov	r2, r0
   115b4:	mov	r1, r9
   115b8:	mov	r0, #1
   115bc:	bl	10df8 <error@plt>
   115c0:	add	r8, r8, #1
   115c4:	b	114c4 <__assert_fail@plt+0x564>
   115c8:	mov	r0, #30720	; 0x7800
   115cc:	ldr	fp, [pc, #432]	; 11784 <__assert_fail@plt+0x824>
   115d0:	bl	15380 <__assert_fail@plt+0x4420>
   115d4:	str	r0, [sp, #32]
   115d8:	mov	r0, #30720	; 0x7800
   115dc:	ldr	r3, [r5]
   115e0:	blx	r3
   115e4:	bl	15380 <__assert_fail@plt+0x4420>
   115e8:	str	r0, [sp, #24]
   115ec:	str	r7, [sp, #36]	; 0x24
   115f0:	mov	r7, #0
   115f4:	ldr	r0, [sp, #32]
   115f8:	rsb	r2, r7, #30720	; 0x7800
   115fc:	mov	r3, r4
   11600:	mov	r1, #1
   11604:	add	r0, r0, r7
   11608:	bl	10f24 <fread_unlocked@plt>
   1160c:	add	r7, r7, r0
   11610:	mov	r0, r4
   11614:	bl	10f54 <feof_unlocked@plt>
   11618:	cmp	r0, #0
   1161c:	bne	1169c <__assert_fail@plt+0x73c>
   11620:	mov	r0, r4
   11624:	bl	10de0 <ferror_unlocked@plt>
   11628:	cmp	r0, #0
   1162c:	bne	1169c <__assert_fail@plt+0x73c>
   11630:	cmp	r7, #30720	; 0x7800
   11634:	blt	115f4 <__assert_fail@plt+0x694>
   11638:	mov	r0, r7
   1163c:	ldr	r3, [fp]
   11640:	ldr	r5, [fp, #8]
   11644:	blx	r3
   11648:	mov	r3, r0
   1164c:	mov	r1, r7
   11650:	ldr	r2, [sp, #24]
   11654:	ldr	r0, [sp, #32]
   11658:	blx	r5
   1165c:	mov	r0, r7
   11660:	ldr	r3, [fp]
   11664:	blx	r3
   11668:	cmp	r6, #0
   1166c:	mov	sl, r0
   11670:	movne	r9, #0
   11674:	bne	1172c <__assert_fail@plt+0x7cc>
   11678:	ldr	r3, [sp, #36]	; 0x24
   1167c:	mov	r2, r0
   11680:	mov	r1, #1
   11684:	ldr	r0, [sp, #24]
   11688:	ldr	r3, [r3]
   1168c:	bl	10d68 <fwrite_unlocked@plt>
   11690:	cmp	sl, r0
   11694:	bls	116a4 <__assert_fail@plt+0x744>
   11698:	b	11574 <__assert_fail@plt+0x614>
   1169c:	cmp	r7, #0
   116a0:	bgt	11638 <__assert_fail@plt+0x6d8>
   116a4:	mov	r0, r4
   116a8:	bl	10f54 <feof_unlocked@plt>
   116ac:	cmp	r0, #0
   116b0:	bne	116c8 <__assert_fail@plt+0x768>
   116b4:	mov	r0, r4
   116b8:	bl	10de0 <ferror_unlocked@plt>
   116bc:	cmp	r7, #30720	; 0x7800
   116c0:	cmpeq	r0, #0
   116c4:	beq	115f0 <__assert_fail@plt+0x690>
   116c8:	cmp	r6, #0
   116cc:	cmpne	r8, #0
   116d0:	ble	116e8 <__assert_fail@plt+0x788>
   116d4:	mov	r0, #10
   116d8:	ldr	r1, [sp, #28]
   116dc:	bl	10d80 <fputc_unlocked@plt>
   116e0:	cmn	r0, #1
   116e4:	beq	11574 <__assert_fail@plt+0x614>
   116e8:	mov	r0, r4
   116ec:	bl	10de0 <ferror_unlocked@plt>
   116f0:	cmp	r0, #0
   116f4:	beq	114f0 <__assert_fail@plt+0x590>
   116f8:	b	11478 <__assert_fail@plt+0x518>
   116fc:	sub	r5, sl, r9
   11700:	sub	r3, r6, r8
   11704:	cmp	r5, r3
   11708:	movge	r5, r3
   1170c:	cmp	r5, #0
   11710:	bne	11738 <__assert_fail@plt+0x7d8>
   11714:	mov	r0, #10
   11718:	ldr	r1, [sp, #28]
   1171c:	bl	10d80 <fputc_unlocked@plt>
   11720:	cmn	r0, #1
   11724:	beq	11574 <__assert_fail@plt+0x614>
   11728:	mov	r8, r5
   1172c:	cmp	sl, r9
   11730:	bgt	116fc <__assert_fail@plt+0x79c>
   11734:	b	116a4 <__assert_fail@plt+0x744>
   11738:	ldr	r0, [sp, #24]
   1173c:	mov	r2, r5
   11740:	mov	r1, #1
   11744:	ldr	r3, [sp, #36]	; 0x24
   11748:	add	r0, r0, r9
   1174c:	ldr	r3, [r3]
   11750:	bl	10d68 <fwrite_unlocked@plt>
   11754:	cmp	r5, r0
   11758:	bhi	11574 <__assert_fail@plt+0x614>
   1175c:	add	r9, r9, r5
   11760:	add	r5, r5, r8
   11764:	b	11728 <__assert_fail@plt+0x7c8>
   11768:	andeq	r6, r1, r8, lsr #5
   1176c:	andeq	r8, r2, r8, asr r1
   11770:	strdeq	r6, [r1], -r4
   11774:	strdeq	r6, [r1], -r5
   11778:	andeq	r6, r1, r2, asr sl
   1177c:	andeq	r3, r1, r4, lsl #11
   11780:	andeq	r6, r1, r3, asr #22
   11784:	andeq	r8, r2, r0, ror #2
   11788:	andeq	r6, r1, r6, lsr #22
   1178c:	andeq	r8, r2, r4, asr r1
   11790:	andeq	r6, r1, lr, asr #20
   11794:	andeq	r6, r1, r3, lsr fp
   11798:	andeq	r6, r1, r5, lsl r4
   1179c:	strdeq	r8, [r2], -r0
   117a0:	andeq	r6, r1, sp, lsl #22
   117a4:	andeq	r6, r1, pc, lsl fp
   117a8:	andeq	r1, r1, ip, asr #18
   117ac:	strheq	r3, [r1], -r4
   117b0:	andeq	r2, r1, r4, lsr #29
   117b4:	andeq	r1, r1, r4, lsl #25
   117b8:	andeq	r1, r1, r0, asr #24
   117bc:	andeq	r8, r2, r0, asr #2
   117c0:	andeq	r6, r1, lr, asr fp
   117c4:	andeq	r1, r1, r0, asr #21
   117c8:	andeq	r1, r1, r4, lsl #22
   117cc:	andeq	r1, r1, r8, ror #24
   117d0:	andeq	r2, r1, r0, ror #3
   117d4:	andeq	r1, r1, r0, ror #18
   117d8:	ldrdeq	r2, [r1], -r0
   117dc:	andeq	r2, r1, r4, lsl #17
   117e0:	andeq	r1, r1, r8, lsr ip
   117e4:	strdeq	r1, [r1], -r4
   117e8:	andeq	r1, r1, r4, ror r9
   117ec:	andeq	r2, r1, ip, ror r1
   117f0:	andeq	r1, r1, ip, lsl ip
   117f4:	andeq	r2, r1, r4, lsr #5
   117f8:	andeq	r1, r1, ip, lsr #19
   117fc:	muleq	r1, r0, r9
   11800:			; <UNDEFINED> instruction: 0x000119b4
   11804:	muleq	r1, ip, fp
   11808:	andeq	r1, r1, r4, lsl sp
   1180c:	andeq	r1, r1, ip, lsl sl
   11810:	andeq	r1, r1, r8, lsl #20
   11814:	andeq	r1, r1, r4, lsr #20
   11818:	andeq	r1, r1, r0, lsl #23
   1181c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   11820:	andeq	r1, r1, r4, ror sl
   11824:	andeq	r1, r1, ip, ror #29
   11828:	strdeq	r1, [r1], -r0
   1182c:			; <UNDEFINED> instruction: 0x00011bbc
   11830:	andeq	r2, r1, r4, asr #32
   11834:	andeq	r1, r1, r4, ror #22
   11838:			; <UNDEFINED> instruction: 0x00011db0
   1183c:	andeq	r6, r1, r8, asr #22
   11840:	andeq	r6, r1, r0, lsl pc
   11844:	andeq	r8, r2, r0, asr r1
   11848:	andeq	r6, r1, pc, ror #22
   1184c:	andeq	r6, r1, r3, lsr #22
   11850:	andeq	r6, r1, r2, ror fp
   11854:	andeq	r6, r1, sp, ror fp
   11858:	andeq	r6, r1, r9, lsl #23
   1185c:	mov	fp, #0
   11860:	mov	lr, #0
   11864:	pop	{r1}		; (ldr r1, [sp], #4)
   11868:	mov	r2, sp
   1186c:	push	{r2}		; (str r2, [sp, #-4]!)
   11870:	push	{r0}		; (str r0, [sp, #-4]!)
   11874:	ldr	ip, [pc, #16]	; 1188c <__assert_fail@plt+0x92c>
   11878:	push	{ip}		; (str ip, [sp, #-4]!)
   1187c:	ldr	r0, [pc, #12]	; 11890 <__assert_fail@plt+0x930>
   11880:	ldr	r3, [pc, #12]	; 11894 <__assert_fail@plt+0x934>
   11884:	bl	10e10 <__libc_start_main@plt>
   11888:	bl	10f48 <abort@plt>
   1188c:	andeq	r6, r1, r0, lsr #2
   11890:	andeq	r0, r1, r4, lsl #31
   11894:	andeq	r6, r1, r0, asr #1
   11898:	ldr	r3, [pc, #20]	; 118b4 <__assert_fail@plt+0x954>
   1189c:	ldr	r2, [pc, #20]	; 118b8 <__assert_fail@plt+0x958>
   118a0:	add	r3, pc, r3
   118a4:	ldr	r2, [r3, r2]
   118a8:	cmp	r2, #0
   118ac:	bxeq	lr
   118b0:	b	10e28 <__gmon_start__@plt>
   118b4:	andeq	r6, r1, r8, asr r7
   118b8:	andeq	r0, r0, r4, ror #1
   118bc:	ldr	r0, [pc, #24]	; 118dc <__assert_fail@plt+0x97c>
   118c0:	ldr	r3, [pc, #24]	; 118e0 <__assert_fail@plt+0x980>
   118c4:	cmp	r3, r0
   118c8:	bxeq	lr
   118cc:	ldr	r3, [pc, #16]	; 118e4 <__assert_fail@plt+0x984>
   118d0:	cmp	r3, #0
   118d4:	bxeq	lr
   118d8:	bx	r3
   118dc:	andeq	r8, r2, r8, lsr r1
   118e0:	andeq	r8, r2, r8, lsr r1
   118e4:	andeq	r0, r0, r0
   118e8:	ldr	r0, [pc, #36]	; 11914 <__assert_fail@plt+0x9b4>
   118ec:	ldr	r1, [pc, #36]	; 11918 <__assert_fail@plt+0x9b8>
   118f0:	sub	r1, r1, r0
   118f4:	asr	r1, r1, #2
   118f8:	add	r1, r1, r1, lsr #31
   118fc:	asrs	r1, r1, #1
   11900:	bxeq	lr
   11904:	ldr	r3, [pc, #16]	; 1191c <__assert_fail@plt+0x9bc>
   11908:	cmp	r3, #0
   1190c:	bxeq	lr
   11910:	bx	r3
   11914:	andeq	r8, r2, r8, lsr r1
   11918:	andeq	r8, r2, r8, lsr r1
   1191c:	andeq	r0, r0, r0
   11920:	push	{r4, lr}
   11924:	ldr	r4, [pc, #24]	; 11944 <__assert_fail@plt+0x9e4>
   11928:	ldrb	r3, [r4]
   1192c:	cmp	r3, #0
   11930:	popne	{r4, pc}
   11934:	bl	118bc <__assert_fail@plt+0x95c>
   11938:	mov	r3, #1
   1193c:	strb	r3, [r4]
   11940:	pop	{r4, pc}
   11944:	andeq	r8, r2, ip, asr r1
   11948:	b	118e8 <__assert_fail@plt+0x988>
   1194c:	mov	r3, #3
   11950:	add	r0, r0, #2
   11954:	sdiv	r0, r0, r3
   11958:	lsl	r0, r0, #2
   1195c:	bx	lr
   11960:	mov	r3, #5
   11964:	add	r0, r0, #4
   11968:	sdiv	r0, r0, r3
   1196c:	lsl	r0, r0, #3
   11970:	bx	lr
   11974:	sub	r3, r0, #48	; 0x30
   11978:	sub	r0, r0, #65	; 0x41
   1197c:	cmp	r0, #21
   11980:	cmphi	r3, #9
   11984:	movls	r0, #1
   11988:	movhi	r0, #0
   1198c:	bx	lr
   11990:	sub	r3, r0, #48	; 0x30
   11994:	sub	r0, r0, #65	; 0x41
   11998:	cmp	r0, #5
   1199c:	cmphi	r3, #9
   119a0:	movls	r0, #1
   119a4:	movhi	r0, #0
   119a8:	bx	lr
   119ac:	lsl	r0, r0, #1
   119b0:	bx	lr
   119b4:	push	{r4, r5, lr}
   119b8:	mov	r3, #0
   119bc:	add	r4, r2, #1
   119c0:	ldr	lr, [pc, #36]	; 119ec <__assert_fail@plt+0xa8c>
   119c4:	cmp	r3, r1
   119c8:	popeq	{r4, r5, pc}
   119cc:	ldrb	ip, [r0, r3]
   119d0:	ldrb	r5, [lr, ip, lsr #4]
   119d4:	and	ip, ip, #15
   119d8:	ldrb	ip, [lr, ip]
   119dc:	strb	r5, [r2, r3, lsl #1]
   119e0:	strb	ip, [r4, r3, lsl #1]
   119e4:	add	r3, r3, #1
   119e8:	b	119c4 <__assert_fail@plt+0xa64>
   119ec:	andeq	r6, r1, r8, asr #2
   119f0:	add	r0, r0, r0, lsl #2
   119f4:	add	r3, r0, #3
   119f8:	cmp	r0, #0
   119fc:	movlt	r0, r3
   11a00:	asr	r0, r0, #2
   11a04:	bx	lr
   11a08:	sub	r0, r0, #48	; 0x30
   11a0c:	cmp	r0, #1
   11a10:	movhi	r0, #0
   11a14:	movls	r0, #1
   11a18:	bx	lr
   11a1c:	lsl	r0, r0, #3
   11a20:	bx	lr
   11a24:	add	r1, r0, r1
   11a28:	add	r2, r2, #8
   11a2c:	cmp	r1, r0
   11a30:	sub	ip, r2, #8
   11a34:	bxeq	lr
   11a38:	push	{lr}		; (str lr, [sp, #-4]!)
   11a3c:	ldrb	r3, [r0], #1
   11a40:	tst	r3, #128	; 0x80
   11a44:	lsl	r3, r3, #1
   11a48:	movne	lr, #49	; 0x31
   11a4c:	moveq	lr, #48	; 0x30
   11a50:	uxtb	r3, r3
   11a54:	strb	lr, [ip], #1
   11a58:	cmp	ip, r2
   11a5c:	bne	11a40 <__assert_fail@plt+0xae0>
   11a60:	add	r2, r2, #8
   11a64:	cmp	r1, r0
   11a68:	sub	ip, r2, #8
   11a6c:	bne	11a3c <__assert_fail@plt+0xadc>
   11a70:	pop	{pc}		; (ldr pc, [sp], #4)
   11a74:	add	r1, r0, r1
   11a78:	add	r2, r2, #8
   11a7c:	cmp	r1, r0
   11a80:	sub	r3, r2, #8
   11a84:	bxeq	lr
   11a88:	push	{lr}		; (str lr, [sp, #-4]!)
   11a8c:	ldrb	ip, [r0], #1
   11a90:	tst	ip, #1
   11a94:	lsr	ip, ip, #1
   11a98:	movne	lr, #49	; 0x31
   11a9c:	moveq	lr, #48	; 0x30
   11aa0:	strb	lr, [r3], #1
   11aa4:	cmp	r3, r2
   11aa8:	bne	11a90 <__assert_fail@plt+0xb30>
   11aac:	add	r2, r2, #8
   11ab0:	cmp	r1, r0
   11ab4:	sub	r3, r2, #8
   11ab8:	bne	11a8c <__assert_fail@plt+0xb2c>
   11abc:	pop	{pc}		; (ldr pc, [sp], #4)
   11ac0:	cmp	r0, #95	; 0x5f
   11ac4:	cmpne	r0, #45	; 0x2d
   11ac8:	moveq	r2, #1
   11acc:	movne	r2, #0
   11ad0:	beq	11af0 <__assert_fail@plt+0xb90>
   11ad4:	and	r3, r0, #251	; 0xfb
   11ad8:	cmp	r3, #43	; 0x2b
   11adc:	beq	11afc <__assert_fail@plt+0xb9c>
   11ae0:	push	{r4, lr}
   11ae4:	bl	130b4 <__assert_fail@plt+0x2154>
   11ae8:	and	r0, r0, #1
   11aec:	pop	{r4, pc}
   11af0:	mov	r0, #1
   11af4:	and	r0, r0, #1
   11af8:	bx	lr
   11afc:	mov	r0, r2
   11b00:	b	11af4 <__assert_fail@plt+0xb94>
   11b04:	push	{r4, r5, r6, lr}
   11b08:	mov	r4, r2
   11b0c:	mov	r5, r3
   11b10:	add	r5, r4, r5
   11b14:	bl	12ea4 <__assert_fail@plt+0x1f44>
   11b18:	mov	r2, #95	; 0x5f
   11b1c:	mov	r1, #45	; 0x2d
   11b20:	cmp	r4, r5
   11b24:	popeq	{r4, r5, r6, pc}
   11b28:	ldrb	r3, [r4]
   11b2c:	cmp	r3, #43	; 0x2b
   11b30:	strbeq	r1, [r4]
   11b34:	beq	11b40 <__assert_fail@plt+0xbe0>
   11b38:	cmp	r3, #47	; 0x2f
   11b3c:	strbeq	r2, [r4]
   11b40:	add	r4, r4, #1
   11b44:	b	11b20 <__assert_fail@plt+0xbc0>
   11b48:	push	{r4, lr}
   11b4c:	mov	r4, r0
   11b50:	movw	r0, #4200	; 0x1068
   11b54:	str	r0, [r4, #20]
   11b58:	bl	153a8 <__assert_fail@plt+0x4448>
   11b5c:	str	r0, [r4, #16]
   11b60:	pop	{r4, pc}
   11b64:	push	{r4, lr}
   11b68:	mov	r4, r0
   11b6c:	bl	11b48 <__assert_fail@plt+0xbe8>
   11b70:	mov	r0, #1
   11b74:	mov	r1, #0
   11b78:	strd	r0, [r4]
   11b7c:	pop	{r4, pc}
   11b80:	push	{r4, lr}
   11b84:	mov	r4, r0
   11b88:	bl	11b48 <__assert_fail@plt+0xbe8>
   11b8c:	mov	r3, #0
   11b90:	str	r3, [r4]
   11b94:	strb	r3, [r4, #4]
   11b98:	pop	{r4, pc}
   11b9c:	push	{r4, lr}
   11ba0:	mov	r4, r0
   11ba4:	bl	11b48 <__assert_fail@plt+0xbe8>
   11ba8:	mov	r3, #0
   11bac:	strb	r3, [r4, #5]
   11bb0:	mov	r3, #1
   11bb4:	str	r3, [r4]
   11bb8:	pop	{r4, pc}
   11bbc:	push	{r4, lr}
   11bc0:	mov	r4, r0
   11bc4:	bl	13368 <__assert_fail@plt+0x2408>
   11bc8:	cmp	r0, #0
   11bcc:	bne	11be8 <__assert_fail@plt+0xc88>
   11bd0:	mov	r1, r4
   11bd4:	ldr	r0, [pc, #20]	; 11bf0 <__assert_fail@plt+0xc90>
   11bd8:	bl	10e64 <strchr@plt>
   11bdc:	adds	r0, r0, #0
   11be0:	movne	r0, #1
   11be4:	pop	{r4, pc}
   11be8:	mov	r0, #1
   11bec:	pop	{r4, pc}
   11bf0:	andeq	r6, r1, r8, lsl #7
   11bf4:	push	{r0, r1, r4, lr}
   11bf8:	mov	r4, r0
   11bfc:	ldr	r0, [sp, #16]
   11c00:	str	r0, [sp]
   11c04:	add	r0, r4, #4
   11c08:	bl	12af4 <__assert_fail@plt+0x1b94>
   11c0c:	ldr	r3, [r4, #4]
   11c10:	str	r3, [r4]
   11c14:	add	sp, sp, #8
   11c18:	pop	{r4, pc}
   11c1c:	push	{r4, lr}
   11c20:	mov	r4, r0
   11c24:	add	r0, r0, #4
   11c28:	bl	12ae8 <__assert_fail@plt+0x1b88>
   11c2c:	mov	r0, r4
   11c30:	pop	{r4, lr}
   11c34:	b	11b48 <__assert_fail@plt+0xbe8>
   11c38:	add	r0, r0, #4
   11c3c:	b	12ae8 <__assert_fail@plt+0x1b88>
   11c40:	push	{r0, r1, r4, lr}
   11c44:	mov	r4, r0
   11c48:	ldr	r0, [sp, #16]
   11c4c:	str	r0, [sp]
   11c50:	add	r0, r4, #4
   11c54:	bl	130d8 <__assert_fail@plt+0x2178>
   11c58:	ldr	r3, [r4, #4]
   11c5c:	str	r3, [r4]
   11c60:	add	sp, sp, #8
   11c64:	pop	{r4, pc}
   11c68:	push	{r4, lr}
   11c6c:	mov	r4, r0
   11c70:	add	r0, r0, #4
   11c74:	bl	130cc <__assert_fail@plt+0x216c>
   11c78:	mov	r0, r4
   11c7c:	pop	{r4, lr}
   11c80:	b	11b48 <__assert_fail@plt+0xbe8>
   11c84:	add	r0, r0, #4
   11c88:	b	130cc <__assert_fail@plt+0x216c>
   11c8c:	push	{r4, lr}
   11c90:	mov	r5, r1
   11c94:	bl	1368c <__assert_fail@plt+0x272c>
   11c98:	cmp	r0, #0
   11c9c:	beq	11d04 <__assert_fail@plt+0xda4>
   11ca0:	ldr	r1, [pc, #96]	; 11d08 <__assert_fail@plt+0xda8>
   11ca4:	mov	r0, r5
   11ca8:	bl	10d08 <strcmp@plt>
   11cac:	mov	r6, r0
   11cb0:	bl	10e70 <__errno_location@plt>
   11cb4:	cmp	r6, #0
   11cb8:	ldr	r4, [r0]
   11cbc:	bne	11ce0 <__assert_fail@plt+0xd80>
   11cc0:	mov	r2, #5
   11cc4:	ldr	r1, [pc, #64]	; 11d0c <__assert_fail@plt+0xdac>
   11cc8:	mov	r0, r6
   11ccc:	bl	10d8c <dcgettext@plt>
   11cd0:	mov	r2, r0
   11cd4:	mov	r1, r4
   11cd8:	mov	r0, #1
   11cdc:	bl	10df8 <error@plt>
   11ce0:	mov	r2, r5
   11ce4:	mov	r1, #3
   11ce8:	mov	r0, #0
   11cec:	bl	14d2c <__assert_fail@plt+0x3dcc>
   11cf0:	mov	r3, r0
   11cf4:	ldr	r2, [pc, #20]	; 11d10 <__assert_fail@plt+0xdb0>
   11cf8:	mov	r1, r4
   11cfc:	mov	r0, #1
   11d00:	bl	10df8 <error@plt>
   11d04:	bl	10e4c <exit@plt>
   11d08:	andeq	r6, r1, r0, lsl pc
   11d0c:	andeq	r6, r1, r0, lsr #7
   11d10:	andeq	r6, r1, r3, lsr #22
   11d14:	push	{r4, lr}
   11d18:	mov	ip, #0
   11d1c:	cmp	r2, #0
   11d20:	addne	r2, r1, r2
   11d24:	ldr	r4, [sp, #8]
   11d28:	str	ip, [r4]
   11d2c:	bne	11d98 <__assert_fail@plt+0xe38>
   11d30:	ldrb	r0, [r0, #5]
   11d34:	eor	r0, r0, #1
   11d38:	pop	{r4, pc}
   11d3c:	ldrb	lr, [r1], #1
   11d40:	cmp	lr, #10
   11d44:	beq	11d98 <__assert_fail@plt+0xe38>
   11d48:	sub	ip, lr, #48	; 0x30
   11d4c:	cmp	ip, #9
   11d50:	bls	11d64 <__assert_fail@plt+0xe04>
   11d54:	sub	ip, lr, #65	; 0x41
   11d58:	cmp	ip, #5
   11d5c:	bhi	11da8 <__assert_fail@plt+0xe48>
   11d60:	sub	ip, lr, #55	; 0x37
   11d64:	ldrb	lr, [r0, #5]
   11d68:	uxtb	ip, ip
   11d6c:	cmp	lr, #0
   11d70:	ldrbne	lr, [r0, #4]
   11d74:	strbeq	ip, [r0, #4]
   11d78:	addne	ip, ip, lr, lsl #4
   11d7c:	strbne	ip, [r3], #1
   11d80:	ldrne	ip, [r4]
   11d84:	addne	ip, ip, #1
   11d88:	strne	ip, [r4]
   11d8c:	ldrb	ip, [r0, #5]
   11d90:	eor	ip, ip, #1
   11d94:	strb	ip, [r0, #5]
   11d98:	cmp	r1, r2
   11d9c:	bne	11d3c <__assert_fail@plt+0xddc>
   11da0:	mov	r0, #1
   11da4:	pop	{r4, pc}
   11da8:	mov	r0, #0
   11dac:	pop	{r4, pc}
   11db0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11db4:	mov	ip, #0
   11db8:	cmp	r2, #0
   11dbc:	ldr	lr, [sp, #48]	; 0x30
   11dc0:	str	ip, [lr]
   11dc4:	beq	11df0 <__assert_fail@plt+0xe90>
   11dc8:	ldr	sl, [pc, #272]	; 11ee0 <__assert_fail@plt+0xf80>
   11dcc:	add	fp, r1, r2
   11dd0:	movw	r8, #7225	; 0x1c39
   11dd4:	ldr	r9, [pc, #264]	; 11ee4 <__assert_fail@plt+0xf84>
   11dd8:	cmp	fp, r1
   11ddc:	bne	11e08 <__assert_fail@plt+0xea8>
   11de0:	ldr	r3, [r0, #4]
   11de4:	str	r3, [r0]
   11de8:	mov	r0, #1
   11dec:	b	11e00 <__assert_fail@plt+0xea0>
   11df0:	ldr	r0, [r0, #4]
   11df4:	cmp	r0, #0
   11df8:	movgt	r0, #0
   11dfc:	movle	r0, #1
   11e00:	add	sp, sp, #12
   11e04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e08:	ldrb	r2, [r1], #1
   11e0c:	cmp	r2, #10
   11e10:	beq	11dd8 <__assert_fail@plt+0xe78>
   11e14:	sub	r4, r2, #33	; 0x21
   11e18:	cmp	r4, #92	; 0x5c
   11e1c:	bls	11e28 <__assert_fail@plt+0xec8>
   11e20:	mov	r0, #0
   11e24:	b	11e00 <__assert_fail@plt+0xea0>
   11e28:	add	r2, sl, r2
   11e2c:	ldrsb	r5, [r2, #-17]	; 0xffffffef
   11e30:	cmp	r5, #0
   11e34:	blt	11e20 <__assert_fail@plt+0xec0>
   11e38:	ldr	r2, [r0, #4]
   11e3c:	add	r4, r2, #1
   11e40:	add	r2, r0, r2
   11e44:	cmp	r4, #5
   11e48:	str	r4, [r0, #4]
   11e4c:	strb	r5, [r2, #8]
   11e50:	bne	11dd8 <__assert_fail@plt+0xe78>
   11e54:	ldrb	r2, [r0, #10]
   11e58:	ldrb	r5, [r0, #9]
   11e5c:	ldrb	r4, [r0, #11]
   11e60:	mul	r2, r8, r2
   11e64:	ldr	r6, [pc, #124]	; 11ee8 <__assert_fail@plt+0xf88>
   11e68:	mla	r2, r9, r5, r2
   11e6c:	mov	r5, #85	; 0x55
   11e70:	smlabb	r2, r5, r4, r2
   11e74:	ldrb	r4, [r0, #12]
   11e78:	add	r2, r2, r4
   11e7c:	ldrb	r4, [r0, #8]
   11e80:	umull	r4, r5, r4, r6
   11e84:	adds	r6, r4, r2
   11e88:	adc	r7, r5, r2, asr #31
   11e8c:	lsr	r2, r6, #24
   11e90:	orr	r2, r2, r7, lsl #8
   11e94:	bic	r4, r2, #255	; 0xff
   11e98:	str	r4, [sp]
   11e9c:	asr	r4, r7, #24
   11ea0:	str	r4, [sp, #4]
   11ea4:	ldrd	r4, [sp]
   11ea8:	orrs	r4, r4, r5
   11eac:	bne	11e20 <__assert_fail@plt+0xec0>
   11eb0:	strb	r2, [r3]
   11eb4:	lsr	r2, r6, #16
   11eb8:	add	r3, r3, #4
   11ebc:	strb	r2, [r3, #-3]
   11ec0:	lsr	r2, r6, #8
   11ec4:	strb	r6, [r3, #-1]
   11ec8:	strb	r2, [r3, #-2]
   11ecc:	ldr	r2, [lr]
   11ed0:	add	r2, r2, #4
   11ed4:	str	r2, [lr]
   11ed8:	str	ip, [r0, #4]
   11edc:	b	11dd8 <__assert_fail@plt+0xe78>
   11ee0:	andeq	r6, r1, r8, asr #2
   11ee4:	andeq	r5, r9, sp, ror #29
   11ee8:	tsteq	ip, #-1325400064	; 0xb1000000
   11eec:	push	{r4, r5, r6, lr}
   11ef0:	mov	r5, #0
   11ef4:	cmp	r2, #0
   11ef8:	addne	r2, r1, r2
   11efc:	ldr	r6, [sp, #16]
   11f00:	str	r5, [r6]
   11f04:	bne	11f78 <__assert_fail@plt+0x1018>
   11f08:	ldr	r0, [r0]
   11f0c:	clz	r0, r0
   11f10:	lsr	r0, r0, #5
   11f14:	pop	{r4, r5, r6, pc}
   11f18:	ldrb	ip, [r1], #1
   11f1c:	cmp	ip, #10
   11f20:	beq	11f78 <__assert_fail@plt+0x1018>
   11f24:	sub	lr, ip, #48	; 0x30
   11f28:	cmp	lr, #1
   11f2c:	bhi	11f88 <__assert_fail@plt+0x1028>
   11f30:	sub	r4, ip, #49	; 0x31
   11f34:	ldrb	ip, [r0, #4]
   11f38:	clz	r4, r4
   11f3c:	ldr	lr, [r0]
   11f40:	lsr	r4, r4, #5
   11f44:	orr	ip, ip, r4, lsl lr
   11f48:	add	lr, lr, #1
   11f4c:	cmp	lr, #8
   11f50:	uxtb	ip, ip
   11f54:	str	lr, [r0]
   11f58:	strb	ip, [r0, #4]
   11f5c:	bne	11f78 <__assert_fail@plt+0x1018>
   11f60:	strb	ip, [r3], #1
   11f64:	strb	r5, [r0, #4]
   11f68:	ldr	ip, [r6]
   11f6c:	add	ip, ip, #1
   11f70:	str	ip, [r6]
   11f74:	str	r5, [r0]
   11f78:	cmp	r2, r1
   11f7c:	bne	11f18 <__assert_fail@plt+0xfb8>
   11f80:	mov	r0, #1
   11f84:	pop	{r4, r5, r6, pc}
   11f88:	mov	r0, #0
   11f8c:	pop	{r4, r5, r6, pc}
   11f90:	push	{r4, r5, r6, lr}
   11f94:	mov	ip, #0
   11f98:	cmp	r2, #0
   11f9c:	addne	r2, r1, r2
   11fa0:	movne	r6, #8
   11fa4:	ldr	r5, [sp, #16]
   11fa8:	str	ip, [r5]
   11fac:	bne	1202c <__assert_fail@plt+0x10cc>
   11fb0:	ldr	r0, [r0]
   11fb4:	clz	r0, r0
   11fb8:	lsr	r0, r0, #5
   11fbc:	pop	{r4, r5, r6, pc}
   11fc0:	ldrb	lr, [r1], #1
   11fc4:	cmp	lr, #10
   11fc8:	beq	1202c <__assert_fail@plt+0x10cc>
   11fcc:	sub	ip, lr, #48	; 0x30
   11fd0:	cmp	ip, #1
   11fd4:	bhi	1203c <__assert_fail@plt+0x10dc>
   11fd8:	ldr	ip, [r0]
   11fdc:	sub	r4, lr, #49	; 0x31
   11fe0:	clz	r4, r4
   11fe4:	ldrb	lr, [r0, #4]
   11fe8:	lsr	r4, r4, #5
   11fec:	cmp	ip, #0
   11ff0:	streq	r6, [r0]
   11ff4:	ldr	ip, [r0]
   11ff8:	sub	ip, ip, #1
   11ffc:	orr	lr, lr, r4, lsl ip
   12000:	cmp	ip, #0
   12004:	str	ip, [r0]
   12008:	uxtb	lr, lr
   1200c:	strb	lr, [r0, #4]
   12010:	bne	1202c <__assert_fail@plt+0x10cc>
   12014:	strb	lr, [r3], #1
   12018:	strb	ip, [r0, #4]
   1201c:	ldr	lr, [r5]
   12020:	add	lr, lr, #1
   12024:	str	lr, [r5]
   12028:	str	ip, [r0]
   1202c:	cmp	r2, r1
   12030:	bne	11fc0 <__assert_fail@plt+0x1060>
   12034:	mov	r0, #1
   12038:	pop	{r4, r5, r6, pc}
   1203c:	mov	r0, #0
   12040:	pop	{r4, r5, r6, pc}
   12044:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12048:	sub	sp, sp, #20
   1204c:	mov	r5, #0
   12050:	mov	r6, r0
   12054:	mov	r7, r2
   12058:	str	r3, [sp, #4]
   1205c:	add	r3, r0, r1
   12060:	str	r3, [sp]
   12064:	mov	r3, r5
   12068:	ldr	r2, [sp]
   1206c:	cmp	r6, r2
   12070:	bne	1209c <__assert_fail@plt+0x113c>
   12074:	cmp	r3, #0
   12078:	beq	1216c <__assert_fail@plt+0x120c>
   1207c:	mov	r2, #5
   12080:	ldr	r1, [pc, #236]	; 12174 <__assert_fail@plt+0x1214>
   12084:	mov	r0, #0
   12088:	bl	10d8c <dcgettext@plt>
   1208c:	mov	r2, r0
   12090:	mov	r1, #0
   12094:	mov	r0, #1
   12098:	bl	10df8 <error@plt>
   1209c:	add	r2, sp, #16
   120a0:	add	r4, r3, #1
   120a4:	add	r3, r2, r3
   120a8:	ldrb	r2, [r6], #1
   120ac:	cmp	r4, #4
   120b0:	strb	r2, [r3, #-4]
   120b4:	bne	12164 <__assert_fail@plt+0x1204>
   120b8:	ldrb	r0, [sp, #12]
   120bc:	ldrb	r1, [sp, #13]
   120c0:	lsl	r8, r0, #24
   120c4:	lsr	r9, r0, #8
   120c8:	ldrb	r0, [sp, #15]
   120cc:	lsl	r1, r1, #16
   120d0:	adds	r2, r8, r1
   120d4:	adc	r3, r9, r1, asr #31
   120d8:	ldrb	r1, [sp, #14]
   120dc:	lsl	r1, r1, #8
   120e0:	adds	sl, r2, r1
   120e4:	adc	fp, r3, r1, asr #31
   120e8:	mov	r1, #0
   120ec:	adds	r9, r0, sl
   120f0:	adc	r8, r1, fp
   120f4:	mov	r2, #85	; 0x55
   120f8:	mov	r3, #0
   120fc:	mov	r0, r9
   12100:	mov	r1, r8
   12104:	bl	15e78 <__assert_fail@plt+0x4f18>
   12108:	ldr	r2, [sp, #4]
   1210c:	add	r3, r5, r4
   12110:	mov	fp, r0
   12114:	mov	sl, r1
   12118:	cmp	r2, r3
   1211c:	ble	12144 <__assert_fail@plt+0x11e4>
   12120:	mov	r2, #85	; 0x55
   12124:	mov	r3, #0
   12128:	mov	r0, r9
   1212c:	mov	r1, r8
   12130:	bl	15e78 <__assert_fail@plt+0x4f18>
   12134:	ldr	r3, [pc, #60]	; 12178 <__assert_fail@plt+0x1218>
   12138:	add	r2, r3, r2
   1213c:	ldrb	r3, [r2, #109]	; 0x6d
   12140:	strb	r3, [r7, r4]
   12144:	sub	r4, r4, #1
   12148:	mov	r9, fp
   1214c:	cmn	r4, #1
   12150:	mov	r8, sl
   12154:	bne	120f4 <__assert_fail@plt+0x1194>
   12158:	add	r7, r7, #5
   1215c:	add	r5, r5, #5
   12160:	mov	r4, #0
   12164:	mov	r3, r4
   12168:	b	12068 <__assert_fail@plt+0x1108>
   1216c:	add	sp, sp, #20
   12170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12174:			; <UNDEFINED> instruction: 0x000163b7
   12178:	andeq	r6, r1, r8, asr #2
   1217c:	push	{r4, r5, r6, lr}
   12180:	mov	r5, r3
   12184:	mov	r4, r2
   12188:	add	r5, r4, r5
   1218c:	bl	12884 <__assert_fail@plt+0x1924>
   12190:	ldr	r3, [pc, #56]	; 121d0 <__assert_fail@plt+0x1270>
   12194:	cmp	r4, r5
   12198:	popeq	{r4, r5, r6, pc}
   1219c:	ldrb	r2, [r4]
   121a0:	sub	r1, r2, #50	; 0x32
   121a4:	cmp	r1, #40	; 0x28
   121a8:	bls	121c0 <__assert_fail@plt+0x1260>
   121ac:	ldr	r3, [pc, #32]	; 121d4 <__assert_fail@plt+0x1274>
   121b0:	mov	r2, #452	; 0x1c4
   121b4:	ldr	r1, [pc, #28]	; 121d8 <__assert_fail@plt+0x1278>
   121b8:	ldr	r0, [pc, #28]	; 121dc <__assert_fail@plt+0x127c>
   121bc:	bl	10f60 <__assert_fail@plt>
   121c0:	add	r2, r3, r2
   121c4:	ldrb	r2, [r2, #161]	; 0xa1
   121c8:	strb	r2, [r4], #1
   121cc:	b	12194 <__assert_fail@plt+0x1234>
   121d0:	andeq	r6, r1, r8, asr #2
   121d4:	andeq	r6, r1, sl, lsl #4
   121d8:	andeq	r6, r1, pc, ror #7
   121dc:	strdeq	r6, [r1], -ip
   121e0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   121e4:	mov	r7, r3
   121e8:	mov	r4, r0
   121ec:	mov	r8, r1
   121f0:	mov	r5, r2
   121f4:	ldr	r3, [r0, #20]
   121f8:	ldr	r6, [sp, #32]
   121fc:	cmp	r2, r3
   12200:	ble	1221c <__assert_fail@plt+0x12bc>
   12204:	lsl	r1, r2, #1
   12208:	mov	r2, #1
   1220c:	ldr	r0, [r0, #16]
   12210:	str	r1, [r4, #20]
   12214:	bl	153f4 <__assert_fail@plt+0x4494>
   12218:	str	r0, [r4, #16]
   1221c:	mov	r1, r8
   12220:	mov	r2, r5
   12224:	ldr	r0, [r4, #16]
   12228:	bl	10d50 <memcpy@plt>
   1222c:	ldr	r3, [r4, #16]
   12230:	mov	r0, #47	; 0x2f
   12234:	mov	ip, #43	; 0x2b
   12238:	add	r1, r3, r5
   1223c:	cmp	r3, r1
   12240:	bne	12268 <__assert_fail@plt+0x1308>
   12244:	mov	r3, r7
   12248:	mov	r2, r5
   1224c:	ldr	r1, [r4, #16]
   12250:	add	r0, r4, #4
   12254:	str	r6, [sp]
   12258:	bl	130d8 <__assert_fail@plt+0x2178>
   1225c:	ldr	r3, [r4, #4]
   12260:	str	r3, [r4]
   12264:	b	12280 <__assert_fail@plt+0x1320>
   12268:	ldrb	r2, [r3]
   1226c:	and	lr, r2, #251	; 0xfb
   12270:	cmp	lr, #43	; 0x2b
   12274:	bne	12288 <__assert_fail@plt+0x1328>
   12278:	mov	r0, #0
   1227c:	str	r0, [r6]
   12280:	add	sp, sp, #8
   12284:	pop	{r4, r5, r6, r7, r8, pc}
   12288:	cmp	r2, #45	; 0x2d
   1228c:	strbeq	ip, [r3]
   12290:	beq	1229c <__assert_fail@plt+0x133c>
   12294:	cmp	r2, #95	; 0x5f
   12298:	strbeq	r0, [r3]
   1229c:	add	r3, r3, #1
   122a0:	b	1223c <__assert_fail@plt+0x12dc>
   122a4:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   122a8:	mov	r8, r3
   122ac:	mov	r4, r0
   122b0:	mov	r7, r1
   122b4:	mov	r5, r2
   122b8:	ldr	r3, [r0, #20]
   122bc:	cmp	r2, r3
   122c0:	ble	122dc <__assert_fail@plt+0x137c>
   122c4:	lsl	r1, r2, #1
   122c8:	mov	r2, #1
   122cc:	ldr	r0, [r0, #16]
   122d0:	str	r1, [r4, #20]
   122d4:	bl	153f4 <__assert_fail@plt+0x4494>
   122d8:	str	r0, [r4, #16]
   122dc:	ldr	r6, [r4, #16]
   122e0:	sub	r1, r7, #1
   122e4:	ldr	r9, [pc, #84]	; 12340 <__assert_fail@plt+0x13e0>
   122e8:	add	r7, r6, r5
   122ec:	cmp	r6, r7
   122f0:	bne	12320 <__assert_fail@plt+0x13c0>
   122f4:	ldr	r3, [sp, #40]	; 0x28
   122f8:	mov	r2, r5
   122fc:	add	r0, r4, #4
   12300:	ldr	r1, [r4, #16]
   12304:	str	r3, [sp]
   12308:	mov	r3, r8
   1230c:	bl	12af4 <__assert_fail@plt+0x1b94>
   12310:	ldr	r3, [r4, #4]
   12314:	str	r3, [r4]
   12318:	add	sp, sp, #12
   1231c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12320:	ldrb	r2, [r1, #1]!
   12324:	mov	r0, r2
   12328:	bl	11974 <__assert_fail@plt+0xa14>
   1232c:	cmp	r0, #0
   12330:	addne	r2, r9, r2
   12334:	ldrbne	r2, [r2, #204]	; 0xcc
   12338:	strb	r2, [r6], #1
   1233c:	b	122ec <__assert_fail@plt+0x138c>
   12340:	andeq	r6, r1, r8, asr #2
   12344:	subs	r5, r0, #0
   12348:	push	{r7, lr}
   1234c:	sub	sp, sp, #56	; 0x38
   12350:	ldr	r4, [pc, #736]	; 12638 <__assert_fail@plt+0x16d8>
   12354:	beq	1238c <__assert_fail@plt+0x142c>
   12358:	mov	r2, #5
   1235c:	mov	r0, #0
   12360:	ldr	r3, [pc, #724]	; 1263c <__assert_fail@plt+0x16dc>
   12364:	ldr	r1, [pc, #724]	; 12640 <__assert_fail@plt+0x16e0>
   12368:	ldr	r6, [r3]
   1236c:	bl	10d8c <dcgettext@plt>
   12370:	mov	r2, r0
   12374:	mov	r1, #1
   12378:	ldr	r3, [r4]
   1237c:	mov	r0, r6
   12380:	bl	10eac <__fprintf_chk@plt>
   12384:	mov	r0, r5
   12388:	bl	10e4c <exit@plt>
   1238c:	mov	r2, #5
   12390:	ldr	r1, [pc, #684]	; 12644 <__assert_fail@plt+0x16e4>
   12394:	mov	r6, sp
   12398:	bl	10d8c <dcgettext@plt>
   1239c:	ldr	r2, [r4]
   123a0:	mov	r1, r0
   123a4:	mov	r0, #1
   123a8:	bl	10e94 <__printf_chk@plt>
   123ac:	ldr	r4, [pc, #660]	; 12648 <__assert_fail@plt+0x16e8>
   123b0:	mov	r2, #5
   123b4:	mov	r0, r5
   123b8:	ldr	r1, [pc, #652]	; 1264c <__assert_fail@plt+0x16ec>
   123bc:	bl	10d8c <dcgettext@plt>
   123c0:	ldr	r7, [pc, #648]	; 12650 <__assert_fail@plt+0x16f0>
   123c4:	ldr	r1, [r4]
   123c8:	bl	10cf0 <fputs_unlocked@plt>
   123cc:	mov	r2, #5
   123d0:	ldr	r1, [pc, #636]	; 12654 <__assert_fail@plt+0x16f4>
   123d4:	mov	r0, r5
   123d8:	bl	10d8c <dcgettext@plt>
   123dc:	ldr	r1, [r4]
   123e0:	bl	10cf0 <fputs_unlocked@plt>
   123e4:	mov	r2, #5
   123e8:	ldr	r1, [pc, #616]	; 12658 <__assert_fail@plt+0x16f8>
   123ec:	mov	r0, r5
   123f0:	bl	10d8c <dcgettext@plt>
   123f4:	ldr	r1, [r4]
   123f8:	bl	10cf0 <fputs_unlocked@plt>
   123fc:	mov	r2, #5
   12400:	ldr	r1, [pc, #596]	; 1265c <__assert_fail@plt+0x16fc>
   12404:	mov	r0, r5
   12408:	bl	10d8c <dcgettext@plt>
   1240c:	ldr	r1, [r4]
   12410:	bl	10cf0 <fputs_unlocked@plt>
   12414:	mov	r2, #5
   12418:	ldr	r1, [pc, #576]	; 12660 <__assert_fail@plt+0x1700>
   1241c:	mov	r0, r5
   12420:	bl	10d8c <dcgettext@plt>
   12424:	ldr	r1, [r4]
   12428:	bl	10cf0 <fputs_unlocked@plt>
   1242c:	mov	r2, #5
   12430:	ldr	r1, [pc, #556]	; 12664 <__assert_fail@plt+0x1704>
   12434:	mov	r0, r5
   12438:	bl	10d8c <dcgettext@plt>
   1243c:	ldr	r1, [r4]
   12440:	bl	10cf0 <fputs_unlocked@plt>
   12444:	mov	r2, #5
   12448:	ldr	r1, [pc, #536]	; 12668 <__assert_fail@plt+0x1708>
   1244c:	mov	r0, r5
   12450:	bl	10d8c <dcgettext@plt>
   12454:	ldr	r1, [r4]
   12458:	bl	10cf0 <fputs_unlocked@plt>
   1245c:	mov	r2, #5
   12460:	ldr	r1, [pc, #516]	; 1266c <__assert_fail@plt+0x170c>
   12464:	mov	r0, r5
   12468:	bl	10d8c <dcgettext@plt>
   1246c:	ldr	r1, [r4]
   12470:	bl	10cf0 <fputs_unlocked@plt>
   12474:	mov	r2, #5
   12478:	ldr	r1, [pc, #496]	; 12670 <__assert_fail@plt+0x1710>
   1247c:	mov	r0, r5
   12480:	bl	10d8c <dcgettext@plt>
   12484:	ldr	r1, [r4]
   12488:	bl	10cf0 <fputs_unlocked@plt>
   1248c:	mov	r2, #5
   12490:	ldr	r1, [pc, #476]	; 12674 <__assert_fail@plt+0x1714>
   12494:	mov	r0, r5
   12498:	bl	10d8c <dcgettext@plt>
   1249c:	ldr	r1, [r4]
   124a0:	bl	10cf0 <fputs_unlocked@plt>
   124a4:	mov	r2, #5
   124a8:	ldr	r1, [pc, #456]	; 12678 <__assert_fail@plt+0x1718>
   124ac:	mov	r0, r5
   124b0:	bl	10d8c <dcgettext@plt>
   124b4:	ldr	r1, [r4]
   124b8:	bl	10cf0 <fputs_unlocked@plt>
   124bc:	mov	r2, #5
   124c0:	ldr	r1, [pc, #436]	; 1267c <__assert_fail@plt+0x171c>
   124c4:	mov	r0, r5
   124c8:	bl	10d8c <dcgettext@plt>
   124cc:	ldr	r1, [r4]
   124d0:	bl	10cf0 <fputs_unlocked@plt>
   124d4:	mov	r2, #5
   124d8:	ldr	r1, [pc, #416]	; 12680 <__assert_fail@plt+0x1720>
   124dc:	mov	r0, r5
   124e0:	bl	10d8c <dcgettext@plt>
   124e4:	ldr	r1, [r4]
   124e8:	bl	10cf0 <fputs_unlocked@plt>
   124ec:	mov	r2, #5
   124f0:	ldr	r1, [pc, #396]	; 12684 <__assert_fail@plt+0x1724>
   124f4:	mov	r0, r5
   124f8:	bl	10d8c <dcgettext@plt>
   124fc:	ldr	r1, [r4]
   12500:	bl	10cf0 <fputs_unlocked@plt>
   12504:	mov	r2, #5
   12508:	ldr	r1, [pc, #376]	; 12688 <__assert_fail@plt+0x1728>
   1250c:	mov	r0, r5
   12510:	bl	10d8c <dcgettext@plt>
   12514:	ldr	r1, [r4]
   12518:	bl	10cf0 <fputs_unlocked@plt>
   1251c:	ldr	lr, [pc, #360]	; 1268c <__assert_fail@plt+0x172c>
   12520:	mov	ip, sp
   12524:	ldm	lr!, {r0, r1, r2, r3}
   12528:	stmia	ip!, {r0, r1, r2, r3}
   1252c:	ldm	lr!, {r0, r1, r2, r3}
   12530:	stmia	ip!, {r0, r1, r2, r3}
   12534:	ldm	lr!, {r0, r1, r2, r3}
   12538:	stmia	ip!, {r0, r1, r2, r3}
   1253c:	ldm	lr, {r0, r1}
   12540:	stm	ip, {r0, r1}
   12544:	ldr	r1, [r6]
   12548:	cmp	r1, #0
   1254c:	bne	125f0 <__assert_fail@plt+0x1690>
   12550:	ldr	r6, [r6, #4]
   12554:	mov	r2, #5
   12558:	mov	r0, #0
   1255c:	ldr	r7, [pc, #236]	; 12650 <__assert_fail@plt+0x16f0>
   12560:	ldr	r1, [pc, #296]	; 12690 <__assert_fail@plt+0x1730>
   12564:	cmp	r6, #0
   12568:	moveq	r6, r7
   1256c:	bl	10d8c <dcgettext@plt>
   12570:	mov	r1, r0
   12574:	ldr	r3, [pc, #280]	; 12694 <__assert_fail@plt+0x1734>
   12578:	mov	r0, #1
   1257c:	ldr	r2, [pc, #276]	; 12698 <__assert_fail@plt+0x1738>
   12580:	bl	10e94 <__printf_chk@plt>
   12584:	mov	r1, #0
   12588:	mov	r0, #5
   1258c:	bl	10ee8 <setlocale@plt>
   12590:	cmp	r0, #0
   12594:	bne	12608 <__assert_fail@plt+0x16a8>
   12598:	mov	r2, #5
   1259c:	ldr	r1, [pc, #248]	; 1269c <__assert_fail@plt+0x173c>
   125a0:	mov	r0, #0
   125a4:	bl	10d8c <dcgettext@plt>
   125a8:	mov	r1, r0
   125ac:	ldr	r3, [pc, #156]	; 12650 <__assert_fail@plt+0x16f0>
   125b0:	mov	r0, #1
   125b4:	ldr	r2, [pc, #216]	; 12694 <__assert_fail@plt+0x1734>
   125b8:	bl	10e94 <__printf_chk@plt>
   125bc:	mov	r2, #5
   125c0:	ldr	r1, [pc, #216]	; 126a0 <__assert_fail@plt+0x1740>
   125c4:	mov	r0, #0
   125c8:	bl	10d8c <dcgettext@plt>
   125cc:	ldr	r2, [pc, #208]	; 126a4 <__assert_fail@plt+0x1744>
   125d0:	cmp	r6, r7
   125d4:	mov	r1, r0
   125d8:	mov	r0, #1
   125dc:	ldr	r3, [pc, #196]	; 126a8 <__assert_fail@plt+0x1748>
   125e0:	moveq	r3, r2
   125e4:	mov	r2, r6
   125e8:	bl	10e94 <__printf_chk@plt>
   125ec:	b	12384 <__assert_fail@plt+0x1424>
   125f0:	mov	r0, r7
   125f4:	bl	10d08 <strcmp@plt>
   125f8:	cmp	r0, #0
   125fc:	beq	12550 <__assert_fail@plt+0x15f0>
   12600:	add	r6, r6, #8
   12604:	b	12544 <__assert_fail@plt+0x15e4>
   12608:	mov	r2, #3
   1260c:	ldr	r1, [pc, #152]	; 126ac <__assert_fail@plt+0x174c>
   12610:	bl	10f3c <strncmp@plt>
   12614:	cmp	r0, #0
   12618:	beq	12598 <__assert_fail@plt+0x1638>
   1261c:	mov	r2, #5
   12620:	ldr	r1, [pc, #136]	; 126b0 <__assert_fail@plt+0x1750>
   12624:	mov	r0, #0
   12628:	bl	10d8c <dcgettext@plt>
   1262c:	ldr	r1, [r4]
   12630:	bl	10cf0 <fputs_unlocked@plt>
   12634:	b	12598 <__assert_fail@plt+0x1638>
   12638:	andeq	r8, r2, ip, ror r1
   1263c:	andeq	r8, r2, r8, asr #2
   12640:	andeq	r6, r1, ip, lsl r4
   12644:	andeq	r6, r1, r3, asr #8
   12648:	andeq	r8, r2, r4, asr r1
   1264c:	andeq	r6, r1, r1, ror #8
   12650:	andeq	r6, r1, r5, lsl r4
   12654:	andeq	r6, r1, r7, lsr #9
   12658:	ldrdeq	r6, [r1], -pc	; <UNPREDICTABLE>
   1265c:	andeq	r6, r1, sl, lsr #10
   12660:	andeq	r6, r1, r0, ror r5
   12664:			; <UNDEFINED> instruction: 0x000165b7
   12668:	strdeq	r6, [r1], -sp
   1266c:	andeq	r6, r1, r7, asr #12
   12670:	andeq	r6, r1, r1, lsl #13
   12674:	andeq	r6, r1, fp, asr #13
   12678:	andeq	r6, r1, r6, lsl r7
   1267c:	andeq	r6, r1, r8, lsl #16
   12680:	andeq	r6, r1, r6, ror #17
   12684:	andeq	r6, r1, r3, lsl r9
   12688:	andeq	r6, r1, r9, asr #18
   1268c:	andeq	r6, r1, r0, ror r2
   12690:	andeq	r6, r1, pc, lsl #20
   12694:	andeq	r6, r1, r6, lsr #20
   12698:	andeq	r6, r1, lr, asr #20
   1269c:	andeq	r6, r1, r7, lsr #21
   126a0:	andeq	r6, r1, r2, asr #21
   126a4:			; <UNDEFINED> instruction: 0x00016bb3
   126a8:	strdeq	r6, [r1], -r4
   126ac:	andeq	r6, r1, ip, asr sl
   126b0:	andeq	r6, r1, r0, ror #20
   126b4:	cmp	r1, #7
   126b8:	ble	12878 <__assert_fail@plt+0x1918>
   126bc:	push	{r4, r5, r6, lr}
   126c0:	ldr	lr, [pc, #440]	; 12880 <__assert_fail@plt+0x1920>
   126c4:	ldrb	r1, [r0]
   126c8:	ldrsb	r4, [lr, r1]
   126cc:	cmp	r4, #0
   126d0:	blt	12780 <__assert_fail@plt+0x1820>
   126d4:	ldrb	r1, [r0, #1]
   126d8:	ldrsb	r5, [lr, r1]
   126dc:	cmp	r5, #0
   126e0:	blt	12780 <__assert_fail@plt+0x1820>
   126e4:	ldr	ip, [r3]
   126e8:	ldr	r1, [r2]
   126ec:	cmp	ip, #0
   126f0:	beq	1270c <__assert_fail@plt+0x17ac>
   126f4:	asr	ip, r5, #2
   126f8:	orr	ip, ip, r4, lsl #3
   126fc:	strb	ip, [r1], #1
   12700:	ldr	ip, [r3]
   12704:	sub	ip, ip, #1
   12708:	str	ip, [r3]
   1270c:	ldrb	ip, [r0, #2]
   12710:	cmp	ip, #61	; 0x3d
   12714:	bne	12760 <__assert_fail@plt+0x1800>
   12718:	ldrb	r3, [r0, #3]
   1271c:	cmp	r3, #61	; 0x3d
   12720:	bne	1277c <__assert_fail@plt+0x181c>
   12724:	ldrb	r3, [r0, #4]
   12728:	cmp	r3, #61	; 0x3d
   1272c:	bne	1277c <__assert_fail@plt+0x181c>
   12730:	ldrb	r3, [r0, #5]
   12734:	cmp	r3, #61	; 0x3d
   12738:	bne	1277c <__assert_fail@plt+0x181c>
   1273c:	ldrb	r3, [r0, #6]
   12740:	cmp	r3, #61	; 0x3d
   12744:	bne	1277c <__assert_fail@plt+0x181c>
   12748:	ldrb	r3, [r0, #7]
   1274c:	cmp	r3, #61	; 0x3d
   12750:	bne	1277c <__assert_fail@plt+0x181c>
   12754:	mov	r0, #1
   12758:	str	r1, [r2]
   1275c:	pop	{r4, r5, r6, pc}
   12760:	ldrsb	ip, [lr, ip]
   12764:	cmp	ip, #0
   12768:	blt	1277c <__assert_fail@plt+0x181c>
   1276c:	ldrb	r4, [r0, #3]
   12770:	ldrsb	r4, [lr, r4]
   12774:	cmp	r4, #0
   12778:	bge	12788 <__assert_fail@plt+0x1828>
   1277c:	str	r1, [r2]
   12780:	mov	r0, #0
   12784:	pop	{r4, r5, r6, pc}
   12788:	ldr	r6, [r3]
   1278c:	cmp	r6, #0
   12790:	beq	127b0 <__assert_fail@plt+0x1850>
   12794:	lsl	ip, ip, #1
   12798:	orr	ip, ip, r5, lsl #6
   1279c:	orr	ip, ip, r4, asr #4
   127a0:	strb	ip, [r1], #1
   127a4:	ldr	ip, [r3]
   127a8:	sub	ip, ip, #1
   127ac:	str	ip, [r3]
   127b0:	ldrb	ip, [r0, #4]
   127b4:	cmp	ip, #61	; 0x3d
   127b8:	beq	12730 <__assert_fail@plt+0x17d0>
   127bc:	ldrsb	r5, [lr, ip]
   127c0:	cmp	r5, #0
   127c4:	blt	1277c <__assert_fail@plt+0x181c>
   127c8:	ldr	ip, [r3]
   127cc:	cmp	ip, #0
   127d0:	beq	127ec <__assert_fail@plt+0x188c>
   127d4:	asr	ip, r5, #1
   127d8:	orr	ip, ip, r4, lsl #4
   127dc:	strb	ip, [r1], #1
   127e0:	ldr	ip, [r3]
   127e4:	sub	ip, ip, #1
   127e8:	str	ip, [r3]
   127ec:	ldrb	ip, [r0, #5]
   127f0:	cmp	ip, #61	; 0x3d
   127f4:	beq	1273c <__assert_fail@plt+0x17dc>
   127f8:	ldrsb	ip, [lr, ip]
   127fc:	cmp	ip, #0
   12800:	blt	1277c <__assert_fail@plt+0x181c>
   12804:	ldrb	r4, [r0, #6]
   12808:	ldrsb	r4, [lr, r4]
   1280c:	cmp	r4, #0
   12810:	blt	1277c <__assert_fail@plt+0x181c>
   12814:	ldr	r6, [r3]
   12818:	cmp	r6, #0
   1281c:	beq	1283c <__assert_fail@plt+0x18dc>
   12820:	lsl	ip, ip, #2
   12824:	orr	ip, ip, r5, lsl #7
   12828:	orr	ip, ip, r4, asr #3
   1282c:	strb	ip, [r1], #1
   12830:	ldr	ip, [r3]
   12834:	sub	ip, ip, #1
   12838:	str	ip, [r3]
   1283c:	ldrb	r0, [r0, #7]
   12840:	cmp	r0, #61	; 0x3d
   12844:	beq	12754 <__assert_fail@plt+0x17f4>
   12848:	ldrsb	r0, [lr, r0]
   1284c:	cmp	r0, #0
   12850:	blt	1277c <__assert_fail@plt+0x181c>
   12854:	ldr	ip, [r3]
   12858:	cmp	ip, #0
   1285c:	beq	12754 <__assert_fail@plt+0x17f4>
   12860:	orr	r0, r0, r4, lsl #5
   12864:	strb	r0, [r1], #1
   12868:	ldr	r0, [r3]
   1286c:	sub	r0, r0, #1
   12870:	str	r0, [r3]
   12874:	b	12754 <__assert_fail@plt+0x17f4>
   12878:	mov	r0, #0
   1287c:	bx	lr
   12880:	andeq	r6, r1, lr, ror #24
   12884:	push	{r4, r5, lr}
   12888:	ldr	r4, [pc, #432]	; 12a40 <__assert_fail@plt+0x1ae0>
   1288c:	adds	ip, r3, #0
   12890:	movne	ip, #1
   12894:	cmp	r1, #0
   12898:	moveq	ip, #0
   1289c:	cmp	ip, #0
   128a0:	bne	128b0 <__assert_fail@plt+0x1950>
   128a4:	cmp	r3, #0
   128a8:	strbne	ip, [r2]
   128ac:	pop	{r4, r5, pc}
   128b0:	ldrb	ip, [r0]
   128b4:	cmp	r3, #1
   128b8:	add	lr, r4, ip, lsr #3
   128bc:	ldrb	lr, [lr, #256]	; 0x100
   128c0:	strb	lr, [r2]
   128c4:	popeq	{r4, r5, pc}
   128c8:	lsl	lr, ip, #2
   128cc:	subs	ip, r1, #1
   128d0:	ldrbne	r5, [r0, #1]
   128d4:	moveq	r5, ip
   128d8:	lsrne	r5, r5, #6
   128dc:	cmp	r3, #2
   128e0:	add	lr, lr, r5
   128e4:	and	lr, lr, #31
   128e8:	add	lr, r4, lr
   128ec:	ldrb	lr, [lr, #256]	; 0x100
   128f0:	strb	lr, [r2, #1]
   128f4:	popeq	{r4, r5, pc}
   128f8:	cmp	ip, #0
   128fc:	ldrbne	lr, [r0, #1]
   12900:	moveq	lr, #61	; 0x3d
   12904:	ubfxne	lr, lr, #1, #5
   12908:	addne	lr, r4, lr
   1290c:	ldrbne	lr, [lr, #256]	; 0x100
   12910:	cmp	r3, #3
   12914:	strb	lr, [r2, #2]
   12918:	popeq	{r4, r5, pc}
   1291c:	cmp	ip, #0
   12920:	moveq	r1, #61	; 0x3d
   12924:	beq	12950 <__assert_fail@plt+0x19f0>
   12928:	subs	ip, r1, #2
   1292c:	ldrb	lr, [r0, #1]
   12930:	moveq	r1, ip
   12934:	ldrbne	r1, [r0, #2]
   12938:	lsl	lr, lr, #4
   1293c:	lsrne	r1, r1, #4
   12940:	add	lr, lr, r1
   12944:	and	lr, lr, #31
   12948:	add	lr, r4, lr
   1294c:	ldrb	r1, [lr, #256]	; 0x100
   12950:	cmp	r3, #4
   12954:	strb	r1, [r2, #3]
   12958:	popeq	{r4, r5, pc}
   1295c:	cmp	ip, #0
   12960:	moveq	r1, #61	; 0x3d
   12964:	beq	12990 <__assert_fail@plt+0x1a30>
   12968:	subs	ip, ip, #1
   1296c:	ldrb	r1, [r0, #2]
   12970:	moveq	lr, ip
   12974:	ldrbne	lr, [r0, #3]
   12978:	lsl	r1, r1, #1
   1297c:	lsrne	lr, lr, #7
   12980:	add	r1, r1, lr
   12984:	and	r1, r1, #31
   12988:	add	r1, r4, r1
   1298c:	ldrb	r1, [r1, #256]	; 0x100
   12990:	cmp	r3, #5
   12994:	strb	r1, [r2, #4]
   12998:	popeq	{r4, r5, pc}
   1299c:	cmp	ip, #0
   129a0:	ldrbne	r1, [r0, #3]
   129a4:	moveq	r1, #61	; 0x3d
   129a8:	ubfxne	r1, r1, #2, #5
   129ac:	addne	r1, r4, r1
   129b0:	ldrbne	r1, [r1, #256]	; 0x100
   129b4:	cmp	r3, #6
   129b8:	strb	r1, [r2, #5]
   129bc:	popeq	{r4, r5, pc}
   129c0:	cmp	ip, #0
   129c4:	moveq	r1, #61	; 0x3d
   129c8:	beq	129f4 <__assert_fail@plt+0x1a94>
   129cc:	subs	ip, ip, #1
   129d0:	ldrb	r1, [r0, #3]
   129d4:	moveq	lr, ip
   129d8:	ldrbne	lr, [r0, #4]
   129dc:	lsl	r1, r1, #3
   129e0:	lsrne	lr, lr, #5
   129e4:	add	r1, r1, lr
   129e8:	and	r1, r1, #31
   129ec:	add	r1, r4, r1
   129f0:	ldrb	r1, [r1, #256]	; 0x100
   129f4:	cmp	r3, #7
   129f8:	strb	r1, [r2, #6]
   129fc:	popeq	{r4, r5, pc}
   12a00:	cmp	ip, #0
   12a04:	add	r2, r2, #8
   12a08:	ldrbne	r1, [r0, #4]
   12a0c:	moveq	r1, #61	; 0x3d
   12a10:	andne	r1, r1, #31
   12a14:	addne	r1, r4, r1
   12a18:	ldrbne	r1, [r1, #256]	; 0x100
   12a1c:	subs	r3, r3, #8
   12a20:	strb	r1, [r2, #-1]
   12a24:	popeq	{r4, r5, pc}
   12a28:	cmp	ip, #0
   12a2c:	beq	12a38 <__assert_fail@plt+0x1ad8>
   12a30:	subs	ip, ip, #1
   12a34:	addne	r0, r0, #5
   12a38:	mov	r1, ip
   12a3c:	b	1288c <__assert_fail@plt+0x192c>
   12a40:	andeq	r6, r1, lr, ror #24
   12a44:	push	{r4, r5, r6, r7, r8, lr}
   12a48:	mov	r4, #5
   12a4c:	sdiv	r4, r1, r4
   12a50:	add	r3, r4, r4, lsl #2
   12a54:	cmp	r1, r3
   12a58:	addne	r4, r4, #1
   12a5c:	asr	r7, r4, #31
   12a60:	mov	r6, r4
   12a64:	lsl	r3, r7, #3
   12a68:	orr	r3, r3, r4, lsr #29
   12a6c:	lsl	r4, r4, #3
   12a70:	cmp	r3, r4, asr #31
   12a74:	movne	r3, #1
   12a78:	moveq	r3, #0
   12a7c:	orrs	r3, r3, r1, lsr #31
   12a80:	movne	r5, #0
   12a84:	strne	r5, [r2]
   12a88:	bne	12ac8 <__assert_fail@plt+0x1b68>
   12a8c:	add	r5, r4, #1
   12a90:	mov	r8, r0
   12a94:	mov	r0, r5
   12a98:	mov	r7, r2
   12a9c:	mov	r6, r1
   12aa0:	bl	15be0 <__assert_fail@plt+0x4c80>
   12aa4:	cmp	r0, #0
   12aa8:	mov	r2, r0
   12aac:	str	r0, [r7]
   12ab0:	beq	12ac8 <__assert_fail@plt+0x1b68>
   12ab4:	mov	r3, r5
   12ab8:	mov	r1, r6
   12abc:	mov	r0, r8
   12ac0:	mov	r5, r4
   12ac4:	bl	12884 <__assert_fail@plt+0x1924>
   12ac8:	mov	r0, r5
   12acc:	pop	{r4, r5, r6, r7, r8, pc}
   12ad0:	ldr	r3, [pc, #12]	; 12ae4 <__assert_fail@plt+0x1b84>
   12ad4:	ldrb	r0, [r3, r0]
   12ad8:	mvn	r0, r0
   12adc:	ubfx	r0, r0, #7, #1
   12ae0:	bx	lr
   12ae4:	andeq	r6, r1, lr, ror #24
   12ae8:	mov	r3, #0
   12aec:	str	r3, [r0]
   12af0:	bx	lr
   12af4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12af8:	sub	sp, sp, #28
   12afc:	subs	r8, r0, #0
   12b00:	clzne	r9, r2
   12b04:	moveq	r9, r8
   12b08:	lsrne	r9, r9, #5
   12b0c:	mov	r7, r1
   12b10:	moveq	fp, r8
   12b14:	ldr	sl, [sp, #64]	; 0x40
   12b18:	str	r3, [sp, #12]
   12b1c:	eor	r9, r9, #1
   12b20:	ldrne	fp, [r8]
   12b24:	ldr	r3, [sl]
   12b28:	str	r3, [sp, #20]
   12b2c:	movne	r3, #1
   12b30:	moveq	r3, #0
   12b34:	str	r3, [sp, #4]
   12b38:	ldr	r3, [sp, #4]
   12b3c:	and	r3, r9, r3
   12b40:	str	r3, [sp, #8]
   12b44:	cmp	fp, #0
   12b48:	moveq	r3, r9
   12b4c:	movne	r3, #0
   12b50:	cmp	r3, #0
   12b54:	moveq	r4, r2
   12b58:	moveq	r5, r7
   12b5c:	ldreq	r6, [sp, #20]
   12b60:	beq	12b94 <__assert_fail@plt+0x1c34>
   12b64:	mov	r5, r7
   12b68:	add	r7, r7, r2
   12b6c:	sub	r4, r7, r5
   12b70:	add	r3, sp, #20
   12b74:	ldr	r6, [sp, #20]
   12b78:	add	r2, sp, #12
   12b7c:	mov	r1, r4
   12b80:	mov	r0, r5
   12b84:	bl	126b4 <__assert_fail@plt+0x1754>
   12b88:	cmp	r0, #0
   12b8c:	addne	r5, r5, #8
   12b90:	bne	12b6c <__assert_fail@plt+0x1c0c>
   12b94:	cmp	r4, #0
   12b98:	moveq	r3, r9
   12b9c:	movne	r3, #0
   12ba0:	cmp	r3, #0
   12ba4:	bne	12cd0 <__assert_fail@plt+0x1d70>
   12ba8:	cmp	r4, #0
   12bac:	beq	12bd8 <__assert_fail@plt+0x1c78>
   12bb0:	ldrb	r3, [r5]
   12bb4:	ldr	r2, [sp, #4]
   12bb8:	cmp	r3, #10
   12bbc:	movne	r2, #0
   12bc0:	andeq	r2, r2, #1
   12bc4:	cmp	r2, #0
   12bc8:	mov	r3, r2
   12bcc:	addne	r7, r5, #1
   12bd0:	subne	r2, r4, #1
   12bd4:	bne	12b44 <__assert_fail@plt+0x1be4>
   12bd8:	ldr	r3, [sp, #20]
   12bdc:	cmp	r8, #0
   12be0:	str	r6, [sp, #20]
   12be4:	sub	r2, r6, r3
   12be8:	ldr	r3, [sp, #12]
   12bec:	add	r6, r5, r4
   12bf0:	sub	r3, r3, r2
   12bf4:	str	r3, [sp, #12]
   12bf8:	beq	12cc8 <__assert_fail@plt+0x1d68>
   12bfc:	ldr	r3, [r8]
   12c00:	cmp	r3, #8
   12c04:	moveq	r3, #0
   12c08:	streq	r3, [r8]
   12c0c:	cmp	r4, #7
   12c10:	ldr	r2, [r8]
   12c14:	movle	r4, #0
   12c18:	movgt	r4, #1
   12c1c:	cmp	r2, #0
   12c20:	movne	r4, #0
   12c24:	cmp	r4, #0
   12c28:	beq	12c4c <__assert_fail@plt+0x1cec>
   12c2c:	mov	r2, #8
   12c30:	mov	r1, #10
   12c34:	mov	r0, r5
   12c38:	bl	10eb8 <memchr@plt>
   12c3c:	cmp	r0, #0
   12c40:	addeq	r7, r5, #8
   12c44:	moveq	r4, #8
   12c48:	beq	12ca4 <__assert_fail@plt+0x1d44>
   12c4c:	mov	r7, r5
   12c50:	cmp	r6, r7
   12c54:	bls	12c80 <__assert_fail@plt+0x1d20>
   12c58:	ldrb	r1, [r7], #1
   12c5c:	cmp	r1, #10
   12c60:	beq	12c50 <__assert_fail@plt+0x1cf0>
   12c64:	ldr	r0, [r8]
   12c68:	mov	r3, r8
   12c6c:	add	r2, r0, #1
   12c70:	cmp	r2, #8
   12c74:	str	r2, [r3], r0
   12c78:	strb	r1, [r3, #4]
   12c7c:	bne	12c50 <__assert_fail@plt+0x1cf0>
   12c80:	mov	r5, r8
   12c84:	ldr	r4, [r5], #4
   12c88:	cmp	r4, #0
   12c8c:	beq	12cd0 <__assert_fail@plt+0x1d70>
   12c90:	cmp	r4, #7
   12c94:	bgt	12ca4 <__assert_fail@plt+0x1d44>
   12c98:	ldr	r3, [sp, #8]
   12c9c:	cmp	r3, #0
   12ca0:	bne	12cd0 <__assert_fail@plt+0x1d70>
   12ca4:	add	r3, sp, #20
   12ca8:	add	r2, sp, #12
   12cac:	mov	r1, r4
   12cb0:	mov	r0, r5
   12cb4:	bl	126b4 <__assert_fail@plt+0x1754>
   12cb8:	cmp	r0, #0
   12cbc:	beq	12cd4 <__assert_fail@plt+0x1d74>
   12cc0:	sub	r2, r6, r7
   12cc4:	b	12b44 <__assert_fail@plt+0x1be4>
   12cc8:	mov	r7, r5
   12ccc:	b	12c88 <__assert_fail@plt+0x1d28>
   12cd0:	mov	r4, #0
   12cd4:	ldr	r3, [sl]
   12cd8:	clz	r0, r4
   12cdc:	lsr	r0, r0, #5
   12ce0:	ldr	r2, [sp, #20]
   12ce4:	sub	r3, r3, r2
   12ce8:	str	r3, [sl]
   12cec:	add	sp, sp, #28
   12cf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cf4:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   12cf8:	mov	r7, r0
   12cfc:	asr	r0, r2, #3
   12d00:	mov	r5, r3
   12d04:	mov	r8, r1
   12d08:	add	r0, r0, #1
   12d0c:	mov	r4, r2
   12d10:	add	r0, r0, r0, lsl #2
   12d14:	ldr	r6, [sp, #40]	; 0x28
   12d18:	str	r0, [sp, #12]
   12d1c:	bl	15be0 <__assert_fail@plt+0x4c80>
   12d20:	cmp	r0, #0
   12d24:	str	r0, [r5]
   12d28:	bne	12d3c <__assert_fail@plt+0x1ddc>
   12d2c:	mov	r4, #1
   12d30:	mov	r0, r4
   12d34:	add	sp, sp, #16
   12d38:	pop	{r4, r5, r6, r7, r8, pc}
   12d3c:	add	r2, sp, #12
   12d40:	mov	r3, r0
   12d44:	mov	r1, r8
   12d48:	mov	r0, r7
   12d4c:	str	r2, [sp]
   12d50:	mov	r2, r4
   12d54:	bl	12af4 <__assert_fail@plt+0x1b94>
   12d58:	subs	r4, r0, #0
   12d5c:	bne	12d70 <__assert_fail@plt+0x1e10>
   12d60:	ldr	r0, [r5]
   12d64:	bl	13784 <__assert_fail@plt+0x2824>
   12d68:	str	r4, [r5]
   12d6c:	b	12d30 <__assert_fail@plt+0x1dd0>
   12d70:	cmp	r6, #0
   12d74:	beq	12d2c <__assert_fail@plt+0x1dcc>
   12d78:	ldr	r3, [sp, #12]
   12d7c:	str	r3, [r6]
   12d80:	b	12d30 <__assert_fail@plt+0x1dd0>
   12d84:	cmp	r1, #1
   12d88:	ble	12e98 <__assert_fail@plt+0x1f38>
   12d8c:	push	{r4, r5, r6, lr}
   12d90:	ldr	r4, [pc, #264]	; 12ea0 <__assert_fail@plt+0x1f40>
   12d94:	ldrb	ip, [r0]
   12d98:	ldrsb	r5, [r4, ip]
   12d9c:	cmp	r5, #0
   12da0:	blt	12de8 <__assert_fail@plt+0x1e88>
   12da4:	ldrb	ip, [r0, #1]
   12da8:	ldrsb	r6, [r4, ip]
   12dac:	cmp	r6, #0
   12db0:	blt	12de8 <__assert_fail@plt+0x1e88>
   12db4:	ldr	lr, [r3]
   12db8:	ldr	ip, [r2]
   12dbc:	cmp	lr, #0
   12dc0:	beq	12ddc <__assert_fail@plt+0x1e7c>
   12dc4:	asr	lr, r6, #4
   12dc8:	orr	lr, lr, r5, lsl #2
   12dcc:	strb	lr, [ip], #1
   12dd0:	ldr	lr, [r3]
   12dd4:	sub	lr, lr, #1
   12dd8:	str	lr, [r3]
   12ddc:	cmp	r1, #2
   12de0:	bne	12df0 <__assert_fail@plt+0x1e90>
   12de4:	str	ip, [r2]
   12de8:	mov	r0, #0
   12dec:	pop	{r4, r5, r6, pc}
   12df0:	ldrb	lr, [r0, #2]
   12df4:	cmp	lr, #61	; 0x3d
   12df8:	bne	12e1c <__assert_fail@plt+0x1ebc>
   12dfc:	cmp	r1, #4
   12e00:	bne	12de4 <__assert_fail@plt+0x1e84>
   12e04:	ldrb	r3, [r0, #3]
   12e08:	cmp	r3, #61	; 0x3d
   12e0c:	bne	12de4 <__assert_fail@plt+0x1e84>
   12e10:	mov	r0, #1
   12e14:	str	ip, [r2]
   12e18:	pop	{r4, r5, r6, pc}
   12e1c:	ldrsb	r5, [r4, lr]
   12e20:	cmp	r5, #0
   12e24:	blt	12de4 <__assert_fail@plt+0x1e84>
   12e28:	ldr	lr, [r3]
   12e2c:	cmp	lr, #0
   12e30:	beq	12e4c <__assert_fail@plt+0x1eec>
   12e34:	asr	lr, r5, #2
   12e38:	orr	lr, lr, r6, lsl #4
   12e3c:	strb	lr, [ip], #1
   12e40:	ldr	lr, [r3]
   12e44:	sub	lr, lr, #1
   12e48:	str	lr, [r3]
   12e4c:	cmp	r1, #3
   12e50:	beq	12de4 <__assert_fail@plt+0x1e84>
   12e54:	ldrb	r0, [r0, #3]
   12e58:	cmp	r0, #61	; 0x3d
   12e5c:	bne	12e68 <__assert_fail@plt+0x1f08>
   12e60:	cmp	r1, #4
   12e64:	b	12e0c <__assert_fail@plt+0x1eac>
   12e68:	ldrsb	r1, [r4, r0]
   12e6c:	cmp	r1, #0
   12e70:	blt	12de4 <__assert_fail@plt+0x1e84>
   12e74:	ldr	r0, [r3]
   12e78:	cmp	r0, #0
   12e7c:	beq	12e10 <__assert_fail@plt+0x1eb0>
   12e80:	orr	r1, r1, r5, lsl #6
   12e84:	strb	r1, [ip], #1
   12e88:	ldr	r1, [r3]
   12e8c:	sub	r1, r1, #1
   12e90:	str	r1, [r3]
   12e94:	b	12e10 <__assert_fail@plt+0x1eb0>
   12e98:	mov	r0, #0
   12e9c:	bx	lr
   12ea0:	andeq	r6, r1, lr, lsl #27
   12ea4:	tst	r3, #3
   12ea8:	push	{r4, r5, lr}
   12eac:	bne	12ec8 <__assert_fail@plt+0x1f68>
   12eb0:	asr	ip, r3, #2
   12eb4:	add	ip, ip, ip, lsl #1
   12eb8:	cmp	ip, r1
   12ebc:	addeq	r3, r0, ip
   12ec0:	ldreq	lr, [pc, #348]	; 13024 <__assert_fail@plt+0x20c4>
   12ec4:	beq	12f2c <__assert_fail@plt+0x1fcc>
   12ec8:	ldr	r4, [pc, #340]	; 13024 <__assert_fail@plt+0x20c4>
   12ecc:	b	13000 <__assert_fail@plt+0x20a0>
   12ed0:	ldrb	r1, [r0]
   12ed4:	add	r0, r0, #3
   12ed8:	ldrb	r4, [r0, #-2]
   12edc:	add	ip, lr, r1, lsr #2
   12ee0:	ldrb	ip, [ip, #256]	; 0x100
   12ee4:	strb	ip, [r2, #-4]
   12ee8:	lsr	ip, r4, #4
   12eec:	add	ip, ip, r1, lsl #4
   12ef0:	and	ip, ip, #63	; 0x3f
   12ef4:	add	ip, lr, ip
   12ef8:	ldrb	r1, [ip, #256]	; 0x100
   12efc:	ldrb	ip, [r0, #-1]
   12f00:	strb	r1, [r2, #-3]
   12f04:	lsr	r1, ip, #6
   12f08:	and	ip, ip, #63	; 0x3f
   12f0c:	add	ip, lr, ip
   12f10:	add	r1, r1, r4, lsl #2
   12f14:	and	r1, r1, #63	; 0x3f
   12f18:	add	r1, lr, r1
   12f1c:	ldrb	r1, [r1, #256]	; 0x100
   12f20:	strb	r1, [r2, #-2]
   12f24:	ldrb	r1, [ip, #256]	; 0x100
   12f28:	strb	r1, [r2, #-1]
   12f2c:	cmp	r0, r3
   12f30:	add	r2, r2, #4
   12f34:	bne	12ed0 <__assert_fail@plt+0x1f70>
   12f38:	pop	{r4, r5, pc}
   12f3c:	ldrb	ip, [r0]
   12f40:	cmp	r3, #1
   12f44:	add	lr, r4, ip, lsr #2
   12f48:	ldrb	lr, [lr, #256]	; 0x100
   12f4c:	strb	lr, [r2]
   12f50:	popeq	{r4, r5, pc}
   12f54:	lsl	lr, ip, #4
   12f58:	subs	ip, r1, #1
   12f5c:	ldrbne	r5, [r0, #1]
   12f60:	moveq	r5, ip
   12f64:	lsrne	r5, r5, #4
   12f68:	cmp	r3, #2
   12f6c:	add	lr, lr, r5
   12f70:	and	lr, lr, #63	; 0x3f
   12f74:	add	lr, r4, lr
   12f78:	ldrb	lr, [lr, #256]	; 0x100
   12f7c:	strb	lr, [r2, #1]
   12f80:	popeq	{r4, r5, pc}
   12f84:	cmp	ip, #0
   12f88:	moveq	r1, #61	; 0x3d
   12f8c:	beq	12fb8 <__assert_fail@plt+0x2058>
   12f90:	subs	ip, r1, #2
   12f94:	ldrb	lr, [r0, #1]
   12f98:	moveq	r1, ip
   12f9c:	ldrbne	r1, [r0, #2]
   12fa0:	lsl	lr, lr, #2
   12fa4:	lsrne	r1, r1, #6
   12fa8:	add	lr, lr, r1
   12fac:	and	lr, lr, #63	; 0x3f
   12fb0:	add	lr, r4, lr
   12fb4:	ldrb	r1, [lr, #256]	; 0x100
   12fb8:	cmp	r3, #3
   12fbc:	strb	r1, [r2, #2]
   12fc0:	popeq	{r4, r5, pc}
   12fc4:	cmp	ip, #0
   12fc8:	add	r2, r2, #4
   12fcc:	ldrbne	r1, [r0, #2]
   12fd0:	moveq	r1, #61	; 0x3d
   12fd4:	andne	r1, r1, #63	; 0x3f
   12fd8:	addne	r1, r4, r1
   12fdc:	ldrbne	r1, [r1, #256]	; 0x100
   12fe0:	subs	r3, r3, #4
   12fe4:	strb	r1, [r2, #-1]
   12fe8:	popeq	{r4, r5, pc}
   12fec:	cmp	ip, #0
   12ff0:	beq	12ffc <__assert_fail@plt+0x209c>
   12ff4:	subs	ip, ip, #1
   12ff8:	addne	r0, r0, #3
   12ffc:	mov	r1, ip
   13000:	adds	ip, r3, #0
   13004:	movne	ip, #1
   13008:	cmp	r1, #0
   1300c:	moveq	ip, #0
   13010:	cmp	ip, #0
   13014:	bne	12f3c <__assert_fail@plt+0x1fdc>
   13018:	cmp	r3, #0
   1301c:	strbne	ip, [r2]
   13020:	pop	{r4, r5, pc}
   13024:	andeq	r6, r1, lr, lsl #27
   13028:	push	{r4, r5, r6, r7, r8, lr}
   1302c:	mov	r4, #3
   13030:	sdiv	r4, r1, r4
   13034:	add	r3, r4, r4, lsl #1
   13038:	cmp	r1, r3
   1303c:	addne	r4, r4, #1
   13040:	asr	r7, r4, #31
   13044:	mov	r6, r4
   13048:	lsl	r3, r7, #2
   1304c:	orr	r3, r3, r4, lsr #30
   13050:	lsl	r4, r4, #2
   13054:	cmp	r3, r4, asr #31
   13058:	movne	r3, #1
   1305c:	moveq	r3, #0
   13060:	orrs	r3, r3, r1, lsr #31
   13064:	movne	r5, #0
   13068:	strne	r5, [r2]
   1306c:	bne	130ac <__assert_fail@plt+0x214c>
   13070:	add	r5, r4, #1
   13074:	mov	r8, r0
   13078:	mov	r0, r5
   1307c:	mov	r7, r2
   13080:	mov	r6, r1
   13084:	bl	15be0 <__assert_fail@plt+0x4c80>
   13088:	cmp	r0, #0
   1308c:	mov	r2, r0
   13090:	str	r0, [r7]
   13094:	beq	130ac <__assert_fail@plt+0x214c>
   13098:	mov	r3, r5
   1309c:	mov	r1, r6
   130a0:	mov	r0, r8
   130a4:	mov	r5, r4
   130a8:	bl	12ea4 <__assert_fail@plt+0x1f44>
   130ac:	mov	r0, r5
   130b0:	pop	{r4, r5, r6, r7, r8, pc}
   130b4:	ldr	r3, [pc, #12]	; 130c8 <__assert_fail@plt+0x2168>
   130b8:	ldrb	r0, [r3, r0]
   130bc:	mvn	r0, r0
   130c0:	ubfx	r0, r0, #7, #1
   130c4:	bx	lr
   130c8:	andeq	r6, r1, lr, lsl #27
   130cc:	mov	r3, #0
   130d0:	str	r3, [r0]
   130d4:	bx	lr
   130d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130dc:	sub	sp, sp, #28
   130e0:	subs	r8, r0, #0
   130e4:	clzne	r9, r2
   130e8:	moveq	r9, r8
   130ec:	lsrne	r9, r9, #5
   130f0:	mov	r7, r1
   130f4:	moveq	fp, r8
   130f8:	ldr	sl, [sp, #64]	; 0x40
   130fc:	str	r3, [sp, #12]
   13100:	eor	r9, r9, #1
   13104:	ldrne	fp, [r8]
   13108:	ldr	r3, [sl]
   1310c:	str	r3, [sp, #20]
   13110:	movne	r3, #1
   13114:	moveq	r3, #0
   13118:	str	r3, [sp, #4]
   1311c:	ldr	r3, [sp, #4]
   13120:	and	r3, r9, r3
   13124:	str	r3, [sp, #8]
   13128:	cmp	fp, #0
   1312c:	moveq	r3, r9
   13130:	movne	r3, #0
   13134:	cmp	r3, #0
   13138:	moveq	r4, r2
   1313c:	moveq	r5, r7
   13140:	ldreq	r6, [sp, #20]
   13144:	beq	13178 <__assert_fail@plt+0x2218>
   13148:	mov	r5, r7
   1314c:	add	r7, r7, r2
   13150:	sub	r4, r7, r5
   13154:	add	r3, sp, #20
   13158:	ldr	r6, [sp, #20]
   1315c:	add	r2, sp, #12
   13160:	mov	r1, r4
   13164:	mov	r0, r5
   13168:	bl	12d84 <__assert_fail@plt+0x1e24>
   1316c:	cmp	r0, #0
   13170:	addne	r5, r5, #4
   13174:	bne	13150 <__assert_fail@plt+0x21f0>
   13178:	cmp	r4, #0
   1317c:	moveq	r3, r9
   13180:	movne	r3, #0
   13184:	cmp	r3, #0
   13188:	bne	132b4 <__assert_fail@plt+0x2354>
   1318c:	cmp	r4, #0
   13190:	beq	131bc <__assert_fail@plt+0x225c>
   13194:	ldrb	r3, [r5]
   13198:	ldr	r2, [sp, #4]
   1319c:	cmp	r3, #10
   131a0:	movne	r2, #0
   131a4:	andeq	r2, r2, #1
   131a8:	cmp	r2, #0
   131ac:	mov	r3, r2
   131b0:	addne	r7, r5, #1
   131b4:	subne	r2, r4, #1
   131b8:	bne	13128 <__assert_fail@plt+0x21c8>
   131bc:	ldr	r3, [sp, #20]
   131c0:	cmp	r8, #0
   131c4:	str	r6, [sp, #20]
   131c8:	sub	r2, r6, r3
   131cc:	ldr	r3, [sp, #12]
   131d0:	add	r6, r5, r4
   131d4:	sub	r3, r3, r2
   131d8:	str	r3, [sp, #12]
   131dc:	beq	132ac <__assert_fail@plt+0x234c>
   131e0:	ldr	r3, [r8]
   131e4:	cmp	r3, #4
   131e8:	moveq	r3, #0
   131ec:	streq	r3, [r8]
   131f0:	cmp	r4, #3
   131f4:	ldr	r2, [r8]
   131f8:	movle	r4, #0
   131fc:	movgt	r4, #1
   13200:	cmp	r2, #0
   13204:	movne	r4, #0
   13208:	cmp	r4, #0
   1320c:	beq	13230 <__assert_fail@plt+0x22d0>
   13210:	mov	r2, #4
   13214:	mov	r1, #10
   13218:	mov	r0, r5
   1321c:	bl	10eb8 <memchr@plt>
   13220:	cmp	r0, #0
   13224:	addeq	r7, r5, #4
   13228:	moveq	r4, #4
   1322c:	beq	13288 <__assert_fail@plt+0x2328>
   13230:	mov	r7, r5
   13234:	cmp	r6, r7
   13238:	bls	13264 <__assert_fail@plt+0x2304>
   1323c:	ldrb	r1, [r7], #1
   13240:	cmp	r1, #10
   13244:	beq	13234 <__assert_fail@plt+0x22d4>
   13248:	ldr	r0, [r8]
   1324c:	mov	r3, r8
   13250:	add	r2, r0, #1
   13254:	cmp	r2, #4
   13258:	str	r2, [r3], r0
   1325c:	strb	r1, [r3, #4]
   13260:	bne	13234 <__assert_fail@plt+0x22d4>
   13264:	mov	r5, r8
   13268:	ldr	r4, [r5], #4
   1326c:	cmp	r4, #0
   13270:	beq	132b4 <__assert_fail@plt+0x2354>
   13274:	cmp	r4, #3
   13278:	bgt	13288 <__assert_fail@plt+0x2328>
   1327c:	ldr	r3, [sp, #8]
   13280:	cmp	r3, #0
   13284:	bne	132b4 <__assert_fail@plt+0x2354>
   13288:	add	r3, sp, #20
   1328c:	add	r2, sp, #12
   13290:	mov	r1, r4
   13294:	mov	r0, r5
   13298:	bl	12d84 <__assert_fail@plt+0x1e24>
   1329c:	cmp	r0, #0
   132a0:	beq	132b8 <__assert_fail@plt+0x2358>
   132a4:	sub	r2, r6, r7
   132a8:	b	13128 <__assert_fail@plt+0x21c8>
   132ac:	mov	r7, r5
   132b0:	b	1326c <__assert_fail@plt+0x230c>
   132b4:	mov	r4, #0
   132b8:	ldr	r3, [sl]
   132bc:	clz	r0, r4
   132c0:	lsr	r0, r0, #5
   132c4:	ldr	r2, [sp, #20]
   132c8:	sub	r3, r3, r2
   132cc:	str	r3, [sl]
   132d0:	add	sp, sp, #28
   132d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132d8:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   132dc:	mov	r7, r0
   132e0:	asr	r0, r2, #2
   132e4:	mov	r5, r3
   132e8:	mov	r8, r1
   132ec:	add	r0, r0, #1
   132f0:	mov	r4, r2
   132f4:	add	r0, r0, r0, lsl #1
   132f8:	ldr	r6, [sp, #40]	; 0x28
   132fc:	str	r0, [sp, #12]
   13300:	bl	15be0 <__assert_fail@plt+0x4c80>
   13304:	cmp	r0, #0
   13308:	str	r0, [r5]
   1330c:	bne	13320 <__assert_fail@plt+0x23c0>
   13310:	mov	r4, #1
   13314:	mov	r0, r4
   13318:	add	sp, sp, #16
   1331c:	pop	{r4, r5, r6, r7, r8, pc}
   13320:	add	r2, sp, #12
   13324:	mov	r3, r0
   13328:	mov	r1, r8
   1332c:	mov	r0, r7
   13330:	str	r2, [sp]
   13334:	mov	r2, r4
   13338:	bl	130d8 <__assert_fail@plt+0x2178>
   1333c:	subs	r4, r0, #0
   13340:	bne	13354 <__assert_fail@plt+0x23f4>
   13344:	ldr	r0, [r5]
   13348:	bl	13784 <__assert_fail@plt+0x2824>
   1334c:	str	r4, [r5]
   13350:	b	13314 <__assert_fail@plt+0x23b4>
   13354:	cmp	r6, #0
   13358:	beq	13310 <__assert_fail@plt+0x23b0>
   1335c:	ldr	r3, [sp, #12]
   13360:	str	r3, [r6]
   13364:	b	13314 <__assert_fail@plt+0x23b4>
   13368:	cmp	r0, #90	; 0x5a
   1336c:	bgt	1338c <__assert_fail@plt+0x242c>
   13370:	cmp	r0, #65	; 0x41
   13374:	bge	13398 <__assert_fail@plt+0x2438>
   13378:	sub	r0, r0, #48	; 0x30
   1337c:	cmp	r0, #9
   13380:	movhi	r0, #0
   13384:	movls	r0, #1
   13388:	bx	lr
   1338c:	sub	r0, r0, #97	; 0x61
   13390:	cmp	r0, #25
   13394:	b	13380 <__assert_fail@plt+0x2420>
   13398:	mov	r0, #1
   1339c:	bx	lr
   133a0:	cmp	r0, #65	; 0x41
   133a4:	blt	133c4 <__assert_fail@plt+0x2464>
   133a8:	cmp	r0, #90	; 0x5a
   133ac:	ble	133cc <__assert_fail@plt+0x246c>
   133b0:	sub	r0, r0, #97	; 0x61
   133b4:	cmp	r0, #25
   133b8:	movhi	r0, #0
   133bc:	movls	r0, #1
   133c0:	bx	lr
   133c4:	mov	r0, #0
   133c8:	bx	lr
   133cc:	mov	r0, #1
   133d0:	bx	lr
   133d4:	cmp	r0, #127	; 0x7f
   133d8:	movhi	r0, #0
   133dc:	movls	r0, #1
   133e0:	bx	lr
   133e4:	cmp	r0, #9
   133e8:	cmpne	r0, #32
   133ec:	moveq	r0, #1
   133f0:	movne	r0, #0
   133f4:	bx	lr
   133f8:	cmp	r0, #0
   133fc:	blt	13418 <__assert_fail@plt+0x24b8>
   13400:	cmp	r0, #31
   13404:	ble	13420 <__assert_fail@plt+0x24c0>
   13408:	sub	r0, r0, #127	; 0x7f
   1340c:	clz	r0, r0
   13410:	lsr	r0, r0, #5
   13414:	bx	lr
   13418:	mov	r0, #0
   1341c:	bx	lr
   13420:	mov	r0, #1
   13424:	bx	lr
   13428:	sub	r0, r0, #48	; 0x30
   1342c:	cmp	r0, #9
   13430:	movhi	r0, #0
   13434:	movls	r0, #1
   13438:	bx	lr
   1343c:	sub	r0, r0, #33	; 0x21
   13440:	cmp	r0, #93	; 0x5d
   13444:	movhi	r0, #0
   13448:	movls	r0, #1
   1344c:	bx	lr
   13450:	sub	r0, r0, #97	; 0x61
   13454:	cmp	r0, #25
   13458:	movhi	r0, #0
   1345c:	movls	r0, #1
   13460:	bx	lr
   13464:	sub	r0, r0, #32
   13468:	cmp	r0, #94	; 0x5e
   1346c:	movhi	r0, #0
   13470:	movls	r0, #1
   13474:	bx	lr
   13478:	cmp	r0, #64	; 0x40
   1347c:	bgt	1349c <__assert_fail@plt+0x253c>
   13480:	cmp	r0, #58	; 0x3a
   13484:	bge	134c0 <__assert_fail@plt+0x2560>
   13488:	sub	r0, r0, #33	; 0x21
   1348c:	cmp	r0, #14
   13490:	movhi	r0, #0
   13494:	movls	r0, #1
   13498:	bx	lr
   1349c:	cmp	r0, #91	; 0x5b
   134a0:	blt	134b8 <__assert_fail@plt+0x2558>
   134a4:	cmp	r0, #96	; 0x60
   134a8:	ble	134c0 <__assert_fail@plt+0x2560>
   134ac:	sub	r0, r0, #123	; 0x7b
   134b0:	cmp	r0, #3
   134b4:	b	13490 <__assert_fail@plt+0x2530>
   134b8:	mov	r0, #0
   134bc:	bx	lr
   134c0:	mov	r0, #1
   134c4:	bx	lr
   134c8:	sub	r0, r0, #9
   134cc:	cmp	r0, #23
   134d0:	bhi	134ec <__assert_fail@plt+0x258c>
   134d4:	ldr	r3, [pc, #24]	; 134f4 <__assert_fail@plt+0x2594>
   134d8:	mov	r2, #1
   134dc:	ands	r3, r3, r2, lsl r0
   134e0:	movne	r0, r2
   134e4:	moveq	r0, #0
   134e8:	bx	lr
   134ec:	mov	r0, #0
   134f0:	bx	lr
   134f4:	addeq	r0, r0, pc, lsl r0
   134f8:	sub	r0, r0, #65	; 0x41
   134fc:	cmp	r0, #25
   13500:	movhi	r0, #0
   13504:	movls	r0, #1
   13508:	bx	lr
   1350c:	cmp	r0, #70	; 0x46
   13510:	bgt	13530 <__assert_fail@plt+0x25d0>
   13514:	cmp	r0, #65	; 0x41
   13518:	bge	1353c <__assert_fail@plt+0x25dc>
   1351c:	sub	r0, r0, #48	; 0x30
   13520:	cmp	r0, #9
   13524:	movhi	r0, #0
   13528:	movls	r0, #1
   1352c:	bx	lr
   13530:	sub	r0, r0, #97	; 0x61
   13534:	cmp	r0, #5
   13538:	b	13524 <__assert_fail@plt+0x25c4>
   1353c:	mov	r0, #1
   13540:	bx	lr
   13544:	sub	r3, r0, #65	; 0x41
   13548:	cmp	r3, #25
   1354c:	addls	r0, r0, #32
   13550:	bx	lr
   13554:	sub	r3, r0, #97	; 0x61
   13558:	cmp	r3, #25
   1355c:	subls	r0, r0, #32
   13560:	bx	lr
   13564:	ldr	r3, [pc, #4]	; 13570 <__assert_fail@plt+0x2610>
   13568:	str	r0, [r3]
   1356c:	bx	lr
   13570:	andeq	r8, r2, r4, ror r1
   13574:	ldr	r3, [pc, #4]	; 13580 <__assert_fail@plt+0x2620>
   13578:	strb	r0, [r3, #4]
   1357c:	bx	lr
   13580:	andeq	r8, r2, r4, ror r1
   13584:	ldr	r3, [pc, #176]	; 1363c <__assert_fail@plt+0x26dc>
   13588:	push	{r0, r1, r4, r5, r6, lr}
   1358c:	ldr	r0, [r3]
   13590:	bl	15c50 <__assert_fail@plt+0x4cf0>
   13594:	cmp	r0, #0
   13598:	beq	13620 <__assert_fail@plt+0x26c0>
   1359c:	ldr	r4, [pc, #156]	; 13640 <__assert_fail@plt+0x26e0>
   135a0:	bl	10e70 <__errno_location@plt>
   135a4:	mov	r5, r0
   135a8:	ldrb	r6, [r4, #4]
   135ac:	cmp	r6, #0
   135b0:	beq	135c0 <__assert_fail@plt+0x2660>
   135b4:	ldr	r3, [r0]
   135b8:	cmp	r3, #32
   135bc:	beq	13620 <__assert_fail@plt+0x26c0>
   135c0:	mov	r2, #5
   135c4:	ldr	r1, [pc, #120]	; 13644 <__assert_fail@plt+0x26e4>
   135c8:	mov	r0, #0
   135cc:	bl	10d8c <dcgettext@plt>
   135d0:	mov	r6, r0
   135d4:	ldr	r0, [r4]
   135d8:	cmp	r0, #0
   135dc:	beq	1360c <__assert_fail@plt+0x26ac>
   135e0:	ldr	r4, [r5]
   135e4:	bl	14d1c <__assert_fail@plt+0x3dbc>
   135e8:	mov	r3, r0
   135ec:	ldr	r2, [pc, #84]	; 13648 <__assert_fail@plt+0x26e8>
   135f0:	mov	r0, #0
   135f4:	str	r6, [sp]
   135f8:	mov	r1, r4
   135fc:	bl	10df8 <error@plt>
   13600:	ldr	r3, [pc, #68]	; 1364c <__assert_fail@plt+0x26ec>
   13604:	ldr	r0, [r3]
   13608:	bl	10d44 <_exit@plt>
   1360c:	mov	r3, r6
   13610:	ldr	r2, [pc, #56]	; 13650 <__assert_fail@plt+0x26f0>
   13614:	ldr	r1, [r5]
   13618:	bl	10df8 <error@plt>
   1361c:	b	13600 <__assert_fail@plt+0x26a0>
   13620:	ldr	r3, [pc, #44]	; 13654 <__assert_fail@plt+0x26f4>
   13624:	ldr	r0, [r3]
   13628:	bl	15c50 <__assert_fail@plt+0x4cf0>
   1362c:	cmp	r0, #0
   13630:	bne	13600 <__assert_fail@plt+0x26a0>
   13634:	add	sp, sp, #8
   13638:	pop	{r4, r5, r6, pc}
   1363c:	andeq	r8, r2, r4, asr r1
   13640:	andeq	r8, r2, r4, ror r1
   13644:	andeq	r6, r1, sp, ror fp
   13648:	andeq	r6, r1, pc, lsl fp
   1364c:	strdeq	r8, [r2], -r4
   13650:	andeq	r6, r1, r3, lsr #22
   13654:	andeq	r8, r2, r8, asr #2
   13658:	b	10d14 <posix_fadvise64@plt>
   1365c:	cmp	r0, #0
   13660:	bxeq	lr
   13664:	push	{r0, r1, r2, r3, r4, lr}
   13668:	mov	r4, r1
   1366c:	bl	10ea0 <fileno@plt>
   13670:	mov	r2, #0
   13674:	mov	r3, #0
   13678:	strd	r2, [sp]
   1367c:	str	r4, [sp, #8]
   13680:	bl	10d14 <posix_fadvise64@plt>
   13684:	add	sp, sp, #16
   13688:	pop	{r4, pc}
   1368c:	push	{r0, r1, r2, r4, r5, lr}
   13690:	mov	r4, r0
   13694:	bl	10ea0 <fileno@plt>
   13698:	cmp	r0, #0
   1369c:	mov	r0, r4
   136a0:	bge	136b0 <__assert_fail@plt+0x2750>
   136a4:	add	sp, sp, #12
   136a8:	pop	{r4, r5, lr}
   136ac:	b	10ed0 <fclose@plt>
   136b0:	bl	10e1c <__freading@plt>
   136b4:	cmp	r0, #0
   136b8:	bne	136f4 <__assert_fail@plt+0x2794>
   136bc:	mov	r0, r4
   136c0:	bl	13734 <__assert_fail@plt+0x27d4>
   136c4:	cmp	r0, #0
   136c8:	bne	13728 <__assert_fail@plt+0x27c8>
   136cc:	mov	r5, #0
   136d0:	mov	r0, r4
   136d4:	bl	10ed0 <fclose@plt>
   136d8:	cmp	r5, #0
   136dc:	beq	136ec <__assert_fail@plt+0x278c>
   136e0:	bl	10e70 <__errno_location@plt>
   136e4:	str	r5, [r0]
   136e8:	mvn	r0, #0
   136ec:	add	sp, sp, #12
   136f0:	pop	{r4, r5, pc}
   136f4:	mov	r0, r4
   136f8:	bl	10ea0 <fileno@plt>
   136fc:	mov	r3, #1
   13700:	mov	r2, #0
   13704:	str	r3, [sp]
   13708:	mov	r3, #0
   1370c:	bl	10dbc <lseek64@plt>
   13710:	mvn	r3, #0
   13714:	mvn	r2, #0
   13718:	cmp	r1, r3
   1371c:	cmpeq	r0, r2
   13720:	bne	136bc <__assert_fail@plt+0x275c>
   13724:	b	136cc <__assert_fail@plt+0x276c>
   13728:	bl	10e70 <__errno_location@plt>
   1372c:	ldr	r5, [r0]
   13730:	b	136d0 <__assert_fail@plt+0x2770>
   13734:	push	{r0, r1, r4, lr}
   13738:	subs	r4, r0, #0
   1373c:	bne	13750 <__assert_fail@plt+0x27f0>
   13740:	mov	r0, r4
   13744:	add	sp, sp, #8
   13748:	pop	{r4, lr}
   1374c:	b	10d20 <fflush@plt>
   13750:	bl	10e1c <__freading@plt>
   13754:	cmp	r0, #0
   13758:	beq	13740 <__assert_fail@plt+0x27e0>
   1375c:	ldr	r3, [r4]
   13760:	tst	r3, #256	; 0x100
   13764:	beq	13740 <__assert_fail@plt+0x27e0>
   13768:	mov	r3, #1
   1376c:	mov	r2, #0
   13770:	mov	r0, r4
   13774:	str	r3, [sp]
   13778:	mov	r3, #0
   1377c:	bl	137d4 <__assert_fail@plt+0x2874>
   13780:	b	13740 <__assert_fail@plt+0x27e0>
   13784:	push	{r0, r1, r2, r4, r5, lr}
   13788:	mov	r5, r0
   1378c:	bl	10e70 <__errno_location@plt>
   13790:	mov	r4, r0
   13794:	mov	r0, r5
   13798:	ldr	r3, [r4]
   1379c:	str	r3, [sp]
   137a0:	str	r3, [sp, #4]
   137a4:	mov	r3, #0
   137a8:	str	r3, [r4]
   137ac:	bl	10d38 <free@plt>
   137b0:	ldr	r3, [r4]
   137b4:	add	r2, sp, #8
   137b8:	clz	r3, r3
   137bc:	lsr	r3, r3, #5
   137c0:	add	r3, r2, r3, lsl #2
   137c4:	ldr	r3, [r3, #-8]
   137c8:	str	r3, [r4]
   137cc:	add	sp, sp, #12
   137d0:	pop	{r4, r5, pc}
   137d4:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   137d8:	mov	r4, r0
   137dc:	ldmib	r0, {ip, lr}
   137e0:	ldr	r8, [sp, #32]
   137e4:	cmp	lr, ip
   137e8:	bne	13858 <__assert_fail@plt+0x28f8>
   137ec:	ldr	ip, [r0, #16]
   137f0:	ldr	lr, [r0, #20]
   137f4:	cmp	lr, ip
   137f8:	bne	13858 <__assert_fail@plt+0x28f8>
   137fc:	ldr	r5, [r0, #36]	; 0x24
   13800:	cmp	r5, #0
   13804:	bne	13858 <__assert_fail@plt+0x28f8>
   13808:	mov	r6, r2
   1380c:	mov	r7, r3
   13810:	bl	10ea0 <fileno@plt>
   13814:	mov	r2, r6
   13818:	mov	r3, r7
   1381c:	str	r8, [sp]
   13820:	bl	10dbc <lseek64@plt>
   13824:	mvn	r3, #0
   13828:	mvn	r2, #0
   1382c:	cmp	r1, r3
   13830:	cmpeq	r0, r2
   13834:	mvneq	r0, #0
   13838:	beq	13850 <__assert_fail@plt+0x28f0>
   1383c:	ldr	r3, [r4]
   13840:	strd	r0, [r4, #80]	; 0x50
   13844:	mov	r0, r5
   13848:	bic	r3, r3, #16
   1384c:	str	r3, [r4]
   13850:	add	sp, sp, #8
   13854:	pop	{r4, r5, r6, r7, r8, pc}
   13858:	mov	r0, r4
   1385c:	str	r8, [sp, #32]
   13860:	add	sp, sp, #8
   13864:	pop	{r4, r5, r6, r7, r8, lr}
   13868:	b	10edc <fseeko64@plt>
   1386c:	push	{r4, r5, r6, lr}
   13870:	subs	r4, r0, #0
   13874:	bne	1388c <__assert_fail@plt+0x292c>
   13878:	ldr	r3, [pc, #124]	; 138fc <__assert_fail@plt+0x299c>
   1387c:	ldr	r0, [pc, #124]	; 13900 <__assert_fail@plt+0x29a0>
   13880:	ldr	r1, [r3]
   13884:	bl	10f30 <fputs@plt>
   13888:	bl	10f48 <abort@plt>
   1388c:	mov	r1, #47	; 0x2f
   13890:	bl	10ef4 <strrchr@plt>
   13894:	subs	r6, r0, #0
   13898:	beq	138e8 <__assert_fail@plt+0x2988>
   1389c:	add	r5, r6, #1
   138a0:	sub	r3, r5, r4
   138a4:	cmp	r3, #6
   138a8:	ble	138e8 <__assert_fail@plt+0x2988>
   138ac:	mov	r2, #7
   138b0:	ldr	r1, [pc, #76]	; 13904 <__assert_fail@plt+0x29a4>
   138b4:	sub	r0, r6, #6
   138b8:	bl	10f3c <strncmp@plt>
   138bc:	cmp	r0, #0
   138c0:	bne	138e8 <__assert_fail@plt+0x2988>
   138c4:	mov	r2, #3
   138c8:	ldr	r1, [pc, #56]	; 13908 <__assert_fail@plt+0x29a8>
   138cc:	mov	r0, r5
   138d0:	bl	10f3c <strncmp@plt>
   138d4:	cmp	r0, #0
   138d8:	ldreq	r3, [pc, #44]	; 1390c <__assert_fail@plt+0x29ac>
   138dc:	addeq	r4, r6, #4
   138e0:	movne	r4, r5
   138e4:	streq	r4, [r3]
   138e8:	ldr	r3, [pc, #32]	; 13910 <__assert_fail@plt+0x29b0>
   138ec:	str	r4, [r3]
   138f0:	ldr	r3, [pc, #28]	; 13914 <__assert_fail@plt+0x29b4>
   138f4:	str	r4, [r3]
   138f8:	pop	{r4, r5, r6, pc}
   138fc:	andeq	r8, r2, r8, asr #2
   13900:	andeq	r6, r1, lr, asr #29
   13904:	andeq	r6, r1, r6, lsl #30
   13908:	andeq	r6, r1, lr, lsl #30
   1390c:	andeq	r8, r2, r8, lsr r1
   13910:	andeq	r8, r2, ip, ror r1
   13914:	andeq	r8, r2, ip, lsr r1
   13918:	push	{r4, lr}
   1391c:	mov	r2, #48	; 0x30
   13920:	mov	r4, r1
   13924:	mov	r1, #0
   13928:	bl	10e88 <memset@plt>
   1392c:	cmp	r4, #10
   13930:	bne	13938 <__assert_fail@plt+0x29d8>
   13934:	bl	10f48 <abort@plt>
   13938:	str	r4, [r0]
   1393c:	pop	{r4, pc}
   13940:	push	{r4, r5, r6, lr}
   13944:	mov	r2, #5
   13948:	mov	r6, r0
   1394c:	mov	r5, r1
   13950:	mov	r1, r0
   13954:	mov	r0, #0
   13958:	bl	10d8c <dcgettext@plt>
   1395c:	cmp	r6, r0
   13960:	mov	r4, r0
   13964:	bne	139d4 <__assert_fail@plt+0x2a74>
   13968:	bl	15ce8 <__assert_fail@plt+0x4d88>
   1396c:	ldrb	r3, [r0]
   13970:	bic	r3, r3, #32
   13974:	cmp	r3, #85	; 0x55
   13978:	bne	139dc <__assert_fail@plt+0x2a7c>
   1397c:	ldrb	r3, [r0, #1]
   13980:	bic	r3, r3, #32
   13984:	cmp	r3, #84	; 0x54
   13988:	bne	13a4c <__assert_fail@plt+0x2aec>
   1398c:	ldrb	r3, [r0, #2]
   13990:	bic	r3, r3, #32
   13994:	cmp	r3, #70	; 0x46
   13998:	bne	13a4c <__assert_fail@plt+0x2aec>
   1399c:	ldrb	r3, [r0, #3]
   139a0:	cmp	r3, #45	; 0x2d
   139a4:	bne	13a4c <__assert_fail@plt+0x2aec>
   139a8:	ldrb	r3, [r0, #4]
   139ac:	cmp	r3, #56	; 0x38
   139b0:	bne	13a4c <__assert_fail@plt+0x2aec>
   139b4:	ldrb	r3, [r0, #5]
   139b8:	cmp	r3, #0
   139bc:	bne	13a4c <__assert_fail@plt+0x2aec>
   139c0:	ldrb	r2, [r4]
   139c4:	ldr	r3, [pc, #144]	; 13a5c <__assert_fail@plt+0x2afc>
   139c8:	ldr	r4, [pc, #144]	; 13a60 <__assert_fail@plt+0x2b00>
   139cc:	cmp	r2, #96	; 0x60
   139d0:	movne	r4, r3
   139d4:	mov	r0, r4
   139d8:	pop	{r4, r5, r6, pc}
   139dc:	cmp	r3, #71	; 0x47
   139e0:	bne	13a4c <__assert_fail@plt+0x2aec>
   139e4:	ldrb	r3, [r0, #1]
   139e8:	bic	r3, r3, #32
   139ec:	cmp	r3, #66	; 0x42
   139f0:	bne	13a4c <__assert_fail@plt+0x2aec>
   139f4:	ldrb	r3, [r0, #2]
   139f8:	cmp	r3, #49	; 0x31
   139fc:	bne	13a4c <__assert_fail@plt+0x2aec>
   13a00:	ldrb	r3, [r0, #3]
   13a04:	cmp	r3, #56	; 0x38
   13a08:	bne	13a4c <__assert_fail@plt+0x2aec>
   13a0c:	ldrb	r3, [r0, #4]
   13a10:	cmp	r3, #48	; 0x30
   13a14:	bne	13a4c <__assert_fail@plt+0x2aec>
   13a18:	ldrb	r3, [r0, #5]
   13a1c:	cmp	r3, #51	; 0x33
   13a20:	bne	13a4c <__assert_fail@plt+0x2aec>
   13a24:	ldrb	r3, [r0, #6]
   13a28:	cmp	r3, #48	; 0x30
   13a2c:	bne	13a4c <__assert_fail@plt+0x2aec>
   13a30:	ldrb	r3, [r0, #7]
   13a34:	cmp	r3, #0
   13a38:	bne	13a4c <__assert_fail@plt+0x2aec>
   13a3c:	ldrb	r2, [r4]
   13a40:	ldr	r3, [pc, #28]	; 13a64 <__assert_fail@plt+0x2b04>
   13a44:	ldr	r4, [pc, #28]	; 13a68 <__assert_fail@plt+0x2b08>
   13a48:	b	139cc <__assert_fail@plt+0x2a6c>
   13a4c:	ldr	r4, [pc, #24]	; 13a6c <__assert_fail@plt+0x2b0c>
   13a50:	cmp	r5, #9
   13a54:	ldr	r3, [pc, #20]	; 13a70 <__assert_fail@plt+0x2b10>
   13a58:	b	139d0 <__assert_fail@plt+0x2a70>
   13a5c:	andeq	r6, r1, sl, ror #30
   13a60:	andeq	r6, r1, r5, ror pc
   13a64:	andeq	r6, r1, lr, ror #30
   13a68:	andeq	r6, r1, r1, ror pc
   13a6c:	andeq	r6, r1, r8, ror #30
   13a70:	andeq	r6, r1, r9, ror pc
   13a74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a78:	sub	sp, sp, #108	; 0x6c
   13a7c:	mov	r8, r0
   13a80:	mov	r5, r1
   13a84:	mov	r6, #0
   13a88:	str	r3, [sp, #40]	; 0x28
   13a8c:	str	r2, [sp, #48]	; 0x30
   13a90:	ldr	sl, [sp, #144]	; 0x90
   13a94:	bl	10dc8 <__ctype_get_mb_cur_max@plt>
   13a98:	ldr	r3, [sp, #148]	; 0x94
   13a9c:	str	r6, [sp, #24]
   13aa0:	str	r6, [sp, #32]
   13aa4:	str	r6, [sp, #44]	; 0x2c
   13aa8:	str	r6, [sp, #52]	; 0x34
   13aac:	ubfx	r7, r3, #1, #1
   13ab0:	mov	r3, #1
   13ab4:	str	r6, [sp, #60]	; 0x3c
   13ab8:	str	r3, [sp, #72]	; 0x48
   13abc:	str	r0, [sp, #76]	; 0x4c
   13ac0:	cmp	sl, #10
   13ac4:	ldrls	pc, [pc, sl, lsl #2]
   13ac8:	b	13d0c <__assert_fail@plt+0x2dac>
   13acc:	strdeq	r3, [r1], -r8
   13ad0:	andeq	r3, r1, r4, lsr #26
   13ad4:	andeq	r3, r1, r8, lsr #25
   13ad8:	andeq	r3, r1, r0, asr #25
   13adc:	muleq	r1, r0, ip
   13ae0:	andeq	r3, r1, r8, ror #23
   13ae4:	andeq	r3, r1, r8, asr #23
   13ae8:	andeq	r3, r1, r0, lsl sp
   13aec:	andeq	r3, r1, r8, lsl ip
   13af0:	andeq	r3, r1, r8, lsl ip
   13af4:	andeq	r3, r1, r8, lsl ip
   13af8:	mov	r4, sl
   13afc:	mov	r7, #0
   13b00:	mov	r9, r5
   13b04:	mov	r3, #0
   13b08:	str	r6, [sp, #68]	; 0x44
   13b0c:	str	r3, [sp, #28]
   13b10:	ldr	r3, [sp, #40]	; 0x28
   13b14:	cmn	r3, #1
   13b18:	bne	146b8 <__assert_fail@plt+0x3758>
   13b1c:	ldr	r2, [sp, #28]
   13b20:	ldr	r3, [sp, #48]	; 0x30
   13b24:	ldrb	r3, [r3, r2]
   13b28:	adds	r3, r3, #0
   13b2c:	movne	r3, #1
   13b30:	str	r3, [sp, #36]	; 0x24
   13b34:	ldr	r3, [sp, #36]	; 0x24
   13b38:	cmp	r3, #0
   13b3c:	bne	13d48 <__assert_fail@plt+0x2de8>
   13b40:	sub	r3, sl, #2
   13b44:	cmp	r4, #0
   13b48:	clz	r3, r3
   13b4c:	movne	r2, #0
   13b50:	lsr	r3, r3, #5
   13b54:	andeq	r2, r3, r7
   13b58:	cmp	r2, #0
   13b5c:	bne	13f0c <__assert_fail@plt+0x2fac>
   13b60:	eor	r7, r7, #1
   13b64:	ands	r3, r3, r7
   13b68:	beq	14730 <__assert_fail@plt+0x37d0>
   13b6c:	ldr	r2, [sp, #68]	; 0x44
   13b70:	cmp	r2, #0
   13b74:	beq	146f8 <__assert_fail@plt+0x3798>
   13b78:	ldr	r3, [sp, #72]	; 0x48
   13b7c:	cmp	r3, #0
   13b80:	beq	146cc <__assert_fail@plt+0x376c>
   13b84:	ldr	r2, [sp, #48]	; 0x30
   13b88:	ldr	r3, [sp, #160]	; 0xa0
   13b8c:	ldr	r1, [sp, #60]	; 0x3c
   13b90:	str	r3, [sp, #16]
   13b94:	ldr	r3, [sp, #156]	; 0x9c
   13b98:	str	r3, [sp, #12]
   13b9c:	ldr	r3, [sp, #152]	; 0x98
   13ba0:	str	r3, [sp, #8]
   13ba4:	ldr	r3, [sp, #148]	; 0x94
   13ba8:	str	r3, [sp, #4]
   13bac:	mov	r3, #5
   13bb0:	str	r3, [sp]
   13bb4:	ldr	r3, [sp, #40]	; 0x28
   13bb8:	mov	r0, r8
   13bbc:	bl	13a74 <__assert_fail@plt+0x2b14>
   13bc0:	mov	r4, r0
   13bc4:	b	14724 <__assert_fail@plt+0x37c4>
   13bc8:	ldr	r3, [pc, #2948]	; 14754 <__assert_fail@plt+0x37f4>
   13bcc:	mov	r7, #1
   13bd0:	mov	r4, #0
   13bd4:	mov	sl, #5
   13bd8:	str	r7, [sp, #24]
   13bdc:	str	r7, [sp, #32]
   13be0:	str	r3, [sp, #44]	; 0x2c
   13be4:	b	13b00 <__assert_fail@plt+0x2ba0>
   13be8:	cmp	r7, #0
   13bec:	bne	13d30 <__assert_fail@plt+0x2dd0>
   13bf0:	cmp	r5, #0
   13bf4:	mov	r4, #1
   13bf8:	movne	r3, #34	; 0x22
   13bfc:	strbne	r3, [r8]
   13c00:	mov	r3, #1
   13c04:	str	r3, [sp, #24]
   13c08:	str	r3, [sp, #32]
   13c0c:	ldr	r3, [pc, #2880]	; 14754 <__assert_fail@plt+0x37f4>
   13c10:	str	r3, [sp, #44]	; 0x2c
   13c14:	b	13b00 <__assert_fail@plt+0x2ba0>
   13c18:	cmp	sl, #10
   13c1c:	beq	13c40 <__assert_fail@plt+0x2ce0>
   13c20:	mov	r1, sl
   13c24:	ldr	r0, [pc, #2860]	; 14758 <__assert_fail@plt+0x37f8>
   13c28:	bl	13940 <__assert_fail@plt+0x29e0>
   13c2c:	mov	r1, sl
   13c30:	str	r0, [sp, #156]	; 0x9c
   13c34:	ldr	r0, [pc, #2848]	; 1475c <__assert_fail@plt+0x37fc>
   13c38:	bl	13940 <__assert_fail@plt+0x29e0>
   13c3c:	str	r0, [sp, #160]	; 0xa0
   13c40:	cmp	r7, #0
   13c44:	moveq	r4, r7
   13c48:	beq	13c60 <__assert_fail@plt+0x2d00>
   13c4c:	mov	r4, #0
   13c50:	b	13c70 <__assert_fail@plt+0x2d10>
   13c54:	cmp	r5, r4
   13c58:	strbhi	r3, [r8, r4]
   13c5c:	add	r4, r4, #1
   13c60:	ldr	r3, [sp, #156]	; 0x9c
   13c64:	ldrb	r3, [r3, r4]
   13c68:	cmp	r3, #0
   13c6c:	bne	13c54 <__assert_fail@plt+0x2cf4>
   13c70:	ldr	r0, [sp, #160]	; 0xa0
   13c74:	bl	10e58 <strlen@plt>
   13c78:	ldr	r3, [sp, #160]	; 0xa0
   13c7c:	str	r0, [sp, #32]
   13c80:	str	r3, [sp, #44]	; 0x2c
   13c84:	mov	r3, #1
   13c88:	str	r3, [sp, #24]
   13c8c:	b	13b00 <__assert_fail@plt+0x2ba0>
   13c90:	mov	r3, #1
   13c94:	cmp	r7, #0
   13c98:	streq	r3, [sp, #24]
   13c9c:	beq	13ce0 <__assert_fail@plt+0x2d80>
   13ca0:	str	r3, [sp, #32]
   13ca4:	b	13ccc <__assert_fail@plt+0x2d6c>
   13ca8:	cmp	r7, #0
   13cac:	beq	13ce0 <__assert_fail@plt+0x2d80>
   13cb0:	mov	r3, #1
   13cb4:	str	r3, [sp, #32]
   13cb8:	ldr	r3, [pc, #2716]	; 1475c <__assert_fail@plt+0x37fc>
   13cbc:	b	13d40 <__assert_fail@plt+0x2de0>
   13cc0:	mov	r7, #1
   13cc4:	str	r7, [sp, #24]
   13cc8:	str	r7, [sp, #32]
   13ccc:	ldr	r3, [pc, #2696]	; 1475c <__assert_fail@plt+0x37fc>
   13cd0:	mov	r4, #0
   13cd4:	str	r3, [sp, #44]	; 0x2c
   13cd8:	mov	sl, #2
   13cdc:	b	13b00 <__assert_fail@plt+0x2ba0>
   13ce0:	cmp	r5, #0
   13ce4:	movne	r3, #39	; 0x27
   13ce8:	movne	r7, #0
   13cec:	strbne	r3, [r8]
   13cf0:	moveq	r7, r5
   13cf4:	mov	r3, #1
   13cf8:	mov	r4, #1
   13cfc:	str	r3, [sp, #32]
   13d00:	ldr	r3, [pc, #2644]	; 1475c <__assert_fail@plt+0x37fc>
   13d04:	str	r3, [sp, #44]	; 0x2c
   13d08:	b	13cd8 <__assert_fail@plt+0x2d78>
   13d0c:	bl	10f48 <abort@plt>
   13d10:	mov	r3, #1
   13d14:	mov	r7, #0
   13d18:	str	r3, [sp, #24]
   13d1c:	mov	r4, #0
   13d20:	b	13b00 <__assert_fail@plt+0x2ba0>
   13d24:	mov	r7, #1
   13d28:	str	sl, [sp, #32]
   13d2c:	b	13ccc <__assert_fail@plt+0x2d6c>
   13d30:	mov	r3, #1
   13d34:	str	r7, [sp, #24]
   13d38:	str	r3, [sp, #32]
   13d3c:	ldr	r3, [pc, #2576]	; 14754 <__assert_fail@plt+0x37f4>
   13d40:	str	r3, [sp, #44]	; 0x2c
   13d44:	b	13d1c <__assert_fail@plt+0x2dbc>
   13d48:	ldr	fp, [sp, #24]
   13d4c:	ldr	r3, [sp, #32]
   13d50:	cmp	sl, #2
   13d54:	moveq	fp, #0
   13d58:	andne	fp, fp, #1
   13d5c:	adds	r5, r3, #0
   13d60:	movne	r5, #1
   13d64:	ands	r3, fp, r5
   13d68:	str	r3, [sp, #64]	; 0x40
   13d6c:	beq	13e3c <__assert_fail@plt+0x2edc>
   13d70:	ldr	r3, [sp, #28]
   13d74:	ldr	r2, [sp, #32]
   13d78:	cmp	r2, #1
   13d7c:	add	r6, r3, r2
   13d80:	mov	r3, r2
   13d84:	ldr	r2, [sp, #40]	; 0x28
   13d88:	movls	r3, #0
   13d8c:	movhi	r3, #1
   13d90:	cmn	r2, #1
   13d94:	movne	r3, #0
   13d98:	cmp	r3, #0
   13d9c:	beq	13dac <__assert_fail@plt+0x2e4c>
   13da0:	ldr	r0, [sp, #48]	; 0x30
   13da4:	bl	10e58 <strlen@plt>
   13da8:	str	r0, [sp, #40]	; 0x28
   13dac:	ldr	r3, [sp, #40]	; 0x28
   13db0:	cmp	r6, r3
   13db4:	bhi	13e34 <__assert_fail@plt+0x2ed4>
   13db8:	ldr	r0, [sp, #28]
   13dbc:	ldr	r2, [sp, #32]
   13dc0:	ldr	r3, [sp, #48]	; 0x30
   13dc4:	ldr	r1, [sp, #44]	; 0x2c
   13dc8:	add	r0, r3, r0
   13dcc:	bl	10d74 <memcmp@plt>
   13dd0:	cmp	r0, #0
   13dd4:	bne	13e34 <__assert_fail@plt+0x2ed4>
   13dd8:	cmp	r7, #0
   13ddc:	beq	13e3c <__assert_fail@plt+0x2edc>
   13de0:	str	r7, [sp, #24]
   13de4:	ldr	r3, [sp, #24]
   13de8:	mov	r1, r9
   13dec:	ldr	r2, [sp, #48]	; 0x30
   13df0:	cmp	sl, #2
   13df4:	movne	r3, #0
   13df8:	andeq	r3, r3, #1
   13dfc:	cmp	r3, #0
   13e00:	ldr	r3, [sp, #160]	; 0xa0
   13e04:	movne	sl, #4
   13e08:	str	sl, [sp]
   13e0c:	str	r3, [sp, #16]
   13e10:	ldr	r3, [sp, #156]	; 0x9c
   13e14:	str	r3, [sp, #12]
   13e18:	mov	r3, #0
   13e1c:	str	r3, [sp, #8]
   13e20:	ldr	r3, [sp, #148]	; 0x94
   13e24:	bic	r3, r3, #2
   13e28:	str	r3, [sp, #4]
   13e2c:	ldr	r3, [sp, #40]	; 0x28
   13e30:	b	13bb8 <__assert_fail@plt+0x2c58>
   13e34:	mov	r3, #0
   13e38:	str	r3, [sp, #64]	; 0x40
   13e3c:	ldr	r2, [sp, #28]
   13e40:	ldr	r3, [sp, #48]	; 0x30
   13e44:	add	r3, r3, r2
   13e48:	str	r3, [sp, #80]	; 0x50
   13e4c:	ldr	r3, [sp, #48]	; 0x30
   13e50:	ldrb	r6, [r3, r2]
   13e54:	cmp	r6, #58	; 0x3a
   13e58:	bhi	13fbc <__assert_fail@plt+0x305c>
   13e5c:	cmp	r6, #43	; 0x2b
   13e60:	bcs	1417c <__assert_fail@plt+0x321c>
   13e64:	cmp	r6, #32
   13e68:	beq	141d0 <__assert_fail@plt+0x3270>
   13e6c:	bhi	13f14 <__assert_fail@plt+0x2fb4>
   13e70:	cmp	r6, #9
   13e74:	beq	14378 <__assert_fail@plt+0x3418>
   13e78:	bhi	13ed8 <__assert_fail@plt+0x2f78>
   13e7c:	cmp	r6, #7
   13e80:	beq	14388 <__assert_fail@plt+0x3428>
   13e84:	bhi	143a4 <__assert_fail@plt+0x3444>
   13e88:	cmp	r6, #0
   13e8c:	beq	141ec <__assert_fail@plt+0x328c>
   13e90:	ldr	r3, [sp, #76]	; 0x4c
   13e94:	cmp	r3, #1
   13e98:	bne	143f0 <__assert_fail@plt+0x3490>
   13e9c:	bl	10e40 <__ctype_b_loc@plt>
   13ea0:	ldr	r2, [r0]
   13ea4:	sxth	r3, r6
   13ea8:	lsl	r3, r3, #1
   13eac:	ldrh	r5, [r2, r3]
   13eb0:	ldr	r3, [sp, #76]	; 0x4c
   13eb4:	ubfx	r5, r5, #14, #1
   13eb8:	str	r3, [sp, #56]	; 0x38
   13ebc:	ldr	r3, [sp, #24]
   13ec0:	eor	fp, r5, #1
   13ec4:	and	fp, fp, r3
   13ec8:	ands	fp, fp, #255	; 0xff
   13ecc:	beq	140ac <__assert_fail@plt+0x314c>
   13ed0:	mov	r5, #0
   13ed4:	b	1449c <__assert_fail@plt+0x353c>
   13ed8:	cmp	r6, #11
   13edc:	beq	143ac <__assert_fail@plt+0x344c>
   13ee0:	bcc	14380 <__assert_fail@plt+0x3420>
   13ee4:	cmp	r6, #12
   13ee8:	beq	143b4 <__assert_fail@plt+0x3454>
   13eec:	cmp	r6, #13
   13ef0:	moveq	r3, #114	; 0x72
   13ef4:	bne	13e90 <__assert_fail@plt+0x2f30>
   13ef8:	cmp	sl, #2
   13efc:	movne	r2, #0
   13f00:	andeq	r2, r7, #1
   13f04:	cmp	r2, #0
   13f08:	beq	1438c <__assert_fail@plt+0x342c>
   13f0c:	mov	sl, #2
   13f10:	b	13de4 <__assert_fail@plt+0x2e84>
   13f14:	cmp	r6, #37	; 0x25
   13f18:	beq	1417c <__assert_fail@plt+0x321c>
   13f1c:	bhi	13f30 <__assert_fail@plt+0x2fd0>
   13f20:	cmp	r6, #35	; 0x23
   13f24:	beq	141c4 <__assert_fail@plt+0x3264>
   13f28:	mov	r5, #0
   13f2c:	b	141d4 <__assert_fail@plt+0x3274>
   13f30:	cmp	r6, #39	; 0x27
   13f34:	bne	13f28 <__assert_fail@plt+0x2fc8>
   13f38:	cmp	sl, #2
   13f3c:	ldrne	r5, [sp, #36]	; 0x24
   13f40:	movne	r3, r5
   13f44:	strne	r3, [sp, #68]	; 0x44
   13f48:	bne	142c8 <__assert_fail@plt+0x3368>
   13f4c:	cmp	r7, #0
   13f50:	bne	13de4 <__assert_fail@plt+0x2e84>
   13f54:	ldr	r3, [sp, #60]	; 0x3c
   13f58:	cmp	r9, #0
   13f5c:	clz	r3, r3
   13f60:	lsr	r3, r3, #5
   13f64:	moveq	r3, #0
   13f68:	cmp	r3, #0
   13f6c:	strne	r9, [sp, #60]	; 0x3c
   13f70:	movne	r9, #0
   13f74:	bne	13f84 <__assert_fail@plt+0x3024>
   13f78:	cmp	r9, r4
   13f7c:	movhi	r3, #39	; 0x27
   13f80:	strbhi	r3, [r8, r4]
   13f84:	add	r3, r4, #1
   13f88:	ldr	r5, [sp, #36]	; 0x24
   13f8c:	mov	fp, #0
   13f90:	cmp	r3, r9
   13f94:	movcc	r2, #92	; 0x5c
   13f98:	str	fp, [sp, #52]	; 0x34
   13f9c:	strbcc	r2, [r8, r3]
   13fa0:	add	r3, r4, #2
   13fa4:	add	r4, r4, #3
   13fa8:	cmp	r3, r9
   13fac:	str	r5, [sp, #68]	; 0x44
   13fb0:	movcc	r2, #39	; 0x27
   13fb4:	strbcc	r2, [r8, r3]
   13fb8:	b	140ac <__assert_fail@plt+0x314c>
   13fbc:	cmp	r6, #94	; 0x5e
   13fc0:	beq	13f28 <__assert_fail@plt+0x2fc8>
   13fc4:	bhi	14184 <__assert_fail@plt+0x3224>
   13fc8:	cmp	r6, #90	; 0x5a
   13fcc:	bhi	14170 <__assert_fail@plt+0x3210>
   13fd0:	cmp	r6, #65	; 0x41
   13fd4:	bcs	1417c <__assert_fail@plt+0x321c>
   13fd8:	cmp	r6, #62	; 0x3e
   13fdc:	bls	13f28 <__assert_fail@plt+0x2fc8>
   13fe0:	cmp	r6, #63	; 0x3f
   13fe4:	bne	13e90 <__assert_fail@plt+0x2f30>
   13fe8:	cmp	sl, #2
   13fec:	beq	142d0 <__assert_fail@plt+0x3370>
   13ff0:	cmp	sl, #5
   13ff4:	movne	fp, #0
   13ff8:	bne	146a0 <__assert_fail@plt+0x3740>
   13ffc:	ldr	r3, [sp, #148]	; 0x94
   14000:	tst	r3, #4
   14004:	beq	142d8 <__assert_fail@plt+0x3378>
   14008:	ldr	r3, [sp, #28]
   1400c:	add	r2, r3, #2
   14010:	ldr	r3, [sp, #40]	; 0x28
   14014:	cmp	r2, r3
   14018:	bcs	142d8 <__assert_fail@plt+0x3378>
   1401c:	ldr	r1, [sp, #28]
   14020:	ldr	r3, [sp, #48]	; 0x30
   14024:	add	r3, r3, r1
   14028:	ldrb	r1, [r3, #1]
   1402c:	cmp	r1, #63	; 0x3f
   14030:	bne	142d8 <__assert_fail@plt+0x3378>
   14034:	ldr	r3, [sp, #48]	; 0x30
   14038:	ldrb	r6, [r3, r2]
   1403c:	sub	r3, r6, #33	; 0x21
   14040:	uxtb	r3, r3
   14044:	cmp	r3, #29
   14048:	bhi	146a8 <__assert_fail@plt+0x3748>
   1404c:	ldr	r0, [pc, #1804]	; 14760 <__assert_fail@plt+0x3800>
   14050:	mov	r5, #1
   14054:	ands	r5, r0, r5, lsl r3
   14058:	beq	146b0 <__assert_fail@plt+0x3750>
   1405c:	cmp	r7, #0
   14060:	bne	13de4 <__assert_fail@plt+0x2e84>
   14064:	cmp	r9, r4
   14068:	add	r3, r4, #1
   1406c:	str	r2, [sp, #28]
   14070:	mov	r5, #0
   14074:	strbhi	r1, [r8, r4]
   14078:	cmp	r9, r3
   1407c:	mov	fp, r5
   14080:	movhi	r1, #34	; 0x22
   14084:	strbhi	r1, [r8, r3]
   14088:	add	r3, r4, #2
   1408c:	cmp	r9, r3
   14090:	movhi	r1, #34	; 0x22
   14094:	strbhi	r1, [r8, r3]
   14098:	add	r3, r4, #3
   1409c:	add	r4, r4, #4
   140a0:	cmp	r9, r3
   140a4:	movhi	r1, #63	; 0x3f
   140a8:	strbhi	r1, [r8, r3]
   140ac:	ldr	r3, [sp, #24]
   140b0:	eor	r3, r3, #1
   140b4:	cmp	sl, #2
   140b8:	orreq	r3, r3, #1
   140bc:	eor	r3, r3, #1
   140c0:	orr	r3, r7, r3
   140c4:	tst	r3, #255	; 0xff
   140c8:	beq	140f4 <__assert_fail@plt+0x3194>
   140cc:	ldr	r3, [sp, #152]	; 0x98
   140d0:	cmp	r3, #0
   140d4:	beq	140f4 <__assert_fail@plt+0x3194>
   140d8:	ldr	r1, [sp, #152]	; 0x98
   140dc:	ubfx	r2, r6, #5, #8
   140e0:	and	r3, r6, #31
   140e4:	ldr	r2, [r1, r2, lsl #2]
   140e8:	lsr	r3, r2, r3
   140ec:	tst	r3, #1
   140f0:	bne	14100 <__assert_fail@plt+0x31a0>
   140f4:	ldr	r3, [sp, #64]	; 0x40
   140f8:	cmp	r3, #0
   140fc:	beq	142f8 <__assert_fail@plt+0x3398>
   14100:	sub	r3, sl, #2
   14104:	cmp	r7, #0
   14108:	clz	r3, r3
   1410c:	lsr	r3, r3, #5
   14110:	bne	13de4 <__assert_fail@plt+0x2e84>
   14114:	ldr	r2, [sp, #52]	; 0x34
   14118:	eor	r2, r2, #1
   1411c:	ands	r3, r3, r2
   14120:	beq	14158 <__assert_fail@plt+0x31f8>
   14124:	cmp	r9, r4
   14128:	str	r3, [sp, #52]	; 0x34
   1412c:	movhi	r2, #39	; 0x27
   14130:	strbhi	r2, [r8, r4]
   14134:	add	r2, r4, #1
   14138:	cmp	r9, r2
   1413c:	movhi	r1, #36	; 0x24
   14140:	strbhi	r1, [r8, r2]
   14144:	add	r2, r4, #2
   14148:	add	r4, r4, #3
   1414c:	cmp	r9, r2
   14150:	movhi	r1, #39	; 0x27
   14154:	strbhi	r1, [r8, r2]
   14158:	cmp	r9, r4
   1415c:	ldr	fp, [sp, #36]	; 0x24
   14160:	movhi	r3, #92	; 0x5c
   14164:	strbhi	r3, [r8, r4]
   14168:	add	r4, r4, #1
   1416c:	b	142f8 <__assert_fail@plt+0x3398>
   14170:	cmp	r6, #92	; 0x5c
   14174:	beq	142e0 <__assert_fail@plt+0x3380>
   14178:	bls	13f28 <__assert_fail@plt+0x2fc8>
   1417c:	ldr	r5, [sp, #36]	; 0x24
   14180:	b	142c8 <__assert_fail@plt+0x3368>
   14184:	cmp	r6, #122	; 0x7a
   14188:	bhi	141a8 <__assert_fail@plt+0x3248>
   1418c:	cmp	r6, #97	; 0x61
   14190:	bcs	1417c <__assert_fail@plt+0x321c>
   14194:	cmp	r6, #95	; 0x5f
   14198:	beq	1417c <__assert_fail@plt+0x321c>
   1419c:	cmp	r6, #96	; 0x60
   141a0:	bne	13e90 <__assert_fail@plt+0x2f30>
   141a4:	b	13f28 <__assert_fail@plt+0x2fc8>
   141a8:	cmp	r6, #124	; 0x7c
   141ac:	beq	13f28 <__assert_fail@plt+0x2fc8>
   141b0:	bcc	143bc <__assert_fail@plt+0x345c>
   141b4:	cmp	r6, #125	; 0x7d
   141b8:	beq	143bc <__assert_fail@plt+0x345c>
   141bc:	cmp	r6, #126	; 0x7e
   141c0:	bne	13e90 <__assert_fail@plt+0x2f30>
   141c4:	ldr	r3, [sp, #28]
   141c8:	cmp	r3, #0
   141cc:	bne	142d8 <__assert_fail@plt+0x3378>
   141d0:	ldr	r5, [sp, #36]	; 0x24
   141d4:	cmp	sl, #2
   141d8:	movne	fp, #0
   141dc:	andeq	fp, r7, #1
   141e0:	cmp	fp, #0
   141e4:	beq	140ac <__assert_fail@plt+0x314c>
   141e8:	b	13f0c <__assert_fail@plt+0x2fac>
   141ec:	ldr	r3, [sp, #24]
   141f0:	cmp	r3, #0
   141f4:	beq	142bc <__assert_fail@plt+0x335c>
   141f8:	sub	r2, sl, #2
   141fc:	cmp	r7, #0
   14200:	clz	r2, r2
   14204:	lsr	r2, r2, #5
   14208:	bne	13de0 <__assert_fail@plt+0x2e80>
   1420c:	ldr	r3, [sp, #52]	; 0x34
   14210:	eor	r3, r3, #1
   14214:	ands	r2, r2, r3
   14218:	moveq	r3, r4
   1421c:	beq	14254 <__assert_fail@plt+0x32f4>
   14220:	cmp	r9, r4
   14224:	str	r2, [sp, #52]	; 0x34
   14228:	movhi	r3, #39	; 0x27
   1422c:	strbhi	r3, [r8, r4]
   14230:	add	r3, r4, #1
   14234:	cmp	r9, r3
   14238:	movhi	r1, #36	; 0x24
   1423c:	strbhi	r1, [r8, r3]
   14240:	add	r3, r4, #2
   14244:	cmp	r9, r3
   14248:	movhi	r1, #39	; 0x27
   1424c:	strbhi	r1, [r8, r3]
   14250:	add	r3, r4, #3
   14254:	cmp	r9, r3
   14258:	add	r4, r3, #1
   1425c:	movhi	r2, #92	; 0x5c
   14260:	strbhi	r2, [r8, r3]
   14264:	cmp	fp, #0
   14268:	beq	14690 <__assert_fail@plt+0x3730>
   1426c:	ldr	r2, [sp, #28]
   14270:	ldr	r1, [sp, #40]	; 0x28
   14274:	add	r2, r2, #1
   14278:	cmp	r2, r1
   1427c:	bcs	142b4 <__assert_fail@plt+0x3354>
   14280:	ldr	r1, [sp, #48]	; 0x30
   14284:	mov	r6, #48	; 0x30
   14288:	ldrb	r2, [r1, r2]
   1428c:	sub	r2, r2, #48	; 0x30
   14290:	cmp	r2, #9
   14294:	bhi	146a0 <__assert_fail@plt+0x3740>
   14298:	cmp	r9, r4
   1429c:	add	r2, r3, #2
   142a0:	strbhi	r6, [r8, r4]
   142a4:	cmp	r9, r2
   142a8:	add	r4, r3, #3
   142ac:	movhi	r1, #48	; 0x30
   142b0:	strbhi	r1, [r8, r2]
   142b4:	mov	r5, #0
   142b8:	b	14698 <__assert_fail@plt+0x3738>
   142bc:	ldr	r3, [sp, #148]	; 0x94
   142c0:	ands	r5, r3, #1
   142c4:	bne	1434c <__assert_fail@plt+0x33ec>
   142c8:	mov	fp, #0
   142cc:	b	140ac <__assert_fail@plt+0x314c>
   142d0:	cmp	r7, #0
   142d4:	bne	13de4 <__assert_fail@plt+0x2e84>
   142d8:	mov	r5, #0
   142dc:	b	142c8 <__assert_fail@plt+0x3368>
   142e0:	cmp	sl, #2
   142e4:	bne	14358 <__assert_fail@plt+0x33f8>
   142e8:	cmp	r7, #0
   142ec:	bne	13de4 <__assert_fail@plt+0x2e84>
   142f0:	mov	r5, r7
   142f4:	mov	fp, r7
   142f8:	ldr	r3, [sp, #52]	; 0x34
   142fc:	eor	fp, fp, #1
   14300:	tst	r3, fp
   14304:	beq	14330 <__assert_fail@plt+0x33d0>
   14308:	cmp	r9, r4
   1430c:	movhi	r3, #39	; 0x27
   14310:	strbhi	r3, [r8, r4]
   14314:	add	r3, r4, #1
   14318:	add	r4, r4, #2
   1431c:	cmp	r9, r3
   14320:	movhi	r2, #39	; 0x27
   14324:	strbhi	r2, [r8, r3]
   14328:	mov	r3, #0
   1432c:	str	r3, [sp, #52]	; 0x34
   14330:	cmp	r9, r4
   14334:	ldr	r3, [sp, #72]	; 0x48
   14338:	strbhi	r6, [r8, r4]
   1433c:	cmp	r5, #0
   14340:	add	r4, r4, #1
   14344:	moveq	r3, #0
   14348:	str	r3, [sp, #72]	; 0x48
   1434c:	ldr	r3, [sp, #28]
   14350:	add	r3, r3, #1
   14354:	b	13b0c <__assert_fail@plt+0x2bac>
   14358:	ldr	r3, [sp, #24]
   1435c:	and	r3, r3, r7
   14360:	tst	r5, r3
   14364:	moveq	r3, r6
   14368:	beq	13ef8 <__assert_fail@plt+0x2f98>
   1436c:	mov	fp, #0
   14370:	mov	r5, fp
   14374:	b	142f8 <__assert_fail@plt+0x3398>
   14378:	mov	r3, #116	; 0x74
   1437c:	b	13ef8 <__assert_fail@plt+0x2f98>
   14380:	mov	r3, #110	; 0x6e
   14384:	b	13ef8 <__assert_fail@plt+0x2f98>
   14388:	mov	r3, #97	; 0x61
   1438c:	ldr	r2, [sp, #24]
   14390:	cmp	r2, #0
   14394:	beq	142d8 <__assert_fail@plt+0x3378>
   14398:	mov	r6, r3
   1439c:	mov	r5, #0
   143a0:	b	14100 <__assert_fail@plt+0x31a0>
   143a4:	mov	r3, #98	; 0x62
   143a8:	b	1438c <__assert_fail@plt+0x342c>
   143ac:	mov	r3, #118	; 0x76
   143b0:	b	1438c <__assert_fail@plt+0x342c>
   143b4:	mov	r3, #102	; 0x66
   143b8:	b	1438c <__assert_fail@plt+0x342c>
   143bc:	ldr	r3, [sp, #40]	; 0x28
   143c0:	cmn	r3, #1
   143c4:	bne	143e4 <__assert_fail@plt+0x3484>
   143c8:	ldr	r3, [sp, #48]	; 0x30
   143cc:	ldrb	r3, [r3, #1]
   143d0:	adds	r3, r3, #0
   143d4:	movne	r3, #1
   143d8:	cmp	r3, #0
   143dc:	bne	142d8 <__assert_fail@plt+0x3378>
   143e0:	b	141c4 <__assert_fail@plt+0x3264>
   143e4:	ldr	r3, [sp, #40]	; 0x28
   143e8:	subs	r3, r3, #1
   143ec:	b	143d4 <__assert_fail@plt+0x3474>
   143f0:	mov	r3, #0
   143f4:	mov	r2, #0
   143f8:	strd	r2, [sp, #96]	; 0x60
   143fc:	ldr	r3, [sp, #40]	; 0x28
   14400:	cmn	r3, #1
   14404:	bne	14414 <__assert_fail@plt+0x34b4>
   14408:	ldr	r0, [sp, #48]	; 0x30
   1440c:	bl	10e58 <strlen@plt>
   14410:	str	r0, [sp, #40]	; 0x28
   14414:	ldr	r5, [sp, #36]	; 0x24
   14418:	mov	r3, #0
   1441c:	str	r3, [sp, #56]	; 0x38
   14420:	ldr	r3, [sp, #28]
   14424:	add	r0, sp, #92	; 0x5c
   14428:	ldr	r1, [sp, #40]	; 0x28
   1442c:	ldr	r2, [sp, #56]	; 0x38
   14430:	add	r2, r3, r2
   14434:	ldr	r3, [sp, #48]	; 0x30
   14438:	add	fp, r3, r2
   1443c:	sub	r2, r1, r2
   14440:	add	r3, sp, #96	; 0x60
   14444:	mov	r1, fp
   14448:	bl	15d1c <__assert_fail@plt+0x4dbc>
   1444c:	subs	r2, r0, #0
   14450:	beq	14490 <__assert_fail@plt+0x3530>
   14454:	cmn	r2, #1
   14458:	beq	14664 <__assert_fail@plt+0x3704>
   1445c:	cmn	r2, #2
   14460:	bne	145d4 <__assert_fail@plt+0x3674>
   14464:	ldr	r3, [sp, #28]
   14468:	ldr	r2, [sp, #56]	; 0x38
   1446c:	add	r3, r3, r2
   14470:	ldr	r2, [sp, #40]	; 0x28
   14474:	cmp	r2, r3
   14478:	bls	14664 <__assert_fail@plt+0x3704>
   1447c:	ldr	r2, [sp, #56]	; 0x38
   14480:	ldr	r3, [sp, #80]	; 0x50
   14484:	ldrb	r5, [r3, r2]
   14488:	cmp	r5, #0
   1448c:	bne	145c4 <__assert_fail@plt+0x3664>
   14490:	ldr	r3, [sp, #56]	; 0x38
   14494:	cmp	r3, #1
   14498:	bls	13ebc <__assert_fail@plt+0x2f5c>
   1449c:	ldr	r3, [sp, #28]
   144a0:	mov	fp, #0
   144a4:	mov	ip, #92	; 0x5c
   144a8:	ldr	r2, [sp, #56]	; 0x38
   144ac:	add	r3, r3, r2
   144b0:	ldr	r2, [sp, #24]
   144b4:	str	r3, [sp, #36]	; 0x24
   144b8:	eor	r3, r5, #1
   144bc:	and	r3, r3, r2
   144c0:	mov	r2, #39	; 0x27
   144c4:	uxtb	r3, r3
   144c8:	cmp	r3, #0
   144cc:	beq	1466c <__assert_fail@plt+0x370c>
   144d0:	sub	r0, sl, #2
   144d4:	cmp	r7, #0
   144d8:	clz	r0, r0
   144dc:	lsr	r0, r0, #5
   144e0:	bne	13de0 <__assert_fail@plt+0x2e80>
   144e4:	ldr	r1, [sp, #52]	; 0x34
   144e8:	eor	r1, r1, #1
   144ec:	ands	r1, r0, r1
   144f0:	beq	14520 <__assert_fail@plt+0x35c0>
   144f4:	cmp	r9, r4
   144f8:	add	r0, r4, #1
   144fc:	str	r1, [sp, #52]	; 0x34
   14500:	strbhi	r2, [r8, r4]
   14504:	cmp	r9, r0
   14508:	movhi	lr, #36	; 0x24
   1450c:	strbhi	lr, [r8, r0]
   14510:	add	r0, r4, #2
   14514:	add	r4, r4, #3
   14518:	cmp	r9, r0
   1451c:	strbhi	r2, [r8, r0]
   14520:	cmp	r9, r4
   14524:	add	r0, r4, #1
   14528:	mov	fp, r3
   1452c:	strbhi	ip, [r8, r4]
   14530:	cmp	r9, r0
   14534:	lsrhi	r1, r6, #6
   14538:	addhi	r1, r1, #48	; 0x30
   1453c:	strbhi	r1, [r8, r0]
   14540:	add	r0, r4, #2
   14544:	add	r4, r4, #3
   14548:	cmp	r9, r0
   1454c:	ubfxhi	r1, r6, #3, #3
   14550:	and	r6, r6, #7
   14554:	add	r6, r6, #48	; 0x30
   14558:	addhi	r1, r1, #48	; 0x30
   1455c:	strbhi	r1, [r8, r0]
   14560:	eor	r0, fp, #1
   14564:	ldr	r1, [sp, #28]
   14568:	ldr	lr, [sp, #52]	; 0x34
   1456c:	add	r1, r1, #1
   14570:	and	r0, r0, lr
   14574:	ldr	lr, [sp, #36]	; 0x24
   14578:	cmp	r1, lr
   1457c:	bcs	142f8 <__assert_fail@plt+0x3398>
   14580:	cmp	r0, #0
   14584:	beq	145a8 <__assert_fail@plt+0x3648>
   14588:	cmp	r9, r4
   1458c:	add	r0, r4, #1
   14590:	strbhi	r2, [r8, r4]
   14594:	cmp	r9, r0
   14598:	add	r4, r4, #2
   1459c:	strbhi	r2, [r8, r0]
   145a0:	mov	r0, #0
   145a4:	str	r0, [sp, #52]	; 0x34
   145a8:	ldr	r0, [sp, #48]	; 0x30
   145ac:	cmp	r9, r4
   145b0:	str	r1, [sp, #28]
   145b4:	strbhi	r6, [r8, r4]
   145b8:	add	r4, r4, #1
   145bc:	ldrb	r6, [r0, r1]
   145c0:	b	144c8 <__assert_fail@plt+0x3568>
   145c4:	ldr	r3, [sp, #56]	; 0x38
   145c8:	add	r3, r3, #1
   145cc:	str	r3, [sp, #56]	; 0x38
   145d0:	b	14464 <__assert_fail@plt+0x3504>
   145d4:	cmp	sl, #2
   145d8:	movne	r3, #0
   145dc:	andeq	r3, r7, #1
   145e0:	cmp	r3, #0
   145e4:	movne	r1, #1
   145e8:	bne	14644 <__assert_fail@plt+0x36e4>
   145ec:	ldr	r0, [sp, #92]	; 0x5c
   145f0:	str	r2, [sp, #84]	; 0x54
   145f4:	bl	10db0 <iswprint@plt>
   145f8:	ldr	r3, [sp, #56]	; 0x38
   145fc:	cmp	r0, #0
   14600:	add	r0, sp, #96	; 0x60
   14604:	moveq	r5, #0
   14608:	ldr	r2, [sp, #84]	; 0x54
   1460c:	add	r3, r3, r2
   14610:	str	r3, [sp, #56]	; 0x38
   14614:	bl	10d5c <mbsinit@plt>
   14618:	cmp	r0, #0
   1461c:	beq	14420 <__assert_fail@plt+0x34c0>
   14620:	b	14490 <__assert_fail@plt+0x3530>
   14624:	ldrb	r3, [fp, #1]!
   14628:	cmp	r3, #94	; 0x5e
   1462c:	beq	13f0c <__assert_fail@plt+0x2fac>
   14630:	bhi	14650 <__assert_fail@plt+0x36f0>
   14634:	sub	r3, r3, #91	; 0x5b
   14638:	cmp	r3, #1
   1463c:	bls	13f0c <__assert_fail@plt+0x2fac>
   14640:	add	r1, r1, #1
   14644:	cmp	r1, r2
   14648:	bne	14624 <__assert_fail@plt+0x36c4>
   1464c:	b	145ec <__assert_fail@plt+0x368c>
   14650:	cmp	r3, #96	; 0x60
   14654:	beq	13f0c <__assert_fail@plt+0x2fac>
   14658:	cmp	r3, #124	; 0x7c
   1465c:	bne	14640 <__assert_fail@plt+0x36e0>
   14660:	b	13f0c <__assert_fail@plt+0x2fac>
   14664:	mov	r5, #0
   14668:	b	14490 <__assert_fail@plt+0x3530>
   1466c:	ldr	r1, [sp, #64]	; 0x40
   14670:	cmp	r1, #0
   14674:	beq	14560 <__assert_fail@plt+0x3600>
   14678:	cmp	r9, r4
   1467c:	mov	r1, #0
   14680:	strbhi	ip, [r8, r4]
   14684:	add	r4, r4, #1
   14688:	str	r1, [sp, #64]	; 0x40
   1468c:	b	14560 <__assert_fail@plt+0x3600>
   14690:	mov	r5, fp
   14694:	ldr	fp, [sp, #24]
   14698:	mov	r6, #48	; 0x30
   1469c:	b	140ac <__assert_fail@plt+0x314c>
   146a0:	mov	r5, #0
   146a4:	b	140ac <__assert_fail@plt+0x314c>
   146a8:	mov	r6, r1
   146ac:	b	142d8 <__assert_fail@plt+0x3378>
   146b0:	mov	r6, r1
   146b4:	b	142c8 <__assert_fail@plt+0x3368>
   146b8:	ldr	r2, [sp, #28]
   146bc:	ldr	r3, [sp, #40]	; 0x28
   146c0:	subs	r3, r3, r2
   146c4:	movne	r3, #1
   146c8:	b	13b30 <__assert_fail@plt+0x2bd0>
   146cc:	ldr	r3, [sp, #60]	; 0x3c
   146d0:	mov	sl, #2
   146d4:	ldr	r7, [sp, #72]	; 0x48
   146d8:	adds	r6, r3, #0
   146dc:	mov	r5, r3
   146e0:	movne	r6, #1
   146e4:	cmp	r9, #0
   146e8:	movne	r6, #0
   146ec:	cmp	r6, #0
   146f0:	bne	13ac0 <__assert_fail@plt+0x2b60>
   146f4:	ldr	r3, [sp, #68]	; 0x44
   146f8:	ldr	r2, [sp, #44]	; 0x2c
   146fc:	cmp	r2, #0
   14700:	moveq	r3, #0
   14704:	andne	r3, r3, #1
   14708:	cmp	r3, #0
   1470c:	movne	r3, r2
   14710:	subne	r3, r3, #1
   14714:	bne	14744 <__assert_fail@plt+0x37e4>
   14718:	cmp	r9, r4
   1471c:	movhi	r3, #0
   14720:	strbhi	r3, [r8, r4]
   14724:	mov	r0, r4
   14728:	add	sp, sp, #108	; 0x6c
   1472c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14730:	mov	r3, r7
   14734:	b	146f8 <__assert_fail@plt+0x3798>
   14738:	cmp	r9, r4
   1473c:	strbhi	r2, [r8, r4]
   14740:	add	r4, r4, #1
   14744:	ldrb	r2, [r3, #1]!
   14748:	cmp	r2, #0
   1474c:	bne	14738 <__assert_fail@plt+0x37d8>
   14750:	b	14718 <__assert_fail@plt+0x37b8>
   14754:	andeq	r6, r1, r8, ror #30
   14758:	andeq	r6, r1, fp, ror pc
   1475c:	andeq	r6, r1, r9, ror pc
   14760:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   14764:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14768:	sub	sp, sp, #52	; 0x34
   1476c:	mov	r6, r0
   14770:	mov	r5, r3
   14774:	mov	r8, r1
   14778:	mov	r9, r2
   1477c:	bl	10e70 <__errno_location@plt>
   14780:	ldr	r3, [r0]
   14784:	cmn	r6, #-2147483647	; 0x80000001
   14788:	str	r0, [sp, #24]
   1478c:	ldr	r7, [pc, #368]	; 14904 <__assert_fail@plt+0x39a4>
   14790:	str	r3, [sp, #32]
   14794:	movne	r3, #0
   14798:	moveq	r3, #1
   1479c:	orrs	r3, r3, r6, lsr #31
   147a0:	ldr	r4, [r7]
   147a4:	beq	147ac <__assert_fail@plt+0x384c>
   147a8:	bl	10f48 <abort@plt>
   147ac:	ldr	r2, [r7, #4]
   147b0:	cmp	r2, r6
   147b4:	bgt	14824 <__assert_fail@plt+0x38c4>
   147b8:	add	sl, r7, #8
   147bc:	mov	r3, #8
   147c0:	cmp	r4, sl
   147c4:	add	r1, sp, #44	; 0x2c
   147c8:	str	r2, [sp, #44]	; 0x2c
   147cc:	sub	r2, r6, r2
   147d0:	movne	r0, r4
   147d4:	moveq	r0, #0
   147d8:	add	r2, r2, #1
   147dc:	str	r3, [sp]
   147e0:	mvn	r3, #-2147483648	; 0x80000000
   147e4:	bl	154b8 <__assert_fail@plt+0x4558>
   147e8:	cmp	r4, sl
   147ec:	mov	fp, r0
   147f0:	str	r0, [r7]
   147f4:	ldmeq	r4, {r0, r1}
   147f8:	mov	r4, fp
   147fc:	ldr	r2, [sp, #44]	; 0x2c
   14800:	stmeq	fp, {r0, r1}
   14804:	mov	r1, #0
   14808:	ldr	r0, [r7, #4]
   1480c:	sub	r2, r2, r0
   14810:	add	r0, fp, r0, lsl #3
   14814:	lsl	r2, r2, #3
   14818:	bl	10e88 <memset@plt>
   1481c:	ldr	r3, [sp, #44]	; 0x2c
   14820:	str	r3, [r7, #4]
   14824:	ldr	r3, [r5, #4]
   14828:	add	sl, r4, r6, lsl #3
   1482c:	mov	r2, r8
   14830:	ldr	fp, [r4, r6, lsl #3]
   14834:	ldr	r7, [sl, #4]
   14838:	orr	r3, r3, #1
   1483c:	str	r3, [sp, #28]
   14840:	add	r3, r5, #8
   14844:	mov	r1, fp
   14848:	str	r3, [sp, #36]	; 0x24
   1484c:	mov	r0, r7
   14850:	ldr	r3, [r5, #44]	; 0x2c
   14854:	str	r3, [sp, #16]
   14858:	ldr	r3, [r5, #40]	; 0x28
   1485c:	str	r3, [sp, #12]
   14860:	add	r3, r5, #8
   14864:	str	r3, [sp, #8]
   14868:	ldr	r3, [sp, #28]
   1486c:	str	r3, [sp, #4]
   14870:	ldr	r3, [r5]
   14874:	str	r3, [sp]
   14878:	mov	r3, r9
   1487c:	bl	13a74 <__assert_fail@plt+0x2b14>
   14880:	cmp	fp, r0
   14884:	bhi	148ec <__assert_fail@plt+0x398c>
   14888:	ldr	r3, [pc, #120]	; 14908 <__assert_fail@plt+0x39a8>
   1488c:	add	fp, r0, #1
   14890:	str	fp, [r4, r6, lsl #3]
   14894:	cmp	r7, r3
   14898:	beq	148a4 <__assert_fail@plt+0x3944>
   1489c:	mov	r0, r7
   148a0:	bl	13784 <__assert_fail@plt+0x2824>
   148a4:	mov	r0, fp
   148a8:	bl	153a8 <__assert_fail@plt+0x4448>
   148ac:	ldr	r3, [r5, #44]	; 0x2c
   148b0:	mov	r2, r8
   148b4:	mov	r1, fp
   148b8:	str	r0, [sl, #4]
   148bc:	mov	r7, r0
   148c0:	str	r3, [sp, #16]
   148c4:	ldr	r3, [r5, #40]	; 0x28
   148c8:	str	r3, [sp, #12]
   148cc:	add	r3, r5, #8
   148d0:	str	r3, [sp, #8]
   148d4:	ldr	r3, [sp, #28]
   148d8:	str	r3, [sp, #4]
   148dc:	ldr	r3, [r5]
   148e0:	str	r3, [sp]
   148e4:	mov	r3, r9
   148e8:	bl	13a74 <__assert_fail@plt+0x2b14>
   148ec:	ldr	r3, [sp, #24]
   148f0:	mov	r0, r7
   148f4:	ldr	r2, [sp, #32]
   148f8:	str	r2, [r3]
   148fc:	add	sp, sp, #52	; 0x34
   14900:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14904:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   14908:	andeq	r8, r2, r0, lsl #3
   1490c:	push	{r4, r5, r6, lr}
   14910:	mov	r5, r0
   14914:	bl	10e70 <__errno_location@plt>
   14918:	mov	r4, r0
   1491c:	cmp	r5, #0
   14920:	ldr	r0, [pc, #20]	; 1493c <__assert_fail@plt+0x39dc>
   14924:	mov	r1, #48	; 0x30
   14928:	movne	r0, r5
   1492c:	ldr	r6, [r4]
   14930:	bl	155a8 <__assert_fail@plt+0x4648>
   14934:	str	r6, [r4]
   14938:	pop	{r4, r5, r6, pc}
   1493c:	andeq	r8, r2, r0, lsl #5
   14940:	ldr	r3, [pc, #12]	; 14954 <__assert_fail@plt+0x39f4>
   14944:	cmp	r0, #0
   14948:	moveq	r0, r3
   1494c:	ldr	r0, [r0]
   14950:	bx	lr
   14954:	andeq	r8, r2, r0, lsl #5
   14958:	ldr	r3, [pc, #12]	; 1496c <__assert_fail@plt+0x3a0c>
   1495c:	cmp	r0, #0
   14960:	moveq	r0, r3
   14964:	str	r1, [r0]
   14968:	bx	lr
   1496c:	andeq	r8, r2, r0, lsl #5
   14970:	ldr	r3, [pc, #52]	; 149ac <__assert_fail@plt+0x3a4c>
   14974:	cmp	r0, #0
   14978:	push	{lr}		; (str lr, [sp, #-4]!)
   1497c:	lsr	lr, r1, #5
   14980:	and	r1, r1, #31
   14984:	moveq	r0, r3
   14988:	add	r3, r0, #8
   1498c:	ldr	ip, [r3, lr, lsl #2]
   14990:	lsr	r0, ip, r1
   14994:	eor	r2, r2, r0
   14998:	and	r0, r0, #1
   1499c:	and	r2, r2, #1
   149a0:	eor	r1, ip, r2, lsl r1
   149a4:	str	r1, [r3, lr, lsl #2]
   149a8:	pop	{pc}		; (ldr pc, [sp], #4)
   149ac:	andeq	r8, r2, r0, lsl #5
   149b0:	ldr	r3, [pc, #16]	; 149c8 <__assert_fail@plt+0x3a68>
   149b4:	cmp	r0, #0
   149b8:	movne	r3, r0
   149bc:	ldr	r0, [r3, #4]
   149c0:	str	r1, [r3, #4]
   149c4:	bx	lr
   149c8:	andeq	r8, r2, r0, lsl #5
   149cc:	ldr	r3, [pc, #44]	; 14a00 <__assert_fail@plt+0x3aa0>
   149d0:	cmp	r0, #0
   149d4:	moveq	r0, r3
   149d8:	mov	r3, #10
   149dc:	cmp	r2, #0
   149e0:	cmpne	r1, #0
   149e4:	str	r3, [r0]
   149e8:	bne	149f4 <__assert_fail@plt+0x3a94>
   149ec:	push	{r4, lr}
   149f0:	bl	10f48 <abort@plt>
   149f4:	str	r1, [r0, #40]	; 0x28
   149f8:	str	r2, [r0, #44]	; 0x2c
   149fc:	bx	lr
   14a00:	andeq	r8, r2, r0, lsl #5
   14a04:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14a08:	sub	sp, sp, #24
   14a0c:	mov	sl, r3
   14a10:	mov	r7, r0
   14a14:	mov	r8, r1
   14a18:	mov	r9, r2
   14a1c:	ldr	r4, [sp, #56]	; 0x38
   14a20:	ldr	r3, [pc, #88]	; 14a80 <__assert_fail@plt+0x3b20>
   14a24:	cmp	r4, #0
   14a28:	moveq	r4, r3
   14a2c:	bl	10e70 <__errno_location@plt>
   14a30:	ldr	r3, [r4, #44]	; 0x2c
   14a34:	mov	r5, r0
   14a38:	mov	r2, r9
   14a3c:	mov	r1, r8
   14a40:	mov	r0, r7
   14a44:	ldr	r6, [r5]
   14a48:	str	r3, [sp, #16]
   14a4c:	ldr	r3, [r4, #40]	; 0x28
   14a50:	str	r3, [sp, #12]
   14a54:	add	r3, r4, #8
   14a58:	str	r3, [sp, #8]
   14a5c:	ldr	r3, [r4, #4]
   14a60:	str	r3, [sp, #4]
   14a64:	ldr	r3, [r4]
   14a68:	str	r3, [sp]
   14a6c:	mov	r3, sl
   14a70:	bl	13a74 <__assert_fail@plt+0x2b14>
   14a74:	str	r6, [r5]
   14a78:	add	sp, sp, #24
   14a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14a80:	andeq	r8, r2, r0, lsl #5
   14a84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a88:	cmp	r3, #0
   14a8c:	sub	sp, sp, #44	; 0x2c
   14a90:	mov	r6, r2
   14a94:	mov	sl, r1
   14a98:	mov	r9, r0
   14a9c:	ldr	r4, [pc, #176]	; 14b54 <__assert_fail@plt+0x3bf4>
   14aa0:	movne	r4, r3
   14aa4:	bl	10e70 <__errno_location@plt>
   14aa8:	ldr	r3, [r0]
   14aac:	mov	r1, #0
   14ab0:	mov	r2, r9
   14ab4:	mov	r8, r0
   14ab8:	mov	r0, r1
   14abc:	ldr	r5, [r4, #4]
   14ac0:	add	fp, r4, #8
   14ac4:	str	r3, [sp, #28]
   14ac8:	ldr	r3, [r4, #44]	; 0x2c
   14acc:	cmp	r6, #0
   14ad0:	orreq	r5, r5, #1
   14ad4:	str	r3, [sp, #16]
   14ad8:	ldr	r3, [r4, #40]	; 0x28
   14adc:	stmib	sp, {r5, fp}
   14ae0:	str	r3, [sp, #12]
   14ae4:	ldr	r3, [r4]
   14ae8:	str	r3, [sp]
   14aec:	mov	r3, sl
   14af0:	bl	13a74 <__assert_fail@plt+0x2b14>
   14af4:	add	r1, r0, #1
   14af8:	mov	r7, r0
   14afc:	mov	r0, r1
   14b00:	str	r1, [sp, #36]	; 0x24
   14b04:	bl	153a8 <__assert_fail@plt+0x4448>
   14b08:	ldr	r3, [r4, #44]	; 0x2c
   14b0c:	mov	r2, r9
   14b10:	ldr	r1, [sp, #36]	; 0x24
   14b14:	str	r3, [sp, #16]
   14b18:	ldr	r3, [r4, #40]	; 0x28
   14b1c:	stmib	sp, {r5, fp}
   14b20:	str	r0, [sp, #32]
   14b24:	str	r3, [sp, #12]
   14b28:	ldr	r3, [r4]
   14b2c:	str	r3, [sp]
   14b30:	mov	r3, sl
   14b34:	bl	13a74 <__assert_fail@plt+0x2b14>
   14b38:	ldr	r3, [sp, #28]
   14b3c:	cmp	r6, #0
   14b40:	ldr	r0, [sp, #32]
   14b44:	str	r3, [r8]
   14b48:	strne	r7, [r6]
   14b4c:	add	sp, sp, #44	; 0x2c
   14b50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b54:	andeq	r8, r2, r0, lsl #5
   14b58:	mov	r3, r2
   14b5c:	mov	r2, #0
   14b60:	b	14a84 <__assert_fail@plt+0x3b24>
   14b64:	push	{r4, r5, r6, r7, r8, lr}
   14b68:	mov	r6, #1
   14b6c:	ldr	r4, [pc, #100]	; 14bd8 <__assert_fail@plt+0x3c78>
   14b70:	ldr	r5, [r4]
   14b74:	add	r7, r5, #4
   14b78:	ldr	r3, [r4, #4]
   14b7c:	cmp	r3, r6
   14b80:	bgt	14bc8 <__assert_fail@plt+0x3c68>
   14b84:	ldr	r6, [pc, #80]	; 14bdc <__assert_fail@plt+0x3c7c>
   14b88:	ldr	r0, [r5, #4]
   14b8c:	cmp	r0, r6
   14b90:	beq	14ba4 <__assert_fail@plt+0x3c44>
   14b94:	bl	13784 <__assert_fail@plt+0x2824>
   14b98:	mov	r3, #256	; 0x100
   14b9c:	str	r3, [r4, #8]
   14ba0:	str	r6, [r4, #12]
   14ba4:	ldr	r6, [pc, #52]	; 14be0 <__assert_fail@plt+0x3c80>
   14ba8:	cmp	r5, r6
   14bac:	beq	14bbc <__assert_fail@plt+0x3c5c>
   14bb0:	mov	r0, r5
   14bb4:	bl	13784 <__assert_fail@plt+0x2824>
   14bb8:	str	r6, [r4]
   14bbc:	mov	r3, #1
   14bc0:	str	r3, [r4, #4]
   14bc4:	pop	{r4, r5, r6, r7, r8, pc}
   14bc8:	ldr	r0, [r7, r6, lsl #3]
   14bcc:	add	r6, r6, #1
   14bd0:	bl	13784 <__assert_fail@plt+0x2824>
   14bd4:	b	14b78 <__assert_fail@plt+0x3c18>
   14bd8:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   14bdc:	andeq	r8, r2, r0, lsl #3
   14be0:	andeq	r8, r2, r0, lsl #2
   14be4:	ldr	r3, [pc, #4]	; 14bf0 <__assert_fail@plt+0x3c90>
   14be8:	mvn	r2, #0
   14bec:	b	14764 <__assert_fail@plt+0x3804>
   14bf0:	andeq	r8, r2, r0, lsl #5
   14bf4:	ldr	r3, [pc]	; 14bfc <__assert_fail@plt+0x3c9c>
   14bf8:	b	14764 <__assert_fail@plt+0x3804>
   14bfc:	andeq	r8, r2, r0, lsl #5
   14c00:	mov	r1, r0
   14c04:	mov	r0, #0
   14c08:	b	14be4 <__assert_fail@plt+0x3c84>
   14c0c:	mov	r2, r1
   14c10:	mov	r1, r0
   14c14:	mov	r0, #0
   14c18:	b	14bf4 <__assert_fail@plt+0x3c94>
   14c1c:	push	{r4, r5, lr}
   14c20:	sub	sp, sp, #52	; 0x34
   14c24:	mov	r5, r2
   14c28:	mov	r4, r0
   14c2c:	mov	r0, sp
   14c30:	bl	13918 <__assert_fail@plt+0x29b8>
   14c34:	mov	r3, sp
   14c38:	mvn	r2, #0
   14c3c:	mov	r1, r5
   14c40:	mov	r0, r4
   14c44:	bl	14764 <__assert_fail@plt+0x3804>
   14c48:	add	sp, sp, #52	; 0x34
   14c4c:	pop	{r4, r5, pc}
   14c50:	push	{r4, r5, r6, lr}
   14c54:	sub	sp, sp, #48	; 0x30
   14c58:	mov	r5, r2
   14c5c:	mov	r6, r3
   14c60:	mov	r4, r0
   14c64:	mov	r0, sp
   14c68:	bl	13918 <__assert_fail@plt+0x29b8>
   14c6c:	mov	r3, sp
   14c70:	mov	r2, r6
   14c74:	mov	r1, r5
   14c78:	mov	r0, r4
   14c7c:	bl	14764 <__assert_fail@plt+0x3804>
   14c80:	add	sp, sp, #48	; 0x30
   14c84:	pop	{r4, r5, r6, pc}
   14c88:	mov	r2, r1
   14c8c:	mov	r1, r0
   14c90:	mov	r0, #0
   14c94:	b	14c1c <__assert_fail@plt+0x3cbc>
   14c98:	mov	r3, r2
   14c9c:	mov	r2, r1
   14ca0:	mov	r1, r0
   14ca4:	mov	r0, #0
   14ca8:	b	14c50 <__assert_fail@plt+0x3cf0>
   14cac:	push	{r4, r5, r6, lr}
   14cb0:	mov	r4, r0
   14cb4:	mov	r5, r1
   14cb8:	mov	r6, r2
   14cbc:	sub	sp, sp, #48	; 0x30
   14cc0:	mov	ip, sp
   14cc4:	ldr	lr, [pc, #64]	; 14d0c <__assert_fail@plt+0x3dac>
   14cc8:	ldm	lr!, {r0, r1, r2, r3}
   14ccc:	stmia	ip!, {r0, r1, r2, r3}
   14cd0:	ldm	lr!, {r0, r1, r2, r3}
   14cd4:	stmia	ip!, {r0, r1, r2, r3}
   14cd8:	ldm	lr, {r0, r1, r2, r3}
   14cdc:	stm	ip, {r0, r1, r2, r3}
   14ce0:	mov	r1, r6
   14ce4:	mov	r2, #1
   14ce8:	mov	r0, sp
   14cec:	bl	14970 <__assert_fail@plt+0x3a10>
   14cf0:	mov	r3, sp
   14cf4:	mov	r2, r5
   14cf8:	mov	r1, r4
   14cfc:	mov	r0, #0
   14d00:	bl	14764 <__assert_fail@plt+0x3804>
   14d04:	add	sp, sp, #48	; 0x30
   14d08:	pop	{r4, r5, r6, pc}
   14d0c:	andeq	r8, r2, r0, lsl #5
   14d10:	mov	r2, r1
   14d14:	mvn	r1, #0
   14d18:	b	14cac <__assert_fail@plt+0x3d4c>
   14d1c:	mov	r1, #58	; 0x3a
   14d20:	b	14d10 <__assert_fail@plt+0x3db0>
   14d24:	mov	r2, #58	; 0x3a
   14d28:	b	14cac <__assert_fail@plt+0x3d4c>
   14d2c:	push	{r4, r5, lr}
   14d30:	sub	sp, sp, #100	; 0x64
   14d34:	mov	r4, r0
   14d38:	mov	r0, sp
   14d3c:	mov	r5, r2
   14d40:	bl	13918 <__assert_fail@plt+0x29b8>
   14d44:	mov	ip, sp
   14d48:	add	lr, sp, #48	; 0x30
   14d4c:	ldm	ip!, {r0, r1, r2, r3}
   14d50:	stmia	lr!, {r0, r1, r2, r3}
   14d54:	ldm	ip!, {r0, r1, r2, r3}
   14d58:	stmia	lr!, {r0, r1, r2, r3}
   14d5c:	ldm	ip, {r0, r1, r2, r3}
   14d60:	stm	lr, {r0, r1, r2, r3}
   14d64:	mov	r2, #1
   14d68:	mov	r1, #58	; 0x3a
   14d6c:	add	r0, sp, #48	; 0x30
   14d70:	bl	14970 <__assert_fail@plt+0x3a10>
   14d74:	add	r3, sp, #48	; 0x30
   14d78:	mvn	r2, #0
   14d7c:	mov	r1, r5
   14d80:	mov	r0, r4
   14d84:	bl	14764 <__assert_fail@plt+0x3804>
   14d88:	add	sp, sp, #100	; 0x64
   14d8c:	pop	{r4, r5, pc}
   14d90:	push	{r4, r5, r6, r7, lr}
   14d94:	mov	r4, r0
   14d98:	mov	r6, r1
   14d9c:	mov	r7, r2
   14da0:	mov	r5, r3
   14da4:	sub	sp, sp, #52	; 0x34
   14da8:	ldr	lr, [pc, #68]	; 14df4 <__assert_fail@plt+0x3e94>
   14dac:	mov	ip, sp
   14db0:	ldm	lr!, {r0, r1, r2, r3}
   14db4:	stmia	ip!, {r0, r1, r2, r3}
   14db8:	ldm	lr!, {r0, r1, r2, r3}
   14dbc:	stmia	ip!, {r0, r1, r2, r3}
   14dc0:	ldm	lr, {r0, r1, r2, r3}
   14dc4:	stm	ip, {r0, r1, r2, r3}
   14dc8:	mov	r2, r7
   14dcc:	mov	r1, r6
   14dd0:	mov	r0, sp
   14dd4:	bl	149cc <__assert_fail@plt+0x3a6c>
   14dd8:	ldr	r2, [sp, #72]	; 0x48
   14ddc:	mov	r3, sp
   14de0:	mov	r1, r5
   14de4:	mov	r0, r4
   14de8:	bl	14764 <__assert_fail@plt+0x3804>
   14dec:	add	sp, sp, #52	; 0x34
   14df0:	pop	{r4, r5, r6, r7, pc}
   14df4:	andeq	r8, r2, r0, lsl #5
   14df8:	mvn	ip, #0
   14dfc:	push	{r0, r1, r2, lr}
   14e00:	str	ip, [sp]
   14e04:	bl	14d90 <__assert_fail@plt+0x3e30>
   14e08:	add	sp, sp, #12
   14e0c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e10:	mov	r3, r2
   14e14:	mov	r2, r1
   14e18:	mov	r1, r0
   14e1c:	mov	r0, #0
   14e20:	b	14df8 <__assert_fail@plt+0x3e98>
   14e24:	push	{r0, r1, r2, lr}
   14e28:	str	r3, [sp]
   14e2c:	mov	r3, r2
   14e30:	mov	r2, r1
   14e34:	mov	r1, r0
   14e38:	mov	r0, #0
   14e3c:	bl	14d90 <__assert_fail@plt+0x3e30>
   14e40:	add	sp, sp, #12
   14e44:	pop	{pc}		; (ldr pc, [sp], #4)
   14e48:	ldr	r3, [pc]	; 14e50 <__assert_fail@plt+0x3ef0>
   14e4c:	b	14764 <__assert_fail@plt+0x3804>
   14e50:	andeq	r8, r2, r8, lsl #2
   14e54:	mov	r2, r1
   14e58:	mov	r1, r0
   14e5c:	mov	r0, #0
   14e60:	b	14e48 <__assert_fail@plt+0x3ee8>
   14e64:	mvn	r2, #0
   14e68:	b	14e48 <__assert_fail@plt+0x3ee8>
   14e6c:	mov	r1, r0
   14e70:	mov	r0, #0
   14e74:	b	14e64 <__assert_fail@plt+0x3f04>
   14e78:	push	{r4, r5, r6, lr}
   14e7c:	cmp	r1, #0
   14e80:	sub	sp, sp, #32
   14e84:	mov	r5, r0
   14e88:	ldr	r4, [sp, #48]	; 0x30
   14e8c:	ldr	r6, [sp, #52]	; 0x34
   14e90:	beq	14f44 <__assert_fail@plt+0x3fe4>
   14e94:	strd	r2, [sp]
   14e98:	mov	r3, r1
   14e9c:	mov	r1, #1
   14ea0:	ldr	r2, [pc, #856]	; 15200 <__assert_fail@plt+0x42a0>
   14ea4:	bl	10eac <__fprintf_chk@plt>
   14ea8:	mov	r2, #5
   14eac:	ldr	r1, [pc, #848]	; 15204 <__assert_fail@plt+0x42a4>
   14eb0:	mov	r0, #0
   14eb4:	bl	10d8c <dcgettext@plt>
   14eb8:	movw	r3, #2022	; 0x7e6
   14ebc:	ldr	r2, [pc, #836]	; 15208 <__assert_fail@plt+0x42a8>
   14ec0:	mov	r1, #1
   14ec4:	str	r3, [sp]
   14ec8:	mov	r3, r0
   14ecc:	mov	r0, r5
   14ed0:	bl	10eac <__fprintf_chk@plt>
   14ed4:	mov	r1, r5
   14ed8:	mov	r0, #10
   14edc:	bl	10d80 <fputc_unlocked@plt>
   14ee0:	mov	r2, #5
   14ee4:	ldr	r1, [pc, #800]	; 1520c <__assert_fail@plt+0x42ac>
   14ee8:	mov	r0, #0
   14eec:	bl	10d8c <dcgettext@plt>
   14ef0:	mov	r2, r0
   14ef4:	mov	r1, #1
   14ef8:	ldr	r3, [pc, #784]	; 15210 <__assert_fail@plt+0x42b0>
   14efc:	mov	r0, r5
   14f00:	bl	10eac <__fprintf_chk@plt>
   14f04:	mov	r1, r5
   14f08:	mov	r0, #10
   14f0c:	bl	10d80 <fputc_unlocked@plt>
   14f10:	cmp	r6, #9
   14f14:	ldrls	pc, [pc, r6, lsl #2]
   14f18:	b	151f4 <__assert_fail@plt+0x4294>
   14f1c:	andeq	r5, r1, r4, lsr r0
   14f20:	andeq	r4, r1, ip, asr pc
   14f24:	andeq	r4, r1, r8, lsl #31
   14f28:			; <UNDEFINED> instruction: 0x00014fbc
   14f2c:	strdeq	r4, [r1], -r8
   14f30:	andeq	r5, r1, ip, lsr r0
   14f34:	andeq	r5, r1, r4, lsl #1
   14f38:	ldrdeq	r5, [r1], -r4
   14f3c:	andeq	r5, r1, ip, lsr #2
   14f40:	andeq	r5, r1, ip, lsl #3
   14f44:	mov	r1, #1
   14f48:	str	r3, [sp]
   14f4c:	mov	r3, r2
   14f50:	ldr	r2, [pc, #700]	; 15214 <__assert_fail@plt+0x42b4>
   14f54:	bl	10eac <__fprintf_chk@plt>
   14f58:	b	14ea8 <__assert_fail@plt+0x3f48>
   14f5c:	mov	r2, #5
   14f60:	ldr	r1, [pc, #688]	; 15218 <__assert_fail@plt+0x42b8>
   14f64:	mov	r0, #0
   14f68:	bl	10d8c <dcgettext@plt>
   14f6c:	ldr	r3, [r4]
   14f70:	mov	r2, r0
   14f74:	mov	r1, #1
   14f78:	mov	r0, r5
   14f7c:	add	sp, sp, #32
   14f80:	pop	{r4, r5, r6, lr}
   14f84:	b	10eac <__fprintf_chk@plt>
   14f88:	mov	r2, #5
   14f8c:	ldr	r1, [pc, #648]	; 1521c <__assert_fail@plt+0x42bc>
   14f90:	mov	r0, #0
   14f94:	bl	10d8c <dcgettext@plt>
   14f98:	ldr	r3, [r4, #4]
   14f9c:	mov	r2, r0
   14fa0:	mov	r1, #1
   14fa4:	mov	r0, r5
   14fa8:	str	r3, [sp, #48]	; 0x30
   14fac:	ldr	r3, [r4]
   14fb0:	add	sp, sp, #32
   14fb4:	pop	{r4, r5, r6, lr}
   14fb8:	b	10eac <__fprintf_chk@plt>
   14fbc:	mov	r2, #5
   14fc0:	ldr	r1, [pc, #600]	; 15220 <__assert_fail@plt+0x42c0>
   14fc4:	mov	r0, #0
   14fc8:	bl	10d8c <dcgettext@plt>
   14fcc:	ldr	r3, [r4, #8]
   14fd0:	mov	r2, r0
   14fd4:	mov	r1, #1
   14fd8:	mov	r0, r5
   14fdc:	str	r3, [sp, #52]	; 0x34
   14fe0:	ldr	r3, [r4, #4]
   14fe4:	str	r3, [sp, #48]	; 0x30
   14fe8:	ldr	r3, [r4]
   14fec:	add	sp, sp, #32
   14ff0:	pop	{r4, r5, r6, lr}
   14ff4:	b	10eac <__fprintf_chk@plt>
   14ff8:	mov	r2, #5
   14ffc:	ldr	r1, [pc, #544]	; 15224 <__assert_fail@plt+0x42c4>
   15000:	mov	r0, #0
   15004:	bl	10d8c <dcgettext@plt>
   15008:	ldr	r3, [r4, #12]
   1500c:	mov	r2, r0
   15010:	mov	r1, #1
   15014:	mov	r0, r5
   15018:	str	r3, [sp, #8]
   1501c:	ldr	r3, [r4, #8]
   15020:	str	r3, [sp, #4]
   15024:	ldr	r3, [r4, #4]
   15028:	str	r3, [sp]
   1502c:	ldr	r3, [r4]
   15030:	bl	10eac <__fprintf_chk@plt>
   15034:	add	sp, sp, #32
   15038:	pop	{r4, r5, r6, pc}
   1503c:	mov	r2, #5
   15040:	ldr	r1, [pc, #480]	; 15228 <__assert_fail@plt+0x42c8>
   15044:	mov	r0, #0
   15048:	bl	10d8c <dcgettext@plt>
   1504c:	ldr	r3, [r4, #16]
   15050:	mov	r2, r0
   15054:	mov	r1, #1
   15058:	mov	r0, r5
   1505c:	str	r3, [sp, #12]
   15060:	ldr	r3, [r4, #12]
   15064:	str	r3, [sp, #8]
   15068:	ldr	r3, [r4, #8]
   1506c:	str	r3, [sp, #4]
   15070:	ldr	r3, [r4, #4]
   15074:	str	r3, [sp]
   15078:	ldr	r3, [r4]
   1507c:	bl	10eac <__fprintf_chk@plt>
   15080:	b	15034 <__assert_fail@plt+0x40d4>
   15084:	mov	r2, #5
   15088:	ldr	r1, [pc, #412]	; 1522c <__assert_fail@plt+0x42cc>
   1508c:	mov	r0, #0
   15090:	bl	10d8c <dcgettext@plt>
   15094:	ldr	r3, [r4, #20]
   15098:	mov	r2, r0
   1509c:	mov	r1, #1
   150a0:	mov	r0, r5
   150a4:	str	r3, [sp, #16]
   150a8:	ldr	r3, [r4, #16]
   150ac:	str	r3, [sp, #12]
   150b0:	ldr	r3, [r4, #12]
   150b4:	str	r3, [sp, #8]
   150b8:	ldr	r3, [r4, #8]
   150bc:	str	r3, [sp, #4]
   150c0:	ldr	r3, [r4, #4]
   150c4:	str	r3, [sp]
   150c8:	ldr	r3, [r4]
   150cc:	bl	10eac <__fprintf_chk@plt>
   150d0:	b	15034 <__assert_fail@plt+0x40d4>
   150d4:	mov	r2, #5
   150d8:	ldr	r1, [pc, #336]	; 15230 <__assert_fail@plt+0x42d0>
   150dc:	mov	r0, #0
   150e0:	bl	10d8c <dcgettext@plt>
   150e4:	ldr	r3, [r4, #24]
   150e8:	mov	r2, r0
   150ec:	mov	r1, #1
   150f0:	mov	r0, r5
   150f4:	str	r3, [sp, #20]
   150f8:	ldr	r3, [r4, #20]
   150fc:	str	r3, [sp, #16]
   15100:	ldr	r3, [r4, #16]
   15104:	str	r3, [sp, #12]
   15108:	ldr	r3, [r4, #12]
   1510c:	str	r3, [sp, #8]
   15110:	ldr	r3, [r4, #8]
   15114:	str	r3, [sp, #4]
   15118:	ldr	r3, [r4, #4]
   1511c:	str	r3, [sp]
   15120:	ldr	r3, [r4]
   15124:	bl	10eac <__fprintf_chk@plt>
   15128:	b	15034 <__assert_fail@plt+0x40d4>
   1512c:	mov	r2, #5
   15130:	ldr	r1, [pc, #252]	; 15234 <__assert_fail@plt+0x42d4>
   15134:	mov	r0, #0
   15138:	bl	10d8c <dcgettext@plt>
   1513c:	ldr	r3, [r4, #28]
   15140:	mov	r2, r0
   15144:	mov	r1, #1
   15148:	mov	r0, r5
   1514c:	str	r3, [sp, #24]
   15150:	ldr	r3, [r4, #24]
   15154:	str	r3, [sp, #20]
   15158:	ldr	r3, [r4, #20]
   1515c:	str	r3, [sp, #16]
   15160:	ldr	r3, [r4, #16]
   15164:	str	r3, [sp, #12]
   15168:	ldr	r3, [r4, #12]
   1516c:	str	r3, [sp, #8]
   15170:	ldr	r3, [r4, #8]
   15174:	str	r3, [sp, #4]
   15178:	ldr	r3, [r4, #4]
   1517c:	str	r3, [sp]
   15180:	ldr	r3, [r4]
   15184:	bl	10eac <__fprintf_chk@plt>
   15188:	b	15034 <__assert_fail@plt+0x40d4>
   1518c:	ldr	r1, [pc, #164]	; 15238 <__assert_fail@plt+0x42d8>
   15190:	mov	r2, #5
   15194:	mov	r0, #0
   15198:	bl	10d8c <dcgettext@plt>
   1519c:	ldr	r3, [r4, #32]
   151a0:	mov	r2, r0
   151a4:	mov	r1, #1
   151a8:	mov	r0, r5
   151ac:	str	r3, [sp, #28]
   151b0:	ldr	r3, [r4, #28]
   151b4:	str	r3, [sp, #24]
   151b8:	ldr	r3, [r4, #24]
   151bc:	str	r3, [sp, #20]
   151c0:	ldr	r3, [r4, #20]
   151c4:	str	r3, [sp, #16]
   151c8:	ldr	r3, [r4, #16]
   151cc:	str	r3, [sp, #12]
   151d0:	ldr	r3, [r4, #12]
   151d4:	str	r3, [sp, #8]
   151d8:	ldr	r3, [r4, #8]
   151dc:	str	r3, [sp, #4]
   151e0:	ldr	r3, [r4, #4]
   151e4:	str	r3, [sp]
   151e8:	ldr	r3, [r4]
   151ec:	bl	10eac <__fprintf_chk@plt>
   151f0:	b	15034 <__assert_fail@plt+0x40d4>
   151f4:	mov	r2, #5
   151f8:	ldr	r1, [pc, #60]	; 1523c <__assert_fail@plt+0x42dc>
   151fc:	b	15194 <__assert_fail@plt+0x4234>
   15200:	andeq	r6, r1, r9, asr #31
   15204:	ldrdeq	r6, [r1], -ip
   15208:	andeq	r7, r1, sl, lsr #5
   1520c:	andeq	r6, r1, r0, ror #31
   15210:	andeq	r7, r1, fp, lsl #1
   15214:	ldrdeq	r6, [r1], -r5
   15218:	andeq	r7, r1, sp, lsr #1
   1521c:	strheq	r7, [r1], -sp
   15220:	ldrdeq	r7, [r1], -r4
   15224:	strdeq	r7, [r1], -r0
   15228:	andeq	r7, r1, r0, lsl r1
   1522c:	andeq	r7, r1, r4, lsr r1
   15230:	andeq	r7, r1, ip, asr r1
   15234:	andeq	r7, r1, r8, lsl #3
   15238:			; <UNDEFINED> instruction: 0x000171b8
   1523c:	andeq	r7, r1, ip, ror #3
   15240:	push	{r0, r1, r4, lr}
   15244:	mov	ip, #0
   15248:	ldr	lr, [sp, #16]
   1524c:	ldr	r4, [lr, ip, lsl #2]
   15250:	cmp	r4, #0
   15254:	bne	1526c <__assert_fail@plt+0x430c>
   15258:	str	lr, [sp]
   1525c:	str	ip, [sp, #4]
   15260:	bl	14e78 <__assert_fail@plt+0x3f18>
   15264:	add	sp, sp, #8
   15268:	pop	{r4, pc}
   1526c:	add	ip, ip, #1
   15270:	b	1524c <__assert_fail@plt+0x42ec>
   15274:	push	{r4, r5, r6, lr}
   15278:	sub	sp, sp, #48	; 0x30
   1527c:	mov	ip, #0
   15280:	add	lr, sp, #8
   15284:	mov	r5, lr
   15288:	ldr	r6, [sp, #64]	; 0x40
   1528c:	ldr	r4, [r6, ip, lsl #2]
   15290:	cmp	r4, #0
   15294:	str	r4, [lr], #4
   15298:	beq	152a8 <__assert_fail@plt+0x4348>
   1529c:	add	ip, ip, #1
   152a0:	cmp	ip, #10
   152a4:	bne	1528c <__assert_fail@plt+0x432c>
   152a8:	stm	sp, {r5, ip}
   152ac:	bl	14e78 <__assert_fail@plt+0x3f18>
   152b0:	add	sp, sp, #48	; 0x30
   152b4:	pop	{r4, r5, r6, pc}
   152b8:	push	{r3}		; (str r3, [sp, #-4]!)
   152bc:	push	{r0, r1, r2, r3, lr}
   152c0:	add	r3, sp, #24
   152c4:	str	r3, [sp]
   152c8:	str	r3, [sp, #12]
   152cc:	ldr	r3, [sp, #20]
   152d0:	bl	15274 <__assert_fail@plt+0x4314>
   152d4:	add	sp, sp, #16
   152d8:	pop	{lr}		; (ldr lr, [sp], #4)
   152dc:	add	sp, sp, #4
   152e0:	bx	lr
   152e4:	ldr	r3, [pc, #116]	; 15360 <__assert_fail@plt+0x4400>
   152e8:	mov	r0, #10
   152ec:	push	{r4, lr}
   152f0:	ldr	r1, [r3]
   152f4:	bl	10d80 <fputc_unlocked@plt>
   152f8:	mov	r2, #5
   152fc:	ldr	r1, [pc, #96]	; 15364 <__assert_fail@plt+0x4404>
   15300:	mov	r0, #0
   15304:	bl	10d8c <dcgettext@plt>
   15308:	mov	r1, r0
   1530c:	ldr	r2, [pc, #84]	; 15368 <__assert_fail@plt+0x4408>
   15310:	mov	r0, #1
   15314:	bl	10e94 <__printf_chk@plt>
   15318:	mov	r2, #5
   1531c:	ldr	r1, [pc, #72]	; 1536c <__assert_fail@plt+0x440c>
   15320:	mov	r0, #0
   15324:	bl	10d8c <dcgettext@plt>
   15328:	mov	r1, r0
   1532c:	ldr	r3, [pc, #60]	; 15370 <__assert_fail@plt+0x4410>
   15330:	mov	r0, #1
   15334:	ldr	r2, [pc, #56]	; 15374 <__assert_fail@plt+0x4414>
   15338:	bl	10e94 <__printf_chk@plt>
   1533c:	mov	r2, #5
   15340:	ldr	r1, [pc, #48]	; 15378 <__assert_fail@plt+0x4418>
   15344:	mov	r0, #0
   15348:	bl	10d8c <dcgettext@plt>
   1534c:	mov	r1, r0
   15350:	ldr	r2, [pc, #36]	; 1537c <__assert_fail@plt+0x441c>
   15354:	mov	r0, #1
   15358:	pop	{r4, lr}
   1535c:	b	10e94 <__printf_chk@plt>
   15360:	andeq	r8, r2, r4, asr r1
   15364:	andeq	r7, r1, r8, lsr #4
   15368:	andeq	r7, r1, ip, lsr r2
   1536c:	andeq	r7, r1, r2, asr r2
   15370:	andeq	r6, r1, r6, lsr #20
   15374:	andeq	r6, r1, lr, asr #20
   15378:	andeq	r7, r1, r6, ror #4
   1537c:	andeq	r7, r1, sp, lsl #5
   15380:	push	{r4, lr}
   15384:	bl	15be0 <__assert_fail@plt+0x4c80>
   15388:	cmp	r0, #0
   1538c:	popne	{r4, pc}
   15390:	bl	15638 <__assert_fail@plt+0x46d8>
   15394:	push	{r4, lr}
   15398:	bl	15be0 <__assert_fail@plt+0x4c80>
   1539c:	cmp	r0, #0
   153a0:	popne	{r4, pc}
   153a4:	bl	15638 <__assert_fail@plt+0x46d8>
   153a8:	b	15380 <__assert_fail@plt+0x4420>
   153ac:	push	{r4, r5, r6, lr}
   153b0:	mov	r5, r0
   153b4:	mov	r4, r1
   153b8:	bl	15c0c <__assert_fail@plt+0x4cac>
   153bc:	cmp	r0, #0
   153c0:	popne	{r4, r5, r6, pc}
   153c4:	adds	r4, r4, #0
   153c8:	movne	r4, #1
   153cc:	cmp	r5, #0
   153d0:	moveq	r4, #1
   153d4:	cmp	r4, #0
   153d8:	popeq	{r4, r5, r6, pc}
   153dc:	bl	15638 <__assert_fail@plt+0x46d8>
   153e0:	push	{r4, lr}
   153e4:	bl	15cc4 <__assert_fail@plt+0x4d64>
   153e8:	cmp	r0, #0
   153ec:	popne	{r4, pc}
   153f0:	bl	15638 <__assert_fail@plt+0x46d8>
   153f4:	push	{r4, r5, r6, lr}
   153f8:	mov	r6, r0
   153fc:	mov	r5, r1
   15400:	mov	r4, r2
   15404:	bl	15d6c <__assert_fail@plt+0x4e0c>
   15408:	cmp	r0, #0
   1540c:	popne	{r4, r5, r6, pc}
   15410:	cmp	r6, #0
   15414:	beq	15424 <__assert_fail@plt+0x44c4>
   15418:	cmp	r5, #0
   1541c:	cmpne	r4, #0
   15420:	popeq	{r4, r5, r6, pc}
   15424:	bl	15638 <__assert_fail@plt+0x46d8>
   15428:	b	153f4 <__assert_fail@plt+0x4494>
   1542c:	push	{r4, lr}
   15430:	bl	15cd4 <__assert_fail@plt+0x4d74>
   15434:	cmp	r0, #0
   15438:	popne	{r4, pc}
   1543c:	bl	15638 <__assert_fail@plt+0x46d8>
   15440:	mov	r2, r1
   15444:	mov	r1, r0
   15448:	mov	r0, #0
   1544c:	b	153f4 <__assert_fail@plt+0x4494>
   15450:	mov	r2, r1
   15454:	mov	r1, r0
   15458:	mov	r0, #0
   1545c:	b	1542c <__assert_fail@plt+0x44cc>
   15460:	cmp	r0, #0
   15464:	push	{r4, r5, r6, lr}
   15468:	mov	r5, r1
   1546c:	ldr	r4, [r1]
   15470:	bne	1549c <__assert_fail@plt+0x453c>
   15474:	cmp	r4, #0
   15478:	bne	1548c <__assert_fail@plt+0x452c>
   1547c:	mov	r4, #64	; 0x40
   15480:	udiv	r4, r4, r2
   15484:	cmp	r2, #64	; 0x40
   15488:	addhi	r4, r4, #1
   1548c:	mov	r1, r4
   15490:	bl	153f4 <__assert_fail@plt+0x4494>
   15494:	str	r4, [r5]
   15498:	pop	{r4, r5, r6, pc}
   1549c:	lsr	r3, r4, #1
   154a0:	add	r3, r3, #1
   154a4:	adds	r4, r4, r3
   154a8:	bcc	1548c <__assert_fail@plt+0x452c>
   154ac:	bl	15638 <__assert_fail@plt+0x46d8>
   154b0:	mov	r2, #1
   154b4:	b	15460 <__assert_fail@plt+0x4500>
   154b8:	ldr	ip, [r1]
   154bc:	push	{r4, r5, r6, r7, r8, lr}
   154c0:	mov	r5, r1
   154c4:	mvn	r8, r3
   154c8:	lsr	r8, r8, #31
   154cc:	ldr	lr, [sp, #24]
   154d0:	asr	r1, ip, #1
   154d4:	adds	r4, ip, r1
   154d8:	mvnvs	r4, #-2147483648	; 0x80000000
   154dc:	cmp	r3, r4
   154e0:	movge	r1, #0
   154e4:	andlt	r1, r8, #1
   154e8:	cmp	r1, #0
   154ec:	movne	r4, r3
   154f0:	smull	r6, r7, r4, lr
   154f4:	cmp	r7, r6, asr #31
   154f8:	bne	15510 <__assert_fail@plt+0x45b0>
   154fc:	cmp	r6, #63	; 0x3f
   15500:	mov	r1, r6
   15504:	bgt	15520 <__assert_fail@plt+0x45c0>
   15508:	mov	r1, #64	; 0x40
   1550c:	b	15514 <__assert_fail@plt+0x45b4>
   15510:	mvn	r1, #-2147483648	; 0x80000000
   15514:	sdiv	r4, r1, lr
   15518:	mls	r6, lr, r4, r1
   1551c:	sub	r1, r1, r6
   15520:	cmp	r0, #0
   15524:	sub	r6, r4, ip
   15528:	streq	r0, [r5]
   1552c:	cmp	r6, r2
   15530:	bge	15564 <__assert_fail@plt+0x4604>
   15534:	adds	r4, ip, r2
   15538:	bvs	15560 <__assert_fail@plt+0x4600>
   1553c:	cmp	r4, r3
   15540:	movle	r3, #0
   15544:	andgt	r3, r8, #1
   15548:	cmp	r3, #0
   1554c:	bne	15560 <__assert_fail@plt+0x4600>
   15550:	smull	r2, r3, r4, lr
   15554:	cmp	r3, r2, asr #31
   15558:	mov	r1, r2
   1555c:	beq	15564 <__assert_fail@plt+0x4604>
   15560:	bl	15638 <__assert_fail@plt+0x46d8>
   15564:	bl	153ac <__assert_fail@plt+0x444c>
   15568:	str	r4, [r5]
   1556c:	pop	{r4, r5, r6, r7, r8, pc}
   15570:	push	{r4, lr}
   15574:	bl	15b8c <__assert_fail@plt+0x4c2c>
   15578:	cmp	r0, #0
   1557c:	popne	{r4, pc}
   15580:	bl	15638 <__assert_fail@plt+0x46d8>
   15584:	mov	r1, #1
   15588:	b	15570 <__assert_fail@plt+0x4610>
   1558c:	push	{r4, lr}
   15590:	bl	15b8c <__assert_fail@plt+0x4c2c>
   15594:	cmp	r0, #0
   15598:	popne	{r4, pc}
   1559c:	bl	15638 <__assert_fail@plt+0x46d8>
   155a0:	mov	r1, #1
   155a4:	b	1558c <__assert_fail@plt+0x462c>
   155a8:	push	{r4, r5, r6, lr}
   155ac:	mov	r4, r1
   155b0:	mov	r5, r0
   155b4:	mov	r0, r1
   155b8:	bl	15380 <__assert_fail@plt+0x4420>
   155bc:	mov	r2, r4
   155c0:	mov	r1, r5
   155c4:	pop	{r4, r5, r6, lr}
   155c8:	b	10d50 <memcpy@plt>
   155cc:	push	{r4, r5, r6, lr}
   155d0:	mov	r4, r1
   155d4:	mov	r5, r0
   155d8:	mov	r0, r1
   155dc:	bl	15394 <__assert_fail@plt+0x4434>
   155e0:	mov	r2, r4
   155e4:	mov	r1, r5
   155e8:	pop	{r4, r5, r6, lr}
   155ec:	b	10d50 <memcpy@plt>
   155f0:	push	{r4, r5, r6, lr}
   155f4:	mov	r5, r0
   155f8:	add	r0, r1, #1
   155fc:	mov	r4, r1
   15600:	bl	15394 <__assert_fail@plt+0x4434>
   15604:	mov	r2, #0
   15608:	mov	r1, r5
   1560c:	strb	r2, [r0, r4]
   15610:	mov	r2, r4
   15614:	pop	{r4, r5, r6, lr}
   15618:	b	10d50 <memcpy@plt>
   1561c:	push	{r4, lr}
   15620:	mov	r4, r0
   15624:	bl	10e58 <strlen@plt>
   15628:	add	r1, r0, #1
   1562c:	mov	r0, r4
   15630:	pop	{r4, lr}
   15634:	b	155a8 <__assert_fail@plt+0x4648>
   15638:	ldr	r3, [pc, #44]	; 1566c <__assert_fail@plt+0x470c>
   1563c:	mov	r2, #5
   15640:	mov	r0, #0
   15644:	push	{r4, lr}
   15648:	ldr	r1, [pc, #32]	; 15670 <__assert_fail@plt+0x4710>
   1564c:	ldr	r4, [r3]
   15650:	bl	10d8c <dcgettext@plt>
   15654:	mov	r3, r0
   15658:	ldr	r2, [pc, #20]	; 15674 <__assert_fail@plt+0x4714>
   1565c:	mov	r1, #0
   15660:	mov	r0, r4
   15664:	bl	10df8 <error@plt>
   15668:	bl	10f48 <abort@plt>
   1566c:	strdeq	r8, [r2], -r4
   15670:	ldrdeq	r7, [r1], -r9
   15674:	andeq	r6, r1, r3, lsr #22
   15678:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1567c:	mov	r3, #0
   15680:	asr	r5, r1, #31
   15684:	mov	r4, r1
   15688:	mov	ip, r3
   1568c:	strd	r4, [sp]
   15690:	subs	r2, r2, #1
   15694:	bcs	156a4 <__assert_fail@plt+0x4744>
   15698:	mov	r0, r3
   1569c:	add	sp, sp, #12
   156a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156a4:	ldrd	r4, [r0]
   156a8:	mov	lr, #0
   156ac:	cmp	r5, r4, asr #31
   156b0:	smulleq	r8, r9, r4, r1
   156b4:	moveq	r6, r8
   156b8:	moveq	sl, r9
   156bc:	beq	15704 <__assert_fail@plt+0x47a4>
   156c0:	cmp	r5, #0
   156c4:	umull	r8, r9, r4, r1
   156c8:	umull	r6, r7, r1, r5
   156cc:	bge	156d8 <__assert_fail@plt+0x4778>
   156d0:	subs	r6, r6, ip
   156d4:	sbc	r7, r7, r1
   156d8:	adds	sl, r6, r9
   156dc:	mov	fp, #0
   156e0:	adc	fp, r7, fp
   156e4:	cmp	fp, sl, asr #31
   156e8:	ldrne	lr, [sp, #4]
   156ec:	moveq	r6, r8
   156f0:	umullne	r6, r7, r4, r1
   156f4:	mulne	sl, r4, lr
   156f8:	movne	lr, #1
   156fc:	mlane	sl, r1, r5, sl
   15700:	addne	sl, sl, r7
   15704:	cmp	lr, #0
   15708:	beq	15734 <__assert_fail@plt+0x47d4>
   1570c:	cmp	r4, #0
   15710:	sbcs	lr, r5, #0
   15714:	mov	lr, #1
   15718:	mvnge	r4, #0
   1571c:	mvnge	r5, #-2147483648	; 0x80000000
   15720:	movlt	r4, #0
   15724:	movlt	r5, #-2147483648	; 0x80000000
   15728:	strd	r4, [r0]
   1572c:	orr	r3, r3, lr
   15730:	b	15690 <__assert_fail@plt+0x4730>
   15734:	stm	r0, {r6, sl}
   15738:	b	1572c <__assert_fail@plt+0x47cc>
   1573c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15740:	cmp	r2, #36	; 0x24
   15744:	sub	sp, sp, #20
   15748:	ldr	r5, [sp, #56]	; 0x38
   1574c:	bls	15764 <__assert_fail@plt+0x4804>
   15750:	ldr	r3, [pc, #1064]	; 15b80 <__assert_fail@plt+0x4c20>
   15754:	mov	r2, #85	; 0x55
   15758:	ldr	r1, [pc, #1060]	; 15b84 <__assert_fail@plt+0x4c24>
   1575c:	ldr	r0, [pc, #1060]	; 15b88 <__assert_fail@plt+0x4c28>
   15760:	bl	10f60 <__assert_fail@plt>
   15764:	cmp	r1, #0
   15768:	mov	r6, r1
   1576c:	mov	r8, r0
   15770:	addeq	r6, sp, #4
   15774:	mov	r9, r2
   15778:	mov	r7, r3
   1577c:	bl	10e70 <__errno_location@plt>
   15780:	mov	sl, r0
   15784:	mov	r4, #0
   15788:	mov	r2, r9
   1578c:	mov	r1, r6
   15790:	mov	r0, r8
   15794:	str	r4, [sl]
   15798:	bl	10ec4 <strtoimax@plt>
   1579c:	ldr	r9, [r6]
   157a0:	strd	r0, [sp, #8]
   157a4:	cmp	r9, r8
   157a8:	bne	157e4 <__assert_fail@plt+0x4884>
   157ac:	cmp	r5, r4
   157b0:	beq	157dc <__assert_fail@plt+0x487c>
   157b4:	ldrb	r1, [r8]
   157b8:	cmp	r1, r4
   157bc:	beq	157dc <__assert_fail@plt+0x487c>
   157c0:	mov	r0, r5
   157c4:	bl	10e64 <strchr@plt>
   157c8:	cmp	r0, r4
   157cc:	movne	r2, #1
   157d0:	movne	r3, #0
   157d4:	strdne	r2, [sp, #8]
   157d8:	bne	15808 <__assert_fail@plt+0x48a8>
   157dc:	mov	r4, #4
   157e0:	b	15834 <__assert_fail@plt+0x48d4>
   157e4:	ldr	r4, [sl]
   157e8:	cmp	r4, #0
   157ec:	beq	157fc <__assert_fail@plt+0x489c>
   157f0:	cmp	r4, #34	; 0x22
   157f4:	bne	157dc <__assert_fail@plt+0x487c>
   157f8:	mov	r4, #1
   157fc:	cmp	r5, #0
   15800:	strdeq	r0, [r7]
   15804:	beq	15834 <__assert_fail@plt+0x48d4>
   15808:	ldrb	r8, [r9]
   1580c:	cmp	r8, #0
   15810:	beq	15b24 <__assert_fail@plt+0x4bc4>
   15814:	mov	r1, r8
   15818:	mov	r0, r5
   1581c:	bl	10e64 <strchr@plt>
   15820:	cmp	r0, #0
   15824:	bne	15840 <__assert_fail@plt+0x48e0>
   15828:	ldrd	r2, [sp, #8]
   1582c:	orr	r4, r4, #2
   15830:	strd	r2, [r7]
   15834:	mov	r0, r4
   15838:	add	sp, sp, #20
   1583c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15840:	cmp	r8, #84	; 0x54
   15844:	beq	15898 <__assert_fail@plt+0x4938>
   15848:	bhi	15880 <__assert_fail@plt+0x4920>
   1584c:	cmp	r8, #75	; 0x4b
   15850:	beq	15898 <__assert_fail@plt+0x4938>
   15854:	bhi	15870 <__assert_fail@plt+0x4910>
   15858:	cmp	r8, #69	; 0x45
   1585c:	beq	15898 <__assert_fail@plt+0x4938>
   15860:	cmp	r8, #71	; 0x47
   15864:	beq	15898 <__assert_fail@plt+0x4938>
   15868:	mov	r5, #1
   1586c:	b	15994 <__assert_fail@plt+0x4a34>
   15870:	cmp	r8, #77	; 0x4d
   15874:	beq	15898 <__assert_fail@plt+0x4938>
   15878:	cmp	r8, #80	; 0x50
   1587c:	b	15864 <__assert_fail@plt+0x4904>
   15880:	cmp	r8, #103	; 0x67
   15884:	beq	15898 <__assert_fail@plt+0x4938>
   15888:	bhi	1596c <__assert_fail@plt+0x4a0c>
   1588c:	sub	r3, r8, #89	; 0x59
   15890:	cmp	r3, #1
   15894:	bhi	15868 <__assert_fail@plt+0x4908>
   15898:	mov	r1, #48	; 0x30
   1589c:	mov	r0, r5
   158a0:	bl	10e64 <strchr@plt>
   158a4:	cmp	r0, #0
   158a8:	beq	15868 <__assert_fail@plt+0x4908>
   158ac:	ldrb	r3, [r9, #1]
   158b0:	cmp	r3, #68	; 0x44
   158b4:	moveq	r5, #2
   158b8:	moveq	r1, #1000	; 0x3e8
   158bc:	beq	158dc <__assert_fail@plt+0x497c>
   158c0:	cmp	r3, #105	; 0x69
   158c4:	beq	15984 <__assert_fail@plt+0x4a24>
   158c8:	cmp	r3, #66	; 0x42
   158cc:	moveq	r5, #2
   158d0:	movne	r5, #1
   158d4:	moveq	r1, #1000	; 0x3e8
   158d8:	movne	r1, #1024	; 0x400
   158dc:	cmp	r8, #89	; 0x59
   158e0:	beq	15b68 <__assert_fail@plt+0x4c08>
   158e4:	bhi	159bc <__assert_fail@plt+0x4a5c>
   158e8:	cmp	r8, #75	; 0x4b
   158ec:	beq	159fc <__assert_fail@plt+0x4a9c>
   158f0:	bhi	1599c <__assert_fail@plt+0x4a3c>
   158f4:	cmp	r8, #69	; 0x45
   158f8:	beq	15b44 <__assert_fail@plt+0x4be4>
   158fc:	cmp	r8, #71	; 0x47
   15900:	beq	15b50 <__assert_fail@plt+0x4bf0>
   15904:	cmp	r8, #66	; 0x42
   15908:	bne	15828 <__assert_fail@plt+0x48c8>
   1590c:	ldrd	r2, [sp, #8]
   15910:	mov	r0, #0
   15914:	cmp	r3, r2, asr #31
   15918:	lsleq	r1, r3, #10
   1591c:	lsleq	r8, r2, #10
   15920:	orreq	r1, r1, r2, lsr #22
   15924:	beq	15adc <__assert_fail@plt+0x4b7c>
   15928:	mov	r1, #1024	; 0x400
   1592c:	cmp	r3, #0
   15930:	lsr	sl, r2, #22
   15934:	lsl	lr, r2, #10
   15938:	umull	r8, r9, r1, r3
   1593c:	bge	15948 <__assert_fail@plt+0x49e8>
   15940:	subs	r8, r8, r0
   15944:	sbc	r9, r9, r1
   15948:	adds	r1, r8, sl
   1594c:	mov	ip, #0
   15950:	adc	ip, r9, ip
   15954:	cmp	ip, r1, asr #31
   15958:	beq	15ad8 <__assert_fail@plt+0x4b78>
   1595c:	lsl	r1, r3, #10
   15960:	lsl	r8, r2, #10
   15964:	orr	r1, r1, r2, lsr #22
   15968:	b	15b3c <__assert_fail@plt+0x4bdc>
   1596c:	cmp	r8, #109	; 0x6d
   15970:	beq	15898 <__assert_fail@plt+0x4938>
   15974:	cmp	r8, #116	; 0x74
   15978:	beq	15898 <__assert_fail@plt+0x4938>
   1597c:	cmp	r8, #107	; 0x6b
   15980:	b	15864 <__assert_fail@plt+0x4904>
   15984:	ldrb	r3, [r9, #2]
   15988:	cmp	r3, #66	; 0x42
   1598c:	movne	r5, #1
   15990:	moveq	r5, #3
   15994:	mov	r1, #1024	; 0x400
   15998:	b	158dc <__assert_fail@plt+0x497c>
   1599c:	cmp	r8, #80	; 0x50
   159a0:	beq	15b58 <__assert_fail@plt+0x4bf8>
   159a4:	cmp	r8, #84	; 0x54
   159a8:	beq	15b60 <__assert_fail@plt+0x4c00>
   159ac:	cmp	r8, #77	; 0x4d
   159b0:	bne	15828 <__assert_fail@plt+0x48c8>
   159b4:	mov	r2, #2
   159b8:	b	15b48 <__assert_fail@plt+0x4be8>
   159bc:	cmp	r8, #103	; 0x67
   159c0:	beq	15b50 <__assert_fail@plt+0x4bf0>
   159c4:	bhi	159e8 <__assert_fail@plt+0x4a88>
   159c8:	cmp	r8, #98	; 0x62
   159cc:	beq	15a88 <__assert_fail@plt+0x4b28>
   159d0:	cmp	r8, #99	; 0x63
   159d4:	beq	15b78 <__assert_fail@plt+0x4c18>
   159d8:	cmp	r8, #90	; 0x5a
   159dc:	bne	15828 <__assert_fail@plt+0x48c8>
   159e0:	mov	r2, #7
   159e4:	b	15b48 <__assert_fail@plt+0x4be8>
   159e8:	cmp	r8, #109	; 0x6d
   159ec:	beq	159b4 <__assert_fail@plt+0x4a54>
   159f0:	bhi	15a04 <__assert_fail@plt+0x4aa4>
   159f4:	cmp	r8, #107	; 0x6b
   159f8:	bne	15828 <__assert_fail@plt+0x48c8>
   159fc:	mov	r2, #1
   15a00:	b	15b48 <__assert_fail@plt+0x4be8>
   15a04:	cmp	r8, #116	; 0x74
   15a08:	beq	15b60 <__assert_fail@plt+0x4c00>
   15a0c:	cmp	r8, #119	; 0x77
   15a10:	bne	15828 <__assert_fail@plt+0x48c8>
   15a14:	ldrd	r2, [sp, #8]
   15a18:	mov	r0, #0
   15a1c:	adds	ip, r2, r2
   15a20:	adc	r1, r3, r3
   15a24:	cmp	r3, r2, asr #31
   15a28:	beq	15a74 <__assert_fail@plt+0x4b14>
   15a2c:	mov	r9, #0
   15a30:	adds	ip, r2, r2
   15a34:	mov	r1, #2
   15a38:	adc	sl, r9, r9
   15a3c:	cmp	r3, #0
   15a40:	umull	r8, r9, r1, r3
   15a44:	bge	15a54 <__assert_fail@plt+0x4af4>
   15a48:	mov	lr, #0
   15a4c:	subs	r8, r8, lr
   15a50:	sbc	r9, r9, r1
   15a54:	adds	r1, r8, sl
   15a58:	mov	lr, #0
   15a5c:	adc	lr, r9, lr
   15a60:	cmp	lr, r1, asr #31
   15a64:	beq	15a74 <__assert_fail@plt+0x4b14>
   15a68:	adds	ip, r2, r2
   15a6c:	mov	r0, #1
   15a70:	adc	r1, r3, r3
   15a74:	cmp	r0, #0
   15a78:	streq	ip, [sp, #8]
   15a7c:	bne	15ae8 <__assert_fail@plt+0x4b88>
   15a80:	str	r1, [sp, #12]
   15a84:	b	15b08 <__assert_fail@plt+0x4ba8>
   15a88:	ldrd	r2, [sp, #8]
   15a8c:	mov	r0, #0
   15a90:	cmp	r3, r2, asr #31
   15a94:	lsleq	r1, r3, #9
   15a98:	lsleq	r8, r2, #9
   15a9c:	orreq	r1, r1, r2, lsr #23
   15aa0:	beq	15adc <__assert_fail@plt+0x4b7c>
   15aa4:	mov	r1, #512	; 0x200
   15aa8:	cmp	r3, #0
   15aac:	lsr	sl, r2, #23
   15ab0:	lsl	lr, r2, #9
   15ab4:	umull	r8, r9, r1, r3
   15ab8:	bge	15ac4 <__assert_fail@plt+0x4b64>
   15abc:	subs	r8, r8, r0
   15ac0:	sbc	r9, r9, r1
   15ac4:	adds	r1, r8, sl
   15ac8:	mov	ip, #0
   15acc:	adc	ip, r9, ip
   15ad0:	cmp	ip, r1, asr #31
   15ad4:	bne	15b30 <__assert_fail@plt+0x4bd0>
   15ad8:	mov	r8, lr
   15adc:	cmp	r0, #0
   15ae0:	streq	r8, [sp, #8]
   15ae4:	beq	15a80 <__assert_fail@plt+0x4b20>
   15ae8:	cmp	r2, #0
   15aec:	mov	r0, #1
   15af0:	sbcs	r3, r3, #0
   15af4:	mvnge	r2, #0
   15af8:	mvnge	r3, #-2147483648	; 0x80000000
   15afc:	movlt	r2, #0
   15b00:	movlt	r3, #-2147483648	; 0x80000000
   15b04:	strd	r2, [sp, #8]
   15b08:	ldr	r3, [r6]
   15b0c:	orr	r4, r4, r0
   15b10:	add	r2, r3, r5
   15b14:	str	r2, [r6]
   15b18:	ldrb	r3, [r3, r5]
   15b1c:	cmp	r3, #0
   15b20:	orrne	r4, r4, #2
   15b24:	ldrd	r2, [sp, #8]
   15b28:	strd	r2, [r7]
   15b2c:	b	15834 <__assert_fail@plt+0x48d4>
   15b30:	lsl	r1, r3, #9
   15b34:	lsl	r8, r2, #9
   15b38:	orr	r1, r1, r2, lsr #23
   15b3c:	mov	r0, #1
   15b40:	b	15adc <__assert_fail@plt+0x4b7c>
   15b44:	mov	r2, #6
   15b48:	add	r0, sp, #8
   15b4c:	b	15b70 <__assert_fail@plt+0x4c10>
   15b50:	mov	r2, #3
   15b54:	b	15b48 <__assert_fail@plt+0x4be8>
   15b58:	mov	r2, #5
   15b5c:	b	15b48 <__assert_fail@plt+0x4be8>
   15b60:	mov	r2, #4
   15b64:	b	15b48 <__assert_fail@plt+0x4be8>
   15b68:	mov	r2, #8
   15b6c:	add	r0, sp, r2
   15b70:	bl	15678 <__assert_fail@plt+0x4718>
   15b74:	b	15b08 <__assert_fail@plt+0x4ba8>
   15b78:	mov	r0, #0
   15b7c:	b	15b08 <__assert_fail@plt+0x4ba8>
   15b80:	andeq	r7, r1, sl, ror #5
   15b84:	strdeq	r7, [r1], -r5
   15b88:	andeq	r7, r1, r3, lsl #6
   15b8c:	cmp	r1, #0
   15b90:	cmpne	r0, #0
   15b94:	beq	15bcc <__assert_fail@plt+0x4c6c>
   15b98:	push	{r4, r5, r6, lr}
   15b9c:	umull	r4, r5, r0, r1
   15ba0:	adds	r3, r5, #0
   15ba4:	movne	r3, #1
   15ba8:	cmp	r4, #0
   15bac:	blt	15bb8 <__assert_fail@plt+0x4c58>
   15bb0:	cmp	r3, #0
   15bb4:	beq	15bd8 <__assert_fail@plt+0x4c78>
   15bb8:	bl	10e70 <__errno_location@plt>
   15bbc:	mov	r3, #12
   15bc0:	str	r3, [r0]
   15bc4:	mov	r0, #0
   15bc8:	pop	{r4, r5, r6, pc}
   15bcc:	mov	r1, #1
   15bd0:	mov	r0, r1
   15bd4:	b	10ce4 <calloc@plt>
   15bd8:	pop	{r4, r5, r6, lr}
   15bdc:	b	15bd4 <__assert_fail@plt+0x4c74>
   15be0:	cmp	r0, #0
   15be4:	beq	15c04 <__assert_fail@plt+0x4ca4>
   15be8:	bge	15c08 <__assert_fail@plt+0x4ca8>
   15bec:	push	{r4, lr}
   15bf0:	bl	10e70 <__errno_location@plt>
   15bf4:	mov	r3, #12
   15bf8:	str	r3, [r0]
   15bfc:	mov	r0, #0
   15c00:	pop	{r4, pc}
   15c04:	mov	r0, #1
   15c08:	b	10e04 <malloc@plt>
   15c0c:	cmp	r0, #0
   15c10:	bne	15c1c <__assert_fail@plt+0x4cbc>
   15c14:	mov	r0, r1
   15c18:	b	15be0 <__assert_fail@plt+0x4c80>
   15c1c:	cmp	r1, #0
   15c20:	push	{r4, lr}
   15c24:	bne	15c34 <__assert_fail@plt+0x4cd4>
   15c28:	bl	13784 <__assert_fail@plt+0x2824>
   15c2c:	mov	r0, #0
   15c30:	pop	{r4, pc}
   15c34:	blt	15c40 <__assert_fail@plt+0x4ce0>
   15c38:	pop	{r4, lr}
   15c3c:	b	10d98 <realloc@plt>
   15c40:	bl	10e70 <__errno_location@plt>
   15c44:	mov	r3, #12
   15c48:	str	r3, [r0]
   15c4c:	b	15c2c <__assert_fail@plt+0x4ccc>
   15c50:	push	{r4, r5, r6, lr}
   15c54:	mov	r4, r0
   15c58:	bl	10dd4 <__fpending@plt>
   15c5c:	mov	r5, r0
   15c60:	mov	r0, r4
   15c64:	bl	10de0 <ferror_unlocked@plt>
   15c68:	mov	r6, r0
   15c6c:	mov	r0, r4
   15c70:	bl	1368c <__assert_fail@plt+0x272c>
   15c74:	cmp	r6, #0
   15c78:	mov	r4, r0
   15c7c:	bne	15ca8 <__assert_fail@plt+0x4d48>
   15c80:	cmp	r0, #0
   15c84:	beq	15ca0 <__assert_fail@plt+0x4d40>
   15c88:	cmp	r5, #0
   15c8c:	bne	15cb8 <__assert_fail@plt+0x4d58>
   15c90:	bl	10e70 <__errno_location@plt>
   15c94:	ldr	r4, [r0]
   15c98:	subs	r4, r4, #9
   15c9c:	mvnne	r4, #0
   15ca0:	mov	r0, r4
   15ca4:	pop	{r4, r5, r6, pc}
   15ca8:	cmp	r0, #0
   15cac:	bne	15cb8 <__assert_fail@plt+0x4d58>
   15cb0:	bl	10e70 <__errno_location@plt>
   15cb4:	str	r4, [r0]
   15cb8:	mvn	r4, #0
   15cbc:	b	15ca0 <__assert_fail@plt+0x4d40>
   15cc0:	b	15be0 <__assert_fail@plt+0x4c80>
   15cc4:	cmp	r1, #0
   15cc8:	orreq	r1, r1, #1
   15ccc:	b	15c0c <__assert_fail@plt+0x4cac>
   15cd0:	b	15b8c <__assert_fail@plt+0x4c2c>
   15cd4:	cmp	r2, #0
   15cd8:	cmpne	r1, #0
   15cdc:	moveq	r2, #1
   15ce0:	moveq	r1, r2
   15ce4:	b	15d6c <__assert_fail@plt+0x4e0c>
   15ce8:	push	{r4, lr}
   15cec:	mov	r0, #14
   15cf0:	bl	10f00 <nl_langinfo@plt>
   15cf4:	cmp	r0, #0
   15cf8:	beq	15d10 <__assert_fail@plt+0x4db0>
   15cfc:	ldrb	r2, [r0]
   15d00:	ldr	r3, [pc, #16]	; 15d18 <__assert_fail@plt+0x4db8>
   15d04:	cmp	r2, #0
   15d08:	moveq	r0, r3
   15d0c:	pop	{r4, pc}
   15d10:	ldr	r0, [pc]	; 15d18 <__assert_fail@plt+0x4db8>
   15d14:	pop	{r4, pc}
   15d18:	andeq	r7, r1, r9, lsr #6
   15d1c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15d20:	subs	r5, r0, #0
   15d24:	mov	r7, r2
   15d28:	addeq	r5, sp, #4
   15d2c:	mov	r6, r1
   15d30:	mov	r0, r5
   15d34:	bl	10dec <mbrtowc@plt>
   15d38:	cmp	r7, #0
   15d3c:	cmnne	r0, #3
   15d40:	mov	r4, r0
   15d44:	bls	15d60 <__assert_fail@plt+0x4e00>
   15d48:	mov	r0, #0
   15d4c:	bl	15d98 <__assert_fail@plt+0x4e38>
   15d50:	cmp	r0, #0
   15d54:	ldrbeq	r3, [r6]
   15d58:	moveq	r4, #1
   15d5c:	streq	r3, [r5]
   15d60:	mov	r0, r4
   15d64:	add	sp, sp, #12
   15d68:	pop	{r4, r5, r6, r7, pc}
   15d6c:	umull	r2, r3, r1, r2
   15d70:	cmp	r3, #0
   15d74:	bne	15d80 <__assert_fail@plt+0x4e20>
   15d78:	mov	r1, r2
   15d7c:	b	15c0c <__assert_fail@plt+0x4cac>
   15d80:	push	{r4, lr}
   15d84:	bl	10e70 <__errno_location@plt>
   15d88:	mov	r3, #12
   15d8c:	str	r3, [r0]
   15d90:	mov	r0, #0
   15d94:	pop	{r4, pc}
   15d98:	push	{lr}		; (str lr, [sp, #-4]!)
   15d9c:	sub	sp, sp, #268	; 0x10c
   15da0:	movw	r2, #257	; 0x101
   15da4:	add	r1, sp, #4
   15da8:	bl	15df4 <__assert_fail@plt+0x4e94>
   15dac:	cmp	r0, #0
   15db0:	movne	r0, #0
   15db4:	bne	15de4 <__assert_fail@plt+0x4e84>
   15db8:	ldr	r1, [pc, #44]	; 15dec <__assert_fail@plt+0x4e8c>
   15dbc:	add	r0, sp, #4
   15dc0:	bl	10d08 <strcmp@plt>
   15dc4:	cmp	r0, #0
   15dc8:	beq	15de0 <__assert_fail@plt+0x4e80>
   15dcc:	ldr	r1, [pc, #28]	; 15df0 <__assert_fail@plt+0x4e90>
   15dd0:	add	r0, sp, #4
   15dd4:	bl	10d08 <strcmp@plt>
   15dd8:	adds	r0, r0, #0
   15ddc:	movne	r0, #1
   15de0:	and	r0, r0, #1
   15de4:	add	sp, sp, #268	; 0x10c
   15de8:	pop	{pc}		; (ldr pc, [sp], #4)
   15dec:	andeq	r7, r1, pc, lsr #6
   15df0:	andeq	r7, r1, r1, lsr r3
   15df4:	push	{r4, r5, r6, lr}
   15df8:	mov	r5, r1
   15dfc:	mov	r1, #0
   15e00:	mov	r4, r2
   15e04:	bl	10ee8 <setlocale@plt>
   15e08:	subs	r6, r0, #0
   15e0c:	bne	15e20 <__assert_fail@plt+0x4ec0>
   15e10:	cmp	r4, #0
   15e14:	mov	r0, #22
   15e18:	strbne	r6, [r5]
   15e1c:	pop	{r4, r5, r6, pc}
   15e20:	bl	10e58 <strlen@plt>
   15e24:	cmp	r4, r0
   15e28:	bls	15e44 <__assert_fail@plt+0x4ee4>
   15e2c:	add	r2, r0, #1
   15e30:	mov	r1, r6
   15e34:	mov	r0, r5
   15e38:	bl	10d50 <memcpy@plt>
   15e3c:	mov	r0, #0
   15e40:	pop	{r4, r5, r6, pc}
   15e44:	cmp	r4, #0
   15e48:	beq	15e68 <__assert_fail@plt+0x4f08>
   15e4c:	sub	r4, r4, #1
   15e50:	mov	r1, r6
   15e54:	mov	r2, r4
   15e58:	mov	r0, r5
   15e5c:	bl	10d50 <memcpy@plt>
   15e60:	mov	r3, #0
   15e64:	strb	r3, [r5, r4]
   15e68:	mov	r0, #34	; 0x22
   15e6c:	pop	{r4, r5, r6, pc}
   15e70:	mov	r1, #0
   15e74:	b	10ee8 <setlocale@plt>
   15e78:	cmp	r3, #0
   15e7c:	cmpeq	r2, #0
   15e80:	bne	15ea4 <__assert_fail@plt+0x4f44>
   15e84:	cmp	r1, #0
   15e88:	movlt	r1, #-2147483648	; 0x80000000
   15e8c:	movlt	r0, #0
   15e90:	blt	15ea0 <__assert_fail@plt+0x4f40>
   15e94:	cmpeq	r0, #0
   15e98:	mvnne	r1, #-2147483648	; 0x80000000
   15e9c:	mvnne	r0, #0
   15ea0:	b	15f88 <__assert_fail@plt+0x5028>
   15ea4:	sub	sp, sp, #8
   15ea8:	push	{sp, lr}
   15eac:	cmp	r1, #0
   15eb0:	blt	15ed0 <__assert_fail@plt+0x4f70>
   15eb4:	cmp	r3, #0
   15eb8:	blt	15f04 <__assert_fail@plt+0x4fa4>
   15ebc:	bl	15f98 <__assert_fail@plt+0x5038>
   15ec0:	ldr	lr, [sp, #4]
   15ec4:	add	sp, sp, #8
   15ec8:	pop	{r2, r3}
   15ecc:	bx	lr
   15ed0:	rsbs	r0, r0, #0
   15ed4:	sbc	r1, r1, r1, lsl #1
   15ed8:	cmp	r3, #0
   15edc:	blt	15f28 <__assert_fail@plt+0x4fc8>
   15ee0:	bl	15f98 <__assert_fail@plt+0x5038>
   15ee4:	ldr	lr, [sp, #4]
   15ee8:	add	sp, sp, #8
   15eec:	pop	{r2, r3}
   15ef0:	rsbs	r0, r0, #0
   15ef4:	sbc	r1, r1, r1, lsl #1
   15ef8:	rsbs	r2, r2, #0
   15efc:	sbc	r3, r3, r3, lsl #1
   15f00:	bx	lr
   15f04:	rsbs	r2, r2, #0
   15f08:	sbc	r3, r3, r3, lsl #1
   15f0c:	bl	15f98 <__assert_fail@plt+0x5038>
   15f10:	ldr	lr, [sp, #4]
   15f14:	add	sp, sp, #8
   15f18:	pop	{r2, r3}
   15f1c:	rsbs	r0, r0, #0
   15f20:	sbc	r1, r1, r1, lsl #1
   15f24:	bx	lr
   15f28:	rsbs	r2, r2, #0
   15f2c:	sbc	r3, r3, r3, lsl #1
   15f30:	bl	15f98 <__assert_fail@plt+0x5038>
   15f34:	ldr	lr, [sp, #4]
   15f38:	add	sp, sp, #8
   15f3c:	pop	{r2, r3}
   15f40:	rsbs	r2, r2, #0
   15f44:	sbc	r3, r3, r3, lsl #1
   15f48:	bx	lr
   15f4c:	cmp	r3, #0
   15f50:	cmpeq	r2, #0
   15f54:	bne	15f6c <__assert_fail@plt+0x500c>
   15f58:	cmp	r1, #0
   15f5c:	cmpeq	r0, #0
   15f60:	mvnne	r1, #0
   15f64:	mvnne	r0, #0
   15f68:	b	15f88 <__assert_fail@plt+0x5028>
   15f6c:	sub	sp, sp, #8
   15f70:	push	{sp, lr}
   15f74:	bl	15f98 <__assert_fail@plt+0x5038>
   15f78:	ldr	lr, [sp, #4]
   15f7c:	add	sp, sp, #8
   15f80:	pop	{r2, r3}
   15f84:	bx	lr
   15f88:	push	{r1, lr}
   15f8c:	mov	r0, #8
   15f90:	bl	10cfc <raise@plt>
   15f94:	pop	{r1, pc}
   15f98:	cmp	r1, r3
   15f9c:	cmpeq	r0, r2
   15fa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fa4:	mov	r4, r0
   15fa8:	movcc	r0, #0
   15fac:	mov	r5, r1
   15fb0:	ldr	lr, [sp, #36]	; 0x24
   15fb4:	movcc	r1, r0
   15fb8:	bcc	160b4 <__assert_fail@plt+0x5154>
   15fbc:	cmp	r3, #0
   15fc0:	clzeq	ip, r2
   15fc4:	clzne	ip, r3
   15fc8:	addeq	ip, ip, #32
   15fcc:	cmp	r5, #0
   15fd0:	clzeq	r1, r4
   15fd4:	addeq	r1, r1, #32
   15fd8:	clzne	r1, r5
   15fdc:	sub	ip, ip, r1
   15fe0:	sub	sl, ip, #32
   15fe4:	lsl	r9, r3, ip
   15fe8:	rsb	fp, ip, #32
   15fec:	orr	r9, r9, r2, lsl sl
   15ff0:	orr	r9, r9, r2, lsr fp
   15ff4:	lsl	r8, r2, ip
   15ff8:	cmp	r5, r9
   15ffc:	cmpeq	r4, r8
   16000:	movcc	r0, #0
   16004:	movcc	r1, r0
   16008:	bcc	16024 <__assert_fail@plt+0x50c4>
   1600c:	mov	r0, #1
   16010:	subs	r4, r4, r8
   16014:	lsl	r1, r0, sl
   16018:	orr	r1, r1, r0, lsr fp
   1601c:	lsl	r0, r0, ip
   16020:	sbc	r5, r5, r9
   16024:	cmp	ip, #0
   16028:	beq	160b4 <__assert_fail@plt+0x5154>
   1602c:	lsr	r6, r8, #1
   16030:	orr	r6, r6, r9, lsl #31
   16034:	lsr	r7, r9, #1
   16038:	mov	r2, ip
   1603c:	b	16060 <__assert_fail@plt+0x5100>
   16040:	subs	r3, r4, r6
   16044:	sbc	r8, r5, r7
   16048:	adds	r3, r3, r3
   1604c:	adc	r8, r8, r8
   16050:	adds	r4, r3, #1
   16054:	adc	r5, r8, #0
   16058:	subs	r2, r2, #1
   1605c:	beq	1607c <__assert_fail@plt+0x511c>
   16060:	cmp	r5, r7
   16064:	cmpeq	r4, r6
   16068:	bcs	16040 <__assert_fail@plt+0x50e0>
   1606c:	adds	r4, r4, r4
   16070:	adc	r5, r5, r5
   16074:	subs	r2, r2, #1
   16078:	bne	16060 <__assert_fail@plt+0x5100>
   1607c:	lsr	r3, r4, ip
   16080:	orr	r3, r3, r5, lsl fp
   16084:	lsr	r2, r5, ip
   16088:	orr	r3, r3, r5, lsr sl
   1608c:	adds	r0, r0, r4
   16090:	mov	r4, r3
   16094:	lsl	r3, r2, ip
   16098:	orr	r3, r3, r4, lsl sl
   1609c:	lsl	ip, r4, ip
   160a0:	orr	r3, r3, r4, lsr fp
   160a4:	adc	r1, r1, r5
   160a8:	subs	r0, r0, ip
   160ac:	mov	r5, r2
   160b0:	sbc	r1, r1, r3
   160b4:	cmp	lr, #0
   160b8:	strdne	r4, [lr]
   160bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   160c4:	mov	r7, r0
   160c8:	ldr	r6, [pc, #72]	; 16118 <__assert_fail@plt+0x51b8>
   160cc:	ldr	r5, [pc, #72]	; 1611c <__assert_fail@plt+0x51bc>
   160d0:	add	r6, pc, r6
   160d4:	add	r5, pc, r5
   160d8:	sub	r6, r6, r5
   160dc:	mov	r8, r1
   160e0:	mov	r9, r2
   160e4:	bl	10cc4 <calloc@plt-0x20>
   160e8:	asrs	r6, r6, #2
   160ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   160f0:	mov	r4, #0
   160f4:	add	r4, r4, #1
   160f8:	ldr	r3, [r5], #4
   160fc:	mov	r2, r9
   16100:	mov	r1, r8
   16104:	mov	r0, r7
   16108:	blx	r3
   1610c:	cmp	r6, r4
   16110:	bne	160f4 <__assert_fail@plt+0x5194>
   16114:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16118:	andeq	r1, r1, ip, lsr lr
   1611c:	andeq	r1, r1, r4, lsr lr
   16120:	bx	lr
   16124:	ldr	r3, [pc, #12]	; 16138 <__assert_fail@plt+0x51d8>
   16128:	mov	r1, #0
   1612c:	add	r3, pc, r3
   16130:	ldr	r2, [r3]
   16134:	b	10e7c <__cxa_atexit@plt>
   16138:			; <UNDEFINED> instruction: 0x00011fb8

Disassembly of section .fini:

0001613c <.fini>:
   1613c:	push	{r3, lr}
   16140:	pop	{r3, pc}
