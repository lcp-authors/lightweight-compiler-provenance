
../repos/coreutils/src/touch:     file format elf32-littlearm


Disassembly of section .init:

00011044 <.init>:
   11044:	push	{r3, lr}
   11048:	bl	11d04 <__assert_fail@plt+0x934>
   1104c:	pop	{r3, pc}

Disassembly of section .plt:

00011050 <calloc@plt-0x14>:
   11050:	push	{lr}		; (str lr, [sp, #-4]!)
   11054:	ldr	lr, [pc, #4]	; 11060 <calloc@plt-0x4>
   11058:	add	lr, pc, lr
   1105c:	ldr	pc, [lr, #8]!
   11060:	andeq	r2, r2, r0, lsr #31

00011064 <calloc@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #139264	; 0x22000
   1106c:	ldr	pc, [ip, #4000]!	; 0xfa0

00011070 <fputs_unlocked@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #139264	; 0x22000
   11078:	ldr	pc, [ip, #3992]!	; 0xf98

0001107c <raise@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #139264	; 0x22000
   11084:	ldr	pc, [ip, #3984]!	; 0xf90

00011088 <gmtime_r@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #139264	; 0x22000
   11090:	ldr	pc, [ip, #3976]!	; 0xf88

00011094 <utimensat@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #139264	; 0x22000
   1109c:	ldr	pc, [ip, #3968]!	; 0xf80

000110a0 <strcmp@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #139264	; 0x22000
   110a8:	ldr	pc, [ip, #3960]!	; 0xf78

000110ac <strtol@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #139264	; 0x22000
   110b4:	ldr	pc, [ip, #3952]!	; 0xf70

000110b8 <mktime@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #139264	; 0x22000
   110c0:	ldr	pc, [ip, #3944]!	; 0xf68

000110c4 <fflush@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #139264	; 0x22000
   110cc:	ldr	pc, [ip, #3936]!	; 0xf60

000110d0 <free@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #139264	; 0x22000
   110d8:	ldr	pc, [ip, #3928]!	; 0xf58

000110dc <clock_gettime@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #139264	; 0x22000
   110e4:	ldr	pc, [ip, #3920]!	; 0xf50

000110e8 <_exit@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #139264	; 0x22000
   110f0:	ldr	pc, [ip, #3912]!	; 0xf48

000110f4 <memcpy@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #139264	; 0x22000
   110fc:	ldr	pc, [ip, #3904]!	; 0xf40

00011100 <mbsinit@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #139264	; 0x22000
   11108:	ldr	pc, [ip, #3896]!	; 0xf38

0001110c <time@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #139264	; 0x22000
   11114:	ldr	pc, [ip, #3888]!	; 0xf30

00011118 <memcmp@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #139264	; 0x22000
   11120:	ldr	pc, [ip, #3880]!	; 0xf28

00011124 <fputc_unlocked@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #139264	; 0x22000
   1112c:	ldr	pc, [ip, #3872]!	; 0xf20

00011130 <dcgettext@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #139264	; 0x22000
   11138:	ldr	pc, [ip, #3864]!	; 0xf18

0001113c <dup2@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #139264	; 0x22000
   11144:	ldr	pc, [ip, #3856]!	; 0xf10

00011148 <realloc@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #139264	; 0x22000
   11150:	ldr	pc, [ip, #3848]!	; 0xf08

00011154 <localtime_r@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #139264	; 0x22000
   1115c:	ldr	pc, [ip, #3840]!	; 0xf00

00011160 <textdomain@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #139264	; 0x22000
   11168:	ldr	pc, [ip, #3832]!	; 0xef8

0001116c <iswprint@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #139264	; 0x22000
   11174:	ldr	pc, [ip, #3824]!	; 0xef0

00011178 <tzset@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #139264	; 0x22000
   11180:	ldr	pc, [ip, #3816]!	; 0xee8

00011184 <fwrite@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #139264	; 0x22000
   1118c:	ldr	pc, [ip, #3808]!	; 0xee0

00011190 <lseek64@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #139264	; 0x22000
   11198:	ldr	pc, [ip, #3800]!	; 0xed8

0001119c <__ctype_get_mb_cur_max@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #139264	; 0x22000
   111a4:	ldr	pc, [ip, #3792]!	; 0xed0

000111a8 <__fpending@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #139264	; 0x22000
   111b0:	ldr	pc, [ip, #3784]!	; 0xec8

000111b4 <mbrtowc@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #139264	; 0x22000
   111bc:	ldr	pc, [ip, #3776]!	; 0xec0

000111c0 <error@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #139264	; 0x22000
   111c8:	ldr	pc, [ip, #3768]!	; 0xeb8

000111cc <open64@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #139264	; 0x22000
   111d4:	ldr	pc, [ip, #3760]!	; 0xeb0

000111d8 <getenv@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #139264	; 0x22000
   111e0:	ldr	pc, [ip, #3752]!	; 0xea8

000111e4 <malloc@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #139264	; 0x22000
   111ec:	ldr	pc, [ip, #3744]!	; 0xea0

000111f0 <__libc_start_main@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #139264	; 0x22000
   111f8:	ldr	pc, [ip, #3736]!	; 0xe98

000111fc <strftime@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #139264	; 0x22000
   11204:	ldr	pc, [ip, #3728]!	; 0xe90

00011208 <__vfprintf_chk@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #139264	; 0x22000
   11210:	ldr	pc, [ip, #3720]!	; 0xe88

00011214 <__freading@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #139264	; 0x22000
   1121c:	ldr	pc, [ip, #3712]!	; 0xe80

00011220 <localtime@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #139264	; 0x22000
   11228:	ldr	pc, [ip, #3704]!	; 0xe78

0001122c <__ctype_tolower_loc@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #139264	; 0x22000
   11234:	ldr	pc, [ip, #3696]!	; 0xe70

00011238 <__ctype_toupper_loc@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #139264	; 0x22000
   11240:	ldr	pc, [ip, #3688]!	; 0xe68

00011244 <__gmon_start__@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #139264	; 0x22000
   1124c:	ldr	pc, [ip, #3680]!	; 0xe60

00011250 <getopt_long@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #139264	; 0x22000
   11258:	ldr	pc, [ip, #3672]!	; 0xe58

0001125c <__ctype_b_loc@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #139264	; 0x22000
   11264:	ldr	pc, [ip, #3664]!	; 0xe50

00011268 <exit@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #139264	; 0x22000
   11270:	ldr	pc, [ip, #3656]!	; 0xe48

00011274 <strlen@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #139264	; 0x22000
   1127c:	ldr	pc, [ip, #3648]!	; 0xe40

00011280 <strchr@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #139264	; 0x22000
   11288:	ldr	pc, [ip, #3640]!	; 0xe38

0001128c <setenv@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #139264	; 0x22000
   11294:	ldr	pc, [ip, #3632]!	; 0xe30

00011298 <__errno_location@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #139264	; 0x22000
   112a0:	ldr	pc, [ip, #3624]!	; 0xe28

000112a4 <__sprintf_chk@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #139264	; 0x22000
   112ac:	ldr	pc, [ip, #3616]!	; 0xe20

000112b0 <snprintf@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #139264	; 0x22000
   112b8:	ldr	pc, [ip, #3608]!	; 0xe18

000112bc <__cxa_atexit@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #139264	; 0x22000
   112c4:	ldr	pc, [ip, #3600]!	; 0xe10

000112c8 <memset@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #139264	; 0x22000
   112d0:	ldr	pc, [ip, #3592]!	; 0xe08

000112d4 <__printf_chk@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #139264	; 0x22000
   112dc:	ldr	pc, [ip, #3584]!	; 0xe00

000112e0 <fileno@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #139264	; 0x22000
   112e8:	ldr	pc, [ip, #3576]!	; 0xdf8

000112ec <__fprintf_chk@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #139264	; 0x22000
   112f4:	ldr	pc, [ip, #3568]!	; 0xdf0

000112f8 <fclose@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #139264	; 0x22000
   11300:	ldr	pc, [ip, #3560]!	; 0xde8

00011304 <fseeko64@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #139264	; 0x22000
   1130c:	ldr	pc, [ip, #3552]!	; 0xde0

00011310 <__overflow@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #139264	; 0x22000
   11318:	ldr	pc, [ip, #3544]!	; 0xdd8

0001131c <setlocale@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #139264	; 0x22000
   11324:	ldr	pc, [ip, #3536]!	; 0xdd0

00011328 <strrchr@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #139264	; 0x22000
   11330:	ldr	pc, [ip, #3528]!	; 0xdc8

00011334 <nl_langinfo@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #139264	; 0x22000
   1133c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011340 <fputc@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #139264	; 0x22000
   11348:	ldr	pc, [ip, #3512]!	; 0xdb8

0001134c <timegm@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #139264	; 0x22000
   11354:	ldr	pc, [ip, #3504]!	; 0xdb0

00011358 <futimens@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #139264	; 0x22000
   11360:	ldr	pc, [ip, #3496]!	; 0xda8

00011364 <bindtextdomain@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #139264	; 0x22000
   1136c:	ldr	pc, [ip, #3488]!	; 0xda0

00011370 <__xstat64@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #139264	; 0x22000
   11378:	ldr	pc, [ip, #3480]!	; 0xd98

0001137c <unsetenv@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #139264	; 0x22000
   11384:	ldr	pc, [ip, #3472]!	; 0xd90

00011388 <fputs@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #139264	; 0x22000
   11390:	ldr	pc, [ip, #3464]!	; 0xd88

00011394 <strncmp@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #139264	; 0x22000
   1139c:	ldr	pc, [ip, #3456]!	; 0xd80

000113a0 <abort@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #139264	; 0x22000
   113a8:	ldr	pc, [ip, #3448]!	; 0xd78

000113ac <close@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #139264	; 0x22000
   113b4:	ldr	pc, [ip, #3440]!	; 0xd70

000113b8 <__lxstat64@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #139264	; 0x22000
   113c0:	ldr	pc, [ip, #3432]!	; 0xd68

000113c4 <__snprintf_chk@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #139264	; 0x22000
   113cc:	ldr	pc, [ip, #3424]!	; 0xd60

000113d0 <__assert_fail@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #139264	; 0x22000
   113d8:	ldr	pc, [ip, #3416]!	; 0xd58

Disassembly of section .text:

000113e0 <.text>:
   113e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   113e4:	movw	r4, #16816	; 0x41b0
   113e8:	movt	r4, #3
   113ec:	strd	r6, [sp, #8]
   113f0:	movw	r6, #3612	; 0xe1c
   113f4:	movt	r6, #2
   113f8:	strd	r8, [sp, #16]
   113fc:	movw	r9, #1572	; 0x624
   11400:	movt	r9, #2
   11404:	strd	sl, [sp, #24]
   11408:	mov	fp, r0
   1140c:	mov	sl, r1
   11410:	str	lr, [sp, #32]
   11414:	sub	sp, sp, #164	; 0xa4
   11418:	movw	r8, #16808	; 0x41a8
   1141c:	movt	r8, #3
   11420:	ldr	r0, [r1]
   11424:	add	r7, r9, #100	; 0x64
   11428:	bl	18e4c <__assert_fail@plt+0x7a7c>
   1142c:	movw	r1, #10188	; 0x27cc
   11430:	movt	r1, #2
   11434:	mov	r0, #6
   11438:	bl	1131c <setlocale@plt>
   1143c:	movw	r1, #3512	; 0xdb8
   11440:	movt	r1, #2
   11444:	movw	r0, #3344	; 0xd10
   11448:	movt	r0, #2
   1144c:	bl	11364 <bindtextdomain@plt>
   11450:	movw	r0, #3344	; 0xd10
   11454:	movt	r0, #2
   11458:	bl	11160 <textdomain@plt>
   1145c:	movw	r0, #10012	; 0x271c
   11460:	movt	r0, #1
   11464:	bl	20600 <__assert_fail@plt+0xf230>
   11468:	mov	r3, #0
   1146c:	str	r3, [r4, #16]
   11470:	strb	r3, [r4, #20]
   11474:	strb	r3, [r4, #21]
   11478:	str	r3, [sp, #24]
   1147c:	str	r3, [sp, #28]
   11480:	mov	r5, #0
   11484:	mov	r3, r7
   11488:	mov	r2, r6
   1148c:	mov	r1, sl
   11490:	mov	r0, fp
   11494:	str	r5, [sp]
   11498:	bl	11250 <getopt_long@plt>
   1149c:	cmn	r0, #1
   114a0:	beq	11660 <__assert_fail@plt+0x290>
   114a4:	cmp	r0, #102	; 0x66
   114a8:	beq	11480 <__assert_fail@plt+0xb0>
   114ac:	ble	114d0 <__assert_fail@plt+0x100>
   114b0:	cmp	r0, #114	; 0x72
   114b4:	beq	1164c <__assert_fail@plt+0x27c>
   114b8:	bgt	11598 <__assert_fail@plt+0x1c8>
   114bc:	cmp	r0, #104	; 0x68
   114c0:	bne	114f0 <__assert_fail@plt+0x120>
   114c4:	mov	r3, #1
   114c8:	strb	r3, [r4, #22]
   114cc:	b	11480 <__assert_fail@plt+0xb0>
   114d0:	cmp	r0, #97	; 0x61
   114d4:	beq	1163c <__assert_fail@plt+0x26c>
   114d8:	ble	1151c <__assert_fail@plt+0x14c>
   114dc:	cmp	r0, #99	; 0x63
   114e0:	bne	11508 <__assert_fail@plt+0x138>
   114e4:	mov	r3, #1
   114e8:	strb	r3, [r4, #21]
   114ec:	b	11480 <__assert_fail@plt+0xb0>
   114f0:	cmp	r0, #109	; 0x6d
   114f4:	bne	11b9c <__assert_fail@plt+0x7cc>
   114f8:	ldr	r3, [r4, #16]
   114fc:	orr	r3, r3, #2
   11500:	str	r3, [r4, #16]
   11504:	b	11480 <__assert_fail@plt+0xb0>
   11508:	cmp	r0, #100	; 0x64
   1150c:	bne	11b9c <__assert_fail@plt+0x7cc>
   11510:	ldr	r3, [r8]
   11514:	str	r3, [sp, #24]
   11518:	b	11480 <__assert_fail@plt+0xb0>
   1151c:	cmn	r0, #3
   11520:	bne	115d4 <__assert_fail@plt+0x204>
   11524:	movw	r1, #3544	; 0xdd8
   11528:	movt	r1, #2
   1152c:	movw	r2, #3556	; 0xde4
   11530:	movt	r2, #2
   11534:	movw	r3, #3572	; 0xdf4
   11538:	movt	r3, #2
   1153c:	movw	r0, #16804	; 0x41a4
   11540:	movt	r0, #3
   11544:	str	r2, [sp, #12]
   11548:	movw	r2, #3600	; 0xe10
   1154c:	movt	r2, #2
   11550:	str	r1, [sp, #16]
   11554:	movw	r1, #3584	; 0xe00
   11558:	movt	r1, #2
   1155c:	str	r2, [sp]
   11560:	movw	r2, #3340	; 0xd0c
   11564:	movt	r2, #2
   11568:	str	r3, [sp, #8]
   1156c:	movw	r3, #16704	; 0x4140
   11570:	movt	r3, #3
   11574:	str	r1, [sp, #4]
   11578:	movw	r1, #1832	; 0x728
   1157c:	movt	r1, #2
   11580:	str	r5, [sp, #20]
   11584:	ldr	r0, [r0]
   11588:	ldr	r3, [r3]
   1158c:	bl	1d4b0 <__assert_fail@plt+0xc0e0>
   11590:	mov	r0, r5
   11594:	bl	11268 <exit@plt>
   11598:	cmp	r0, #116	; 0x74
   1159c:	bne	115e4 <__assert_fail@plt+0x214>
   115a0:	movw	r0, #16816	; 0x41b0
   115a4:	movt	r0, #3
   115a8:	ldr	r1, [r8]
   115ac:	mov	r2, #6
   115b0:	bl	18920 <__assert_fail@plt+0x7550>
   115b4:	subs	r3, r0, #0
   115b8:	str	r3, [sp, #28]
   115bc:	beq	11c0c <__assert_fail@plt+0x83c>
   115c0:	ldr	r1, [pc, #1780]	; 11cbc <__assert_fail@plt+0x8ec>
   115c4:	str	r5, [r4, #4]
   115c8:	ldrd	r2, [r4]
   115cc:	strd	r2, [r1]
   115d0:	b	11480 <__assert_fail@plt+0xb0>
   115d4:	cmn	r0, #2
   115d8:	bne	11b9c <__assert_fail@plt+0x7cc>
   115dc:	mov	r0, r5
   115e0:	bl	11e14 <__assert_fail@plt+0xa44>
   115e4:	cmp	r0, #256	; 0x100
   115e8:	bne	11b9c <__assert_fail@plt+0x7cc>
   115ec:	movw	r2, #16708	; 0x4144
   115f0:	movt	r2, #3
   115f4:	ldr	r3, [pc, #1732]	; 11cc0 <__assert_fail@plt+0x8f0>
   115f8:	mov	r1, #1
   115fc:	mov	lr, #4
   11600:	ldr	ip, [r2]
   11604:	movw	r0, #3536	; 0xdd0
   11608:	movt	r0, #2
   1160c:	str	lr, [sp]
   11610:	str	r1, [sp, #8]
   11614:	add	r2, r3, #20
   11618:	ldr	r1, [r8]
   1161c:	str	ip, [sp, #4]
   11620:	bl	1255c <__assert_fail@plt+0x118c>
   11624:	add	r0, r9, r0, lsl #2
   11628:	ldr	r3, [r4, #16]
   1162c:	ldr	r2, [r0, #56]	; 0x38
   11630:	orr	r3, r3, r2
   11634:	str	r3, [r4, #16]
   11638:	b	11480 <__assert_fail@plt+0xb0>
   1163c:	ldr	r3, [r4, #16]
   11640:	orr	r3, r3, #1
   11644:	str	r3, [r4, #16]
   11648:	b	11480 <__assert_fail@plt+0xb0>
   1164c:	ldr	r3, [r8]
   11650:	mov	r2, #1
   11654:	strb	r2, [r4, #20]
   11658:	str	r3, [r4, #24]
   1165c:	b	11480 <__assert_fail@plt+0xb0>
   11660:	ldr	r3, [r4, #16]
   11664:	cmp	r3, r5
   11668:	moveq	r3, #3
   1166c:	streq	r3, [r4, #16]
   11670:	ldr	r3, [sp, #28]
   11674:	cmp	r3, #0
   11678:	ldrb	r3, [r4, #20]
   1167c:	beq	11984 <__assert_fail@plt+0x5b4>
   11680:	ldr	r2, [sp, #24]
   11684:	cmp	r2, #0
   11688:	orrne	r3, r3, #1
   1168c:	cmp	r3, #0
   11690:	bne	11c00 <__assert_fail@plt+0x830>
   11694:	movw	r8, #16792	; 0x4198
   11698:	movt	r8, #3
   1169c:	ldr	r3, [r8]
   116a0:	cmp	r3, fp
   116a4:	beq	11b78 <__assert_fail@plt+0x7a8>
   116a8:	movge	r3, #1
   116ac:	bge	11918 <__assert_fail@plt+0x548>
   116b0:	movw	r2, #3820	; 0xeec
   116b4:	movt	r2, #2
   116b8:	mov	r9, #1
   116bc:	str	r2, [sp, #24]
   116c0:	movw	r2, #16816	; 0x41b0
   116c4:	movt	r2, #3
   116c8:	str	fp, [sp, #32]
   116cc:	str	r2, [sp, #28]
   116d0:	movw	r2, #3864	; 0xf18
   116d4:	movt	r2, #2
   116d8:	str	r2, [sp, #36]	; 0x24
   116dc:	b	11708 <__assert_fail@plt+0x338>
   116e0:	cmp	r5, #0
   116e4:	beq	11904 <__assert_fail@plt+0x534>
   116e8:	mov	r2, #1
   116ec:	ldr	r3, [r8]
   116f0:	and	r9, r9, r2
   116f4:	ldr	r2, [sp, #32]
   116f8:	add	r3, r3, #1
   116fc:	cmp	r3, r2
   11700:	str	r3, [r8]
   11704:	bge	11914 <__assert_fail@plt+0x544>
   11708:	ldr	r7, [sl, r3, lsl #2]
   1170c:	ldr	r1, [sp, #24]
   11710:	mov	r0, r7
   11714:	bl	110a0 <strcmp@plt>
   11718:	subs	r6, r0, #0
   1171c:	moveq	r5, #1
   11720:	beq	11748 <__assert_fail@plt+0x378>
   11724:	ldrb	r6, [r4, #21]
   11728:	cmp	r6, #0
   1172c:	mvnne	r5, #0
   11730:	movne	r6, #0
   11734:	bne	11748 <__assert_fail@plt+0x378>
   11738:	ldrb	fp, [r4, #22]
   1173c:	cmp	fp, #0
   11740:	mvnne	r5, #0
   11744:	beq	11938 <__assert_fail@plt+0x568>
   11748:	ldr	r3, [r4, #16]
   1174c:	cmp	r3, #3
   11750:	beq	11774 <__assert_fail@plt+0x3a4>
   11754:	cmp	r3, #2
   11758:	mvneq	r3, #-1073741823	; 0xc0000001
   1175c:	streq	r3, [r4, #4]
   11760:	beq	11774 <__assert_fail@plt+0x3a4>
   11764:	cmp	r3, #1
   11768:	bne	11be4 <__assert_fail@plt+0x814>
   1176c:	mvn	r3, #-1073741823	; 0xc0000001
   11770:	str	r3, [r4, #12]
   11774:	ldrb	r3, [r4, #28]
   11778:	mvn	r1, #99	; 0x63
   1177c:	mov	r0, r5
   11780:	ldrb	ip, [r4, #22]
   11784:	cmp	r3, #0
   11788:	ldr	r3, [sp, #28]
   1178c:	movne	r3, #0
   11790:	cmp	r5, #1
   11794:	movne	r2, r7
   11798:	moveq	r2, #0
   1179c:	cmp	ip, #0
   117a0:	movne	ip, #256	; 0x100
   117a4:	moveq	ip, #0
   117a8:	str	ip, [sp]
   117ac:	bl	1288c <__assert_fail@plt+0x14bc>
   117b0:	cmp	r0, #0
   117b4:	beq	116e0 <__assert_fail@plt+0x310>
   117b8:	bl	11298 <__errno_location@plt>
   117bc:	cmp	r5, #0
   117c0:	ldr	fp, [r0]
   117c4:	beq	118b0 <__assert_fail@plt+0x4e0>
   117c8:	cmp	fp, #9
   117cc:	cmpeq	r5, #1
   117d0:	beq	11964 <__assert_fail@plt+0x594>
   117d4:	cmp	fp, #0
   117d8:	beq	116e8 <__assert_fail@plt+0x318>
   117dc:	cmp	r6, #0
   117e0:	cmpne	r6, #21
   117e4:	beq	11858 <__assert_fail@plt+0x488>
   117e8:	cmp	r6, #22
   117ec:	bne	11818 <__assert_fail@plt+0x448>
   117f0:	add	r2, sp, #56	; 0x38
   117f4:	mov	r1, r7
   117f8:	mov	r0, #3
   117fc:	bl	11370 <__xstat64@plt>
   11800:	cmp	r0, #0
   11804:	bne	11818 <__assert_fail@plt+0x448>
   11808:	ldr	r3, [sp, #72]	; 0x48
   1180c:	and	r3, r3, #61440	; 0xf000
   11810:	cmp	r3, #16384	; 0x4000
   11814:	beq	11858 <__assert_fail@plt+0x488>
   11818:	mov	r2, #5
   1181c:	movw	r1, #3884	; 0xf2c
   11820:	movt	r1, #2
   11824:	mov	r0, #0
   11828:	bl	11130 <dcgettext@plt>
   1182c:	mov	r5, r0
   11830:	mov	r1, r7
   11834:	mov	r0, #4
   11838:	bl	1b490 <__assert_fail@plt+0xa0c0>
   1183c:	mov	r3, r0
   11840:	mov	r2, r5
   11844:	mov	r1, r6
   11848:	mov	r0, #0
   1184c:	bl	111c0 <error@plt>
   11850:	mov	r2, #0
   11854:	b	116ec <__assert_fail@plt+0x31c>
   11858:	ldrb	r2, [r4, #21]
   1185c:	cmp	fp, #2
   11860:	movne	r2, #0
   11864:	andeq	r2, r2, #1
   11868:	cmp	r2, #0
   1186c:	bne	116ec <__assert_fail@plt+0x31c>
   11870:	mov	r2, #5
   11874:	movw	r1, #3900	; 0xf3c
   11878:	movt	r1, #2
   1187c:	mov	r0, #0
   11880:	bl	11130 <dcgettext@plt>
   11884:	mov	r5, r0
   11888:	mov	r1, r7
   1188c:	mov	r0, #4
   11890:	bl	1b490 <__assert_fail@plt+0xa0c0>
   11894:	mov	r3, r0
   11898:	mov	r2, r5
   1189c:	mov	r1, fp
   118a0:	mov	r0, #0
   118a4:	bl	111c0 <error@plt>
   118a8:	mov	r2, #0
   118ac:	b	116ec <__assert_fail@plt+0x31c>
   118b0:	mov	r0, r5
   118b4:	bl	113ac <close@plt>
   118b8:	cmp	r0, #0
   118bc:	beq	117d4 <__assert_fail@plt+0x404>
   118c0:	bl	11298 <__errno_location@plt>
   118c4:	ldr	r5, [r0]
   118c8:	mov	r2, #5
   118cc:	mov	r0, #0
   118d0:	ldr	r1, [sp, #36]	; 0x24
   118d4:	bl	11130 <dcgettext@plt>
   118d8:	mov	r6, r0
   118dc:	mov	r1, r7
   118e0:	mov	r0, #4
   118e4:	bl	1b490 <__assert_fail@plt+0xa0c0>
   118e8:	mov	r3, r0
   118ec:	mov	r2, r6
   118f0:	mov	r1, r5
   118f4:	mov	r0, #0
   118f8:	bl	111c0 <error@plt>
   118fc:	mov	r2, #0
   11900:	b	116ec <__assert_fail@plt+0x31c>
   11904:	bl	113ac <close@plt>
   11908:	cmp	r0, #0
   1190c:	beq	116e8 <__assert_fail@plt+0x318>
   11910:	b	118c0 <__assert_fail@plt+0x4f0>
   11914:	mov	r3, r9
   11918:	eor	r0, r3, #1
   1191c:	add	sp, sp, #164	; 0xa4
   11920:	ldrd	r4, [sp]
   11924:	ldrd	r6, [sp, #8]
   11928:	ldrd	r8, [sp, #16]
   1192c:	ldrd	sl, [sp, #24]
   11930:	add	sp, sp, #32
   11934:	pop	{pc}		; (ldr pc, [sp], #4)
   11938:	movw	r3, #438	; 0x1b6
   1193c:	movw	r2, #2369	; 0x941
   11940:	mov	r1, r7
   11944:	mov	r0, fp
   11948:	bl	12808 <__assert_fail@plt+0x1438>
   1194c:	subs	r5, r0, #0
   11950:	movge	r6, fp
   11954:	bge	11748 <__assert_fail@plt+0x378>
   11958:	bl	11298 <__errno_location@plt>
   1195c:	ldr	r6, [r0]
   11960:	b	11748 <__assert_fail@plt+0x378>
   11964:	ldrb	r3, [r4, #21]
   11968:	cmp	r3, #0
   1196c:	bne	116e8 <__assert_fail@plt+0x318>
   11970:	cmp	r6, #21
   11974:	cmpne	r6, #0
   11978:	mov	fp, #9
   1197c:	beq	11870 <__assert_fail@plt+0x4a0>
   11980:	b	117e8 <__assert_fail@plt+0x418>
   11984:	cmp	r3, #0
   11988:	bne	11a60 <__assert_fail@plt+0x690>
   1198c:	ldr	r5, [sp, #24]
   11990:	cmp	r5, #0
   11994:	beq	11a24 <__assert_fail@plt+0x654>
   11998:	add	r0, sp, #40	; 0x28
   1199c:	bl	1293c <__assert_fail@plt+0x156c>
   119a0:	add	r2, sp, #40	; 0x28
   119a4:	mov	r1, r5
   119a8:	movw	r0, #16816	; 0x41b0
   119ac:	movt	r0, #3
   119b0:	bl	11db8 <__assert_fail@plt+0x9e8>
   119b4:	ldrd	r2, [r4]
   119b8:	ldr	r1, [r4, #16]
   119bc:	strd	r2, [r4, #8]
   119c0:	cmp	r1, #3
   119c4:	bne	11694 <__assert_fail@plt+0x2c4>
   119c8:	ldr	r3, [r4]
   119cc:	ldr	r2, [sp, #40]	; 0x28
   119d0:	cmp	r3, r2
   119d4:	bne	11694 <__assert_fail@plt+0x2c4>
   119d8:	ldr	r2, [r4, #4]
   119dc:	ldr	r1, [sp, #44]	; 0x2c
   119e0:	cmp	r2, r1
   119e4:	bne	11694 <__assert_fail@plt+0x2c4>
   119e8:	eor	r3, r3, #1
   119ec:	add	r0, sp, #56	; 0x38
   119f0:	ldr	r1, [sp, #24]
   119f4:	str	r3, [sp, #48]	; 0x30
   119f8:	str	r2, [sp, #52]	; 0x34
   119fc:	add	r2, sp, #48	; 0x30
   11a00:	bl	11db8 <__assert_fail@plt+0x9e8>
   11a04:	ldr	r3, [sp, #48]	; 0x30
   11a08:	ldr	r2, [sp, #56]	; 0x38
   11a0c:	cmp	r2, r3
   11a10:	bne	11694 <__assert_fail@plt+0x2c4>
   11a14:	ldr	r3, [sp, #52]	; 0x34
   11a18:	ldr	r2, [sp, #60]	; 0x3c
   11a1c:	cmp	r2, r3
   11a20:	bne	11694 <__assert_fail@plt+0x2c4>
   11a24:	movw	r8, #16792	; 0x4198
   11a28:	movt	r8, #3
   11a2c:	ldr	r3, [r8]
   11a30:	sub	r3, fp, r3
   11a34:	cmp	r3, #1
   11a38:	bgt	11b10 <__assert_fail@plt+0x740>
   11a3c:	ldr	r3, [r4, #16]
   11a40:	cmp	r3, #3
   11a44:	mvnne	r3, #-1073741824	; 0xc0000000
   11a48:	strne	r3, [r4, #4]
   11a4c:	strne	r3, [r4, #12]
   11a50:	bne	1169c <__assert_fail@plt+0x2cc>
   11a54:	mov	r3, #1
   11a58:	strb	r3, [r4, #28]
   11a5c:	b	1169c <__assert_fail@plt+0x2cc>
   11a60:	ldrb	r3, [r4, #22]
   11a64:	add	r2, sp, #56	; 0x38
   11a68:	mov	r0, #3
   11a6c:	ldr	r1, [r4, #24]
   11a70:	cmp	r3, #0
   11a74:	bne	11ae8 <__assert_fail@plt+0x718>
   11a78:	bl	11370 <__xstat64@plt>
   11a7c:	adds	r0, r0, #0
   11a80:	movne	r0, #1
   11a84:	cmp	r0, #0
   11a88:	bne	11ba4 <__assert_fail@plt+0x7d4>
   11a8c:	ldr	r2, [sp, #24]
   11a90:	ldr	r1, [sp, #128]	; 0x80
   11a94:	ldr	r3, [sp, #132]	; 0x84
   11a98:	cmp	r2, #0
   11a9c:	ldr	r2, [sp, #136]	; 0x88
   11aa0:	stm	r4, {r1, r3}
   11aa4:	ldr	r3, [sp, #140]	; 0x8c
   11aa8:	str	r2, [r4, #8]
   11aac:	str	r3, [r4, #12]
   11ab0:	beq	11694 <__assert_fail@plt+0x2c4>
   11ab4:	ldr	r3, [r4, #16]
   11ab8:	tst	r3, #1
   11abc:	bne	11af8 <__assert_fail@plt+0x728>
   11ac0:	ldr	r3, [r4, #16]
   11ac4:	tst	r3, #2
   11ac8:	beq	11694 <__assert_fail@plt+0x2c4>
   11acc:	ldr	r2, [pc, #488]	; 11cbc <__assert_fail@plt+0x8ec>
   11ad0:	movw	r8, #16792	; 0x4198
   11ad4:	movt	r8, #3
   11ad8:	ldr	r1, [sp, #24]
   11adc:	mov	r0, r2
   11ae0:	bl	11db8 <__assert_fail@plt+0x9e8>
   11ae4:	b	1169c <__assert_fail@plt+0x2cc>
   11ae8:	bl	113b8 <__lxstat64@plt>
   11aec:	adds	r0, r0, #0
   11af0:	movne	r0, #1
   11af4:	b	11a84 <__assert_fail@plt+0x6b4>
   11af8:	movw	r2, #16816	; 0x41b0
   11afc:	movt	r2, #3
   11b00:	ldr	r1, [sp, #24]
   11b04:	mov	r0, r2
   11b08:	bl	11db8 <__assert_fail@plt+0x9e8>
   11b0c:	b	11ac0 <__assert_fail@plt+0x6f0>
   11b10:	bl	18de8 <__assert_fail@plt+0x7a18>
   11b14:	movw	r3, #3503	; 0xdaf
   11b18:	movt	r3, #3
   11b1c:	cmp	r0, r3
   11b20:	bgt	11a3c <__assert_fail@plt+0x66c>
   11b24:	ldr	r3, [r8]
   11b28:	movw	r0, #16816	; 0x41b0
   11b2c:	movt	r0, #3
   11b30:	mov	r2, #9
   11b34:	ldr	r1, [sl, r3, lsl #2]
   11b38:	bl	18920 <__assert_fail@plt+0x7550>
   11b3c:	cmp	r0, #0
   11b40:	beq	11a3c <__assert_fail@plt+0x66c>
   11b44:	mov	r3, #0
   11b48:	movw	r0, #3704	; 0xe78
   11b4c:	movt	r0, #2
   11b50:	str	r3, [r4, #4]
   11b54:	ldrd	r2, [r4]
   11b58:	strd	r2, [r4, #8]
   11b5c:	bl	111d8 <getenv@plt>
   11b60:	subs	r6, r0, #0
   11b64:	beq	11c3c <__assert_fail@plt+0x86c>
   11b68:	ldr	r3, [r8]
   11b6c:	add	r3, r3, #1
   11b70:	str	r3, [r8]
   11b74:	b	1169c <__assert_fail@plt+0x2cc>
   11b78:	movw	r1, #3796	; 0xed4
   11b7c:	movt	r1, #2
   11b80:	mov	r2, #5
   11b84:	mov	r0, #0
   11b88:	bl	11130 <dcgettext@plt>
   11b8c:	mov	r1, #0
   11b90:	mov	r2, r0
   11b94:	mov	r0, r1
   11b98:	bl	111c0 <error@plt>
   11b9c:	mov	r0, #1
   11ba0:	bl	11e14 <__assert_fail@plt+0xa44>
   11ba4:	bl	11298 <__errno_location@plt>
   11ba8:	ldr	r5, [r0]
   11bac:	mov	r2, #5
   11bb0:	movw	r1, #3672	; 0xe58
   11bb4:	movt	r1, #2
   11bb8:	mov	r0, #0
   11bbc:	bl	11130 <dcgettext@plt>
   11bc0:	mov	r6, r0
   11bc4:	mov	r0, #4
   11bc8:	ldr	r1, [r4, #24]
   11bcc:	bl	1b490 <__assert_fail@plt+0xa0c0>
   11bd0:	mov	r3, r0
   11bd4:	mov	r2, r6
   11bd8:	mov	r1, r5
   11bdc:	mov	r0, #1
   11be0:	bl	111c0 <error@plt>
   11be4:	movw	r1, #3824	; 0xef0
   11be8:	movt	r1, #2
   11bec:	ldr	r3, [pc, #208]	; 11cc4 <__assert_fail@plt+0x8f4>
   11bf0:	movw	r0, #3836	; 0xefc
   11bf4:	movt	r0, #2
   11bf8:	mov	r2, #147	; 0x93
   11bfc:	bl	113d0 <__assert_fail@plt>
   11c00:	movw	r1, #3624	; 0xe28
   11c04:	movt	r1, #2
   11c08:	b	11b80 <__assert_fail@plt+0x7b0>
   11c0c:	mov	r2, #5
   11c10:	movw	r1, #1808	; 0x710
   11c14:	movt	r1, #2
   11c18:	bl	11130 <dcgettext@plt>
   11c1c:	mov	r4, r0
   11c20:	ldr	r0, [r8]
   11c24:	bl	1c7bc <__assert_fail@plt+0xb3ec>
   11c28:	mov	r3, r0
   11c2c:	mov	r2, r4
   11c30:	ldr	r1, [sp, #28]
   11c34:	mov	r0, #1
   11c38:	bl	111c0 <error@plt>
   11c3c:	movw	r0, #16816	; 0x41b0
   11c40:	movt	r0, #3
   11c44:	bl	11220 <localtime@plt>
   11c48:	subs	r5, r0, #0
   11c4c:	beq	11b68 <__assert_fail@plt+0x798>
   11c50:	mov	r2, #5
   11c54:	mov	r0, r6
   11c58:	movw	r1, #3720	; 0xe88
   11c5c:	movt	r1, #2
   11c60:	bl	11130 <dcgettext@plt>
   11c64:	ldr	ip, [r5]
   11c68:	mov	r2, r0
   11c6c:	mov	r1, r6
   11c70:	mov	r0, r6
   11c74:	ldr	r3, [r8]
   11c78:	str	ip, [sp, #20]
   11c7c:	ldr	ip, [r5, #4]
   11c80:	ldr	r3, [sl, r3, lsl #2]
   11c84:	str	ip, [sp, #16]
   11c88:	ldr	ip, [r5, #8]
   11c8c:	str	ip, [sp, #12]
   11c90:	ldr	ip, [r5, #12]
   11c94:	str	ip, [sp, #8]
   11c98:	ldr	ip, [r5, #16]
   11c9c:	add	ip, ip, #1
   11ca0:	str	ip, [sp, #4]
   11ca4:	ldr	ip, [r5, #20]
   11ca8:	add	ip, ip, #1888	; 0x760
   11cac:	add	ip, ip, #12
   11cb0:	str	ip, [sp]
   11cb4:	bl	111c0 <error@plt>
   11cb8:	b	11b68 <__assert_fail@plt+0x798>
   11cbc:			; <UNDEFINED> instruction: 0x000341b8
   11cc0:	andeq	r0, r2, ip, asr r6
   11cc4:	andeq	r0, r2, r8, lsl #14
   11cc8:	mov	fp, #0
   11ccc:	mov	lr, #0
   11cd0:	pop	{r1}		; (ldr r1, [sp], #4)
   11cd4:	mov	r2, sp
   11cd8:	push	{r2}		; (str r2, [sp, #-4]!)
   11cdc:	push	{r0}		; (str r0, [sp, #-4]!)
   11ce0:	ldr	ip, [pc, #16]	; 11cf8 <__assert_fail@plt+0x928>
   11ce4:	push	{ip}		; (str ip, [sp, #-4]!)
   11ce8:	ldr	r0, [pc, #12]	; 11cfc <__assert_fail@plt+0x92c>
   11cec:	ldr	r3, [pc, #12]	; 11d00 <__assert_fail@plt+0x930>
   11cf0:	bl	111f0 <__libc_start_main@plt>
   11cf4:	bl	113a0 <abort@plt>
   11cf8:	strdeq	r0, [r2], -ip
   11cfc:	andeq	r1, r1, r0, ror #7
   11d00:	muleq	r2, ip, r5
   11d04:	ldr	r3, [pc, #20]	; 11d20 <__assert_fail@plt+0x950>
   11d08:	ldr	r2, [pc, #20]	; 11d24 <__assert_fail@plt+0x954>
   11d0c:	add	r3, pc, r3
   11d10:	ldr	r2, [r3, r2]
   11d14:	cmp	r2, #0
   11d18:	bxeq	lr
   11d1c:	b	11244 <__gmon_start__@plt>
   11d20:	andeq	r2, r2, ip, ror #5
   11d24:	andeq	r0, r0, r4, lsr r1
   11d28:	ldr	r0, [pc, #24]	; 11d48 <__assert_fail@plt+0x978>
   11d2c:	ldr	r3, [pc, #24]	; 11d4c <__assert_fail@plt+0x97c>
   11d30:	cmp	r3, r0
   11d34:	bxeq	lr
   11d38:	ldr	r3, [pc, #16]	; 11d50 <__assert_fail@plt+0x980>
   11d3c:	cmp	r3, #0
   11d40:	bxeq	lr
   11d44:	bx	r3
   11d48:	andeq	r4, r3, ip, lsl #3
   11d4c:	andeq	r4, r3, ip, lsl #3
   11d50:	andeq	r0, r0, r0
   11d54:	ldr	r0, [pc, #36]	; 11d80 <__assert_fail@plt+0x9b0>
   11d58:	ldr	r1, [pc, #36]	; 11d84 <__assert_fail@plt+0x9b4>
   11d5c:	sub	r1, r1, r0
   11d60:	asr	r1, r1, #2
   11d64:	add	r1, r1, r1, lsr #31
   11d68:	asrs	r1, r1, #1
   11d6c:	bxeq	lr
   11d70:	ldr	r3, [pc, #16]	; 11d88 <__assert_fail@plt+0x9b8>
   11d74:	cmp	r3, #0
   11d78:	bxeq	lr
   11d7c:	bx	r3
   11d80:	andeq	r4, r3, ip, lsl #3
   11d84:	andeq	r4, r3, ip, lsl #3
   11d88:	andeq	r0, r0, r0
   11d8c:	push	{r4, lr}
   11d90:	ldr	r4, [pc, #24]	; 11db0 <__assert_fail@plt+0x9e0>
   11d94:	ldrb	r3, [r4]
   11d98:	cmp	r3, #0
   11d9c:	popne	{r4, pc}
   11da0:	bl	11d28 <__assert_fail@plt+0x958>
   11da4:	mov	r3, #1
   11da8:	strb	r3, [r4]
   11dac:	pop	{r4, pc}
   11db0:	andeq	r4, r3, ip, lsr #3
   11db4:	b	11d54 <__assert_fail@plt+0x984>
   11db8:	strd	r4, [sp, #-16]!
   11dbc:	mov	r5, r1
   11dc0:	str	r6, [sp, #8]
   11dc4:	str	lr, [sp, #12]
   11dc8:	bl	188a0 <__assert_fail@plt+0x74d0>
   11dcc:	subs	r4, r0, #0
   11dd0:	beq	11de4 <__assert_fail@plt+0xa14>
   11dd4:	ldrd	r4, [sp]
   11dd8:	ldr	r6, [sp, #8]
   11ddc:	add	sp, sp, #12
   11de0:	pop	{pc}		; (ldr pc, [sp], #4)
   11de4:	mov	r2, #5
   11de8:	movw	r1, #1808	; 0x710
   11dec:	movt	r1, #2
   11df0:	bl	11130 <dcgettext@plt>
   11df4:	mov	r6, r0
   11df8:	mov	r0, r5
   11dfc:	bl	1c7bc <__assert_fail@plt+0xb3ec>
   11e00:	mov	r3, r0
   11e04:	mov	r2, r6
   11e08:	mov	r1, r4
   11e0c:	mov	r0, #1
   11e10:	bl	111c0 <error@plt>
   11e14:	subs	r6, r0, #0
   11e18:	str	r7, [sp, #-8]!
   11e1c:	str	lr, [sp, #4]
   11e20:	sub	sp, sp, #56	; 0x38
   11e24:	beq	11e6c <__assert_fail@plt+0xa9c>
   11e28:	movw	r3, #16800	; 0x41a0
   11e2c:	movt	r3, #3
   11e30:	ldr	r4, [r3]
   11e34:	mov	r2, #5
   11e38:	movw	r1, #1840	; 0x730
   11e3c:	movt	r1, #2
   11e40:	mov	r0, #0
   11e44:	bl	11130 <dcgettext@plt>
   11e48:	movw	r3, #16856	; 0x41d8
   11e4c:	movt	r3, #3
   11e50:	mov	r2, r0
   11e54:	mov	r1, #1
   11e58:	ldr	r3, [r3]
   11e5c:	mov	r0, r4
   11e60:	bl	112ec <__fprintf_chk@plt>
   11e64:	mov	r0, r6
   11e68:	bl	11268 <exit@plt>
   11e6c:	mov	r2, #5
   11e70:	movw	r1, #1880	; 0x758
   11e74:	movt	r1, #2
   11e78:	movw	r7, #16804	; 0x41a4
   11e7c:	movt	r7, #3
   11e80:	bl	11130 <dcgettext@plt>
   11e84:	movw	r3, #16856	; 0x41d8
   11e88:	movt	r3, #3
   11e8c:	mov	r1, r0
   11e90:	mov	r0, #1
   11e94:	ldr	r2, [r3]
   11e98:	bl	112d4 <__printf_chk@plt>
   11e9c:	mov	r2, #5
   11ea0:	movw	r1, #1912	; 0x778
   11ea4:	movt	r1, #2
   11ea8:	mov	r0, r6
   11eac:	bl	11130 <dcgettext@plt>
   11eb0:	ldr	r1, [r7]
   11eb4:	bl	11070 <fputs_unlocked@plt>
   11eb8:	mov	r2, #5
   11ebc:	movw	r1, #2204	; 0x89c
   11ec0:	movt	r1, #2
   11ec4:	mov	r0, r6
   11ec8:	bl	11130 <dcgettext@plt>
   11ecc:	ldr	r1, [r7]
   11ed0:	bl	11070 <fputs_unlocked@plt>
   11ed4:	mov	r2, #5
   11ed8:	movw	r1, #2280	; 0x8e8
   11edc:	movt	r1, #2
   11ee0:	mov	r0, r6
   11ee4:	bl	11130 <dcgettext@plt>
   11ee8:	ldr	r1, [r7]
   11eec:	bl	11070 <fputs_unlocked@plt>
   11ef0:	mov	r2, #5
   11ef4:	movw	r1, #2492	; 0x9bc
   11ef8:	movt	r1, #2
   11efc:	mov	r0, r6
   11f00:	bl	11130 <dcgettext@plt>
   11f04:	ldr	r1, [r7]
   11f08:	bl	11070 <fputs_unlocked@plt>
   11f0c:	mov	r2, #5
   11f10:	movw	r1, #2756	; 0xac4
   11f14:	movt	r1, #2
   11f18:	mov	r0, r6
   11f1c:	bl	11130 <dcgettext@plt>
   11f20:	ldr	r1, [r7]
   11f24:	bl	11070 <fputs_unlocked@plt>
   11f28:	mov	r2, #5
   11f2c:	movw	r1, #3100	; 0xc1c
   11f30:	movt	r1, #2
   11f34:	mov	r0, r6
   11f38:	bl	11130 <dcgettext@plt>
   11f3c:	ldr	r1, [r7]
   11f40:	bl	11070 <fputs_unlocked@plt>
   11f44:	mov	r2, #5
   11f48:	movw	r1, #3148	; 0xc4c
   11f4c:	movt	r1, #2
   11f50:	mov	r0, r6
   11f54:	bl	11130 <dcgettext@plt>
   11f58:	ldr	r1, [r7]
   11f5c:	bl	11070 <fputs_unlocked@plt>
   11f60:	mov	r2, #5
   11f64:	movw	r1, #3204	; 0xc84
   11f68:	movt	r1, #2
   11f6c:	mov	r0, r6
   11f70:	bl	11130 <dcgettext@plt>
   11f74:	ldr	r1, [r7]
   11f78:	bl	11070 <fputs_unlocked@plt>
   11f7c:	movw	lr, #1572	; 0x624
   11f80:	movt	lr, #2
   11f84:	ldr	ip, [lr]
   11f88:	ldr	r4, [lr, #4]
   11f8c:	ldrd	r8, [lr, #8]
   11f90:	subs	r1, ip, #0
   11f94:	str	ip, [sp]
   11f98:	ldrd	r2, [lr, #16]
   11f9c:	str	r4, [sp, #4]
   11fa0:	ldrd	r4, [lr, #24]
   11fa4:	strd	r8, [sp, #8]
   11fa8:	ldrd	r8, [lr, #32]
   11fac:	strd	r2, [sp, #16]
   11fb0:	ldrd	r2, [lr, #40]	; 0x28
   11fb4:	strd	r4, [sp, #24]
   11fb8:	ldrd	r4, [lr, #48]	; 0x30
   11fbc:	strd	r8, [sp, #32]
   11fc0:	strd	r2, [sp, #40]	; 0x28
   11fc4:	strd	r4, [sp, #48]	; 0x30
   11fc8:	movwne	r5, #1832	; 0x728
   11fcc:	mov	r4, sp
   11fd0:	movtne	r5, #2
   11fd4:	bne	120cc <__assert_fail@plt+0xcfc>
   11fd8:	ldr	r4, [r4, #4]
   11fdc:	movw	r1, #3276	; 0xccc
   11fe0:	movt	r1, #2
   11fe4:	mov	r2, #5
   11fe8:	cmp	r4, #0
   11fec:	beq	120e0 <__assert_fail@plt+0xd10>
   11ff0:	mov	r0, #0
   11ff4:	bl	11130 <dcgettext@plt>
   11ff8:	mov	r1, r0
   11ffc:	movw	r3, #3300	; 0xce4
   12000:	movt	r3, #2
   12004:	movw	r2, #3340	; 0xd0c
   12008:	movt	r2, #2
   1200c:	mov	r0, #1
   12010:	bl	112d4 <__printf_chk@plt>
   12014:	mov	r1, #0
   12018:	mov	r0, #5
   1201c:	bl	1131c <setlocale@plt>
   12020:	cmp	r0, #0
   12024:	movweq	r5, #1832	; 0x728
   12028:	movteq	r5, #2
   1202c:	beq	12050 <__assert_fail@plt+0xc80>
   12030:	movw	r1, #3356	; 0xd1c
   12034:	movt	r1, #2
   12038:	mov	r2, #3
   1203c:	movw	r5, #1832	; 0x728
   12040:	movt	r5, #2
   12044:	bl	11394 <strncmp@plt>
   12048:	cmp	r0, #0
   1204c:	bne	12198 <__assert_fail@plt+0xdc8>
   12050:	mov	r2, #5
   12054:	movw	r1, #3432	; 0xd68
   12058:	movt	r1, #2
   1205c:	mov	r0, #0
   12060:	bl	11130 <dcgettext@plt>
   12064:	mov	r1, r0
   12068:	movw	r3, #1832	; 0x728
   1206c:	movt	r3, #2
   12070:	movw	r2, #3300	; 0xce4
   12074:	movt	r2, #2
   12078:	mov	r0, #1
   1207c:	bl	112d4 <__printf_chk@plt>
   12080:	mov	r2, #5
   12084:	movw	r1, #3460	; 0xd84
   12088:	movt	r1, #2
   1208c:	mov	r0, #0
   12090:	bl	11130 <dcgettext@plt>
   12094:	movw	r2, #3928	; 0xf58
   12098:	movt	r2, #2
   1209c:	cmp	r4, r5
   120a0:	movw	r3, #10188	; 0x27cc
   120a4:	movt	r3, #2
   120a8:	mov	r1, r0
   120ac:	moveq	r3, r2
   120b0:	mov	r2, r4
   120b4:	mov	r0, #1
   120b8:	bl	112d4 <__printf_chk@plt>
   120bc:	b	11e64 <__assert_fail@plt+0xa94>
   120c0:	ldr	r1, [r4, #8]!
   120c4:	cmp	r1, #0
   120c8:	beq	11fd8 <__assert_fail@plt+0xc08>
   120cc:	mov	r0, r5
   120d0:	bl	110a0 <strcmp@plt>
   120d4:	cmp	r0, #0
   120d8:	bne	120c0 <__assert_fail@plt+0xcf0>
   120dc:	b	11fd8 <__assert_fail@plt+0xc08>
   120e0:	mov	r0, r4
   120e4:	bl	11130 <dcgettext@plt>
   120e8:	mov	r1, r0
   120ec:	movw	r3, #3300	; 0xce4
   120f0:	movt	r3, #2
   120f4:	movw	r2, #3340	; 0xd0c
   120f8:	movt	r2, #2
   120fc:	mov	r0, #1
   12100:	bl	112d4 <__printf_chk@plt>
   12104:	mov	r1, r4
   12108:	mov	r0, #5
   1210c:	bl	1131c <setlocale@plt>
   12110:	cmp	r0, #0
   12114:	beq	12130 <__assert_fail@plt+0xd60>
   12118:	movw	r1, #3356	; 0xd1c
   1211c:	movt	r1, #2
   12120:	mov	r2, #3
   12124:	bl	11394 <strncmp@plt>
   12128:	cmp	r0, #0
   1212c:	bne	1218c <__assert_fail@plt+0xdbc>
   12130:	mov	r2, #5
   12134:	movw	r1, #3432	; 0xd68
   12138:	movt	r1, #2
   1213c:	mov	r0, #0
   12140:	bl	11130 <dcgettext@plt>
   12144:	mov	r1, r0
   12148:	movw	r3, #1832	; 0x728
   1214c:	movt	r3, #2
   12150:	movw	r2, #3300	; 0xce4
   12154:	movt	r2, #2
   12158:	mov	r0, #1
   1215c:	bl	112d4 <__printf_chk@plt>
   12160:	movw	r1, #3460	; 0xd84
   12164:	movt	r1, #2
   12168:	mov	r2, #5
   1216c:	mov	r0, #0
   12170:	bl	11130 <dcgettext@plt>
   12174:	movw	r4, #1832	; 0x728
   12178:	movt	r4, #2
   1217c:	movw	r3, #3928	; 0xf58
   12180:	movt	r3, #2
   12184:	mov	r1, r0
   12188:	b	120b0 <__assert_fail@plt+0xce0>
   1218c:	movw	r5, #1832	; 0x728
   12190:	movt	r5, #2
   12194:	mov	r4, r5
   12198:	mov	r2, #5
   1219c:	movw	r1, #3360	; 0xd20
   121a0:	movt	r1, #2
   121a4:	mov	r0, #0
   121a8:	bl	11130 <dcgettext@plt>
   121ac:	ldr	r1, [r7]
   121b0:	bl	11070 <fputs_unlocked@plt>
   121b4:	b	12050 <__assert_fail@plt+0xc80>
   121b8:	mov	r0, #1
   121bc:	b	11e14 <__assert_fail@plt+0xa44>
   121c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   121c4:	mov	r4, r1
   121c8:	strd	r6, [sp, #8]
   121cc:	mov	r6, r2
   121d0:	strd	r8, [sp, #16]
   121d4:	mov	r8, r3
   121d8:	strd	sl, [sp, #24]
   121dc:	mov	sl, r0
   121e0:	str	lr, [sp, #32]
   121e4:	sub	sp, sp, #12
   121e8:	str	r2, [sp]
   121ec:	bl	11274 <strlen@plt>
   121f0:	ldr	fp, [r4]
   121f4:	cmp	fp, #0
   121f8:	beq	12308 <__assert_fail@plt+0xf38>
   121fc:	cmp	r6, #0
   12200:	mov	r7, r0
   12204:	beq	122b4 <__assert_fail@plt+0xee4>
   12208:	mov	r5, #0
   1220c:	mvn	r9, #0
   12210:	str	r5, [sp, #4]
   12214:	mov	r2, r7
   12218:	mov	r1, sl
   1221c:	mov	r0, fp
   12220:	bl	11394 <strncmp@plt>
   12224:	cmp	r0, #0
   12228:	mov	r0, fp
   1222c:	bne	1226c <__assert_fail@plt+0xe9c>
   12230:	bl	11274 <strlen@plt>
   12234:	ldr	r3, [sp]
   12238:	cmp	r0, r7
   1223c:	mov	r2, r8
   12240:	mov	r1, r6
   12244:	mla	r0, r8, r9, r3
   12248:	beq	122ac <__assert_fail@plt+0xedc>
   1224c:	cmn	r9, #1
   12250:	moveq	r9, r5
   12254:	beq	1226c <__assert_fail@plt+0xe9c>
   12258:	bl	11118 <memcmp@plt>
   1225c:	ldr	r3, [sp, #4]
   12260:	cmp	r0, #0
   12264:	movne	r3, #1
   12268:	str	r3, [sp, #4]
   1226c:	ldr	fp, [r4, #4]!
   12270:	add	r5, r5, #1
   12274:	add	r6, r6, r8
   12278:	cmp	fp, #0
   1227c:	bne	12214 <__assert_fail@plt+0xe44>
   12280:	ldr	r3, [sp, #4]
   12284:	cmp	r3, #0
   12288:	mvnne	r9, #1
   1228c:	mov	r0, r9
   12290:	add	sp, sp, #12
   12294:	ldrd	r4, [sp]
   12298:	ldrd	r6, [sp, #8]
   1229c:	ldrd	r8, [sp, #16]
   122a0:	ldrd	sl, [sp, #24]
   122a4:	add	sp, sp, #32
   122a8:	pop	{pc}		; (ldr pc, [sp], #4)
   122ac:	mov	r9, r5
   122b0:	b	1228c <__assert_fail@plt+0xebc>
   122b4:	mov	r5, r6
   122b8:	mvn	r9, #0
   122bc:	mov	r2, r7
   122c0:	mov	r1, sl
   122c4:	mov	r0, fp
   122c8:	bl	11394 <strncmp@plt>
   122cc:	cmp	r0, #0
   122d0:	mov	r0, fp
   122d4:	bne	122f0 <__assert_fail@plt+0xf20>
   122d8:	bl	11274 <strlen@plt>
   122dc:	cmp	r0, r7
   122e0:	beq	122ac <__assert_fail@plt+0xedc>
   122e4:	cmn	r9, #1
   122e8:	moveq	r9, r5
   122ec:	movne	r6, #1
   122f0:	ldr	fp, [r4, #4]!
   122f4:	add	r5, r5, #1
   122f8:	cmp	fp, #0
   122fc:	bne	122bc <__assert_fail@plt+0xeec>
   12300:	str	r6, [sp, #4]
   12304:	b	12280 <__assert_fail@plt+0xeb0>
   12308:	mvn	r9, #0
   1230c:	b	1228c <__assert_fail@plt+0xebc>
   12310:	strd	r4, [sp, #-16]!
   12314:	str	r6, [sp, #8]
   12318:	mov	r6, r0
   1231c:	ldr	r0, [r1]
   12320:	str	lr, [sp, #12]
   12324:	cmp	r0, #0
   12328:	beq	1236c <__assert_fail@plt+0xf9c>
   1232c:	mov	r4, r1
   12330:	mov	r5, #0
   12334:	b	12348 <__assert_fail@plt+0xf78>
   12338:	ldr	r0, [r4, #4]!
   1233c:	add	r5, r5, #1
   12340:	cmp	r0, #0
   12344:	beq	1236c <__assert_fail@plt+0xf9c>
   12348:	mov	r1, r6
   1234c:	bl	110a0 <strcmp@plt>
   12350:	cmp	r0, #0
   12354:	bne	12338 <__assert_fail@plt+0xf68>
   12358:	mov	r0, r5
   1235c:	ldrd	r4, [sp]
   12360:	ldr	r6, [sp, #8]
   12364:	add	sp, sp, #12
   12368:	pop	{pc}		; (ldr pc, [sp], #4)
   1236c:	ldrd	r4, [sp]
   12370:	mvn	r0, #0
   12374:	ldr	r6, [sp, #8]
   12378:	add	sp, sp, #12
   1237c:	pop	{pc}		; (ldr pc, [sp], #4)
   12380:	cmn	r2, #1
   12384:	strd	r4, [sp, #-16]!
   12388:	mov	r5, r1
   1238c:	movweq	r1, #4144	; 0x1030
   12390:	movwne	r1, #4172	; 0x104c
   12394:	str	r6, [sp, #8]
   12398:	movteq	r1, #2
   1239c:	movtne	r1, #2
   123a0:	str	lr, [sp, #12]
   123a4:	mov	r6, r0
   123a8:	sub	sp, sp, #8
   123ac:	mov	r2, #5
   123b0:	mov	r0, #0
   123b4:	bl	11130 <dcgettext@plt>
   123b8:	mov	r4, r0
   123bc:	mov	r2, r5
   123c0:	mov	r1, #8
   123c4:	mov	r0, #0
   123c8:	bl	1b3b4 <__assert_fail@plt+0x9fe4>
   123cc:	mov	r5, r0
   123d0:	mov	r1, r6
   123d4:	mov	r0, #1
   123d8:	bl	1c7ac <__assert_fail@plt+0xb3dc>
   123dc:	mov	r1, #0
   123e0:	mov	r3, r5
   123e4:	str	r0, [sp]
   123e8:	mov	r2, r4
   123ec:	mov	r0, r1
   123f0:	bl	111c0 <error@plt>
   123f4:	add	sp, sp, #8
   123f8:	ldrd	r4, [sp]
   123fc:	ldr	r6, [sp, #8]
   12400:	add	sp, sp, #12
   12404:	pop	{pc}		; (ldr pc, [sp], #4)
   12408:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1240c:	mov	r4, r1
   12410:	movw	r1, #4204	; 0x106c
   12414:	movt	r1, #2
   12418:	strd	r6, [sp, #8]
   1241c:	mov	r6, r0
   12420:	mov	r7, r2
   12424:	mov	r0, #0
   12428:	strd	r8, [sp, #16]
   1242c:	mov	r2, #5
   12430:	strd	sl, [sp, #24]
   12434:	movw	sl, #16800	; 0x41a0
   12438:	movt	sl, #3
   1243c:	str	lr, [sp, #32]
   12440:	sub	sp, sp, #12
   12444:	bl	11130 <dcgettext@plt>
   12448:	ldr	r1, [sl]
   1244c:	bl	11070 <fputs_unlocked@plt>
   12450:	ldr	fp, [r6]
   12454:	cmp	fp, #0
   12458:	beq	124f8 <__assert_fail@plt+0x1128>
   1245c:	movw	r3, #4228	; 0x1084
   12460:	movt	r3, #2
   12464:	mov	r9, #0
   12468:	str	r3, [sp]
   1246c:	movw	r3, #4236	; 0x108c
   12470:	movt	r3, #2
   12474:	mov	r5, r9
   12478:	str	r3, [sp, #4]
   1247c:	b	124b4 <__assert_fail@plt+0x10e4>
   12480:	mov	r0, fp
   12484:	mov	r9, r4
   12488:	bl	1c7bc <__assert_fail@plt+0xb3ec>
   1248c:	mov	r3, r0
   12490:	mov	r1, #1
   12494:	ldr	r2, [sp]
   12498:	mov	r0, r8
   1249c:	bl	112ec <__fprintf_chk@plt>
   124a0:	ldr	fp, [r6, #4]!
   124a4:	add	r5, r5, #1
   124a8:	add	r4, r4, r7
   124ac:	cmp	fp, #0
   124b0:	beq	124f8 <__assert_fail@plt+0x1128>
   124b4:	cmp	r5, #0
   124b8:	mov	r1, r4
   124bc:	ldr	r8, [sl]
   124c0:	mov	r2, r7
   124c4:	mov	r0, r9
   124c8:	beq	12480 <__assert_fail@plt+0x10b0>
   124cc:	bl	11118 <memcmp@plt>
   124d0:	cmp	r0, #0
   124d4:	bne	12480 <__assert_fail@plt+0x10b0>
   124d8:	mov	r0, fp
   124dc:	bl	1c7bc <__assert_fail@plt+0xb3ec>
   124e0:	mov	r3, r0
   124e4:	mov	r1, #1
   124e8:	ldr	r2, [sp, #4]
   124ec:	mov	r0, r8
   124f0:	bl	112ec <__fprintf_chk@plt>
   124f4:	b	124a0 <__assert_fail@plt+0x10d0>
   124f8:	ldr	r0, [sl]
   124fc:	ldr	r3, [r0, #20]
   12500:	ldr	r2, [r0, #24]
   12504:	cmp	r3, r2
   12508:	bcs	12538 <__assert_fail@plt+0x1168>
   1250c:	add	r1, r3, #1
   12510:	mov	r2, #10
   12514:	str	r1, [r0, #20]
   12518:	strb	r2, [r3]
   1251c:	add	sp, sp, #12
   12520:	ldrd	r4, [sp]
   12524:	ldrd	r6, [sp, #8]
   12528:	ldrd	r8, [sp, #16]
   1252c:	ldrd	sl, [sp, #24]
   12530:	add	sp, sp, #32
   12534:	pop	{pc}		; (ldr pc, [sp], #4)
   12538:	mov	r1, #10
   1253c:	add	sp, sp, #12
   12540:	ldrd	r4, [sp]
   12544:	ldrd	r6, [sp, #8]
   12548:	ldrd	r8, [sp, #16]
   1254c:	ldrd	sl, [sp, #24]
   12550:	ldr	lr, [sp, #32]
   12554:	add	sp, sp, #36	; 0x24
   12558:	b	11310 <__overflow@plt>
   1255c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   12560:	mov	r5, r1
   12564:	strd	r6, [sp, #8]
   12568:	mov	r6, r2
   1256c:	mov	r7, r3
   12570:	strd	r8, [sp, #16]
   12574:	mov	r8, r0
   12578:	str	lr, [sp, #24]
   1257c:	sub	sp, sp, #12
   12580:	ldrb	r4, [sp, #48]	; 0x30
   12584:	cmp	r4, #0
   12588:	bne	12634 <__assert_fail@plt+0x1264>
   1258c:	ldr	r0, [r2]
   12590:	cmp	r0, #0
   12594:	movne	r9, r2
   12598:	bne	1261c <__assert_fail@plt+0x124c>
   1259c:	movw	r1, #4144	; 0x1030
   125a0:	movt	r1, #2
   125a4:	mov	r2, #5
   125a8:	mov	r0, #0
   125ac:	bl	11130 <dcgettext@plt>
   125b0:	mov	r9, r0
   125b4:	mov	r2, r5
   125b8:	mov	r1, #8
   125bc:	mov	r0, #0
   125c0:	bl	1b3b4 <__assert_fail@plt+0x9fe4>
   125c4:	mov	r4, r0
   125c8:	mov	r1, r8
   125cc:	mov	r0, #1
   125d0:	bl	1c7ac <__assert_fail@plt+0xb3dc>
   125d4:	mov	r1, #0
   125d8:	mov	r3, r4
   125dc:	str	r0, [sp]
   125e0:	mov	r2, r9
   125e4:	mov	r0, r1
   125e8:	bl	111c0 <error@plt>
   125ec:	mov	r0, r6
   125f0:	mov	r1, r7
   125f4:	ldr	r2, [sp, #40]	; 0x28
   125f8:	bl	12408 <__assert_fail@plt+0x1038>
   125fc:	ldr	r3, [sp, #44]	; 0x2c
   12600:	blx	r3
   12604:	mvn	r0, #0
   12608:	b	12650 <__assert_fail@plt+0x1280>
   1260c:	ldr	r0, [r9, #4]!
   12610:	add	r4, r4, #1
   12614:	cmp	r0, #0
   12618:	beq	1259c <__assert_fail@plt+0x11cc>
   1261c:	mov	r1, r5
   12620:	bl	110a0 <strcmp@plt>
   12624:	cmp	r0, #0
   12628:	bne	1260c <__assert_fail@plt+0x123c>
   1262c:	mov	r0, r4
   12630:	b	12650 <__assert_fail@plt+0x1280>
   12634:	mov	r2, r3
   12638:	mov	r1, r6
   1263c:	ldr	r3, [sp, #40]	; 0x28
   12640:	mov	r0, r5
   12644:	bl	121c0 <__assert_fail@plt+0xdf0>
   12648:	cmp	r0, #0
   1264c:	blt	12668 <__assert_fail@plt+0x1298>
   12650:	add	sp, sp, #12
   12654:	ldrd	r4, [sp]
   12658:	ldrd	r6, [sp, #8]
   1265c:	ldrd	r8, [sp, #16]
   12660:	add	sp, sp, #24
   12664:	pop	{pc}		; (ldr pc, [sp], #4)
   12668:	cmn	r0, #1
   1266c:	beq	1259c <__assert_fail@plt+0x11cc>
   12670:	movw	r1, #4172	; 0x104c
   12674:	movt	r1, #2
   12678:	mov	r2, #5
   1267c:	mov	r0, #0
   12680:	bl	11130 <dcgettext@plt>
   12684:	mov	r9, r0
   12688:	b	125b4 <__assert_fail@plt+0x11e4>
   1268c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12690:	strd	r6, [sp, #8]
   12694:	ldr	r7, [r1]
   12698:	str	r8, [sp, #16]
   1269c:	str	lr, [sp, #20]
   126a0:	cmp	r7, #0
   126a4:	beq	126e4 <__assert_fail@plt+0x1314>
   126a8:	mov	r6, r3
   126ac:	mov	r8, r0
   126b0:	mov	r4, r2
   126b4:	mov	r5, r1
   126b8:	b	126c8 <__assert_fail@plt+0x12f8>
   126bc:	ldr	r7, [r5, #4]!
   126c0:	cmp	r7, #0
   126c4:	beq	126e4 <__assert_fail@plt+0x1314>
   126c8:	mov	r1, r4
   126cc:	mov	r2, r6
   126d0:	mov	r0, r8
   126d4:	add	r4, r4, r6
   126d8:	bl	11118 <memcmp@plt>
   126dc:	cmp	r0, #0
   126e0:	bne	126bc <__assert_fail@plt+0x12ec>
   126e4:	mov	r0, r7
   126e8:	ldrd	r4, [sp]
   126ec:	ldrd	r6, [sp, #8]
   126f0:	ldr	r8, [sp, #16]
   126f4:	add	sp, sp, #20
   126f8:	pop	{pc}		; (ldr pc, [sp], #4)
   126fc:	movw	r3, #16848	; 0x41d0
   12700:	movt	r3, #3
   12704:	str	r0, [r3]
   12708:	bx	lr
   1270c:	movw	r3, #16848	; 0x41d0
   12710:	movt	r3, #3
   12714:	strb	r0, [r3, #4]
   12718:	bx	lr
   1271c:	movw	r3, #16804	; 0x41a4
   12720:	movt	r3, #3
   12724:	strd	r4, [sp, #-16]!
   12728:	ldr	r0, [r3]
   1272c:	str	r6, [sp, #8]
   12730:	str	lr, [sp, #12]
   12734:	sub	sp, sp, #8
   12738:	bl	1ddc4 <__assert_fail@plt+0xc9f4>
   1273c:	cmp	r0, #0
   12740:	beq	1276c <__assert_fail@plt+0x139c>
   12744:	movw	r4, #16848	; 0x41d0
   12748:	movt	r4, #3
   1274c:	ldrb	r6, [r4, #4]
   12750:	bl	11298 <__errno_location@plt>
   12754:	mov	r5, r0
   12758:	cmp	r6, #0
   1275c:	beq	12798 <__assert_fail@plt+0x13c8>
   12760:	ldr	r3, [r0]
   12764:	cmp	r3, #32
   12768:	bne	12798 <__assert_fail@plt+0x13c8>
   1276c:	movw	r3, #16800	; 0x41a0
   12770:	movt	r3, #3
   12774:	ldr	r0, [r3]
   12778:	bl	1ddc4 <__assert_fail@plt+0xc9f4>
   1277c:	cmp	r0, #0
   12780:	bne	127e0 <__assert_fail@plt+0x1410>
   12784:	add	sp, sp, #8
   12788:	ldrd	r4, [sp]
   1278c:	ldr	r6, [sp, #8]
   12790:	add	sp, sp, #12
   12794:	pop	{pc}		; (ldr pc, [sp], #4)
   12798:	movw	r1, #4244	; 0x1094
   1279c:	movt	r1, #2
   127a0:	mov	r2, #5
   127a4:	mov	r0, #0
   127a8:	bl	11130 <dcgettext@plt>
   127ac:	mov	r6, r0
   127b0:	ldr	r0, [r4]
   127b4:	cmp	r0, #0
   127b8:	beq	127f0 <__assert_fail@plt+0x1420>
   127bc:	ldr	r4, [r5]
   127c0:	bl	1bc40 <__assert_fail@plt+0xa870>
   127c4:	mov	r3, r0
   127c8:	movw	r2, #4256	; 0x10a0
   127cc:	movt	r2, #2
   127d0:	mov	r0, #0
   127d4:	str	r6, [sp]
   127d8:	mov	r1, r4
   127dc:	bl	111c0 <error@plt>
   127e0:	movw	r3, #16712	; 0x4148
   127e4:	movt	r3, #3
   127e8:	ldr	r0, [r3]
   127ec:	bl	110e8 <_exit@plt>
   127f0:	mov	r3, r6
   127f4:	movw	r2, #4260	; 0x10a4
   127f8:	movt	r2, #2
   127fc:	ldr	r1, [r5]
   12800:	bl	111c0 <error@plt>
   12804:	b	127e0 <__assert_fail@plt+0x1410>
   12808:	mov	ip, r1
   1280c:	mov	r1, r2
   12810:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12814:	mov	r2, r3
   12818:	mov	r5, r0
   1281c:	strd	r6, [sp, #8]
   12820:	mov	r0, ip
   12824:	str	r8, [sp, #16]
   12828:	str	lr, [sp, #20]
   1282c:	bl	111cc <open64@plt>
   12830:	sub	r3, r5, r0
   12834:	mov	r4, r0
   12838:	clz	r3, r3
   1283c:	lsr	r3, r3, #5
   12840:	orrs	r3, r3, r0, lsr #31
   12844:	beq	12860 <__assert_fail@plt+0x1490>
   12848:	mov	r0, r4
   1284c:	ldrd	r4, [sp]
   12850:	ldrd	r6, [sp, #8]
   12854:	ldr	r8, [sp, #16]
   12858:	add	sp, sp, #20
   1285c:	pop	{pc}		; (ldr pc, [sp], #4)
   12860:	mov	r1, r5
   12864:	bl	1113c <dup2@plt>
   12868:	mov	r7, r0
   1286c:	bl	11298 <__errno_location@plt>
   12870:	mov	r5, r0
   12874:	mov	r0, r4
   12878:	ldr	r6, [r5]
   1287c:	mov	r4, r7
   12880:	bl	113ac <close@plt>
   12884:	str	r6, [r5]
   12888:	b	12848 <__assert_fail@plt+0x1478>
   1288c:	cmp	r0, #0
   12890:	strd	r4, [sp, #-16]!
   12894:	mov	r4, r2
   12898:	mov	r5, r3
   1289c:	str	r6, [sp, #8]
   128a0:	mov	r6, r1
   128a4:	str	lr, [sp, #12]
   128a8:	bge	128e8 <__assert_fail@plt+0x1518>
   128ac:	cmp	r2, #0
   128b0:	beq	12928 <__assert_fail@plt+0x1558>
   128b4:	mov	r1, r4
   128b8:	mov	r2, r5
   128bc:	ldr	r3, [sp, #16]
   128c0:	mov	r0, r6
   128c4:	bl	11094 <utimensat@plt>
   128c8:	mov	r1, r0
   128cc:	cmp	r1, #1
   128d0:	beq	12928 <__assert_fail@plt+0x1558>
   128d4:	ldrd	r4, [sp]
   128d8:	mov	r0, r1
   128dc:	ldr	r6, [sp, #8]
   128e0:	add	sp, sp, #12
   128e4:	pop	{pc}		; (ldr pc, [sp], #4)
   128e8:	mov	r1, r3
   128ec:	bl	11358 <futimens@plt>
   128f0:	cmn	r0, #1
   128f4:	mov	r1, r0
   128f8:	moveq	r3, #1
   128fc:	movne	r3, #0
   12900:	cmp	r4, #0
   12904:	moveq	r3, #0
   12908:	cmp	r3, #0
   1290c:	beq	128cc <__assert_fail@plt+0x14fc>
   12910:	bl	11298 <__errno_location@plt>
   12914:	ldr	r3, [r0]
   12918:	cmp	r3, #38	; 0x26
   1291c:	mvnne	r1, #0
   12920:	bne	128d4 <__assert_fail@plt+0x1504>
   12924:	b	128b4 <__assert_fail@plt+0x14e4>
   12928:	bl	11298 <__errno_location@plt>
   1292c:	mov	r3, #9
   12930:	mvn	r1, #0
   12934:	str	r3, [r0]
   12938:	b	128d4 <__assert_fail@plt+0x1504>
   1293c:	mov	r1, r0
   12940:	mov	r0, #0
   12944:	b	110dc <clock_gettime@plt>
   12948:	str	r4, [sp, #-8]!
   1294c:	mov	r4, r0
   12950:	mov	r0, #0
   12954:	str	lr, [sp, #4]
   12958:	sub	sp, sp, #8
   1295c:	mov	r1, sp
   12960:	bl	110dc <clock_gettime@plt>
   12964:	ldrd	r2, [sp]
   12968:	mov	r0, r4
   1296c:	strd	r2, [r4]
   12970:	add	sp, sp, #8
   12974:	ldr	r4, [sp]
   12978:	add	sp, sp, #4
   1297c:	pop	{pc}		; (ldr pc, [sp], #4)
   12980:	sub	sp, sp, #8
   12984:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12988:	mov	r4, r0
   1298c:	add	r0, sp, #32
   12990:	ldr	r1, [r4, #156]	; 0x9c
   12994:	strd	r6, [sp, #8]
   12998:	strd	r8, [sp, #16]
   1299c:	str	sl, [sp, #24]
   129a0:	str	lr, [sp, #28]
   129a4:	cmp	r1, #0
   129a8:	ldr	r6, [sp, #40]	; 0x28
   129ac:	stm	r0, {r2, r3}
   129b0:	ldr	r7, [sp, #44]	; 0x2c
   129b4:	ldr	r5, [sp, #48]	; 0x30
   129b8:	beq	12a08 <__assert_fail@plt+0x1638>
   129bc:	ldr	r3, [r4, #48]	; 0x30
   129c0:	cmp	r3, #0
   129c4:	bne	12a08 <__assert_fail@plt+0x1638>
   129c8:	ldrb	r3, [r4, #153]	; 0x99
   129cc:	cmp	r3, #0
   129d0:	bne	12a08 <__assert_fail@plt+0x1638>
   129d4:	ldr	r3, [r4, #172]	; 0xac
   129d8:	cmp	r5, #2
   129dc:	cmple	r3, #0
   129e0:	beq	12b10 <__assert_fail@plt+0x1740>
   129e4:	ldrd	r2, [r0]
   129e8:	mov	ip, #1
   129ec:	ldrd	r6, [r0, #8]
   129f0:	ldrd	r8, [r0, #16]
   129f4:	strd	r2, [r4, #32]
   129f8:	strd	r6, [r4, #40]	; 0x28
   129fc:	strb	ip, [r4, #180]	; 0xb4
   12a00:	strd	r8, [r4, #48]	; 0x30
   12a04:	b	12a74 <__assert_fail@plt+0x16a4>
   12a08:	cmp	r5, #4
   12a0c:	ble	12a94 <__assert_fail@plt+0x16c4>
   12a10:	add	ip, r1, #1
   12a14:	mov	r2, #100	; 0x64
   12a18:	mov	r3, #0
   12a1c:	mov	r0, r6
   12a20:	mov	r1, r7
   12a24:	str	ip, [r4, #156]	; 0x9c
   12a28:	sub	r5, r5, #4
   12a2c:	bl	20354 <__assert_fail@plt+0xef84>
   12a30:	mov	r0, r6
   12a34:	mov	r1, r7
   12a38:	strd	r2, [r4, #64]	; 0x40
   12a3c:	mov	r2, #100	; 0x64
   12a40:	mov	r3, #0
   12a44:	bl	20354 <__assert_fail@plt+0xef84>
   12a48:	mov	r2, #100	; 0x64
   12a4c:	mov	r3, #0
   12a50:	bl	20354 <__assert_fail@plt+0xef84>
   12a54:	mov	r0, r6
   12a58:	mov	r1, r7
   12a5c:	strd	r2, [r4, #56]	; 0x38
   12a60:	movw	r2, #10000	; 0x2710
   12a64:	mov	r3, #0
   12a68:	bl	20354 <__assert_fail@plt+0xef84>
   12a6c:	strd	r0, [r4, #40]	; 0x28
   12a70:	str	r5, [r4, #48]	; 0x30
   12a74:	ldrd	r4, [sp]
   12a78:	ldrd	r6, [sp, #8]
   12a7c:	ldrd	r8, [sp, #16]
   12a80:	ldr	sl, [sp, #24]
   12a84:	ldr	lr, [sp, #28]
   12a88:	add	sp, sp, #32
   12a8c:	add	sp, sp, #8
   12a90:	bx	lr
   12a94:	ldr	r3, [r4, #172]	; 0xac
   12a98:	cmp	r5, #2
   12a9c:	movle	r8, #0
   12aa0:	movle	r9, #0
   12aa4:	add	r3, r3, #1
   12aa8:	str	r3, [r4, #172]	; 0xac
   12aac:	ble	12af0 <__assert_fail@plt+0x1720>
   12ab0:	mov	r2, #100	; 0x64
   12ab4:	mov	r3, #0
   12ab8:	mov	r0, r6
   12abc:	mov	r1, r7
   12ac0:	bl	20354 <__assert_fail@plt+0xef84>
   12ac4:	mov	lr, r0
   12ac8:	mov	ip, r1
   12acc:	mov	r0, r6
   12ad0:	mov	r1, r7
   12ad4:	mov	r2, #100	; 0x64
   12ad8:	mov	r3, #0
   12adc:	mov	r6, lr
   12ae0:	mov	r7, ip
   12ae4:	bl	20354 <__assert_fail@plt+0xef84>
   12ae8:	mov	r8, r2
   12aec:	mov	r9, r3
   12af0:	mov	r3, #0
   12af4:	mov	r1, #2
   12af8:	str	r1, [r4, #28]
   12afc:	strd	r6, [r4, #72]	; 0x48
   12b00:	strd	r8, [r4, #80]	; 0x50
   12b04:	str	r3, [r4, #88]	; 0x58
   12b08:	str	r3, [r4, #92]	; 0x5c
   12b0c:	b	12a74 <__assert_fail@plt+0x16a4>
   12b10:	mov	r3, #1
   12b14:	mov	r8, #0
   12b18:	mov	r9, #0
   12b1c:	str	r3, [r4, #172]	; 0xac
   12b20:	b	12af0 <__assert_fail@plt+0x1720>
   12b24:	movw	r2, #46021	; 0xb3c5
   12b28:	movt	r2, #37282	; 0x91a2
   12b2c:	strd	r4, [sp, #-20]!	; 0xffffffec
   12b30:	strd	r6, [sp, #8]
   12b34:	subs	r6, r0, #0
   12b38:	mov	r5, r1
   12b3c:	asr	ip, r6, #31
   12b40:	str	lr, [sp, #16]
   12b44:	sub	sp, sp, #12
   12b48:	smull	r2, r4, r2, r6
   12b4c:	movlt	lr, #45	; 0x2d
   12b50:	movge	lr, #43	; 0x2b
   12b54:	mov	r0, r1
   12b58:	movw	r3, #7112	; 0x1bc8
   12b5c:	movt	r3, #2
   12b60:	mvn	r2, #0
   12b64:	str	lr, [sp]
   12b68:	add	r4, r4, r6
   12b6c:	mov	r1, #1
   12b70:	rsb	r4, ip, r4, asr #11
   12b74:	eor	ip, r4, r4, asr #31
   12b78:	sub	ip, ip, r4, asr #31
   12b7c:	str	ip, [sp, #4]
   12b80:	bl	112a4 <__sprintf_chk@plt>
   12b84:	mov	r3, #3600	; 0xe10
   12b88:	mls	r4, r3, r4, r6
   12b8c:	cmp	r4, #0
   12b90:	beq	12c08 <__assert_fail@plt+0x1838>
   12b94:	cmp	r4, #0
   12b98:	movw	r3, #34953	; 0x8889
   12b9c:	movt	r3, #34952	; 0x8888
   12ba0:	rsblt	r4, r4, #0
   12ba4:	movw	r2, #33205	; 0x81b5
   12ba8:	movt	r2, #6990	; 0x1b4e
   12bac:	umull	ip, r3, r3, r4
   12bb0:	movw	r1, #52429	; 0xcccd
   12bb4:	movt	r1, #52428	; 0xcccc
   12bb8:	umull	ip, r2, r2, r4
   12bbc:	mov	lr, #58	; 0x3a
   12bc0:	lsr	ip, r3, #5
   12bc4:	strb	lr, [r5, r0]
   12bc8:	add	r0, r5, r0
   12bcc:	lsr	r2, r2, #6
   12bd0:	rsb	r3, ip, ip, lsl #4
   12bd4:	umull	r7, r6, r1, ip
   12bd8:	add	r2, r2, #48	; 0x30
   12bdc:	subs	r3, r4, r3, lsl #2
   12be0:	strb	r2, [r0, #1]
   12be4:	lsr	r6, r6, #3
   12be8:	addeq	r2, r0, #3
   12bec:	add	r6, r6, r6, lsl #2
   12bf0:	sub	ip, ip, r6, lsl #1
   12bf4:	add	ip, ip, #48	; 0x30
   12bf8:	strb	ip, [r0, #2]
   12bfc:	bne	12c20 <__assert_fail@plt+0x1850>
   12c00:	mov	r3, #0
   12c04:	strb	r3, [r2]
   12c08:	mov	r0, r5
   12c0c:	add	sp, sp, #12
   12c10:	ldrd	r4, [sp]
   12c14:	ldrd	r6, [sp, #8]
   12c18:	add	sp, sp, #16
   12c1c:	pop	{pc}		; (ldr pc, [sp], #4)
   12c20:	umull	r2, r1, r1, r3
   12c24:	add	r2, r0, #6
   12c28:	strb	lr, [r0, #3]
   12c2c:	lsr	r1, r1, #3
   12c30:	add	ip, r1, r1, lsl #2
   12c34:	add	r1, r1, #48	; 0x30
   12c38:	sub	r3, r3, ip, lsl #1
   12c3c:	strb	r1, [r0, #4]
   12c40:	add	r3, r3, #48	; 0x30
   12c44:	strb	r3, [r0, #5]
   12c48:	mov	r3, #0
   12c4c:	strb	r3, [r2]
   12c50:	b	12c08 <__assert_fail@plt+0x1838>
   12c54:	mov	ip, r0
   12c58:	movw	r0, #34079	; 0x851f
   12c5c:	movt	r0, #20971	; 0x51eb
   12c60:	strd	r4, [sp, #-12]!
   12c64:	mov	r4, r1
   12c68:	asr	r2, ip, #31
   12c6c:	str	lr, [sp, #8]
   12c70:	mov	lr, #100	; 0x64
   12c74:	smull	r3, r1, r0, ip
   12c78:	movw	r5, #63636	; 0xf894
   12c7c:	movt	r5, #65535	; 0xffff
   12c80:	movw	r3, #7120	; 0x1bd0
   12c84:	movt	r3, #2
   12c88:	cmp	ip, r5
   12c8c:	addge	r3, r3, #1
   12c90:	sub	sp, sp, #12
   12c94:	rsb	r1, r2, r1, asr #5
   12c98:	mov	r0, r4
   12c9c:	mvn	r2, #0
   12ca0:	mls	lr, lr, r1, ip
   12ca4:	add	r1, r1, #19
   12ca8:	eor	ip, r1, r1, asr #31
   12cac:	cmp	lr, #0
   12cb0:	sub	ip, ip, r1, asr #31
   12cb4:	mov	r1, #1
   12cb8:	rsblt	lr, lr, #0
   12cbc:	stm	sp, {ip, lr}
   12cc0:	bl	112a4 <__sprintf_chk@plt>
   12cc4:	mov	r0, r4
   12cc8:	add	sp, sp, #12
   12ccc:	ldrd	r4, [sp]
   12cd0:	add	sp, sp, #8
   12cd4:	pop	{pc}		; (ldr pc, [sp], #4)
   12cd8:	push	{r0, r1, r2, r3}
   12cdc:	mov	r2, #6
   12ce0:	mov	r1, #1
   12ce4:	movw	r0, #7132	; 0x1bdc
   12ce8:	movt	r0, #2
   12cec:	str	r4, [sp, #-8]!
   12cf0:	movw	r4, #16800	; 0x41a0
   12cf4:	movt	r4, #3
   12cf8:	str	lr, [sp, #4]
   12cfc:	sub	sp, sp, #8
   12d00:	ldr	r3, [r4]
   12d04:	bl	11184 <fwrite@plt>
   12d08:	ldr	r2, [sp, #16]
   12d0c:	add	ip, sp, #20
   12d10:	mov	r1, #1
   12d14:	mov	r3, ip
   12d18:	ldr	r0, [r4]
   12d1c:	str	ip, [sp, #4]
   12d20:	bl	11208 <__vfprintf_chk@plt>
   12d24:	add	sp, sp, #8
   12d28:	ldr	r4, [sp]
   12d2c:	ldr	lr, [sp, #4]
   12d30:	add	sp, sp, #8
   12d34:	add	sp, sp, #16
   12d38:	bx	lr
   12d3c:	mov	ip, #0
   12d40:	strd	r4, [sp, #-16]!
   12d44:	mov	r4, r2
   12d48:	str	r6, [sp, #8]
   12d4c:	mov	r3, r0
   12d50:	mov	r5, r1
   12d54:	str	lr, [sp, #12]
   12d58:	sub	sp, sp, #40	; 0x28
   12d5c:	movw	r2, #7140	; 0x1be4
   12d60:	movt	r2, #2
   12d64:	mov	r0, r4
   12d68:	mov	r1, #100	; 0x64
   12d6c:	str	ip, [sp]
   12d70:	str	ip, [sp, #4]
   12d74:	bl	201a8 <__assert_fail@plt+0xedd8>
   12d78:	cmp	r0, #99	; 0x63
   12d7c:	movgt	r3, #0
   12d80:	movle	r3, #1
   12d84:	cmp	r5, #0
   12d88:	moveq	r3, #0
   12d8c:	cmp	r3, #0
   12d90:	beq	12da0 <__assert_fail@plt+0x19d0>
   12d94:	ldr	r3, [r5, #176]	; 0xb0
   12d98:	cmp	r3, #0
   12d9c:	bne	12db8 <__assert_fail@plt+0x19e8>
   12da0:	mov	r0, r4
   12da4:	add	sp, sp, #40	; 0x28
   12da8:	ldrd	r4, [sp]
   12dac:	ldr	r6, [sp, #8]
   12db0:	add	sp, sp, #12
   12db4:	pop	{pc}		; (ldr pc, [sp], #4)
   12db8:	mov	r6, r0
   12dbc:	add	r1, sp, #12
   12dc0:	ldr	r0, [r5, #24]
   12dc4:	bl	12b24 <__assert_fail@plt+0x1754>
   12dc8:	movw	r2, #7168	; 0x1c00
   12dcc:	movt	r2, #2
   12dd0:	add	r5, r4, r6
   12dd4:	rsb	r1, r6, #100	; 0x64
   12dd8:	mvn	r3, #0
   12ddc:	str	r2, [sp]
   12de0:	mov	r2, #1
   12de4:	str	r0, [sp, #4]
   12de8:	mov	r0, r5
   12dec:	bl	113c4 <__snprintf_chk@plt>
   12df0:	b	12da0 <__assert_fail@plt+0x19d0>
   12df4:	ldrb	r2, [r0, #188]	; 0xbc
   12df8:	strd	r4, [sp, #-20]!	; 0xffffffec
   12dfc:	mov	r4, r0
   12e00:	mov	r5, r1
   12e04:	strd	r6, [sp, #8]
   12e08:	str	lr, [sp, #16]
   12e0c:	sub	sp, sp, #20
   12e10:	cmp	r2, #0
   12e14:	beq	12ecc <__assert_fail@plt+0x1afc>
   12e18:	ldr	r2, [r0, #8]
   12e1c:	ldr	r1, [r0, #12]
   12e20:	adds	r6, r2, #1
   12e24:	adc	r7, r1, #0
   12e28:	cmp	r7, #0
   12e2c:	cmpeq	r6, #13
   12e30:	bhi	12e80 <__assert_fail@plt+0x1ab0>
   12e34:	mov	r1, #11
   12e38:	movw	r3, #4264	; 0x10a8
   12e3c:	movt	r3, #2
   12e40:	movw	r2, #4260	; 0x10a4
   12e44:	movt	r2, #2
   12e48:	mov	r0, r5
   12e4c:	mla	r3, r1, r6, r3
   12e50:	mov	r1, #100	; 0x64
   12e54:	bl	112b0 <snprintf@plt>
   12e58:	ldr	ip, [r4, #16]
   12e5c:	cmp	ip, #6
   12e60:	bhi	12eb4 <__assert_fail@plt+0x1ae4>
   12e64:	cmp	r0, #99	; 0x63
   12e68:	bhi	12eb4 <__assert_fail@plt+0x1ae4>
   12e6c:	clz	r3, r0
   12e70:	add	r4, r5, r0
   12e74:	lsr	r3, r3, #5
   12e78:	rsb	r1, r0, #100	; 0x64
   12e7c:	b	12ee8 <__assert_fail@plt+0x1b18>
   12e80:	movw	r0, #7176	; 0x1c08
   12e84:	movt	r0, #2
   12e88:	mvn	r3, #0
   12e8c:	str	r0, [sp]
   12e90:	mov	r0, r5
   12e94:	str	r2, [sp, #8]
   12e98:	mov	r2, #1
   12e9c:	str	r1, [sp, #12]
   12ea0:	mov	r1, #100	; 0x64
   12ea4:	bl	113c4 <__snprintf_chk@plt>
   12ea8:	ldr	ip, [r4, #16]
   12eac:	cmp	ip, #6
   12eb0:	bls	12e6c <__assert_fail@plt+0x1a9c>
   12eb4:	mov	r0, r5
   12eb8:	add	sp, sp, #20
   12ebc:	ldrd	r4, [sp]
   12ec0:	ldrd	r6, [sp, #8]
   12ec4:	add	sp, sp, #16
   12ec8:	pop	{pc}		; (ldr pc, [sp], #4)
   12ecc:	strb	r2, [r1]
   12ed0:	ldr	ip, [r0, #16]
   12ed4:	cmp	ip, #6
   12ed8:	bhi	12eb4 <__assert_fail@plt+0x1ae4>
   12edc:	mov	r4, r1
   12ee0:	mov	r3, #1
   12ee4:	mov	r1, #100	; 0x64
   12ee8:	ldr	lr, [pc, #36]	; 12f14 <__assert_fail@plt+0x1b44>
   12eec:	movw	r2, #4232	; 0x1088
   12ef0:	movt	r2, #2
   12ef4:	add	r2, r3, r2
   12ef8:	mov	r0, r4
   12efc:	mvn	r3, #0
   12f00:	add	ip, lr, ip, lsl #2
   12f04:	stm	sp, {r2, ip}
   12f08:	mov	r2, #1
   12f0c:	bl	113c4 <__snprintf_chk@plt>
   12f10:	b	12eb4 <__assert_fail@plt+0x1ae4>
   12f14:	andeq	r1, r2, r4, asr #2
   12f18:	mov	r2, #5
   12f1c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12f20:	mov	r4, r1
   12f24:	mov	r5, r0
   12f28:	movw	r1, #7200	; 0x1c20
   12f2c:	movt	r1, #2
   12f30:	mov	r0, #0
   12f34:	strd	r6, [sp, #8]
   12f38:	strd	r8, [sp, #16]
   12f3c:	strd	sl, [sp, #24]
   12f40:	str	lr, [sp, #32]
   12f44:	sub	sp, sp, #132	; 0x84
   12f48:	bl	11130 <dcgettext@plt>
   12f4c:	mov	r1, r5
   12f50:	bl	12cd8 <__assert_fail@plt+0x1908>
   12f54:	ldr	r3, [r4, #156]	; 0x9c
   12f58:	cmp	r3, #0
   12f5c:	bne	1317c <__assert_fail@plt+0x1dac>
   12f60:	ldrb	r1, [r4, #180]	; 0xb4
   12f64:	movw	r5, #16800	; 0x41a0
   12f68:	movt	r5, #3
   12f6c:	ldrb	r2, [r4, #187]	; 0xbb
   12f70:	ldr	r8, [r5]
   12f74:	cmp	r1, r2
   12f78:	moveq	sl, #1
   12f7c:	beq	12fc0 <__assert_fail@plt+0x1bf0>
   12f80:	mov	r2, #5
   12f84:	movw	r1, #7252	; 0x1c54
   12f88:	movt	r1, #2
   12f8c:	mov	r0, #0
   12f90:	bl	11130 <dcgettext@plt>
   12f94:	ldrd	r6, [r4, #40]	; 0x28
   12f98:	mov	r2, r0
   12f9c:	mov	r1, #1
   12fa0:	mov	r0, r8
   12fa4:	mov	sl, #0
   12fa8:	strd	r6, [sp]
   12fac:	bl	112ec <__fprintf_chk@plt>
   12fb0:	ldrb	r2, [r4, #180]	; 0xb4
   12fb4:	mov	r3, #1
   12fb8:	ldr	r8, [r5]
   12fbc:	strb	r2, [r4, #187]	; 0xbb
   12fc0:	ldr	r2, [r4, #172]	; 0xac
   12fc4:	cmp	r2, #0
   12fc8:	beq	12fd8 <__assert_fail@plt+0x1c08>
   12fcc:	ldrb	r2, [r4, #185]	; 0xb9
   12fd0:	cmp	r2, #0
   12fd4:	beq	131b0 <__assert_fail@plt+0x1de0>
   12fd8:	ldr	r2, [r4, #160]	; 0xa0
   12fdc:	cmp	r2, #0
   12fe0:	beq	13054 <__assert_fail@plt+0x1c84>
   12fe4:	ldrb	r2, [r4, #183]	; 0xb7
   12fe8:	cmp	r2, #0
   12fec:	bne	13054 <__assert_fail@plt+0x1c84>
   12ff0:	cmp	r3, #0
   12ff4:	bne	13224 <__assert_fail@plt+0x1e54>
   12ff8:	mov	r2, #5
   12ffc:	movw	r1, #7304	; 0x1c88
   13000:	movt	r1, #2
   13004:	mov	r0, #0
   13008:	bl	11130 <dcgettext@plt>
   1300c:	mov	r9, r0
   13010:	add	r1, sp, #28
   13014:	mov	r0, r4
   13018:	mov	sl, #0
   1301c:	bl	12df4 <__assert_fail@plt+0x1a24>
   13020:	ldrd	r6, [r4, #8]
   13024:	mov	r3, r0
   13028:	mov	r2, r9
   1302c:	mov	r0, r8
   13030:	mov	r1, #1
   13034:	ldr	ip, [r4, #16]
   13038:	strd	r6, [sp]
   1303c:	str	ip, [sp, #8]
   13040:	bl	112ec <__fprintf_chk@plt>
   13044:	ldr	r8, [r5]
   13048:	mov	r2, #1
   1304c:	mov	r3, r2
   13050:	strb	r2, [r4, #183]	; 0xb7
   13054:	ldr	r2, [r4, #164]	; 0xa4
   13058:	cmp	r2, #0
   1305c:	beq	130e8 <__assert_fail@plt+0x1d18>
   13060:	ldrb	r2, [r4, #184]	; 0xb8
   13064:	cmp	r2, #0
   13068:	bne	130e8 <__assert_fail@plt+0x1d18>
   1306c:	movw	r1, #7184	; 0x1c10
   13070:	movt	r1, #2
   13074:	ldr	r3, [r4, #20]
   13078:	movw	ip, #10188	; 0x27cc
   1307c:	movt	ip, #2
   13080:	ldr	lr, [r4, #168]	; 0xa8
   13084:	movw	r2, #7336	; 0x1ca8
   13088:	movt	r2, #2
   1308c:	add	r2, r2, sl
   13090:	mov	r0, r8
   13094:	cmp	lr, #0
   13098:	movne	ip, r1
   1309c:	mov	r1, #1
   130a0:	str	ip, [sp]
   130a4:	bl	112ec <__fprintf_chk@plt>
   130a8:	ldr	r3, [r4, #176]	; 0xb0
   130ac:	mov	r2, #1
   130b0:	strb	r2, [r4, #184]	; 0xb8
   130b4:	cmp	r3, #0
   130b8:	bne	13238 <__assert_fail@plt+0x1e68>
   130bc:	ldrb	r3, [r4, #152]	; 0x98
   130c0:	ldr	r8, [r5]
   130c4:	cmp	r3, #0
   130c8:	beq	13154 <__assert_fail@plt+0x1d84>
   130cc:	ldr	r6, [r4, #88]	; 0x58
   130d0:	asr	r7, r6, #31
   130d4:	mov	r1, r8
   130d8:	mov	r0, #32
   130dc:	bl	11340 <fputc@plt>
   130e0:	ldr	r8, [r5]
   130e4:	b	13128 <__assert_fail@plt+0x1d58>
   130e8:	ldr	r2, [r4, #176]	; 0xb0
   130ec:	cmp	r2, #0
   130f0:	beq	1310c <__assert_fail@plt+0x1d3c>
   130f4:	ldrb	r2, [r4, #186]	; 0xba
   130f8:	cmp	r2, #0
   130fc:	movweq	r2, #7192	; 0x1c18
   13100:	movteq	r2, #2
   13104:	addeq	sl, sl, r2
   13108:	beq	13260 <__assert_fail@plt+0x1e90>
   1310c:	ldrb	r2, [r4, #152]	; 0x98
   13110:	cmp	r2, #0
   13114:	beq	13154 <__assert_fail@plt+0x1d84>
   13118:	ldr	r6, [r4, #88]	; 0x58
   1311c:	cmp	r3, #0
   13120:	asr	r7, r6, #31
   13124:	bne	130d4 <__assert_fail@plt+0x1d04>
   13128:	mov	r2, #5
   1312c:	movw	r1, #7348	; 0x1cb4
   13130:	movt	r1, #2
   13134:	mov	r0, #0
   13138:	bl	11130 <dcgettext@plt>
   1313c:	mov	r2, r0
   13140:	mov	r1, #1
   13144:	strd	r6, [sp]
   13148:	mov	r0, r8
   1314c:	bl	112ec <__fprintf_chk@plt>
   13150:	ldr	r8, [r5]
   13154:	mov	r1, r8
   13158:	mov	r0, #10
   1315c:	bl	11340 <fputc@plt>
   13160:	add	sp, sp, #132	; 0x84
   13164:	ldrd	r4, [sp]
   13168:	ldrd	r6, [sp, #8]
   1316c:	ldrd	r8, [sp, #16]
   13170:	ldrd	sl, [sp, #24]
   13174:	add	sp, sp, #32
   13178:	pop	{pc}		; (ldr pc, [sp], #4)
   1317c:	ldrb	sl, [r4, #182]	; 0xb6
   13180:	movw	r5, #16800	; 0x41a0
   13184:	movt	r5, #3
   13188:	ldr	r8, [r5]
   1318c:	cmp	sl, #0
   13190:	beq	132a4 <__assert_fail@plt+0x1ed4>
   13194:	ldrb	r3, [r4, #187]	; 0xbb
   13198:	ldrb	r2, [r4, #180]	; 0xb4
   1319c:	cmp	r2, r3
   131a0:	moveq	sl, #1
   131a4:	moveq	r3, #0
   131a8:	bne	12f80 <__assert_fail@plt+0x1bb0>
   131ac:	b	12fc0 <__assert_fail@plt+0x1bf0>
   131b0:	ldr	r6, [r4, #88]	; 0x58
   131b4:	movw	r2, #7268	; 0x1c64
   131b8:	movt	r2, #2
   131bc:	mov	r0, r8
   131c0:	add	r2, r2, sl
   131c4:	ldrd	sl, [r4, #72]	; 0x48
   131c8:	mov	r1, #1
   131cc:	ldrd	r8, [r4, #80]	; 0x50
   131d0:	asr	r7, r6, #31
   131d4:	strd	sl, [sp]
   131d8:	strd	r8, [sp, #8]
   131dc:	strd	r6, [sp, #16]
   131e0:	bl	112ec <__fprintf_chk@plt>
   131e4:	ldr	r3, [r4, #92]	; 0x5c
   131e8:	cmp	r3, #0
   131ec:	bne	13304 <__assert_fail@plt+0x1f34>
   131f0:	ldr	r1, [r4, #28]
   131f4:	ldr	r8, [r5]
   131f8:	cmp	r1, #1
   131fc:	beq	1331c <__assert_fail@plt+0x1f4c>
   13200:	ldr	sl, [r4, #160]	; 0xa0
   13204:	mov	r3, #1
   13208:	strb	r3, [r4, #185]	; 0xb9
   1320c:	cmp	sl, #0
   13210:	beq	13054 <__assert_fail@plt+0x1c84>
   13214:	ldrb	r3, [r4, #183]	; 0xb7
   13218:	cmp	r3, #0
   1321c:	movne	sl, #0
   13220:	bne	13054 <__assert_fail@plt+0x1c84>
   13224:	mov	r1, r8
   13228:	mov	r0, #32
   1322c:	bl	11340 <fputc@plt>
   13230:	ldr	r8, [r5]
   13234:	b	12ff8 <__assert_fail@plt+0x1c28>
   13238:	ldrb	r3, [r4, #186]	; 0xba
   1323c:	ldr	r8, [r5]
   13240:	cmp	r3, #0
   13244:	beq	13258 <__assert_fail@plt+0x1e88>
   13248:	ldrb	r3, [r4, #152]	; 0x98
   1324c:	cmp	r3, #0
   13250:	beq	13154 <__assert_fail@plt+0x1d84>
   13254:	b	130cc <__assert_fail@plt+0x1cfc>
   13258:	movw	sl, #7192	; 0x1c18
   1325c:	movt	sl, #2
   13260:	add	r1, sp, #28
   13264:	ldr	r0, [r4, #24]
   13268:	bl	12b24 <__assert_fail@plt+0x1754>
   1326c:	mov	r3, r0
   13270:	mov	r2, sl
   13274:	mov	r0, r8
   13278:	mov	r1, #1
   1327c:	bl	112ec <__fprintf_chk@plt>
   13280:	ldrb	r3, [r4, #152]	; 0x98
   13284:	mov	r2, #1
   13288:	strb	r2, [r4, #186]	; 0xba
   1328c:	cmp	r3, #0
   13290:	beq	13150 <__assert_fail@plt+0x1d80>
   13294:	ldr	r6, [r4, #88]	; 0x58
   13298:	ldr	r8, [r5]
   1329c:	asr	r7, r6, #31
   132a0:	b	130d4 <__assert_fail@plt+0x1d04>
   132a4:	ldrd	r6, [r4, #64]	; 0x40
   132a8:	mov	r0, r8
   132ac:	mov	r1, #1
   132b0:	movw	r2, #7220	; 0x1c34
   132b4:	movt	r2, #2
   132b8:	ldrd	r8, [r4, #40]	; 0x28
   132bc:	strd	r6, [sp, #16]
   132c0:	ldrd	r6, [r4, #56]	; 0x38
   132c4:	strd	r8, [sp]
   132c8:	strd	r6, [sp, #8]
   132cc:	bl	112ec <__fprintf_chk@plt>
   132d0:	ldrb	r1, [r4, #180]	; 0xb4
   132d4:	mov	r3, #1
   132d8:	ldrb	r2, [r4, #187]	; 0xbb
   132dc:	strb	r3, [r4, #182]	; 0xb6
   132e0:	cmp	r1, r2
   132e4:	beq	132fc <__assert_fail@plt+0x1f2c>
   132e8:	mov	r0, #32
   132ec:	ldr	r1, [r5]
   132f0:	bl	11340 <fputc@plt>
   132f4:	ldr	r8, [r5]
   132f8:	b	12f80 <__assert_fail@plt+0x1bb0>
   132fc:	ldr	r8, [r5]
   13300:	b	12fc0 <__assert_fail@plt+0x1bf0>
   13304:	movw	r2, #7292	; 0x1c7c
   13308:	movt	r2, #2
   1330c:	ldr	r0, [r5]
   13310:	mov	r1, #1
   13314:	bl	112ec <__fprintf_chk@plt>
   13318:	b	131f0 <__assert_fail@plt+0x1e20>
   1331c:	mov	r3, r8
   13320:	movw	r0, #7300	; 0x1c84
   13324:	movt	r0, #2
   13328:	mov	r2, #2
   1332c:	bl	11184 <fwrite@plt>
   13330:	ldr	r8, [r5]
   13334:	b	13200 <__assert_fail@plt+0x1e30>
   13338:	mov	r2, #5
   1333c:	strd	r4, [sp, #-20]!	; 0xffffffec
   13340:	mov	r4, r1
   13344:	mov	r5, r0
   13348:	movw	r1, #7200	; 0x1c20
   1334c:	movt	r1, #2
   13350:	mov	r0, #0
   13354:	strd	r6, [sp, #8]
   13358:	str	lr, [sp, #16]
   1335c:	sub	sp, sp, #20
   13360:	bl	11130 <dcgettext@plt>
   13364:	mov	r1, r5
   13368:	bl	12cd8 <__assert_fail@plt+0x1908>
   1336c:	ldrd	r0, [r4, #96]	; 0x60
   13370:	orrs	r3, r0, r1
   13374:	bne	1355c <__assert_fail@plt+0x218c>
   13378:	ldrd	r0, [r4, #104]	; 0x68
   1337c:	orrs	r3, r0, r1
   13380:	beq	134ec <__assert_fail@plt+0x211c>
   13384:	ldr	r2, [pc, #580]	; 135d0 <__assert_fail@plt+0x2200>
   13388:	movw	r5, #16800	; 0x41a0
   1338c:	movt	r5, #3
   13390:	movw	r3, #7408	; 0x1cf0
   13394:	movt	r3, #2
   13398:	strd	r0, [sp]
   1339c:	mov	r1, #1
   133a0:	ldr	r0, [r5]
   133a4:	str	r3, [sp, #8]
   133a8:	bl	112ec <__fprintf_chk@plt>
   133ac:	ldrd	r6, [r4, #112]	; 0x70
   133b0:	ldr	r0, [r5]
   133b4:	orrs	r3, r6, r7
   133b8:	beq	1359c <__assert_fail@plt+0x21cc>
   133bc:	mov	r1, #0
   133c0:	movw	r3, #7420	; 0x1cfc
   133c4:	movt	r3, #2
   133c8:	strd	r6, [sp]
   133cc:	movw	r2, #7372	; 0x1ccc
   133d0:	movt	r2, #2
   133d4:	add	r2, r2, r1
   133d8:	mov	r1, #1
   133dc:	str	r3, [sp, #8]
   133e0:	bl	112ec <__fprintf_chk@plt>
   133e4:	ldr	r0, [r5]
   133e8:	mov	r3, #0
   133ec:	ldrd	r6, [r4, #120]	; 0x78
   133f0:	orrs	r2, r6, r7
   133f4:	beq	13424 <__assert_fail@plt+0x2054>
   133f8:	movw	r1, #7428	; 0x1d04
   133fc:	movt	r1, #2
   13400:	strd	r6, [sp]
   13404:	movw	r2, #7372	; 0x1ccc
   13408:	movt	r2, #2
   1340c:	add	r2, r2, r3
   13410:	str	r1, [sp, #8]
   13414:	mov	r1, #1
   13418:	bl	112ec <__fprintf_chk@plt>
   1341c:	ldr	r0, [r5]
   13420:	mov	r3, #0
   13424:	ldrd	r6, [r4, #128]	; 0x80
   13428:	orrs	r2, r6, r7
   1342c:	beq	1345c <__assert_fail@plt+0x208c>
   13430:	movw	r1, #7436	; 0x1d0c
   13434:	movt	r1, #2
   13438:	strd	r6, [sp]
   1343c:	movw	r2, #7372	; 0x1ccc
   13440:	movt	r2, #2
   13444:	add	r2, r2, r3
   13448:	str	r1, [sp, #8]
   1344c:	mov	r1, #1
   13450:	bl	112ec <__fprintf_chk@plt>
   13454:	ldr	r0, [r5]
   13458:	mov	r3, #0
   1345c:	ldrd	r6, [r4, #136]	; 0x88
   13460:	orrs	r2, r6, r7
   13464:	beq	13494 <__assert_fail@plt+0x20c4>
   13468:	movw	r1, #7448	; 0x1d18
   1346c:	movt	r1, #2
   13470:	strd	r6, [sp]
   13474:	movw	r2, #7372	; 0x1ccc
   13478:	movt	r2, #2
   1347c:	add	r2, r2, r3
   13480:	str	r1, [sp, #8]
   13484:	mov	r1, #1
   13488:	bl	112ec <__fprintf_chk@plt>
   1348c:	ldr	r0, [r5]
   13490:	mov	r3, #0
   13494:	ldr	r6, [r4, #144]	; 0x90
   13498:	asr	r7, r6, #31
   1349c:	orrs	r2, r6, r7
   134a0:	beq	134cc <__assert_fail@plt+0x20fc>
   134a4:	movw	r1, #7444	; 0x1d14
   134a8:	movt	r1, #2
   134ac:	strd	r6, [sp]
   134b0:	movw	r2, #7372	; 0x1ccc
   134b4:	movt	r2, #2
   134b8:	add	r2, r2, r3
   134bc:	str	r1, [sp, #8]
   134c0:	mov	r1, #1
   134c4:	bl	112ec <__fprintf_chk@plt>
   134c8:	ldr	r0, [r5]
   134cc:	mov	r1, r0
   134d0:	mov	r0, #10
   134d4:	add	sp, sp, #20
   134d8:	ldrd	r4, [sp]
   134dc:	ldrd	r6, [sp, #8]
   134e0:	ldr	lr, [sp, #16]
   134e4:	add	sp, sp, #20
   134e8:	b	11340 <fputc@plt>
   134ec:	ldrd	r6, [r4, #112]	; 0x70
   134f0:	orrs	r3, r6, r7
   134f4:	bne	135a8 <__assert_fail@plt+0x21d8>
   134f8:	ldrd	r6, [r4, #120]	; 0x78
   134fc:	orrs	r3, r6, r7
   13500:	bne	135bc <__assert_fail@plt+0x21ec>
   13504:	ldrd	r2, [r4, #128]	; 0x80
   13508:	orrs	r3, r2, r3
   1350c:	bne	135bc <__assert_fail@plt+0x21ec>
   13510:	ldrd	r2, [r4, #136]	; 0x88
   13514:	orrs	r3, r2, r3
   13518:	bne	135bc <__assert_fail@plt+0x21ec>
   1351c:	ldr	r0, [r4, #144]	; 0x90
   13520:	cmp	r0, #0
   13524:	bne	135bc <__assert_fail@plt+0x21ec>
   13528:	mov	r2, #5
   1352c:	movw	r1, #7384	; 0x1cd8
   13530:	movt	r1, #2
   13534:	bl	11130 <dcgettext@plt>
   13538:	movw	r3, #16800	; 0x41a0
   1353c:	movt	r3, #3
   13540:	ldr	r1, [r3]
   13544:	add	sp, sp, #20
   13548:	ldrd	r4, [sp]
   1354c:	ldrd	r6, [sp, #8]
   13550:	ldr	lr, [sp, #16]
   13554:	add	sp, sp, #20
   13558:	b	11388 <fputs@plt>
   1355c:	movw	r3, #7400	; 0x1ce8
   13560:	movt	r3, #2
   13564:	ldr	r2, [pc, #100]	; 135d0 <__assert_fail@plt+0x2200>
   13568:	movw	r5, #16800	; 0x41a0
   1356c:	movt	r5, #3
   13570:	strd	r0, [sp]
   13574:	mov	r1, #1
   13578:	str	r3, [sp, #8]
   1357c:	ldr	r0, [r5]
   13580:	bl	112ec <__fprintf_chk@plt>
   13584:	ldrd	r0, [r4, #104]	; 0x68
   13588:	orrs	r3, r0, r1
   1358c:	beq	133ac <__assert_fail@plt+0x1fdc>
   13590:	movw	r2, #7372	; 0x1ccc
   13594:	movt	r2, #2
   13598:	b	13390 <__assert_fail@plt+0x1fc0>
   1359c:	mov	r3, #0
   135a0:	ldrd	r6, [r4, #120]	; 0x78
   135a4:	b	133f0 <__assert_fail@plt+0x2020>
   135a8:	movw	r5, #16800	; 0x41a0
   135ac:	movt	r5, #3
   135b0:	mov	r1, #1
   135b4:	ldr	r0, [r5]
   135b8:	b	133c0 <__assert_fail@plt+0x1ff0>
   135bc:	movw	r5, #16800	; 0x41a0
   135c0:	movt	r5, #3
   135c4:	mov	r3, #1
   135c8:	ldr	r0, [r5]
   135cc:	b	133f0 <__assert_fail@plt+0x2020>
   135d0:	andeq	r1, r2, sp, asr #25
   135d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   135d8:	mov	r3, #0
   135dc:	strd	r6, [sp, #8]
   135e0:	mov	r6, r3
   135e4:	movw	r7, #4264	; 0x10a8
   135e8:	movt	r7, #2
   135ec:	strd	r8, [sp, #16]
   135f0:	strd	sl, [sp, #24]
   135f4:	mov	fp, #38	; 0x26
   135f8:	mov	sl, r7
   135fc:	str	lr, [sp, #32]
   13600:	sub	sp, sp, #1536	; 0x600
   13604:	cmn	fp, #93	; 0x5d
   13608:	sub	sp, sp, #4
   1360c:	mov	r5, fp
   13610:	add	r9, sp, #264	; 0x108
   13614:	add	r8, sp, #416	; 0x1a0
   13618:	str	r0, [sp, #32]
   1361c:	strh	r3, [r9]
   13620:	str	r3, [sp, #72]	; 0x48
   13624:	mov	r3, #51712	; 0xca00
   13628:	movt	r3, #15258	; 0x3b9a
   1362c:	str	r3, [sp, #76]	; 0x4c
   13630:	mvn	r3, #1
   13634:	str	r3, [sp, #20]
   13638:	beq	13748 <__assert_fail@plt+0x2378>
   1363c:	ldr	r3, [sp, #20]
   13640:	cmn	r3, #2
   13644:	beq	13b7c <__assert_fail@plt+0x27ac>
   13648:	ldr	r2, [sp, #20]
   1364c:	cmp	r2, #0
   13650:	ble	13b60 <__assert_fail@plt+0x2790>
   13654:	movw	r3, #277	; 0x115
   13658:	cmp	r2, r3
   1365c:	ble	13cfc <__assert_fail@plt+0x292c>
   13660:	add	r5, fp, #2
   13664:	mov	r2, #2
   13668:	cmp	r5, #112	; 0x70
   1366c:	bhi	13748 <__assert_fail@plt+0x2378>
   13670:	add	r5, sl, r5
   13674:	movw	r3, #2260	; 0x8d4
   13678:	ldrsb	r3, [r5, r3]
   1367c:	cmp	r3, r2
   13680:	bne	13748 <__assert_fail@plt+0x2378>
   13684:	ldrb	r6, [r5, #2376]	; 0x948
   13688:	cmp	r6, #0
   1368c:	beq	14074 <__assert_fail@plt+0x2ca4>
   13690:	ldr	r3, [sp, #72]	; 0x48
   13694:	add	r1, sp, #312	; 0x138
   13698:	mov	r7, r9
   1369c:	add	ip, r8, #56	; 0x38
   136a0:	ldrd	r4, [sp, #80]	; 0x50
   136a4:	cmp	r3, #0
   136a8:	subne	r3, r3, #1
   136ac:	strne	r3, [sp, #72]	; 0x48
   136b0:	ldr	r3, [sp, #232]	; 0xe8
   136b4:	str	r3, [sp, #320]	; 0x140
   136b8:	add	r3, sp, #304	; 0x130
   136bc:	ldrd	r2, [r3]
   136c0:	strd	r4, [r1]
   136c4:	add	r1, sp, #320	; 0x140
   136c8:	ldrd	r0, [r1]
   136cc:	strd	r2, [r8, #56]	; 0x38
   136d0:	mvn	r3, #1
   136d4:	str	r3, [sp, #20]
   136d8:	add	r3, sp, #328	; 0x148
   136dc:	ldrd	r2, [r3]
   136e0:	strd	r4, [r8, #64]	; 0x40
   136e4:	strd	r0, [r8, #72]	; 0x48
   136e8:	add	r1, sp, #336	; 0x150
   136ec:	ldrd	r0, [r1]
   136f0:	strd	r2, [r8, #80]	; 0x50
   136f4:	add	r3, sp, #344	; 0x158
   136f8:	ldrd	r2, [r3]
   136fc:	strd	r0, [r8, #88]	; 0x58
   13700:	add	r1, sp, #352	; 0x160
   13704:	ldrd	r0, [r1]
   13708:	strd	r2, [r8, #96]	; 0x60
   1370c:	mov	r8, ip
   13710:	strd	r0, [ip, #48]	; 0x30
   13714:	add	r3, sp, #272	; 0x110
   13718:	add	r9, r7, #2
   1371c:	strh	r6, [r7, #2]
   13720:	add	r3, r3, #30
   13724:	cmp	r9, r3
   13728:	bcs	15c0c <__assert_fail@plt+0x483c>
   1372c:	cmp	r6, #12
   13730:	beq	15c14 <__assert_fail@plt+0x4844>
   13734:	add	r3, sl, r6
   13738:	ldrsb	fp, [r3, #184]	; 0xb8
   1373c:	cmn	fp, #93	; 0x5d
   13740:	mov	r5, fp
   13744:	bne	1363c <__assert_fail@plt+0x226c>
   13748:	add	r3, sl, r6
   1374c:	ldrb	ip, [r3, #2492]	; 0x9bc
   13750:	cmp	ip, #0
   13754:	bne	13804 <__assert_fail@plt+0x2434>
   13758:	ldr	r3, [sp, #72]	; 0x48
   1375c:	cmp	r3, #3
   13760:	bne	13774 <__assert_fail@plt+0x23a4>
   13764:	ldr	r3, [sp, #20]
   13768:	cmp	r3, #0
   1376c:	bgt	13b70 <__assert_fail@plt+0x27a0>
   13770:	beq	13b3c <__assert_fail@plt+0x276c>
   13774:	movw	r0, #2260	; 0x8d4
   13778:	add	r1, sp, #264	; 0x108
   1377c:	b	13790 <__assert_fail@plt+0x23c0>
   13780:	cmp	r9, r1
   13784:	sub	r8, r8, #56	; 0x38
   13788:	beq	13b3c <__assert_fail@plt+0x276c>
   1378c:	ldrsh	r6, [r9, #-2]!
   13790:	add	r6, sl, r6
   13794:	ldrsb	r3, [r6, #184]	; 0xb8
   13798:	cmn	r3, #93	; 0x5d
   1379c:	add	r2, r3, #1
   137a0:	beq	13780 <__assert_fail@plt+0x23b0>
   137a4:	cmp	r2, #112	; 0x70
   137a8:	add	r3, sl, r2
   137ac:	bhi	13780 <__assert_fail@plt+0x23b0>
   137b0:	ldrsb	r2, [r3, r0]
   137b4:	cmp	r2, #1
   137b8:	bne	13780 <__assert_fail@plt+0x23b0>
   137bc:	ldrb	r6, [r3, #2376]	; 0x948
   137c0:	cmp	r6, #0
   137c4:	beq	13780 <__assert_fail@plt+0x23b0>
   137c8:	ldrd	r4, [sp, #80]	; 0x50
   137cc:	add	r1, sp, #312	; 0x138
   137d0:	mov	r7, r9
   137d4:	add	ip, r8, #56	; 0x38
   137d8:	ldr	r3, [sp, #232]	; 0xe8
   137dc:	str	r3, [sp, #320]	; 0x140
   137e0:	add	r3, sp, #304	; 0x130
   137e4:	ldrd	r2, [r3]
   137e8:	strd	r4, [r1]
   137ec:	add	r1, sp, #320	; 0x140
   137f0:	ldrd	r0, [r1]
   137f4:	strd	r2, [r8, #56]	; 0x38
   137f8:	mov	r3, #3
   137fc:	str	r3, [sp, #72]	; 0x48
   13800:	b	136d8 <__assert_fail@plt+0x2308>
   13804:	add	r3, sl, ip
   13808:	add	r5, sp, #368	; 0x170
   1380c:	ldrb	r2, [r3, #2608]	; 0xa30
   13810:	mov	r4, r5
   13814:	sub	lr, ip, #4
   13818:	rsb	r1, r2, #1
   1381c:	rsb	r1, r1, r1, lsl #3
   13820:	lsl	r1, r1, #3
   13824:	ldrd	r6, [r8, r1]
   13828:	add	r3, r8, r1
   1382c:	ldrd	r0, [r3, #8]
   13830:	ldr	fp, [r3, #16]
   13834:	strd	r6, [r5, #-8]
   13838:	ldr	r7, [r3, #20]
   1383c:	strd	r0, [r4], #-8
   13840:	ldr	r6, [r3, #24]
   13844:	str	fp, [r4, #16]
   13848:	strd	r0, [sp, #44]	; 0x2c
   1384c:	str	r7, [r4, #20]
   13850:	str	fp, [sp, #52]	; 0x34
   13854:	str	r6, [r4, #24]
   13858:	str	r7, [sp, #56]	; 0x38
   1385c:	str	r6, [sp, #64]	; 0x40
   13860:	ldr	fp, [r3, #28]
   13864:	ldr	r7, [r3, #32]
   13868:	ldr	r6, [r3, #40]	; 0x28
   1386c:	str	fp, [r4, #28]
   13870:	ldr	r1, [r3, #36]	; 0x24
   13874:	str	r7, [r4, #32]
   13878:	ldr	r0, [r3, #44]	; 0x2c
   1387c:	str	r6, [sp, #24]
   13880:	str	r7, [sp, #60]	; 0x3c
   13884:	str	r6, [r4, #40]	; 0x28
   13888:	ldrd	r6, [r3, #48]	; 0x30
   1388c:	str	r1, [r4, #36]	; 0x24
   13890:	ldr	r3, [r3, #48]	; 0x30
   13894:	str	r1, [sp, #36]	; 0x24
   13898:	str	fp, [sp, #68]	; 0x44
   1389c:	str	r3, [sp, #40]	; 0x28
   138a0:	str	r0, [sp, #28]
   138a4:	str	r0, [r4, #44]	; 0x2c
   138a8:	strd	r6, [r4, #48]	; 0x30
   138ac:	cmp	lr, #87	; 0x57
   138b0:	ldrls	pc, [pc, lr, lsl #2]
   138b4:	b	166f4 <__assert_fail@plt+0x5324>
   138b8:	ldrdeq	r4, [r1], -ip
   138bc:	strdeq	r6, [r1], -r4
   138c0:	strdeq	r6, [r1], -r4
   138c4:	andeq	r4, r1, r8, lsr #18
   138c8:	andeq	r4, r1, r0, asr #21
   138cc:	muleq	r1, r4, sl
   138d0:	andeq	r4, r1, r8, ror #20
   138d4:	andeq	r4, r1, ip, lsr sl
   138d8:	andeq	r4, r1, r8, ror #24
   138dc:	andeq	r4, r1, r0, lsl #26
   138e0:	andeq	r4, r1, r0, lsr ip
   138e4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   138e8:	strdeq	r6, [r1], -r4
   138ec:	strdeq	r6, [r1], -r4
   138f0:			; <UNDEFINED> instruction: 0x00014bb4
   138f4:	andeq	r4, r1, r4, ror fp
   138f8:	andeq	r4, r1, r0, lsr fp
   138fc:	strdeq	r6, [r1], -r4
   13900:	andeq	r4, r1, ip, ror #21
   13904:	andeq	r5, r1, r4, asr #10
   13908:	strdeq	r5, [r1], -ip
   1390c:	strdeq	r6, [r1], -r4
   13910:	strdeq	r6, [r1], -r4
   13914:	strdeq	r4, [r1], -ip
   13918:	ldrdeq	r4, [r1], -ip
   1391c:	andeq	r5, r1, r4, lsl r8
   13920:	strdeq	r5, [r1], -r4
   13924:	ldrdeq	r5, [r1], -r0
   13928:	andeq	r3, r1, r8, lsl sl
   1392c:	andeq	r5, r1, r8, ror #12
   13930:	andeq	r5, r1, r0, lsl #11
   13934:	andeq	r4, r1, ip, asr sp
   13938:	andeq	r4, r1, r8, lsr sp
   1393c:	andeq	r4, r1, ip, lsl #26
   13940:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13944:	andeq	r4, r1, r8, asr #25
   13948:	muleq	r1, r4, ip
   1394c:	andeq	r5, r1, ip, ror #1
   13950:	andeq	r5, r1, r4, lsl #1
   13954:	andeq	r5, r1, r8, asr #32
   13958:	ldrdeq	r4, [r1], -ip
   1395c:	andeq	r4, r1, r4, lsr #31
   13960:	andeq	r4, r1, r4, ror pc
   13964:	andeq	r4, r1, ip, asr #30
   13968:	andeq	r4, r1, r0, lsl #30
   1396c:	strdeq	r6, [r1], -r4
   13970:	andeq	r4, r1, ip, ror #26
   13974:	andeq	r5, r1, r4, asr #17
   13978:	andeq	r4, r1, r8, asr #4
   1397c:	andeq	r4, r1, r8, asr #4
   13980:	strdeq	r4, [r1], -r8
   13984:	muleq	r1, ip, lr
   13988:	andeq	r4, r1, ip, lsr lr
   1398c:	andeq	r4, r1, r4, ror #27
   13990:			; <UNDEFINED> instruction: 0x000148bc
   13994:	andeq	r4, r1, r4, asr r8
   13998:	andeq	r4, r1, r0, lsl #16
   1399c:	andeq	r4, r1, r4, ror r7
   139a0:	andeq	r4, r1, ip, lsl r7
   139a4:	andeq	r4, r1, r4, asr #13
   139a8:	andeq	r4, r1, r8, asr r6
   139ac:	strdeq	r4, [r1], -r0
   139b0:	muleq	r1, r8, r5
   139b4:	andeq	r4, r1, ip, lsr #10
   139b8:	andeq	r4, r1, r4, asr #9
   139bc:	andeq	r4, r1, r0, lsl #19
   139c0:	andeq	r5, r1, r0, asr sl
   139c4:	andeq	r4, r1, ip, ror r3
   139c8:	andeq	r4, r1, ip, ror r3
   139cc:	andeq	r5, r1, r0, asr #16
   139d0:	strdeq	r6, [r1], -r4
   139d4:	andeq	r5, r1, r0, lsr #9
   139d8:	andeq	r5, r1, r4, lsr r4
   139dc:	andeq	r5, r1, r8, lsr #7
   139e0:	andeq	r5, r1, ip, lsr r3
   139e4:	ldrdeq	r5, [r1], -r0
   139e8:	andeq	r5, r1, r0, lsr #22
   139ec:	ldrdeq	r5, [r1], -r8
   139f0:	strdeq	r6, [r1], -r4
   139f4:	strdeq	r6, [r1], -r4
   139f8:	strdeq	r6, [r1], -r4
   139fc:	andeq	r5, r1, r8, lsl #21
   13a00:	strdeq	r6, [r1], -r4
   13a04:	andeq	r5, r1, r0, lsl #5
   13a08:	andeq	r5, r1, r0, asr r2
   13a0c:	strdeq	r5, [r1], -ip
   13a10:	andeq	r5, r1, r4, lsr #17
   13a14:	andeq	r5, r1, ip, ror fp
   13a18:	ldr	fp, [sp, #32]
   13a1c:	ldrd	r6, [r8, #40]	; 0x28
   13a20:	ldr	r1, [r8, #48]	; 0x30
   13a24:	ldrd	r2, [fp, #136]	; 0x88
   13a28:	ldr	r0, [fp, #144]	; 0x90
   13a2c:	adds	r1, r0, r1
   13a30:	movvs	ip, #1
   13a34:	movvc	ip, #0
   13a38:	str	r1, [fp, #144]	; 0x90
   13a3c:	ldrd	r0, [fp, #128]	; 0x80
   13a40:	strd	r0, [sp, #120]	; 0x78
   13a44:	adds	r0, r2, r6
   13a48:	adcs	r1, r3, r7
   13a4c:	ldrd	r6, [r8, #24]
   13a50:	movvs	r3, #1
   13a54:	movvc	r3, #0
   13a58:	strd	r0, [fp, #136]	; 0x88
   13a5c:	orr	ip, ip, r3
   13a60:	ldrd	r0, [fp, #120]	; 0x78
   13a64:	strd	r6, [sp, #112]	; 0x70
   13a68:	ldrd	r6, [r8, #32]
   13a6c:	strd	r0, [sp, #128]	; 0x80
   13a70:	ldrd	r0, [sp, #120]	; 0x78
   13a74:	adds	r2, r0, r6
   13a78:	adcs	r3, r1, r7
   13a7c:	ldrd	r6, [sp, #112]	; 0x70
   13a80:	movvs	lr, #1
   13a84:	movvc	lr, #0
   13a88:	strd	r2, [fp, #128]	; 0x80
   13a8c:	orr	ip, ip, lr
   13a90:	ldrd	r2, [fp, #112]	; 0x70
   13a94:	ldrd	r0, [sp, #128]	; 0x80
   13a98:	strd	r2, [sp, #136]	; 0x88
   13a9c:	adds	r2, r0, r6
   13aa0:	adcs	r3, r1, r7
   13aa4:	ldrd	r6, [r8, #8]
   13aa8:	movvs	r1, #1
   13aac:	movvc	r1, #0
   13ab0:	orr	ip, ip, r1
   13ab4:	ldrd	r0, [fp, #104]	; 0x68
   13ab8:	strd	r2, [fp, #120]	; 0x78
   13abc:	strd	r6, [sp, #112]	; 0x70
   13ac0:	ldrd	r6, [sp, #136]	; 0x88
   13ac4:	strd	r0, [sp, #120]	; 0x78
   13ac8:	ldrd	r0, [r8, #16]
   13acc:	adds	r2, r6, r0
   13ad0:	adcs	r3, r7, r1
   13ad4:	ldrd	r6, [sp, #112]	; 0x70
   13ad8:	movvs	lr, #1
   13adc:	movvc	lr, #0
   13ae0:	strd	r2, [fp, #112]	; 0x70
   13ae4:	orr	ip, ip, lr
   13ae8:	ldrd	r2, [fp, #96]	; 0x60
   13aec:	ldrd	r0, [sp, #120]	; 0x78
   13af0:	strd	r2, [sp, #128]	; 0x80
   13af4:	ldr	lr, [r8, #-56]	; 0xffffffc8
   13af8:	adds	r2, r0, r6
   13afc:	adcs	r3, r1, r7
   13b00:	ldrd	r6, [sp, #128]	; 0x80
   13b04:	movvs	r1, #1
   13b08:	movvc	r1, #0
   13b0c:	str	r1, [sp, #112]	; 0x70
   13b10:	ldrd	r0, [r8]
   13b14:	strd	r2, [fp, #104]	; 0x68
   13b18:	str	lr, [fp, #24]
   13b1c:	adds	r2, r6, r0
   13b20:	adcs	r3, r7, r1
   13b24:	ldr	r1, [sp, #112]	; 0x70
   13b28:	strd	r2, [fp, #96]	; 0x60
   13b2c:	orrvc	r0, ip, r1
   13b30:	movvs	r0, #1
   13b34:	cmp	r0, #0
   13b38:	beq	15788 <__assert_fail@plt+0x43b8>
   13b3c:	mov	r0, #1
   13b40:	add	sp, sp, #1536	; 0x600
   13b44:	add	sp, sp, #4
   13b48:	ldrd	r4, [sp]
   13b4c:	ldrd	r6, [sp, #8]
   13b50:	ldrd	r8, [sp, #16]
   13b54:	ldrd	sl, [sp, #24]
   13b58:	add	sp, sp, #32
   13b5c:	pop	{pc}		; (ldr pc, [sp], #4)
   13b60:	mov	r3, #0
   13b64:	mov	r2, r3
   13b68:	str	r3, [sp, #20]
   13b6c:	b	13668 <__assert_fail@plt+0x2298>
   13b70:	mvn	r3, #1
   13b74:	str	r3, [sp, #20]
   13b78:	b	13774 <__assert_fail@plt+0x23a4>
   13b7c:	ldr	r0, [sp, #32]
   13b80:	ldr	r2, [r0]
   13b84:	ldrb	r3, [r2]
   13b88:	cmp	r3, #9
   13b8c:	bcc	13bb4 <__assert_fail@plt+0x27e4>
   13b90:	cmp	r3, #13
   13b94:	bls	13ba0 <__assert_fail@plt+0x27d0>
   13b98:	cmp	r3, #32
   13b9c:	bne	13bb4 <__assert_fail@plt+0x27e4>
   13ba0:	add	r2, r2, #1
   13ba4:	str	r2, [r0]
   13ba8:	ldrb	r3, [r2]
   13bac:	cmp	r3, #9
   13bb0:	bcs	13b90 <__assert_fail@plt+0x27c0>
   13bb4:	sub	lr, r3, #48	; 0x30
   13bb8:	sub	r1, r3, #43	; 0x2b
   13bbc:	cmp	lr, #9
   13bc0:	and	r1, r1, #253	; 0xfd
   13bc4:	bls	13c3c <__assert_fail@plt+0x286c>
   13bc8:	cmp	r1, #0
   13bcc:	beq	13d10 <__assert_fail@plt+0x2940>
   13bd0:	cmp	r3, #65	; 0x41
   13bd4:	bcc	13bec <__assert_fail@plt+0x281c>
   13bd8:	cmp	r3, #90	; 0x5a
   13bdc:	bls	14064 <__assert_fail@plt+0x2c94>
   13be0:	sub	r1, r3, #97	; 0x61
   13be4:	cmp	r1, #25
   13be8:	bls	13f7c <__assert_fail@plt+0x2bac>
   13bec:	cmp	r3, #40	; 0x28
   13bf0:	bne	16304 <__assert_fail@plt+0x4f34>
   13bf4:	mov	ip, #0
   13bf8:	b	13c1c <__assert_fail@plt+0x284c>
   13bfc:	cmp	r3, #40	; 0x28
   13c00:	addeq	ip, ip, #1
   13c04:	beq	13c10 <__assert_fail@plt+0x2840>
   13c08:	cmp	r3, #41	; 0x29
   13c0c:	subeq	ip, ip, #1
   13c10:	cmp	ip, #0
   13c14:	beq	15c00 <__assert_fail@plt+0x4830>
   13c18:	mov	r2, r1
   13c1c:	add	r1, r2, #1
   13c20:	str	r1, [r0]
   13c24:	ldrb	r3, [r1, #-1]
   13c28:	cmp	r3, #0
   13c2c:	bne	13bfc <__assert_fail@plt+0x282c>
   13c30:	mov	r2, r3
   13c34:	str	r3, [sp, #20]
   13c38:	b	13668 <__assert_fail@plt+0x2298>
   13c3c:	sub	r3, r3, #45	; 0x2d
   13c40:	cmp	r1, #0
   13c44:	clz	r3, r3
   13c48:	lsr	r3, r3, #5
   13c4c:	bne	15ce4 <__assert_fail@plt+0x4914>
   13c50:	cmp	r3, #0
   13c54:	moveq	r7, #1
   13c58:	mvnne	r7, #0
   13c5c:	add	r2, r2, #1
   13c60:	str	r2, [r0]
   13c64:	ldrb	r3, [r2]
   13c68:	cmp	r3, #9
   13c6c:	bcc	13c80 <__assert_fail@plt+0x28b0>
   13c70:	cmp	r3, #13
   13c74:	bls	13c5c <__assert_fail@plt+0x288c>
   13c78:	cmp	r3, #32
   13c7c:	beq	13c5c <__assert_fail@plt+0x288c>
   13c80:	sub	lr, r3, #48	; 0x30
   13c84:	cmp	lr, #9
   13c88:	bhi	13b88 <__assert_fail@plt+0x27b8>
   13c8c:	cmn	r7, #1
   13c90:	strne	r2, [sp, #24]
   13c94:	beq	13d20 <__assert_fail@plt+0x2950>
   13c98:	mov	r4, #0
   13c9c:	adds	r5, r4, lr
   13ca0:	add	ip, r2, #1
   13ca4:	str	r5, [sp, #20]
   13ca8:	bvs	13cd4 <__assert_fail@plt+0x2904>
   13cac:	ldrb	r3, [r2, #1]
   13cb0:	mov	r1, #10
   13cb4:	smull	r0, r1, r5, r1
   13cb8:	sub	lr, r3, #48	; 0x30
   13cbc:	mov	r4, r0
   13cc0:	cmp	lr, #9
   13cc4:	bhi	13db0 <__assert_fail@plt+0x29e0>
   13cc8:	cmp	r1, r0, asr #31
   13ccc:	mov	r2, ip
   13cd0:	beq	13c9c <__assert_fail@plt+0x28cc>
   13cd4:	mov	r3, #63	; 0x3f
   13cd8:	mov	r2, #2
   13cdc:	str	r3, [sp, #20]
   13ce0:	b	13d08 <__assert_fail@plt+0x2938>
   13ce4:	movw	r1, #273	; 0x111
   13ce8:	mov	r2, #3600	; 0xe10
   13cec:	mov	r3, #0
   13cf0:	str	r1, [sp, #20]
   13cf4:	add	r1, sp, #304	; 0x130
   13cf8:	strd	r2, [r1]
   13cfc:	ldr	r3, [sp, #20]
   13d00:	add	r3, sl, r3
   13d04:	ldrb	r2, [r3, #1980]	; 0x7bc
   13d08:	add	r5, fp, r2
   13d0c:	b	13668 <__assert_fail@plt+0x2298>
   13d10:	sub	r3, r3, #45	; 0x2d
   13d14:	clz	r3, r3
   13d18:	lsr	r3, r3, #5
   13d1c:	b	13c50 <__assert_fail@plt+0x2880>
   13d20:	mov	r5, r2
   13d24:	mov	r4, #0
   13d28:	str	r2, [sp, #24]
   13d2c:	rsb	r3, r3, #48	; 0x30
   13d30:	add	ip, r5, #1
   13d34:	adds	lr, r4, r3
   13d38:	str	lr, [sp, #20]
   13d3c:	bvs	13cd4 <__assert_fail@plt+0x2904>
   13d40:	ldrb	r3, [r5, #1]
   13d44:	mov	r2, #10
   13d48:	smull	r0, r1, lr, r2
   13d4c:	sub	r2, r3, #48	; 0x30
   13d50:	mov	r4, r0
   13d54:	cmp	r2, #9
   13d58:	bls	13f6c <__assert_fail@plt+0x2b9c>
   13d5c:	and	r3, r3, #253	; 0xfd
   13d60:	ldr	r2, [sp, #24]
   13d64:	cmp	r3, #44	; 0x2c
   13d68:	bne	13d7c <__assert_fail@plt+0x29ac>
   13d6c:	ldrb	r3, [ip, #1]
   13d70:	sub	r3, r3, #48	; 0x30
   13d74:	cmp	r3, #9
   13d78:	bls	13e14 <__assert_fail@plt+0x2a44>
   13d7c:	sub	r2, ip, r2
   13d80:	mov	r3, #1
   13d84:	asr	r1, lr, #31
   13d88:	mov	r0, lr
   13d8c:	str	r2, [sp, #232]	; 0xe8
   13d90:	ldr	r2, [sp, #32]
   13d94:	strb	r3, [sp, #304]	; 0x130
   13d98:	movw	r3, #274	; 0x112
   13d9c:	str	r3, [sp, #20]
   13da0:	strd	r0, [sp, #80]	; 0x50
   13da4:	str	ip, [r2]
   13da8:	mov	r2, #19
   13dac:	b	13d08 <__assert_fail@plt+0x2938>
   13db0:	and	r3, r3, #253	; 0xfd
   13db4:	cmp	r3, #44	; 0x2c
   13db8:	bne	13dcc <__assert_fail@plt+0x29fc>
   13dbc:	ldrb	r3, [ip, #1]
   13dc0:	sub	r3, r3, #48	; 0x30
   13dc4:	cmp	r3, #9
   13dc8:	bls	13e18 <__assert_fail@plt+0x2a48>
   13dcc:	ldr	r0, [sp, #24]
   13dd0:	cmp	r7, #0
   13dd4:	movw	r1, #274	; 0x112
   13dd8:	movw	r2, #275	; 0x113
   13ddc:	lsr	r3, r7, #31
   13de0:	movne	r2, r1
   13de4:	asr	r1, r5, #31
   13de8:	str	r2, [sp, #20]
   13dec:	movne	r2, #19
   13df0:	moveq	r2, #20
   13df4:	strb	r3, [sp, #304]	; 0x130
   13df8:	sub	r0, ip, r0
   13dfc:	str	r0, [sp, #232]	; 0xe8
   13e00:	ldr	r0, [sp, #32]
   13e04:	str	ip, [r0]
   13e08:	mov	r0, r5
   13e0c:	strd	r0, [sp, #80]	; 0x50
   13e10:	b	13d08 <__assert_fail@plt+0x2938>
   13e14:	mov	r2, r5
   13e18:	ldrb	r1, [ip, #2]
   13e1c:	add	r3, r3, r3, lsl #2
   13e20:	lsl	r3, r3, #1
   13e24:	sub	r1, r1, #48	; 0x30
   13e28:	cmp	r1, #9
   13e2c:	addhi	r1, ip, #2
   13e30:	bhi	141e4 <__assert_fail@plt+0x2e14>
   13e34:	ldrb	r2, [r2, #4]
   13e38:	add	r3, r3, r1
   13e3c:	add	r1, ip, #3
   13e40:	sub	r2, r2, #48	; 0x30
   13e44:	cmp	r2, #9
   13e48:	bhi	141e4 <__assert_fail@plt+0x2e14>
   13e4c:	ldrb	r1, [ip, #4]
   13e50:	add	r3, r3, r3, lsl #2
   13e54:	add	r3, r2, r3, lsl #1
   13e58:	add	r3, r3, r3, lsl #2
   13e5c:	sub	r2, r1, #48	; 0x30
   13e60:	cmp	r2, #9
   13e64:	lsl	r3, r3, #1
   13e68:	bhi	16534 <__assert_fail@plt+0x5164>
   13e6c:	ldrb	r1, [ip, #5]
   13e70:	add	r3, r2, r3
   13e74:	add	r3, r3, r3, lsl #2
   13e78:	lsl	r3, r3, #1
   13e7c:	sub	r1, r1, #48	; 0x30
   13e80:	cmp	r1, #9
   13e84:	bhi	1652c <__assert_fail@plt+0x515c>
   13e88:	ldrb	r2, [ip, #6]
   13e8c:	add	r3, r1, r3
   13e90:	add	r3, r3, r3, lsl #2
   13e94:	lsl	r3, r3, #1
   13e98:	sub	r2, r2, #48	; 0x30
   13e9c:	cmp	r2, #9
   13ea0:	bhi	16524 <__assert_fail@plt+0x5154>
   13ea4:	ldrb	r1, [ip, #7]
   13ea8:	add	r3, r2, r3
   13eac:	add	r3, r3, r3, lsl #2
   13eb0:	lsl	r3, r3, #1
   13eb4:	sub	r1, r1, #48	; 0x30
   13eb8:	cmp	r1, #9
   13ebc:	bhi	1651c <__assert_fail@plt+0x514c>
   13ec0:	ldrb	r2, [ip, #8]
   13ec4:	add	r3, r1, r3
   13ec8:	add	r3, r3, r3, lsl #2
   13ecc:	lsl	r0, r3, #1
   13ed0:	sub	r3, r2, #48	; 0x30
   13ed4:	cmp	r3, #9
   13ed8:	bhi	1664c <__assert_fail@plt+0x527c>
   13edc:	ldrb	r2, [ip, #9]
   13ee0:	add	r3, r3, r0
   13ee4:	add	r3, r3, r3, lsl #2
   13ee8:	lsl	r3, r3, #1
   13eec:	sub	r2, r2, #48	; 0x30
   13ef0:	cmp	r2, #9
   13ef4:	bhi	16644 <__assert_fail@plt+0x5274>
   13ef8:	cmn	r7, #1
   13efc:	add	r1, ip, #10
   13f00:	add	r3, r3, r2
   13f04:	beq	1421c <__assert_fail@plt+0x2e4c>
   13f08:	ldrb	r2, [r1]
   13f0c:	sub	r2, r2, #48	; 0x30
   13f10:	cmp	r2, #9
   13f14:	bhi	13f28 <__assert_fail@plt+0x2b58>
   13f18:	ldrb	r2, [r1, #1]!
   13f1c:	sub	r2, r2, #48	; 0x30
   13f20:	cmp	r2, #9
   13f24:	bls	13f18 <__assert_fail@plt+0x2b48>
   13f28:	adds	r2, r3, #0
   13f2c:	movne	r2, #1
   13f30:	ands	r2, r2, r7, lsr #31
   13f34:	beq	15c1c <__assert_fail@plt+0x484c>
   13f38:	ldr	r2, [sp, #20]
   13f3c:	subs	r2, r2, #1
   13f40:	bvs	13cd4 <__assert_fail@plt+0x2904>
   13f44:	ldr	r0, [sp, #76]	; 0x4c
   13f48:	str	r2, [sp, #304]	; 0x130
   13f4c:	mov	r2, #21
   13f50:	sub	r3, r0, r3
   13f54:	ldr	r0, [sp, #32]
   13f58:	str	r3, [sp, #308]	; 0x134
   13f5c:	str	r1, [r0]
   13f60:	mov	r1, #276	; 0x114
   13f64:	str	r1, [sp, #20]
   13f68:	b	13d08 <__assert_fail@plt+0x2938>
   13f6c:	cmp	r1, r0, asr #31
   13f70:	mov	r5, ip
   13f74:	beq	13d2c <__assert_fail@plt+0x295c>
   13f78:	b	13cd4 <__assert_fail@plt+0x2904>
   13f7c:	add	r4, sp, #244	; 0xf4
   13f80:	add	ip, sp, #256	; 0x100
   13f84:	mov	r1, r4
   13f88:	add	ip, ip, #7
   13f8c:	mov	r0, r1
   13f90:	cmp	r1, ip
   13f94:	add	r2, r2, #1
   13f98:	strbcc	r3, [r0], #1
   13f9c:	movcc	r1, r0
   13fa0:	ldr	r3, [sp, #32]
   13fa4:	str	r2, [r3]
   13fa8:	ldrb	r3, [r2]
   13fac:	cmp	r3, #65	; 0x41
   13fb0:	sub	r0, r3, #97	; 0x61
   13fb4:	bcc	13fc8 <__assert_fail@plt+0x2bf8>
   13fb8:	cmp	r3, #90	; 0x5a
   13fbc:	bls	13f8c <__assert_fail@plt+0x2bbc>
   13fc0:	cmp	r0, #25
   13fc4:	bls	13f8c <__assert_fail@plt+0x2bbc>
   13fc8:	cmp	r3, #46	; 0x2e
   13fcc:	beq	13f8c <__assert_fail@plt+0x2bbc>
   13fd0:	mov	r3, #0
   13fd4:	strb	r3, [r1]
   13fd8:	ldrb	r3, [sp, #244]	; 0xf4
   13fdc:	cmp	r3, #0
   13fe0:	movne	r2, r4
   13fe4:	beq	14008 <__assert_fail@plt+0x2c38>
   13fe8:	sub	r1, r3, #97	; 0x61
   13fec:	sub	r0, r3, #32
   13ff0:	cmp	r1, #25
   13ff4:	bhi	14050 <__assert_fail@plt+0x2c80>
   13ff8:	strb	r0, [r2]
   13ffc:	ldrb	r3, [r2, #1]!
   14000:	cmp	r3, #0
   14004:	bne	13fe8 <__assert_fail@plt+0x2c18>
   14008:	movw	r1, #7456	; 0x1d20
   1400c:	movt	r1, #2
   14010:	ldr	r7, [pc, #4020]	; 14fcc <__assert_fail@plt+0x3bfc>
   14014:	b	14024 <__assert_fail@plt+0x2c54>
   14018:	ldr	r1, [r7, #12]!
   1401c:	cmp	r1, #0
   14020:	beq	15ba0 <__assert_fail@plt+0x47d0>
   14024:	mov	r0, r4
   14028:	bl	110a0 <strcmp@plt>
   1402c:	cmp	r0, #0
   14030:	bne	14018 <__assert_fail@plt+0x2c48>
   14034:	ldr	r3, [r7, #4]
   14038:	ldr	r2, [r7, #8]
   1403c:	str	r3, [sp, #20]
   14040:	asr	r3, r2, #31
   14044:	add	r1, sp, #304	; 0x130
   14048:	strd	r2, [r1]
   1404c:	b	13648 <__assert_fail@plt+0x2278>
   14050:	strb	r3, [r2]
   14054:	ldrb	r3, [r2, #1]!
   14058:	cmp	r3, #0
   1405c:	bne	13fe8 <__assert_fail@plt+0x2c18>
   14060:	b	14008 <__assert_fail@plt+0x2c38>
   14064:	add	ip, sp, #256	; 0x100
   14068:	sub	r4, ip, #12
   1406c:	mov	r1, r4
   14070:	b	13f88 <__assert_fail@plt+0x2bb8>
   14074:	ldrd	r2, [r8, #56]	; 0x38
   14078:	add	r5, sp, #368	; 0x170
   1407c:	add	lr, r8, #56	; 0x38
   14080:	mov	r4, r5
   14084:	mov	r7, r9
   14088:	ldrd	r0, [r8, #64]	; 0x40
   1408c:	mov	fp, r8
   14090:	mvn	ip, #27
   14094:	strd	r2, [r5, #-8]
   14098:	ldrd	r2, [r8, #80]	; 0x50
   1409c:	strd	r0, [r4], #-8
   140a0:	ldrd	r0, [r8, #88]	; 0x58
   140a4:	strd	r2, [sp, #24]
   140a8:	ldrd	r2, [r8, #72]	; 0x48
   140ac:	strd	r2, [r4, #16]
   140b0:	ldrd	r2, [r8, #96]	; 0x60
   140b4:	strd	r0, [r4, #32]
   140b8:	ldr	r1, [r8, #64]	; 0x40
   140bc:	strd	r2, [r4, #40]	; 0x28
   140c0:	ldrd	r2, [sp, #24]
   140c4:	str	r1, [sp, #44]	; 0x2c
   140c8:	ldr	r1, [r8, #68]	; 0x44
   140cc:	strd	r2, [r4, #24]
   140d0:	ldrd	r2, [r8, #104]	; 0x68
   140d4:	str	r1, [sp, #48]	; 0x30
   140d8:	strd	r2, [r4, #48]	; 0x30
   140dc:	ldr	r3, [r8, #72]	; 0x48
   140e0:	str	r3, [sp, #52]	; 0x34
   140e4:	ldr	r3, [r8, #76]	; 0x4c
   140e8:	str	r3, [sp, #56]	; 0x38
   140ec:	ldr	r3, [r8, #80]	; 0x50
   140f0:	str	r3, [sp, #64]	; 0x40
   140f4:	ldr	r3, [r8, #84]	; 0x54
   140f8:	str	r3, [sp, #68]	; 0x44
   140fc:	ldr	r3, [r8, #88]	; 0x58
   14100:	str	r3, [sp, #60]	; 0x3c
   14104:	ldr	r3, [r8, #92]	; 0x5c
   14108:	str	r3, [sp, #36]	; 0x24
   1410c:	ldrd	r2, [r8, #96]	; 0x60
   14110:	strd	r2, [sp, #24]
   14114:	ldr	r3, [r8, #104]	; 0x68
   14118:	str	r3, [sp, #40]	; 0x28
   1411c:	ldr	r3, [sp, #40]	; 0x28
   14120:	add	r8, fp, #56	; 0x38
   14124:	ldrsh	r1, [r7]
   14128:	str	r3, [sp, #408]	; 0x198
   1412c:	ldr	r3, [sp, #44]	; 0x2c
   14130:	add	r6, r1, r6
   14134:	cmp	r6, #112	; 0x70
   14138:	str	r3, [r5]
   1413c:	ldr	r3, [sp, #48]	; 0x30
   14140:	str	r3, [r5, #4]
   14144:	ldr	r3, [sp, #52]	; 0x34
   14148:	str	r3, [r5, #8]
   1414c:	ldr	r3, [sp, #56]	; 0x38
   14150:	str	r3, [r5, #12]
   14154:	ldr	r3, [sp, #64]	; 0x40
   14158:	str	r3, [r5, #16]
   1415c:	ldr	r3, [sp, #68]	; 0x44
   14160:	str	r3, [r5, #20]
   14164:	ldr	r3, [sp, #60]	; 0x3c
   14168:	str	r3, [r5, #24]
   1416c:	ldr	r3, [sp, #36]	; 0x24
   14170:	str	r3, [r5, #28]
   14174:	ldrd	r2, [sp, #24]
   14178:	strd	r2, [r5, #32]
   1417c:	ldrd	r2, [r4]
   14180:	strd	r2, [fp, #56]	; 0x38
   14184:	ldrd	r2, [r4, #24]
   14188:	strd	r2, [sp, #24]
   1418c:	ldrd	r2, [r4, #8]
   14190:	strd	r2, [r8, #8]
   14194:	ldrd	r2, [r4, #32]
   14198:	strd	r2, [r8, #32]
   1419c:	ldrd	r2, [r4, #16]
   141a0:	strd	r2, [r8, #16]
   141a4:	ldrd	r2, [r4, #40]	; 0x28
   141a8:	strd	r2, [r8, #40]	; 0x28
   141ac:	ldrd	r2, [sp, #24]
   141b0:	strd	r2, [r8, #24]
   141b4:	ldrd	r2, [r4, #48]	; 0x30
   141b8:	strd	r2, [r8, #48]	; 0x30
   141bc:	bhi	141d4 <__assert_fail@plt+0x2e04>
   141c0:	add	r6, sl, r6
   141c4:	movw	r3, #2260	; 0x8d4
   141c8:	ldrsb	r3, [r6, r3]
   141cc:	cmp	r3, r1
   141d0:	beq	15b98 <__assert_fail@plt+0x47c8>
   141d4:	add	ip, sl, ip
   141d8:	movw	r3, #2820	; 0xb04
   141dc:	ldrsb	r6, [ip, r3]
   141e0:	b	13714 <__assert_fail@plt+0x2344>
   141e4:	mov	r2, #100	; 0x64
   141e8:	mul	r3, r2, r3
   141ec:	add	r3, r3, r3, lsl #2
   141f0:	lsl	r3, r3, #1
   141f4:	add	r3, r3, r3, lsl #2
   141f8:	lsl	r3, r3, #1
   141fc:	add	r3, r3, r3, lsl #2
   14200:	lsl	r3, r3, #1
   14204:	add	r3, r3, r3, lsl #2
   14208:	lsl	r0, r3, #1
   1420c:	add	r0, r0, r0, lsl #2
   14210:	lsl	r3, r0, #1
   14214:	cmn	r7, #1
   14218:	bne	15c1c <__assert_fail@plt+0x484c>
   1421c:	ldrb	r2, [r1]
   14220:	sub	r0, r2, #48	; 0x30
   14224:	cmp	r0, #9
   14228:	bhi	13f28 <__assert_fail@plt+0x2b58>
   1422c:	cmp	r2, #48	; 0x30
   14230:	bne	162b8 <__assert_fail@plt+0x4ee8>
   14234:	ldrb	r2, [r1, #1]!
   14238:	sub	r0, r2, #48	; 0x30
   1423c:	cmp	r0, #9
   14240:	bhi	13f28 <__assert_fail@plt+0x2b58>
   14244:	b	1422c <__assert_fail@plt+0x2e5c>
   14248:	ldr	fp, [sp, #32]
   1424c:	ldrd	r6, [r8, #40]	; 0x28
   14250:	ldr	r1, [r8, #48]	; 0x30
   14254:	ldrd	r2, [fp, #136]	; 0x88
   14258:	ldr	r0, [fp, #144]	; 0x90
   1425c:	adds	r1, r0, r1
   14260:	movvs	ip, #1
   14264:	movvc	ip, #0
   14268:	str	r1, [fp, #144]	; 0x90
   1426c:	ldrd	r0, [fp, #128]	; 0x80
   14270:	strd	r0, [sp, #120]	; 0x78
   14274:	adds	r0, r2, r6
   14278:	adcs	r1, r3, r7
   1427c:	ldrd	r6, [r8, #24]
   14280:	movvs	r3, #1
   14284:	movvc	r3, #0
   14288:	strd	r0, [fp, #136]	; 0x88
   1428c:	orr	ip, ip, r3
   14290:	ldrd	r0, [fp, #120]	; 0x78
   14294:	strd	r6, [sp, #112]	; 0x70
   14298:	ldrd	r6, [r8, #32]
   1429c:	strd	r0, [sp, #128]	; 0x80
   142a0:	ldrd	r0, [sp, #120]	; 0x78
   142a4:	adds	r2, r0, r6
   142a8:	adcs	r3, r1, r7
   142ac:	ldrd	r6, [sp, #112]	; 0x70
   142b0:	movvs	lr, #1
   142b4:	movvc	lr, #0
   142b8:	strd	r2, [fp, #128]	; 0x80
   142bc:	orr	ip, ip, lr
   142c0:	ldrd	r2, [fp, #112]	; 0x70
   142c4:	ldrd	r0, [sp, #128]	; 0x80
   142c8:	strd	r2, [sp, #136]	; 0x88
   142cc:	adds	r2, r0, r6
   142d0:	adcs	r3, r1, r7
   142d4:	ldrd	r6, [r8, #8]
   142d8:	movvs	r1, #1
   142dc:	movvc	r1, #0
   142e0:	orr	ip, ip, r1
   142e4:	ldrd	r0, [fp, #104]	; 0x68
   142e8:	strd	r2, [fp, #120]	; 0x78
   142ec:	strd	r6, [sp, #112]	; 0x70
   142f0:	ldrd	r6, [sp, #136]	; 0x88
   142f4:	strd	r0, [sp, #120]	; 0x78
   142f8:	ldrd	r0, [r8, #16]
   142fc:	adds	r2, r6, r0
   14300:	adcs	r3, r7, r1
   14304:	ldrd	r6, [fp, #96]	; 0x60
   14308:	movvs	lr, #1
   1430c:	movvc	lr, #0
   14310:	ldrd	r0, [sp, #120]	; 0x78
   14314:	orr	ip, ip, lr
   14318:	strd	r2, [fp, #112]	; 0x70
   1431c:	strd	r6, [sp, #128]	; 0x80
   14320:	ldrd	r6, [sp, #112]	; 0x70
   14324:	adds	r2, r0, r6
   14328:	adcs	r3, r1, r7
   1432c:	movvs	lr, #1
   14330:	movvc	lr, #0
   14334:	strd	r2, [fp, #104]	; 0x68
   14338:	ldrd	r0, [r8]
   1433c:	ldrd	r6, [sp, #128]	; 0x80
   14340:	adds	r2, r6, r0
   14344:	adcs	r3, r7, r1
   14348:	mov	r1, fp
   1434c:	orrvc	ip, ip, lr
   14350:	movvs	ip, #1
   14354:	cmp	ip, #0
   14358:	strd	r2, [fp, #96]	; 0x60
   1435c:	bne	13b3c <__assert_fail@plt+0x276c>
   14360:	mov	r3, #1
   14364:	sub	fp, r8, #56	; 0x38
   14368:	sub	r7, r9, #2
   1436c:	mov	ip, #16
   14370:	mvn	r6, #92	; 0x5c
   14374:	strb	r3, [r1, #153]	; 0x99
   14378:	b	1411c <__assert_fail@plt+0x2d4c>
   1437c:	mov	r1, #0
   14380:	mov	r2, #56	; 0x38
   14384:	mov	r0, r4
   14388:	mov	r6, r1
   1438c:	str	r1, [sp, #60]	; 0x3c
   14390:	sub	r7, r9, #4
   14394:	sub	fp, r8, #112	; 0x70
   14398:	bl	112c8 <memset@plt>
   1439c:	ldr	r3, [r8, #-56]	; 0xffffffc8
   143a0:	mov	ip, #17
   143a4:	str	r6, [sp, #36]	; 0x24
   143a8:	ldr	r1, [r8, #-52]	; 0xffffffcc
   143ac:	mov	r0, r3
   143b0:	str	r1, [sp, #40]	; 0x28
   143b4:	asr	r1, r3, #31
   143b8:	str	r6, [sp, #44]	; 0x2c
   143bc:	str	r6, [sp, #48]	; 0x30
   143c0:	strd	r0, [sp, #24]
   143c4:	str	r6, [sp, #52]	; 0x34
   143c8:	str	r6, [sp, #56]	; 0x38
   143cc:	str	r6, [sp, #64]	; 0x40
   143d0:	str	r6, [sp, #68]	; 0x44
   143d4:	mvn	r6, #92	; 0x5c
   143d8:	b	1411c <__assert_fail@plt+0x2d4c>
   143dc:	mov	fp, r8
   143e0:	ldr	r2, [sp, #32]
   143e4:	sub	r7, r9, #2
   143e8:	mov	ip, #11
   143ec:	mvn	r6, #92	; 0x5c
   143f0:	ldr	r3, [fp], #-56	; 0xffffffc8
   143f4:	str	r3, [r2, #20]
   143f8:	b	1411c <__assert_fail@plt+0x2d4c>
   143fc:	ldr	r1, [sp, #32]
   14400:	ldrd	r6, [r8, #-48]	; 0xffffffd0
   14404:	ldr	r2, [r8, #-40]	; 0xffffffd8
   14408:	ldr	r3, [r1, #176]	; 0xb0
   1440c:	cmp	r2, #2
   14410:	add	r3, r3, #1
   14414:	str	r3, [r1, #176]	; 0xb0
   14418:	ldrd	r2, [r8]
   1441c:	strd	r2, [sp, #112]	; 0x70
   14420:	bgt	15d2c <__assert_fail@plt+0x495c>
   14424:	cmp	r2, #0
   14428:	sbcs	r3, r3, #0
   1442c:	blt	16110 <__assert_fail@plt+0x4d40>
   14430:	cmp	r7, r6, asr #31
   14434:	mov	lr, #0
   14438:	bne	16328 <__assert_fail@plt+0x4f58>
   1443c:	mov	r3, #60	; 0x3c
   14440:	smull	r6, r7, r6, r3
   14444:	mov	r2, r6
   14448:	mov	r3, r7
   1444c:	ldrb	ip, [r8, #-56]	; 0xffffffc8
   14450:	mov	r1, r3
   14454:	ldrd	r6, [sp, #112]	; 0x70
   14458:	cmp	ip, #0
   1445c:	beq	16014 <__assert_fail@plt+0x4c44>
   14460:	subs	r2, r2, r6
   14464:	mov	r1, #0
   14468:	sbcs	r3, r3, r7
   1446c:	mov	r0, r2
   14470:	movvs	r1, #1
   14474:	mov	r7, r3
   14478:	orrs	r3, lr, r1
   1447c:	bne	13b3c <__assert_fail@plt+0x276c>
   14480:	adds	r3, r0, #1440	; 0x5a0
   14484:	str	r3, [sp, #192]	; 0xc0
   14488:	adc	r3, r7, #0
   1448c:	str	r3, [sp, #196]	; 0xc4
   14490:	ldrd	r2, [sp, #192]	; 0xc0
   14494:	cmp	r3, #0
   14498:	cmpeq	r2, #2880	; 0xb40
   1449c:	bhi	13b3c <__assert_fail@plt+0x276c>
   144a0:	rsb	r2, r0, r0, lsl #4
   144a4:	sub	fp, r8, #112	; 0x70
   144a8:	sub	r7, r9, #4
   144ac:	mov	ip, #10
   144b0:	mvn	r6, #26
   144b4:	lsl	r3, r2, #2
   144b8:	ldr	r2, [sp, #32]
   144bc:	str	r3, [r2, #24]
   144c0:	b	1411c <__assert_fail@plt+0x2d4c>
   144c4:	mov	r6, #0
   144c8:	mov	r7, #0
   144cc:	mov	r2, #56	; 0x38
   144d0:	mov	r1, #0
   144d4:	mov	r0, r4
   144d8:	strd	r6, [sp, #24]
   144dc:	sub	fp, r8, #56	; 0x38
   144e0:	bl	112c8 <memset@plt>
   144e4:	ldrd	r2, [sp, #24]
   144e8:	sub	r7, r9, #2
   144ec:	mov	ip, #17
   144f0:	mvn	r6, #92	; 0x5c
   144f4:	mov	r1, r3
   144f8:	str	r2, [sp, #44]	; 0x2c
   144fc:	str	r3, [sp, #48]	; 0x30
   14500:	str	r3, [sp, #68]	; 0x44
   14504:	mov	r3, #0
   14508:	str	r3, [sp, #40]	; 0x28
   1450c:	mov	r3, #1
   14510:	str	r2, [sp, #52]	; 0x34
   14514:	str	r1, [sp, #56]	; 0x38
   14518:	str	r3, [sp, #60]	; 0x3c
   1451c:	mov	r3, #0
   14520:	str	r2, [sp, #64]	; 0x40
   14524:	str	r3, [sp, #36]	; 0x24
   14528:	b	1411c <__assert_fail@plt+0x2d4c>
   1452c:	mov	r7, #0
   14530:	mov	r6, #0
   14534:	mov	r2, #56	; 0x38
   14538:	mov	r1, #0
   1453c:	strd	r6, [sp, #24]
   14540:	mov	r0, r4
   14544:	sub	fp, r8, #112	; 0x70
   14548:	ldr	r3, [sp, #24]
   1454c:	sub	r7, r9, #4
   14550:	str	r3, [sp, #64]	; 0x40
   14554:	bl	112c8 <memset@plt>
   14558:	ldr	r1, [r8, #-48]	; 0xffffffd0
   1455c:	ldrd	r2, [sp, #24]
   14560:	str	r1, [sp, #60]	; 0x3c
   14564:	mov	r1, r3
   14568:	str	r3, [sp, #48]	; 0x30
   1456c:	str	r2, [sp, #44]	; 0x2c
   14570:	str	r3, [sp, #68]	; 0x44
   14574:	ldr	r3, [r8, #-44]	; 0xffffffd4
   14578:	str	r2, [sp, #52]	; 0x34
   1457c:	str	r1, [sp, #56]	; 0x38
   14580:	str	r3, [sp, #36]	; 0x24
   14584:	mov	r3, #0
   14588:	mov	ip, #17
   1458c:	mvn	r6, #92	; 0x5c
   14590:	str	r3, [sp, #40]	; 0x28
   14594:	b	1411c <__assert_fail@plt+0x2d4c>
   14598:	mov	r7, #0
   1459c:	mov	r6, #0
   145a0:	mov	r2, #56	; 0x38
   145a4:	mov	r1, #0
   145a8:	strd	r6, [sp, #24]
   145ac:	mov	r0, r4
   145b0:	sub	fp, r8, #112	; 0x70
   145b4:	ldr	r3, [sp, #24]
   145b8:	sub	r7, r9, #4
   145bc:	str	r3, [sp, #64]	; 0x40
   145c0:	bl	112c8 <memset@plt>
   145c4:	ldr	r1, [r8, #-56]	; 0xffffffc8
   145c8:	ldrd	r2, [sp, #24]
   145cc:	str	r1, [sp, #60]	; 0x3c
   145d0:	mov	r1, r3
   145d4:	str	r2, [sp, #44]	; 0x2c
   145d8:	str	r3, [sp, #48]	; 0x30
   145dc:	str	r2, [sp, #52]	; 0x34
   145e0:	str	r1, [sp, #56]	; 0x38
   145e4:	str	r3, [sp, #68]	; 0x44
   145e8:	ldr	r3, [r8, #-52]	; 0xffffffcc
   145ec:	b	14580 <__assert_fail@plt+0x31b0>
   145f0:	mov	r6, #0
   145f4:	mov	r7, #0
   145f8:	mov	r2, #56	; 0x38
   145fc:	mov	r1, #0
   14600:	mov	r0, r4
   14604:	strd	r6, [sp, #24]
   14608:	sub	fp, r8, #56	; 0x38
   1460c:	bl	112c8 <memset@plt>
   14610:	ldrd	r2, [sp, #24]
   14614:	sub	r7, r9, #2
   14618:	mov	ip, #17
   1461c:	mvn	r6, #92	; 0x5c
   14620:	mov	r1, r3
   14624:	str	r3, [sp, #36]	; 0x24
   14628:	str	r2, [sp, #44]	; 0x2c
   1462c:	str	r3, [sp, #48]	; 0x30
   14630:	mov	r3, #0
   14634:	str	r3, [sp, #40]	; 0x28
   14638:	mov	r3, #1
   1463c:	str	r2, [sp, #52]	; 0x34
   14640:	str	r1, [sp, #56]	; 0x38
   14644:	str	r3, [sp, #64]	; 0x40
   14648:	mov	r3, #0
   1464c:	str	r2, [sp, #60]	; 0x3c
   14650:	str	r3, [sp, #68]	; 0x44
   14654:	b	1411c <__assert_fail@plt+0x2d4c>
   14658:	mov	r7, #0
   1465c:	mov	r6, #0
   14660:	mov	r2, #56	; 0x38
   14664:	mov	r1, #0
   14668:	strd	r6, [sp, #24]
   1466c:	mov	r0, r4
   14670:	sub	fp, r8, #112	; 0x70
   14674:	ldr	r3, [sp, #24]
   14678:	sub	r7, r9, #4
   1467c:	str	r3, [sp, #60]	; 0x3c
   14680:	bl	112c8 <memset@plt>
   14684:	ldr	r1, [r8, #-48]	; 0xffffffd0
   14688:	ldrd	r2, [sp, #24]
   1468c:	str	r3, [sp, #36]	; 0x24
   14690:	str	r1, [sp, #64]	; 0x40
   14694:	mov	r1, r3
   14698:	str	r3, [sp, #48]	; 0x30
   1469c:	ldr	r3, [r8, #-44]	; 0xffffffd4
   146a0:	str	r2, [sp, #44]	; 0x2c
   146a4:	str	r2, [sp, #52]	; 0x34
   146a8:	str	r1, [sp, #56]	; 0x38
   146ac:	str	r3, [sp, #68]	; 0x44
   146b0:	mov	r3, #0
   146b4:	mov	ip, #17
   146b8:	mvn	r6, #92	; 0x5c
   146bc:	str	r3, [sp, #40]	; 0x28
   146c0:	b	1411c <__assert_fail@plt+0x2d4c>
   146c4:	mov	r7, #0
   146c8:	mov	r6, #0
   146cc:	mov	r2, #56	; 0x38
   146d0:	mov	r1, #0
   146d4:	strd	r6, [sp, #24]
   146d8:	mov	r0, r4
   146dc:	sub	fp, r8, #112	; 0x70
   146e0:	ldr	r3, [sp, #24]
   146e4:	sub	r7, r9, #4
   146e8:	str	r3, [sp, #60]	; 0x3c
   146ec:	bl	112c8 <memset@plt>
   146f0:	ldr	r1, [r8, #-56]	; 0xffffffc8
   146f4:	ldrd	r2, [sp, #24]
   146f8:	str	r1, [sp, #64]	; 0x40
   146fc:	mov	r1, r3
   14700:	str	r3, [sp, #36]	; 0x24
   14704:	str	r2, [sp, #44]	; 0x2c
   14708:	str	r3, [sp, #48]	; 0x30
   1470c:	str	r2, [sp, #52]	; 0x34
   14710:	str	r1, [sp, #56]	; 0x38
   14714:	ldr	r3, [r8, #-52]	; 0xffffffcc
   14718:	b	146ac <__assert_fail@plt+0x32dc>
   1471c:	mov	r2, #56	; 0x38
   14720:	mov	r1, #0
   14724:	mov	fp, r8
   14728:	mov	r0, r4
   1472c:	bl	112c8 <memset@plt>
   14730:	ldrd	r2, [fp], #-56	; 0xffffffc8
   14734:	mov	r0, #0
   14738:	mov	r1, #0
   1473c:	sub	r7, r9, #2
   14740:	mov	ip, #17
   14744:	strd	r0, [sp, #24]
   14748:	str	r1, [sp, #36]	; 0x24
   1474c:	str	r0, [sp, #44]	; 0x2c
   14750:	str	r1, [sp, #48]	; 0x30
   14754:	str	r0, [sp, #60]	; 0x3c
   14758:	str	r0, [sp, #64]	; 0x40
   1475c:	str	r1, [sp, #68]	; 0x44
   14760:	strd	r2, [sp, #52]	; 0x34
   14764:	mov	r3, #0
   14768:	mvn	r6, #92	; 0x5c
   1476c:	str	r3, [sp, #40]	; 0x28
   14770:	b	1411c <__assert_fail@plt+0x2d4c>
   14774:	mov	r2, #56	; 0x38
   14778:	mov	r1, #0
   1477c:	mov	r0, r4
   14780:	mov	fp, #0
   14784:	bl	112c8 <memset@plt>
   14788:	ldr	r0, [r8, #-48]	; 0xffffffd0
   1478c:	ldr	ip, [r8, #-44]	; 0xffffffd4
   14790:	ldrd	r2, [r8]
   14794:	cmp	ip, r0, asr #31
   14798:	asr	r1, r2, #31
   1479c:	bne	16218 <__assert_fail@plt+0x4e48>
   147a0:	cmp	r1, r3
   147a4:	bne	161a4 <__assert_fail@plt+0x4dd4>
   147a8:	smull	r2, r3, r0, r2
   147ac:	strd	r2, [sp, #96]	; 0x60
   147b0:	ldrd	r0, [sp, #96]	; 0x60
   147b4:	subs	r3, fp, #0
   147b8:	str	r0, [sp, #52]	; 0x34
   147bc:	str	r1, [sp, #56]	; 0x38
   147c0:	bne	13b3c <__assert_fail@plt+0x276c>
   147c4:	mov	r0, #0
   147c8:	mov	r1, #0
   147cc:	sub	fp, r8, #112	; 0x70
   147d0:	sub	r7, r9, #4
   147d4:	mov	ip, #17
   147d8:	mvn	r6, #92	; 0x5c
   147dc:	strd	r0, [sp, #24]
   147e0:	str	r1, [sp, #36]	; 0x24
   147e4:	str	r3, [sp, #40]	; 0x28
   147e8:	str	r0, [sp, #44]	; 0x2c
   147ec:	str	r1, [sp, #48]	; 0x30
   147f0:	str	r0, [sp, #60]	; 0x3c
   147f4:	str	r0, [sp, #64]	; 0x40
   147f8:	str	r1, [sp, #68]	; 0x44
   147fc:	b	1411c <__assert_fail@plt+0x2d4c>
   14800:	mov	r2, #56	; 0x38
   14804:	mov	r1, #0
   14808:	mov	r0, r4
   1480c:	bl	112c8 <memset@plt>
   14810:	ldr	r7, [r8, #-56]	; 0xffffffc8
   14814:	mov	r3, #0
   14818:	ldr	fp, [r8, #-52]	; 0xffffffcc
   1481c:	str	r3, [sp, #36]	; 0x24
   14820:	ldr	r2, [r8]
   14824:	ldr	r3, [r8, #4]
   14828:	cmp	fp, r7, asr #31
   1482c:	asr	r1, r2, #31
   14830:	bne	16188 <__assert_fail@plt+0x4db8>
   14834:	cmp	r1, r3
   14838:	bne	1611c <__assert_fail@plt+0x4d4c>
   1483c:	smull	r2, r3, r7, r2
   14840:	strd	r2, [sp, #88]	; 0x58
   14844:	ldr	r3, [sp, #36]	; 0x24
   14848:	ldrd	r0, [sp, #88]	; 0x58
   1484c:	cmp	r3, #0
   14850:	b	147b8 <__assert_fail@plt+0x33e8>
   14854:	mov	r6, #0
   14858:	mov	r7, #0
   1485c:	mov	r2, #56	; 0x38
   14860:	mov	r1, #0
   14864:	mov	r0, r4
   14868:	strd	r6, [sp, #24]
   1486c:	sub	fp, r8, #56	; 0x38
   14870:	bl	112c8 <memset@plt>
   14874:	ldrd	r2, [sp, #24]
   14878:	sub	r7, r9, #2
   1487c:	mov	ip, #17
   14880:	mvn	r6, #92	; 0x5c
   14884:	mov	r1, r3
   14888:	str	r3, [sp, #36]	; 0x24
   1488c:	str	r2, [sp, #52]	; 0x34
   14890:	str	r3, [sp, #56]	; 0x38
   14894:	mov	r3, #0
   14898:	str	r3, [sp, #40]	; 0x28
   1489c:	mov	r3, #1
   148a0:	str	r2, [sp, #60]	; 0x3c
   148a4:	str	r3, [sp, #44]	; 0x2c
   148a8:	mov	r3, #0
   148ac:	str	r2, [sp, #64]	; 0x40
   148b0:	str	r3, [sp, #48]	; 0x30
   148b4:	str	r1, [sp, #68]	; 0x44
   148b8:	b	1411c <__assert_fail@plt+0x2d4c>
   148bc:	mov	r7, #0
   148c0:	mov	r6, #0
   148c4:	mov	r2, #56	; 0x38
   148c8:	mov	r1, #0
   148cc:	strd	r6, [sp, #24]
   148d0:	mov	r0, r4
   148d4:	sub	fp, r8, #112	; 0x70
   148d8:	ldr	r3, [sp, #24]
   148dc:	sub	r7, r9, #4
   148e0:	str	r3, [sp, #60]	; 0x3c
   148e4:	bl	112c8 <memset@plt>
   148e8:	ldr	r1, [r8, #-48]	; 0xffffffd0
   148ec:	ldrd	r2, [sp, #24]
   148f0:	str	r3, [sp, #36]	; 0x24
   148f4:	str	r1, [sp, #44]	; 0x2c
   148f8:	mov	r1, r3
   148fc:	str	r2, [sp, #52]	; 0x34
   14900:	str	r3, [sp, #56]	; 0x38
   14904:	ldr	r3, [r8, #-44]	; 0xffffffd4
   14908:	str	r2, [sp, #64]	; 0x40
   1490c:	str	r1, [sp, #68]	; 0x44
   14910:	str	r3, [sp, #48]	; 0x30
   14914:	mov	r3, #0
   14918:	mov	ip, #17
   1491c:	mvn	r6, #92	; 0x5c
   14920:	str	r3, [sp, #40]	; 0x28
   14924:	b	1411c <__assert_fail@plt+0x2d4c>
   14928:	ldr	r6, [sp, #32]
   1492c:	movw	r1, #7544	; 0x1d78
   14930:	movt	r1, #2
   14934:	sub	fp, r8, #56	; 0x38
   14938:	sub	r7, r9, #2
   1493c:	mov	r2, #5
   14940:	mov	r0, #0
   14944:	ldr	ip, [r6, #156]	; 0x9c
   14948:	ldr	r3, [r6, #172]	; 0xac
   1494c:	add	ip, ip, #1
   14950:	add	r3, r3, #1
   14954:	str	ip, [r6, #156]	; 0x9c
   14958:	str	r3, [r6, #172]	; 0xac
   1495c:	bl	11130 <dcgettext@plt>
   14960:	ldrb	r3, [r6, #181]	; 0xb5
   14964:	mov	r1, r6
   14968:	cmp	r3, #0
   1496c:	beq	14c5c <__assert_fail@plt+0x388c>
   14970:	bl	12f18 <__assert_fail@plt+0x1b48>
   14974:	mvn	r6, #92	; 0x5c
   14978:	mov	ip, #4
   1497c:	b	1411c <__assert_fail@plt+0x2d4c>
   14980:	mov	r1, #0
   14984:	mov	r2, #56	; 0x38
   14988:	mov	r0, r4
   1498c:	mov	r6, r1
   14990:	mov	fp, r1
   14994:	str	r1, [sp, #36]	; 0x24
   14998:	sub	r7, r9, #4
   1499c:	str	r1, [sp, #60]	; 0x3c
   149a0:	bl	112c8 <memset@plt>
   149a4:	ldrd	r2, [r8, #-56]	; 0xffffffc8
   149a8:	mov	r1, r6
   149ac:	str	r6, [sp, #52]	; 0x34
   149b0:	str	r6, [sp, #64]	; 0x40
   149b4:	mov	ip, #17
   149b8:	mvn	r6, #92	; 0x5c
   149bc:	strd	r2, [sp, #24]
   149c0:	str	r1, [sp, #40]	; 0x28
   149c4:	str	r1, [sp, #44]	; 0x2c
   149c8:	str	fp, [sp, #48]	; 0x30
   149cc:	str	fp, [sp, #56]	; 0x38
   149d0:	str	fp, [sp, #68]	; 0x44
   149d4:	sub	fp, r8, #112	; 0x70
   149d8:	b	1411c <__assert_fail@plt+0x2d4c>
   149dc:	mov	fp, r8
   149e0:	sub	r7, r9, #4
   149e4:	ldr	r6, [sp, #32]
   149e8:	mov	r3, #1
   149ec:	mov	r2, #5
   149f0:	ldrd	r0, [fp], #-112	; 0xffffff90
   149f4:	strb	r3, [r6, #152]	; 0x98
   149f8:	strd	r0, [sp, #112]	; 0x70
   149fc:	movw	r1, #7524	; 0x1d64
   14a00:	movt	r1, #2
   14a04:	ldrd	r8, [sp, #112]	; 0x70
   14a08:	mov	r0, #0
   14a0c:	strd	r8, [r6, #88]	; 0x58
   14a10:	bl	11130 <dcgettext@plt>
   14a14:	ldrb	r3, [r6, #181]	; 0xb5
   14a18:	cmp	r3, #0
   14a1c:	moveq	ip, #2
   14a20:	mvneq	r6, #92	; 0x5c
   14a24:	beq	1411c <__assert_fail@plt+0x2d4c>
   14a28:	mov	r1, r6
   14a2c:	mvn	r6, #92	; 0x5c
   14a30:	bl	12f18 <__assert_fail@plt+0x1b48>
   14a34:	mov	ip, #2
   14a38:	b	1411c <__assert_fail@plt+0x2d4c>
   14a3c:	ldr	r6, [sp, #32]
   14a40:	movw	r1, #4076	; 0xfec
   14a44:	movt	r1, #2
   14a48:	mov	r2, #5
   14a4c:	mov	r0, #0
   14a50:	sub	fp, r8, #56	; 0x38
   14a54:	sub	r7, r9, #2
   14a58:	ldr	r3, [r6, #156]	; 0x9c
   14a5c:	add	r3, r3, #1
   14a60:	str	r3, [r6, #156]	; 0x9c
   14a64:	b	1495c <__assert_fail@plt+0x358c>
   14a68:	ldr	r6, [sp, #32]
   14a6c:	movw	r1, #8896	; 0x22c0
   14a70:	movt	r1, #2
   14a74:	mov	r2, #5
   14a78:	mov	r0, #0
   14a7c:	sub	fp, r8, #56	; 0x38
   14a80:	sub	r7, r9, #2
   14a84:	ldr	r3, [r6, #176]	; 0xb0
   14a88:	add	r3, r3, #1
   14a8c:	str	r3, [r6, #176]	; 0xb0
   14a90:	b	1495c <__assert_fail@plt+0x358c>
   14a94:	ldr	r6, [sp, #32]
   14a98:	movw	r1, #7556	; 0x1d84
   14a9c:	movt	r1, #2
   14aa0:	mov	r2, #5
   14aa4:	mov	r0, #0
   14aa8:	sub	fp, r8, #56	; 0x38
   14aac:	sub	r7, r9, #2
   14ab0:	ldr	r3, [r6, #164]	; 0xa4
   14ab4:	add	r3, r3, #1
   14ab8:	str	r3, [r6, #164]	; 0xa4
   14abc:	b	1495c <__assert_fail@plt+0x358c>
   14ac0:	ldr	r6, [sp, #32]
   14ac4:	movw	r1, #7548	; 0x1d7c
   14ac8:	movt	r1, #2
   14acc:	mov	r2, #5
   14ad0:	mov	r0, #0
   14ad4:	sub	fp, r8, #56	; 0x38
   14ad8:	sub	r7, r9, #2
   14adc:	ldr	r3, [r6, #172]	; 0xac
   14ae0:	add	r3, r3, #1
   14ae4:	str	r3, [r6, #172]	; 0xac
   14ae8:	b	1495c <__assert_fail@plt+0x358c>
   14aec:	ldr	ip, [sp, #32]
   14af0:	mov	r0, #2
   14af4:	mov	r1, #0
   14af8:	sub	r7, r9, #4
   14afc:	sub	fp, r8, #112	; 0x70
   14b00:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   14b04:	mov	r9, #0
   14b08:	mov	r8, #0
   14b0c:	mov	r6, #20
   14b10:	str	r0, [ip, #28]
   14b14:	mov	r0, ip
   14b18:	strd	r8, [ip, #80]	; 0x50
   14b1c:	str	r1, [ip, #88]	; 0x58
   14b20:	mov	ip, #8
   14b24:	strd	r2, [r0, #72]	; 0x48
   14b28:	str	r1, [r0, #92]	; 0x5c
   14b2c:	b	1411c <__assert_fail@plt+0x2d4c>
   14b30:	sub	r3, r8, #272	; 0x110
   14b34:	ldr	r1, [r8, #-56]	; 0xffffffc8
   14b38:	mov	fp, r8
   14b3c:	sub	r7, r9, #12
   14b40:	mvn	r6, #92	; 0x5c
   14b44:	ldrd	r2, [r3]
   14b48:	ldr	lr, [sp, #32]
   14b4c:	ldr	ip, [fp], #-336	; 0xfffffeb0
   14b50:	strd	r2, [lr, #72]	; 0x48
   14b54:	str	r1, [lr, #88]	; 0x58
   14b58:	ldrd	r0, [r8, #-160]	; 0xffffff60
   14b5c:	str	ip, [lr, #28]
   14b60:	mov	ip, #7
   14b64:	ldr	r3, [r8, #-52]	; 0xffffffcc
   14b68:	strd	r0, [lr, #80]	; 0x50
   14b6c:	str	r3, [lr, #92]	; 0x5c
   14b70:	b	1411c <__assert_fail@plt+0x2d4c>
   14b74:	ldr	ip, [sp, #32]
   14b78:	mov	r0, #0
   14b7c:	mov	r1, #0
   14b80:	mov	fp, r8
   14b84:	sub	r7, r9, #8
   14b88:	ldr	lr, [fp], #-224	; 0xffffff20
   14b8c:	mvn	r6, #92	; 0x5c
   14b90:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   14b94:	strd	r0, [ip, #88]	; 0x58
   14b98:	ldrd	r0, [r8, #-160]	; 0xffffff60
   14b9c:	mov	r8, ip
   14ba0:	strd	r2, [ip, #80]	; 0x50
   14ba4:	mov	ip, #7
   14ba8:	str	lr, [r8, #28]
   14bac:	strd	r0, [r8, #72]	; 0x48
   14bb0:	b	1411c <__assert_fail@plt+0x2d4c>
   14bb4:	ldr	lr, [sp, #32]
   14bb8:	mov	r0, #0
   14bbc:	mov	r1, #0
   14bc0:	mov	fp, r8
   14bc4:	sub	r7, r9, #4
   14bc8:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   14bcc:	mov	ip, #7
   14bd0:	mvn	r6, #92	; 0x5c
   14bd4:	strd	r0, [lr, #80]	; 0x50
   14bd8:	mov	r1, #0
   14bdc:	ldr	r0, [fp], #-112	; 0xffffff90
   14be0:	str	r0, [lr, #28]
   14be4:	strd	r2, [lr, #72]	; 0x48
   14be8:	str	r1, [lr, #88]	; 0x58
   14bec:	str	r1, [lr, #92]	; 0x5c
   14bf0:	b	1411c <__assert_fail@plt+0x2d4c>
   14bf4:	movw	r1, #7592	; 0x1da8
   14bf8:	movt	r1, #2
   14bfc:	mov	r2, #5
   14c00:	mov	r0, #0
   14c04:	bl	11130 <dcgettext@plt>
   14c08:	ldr	r1, [sp, #32]
   14c0c:	sub	fp, r8, #56	; 0x38
   14c10:	sub	r7, r9, #2
   14c14:	ldrb	r3, [r1, #181]	; 0xb5
   14c18:	cmp	r3, #0
   14c1c:	beq	14c5c <__assert_fail@plt+0x388c>
   14c20:	bl	13338 <__assert_fail@plt+0x1f68>
   14c24:	mvn	r6, #92	; 0x5c
   14c28:	mov	ip, #4
   14c2c:	b	1411c <__assert_fail@plt+0x2d4c>
   14c30:	movw	r1, #7584	; 0x1da0
   14c34:	movt	r1, #2
   14c38:	mov	r2, #5
   14c3c:	mov	r0, #0
   14c40:	bl	11130 <dcgettext@plt>
   14c44:	ldr	r1, [sp, #32]
   14c48:	sub	fp, r8, #56	; 0x38
   14c4c:	sub	r7, r9, #2
   14c50:	ldrb	r3, [r1, #181]	; 0xb5
   14c54:	cmp	r3, #0
   14c58:	bne	14970 <__assert_fail@plt+0x35a0>
   14c5c:	mov	ip, #4
   14c60:	mvn	r6, #92	; 0x5c
   14c64:	b	1411c <__assert_fail@plt+0x2d4c>
   14c68:	ldr	r6, [sp, #32]
   14c6c:	movw	r1, #7568	; 0x1d90
   14c70:	movt	r1, #2
   14c74:	mov	r2, #5
   14c78:	mov	r0, #0
   14c7c:	sub	fp, r8, #56	; 0x38
   14c80:	sub	r7, r9, #2
   14c84:	ldr	r3, [r6, #160]	; 0xa0
   14c88:	add	r3, r3, #1
   14c8c:	str	r3, [r6, #160]	; 0xa0
   14c90:	b	1495c <__assert_fail@plt+0x358c>
   14c94:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   14c98:	mov	fp, r8
   14c9c:	mov	r0, #1
   14ca0:	sub	r7, r9, #4
   14ca4:	ldr	ip, [sp, #32]
   14ca8:	mvn	r6, #92	; 0x5c
   14cac:	ldr	r1, [fp], #-112	; 0xffffff90
   14cb0:	strb	r0, [ip, #188]	; 0xbc
   14cb4:	mov	r0, ip
   14cb8:	mov	ip, #13
   14cbc:	strd	r2, [r0, #8]
   14cc0:	str	r1, [r0, #16]
   14cc4:	b	1411c <__assert_fail@plt+0x2d4c>
   14cc8:	mov	fp, r8
   14ccc:	ldrd	r2, [r8, #-56]	; 0xffffffc8
   14cd0:	b	14c9c <__assert_fail@plt+0x38cc>
   14cd4:	ldr	r3, [r8, #-56]	; 0xffffffc8
   14cd8:	mov	r0, #0
   14cdc:	mov	r1, #0
   14ce0:	sub	r7, r9, #4
   14ce4:	sub	fp, r8, #112	; 0x70
   14ce8:	ldr	r2, [sp, #32]
   14cec:	mov	ip, #13
   14cf0:	mvn	r6, #92	; 0x5c
   14cf4:	strd	r0, [r2, #8]
   14cf8:	str	r3, [r2, #16]
   14cfc:	b	1411c <__assert_fail@plt+0x2d4c>
   14d00:	movw	r1, #7572	; 0x1d94
   14d04:	movt	r1, #2
   14d08:	b	14bfc <__assert_fail@plt+0x382c>
   14d0c:	ldr	r1, [sp, #32]
   14d10:	mov	r3, #0
   14d14:	mov	r2, #0
   14d18:	mov	fp, r8
   14d1c:	sub	r7, r9, #2
   14d20:	mov	ip, #13
   14d24:	mvn	r6, #92	; 0x5c
   14d28:	strd	r2, [r1, #8]
   14d2c:	ldr	r3, [fp], #-56	; 0xffffffc8
   14d30:	str	r3, [r1, #16]
   14d34:	b	1411c <__assert_fail@plt+0x2d4c>
   14d38:	ldr	r3, [r8, #-56]	; 0xffffffc8
   14d3c:	sub	r7, r9, #4
   14d40:	sub	fp, r8, #112	; 0x70
   14d44:	add	r3, r3, #3600	; 0xe10
   14d48:	mov	ip, #12
   14d4c:	ldr	r2, [sp, #32]
   14d50:	mvn	r6, #92	; 0x5c
   14d54:	str	r3, [r2, #24]
   14d58:	b	1411c <__assert_fail@plt+0x2d4c>
   14d5c:	mov	fp, r8
   14d60:	sub	r7, r9, #2
   14d64:	ldr	r3, [fp], #-56	; 0xffffffc8
   14d68:	b	14d44 <__assert_fail@plt+0x3974>
   14d6c:	ldrd	r2, [r8, #-112]	; 0xffffff90
   14d70:	ldr	fp, [sp, #32]
   14d74:	ldrd	r0, [r8, #-104]	; 0xffffff98
   14d78:	ldrd	r6, [r8, #-48]	; 0xffffffd0
   14d7c:	strd	r2, [fp, #32]
   14d80:	add	lr, fp, #32
   14d84:	ldrd	r2, [r8, #-96]	; 0xffffffa0
   14d88:	strd	r0, [fp, #40]	; 0x28
   14d8c:	rsbs	r6, r6, #0
   14d90:	rscs	r7, r7, #0
   14d94:	strd	r2, [fp, #48]	; 0x30
   14d98:	mov	r3, #0
   14d9c:	movvs	r3, #1
   14da0:	subs	r1, r3, #0
   14da4:	ldr	r3, [sp, #32]
   14da8:	strd	r6, [r3, #56]	; 0x38
   14dac:	bne	13b3c <__assert_fail@plt+0x276c>
   14db0:	ldrd	r2, [r8, #8]
   14db4:	rsbs	r2, r2, #0
   14db8:	rscs	r3, r3, #0
   14dbc:	movvs	r1, #1
   14dc0:	cmp	r1, #0
   14dc4:	ldr	r1, [sp, #32]
   14dc8:	strd	r2, [r1, #64]	; 0x40
   14dcc:	bne	13b3c <__assert_fail@plt+0x276c>
   14dd0:	sub	fp, r8, #168	; 0xa8
   14dd4:	sub	r7, r9, #6
   14dd8:	mov	ip, #15
   14ddc:	mvn	r6, #92	; 0x5c
   14de0:	b	1411c <__assert_fail@plt+0x2d4c>
   14de4:	mov	r7, #0
   14de8:	mov	r6, #0
   14dec:	mov	r2, #56	; 0x38
   14df0:	mov	r1, #0
   14df4:	strd	r6, [sp, #24]
   14df8:	mov	r0, r4
   14dfc:	sub	fp, r8, #112	; 0x70
   14e00:	ldr	r3, [sp, #24]
   14e04:	sub	r7, r9, #4
   14e08:	str	r3, [sp, #60]	; 0x3c
   14e0c:	bl	112c8 <memset@plt>
   14e10:	ldr	r1, [r8, #-56]	; 0xffffffc8
   14e14:	ldrd	r2, [sp, #24]
   14e18:	str	r1, [sp, #44]	; 0x2c
   14e1c:	mov	r1, r3
   14e20:	str	r3, [sp, #36]	; 0x24
   14e24:	str	r2, [sp, #52]	; 0x34
   14e28:	str	r3, [sp, #56]	; 0x38
   14e2c:	str	r2, [sp, #64]	; 0x40
   14e30:	str	r1, [sp, #68]	; 0x44
   14e34:	ldr	r3, [r8, #-52]	; 0xffffffcc
   14e38:	b	14910 <__assert_fail@plt+0x3540>
   14e3c:	mov	r3, #0
   14e40:	mov	r2, #0
   14e44:	mov	r6, #0
   14e48:	mov	r7, #0
   14e4c:	mov	r0, #1
   14e50:	mov	r1, #0
   14e54:	sub	fp, r8, #56	; 0x38
   14e58:	mov	ip, #17
   14e5c:	strd	r6, [sp, #24]
   14e60:	str	r3, [sp, #40]	; 0x28
   14e64:	sub	r7, r9, #2
   14e68:	mvn	r6, #92	; 0x5c
   14e6c:	str	r3, [sp, #412]	; 0x19c
   14e70:	mov	r3, #0
   14e74:	strd	r0, [r5, #-8]
   14e78:	str	r3, [sp, #36]	; 0x24
   14e7c:	str	r2, [sp, #44]	; 0x2c
   14e80:	str	r3, [sp, #48]	; 0x30
   14e84:	str	r2, [sp, #52]	; 0x34
   14e88:	str	r3, [sp, #56]	; 0x38
   14e8c:	str	r2, [sp, #60]	; 0x3c
   14e90:	str	r2, [sp, #64]	; 0x40
   14e94:	str	r3, [sp, #68]	; 0x44
   14e98:	b	1411c <__assert_fail@plt+0x2d4c>
   14e9c:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   14ea0:	mov	r6, #0
   14ea4:	mov	r7, #0
   14ea8:	strd	r2, [r5, #-8]
   14eac:	mov	r1, #0
   14eb0:	sub	fp, r8, #112	; 0x70
   14eb4:	mov	r8, #0
   14eb8:	strd	r6, [sp, #24]
   14ebc:	sub	r7, r9, #4
   14ec0:	mov	r9, #0
   14ec4:	mvn	r6, #92	; 0x5c
   14ec8:	mov	ip, #17
   14ecc:	str	r9, [sp, #36]	; 0x24
   14ed0:	str	r1, [sp, #40]	; 0x28
   14ed4:	str	r8, [sp, #44]	; 0x2c
   14ed8:	str	r9, [sp, #48]	; 0x30
   14edc:	str	r8, [sp, #52]	; 0x34
   14ee0:	str	r9, [sp, #56]	; 0x38
   14ee4:	str	r8, [sp, #60]	; 0x3c
   14ee8:	str	r8, [sp, #64]	; 0x40
   14eec:	str	r9, [sp, #68]	; 0x44
   14ef0:	str	r1, [sp, #412]	; 0x19c
   14ef4:	b	1411c <__assert_fail@plt+0x2d4c>
   14ef8:	ldrd	r2, [r8, #-56]	; 0xffffffc8
   14efc:	b	14ea0 <__assert_fail@plt+0x3ad0>
   14f00:	ldrd	r2, [r8, #-104]	; 0xffffff98
   14f04:	sub	r7, r9, #6
   14f08:	sub	fp, r8, #168	; 0xa8
   14f0c:	ldrd	r0, [r8]
   14f10:	ldr	ip, [sp, #32]
   14f14:	strd	r0, [sp, #112]	; 0x70
   14f18:	ldrd	r0, [r8, #8]
   14f1c:	strd	r2, [ip, #64]	; 0x40
   14f20:	add	lr, ip, #32
   14f24:	ldrd	r2, [r8, #-56]	; 0xffffffc8
   14f28:	strd	r2, [ip, #56]	; 0x38
   14f2c:	ldrd	r2, [r8, #16]
   14f30:	mvn	r6, #92	; 0x5c
   14f34:	strd	r0, [ip, #40]	; 0x28
   14f38:	ldrd	r8, [sp, #112]	; 0x70
   14f3c:	strd	r8, [ip, #32]
   14f40:	mov	ip, #14
   14f44:	strd	r2, [lr, #16]
   14f48:	b	1411c <__assert_fail@plt+0x2d4c>
   14f4c:	mov	fp, r8
   14f50:	ldrd	r0, [r8, #-48]	; 0xffffffd0
   14f54:	sub	r7, r9, #4
   14f58:	mov	ip, #14
   14f5c:	mvn	r6, #92	; 0x5c
   14f60:	ldrd	r2, [fp], #-112	; 0xffffff90
   14f64:	ldr	lr, [sp, #32]
   14f68:	strd	r2, [lr, #56]	; 0x38
   14f6c:	strd	r0, [lr, #64]	; 0x40
   14f70:	b	1411c <__assert_fail@plt+0x2d4c>
   14f74:	ldrd	r2, [r8, #-168]	; 0xffffff58
   14f78:	sub	r7, r9, #8
   14f7c:	sub	fp, r8, #224	; 0xe0
   14f80:	ldrd	r0, [r8]
   14f84:	ldr	ip, [sp, #32]
   14f88:	strd	r0, [sp, #112]	; 0x70
   14f8c:	ldrd	r0, [r8, #8]
   14f90:	strd	r2, [ip, #56]	; 0x38
   14f94:	add	lr, ip, #32
   14f98:	ldrd	r2, [r8, #-104]	; 0xffffff98
   14f9c:	strd	r2, [ip, #64]	; 0x40
   14fa0:	b	14f2c <__assert_fail@plt+0x3b5c>
   14fa4:	ldrd	r2, [r8, #-56]	; 0xffffffc8
   14fa8:	sub	r7, r9, #4
   14fac:	sub	fp, r8, #112	; 0x70
   14fb0:	mov	ip, #14
   14fb4:	mvn	r6, #92	; 0x5c
   14fb8:	ldrd	r0, [r8, #8]
   14fbc:	ldr	lr, [sp, #32]
   14fc0:	strd	r2, [lr, #56]	; 0x38
   14fc4:	strd	r0, [lr, #64]	; 0x40
   14fc8:	b	1411c <__assert_fail@plt+0x2d4c>
   14fcc:	ldrdeq	r1, [r2], -r4
   14fd0:	andeq	r1, r2, r0, lsl r2
   14fd4:	andeq	r1, r2, ip, lsr r3
   14fd8:	andeq	r1, r2, ip, ror #6
   14fdc:	ldrd	r0, [r8, #-112]	; 0xffffff90
   14fe0:	mov	ip, #0
   14fe4:	ldr	lr, [sp, #32]
   14fe8:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   14fec:	strd	r0, [lr, #56]	; 0x38
   14ff0:	ldr	r0, [sp, #32]
   14ff4:	rsbs	r2, r2, #0
   14ff8:	rscs	r3, r3, #0
   14ffc:	movvs	ip, #1
   15000:	subs	r1, ip, #0
   15004:	strd	r2, [r0, #64]	; 0x40
   15008:	bne	13b3c <__assert_fail@plt+0x276c>
   1500c:	ldrd	r2, [r8, #8]
   15010:	rsbs	r2, r2, #0
   15014:	rscs	r3, r3, #0
   15018:	movvs	r1, #1
   1501c:	cmp	r1, #0
   15020:	ldr	r1, [sp, #32]
   15024:	strd	r2, [r1, #40]	; 0x28
   15028:	bne	13b3c <__assert_fail@plt+0x276c>
   1502c:	ldr	r3, [r8, #16]
   15030:	sub	r7, r9, #6
   15034:	sub	fp, r8, #168	; 0xa8
   15038:	mov	ip, #14
   1503c:	mvn	r6, #92	; 0x5c
   15040:	str	r3, [r1, #48]	; 0x30
   15044:	b	1411c <__assert_fail@plt+0x2d4c>
   15048:	ldrd	r0, [r8, #-104]	; 0xffffff98
   1504c:	mov	ip, #0
   15050:	ldr	lr, [sp, #32]
   15054:	ldrd	r6, [r8, #-56]	; 0xffffffc8
   15058:	ldrd	r2, [r8, #8]
   1505c:	strd	r0, [lr, #64]	; 0x40
   15060:	ldr	r1, [sp, #32]
   15064:	rsbs	r2, r2, #0
   15068:	strd	r6, [lr, #56]	; 0x38
   1506c:	rscs	r3, r3, #0
   15070:	movvs	ip, #1
   15074:	cmp	ip, #0
   15078:	strd	r2, [r1, #40]	; 0x28
   1507c:	beq	1502c <__assert_fail@plt+0x3c5c>
   15080:	b	13b3c <__assert_fail@plt+0x276c>
   15084:	ldr	r6, [r8, #-208]	; 0xffffff30
   15088:	ldr	r3, [sp, #32]
   1508c:	cmp	r6, #3
   15090:	ldrb	r3, [r3, #181]	; 0xb5
   15094:	ble	15e0c <__assert_fail@plt+0x4a3c>
   15098:	cmp	r3, #0
   1509c:	bne	16058 <__assert_fail@plt+0x4c88>
   150a0:	ldrd	r2, [r8, #-224]	; 0xffffff20
   150a4:	sub	ip, r8, #224	; 0xe0
   150a8:	sub	r7, r9, #10
   150ac:	sub	fp, r8, #280	; 0x118
   150b0:	ldr	r6, [sp, #32]
   150b4:	ldrd	r0, [r8, #-104]	; 0xffffff98
   150b8:	strd	r2, [r6, #32]
   150bc:	add	lr, r6, #32
   150c0:	ldrd	r2, [r8, #8]
   150c4:	ldrd	r8, [r8, #-216]	; 0xffffff28
   150c8:	strd	r8, [r6, #40]	; 0x28
   150cc:	mvn	r6, #92	; 0x5c
   150d0:	ldrd	r8, [ip, #16]
   150d4:	mov	ip, #14
   150d8:	strd	r8, [lr, #16]
   150dc:	ldr	lr, [sp, #32]
   150e0:	strd	r0, [lr, #56]	; 0x38
   150e4:	strd	r2, [lr, #64]	; 0x40
   150e8:	b	1411c <__assert_fail@plt+0x2d4c>
   150ec:	sub	r7, r9, #6
   150f0:	sub	fp, r8, #168	; 0xa8
   150f4:	ldrd	r2, [r8, #-104]	; 0xffffff98
   150f8:	b	14fb0 <__assert_fail@plt+0x3be0>
   150fc:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   15100:	sub	r1, r8, #56	; 0x38
   15104:	ldr	fp, [sp, #32]
   15108:	strd	r2, [sp]
   1510c:	ldrd	r2, [r8, #-40]	; 0xffffffd8
   15110:	mov	r0, fp
   15114:	strd	r2, [sp, #8]
   15118:	ldm	r1, {r2, r3}
   1511c:	bl	12980 <__assert_fail@plt+0x15b0>
   15120:	ldrd	r6, [r8, #40]	; 0x28
   15124:	ldr	r1, [r8, #48]	; 0x30
   15128:	ldr	r0, [fp, #144]	; 0x90
   1512c:	ldrd	r2, [fp, #136]	; 0x88
   15130:	adds	r1, r0, r1
   15134:	movvs	ip, #1
   15138:	movvc	ip, #0
   1513c:	str	r1, [fp, #144]	; 0x90
   15140:	ldrd	r0, [fp, #128]	; 0x80
   15144:	strd	r0, [sp, #120]	; 0x78
   15148:	adds	r0, r2, r6
   1514c:	adcs	r1, r3, r7
   15150:	ldrd	r6, [r8, #24]
   15154:	movvs	r3, #1
   15158:	movvc	r3, #0
   1515c:	strd	r0, [fp, #136]	; 0x88
   15160:	orr	ip, ip, r3
   15164:	ldrd	r0, [fp, #120]	; 0x78
   15168:	strd	r6, [sp, #112]	; 0x70
   1516c:	ldrd	r6, [r8, #32]
   15170:	strd	r0, [sp, #128]	; 0x80
   15174:	ldrd	r0, [sp, #120]	; 0x78
   15178:	adds	r2, r0, r6
   1517c:	adcs	r3, r1, r7
   15180:	ldrd	r6, [sp, #112]	; 0x70
   15184:	movvs	lr, #1
   15188:	movvc	lr, #0
   1518c:	strd	r2, [fp, #128]	; 0x80
   15190:	orr	ip, ip, lr
   15194:	ldrd	r2, [fp, #112]	; 0x70
   15198:	ldrd	r0, [sp, #128]	; 0x80
   1519c:	strd	r2, [sp, #136]	; 0x88
   151a0:	adds	r2, r0, r6
   151a4:	adcs	r3, r1, r7
   151a8:	ldrd	r6, [r8, #8]
   151ac:	movvs	r1, #1
   151b0:	movvc	r1, #0
   151b4:	orr	ip, ip, r1
   151b8:	ldrd	r0, [fp, #104]	; 0x68
   151bc:	strd	r2, [fp, #120]	; 0x78
   151c0:	strd	r6, [sp, #112]	; 0x70
   151c4:	ldrd	r6, [sp, #136]	; 0x88
   151c8:	strd	r0, [sp, #120]	; 0x78
   151cc:	ldrd	r0, [r8, #16]
   151d0:	adds	r2, r6, r0
   151d4:	adcs	r3, r7, r1
   151d8:	ldrd	r6, [fp, #96]	; 0x60
   151dc:	movvs	lr, #1
   151e0:	movvc	lr, #0
   151e4:	ldrd	r0, [sp, #120]	; 0x78
   151e8:	orr	ip, ip, lr
   151ec:	strd	r2, [fp, #112]	; 0x70
   151f0:	strd	r6, [sp, #128]	; 0x80
   151f4:	ldrd	r6, [sp, #112]	; 0x70
   151f8:	adds	r2, r0, r6
   151fc:	adcs	r3, r1, r7
   15200:	movvs	lr, #1
   15204:	movvc	lr, #0
   15208:	strd	r2, [fp, #104]	; 0x68
   1520c:	ldrd	r6, [sp, #128]	; 0x80
   15210:	ldrd	r0, [r8]
   15214:	adds	r2, r6, r0
   15218:	adcs	r3, r7, r1
   1521c:	mov	r1, fp
   15220:	orrvc	ip, ip, lr
   15224:	movvs	ip, #1
   15228:	cmp	ip, #0
   1522c:	strd	r2, [fp, #96]	; 0x60
   15230:	bne	13b3c <__assert_fail@plt+0x276c>
   15234:	mov	r3, #1
   15238:	sub	fp, r8, #112	; 0x70
   1523c:	sub	r7, r9, #4
   15240:	mov	ip, #24
   15244:	mvn	r6, #92	; 0x5c
   15248:	strb	r3, [r1, #153]	; 0x99
   1524c:	b	1411c <__assert_fail@plt+0x2d4c>
   15250:	ldrd	r2, [r8, #8]
   15254:	sub	r7, r9, #2
   15258:	sub	fp, r8, #56	; 0x38
   1525c:	mvn	r6, #92	; 0x5c
   15260:	ldr	r0, [sp, #32]
   15264:	strd	r2, [sp]
   15268:	ldrd	r2, [r8, #16]
   1526c:	strd	r2, [sp, #8]
   15270:	ldm	r8, {r2, r3}
   15274:	bl	12980 <__assert_fail@plt+0x15b0>
   15278:	mov	ip, #23
   1527c:	b	1411c <__assert_fail@plt+0x2d4c>
   15280:	ldr	r3, [r8, #8]
   15284:	mov	r1, #0
   15288:	mvn	r0, #0
   1528c:	ldr	r2, [r8, #12]
   15290:	adds	ip, r3, #-2147483648	; 0x80000000
   15294:	adc	r2, r2, #0
   15298:	str	ip, [sp, #216]	; 0xd8
   1529c:	str	r2, [sp, #220]	; 0xdc
   152a0:	ldrd	r6, [sp, #216]	; 0xd8
   152a4:	cmp	r7, r1
   152a8:	cmpeq	r6, r0
   152ac:	bhi	13b3c <__assert_fail@plt+0x276c>
   152b0:	mov	r2, #0
   152b4:	sub	fp, r8, #56	; 0x38
   152b8:	str	r3, [sp, #360]	; 0x168
   152bc:	sub	r7, r9, #2
   152c0:	mov	ip, #22
   152c4:	mvn	r6, #91	; 0x5b
   152c8:	str	r2, [sp, #364]	; 0x16c
   152cc:	b	1411c <__assert_fail@plt+0x2d4c>
   152d0:	mov	r6, #0
   152d4:	mov	r7, #0
   152d8:	mov	r2, #56	; 0x38
   152dc:	mov	r1, #0
   152e0:	strd	r6, [sp, #24]
   152e4:	mov	r0, r4
   152e8:	sub	fp, r8, #112	; 0x70
   152ec:	ldr	r3, [sp, #24]
   152f0:	sub	r7, r9, #4
   152f4:	mov	r6, #60	; 0x3c
   152f8:	str	r3, [sp, #64]	; 0x40
   152fc:	bl	112c8 <memset@plt>
   15300:	ldr	r1, [r8, #-48]	; 0xffffffd0
   15304:	mov	ip, #18
   15308:	ldrd	r2, [sp, #24]
   1530c:	str	r1, [sp, #60]	; 0x3c
   15310:	mov	r1, r3
   15314:	str	r3, [sp, #48]	; 0x30
   15318:	str	r2, [sp, #44]	; 0x2c
   1531c:	str	r3, [sp, #68]	; 0x44
   15320:	ldr	r3, [r8, #-44]	; 0xffffffd4
   15324:	str	r3, [sp, #36]	; 0x24
   15328:	mov	r3, #0
   1532c:	str	r2, [sp, #52]	; 0x34
   15330:	str	r3, [sp, #40]	; 0x28
   15334:	str	r1, [sp, #56]	; 0x38
   15338:	b	1411c <__assert_fail@plt+0x2d4c>
   1533c:	mov	r6, #0
   15340:	mov	r7, #0
   15344:	mov	r2, #56	; 0x38
   15348:	mov	r1, #0
   1534c:	strd	r6, [sp, #24]
   15350:	mov	r0, r4
   15354:	sub	fp, r8, #112	; 0x70
   15358:	ldr	r3, [sp, #24]
   1535c:	sub	r7, r9, #4
   15360:	mov	r6, #60	; 0x3c
   15364:	str	r3, [sp, #60]	; 0x3c
   15368:	bl	112c8 <memset@plt>
   1536c:	ldr	r1, [r8, #-48]	; 0xffffffd0
   15370:	mov	ip, #18
   15374:	ldrd	r2, [sp, #24]
   15378:	str	r3, [sp, #36]	; 0x24
   1537c:	str	r1, [sp, #64]	; 0x40
   15380:	mov	r1, r3
   15384:	str	r3, [sp, #48]	; 0x30
   15388:	ldr	r3, [r8, #-44]	; 0xffffffd4
   1538c:	str	r2, [sp, #44]	; 0x2c
   15390:	str	r2, [sp, #52]	; 0x34
   15394:	str	r1, [sp, #56]	; 0x38
   15398:	str	r3, [sp, #68]	; 0x44
   1539c:	mov	r3, #0
   153a0:	str	r3, [sp, #40]	; 0x28
   153a4:	b	1411c <__assert_fail@plt+0x2d4c>
   153a8:	mov	r2, #56	; 0x38
   153ac:	mov	r1, #0
   153b0:	mov	r0, r4
   153b4:	mov	fp, #0
   153b8:	bl	112c8 <memset@plt>
   153bc:	ldr	r0, [r8, #-48]	; 0xffffffd0
   153c0:	ldr	ip, [r8, #-44]	; 0xffffffd4
   153c4:	ldrd	r2, [r8]
   153c8:	cmp	ip, r0, asr #31
   153cc:	asr	r1, r2, #31
   153d0:	bne	160f4 <__assert_fail@plt+0x4d24>
   153d4:	cmp	r1, r3
   153d8:	bne	16080 <__assert_fail@plt+0x4cb0>
   153dc:	smull	r2, r3, r0, r2
   153e0:	strd	r2, [sp, #104]	; 0x68
   153e4:	ldrd	r0, [sp, #104]	; 0x68
   153e8:	subs	r3, fp, #0
   153ec:	str	r0, [sp, #52]	; 0x34
   153f0:	str	r1, [sp, #56]	; 0x38
   153f4:	bne	13b3c <__assert_fail@plt+0x276c>
   153f8:	mov	r0, #0
   153fc:	mov	r1, #0
   15400:	sub	fp, r8, #112	; 0x70
   15404:	sub	r7, r9, #4
   15408:	mov	ip, #18
   1540c:	mov	r6, #60	; 0x3c
   15410:	strd	r0, [sp, #24]
   15414:	str	r1, [sp, #36]	; 0x24
   15418:	str	r3, [sp, #40]	; 0x28
   1541c:	str	r0, [sp, #44]	; 0x2c
   15420:	str	r1, [sp, #48]	; 0x30
   15424:	str	r0, [sp, #60]	; 0x3c
   15428:	str	r0, [sp, #64]	; 0x40
   1542c:	str	r1, [sp, #68]	; 0x44
   15430:	b	1411c <__assert_fail@plt+0x2d4c>
   15434:	mov	r6, #0
   15438:	mov	r7, #0
   1543c:	mov	r2, #56	; 0x38
   15440:	mov	r1, #0
   15444:	strd	r6, [sp, #24]
   15448:	mov	r0, r4
   1544c:	sub	fp, r8, #112	; 0x70
   15450:	ldr	r3, [sp, #24]
   15454:	sub	r7, r9, #4
   15458:	mov	r6, #60	; 0x3c
   1545c:	str	r3, [sp, #60]	; 0x3c
   15460:	bl	112c8 <memset@plt>
   15464:	ldr	r1, [r8, #-48]	; 0xffffffd0
   15468:	mov	ip, #18
   1546c:	ldrd	r2, [sp, #24]
   15470:	str	r3, [sp, #36]	; 0x24
   15474:	str	r1, [sp, #44]	; 0x2c
   15478:	mov	r1, r3
   1547c:	str	r2, [sp, #52]	; 0x34
   15480:	str	r3, [sp, #56]	; 0x38
   15484:	ldr	r3, [r8, #-44]	; 0xffffffd4
   15488:	str	r3, [sp, #48]	; 0x30
   1548c:	mov	r3, #0
   15490:	str	r2, [sp, #64]	; 0x40
   15494:	str	r3, [sp, #40]	; 0x28
   15498:	str	r1, [sp, #68]	; 0x44
   1549c:	b	1411c <__assert_fail@plt+0x2d4c>
   154a0:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   154a4:	mov	r6, #0
   154a8:	mov	r7, #0
   154ac:	mov	r1, #0
   154b0:	sub	fp, r8, #112	; 0x70
   154b4:	mov	r8, #0
   154b8:	strd	r6, [sp, #24]
   154bc:	sub	r7, r9, #4
   154c0:	mov	r9, #0
   154c4:	mov	r6, #60	; 0x3c
   154c8:	mov	ip, #18
   154cc:	strd	r2, [r5, #-8]
   154d0:	str	r9, [sp, #36]	; 0x24
   154d4:	str	r1, [sp, #40]	; 0x28
   154d8:	str	r8, [sp, #44]	; 0x2c
   154dc:	str	r9, [sp, #48]	; 0x30
   154e0:	str	r8, [sp, #52]	; 0x34
   154e4:	str	r9, [sp, #56]	; 0x38
   154e8:	str	r8, [sp, #60]	; 0x3c
   154ec:	str	r8, [sp, #64]	; 0x40
   154f0:	str	r9, [sp, #68]	; 0x44
   154f4:	str	r1, [sp, #412]	; 0x19c
   154f8:	b	1411c <__assert_fail@plt+0x2d4c>
   154fc:	ldr	r6, [sp, #32]
   15500:	sub	r3, r8, #272	; 0x110
   15504:	mov	lr, #2
   15508:	sub	r7, r9, #12
   1550c:	sub	fp, r8, #336	; 0x150
   15510:	ldrd	r2, [r3]
   15514:	ldrd	r0, [r8, #-160]	; 0xffffff60
   15518:	str	lr, [r6, #28]
   1551c:	ldr	ip, [r8, #-56]	; 0xffffffc8
   15520:	strd	r2, [r6, #72]	; 0x48
   15524:	mov	r3, r6
   15528:	ldr	lr, [r8, #-52]	; 0xffffffcc
   1552c:	str	ip, [r6, #88]	; 0x58
   15530:	mov	ip, #8
   15534:	mov	r6, #20
   15538:	strd	r0, [r3, #80]	; 0x50
   1553c:	str	lr, [r3, #92]	; 0x5c
   15540:	b	1411c <__assert_fail@plt+0x2d4c>
   15544:	ldr	lr, [sp, #32]
   15548:	mov	r0, #0
   1554c:	mov	r1, #0
   15550:	mov	ip, #2
   15554:	sub	r7, r9, #8
   15558:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   1555c:	sub	fp, r8, #224	; 0xe0
   15560:	mov	r6, #20
   15564:	str	ip, [lr, #28]
   15568:	mov	ip, #8
   1556c:	strd	r0, [lr, #88]	; 0x58
   15570:	ldrd	r0, [r8, #-160]	; 0xffffff60
   15574:	strd	r0, [lr, #72]	; 0x48
   15578:	strd	r2, [lr, #80]	; 0x50
   1557c:	b	1411c <__assert_fail@plt+0x2d4c>
   15580:	ldrd	r6, [r8, #-48]	; 0xffffffd0
   15584:	ldr	r3, [r8, #-40]	; 0xffffffd8
   15588:	cmp	r3, #2
   1558c:	ldrd	r2, [r8]
   15590:	strd	r2, [sp, #112]	; 0x70
   15594:	bgt	15d9c <__assert_fail@plt+0x49cc>
   15598:	cmp	r2, #0
   1559c:	sbcs	r3, r3, #0
   155a0:	blt	1604c <__assert_fail@plt+0x4c7c>
   155a4:	cmp	r7, r6, asr #31
   155a8:	mov	lr, #0
   155ac:	bne	162c0 <__assert_fail@plt+0x4ef0>
   155b0:	mov	r3, #60	; 0x3c
   155b4:	smull	r6, r7, r6, r3
   155b8:	mov	r2, r6
   155bc:	mov	r3, r7
   155c0:	ldrb	ip, [r8, #-56]	; 0xffffffc8
   155c4:	mov	r1, r3
   155c8:	ldrd	r6, [sp, #112]	; 0x70
   155cc:	cmp	ip, #0
   155d0:	beq	16030 <__assert_fail@plt+0x4c60>
   155d4:	subs	r2, r2, r6
   155d8:	mov	r1, #0
   155dc:	sbcs	r3, r3, r7
   155e0:	mov	r0, r2
   155e4:	movvs	r1, #1
   155e8:	mov	r7, r3
   155ec:	orrs	r3, lr, r1
   155f0:	bne	13b3c <__assert_fail@plt+0x276c>
   155f4:	adds	r3, r0, #1440	; 0x5a0
   155f8:	str	r3, [sp, #200]	; 0xc8
   155fc:	adc	r3, r7, #0
   15600:	str	r3, [sp, #204]	; 0xcc
   15604:	ldrd	r2, [sp, #200]	; 0xc8
   15608:	cmp	r3, #0
   1560c:	cmpeq	r2, #2880	; 0xb40
   15610:	bhi	13b3c <__assert_fail@plt+0x276c>
   15614:	rsb	r2, r0, r0, lsl #4
   15618:	ldrd	r6, [r8, #-112]	; 0xffffff90
   1561c:	lsl	r2, r2, #2
   15620:	asr	r3, r2, #31
   15624:	adds	r0, r2, r6
   15628:	adcs	r1, r3, r7
   1562c:	asr	r3, r0, #31
   15630:	movvs	ip, #1
   15634:	movvc	ip, #0
   15638:	cmp	r1, r3
   1563c:	ldr	r3, [sp, #32]
   15640:	cmpeq	r0, r0
   15644:	movne	ip, #1
   15648:	cmp	ip, #0
   1564c:	str	r0, [r3, #24]
   15650:	bne	13b3c <__assert_fail@plt+0x276c>
   15654:	sub	fp, r8, #168	; 0xa8
   15658:	sub	r7, r9, #6
   1565c:	mov	ip, #12
   15660:	mvn	r6, #92	; 0x5c
   15664:	b	1411c <__assert_fail@plt+0x2d4c>
   15668:	ldr	fp, [sp, #32]
   1566c:	movw	r3, #40336	; 0x9d90
   15670:	movt	r3, #65535	; 0xffff
   15674:	ldrd	r6, [r8, #40]	; 0x28
   15678:	ldr	r1, [r8, #48]	; 0x30
   1567c:	str	r3, [fp, #24]
   15680:	ldrd	r2, [fp, #136]	; 0x88
   15684:	ldr	r0, [fp, #144]	; 0x90
   15688:	adds	r1, r0, r1
   1568c:	movvs	ip, #1
   15690:	movvc	ip, #0
   15694:	str	r1, [fp, #144]	; 0x90
   15698:	ldrd	r0, [fp, #128]	; 0x80
   1569c:	strd	r0, [sp, #120]	; 0x78
   156a0:	adds	r0, r2, r6
   156a4:	adcs	r1, r3, r7
   156a8:	ldrd	r6, [r8, #24]
   156ac:	movvs	r3, #1
   156b0:	movvc	r3, #0
   156b4:	strd	r0, [fp, #136]	; 0x88
   156b8:	orr	ip, ip, r3
   156bc:	ldrd	r0, [fp, #120]	; 0x78
   156c0:	strd	r6, [sp, #112]	; 0x70
   156c4:	ldrd	r6, [r8, #32]
   156c8:	strd	r0, [sp, #128]	; 0x80
   156cc:	ldrd	r0, [sp, #120]	; 0x78
   156d0:	adds	r2, r0, r6
   156d4:	adcs	r3, r1, r7
   156d8:	ldrd	r6, [sp, #112]	; 0x70
   156dc:	movvs	lr, #1
   156e0:	movvc	lr, #0
   156e4:	strd	r2, [fp, #128]	; 0x80
   156e8:	orr	ip, ip, lr
   156ec:	ldrd	r2, [fp, #112]	; 0x70
   156f0:	ldrd	r0, [sp, #128]	; 0x80
   156f4:	strd	r2, [sp, #136]	; 0x88
   156f8:	adds	r2, r0, r6
   156fc:	adcs	r3, r1, r7
   15700:	ldrd	r6, [r8, #8]
   15704:	movvs	r1, #1
   15708:	movvc	r1, #0
   1570c:	orr	ip, ip, r1
   15710:	ldrd	r0, [fp, #104]	; 0x68
   15714:	strd	r2, [fp, #120]	; 0x78
   15718:	strd	r6, [sp, #112]	; 0x70
   1571c:	ldrd	r6, [sp, #136]	; 0x88
   15720:	strd	r0, [sp, #120]	; 0x78
   15724:	ldrd	r0, [r8, #16]
   15728:	adds	r2, r6, r0
   1572c:	adcs	r3, r7, r1
   15730:	ldrd	r6, [fp, #96]	; 0x60
   15734:	movvs	lr, #1
   15738:	movvc	lr, #0
   1573c:	strd	r2, [fp, #112]	; 0x70
   15740:	orr	ip, ip, lr
   15744:	ldrd	r0, [sp, #120]	; 0x78
   15748:	strd	r6, [sp, #128]	; 0x80
   1574c:	ldrd	r6, [sp, #112]	; 0x70
   15750:	adds	r2, r0, r6
   15754:	adcs	r3, r1, r7
   15758:	ldrd	r0, [r8]
   1575c:	movvs	lr, #1
   15760:	movvc	lr, #0
   15764:	ldrd	r6, [sp, #128]	; 0x80
   15768:	strd	r2, [fp, #104]	; 0x68
   1576c:	adds	r2, r6, r0
   15770:	adcs	r3, r7, r1
   15774:	orrvc	r0, ip, lr
   15778:	movvs	r0, #1
   1577c:	cmp	r0, #0
   15780:	strd	r2, [fp, #96]	; 0x60
   15784:	bne	13b3c <__assert_fail@plt+0x276c>
   15788:	mov	r3, #1
   1578c:	movw	r1, #7572	; 0x1d94
   15790:	movt	r1, #2
   15794:	mov	r2, #5
   15798:	strb	r3, [fp, #153]	; 0x99
   1579c:	sub	r7, r9, #4
   157a0:	bl	11130 <dcgettext@plt>
   157a4:	ldrb	r3, [fp, #181]	; 0xb5
   157a8:	mov	r1, fp
   157ac:	sub	fp, r8, #112	; 0x70
   157b0:	cmp	r3, #0
   157b4:	moveq	ip, #12
   157b8:	mvneq	r6, #92	; 0x5c
   157bc:	beq	1411c <__assert_fail@plt+0x2d4c>
   157c0:	bl	13338 <__assert_fail@plt+0x1f68>
   157c4:	mvn	r6, #92	; 0x5c
   157c8:	mov	ip, #12
   157cc:	b	1411c <__assert_fail@plt+0x2d4c>
   157d0:	ldr	r2, [sp, #32]
   157d4:	movw	r3, #40336	; 0x9d90
   157d8:	movt	r3, #65535	; 0xffff
   157dc:	sub	fp, r8, #56	; 0x38
   157e0:	sub	r7, r9, #2
   157e4:	mov	ip, #12
   157e8:	mvn	r6, #92	; 0x5c
   157ec:	str	r3, [r2, #24]
   157f0:	b	1411c <__assert_fail@plt+0x2d4c>
   157f4:	mov	fp, r8
   157f8:	ldr	r2, [sp, #32]
   157fc:	sub	r7, r9, #2
   15800:	mov	ip, #12
   15804:	mvn	r6, #92	; 0x5c
   15808:	ldr	r3, [fp], #-56	; 0xffffffc8
   1580c:	str	r3, [r2, #24]
   15810:	b	1411c <__assert_fail@plt+0x2d4c>
   15814:	ldr	r1, [sp, #32]
   15818:	mov	r2, #1
   1581c:	sub	fp, r8, #112	; 0x70
   15820:	sub	r7, r9, #4
   15824:	mov	ip, #11
   15828:	mvn	r6, #92	; 0x5c
   1582c:	ldr	r3, [r1, #168]	; 0xa8
   15830:	str	r2, [r1, #20]
   15834:	add	r3, r3, r2
   15838:	str	r3, [r1, #168]	; 0xa8
   1583c:	b	1411c <__assert_fail@plt+0x2d4c>
   15840:	mov	r1, #0
   15844:	mov	r2, #56	; 0x38
   15848:	mov	r6, r1
   1584c:	mov	r0, r4
   15850:	str	r1, [sp, #36]	; 0x24
   15854:	sub	fp, r8, #56	; 0x38
   15858:	sub	r7, r9, #2
   1585c:	str	r1, [sp, #60]	; 0x3c
   15860:	str	r1, [sp, #64]	; 0x40
   15864:	bl	112c8 <memset@plt>
   15868:	mov	r3, r6
   1586c:	mov	r2, #1
   15870:	mov	ip, #17
   15874:	mvn	r6, #92	; 0x5c
   15878:	str	r3, [sp, #44]	; 0x2c
   1587c:	str	r3, [sp, #52]	; 0x34
   15880:	ldr	r3, [sp, #36]	; 0x24
   15884:	str	r3, [sp, #48]	; 0x30
   15888:	str	r3, [sp, #56]	; 0x38
   1588c:	str	r3, [sp, #68]	; 0x44
   15890:	mov	r3, #0
   15894:	str	r3, [sp, #40]	; 0x28
   15898:	mov	r3, #0
   1589c:	strd	r2, [sp, #24]
   158a0:	b	1411c <__assert_fail@plt+0x2d4c>
   158a4:	mvn	r2, #0
   158a8:	mvn	r3, #0
   158ac:	mov	r7, r9
   158b0:	mov	fp, r8
   158b4:	mov	ip, #25
   158b8:	mov	r6, #43	; 0x2b
   158bc:	strd	r2, [r5, #-8]
   158c0:	b	1411c <__assert_fail@plt+0x2d4c>
   158c4:	ldrd	r0, [r8, #-56]	; 0xffffffc8
   158c8:	ldr	r3, [r8]
   158cc:	ldrd	r6, [r8, #-16]
   158d0:	strd	r0, [sp, #112]	; 0x70
   158d4:	ldrd	r0, [r8, #-48]	; 0xffffffd0
   158d8:	cmp	r3, #0
   158dc:	ldrd	r2, [r8, #-40]	; 0xffffffd8
   158e0:	strd	r0, [sp, #120]	; 0x78
   158e4:	strd	r2, [sp, #128]	; 0x80
   158e8:	ldrd	r2, [r8, #-32]	; 0xffffffe0
   158ec:	strd	r2, [sp, #136]	; 0x88
   158f0:	ldrd	r2, [r8, #-24]	; 0xffffffe8
   158f4:	strd	r2, [sp, #144]	; 0x90
   158f8:	ldr	r2, [sp, #32]
   158fc:	ldr	r3, [r8, #-8]
   15900:	ldrd	r0, [r2, #96]	; 0x60
   15904:	strd	r0, [sp, #184]	; 0xb8
   15908:	ldrd	r0, [r2, #104]	; 0x68
   1590c:	strd	r0, [sp, #176]	; 0xb0
   15910:	ldrd	r0, [r2, #112]	; 0x70
   15914:	strd	r0, [sp, #168]	; 0xa8
   15918:	ldrd	r0, [r2, #120]	; 0x78
   1591c:	strd	r0, [sp, #160]	; 0xa0
   15920:	ldrd	r0, [r2, #128]	; 0x80
   15924:	strd	r0, [sp, #152]	; 0x98
   15928:	ldrd	r0, [r2, #136]	; 0x88
   1592c:	ldr	r2, [r2, #144]	; 0x90
   15930:	blt	15e48 <__assert_fail@plt+0x4a78>
   15934:	adds	fp, r2, r3
   15938:	movvs	lr, #1
   1593c:	movvc	lr, #0
   15940:	ldr	ip, [sp, #32]
   15944:	adds	r2, r0, r6
   15948:	adcs	r3, r1, r7
   1594c:	ldrd	r0, [sp, #144]	; 0x90
   15950:	strd	r2, [sp, #224]	; 0xe0
   15954:	movvs	r3, #1
   15958:	movvc	r3, #0
   1595c:	str	fp, [ip, #144]	; 0x90
   15960:	str	r3, [sp, #236]	; 0xec
   15964:	ldrd	r2, [sp, #152]	; 0x98
   15968:	adds	r6, r2, r0
   1596c:	adcs	r7, r3, r1
   15970:	ldrd	r0, [sp, #224]	; 0xe0
   15974:	movvs	fp, #1
   15978:	movvc	fp, #0
   1597c:	ldr	r3, [sp, #236]	; 0xec
   15980:	strd	r6, [sp, #144]	; 0x90
   15984:	ldrd	r6, [sp, #160]	; 0xa0
   15988:	strd	r0, [ip, #136]	; 0x88
   1598c:	orr	lr, lr, r3
   15990:	ldrd	r2, [sp, #136]	; 0x88
   15994:	orr	lr, lr, fp
   15998:	adds	r0, r6, r2
   1599c:	adcs	r1, r7, r3
   159a0:	ldrd	r2, [sp, #144]	; 0x90
   159a4:	movvs	fp, #1
   159a8:	movvc	fp, #0
   159ac:	strd	r0, [sp, #136]	; 0x88
   159b0:	orr	lr, lr, fp
   159b4:	ldrd	r0, [sp, #168]	; 0xa8
   159b8:	strd	r2, [ip, #128]	; 0x80
   159bc:	ldrd	r2, [sp, #128]	; 0x80
   159c0:	adds	r6, r0, r2
   159c4:	adcs	r7, r1, r3
   159c8:	ldrd	r2, [sp, #120]	; 0x78
   159cc:	movvs	fp, #1
   159d0:	movvc	fp, #0
   159d4:	strd	r6, [sp, #128]	; 0x80
   159d8:	orr	lr, lr, fp
   159dc:	ldrd	r0, [sp, #136]	; 0x88
   159e0:	ldrd	r6, [sp, #176]	; 0xb0
   159e4:	strd	r0, [ip, #120]	; 0x78
   159e8:	adds	r0, r6, r2
   159ec:	adcs	r1, r7, r3
   159f0:	ldrd	r2, [sp, #128]	; 0x80
   159f4:	movvs	fp, #1
   159f8:	movvc	fp, #0
   159fc:	ldrd	r6, [sp, #184]	; 0xb8
   15a00:	strd	r0, [sp, #120]	; 0x78
   15a04:	strd	r2, [ip, #112]	; 0x70
   15a08:	ldrd	r2, [sp, #112]	; 0x70
   15a0c:	adds	r0, r6, r2
   15a10:	adcs	r1, r7, r3
   15a14:	ldrd	r6, [sp, #120]	; 0x78
   15a18:	orrvc	r3, lr, fp
   15a1c:	movvs	r3, #1
   15a20:	strd	r0, [ip, #96]	; 0x60
   15a24:	strd	r6, [ip, #104]	; 0x68
   15a28:	cmp	r3, #0
   15a2c:	bne	13b3c <__assert_fail@plt+0x276c>
   15a30:	ldr	r2, [sp, #32]
   15a34:	mov	r3, #1
   15a38:	sub	fp, r8, #112	; 0x70
   15a3c:	sub	r7, r9, #4
   15a40:	mov	ip, #16
   15a44:	mvn	r6, #92	; 0x5c
   15a48:	strb	r3, [r2, #153]	; 0x99
   15a4c:	b	1411c <__assert_fail@plt+0x2d4c>
   15a50:	mov	r1, #0
   15a54:	mov	r2, #56	; 0x38
   15a58:	mov	r6, r1
   15a5c:	mov	r0, r4
   15a60:	mov	fp, r1
   15a64:	sub	r7, r9, #4
   15a68:	str	r1, [sp, #36]	; 0x24
   15a6c:	str	r1, [sp, #60]	; 0x3c
   15a70:	bl	112c8 <memset@plt>
   15a74:	mov	r1, r6
   15a78:	str	r6, [sp, #52]	; 0x34
   15a7c:	str	r6, [sp, #64]	; 0x40
   15a80:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   15a84:	b	149b4 <__assert_fail@plt+0x35e4>
   15a88:	ldr	r3, [r8, #8]
   15a8c:	mov	r1, #0
   15a90:	mvn	r0, #0
   15a94:	ldr	r2, [r8, #12]
   15a98:	adds	ip, r3, #-2147483648	; 0x80000000
   15a9c:	adc	r2, r2, #0
   15aa0:	str	ip, [sp, #208]	; 0xd0
   15aa4:	str	r2, [sp, #212]	; 0xd4
   15aa8:	ldrd	r6, [sp, #208]	; 0xd0
   15aac:	cmp	r7, r1
   15ab0:	cmpeq	r6, r0
   15ab4:	bhi	13b3c <__assert_fail@plt+0x276c>
   15ab8:	mov	r2, #0
   15abc:	sub	fp, r8, #56	; 0x38
   15ac0:	str	r3, [sp, #360]	; 0x168
   15ac4:	sub	r7, r9, #2
   15ac8:	mov	ip, #21
   15acc:	mvn	r6, #92	; 0x5c
   15ad0:	str	r2, [sp, #364]	; 0x16c
   15ad4:	b	1411c <__assert_fail@plt+0x2d4c>
   15ad8:	mov	r2, #56	; 0x38
   15adc:	mov	r1, #0
   15ae0:	mov	r0, r4
   15ae4:	mov	fp, r8
   15ae8:	bl	112c8 <memset@plt>
   15aec:	mov	r0, #0
   15af0:	mov	r1, #0
   15af4:	ldrd	r2, [fp], #-56	; 0xffffffc8
   15af8:	sub	r7, r9, #2
   15afc:	mov	ip, #19
   15b00:	strd	r0, [sp, #24]
   15b04:	str	r1, [sp, #36]	; 0x24
   15b08:	str	r0, [sp, #44]	; 0x2c
   15b0c:	str	r1, [sp, #48]	; 0x30
   15b10:	str	r0, [sp, #60]	; 0x3c
   15b14:	str	r0, [sp, #64]	; 0x40
   15b18:	str	r1, [sp, #68]	; 0x44
   15b1c:	b	14760 <__assert_fail@plt+0x3390>
   15b20:	mov	r1, #0
   15b24:	mov	r2, #56	; 0x38
   15b28:	mov	r0, r4
   15b2c:	mov	fp, r1
   15b30:	mov	r6, r1
   15b34:	str	r1, [sp, #36]	; 0x24
   15b38:	sub	r7, r9, #4
   15b3c:	str	r1, [sp, #60]	; 0x3c
   15b40:	bl	112c8 <memset@plt>
   15b44:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   15b48:	mov	r1, r6
   15b4c:	mov	ip, #18
   15b50:	mov	r6, #60	; 0x3c
   15b54:	strd	r2, [sp, #24]
   15b58:	str	r1, [sp, #40]	; 0x28
   15b5c:	str	fp, [sp, #44]	; 0x2c
   15b60:	str	fp, [sp, #48]	; 0x30
   15b64:	str	fp, [sp, #52]	; 0x34
   15b68:	str	fp, [sp, #56]	; 0x38
   15b6c:	str	fp, [sp, #64]	; 0x40
   15b70:	str	fp, [sp, #68]	; 0x44
   15b74:	sub	fp, r8, #112	; 0x70
   15b78:	b	1411c <__assert_fail@plt+0x2d4c>
   15b7c:	ldrd	r2, [r8, #8]
   15b80:	sub	r7, r9, #4
   15b84:	sub	fp, r8, #112	; 0x70
   15b88:	mov	ip, #25
   15b8c:	mov	r6, #43	; 0x2b
   15b90:	strd	r2, [r5, #-8]
   15b94:	b	1411c <__assert_fail@plt+0x2d4c>
   15b98:	ldrb	r6, [r6, #2376]	; 0x948
   15b9c:	b	13714 <__assert_fail@plt+0x2344>
   15ba0:	mov	r0, r4
   15ba4:	bl	11274 <strlen@plt>
   15ba8:	cmp	r0, #3
   15bac:	str	r0, [sp, #20]
   15bb0:	beq	15c58 <__assert_fail@plt+0x4888>
   15bb4:	cmp	r0, #4
   15bb8:	beq	15c4c <__assert_fail@plt+0x487c>
   15bbc:	movw	r1, #7460	; 0x1d24
   15bc0:	movt	r1, #2
   15bc4:	ldr	r7, [pc, #-3068]	; 14fd0 <__assert_fail@plt+0x3c00>
   15bc8:	b	15bd8 <__assert_fail@plt+0x4808>
   15bcc:	ldr	r1, [r7, #12]!
   15bd0:	cmp	r1, #0
   15bd4:	beq	15cac <__assert_fail@plt+0x48dc>
   15bd8:	mov	r0, r4
   15bdc:	bl	110a0 <strcmp@plt>
   15be0:	cmp	r0, #0
   15be4:	mov	r3, r7
   15be8:	bne	15bcc <__assert_fail@plt+0x47fc>
   15bec:	ldr	r2, [r3, #8]
   15bf0:	ldr	r3, [r3, #4]
   15bf4:	str	r3, [sp, #20]
   15bf8:	asr	r3, r2, #31
   15bfc:	b	14044 <__assert_fail@plt+0x2c74>
   15c00:	ldrb	r3, [r2, #1]
   15c04:	mov	r2, r1
   15c08:	b	13b88 <__assert_fail@plt+0x27b8>
   15c0c:	mov	r0, #2
   15c10:	b	13b40 <__assert_fail@plt+0x2770>
   15c14:	mov	r0, #0
   15c18:	b	13b40 <__assert_fail@plt+0x2770>
   15c1c:	str	r3, [sp, #308]	; 0x134
   15c20:	cmp	r7, #0
   15c24:	movw	r0, #277	; 0x115
   15c28:	ldr	r2, [sp, #20]
   15c2c:	movne	r0, #276	; 0x114
   15c30:	ldr	r3, [sp, #32]
   15c34:	str	r0, [sp, #20]
   15c38:	str	r2, [sp, #304]	; 0x130
   15c3c:	moveq	r2, #22
   15c40:	movne	r2, #21
   15c44:	str	r1, [r3]
   15c48:	b	13d08 <__assert_fail@plt+0x2938>
   15c4c:	ldrb	r3, [sp, #247]	; 0xf7
   15c50:	cmp	r3, #46	; 0x2e
   15c54:	bne	15bbc <__assert_fail@plt+0x47ec>
   15c58:	ldr	r7, [pc, #-3216]	; 14fd0 <__assert_fail@plt+0x3c00>
   15c5c:	movw	r1, #7460	; 0x1d24
   15c60:	movt	r1, #2
   15c64:	str	r6, [sp, #24]
   15c68:	mov	r6, r7
   15c6c:	mov	r7, r5
   15c70:	b	15c80 <__assert_fail@plt+0x48b0>
   15c74:	ldr	r1, [r6, #12]!
   15c78:	cmp	r1, #0
   15c7c:	beq	15ca4 <__assert_fail@plt+0x48d4>
   15c80:	mov	r2, #3
   15c84:	mov	r0, r4
   15c88:	bl	11394 <strncmp@plt>
   15c8c:	cmp	r0, #0
   15c90:	bne	15c74 <__assert_fail@plt+0x48a4>
   15c94:	mov	r3, r6
   15c98:	mov	r5, r7
   15c9c:	ldr	r6, [sp, #24]
   15ca0:	b	15bec <__assert_fail@plt+0x481c>
   15ca4:	ldr	r6, [sp, #24]
   15ca8:	mov	r5, r7
   15cac:	movw	r1, #7468	; 0x1d2c
   15cb0:	movt	r1, #2
   15cb4:	ldr	r3, [pc, #-3304]	; 14fd4 <__assert_fail@plt+0x3c04>
   15cb8:	mov	r7, r3
   15cbc:	str	r3, [sp, #40]	; 0x28
   15cc0:	b	15cd0 <__assert_fail@plt+0x4900>
   15cc4:	ldr	r1, [r7, #12]!
   15cc8:	cmp	r1, #0
   15ccc:	beq	15cf0 <__assert_fail@plt+0x4920>
   15cd0:	mov	r0, r4
   15cd4:	bl	110a0 <strcmp@plt>
   15cd8:	cmp	r0, #0
   15cdc:	bne	15cc4 <__assert_fail@plt+0x48f4>
   15ce0:	b	14034 <__assert_fail@plt+0x2c64>
   15ce4:	mov	r7, #0
   15ce8:	str	r2, [sp, #24]
   15cec:	b	13c98 <__assert_fail@plt+0x28c8>
   15cf0:	ldr	r3, [sp, #32]
   15cf4:	ldr	r1, [r3, #192]	; 0xc0
   15cf8:	cmp	r1, #0
   15cfc:	str	r1, [sp, #44]	; 0x2c
   15d00:	beq	15f8c <__assert_fail@plt+0x4bbc>
   15d04:	add	r7, r3, #192	; 0xc0
   15d08:	b	15d18 <__assert_fail@plt+0x4948>
   15d0c:	ldr	r1, [r7, #12]!
   15d10:	cmp	r1, #0
   15d14:	beq	15f8c <__assert_fail@plt+0x4bbc>
   15d18:	mov	r0, r4
   15d1c:	bl	110a0 <strcmp@plt>
   15d20:	cmp	r0, #0
   15d24:	bne	15d0c <__assert_fail@plt+0x493c>
   15d28:	b	14034 <__assert_fail@plt+0x2c64>
   15d2c:	cmp	r2, #0
   15d30:	sbcs	r3, r3, #0
   15d34:	bge	14430 <__assert_fail@plt+0x3060>
   15d38:	mov	r2, #100	; 0x64
   15d3c:	mov	r3, #0
   15d40:	mov	r0, r6
   15d44:	mov	r1, r7
   15d48:	bl	20354 <__assert_fail@plt+0xef84>
   15d4c:	mov	lr, r0
   15d50:	mov	ip, r1
   15d54:	mov	r0, r6
   15d58:	mov	r1, r7
   15d5c:	mov	r2, #100	; 0x64
   15d60:	mov	r3, #0
   15d64:	mov	r6, lr
   15d68:	mov	r7, ip
   15d6c:	bl	20354 <__assert_fail@plt+0xef84>
   15d70:	lsl	r1, r7, #4
   15d74:	lsl	r0, r6, #4
   15d78:	orr	r1, r1, r6, lsr #28
   15d7c:	subs	r6, r0, r6
   15d80:	sbc	r7, r1, r7
   15d84:	lsl	r1, r6, #2
   15d88:	lsl	r7, r7, #2
   15d8c:	adds	r0, r1, r2
   15d90:	orr	r7, r7, r6, lsr #30
   15d94:	adc	r7, r7, r3
   15d98:	b	14480 <__assert_fail@plt+0x30b0>
   15d9c:	cmp	r2, #0
   15da0:	sbcs	r3, r3, #0
   15da4:	bge	155a4 <__assert_fail@plt+0x41d4>
   15da8:	mov	r2, #100	; 0x64
   15dac:	mov	r3, #0
   15db0:	mov	r0, r6
   15db4:	mov	r1, r7
   15db8:	bl	20354 <__assert_fail@plt+0xef84>
   15dbc:	mov	lr, r0
   15dc0:	mov	ip, r1
   15dc4:	mov	r0, r6
   15dc8:	mov	r1, r7
   15dcc:	mov	r2, #100	; 0x64
   15dd0:	mov	r3, #0
   15dd4:	mov	r6, lr
   15dd8:	mov	r7, ip
   15ddc:	bl	20354 <__assert_fail@plt+0xef84>
   15de0:	lsl	r1, r7, #4
   15de4:	lsl	r0, r6, #4
   15de8:	orr	r1, r1, r6, lsr #28
   15dec:	subs	r6, r0, r6
   15df0:	sbc	r7, r1, r7
   15df4:	lsl	r1, r6, #2
   15df8:	lsl	r7, r7, #2
   15dfc:	adds	r0, r1, r2
   15e00:	orr	r7, r7, r6, lsr #30
   15e04:	adc	r7, r7, r3
   15e08:	b	155f4 <__assert_fail@plt+0x4224>
   15e0c:	cmp	r3, #0
   15e10:	ldrd	r2, [r8, #-216]	; 0xffffff28
   15e14:	strd	r2, [sp, #112]	; 0x70
   15e18:	bne	16234 <__assert_fail@plt+0x4e64>
   15e1c:	ldr	ip, [sp, #32]
   15e20:	sub	r7, r9, #10
   15e24:	sub	fp, r8, #280	; 0x118
   15e28:	ldrd	r0, [sp, #112]	; 0x70
   15e2c:	ldrd	r2, [r8, #-104]	; 0xffffff98
   15e30:	add	lr, ip, #32
   15e34:	strd	r0, [ip, #56]	; 0x38
   15e38:	ldrd	r0, [r8]
   15e3c:	strd	r0, [sp, #112]	; 0x70
   15e40:	ldrd	r0, [r8, #8]
   15e44:	b	14f9c <__assert_fail@plt+0x3bcc>
   15e48:	subs	ip, r2, r3
   15e4c:	mov	fp, #0
   15e50:	movvs	fp, #1
   15e54:	subs	r2, r0, r6
   15e58:	sbcs	r3, r1, r7
   15e5c:	ldrd	r0, [sp, #144]	; 0x90
   15e60:	mov	lr, #0
   15e64:	movvs	lr, #1
   15e68:	strd	r2, [sp, #224]	; 0xe0
   15e6c:	ldr	r3, [sp, #32]
   15e70:	str	ip, [r3, #144]	; 0x90
   15e74:	mov	ip, #0
   15e78:	ldrd	r2, [sp, #152]	; 0x98
   15e7c:	subs	r6, r2, r0
   15e80:	sbcs	r7, r3, r1
   15e84:	ldr	r1, [sp, #32]
   15e88:	movvs	ip, #1
   15e8c:	ldrd	r2, [sp, #224]	; 0xe0
   15e90:	strd	r6, [sp, #144]	; 0x90
   15e94:	ldrd	r6, [sp, #136]	; 0x88
   15e98:	strd	r2, [r1, #136]	; 0x88
   15e9c:	ldrd	r0, [sp, #160]	; 0xa0
   15ea0:	subs	r2, r0, r6
   15ea4:	sbcs	r3, r1, r7
   15ea8:	ldrd	r0, [sp, #144]	; 0x90
   15eac:	strd	r2, [sp, #152]	; 0x98
   15eb0:	mov	r3, #0
   15eb4:	ldrd	r6, [sp, #168]	; 0xa8
   15eb8:	str	r3, [sp, #136]	; 0x88
   15ebc:	ldr	r3, [sp, #32]
   15ec0:	strd	r0, [r3, #128]	; 0x80
   15ec4:	movvs	r3, #1
   15ec8:	ldrd	r0, [sp, #128]	; 0x80
   15ecc:	strvs	r3, [sp, #136]	; 0x88
   15ed0:	subs	r2, r6, r0
   15ed4:	sbcs	r3, r7, r1
   15ed8:	ldr	r1, [sp, #32]
   15edc:	strd	r2, [sp, #144]	; 0x90
   15ee0:	mov	r3, #0
   15ee4:	ldrd	r6, [sp, #176]	; 0xb0
   15ee8:	str	r3, [sp, #128]	; 0x80
   15eec:	ldrd	r2, [sp, #152]	; 0x98
   15ef0:	strd	r2, [r1, #120]	; 0x78
   15ef4:	movvs	r3, #1
   15ef8:	ldrd	r0, [sp, #120]	; 0x78
   15efc:	strvs	r3, [sp, #128]	; 0x80
   15f00:	subs	r2, r6, r0
   15f04:	sbcs	r3, r7, r1
   15f08:	ldr	r1, [sp, #32]
   15f0c:	strd	r2, [sp, #152]	; 0x98
   15f10:	mov	r3, #0
   15f14:	str	r3, [sp, #120]	; 0x78
   15f18:	ldrd	r2, [sp, #144]	; 0x90
   15f1c:	strd	r2, [r1, #112]	; 0x70
   15f20:	movvs	r3, #1
   15f24:	strvs	r3, [sp, #120]	; 0x78
   15f28:	ldrd	r6, [sp, #112]	; 0x70
   15f2c:	ldrd	r0, [sp, #184]	; 0xb8
   15f30:	subs	r2, r0, r6
   15f34:	sbcs	r3, r1, r7
   15f38:	ldrd	r0, [sp, #152]	; 0x98
   15f3c:	mov	r6, r2
   15f40:	mov	r7, r3
   15f44:	mov	r2, #0
   15f48:	ldr	r3, [sp, #32]
   15f4c:	movvs	r2, #1
   15f50:	strd	r0, [r3, #104]	; 0x68
   15f54:	orr	r3, fp, lr
   15f58:	mov	r1, r7
   15f5c:	ldr	lr, [sp, #32]
   15f60:	mov	r0, r6
   15f64:	orr	r3, r3, ip
   15f68:	strd	r0, [lr, #96]	; 0x60
   15f6c:	ldr	r1, [sp, #136]	; 0x88
   15f70:	orr	r3, r3, r1
   15f74:	ldr	r1, [sp, #128]	; 0x80
   15f78:	orr	r3, r3, r1
   15f7c:	ldr	r1, [sp, #120]	; 0x78
   15f80:	orr	r3, r3, r1
   15f84:	orr	r3, r3, r2
   15f88:	b	15a28 <__assert_fail@plt+0x4658>
   15f8c:	ldr	r3, [pc, #-4028]	; 14fd8 <__assert_fail@plt+0x3c08>
   15f90:	movw	r1, #7472	; 0x1d30
   15f94:	movt	r1, #2
   15f98:	mov	r7, r3
   15f9c:	str	r3, [sp, #36]	; 0x24
   15fa0:	b	15fb0 <__assert_fail@plt+0x4be0>
   15fa4:	ldr	r1, [r7, #12]!
   15fa8:	cmp	r1, #0
   15fac:	beq	15fc4 <__assert_fail@plt+0x4bf4>
   15fb0:	mov	r0, r4
   15fb4:	bl	110a0 <strcmp@plt>
   15fb8:	cmp	r0, #0
   15fbc:	bne	15fa4 <__assert_fail@plt+0x4bd4>
   15fc0:	b	14034 <__assert_fail@plt+0x2c64>
   15fc4:	movw	r1, #7728	; 0x1e30
   15fc8:	movt	r1, #2
   15fcc:	mov	r0, r4
   15fd0:	bl	110a0 <strcmp@plt>
   15fd4:	cmp	r0, #0
   15fd8:	beq	1629c <__assert_fail@plt+0x4ecc>
   15fdc:	ldr	r3, [pc, #1896]	; 1674c <__assert_fail@plt+0x537c>
   15fe0:	movw	r1, #7476	; 0x1d34
   15fe4:	movt	r1, #2
   15fe8:	mov	r7, r3
   15fec:	str	r3, [sp, #24]
   15ff0:	b	16000 <__assert_fail@plt+0x4c30>
   15ff4:	ldr	r1, [r7, #12]!
   15ff8:	cmp	r1, #0
   15ffc:	beq	16254 <__assert_fail@plt+0x4e84>
   16000:	mov	r0, r4
   16004:	bl	110a0 <strcmp@plt>
   16008:	cmp	r0, #0
   1600c:	bne	15ff4 <__assert_fail@plt+0x4c24>
   16010:	b	14034 <__assert_fail@plt+0x2c64>
   16014:	adds	r2, r2, r6
   16018:	adcs	r3, r3, r7
   1601c:	mov	r0, r2
   16020:	mov	r7, r3
   16024:	movvs	r1, #1
   16028:	movvc	r1, #0
   1602c:	b	14478 <__assert_fail@plt+0x30a8>
   16030:	adds	r2, r2, r6
   16034:	adcs	r3, r3, r7
   16038:	mov	r0, r2
   1603c:	mov	r7, r3
   16040:	movvs	r1, #1
   16044:	movvc	r1, #0
   16048:	b	155ec <__assert_fail@plt+0x421c>
   1604c:	mov	r2, #0
   16050:	mov	r3, r2
   16054:	b	15de0 <__assert_fail@plt+0x4a10>
   16058:	asr	r7, r6, #31
   1605c:	mov	r2, #5
   16060:	movw	r1, #7600	; 0x1db0
   16064:	movt	r1, #2
   16068:	mov	r0, #0
   1606c:	bl	11130 <dcgettext@plt>
   16070:	ldrd	r2, [r8, #-216]	; 0xffffff28
   16074:	strd	r6, [sp]
   16078:	bl	12cd8 <__assert_fail@plt+0x1908>
   1607c:	b	150a0 <__assert_fail@plt+0x3cd0>
   16080:	ldr	r6, [r8, #4]
   16084:	mov	lr, r3
   16088:	mov	r1, r0
   1608c:	str	r2, [sp, #36]	; 0x24
   16090:	str	r6, [sp, #40]	; 0x28
   16094:	umull	r6, r7, r0, r2
   16098:	cmp	lr, #0
   1609c:	strd	r6, [sp, #24]
   160a0:	umull	r6, r7, r1, lr
   160a4:	bge	160b4 <__assert_fail@plt+0x4ce4>
   160a8:	mov	lr, #0
   160ac:	subs	r6, r6, lr
   160b0:	sbc	r7, r7, r1
   160b4:	cmp	r1, #0
   160b8:	bge	160cc <__assert_fail@plt+0x4cfc>
   160bc:	ldr	r1, [sp, #36]	; 0x24
   160c0:	subs	r6, r6, r1
   160c4:	ldr	r1, [sp, #40]	; 0x28
   160c8:	sbc	r7, r7, r1
   160cc:	ldr	r1, [sp, #28]
   160d0:	mov	lr, #0
   160d4:	adds	r1, r6, r1
   160d8:	adc	lr, r7, lr
   160dc:	cmp	lr, r1, asr #31
   160e0:	bne	1653c <__assert_fail@plt+0x516c>
   160e4:	ldr	r3, [sp, #24]
   160e8:	str	r3, [sp, #104]	; 0x68
   160ec:	str	r1, [sp, #108]	; 0x6c
   160f0:	b	153e4 <__assert_fail@plt+0x4014>
   160f4:	cmp	r1, r3
   160f8:	bne	16558 <__assert_fail@plt+0x5188>
   160fc:	mov	lr, ip
   16100:	mov	r1, r2
   16104:	str	r0, [sp, #36]	; 0x24
   16108:	str	ip, [sp, #40]	; 0x28
   1610c:	b	16094 <__assert_fail@plt+0x4cc4>
   16110:	mov	r2, #0
   16114:	mov	r3, r2
   16118:	b	15d70 <__assert_fail@plt+0x49a0>
   1611c:	mov	r6, r3
   16120:	mov	lr, r3
   16124:	str	r2, [sp, #40]	; 0x28
   16128:	mov	ip, r7
   1612c:	umull	r0, r1, r7, r2
   16130:	cmp	lr, #0
   16134:	strd	r0, [sp, #24]
   16138:	umull	r0, r1, ip, lr
   1613c:	bge	1614c <__assert_fail@plt+0x4d7c>
   16140:	mov	lr, #0
   16144:	subs	r0, r0, lr
   16148:	sbc	r1, r1, ip
   1614c:	cmp	ip, #0
   16150:	bge	16160 <__assert_fail@plt+0x4d90>
   16154:	ldr	ip, [sp, #40]	; 0x28
   16158:	subs	r0, r0, ip
   1615c:	sbc	r1, r1, r6
   16160:	ldr	ip, [sp, #28]
   16164:	mov	lr, #0
   16168:	adds	ip, r0, ip
   1616c:	adc	lr, r1, lr
   16170:	cmp	lr, ip, asr #31
   16174:	bne	166dc <__assert_fail@plt+0x530c>
   16178:	ldr	r3, [sp, #24]
   1617c:	str	r3, [sp, #88]	; 0x58
   16180:	str	ip, [sp, #92]	; 0x5c
   16184:	b	14844 <__assert_fail@plt+0x3474>
   16188:	cmp	r1, r3
   1618c:	bne	164d0 <__assert_fail@plt+0x5100>
   16190:	mov	r6, fp
   16194:	mov	lr, fp
   16198:	str	r7, [sp, #40]	; 0x28
   1619c:	mov	ip, r2
   161a0:	b	1612c <__assert_fail@plt+0x4d5c>
   161a4:	ldr	r6, [r8, #4]
   161a8:	mov	lr, r3
   161ac:	mov	r1, r0
   161b0:	str	r2, [sp, #36]	; 0x24
   161b4:	str	r6, [sp, #40]	; 0x28
   161b8:	umull	r6, r7, r0, r2
   161bc:	cmp	lr, #0
   161c0:	strd	r6, [sp, #24]
   161c4:	umull	r6, r7, r1, lr
   161c8:	bge	161d8 <__assert_fail@plt+0x4e08>
   161cc:	mov	lr, #0
   161d0:	subs	r6, r6, lr
   161d4:	sbc	r7, r7, r1
   161d8:	cmp	r1, #0
   161dc:	bge	161f0 <__assert_fail@plt+0x4e20>
   161e0:	ldr	r1, [sp, #36]	; 0x24
   161e4:	subs	r6, r6, r1
   161e8:	ldr	r1, [sp, #40]	; 0x28
   161ec:	sbc	r7, r7, r1
   161f0:	ldr	r1, [sp, #28]
   161f4:	mov	lr, #0
   161f8:	adds	r1, r6, r1
   161fc:	adc	lr, r7, lr
   16200:	cmp	lr, r1, asr #31
   16204:	bne	16720 <__assert_fail@plt+0x5350>
   16208:	ldr	r3, [sp, #24]
   1620c:	str	r3, [sp, #96]	; 0x60
   16210:	str	r1, [sp, #100]	; 0x64
   16214:	b	147b0 <__assert_fail@plt+0x33e0>
   16218:	cmp	r1, r3
   1621c:	bne	16654 <__assert_fail@plt+0x5284>
   16220:	mov	lr, ip
   16224:	mov	r1, r2
   16228:	str	r0, [sp, #36]	; 0x24
   1622c:	str	ip, [sp, #40]	; 0x28
   16230:	b	161b8 <__assert_fail@plt+0x4de8>
   16234:	mov	r2, #5
   16238:	movw	r1, #7660	; 0x1dec
   1623c:	movt	r1, #2
   16240:	mov	r0, #0
   16244:	bl	11130 <dcgettext@plt>
   16248:	ldrd	r2, [sp, #112]	; 0x70
   1624c:	bl	12cd8 <__assert_fail@plt+0x1908>
   16250:	b	15e1c <__assert_fail@plt+0x4a4c>
   16254:	ldr	r3, [sp, #20]
   16258:	sub	r0, r3, #1
   1625c:	ldrb	r2, [r4, r0]
   16260:	add	r3, r4, r0
   16264:	cmp	r2, #83	; 0x53
   16268:	beq	16430 <__assert_fail@plt+0x5060>
   1626c:	movw	r1, #7484	; 0x1d3c
   16270:	movt	r1, #2
   16274:	ldr	r7, [pc, #1236]	; 16750 <__assert_fail@plt+0x5380>
   16278:	b	16288 <__assert_fail@plt+0x4eb8>
   1627c:	ldr	r1, [r7, #12]!
   16280:	cmp	r1, #0
   16284:	beq	1636c <__assert_fail@plt+0x4f9c>
   16288:	mov	r0, r4
   1628c:	bl	110a0 <strcmp@plt>
   16290:	cmp	r0, #0
   16294:	bne	1627c <__assert_fail@plt+0x4eac>
   16298:	b	14034 <__assert_fail@plt+0x2c64>
   1629c:	movw	r3, #259	; 0x103
   162a0:	mov	r2, #0
   162a4:	add	r1, sp, #304	; 0x130
   162a8:	str	r3, [sp, #20]
   162ac:	mov	r3, #0
   162b0:	strd	r2, [r1]
   162b4:	b	13cfc <__assert_fail@plt+0x292c>
   162b8:	add	r3, r3, #1
   162bc:	b	13f08 <__assert_fail@plt+0x2b38>
   162c0:	mov	r1, #60	; 0x3c
   162c4:	cmp	r7, #0
   162c8:	umull	r2, r3, r6, r1
   162cc:	strd	r2, [sp, #120]	; 0x78
   162d0:	umull	r2, r3, r1, r7
   162d4:	bge	162e0 <__assert_fail@plt+0x4f10>
   162d8:	subs	r2, r2, lr
   162dc:	sbc	r3, r3, r1
   162e0:	ldr	r1, [sp, #124]	; 0x7c
   162e4:	mov	r0, #0
   162e8:	adds	r1, r2, r1
   162ec:	adc	r0, r3, r0
   162f0:	cmp	r0, r1, asr #31
   162f4:	bne	1669c <__assert_fail@plt+0x52cc>
   162f8:	mov	r3, r1
   162fc:	ldr	r2, [sp, #120]	; 0x78
   16300:	b	155c0 <__assert_fail@plt+0x41f0>
   16304:	ldr	r1, [sp, #32]
   16308:	add	r3, r2, #1
   1630c:	str	r3, [r1]
   16310:	ldrb	r3, [r2]
   16314:	cmp	r3, #0
   16318:	str	r3, [sp, #20]
   1631c:	ldreq	r2, [sp, #20]
   16320:	bne	13d00 <__assert_fail@plt+0x2930>
   16324:	b	13668 <__assert_fail@plt+0x2298>
   16328:	mov	r1, #60	; 0x3c
   1632c:	cmp	r7, #0
   16330:	umull	r2, r3, r6, r1
   16334:	strd	r2, [sp, #120]	; 0x78
   16338:	umull	r2, r3, r1, r7
   1633c:	bge	16348 <__assert_fail@plt+0x4f78>
   16340:	subs	r2, r2, lr
   16344:	sbc	r3, r3, r1
   16348:	ldr	r1, [sp, #124]	; 0x7c
   1634c:	mov	r0, #0
   16350:	adds	r1, r2, r1
   16354:	adc	r0, r3, r0
   16358:	cmp	r0, r1, asr #31
   1635c:	bne	1659c <__assert_fail@plt+0x51cc>
   16360:	mov	r3, r1
   16364:	ldr	r2, [sp, #120]	; 0x78
   16368:	b	1444c <__assert_fail@plt+0x307c>
   1636c:	ldr	r3, [sp, #20]
   16370:	cmp	r3, #1
   16374:	ldrb	r3, [sp, #244]	; 0xf4
   16378:	beq	1647c <__assert_fail@plt+0x50ac>
   1637c:	cmp	r3, #0
   16380:	movne	r0, r4
   16384:	movne	r2, r4
   16388:	beq	163b4 <__assert_fail@plt+0x4fe4>
   1638c:	cmp	r3, #46	; 0x2e
   16390:	add	ip, r2, #1
   16394:	ldrb	r3, [r0, #1]!
   16398:	beq	163f0 <__assert_fail@plt+0x5020>
   1639c:	cmp	r3, #0
   163a0:	strb	r3, [r2, #1]
   163a4:	mov	r2, ip
   163a8:	bne	1638c <__assert_fail@plt+0x4fbc>
   163ac:	cmp	r1, #0
   163b0:	bne	16400 <__assert_fail@plt+0x5030>
   163b4:	ldr	r3, [sp, #32]
   163b8:	ldrb	r3, [r3, #181]	; 0xb5
   163bc:	cmp	r3, #0
   163c0:	beq	13cd4 <__assert_fail@plt+0x2904>
   163c4:	mov	r2, #5
   163c8:	movw	r1, #7496	; 0x1d48
   163cc:	movt	r1, #2
   163d0:	mov	r0, #0
   163d4:	bl	11130 <dcgettext@plt>
   163d8:	mov	r3, #63	; 0x3f
   163dc:	mov	r1, r4
   163e0:	str	r3, [sp, #20]
   163e4:	bl	12cd8 <__assert_fail@plt+0x1908>
   163e8:	mov	r2, #2
   163ec:	b	13d08 <__assert_fail@plt+0x2938>
   163f0:	cmp	r3, #0
   163f4:	mov	r1, #1
   163f8:	strb	r3, [r2]
   163fc:	bne	1638c <__assert_fail@plt+0x4fbc>
   16400:	movw	r1, #7468	; 0x1d2c
   16404:	movt	r1, #2
   16408:	ldr	r7, [sp, #40]	; 0x28
   1640c:	b	1641c <__assert_fail@plt+0x504c>
   16410:	ldr	r1, [r7, #12]!
   16414:	cmp	r1, #0
   16418:	beq	165c8 <__assert_fail@plt+0x51f8>
   1641c:	mov	r0, r4
   16420:	bl	110a0 <strcmp@plt>
   16424:	cmp	r0, #0
   16428:	bne	16410 <__assert_fail@plt+0x5040>
   1642c:	b	14034 <__assert_fail@plt+0x2c64>
   16430:	movw	r2, #7476	; 0x1d34
   16434:	movt	r2, #2
   16438:	strb	r1, [r4, r0]
   1643c:	mov	r7, sl
   16440:	mov	r1, r2
   16444:	mov	sl, r3
   16448:	b	16460 <__assert_fail@plt+0x5090>
   1644c:	ldr	r3, [sp, #24]
   16450:	ldr	r1, [r3, #12]!
   16454:	cmp	r1, #0
   16458:	str	r3, [sp, #24]
   1645c:	beq	164bc <__assert_fail@plt+0x50ec>
   16460:	mov	r0, r4
   16464:	bl	110a0 <strcmp@plt>
   16468:	cmp	r0, #0
   1646c:	bne	1644c <__assert_fail@plt+0x507c>
   16470:	mov	sl, r7
   16474:	ldr	r3, [sp, #24]
   16478:	b	15bec <__assert_fail@plt+0x481c>
   1647c:	cmp	r3, #65	; 0x41
   16480:	ldrne	r2, [pc, #716]	; 16754 <__assert_fail@plt+0x5384>
   16484:	beq	13ce4 <__assert_fail@plt+0x2914>
   16488:	mov	r0, r2
   1648c:	add	r2, r2, #12
   16490:	ldr	r1, [r2]
   16494:	cmp	r1, #0
   16498:	beq	1637c <__assert_fail@plt+0x4fac>
   1649c:	ldrb	r1, [r1]
   164a0:	cmp	r1, r3
   164a4:	bne	16488 <__assert_fail@plt+0x50b8>
   164a8:	ldr	r3, [r0, #16]
   164ac:	ldr	r2, [r0, #20]
   164b0:	str	r3, [sp, #20]
   164b4:	asr	r3, r2, #31
   164b8:	b	14044 <__assert_fail@plt+0x2c74>
   164bc:	mov	r3, sl
   164c0:	mov	r2, #83	; 0x53
   164c4:	mov	sl, r7
   164c8:	strb	r2, [r3]
   164cc:	b	1626c <__assert_fail@plt+0x4e9c>
   164d0:	mul	r1, r7, r3
   164d4:	add	r0, fp, #1
   164d8:	umull	r6, r7, r7, r2
   164dc:	cmp	r0, #1
   164e0:	mla	r2, r2, fp, r1
   164e4:	add	r7, r2, r7
   164e8:	strd	r6, [sp, #88]	; 0x58
   164ec:	bhi	16510 <__assert_fail@plt+0x5140>
   164f0:	add	r2, r3, #1
   164f4:	cmp	r2, #1
   164f8:	bhi	16510 <__assert_fail@plt+0x5140>
   164fc:	cmp	fp, r3
   16500:	bne	16738 <__assert_fail@plt+0x5368>
   16504:	cmp	r6, #1
   16508:	sbcs	r3, r7, #0
   1650c:	bge	14844 <__assert_fail@plt+0x3474>
   16510:	mov	r3, #1
   16514:	str	r3, [sp, #36]	; 0x24
   16518:	b	14844 <__assert_fail@plt+0x3474>
   1651c:	add	r1, ip, #7
   16520:	b	14204 <__assert_fail@plt+0x2e34>
   16524:	add	r1, ip, #6
   16528:	b	141fc <__assert_fail@plt+0x2e2c>
   1652c:	add	r1, ip, #5
   16530:	b	141f4 <__assert_fail@plt+0x2e24>
   16534:	add	r1, ip, #4
   16538:	b	141ec <__assert_fail@plt+0x2e1c>
   1653c:	mul	r3, r0, r3
   16540:	umull	r0, r1, r0, r2
   16544:	mla	r3, r2, ip, r3
   16548:	add	r1, r3, r1
   1654c:	strd	r0, [sp, #104]	; 0x68
   16550:	mov	fp, #1
   16554:	b	153e4 <__assert_fail@plt+0x4014>
   16558:	mul	r1, r0, r3
   1655c:	add	lr, ip, #1
   16560:	umull	r6, r7, r0, r2
   16564:	cmp	lr, #1
   16568:	mla	r2, r2, ip, r1
   1656c:	add	r7, r2, r7
   16570:	strd	r6, [sp, #104]	; 0x68
   16574:	bhi	16550 <__assert_fail@plt+0x5180>
   16578:	add	r2, r3, #1
   1657c:	cmp	r2, #1
   16580:	bhi	16550 <__assert_fail@plt+0x5180>
   16584:	cmp	ip, r3
   16588:	bne	16600 <__assert_fail@plt+0x5230>
   1658c:	cmp	r6, #1
   16590:	sbcs	r3, r7, #0
   16594:	bge	153e4 <__assert_fail@plt+0x4014>
   16598:	b	16550 <__assert_fail@plt+0x5180>
   1659c:	lsl	r3, r7, #4
   165a0:	mov	lr, #1
   165a4:	lsl	r2, r6, #4
   165a8:	orr	r3, r3, r6, lsr #28
   165ac:	subs	r2, r2, r6
   165b0:	sbc	r3, r3, r7
   165b4:	lsl	r1, r2, #2
   165b8:	lsl	r3, r3, #2
   165bc:	orr	r3, r3, r2, lsr #30
   165c0:	mov	r2, r1
   165c4:	b	1444c <__assert_fail@plt+0x307c>
   165c8:	ldr	r1, [sp, #44]	; 0x2c
   165cc:	cmp	r1, #0
   165d0:	beq	16614 <__assert_fail@plt+0x5244>
   165d4:	ldr	r3, [sp, #32]
   165d8:	add	r7, r3, #192	; 0xc0
   165dc:	b	165ec <__assert_fail@plt+0x521c>
   165e0:	ldr	r1, [r7, #12]!
   165e4:	cmp	r1, #0
   165e8:	beq	16614 <__assert_fail@plt+0x5244>
   165ec:	mov	r0, r4
   165f0:	bl	110a0 <strcmp@plt>
   165f4:	cmp	r0, #0
   165f8:	bne	165e0 <__assert_fail@plt+0x5210>
   165fc:	b	14034 <__assert_fail@plt+0x2c64>
   16600:	ldrd	r2, [sp, #104]	; 0x68
   16604:	cmp	r2, #0
   16608:	sbcs	r3, r3, #0
   1660c:	blt	153e4 <__assert_fail@plt+0x4014>
   16610:	b	16550 <__assert_fail@plt+0x5180>
   16614:	movw	r1, #7472	; 0x1d30
   16618:	movt	r1, #2
   1661c:	ldr	r7, [sp, #36]	; 0x24
   16620:	b	16630 <__assert_fail@plt+0x5260>
   16624:	ldr	r1, [r7, #12]!
   16628:	cmp	r1, #0
   1662c:	beq	163b4 <__assert_fail@plt+0x4fe4>
   16630:	mov	r0, r4
   16634:	bl	110a0 <strcmp@plt>
   16638:	cmp	r0, #0
   1663c:	bne	16624 <__assert_fail@plt+0x5254>
   16640:	b	14034 <__assert_fail@plt+0x2c64>
   16644:	add	r1, ip, #9
   16648:	b	14214 <__assert_fail@plt+0x2e44>
   1664c:	add	r1, ip, #8
   16650:	b	1420c <__assert_fail@plt+0x2e3c>
   16654:	mul	r1, r0, r3
   16658:	add	lr, ip, #1
   1665c:	umull	r6, r7, r0, r2
   16660:	cmp	lr, #1
   16664:	mla	r2, r2, ip, r1
   16668:	add	r7, r2, r7
   1666c:	strd	r6, [sp, #96]	; 0x60
   16670:	bhi	16694 <__assert_fail@plt+0x52c4>
   16674:	add	r2, r3, #1
   16678:	cmp	r2, #1
   1667c:	bhi	16694 <__assert_fail@plt+0x52c4>
   16680:	cmp	ip, r3
   16684:	bne	166c8 <__assert_fail@plt+0x52f8>
   16688:	cmp	r6, #1
   1668c:	sbcs	r3, r7, #0
   16690:	bge	147b0 <__assert_fail@plt+0x33e0>
   16694:	mov	fp, #1
   16698:	b	147b0 <__assert_fail@plt+0x33e0>
   1669c:	lsl	r3, r7, #4
   166a0:	mov	lr, #1
   166a4:	lsl	r2, r6, #4
   166a8:	orr	r3, r3, r6, lsr #28
   166ac:	subs	r2, r2, r6
   166b0:	sbc	r3, r3, r7
   166b4:	lsl	r1, r2, #2
   166b8:	lsl	r3, r3, #2
   166bc:	orr	r3, r3, r2, lsr #30
   166c0:	mov	r2, r1
   166c4:	b	155c0 <__assert_fail@plt+0x41f0>
   166c8:	ldrd	r2, [sp, #96]	; 0x60
   166cc:	cmp	r2, #0
   166d0:	sbcs	r3, r3, #0
   166d4:	blt	147b0 <__assert_fail@plt+0x33e0>
   166d8:	b	16694 <__assert_fail@plt+0x52c4>
   166dc:	mul	r3, r7, r3
   166e0:	umull	r0, r1, r7, r2
   166e4:	mla	r2, r2, fp, r3
   166e8:	add	r1, r2, r1
   166ec:	strd	r0, [sp, #88]	; 0x58
   166f0:	b	16510 <__assert_fail@plt+0x5140>
   166f4:	add	ip, sl, ip
   166f8:	sxth	r2, r2
   166fc:	ldrb	ip, [ip, #2700]	; 0xa8c
   16700:	rsb	r1, r2, r2, lsl #3
   16704:	movw	r3, #2792	; 0xae8
   16708:	sub	r7, r9, r2, lsl #1
   1670c:	sub	fp, r8, r1, lsl #3
   16710:	sub	ip, ip, #28
   16714:	add	r2, sl, ip
   16718:	ldrsb	r6, [r2, r3]
   1671c:	b	1411c <__assert_fail@plt+0x2d4c>
   16720:	mul	r3, r0, r3
   16724:	umull	r0, r1, r0, r2
   16728:	mla	r2, r2, ip, r3
   1672c:	add	r1, r2, r1
   16730:	strd	r0, [sp, #96]	; 0x60
   16734:	b	16694 <__assert_fail@plt+0x52c4>
   16738:	ldrd	r2, [sp, #88]	; 0x58
   1673c:	cmp	r2, #0
   16740:	sbcs	r3, r3, #0
   16744:	blt	14844 <__assert_fail@plt+0x3474>
   16748:	b	16510 <__assert_fail@plt+0x5140>
   1674c:	andeq	r1, r2, ip, lsr #11
   16750:	andeq	r1, r2, r0, lsr r6
   16754:	andeq	r1, r2, ip, lsr #14
   16758:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1675c:	strd	r6, [sp, #8]
   16760:	mov	r7, r1
   16764:	strd	r8, [sp, #16]
   16768:	mov	r9, r2
   1676c:	strd	sl, [sp, #24]
   16770:	mov	sl, r3
   16774:	str	lr, [sp, #32]
   16778:	sub	sp, sp, #924	; 0x39c
   1677c:	str	r0, [sp, #88]	; 0x58
   16780:	mov	r0, r1
   16784:	bl	11274 <strlen@plt>
   16788:	cmp	r9, #0
   1678c:	str	r0, [sp, #48]	; 0x30
   16790:	beq	174a8 <__assert_fail@plt+0x60d8>
   16794:	ldr	r5, [r9]
   16798:	mov	r2, r7
   1679c:	ldr	r3, [r9, #4]
   167a0:	str	r3, [sp, #40]	; 0x28
   167a4:	mov	r4, r2
   167a8:	ldrb	r3, [r2], #1
   167ac:	cmp	r3, #9
   167b0:	bcc	167c4 <__assert_fail@plt+0x53f4>
   167b4:	cmp	r3, #13
   167b8:	bls	167a4 <__assert_fail@plt+0x53d4>
   167bc:	cmp	r3, #32
   167c0:	beq	167a4 <__assert_fail@plt+0x53d4>
   167c4:	add	r8, sp, #328	; 0x148
   167c8:	mov	r2, #56	; 0x38
   167cc:	mov	r1, #0
   167d0:	mov	r0, r8
   167d4:	bl	112c8 <memset@plt>
   167d8:	movw	r1, #7752	; 0x1e48
   167dc:	movt	r1, #2
   167e0:	mov	r2, #4
   167e4:	mov	r0, r4
   167e8:	bl	11394 <strncmp@plt>
   167ec:	cmp	r0, #0
   167f0:	bne	16850 <__assert_fail@plt+0x5480>
   167f4:	ldrb	lr, [r4, #4]
   167f8:	add	r2, r4, #4
   167fc:	cmp	lr, #0
   16800:	beq	16850 <__assert_fail@plt+0x5480>
   16804:	mov	ip, r2
   16808:	mov	r3, lr
   1680c:	mov	r0, #1
   16810:	b	16830 <__assert_fail@plt+0x5460>
   16814:	cmp	r3, #34	; 0x22
   16818:	beq	16cd4 <__assert_fail@plt+0x5904>
   1681c:	ldrb	r3, [r1, #1]
   16820:	add	r0, r0, #1
   16824:	add	ip, r1, #1
   16828:	cmp	r3, #0
   1682c:	beq	16850 <__assert_fail@plt+0x5480>
   16830:	cmp	r3, #92	; 0x5c
   16834:	mov	r1, ip
   16838:	bne	16814 <__assert_fail@plt+0x5444>
   1683c:	ldrb	r3, [ip, #1]
   16840:	add	r1, ip, #1
   16844:	cmp	r3, #92	; 0x5c
   16848:	cmpne	r3, #34	; 0x22
   1684c:	beq	1681c <__assert_fail@plt+0x544c>
   16850:	mov	r1, r9
   16854:	add	r2, sp, #240	; 0xf0
   16858:	ldr	r0, [sp, #960]	; 0x3c0
   1685c:	bl	1ccec <__assert_fail@plt+0xb91c>
   16860:	cmp	r0, #0
   16864:	beq	174b8 <__assert_fail@plt+0x60e8>
   16868:	ldr	r6, [sp, #960]	; 0x3c0
   1686c:	mov	r3, #0
   16870:	str	r3, [sp, #36]	; 0x24
   16874:	ldr	r3, [sp, #40]	; 0x28
   16878:	add	r1, sp, #744	; 0x2e8
   1687c:	and	sl, sl, #1
   16880:	movw	ip, #7732	; 0x1e34
   16884:	movt	ip, #2
   16888:	ldr	r2, [sp, #256]	; 0x100
   1688c:	movw	r0, #1900	; 0x76c
   16890:	ldrb	lr, [r4]
   16894:	str	r3, [sp, #780]	; 0x30c
   16898:	ldr	r9, [sp, #248]	; 0xf8
   1689c:	add	r2, r2, #1
   168a0:	strb	sl, [sp, #869]	; 0x365
   168a4:	asr	r3, r2, #31
   168a8:	ldr	sl, [sp, #252]	; 0xfc
   168ac:	cmp	lr, #0
   168b0:	ldr	lr, [sp, #260]	; 0x104
   168b4:	moveq	r4, ip
   168b8:	strd	r2, [r1]
   168bc:	asr	r3, r9, #31
   168c0:	mov	r2, r9
   168c4:	add	r1, sp, #760	; 0x2f8
   168c8:	str	r4, [sp, #688]	; 0x2b0
   168cc:	ldr	r4, [sp, #240]	; 0xf0
   168d0:	strd	r2, [r1]
   168d4:	mov	r1, #0
   168d8:	mov	r2, sl
   168dc:	adds	r0, r0, lr
   168e0:	asr	r3, sl, #31
   168e4:	ldrd	sl, [r8]
   168e8:	adc	r1, r1, lr, asr #31
   168ec:	add	lr, sp, #728	; 0x2d8
   168f0:	ldr	ip, [sp, #272]	; 0x110
   168f4:	strd	r0, [lr]
   168f8:	add	r1, sp, #752	; 0x2f0
   168fc:	add	r0, sp, #768	; 0x300
   16900:	strd	r2, [r1]
   16904:	add	r1, sp, #784	; 0x310
   16908:	ldr	r2, [sp, #244]	; 0xf4
   1690c:	strd	sl, [r1]
   16910:	ldrd	sl, [r8, #8]
   16914:	str	ip, [sp, #176]	; 0xb0
   16918:	str	r4, [sp, #776]	; 0x308
   1691c:	mov	r4, #42752	; 0xa700
   16920:	movt	r4, #118	; 0x76
   16924:	asr	r3, r2, #31
   16928:	strd	sl, [r1, #8]
   1692c:	ldrd	sl, [r8, #16]
   16930:	strd	r2, [r0]
   16934:	mov	r3, #0
   16938:	mov	r2, #2
   1693c:	str	r2, [sp, #716]	; 0x2cc
   16940:	movw	r2, #269	; 0x10d
   16944:	str	r3, [sp, #736]	; 0x2e0
   16948:	strd	sl, [r1, #16]
   1694c:	ldrd	sl, [r8, #24]
   16950:	strd	sl, [r1, #24]
   16954:	ldrd	sl, [r8, #32]
   16958:	strd	sl, [r1, #32]
   1695c:	ldrd	sl, [r8, #40]	; 0x28
   16960:	strd	sl, [r1, #40]	; 0x28
   16964:	ldrd	r8, [r8, #48]	; 0x30
   16968:	str	r3, [sp, #844]	; 0x34c
   1696c:	ldr	fp, [sp, #36]	; 0x24
   16970:	str	r3, [sp, #848]	; 0x350
   16974:	ldr	r0, [sp, #280]	; 0x118
   16978:	strd	r8, [r1, #48]	; 0x30
   1697c:	add	r1, sp, #840	; 0x348
   16980:	mov	r9, #39936	; 0x9c00
   16984:	movt	r9, #474	; 0x1da
   16988:	str	r3, [sp, #852]	; 0x354
   1698c:	strh	r3, [r1]
   16990:	add	r1, sp, #868	; 0x364
   16994:	add	r1, r1, #2
   16998:	str	r3, [sp, #856]	; 0x358
   1699c:	strh	r3, [r1]
   169a0:	str	r3, [sp, #860]	; 0x35c
   169a4:	str	r3, [sp, #864]	; 0x360
   169a8:	strb	r3, [sp, #868]	; 0x364
   169ac:	str	r3, [sp, #872]	; 0x368
   169b0:	strb	r3, [sp, #876]	; 0x36c
   169b4:	str	r0, [sp, #880]	; 0x370
   169b8:	str	r2, [sp, #884]	; 0x374
   169bc:	str	ip, [sp, #888]	; 0x378
   169c0:	str	r3, [sp, #892]	; 0x37c
   169c4:	adds	r3, r5, r4
   169c8:	add	r4, r4, #7733248	; 0x760000
   169cc:	movvs	r8, #1
   169d0:	movvc	r8, #0
   169d4:	cmp	r8, #0
   169d8:	add	r2, sp, #588	; 0x24c
   169dc:	str	r3, [sp, #388]	; 0x184
   169e0:	add	r1, sp, #388	; 0x184
   169e4:	mov	r0, r6
   169e8:	add	r4, r4, #42752	; 0xa700
   169ec:	bne	16a20 <__assert_fail@plt+0x5650>
   169f0:	bl	1ccec <__assert_fail@plt+0xb91c>
   169f4:	cmp	r0, #0
   169f8:	beq	16a18 <__assert_fail@plt+0x5648>
   169fc:	ldr	r3, [sp, #628]	; 0x274
   16a00:	cmp	r3, #0
   16a04:	beq	16a18 <__assert_fail@plt+0x5648>
   16a08:	ldr	r2, [sp, #620]	; 0x26c
   16a0c:	ldr	r1, [sp, #888]	; 0x378
   16a10:	cmp	r2, r1
   16a14:	bne	17728 <__assert_fail@plt+0x6358>
   16a18:	cmp	r4, r9
   16a1c:	bne	169c4 <__assert_fail@plt+0x55f4>
   16a20:	str	fp, [sp, #36]	; 0x24
   16a24:	ldr	r0, [sp, #880]	; 0x370
   16a28:	cmp	r0, #0
   16a2c:	beq	16a48 <__assert_fail@plt+0x5678>
   16a30:	ldr	r1, [sp, #892]	; 0x37c
   16a34:	cmp	r1, #0
   16a38:	beq	16a48 <__assert_fail@plt+0x5678>
   16a3c:	bl	110a0 <strcmp@plt>
   16a40:	cmp	r0, #0
   16a44:	beq	16d98 <__assert_fail@plt+0x59c8>
   16a48:	add	r0, sp, #688	; 0x2b0
   16a4c:	bl	135d4 <__assert_fail@plt+0x2204>
   16a50:	subs	r5, r0, #0
   16a54:	bne	16c8c <__assert_fail@plt+0x58bc>
   16a58:	ldrb	r7, [sp, #869]	; 0x365
   16a5c:	cmp	r7, #0
   16a60:	bne	16da8 <__assert_fail@plt+0x59d8>
   16a64:	ldrb	r4, [sp, #840]	; 0x348
   16a68:	cmp	r4, #0
   16a6c:	beq	16c04 <__assert_fail@plt+0x5834>
   16a70:	add	r3, sp, #776	; 0x308
   16a74:	ldr	r1, [sp, #88]	; 0x58
   16a78:	ldrd	r2, [r3]
   16a7c:	strd	r2, [r1]
   16a80:	cmp	r7, #0
   16a84:	moveq	r4, #1
   16a88:	beq	16bc8 <__assert_fail@plt+0x57f8>
   16a8c:	ldr	r3, [sp, #964]	; 0x3c4
   16a90:	cmp	r3, #0
   16a94:	beq	17744 <__assert_fail@plt+0x6374>
   16a98:	mov	r0, r3
   16a9c:	movw	r1, #7920	; 0x1ef0
   16aa0:	movt	r1, #2
   16aa4:	bl	110a0 <strcmp@plt>
   16aa8:	cmp	r0, #0
   16aac:	bne	175b8 <__assert_fail@plt+0x61e8>
   16ab0:	movw	r1, #10068	; 0x2754
   16ab4:	movt	r1, #2
   16ab8:	mov	r2, #5
   16abc:	bl	11130 <dcgettext@plt>
   16ac0:	bl	12cd8 <__assert_fail@plt+0x1908>
   16ac4:	ldr	r9, [sp, #88]	; 0x58
   16ac8:	mov	r2, #5
   16acc:	movw	r1, #10136	; 0x2798
   16ad0:	movt	r1, #2
   16ad4:	mov	r0, #0
   16ad8:	ldm	r9, {r4, r8}
   16adc:	bl	11130 <dcgettext@plt>
   16ae0:	asr	r5, r4, #31
   16ae4:	mov	r2, r4
   16ae8:	str	r8, [sp]
   16aec:	mov	r3, r5
   16af0:	bl	12cd8 <__assert_fail@plt+0x1908>
   16af4:	add	r1, sp, #284	; 0x11c
   16af8:	mov	r0, r9
   16afc:	bl	11088 <gmtime_r@plt>
   16b00:	cmp	r0, #0
   16b04:	beq	16b50 <__assert_fail@plt+0x5780>
   16b08:	mov	r2, #5
   16b0c:	movw	r1, #10172	; 0x27bc
   16b10:	movt	r1, #2
   16b14:	mov	r0, #0
   16b18:	bl	11130 <dcgettext@plt>
   16b1c:	mov	ip, #0
   16b20:	mov	r4, r0
   16b24:	mov	r1, #100	; 0x64
   16b28:	add	r3, sp, #284	; 0x11c
   16b2c:	add	r0, sp, #388	; 0x184
   16b30:	movw	r2, #7140	; 0x1be4
   16b34:	movt	r2, #2
   16b38:	str	ip, [sp]
   16b3c:	str	ip, [sp, #4]
   16b40:	bl	201a8 <__assert_fail@plt+0xedd8>
   16b44:	add	r1, sp, #388	; 0x184
   16b48:	mov	r0, r4
   16b4c:	bl	12cd8 <__assert_fail@plt+0x1908>
   16b50:	add	r2, sp, #588	; 0x24c
   16b54:	mov	r0, r6
   16b58:	ldr	r1, [sp, #88]	; 0x58
   16b5c:	bl	1ccec <__assert_fail@plt+0xb91c>
   16b60:	cmp	r0, #0
   16b64:	beq	16bc4 <__assert_fail@plt+0x57f4>
   16b68:	ldr	r5, [sp, #624]	; 0x270
   16b6c:	mov	r2, #5
   16b70:	movw	r1, #10192	; 0x27d0
   16b74:	movt	r1, #2
   16b78:	mov	r0, #0
   16b7c:	bl	11130 <dcgettext@plt>
   16b80:	mov	ip, #0
   16b84:	mov	r4, r0
   16b88:	add	r3, sp, #588	; 0x24c
   16b8c:	mov	r1, #100	; 0x64
   16b90:	add	r0, sp, #388	; 0x184
   16b94:	movw	r2, #7140	; 0x1be4
   16b98:	movt	r2, #2
   16b9c:	str	ip, [sp]
   16ba0:	str	ip, [sp, #4]
   16ba4:	bl	201a8 <__assert_fail@plt+0xedd8>
   16ba8:	add	r1, sp, #116	; 0x74
   16bac:	mov	r0, r5
   16bb0:	bl	12b24 <__assert_fail@plt+0x1754>
   16bb4:	mov	r2, r0
   16bb8:	add	r1, sp, #388	; 0x184
   16bbc:	mov	r0, r4
   16bc0:	bl	12cd8 <__assert_fail@plt+0x1908>
   16bc4:	mov	r4, r7
   16bc8:	ldr	r3, [sp, #960]	; 0x3c0
   16bcc:	cmp	r6, r3
   16bd0:	beq	16bdc <__assert_fail@plt+0x580c>
   16bd4:	mov	r0, r6
   16bd8:	bl	1ccb8 <__assert_fail@plt+0xb8e8>
   16bdc:	ldr	r0, [sp, #36]	; 0x24
   16be0:	bl	1df60 <__assert_fail@plt+0xcb90>
   16be4:	mov	r0, r4
   16be8:	add	sp, sp, #924	; 0x39c
   16bec:	ldrd	r4, [sp]
   16bf0:	ldrd	r6, [sp, #8]
   16bf4:	ldrd	r8, [sp, #16]
   16bf8:	ldrd	sl, [sp, #24]
   16bfc:	add	sp, sp, #32
   16c00:	pop	{pc}		; (ldr pc, [sp], #4)
   16c04:	ldr	r1, [sp, #844]	; 0x34c
   16c08:	ldr	ip, [sp, #848]	; 0x350
   16c0c:	ldr	r0, [sp, #860]	; 0x35c
   16c10:	ldr	r2, [sp, #852]	; 0x354
   16c14:	ldr	lr, [sp, #856]	; 0x358
   16c18:	orr	r3, r0, r1
   16c1c:	orr	r3, r3, ip
   16c20:	ldr	ip, [sp, #864]	; 0x360
   16c24:	orr	r3, r3, lr
   16c28:	add	r2, r2, ip
   16c2c:	orr	r3, r3, r2
   16c30:	cmp	r3, #1
   16c34:	ble	16e2c <__assert_fail@plt+0x5a5c>
   16c38:	cmp	r7, #0
   16c3c:	beq	16bc8 <__assert_fail@plt+0x57f8>
   16c40:	cmp	r0, #1
   16c44:	bgt	17608 <__assert_fail@plt+0x6238>
   16c48:	cmp	r1, #1
   16c4c:	bgt	175f8 <__assert_fail@plt+0x6228>
   16c50:	ldr	r3, [sp, #848]	; 0x350
   16c54:	cmp	r3, #1
   16c58:	bgt	175e8 <__assert_fail@plt+0x6218>
   16c5c:	ldr	r3, [sp, #856]	; 0x358
   16c60:	cmp	r3, #1
   16c64:	bgt	175d8 <__assert_fail@plt+0x6208>
   16c68:	ldr	r3, [sp, #852]	; 0x354
   16c6c:	ldr	r2, [sp, #864]	; 0x360
   16c70:	add	r3, r3, r2
   16c74:	cmp	r3, #1
   16c78:	ble	16bc8 <__assert_fail@plt+0x57f8>
   16c7c:	movw	r0, #8176	; 0x1ff0
   16c80:	movt	r0, #2
   16c84:	bl	12cd8 <__assert_fail@plt+0x1908>
   16c88:	b	16bc8 <__assert_fail@plt+0x57f8>
   16c8c:	ldrb	r4, [sp, #869]	; 0x365
   16c90:	cmp	r4, #0
   16c94:	beq	16bc8 <__assert_fail@plt+0x57f8>
   16c98:	ldr	r2, [sp, #48]	; 0x30
   16c9c:	mov	r0, #0
   16ca0:	mov	r4, #0
   16ca4:	ldr	r3, [sp, #688]	; 0x2b0
   16ca8:	add	r7, r7, r2
   16cac:	mov	r2, #5
   16cb0:	cmp	r3, r7
   16cb4:	movwcs	r1, #7760	; 0x1e50
   16cb8:	movwcc	r1, #7784	; 0x1e68
   16cbc:	movtcs	r1, #2
   16cc0:	movtcc	r1, #2
   16cc4:	bl	11130 <dcgettext@plt>
   16cc8:	ldr	r1, [sp, #688]	; 0x2b0
   16ccc:	bl	12cd8 <__assert_fail@plt+0x1908>
   16cd0:	b	16bc8 <__assert_fail@plt+0x57f8>
   16cd4:	cmp	r0, #100	; 0x64
   16cd8:	bgt	17484 <__assert_fail@plt+0x60b4>
   16cdc:	add	r3, sp, #488	; 0x1e8
   16ce0:	str	r3, [sp, #964]	; 0x3c4
   16ce4:	mov	r3, #0
   16ce8:	str	r3, [sp, #36]	; 0x24
   16cec:	cmp	lr, #34	; 0x22
   16cf0:	ldr	r1, [sp, #964]	; 0x3c4
   16cf4:	beq	16d28 <__assert_fail@plt+0x5958>
   16cf8:	ldr	fp, [sp, #36]	; 0x24
   16cfc:	sub	lr, lr, #92	; 0x5c
   16d00:	clz	lr, lr
   16d04:	lsr	lr, lr, #5
   16d08:	add	r3, r2, lr
   16d0c:	ldrb	r0, [r2, lr]
   16d10:	add	r2, r3, #1
   16d14:	ldrb	lr, [r3, #1]
   16d18:	strb	r0, [r1], #1
   16d1c:	cmp	lr, #34	; 0x22
   16d20:	bne	16cfc <__assert_fail@plt+0x592c>
   16d24:	str	fp, [sp, #36]	; 0x24
   16d28:	mov	r3, #0
   16d2c:	ldr	r0, [sp, #964]	; 0x3c4
   16d30:	str	r2, [sp, #56]	; 0x38
   16d34:	strb	r3, [r1]
   16d38:	bl	1cc20 <__assert_fail@plt+0xb850>
   16d3c:	subs	r6, r0, #0
   16d40:	moveq	r4, r6
   16d44:	beq	16bdc <__assert_fail@plt+0x580c>
   16d48:	ldr	fp, [sp, #36]	; 0x24
   16d4c:	ldr	r2, [sp, #56]	; 0x38
   16d50:	add	r2, r2, #1
   16d54:	mov	r4, r2
   16d58:	ldrb	r3, [r2], #1
   16d5c:	cmp	r3, #9
   16d60:	bcc	16d74 <__assert_fail@plt+0x59a4>
   16d64:	cmp	r3, #13
   16d68:	bls	16d54 <__assert_fail@plt+0x5984>
   16d6c:	cmp	r3, #32
   16d70:	beq	16d54 <__assert_fail@plt+0x5984>
   16d74:	mov	r1, r9
   16d78:	add	r2, sp, #240	; 0xf0
   16d7c:	str	fp, [sp, #36]	; 0x24
   16d80:	mov	r0, r6
   16d84:	bl	1ccec <__assert_fail@plt+0xb91c>
   16d88:	cmp	r0, #0
   16d8c:	moveq	r4, r0
   16d90:	bne	16874 <__assert_fail@plt+0x54a4>
   16d94:	b	16bc8 <__assert_fail@plt+0x57f8>
   16d98:	mvn	r3, #0
   16d9c:	str	r3, [sp, #888]	; 0x378
   16da0:	str	r0, [sp, #892]	; 0x37c
   16da4:	b	16a48 <__assert_fail@plt+0x5678>
   16da8:	mov	r2, #5
   16dac:	movw	r1, #7824	; 0x1e90
   16db0:	movt	r1, #2
   16db4:	bl	11130 <dcgettext@plt>
   16db8:	bl	12cd8 <__assert_fail@plt+0x1908>
   16dbc:	ldrb	r0, [sp, #840]	; 0x348
   16dc0:	cmp	r0, #0
   16dc4:	bne	17584 <__assert_fail@plt+0x61b4>
   16dc8:	ldr	r7, [sp, #864]	; 0x360
   16dcc:	movw	r4, #16800	; 0x41a0
   16dd0:	movt	r4, #3
   16dd4:	ldr	r5, [r4]
   16dd8:	cmp	r7, #0
   16ddc:	movwne	r1, #7872	; 0x1ec0
   16de0:	movtne	r1, #2
   16de4:	bne	174d4 <__assert_fail@plt+0x6104>
   16de8:	ldr	r3, [sp, #964]	; 0x3c4
   16dec:	cmp	r3, #0
   16df0:	beq	174c8 <__assert_fail@plt+0x60f8>
   16df4:	ldr	r3, [sp, #960]	; 0x3c0
   16df8:	cmp	r3, r6
   16dfc:	beq	17630 <__assert_fail@plt+0x6260>
   16e00:	movw	r1, #7896	; 0x1ed8
   16e04:	movt	r1, #2
   16e08:	mov	r0, r7
   16e0c:	mov	r2, #5
   16e10:	bl	11130 <dcgettext@plt>
   16e14:	mov	r2, r0
   16e18:	mov	r1, #1
   16e1c:	ldr	r3, [sp, #964]	; 0x3c4
   16e20:	mov	r0, r5
   16e24:	bl	112ec <__fprintf_chk@plt>
   16e28:	b	174ec <__assert_fail@plt+0x611c>
   16e2c:	add	r3, sp, #728	; 0x2d8
   16e30:	ldrd	r8, [r3]
   16e34:	cmp	r8, #0
   16e38:	sbcs	r3, r9, #0
   16e3c:	blt	176f0 <__assert_fail@plt+0x6320>
   16e40:	ldr	r3, [sp, #736]	; 0x2e0
   16e44:	cmp	r3, #2
   16e48:	beq	17660 <__assert_fail@plt+0x6290>
   16e4c:	movw	r1, #63636	; 0xf894
   16e50:	movt	r1, #65535	; 0xffff
   16e54:	adds	r1, r8, r1
   16e58:	mvn	r0, #0
   16e5c:	mov	r3, #0
   16e60:	movw	r2, #1900	; 0x76c
   16e64:	str	r1, [sp, #64]	; 0x40
   16e68:	adc	r1, r9, r0
   16e6c:	cmp	r9, r3
   16e70:	cmpeq	r8, r2
   16e74:	mov	r5, #0
   16e78:	str	r1, [sp, #68]	; 0x44
   16e7c:	ldrd	r2, [sp, #64]	; 0x40
   16e80:	bcs	1761c <__assert_fail@plt+0x624c>
   16e84:	cmp	r2, #0
   16e88:	sbcs	r3, r3, #0
   16e8c:	bge	17628 <__assert_fail@plt+0x6258>
   16e90:	ldrd	r0, [sp, #64]	; 0x40
   16e94:	asr	r3, r0, #31
   16e98:	str	r0, [sp, #164]	; 0xa4
   16e9c:	cmp	r1, r3
   16ea0:	cmpeq	r0, r0
   16ea4:	movne	r5, #1
   16ea8:	and	r5, r5, #1
   16eac:	cmp	r5, #0
   16eb0:	bne	176c0 <__assert_fail@plt+0x62f0>
   16eb4:	add	r3, sp, #744	; 0x2e8
   16eb8:	mvn	r8, #0
   16ebc:	ldrb	ip, [sp, #869]	; 0x365
   16ec0:	mvn	r9, #0
   16ec4:	ldrd	r2, [r3]
   16ec8:	adds	r0, r2, r8
   16ecc:	adcs	r1, r3, r9
   16ed0:	asr	r3, r0, #31
   16ed4:	mov	lr, r0
   16ed8:	movvs	r7, #1
   16edc:	movvc	r7, #0
   16ee0:	str	r0, [sp, #160]	; 0xa0
   16ee4:	cmp	r1, r3
   16ee8:	cmpeq	r0, r0
   16eec:	movne	r7, #1
   16ef0:	cmp	r7, #0
   16ef4:	bne	176cc <__assert_fail@plt+0x62fc>
   16ef8:	add	r3, sp, #752	; 0x2f0
   16efc:	ldrd	r8, [r3]
   16f00:	asr	r1, r8, #31
   16f04:	str	r8, [sp, #156]	; 0x9c
   16f08:	cmp	r9, r1
   16f0c:	cmpeq	r8, r8
   16f10:	movne	r3, #1
   16f14:	moveq	r3, #0
   16f18:	str	r3, [sp, #40]	; 0x28
   16f1c:	bne	176cc <__assert_fail@plt+0x62fc>
   16f20:	ldr	r0, [sp, #860]	; 0x35c
   16f24:	cmp	r0, #0
   16f28:	bne	17768 <__assert_fail@plt+0x6398>
   16f2c:	ldrb	r3, [sp, #841]	; 0x349
   16f30:	cmp	r3, #0
   16f34:	beq	17d3c <__assert_fail@plt+0x696c>
   16f38:	ldr	r3, [sp, #844]	; 0x34c
   16f3c:	cmp	r3, #0
   16f40:	bne	17d3c <__assert_fail@plt+0x696c>
   16f44:	ldr	r2, [sp, #848]	; 0x350
   16f48:	cmp	r2, #0
   16f4c:	beq	17768 <__assert_fail@plt+0x6398>
   16f50:	mov	r0, #0
   16f54:	mov	r1, #0
   16f58:	cmp	ip, #0
   16f5c:	strd	r0, [sp, #144]	; 0x90
   16f60:	str	r5, [sp, #152]	; 0x98
   16f64:	str	r5, [sp, #780]	; 0x30c
   16f68:	bne	17d68 <__assert_fail@plt+0x6998>
   16f6c:	mov	r7, r5
   16f70:	mov	r2, r5
   16f74:	mvn	r1, #0
   16f78:	str	r1, [sp, #176]	; 0xb0
   16f7c:	ldr	r9, [sp, #164]	; 0xa4
   16f80:	mov	r0, r6
   16f84:	str	r3, [sp, #192]	; 0xc0
   16f88:	ldr	r1, [sp, #852]	; 0x354
   16f8c:	str	r2, [sp, #196]	; 0xc4
   16f90:	str	r7, [sp, #200]	; 0xc8
   16f94:	str	r8, [sp, #204]	; 0xcc
   16f98:	str	lr, [sp, #208]	; 0xd0
   16f9c:	cmp	r1, #0
   16fa0:	mvn	r1, #0
   16fa4:	ldrne	ip, [sp, #708]	; 0x2c4
   16fa8:	str	r1, [sp, #168]	; 0xa8
   16fac:	add	r1, sp, #144	; 0x90
   16fb0:	ldreq	ip, [sp, #176]	; 0xb0
   16fb4:	str	r9, [sp, #212]	; 0xd4
   16fb8:	strne	ip, [sp, #176]	; 0xb0
   16fbc:	str	ip, [sp, #224]	; 0xe0
   16fc0:	bl	1ce08 <__assert_fail@plt+0xba38>
   16fc4:	ldr	r3, [sp, #168]	; 0xa8
   16fc8:	mov	r9, r0
   16fcc:	cmp	r3, #0
   16fd0:	blt	17834 <__assert_fail@plt+0x6464>
   16fd4:	ldr	r2, [sp, #144]	; 0x90
   16fd8:	ldrd	r0, [sp, #148]	; 0x94
   16fdc:	ldr	ip, [sp, #192]	; 0xc0
   16fe0:	ldr	r3, [sp, #196]	; 0xc4
   16fe4:	eor	r2, r2, ip
   16fe8:	ldr	ip, [sp, #200]	; 0xc8
   16fec:	eor	r3, r3, r0
   16ff0:	ldr	r0, [sp, #156]	; 0x9c
   16ff4:	orr	r3, r2, r3
   16ff8:	ldr	r2, [sp, #204]	; 0xcc
   16ffc:	eor	ip, ip, r1
   17000:	orr	r3, r3, ip
   17004:	ldr	r1, [sp, #160]	; 0xa0
   17008:	ldr	ip, [sp, #208]	; 0xd0
   1700c:	eor	r2, r2, r0
   17010:	orr	r3, r3, r2
   17014:	ldr	r0, [sp, #164]	; 0xa4
   17018:	ldr	r2, [sp, #212]	; 0xd4
   1701c:	eor	r1, r1, ip
   17020:	orr	r3, r3, r1
   17024:	eor	r2, r2, r0
   17028:	orrs	r3, r3, r2
   1702c:	bne	17834 <__assert_fail@plt+0x6464>
   17030:	ldr	r3, [sp, #848]	; 0x350
   17034:	cmp	r3, #0
   17038:	beq	17bc8 <__assert_fail@plt+0x67f8>
   1703c:	ldr	r3, [sp, #844]	; 0x34c
   17040:	cmp	r3, #0
   17044:	bne	17d78 <__assert_fail@plt+0x69a8>
   17048:	add	r3, sp, #696	; 0x2b8
   1704c:	ldrd	sl, [r3]
   17050:	cmp	sl, #1
   17054:	sbcs	r3, fp, #0
   17058:	blt	17074 <__assert_fail@plt+0x5ca4>
   1705c:	ldr	r0, [sp, #168]	; 0xa8
   17060:	ldr	r1, [sp, #704]	; 0x2c0
   17064:	cmp	r0, r1
   17068:	beq	17074 <__assert_fail@plt+0x5ca4>
   1706c:	subs	sl, sl, #1
   17070:	sbc	fp, fp, #0
   17074:	cmp	fp, sl, asr #31
   17078:	mov	lr, #0
   1707c:	bne	184c4 <__assert_fail@plt+0x70f4>
   17080:	mov	r3, #7
   17084:	smull	r2, r3, sl, r3
   17088:	mov	r1, r2
   1708c:	cmp	lr, #0
   17090:	mov	r8, r1
   17094:	mov	r9, r3
   17098:	bne	18164 <__assert_fail@plt+0x6d94>
   1709c:	ldr	r2, [sp, #168]	; 0xa8
   170a0:	movw	r1, #9363	; 0x2493
   170a4:	movt	r1, #37449	; 0x9249
   170a8:	ldr	r3, [sp, #704]	; 0x2c0
   170ac:	sub	r3, r3, r2
   170b0:	add	r3, r3, #7
   170b4:	asr	r2, r3, #31
   170b8:	smull	r0, r1, r1, r3
   170bc:	add	r1, r1, r3
   170c0:	rsb	r2, r2, r1, asr #2
   170c4:	rsb	r2, r2, r2, lsl #3
   170c8:	sub	r3, r3, r2
   170cc:	mov	r2, r3
   170d0:	asr	r3, r3, #31
   170d4:	adds	r0, r2, r8
   170d8:	adcs	r1, r3, r9
   170dc:	bvs	18164 <__assert_fail@plt+0x6d94>
   170e0:	ldr	r2, [sp, #156]	; 0x9c
   170e4:	asr	r3, r2, #31
   170e8:	adds	r8, r0, r2
   170ec:	adcs	r9, r1, r3
   170f0:	asr	r3, r8, #31
   170f4:	str	r8, [sp, #156]	; 0x9c
   170f8:	movvs	r7, #1
   170fc:	movvc	r7, #0
   17100:	cmp	r9, r3
   17104:	cmpeq	r8, r8
   17108:	movne	r7, #1
   1710c:	cmp	r7, #0
   17110:	bne	18164 <__assert_fail@plt+0x6d94>
   17114:	mvn	r3, #0
   17118:	add	r1, sp, #144	; 0x90
   1711c:	mov	r0, r6
   17120:	str	r3, [sp, #176]	; 0xb0
   17124:	bl	1ce08 <__assert_fail@plt+0xba38>
   17128:	cmn	r0, #1
   1712c:	mov	r9, r0
   17130:	beq	18164 <__assert_fail@plt+0x6d94>
   17134:	ldrb	r3, [sp, #869]	; 0x365
   17138:	cmp	r3, #0
   1713c:	str	r3, [sp, #40]	; 0x28
   17140:	bne	17b80 <__assert_fail@plt+0x67b0>
   17144:	add	r1, sp, #792	; 0x318
   17148:	add	r3, sp, #784	; 0x310
   1714c:	ldr	ip, [sp, #800]	; 0x320
   17150:	ldrd	r0, [r1]
   17154:	ldrd	sl, [r3]
   17158:	strd	r0, [sp, #48]	; 0x30
   1715c:	ldr	lr, [sp, #48]	; 0x30
   17160:	mov	r7, fp
   17164:	strd	sl, [sp, #64]	; 0x40
   17168:	ldr	r0, [sp, #52]	; 0x34
   1716c:	ldr	r1, [sp, #804]	; 0x324
   17170:	orr	lr, lr, sl
   17174:	orr	r2, lr, ip
   17178:	orr	r0, r0, fp
   1717c:	orr	r3, r0, r1
   17180:	orrs	r3, r2, r3
   17184:	beq	18154 <__assert_fail@plt+0x6d84>
   17188:	ldrd	r8, [sp, #64]	; 0x40
   1718c:	ldr	r2, [sp, #164]	; 0xa4
   17190:	asr	r3, r2, #31
   17194:	adds	r0, r2, r8
   17198:	adcs	r1, r3, r9
   1719c:	asr	r3, r0, #31
   171a0:	movvs	ip, #1
   171a4:	movvc	ip, #0
   171a8:	cmp	r1, r3
   171ac:	cmpeq	r0, r0
   171b0:	bne	16bc8 <__assert_fail@plt+0x57f8>
   171b4:	cmp	ip, #0
   171b8:	moveq	r5, r0
   171bc:	bne	16bc8 <__assert_fail@plt+0x57f8>
   171c0:	ldrd	r0, [sp, #48]	; 0x30
   171c4:	ldr	r2, [sp, #160]	; 0xa0
   171c8:	asr	r3, r2, #31
   171cc:	adds	r8, r2, r0
   171d0:	adcs	r9, r3, r1
   171d4:	asr	r1, r8, #31
   171d8:	movvs	r3, #1
   171dc:	movvc	r3, #0
   171e0:	cmp	r9, r1
   171e4:	strd	r8, [sp, #48]	; 0x30
   171e8:	cmpeq	r8, r8
   171ec:	bne	17e7c <__assert_fail@plt+0x6aac>
   171f0:	cmp	r3, #0
   171f4:	bne	17e7c <__assert_fail@plt+0x6aac>
   171f8:	add	r3, sp, #800	; 0x320
   171fc:	ldr	r0, [sp, #156]	; 0x9c
   17200:	ldrd	r2, [r3]
   17204:	asr	r1, r0, #31
   17208:	adds	r8, r0, r2
   1720c:	adcs	r9, r1, r3
   17210:	asr	r3, r8, #31
   17214:	mov	r0, r8
   17218:	mov	r1, r9
   1721c:	movvs	r7, #1
   17220:	movvc	r7, #0
   17224:	cmp	r9, r3
   17228:	cmpeq	r8, r8
   1722c:	strd	r0, [sp, #56]	; 0x38
   17230:	bne	17e7c <__assert_fail@plt+0x6aac>
   17234:	cmp	r7, #0
   17238:	bne	17e7c <__assert_fail@plt+0x6aac>
   1723c:	ldr	ip, [sp, #48]	; 0x30
   17240:	add	r1, sp, #144	; 0x90
   17244:	mov	r0, r6
   17248:	ldr	r3, [sp, #56]	; 0x38
   1724c:	ldr	lr, [sp, #200]	; 0xc8
   17250:	str	r5, [sp, #164]	; 0xa4
   17254:	str	ip, [sp, #160]	; 0xa0
   17258:	ldr	ip, [sp, #224]	; 0xe0
   1725c:	str	r3, [sp, #156]	; 0x9c
   17260:	ldrd	r2, [sp, #192]	; 0xc0
   17264:	strd	r2, [sp, #144]	; 0x90
   17268:	str	lr, [sp, #152]	; 0x98
   1726c:	str	ip, [sp, #176]	; 0xb0
   17270:	bl	1ce08 <__assert_fail@plt+0xba38>
   17274:	cmn	r0, #1
   17278:	mov	r9, r0
   1727c:	ldrb	r3, [sp, #869]	; 0x365
   17280:	beq	185f0 <__assert_fail@plt+0x7220>
   17284:	cmp	r3, #0
   17288:	str	r3, [sp, #40]	; 0x28
   1728c:	bne	17eb0 <__assert_fail@plt+0x6ae0>
   17290:	ldr	r3, [sp, #864]	; 0x360
   17294:	cmp	r3, #0
   17298:	beq	172cc <__assert_fail@plt+0x5efc>
   1729c:	ldr	r2, [sp, #180]	; 0xb4
   172a0:	ldr	r1, [sp, #712]	; 0x2c8
   172a4:	asr	fp, r2, #31
   172a8:	subs	r2, r1, r2
   172ac:	rsc	r3, fp, r1, asr #31
   172b0:	subs	sl, r0, r2
   172b4:	asr	r1, sl, #31
   172b8:	rsc	fp, r3, r0, asr #31
   172bc:	cmp	fp, r1
   172c0:	cmpeq	sl, sl
   172c4:	bne	16bc8 <__assert_fail@plt+0x57f8>
   172c8:	mov	r9, sl
   172cc:	ldr	r7, [sp, #808]	; 0x328
   172d0:	mov	ip, #0
   172d4:	ldr	r5, [sp, #812]	; 0x32c
   172d8:	cmp	r5, r7, asr #31
   172dc:	bne	18574 <__assert_fail@plt+0x71a4>
   172e0:	mov	r2, #3600	; 0xe10
   172e4:	smull	r2, r3, r7, r2
   172e8:	mov	r0, r2
   172ec:	mov	r1, r3
   172f0:	cmp	ip, #0
   172f4:	mov	r2, r0
   172f8:	mov	r3, r1
   172fc:	bne	16bc8 <__assert_fail@plt+0x57f8>
   17300:	asr	r1, r9, #31
   17304:	adds	r8, r9, r2
   17308:	adcs	r9, r1, r3
   1730c:	movvs	r3, #1
   17310:	movvc	r3, #0
   17314:	str	r3, [sp, #48]	; 0x30
   17318:	strd	r8, [sp, #56]	; 0x38
   1731c:	bvs	16bc8 <__assert_fail@plt+0x57f8>
   17320:	ldr	r8, [sp, #816]	; 0x330
   17324:	mov	r2, #0
   17328:	ldr	r9, [sp, #820]	; 0x334
   1732c:	cmp	r9, r8, asr #31
   17330:	bne	18500 <__assert_fail@plt+0x7130>
   17334:	mov	r0, #60	; 0x3c
   17338:	smull	r0, r1, r8, r0
   1733c:	mov	ip, r0
   17340:	mov	r3, r1
   17344:	cmp	r2, #0
   17348:	bne	1812c <__assert_fail@plt+0x6d5c>
   1734c:	ldrd	sl, [sp, #56]	; 0x38
   17350:	adds	r2, sl, ip
   17354:	adcs	r3, fp, r3
   17358:	bvs	1812c <__assert_fail@plt+0x6d5c>
   1735c:	add	r1, sp, #824	; 0x338
   17360:	ldrd	r0, [r1]
   17364:	adds	sl, r2, r0
   17368:	strd	r0, [sp, #64]	; 0x40
   1736c:	adcs	fp, r3, r1
   17370:	strd	sl, [sp, #72]	; 0x48
   17374:	bvs	1812c <__assert_fail@plt+0x6d5c>
   17378:	ldr	r1, [sp, #780]	; 0x30c
   1737c:	ldr	r3, [sp, #832]	; 0x340
   17380:	mov	r0, r3
   17384:	asr	r3, r3, #31
   17388:	mov	sl, r0
   1738c:	mov	fp, r3
   17390:	add	r3, pc, #968	; 0x3c8
   17394:	ldrd	r2, [r3]
   17398:	strd	sl, [sp, #56]	; 0x38
   1739c:	adds	sl, r0, r1
   173a0:	adc	fp, fp, r1, asr #31
   173a4:	str	r0, [sp, #80]	; 0x50
   173a8:	mov	r0, sl
   173ac:	mov	r1, fp
   173b0:	bl	20354 <__assert_fail@plt+0xef84>
   173b4:	mov	r1, #51712	; 0xca00
   173b8:	movt	r1, #15258	; 0x3b9a
   173bc:	adds	r0, r2, r1
   173c0:	mov	r2, r1
   173c4:	adc	r1, r3, #0
   173c8:	mov	r3, #0
   173cc:	bl	20354 <__assert_fail@plt+0xef84>
   173d0:	mov	r0, r2
   173d4:	mov	r1, r3
   173d8:	mov	r2, #51712	; 0xca00
   173dc:	movt	r2, #15258	; 0x3b9a
   173e0:	str	r0, [sp, #92]	; 0x5c
   173e4:	subs	r0, sl, r0
   173e8:	mov	r3, #0
   173ec:	sbc	r1, fp, r1
   173f0:	bl	20354 <__assert_fail@plt+0xef84>
   173f4:	ldrd	sl, [sp, #72]	; 0x48
   173f8:	asr	r1, r0, #31
   173fc:	adds	r2, sl, r0
   17400:	adcs	r3, fp, r1
   17404:	mov	sl, r2
   17408:	mov	r1, r3
   1740c:	mov	fp, r3
   17410:	asr	r3, r2, #31
   17414:	movvs	ip, #1
   17418:	movvc	ip, #0
   1741c:	cmp	r1, r3
   17420:	mov	lr, ip
   17424:	cmpeq	r2, r2
   17428:	bne	1812c <__assert_fail@plt+0x6d5c>
   1742c:	cmp	ip, #0
   17430:	bne	1812c <__assert_fail@plt+0x6d5c>
   17434:	ldr	r3, [sp, #48]	; 0x30
   17438:	cmp	r3, #0
   1743c:	ldr	r3, [sp, #88]	; 0x58
   17440:	str	r2, [r3]
   17444:	ldr	r2, [sp, #92]	; 0x5c
   17448:	str	r2, [r3, #4]
   1744c:	beq	1747c <__assert_fail@plt+0x60ac>
   17450:	orr	r2, r9, r5
   17454:	ldrd	r4, [sp, #64]	; 0x40
   17458:	orr	r3, r8, r7
   1745c:	ldr	ip, [sp, #80]	; 0x50
   17460:	orr	r3, r3, r4
   17464:	orr	r2, r2, r5
   17468:	orr	r0, r3, ip
   1746c:	ldr	r3, [sp, #60]	; 0x3c
   17470:	orr	r1, r2, r3
   17474:	orrs	r3, r0, r1
   17478:	bne	18668 <__assert_fail@plt+0x7298>
   1747c:	ldr	r7, [sp, #40]	; 0x28
   17480:	b	16a80 <__assert_fail@plt+0x56b0>
   17484:	str	r2, [sp, #56]	; 0x38
   17488:	bl	1dd30 <__assert_fail@plt+0xc960>
   1748c:	subs	r3, r0, #0
   17490:	ldr	r2, [sp, #56]	; 0x38
   17494:	str	r3, [sp, #36]	; 0x24
   17498:	beq	174b8 <__assert_fail@plt+0x60e8>
   1749c:	ldrb	lr, [r4, #4]
   174a0:	str	r3, [sp, #964]	; 0x3c4
   174a4:	b	16cec <__assert_fail@plt+0x591c>
   174a8:	add	r0, sp, #108	; 0x6c
   174ac:	mov	r9, r0
   174b0:	bl	1293c <__assert_fail@plt+0x156c>
   174b4:	b	16794 <__assert_fail@plt+0x53c4>
   174b8:	mov	r3, #0
   174bc:	mov	r4, r3
   174c0:	str	r3, [sp, #36]	; 0x24
   174c4:	b	16bdc <__assert_fail@plt+0x580c>
   174c8:	movw	r1, #7992	; 0x1f38
   174cc:	movt	r1, #2
   174d0:	mov	r0, r3
   174d4:	mov	r2, #5
   174d8:	bl	11130 <dcgettext@plt>
   174dc:	mov	r2, r0
   174e0:	mov	r1, #1
   174e4:	mov	r0, r5
   174e8:	bl	112ec <__fprintf_chk@plt>
   174ec:	ldr	r2, [sp, #852]	; 0x354
   174f0:	ldr	r5, [r4]
   174f4:	ldr	r3, [sp, #864]	; 0x360
   174f8:	cmp	r2, #0
   174fc:	beq	17534 <__assert_fail@plt+0x6164>
   17500:	cmp	r3, #0
   17504:	bne	1753c <__assert_fail@plt+0x616c>
   17508:	ldr	r3, [sp, #708]	; 0x2c4
   1750c:	cmp	r3, #0
   17510:	ble	17564 <__assert_fail@plt+0x6194>
   17514:	mov	r3, r5
   17518:	movw	r0, #8008	; 0x1f48
   1751c:	movt	r0, #2
   17520:	mov	r2, #5
   17524:	mov	r1, #1
   17528:	bl	11184 <fwrite@plt>
   1752c:	ldr	r5, [r4]
   17530:	ldr	r3, [sp, #864]	; 0x360
   17534:	cmp	r3, #0
   17538:	beq	17564 <__assert_fail@plt+0x6194>
   1753c:	add	r1, sp, #116	; 0x74
   17540:	ldr	r0, [sp, #712]	; 0x2c8
   17544:	bl	12b24 <__assert_fail@plt+0x1754>
   17548:	mov	r3, r0
   1754c:	movw	r2, #8016	; 0x1f50
   17550:	movt	r2, #2
   17554:	mov	r0, r5
   17558:	mov	r1, #1
   1755c:	bl	112ec <__fprintf_chk@plt>
   17560:	ldr	r5, [r4]
   17564:	mov	r1, r5
   17568:	mov	r0, #10
   1756c:	bl	11340 <fputc@plt>
   17570:	ldrb	r4, [sp, #840]	; 0x348
   17574:	ldrb	r7, [sp, #869]	; 0x365
   17578:	cmp	r4, #0
   1757c:	beq	16c04 <__assert_fail@plt+0x5834>
   17580:	b	16a70 <__assert_fail@plt+0x56a0>
   17584:	movw	r4, #16800	; 0x41a0
   17588:	movt	r4, #3
   1758c:	ldr	r7, [r4]
   17590:	mov	r0, r5
   17594:	mov	r2, #5
   17598:	movw	r1, #7844	; 0x1ea4
   1759c:	movt	r1, #2
   175a0:	bl	11130 <dcgettext@plt>
   175a4:	mov	r2, r0
   175a8:	mov	r1, #1
   175ac:	mov	r0, r7
   175b0:	bl	112ec <__fprintf_chk@plt>
   175b4:	b	174ec <__assert_fail@plt+0x611c>
   175b8:	mov	r2, #5
   175bc:	movw	r1, #10096	; 0x2770
   175c0:	movt	r1, #2
   175c4:	mov	r0, #0
   175c8:	bl	11130 <dcgettext@plt>
   175cc:	ldr	r1, [sp, #964]	; 0x3c4
   175d0:	bl	12cd8 <__assert_fail@plt+0x1908>
   175d4:	b	16ac4 <__assert_fail@plt+0x56f4>
   175d8:	movw	r0, #8132	; 0x1fc4
   175dc:	movt	r0, #2
   175e0:	bl	12cd8 <__assert_fail@plt+0x1908>
   175e4:	b	16c68 <__assert_fail@plt+0x5898>
   175e8:	movw	r0, #8096	; 0x1fa0
   175ec:	movt	r0, #2
   175f0:	bl	12cd8 <__assert_fail@plt+0x1908>
   175f4:	b	16c5c <__assert_fail@plt+0x588c>
   175f8:	movw	r0, #8060	; 0x1f7c
   175fc:	movt	r0, #2
   17600:	bl	12cd8 <__assert_fail@plt+0x1908>
   17604:	b	16c50 <__assert_fail@plt+0x5880>
   17608:	movw	r0, #8024	; 0x1f58
   1760c:	movt	r0, #2
   17610:	bl	12cd8 <__assert_fail@plt+0x1908>
   17614:	ldr	r1, [sp, #844]	; 0x34c
   17618:	b	16c48 <__assert_fail@plt+0x5878>
   1761c:	cmp	r2, #0
   17620:	sbcs	r3, r3, #0
   17624:	bge	16e90 <__assert_fail@plt+0x5ac0>
   17628:	mov	r5, #1
   1762c:	b	16e90 <__assert_fail@plt+0x5ac0>
   17630:	movw	r1, #7920	; 0x1ef0
   17634:	movt	r1, #2
   17638:	ldr	r0, [sp, #964]	; 0x3c4
   1763c:	bl	110a0 <strcmp@plt>
   17640:	cmp	r0, #0
   17644:	movweq	r1, #7928	; 0x1ef8
   17648:	movteq	r1, #2
   1764c:	beq	174d4 <__assert_fail@plt+0x6104>
   17650:	movw	r1, #7964	; 0x1f1c
   17654:	movt	r1, #2
   17658:	mov	r0, r7
   1765c:	b	16e0c <__assert_fail@plt+0x5a3c>
   17660:	cmp	r8, #69	; 0x45
   17664:	mov	r5, #0
   17668:	sbcs	r3, r9, #0
   1766c:	movwge	sl, #1900	; 0x76c
   17670:	movlt	sl, #2000	; 0x7d0
   17674:	adds	sl, r8, sl
   17678:	adc	r5, r9, r5
   1767c:	cmp	r7, #0
   17680:	moveq	r8, sl
   17684:	moveq	r9, r5
   17688:	beq	16e4c <__assert_fail@plt+0x5a7c>
   1768c:	mov	r2, #5
   17690:	movw	r1, #8216	; 0x2018
   17694:	movt	r1, #2
   17698:	mov	r0, #0
   1769c:	bl	11130 <dcgettext@plt>
   176a0:	mov	r2, r8
   176a4:	mov	r3, r9
   176a8:	str	sl, [sp]
   176ac:	str	r5, [sp, #4]
   176b0:	mov	r8, sl
   176b4:	mov	r9, r5
   176b8:	bl	12cd8 <__assert_fail@plt+0x1908>
   176bc:	b	16e4c <__assert_fail@plt+0x5a7c>
   176c0:	cmp	r7, #0
   176c4:	bne	17b5c <__assert_fail@plt+0x678c>
   176c8:	ldrb	ip, [sp, #869]	; 0x365
   176cc:	cmp	ip, #0
   176d0:	beq	16bc8 <__assert_fail@plt+0x57f8>
   176d4:	mov	r2, #5
   176d8:	movw	r1, #8292	; 0x2064
   176dc:	movt	r1, #2
   176e0:	mov	r0, #0
   176e4:	bl	11130 <dcgettext@plt>
   176e8:	bl	12cd8 <__assert_fail@plt+0x1908>
   176ec:	b	16bc8 <__assert_fail@plt+0x57f8>
   176f0:	movw	r0, #63636	; 0xf894
   176f4:	movt	r0, #65535	; 0xffff
   176f8:	subs	r2, r0, r8
   176fc:	mvn	r1, #0
   17700:	sbcs	r3, r1, r9
   17704:	asr	r1, r2, #31
   17708:	mov	r5, r4
   1770c:	movvs	r5, #1
   17710:	str	r2, [sp, #164]	; 0xa4
   17714:	cmp	r3, r1
   17718:	cmpeq	r2, r2
   1771c:	movne	r5, #1
   17720:	and	r5, r5, #1
   17724:	b	16eac <__assert_fail@plt+0x5adc>
   17728:	movw	r1, #269	; 0x10d
   1772c:	str	fp, [sp, #36]	; 0x24
   17730:	str	r3, [sp, #892]	; 0x37c
   17734:	str	r1, [sp, #896]	; 0x380
   17738:	str	r2, [sp, #900]	; 0x384
   1773c:	str	r8, [sp, #904]	; 0x388
   17740:	b	16a24 <__assert_fail@plt+0x5654>
   17744:	mov	r2, #5
   17748:	mov	r0, r3
   1774c:	movw	r1, #10040	; 0x2738
   17750:	movt	r1, #2
   17754:	bl	11130 <dcgettext@plt>
   17758:	bl	12cd8 <__assert_fail@plt+0x1908>
   1775c:	b	16ac4 <__assert_fail@plt+0x56f4>
   17760:	blcc	fe6c9f68 <optarg@@GLIBC_2.4+0xfe695dc0>
   17764:	andeq	r0, r0, r0
   17768:	ldr	r7, [sp, #716]	; 0x2cc
   1776c:	add	r3, sp, #760	; 0x2f8
   17770:	ldrd	r2, [r3]
   17774:	cmp	r7, #0
   17778:	beq	17e3c <__assert_fail@plt+0x6a6c>
   1777c:	cmp	r7, #1
   17780:	beq	17dc0 <__assert_fail@plt+0x69f0>
   17784:	cmp	r3, #0
   17788:	cmpeq	r2, #23
   1778c:	bhi	18334 <__assert_fail@plt+0x6f64>
   17790:	mov	r7, r2
   17794:	str	r7, [sp, #152]	; 0x98
   17798:	ldr	r2, [sp, #768]	; 0x300
   1779c:	cmp	ip, #0
   177a0:	ldr	r3, [sp, #776]	; 0x308
   177a4:	str	r3, [sp, #144]	; 0x90
   177a8:	str	r2, [sp, #148]	; 0x94
   177ac:	beq	1781c <__assert_fail@plt+0x644c>
   177b0:	cmp	r0, #0
   177b4:	beq	182e8 <__assert_fail@plt+0x6f18>
   177b8:	movw	r1, #8360	; 0x20a8
   177bc:	movt	r1, #2
   177c0:	mov	r2, #5
   177c4:	mov	r0, #0
   177c8:	bl	11130 <dcgettext@plt>
   177cc:	mov	r8, r0
   177d0:	ldr	lr, [sp, #144]	; 0x90
   177d4:	movw	r2, #8452	; 0x2104
   177d8:	movt	r2, #2
   177dc:	add	r7, sp, #388	; 0x184
   177e0:	mov	r3, #100	; 0x64
   177e4:	ldr	ip, [sp, #148]	; 0x94
   177e8:	mov	r1, r3
   177ec:	mov	r0, r7
   177f0:	ldr	r9, [sp, #152]	; 0x98
   177f4:	stm	sp, {r2, r9, ip, lr}
   177f8:	mov	r2, #1
   177fc:	bl	113c4 <__snprintf_chk@plt>
   17800:	mov	r1, r7
   17804:	mov	r0, r8
   17808:	bl	12cd8 <__assert_fail@plt+0x1908>
   1780c:	add	r2, sp, #148	; 0x94
   17810:	ldr	r3, [sp, #144]	; 0x90
   17814:	ldm	r2, {r2, r7, r8, lr}
   17818:	ldr	r0, [sp, #860]	; 0x35c
   1781c:	ldr	r1, [sp, #844]	; 0x34c
   17820:	ldr	ip, [sp, #848]	; 0x350
   17824:	orr	r1, r1, ip
   17828:	orrs	r1, r1, r0
   1782c:	beq	16f7c <__assert_fail@plt+0x5bac>
   17830:	b	16f74 <__assert_fail@plt+0x5ba4>
   17834:	ldr	r7, [sp, #864]	; 0x360
   17838:	cmp	r7, #0
   1783c:	bne	18204 <__assert_fail@plt+0x6e34>
   17840:	ldr	r3, [sp, #144]	; 0x90
   17844:	ldr	r2, [sp, #148]	; 0x94
   17848:	ldr	ip, [sp, #152]	; 0x98
   1784c:	mov	fp, r3
   17850:	ldr	r1, [sp, #192]	; 0xc0
   17854:	str	r2, [sp, #64]	; 0x40
   17858:	ldr	r0, [sp, #196]	; 0xc4
   1785c:	ldr	r9, [sp, #156]	; 0x9c
   17860:	mov	sl, r1
   17864:	ldr	lr, [sp, #208]	; 0xd0
   17868:	cmp	r1, r3
   1786c:	cmpeq	r0, r2
   17870:	str	r0, [sp, #56]	; 0x38
   17874:	ldr	r2, [sp, #160]	; 0xa0
   17878:	str	ip, [sp, #80]	; 0x50
   1787c:	ldr	r1, [sp, #164]	; 0xa4
   17880:	ldr	r3, [sp, #200]	; 0xc8
   17884:	str	r2, [sp, #48]	; 0x30
   17888:	ldr	r8, [sp, #212]	; 0xd4
   1788c:	ldr	r5, [sp, #204]	; 0xcc
   17890:	str	r3, [sp, #72]	; 0x48
   17894:	str	lr, [sp, #88]	; 0x58
   17898:	str	r8, [sp, #92]	; 0x5c
   1789c:	str	r1, [sp, #96]	; 0x60
   178a0:	bne	178d8 <__assert_fail@plt+0x6508>
   178a4:	mov	r0, r3
   178a8:	sub	r3, r5, r9
   178ac:	clz	r3, r3
   178b0:	cmp	r0, ip
   178b4:	lsr	r3, r3, #5
   178b8:	moveq	r3, #0
   178bc:	cmp	r3, #0
   178c0:	beq	178d8 <__assert_fail@plt+0x6508>
   178c4:	cmp	lr, r2
   178c8:	cmpeq	r8, r1
   178cc:	moveq	r3, #1
   178d0:	movne	r3, #0
   178d4:	str	r3, [sp, #40]	; 0x28
   178d8:	ldrb	r3, [sp, #869]	; 0x365
   178dc:	cmp	r3, #0
   178e0:	beq	16bc8 <__assert_fail@plt+0x57f8>
   178e4:	mov	r2, #5
   178e8:	movw	r1, #8552	; 0x2168
   178ec:	movt	r1, #2
   178f0:	mov	r0, #0
   178f4:	bl	11130 <dcgettext@plt>
   178f8:	bl	12cd8 <__assert_fail@plt+0x1908>
   178fc:	mov	r2, #5
   17900:	movw	r1, #8588	; 0x218c
   17904:	movt	r1, #2
   17908:	mov	r0, #0
   1790c:	bl	11130 <dcgettext@plt>
   17910:	mov	r1, #0
   17914:	movw	r2, #7140	; 0x1be4
   17918:	movt	r2, #2
   1791c:	add	r3, sp, #192	; 0xc0
   17920:	str	r1, [sp]
   17924:	str	r1, [sp, #4]
   17928:	mov	r1, #100	; 0x64
   1792c:	str	r0, [sp, #100]	; 0x64
   17930:	add	r0, sp, #588	; 0x24c
   17934:	bl	201a8 <__assert_fail@plt+0xedd8>
   17938:	cmp	r0, #99	; 0x63
   1793c:	mov	r8, r0
   17940:	bgt	17950 <__assert_fail@plt+0x6580>
   17944:	ldr	r3, [sp, #864]	; 0x360
   17948:	cmp	r3, #0
   1794c:	bne	18800 <__assert_fail@plt+0x7430>
   17950:	add	r1, sp, #588	; 0x24c
   17954:	ldr	r0, [sp, #100]	; 0x64
   17958:	bl	12cd8 <__assert_fail@plt+0x1908>
   1795c:	mov	r2, #5
   17960:	movw	r1, #8620	; 0x21ac
   17964:	movt	r1, #2
   17968:	mov	r0, #0
   1796c:	bl	11130 <dcgettext@plt>
   17970:	str	r0, [sp, #100]	; 0x64
   17974:	mov	r0, #0
   17978:	add	r3, sp, #144	; 0x90
   1797c:	movw	r2, #7140	; 0x1be4
   17980:	movt	r2, #2
   17984:	mov	r1, #100	; 0x64
   17988:	str	r0, [sp]
   1798c:	str	r0, [sp, #4]
   17990:	add	r0, sp, #588	; 0x24c
   17994:	bl	201a8 <__assert_fail@plt+0xedd8>
   17998:	cmp	r0, #99	; 0x63
   1799c:	mov	r8, r0
   179a0:	bgt	179b0 <__assert_fail@plt+0x65e0>
   179a4:	ldr	r3, [sp, #864]	; 0x360
   179a8:	cmp	r3, #0
   179ac:	bne	18838 <__assert_fail@plt+0x7468>
   179b0:	add	r1, sp, #588	; 0x24c
   179b4:	ldr	r0, [sp, #100]	; 0x64
   179b8:	bl	12cd8 <__assert_fail@plt+0x1908>
   179bc:	movw	ip, #10188	; 0x27cc
   179c0:	movt	ip, #2
   179c4:	ldr	lr, [sp, #64]	; 0x40
   179c8:	movw	r2, #7740	; 0x1e3c
   179cc:	movt	r2, #2
   179d0:	ldr	r3, [sp, #92]	; 0x5c
   179d4:	movw	r0, #7748	; 0x1e44
   179d8:	movt	r0, #2
   179dc:	ldr	r1, [sp, #96]	; 0x60
   179e0:	cmp	r3, r1
   179e4:	ldr	r3, [sp, #72]	; 0x48
   179e8:	moveq	r2, ip
   179ec:	ldr	r1, [sp, #80]	; 0x50
   179f0:	str	r2, [sp, #4]
   179f4:	mov	r2, #1
   179f8:	cmp	r3, r1
   179fc:	ldr	r1, [sp, #56]	; 0x38
   17a00:	moveq	r3, ip
   17a04:	movne	r3, r0
   17a08:	str	r3, [sp, #16]
   17a0c:	mov	r3, #100	; 0x64
   17a10:	cmp	r1, lr
   17a14:	mov	r1, sl
   17a18:	ldr	lr, [sp, #48]	; 0x30
   17a1c:	moveq	r8, ip
   17a20:	movne	r8, r0
   17a24:	cmp	sl, fp
   17a28:	moveq	r1, ip
   17a2c:	movne	r1, r0
   17a30:	str	r8, [sp, #20]
   17a34:	str	r1, [sp, #24]
   17a38:	ldr	r1, [sp, #88]	; 0x58
   17a3c:	cmp	r1, lr
   17a40:	movw	lr, #8652	; 0x21cc
   17a44:	movt	lr, #2
   17a48:	moveq	r1, ip
   17a4c:	movne	r1, r0
   17a50:	cmp	r5, r9
   17a54:	movne	ip, r0
   17a58:	add	r0, sp, #588	; 0x24c
   17a5c:	str	lr, [sp]
   17a60:	str	r1, [sp, #8]
   17a64:	mov	r1, r3
   17a68:	str	ip, [sp, #12]
   17a6c:	bl	113c4 <__snprintf_chk@plt>
   17a70:	ldrb	r3, [sp, #639]	; 0x27f
   17a74:	cmp	r3, #32
   17a78:	bne	187c4 <__assert_fail@plt+0x73f4>
   17a7c:	ldrb	r3, [sp, #638]	; 0x27e
   17a80:	cmp	r3, #32
   17a84:	bne	187bc <__assert_fail@plt+0x73ec>
   17a88:	ldr	fp, [sp, #36]	; 0x24
   17a8c:	add	r3, sp, #588	; 0x24c
   17a90:	add	r2, r3, #49	; 0x31
   17a94:	mov	r3, #50	; 0x32
   17a98:	ldr	sl, [sp, #40]	; 0x28
   17a9c:	sub	r1, r3, #1
   17aa0:	ldrb	r0, [r2], #-1
   17aa4:	cmp	r0, #32
   17aa8:	bne	17ab4 <__assert_fail@plt+0x66e4>
   17aac:	subs	r3, r1, #0
   17ab0:	bne	17a9c <__assert_fail@plt+0x66cc>
   17ab4:	str	fp, [sp, #36]	; 0x24
   17ab8:	str	sl, [sp, #40]	; 0x28
   17abc:	add	r2, sp, #920	; 0x398
   17ac0:	mov	r8, #0
   17ac4:	add	r3, r2, r3
   17ac8:	add	r1, sp, #588	; 0x24c
   17acc:	movw	r0, #11268	; 0x2c04
   17ad0:	movt	r0, #2
   17ad4:	strb	r8, [r3, #-332]	; 0xfffffeb4
   17ad8:	bl	12cd8 <__assert_fail@plt+0x1908>
   17adc:	mov	r2, #5
   17ae0:	mov	r0, r8
   17ae4:	movw	r1, #8712	; 0x2208
   17ae8:	movt	r1, #2
   17aec:	bl	11130 <dcgettext@plt>
   17af0:	bl	12cd8 <__assert_fail@plt+0x1908>
   17af4:	ldr	r3, [sp, #40]	; 0x28
   17af8:	cmp	r3, r8
   17afc:	bne	1864c <__assert_fail@plt+0x727c>
   17b00:	ldr	r2, [sp, #48]	; 0x30
   17b04:	ldr	r3, [sp, #88]	; 0x58
   17b08:	cmp	r5, r9
   17b0c:	cmpne	r3, r2
   17b10:	bne	18630 <__assert_fail@plt+0x7260>
   17b14:	mov	r2, #5
   17b18:	movw	r1, #8828	; 0x227c
   17b1c:	movt	r1, #2
   17b20:	mov	r0, #0
   17b24:	bl	11130 <dcgettext@plt>
   17b28:	bl	12cd8 <__assert_fail@plt+0x1908>
   17b2c:	cmp	r7, #0
   17b30:	beq	185b8 <__assert_fail@plt+0x71e8>
   17b34:	movw	r1, #8864	; 0x22a0
   17b38:	movt	r1, #2
   17b3c:	mov	r2, #5
   17b40:	mov	r0, #0
   17b44:	bl	11130 <dcgettext@plt>
   17b48:	mov	r1, r0
   17b4c:	movw	r0, #8904	; 0x22c8
   17b50:	movt	r0, #2
   17b54:	bl	12cd8 <__assert_fail@plt+0x1908>
   17b58:	b	16bc8 <__assert_fail@plt+0x57f8>
   17b5c:	mov	r2, #5
   17b60:	movw	r1, #8260	; 0x2044
   17b64:	movt	r1, #2
   17b68:	mov	r0, #0
   17b6c:	bl	11130 <dcgettext@plt>
   17b70:	mov	r2, r8
   17b74:	mov	r3, r9
   17b78:	bl	12cd8 <__assert_fail@plt+0x1908>
   17b7c:	b	176c8 <__assert_fail@plt+0x62f8>
   17b80:	mov	r2, #5
   17b84:	mov	r0, r7
   17b88:	movw	r1, #8996	; 0x2324
   17b8c:	movt	r1, #2
   17b90:	bl	11130 <dcgettext@plt>
   17b94:	mov	r7, r0
   17b98:	add	r1, sp, #588	; 0x24c
   17b9c:	add	r0, sp, #688	; 0x2b0
   17ba0:	bl	12df4 <__assert_fail@plt+0x1a24>
   17ba4:	mov	r8, r0
   17ba8:	add	r2, sp, #388	; 0x184
   17bac:	add	r1, sp, #688	; 0x2b0
   17bb0:	add	r0, sp, #144	; 0x90
   17bb4:	bl	12d3c <__assert_fail@plt+0x196c>
   17bb8:	mov	r2, r0
   17bbc:	mov	r1, r8
   17bc0:	mov	r0, r7
   17bc4:	bl	12cd8 <__assert_fail@plt+0x1908>
   17bc8:	ldrb	r3, [sp, #869]	; 0x365
   17bcc:	cmp	r3, #0
   17bd0:	str	r3, [sp, #40]	; 0x28
   17bd4:	beq	17144 <__assert_fail@plt+0x5d74>
   17bd8:	ldr	r3, [sp, #844]	; 0x34c
   17bdc:	ldr	r0, [sp, #848]	; 0x350
   17be0:	cmp	r3, #0
   17be4:	bne	18300 <__assert_fail@plt+0x6f30>
   17be8:	cmp	r0, #0
   17bec:	beq	1837c <__assert_fail@plt+0x6fac>
   17bf0:	add	r7, sp, #388	; 0x184
   17bf4:	mov	r2, #5
   17bf8:	movw	r1, #9156	; 0x23c4
   17bfc:	movt	r1, #2
   17c00:	mov	r0, #0
   17c04:	bl	11130 <dcgettext@plt>
   17c08:	mov	r8, r0
   17c0c:	mov	r0, #0
   17c10:	movw	r2, #7140	; 0x1be4
   17c14:	movt	r2, #2
   17c18:	add	r3, sp, #144	; 0x90
   17c1c:	mov	r1, #100	; 0x64
   17c20:	str	r0, [sp]
   17c24:	str	r0, [sp, #4]
   17c28:	mov	r0, r7
   17c2c:	bl	201a8 <__assert_fail@plt+0xedd8>
   17c30:	cmp	r0, #99	; 0x63
   17c34:	mov	r5, r0
   17c38:	bgt	17c48 <__assert_fail@plt+0x6878>
   17c3c:	ldr	r3, [sp, #864]	; 0x360
   17c40:	cmp	r3, #0
   17c44:	bne	18348 <__assert_fail@plt+0x6f78>
   17c48:	mov	r1, r7
   17c4c:	mov	r0, r8
   17c50:	bl	12cd8 <__assert_fail@plt+0x1908>
   17c54:	add	r3, sp, #784	; 0x310
   17c58:	ldrb	r5, [sp, #869]	; 0x365
   17c5c:	ldrd	sl, [r3]
   17c60:	add	r3, sp, #792	; 0x318
   17c64:	ldrd	r2, [r3]
   17c68:	str	r5, [sp, #40]	; 0x28
   17c6c:	strd	r2, [sp, #48]	; 0x30
   17c70:	add	r3, sp, #800	; 0x320
   17c74:	ldr	lr, [sp, #48]	; 0x30
   17c78:	strd	sl, [sp, #64]	; 0x40
   17c7c:	ldrd	r2, [r3]
   17c80:	orr	r0, sl, lr
   17c84:	ldr	lr, [sp, #52]	; 0x34
   17c88:	orr	ip, r0, r2
   17c8c:	str	ip, [sp, #56]	; 0x38
   17c90:	orr	r1, fp, lr
   17c94:	orr	ip, r1, r3
   17c98:	str	ip, [sp, #60]	; 0x3c
   17c9c:	ldrd	sl, [sp, #56]	; 0x38
   17ca0:	orrs	ip, sl, fp
   17ca4:	mov	ip, r5
   17ca8:	beq	18028 <__assert_fail@plt+0x6c58>
   17cac:	cmp	r5, #0
   17cb0:	beq	17188 <__assert_fail@plt+0x5db8>
   17cb4:	orrs	r1, r0, r1
   17cb8:	beq	1830c <__assert_fail@plt+0x6f3c>
   17cbc:	ldr	r1, [sp, #156]	; 0x9c
   17cc0:	cmp	r1, #15
   17cc4:	beq	17ce8 <__assert_fail@plt+0x6918>
   17cc8:	mov	r2, #5
   17ccc:	movw	r1, #9184	; 0x23e0
   17cd0:	movt	r1, #2
   17cd4:	mov	r0, #0
   17cd8:	bl	11130 <dcgettext@plt>
   17cdc:	bl	12cd8 <__assert_fail@plt+0x1908>
   17ce0:	add	r3, sp, #800	; 0x320
   17ce4:	ldrd	r2, [r3]
   17ce8:	orrs	r3, r2, r3
   17cec:	bne	1830c <__assert_fail@plt+0x6f3c>
   17cf0:	add	r3, sp, #784	; 0x310
   17cf4:	ldr	r0, [sp, #164]	; 0xa4
   17cf8:	ldrd	r8, [r3]
   17cfc:	asr	r1, r0, #31
   17d00:	adds	r2, r0, r8
   17d04:	adcs	r3, r1, r9
   17d08:	asr	r1, r2, #31
   17d0c:	movvs	ip, #1
   17d10:	movvc	ip, #0
   17d14:	cmp	r3, r1
   17d18:	cmpeq	r2, r2
   17d1c:	bne	17e7c <__assert_fail@plt+0x6aac>
   17d20:	cmp	ip, #0
   17d24:	bne	17e7c <__assert_fail@plt+0x6aac>
   17d28:	add	r1, sp, #792	; 0x318
   17d2c:	mov	r5, r2
   17d30:	ldrd	r0, [r1]
   17d34:	strd	r0, [sp, #48]	; 0x30
   17d38:	b	171c0 <__assert_fail@plt+0x5df0>
   17d3c:	mov	r1, #0
   17d40:	mov	r2, #0
   17d44:	cmp	ip, r1
   17d48:	mov	r3, #0
   17d4c:	moveq	r7, ip
   17d50:	strd	r2, [sp, #144]	; 0x90
   17d54:	moveq	r2, r7
   17d58:	moveq	r3, r7
   17d5c:	str	r1, [sp, #152]	; 0x98
   17d60:	str	r1, [sp, #780]	; 0x30c
   17d64:	beq	1781c <__assert_fail@plt+0x644c>
   17d68:	movw	r0, #8468	; 0x2114
   17d6c:	movt	r0, #2
   17d70:	bl	12cd8 <__assert_fail@plt+0x1908>
   17d74:	b	1780c <__assert_fail@plt+0x643c>
   17d78:	ldrb	r3, [sp, #869]	; 0x365
   17d7c:	cmp	r3, #0
   17d80:	str	r3, [sp, #40]	; 0x28
   17d84:	beq	17144 <__assert_fail@plt+0x5d74>
   17d88:	add	r7, sp, #388	; 0x184
   17d8c:	mov	r2, #5
   17d90:	movw	r1, #9096	; 0x2388
   17d94:	movt	r1, #2
   17d98:	mov	r0, #0
   17d9c:	bl	11130 <dcgettext@plt>
   17da0:	mov	r5, r0
   17da4:	add	r1, sp, #588	; 0x24c
   17da8:	add	r0, sp, #688	; 0x2b0
   17dac:	bl	12df4 <__assert_fail@plt+0x1a24>
   17db0:	mov	r1, r0
   17db4:	mov	r0, r5
   17db8:	bl	12cd8 <__assert_fail@plt+0x1908>
   17dbc:	b	17bf4 <__assert_fail@plt+0x6824>
   17dc0:	subs	r1, r2, #1
   17dc4:	str	r1, [sp, #80]	; 0x50
   17dc8:	sbc	r1, r3, #0
   17dcc:	str	r1, [sp, #84]	; 0x54
   17dd0:	ldrd	sl, [sp, #80]	; 0x50
   17dd4:	cmp	fp, #0
   17dd8:	cmpeq	sl, #10
   17ddc:	addls	r7, r2, #12
   17de0:	bls	17794 <__assert_fail@plt+0x63c4>
   17de4:	cmp	r3, #0
   17de8:	cmpeq	r2, #12
   17dec:	moveq	r3, #12
   17df0:	moveq	r7, r3
   17df4:	streq	r3, [sp, #152]	; 0x98
   17df8:	beq	17798 <__assert_fail@plt+0x63c8>
   17dfc:	mvn	r3, #0
   17e00:	movw	r5, #7300	; 0x1c84
   17e04:	movt	r5, #2
   17e08:	str	r3, [sp, #152]	; 0x98
   17e0c:	cmp	ip, #0
   17e10:	beq	16bc8 <__assert_fail@plt+0x57f8>
   17e14:	mov	r2, #5
   17e18:	movw	r1, #8332	; 0x208c
   17e1c:	movt	r1, #2
   17e20:	mov	r0, #0
   17e24:	bl	11130 <dcgettext@plt>
   17e28:	add	r3, sp, #760	; 0x2f8
   17e2c:	str	r5, [sp]
   17e30:	ldrd	r2, [r3]
   17e34:	bl	12cd8 <__assert_fail@plt+0x1908>
   17e38:	b	16bc8 <__assert_fail@plt+0x57f8>
   17e3c:	subs	r1, r2, #1
   17e40:	str	r1, [sp, #72]	; 0x48
   17e44:	sbc	r1, r3, #0
   17e48:	str	r1, [sp, #76]	; 0x4c
   17e4c:	ldrd	sl, [sp, #72]	; 0x48
   17e50:	cmp	fp, #0
   17e54:	cmpeq	sl, #10
   17e58:	bls	17790 <__assert_fail@plt+0x63c0>
   17e5c:	cmp	r3, #0
   17e60:	cmpeq	r2, #12
   17e64:	beq	17794 <__assert_fail@plt+0x63c4>
   17e68:	mvn	r3, #0
   17e6c:	movw	r5, #7736	; 0x1e38
   17e70:	movt	r5, #2
   17e74:	str	r3, [sp, #152]	; 0x98
   17e78:	b	17e0c <__assert_fail@plt+0x6a3c>
   17e7c:	ldrb	r3, [sp, #869]	; 0x365
   17e80:	cmp	r3, #0
   17e84:	beq	16bc8 <__assert_fail@plt+0x57f8>
   17e88:	mov	r2, #5
   17e8c:	movw	r1, #9356	; 0x248c
   17e90:	movt	r1, #2
   17e94:	mov	r0, #0
   17e98:	bl	11130 <dcgettext@plt>
   17e9c:	movw	r1, #9372	; 0x249c
   17ea0:	movt	r1, #2
   17ea4:	movw	r2, #2149	; 0x865
   17ea8:	bl	12cd8 <__assert_fail@plt+0x1908>
   17eac:	b	16bc8 <__assert_fail@plt+0x57f8>
   17eb0:	mov	r2, #5
   17eb4:	movw	r1, #9456	; 0x24f0
   17eb8:	movt	r1, #2
   17ebc:	mov	r0, r7
   17ec0:	bl	11130 <dcgettext@plt>
   17ec4:	add	r3, sp, #800	; 0x320
   17ec8:	add	r1, sp, #792	; 0x318
   17ecc:	ldrd	r2, [r3]
   17ed0:	strd	r2, [sp, #8]
   17ed4:	add	r3, sp, #784	; 0x310
   17ed8:	ldrd	sl, [r1]
   17edc:	ldrd	r2, [r3]
   17ee0:	strd	sl, [sp]
   17ee4:	bl	12cd8 <__assert_fail@plt+0x1908>
   17ee8:	mov	r2, #5
   17eec:	movw	r1, #9520	; 0x2530
   17ef0:	movt	r1, #2
   17ef4:	mov	r0, r7
   17ef8:	bl	11130 <dcgettext@plt>
   17efc:	mov	r8, r0
   17f00:	add	r1, sp, #688	; 0x2b0
   17f04:	add	r2, sp, #388	; 0x184
   17f08:	add	r0, sp, #144	; 0x90
   17f0c:	bl	12d3c <__assert_fail@plt+0x196c>
   17f10:	mov	r1, r0
   17f14:	mov	r0, r8
   17f18:	bl	12cd8 <__assert_fail@plt+0x1908>
   17f1c:	ldr	r3, [sp, #224]	; 0xe0
   17f20:	cmn	r3, #1
   17f24:	beq	17f4c <__assert_fail@plt+0x6b7c>
   17f28:	ldr	r2, [sp, #176]	; 0xb0
   17f2c:	cmp	r3, r2
   17f30:	beq	17f4c <__assert_fail@plt+0x6b7c>
   17f34:	movw	r1, #9548	; 0x254c
   17f38:	movt	r1, #2
   17f3c:	mov	r2, #5
   17f40:	mov	r0, r7
   17f44:	bl	11130 <dcgettext@plt>
   17f48:	bl	12cd8 <__assert_fail@plt+0x1908>
   17f4c:	add	r3, sp, #800	; 0x320
   17f50:	ldrd	r2, [r3]
   17f54:	orrs	r3, r2, r3
   17f58:	bne	1801c <__assert_fail@plt+0x6c4c>
   17f5c:	ldr	r2, [sp, #56]	; 0x38
   17f60:	ldr	r3, [sp, #156]	; 0x9c
   17f64:	cmp	r2, r3
   17f68:	bne	17f8c <__assert_fail@plt+0x6bbc>
   17f6c:	add	r3, sp, #792	; 0x318
   17f70:	ldrd	r2, [r3]
   17f74:	orrs	r3, r2, r3
   17f78:	bne	1801c <__assert_fail@plt+0x6c4c>
   17f7c:	ldr	r2, [sp, #48]	; 0x30
   17f80:	ldr	r3, [sp, #160]	; 0xa0
   17f84:	cmp	r2, r3
   17f88:	beq	1801c <__assert_fail@plt+0x6c4c>
   17f8c:	mov	r2, #5
   17f90:	movw	r1, #9612	; 0x258c
   17f94:	movt	r1, #2
   17f98:	mov	r0, #0
   17f9c:	bl	11130 <dcgettext@plt>
   17fa0:	bl	12cd8 <__assert_fail@plt+0x1908>
   17fa4:	mov	r2, #5
   17fa8:	movw	r1, #9672	; 0x25c8
   17fac:	movt	r1, #2
   17fb0:	mov	r0, #0
   17fb4:	bl	11130 <dcgettext@plt>
   17fb8:	mov	r7, r0
   17fbc:	add	r1, sp, #284	; 0x11c
   17fc0:	mov	r0, r5
   17fc4:	bl	12c54 <__assert_fail@plt+0x1884>
   17fc8:	ldr	r2, [sp, #48]	; 0x30
   17fcc:	mov	r1, r0
   17fd0:	mov	r0, r7
   17fd4:	ldr	r3, [sp, #56]	; 0x38
   17fd8:	add	r2, r2, #1
   17fdc:	bl	12cd8 <__assert_fail@plt+0x1908>
   17fe0:	mov	r2, #5
   17fe4:	movw	r1, #9708	; 0x25ec
   17fe8:	movt	r1, #2
   17fec:	mov	r0, #0
   17ff0:	bl	11130 <dcgettext@plt>
   17ff4:	mov	r5, r0
   17ff8:	add	r1, sp, #284	; 0x11c
   17ffc:	ldr	r0, [sp, #164]	; 0xa4
   18000:	bl	12c54 <__assert_fail@plt+0x1884>
   18004:	mov	r1, r0
   18008:	mov	r0, r5
   1800c:	ldr	r3, [sp, #156]	; 0x9c
   18010:	ldr	r2, [sp, #160]	; 0xa0
   18014:	add	r2, r2, #1
   18018:	bl	12cd8 <__assert_fail@plt+0x1908>
   1801c:	ldrb	r3, [sp, #869]	; 0x365
   18020:	mov	r5, r3
   18024:	str	r3, [sp, #40]	; 0x28
   18028:	ldr	r3, [sp, #864]	; 0x360
   1802c:	cmp	r3, #0
   18030:	beq	18064 <__assert_fail@plt+0x6c94>
   18034:	ldr	r2, [sp, #180]	; 0xb4
   18038:	ldr	r1, [sp, #712]	; 0x2c8
   1803c:	asr	fp, r2, #31
   18040:	subs	r2, r1, r2
   18044:	rsc	r3, fp, r1, asr #31
   18048:	subs	sl, r9, r2
   1804c:	asr	r1, sl, #31
   18050:	rsc	fp, r3, r9, asr #31
   18054:	cmp	fp, r1
   18058:	cmpeq	sl, sl
   1805c:	bne	18760 <__assert_fail@plt+0x7390>
   18060:	mov	r9, sl
   18064:	cmp	r5, #0
   18068:	beq	172cc <__assert_fail@plt+0x5efc>
   1806c:	mov	r2, #5
   18070:	movw	r1, #9788	; 0x263c
   18074:	movt	r1, #2
   18078:	mov	r0, #0
   1807c:	asr	fp, r9, #31
   18080:	bl	11130 <dcgettext@plt>
   18084:	mov	ip, #0
   18088:	add	r7, sp, #388	; 0x184
   1808c:	mov	r5, r0
   18090:	add	r3, sp, #144	; 0x90
   18094:	mov	r0, r7
   18098:	movw	r2, #7140	; 0x1be4
   1809c:	movt	r2, #2
   180a0:	mov	r1, #100	; 0x64
   180a4:	str	ip, [sp]
   180a8:	str	ip, [sp, #4]
   180ac:	mov	sl, r9
   180b0:	bl	201a8 <__assert_fail@plt+0xedd8>
   180b4:	cmp	r0, #99	; 0x63
   180b8:	mov	r8, r0
   180bc:	bgt	180cc <__assert_fail@plt+0x6cfc>
   180c0:	ldr	r3, [sp, #864]	; 0x360
   180c4:	cmp	r3, #0
   180c8:	bne	18788 <__assert_fail@plt+0x73b8>
   180cc:	mov	r1, r7
   180d0:	mov	r0, r5
   180d4:	mov	r2, sl
   180d8:	mov	r3, fp
   180dc:	bl	12cd8 <__assert_fail@plt+0x1908>
   180e0:	ldr	r7, [sp, #808]	; 0x328
   180e4:	mov	r2, #0
   180e8:	ldr	r5, [sp, #812]	; 0x32c
   180ec:	ldrb	r3, [sp, #869]	; 0x365
   180f0:	cmp	r5, r7, asr #31
   180f4:	str	r3, [sp, #40]	; 0x28
   180f8:	str	r3, [sp, #48]	; 0x30
   180fc:	bne	18454 <__assert_fail@plt+0x7084>
   18100:	mov	r0, #3600	; 0xe10
   18104:	smull	r0, r1, r7, r0
   18108:	mov	r8, r0
   1810c:	mov	r3, r1
   18110:	cmp	r2, #0
   18114:	mov	r1, r3
   18118:	bne	1812c <__assert_fail@plt+0x6d5c>
   1811c:	adds	r8, sl, r8
   18120:	adcs	r9, fp, r1
   18124:	strd	r8, [sp, #56]	; 0x38
   18128:	bvc	17320 <__assert_fail@plt+0x5f50>
   1812c:	ldr	r3, [sp, #48]	; 0x30
   18130:	cmp	r3, #0
   18134:	beq	16bc8 <__assert_fail@plt+0x57f8>
   18138:	mov	r2, #5
   1813c:	movw	r1, #9816	; 0x2658
   18140:	movt	r1, #2
   18144:	mov	r0, #0
   18148:	bl	11130 <dcgettext@plt>
   1814c:	bl	12cd8 <__assert_fail@plt+0x1908>
   18150:	b	16bc8 <__assert_fail@plt+0x57f8>
   18154:	ldr	r3, [sp, #864]	; 0x360
   18158:	cmp	r3, #0
   1815c:	bne	18034 <__assert_fail@plt+0x6c64>
   18160:	b	172cc <__assert_fail@plt+0x5efc>
   18164:	ldrb	r3, [sp, #869]	; 0x365
   18168:	cmp	r3, #0
   1816c:	beq	16bc8 <__assert_fail@plt+0x57f8>
   18170:	mov	r2, #5
   18174:	movw	r1, #8916	; 0x22d4
   18178:	movt	r1, #2
   1817c:	mov	r0, #0
   18180:	bl	11130 <dcgettext@plt>
   18184:	mov	r8, r0
   18188:	add	r1, sp, #588	; 0x24c
   1818c:	add	r0, sp, #688	; 0x2b0
   18190:	add	r7, sp, #388	; 0x184
   18194:	bl	12df4 <__assert_fail@plt+0x1a24>
   18198:	add	r3, sp, #696	; 0x2b8
   1819c:	mov	ip, #0
   181a0:	ldr	r9, [sp, #704]	; 0x2c0
   181a4:	mov	sl, r0
   181a8:	mov	r1, #100	; 0x64
   181ac:	ldrd	r2, [r3]
   181b0:	mov	r0, r7
   181b4:	str	ip, [sp]
   181b8:	str	ip, [sp, #4]
   181bc:	strd	r2, [sp, #40]	; 0x28
   181c0:	add	r3, sp, #144	; 0x90
   181c4:	movw	r2, #7140	; 0x1be4
   181c8:	movt	r2, #2
   181cc:	bl	201a8 <__assert_fail@plt+0xedd8>
   181d0:	cmp	r0, #99	; 0x63
   181d4:	mov	r5, r0
   181d8:	bgt	181e8 <__assert_fail@plt+0x6e18>
   181dc:	ldr	r3, [sp, #864]	; 0x360
   181e0:	cmp	r3, #0
   181e4:	bne	187cc <__assert_fail@plt+0x73fc>
   181e8:	mov	r1, sl
   181ec:	mov	r0, r8
   181f0:	str	r9, [sp]
   181f4:	str	r7, [sp, #4]
   181f8:	ldrd	r2, [sp, #40]	; 0x28
   181fc:	bl	12cd8 <__assert_fail@plt+0x1908>
   18200:	b	16bc8 <__assert_fail@plt+0x57f8>
   18204:	movw	r2, #22616	; 0x5858
   18208:	add	r1, sp, #588	; 0x24c
   1820c:	ldr	r0, [sp, #712]	; 0x2c8
   18210:	mov	r3, #88	; 0x58
   18214:	strh	r2, [r1], #3
   18218:	strb	r3, [sp, #590]	; 0x24e
   1821c:	bl	12b24 <__assert_fail@plt+0x1754>
   18220:	add	r0, sp, #588	; 0x24c
   18224:	bl	1cc20 <__assert_fail@plt+0xb850>
   18228:	subs	r8, r0, #0
   1822c:	beq	1854c <__assert_fail@plt+0x717c>
   18230:	mvn	r2, #0
   18234:	ldrd	sl, [sp, #200]	; 0xc8
   18238:	add	r1, sp, #144	; 0x90
   1823c:	ldr	ip, [sp, #224]	; 0xe0
   18240:	str	r2, [sp, #168]	; 0xa8
   18244:	ldrd	r2, [sp, #192]	; 0xc0
   18248:	strd	r2, [sp, #48]	; 0x30
   1824c:	strd	sl, [sp, #152]	; 0x98
   18250:	ldrd	sl, [sp, #48]	; 0x30
   18254:	str	ip, [sp, #176]	; 0xb0
   18258:	ldrd	r2, [sp, #208]	; 0xd0
   1825c:	strd	sl, [sp, #144]	; 0x90
   18260:	strd	r2, [sp, #160]	; 0xa0
   18264:	bl	1ce08 <__assert_fail@plt+0xba38>
   18268:	ldr	r3, [sp, #168]	; 0xa8
   1826c:	mov	r9, r0
   18270:	cmp	r3, #0
   18274:	blt	18540 <__assert_fail@plt+0x7170>
   18278:	ldr	ip, [sp, #144]	; 0x90
   1827c:	mov	r0, r8
   18280:	ldr	r1, [sp, #148]	; 0x94
   18284:	ldr	r2, [sp, #152]	; 0x98
   18288:	ldr	lr, [sp, #192]	; 0xc0
   1828c:	ldr	r3, [sp, #196]	; 0xc4
   18290:	ldr	r8, [sp, #200]	; 0xc8
   18294:	eor	lr, lr, ip
   18298:	ldr	ip, [sp, #160]	; 0xa0
   1829c:	eor	r3, r3, r1
   182a0:	orr	lr, lr, r3
   182a4:	ldr	r1, [sp, #156]	; 0x9c
   182a8:	eor	r8, r8, r2
   182ac:	ldr	r3, [sp, #204]	; 0xcc
   182b0:	orr	lr, lr, r8
   182b4:	ldr	r2, [sp, #208]	; 0xd0
   182b8:	eor	r8, r3, r1
   182bc:	ldr	r1, [sp, #164]	; 0xa4
   182c0:	orr	r8, lr, r8
   182c4:	ldr	r3, [sp, #212]	; 0xd4
   182c8:	eor	r2, r2, ip
   182cc:	orr	r8, r8, r2
   182d0:	eor	r3, r3, r1
   182d4:	orr	r8, r8, r3
   182d8:	bl	1ccb8 <__assert_fail@plt+0xb8e8>
   182dc:	cmp	r8, #0
   182e0:	beq	17030 <__assert_fail@plt+0x5c60>
   182e4:	b	17840 <__assert_fail@plt+0x6470>
   182e8:	movw	r1, #8408	; 0x20d8
   182ec:	movt	r1, #2
   182f0:	mov	r2, #5
   182f4:	bl	11130 <dcgettext@plt>
   182f8:	mov	r8, r0
   182fc:	b	177d0 <__assert_fail@plt+0x6400>
   18300:	cmp	r0, #0
   18304:	beq	17bf0 <__assert_fail@plt+0x6820>
   18308:	b	17d88 <__assert_fail@plt+0x69b8>
   1830c:	ldr	r3, [sp, #152]	; 0x98
   18310:	cmp	r3, #12
   18314:	beq	17cf0 <__assert_fail@plt+0x6920>
   18318:	mov	r2, #5
   1831c:	movw	r1, #9284	; 0x2444
   18320:	movt	r1, #2
   18324:	mov	r0, #0
   18328:	bl	11130 <dcgettext@plt>
   1832c:	bl	12cd8 <__assert_fail@plt+0x1908>
   18330:	b	17cf0 <__assert_fail@plt+0x6920>
   18334:	mvn	r3, #0
   18338:	movw	r5, #10188	; 0x27cc
   1833c:	movt	r5, #2
   18340:	str	r3, [sp, #152]	; 0x98
   18344:	b	17e0c <__assert_fail@plt+0x6a3c>
   18348:	add	r1, sp, #284	; 0x11c
   1834c:	ldr	r0, [sp, #712]	; 0x2c8
   18350:	bl	12b24 <__assert_fail@plt+0x1754>
   18354:	movw	r1, #7168	; 0x1c00
   18358:	movt	r1, #2
   1835c:	mvn	r3, #0
   18360:	mov	r2, #1
   18364:	str	r1, [sp]
   18368:	rsb	r1, r5, #100	; 0x64
   1836c:	str	r0, [sp, #4]
   18370:	add	r0, r7, r5
   18374:	bl	113c4 <__snprintf_chk@plt>
   18378:	b	17c48 <__assert_fail@plt+0x6878>
   1837c:	mov	r2, #5
   18380:	movw	r1, #9028	; 0x2344
   18384:	movt	r1, #2
   18388:	mov	r5, #100	; 0x64
   1838c:	bl	11130 <dcgettext@plt>
   18390:	ldr	lr, [sp, #164]	; 0xa4
   18394:	movw	r1, #34079	; 0x851f
   18398:	movt	r1, #20971	; 0x51eb
   1839c:	mov	sl, r0
   183a0:	movw	r2, #63636	; 0xf894
   183a4:	movt	r2, #65535	; 0xffff
   183a8:	movw	r3, #7120	; 0x1bd0
   183ac:	movt	r3, #2
   183b0:	add	r8, sp, #284	; 0x11c
   183b4:	add	r7, sp, #388	; 0x184
   183b8:	smull	r0, r1, r1, lr
   183bc:	cmp	lr, r2
   183c0:	addge	r3, r3, #1
   183c4:	mov	r0, r8
   183c8:	asr	ip, lr, #31
   183cc:	mov	r2, #13
   183d0:	rsb	ip, ip, r1, asr #5
   183d4:	mov	r1, #1
   183d8:	mls	lr, r5, ip, lr
   183dc:	add	ip, ip, #19
   183e0:	cmp	ip, #0
   183e4:	rsblt	ip, ip, #0
   183e8:	cmp	lr, #0
   183ec:	rsblt	lr, lr, #0
   183f0:	stm	sp, {ip, lr}
   183f4:	bl	112a4 <__sprintf_chk@plt>
   183f8:	movw	r2, #9072	; 0x2370
   183fc:	movt	r2, #2
   18400:	ldr	lr, [sp, #156]	; 0x9c
   18404:	mov	r3, r5
   18408:	mov	r1, r5
   1840c:	ldr	ip, [sp, #160]	; 0xa0
   18410:	mov	r0, r7
   18414:	stm	sp, {r2, r8}
   18418:	mov	r2, #1
   1841c:	str	lr, [sp, #12]
   18420:	add	ip, ip, r2
   18424:	str	ip, [sp, #8]
   18428:	bl	113c4 <__snprintf_chk@plt>
   1842c:	mov	r1, r7
   18430:	mov	r0, sl
   18434:	bl	12cd8 <__assert_fail@plt+0x1908>
   18438:	ldr	r3, [sp, #848]	; 0x350
   1843c:	cmp	r3, #0
   18440:	beq	17bf4 <__assert_fail@plt+0x6824>
   18444:	ldr	r3, [sp, #844]	; 0x34c
   18448:	cmp	r3, #0
   1844c:	bne	17d8c <__assert_fail@plt+0x69bc>
   18450:	b	17bf4 <__assert_fail@plt+0x6824>
   18454:	mov	r3, #3600	; 0xe10
   18458:	cmp	r5, #0
   1845c:	umull	r8, r9, r7, r3
   18460:	umull	r0, r1, r3, r5
   18464:	bge	18470 <__assert_fail@plt+0x70a0>
   18468:	subs	r0, r0, r2
   1846c:	sbc	r1, r1, r3
   18470:	adds	r3, r0, r9
   18474:	mov	ip, #0
   18478:	adc	ip, r1, ip
   1847c:	cmp	ip, r3, asr #31
   18480:	beq	18110 <__assert_fail@plt+0x6d40>
   18484:	lsl	r3, r5, #3
   18488:	mov	r2, #1
   1848c:	lsl	r1, r7, #3
   18490:	orr	r3, r3, r7, lsr #29
   18494:	subs	r1, r1, r7
   18498:	sbc	r3, r3, r5
   1849c:	lsl	r0, r1, #5
   184a0:	lsl	r3, r3, #5
   184a4:	adds	r8, r0, r7
   184a8:	orr	r3, r3, r1, lsr #27
   184ac:	lsl	r1, r8, #4
   184b0:	adc	r3, r3, r5
   184b4:	lsl	r3, r3, #4
   184b8:	orr	r3, r3, r8, lsr #28
   184bc:	mov	r8, r1
   184c0:	b	18110 <__assert_fail@plt+0x6d40>
   184c4:	mov	ip, #7
   184c8:	cmp	fp, #0
   184cc:	umull	r8, r9, sl, ip
   184d0:	umull	r0, r1, ip, fp
   184d4:	bge	184e0 <__assert_fail@plt+0x7110>
   184d8:	subs	r0, r0, lr
   184dc:	sbc	r1, r1, ip
   184e0:	adds	ip, r0, r9
   184e4:	mov	r7, #0
   184e8:	adc	r7, r1, r7
   184ec:	cmp	r7, ip, asr #31
   184f0:	bne	185d0 <__assert_fail@plt+0x7200>
   184f4:	mov	r1, r8
   184f8:	mov	r3, ip
   184fc:	b	1708c <__assert_fail@plt+0x5cbc>
   18500:	mov	r3, #60	; 0x3c
   18504:	cmp	r9, #0
   18508:	umull	r0, r1, r8, r3
   1850c:	mov	sl, r0
   18510:	mov	fp, r1
   18514:	umull	r0, r1, r3, r9
   18518:	bge	18524 <__assert_fail@plt+0x7154>
   1851c:	subs	r0, r0, r2
   18520:	sbc	r1, r1, r3
   18524:	adds	r3, r0, fp
   18528:	mov	ip, #0
   1852c:	adc	ip, r1, ip
   18530:	cmp	ip, r3, asr #31
   18534:	bne	18870 <__assert_fail@plt+0x74a0>
   18538:	mov	ip, sl
   1853c:	b	17344 <__assert_fail@plt+0x5f74>
   18540:	mov	r0, r8
   18544:	bl	1ccb8 <__assert_fail@plt+0xb8e8>
   18548:	b	17840 <__assert_fail@plt+0x6470>
   1854c:	ldrb	r3, [sp, #869]	; 0x365
   18550:	cmp	r3, #0
   18554:	beq	16bc8 <__assert_fail@plt+0x57f8>
   18558:	mov	r2, #5
   1855c:	movw	r1, #8520	; 0x2148
   18560:	movt	r1, #2
   18564:	bl	11130 <dcgettext@plt>
   18568:	add	r1, sp, #588	; 0x24c
   1856c:	bl	12cd8 <__assert_fail@plt+0x1908>
   18570:	b	16bc8 <__assert_fail@plt+0x57f8>
   18574:	mov	r3, #3600	; 0xe10
   18578:	cmp	r5, #0
   1857c:	umull	r0, r1, r7, r3
   18580:	mov	sl, r0
   18584:	mov	fp, r1
   18588:	umull	r0, r1, r3, r5
   1858c:	bge	18598 <__assert_fail@plt+0x71c8>
   18590:	subs	r0, r0, ip
   18594:	sbc	r1, r1, r3
   18598:	adds	r3, r0, fp
   1859c:	mov	r2, #0
   185a0:	adc	r2, r1, r2
   185a4:	cmp	r2, r3, asr #31
   185a8:	bne	18724 <__assert_fail@plt+0x7354>
   185ac:	mov	r0, sl
   185b0:	mov	r1, r3
   185b4:	b	172f0 <__assert_fail@plt+0x5f20>
   185b8:	mov	r0, r7
   185bc:	movw	r1, #8884	; 0x22b4
   185c0:	movt	r1, #2
   185c4:	mov	r2, #5
   185c8:	bl	11130 <dcgettext@plt>
   185cc:	b	17b48 <__assert_fail@plt+0x6778>
   185d0:	lsl	r1, fp, #3
   185d4:	mov	lr, #1
   185d8:	lsl	r0, sl, #3
   185dc:	orr	r1, r1, sl, lsr #29
   185e0:	subs	r2, r0, sl
   185e4:	sbc	r3, r1, fp
   185e8:	mov	r1, r2
   185ec:	b	1708c <__assert_fail@plt+0x5cbc>
   185f0:	cmp	r3, #0
   185f4:	beq	16bc8 <__assert_fail@plt+0x57f8>
   185f8:	mov	r0, r7
   185fc:	mov	r2, #5
   18600:	movw	r1, #9392	; 0x24b0
   18604:	movt	r1, #2
   18608:	bl	11130 <dcgettext@plt>
   1860c:	mov	r5, r0
   18610:	add	r1, sp, #688	; 0x2b0
   18614:	add	r0, sp, #144	; 0x90
   18618:	add	r2, sp, #388	; 0x184
   1861c:	bl	12d3c <__assert_fail@plt+0x196c>
   18620:	mov	r1, r0
   18624:	mov	r0, r5
   18628:	bl	12cd8 <__assert_fail@plt+0x1908>
   1862c:	b	16bc8 <__assert_fail@plt+0x57f8>
   18630:	mov	r2, #5
   18634:	movw	r1, #8788	; 0x2254
   18638:	movt	r1, #2
   1863c:	mov	r0, #0
   18640:	bl	11130 <dcgettext@plt>
   18644:	bl	12cd8 <__assert_fail@plt+0x1908>
   18648:	b	17b14 <__assert_fail@plt+0x6744>
   1864c:	mov	r2, #5
   18650:	mov	r0, r8
   18654:	movw	r1, #8736	; 0x2220
   18658:	movt	r1, #2
   1865c:	bl	11130 <dcgettext@plt>
   18660:	bl	12cd8 <__assert_fail@plt+0x1908>
   18664:	b	17b00 <__assert_fail@plt+0x6730>
   18668:	mov	r0, lr
   1866c:	mov	r2, #5
   18670:	movw	r1, #9864	; 0x2688
   18674:	movt	r1, #2
   18678:	mov	r4, lr
   1867c:	bl	11130 <dcgettext@plt>
   18680:	add	r3, sp, #824	; 0x338
   18684:	add	ip, sp, #816	; 0x330
   18688:	ldr	r1, [sp, #832]	; 0x340
   1868c:	ldrd	r2, [r3]
   18690:	ldrd	r8, [ip]
   18694:	strd	r2, [sp, #8]
   18698:	add	r3, sp, #808	; 0x328
   1869c:	str	r1, [sp, #16]
   186a0:	ldrd	r2, [r3]
   186a4:	strd	r8, [sp]
   186a8:	bl	12cd8 <__assert_fail@plt+0x1908>
   186ac:	mov	r2, #5
   186b0:	mov	r0, r4
   186b4:	movw	r1, #9940	; 0x26d4
   186b8:	movt	r1, #2
   186bc:	bl	11130 <dcgettext@plt>
   186c0:	mov	r3, fp
   186c4:	mov	r2, sl
   186c8:	bl	12cd8 <__assert_fail@plt+0x1908>
   186cc:	ldr	r3, [sp, #176]	; 0xb0
   186d0:	cmn	r3, #1
   186d4:	beq	18718 <__assert_fail@plt+0x7348>
   186d8:	add	r2, sp, #284	; 0x11c
   186dc:	mov	r0, r6
   186e0:	ldr	r1, [sp, #88]	; 0x58
   186e4:	bl	1ccec <__assert_fail@plt+0xb91c>
   186e8:	cmp	r0, #0
   186ec:	beq	18718 <__assert_fail@plt+0x7348>
   186f0:	ldr	r2, [sp, #176]	; 0xb0
   186f4:	ldr	r3, [sp, #316]	; 0x13c
   186f8:	cmp	r2, r3
   186fc:	beq	18718 <__assert_fail@plt+0x7348>
   18700:	movw	r1, #9976	; 0x26f8
   18704:	movt	r1, #2
   18708:	mov	r2, #5
   1870c:	mov	r0, #0
   18710:	bl	11130 <dcgettext@plt>
   18714:	bl	12cd8 <__assert_fail@plt+0x1908>
   18718:	ldrb	r3, [sp, #869]	; 0x365
   1871c:	str	r3, [sp, #40]	; 0x28
   18720:	b	1747c <__assert_fail@plt+0x60ac>
   18724:	lsl	r3, r5, #3
   18728:	mov	ip, #1
   1872c:	lsl	r2, r7, #3
   18730:	orr	r3, r3, r7, lsr #29
   18734:	subs	r2, r2, r7
   18738:	sbc	r3, r3, r5
   1873c:	lsl	r1, r2, #5
   18740:	lsl	r3, r3, #5
   18744:	orr	r3, r3, r2, lsr #27
   18748:	adds	r2, r1, r7
   1874c:	lsl	r0, r2, #4
   18750:	adc	r1, r3, r5
   18754:	lsl	r1, r1, #4
   18758:	orr	r1, r1, r2, lsr #28
   1875c:	b	172f0 <__assert_fail@plt+0x5f20>
   18760:	cmp	r5, #0
   18764:	beq	16bc8 <__assert_fail@plt+0x57f8>
   18768:	mov	r2, #5
   1876c:	movw	r1, #9744	; 0x2610
   18770:	movt	r1, #2
   18774:	mov	r0, #0
   18778:	bl	11130 <dcgettext@plt>
   1877c:	ldr	r1, [sp, #712]	; 0x2c8
   18780:	bl	12cd8 <__assert_fail@plt+0x1908>
   18784:	b	16bc8 <__assert_fail@plt+0x57f8>
   18788:	add	r1, sp, #284	; 0x11c
   1878c:	ldr	r0, [sp, #712]	; 0x2c8
   18790:	bl	12b24 <__assert_fail@plt+0x1754>
   18794:	movw	r1, #7168	; 0x1c00
   18798:	movt	r1, #2
   1879c:	mvn	r3, #0
   187a0:	mov	r2, #1
   187a4:	str	r1, [sp]
   187a8:	rsb	r1, r8, #100	; 0x64
   187ac:	str	r0, [sp, #4]
   187b0:	add	r0, r7, r8
   187b4:	bl	113c4 <__snprintf_chk@plt>
   187b8:	b	180cc <__assert_fail@plt+0x6cfc>
   187bc:	mov	r3, #51	; 0x33
   187c0:	b	17abc <__assert_fail@plt+0x66ec>
   187c4:	mov	r3, #52	; 0x34
   187c8:	b	17abc <__assert_fail@plt+0x66ec>
   187cc:	add	r1, sp, #284	; 0x11c
   187d0:	ldr	r0, [sp, #712]	; 0x2c8
   187d4:	bl	12b24 <__assert_fail@plt+0x1754>
   187d8:	movw	r1, #7168	; 0x1c00
   187dc:	movt	r1, #2
   187e0:	mvn	r3, #0
   187e4:	mov	r2, #1
   187e8:	str	r1, [sp]
   187ec:	rsb	r1, r5, #100	; 0x64
   187f0:	str	r0, [sp, #4]
   187f4:	add	r0, r7, r5
   187f8:	bl	113c4 <__snprintf_chk@plt>
   187fc:	b	181e8 <__assert_fail@plt+0x6e18>
   18800:	add	r1, sp, #284	; 0x11c
   18804:	ldr	r0, [sp, #712]	; 0x2c8
   18808:	bl	12b24 <__assert_fail@plt+0x1754>
   1880c:	movw	r1, #7168	; 0x1c00
   18810:	movt	r1, #2
   18814:	mvn	r3, #0
   18818:	mov	r2, #1
   1881c:	str	r0, [sp, #4]
   18820:	add	r0, sp, #588	; 0x24c
   18824:	add	r0, r0, r8
   18828:	str	r1, [sp]
   1882c:	rsb	r1, r8, #100	; 0x64
   18830:	bl	113c4 <__snprintf_chk@plt>
   18834:	b	17950 <__assert_fail@plt+0x6580>
   18838:	add	r1, sp, #284	; 0x11c
   1883c:	ldr	r0, [sp, #712]	; 0x2c8
   18840:	bl	12b24 <__assert_fail@plt+0x1754>
   18844:	movw	r1, #7168	; 0x1c00
   18848:	movt	r1, #2
   1884c:	mvn	r3, #0
   18850:	mov	r2, #1
   18854:	str	r0, [sp, #4]
   18858:	add	r0, sp, #588	; 0x24c
   1885c:	add	r0, r0, r8
   18860:	str	r1, [sp]
   18864:	rsb	r1, r8, #100	; 0x64
   18868:	bl	113c4 <__snprintf_chk@plt>
   1886c:	b	179b0 <__assert_fail@plt+0x65e0>
   18870:	lsl	r3, r9, #4
   18874:	mov	r2, #1
   18878:	lsl	ip, r8, #4
   1887c:	orr	r3, r3, r8, lsr #28
   18880:	subs	ip, ip, r8
   18884:	sbc	r3, r3, r9
   18888:	lsl	r1, ip, #2
   1888c:	lsl	r3, r3, #2
   18890:	orr	r3, r3, ip, lsr #30
   18894:	mov	ip, r1
   18898:	b	17344 <__assert_fail@plt+0x5f74>
   1889c:	b	16758 <__assert_fail@plt+0x5388>
   188a0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   188a4:	strd	r6, [sp, #8]
   188a8:	mov	r6, r0
   188ac:	movw	r0, #10212	; 0x27e4
   188b0:	movt	r0, #2
   188b4:	str	r8, [sp, #16]
   188b8:	mov	r7, r1
   188bc:	str	lr, [sp, #20]
   188c0:	sub	sp, sp, #8
   188c4:	mov	r8, r2
   188c8:	bl	111d8 <getenv@plt>
   188cc:	mov	r5, r0
   188d0:	bl	1cc20 <__assert_fail@plt+0xb850>
   188d4:	subs	r4, r0, #0
   188d8:	moveq	r5, r4
   188dc:	beq	18904 <__assert_fail@plt+0x7534>
   188e0:	mov	r2, r8
   188e4:	mov	r1, r7
   188e8:	strd	r4, [sp]
   188ec:	mov	r0, r6
   188f0:	mov	r3, #0
   188f4:	bl	16758 <__assert_fail@plt+0x5388>
   188f8:	mov	r5, r0
   188fc:	mov	r0, r4
   18900:	bl	1ccb8 <__assert_fail@plt+0xb8e8>
   18904:	mov	r0, r5
   18908:	add	sp, sp, #8
   1890c:	ldrd	r4, [sp]
   18910:	ldrd	r6, [sp, #8]
   18914:	ldr	r8, [sp, #16]
   18918:	add	sp, sp, #20
   1891c:	pop	{pc}		; (ldr pc, [sp], #4)
   18920:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18924:	strd	r6, [sp, #8]
   18928:	strd	r8, [sp, #16]
   1892c:	mov	r9, r2
   18930:	strd	sl, [sp, #24]
   18934:	mov	sl, r1
   18938:	str	lr, [sp, #32]
   1893c:	sub	sp, sp, #60	; 0x3c
   18940:	str	r0, [sp, #4]
   18944:	mov	r0, r1
   18948:	bl	11274 <strlen@plt>
   1894c:	ands	r2, r9, #4
   18950:	mov	r4, r0
   18954:	mov	r6, r0
   18958:	beq	189a8 <__assert_fail@plt+0x75d8>
   1895c:	mov	r1, #46	; 0x2e
   18960:	mov	r0, sl
   18964:	bl	11280 <strchr@plt>
   18968:	subs	r2, r0, #0
   1896c:	beq	189a8 <__assert_fail@plt+0x75d8>
   18970:	sub	r3, r2, sl
   18974:	sub	r4, r4, r3
   18978:	cmp	r4, #3
   1897c:	beq	189a0 <__assert_fail@plt+0x75d0>
   18980:	mov	r0, #0
   18984:	add	sp, sp, #60	; 0x3c
   18988:	ldrd	r4, [sp]
   1898c:	ldrd	r6, [sp, #8]
   18990:	ldrd	r8, [sp, #16]
   18994:	ldrd	sl, [sp, #24]
   18998:	add	sp, sp, #32
   1899c:	pop	{pc}		; (ldr pc, [sp], #4)
   189a0:	mov	r4, r3
   189a4:	mov	r6, r3
   189a8:	sub	r3, r4, #8
   189ac:	cmp	r3, #4
   189b0:	bhi	18980 <__assert_fail@plt+0x75b0>
   189b4:	tst	r4, #1
   189b8:	bne	18980 <__assert_fail@plt+0x75b0>
   189bc:	ldrb	r3, [sl]
   189c0:	sub	r3, r3, #48	; 0x30
   189c4:	cmp	r3, #9
   189c8:	bhi	18980 <__assert_fail@plt+0x75b0>
   189cc:	cmp	r6, #1
   189d0:	ldrb	ip, [sl, #1]
   189d4:	ldrble	r0, [sl, #2]
   189d8:	ble	18ca4 <__assert_fail@plt+0x78d4>
   189dc:	sub	r1, ip, #48	; 0x30
   189e0:	cmp	r1, #9
   189e4:	bhi	18980 <__assert_fail@plt+0x75b0>
   189e8:	cmp	r6, #2
   189ec:	ldrb	r0, [sl, #2]
   189f0:	beq	18ca4 <__assert_fail@plt+0x78d4>
   189f4:	sub	r1, r0, #48	; 0x30
   189f8:	cmp	r1, #9
   189fc:	bhi	18980 <__assert_fail@plt+0x75b0>
   18a00:	cmp	r6, #3
   18a04:	ldrb	r5, [sl, #3]
   18a08:	beq	18dc4 <__assert_fail@plt+0x79f4>
   18a0c:	sub	r1, r5, #48	; 0x30
   18a10:	cmp	r1, #9
   18a14:	bhi	18980 <__assert_fail@plt+0x75b0>
   18a18:	cmp	r6, #4
   18a1c:	ldrb	r1, [sl, #4]
   18a20:	beq	18dd8 <__assert_fail@plt+0x7a08>
   18a24:	sub	lr, r1, #48	; 0x30
   18a28:	cmp	lr, #9
   18a2c:	bhi	18980 <__assert_fail@plt+0x75b0>
   18a30:	cmp	r6, #5
   18a34:	ldrb	r7, [sl, #5]
   18a38:	ldrbeq	lr, [sl, #6]
   18a3c:	ldrbeq	r4, [sl, #7]
   18a40:	beq	18aec <__assert_fail@plt+0x771c>
   18a44:	sub	lr, r7, #48	; 0x30
   18a48:	cmp	lr, #9
   18a4c:	bhi	18980 <__assert_fail@plt+0x75b0>
   18a50:	cmp	r6, #6
   18a54:	ldrb	lr, [sl, #6]
   18a58:	ldrbeq	r4, [sl, #7]
   18a5c:	beq	18aec <__assert_fail@plt+0x771c>
   18a60:	sub	r4, lr, #48	; 0x30
   18a64:	cmp	r4, #9
   18a68:	bhi	18980 <__assert_fail@plt+0x75b0>
   18a6c:	cmp	r6, #7
   18a70:	ldrb	r4, [sl, #7]
   18a74:	beq	18aec <__assert_fail@plt+0x771c>
   18a78:	sub	r8, r4, #48	; 0x30
   18a7c:	cmp	r8, #9
   18a80:	bhi	18980 <__assert_fail@plt+0x75b0>
   18a84:	cmp	r6, #8
   18a88:	beq	18aec <__assert_fail@plt+0x771c>
   18a8c:	ldrb	r8, [sl, #8]
   18a90:	sub	r8, r8, #48	; 0x30
   18a94:	cmp	r8, #9
   18a98:	bhi	18980 <__assert_fail@plt+0x75b0>
   18a9c:	cmp	r6, #9
   18aa0:	beq	18aec <__assert_fail@plt+0x771c>
   18aa4:	ldrb	r8, [sl, #9]
   18aa8:	sub	r8, r8, #48	; 0x30
   18aac:	cmp	r8, #9
   18ab0:	bhi	18980 <__assert_fail@plt+0x75b0>
   18ab4:	cmp	r6, #10
   18ab8:	beq	18aec <__assert_fail@plt+0x771c>
   18abc:	ldrb	r8, [sl, #10]
   18ac0:	sub	r8, r8, #48	; 0x30
   18ac4:	cmp	r8, #9
   18ac8:	bhi	18980 <__assert_fail@plt+0x75b0>
   18acc:	cmp	r6, #11
   18ad0:	beq	18aec <__assert_fail@plt+0x771c>
   18ad4:	ldrb	r8, [sl, #11]
   18ad8:	sub	r8, r8, #48	; 0x30
   18adc:	cmp	r8, #9
   18ae0:	bhi	18980 <__assert_fail@plt+0x75b0>
   18ae4:	cmp	r6, #12
   18ae8:	bne	18980 <__assert_fail@plt+0x75b0>
   18aec:	sub	r0, r0, #48	; 0x30
   18af0:	sub	r1, r1, #48	; 0x30
   18af4:	add	r3, r3, r3, lsl #2
   18af8:	sub	lr, lr, #48	; 0x30
   18afc:	add	r1, r1, r1, lsl #2
   18b00:	add	r0, r0, r0, lsl #2
   18b04:	add	lr, lr, lr, lsl #2
   18b08:	add	r7, r7, r1, lsl #1
   18b0c:	add	r5, r5, r0, lsl #1
   18b10:	add	r1, r4, lr, lsl #1
   18b14:	sub	r7, r7, #48	; 0x30
   18b18:	add	r4, ip, r3, lsl #1
   18b1c:	sub	r5, r5, #48	; 0x30
   18b20:	asr	r6, r6, #1
   18b24:	sub	r3, r1, #48	; 0x30
   18b28:	sub	r8, r4, #48	; 0x30
   18b2c:	cmp	r6, #4
   18b30:	str	r8, [sp, #12]
   18b34:	str	r5, [sp, #16]
   18b38:	str	r7, [sp, #20]
   18b3c:	str	r3, [sp, #24]
   18b40:	beq	18cbc <__assert_fail@plt+0x78ec>
   18b44:	ldrb	r1, [sl, #8]
   18b48:	cmp	r6, #6
   18b4c:	ldrb	r0, [sl, #9]
   18b50:	sub	r1, r1, #48	; 0x30
   18b54:	add	r1, r1, r1, lsl #2
   18b58:	add	r1, r0, r1, lsl #1
   18b5c:	sub	r1, r1, #48	; 0x30
   18b60:	str	r1, [sp, #28]
   18b64:	bne	18cbc <__assert_fail@plt+0x78ec>
   18b68:	ldrb	r1, [sl, #10]
   18b6c:	tst	r9, #1
   18b70:	subne	r4, r4, #49	; 0x31
   18b74:	movne	r6, r3
   18b78:	ldrb	r0, [sl, #11]
   18b7c:	sub	r1, r1, #48	; 0x30
   18b80:	add	r1, r1, r1, lsl #2
   18b84:	add	r1, r0, r1, lsl #1
   18b88:	sub	r1, r1, #48	; 0x30
   18b8c:	str	r1, [sp, #32]
   18b90:	beq	18da4 <__assert_fail@plt+0x79d4>
   18b94:	tst	r9, #2
   18b98:	beq	18980 <__assert_fail@plt+0x75b0>
   18b9c:	ldr	r8, [sp, #28]
   18ba0:	mov	r1, #100	; 0x64
   18ba4:	ldr	r3, [sp, #32]
   18ba8:	mla	r8, r1, r8, r3
   18bac:	sub	r8, r8, #1888	; 0x760
   18bb0:	sub	r8, r8, #12
   18bb4:	cmp	r2, #0
   18bb8:	beq	18cfc <__assert_fail@plt+0x792c>
   18bbc:	ldrb	r3, [r2, #1]
   18bc0:	sub	r3, r3, #48	; 0x30
   18bc4:	cmp	r3, #9
   18bc8:	bhi	18980 <__assert_fail@plt+0x75b0>
   18bcc:	ldrb	r2, [r2, #2]
   18bd0:	sub	r1, r2, #48	; 0x30
   18bd4:	cmp	r1, #9
   18bd8:	bhi	18980 <__assert_fail@plt+0x75b0>
   18bdc:	add	r3, r3, r3, lsl #2
   18be0:	add	r3, r2, r3, lsl #1
   18be4:	sub	fp, r3, #48	; 0x30
   18be8:	mov	r3, #0
   18bec:	add	sl, sp, #12
   18bf0:	mvn	r9, #0
   18bf4:	str	r3, [sp]
   18bf8:	b	18c58 <__assert_fail@plt+0x7888>
   18bfc:	ldr	lr, [sp, #20]
   18c00:	ldr	ip, [sp, #28]
   18c04:	ldr	r3, [sp, #32]
   18c08:	eor	lr, lr, r7
   18c0c:	ldr	r1, [sp, #24]
   18c10:	eor	ip, ip, r4
   18c14:	eor	r3, r3, r8
   18c18:	orr	r3, r3, ip
   18c1c:	ldr	ip, [sp, #16]
   18c20:	eor	r1, r1, r5
   18c24:	orr	r3, r3, r1
   18c28:	ldr	r1, [sp, #12]
   18c2c:	orr	r3, r3, lr
   18c30:	eor	ip, ip, r6
   18c34:	orr	r3, r3, ip
   18c38:	eor	r1, r1, fp
   18c3c:	orrs	r3, r3, r1
   18c40:	beq	18c88 <__assert_fail@plt+0x78b8>
   18c44:	mov	r3, #1
   18c48:	cmp	fp, #60	; 0x3c
   18c4c:	str	r3, [sp]
   18c50:	bne	18980 <__assert_fail@plt+0x75b0>
   18c54:	mov	fp, #59	; 0x3b
   18c58:	mov	r0, sl
   18c5c:	str	fp, [sp, #12]
   18c60:	strd	r6, [sp, #16]
   18c64:	str	r5, [sp, #24]
   18c68:	str	r4, [sp, #28]
   18c6c:	strd	r8, [sp, #32]
   18c70:	str	r9, [sp, #44]	; 0x2c
   18c74:	bl	110b8 <mktime@plt>
   18c78:	ldr	r3, [sp, #36]	; 0x24
   18c7c:	cmp	r3, #0
   18c80:	bge	18bfc <__assert_fail@plt+0x782c>
   18c84:	b	18980 <__assert_fail@plt+0x75b0>
   18c88:	ldr	r2, [sp]
   18c8c:	adds	r9, r0, r2
   18c90:	bvs	18980 <__assert_fail@plt+0x75b0>
   18c94:	ldr	r3, [sp, #4]
   18c98:	mov	r0, #1
   18c9c:	str	r9, [r3]
   18ca0:	b	18984 <__assert_fail@plt+0x75b4>
   18ca4:	ldrb	r5, [sl, #3]
   18ca8:	ldrb	r1, [sl, #4]
   18cac:	ldrb	r7, [sl, #5]
   18cb0:	ldrb	lr, [sl, #6]
   18cb4:	ldrb	r4, [sl, #7]
   18cb8:	b	18aec <__assert_fail@plt+0x771c>
   18cbc:	ands	r0, r9, #1
   18cc0:	sub	r3, r6, #4
   18cc4:	beq	18d04 <__assert_fail@plt+0x7934>
   18cc8:	cmp	r3, #1
   18ccc:	sub	r4, r4, #49	; 0x31
   18cd0:	ldr	r5, [sp, #16]
   18cd4:	ldr	r7, [sp, #20]
   18cd8:	ldr	r6, [sp, #24]
   18cdc:	bne	18d70 <__assert_fail@plt+0x79a0>
   18ce0:	ldr	r8, [sp, #28]
   18ce4:	cmp	r8, #68	; 0x44
   18ce8:	bgt	18bb4 <__assert_fail@plt+0x77e4>
   18cec:	tst	r9, #8
   18cf0:	addeq	r8, r8, #100	; 0x64
   18cf4:	beq	18bb4 <__assert_fail@plt+0x77e4>
   18cf8:	b	18980 <__assert_fail@plt+0x75b0>
   18cfc:	mov	fp, r2
   18d00:	b	18be8 <__assert_fail@plt+0x7818>
   18d04:	cmp	r3, #1
   18d08:	bne	18d40 <__assert_fail@plt+0x7970>
   18d0c:	cmp	r8, #68	; 0x44
   18d10:	bgt	18d20 <__assert_fail@plt+0x7950>
   18d14:	tst	r9, #8
   18d18:	addeq	r8, r4, #52	; 0x34
   18d1c:	bne	18980 <__assert_fail@plt+0x75b0>
   18d20:	sub	r6, r6, #-1073741820	; 0xc0000004
   18d24:	add	sl, sp, #12
   18d28:	ldr	r4, [sl, r6, lsl #2]
   18d2c:	add	sl, sl, r6, lsl #2
   18d30:	ldmib	sl, {r5, r7}
   18d34:	ldr	r6, [sl, #12]
   18d38:	sub	r4, r4, #1
   18d3c:	b	18bb4 <__assert_fail@plt+0x77e4>
   18d40:	cmp	r3, #2
   18d44:	beq	18da4 <__assert_fail@plt+0x79d4>
   18d48:	str	r2, [sp]
   18d4c:	bl	1110c <time@plt>
   18d50:	str	r0, [sp, #8]
   18d54:	add	r0, sp, #8
   18d58:	bl	11220 <localtime@plt>
   18d5c:	cmp	r0, #0
   18d60:	beq	18980 <__assert_fail@plt+0x75b0>
   18d64:	ldr	r2, [sp]
   18d68:	ldr	r8, [r0, #20]
   18d6c:	b	18d20 <__assert_fail@plt+0x7950>
   18d70:	cmp	r3, #2
   18d74:	beq	18b94 <__assert_fail@plt+0x77c4>
   18d78:	mov	r0, #0
   18d7c:	str	r2, [sp]
   18d80:	bl	1110c <time@plt>
   18d84:	str	r0, [sp, #8]
   18d88:	add	r0, sp, #8
   18d8c:	bl	11220 <localtime@plt>
   18d90:	cmp	r0, #0
   18d94:	beq	18980 <__assert_fail@plt+0x75b0>
   18d98:	ldr	r2, [sp]
   18d9c:	ldr	r8, [r0, #20]
   18da0:	b	18bb4 <__assert_fail@plt+0x77e4>
   18da4:	tst	r9, #2
   18da8:	beq	18980 <__assert_fail@plt+0x75b0>
   18dac:	ldr	r1, [sp, #16]
   18db0:	mov	r3, #100	; 0x64
   18db4:	mla	r8, r3, r8, r1
   18db8:	sub	r8, r8, #1888	; 0x760
   18dbc:	sub	r8, r8, #12
   18dc0:	b	18d20 <__assert_fail@plt+0x7950>
   18dc4:	ldrb	r1, [sl, #4]
   18dc8:	ldrb	r7, [sl, #5]
   18dcc:	ldrb	lr, [sl, #6]
   18dd0:	ldrb	r4, [sl, #7]
   18dd4:	b	18aec <__assert_fail@plt+0x771c>
   18dd8:	ldrb	r7, [sl, #5]
   18ddc:	ldrb	lr, [sl, #6]
   18de0:	ldrb	r4, [sl, #7]
   18de4:	b	18aec <__assert_fail@plt+0x771c>
   18de8:	movw	r0, #10960	; 0x2ad0
   18dec:	movt	r0, #2
   18df0:	push	{lr}		; (str lr, [sp, #-4]!)
   18df4:	sub	sp, sp, #12
   18df8:	bl	111d8 <getenv@plt>
   18dfc:	subs	r3, r0, #0
   18e00:	beq	18e10 <__assert_fail@plt+0x7a40>
   18e04:	ldrb	r3, [r3]
   18e08:	cmp	r3, #0
   18e0c:	bne	18e20 <__assert_fail@plt+0x7a50>
   18e10:	movw	r0, #4201	; 0x1069
   18e14:	movt	r0, #3
   18e18:	add	sp, sp, #12
   18e1c:	pop	{pc}		; (ldr pc, [sp], #4)
   18e20:	mov	r2, #10
   18e24:	add	r1, sp, #4
   18e28:	bl	110ac <strtol@plt>
   18e2c:	ldr	r2, [sp, #4]
   18e30:	movw	r3, #4201	; 0x1069
   18e34:	movt	r3, #3
   18e38:	ldrb	r2, [r2]
   18e3c:	cmp	r2, #0
   18e40:	movne	r0, r3
   18e44:	add	sp, sp, #12
   18e48:	pop	{pc}		; (ldr pc, [sp], #4)
   18e4c:	strd	r4, [sp, #-16]!
   18e50:	subs	r4, r0, #0
   18e54:	str	r6, [sp, #8]
   18e58:	str	lr, [sp, #12]
   18e5c:	beq	18ef4 <__assert_fail@plt+0x7b24>
   18e60:	mov	r1, #47	; 0x2f
   18e64:	bl	11328 <strrchr@plt>
   18e68:	subs	r5, r0, #0
   18e6c:	beq	18ecc <__assert_fail@plt+0x7afc>
   18e70:	add	r6, r5, #1
   18e74:	sub	r3, r6, r4
   18e78:	cmp	r3, #6
   18e7c:	ble	18ecc <__assert_fail@plt+0x7afc>
   18e80:	movw	r1, #11032	; 0x2b18
   18e84:	movt	r1, #2
   18e88:	mov	r2, #7
   18e8c:	sub	r0, r5, #6
   18e90:	bl	11394 <strncmp@plt>
   18e94:	cmp	r0, #0
   18e98:	bne	18ecc <__assert_fail@plt+0x7afc>
   18e9c:	movw	r1, #11040	; 0x2b20
   18ea0:	movt	r1, #2
   18ea4:	mov	r2, #3
   18ea8:	mov	r0, r6
   18eac:	bl	11394 <strncmp@plt>
   18eb0:	cmp	r0, #0
   18eb4:	movne	r4, r6
   18eb8:	bne	18ecc <__assert_fail@plt+0x7afc>
   18ebc:	add	r4, r5, #4
   18ec0:	movw	r3, #16784	; 0x4190
   18ec4:	movt	r3, #3
   18ec8:	str	r4, [r3]
   18ecc:	movw	r2, #16856	; 0x41d8
   18ed0:	movt	r2, #3
   18ed4:	ldr	r6, [sp, #8]
   18ed8:	movw	r3, #16788	; 0x4194
   18edc:	movt	r3, #3
   18ee0:	str	r4, [r2]
   18ee4:	str	r4, [r3]
   18ee8:	ldrd	r4, [sp]
   18eec:	add	sp, sp, #12
   18ef0:	pop	{pc}		; (ldr pc, [sp], #4)
   18ef4:	movw	r3, #16800	; 0x41a0
   18ef8:	movt	r3, #3
   18efc:	movw	r0, #10976	; 0x2ae0
   18f00:	movt	r0, #2
   18f04:	ldr	r3, [r3]
   18f08:	mov	r2, #55	; 0x37
   18f0c:	mov	r1, #1
   18f10:	bl	11184 <fwrite@plt>
   18f14:	bl	113a0 <abort@plt>
   18f18:	mov	r2, #5
   18f1c:	strd	r4, [sp, #-16]!
   18f20:	mov	r5, r0
   18f24:	str	r6, [sp, #8]
   18f28:	mov	r6, r1
   18f2c:	mov	r1, r0
   18f30:	mov	r0, #0
   18f34:	str	lr, [sp, #12]
   18f38:	bl	11130 <dcgettext@plt>
   18f3c:	cmp	r5, r0
   18f40:	mov	r4, r0
   18f44:	beq	18f5c <__assert_fail@plt+0x7b8c>
   18f48:	mov	r0, r4
   18f4c:	ldrd	r4, [sp]
   18f50:	ldr	r6, [sp, #8]
   18f54:	add	sp, sp, #12
   18f58:	pop	{pc}		; (ldr pc, [sp], #4)
   18f5c:	bl	1e090 <__assert_fail@plt+0xccc0>
   18f60:	ldrb	r3, [r0]
   18f64:	bic	r3, r3, #32
   18f68:	cmp	r3, #85	; 0x55
   18f6c:	bne	18fd4 <__assert_fail@plt+0x7c04>
   18f70:	ldrb	r3, [r0, #1]
   18f74:	bic	r3, r3, #32
   18f78:	cmp	r3, #84	; 0x54
   18f7c:	bne	19054 <__assert_fail@plt+0x7c84>
   18f80:	ldrb	r3, [r0, #2]
   18f84:	bic	r3, r3, #32
   18f88:	cmp	r3, #70	; 0x46
   18f8c:	bne	19054 <__assert_fail@plt+0x7c84>
   18f90:	ldrb	r3, [r0, #3]
   18f94:	cmp	r3, #45	; 0x2d
   18f98:	bne	19054 <__assert_fail@plt+0x7c84>
   18f9c:	ldrb	r3, [r0, #4]
   18fa0:	cmp	r3, #56	; 0x38
   18fa4:	bne	19054 <__assert_fail@plt+0x7c84>
   18fa8:	ldrb	r3, [r0, #5]
   18fac:	cmp	r3, #0
   18fb0:	bne	19054 <__assert_fail@plt+0x7c84>
   18fb4:	ldrb	r2, [r4]
   18fb8:	movw	r3, #11132	; 0x2b7c
   18fbc:	movt	r3, #2
   18fc0:	movw	r4, #11144	; 0x2b88
   18fc4:	movt	r4, #2
   18fc8:	cmp	r2, #96	; 0x60
   18fcc:	movne	r4, r3
   18fd0:	b	18f48 <__assert_fail@plt+0x7b78>
   18fd4:	cmp	r3, #71	; 0x47
   18fd8:	bne	19054 <__assert_fail@plt+0x7c84>
   18fdc:	ldrb	r3, [r0, #1]
   18fe0:	bic	r3, r3, #32
   18fe4:	cmp	r3, #66	; 0x42
   18fe8:	bne	19054 <__assert_fail@plt+0x7c84>
   18fec:	ldrb	r3, [r0, #2]
   18ff0:	cmp	r3, #49	; 0x31
   18ff4:	bne	19054 <__assert_fail@plt+0x7c84>
   18ff8:	ldrb	r3, [r0, #3]
   18ffc:	cmp	r3, #56	; 0x38
   19000:	bne	19054 <__assert_fail@plt+0x7c84>
   19004:	ldrb	r3, [r0, #4]
   19008:	cmp	r3, #48	; 0x30
   1900c:	bne	19054 <__assert_fail@plt+0x7c84>
   19010:	ldrb	r3, [r0, #5]
   19014:	cmp	r3, #51	; 0x33
   19018:	bne	19054 <__assert_fail@plt+0x7c84>
   1901c:	ldrb	r3, [r0, #6]
   19020:	cmp	r3, #48	; 0x30
   19024:	bne	19054 <__assert_fail@plt+0x7c84>
   19028:	ldrb	r3, [r0, #7]
   1902c:	cmp	r3, #0
   19030:	bne	19054 <__assert_fail@plt+0x7c84>
   19034:	ldrb	r2, [r4]
   19038:	movw	r3, #11136	; 0x2b80
   1903c:	movt	r3, #2
   19040:	movw	r4, #11140	; 0x2b84
   19044:	movt	r4, #2
   19048:	cmp	r2, #96	; 0x60
   1904c:	movne	r4, r3
   19050:	b	18f48 <__assert_fail@plt+0x7b78>
   19054:	movw	r3, #11148	; 0x2b8c
   19058:	movt	r3, #2
   1905c:	cmp	r6, #9
   19060:	movw	r4, #11128	; 0x2b78
   19064:	movt	r4, #2
   19068:	movne	r4, r3
   1906c:	b	18f48 <__assert_fail@plt+0x7b78>
   19070:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19074:	strd	r6, [sp, #8]
   19078:	strd	r8, [sp, #16]
   1907c:	mov	r8, r3
   19080:	strd	sl, [sp, #24]
   19084:	mov	fp, r0
   19088:	mov	sl, r1
   1908c:	str	lr, [sp, #32]
   19090:	sub	sp, sp, #140	; 0x8c
   19094:	ldr	r3, [sp, #180]	; 0xb4
   19098:	str	r2, [sp, #28]
   1909c:	and	r4, r3, #2
   190a0:	ubfx	r3, r3, #1, #1
   190a4:	str	r3, [sp, #44]	; 0x2c
   190a8:	bl	1119c <__ctype_get_mb_cur_max@plt>
   190ac:	ldr	r3, [sp, #176]	; 0xb0
   190b0:	str	r0, [sp, #76]	; 0x4c
   190b4:	cmp	r3, #10
   190b8:	ldrls	pc, [pc, r3, lsl #2]
   190bc:	b	1aa58 <__assert_fail@plt+0x9688>
   190c0:	andeq	r9, r1, r0, asr #10
   190c4:	andeq	r9, r1, ip, asr r6
   190c8:	ldrdeq	r9, [r1], -r8
   190cc:	andeq	r9, r1, r8, asr #13
   190d0:	andeq	r9, r1, r8, asr #8
   190d4:	andeq	r9, r1, r4, asr #9
   190d8:	muleq	r1, ip, r5
   190dc:	andeq	r9, r1, r4, lsl #12
   190e0:	andeq	r9, r1, ip, ror #1
   190e4:	andeq	r9, r1, ip, ror #1
   190e8:	andeq	r9, r1, ip, ror #1
   190ec:	ldr	r3, [sp, #176]	; 0xb0
   190f0:	cmp	r3, #10
   190f4:	beq	19120 <__assert_fail@plt+0x7d50>
   190f8:	mov	r1, r3
   190fc:	movw	r0, #11152	; 0x2b90
   19100:	movt	r0, #2
   19104:	bl	18f18 <__assert_fail@plt+0x7b48>
   19108:	str	r0, [sp, #188]	; 0xbc
   1910c:	movw	r0, #11148	; 0x2b8c
   19110:	movt	r0, #2
   19114:	ldr	r1, [sp, #176]	; 0xb0
   19118:	bl	18f18 <__assert_fail@plt+0x7b48>
   1911c:	str	r0, [sp, #192]	; 0xc0
   19120:	cmp	r4, #0
   19124:	movne	r4, #0
   19128:	beq	1a7e4 <__assert_fail@plt+0x9414>
   1912c:	mov	r5, #0
   19130:	ldr	r0, [sp, #192]	; 0xc0
   19134:	mov	r9, r5
   19138:	str	r5, [sp, #64]	; 0x40
   1913c:	bl	11274 <strlen@plt>
   19140:	mov	r3, #1
   19144:	ldr	r2, [sp, #44]	; 0x2c
   19148:	cmp	r0, r5
   1914c:	moveq	r2, r5
   19150:	str	r3, [sp, #32]
   19154:	str	r3, [sp, #48]	; 0x30
   19158:	str	r5, [sp, #52]	; 0x34
   1915c:	str	r3, [sp, #60]	; 0x3c
   19160:	ldr	r3, [sp, #180]	; 0xb4
   19164:	str	r0, [sp, #56]	; 0x38
   19168:	str	r5, [sp, #68]	; 0x44
   1916c:	str	r5, [sp, #80]	; 0x50
   19170:	str	r5, [sp, #84]	; 0x54
   19174:	and	r3, r3, #1
   19178:	str	r2, [sp, #88]	; 0x58
   1917c:	str	r3, [sp, #92]	; 0x5c
   19180:	ldr	r3, [sp, #180]	; 0xb4
   19184:	and	r3, r3, #4
   19188:	str	r3, [sp, #96]	; 0x60
   1918c:	ldr	r3, [sp, #192]	; 0xc0
   19190:	str	r3, [sp, #72]	; 0x48
   19194:	mov	r3, fp
   19198:	mov	r7, #0
   1919c:	mov	fp, r9
   191a0:	mov	r9, r3
   191a4:	cmn	r8, #1
   191a8:	beq	197ac <__assert_fail@plt+0x83dc>
   191ac:	subs	r6, r8, r7
   191b0:	movne	r6, #1
   191b4:	cmp	r6, #0
   191b8:	beq	197c4 <__assert_fail@plt+0x83f4>
   191bc:	ldr	r0, [sp, #28]
   191c0:	ldr	r3, [sp, #48]	; 0x30
   191c4:	cmp	r3, #0
   191c8:	add	r3, r0, r7
   191cc:	str	r3, [sp, #36]	; 0x24
   191d0:	beq	19c50 <__assert_fail@plt+0x8880>
   191d4:	ldr	r2, [sp, #56]	; 0x38
   191d8:	cmp	r2, #0
   191dc:	beq	1a150 <__assert_fail@plt+0x8d80>
   191e0:	cmp	r2, #1
   191e4:	mov	r3, r2
   191e8:	movls	r3, #0
   191ec:	movhi	r3, #1
   191f0:	cmn	r8, #1
   191f4:	add	r5, r7, r2
   191f8:	movne	r3, #0
   191fc:	cmp	r3, #0
   19200:	beq	1920c <__assert_fail@plt+0x7e3c>
   19204:	bl	11274 <strlen@plt>
   19208:	mov	r8, r0
   1920c:	cmp	r5, r8
   19210:	bhi	1a150 <__assert_fail@plt+0x8d80>
   19214:	ldr	r0, [sp, #36]	; 0x24
   19218:	ldr	r2, [sp, #56]	; 0x38
   1921c:	ldr	r1, [sp, #72]	; 0x48
   19220:	bl	11118 <memcmp@plt>
   19224:	cmp	r0, #0
   19228:	bne	1a150 <__assert_fail@plt+0x8d80>
   1922c:	ldr	r3, [sp, #44]	; 0x2c
   19230:	cmp	r3, #0
   19234:	bne	1a8fc <__assert_fail@plt+0x952c>
   19238:	ldr	r3, [sp, #36]	; 0x24
   1923c:	ldrb	r5, [r3]
   19240:	cmp	r5, #126	; 0x7e
   19244:	ldrls	pc, [pc, r5, lsl #2]
   19248:	b	1a6e4 <__assert_fail@plt+0x9314>
   1924c:	andeq	r9, r1, r0, lsr #18
   19250:	andeq	sl, r1, r4, ror #13
   19254:	andeq	sl, r1, r4, ror #13
   19258:	andeq	sl, r1, r4, ror #13
   1925c:	andeq	sl, r1, r4, ror #13
   19260:	andeq	sl, r1, r4, ror #13
   19264:	andeq	sl, r1, r4, ror #13
   19268:	andeq	r9, r1, r8, ror r8
   1926c:	andeq	r9, r1, r0, ror r8
   19270:	andeq	r9, r1, r0, lsl #17
   19274:	andeq	r9, r1, r4, lsl #20
   19278:	strdeq	r9, [r1], -r4
   1927c:	andeq	r9, r1, ip, lsl r7
   19280:	ldrdeq	r9, [r1], -r0
   19284:	andeq	sl, r1, r4, ror #13
   19288:	andeq	sl, r1, r4, ror #13
   1928c:	andeq	sl, r1, r4, ror #13
   19290:	andeq	sl, r1, r4, ror #13
   19294:	andeq	sl, r1, r4, ror #13
   19298:	andeq	sl, r1, r4, ror #13
   1929c:	andeq	sl, r1, r4, ror #13
   192a0:	andeq	sl, r1, r4, ror #13
   192a4:	andeq	sl, r1, r4, ror #13
   192a8:	andeq	sl, r1, r4, ror #13
   192ac:	andeq	sl, r1, r4, ror #13
   192b0:	andeq	sl, r1, r4, ror #13
   192b4:	andeq	sl, r1, r4, ror #13
   192b8:	andeq	sl, r1, r4, ror #13
   192bc:	andeq	sl, r1, r4, ror #13
   192c0:	andeq	sl, r1, r4, ror #13
   192c4:	andeq	sl, r1, r4, ror #13
   192c8:	andeq	sl, r1, r4, ror #13
   192cc:	andeq	r9, r1, ip, ror sl
   192d0:	andeq	r9, r1, r0, ror sl
   192d4:	andeq	r9, r1, r0, ror sl
   192d8:	andeq	r9, r1, r4, ror #20
   192dc:	andeq	r9, r1, r0, ror sl
   192e0:	andeq	r9, r1, r8, asr #22
   192e4:	andeq	r9, r1, r0, ror sl
   192e8:			; <UNDEFINED> instruction: 0x00019bb8
   192ec:	andeq	r9, r1, r0, ror sl
   192f0:	andeq	r9, r1, r0, ror sl
   192f4:	andeq	r9, r1, r0, ror sl
   192f8:	andeq	r9, r1, r8, asr #22
   192fc:	andeq	r9, r1, r8, asr #22
   19300:	andeq	r9, r1, r8, asr #22
   19304:	andeq	r9, r1, r8, asr #22
   19308:	andeq	r9, r1, r8, asr #22
   1930c:	andeq	r9, r1, r8, asr #22
   19310:	andeq	r9, r1, r8, asr #22
   19314:	andeq	r9, r1, r8, asr #22
   19318:	andeq	r9, r1, r8, asr #22
   1931c:	andeq	r9, r1, r8, asr #22
   19320:	andeq	r9, r1, r8, asr #22
   19324:	andeq	r9, r1, r8, asr #22
   19328:	andeq	r9, r1, r8, asr #22
   1932c:	andeq	r9, r1, r8, asr #22
   19330:	andeq	r9, r1, r8, asr #22
   19334:	andeq	r9, r1, r8, asr #22
   19338:	andeq	r9, r1, r0, ror sl
   1933c:	andeq	r9, r1, r0, ror sl
   19340:	andeq	r9, r1, r0, ror sl
   19344:	andeq	r9, r1, r0, ror sl
   19348:	andeq	r9, r1, r8, ror #22
   1934c:	andeq	sl, r1, r4, ror #13
   19350:	andeq	r9, r1, r8, asr #22
   19354:	andeq	r9, r1, r8, asr #22
   19358:	andeq	r9, r1, r8, asr #22
   1935c:	andeq	r9, r1, r8, asr #22
   19360:	andeq	r9, r1, r8, asr #22
   19364:	andeq	r9, r1, r8, asr #22
   19368:	andeq	r9, r1, r8, asr #22
   1936c:	andeq	r9, r1, r8, asr #22
   19370:	andeq	r9, r1, r8, asr #22
   19374:	andeq	r9, r1, r8, asr #22
   19378:	andeq	r9, r1, r8, asr #22
   1937c:	andeq	r9, r1, r8, asr #22
   19380:	andeq	r9, r1, r8, asr #22
   19384:	andeq	r9, r1, r8, asr #22
   19388:	andeq	r9, r1, r8, asr #22
   1938c:	andeq	r9, r1, r8, asr #22
   19390:	andeq	r9, r1, r8, asr #22
   19394:	andeq	r9, r1, r8, asr #22
   19398:	andeq	r9, r1, r8, asr #22
   1939c:	andeq	r9, r1, r8, asr #22
   193a0:	andeq	r9, r1, r8, asr #22
   193a4:	andeq	r9, r1, r8, asr #22
   193a8:	andeq	r9, r1, r8, asr #22
   193ac:	andeq	r9, r1, r8, asr #22
   193b0:	andeq	r9, r1, r8, asr #22
   193b4:	andeq	r9, r1, r8, asr #22
   193b8:	andeq	r9, r1, r0, ror sl
   193bc:	andeq	r9, r1, ip, lsl #22
   193c0:	andeq	r9, r1, r8, asr #22
   193c4:	andeq	r9, r1, r0, ror sl
   193c8:	andeq	r9, r1, r8, asr #22
   193cc:	andeq	r9, r1, r0, ror sl
   193d0:	andeq	r9, r1, r8, asr #22
   193d4:	andeq	r9, r1, r8, asr #22
   193d8:	andeq	r9, r1, r8, asr #22
   193dc:	andeq	r9, r1, r8, asr #22
   193e0:	andeq	r9, r1, r8, asr #22
   193e4:	andeq	r9, r1, r8, asr #22
   193e8:	andeq	r9, r1, r8, asr #22
   193ec:	andeq	r9, r1, r8, asr #22
   193f0:	andeq	r9, r1, r8, asr #22
   193f4:	andeq	r9, r1, r8, asr #22
   193f8:	andeq	r9, r1, r8, asr #22
   193fc:	andeq	r9, r1, r8, asr #22
   19400:	andeq	r9, r1, r8, asr #22
   19404:	andeq	r9, r1, r8, asr #22
   19408:	andeq	r9, r1, r8, asr #22
   1940c:	andeq	r9, r1, r8, asr #22
   19410:	andeq	r9, r1, r8, asr #22
   19414:	andeq	r9, r1, r8, asr #22
   19418:	andeq	r9, r1, r8, asr #22
   1941c:	andeq	r9, r1, r8, asr #22
   19420:	andeq	r9, r1, r8, asr #22
   19424:	andeq	r9, r1, r8, asr #22
   19428:	andeq	r9, r1, r8, asr #22
   1942c:	andeq	r9, r1, r8, asr #22
   19430:	andeq	r9, r1, r8, asr #22
   19434:	andeq	r9, r1, r8, asr #22
   19438:	andeq	r9, r1, r8, lsl sl
   1943c:	andeq	r9, r1, r0, ror sl
   19440:	andeq	r9, r1, r8, lsl sl
   19444:	andeq	r9, r1, r4, ror #20
   19448:	ldr	r3, [sp, #180]	; 0xb4
   1944c:	cmp	r4, #0
   19450:	and	r3, r3, #1
   19454:	str	r3, [sp, #92]	; 0x5c
   19458:	ldr	r3, [sp, #180]	; 0xb4
   1945c:	and	r3, r3, #4
   19460:	str	r3, [sp, #96]	; 0x60
   19464:	moveq	r3, #1
   19468:	streq	r3, [sp, #60]	; 0x3c
   1946c:	beq	19bfc <__assert_fail@plt+0x882c>
   19470:	mov	r3, #0
   19474:	mov	r2, #1
   19478:	mov	r4, r3
   1947c:	mov	r9, r3
   19480:	str	r2, [sp, #32]
   19484:	str	r2, [sp, #44]	; 0x2c
   19488:	str	r3, [sp, #48]	; 0x30
   1948c:	str	r2, [sp, #52]	; 0x34
   19490:	str	r2, [sp, #56]	; 0x38
   19494:	str	r3, [sp, #60]	; 0x3c
   19498:	str	r2, [sp, #64]	; 0x40
   1949c:	str	r2, [sp, #68]	; 0x44
   194a0:	str	r3, [sp, #80]	; 0x50
   194a4:	str	r3, [sp, #84]	; 0x54
   194a8:	str	r3, [sp, #88]	; 0x58
   194ac:	movw	r3, #11148	; 0x2b8c
   194b0:	movt	r3, #2
   194b4:	str	r3, [sp, #72]	; 0x48
   194b8:	mov	r3, #2
   194bc:	str	r3, [sp, #176]	; 0xb0
   194c0:	b	19194 <__assert_fail@plt+0x7dc4>
   194c4:	ldr	r3, [sp, #180]	; 0xb4
   194c8:	cmp	r4, #0
   194cc:	and	r3, r3, #1
   194d0:	str	r3, [sp, #92]	; 0x5c
   194d4:	ldr	r3, [sp, #180]	; 0xb4
   194d8:	and	r3, r3, #4
   194dc:	str	r3, [sp, #96]	; 0x60
   194e0:	bne	1a8b4 <__assert_fail@plt+0x94e4>
   194e4:	cmp	sl, #0
   194e8:	beq	1a660 <__assert_fail@plt+0x9290>
   194ec:	mov	r3, #34	; 0x22
   194f0:	mov	r2, r4
   194f4:	mov	r1, #1
   194f8:	mov	r9, r2
   194fc:	strb	r3, [fp]
   19500:	movw	r3, #11128	; 0x2b78
   19504:	movt	r3, #2
   19508:	mov	r4, r1
   1950c:	str	r1, [sp, #32]
   19510:	str	r2, [sp, #44]	; 0x2c
   19514:	str	r1, [sp, #48]	; 0x30
   19518:	str	r2, [sp, #52]	; 0x34
   1951c:	str	r1, [sp, #56]	; 0x38
   19520:	str	r1, [sp, #60]	; 0x3c
   19524:	str	r2, [sp, #64]	; 0x40
   19528:	str	r2, [sp, #68]	; 0x44
   1952c:	str	r3, [sp, #72]	; 0x48
   19530:	str	r2, [sp, #80]	; 0x50
   19534:	str	r2, [sp, #84]	; 0x54
   19538:	str	r2, [sp, #88]	; 0x58
   1953c:	b	19194 <__assert_fail@plt+0x7dc4>
   19540:	mov	r3, #0
   19544:	mov	r2, #1
   19548:	mov	r9, r3
   1954c:	str	r2, [sp, #32]
   19550:	str	r3, [sp, #44]	; 0x2c
   19554:	str	r3, [sp, #48]	; 0x30
   19558:	str	r3, [sp, #52]	; 0x34
   1955c:	str	r3, [sp, #60]	; 0x3c
   19560:	strd	r2, [sp, #64]	; 0x40
   19564:	str	r3, [sp, #72]	; 0x48
   19568:	str	r3, [sp, #80]	; 0x50
   1956c:	str	r3, [sp, #88]	; 0x58
   19570:	ldr	r3, [sp, #180]	; 0xb4
   19574:	and	r3, r3, r2
   19578:	str	r3, [sp, #92]	; 0x5c
   1957c:	ldr	r3, [sp, #180]	; 0xb4
   19580:	and	r3, r3, #4
   19584:	str	r3, [sp, #96]	; 0x60
   19588:	ldr	r3, [sp, #176]	; 0xb0
   1958c:	mov	r4, r3
   19590:	str	r3, [sp, #56]	; 0x38
   19594:	str	r3, [sp, #84]	; 0x54
   19598:	b	19194 <__assert_fail@plt+0x7dc4>
   1959c:	mov	r3, #1
   195a0:	mov	r4, #0
   195a4:	mov	r9, r4
   195a8:	str	r3, [sp, #32]
   195ac:	str	r3, [sp, #44]	; 0x2c
   195b0:	str	r3, [sp, #48]	; 0x30
   195b4:	str	r4, [sp, #52]	; 0x34
   195b8:	str	r3, [sp, #56]	; 0x38
   195bc:	str	r3, [sp, #60]	; 0x3c
   195c0:	str	r3, [sp, #88]	; 0x58
   195c4:	movw	r3, #11128	; 0x2b78
   195c8:	movt	r3, #2
   195cc:	str	r4, [sp, #64]	; 0x40
   195d0:	str	r4, [sp, #68]	; 0x44
   195d4:	str	r3, [sp, #72]	; 0x48
   195d8:	ldr	r3, [sp, #180]	; 0xb4
   195dc:	str	r4, [sp, #80]	; 0x50
   195e0:	str	r4, [sp, #84]	; 0x54
   195e4:	and	r3, r3, #1
   195e8:	str	r3, [sp, #92]	; 0x5c
   195ec:	ldr	r3, [sp, #180]	; 0xb4
   195f0:	and	r3, r3, #4
   195f4:	str	r3, [sp, #96]	; 0x60
   195f8:	mov	r3, #5
   195fc:	str	r3, [sp, #176]	; 0xb0
   19600:	b	19194 <__assert_fail@plt+0x7dc4>
   19604:	mov	r3, #1
   19608:	mov	r4, #0
   1960c:	mov	r9, r4
   19610:	str	r3, [sp, #32]
   19614:	str	r4, [sp, #44]	; 0x2c
   19618:	str	r3, [sp, #48]	; 0x30
   1961c:	str	r3, [sp, #60]	; 0x3c
   19620:	ldr	r3, [sp, #180]	; 0xb4
   19624:	str	r4, [sp, #52]	; 0x34
   19628:	str	r4, [sp, #56]	; 0x38
   1962c:	str	r4, [sp, #64]	; 0x40
   19630:	str	r4, [sp, #68]	; 0x44
   19634:	and	r3, r3, #1
   19638:	str	r4, [sp, #72]	; 0x48
   1963c:	str	r4, [sp, #80]	; 0x50
   19640:	str	r4, [sp, #84]	; 0x54
   19644:	str	r3, [sp, #92]	; 0x5c
   19648:	ldr	r3, [sp, #180]	; 0xb4
   1964c:	str	r4, [sp, #88]	; 0x58
   19650:	and	r3, r3, #4
   19654:	str	r3, [sp, #96]	; 0x60
   19658:	b	19194 <__assert_fail@plt+0x7dc4>
   1965c:	mov	r3, #0
   19660:	mov	r2, #1
   19664:	ldr	r1, [sp, #176]	; 0xb0
   19668:	mov	r4, r3
   1966c:	mov	r9, r3
   19670:	movw	r3, #11148	; 0x2b8c
   19674:	movt	r3, #2
   19678:	str	r2, [sp, #32]
   1967c:	str	r2, [sp, #44]	; 0x2c
   19680:	str	r4, [sp, #48]	; 0x30
   19684:	strd	r2, [sp, #68]	; 0x44
   19688:	ldr	r3, [sp, #180]	; 0xb4
   1968c:	str	r2, [sp, #52]	; 0x34
   19690:	str	r1, [sp, #56]	; 0x38
   19694:	str	r4, [sp, #60]	; 0x3c
   19698:	str	r2, [sp, #64]	; 0x40
   1969c:	and	r3, r3, r2
   196a0:	str	r4, [sp, #80]	; 0x50
   196a4:	str	r4, [sp, #84]	; 0x54
   196a8:	str	r4, [sp, #88]	; 0x58
   196ac:	str	r3, [sp, #92]	; 0x5c
   196b0:	ldr	r3, [sp, #180]	; 0xb4
   196b4:	and	r3, r3, #4
   196b8:	str	r3, [sp, #96]	; 0x60
   196bc:	mov	r3, #2
   196c0:	str	r3, [sp, #176]	; 0xb0
   196c4:	b	19194 <__assert_fail@plt+0x7dc4>
   196c8:	mov	r3, #1
   196cc:	mov	r2, #0
   196d0:	mov	r4, r2
   196d4:	mov	r9, r2
   196d8:	str	r3, [sp, #32]
   196dc:	str	r3, [sp, #44]	; 0x2c
   196e0:	str	r2, [sp, #48]	; 0x30
   196e4:	str	r3, [sp, #52]	; 0x34
   196e8:	str	r3, [sp, #56]	; 0x38
   196ec:	str	r3, [sp, #60]	; 0x3c
   196f0:	str	r3, [sp, #64]	; 0x40
   196f4:	str	r3, [sp, #68]	; 0x44
   196f8:	str	r3, [sp, #88]	; 0x58
   196fc:	movw	r3, #11148	; 0x2b8c
   19700:	movt	r3, #2
   19704:	str	r3, [sp, #72]	; 0x48
   19708:	ldr	r3, [sp, #180]	; 0xb4
   1970c:	str	r2, [sp, #80]	; 0x50
   19710:	str	r2, [sp, #84]	; 0x54
   19714:	and	r3, r3, #1
   19718:	b	196ac <__assert_fail@plt+0x82dc>
   1971c:	mov	r5, #102	; 0x66
   19720:	mov	r6, #0
   19724:	ldr	r3, [sp, #44]	; 0x2c
   19728:	cmp	r3, #0
   1972c:	bne	1a5dc <__assert_fail@plt+0x920c>
   19730:	ldr	r2, [sp, #52]	; 0x34
   19734:	eor	r3, fp, #1
   19738:	ands	r3, r2, r3
   1973c:	beq	19774 <__assert_fail@plt+0x83a4>
   19740:	cmp	sl, r4
   19744:	mov	fp, r3
   19748:	movhi	r2, #39	; 0x27
   1974c:	strbhi	r2, [r9, r4]
   19750:	add	r2, r4, #1
   19754:	cmp	sl, r2
   19758:	movhi	r1, #36	; 0x24
   1975c:	strbhi	r1, [r9, r2]
   19760:	add	r2, r4, #2
   19764:	add	r4, r4, #3
   19768:	cmp	sl, r2
   1976c:	movhi	r1, #39	; 0x27
   19770:	strbhi	r1, [r9, r2]
   19774:	cmp	sl, r4
   19778:	add	r7, r7, #1
   1977c:	movhi	r3, #92	; 0x5c
   19780:	strbhi	r3, [r9, r4]
   19784:	add	r4, r4, #1
   19788:	cmp	r4, sl
   1978c:	ldr	r3, [sp, #32]
   19790:	strbcc	r5, [r9, r4]
   19794:	cmp	r6, #0
   19798:	add	r4, r4, #1
   1979c:	moveq	r3, #0
   197a0:	cmn	r8, #1
   197a4:	str	r3, [sp, #32]
   197a8:	bne	191ac <__assert_fail@plt+0x7ddc>
   197ac:	ldr	r3, [sp, #28]
   197b0:	ldrb	r6, [r3, r7]
   197b4:	adds	r6, r6, #0
   197b8:	movne	r6, #1
   197bc:	cmp	r6, #0
   197c0:	bne	191bc <__assert_fail@plt+0x7dec>
   197c4:	mov	r3, r9
   197c8:	mov	r9, fp
   197cc:	mov	fp, r3
   197d0:	ldr	r3, [sp, #68]	; 0x44
   197d4:	cmp	r4, #0
   197d8:	movne	r3, #0
   197dc:	cmp	r3, #0
   197e0:	bne	1a9d4 <__assert_fail@plt+0x9604>
   197e4:	ldr	r3, [sp, #44]	; 0x2c
   197e8:	ldr	r2, [sp, #52]	; 0x34
   197ec:	eor	r3, r3, #1
   197f0:	ands	r2, r3, r2
   197f4:	beq	1a90c <__assert_fail@plt+0x953c>
   197f8:	ldr	r3, [sp, #80]	; 0x50
   197fc:	cmp	r3, #0
   19800:	beq	1a910 <__assert_fail@plt+0x9540>
   19804:	ldr	r3, [sp, #32]
   19808:	cmp	r3, #0
   1980c:	bne	1a984 <__assert_fail@plt+0x95b4>
   19810:	ldr	r3, [sp, #84]	; 0x54
   19814:	adds	r3, r3, #0
   19818:	movne	r3, #1
   1981c:	cmp	sl, #0
   19820:	movne	r3, #0
   19824:	cmp	r3, #0
   19828:	ldreq	r2, [sp, #80]	; 0x50
   1982c:	beq	1a910 <__assert_fail@plt+0x9540>
   19830:	ldr	r2, [sp, #84]	; 0x54
   19834:	mov	sl, r2
   19838:	mov	r0, #0
   1983c:	mov	r4, #1
   19840:	mov	r1, #39	; 0x27
   19844:	str	r0, [sp, #44]	; 0x2c
   19848:	strb	r1, [fp]
   1984c:	str	r0, [sp, #48]	; 0x30
   19850:	str	r4, [sp, #52]	; 0x34
   19854:	str	r4, [sp, #56]	; 0x38
   19858:	str	r4, [sp, #64]	; 0x40
   1985c:	str	r0, [sp, #68]	; 0x44
   19860:	str	r3, [sp, #80]	; 0x50
   19864:	str	r2, [sp, #84]	; 0x54
   19868:	str	r0, [sp, #88]	; 0x58
   1986c:	b	194ac <__assert_fail@plt+0x80dc>
   19870:	mov	r5, #98	; 0x62
   19874:	b	19720 <__assert_fail@plt+0x8350>
   19878:	mov	r5, #97	; 0x61
   1987c:	b	19720 <__assert_fail@plt+0x8350>
   19880:	ldr	r3, [sp, #48]	; 0x30
   19884:	str	r3, [sp, #40]	; 0x28
   19888:	mov	r3, #116	; 0x74
   1988c:	ldr	r2, [sp, #68]	; 0x44
   19890:	cmp	r2, #0
   19894:	bne	19a90 <__assert_fail@plt+0x86c0>
   19898:	ldr	r2, [sp, #60]	; 0x3c
   1989c:	cmp	r2, #0
   198a0:	bne	199ec <__assert_fail@plt+0x861c>
   198a4:	ldr	r3, [sp, #44]	; 0x2c
   198a8:	mov	r6, #0
   198ac:	cmp	r3, #0
   198b0:	beq	19a5c <__assert_fail@plt+0x868c>
   198b4:	mov	r3, fp
   198b8:	ldr	r2, [sp, #184]	; 0xb8
   198bc:	cmp	r2, #0
   198c0:	beq	198e0 <__assert_fail@plt+0x8510>
   198c4:	ubfx	r1, r5, #5, #8
   198c8:	mov	r0, r2
   198cc:	and	r2, r5, #31
   198d0:	ldr	r1, [r0, r1, lsl #2]
   198d4:	lsr	r2, r1, r2
   198d8:	tst	r2, #1
   198dc:	bne	19724 <__assert_fail@plt+0x8354>
   198e0:	ldr	r2, [sp, #40]	; 0x28
   198e4:	cmp	r2, #0
   198e8:	addeq	r7, r7, #1
   198ec:	bne	19724 <__assert_fail@plt+0x8354>
   198f0:	cmp	r3, #0
   198f4:	beq	19788 <__assert_fail@plt+0x83b8>
   198f8:	cmp	sl, r4
   198fc:	mov	fp, #0
   19900:	movhi	r3, #39	; 0x27
   19904:	strbhi	r3, [r9, r4]
   19908:	add	r3, r4, #1
   1990c:	add	r4, r4, #2
   19910:	cmp	sl, r3
   19914:	movhi	r2, #39	; 0x27
   19918:	strbhi	r2, [r9, r3]
   1991c:	b	19788 <__assert_fail@plt+0x83b8>
   19920:	ldr	r3, [sp, #48]	; 0x30
   19924:	str	r3, [sp, #40]	; 0x28
   19928:	eor	r3, fp, #1
   1992c:	ldr	r2, [sp, #52]	; 0x34
   19930:	ands	r2, r2, r3
   19934:	beq	1a5f4 <__assert_fail@plt+0x9224>
   19938:	cmp	sl, r4
   1993c:	movhi	r3, #39	; 0x27
   19940:	strbhi	r3, [r9, r4]
   19944:	add	r3, r4, #1
   19948:	cmp	sl, r3
   1994c:	movhi	r1, #36	; 0x24
   19950:	strbhi	r1, [r9, r3]
   19954:	add	r3, r4, #2
   19958:	cmp	sl, r3
   1995c:	movhi	r1, #39	; 0x27
   19960:	strbhi	r1, [r9, r3]
   19964:	add	r3, r4, #3
   19968:	cmp	sl, r3
   1996c:	bls	1a640 <__assert_fail@plt+0x9270>
   19970:	mov	r4, r3
   19974:	mov	r3, #92	; 0x5c
   19978:	mov	fp, r2
   1997c:	mov	r2, r4
   19980:	strb	r3, [r9, r4]
   19984:	ldr	r3, [sp, #176]	; 0xb0
   19988:	add	r4, r4, #1
   1998c:	cmp	r3, #2
   19990:	beq	1a6a8 <__assert_fail@plt+0x92d8>
   19994:	add	r3, r7, #1
   19998:	cmp	r3, r8
   1999c:	bcs	199b4 <__assert_fail@plt+0x85e4>
   199a0:	ldr	r1, [sp, #28]
   199a4:	ldrb	r3, [r1, r3]
   199a8:	sub	r3, r3, #48	; 0x30
   199ac:	cmp	r3, #9
   199b0:	bls	1a6b8 <__assert_fail@plt+0x92e8>
   199b4:	mov	r3, #0
   199b8:	mov	r5, #48	; 0x30
   199bc:	ldr	r6, [sp, #64]	; 0x40
   199c0:	cmp	r6, #0
   199c4:	beq	198b8 <__assert_fail@plt+0x84e8>
   199c8:	mov	r6, #0
   199cc:	b	198e0 <__assert_fail@plt+0x8510>
   199d0:	ldr	r3, [sp, #48]	; 0x30
   199d4:	str	r3, [sp, #40]	; 0x28
   199d8:	ldr	r2, [sp, #60]	; 0x3c
   199dc:	mov	r5, #13
   199e0:	mov	r3, #114	; 0x72
   199e4:	cmp	r2, #0
   199e8:	beq	198a4 <__assert_fail@plt+0x84d4>
   199ec:	mov	r5, r3
   199f0:	b	19720 <__assert_fail@plt+0x8350>
   199f4:	ldr	r3, [sp, #48]	; 0x30
   199f8:	str	r3, [sp, #40]	; 0x28
   199fc:	mov	r3, #118	; 0x76
   19a00:	b	19898 <__assert_fail@plt+0x84c8>
   19a04:	ldr	r3, [sp, #48]	; 0x30
   19a08:	str	r3, [sp, #40]	; 0x28
   19a0c:	mov	r5, #10
   19a10:	mov	r3, #110	; 0x6e
   19a14:	b	19898 <__assert_fail@plt+0x84c8>
   19a18:	ldr	r3, [sp, #48]	; 0x30
   19a1c:	cmn	r8, #1
   19a20:	str	r3, [sp, #40]	; 0x28
   19a24:	beq	19e6c <__assert_fail@plt+0x8a9c>
   19a28:	subs	r3, r8, #1
   19a2c:	movne	r3, #1
   19a30:	cmp	r3, #0
   19a34:	bne	19a40 <__assert_fail@plt+0x8670>
   19a38:	cmp	r7, #0
   19a3c:	beq	19a84 <__assert_fail@plt+0x86b4>
   19a40:	mov	r6, #0
   19a44:	ldr	r3, [sp, #64]	; 0x40
   19a48:	cmp	r3, #0
   19a4c:	beq	198b4 <__assert_fail@plt+0x84e4>
   19a50:	ldr	r3, [sp, #44]	; 0x2c
   19a54:	cmp	r3, #0
   19a58:	bne	198b4 <__assert_fail@plt+0x84e4>
   19a5c:	mov	r3, fp
   19a60:	b	198e0 <__assert_fail@plt+0x8510>
   19a64:	ldr	r3, [sp, #48]	; 0x30
   19a68:	str	r3, [sp, #40]	; 0x28
   19a6c:	b	19a38 <__assert_fail@plt+0x8668>
   19a70:	ldr	r3, [sp, #48]	; 0x30
   19a74:	str	r3, [sp, #40]	; 0x28
   19a78:	b	19a40 <__assert_fail@plt+0x8670>
   19a7c:	ldr	r6, [sp, #48]	; 0x30
   19a80:	str	r6, [sp, #40]	; 0x28
   19a84:	ldr	r3, [sp, #68]	; 0x44
   19a88:	cmp	r3, #0
   19a8c:	beq	19a44 <__assert_fail@plt+0x8674>
   19a90:	mov	r3, #2
   19a94:	mov	fp, r9
   19a98:	str	r3, [sp, #176]	; 0xb0
   19a9c:	ldr	r3, [sp, #60]	; 0x3c
   19aa0:	cmp	r3, #0
   19aa4:	ldr	r3, [sp, #176]	; 0xb0
   19aa8:	movne	r3, #4
   19aac:	str	r3, [sp, #176]	; 0xb0
   19ab0:	mov	lr, #0
   19ab4:	mov	r0, fp
   19ab8:	ldr	r2, [sp, #28]
   19abc:	ldr	r3, [sp, #180]	; 0xb4
   19ac0:	ldr	r1, [sp, #188]	; 0xbc
   19ac4:	bic	ip, r3, #2
   19ac8:	ldr	r3, [sp, #176]	; 0xb0
   19acc:	stm	sp, {r3, ip, lr}
   19ad0:	mov	r3, r8
   19ad4:	ldr	ip, [sp, #192]	; 0xc0
   19ad8:	str	r1, [sp, #12]
   19adc:	mov	r1, sl
   19ae0:	str	ip, [sp, #16]
   19ae4:	bl	19070 <__assert_fail@plt+0x7ca0>
   19ae8:	mov	r4, r0
   19aec:	mov	r0, r4
   19af0:	add	sp, sp, #140	; 0x8c
   19af4:	ldrd	r4, [sp]
   19af8:	ldrd	r6, [sp, #8]
   19afc:	ldrd	r8, [sp, #16]
   19b00:	ldrd	sl, [sp, #24]
   19b04:	add	sp, sp, #32
   19b08:	pop	{pc}		; (ldr pc, [sp], #4)
   19b0c:	ldr	r3, [sp, #48]	; 0x30
   19b10:	str	r3, [sp, #40]	; 0x28
   19b14:	ldr	r3, [sp, #176]	; 0xb0
   19b18:	cmp	r3, #2
   19b1c:	beq	19e94 <__assert_fail@plt+0x8ac4>
   19b20:	ldr	r3, [sp, #88]	; 0x58
   19b24:	cmp	r3, #0
   19b28:	moveq	r5, #92	; 0x5c
   19b2c:	moveq	r3, r5
   19b30:	beq	19898 <__assert_fail@plt+0x84c8>
   19b34:	add	r7, r7, #1
   19b38:	mov	r3, fp
   19b3c:	mov	r6, #0
   19b40:	mov	r5, #92	; 0x5c
   19b44:	b	198f0 <__assert_fail@plt+0x8520>
   19b48:	ldr	r3, [sp, #64]	; 0x40
   19b4c:	cmp	r3, #0
   19b50:	bne	1a9c8 <__assert_fail@plt+0x95f8>
   19b54:	ldr	r2, [sp, #48]	; 0x30
   19b58:	mov	r3, fp
   19b5c:	mov	r6, r2
   19b60:	str	r2, [sp, #40]	; 0x28
   19b64:	b	198b8 <__assert_fail@plt+0x84e8>
   19b68:	ldr	r3, [sp, #176]	; 0xb0
   19b6c:	cmp	r3, #2
   19b70:	beq	1a904 <__assert_fail@plt+0x9534>
   19b74:	cmp	r3, #5
   19b78:	ldr	r3, [sp, #48]	; 0x30
   19b7c:	str	r3, [sp, #40]	; 0x28
   19b80:	bne	19bac <__assert_fail@plt+0x87dc>
   19b84:	ldr	r3, [sp, #96]	; 0x60
   19b88:	cmp	r3, #0
   19b8c:	beq	1a608 <__assert_fail@plt+0x9238>
   19b90:	add	r3, r7, #2
   19b94:	cmp	r3, r8
   19b98:	bcs	19bac <__assert_fail@plt+0x87dc>
   19b9c:	ldr	r2, [sp, #36]	; 0x24
   19ba0:	ldrb	r5, [r2, #1]
   19ba4:	cmp	r5, #63	; 0x3f
   19ba8:	beq	1a6f0 <__assert_fail@plt+0x9320>
   19bac:	mov	r6, #0
   19bb0:	mov	r5, #63	; 0x3f
   19bb4:	b	19a44 <__assert_fail@plt+0x8674>
   19bb8:	ldr	r3, [sp, #176]	; 0xb0
   19bbc:	cmp	r3, #2
   19bc0:	ldr	r3, [sp, #48]	; 0x30
   19bc4:	beq	1a3ac <__assert_fail@plt+0x8fdc>
   19bc8:	mov	r5, #39	; 0x27
   19bcc:	str	r3, [sp, #40]	; 0x28
   19bd0:	str	r6, [sp, #80]	; 0x50
   19bd4:	b	19a44 <__assert_fail@plt+0x8674>
   19bd8:	ldr	r3, [sp, #180]	; 0xb4
   19bdc:	cmp	r4, #0
   19be0:	and	r3, r3, #1
   19be4:	str	r3, [sp, #92]	; 0x5c
   19be8:	ldr	r3, [sp, #180]	; 0xb4
   19bec:	and	r3, r3, #4
   19bf0:	str	r3, [sp, #96]	; 0x60
   19bf4:	bne	1aa14 <__assert_fail@plt+0x9644>
   19bf8:	str	r4, [sp, #60]	; 0x3c
   19bfc:	cmp	sl, #0
   19c00:	bne	1a9f8 <__assert_fail@plt+0x9628>
   19c04:	mov	r3, #1
   19c08:	movw	r2, #11148	; 0x2b8c
   19c0c:	movt	r2, #2
   19c10:	mov	r4, r3
   19c14:	mov	r3, #2
   19c18:	mov	r9, sl
   19c1c:	str	r4, [sp, #32]
   19c20:	str	sl, [sp, #44]	; 0x2c
   19c24:	str	sl, [sp, #48]	; 0x30
   19c28:	str	r4, [sp, #52]	; 0x34
   19c2c:	str	r4, [sp, #56]	; 0x38
   19c30:	str	r4, [sp, #64]	; 0x40
   19c34:	str	sl, [sp, #68]	; 0x44
   19c38:	str	r2, [sp, #72]	; 0x48
   19c3c:	str	sl, [sp, #80]	; 0x50
   19c40:	str	sl, [sp, #84]	; 0x54
   19c44:	str	sl, [sp, #88]	; 0x58
   19c48:	str	r3, [sp, #176]	; 0xb0
   19c4c:	b	19194 <__assert_fail@plt+0x7dc4>
   19c50:	ldrb	r5, [r0, r7]
   19c54:	cmp	r5, #126	; 0x7e
   19c58:	ldrls	pc, [pc, r5, lsl #2]
   19c5c:	b	19fc0 <__assert_fail@plt+0x8bf0>
   19c60:	andeq	r9, r1, ip, lsl #31
   19c64:	andeq	r9, r1, r0, asr #31
   19c68:	andeq	r9, r1, r0, asr #31
   19c6c:	andeq	r9, r1, r0, asr #31
   19c70:	andeq	r9, r1, r0, asr #31
   19c74:	andeq	r9, r1, r0, asr #31
   19c78:	andeq	r9, r1, r0, asr #31
   19c7c:	andeq	r9, r1, ip, ror pc
   19c80:	andeq	r9, r1, ip, ror #30
   19c84:	strdeq	r9, [r1], -r0
   19c88:	andeq	r9, r1, ip, asr pc
   19c8c:	ldrdeq	r9, [r1], -r0
   19c90:			; <UNDEFINED> instruction: 0x00019fb0
   19c94:	andeq	r9, r1, ip, lsr pc
   19c98:	andeq	r9, r1, r0, asr #31
   19c9c:	andeq	r9, r1, r0, asr #31
   19ca0:	andeq	r9, r1, r0, asr #31
   19ca4:	andeq	r9, r1, r0, asr #31
   19ca8:	andeq	r9, r1, r0, asr #31
   19cac:	andeq	r9, r1, r0, asr #31
   19cb0:	andeq	r9, r1, r0, asr #31
   19cb4:	andeq	r9, r1, r0, asr #31
   19cb8:	andeq	r9, r1, r0, asr #31
   19cbc:	andeq	r9, r1, r0, asr #31
   19cc0:	andeq	r9, r1, r0, asr #31
   19cc4:	andeq	r9, r1, r0, asr #31
   19cc8:	andeq	r9, r1, r0, asr #31
   19ccc:	andeq	r9, r1, r0, asr #31
   19cd0:	andeq	r9, r1, r0, asr #31
   19cd4:	andeq	r9, r1, r0, asr #31
   19cd8:	andeq	r9, r1, r0, asr #31
   19cdc:	andeq	r9, r1, r0, asr #31
   19ce0:	andeq	r9, r1, r4, ror #29
   19ce4:	andeq	r9, r1, ip, asr #30
   19ce8:	andeq	r9, r1, ip, asr #30
   19cec:	andeq	r9, r1, r4, asr #29
   19cf0:	andeq	r9, r1, ip, asr #30
   19cf4:			; <UNDEFINED> instruction: 0x00019eb8
   19cf8:	andeq	r9, r1, ip, asr #30
   19cfc:	andeq	r9, r1, r8, lsr #30
   19d00:	andeq	r9, r1, ip, asr #30
   19d04:	andeq	r9, r1, ip, asr #30
   19d08:	andeq	r9, r1, ip, asr #30
   19d0c:			; <UNDEFINED> instruction: 0x00019eb8
   19d10:			; <UNDEFINED> instruction: 0x00019eb8
   19d14:			; <UNDEFINED> instruction: 0x00019eb8
   19d18:			; <UNDEFINED> instruction: 0x00019eb8
   19d1c:			; <UNDEFINED> instruction: 0x00019eb8
   19d20:			; <UNDEFINED> instruction: 0x00019eb8
   19d24:			; <UNDEFINED> instruction: 0x00019eb8
   19d28:			; <UNDEFINED> instruction: 0x00019eb8
   19d2c:			; <UNDEFINED> instruction: 0x00019eb8
   19d30:			; <UNDEFINED> instruction: 0x00019eb8
   19d34:			; <UNDEFINED> instruction: 0x00019eb8
   19d38:			; <UNDEFINED> instruction: 0x00019eb8
   19d3c:			; <UNDEFINED> instruction: 0x00019eb8
   19d40:			; <UNDEFINED> instruction: 0x00019eb8
   19d44:			; <UNDEFINED> instruction: 0x00019eb8
   19d48:			; <UNDEFINED> instruction: 0x00019eb8
   19d4c:	andeq	r9, r1, ip, asr #30
   19d50:	andeq	r9, r1, ip, asr #30
   19d54:	andeq	r9, r1, ip, asr #30
   19d58:	andeq	r9, r1, ip, asr #30
   19d5c:	andeq	r9, r1, r0, lsl #30
   19d60:	andeq	r9, r1, r0, asr #31
   19d64:			; <UNDEFINED> instruction: 0x00019eb8
   19d68:			; <UNDEFINED> instruction: 0x00019eb8
   19d6c:			; <UNDEFINED> instruction: 0x00019eb8
   19d70:			; <UNDEFINED> instruction: 0x00019eb8
   19d74:			; <UNDEFINED> instruction: 0x00019eb8
   19d78:			; <UNDEFINED> instruction: 0x00019eb8
   19d7c:			; <UNDEFINED> instruction: 0x00019eb8
   19d80:			; <UNDEFINED> instruction: 0x00019eb8
   19d84:			; <UNDEFINED> instruction: 0x00019eb8
   19d88:			; <UNDEFINED> instruction: 0x00019eb8
   19d8c:			; <UNDEFINED> instruction: 0x00019eb8
   19d90:			; <UNDEFINED> instruction: 0x00019eb8
   19d94:			; <UNDEFINED> instruction: 0x00019eb8
   19d98:			; <UNDEFINED> instruction: 0x00019eb8
   19d9c:			; <UNDEFINED> instruction: 0x00019eb8
   19da0:			; <UNDEFINED> instruction: 0x00019eb8
   19da4:			; <UNDEFINED> instruction: 0x00019eb8
   19da8:			; <UNDEFINED> instruction: 0x00019eb8
   19dac:			; <UNDEFINED> instruction: 0x00019eb8
   19db0:			; <UNDEFINED> instruction: 0x00019eb8
   19db4:			; <UNDEFINED> instruction: 0x00019eb8
   19db8:			; <UNDEFINED> instruction: 0x00019eb8
   19dbc:			; <UNDEFINED> instruction: 0x00019eb8
   19dc0:			; <UNDEFINED> instruction: 0x00019eb8
   19dc4:			; <UNDEFINED> instruction: 0x00019eb8
   19dc8:			; <UNDEFINED> instruction: 0x00019eb8
   19dcc:	andeq	r9, r1, ip, asr #30
   19dd0:	andeq	r9, r1, r0, lsl #29
   19dd4:			; <UNDEFINED> instruction: 0x00019eb8
   19dd8:	andeq	r9, r1, ip, asr #30
   19ddc:			; <UNDEFINED> instruction: 0x00019eb8
   19de0:	andeq	r9, r1, ip, asr #30
   19de4:			; <UNDEFINED> instruction: 0x00019eb8
   19de8:			; <UNDEFINED> instruction: 0x00019eb8
   19dec:			; <UNDEFINED> instruction: 0x00019eb8
   19df0:			; <UNDEFINED> instruction: 0x00019eb8
   19df4:			; <UNDEFINED> instruction: 0x00019eb8
   19df8:			; <UNDEFINED> instruction: 0x00019eb8
   19dfc:			; <UNDEFINED> instruction: 0x00019eb8
   19e00:			; <UNDEFINED> instruction: 0x00019eb8
   19e04:			; <UNDEFINED> instruction: 0x00019eb8
   19e08:			; <UNDEFINED> instruction: 0x00019eb8
   19e0c:			; <UNDEFINED> instruction: 0x00019eb8
   19e10:			; <UNDEFINED> instruction: 0x00019eb8
   19e14:			; <UNDEFINED> instruction: 0x00019eb8
   19e18:			; <UNDEFINED> instruction: 0x00019eb8
   19e1c:			; <UNDEFINED> instruction: 0x00019eb8
   19e20:			; <UNDEFINED> instruction: 0x00019eb8
   19e24:			; <UNDEFINED> instruction: 0x00019eb8
   19e28:			; <UNDEFINED> instruction: 0x00019eb8
   19e2c:			; <UNDEFINED> instruction: 0x00019eb8
   19e30:			; <UNDEFINED> instruction: 0x00019eb8
   19e34:			; <UNDEFINED> instruction: 0x00019eb8
   19e38:			; <UNDEFINED> instruction: 0x00019eb8
   19e3c:			; <UNDEFINED> instruction: 0x00019eb8
   19e40:			; <UNDEFINED> instruction: 0x00019eb8
   19e44:			; <UNDEFINED> instruction: 0x00019eb8
   19e48:			; <UNDEFINED> instruction: 0x00019eb8
   19e4c:	andeq	r9, r1, ip, asr lr
   19e50:	andeq	r9, r1, ip, asr #30
   19e54:	andeq	r9, r1, ip, asr lr
   19e58:	andeq	r9, r1, r4, asr #29
   19e5c:	mov	r3, #0
   19e60:	cmn	r8, #1
   19e64:	str	r3, [sp, #40]	; 0x28
   19e68:	bne	19a28 <__assert_fail@plt+0x8658>
   19e6c:	ldr	r3, [sp, #28]
   19e70:	ldrb	r3, [r3, #1]
   19e74:	adds	r3, r3, #0
   19e78:	movne	r3, #1
   19e7c:	b	19a30 <__assert_fail@plt+0x8660>
   19e80:	mov	r3, #0
   19e84:	str	r3, [sp, #40]	; 0x28
   19e88:	ldr	r3, [sp, #176]	; 0xb0
   19e8c:	cmp	r3, #2
   19e90:	bne	19b20 <__assert_fail@plt+0x8750>
   19e94:	ldr	r3, [sp, #44]	; 0x2c
   19e98:	cmp	r3, #0
   19e9c:	bne	1a7dc <__assert_fail@plt+0x940c>
   19ea0:	mov	r6, r3
   19ea4:	add	r7, r7, #1
   19ea8:	mov	r3, fp
   19eac:	mov	r5, #92	; 0x5c
   19eb0:	b	198f0 <__assert_fail@plt+0x8520>
   19eb4:	ldr	r6, [sp, #48]	; 0x30
   19eb8:	mov	r3, #0
   19ebc:	str	r3, [sp, #40]	; 0x28
   19ec0:	b	19a44 <__assert_fail@plt+0x8674>
   19ec4:	mov	r3, #0
   19ec8:	str	r3, [sp, #40]	; 0x28
   19ecc:	b	19a38 <__assert_fail@plt+0x8668>
   19ed0:	mov	r3, #0
   19ed4:	str	r3, [sp, #40]	; 0x28
   19ed8:	mov	r3, #118	; 0x76
   19edc:	b	19898 <__assert_fail@plt+0x84c8>
   19ee0:	ldr	r6, [sp, #48]	; 0x30
   19ee4:	mov	r3, #0
   19ee8:	str	r3, [sp, #40]	; 0x28
   19eec:	b	19a84 <__assert_fail@plt+0x86b4>
   19ef0:	mov	r3, #0
   19ef4:	str	r3, [sp, #40]	; 0x28
   19ef8:	mov	r3, #116	; 0x74
   19efc:	b	1988c <__assert_fail@plt+0x84bc>
   19f00:	ldr	r3, [sp, #176]	; 0xb0
   19f04:	cmp	r3, #2
   19f08:	beq	1a418 <__assert_fail@plt+0x9048>
   19f0c:	cmp	r3, #5
   19f10:	mov	r3, #0
   19f14:	str	r3, [sp, #40]	; 0x28
   19f18:	beq	19b84 <__assert_fail@plt+0x87b4>
   19f1c:	mov	r6, #0
   19f20:	mov	r5, #63	; 0x3f
   19f24:	b	19a44 <__assert_fail@plt+0x8674>
   19f28:	ldr	r3, [sp, #176]	; 0xb0
   19f2c:	cmp	r3, #2
   19f30:	beq	1a3a0 <__assert_fail@plt+0x8fd0>
   19f34:	mov	r3, #0
   19f38:	b	19bc8 <__assert_fail@plt+0x87f8>
   19f3c:	mov	r3, #0
   19f40:	str	r3, [sp, #40]	; 0x28
   19f44:	mov	r3, #114	; 0x72
   19f48:	b	1988c <__assert_fail@plt+0x84bc>
   19f4c:	mov	r3, #0
   19f50:	mov	r6, r3
   19f54:	str	r3, [sp, #40]	; 0x28
   19f58:	b	19a84 <__assert_fail@plt+0x86b4>
   19f5c:	mov	r3, #0
   19f60:	str	r3, [sp, #40]	; 0x28
   19f64:	mov	r3, #110	; 0x6e
   19f68:	b	1988c <__assert_fail@plt+0x84bc>
   19f6c:	mov	r3, #0
   19f70:	str	r3, [sp, #40]	; 0x28
   19f74:	mov	r3, #98	; 0x62
   19f78:	b	19898 <__assert_fail@plt+0x84c8>
   19f7c:	mov	r3, #0
   19f80:	str	r3, [sp, #40]	; 0x28
   19f84:	mov	r3, #97	; 0x61
   19f88:	b	19898 <__assert_fail@plt+0x84c8>
   19f8c:	ldr	r3, [sp, #60]	; 0x3c
   19f90:	cmp	r3, #0
   19f94:	bne	1a384 <__assert_fail@plt+0x8fb4>
   19f98:	ldr	r3, [sp, #92]	; 0x5c
   19f9c:	cmp	r3, #0
   19fa0:	addne	r7, r7, #1
   19fa4:	bne	191a4 <__assert_fail@plt+0x7dd4>
   19fa8:	str	r3, [sp, #40]	; 0x28
   19fac:	b	198a4 <__assert_fail@plt+0x84d4>
   19fb0:	mov	r3, #0
   19fb4:	str	r3, [sp, #40]	; 0x28
   19fb8:	mov	r3, #102	; 0x66
   19fbc:	b	19898 <__assert_fail@plt+0x84c8>
   19fc0:	mov	r3, #0
   19fc4:	str	r3, [sp, #40]	; 0x28
   19fc8:	ldr	r3, [sp, #76]	; 0x4c
   19fcc:	cmp	r3, #1
   19fd0:	bne	1a438 <__assert_fail@plt+0x9068>
   19fd4:	bl	1125c <__ctype_b_loc@plt>
   19fd8:	ldr	r2, [r0]
   19fdc:	sxth	r3, r5
   19fe0:	lsl	r3, r3, #1
   19fe4:	ldr	r1, [sp, #76]	; 0x4c
   19fe8:	ldrh	r3, [r2, r3]
   19fec:	mov	r0, r1
   19ff0:	and	r3, r3, #16384	; 0x4000
   19ff4:	cmp	r3, #0
   19ff8:	ldr	r3, [sp, #60]	; 0x3c
   19ffc:	movne	r6, #1
   1a000:	moveq	r6, #0
   1a004:	movne	r2, #0
   1a008:	andeq	r2, r3, #1
   1a00c:	cmp	r2, #0
   1a010:	beq	19a44 <__assert_fail@plt+0x8674>
   1a014:	ldr	r2, [sp, #60]	; 0x3c
   1a018:	mov	r6, #0
   1a01c:	add	r1, r0, r7
   1a020:	mov	ip, #39	; 0x27
   1a024:	str	r6, [sp, #100]	; 0x64
   1a028:	mov	r0, #0
   1a02c:	ldr	lr, [sp, #36]	; 0x24
   1a030:	str	r8, [sp, #36]	; 0x24
   1a034:	ldr	r6, [sp, #40]	; 0x28
   1a038:	ldr	r8, [sp, #44]	; 0x2c
   1a03c:	b	1a0ec <__assert_fail@plt+0x8d1c>
   1a040:	cmp	r8, #0
   1a044:	bne	1a620 <__assert_fail@plt+0x9250>
   1a048:	ldr	r0, [sp, #52]	; 0x34
   1a04c:	eor	r3, fp, #1
   1a050:	ands	r3, r0, r3
   1a054:	beq	1a084 <__assert_fail@plt+0x8cb4>
   1a058:	cmp	sl, r4
   1a05c:	add	r0, r4, #1
   1a060:	strbhi	ip, [r9, r4]
   1a064:	cmp	sl, r0
   1a068:	movhi	fp, #36	; 0x24
   1a06c:	strbhi	fp, [r9, r0]
   1a070:	add	r0, r4, #2
   1a074:	mov	fp, r3
   1a078:	cmp	sl, r0
   1a07c:	add	r4, r4, #3
   1a080:	strbhi	ip, [r9, r0]
   1a084:	cmp	sl, r4
   1a088:	movhi	r3, #92	; 0x5c
   1a08c:	strbhi	r3, [r9, r4]
   1a090:	add	r3, r4, #1
   1a094:	cmp	sl, r3
   1a098:	bls	1a0a8 <__assert_fail@plt+0x8cd8>
   1a09c:	lsr	r0, r5, #6
   1a0a0:	add	r0, r0, #48	; 0x30
   1a0a4:	strb	r0, [r9, r3]
   1a0a8:	add	r3, r4, #2
   1a0ac:	cmp	sl, r3
   1a0b0:	bls	1a0c0 <__assert_fail@plt+0x8cf0>
   1a0b4:	ubfx	r0, r5, #3, #3
   1a0b8:	add	r0, r0, #48	; 0x30
   1a0bc:	strb	r0, [r9, r3]
   1a0c0:	add	r7, r7, #1
   1a0c4:	and	r5, r5, #7
   1a0c8:	cmp	r1, r7
   1a0cc:	add	r5, r5, #48	; 0x30
   1a0d0:	add	r4, r4, #3
   1a0d4:	bls	1a634 <__assert_fail@plt+0x9264>
   1a0d8:	mov	r0, r2
   1a0dc:	cmp	sl, r4
   1a0e0:	strbhi	r5, [r9, r4]
   1a0e4:	add	r4, r4, #1
   1a0e8:	ldrb	r5, [lr, #1]!
   1a0ec:	cmp	r2, #0
   1a0f0:	bne	1a040 <__assert_fail@plt+0x8c70>
   1a0f4:	eor	r3, r0, #1
   1a0f8:	cmp	r6, #0
   1a0fc:	and	r3, r3, fp
   1a100:	uxtb	r3, r3
   1a104:	beq	1a118 <__assert_fail@plt+0x8d48>
   1a108:	cmp	sl, r4
   1a10c:	movhi	r6, #92	; 0x5c
   1a110:	strbhi	r6, [r9, r4]
   1a114:	add	r4, r4, #1
   1a118:	add	r7, r7, #1
   1a11c:	cmp	r7, r1
   1a120:	bcs	1a614 <__assert_fail@plt+0x9244>
   1a124:	cmp	r3, #0
   1a128:	beq	1a658 <__assert_fail@plt+0x9288>
   1a12c:	cmp	sl, r4
   1a130:	add	r3, r4, #1
   1a134:	mov	r6, #0
   1a138:	strbhi	ip, [r9, r4]
   1a13c:	cmp	sl, r3
   1a140:	add	r4, r4, #2
   1a144:	mov	fp, r6
   1a148:	strbhi	ip, [r9, r3]
   1a14c:	b	1a0dc <__assert_fail@plt+0x8d0c>
   1a150:	ldr	r3, [sp, #36]	; 0x24
   1a154:	ldrb	r5, [r3]
   1a158:	cmp	r5, #126	; 0x7e
   1a15c:	ldrls	pc, [pc, r5, lsl #2]
   1a160:	b	19fc0 <__assert_fail@plt+0x8bf0>
   1a164:	andeq	sl, r1, r4, lsl #7
   1a168:	andeq	r9, r1, r0, asr #31
   1a16c:	andeq	r9, r1, r0, asr #31
   1a170:	andeq	r9, r1, r0, asr #31
   1a174:	andeq	r9, r1, r0, asr #31
   1a178:	andeq	r9, r1, r0, asr #31
   1a17c:	andeq	r9, r1, r0, asr #31
   1a180:	andeq	r9, r1, r8, ror r8
   1a184:	andeq	r9, r1, r0, ror r8
   1a188:	strdeq	r9, [r1], -r0
   1a18c:	andeq	sl, r1, r8, ror r3
   1a190:	ldrdeq	r9, [r1], -r0
   1a194:	andeq	r9, r1, ip, lsl r7
   1a198:	andeq	sl, r1, ip, ror #6
   1a19c:	andeq	r9, r1, r0, asr #31
   1a1a0:	andeq	r9, r1, r0, asr #31
   1a1a4:	andeq	r9, r1, r0, asr #31
   1a1a8:	andeq	r9, r1, r0, asr #31
   1a1ac:	andeq	r9, r1, r0, asr #31
   1a1b0:	andeq	r9, r1, r0, asr #31
   1a1b4:	andeq	r9, r1, r0, asr #31
   1a1b8:	andeq	r9, r1, r0, asr #31
   1a1bc:	andeq	r9, r1, r0, asr #31
   1a1c0:	andeq	r9, r1, r0, asr #31
   1a1c4:	andeq	r9, r1, r0, asr #31
   1a1c8:	andeq	r9, r1, r0, asr #31
   1a1cc:	andeq	r9, r1, r0, asr #31
   1a1d0:	andeq	r9, r1, r0, asr #31
   1a1d4:	andeq	r9, r1, r0, asr #31
   1a1d8:	andeq	r9, r1, r0, asr #31
   1a1dc:	andeq	r9, r1, r0, asr #31
   1a1e0:	andeq	r9, r1, r0, asr #31
   1a1e4:	andeq	r9, r1, r0, ror #29
   1a1e8:	andeq	sl, r1, r0, ror #6
   1a1ec:	andeq	sl, r1, r0, ror #6
   1a1f0:	andeq	r9, r1, r4, asr #29
   1a1f4:	andeq	sl, r1, r0, ror #6
   1a1f8:			; <UNDEFINED> instruction: 0x00019eb4
   1a1fc:	andeq	sl, r1, r0, ror #6
   1a200:	andeq	r9, r1, r8, lsr #30
   1a204:	andeq	sl, r1, r0, ror #6
   1a208:	andeq	sl, r1, r0, ror #6
   1a20c:	andeq	sl, r1, r0, ror #6
   1a210:			; <UNDEFINED> instruction: 0x00019eb4
   1a214:			; <UNDEFINED> instruction: 0x00019eb4
   1a218:			; <UNDEFINED> instruction: 0x00019eb4
   1a21c:			; <UNDEFINED> instruction: 0x00019eb4
   1a220:			; <UNDEFINED> instruction: 0x00019eb4
   1a224:			; <UNDEFINED> instruction: 0x00019eb4
   1a228:			; <UNDEFINED> instruction: 0x00019eb4
   1a22c:			; <UNDEFINED> instruction: 0x00019eb4
   1a230:			; <UNDEFINED> instruction: 0x00019eb4
   1a234:			; <UNDEFINED> instruction: 0x00019eb4
   1a238:			; <UNDEFINED> instruction: 0x00019eb4
   1a23c:			; <UNDEFINED> instruction: 0x00019eb4
   1a240:			; <UNDEFINED> instruction: 0x00019eb4
   1a244:			; <UNDEFINED> instruction: 0x00019eb4
   1a248:			; <UNDEFINED> instruction: 0x00019eb4
   1a24c:			; <UNDEFINED> instruction: 0x00019eb4
   1a250:	andeq	sl, r1, r0, ror #6
   1a254:	andeq	sl, r1, r0, ror #6
   1a258:	andeq	sl, r1, r0, ror #6
   1a25c:	andeq	sl, r1, r0, ror #6
   1a260:	andeq	r9, r1, r0, lsl #30
   1a264:	andeq	r9, r1, r0, asr #31
   1a268:			; <UNDEFINED> instruction: 0x00019eb4
   1a26c:			; <UNDEFINED> instruction: 0x00019eb4
   1a270:			; <UNDEFINED> instruction: 0x00019eb4
   1a274:			; <UNDEFINED> instruction: 0x00019eb4
   1a278:			; <UNDEFINED> instruction: 0x00019eb4
   1a27c:			; <UNDEFINED> instruction: 0x00019eb4
   1a280:			; <UNDEFINED> instruction: 0x00019eb4
   1a284:			; <UNDEFINED> instruction: 0x00019eb4
   1a288:			; <UNDEFINED> instruction: 0x00019eb4
   1a28c:			; <UNDEFINED> instruction: 0x00019eb4
   1a290:			; <UNDEFINED> instruction: 0x00019eb4
   1a294:			; <UNDEFINED> instruction: 0x00019eb4
   1a298:			; <UNDEFINED> instruction: 0x00019eb4
   1a29c:			; <UNDEFINED> instruction: 0x00019eb4
   1a2a0:			; <UNDEFINED> instruction: 0x00019eb4
   1a2a4:			; <UNDEFINED> instruction: 0x00019eb4
   1a2a8:			; <UNDEFINED> instruction: 0x00019eb4
   1a2ac:			; <UNDEFINED> instruction: 0x00019eb4
   1a2b0:			; <UNDEFINED> instruction: 0x00019eb4
   1a2b4:			; <UNDEFINED> instruction: 0x00019eb4
   1a2b8:			; <UNDEFINED> instruction: 0x00019eb4
   1a2bc:			; <UNDEFINED> instruction: 0x00019eb4
   1a2c0:			; <UNDEFINED> instruction: 0x00019eb4
   1a2c4:			; <UNDEFINED> instruction: 0x00019eb4
   1a2c8:			; <UNDEFINED> instruction: 0x00019eb4
   1a2cc:			; <UNDEFINED> instruction: 0x00019eb4
   1a2d0:	andeq	sl, r1, r0, ror #6
   1a2d4:	andeq	r9, r1, r0, lsl #29
   1a2d8:			; <UNDEFINED> instruction: 0x00019eb4
   1a2dc:	andeq	sl, r1, r0, ror #6
   1a2e0:			; <UNDEFINED> instruction: 0x00019eb4
   1a2e4:	andeq	sl, r1, r0, ror #6
   1a2e8:			; <UNDEFINED> instruction: 0x00019eb4
   1a2ec:			; <UNDEFINED> instruction: 0x00019eb4
   1a2f0:			; <UNDEFINED> instruction: 0x00019eb4
   1a2f4:			; <UNDEFINED> instruction: 0x00019eb4
   1a2f8:			; <UNDEFINED> instruction: 0x00019eb4
   1a2fc:			; <UNDEFINED> instruction: 0x00019eb4
   1a300:			; <UNDEFINED> instruction: 0x00019eb4
   1a304:			; <UNDEFINED> instruction: 0x00019eb4
   1a308:			; <UNDEFINED> instruction: 0x00019eb4
   1a30c:			; <UNDEFINED> instruction: 0x00019eb4
   1a310:			; <UNDEFINED> instruction: 0x00019eb4
   1a314:			; <UNDEFINED> instruction: 0x00019eb4
   1a318:			; <UNDEFINED> instruction: 0x00019eb4
   1a31c:			; <UNDEFINED> instruction: 0x00019eb4
   1a320:			; <UNDEFINED> instruction: 0x00019eb4
   1a324:			; <UNDEFINED> instruction: 0x00019eb4
   1a328:			; <UNDEFINED> instruction: 0x00019eb4
   1a32c:			; <UNDEFINED> instruction: 0x00019eb4
   1a330:			; <UNDEFINED> instruction: 0x00019eb4
   1a334:			; <UNDEFINED> instruction: 0x00019eb4
   1a338:			; <UNDEFINED> instruction: 0x00019eb4
   1a33c:			; <UNDEFINED> instruction: 0x00019eb4
   1a340:			; <UNDEFINED> instruction: 0x00019eb4
   1a344:			; <UNDEFINED> instruction: 0x00019eb4
   1a348:			; <UNDEFINED> instruction: 0x00019eb4
   1a34c:			; <UNDEFINED> instruction: 0x00019eb4
   1a350:	andeq	r9, r1, ip, asr lr
   1a354:	andeq	sl, r1, r0, ror #6
   1a358:	andeq	r9, r1, ip, asr lr
   1a35c:	andeq	r9, r1, r4, asr #29
   1a360:	mov	r3, #0
   1a364:	str	r3, [sp, #40]	; 0x28
   1a368:	b	19a40 <__assert_fail@plt+0x8670>
   1a36c:	mov	r3, #0
   1a370:	str	r3, [sp, #40]	; 0x28
   1a374:	b	199d8 <__assert_fail@plt+0x8608>
   1a378:	mov	r3, #0
   1a37c:	str	r3, [sp, #40]	; 0x28
   1a380:	b	19a0c <__assert_fail@plt+0x863c>
   1a384:	ldr	r3, [sp, #44]	; 0x2c
   1a388:	cmp	r3, #0
   1a38c:	beq	19924 <__assert_fail@plt+0x8554>
   1a390:	ldr	r3, [sp, #52]	; 0x34
   1a394:	mov	fp, r9
   1a398:	str	r3, [sp, #60]	; 0x3c
   1a39c:	b	19a9c <__assert_fail@plt+0x86cc>
   1a3a0:	ldr	r3, [sp, #44]	; 0x2c
   1a3a4:	cmp	r3, #0
   1a3a8:	bne	1a7dc <__assert_fail@plt+0x940c>
   1a3ac:	str	r3, [sp, #40]	; 0x28
   1a3b0:	cmp	sl, #0
   1a3b4:	ldr	r3, [sp, #84]	; 0x54
   1a3b8:	clz	r3, r3
   1a3bc:	lsr	r3, r3, #5
   1a3c0:	moveq	r3, #0
   1a3c4:	cmp	r3, #0
   1a3c8:	strne	sl, [sp, #84]	; 0x54
   1a3cc:	movne	sl, #0
   1a3d0:	bne	1a400 <__assert_fail@plt+0x9030>
   1a3d4:	cmp	sl, r4
   1a3d8:	movhi	r3, #39	; 0x27
   1a3dc:	strbhi	r3, [r9, r4]
   1a3e0:	add	r3, r4, #1
   1a3e4:	cmp	sl, r3
   1a3e8:	movhi	r2, #92	; 0x5c
   1a3ec:	strbhi	r2, [r9, r3]
   1a3f0:	add	r3, r4, #2
   1a3f4:	cmp	sl, r3
   1a3f8:	movhi	r2, #39	; 0x27
   1a3fc:	strbhi	r2, [r9, r3]
   1a400:	mov	r3, #0
   1a404:	add	r4, r4, #3
   1a408:	str	r6, [sp, #80]	; 0x50
   1a40c:	mov	fp, r3
   1a410:	mov	r5, #39	; 0x27
   1a414:	b	198e0 <__assert_fail@plt+0x8510>
   1a418:	ldr	r3, [sp, #44]	; 0x2c
   1a41c:	cmp	r3, #0
   1a420:	bne	1a7dc <__assert_fail@plt+0x940c>
   1a424:	mov	r6, #0
   1a428:	mov	r5, #63	; 0x3f
   1a42c:	str	r3, [sp, #40]	; 0x28
   1a430:	mov	r3, fp
   1a434:	b	198e0 <__assert_fail@plt+0x8510>
   1a438:	mov	r2, #0
   1a43c:	mov	r3, #0
   1a440:	cmn	r8, #1
   1a444:	strd	r2, [sp, #128]	; 0x80
   1a448:	bne	1a458 <__assert_fail@plt+0x9088>
   1a44c:	ldr	r0, [sp, #28]
   1a450:	bl	11274 <strlen@plt>
   1a454:	mov	r8, r0
   1a458:	str	r9, [sp, #100]	; 0x64
   1a45c:	mov	r3, #0
   1a460:	strd	sl, [sp, #104]	; 0x68
   1a464:	ldr	sl, [sp, #28]
   1a468:	str	r5, [sp, #112]	; 0x70
   1a46c:	mov	r5, r3
   1a470:	ldr	r9, [sp, #68]	; 0x44
   1a474:	str	r4, [sp, #116]	; 0x74
   1a478:	add	r4, r7, r5
   1a47c:	add	r3, sp, #128	; 0x80
   1a480:	add	fp, sl, r4
   1a484:	sub	r2, r8, r4
   1a488:	mov	r1, fp
   1a48c:	add	r0, sp, #124	; 0x7c
   1a490:	bl	1e0dc <__assert_fail@plt+0xcd0c>
   1a494:	subs	r1, r0, #0
   1a498:	beq	1a4d8 <__assert_fail@plt+0x9108>
   1a49c:	cmn	r1, #1
   1a4a0:	beq	1a830 <__assert_fail@plt+0x9460>
   1a4a4:	cmn	r1, #2
   1a4a8:	beq	1a850 <__assert_fail@plt+0x9480>
   1a4ac:	cmp	r9, #0
   1a4b0:	bne	1a508 <__assert_fail@plt+0x9138>
   1a4b4:	ldr	r0, [sp, #124]	; 0x7c
   1a4b8:	add	r5, r5, r1
   1a4bc:	bl	1116c <iswprint@plt>
   1a4c0:	cmp	r0, #0
   1a4c4:	add	r0, sp, #128	; 0x80
   1a4c8:	moveq	r6, #0
   1a4cc:	bl	11100 <mbsinit@plt>
   1a4d0:	cmp	r0, #0
   1a4d4:	beq	1a478 <__assert_fail@plt+0x90a8>
   1a4d8:	ldr	r3, [sp, #60]	; 0x3c
   1a4dc:	add	r9, sp, #100	; 0x64
   1a4e0:	mov	r0, r5
   1a4e4:	ldm	r9, {r9, sl, fp}
   1a4e8:	eor	r2, r6, #1
   1a4ec:	ldr	r5, [sp, #112]	; 0x70
   1a4f0:	and	r2, r2, r3
   1a4f4:	uxtb	r2, r2
   1a4f8:	ldr	r4, [sp, #116]	; 0x74
   1a4fc:	cmp	r0, #1
   1a500:	bhi	1a01c <__assert_fail@plt+0x8c4c>
   1a504:	b	1a00c <__assert_fail@plt+0x8c3c>
   1a508:	cmp	r1, #1
   1a50c:	beq	1a4b4 <__assert_fail@plt+0x90e4>
   1a510:	add	r2, r4, #1
   1a514:	add	r3, sl, r1
   1a518:	add	r2, sl, r2
   1a51c:	add	r4, r3, r4
   1a520:	ldrb	r3, [r2], #1
   1a524:	sub	r3, r3, #91	; 0x5b
   1a528:	cmp	r3, #33	; 0x21
   1a52c:	ldrls	pc, [pc, r3, lsl #2]
   1a530:	b	1a5bc <__assert_fail@plt+0x91ec>
   1a534:	andeq	sl, r1, r8, asr #11
   1a538:	andeq	sl, r1, r8, asr #11
   1a53c:			; <UNDEFINED> instruction: 0x0001a5bc
   1a540:	andeq	sl, r1, r8, asr #11
   1a544:			; <UNDEFINED> instruction: 0x0001a5bc
   1a548:	andeq	sl, r1, r8, asr #11
   1a54c:			; <UNDEFINED> instruction: 0x0001a5bc
   1a550:			; <UNDEFINED> instruction: 0x0001a5bc
   1a554:			; <UNDEFINED> instruction: 0x0001a5bc
   1a558:			; <UNDEFINED> instruction: 0x0001a5bc
   1a55c:			; <UNDEFINED> instruction: 0x0001a5bc
   1a560:			; <UNDEFINED> instruction: 0x0001a5bc
   1a564:			; <UNDEFINED> instruction: 0x0001a5bc
   1a568:			; <UNDEFINED> instruction: 0x0001a5bc
   1a56c:			; <UNDEFINED> instruction: 0x0001a5bc
   1a570:			; <UNDEFINED> instruction: 0x0001a5bc
   1a574:			; <UNDEFINED> instruction: 0x0001a5bc
   1a578:			; <UNDEFINED> instruction: 0x0001a5bc
   1a57c:			; <UNDEFINED> instruction: 0x0001a5bc
   1a580:			; <UNDEFINED> instruction: 0x0001a5bc
   1a584:			; <UNDEFINED> instruction: 0x0001a5bc
   1a588:			; <UNDEFINED> instruction: 0x0001a5bc
   1a58c:			; <UNDEFINED> instruction: 0x0001a5bc
   1a590:			; <UNDEFINED> instruction: 0x0001a5bc
   1a594:			; <UNDEFINED> instruction: 0x0001a5bc
   1a598:			; <UNDEFINED> instruction: 0x0001a5bc
   1a59c:			; <UNDEFINED> instruction: 0x0001a5bc
   1a5a0:			; <UNDEFINED> instruction: 0x0001a5bc
   1a5a4:			; <UNDEFINED> instruction: 0x0001a5bc
   1a5a8:			; <UNDEFINED> instruction: 0x0001a5bc
   1a5ac:			; <UNDEFINED> instruction: 0x0001a5bc
   1a5b0:			; <UNDEFINED> instruction: 0x0001a5bc
   1a5b4:			; <UNDEFINED> instruction: 0x0001a5bc
   1a5b8:	andeq	sl, r1, r8, asr #11
   1a5bc:	cmp	r4, r2
   1a5c0:	bne	1a520 <__assert_fail@plt+0x9150>
   1a5c4:	b	1a4b4 <__assert_fail@plt+0x90e4>
   1a5c8:	mov	r3, #2
   1a5cc:	ldr	fp, [sp, #100]	; 0x64
   1a5d0:	str	r3, [sp, #176]	; 0xb0
   1a5d4:	ldr	sl, [sp, #104]	; 0x68
   1a5d8:	b	19a9c <__assert_fail@plt+0x86cc>
   1a5dc:	ldr	r2, [sp, #52]	; 0x34
   1a5e0:	mov	fp, r9
   1a5e4:	ldr	r3, [sp, #60]	; 0x3c
   1a5e8:	and	r3, r3, r2
   1a5ec:	str	r3, [sp, #60]	; 0x3c
   1a5f0:	b	19a9c <__assert_fail@plt+0x86cc>
   1a5f4:	cmp	sl, r4
   1a5f8:	movhi	r2, fp
   1a5fc:	bhi	19974 <__assert_fail@plt+0x85a4>
   1a600:	mov	r2, r4
   1a604:	b	19984 <__assert_fail@plt+0x85b4>
   1a608:	mov	r6, r3
   1a60c:	mov	r5, #63	; 0x3f
   1a610:	b	19a44 <__assert_fail@plt+0x8674>
   1a614:	ldr	r8, [sp, #36]	; 0x24
   1a618:	ldr	r6, [sp, #100]	; 0x64
   1a61c:	b	198f0 <__assert_fail@plt+0x8520>
   1a620:	mov	fp, r9
   1a624:	ldr	r8, [sp, #36]	; 0x24
   1a628:	ldr	r3, [sp, #52]	; 0x34
   1a62c:	str	r3, [sp, #60]	; 0x3c
   1a630:	b	19a9c <__assert_fail@plt+0x86cc>
   1a634:	ldr	r8, [sp, #36]	; 0x24
   1a638:	ldr	r6, [sp, #100]	; 0x64
   1a63c:	b	19788 <__assert_fail@plt+0x83b8>
   1a640:	mov	r3, #0
   1a644:	add	r4, r4, #4
   1a648:	mov	fp, r2
   1a64c:	mov	r6, r3
   1a650:	mov	r5, #48	; 0x30
   1a654:	b	198e0 <__assert_fail@plt+0x8510>
   1a658:	mov	r6, r3
   1a65c:	b	1a0dc <__assert_fail@plt+0x8d0c>
   1a660:	mov	r3, #1
   1a664:	movw	r2, #11128	; 0x2b78
   1a668:	movt	r2, #2
   1a66c:	mov	r4, r3
   1a670:	mov	r9, sl
   1a674:	str	r3, [sp, #32]
   1a678:	str	sl, [sp, #44]	; 0x2c
   1a67c:	str	r3, [sp, #48]	; 0x30
   1a680:	str	sl, [sp, #52]	; 0x34
   1a684:	str	r3, [sp, #56]	; 0x38
   1a688:	str	r3, [sp, #60]	; 0x3c
   1a68c:	str	sl, [sp, #64]	; 0x40
   1a690:	str	sl, [sp, #68]	; 0x44
   1a694:	str	r2, [sp, #72]	; 0x48
   1a698:	str	sl, [sp, #80]	; 0x50
   1a69c:	str	sl, [sp, #84]	; 0x54
   1a6a0:	str	sl, [sp, #88]	; 0x58
   1a6a4:	b	19194 <__assert_fail@plt+0x7dc4>
   1a6a8:	mov	r3, #0
   1a6ac:	mov	r5, #48	; 0x30
   1a6b0:	mov	r6, r3
   1a6b4:	b	198e0 <__assert_fail@plt+0x8510>
   1a6b8:	cmp	sl, r4
   1a6bc:	mov	r5, #48	; 0x30
   1a6c0:	movhi	r3, #48	; 0x30
   1a6c4:	strbhi	r3, [r9, r4]
   1a6c8:	add	r3, r2, #2
   1a6cc:	add	r4, r2, #3
   1a6d0:	cmp	sl, r3
   1a6d4:	movhi	r1, #48	; 0x30
   1a6d8:	strbhi	r1, [r9, r3]
   1a6dc:	mov	r3, #0
   1a6e0:	b	199bc <__assert_fail@plt+0x85ec>
   1a6e4:	ldr	r3, [sp, #48]	; 0x30
   1a6e8:	str	r3, [sp, #40]	; 0x28
   1a6ec:	b	19fc8 <__assert_fail@plt+0x8bf8>
   1a6f0:	ldr	r2, [sp, #28]
   1a6f4:	ldrb	r2, [r2, r3]
   1a6f8:	sub	r1, r2, #33	; 0x21
   1a6fc:	cmp	r1, #29
   1a700:	ldrls	pc, [pc, r1, lsl #2]
   1a704:	b	19a40 <__assert_fail@plt+0x8670>
   1a708:	andeq	sl, r1, r0, lsl #15
   1a70c:	andeq	r9, r1, r0, asr #20
   1a710:	andeq	r9, r1, r0, asr #20
   1a714:	andeq	r9, r1, r0, asr #20
   1a718:	andeq	r9, r1, r0, asr #20
   1a71c:	andeq	r9, r1, r0, asr #20
   1a720:	andeq	sl, r1, r0, lsl #15
   1a724:	andeq	sl, r1, r0, lsl #15
   1a728:	andeq	sl, r1, r0, lsl #15
   1a72c:	andeq	r9, r1, r0, asr #20
   1a730:	andeq	r9, r1, r0, asr #20
   1a734:	andeq	r9, r1, r0, asr #20
   1a738:	andeq	sl, r1, r0, lsl #15
   1a73c:	andeq	r9, r1, r0, asr #20
   1a740:	andeq	sl, r1, r0, lsl #15
   1a744:	andeq	r9, r1, r0, asr #20
   1a748:	andeq	r9, r1, r0, asr #20
   1a74c:	andeq	r9, r1, r0, asr #20
   1a750:	andeq	r9, r1, r0, asr #20
   1a754:	andeq	r9, r1, r0, asr #20
   1a758:	andeq	r9, r1, r0, asr #20
   1a75c:	andeq	r9, r1, r0, asr #20
   1a760:	andeq	r9, r1, r0, asr #20
   1a764:	andeq	r9, r1, r0, asr #20
   1a768:	andeq	r9, r1, r0, asr #20
   1a76c:	andeq	r9, r1, r0, asr #20
   1a770:	andeq	r9, r1, r0, asr #20
   1a774:	andeq	sl, r1, r0, lsl #15
   1a778:	andeq	sl, r1, r0, lsl #15
   1a77c:	andeq	sl, r1, r0, lsl #15
   1a780:	ldr	r1, [sp, #44]	; 0x2c
   1a784:	cmp	r1, #0
   1a788:	bne	1a9e8 <__assert_fail@plt+0x9618>
   1a78c:	cmp	sl, r4
   1a790:	mov	r7, r3
   1a794:	movhi	r1, #63	; 0x3f
   1a798:	mov	r5, r2
   1a79c:	mov	r3, fp
   1a7a0:	strbhi	r1, [r9, r4]
   1a7a4:	add	r1, r4, #1
   1a7a8:	cmp	sl, r1
   1a7ac:	movhi	r0, #34	; 0x22
   1a7b0:	strbhi	r0, [r9, r1]
   1a7b4:	add	r1, r4, #2
   1a7b8:	cmp	sl, r1
   1a7bc:	movhi	r0, #34	; 0x22
   1a7c0:	strbhi	r0, [r9, r1]
   1a7c4:	add	r1, r4, #3
   1a7c8:	add	r4, r4, #4
   1a7cc:	cmp	sl, r1
   1a7d0:	movhi	r0, #63	; 0x3f
   1a7d4:	strbhi	r0, [r9, r1]
   1a7d8:	b	199bc <__assert_fail@plt+0x85ec>
   1a7dc:	mov	fp, r9
   1a7e0:	b	19a9c <__assert_fail@plt+0x86cc>
   1a7e4:	ldr	r3, [sp, #188]	; 0xbc
   1a7e8:	ldrb	r3, [r3]
   1a7ec:	cmp	r3, #0
   1a7f0:	beq	1912c <__assert_fail@plt+0x7d5c>
   1a7f4:	ldr	r2, [sp, #188]	; 0xbc
   1a7f8:	cmp	sl, r4
   1a7fc:	bls	1a81c <__assert_fail@plt+0x944c>
   1a800:	strb	r3, [fp, r4]
   1a804:	add	r4, r4, #1
   1a808:	ldrb	r3, [r2, #1]!
   1a80c:	cmp	r3, #0
   1a810:	beq	1912c <__assert_fail@plt+0x7d5c>
   1a814:	cmp	sl, r4
   1a818:	bhi	1a800 <__assert_fail@plt+0x9430>
   1a81c:	ldrb	r3, [r2, #1]!
   1a820:	add	r4, r4, #1
   1a824:	cmp	r3, #0
   1a828:	bne	1a7f8 <__assert_fail@plt+0x9428>
   1a82c:	b	1912c <__assert_fail@plt+0x7d5c>
   1a830:	add	r9, sp, #100	; 0x64
   1a834:	mov	r0, r5
   1a838:	ldr	r2, [sp, #60]	; 0x3c
   1a83c:	mov	r6, #0
   1a840:	ldm	r9, {r9, sl, fp}
   1a844:	ldr	r5, [sp, #112]	; 0x70
   1a848:	ldr	r4, [sp, #116]	; 0x74
   1a84c:	b	1a4fc <__assert_fail@plt+0x912c>
   1a850:	cmp	r4, r8
   1a854:	add	r9, sp, #100	; 0x64
   1a858:	mov	r1, r4
   1a85c:	mov	r2, fp
   1a860:	ldm	r9, {r9, sl, fp}
   1a864:	mov	r3, r5
   1a868:	mov	r0, r5
   1a86c:	ldr	r5, [sp, #112]	; 0x70
   1a870:	ldr	r4, [sp, #116]	; 0x74
   1a874:	bcs	1a8a8 <__assert_fail@plt+0x94d8>
   1a878:	ldrb	r6, [r2]
   1a87c:	cmp	r6, #0
   1a880:	bne	1a894 <__assert_fail@plt+0x94c4>
   1a884:	b	1a9e0 <__assert_fail@plt+0x9610>
   1a888:	ldrb	r6, [r2, #1]!
   1a88c:	cmp	r6, #0
   1a890:	beq	1a978 <__assert_fail@plt+0x95a8>
   1a894:	add	r3, r3, #1
   1a898:	add	r1, r7, r3
   1a89c:	cmp	r8, r1
   1a8a0:	bhi	1a888 <__assert_fail@plt+0x94b8>
   1a8a4:	mov	r0, r3
   1a8a8:	mov	r6, #0
   1a8ac:	ldr	r2, [sp, #60]	; 0x3c
   1a8b0:	b	1a4fc <__assert_fail@plt+0x912c>
   1a8b4:	mov	r3, #1
   1a8b8:	mov	r4, #0
   1a8bc:	mov	r9, r4
   1a8c0:	str	r3, [sp, #32]
   1a8c4:	str	r3, [sp, #44]	; 0x2c
   1a8c8:	str	r3, [sp, #48]	; 0x30
   1a8cc:	str	r4, [sp, #52]	; 0x34
   1a8d0:	str	r3, [sp, #56]	; 0x38
   1a8d4:	str	r3, [sp, #60]	; 0x3c
   1a8d8:	str	r3, [sp, #88]	; 0x58
   1a8dc:	movw	r3, #11128	; 0x2b78
   1a8e0:	movt	r3, #2
   1a8e4:	str	r4, [sp, #64]	; 0x40
   1a8e8:	str	r4, [sp, #68]	; 0x44
   1a8ec:	str	r3, [sp, #72]	; 0x48
   1a8f0:	str	r4, [sp, #80]	; 0x50
   1a8f4:	str	r4, [sp, #84]	; 0x54
   1a8f8:	b	19194 <__assert_fail@plt+0x7dc4>
   1a8fc:	mov	fp, r9
   1a900:	b	19ab0 <__assert_fail@plt+0x86e0>
   1a904:	ldr	r3, [sp, #48]	; 0x30
   1a908:	b	1a424 <__assert_fail@plt+0x9054>
   1a90c:	mov	r2, r3
   1a910:	ldr	r3, [sp, #72]	; 0x48
   1a914:	cmp	r3, #0
   1a918:	moveq	r2, #0
   1a91c:	andne	r2, r2, #1
   1a920:	cmp	r2, #0
   1a924:	beq	1a954 <__assert_fail@plt+0x9584>
   1a928:	mov	r2, r3
   1a92c:	ldrb	r3, [r3]
   1a930:	cmp	r3, #0
   1a934:	beq	1a954 <__assert_fail@plt+0x9584>
   1a938:	cmp	sl, r4
   1a93c:	bls	1a964 <__assert_fail@plt+0x9594>
   1a940:	strb	r3, [fp, r4]
   1a944:	add	r4, r4, #1
   1a948:	ldrb	r3, [r2, #1]!
   1a94c:	cmp	r3, #0
   1a950:	bne	1a938 <__assert_fail@plt+0x9568>
   1a954:	cmp	sl, r4
   1a958:	movhi	r3, #0
   1a95c:	strbhi	r3, [fp, r4]
   1a960:	b	19aec <__assert_fail@plt+0x871c>
   1a964:	ldrb	r3, [r2, #1]!
   1a968:	add	r4, r4, #1
   1a96c:	cmp	r3, #0
   1a970:	bne	1a938 <__assert_fail@plt+0x9568>
   1a974:	b	1a954 <__assert_fail@plt+0x9584>
   1a978:	mov	r0, r3
   1a97c:	ldr	r2, [sp, #60]	; 0x3c
   1a980:	b	1a4fc <__assert_fail@plt+0x912c>
   1a984:	mov	ip, #5
   1a988:	mov	r3, r8
   1a98c:	ldr	r1, [sp, #84]	; 0x54
   1a990:	str	ip, [sp]
   1a994:	ldr	r2, [sp, #180]	; 0xb4
   1a998:	ldr	ip, [sp, #188]	; 0xbc
   1a99c:	ldr	r0, [sp, #184]	; 0xb8
   1a9a0:	str	r2, [sp, #4]
   1a9a4:	ldr	r2, [sp, #28]
   1a9a8:	str	ip, [sp, #12]
   1a9ac:	ldr	ip, [sp, #192]	; 0xc0
   1a9b0:	str	r0, [sp, #8]
   1a9b4:	mov	r0, fp
   1a9b8:	str	ip, [sp, #16]
   1a9bc:	bl	19070 <__assert_fail@plt+0x7ca0>
   1a9c0:	mov	r4, r0
   1a9c4:	b	19aec <__assert_fail@plt+0x871c>
   1a9c8:	mov	r6, r3
   1a9cc:	str	r3, [sp, #40]	; 0x28
   1a9d0:	b	19a5c <__assert_fail@plt+0x868c>
   1a9d4:	mov	r3, #2
   1a9d8:	str	r3, [sp, #176]	; 0xb0
   1a9dc:	b	19a9c <__assert_fail@plt+0x86cc>
   1a9e0:	ldr	r2, [sp, #60]	; 0x3c
   1a9e4:	b	1a4fc <__assert_fail@plt+0x912c>
   1a9e8:	mov	r3, #5
   1a9ec:	mov	fp, r9
   1a9f0:	str	r3, [sp, #176]	; 0xb0
   1a9f4:	b	19ab0 <__assert_fail@plt+0x86e0>
   1a9f8:	mov	r1, #1
   1a9fc:	mov	r9, #0
   1aa00:	mov	r3, r9
   1aa04:	mov	r2, r9
   1aa08:	str	r1, [sp, #32]
   1aa0c:	str	sl, [sp, #84]	; 0x54
   1aa10:	b	19838 <__assert_fail@plt+0x8468>
   1aa14:	mov	r3, #0
   1aa18:	mov	r2, #1
   1aa1c:	mov	r9, r3
   1aa20:	mov	r4, r3
   1aa24:	str	r2, [sp, #32]
   1aa28:	strd	r2, [sp, #44]	; 0x2c
   1aa2c:	strd	r2, [sp, #56]	; 0x38
   1aa30:	str	r3, [sp, #80]	; 0x50
   1aa34:	str	r3, [sp, #84]	; 0x54
   1aa38:	str	r3, [sp, #88]	; 0x58
   1aa3c:	movw	r3, #11148	; 0x2b8c
   1aa40:	movt	r3, #2
   1aa44:	str	r2, [sp, #52]	; 0x34
   1aa48:	str	r2, [sp, #64]	; 0x40
   1aa4c:	str	r2, [sp, #68]	; 0x44
   1aa50:	str	r3, [sp, #72]	; 0x48
   1aa54:	b	19194 <__assert_fail@plt+0x7dc4>
   1aa58:	bl	113a0 <abort@plt>
   1aa5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1aa60:	mov	r4, r0
   1aa64:	mov	r5, r3
   1aa68:	strd	r6, [sp, #8]
   1aa6c:	movw	r7, #16716	; 0x414c
   1aa70:	movt	r7, #3
   1aa74:	strd	r8, [sp, #16]
   1aa78:	strd	sl, [sp, #24]
   1aa7c:	mov	sl, r1
   1aa80:	mov	fp, r2
   1aa84:	str	lr, [sp, #32]
   1aa88:	sub	sp, sp, #60	; 0x3c
   1aa8c:	bl	11298 <__errno_location@plt>
   1aa90:	mov	r8, r0
   1aa94:	cmn	r4, #-2147483647	; 0x80000001
   1aa98:	ldr	r6, [r7]
   1aa9c:	movne	r0, #0
   1aaa0:	moveq	r0, #1
   1aaa4:	ldr	r3, [r8]
   1aaa8:	orrs	r0, r0, r4, lsr #31
   1aaac:	str	r3, [sp, #28]
   1aab0:	bne	1ac40 <__assert_fail@plt+0x9870>
   1aab4:	ldr	r3, [r7, #4]
   1aab8:	cmp	r3, r4
   1aabc:	bgt	1ab1c <__assert_fail@plt+0x974c>
   1aac0:	add	r1, r7, #8
   1aac4:	sub	r2, r4, r3
   1aac8:	str	r3, [sp, #52]	; 0x34
   1aacc:	cmp	r6, r1
   1aad0:	add	r2, r2, #1
   1aad4:	beq	1ac18 <__assert_fail@plt+0x9848>
   1aad8:	mov	r1, #8
   1aadc:	mov	r0, r6
   1aae0:	mvn	r3, #-2147483648	; 0x80000000
   1aae4:	str	r1, [sp]
   1aae8:	add	r1, sp, #52	; 0x34
   1aaec:	bl	1d9ac <__assert_fail@plt+0xc5dc>
   1aaf0:	mov	r6, r0
   1aaf4:	str	r0, [r7]
   1aaf8:	ldr	r0, [r7, #4]
   1aafc:	mov	r1, #0
   1ab00:	ldr	r2, [sp, #52]	; 0x34
   1ab04:	sub	r2, r2, r0
   1ab08:	add	r0, r6, r0, lsl #3
   1ab0c:	lsl	r2, r2, #3
   1ab10:	bl	112c8 <memset@plt>
   1ab14:	ldr	r3, [sp, #52]	; 0x34
   1ab18:	str	r3, [r7, #4]
   1ab1c:	ldr	r1, [r5, #4]
   1ab20:	add	r0, r6, r4, lsl #3
   1ab24:	add	ip, r5, #8
   1ab28:	mov	r3, fp
   1ab2c:	mov	r2, sl
   1ab30:	ldr	r7, [r0, #4]
   1ab34:	str	r0, [sp, #36]	; 0x24
   1ab38:	str	ip, [sp, #40]	; 0x28
   1ab3c:	orr	r0, r1, #1
   1ab40:	ldr	r9, [r6, r4, lsl #3]
   1ab44:	str	ip, [sp, #8]
   1ab48:	ldr	lr, [r5, #44]	; 0x2c
   1ab4c:	str	r0, [sp, #4]
   1ab50:	ldr	ip, [r5]
   1ab54:	mov	r1, r9
   1ab58:	str	ip, [sp, #32]
   1ab5c:	ldr	ip, [r5, #40]	; 0x28
   1ab60:	str	ip, [sp, #12]
   1ab64:	ldr	ip, [sp, #32]
   1ab68:	str	lr, [sp, #16]
   1ab6c:	str	r0, [sp, #44]	; 0x2c
   1ab70:	mov	r0, r7
   1ab74:	str	ip, [sp]
   1ab78:	bl	19070 <__assert_fail@plt+0x7ca0>
   1ab7c:	cmp	r9, r0
   1ab80:	bhi	1abf0 <__assert_fail@plt+0x9820>
   1ab84:	add	r9, r0, #1
   1ab88:	movw	r3, #16860	; 0x41dc
   1ab8c:	movt	r3, #3
   1ab90:	cmp	r7, r3
   1ab94:	str	r9, [r6, r4, lsl #3]
   1ab98:	beq	1aba4 <__assert_fail@plt+0x97d4>
   1ab9c:	mov	r0, r7
   1aba0:	bl	1df60 <__assert_fail@plt+0xcb90>
   1aba4:	mov	r0, r9
   1aba8:	bl	1d708 <__assert_fail@plt+0xc338>
   1abac:	ldr	ip, [r5]
   1abb0:	mov	r3, fp
   1abb4:	mov	r2, sl
   1abb8:	mov	r1, r9
   1abbc:	mov	r7, r0
   1abc0:	ldr	lr, [sp, #36]	; 0x24
   1abc4:	ldr	r4, [r5, #40]	; 0x28
   1abc8:	str	r0, [lr, #4]
   1abcc:	ldr	lr, [r5, #44]	; 0x2c
   1abd0:	str	ip, [sp]
   1abd4:	ldr	ip, [sp, #44]	; 0x2c
   1abd8:	str	ip, [sp, #4]
   1abdc:	ldr	ip, [sp, #40]	; 0x28
   1abe0:	str	r4, [sp, #12]
   1abe4:	str	lr, [sp, #16]
   1abe8:	str	ip, [sp, #8]
   1abec:	bl	19070 <__assert_fail@plt+0x7ca0>
   1abf0:	ldr	r3, [sp, #28]
   1abf4:	mov	r0, r7
   1abf8:	str	r3, [r8]
   1abfc:	add	sp, sp, #60	; 0x3c
   1ac00:	ldrd	r4, [sp]
   1ac04:	ldrd	r6, [sp, #8]
   1ac08:	ldrd	r8, [sp, #16]
   1ac0c:	ldrd	sl, [sp, #24]
   1ac10:	add	sp, sp, #32
   1ac14:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac18:	mov	r1, #8
   1ac1c:	mvn	r3, #-2147483648	; 0x80000000
   1ac20:	str	r1, [sp]
   1ac24:	add	r1, sp, #52	; 0x34
   1ac28:	bl	1d9ac <__assert_fail@plt+0xc5dc>
   1ac2c:	ldrd	r2, [r7, #8]
   1ac30:	mov	r6, r0
   1ac34:	str	r0, [r7]
   1ac38:	strd	r2, [r0]
   1ac3c:	b	1aaf8 <__assert_fail@plt+0x9728>
   1ac40:	bl	113a0 <abort@plt>
   1ac44:	strd	r4, [sp, #-16]!
   1ac48:	mov	r5, r0
   1ac4c:	str	r6, [sp, #8]
   1ac50:	str	lr, [sp, #12]
   1ac54:	bl	11298 <__errno_location@plt>
   1ac58:	mov	r4, r0
   1ac5c:	cmp	r5, #0
   1ac60:	ldr	r0, [pc, #32]	; 1ac88 <__assert_fail@plt+0x98b8>
   1ac64:	mov	r1, #48	; 0x30
   1ac68:	movne	r0, r5
   1ac6c:	ldr	r6, [r4]
   1ac70:	bl	1db4c <__assert_fail@plt+0xc77c>
   1ac74:	str	r6, [r4]
   1ac78:	ldrd	r4, [sp]
   1ac7c:	ldr	r6, [sp, #8]
   1ac80:	add	sp, sp, #12
   1ac84:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac88:	ldrdeq	r4, [r3], -ip
   1ac8c:	ldr	r3, [pc, #12]	; 1aca0 <__assert_fail@plt+0x98d0>
   1ac90:	cmp	r0, #0
   1ac94:	moveq	r0, r3
   1ac98:	ldr	r0, [r0]
   1ac9c:	bx	lr
   1aca0:	ldrdeq	r4, [r3], -ip
   1aca4:	ldr	r3, [pc, #12]	; 1acb8 <__assert_fail@plt+0x98e8>
   1aca8:	cmp	r0, #0
   1acac:	moveq	r0, r3
   1acb0:	str	r1, [r0]
   1acb4:	bx	lr
   1acb8:	ldrdeq	r4, [r3], -ip
   1acbc:	ldr	r3, [pc, #52]	; 1acf8 <__assert_fail@plt+0x9928>
   1acc0:	cmp	r0, #0
   1acc4:	push	{lr}		; (str lr, [sp, #-4]!)
   1acc8:	lsr	lr, r1, #5
   1accc:	and	r1, r1, #31
   1acd0:	moveq	r0, r3
   1acd4:	add	r3, r0, #8
   1acd8:	ldr	ip, [r3, lr, lsl #2]
   1acdc:	lsr	r0, ip, r1
   1ace0:	eor	r2, r2, r0
   1ace4:	and	r0, r0, #1
   1ace8:	and	r2, r2, #1
   1acec:	eor	r1, ip, r2, lsl r1
   1acf0:	str	r1, [r3, lr, lsl #2]
   1acf4:	pop	{pc}		; (ldr pc, [sp], #4)
   1acf8:	ldrdeq	r4, [r3], -ip
   1acfc:	ldr	r3, [pc, #16]	; 1ad14 <__assert_fail@plt+0x9944>
   1ad00:	cmp	r0, #0
   1ad04:	movne	r3, r0
   1ad08:	ldr	r0, [r3, #4]
   1ad0c:	str	r1, [r3, #4]
   1ad10:	bx	lr
   1ad14:	ldrdeq	r4, [r3], -ip
   1ad18:	ldr	r3, [pc, #48]	; 1ad50 <__assert_fail@plt+0x9980>
   1ad1c:	cmp	r0, #0
   1ad20:	mov	ip, #10
   1ad24:	moveq	r0, r3
   1ad28:	cmp	r2, #0
   1ad2c:	cmpne	r1, #0
   1ad30:	str	ip, [r0]
   1ad34:	beq	1ad44 <__assert_fail@plt+0x9974>
   1ad38:	str	r1, [r0, #40]	; 0x28
   1ad3c:	str	r2, [r0, #44]	; 0x2c
   1ad40:	bx	lr
   1ad44:	str	r4, [sp, #-8]!
   1ad48:	str	lr, [sp, #4]
   1ad4c:	bl	113a0 <abort@plt>
   1ad50:	ldrdeq	r4, [r3], -ip
   1ad54:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1ad58:	strd	r6, [sp, #8]
   1ad5c:	mov	r7, r0
   1ad60:	mov	r6, r1
   1ad64:	strd	r8, [sp, #16]
   1ad68:	mov	r8, r2
   1ad6c:	mov	r9, r3
   1ad70:	str	lr, [sp, #24]
   1ad74:	sub	sp, sp, #28
   1ad78:	ldr	r4, [sp, #56]	; 0x38
   1ad7c:	ldr	ip, [pc, #104]	; 1adec <__assert_fail@plt+0x9a1c>
   1ad80:	cmp	r4, #0
   1ad84:	moveq	r4, ip
   1ad88:	bl	11298 <__errno_location@plt>
   1ad8c:	ldr	ip, [r4, #44]	; 0x2c
   1ad90:	mov	r5, r0
   1ad94:	mov	r1, r6
   1ad98:	add	lr, r4, #8
   1ad9c:	mov	r3, r9
   1ada0:	ldr	r6, [r5]
   1ada4:	mov	r2, r8
   1ada8:	mov	r0, r7
   1adac:	str	ip, [sp, #16]
   1adb0:	ldr	ip, [r4, #40]	; 0x28
   1adb4:	str	lr, [sp, #8]
   1adb8:	str	ip, [sp, #12]
   1adbc:	ldr	ip, [r4, #4]
   1adc0:	str	ip, [sp, #4]
   1adc4:	ldr	ip, [r4]
   1adc8:	str	ip, [sp]
   1adcc:	bl	19070 <__assert_fail@plt+0x7ca0>
   1add0:	str	r6, [r5]
   1add4:	add	sp, sp, #28
   1add8:	ldrd	r4, [sp]
   1addc:	ldrd	r6, [sp, #8]
   1ade0:	ldrd	r8, [sp, #16]
   1ade4:	add	sp, sp, #24
   1ade8:	pop	{pc}		; (ldr pc, [sp], #4)
   1adec:	ldrdeq	r4, [r3], -ip
   1adf0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1adf4:	cmp	r2, #0
   1adf8:	ldr	r4, [pc, #192]	; 1aec0 <__assert_fail@plt+0x9af0>
   1adfc:	movne	r4, r2
   1ae00:	strd	r6, [sp, #8]
   1ae04:	strd	r8, [sp, #16]
   1ae08:	mov	r9, r1
   1ae0c:	mov	r8, r0
   1ae10:	strd	sl, [sp, #24]
   1ae14:	str	lr, [sp, #32]
   1ae18:	sub	sp, sp, #36	; 0x24
   1ae1c:	bl	11298 <__errno_location@plt>
   1ae20:	ldr	r5, [r4, #4]
   1ae24:	mov	r6, r0
   1ae28:	add	r7, r4, #8
   1ae2c:	mov	r1, #0
   1ae30:	mov	r3, r9
   1ae34:	ldr	ip, [r4, #44]	; 0x2c
   1ae38:	mov	r2, r8
   1ae3c:	mov	r0, r1
   1ae40:	ldr	sl, [r6]
   1ae44:	orr	r5, r5, #1
   1ae48:	str	ip, [sp, #16]
   1ae4c:	ldr	ip, [r4, #40]	; 0x28
   1ae50:	stmib	sp, {r5, r7, ip}
   1ae54:	ldr	ip, [r4]
   1ae58:	str	ip, [sp]
   1ae5c:	bl	19070 <__assert_fail@plt+0x7ca0>
   1ae60:	add	r1, r0, #1
   1ae64:	mov	r0, r1
   1ae68:	str	r1, [sp, #28]
   1ae6c:	bl	1d708 <__assert_fail@plt+0xc338>
   1ae70:	ldr	ip, [r4, #44]	; 0x2c
   1ae74:	mov	fp, r0
   1ae78:	mov	r3, r9
   1ae7c:	mov	r2, r8
   1ae80:	ldr	r1, [sp, #28]
   1ae84:	str	ip, [sp, #16]
   1ae88:	ldr	ip, [r4, #40]	; 0x28
   1ae8c:	stmib	sp, {r5, r7, ip}
   1ae90:	ldr	ip, [r4]
   1ae94:	str	ip, [sp]
   1ae98:	bl	19070 <__assert_fail@plt+0x7ca0>
   1ae9c:	mov	r0, fp
   1aea0:	str	sl, [r6]
   1aea4:	add	sp, sp, #36	; 0x24
   1aea8:	ldrd	r4, [sp]
   1aeac:	ldrd	r6, [sp, #8]
   1aeb0:	ldrd	r8, [sp, #16]
   1aeb4:	ldrd	sl, [sp, #24]
   1aeb8:	add	sp, sp, #32
   1aebc:	pop	{pc}		; (ldr pc, [sp], #4)
   1aec0:	ldrdeq	r4, [r3], -ip
   1aec4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1aec8:	cmp	r3, #0
   1aecc:	ldr	r4, [pc, #220]	; 1afb0 <__assert_fail@plt+0x9be0>
   1aed0:	movne	r4, r3
   1aed4:	strd	r6, [sp, #8]
   1aed8:	mov	r6, r2
   1aedc:	strd	r8, [sp, #16]
   1aee0:	mov	r9, r0
   1aee4:	strd	sl, [sp, #24]
   1aee8:	mov	sl, r1
   1aeec:	str	lr, [sp, #32]
   1aef0:	sub	sp, sp, #44	; 0x2c
   1aef4:	bl	11298 <__errno_location@plt>
   1aef8:	ldr	r5, [r4, #4]
   1aefc:	mov	r7, r0
   1af00:	mov	r1, #0
   1af04:	add	r8, r4, #8
   1af08:	mov	r3, sl
   1af0c:	ldr	ip, [r4, #44]	; 0x2c
   1af10:	mov	r2, r9
   1af14:	mov	r0, r1
   1af18:	ldr	lr, [r7]
   1af1c:	cmp	r6, r1
   1af20:	orreq	r5, r5, #1
   1af24:	str	ip, [sp, #16]
   1af28:	ldr	ip, [r4, #40]	; 0x28
   1af2c:	stmib	sp, {r5, r8, ip}
   1af30:	ldr	ip, [r4]
   1af34:	str	lr, [sp, #28]
   1af38:	str	ip, [sp]
   1af3c:	bl	19070 <__assert_fail@plt+0x7ca0>
   1af40:	add	r1, r0, #1
   1af44:	mov	fp, r0
   1af48:	mov	r0, r1
   1af4c:	str	r1, [sp, #36]	; 0x24
   1af50:	bl	1d708 <__assert_fail@plt+0xc338>
   1af54:	ldr	ip, [r4, #44]	; 0x2c
   1af58:	mov	r3, sl
   1af5c:	mov	r2, r9
   1af60:	ldr	r1, [sp, #36]	; 0x24
   1af64:	str	ip, [sp, #16]
   1af68:	ldr	ip, [r4, #40]	; 0x28
   1af6c:	str	r0, [sp, #32]
   1af70:	stmib	sp, {r5, r8, ip}
   1af74:	ldr	ip, [r4]
   1af78:	str	ip, [sp]
   1af7c:	bl	19070 <__assert_fail@plt+0x7ca0>
   1af80:	ldr	lr, [sp, #28]
   1af84:	cmp	r6, #0
   1af88:	ldr	r0, [sp, #32]
   1af8c:	str	lr, [r7]
   1af90:	strne	fp, [r6]
   1af94:	add	sp, sp, #44	; 0x2c
   1af98:	ldrd	r4, [sp]
   1af9c:	ldrd	r6, [sp, #8]
   1afa0:	ldrd	r8, [sp, #16]
   1afa4:	ldrd	sl, [sp, #24]
   1afa8:	add	sp, sp, #32
   1afac:	pop	{pc}		; (ldr pc, [sp], #4)
   1afb0:	ldrdeq	r4, [r3], -ip
   1afb4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1afb8:	movw	r5, #16716	; 0x414c
   1afbc:	movt	r5, #3
   1afc0:	ldr	r3, [r5, #4]
   1afc4:	strd	r6, [sp, #8]
   1afc8:	str	r8, [sp, #16]
   1afcc:	str	lr, [sp, #20]
   1afd0:	ldr	r7, [r5]
   1afd4:	cmp	r3, #1
   1afd8:	ble	1affc <__assert_fail@plt+0x9c2c>
   1afdc:	mov	r4, #1
   1afe0:	add	r6, r7, #4
   1afe4:	ldr	r0, [r6, r4, lsl #3]
   1afe8:	add	r4, r4, #1
   1afec:	bl	1df60 <__assert_fail@plt+0xcb90>
   1aff0:	ldr	r3, [r5, #4]
   1aff4:	cmp	r3, r4
   1aff8:	bgt	1afe4 <__assert_fail@plt+0x9c14>
   1affc:	ldr	r0, [r7, #4]
   1b000:	movw	r4, #16860	; 0x41dc
   1b004:	movt	r4, #3
   1b008:	cmp	r0, r4
   1b00c:	beq	1b020 <__assert_fail@plt+0x9c50>
   1b010:	bl	1df60 <__assert_fail@plt+0xcb90>
   1b014:	mov	r3, #256	; 0x100
   1b018:	str	r3, [r5, #8]
   1b01c:	str	r4, [r5, #12]
   1b020:	ldr	r4, [pc, #44]	; 1b054 <__assert_fail@plt+0x9c84>
   1b024:	cmp	r7, r4
   1b028:	beq	1b038 <__assert_fail@plt+0x9c68>
   1b02c:	mov	r0, r7
   1b030:	bl	1df60 <__assert_fail@plt+0xcb90>
   1b034:	str	r4, [r5]
   1b038:	mov	r3, #1
   1b03c:	ldrd	r6, [sp, #8]
   1b040:	str	r3, [r5, #4]
   1b044:	ldrd	r4, [sp]
   1b048:	ldr	r8, [sp, #16]
   1b04c:	add	sp, sp, #20
   1b050:	pop	{pc}		; (ldr pc, [sp], #4)
   1b054:	andeq	r4, r3, r4, asr r1
   1b058:	ldr	r3, [pc, #4]	; 1b064 <__assert_fail@plt+0x9c94>
   1b05c:	mvn	r2, #0
   1b060:	b	1aa5c <__assert_fail@plt+0x968c>
   1b064:	ldrdeq	r4, [r3], -ip
   1b068:	ldr	r3, [pc]	; 1b070 <__assert_fail@plt+0x9ca0>
   1b06c:	b	1aa5c <__assert_fail@plt+0x968c>
   1b070:	ldrdeq	r4, [r3], -ip
   1b074:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b078:	movw	r4, #16716	; 0x414c
   1b07c:	movt	r4, #3
   1b080:	strd	r6, [sp, #8]
   1b084:	strd	r8, [sp, #16]
   1b088:	strd	sl, [sp, #24]
   1b08c:	mov	sl, r0
   1b090:	str	lr, [sp, #32]
   1b094:	sub	sp, sp, #44	; 0x2c
   1b098:	bl	11298 <__errno_location@plt>
   1b09c:	ldr	r3, [r0]
   1b0a0:	mov	r8, r0
   1b0a4:	ldr	r2, [r4, #4]
   1b0a8:	ldr	r5, [r4]
   1b0ac:	str	r3, [sp, #28]
   1b0b0:	cmp	r2, #0
   1b0b4:	bgt	1b110 <__assert_fail@plt+0x9d40>
   1b0b8:	add	r3, r4, #8
   1b0bc:	str	r2, [sp, #36]	; 0x24
   1b0c0:	rsb	r2, r2, #1
   1b0c4:	cmp	r5, r3
   1b0c8:	beq	1b1dc <__assert_fail@plt+0x9e0c>
   1b0cc:	mov	r1, #8
   1b0d0:	mov	r0, r5
   1b0d4:	mvn	r3, #-2147483648	; 0x80000000
   1b0d8:	str	r1, [sp]
   1b0dc:	add	r1, sp, #36	; 0x24
   1b0e0:	bl	1d9ac <__assert_fail@plt+0xc5dc>
   1b0e4:	mov	r5, r0
   1b0e8:	str	r0, [r4]
   1b0ec:	ldr	r0, [r4, #4]
   1b0f0:	mov	r1, #0
   1b0f4:	ldr	r2, [sp, #36]	; 0x24
   1b0f8:	sub	r2, r2, r0
   1b0fc:	add	r0, r5, r0, lsl #3
   1b100:	lsl	r2, r2, #3
   1b104:	bl	112c8 <memset@plt>
   1b108:	ldr	r3, [sp, #36]	; 0x24
   1b10c:	str	r3, [r4, #4]
   1b110:	movw	r4, #16860	; 0x41dc
   1b114:	movt	r4, #3
   1b118:	ldr	r9, [r5]
   1b11c:	add	fp, r4, #264	; 0x108
   1b120:	mvn	r3, #0
   1b124:	ldr	r7, [r4, #260]	; 0x104
   1b128:	mov	r2, sl
   1b12c:	ldr	r6, [r5, #4]
   1b130:	str	fp, [sp, #8]
   1b134:	mov	r1, r9
   1b138:	ldr	ip, [r4, #256]	; 0x100
   1b13c:	orr	r7, r7, #1
   1b140:	ldr	lr, [r4, #300]	; 0x12c
   1b144:	mov	r0, r6
   1b148:	str	ip, [sp]
   1b14c:	str	r7, [sp, #4]
   1b150:	str	lr, [sp, #16]
   1b154:	ldr	ip, [r4, #296]	; 0x128
   1b158:	str	ip, [sp, #12]
   1b15c:	bl	19070 <__assert_fail@plt+0x7ca0>
   1b160:	cmp	r9, r0
   1b164:	bhi	1b1b4 <__assert_fail@plt+0x9de4>
   1b168:	add	r9, r0, #1
   1b16c:	cmp	r6, r4
   1b170:	str	r9, [r5]
   1b174:	beq	1b180 <__assert_fail@plt+0x9db0>
   1b178:	mov	r0, r6
   1b17c:	bl	1df60 <__assert_fail@plt+0xcb90>
   1b180:	mov	r0, r9
   1b184:	bl	1d708 <__assert_fail@plt+0xc338>
   1b188:	ldr	r3, [r4, #256]	; 0x100
   1b18c:	mov	r2, sl
   1b190:	mov	r1, r9
   1b194:	mov	r6, r0
   1b198:	ldr	lr, [r4, #296]	; 0x128
   1b19c:	ldr	ip, [r4, #300]	; 0x12c
   1b1a0:	str	r0, [r5, #4]
   1b1a4:	stm	sp, {r3, r7, fp, lr}
   1b1a8:	mvn	r3, #0
   1b1ac:	str	ip, [sp, #16]
   1b1b0:	bl	19070 <__assert_fail@plt+0x7ca0>
   1b1b4:	ldr	r3, [sp, #28]
   1b1b8:	mov	r0, r6
   1b1bc:	str	r3, [r8]
   1b1c0:	add	sp, sp, #44	; 0x2c
   1b1c4:	ldrd	r4, [sp]
   1b1c8:	ldrd	r6, [sp, #8]
   1b1cc:	ldrd	r8, [sp, #16]
   1b1d0:	ldrd	sl, [sp, #24]
   1b1d4:	add	sp, sp, #32
   1b1d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1dc:	mov	r0, #8
   1b1e0:	mvn	r3, #-2147483648	; 0x80000000
   1b1e4:	add	r1, sp, #36	; 0x24
   1b1e8:	str	r0, [sp]
   1b1ec:	mov	r0, #0
   1b1f0:	bl	1d9ac <__assert_fail@plt+0xc5dc>
   1b1f4:	ldrd	r2, [r4, #8]
   1b1f8:	mov	r5, r0
   1b1fc:	str	r0, [r4]
   1b200:	strd	r2, [r0]
   1b204:	b	1b0ec <__assert_fail@plt+0x9d1c>
   1b208:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b20c:	movw	r4, #16716	; 0x414c
   1b210:	movt	r4, #3
   1b214:	strd	r6, [sp, #8]
   1b218:	strd	r8, [sp, #16]
   1b21c:	strd	sl, [sp, #24]
   1b220:	mov	sl, r0
   1b224:	mov	fp, r1
   1b228:	str	lr, [sp, #32]
   1b22c:	sub	sp, sp, #44	; 0x2c
   1b230:	bl	11298 <__errno_location@plt>
   1b234:	ldr	r3, [r0]
   1b238:	mov	r8, r0
   1b23c:	ldr	r2, [r4, #4]
   1b240:	ldr	r5, [r4]
   1b244:	str	r3, [sp, #28]
   1b248:	cmp	r2, #0
   1b24c:	bgt	1b2a8 <__assert_fail@plt+0x9ed8>
   1b250:	add	r3, r4, #8
   1b254:	str	r2, [sp, #36]	; 0x24
   1b258:	rsb	r2, r2, #1
   1b25c:	cmp	r5, r3
   1b260:	beq	1b384 <__assert_fail@plt+0x9fb4>
   1b264:	mov	r1, #8
   1b268:	mov	r0, r5
   1b26c:	mvn	r3, #-2147483648	; 0x80000000
   1b270:	str	r1, [sp]
   1b274:	add	r1, sp, #36	; 0x24
   1b278:	bl	1d9ac <__assert_fail@plt+0xc5dc>
   1b27c:	mov	r5, r0
   1b280:	str	r0, [r4]
   1b284:	ldr	r0, [r4, #4]
   1b288:	mov	r1, #0
   1b28c:	ldr	r2, [sp, #36]	; 0x24
   1b290:	sub	r2, r2, r0
   1b294:	add	r0, r5, r0, lsl #3
   1b298:	lsl	r2, r2, #3
   1b29c:	bl	112c8 <memset@plt>
   1b2a0:	ldr	r3, [sp, #36]	; 0x24
   1b2a4:	str	r3, [r4, #4]
   1b2a8:	movw	r4, #16860	; 0x41dc
   1b2ac:	movt	r4, #3
   1b2b0:	ldr	r9, [r5]
   1b2b4:	add	r0, r4, #264	; 0x108
   1b2b8:	mov	r3, fp
   1b2bc:	ldr	r7, [r4, #260]	; 0x104
   1b2c0:	mov	r2, sl
   1b2c4:	ldr	r6, [r5, #4]
   1b2c8:	str	r0, [sp, #8]
   1b2cc:	mov	r1, r9
   1b2d0:	ldr	ip, [r4, #256]	; 0x100
   1b2d4:	orr	r7, r7, #1
   1b2d8:	ldr	lr, [r4, #300]	; 0x12c
   1b2dc:	mov	r0, r6
   1b2e0:	str	ip, [sp]
   1b2e4:	str	r7, [sp, #4]
   1b2e8:	str	lr, [sp, #16]
   1b2ec:	ldr	ip, [r4, #296]	; 0x128
   1b2f0:	str	ip, [sp, #12]
   1b2f4:	bl	19070 <__assert_fail@plt+0x7ca0>
   1b2f8:	cmp	r9, r0
   1b2fc:	bhi	1b35c <__assert_fail@plt+0x9f8c>
   1b300:	add	r9, r0, #1
   1b304:	cmp	r6, r4
   1b308:	str	r9, [r5]
   1b30c:	beq	1b318 <__assert_fail@plt+0x9f48>
   1b310:	mov	r0, r6
   1b314:	bl	1df60 <__assert_fail@plt+0xcb90>
   1b318:	mov	r0, r9
   1b31c:	bl	1d708 <__assert_fail@plt+0xc338>
   1b320:	ldr	ip, [r4, #256]	; 0x100
   1b324:	mov	r1, r9
   1b328:	mov	r3, fp
   1b32c:	mov	r2, sl
   1b330:	mov	r6, r0
   1b334:	ldr	r9, [r4, #296]	; 0x128
   1b338:	ldr	lr, [r4, #300]	; 0x12c
   1b33c:	str	r0, [r5, #4]
   1b340:	str	ip, [sp]
   1b344:	ldr	ip, [pc, #100]	; 1b3b0 <__assert_fail@plt+0x9fe0>
   1b348:	str	r7, [sp, #4]
   1b34c:	str	ip, [sp, #8]
   1b350:	str	r9, [sp, #12]
   1b354:	str	lr, [sp, #16]
   1b358:	bl	19070 <__assert_fail@plt+0x7ca0>
   1b35c:	ldr	r3, [sp, #28]
   1b360:	mov	r0, r6
   1b364:	str	r3, [r8]
   1b368:	add	sp, sp, #44	; 0x2c
   1b36c:	ldrd	r4, [sp]
   1b370:	ldrd	r6, [sp, #8]
   1b374:	ldrd	r8, [sp, #16]
   1b378:	ldrd	sl, [sp, #24]
   1b37c:	add	sp, sp, #32
   1b380:	pop	{pc}		; (ldr pc, [sp], #4)
   1b384:	mov	r0, #8
   1b388:	mvn	r3, #-2147483648	; 0x80000000
   1b38c:	add	r1, sp, #36	; 0x24
   1b390:	str	r0, [sp]
   1b394:	mov	r0, #0
   1b398:	bl	1d9ac <__assert_fail@plt+0xc5dc>
   1b39c:	ldrd	r2, [r4, #8]
   1b3a0:	mov	r5, r0
   1b3a4:	str	r0, [r4]
   1b3a8:	strd	r2, [r0]
   1b3ac:	b	1b284 <__assert_fail@plt+0x9eb4>
   1b3b0:	andeq	r4, r3, r4, ror #5
   1b3b4:	strd	r4, [sp, #-20]!	; 0xffffffec
   1b3b8:	mov	r4, #0
   1b3bc:	mov	r5, #0
   1b3c0:	strd	r6, [sp, #8]
   1b3c4:	cmp	r1, #10
   1b3c8:	str	lr, [sp, #16]
   1b3cc:	sub	sp, sp, #100	; 0x64
   1b3d0:	strd	r4, [sp, #48]	; 0x30
   1b3d4:	beq	1b41c <__assert_fail@plt+0xa04c>
   1b3d8:	mov	r3, sp
   1b3dc:	strd	r4, [sp, #8]
   1b3e0:	str	r1, [sp, #48]	; 0x30
   1b3e4:	mov	r1, r2
   1b3e8:	mvn	r2, #0
   1b3ec:	ldrd	r6, [sp, #48]	; 0x30
   1b3f0:	strd	r6, [sp]
   1b3f4:	strd	r4, [sp, #16]
   1b3f8:	strd	r4, [sp, #24]
   1b3fc:	strd	r4, [sp, #32]
   1b400:	strd	r4, [sp, #40]	; 0x28
   1b404:	bl	1aa5c <__assert_fail@plt+0x968c>
   1b408:	add	sp, sp, #100	; 0x64
   1b40c:	ldrd	r4, [sp]
   1b410:	ldrd	r6, [sp, #8]
   1b414:	add	sp, sp, #16
   1b418:	pop	{pc}		; (ldr pc, [sp], #4)
   1b41c:	bl	113a0 <abort@plt>
   1b420:	strd	r4, [sp, #-20]!	; 0xffffffec
   1b424:	mov	r4, #0
   1b428:	mov	r5, #0
   1b42c:	strd	r6, [sp, #8]
   1b430:	cmp	r1, #10
   1b434:	str	lr, [sp, #16]
   1b438:	sub	sp, sp, #100	; 0x64
   1b43c:	strd	r4, [sp, #48]	; 0x30
   1b440:	beq	1b48c <__assert_fail@plt+0xa0bc>
   1b444:	mov	ip, r2
   1b448:	mov	r2, r3
   1b44c:	strd	r4, [sp, #8]
   1b450:	str	r1, [sp, #48]	; 0x30
   1b454:	mov	r3, sp
   1b458:	mov	r1, ip
   1b45c:	ldrd	r6, [sp, #48]	; 0x30
   1b460:	strd	r6, [sp]
   1b464:	strd	r4, [sp, #16]
   1b468:	strd	r4, [sp, #24]
   1b46c:	strd	r4, [sp, #32]
   1b470:	strd	r4, [sp, #40]	; 0x28
   1b474:	bl	1aa5c <__assert_fail@plt+0x968c>
   1b478:	add	sp, sp, #100	; 0x64
   1b47c:	ldrd	r4, [sp]
   1b480:	ldrd	r6, [sp, #8]
   1b484:	add	sp, sp, #16
   1b488:	pop	{pc}		; (ldr pc, [sp], #4)
   1b48c:	bl	113a0 <abort@plt>
   1b490:	mov	r2, #0
   1b494:	mov	r3, #0
   1b498:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b49c:	strd	r6, [sp, #8]
   1b4a0:	cmp	r0, #10
   1b4a4:	strd	r8, [sp, #16]
   1b4a8:	strd	sl, [sp, #24]
   1b4ac:	str	lr, [sp, #32]
   1b4b0:	sub	sp, sp, #124	; 0x7c
   1b4b4:	strd	r2, [sp, #72]	; 0x48
   1b4b8:	strd	r2, [sp, #80]	; 0x50
   1b4bc:	strd	r2, [sp, #88]	; 0x58
   1b4c0:	strd	r2, [sp, #96]	; 0x60
   1b4c4:	strd	r2, [sp, #104]	; 0x68
   1b4c8:	strd	r2, [sp, #112]	; 0x70
   1b4cc:	beq	1b670 <__assert_fail@plt+0xa2a0>
   1b4d0:	mov	r6, r1
   1b4d4:	movw	r4, #16716	; 0x414c
   1b4d8:	movt	r4, #3
   1b4dc:	str	r0, [sp, #72]	; 0x48
   1b4e0:	ldrd	r0, [sp, #72]	; 0x48
   1b4e4:	strd	r0, [sp, #24]
   1b4e8:	strd	r2, [sp, #32]
   1b4ec:	strd	r2, [sp, #40]	; 0x28
   1b4f0:	strd	r2, [sp, #48]	; 0x30
   1b4f4:	strd	r2, [sp, #56]	; 0x38
   1b4f8:	strd	r2, [sp, #64]	; 0x40
   1b4fc:	bl	11298 <__errno_location@plt>
   1b500:	mov	r8, r0
   1b504:	ldr	r5, [r4]
   1b508:	ldr	r2, [r4, #4]
   1b50c:	ldr	r9, [r0]
   1b510:	cmp	r2, #0
   1b514:	bgt	1b570 <__assert_fail@plt+0xa1a0>
   1b518:	add	r3, r4, #8
   1b51c:	str	r2, [sp, #72]	; 0x48
   1b520:	rsb	r2, r2, #1
   1b524:	cmp	r5, r3
   1b528:	beq	1b644 <__assert_fail@plt+0xa274>
   1b52c:	mov	r3, #8
   1b530:	mov	r0, r5
   1b534:	add	r1, sp, #72	; 0x48
   1b538:	str	r3, [sp]
   1b53c:	mvn	r3, #-2147483648	; 0x80000000
   1b540:	bl	1d9ac <__assert_fail@plt+0xc5dc>
   1b544:	mov	r5, r0
   1b548:	str	r0, [r4]
   1b54c:	ldr	r0, [r4, #4]
   1b550:	mov	r1, #0
   1b554:	ldr	r2, [sp, #72]	; 0x48
   1b558:	sub	r2, r2, r0
   1b55c:	add	r0, r5, r0, lsl #3
   1b560:	lsl	r2, r2, #3
   1b564:	bl	112c8 <memset@plt>
   1b568:	ldr	r3, [sp, #72]	; 0x48
   1b56c:	str	r3, [r4, #4]
   1b570:	ldr	sl, [r5]
   1b574:	add	r0, sp, #32
   1b578:	mvn	r3, #0
   1b57c:	mov	r2, r6
   1b580:	ldr	r7, [sp, #28]
   1b584:	ldr	r4, [r5, #4]
   1b588:	mov	r1, sl
   1b58c:	str	r0, [sp, #8]
   1b590:	ldr	lr, [sp, #24]
   1b594:	orr	r7, r7, #1
   1b598:	ldr	ip, [sp, #64]	; 0x40
   1b59c:	mov	r0, r4
   1b5a0:	ldr	fp, [sp, #68]	; 0x44
   1b5a4:	str	lr, [sp]
   1b5a8:	str	r7, [sp, #4]
   1b5ac:	str	ip, [sp, #12]
   1b5b0:	str	fp, [sp, #16]
   1b5b4:	bl	19070 <__assert_fail@plt+0x7ca0>
   1b5b8:	cmp	sl, r0
   1b5bc:	bhi	1b620 <__assert_fail@plt+0xa250>
   1b5c0:	add	sl, r0, #1
   1b5c4:	movw	r3, #16860	; 0x41dc
   1b5c8:	movt	r3, #3
   1b5cc:	cmp	r4, r3
   1b5d0:	str	sl, [r5]
   1b5d4:	beq	1b5e0 <__assert_fail@plt+0xa210>
   1b5d8:	mov	r0, r4
   1b5dc:	bl	1df60 <__assert_fail@plt+0xcb90>
   1b5e0:	mov	r0, sl
   1b5e4:	bl	1d708 <__assert_fail@plt+0xc338>
   1b5e8:	ldr	r3, [sp, #24]
   1b5ec:	mov	r2, r6
   1b5f0:	mov	r1, sl
   1b5f4:	mov	r4, r0
   1b5f8:	ldr	lr, [sp, #64]	; 0x40
   1b5fc:	ldr	ip, [sp, #68]	; 0x44
   1b600:	str	r0, [r5, #4]
   1b604:	add	r5, sp, #32
   1b608:	stm	sp, {r3, r7}
   1b60c:	mvn	r3, #0
   1b610:	str	r5, [sp, #8]
   1b614:	str	lr, [sp, #12]
   1b618:	str	ip, [sp, #16]
   1b61c:	bl	19070 <__assert_fail@plt+0x7ca0>
   1b620:	mov	r0, r4
   1b624:	str	r9, [r8]
   1b628:	add	sp, sp, #124	; 0x7c
   1b62c:	ldrd	r4, [sp]
   1b630:	ldrd	r6, [sp, #8]
   1b634:	ldrd	r8, [sp, #16]
   1b638:	ldrd	sl, [sp, #24]
   1b63c:	add	sp, sp, #32
   1b640:	pop	{pc}		; (ldr pc, [sp], #4)
   1b644:	mov	r0, #8
   1b648:	mvn	r3, #-2147483648	; 0x80000000
   1b64c:	add	r1, sp, #72	; 0x48
   1b650:	str	r0, [sp]
   1b654:	mov	r0, #0
   1b658:	bl	1d9ac <__assert_fail@plt+0xc5dc>
   1b65c:	ldrd	r2, [r4, #8]
   1b660:	mov	r5, r0
   1b664:	str	r0, [r4]
   1b668:	strd	r2, [r0]
   1b66c:	b	1b54c <__assert_fail@plt+0xa17c>
   1b670:	bl	113a0 <abort@plt>
   1b674:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b678:	cmp	r0, #10
   1b67c:	strd	r6, [sp, #8]
   1b680:	mov	r6, #0
   1b684:	mov	r7, #0
   1b688:	strd	r8, [sp, #16]
   1b68c:	strd	sl, [sp, #24]
   1b690:	str	lr, [sp, #32]
   1b694:	sub	sp, sp, #124	; 0x7c
   1b698:	strd	r6, [sp, #72]	; 0x48
   1b69c:	strd	r6, [sp, #80]	; 0x50
   1b6a0:	strd	r6, [sp, #88]	; 0x58
   1b6a4:	strd	r6, [sp, #96]	; 0x60
   1b6a8:	strd	r6, [sp, #104]	; 0x68
   1b6ac:	strd	r6, [sp, #112]	; 0x70
   1b6b0:	beq	1b85c <__assert_fail@plt+0xa48c>
   1b6b4:	mov	sl, r2
   1b6b8:	movw	r5, #16716	; 0x414c
   1b6bc:	movt	r5, #3
   1b6c0:	str	r0, [sp, #72]	; 0x48
   1b6c4:	mov	r9, r1
   1b6c8:	ldrd	r2, [sp, #72]	; 0x48
   1b6cc:	strd	r2, [sp, #24]
   1b6d0:	strd	r6, [sp, #32]
   1b6d4:	strd	r6, [sp, #40]	; 0x28
   1b6d8:	strd	r6, [sp, #48]	; 0x30
   1b6dc:	strd	r6, [sp, #56]	; 0x38
   1b6e0:	strd	r6, [sp, #64]	; 0x40
   1b6e4:	bl	11298 <__errno_location@plt>
   1b6e8:	mov	r7, r0
   1b6ec:	ldr	r4, [r5]
   1b6f0:	ldr	r2, [r5, #4]
   1b6f4:	ldr	fp, [r0]
   1b6f8:	cmp	r2, #0
   1b6fc:	bgt	1b758 <__assert_fail@plt+0xa388>
   1b700:	add	r3, r5, #8
   1b704:	str	r2, [sp, #72]	; 0x48
   1b708:	rsb	r2, r2, #1
   1b70c:	cmp	r4, r3
   1b710:	beq	1b830 <__assert_fail@plt+0xa460>
   1b714:	mov	r3, #8
   1b718:	mov	r0, r4
   1b71c:	add	r1, sp, #72	; 0x48
   1b720:	str	r3, [sp]
   1b724:	mvn	r3, #-2147483648	; 0x80000000
   1b728:	bl	1d9ac <__assert_fail@plt+0xc5dc>
   1b72c:	mov	r4, r0
   1b730:	str	r0, [r5]
   1b734:	ldr	r0, [r5, #4]
   1b738:	mov	r1, #0
   1b73c:	ldr	r2, [sp, #72]	; 0x48
   1b740:	sub	r2, r2, r0
   1b744:	add	r0, r4, r0, lsl #3
   1b748:	lsl	r2, r2, #3
   1b74c:	bl	112c8 <memset@plt>
   1b750:	ldr	r3, [sp, #72]	; 0x48
   1b754:	str	r3, [r5, #4]
   1b758:	ldr	ip, [sp, #24]
   1b75c:	add	r0, sp, #32
   1b760:	mov	r3, sl
   1b764:	mov	r2, r9
   1b768:	ldr	r6, [sp, #28]
   1b76c:	ldr	r8, [r4]
   1b770:	ldr	r5, [r4, #4]
   1b774:	str	ip, [sp]
   1b778:	orr	r6, r6, #1
   1b77c:	ldr	ip, [sp, #64]	; 0x40
   1b780:	mov	r1, r8
   1b784:	str	r6, [sp, #4]
   1b788:	ldr	lr, [sp, #68]	; 0x44
   1b78c:	str	r0, [sp, #8]
   1b790:	mov	r0, r5
   1b794:	str	ip, [sp, #12]
   1b798:	str	lr, [sp, #16]
   1b79c:	bl	19070 <__assert_fail@plt+0x7ca0>
   1b7a0:	cmp	r8, r0
   1b7a4:	bhi	1b80c <__assert_fail@plt+0xa43c>
   1b7a8:	add	r8, r0, #1
   1b7ac:	movw	r3, #16860	; 0x41dc
   1b7b0:	movt	r3, #3
   1b7b4:	cmp	r5, r3
   1b7b8:	str	r8, [r4]
   1b7bc:	beq	1b7c8 <__assert_fail@plt+0xa3f8>
   1b7c0:	mov	r0, r5
   1b7c4:	bl	1df60 <__assert_fail@plt+0xcb90>
   1b7c8:	mov	r0, r8
   1b7cc:	bl	1d708 <__assert_fail@plt+0xc338>
   1b7d0:	ldr	lr, [sp, #24]
   1b7d4:	mov	r1, r8
   1b7d8:	mov	r3, sl
   1b7dc:	mov	r2, r9
   1b7e0:	mov	r5, r0
   1b7e4:	ldr	r8, [sp, #64]	; 0x40
   1b7e8:	ldr	ip, [sp, #68]	; 0x44
   1b7ec:	str	r0, [r4, #4]
   1b7f0:	str	lr, [sp]
   1b7f4:	add	lr, sp, #32
   1b7f8:	str	r6, [sp, #4]
   1b7fc:	str	lr, [sp, #8]
   1b800:	str	r8, [sp, #12]
   1b804:	str	ip, [sp, #16]
   1b808:	bl	19070 <__assert_fail@plt+0x7ca0>
   1b80c:	mov	r0, r5
   1b810:	str	fp, [r7]
   1b814:	add	sp, sp, #124	; 0x7c
   1b818:	ldrd	r4, [sp]
   1b81c:	ldrd	r6, [sp, #8]
   1b820:	ldrd	r8, [sp, #16]
   1b824:	ldrd	sl, [sp, #24]
   1b828:	add	sp, sp, #32
   1b82c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b830:	mov	r0, #8
   1b834:	mvn	r3, #-2147483648	; 0x80000000
   1b838:	add	r1, sp, #72	; 0x48
   1b83c:	str	r0, [sp]
   1b840:	mov	r0, #0
   1b844:	bl	1d9ac <__assert_fail@plt+0xc5dc>
   1b848:	ldrd	r2, [r5, #8]
   1b84c:	mov	r4, r0
   1b850:	str	r0, [r5]
   1b854:	strd	r2, [r0]
   1b858:	b	1b734 <__assert_fail@plt+0xa364>
   1b85c:	bl	113a0 <abort@plt>
   1b860:	ldr	r3, [pc, #492]	; 1ba54 <__assert_fail@plt+0xa684>
   1b864:	lsr	ip, r2, #5
   1b868:	and	r2, r2, #31
   1b86c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b870:	movw	r5, #16716	; 0x414c
   1b874:	movt	r5, #3
   1b878:	strd	r6, [sp, #8]
   1b87c:	strd	r8, [sp, #16]
   1b880:	strd	sl, [sp, #24]
   1b884:	mov	sl, r0
   1b888:	mov	fp, r1
   1b88c:	ldrd	r0, [r3]
   1b890:	str	lr, [sp, #32]
   1b894:	sub	sp, sp, #92	; 0x5c
   1b898:	ldrd	r8, [r3, #8]
   1b89c:	add	r6, sp, #48	; 0x30
   1b8a0:	strd	r0, [sp, #40]	; 0x28
   1b8a4:	ldrd	r0, [r3, #16]
   1b8a8:	strd	r8, [sp, #48]	; 0x30
   1b8ac:	ldrd	r8, [r3, #24]
   1b8b0:	strd	r0, [sp, #56]	; 0x38
   1b8b4:	ldrd	r0, [r3, #32]
   1b8b8:	strd	r8, [sp, #64]	; 0x40
   1b8bc:	ldrd	r8, [r3, #40]	; 0x28
   1b8c0:	strd	r0, [sp, #72]	; 0x48
   1b8c4:	strd	r8, [sp, #80]	; 0x50
   1b8c8:	ldr	r3, [r6, ip, lsl #2]
   1b8cc:	mvn	r1, r3, lsr r2
   1b8d0:	and	r1, r1, #1
   1b8d4:	eor	r2, r3, r1, lsl r2
   1b8d8:	str	r2, [r6, ip, lsl #2]
   1b8dc:	bl	11298 <__errno_location@plt>
   1b8e0:	ldr	r3, [r0]
   1b8e4:	mov	r8, r0
   1b8e8:	ldr	r2, [r5, #4]
   1b8ec:	ldr	r4, [r5]
   1b8f0:	str	r3, [sp, #28]
   1b8f4:	cmp	r2, #0
   1b8f8:	bgt	1b954 <__assert_fail@plt+0xa584>
   1b8fc:	add	r3, r5, #8
   1b900:	str	r2, [sp, #36]	; 0x24
   1b904:	rsb	r2, r2, #1
   1b908:	cmp	r4, r3
   1b90c:	beq	1ba28 <__assert_fail@plt+0xa658>
   1b910:	mov	r1, #8
   1b914:	mov	r0, r4
   1b918:	mvn	r3, #-2147483648	; 0x80000000
   1b91c:	str	r1, [sp]
   1b920:	add	r1, sp, #36	; 0x24
   1b924:	bl	1d9ac <__assert_fail@plt+0xc5dc>
   1b928:	mov	r4, r0
   1b92c:	str	r0, [r5]
   1b930:	ldr	r0, [r5, #4]
   1b934:	mov	r1, #0
   1b938:	ldr	r2, [sp, #36]	; 0x24
   1b93c:	sub	r2, r2, r0
   1b940:	add	r0, r4, r0, lsl #3
   1b944:	lsl	r2, r2, #3
   1b948:	bl	112c8 <memset@plt>
   1b94c:	ldr	r3, [sp, #36]	; 0x24
   1b950:	str	r3, [r5, #4]
   1b954:	ldr	ip, [sp, #40]	; 0x28
   1b958:	mov	r3, fp
   1b95c:	mov	r2, sl
   1b960:	ldr	r7, [sp, #44]	; 0x2c
   1b964:	ldr	r9, [r4]
   1b968:	ldr	r5, [r4, #4]
   1b96c:	str	ip, [sp]
   1b970:	orr	r7, r7, #1
   1b974:	ldr	ip, [sp, #80]	; 0x50
   1b978:	mov	r1, r9
   1b97c:	str	r7, [sp, #4]
   1b980:	ldr	lr, [sp, #84]	; 0x54
   1b984:	mov	r0, r5
   1b988:	str	r6, [sp, #8]
   1b98c:	str	ip, [sp, #12]
   1b990:	str	lr, [sp, #16]
   1b994:	bl	19070 <__assert_fail@plt+0x7ca0>
   1b998:	cmp	r9, r0
   1b99c:	bhi	1ba00 <__assert_fail@plt+0xa630>
   1b9a0:	add	r9, r0, #1
   1b9a4:	movw	r3, #16860	; 0x41dc
   1b9a8:	movt	r3, #3
   1b9ac:	cmp	r5, r3
   1b9b0:	str	r9, [r4]
   1b9b4:	beq	1b9c0 <__assert_fail@plt+0xa5f0>
   1b9b8:	mov	r0, r5
   1b9bc:	bl	1df60 <__assert_fail@plt+0xcb90>
   1b9c0:	mov	r0, r9
   1b9c4:	bl	1d708 <__assert_fail@plt+0xc338>
   1b9c8:	mov	r1, r9
   1b9cc:	ldr	ip, [sp, #40]	; 0x28
   1b9d0:	mov	r3, fp
   1b9d4:	mov	r2, sl
   1b9d8:	mov	r5, r0
   1b9dc:	ldr	r9, [sp, #80]	; 0x50
   1b9e0:	ldr	lr, [sp, #84]	; 0x54
   1b9e4:	str	r0, [r4, #4]
   1b9e8:	str	ip, [sp]
   1b9ec:	str	r7, [sp, #4]
   1b9f0:	str	r6, [sp, #8]
   1b9f4:	str	r9, [sp, #12]
   1b9f8:	str	lr, [sp, #16]
   1b9fc:	bl	19070 <__assert_fail@plt+0x7ca0>
   1ba00:	ldr	r3, [sp, #28]
   1ba04:	mov	r0, r5
   1ba08:	str	r3, [r8]
   1ba0c:	add	sp, sp, #92	; 0x5c
   1ba10:	ldrd	r4, [sp]
   1ba14:	ldrd	r6, [sp, #8]
   1ba18:	ldrd	r8, [sp, #16]
   1ba1c:	ldrd	sl, [sp, #24]
   1ba20:	add	sp, sp, #32
   1ba24:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba28:	mov	r0, #8
   1ba2c:	mvn	r3, #-2147483648	; 0x80000000
   1ba30:	add	r1, sp, #36	; 0x24
   1ba34:	str	r0, [sp]
   1ba38:	mov	r0, #0
   1ba3c:	bl	1d9ac <__assert_fail@plt+0xc5dc>
   1ba40:	ldrd	r2, [r5, #8]
   1ba44:	mov	r4, r0
   1ba48:	str	r0, [r5]
   1ba4c:	strd	r2, [r0]
   1ba50:	b	1b930 <__assert_fail@plt+0xa560>
   1ba54:	ldrdeq	r4, [r3], -ip
   1ba58:	ldr	ip, [pc, #476]	; 1bc3c <__assert_fail@plt+0xa86c>
   1ba5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ba60:	movw	r4, #16716	; 0x414c
   1ba64:	movt	r4, #3
   1ba68:	ldrd	r2, [ip, #8]
   1ba6c:	strd	r6, [sp, #8]
   1ba70:	lsr	r7, r1, #5
   1ba74:	mov	r6, r0
   1ba78:	strd	r8, [sp, #16]
   1ba7c:	str	lr, [sp, #32]
   1ba80:	and	lr, r1, #31
   1ba84:	ldrd	r0, [ip]
   1ba88:	strd	sl, [sp, #24]
   1ba8c:	sub	sp, sp, #84	; 0x54
   1ba90:	add	r5, sp, #40	; 0x28
   1ba94:	strd	r0, [sp, #32]
   1ba98:	strd	r2, [sp, #40]	; 0x28
   1ba9c:	ldrd	r0, [ip, #16]
   1baa0:	ldrd	r2, [ip, #24]
   1baa4:	strd	r0, [sp, #48]	; 0x30
   1baa8:	ldrd	r0, [ip, #32]
   1baac:	strd	r2, [sp, #56]	; 0x38
   1bab0:	ldrd	r2, [ip, #40]	; 0x28
   1bab4:	strd	r0, [sp, #64]	; 0x40
   1bab8:	strd	r2, [sp, #72]	; 0x48
   1babc:	ldr	r1, [r5, r7, lsl #2]
   1bac0:	mvn	r3, r1, lsr lr
   1bac4:	and	r3, r3, #1
   1bac8:	eor	r1, r1, r3, lsl lr
   1bacc:	str	r1, [r5, r7, lsl #2]
   1bad0:	bl	11298 <__errno_location@plt>
   1bad4:	mov	r9, r0
   1bad8:	ldr	sl, [r0]
   1badc:	ldr	r2, [r4, #4]
   1bae0:	ldr	r7, [r4]
   1bae4:	cmp	r2, #0
   1bae8:	bgt	1bb44 <__assert_fail@plt+0xa774>
   1baec:	add	r3, r4, #8
   1baf0:	str	r2, [sp, #28]
   1baf4:	rsb	r2, r2, #1
   1baf8:	cmp	r7, r3
   1bafc:	beq	1bc10 <__assert_fail@plt+0xa840>
   1bb00:	mov	r1, #8
   1bb04:	mov	r0, r7
   1bb08:	mvn	r3, #-2147483648	; 0x80000000
   1bb0c:	str	r1, [sp]
   1bb10:	add	r1, sp, #28
   1bb14:	bl	1d9ac <__assert_fail@plt+0xc5dc>
   1bb18:	mov	r7, r0
   1bb1c:	str	r0, [r4]
   1bb20:	ldr	r0, [r4, #4]
   1bb24:	mov	r1, #0
   1bb28:	ldr	r2, [sp, #28]
   1bb2c:	sub	r2, r2, r0
   1bb30:	add	r0, r7, r0, lsl #3
   1bb34:	lsl	r2, r2, #3
   1bb38:	bl	112c8 <memset@plt>
   1bb3c:	ldr	r3, [sp, #28]
   1bb40:	str	r3, [r4, #4]
   1bb44:	ldr	ip, [sp, #32]
   1bb48:	mvn	r3, #0
   1bb4c:	mov	r2, r6
   1bb50:	ldr	r8, [sp, #36]	; 0x24
   1bb54:	ldr	fp, [r7]
   1bb58:	ldr	r4, [r7, #4]
   1bb5c:	str	ip, [sp]
   1bb60:	orr	r8, r8, #1
   1bb64:	ldr	ip, [sp, #72]	; 0x48
   1bb68:	mov	r1, fp
   1bb6c:	str	r8, [sp, #4]
   1bb70:	ldr	lr, [sp, #76]	; 0x4c
   1bb74:	mov	r0, r4
   1bb78:	str	r5, [sp, #8]
   1bb7c:	str	ip, [sp, #12]
   1bb80:	str	lr, [sp, #16]
   1bb84:	bl	19070 <__assert_fail@plt+0x7ca0>
   1bb88:	cmp	fp, r0
   1bb8c:	bhi	1bbec <__assert_fail@plt+0xa81c>
   1bb90:	add	fp, r0, #1
   1bb94:	movw	r3, #16860	; 0x41dc
   1bb98:	movt	r3, #3
   1bb9c:	cmp	r4, r3
   1bba0:	str	fp, [r7]
   1bba4:	beq	1bbb0 <__assert_fail@plt+0xa7e0>
   1bba8:	mov	r0, r4
   1bbac:	bl	1df60 <__assert_fail@plt+0xcb90>
   1bbb0:	mov	r0, fp
   1bbb4:	bl	1d708 <__assert_fail@plt+0xc338>
   1bbb8:	ldr	r3, [sp, #32]
   1bbbc:	mov	r2, r6
   1bbc0:	mov	r1, fp
   1bbc4:	mov	r4, r0
   1bbc8:	ldr	lr, [sp, #72]	; 0x48
   1bbcc:	ldr	ip, [sp, #76]	; 0x4c
   1bbd0:	str	r0, [r7, #4]
   1bbd4:	stm	sp, {r3, r8}
   1bbd8:	mvn	r3, #0
   1bbdc:	str	r5, [sp, #8]
   1bbe0:	str	lr, [sp, #12]
   1bbe4:	str	ip, [sp, #16]
   1bbe8:	bl	19070 <__assert_fail@plt+0x7ca0>
   1bbec:	mov	r0, r4
   1bbf0:	str	sl, [r9]
   1bbf4:	add	sp, sp, #84	; 0x54
   1bbf8:	ldrd	r4, [sp]
   1bbfc:	ldrd	r6, [sp, #8]
   1bc00:	ldrd	r8, [sp, #16]
   1bc04:	ldrd	sl, [sp, #24]
   1bc08:	add	sp, sp, #32
   1bc0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc10:	mov	r0, #8
   1bc14:	mvn	r3, #-2147483648	; 0x80000000
   1bc18:	add	r1, sp, #28
   1bc1c:	str	r0, [sp]
   1bc20:	mov	r0, #0
   1bc24:	bl	1d9ac <__assert_fail@plt+0xc5dc>
   1bc28:	ldrd	r2, [r4, #8]
   1bc2c:	mov	r7, r0
   1bc30:	str	r0, [r4]
   1bc34:	strd	r2, [r0]
   1bc38:	b	1bb20 <__assert_fail@plt+0xa750>
   1bc3c:	ldrdeq	r4, [r3], -ip
   1bc40:	ldr	ip, [pc, #472]	; 1be20 <__assert_fail@plt+0xaa50>
   1bc44:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bc48:	mov	r5, r0
   1bc4c:	movw	r4, #16716	; 0x414c
   1bc50:	movt	r4, #3
   1bc54:	ldrd	r2, [ip]
   1bc58:	ldrd	r0, [ip, #8]
   1bc5c:	strd	r6, [sp, #8]
   1bc60:	strd	r8, [sp, #16]
   1bc64:	strd	sl, [sp, #24]
   1bc68:	str	lr, [sp, #32]
   1bc6c:	sub	sp, sp, #84	; 0x54
   1bc70:	strd	r2, [sp, #32]
   1bc74:	strd	r0, [sp, #40]	; 0x28
   1bc78:	ldr	r6, [sp, #44]	; 0x2c
   1bc7c:	ldrd	r2, [ip, #16]
   1bc80:	ldrd	r0, [ip, #24]
   1bc84:	mvn	lr, r6
   1bc88:	and	lr, lr, #67108864	; 0x4000000
   1bc8c:	eor	lr, lr, r6
   1bc90:	ldrd	r6, [ip, #40]	; 0x28
   1bc94:	strd	r2, [sp, #48]	; 0x30
   1bc98:	ldrd	r2, [ip, #32]
   1bc9c:	str	lr, [sp, #44]	; 0x2c
   1bca0:	strd	r0, [sp, #56]	; 0x38
   1bca4:	strd	r2, [sp, #64]	; 0x40
   1bca8:	strd	r6, [sp, #72]	; 0x48
   1bcac:	bl	11298 <__errno_location@plt>
   1bcb0:	mov	r8, r0
   1bcb4:	ldr	r9, [r0]
   1bcb8:	ldr	r2, [r4, #4]
   1bcbc:	ldr	r6, [r4]
   1bcc0:	cmp	r2, #0
   1bcc4:	bgt	1bd20 <__assert_fail@plt+0xa950>
   1bcc8:	add	r3, r4, #8
   1bccc:	str	r2, [sp, #28]
   1bcd0:	rsb	r2, r2, #1
   1bcd4:	cmp	r6, r3
   1bcd8:	beq	1bdf4 <__assert_fail@plt+0xaa24>
   1bcdc:	mov	r1, #8
   1bce0:	mov	r0, r6
   1bce4:	mvn	r3, #-2147483648	; 0x80000000
   1bce8:	str	r1, [sp]
   1bcec:	add	r1, sp, #28
   1bcf0:	bl	1d9ac <__assert_fail@plt+0xc5dc>
   1bcf4:	mov	r6, r0
   1bcf8:	str	r0, [r4]
   1bcfc:	ldr	r0, [r4, #4]
   1bd00:	mov	r1, #0
   1bd04:	ldr	r2, [sp, #28]
   1bd08:	sub	r2, r2, r0
   1bd0c:	add	r0, r6, r0, lsl #3
   1bd10:	lsl	r2, r2, #3
   1bd14:	bl	112c8 <memset@plt>
   1bd18:	ldr	r3, [sp, #28]
   1bd1c:	str	r3, [r4, #4]
   1bd20:	ldr	sl, [r6]
   1bd24:	add	r0, sp, #40	; 0x28
   1bd28:	mvn	r3, #0
   1bd2c:	mov	r2, r5
   1bd30:	ldr	r7, [sp, #36]	; 0x24
   1bd34:	ldr	r4, [r6, #4]
   1bd38:	mov	r1, sl
   1bd3c:	str	r0, [sp, #8]
   1bd40:	ldr	lr, [sp, #32]
   1bd44:	orr	r7, r7, #1
   1bd48:	ldr	ip, [sp, #72]	; 0x48
   1bd4c:	mov	r0, r4
   1bd50:	ldr	fp, [sp, #76]	; 0x4c
   1bd54:	str	lr, [sp]
   1bd58:	str	r7, [sp, #4]
   1bd5c:	str	ip, [sp, #12]
   1bd60:	str	fp, [sp, #16]
   1bd64:	bl	19070 <__assert_fail@plt+0x7ca0>
   1bd68:	cmp	sl, r0
   1bd6c:	bhi	1bdd0 <__assert_fail@plt+0xaa00>
   1bd70:	add	sl, r0, #1
   1bd74:	movw	r3, #16860	; 0x41dc
   1bd78:	movt	r3, #3
   1bd7c:	cmp	r4, r3
   1bd80:	str	sl, [r6]
   1bd84:	beq	1bd90 <__assert_fail@plt+0xa9c0>
   1bd88:	mov	r0, r4
   1bd8c:	bl	1df60 <__assert_fail@plt+0xcb90>
   1bd90:	mov	r0, sl
   1bd94:	bl	1d708 <__assert_fail@plt+0xc338>
   1bd98:	ldr	r3, [sp, #32]
   1bd9c:	mov	r2, r5
   1bda0:	add	r5, sp, #40	; 0x28
   1bda4:	mov	r1, sl
   1bda8:	mov	r4, r0
   1bdac:	ldr	lr, [sp, #72]	; 0x48
   1bdb0:	ldr	ip, [sp, #76]	; 0x4c
   1bdb4:	str	r0, [r6, #4]
   1bdb8:	stm	sp, {r3, r7}
   1bdbc:	mvn	r3, #0
   1bdc0:	str	r5, [sp, #8]
   1bdc4:	str	lr, [sp, #12]
   1bdc8:	str	ip, [sp, #16]
   1bdcc:	bl	19070 <__assert_fail@plt+0x7ca0>
   1bdd0:	mov	r0, r4
   1bdd4:	str	r9, [r8]
   1bdd8:	add	sp, sp, #84	; 0x54
   1bddc:	ldrd	r4, [sp]
   1bde0:	ldrd	r6, [sp, #8]
   1bde4:	ldrd	r8, [sp, #16]
   1bde8:	ldrd	sl, [sp, #24]
   1bdec:	add	sp, sp, #32
   1bdf0:	pop	{pc}		; (ldr pc, [sp], #4)
   1bdf4:	mov	r0, #8
   1bdf8:	mvn	r3, #-2147483648	; 0x80000000
   1bdfc:	add	r1, sp, #28
   1be00:	str	r0, [sp]
   1be04:	mov	r0, #0
   1be08:	bl	1d9ac <__assert_fail@plt+0xc5dc>
   1be0c:	ldrd	r2, [r4, #8]
   1be10:	mov	r6, r0
   1be14:	str	r0, [r4]
   1be18:	strd	r2, [r0]
   1be1c:	b	1bcfc <__assert_fail@plt+0xa92c>
   1be20:	ldrdeq	r4, [r3], -ip
   1be24:	ldr	ip, [pc, #480]	; 1c00c <__assert_fail@plt+0xac3c>
   1be28:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1be2c:	mov	r5, r0
   1be30:	movw	r4, #16716	; 0x414c
   1be34:	movt	r4, #3
   1be38:	ldrd	r2, [ip]
   1be3c:	strd	r6, [sp, #8]
   1be40:	mov	r6, r1
   1be44:	ldrd	r0, [ip, #8]
   1be48:	strd	r8, [sp, #16]
   1be4c:	strd	sl, [sp, #24]
   1be50:	str	lr, [sp, #32]
   1be54:	sub	sp, sp, #84	; 0x54
   1be58:	ldrd	r8, [ip, #40]	; 0x28
   1be5c:	strd	r2, [sp, #32]
   1be60:	strd	r0, [sp, #40]	; 0x28
   1be64:	ldrd	r2, [ip, #16]
   1be68:	ldr	r7, [sp, #44]	; 0x2c
   1be6c:	ldrd	r0, [ip, #24]
   1be70:	strd	r2, [sp, #48]	; 0x30
   1be74:	ldrd	r2, [ip, #32]
   1be78:	mvn	lr, r7
   1be7c:	and	lr, lr, #67108864	; 0x4000000
   1be80:	eor	lr, lr, r7
   1be84:	str	lr, [sp, #44]	; 0x2c
   1be88:	strd	r0, [sp, #56]	; 0x38
   1be8c:	strd	r2, [sp, #64]	; 0x40
   1be90:	strd	r8, [sp, #72]	; 0x48
   1be94:	bl	11298 <__errno_location@plt>
   1be98:	mov	r9, r0
   1be9c:	ldr	sl, [r0]
   1bea0:	ldr	r2, [r4, #4]
   1bea4:	ldr	r7, [r4]
   1bea8:	cmp	r2, #0
   1beac:	bgt	1bf08 <__assert_fail@plt+0xab38>
   1beb0:	add	r3, r4, #8
   1beb4:	str	r2, [sp, #28]
   1beb8:	rsb	r2, r2, #1
   1bebc:	cmp	r7, r3
   1bec0:	beq	1bfe0 <__assert_fail@plt+0xac10>
   1bec4:	mov	r1, #8
   1bec8:	mov	r0, r7
   1becc:	mvn	r3, #-2147483648	; 0x80000000
   1bed0:	str	r1, [sp]
   1bed4:	add	r1, sp, #28
   1bed8:	bl	1d9ac <__assert_fail@plt+0xc5dc>
   1bedc:	mov	r7, r0
   1bee0:	str	r0, [r4]
   1bee4:	ldr	r0, [r4, #4]
   1bee8:	mov	r1, #0
   1beec:	ldr	r2, [sp, #28]
   1bef0:	sub	r2, r2, r0
   1bef4:	add	r0, r7, r0, lsl #3
   1bef8:	lsl	r2, r2, #3
   1befc:	bl	112c8 <memset@plt>
   1bf00:	ldr	r3, [sp, #28]
   1bf04:	str	r3, [r4, #4]
   1bf08:	ldr	ip, [sp, #32]
   1bf0c:	add	r0, sp, #40	; 0x28
   1bf10:	mov	r3, r6
   1bf14:	mov	r2, r5
   1bf18:	ldr	r8, [sp, #36]	; 0x24
   1bf1c:	ldr	fp, [r7]
   1bf20:	ldr	r4, [r7, #4]
   1bf24:	str	ip, [sp]
   1bf28:	orr	r8, r8, #1
   1bf2c:	ldr	ip, [sp, #72]	; 0x48
   1bf30:	mov	r1, fp
   1bf34:	str	r8, [sp, #4]
   1bf38:	ldr	lr, [sp, #76]	; 0x4c
   1bf3c:	str	r0, [sp, #8]
   1bf40:	mov	r0, r4
   1bf44:	str	ip, [sp, #12]
   1bf48:	str	lr, [sp, #16]
   1bf4c:	bl	19070 <__assert_fail@plt+0x7ca0>
   1bf50:	cmp	fp, r0
   1bf54:	bhi	1bfbc <__assert_fail@plt+0xabec>
   1bf58:	add	fp, r0, #1
   1bf5c:	movw	r3, #16860	; 0x41dc
   1bf60:	movt	r3, #3
   1bf64:	cmp	r4, r3
   1bf68:	str	fp, [r7]
   1bf6c:	beq	1bf78 <__assert_fail@plt+0xaba8>
   1bf70:	mov	r0, r4
   1bf74:	bl	1df60 <__assert_fail@plt+0xcb90>
   1bf78:	mov	r0, fp
   1bf7c:	bl	1d708 <__assert_fail@plt+0xc338>
   1bf80:	ldr	lr, [sp, #32]
   1bf84:	mov	r2, r5
   1bf88:	mov	r3, r6
   1bf8c:	mov	r1, fp
   1bf90:	mov	r4, r0
   1bf94:	ldr	r5, [sp, #72]	; 0x48
   1bf98:	ldr	ip, [sp, #76]	; 0x4c
   1bf9c:	str	r0, [r7, #4]
   1bfa0:	str	lr, [sp]
   1bfa4:	add	lr, sp, #40	; 0x28
   1bfa8:	str	r8, [sp, #4]
   1bfac:	str	lr, [sp, #8]
   1bfb0:	str	r5, [sp, #12]
   1bfb4:	str	ip, [sp, #16]
   1bfb8:	bl	19070 <__assert_fail@plt+0x7ca0>
   1bfbc:	mov	r0, r4
   1bfc0:	str	sl, [r9]
   1bfc4:	add	sp, sp, #84	; 0x54
   1bfc8:	ldrd	r4, [sp]
   1bfcc:	ldrd	r6, [sp, #8]
   1bfd0:	ldrd	r8, [sp, #16]
   1bfd4:	ldrd	sl, [sp, #24]
   1bfd8:	add	sp, sp, #32
   1bfdc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bfe0:	mov	r0, #8
   1bfe4:	mvn	r3, #-2147483648	; 0x80000000
   1bfe8:	add	r1, sp, #28
   1bfec:	str	r0, [sp]
   1bff0:	mov	r0, #0
   1bff4:	bl	1d9ac <__assert_fail@plt+0xc5dc>
   1bff8:	ldrd	r2, [r4, #8]
   1bffc:	mov	r7, r0
   1c000:	str	r0, [r4]
   1c004:	strd	r2, [r0]
   1c008:	b	1bee4 <__assert_fail@plt+0xab14>
   1c00c:	ldrdeq	r4, [r3], -ip
   1c010:	strd	r4, [sp, #-12]!
   1c014:	mov	r4, #0
   1c018:	mov	r5, #0
   1c01c:	str	lr, [sp, #8]
   1c020:	sub	sp, sp, #100	; 0x64
   1c024:	cmp	r1, #10
   1c028:	strd	r4, [sp]
   1c02c:	strd	r4, [sp, #8]
   1c030:	strd	r4, [sp, #16]
   1c034:	strd	r4, [sp, #24]
   1c038:	strd	r4, [sp, #32]
   1c03c:	strd	r4, [sp, #40]	; 0x28
   1c040:	beq	1c070 <__assert_fail@plt+0xaca0>
   1c044:	mov	ip, #67108864	; 0x4000000
   1c048:	mov	r3, sp
   1c04c:	str	r1, [sp]
   1c050:	mov	r1, r2
   1c054:	mvn	r2, #0
   1c058:	str	ip, [sp, #12]
   1c05c:	bl	1aa5c <__assert_fail@plt+0x968c>
   1c060:	add	sp, sp, #100	; 0x64
   1c064:	ldrd	r4, [sp]
   1c068:	add	sp, sp, #8
   1c06c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c070:	bl	113a0 <abort@plt>
   1c074:	ldr	ip, [pc, #156]	; 1c118 <__assert_fail@plt+0xad48>
   1c078:	cmp	r2, #0
   1c07c:	cmpne	r1, #0
   1c080:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1c084:	strd	r6, [sp, #8]
   1c088:	mov	r6, r2
   1c08c:	str	r8, [sp, #16]
   1c090:	mov	r8, r3
   1c094:	strd	sl, [sp, #20]
   1c098:	ldrd	r4, [ip]
   1c09c:	str	lr, [sp, #28]
   1c0a0:	sub	sp, sp, #48	; 0x30
   1c0a4:	mov	lr, #10
   1c0a8:	ldrd	r2, [ip, #8]
   1c0ac:	ldrd	sl, [ip, #16]
   1c0b0:	strd	r4, [sp]
   1c0b4:	ldrd	r4, [ip, #32]
   1c0b8:	str	lr, [sp]
   1c0bc:	strd	r2, [sp, #8]
   1c0c0:	strd	sl, [sp, #16]
   1c0c4:	ldrd	r2, [ip, #24]
   1c0c8:	ldrd	sl, [ip, #40]	; 0x28
   1c0cc:	strd	r2, [sp, #24]
   1c0d0:	strd	r4, [sp, #32]
   1c0d4:	strd	sl, [sp, #40]	; 0x28
   1c0d8:	beq	1c114 <__assert_fail@plt+0xad44>
   1c0dc:	mov	r7, r1
   1c0e0:	mov	r3, sp
   1c0e4:	mov	r1, r8
   1c0e8:	mvn	r2, #0
   1c0ec:	str	r7, [sp, #40]	; 0x28
   1c0f0:	str	r6, [sp, #44]	; 0x2c
   1c0f4:	bl	1aa5c <__assert_fail@plt+0x968c>
   1c0f8:	add	sp, sp, #48	; 0x30
   1c0fc:	ldrd	r4, [sp]
   1c100:	ldrd	r6, [sp, #8]
   1c104:	ldr	r8, [sp, #16]
   1c108:	ldrd	sl, [sp, #20]
   1c10c:	add	sp, sp, #28
   1c110:	pop	{pc}		; (ldr pc, [sp], #4)
   1c114:	bl	113a0 <abort@plt>
   1c118:	ldrdeq	r4, [r3], -ip
   1c11c:	ldr	ip, [pc, #156]	; 1c1c0 <__assert_fail@plt+0xadf0>
   1c120:	cmp	r2, #0
   1c124:	cmpne	r1, #0
   1c128:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1c12c:	strd	r6, [sp, #8]
   1c130:	mov	r6, r2
   1c134:	str	r8, [sp, #16]
   1c138:	mov	r8, r3
   1c13c:	strd	sl, [sp, #20]
   1c140:	ldrd	r4, [ip]
   1c144:	str	lr, [sp, #28]
   1c148:	sub	sp, sp, #48	; 0x30
   1c14c:	mov	lr, #10
   1c150:	ldrd	r2, [ip, #8]
   1c154:	ldrd	sl, [ip, #16]
   1c158:	strd	r4, [sp]
   1c15c:	ldrd	r4, [ip, #32]
   1c160:	str	lr, [sp]
   1c164:	strd	r2, [sp, #8]
   1c168:	strd	sl, [sp, #16]
   1c16c:	ldrd	r2, [ip, #24]
   1c170:	ldrd	sl, [ip, #40]	; 0x28
   1c174:	strd	r2, [sp, #24]
   1c178:	strd	r4, [sp, #32]
   1c17c:	strd	sl, [sp, #40]	; 0x28
   1c180:	beq	1c1bc <__assert_fail@plt+0xadec>
   1c184:	ldr	r2, [sp, #80]	; 0x50
   1c188:	mov	r7, r1
   1c18c:	mov	r3, sp
   1c190:	mov	r1, r8
   1c194:	str	r7, [sp, #40]	; 0x28
   1c198:	str	r6, [sp, #44]	; 0x2c
   1c19c:	bl	1aa5c <__assert_fail@plt+0x968c>
   1c1a0:	add	sp, sp, #48	; 0x30
   1c1a4:	ldrd	r4, [sp]
   1c1a8:	ldrd	r6, [sp, #8]
   1c1ac:	ldr	r8, [sp, #16]
   1c1b0:	ldrd	sl, [sp, #20]
   1c1b4:	add	sp, sp, #28
   1c1b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1c1bc:	bl	113a0 <abort@plt>
   1c1c0:	ldrdeq	r4, [r3], -ip
   1c1c4:	ldr	ip, [pc, #512]	; 1c3cc <__assert_fail@plt+0xaffc>
   1c1c8:	cmp	r0, #0
   1c1cc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c1d0:	ldrd	r4, [ip, #16]
   1c1d4:	strd	r6, [sp, #8]
   1c1d8:	clz	r6, r1
   1c1dc:	mov	r7, r1
   1c1e0:	strd	r8, [sp, #16]
   1c1e4:	mov	r8, r0
   1c1e8:	lsr	r6, r6, #5
   1c1ec:	strd	sl, [sp, #24]
   1c1f0:	mov	fp, r2
   1c1f4:	mov	sl, #10
   1c1f8:	ldrd	r2, [ip]
   1c1fc:	moveq	r6, #1
   1c200:	str	lr, [sp, #32]
   1c204:	sub	sp, sp, #92	; 0x5c
   1c208:	cmp	r6, #0
   1c20c:	ldrd	r0, [ip, #8]
   1c210:	strd	r2, [sp, #40]	; 0x28
   1c214:	strd	r4, [sp, #56]	; 0x38
   1c218:	ldrd	r2, [ip, #24]
   1c21c:	strd	r0, [sp, #48]	; 0x30
   1c220:	ldrd	r0, [ip, #32]
   1c224:	str	sl, [sp, #40]	; 0x28
   1c228:	ldrd	r4, [ip, #40]	; 0x28
   1c22c:	strd	r2, [sp, #64]	; 0x40
   1c230:	strd	r0, [sp, #72]	; 0x48
   1c234:	strd	r4, [sp, #80]	; 0x50
   1c238:	bne	1c3c8 <__assert_fail@plt+0xaff8>
   1c23c:	movw	r5, #16716	; 0x414c
   1c240:	movt	r5, #3
   1c244:	str	r8, [sp, #80]	; 0x50
   1c248:	str	r7, [sp, #84]	; 0x54
   1c24c:	bl	11298 <__errno_location@plt>
   1c250:	ldr	r3, [r0]
   1c254:	mov	r9, r0
   1c258:	ldr	r2, [r5, #4]
   1c25c:	ldr	r4, [r5]
   1c260:	str	r3, [sp, #28]
   1c264:	cmp	r2, #0
   1c268:	movgt	r1, sl
   1c26c:	bgt	1c2d4 <__assert_fail@plt+0xaf04>
   1c270:	add	r3, r5, #8
   1c274:	str	r2, [sp, #36]	; 0x24
   1c278:	rsb	r2, r2, #1
   1c27c:	cmp	r4, r3
   1c280:	beq	1c39c <__assert_fail@plt+0xafcc>
   1c284:	mov	r1, #8
   1c288:	mov	r0, r4
   1c28c:	mvn	r3, #-2147483648	; 0x80000000
   1c290:	str	r1, [sp]
   1c294:	add	r1, sp, #36	; 0x24
   1c298:	bl	1d9ac <__assert_fail@plt+0xc5dc>
   1c29c:	mov	r4, r0
   1c2a0:	str	r0, [r5]
   1c2a4:	ldr	r0, [r5, #4]
   1c2a8:	mov	r1, #0
   1c2ac:	ldr	r2, [sp, #36]	; 0x24
   1c2b0:	sub	r2, r2, r0
   1c2b4:	add	r0, r4, r0, lsl #3
   1c2b8:	lsl	r2, r2, #3
   1c2bc:	bl	112c8 <memset@plt>
   1c2c0:	ldr	r3, [sp, #36]	; 0x24
   1c2c4:	ldr	r1, [sp, #40]	; 0x28
   1c2c8:	ldr	r8, [sp, #80]	; 0x50
   1c2cc:	str	r3, [r5, #4]
   1c2d0:	ldr	r7, [sp, #84]	; 0x54
   1c2d4:	mvn	r3, #0
   1c2d8:	mov	r2, fp
   1c2dc:	ldr	r6, [sp, #44]	; 0x2c
   1c2e0:	ldr	sl, [r4]
   1c2e4:	ldr	r5, [r4, #4]
   1c2e8:	orr	r6, r6, #1
   1c2ec:	stm	sp, {r1, r6}
   1c2f0:	add	r1, sp, #48	; 0x30
   1c2f4:	str	r8, [sp, #12]
   1c2f8:	mov	r0, r5
   1c2fc:	str	r1, [sp, #8]
   1c300:	mov	r1, sl
   1c304:	str	r7, [sp, #16]
   1c308:	bl	19070 <__assert_fail@plt+0x7ca0>
   1c30c:	cmp	sl, r0
   1c310:	bhi	1c374 <__assert_fail@plt+0xafa4>
   1c314:	add	r7, r0, #1
   1c318:	movw	r3, #16860	; 0x41dc
   1c31c:	movt	r3, #3
   1c320:	cmp	r5, r3
   1c324:	str	r7, [r4]
   1c328:	beq	1c334 <__assert_fail@plt+0xaf64>
   1c32c:	mov	r0, r5
   1c330:	bl	1df60 <__assert_fail@plt+0xcb90>
   1c334:	mov	r0, r7
   1c338:	bl	1d708 <__assert_fail@plt+0xc338>
   1c33c:	ldr	r3, [sp, #40]	; 0x28
   1c340:	mov	r2, fp
   1c344:	mov	r1, r7
   1c348:	mov	r5, r0
   1c34c:	ldr	lr, [sp, #80]	; 0x50
   1c350:	ldr	ip, [sp, #84]	; 0x54
   1c354:	str	r0, [r4, #4]
   1c358:	add	r4, sp, #48	; 0x30
   1c35c:	stm	sp, {r3, r6}
   1c360:	mvn	r3, #0
   1c364:	str	r4, [sp, #8]
   1c368:	str	lr, [sp, #12]
   1c36c:	str	ip, [sp, #16]
   1c370:	bl	19070 <__assert_fail@plt+0x7ca0>
   1c374:	ldr	r3, [sp, #28]
   1c378:	mov	r0, r5
   1c37c:	str	r3, [r9]
   1c380:	add	sp, sp, #92	; 0x5c
   1c384:	ldrd	r4, [sp]
   1c388:	ldrd	r6, [sp, #8]
   1c38c:	ldrd	r8, [sp, #16]
   1c390:	ldrd	sl, [sp, #24]
   1c394:	add	sp, sp, #32
   1c398:	pop	{pc}		; (ldr pc, [sp], #4)
   1c39c:	mov	r1, #8
   1c3a0:	mvn	r3, #-2147483648	; 0x80000000
   1c3a4:	mov	r0, r6
   1c3a8:	str	r1, [sp]
   1c3ac:	add	r1, sp, #36	; 0x24
   1c3b0:	bl	1d9ac <__assert_fail@plt+0xc5dc>
   1c3b4:	ldrd	r2, [r5, #8]
   1c3b8:	mov	r4, r0
   1c3bc:	str	r0, [r5]
   1c3c0:	strd	r2, [r0]
   1c3c4:	b	1c2a4 <__assert_fail@plt+0xaed4>
   1c3c8:	bl	113a0 <abort@plt>
   1c3cc:	ldrdeq	r4, [r3], -ip
   1c3d0:	ldr	ip, [pc, #536]	; 1c5f0 <__assert_fail@plt+0xb220>
   1c3d4:	cmp	r0, #0
   1c3d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c3dc:	ldrd	r4, [ip, #16]
   1c3e0:	strd	r6, [sp, #8]
   1c3e4:	mov	r6, r1
   1c3e8:	mov	r7, r0
   1c3ec:	strd	r8, [sp, #16]
   1c3f0:	mov	r9, #10
   1c3f4:	strd	sl, [sp, #24]
   1c3f8:	mov	sl, r2
   1c3fc:	mov	fp, r3
   1c400:	str	lr, [sp, #32]
   1c404:	clz	lr, r1
   1c408:	sub	sp, sp, #92	; 0x5c
   1c40c:	ldrd	r2, [ip]
   1c410:	lsr	lr, lr, #5
   1c414:	moveq	lr, #1
   1c418:	ldrd	r0, [ip, #8]
   1c41c:	cmp	lr, #0
   1c420:	strd	r4, [sp, #56]	; 0x38
   1c424:	ldrd	r4, [ip, #40]	; 0x28
   1c428:	str	lr, [sp, #28]
   1c42c:	strd	r2, [sp, #40]	; 0x28
   1c430:	ldrd	r2, [ip, #24]
   1c434:	strd	r0, [sp, #48]	; 0x30
   1c438:	ldrd	r0, [ip, #32]
   1c43c:	str	r9, [sp, #40]	; 0x28
   1c440:	strd	r2, [sp, #64]	; 0x40
   1c444:	strd	r4, [sp, #80]	; 0x50
   1c448:	strd	r0, [sp, #72]	; 0x48
   1c44c:	bne	1c5ec <__assert_fail@plt+0xb21c>
   1c450:	movw	r5, #16716	; 0x414c
   1c454:	movt	r5, #3
   1c458:	str	r7, [sp, #80]	; 0x50
   1c45c:	str	r6, [sp, #84]	; 0x54
   1c460:	bl	11298 <__errno_location@plt>
   1c464:	ldr	r3, [r0]
   1c468:	mov	r8, r0
   1c46c:	ldr	r2, [r5, #4]
   1c470:	ldr	r4, [r5]
   1c474:	str	r3, [sp, #24]
   1c478:	cmp	r2, #0
   1c47c:	movgt	r1, r9
   1c480:	bgt	1c4e8 <__assert_fail@plt+0xb118>
   1c484:	add	r3, r5, #8
   1c488:	str	r2, [sp, #36]	; 0x24
   1c48c:	rsb	r2, r2, #1
   1c490:	cmp	r4, r3
   1c494:	beq	1c5c0 <__assert_fail@plt+0xb1f0>
   1c498:	mov	r1, #8
   1c49c:	mov	r0, r4
   1c4a0:	mvn	r3, #-2147483648	; 0x80000000
   1c4a4:	str	r1, [sp]
   1c4a8:	add	r1, sp, #36	; 0x24
   1c4ac:	bl	1d9ac <__assert_fail@plt+0xc5dc>
   1c4b0:	mov	r4, r0
   1c4b4:	str	r0, [r5]
   1c4b8:	ldr	r0, [r5, #4]
   1c4bc:	mov	r1, #0
   1c4c0:	ldr	r2, [sp, #36]	; 0x24
   1c4c4:	sub	r2, r2, r0
   1c4c8:	add	r0, r4, r0, lsl #3
   1c4cc:	lsl	r2, r2, #3
   1c4d0:	bl	112c8 <memset@plt>
   1c4d4:	ldr	r3, [sp, #36]	; 0x24
   1c4d8:	ldr	r1, [sp, #40]	; 0x28
   1c4dc:	ldr	r7, [sp, #80]	; 0x50
   1c4e0:	str	r3, [r5, #4]
   1c4e4:	ldr	r6, [sp, #84]	; 0x54
   1c4e8:	mov	r3, fp
   1c4ec:	mov	r2, sl
   1c4f0:	ldr	r0, [sp, #44]	; 0x2c
   1c4f4:	ldr	r9, [r4]
   1c4f8:	ldr	r5, [r4, #4]
   1c4fc:	orr	r0, r0, #1
   1c500:	str	r1, [sp]
   1c504:	add	r1, sp, #48	; 0x30
   1c508:	str	r0, [sp, #4]
   1c50c:	str	r1, [sp, #8]
   1c510:	mov	r1, r9
   1c514:	str	r7, [sp, #12]
   1c518:	str	r6, [sp, #16]
   1c51c:	str	r0, [sp, #28]
   1c520:	mov	r0, r5
   1c524:	bl	19070 <__assert_fail@plt+0x7ca0>
   1c528:	cmp	r9, r0
   1c52c:	bhi	1c598 <__assert_fail@plt+0xb1c8>
   1c530:	add	r6, r0, #1
   1c534:	movw	r3, #16860	; 0x41dc
   1c538:	movt	r3, #3
   1c53c:	cmp	r5, r3
   1c540:	str	r6, [r4]
   1c544:	beq	1c550 <__assert_fail@plt+0xb180>
   1c548:	mov	r0, r5
   1c54c:	bl	1df60 <__assert_fail@plt+0xcb90>
   1c550:	mov	r0, r6
   1c554:	bl	1d708 <__assert_fail@plt+0xc338>
   1c558:	ldr	lr, [sp, #40]	; 0x28
   1c55c:	mov	r1, r6
   1c560:	mov	r3, fp
   1c564:	mov	r2, sl
   1c568:	mov	r5, r0
   1c56c:	ldr	r6, [sp, #80]	; 0x50
   1c570:	ldr	ip, [sp, #84]	; 0x54
   1c574:	str	r0, [r4, #4]
   1c578:	str	lr, [sp]
   1c57c:	ldr	lr, [sp, #28]
   1c580:	str	lr, [sp, #4]
   1c584:	add	lr, sp, #48	; 0x30
   1c588:	str	r6, [sp, #12]
   1c58c:	str	lr, [sp, #8]
   1c590:	str	ip, [sp, #16]
   1c594:	bl	19070 <__assert_fail@plt+0x7ca0>
   1c598:	ldr	r3, [sp, #24]
   1c59c:	mov	r0, r5
   1c5a0:	str	r3, [r8]
   1c5a4:	add	sp, sp, #92	; 0x5c
   1c5a8:	ldrd	r4, [sp]
   1c5ac:	ldrd	r6, [sp, #8]
   1c5b0:	ldrd	r8, [sp, #16]
   1c5b4:	ldrd	sl, [sp, #24]
   1c5b8:	add	sp, sp, #32
   1c5bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c5c0:	mov	r1, #8
   1c5c4:	mvn	r3, #-2147483648	; 0x80000000
   1c5c8:	ldr	r0, [sp, #28]
   1c5cc:	str	r1, [sp]
   1c5d0:	add	r1, sp, #36	; 0x24
   1c5d4:	bl	1d9ac <__assert_fail@plt+0xc5dc>
   1c5d8:	ldrd	r2, [r5, #8]
   1c5dc:	mov	r4, r0
   1c5e0:	str	r0, [r5]
   1c5e4:	strd	r2, [r0]
   1c5e8:	b	1c4b8 <__assert_fail@plt+0xb0e8>
   1c5ec:	bl	113a0 <abort@plt>
   1c5f0:	ldrdeq	r4, [r3], -ip
   1c5f4:	ldr	r3, [pc]	; 1c5fc <__assert_fail@plt+0xb22c>
   1c5f8:	b	1aa5c <__assert_fail@plt+0x968c>
   1c5fc:	andeq	r4, r3, ip, asr r1
   1c600:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c604:	movw	r4, #16716	; 0x414c
   1c608:	movt	r4, #3
   1c60c:	strd	r6, [sp, #8]
   1c610:	strd	r8, [sp, #16]
   1c614:	strd	sl, [sp, #24]
   1c618:	mov	sl, r0
   1c61c:	mov	fp, r1
   1c620:	str	lr, [sp, #32]
   1c624:	sub	sp, sp, #44	; 0x2c
   1c628:	bl	11298 <__errno_location@plt>
   1c62c:	ldr	r3, [r0]
   1c630:	mov	r8, r0
   1c634:	ldr	r2, [r4, #4]
   1c638:	ldr	r5, [r4]
   1c63c:	str	r3, [sp, #28]
   1c640:	cmp	r2, #0
   1c644:	bgt	1c6a0 <__assert_fail@plt+0xb2d0>
   1c648:	add	r3, r4, #8
   1c64c:	str	r2, [sp, #36]	; 0x24
   1c650:	rsb	r2, r2, #1
   1c654:	cmp	r5, r3
   1c658:	beq	1c77c <__assert_fail@plt+0xb3ac>
   1c65c:	mov	r1, #8
   1c660:	mov	r0, r5
   1c664:	mvn	r3, #-2147483648	; 0x80000000
   1c668:	str	r1, [sp]
   1c66c:	add	r1, sp, #36	; 0x24
   1c670:	bl	1d9ac <__assert_fail@plt+0xc5dc>
   1c674:	mov	r5, r0
   1c678:	str	r0, [r4]
   1c67c:	ldr	r0, [r4, #4]
   1c680:	mov	r1, #0
   1c684:	ldr	r2, [sp, #36]	; 0x24
   1c688:	sub	r2, r2, r0
   1c68c:	add	r0, r5, r0, lsl #3
   1c690:	lsl	r2, r2, #3
   1c694:	bl	112c8 <memset@plt>
   1c698:	ldr	r3, [sp, #36]	; 0x24
   1c69c:	str	r3, [r4, #4]
   1c6a0:	ldr	ip, [r4, #16]
   1c6a4:	mov	r3, fp
   1c6a8:	mov	r2, sl
   1c6ac:	ldr	r7, [r4, #20]
   1c6b0:	ldr	r0, [pc, #240]	; 1c7a8 <__assert_fail@plt+0xb3d8>
   1c6b4:	ldr	r9, [r5]
   1c6b8:	orr	r7, r7, #1
   1c6bc:	ldr	r6, [r5, #4]
   1c6c0:	str	ip, [sp]
   1c6c4:	ldr	ip, [r4, #56]	; 0x38
   1c6c8:	mov	r1, r9
   1c6cc:	str	r7, [sp, #4]
   1c6d0:	ldr	lr, [r4, #60]	; 0x3c
   1c6d4:	str	r0, [sp, #8]
   1c6d8:	mov	r0, r6
   1c6dc:	str	ip, [sp, #12]
   1c6e0:	str	lr, [sp, #16]
   1c6e4:	bl	19070 <__assert_fail@plt+0x7ca0>
   1c6e8:	cmp	r9, r0
   1c6ec:	bhi	1c754 <__assert_fail@plt+0xb384>
   1c6f0:	add	r9, r0, #1
   1c6f4:	movw	r3, #16860	; 0x41dc
   1c6f8:	movt	r3, #3
   1c6fc:	cmp	r6, r3
   1c700:	str	r9, [r5]
   1c704:	beq	1c710 <__assert_fail@plt+0xb340>
   1c708:	mov	r0, r6
   1c70c:	bl	1df60 <__assert_fail@plt+0xcb90>
   1c710:	mov	r0, r9
   1c714:	bl	1d708 <__assert_fail@plt+0xc338>
   1c718:	ldr	ip, [r4, #16]
   1c71c:	mov	r1, r9
   1c720:	mov	r3, fp
   1c724:	mov	r2, sl
   1c728:	mov	r6, r0
   1c72c:	ldr	r9, [r4, #56]	; 0x38
   1c730:	ldr	lr, [r4, #60]	; 0x3c
   1c734:	str	r0, [r5, #4]
   1c738:	str	ip, [sp]
   1c73c:	ldr	ip, [pc, #100]	; 1c7a8 <__assert_fail@plt+0xb3d8>
   1c740:	str	r7, [sp, #4]
   1c744:	str	ip, [sp, #8]
   1c748:	str	r9, [sp, #12]
   1c74c:	str	lr, [sp, #16]
   1c750:	bl	19070 <__assert_fail@plt+0x7ca0>
   1c754:	ldr	r3, [sp, #28]
   1c758:	mov	r0, r6
   1c75c:	str	r3, [r8]
   1c760:	add	sp, sp, #44	; 0x2c
   1c764:	ldrd	r4, [sp]
   1c768:	ldrd	r6, [sp, #8]
   1c76c:	ldrd	r8, [sp, #16]
   1c770:	ldrd	sl, [sp, #24]
   1c774:	add	sp, sp, #32
   1c778:	pop	{pc}		; (ldr pc, [sp], #4)
   1c77c:	mov	r0, #8
   1c780:	mvn	r3, #-2147483648	; 0x80000000
   1c784:	add	r1, sp, #36	; 0x24
   1c788:	str	r0, [sp]
   1c78c:	mov	r0, #0
   1c790:	bl	1d9ac <__assert_fail@plt+0xc5dc>
   1c794:	ldrd	r2, [r4, #8]
   1c798:	mov	r5, r0
   1c79c:	str	r0, [r4]
   1c7a0:	strd	r2, [r0]
   1c7a4:	b	1c67c <__assert_fail@plt+0xb2ac>
   1c7a8:	andeq	r4, r3, r4, ror #2
   1c7ac:	ldr	r3, [pc, #4]	; 1c7b8 <__assert_fail@plt+0xb3e8>
   1c7b0:	mvn	r2, #0
   1c7b4:	b	1aa5c <__assert_fail@plt+0x968c>
   1c7b8:	andeq	r4, r3, ip, asr r1
   1c7bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c7c0:	movw	r4, #16716	; 0x414c
   1c7c4:	movt	r4, #3
   1c7c8:	strd	r6, [sp, #8]
   1c7cc:	strd	r8, [sp, #16]
   1c7d0:	strd	sl, [sp, #24]
   1c7d4:	mov	sl, r0
   1c7d8:	str	lr, [sp, #32]
   1c7dc:	sub	sp, sp, #44	; 0x2c
   1c7e0:	bl	11298 <__errno_location@plt>
   1c7e4:	ldr	r3, [r0]
   1c7e8:	mov	r8, r0
   1c7ec:	ldr	r2, [r4, #4]
   1c7f0:	ldr	r5, [r4]
   1c7f4:	str	r3, [sp, #28]
   1c7f8:	cmp	r2, #0
   1c7fc:	bgt	1c858 <__assert_fail@plt+0xb488>
   1c800:	add	r3, r4, #8
   1c804:	str	r2, [sp, #36]	; 0x24
   1c808:	rsb	r2, r2, #1
   1c80c:	cmp	r5, r3
   1c810:	beq	1c920 <__assert_fail@plt+0xb550>
   1c814:	mov	r1, #8
   1c818:	mov	r0, r5
   1c81c:	mvn	r3, #-2147483648	; 0x80000000
   1c820:	str	r1, [sp]
   1c824:	add	r1, sp, #36	; 0x24
   1c828:	bl	1d9ac <__assert_fail@plt+0xc5dc>
   1c82c:	mov	r5, r0
   1c830:	str	r0, [r4]
   1c834:	ldr	r0, [r4, #4]
   1c838:	mov	r1, #0
   1c83c:	ldr	r2, [sp, #36]	; 0x24
   1c840:	sub	r2, r2, r0
   1c844:	add	r0, r5, r0, lsl #3
   1c848:	lsl	r2, r2, #3
   1c84c:	bl	112c8 <memset@plt>
   1c850:	ldr	r3, [sp, #36]	; 0x24
   1c854:	str	r3, [r4, #4]
   1c858:	ldr	ip, [r4, #16]
   1c85c:	mvn	r3, #0
   1c860:	mov	r2, sl
   1c864:	ldr	r7, [r4, #20]
   1c868:	ldr	fp, [pc, #220]	; 1c94c <__assert_fail@plt+0xb57c>
   1c86c:	ldr	r9, [r5]
   1c870:	orr	r7, r7, #1
   1c874:	ldr	r6, [r5, #4]
   1c878:	str	ip, [sp]
   1c87c:	ldr	ip, [r4, #56]	; 0x38
   1c880:	mov	r1, r9
   1c884:	stmib	sp, {r7, fp}
   1c888:	ldr	lr, [r4, #60]	; 0x3c
   1c88c:	mov	r0, r6
   1c890:	str	ip, [sp, #12]
   1c894:	str	lr, [sp, #16]
   1c898:	bl	19070 <__assert_fail@plt+0x7ca0>
   1c89c:	cmp	r9, r0
   1c8a0:	bhi	1c8f8 <__assert_fail@plt+0xb528>
   1c8a4:	add	r9, r0, #1
   1c8a8:	movw	r3, #16860	; 0x41dc
   1c8ac:	movt	r3, #3
   1c8b0:	cmp	r6, r3
   1c8b4:	str	r9, [r5]
   1c8b8:	beq	1c8c4 <__assert_fail@plt+0xb4f4>
   1c8bc:	mov	r0, r6
   1c8c0:	bl	1df60 <__assert_fail@plt+0xcb90>
   1c8c4:	mov	r0, r9
   1c8c8:	bl	1d708 <__assert_fail@plt+0xc338>
   1c8cc:	ldr	r3, [r4, #16]
   1c8d0:	mov	r2, sl
   1c8d4:	mov	r1, r9
   1c8d8:	mov	r6, r0
   1c8dc:	ldr	lr, [r4, #56]	; 0x38
   1c8e0:	ldr	ip, [r4, #60]	; 0x3c
   1c8e4:	str	r0, [r5, #4]
   1c8e8:	stm	sp, {r3, r7, fp, lr}
   1c8ec:	mvn	r3, #0
   1c8f0:	str	ip, [sp, #16]
   1c8f4:	bl	19070 <__assert_fail@plt+0x7ca0>
   1c8f8:	ldr	r3, [sp, #28]
   1c8fc:	mov	r0, r6
   1c900:	str	r3, [r8]
   1c904:	add	sp, sp, #44	; 0x2c
   1c908:	ldrd	r4, [sp]
   1c90c:	ldrd	r6, [sp, #8]
   1c910:	ldrd	r8, [sp, #16]
   1c914:	ldrd	sl, [sp, #24]
   1c918:	add	sp, sp, #32
   1c91c:	pop	{pc}		; (ldr pc, [sp], #4)
   1c920:	mov	r0, #8
   1c924:	mvn	r3, #-2147483648	; 0x80000000
   1c928:	add	r1, sp, #36	; 0x24
   1c92c:	str	r0, [sp]
   1c930:	mov	r0, #0
   1c934:	bl	1d9ac <__assert_fail@plt+0xc5dc>
   1c938:	ldrd	r2, [r4, #8]
   1c93c:	mov	r5, r0
   1c940:	str	r0, [r4]
   1c944:	strd	r2, [r0]
   1c948:	b	1c834 <__assert_fail@plt+0xb464>
   1c94c:	andeq	r4, r3, r4, ror #2
   1c950:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c954:	strd	r6, [sp, #8]
   1c958:	mov	r6, r0
   1c95c:	movw	r0, #10212	; 0x27e4
   1c960:	movt	r0, #2
   1c964:	str	r8, [sp, #16]
   1c968:	str	lr, [sp, #20]
   1c96c:	bl	111d8 <getenv@plt>
   1c970:	subs	r5, r0, #0
   1c974:	ldrb	r3, [r6, #4]
   1c978:	beq	1ca30 <__assert_fail@plt+0xb660>
   1c97c:	cmp	r3, #0
   1c980:	beq	1c9b4 <__assert_fail@plt+0xb5e4>
   1c984:	mov	r1, r5
   1c988:	add	r0, r6, #5
   1c98c:	bl	110a0 <strcmp@plt>
   1c990:	cmp	r0, #0
   1c994:	bne	1c9b4 <__assert_fail@plt+0xb5e4>
   1c998:	mov	r4, #1
   1c99c:	mov	r0, r4
   1c9a0:	ldrd	r4, [sp]
   1c9a4:	ldrd	r6, [sp, #8]
   1c9a8:	ldr	r8, [sp, #16]
   1c9ac:	add	sp, sp, #20
   1c9b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1c9b4:	mov	r0, r5
   1c9b8:	bl	11274 <strlen@plt>
   1c9bc:	add	r7, r0, #1
   1c9c0:	cmp	r7, #58	; 0x3a
   1c9c4:	movcs	r0, r7
   1c9c8:	movcc	r0, #58	; 0x3a
   1c9cc:	add	r0, r0, #9
   1c9d0:	bic	r0, r0, #3
   1c9d4:	bl	1dd30 <__assert_fail@plt+0xc960>
   1c9d8:	subs	r4, r0, #0
   1c9dc:	beq	1ca50 <__assert_fail@plt+0xb680>
   1c9e0:	mov	r8, #0
   1c9e4:	mov	ip, #1
   1c9e8:	add	r3, r4, #5
   1c9ec:	mov	r1, r5
   1c9f0:	mov	r0, r3
   1c9f4:	mov	r2, r7
   1c9f8:	str	r8, [r4]
   1c9fc:	strh	ip, [r4, #4]
   1ca00:	bl	110f4 <memcpy@plt>
   1ca04:	strb	r8, [r0, r7]
   1ca08:	ldrb	r3, [r6, #4]
   1ca0c:	cmp	r3, #0
   1ca10:	bne	1ca58 <__assert_fail@plt+0xb688>
   1ca14:	movw	r0, #10212	; 0x27e4
   1ca18:	movt	r0, #2
   1ca1c:	bl	1137c <unsetenv@plt>
   1ca20:	cmp	r0, #0
   1ca24:	bne	1ca74 <__assert_fail@plt+0xb6a4>
   1ca28:	bl	11178 <tzset@plt>
   1ca2c:	b	1c99c <__assert_fail@plt+0xb5cc>
   1ca30:	cmp	r3, #0
   1ca34:	beq	1c998 <__assert_fail@plt+0xb5c8>
   1ca38:	mov	r0, #64	; 0x40
   1ca3c:	bl	1dd30 <__assert_fail@plt+0xc960>
   1ca40:	subs	r4, r0, #0
   1ca44:	strne	r5, [r4]
   1ca48:	strhne	r5, [r4, #4]
   1ca4c:	bne	1ca08 <__assert_fail@plt+0xb638>
   1ca50:	mov	r4, #0
   1ca54:	b	1c99c <__assert_fail@plt+0xb5cc>
   1ca58:	add	r1, r6, #5
   1ca5c:	movw	r0, #10212	; 0x27e4
   1ca60:	movt	r0, #2
   1ca64:	mov	r2, #1
   1ca68:	bl	1128c <setenv@plt>
   1ca6c:	cmp	r0, #0
   1ca70:	beq	1ca28 <__assert_fail@plt+0xb658>
   1ca74:	bl	11298 <__errno_location@plt>
   1ca78:	cmp	r4, #1
   1ca7c:	mov	r5, r0
   1ca80:	ldr	r6, [r0]
   1ca84:	beq	1ca9c <__assert_fail@plt+0xb6cc>
   1ca88:	mov	r0, r4
   1ca8c:	ldr	r4, [r4]
   1ca90:	bl	1df60 <__assert_fail@plt+0xcb90>
   1ca94:	cmp	r4, #0
   1ca98:	bne	1ca88 <__assert_fail@plt+0xb6b8>
   1ca9c:	mov	r4, #0
   1caa0:	str	r6, [r5]
   1caa4:	b	1c99c <__assert_fail@plt+0xb5cc>
   1caa8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1caac:	strd	r6, [sp, #8]
   1cab0:	ldr	r6, [r1, #40]	; 0x28
   1cab4:	strd	r8, [sp, #16]
   1cab8:	str	sl, [sp, #24]
   1cabc:	str	lr, [sp, #28]
   1cac0:	cmp	r6, #0
   1cac4:	beq	1cbd4 <__assert_fail@plt+0xb804>
   1cac8:	cmp	r1, r6
   1cacc:	mov	r7, r1
   1cad0:	mov	r5, r0
   1cad4:	bhi	1cae4 <__assert_fail@plt+0xb714>
   1cad8:	add	r3, r1, #44	; 0x2c
   1cadc:	cmp	r6, r3
   1cae0:	bcc	1cbd4 <__assert_fail@plt+0xb804>
   1cae4:	ldrb	r3, [r6]
   1cae8:	cmp	r3, #0
   1caec:	addne	r4, r5, #5
   1caf0:	beq	1cbc8 <__assert_fail@plt+0xb7f8>
   1caf4:	mov	r1, r6
   1caf8:	mov	r0, r4
   1cafc:	bl	110a0 <strcmp@plt>
   1cb00:	cmp	r0, #0
   1cb04:	add	r2, r5, #5
   1cb08:	mov	r0, r4
   1cb0c:	beq	1cba8 <__assert_fail@plt+0xb7d8>
   1cb10:	ldrb	r3, [r4]
   1cb14:	cmp	r3, #0
   1cb18:	bne	1cb30 <__assert_fail@plt+0xb760>
   1cb1c:	cmp	r4, r2
   1cb20:	bne	1cbdc <__assert_fail@plt+0xb80c>
   1cb24:	ldrb	r3, [r5, #4]
   1cb28:	cmp	r3, #0
   1cb2c:	beq	1cbdc <__assert_fail@plt+0xb80c>
   1cb30:	bl	11274 <strlen@plt>
   1cb34:	add	r0, r0, #1
   1cb38:	ldrb	r3, [r4, r0]!
   1cb3c:	cmp	r3, #0
   1cb40:	bne	1caf4 <__assert_fail@plt+0xb724>
   1cb44:	ldr	r3, [r5]
   1cb48:	cmp	r3, #0
   1cb4c:	addne	r4, r3, #5
   1cb50:	movne	r5, r3
   1cb54:	b	1caf4 <__assert_fail@plt+0xb724>
   1cb58:	cmp	r8, #58	; 0x3a
   1cb5c:	movcs	r0, r8
   1cb60:	movcc	r0, #58	; 0x3a
   1cb64:	add	r0, r0, #9
   1cb68:	bic	r0, r0, #3
   1cb6c:	bl	1dd30 <__assert_fail@plt+0xc960>
   1cb70:	subs	r9, r0, #0
   1cb74:	beq	1cc14 <__assert_fail@plt+0xb844>
   1cb78:	mov	sl, #0
   1cb7c:	mov	r3, #1
   1cb80:	add	r4, r9, #5
   1cb84:	mov	r1, r6
   1cb88:	mov	r0, r4
   1cb8c:	mov	r2, r8
   1cb90:	str	sl, [r9]
   1cb94:	strh	r3, [r9, #4]
   1cb98:	bl	110f4 <memcpy@plt>
   1cb9c:	strb	sl, [r4, r8]
   1cba0:	str	r9, [r5]
   1cba4:	strb	sl, [r9, #4]
   1cba8:	mov	r0, #1
   1cbac:	str	r4, [r7, #40]	; 0x28
   1cbb0:	ldrd	r4, [sp]
   1cbb4:	ldrd	r6, [sp, #8]
   1cbb8:	ldrd	r8, [sp, #16]
   1cbbc:	ldr	sl, [sp, #24]
   1cbc0:	add	sp, sp, #28
   1cbc4:	pop	{pc}		; (ldr pc, [sp], #4)
   1cbc8:	movw	r4, #10188	; 0x27cc
   1cbcc:	movt	r4, #2
   1cbd0:	b	1cba8 <__assert_fail@plt+0xb7d8>
   1cbd4:	mov	r0, #1
   1cbd8:	b	1cbb0 <__assert_fail@plt+0xb7e0>
   1cbdc:	mov	r0, r6
   1cbe0:	bl	11274 <strlen@plt>
   1cbe4:	add	r3, r5, #64	; 0x40
   1cbe8:	add	r8, r0, #1
   1cbec:	sub	r3, r3, r4
   1cbf0:	cmp	r3, r8
   1cbf4:	ble	1cb58 <__assert_fail@plt+0xb788>
   1cbf8:	mov	r1, r6
   1cbfc:	mov	r2, r8
   1cc00:	mov	r0, r4
   1cc04:	bl	110f4 <memcpy@plt>
   1cc08:	mov	r3, #0
   1cc0c:	strb	r3, [r4, r8]
   1cc10:	b	1cba8 <__assert_fail@plt+0xb7d8>
   1cc14:	mov	r0, r9
   1cc18:	str	r9, [r5]
   1cc1c:	b	1cbb0 <__assert_fail@plt+0xb7e0>
   1cc20:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1cc24:	strd	r6, [sp, #8]
   1cc28:	subs	r6, r0, #0
   1cc2c:	str	r8, [sp, #16]
   1cc30:	str	lr, [sp, #20]
   1cc34:	beq	1cca0 <__assert_fail@plt+0xb8d0>
   1cc38:	bl	11274 <strlen@plt>
   1cc3c:	add	r5, r0, #1
   1cc40:	cmp	r5, #58	; 0x3a
   1cc44:	movcs	r0, r5
   1cc48:	movcc	r0, #58	; 0x3a
   1cc4c:	add	r0, r0, #9
   1cc50:	bic	r0, r0, #3
   1cc54:	bl	1dd30 <__assert_fail@plt+0xc960>
   1cc58:	subs	r4, r0, #0
   1cc5c:	beq	1cc88 <__assert_fail@plt+0xb8b8>
   1cc60:	mov	r7, #0
   1cc64:	mov	ip, #1
   1cc68:	add	r3, r4, #5
   1cc6c:	mov	r1, r6
   1cc70:	mov	r0, r3
   1cc74:	mov	r2, r5
   1cc78:	str	r7, [r4]
   1cc7c:	strh	ip, [r4, #4]
   1cc80:	bl	110f4 <memcpy@plt>
   1cc84:	strb	r7, [r0, r5]
   1cc88:	mov	r0, r4
   1cc8c:	ldrd	r4, [sp]
   1cc90:	ldrd	r6, [sp, #8]
   1cc94:	ldr	r8, [sp, #16]
   1cc98:	add	sp, sp, #20
   1cc9c:	pop	{pc}		; (ldr pc, [sp], #4)
   1cca0:	mov	r0, #64	; 0x40
   1cca4:	bl	1dd30 <__assert_fail@plt+0xc960>
   1cca8:	subs	r4, r0, #0
   1ccac:	strne	r6, [r4]
   1ccb0:	strhne	r6, [r4, #4]
   1ccb4:	b	1cc88 <__assert_fail@plt+0xb8b8>
   1ccb8:	cmp	r0, #1
   1ccbc:	bxeq	lr
   1ccc0:	cmp	r0, #0
   1ccc4:	bxeq	lr
   1ccc8:	str	r4, [sp, #-8]!
   1cccc:	str	lr, [sp, #4]
   1ccd0:	ldr	r4, [r0]
   1ccd4:	bl	1df60 <__assert_fail@plt+0xcb90>
   1ccd8:	subs	r0, r4, #0
   1ccdc:	bne	1ccd0 <__assert_fail@plt+0xb900>
   1cce0:	ldr	r4, [sp]
   1cce4:	add	sp, sp, #4
   1cce8:	pop	{pc}		; (ldr pc, [sp], #4)
   1ccec:	subs	ip, r0, #0
   1ccf0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ccf4:	strd	r6, [sp, #8]
   1ccf8:	mov	r6, r1
   1ccfc:	str	r8, [sp, #16]
   1cd00:	str	lr, [sp, #20]
   1cd04:	beq	1cde8 <__assert_fail@plt+0xba18>
   1cd08:	mov	r5, r2
   1cd0c:	mov	r7, ip
   1cd10:	bl	1c950 <__assert_fail@plt+0xb580>
   1cd14:	subs	r4, r0, #0
   1cd18:	beq	1cdbc <__assert_fail@plt+0xb9ec>
   1cd1c:	mov	r0, r6
   1cd20:	mov	r1, r5
   1cd24:	bl	11154 <localtime_r@plt>
   1cd28:	cmp	r0, #0
   1cd2c:	beq	1cdb0 <__assert_fail@plt+0xb9e0>
   1cd30:	mov	r0, r7
   1cd34:	mov	r1, r5
   1cd38:	bl	1caa8 <__assert_fail@plt+0xb6d8>
   1cd3c:	subs	r7, r0, #0
   1cd40:	beq	1cdb0 <__assert_fail@plt+0xb9e0>
   1cd44:	cmp	r4, #1
   1cd48:	beq	1cda8 <__assert_fail@plt+0xb9d8>
   1cd4c:	bl	11298 <__errno_location@plt>
   1cd50:	ldrb	r3, [r4, #4]
   1cd54:	mov	r6, r0
   1cd58:	movw	r0, #10212	; 0x27e4
   1cd5c:	movt	r0, #2
   1cd60:	ldr	r8, [r6]
   1cd64:	cmp	r3, #0
   1cd68:	beq	1cdd4 <__assert_fail@plt+0xba04>
   1cd6c:	mov	r2, #1
   1cd70:	add	r1, r4, #5
   1cd74:	bl	1128c <setenv@plt>
   1cd78:	cmp	r0, #0
   1cd7c:	beq	1cde0 <__assert_fail@plt+0xba10>
   1cd80:	ldr	r8, [r6]
   1cd84:	mov	r7, #0
   1cd88:	mov	r0, r4
   1cd8c:	ldr	r4, [r4]
   1cd90:	bl	1df60 <__assert_fail@plt+0xcb90>
   1cd94:	cmp	r4, #0
   1cd98:	bne	1cd88 <__assert_fail@plt+0xb9b8>
   1cd9c:	cmp	r7, #0
   1cda0:	str	r8, [r6]
   1cda4:	beq	1cdbc <__assert_fail@plt+0xb9ec>
   1cda8:	mov	r0, r5
   1cdac:	b	1cdc0 <__assert_fail@plt+0xb9f0>
   1cdb0:	cmp	r4, #1
   1cdb4:	movne	r7, #0
   1cdb8:	bne	1cd4c <__assert_fail@plt+0xb97c>
   1cdbc:	mov	r0, #0
   1cdc0:	ldrd	r4, [sp]
   1cdc4:	ldrd	r6, [sp, #8]
   1cdc8:	ldr	r8, [sp, #16]
   1cdcc:	add	sp, sp, #20
   1cdd0:	pop	{pc}		; (ldr pc, [sp], #4)
   1cdd4:	bl	1137c <unsetenv@plt>
   1cdd8:	cmp	r0, #0
   1cddc:	bne	1cd80 <__assert_fail@plt+0xb9b0>
   1cde0:	bl	11178 <tzset@plt>
   1cde4:	b	1cd88 <__assert_fail@plt+0xb9b8>
   1cde8:	mov	r0, r6
   1cdec:	mov	r1, r2
   1cdf0:	ldrd	r4, [sp]
   1cdf4:	ldrd	r6, [sp, #8]
   1cdf8:	ldr	r8, [sp, #16]
   1cdfc:	ldr	lr, [sp, #20]
   1ce00:	add	sp, sp, #24
   1ce04:	b	11088 <gmtime_r@plt>
   1ce08:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1ce0c:	subs	r5, r0, #0
   1ce10:	strd	r6, [sp, #8]
   1ce14:	mov	r6, r1
   1ce18:	strd	r8, [sp, #16]
   1ce1c:	str	lr, [sp, #24]
   1ce20:	sub	sp, sp, #52	; 0x34
   1ce24:	beq	1cf68 <__assert_fail@plt+0xbb98>
   1ce28:	bl	1c950 <__assert_fail@plt+0xb580>
   1ce2c:	subs	r4, r0, #0
   1ce30:	beq	1cf78 <__assert_fail@plt+0xbba8>
   1ce34:	ldr	r3, [r6]
   1ce38:	mvn	r2, #0
   1ce3c:	add	r0, sp, #4
   1ce40:	ldr	r1, [r6, #4]
   1ce44:	str	r3, [sp, #4]
   1ce48:	str	r2, [sp, #32]
   1ce4c:	ldrd	r2, [r6, #8]
   1ce50:	str	r1, [sp, #8]
   1ce54:	ldr	r1, [r6, #16]
   1ce58:	strd	r2, [sp, #12]
   1ce5c:	ldr	r2, [r6, #20]
   1ce60:	str	r1, [sp, #20]
   1ce64:	ldr	r3, [r6, #32]
   1ce68:	str	r2, [sp, #24]
   1ce6c:	str	r3, [sp, #36]	; 0x24
   1ce70:	bl	110b8 <mktime@plt>
   1ce74:	ldr	r3, [sp, #32]
   1ce78:	mov	r7, r0
   1ce7c:	cmp	r3, #0
   1ce80:	bge	1cf34 <__assert_fail@plt+0xbb64>
   1ce84:	cmp	r4, #1
   1ce88:	beq	1cf78 <__assert_fail@plt+0xbba8>
   1ce8c:	mov	r5, #0
   1ce90:	bl	11298 <__errno_location@plt>
   1ce94:	ldrb	r3, [r4, #4]
   1ce98:	mov	r8, r0
   1ce9c:	movw	r0, #10212	; 0x27e4
   1cea0:	movt	r0, #2
   1cea4:	ldr	r9, [r8]
   1cea8:	cmp	r3, #0
   1ceac:	beq	1cf60 <__assert_fail@plt+0xbb90>
   1ceb0:	mov	r2, #1
   1ceb4:	add	r1, r4, #5
   1ceb8:	bl	1128c <setenv@plt>
   1cebc:	cmp	r0, #0
   1cec0:	bne	1cf54 <__assert_fail@plt+0xbb84>
   1cec4:	bl	11178 <tzset@plt>
   1cec8:	mov	r0, r4
   1cecc:	ldr	r4, [r4]
   1ced0:	bl	1df60 <__assert_fail@plt+0xcb90>
   1ced4:	cmp	r4, #0
   1ced8:	bne	1cec8 <__assert_fail@plt+0xbaf8>
   1cedc:	cmp	r5, #0
   1cee0:	str	r9, [r8]
   1cee4:	beq	1cf78 <__assert_fail@plt+0xbba8>
   1cee8:	ldrd	r0, [sp, #4]
   1ceec:	ldrd	r2, [sp, #12]
   1cef0:	ldrd	r4, [sp, #20]
   1cef4:	strd	r0, [r6]
   1cef8:	ldrd	r0, [sp, #28]
   1cefc:	strd	r2, [r6, #8]
   1cf00:	ldrd	r2, [sp, #36]	; 0x24
   1cf04:	strd	r4, [r6, #16]
   1cf08:	ldr	ip, [sp, #44]	; 0x2c
   1cf0c:	strd	r0, [r6, #24]
   1cf10:	strd	r2, [r6, #32]
   1cf14:	str	ip, [r6, #40]	; 0x28
   1cf18:	mov	r0, r7
   1cf1c:	add	sp, sp, #52	; 0x34
   1cf20:	ldrd	r4, [sp]
   1cf24:	ldrd	r6, [sp, #8]
   1cf28:	ldrd	r8, [sp, #16]
   1cf2c:	add	sp, sp, #24
   1cf30:	pop	{pc}		; (ldr pc, [sp], #4)
   1cf34:	mov	r0, r5
   1cf38:	add	r1, sp, #4
   1cf3c:	bl	1caa8 <__assert_fail@plt+0xb6d8>
   1cf40:	subs	r5, r0, #0
   1cf44:	beq	1ce84 <__assert_fail@plt+0xbab4>
   1cf48:	cmp	r4, #1
   1cf4c:	beq	1cee8 <__assert_fail@plt+0xbb18>
   1cf50:	b	1ce90 <__assert_fail@plt+0xbac0>
   1cf54:	mov	r5, #0
   1cf58:	ldr	r9, [r8]
   1cf5c:	b	1cec8 <__assert_fail@plt+0xbaf8>
   1cf60:	bl	1137c <unsetenv@plt>
   1cf64:	b	1cebc <__assert_fail@plt+0xbaec>
   1cf68:	mov	r0, r1
   1cf6c:	bl	1134c <timegm@plt>
   1cf70:	mov	r7, r0
   1cf74:	b	1cf18 <__assert_fail@plt+0xbb48>
   1cf78:	mvn	r7, #0
   1cf7c:	b	1cf18 <__assert_fail@plt+0xbb48>
   1cf80:	cmp	r1, #0
   1cf84:	strd	r4, [sp, #-16]!
   1cf88:	mov	ip, r3
   1cf8c:	str	r6, [sp, #8]
   1cf90:	mov	r4, r0
   1cf94:	str	lr, [sp, #12]
   1cf98:	sub	sp, sp, #32
   1cf9c:	ldr	r5, [sp, #48]	; 0x30
   1cfa0:	ldr	r6, [sp, #52]	; 0x34
   1cfa4:	beq	1d0e8 <__assert_fail@plt+0xbd18>
   1cfa8:	mov	r3, r1
   1cfac:	mov	r1, #1
   1cfb0:	stm	sp, {r2, ip}
   1cfb4:	movw	r2, #11260	; 0x2bfc
   1cfb8:	movt	r2, #2
   1cfbc:	bl	112ec <__fprintf_chk@plt>
   1cfc0:	mov	r2, #5
   1cfc4:	movw	r1, #11280	; 0x2c10
   1cfc8:	movt	r1, #2
   1cfcc:	mov	r0, #0
   1cfd0:	bl	11130 <dcgettext@plt>
   1cfd4:	movw	ip, #2022	; 0x7e6
   1cfd8:	mov	r3, r0
   1cfdc:	mov	r1, #1
   1cfe0:	movw	r2, #12008	; 0x2ee8
   1cfe4:	movt	r2, #2
   1cfe8:	mov	r0, r4
   1cfec:	str	ip, [sp]
   1cff0:	bl	112ec <__fprintf_chk@plt>
   1cff4:	mov	r1, r4
   1cff8:	mov	r0, #10
   1cffc:	bl	11124 <fputc_unlocked@plt>
   1d000:	mov	r2, #5
   1d004:	movw	r1, #11284	; 0x2c14
   1d008:	movt	r1, #2
   1d00c:	mov	r0, #0
   1d010:	bl	11130 <dcgettext@plt>
   1d014:	mov	r2, r0
   1d018:	mov	r1, #1
   1d01c:	movw	r3, #11456	; 0x2cc0
   1d020:	movt	r3, #2
   1d024:	mov	r0, r4
   1d028:	bl	112ec <__fprintf_chk@plt>
   1d02c:	mov	r1, r4
   1d030:	mov	r0, #10
   1d034:	bl	11124 <fputc_unlocked@plt>
   1d038:	cmp	r6, #9
   1d03c:	ldrls	pc, [pc, r6, lsl #2]
   1d040:	b	1d354 <__assert_fail@plt+0xbf84>
   1d044:	ldrdeq	sp, [r1], -r4
   1d048:	andeq	sp, r1, r4, lsl #2
   1d04c:	andeq	sp, r1, r0, asr #2
   1d050:	andeq	sp, r1, r0, lsl #3
   1d054:	andeq	sp, r1, r8, asr #3
   1d058:	andeq	sp, r1, r0, lsl #4
   1d05c:	andeq	sp, r1, r8, asr #4
   1d060:	muleq	r1, ip, r2
   1d064:	strdeq	sp, [r1], -r4
   1d068:	andeq	sp, r1, ip, rrx
   1d06c:	movw	r1, #11760	; 0x2df0
   1d070:	movt	r1, #2
   1d074:	mov	r2, #5
   1d078:	mov	r0, #0
   1d07c:	bl	11130 <dcgettext@plt>
   1d080:	ldr	lr, [r5, #4]
   1d084:	mov	r2, r0
   1d088:	mov	r1, #1
   1d08c:	mov	r0, r4
   1d090:	ldr	r3, [r5, #8]
   1d094:	ldr	ip, [r5, #32]
   1d098:	str	lr, [sp]
   1d09c:	ldr	lr, [r5, #12]
   1d0a0:	str	ip, [sp, #28]
   1d0a4:	ldr	ip, [r5, #28]
   1d0a8:	str	r3, [sp, #4]
   1d0ac:	ldr	r3, [r5, #16]
   1d0b0:	str	lr, [sp, #8]
   1d0b4:	ldr	lr, [r5, #20]
   1d0b8:	str	ip, [sp, #24]
   1d0bc:	ldr	ip, [r5, #24]
   1d0c0:	str	r3, [sp, #12]
   1d0c4:	ldr	r3, [r5]
   1d0c8:	str	lr, [sp, #16]
   1d0cc:	str	ip, [sp, #20]
   1d0d0:	bl	112ec <__fprintf_chk@plt>
   1d0d4:	add	sp, sp, #32
   1d0d8:	ldrd	r4, [sp]
   1d0dc:	ldr	r6, [sp, #8]
   1d0e0:	add	sp, sp, #12
   1d0e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d0e8:	mov	r3, r2
   1d0ec:	mov	r1, #1
   1d0f0:	str	ip, [sp]
   1d0f4:	movw	r2, #11272	; 0x2c08
   1d0f8:	movt	r2, #2
   1d0fc:	bl	112ec <__fprintf_chk@plt>
   1d100:	b	1cfc0 <__assert_fail@plt+0xbbf0>
   1d104:	mov	r2, #5
   1d108:	movw	r1, #11492	; 0x2ce4
   1d10c:	movt	r1, #2
   1d110:	mov	r0, #0
   1d114:	bl	11130 <dcgettext@plt>
   1d118:	ldr	r3, [r5]
   1d11c:	mov	r2, r0
   1d120:	mov	r1, #1
   1d124:	mov	r0, r4
   1d128:	add	sp, sp, #32
   1d12c:	ldrd	r4, [sp]
   1d130:	ldr	r6, [sp, #8]
   1d134:	ldr	lr, [sp, #12]
   1d138:	add	sp, sp, #16
   1d13c:	b	112ec <__fprintf_chk@plt>
   1d140:	mov	r2, #5
   1d144:	movw	r1, #11508	; 0x2cf4
   1d148:	movt	r1, #2
   1d14c:	mov	r0, #0
   1d150:	bl	11130 <dcgettext@plt>
   1d154:	ldm	r5, {r3, ip}
   1d158:	mov	r2, r0
   1d15c:	mov	r1, #1
   1d160:	mov	r0, r4
   1d164:	str	ip, [sp, #48]	; 0x30
   1d168:	add	sp, sp, #32
   1d16c:	ldrd	r4, [sp]
   1d170:	ldr	r6, [sp, #8]
   1d174:	ldr	lr, [sp, #12]
   1d178:	add	sp, sp, #16
   1d17c:	b	112ec <__fprintf_chk@plt>
   1d180:	mov	r2, #5
   1d184:	movw	r1, #11532	; 0x2d0c
   1d188:	movt	r1, #2
   1d18c:	mov	r0, #0
   1d190:	bl	11130 <dcgettext@plt>
   1d194:	ldm	r5, {r3, lr}
   1d198:	mov	r2, r0
   1d19c:	mov	r1, #1
   1d1a0:	mov	r0, r4
   1d1a4:	ldr	ip, [r5, #8]
   1d1a8:	str	lr, [sp, #48]	; 0x30
   1d1ac:	str	ip, [sp, #52]	; 0x34
   1d1b0:	add	sp, sp, #32
   1d1b4:	ldrd	r4, [sp]
   1d1b8:	ldr	r6, [sp, #8]
   1d1bc:	ldr	lr, [sp, #12]
   1d1c0:	add	sp, sp, #16
   1d1c4:	b	112ec <__fprintf_chk@plt>
   1d1c8:	mov	r2, #5
   1d1cc:	movw	r1, #11560	; 0x2d28
   1d1d0:	movt	r1, #2
   1d1d4:	mov	r0, #0
   1d1d8:	bl	11130 <dcgettext@plt>
   1d1dc:	ldmib	r5, {r3, ip, lr}
   1d1e0:	mov	r2, r0
   1d1e4:	mov	r1, #1
   1d1e8:	mov	r0, r4
   1d1ec:	str	r3, [sp]
   1d1f0:	ldr	r3, [r5]
   1d1f4:	stmib	sp, {ip, lr}
   1d1f8:	bl	112ec <__fprintf_chk@plt>
   1d1fc:	b	1d0d4 <__assert_fail@plt+0xbd04>
   1d200:	mov	r2, #5
   1d204:	movw	r1, #11592	; 0x2d48
   1d208:	movt	r1, #2
   1d20c:	mov	r0, #0
   1d210:	bl	11130 <dcgettext@plt>
   1d214:	ldmib	r5, {ip, lr}
   1d218:	mov	r2, r0
   1d21c:	mov	r1, #1
   1d220:	mov	r0, r4
   1d224:	ldr	r3, [r5, #16]
   1d228:	str	ip, [sp]
   1d22c:	ldr	ip, [r5, #12]
   1d230:	str	r3, [sp, #12]
   1d234:	ldr	r3, [r5]
   1d238:	str	lr, [sp, #4]
   1d23c:	str	ip, [sp, #8]
   1d240:	bl	112ec <__fprintf_chk@plt>
   1d244:	b	1d0d4 <__assert_fail@plt+0xbd04>
   1d248:	mov	r2, #5
   1d24c:	movw	r1, #11628	; 0x2d6c
   1d250:	movt	r1, #2
   1d254:	mov	r0, #0
   1d258:	bl	11130 <dcgettext@plt>
   1d25c:	ldr	lr, [r5, #4]
   1d260:	mov	r2, r0
   1d264:	mov	r1, #1
   1d268:	mov	r0, r4
   1d26c:	ldr	r3, [r5, #8]
   1d270:	ldr	ip, [r5, #20]
   1d274:	str	lr, [sp]
   1d278:	ldr	lr, [r5, #12]
   1d27c:	str	ip, [sp, #16]
   1d280:	ldr	ip, [r5, #16]
   1d284:	str	r3, [sp, #4]
   1d288:	ldr	r3, [r5]
   1d28c:	str	lr, [sp, #8]
   1d290:	str	ip, [sp, #12]
   1d294:	bl	112ec <__fprintf_chk@plt>
   1d298:	b	1d0d4 <__assert_fail@plt+0xbd04>
   1d29c:	mov	r2, #5
   1d2a0:	movw	r1, #11668	; 0x2d94
   1d2a4:	movt	r1, #2
   1d2a8:	mov	r0, #0
   1d2ac:	bl	11130 <dcgettext@plt>
   1d2b0:	ldmib	r5, {r3, ip}
   1d2b4:	mov	r2, r0
   1d2b8:	mov	r1, #1
   1d2bc:	mov	r0, r4
   1d2c0:	ldr	lr, [r5, #24]
   1d2c4:	str	r3, [sp]
   1d2c8:	ldr	r3, [r5, #12]
   1d2cc:	str	lr, [sp, #20]
   1d2d0:	ldr	lr, [r5, #20]
   1d2d4:	str	ip, [sp, #4]
   1d2d8:	ldr	ip, [r5, #16]
   1d2dc:	str	r3, [sp, #8]
   1d2e0:	ldr	r3, [r5]
   1d2e4:	str	ip, [sp, #12]
   1d2e8:	str	lr, [sp, #16]
   1d2ec:	bl	112ec <__fprintf_chk@plt>
   1d2f0:	b	1d0d4 <__assert_fail@plt+0xbd04>
   1d2f4:	mov	r2, #5
   1d2f8:	movw	r1, #11712	; 0x2dc0
   1d2fc:	movt	r1, #2
   1d300:	mov	r0, #0
   1d304:	bl	11130 <dcgettext@plt>
   1d308:	ldmib	r5, {ip, lr}
   1d30c:	mov	r2, r0
   1d310:	mov	r1, #1
   1d314:	mov	r0, r4
   1d318:	ldr	r3, [r5, #28]
   1d31c:	str	ip, [sp]
   1d320:	ldr	ip, [r5, #12]
   1d324:	str	r3, [sp, #24]
   1d328:	ldr	r3, [r5, #24]
   1d32c:	str	lr, [sp, #4]
   1d330:	ldr	lr, [r5, #16]
   1d334:	str	ip, [sp, #8]
   1d338:	ldr	ip, [r5, #20]
   1d33c:	str	r3, [sp, #20]
   1d340:	ldr	r3, [r5]
   1d344:	str	lr, [sp, #12]
   1d348:	str	ip, [sp, #16]
   1d34c:	bl	112ec <__fprintf_chk@plt>
   1d350:	b	1d0d4 <__assert_fail@plt+0xbd04>
   1d354:	movw	r1, #11812	; 0x2e24
   1d358:	movt	r1, #2
   1d35c:	b	1d074 <__assert_fail@plt+0xbca4>
   1d360:	strd	r4, [sp, #-12]!
   1d364:	str	lr, [sp, #8]
   1d368:	sub	sp, sp, #12
   1d36c:	ldr	r5, [sp, #24]
   1d370:	ldr	ip, [r5]
   1d374:	cmp	ip, #0
   1d378:	beq	1d394 <__assert_fail@plt+0xbfc4>
   1d37c:	mov	lr, r5
   1d380:	mov	ip, #0
   1d384:	ldr	r4, [lr, #4]!
   1d388:	add	ip, ip, #1
   1d38c:	cmp	r4, #0
   1d390:	bne	1d384 <__assert_fail@plt+0xbfb4>
   1d394:	stm	sp, {r5, ip}
   1d398:	bl	1cf80 <__assert_fail@plt+0xbbb0>
   1d39c:	add	sp, sp, #12
   1d3a0:	ldrd	r4, [sp]
   1d3a4:	add	sp, sp, #8
   1d3a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d3ac:	push	{lr}		; (str lr, [sp, #-4]!)
   1d3b0:	sub	sp, sp, #52	; 0x34
   1d3b4:	ldr	ip, [sp, #56]	; 0x38
   1d3b8:	ldr	lr, [ip]
   1d3bc:	cmp	lr, #0
   1d3c0:	str	lr, [sp, #8]
   1d3c4:	beq	1d45c <__assert_fail@plt+0xc08c>
   1d3c8:	ldr	lr, [ip, #4]
   1d3cc:	cmp	lr, #0
   1d3d0:	str	lr, [sp, #12]
   1d3d4:	beq	1d470 <__assert_fail@plt+0xc0a0>
   1d3d8:	ldr	lr, [ip, #8]
   1d3dc:	cmp	lr, #0
   1d3e0:	str	lr, [sp, #16]
   1d3e4:	beq	1d478 <__assert_fail@plt+0xc0a8>
   1d3e8:	ldr	lr, [ip, #12]
   1d3ec:	cmp	lr, #0
   1d3f0:	str	lr, [sp, #20]
   1d3f4:	beq	1d480 <__assert_fail@plt+0xc0b0>
   1d3f8:	ldr	lr, [ip, #16]
   1d3fc:	cmp	lr, #0
   1d400:	str	lr, [sp, #24]
   1d404:	beq	1d488 <__assert_fail@plt+0xc0b8>
   1d408:	ldr	lr, [ip, #20]
   1d40c:	cmp	lr, #0
   1d410:	str	lr, [sp, #28]
   1d414:	beq	1d490 <__assert_fail@plt+0xc0c0>
   1d418:	ldr	lr, [ip, #24]
   1d41c:	cmp	lr, #0
   1d420:	str	lr, [sp, #32]
   1d424:	beq	1d498 <__assert_fail@plt+0xc0c8>
   1d428:	ldr	lr, [ip, #28]
   1d42c:	cmp	lr, #0
   1d430:	str	lr, [sp, #36]	; 0x24
   1d434:	beq	1d4a0 <__assert_fail@plt+0xc0d0>
   1d438:	ldr	lr, [ip, #32]
   1d43c:	cmp	lr, #0
   1d440:	str	lr, [sp, #40]	; 0x28
   1d444:	beq	1d4a8 <__assert_fail@plt+0xc0d8>
   1d448:	ldr	ip, [ip, #36]	; 0x24
   1d44c:	cmp	ip, #0
   1d450:	str	ip, [sp, #44]	; 0x2c
   1d454:	movne	lr, #10
   1d458:	moveq	lr, #9
   1d45c:	add	ip, sp, #8
   1d460:	stm	sp, {ip, lr}
   1d464:	bl	1cf80 <__assert_fail@plt+0xbbb0>
   1d468:	add	sp, sp, #52	; 0x34
   1d46c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d470:	mov	lr, #1
   1d474:	b	1d45c <__assert_fail@plt+0xc08c>
   1d478:	mov	lr, #2
   1d47c:	b	1d45c <__assert_fail@plt+0xc08c>
   1d480:	mov	lr, #3
   1d484:	b	1d45c <__assert_fail@plt+0xc08c>
   1d488:	mov	lr, #4
   1d48c:	b	1d45c <__assert_fail@plt+0xc08c>
   1d490:	mov	lr, #5
   1d494:	b	1d45c <__assert_fail@plt+0xc08c>
   1d498:	mov	lr, #6
   1d49c:	b	1d45c <__assert_fail@plt+0xc08c>
   1d4a0:	mov	lr, #7
   1d4a4:	b	1d45c <__assert_fail@plt+0xc08c>
   1d4a8:	mov	lr, #8
   1d4ac:	b	1d45c <__assert_fail@plt+0xc08c>
   1d4b0:	push	{r3}		; (str r3, [sp, #-4]!)
   1d4b4:	push	{lr}		; (str lr, [sp, #-4]!)
   1d4b8:	sub	sp, sp, #56	; 0x38
   1d4bc:	ldr	ip, [sp, #64]	; 0x40
   1d4c0:	add	r3, sp, #64	; 0x40
   1d4c4:	str	r3, [sp, #12]
   1d4c8:	cmp	ip, #0
   1d4cc:	str	ip, [sp, #16]
   1d4d0:	beq	1d568 <__assert_fail@plt+0xc198>
   1d4d4:	ldr	ip, [sp, #68]	; 0x44
   1d4d8:	cmp	ip, #0
   1d4dc:	str	ip, [sp, #20]
   1d4e0:	beq	1d58c <__assert_fail@plt+0xc1bc>
   1d4e4:	ldr	ip, [sp, #72]	; 0x48
   1d4e8:	cmp	ip, #0
   1d4ec:	str	ip, [sp, #24]
   1d4f0:	beq	1d594 <__assert_fail@plt+0xc1c4>
   1d4f4:	ldr	ip, [sp, #76]	; 0x4c
   1d4f8:	cmp	ip, #0
   1d4fc:	str	ip, [sp, #28]
   1d500:	beq	1d59c <__assert_fail@plt+0xc1cc>
   1d504:	ldr	ip, [sp, #80]	; 0x50
   1d508:	cmp	ip, #0
   1d50c:	str	ip, [sp, #32]
   1d510:	beq	1d5a4 <__assert_fail@plt+0xc1d4>
   1d514:	ldr	ip, [sp, #84]	; 0x54
   1d518:	cmp	ip, #0
   1d51c:	str	ip, [sp, #36]	; 0x24
   1d520:	beq	1d5ac <__assert_fail@plt+0xc1dc>
   1d524:	ldr	ip, [sp, #88]	; 0x58
   1d528:	cmp	ip, #0
   1d52c:	str	ip, [sp, #40]	; 0x28
   1d530:	beq	1d5b4 <__assert_fail@plt+0xc1e4>
   1d534:	ldr	ip, [sp, #92]	; 0x5c
   1d538:	cmp	ip, #0
   1d53c:	str	ip, [sp, #44]	; 0x2c
   1d540:	beq	1d5bc <__assert_fail@plt+0xc1ec>
   1d544:	ldr	ip, [sp, #96]	; 0x60
   1d548:	cmp	ip, #0
   1d54c:	str	ip, [sp, #48]	; 0x30
   1d550:	beq	1d5c4 <__assert_fail@plt+0xc1f4>
   1d554:	ldr	r3, [sp, #100]	; 0x64
   1d558:	cmp	r3, #0
   1d55c:	str	r3, [sp, #52]	; 0x34
   1d560:	movne	ip, #10
   1d564:	moveq	ip, #9
   1d568:	ldr	r3, [sp, #60]	; 0x3c
   1d56c:	add	lr, sp, #16
   1d570:	str	lr, [sp]
   1d574:	str	ip, [sp, #4]
   1d578:	bl	1cf80 <__assert_fail@plt+0xbbb0>
   1d57c:	add	sp, sp, #56	; 0x38
   1d580:	pop	{lr}		; (ldr lr, [sp], #4)
   1d584:	add	sp, sp, #4
   1d588:	bx	lr
   1d58c:	mov	ip, #1
   1d590:	b	1d568 <__assert_fail@plt+0xc198>
   1d594:	mov	ip, #2
   1d598:	b	1d568 <__assert_fail@plt+0xc198>
   1d59c:	mov	ip, #3
   1d5a0:	b	1d568 <__assert_fail@plt+0xc198>
   1d5a4:	mov	ip, #4
   1d5a8:	b	1d568 <__assert_fail@plt+0xc198>
   1d5ac:	mov	ip, #5
   1d5b0:	b	1d568 <__assert_fail@plt+0xc198>
   1d5b4:	mov	ip, #6
   1d5b8:	b	1d568 <__assert_fail@plt+0xc198>
   1d5bc:	mov	ip, #7
   1d5c0:	b	1d568 <__assert_fail@plt+0xc198>
   1d5c4:	mov	ip, #8
   1d5c8:	b	1d568 <__assert_fail@plt+0xc198>
   1d5cc:	movw	r3, #16804	; 0x41a4
   1d5d0:	movt	r3, #3
   1d5d4:	str	r4, [sp, #-8]!
   1d5d8:	mov	r0, #10
   1d5dc:	ldr	r1, [r3]
   1d5e0:	str	lr, [sp, #4]
   1d5e4:	bl	11124 <fputc_unlocked@plt>
   1d5e8:	mov	r2, #5
   1d5ec:	movw	r1, #11872	; 0x2e60
   1d5f0:	movt	r1, #2
   1d5f4:	mov	r0, #0
   1d5f8:	bl	11130 <dcgettext@plt>
   1d5fc:	mov	r1, r0
   1d600:	movw	r2, #11892	; 0x2e74
   1d604:	movt	r2, #2
   1d608:	mov	r0, #1
   1d60c:	bl	112d4 <__printf_chk@plt>
   1d610:	mov	r2, #5
   1d614:	movw	r1, #11916	; 0x2e8c
   1d618:	movt	r1, #2
   1d61c:	mov	r0, #0
   1d620:	bl	11130 <dcgettext@plt>
   1d624:	mov	r1, r0
   1d628:	movw	r3, #3300	; 0xce4
   1d62c:	movt	r3, #2
   1d630:	movw	r2, #3340	; 0xd0c
   1d634:	movt	r2, #2
   1d638:	mov	r0, #1
   1d63c:	bl	112d4 <__printf_chk@plt>
   1d640:	mov	r2, #5
   1d644:	movw	r1, #11936	; 0x2ea0
   1d648:	movt	r1, #2
   1d64c:	mov	r0, #0
   1d650:	bl	11130 <dcgettext@plt>
   1d654:	mov	r1, r0
   1d658:	movw	r2, #11976	; 0x2ec8
   1d65c:	movt	r2, #2
   1d660:	mov	r0, #1
   1d664:	ldr	r4, [sp]
   1d668:	ldr	lr, [sp, #4]
   1d66c:	add	sp, sp, #8
   1d670:	b	112d4 <__printf_chk@plt>
   1d674:	strd	r4, [sp, #-16]!
   1d678:	mov	r4, r0
   1d67c:	mov	r5, r2
   1d680:	str	r6, [sp, #8]
   1d684:	mov	r6, r1
   1d688:	str	lr, [sp, #12]
   1d68c:	bl	20200 <__assert_fail@plt+0xee30>
   1d690:	cmp	r0, #0
   1d694:	beq	1d6a8 <__assert_fail@plt+0xc2d8>
   1d698:	ldrd	r4, [sp]
   1d69c:	ldr	r6, [sp, #8]
   1d6a0:	add	sp, sp, #12
   1d6a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d6a8:	cmp	r4, #0
   1d6ac:	beq	1d6bc <__assert_fail@plt+0xc2ec>
   1d6b0:	cmp	r6, #0
   1d6b4:	cmpne	r5, #0
   1d6b8:	beq	1d698 <__assert_fail@plt+0xc2c8>
   1d6bc:	bl	1dc78 <__assert_fail@plt+0xc8a8>
   1d6c0:	str	r4, [sp, #-8]!
   1d6c4:	str	lr, [sp, #4]
   1d6c8:	bl	1dd30 <__assert_fail@plt+0xc960>
   1d6cc:	cmp	r0, #0
   1d6d0:	beq	1d6e0 <__assert_fail@plt+0xc310>
   1d6d4:	ldr	r4, [sp]
   1d6d8:	add	sp, sp, #4
   1d6dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1d6e0:	bl	1dc78 <__assert_fail@plt+0xc8a8>
   1d6e4:	str	r4, [sp, #-8]!
   1d6e8:	str	lr, [sp, #4]
   1d6ec:	bl	1dd30 <__assert_fail@plt+0xc960>
   1d6f0:	cmp	r0, #0
   1d6f4:	beq	1d704 <__assert_fail@plt+0xc334>
   1d6f8:	ldr	r4, [sp]
   1d6fc:	add	sp, sp, #4
   1d700:	pop	{pc}		; (ldr pc, [sp], #4)
   1d704:	bl	1dc78 <__assert_fail@plt+0xc8a8>
   1d708:	str	r4, [sp, #-8]!
   1d70c:	str	lr, [sp, #4]
   1d710:	bl	1dd30 <__assert_fail@plt+0xc960>
   1d714:	cmp	r0, #0
   1d718:	beq	1d728 <__assert_fail@plt+0xc358>
   1d71c:	ldr	r4, [sp]
   1d720:	add	sp, sp, #4
   1d724:	pop	{pc}		; (ldr pc, [sp], #4)
   1d728:	bl	1dc78 <__assert_fail@plt+0xc8a8>
   1d72c:	strd	r4, [sp, #-16]!
   1d730:	mov	r5, r0
   1d734:	mov	r4, r1
   1d738:	str	r6, [sp, #8]
   1d73c:	str	lr, [sp, #12]
   1d740:	bl	1dd6c <__assert_fail@plt+0xc99c>
   1d744:	cmp	r0, #0
   1d748:	beq	1d75c <__assert_fail@plt+0xc38c>
   1d74c:	ldrd	r4, [sp]
   1d750:	ldr	r6, [sp, #8]
   1d754:	add	sp, sp, #12
   1d758:	pop	{pc}		; (ldr pc, [sp], #4)
   1d75c:	adds	r4, r4, #0
   1d760:	movne	r4, #1
   1d764:	cmp	r5, #0
   1d768:	moveq	r4, #1
   1d76c:	cmp	r4, #0
   1d770:	beq	1d74c <__assert_fail@plt+0xc37c>
   1d774:	bl	1dc78 <__assert_fail@plt+0xc8a8>
   1d778:	cmp	r1, #0
   1d77c:	orreq	r1, r1, #1
   1d780:	str	r4, [sp, #-8]!
   1d784:	str	lr, [sp, #4]
   1d788:	bl	1dd6c <__assert_fail@plt+0xc99c>
   1d78c:	cmp	r0, #0
   1d790:	beq	1d7a0 <__assert_fail@plt+0xc3d0>
   1d794:	ldr	r4, [sp]
   1d798:	add	sp, sp, #4
   1d79c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d7a0:	bl	1dc78 <__assert_fail@plt+0xc8a8>
   1d7a4:	strd	r4, [sp, #-16]!
   1d7a8:	mov	r4, r0
   1d7ac:	mov	r5, r2
   1d7b0:	str	r6, [sp, #8]
   1d7b4:	mov	r6, r1
   1d7b8:	str	lr, [sp, #12]
   1d7bc:	bl	20200 <__assert_fail@plt+0xee30>
   1d7c0:	cmp	r0, #0
   1d7c4:	beq	1d7d8 <__assert_fail@plt+0xc408>
   1d7c8:	ldrd	r4, [sp]
   1d7cc:	ldr	r6, [sp, #8]
   1d7d0:	add	sp, sp, #12
   1d7d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d7d8:	cmp	r4, #0
   1d7dc:	beq	1d7ec <__assert_fail@plt+0xc41c>
   1d7e0:	cmp	r6, #0
   1d7e4:	cmpne	r5, #0
   1d7e8:	beq	1d7c8 <__assert_fail@plt+0xc3f8>
   1d7ec:	bl	1dc78 <__assert_fail@plt+0xc8a8>
   1d7f0:	cmp	r2, #0
   1d7f4:	cmpne	r1, #0
   1d7f8:	str	r4, [sp, #-8]!
   1d7fc:	moveq	r2, #1
   1d800:	str	lr, [sp, #4]
   1d804:	moveq	r1, r2
   1d808:	bl	20200 <__assert_fail@plt+0xee30>
   1d80c:	cmp	r0, #0
   1d810:	beq	1d820 <__assert_fail@plt+0xc450>
   1d814:	ldr	r4, [sp]
   1d818:	add	sp, sp, #4
   1d81c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d820:	bl	1dc78 <__assert_fail@plt+0xc8a8>
   1d824:	mov	r2, r1
   1d828:	mov	r1, r0
   1d82c:	str	r4, [sp, #-8]!
   1d830:	mov	r0, #0
   1d834:	str	lr, [sp, #4]
   1d838:	bl	20200 <__assert_fail@plt+0xee30>
   1d83c:	cmp	r0, #0
   1d840:	beq	1d850 <__assert_fail@plt+0xc480>
   1d844:	ldr	r4, [sp]
   1d848:	add	sp, sp, #4
   1d84c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d850:	bl	1dc78 <__assert_fail@plt+0xc8a8>
   1d854:	cmp	r1, #0
   1d858:	cmpne	r0, #0
   1d85c:	str	r4, [sp, #-8]!
   1d860:	moveq	r2, #1
   1d864:	movne	r2, r1
   1d868:	str	lr, [sp, #4]
   1d86c:	movne	r1, r0
   1d870:	moveq	r1, r2
   1d874:	mov	r0, #0
   1d878:	bl	20200 <__assert_fail@plt+0xee30>
   1d87c:	cmp	r0, #0
   1d880:	beq	1d890 <__assert_fail@plt+0xc4c0>
   1d884:	ldr	r4, [sp]
   1d888:	add	sp, sp, #4
   1d88c:	pop	{pc}		; (ldr pc, [sp], #4)
   1d890:	bl	1dc78 <__assert_fail@plt+0xc8a8>
   1d894:	cmp	r0, #0
   1d898:	strd	r4, [sp, #-16]!
   1d89c:	mov	r5, r1
   1d8a0:	ldr	r4, [r1]
   1d8a4:	str	r6, [sp, #8]
   1d8a8:	str	lr, [sp, #12]
   1d8ac:	beq	1d8f4 <__assert_fail@plt+0xc524>
   1d8b0:	lsr	r3, r4, #1
   1d8b4:	add	r3, r3, #1
   1d8b8:	adds	r4, r4, r3
   1d8bc:	bcs	1d8f0 <__assert_fail@plt+0xc520>
   1d8c0:	mov	r2, #1
   1d8c4:	mov	r1, r4
   1d8c8:	bl	20200 <__assert_fail@plt+0xee30>
   1d8cc:	cmp	r0, #0
   1d8d0:	beq	1d8e8 <__assert_fail@plt+0xc518>
   1d8d4:	ldr	r6, [sp, #8]
   1d8d8:	str	r4, [r5]
   1d8dc:	ldrd	r4, [sp]
   1d8e0:	add	sp, sp, #12
   1d8e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1d8e8:	cmp	r4, #0
   1d8ec:	beq	1d8d4 <__assert_fail@plt+0xc504>
   1d8f0:	bl	1dc78 <__assert_fail@plt+0xc8a8>
   1d8f4:	cmp	r4, #0
   1d8f8:	mov	r2, #1
   1d8fc:	moveq	r4, #64	; 0x40
   1d900:	mov	r1, r4
   1d904:	bl	20200 <__assert_fail@plt+0xee30>
   1d908:	cmp	r0, #0
   1d90c:	bne	1d8d4 <__assert_fail@plt+0xc504>
   1d910:	b	1d8f0 <__assert_fail@plt+0xc520>
   1d914:	cmp	r0, #0
   1d918:	strd	r4, [sp, #-16]!
   1d91c:	mov	r5, r1
   1d920:	ldr	r4, [r1]
   1d924:	str	r6, [sp, #8]
   1d928:	mov	r6, r2
   1d92c:	str	lr, [sp, #12]
   1d930:	beq	1d978 <__assert_fail@plt+0xc5a8>
   1d934:	lsr	r3, r4, #1
   1d938:	add	r3, r3, #1
   1d93c:	adds	r4, r4, r3
   1d940:	bcs	1d974 <__assert_fail@plt+0xc5a4>
   1d944:	mov	r1, r4
   1d948:	bl	20200 <__assert_fail@plt+0xee30>
   1d94c:	cmp	r0, #0
   1d950:	beq	1d968 <__assert_fail@plt+0xc598>
   1d954:	ldr	r6, [sp, #8]
   1d958:	str	r4, [r5]
   1d95c:	ldrd	r4, [sp]
   1d960:	add	sp, sp, #12
   1d964:	pop	{pc}		; (ldr pc, [sp], #4)
   1d968:	cmp	r4, #0
   1d96c:	cmpne	r6, #0
   1d970:	beq	1d954 <__assert_fail@plt+0xc584>
   1d974:	bl	1dc78 <__assert_fail@plt+0xc8a8>
   1d978:	cmp	r4, #0
   1d97c:	bne	1d990 <__assert_fail@plt+0xc5c0>
   1d980:	mov	r4, #64	; 0x40
   1d984:	udiv	r4, r4, r2
   1d988:	cmp	r2, #64	; 0x40
   1d98c:	addhi	r4, r4, #1
   1d990:	mov	r2, r6
   1d994:	mov	r1, r4
   1d998:	mov	r0, #0
   1d99c:	bl	20200 <__assert_fail@plt+0xee30>
   1d9a0:	cmp	r0, #0
   1d9a4:	bne	1d954 <__assert_fail@plt+0xc584>
   1d9a8:	b	1d974 <__assert_fail@plt+0xc5a4>
   1d9ac:	ldr	ip, [r1]
   1d9b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1d9b4:	strd	r6, [sp, #8]
   1d9b8:	mov	r7, r1
   1d9bc:	mov	r6, r0
   1d9c0:	str	r8, [sp, #16]
   1d9c4:	mvn	r8, r3
   1d9c8:	lsr	r8, r8, #31
   1d9cc:	str	lr, [sp, #20]
   1d9d0:	asr	r1, ip, #1
   1d9d4:	ldr	lr, [sp, #24]
   1d9d8:	adds	r4, ip, r1
   1d9dc:	mvnvs	r4, #-2147483648	; 0x80000000
   1d9e0:	cmp	r3, r4
   1d9e4:	movge	r1, #0
   1d9e8:	andlt	r1, r8, #1
   1d9ec:	cmp	r1, #0
   1d9f0:	movne	r4, r3
   1d9f4:	smull	r0, r1, r4, lr
   1d9f8:	cmp	r1, r0, asr #31
   1d9fc:	bne	1daac <__assert_fail@plt+0xc6dc>
   1da00:	cmp	r0, #63	; 0x3f
   1da04:	mov	r5, r0
   1da08:	ble	1da78 <__assert_fail@plt+0xc6a8>
   1da0c:	cmp	r6, #0
   1da10:	sub	r1, r4, ip
   1da14:	streq	r6, [r7]
   1da18:	cmp	r1, r2
   1da1c:	bge	1da4c <__assert_fail@plt+0xc67c>
   1da20:	adds	r4, ip, r2
   1da24:	bvs	1daa8 <__assert_fail@plt+0xc6d8>
   1da28:	cmp	r4, r3
   1da2c:	movle	r3, #0
   1da30:	andgt	r3, r8, #1
   1da34:	cmp	r3, #0
   1da38:	bne	1daa8 <__assert_fail@plt+0xc6d8>
   1da3c:	smull	r0, r1, r4, lr
   1da40:	cmp	r1, r0, asr #31
   1da44:	mov	r5, r0
   1da48:	bne	1daa8 <__assert_fail@plt+0xc6d8>
   1da4c:	mov	r1, r5
   1da50:	mov	r0, r6
   1da54:	bl	1dd6c <__assert_fail@plt+0xc99c>
   1da58:	cmp	r0, #0
   1da5c:	beq	1da8c <__assert_fail@plt+0xc6bc>
   1da60:	ldr	r8, [sp, #16]
   1da64:	str	r4, [r7]
   1da68:	ldrd	r4, [sp]
   1da6c:	ldrd	r6, [sp, #8]
   1da70:	add	sp, sp, #20
   1da74:	pop	{pc}		; (ldr pc, [sp], #4)
   1da78:	mov	r0, #64	; 0x40
   1da7c:	sdiv	r4, r0, lr
   1da80:	mls	r5, lr, r4, r0
   1da84:	sub	r5, r0, r5
   1da88:	b	1da0c <__assert_fail@plt+0xc63c>
   1da8c:	adds	r5, r5, #0
   1da90:	movne	r5, #1
   1da94:	cmp	r6, #0
   1da98:	movne	r6, r5
   1da9c:	moveq	r6, #1
   1daa0:	cmp	r6, #0
   1daa4:	beq	1da60 <__assert_fail@plt+0xc690>
   1daa8:	bl	1dc78 <__assert_fail@plt+0xc8a8>
   1daac:	mvn	r0, #-2147483648	; 0x80000000
   1dab0:	b	1da7c <__assert_fail@plt+0xc6ac>
   1dab4:	mov	r1, #1
   1dab8:	str	r4, [sp, #-8]!
   1dabc:	str	lr, [sp, #4]
   1dac0:	bl	1dcbc <__assert_fail@plt+0xc8ec>
   1dac4:	cmp	r0, #0
   1dac8:	beq	1dad8 <__assert_fail@plt+0xc708>
   1dacc:	ldr	r4, [sp]
   1dad0:	add	sp, sp, #4
   1dad4:	pop	{pc}		; (ldr pc, [sp], #4)
   1dad8:	bl	1dc78 <__assert_fail@plt+0xc8a8>
   1dadc:	mov	r1, #1
   1dae0:	str	r4, [sp, #-8]!
   1dae4:	str	lr, [sp, #4]
   1dae8:	bl	1dcbc <__assert_fail@plt+0xc8ec>
   1daec:	cmp	r0, #0
   1daf0:	beq	1db00 <__assert_fail@plt+0xc730>
   1daf4:	ldr	r4, [sp]
   1daf8:	add	sp, sp, #4
   1dafc:	pop	{pc}		; (ldr pc, [sp], #4)
   1db00:	bl	1dc78 <__assert_fail@plt+0xc8a8>
   1db04:	str	r4, [sp, #-8]!
   1db08:	str	lr, [sp, #4]
   1db0c:	bl	1dcbc <__assert_fail@plt+0xc8ec>
   1db10:	cmp	r0, #0
   1db14:	beq	1db24 <__assert_fail@plt+0xc754>
   1db18:	ldr	r4, [sp]
   1db1c:	add	sp, sp, #4
   1db20:	pop	{pc}		; (ldr pc, [sp], #4)
   1db24:	bl	1dc78 <__assert_fail@plt+0xc8a8>
   1db28:	str	r4, [sp, #-8]!
   1db2c:	str	lr, [sp, #4]
   1db30:	bl	1dcbc <__assert_fail@plt+0xc8ec>
   1db34:	cmp	r0, #0
   1db38:	beq	1db48 <__assert_fail@plt+0xc778>
   1db3c:	ldr	r4, [sp]
   1db40:	add	sp, sp, #4
   1db44:	pop	{pc}		; (ldr pc, [sp], #4)
   1db48:	bl	1dc78 <__assert_fail@plt+0xc8a8>
   1db4c:	strd	r4, [sp, #-16]!
   1db50:	mov	r4, r1
   1db54:	str	r6, [sp, #8]
   1db58:	mov	r6, r0
   1db5c:	mov	r0, r1
   1db60:	str	lr, [sp, #12]
   1db64:	bl	1dd30 <__assert_fail@plt+0xc960>
   1db68:	subs	r5, r0, #0
   1db6c:	beq	1db90 <__assert_fail@plt+0xc7c0>
   1db70:	mov	r2, r4
   1db74:	mov	r1, r6
   1db78:	bl	110f4 <memcpy@plt>
   1db7c:	mov	r0, r5
   1db80:	ldrd	r4, [sp]
   1db84:	ldr	r6, [sp, #8]
   1db88:	add	sp, sp, #12
   1db8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1db90:	bl	1dc78 <__assert_fail@plt+0xc8a8>
   1db94:	strd	r4, [sp, #-16]!
   1db98:	mov	r4, r1
   1db9c:	str	r6, [sp, #8]
   1dba0:	mov	r6, r0
   1dba4:	mov	r0, r1
   1dba8:	str	lr, [sp, #12]
   1dbac:	bl	1dd30 <__assert_fail@plt+0xc960>
   1dbb0:	subs	r5, r0, #0
   1dbb4:	beq	1dbd8 <__assert_fail@plt+0xc808>
   1dbb8:	mov	r2, r4
   1dbbc:	mov	r1, r6
   1dbc0:	bl	110f4 <memcpy@plt>
   1dbc4:	mov	r0, r5
   1dbc8:	ldrd	r4, [sp]
   1dbcc:	ldr	r6, [sp, #8]
   1dbd0:	add	sp, sp, #12
   1dbd4:	pop	{pc}		; (ldr pc, [sp], #4)
   1dbd8:	bl	1dc78 <__assert_fail@plt+0xc8a8>
   1dbdc:	strd	r4, [sp, #-16]!
   1dbe0:	mov	r4, r1
   1dbe4:	str	r6, [sp, #8]
   1dbe8:	mov	r6, r0
   1dbec:	add	r0, r1, #1
   1dbf0:	str	lr, [sp, #12]
   1dbf4:	bl	1dd30 <__assert_fail@plt+0xc960>
   1dbf8:	subs	r5, r0, #0
   1dbfc:	beq	1dc28 <__assert_fail@plt+0xc858>
   1dc00:	mov	r3, #0
   1dc04:	mov	r1, r6
   1dc08:	mov	r2, r4
   1dc0c:	strb	r3, [r5, r4]
   1dc10:	bl	110f4 <memcpy@plt>
   1dc14:	mov	r0, r5
   1dc18:	ldrd	r4, [sp]
   1dc1c:	ldr	r6, [sp, #8]
   1dc20:	add	sp, sp, #12
   1dc24:	pop	{pc}		; (ldr pc, [sp], #4)
   1dc28:	bl	1dc78 <__assert_fail@plt+0xc8a8>
   1dc2c:	strd	r4, [sp, #-16]!
   1dc30:	str	r6, [sp, #8]
   1dc34:	mov	r6, r0
   1dc38:	str	lr, [sp, #12]
   1dc3c:	bl	11274 <strlen@plt>
   1dc40:	add	r4, r0, #1
   1dc44:	mov	r0, r4
   1dc48:	bl	1dd30 <__assert_fail@plt+0xc960>
   1dc4c:	subs	r5, r0, #0
   1dc50:	beq	1dc74 <__assert_fail@plt+0xc8a4>
   1dc54:	mov	r2, r4
   1dc58:	mov	r1, r6
   1dc5c:	bl	110f4 <memcpy@plt>
   1dc60:	mov	r0, r5
   1dc64:	ldrd	r4, [sp]
   1dc68:	ldr	r6, [sp, #8]
   1dc6c:	add	sp, sp, #12
   1dc70:	pop	{pc}		; (ldr pc, [sp], #4)
   1dc74:	bl	1dc78 <__assert_fail@plt+0xc8a8>
   1dc78:	movw	r3, #16712	; 0x4148
   1dc7c:	movt	r3, #3
   1dc80:	str	r4, [sp, #-8]!
   1dc84:	ldr	r4, [r3]
   1dc88:	mov	r2, #5
   1dc8c:	movw	r1, #12056	; 0x2f18
   1dc90:	movt	r1, #2
   1dc94:	mov	r0, #0
   1dc98:	str	lr, [sp, #4]
   1dc9c:	bl	11130 <dcgettext@plt>
   1dca0:	mov	r3, r0
   1dca4:	movw	r2, #4260	; 0x10a4
   1dca8:	movt	r2, #2
   1dcac:	mov	r1, #0
   1dcb0:	mov	r0, r4
   1dcb4:	bl	111c0 <error@plt>
   1dcb8:	bl	113a0 <abort@plt>
   1dcbc:	cmp	r1, #0
   1dcc0:	cmpne	r0, #0
   1dcc4:	beq	1dd10 <__assert_fail@plt+0xc940>
   1dcc8:	strd	r4, [sp, #-16]!
   1dccc:	umull	r4, r5, r0, r1
   1dcd0:	str	r6, [sp, #8]
   1dcd4:	str	lr, [sp, #12]
   1dcd8:	adds	r3, r5, #0
   1dcdc:	movne	r3, #1
   1dce0:	cmp	r4, #0
   1dce4:	blt	1dcf0 <__assert_fail@plt+0xc920>
   1dce8:	cmp	r3, #0
   1dcec:	beq	1dd1c <__assert_fail@plt+0xc94c>
   1dcf0:	bl	11298 <__errno_location@plt>
   1dcf4:	mov	r3, #12
   1dcf8:	ldrd	r4, [sp]
   1dcfc:	ldr	r6, [sp, #8]
   1dd00:	add	sp, sp, #12
   1dd04:	str	r3, [r0]
   1dd08:	mov	r0, #0
   1dd0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1dd10:	mov	r1, #1
   1dd14:	mov	r0, r1
   1dd18:	b	11064 <calloc@plt>
   1dd1c:	ldrd	r4, [sp]
   1dd20:	ldr	r6, [sp, #8]
   1dd24:	ldr	lr, [sp, #12]
   1dd28:	add	sp, sp, #16
   1dd2c:	b	11064 <calloc@plt>
   1dd30:	cmp	r0, #0
   1dd34:	beq	1dd40 <__assert_fail@plt+0xc970>
   1dd38:	blt	1dd48 <__assert_fail@plt+0xc978>
   1dd3c:	b	111e4 <malloc@plt>
   1dd40:	mov	r0, #1
   1dd44:	b	111e4 <malloc@plt>
   1dd48:	str	r4, [sp, #-8]!
   1dd4c:	str	lr, [sp, #4]
   1dd50:	bl	11298 <__errno_location@plt>
   1dd54:	mov	r3, #12
   1dd58:	ldr	r4, [sp]
   1dd5c:	add	sp, sp, #4
   1dd60:	str	r3, [r0]
   1dd64:	mov	r0, #0
   1dd68:	pop	{pc}		; (ldr pc, [sp], #4)
   1dd6c:	cmp	r0, #0
   1dd70:	beq	1dd98 <__assert_fail@plt+0xc9c8>
   1dd74:	cmp	r1, #0
   1dd78:	str	r4, [sp, #-8]!
   1dd7c:	str	lr, [sp, #4]
   1dd80:	beq	1dda0 <__assert_fail@plt+0xc9d0>
   1dd84:	blt	1ddb4 <__assert_fail@plt+0xc9e4>
   1dd88:	ldr	r4, [sp]
   1dd8c:	ldr	lr, [sp, #4]
   1dd90:	add	sp, sp, #8
   1dd94:	b	11148 <realloc@plt>
   1dd98:	mov	r0, r1
   1dd9c:	b	1dd30 <__assert_fail@plt+0xc960>
   1dda0:	bl	1df60 <__assert_fail@plt+0xcb90>
   1dda4:	ldr	r4, [sp]
   1dda8:	add	sp, sp, #4
   1ddac:	mov	r0, #0
   1ddb0:	pop	{pc}		; (ldr pc, [sp], #4)
   1ddb4:	bl	11298 <__errno_location@plt>
   1ddb8:	mov	r3, #12
   1ddbc:	str	r3, [r0]
   1ddc0:	b	1dda4 <__assert_fail@plt+0xc9d4>
   1ddc4:	strd	r4, [sp, #-16]!
   1ddc8:	mov	r4, r0
   1ddcc:	str	r6, [sp, #8]
   1ddd0:	str	lr, [sp, #12]
   1ddd4:	bl	111a8 <__fpending@plt>
   1ddd8:	ldr	r5, [r4]
   1dddc:	mov	r6, r0
   1dde0:	mov	r0, r4
   1dde4:	bl	1de4c <__assert_fail@plt+0xca7c>
   1dde8:	mov	r4, r0
   1ddec:	and	r5, r5, #32
   1ddf0:	cmp	r5, #0
   1ddf4:	bne	1de2c <__assert_fail@plt+0xca5c>
   1ddf8:	cmp	r0, #0
   1ddfc:	beq	1de18 <__assert_fail@plt+0xca48>
   1de00:	cmp	r6, #0
   1de04:	bne	1de44 <__assert_fail@plt+0xca74>
   1de08:	bl	11298 <__errno_location@plt>
   1de0c:	ldr	r4, [r0]
   1de10:	subs	r4, r4, #9
   1de14:	mvnne	r4, #0
   1de18:	mov	r0, r4
   1de1c:	ldrd	r4, [sp]
   1de20:	ldr	r6, [sp, #8]
   1de24:	add	sp, sp, #12
   1de28:	pop	{pc}		; (ldr pc, [sp], #4)
   1de2c:	cmp	r0, #0
   1de30:	bne	1de44 <__assert_fail@plt+0xca74>
   1de34:	bl	11298 <__errno_location@plt>
   1de38:	str	r4, [r0]
   1de3c:	mvn	r4, #0
   1de40:	b	1de18 <__assert_fail@plt+0xca48>
   1de44:	mvn	r4, #0
   1de48:	b	1de18 <__assert_fail@plt+0xca48>
   1de4c:	strd	r4, [sp, #-12]!
   1de50:	mov	r4, r0
   1de54:	str	lr, [sp, #8]
   1de58:	sub	sp, sp, #12
   1de5c:	bl	112e0 <fileno@plt>
   1de60:	cmp	r0, #0
   1de64:	mov	r0, r4
   1de68:	blt	1deec <__assert_fail@plt+0xcb1c>
   1de6c:	bl	11214 <__freading@plt>
   1de70:	cmp	r0, #0
   1de74:	bne	1deb8 <__assert_fail@plt+0xcae8>
   1de78:	mov	r0, r4
   1de7c:	bl	1df00 <__assert_fail@plt+0xcb30>
   1de80:	cmp	r0, #0
   1de84:	beq	1dee8 <__assert_fail@plt+0xcb18>
   1de88:	bl	11298 <__errno_location@plt>
   1de8c:	mov	r5, r0
   1de90:	mov	r0, r4
   1de94:	ldr	r4, [r5]
   1de98:	bl	112f8 <fclose@plt>
   1de9c:	cmp	r4, #0
   1dea0:	mvnne	r0, #0
   1dea4:	strne	r4, [r5]
   1dea8:	add	sp, sp, #12
   1deac:	ldrd	r4, [sp]
   1deb0:	add	sp, sp, #8
   1deb4:	pop	{pc}		; (ldr pc, [sp], #4)
   1deb8:	mov	r0, r4
   1debc:	bl	112e0 <fileno@plt>
   1dec0:	mov	r1, #1
   1dec4:	mov	r2, #0
   1dec8:	mov	r3, #0
   1decc:	str	r1, [sp]
   1ded0:	bl	11190 <lseek64@plt>
   1ded4:	mvn	r3, #0
   1ded8:	mvn	r2, #0
   1dedc:	cmp	r1, r3
   1dee0:	cmpeq	r0, r2
   1dee4:	bne	1de78 <__assert_fail@plt+0xcaa8>
   1dee8:	mov	r0, r4
   1deec:	add	sp, sp, #12
   1def0:	ldrd	r4, [sp]
   1def4:	ldr	lr, [sp, #8]
   1def8:	add	sp, sp, #12
   1defc:	b	112f8 <fclose@plt>
   1df00:	str	r4, [sp, #-8]!
   1df04:	subs	r4, r0, #0
   1df08:	str	lr, [sp, #4]
   1df0c:	sub	sp, sp, #8
   1df10:	beq	1df2c <__assert_fail@plt+0xcb5c>
   1df14:	bl	11214 <__freading@plt>
   1df18:	cmp	r0, #0
   1df1c:	beq	1df2c <__assert_fail@plt+0xcb5c>
   1df20:	ldr	r3, [r4]
   1df24:	tst	r3, #256	; 0x100
   1df28:	bne	1df44 <__assert_fail@plt+0xcb74>
   1df2c:	mov	r0, r4
   1df30:	add	sp, sp, #8
   1df34:	ldr	r4, [sp]
   1df38:	ldr	lr, [sp, #4]
   1df3c:	add	sp, sp, #8
   1df40:	b	110c4 <fflush@plt>
   1df44:	mov	r1, #1
   1df48:	mov	r2, #0
   1df4c:	mov	r3, #0
   1df50:	mov	r0, r4
   1df54:	str	r1, [sp]
   1df58:	bl	1dfc0 <__assert_fail@plt+0xcbf0>
   1df5c:	b	1df2c <__assert_fail@plt+0xcb5c>
   1df60:	strd	r4, [sp, #-12]!
   1df64:	mov	r5, r0
   1df68:	str	lr, [sp, #8]
   1df6c:	sub	sp, sp, #12
   1df70:	bl	11298 <__errno_location@plt>
   1df74:	mov	r4, r0
   1df78:	mov	r2, #0
   1df7c:	ldr	r3, [r4]
   1df80:	mov	r0, r5
   1df84:	str	r2, [r4]
   1df88:	str	r3, [sp]
   1df8c:	str	r3, [sp, #4]
   1df90:	bl	110d0 <free@plt>
   1df94:	ldr	r3, [r4]
   1df98:	add	r2, sp, #8
   1df9c:	clz	r3, r3
   1dfa0:	lsr	r3, r3, #5
   1dfa4:	add	r3, r2, r3, lsl #2
   1dfa8:	ldr	r3, [r3, #-8]
   1dfac:	str	r3, [r4]
   1dfb0:	add	sp, sp, #12
   1dfb4:	ldrd	r4, [sp]
   1dfb8:	add	sp, sp, #8
   1dfbc:	pop	{pc}		; (ldr pc, [sp], #4)
   1dfc0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1dfc4:	mov	r4, r0
   1dfc8:	ldr	ip, [r0, #4]
   1dfcc:	strd	r6, [sp, #8]
   1dfd0:	str	lr, [sp, #20]
   1dfd4:	ldr	lr, [r0, #8]
   1dfd8:	str	r8, [sp, #16]
   1dfdc:	sub	sp, sp, #8
   1dfe0:	ldr	r5, [sp, #32]
   1dfe4:	cmp	lr, ip
   1dfe8:	beq	1e010 <__assert_fail@plt+0xcc40>
   1dfec:	mov	r0, r4
   1dff0:	str	r5, [sp, #32]
   1dff4:	add	sp, sp, #8
   1dff8:	ldrd	r4, [sp]
   1dffc:	ldrd	r6, [sp, #8]
   1e000:	ldr	r8, [sp, #16]
   1e004:	ldr	lr, [sp, #20]
   1e008:	add	sp, sp, #24
   1e00c:	b	11304 <fseeko64@plt>
   1e010:	ldr	ip, [r0, #16]
   1e014:	ldr	lr, [r0, #20]
   1e018:	cmp	lr, ip
   1e01c:	bne	1dfec <__assert_fail@plt+0xcc1c>
   1e020:	ldr	r8, [r0, #36]	; 0x24
   1e024:	cmp	r8, #0
   1e028:	bne	1dfec <__assert_fail@plt+0xcc1c>
   1e02c:	mov	r6, r2
   1e030:	mov	r7, r3
   1e034:	bl	112e0 <fileno@plt>
   1e038:	mov	r2, r6
   1e03c:	mov	r3, r7
   1e040:	str	r5, [sp]
   1e044:	bl	11190 <lseek64@plt>
   1e048:	mvn	r3, #0
   1e04c:	mvn	r2, #0
   1e050:	cmp	r1, r3
   1e054:	cmpeq	r0, r2
   1e058:	beq	1e088 <__assert_fail@plt+0xccb8>
   1e05c:	ldr	r3, [r4]
   1e060:	strd	r0, [r4, #80]	; 0x50
   1e064:	bic	r3, r3, #16
   1e068:	str	r3, [r4]
   1e06c:	mov	r0, r8
   1e070:	add	sp, sp, #8
   1e074:	ldrd	r4, [sp]
   1e078:	ldrd	r6, [sp, #8]
   1e07c:	ldr	r8, [sp, #16]
   1e080:	add	sp, sp, #20
   1e084:	pop	{pc}		; (ldr pc, [sp], #4)
   1e088:	mvn	r8, #0
   1e08c:	b	1e06c <__assert_fail@plt+0xcc9c>
   1e090:	mov	r0, #14
   1e094:	str	r4, [sp, #-8]!
   1e098:	str	lr, [sp, #4]
   1e09c:	bl	11334 <nl_langinfo@plt>
   1e0a0:	cmp	r0, #0
   1e0a4:	beq	1e0c8 <__assert_fail@plt+0xccf8>
   1e0a8:	ldrb	r2, [r0]
   1e0ac:	movw	r3, #12076	; 0x2f2c
   1e0b0:	movt	r3, #2
   1e0b4:	ldr	r4, [sp]
   1e0b8:	add	sp, sp, #4
   1e0bc:	cmp	r2, #0
   1e0c0:	moveq	r0, r3
   1e0c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e0c8:	ldr	r4, [sp]
   1e0cc:	add	sp, sp, #4
   1e0d0:	movw	r0, #12076	; 0x2f2c
   1e0d4:	movt	r0, #2
   1e0d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1e0dc:	strd	r4, [sp, #-20]!	; 0xffffffec
   1e0e0:	mov	r5, r2
   1e0e4:	strd	r6, [sp, #8]
   1e0e8:	subs	r6, r0, #0
   1e0ec:	mov	r7, r1
   1e0f0:	str	lr, [sp, #16]
   1e0f4:	sub	sp, sp, #12
   1e0f8:	addeq	r6, sp, #4
   1e0fc:	mov	r0, r6
   1e100:	bl	111b4 <mbrtowc@plt>
   1e104:	cmp	r5, #0
   1e108:	cmnne	r0, #3
   1e10c:	mov	r4, r0
   1e110:	bhi	1e12c <__assert_fail@plt+0xcd5c>
   1e114:	mov	r0, r4
   1e118:	add	sp, sp, #12
   1e11c:	ldrd	r4, [sp]
   1e120:	ldrd	r6, [sp, #8]
   1e124:	add	sp, sp, #16
   1e128:	pop	{pc}		; (ldr pc, [sp], #4)
   1e12c:	mov	r0, #0
   1e130:	bl	20238 <__assert_fail@plt+0xee68>
   1e134:	cmp	r0, #0
   1e138:	bne	1e114 <__assert_fail@plt+0xcd44>
   1e13c:	ldrb	r3, [r7]
   1e140:	mov	r4, #1
   1e144:	str	r3, [r6]
   1e148:	b	1e114 <__assert_fail@plt+0xcd44>
   1e14c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1e150:	mov	r4, r3
   1e154:	strd	r6, [sp, #8]
   1e158:	strd	r8, [sp, #16]
   1e15c:	strd	sl, [sp, #24]
   1e160:	str	lr, [sp, #32]
   1e164:	sub	sp, sp, #1184	; 0x4a0
   1e168:	sub	sp, sp, #12
   1e16c:	str	r1, [sp, #48]	; 0x30
   1e170:	str	r3, [sp, #100]	; 0x64
   1e174:	ldrb	r3, [sp, #1232]	; 0x4d0
   1e178:	str	r2, [sp, #52]	; 0x34
   1e17c:	str	r0, [sp, #84]	; 0x54
   1e180:	str	r3, [sp, #96]	; 0x60
   1e184:	bl	11298 <__errno_location@plt>
   1e188:	ldr	r1, [r0]
   1e18c:	movw	r3, #10188	; 0x27cc
   1e190:	movt	r3, #2
   1e194:	str	r0, [sp, #88]	; 0x58
   1e198:	ldr	r2, [r4, #40]	; 0x28
   1e19c:	ldr	ip, [r4, #8]
   1e1a0:	ldr	fp, [sp, #1240]	; 0x4d8
   1e1a4:	cmp	r2, #0
   1e1a8:	ldr	r9, [sp, #1252]	; 0x4e4
   1e1ac:	str	r1, [sp, #104]	; 0x68
   1e1b0:	mov	r1, r2
   1e1b4:	moveq	r1, r3
   1e1b8:	cmp	ip, #12
   1e1bc:	str	ip, [sp, #80]	; 0x50
   1e1c0:	subgt	r3, ip, #12
   1e1c4:	str	r1, [sp, #112]	; 0x70
   1e1c8:	strgt	r3, [sp, #80]	; 0x50
   1e1cc:	bgt	1e1e0 <__assert_fail@plt+0xce10>
   1e1d0:	cmp	ip, #0
   1e1d4:	mov	r3, ip
   1e1d8:	moveq	r3, #12
   1e1dc:	str	r3, [sp, #80]	; 0x50
   1e1e0:	ldr	r3, [sp, #52]	; 0x34
   1e1e4:	ldrb	r1, [r3]
   1e1e8:	cmp	r1, #0
   1e1ec:	beq	1f9e0 <__assert_fail@plt+0xe610>
   1e1f0:	movw	r8, #34079	; 0x851f
   1e1f4:	movt	r8, #20971	; 0x51eb
   1e1f8:	asr	r2, r9, #31
   1e1fc:	movw	r3, #26215	; 0x6667
   1e200:	movt	r3, #26214	; 0x6666
   1e204:	smull	r0, r8, r8, r9
   1e208:	movw	r4, #46473	; 0xb589
   1e20c:	movt	r4, #5368	; 0x14f8
   1e210:	smull	r0, r6, r3, r9
   1e214:	movw	ip, #51819	; 0xca6b
   1e218:	movt	ip, #27487	; 0x6b5f
   1e21c:	movw	r5, #35757	; 0x8bad
   1e220:	movt	r5, #26843	; 0x68db
   1e224:	smull	r0, r4, r4, r9
   1e228:	rsb	r8, r2, r8, asr #5
   1e22c:	movw	r7, #19923	; 0x4dd3
   1e230:	movt	r7, #4194	; 0x1062
   1e234:	smull	sl, ip, ip, r9
   1e238:	movw	lr, #56963	; 0xde83
   1e23c:	movt	lr, #17179	; 0x431b
   1e240:	smull	r0, r5, r5, r9
   1e244:	movw	sl, #46021	; 0xb3c5
   1e248:	movt	sl, #37282	; 0x91a2
   1e24c:	asr	r6, r6, #2
   1e250:	str	r8, [sp, #44]	; 0x2c
   1e254:	smull	r0, r7, r7, r9
   1e258:	str	sl, [sp, #116]	; 0x74
   1e25c:	movw	sl, #52429	; 0xcccd
   1e260:	movt	sl, #52428	; 0xcccc
   1e264:	sub	r8, r6, r2
   1e268:	rsb	r6, r2, r4, asr #13
   1e26c:	rsb	r4, r2, ip, asr #22
   1e270:	ldr	ip, [sp, #44]	; 0x2c
   1e274:	rsb	r5, r2, r5, asr #12
   1e278:	rsb	r7, r2, r7, asr #6
   1e27c:	str	r4, [sp, #28]
   1e280:	smull	r0, lr, lr, r9
   1e284:	movw	r0, #15241	; 0x3b89
   1e288:	movt	r0, #21990	; 0x55e6
   1e28c:	str	r6, [sp, #36]	; 0x24
   1e290:	str	r5, [sp, #40]	; 0x28
   1e294:	smull	r5, r6, r3, ip
   1e298:	str	r8, [sp, #56]	; 0x38
   1e29c:	rsb	lr, r2, lr, asr #18
   1e2a0:	str	r8, [sp, #76]	; 0x4c
   1e2a4:	smull	r5, r8, r3, r8
   1e2a8:	smull	r4, r5, r3, r7
   1e2ac:	ldr	r4, [sp, #40]	; 0x28
   1e2b0:	str	lr, [sp, #32]
   1e2b4:	smull	lr, r0, r0, r9
   1e2b8:	str	r7, [sp, #72]	; 0x48
   1e2bc:	str	sl, [sp, #108]	; 0x6c
   1e2c0:	mov	sl, #0
   1e2c4:	rsb	r2, r2, r0, asr #25
   1e2c8:	smull	ip, r4, r3, r4
   1e2cc:	ldr	ip, [sp, #36]	; 0x24
   1e2d0:	str	r2, [sp, #92]	; 0x5c
   1e2d4:	ldr	r2, [sp, #44]	; 0x2c
   1e2d8:	smull	r7, lr, r3, ip
   1e2dc:	ldr	ip, [sp, #32]
   1e2e0:	asr	r2, r2, #31
   1e2e4:	smull	r7, ip, r3, ip
   1e2e8:	ldr	r7, [sp, #28]
   1e2ec:	rsb	r6, r2, r6, asr #2
   1e2f0:	ldr	r2, [sp, #40]	; 0x28
   1e2f4:	add	r6, r6, r6, lsl #2
   1e2f8:	smull	r7, r3, r3, r7
   1e2fc:	ldr	r7, [sp, #76]	; 0x4c
   1e300:	asr	r2, r2, #31
   1e304:	rsb	r4, r2, r4, asr #2
   1e308:	asr	r7, r7, #31
   1e30c:	rsb	r8, r7, r8, asr #2
   1e310:	ldr	r7, [sp, #72]	; 0x48
   1e314:	str	r4, [sp, #68]	; 0x44
   1e318:	ldr	r4, [sp, #32]
   1e31c:	asr	r0, r7, #31
   1e320:	add	r7, r8, r8, lsl #2
   1e324:	rsb	r5, r0, r5, asr #2
   1e328:	ldr	r0, [sp, #36]	; 0x24
   1e32c:	asr	r2, r4, #31
   1e330:	add	r5, r5, r5, lsl #2
   1e334:	rsb	r2, r2, ip, asr #2
   1e338:	ldr	ip, [sp, #92]	; 0x5c
   1e33c:	asr	r0, r0, #31
   1e340:	str	r2, [sp, #60]	; 0x3c
   1e344:	movw	r2, #26215	; 0x6667
   1e348:	movt	r2, #26214	; 0x6666
   1e34c:	rsb	lr, r0, lr, asr #2
   1e350:	str	lr, [sp, #64]	; 0x40
   1e354:	ldr	lr, [sp, #28]
   1e358:	asr	r0, lr, #31
   1e35c:	smull	lr, r2, r2, ip
   1e360:	ldr	ip, [sp, #56]	; 0x38
   1e364:	rsb	r3, r0, r3, asr #2
   1e368:	add	r3, r3, r3, lsl #2
   1e36c:	asr	r2, r2, #2
   1e370:	add	r0, ip, ip, lsl #2
   1e374:	ldr	ip, [sp, #68]	; 0x44
   1e378:	sub	r8, r9, r0, lsl #1
   1e37c:	add	r4, ip, ip, lsl #2
   1e380:	ldr	ip, [sp, #64]	; 0x40
   1e384:	str	r8, [sp, #56]	; 0x38
   1e388:	add	lr, ip, ip, lsl #2
   1e38c:	ldr	ip, [sp, #60]	; 0x3c
   1e390:	ldr	r8, [sp, #76]	; 0x4c
   1e394:	str	r2, [sp, #124]	; 0x7c
   1e398:	ldr	r0, [sp, #44]	; 0x2c
   1e39c:	add	ip, ip, ip, lsl #2
   1e3a0:	str	r9, [sp, #1252]	; 0x4e4
   1e3a4:	sub	r8, r8, r7, lsl #1
   1e3a8:	sub	r6, r0, r6, lsl #1
   1e3ac:	ldr	r0, [sp, #72]	; 0x48
   1e3b0:	str	r6, [sp, #132]	; 0x84
   1e3b4:	str	r8, [sp, #136]	; 0x88
   1e3b8:	sub	r5, r0, r5, lsl #1
   1e3bc:	ldr	r0, [sp, #40]	; 0x28
   1e3c0:	str	r5, [sp, #128]	; 0x80
   1e3c4:	ldr	r5, [sp, #84]	; 0x54
   1e3c8:	sub	r7, r0, r4, lsl #1
   1e3cc:	ldr	r4, [sp, #32]
   1e3d0:	ldr	r0, [sp, #36]	; 0x24
   1e3d4:	str	r7, [sp, #68]	; 0x44
   1e3d8:	ldr	r7, [sp, #52]	; 0x34
   1e3dc:	sub	r0, r0, lr, lsl #1
   1e3e0:	ldr	lr, [sp, #28]
   1e3e4:	str	r0, [sp, #64]	; 0x40
   1e3e8:	sub	r0, r4, ip, lsl #1
   1e3ec:	str	r0, [sp, #60]	; 0x3c
   1e3f0:	sub	r0, lr, r3, lsl #1
   1e3f4:	str	r0, [sp, #120]	; 0x78
   1e3f8:	cmp	r1, #37	; 0x25
   1e3fc:	beq	1e4e8 <__assert_fail@plt+0xd118>
   1e400:	ldr	r3, [sp, #48]	; 0x30
   1e404:	cmp	fp, #0
   1e408:	sub	r3, r3, sl
   1e40c:	blt	1e49c <__assert_fail@plt+0xd0cc>
   1e410:	cmp	fp, #1
   1e414:	movcs	r4, fp
   1e418:	movcc	r4, #1
   1e41c:	cmp	r4, r3
   1e420:	bcs	1e4a4 <__assert_fail@plt+0xd0d4>
   1e424:	cmp	r5, #0
   1e428:	beq	1e454 <__assert_fail@plt+0xd084>
   1e42c:	cmp	fp, #1
   1e430:	ble	1e450 <__assert_fail@plt+0xd080>
   1e434:	sub	fp, fp, #1
   1e438:	mov	r1, #32
   1e43c:	mov	r0, r5
   1e440:	mov	r2, fp
   1e444:	bl	112c8 <memset@plt>
   1e448:	ldrb	r1, [r7]
   1e44c:	add	r5, r5, fp
   1e450:	strb	r1, [r5], #1
   1e454:	add	sl, sl, r4
   1e458:	mov	r4, r7
   1e45c:	ldrb	r1, [r4, #1]
   1e460:	add	r7, r4, #1
   1e464:	mvn	fp, #0
   1e468:	cmp	r1, #0
   1e46c:	bne	1e3f8 <__assert_fail@plt+0xd028>
   1e470:	str	r5, [sp, #84]	; 0x54
   1e474:	ldr	r3, [sp, #48]	; 0x30
   1e478:	ldr	r2, [sp, #84]	; 0x54
   1e47c:	cmp	r2, #0
   1e480:	cmpne	r3, #0
   1e484:	movne	r3, #0
   1e488:	strbne	r3, [r2]
   1e48c:	ldr	r3, [sp, #88]	; 0x58
   1e490:	ldr	r2, [sp, #104]	; 0x68
   1e494:	str	r2, [r3]
   1e498:	b	1e4b4 <__assert_fail@plt+0xd0e4>
   1e49c:	cmp	r3, #1
   1e4a0:	bhi	1e4d8 <__assert_fail@plt+0xd108>
   1e4a4:	ldr	r2, [sp, #88]	; 0x58
   1e4a8:	mov	r3, #34	; 0x22
   1e4ac:	str	r3, [r2]
   1e4b0:	mov	sl, #0
   1e4b4:	mov	r0, sl
   1e4b8:	add	sp, sp, #1184	; 0x4a0
   1e4bc:	add	sp, sp, #12
   1e4c0:	ldrd	r4, [sp]
   1e4c4:	ldrd	r6, [sp, #8]
   1e4c8:	ldrd	r8, [sp, #16]
   1e4cc:	ldrd	sl, [sp, #24]
   1e4d0:	add	sp, sp, #32
   1e4d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e4d8:	cmp	r5, #0
   1e4dc:	mov	r4, #1
   1e4e0:	bne	1e450 <__assert_fail@plt+0xd080>
   1e4e4:	b	1e454 <__assert_fail@plt+0xd084>
   1e4e8:	ldr	r3, [sp, #96]	; 0x60
   1e4ec:	mov	r8, #0
   1e4f0:	mov	r4, r7
   1e4f4:	mov	r9, r8
   1e4f8:	str	r3, [sp, #52]	; 0x34
   1e4fc:	ldrb	r3, [r4, #1]!
   1e500:	sub	r2, r3, #35	; 0x23
   1e504:	mov	r6, r3
   1e508:	cmp	r2, #60	; 0x3c
   1e50c:	ldrls	pc, [pc, r2, lsl #2]
   1e510:	b	1e624 <__assert_fail@plt+0xd254>
   1e514:	andeq	lr, r1, ip, lsl r6
   1e518:	andeq	lr, r1, r4, lsr #12
   1e51c:	andeq	lr, r1, r4, lsr #12
   1e520:	andeq	lr, r1, r4, lsr #12
   1e524:	andeq	lr, r1, r4, lsr #12
   1e528:	andeq	lr, r1, r4, lsr #12
   1e52c:	andeq	lr, r1, r4, lsr #12
   1e530:	andeq	lr, r1, r4, lsr #12
   1e534:	andeq	lr, r1, r4, lsl r6
   1e538:	andeq	lr, r1, r4, lsr #12
   1e53c:	andeq	lr, r1, r4, lsl r6
   1e540:	andeq	lr, r1, r4, lsr #12
   1e544:	andeq	lr, r1, r4, lsr #12
   1e548:	andeq	lr, r1, r4, lsl r6
   1e54c:	andeq	lr, r1, r4, lsr #12
   1e550:	andeq	lr, r1, r4, lsr #12
   1e554:	andeq	lr, r1, r4, lsr #12
   1e558:	andeq	lr, r1, r4, lsr #12
   1e55c:	andeq	lr, r1, r4, lsr #12
   1e560:	andeq	lr, r1, r4, lsr #12
   1e564:	andeq	lr, r1, r4, lsr #12
   1e568:	andeq	lr, r1, r4, lsr #12
   1e56c:	andeq	lr, r1, r4, lsr #12
   1e570:	andeq	lr, r1, r4, lsr #12
   1e574:	andeq	lr, r1, r4, lsr #12
   1e578:	andeq	lr, r1, r4, lsr #12
   1e57c:	andeq	lr, r1, r4, lsr #12
   1e580:	andeq	lr, r1, r4, lsr #12
   1e584:	andeq	lr, r1, r4, lsr #12
   1e588:	andeq	lr, r1, r4, lsr #12
   1e58c:	andeq	lr, r1, r4, lsr #12
   1e590:	andeq	lr, r1, r4, lsr #12
   1e594:	andeq	lr, r1, r4, lsr #12
   1e598:	andeq	lr, r1, r4, lsr #12
   1e59c:	andeq	lr, r1, r4, lsr #12
   1e5a0:	andeq	lr, r1, r4, lsr #12
   1e5a4:	andeq	lr, r1, r4, lsr #12
   1e5a8:	andeq	lr, r1, r4, lsr #12
   1e5ac:	andeq	lr, r1, r4, lsr #12
   1e5b0:	andeq	lr, r1, r4, lsr #12
   1e5b4:	andeq	lr, r1, r4, lsr #12
   1e5b8:	andeq	lr, r1, r4, lsr #12
   1e5bc:	andeq	lr, r1, r4, lsr #12
   1e5c0:	andeq	lr, r1, r4, lsr #12
   1e5c4:	andeq	lr, r1, r4, lsr #12
   1e5c8:	andeq	lr, r1, r4, lsr #12
   1e5cc:	andeq	lr, r1, r4, lsr #12
   1e5d0:	andeq	lr, r1, r4, lsr #12
   1e5d4:	andeq	lr, r1, r4, lsr #12
   1e5d8:	andeq	lr, r1, r4, lsr #12
   1e5dc:	andeq	lr, r1, r4, lsr #12
   1e5e0:	andeq	lr, r1, r4, lsr #12
   1e5e4:	andeq	lr, r1, r4, lsr #12
   1e5e8:	andeq	lr, r1, r4, lsr #12
   1e5ec:	andeq	lr, r1, r4, lsr #12
   1e5f0:	andeq	lr, r1, r4, lsr #12
   1e5f4:	andeq	lr, r1, r4, lsr #12
   1e5f8:	andeq	lr, r1, r4, lsr #12
   1e5fc:	andeq	lr, r1, r4, lsr #12
   1e600:	andeq	lr, r1, r8, lsl #12
   1e604:	andeq	lr, r1, r4, lsl r6
   1e608:	mov	r3, #1
   1e60c:	str	r3, [sp, #52]	; 0x34
   1e610:	b	1e4fc <__assert_fail@plt+0xd12c>
   1e614:	mov	r9, r3
   1e618:	b	1e4fc <__assert_fail@plt+0xd12c>
   1e61c:	mov	r8, #1
   1e620:	b	1e4fc <__assert_fail@plt+0xd12c>
   1e624:	sub	r2, r3, #48	; 0x30
   1e628:	cmp	r2, #9
   1e62c:	bls	1e92c <__assert_fail@plt+0xd55c>
   1e630:	cmp	r3, #69	; 0x45
   1e634:	beq	1e900 <__assert_fail@plt+0xd530>
   1e638:	cmp	r3, #79	; 0x4f
   1e63c:	movne	r6, #0
   1e640:	movne	lr, r6
   1e644:	beq	1e900 <__assert_fail@plt+0xd530>
   1e648:	cmp	r3, #122	; 0x7a
   1e64c:	ldrls	pc, [pc, r3, lsl #2]
   1e650:	b	1e844 <__assert_fail@plt+0xd474>
   1e654:	andeq	lr, r1, r0, asr #16
   1e658:	andeq	lr, r1, r4, asr #16
   1e65c:	andeq	lr, r1, r4, asr #16
   1e660:	andeq	lr, r1, r4, asr #16
   1e664:	andeq	lr, r1, r4, asr #16
   1e668:	andeq	lr, r1, r4, asr #16
   1e66c:	andeq	lr, r1, r4, asr #16
   1e670:	andeq	lr, r1, r4, asr #16
   1e674:	andeq	lr, r1, r4, asr #16
   1e678:	andeq	lr, r1, r4, asr #16
   1e67c:	andeq	lr, r1, r4, asr #16
   1e680:	andeq	lr, r1, r4, asr #16
   1e684:	andeq	lr, r1, r4, asr #16
   1e688:	andeq	lr, r1, r4, asr #16
   1e68c:	andeq	lr, r1, r4, asr #16
   1e690:	andeq	lr, r1, r4, asr #16
   1e694:	andeq	lr, r1, r4, asr #16
   1e698:	andeq	lr, r1, r4, asr #16
   1e69c:	andeq	lr, r1, r4, asr #16
   1e6a0:	andeq	lr, r1, r4, asr #16
   1e6a4:	andeq	lr, r1, r4, asr #16
   1e6a8:	andeq	lr, r1, r4, asr #16
   1e6ac:	andeq	lr, r1, r4, asr #16
   1e6b0:	andeq	lr, r1, r4, asr #16
   1e6b4:	andeq	lr, r1, r4, asr #16
   1e6b8:	andeq	lr, r1, r4, asr #16
   1e6bc:	andeq	lr, r1, r4, asr #16
   1e6c0:	andeq	lr, r1, r4, asr #16
   1e6c4:	andeq	lr, r1, r4, asr #16
   1e6c8:	andeq	lr, r1, r4, asr #16
   1e6cc:	andeq	lr, r1, r4, asr #16
   1e6d0:	andeq	lr, r1, r4, asr #16
   1e6d4:	andeq	lr, r1, r4, asr #16
   1e6d8:	andeq	lr, r1, r4, asr #16
   1e6dc:	andeq	lr, r1, r4, asr #16
   1e6e0:	andeq	lr, r1, r4, asr #16
   1e6e4:	andeq	lr, r1, r4, asr #16
   1e6e8:	andeq	pc, r1, ip, asr #5
   1e6ec:	andeq	lr, r1, r4, asr #16
   1e6f0:	andeq	lr, r1, r4, asr #16
   1e6f4:	andeq	lr, r1, r4, asr #16
   1e6f8:	andeq	lr, r1, r4, asr #16
   1e6fc:	andeq	lr, r1, r4, asr #16
   1e700:	andeq	lr, r1, r4, asr #16
   1e704:	andeq	lr, r1, r4, asr #16
   1e708:	andeq	lr, r1, r4, asr #16
   1e70c:	andeq	lr, r1, r4, asr #16
   1e710:	andeq	lr, r1, r4, asr #16
   1e714:	andeq	lr, r1, r4, asr #16
   1e718:	andeq	lr, r1, r4, asr #16
   1e71c:	andeq	lr, r1, r4, asr #16
   1e720:	andeq	lr, r1, r4, asr #16
   1e724:	andeq	lr, r1, r4, asr #16
   1e728:	andeq	lr, r1, r4, asr #16
   1e72c:	andeq	lr, r1, r4, asr #16
   1e730:	andeq	lr, r1, r4, asr #16
   1e734:	andeq	lr, r1, r4, asr #16
   1e738:	andeq	lr, r1, r4, asr #16
   1e73c:			; <UNDEFINED> instruction: 0x0001f8b0
   1e740:	andeq	lr, r1, r4, asr #16
   1e744:	andeq	lr, r1, r4, asr #16
   1e748:	andeq	lr, r1, r4, asr #16
   1e74c:	andeq	lr, r1, r4, asr #16
   1e750:	andeq	lr, r1, r4, asr #16
   1e754:	andeq	lr, r1, r4, asr #16
   1e758:	andeq	lr, r1, r8, ror sl
   1e75c:			; <UNDEFINED> instruction: 0x0001ebb4
   1e760:	andeq	pc, r1, ip, lsl #11
   1e764:	andeq	pc, r1, r4, lsr r8	; <UNPREDICTABLE>
   1e768:	andeq	lr, r1, r4, asr #16
   1e76c:	andeq	pc, r1, r0, ror #16
   1e770:	andeq	pc, r1, r0, asr r6	; <UNPREDICTABLE>
   1e774:	andeq	pc, r1, r4, ror #15
   1e778:	andeq	pc, r1, r0, lsl #16
   1e77c:	andeq	lr, r1, r4, asr #16
   1e780:	andeq	lr, r1, r4, asr #16
   1e784:	andeq	lr, r1, r4, asr #16
   1e788:	andeq	pc, r1, r8, lsl r8	; <UNPREDICTABLE>
   1e78c:	andeq	pc, r1, r0, lsr #3
   1e790:	andeq	lr, r1, r4, asr #16
   1e794:	ldrdeq	pc, [r1], -r8
   1e798:	andeq	lr, r1, r4, asr #16
   1e79c:	andeq	pc, r1, r4, lsr #17
   1e7a0:	strdeq	lr, [r1], -r8
   1e7a4:	andeq	pc, r1, r4, lsl r0	; <UNPREDICTABLE>
   1e7a8:	andeq	pc, r1, r8, lsl #2
   1e7ac:	andeq	pc, r1, r0, asr r6	; <UNPREDICTABLE>
   1e7b0:	andeq	pc, r1, r4, asr #2
   1e7b4:	andeq	lr, r1, ip, ror #18
   1e7b8:	andeq	pc, r1, r0, lsr #10
   1e7bc:	andeq	lr, r1, r4, asr #24
   1e7c0:	andeq	lr, r1, r4, asr #16
   1e7c4:	andeq	lr, r1, r4, asr #16
   1e7c8:	andeq	lr, r1, r4, asr #16
   1e7cc:	andeq	lr, r1, r4, asr #16
   1e7d0:	andeq	lr, r1, r4, asr #16
   1e7d4:	andeq	lr, r1, r4, asr #16
   1e7d8:	andeq	lr, r1, r8, ror sl
   1e7dc:	andeq	pc, r1, r4, lsl #9
   1e7e0:	andeq	lr, r1, ip, ror #18
   1e7e4:	andeq	lr, r1, r4, ror #27
   1e7e8:	ldrdeq	lr, [r1], -r4
   1e7ec:	andeq	lr, r1, r4, asr #16
   1e7f0:	andeq	pc, r1, r0, asr r6	; <UNPREDICTABLE>
   1e7f4:	andeq	pc, r1, r4, lsl #9
   1e7f8:	andeq	lr, r1, r4, asr #16
   1e7fc:	andeq	pc, r1, r0, lsr #12
   1e800:	andeq	pc, r1, ip, lsr r6	; <UNPREDICTABLE>
   1e804:	andeq	pc, r1, r8, lsr #7
   1e808:			; <UNDEFINED> instruction: 0x0001f3b8
   1e80c:	strdeq	pc, [r1], -r8
   1e810:	andeq	lr, r1, r4, asr #16
   1e814:	andeq	pc, r1, r4, ror #8
   1e818:	andeq	lr, r1, r8, lsl #23
   1e81c:	andeq	lr, r1, r4, ror r9
   1e820:	andeq	lr, r1, r8, lsr #21
   1e824:	ldrdeq	lr, [r1], -r4
   1e828:	andeq	pc, r1, r0, asr r3	; <UNPREDICTABLE>
   1e82c:	andeq	lr, r1, r4, asr #16
   1e830:	andeq	pc, r1, ip, lsl #7
   1e834:	andeq	lr, r1, ip, ror #18
   1e838:	andeq	pc, r1, r0, lsr #9
   1e83c:	andeq	lr, r1, r0, lsr #26
   1e840:	sub	r4, r4, #1
   1e844:	ldr	r3, [sp, #48]	; 0x30
   1e848:	sub	r3, r3, sl
   1e84c:	str	r3, [sp, #84]	; 0x54
   1e850:	mvn	r3, fp
   1e854:	cmp	r9, #45	; 0x2d
   1e858:	lsr	r3, r3, #31
   1e85c:	sub	r6, r4, r7
   1e860:	moveq	r3, #0
   1e864:	add	r6, r6, #1
   1e868:	cmp	r3, #0
   1e86c:	moveq	fp, r3
   1e870:	moveq	r8, r6
   1e874:	beq	1e884 <__assert_fail@plt+0xd4b4>
   1e878:	cmp	r6, fp
   1e87c:	movcs	r8, r6
   1e880:	movcc	r8, fp
   1e884:	ldr	r3, [sp, #84]	; 0x54
   1e888:	cmp	r8, r3
   1e88c:	bcs	1e4a4 <__assert_fail@plt+0xd0d4>
   1e890:	cmp	r5, #0
   1e894:	beq	1e924 <__assert_fail@plt+0xd554>
   1e898:	cmp	r6, fp
   1e89c:	bcs	1e8c4 <__assert_fail@plt+0xd4f4>
   1e8a0:	cmp	r9, #43	; 0x2b
   1e8a4:	cmpne	r9, #48	; 0x30
   1e8a8:	sub	r2, fp, r6
   1e8ac:	mov	r0, r5
   1e8b0:	add	r3, r5, r2
   1e8b4:	moveq	r1, #48	; 0x30
   1e8b8:	movne	r1, #32
   1e8bc:	mov	r5, r3
   1e8c0:	bl	112c8 <memset@plt>
   1e8c4:	ldr	r3, [sp, #52]	; 0x34
   1e8c8:	cmp	r3, #0
   1e8cc:	beq	1e910 <__assert_fail@plt+0xd540>
   1e8d0:	cmp	r6, #0
   1e8d4:	beq	1e920 <__assert_fail@plt+0xd550>
   1e8d8:	bl	11238 <__ctype_toupper_loc@plt>
   1e8dc:	add	r3, r7, r6
   1e8e0:	add	r2, r5, r6
   1e8e4:	ldrb	ip, [r3, #-1]!
   1e8e8:	ldr	r1, [r0]
   1e8ec:	cmp	r7, r3
   1e8f0:	ldr	r1, [r1, ip, lsl #2]
   1e8f4:	strb	r1, [r2, #-1]!
   1e8f8:	bne	1e8e4 <__assert_fail@plt+0xd514>
   1e8fc:	b	1e920 <__assert_fail@plt+0xd550>
   1e900:	mov	lr, r3
   1e904:	add	r4, r4, #1
   1e908:	ldrb	r3, [r4]
   1e90c:	b	1e648 <__assert_fail@plt+0xd278>
   1e910:	mov	r1, r7
   1e914:	mov	r2, r6
   1e918:	mov	r0, r5
   1e91c:	bl	110f4 <memcpy@plt>
   1e920:	add	r5, r5, r6
   1e924:	add	sl, sl, r8
   1e928:	b	1e45c <__assert_fail@plt+0xd08c>
   1e92c:	mov	fp, #0
   1e930:	mov	r1, #10
   1e934:	smull	r2, r3, fp, r1
   1e938:	mvn	fp, #-2147483648	; 0x80000000
   1e93c:	cmp	r3, r2, asr #31
   1e940:	bne	1e954 <__assert_fail@plt+0xd584>
   1e944:	ldrb	r3, [r4]
   1e948:	sub	fp, r3, #48	; 0x30
   1e94c:	adds	fp, r2, fp
   1e950:	mvnvs	fp, #-2147483648	; 0x80000000
   1e954:	ldrb	r3, [r4, #1]!
   1e958:	sub	r2, r3, #48	; 0x30
   1e95c:	cmp	r2, #9
   1e960:	bls	1e934 <__assert_fail@plt+0xd564>
   1e964:	mov	r6, r3
   1e968:	b	1e630 <__assert_fail@plt+0xd260>
   1e96c:	cmp	r6, #79	; 0x4f
   1e970:	beq	1e844 <__assert_fail@plt+0xd474>
   1e974:	mov	r7, #0
   1e978:	add	r2, sp, #152	; 0x98
   1e97c:	movw	r1, #9504	; 0x2520
   1e980:	cmp	r6, #0
   1e984:	strh	r1, [r2]
   1e988:	addeq	r1, r2, #2
   1e98c:	bne	1eba8 <__assert_fail@plt+0xd7d8>
   1e990:	mov	ip, #0
   1e994:	add	r6, sp, #168	; 0xa8
   1e998:	strb	r3, [r1]
   1e99c:	mov	r0, r6
   1e9a0:	ldr	r3, [sp, #100]	; 0x64
   1e9a4:	strb	ip, [r1, #1]
   1e9a8:	mov	r1, #1024	; 0x400
   1e9ac:	bl	111fc <strftime@plt>
   1e9b0:	cmp	r0, #0
   1e9b4:	beq	1e45c <__assert_fail@plt+0xd08c>
   1e9b8:	mvn	r3, fp
   1e9bc:	cmp	r9, #45	; 0x2d
   1e9c0:	lsr	r3, r3, #31
   1e9c4:	moveq	r3, #0
   1e9c8:	sub	r8, r0, #1
   1e9cc:	cmp	r3, #0
   1e9d0:	moveq	fp, r8
   1e9d4:	beq	1e9e8 <__assert_fail@plt+0xd618>
   1e9d8:	mov	r3, fp
   1e9dc:	cmp	r8, fp
   1e9e0:	movcs	fp, r8
   1e9e4:	movcc	fp, r3
   1e9e8:	ldr	r2, [sp, #48]	; 0x30
   1e9ec:	sub	r2, r2, sl
   1e9f0:	cmp	r2, fp
   1e9f4:	bls	1e4a4 <__assert_fail@plt+0xd0d4>
   1e9f8:	cmp	r5, #0
   1e9fc:	beq	1ea70 <__assert_fail@plt+0xd6a0>
   1ea00:	cmp	r8, r3
   1ea04:	bcs	1ea2c <__assert_fail@plt+0xd65c>
   1ea08:	cmp	r9, #43	; 0x2b
   1ea0c:	cmpne	r9, #48	; 0x30
   1ea10:	sub	r2, r3, r8
   1ea14:	mov	r0, r5
   1ea18:	add	r3, r5, r2
   1ea1c:	moveq	r1, #48	; 0x30
   1ea20:	movne	r1, #32
   1ea24:	mov	r5, r3
   1ea28:	bl	112c8 <memset@plt>
   1ea2c:	cmp	r7, #0
   1ea30:	bne	1fa18 <__assert_fail@plt+0xe648>
   1ea34:	ldr	r3, [sp, #52]	; 0x34
   1ea38:	cmp	r3, #0
   1ea3c:	beq	1fa00 <__assert_fail@plt+0xe630>
   1ea40:	cmp	r8, #0
   1ea44:	beq	1ea70 <__assert_fail@plt+0xd6a0>
   1ea48:	add	r5, r5, r8
   1ea4c:	add	r8, r6, r8
   1ea50:	bl	11238 <__ctype_toupper_loc@plt>
   1ea54:	mov	r3, r5
   1ea58:	ldrb	r1, [r8], #-1
   1ea5c:	ldr	r2, [r0]
   1ea60:	cmp	r6, r8
   1ea64:	ldr	r2, [r2, r1, lsl #2]
   1ea68:	strb	r2, [r3, #-1]!
   1ea6c:	bne	1ea58 <__assert_fail@plt+0xd688>
   1ea70:	add	sl, sl, fp
   1ea74:	b	1e45c <__assert_fail@plt+0xd08c>
   1ea78:	cmp	r6, #0
   1ea7c:	bne	1e844 <__assert_fail@plt+0xd474>
   1ea80:	ldr	r2, [sp, #52]	; 0x34
   1ea84:	cmp	r8, #0
   1ea88:	movw	r0, #9504	; 0x2520
   1ea8c:	movne	r2, r8
   1ea90:	mov	r7, #0
   1ea94:	str	r2, [sp, #52]	; 0x34
   1ea98:	add	r2, sp, #152	; 0x98
   1ea9c:	mov	r1, r2
   1eaa0:	strh	r0, [r1], #2
   1eaa4:	b	1e990 <__assert_fail@plt+0xd5c0>
   1eaa8:	ldr	lr, [sp, #100]	; 0x64
   1eaac:	mvn	ip, #0
   1eab0:	add	r1, sp, #168	; 0xa8
   1eab4:	ldr	r0, [sp, #1248]	; 0x4e0
   1eab8:	ldrd	r6, [lr]
   1eabc:	ldrd	r2, [lr, #24]
   1eac0:	strd	r6, [sp, #168]	; 0xa8
   1eac4:	ldrd	r6, [lr, #8]
   1eac8:	strd	r2, [sp, #192]	; 0xc0
   1eacc:	ldr	r3, [lr, #40]	; 0x28
   1ead0:	strd	r6, [sp, #176]	; 0xb0
   1ead4:	ldrd	r6, [lr, #32]
   1ead8:	str	ip, [sp, #196]	; 0xc4
   1eadc:	str	r3, [sp, #208]	; 0xd0
   1eae0:	ldrd	r2, [lr, #16]
   1eae4:	strd	r2, [sp, #184]	; 0xb8
   1eae8:	strd	r6, [sp, #200]	; 0xc8
   1eaec:	bl	1ce08 <__assert_fail@plt+0xba38>
   1eaf0:	ldr	r3, [sp, #196]	; 0xc4
   1eaf4:	cmp	r3, #0
   1eaf8:	blt	20160 <__assert_fail@plt+0xed90>
   1eafc:	lsr	r3, r0, #31
   1eb00:	add	r2, sp, #152	; 0x98
   1eb04:	cmp	r0, #0
   1eb08:	add	r6, r2, #14
   1eb0c:	str	r3, [sp, #84]	; 0x54
   1eb10:	blt	1eb54 <__assert_fail@plt+0xd784>
   1eb14:	movw	r3, #26215	; 0x6667
   1eb18:	movt	r3, #26214	; 0x6666
   1eb1c:	asr	ip, r0, #31
   1eb20:	smull	r3, r1, r3, r0
   1eb24:	asr	r1, r1, #2
   1eb28:	sub	r3, r1, ip
   1eb2c:	add	r3, r3, r3, lsl #2
   1eb30:	sub	r3, r0, r3, lsl #1
   1eb34:	subs	r0, r1, ip
   1eb38:	add	r3, r3, #48	; 0x30
   1eb3c:	strb	r3, [r6, #-1]!
   1eb40:	bne	1eb14 <__assert_fail@plt+0xd744>
   1eb44:	mov	r0, #1
   1eb48:	mov	r1, #0
   1eb4c:	strd	r0, [sp, #140]	; 0x8c
   1eb50:	b	1eed8 <__assert_fail@plt+0xdb08>
   1eb54:	movw	r3, #26215	; 0x6667
   1eb58:	movt	r3, #26214	; 0x6666
   1eb5c:	asr	ip, r0, #31
   1eb60:	smull	r3, r1, r3, r0
   1eb64:	asr	r1, r1, #2
   1eb68:	sub	r3, r1, ip
   1eb6c:	add	r3, r3, r3, lsl #2
   1eb70:	sub	r3, r0, r3, lsl #1
   1eb74:	subs	r0, r1, ip
   1eb78:	rsb	r3, r3, #48	; 0x30
   1eb7c:	strb	r3, [r6, #-1]!
   1eb80:	bne	1eb54 <__assert_fail@plt+0xd784>
   1eb84:	b	1eb44 <__assert_fail@plt+0xd774>
   1eb88:	ldr	r2, [sp, #100]	; 0x64
   1eb8c:	cmp	r6, #79	; 0x4f
   1eb90:	ldr	r2, [r2, #16]
   1eb94:	bne	1fb68 <__assert_fail@plt+0xe798>
   1eb98:	add	r2, sp, #152	; 0x98
   1eb9c:	movw	r1, #9504	; 0x2520
   1eba0:	mov	r7, #0
   1eba4:	strh	r1, [r2]
   1eba8:	add	r1, r2, #3
   1ebac:	strb	lr, [sp, #154]	; 0x9a
   1ebb0:	b	1e990 <__assert_fail@plt+0xd5c0>
   1ebb4:	cmp	r6, #69	; 0x45
   1ebb8:	beq	1e844 <__assert_fail@plt+0xd474>
   1ebbc:	ldr	r2, [sp, #52]	; 0x34
   1ebc0:	cmp	r8, #0
   1ebc4:	mov	r7, #0
   1ebc8:	movne	r2, r8
   1ebcc:	str	r2, [sp, #52]	; 0x34
   1ebd0:	b	1e978 <__assert_fail@plt+0xd5a8>
   1ebd4:	ldr	r3, [sp, #48]	; 0x30
   1ebd8:	cmp	r9, #45	; 0x2d
   1ebdc:	sub	r3, r3, sl
   1ebe0:	beq	1fa94 <__assert_fail@plt+0xe6c4>
   1ebe4:	cmp	fp, #0
   1ebe8:	blt	1fa94 <__assert_fail@plt+0xe6c4>
   1ebec:	cmp	fp, #1
   1ebf0:	movcs	r6, fp
   1ebf4:	movcc	r6, #1
   1ebf8:	cmp	r6, r3
   1ebfc:	bcs	1e4a4 <__assert_fail@plt+0xd0d4>
   1ec00:	cmp	r5, #0
   1ec04:	beq	1ec3c <__assert_fail@plt+0xd86c>
   1ec08:	cmp	fp, #1
   1ec0c:	ble	1ec34 <__assert_fail@plt+0xd864>
   1ec10:	cmp	r9, #43	; 0x2b
   1ec14:	cmpne	r9, #48	; 0x30
   1ec18:	sub	r2, fp, #1
   1ec1c:	mov	r0, r5
   1ec20:	add	r3, r5, r2
   1ec24:	moveq	r1, #48	; 0x30
   1ec28:	movne	r1, #32
   1ec2c:	mov	r5, r3
   1ec30:	bl	112c8 <memset@plt>
   1ec34:	mov	r3, #9
   1ec38:	strb	r3, [r5], #1
   1ec3c:	add	sl, sl, r6
   1ec40:	b	1e45c <__assert_fail@plt+0xd08c>
   1ec44:	ldr	r3, [sp, #52]	; 0x34
   1ec48:	cmp	r8, #0
   1ec4c:	movne	r3, #0
   1ec50:	ldr	r0, [sp, #112]	; 0x70
   1ec54:	str	r3, [sp, #52]	; 0x34
   1ec58:	bl	11274 <strlen@plt>
   1ec5c:	subs	r3, r9, #45	; 0x2d
   1ec60:	mov	r6, r0
   1ec64:	movne	r3, #1
   1ec68:	cmp	fp, #0
   1ec6c:	movlt	r3, #0
   1ec70:	cmp	r3, #0
   1ec74:	moveq	fp, r3
   1ec78:	moveq	r7, r0
   1ec7c:	beq	1ec8c <__assert_fail@plt+0xd8bc>
   1ec80:	cmp	r0, fp
   1ec84:	movcs	r7, r0
   1ec88:	movcc	r7, fp
   1ec8c:	ldr	r3, [sp, #48]	; 0x30
   1ec90:	sub	r3, r3, sl
   1ec94:	cmp	r3, r7
   1ec98:	bls	1e4a4 <__assert_fail@plt+0xd0d4>
   1ec9c:	cmp	r5, #0
   1eca0:	beq	1ed18 <__assert_fail@plt+0xd948>
   1eca4:	cmp	r6, fp
   1eca8:	bcs	1ecd0 <__assert_fail@plt+0xd900>
   1ecac:	cmp	r9, #43	; 0x2b
   1ecb0:	cmpne	r9, #48	; 0x30
   1ecb4:	sub	r2, fp, r6
   1ecb8:	mov	r0, r5
   1ecbc:	add	r3, r5, r2
   1ecc0:	moveq	r1, #48	; 0x30
   1ecc4:	movne	r1, #32
   1ecc8:	mov	r5, r3
   1eccc:	bl	112c8 <memset@plt>
   1ecd0:	cmp	r8, #0
   1ecd4:	bne	2002c <__assert_fail@plt+0xec5c>
   1ecd8:	ldr	r3, [sp, #52]	; 0x34
   1ecdc:	cmp	r3, #0
   1ece0:	beq	20014 <__assert_fail@plt+0xec44>
   1ece4:	cmp	r6, #0
   1ece8:	beq	1ed18 <__assert_fail@plt+0xd948>
   1ecec:	bl	11238 <__ctype_toupper_loc@plt>
   1ecf0:	ldr	ip, [sp, #112]	; 0x70
   1ecf4:	add	r5, r5, r6
   1ecf8:	mov	r3, r5
   1ecfc:	add	r6, ip, r6
   1ed00:	ldrb	r1, [r6, #-1]!
   1ed04:	ldr	r2, [r0]
   1ed08:	cmp	ip, r6
   1ed0c:	ldr	r2, [r2, r1, lsl #2]
   1ed10:	strb	r2, [r3, #-1]!
   1ed14:	bne	1ed00 <__assert_fail@plt+0xd930>
   1ed18:	add	sl, sl, r7
   1ed1c:	b	1e45c <__assert_fail@plt+0xd08c>
   1ed20:	mov	r2, #0
   1ed24:	str	r2, [sp, #140]	; 0x8c
   1ed28:	ldr	r1, [sp, #100]	; 0x64
   1ed2c:	ldr	r2, [r1, #32]
   1ed30:	cmp	r2, #0
   1ed34:	blt	1e45c <__assert_fail@plt+0xd08c>
   1ed38:	ldr	r1, [r1, #36]	; 0x24
   1ed3c:	cmp	r1, #0
   1ed40:	blt	1fc44 <__assert_fail@plt+0xe874>
   1ed44:	bne	1fd3c <__assert_fail@plt+0xe96c>
   1ed48:	ldr	r2, [sp, #112]	; 0x70
   1ed4c:	ldrb	r2, [r2]
   1ed50:	cmp	r2, #45	; 0x2d
   1ed54:	movne	r2, r1
   1ed58:	moveq	r2, #1
   1ed5c:	moveq	r8, r1
   1ed60:	movne	r8, #1
   1ed64:	str	r2, [sp, #84]	; 0x54
   1ed68:	ldr	r0, [sp, #116]	; 0x74
   1ed6c:	movw	ip, #34953	; 0x8889
   1ed70:	movt	ip, #34952	; 0x8888
   1ed74:	smull	r2, r0, r0, r1
   1ed78:	str	r0, [sp, #144]	; 0x90
   1ed7c:	smull	r0, r2, ip, r1
   1ed80:	ldr	r0, [sp, #144]	; 0x90
   1ed84:	add	r2, r2, r1
   1ed88:	str	r2, [sp, #144]	; 0x90
   1ed8c:	asr	r2, r1, #31
   1ed90:	add	r0, r0, r1
   1ed94:	rsb	r0, r2, r0, asr #11
   1ed98:	str	r0, [sp, #148]	; 0x94
   1ed9c:	ldr	r0, [sp, #144]	; 0x90
   1eda0:	rsb	r2, r2, r0, asr #5
   1eda4:	smull	ip, r0, ip, r2
   1eda8:	rsb	ip, r2, r2, lsl #4
   1edac:	sub	ip, r1, ip, lsl #2
   1edb0:	add	r0, r0, r2
   1edb4:	asr	r1, r2, #31
   1edb8:	rsb	r0, r1, r0, asr #5
   1edbc:	rsb	r0, r0, r0, lsl #4
   1edc0:	sub	r0, r2, r0, lsl #2
   1edc4:	ldr	r2, [sp, #140]	; 0x8c
   1edc8:	cmp	r2, #3
   1edcc:	ldrls	pc, [pc, r2, lsl #2]
   1edd0:	b	1e844 <__assert_fail@plt+0xd474>
   1edd4:	andeq	pc, r1, r4, lsr r9	; <UNPREDICTABLE>
   1edd8:	andeq	pc, r1, r0, ror #17
   1eddc:	andeq	pc, r1, r4, lsl #18
   1ede0:	andeq	pc, r1, r4, asr r9	; <UNPREDICTABLE>
   1ede4:	cmp	r6, #69	; 0x45
   1ede8:	beq	1e844 <__assert_fail@plt+0xd474>
   1edec:	mov	r2, #2
   1edf0:	str	r2, [sp, #140]	; 0x8c
   1edf4:	ldr	r2, [sp, #100]	; 0x64
   1edf8:	ldr	r2, [r2, #12]
   1edfc:	mov	r1, r2
   1ee00:	mov	r0, #0
   1ee04:	lsr	r2, r2, #31
   1ee08:	cmp	r1, r0
   1ee0c:	movlt	r8, #0
   1ee10:	movge	r8, #1
   1ee14:	str	r2, [sp, #84]	; 0x54
   1ee18:	str	r0, [sp, #144]	; 0x90
   1ee1c:	cmp	r6, #79	; 0x4f
   1ee20:	movne	r6, #0
   1ee24:	andeq	r6, r8, #1
   1ee28:	cmp	r6, #0
   1ee2c:	bne	1eb98 <__assert_fail@plt+0xd7c8>
   1ee30:	ldr	r3, [sp, #84]	; 0x54
   1ee34:	cmp	r3, #0
   1ee38:	rsbne	r1, r1, #0
   1ee3c:	add	r2, sp, #152	; 0x98
   1ee40:	mov	r7, #58	; 0x3a
   1ee44:	str	r4, [sp, #148]	; 0x94
   1ee48:	add	ip, r2, #14
   1ee4c:	ldr	r4, [sp, #108]	; 0x6c
   1ee50:	b	1ee94 <__assert_fail@plt+0xdac4>
   1ee54:	lsr	r3, r3, #3
   1ee58:	sub	r6, ip, #2
   1ee5c:	strb	r7, [ip, #-1]
   1ee60:	asrs	r0, r0, #1
   1ee64:	add	lr, r3, r3, lsl #2
   1ee68:	movne	r8, #1
   1ee6c:	moveq	r8, #0
   1ee70:	cmp	r1, #9
   1ee74:	orrhi	r8, r8, #1
   1ee78:	sub	r1, r1, lr, lsl #1
   1ee7c:	cmp	r8, #0
   1ee80:	add	r1, r1, #48	; 0x30
   1ee84:	strb	r1, [ip, #-2]
   1ee88:	beq	1eed4 <__assert_fail@plt+0xdb04>
   1ee8c:	mov	ip, r6
   1ee90:	mov	r1, r3
   1ee94:	tst	r0, #1
   1ee98:	umull	lr, r3, r4, r1
   1ee9c:	sub	r6, ip, #1
   1eea0:	bne	1ee54 <__assert_fail@plt+0xda84>
   1eea4:	lsr	r3, r3, #3
   1eea8:	asrs	r0, r0, #1
   1eeac:	add	lr, r3, r3, lsl #2
   1eeb0:	movne	r8, #1
   1eeb4:	moveq	r8, #0
   1eeb8:	cmp	r1, #9
   1eebc:	orrhi	r8, r8, #1
   1eec0:	sub	r1, r1, lr, lsl #1
   1eec4:	cmp	r8, #0
   1eec8:	add	r1, r1, #48	; 0x30
   1eecc:	strb	r1, [ip, #-1]
   1eed0:	bne	1ee8c <__assert_fail@plt+0xdabc>
   1eed4:	ldr	r4, [sp, #148]	; 0x94
   1eed8:	cmp	r9, #0
   1eedc:	moveq	r3, #1
   1eee0:	moveq	r9, #48	; 0x30
   1eee4:	beq	1eef0 <__assert_fail@plt+0xdb20>
   1eee8:	subs	r3, r9, #45	; 0x2d
   1eeec:	movne	r3, #1
   1eef0:	ldr	r1, [sp, #140]	; 0x8c
   1eef4:	cmp	fp, #0
   1eef8:	add	r2, r2, #14
   1eefc:	sub	r7, r2, r6
   1ef00:	movlt	fp, r1
   1ef04:	ldr	r1, [sp, #84]	; 0x54
   1ef08:	cmp	r1, #0
   1ef0c:	bne	1f97c <__assert_fail@plt+0xe5ac>
   1ef10:	ldr	r1, [sp, #144]	; 0x90
   1ef14:	cmp	r1, #0
   1ef18:	bne	1fa58 <__assert_fail@plt+0xe688>
   1ef1c:	sub	r2, fp, r7
   1ef20:	cmp	r2, #0
   1ef24:	movle	r3, #0
   1ef28:	andgt	r3, r3, #1
   1ef2c:	cmp	r3, #0
   1ef30:	bne	1ef44 <__assert_fail@plt+0xdb74>
   1ef34:	cmp	r9, #45	; 0x2d
   1ef38:	moveq	fp, r1
   1ef3c:	moveq	r8, r7
   1ef40:	beq	1ef50 <__assert_fail@plt+0xdb80>
   1ef44:	cmp	fp, r7
   1ef48:	movcs	r8, fp
   1ef4c:	movcc	r8, r7
   1ef50:	ldr	r3, [sp, #48]	; 0x30
   1ef54:	sub	r3, r3, sl
   1ef58:	cmp	r3, r8
   1ef5c:	bls	1e4a4 <__assert_fail@plt+0xd0d4>
   1ef60:	cmp	r5, #0
   1ef64:	beq	1e924 <__assert_fail@plt+0xd554>
   1ef68:	cmp	fp, r7
   1ef6c:	bls	1ef94 <__assert_fail@plt+0xdbc4>
   1ef70:	cmp	r9, #43	; 0x2b
   1ef74:	cmpne	r9, #48	; 0x30
   1ef78:	sub	r2, fp, r7
   1ef7c:	mov	r0, r5
   1ef80:	add	r3, r5, r2
   1ef84:	moveq	r1, #48	; 0x30
   1ef88:	movne	r1, #32
   1ef8c:	mov	r5, r3
   1ef90:	bl	112c8 <memset@plt>
   1ef94:	ldr	r3, [sp, #52]	; 0x34
   1ef98:	cmp	r3, #0
   1ef9c:	beq	1f9e8 <__assert_fail@plt+0xe618>
   1efa0:	cmp	r7, #0
   1efa4:	beq	1e924 <__assert_fail@plt+0xd554>
   1efa8:	add	r5, r5, r7
   1efac:	add	r7, r6, r7
   1efb0:	bl	11238 <__ctype_toupper_loc@plt>
   1efb4:	mov	r3, r5
   1efb8:	ldrb	r1, [r7, #-1]!
   1efbc:	ldr	r2, [r0]
   1efc0:	cmp	r6, r7
   1efc4:	ldr	r2, [r2, r1, lsl #2]
   1efc8:	strb	r2, [r3, #-1]!
   1efcc:	bne	1efb8 <__assert_fail@plt+0xdbe8>
   1efd0:	b	1e924 <__assert_fail@plt+0xd554>
   1efd4:	cmp	r6, #69	; 0x45
   1efd8:	beq	1e844 <__assert_fail@plt+0xd474>
   1efdc:	ldr	r2, [sp, #100]	; 0x64
   1efe0:	ldr	r2, [r2, #12]
   1efe4:	mov	r1, #2
   1efe8:	cmp	r9, #0
   1efec:	moveq	r9, #95	; 0x5f
   1eff0:	str	r1, [sp, #140]	; 0x8c
   1eff4:	b	1edfc <__assert_fail@plt+0xda2c>
   1eff8:	cmp	r6, #69	; 0x45
   1effc:	beq	1e844 <__assert_fail@plt+0xd474>
   1f000:	mov	r2, #2
   1f004:	str	r2, [sp, #140]	; 0x8c
   1f008:	ldr	r2, [sp, #100]	; 0x64
   1f00c:	ldr	r2, [r2]
   1f010:	b	1edfc <__assert_fail@plt+0xda2c>
   1f014:	movw	r8, #12084	; 0x2f34
   1f018:	movt	r8, #2
   1f01c:	ldr	r3, [sp, #48]	; 0x30
   1f020:	sub	r3, r3, sl
   1f024:	str	r3, [sp, #84]	; 0x54
   1f028:	mvn	r3, #0
   1f02c:	mov	ip, r3
   1f030:	str	r3, [sp, #140]	; 0x8c
   1f034:	ldr	r1, [sp, #52]	; 0x34
   1f038:	mov	r2, r8
   1f03c:	mov	r0, #0
   1f040:	ldr	r3, [sp, #100]	; 0x64
   1f044:	stm	sp, {r1, r9, ip}
   1f048:	mvn	r1, #0
   1f04c:	ldr	ip, [sp, #1244]	; 0x4dc
   1f050:	str	ip, [sp, #12]
   1f054:	ldr	ip, [sp, #1248]	; 0x4e0
   1f058:	str	ip, [sp, #16]
   1f05c:	ldr	ip, [sp, #1252]	; 0x4e4
   1f060:	str	ip, [sp, #20]
   1f064:	bl	1e14c <__assert_fail@plt+0xcd7c>
   1f068:	cmp	r9, #45	; 0x2d
   1f06c:	mov	r7, r0
   1f070:	beq	1fa4c <__assert_fail@plt+0xe67c>
   1f074:	cmp	fp, #0
   1f078:	blt	1fa4c <__assert_fail@plt+0xe67c>
   1f07c:	cmp	r0, fp
   1f080:	movcs	r6, r0
   1f084:	movcc	r6, fp
   1f088:	ldr	r3, [sp, #84]	; 0x54
   1f08c:	cmp	r6, r3
   1f090:	bcs	1e4a4 <__assert_fail@plt+0xd0d4>
   1f094:	cmp	r5, #0
   1f098:	beq	1ec3c <__assert_fail@plt+0xd86c>
   1f09c:	cmp	fp, r7
   1f0a0:	bls	1f0c8 <__assert_fail@plt+0xdcf8>
   1f0a4:	cmp	r9, #43	; 0x2b
   1f0a8:	cmpne	r9, #48	; 0x30
   1f0ac:	sub	r2, fp, r7
   1f0b0:	mov	r0, r5
   1f0b4:	add	r3, r5, r2
   1f0b8:	moveq	r1, #48	; 0x30
   1f0bc:	movne	r1, #32
   1f0c0:	mov	r5, r3
   1f0c4:	bl	112c8 <memset@plt>
   1f0c8:	ldr	r3, [sp, #52]	; 0x34
   1f0cc:	mov	r2, r8
   1f0d0:	mov	r0, r5
   1f0d4:	add	r5, r5, r7
   1f0d8:	ldr	r1, [sp, #84]	; 0x54
   1f0dc:	ldr	ip, [sp, #140]	; 0x8c
   1f0e0:	stm	sp, {r3, r9, ip}
   1f0e4:	ldr	r3, [sp, #100]	; 0x64
   1f0e8:	ldr	ip, [sp, #1244]	; 0x4dc
   1f0ec:	str	ip, [sp, #12]
   1f0f0:	ldr	ip, [sp, #1248]	; 0x4e0
   1f0f4:	str	ip, [sp, #16]
   1f0f8:	ldr	ip, [sp, #1252]	; 0x4e4
   1f0fc:	str	ip, [sp, #20]
   1f100:	bl	1e14c <__assert_fail@plt+0xcd7c>
   1f104:	b	1ec3c <__assert_fail@plt+0xd86c>
   1f108:	cmp	r6, #69	; 0x45
   1f10c:	beq	1e844 <__assert_fail@plt+0xd474>
   1f110:	ldr	r1, [sp, #100]	; 0x64
   1f114:	movw	r2, #9363	; 0x2493
   1f118:	movt	r2, #37449	; 0x9249
   1f11c:	mov	ip, #2
   1f120:	str	ip, [sp, #140]	; 0x8c
   1f124:	ldrd	r0, [r1, #24]
   1f128:	sub	r1, r1, r0
   1f12c:	add	r1, r1, #7
   1f130:	smull	r2, r0, r2, r1
   1f134:	asr	r2, r1, #31
   1f138:	add	r1, r0, r1
   1f13c:	rsb	r2, r2, r1, asr ip
   1f140:	b	1edfc <__assert_fail@plt+0xda2c>
   1f144:	cmp	r6, #69	; 0x45
   1f148:	beq	1e844 <__assert_fail@plt+0xd474>
   1f14c:	ldr	r0, [sp, #100]	; 0x64
   1f150:	mov	ip, #2
   1f154:	movw	r1, #9363	; 0x2493
   1f158:	movt	r1, #37449	; 0x9249
   1f15c:	str	ip, [sp, #140]	; 0x8c
   1f160:	ldr	r2, [r0, #24]
   1f164:	ldr	r7, [r0, #28]
   1f168:	add	r2, r2, #6
   1f16c:	asr	r0, r2, #31
   1f170:	smull	r8, ip, r1, r2
   1f174:	add	ip, ip, r2
   1f178:	rsb	r0, r0, ip, asr #2
   1f17c:	rsb	r0, r0, r0, lsl #3
   1f180:	sub	r0, r2, r0
   1f184:	sub	r0, r7, r0
   1f188:	add	r0, r0, #7
   1f18c:	asr	r2, r0, #31
   1f190:	smull	ip, r1, r1, r0
   1f194:	add	r1, r1, r0
   1f198:	rsb	r2, r2, r1, asr #2
   1f19c:	b	1edfc <__assert_fail@plt+0xda2c>
   1f1a0:	ldr	r3, [sp, #48]	; 0x30
   1f1a4:	cmp	r6, #69	; 0x45
   1f1a8:	sub	r3, r3, sl
   1f1ac:	str	r3, [sp, #84]	; 0x54
   1f1b0:	beq	1e850 <__assert_fail@plt+0xd480>
   1f1b4:	cmp	fp, #0
   1f1b8:	ble	1fd4c <__assert_fail@plt+0xe97c>
   1f1bc:	cmp	fp, #8
   1f1c0:	bgt	20190 <__assert_fail@plt+0xedc0>
   1f1c4:	cmp	fp, #7
   1f1c8:	bgt	1fd5c <__assert_fail@plt+0xe98c>
   1f1cc:	beq	1fd70 <__assert_fail@plt+0xe9a0>
   1f1d0:	cmp	fp, #6
   1f1d4:	beq	1fd84 <__assert_fail@plt+0xe9b4>
   1f1d8:	cmp	fp, #5
   1f1dc:	beq	1fd98 <__assert_fail@plt+0xe9c8>
   1f1e0:	cmp	fp, #4
   1f1e4:	beq	1fdac <__assert_fail@plt+0xe9dc>
   1f1e8:	cmp	fp, #3
   1f1ec:	beq	1fdc0 <__assert_fail@plt+0xe9f0>
   1f1f0:	cmp	fp, #1
   1f1f4:	bne	20170 <__assert_fail@plt+0xeda0>
   1f1f8:	ldr	r2, [sp, #92]	; 0x5c
   1f1fc:	mov	r6, #1
   1f200:	ldr	r3, [sp, #124]	; 0x7c
   1f204:	sub	r3, r3, r2, asr #31
   1f208:	add	r3, r3, r3, lsl #2
   1f20c:	sub	r3, r2, r3, lsl r6
   1f210:	add	r3, r3, #48	; 0x30
   1f214:	strb	r3, [sp, #152]	; 0x98
   1f218:	cmp	r9, #0
   1f21c:	ldr	r3, [sp, #84]	; 0x54
   1f220:	bne	1fc70 <__assert_fail@plt+0xe8a0>
   1f224:	cmp	r6, r3
   1f228:	bcs	1e4a4 <__assert_fail@plt+0xd0d4>
   1f22c:	ldr	r3, [sp, #48]	; 0x30
   1f230:	add	sl, sl, r6
   1f234:	cmp	r5, #0
   1f238:	movne	r9, #48	; 0x30
   1f23c:	sub	r7, r3, sl
   1f240:	beq	20128 <__assert_fail@plt+0xed58>
   1f244:	ldr	r3, [sp, #52]	; 0x34
   1f248:	cmp	r3, #0
   1f24c:	beq	20064 <__assert_fail@plt+0xec94>
   1f250:	bl	11238 <__ctype_toupper_loc@plt>
   1f254:	add	r5, r5, r6
   1f258:	add	lr, sp, #152	; 0x98
   1f25c:	mov	r2, r5
   1f260:	add	r3, lr, r6
   1f264:	ldrb	ip, [r3, #-1]!
   1f268:	ldr	r1, [r0]
   1f26c:	cmp	lr, r3
   1f270:	ldr	r1, [r1, ip, lsl #2]
   1f274:	strb	r1, [r2, #-1]!
   1f278:	bne	1f264 <__assert_fail@plt+0xde94>
   1f27c:	cmp	r9, #45	; 0x2d
   1f280:	beq	1fc94 <__assert_fail@plt+0xe8c4>
   1f284:	sub	r2, fp, r6
   1f288:	cmp	r2, r7
   1f28c:	bcs	1e4a4 <__assert_fail@plt+0xd0d4>
   1f290:	cmp	r5, #0
   1f294:	addeq	sl, sl, r2
   1f298:	beq	1e45c <__assert_fail@plt+0xd08c>
   1f29c:	cmp	r2, #0
   1f2a0:	beq	1e45c <__assert_fail@plt+0xd08c>
   1f2a4:	cmp	r9, #43	; 0x2b
   1f2a8:	cmpne	r9, #48	; 0x30
   1f2ac:	add	r3, r5, r2
   1f2b0:	mov	r0, r5
   1f2b4:	moveq	r1, #48	; 0x30
   1f2b8:	movne	r1, #32
   1f2bc:	add	sl, sl, r2
   1f2c0:	mov	r5, r3
   1f2c4:	bl	112c8 <memset@plt>
   1f2c8:	b	1e45c <__assert_fail@plt+0xd08c>
   1f2cc:	ldr	r2, [sp, #48]	; 0x30
   1f2d0:	sub	r3, r4, #1
   1f2d4:	cmp	r3, r7
   1f2d8:	movne	r4, r3
   1f2dc:	sub	r2, r2, sl
   1f2e0:	str	r2, [sp, #84]	; 0x54
   1f2e4:	bne	1e850 <__assert_fail@plt+0xd480>
   1f2e8:	cmp	r9, #45	; 0x2d
   1f2ec:	mov	r3, r2
   1f2f0:	beq	1fca4 <__assert_fail@plt+0xe8d4>
   1f2f4:	cmp	fp, #0
   1f2f8:	blt	1fca4 <__assert_fail@plt+0xe8d4>
   1f2fc:	cmp	fp, #1
   1f300:	movcs	r6, fp
   1f304:	movcc	r6, #1
   1f308:	cmp	r6, r2
   1f30c:	bcs	1e4a4 <__assert_fail@plt+0xd0d4>
   1f310:	cmp	r5, #0
   1f314:	beq	1ec3c <__assert_fail@plt+0xd86c>
   1f318:	cmp	fp, #1
   1f31c:	ble	1f344 <__assert_fail@plt+0xdf74>
   1f320:	cmp	r9, #43	; 0x2b
   1f324:	cmpne	r9, #48	; 0x30
   1f328:	sub	r2, fp, #1
   1f32c:	mov	r0, r5
   1f330:	add	r3, r5, r2
   1f334:	moveq	r1, #48	; 0x30
   1f338:	movne	r1, #32
   1f33c:	mov	r5, r3
   1f340:	bl	112c8 <memset@plt>
   1f344:	ldrb	r3, [r4]
   1f348:	strb	r3, [r5], #1
   1f34c:	b	1ec3c <__assert_fail@plt+0xd86c>
   1f350:	ldr	r2, [sp, #100]	; 0x64
   1f354:	movw	r0, #9363	; 0x2493
   1f358:	movt	r0, #37449	; 0x9249
   1f35c:	mov	r1, #1
   1f360:	str	r1, [sp, #140]	; 0x8c
   1f364:	ldr	r2, [r2, #24]
   1f368:	add	r2, r2, #6
   1f36c:	asr	r1, r2, #31
   1f370:	smull	ip, r0, r0, r2
   1f374:	add	r0, r0, r2
   1f378:	rsb	r1, r1, r0, asr #2
   1f37c:	rsb	r1, r1, r1, lsl #3
   1f380:	sub	r2, r2, r1
   1f384:	add	r2, r2, #1
   1f388:	b	1edfc <__assert_fail@plt+0xda2c>
   1f38c:	cmp	r6, #69	; 0x45
   1f390:	beq	1e844 <__assert_fail@plt+0xd474>
   1f394:	mov	r2, #1
   1f398:	str	r2, [sp, #140]	; 0x8c
   1f39c:	ldr	r2, [sp, #100]	; 0x64
   1f3a0:	ldr	r2, [r2, #24]
   1f3a4:	b	1edfc <__assert_fail@plt+0xda2c>
   1f3a8:	cmp	r6, #69	; 0x45
   1f3ac:	beq	1e844 <__assert_fail@plt+0xd474>
   1f3b0:	ldr	r2, [sp, #80]	; 0x50
   1f3b4:	b	1efe4 <__assert_fail@plt+0xdc14>
   1f3b8:	cmp	r6, #69	; 0x45
   1f3bc:	beq	1e844 <__assert_fail@plt+0xd474>
   1f3c0:	ldr	r2, [sp, #100]	; 0x64
   1f3c4:	mov	r0, #0
   1f3c8:	ldr	r1, [r2, #16]
   1f3cc:	mov	r2, #2
   1f3d0:	cmn	r1, #1
   1f3d4:	str	r2, [sp, #140]	; 0x8c
   1f3d8:	add	r1, r1, #1
   1f3dc:	movlt	r2, #1
   1f3e0:	movge	r2, r0
   1f3e4:	movge	r8, #1
   1f3e8:	movlt	r8, r0
   1f3ec:	str	r2, [sp, #84]	; 0x54
   1f3f0:	str	r0, [sp, #144]	; 0x90
   1f3f4:	b	1ee1c <__assert_fail@plt+0xda4c>
   1f3f8:	ldr	r3, [sp, #48]	; 0x30
   1f3fc:	cmp	r9, #45	; 0x2d
   1f400:	sub	r3, r3, sl
   1f404:	beq	1faac <__assert_fail@plt+0xe6dc>
   1f408:	cmp	fp, #0
   1f40c:	blt	1faac <__assert_fail@plt+0xe6dc>
   1f410:	cmp	fp, #1
   1f414:	movcs	r6, fp
   1f418:	movcc	r6, #1
   1f41c:	cmp	r6, r3
   1f420:	bcs	1e4a4 <__assert_fail@plt+0xd0d4>
   1f424:	cmp	r5, #0
   1f428:	beq	1ec3c <__assert_fail@plt+0xd86c>
   1f42c:	cmp	fp, #1
   1f430:	ble	1f458 <__assert_fail@plt+0xe088>
   1f434:	cmp	r9, #43	; 0x2b
   1f438:	cmpne	r9, #48	; 0x30
   1f43c:	sub	r2, fp, #1
   1f440:	mov	r0, r5
   1f444:	add	r3, r5, r2
   1f448:	moveq	r1, #48	; 0x30
   1f44c:	movne	r1, #32
   1f450:	mov	r5, r3
   1f454:	bl	112c8 <memset@plt>
   1f458:	mov	r3, #10
   1f45c:	strb	r3, [r5], #1
   1f460:	b	1ec3c <__assert_fail@plt+0xd86c>
   1f464:	mov	r7, #0
   1f468:	ldr	r2, [sp, #52]	; 0x34
   1f46c:	cmp	r8, #0
   1f470:	mov	r3, #112	; 0x70
   1f474:	movne	r2, #0
   1f478:	movne	r7, r8
   1f47c:	str	r2, [sp, #52]	; 0x34
   1f480:	b	1e978 <__assert_fail@plt+0xd5a8>
   1f484:	ldr	r2, [sp, #52]	; 0x34
   1f488:	cmp	r8, #0
   1f48c:	movne	r2, r8
   1f490:	cmp	r6, #69	; 0x45
   1f494:	str	r2, [sp, #52]	; 0x34
   1f498:	bne	1e974 <__assert_fail@plt+0xd5a4>
   1f49c:	b	1e844 <__assert_fail@plt+0xd474>
   1f4a0:	cmp	r6, #69	; 0x45
   1f4a4:	beq	1eb98 <__assert_fail@plt+0xd7c8>
   1f4a8:	ldr	r2, [sp, #100]	; 0x64
   1f4ac:	movw	r1, #34079	; 0x851f
   1f4b0:	movt	r1, #20971	; 0x51eb
   1f4b4:	mov	r0, #100	; 0x64
   1f4b8:	ldr	r2, [r2, #20]
   1f4bc:	smull	r1, ip, r1, r2
   1f4c0:	asr	r1, r2, #31
   1f4c4:	rsb	r1, r1, ip, asr #5
   1f4c8:	mls	r1, r0, r1, r2
   1f4cc:	cmp	r1, #0
   1f4d0:	bge	1f4e8 <__assert_fail@plt+0xe118>
   1f4d4:	movw	r0, #63636	; 0xf894
   1f4d8:	movt	r0, #65535	; 0xffff
   1f4dc:	cmp	r2, r0
   1f4e0:	rsblt	r1, r1, #0
   1f4e4:	addge	r1, r1, #100	; 0x64
   1f4e8:	cmp	r9, #0
   1f4ec:	bne	1fb44 <__assert_fail@plt+0xe774>
   1f4f0:	ldr	r2, [sp, #1236]	; 0x4d4
   1f4f4:	cmp	r2, #43	; 0x2b
   1f4f8:	beq	200b8 <__assert_fail@plt+0xece8>
   1f4fc:	mov	r9, r2
   1f500:	mov	r2, #0
   1f504:	mov	r8, #1
   1f508:	str	r2, [sp, #84]	; 0x54
   1f50c:	str	r2, [sp, #144]	; 0x90
   1f510:	mov	r2, #2
   1f514:	str	r2, [sp, #140]	; 0x8c
   1f518:	mov	r0, #0
   1f51c:	b	1ee1c <__assert_fail@plt+0xda4c>
   1f520:	cmp	r6, #69	; 0x45
   1f524:	beq	1eb98 <__assert_fail@plt+0xd7c8>
   1f528:	cmp	r6, #79	; 0x4f
   1f52c:	beq	1e844 <__assert_fail@plt+0xd474>
   1f530:	ldr	r2, [sp, #100]	; 0x64
   1f534:	ldr	r1, [r2, #20]
   1f538:	movw	r2, #63636	; 0xf894
   1f53c:	movt	r2, #65535	; 0xffff
   1f540:	cmp	r1, r2
   1f544:	add	r1, r1, #1888	; 0x760
   1f548:	movlt	r2, #1
   1f54c:	movge	r2, #0
   1f550:	movge	r8, #1
   1f554:	movlt	r8, #0
   1f558:	cmp	r9, #0
   1f55c:	add	r1, r1, #12
   1f560:	str	r2, [sp, #84]	; 0x54
   1f564:	bne	1fad8 <__assert_fail@plt+0xe708>
   1f568:	ldr	r2, [sp, #1236]	; 0x4d4
   1f56c:	cmp	r2, #43	; 0x2b
   1f570:	beq	1faf0 <__assert_fail@plt+0xe720>
   1f574:	mov	r0, r9
   1f578:	mov	r3, #4
   1f57c:	mov	r9, r2
   1f580:	str	r3, [sp, #140]	; 0x8c
   1f584:	str	r0, [sp, #144]	; 0x90
   1f588:	b	1ee30 <__assert_fail@plt+0xda60>
   1f58c:	cmp	r6, #69	; 0x45
   1f590:	beq	1eb98 <__assert_fail@plt+0xd7c8>
   1f594:	ldr	r2, [sp, #100]	; 0x64
   1f598:	movw	r0, #63636	; 0xf894
   1f59c:	movt	r0, #65535	; 0xffff
   1f5a0:	movw	r7, #1899	; 0x76b
   1f5a4:	movw	ip, #34079	; 0x851f
   1f5a8:	movt	ip, #20971	; 0x51eb
   1f5ac:	ldr	r1, [r2, #20]
   1f5b0:	add	r2, r1, #1888	; 0x760
   1f5b4:	cmp	r1, r0
   1f5b8:	add	r2, r2, #12
   1f5bc:	movge	r8, #0
   1f5c0:	movlt	r8, #1
   1f5c4:	cmp	r2, r7
   1f5c8:	mvnls	r2, #98	; 0x62
   1f5cc:	movhi	r2, #0
   1f5d0:	add	r2, r2, r1
   1f5d4:	cmp	r1, r0
   1f5d8:	str	r8, [sp, #84]	; 0x54
   1f5dc:	asr	r0, r2, #31
   1f5e0:	movlt	r8, #0
   1f5e4:	movge	r8, #1
   1f5e8:	smull	r1, r2, ip, r2
   1f5ec:	cmp	r9, #0
   1f5f0:	rsb	r2, r0, r2, asr #5
   1f5f4:	add	r1, r2, #19
   1f5f8:	bne	1fc54 <__assert_fail@plt+0xe884>
   1f5fc:	ldr	r2, [sp, #1236]	; 0x4d4
   1f600:	cmp	r2, #43	; 0x2b
   1f604:	beq	20140 <__assert_fail@plt+0xed70>
   1f608:	mov	r9, r2
   1f60c:	mov	r2, #0
   1f610:	str	r2, [sp, #144]	; 0x90
   1f614:	mov	r2, #2
   1f618:	str	r2, [sp, #140]	; 0x8c
   1f61c:	b	1f518 <__assert_fail@plt+0xe148>
   1f620:	cmp	r6, #69	; 0x45
   1f624:	beq	1e844 <__assert_fail@plt+0xd474>
   1f628:	ldr	r2, [sp, #100]	; 0x64
   1f62c:	mov	r0, #0
   1f630:	ldr	r1, [r2, #28]
   1f634:	mov	r2, #3
   1f638:	b	1f3d0 <__assert_fail@plt+0xe000>
   1f63c:	cmp	r6, #69	; 0x45
   1f640:	beq	1e844 <__assert_fail@plt+0xd474>
   1f644:	ldr	r2, [sp, #100]	; 0x64
   1f648:	ldr	r2, [r2, #8]
   1f64c:	b	1efe4 <__assert_fail@plt+0xdc14>
   1f650:	cmp	r6, #69	; 0x45
   1f654:	beq	1e844 <__assert_fail@plt+0xd474>
   1f658:	ldr	r2, [sp, #100]	; 0x64
   1f65c:	movw	r0, #9363	; 0x2493
   1f660:	movt	r0, #37449	; 0x9249
   1f664:	ldr	r7, [r2, #20]
   1f668:	ldr	r1, [r2, #24]
   1f66c:	ldr	r8, [r2, #28]
   1f670:	cmp	r7, #0
   1f674:	str	r1, [sp, #140]	; 0x8c
   1f678:	sub	r2, r8, r1
   1f67c:	add	r2, r2, #380	; 0x17c
   1f680:	add	r2, r2, #2
   1f684:	asr	r1, r2, #31
   1f688:	smull	ip, r0, r0, r2
   1f68c:	movlt	ip, #300	; 0x12c
   1f690:	mvnge	ip, #99	; 0x63
   1f694:	add	r0, r0, r2
   1f698:	add	ip, r7, ip
   1f69c:	rsb	r1, r1, r0, asr #2
   1f6a0:	rsb	r1, r1, r1, lsl #3
   1f6a4:	sub	r2, r2, r1
   1f6a8:	sub	r2, r8, r2
   1f6ac:	adds	r2, r2, #3
   1f6b0:	str	r2, [sp, #84]	; 0x54
   1f6b4:	bmi	1fb90 <__assert_fail@plt+0xe7c0>
   1f6b8:	tst	ip, #3
   1f6bc:	movwne	r1, #365	; 0x16d
   1f6c0:	bne	1f70c <__assert_fail@plt+0xe33c>
   1f6c4:	movw	r1, #34079	; 0x851f
   1f6c8:	movt	r1, #20971	; 0x51eb
   1f6cc:	asr	r2, ip, #31
   1f6d0:	smull	r0, r1, r1, ip
   1f6d4:	rsb	r2, r2, r1, asr #5
   1f6d8:	mov	r1, #100	; 0x64
   1f6dc:	mls	r2, r1, r2, ip
   1f6e0:	cmp	r2, #0
   1f6e4:	movwne	r1, #366	; 0x16e
   1f6e8:	bne	1f70c <__assert_fail@plt+0xe33c>
   1f6ec:	mov	r0, #400	; 0x190
   1f6f0:	movw	r2, #365	; 0x16d
   1f6f4:	sdiv	r1, ip, r0
   1f6f8:	mls	r1, r0, r1, ip
   1f6fc:	movw	r0, #366	; 0x16e
   1f700:	cmp	r1, #0
   1f704:	movne	r0, r2
   1f708:	mov	r1, r0
   1f70c:	ldr	r2, [sp, #140]	; 0x8c
   1f710:	sub	r1, r8, r1
   1f714:	movw	ip, #9363	; 0x2493
   1f718:	movt	ip, #37449	; 0x9249
   1f71c:	sub	r2, r1, r2
   1f720:	add	r2, r2, #380	; 0x17c
   1f724:	add	r2, r2, #2
   1f728:	asr	r0, r2, #31
   1f72c:	smull	r8, ip, ip, r2
   1f730:	add	ip, ip, r2
   1f734:	rsb	r0, r0, ip, asr #2
   1f738:	rsb	r0, r0, r0, lsl #3
   1f73c:	sub	r0, r2, r0
   1f740:	sub	r0, r1, r0
   1f744:	adds	r0, r0, #3
   1f748:	bmi	2007c <__assert_fail@plt+0xecac>
   1f74c:	mov	r1, #1
   1f750:	movw	r2, #63635	; 0xf893
   1f754:	movt	r2, #65535	; 0xffff
   1f758:	mov	r8, r1
   1f75c:	str	r0, [sp, #84]	; 0x54
   1f760:	str	r2, [sp, #140]	; 0x8c
   1f764:	cmp	r3, #71	; 0x47
   1f768:	beq	1fce8 <__assert_fail@plt+0xe918>
   1f76c:	cmp	r3, #103	; 0x67
   1f770:	bne	1fcbc <__assert_fail@plt+0xe8ec>
   1f774:	movw	r1, #34079	; 0x851f
   1f778:	movt	r1, #20971	; 0x51eb
   1f77c:	asr	r2, r7, #31
   1f780:	smull	r0, ip, r1, r7
   1f784:	rsb	r2, r2, ip, asr #5
   1f788:	mov	ip, #100	; 0x64
   1f78c:	mls	r2, ip, r2, r7
   1f790:	add	r2, r2, r8
   1f794:	asr	ip, r2, #31
   1f798:	smull	r0, r1, r1, r2
   1f79c:	rsb	r1, ip, r1, asr #5
   1f7a0:	mov	ip, #100	; 0x64
   1f7a4:	mls	r1, ip, r1, r2
   1f7a8:	cmp	r1, #0
   1f7ac:	blt	1fb2c <__assert_fail@plt+0xe75c>
   1f7b0:	cmp	r9, #0
   1f7b4:	bne	1fb44 <__assert_fail@plt+0xe774>
   1f7b8:	ldr	r2, [sp, #1236]	; 0x4d4
   1f7bc:	cmp	r2, #43	; 0x2b
   1f7c0:	beq	200b8 <__assert_fail@plt+0xece8>
   1f7c4:	mov	r2, #0
   1f7c8:	mov	r8, #1
   1f7cc:	ldr	r9, [sp, #1236]	; 0x4d4
   1f7d0:	str	r2, [sp, #84]	; 0x54
   1f7d4:	str	r2, [sp, #144]	; 0x90
   1f7d8:	mov	r2, #2
   1f7dc:	str	r2, [sp, #140]	; 0x8c
   1f7e0:	b	1f518 <__assert_fail@plt+0xe148>
   1f7e4:	cmp	r6, #69	; 0x45
   1f7e8:	beq	1e844 <__assert_fail@plt+0xd474>
   1f7ec:	mov	r2, #2
   1f7f0:	str	r2, [sp, #140]	; 0x8c
   1f7f4:	ldr	r2, [sp, #100]	; 0x64
   1f7f8:	ldr	r2, [r2, #8]
   1f7fc:	b	1edfc <__assert_fail@plt+0xda2c>
   1f800:	cmp	r6, #69	; 0x45
   1f804:	beq	1e844 <__assert_fail@plt+0xd474>
   1f808:	mov	r1, #2
   1f80c:	ldr	r2, [sp, #80]	; 0x50
   1f810:	str	r1, [sp, #140]	; 0x8c
   1f814:	b	1edfc <__assert_fail@plt+0xda2c>
   1f818:	cmp	r6, #69	; 0x45
   1f81c:	beq	1e844 <__assert_fail@plt+0xd474>
   1f820:	mov	r2, #2
   1f824:	str	r2, [sp, #140]	; 0x8c
   1f828:	ldr	r2, [sp, #100]	; 0x64
   1f82c:	ldr	r2, [r2, #4]
   1f830:	b	1edfc <__assert_fail@plt+0xda2c>
   1f834:	ldr	r3, [sp, #48]	; 0x30
   1f838:	cmp	r6, #0
   1f83c:	sub	r3, r3, sl
   1f840:	str	r3, [sp, #84]	; 0x54
   1f844:	bne	1e850 <__assert_fail@plt+0xd480>
   1f848:	mvn	r3, #0
   1f84c:	movw	r8, #12116	; 0x2f54
   1f850:	movt	r8, #2
   1f854:	mov	ip, r3
   1f858:	str	r3, [sp, #140]	; 0x8c
   1f85c:	b	1f034 <__assert_fail@plt+0xdc64>
   1f860:	ldr	r3, [sp, #48]	; 0x30
   1f864:	cmp	r6, #0
   1f868:	sub	r3, r3, sl
   1f86c:	str	r3, [sp, #84]	; 0x54
   1f870:	bne	1e850 <__assert_fail@plt+0xd480>
   1f874:	cmp	r9, #0
   1f878:	lsreq	r3, fp, #31
   1f87c:	movne	r3, #0
   1f880:	cmp	r3, #0
   1f884:	bne	200cc <__assert_fail@plt+0xecfc>
   1f888:	sub	r3, fp, #6
   1f88c:	movw	r8, #12096	; 0x2f40
   1f890:	movt	r8, #2
   1f894:	bic	r3, r3, r3, asr #31
   1f898:	mov	ip, r3
   1f89c:	str	r3, [sp, #140]	; 0x8c
   1f8a0:	b	1f034 <__assert_fail@plt+0xdc64>
   1f8a4:	movw	r8, #12108	; 0x2f4c
   1f8a8:	movt	r8, #2
   1f8ac:	b	1f01c <__assert_fail@plt+0xdc4c>
   1f8b0:	ldrb	r2, [r4, #1]
   1f8b4:	add	r1, r4, #1
   1f8b8:	cmp	r2, #58	; 0x3a
   1f8bc:	beq	20094 <__assert_fail@plt+0xecc4>
   1f8c0:	mov	r0, #1
   1f8c4:	str	r0, [sp, #140]	; 0x8c
   1f8c8:	cmp	r2, #122	; 0x7a
   1f8cc:	bne	1e844 <__assert_fail@plt+0xd474>
   1f8d0:	mov	r4, r1
   1f8d4:	b	1ed28 <__assert_fail@plt+0xd958>
   1f8d8:	mov	r7, #1
   1f8dc:	b	1f468 <__assert_fail@plt+0xe098>
   1f8e0:	mov	r2, #1
   1f8e4:	mov	r1, #100	; 0x64
   1f8e8:	str	r2, [sp, #144]	; 0x90
   1f8ec:	mov	r2, #6
   1f8f0:	str	r2, [sp, #140]	; 0x8c
   1f8f4:	ldr	r2, [sp, #148]	; 0x94
   1f8f8:	mla	r1, r1, r2, r0
   1f8fc:	mov	r0, #4
   1f900:	b	1ee1c <__assert_fail@plt+0xda4c>
   1f904:	mov	r1, #100	; 0x64
   1f908:	ldr	r7, [sp, #148]	; 0x94
   1f90c:	movw	r2, #10000	; 0x2710
   1f910:	mul	r1, r1, r0
   1f914:	mov	r0, #1
   1f918:	str	r0, [sp, #144]	; 0x90
   1f91c:	mov	r0, #20
   1f920:	mla	r1, r2, r7, r1
   1f924:	mov	r2, #9
   1f928:	str	r2, [sp, #140]	; 0x8c
   1f92c:	add	r1, r1, ip
   1f930:	b	1ee1c <__assert_fail@plt+0xda4c>
   1f934:	mov	r2, #1
   1f938:	mov	r1, #100	; 0x64
   1f93c:	str	r2, [sp, #144]	; 0x90
   1f940:	mov	r2, #5
   1f944:	str	r2, [sp, #140]	; 0x8c
   1f948:	ldr	r2, [sp, #148]	; 0x94
   1f94c:	mla	r1, r1, r2, r0
   1f950:	b	1f518 <__assert_fail@plt+0xe148>
   1f954:	cmp	ip, #0
   1f958:	bne	1f904 <__assert_fail@plt+0xe534>
   1f95c:	cmp	r0, #0
   1f960:	bne	1f8e0 <__assert_fail@plt+0xe510>
   1f964:	mov	r2, #1
   1f968:	ldr	r1, [sp, #148]	; 0x94
   1f96c:	str	r2, [sp, #144]	; 0x90
   1f970:	mov	r2, #3
   1f974:	str	r2, [sp, #140]	; 0x8c
   1f978:	b	1ee1c <__assert_fail@plt+0xda4c>
   1f97c:	mov	r8, #45	; 0x2d
   1f980:	sub	r2, fp, #1
   1f984:	sub	r2, r2, r7
   1f988:	cmp	r2, #0
   1f98c:	movle	r3, #0
   1f990:	andgt	r3, r3, #1
   1f994:	cmp	r3, #0
   1f998:	moveq	r2, #0
   1f99c:	cmp	r9, #95	; 0x5f
   1f9a0:	beq	1fa60 <__assert_fail@plt+0xe690>
   1f9a4:	ldr	r3, [sp, #48]	; 0x30
   1f9a8:	sub	r3, r3, sl
   1f9ac:	cmp	r3, #1
   1f9b0:	bls	1e4a4 <__assert_fail@plt+0xd0d4>
   1f9b4:	cmp	r5, #0
   1f9b8:	add	sl, sl, #1
   1f9bc:	strbne	r8, [r5], #1
   1f9c0:	cmp	r9, #45	; 0x2d
   1f9c4:	beq	1f9d4 <__assert_fail@plt+0xe604>
   1f9c8:	sub	fp, fp, #1
   1f9cc:	cmp	fp, #0
   1f9d0:	bge	1ef44 <__assert_fail@plt+0xdb74>
   1f9d4:	mov	r8, r7
   1f9d8:	mov	fp, #0
   1f9dc:	b	1ef50 <__assert_fail@plt+0xdb80>
   1f9e0:	mov	sl, r1
   1f9e4:	b	1e474 <__assert_fail@plt+0xd0a4>
   1f9e8:	mov	r0, r5
   1f9ec:	mov	r1, r6
   1f9f0:	mov	r2, r7
   1f9f4:	add	r5, r5, r7
   1f9f8:	bl	110f4 <memcpy@plt>
   1f9fc:	b	1e924 <__assert_fail@plt+0xd554>
   1fa00:	mov	r0, r5
   1fa04:	add	r1, r6, #1
   1fa08:	mov	r2, r8
   1fa0c:	add	r5, r5, r8
   1fa10:	bl	110f4 <memcpy@plt>
   1fa14:	b	1ea70 <__assert_fail@plt+0xd6a0>
   1fa18:	cmp	r8, #0
   1fa1c:	beq	1ea70 <__assert_fail@plt+0xd6a0>
   1fa20:	add	r5, r5, r8
   1fa24:	add	r8, r6, r8
   1fa28:	bl	1122c <__ctype_tolower_loc@plt>
   1fa2c:	mov	r3, r5
   1fa30:	ldrb	r1, [r8], #-1
   1fa34:	ldr	r2, [r0]
   1fa38:	cmp	r8, r6
   1fa3c:	ldr	r2, [r2, r1, lsl #2]
   1fa40:	strb	r2, [r3, #-1]!
   1fa44:	bne	1fa30 <__assert_fail@plt+0xe660>
   1fa48:	b	1ea70 <__assert_fail@plt+0xd6a0>
   1fa4c:	mov	r6, r7
   1fa50:	mov	fp, #0
   1fa54:	b	1f088 <__assert_fail@plt+0xdcb8>
   1fa58:	mov	r8, #43	; 0x2b
   1fa5c:	b	1f980 <__assert_fail@plt+0xe5b0>
   1fa60:	ldr	r3, [sp, #48]	; 0x30
   1fa64:	add	sl, sl, r2
   1fa68:	cmp	r5, #0
   1fa6c:	sub	fp, fp, r2
   1fa70:	sub	r3, r3, sl
   1fa74:	beq	1fac4 <__assert_fail@plt+0xe6f4>
   1fa78:	mov	r0, r5
   1fa7c:	mov	r1, #32
   1fa80:	str	r3, [sp, #84]	; 0x54
   1fa84:	add	r5, r5, r2
   1fa88:	bl	112c8 <memset@plt>
   1fa8c:	ldr	r3, [sp, #84]	; 0x54
   1fa90:	b	1f9ac <__assert_fail@plt+0xe5dc>
   1fa94:	cmp	r3, #1
   1fa98:	bls	1e4a4 <__assert_fail@plt+0xd0d4>
   1fa9c:	cmp	r5, #0
   1faa0:	mov	r6, #1
   1faa4:	bne	1ec34 <__assert_fail@plt+0xd864>
   1faa8:	b	1ec3c <__assert_fail@plt+0xd86c>
   1faac:	cmp	r3, #1
   1fab0:	bls	1e4a4 <__assert_fail@plt+0xd0d4>
   1fab4:	cmp	r5, #0
   1fab8:	mov	r6, #1
   1fabc:	bne	1f458 <__assert_fail@plt+0xe088>
   1fac0:	b	1ec3c <__assert_fail@plt+0xd86c>
   1fac4:	cmp	r3, #1
   1fac8:	bls	1e4a4 <__assert_fail@plt+0xd0d4>
   1facc:	add	sl, sl, #1
   1fad0:	sub	fp, fp, #1
   1fad4:	b	1f9cc <__assert_fail@plt+0xe5fc>
   1fad8:	cmp	r9, #43	; 0x2b
   1fadc:	movne	r2, #0
   1fae0:	strne	r2, [sp, #144]	; 0x90
   1fae4:	movne	r2, #4
   1fae8:	strne	r2, [sp, #140]	; 0x8c
   1faec:	bne	1f518 <__assert_fail@plt+0xe148>
   1faf0:	mov	r2, #4
   1faf4:	str	r2, [sp, #140]	; 0x8c
   1faf8:	movw	r2, #9999	; 0x270f
   1fafc:	cmp	r2, r1
   1fb00:	movcc	r2, #1
   1fb04:	movcc	r9, #43	; 0x2b
   1fb08:	strcc	r2, [sp, #144]	; 0x90
   1fb0c:	bcc	1f518 <__assert_fail@plt+0xe148>
   1fb10:	ldr	r2, [sp, #140]	; 0x8c
   1fb14:	mov	r9, #43	; 0x2b
   1fb18:	cmp	fp, r2
   1fb1c:	movle	r2, #0
   1fb20:	movgt	r2, #1
   1fb24:	str	r2, [sp, #144]	; 0x90
   1fb28:	b	1f518 <__assert_fail@plt+0xe148>
   1fb2c:	ldr	r2, [sp, #140]	; 0x8c
   1fb30:	cmp	r7, r2
   1fb34:	bge	20150 <__assert_fail@plt+0xed80>
   1fb38:	cmp	r9, #0
   1fb3c:	rsb	r1, r1, #0
   1fb40:	beq	1f7b8 <__assert_fail@plt+0xe3e8>
   1fb44:	cmp	r9, #43	; 0x2b
   1fb48:	beq	20178 <__assert_fail@plt+0xeda8>
   1fb4c:	mov	r2, #0
   1fb50:	mov	r8, #1
   1fb54:	str	r2, [sp, #84]	; 0x54
   1fb58:	str	r2, [sp, #144]	; 0x90
   1fb5c:	mov	r2, #2
   1fb60:	str	r2, [sp, #140]	; 0x8c
   1fb64:	b	1f518 <__assert_fail@plt+0xe148>
   1fb68:	mov	r1, #11
   1fb6c:	mov	r0, #0
   1fb70:	mov	r3, #1
   1fb74:	mul	r1, r1, r2
   1fb78:	str	r0, [sp, #84]	; 0x54
   1fb7c:	str	r3, [sp, #140]	; 0x8c
   1fb80:	str	r0, [sp, #144]	; 0x90
   1fb84:	asr	r1, r1, #5
   1fb88:	add	r1, r1, r3
   1fb8c:	b	1ee3c <__assert_fail@plt+0xda6c>
   1fb90:	sub	ip, ip, #1
   1fb94:	tst	ip, #3
   1fb98:	movwne	r2, #365	; 0x16d
   1fb9c:	bne	1fbe4 <__assert_fail@plt+0xe814>
   1fba0:	movw	r1, #34079	; 0x851f
   1fba4:	movt	r1, #20971	; 0x51eb
   1fba8:	asr	r2, ip, #31
   1fbac:	smull	r0, r1, r1, ip
   1fbb0:	rsb	r2, r2, r1, asr #5
   1fbb4:	mov	r1, #100	; 0x64
   1fbb8:	mls	r2, r1, r2, ip
   1fbbc:	cmp	r2, #0
   1fbc0:	movwne	r2, #366	; 0x16e
   1fbc4:	bne	1fbe4 <__assert_fail@plt+0xe814>
   1fbc8:	mov	r0, #400	; 0x190
   1fbcc:	movw	r2, #365	; 0x16d
   1fbd0:	sdiv	r1, ip, r0
   1fbd4:	mls	r1, r0, r1, ip
   1fbd8:	movw	r0, #366	; 0x16e
   1fbdc:	cmp	r1, #0
   1fbe0:	moveq	r2, r0
   1fbe4:	ldr	r1, [sp, #140]	; 0x8c
   1fbe8:	add	r2, r8, r2
   1fbec:	movw	ip, #9363	; 0x2493
   1fbf0:	movt	ip, #37449	; 0x9249
   1fbf4:	movw	r0, #63637	; 0xf895
   1fbf8:	movt	r0, #65535	; 0xffff
   1fbfc:	str	r2, [sp, #84]	; 0x54
   1fc00:	str	r0, [sp, #140]	; 0x8c
   1fc04:	sub	r2, r2, r1
   1fc08:	mvn	r1, #0
   1fc0c:	add	r2, r2, #380	; 0x17c
   1fc10:	add	r2, r2, #2
   1fc14:	asr	r0, r2, #31
   1fc18:	smull	r8, ip, ip, r2
   1fc1c:	mov	r8, r1
   1fc20:	add	ip, ip, r2
   1fc24:	rsb	ip, r0, ip, asr #2
   1fc28:	rsb	ip, ip, ip, lsl #3
   1fc2c:	sub	r2, r2, ip
   1fc30:	ldr	ip, [sp, #84]	; 0x54
   1fc34:	sub	r2, ip, r2
   1fc38:	add	r2, r2, #3
   1fc3c:	str	r2, [sp, #84]	; 0x54
   1fc40:	b	1f764 <__assert_fail@plt+0xe394>
   1fc44:	mov	r2, #1
   1fc48:	mov	r8, #0
   1fc4c:	str	r2, [sp, #84]	; 0x54
   1fc50:	b	1ed68 <__assert_fail@plt+0xd998>
   1fc54:	cmp	r9, #43	; 0x2b
   1fc58:	beq	20140 <__assert_fail@plt+0xed70>
   1fc5c:	mov	r2, #0
   1fc60:	str	r2, [sp, #144]	; 0x90
   1fc64:	mov	r2, #2
   1fc68:	str	r2, [sp, #140]	; 0x8c
   1fc6c:	b	1f518 <__assert_fail@plt+0xe148>
   1fc70:	cmp	r6, r3
   1fc74:	bcs	1e4a4 <__assert_fail@plt+0xd0d4>
   1fc78:	ldr	r3, [sp, #48]	; 0x30
   1fc7c:	add	sl, sl, r6
   1fc80:	cmp	r5, #0
   1fc84:	sub	r7, r3, sl
   1fc88:	bne	1f244 <__assert_fail@plt+0xde74>
   1fc8c:	cmp	r9, #45	; 0x2d
   1fc90:	bne	20128 <__assert_fail@plt+0xed58>
   1fc94:	ldr	r3, [sp, #48]	; 0x30
   1fc98:	cmp	r3, sl
   1fc9c:	bne	1e45c <__assert_fail@plt+0xd08c>
   1fca0:	b	1e4a4 <__assert_fail@plt+0xd0d4>
   1fca4:	cmp	r3, #1
   1fca8:	bls	1e4a4 <__assert_fail@plt+0xd0d4>
   1fcac:	cmp	r5, #0
   1fcb0:	mov	r6, #1
   1fcb4:	bne	1f344 <__assert_fail@plt+0xdf74>
   1fcb8:	b	1ec3c <__assert_fail@plt+0xd86c>
   1fcbc:	ldr	r0, [sp, #84]	; 0x54
   1fcc0:	movw	r1, #9363	; 0x2493
   1fcc4:	movt	r1, #37449	; 0x9249
   1fcc8:	smull	ip, r1, r1, r0
   1fccc:	mov	ip, #2
   1fcd0:	asr	r2, r0, #31
   1fcd4:	str	ip, [sp, #140]	; 0x8c
   1fcd8:	add	r1, r1, r0
   1fcdc:	rsb	r2, r2, r1, asr ip
   1fce0:	add	r2, r2, #1
   1fce4:	b	1edfc <__assert_fail@plt+0xda2c>
   1fce8:	ldr	r2, [sp, #140]	; 0x8c
   1fcec:	cmp	r7, r2
   1fcf0:	add	r7, r7, #1888	; 0x760
   1fcf4:	movlt	r2, #1
   1fcf8:	movge	r2, #0
   1fcfc:	add	r7, r7, #12
   1fd00:	movge	r8, #1
   1fd04:	movlt	r8, #0
   1fd08:	cmp	r9, #0
   1fd0c:	str	r2, [sp, #84]	; 0x54
   1fd10:	add	r1, r7, r1
   1fd14:	bne	1fad8 <__assert_fail@plt+0xe708>
   1fd18:	ldr	r2, [sp, #1236]	; 0x4d4
   1fd1c:	cmp	r2, #43	; 0x2b
   1fd20:	beq	1faf0 <__assert_fail@plt+0xe720>
   1fd24:	mov	r9, r2
   1fd28:	mov	r2, #0
   1fd2c:	str	r2, [sp, #144]	; 0x90
   1fd30:	mov	r2, #4
   1fd34:	str	r2, [sp, #140]	; 0x8c
   1fd38:	b	1f518 <__assert_fail@plt+0xe148>
   1fd3c:	mov	r2, #0
   1fd40:	mov	r8, #1
   1fd44:	str	r2, [sp, #84]	; 0x54
   1fd48:	b	1ed68 <__assert_fail@plt+0xd998>
   1fd4c:	ldr	r3, [sp, #56]	; 0x38
   1fd50:	mov	fp, #9
   1fd54:	cmp	r3, #0
   1fd58:	bne	2019c <__assert_fail@plt+0xedcc>
   1fd5c:	ldr	r3, [sp, #136]	; 0x88
   1fd60:	cmp	r3, #0
   1fd64:	movne	r6, #8
   1fd68:	ldrne	r3, [sp, #76]	; 0x4c
   1fd6c:	bne	1fde8 <__assert_fail@plt+0xea18>
   1fd70:	ldr	r3, [sp, #132]	; 0x84
   1fd74:	cmp	r3, #0
   1fd78:	movne	r6, #7
   1fd7c:	ldrne	r3, [sp, #44]	; 0x2c
   1fd80:	bne	1fde8 <__assert_fail@plt+0xea18>
   1fd84:	ldr	r3, [sp, #128]	; 0x80
   1fd88:	cmp	r3, #0
   1fd8c:	movne	r6, #6
   1fd90:	ldrne	r3, [sp, #72]	; 0x48
   1fd94:	bne	1fde8 <__assert_fail@plt+0xea18>
   1fd98:	ldr	r3, [sp, #68]	; 0x44
   1fd9c:	cmp	r3, #0
   1fda0:	movne	r6, #5
   1fda4:	ldrne	r3, [sp, #40]	; 0x28
   1fda8:	bne	1fde8 <__assert_fail@plt+0xea18>
   1fdac:	ldr	r3, [sp, #64]	; 0x40
   1fdb0:	cmp	r3, #0
   1fdb4:	movne	r6, #4
   1fdb8:	ldrne	r3, [sp, #36]	; 0x24
   1fdbc:	bne	1fde8 <__assert_fail@plt+0xea18>
   1fdc0:	ldr	r3, [sp, #60]	; 0x3c
   1fdc4:	cmp	r3, #0
   1fdc8:	movne	r6, #3
   1fdcc:	ldrne	r3, [sp, #32]
   1fdd0:	bne	1fde8 <__assert_fail@plt+0xea18>
   1fdd4:	ldr	r3, [sp, #120]	; 0x78
   1fdd8:	cmp	r3, #0
   1fddc:	beq	1f1f8 <__assert_fail@plt+0xde28>
   1fde0:	ldr	r3, [sp, #28]
   1fde4:	mov	r6, #2
   1fde8:	movw	ip, #26215	; 0x6667
   1fdec:	movt	ip, #26214	; 0x6666
   1fdf0:	asr	lr, r3, #31
   1fdf4:	movw	r0, #34079	; 0x851f
   1fdf8:	movt	r0, #20971	; 0x51eb
   1fdfc:	smull	r2, r1, ip, r3
   1fe00:	sub	r8, r6, #2
   1fe04:	smull	r2, r0, r0, r3
   1fe08:	add	r2, sp, #1184	; 0x4a0
   1fe0c:	cmp	r8, #0
   1fe10:	add	r2, r2, #8
   1fe14:	rsb	r1, lr, r1, asr #2
   1fe18:	add	r8, r2, r8
   1fe1c:	asr	r2, r1, #31
   1fe20:	smull	r7, ip, ip, r1
   1fe24:	rsb	r7, lr, r0, asr #5
   1fe28:	add	r0, r1, r1, lsl #2
   1fe2c:	rsb	r2, r2, ip, asr #2
   1fe30:	add	r2, r2, r2, lsl #2
   1fe34:	sub	r2, r1, r2, lsl #1
   1fe38:	sub	r1, r3, r0, lsl #1
   1fe3c:	add	r0, sp, #1184	; 0x4a0
   1fe40:	add	r0, r0, #8
   1fe44:	add	r2, r2, #48	; 0x30
   1fe48:	add	r1, r1, #48	; 0x30
   1fe4c:	add	r0, r0, r6
   1fe50:	strb	r1, [r0, #-1041]	; 0xfffffbef
   1fe54:	strb	r2, [r8, #-1040]	; 0xfffffbf0
   1fe58:	beq	1f218 <__assert_fail@plt+0xde48>
   1fe5c:	movw	r8, #26215	; 0x6667
   1fe60:	movt	r8, #26214	; 0x6666
   1fe64:	movw	r1, #19923	; 0x4dd3
   1fe68:	movt	r1, #4194	; 0x1062
   1fe6c:	smull	r2, r0, r8, r7
   1fe70:	asr	r2, r7, #31
   1fe74:	smull	ip, r1, r1, r3
   1fe78:	add	ip, sp, #1184	; 0x4a0
   1fe7c:	rsb	r2, r2, r0, asr #2
   1fe80:	add	ip, ip, #8
   1fe84:	sub	r0, r6, #3
   1fe88:	cmp	r0, #0
   1fe8c:	add	r0, ip, r0
   1fe90:	add	r2, r2, r2, lsl #2
   1fe94:	rsb	r1, lr, r1, asr #6
   1fe98:	sub	r2, r7, r2, lsl #1
   1fe9c:	add	r2, r2, #48	; 0x30
   1fea0:	strb	r2, [r0, #-1040]	; 0xfffffbf0
   1fea4:	beq	1f218 <__assert_fail@plt+0xde48>
   1fea8:	smull	r2, ip, r8, r1
   1feac:	movw	r2, #35757	; 0x8bad
   1feb0:	movt	r2, #26843	; 0x68db
   1feb4:	asr	r0, r1, #31
   1feb8:	smull	r7, r2, r2, r3
   1febc:	add	r7, sp, #1184	; 0x4a0
   1fec0:	rsb	r0, r0, ip, asr #2
   1fec4:	add	r7, r7, #8
   1fec8:	sub	ip, r6, #4
   1fecc:	cmp	ip, #0
   1fed0:	add	ip, r7, ip
   1fed4:	add	r0, r0, r0, lsl #2
   1fed8:	rsb	r2, lr, r2, asr #12
   1fedc:	sub	r1, r1, r0, lsl #1
   1fee0:	add	r1, r1, #48	; 0x30
   1fee4:	strb	r1, [ip, #-1040]	; 0xfffffbf0
   1fee8:	beq	1f218 <__assert_fail@plt+0xde48>
   1feec:	smull	r1, ip, r8, r2
   1fef0:	movw	r1, #46473	; 0xb589
   1fef4:	movt	r1, #5368	; 0x14f8
   1fef8:	asr	r0, r2, #31
   1fefc:	smull	r7, r1, r1, r3
   1ff00:	add	r7, sp, #1184	; 0x4a0
   1ff04:	rsb	r0, r0, ip, asr #2
   1ff08:	add	r7, r7, #8
   1ff0c:	sub	ip, r6, #5
   1ff10:	cmp	ip, #0
   1ff14:	add	ip, r7, ip
   1ff18:	add	r0, r0, r0, lsl #2
   1ff1c:	rsb	r1, lr, r1, asr #13
   1ff20:	sub	r2, r2, r0, lsl #1
   1ff24:	add	r2, r2, #48	; 0x30
   1ff28:	strb	r2, [ip, #-1040]	; 0xfffffbf0
   1ff2c:	beq	1f218 <__assert_fail@plt+0xde48>
   1ff30:	smull	r2, ip, r8, r1
   1ff34:	movw	r2, #56963	; 0xde83
   1ff38:	movt	r2, #17179	; 0x431b
   1ff3c:	asr	r0, r1, #31
   1ff40:	smull	r7, r2, r2, r3
   1ff44:	add	r7, sp, #1184	; 0x4a0
   1ff48:	rsb	r0, r0, ip, asr #2
   1ff4c:	add	r7, r7, #8
   1ff50:	sub	ip, r6, #6
   1ff54:	cmp	ip, #0
   1ff58:	add	ip, r7, ip
   1ff5c:	add	r0, r0, r0, lsl #2
   1ff60:	rsb	r2, lr, r2, asr #18
   1ff64:	sub	r1, r1, r0, lsl #1
   1ff68:	add	r1, r1, #48	; 0x30
   1ff6c:	strb	r1, [ip, #-1040]	; 0xfffffbf0
   1ff70:	beq	1f218 <__assert_fail@plt+0xde48>
   1ff74:	smull	r1, ip, r8, r2
   1ff78:	movw	r1, #51819	; 0xca6b
   1ff7c:	movt	r1, #27487	; 0x6b5f
   1ff80:	asr	r0, r2, #31
   1ff84:	smull	r7, r1, r1, r3
   1ff88:	add	r7, sp, #1184	; 0x4a0
   1ff8c:	rsb	r0, r0, ip, asr #2
   1ff90:	add	r7, r7, #8
   1ff94:	sub	ip, r6, #7
   1ff98:	cmp	ip, #0
   1ff9c:	add	ip, r7, ip
   1ffa0:	add	r0, r0, r0, lsl #2
   1ffa4:	rsb	r1, lr, r1, asr #22
   1ffa8:	sub	r2, r2, r0, lsl #1
   1ffac:	add	r2, r2, #48	; 0x30
   1ffb0:	strb	r2, [ip, #-1040]	; 0xfffffbf0
   1ffb4:	beq	1f218 <__assert_fail@plt+0xde48>
   1ffb8:	smull	r2, ip, r8, r1
   1ffbc:	movw	r2, #15241	; 0x3b89
   1ffc0:	movt	r2, #21990	; 0x55e6
   1ffc4:	asr	r0, r1, #31
   1ffc8:	smull	r2, r3, r2, r3
   1ffcc:	sub	r2, r6, #8
   1ffd0:	rsb	r0, r0, ip, asr #2
   1ffd4:	add	r7, r7, r2
   1ffd8:	cmp	r2, #1
   1ffdc:	add	r0, r0, r0, lsl #2
   1ffe0:	rsb	r3, lr, r3, asr #25
   1ffe4:	sub	r0, r1, r0, lsl #1
   1ffe8:	add	r2, r0, #48	; 0x30
   1ffec:	strb	r2, [r7, #-1040]	; 0xfffffbf0
   1fff0:	bne	1f218 <__assert_fail@plt+0xde48>
   1fff4:	smull	r2, r1, r8, r3
   1fff8:	asr	r2, r3, #31
   1fffc:	rsb	r2, r2, r1, asr #2
   20000:	add	r2, r2, r2, lsl #2
   20004:	sub	r3, r3, r2, lsl #1
   20008:	add	r3, r3, #48	; 0x30
   2000c:	strb	r3, [sp, #152]	; 0x98
   20010:	b	1f218 <__assert_fail@plt+0xde48>
   20014:	mov	r2, r6
   20018:	mov	r0, r5
   2001c:	ldr	r1, [sp, #112]	; 0x70
   20020:	add	r5, r5, r6
   20024:	bl	110f4 <memcpy@plt>
   20028:	b	1ed18 <__assert_fail@plt+0xd948>
   2002c:	cmp	r6, #0
   20030:	beq	1ed18 <__assert_fail@plt+0xd948>
   20034:	bl	1122c <__ctype_tolower_loc@plt>
   20038:	ldr	ip, [sp, #112]	; 0x70
   2003c:	add	r5, r5, r6
   20040:	mov	r3, r5
   20044:	add	r6, ip, r6
   20048:	ldrb	r1, [r6, #-1]!
   2004c:	ldr	r2, [r0]
   20050:	cmp	ip, r6
   20054:	ldr	r2, [r2, r1, lsl #2]
   20058:	strb	r2, [r3, #-1]!
   2005c:	bne	20048 <__assert_fail@plt+0xec78>
   20060:	b	1ed18 <__assert_fail@plt+0xd948>
   20064:	mov	r0, r5
   20068:	mov	r2, r6
   2006c:	add	r1, sp, #152	; 0x98
   20070:	add	r5, r5, r6
   20074:	bl	110f4 <memcpy@plt>
   20078:	b	1f27c <__assert_fail@plt+0xdeac>
   2007c:	movw	r2, #63636	; 0xf894
   20080:	movt	r2, #65535	; 0xffff
   20084:	mov	r1, #0
   20088:	mov	r8, r1
   2008c:	str	r2, [sp, #140]	; 0x8c
   20090:	b	1f764 <__assert_fail@plt+0xe394>
   20094:	add	r0, r4, #2
   20098:	mov	ip, #1
   2009c:	mov	r1, r0
   200a0:	ldrb	r2, [r0], #1
   200a4:	add	ip, ip, #1
   200a8:	cmp	r2, #58	; 0x3a
   200ac:	beq	2009c <__assert_fail@plt+0xeccc>
   200b0:	str	ip, [sp, #140]	; 0x8c
   200b4:	b	1f8c8 <__assert_fail@plt+0xe4f8>
   200b8:	mov	r2, #2
   200bc:	mov	r8, #1
   200c0:	str	r9, [sp, #84]	; 0x54
   200c4:	str	r2, [sp, #140]	; 0x8c
   200c8:	b	1fb10 <__assert_fail@plt+0xe740>
   200cc:	ldr	r3, [sp, #52]	; 0x34
   200d0:	mov	lr, #4
   200d4:	mov	ip, #43	; 0x2b
   200d8:	mov	r9, ip
   200dc:	mov	r0, r6
   200e0:	movw	r2, #12096	; 0x2f40
   200e4:	movt	r2, #2
   200e8:	mvn	r1, #0
   200ec:	mov	r8, r2
   200f0:	mov	fp, r6
   200f4:	stm	sp, {r3, ip, lr}
   200f8:	str	lr, [sp, #140]	; 0x8c
   200fc:	ldr	r3, [sp, #1244]	; 0x4dc
   20100:	ldr	lr, [sp, #1248]	; 0x4e0
   20104:	ldr	ip, [sp, #1252]	; 0x4e4
   20108:	str	r3, [sp, #12]
   2010c:	ldr	r3, [sp, #100]	; 0x64
   20110:	str	lr, [sp, #16]
   20114:	str	ip, [sp, #20]
   20118:	bl	1e14c <__assert_fail@plt+0xcd7c>
   2011c:	mov	r7, r0
   20120:	mov	r6, r0
   20124:	b	1f088 <__assert_fail@plt+0xdcb8>
   20128:	sub	r6, fp, r6
   2012c:	cmp	r6, r7
   20130:	bcs	1e4a4 <__assert_fail@plt+0xd0d4>
   20134:	add	sl, sl, r6
   20138:	mov	r5, #0
   2013c:	b	1e45c <__assert_fail@plt+0xd08c>
   20140:	mov	r2, #2
   20144:	str	r2, [sp, #140]	; 0x8c
   20148:	mov	r2, #99	; 0x63
   2014c:	b	1fafc <__assert_fail@plt+0xe72c>
   20150:	cmp	r9, #0
   20154:	add	r1, r1, #100	; 0x64
   20158:	beq	1f7b8 <__assert_fail@plt+0xe3e8>
   2015c:	b	1fb44 <__assert_fail@plt+0xe774>
   20160:	ldr	r2, [sp, #88]	; 0x58
   20164:	mov	r3, #75	; 0x4b
   20168:	str	r3, [r2]
   2016c:	b	1e4b0 <__assert_fail@plt+0xd0e0>
   20170:	mov	fp, #2
   20174:	b	1fdd4 <__assert_fail@plt+0xea04>
   20178:	mov	r2, #0
   2017c:	mov	r8, #1
   20180:	str	r2, [sp, #84]	; 0x54
   20184:	mov	r2, #2
   20188:	str	r2, [sp, #140]	; 0x8c
   2018c:	b	1fb10 <__assert_fail@plt+0xe740>
   20190:	ldr	r3, [sp, #56]	; 0x38
   20194:	cmp	r3, #0
   20198:	beq	1fd5c <__assert_fail@plt+0xe98c>
   2019c:	mov	r6, #9
   201a0:	ldr	r3, [sp, #1252]	; 0x4e4
   201a4:	b	1fde8 <__assert_fail@plt+0xea18>
   201a8:	strd	r4, [sp, #-16]!
   201ac:	mov	ip, #0
   201b0:	str	r6, [sp, #8]
   201b4:	mvn	r6, #0
   201b8:	str	lr, [sp, #12]
   201bc:	sub	sp, sp, #32
   201c0:	ldr	r4, [sp, #48]	; 0x30
   201c4:	add	r5, sp, #31
   201c8:	str	ip, [sp]
   201cc:	ldr	lr, [sp, #52]	; 0x34
   201d0:	str	ip, [sp, #4]
   201d4:	str	r6, [sp, #8]
   201d8:	str	r5, [sp, #12]
   201dc:	str	r4, [sp, #16]
   201e0:	str	lr, [sp, #20]
   201e4:	strb	ip, [sp, #31]
   201e8:	bl	1e14c <__assert_fail@plt+0xcd7c>
   201ec:	add	sp, sp, #32
   201f0:	ldrd	r4, [sp]
   201f4:	ldr	r6, [sp, #8]
   201f8:	add	sp, sp, #12
   201fc:	pop	{pc}		; (ldr pc, [sp], #4)
   20200:	umull	r2, r3, r1, r2
   20204:	cmp	r3, #0
   20208:	bne	20214 <__assert_fail@plt+0xee44>
   2020c:	mov	r1, r2
   20210:	b	1dd6c <__assert_fail@plt+0xc99c>
   20214:	str	r4, [sp, #-8]!
   20218:	str	lr, [sp, #4]
   2021c:	bl	11298 <__errno_location@plt>
   20220:	mov	r3, #12
   20224:	ldr	r4, [sp]
   20228:	add	sp, sp, #4
   2022c:	str	r3, [r0]
   20230:	mov	r0, #0
   20234:	pop	{pc}		; (ldr pc, [sp], #4)
   20238:	push	{lr}		; (str lr, [sp, #-4]!)
   2023c:	sub	sp, sp, #268	; 0x10c
   20240:	movw	r2, #257	; 0x101
   20244:	add	r1, sp, #4
   20248:	bl	20290 <__assert_fail@plt+0xeec0>
   2024c:	cmp	r0, #0
   20250:	movne	r0, #0
   20254:	bne	20288 <__assert_fail@plt+0xeeb8>
   20258:	movw	r1, #10224	; 0x27f0
   2025c:	movt	r1, #2
   20260:	add	r0, sp, #4
   20264:	bl	110a0 <strcmp@plt>
   20268:	cmp	r0, #0
   2026c:	beq	20288 <__assert_fail@plt+0xeeb8>
   20270:	add	r0, sp, #4
   20274:	movw	r1, #12128	; 0x2f60
   20278:	movt	r1, #2
   2027c:	bl	110a0 <strcmp@plt>
   20280:	adds	r0, r0, #0
   20284:	movne	r0, #1
   20288:	add	sp, sp, #268	; 0x10c
   2028c:	pop	{pc}		; (ldr pc, [sp], #4)
   20290:	strd	r4, [sp, #-16]!
   20294:	mov	r5, r1
   20298:	mov	r1, #0
   2029c:	mov	r4, r2
   202a0:	str	r6, [sp, #8]
   202a4:	str	lr, [sp, #12]
   202a8:	bl	1131c <setlocale@plt>
   202ac:	subs	r6, r0, #0
   202b0:	beq	20330 <__assert_fail@plt+0xef60>
   202b4:	bl	11274 <strlen@plt>
   202b8:	cmp	r4, r0
   202bc:	bhi	202dc <__assert_fail@plt+0xef0c>
   202c0:	cmp	r4, #0
   202c4:	moveq	r0, #34	; 0x22
   202c8:	bne	20300 <__assert_fail@plt+0xef30>
   202cc:	ldrd	r4, [sp]
   202d0:	ldr	r6, [sp, #8]
   202d4:	add	sp, sp, #12
   202d8:	pop	{pc}		; (ldr pc, [sp], #4)
   202dc:	add	r2, r0, #1
   202e0:	mov	r1, r6
   202e4:	mov	r0, r5
   202e8:	bl	110f4 <memcpy@plt>
   202ec:	ldrd	r4, [sp]
   202f0:	mov	r0, #0
   202f4:	ldr	r6, [sp, #8]
   202f8:	add	sp, sp, #12
   202fc:	pop	{pc}		; (ldr pc, [sp], #4)
   20300:	sub	r4, r4, #1
   20304:	mov	r1, r6
   20308:	mov	r2, r4
   2030c:	mov	r0, r5
   20310:	bl	110f4 <memcpy@plt>
   20314:	mov	r3, #0
   20318:	mov	r0, #34	; 0x22
   2031c:	strb	r3, [r5, r4]
   20320:	ldrd	r4, [sp]
   20324:	ldr	r6, [sp, #8]
   20328:	add	sp, sp, #12
   2032c:	pop	{pc}		; (ldr pc, [sp], #4)
   20330:	cmp	r4, #0
   20334:	mov	r0, #22
   20338:	strbne	r6, [r5]
   2033c:	ldrd	r4, [sp]
   20340:	ldr	r6, [sp, #8]
   20344:	add	sp, sp, #12
   20348:	pop	{pc}		; (ldr pc, [sp], #4)
   2034c:	mov	r1, #0
   20350:	b	1131c <setlocale@plt>
   20354:	cmp	r3, #0
   20358:	cmpeq	r2, #0
   2035c:	bne	20380 <__assert_fail@plt+0xefb0>
   20360:	cmp	r1, #0
   20364:	movlt	r1, #-2147483648	; 0x80000000
   20368:	movlt	r0, #0
   2036c:	blt	2037c <__assert_fail@plt+0xefac>
   20370:	cmpeq	r0, #0
   20374:	mvnne	r1, #-2147483648	; 0x80000000
   20378:	mvnne	r0, #0
   2037c:	b	20464 <__assert_fail@plt+0xf094>
   20380:	sub	sp, sp, #8
   20384:	push	{sp, lr}
   20388:	cmp	r1, #0
   2038c:	blt	203ac <__assert_fail@plt+0xefdc>
   20390:	cmp	r3, #0
   20394:	blt	203e0 <__assert_fail@plt+0xf010>
   20398:	bl	20474 <__assert_fail@plt+0xf0a4>
   2039c:	ldr	lr, [sp, #4]
   203a0:	add	sp, sp, #8
   203a4:	pop	{r2, r3}
   203a8:	bx	lr
   203ac:	rsbs	r0, r0, #0
   203b0:	sbc	r1, r1, r1, lsl #1
   203b4:	cmp	r3, #0
   203b8:	blt	20404 <__assert_fail@plt+0xf034>
   203bc:	bl	20474 <__assert_fail@plt+0xf0a4>
   203c0:	ldr	lr, [sp, #4]
   203c4:	add	sp, sp, #8
   203c8:	pop	{r2, r3}
   203cc:	rsbs	r0, r0, #0
   203d0:	sbc	r1, r1, r1, lsl #1
   203d4:	rsbs	r2, r2, #0
   203d8:	sbc	r3, r3, r3, lsl #1
   203dc:	bx	lr
   203e0:	rsbs	r2, r2, #0
   203e4:	sbc	r3, r3, r3, lsl #1
   203e8:	bl	20474 <__assert_fail@plt+0xf0a4>
   203ec:	ldr	lr, [sp, #4]
   203f0:	add	sp, sp, #8
   203f4:	pop	{r2, r3}
   203f8:	rsbs	r0, r0, #0
   203fc:	sbc	r1, r1, r1, lsl #1
   20400:	bx	lr
   20404:	rsbs	r2, r2, #0
   20408:	sbc	r3, r3, r3, lsl #1
   2040c:	bl	20474 <__assert_fail@plt+0xf0a4>
   20410:	ldr	lr, [sp, #4]
   20414:	add	sp, sp, #8
   20418:	pop	{r2, r3}
   2041c:	rsbs	r2, r2, #0
   20420:	sbc	r3, r3, r3, lsl #1
   20424:	bx	lr
   20428:	cmp	r3, #0
   2042c:	cmpeq	r2, #0
   20430:	bne	20448 <__assert_fail@plt+0xf078>
   20434:	cmp	r1, #0
   20438:	cmpeq	r0, #0
   2043c:	mvnne	r1, #0
   20440:	mvnne	r0, #0
   20444:	b	20464 <__assert_fail@plt+0xf094>
   20448:	sub	sp, sp, #8
   2044c:	push	{sp, lr}
   20450:	bl	20474 <__assert_fail@plt+0xf0a4>
   20454:	ldr	lr, [sp, #4]
   20458:	add	sp, sp, #8
   2045c:	pop	{r2, r3}
   20460:	bx	lr
   20464:	push	{r1, lr}
   20468:	mov	r0, #8
   2046c:	bl	1107c <raise@plt>
   20470:	pop	{r1, pc}
   20474:	cmp	r1, r3
   20478:	cmpeq	r0, r2
   2047c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20480:	mov	r4, r0
   20484:	movcc	r0, #0
   20488:	mov	r5, r1
   2048c:	ldr	lr, [sp, #36]	; 0x24
   20490:	movcc	r1, r0
   20494:	bcc	20590 <__assert_fail@plt+0xf1c0>
   20498:	cmp	r3, #0
   2049c:	clzeq	ip, r2
   204a0:	clzne	ip, r3
   204a4:	addeq	ip, ip, #32
   204a8:	cmp	r5, #0
   204ac:	clzeq	r1, r4
   204b0:	addeq	r1, r1, #32
   204b4:	clzne	r1, r5
   204b8:	sub	ip, ip, r1
   204bc:	sub	sl, ip, #32
   204c0:	lsl	r9, r3, ip
   204c4:	rsb	fp, ip, #32
   204c8:	orr	r9, r9, r2, lsl sl
   204cc:	orr	r9, r9, r2, lsr fp
   204d0:	lsl	r8, r2, ip
   204d4:	cmp	r5, r9
   204d8:	cmpeq	r4, r8
   204dc:	movcc	r0, #0
   204e0:	movcc	r1, r0
   204e4:	bcc	20500 <__assert_fail@plt+0xf130>
   204e8:	mov	r0, #1
   204ec:	subs	r4, r4, r8
   204f0:	lsl	r1, r0, sl
   204f4:	orr	r1, r1, r0, lsr fp
   204f8:	lsl	r0, r0, ip
   204fc:	sbc	r5, r5, r9
   20500:	cmp	ip, #0
   20504:	beq	20590 <__assert_fail@plt+0xf1c0>
   20508:	lsr	r6, r8, #1
   2050c:	orr	r6, r6, r9, lsl #31
   20510:	lsr	r7, r9, #1
   20514:	mov	r2, ip
   20518:	b	2053c <__assert_fail@plt+0xf16c>
   2051c:	subs	r3, r4, r6
   20520:	sbc	r8, r5, r7
   20524:	adds	r3, r3, r3
   20528:	adc	r8, r8, r8
   2052c:	adds	r4, r3, #1
   20530:	adc	r5, r8, #0
   20534:	subs	r2, r2, #1
   20538:	beq	20558 <__assert_fail@plt+0xf188>
   2053c:	cmp	r5, r7
   20540:	cmpeq	r4, r6
   20544:	bcs	2051c <__assert_fail@plt+0xf14c>
   20548:	adds	r4, r4, r4
   2054c:	adc	r5, r5, r5
   20550:	subs	r2, r2, #1
   20554:	bne	2053c <__assert_fail@plt+0xf16c>
   20558:	lsr	r3, r4, ip
   2055c:	orr	r3, r3, r5, lsl fp
   20560:	lsr	r2, r5, ip
   20564:	orr	r3, r3, r5, lsr sl
   20568:	adds	r0, r0, r4
   2056c:	mov	r4, r3
   20570:	lsl	r3, r2, ip
   20574:	orr	r3, r3, r4, lsl sl
   20578:	lsl	ip, r4, ip
   2057c:	orr	r3, r3, r4, lsr fp
   20580:	adc	r1, r1, r5
   20584:	subs	r0, r0, ip
   20588:	mov	r5, r2
   2058c:	sbc	r1, r1, r3
   20590:	cmp	lr, #0
   20594:	strdne	r4, [lr]
   20598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2059c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   205a0:	mov	r7, r0
   205a4:	ldr	r6, [pc, #72]	; 205f4 <__assert_fail@plt+0xf224>
   205a8:	ldr	r5, [pc, #72]	; 205f8 <__assert_fail@plt+0xf228>
   205ac:	add	r6, pc, r6
   205b0:	add	r5, pc, r5
   205b4:	sub	r6, r6, r5
   205b8:	mov	r8, r1
   205bc:	mov	r9, r2
   205c0:	bl	11044 <calloc@plt-0x20>
   205c4:	asrs	r6, r6, #2
   205c8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   205cc:	mov	r4, #0
   205d0:	add	r4, r4, #1
   205d4:	ldr	r3, [r5], #4
   205d8:	mov	r2, r9
   205dc:	mov	r1, r8
   205e0:	mov	r0, r7
   205e4:	blx	r3
   205e8:	cmp	r6, r4
   205ec:	bne	205d0 <__assert_fail@plt+0xf200>
   205f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   205f4:	andeq	r3, r1, r0, ror #18
   205f8:	andeq	r3, r1, r8, asr r9
   205fc:	bx	lr
   20600:	ldr	r3, [pc, #12]	; 20614 <__assert_fail@plt+0xf244>
   20604:	mov	r1, #0
   20608:	add	r3, pc, r3
   2060c:	ldr	r2, [r3]
   20610:	b	112bc <__cxa_atexit@plt>
   20614:	andeq	r3, r1, ip, lsr #22

Disassembly of section .fini:

00020618 <.fini>:
   20618:	push	{r3, lr}
   2061c:	pop	{r3, pc}
