
../repos/maitesin-acc-4891b9a/bin/lexer_tests:     file format elf32-littlearm


Disassembly of section .init:

000125d8 <.init>:
   125d8:	push	{r3, lr}
   125dc:	bl	12820 <_start@@Base+0x3c>
   125e0:	pop	{r3, pc}

Disassembly of section .plt:

000125e4 <fdopen@plt-0x14>:
   125e4:	push	{lr}		; (str lr, [sp, #-4]!)
   125e8:	ldr	lr, [pc, #4]	; 125f4 <fdopen@plt-0x4>
   125ec:	add	lr, pc, lr
   125f0:	ldr	pc, [lr, #8]!
   125f4:	andeq	ip, r1, ip, lsl #20

000125f8 <fdopen@plt>:
   125f8:	add	ip, pc, #0, 12
   125fc:	add	ip, ip, #28, 20	; 0x1c000
   12600:	ldr	pc, [ip, #2572]!	; 0xa0c

00012604 <strtol@plt>:
   12604:	add	ip, pc, #0, 12
   12608:	add	ip, ip, #28, 20	; 0x1c000
   1260c:	ldr	pc, [ip, #2564]!	; 0xa04

00012610 <longjmp@plt>:
   12610:	add	ip, pc, #0, 12
   12614:	add	ip, ip, #28, 20	; 0x1c000
   12618:	ldr	pc, [ip, #2556]!	; 0x9fc

0001261c <fflush@plt>:
   1261c:	add	ip, pc, #0, 12
   12620:	add	ip, ip, #28, 20	; 0x1c000
   12624:	ldr	pc, [ip, #2548]!	; 0x9f4

00012628 <_setjmp@plt>:
   12628:	add	ip, pc, #0, 12
   1262c:	add	ip, ip, #28, 20	; 0x1c000
   12630:	ldr	pc, [ip, #2540]!	; 0x9ec

00012634 <free@plt>:
   12634:	add	ip, pc, #0, 12
   12638:	add	ip, ip, #28, 20	; 0x1c000
   1263c:	ldr	pc, [ip, #2532]!	; 0x9e4

00012640 <__isnanf@plt>:
   12640:	add	ip, pc, #0, 12
   12644:	add	ip, ip, #28, 20	; 0x1c000
   12648:	ldr	pc, [ip, #2524]!	; 0x9dc

0001264c <memcpy@plt>:
   1264c:	add	ip, pc, #0, 12
   12650:	add	ip, ip, #28, 20	; 0x1c000
   12654:	ldr	pc, [ip, #2516]!	; 0x9d4

00012658 <mmap64@plt>:
   12658:	add	ip, pc, #0, 12
   1265c:	add	ip, ip, #28, 20	; 0x1c000
   12660:	ldr	pc, [ip, #2508]!	; 0x9cc

00012664 <ftell@plt>:
   12664:	add	ip, pc, #0, 12
   12668:	add	ip, ip, #28, 20	; 0x1c000
   1266c:	ldr	pc, [ip, #2500]!	; 0x9c4

00012670 <uname@plt>:
   12670:	add	ip, pc, #0, 12
   12674:	add	ip, ip, #28, 20	; 0x1c000
   12678:	ldr	pc, [ip, #2492]!	; 0x9bc

0001267c <strdup@plt>:
   1267c:	add	ip, pc, #0, 12
   12680:	add	ip, ip, #28, 20	; 0x1c000
   12684:	ldr	pc, [ip, #2484]!	; 0x9b4

00012688 <__isinff@plt>:
   12688:	add	ip, pc, #0, 12
   1268c:	add	ip, ip, #28, 20	; 0x1c000
   12690:	ldr	pc, [ip, #2476]!	; 0x9ac

00012694 <realloc@plt>:
   12694:	add	ip, pc, #0, 12
   12698:	add	ip, ip, #28, 20	; 0x1c000
   1269c:	ldr	pc, [ip, #2468]!	; 0x9a4

000126a0 <fwrite@plt>:
   126a0:	add	ip, pc, #0, 12
   126a4:	add	ip, ip, #28, 20	; 0x1c000
   126a8:	ldr	pc, [ip, #2460]!	; 0x99c

000126ac <open64@plt>:
   126ac:	add	ip, pc, #0, 12
   126b0:	add	ip, ip, #28, 20	; 0x1c000
   126b4:	ldr	pc, [ip, #2452]!	; 0x994

000126b8 <getenv@plt>:
   126b8:	add	ip, pc, #0, 12
   126bc:	add	ip, ip, #28, 20	; 0x1c000
   126c0:	ldr	pc, [ip, #2444]!	; 0x98c

000126c4 <malloc@plt>:
   126c4:	add	ip, pc, #0, 12
   126c8:	add	ip, ip, #28, 20	; 0x1c000
   126cc:	ldr	pc, [ip, #2436]!	; 0x984

000126d0 <__libc_start_main@plt>:
   126d0:	add	ip, pc, #0, 12
   126d4:	add	ip, ip, #28, 20	; 0x1c000
   126d8:	ldr	pc, [ip, #2428]!	; 0x97c

000126dc <strerror@plt>:
   126dc:	add	ip, pc, #0, 12
   126e0:	add	ip, ip, #28, 20	; 0x1c000
   126e4:	ldr	pc, [ip, #2420]!	; 0x974

000126e8 <__gmon_start__@plt>:
   126e8:	add	ip, pc, #0, 12
   126ec:	add	ip, ip, #28, 20	; 0x1c000
   126f0:	ldr	pc, [ip, #2412]!	; 0x96c

000126f4 <getpid@plt>:
   126f4:	add	ip, pc, #0, 12
   126f8:	add	ip, ip, #28, 20	; 0x1c000
   126fc:	ldr	pc, [ip, #2404]!	; 0x964

00012700 <exit@plt>:
   12700:	add	ip, pc, #0, 12
   12704:	add	ip, ip, #28, 20	; 0x1c000
   12708:	ldr	pc, [ip, #2396]!	; 0x95c

0001270c <strlen@plt>:
   1270c:	add	ip, pc, #0, 12
   12710:	add	ip, ip, #28, 20	; 0x1c000
   12714:	ldr	pc, [ip, #2388]!	; 0x954

00012718 <strchr@plt>:
   12718:	add	ip, pc, #0, 12
   1271c:	add	ip, ip, #28, 20	; 0x1c000
   12720:	ldr	pc, [ip, #2380]!	; 0x94c

00012724 <fprintf@plt>:
   12724:	add	ip, pc, #0, 12
   12728:	add	ip, ip, #28, 20	; 0x1c000
   1272c:	ldr	pc, [ip, #2372]!	; 0x944

00012730 <__errno_location@plt>:
   12730:	add	ip, pc, #0, 12
   12734:	add	ip, ip, #28, 20	; 0x1c000
   12738:	ldr	pc, [ip, #2364]!	; 0x93c

0001273c <__cxa_atexit@plt>:
   1273c:	add	ip, pc, #0, 12
   12740:	add	ip, ip, #28, 20	; 0x1c000
   12744:	ldr	pc, [ip, #2356]!	; 0x934

00012748 <mkdir@plt>:
   12748:	add	ip, pc, #0, 12
   1274c:	add	ip, ip, #28, 20	; 0x1c000
   12750:	ldr	pc, [ip, #2348]!	; 0x92c

00012754 <memset@plt>:
   12754:	add	ip, pc, #0, 12
   12758:	add	ip, ip, #28, 20	; 0x1c000
   1275c:	ldr	pc, [ip, #2340]!	; 0x924

00012760 <putchar@plt>:
   12760:	add	ip, pc, #0, 12
   12764:	add	ip, ip, #28, 20	; 0x1c000
   12768:	ldr	pc, [ip, #2332]!	; 0x91c

0001276c <strncpy@plt>:
   1276c:	add	ip, pc, #0, 12
   12770:	add	ip, ip, #28, 20	; 0x1c000
   12774:	ldr	pc, [ip, #2324]!	; 0x914

00012778 <prctl@plt>:
   12778:	add	ip, pc, #0, 12
   1277c:	add	ip, ip, #28, 20	; 0x1c000
   12780:	ldr	pc, [ip, #2316]!	; 0x90c

00012784 <fclose@plt>:
   12784:	add	ip, pc, #0, 12
   12788:	add	ip, ip, #28, 20	; 0x1c000
   1278c:	ldr	pc, [ip, #2308]!	; 0x904

00012790 <munmap@plt>:
   12790:	add	ip, pc, #0, 12
   12794:	add	ip, ip, #28, 20	; 0x1c000
   12798:	ldr	pc, [ip, #2300]!	; 0x8fc

0001279c <fcntl64@plt>:
   1279c:	add	ip, pc, #0, 12
   127a0:	add	ip, ip, #28, 20	; 0x1c000
   127a4:	ldr	pc, [ip, #2292]!	; 0x8f4

000127a8 <strrchr@plt>:
   127a8:	add	ip, pc, #0, 12
   127ac:	add	ip, ip, #28, 20	; 0x1c000
   127b0:	ldr	pc, [ip, #2284]!	; 0x8ec

000127b4 <msync@plt>:
   127b4:	add	ip, pc, #0, 12
   127b8:	add	ip, ip, #28, 20	; 0x1c000
   127bc:	ldr	pc, [ip, #2276]!	; 0x8e4

000127c0 <atoi@plt>:
   127c0:	add	ip, pc, #0, 12
   127c4:	add	ip, ip, #28, 20	; 0x1c000
   127c8:	ldr	pc, [ip, #2268]!	; 0x8dc

000127cc <fseek@plt>:
   127cc:	add	ip, pc, #0, 12
   127d0:	add	ip, ip, #28, 20	; 0x1c000
   127d4:	ldr	pc, [ip, #2260]!	; 0x8d4

000127d8 <abort@plt>:
   127d8:	add	ip, pc, #0, 12
   127dc:	add	ip, ip, #28, 20	; 0x1c000
   127e0:	ldr	pc, [ip, #2252]!	; 0x8cc

Disassembly of section .text:

000127e4 <_start@@Base>:
   127e4:	mov	fp, #0
   127e8:	mov	lr, #0
   127ec:	pop	{r1}		; (ldr r1, [sp], #4)
   127f0:	mov	r2, sp
   127f4:	push	{r2}		; (str r2, [sp, #-4]!)
   127f8:	push	{r0}		; (str r0, [sp, #-4]!)
   127fc:	ldr	ip, [pc, #16]	; 12814 <_start@@Base+0x30>
   12800:	push	{ip}		; (str ip, [sp, #-4]!)
   12804:	ldr	r0, [pc, #12]	; 12818 <_start@@Base+0x34>
   12808:	ldr	r3, [pc, #12]	; 1281c <_start@@Base+0x38>
   1280c:	bl	126d0 <__libc_start_main@plt>
   12810:	bl	127d8 <abort@plt>
   12814:	andeq	ip, r1, r8, lsr #22
   12818:	andeq	r3, r1, r4, lsl #25
   1281c:	andeq	ip, r1, r8, asr #21
   12820:	ldr	r3, [pc, #20]	; 1283c <_start@@Base+0x58>
   12824:	ldr	r2, [pc, #20]	; 12840 <_start@@Base+0x5c>
   12828:	add	r3, pc, r3
   1282c:	ldr	r2, [r3, r2]
   12830:	cmp	r2, #0
   12834:	bxeq	lr
   12838:	b	126e8 <__gmon_start__@plt>
   1283c:	ldrdeq	ip, [r1], -r0
   12840:	andeq	r0, r0, r0, asr #1
   12844:	ldr	r0, [pc, #24]	; 12864 <_start@@Base+0x80>
   12848:	ldr	r3, [pc, #24]	; 12868 <_start@@Base+0x84>
   1284c:	cmp	r3, r0
   12850:	bxeq	lr
   12854:	ldr	r3, [pc, #16]	; 1286c <_start@@Base+0x88>
   12858:	cmp	r3, #0
   1285c:	bxeq	lr
   12860:	bx	r3
   12864:	andeq	pc, r2, r0, ror #1
   12868:	andeq	pc, r2, r0, ror #1
   1286c:	andeq	r0, r0, r0
   12870:	ldr	r0, [pc, #36]	; 1289c <_start@@Base+0xb8>
   12874:	ldr	r1, [pc, #36]	; 128a0 <_start@@Base+0xbc>
   12878:	sub	r1, r1, r0
   1287c:	asr	r1, r1, #2
   12880:	add	r1, r1, r1, lsr #31
   12884:	asrs	r1, r1, #1
   12888:	bxeq	lr
   1288c:	ldr	r3, [pc, #16]	; 128a4 <_start@@Base+0xc0>
   12890:	cmp	r3, #0
   12894:	bxeq	lr
   12898:	bx	r3
   1289c:	andeq	pc, r2, r0, ror #1
   128a0:	andeq	pc, r2, r0, ror #1
   128a4:	andeq	r0, r0, r0
   128a8:	push	{r4, lr}
   128ac:	ldr	r4, [pc, #24]	; 128cc <_start@@Base+0xe8>
   128b0:	ldrb	r3, [r4]
   128b4:	cmp	r3, #0
   128b8:	popne	{r4, pc}
   128bc:	bl	12844 <_start@@Base+0x60>
   128c0:	mov	r3, #1
   128c4:	strb	r3, [r4]
   128c8:	pop	{r4, pc}
   128cc:	andeq	pc, r2, r4, ror #1
   128d0:	b	12870 <_start@@Base+0x8c>

000128d4 <simple_file_only_main@@Base>:
   128d4:	push	{r4, r5, fp, lr}
   128d8:	add	fp, sp, #8
   128dc:	sub	sp, sp, #16
   128e0:	movw	r0, #61672	; 0xf0e8
   128e4:	movt	r0, #2
   128e8:	ldm	r0, {r1, r2, r3, r5}
   128ec:	adds	r1, r1, #1
   128f0:	adc	r2, r2, #0
   128f4:	adds	r3, r3, #1
   128f8:	adc	r5, r5, #0
   128fc:	stm	r0, {r1, r2, r3, r5}
   12900:	add	r4, sp, #4
   12904:	movw	r1, #52052	; 0xcb54
   12908:	movt	r1, #1
   1290c:	mov	r0, r4
   12910:	bl	185dc <init_lexer@@Base>
   12914:	mov	r0, r4
   12918:	bl	18824 <next@@Base>
   1291c:	ldr	r1, [r0]
   12920:	mov	r5, #148	; 0x94
   12924:	str	r5, [sp]
   12928:	mov	r0, #0
   1292c:	mov	r2, #0
   12930:	mov	r3, #23
   12934:	bl	15118 <UnityAssertEqualNumber@@Base>
   12938:	mov	r0, r4
   1293c:	bl	18824 <next@@Base>
   12940:	ldr	r1, [r0]
   12944:	str	r5, [sp]
   12948:	mov	r0, #2
   1294c:	mov	r2, #0
   12950:	mov	r3, #25
   12954:	bl	15118 <UnityAssertEqualNumber@@Base>
   12958:	mov	r0, r4
   1295c:	bl	18824 <next@@Base>
   12960:	ldr	r1, [r0]
   12964:	str	r5, [sp]
   12968:	mov	r0, #3
   1296c:	mov	r2, #0
   12970:	mov	r3, #27
   12974:	bl	15118 <UnityAssertEqualNumber@@Base>
   12978:	mov	r0, r4
   1297c:	bl	18824 <next@@Base>
   12980:	ldr	r1, [r0]
   12984:	str	r5, [sp]
   12988:	mov	r0, #4
   1298c:	mov	r2, #0
   12990:	mov	r3, #29
   12994:	bl	15118 <UnityAssertEqualNumber@@Base>
   12998:	mov	r0, r4
   1299c:	bl	18824 <next@@Base>
   129a0:	ldr	r1, [r0]
   129a4:	str	r5, [sp]
   129a8:	mov	r0, #5
   129ac:	mov	r2, #0
   129b0:	mov	r3, #31
   129b4:	bl	15118 <UnityAssertEqualNumber@@Base>
   129b8:	mov	r0, r4
   129bc:	bl	18824 <next@@Base>
   129c0:	ldr	r1, [r0]
   129c4:	str	r5, [sp]
   129c8:	mov	r0, #7
   129cc:	mov	r2, #0
   129d0:	mov	r3, #33	; 0x21
   129d4:	bl	15118 <UnityAssertEqualNumber@@Base>
   129d8:	mov	r0, r4
   129dc:	bl	18824 <next@@Base>
   129e0:	ldr	r1, [r0]
   129e4:	str	r5, [sp]
   129e8:	mov	r0, #1
   129ec:	mov	r2, #0
   129f0:	mov	r3, #35	; 0x23
   129f4:	bl	15118 <UnityAssertEqualNumber@@Base>
   129f8:	mov	r0, r4
   129fc:	bl	18824 <next@@Base>
   12a00:	ldr	r1, [r0]
   12a04:	str	r5, [sp]
   12a08:	mov	r0, #8
   12a0c:	mov	r2, #0
   12a10:	mov	r3, #37	; 0x25
   12a14:	bl	15118 <UnityAssertEqualNumber@@Base>
   12a18:	mov	r0, r4
   12a1c:	bl	18824 <next@@Base>
   12a20:	ldr	r1, [r0]
   12a24:	str	r5, [sp]
   12a28:	mov	r0, #6
   12a2c:	mov	r2, #0
   12a30:	mov	r3, #39	; 0x27
   12a34:	bl	15118 <UnityAssertEqualNumber@@Base>
   12a38:	mov	r0, r4
   12a3c:	bl	18824 <next@@Base>
   12a40:	ldr	r1, [r0]
   12a44:	str	r5, [sp]
   12a48:	mov	r0, #9
   12a4c:	mov	r2, #0
   12a50:	mov	r3, #41	; 0x29
   12a54:	bl	15118 <UnityAssertEqualNumber@@Base>
   12a58:	mov	r0, r4
   12a5c:	bl	1861c <destroy_lexer@@Base>
   12a60:	sub	sp, fp, #8
   12a64:	pop	{r4, r5, fp, pc}

00012a68 <push_token_to_stack@@Base>:
   12a68:	push	{r4, r5, fp, lr}
   12a6c:	add	fp, sp, #8
   12a70:	sub	sp, sp, #16
   12a74:	movw	r0, #61688	; 0xf0f8
   12a78:	movt	r0, #2
   12a7c:	ldm	r0, {r1, r2, r3, r5}
   12a80:	adds	r1, r1, #1
   12a84:	adc	r2, r2, #0
   12a88:	adds	r3, r3, #1
   12a8c:	adc	r5, r5, #0
   12a90:	stm	r0, {r1, r2, r3, r5}
   12a94:	add	r4, sp, #4
   12a98:	movw	r1, #52052	; 0xcb54
   12a9c:	movt	r1, #1
   12aa0:	mov	r0, r4
   12aa4:	bl	185dc <init_lexer@@Base>
   12aa8:	mov	r0, #8
   12aac:	bl	126c4 <malloc@plt>
   12ab0:	mov	r5, r0
   12ab4:	mov	r0, r4
   12ab8:	mov	r1, r5
   12abc:	bl	186c8 <push_back@@Base>
   12ac0:	ldr	r0, [sp, #8]
   12ac4:	ldr	r0, [r0, #4]
   12ac8:	mov	r1, #148	; 0x94
   12acc:	str	r1, [sp]
   12ad0:	mov	r1, r5
   12ad4:	mov	r2, #0
   12ad8:	mov	r3, #62	; 0x3e
   12adc:	bl	15118 <UnityAssertEqualNumber@@Base>
   12ae0:	mov	r0, r4
   12ae4:	bl	1861c <destroy_lexer@@Base>
   12ae8:	mov	r0, r5
   12aec:	bl	12634 <free@plt>
   12af0:	sub	sp, fp, #8
   12af4:	pop	{r4, r5, fp, pc}

00012af8 <push_two_tokens_to_stack@@Base>:
   12af8:	push	{r4, r5, r6, r7, fp, lr}
   12afc:	add	fp, sp, #16
   12b00:	sub	sp, sp, #16
   12b04:	movw	r0, #61704	; 0xf108
   12b08:	movt	r0, #2
   12b0c:	ldm	r0, {r1, r2, r3, r6}
   12b10:	adds	r1, r1, #1
   12b14:	adc	r2, r2, #0
   12b18:	adds	r3, r3, #1
   12b1c:	adc	r6, r6, #0
   12b20:	stm	r0, {r1, r2, r3, r6}
   12b24:	add	r4, sp, #4
   12b28:	movw	r1, #52052	; 0xcb54
   12b2c:	movt	r1, #1
   12b30:	mov	r0, r4
   12b34:	bl	185dc <init_lexer@@Base>
   12b38:	mov	r0, #8
   12b3c:	bl	126c4 <malloc@plt>
   12b40:	mov	r5, r0
   12b44:	mov	r0, #8
   12b48:	bl	126c4 <malloc@plt>
   12b4c:	mov	r6, r0
   12b50:	mov	r0, r4
   12b54:	mov	r1, r5
   12b58:	bl	186c8 <push_back@@Base>
   12b5c:	ldr	r0, [sp, #8]
   12b60:	ldr	r0, [r0, #4]
   12b64:	mov	r7, #148	; 0x94
   12b68:	str	r7, [sp]
   12b6c:	mov	r1, r5
   12b70:	mov	r2, #0
   12b74:	mov	r3, #86	; 0x56
   12b78:	bl	15118 <UnityAssertEqualNumber@@Base>
   12b7c:	mov	r0, r4
   12b80:	mov	r1, r6
   12b84:	bl	186c8 <push_back@@Base>
   12b88:	ldr	r0, [sp, #8]
   12b8c:	ldr	r0, [r0, #4]
   12b90:	str	r7, [sp]
   12b94:	mov	r1, r6
   12b98:	mov	r2, #0
   12b9c:	mov	r3, #88	; 0x58
   12ba0:	bl	15118 <UnityAssertEqualNumber@@Base>
   12ba4:	mov	r0, r4
   12ba8:	bl	1861c <destroy_lexer@@Base>
   12bac:	mov	r0, r5
   12bb0:	bl	12634 <free@plt>
   12bb4:	mov	r0, r6
   12bb8:	bl	12634 <free@plt>
   12bbc:	sub	sp, fp, #16
   12bc0:	pop	{r4, r5, r6, r7, fp, pc}

00012bc4 <push_token_and_call_next@@Base>:
   12bc4:	push	{r4, r5, fp, lr}
   12bc8:	add	fp, sp, #8
   12bcc:	sub	sp, sp, #16
   12bd0:	movw	r0, #61720	; 0xf118
   12bd4:	movt	r0, #2
   12bd8:	ldm	r0, {r1, r2, r3, r5}
   12bdc:	adds	r1, r1, #1
   12be0:	adc	r2, r2, #0
   12be4:	adds	r3, r3, #1
   12be8:	adc	r5, r5, #0
   12bec:	stm	r0, {r1, r2, r3, r5}
   12bf0:	add	r4, sp, #4
   12bf4:	movw	r1, #52052	; 0xcb54
   12bf8:	movt	r1, #1
   12bfc:	mov	r0, r4
   12c00:	bl	185dc <init_lexer@@Base>
   12c04:	mov	r0, #8
   12c08:	bl	126c4 <malloc@plt>
   12c0c:	mov	r5, r0
   12c10:	mov	r0, r4
   12c14:	mov	r1, r5
   12c18:	bl	186c8 <push_back@@Base>
   12c1c:	mov	r0, r4
   12c20:	bl	18824 <next@@Base>
   12c24:	mov	r1, r0
   12c28:	mov	r0, #148	; 0x94
   12c2c:	str	r0, [sp]
   12c30:	mov	r0, r5
   12c34:	mov	r2, #0
   12c38:	mov	r3, #113	; 0x71
   12c3c:	bl	15118 <UnityAssertEqualNumber@@Base>
   12c40:	mov	r0, r4
   12c44:	bl	1861c <destroy_lexer@@Base>
   12c48:	mov	r0, r5
   12c4c:	bl	12634 <free@plt>
   12c50:	sub	sp, fp, #8
   12c54:	pop	{r4, r5, fp, pc}

00012c58 <if_without_else@@Base>:
   12c58:	push	{r4, r5, fp, lr}
   12c5c:	add	fp, sp, #8
   12c60:	sub	sp, sp, #16
   12c64:	movw	r0, #61736	; 0xf128
   12c68:	movt	r0, #2
   12c6c:	ldm	r0, {r1, r2, r3, r5}
   12c70:	adds	r1, r1, #1
   12c74:	adc	r2, r2, #0
   12c78:	adds	r3, r3, #1
   12c7c:	adc	r5, r5, #0
   12c80:	stm	r0, {r1, r2, r3, r5}
   12c84:	add	r4, sp, #4
   12c88:	movw	r1, #52078	; 0xcb6e
   12c8c:	movt	r1, #1
   12c90:	mov	r0, r4
   12c94:	bl	185dc <init_lexer@@Base>
   12c98:	mov	r0, r4
   12c9c:	bl	18824 <next@@Base>
   12ca0:	ldr	r1, [r0]
   12ca4:	mov	r5, #148	; 0x94
   12ca8:	str	r5, [sp]
   12cac:	mov	r0, #0
   12cb0:	mov	r2, #0
   12cb4:	mov	r3, #140	; 0x8c
   12cb8:	bl	15118 <UnityAssertEqualNumber@@Base>
   12cbc:	mov	r0, r4
   12cc0:	bl	18824 <next@@Base>
   12cc4:	ldr	r1, [r0]
   12cc8:	str	r5, [sp]
   12ccc:	mov	r0, #2
   12cd0:	mov	r2, #0
   12cd4:	mov	r3, #142	; 0x8e
   12cd8:	bl	15118 <UnityAssertEqualNumber@@Base>
   12cdc:	mov	r0, r4
   12ce0:	bl	18824 <next@@Base>
   12ce4:	ldr	r1, [r0]
   12ce8:	str	r5, [sp]
   12cec:	mov	r0, #3
   12cf0:	mov	r2, #0
   12cf4:	mov	r3, #144	; 0x90
   12cf8:	bl	15118 <UnityAssertEqualNumber@@Base>
   12cfc:	mov	r0, r4
   12d00:	bl	18824 <next@@Base>
   12d04:	ldr	r1, [r0]
   12d08:	str	r5, [sp]
   12d0c:	mov	r0, #4
   12d10:	mov	r2, #0
   12d14:	mov	r3, #146	; 0x92
   12d18:	bl	15118 <UnityAssertEqualNumber@@Base>
   12d1c:	mov	r0, r4
   12d20:	bl	18824 <next@@Base>
   12d24:	ldr	r1, [r0]
   12d28:	str	r5, [sp]
   12d2c:	mov	r0, #5
   12d30:	mov	r2, #0
   12d34:	mov	r3, #148	; 0x94
   12d38:	bl	15118 <UnityAssertEqualNumber@@Base>
   12d3c:	mov	r0, r4
   12d40:	bl	18824 <next@@Base>
   12d44:	ldr	r1, [r0]
   12d48:	str	r5, [sp]
   12d4c:	mov	r0, #10
   12d50:	mov	r2, #0
   12d54:	mov	r3, #150	; 0x96
   12d58:	bl	15118 <UnityAssertEqualNumber@@Base>
   12d5c:	mov	r0, r4
   12d60:	bl	18824 <next@@Base>
   12d64:	ldr	r1, [r0]
   12d68:	str	r5, [sp]
   12d6c:	mov	r0, #3
   12d70:	mov	r2, #0
   12d74:	mov	r3, #152	; 0x98
   12d78:	bl	15118 <UnityAssertEqualNumber@@Base>
   12d7c:	mov	r0, r4
   12d80:	bl	18824 <next@@Base>
   12d84:	ldr	r1, [r0]
   12d88:	str	r5, [sp]
   12d8c:	mov	r0, #1
   12d90:	mov	r2, #0
   12d94:	mov	r3, #154	; 0x9a
   12d98:	bl	15118 <UnityAssertEqualNumber@@Base>
   12d9c:	mov	r0, r4
   12da0:	bl	18824 <next@@Base>
   12da4:	ldr	r1, [r0]
   12da8:	str	r5, [sp]
   12dac:	mov	r0, #12
   12db0:	mov	r2, #0
   12db4:	mov	r3, #156	; 0x9c
   12db8:	bl	15118 <UnityAssertEqualNumber@@Base>
   12dbc:	mov	r0, r4
   12dc0:	bl	18824 <next@@Base>
   12dc4:	ldr	r1, [r0]
   12dc8:	str	r5, [sp]
   12dcc:	mov	r0, #1
   12dd0:	mov	r2, #0
   12dd4:	mov	r3, #158	; 0x9e
   12dd8:	bl	15118 <UnityAssertEqualNumber@@Base>
   12ddc:	mov	r0, r4
   12de0:	bl	18824 <next@@Base>
   12de4:	ldr	r1, [r0]
   12de8:	str	r5, [sp]
   12dec:	mov	r0, #4
   12df0:	mov	r2, #0
   12df4:	mov	r3, #160	; 0xa0
   12df8:	bl	15118 <UnityAssertEqualNumber@@Base>
   12dfc:	mov	r0, r4
   12e00:	bl	18824 <next@@Base>
   12e04:	ldr	r1, [r0]
   12e08:	str	r5, [sp]
   12e0c:	mov	r0, #5
   12e10:	mov	r2, #0
   12e14:	mov	r3, #162	; 0xa2
   12e18:	bl	15118 <UnityAssertEqualNumber@@Base>
   12e1c:	mov	r0, r4
   12e20:	bl	18824 <next@@Base>
   12e24:	ldr	r1, [r0]
   12e28:	str	r5, [sp]
   12e2c:	mov	r0, #7
   12e30:	mov	r2, #0
   12e34:	mov	r3, #164	; 0xa4
   12e38:	bl	15118 <UnityAssertEqualNumber@@Base>
   12e3c:	mov	r0, r4
   12e40:	bl	18824 <next@@Base>
   12e44:	ldr	r1, [r0]
   12e48:	str	r5, [sp]
   12e4c:	mov	r0, #1
   12e50:	mov	r2, #0
   12e54:	mov	r3, #166	; 0xa6
   12e58:	bl	15118 <UnityAssertEqualNumber@@Base>
   12e5c:	mov	r0, r4
   12e60:	bl	18824 <next@@Base>
   12e64:	ldr	r1, [r0]
   12e68:	str	r5, [sp]
   12e6c:	mov	r0, #8
   12e70:	mov	r2, #0
   12e74:	mov	r3, #168	; 0xa8
   12e78:	bl	15118 <UnityAssertEqualNumber@@Base>
   12e7c:	mov	r0, r4
   12e80:	bl	18824 <next@@Base>
   12e84:	ldr	r1, [r0]
   12e88:	str	r5, [sp]
   12e8c:	mov	r0, #6
   12e90:	mov	r2, #0
   12e94:	mov	r3, #170	; 0xaa
   12e98:	bl	15118 <UnityAssertEqualNumber@@Base>
   12e9c:	mov	r0, r4
   12ea0:	bl	18824 <next@@Base>
   12ea4:	ldr	r1, [r0]
   12ea8:	str	r5, [sp]
   12eac:	mov	r0, #7
   12eb0:	mov	r2, #0
   12eb4:	mov	r3, #172	; 0xac
   12eb8:	bl	15118 <UnityAssertEqualNumber@@Base>
   12ebc:	mov	r0, r4
   12ec0:	bl	18824 <next@@Base>
   12ec4:	ldr	r1, [r0]
   12ec8:	str	r5, [sp]
   12ecc:	mov	r0, #1
   12ed0:	mov	r2, #0
   12ed4:	mov	r3, #174	; 0xae
   12ed8:	bl	15118 <UnityAssertEqualNumber@@Base>
   12edc:	mov	r0, r4
   12ee0:	bl	18824 <next@@Base>
   12ee4:	ldr	r1, [r0]
   12ee8:	str	r5, [sp]
   12eec:	mov	r0, #8
   12ef0:	mov	r2, #0
   12ef4:	mov	r3, #176	; 0xb0
   12ef8:	bl	15118 <UnityAssertEqualNumber@@Base>
   12efc:	mov	r0, r4
   12f00:	bl	18824 <next@@Base>
   12f04:	ldr	r1, [r0]
   12f08:	str	r5, [sp]
   12f0c:	mov	r0, #6
   12f10:	mov	r2, #0
   12f14:	mov	r3, #178	; 0xb2
   12f18:	bl	15118 <UnityAssertEqualNumber@@Base>
   12f1c:	mov	r0, r4
   12f20:	bl	18824 <next@@Base>
   12f24:	ldr	r1, [r0]
   12f28:	str	r5, [sp]
   12f2c:	mov	r0, #9
   12f30:	mov	r2, #0
   12f34:	mov	r3, #180	; 0xb4
   12f38:	bl	15118 <UnityAssertEqualNumber@@Base>
   12f3c:	mov	r0, r4
   12f40:	bl	1861c <destroy_lexer@@Base>
   12f44:	sub	sp, fp, #8
   12f48:	pop	{r4, r5, fp, pc}

00012f4c <if_with_else@@Base>:
   12f4c:	push	{r4, r5, fp, lr}
   12f50:	add	fp, sp, #8
   12f54:	sub	sp, sp, #16
   12f58:	movw	r0, #61752	; 0xf138
   12f5c:	movt	r0, #2
   12f60:	ldm	r0, {r1, r2, r3, r5}
   12f64:	adds	r1, r1, #1
   12f68:	adc	r2, r2, #0
   12f6c:	adds	r3, r3, #1
   12f70:	adc	r5, r5, #0
   12f74:	stm	r0, {r1, r2, r3, r5}
   12f78:	add	r4, sp, #4
   12f7c:	movw	r1, #52135	; 0xcba7
   12f80:	movt	r1, #1
   12f84:	mov	r0, r4
   12f88:	bl	185dc <init_lexer@@Base>
   12f8c:	mov	r0, r4
   12f90:	bl	18824 <next@@Base>
   12f94:	ldr	r1, [r0]
   12f98:	mov	r5, #148	; 0x94
   12f9c:	str	r5, [sp]
   12fa0:	mov	r0, #0
   12fa4:	mov	r2, #0
   12fa8:	mov	r3, #210	; 0xd2
   12fac:	bl	15118 <UnityAssertEqualNumber@@Base>
   12fb0:	mov	r0, r4
   12fb4:	bl	18824 <next@@Base>
   12fb8:	ldr	r1, [r0]
   12fbc:	str	r5, [sp]
   12fc0:	mov	r0, #2
   12fc4:	mov	r2, #0
   12fc8:	mov	r3, #212	; 0xd4
   12fcc:	bl	15118 <UnityAssertEqualNumber@@Base>
   12fd0:	mov	r0, r4
   12fd4:	bl	18824 <next@@Base>
   12fd8:	ldr	r1, [r0]
   12fdc:	str	r5, [sp]
   12fe0:	mov	r0, #3
   12fe4:	mov	r2, #0
   12fe8:	mov	r3, #214	; 0xd6
   12fec:	bl	15118 <UnityAssertEqualNumber@@Base>
   12ff0:	mov	r0, r4
   12ff4:	bl	18824 <next@@Base>
   12ff8:	ldr	r1, [r0]
   12ffc:	str	r5, [sp]
   13000:	mov	r0, #4
   13004:	mov	r2, #0
   13008:	mov	r3, #216	; 0xd8
   1300c:	bl	15118 <UnityAssertEqualNumber@@Base>
   13010:	mov	r0, r4
   13014:	bl	18824 <next@@Base>
   13018:	ldr	r1, [r0]
   1301c:	str	r5, [sp]
   13020:	mov	r0, #5
   13024:	mov	r2, #0
   13028:	mov	r3, #218	; 0xda
   1302c:	bl	15118 <UnityAssertEqualNumber@@Base>
   13030:	mov	r0, r4
   13034:	bl	18824 <next@@Base>
   13038:	ldr	r1, [r0]
   1303c:	str	r5, [sp]
   13040:	mov	r0, #10
   13044:	mov	r2, #0
   13048:	mov	r3, #220	; 0xdc
   1304c:	bl	15118 <UnityAssertEqualNumber@@Base>
   13050:	mov	r0, r4
   13054:	bl	18824 <next@@Base>
   13058:	ldr	r1, [r0]
   1305c:	str	r5, [sp]
   13060:	mov	r0, #3
   13064:	mov	r2, #0
   13068:	mov	r3, #222	; 0xde
   1306c:	bl	15118 <UnityAssertEqualNumber@@Base>
   13070:	mov	r0, r4
   13074:	bl	18824 <next@@Base>
   13078:	ldr	r1, [r0]
   1307c:	str	r5, [sp]
   13080:	mov	r0, #1
   13084:	mov	r2, #0
   13088:	mov	r3, #224	; 0xe0
   1308c:	bl	15118 <UnityAssertEqualNumber@@Base>
   13090:	mov	r0, r4
   13094:	bl	18824 <next@@Base>
   13098:	ldr	r1, [r0]
   1309c:	str	r5, [sp]
   130a0:	mov	r0, #12
   130a4:	mov	r2, #0
   130a8:	mov	r3, #226	; 0xe2
   130ac:	bl	15118 <UnityAssertEqualNumber@@Base>
   130b0:	mov	r0, r4
   130b4:	bl	18824 <next@@Base>
   130b8:	ldr	r1, [r0]
   130bc:	str	r5, [sp]
   130c0:	mov	r0, #1
   130c4:	mov	r2, #0
   130c8:	mov	r3, #228	; 0xe4
   130cc:	bl	15118 <UnityAssertEqualNumber@@Base>
   130d0:	mov	r0, r4
   130d4:	bl	18824 <next@@Base>
   130d8:	ldr	r1, [r0]
   130dc:	str	r5, [sp]
   130e0:	mov	r0, #4
   130e4:	mov	r2, #0
   130e8:	mov	r3, #230	; 0xe6
   130ec:	bl	15118 <UnityAssertEqualNumber@@Base>
   130f0:	mov	r0, r4
   130f4:	bl	18824 <next@@Base>
   130f8:	ldr	r1, [r0]
   130fc:	str	r5, [sp]
   13100:	mov	r0, #5
   13104:	mov	r2, #0
   13108:	mov	r3, #232	; 0xe8
   1310c:	bl	15118 <UnityAssertEqualNumber@@Base>
   13110:	mov	r0, r4
   13114:	bl	18824 <next@@Base>
   13118:	ldr	r1, [r0]
   1311c:	str	r5, [sp]
   13120:	mov	r0, #7
   13124:	mov	r2, #0
   13128:	mov	r3, #234	; 0xea
   1312c:	bl	15118 <UnityAssertEqualNumber@@Base>
   13130:	mov	r0, r4
   13134:	bl	18824 <next@@Base>
   13138:	ldr	r1, [r0]
   1313c:	str	r5, [sp]
   13140:	mov	r0, #1
   13144:	mov	r2, #0
   13148:	mov	r3, #236	; 0xec
   1314c:	bl	15118 <UnityAssertEqualNumber@@Base>
   13150:	mov	r0, r4
   13154:	bl	18824 <next@@Base>
   13158:	ldr	r1, [r0]
   1315c:	str	r5, [sp]
   13160:	mov	r0, #8
   13164:	mov	r2, #0
   13168:	mov	r3, #238	; 0xee
   1316c:	bl	15118 <UnityAssertEqualNumber@@Base>
   13170:	mov	r0, r4
   13174:	bl	18824 <next@@Base>
   13178:	ldr	r1, [r0]
   1317c:	str	r5, [sp]
   13180:	mov	r0, #6
   13184:	mov	r2, #0
   13188:	mov	r3, #240	; 0xf0
   1318c:	bl	15118 <UnityAssertEqualNumber@@Base>
   13190:	mov	r0, r4
   13194:	bl	18824 <next@@Base>
   13198:	ldr	r1, [r0]
   1319c:	str	r5, [sp]
   131a0:	mov	r0, #11
   131a4:	mov	r2, #0
   131a8:	mov	r3, #242	; 0xf2
   131ac:	bl	15118 <UnityAssertEqualNumber@@Base>
   131b0:	mov	r0, r4
   131b4:	bl	18824 <next@@Base>
   131b8:	ldr	r1, [r0]
   131bc:	str	r5, [sp]
   131c0:	mov	r0, #5
   131c4:	mov	r2, #0
   131c8:	mov	r3, #244	; 0xf4
   131cc:	bl	15118 <UnityAssertEqualNumber@@Base>
   131d0:	mov	r0, r4
   131d4:	bl	18824 <next@@Base>
   131d8:	ldr	r1, [r0]
   131dc:	str	r5, [sp]
   131e0:	mov	r0, #7
   131e4:	mov	r2, #0
   131e8:	mov	r3, #246	; 0xf6
   131ec:	bl	15118 <UnityAssertEqualNumber@@Base>
   131f0:	mov	r0, r4
   131f4:	bl	18824 <next@@Base>
   131f8:	ldr	r1, [r0]
   131fc:	str	r5, [sp]
   13200:	mov	r0, #1
   13204:	mov	r2, #0
   13208:	mov	r3, #248	; 0xf8
   1320c:	bl	15118 <UnityAssertEqualNumber@@Base>
   13210:	mov	r0, r4
   13214:	bl	18824 <next@@Base>
   13218:	ldr	r1, [r0]
   1321c:	str	r5, [sp]
   13220:	mov	r0, #8
   13224:	mov	r2, #0
   13228:	mov	r3, #250	; 0xfa
   1322c:	bl	15118 <UnityAssertEqualNumber@@Base>
   13230:	mov	r0, r4
   13234:	bl	18824 <next@@Base>
   13238:	ldr	r1, [r0]
   1323c:	str	r5, [sp]
   13240:	mov	r0, #6
   13244:	mov	r2, #0
   13248:	mov	r3, #252	; 0xfc
   1324c:	bl	15118 <UnityAssertEqualNumber@@Base>
   13250:	mov	r0, r4
   13254:	bl	18824 <next@@Base>
   13258:	ldr	r1, [r0]
   1325c:	str	r5, [sp]
   13260:	mov	r0, #7
   13264:	mov	r2, #0
   13268:	mov	r3, #254	; 0xfe
   1326c:	bl	15118 <UnityAssertEqualNumber@@Base>
   13270:	mov	r0, r4
   13274:	bl	18824 <next@@Base>
   13278:	ldr	r1, [r0]
   1327c:	str	r5, [sp]
   13280:	mov	r0, #1
   13284:	mov	r2, #0
   13288:	mov	r3, #256	; 0x100
   1328c:	bl	15118 <UnityAssertEqualNumber@@Base>
   13290:	mov	r0, r4
   13294:	bl	18824 <next@@Base>
   13298:	ldr	r1, [r0]
   1329c:	str	r5, [sp]
   132a0:	mov	r0, #8
   132a4:	mov	r2, #0
   132a8:	movw	r3, #258	; 0x102
   132ac:	bl	15118 <UnityAssertEqualNumber@@Base>
   132b0:	mov	r0, r4
   132b4:	bl	18824 <next@@Base>
   132b8:	ldr	r1, [r0]
   132bc:	str	r5, [sp]
   132c0:	mov	r0, #6
   132c4:	mov	r2, #0
   132c8:	mov	r3, #260	; 0x104
   132cc:	bl	15118 <UnityAssertEqualNumber@@Base>
   132d0:	mov	r0, r4
   132d4:	bl	18824 <next@@Base>
   132d8:	ldr	r1, [r0]
   132dc:	str	r5, [sp]
   132e0:	mov	r0, #9
   132e4:	mov	r2, #0
   132e8:	movw	r3, #262	; 0x106
   132ec:	bl	15118 <UnityAssertEqualNumber@@Base>
   132f0:	mov	r0, r4
   132f4:	bl	1861c <destroy_lexer@@Base>
   132f8:	sub	sp, fp, #8
   132fc:	pop	{r4, r5, fp, pc}

00013300 <read_token_int_type@@Base>:
   13300:	push	{r4, sl, fp, lr}
   13304:	add	fp, sp, #8
   13308:	sub	sp, sp, #16
   1330c:	movw	r0, #61768	; 0xf148
   13310:	movt	r0, #2
   13314:	ldm	r0, {r1, r2, r3, r4}
   13318:	adds	r1, r1, #1
   1331c:	adc	r2, r2, #0
   13320:	adds	r3, r3, #1
   13324:	adc	r4, r4, #0
   13328:	stm	r0, {r1, r2, r3, r4}
   1332c:	add	r4, sp, #4
   13330:	movw	r1, #56635	; 0xdd3b
   13334:	movt	r1, #1
   13338:	mov	r0, r4
   1333c:	bl	185dc <init_lexer@@Base>
   13340:	mov	r0, r4
   13344:	bl	18824 <next@@Base>
   13348:	ldr	r1, [r0]
   1334c:	mov	r0, #148	; 0x94
   13350:	str	r0, [sp]
   13354:	mov	r0, #0
   13358:	mov	r2, #0
   1335c:	movw	r3, #279	; 0x117
   13360:	bl	15118 <UnityAssertEqualNumber@@Base>
   13364:	mov	r0, r4
   13368:	bl	1861c <destroy_lexer@@Base>
   1336c:	sub	sp, fp, #8
   13370:	pop	{r4, sl, fp, pc}

00013374 <read_token_int_value@@Base>:
   13374:	push	{r4, sl, fp, lr}
   13378:	add	fp, sp, #8
   1337c:	sub	sp, sp, #16
   13380:	movw	r0, #61784	; 0xf158
   13384:	movt	r0, #2
   13388:	ldm	r0, {r1, r2, r3, r4}
   1338c:	adds	r1, r1, #1
   13390:	adc	r2, r2, #0
   13394:	adds	r3, r3, #1
   13398:	adc	r4, r4, #0
   1339c:	stm	r0, {r1, r2, r3, r4}
   133a0:	add	r4, sp, #4
   133a4:	movw	r1, #52216	; 0xcbf8
   133a8:	movt	r1, #1
   133ac:	mov	r0, r4
   133b0:	bl	185dc <init_lexer@@Base>
   133b4:	mov	r0, r4
   133b8:	bl	18824 <next@@Base>
   133bc:	ldr	r1, [r0]
   133c0:	mov	r0, #148	; 0x94
   133c4:	str	r0, [sp]
   133c8:	mov	r0, #1
   133cc:	mov	r2, #0
   133d0:	mov	r3, #296	; 0x128
   133d4:	bl	15118 <UnityAssertEqualNumber@@Base>
   133d8:	mov	r0, r4
   133dc:	bl	1861c <destroy_lexer@@Base>
   133e0:	sub	sp, fp, #8
   133e4:	pop	{r4, sl, fp, pc}

000133e8 <read_token_function@@Base>:
   133e8:	push	{r4, sl, fp, lr}
   133ec:	add	fp, sp, #8
   133f0:	sub	sp, sp, #16
   133f4:	movw	r0, #61800	; 0xf168
   133f8:	movt	r0, #2
   133fc:	ldm	r0, {r1, r2, r3, r4}
   13400:	adds	r1, r1, #1
   13404:	adc	r2, r2, #0
   13408:	adds	r3, r3, #1
   1340c:	adc	r4, r4, #0
   13410:	stm	r0, {r1, r2, r3, r4}
   13414:	add	r4, sp, #4
   13418:	movw	r1, #52336	; 0xcc70
   1341c:	movt	r1, #1
   13420:	mov	r0, r4
   13424:	bl	185dc <init_lexer@@Base>
   13428:	mov	r0, r4
   1342c:	bl	18824 <next@@Base>
   13430:	ldr	r1, [r0]
   13434:	mov	r0, #148	; 0x94
   13438:	str	r0, [sp]
   1343c:	mov	r0, #2
   13440:	mov	r2, #0
   13444:	movw	r3, #313	; 0x139
   13448:	bl	15118 <UnityAssertEqualNumber@@Base>
   1344c:	mov	r0, r4
   13450:	bl	1861c <destroy_lexer@@Base>
   13454:	sub	sp, fp, #8
   13458:	pop	{r4, sl, fp, pc}

0001345c <read_token_opar@@Base>:
   1345c:	push	{r4, sl, fp, lr}
   13460:	add	fp, sp, #8
   13464:	sub	sp, sp, #16
   13468:	movw	r0, #61816	; 0xf178
   1346c:	movt	r0, #2
   13470:	ldm	r0, {r1, r2, r3, r4}
   13474:	adds	r1, r1, #1
   13478:	adc	r2, r2, #0
   1347c:	adds	r3, r3, #1
   13480:	adc	r4, r4, #0
   13484:	stm	r0, {r1, r2, r3, r4}
   13488:	add	r4, sp, #4
   1348c:	movw	r1, #52221	; 0xcbfd
   13490:	movt	r1, #1
   13494:	mov	r0, r4
   13498:	bl	185dc <init_lexer@@Base>
   1349c:	mov	r0, r4
   134a0:	bl	18824 <next@@Base>
   134a4:	ldr	r1, [r0]
   134a8:	mov	r0, #148	; 0x94
   134ac:	str	r0, [sp]
   134b0:	mov	r0, #3
   134b4:	mov	r2, #0
   134b8:	movw	r3, #330	; 0x14a
   134bc:	bl	15118 <UnityAssertEqualNumber@@Base>
   134c0:	mov	r0, r4
   134c4:	bl	1861c <destroy_lexer@@Base>
   134c8:	sub	sp, fp, #8
   134cc:	pop	{r4, sl, fp, pc}

000134d0 <read_token_cpar@@Base>:
   134d0:	push	{r4, sl, fp, lr}
   134d4:	add	fp, sp, #8
   134d8:	sub	sp, sp, #16
   134dc:	movw	r0, #61832	; 0xf188
   134e0:	movt	r0, #2
   134e4:	ldm	r0, {r1, r2, r3, r4}
   134e8:	adds	r1, r1, #1
   134ec:	adc	r2, r2, #0
   134f0:	adds	r3, r3, #1
   134f4:	adc	r4, r4, #0
   134f8:	stm	r0, {r1, r2, r3, r4}
   134fc:	add	r4, sp, #4
   13500:	movw	r1, #52223	; 0xcbff
   13504:	movt	r1, #1
   13508:	mov	r0, r4
   1350c:	bl	185dc <init_lexer@@Base>
   13510:	mov	r0, r4
   13514:	bl	18824 <next@@Base>
   13518:	ldr	r1, [r0]
   1351c:	mov	r0, #148	; 0x94
   13520:	str	r0, [sp]
   13524:	mov	r0, #4
   13528:	mov	r2, #0
   1352c:	movw	r3, #347	; 0x15b
   13530:	bl	15118 <UnityAssertEqualNumber@@Base>
   13534:	mov	r0, r4
   13538:	bl	1861c <destroy_lexer@@Base>
   1353c:	sub	sp, fp, #8
   13540:	pop	{r4, sl, fp, pc}

00013544 <read_token_obra@@Base>:
   13544:	push	{r4, sl, fp, lr}
   13548:	add	fp, sp, #8
   1354c:	sub	sp, sp, #16
   13550:	movw	r0, #61848	; 0xf198
   13554:	movt	r0, #2
   13558:	ldm	r0, {r1, r2, r3, r4}
   1355c:	adds	r1, r1, #1
   13560:	adc	r2, r2, #0
   13564:	adds	r3, r3, #1
   13568:	adc	r4, r4, #0
   1356c:	stm	r0, {r1, r2, r3, r4}
   13570:	add	r4, sp, #4
   13574:	movw	r1, #52225	; 0xcc01
   13578:	movt	r1, #1
   1357c:	mov	r0, r4
   13580:	bl	185dc <init_lexer@@Base>
   13584:	mov	r0, r4
   13588:	bl	18824 <next@@Base>
   1358c:	ldr	r1, [r0]
   13590:	mov	r0, #148	; 0x94
   13594:	str	r0, [sp]
   13598:	mov	r0, #5
   1359c:	mov	r2, #0
   135a0:	mov	r3, #364	; 0x16c
   135a4:	bl	15118 <UnityAssertEqualNumber@@Base>
   135a8:	mov	r0, r4
   135ac:	bl	1861c <destroy_lexer@@Base>
   135b0:	sub	sp, fp, #8
   135b4:	pop	{r4, sl, fp, pc}

000135b8 <read_token_cbra@@Base>:
   135b8:	push	{r4, sl, fp, lr}
   135bc:	add	fp, sp, #8
   135c0:	sub	sp, sp, #16
   135c4:	movw	r0, #61864	; 0xf1a8
   135c8:	movt	r0, #2
   135cc:	ldm	r0, {r1, r2, r3, r4}
   135d0:	adds	r1, r1, #1
   135d4:	adc	r2, r2, #0
   135d8:	adds	r3, r3, #1
   135dc:	adc	r4, r4, #0
   135e0:	stm	r0, {r1, r2, r3, r4}
   135e4:	add	r4, sp, #4
   135e8:	movw	r1, #52076	; 0xcb6c
   135ec:	movt	r1, #1
   135f0:	mov	r0, r4
   135f4:	bl	185dc <init_lexer@@Base>
   135f8:	mov	r0, r4
   135fc:	bl	18824 <next@@Base>
   13600:	ldr	r1, [r0]
   13604:	mov	r0, #148	; 0x94
   13608:	str	r0, [sp]
   1360c:	mov	r0, #6
   13610:	mov	r2, #0
   13614:	movw	r3, #382	; 0x17e
   13618:	bl	15118 <UnityAssertEqualNumber@@Base>
   1361c:	mov	r0, r4
   13620:	bl	1861c <destroy_lexer@@Base>
   13624:	sub	sp, fp, #8
   13628:	pop	{r4, sl, fp, pc}

0001362c <read_token_return@@Base>:
   1362c:	push	{r4, sl, fp, lr}
   13630:	add	fp, sp, #8
   13634:	sub	sp, sp, #16
   13638:	movw	r0, #61880	; 0xf1b8
   1363c:	movt	r0, #2
   13640:	ldm	r0, {r1, r2, r3, r4}
   13644:	adds	r1, r1, #1
   13648:	adc	r2, r2, #0
   1364c:	adds	r3, r3, #1
   13650:	adc	r4, r4, #0
   13654:	stm	r0, {r1, r2, r3, r4}
   13658:	add	r4, sp, #4
   1365c:	movw	r1, #52576	; 0xcd60
   13660:	movt	r1, #1
   13664:	mov	r0, r4
   13668:	bl	185dc <init_lexer@@Base>
   1366c:	mov	r0, r4
   13670:	bl	18824 <next@@Base>
   13674:	ldr	r1, [r0]
   13678:	mov	r0, #148	; 0x94
   1367c:	str	r0, [sp]
   13680:	mov	r0, #7
   13684:	mov	r2, #0
   13688:	movw	r3, #399	; 0x18f
   1368c:	bl	15118 <UnityAssertEqualNumber@@Base>
   13690:	mov	r0, r4
   13694:	bl	1861c <destroy_lexer@@Base>
   13698:	sub	sp, fp, #8
   1369c:	pop	{r4, sl, fp, pc}

000136a0 <read_token_semicolon@@Base>:
   136a0:	push	{r4, sl, fp, lr}
   136a4:	add	fp, sp, #8
   136a8:	sub	sp, sp, #16
   136ac:	movw	r0, #61896	; 0xf1c8
   136b0:	movt	r0, #2
   136b4:	ldm	r0, {r1, r2, r3, r4}
   136b8:	adds	r1, r1, #1
   136bc:	adc	r2, r2, #0
   136c0:	adds	r3, r3, #1
   136c4:	adc	r4, r4, #0
   136c8:	stm	r0, {r1, r2, r3, r4}
   136cc:	add	r4, sp, #4
   136d0:	movw	r1, #52227	; 0xcc03
   136d4:	movt	r1, #1
   136d8:	mov	r0, r4
   136dc:	bl	185dc <init_lexer@@Base>
   136e0:	mov	r0, r4
   136e4:	bl	18824 <next@@Base>
   136e8:	ldr	r1, [r0]
   136ec:	mov	r0, #148	; 0x94
   136f0:	str	r0, [sp]
   136f4:	mov	r0, #8
   136f8:	mov	r2, #0
   136fc:	mov	r3, #416	; 0x1a0
   13700:	bl	15118 <UnityAssertEqualNumber@@Base>
   13704:	mov	r0, r4
   13708:	bl	1861c <destroy_lexer@@Base>
   1370c:	sub	sp, fp, #8
   13710:	pop	{r4, sl, fp, pc}

00013714 <read_token_eof@@Base>:
   13714:	push	{r4, sl, fp, lr}
   13718:	add	fp, sp, #8
   1371c:	sub	sp, sp, #16
   13720:	movw	r0, #61912	; 0xf1d8
   13724:	movt	r0, #2
   13728:	ldm	r0, {r1, r2, r3, r4}
   1372c:	adds	r1, r1, #1
   13730:	adc	r2, r2, #0
   13734:	adds	r3, r3, #1
   13738:	adc	r4, r4, #0
   1373c:	stm	r0, {r1, r2, r3, r4}
   13740:	add	r4, sp, #4
   13744:	movw	r1, #59201	; 0xe741
   13748:	movt	r1, #1
   1374c:	mov	r0, r4
   13750:	bl	185dc <init_lexer@@Base>
   13754:	mov	r0, r4
   13758:	bl	18824 <next@@Base>
   1375c:	ldr	r1, [r0]
   13760:	mov	r0, #148	; 0x94
   13764:	str	r0, [sp]
   13768:	mov	r0, #9
   1376c:	mov	r2, #0
   13770:	movw	r3, #433	; 0x1b1
   13774:	bl	15118 <UnityAssertEqualNumber@@Base>
   13778:	mov	r0, r4
   1377c:	bl	1861c <destroy_lexer@@Base>
   13780:	sub	sp, fp, #8
   13784:	pop	{r4, sl, fp, pc}

00013788 <read_token_if@@Base>:
   13788:	push	{r4, sl, fp, lr}
   1378c:	add	fp, sp, #8
   13790:	sub	sp, sp, #16
   13794:	movw	r0, #61928	; 0xf1e8
   13798:	movt	r0, #2
   1379c:	ldm	r0, {r1, r2, r3, r4}
   137a0:	adds	r1, r1, #1
   137a4:	adc	r2, r2, #0
   137a8:	adds	r3, r3, #1
   137ac:	adc	r4, r4, #0
   137b0:	stm	r0, {r1, r2, r3, r4}
   137b4:	add	r4, sp, #4
   137b8:	movw	r1, #52630	; 0xcd96
   137bc:	movt	r1, #1
   137c0:	mov	r0, r4
   137c4:	bl	185dc <init_lexer@@Base>
   137c8:	mov	r0, r4
   137cc:	bl	18824 <next@@Base>
   137d0:	ldr	r1, [r0]
   137d4:	mov	r0, #148	; 0x94
   137d8:	str	r0, [sp]
   137dc:	mov	r0, #10
   137e0:	mov	r2, #0
   137e4:	movw	r3, #450	; 0x1c2
   137e8:	bl	15118 <UnityAssertEqualNumber@@Base>
   137ec:	mov	r0, r4
   137f0:	bl	1861c <destroy_lexer@@Base>
   137f4:	sub	sp, fp, #8
   137f8:	pop	{r4, sl, fp, pc}

000137fc <read_token_else@@Base>:
   137fc:	push	{r4, sl, fp, lr}
   13800:	add	fp, sp, #8
   13804:	sub	sp, sp, #16
   13808:	movw	r0, #61944	; 0xf1f8
   1380c:	movt	r0, #2
   13810:	ldm	r0, {r1, r2, r3, r4}
   13814:	adds	r1, r1, #1
   13818:	adc	r2, r2, #0
   1381c:	adds	r3, r3, #1
   13820:	adc	r4, r4, #0
   13824:	stm	r0, {r1, r2, r3, r4}
   13828:	add	r4, sp, #4
   1382c:	movw	r1, #52435	; 0xccd3
   13830:	movt	r1, #1
   13834:	mov	r0, r4
   13838:	bl	185dc <init_lexer@@Base>
   1383c:	mov	r0, r4
   13840:	bl	18824 <next@@Base>
   13844:	ldr	r1, [r0]
   13848:	mov	r0, #148	; 0x94
   1384c:	str	r0, [sp]
   13850:	mov	r0, #11
   13854:	mov	r2, #0
   13858:	movw	r3, #467	; 0x1d3
   1385c:	bl	15118 <UnityAssertEqualNumber@@Base>
   13860:	mov	r0, r4
   13864:	bl	1861c <destroy_lexer@@Base>
   13868:	sub	sp, fp, #8
   1386c:	pop	{r4, sl, fp, pc}

00013870 <read_token_equalequal@@Base>:
   13870:	push	{r4, sl, fp, lr}
   13874:	add	fp, sp, #8
   13878:	sub	sp, sp, #16
   1387c:	movw	r0, #61960	; 0xf208
   13880:	movt	r0, #2
   13884:	ldm	r0, {r1, r2, r3, r4}
   13888:	adds	r1, r1, #1
   1388c:	adc	r2, r2, #0
   13890:	adds	r3, r3, #1
   13894:	adc	r4, r4, #0
   13898:	stm	r0, {r1, r2, r3, r4}
   1389c:	add	r4, sp, #4
   138a0:	movw	r1, #52229	; 0xcc05
   138a4:	movt	r1, #1
   138a8:	mov	r0, r4
   138ac:	bl	185dc <init_lexer@@Base>
   138b0:	mov	r0, r4
   138b4:	bl	18824 <next@@Base>
   138b8:	ldr	r1, [r0]
   138bc:	mov	r0, #148	; 0x94
   138c0:	str	r0, [sp]
   138c4:	mov	r0, #12
   138c8:	mov	r2, #0
   138cc:	mov	r3, #484	; 0x1e4
   138d0:	bl	15118 <UnityAssertEqualNumber@@Base>
   138d4:	mov	r0, r4
   138d8:	bl	1861c <destroy_lexer@@Base>
   138dc:	sub	sp, fp, #8
   138e0:	pop	{r4, sl, fp, pc}

000138e4 <read_token_notequal@@Base>:
   138e4:	push	{r4, sl, fp, lr}
   138e8:	add	fp, sp, #8
   138ec:	sub	sp, sp, #16
   138f0:	movw	r0, #61976	; 0xf218
   138f4:	movt	r0, #2
   138f8:	ldm	r0, {r1, r2, r3, r4}
   138fc:	adds	r1, r1, #1
   13900:	adc	r2, r2, #0
   13904:	adds	r3, r3, #1
   13908:	adc	r4, r4, #0
   1390c:	stm	r0, {r1, r2, r3, r4}
   13910:	add	r4, sp, #4
   13914:	movw	r1, #52232	; 0xcc08
   13918:	movt	r1, #1
   1391c:	mov	r0, r4
   13920:	bl	185dc <init_lexer@@Base>
   13924:	mov	r0, r4
   13928:	bl	18824 <next@@Base>
   1392c:	ldr	r1, [r0]
   13930:	mov	r0, #148	; 0x94
   13934:	str	r0, [sp]
   13938:	mov	r0, #12
   1393c:	mov	r2, #0
   13940:	movw	r3, #501	; 0x1f5
   13944:	bl	15118 <UnityAssertEqualNumber@@Base>
   13948:	mov	r0, r4
   1394c:	bl	1861c <destroy_lexer@@Base>
   13950:	sub	sp, fp, #8
   13954:	pop	{r4, sl, fp, pc}

00013958 <read_token_lessequalthan@@Base>:
   13958:	push	{r4, sl, fp, lr}
   1395c:	add	fp, sp, #8
   13960:	sub	sp, sp, #16
   13964:	movw	r0, #61992	; 0xf228
   13968:	movt	r0, #2
   1396c:	ldm	r0, {r1, r2, r3, r4}
   13970:	adds	r1, r1, #1
   13974:	adc	r2, r2, #0
   13978:	adds	r3, r3, #1
   1397c:	adc	r4, r4, #0
   13980:	stm	r0, {r1, r2, r3, r4}
   13984:	add	r4, sp, #4
   13988:	movw	r1, #52235	; 0xcc0b
   1398c:	movt	r1, #1
   13990:	mov	r0, r4
   13994:	bl	185dc <init_lexer@@Base>
   13998:	mov	r0, r4
   1399c:	bl	18824 <next@@Base>
   139a0:	ldr	r1, [r0]
   139a4:	mov	r0, #148	; 0x94
   139a8:	str	r0, [sp]
   139ac:	mov	r0, #12
   139b0:	mov	r2, #0
   139b4:	movw	r3, #518	; 0x206
   139b8:	bl	15118 <UnityAssertEqualNumber@@Base>
   139bc:	mov	r0, r4
   139c0:	bl	1861c <destroy_lexer@@Base>
   139c4:	sub	sp, fp, #8
   139c8:	pop	{r4, sl, fp, pc}

000139cc <read_token_oror@@Base>:
   139cc:	push	{r4, sl, fp, lr}
   139d0:	add	fp, sp, #8
   139d4:	sub	sp, sp, #16
   139d8:	movw	r0, #62008	; 0xf238
   139dc:	movt	r0, #2
   139e0:	ldm	r0, {r1, r2, r3, r4}
   139e4:	adds	r1, r1, #1
   139e8:	adc	r2, r2, #0
   139ec:	adds	r3, r3, #1
   139f0:	adc	r4, r4, #0
   139f4:	stm	r0, {r1, r2, r3, r4}
   139f8:	add	r4, sp, #4
   139fc:	movw	r1, #52238	; 0xcc0e
   13a00:	movt	r1, #1
   13a04:	mov	r0, r4
   13a08:	bl	185dc <init_lexer@@Base>
   13a0c:	mov	r0, r4
   13a10:	bl	18824 <next@@Base>
   13a14:	ldr	r1, [r0]
   13a18:	mov	r0, #148	; 0x94
   13a1c:	str	r0, [sp]
   13a20:	mov	r0, #12
   13a24:	mov	r2, #0
   13a28:	movw	r3, #535	; 0x217
   13a2c:	bl	15118 <UnityAssertEqualNumber@@Base>
   13a30:	mov	r0, r4
   13a34:	bl	1861c <destroy_lexer@@Base>
   13a38:	sub	sp, fp, #8
   13a3c:	pop	{r4, sl, fp, pc}

00013a40 <read_token_andand@@Base>:
   13a40:	push	{r4, sl, fp, lr}
   13a44:	add	fp, sp, #8
   13a48:	sub	sp, sp, #16
   13a4c:	movw	r0, #62024	; 0xf248
   13a50:	movt	r0, #2
   13a54:	ldm	r0, {r1, r2, r3, r4}
   13a58:	adds	r1, r1, #1
   13a5c:	adc	r2, r2, #0
   13a60:	adds	r3, r3, #1
   13a64:	adc	r4, r4, #0
   13a68:	stm	r0, {r1, r2, r3, r4}
   13a6c:	add	r4, sp, #4
   13a70:	movw	r1, #52241	; 0xcc11
   13a74:	movt	r1, #1
   13a78:	mov	r0, r4
   13a7c:	bl	185dc <init_lexer@@Base>
   13a80:	mov	r0, r4
   13a84:	bl	18824 <next@@Base>
   13a88:	ldr	r1, [r0]
   13a8c:	mov	r0, #148	; 0x94
   13a90:	str	r0, [sp]
   13a94:	mov	r0, #12
   13a98:	mov	r2, #0
   13a9c:	mov	r3, #552	; 0x228
   13aa0:	bl	15118 <UnityAssertEqualNumber@@Base>
   13aa4:	mov	r0, r4
   13aa8:	bl	1861c <destroy_lexer@@Base>
   13aac:	sub	sp, fp, #8
   13ab0:	pop	{r4, sl, fp, pc}

00013ab4 <read_token_greaterequalthan@@Base>:
   13ab4:	push	{r4, sl, fp, lr}
   13ab8:	add	fp, sp, #8
   13abc:	sub	sp, sp, #16
   13ac0:	movw	r0, #62040	; 0xf258
   13ac4:	movt	r0, #2
   13ac8:	ldm	r0, {r1, r2, r3, r4}
   13acc:	adds	r1, r1, #1
   13ad0:	adc	r2, r2, #0
   13ad4:	adds	r3, r3, #1
   13ad8:	adc	r4, r4, #0
   13adc:	stm	r0, {r1, r2, r3, r4}
   13ae0:	add	r4, sp, #4
   13ae4:	movw	r1, #52244	; 0xcc14
   13ae8:	movt	r1, #1
   13aec:	mov	r0, r4
   13af0:	bl	185dc <init_lexer@@Base>
   13af4:	mov	r0, r4
   13af8:	bl	18824 <next@@Base>
   13afc:	ldr	r1, [r0]
   13b00:	mov	r0, #148	; 0x94
   13b04:	str	r0, [sp]
   13b08:	mov	r0, #12
   13b0c:	mov	r2, #0
   13b10:	movw	r3, #569	; 0x239
   13b14:	bl	15118 <UnityAssertEqualNumber@@Base>
   13b18:	mov	r0, r4
   13b1c:	bl	1861c <destroy_lexer@@Base>
   13b20:	sub	sp, fp, #8
   13b24:	pop	{r4, sl, fp, pc}

00013b28 <read_token_lessthan@@Base>:
   13b28:	push	{r4, sl, fp, lr}
   13b2c:	add	fp, sp, #8
   13b30:	sub	sp, sp, #16
   13b34:	movw	r0, #62056	; 0xf268
   13b38:	movt	r0, #2
   13b3c:	ldm	r0, {r1, r2, r3, r4}
   13b40:	adds	r1, r1, #1
   13b44:	adc	r2, r2, #0
   13b48:	adds	r3, r3, #1
   13b4c:	adc	r4, r4, #0
   13b50:	stm	r0, {r1, r2, r3, r4}
   13b54:	add	r4, sp, #4
   13b58:	movw	r1, #52247	; 0xcc17
   13b5c:	movt	r1, #1
   13b60:	mov	r0, r4
   13b64:	bl	185dc <init_lexer@@Base>
   13b68:	mov	r0, r4
   13b6c:	bl	18824 <next@@Base>
   13b70:	ldr	r1, [r0]
   13b74:	mov	r0, #148	; 0x94
   13b78:	str	r0, [sp]
   13b7c:	mov	r0, #12
   13b80:	mov	r2, #0
   13b84:	movw	r3, #586	; 0x24a
   13b88:	bl	15118 <UnityAssertEqualNumber@@Base>
   13b8c:	mov	r0, r4
   13b90:	bl	1861c <destroy_lexer@@Base>
   13b94:	sub	sp, fp, #8
   13b98:	pop	{r4, sl, fp, pc}

00013b9c <read_token_greaterthan@@Base>:
   13b9c:	push	{r4, sl, fp, lr}
   13ba0:	add	fp, sp, #8
   13ba4:	sub	sp, sp, #16
   13ba8:	movw	r0, #62072	; 0xf278
   13bac:	movt	r0, #2
   13bb0:	ldm	r0, {r1, r2, r3, r4}
   13bb4:	adds	r1, r1, #1
   13bb8:	adc	r2, r2, #0
   13bbc:	adds	r3, r3, #1
   13bc0:	adc	r4, r4, #0
   13bc4:	stm	r0, {r1, r2, r3, r4}
   13bc8:	add	r4, sp, #4
   13bcc:	movw	r1, #52249	; 0xcc19
   13bd0:	movt	r1, #1
   13bd4:	mov	r0, r4
   13bd8:	bl	185dc <init_lexer@@Base>
   13bdc:	mov	r0, r4
   13be0:	bl	18824 <next@@Base>
   13be4:	ldr	r1, [r0]
   13be8:	mov	r0, #148	; 0x94
   13bec:	str	r0, [sp]
   13bf0:	mov	r0, #12
   13bf4:	mov	r2, #0
   13bf8:	movw	r3, #603	; 0x25b
   13bfc:	bl	15118 <UnityAssertEqualNumber@@Base>
   13c00:	mov	r0, r4
   13c04:	bl	1861c <destroy_lexer@@Base>
   13c08:	sub	sp, fp, #8
   13c0c:	pop	{r4, sl, fp, pc}

00013c10 <read_token_not@@Base>:
   13c10:	push	{r4, sl, fp, lr}
   13c14:	add	fp, sp, #8
   13c18:	sub	sp, sp, #16
   13c1c:	movw	r0, #62088	; 0xf288
   13c20:	movt	r0, #2
   13c24:	ldm	r0, {r1, r2, r3, r4}
   13c28:	adds	r1, r1, #1
   13c2c:	adc	r2, r2, #0
   13c30:	adds	r3, r3, #1
   13c34:	adc	r4, r4, #0
   13c38:	stm	r0, {r1, r2, r3, r4}
   13c3c:	add	r4, sp, #4
   13c40:	movw	r1, #52251	; 0xcc1b
   13c44:	movt	r1, #1
   13c48:	mov	r0, r4
   13c4c:	bl	185dc <init_lexer@@Base>
   13c50:	mov	r0, r4
   13c54:	bl	18824 <next@@Base>
   13c58:	ldr	r1, [r0]
   13c5c:	mov	r0, #148	; 0x94
   13c60:	str	r0, [sp]
   13c64:	mov	r0, #12
   13c68:	mov	r2, #0
   13c6c:	mov	r3, #620	; 0x26c
   13c70:	bl	15118 <UnityAssertEqualNumber@@Base>
   13c74:	mov	r0, r4
   13c78:	bl	1861c <destroy_lexer@@Base>
   13c7c:	sub	sp, fp, #8
   13c80:	pop	{r4, sl, fp, pc}

00013c84 <main@@Base>:
   13c84:	push	{fp, lr}
   13c88:	mov	fp, sp
   13c8c:	movw	r0, #62104	; 0xf298
   13c90:	movt	r0, #2
   13c94:	ldm	r0, {r1, r2, r3, ip}
   13c98:	adds	r1, r1, #1
   13c9c:	adc	r2, r2, #0
   13ca0:	adds	r3, r3, #1
   13ca4:	adc	ip, ip, #0
   13ca8:	stm	r0, {r1, r2, r3, ip}
   13cac:	movw	r0, #52253	; 0xcc1d
   13cb0:	movt	r0, #1
   13cb4:	bl	177c4 <UnityBegin@@Base>
   13cb8:	movw	r0, #10452	; 0x28d4
   13cbc:	movt	r0, #1
   13cc0:	movw	r1, #52319	; 0xcc5f
   13cc4:	movt	r1, #1
   13cc8:	movw	r2, #629	; 0x275
   13ccc:	bl	176bc <UnityDefaultTestRun@@Base>
   13cd0:	movw	r0, #10856	; 0x2a68
   13cd4:	movt	r0, #1
   13cd8:	movw	r1, #52341	; 0xcc75
   13cdc:	movt	r1, #1
   13ce0:	movw	r2, #630	; 0x276
   13ce4:	bl	176bc <UnityDefaultTestRun@@Base>
   13ce8:	movw	r0, #11000	; 0x2af8
   13cec:	movt	r0, #1
   13cf0:	movw	r1, #52361	; 0xcc89
   13cf4:	movt	r1, #1
   13cf8:	movw	r2, #631	; 0x277
   13cfc:	bl	176bc <UnityDefaultTestRun@@Base>
   13d00:	movw	r0, #11204	; 0x2bc4
   13d04:	movt	r0, #1
   13d08:	movw	r1, #52386	; 0xcca2
   13d0c:	movt	r1, #1
   13d10:	mov	r2, #632	; 0x278
   13d14:	bl	176bc <UnityDefaultTestRun@@Base>
   13d18:	movw	r0, #11352	; 0x2c58
   13d1c:	movt	r0, #1
   13d20:	movw	r1, #52411	; 0xccbb
   13d24:	movt	r1, #1
   13d28:	movw	r2, #633	; 0x279
   13d2c:	bl	176bc <UnityDefaultTestRun@@Base>
   13d30:	movw	r0, #12108	; 0x2f4c
   13d34:	movt	r0, #1
   13d38:	movw	r1, #52427	; 0xcccb
   13d3c:	movt	r1, #1
   13d40:	movw	r2, #634	; 0x27a
   13d44:	bl	176bc <UnityDefaultTestRun@@Base>
   13d48:	movw	r0, #13056	; 0x3300
   13d4c:	movt	r0, #1
   13d50:	movw	r1, #52440	; 0xccd8
   13d54:	movt	r1, #1
   13d58:	movw	r2, #635	; 0x27b
   13d5c:	bl	176bc <UnityDefaultTestRun@@Base>
   13d60:	movw	r0, #13172	; 0x3374
   13d64:	movt	r0, #1
   13d68:	movw	r1, #52460	; 0xccec
   13d6c:	movt	r1, #1
   13d70:	mov	r2, #636	; 0x27c
   13d74:	bl	176bc <UnityDefaultTestRun@@Base>
   13d78:	movw	r0, #13288	; 0x33e8
   13d7c:	movt	r0, #1
   13d80:	movw	r1, #52481	; 0xcd01
   13d84:	movt	r1, #1
   13d88:	movw	r2, #637	; 0x27d
   13d8c:	bl	176bc <UnityDefaultTestRun@@Base>
   13d90:	movw	r0, #13404	; 0x345c
   13d94:	movt	r0, #1
   13d98:	movw	r1, #52501	; 0xcd15
   13d9c:	movt	r1, #1
   13da0:	movw	r2, #638	; 0x27e
   13da4:	bl	176bc <UnityDefaultTestRun@@Base>
   13da8:	movw	r0, #13520	; 0x34d0
   13dac:	movt	r0, #1
   13db0:	movw	r1, #52517	; 0xcd25
   13db4:	movt	r1, #1
   13db8:	movw	r2, #639	; 0x27f
   13dbc:	bl	176bc <UnityDefaultTestRun@@Base>
   13dc0:	movw	r0, #13636	; 0x3544
   13dc4:	movt	r0, #1
   13dc8:	movw	r1, #52533	; 0xcd35
   13dcc:	movt	r1, #1
   13dd0:	mov	r2, #640	; 0x280
   13dd4:	bl	176bc <UnityDefaultTestRun@@Base>
   13dd8:	movw	r0, #13752	; 0x35b8
   13ddc:	movt	r0, #1
   13de0:	movw	r1, #52549	; 0xcd45
   13de4:	movt	r1, #1
   13de8:	movw	r2, #641	; 0x281
   13dec:	bl	176bc <UnityDefaultTestRun@@Base>
   13df0:	movw	r0, #13868	; 0x362c
   13df4:	movt	r0, #1
   13df8:	movw	r1, #52565	; 0xcd55
   13dfc:	movt	r1, #1
   13e00:	movw	r2, #642	; 0x282
   13e04:	bl	176bc <UnityDefaultTestRun@@Base>
   13e08:	movw	r0, #13984	; 0x36a0
   13e0c:	movt	r0, #1
   13e10:	movw	r1, #52583	; 0xcd67
   13e14:	movt	r1, #1
   13e18:	movw	r2, #643	; 0x283
   13e1c:	bl	176bc <UnityDefaultTestRun@@Base>
   13e20:	movw	r0, #14100	; 0x3714
   13e24:	movt	r0, #1
   13e28:	movw	r1, #52604	; 0xcd7c
   13e2c:	movt	r1, #1
   13e30:	mov	r2, #644	; 0x284
   13e34:	bl	176bc <UnityDefaultTestRun@@Base>
   13e38:	movw	r0, #14216	; 0x3788
   13e3c:	movt	r0, #1
   13e40:	movw	r1, #52619	; 0xcd8b
   13e44:	movt	r1, #1
   13e48:	movw	r2, #645	; 0x285
   13e4c:	bl	176bc <UnityDefaultTestRun@@Base>
   13e50:	movw	r0, #14332	; 0x37fc
   13e54:	movt	r0, #1
   13e58:	movw	r1, #52633	; 0xcd99
   13e5c:	movt	r1, #1
   13e60:	movw	r2, #646	; 0x286
   13e64:	bl	176bc <UnityDefaultTestRun@@Base>
   13e68:	movw	r0, #14448	; 0x3870
   13e6c:	movt	r0, #1
   13e70:	movw	r1, #52649	; 0xcda9
   13e74:	movt	r1, #1
   13e78:	movw	r2, #647	; 0x287
   13e7c:	bl	176bc <UnityDefaultTestRun@@Base>
   13e80:	movw	r0, #14564	; 0x38e4
   13e84:	movt	r0, #1
   13e88:	movw	r1, #52671	; 0xcdbf
   13e8c:	movt	r1, #1
   13e90:	mov	r2, #648	; 0x288
   13e94:	bl	176bc <UnityDefaultTestRun@@Base>
   13e98:	movw	r0, #14680	; 0x3958
   13e9c:	movt	r0, #1
   13ea0:	movw	r1, #52691	; 0xcdd3
   13ea4:	movt	r1, #1
   13ea8:	movw	r2, #649	; 0x289
   13eac:	bl	176bc <UnityDefaultTestRun@@Base>
   13eb0:	movw	r0, #15028	; 0x3ab4
   13eb4:	movt	r0, #1
   13eb8:	movw	r1, #52716	; 0xcdec
   13ebc:	movt	r1, #1
   13ec0:	movw	r2, #650	; 0x28a
   13ec4:	bl	176bc <UnityDefaultTestRun@@Base>
   13ec8:	movw	r0, #14796	; 0x39cc
   13ecc:	movt	r0, #1
   13ed0:	movw	r1, #52744	; 0xce08
   13ed4:	movt	r1, #1
   13ed8:	movw	r2, #651	; 0x28b
   13edc:	bl	176bc <UnityDefaultTestRun@@Base>
   13ee0:	movw	r0, #14912	; 0x3a40
   13ee4:	movt	r0, #1
   13ee8:	movw	r1, #52760	; 0xce18
   13eec:	movt	r1, #1
   13ef0:	mov	r2, #652	; 0x28c
   13ef4:	bl	176bc <UnityDefaultTestRun@@Base>
   13ef8:	movw	r0, #15144	; 0x3b28
   13efc:	movt	r0, #1
   13f00:	movw	r1, #52778	; 0xce2a
   13f04:	movt	r1, #1
   13f08:	movw	r2, #653	; 0x28d
   13f0c:	bl	176bc <UnityDefaultTestRun@@Base>
   13f10:	movw	r0, #15260	; 0x3b9c
   13f14:	movt	r0, #1
   13f18:	movw	r1, #52798	; 0xce3e
   13f1c:	movt	r1, #1
   13f20:	movw	r2, #654	; 0x28e
   13f24:	bl	176bc <UnityDefaultTestRun@@Base>
   13f28:	movw	r0, #15376	; 0x3c10
   13f2c:	movt	r0, #1
   13f30:	movw	r1, #52821	; 0xce55
   13f34:	movt	r1, #1
   13f38:	movw	r2, #655	; 0x28f
   13f3c:	bl	176bc <UnityDefaultTestRun@@Base>
   13f40:	pop	{fp, lr}
   13f44:	b	17810 <UnityEnd@@Base>
   13f48:	push	{r4, r5, r6, lr}
   13f4c:	sub	sp, sp, #8
   13f50:	movw	r0, #52848	; 0xce70
   13f54:	movt	r0, #1
   13f58:	movw	r1, #52836	; 0xce64
   13f5c:	movt	r1, #1
   13f60:	movw	r2, #42282	; 0xa52a
   13f64:	movt	r2, #15831	; 0x3dd7
   13f68:	bl	19bc8 <next@@Base+0x13a4>
   13f6c:	movw	r0, #54032	; 0xd310
   13f70:	movt	r0, #1
   13f74:	add	r4, r0, #4
   13f78:	mov	r5, #0
   13f7c:	movw	r6, #53472	; 0xd0e0
   13f80:	movt	r6, #1
   13f84:	mov	r3, r6
   13f88:	ldr	r0, [r3, r5]!
   13f8c:	ldr	r1, [r3, #16]
   13f90:	str	r1, [sp]
   13f94:	ldmib	r3, {r1, r2}
   13f98:	ldrb	r3, [r3, #12]
   13f9c:	bl	1a32c <next@@Base+0x1b08>
   13fa0:	ldrd	r0, [r4, #-4]
   13fa4:	bl	1abe0 <next@@Base+0x23bc>
   13fa8:	add	r5, r5, #20
   13fac:	add	r4, r4, #8
   13fb0:	cmp	r5, #560	; 0x230
   13fb4:	bne	13f84 <main@@Base+0x300>
   13fb8:	bl	1b35c <next@@Base+0x2b38>
   13fbc:	add	sp, sp, #8
   13fc0:	pop	{r4, r5, r6, lr}
   13fc4:	b	1c0c8 <next@@Base+0x38a4>
   13fc8:	push	{fp, lr}
   13fcc:	bl	13f48 <main@@Base+0x2c4>
   13fd0:	vmov.i32	q8, #0	; 0x00000000
   13fd4:	movw	r0, #61688	; 0xf0f8
   13fd8:	movt	r0, #2
   13fdc:	vst1.64	{d16-d17}, [r0]
   13fe0:	movw	r0, #61672	; 0xf0e8
   13fe4:	movt	r0, #2
   13fe8:	vst1.64	{d16-d17}, [r0]
   13fec:	movw	r0, #61704	; 0xf108
   13ff0:	movt	r0, #2
   13ff4:	vst1.64	{d16-d17}, [r0]
   13ff8:	movw	r0, #61720	; 0xf118
   13ffc:	movt	r0, #2
   14000:	vst1.64	{d16-d17}, [r0]
   14004:	movw	r0, #61736	; 0xf128
   14008:	movt	r0, #2
   1400c:	vst1.64	{d16-d17}, [r0]
   14010:	movw	r0, #61752	; 0xf138
   14014:	movt	r0, #2
   14018:	vst1.64	{d16-d17}, [r0]
   1401c:	movw	r0, #61768	; 0xf148
   14020:	movt	r0, #2
   14024:	vst1.64	{d16-d17}, [r0]
   14028:	movw	r0, #61784	; 0xf158
   1402c:	movt	r0, #2
   14030:	vst1.64	{d16-d17}, [r0]
   14034:	movw	r0, #61800	; 0xf168
   14038:	movt	r0, #2
   1403c:	vst1.64	{d16-d17}, [r0]
   14040:	movw	r0, #61816	; 0xf178
   14044:	movt	r0, #2
   14048:	vst1.64	{d16-d17}, [r0]
   1404c:	movw	r0, #61832	; 0xf188
   14050:	movt	r0, #2
   14054:	vst1.64	{d16-d17}, [r0]
   14058:	movw	r0, #61848	; 0xf198
   1405c:	movt	r0, #2
   14060:	vst1.64	{d16-d17}, [r0]
   14064:	movw	r0, #61864	; 0xf1a8
   14068:	movt	r0, #2
   1406c:	vst1.64	{d16-d17}, [r0]
   14070:	movw	r0, #61880	; 0xf1b8
   14074:	movt	r0, #2
   14078:	vst1.64	{d16-d17}, [r0]
   1407c:	movw	r0, #61896	; 0xf1c8
   14080:	movt	r0, #2
   14084:	vst1.64	{d16-d17}, [r0]
   14088:	movw	r0, #61912	; 0xf1d8
   1408c:	movt	r0, #2
   14090:	vst1.64	{d16-d17}, [r0]
   14094:	movw	r0, #61928	; 0xf1e8
   14098:	movt	r0, #2
   1409c:	vst1.64	{d16-d17}, [r0]
   140a0:	movw	r0, #61944	; 0xf1f8
   140a4:	movt	r0, #2
   140a8:	vst1.64	{d16-d17}, [r0]
   140ac:	movw	r0, #61960	; 0xf208
   140b0:	movt	r0, #2
   140b4:	vst1.64	{d16-d17}, [r0]
   140b8:	movw	r0, #61976	; 0xf218
   140bc:	movt	r0, #2
   140c0:	vst1.64	{d16-d17}, [r0]
   140c4:	movw	r0, #61992	; 0xf228
   140c8:	movt	r0, #2
   140cc:	vst1.64	{d16-d17}, [r0]
   140d0:	movw	r0, #62008	; 0xf238
   140d4:	movt	r0, #2
   140d8:	vst1.64	{d16-d17}, [r0]
   140dc:	movw	r0, #62024	; 0xf248
   140e0:	movt	r0, #2
   140e4:	vst1.64	{d16-d17}, [r0]
   140e8:	movw	r0, #62040	; 0xf258
   140ec:	movt	r0, #2
   140f0:	vst1.64	{d16-d17}, [r0]
   140f4:	movw	r0, #62056	; 0xf268
   140f8:	movt	r0, #2
   140fc:	vst1.64	{d16-d17}, [r0]
   14100:	movw	r0, #62072	; 0xf278
   14104:	movt	r0, #2
   14108:	vst1.64	{d16-d17}, [r0]
   1410c:	movw	r0, #62088	; 0xf288
   14110:	movt	r0, #2
   14114:	vst1.64	{d16-d17}, [r0]
   14118:	movw	r0, #62104	; 0xf298
   1411c:	movt	r0, #2
   14120:	vst1.64	{d16-d17}, [r0]
   14124:	pop	{fp, pc}
   14128:	movw	r0, #16200	; 0x3f48
   1412c:	movt	r0, #1
   14130:	movw	r1, #16328	; 0x3fc8
   14134:	movt	r1, #1
   14138:	b	1c578 <__gcov_flush@@Base+0xb4>

0001413c <UnityPrint@@Base>:
   1413c:	push	{r4, r5, r6, sl, fp, lr}
   14140:	add	fp, sp, #16
   14144:	movw	r4, #62128	; 0xf2b0
   14148:	movt	r4, #2
   1414c:	ldrd	r2, [r4]
   14150:	adds	r2, r2, #1
   14154:	adc	r3, r3, #0
   14158:	strd	r2, [r4]
   1415c:	mov	r1, #16
   14160:	cmp	r0, #0
   14164:	movwne	r1, #8
   14168:	mov	r2, r4
   1416c:	ldr	r1, [r2, r1]!
   14170:	adds	r1, r1, #1
   14174:	str	r1, [r2]
   14178:	ldr	r1, [r2, #4]
   1417c:	adc	r1, r1, #0
   14180:	str	r1, [r2, #4]
   14184:	cmp	r0, #0
   14188:	beq	1434c <UnityPrint@@Base+0x210>
   1418c:	ldrb	r1, [r0]
   14190:	mov	r2, #32
   14194:	cmp	r1, #0
   14198:	movwne	r2, #24
   1419c:	mov	r3, r4
   141a0:	ldr	r2, [r3, r2]!
   141a4:	adds	r2, r2, #1
   141a8:	str	r2, [r3]
   141ac:	ldr	r2, [r3, #4]
   141b0:	adc	r2, r2, #0
   141b4:	str	r2, [r3, #4]
   141b8:	cmp	r1, #0
   141bc:	beq	1434c <UnityPrint@@Base+0x210>
   141c0:	add	r5, r0, #1
   141c4:	uxtb	r0, r1
   141c8:	cmp	r0, #127	; 0x7f
   141cc:	mov	r1, #48	; 0x30
   141d0:	movwcc	r1, #40	; 0x28
   141d4:	mov	r2, r4
   141d8:	ldr	r1, [r2, r1]!
   141dc:	adds	r1, r1, #1
   141e0:	str	r1, [r2]
   141e4:	ldr	r1, [r2, #4]
   141e8:	adc	r1, r1, #0
   141ec:	str	r1, [r2, #4]
   141f0:	cmp	r0, #126	; 0x7e
   141f4:	bhi	14240 <UnityPrint@@Base+0x104>
   141f8:	cmp	r0, #31
   141fc:	mov	r1, #64	; 0x40
   14200:	movwhi	r1, #56	; 0x38
   14204:	mov	r2, r4
   14208:	ldr	r1, [r2, r1]!
   1420c:	adds	r1, r1, #1
   14210:	str	r1, [r2]
   14214:	ldr	r1, [r2, #4]
   14218:	adc	r1, r1, #0
   1421c:	str	r1, [r2, #4]
   14220:	cmp	r0, #32
   14224:	bcc	14240 <UnityPrint@@Base+0x104>
   14228:	ldrd	r2, [r4, #72]	; 0x48
   1422c:	adds	r2, r2, #1
   14230:	adc	r3, r3, #0
   14234:	strd	r2, [r4, #72]	; 0x48
   14238:	bl	12760 <putchar@plt>
   1423c:	b	14308 <UnityPrint@@Base+0x1cc>
   14240:	ldrb	r6, [r5, #-1]
   14244:	cmp	r6, #13
   14248:	mov	r0, #88	; 0x58
   1424c:	movweq	r0, #80	; 0x50
   14250:	mov	r1, r4
   14254:	ldr	r0, [r1, r0]!
   14258:	adds	r0, r0, #1
   1425c:	str	r0, [r1]
   14260:	ldr	r0, [r1, #4]
   14264:	adc	r0, r0, #0
   14268:	str	r0, [r1, #4]
   1426c:	cmp	r6, #13
   14270:	bne	14298 <UnityPrint@@Base+0x15c>
   14274:	ldrd	r0, [r4, #96]	; 0x60
   14278:	adds	r0, r0, #1
   1427c:	adc	r1, r1, #0
   14280:	strd	r0, [r4, #96]	; 0x60
   14284:	mov	r0, #92	; 0x5c
   14288:	bl	12760 <putchar@plt>
   1428c:	mov	r0, #114	; 0x72
   14290:	bl	12760 <putchar@plt>
   14294:	b	14308 <UnityPrint@@Base+0x1cc>
   14298:	mov	r0, #92	; 0x5c
   1429c:	bl	12760 <putchar@plt>
   142a0:	cmp	r6, #10
   142a4:	mov	r0, #112	; 0x70
   142a8:	movweq	r0, #104	; 0x68
   142ac:	mov	r1, r4
   142b0:	ldr	r0, [r1, r0]!
   142b4:	adds	r0, r0, #1
   142b8:	str	r0, [r1]
   142bc:	ldr	r0, [r1, #4]
   142c0:	adc	r0, r0, #0
   142c4:	str	r0, [r1, #4]
   142c8:	cmp	r6, #10
   142cc:	bne	142ec <UnityPrint@@Base+0x1b0>
   142d0:	ldrd	r0, [r4, #120]	; 0x78
   142d4:	adds	r0, r0, #1
   142d8:	adc	r1, r1, #0
   142dc:	strd	r0, [r4, #120]	; 0x78
   142e0:	mov	r0, #110	; 0x6e
   142e4:	bl	12760 <putchar@plt>
   142e8:	b	14308 <UnityPrint@@Base+0x1cc>
   142ec:	ldrd	r0, [r4, #128]	; 0x80
   142f0:	adds	r0, r0, #1
   142f4:	adc	r1, r1, #0
   142f8:	strd	r0, [r4, #128]	; 0x80
   142fc:	ldrb	r0, [r5, #-1]
   14300:	mov	r1, #2
   14304:	bl	14360 <UnityPrintNumberHex@@Base>
   14308:	ldrd	r0, [r4, #136]	; 0x88
   1430c:	adds	r0, r0, #1
   14310:	adc	r1, r1, #0
   14314:	strd	r0, [r4, #136]	; 0x88
   14318:	ldrb	r1, [r5], #1
   1431c:	cmp	r1, #0
   14320:	mov	r0, #32
   14324:	movwne	r0, #24
   14328:	mov	r2, r4
   1432c:	ldr	r0, [r2, r0]!
   14330:	adds	r0, r0, #1
   14334:	str	r0, [r2]
   14338:	ldr	r0, [r2, #4]
   1433c:	adc	r0, r0, #0
   14340:	str	r0, [r2, #4]
   14344:	cmp	r1, #0
   14348:	bne	141c4 <UnityPrint@@Base+0x88>
   1434c:	ldrd	r0, [r4, #144]	; 0x90
   14350:	adds	r0, r0, #1
   14354:	adc	r1, r1, #0
   14358:	strd	r0, [r4, #144]	; 0x90
   1435c:	pop	{r4, r5, r6, sl, fp, pc}

00014360 <UnityPrintNumberHex@@Base>:
   14360:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14364:	add	fp, sp, #24
   14368:	mov	r4, r1
   1436c:	mov	r5, r0
   14370:	movw	r6, #62304	; 0xf360
   14374:	movt	r6, #2
   14378:	ldm	r6, {r0, r1, r2, r3}
   1437c:	adds	r0, r0, #1
   14380:	adc	r1, r1, #0
   14384:	adds	r2, r2, #1
   14388:	adc	r3, r3, #0
   1438c:	stm	r6, {r0, r1, r2, r3}
   14390:	mov	r0, #48	; 0x30
   14394:	bl	12760 <putchar@plt>
   14398:	mov	r0, #120	; 0x78
   1439c:	bl	12760 <putchar@plt>
   143a0:	mov	r0, #24
   143a4:	cmp	r4, #0
   143a8:	movwne	r0, #16
   143ac:	mov	r1, r6
   143b0:	ldr	r0, [r1, r0]!
   143b4:	adds	r0, r0, #1
   143b8:	str	r0, [r1]
   143bc:	ldr	r0, [r1, #4]
   143c0:	adc	r0, r0, #0
   143c4:	str	r0, [r1, #4]
   143c8:	cmp	r4, #0
   143cc:	beq	14484 <UnityPrintNumberHex@@Base+0x124>
   143d0:	mov	r8, #15
   143d4:	sub	r4, r4, #1
   143d8:	uxtb	r7, r4
   143dc:	lsl	r0, r7, #2
   143e0:	and	r0, r8, r5, lsr r0
   143e4:	cmp	r0, #10
   143e8:	mov	r1, #40	; 0x28
   143ec:	movwcc	r1, #32
   143f0:	mov	r2, r6
   143f4:	ldr	r1, [r2, r1]!
   143f8:	adds	r1, r1, #1
   143fc:	str	r1, [r2]
   14400:	ldr	r1, [r2, #4]
   14404:	adc	r1, r1, #0
   14408:	str	r1, [r2, #4]
   1440c:	cmp	r0, #9
   14410:	bhi	1442c <UnityPrintNumberHex@@Base+0xcc>
   14414:	ldrd	r2, [r6, #48]	; 0x30
   14418:	adds	r2, r2, #1
   1441c:	adc	r3, r3, #0
   14420:	strd	r2, [r6, #48]	; 0x30
   14424:	orr	r0, r0, #48	; 0x30
   14428:	b	14440 <UnityPrintNumberHex@@Base+0xe0>
   1442c:	ldrd	r2, [r6, #56]	; 0x38
   14430:	adds	r2, r2, #1
   14434:	adc	r3, r3, #0
   14438:	strd	r2, [r6, #56]	; 0x38
   1443c:	add	r0, r0, #55	; 0x37
   14440:	bl	12760 <putchar@plt>
   14444:	ldrd	r0, [r6, #64]	; 0x40
   14448:	adds	r0, r0, #1
   1444c:	adc	r1, r1, #0
   14450:	strd	r0, [r6, #64]	; 0x40
   14454:	cmp	r7, #0
   14458:	mov	r0, #24
   1445c:	movwne	r0, #16
   14460:	mov	r1, r6
   14464:	ldr	r0, [r1, r0]!
   14468:	adds	r0, r0, #1
   1446c:	str	r0, [r1]
   14470:	ldr	r0, [r1, #4]
   14474:	adc	r0, r0, #0
   14478:	str	r0, [r1, #4]
   1447c:	cmp	r7, #0
   14480:	bne	143d4 <UnityPrintNumberHex@@Base+0x74>
   14484:	ldrd	r0, [r6, #72]	; 0x48
   14488:	adds	r0, r0, #1
   1448c:	adc	r1, r1, #0
   14490:	strd	r0, [r6, #72]	; 0x48
   14494:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00014498 <UnityPrintLen@@Base>:
   14498:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1449c:	add	fp, sp, #24
   144a0:	mov	r4, r1
   144a4:	mov	r8, r0
   144a8:	movw	r6, #62384	; 0xf3b0
   144ac:	movt	r6, #2
   144b0:	ldrd	r0, [r6]
   144b4:	adds	r0, r0, #1
   144b8:	adc	r1, r1, #0
   144bc:	strd	r0, [r6]
   144c0:	mov	r0, #16
   144c4:	cmp	r8, #0
   144c8:	movwne	r0, #8
   144cc:	mov	r1, r6
   144d0:	ldr	r0, [r1, r0]!
   144d4:	adds	r0, r0, #1
   144d8:	str	r0, [r1]
   144dc:	ldr	r0, [r1, #4]
   144e0:	adc	r0, r0, #0
   144e4:	str	r0, [r1, #4]
   144e8:	cmp	r8, #0
   144ec:	beq	146e4 <UnityPrintLen@@Base+0x24c>
   144f0:	ldrb	r0, [r8]
   144f4:	mov	r1, #32
   144f8:	cmp	r0, #0
   144fc:	movwne	r1, #24
   14500:	mov	r2, r6
   14504:	ldr	r1, [r2, r1]!
   14508:	adds	r1, r1, #1
   1450c:	str	r1, [r2]
   14510:	ldr	r1, [r2, #4]
   14514:	adc	r1, r1, #0
   14518:	str	r1, [r2, #4]
   1451c:	cmp	r0, #0
   14520:	beq	146e4 <UnityPrintLen@@Base+0x24c>
   14524:	mov	r7, r8
   14528:	sub	r1, r7, r8
   1452c:	cmp	r1, r4
   14530:	mov	r2, #48	; 0x30
   14534:	movwcc	r2, #40	; 0x28
   14538:	mov	r3, r6
   1453c:	ldr	r2, [r3, r2]!
   14540:	adds	r2, r2, #1
   14544:	str	r2, [r3]
   14548:	ldr	r2, [r3, #4]
   1454c:	adc	r2, r2, #0
   14550:	str	r2, [r3, #4]
   14554:	cmp	r1, r4
   14558:	bcs	146e4 <UnityPrintLen@@Base+0x24c>
   1455c:	uxtb	r0, r0
   14560:	cmp	r0, #127	; 0x7f
   14564:	mov	r1, #64	; 0x40
   14568:	movwcc	r1, #56	; 0x38
   1456c:	mov	r2, r6
   14570:	ldr	r1, [r2, r1]!
   14574:	adds	r1, r1, #1
   14578:	str	r1, [r2]
   1457c:	ldr	r1, [r2, #4]
   14580:	adc	r1, r1, #0
   14584:	str	r1, [r2, #4]
   14588:	cmp	r0, #126	; 0x7e
   1458c:	bhi	145d8 <UnityPrintLen@@Base+0x140>
   14590:	cmp	r0, #31
   14594:	mov	r1, #80	; 0x50
   14598:	movwhi	r1, #72	; 0x48
   1459c:	mov	r2, r6
   145a0:	ldr	r1, [r2, r1]!
   145a4:	adds	r1, r1, #1
   145a8:	str	r1, [r2]
   145ac:	ldr	r1, [r2, #4]
   145b0:	adc	r1, r1, #0
   145b4:	str	r1, [r2, #4]
   145b8:	cmp	r0, #32
   145bc:	bcc	145d8 <UnityPrintLen@@Base+0x140>
   145c0:	ldrd	r2, [r6, #88]	; 0x58
   145c4:	adds	r2, r2, #1
   145c8:	adc	r3, r3, #0
   145cc:	strd	r2, [r6, #88]	; 0x58
   145d0:	bl	12760 <putchar@plt>
   145d4:	b	146a0 <UnityPrintLen@@Base+0x208>
   145d8:	ldrb	r5, [r7]
   145dc:	cmp	r5, #13
   145e0:	mov	r0, #104	; 0x68
   145e4:	movweq	r0, #96	; 0x60
   145e8:	mov	r1, r6
   145ec:	ldr	r0, [r1, r0]!
   145f0:	adds	r0, r0, #1
   145f4:	str	r0, [r1]
   145f8:	ldr	r0, [r1, #4]
   145fc:	adc	r0, r0, #0
   14600:	str	r0, [r1, #4]
   14604:	cmp	r5, #13
   14608:	bne	14630 <UnityPrintLen@@Base+0x198>
   1460c:	ldrd	r0, [r6, #112]	; 0x70
   14610:	adds	r0, r0, #1
   14614:	adc	r1, r1, #0
   14618:	strd	r0, [r6, #112]	; 0x70
   1461c:	mov	r0, #92	; 0x5c
   14620:	bl	12760 <putchar@plt>
   14624:	mov	r0, #114	; 0x72
   14628:	bl	12760 <putchar@plt>
   1462c:	b	146a0 <UnityPrintLen@@Base+0x208>
   14630:	mov	r0, #92	; 0x5c
   14634:	bl	12760 <putchar@plt>
   14638:	cmp	r5, #10
   1463c:	mov	r0, #128	; 0x80
   14640:	movweq	r0, #120	; 0x78
   14644:	mov	r1, r6
   14648:	ldr	r0, [r1, r0]!
   1464c:	adds	r0, r0, #1
   14650:	str	r0, [r1]
   14654:	ldr	r0, [r1, #4]
   14658:	adc	r0, r0, #0
   1465c:	str	r0, [r1, #4]
   14660:	cmp	r5, #10
   14664:	bne	14684 <UnityPrintLen@@Base+0x1ec>
   14668:	ldrd	r0, [r6, #136]	; 0x88
   1466c:	adds	r0, r0, #1
   14670:	adc	r1, r1, #0
   14674:	strd	r0, [r6, #136]	; 0x88
   14678:	mov	r0, #110	; 0x6e
   1467c:	bl	12760 <putchar@plt>
   14680:	b	146a0 <UnityPrintLen@@Base+0x208>
   14684:	ldrd	r0, [r6, #144]	; 0x90
   14688:	adds	r0, r0, #1
   1468c:	adc	r1, r1, #0
   14690:	strd	r0, [r6, #144]	; 0x90
   14694:	ldrb	r0, [r7]
   14698:	mov	r1, #2
   1469c:	bl	14360 <UnityPrintNumberHex@@Base>
   146a0:	ldrd	r0, [r6, #152]	; 0x98
   146a4:	adds	r0, r0, #1
   146a8:	adc	r1, r1, #0
   146ac:	strd	r0, [r6, #152]	; 0x98
   146b0:	ldrb	r0, [r7, #1]!
   146b4:	cmp	r0, #0
   146b8:	mov	r1, #32
   146bc:	movwne	r1, #24
   146c0:	mov	r2, r6
   146c4:	ldr	r1, [r2, r1]!
   146c8:	adds	r1, r1, #1
   146cc:	str	r1, [r2]
   146d0:	ldr	r1, [r2, #4]
   146d4:	adc	r1, r1, #0
   146d8:	str	r1, [r2, #4]
   146dc:	cmp	r0, #0
   146e0:	bne	14528 <UnityPrintLen@@Base+0x90>
   146e4:	ldrd	r0, [r6, #160]	; 0xa0
   146e8:	adds	r0, r0, #1
   146ec:	adc	r1, r1, #0
   146f0:	strd	r0, [r6, #160]	; 0xa0
   146f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000146f8 <UnityPrintNumberByStyle@@Base>:
   146f8:	push	{r4, r5, r6, sl, fp, lr}
   146fc:	add	fp, sp, #16
   14700:	movw	r6, #62560	; 0xf460
   14704:	movt	r6, #2
   14708:	ldrd	r2, [r6]
   1470c:	adds	r2, r2, #1
   14710:	adc	r3, r3, #0
   14714:	strd	r2, [r6]
   14718:	ands	r2, r1, #16
   1471c:	mov	r3, #16
   14720:	movwne	r3, #8
   14724:	mov	r4, r6
   14728:	ldr	r3, [r4, r3]!
   1472c:	adds	r3, r3, #1
   14730:	str	r3, [r4]
   14734:	ldr	r3, [r4, #4]
   14738:	adc	r3, r3, #0
   1473c:	str	r3, [r4, #4]
   14740:	cmp	r2, #0
   14744:	beq	14760 <UnityPrintNumberByStyle@@Base+0x68>
   14748:	ldrd	r2, [r6, #24]
   1474c:	adds	r2, r2, #1
   14750:	adc	r3, r3, #0
   14754:	strd	r2, [r6, #24]
   14758:	bl	147ec <UnityPrintNumber@@Base>
   1475c:	b	147d8 <UnityPrintNumberByStyle@@Base+0xe0>
   14760:	ands	r2, r1, #32
   14764:	mov	r3, #40	; 0x28
   14768:	movwne	r3, #32
   1476c:	mov	r5, r6
   14770:	ldr	r3, [r5, r3]!
   14774:	adds	r3, r3, #1
   14778:	str	r3, [r5]
   1477c:	ldr	r3, [r5, #4]
   14780:	adc	r3, r3, #0
   14784:	str	r3, [r5, #4]
   14788:	and	r1, r1, #15
   1478c:	cmp	r2, #0
   14790:	beq	147c0 <UnityPrintNumberByStyle@@Base+0xc8>
   14794:	ldrd	r2, [r6, #48]	; 0x30
   14798:	adds	r2, r2, #1
   1479c:	adc	r3, r3, #0
   147a0:	strd	r2, [r6, #48]	; 0x30
   147a4:	movw	r2, #54712	; 0xd5b8
   147a8:	movt	r2, #1
   147ac:	add	r1, r2, r1, lsl #2
   147b0:	ldr	r1, [r1, #-4]
   147b4:	and	r0, r1, r0
   147b8:	bl	149b8 <UnityPrintNumberUnsigned@@Base>
   147bc:	b	147d8 <UnityPrintNumberByStyle@@Base+0xe0>
   147c0:	ldrd	r2, [r6, #56]	; 0x38
   147c4:	adds	r2, r2, #1
   147c8:	adc	r3, r3, #0
   147cc:	strd	r2, [r6, #56]	; 0x38
   147d0:	lsl	r1, r1, #1
   147d4:	bl	14360 <UnityPrintNumberHex@@Base>
   147d8:	ldrd	r0, [r6, #64]	; 0x40
   147dc:	adds	r0, r0, #1
   147e0:	adc	r1, r1, #0
   147e4:	strd	r0, [r6, #64]	; 0x40
   147e8:	pop	{r4, r5, r6, sl, fp, pc}

000147ec <UnityPrintNumber@@Base>:
   147ec:	push	{r4, r5, r6, r7, fp, lr}
   147f0:	add	fp, sp, #16
   147f4:	mov	r4, r0
   147f8:	movw	r5, #62640	; 0xf4b0
   147fc:	movt	r5, #2
   14800:	ldrd	r0, [r5]
   14804:	adds	r0, r0, #1
   14808:	adc	r1, r1, #0
   1480c:	strd	r0, [r5]
   14810:	mov	r0, #16
   14814:	cmp	r4, #0
   14818:	movwlt	r0, #8
   1481c:	mov	r1, r5
   14820:	ldr	r0, [r1, r0]!
   14824:	adds	r0, r0, #1
   14828:	str	r0, [r1]
   1482c:	ldr	r0, [r1, #4]
   14830:	adc	r0, r0, #0
   14834:	str	r0, [r1, #4]
   14838:	cmn	r4, #1
   1483c:	ble	14854 <UnityPrintNumber@@Base+0x68>
   14840:	ldrd	r0, [r5, #32]
   14844:	adds	r0, r0, #1
   14848:	adc	r1, r1, #0
   1484c:	strd	r0, [r5, #32]
   14850:	b	14870 <UnityPrintNumber@@Base+0x84>
   14854:	ldrd	r0, [r5, #24]
   14858:	adds	r0, r0, #1
   1485c:	adc	r1, r1, #0
   14860:	strd	r0, [r5, #24]
   14864:	mov	r0, #45	; 0x2d
   14868:	bl	12760 <putchar@plt>
   1486c:	rsb	r4, r4, #0
   14870:	ldrd	r0, [r5, #40]	; 0x28
   14874:	adds	r0, r0, #1
   14878:	adc	r1, r1, #0
   1487c:	strd	r0, [r5, #40]	; 0x28
   14880:	mov	r0, #56	; 0x38
   14884:	cmp	r4, #9
   14888:	movwhi	r0, #48	; 0x30
   1488c:	mov	r1, r5
   14890:	ldr	r0, [r1, r0]!
   14894:	adds	r0, r0, #1
   14898:	str	r0, [r1]
   1489c:	ldr	r0, [r1, #4]
   148a0:	adc	r0, r0, #0
   148a4:	str	r0, [r1, #4]
   148a8:	mov	r6, #1
   148ac:	cmp	r4, #10
   148b0:	bcc	14934 <UnityPrintNumber@@Base+0x148>
   148b4:	mov	r6, #1
   148b8:	add	r0, r6, r6, lsl #2
   148bc:	cmp	r6, r0, lsl #1
   148c0:	mov	r1, #72	; 0x48
   148c4:	movwcc	r1, #64	; 0x40
   148c8:	mov	r2, r5
   148cc:	ldr	r1, [r2, r1]!
   148d0:	adds	r1, r1, #1
   148d4:	str	r1, [r2]
   148d8:	ldr	r1, [r2, #4]
   148dc:	adc	r1, r1, #0
   148e0:	str	r1, [r2, #4]
   148e4:	cmp	r6, r0, lsl #1
   148e8:	bcs	14934 <UnityPrintNumber@@Base+0x148>
   148ec:	lsl	r6, r0, #1
   148f0:	ldrd	r0, [r5, #80]	; 0x50
   148f4:	adds	r0, r0, #1
   148f8:	adc	r1, r1, #0
   148fc:	strd	r0, [r5, #80]	; 0x50
   14900:	udiv	r0, r4, r6
   14904:	cmp	r0, #9
   14908:	mov	r1, #56	; 0x38
   1490c:	movwhi	r1, #48	; 0x30
   14910:	mov	r2, r5
   14914:	ldr	r1, [r2, r1]!
   14918:	adds	r1, r1, #1
   1491c:	str	r1, [r2]
   14920:	ldr	r1, [r2, #4]
   14924:	adc	r1, r1, #0
   14928:	str	r1, [r2, #4]
   1492c:	cmp	r0, #9
   14930:	bhi	148b8 <UnityPrintNumber@@Base+0xcc>
   14934:	ldrd	r0, [r5, #88]	; 0x58
   14938:	adds	r0, r0, #1
   1493c:	adc	r1, r1, #0
   14940:	strd	r0, [r5, #88]	; 0x58
   14944:	movw	r7, #52429	; 0xcccd
   14948:	movt	r7, #52428	; 0xcccc
   1494c:	udiv	r0, r4, r6
   14950:	umull	r1, r2, r0, r7
   14954:	lsr	r1, r2, #3
   14958:	add	r1, r1, r1, lsl #2
   1495c:	sub	r0, r0, r1, lsl #1
   14960:	orr	r0, r0, #48	; 0x30
   14964:	bl	12760 <putchar@plt>
   14968:	cmp	r6, #9
   1496c:	mov	r0, #104	; 0x68
   14970:	movwhi	r0, #96	; 0x60
   14974:	mov	r1, r5
   14978:	ldr	r0, [r1, r0]!
   1497c:	adds	r0, r0, #1
   14980:	str	r0, [r1]
   14984:	ldr	r0, [r1, #4]
   14988:	adc	r0, r0, #0
   1498c:	str	r0, [r1, #4]
   14990:	umull	r0, r1, r6, r7
   14994:	lsr	r0, r1, #3
   14998:	cmp	r6, #9
   1499c:	mov	r6, r0
   149a0:	bhi	1494c <UnityPrintNumber@@Base+0x160>
   149a4:	ldrd	r0, [r5, #112]	; 0x70
   149a8:	adds	r0, r0, #1
   149ac:	adc	r1, r1, #0
   149b0:	strd	r0, [r5, #112]	; 0x70
   149b4:	pop	{r4, r5, r6, r7, fp, pc}

000149b8 <UnityPrintNumberUnsigned@@Base>:
   149b8:	push	{r4, r5, r6, r7, fp, lr}
   149bc:	add	fp, sp, #16
   149c0:	mov	r4, r0
   149c4:	movw	r5, #62768	; 0xf530
   149c8:	movt	r5, #2
   149cc:	ldm	r5, {r0, r1, r2, r3}
   149d0:	adds	r0, r0, #1
   149d4:	adc	r1, r1, #0
   149d8:	adds	r2, r2, #1
   149dc:	adc	r3, r3, #0
   149e0:	stm	r5, {r0, r1, r2, r3}
   149e4:	mov	r0, #24
   149e8:	cmp	r4, #9
   149ec:	movwhi	r0, #16
   149f0:	mov	r1, r5
   149f4:	ldr	r0, [r1, r0]!
   149f8:	adds	r0, r0, #1
   149fc:	str	r0, [r1]
   14a00:	ldr	r0, [r1, #4]
   14a04:	adc	r0, r0, #0
   14a08:	str	r0, [r1, #4]
   14a0c:	mov	r6, #1
   14a10:	cmp	r4, #10
   14a14:	bcc	14a98 <UnityPrintNumberUnsigned@@Base+0xe0>
   14a18:	mov	r6, #1
   14a1c:	add	r0, r6, r6, lsl #2
   14a20:	cmp	r6, r0, lsl #1
   14a24:	mov	r1, #40	; 0x28
   14a28:	movwcc	r1, #32
   14a2c:	mov	r2, r5
   14a30:	ldr	r1, [r2, r1]!
   14a34:	adds	r1, r1, #1
   14a38:	str	r1, [r2]
   14a3c:	ldr	r1, [r2, #4]
   14a40:	adc	r1, r1, #0
   14a44:	str	r1, [r2, #4]
   14a48:	cmp	r6, r0, lsl #1
   14a4c:	bcs	14a98 <UnityPrintNumberUnsigned@@Base+0xe0>
   14a50:	lsl	r6, r0, #1
   14a54:	ldrd	r0, [r5, #48]	; 0x30
   14a58:	adds	r0, r0, #1
   14a5c:	adc	r1, r1, #0
   14a60:	strd	r0, [r5, #48]	; 0x30
   14a64:	udiv	r0, r4, r6
   14a68:	cmp	r0, #9
   14a6c:	mov	r1, #24
   14a70:	movwhi	r1, #16
   14a74:	mov	r2, r5
   14a78:	ldr	r1, [r2, r1]!
   14a7c:	adds	r1, r1, #1
   14a80:	str	r1, [r2]
   14a84:	ldr	r1, [r2, #4]
   14a88:	adc	r1, r1, #0
   14a8c:	str	r1, [r2, #4]
   14a90:	cmp	r0, #9
   14a94:	bhi	14a1c <UnityPrintNumberUnsigned@@Base+0x64>
   14a98:	ldrd	r0, [r5, #56]	; 0x38
   14a9c:	adds	r0, r0, #1
   14aa0:	adc	r1, r1, #0
   14aa4:	strd	r0, [r5, #56]	; 0x38
   14aa8:	movw	r7, #52429	; 0xcccd
   14aac:	movt	r7, #52428	; 0xcccc
   14ab0:	udiv	r0, r4, r6
   14ab4:	umull	r1, r2, r0, r7
   14ab8:	lsr	r1, r2, #3
   14abc:	add	r1, r1, r1, lsl #2
   14ac0:	sub	r0, r0, r1, lsl #1
   14ac4:	orr	r0, r0, #48	; 0x30
   14ac8:	bl	12760 <putchar@plt>
   14acc:	cmp	r6, #9
   14ad0:	mov	r0, #72	; 0x48
   14ad4:	movwhi	r0, #64	; 0x40
   14ad8:	mov	r1, r5
   14adc:	ldr	r0, [r1, r0]!
   14ae0:	adds	r0, r0, #1
   14ae4:	str	r0, [r1]
   14ae8:	ldr	r0, [r1, #4]
   14aec:	adc	r0, r0, #0
   14af0:	str	r0, [r1, #4]
   14af4:	umull	r0, r1, r6, r7
   14af8:	lsr	r0, r1, #3
   14afc:	cmp	r6, #9
   14b00:	mov	r6, r0
   14b04:	bhi	14ab0 <UnityPrintNumberUnsigned@@Base+0xf8>
   14b08:	ldrd	r0, [r5, #80]	; 0x50
   14b0c:	adds	r0, r0, #1
   14b10:	adc	r1, r1, #0
   14b14:	strd	r0, [r5, #80]	; 0x50
   14b18:	pop	{r4, r5, r6, r7, fp, pc}

00014b1c <UnityPrintMask@@Base>:
   14b1c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14b20:	add	fp, sp, #24
   14b24:	mov	r8, r1
   14b28:	mov	r5, r0
   14b2c:	movw	r6, #62864	; 0xf590
   14b30:	movt	r6, #2
   14b34:	ldm	r6, {r0, r1, r2, r3}
   14b38:	adds	r2, r2, #1
   14b3c:	adc	r3, r3, #0
   14b40:	adds	r0, r0, #1
   14b44:	str	r0, [r6]
   14b48:	str	r2, [r6, #8]
   14b4c:	adc	r0, r1, #0
   14b50:	ldr	r1, [r6, #16]
   14b54:	adds	r1, r1, #1
   14b58:	str	r1, [r6, #16]
   14b5c:	str	r0, [r6, #4]
   14b60:	str	r3, [r6, #12]
   14b64:	ldr	r0, [r6, #20]
   14b68:	adc	r0, r0, #0
   14b6c:	str	r0, [r6, #20]
   14b70:	mov	r7, #-2147483648	; 0x80000000
   14b74:	mov	r4, #1
   14b78:	ands	r0, r7, r5
   14b7c:	mov	r1, #40	; 0x28
   14b80:	movwne	r1, #32
   14b84:	mov	r2, r6
   14b88:	ldr	r1, [r2, r1]!
   14b8c:	adds	r1, r1, #1
   14b90:	str	r1, [r2]
   14b94:	ldr	r1, [r2, #4]
   14b98:	adc	r1, r1, #0
   14b9c:	str	r1, [r2, #4]
   14ba0:	cmp	r0, #0
   14ba4:	beq	14bf0 <UnityPrintMask@@Base+0xd4>
   14ba8:	ands	r0, r7, r8
   14bac:	mov	r1, #56	; 0x38
   14bb0:	movwne	r1, #48	; 0x30
   14bb4:	mov	r2, r6
   14bb8:	ldr	r1, [r2, r1]!
   14bbc:	adds	r1, r1, #1
   14bc0:	str	r1, [r2]
   14bc4:	ldr	r1, [r2, #4]
   14bc8:	adc	r1, r1, #0
   14bcc:	str	r1, [r2, #4]
   14bd0:	cmp	r0, #0
   14bd4:	beq	14c08 <UnityPrintMask@@Base+0xec>
   14bd8:	ldrd	r0, [r6, #64]	; 0x40
   14bdc:	adds	r0, r0, #1
   14be0:	adc	r1, r1, #0
   14be4:	strd	r0, [r6, #64]	; 0x40
   14be8:	mov	r0, #49	; 0x31
   14bec:	b	14c1c <UnityPrintMask@@Base+0x100>
   14bf0:	ldrd	r0, [r6, #80]	; 0x50
   14bf4:	adds	r0, r0, #1
   14bf8:	adc	r1, r1, #0
   14bfc:	strd	r0, [r6, #80]	; 0x50
   14c00:	mov	r0, #88	; 0x58
   14c04:	b	14c1c <UnityPrintMask@@Base+0x100>
   14c08:	ldrd	r0, [r6, #72]	; 0x48
   14c0c:	adds	r0, r0, #1
   14c10:	adc	r1, r1, #0
   14c14:	strd	r0, [r6, #72]	; 0x48
   14c18:	mov	r0, #48	; 0x30
   14c1c:	bl	12760 <putchar@plt>
   14c20:	ldrd	r0, [r6, #88]	; 0x58
   14c24:	adds	r0, r0, #1
   14c28:	adc	r1, r1, #0
   14c2c:	strd	r0, [r6, #88]	; 0x58
   14c30:	cmp	r4, #32
   14c34:	mov	r0, #24
   14c38:	movwcc	r0, #16
   14c3c:	mov	r1, r6
   14c40:	ldr	r0, [r1, r0]!
   14c44:	adds	r0, r0, #1
   14c48:	str	r0, [r1]
   14c4c:	ldr	r0, [r1, #4]
   14c50:	adc	r0, r0, #0
   14c54:	str	r0, [r1, #4]
   14c58:	add	r4, r4, #1
   14c5c:	lsr	r7, r7, #1
   14c60:	cmp	r4, #33	; 0x21
   14c64:	bne	14b78 <UnityPrintMask@@Base+0x5c>
   14c68:	ldrd	r0, [r6, #96]	; 0x60
   14c6c:	adds	r0, r0, #1
   14c70:	adc	r1, r1, #0
   14c74:	strd	r0, [r6, #96]	; 0x60
   14c78:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00014c7c <UnityPrintFail@@Base>:
   14c7c:	movw	r0, #62968	; 0xf5f8
   14c80:	movt	r0, #2
   14c84:	ldm	r0, {r1, r2, r3, ip}
   14c88:	adds	r1, r1, #1
   14c8c:	adc	r2, r2, #0
   14c90:	adds	r3, r3, #1
   14c94:	adc	ip, ip, #0
   14c98:	stm	r0, {r1, r2, r3, ip}
   14c9c:	movw	r0, #54264	; 0xd3f8
   14ca0:	movt	r0, #1
   14ca4:	b	1413c <UnityPrint@@Base>

00014ca8 <UnityPrintOk@@Base>:
   14ca8:	movw	r0, #62984	; 0xf608
   14cac:	movt	r0, #2
   14cb0:	ldm	r0, {r1, r2, r3, ip}
   14cb4:	adds	r1, r1, #1
   14cb8:	adc	r2, r2, #0
   14cbc:	adds	r3, r3, #1
   14cc0:	adc	ip, ip, #0
   14cc4:	stm	r0, {r1, r2, r3, ip}
   14cc8:	movw	r0, #54256	; 0xd3f0
   14ccc:	movt	r0, #1
   14cd0:	b	1413c <UnityPrint@@Base>

00014cd4 <UnityConcludeTest@@Base>:
   14cd4:	push	{r4, r5, fp, lr}
   14cd8:	add	fp, sp, #8
   14cdc:	movw	r4, #63008	; 0xf620
   14ce0:	movt	r4, #2
   14ce4:	ldrd	r0, [r4]
   14ce8:	adds	r0, r0, #1
   14cec:	adc	r1, r1, #0
   14cf0:	strd	r0, [r4]
   14cf4:	movw	r5, #1864	; 0x748
   14cf8:	movt	r5, #3
   14cfc:	ldr	r0, [r5, #36]	; 0x24
   14d00:	mov	r1, #16
   14d04:	cmp	r0, #0
   14d08:	movwne	r1, #8
   14d0c:	mov	r2, r4
   14d10:	ldr	r1, [r2, r1]!
   14d14:	adds	r1, r1, #1
   14d18:	str	r1, [r2]
   14d1c:	ldr	r1, [r2, #4]
   14d20:	adc	r1, r1, #0
   14d24:	str	r1, [r2, #4]
   14d28:	cmp	r0, #0
   14d2c:	beq	14d50 <UnityConcludeTest@@Base+0x7c>
   14d30:	ldrd	r0, [r4, #24]
   14d34:	adds	r0, r0, #1
   14d38:	ldr	r2, [r5, #28]
   14d3c:	add	r2, r2, #1
   14d40:	str	r2, [r5, #28]
   14d44:	adc	r1, r1, #0
   14d48:	strd	r0, [r4, #24]
   14d4c:	b	14dcc <UnityConcludeTest@@Base+0xf8>
   14d50:	ldr	r0, [r5, #32]
   14d54:	mov	r1, #40	; 0x28
   14d58:	cmp	r0, #0
   14d5c:	movwne	r1, #32
   14d60:	mov	r2, r4
   14d64:	ldr	r1, [r2, r1]!
   14d68:	adds	r1, r1, #1
   14d6c:	str	r1, [r2]
   14d70:	ldr	r1, [r2, #4]
   14d74:	adc	r1, r1, #0
   14d78:	str	r1, [r2, #4]
   14d7c:	cmp	r0, #0
   14d80:	beq	14da4 <UnityConcludeTest@@Base+0xd0>
   14d84:	ldrd	r0, [r4, #56]	; 0x38
   14d88:	adds	r0, r0, #1
   14d8c:	ldr	r2, [r5, #24]
   14d90:	add	r2, r2, #1
   14d94:	str	r2, [r5, #24]
   14d98:	adc	r1, r1, #0
   14d9c:	strd	r0, [r4, #56]	; 0x38
   14da0:	b	14dcc <UnityConcludeTest@@Base+0xf8>
   14da4:	ldrd	r0, [r4, #48]	; 0x30
   14da8:	adds	r0, r0, #1
   14dac:	adc	r1, r1, #0
   14db0:	strd	r0, [r4, #48]	; 0x30
   14db4:	ldr	r0, [r5]
   14db8:	ldr	r1, [r5, #16]
   14dbc:	bl	14df4 <UnityConcludeTest@@Base+0x120>
   14dc0:	movw	r0, #54259	; 0xd3f3
   14dc4:	movt	r0, #1
   14dc8:	bl	1413c <UnityPrint@@Base>
   14dcc:	mov	r0, #0
   14dd0:	str	r0, [r5, #32]
   14dd4:	str	r0, [r5, #36]	; 0x24
   14dd8:	ldrd	r0, [r4, #64]	; 0x40
   14ddc:	adds	r0, r0, #1
   14de0:	adc	r1, r1, #0
   14de4:	strd	r0, [r4, #64]	; 0x40
   14de8:	mov	r0, #10
   14dec:	pop	{r4, r5, fp, lr}
   14df0:	b	12760 <putchar@plt>
   14df4:	push	{r4, r5, r6, sl, fp, lr}
   14df8:	add	fp, sp, #16
   14dfc:	mov	r6, r1
   14e00:	movw	r1, #63080	; 0xf668
   14e04:	movt	r1, #2
   14e08:	ldm	r1, {r2, r3, r4, r5}
   14e0c:	adds	r2, r2, #1
   14e10:	adc	r3, r3, #0
   14e14:	adds	r4, r4, #1
   14e18:	adc	r5, r5, #0
   14e1c:	stm	r1, {r2, r3, r4, r5}
   14e20:	bl	1413c <UnityPrint@@Base>
   14e24:	mov	r0, #58	; 0x3a
   14e28:	bl	12760 <putchar@plt>
   14e2c:	mov	r0, r6
   14e30:	bl	147ec <UnityPrintNumber@@Base>
   14e34:	mov	r0, #58	; 0x3a
   14e38:	bl	12760 <putchar@plt>
   14e3c:	movw	r0, #1864	; 0x748
   14e40:	movt	r0, #3
   14e44:	ldr	r0, [r0, #4]
   14e48:	bl	1413c <UnityPrint@@Base>
   14e4c:	mov	r0, #58	; 0x3a
   14e50:	pop	{r4, r5, r6, sl, fp, lr}
   14e54:	b	12760 <putchar@plt>

00014e58 <UnityAssertBits@@Base>:
   14e58:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e5c:	add	fp, sp, #24
   14e60:	mov	r8, r3
   14e64:	mov	r5, r2
   14e68:	mov	r7, r1
   14e6c:	mov	r6, r0
   14e70:	movw	r0, #63104	; 0xf680
   14e74:	movt	r0, #2
   14e78:	ldrd	r2, [r0]
   14e7c:	adds	r2, r2, #1
   14e80:	adc	r3, r3, #0
   14e84:	strd	r2, [r0]
   14e88:	movw	r4, #1864	; 0x748
   14e8c:	movt	r4, #3
   14e90:	ldrd	r2, [r4, #32]
   14e94:	orrs	r1, r3, r2
   14e98:	mov	r2, #16
   14e9c:	movwne	r2, #8
   14ea0:	mov	r3, r0
   14ea4:	ldr	r2, [r3, r2]!
   14ea8:	adds	r2, r2, #1
   14eac:	str	r2, [r3]
   14eb0:	ldr	r2, [r3, #4]
   14eb4:	adc	r2, r2, #0
   14eb8:	str	r2, [r3, #4]
   14ebc:	cmp	r1, #0
   14ec0:	bne	14ef8 <UnityAssertBits@@Base+0xa0>
   14ec4:	eor	r1, r5, r7
   14ec8:	ands	r1, r1, r6
   14ecc:	mov	r2, #32
   14ed0:	movwne	r2, #24
   14ed4:	mov	r3, r0
   14ed8:	ldr	r2, [r3, r2]!
   14edc:	adds	r2, r2, #1
   14ee0:	str	r2, [r3]
   14ee4:	ldr	r2, [r3, #4]
   14ee8:	adc	r2, r2, #0
   14eec:	str	r2, [r3, #4]
   14ef0:	cmp	r1, #0
   14ef4:	bne	14f0c <UnityAssertBits@@Base+0xb4>
   14ef8:	ldrd	r2, [r0, #40]	; 0x28
   14efc:	adds	r2, r2, #1
   14f00:	adc	r3, r3, #0
   14f04:	strd	r2, [r0, #40]	; 0x28
   14f08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14f0c:	ldr	r0, [fp, #8]
   14f10:	bl	14f60 <UnityAssertBits@@Base+0x108>
   14f14:	movw	r0, #54284	; 0xd40c
   14f18:	movt	r0, #1
   14f1c:	bl	1413c <UnityPrint@@Base>
   14f20:	mov	r0, r6
   14f24:	mov	r1, r7
   14f28:	bl	14b1c <UnityPrintMask@@Base>
   14f2c:	movw	r0, #54295	; 0xd417
   14f30:	movt	r0, #1
   14f34:	bl	1413c <UnityPrint@@Base>
   14f38:	mov	r0, r6
   14f3c:	mov	r1, r5
   14f40:	bl	14b1c <UnityPrintMask@@Base>
   14f44:	mov	r0, r8
   14f48:	bl	14fc8 <UnityAssertBits@@Base+0x170>
   14f4c:	mov	r0, #1
   14f50:	str	r0, [r4, #32]
   14f54:	add	r0, r4, #40	; 0x28
   14f58:	mov	r1, #1
   14f5c:	bl	12610 <longjmp@plt>
   14f60:	push	{fp, lr}
   14f64:	mov	fp, sp
   14f68:	mov	ip, r0
   14f6c:	movw	r0, #63152	; 0xf6b0
   14f70:	movt	r0, #2
   14f74:	ldm	r0, {r2, r3}
   14f78:	ldr	r1, [r0, #8]
   14f7c:	ldr	lr, [r0, #12]
   14f80:	adds	r2, r2, #1
   14f84:	adc	r3, r3, #0
   14f88:	adds	r1, r1, #1
   14f8c:	adc	lr, lr, #0
   14f90:	stm	r0, {r2, r3}
   14f94:	str	r1, [r0, #8]
   14f98:	str	lr, [r0, #12]
   14f9c:	movw	r0, #1864	; 0x748
   14fa0:	movt	r0, #3
   14fa4:	ldr	r0, [r0]
   14fa8:	mov	r1, ip
   14fac:	bl	14df4 <UnityConcludeTest@@Base+0x120>
   14fb0:	movw	r0, #54264	; 0xd3f8
   14fb4:	movt	r0, #1
   14fb8:	bl	1413c <UnityPrint@@Base>
   14fbc:	mov	r0, #58	; 0x3a
   14fc0:	pop	{fp, lr}
   14fc4:	b	12760 <putchar@plt>
   14fc8:	push	{r4, r5, r6, sl, fp, lr}
   14fcc:	add	fp, sp, #16
   14fd0:	mov	r4, r0
   14fd4:	movw	r5, #63168	; 0xf6c0
   14fd8:	movt	r5, #2
   14fdc:	ldrd	r0, [r5]
   14fe0:	adds	r0, r0, #1
   14fe4:	adc	r1, r1, #0
   14fe8:	strd	r0, [r5]
   14fec:	mov	r0, #16
   14ff0:	cmp	r4, #0
   14ff4:	movwne	r0, #8
   14ff8:	mov	r1, r5
   14ffc:	ldr	r0, [r1, r0]!
   15000:	adds	r0, r0, #1
   15004:	str	r0, [r1]
   15008:	ldr	r0, [r1, #4]
   1500c:	adc	r0, r0, #0
   15010:	str	r0, [r1, #4]
   15014:	cmp	r4, #0
   15018:	beq	15104 <UnityAssertBits@@Base+0x2ac>
   1501c:	movw	r0, #54281	; 0xd409
   15020:	movt	r0, #1
   15024:	bl	1413c <UnityPrint@@Base>
   15028:	movw	r6, #1864	; 0x748
   1502c:	movt	r6, #3
   15030:	ldr	r0, [r6, #8]
   15034:	mov	r1, #32
   15038:	cmp	r0, #0
   1503c:	movwne	r1, #24
   15040:	mov	r2, r5
   15044:	ldr	r1, [r2, r1]!
   15048:	adds	r1, r1, #1
   1504c:	str	r1, [r2]
   15050:	ldr	r1, [r2, #4]
   15054:	adc	r1, r1, #0
   15058:	str	r1, [r2, #4]
   1505c:	cmp	r0, #0
   15060:	beq	150ec <UnityAssertBits@@Base+0x294>
   15064:	movw	r0, #54689	; 0xd5a1
   15068:	movt	r0, #1
   1506c:	bl	1413c <UnityPrint@@Base>
   15070:	ldr	r0, [r6, #8]
   15074:	bl	1413c <UnityPrint@@Base>
   15078:	ldr	r0, [r6, #12]
   1507c:	mov	r1, #48	; 0x30
   15080:	cmp	r0, #0
   15084:	movwne	r1, #40	; 0x28
   15088:	mov	r2, r5
   1508c:	ldr	r1, [r2, r1]!
   15090:	adds	r1, r1, #1
   15094:	str	r1, [r2]
   15098:	ldr	r1, [r2, #4]
   1509c:	adc	r1, r1, #0
   150a0:	str	r1, [r2, #4]
   150a4:	cmp	r0, #0
   150a8:	beq	150d0 <UnityAssertBits@@Base+0x278>
   150ac:	ldrd	r0, [r5, #56]	; 0x38
   150b0:	adds	r0, r0, #1
   150b4:	adc	r1, r1, #0
   150b8:	strd	r0, [r5, #56]	; 0x38
   150bc:	movw	r0, #54699	; 0xd5ab
   150c0:	movt	r0, #1
   150c4:	bl	1413c <UnityPrint@@Base>
   150c8:	ldr	r0, [r6, #12]
   150cc:	bl	1413c <UnityPrint@@Base>
   150d0:	ldrd	r0, [r5, #64]	; 0x40
   150d4:	adds	r0, r0, #1
   150d8:	adc	r1, r1, #0
   150dc:	strd	r0, [r5, #64]	; 0x40
   150e0:	movw	r0, #54281	; 0xd409
   150e4:	movt	r0, #1
   150e8:	bl	1413c <UnityPrint@@Base>
   150ec:	ldrd	r0, [r5, #72]	; 0x48
   150f0:	adds	r0, r0, #1
   150f4:	adc	r1, r1, #0
   150f8:	strd	r0, [r5, #72]	; 0x48
   150fc:	mov	r0, r4
   15100:	bl	1413c <UnityPrint@@Base>
   15104:	ldrd	r0, [r5, #80]	; 0x50
   15108:	adds	r0, r0, #1
   1510c:	adc	r1, r1, #0
   15110:	strd	r0, [r5, #80]	; 0x50
   15114:	pop	{r4, r5, r6, sl, fp, pc}

00015118 <UnityAssertEqualNumber@@Base>:
   15118:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1511c:	add	fp, sp, #24
   15120:	mov	r9, r2
   15124:	mov	r5, r1
   15128:	mov	r6, r0
   1512c:	movw	r4, #63264	; 0xf720
   15130:	movt	r4, #2
   15134:	ldr	r2, [r4]
   15138:	ldr	r1, [r4, #4]
   1513c:	adds	r2, r2, #1
   15140:	adc	r1, r1, #0
   15144:	str	r2, [r4]
   15148:	str	r1, [r4, #4]
   1514c:	movw	r7, #1864	; 0x748
   15150:	movt	r7, #3
   15154:	ldr	r2, [r7, #32]
   15158:	ldr	r1, [r7, #36]	; 0x24
   1515c:	orrs	r1, r1, r2
   15160:	mov	r2, #16
   15164:	movwne	r2, #8
   15168:	mov	r0, r4
   1516c:	ldr	r2, [r0, r2]!
   15170:	adds	r2, r2, #1
   15174:	str	r2, [r0]
   15178:	ldr	r2, [r0, #4]
   1517c:	adc	r2, r2, #0
   15180:	str	r2, [r0, #4]
   15184:	cmp	r1, #0
   15188:	bne	151bc <UnityAssertEqualNumber@@Base+0xa4>
   1518c:	mov	r0, #32
   15190:	cmp	r6, r5
   15194:	movwne	r0, #24
   15198:	mov	r1, r4
   1519c:	ldr	r0, [r1, r0]!
   151a0:	adds	r0, r0, #1
   151a4:	str	r0, [r1]
   151a8:	ldr	r0, [r1, #4]
   151ac:	adc	r0, r0, #0
   151b0:	str	r0, [r1, #4]
   151b4:	cmp	r6, r5
   151b8:	bne	151d0 <UnityAssertEqualNumber@@Base+0xb8>
   151bc:	ldrd	r0, [r4, #40]	; 0x28
   151c0:	adds	r0, r0, #1
   151c4:	adc	r1, r1, #0
   151c8:	strd	r0, [r4, #40]	; 0x28
   151cc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   151d0:	ldr	r8, [fp, #8]
   151d4:	mov	r0, r3
   151d8:	bl	14f60 <UnityAssertBits@@Base+0x108>
   151dc:	movw	r0, #54284	; 0xd40c
   151e0:	movt	r0, #1
   151e4:	bl	1413c <UnityPrint@@Base>
   151e8:	mov	r0, r6
   151ec:	mov	r1, r8
   151f0:	bl	146f8 <UnityPrintNumberByStyle@@Base>
   151f4:	movw	r0, #54295	; 0xd417
   151f8:	movt	r0, #1
   151fc:	bl	1413c <UnityPrint@@Base>
   15200:	mov	r0, r5
   15204:	mov	r1, r8
   15208:	bl	146f8 <UnityPrintNumberByStyle@@Base>
   1520c:	mov	r0, r9
   15210:	bl	14fc8 <UnityAssertBits@@Base+0x170>
   15214:	mov	r0, #1
   15218:	str	r0, [r7, #32]
   1521c:	add	r0, r7, #40	; 0x28
   15220:	mov	r1, #1
   15224:	bl	12610 <longjmp@plt>

00015228 <UnityAssertEqualIntArray@@Base>:
   15228:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1522c:	add	fp, sp, #28
   15230:	sub	sp, sp, #4
   15234:	mov	r9, r2
   15238:	mov	r5, r1
   1523c:	mov	r6, r0
   15240:	movw	sl, #63312	; 0xf750
   15244:	movt	sl, #2
   15248:	ldrd	r0, [sl]
   1524c:	adds	r0, r0, #1
   15250:	adc	r1, r1, #0
   15254:	strd	r0, [sl]
   15258:	movw	r4, #1864	; 0x748
   1525c:	movt	r4, #3
   15260:	ldrd	r0, [r4, #32]
   15264:	orrs	r0, r1, r0
   15268:	mov	r1, #16
   1526c:	movwne	r1, #8
   15270:	mov	r2, sl
   15274:	ldr	r1, [r2, r1]!
   15278:	adds	r1, r1, #1
   1527c:	str	r1, [r2]
   15280:	ldr	r1, [r2, #4]
   15284:	adc	r1, r1, #0
   15288:	str	r1, [r2, #4]
   1528c:	cmp	r0, #0
   15290:	beq	152a8 <UnityAssertEqualIntArray@@Base+0x80>
   15294:	ldrd	r0, [sl, #24]
   15298:	adds	r0, r0, #1
   1529c:	adc	r1, r1, #0
   152a0:	strd	r0, [sl, #24]
   152a4:	b	1569c <UnityAssertEqualIntArray@@Base+0x474>
   152a8:	mov	r7, r3
   152ac:	ldr	r2, [fp, #8]
   152b0:	mov	r0, #40	; 0x28
   152b4:	cmp	r9, #0
   152b8:	movweq	r0, #32
   152bc:	mov	r1, sl
   152c0:	ldr	r0, [r1, r0]!
   152c4:	adds	r0, r0, #1
   152c8:	str	r0, [r1]
   152cc:	ldr	r0, [r1, #4]
   152d0:	adc	r0, r0, #0
   152d4:	str	r0, [r1, #4]
   152d8:	cmp	r9, #0
   152dc:	beq	157c8 <UnityAssertEqualIntArray@@Base+0x5a0>
   152e0:	mov	r0, r6
   152e4:	mov	r1, r5
   152e8:	mov	r3, r7
   152ec:	bl	157f8 <UnityAssertEqualIntArray@@Base+0x5d0>
   152f0:	mov	r1, #56	; 0x38
   152f4:	cmp	r0, #1
   152f8:	movweq	r1, #48	; 0x30
   152fc:	mov	r2, sl
   15300:	ldr	r1, [r2, r1]!
   15304:	adds	r1, r1, #1
   15308:	str	r1, [r2]
   1530c:	ldr	r1, [r2, #4]
   15310:	adc	r1, r1, #0
   15314:	str	r1, [r2, #4]
   15318:	cmp	r0, #1
   1531c:	bne	15334 <UnityAssertEqualIntArray@@Base+0x10c>
   15320:	ldrd	r0, [sl, #64]	; 0x40
   15324:	adds	r0, r0, #1
   15328:	adc	r1, r1, #0
   1532c:	strd	r0, [sl, #64]	; 0x40
   15330:	b	1569c <UnityAssertEqualIntArray@@Base+0x474>
   15334:	str	r7, [sp]
   15338:	ldr	r1, [fp, #12]
   1533c:	movw	r0, #61644	; 0xf0cc
   15340:	movt	r0, #2
   15344:	mov	r4, #0
   15348:	str	r4, [r0]
   1534c:	bic	r0, r1, #128	; 0x80
   15350:	sub	r0, r0, #17
   15354:	cmp	r0, #49	; 0x31
   15358:	bhi	155bc <UnityAssertEqualIntArray@@Base+0x394>
   1535c:	add	r1, pc, #0
   15360:	ldr	pc, [r1, r0, lsl #2]
   15364:	andeq	r5, r1, ip, lsr #8
   15368:	strdeq	r5, [r1], -r4
   1536c:			; <UNDEFINED> instruction: 0x000155bc
   15370:			; <UNDEFINED> instruction: 0x000155bc
   15374:			; <UNDEFINED> instruction: 0x000155bc
   15378:			; <UNDEFINED> instruction: 0x000155bc
   1537c:			; <UNDEFINED> instruction: 0x000155bc
   15380:			; <UNDEFINED> instruction: 0x000155bc
   15384:			; <UNDEFINED> instruction: 0x000155bc
   15388:			; <UNDEFINED> instruction: 0x000155bc
   1538c:			; <UNDEFINED> instruction: 0x000155bc
   15390:			; <UNDEFINED> instruction: 0x000155bc
   15394:			; <UNDEFINED> instruction: 0x000155bc
   15398:			; <UNDEFINED> instruction: 0x000155bc
   1539c:			; <UNDEFINED> instruction: 0x000155bc
   153a0:			; <UNDEFINED> instruction: 0x000155bc
   153a4:	andeq	r5, r1, ip, lsr #8
   153a8:	strdeq	r5, [r1], -r4
   153ac:			; <UNDEFINED> instruction: 0x000155bc
   153b0:			; <UNDEFINED> instruction: 0x000155bc
   153b4:			; <UNDEFINED> instruction: 0x000155bc
   153b8:			; <UNDEFINED> instruction: 0x000155bc
   153bc:			; <UNDEFINED> instruction: 0x000155bc
   153c0:			; <UNDEFINED> instruction: 0x000155bc
   153c4:			; <UNDEFINED> instruction: 0x000155bc
   153c8:			; <UNDEFINED> instruction: 0x000155bc
   153cc:			; <UNDEFINED> instruction: 0x000155bc
   153d0:			; <UNDEFINED> instruction: 0x000155bc
   153d4:			; <UNDEFINED> instruction: 0x000155bc
   153d8:			; <UNDEFINED> instruction: 0x000155bc
   153dc:			; <UNDEFINED> instruction: 0x000155bc
   153e0:			; <UNDEFINED> instruction: 0x000155bc
   153e4:			; <UNDEFINED> instruction: 0x000155bc
   153e8:			; <UNDEFINED> instruction: 0x000155bc
   153ec:			; <UNDEFINED> instruction: 0x000155bc
   153f0:			; <UNDEFINED> instruction: 0x000155bc
   153f4:			; <UNDEFINED> instruction: 0x000155bc
   153f8:			; <UNDEFINED> instruction: 0x000155bc
   153fc:			; <UNDEFINED> instruction: 0x000155bc
   15400:			; <UNDEFINED> instruction: 0x000155bc
   15404:			; <UNDEFINED> instruction: 0x000155bc
   15408:			; <UNDEFINED> instruction: 0x000155bc
   1540c:			; <UNDEFINED> instruction: 0x000155bc
   15410:			; <UNDEFINED> instruction: 0x000155bc
   15414:			; <UNDEFINED> instruction: 0x000155bc
   15418:			; <UNDEFINED> instruction: 0x000155bc
   1541c:			; <UNDEFINED> instruction: 0x000155bc
   15420:			; <UNDEFINED> instruction: 0x000155bc
   15424:	andeq	r5, r1, ip, lsr #8
   15428:	strdeq	r5, [r1], -r4
   1542c:	movw	r0, #54760	; 0xd5e8
   15430:	movt	r0, #1
   15434:	add	r1, r0, #4
   15438:	movw	r0, #61644	; 0xf0cc
   1543c:	movt	r0, #2
   15440:	bl	17918 <UnityEnd@@Base+0x108>
   15444:	add	r3, sl, #128	; 0x80
   15448:	ldm	r3, {r0, r1, r2, r3}
   1544c:	adds	r0, r0, #1
   15450:	adc	r1, r1, #0
   15454:	adds	r2, r2, #1
   15458:	adc	r3, r3, #0
   1545c:	add	ip, sl, #128	; 0x80
   15460:	stm	ip, {r0, r1, r2, r3}
   15464:	sub	r0, r9, #1
   15468:	mov	r4, #0
   1546c:	ldrb	r1, [r5]
   15470:	ldrb	r2, [r6]
   15474:	cmp	r2, r1
   15478:	mov	r3, #160	; 0xa0
   1547c:	movwne	r3, #152	; 0x98
   15480:	mov	r7, sl
   15484:	ldr	r3, [r7, r3]!
   15488:	adds	r3, r3, #1
   1548c:	str	r3, [r7]
   15490:	ldr	r3, [r7, #4]
   15494:	adc	r3, r3, #0
   15498:	str	r3, [r7, #4]
   1549c:	cmp	r2, r1
   154a0:	bne	156bc <UnityAssertEqualIntArray@@Base+0x494>
   154a4:	ldrd	r2, [sl, #168]	; 0xa8
   154a8:	adds	r2, r2, #1
   154ac:	adc	r3, r3, #0
   154b0:	strd	r2, [sl, #168]	; 0xa8
   154b4:	cmp	r0, r4
   154b8:	mov	r1, #144	; 0x90
   154bc:	movwne	r1, #136	; 0x88
   154c0:	mov	r2, sl
   154c4:	ldr	r1, [r2, r1]!
   154c8:	adds	r1, r1, #1
   154cc:	str	r1, [r2]
   154d0:	ldr	r1, [r2, #4]
   154d4:	adc	r1, r1, #0
   154d8:	str	r1, [r2, #4]
   154dc:	add	r4, r4, #1
   154e0:	add	r5, r5, #1
   154e4:	add	r6, r6, #1
   154e8:	cmp	r9, r4
   154ec:	bne	1546c <UnityAssertEqualIntArray@@Base+0x244>
   154f0:	b	15684 <UnityAssertEqualIntArray@@Base+0x45c>
   154f4:	movw	r0, #54760	; 0xd5e8
   154f8:	movt	r0, #1
   154fc:	add	r1, r0, #8
   15500:	movw	r0, #61644	; 0xf0cc
   15504:	movt	r0, #2
   15508:	bl	17918 <UnityEnd@@Base+0x108>
   1550c:	add	r3, sl, #176	; 0xb0
   15510:	ldm	r3, {r0, r1, r2, r3}
   15514:	adds	r0, r0, #1
   15518:	adc	r1, r1, #0
   1551c:	adds	r2, r2, #1
   15520:	adc	r3, r3, #0
   15524:	add	ip, sl, #176	; 0xb0
   15528:	stm	ip, {r0, r1, r2, r3}
   1552c:	sub	r0, r9, #1
   15530:	mov	r4, #0
   15534:	ldrh	r1, [r5]
   15538:	ldrh	r2, [r6]
   1553c:	cmp	r2, r1
   15540:	mov	r3, #208	; 0xd0
   15544:	movwne	r3, #200	; 0xc8
   15548:	mov	r7, sl
   1554c:	ldr	r3, [r7, r3]!
   15550:	adds	r3, r3, #1
   15554:	str	r3, [r7]
   15558:	ldr	r3, [r7, #4]
   1555c:	adc	r3, r3, #0
   15560:	str	r3, [r7, #4]
   15564:	cmp	r2, r1
   15568:	bne	15708 <UnityAssertEqualIntArray@@Base+0x4e0>
   1556c:	ldrd	r2, [sl, #216]	; 0xd8
   15570:	adds	r2, r2, #1
   15574:	adc	r3, r3, #0
   15578:	strd	r2, [sl, #216]	; 0xd8
   1557c:	cmp	r0, r4
   15580:	mov	r1, #192	; 0xc0
   15584:	movwne	r1, #184	; 0xb8
   15588:	mov	r2, sl
   1558c:	ldr	r1, [r2, r1]!
   15590:	adds	r1, r1, #1
   15594:	str	r1, [r2]
   15598:	ldr	r1, [r2, #4]
   1559c:	adc	r1, r1, #0
   155a0:	str	r1, [r2, #4]
   155a4:	add	r4, r4, #1
   155a8:	add	r5, r5, #2
   155ac:	add	r6, r6, #2
   155b0:	cmp	r9, r4
   155b4:	bne	15534 <UnityAssertEqualIntArray@@Base+0x30c>
   155b8:	b	15684 <UnityAssertEqualIntArray@@Base+0x45c>
   155bc:	movw	r0, #61644	; 0xf0cc
   155c0:	movt	r0, #2
   155c4:	movw	r7, #54760	; 0xd5e8
   155c8:	movt	r7, #1
   155cc:	mov	r1, r7
   155d0:	bl	17918 <UnityEnd@@Base+0x108>
   155d4:	ldrd	r0, [sl, #224]	; 0xe0
   155d8:	adds	r0, r0, #1
   155dc:	adc	r1, r1, #0
   155e0:	strd	r0, [sl, #224]	; 0xe0
   155e4:	sub	r8, r9, #1
   155e8:	ldr	r0, [r5]
   155ec:	ldr	r1, [r6]
   155f0:	cmp	r1, r0
   155f4:	mov	r2, #248	; 0xf8
   155f8:	movwne	r2, #240	; 0xf0
   155fc:	mov	r3, sl
   15600:	ldr	r2, [r3, r2]!
   15604:	adds	r2, r2, #1
   15608:	str	r2, [r3]
   1560c:	ldr	r2, [r3, #4]
   15610:	adc	r2, r2, #0
   15614:	str	r2, [r3, #4]
   15618:	cmp	r1, r0
   1561c:	bne	15754 <UnityAssertEqualIntArray@@Base+0x52c>
   15620:	ldr	r0, [sl, #256]	; 0x100
   15624:	ldr	r1, [sl, #260]	; 0x104
   15628:	adds	r0, r0, #1
   1562c:	adc	r1, r1, #0
   15630:	str	r0, [sl, #256]	; 0x100
   15634:	str	r1, [sl, #260]	; 0x104
   15638:	movw	r0, #61644	; 0xf0cc
   1563c:	movt	r0, #2
   15640:	mov	r1, r7
   15644:	bl	17918 <UnityEnd@@Base+0x108>
   15648:	cmp	r8, r4
   1564c:	mov	r0, #232	; 0xe8
   15650:	movwne	r0, #224	; 0xe0
   15654:	mov	r1, sl
   15658:	ldr	r0, [r1, r0]!
   1565c:	adds	r0, r0, #1
   15660:	str	r0, [r1]
   15664:	ldr	r0, [r1, #4]
   15668:	adc	r0, r0, #0
   1566c:	str	r0, [r1, #4]
   15670:	add	r4, r4, #1
   15674:	add	r5, r5, #4
   15678:	add	r6, r6, #4
   1567c:	cmp	r9, r4
   15680:	bne	155e8 <UnityAssertEqualIntArray@@Base+0x3c0>
   15684:	ldr	r0, [sl, #264]	; 0x108
   15688:	ldr	r1, [sl, #268]	; 0x10c
   1568c:	adds	r0, r0, #1
   15690:	adc	r1, r1, #0
   15694:	str	r0, [sl, #264]	; 0x108
   15698:	str	r1, [sl, #268]	; 0x10c
   1569c:	ldr	r0, [sl, #272]	; 0x110
   156a0:	ldr	r1, [sl, #276]	; 0x114
   156a4:	adds	r0, r0, #1
   156a8:	adc	r1, r1, #0
   156ac:	str	r0, [sl, #272]	; 0x110
   156b0:	str	r1, [sl, #276]	; 0x114
   156b4:	sub	sp, fp, #28
   156b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156bc:	ldr	r0, [fp, #8]
   156c0:	bl	14f60 <UnityAssertBits@@Base+0x108>
   156c4:	movw	r0, #54306	; 0xd422
   156c8:	movt	r0, #1
   156cc:	bl	1413c <UnityPrint@@Base>
   156d0:	mov	r0, r4
   156d4:	bl	149b8 <UnityPrintNumberUnsigned@@Base>
   156d8:	movw	r0, #54284	; 0xd40c
   156dc:	movt	r0, #1
   156e0:	bl	1413c <UnityPrint@@Base>
   156e4:	ldrsb	r0, [r6]
   156e8:	ldr	r4, [fp, #12]
   156ec:	mov	r1, r4
   156f0:	bl	146f8 <UnityPrintNumberByStyle@@Base>
   156f4:	movw	r0, #54295	; 0xd417
   156f8:	movt	r0, #1
   156fc:	bl	1413c <UnityPrint@@Base>
   15700:	ldrsb	r0, [r5]
   15704:	b	1579c <UnityAssertEqualIntArray@@Base+0x574>
   15708:	ldr	r0, [fp, #8]
   1570c:	bl	14f60 <UnityAssertBits@@Base+0x108>
   15710:	movw	r0, #54306	; 0xd422
   15714:	movt	r0, #1
   15718:	bl	1413c <UnityPrint@@Base>
   1571c:	mov	r0, r4
   15720:	bl	149b8 <UnityPrintNumberUnsigned@@Base>
   15724:	movw	r0, #54284	; 0xd40c
   15728:	movt	r0, #1
   1572c:	bl	1413c <UnityPrint@@Base>
   15730:	ldrsh	r0, [r6]
   15734:	ldr	r4, [fp, #12]
   15738:	mov	r1, r4
   1573c:	bl	146f8 <UnityPrintNumberByStyle@@Base>
   15740:	movw	r0, #54295	; 0xd417
   15744:	movt	r0, #1
   15748:	bl	1413c <UnityPrint@@Base>
   1574c:	ldrsh	r0, [r5]
   15750:	b	1579c <UnityAssertEqualIntArray@@Base+0x574>
   15754:	ldr	r0, [fp, #8]
   15758:	bl	14f60 <UnityAssertBits@@Base+0x108>
   1575c:	movw	r0, #54306	; 0xd422
   15760:	movt	r0, #1
   15764:	bl	1413c <UnityPrint@@Base>
   15768:	mov	r0, r4
   1576c:	bl	149b8 <UnityPrintNumberUnsigned@@Base>
   15770:	movw	r0, #54284	; 0xd40c
   15774:	movt	r0, #1
   15778:	bl	1413c <UnityPrint@@Base>
   1577c:	ldr	r0, [r6]
   15780:	ldr	r4, [fp, #12]
   15784:	mov	r1, r4
   15788:	bl	146f8 <UnityPrintNumberByStyle@@Base>
   1578c:	movw	r0, #54295	; 0xd417
   15790:	movt	r0, #1
   15794:	bl	1413c <UnityPrint@@Base>
   15798:	ldr	r0, [r5]
   1579c:	mov	r1, r4
   157a0:	bl	146f8 <UnityPrintNumberByStyle@@Base>
   157a4:	ldr	r0, [sp]
   157a8:	bl	14fc8 <UnityAssertBits@@Base+0x170>
   157ac:	mov	r0, #1
   157b0:	movw	r1, #1864	; 0x748
   157b4:	movt	r1, #3
   157b8:	str	r0, [r1, #32]
   157bc:	add	r0, r1, #40	; 0x28
   157c0:	mov	r1, #1
   157c4:	bl	12610 <longjmp@plt>
   157c8:	mov	r0, r2
   157cc:	bl	14f60 <UnityAssertBits@@Base+0x108>
   157d0:	movw	r0, #54367	; 0xd45f
   157d4:	movt	r0, #1
   157d8:	bl	1413c <UnityPrint@@Base>
   157dc:	mov	r0, r7
   157e0:	bl	14fc8 <UnityAssertBits@@Base+0x170>
   157e4:	mov	r0, #1
   157e8:	str	r0, [r4, #32]
   157ec:	add	r0, r4, #40	; 0x28
   157f0:	mov	r1, #1
   157f4:	bl	12610 <longjmp@plt>
   157f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   157fc:	add	fp, sp, #24
   15800:	mov	r8, r3
   15804:	movw	r5, #63600	; 0xf870
   15808:	movt	r5, #2
   1580c:	ldrd	r6, [r5]
   15810:	adds	r6, r6, #1
   15814:	adc	r7, r7, #0
   15818:	strd	r6, [r5]
   1581c:	orrs	r7, r0, r1
   15820:	mov	r6, #16
   15824:	movweq	r6, #8
   15828:	mov	r3, r5
   1582c:	ldr	r6, [r3, r6]!
   15830:	adds	r6, r6, #1
   15834:	str	r6, [r3]
   15838:	ldr	r6, [r3, #4]
   1583c:	adc	r6, r6, #0
   15840:	str	r6, [r3, #4]
   15844:	cmp	r7, #0
   15848:	bne	15864 <UnityAssertEqualIntArray@@Base+0x63c>
   1584c:	ldrd	r0, [r5, #24]
   15850:	adds	r0, r0, #1
   15854:	adc	r1, r1, #0
   15858:	strd	r0, [r5, #24]
   1585c:	mov	r0, #1
   15860:	b	158d8 <UnityAssertEqualIntArray@@Base+0x6b0>
   15864:	mov	r3, #40	; 0x28
   15868:	cmp	r0, #0
   1586c:	movweq	r3, #32
   15870:	mov	r4, r5
   15874:	ldr	r3, [r4, r3]!
   15878:	adds	r3, r3, #1
   1587c:	str	r3, [r4]
   15880:	ldr	r3, [r4, #4]
   15884:	adc	r3, r3, #0
   15888:	str	r3, [r4, #4]
   1588c:	cmp	r0, #0
   15890:	beq	158ec <UnityAssertEqualIntArray@@Base+0x6c4>
   15894:	mov	r0, #56	; 0x38
   15898:	cmp	r1, #0
   1589c:	movweq	r0, #48	; 0x30
   158a0:	mov	r3, r5
   158a4:	ldr	r0, [r3, r0]!
   158a8:	adds	r0, r0, #1
   158ac:	str	r0, [r3]
   158b0:	ldr	r0, [r3, #4]
   158b4:	adc	r0, r0, #0
   158b8:	str	r0, [r3, #4]
   158bc:	cmp	r1, #0
   158c0:	beq	15900 <UnityAssertEqualIntArray@@Base+0x6d8>
   158c4:	ldrd	r0, [r5, #64]	; 0x40
   158c8:	adds	r0, r0, #1
   158cc:	adc	r1, r1, #0
   158d0:	strd	r0, [r5, #64]	; 0x40
   158d4:	mov	r0, #0
   158d8:	ldrd	r2, [r5, #72]	; 0x48
   158dc:	adds	r2, r2, #1
   158e0:	adc	r3, r3, #0
   158e4:	strd	r2, [r5, #72]	; 0x48
   158e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   158ec:	mov	r0, r2
   158f0:	bl	14f60 <UnityAssertBits@@Base+0x108>
   158f4:	movw	r0, #54422	; 0xd496
   158f8:	movt	r0, #1
   158fc:	b	15910 <UnityAssertEqualIntArray@@Base+0x6e8>
   15900:	mov	r0, r2
   15904:	bl	14f60 <UnityAssertBits@@Base+0x108>
   15908:	movw	r0, #54451	; 0xd4b3
   1590c:	movt	r0, #1
   15910:	bl	1413c <UnityPrint@@Base>
   15914:	mov	r0, r8
   15918:	bl	14fc8 <UnityAssertBits@@Base+0x170>
   1591c:	movw	r0, #1864	; 0x748
   15920:	movt	r0, #3
   15924:	mov	r1, #1
   15928:	str	r1, [r0, #32]
   1592c:	add	r0, r0, #40	; 0x28
   15930:	mov	r1, #1
   15934:	bl	12610 <longjmp@plt>

00015938 <UnityAssertEqualFloatArray@@Base>:
   15938:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1593c:	add	fp, sp, #28
   15940:	sub	sp, sp, #4
   15944:	mov	sl, r2
   15948:	mov	r6, r1
   1594c:	mov	r7, r0
   15950:	movw	r8, #63680	; 0xf8c0
   15954:	movt	r8, #2
   15958:	ldrd	r0, [r8]
   1595c:	adds	r0, r0, #1
   15960:	adc	r1, r1, #0
   15964:	strd	r0, [r8]
   15968:	movw	r5, #1864	; 0x748
   1596c:	movt	r5, #3
   15970:	ldrd	r0, [r5, #32]
   15974:	orrs	r0, r1, r0
   15978:	mov	r1, #16
   1597c:	movwne	r1, #8
   15980:	mov	r2, r8
   15984:	ldr	r1, [r2, r1]!
   15988:	adds	r1, r1, #1
   1598c:	str	r1, [r2]
   15990:	ldr	r1, [r2, #4]
   15994:	adc	r1, r1, #0
   15998:	str	r1, [r2, #4]
   1599c:	cmp	r0, #0
   159a0:	beq	159b8 <UnityAssertEqualFloatArray@@Base+0x80>
   159a4:	ldrd	r0, [r8, #24]
   159a8:	adds	r0, r0, #1
   159ac:	adc	r1, r1, #0
   159b0:	strd	r0, [r8, #24]
   159b4:	b	15bf0 <UnityAssertEqualFloatArray@@Base+0x2b8>
   159b8:	mov	r9, r3
   159bc:	ldr	r4, [fp, #8]
   159c0:	mov	r0, #40	; 0x28
   159c4:	cmp	sl, #0
   159c8:	movweq	r0, #32
   159cc:	mov	r1, r8
   159d0:	ldr	r0, [r1, r0]!
   159d4:	adds	r0, r0, #1
   159d8:	str	r0, [r1]
   159dc:	ldr	r0, [r1, #4]
   159e0:	adc	r0, r0, #0
   159e4:	str	r0, [r1, #4]
   159e8:	cmp	sl, #0
   159ec:	beq	15c50 <UnityAssertEqualFloatArray@@Base+0x318>
   159f0:	mov	r0, r7
   159f4:	mov	r1, r6
   159f8:	mov	r2, r4
   159fc:	mov	r3, r9
   15a00:	bl	157f8 <UnityAssertEqualIntArray@@Base+0x5d0>
   15a04:	mov	r1, #56	; 0x38
   15a08:	cmp	r0, #1
   15a0c:	movweq	r1, #48	; 0x30
   15a10:	mov	r2, r8
   15a14:	ldr	r1, [r2, r1]!
   15a18:	adds	r1, r1, #1
   15a1c:	str	r1, [r2]
   15a20:	ldr	r1, [r2, #4]
   15a24:	adc	r1, r1, #0
   15a28:	str	r1, [r2, #4]
   15a2c:	cmp	r0, #1
   15a30:	bne	15a48 <UnityAssertEqualFloatArray@@Base+0x110>
   15a34:	ldrd	r0, [r8, #64]	; 0x40
   15a38:	adds	r0, r0, #1
   15a3c:	adc	r1, r1, #0
   15a40:	strd	r0, [r8, #64]	; 0x40
   15a44:	b	15bf0 <UnityAssertEqualFloatArray@@Base+0x2b8>
   15a48:	mov	r0, r4
   15a4c:	ldr	r2, [r8, #72]	; 0x48
   15a50:	ldr	r1, [r8, #76]	; 0x4c
   15a54:	adds	r2, r2, #1
   15a58:	adc	r1, r1, #0
   15a5c:	str	r2, [r8, #72]	; 0x48
   15a60:	str	r1, [r8, #76]	; 0x4c
   15a64:	sub	r5, sl, #1
   15a68:	mov	r4, #0
   15a6c:	vldr	s0, [pc, #524]	; 15c80 <UnityAssertEqualFloatArray@@Base+0x348>
   15a70:	vldr	s2, [pc, #524]	; 15c84 <UnityAssertEqualFloatArray@@Base+0x34c>
   15a74:	vldr	s4, [r6]
   15a78:	vldr	s6, [r7]
   15a7c:	vsub.f32	s4, s6, s4
   15a80:	vcmpe.f32	s4, #0.0
   15a84:	vmrs	APSR_nzcv, fpscr
   15a88:	mov	r1, #96	; 0x60
   15a8c:	movwmi	r1, #88	; 0x58
   15a90:	mov	r2, r8
   15a94:	ldr	r1, [r2, r1]!
   15a98:	adds	r1, r1, #1
   15a9c:	str	r1, [r2]
   15aa0:	ldr	r1, [r2, #4]
   15aa4:	adc	r1, r1, #0
   15aa8:	str	r1, [r2, #4]
   15aac:	vcmpe.f32	s4, #0.0
   15ab0:	vmrs	APSR_nzcv, fpscr
   15ab4:	bpl	15acc <UnityAssertEqualFloatArray@@Base+0x194>
   15ab8:	ldrd	r2, [r8, #104]	; 0x68
   15abc:	adds	r2, r2, #1
   15ac0:	vsub.f32	s4, s0, s4
   15ac4:	adc	r3, r3, #0
   15ac8:	strd	r2, [r8, #104]	; 0x68
   15acc:	vldr	s6, [r7]
   15ad0:	vmul.f32	s6, s6, s2
   15ad4:	vcmpe.f32	s6, #0.0
   15ad8:	vmrs	APSR_nzcv, fpscr
   15adc:	mov	r1, #120	; 0x78
   15ae0:	movwmi	r1, #112	; 0x70
   15ae4:	mov	r2, r8
   15ae8:	ldr	r1, [r2, r1]!
   15aec:	adds	r1, r1, #1
   15af0:	str	r1, [r2]
   15af4:	ldr	r1, [r2, #4]
   15af8:	adc	r1, r1, #0
   15afc:	str	r1, [r2, #4]
   15b00:	vcmpe.f32	s6, #0.0
   15b04:	vmrs	APSR_nzcv, fpscr
   15b08:	bpl	15b20 <UnityAssertEqualFloatArray@@Base+0x1e8>
   15b0c:	ldrd	r2, [r8, #128]	; 0x80
   15b10:	adds	r2, r2, #1
   15b14:	vsub.f32	s6, s0, s6
   15b18:	adc	r3, r3, #0
   15b1c:	strd	r2, [r8, #128]	; 0x80
   15b20:	vmul.f32	s8, s4, s0
   15b24:	vcmp.f32	s8, #0.0
   15b28:	vmrs	APSR_nzcv, fpscr
   15b2c:	mov	r1, #144	; 0x90
   15b30:	movwne	r1, #136	; 0x88
   15b34:	mov	r2, r8
   15b38:	ldr	r1, [r2, r1]!
   15b3c:	adds	r1, r1, #1
   15b40:	str	r1, [r2]
   15b44:	ldr	r1, [r2, #4]
   15b48:	adc	r1, r1, #0
   15b4c:	str	r1, [r2, #4]
   15b50:	vcmp.f32	s8, #0.0
   15b54:	vmrs	APSR_nzcv, fpscr
   15b58:	bne	15c08 <UnityAssertEqualFloatArray@@Base+0x2d0>
   15b5c:	vcmpe.f32	s4, s6
   15b60:	vmrs	APSR_nzcv, fpscr
   15b64:	mov	r1, #160	; 0xa0
   15b68:	movwgt	r1, #152	; 0x98
   15b6c:	mov	r2, r8
   15b70:	ldr	r1, [r2, r1]!
   15b74:	adds	r1, r1, #1
   15b78:	str	r1, [r2]
   15b7c:	ldr	r1, [r2, #4]
   15b80:	adc	r1, r1, #0
   15b84:	str	r1, [r2, #4]
   15b88:	vcmpe.f32	s4, s6
   15b8c:	vmrs	APSR_nzcv, fpscr
   15b90:	bgt	15c08 <UnityAssertEqualFloatArray@@Base+0x2d0>
   15b94:	ldrd	r2, [r8, #168]	; 0xa8
   15b98:	adds	r2, r2, #1
   15b9c:	adc	r3, r3, #0
   15ba0:	strd	r2, [r8, #168]	; 0xa8
   15ba4:	cmp	r5, r4
   15ba8:	mov	r1, #80	; 0x50
   15bac:	movwne	r1, #72	; 0x48
   15bb0:	mov	r2, r8
   15bb4:	ldr	r1, [r2, r1]!
   15bb8:	adds	r1, r1, #1
   15bbc:	str	r1, [r2]
   15bc0:	ldr	r1, [r2, #4]
   15bc4:	adc	r1, r1, #0
   15bc8:	str	r1, [r2, #4]
   15bcc:	add	r4, r4, #1
   15bd0:	add	r6, r6, #4
   15bd4:	add	r7, r7, #4
   15bd8:	cmp	sl, r4
   15bdc:	bne	15a74 <UnityAssertEqualFloatArray@@Base+0x13c>
   15be0:	ldrd	r0, [r8, #176]	; 0xb0
   15be4:	adds	r0, r0, #1
   15be8:	adc	r1, r1, #0
   15bec:	strd	r0, [r8, #176]	; 0xb0
   15bf0:	ldrd	r0, [r8, #184]	; 0xb8
   15bf4:	adds	r0, r0, #1
   15bf8:	adc	r1, r1, #0
   15bfc:	strd	r0, [r8, #184]	; 0xb8
   15c00:	sub	sp, fp, #28
   15c04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c08:	bl	14f60 <UnityAssertBits@@Base+0x108>
   15c0c:	movw	r0, #54306	; 0xd422
   15c10:	movt	r0, #1
   15c14:	bl	1413c <UnityPrint@@Base>
   15c18:	mov	r0, r4
   15c1c:	bl	149b8 <UnityPrintNumberUnsigned@@Base>
   15c20:	movw	r0, #54341	; 0xd445
   15c24:	movt	r0, #1
   15c28:	bl	1413c <UnityPrint@@Base>
   15c2c:	mov	r0, r9
   15c30:	bl	14fc8 <UnityAssertBits@@Base+0x170>
   15c34:	mov	r0, #1
   15c38:	movw	r1, #1864	; 0x748
   15c3c:	movt	r1, #3
   15c40:	str	r0, [r1, #32]
   15c44:	add	r0, r1, #40	; 0x28
   15c48:	mov	r1, #1
   15c4c:	bl	12610 <longjmp@plt>
   15c50:	mov	r0, r4
   15c54:	bl	14f60 <UnityAssertBits@@Base+0x108>
   15c58:	movw	r0, #54367	; 0xd45f
   15c5c:	movt	r0, #1
   15c60:	bl	1413c <UnityPrint@@Base>
   15c64:	mov	r0, r9
   15c68:	bl	14fc8 <UnityAssertBits@@Base+0x170>
   15c6c:	mov	r0, #1
   15c70:	str	r0, [r5, #32]
   15c74:	add	r0, r5, #40	; 0x28
   15c78:	mov	r1, #1
   15c7c:	bl	12610 <longjmp@plt>
   15c80:	andeq	r0, r0, r0
   15c84:	strcc	ip, [r7, -ip, lsr #11]!

00015c88 <UnityAssertFloatsWithin@@Base>:
   15c88:	push	{r4, r5, r6, sl, fp, lr}
   15c8c:	add	fp, sp, #16
   15c90:	mov	r6, r0
   15c94:	movw	r4, #63872	; 0xf980
   15c98:	movt	r4, #2
   15c9c:	ldrd	r2, [r4]
   15ca0:	adds	r2, r2, #1
   15ca4:	adc	r3, r3, #0
   15ca8:	strd	r2, [r4]
   15cac:	movw	r5, #1864	; 0x748
   15cb0:	movt	r5, #3
   15cb4:	ldrd	r2, [r5, #32]
   15cb8:	orrs	r2, r3, r2
   15cbc:	mov	r3, #16
   15cc0:	movwne	r3, #8
   15cc4:	mov	r0, r4
   15cc8:	ldr	r3, [r0, r3]!
   15ccc:	adds	r3, r3, #1
   15cd0:	str	r3, [r0]
   15cd4:	ldr	r3, [r0, #4]
   15cd8:	adc	r3, r3, #0
   15cdc:	str	r3, [r0, #4]
   15ce0:	cmp	r2, #0
   15ce4:	beq	15cfc <UnityAssertFloatsWithin@@Base+0x74>
   15ce8:	ldrd	r0, [r4, #24]
   15cec:	adds	r0, r0, #1
   15cf0:	adc	r1, r1, #0
   15cf4:	strd	r0, [r4, #24]
   15cf8:	b	15e38 <UnityAssertFloatsWithin@@Base+0x1b0>
   15cfc:	vsub.f32	s2, s2, s1
   15d00:	mov	r0, #40	; 0x28
   15d04:	vcmpe.f32	s2, #0.0
   15d08:	vmrs	APSR_nzcv, fpscr
   15d0c:	movwmi	r0, #32
   15d10:	mov	r2, r4
   15d14:	ldr	r0, [r2, r0]!
   15d18:	adds	r0, r0, #1
   15d1c:	str	r0, [r2]
   15d20:	ldr	r0, [r2, #4]
   15d24:	adc	r0, r0, #0
   15d28:	str	r0, [r2, #4]
   15d2c:	vcmpe.f32	s2, #0.0
   15d30:	vmrs	APSR_nzcv, fpscr
   15d34:	bpl	15d58 <UnityAssertFloatsWithin@@Base+0xd0>
   15d38:	ldr	r0, [r4, #48]	; 0x30
   15d3c:	ldr	r3, [r4, #52]	; 0x34
   15d40:	vldr	s4, [pc, #308]	; 15e7c <UnityAssertFloatsWithin@@Base+0x1f4>
   15d44:	adds	r0, r0, #1
   15d48:	vsub.f32	s2, s4, s2
   15d4c:	adc	r3, r3, #0
   15d50:	str	r0, [r4, #48]	; 0x30
   15d54:	str	r3, [r4, #52]	; 0x34
   15d58:	mov	r0, #64	; 0x40
   15d5c:	vcmpe.f32	s0, #0.0
   15d60:	vmrs	APSR_nzcv, fpscr
   15d64:	movwmi	r0, #56	; 0x38
   15d68:	mov	r2, r4
   15d6c:	ldr	r0, [r2, r0]!
   15d70:	adds	r0, r0, #1
   15d74:	str	r0, [r2]
   15d78:	ldr	r0, [r2, #4]
   15d7c:	adc	r0, r0, #0
   15d80:	str	r0, [r2, #4]
   15d84:	vcmpe.f32	s0, #0.0
   15d88:	vmrs	APSR_nzcv, fpscr
   15d8c:	bpl	15db0 <UnityAssertFloatsWithin@@Base+0x128>
   15d90:	ldr	r0, [r4, #72]	; 0x48
   15d94:	ldr	r3, [r4, #76]	; 0x4c
   15d98:	vldr	s4, [pc, #220]	; 15e7c <UnityAssertFloatsWithin@@Base+0x1f4>
   15d9c:	adds	r0, r0, #1
   15da0:	vsub.f32	s0, s4, s0
   15da4:	adc	r3, r3, #0
   15da8:	str	r0, [r4, #72]	; 0x48
   15dac:	str	r3, [r4, #76]	; 0x4c
   15db0:	vldr	s4, [pc, #196]	; 15e7c <UnityAssertFloatsWithin@@Base+0x1f4>
   15db4:	mov	r0, #88	; 0x58
   15db8:	vmul.f32	s4, s2, s4
   15dbc:	vcmp.f32	s4, #0.0
   15dc0:	vmrs	APSR_nzcv, fpscr
   15dc4:	movwne	r0, #80	; 0x50
   15dc8:	mov	r2, r4
   15dcc:	ldr	r0, [r2, r0]!
   15dd0:	adds	r0, r0, #1
   15dd4:	str	r0, [r2]
   15dd8:	ldr	r0, [r2, #4]
   15ddc:	adc	r0, r0, #0
   15de0:	str	r0, [r2, #4]
   15de4:	vcmp.f32	s4, #0.0
   15de8:	vmrs	APSR_nzcv, fpscr
   15dec:	bne	15e4c <UnityAssertFloatsWithin@@Base+0x1c4>
   15df0:	mov	r0, #104	; 0x68
   15df4:	vcmpe.f32	s0, s2
   15df8:	vmrs	APSR_nzcv, fpscr
   15dfc:	movwmi	r0, #96	; 0x60
   15e00:	mov	r2, r4
   15e04:	ldr	r0, [r2, r0]!
   15e08:	adds	r0, r0, #1
   15e0c:	str	r0, [r2]
   15e10:	ldr	r0, [r2, #4]
   15e14:	adc	r0, r0, #0
   15e18:	str	r0, [r2, #4]
   15e1c:	vcmpe.f32	s0, s2
   15e20:	vmrs	APSR_nzcv, fpscr
   15e24:	bmi	15e4c <UnityAssertFloatsWithin@@Base+0x1c4>
   15e28:	ldrd	r0, [r4, #112]	; 0x70
   15e2c:	adds	r0, r0, #1
   15e30:	adc	r1, r1, #0
   15e34:	strd	r0, [r4, #112]	; 0x70
   15e38:	ldrd	r0, [r4, #120]	; 0x78
   15e3c:	adds	r0, r0, #1
   15e40:	adc	r1, r1, #0
   15e44:	strd	r0, [r4, #120]	; 0x78
   15e48:	pop	{r4, r5, r6, sl, fp, pc}
   15e4c:	mov	r0, r1
   15e50:	bl	14f60 <UnityAssertBits@@Base+0x108>
   15e54:	movw	r0, #54341	; 0xd445
   15e58:	movt	r0, #1
   15e5c:	bl	1413c <UnityPrint@@Base>
   15e60:	mov	r0, r6
   15e64:	bl	14fc8 <UnityAssertBits@@Base+0x170>
   15e68:	mov	r0, #1
   15e6c:	str	r0, [r5, #32]
   15e70:	add	r0, r5, #40	; 0x28
   15e74:	mov	r1, #1
   15e78:	bl	12610 <longjmp@plt>
   15e7c:	andeq	r0, r0, r0

00015e80 <UnityAssertFloatSpecial@@Base>:
   15e80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e84:	add	fp, sp, #28
   15e88:	sub	sp, sp, #4
   15e8c:	vpush	{d8}
   15e90:	sub	sp, sp, #24
   15e94:	mov	r5, r1
   15e98:	movw	r7, #64000	; 0xfa00
   15e9c:	movt	r7, #2
   15ea0:	ldr	r4, [r7]
   15ea4:	ldr	r1, [r7, #4]
   15ea8:	adds	r4, r4, #1
   15eac:	adc	r1, r1, #0
   15eb0:	str	r4, [r7]
   15eb4:	str	r1, [r7, #4]
   15eb8:	movw	r1, #54744	; 0xd5d8
   15ebc:	movt	r1, #1
   15ec0:	vld1.64	{d16-d17}, [r1]
   15ec4:	add	sl, sp, #8
   15ec8:	vst1.64	{d16-d17}, [sl]
   15ecc:	movw	r9, #1864	; 0x748
   15ed0:	movt	r9, #3
   15ed4:	ldr	r4, [r9, #32]
   15ed8:	ldr	r1, [r9, #36]	; 0x24
   15edc:	orrs	r6, r1, r4
   15ee0:	mov	r1, #16
   15ee4:	movwne	r1, #8
   15ee8:	mov	r3, r7
   15eec:	ldr	r1, [r3, r1]!
   15ef0:	adds	r1, r1, #1
   15ef4:	str	r1, [r3]
   15ef8:	ldr	r1, [r3, #4]
   15efc:	adc	r1, r1, #0
   15f00:	str	r1, [r3, #4]
   15f04:	cmp	r6, #0
   15f08:	beq	15f14 <UnityAssertFloatSpecial@@Base+0x94>
   15f0c:	add	r0, r7, #24
   15f10:	b	16130 <UnityAssertFloatSpecial@@Base+0x2b0>
   15f14:	and	r4, r2, #1
   15f18:	movw	r1, #61648	; 0xf0d0
   15f1c:	movt	r1, #2
   15f20:	mov	r8, #0
   15f24:	str	r8, [r1]
   15f28:	cmp	r2, #7
   15f2c:	str	r0, [sp, #4]
   15f30:	bhi	160ac <UnityAssertFloatSpecial@@Base+0x22c>
   15f34:	vmov.f32	s16, s0
   15f38:	add	r0, pc, #0
   15f3c:	ldr	pc, [r0, r2, lsl #2]
   15f40:	andeq	r5, r1, r0, ror #30
   15f44:	andeq	r5, r1, r0, ror #30
   15f48:	andeq	r6, r1, r0, rrx
   15f4c:	andeq	r6, r1, r0, rrx
   15f50:	andeq	r5, r1, ip, lsr #31
   15f54:	andeq	r5, r1, ip, lsr #31
   15f58:	andeq	r5, r1, r8, ror #31
   15f5c:	andeq	r5, r1, r8, ror #31
   15f60:	movw	r0, #54784	; 0xd600
   15f64:	movt	r0, #1
   15f68:	add	r1, r0, #4
   15f6c:	movw	r0, #61648	; 0xf0d0
   15f70:	movt	r0, #2
   15f74:	bl	17918 <UnityEnd@@Base+0x108>
   15f78:	ldrd	r0, [r7, #104]	; 0x68
   15f7c:	adds	r0, r0, #1
   15f80:	adc	r1, r1, #0
   15f84:	strd	r0, [r7, #104]	; 0x68
   15f88:	mov	r8, #0
   15f8c:	vcmpe.f32	s16, #0.0
   15f90:	vmrs	APSR_nzcv, fpscr
   15f94:	mov	r6, #0
   15f98:	movwgt	r6, #1
   15f9c:	vmov.f32	s0, s16
   15fa0:	bl	12688 <__isinff@plt>
   15fa4:	and	r6, r0, r6
   15fa8:	b	160fc <UnityAssertFloatSpecial@@Base+0x27c>
   15fac:	movw	r0, #54784	; 0xd600
   15fb0:	movt	r0, #1
   15fb4:	add	r1, r0, #12
   15fb8:	movw	r0, #61648	; 0xf0d0
   15fbc:	movt	r0, #2
   15fc0:	bl	17918 <UnityEnd@@Base+0x108>
   15fc4:	ldrd	r0, [r7, #120]	; 0x78
   15fc8:	adds	r0, r0, #1
   15fcc:	adc	r1, r1, #0
   15fd0:	strd	r0, [r7, #120]	; 0x78
   15fd4:	vmov.f32	s0, s16
   15fd8:	bl	12640 <__isnanf@plt>
   15fdc:	mov	r6, r0
   15fe0:	mov	r8, #2
   15fe4:	b	160fc <UnityAssertFloatSpecial@@Base+0x27c>
   15fe8:	movw	r0, #54784	; 0xd600
   15fec:	movt	r0, #1
   15ff0:	add	r1, r0, #16
   15ff4:	movw	r0, #61648	; 0xf0d0
   15ff8:	movt	r0, #2
   15ffc:	bl	17918 <UnityEnd@@Base+0x108>
   16000:	vmov.f32	s0, s16
   16004:	bl	12688 <__isinff@plt>
   16008:	mov	r6, r0
   1600c:	vmov.f32	s0, s16
   16010:	bl	12640 <__isnanf@plt>
   16014:	orrs	r0, r0, r6
   16018:	mov	r1, #136	; 0x88
   1601c:	movwne	r1, #128	; 0x80
   16020:	mov	r2, r7
   16024:	ldr	r1, [r2, r1]!
   16028:	adds	r1, r1, #1
   1602c:	str	r1, [r2]
   16030:	ldr	r1, [r2, #4]
   16034:	adc	r1, r1, #0
   16038:	str	r1, [r2, #4]
   1603c:	cmp	r0, #0
   16040:	beq	160e4 <UnityAssertFloatSpecial@@Base+0x264>
   16044:	ldrd	r0, [r7, #144]	; 0x90
   16048:	adds	r0, r0, #1
   1604c:	adc	r1, r1, #0
   16050:	strd	r0, [r7, #144]	; 0x90
   16054:	mov	r8, #3
   16058:	mov	r6, #0
   1605c:	b	160fc <UnityAssertFloatSpecial@@Base+0x27c>
   16060:	movw	r0, #54784	; 0xd600
   16064:	movt	r0, #1
   16068:	add	r1, r0, #8
   1606c:	movw	r0, #61648	; 0xf0d0
   16070:	movt	r0, #2
   16074:	bl	17918 <UnityEnd@@Base+0x108>
   16078:	ldrd	r0, [r7, #112]	; 0x70
   1607c:	adds	r0, r0, #1
   16080:	adc	r1, r1, #0
   16084:	strd	r0, [r7, #112]	; 0x70
   16088:	mov	r6, #0
   1608c:	vcmpe.f32	s16, #0.0
   16090:	vmrs	APSR_nzcv, fpscr
   16094:	movwmi	r6, #1
   16098:	vmov.f32	s0, s16
   1609c:	bl	12688 <__isinff@plt>
   160a0:	and	r6, r0, r6
   160a4:	mov	r8, #1
   160a8:	b	160fc <UnityAssertFloatSpecial@@Base+0x27c>
   160ac:	eor	r6, r4, #1
   160b0:	movw	r0, #61648	; 0xf0d0
   160b4:	movt	r0, #2
   160b8:	movw	r1, #54784	; 0xd600
   160bc:	movt	r1, #1
   160c0:	bl	17918 <UnityEnd@@Base+0x108>
   160c4:	ldrd	r0, [r7, #160]	; 0xa0
   160c8:	adds	r0, r0, #1
   160cc:	adc	r1, r1, #0
   160d0:	strd	r0, [r7, #160]	; 0xa0
   160d4:	movw	r0, #54524	; 0xd4fc
   160d8:	movt	r0, #1
   160dc:	str	r0, [sp, #8]
   160e0:	b	160fc <UnityAssertFloatSpecial@@Base+0x27c>
   160e4:	ldrd	r0, [r7, #152]	; 0x98
   160e8:	adds	r0, r0, #1
   160ec:	adc	r1, r1, #0
   160f0:	strd	r0, [r7, #152]	; 0x98
   160f4:	mov	r8, #3
   160f8:	mov	r6, #1
   160fc:	mov	r0, #176	; 0xb0
   16100:	cmp	r6, r4
   16104:	movwne	r0, #168	; 0xa8
   16108:	mov	r1, r7
   1610c:	ldr	r0, [r1, r0]!
   16110:	adds	r0, r0, #1
   16114:	str	r0, [r1]
   16118:	ldr	r0, [r1, #4]
   1611c:	adc	r0, r0, #0
   16120:	str	r0, [r1, #4]
   16124:	cmp	r6, r4
   16128:	bne	16160 <UnityAssertFloatSpecial@@Base+0x2e0>
   1612c:	add	r0, r7, #232	; 0xe8
   16130:	ldrd	r2, [r0]
   16134:	adds	r2, r2, #1
   16138:	adc	r3, r3, #0
   1613c:	strd	r2, [r0]
   16140:	ldrd	r0, [r7, #240]	; 0xf0
   16144:	adds	r0, r0, #1
   16148:	adc	r1, r1, #0
   1614c:	strd	r0, [r7, #240]	; 0xf0
   16150:	sub	sp, fp, #40	; 0x28
   16154:	vpop	{d8}
   16158:	add	sp, sp, #4
   1615c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16160:	mov	r0, r5
   16164:	bl	14f60 <UnityAssertBits@@Base+0x108>
   16168:	movw	r0, #54284	; 0xd40c
   1616c:	movt	r0, #1
   16170:	bl	1413c <UnityPrint@@Base>
   16174:	mov	r0, #192	; 0xc0
   16178:	cmp	r4, #0
   1617c:	movwne	r0, #184	; 0xb8
   16180:	mov	r1, r7
   16184:	ldr	r0, [r1, r0]!
   16188:	adds	r0, r0, #1
   1618c:	str	r0, [r1]
   16190:	ldr	r0, [r1, #4]
   16194:	adc	r0, r0, #0
   16198:	str	r0, [r1, #4]
   1619c:	cmp	r4, #0
   161a0:	bne	161c0 <UnityAssertFloatSpecial@@Base+0x340>
   161a4:	ldrd	r0, [r7, #200]	; 0xc8
   161a8:	adds	r0, r0, #1
   161ac:	adc	r1, r1, #0
   161b0:	strd	r0, [r7, #200]	; 0xc8
   161b4:	movw	r0, #54476	; 0xd4cc
   161b8:	movt	r0, #1
   161bc:	bl	1413c <UnityPrint@@Base>
   161c0:	ldr	r5, [sl, r8, lsl #2]
   161c4:	mov	r0, r5
   161c8:	bl	1413c <UnityPrint@@Base>
   161cc:	movw	r0, #54295	; 0xd417
   161d0:	movt	r0, #1
   161d4:	bl	1413c <UnityPrint@@Base>
   161d8:	eor	r0, r4, #27
   161dc:	mov	r1, r7
   161e0:	ldr	r0, [r1, r0, lsl #3]!
   161e4:	adds	r0, r0, #1
   161e8:	str	r0, [r1]
   161ec:	ldr	r0, [r1, #4]
   161f0:	adc	r0, r0, #0
   161f4:	str	r0, [r1, #4]
   161f8:	cmp	r4, #0
   161fc:	beq	1621c <UnityAssertFloatSpecial@@Base+0x39c>
   16200:	ldrd	r0, [r7, #224]	; 0xe0
   16204:	adds	r0, r0, #1
   16208:	adc	r1, r1, #0
   1620c:	strd	r0, [r7, #224]	; 0xe0
   16210:	movw	r0, #54476	; 0xd4cc
   16214:	movt	r0, #1
   16218:	bl	1413c <UnityPrint@@Base>
   1621c:	mov	r0, r5
   16220:	bl	1413c <UnityPrint@@Base>
   16224:	ldr	r0, [sp, #4]
   16228:	bl	14fc8 <UnityAssertBits@@Base+0x170>
   1622c:	mov	r0, #1
   16230:	str	r0, [r9, #32]
   16234:	add	r0, r9, #40	; 0x28
   16238:	mov	r1, #1
   1623c:	bl	12610 <longjmp@plt>

00016240 <UnityAssertNumbersWithin@@Base>:
   16240:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16244:	add	fp, sp, #24
   16248:	mov	r9, r3
   1624c:	mov	r5, r2
   16250:	mov	r6, r1
   16254:	mov	r7, r0
   16258:	movw	r0, #64256	; 0xfb00
   1625c:	movt	r0, #2
   16260:	ldrd	r2, [r0]
   16264:	adds	r2, r2, #1
   16268:	adc	r3, r3, #0
   1626c:	strd	r2, [r0]
   16270:	movw	r4, #1864	; 0x748
   16274:	movt	r4, #3
   16278:	ldrd	r2, [r4, #32]
   1627c:	orrs	r1, r3, r2
   16280:	mov	r2, #16
   16284:	movwne	r2, #8
   16288:	mov	r3, r0
   1628c:	ldr	r2, [r3, r2]!
   16290:	adds	r2, r2, #1
   16294:	str	r2, [r3]
   16298:	ldr	r2, [r3, #4]
   1629c:	adc	r2, r2, #0
   162a0:	str	r2, [r3, #4]
   162a4:	cmp	r1, #0
   162a8:	bne	163d4 <UnityAssertNumbersWithin@@Base+0x194>
   162ac:	ldr	r8, [fp, #12]
   162b0:	ands	r1, r8, #16
   162b4:	mov	r2, #32
   162b8:	movwne	r2, #24
   162bc:	mov	r3, r0
   162c0:	ldr	r2, [r3, r2]!
   162c4:	adds	r2, r2, #1
   162c8:	str	r2, [r3]
   162cc:	ldr	r2, [r3, #4]
   162d0:	adc	r2, r2, #0
   162d4:	str	r2, [r3, #4]
   162d8:	cmp	r1, #0
   162dc:	beq	16328 <UnityAssertNumbersWithin@@Base+0xe8>
   162e0:	mov	r1, #48	; 0x30
   162e4:	cmp	r5, r6
   162e8:	movwgt	r1, #40	; 0x28
   162ec:	mov	r2, r0
   162f0:	ldr	r1, [r2, r1]!
   162f4:	adds	r1, r1, #1
   162f8:	str	r1, [r2]
   162fc:	ldr	r1, [r2, #4]
   16300:	adc	r1, r1, #0
   16304:	str	r1, [r2, #4]
   16308:	cmp	r5, r6
   1630c:	ble	16370 <UnityAssertNumbersWithin@@Base+0x130>
   16310:	ldrd	r2, [r0, #56]	; 0x38
   16314:	adds	r2, r2, #1
   16318:	adc	r3, r3, #0
   1631c:	strd	r2, [r0, #56]	; 0x38
   16320:	sub	r1, r5, r6
   16324:	b	16398 <UnityAssertNumbersWithin@@Base+0x158>
   16328:	mov	r1, #80	; 0x50
   1632c:	cmp	r5, r6
   16330:	movwhi	r1, #72	; 0x48
   16334:	mov	r2, r0
   16338:	ldr	r1, [r2, r1]!
   1633c:	adds	r1, r1, #1
   16340:	str	r1, [r2]
   16344:	ldr	r1, [r2, #4]
   16348:	adc	r1, r1, #0
   1634c:	str	r1, [r2, #4]
   16350:	cmp	r5, r6
   16354:	bls	16384 <UnityAssertNumbersWithin@@Base+0x144>
   16358:	ldrd	r2, [r0, #88]	; 0x58
   1635c:	adds	r2, r2, #1
   16360:	adc	r3, r3, #0
   16364:	strd	r2, [r0, #88]	; 0x58
   16368:	sub	r1, r5, r6
   1636c:	b	16398 <UnityAssertNumbersWithin@@Base+0x158>
   16370:	ldrd	r2, [r0, #64]	; 0x40
   16374:	adds	r2, r2, #1
   16378:	adc	r3, r3, #0
   1637c:	strd	r2, [r0, #64]	; 0x40
   16380:	b	16394 <UnityAssertNumbersWithin@@Base+0x154>
   16384:	ldrd	r2, [r0, #96]	; 0x60
   16388:	adds	r2, r2, #1
   1638c:	adc	r3, r3, #0
   16390:	strd	r2, [r0, #96]	; 0x60
   16394:	sub	r1, r6, r5
   16398:	mov	r2, #0
   1639c:	cmp	r1, r7
   163a0:	movwhi	r2, #1
   163a4:	str	r2, [r4, #32]
   163a8:	mov	r2, #112	; 0x70
   163ac:	movwhi	r2, #104	; 0x68
   163b0:	mov	r3, r0
   163b4:	ldr	r2, [r3, r2]!
   163b8:	adds	r2, r2, #1
   163bc:	str	r2, [r3]
   163c0:	ldr	r2, [r3, #4]
   163c4:	adc	r2, r2, #0
   163c8:	str	r2, [r3, #4]
   163cc:	cmp	r1, r7
   163d0:	bhi	163e8 <UnityAssertNumbersWithin@@Base+0x1a8>
   163d4:	ldrd	r2, [r0, #120]	; 0x78
   163d8:	adds	r2, r2, #1
   163dc:	adc	r3, r3, #0
   163e0:	strd	r2, [r0, #120]	; 0x78
   163e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   163e8:	ldr	r0, [fp, #8]
   163ec:	bl	14f60 <UnityAssertBits@@Base+0x108>
   163f0:	movw	r0, #54341	; 0xd445
   163f4:	movt	r0, #1
   163f8:	bl	1413c <UnityPrint@@Base>
   163fc:	mov	r0, r7
   16400:	mov	r1, r8
   16404:	bl	146f8 <UnityPrintNumberByStyle@@Base>
   16408:	movw	r0, #54284	; 0xd40c
   1640c:	movt	r0, #1
   16410:	bl	1413c <UnityPrint@@Base>
   16414:	mov	r0, r6
   16418:	mov	r1, r8
   1641c:	bl	146f8 <UnityPrintNumberByStyle@@Base>
   16420:	movw	r0, #54295	; 0xd417
   16424:	movt	r0, #1
   16428:	bl	1413c <UnityPrint@@Base>
   1642c:	mov	r0, r5
   16430:	mov	r1, r8
   16434:	bl	146f8 <UnityPrintNumberByStyle@@Base>
   16438:	mov	r0, r9
   1643c:	bl	14fc8 <UnityAssertBits@@Base+0x170>
   16440:	mov	r0, #1
   16444:	str	r0, [r4, #32]
   16448:	add	r0, r4, #40	; 0x28
   1644c:	mov	r1, #1
   16450:	bl	12610 <longjmp@plt>

00016454 <UnityAssertEqualString@@Base>:
   16454:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16458:	add	fp, sp, #28
   1645c:	sub	sp, sp, #4
   16460:	mov	sl, r1
   16464:	mov	r8, r0
   16468:	movw	lr, #64384	; 0xfb80
   1646c:	movt	lr, #2
   16470:	ldrd	r0, [lr]
   16474:	adds	r0, r0, #1
   16478:	adc	r1, r1, #0
   1647c:	strd	r0, [lr]
   16480:	movw	r9, #1864	; 0x748
   16484:	movt	r9, #3
   16488:	ldrd	r0, [r9, #32]
   1648c:	orrs	r1, r1, r0
   16490:	mov	r0, #16
   16494:	movwne	r0, #8
   16498:	mov	r5, lr
   1649c:	ldr	r0, [r5, r0]!
   164a0:	adds	r0, r0, #1
   164a4:	str	r0, [r5]
   164a8:	ldr	r0, [r5, #4]
   164ac:	adc	r0, r0, #0
   164b0:	str	r0, [r5, #4]
   164b4:	cmp	r1, #0
   164b8:	beq	164d0 <UnityAssertEqualString@@Base+0x7c>
   164bc:	ldrd	r2, [lr, #24]
   164c0:	adds	r2, r2, #1
   164c4:	adc	r3, r3, #0
   164c8:	strd	r2, [lr, #24]
   164cc:	b	166c8 <UnityAssertEqualString@@Base+0x274>
   164d0:	str	r2, [sp]
   164d4:	cmp	sl, #0
   164d8:	mov	r1, sl
   164dc:	movwne	r1, #1
   164e0:	cmp	r8, #0
   164e4:	mov	r2, r8
   164e8:	movwne	r2, #1
   164ec:	ands	r1, r2, r1
   164f0:	mov	r2, #40	; 0x28
   164f4:	movwne	r2, #32
   164f8:	mov	r5, lr
   164fc:	ldr	r2, [r5, r2]!
   16500:	adds	r2, r2, #1
   16504:	str	r2, [r5]
   16508:	ldr	r2, [r5, #4]
   1650c:	adc	r2, r2, #0
   16510:	str	r2, [r5, #4]
   16514:	cmp	r1, #1
   16518:	bne	16654 <UnityAssertEqualString@@Base+0x200>
   1651c:	ldr	r2, [lr, #48]	; 0x30
   16520:	ldr	r1, [lr, #52]	; 0x34
   16524:	adds	r2, r2, #1
   16528:	adc	r1, r1, #0
   1652c:	str	r2, [lr, #48]	; 0x30
   16530:	str	r1, [lr, #52]	; 0x34
   16534:	add	ip, lr, #104	; 0x68
   16538:	mov	r2, r8
   1653c:	mov	r5, sl
   16540:	b	1655c <UnityAssertEqualString@@Base+0x108>
   16544:	ldrd	r0, [lr, #112]	; 0x70
   16548:	adds	r0, r0, #1
   1654c:	adc	r1, r1, #0
   16550:	strd	r0, [lr, #112]	; 0x70
   16554:	add	r2, r2, #1
   16558:	add	r5, r5, #1
   1655c:	ldrb	r1, [r2]
   16560:	cmp	r1, #0
   16564:	mov	r7, #64	; 0x40
   16568:	movwne	r7, #56	; 0x38
   1656c:	mov	r0, lr
   16570:	ldr	r7, [r0, r7]!
   16574:	adds	r7, r7, #1
   16578:	str	r7, [r0]
   1657c:	ldr	r7, [r0, #4]
   16580:	adc	r7, r7, #0
   16584:	str	r7, [r0, #4]
   16588:	cmp	r1, #0
   1658c:	bne	165c4 <UnityAssertEqualString@@Base+0x170>
   16590:	ldrb	r0, [r5]
   16594:	cmp	r0, #0
   16598:	mov	r1, #80	; 0x50
   1659c:	movwne	r1, #72	; 0x48
   165a0:	mov	r4, lr
   165a4:	ldr	r1, [r4, r1]!
   165a8:	adds	r1, r1, #1
   165ac:	str	r1, [r4]
   165b0:	ldr	r1, [r4, #4]
   165b4:	adc	r1, r1, #0
   165b8:	str	r1, [r4, #4]
   165bc:	cmp	r0, #0
   165c0:	beq	16684 <UnityAssertEqualString@@Base+0x230>
   165c4:	ldrb	r0, [r5]
   165c8:	ldrb	r1, [r2]
   165cc:	cmp	r1, r0
   165d0:	mov	r7, #96	; 0x60
   165d4:	movwne	r7, #88	; 0x58
   165d8:	mov	r6, lr
   165dc:	ldr	r4, [r6, r7]!
   165e0:	adds	r4, r4, #1
   165e4:	str	r4, [r6]
   165e8:	ldr	r4, [r6, #4]
   165ec:	adc	r4, r4, #0
   165f0:	str	r4, [r6, #4]
   165f4:	cmp	r1, r0
   165f8:	beq	16544 <UnityAssertEqualString@@Base+0xf0>
   165fc:	ldrd	r0, [ip]
   16600:	adds	r0, r0, #1
   16604:	adc	r1, r1, #0
   16608:	strd	r0, [ip]
   1660c:	mov	r0, #1
   16610:	str	r0, [r9, #32]
   16614:	ldrd	r0, [lr, #144]	; 0x90
   16618:	adds	r0, r0, #1
   1661c:	adc	r1, r1, #0
   16620:	strd	r0, [lr, #144]	; 0x90
   16624:	mov	r0, r3
   16628:	bl	14f60 <UnityAssertBits@@Base+0x108>
   1662c:	mov	r0, r8
   16630:	mov	r1, sl
   16634:	bl	166e8 <UnityAssertEqualString@@Base+0x294>
   16638:	ldr	r0, [sp]
   1663c:	bl	14fc8 <UnityAssertBits@@Base+0x170>
   16640:	mov	r0, #1
   16644:	str	r0, [r9, #32]
   16648:	add	r0, r9, #40	; 0x28
   1664c:	mov	r1, #1
   16650:	bl	12610 <longjmp@plt>
   16654:	mov	r0, #128	; 0x80
   16658:	cmp	r8, sl
   1665c:	movwne	r0, #120	; 0x78
   16660:	mov	r1, lr
   16664:	ldr	r0, [r1, r0]!
   16668:	adds	r0, r0, #1
   1666c:	str	r0, [r1]
   16670:	ldr	r0, [r1, #4]
   16674:	adc	r0, r0, #0
   16678:	str	r0, [r1, #4]
   1667c:	cmp	r8, sl
   16680:	bne	166e0 <UnityAssertEqualString@@Base+0x28c>
   16684:	ldr	r0, [r9, #32]
   16688:	mov	r1, #152	; 0x98
   1668c:	cmp	r0, #0
   16690:	movwne	r1, #144	; 0x90
   16694:	mov	r2, lr
   16698:	ldr	r1, [r2, r1]!
   1669c:	adds	r1, r1, #1
   166a0:	str	r1, [r2]
   166a4:	ldr	r1, [r2, #4]
   166a8:	adc	r1, r1, #0
   166ac:	str	r1, [r2, #4]
   166b0:	cmp	r0, #0
   166b4:	bne	16624 <UnityAssertEqualString@@Base+0x1d0>
   166b8:	ldrd	r0, [lr, #160]	; 0xa0
   166bc:	adds	r0, r0, #1
   166c0:	adc	r1, r1, #0
   166c4:	strd	r0, [lr, #160]	; 0xa0
   166c8:	ldrd	r0, [lr, #168]	; 0xa8
   166cc:	adds	r0, r0, #1
   166d0:	adc	r1, r1, #0
   166d4:	strd	r0, [lr, #168]	; 0xa8
   166d8:	sub	sp, fp, #28
   166dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166e0:	add	ip, lr, #136	; 0x88
   166e4:	b	165fc <UnityAssertEqualString@@Base+0x1a8>
   166e8:	push	{r4, r5, r6, sl, fp, lr}
   166ec:	add	fp, sp, #16
   166f0:	mov	r4, r1
   166f4:	mov	r5, r0
   166f8:	movw	r6, #64560	; 0xfc30
   166fc:	movt	r6, #2
   16700:	ldrd	r0, [r6]
   16704:	adds	r0, r0, #1
   16708:	adc	r1, r1, #0
   1670c:	strd	r0, [r6]
   16710:	movw	r0, #54284	; 0xd40c
   16714:	movt	r0, #1
   16718:	bl	1413c <UnityPrint@@Base>
   1671c:	mov	r0, #16
   16720:	cmp	r5, #0
   16724:	movwne	r0, #8
   16728:	mov	r1, r6
   1672c:	ldr	r0, [r1, r0]!
   16730:	adds	r0, r0, #1
   16734:	str	r0, [r1]
   16738:	ldr	r0, [r1, #4]
   1673c:	adc	r0, r0, #0
   16740:	str	r0, [r1, #4]
   16744:	cmp	r5, #0
   16748:	beq	16778 <UnityAssertEqualString@@Base+0x324>
   1674c:	ldrd	r0, [r6, #24]
   16750:	adds	r0, r0, #1
   16754:	adc	r1, r1, #0
   16758:	strd	r0, [r6, #24]
   1675c:	mov	r0, #39	; 0x27
   16760:	bl	12760 <putchar@plt>
   16764:	mov	r0, r5
   16768:	bl	1413c <UnityPrint@@Base>
   1676c:	mov	r0, #39	; 0x27
   16770:	bl	12760 <putchar@plt>
   16774:	b	16794 <UnityAssertEqualString@@Base+0x340>
   16778:	ldrd	r0, [r6, #32]
   1677c:	adds	r0, r0, #1
   16780:	adc	r1, r1, #0
   16784:	strd	r0, [r6, #32]
   16788:	movw	r0, #54276	; 0xd404
   1678c:	movt	r0, #1
   16790:	bl	1413c <UnityPrint@@Base>
   16794:	movw	r0, #54295	; 0xd417
   16798:	movt	r0, #1
   1679c:	bl	1413c <UnityPrint@@Base>
   167a0:	mov	r0, #48	; 0x30
   167a4:	cmp	r4, #0
   167a8:	movwne	r0, #40	; 0x28
   167ac:	mov	r1, r6
   167b0:	ldr	r0, [r1, r0]!
   167b4:	adds	r0, r0, #1
   167b8:	str	r0, [r1]
   167bc:	ldr	r0, [r1, #4]
   167c0:	adc	r0, r0, #0
   167c4:	str	r0, [r1, #4]
   167c8:	cmp	r4, #0
   167cc:	beq	167fc <UnityAssertEqualString@@Base+0x3a8>
   167d0:	ldrd	r0, [r6, #56]	; 0x38
   167d4:	adds	r0, r0, #1
   167d8:	adc	r1, r1, #0
   167dc:	strd	r0, [r6, #56]	; 0x38
   167e0:	mov	r0, #39	; 0x27
   167e4:	bl	12760 <putchar@plt>
   167e8:	mov	r0, r4
   167ec:	bl	1413c <UnityPrint@@Base>
   167f0:	mov	r0, #39	; 0x27
   167f4:	bl	12760 <putchar@plt>
   167f8:	b	16818 <UnityAssertEqualString@@Base+0x3c4>
   167fc:	ldrd	r0, [r6, #64]	; 0x40
   16800:	adds	r0, r0, #1
   16804:	adc	r1, r1, #0
   16808:	strd	r0, [r6, #64]	; 0x40
   1680c:	movw	r0, #54276	; 0xd404
   16810:	movt	r0, #1
   16814:	bl	1413c <UnityPrint@@Base>
   16818:	ldrd	r0, [r6, #72]	; 0x48
   1681c:	adds	r0, r0, #1
   16820:	adc	r1, r1, #0
   16824:	strd	r0, [r6, #72]	; 0x48
   16828:	pop	{r4, r5, r6, sl, fp, pc}

0001682c <UnityAssertEqualStringLen@@Base>:
   1682c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16830:	add	fp, sp, #28
   16834:	sub	sp, sp, #4
   16838:	mov	r8, r3
   1683c:	mov	r5, r2
   16840:	mov	sl, r1
   16844:	movw	r6, #64640	; 0xfc80
   16848:	movt	r6, #2
   1684c:	ldrd	r2, [r6]
   16850:	adds	r2, r2, #1
   16854:	adc	r3, r3, #0
   16858:	strd	r2, [r6]
   1685c:	movw	r9, #1864	; 0x748
   16860:	movt	r9, #3
   16864:	ldrd	r2, [r9, #32]
   16868:	orrs	r1, r3, r2
   1686c:	mov	r2, #16
   16870:	movwne	r2, #8
   16874:	mov	r3, r6
   16878:	ldr	r2, [r3, r2]!
   1687c:	adds	r2, r2, #1
   16880:	str	r2, [r3]
   16884:	ldr	r2, [r3, #4]
   16888:	adc	r2, r2, #0
   1688c:	str	r2, [r3, #4]
   16890:	cmp	r1, #0
   16894:	beq	168ac <UnityAssertEqualStringLen@@Base+0x80>
   16898:	ldrd	r2, [r6, #24]
   1689c:	adds	r2, r2, #1
   168a0:	adc	r3, r3, #0
   168a4:	strd	r2, [r6, #24]
   168a8:	b	16ac8 <UnityAssertEqualStringLen@@Base+0x29c>
   168ac:	mov	r7, r0
   168b0:	cmp	sl, #0
   168b4:	mov	r1, sl
   168b8:	movwne	r1, #1
   168bc:	cmp	r0, #0
   168c0:	mov	r2, r0
   168c4:	movwne	r2, #1
   168c8:	ands	r1, r2, r1
   168cc:	mov	r2, #40	; 0x28
   168d0:	movwne	r2, #32
   168d4:	mov	r3, r6
   168d8:	ldr	r2, [r3, r2]!
   168dc:	adds	r2, r2, #1
   168e0:	str	r2, [r3]
   168e4:	ldr	r2, [r3, #4]
   168e8:	adc	r2, r2, #0
   168ec:	str	r2, [r3, #4]
   168f0:	cmp	r1, #1
   168f4:	bne	16a54 <UnityAssertEqualStringLen@@Base+0x228>
   168f8:	ldrd	r2, [r6, #48]	; 0x30
   168fc:	adds	r2, r2, #1
   16900:	adc	r3, r3, #0
   16904:	strd	r2, [r6, #48]	; 0x30
   16908:	mov	r2, #0
   1690c:	add	ip, r6, #120	; 0x78
   16910:	b	16928 <UnityAssertEqualStringLen@@Base+0xfc>
   16914:	ldrd	r0, [r6, #128]	; 0x80
   16918:	adds	r0, r0, #1
   1691c:	adc	r1, r1, #0
   16920:	strd	r0, [r6, #128]	; 0x80
   16924:	add	r2, r2, #1
   16928:	ldrb	r3, [r7, r2]
   1692c:	cmp	r3, #0
   16930:	mov	r1, #64	; 0x40
   16934:	movwne	r1, #56	; 0x38
   16938:	mov	r0, r6
   1693c:	ldr	r1, [r0, r1]!
   16940:	adds	r1, r1, #1
   16944:	str	r1, [r0]
   16948:	ldr	r1, [r0, #4]
   1694c:	adc	r1, r1, #0
   16950:	str	r1, [r0, #4]
   16954:	cmp	r3, #0
   16958:	bne	16990 <UnityAssertEqualStringLen@@Base+0x164>
   1695c:	ldrb	r0, [sl, r2]
   16960:	cmp	r0, #0
   16964:	mov	r1, #80	; 0x50
   16968:	movwne	r1, #72	; 0x48
   1696c:	mov	r3, r6
   16970:	ldr	r1, [r3, r1]!
   16974:	adds	r1, r1, #1
   16978:	str	r1, [r3]
   1697c:	ldr	r1, [r3, #4]
   16980:	adc	r1, r1, #0
   16984:	str	r1, [r3, #4]
   16988:	cmp	r0, #0
   1698c:	beq	16a84 <UnityAssertEqualStringLen@@Base+0x258>
   16990:	cmp	r2, r5
   16994:	mov	r0, #96	; 0x60
   16998:	movwcc	r0, #88	; 0x58
   1699c:	mov	r1, r6
   169a0:	ldr	r0, [r1, r0]!
   169a4:	adds	r0, r0, #1
   169a8:	str	r0, [r1]
   169ac:	ldr	r0, [r1, #4]
   169b0:	adc	r0, r0, #0
   169b4:	str	r0, [r1, #4]
   169b8:	cmp	r2, r5
   169bc:	bcs	16a84 <UnityAssertEqualStringLen@@Base+0x258>
   169c0:	ldrb	r0, [sl, r2]
   169c4:	ldrb	r1, [r7, r2]
   169c8:	cmp	r1, r0
   169cc:	mov	r3, #112	; 0x70
   169d0:	movwne	r3, #104	; 0x68
   169d4:	mov	r4, r6
   169d8:	ldr	r3, [r4, r3]!
   169dc:	adds	r3, r3, #1
   169e0:	str	r3, [r4]
   169e4:	ldr	r3, [r4, #4]
   169e8:	adc	r3, r3, #0
   169ec:	str	r3, [r4, #4]
   169f0:	cmp	r1, r0
   169f4:	beq	16914 <UnityAssertEqualStringLen@@Base+0xe8>
   169f8:	ldrd	r0, [ip]
   169fc:	adds	r0, r0, #1
   16a00:	adc	r1, r1, #0
   16a04:	strd	r0, [ip]
   16a08:	mov	r0, #1
   16a0c:	str	r0, [r9, #32]
   16a10:	ldrd	r0, [r6, #160]	; 0xa0
   16a14:	adds	r0, r0, #1
   16a18:	adc	r1, r1, #0
   16a1c:	strd	r0, [r6, #160]	; 0xa0
   16a20:	ldr	r0, [fp, #8]
   16a24:	bl	14f60 <UnityAssertBits@@Base+0x108>
   16a28:	mov	r0, r7
   16a2c:	mov	r1, sl
   16a30:	mov	r2, r5
   16a34:	bl	16ae8 <UnityAssertEqualStringLen@@Base+0x2bc>
   16a38:	mov	r0, r8
   16a3c:	bl	14fc8 <UnityAssertBits@@Base+0x170>
   16a40:	mov	r0, #1
   16a44:	str	r0, [r9, #32]
   16a48:	add	r0, r9, #40	; 0x28
   16a4c:	mov	r1, #1
   16a50:	bl	12610 <longjmp@plt>
   16a54:	mov	r0, #144	; 0x90
   16a58:	cmp	r7, sl
   16a5c:	movwne	r0, #136	; 0x88
   16a60:	mov	r1, r6
   16a64:	ldr	r0, [r1, r0]!
   16a68:	adds	r0, r0, #1
   16a6c:	str	r0, [r1]
   16a70:	ldr	r0, [r1, #4]
   16a74:	adc	r0, r0, #0
   16a78:	str	r0, [r1, #4]
   16a7c:	cmp	r7, sl
   16a80:	bne	16ae0 <UnityAssertEqualStringLen@@Base+0x2b4>
   16a84:	ldr	r0, [r9, #32]
   16a88:	mov	r1, #168	; 0xa8
   16a8c:	cmp	r0, #0
   16a90:	movwne	r1, #160	; 0xa0
   16a94:	mov	r2, r6
   16a98:	ldr	r1, [r2, r1]!
   16a9c:	adds	r1, r1, #1
   16aa0:	str	r1, [r2]
   16aa4:	ldr	r1, [r2, #4]
   16aa8:	adc	r1, r1, #0
   16aac:	str	r1, [r2, #4]
   16ab0:	cmp	r0, #0
   16ab4:	bne	16a20 <UnityAssertEqualStringLen@@Base+0x1f4>
   16ab8:	ldrd	r0, [r6, #176]	; 0xb0
   16abc:	adds	r0, r0, #1
   16ac0:	adc	r1, r1, #0
   16ac4:	strd	r0, [r6, #176]	; 0xb0
   16ac8:	ldrd	r0, [r6, #184]	; 0xb8
   16acc:	adds	r0, r0, #1
   16ad0:	adc	r1, r1, #0
   16ad4:	strd	r0, [r6, #184]	; 0xb8
   16ad8:	sub	sp, fp, #28
   16adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ae0:	add	ip, r6, #152	; 0x98
   16ae4:	b	169f8 <UnityAssertEqualStringLen@@Base+0x1cc>
   16ae8:	push	{r4, r5, r6, r7, fp, lr}
   16aec:	add	fp, sp, #16
   16af0:	mov	r4, r2
   16af4:	mov	r5, r1
   16af8:	mov	r6, r0
   16afc:	movw	r7, #64832	; 0xfd40
   16b00:	movt	r7, #2
   16b04:	ldrd	r0, [r7]
   16b08:	adds	r0, r0, #1
   16b0c:	adc	r1, r1, #0
   16b10:	strd	r0, [r7]
   16b14:	movw	r0, #54284	; 0xd40c
   16b18:	movt	r0, #1
   16b1c:	bl	1413c <UnityPrint@@Base>
   16b20:	mov	r0, #16
   16b24:	cmp	r6, #0
   16b28:	movwne	r0, #8
   16b2c:	mov	r1, r7
   16b30:	ldr	r0, [r1, r0]!
   16b34:	adds	r0, r0, #1
   16b38:	str	r0, [r1]
   16b3c:	ldr	r0, [r1, #4]
   16b40:	adc	r0, r0, #0
   16b44:	str	r0, [r1, #4]
   16b48:	cmp	r6, #0
   16b4c:	beq	16b80 <UnityAssertEqualStringLen@@Base+0x354>
   16b50:	ldrd	r0, [r7, #24]
   16b54:	adds	r0, r0, #1
   16b58:	adc	r1, r1, #0
   16b5c:	strd	r0, [r7, #24]
   16b60:	mov	r0, #39	; 0x27
   16b64:	bl	12760 <putchar@plt>
   16b68:	mov	r0, r6
   16b6c:	mov	r1, r4
   16b70:	bl	14498 <UnityPrintLen@@Base>
   16b74:	mov	r0, #39	; 0x27
   16b78:	bl	12760 <putchar@plt>
   16b7c:	b	16b9c <UnityAssertEqualStringLen@@Base+0x370>
   16b80:	ldrd	r0, [r7, #32]
   16b84:	adds	r0, r0, #1
   16b88:	adc	r1, r1, #0
   16b8c:	strd	r0, [r7, #32]
   16b90:	movw	r0, #54276	; 0xd404
   16b94:	movt	r0, #1
   16b98:	bl	1413c <UnityPrint@@Base>
   16b9c:	movw	r0, #54295	; 0xd417
   16ba0:	movt	r0, #1
   16ba4:	bl	1413c <UnityPrint@@Base>
   16ba8:	mov	r0, #48	; 0x30
   16bac:	cmp	r5, #0
   16bb0:	movwne	r0, #40	; 0x28
   16bb4:	mov	r1, r7
   16bb8:	ldr	r0, [r1, r0]!
   16bbc:	adds	r0, r0, #1
   16bc0:	str	r0, [r1]
   16bc4:	ldr	r0, [r1, #4]
   16bc8:	adc	r0, r0, #0
   16bcc:	str	r0, [r1, #4]
   16bd0:	cmp	r5, #0
   16bd4:	beq	16c08 <UnityAssertEqualStringLen@@Base+0x3dc>
   16bd8:	ldrd	r0, [r7, #56]	; 0x38
   16bdc:	adds	r0, r0, #1
   16be0:	adc	r1, r1, #0
   16be4:	strd	r0, [r7, #56]	; 0x38
   16be8:	mov	r0, #39	; 0x27
   16bec:	bl	12760 <putchar@plt>
   16bf0:	mov	r0, r5
   16bf4:	mov	r1, r4
   16bf8:	bl	14498 <UnityPrintLen@@Base>
   16bfc:	mov	r0, #39	; 0x27
   16c00:	bl	12760 <putchar@plt>
   16c04:	b	16c24 <UnityAssertEqualStringLen@@Base+0x3f8>
   16c08:	ldrd	r0, [r7, #64]	; 0x40
   16c0c:	adds	r0, r0, #1
   16c10:	adc	r1, r1, #0
   16c14:	strd	r0, [r7, #64]	; 0x40
   16c18:	movw	r0, #54276	; 0xd404
   16c1c:	movt	r0, #1
   16c20:	bl	1413c <UnityPrint@@Base>
   16c24:	ldrd	r0, [r7, #72]	; 0x48
   16c28:	adds	r0, r0, #1
   16c2c:	adc	r1, r1, #0
   16c30:	strd	r0, [r7, #72]	; 0x48
   16c34:	pop	{r4, r5, r6, r7, fp, pc}

00016c38 <UnityAssertEqualStringArray@@Base>:
   16c38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c3c:	add	fp, sp, #28
   16c40:	sub	sp, sp, #4
   16c44:	mov	r9, r2
   16c48:	mov	r6, r1
   16c4c:	mov	r5, r0
   16c50:	movw	r8, #64912	; 0xfd90
   16c54:	movt	r8, #2
   16c58:	ldrd	r0, [r8]
   16c5c:	adds	r0, r0, #1
   16c60:	adc	r1, r1, #0
   16c64:	strd	r0, [r8]
   16c68:	movw	sl, #1864	; 0x748
   16c6c:	movt	sl, #3
   16c70:	ldrd	r0, [sl, #32]
   16c74:	orrs	r0, r1, r0
   16c78:	mov	r1, #16
   16c7c:	movwne	r1, #8
   16c80:	mov	r2, r8
   16c84:	ldr	r1, [r2, r1]!
   16c88:	adds	r1, r1, #1
   16c8c:	str	r1, [r2]
   16c90:	ldr	r1, [r2, #4]
   16c94:	adc	r1, r1, #0
   16c98:	str	r1, [r2, #4]
   16c9c:	cmp	r0, #0
   16ca0:	beq	16cb8 <UnityAssertEqualStringArray@@Base+0x80>
   16ca4:	ldrd	r0, [r8, #24]
   16ca8:	adds	r0, r0, #1
   16cac:	adc	r1, r1, #0
   16cb0:	strd	r0, [r8, #24]
   16cb4:	b	16f4c <UnityAssertEqualStringArray@@Base+0x314>
   16cb8:	mov	r4, r3
   16cbc:	ldr	r2, [fp, #8]
   16cc0:	mov	r0, #40	; 0x28
   16cc4:	cmp	r9, #0
   16cc8:	movweq	r0, #32
   16ccc:	mov	r1, r8
   16cd0:	ldr	r0, [r1, r0]!
   16cd4:	adds	r0, r0, #1
   16cd8:	str	r0, [r1]
   16cdc:	ldr	r0, [r1, #4]
   16ce0:	adc	r0, r0, #0
   16ce4:	str	r0, [r1, #4]
   16ce8:	cmp	r9, #0
   16cec:	beq	17024 <UnityAssertEqualStringArray@@Base+0x3ec>
   16cf0:	mov	r0, r5
   16cf4:	mov	r1, r6
   16cf8:	mov	r3, r4
   16cfc:	bl	157f8 <UnityAssertEqualIntArray@@Base+0x5d0>
   16d00:	mov	r1, #56	; 0x38
   16d04:	cmp	r0, #1
   16d08:	movweq	r1, #48	; 0x30
   16d0c:	mov	r2, r8
   16d10:	ldr	r1, [r2, r1]!
   16d14:	adds	r1, r1, #1
   16d18:	str	r1, [r2]
   16d1c:	ldr	r1, [r2, #4]
   16d20:	adc	r1, r1, #0
   16d24:	str	r1, [r2, #4]
   16d28:	cmp	r0, #1
   16d2c:	bne	16d44 <UnityAssertEqualStringArray@@Base+0x10c>
   16d30:	ldrd	r0, [r8, #64]	; 0x40
   16d34:	adds	r0, r0, #1
   16d38:	adc	r1, r1, #0
   16d3c:	strd	r0, [r8, #64]	; 0x40
   16d40:	b	16f4c <UnityAssertEqualStringArray@@Base+0x314>
   16d44:	str	r4, [sp]
   16d48:	mov	r4, #0
   16d4c:	ldr	r0, [r5, r4, lsl #2]
   16d50:	cmp	r0, #0
   16d54:	mov	r1, #80	; 0x50
   16d58:	movwne	r1, #72	; 0x48
   16d5c:	mov	r2, r8
   16d60:	ldr	r1, [r2, r1]!
   16d64:	adds	r1, r1, #1
   16d68:	str	r1, [r2]
   16d6c:	ldr	r1, [r2, #4]
   16d70:	adc	r1, r1, #0
   16d74:	str	r1, [r2, #4]
   16d78:	cmp	r0, #0
   16d7c:	beq	16e94 <UnityAssertEqualStringArray@@Base+0x25c>
   16d80:	ldr	r0, [r6, r4, lsl #2]
   16d84:	cmp	r0, #0
   16d88:	mov	r1, #96	; 0x60
   16d8c:	movwne	r1, #88	; 0x58
   16d90:	mov	r2, r8
   16d94:	ldr	r1, [r2, r1]!
   16d98:	adds	r1, r1, #1
   16d9c:	str	r1, [r2]
   16da0:	ldr	r1, [r2, #4]
   16da4:	adc	r1, r1, #0
   16da8:	str	r1, [r2, #4]
   16dac:	cmp	r0, #0
   16db0:	beq	16e94 <UnityAssertEqualStringArray@@Base+0x25c>
   16db4:	ldrd	r0, [r8, #104]	; 0x68
   16db8:	adds	r0, r0, #1
   16dbc:	adc	r1, r1, #0
   16dc0:	strd	r0, [r8, #104]	; 0x68
   16dc4:	mov	r0, #0
   16dc8:	b	16de0 <UnityAssertEqualStringArray@@Base+0x1a8>
   16dcc:	ldrd	r2, [r8, #168]	; 0xa8
   16dd0:	adds	r2, r2, #1
   16dd4:	adc	r3, r3, #0
   16dd8:	strd	r2, [r8, #168]	; 0xa8
   16ddc:	add	r0, r0, #1
   16de0:	ldr	r1, [r5, r4, lsl #2]
   16de4:	ldrb	r1, [r1, r0]
   16de8:	cmp	r1, #0
   16dec:	mov	r2, #120	; 0x78
   16df0:	movwne	r2, #112	; 0x70
   16df4:	mov	r3, r8
   16df8:	ldr	r2, [r3, r2]!
   16dfc:	adds	r2, r2, #1
   16e00:	str	r2, [r3]
   16e04:	ldr	r2, [r3, #4]
   16e08:	adc	r2, r2, #0
   16e0c:	str	r2, [r3, #4]
   16e10:	cmp	r1, #0
   16e14:	bne	16e50 <UnityAssertEqualStringArray@@Base+0x218>
   16e18:	ldr	r1, [r6, r4, lsl #2]
   16e1c:	ldrb	r1, [r1, r0]
   16e20:	cmp	r1, #0
   16e24:	mov	r2, #136	; 0x88
   16e28:	movwne	r2, #128	; 0x80
   16e2c:	mov	r3, r8
   16e30:	ldr	r2, [r3, r2]!
   16e34:	adds	r2, r2, #1
   16e38:	str	r2, [r3]
   16e3c:	ldr	r2, [r3, #4]
   16e40:	adc	r2, r2, #0
   16e44:	str	r2, [r3, #4]
   16e48:	cmp	r1, #0
   16e4c:	beq	16ecc <UnityAssertEqualStringArray@@Base+0x294>
   16e50:	ldr	r1, [r6, r4, lsl #2]
   16e54:	ldrb	r1, [r1, r0]
   16e58:	ldr	r2, [r5, r4, lsl #2]
   16e5c:	ldrb	r2, [r2, r0]
   16e60:	cmp	r2, r1
   16e64:	mov	r3, #152	; 0x98
   16e68:	movwne	r3, #144	; 0x90
   16e6c:	mov	r7, r8
   16e70:	ldr	r3, [r7, r3]!
   16e74:	adds	r3, r3, #1
   16e78:	str	r3, [r7]
   16e7c:	ldr	r3, [r7, #4]
   16e80:	adc	r3, r3, #0
   16e84:	str	r3, [r7, #4]
   16e88:	cmp	r2, r1
   16e8c:	beq	16dcc <UnityAssertEqualStringArray@@Base+0x194>
   16e90:	b	16f6c <UnityAssertEqualStringArray@@Base+0x334>
   16e94:	ldr	r0, [r6, r4, lsl #2]
   16e98:	ldr	r1, [r5, r4, lsl #2]
   16e9c:	cmp	r1, r0
   16ea0:	mov	r2, #184	; 0xb8
   16ea4:	movwne	r2, #176	; 0xb0
   16ea8:	mov	r3, r8
   16eac:	ldr	r2, [r3, r2]!
   16eb0:	adds	r2, r2, #1
   16eb4:	str	r2, [r3]
   16eb8:	ldr	r2, [r3, #4]
   16ebc:	adc	r2, r2, #0
   16ec0:	str	r2, [r3, #4]
   16ec4:	cmp	r1, r0
   16ec8:	bne	1701c <UnityAssertEqualStringArray@@Base+0x3e4>
   16ecc:	ldr	r0, [sl, #32]
   16ed0:	cmp	r0, #0
   16ed4:	mov	r1, #208	; 0xd0
   16ed8:	movwne	r1, #200	; 0xc8
   16edc:	mov	r2, r8
   16ee0:	ldr	r1, [r2, r1]!
   16ee4:	adds	r1, r1, #1
   16ee8:	str	r1, [r2]
   16eec:	ldr	r1, [r2, #4]
   16ef0:	adc	r1, r1, #0
   16ef4:	str	r1, [r2, #4]
   16ef8:	cmp	r0, #0
   16efc:	bne	16f98 <UnityAssertEqualStringArray@@Base+0x360>
   16f00:	add	r4, r4, #1
   16f04:	cmp	r4, r9
   16f08:	mov	r0, #248	; 0xf8
   16f0c:	movwcc	r0, #240	; 0xf0
   16f10:	mov	r1, r8
   16f14:	ldr	r0, [r1, r0]!
   16f18:	adds	r0, r0, #1
   16f1c:	str	r0, [r1]
   16f20:	ldr	r0, [r1, #4]
   16f24:	adc	r0, r0, #0
   16f28:	str	r0, [r1, #4]
   16f2c:	cmp	r4, r9
   16f30:	bcc	16d4c <UnityAssertEqualStringArray@@Base+0x114>
   16f34:	ldr	r0, [r8, #256]	; 0x100
   16f38:	ldr	r1, [r8, #260]	; 0x104
   16f3c:	adds	r0, r0, #1
   16f40:	adc	r1, r1, #0
   16f44:	str	r0, [r8, #256]	; 0x100
   16f48:	str	r1, [r8, #260]	; 0x104
   16f4c:	ldr	r0, [r8, #264]	; 0x108
   16f50:	ldr	r1, [r8, #268]	; 0x10c
   16f54:	adds	r0, r0, #1
   16f58:	adc	r1, r1, #0
   16f5c:	str	r0, [r8, #264]	; 0x108
   16f60:	str	r1, [r8, #268]	; 0x10c
   16f64:	sub	sp, fp, #28
   16f68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f6c:	add	r0, r8, #160	; 0xa0
   16f70:	ldrd	r2, [r0]
   16f74:	adds	r2, r2, #1
   16f78:	adc	r3, r3, #0
   16f7c:	strd	r2, [r0]
   16f80:	mov	r0, #1
   16f84:	str	r0, [sl, #32]
   16f88:	ldrd	r0, [r8, #200]	; 0xc8
   16f8c:	adds	r0, r0, #1
   16f90:	adc	r1, r1, #0
   16f94:	strd	r0, [r8, #200]	; 0xc8
   16f98:	ldr	r0, [fp, #8]
   16f9c:	bl	14f60 <UnityAssertBits@@Base+0x108>
   16fa0:	mov	r0, #224	; 0xe0
   16fa4:	cmp	r9, #1
   16fa8:	movwhi	r0, #216	; 0xd8
   16fac:	mov	r1, r8
   16fb0:	ldr	r0, [r1, r0]!
   16fb4:	adds	r0, r0, #1
   16fb8:	str	r0, [r1]
   16fbc:	ldr	r0, [r1, #4]
   16fc0:	adc	r0, r0, #0
   16fc4:	str	r0, [r1, #4]
   16fc8:	cmp	r9, #2
   16fcc:	bcc	16ff4 <UnityAssertEqualStringArray@@Base+0x3bc>
   16fd0:	ldrd	r0, [r8, #232]	; 0xe8
   16fd4:	adds	r0, r0, #1
   16fd8:	adc	r1, r1, #0
   16fdc:	strd	r0, [r8, #232]	; 0xe8
   16fe0:	movw	r0, #54306	; 0xd422
   16fe4:	movt	r0, #1
   16fe8:	bl	1413c <UnityPrint@@Base>
   16fec:	mov	r0, r4
   16ff0:	bl	149b8 <UnityPrintNumberUnsigned@@Base>
   16ff4:	ldr	r1, [r6, r4, lsl #2]
   16ff8:	ldr	r0, [r5, r4, lsl #2]
   16ffc:	bl	166e8 <UnityAssertEqualString@@Base+0x294>
   17000:	ldr	r0, [sp]
   17004:	bl	14fc8 <UnityAssertBits@@Base+0x170>
   17008:	mov	r0, #1
   1700c:	str	r0, [sl, #32]
   17010:	add	r0, sl, #40	; 0x28
   17014:	mov	r1, #1
   17018:	bl	12610 <longjmp@plt>
   1701c:	add	r0, r8, #192	; 0xc0
   17020:	b	16f70 <UnityAssertEqualStringArray@@Base+0x338>
   17024:	mov	r0, r2
   17028:	bl	14f60 <UnityAssertBits@@Base+0x108>
   1702c:	movw	r0, #54367	; 0xd45f
   17030:	movt	r0, #1
   17034:	bl	1413c <UnityPrint@@Base>
   17038:	mov	r0, r4
   1703c:	b	17004 <UnityAssertEqualStringArray@@Base+0x3cc>

00017040 <UnityAssertEqualMemory@@Base>:
   17040:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17044:	add	fp, sp, #28
   17048:	sub	sp, sp, #4
   1704c:	mov	sl, r2
   17050:	mov	r4, r1
   17054:	mov	r6, r0
   17058:	movw	r9, #65184	; 0xfea0
   1705c:	movt	r9, #2
   17060:	ldrd	r0, [r9]
   17064:	adds	r0, r0, #1
   17068:	adc	r1, r1, #0
   1706c:	strd	r0, [r9]
   17070:	movw	r5, #1864	; 0x748
   17074:	movt	r5, #3
   17078:	ldrd	r0, [r5, #32]
   1707c:	orrs	r0, r1, r0
   17080:	mov	r1, #16
   17084:	movwne	r1, #8
   17088:	mov	r2, r9
   1708c:	ldr	r1, [r2, r1]!
   17090:	adds	r1, r1, #1
   17094:	str	r1, [r2]
   17098:	ldr	r1, [r2, #4]
   1709c:	adc	r1, r1, #0
   170a0:	str	r1, [r2, #4]
   170a4:	cmp	r0, #0
   170a8:	beq	170c0 <UnityAssertEqualMemory@@Base+0x80>
   170ac:	ldrd	r0, [r9, #24]
   170b0:	adds	r0, r0, #1
   170b4:	adc	r1, r1, #0
   170b8:	strd	r0, [r9, #24]
   170bc:	b	1726c <UnityAssertEqualMemory@@Base+0x22c>
   170c0:	mov	r7, r3
   170c4:	ldr	r2, [fp, #12]
   170c8:	ldr	r8, [fp, #8]
   170cc:	clz	r0, r3
   170d0:	lsr	r0, r0, #5
   170d4:	clz	r1, sl
   170d8:	lsr	r1, r1, #5
   170dc:	orrs	r0, r1, r0
   170e0:	mov	r1, #40	; 0x28
   170e4:	movwne	r1, #32
   170e8:	mov	r3, r9
   170ec:	ldr	r1, [r3, r1]!
   170f0:	adds	r1, r1, #1
   170f4:	str	r1, [r3]
   170f8:	ldr	r1, [r3, #4]
   170fc:	adc	r1, r1, #0
   17100:	str	r1, [r3, #4]
   17104:	cmp	r0, #1
   17108:	beq	1735c <UnityAssertEqualMemory@@Base+0x31c>
   1710c:	mov	r0, r6
   17110:	mov	r1, r4
   17114:	mov	r3, r8
   17118:	bl	157f8 <UnityAssertEqualIntArray@@Base+0x5d0>
   1711c:	mov	r1, #56	; 0x38
   17120:	cmp	r0, #1
   17124:	movweq	r1, #48	; 0x30
   17128:	mov	r2, r9
   1712c:	ldr	r1, [r2, r1]!
   17130:	adds	r1, r1, #1
   17134:	str	r1, [r2]
   17138:	ldr	r1, [r2, #4]
   1713c:	adc	r1, r1, #0
   17140:	str	r1, [r2, #4]
   17144:	cmp	r0, #1
   17148:	bne	17160 <UnityAssertEqualMemory@@Base+0x120>
   1714c:	ldrd	r0, [r9, #64]	; 0x40
   17150:	adds	r0, r0, #1
   17154:	adc	r1, r1, #0
   17158:	strd	r0, [r9, #64]	; 0x40
   1715c:	b	1726c <UnityAssertEqualMemory@@Base+0x22c>
   17160:	ldrd	r0, [r9, #72]	; 0x48
   17164:	adds	r0, r0, #1
   17168:	adc	r1, r1, #0
   1716c:	strd	r0, [r9, #72]	; 0x48
   17170:	sub	r0, sl, #1
   17174:	str	r7, [sp]
   17178:	mov	ip, r7
   1717c:	mov	r8, ip
   17180:	add	r7, r9, #88	; 0x58
   17184:	ldm	r7, {r1, r2, r3, r7}
   17188:	adds	r1, r1, #1
   1718c:	adc	r2, r2, #0
   17190:	adds	r3, r3, #1
   17194:	adc	r7, r7, #0
   17198:	add	lr, r9, #88	; 0x58
   1719c:	stm	lr, {r1, r2, r3, r7}
   171a0:	sub	ip, ip, #1
   171a4:	mov	r7, #0
   171a8:	ldrb	r2, [r4]
   171ac:	ldrb	r3, [r6]
   171b0:	cmp	r3, r2
   171b4:	mov	r1, #120	; 0x78
   171b8:	movwne	r1, #112	; 0x70
   171bc:	mov	r5, r9
   171c0:	ldr	r1, [r5, r1]!
   171c4:	adds	r1, r1, #1
   171c8:	str	r1, [r5]
   171cc:	ldr	r1, [r5, #4]
   171d0:	adc	r1, r1, #0
   171d4:	str	r1, [r5, #4]
   171d8:	cmp	r3, r2
   171dc:	bne	17284 <UnityAssertEqualMemory@@Base+0x244>
   171e0:	ldrd	r2, [r9, #152]	; 0x98
   171e4:	adds	r2, r2, #1
   171e8:	adc	r3, r3, #0
   171ec:	strd	r2, [r9, #152]	; 0x98
   171f0:	cmp	r0, r7
   171f4:	mov	r1, #104	; 0x68
   171f8:	movwne	r1, #96	; 0x60
   171fc:	mov	r2, r9
   17200:	ldr	r1, [r2, r1]!
   17204:	adds	r1, r1, #1
   17208:	str	r1, [r2]
   1720c:	ldr	r1, [r2, #4]
   17210:	adc	r1, r1, #0
   17214:	str	r1, [r2, #4]
   17218:	add	r7, r7, #1
   1721c:	add	r4, r4, #1
   17220:	add	r6, r6, #1
   17224:	cmp	sl, r7
   17228:	bne	171a8 <UnityAssertEqualMemory@@Base+0x168>
   1722c:	cmp	ip, #0
   17230:	mov	r2, #80	; 0x50
   17234:	movwne	r2, #72	; 0x48
   17238:	mov	r3, r9
   1723c:	ldr	r2, [r3, r2]!
   17240:	adds	r2, r2, #1
   17244:	str	r2, [r3]
   17248:	ldr	r2, [r3, #4]
   1724c:	adc	r2, r2, #0
   17250:	str	r2, [r3, #4]
   17254:	cmp	ip, #0
   17258:	bne	1717c <UnityAssertEqualMemory@@Base+0x13c>
   1725c:	ldrd	r0, [r9, #160]	; 0xa0
   17260:	adds	r0, r0, #1
   17264:	adc	r1, r1, #0
   17268:	strd	r0, [r9, #160]	; 0xa0
   1726c:	ldrd	r0, [r9, #168]	; 0xa8
   17270:	adds	r0, r0, #1
   17274:	adc	r1, r1, #0
   17278:	strd	r0, [r9, #168]	; 0xa8
   1727c:	sub	sp, fp, #28
   17280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17284:	ldr	r0, [fp, #12]
   17288:	bl	14f60 <UnityAssertBits@@Base+0x108>
   1728c:	movw	r0, #54323	; 0xd433
   17290:	movt	r0, #1
   17294:	bl	1413c <UnityPrint@@Base>
   17298:	mov	r0, #136	; 0x88
   1729c:	ldr	r2, [sp]
   172a0:	cmp	r2, #1
   172a4:	movwhi	r0, #128	; 0x80
   172a8:	mov	r1, r9
   172ac:	ldr	r0, [r1, r0]!
   172b0:	adds	r0, r0, #1
   172b4:	str	r0, [r1]
   172b8:	ldr	r0, [r1, #4]
   172bc:	adc	r0, r0, #0
   172c0:	str	r0, [r1, #4]
   172c4:	cmp	r2, #2
   172c8:	bcc	172f4 <UnityAssertEqualMemory@@Base+0x2b4>
   172cc:	ldrd	r0, [r9, #144]	; 0x90
   172d0:	adds	r0, r0, #1
   172d4:	adc	r1, r1, #0
   172d8:	strd	r0, [r9, #144]	; 0x90
   172dc:	movw	r0, #54306	; 0xd422
   172e0:	movt	r0, #1
   172e4:	bl	1413c <UnityPrint@@Base>
   172e8:	ldr	r0, [sp]
   172ec:	sub	r0, r0, r8
   172f0:	bl	149b8 <UnityPrintNumberUnsigned@@Base>
   172f4:	movw	r0, #54316	; 0xd42c
   172f8:	movt	r0, #1
   172fc:	bl	1413c <UnityPrint@@Base>
   17300:	mov	r0, r7
   17304:	bl	149b8 <UnityPrintNumberUnsigned@@Base>
   17308:	movw	r0, #54284	; 0xd40c
   1730c:	movt	r0, #1
   17310:	bl	1413c <UnityPrint@@Base>
   17314:	ldrb	r0, [r6]
   17318:	mov	r1, #65	; 0x41
   1731c:	bl	146f8 <UnityPrintNumberByStyle@@Base>
   17320:	movw	r0, #54295	; 0xd417
   17324:	movt	r0, #1
   17328:	bl	1413c <UnityPrint@@Base>
   1732c:	ldrb	r0, [r4]
   17330:	mov	r1, #65	; 0x41
   17334:	bl	146f8 <UnityPrintNumberByStyle@@Base>
   17338:	ldr	r0, [fp, #8]
   1733c:	bl	14fc8 <UnityAssertBits@@Base+0x170>
   17340:	mov	r0, #1
   17344:	movw	r1, #1864	; 0x748
   17348:	movt	r1, #3
   1734c:	str	r0, [r1, #32]
   17350:	add	r0, r1, #40	; 0x28
   17354:	mov	r1, #1
   17358:	bl	12610 <longjmp@plt>
   1735c:	mov	r0, r2
   17360:	bl	14f60 <UnityAssertBits@@Base+0x108>
   17364:	movw	r0, #54367	; 0xd45f
   17368:	movt	r0, #1
   1736c:	bl	1413c <UnityPrint@@Base>
   17370:	mov	r0, r8
   17374:	bl	14fc8 <UnityAssertBits@@Base+0x170>
   17378:	mov	r0, #1
   1737c:	str	r0, [r5, #32]
   17380:	add	r0, r5, #40	; 0x28
   17384:	mov	r1, #1
   17388:	bl	12610 <longjmp@plt>

0001738c <UnityFail@@Base>:
   1738c:	push	{r4, r5, r6, r7, fp, lr}
   17390:	add	fp, sp, #16
   17394:	mov	r4, r0
   17398:	movw	r5, #65360	; 0xff50
   1739c:	movt	r5, #2
   173a0:	ldm	r5, {r0, r3}
   173a4:	adds	r0, r0, #1
   173a8:	adc	r3, r3, #0
   173ac:	stm	r5, {r0, r3}
   173b0:	movw	r6, #1864	; 0x748
   173b4:	movt	r6, #3
   173b8:	ldr	r0, [r6, #32]
   173bc:	ldr	r3, [r6, #36]	; 0x24
   173c0:	orrs	r0, r3, r0
   173c4:	mov	r2, #16
   173c8:	movwne	r2, #8
   173cc:	mov	r3, r5
   173d0:	ldr	r2, [r3, r2]!
   173d4:	adds	r2, r2, #1
   173d8:	str	r2, [r3]
   173dc:	ldr	r2, [r3, #4]
   173e0:	adc	r2, r2, #0
   173e4:	str	r2, [r3, #4]
   173e8:	cmp	r0, #0
   173ec:	beq	17404 <UnityFail@@Base+0x78>
   173f0:	ldrd	r0, [r5, #24]
   173f4:	adds	r0, r0, #1
   173f8:	adc	r1, r1, #0
   173fc:	strd	r0, [r5, #24]
   17400:	pop	{r4, r5, r6, r7, fp, pc}
   17404:	ldr	r0, [r6]
   17408:	bl	14df4 <UnityConcludeTest@@Base+0x120>
   1740c:	mov	r7, #40	; 0x28
   17410:	cmp	r4, #0
   17414:	movwne	r7, #32
   17418:	bl	14c7c <UnityPrintFail@@Base>
   1741c:	mov	r0, r5
   17420:	ldr	r1, [r0, r7]!
   17424:	adds	r1, r1, #1
   17428:	str	r1, [r0]
   1742c:	ldr	r1, [r0, #4]
   17430:	adc	r1, r1, #0
   17434:	str	r1, [r0, #4]
   17438:	cmp	r4, #0
   1743c:	beq	17568 <UnityFail@@Base+0x1dc>
   17440:	mov	r0, #58	; 0x3a
   17444:	bl	12760 <putchar@plt>
   17448:	ldr	r0, [r6, #8]
   1744c:	mov	r1, #56	; 0x38
   17450:	cmp	r0, #0
   17454:	movwne	r1, #48	; 0x30
   17458:	mov	r2, r5
   1745c:	ldr	r1, [r2, r1]!
   17460:	adds	r1, r1, #1
   17464:	str	r1, [r2]
   17468:	ldr	r1, [r2, #4]
   1746c:	adc	r1, r1, #0
   17470:	str	r1, [r2, #4]
   17474:	cmp	r0, #0
   17478:	beq	17504 <UnityFail@@Base+0x178>
   1747c:	movw	r0, #54689	; 0xd5a1
   17480:	movt	r0, #1
   17484:	bl	1413c <UnityPrint@@Base>
   17488:	ldr	r0, [r6, #8]
   1748c:	bl	1413c <UnityPrint@@Base>
   17490:	ldr	r0, [r6, #12]
   17494:	mov	r1, #72	; 0x48
   17498:	cmp	r0, #0
   1749c:	movwne	r1, #64	; 0x40
   174a0:	mov	r2, r5
   174a4:	ldr	r1, [r2, r1]!
   174a8:	adds	r1, r1, #1
   174ac:	str	r1, [r2]
   174b0:	ldr	r1, [r2, #4]
   174b4:	adc	r1, r1, #0
   174b8:	str	r1, [r2, #4]
   174bc:	cmp	r0, #0
   174c0:	beq	174e8 <UnityFail@@Base+0x15c>
   174c4:	ldrd	r0, [r5, #80]	; 0x50
   174c8:	adds	r0, r0, #1
   174cc:	adc	r1, r1, #0
   174d0:	strd	r0, [r5, #80]	; 0x50
   174d4:	movw	r0, #54699	; 0xd5ab
   174d8:	movt	r0, #1
   174dc:	bl	1413c <UnityPrint@@Base>
   174e0:	ldr	r0, [r6, #12]
   174e4:	bl	1413c <UnityPrint@@Base>
   174e8:	ldrd	r0, [r5, #88]	; 0x58
   174ec:	adds	r0, r0, #1
   174f0:	adc	r1, r1, #0
   174f4:	strd	r0, [r5, #88]	; 0x58
   174f8:	movw	r0, #54281	; 0xd409
   174fc:	movt	r0, #1
   17500:	bl	1413c <UnityPrint@@Base>
   17504:	ldrb	r0, [r4]
   17508:	mov	r1, #104	; 0x68
   1750c:	cmp	r0, #32
   17510:	movwne	r1, #96	; 0x60
   17514:	mov	r2, r5
   17518:	ldr	r1, [r2, r1]!
   1751c:	adds	r1, r1, #1
   17520:	str	r1, [r2]
   17524:	ldr	r1, [r2, #4]
   17528:	adc	r1, r1, #0
   1752c:	str	r1, [r2, #4]
   17530:	cmp	r0, #32
   17534:	beq	17550 <UnityFail@@Base+0x1c4>
   17538:	ldrd	r0, [r5, #112]	; 0x70
   1753c:	adds	r0, r0, #1
   17540:	adc	r1, r1, #0
   17544:	strd	r0, [r5, #112]	; 0x70
   17548:	mov	r0, #32
   1754c:	bl	12760 <putchar@plt>
   17550:	ldrd	r0, [r5, #120]	; 0x78
   17554:	adds	r0, r0, #1
   17558:	adc	r1, r1, #0
   1755c:	strd	r0, [r5, #120]	; 0x78
   17560:	mov	r0, r4
   17564:	bl	1413c <UnityPrint@@Base>
   17568:	mov	r0, #1
   1756c:	str	r0, [r6, #32]
   17570:	add	r0, r6, #40	; 0x28
   17574:	mov	r1, #1
   17578:	bl	12610 <longjmp@plt>

0001757c <UnityIgnore@@Base>:
   1757c:	push	{r4, r5, r6, sl, fp, lr}
   17580:	add	fp, sp, #16
   17584:	mov	r4, r0
   17588:	movw	r6, #65488	; 0xffd0
   1758c:	movt	r6, #2
   17590:	ldm	r6, {r0, r3}
   17594:	adds	r0, r0, #1
   17598:	adc	r3, r3, #0
   1759c:	stm	r6, {r0, r3}
   175a0:	movw	r5, #1864	; 0x748
   175a4:	movt	r5, #3
   175a8:	ldr	r0, [r5, #32]
   175ac:	ldr	r3, [r5, #36]	; 0x24
   175b0:	orrs	r0, r3, r0
   175b4:	mov	r2, #16
   175b8:	movwne	r2, #8
   175bc:	mov	r3, r6
   175c0:	ldr	r2, [r3, r2]!
   175c4:	adds	r2, r2, #1
   175c8:	str	r2, [r3]
   175cc:	ldr	r2, [r3, #4]
   175d0:	adc	r2, r2, #0
   175d4:	str	r2, [r3, #4]
   175d8:	cmp	r0, #0
   175dc:	beq	175f4 <UnityIgnore@@Base+0x78>
   175e0:	ldrd	r0, [r6, #24]
   175e4:	adds	r0, r0, #1
   175e8:	adc	r1, r1, #0
   175ec:	strd	r0, [r6, #24]
   175f0:	pop	{r4, r5, r6, sl, fp, pc}
   175f4:	ldr	r0, [r5]
   175f8:	bl	14df4 <UnityConcludeTest@@Base+0x120>
   175fc:	movw	r0, #54269	; 0xd3fd
   17600:	movt	r0, #1
   17604:	bl	1413c <UnityPrint@@Base>
   17608:	mov	r0, #40	; 0x28
   1760c:	cmp	r4, #0
   17610:	movwne	r0, #32
   17614:	mov	r1, r6
   17618:	ldr	r0, [r1, r0]!
   1761c:	adds	r0, r0, #1
   17620:	str	r0, [r1]
   17624:	ldr	r0, [r1, #4]
   17628:	adc	r0, r0, #0
   1762c:	str	r0, [r1, #4]
   17630:	cmp	r4, #0
   17634:	beq	17660 <UnityIgnore@@Base+0xe4>
   17638:	ldrd	r0, [r6, #48]	; 0x30
   1763c:	adds	r0, r0, #1
   17640:	adc	r1, r1, #0
   17644:	strd	r0, [r6, #48]	; 0x30
   17648:	mov	r0, #58	; 0x3a
   1764c:	bl	12760 <putchar@plt>
   17650:	mov	r0, #32
   17654:	bl	12760 <putchar@plt>
   17658:	mov	r0, r4
   1765c:	bl	1413c <UnityPrint@@Base>
   17660:	mov	r0, #1
   17664:	str	r0, [r5, #36]	; 0x24
   17668:	add	r0, r5, #40	; 0x28
   1766c:	mov	r1, #1
   17670:	bl	12610 <longjmp@plt>

00017674 <setUp@@Base>:
   17674:	movw	r0, #8
   17678:	movt	r0, #3
   1767c:	ldm	r0, {r1, r2, r3, ip}
   17680:	adds	r1, r1, #1
   17684:	adc	r2, r2, #0
   17688:	adds	r3, r3, #1
   1768c:	adc	ip, ip, #0
   17690:	stm	r0, {r1, r2, r3, ip}
   17694:	bx	lr

00017698 <tearDown@@Base>:
   17698:	movw	r0, #24
   1769c:	movt	r0, #3
   176a0:	ldm	r0, {r1, r2, r3, ip}
   176a4:	adds	r1, r1, #1
   176a8:	adc	r2, r2, #0
   176ac:	adds	r3, r3, #1
   176b0:	adc	ip, ip, #0
   176b4:	stm	r0, {r1, r2, r3, ip}
   176b8:	bx	lr

000176bc <UnityDefaultTestRun@@Base>:
   176bc:	push	{r4, r5, r6, r7, fp, lr}
   176c0:	add	fp, sp, #16
   176c4:	mov	r4, r0
   176c8:	movw	r7, #1864	; 0x748
   176cc:	movt	r7, #3
   176d0:	str	r1, [r7, #4]
   176d4:	str	r2, [r7, #16]
   176d8:	mov	r0, #0
   176dc:	str	r0, [r7, #8]
   176e0:	str	r0, [r7, #12]
   176e4:	movw	r6, #48	; 0x30
   176e8:	movt	r6, #3
   176ec:	ldrd	r0, [r6]
   176f0:	adds	r0, r0, #1
   176f4:	ldr	r2, [r7, #20]
   176f8:	add	r2, r2, #1
   176fc:	str	r2, [r7, #20]
   17700:	adc	r1, r1, #0
   17704:	strd	r0, [r6]
   17708:	add	r5, r7, #40	; 0x28
   1770c:	mov	r0, r5
   17710:	bl	12628 <_setjmp@plt>
   17714:	mov	r1, #16
   17718:	cmp	r0, #0
   1771c:	movweq	r1, #8
   17720:	mov	r2, r6
   17724:	ldr	r1, [r2, r1]!
   17728:	adds	r1, r1, #1
   1772c:	str	r1, [r2]
   17730:	ldr	r1, [r2, #4]
   17734:	adc	r1, r1, #0
   17738:	str	r1, [r2, #4]
   1773c:	cmp	r0, #0
   17740:	bne	1775c <UnityDefaultTestRun@@Base+0xa0>
   17744:	ldrd	r0, [r6, #24]
   17748:	adds	r0, r0, #1
   1774c:	adc	r1, r1, #0
   17750:	strd	r0, [r6, #24]
   17754:	bl	17674 <setUp@@Base>
   17758:	blx	r4
   1775c:	mov	r0, r5
   17760:	bl	12628 <_setjmp@plt>
   17764:	ldr	r1, [r7, #36]	; 0x24
   17768:	orrs	r0, r1, r0
   1776c:	mov	r1, #40	; 0x28
   17770:	movwne	r1, #32
   17774:	mov	r2, r6
   17778:	ldr	r1, [r2, r1]!
   1777c:	adds	r1, r1, #1
   17780:	str	r1, [r2]
   17784:	ldr	r1, [r2, #4]
   17788:	adc	r1, r1, #0
   1778c:	str	r1, [r2, #4]
   17790:	cmp	r0, #0
   17794:	bne	177ac <UnityDefaultTestRun@@Base+0xf0>
   17798:	ldrd	r0, [r6, #48]	; 0x30
   1779c:	adds	r0, r0, #1
   177a0:	adc	r1, r1, #0
   177a4:	strd	r0, [r6, #48]	; 0x30
   177a8:	bl	17698 <tearDown@@Base>
   177ac:	ldrd	r0, [r6, #56]	; 0x38
   177b0:	adds	r0, r0, #1
   177b4:	adc	r1, r1, #0
   177b8:	strd	r0, [r6, #56]	; 0x38
   177bc:	bl	14cd4 <UnityConcludeTest@@Base>
   177c0:	pop	{r4, r5, r6, r7, fp, pc}

000177c4 <UnityBegin@@Base>:
   177c4:	movw	r1, #1864	; 0x748
   177c8:	movt	r1, #3
   177cc:	vmov.i32	q8, #0	; 0x00000000
   177d0:	str	r0, [r1]
   177d4:	mov	r0, #0
   177d8:	str	r0, [r1, #36]	; 0x24
   177dc:	add	r0, r1, #20
   177e0:	vst1.32	{d16-d17}, [r0]
   177e4:	add	r0, r1, #4
   177e8:	vst1.32	{d16-d17}, [r0]
   177ec:	movw	r0, #112	; 0x70
   177f0:	movt	r0, #3
   177f4:	ldm	r0, {r1, r2, r3, ip}
   177f8:	adds	r1, r1, #1
   177fc:	adc	r2, r2, #0
   17800:	adds	r3, r3, #1
   17804:	adc	ip, ip, #0
   17808:	stm	r0, {r1, r2, r3, ip}
   1780c:	bx	lr

00017810 <UnityEnd@@Base>:
   17810:	push	{r4, r5, fp, lr}
   17814:	add	fp, sp, #8
   17818:	movw	r4, #128	; 0x80
   1781c:	movt	r4, #3
   17820:	ldrd	r0, [r4]
   17824:	adds	r0, r0, #1
   17828:	adc	r1, r1, #0
   1782c:	strd	r0, [r4]
   17830:	mov	r0, #10
   17834:	bl	12760 <putchar@plt>
   17838:	movw	r0, #54636	; 0xd56c
   1783c:	movt	r0, #1
   17840:	bl	1413c <UnityPrint@@Base>
   17844:	mov	r0, #10
   17848:	bl	12760 <putchar@plt>
   1784c:	movw	r5, #1864	; 0x748
   17850:	movt	r5, #3
   17854:	ldr	r0, [r5, #20]
   17858:	bl	147ec <UnityPrintNumber@@Base>
   1785c:	movw	r0, #54660	; 0xd584
   17860:	movt	r0, #1
   17864:	bl	1413c <UnityPrint@@Base>
   17868:	ldr	r0, [r5, #24]
   1786c:	bl	147ec <UnityPrintNumber@@Base>
   17870:	movw	r0, #54668	; 0xd58c
   17874:	movt	r0, #1
   17878:	bl	1413c <UnityPrint@@Base>
   1787c:	ldr	r0, [r5, #28]
   17880:	bl	147ec <UnityPrintNumber@@Base>
   17884:	movw	r0, #54679	; 0xd597
   17888:	movt	r0, #1
   1788c:	bl	1413c <UnityPrint@@Base>
   17890:	mov	r0, #10
   17894:	bl	12760 <putchar@plt>
   17898:	ldr	r0, [r5, #24]
   1789c:	mov	r1, #16
   178a0:	cmp	r0, #0
   178a4:	movweq	r1, #8
   178a8:	mov	r2, r4
   178ac:	ldr	r1, [r2, r1]!
   178b0:	adds	r1, r1, #1
   178b4:	str	r1, [r2]
   178b8:	ldr	r1, [r2, #4]
   178bc:	adc	r1, r1, #0
   178c0:	str	r1, [r2, #4]
   178c4:	cmp	r0, #0
   178c8:	beq	178e4 <UnityEnd@@Base+0xd4>
   178cc:	ldrd	r0, [r4, #32]
   178d0:	adds	r0, r0, #1
   178d4:	adc	r1, r1, #0
   178d8:	strd	r0, [r4, #32]
   178dc:	bl	14c7c <UnityPrintFail@@Base>
   178e0:	b	178f8 <UnityEnd@@Base+0xe8>
   178e4:	ldrd	r0, [r4, #24]
   178e8:	adds	r0, r0, #1
   178ec:	adc	r1, r1, #0
   178f0:	strd	r0, [r4, #24]
   178f4:	bl	14ca8 <UnityPrintOk@@Base>
   178f8:	ldrd	r0, [r4, #40]	; 0x28
   178fc:	adds	r0, r0, #1
   17900:	adc	r1, r1, #0
   17904:	strd	r0, [r4, #40]	; 0x28
   17908:	mov	r0, #10
   1790c:	bl	12760 <putchar@plt>
   17910:	ldr	r0, [r5, #24]
   17914:	pop	{r4, r5, fp, pc}
   17918:	ldr	r0, [r0]
   1791c:	cmn	r0, #1
   17920:	ldrne	r0, [r1, r0, lsl #2]
   17924:	cmpne	r0, #0
   17928:	bne	17930 <UnityEnd@@Base+0x120>
   1792c:	bx	lr
   17930:	ldrd	r2, [r0]
   17934:	adds	r2, r2, #1
   17938:	adc	r3, r3, #0
   1793c:	strd	r2, [r0]
   17940:	bx	lr
   17944:	push	{r4, r5, r6, lr}
   17948:	sub	sp, sp, #8
   1794c:	movw	r0, #55808	; 0xda00
   17950:	movt	r0, #1
   17954:	movw	r1, #52836	; 0xce64
   17958:	movt	r1, #1
   1795c:	movw	r2, #878	; 0x36e
   17960:	movt	r2, #49498	; 0xc15a
   17964:	bl	19bc8 <next@@Base+0x13a4>
   17968:	movw	r0, #55520	; 0xd8e0
   1796c:	movt	r0, #1
   17970:	add	r4, r0, #4
   17974:	mov	r5, #0
   17978:	movw	r6, #54816	; 0xd620
   1797c:	movt	r6, #1
   17980:	mov	r3, r6
   17984:	ldr	r0, [r3, r5]!
   17988:	ldr	r1, [r3, #16]
   1798c:	str	r1, [sp]
   17990:	ldmib	r3, {r1, r2}
   17994:	ldrb	r3, [r3, #12]
   17998:	bl	1a32c <next@@Base+0x1b08>
   1799c:	ldrd	r0, [r4, #-4]
   179a0:	bl	1abe0 <next@@Base+0x23bc>
   179a4:	add	r5, r5, #20
   179a8:	add	r4, r4, #8
   179ac:	cmp	r5, #700	; 0x2bc
   179b0:	bne	17980 <UnityEnd@@Base+0x170>
   179b4:	bl	1b35c <next@@Base+0x2b38>
   179b8:	add	sp, sp, #8
   179bc:	pop	{r4, r5, r6, lr}
   179c0:	b	1c0c8 <next@@Base+0x38a4>
   179c4:	push	{r4, r5, r6, r7, fp, lr}
   179c8:	vpush	{d8-d9}
   179cc:	bl	17944 <UnityEnd@@Base+0x134>
   179d0:	movw	r0, #62128	; 0xf2b0
   179d4:	movt	r0, #2
   179d8:	mov	r4, #0
   179dc:	mov	r1, #0
   179e0:	mov	r2, #152	; 0x98
   179e4:	bl	12754 <memset@plt>
   179e8:	vmov.i32	q4, #0	; 0x00000000
   179ec:	movw	r0, #62280	; 0xf348
   179f0:	movt	r0, #2
   179f4:	vst1.64	{d8-d9}, [r0]
   179f8:	movw	r0, #62304	; 0xf360
   179fc:	movt	r0, #2
   17a00:	add	r1, r0, #48	; 0x30
   17a04:	vst1.64	{d8-d9}, [r1 :128]
   17a08:	add	r1, r0, #32
   17a0c:	vst1.64	{d8-d9}, [r1 :128]
   17a10:	add	r1, r0, #16
   17a14:	vst1.64	{d8-d9}, [r1 :128]
   17a18:	mov	r5, #64	; 0x40
   17a1c:	vst1.64	{d8-d9}, [r0 :128], r5
   17a20:	vst1.64	{d8-d9}, [r0 :128]
   17a24:	movw	r0, #62384	; 0xf3b0
   17a28:	movt	r0, #2
   17a2c:	mov	r1, #0
   17a30:	mov	r2, #168	; 0xa8
   17a34:	bl	12754 <memset@plt>
   17a38:	movw	r1, #62768	; 0xf530
   17a3c:	movt	r1, #2
   17a40:	add	r0, r1, #64	; 0x40
   17a44:	vst1.64	{d8-d9}, [r0 :128]
   17a48:	add	r0, r1, #48	; 0x30
   17a4c:	vst1.64	{d8-d9}, [r0 :128]
   17a50:	add	r0, r1, #32
   17a54:	vst1.64	{d8-d9}, [r0 :128]
   17a58:	add	r0, r1, #16
   17a5c:	vst1.64	{d8-d9}, [r0 :128]
   17a60:	movw	r0, #62640	; 0xf4b0
   17a64:	movt	r0, #2
   17a68:	str	r4, [r0, #112]	; 0x70
   17a6c:	add	r2, r0, #96	; 0x60
   17a70:	vst1.64	{d8-d9}, [r2 :128]
   17a74:	add	r2, r0, #80	; 0x50
   17a78:	vst1.64	{d8-d9}, [r2 :128]
   17a7c:	add	r2, r0, #64	; 0x40
   17a80:	vst1.64	{d8-d9}, [r2 :128]
   17a84:	add	r2, r0, #48	; 0x30
   17a88:	vst1.64	{d8-d9}, [r2 :128]
   17a8c:	add	r2, r0, #32
   17a90:	vst1.64	{d8-d9}, [r2 :128]
   17a94:	add	r2, r0, #16
   17a98:	vst1.64	{d8-d9}, [r2 :128]
   17a9c:	movw	r3, #62560	; 0xf460
   17aa0:	movt	r3, #2
   17aa4:	str	r4, [r3, #64]	; 0x40
   17aa8:	add	r2, r3, #48	; 0x30
   17aac:	vst1.64	{d8-d9}, [r2 :128]
   17ab0:	add	r2, r3, #32
   17ab4:	vst1.64	{d8-d9}, [r2 :128]
   17ab8:	add	r2, r3, #16
   17abc:	vst1.64	{d8-d9}, [r2 :128]
   17ac0:	str	r4, [r1, #80]	; 0x50
   17ac4:	mov	r2, #116	; 0x74
   17ac8:	vst1.64	{d8-d9}, [r0 :128], r2
   17acc:	str	r4, [r0]
   17ad0:	mov	r2, #68	; 0x44
   17ad4:	vst1.64	{d8-d9}, [r3 :128], r2
   17ad8:	str	r4, [r3]
   17adc:	mov	r0, #84	; 0x54
   17ae0:	vst1.64	{d8-d9}, [r1 :128], r0
   17ae4:	str	r4, [r1]
   17ae8:	movw	r1, #62864	; 0xf590
   17aec:	movt	r1, #2
   17af0:	str	r4, [r1, #96]	; 0x60
   17af4:	add	r3, r1, #80	; 0x50
   17af8:	vst1.64	{d8-d9}, [r3 :128]
   17afc:	add	r3, r1, #64	; 0x40
   17b00:	vst1.64	{d8-d9}, [r3 :128]
   17b04:	add	r3, r1, #48	; 0x30
   17b08:	vst1.64	{d8-d9}, [r3 :128]
   17b0c:	add	r3, r1, #32
   17b10:	vst1.64	{d8-d9}, [r3 :128]
   17b14:	add	r3, r1, #16
   17b18:	vst1.64	{d8-d9}, [r3 :128]
   17b1c:	mov	r3, #100	; 0x64
   17b20:	vst1.64	{d8-d9}, [r1 :128], r3
   17b24:	str	r4, [r1]
   17b28:	movw	r1, #62968	; 0xf5f8
   17b2c:	movt	r1, #2
   17b30:	vst1.64	{d8-d9}, [r1]
   17b34:	movw	r1, #62984	; 0xf608
   17b38:	movt	r1, #2
   17b3c:	vst1.64	{d8-d9}, [r1]
   17b40:	movw	r1, #63008	; 0xf620
   17b44:	movt	r1, #2
   17b48:	str	r4, [r1, #64]	; 0x40
   17b4c:	add	r3, r1, #48	; 0x30
   17b50:	vst1.64	{d8-d9}, [r3 :128]
   17b54:	add	r3, r1, #32
   17b58:	vst1.64	{d8-d9}, [r3 :128]
   17b5c:	add	r3, r1, #16
   17b60:	vst1.64	{d8-d9}, [r3 :128]
   17b64:	vst1.64	{d8-d9}, [r1 :128], r2
   17b68:	str	r4, [r1]
   17b6c:	movw	r1, #63080	; 0xf668
   17b70:	movt	r1, #2
   17b74:	vst1.64	{d8-d9}, [r1]
   17b78:	movw	r1, #63104	; 0xf680
   17b7c:	movt	r1, #2
   17b80:	add	r2, r1, #16
   17b84:	vst1.64	{d8-d9}, [r2 :128]
   17b88:	mov	r6, #32
   17b8c:	vst1.64	{d8-d9}, [r1 :128], r6
   17b90:	vst1.64	{d8-d9}, [r1 :128]
   17b94:	movw	r1, #63152	; 0xf6b0
   17b98:	movt	r1, #2
   17b9c:	vst1.64	{d8-d9}, [r1]
   17ba0:	movw	r1, #63168	; 0xf6c0
   17ba4:	movt	r1, #2
   17ba8:	str	r4, [r1, #80]	; 0x50
   17bac:	add	r2, r1, #64	; 0x40
   17bb0:	vst1.64	{d8-d9}, [r2 :128]
   17bb4:	add	r2, r1, #48	; 0x30
   17bb8:	vst1.64	{d8-d9}, [r2 :128]
   17bbc:	add	r2, r1, #32
   17bc0:	vst1.64	{d8-d9}, [r2 :128]
   17bc4:	add	r2, r1, #16
   17bc8:	vst1.64	{d8-d9}, [r2 :128]
   17bcc:	vst1.64	{d8-d9}, [r1 :128], r0
   17bd0:	str	r4, [r1]
   17bd4:	movw	r0, #63264	; 0xf720
   17bd8:	movt	r0, #2
   17bdc:	add	r1, r0, #16
   17be0:	vst1.64	{d8-d9}, [r1 :128]
   17be4:	vst1.64	{d8-d9}, [r0 :128], r6
   17be8:	vst1.64	{d8-d9}, [r0 :128]
   17bec:	movw	r0, #63312	; 0xf750
   17bf0:	movt	r0, #2
   17bf4:	mov	r1, #0
   17bf8:	mov	r2, #280	; 0x118
   17bfc:	bl	12754 <memset@plt>
   17c00:	movw	r0, #63600	; 0xf870
   17c04:	movt	r0, #2
   17c08:	add	r1, r0, #48	; 0x30
   17c0c:	vst1.64	{d8-d9}, [r1 :128]
   17c10:	add	r1, r0, #32
   17c14:	vst1.64	{d8-d9}, [r1 :128]
   17c18:	add	r1, r0, #16
   17c1c:	vst1.64	{d8-d9}, [r1 :128]
   17c20:	vst1.64	{d8-d9}, [r0 :128], r5
   17c24:	vst1.64	{d8-d9}, [r0 :128]
   17c28:	movw	r0, #63680	; 0xf8c0
   17c2c:	movt	r0, #2
   17c30:	mov	r1, #0
   17c34:	mov	r2, #192	; 0xc0
   17c38:	bl	12754 <memset@plt>
   17c3c:	movw	r0, #63872	; 0xf980
   17c40:	movt	r0, #2
   17c44:	add	r1, r0, #96	; 0x60
   17c48:	vst1.64	{d8-d9}, [r1 :128]
   17c4c:	add	r1, r0, #80	; 0x50
   17c50:	vst1.64	{d8-d9}, [r1 :128]
   17c54:	add	r1, r0, #64	; 0x40
   17c58:	vst1.64	{d8-d9}, [r1 :128]
   17c5c:	add	r1, r0, #48	; 0x30
   17c60:	vst1.64	{d8-d9}, [r1 :128]
   17c64:	add	r1, r0, #32
   17c68:	vst1.64	{d8-d9}, [r1 :128]
   17c6c:	add	r1, r0, #16
   17c70:	vst1.64	{d8-d9}, [r1 :128]
   17c74:	mov	r7, #112	; 0x70
   17c78:	vst1.64	{d8-d9}, [r0 :128], r7
   17c7c:	vst1.64	{d8-d9}, [r0 :128]
   17c80:	movw	r0, #64000	; 0xfa00
   17c84:	movt	r0, #2
   17c88:	mov	r1, #0
   17c8c:	mov	r2, #248	; 0xf8
   17c90:	bl	12754 <memset@plt>
   17c94:	movw	r0, #64256	; 0xfb00
   17c98:	movt	r0, #2
   17c9c:	add	r1, r0, #96	; 0x60
   17ca0:	vst1.64	{d8-d9}, [r1 :128]
   17ca4:	add	r1, r0, #80	; 0x50
   17ca8:	vst1.64	{d8-d9}, [r1 :128]
   17cac:	add	r1, r0, #64	; 0x40
   17cb0:	vst1.64	{d8-d9}, [r1 :128]
   17cb4:	add	r1, r0, #48	; 0x30
   17cb8:	vst1.64	{d8-d9}, [r1 :128]
   17cbc:	add	r1, r0, #32
   17cc0:	vst1.64	{d8-d9}, [r1 :128]
   17cc4:	add	r1, r0, #16
   17cc8:	vst1.64	{d8-d9}, [r1 :128]
   17ccc:	vst1.64	{d8-d9}, [r0 :128], r7
   17cd0:	vst1.64	{d8-d9}, [r0 :128]
   17cd4:	movw	r0, #64384	; 0xfb80
   17cd8:	movt	r0, #2
   17cdc:	mov	r1, #0
   17ce0:	mov	r2, #176	; 0xb0
   17ce4:	bl	12754 <memset@plt>
   17ce8:	movw	r0, #64560	; 0xfc30
   17cec:	movt	r0, #2
   17cf0:	add	r1, r0, #48	; 0x30
   17cf4:	vst1.64	{d8-d9}, [r1 :128]
   17cf8:	add	r1, r0, #32
   17cfc:	vst1.64	{d8-d9}, [r1 :128]
   17d00:	add	r1, r0, #16
   17d04:	vst1.64	{d8-d9}, [r1 :128]
   17d08:	vst1.64	{d8-d9}, [r0 :128], r5
   17d0c:	vst1.64	{d8-d9}, [r0 :128]
   17d10:	movw	r0, #64640	; 0xfc80
   17d14:	movt	r0, #2
   17d18:	mov	r1, #0
   17d1c:	mov	r2, #192	; 0xc0
   17d20:	bl	12754 <memset@plt>
   17d24:	movw	r0, #64832	; 0xfd40
   17d28:	movt	r0, #2
   17d2c:	add	r1, r0, #48	; 0x30
   17d30:	vst1.64	{d8-d9}, [r1 :128]
   17d34:	add	r1, r0, #32
   17d38:	vst1.64	{d8-d9}, [r1 :128]
   17d3c:	add	r1, r0, #16
   17d40:	vst1.64	{d8-d9}, [r1 :128]
   17d44:	vst1.64	{d8-d9}, [r0 :128], r5
   17d48:	vst1.64	{d8-d9}, [r0 :128]
   17d4c:	movw	r0, #64912	; 0xfd90
   17d50:	movt	r0, #2
   17d54:	mov	r1, #0
   17d58:	mov	r2, #272	; 0x110
   17d5c:	bl	12754 <memset@plt>
   17d60:	movw	r0, #65184	; 0xfea0
   17d64:	movt	r0, #2
   17d68:	mov	r1, #0
   17d6c:	mov	r2, #176	; 0xb0
   17d70:	bl	12754 <memset@plt>
   17d74:	movw	r0, #48	; 0x30
   17d78:	movt	r0, #3
   17d7c:	add	r1, r0, #32
   17d80:	vst1.64	{d8-d9}, [r1 :128]
   17d84:	add	r1, r0, #16
   17d88:	vst1.64	{d8-d9}, [r1 :128]
   17d8c:	movw	r1, #65488	; 0xffd0
   17d90:	movt	r1, #2
   17d94:	str	r4, [r1, #48]	; 0x30
   17d98:	add	r2, r1, #32
   17d9c:	vst1.64	{d8-d9}, [r2 :128]
   17da0:	add	r2, r1, #16
   17da4:	vst1.64	{d8-d9}, [r2 :128]
   17da8:	movw	r2, #65360	; 0xff50
   17dac:	movt	r2, #2
   17db0:	add	r3, r2, #96	; 0x60
   17db4:	vst1.64	{d8-d9}, [r3 :128]
   17db8:	add	r3, r2, #80	; 0x50
   17dbc:	vst1.64	{d8-d9}, [r3 :128]
   17dc0:	add	r3, r2, #64	; 0x40
   17dc4:	vst1.64	{d8-d9}, [r3 :128]
   17dc8:	add	r3, r2, #48	; 0x30
   17dcc:	vst1.64	{d8-d9}, [r3 :128]
   17dd0:	add	r3, r2, #32
   17dd4:	vst1.64	{d8-d9}, [r3 :128]
   17dd8:	add	r3, r2, #16
   17ddc:	vst1.64	{d8-d9}, [r3 :128]
   17de0:	movw	r3, #8
   17de4:	movt	r3, #3
   17de8:	vst1.64	{d8-d9}, [r3]
   17dec:	movw	r3, #24
   17df0:	movt	r3, #3
   17df4:	vst1.64	{d8-d9}, [r3]
   17df8:	mov	r3, #48	; 0x30
   17dfc:	vst1.64	{d8-d9}, [r0 :128], r3
   17e00:	vst1.64	{d8-d9}, [r0 :128]
   17e04:	mov	r0, #52	; 0x34
   17e08:	vst1.64	{d8-d9}, [r1 :128], r0
   17e0c:	str	r4, [r1]
   17e10:	vst1.64	{d8-d9}, [r2 :128], r7
   17e14:	vst1.64	{d8-d9}, [r2 :128]
   17e18:	movw	r0, #112	; 0x70
   17e1c:	movt	r0, #3
   17e20:	vst1.64	{d8-d9}, [r0]
   17e24:	movw	r0, #128	; 0x80
   17e28:	movt	r0, #3
   17e2c:	add	r1, r0, #16
   17e30:	vst1.64	{d8-d9}, [r1 :128]
   17e34:	vst1.64	{d8-d9}, [r0 :128], r6
   17e38:	vst1.64	{d8-d9}, [r0 :128]
   17e3c:	vpop	{d8-d9}
   17e40:	pop	{r4, r5, r6, r7, fp, pc}
   17e44:	movw	r0, #31044	; 0x7944
   17e48:	movt	r0, #1
   17e4c:	movw	r1, #31172	; 0x79c4
   17e50:	movt	r1, #1
   17e54:	b	1c578 <__gcov_flush@@Base+0xb4>

00017e58 <init_token_int_type@@Base>:
   17e58:	push	{fp, lr}
   17e5c:	mov	fp, sp
   17e60:	movw	r1, #176	; 0xb0
   17e64:	movt	r1, #3
   17e68:	ldm	r1, {r2, r3, ip, lr}
   17e6c:	adds	r2, r2, #1
   17e70:	adc	r3, r3, #0
   17e74:	adds	ip, ip, #1
   17e78:	adc	lr, lr, #0
   17e7c:	stm	r1, {r2, r3, ip, lr}
   17e80:	mov	r1, #0
   17e84:	str	r1, [r0]
   17e88:	pop	{fp, pc}

00017e8c <init_token_int_value@@Base>:
   17e8c:	push	{r4, sl, fp, lr}
   17e90:	add	fp, sp, #8
   17e94:	movw	r2, #192	; 0xc0
   17e98:	movt	r2, #3
   17e9c:	ldm	r2, {r3, ip, lr}
   17ea0:	ldr	r4, [r2, #12]
   17ea4:	adds	r3, r3, #1
   17ea8:	adc	ip, ip, #0
   17eac:	adds	lr, lr, #1
   17eb0:	adc	r4, r4, #0
   17eb4:	stm	r2, {r3, ip, lr}
   17eb8:	str	r4, [r2, #12]
   17ebc:	mov	r2, #1
   17ec0:	str	r2, [r0]
   17ec4:	str	r1, [r0, #4]
   17ec8:	pop	{r4, sl, fp, pc}

00017ecc <init_token_function@@Base>:
   17ecc:	push	{r4, sl, fp, lr}
   17ed0:	add	fp, sp, #8
   17ed4:	movw	r2, #208	; 0xd0
   17ed8:	movt	r2, #3
   17edc:	ldm	r2, {r3, ip, lr}
   17ee0:	ldr	r4, [r2, #12]
   17ee4:	adds	r3, r3, #1
   17ee8:	adc	ip, ip, #0
   17eec:	adds	lr, lr, #1
   17ef0:	adc	r4, r4, #0
   17ef4:	stm	r2, {r3, ip, lr}
   17ef8:	str	r4, [r2, #12]
   17efc:	mov	r2, #2
   17f00:	str	r2, [r0]
   17f04:	str	r1, [r0, #4]
   17f08:	pop	{r4, sl, fp, pc}

00017f0c <init_token_opar@@Base>:
   17f0c:	push	{fp, lr}
   17f10:	mov	fp, sp
   17f14:	movw	r1, #224	; 0xe0
   17f18:	movt	r1, #3
   17f1c:	ldm	r1, {r2, r3, ip, lr}
   17f20:	adds	r2, r2, #1
   17f24:	adc	r3, r3, #0
   17f28:	adds	ip, ip, #1
   17f2c:	adc	lr, lr, #0
   17f30:	stm	r1, {r2, r3, ip, lr}
   17f34:	mov	r1, #3
   17f38:	str	r1, [r0]
   17f3c:	pop	{fp, pc}

00017f40 <init_token_cpar@@Base>:
   17f40:	push	{fp, lr}
   17f44:	mov	fp, sp
   17f48:	movw	r1, #240	; 0xf0
   17f4c:	movt	r1, #3
   17f50:	ldm	r1, {r2, r3, ip, lr}
   17f54:	adds	r2, r2, #1
   17f58:	adc	r3, r3, #0
   17f5c:	adds	ip, ip, #1
   17f60:	adc	lr, lr, #0
   17f64:	stm	r1, {r2, r3, ip, lr}
   17f68:	mov	r1, #4
   17f6c:	str	r1, [r0]
   17f70:	pop	{fp, pc}

00017f74 <init_token_obra@@Base>:
   17f74:	push	{fp, lr}
   17f78:	mov	fp, sp
   17f7c:	movw	r1, #256	; 0x100
   17f80:	movt	r1, #3
   17f84:	ldm	r1, {r2, r3, ip, lr}
   17f88:	adds	r2, r2, #1
   17f8c:	adc	r3, r3, #0
   17f90:	adds	ip, ip, #1
   17f94:	adc	lr, lr, #0
   17f98:	stm	r1, {r2, r3, ip, lr}
   17f9c:	mov	r1, #5
   17fa0:	str	r1, [r0]
   17fa4:	pop	{fp, pc}

00017fa8 <init_token_cbra@@Base>:
   17fa8:	push	{fp, lr}
   17fac:	mov	fp, sp
   17fb0:	movw	r1, #272	; 0x110
   17fb4:	movt	r1, #3
   17fb8:	ldm	r1, {r2, r3, ip, lr}
   17fbc:	adds	r2, r2, #1
   17fc0:	adc	r3, r3, #0
   17fc4:	adds	ip, ip, #1
   17fc8:	adc	lr, lr, #0
   17fcc:	stm	r1, {r2, r3, ip, lr}
   17fd0:	mov	r1, #6
   17fd4:	str	r1, [r0]
   17fd8:	pop	{fp, pc}

00017fdc <init_token_return@@Base>:
   17fdc:	push	{fp, lr}
   17fe0:	mov	fp, sp
   17fe4:	movw	r1, #288	; 0x120
   17fe8:	movt	r1, #3
   17fec:	ldm	r1, {r2, r3, ip, lr}
   17ff0:	adds	r2, r2, #1
   17ff4:	adc	r3, r3, #0
   17ff8:	adds	ip, ip, #1
   17ffc:	adc	lr, lr, #0
   18000:	stm	r1, {r2, r3, ip, lr}
   18004:	mov	r1, #7
   18008:	str	r1, [r0]
   1800c:	pop	{fp, pc}

00018010 <init_token_semicolon@@Base>:
   18010:	push	{fp, lr}
   18014:	mov	fp, sp
   18018:	movw	r1, #304	; 0x130
   1801c:	movt	r1, #3
   18020:	ldm	r1, {r2, r3, ip, lr}
   18024:	adds	r2, r2, #1
   18028:	adc	r3, r3, #0
   1802c:	adds	ip, ip, #1
   18030:	adc	lr, lr, #0
   18034:	stm	r1, {r2, r3, ip, lr}
   18038:	mov	r1, #8
   1803c:	str	r1, [r0]
   18040:	pop	{fp, pc}

00018044 <init_token_eof@@Base>:
   18044:	push	{fp, lr}
   18048:	mov	fp, sp
   1804c:	movw	r1, #320	; 0x140
   18050:	movt	r1, #3
   18054:	ldm	r1, {r2, r3, ip, lr}
   18058:	adds	r2, r2, #1
   1805c:	adc	r3, r3, #0
   18060:	adds	ip, ip, #1
   18064:	adc	lr, lr, #0
   18068:	stm	r1, {r2, r3, ip, lr}
   1806c:	mov	r1, #9
   18070:	str	r1, [r0]
   18074:	pop	{fp, pc}

00018078 <init_token_if@@Base>:
   18078:	push	{fp, lr}
   1807c:	mov	fp, sp
   18080:	movw	r1, #336	; 0x150
   18084:	movt	r1, #3
   18088:	ldm	r1, {r2, r3, ip, lr}
   1808c:	adds	r2, r2, #1
   18090:	adc	r3, r3, #0
   18094:	adds	ip, ip, #1
   18098:	adc	lr, lr, #0
   1809c:	stm	r1, {r2, r3, ip, lr}
   180a0:	mov	r1, #10
   180a4:	str	r1, [r0]
   180a8:	pop	{fp, pc}

000180ac <init_token_else@@Base>:
   180ac:	push	{fp, lr}
   180b0:	mov	fp, sp
   180b4:	movw	r1, #352	; 0x160
   180b8:	movt	r1, #3
   180bc:	ldm	r1, {r2, r3, ip, lr}
   180c0:	adds	r2, r2, #1
   180c4:	adc	r3, r3, #0
   180c8:	adds	ip, ip, #1
   180cc:	adc	lr, lr, #0
   180d0:	stm	r1, {r2, r3, ip, lr}
   180d4:	mov	r1, #11
   180d8:	str	r1, [r0]
   180dc:	pop	{fp, pc}

000180e0 <init_token_boolean_op@@Base>:
   180e0:	push	{r4, sl, fp, lr}
   180e4:	add	fp, sp, #8
   180e8:	movw	r2, #368	; 0x170
   180ec:	movt	r2, #3
   180f0:	ldm	r2, {r3, ip, lr}
   180f4:	ldr	r4, [r2, #12]
   180f8:	adds	r3, r3, #1
   180fc:	adc	ip, ip, #0
   18100:	adds	lr, lr, #1
   18104:	adc	r4, r4, #0
   18108:	stm	r2, {r3, ip, lr}
   1810c:	str	r4, [r2, #12]
   18110:	mov	r2, #12
   18114:	str	r2, [r0]
   18118:	str	r1, [r0, #4]
   1811c:	pop	{r4, sl, fp, pc}

00018120 <free_token_int_type@@Base>:
   18120:	push	{fp, lr}
   18124:	mov	fp, sp
   18128:	movw	r1, #384	; 0x180
   1812c:	movt	r1, #3
   18130:	ldm	r1, {r2, r3, ip, lr}
   18134:	adds	r2, r2, #1
   18138:	adc	r3, r3, #0
   1813c:	adds	ip, ip, #1
   18140:	adc	lr, lr, #0
   18144:	stm	r1, {r2, r3, ip, lr}
   18148:	pop	{fp, lr}
   1814c:	b	12634 <free@plt>

00018150 <free_token_int_value@@Base>:
   18150:	push	{fp, lr}
   18154:	mov	fp, sp
   18158:	movw	r1, #400	; 0x190
   1815c:	movt	r1, #3
   18160:	ldm	r1, {r2, r3, ip, lr}
   18164:	adds	r2, r2, #1
   18168:	adc	r3, r3, #0
   1816c:	adds	ip, ip, #1
   18170:	adc	lr, lr, #0
   18174:	stm	r1, {r2, r3, ip, lr}
   18178:	pop	{fp, lr}
   1817c:	b	12634 <free@plt>

00018180 <free_token_function@@Base>:
   18180:	push	{fp, lr}
   18184:	mov	fp, sp
   18188:	movw	r1, #416	; 0x1a0
   1818c:	movt	r1, #3
   18190:	ldm	r1, {r2, r3, ip, lr}
   18194:	adds	r2, r2, #1
   18198:	adc	r3, r3, #0
   1819c:	adds	ip, ip, #1
   181a0:	adc	lr, lr, #0
   181a4:	stm	r1, {r2, r3, ip, lr}
   181a8:	pop	{fp, lr}
   181ac:	b	12634 <free@plt>

000181b0 <free_token_opar@@Base>:
   181b0:	push	{fp, lr}
   181b4:	mov	fp, sp
   181b8:	movw	r1, #432	; 0x1b0
   181bc:	movt	r1, #3
   181c0:	ldm	r1, {r2, r3, ip, lr}
   181c4:	adds	r2, r2, #1
   181c8:	adc	r3, r3, #0
   181cc:	adds	ip, ip, #1
   181d0:	adc	lr, lr, #0
   181d4:	stm	r1, {r2, r3, ip, lr}
   181d8:	pop	{fp, lr}
   181dc:	b	12634 <free@plt>

000181e0 <free_token_cpar@@Base>:
   181e0:	push	{fp, lr}
   181e4:	mov	fp, sp
   181e8:	movw	r1, #448	; 0x1c0
   181ec:	movt	r1, #3
   181f0:	ldm	r1, {r2, r3, ip, lr}
   181f4:	adds	r2, r2, #1
   181f8:	adc	r3, r3, #0
   181fc:	adds	ip, ip, #1
   18200:	adc	lr, lr, #0
   18204:	stm	r1, {r2, r3, ip, lr}
   18208:	pop	{fp, lr}
   1820c:	b	12634 <free@plt>

00018210 <free_token_obra@@Base>:
   18210:	push	{fp, lr}
   18214:	mov	fp, sp
   18218:	movw	r1, #464	; 0x1d0
   1821c:	movt	r1, #3
   18220:	ldm	r1, {r2, r3, ip, lr}
   18224:	adds	r2, r2, #1
   18228:	adc	r3, r3, #0
   1822c:	adds	ip, ip, #1
   18230:	adc	lr, lr, #0
   18234:	stm	r1, {r2, r3, ip, lr}
   18238:	pop	{fp, lr}
   1823c:	b	12634 <free@plt>

00018240 <free_token_cbra@@Base>:
   18240:	push	{fp, lr}
   18244:	mov	fp, sp
   18248:	movw	r1, #480	; 0x1e0
   1824c:	movt	r1, #3
   18250:	ldm	r1, {r2, r3, ip, lr}
   18254:	adds	r2, r2, #1
   18258:	adc	r3, r3, #0
   1825c:	adds	ip, ip, #1
   18260:	adc	lr, lr, #0
   18264:	stm	r1, {r2, r3, ip, lr}
   18268:	pop	{fp, lr}
   1826c:	b	12634 <free@plt>

00018270 <free_token_return@@Base>:
   18270:	push	{fp, lr}
   18274:	mov	fp, sp
   18278:	movw	r1, #496	; 0x1f0
   1827c:	movt	r1, #3
   18280:	ldm	r1, {r2, r3, ip, lr}
   18284:	adds	r2, r2, #1
   18288:	adc	r3, r3, #0
   1828c:	adds	ip, ip, #1
   18290:	adc	lr, lr, #0
   18294:	stm	r1, {r2, r3, ip, lr}
   18298:	pop	{fp, lr}
   1829c:	b	12634 <free@plt>

000182a0 <free_token_semicolon@@Base>:
   182a0:	push	{fp, lr}
   182a4:	mov	fp, sp
   182a8:	movw	r1, #512	; 0x200
   182ac:	movt	r1, #3
   182b0:	ldm	r1, {r2, r3, ip, lr}
   182b4:	adds	r2, r2, #1
   182b8:	adc	r3, r3, #0
   182bc:	adds	ip, ip, #1
   182c0:	adc	lr, lr, #0
   182c4:	stm	r1, {r2, r3, ip, lr}
   182c8:	pop	{fp, lr}
   182cc:	b	12634 <free@plt>

000182d0 <free_token_eof@@Base>:
   182d0:	push	{fp, lr}
   182d4:	mov	fp, sp
   182d8:	movw	r1, #528	; 0x210
   182dc:	movt	r1, #3
   182e0:	ldm	r1, {r2, r3, ip, lr}
   182e4:	adds	r2, r2, #1
   182e8:	adc	r3, r3, #0
   182ec:	adds	ip, ip, #1
   182f0:	adc	lr, lr, #0
   182f4:	stm	r1, {r2, r3, ip, lr}
   182f8:	pop	{fp, lr}
   182fc:	b	12634 <free@plt>

00018300 <free_token_if@@Base>:
   18300:	push	{fp, lr}
   18304:	mov	fp, sp
   18308:	movw	r1, #544	; 0x220
   1830c:	movt	r1, #3
   18310:	ldm	r1, {r2, r3, ip, lr}
   18314:	adds	r2, r2, #1
   18318:	adc	r3, r3, #0
   1831c:	adds	ip, ip, #1
   18320:	adc	lr, lr, #0
   18324:	stm	r1, {r2, r3, ip, lr}
   18328:	pop	{fp, lr}
   1832c:	b	12634 <free@plt>

00018330 <free_token_else@@Base>:
   18330:	push	{fp, lr}
   18334:	mov	fp, sp
   18338:	movw	r1, #560	; 0x230
   1833c:	movt	r1, #3
   18340:	ldm	r1, {r2, r3, ip, lr}
   18344:	adds	r2, r2, #1
   18348:	adc	r3, r3, #0
   1834c:	adds	ip, ip, #1
   18350:	adc	lr, lr, #0
   18354:	stm	r1, {r2, r3, ip, lr}
   18358:	pop	{fp, lr}
   1835c:	b	12634 <free@plt>

00018360 <free_token_boolean_op@@Base>:
   18360:	push	{r4, r5, fp, lr}
   18364:	add	fp, sp, #8
   18368:	mov	r4, r0
   1836c:	movw	r5, #576	; 0x240
   18370:	movt	r5, #3
   18374:	ldrd	r0, [r5]
   18378:	adds	r0, r0, #1
   1837c:	adc	r1, r1, #0
   18380:	strd	r0, [r5]
   18384:	ldr	r0, [r4, #4]
   18388:	mov	r1, #16
   1838c:	cmp	r0, #0
   18390:	movwne	r1, #8
   18394:	mov	r2, r5
   18398:	ldr	r1, [r2, r1]!
   1839c:	adds	r1, r1, #1
   183a0:	str	r1, [r2]
   183a4:	ldr	r1, [r2, #4]
   183a8:	adc	r1, r1, #0
   183ac:	str	r1, [r2, #4]
   183b0:	cmp	r0, #0
   183b4:	beq	183cc <free_token_boolean_op@@Base+0x6c>
   183b8:	ldrd	r2, [r5, #24]
   183bc:	adds	r2, r2, #1
   183c0:	adc	r3, r3, #0
   183c4:	strd	r2, [r5, #24]
   183c8:	bl	12634 <free@plt>
   183cc:	ldrd	r0, [r5, #32]
   183d0:	adds	r0, r0, #1
   183d4:	adc	r1, r1, #0
   183d8:	strd	r0, [r5, #32]
   183dc:	mov	r0, r4
   183e0:	pop	{r4, r5, fp, lr}
   183e4:	b	12634 <free@plt>
   183e8:	push	{r4, r5, r6, lr}
   183ec:	sub	sp, sp, #8
   183f0:	movw	r0, #56784	; 0xddd0
   183f4:	movt	r0, #1
   183f8:	movw	r1, #52836	; 0xce64
   183fc:	movt	r1, #1
   18400:	movw	r2, #10327	; 0x2857
   18404:	movt	r2, #23326	; 0x5b1e
   18408:	bl	19bc8 <next@@Base+0x13a4>
   1840c:	movw	r0, #58000	; 0xe290
   18410:	movt	r0, #1
   18414:	add	r4, r0, #4
   18418:	mov	r5, #0
   1841c:	movw	r6, #57472	; 0xe080
   18420:	movt	r6, #1
   18424:	mov	r3, r6
   18428:	ldr	r0, [r3, r5]!
   1842c:	ldr	r1, [r3, #16]
   18430:	str	r1, [sp]
   18434:	ldmib	r3, {r1, r2}
   18438:	ldrb	r3, [r3, #12]
   1843c:	bl	1a32c <next@@Base+0x1b08>
   18440:	ldrd	r0, [r4, #-4]
   18444:	bl	1abe0 <next@@Base+0x23bc>
   18448:	add	r5, r5, #20
   1844c:	add	r4, r4, #8
   18450:	cmp	r5, #520	; 0x208
   18454:	bne	18424 <free_token_boolean_op@@Base+0xc4>
   18458:	bl	1b35c <next@@Base+0x2b38>
   1845c:	add	sp, sp, #8
   18460:	pop	{r4, r5, r6, lr}
   18464:	b	1c0c8 <next@@Base+0x38a4>
   18468:	push	{fp, lr}
   1846c:	bl	183e8 <free_token_boolean_op@@Base+0x88>
   18470:	vmov.i32	q8, #0	; 0x00000000
   18474:	movw	r0, #192	; 0xc0
   18478:	movt	r0, #3
   1847c:	vst1.64	{d16-d17}, [r0]
   18480:	movw	r0, #176	; 0xb0
   18484:	movt	r0, #3
   18488:	vst1.64	{d16-d17}, [r0]
   1848c:	movw	r0, #208	; 0xd0
   18490:	movt	r0, #3
   18494:	vst1.64	{d16-d17}, [r0]
   18498:	movw	r0, #224	; 0xe0
   1849c:	movt	r0, #3
   184a0:	vst1.64	{d16-d17}, [r0]
   184a4:	movw	r0, #240	; 0xf0
   184a8:	movt	r0, #3
   184ac:	vst1.64	{d16-d17}, [r0]
   184b0:	movw	r0, #256	; 0x100
   184b4:	movt	r0, #3
   184b8:	vst1.64	{d16-d17}, [r0]
   184bc:	movw	r0, #272	; 0x110
   184c0:	movt	r0, #3
   184c4:	vst1.64	{d16-d17}, [r0]
   184c8:	movw	r0, #288	; 0x120
   184cc:	movt	r0, #3
   184d0:	vst1.64	{d16-d17}, [r0]
   184d4:	movw	r0, #304	; 0x130
   184d8:	movt	r0, #3
   184dc:	vst1.64	{d16-d17}, [r0]
   184e0:	movw	r0, #320	; 0x140
   184e4:	movt	r0, #3
   184e8:	vst1.64	{d16-d17}, [r0]
   184ec:	movw	r0, #336	; 0x150
   184f0:	movt	r0, #3
   184f4:	vst1.64	{d16-d17}, [r0]
   184f8:	movw	r0, #352	; 0x160
   184fc:	movt	r0, #3
   18500:	vst1.64	{d16-d17}, [r0]
   18504:	movw	r0, #368	; 0x170
   18508:	movt	r0, #3
   1850c:	vst1.64	{d16-d17}, [r0]
   18510:	movw	r0, #384	; 0x180
   18514:	movt	r0, #3
   18518:	vst1.64	{d16-d17}, [r0]
   1851c:	movw	r0, #400	; 0x190
   18520:	movt	r0, #3
   18524:	vst1.64	{d16-d17}, [r0]
   18528:	movw	r0, #416	; 0x1a0
   1852c:	movt	r0, #3
   18530:	vst1.64	{d16-d17}, [r0]
   18534:	movw	r0, #432	; 0x1b0
   18538:	movt	r0, #3
   1853c:	vst1.64	{d16-d17}, [r0]
   18540:	movw	r0, #448	; 0x1c0
   18544:	movt	r0, #3
   18548:	vst1.64	{d16-d17}, [r0]
   1854c:	movw	r0, #464	; 0x1d0
   18550:	movt	r0, #3
   18554:	vst1.64	{d16-d17}, [r0]
   18558:	movw	r0, #480	; 0x1e0
   1855c:	movt	r0, #3
   18560:	vst1.64	{d16-d17}, [r0]
   18564:	movw	r0, #496	; 0x1f0
   18568:	movt	r0, #3
   1856c:	vst1.64	{d16-d17}, [r0]
   18570:	movw	r0, #512	; 0x200
   18574:	movt	r0, #3
   18578:	vst1.64	{d16-d17}, [r0]
   1857c:	movw	r0, #528	; 0x210
   18580:	movt	r0, #3
   18584:	vst1.64	{d16-d17}, [r0]
   18588:	movw	r0, #544	; 0x220
   1858c:	movt	r0, #3
   18590:	vst1.64	{d16-d17}, [r0]
   18594:	movw	r0, #560	; 0x230
   18598:	movt	r0, #3
   1859c:	vst1.64	{d16-d17}, [r0]
   185a0:	movw	r0, #576	; 0x240
   185a4:	movt	r0, #3
   185a8:	mov	r1, #0
   185ac:	str	r1, [r0, #32]
   185b0:	add	r2, r0, #16
   185b4:	vst1.64	{d16-d17}, [r2 :128]
   185b8:	mov	r2, #36	; 0x24
   185bc:	vst1.64	{d16-d17}, [r0 :128], r2
   185c0:	str	r1, [r0]
   185c4:	pop	{fp, pc}
   185c8:	movw	r0, #33768	; 0x83e8
   185cc:	movt	r0, #1
   185d0:	movw	r1, #33896	; 0x8468
   185d4:	movt	r1, #1
   185d8:	b	1c578 <__gcov_flush@@Base+0xb4>

000185dc <init_lexer@@Base>:
   185dc:	push	{r4, sl, fp, lr}
   185e0:	add	fp, sp, #8
   185e4:	movw	r2, #624	; 0x270
   185e8:	movt	r2, #3
   185ec:	ldm	r2, {r3, ip, lr}
   185f0:	ldr	r4, [r2, #12]
   185f4:	adds	r3, r3, #1
   185f8:	adc	ip, ip, #0
   185fc:	adds	lr, lr, #1
   18600:	adc	r4, r4, #0
   18604:	stm	r2, {r3, ip, lr}
   18608:	str	r4, [r2, #12]
   1860c:	mov	r2, #0
   18610:	stm	r0, {r1, r2}
   18614:	str	r2, [r0, #8]
   18618:	pop	{r4, sl, fp, pc}

0001861c <destroy_lexer@@Base>:
   1861c:	push	{r4, sl, fp, lr}
   18620:	add	fp, sp, #8
   18624:	movw	r4, #640	; 0x280
   18628:	movt	r4, #3
   1862c:	ldrd	r2, [r4]
   18630:	adds	r2, r2, #1
   18634:	adc	r3, r3, #0
   18638:	strd	r2, [r4]
   1863c:	ldr	r0, [r0, #4]
   18640:	mov	r1, #16
   18644:	cmp	r0, #0
   18648:	movwne	r1, #8
   1864c:	mov	r2, r4
   18650:	ldr	r1, [r2, r1]!
   18654:	adds	r1, r1, #1
   18658:	str	r1, [r2]
   1865c:	ldr	r1, [r2, #4]
   18660:	adc	r1, r1, #0
   18664:	str	r1, [r2, #4]
   18668:	cmp	r0, #0
   1866c:	beq	18684 <destroy_lexer@@Base+0x68>
   18670:	ldrd	r2, [r4, #24]
   18674:	adds	r2, r2, #1
   18678:	adc	r3, r3, #0
   1867c:	strd	r2, [r4, #24]
   18680:	bl	18698 <free_stack_base@@Base>
   18684:	ldrd	r0, [r4, #32]
   18688:	adds	r0, r0, #1
   1868c:	adc	r1, r1, #0
   18690:	strd	r0, [r4, #32]
   18694:	pop	{r4, sl, fp, pc}

00018698 <free_stack_base@@Base>:
   18698:	push	{fp, lr}
   1869c:	mov	fp, sp
   186a0:	movw	r1, #680	; 0x2a8
   186a4:	movt	r1, #3
   186a8:	ldm	r1, {r2, r3, ip, lr}
   186ac:	adds	r2, r2, #1
   186b0:	adc	r3, r3, #0
   186b4:	adds	ip, ip, #1
   186b8:	adc	lr, lr, #0
   186bc:	stm	r1, {r2, r3, ip, lr}
   186c0:	pop	{fp, lr}
   186c4:	b	12634 <free@plt>

000186c8 <push_back@@Base>:
   186c8:	push	{r4, r5, r6, sl, fp, lr}
   186cc:	add	fp, sp, #16
   186d0:	mov	r6, r1
   186d4:	mov	r5, r0
   186d8:	movw	r0, #696	; 0x2b8
   186dc:	movt	r0, #3
   186e0:	ldm	r0, {r1, r2, r3, r4}
   186e4:	adds	r1, r1, #1
   186e8:	adc	r2, r2, #0
   186ec:	adds	r3, r3, #1
   186f0:	adc	r4, r4, #0
   186f4:	stm	r0, {r1, r2, r3, r4}
   186f8:	mov	r0, #8
   186fc:	bl	126c4 <malloc@plt>
   18700:	ldr	r1, [r5, #4]
   18704:	stm	r0, {r1, r6}
   18708:	str	r0, [r5, #4]
   1870c:	pop	{r4, r5, r6, sl, fp, pc}

00018710 <get_char@@Base>:
   18710:	push	{fp, lr}
   18714:	mov	fp, sp
   18718:	movw	r1, #712	; 0x2c8
   1871c:	movt	r1, #3
   18720:	ldm	r1, {r2, r3, ip, lr}
   18724:	adds	r2, r2, #1
   18728:	adc	r3, r3, #0
   1872c:	adds	ip, ip, #1
   18730:	adc	lr, lr, #0
   18734:	stm	r1, {r2, r3, ip, lr}
   18738:	ldr	r1, [r0]
   1873c:	ldr	r2, [r0, #8]
   18740:	add	r3, r2, #1
   18744:	str	r3, [r0, #8]
   18748:	ldrb	r0, [r1, r2]
   1874c:	pop	{fp, pc}

00018750 <push_back_chars@@Base>:
   18750:	push	{r4, r5, fp, lr}
   18754:	add	fp, sp, #8
   18758:	movw	ip, #736	; 0x2e0
   1875c:	movt	ip, #3
   18760:	ldrd	r4, [ip]
   18764:	adds	r4, r4, #1
   18768:	adc	r5, r5, #0
   1876c:	strd	r4, [ip]
   18770:	ldr	r3, [r0, #8]
   18774:	mov	r5, #16
   18778:	cmp	r3, r1
   1877c:	movwcs	r5, #8
   18780:	mov	r2, ip
   18784:	ldr	r5, [r2, r5]!
   18788:	adds	r5, r5, #1
   1878c:	str	r5, [r2]
   18790:	ldr	r5, [r2, #4]
   18794:	adc	r5, r5, #0
   18798:	str	r5, [r2, #4]
   1879c:	cmp	r3, r1
   187a0:	bcc	187c8 <push_back_chars@@Base+0x78>
   187a4:	ldr	r2, [ip, #24]
   187a8:	ldr	r5, [ip, #28]
   187ac:	adds	r2, r2, #1
   187b0:	adc	r5, r5, #0
   187b4:	str	r2, [ip, #24]
   187b8:	str	r5, [ip, #28]
   187bc:	sub	r1, r3, r1
   187c0:	str	r1, [r0, #8]
   187c4:	pop	{r4, r5, fp, pc}
   187c8:	movw	r0, #61664	; 0xf0e0
   187cc:	movt	r0, #2
   187d0:	ldr	r3, [r0]
   187d4:	movw	r0, #58208	; 0xe360
   187d8:	movt	r0, #1
   187dc:	mov	r1, #32
   187e0:	mov	r2, #1
   187e4:	bl	126a0 <fwrite@plt>
   187e8:	mov	r0, #1
   187ec:	bl	12700 <exit@plt>

000187f0 <push_back_one_char@@Base>:
   187f0:	push	{fp, lr}
   187f4:	mov	fp, sp
   187f8:	movw	r1, #768	; 0x300
   187fc:	movt	r1, #3
   18800:	ldm	r1, {r2, r3, ip, lr}
   18804:	adds	r2, r2, #1
   18808:	adc	r3, r3, #0
   1880c:	adds	ip, ip, #1
   18810:	adc	lr, lr, #0
   18814:	stm	r1, {r2, r3, ip, lr}
   18818:	mov	r1, #1
   1881c:	pop	{fp, lr}
   18820:	b	18750 <push_back_chars@@Base>

00018824 <next@@Base>:
   18824:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18828:	add	fp, sp, #28
   1882c:	sub	sp, sp, #524	; 0x20c
   18830:	mov	r4, r0
   18834:	movw	r7, #784	; 0x310
   18838:	movt	r7, #3
   1883c:	ldrd	r0, [r7]
   18840:	adds	r0, r0, #1
   18844:	adc	r1, r1, #0
   18848:	strd	r0, [r7]
   1884c:	ldr	r0, [r4, #4]
   18850:	mov	r1, #16
   18854:	cmp	r0, #0
   18858:	movwne	r1, #8
   1885c:	mov	r2, r7
   18860:	ldr	r1, [r2, r1]!
   18864:	adds	r1, r1, #1
   18868:	str	r1, [r2]
   1886c:	ldr	r1, [r2, #4]
   18870:	adc	r1, r1, #0
   18874:	str	r1, [r2, #4]
   18878:	cmp	r0, #0
   1887c:	beq	188ac <next@@Base+0x88>
   18880:	ldrd	r2, [r7, #24]
   18884:	adds	r2, r2, #1
   18888:	adc	r3, r3, #0
   1888c:	strd	r2, [r7, #24]
   18890:	ldr	r1, [r0]
   18894:	str	r1, [r4, #4]
   18898:	ldr	r6, [r0, #4]
   1889c:	mov	r1, #0
   188a0:	str	r1, [r0, #4]
   188a4:	bl	18698 <free_stack_base@@Base>
   188a8:	b	18d90 <next@@Base+0x56c>
   188ac:	ldrd	r0, [r7, #32]
   188b0:	adds	r0, r0, #1
   188b4:	adc	r1, r1, #0
   188b8:	strd	r0, [r7, #32]
   188bc:	mov	r0, r4
   188c0:	bl	18710 <get_char@@Base>
   188c4:	mov	r6, r0
   188c8:	mov	r0, #48	; 0x30
   188cc:	cmp	r6, #0
   188d0:	movwne	r0, #40	; 0x28
   188d4:	mov	r1, r7
   188d8:	ldr	r0, [r1, r0]!
   188dc:	adds	r0, r0, #1
   188e0:	str	r0, [r1]
   188e4:	ldr	r0, [r1, #4]
   188e8:	adc	r0, r0, #0
   188ec:	str	r0, [r1, #4]
   188f0:	cmp	r6, #0
   188f4:	beq	18d68 <next@@Base+0x544>
   188f8:	mov	sl, #0
   188fc:	movw	r5, #58368	; 0xe400
   18900:	movt	r5, #1
   18904:	add	r9, r5, #8
   18908:	mov	r8, #0
   1890c:	mov	r0, #0
   18910:	str	r0, [sp, #4]
   18914:	b	18c24 <next@@Base+0x400>
   18918:	cmp	r2, #48	; 0x30
   1891c:	mov	r0, #176	; 0xb0
   18920:	movweq	r0, #168	; 0xa8
   18924:	mov	r1, r7
   18928:	ldr	r0, [r1, r0]!
   1892c:	adds	r0, r0, #1
   18930:	str	r0, [r1]
   18934:	ldr	r0, [r1, #4]
   18938:	adc	r0, r0, #0
   1893c:	str	r0, [r1, #4]
   18940:	cmp	r2, #48	; 0x30
   18944:	beq	1932c <next@@Base+0xb08>
   18948:	mov	r0, #200	; 0xc8
   1894c:	movwhi	r0, #192	; 0xc0
   18950:	mov	r1, r7
   18954:	ldr	r0, [r1, r0]!
   18958:	adds	r0, r0, #1
   1895c:	str	r0, [r1]
   18960:	ldr	r0, [r1, #4]
   18964:	adc	r0, r0, #0
   18968:	str	r0, [r1, #4]
   1896c:	cmp	r2, #49	; 0x31
   18970:	bcc	19354 <next@@Base+0xb30>
   18974:	cmp	r2, #58	; 0x3a
   18978:	mov	r0, #216	; 0xd8
   1897c:	movwcc	r0, #208	; 0xd0
   18980:	mov	r1, r7
   18984:	ldr	r0, [r1, r0]!
   18988:	adds	r0, r0, #1
   1898c:	str	r0, [r1]
   18990:	ldr	r0, [r1, #4]
   18994:	adc	r0, r0, #0
   18998:	str	r0, [r1, #4]
   1899c:	cmp	r2, #57	; 0x39
   189a0:	bhi	189d0 <next@@Base+0x1ac>
   189a4:	add	r0, sp, #8
   189a8:	ldr	r2, [sp, #4]
   189ac:	strb	r6, [r0, r2]
   189b0:	ldrd	r0, [r7, #224]	; 0xe0
   189b4:	adds	r0, r0, #1
   189b8:	adc	r1, r1, #0
   189bc:	strd	r0, [r7, #224]	; 0xe0
   189c0:	add	r2, r2, #1
   189c4:	str	r2, [sp, #4]
   189c8:	mov	r8, #1
   189cc:	b	18d08 <next@@Base+0x4e4>
   189d0:	mov	ip, r5
   189d4:	ldrd	r0, [r7, #240]	; 0xf0
   189d8:	ldr	r3, [r7, #264]	; 0x108
   189dc:	ldr	r5, [r7, #268]	; 0x10c
   189e0:	adds	r0, r0, #1
   189e4:	adc	r1, r1, #0
   189e8:	adds	r3, r3, #1
   189ec:	str	r3, [r7, #264]	; 0x108
   189f0:	strd	r0, [r7, #240]	; 0xf0
   189f4:	adc	r0, r5, #0
   189f8:	str	r0, [r7, #268]	; 0x10c
   189fc:	cmp	r2, #123	; 0x7b
   18a00:	mov	r0, #288	; 0x120
   18a04:	movweq	r0, #280	; 0x118
   18a08:	mov	r1, r7
   18a0c:	ldr	r0, [r1, r0]!
   18a10:	adds	r0, r0, #1
   18a14:	str	r0, [r1]
   18a18:	ldr	r0, [r1, #4]
   18a1c:	adc	r0, r0, #0
   18a20:	str	r0, [r1, #4]
   18a24:	cmp	r2, #123	; 0x7b
   18a28:	beq	19404 <next@@Base+0xbe0>
   18a2c:	cmp	r2, #125	; 0x7d
   18a30:	mov	r0, #312	; 0x138
   18a34:	movweq	r0, #304	; 0x130
   18a38:	mov	r1, r7
   18a3c:	ldr	r0, [r1, r0]!
   18a40:	adds	r0, r0, #1
   18a44:	str	r0, [r1]
   18a48:	ldr	r0, [r1, #4]
   18a4c:	adc	r0, r0, #0
   18a50:	str	r0, [r1, #4]
   18a54:	cmp	r2, #125	; 0x7d
   18a58:	beq	19430 <next@@Base+0xc0c>
   18a5c:	cmp	r2, #59	; 0x3b
   18a60:	mov	r0, #336	; 0x150
   18a64:	movweq	r0, #328	; 0x148
   18a68:	mov	r1, r7
   18a6c:	ldr	r0, [r1, r0]!
   18a70:	adds	r0, r0, #1
   18a74:	str	r0, [r1]
   18a78:	ldr	r0, [r1, #4]
   18a7c:	adc	r0, r0, #0
   18a80:	str	r0, [r1, #4]
   18a84:	cmp	r2, #59	; 0x3b
   18a88:	beq	1945c <next@@Base+0xc38>
   18a8c:	cmp	r2, #101	; 0x65
   18a90:	mov	r0, #360	; 0x168
   18a94:	movweq	r0, #352	; 0x160
   18a98:	mov	r1, r7
   18a9c:	ldr	r0, [r1, r0]!
   18aa0:	adds	r0, r0, #1
   18aa4:	str	r0, [r1]
   18aa8:	ldr	r0, [r1, #4]
   18aac:	adc	r0, r0, #0
   18ab0:	str	r0, [r1, #4]
   18ab4:	cmp	r2, #101	; 0x65
   18ab8:	bne	18af4 <next@@Base+0x2d0>
   18abc:	add	r0, sp, #8
   18ac0:	ldr	r2, [sp, #4]
   18ac4:	strb	r6, [r0, r2]
   18ac8:	ldr	r0, [r7, #368]	; 0x170
   18acc:	ldr	r1, [r7, #372]	; 0x174
   18ad0:	adds	r0, r0, #1
   18ad4:	adc	r1, r1, #0
   18ad8:	str	r0, [r7, #368]	; 0x170
   18adc:	str	r1, [r7, #372]	; 0x174
   18ae0:	add	r2, r2, #1
   18ae4:	str	r2, [sp, #4]
   18ae8:	mov	r8, #5
   18aec:	mov	r5, ip
   18af0:	b	18d08 <next@@Base+0x4e4>
   18af4:	cmp	r2, #105	; 0x69
   18af8:	mov	r0, #384	; 0x180
   18afc:	movweq	r0, #376	; 0x178
   18b00:	mov	r1, r7
   18b04:	ldr	r0, [r1, r0]!
   18b08:	adds	r0, r0, #1
   18b0c:	str	r0, [r1]
   18b10:	ldr	r0, [r1, #4]
   18b14:	adc	r0, r0, #0
   18b18:	str	r0, [r1, #4]
   18b1c:	cmp	r2, #105	; 0x69
   18b20:	mov	r5, ip
   18b24:	bne	18b5c <next@@Base+0x338>
   18b28:	add	r0, sp, #8
   18b2c:	ldr	r2, [sp, #4]
   18b30:	strb	r6, [r0, r2]
   18b34:	ldr	r0, [r7, #392]	; 0x188
   18b38:	ldr	r1, [r7, #396]	; 0x18c
   18b3c:	adds	r0, r0, #1
   18b40:	adc	r1, r1, #0
   18b44:	str	r0, [r7, #392]	; 0x188
   18b48:	str	r1, [r7, #396]	; 0x18c
   18b4c:	add	r2, r2, #1
   18b50:	str	r2, [sp, #4]
   18b54:	mov	r8, #2
   18b58:	b	18d08 <next@@Base+0x4e4>
   18b5c:	cmp	r2, #109	; 0x6d
   18b60:	mov	r0, #408	; 0x198
   18b64:	movweq	r0, #400	; 0x190
   18b68:	mov	r1, r7
   18b6c:	ldr	r0, [r1, r0]!
   18b70:	adds	r0, r0, #1
   18b74:	str	r0, [r1]
   18b78:	ldr	r0, [r1, #4]
   18b7c:	adc	r0, r0, #0
   18b80:	str	r0, [r1, #4]
   18b84:	cmp	r2, #109	; 0x6d
   18b88:	bne	18bc0 <next@@Base+0x39c>
   18b8c:	add	r0, sp, #8
   18b90:	ldr	r2, [sp, #4]
   18b94:	strb	r6, [r0, r2]
   18b98:	ldr	r0, [r7, #416]	; 0x1a0
   18b9c:	ldr	r1, [r7, #420]	; 0x1a4
   18ba0:	adds	r0, r0, #1
   18ba4:	adc	r1, r1, #0
   18ba8:	str	r0, [r7, #416]	; 0x1a0
   18bac:	str	r1, [r7, #420]	; 0x1a4
   18bb0:	add	r2, r2, #1
   18bb4:	str	r2, [sp, #4]
   18bb8:	mov	r8, #3
   18bbc:	b	18d08 <next@@Base+0x4e4>
   18bc0:	cmp	r2, #114	; 0x72
   18bc4:	mov	r0, #432	; 0x1b0
   18bc8:	movweq	r0, #424	; 0x1a8
   18bcc:	mov	r1, r7
   18bd0:	ldr	r0, [r1, r0]!
   18bd4:	adds	r0, r0, #1
   18bd8:	str	r0, [r1]
   18bdc:	ldr	r0, [r1, #4]
   18be0:	adc	r0, r0, #0
   18be4:	str	r0, [r1, #4]
   18be8:	cmp	r2, #114	; 0x72
   18bec:	bne	19764 <next@@Base+0xf40>
   18bf0:	add	r0, sp, #8
   18bf4:	ldr	r2, [sp, #4]
   18bf8:	strb	r6, [r0, r2]
   18bfc:	ldr	r0, [r7, #440]	; 0x1b8
   18c00:	ldr	r1, [r7, #444]	; 0x1bc
   18c04:	adds	r0, r0, #1
   18c08:	adc	r1, r1, #0
   18c0c:	str	r0, [r7, #440]	; 0x1b8
   18c10:	str	r1, [r7, #444]	; 0x1bc
   18c14:	add	r2, r2, #1
   18c18:	str	r2, [sp, #4]
   18c1c:	mov	r8, #4
   18c20:	b	18d08 <next@@Base+0x4e4>
   18c24:	movw	r0, #61652	; 0xf0d4
   18c28:	movt	r0, #2
   18c2c:	str	sl, [r0]
   18c30:	cmp	r8, #5
   18c34:	bhi	18d14 <next@@Base+0x4f0>
   18c38:	add	r0, pc, #0
   18c3c:	ldr	pc, [r0, r8, lsl #2]
   18c40:	andeq	r8, r1, r8, asr ip
   18c44:			; <UNDEFINED> instruction: 0x00018db4
   18c48:	strdeq	r9, [r1], -r4
   18c4c:	andeq	r8, r1, r0, ror lr
   18c50:	andeq	r8, r1, ip, lsl #31
   18c54:	andeq	r9, r1, r0, lsr #3
   18c58:	mov	r0, r9
   18c5c:	bl	19a58 <next@@Base+0x1234>
   18c60:	uxtb	r2, r6
   18c64:	cmp	r2, #9
   18c68:	mov	r0, #120	; 0x78
   18c6c:	movweq	r0, #112	; 0x70
   18c70:	mov	r1, r7
   18c74:	ldr	r0, [r1, r0]!
   18c78:	adds	r0, r0, #1
   18c7c:	str	r0, [r1]
   18c80:	ldr	r0, [r1, #4]
   18c84:	adc	r0, r0, #0
   18c88:	str	r0, [r1, #4]
   18c8c:	cmp	r2, #9
   18c90:	beq	18cf4 <next@@Base+0x4d0>
   18c94:	cmp	r2, #32
   18c98:	mov	r0, #136	; 0x88
   18c9c:	movweq	r0, #128	; 0x80
   18ca0:	mov	r1, r7
   18ca4:	ldr	r0, [r1, r0]!
   18ca8:	adds	r0, r0, #1
   18cac:	str	r0, [r1]
   18cb0:	ldr	r0, [r1, #4]
   18cb4:	adc	r0, r0, #0
   18cb8:	str	r0, [r1, #4]
   18cbc:	cmp	r2, #32
   18cc0:	beq	18cf4 <next@@Base+0x4d0>
   18cc4:	cmp	r2, #10
   18cc8:	mov	r0, #152	; 0x98
   18ccc:	movweq	r0, #144	; 0x90
   18cd0:	mov	r1, r7
   18cd4:	ldr	r0, [r1, r0]!
   18cd8:	adds	r0, r0, #1
   18cdc:	str	r0, [r1]
   18ce0:	ldr	r0, [r1, #4]
   18ce4:	adc	r0, r0, #0
   18ce8:	str	r0, [r1, #4]
   18cec:	cmp	r2, #10
   18cf0:	bne	18918 <next@@Base+0xf4>
   18cf4:	ldrd	r0, [r7, #160]	; 0xa0
   18cf8:	adds	r0, r0, #1
   18cfc:	adc	r1, r1, #0
   18d00:	strd	r0, [r7, #160]	; 0xa0
   18d04:	mov	r8, #0
   18d08:	mov	r0, r4
   18d0c:	bl	18710 <get_char@@Base>
   18d10:	mov	r6, r0
   18d14:	mov	r0, r5
   18d18:	bl	19a58 <next@@Base+0x1234>
   18d1c:	ldr	r0, [r7, #984]	; 0x3d8
   18d20:	ldr	r1, [r7, #988]	; 0x3dc
   18d24:	adds	r0, r0, #1
   18d28:	adc	r1, r1, #0
   18d2c:	str	r0, [r7, #984]	; 0x3d8
   18d30:	str	r1, [r7, #988]	; 0x3dc
   18d34:	uxtb	r0, r6
   18d38:	cmp	r0, #0
   18d3c:	mov	r1, #48	; 0x30
   18d40:	movwne	r1, #40	; 0x28
   18d44:	mov	r2, r7
   18d48:	ldr	r1, [r2, r1]!
   18d4c:	adds	r1, r1, #1
   18d50:	str	r1, [r2]
   18d54:	ldr	r1, [r2, #4]
   18d58:	adc	r1, r1, #0
   18d5c:	str	r1, [r2, #4]
   18d60:	cmp	r0, #0
   18d64:	bne	18c24 <next@@Base+0x400>
   18d68:	ldr	r0, [r7, #992]	; 0x3e0
   18d6c:	ldr	r1, [r7, #996]	; 0x3e4
   18d70:	adds	r0, r0, #1
   18d74:	adc	r1, r1, #0
   18d78:	str	r0, [r7, #992]	; 0x3e0
   18d7c:	str	r1, [r7, #996]	; 0x3e4
   18d80:	mov	r0, #4
   18d84:	bl	126c4 <malloc@plt>
   18d88:	mov	r6, r0
   18d8c:	bl	18044 <init_token_eof@@Base>
   18d90:	ldr	r0, [r7, #1000]	; 0x3e8
   18d94:	ldr	r1, [r7, #1004]	; 0x3ec
   18d98:	adds	r0, r0, #1
   18d9c:	adc	r1, r1, #0
   18da0:	str	r0, [r7, #1000]	; 0x3e8
   18da4:	str	r1, [r7, #1004]	; 0x3ec
   18da8:	mov	r0, r6
   18dac:	sub	sp, fp, #28
   18db0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18db4:	add	r8, r5, #16
   18db8:	mov	r0, r8
   18dbc:	bl	19a58 <next@@Base+0x1234>
   18dc0:	sub	r0, r6, #48	; 0x30
   18dc4:	uxtb	r0, r0
   18dc8:	mov	r1, #704	; 0x2c0
   18dcc:	cmp	r0, #10
   18dd0:	movwcc	r1, #696	; 0x2b8
   18dd4:	mov	r2, r7
   18dd8:	ldr	r1, [r2, r1]!
   18ddc:	adds	r1, r1, #1
   18de0:	str	r1, [r2]
   18de4:	ldr	r1, [r2, #4]
   18de8:	adc	r1, r1, #0
   18dec:	str	r1, [r2, #4]
   18df0:	add	r9, sp, #8
   18df4:	cmp	r0, #9
   18df8:	bhi	19290 <next@@Base+0xa6c>
   18dfc:	ldr	r5, [sp, #4]
   18e00:	strb	r6, [r9, r5]
   18e04:	ldr	r0, [r7, #712]	; 0x2c8
   18e08:	ldr	r1, [r7, #716]	; 0x2cc
   18e0c:	adds	r0, r0, #1
   18e10:	adc	r1, r1, #0
   18e14:	str	r0, [r7, #712]	; 0x2c8
   18e18:	str	r1, [r7, #716]	; 0x2cc
   18e1c:	mov	r0, r4
   18e20:	bl	18710 <get_char@@Base>
   18e24:	mov	r6, r0
   18e28:	mov	r0, r8
   18e2c:	bl	19a58 <next@@Base+0x1234>
   18e30:	sub	r0, r6, #48	; 0x30
   18e34:	uxtb	r0, r0
   18e38:	cmp	r0, #10
   18e3c:	mov	r1, #704	; 0x2c0
   18e40:	movwcc	r1, #696	; 0x2b8
   18e44:	mov	r2, r7
   18e48:	ldr	r1, [r2, r1]!
   18e4c:	adds	r1, r1, #1
   18e50:	str	r1, [r2]
   18e54:	ldr	r1, [r2, #4]
   18e58:	adc	r1, r1, #0
   18e5c:	str	r1, [r2, #4]
   18e60:	add	r5, r5, #1
   18e64:	cmp	r0, #10
   18e68:	bcc	18e00 <next@@Base+0x5dc>
   18e6c:	b	19294 <next@@Base+0xa70>
   18e70:	add	r0, r5, #32
   18e74:	bl	19a58 <next@@Base+0x1234>
   18e78:	uxtb	r0, r6
   18e7c:	mov	r1, #792	; 0x318
   18e80:	cmp	r0, #97	; 0x61
   18e84:	movwne	r1, #784	; 0x310
   18e88:	mov	r2, r7
   18e8c:	ldr	r1, [r2, r1]!
   18e90:	adds	r1, r1, #1
   18e94:	str	r1, [r2]
   18e98:	ldr	r1, [r2, #4]
   18e9c:	adc	r1, r1, #0
   18ea0:	str	r1, [r2, #4]
   18ea4:	cmp	r0, #97	; 0x61
   18ea8:	bne	19a08 <next@@Base+0x11e4>
   18eac:	add	r8, sp, #8
   18eb0:	ldr	r5, [sp, #4]
   18eb4:	strb	r6, [r8, r5]
   18eb8:	mov	r0, r4
   18ebc:	bl	18710 <get_char@@Base>
   18ec0:	mov	r1, #808	; 0x328
   18ec4:	cmp	r0, #105	; 0x69
   18ec8:	movwne	r1, #800	; 0x320
   18ecc:	mov	r2, r7
   18ed0:	ldr	r1, [r2, r1]!
   18ed4:	adds	r1, r1, #1
   18ed8:	str	r1, [r2]
   18edc:	ldr	r1, [r2, #4]
   18ee0:	adc	r1, r1, #0
   18ee4:	str	r1, [r2, #4]
   18ee8:	cmp	r0, #105	; 0x69
   18eec:	bne	19a08 <next@@Base+0x11e4>
   18ef0:	add	r6, r8, r5
   18ef4:	strb	r0, [r6, #1]
   18ef8:	mov	r0, r4
   18efc:	bl	18710 <get_char@@Base>
   18f00:	mov	r1, #824	; 0x338
   18f04:	cmp	r0, #110	; 0x6e
   18f08:	movwne	r1, #816	; 0x330
   18f0c:	mov	r2, r7
   18f10:	ldr	r1, [r2, r1]!
   18f14:	adds	r1, r1, #1
   18f18:	str	r1, [r2]
   18f1c:	ldr	r1, [r2, #4]
   18f20:	adc	r1, r1, #0
   18f24:	str	r1, [r2, #4]
   18f28:	cmp	r0, #110	; 0x6e
   18f2c:	bne	19a08 <next@@Base+0x11e4>
   18f30:	add	r4, r5, #3
   18f34:	mov	r9, #0
   18f38:	strb	r9, [r8, r4]
   18f3c:	strb	r0, [r6, #2]
   18f40:	ldr	r0, [r7, #832]	; 0x340
   18f44:	ldr	r1, [r7, #836]	; 0x344
   18f48:	adds	r0, r0, #1
   18f4c:	adc	r1, r1, #0
   18f50:	str	r0, [r7, #832]	; 0x340
   18f54:	str	r1, [r7, #836]	; 0x344
   18f58:	add	r0, r5, #4
   18f5c:	bl	126c4 <malloc@plt>
   18f60:	mov	r5, r0
   18f64:	mov	r1, r8
   18f68:	mov	r2, r4
   18f6c:	bl	1276c <strncpy@plt>
   18f70:	strb	r9, [r5, r4]
   18f74:	mov	r0, #8
   18f78:	bl	126c4 <malloc@plt>
   18f7c:	mov	r6, r0
   18f80:	mov	r1, r5
   18f84:	bl	17ecc <init_token_function@@Base>
   18f88:	b	18d90 <next@@Base+0x56c>
   18f8c:	add	r0, r5, #40	; 0x28
   18f90:	bl	19a58 <next@@Base+0x1234>
   18f94:	uxtb	r0, r6
   18f98:	mov	r1, #848	; 0x350
   18f9c:	cmp	r0, #101	; 0x65
   18fa0:	movwne	r1, #840	; 0x348
   18fa4:	mov	r2, r7
   18fa8:	ldr	r1, [r2, r1]!
   18fac:	adds	r1, r1, #1
   18fb0:	str	r1, [r2]
   18fb4:	ldr	r1, [r2, #4]
   18fb8:	adc	r1, r1, #0
   18fbc:	str	r1, [r2, #4]
   18fc0:	cmp	r0, #101	; 0x65
   18fc4:	bne	19a08 <next@@Base+0x11e4>
   18fc8:	add	r5, sp, #8
   18fcc:	mov	r8, r5
   18fd0:	ldr	r5, [sp, #4]
   18fd4:	strb	r6, [r8, r5]
   18fd8:	mov	r0, r4
   18fdc:	bl	18710 <get_char@@Base>
   18fe0:	mov	r1, #864	; 0x360
   18fe4:	cmp	r0, #116	; 0x74
   18fe8:	movwne	r1, #856	; 0x358
   18fec:	mov	r2, r7
   18ff0:	ldr	r1, [r2, r1]!
   18ff4:	adds	r1, r1, #1
   18ff8:	str	r1, [r2]
   18ffc:	ldr	r1, [r2, #4]
   19000:	adc	r1, r1, #0
   19004:	str	r1, [r2, #4]
   19008:	cmp	r0, #116	; 0x74
   1900c:	bne	19a08 <next@@Base+0x11e4>
   19010:	add	r5, r8, r5
   19014:	strb	r0, [r5, #1]
   19018:	mov	r0, r4
   1901c:	bl	18710 <get_char@@Base>
   19020:	mov	r1, #880	; 0x370
   19024:	cmp	r0, #117	; 0x75
   19028:	movwne	r1, #872	; 0x368
   1902c:	mov	r2, r7
   19030:	ldr	r1, [r2, r1]!
   19034:	adds	r1, r1, #1
   19038:	str	r1, [r2]
   1903c:	ldr	r1, [r2, #4]
   19040:	adc	r1, r1, #0
   19044:	str	r1, [r2, #4]
   19048:	cmp	r0, #117	; 0x75
   1904c:	bne	19a08 <next@@Base+0x11e4>
   19050:	strb	r0, [r5, #2]
   19054:	mov	r0, r4
   19058:	bl	18710 <get_char@@Base>
   1905c:	mov	r1, #896	; 0x380
   19060:	cmp	r0, #114	; 0x72
   19064:	movwne	r1, #888	; 0x378
   19068:	mov	r2, r7
   1906c:	ldr	r1, [r2, r1]!
   19070:	adds	r1, r1, #1
   19074:	str	r1, [r2]
   19078:	ldr	r1, [r2, #4]
   1907c:	adc	r1, r1, #0
   19080:	str	r1, [r2, #4]
   19084:	cmp	r0, #114	; 0x72
   19088:	bne	19a08 <next@@Base+0x11e4>
   1908c:	strb	r0, [r5, #3]
   19090:	mov	r0, r4
   19094:	bl	18710 <get_char@@Base>
   19098:	mov	r1, #912	; 0x390
   1909c:	cmp	r0, #110	; 0x6e
   190a0:	movwne	r1, #904	; 0x388
   190a4:	mov	r2, r7
   190a8:	ldr	r1, [r2, r1]!
   190ac:	adds	r1, r1, #1
   190b0:	str	r1, [r2]
   190b4:	ldr	r1, [r2, #4]
   190b8:	adc	r1, r1, #0
   190bc:	str	r1, [r2, #4]
   190c0:	cmp	r0, #110	; 0x6e
   190c4:	bne	19a08 <next@@Base+0x11e4>
   190c8:	ldr	r0, [r7, #920]	; 0x398
   190cc:	ldr	r1, [r7, #924]	; 0x39c
   190d0:	adds	r0, r0, #1
   190d4:	adc	r1, r1, #0
   190d8:	str	r0, [r7, #920]	; 0x398
   190dc:	str	r1, [r7, #924]	; 0x39c
   190e0:	mov	r0, #4
   190e4:	bl	126c4 <malloc@plt>
   190e8:	mov	r6, r0
   190ec:	bl	17fdc <init_token_return@@Base>
   190f0:	b	18d90 <next@@Base+0x56c>
   190f4:	add	r0, r5, #24
   190f8:	bl	19a58 <next@@Base+0x1234>
   190fc:	mov	r0, #1
   19100:	movw	r1, #61652	; 0xf0d4
   19104:	movt	r1, #2
   19108:	str	r0, [r1]
   1910c:	uxtb	r0, r6
   19110:	cmp	r0, #102	; 0x66
   19114:	beq	192e0 <next@@Base+0xabc>
   19118:	mov	r1, r5
   1911c:	cmp	r0, #110	; 0x6e
   19120:	add	r5, sp, #8
   19124:	mov	r8, r5
   19128:	ldr	r5, [sp, #4]
   1912c:	bne	19a10 <next@@Base+0x11ec>
   19130:	add	r0, r1, #64	; 0x40
   19134:	bl	19a58 <next@@Base+0x1234>
   19138:	strb	r6, [r8, r5]
   1913c:	mov	r0, r4
   19140:	bl	18710 <get_char@@Base>
   19144:	mov	r1, #760	; 0x2f8
   19148:	cmp	r0, #116	; 0x74
   1914c:	movwne	r1, #752	; 0x2f0
   19150:	mov	r2, r7
   19154:	ldr	r1, [r2, r1]!
   19158:	adds	r1, r1, #1
   1915c:	str	r1, [r2]
   19160:	ldr	r1, [r2, #4]
   19164:	adc	r1, r1, #0
   19168:	str	r1, [r2, #4]
   1916c:	cmp	r0, #116	; 0x74
   19170:	bne	19a08 <next@@Base+0x11e4>
   19174:	ldr	r0, [r7, #768]	; 0x300
   19178:	ldr	r1, [r7, #772]	; 0x304
   1917c:	adds	r0, r0, #1
   19180:	adc	r1, r1, #0
   19184:	str	r0, [r7, #768]	; 0x300
   19188:	str	r1, [r7, #772]	; 0x304
   1918c:	mov	r0, #4
   19190:	bl	126c4 <malloc@plt>
   19194:	mov	r6, r0
   19198:	bl	17e58 <init_token_int_type@@Base>
   1919c:	b	18d90 <next@@Base+0x56c>
   191a0:	add	r0, r5, #48	; 0x30
   191a4:	bl	19a58 <next@@Base+0x1234>
   191a8:	uxtb	r0, r6
   191ac:	mov	r1, #936	; 0x3a8
   191b0:	cmp	r0, #108	; 0x6c
   191b4:	movwne	r1, #928	; 0x3a0
   191b8:	mov	r2, r7
   191bc:	ldr	r1, [r2, r1]!
   191c0:	adds	r1, r1, #1
   191c4:	str	r1, [r2]
   191c8:	ldr	r1, [r2, #4]
   191cc:	adc	r1, r1, #0
   191d0:	str	r1, [r2, #4]
   191d4:	cmp	r0, #108	; 0x6c
   191d8:	bne	19a08 <next@@Base+0x11e4>
   191dc:	add	r5, sp, #8
   191e0:	mov	r8, r5
   191e4:	ldr	r5, [sp, #4]
   191e8:	strb	r6, [r8, r5]
   191ec:	mov	r0, r4
   191f0:	bl	18710 <get_char@@Base>
   191f4:	mov	r1, #952	; 0x3b8
   191f8:	cmp	r0, #115	; 0x73
   191fc:	movwne	r1, #944	; 0x3b0
   19200:	mov	r2, r7
   19204:	ldr	r1, [r2, r1]!
   19208:	adds	r1, r1, #1
   1920c:	str	r1, [r2]
   19210:	ldr	r1, [r2, #4]
   19214:	adc	r1, r1, #0
   19218:	str	r1, [r2, #4]
   1921c:	cmp	r0, #115	; 0x73
   19220:	bne	19a08 <next@@Base+0x11e4>
   19224:	add	r1, r8, r5
   19228:	strb	r0, [r1, #1]
   1922c:	mov	r0, r4
   19230:	bl	18710 <get_char@@Base>
   19234:	mov	r1, #968	; 0x3c8
   19238:	cmp	r0, #101	; 0x65
   1923c:	movwne	r1, #960	; 0x3c0
   19240:	mov	r2, r7
   19244:	ldr	r1, [r2, r1]!
   19248:	adds	r1, r1, #1
   1924c:	str	r1, [r2]
   19250:	ldr	r1, [r2, #4]
   19254:	adc	r1, r1, #0
   19258:	str	r1, [r2, #4]
   1925c:	cmp	r0, #101	; 0x65
   19260:	bne	19a08 <next@@Base+0x11e4>
   19264:	ldr	r0, [r7, #976]	; 0x3d0
   19268:	ldr	r1, [r7, #980]	; 0x3d4
   1926c:	adds	r0, r0, #1
   19270:	adc	r1, r1, #0
   19274:	str	r0, [r7, #976]	; 0x3d0
   19278:	str	r1, [r7, #980]	; 0x3d4
   1927c:	mov	r0, #4
   19280:	bl	126c4 <malloc@plt>
   19284:	mov	r6, r0
   19288:	bl	180ac <init_token_else@@Base>
   1928c:	b	18d90 <next@@Base+0x56c>
   19290:	ldr	r5, [sp, #4]
   19294:	ldr	r0, [r7, #720]	; 0x2d0
   19298:	ldr	r1, [r7, #724]	; 0x2d4
   1929c:	adds	r0, r0, #1
   192a0:	adc	r1, r1, #0
   192a4:	str	r0, [r7, #720]	; 0x2d0
   192a8:	str	r1, [r7, #724]	; 0x2d4
   192ac:	mov	r0, r4
   192b0:	bl	187f0 <push_back_one_char@@Base>
   192b4:	mov	r0, #0
   192b8:	strb	r0, [r9, r5]
   192bc:	mov	r0, #8
   192c0:	bl	126c4 <malloc@plt>
   192c4:	mov	r6, r0
   192c8:	mov	r0, r9
   192cc:	bl	127c0 <atoi@plt>
   192d0:	mov	r1, r0
   192d4:	mov	r0, r6
   192d8:	bl	17e8c <init_token_int_value@@Base>
   192dc:	b	18d90 <next@@Base+0x56c>
   192e0:	add	r0, r5, #72	; 0x48
   192e4:	bl	19a58 <next@@Base+0x1234>
   192e8:	add	r0, sp, #8
   192ec:	ldr	r1, [sp, #4]
   192f0:	strb	r6, [r0, r1]
   192f4:	add	r0, r0, r1
   192f8:	mov	r1, #0
   192fc:	strb	r1, [r0, #1]
   19300:	ldr	r0, [r7, #776]	; 0x308
   19304:	ldr	r1, [r7, #780]	; 0x30c
   19308:	adds	r0, r0, #1
   1930c:	adc	r1, r1, #0
   19310:	str	r0, [r7, #776]	; 0x308
   19314:	str	r1, [r7, #780]	; 0x30c
   19318:	mov	r0, #4
   1931c:	bl	126c4 <malloc@plt>
   19320:	mov	r6, r0
   19324:	bl	18078 <init_token_if@@Base>
   19328:	b	18d90 <next@@Base+0x56c>
   1932c:	ldrd	r0, [r7, #184]	; 0xb8
   19330:	adds	r0, r0, #1
   19334:	adc	r1, r1, #0
   19338:	strd	r0, [r7, #184]	; 0xb8
   1933c:	mov	r0, #8
   19340:	bl	126c4 <malloc@plt>
   19344:	mov	r6, r0
   19348:	mov	r1, #0
   1934c:	bl	17e8c <init_token_int_value@@Base>
   19350:	b	18d90 <next@@Base+0x56c>
   19354:	mov	r0, #240	; 0xf0
   19358:	cmp	r2, #40	; 0x28
   1935c:	movweq	r0, #232	; 0xe8
   19360:	mov	r1, r7
   19364:	ldr	r0, [r1, r0]!
   19368:	adds	r0, r0, #1
   1936c:	str	r0, [r1]
   19370:	ldr	r0, [r1, #4]
   19374:	adc	r0, r0, #0
   19378:	str	r0, [r1, #4]
   1937c:	cmp	r2, #40	; 0x28
   19380:	bne	193a8 <next@@Base+0xb84>
   19384:	ldrd	r0, [r7, #248]	; 0xf8
   19388:	adds	r0, r0, #1
   1938c:	adc	r1, r1, #0
   19390:	strd	r0, [r7, #248]	; 0xf8
   19394:	mov	r0, #4
   19398:	bl	126c4 <malloc@plt>
   1939c:	mov	r6, r0
   193a0:	bl	17f0c <init_token_opar@@Base>
   193a4:	b	18d90 <next@@Base+0x56c>
   193a8:	mov	r0, #264	; 0x108
   193ac:	cmp	r2, #41	; 0x29
   193b0:	movweq	r0, #256	; 0x100
   193b4:	mov	r1, r7
   193b8:	ldr	r0, [r1, r0]!
   193bc:	adds	r0, r0, #1
   193c0:	str	r0, [r1]
   193c4:	ldr	r0, [r1, #4]
   193c8:	adc	r0, r0, #0
   193cc:	str	r0, [r1, #4]
   193d0:	cmp	r2, #41	; 0x29
   193d4:	bne	19488 <next@@Base+0xc64>
   193d8:	ldr	r0, [r7, #272]	; 0x110
   193dc:	ldr	r1, [r7, #276]	; 0x114
   193e0:	adds	r0, r0, #1
   193e4:	adc	r1, r1, #0
   193e8:	str	r0, [r7, #272]	; 0x110
   193ec:	str	r1, [r7, #276]	; 0x114
   193f0:	mov	r0, #4
   193f4:	bl	126c4 <malloc@plt>
   193f8:	mov	r6, r0
   193fc:	bl	17f40 <init_token_cpar@@Base>
   19400:	b	18d90 <next@@Base+0x56c>
   19404:	ldr	r0, [r7, #296]	; 0x128
   19408:	ldr	r1, [r7, #300]	; 0x12c
   1940c:	adds	r0, r0, #1
   19410:	adc	r1, r1, #0
   19414:	str	r0, [r7, #296]	; 0x128
   19418:	str	r1, [r7, #300]	; 0x12c
   1941c:	mov	r0, #4
   19420:	bl	126c4 <malloc@plt>
   19424:	mov	r6, r0
   19428:	bl	17f74 <init_token_obra@@Base>
   1942c:	b	18d90 <next@@Base+0x56c>
   19430:	ldr	r0, [r7, #320]	; 0x140
   19434:	ldr	r1, [r7, #324]	; 0x144
   19438:	adds	r0, r0, #1
   1943c:	adc	r1, r1, #0
   19440:	str	r0, [r7, #320]	; 0x140
   19444:	str	r1, [r7, #324]	; 0x144
   19448:	mov	r0, #4
   1944c:	bl	126c4 <malloc@plt>
   19450:	mov	r6, r0
   19454:	bl	17fa8 <init_token_cbra@@Base>
   19458:	b	18d90 <next@@Base+0x56c>
   1945c:	ldr	r0, [r7, #344]	; 0x158
   19460:	ldr	r1, [r7, #348]	; 0x15c
   19464:	adds	r0, r0, #1
   19468:	adc	r1, r1, #0
   1946c:	str	r0, [r7, #344]	; 0x158
   19470:	str	r1, [r7, #348]	; 0x15c
   19474:	mov	r0, #4
   19478:	bl	126c4 <malloc@plt>
   1947c:	mov	r6, r0
   19480:	bl	18010 <init_token_semicolon@@Base>
   19484:	b	18d90 <next@@Base+0x56c>
   19488:	ldr	r0, [r7, #408]	; 0x198
   1948c:	ldr	r1, [r7, #412]	; 0x19c
   19490:	adds	r3, r0, #1
   19494:	adc	ip, r1, #0
   19498:	ldr	r1, [r7, #384]	; 0x180
   1949c:	ldr	r5, [r7, #388]	; 0x184
   194a0:	adds	r1, r1, #1
   194a4:	adc	lr, r5, #0
   194a8:	ldr	r0, [r7, #360]	; 0x168
   194ac:	ldr	r5, [r7, #364]	; 0x16c
   194b0:	adds	r0, r0, #1
   194b4:	adc	r8, r5, #0
   194b8:	ldr	r5, [r7, #336]	; 0x150
   194bc:	adds	r5, r5, #1
   194c0:	str	r5, [r7, #336]	; 0x150
   194c4:	str	r0, [r7, #360]	; 0x168
   194c8:	str	r1, [r7, #384]	; 0x180
   194cc:	str	r3, [r7, #408]	; 0x198
   194d0:	ldr	r0, [r7, #340]	; 0x154
   194d4:	adc	r9, r0, #0
   194d8:	ldr	r1, [r7, #288]	; 0x120
   194dc:	ldr	r3, [r7, #292]	; 0x124
   194e0:	ldr	r5, [r7, #312]	; 0x138
   194e4:	ldr	r0, [r7, #316]	; 0x13c
   194e8:	adds	r5, r5, #1
   194ec:	str	r5, [r7, #312]	; 0x138
   194f0:	adc	r0, r0, #0
   194f4:	adds	r1, r1, #1
   194f8:	adc	r3, r3, #0
   194fc:	ldr	r5, [r7, #432]	; 0x1b0
   19500:	adds	r5, r5, #1
   19504:	str	r5, [r7, #432]	; 0x1b0
   19508:	str	r1, [r7, #288]	; 0x120
   1950c:	str	r3, [r7, #292]	; 0x124
   19510:	str	r0, [r7, #316]	; 0x13c
   19514:	str	r9, [r7, #340]	; 0x154
   19518:	str	r8, [r7, #364]	; 0x16c
   1951c:	str	lr, [r7, #388]	; 0x184
   19520:	str	ip, [r7, #412]	; 0x19c
   19524:	ldr	r0, [r7, #436]	; 0x1b4
   19528:	adc	r0, r0, #0
   1952c:	str	r0, [r7, #436]	; 0x1b4
   19530:	mov	r0, #456	; 0x1c8
   19534:	cmp	r2, #33	; 0x21
   19538:	movweq	r0, #448	; 0x1c0
   1953c:	mov	r1, r7
   19540:	ldr	r0, [r1, r0]!
   19544:	adds	r0, r0, #1
   19548:	str	r0, [r1]
   1954c:	ldr	r0, [r1, #4]
   19550:	adc	r0, r0, #0
   19554:	str	r0, [r1, #4]
   19558:	cmp	r2, #33	; 0x21
   1955c:	bne	195ec <next@@Base+0xdc8>
   19560:	add	r0, sp, #8
   19564:	ldr	r1, [sp, #4]
   19568:	strb	r6, [r0, r1]
   1956c:	mov	r0, r4
   19570:	bl	18710 <get_char@@Base>
   19574:	mov	r8, r0
   19578:	mov	r5, #472	; 0x1d8
   1957c:	cmp	r0, #61	; 0x3d
   19580:	movwne	r5, #464	; 0x1d0
   19584:	mov	r0, #8
   19588:	bl	126c4 <malloc@plt>
   1958c:	mov	r6, r0
   19590:	mov	r0, r7
   19594:	ldr	r1, [r0, r5]!
   19598:	adds	r1, r1, #1
   1959c:	str	r1, [r0]
   195a0:	ldr	r1, [r0, #4]
   195a4:	adc	r1, r1, #0
   195a8:	str	r1, [r0, #4]
   195ac:	cmp	r8, #61	; 0x3d
   195b0:	beq	1970c <next@@Base+0xee8>
   195b4:	ldr	r0, [r7, #480]	; 0x1e0
   195b8:	ldr	r1, [r7, #484]	; 0x1e4
   195bc:	adds	r0, r0, #1
   195c0:	adc	r1, r1, #0
   195c4:	str	r0, [r7, #480]	; 0x1e0
   195c8:	str	r1, [r7, #484]	; 0x1e4
   195cc:	mov	r0, r4
   195d0:	bl	187f0 <push_back_one_char@@Base>
   195d4:	mov	r0, #2
   195d8:	bl	126c4 <malloc@plt>
   195dc:	mov	r1, r0
   195e0:	ldrb	r2, [sp, #8]
   195e4:	strb	r2, [r0], #1
   195e8:	b	19740 <next@@Base+0xf1c>
   195ec:	ldr	r0, [r7, #584]	; 0x248
   195f0:	ldr	r1, [r7, #588]	; 0x24c
   195f4:	adds	ip, r0, #1
   195f8:	adc	lr, r1, #0
   195fc:	ldr	r3, [r7, #512]	; 0x200
   19600:	ldr	r5, [r7, #516]	; 0x204
   19604:	ldr	r0, [r7, #528]	; 0x210
   19608:	ldr	r1, [r7, #532]	; 0x214
   1960c:	adds	r8, r0, #1
   19610:	adc	r1, r1, #0
   19614:	adds	r3, r3, #1
   19618:	adc	r5, r5, #0
   1961c:	ldr	r0, [r7, #624]	; 0x270
   19620:	adds	r0, r0, #1
   19624:	str	r0, [r7, #624]	; 0x270
   19628:	str	r3, [r7, #512]	; 0x200
   1962c:	str	r5, [r7, #516]	; 0x204
   19630:	str	r8, [r7, #528]	; 0x210
   19634:	str	r1, [r7, #532]	; 0x214
   19638:	str	ip, [r7, #584]	; 0x248
   1963c:	str	lr, [r7, #588]	; 0x24c
   19640:	ldr	r0, [r7, #628]	; 0x274
   19644:	adc	r0, r0, #0
   19648:	str	r0, [r7, #628]	; 0x274
   1964c:	mov	r0, #664	; 0x298
   19650:	cmp	r2, #38	; 0x26
   19654:	movweq	r0, #656	; 0x290
   19658:	mov	r1, r7
   1965c:	ldr	r0, [r1, r0]!
   19660:	adds	r0, r0, #1
   19664:	str	r0, [r1]
   19668:	ldr	r0, [r1, #4]
   1966c:	adc	r0, r0, #0
   19670:	str	r0, [r1, #4]
   19674:	cmp	r2, #38	; 0x26
   19678:	add	r0, sp, #8
   1967c:	ldr	r1, [sp, #4]
   19680:	bne	19a38 <next@@Base+0x1214>
   19684:	strb	r6, [r0, r1]
   19688:	mov	r0, r4
   1968c:	bl	18710 <get_char@@Base>
   19690:	mov	r4, r0
   19694:	mov	r5, #680	; 0x2a8
   19698:	cmp	r0, #38	; 0x26
   1969c:	movwne	r5, #672	; 0x2a0
   196a0:	mov	r0, #8
   196a4:	bl	126c4 <malloc@plt>
   196a8:	mov	r6, r0
   196ac:	mov	r0, r7
   196b0:	ldr	r1, [r0, r5]!
   196b4:	adds	r1, r1, #1
   196b8:	str	r1, [r0]
   196bc:	ldr	r1, [r0, #4]
   196c0:	adc	r1, r1, #0
   196c4:	str	r1, [r0, #4]
   196c8:	cmp	r4, #38	; 0x26
   196cc:	bne	19a08 <next@@Base+0x11e4>
   196d0:	ldr	r0, [r7, #688]	; 0x2b0
   196d4:	ldr	r1, [r7, #692]	; 0x2b4
   196d8:	adds	r0, r0, #1
   196dc:	adc	r1, r1, #0
   196e0:	str	r0, [r7, #688]	; 0x2b0
   196e4:	str	r1, [r7, #692]	; 0x2b4
   196e8:	mov	r0, #3
   196ec:	bl	126c4 <malloc@plt>
   196f0:	mov	r1, r0
   196f4:	ldrb	r0, [sp, #8]
   196f8:	strb	r4, [r1, #1]
   196fc:	mov	r2, #0
   19700:	strb	r2, [r1, #2]
   19704:	strb	r0, [r1]
   19708:	b	198bc <next@@Base+0x1098>
   1970c:	ldr	r0, [r7, #488]	; 0x1e8
   19710:	ldr	r1, [r7, #492]	; 0x1ec
   19714:	adds	r0, r0, #1
   19718:	adc	r1, r1, #0
   1971c:	str	r0, [r7, #488]	; 0x1e8
   19720:	str	r1, [r7, #492]	; 0x1ec
   19724:	mov	r0, #3
   19728:	bl	126c4 <malloc@plt>
   1972c:	mov	r1, r0
   19730:	ldrb	r0, [sp, #8]
   19734:	strb	r8, [r1, #1]
   19738:	strb	r0, [r1]
   1973c:	add	r0, r1, #2
   19740:	mov	r2, #0
   19744:	strb	r2, [r0]
   19748:	ldr	r0, [r7, #496]	; 0x1f0
   1974c:	ldr	r2, [r7, #500]	; 0x1f4
   19750:	adds	r0, r0, #1
   19754:	adc	r2, r2, #0
   19758:	str	r0, [r7, #496]	; 0x1f0
   1975c:	str	r2, [r7, #500]	; 0x1f4
   19760:	b	198bc <next@@Base+0x1098>
   19764:	ldr	r0, [r7, #456]	; 0x1c8
   19768:	ldr	r1, [r7, #460]	; 0x1cc
   1976c:	adds	r0, r0, #1
   19770:	adc	r1, r1, #0
   19774:	str	r0, [r7, #456]	; 0x1c8
   19778:	str	r1, [r7, #460]	; 0x1cc
   1977c:	mov	r0, #512	; 0x200
   19780:	cmp	r2, #60	; 0x3c
   19784:	movweq	r0, #504	; 0x1f8
   19788:	mov	r1, r7
   1978c:	ldr	r0, [r1, r0]!
   19790:	adds	r0, r0, #1
   19794:	str	r0, [r1]
   19798:	ldr	r0, [r1, #4]
   1979c:	adc	r0, r0, #0
   197a0:	str	r0, [r1, #4]
   197a4:	cmp	r2, #60	; 0x3c
   197a8:	beq	197dc <next@@Base+0xfb8>
   197ac:	mov	r0, #528	; 0x210
   197b0:	cmp	r2, #62	; 0x3e
   197b4:	movweq	r0, #520	; 0x208
   197b8:	mov	r1, r7
   197bc:	ldr	r0, [r1, r0]!
   197c0:	adds	r0, r0, #1
   197c4:	str	r0, [r1]
   197c8:	ldr	r0, [r1, #4]
   197cc:	adc	r0, r0, #0
   197d0:	str	r0, [r1, #4]
   197d4:	cmp	r2, #62	; 0x3e
   197d8:	bne	198c8 <next@@Base+0x10a4>
   197dc:	add	r0, sp, #8
   197e0:	ldr	r1, [sp, #4]
   197e4:	strb	r6, [r0, r1]
   197e8:	mov	r0, r4
   197ec:	bl	18710 <get_char@@Base>
   197f0:	mov	r8, r0
   197f4:	mov	r5, #544	; 0x220
   197f8:	cmp	r0, #61	; 0x3d
   197fc:	movwne	r5, #536	; 0x218
   19800:	mov	r0, #8
   19804:	bl	126c4 <malloc@plt>
   19808:	mov	r6, r0
   1980c:	mov	r0, r7
   19810:	ldr	r1, [r0, r5]!
   19814:	adds	r1, r1, #1
   19818:	str	r1, [r0]
   1981c:	ldr	r1, [r0, #4]
   19820:	adc	r1, r1, #0
   19824:	str	r1, [r0, #4]
   19828:	cmp	r8, #61	; 0x3d
   1982c:	beq	19868 <next@@Base+0x1044>
   19830:	ldr	r0, [r7, #552]	; 0x228
   19834:	ldr	r1, [r7, #556]	; 0x22c
   19838:	adds	r0, r0, #1
   1983c:	adc	r1, r1, #0
   19840:	str	r0, [r7, #552]	; 0x228
   19844:	str	r1, [r7, #556]	; 0x22c
   19848:	mov	r0, r4
   1984c:	bl	187f0 <push_back_one_char@@Base>
   19850:	mov	r0, #2
   19854:	bl	126c4 <malloc@plt>
   19858:	mov	r1, r0
   1985c:	ldrb	r2, [sp, #8]
   19860:	strb	r2, [r0], #1
   19864:	b	1989c <next@@Base+0x1078>
   19868:	ldr	r0, [r7, #560]	; 0x230
   1986c:	ldr	r1, [r7, #564]	; 0x234
   19870:	adds	r0, r0, #1
   19874:	adc	r1, r1, #0
   19878:	str	r0, [r7, #560]	; 0x230
   1987c:	str	r1, [r7, #564]	; 0x234
   19880:	mov	r0, #3
   19884:	bl	126c4 <malloc@plt>
   19888:	mov	r1, r0
   1988c:	ldrb	r0, [sp, #8]
   19890:	strb	r8, [r1, #1]
   19894:	strb	r0, [r1]
   19898:	add	r0, r1, #2
   1989c:	mov	r2, #0
   198a0:	strb	r2, [r0]
   198a4:	ldr	r0, [r7, #568]	; 0x238
   198a8:	ldr	r2, [r7, #572]	; 0x23c
   198ac:	adds	r0, r0, #1
   198b0:	adc	r2, r2, #0
   198b4:	str	r0, [r7, #568]	; 0x238
   198b8:	str	r2, [r7, #572]	; 0x23c
   198bc:	mov	r0, r6
   198c0:	bl	180e0 <init_token_boolean_op@@Base>
   198c4:	b	18d90 <next@@Base+0x56c>
   198c8:	mov	r0, #584	; 0x248
   198cc:	cmp	r2, #61	; 0x3d
   198d0:	movweq	r0, #576	; 0x240
   198d4:	mov	r1, r7
   198d8:	ldr	r0, [r1, r0]!
   198dc:	adds	r0, r0, #1
   198e0:	str	r0, [r1]
   198e4:	ldr	r0, [r1, #4]
   198e8:	adc	r0, r0, #0
   198ec:	str	r0, [r1, #4]
   198f0:	cmp	r2, #61	; 0x3d
   198f4:	bne	19968 <next@@Base+0x1144>
   198f8:	add	r0, sp, #8
   198fc:	ldr	r1, [sp, #4]
   19900:	strb	r6, [r0, r1]
   19904:	mov	r0, r4
   19908:	bl	18710 <get_char@@Base>
   1990c:	mov	r4, r0
   19910:	mov	r5, #600	; 0x258
   19914:	cmp	r0, #61	; 0x3d
   19918:	movwne	r5, #592	; 0x250
   1991c:	mov	r0, #8
   19920:	bl	126c4 <malloc@plt>
   19924:	mov	r6, r0
   19928:	mov	r0, r7
   1992c:	ldr	r1, [r0, r5]!
   19930:	adds	r1, r1, #1
   19934:	str	r1, [r0]
   19938:	ldr	r1, [r0, #4]
   1993c:	adc	r1, r1, #0
   19940:	str	r1, [r0, #4]
   19944:	cmp	r4, #61	; 0x3d
   19948:	bne	19a08 <next@@Base+0x11e4>
   1994c:	ldr	r0, [r7, #608]	; 0x260
   19950:	ldr	r1, [r7, #612]	; 0x264
   19954:	adds	r0, r0, #1
   19958:	adc	r1, r1, #0
   1995c:	str	r0, [r7, #608]	; 0x260
   19960:	str	r1, [r7, #612]	; 0x264
   19964:	b	196e8 <next@@Base+0xec4>
   19968:	mov	r0, #624	; 0x270
   1996c:	cmp	r2, #124	; 0x7c
   19970:	movweq	r0, #616	; 0x268
   19974:	mov	r1, r7
   19978:	ldr	r0, [r1, r0]!
   1997c:	adds	r0, r0, #1
   19980:	str	r0, [r1]
   19984:	ldr	r0, [r1, #4]
   19988:	adc	r0, r0, #0
   1998c:	str	r0, [r1, #4]
   19990:	cmp	r2, #124	; 0x7c
   19994:	bne	19a20 <next@@Base+0x11fc>
   19998:	add	r0, sp, #8
   1999c:	ldr	r1, [sp, #4]
   199a0:	strb	r6, [r0, r1]
   199a4:	mov	r0, r4
   199a8:	bl	18710 <get_char@@Base>
   199ac:	mov	r4, r0
   199b0:	mov	r5, #640	; 0x280
   199b4:	cmp	r0, #124	; 0x7c
   199b8:	movwne	r5, #632	; 0x278
   199bc:	mov	r0, #8
   199c0:	bl	126c4 <malloc@plt>
   199c4:	mov	r6, r0
   199c8:	mov	r0, r7
   199cc:	ldr	r1, [r0, r5]!
   199d0:	adds	r1, r1, #1
   199d4:	str	r1, [r0]
   199d8:	ldr	r1, [r0, #4]
   199dc:	adc	r1, r1, #0
   199e0:	str	r1, [r0, #4]
   199e4:	cmp	r4, #124	; 0x7c
   199e8:	bne	19a08 <next@@Base+0x11e4>
   199ec:	ldr	r0, [r7, #648]	; 0x288
   199f0:	ldr	r1, [r7, #652]	; 0x28c
   199f4:	adds	r0, r0, #1
   199f8:	adc	r1, r1, #0
   199fc:	str	r0, [r7, #648]	; 0x288
   19a00:	str	r1, [r7, #652]	; 0x28c
   19a04:	b	196e8 <next@@Base+0xec4>
   19a08:	mov	r0, #1
   19a0c:	bl	12700 <exit@plt>
   19a10:	add	r0, r1, #56	; 0x38
   19a14:	bl	19a58 <next@@Base+0x1234>
   19a18:	mov	r0, #1
   19a1c:	bl	12700 <exit@plt>
   19a20:	ldr	r0, [r7, #664]	; 0x298
   19a24:	ldr	r1, [r7, #668]	; 0x29c
   19a28:	adds	r0, r0, #1
   19a2c:	adc	r1, r1, #0
   19a30:	str	r0, [r7, #664]	; 0x298
   19a34:	str	r1, [r7, #668]	; 0x29c
   19a38:	movw	r0, #61664	; 0xf0e0
   19a3c:	movt	r0, #2
   19a40:	ldr	r0, [r0]
   19a44:	movw	r1, #58241	; 0xe381
   19a48:	movt	r1, #1
   19a4c:	bl	12724 <fprintf@plt>
   19a50:	mov	r0, #1
   19a54:	bl	12700 <exit@plt>
   19a58:	movw	r1, #61652	; 0xf0d4
   19a5c:	movt	r1, #2
   19a60:	ldr	r1, [r1]
   19a64:	cmn	r1, #1
   19a68:	ldrne	r0, [r0, r1, lsl #2]
   19a6c:	cmpne	r0, #0
   19a70:	bne	19a78 <next@@Base+0x1254>
   19a74:	bx	lr
   19a78:	ldrd	r2, [r0]
   19a7c:	adds	r2, r2, #1
   19a80:	adc	r3, r3, #0
   19a84:	strd	r2, [r0]
   19a88:	bx	lr
   19a8c:	push	{r4, r5, r6, lr}
   19a90:	sub	sp, sp, #8
   19a94:	movw	r0, #58720	; 0xe560
   19a98:	movt	r0, #1
   19a9c:	movw	r1, #52836	; 0xce64
   19aa0:	movt	r1, #1
   19aa4:	movw	r2, #3328	; 0xd00
   19aa8:	movt	r2, #1285	; 0x505
   19aac:	bl	19bc8 <next@@Base+0x13a4>
   19ab0:	movw	r0, #58640	; 0xe510
   19ab4:	movt	r0, #1
   19ab8:	add	r4, r0, #4
   19abc:	mov	r5, #0
   19ac0:	movw	r6, #58448	; 0xe450
   19ac4:	movt	r6, #1
   19ac8:	mov	r3, r6
   19acc:	ldr	r0, [r3, r5]!
   19ad0:	ldr	r1, [r3, #16]
   19ad4:	str	r1, [sp]
   19ad8:	ldmib	r3, {r1, r2}
   19adc:	ldrb	r3, [r3, #12]
   19ae0:	bl	1a32c <next@@Base+0x1b08>
   19ae4:	ldrd	r0, [r4, #-4]
   19ae8:	bl	1abe0 <next@@Base+0x23bc>
   19aec:	add	r5, r5, #20
   19af0:	add	r4, r4, #8
   19af4:	cmp	r5, #180	; 0xb4
   19af8:	bne	19ac8 <next@@Base+0x12a4>
   19afc:	bl	1b35c <next@@Base+0x2b38>
   19b00:	add	sp, sp, #8
   19b04:	pop	{r4, r5, r6, lr}
   19b08:	b	1c0c8 <next@@Base+0x38a4>
   19b0c:	push	{fp, lr}
   19b10:	vpush	{d8-d9}
   19b14:	bl	19a8c <next@@Base+0x1268>
   19b18:	movw	r0, #640	; 0x280
   19b1c:	movt	r0, #3
   19b20:	vmov.i32	q4, #0	; 0x00000000
   19b24:	add	r1, r0, #16
   19b28:	vst1.64	{d8-d9}, [r1 :128]
   19b2c:	movw	r1, #624	; 0x270
   19b30:	movt	r1, #3
   19b34:	vst1.64	{d8-d9}, [r1]
   19b38:	mov	r1, #0
   19b3c:	str	r1, [r0, #32]
   19b40:	movw	r2, #680	; 0x2a8
   19b44:	movt	r2, #3
   19b48:	vst1.64	{d8-d9}, [r2]
   19b4c:	movw	r2, #696	; 0x2b8
   19b50:	movt	r2, #3
   19b54:	vst1.64	{d8-d9}, [r2]
   19b58:	movw	r2, #712	; 0x2c8
   19b5c:	movt	r2, #3
   19b60:	vst1.64	{d8-d9}, [r2]
   19b64:	movw	r2, #768	; 0x300
   19b68:	movt	r2, #3
   19b6c:	vst1.64	{d8-d9}, [r2]
   19b70:	mov	r2, #36	; 0x24
   19b74:	vst1.64	{d8-d9}, [r0 :128], r2
   19b78:	str	r1, [r0]
   19b7c:	movw	r0, #736	; 0x2e0
   19b80:	movt	r0, #3
   19b84:	vst1.64	{d8-d9}, [r0 :128]!
   19b88:	vst1.64	{d8-d9}, [r0 :128]
   19b8c:	movw	r0, #784	; 0x310
   19b90:	movt	r0, #3
   19b94:	mov	r1, #0
   19b98:	mov	r2, #1008	; 0x3f0
   19b9c:	bl	12754 <memset@plt>
   19ba0:	movw	r0, #1792	; 0x700
   19ba4:	movt	r0, #3
   19ba8:	vst1.64	{d8-d9}, [r0]
   19bac:	vpop	{d8-d9}
   19bb0:	pop	{fp, pc}
   19bb4:	movw	r0, #39564	; 0x9a8c
   19bb8:	movt	r0, #1
   19bbc:	movw	r1, #39692	; 0x9b0c
   19bc0:	movt	r1, #1
   19bc4:	b	1c578 <__gcov_flush@@Base+0xb4>
   19bc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19bcc:	add	fp, sp, #28
   19bd0:	sub	sp, sp, #36	; 0x24
   19bd4:	mov	r9, r1
   19bd8:	mov	r6, r0
   19bdc:	add	r0, sp, #28
   19be0:	add	r1, sp, #32
   19be4:	mov	r8, r2
   19be8:	bl	1c924 <__gcov_flush@@Base+0x460>
   19bec:	cmp	r0, #0
   19bf0:	beq	19c34 <next@@Base+0x1410>
   19bf4:	mov	r4, r0
   19bf8:	mov	r0, r6
   19bfc:	ldr	r5, [sp, #32]
   19c00:	bl	1270c <strlen@plt>
   19c04:	add	r0, r5, r0
   19c08:	add	r0, r0, #2
   19c0c:	bl	126c4 <malloc@plt>
   19c10:	mov	r7, r0
   19c14:	ldr	r0, [sp, #28]
   19c18:	mov	r1, r6
   19c1c:	mov	r2, r4
   19c20:	str	r0, [sp]
   19c24:	mov	r0, r7
   19c28:	mov	r3, r5
   19c2c:	bl	1c9b8 <__gcov_flush@@Base+0x4f4>
   19c30:	b	19c40 <next@@Base+0x141c>
   19c34:	mov	r0, r6
   19c38:	bl	1267c <strdup@plt>
   19c3c:	mov	r7, r0
   19c40:	ldr	r0, [pc, #1548]	; 1a254 <next@@Base+0x1a30>
   19c44:	ldr	r6, [pc, #1548]	; 1a258 <next@@Base+0x1a34>
   19c48:	mov	r1, #2
   19c4c:	add	r0, pc, r0
   19c50:	add	r6, pc, r6
   19c54:	str	r7, [r0]
   19c58:	mov	r0, r7
   19c5c:	mov	r4, #0
   19c60:	strb	r4, [r6]
   19c64:	bl	126ac <open64@plt>
   19c68:	ldr	r5, [pc, #1516]	; 1a25c <next@@Base+0x1a38>
   19c6c:	cmn	r0, #1
   19c70:	add	r5, pc, r5
   19c74:	str	r0, [r5]
   19c78:	beq	19c88 <next@@Base+0x1464>
   19c7c:	ldr	r6, [pc, #1500]	; 1a260 <next@@Base+0x1a3c>
   19c80:	add	r6, pc, r6
   19c84:	b	19ce4 <next@@Base+0x14c0>
   19c88:	mov	r0, #1
   19c8c:	strb	r0, [r6]
   19c90:	ldr	r0, [pc, #1508]	; 1a27c <next@@Base+0x1a58>
   19c94:	mov	r1, #66	; 0x42
   19c98:	mov	r2, #420	; 0x1a4
   19c9c:	ldr	r0, [pc, r0]
   19ca0:	bl	126ac <open64@plt>
   19ca4:	ldr	r6, [pc, #1492]	; 1a280 <next@@Base+0x1a5c>
   19ca8:	cmn	r0, #1
   19cac:	str	r0, [r5]
   19cb0:	add	r6, pc, r6
   19cb4:	bne	19ce4 <next@@Base+0x14c0>
   19cb8:	ldr	r0, [pc, #1476]	; 1a284 <next@@Base+0x1a60>
   19cbc:	ldr	r0, [pc, r0]
   19cc0:	bl	1c68c <__gcov_flush@@Base+0x1c8>
   19cc4:	ldr	r0, [pc, #1468]	; 1a288 <next@@Base+0x1a64>
   19cc8:	mov	r1, #66	; 0x42
   19ccc:	mov	r2, #420	; 0x1a4
   19cd0:	ldr	r0, [pc, r0]
   19cd4:	bl	126ac <open64@plt>
   19cd8:	cmn	r0, #1
   19cdc:	str	r0, [r5]
   19ce0:	beq	1a20c <next@@Base+0x19e8>
   19ce4:	str	r9, [sp, #20]
   19ce8:	bl	1c758 <__gcov_flush@@Base+0x294>
   19cec:	ldr	r0, [pc, #1392]	; 1a264 <next@@Base+0x1a40>
   19cf0:	mov	r1, r6
   19cf4:	ldr	r0, [pc, r0]
   19cf8:	bl	125f8 <fdopen@plt>
   19cfc:	ldr	r5, [pc, #1380]	; 1a268 <next@@Base+0x1a44>
   19d00:	ldr	r9, [pc, #1380]	; 1a26c <next@@Base+0x1a48>
   19d04:	ldr	r1, [pc, #1380]	; 1a270 <next@@Base+0x1a4c>
   19d08:	ldr	sl, [pc, #1380]	; 1a274 <next@@Base+0x1a50>
   19d0c:	add	r5, pc, r5
   19d10:	add	r9, pc, r9
   19d14:	add	r1, pc, r1
   19d18:	add	sl, pc, sl
   19d1c:	str	r4, [r5]
   19d20:	str	r4, [r5, #4]
   19d24:	str	r4, [r9]
   19d28:	str	r4, [r9, #4]
   19d2c:	str	r0, [r1]
   19d30:	str	r4, [sl]
   19d34:	ldr	r6, [pc, #1340]	; 1a278 <next@@Base+0x1a54>
   19d38:	ldr	r2, [pc, #1292]	; 1a24c <next@@Base+0x1a28>
   19d3c:	str	r8, [sp, #24]
   19d40:	add	r6, pc, r6
   19d44:	ldrb	r1, [r6]
   19d48:	mov	r6, r2
   19d4c:	cmp	r1, #1
   19d50:	bne	19d78 <next@@Base+0x1554>
   19d54:	mov	r0, #131072	; 0x20000
   19d58:	mov	r4, #131072	; 0x20000
   19d5c:	bl	126c4 <malloc@plt>
   19d60:	mov	r1, #0
   19d64:	str	r4, [r5]
   19d68:	str	r1, [r5, #4]
   19d6c:	mov	r8, r0
   19d70:	str	r0, [sl]
   19d74:	b	19f08 <next@@Base+0x16e4>
   19d78:	mov	r1, #0
   19d7c:	mov	r2, #2
   19d80:	mov	r8, #0
   19d84:	bl	127cc <fseek@plt>
   19d88:	ldr	r0, [pc, #1288]	; 1a298 <next@@Base+0x1a74>
   19d8c:	ldr	r0, [pc, r0]
   19d90:	bl	12664 <ftell@plt>
   19d94:	mov	r2, r0
   19d98:	ldr	r0, [pc, #1276]	; 1a29c <next@@Base+0x1a78>
   19d9c:	asr	r3, r2, #31
   19da0:	add	r0, pc, r0
   19da4:	cmp	r2, #0
   19da8:	strd	r2, [r0]
   19dac:	beq	19e7c <next@@Base+0x1658>
   19db0:	ldr	r0, [pc, #1256]	; 1a2a0 <next@@Base+0x1a7c>
   19db4:	mov	r1, r2
   19db8:	mov	r2, #3
   19dbc:	mov	r3, #1
   19dc0:	ldr	r0, [pc, r0]
   19dc4:	str	r8, [sp, #8]
   19dc8:	str	r8, [sp, #12]
   19dcc:	str	r0, [sp]
   19dd0:	mov	r0, #0
   19dd4:	bl	12658 <mmap64@plt>
   19dd8:	ldr	r1, [pc, #1220]	; 1a2a4 <next@@Base+0x1a80>
   19ddc:	cmn	r0, #1
   19de0:	add	r1, pc, r1
   19de4:	str	r0, [r1]
   19de8:	beq	19e44 <next@@Base+0x1620>
   19dec:	ldr	r1, [pc, #1232]	; 1a2c4 <next@@Base+0x1aa0>
   19df0:	add	r1, pc, r1
   19df4:	ldrb	r1, [r1]
   19df8:	cmp	r1, #0
   19dfc:	beq	19e08 <next@@Base+0x15e4>
   19e00:	mov	r8, r0
   19e04:	b	19f14 <next@@Base+0x16f0>
   19e08:	ldr	ip, [r9, #4]
   19e0c:	ldr	r5, [pc, #1236]	; 1a2e8 <next@@Base+0x1ac4>
   19e10:	mov	r4, r0
   19e14:	lsr	r2, r6, #16
   19e18:	ldr	r5, [pc, r5]
   19e1c:	lsr	r1, r6, #24
   19e20:	lsr	r3, r6, #8
   19e24:	strb	r6, [r4, r5]!
   19e28:	strb	r2, [r4, #2]
   19e2c:	adds	r2, r5, #4
   19e30:	adc	ip, ip, #0
   19e34:	strb	r1, [r4, #3]
   19e38:	strb	r3, [r4, #1]
   19e3c:	stm	r9, {r2, ip}
   19e40:	b	19fdc <next@@Base+0x17b8>
   19e44:	bl	12730 <__errno_location@plt>
   19e48:	ldr	r1, [pc, #1112]	; 1a2a8 <next@@Base+0x1a84>
   19e4c:	ldr	r1, [pc, r1]
   19e50:	ldr	r0, [r0]
   19e54:	ldr	r4, [r1]
   19e58:	ldr	r7, [pc, #1100]	; 1a2ac <next@@Base+0x1a88>
   19e5c:	ldr	r7, [pc, r7]
   19e60:	bl	126dc <strerror@plt>
   19e64:	ldr	r1, [pc, #1092]	; 1a2b0 <next@@Base+0x1a8c>
   19e68:	mov	r3, r0
   19e6c:	mov	r0, r4
   19e70:	add	r1, pc, r1
   19e74:	mov	r2, r7
   19e78:	bl	12724 <fprintf@plt>
   19e7c:	str	r8, [r5]
   19e80:	str	r8, [r5, #4]
   19e84:	ldr	r0, [pc, #1064]	; 1a2b4 <next@@Base+0x1a90>
   19e88:	mov	r2, #16646144	; 0xfe0000
   19e8c:	orr	r2, r2, #-16777216	; 0xff000000
   19e90:	add	r0, pc, r0
   19e94:	mvn	r3, #0
   19e98:	str	r8, [r0]
   19e9c:	ldr	r1, [pc, #1044]	; 1a2b8 <next@@Base+0x1a94>
   19ea0:	mov	r0, #1
   19ea4:	add	r1, pc, r1
   19ea8:	strb	r0, [r1]
   19eac:	ldr	r0, [r9, #4]
   19eb0:	ldr	r1, [pc, #1028]	; 1a2bc <next@@Base+0x1a98>
   19eb4:	eor	r3, r0, r3
   19eb8:	ldr	r1, [pc, r1]
   19ebc:	eor	r2, r1, r2
   19ec0:	orrs	r2, r2, r3
   19ec4:	beq	19f04 <next@@Base+0x16e0>
   19ec8:	ldr	r2, [pc, #896]	; 1a250 <next@@Base+0x1a2c>
   19ecc:	adds	r1, r1, r2
   19ed0:	adc	r0, r0, #0
   19ed4:	mvn	r2, #0
   19ed8:	and	r7, r0, r2
   19edc:	mov	r0, #16646144	; 0xfe0000
   19ee0:	orr	r0, r0, #-16777216	; 0xff000000
   19ee4:	and	r4, r1, r0
   19ee8:	mov	r0, r4
   19eec:	bl	126c4 <malloc@plt>
   19ef0:	stm	r5, {r4, r7}
   19ef4:	mov	r8, r0
   19ef8:	ldr	r0, [pc, #960]	; 1a2c0 <next@@Base+0x1a9c>
   19efc:	add	r0, pc, r0
   19f00:	str	r8, [r0]
   19f04:	mov	r0, r8
   19f08:	mov	r1, #0
   19f0c:	mov	r2, #131072	; 0x20000
   19f10:	bl	12754 <memset@plt>
   19f14:	ldr	r0, [r9, #4]
   19f18:	ldr	r1, [pc, #936]	; 1a2c8 <next@@Base+0x1aa4>
   19f1c:	mov	sl, r5
   19f20:	mov	r7, #7
   19f24:	orr	r7, r7, #131072	; 0x20000
   19f28:	ldr	r1, [pc, r1]
   19f2c:	ldr	r4, [r5, #4]
   19f30:	ldr	r5, [pc, #916]	; 1a2cc <next@@Base+0x1aa8>
   19f34:	adds	r2, r1, #4
   19f38:	adc	r3, r0, #0
   19f3c:	ldr	r5, [pc, r5]
   19f40:	subs	r2, r5, r2
   19f44:	sbcs	r2, r4, r3
   19f48:	bcs	1a020 <next@@Base+0x17fc>
   19f4c:	adds	r1, r1, r7
   19f50:	adc	r0, r0, #0
   19f54:	subs	r1, r1, #4
   19f58:	sbc	r0, r0, #0
   19f5c:	mvn	r2, #0
   19f60:	and	r5, r0, r2
   19f64:	mov	r0, #16646144	; 0xfe0000
   19f68:	orr	r0, r0, #-16777216	; 0xff000000
   19f6c:	and	r4, r1, r0
   19f70:	mov	r0, r8
   19f74:	mov	r1, r4
   19f78:	bl	12694 <realloc@plt>
   19f7c:	strd	r4, [sl]
   19f80:	ldr	r1, [pc, #844]	; 1a2d4 <next@@Base+0x1ab0>
   19f84:	mov	r7, r6
   19f88:	lsr	r2, r6, #24
   19f8c:	add	r1, pc, r1
   19f90:	mov	r3, r0
   19f94:	str	r0, [r1]
   19f98:	ldr	r6, [pc, #824]	; 1a2d8 <next@@Base+0x1ab4>
   19f9c:	ldr	r1, [r9, #4]
   19fa0:	lsr	r5, r7, #16
   19fa4:	add	r6, pc, r6
   19fa8:	ldrb	r6, [r6]
   19fac:	ldr	r4, [pc, #808]	; 1a2dc <next@@Base+0x1ab8>
   19fb0:	ldr	r4, [pc, r4]
   19fb4:	strb	r7, [r3, r4]!
   19fb8:	strb	r2, [r3, #3]
   19fbc:	lsr	r2, r7, #8
   19fc0:	strb	r2, [r3, #1]
   19fc4:	adds	r2, r4, #4
   19fc8:	adc	ip, r1, #0
   19fcc:	cmp	r6, #1
   19fd0:	strb	r5, [r3, #2]
   19fd4:	stm	r9, {r2, ip}
   19fd8:	beq	1a060 <next@@Base+0x183c>
   19fdc:	ldr	r4, [sp, #20]
   19fe0:	mov	r5, r0
   19fe4:	mov	lr, r9
   19fe8:	ldrb	r1, [r4]
   19fec:	ldrb	r3, [r4, #1]
   19ff0:	ldrb	r7, [r4, #2]
   19ff4:	ldrb	r6, [r4, #3]
   19ff8:	strb	r1, [r5, r2]!
   19ffc:	adds	r4, r2, #4
   1a000:	adc	r1, ip, #0
   1a004:	strb	r6, [r5, #3]
   1a008:	strb	r7, [r5, #2]
   1a00c:	strb	r3, [r5, #1]
   1a010:	str	r4, [lr]
   1a014:	str	r1, [lr, #4]
   1a018:	ldr	r6, [sp, #24]
   1a01c:	b	1a1dc <next@@Base+0x19b8>
   1a020:	ldr	r1, [r9, #4]
   1a024:	ldr	r4, [pc, #676]	; 1a2d0 <next@@Base+0x1aac>
   1a028:	mov	r5, r6
   1a02c:	lsr	r0, r6, #24
   1a030:	ldr	r4, [pc, r4]
   1a034:	lsr	r2, r6, #16
   1a038:	lsr	r3, r6, #8
   1a03c:	mov	r6, r8
   1a040:	strb	r5, [r6, r4]!
   1a044:	strb	r2, [r6, #2]
   1a048:	adds	r2, r4, #4
   1a04c:	adc	ip, r1, #0
   1a050:	strb	r0, [r6, #3]
   1a054:	strb	r3, [r6, #1]
   1a058:	stm	r9, {r2, ip}
   1a05c:	mov	r0, r8
   1a060:	ldr	r7, [sl, #4]
   1a064:	ldr	r3, [pc, #628]	; 1a2e0 <next@@Base+0x1abc>
   1a068:	adds	r6, r4, #8
   1a06c:	mov	r8, r9
   1a070:	adc	r5, r1, #0
   1a074:	ldr	r3, [pc, r3]
   1a078:	mov	r9, sl
   1a07c:	subs	r3, r3, r6
   1a080:	sbcs	r3, r7, r5
   1a084:	bcs	1a128 <next@@Base+0x1904>
   1a088:	mov	r2, #7
   1a08c:	orr	r2, r2, #131072	; 0x20000
   1a090:	adds	r2, r4, r2
   1a094:	adc	r4, r1, #0
   1a098:	mov	r1, #16646144	; 0xfe0000
   1a09c:	orr	r1, r1, #-16777216	; 0xff000000
   1a0a0:	and	r6, r2, r1
   1a0a4:	mov	r1, r6
   1a0a8:	bl	12694 <realloc@plt>
   1a0ac:	ldr	sl, [pc, #568]	; 1a2ec <next@@Base+0x1ac8>
   1a0b0:	mvn	r1, #0
   1a0b4:	and	r7, r4, r1
   1a0b8:	add	sl, pc, sl
   1a0bc:	strd	r6, [r9]
   1a0c0:	str	r0, [sl]
   1a0c4:	ldr	r1, [pc, #548]	; 1a2f0 <next@@Base+0x1acc>
   1a0c8:	ldr	r2, [sp, #20]
   1a0cc:	ldr	ip, [r8, #4]
   1a0d0:	add	r1, pc, r1
   1a0d4:	mov	lr, r8
   1a0d8:	ldrb	r3, [r1]
   1a0dc:	ldrb	r1, [r2]
   1a0e0:	ldrb	r7, [r2, #1]
   1a0e4:	ldrb	r6, [r2, #2]
   1a0e8:	ldrb	r5, [r2, #3]
   1a0ec:	ldr	r2, [pc, #512]	; 1a2f4 <next@@Base+0x1ad0>
   1a0f0:	ldr	r2, [pc, r2]
   1a0f4:	adds	r4, r2, #4
   1a0f8:	strb	r1, [r0, r2]
   1a0fc:	add	r1, r0, r2
   1a100:	strb	r5, [r1, #3]
   1a104:	strb	r6, [r1, #2]
   1a108:	strb	r7, [r1, #1]
   1a10c:	adc	r1, ip, #0
   1a110:	str	r4, [lr]
   1a114:	str	r1, [lr, #4]
   1a118:	ldr	r6, [sp, #24]
   1a11c:	cmp	r3, #1
   1a120:	beq	1a170 <next@@Base+0x194c>
   1a124:	b	1a1dc <next@@Base+0x19b8>
   1a128:	ldr	r6, [sp, #20]
   1a12c:	mov	r5, r0
   1a130:	adds	r4, r2, #4
   1a134:	ldrb	r1, [r6]
   1a138:	ldrb	r3, [r6, #1]
   1a13c:	ldrb	r7, [r6, #2]
   1a140:	ldrb	r6, [r6, #3]
   1a144:	strb	r1, [r5, r2]!
   1a148:	adc	r1, ip, #0
   1a14c:	strb	r3, [r5, #1]
   1a150:	mov	r3, r8
   1a154:	strb	r6, [r5, #3]
   1a158:	strb	r7, [r5, #2]
   1a15c:	str	r4, [r3]
   1a160:	str	r1, [r3, #4]
   1a164:	ldr	r6, [sp, #24]
   1a168:	ldr	sl, [pc, #372]	; 1a2e4 <next@@Base+0x1ac0>
   1a16c:	add	sl, pc, sl
   1a170:	ldr	r7, [r9, #4]
   1a174:	ldr	r5, [pc, #380]	; 1a2f8 <next@@Base+0x1ad4>
   1a178:	adds	r3, r2, #8
   1a17c:	adc	lr, ip, #0
   1a180:	ldr	r5, [pc, r5]
   1a184:	subs	r3, r5, r3
   1a188:	sbcs	r3, r7, lr
   1a18c:	bcs	1a1d8 <next@@Base+0x19b4>
   1a190:	mov	r1, #7
   1a194:	orr	r1, r1, #131072	; 0x20000
   1a198:	adds	r1, r2, r1
   1a19c:	adc	r2, ip, #0
   1a1a0:	mvn	r3, #0
   1a1a4:	and	r5, r2, r3
   1a1a8:	mov	r2, #16646144	; 0xfe0000
   1a1ac:	orr	r2, r2, #-16777216	; 0xff000000
   1a1b0:	and	r4, r1, r2
   1a1b4:	mov	r1, r4
   1a1b8:	bl	12694 <realloc@plt>
   1a1bc:	strd	r4, [r9]
   1a1c0:	str	r0, [sl]
   1a1c4:	ldr	r1, [r8, #4]
   1a1c8:	ldr	r4, [pc, #300]	; 1a2fc <next@@Base+0x1ad8>
   1a1cc:	mov	lr, r8
   1a1d0:	ldr	r4, [pc, r4]
   1a1d4:	b	1a1dc <next@@Base+0x19b8>
   1a1d8:	mov	lr, r8
   1a1dc:	lsr	r2, r6, #24
   1a1e0:	strb	r6, [r0, r4]!
   1a1e4:	lsr	r3, r6, #16
   1a1e8:	lsr	r7, r6, #8
   1a1ec:	strb	r2, [r0, #3]
   1a1f0:	strb	r3, [r0, #2]
   1a1f4:	strb	r7, [r0, #1]
   1a1f8:	adds	r0, r4, #4
   1a1fc:	adc	r1, r1, #0
   1a200:	strd	r0, [lr]
   1a204:	sub	sp, fp, #28
   1a208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a20c:	bl	12730 <__errno_location@plt>
   1a210:	ldr	r1, [pc, #116]	; 1a28c <next@@Base+0x1a68>
   1a214:	ldr	r1, [pc, r1]
   1a218:	ldr	r0, [r0]
   1a21c:	ldr	r4, [r1]
   1a220:	ldr	r5, [pc, #104]	; 1a290 <next@@Base+0x1a6c>
   1a224:	ldr	r5, [pc, r5]
   1a228:	bl	126dc <strerror@plt>
   1a22c:	ldr	r1, [pc, #96]	; 1a294 <next@@Base+0x1a70>
   1a230:	mov	r3, r0
   1a234:	mov	r0, r4
   1a238:	add	r1, pc, r1
   1a23c:	mov	r2, r5
   1a240:	bl	12724 <fprintf@plt>
   1a244:	sub	sp, fp, #28
   1a248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a24c:	strbvs	r6, [r3, -r1, ror #8]!
   1a250:	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
   1a254:			; <UNDEFINED> instruction: 0x00016abc
   1a258:			; <UNDEFINED> instruction: 0x00016abc
   1a25c:	andeq	r5, r1, r0, ror #8
   1a260:	andeq	r4, r0, r8, asr r9
   1a264:	ldrdeq	r5, [r1], -ip
   1a268:	andeq	r6, r1, ip, lsl #20
   1a26c:	andeq	r6, r1, r0, lsl sl
   1a270:	strdeq	r6, [r1], -ip
   1a274:	strdeq	r6, [r1], -ip
   1a278:	andeq	r6, r1, ip, asr #19
   1a27c:	andeq	r6, r1, ip, ror #20
   1a280:	andeq	r4, r0, ip, lsr #18
   1a284:	andeq	r6, r1, ip, asr #20
   1a288:	andeq	r6, r1, r8, lsr sl
   1a28c:	andeq	r4, r1, r0, lsr #29
   1a290:	andeq	r6, r1, r4, ror #9
   1a294:	andeq	r4, r0, r8, lsr #7
   1a298:	andeq	r6, r1, r4, lsl #19
   1a29c:	muleq	r1, r8, r9
   1a2a0:	andeq	r5, r1, r0, lsl r3
   1a2a4:	andeq	r6, r1, r4, lsr r9
   1a2a8:	andeq	r5, r1, r8, ror #4
   1a2ac:	andeq	r6, r1, ip, lsr #17
   1a2b0:	andeq	r4, r0, sl, asr #17
   1a2b4:	andeq	r6, r1, r4, lsl #17
   1a2b8:	andeq	r6, r1, r8, ror #16
   1a2bc:	andeq	r6, r1, r8, ror #16
   1a2c0:	andeq	r6, r1, r8, lsl r8
   1a2c4:	andeq	r6, r1, ip, lsl r9
   1a2c8:	strdeq	r6, [r1], -r8
   1a2cc:	ldrdeq	r6, [r1], -ip
   1a2d0:	strdeq	r6, [r1], -r0
   1a2d4:	andeq	r6, r1, r8, lsl #15
   1a2d8:	andeq	r6, r1, r8, ror #14
   1a2dc:	andeq	r6, r1, r0, ror r7
   1a2e0:	andeq	r6, r1, r4, lsr #13
   1a2e4:	andeq	r6, r1, r8, lsr #11
   1a2e8:	andeq	r6, r1, r8, lsl #18
   1a2ec:	andeq	r6, r1, ip, asr r6
   1a2f0:	andeq	r6, r1, ip, lsr r6
   1a2f4:	andeq	r6, r1, r0, lsr r6
   1a2f8:	muleq	r1, r8, r5
   1a2fc:	andeq	r6, r1, r0, asr r5
   1a300:	ldr	r0, [r0]
   1a304:	cmn	r0, #1
   1a308:	beq	1a328 <next@@Base+0x1b04>
   1a30c:	ldr	r0, [r1, r0, lsl #2]
   1a310:	cmp	r0, #0
   1a314:	bxeq	lr
   1a318:	ldrd	r2, [r0]
   1a31c:	adds	r2, r2, #1
   1a320:	adc	r3, r3, #0
   1a324:	strd	r2, [r0]
   1a328:	bx	lr
   1a32c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a330:	add	fp, sp, #28
   1a334:	sub	sp, sp, #12
   1a338:	mov	r9, r0
   1a33c:	ldr	r0, [pc, #2000]	; 1ab14 <next@@Base+0x22f0>
   1a340:	mov	sl, #2
   1a344:	cmp	r3, #0
   1a348:	movne	sl, #3
   1a34c:	ldr	r0, [pc, r0]
   1a350:	cmp	r0, #0
   1a354:	beq	1ab0c <next@@Base+0x22e8>
   1a358:	stm	sp, {r2, r3}
   1a35c:	ldr	r0, [pc, #1972]	; 1ab18 <next@@Base+0x22f4>
   1a360:	str	r1, [sp, #8]
   1a364:	add	r0, pc, r0
   1a368:	ldrb	r0, [r0]
   1a36c:	cmp	r0, #1
   1a370:	bne	1a400 <next@@Base+0x1bdc>
   1a374:	ldr	r0, [pc, #1952]	; 1ab1c <next@@Base+0x22f8>
   1a378:	ldr	r4, [pc, #1952]	; 1ab20 <next@@Base+0x22fc>
   1a37c:	add	r0, pc, r0
   1a380:	add	r4, pc, r4
   1a384:	ldr	r0, [r0, #4]
   1a388:	ldr	r5, [pc, #1940]	; 1ab24 <next@@Base+0x2300>
   1a38c:	ldr	r5, [pc, r5]
   1a390:	ldr	r7, [r4, #4]
   1a394:	ldr	r6, [pc, #1932]	; 1ab28 <next@@Base+0x2304>
   1a398:	adds	r2, r5, #4
   1a39c:	adc	r3, r0, #0
   1a3a0:	ldr	r6, [pc, r6]
   1a3a4:	subs	r2, r6, r2
   1a3a8:	sbcs	r2, r7, r3
   1a3ac:	bcs	1a400 <next@@Base+0x1bdc>
   1a3b0:	mov	r2, #7
   1a3b4:	orr	r2, r2, #131072	; 0x20000
   1a3b8:	adds	r1, r5, r2
   1a3bc:	adc	r0, r0, #0
   1a3c0:	subs	r1, r1, #4
   1a3c4:	sbc	r0, r0, #0
   1a3c8:	mvn	r2, #0
   1a3cc:	and	r7, r0, r2
   1a3d0:	mov	r0, #16646144	; 0xfe0000
   1a3d4:	orr	r0, r0, #-16777216	; 0xff000000
   1a3d8:	ldr	r8, [pc, #1868]	; 1ab2c <next@@Base+0x2308>
   1a3dc:	and	r6, r1, r0
   1a3e0:	ldr	r0, [pc, #1864]	; 1ab30 <next@@Base+0x230c>
   1a3e4:	mov	r1, r6
   1a3e8:	add	r8, pc, r8
   1a3ec:	ldr	r0, [pc, r0]
   1a3f0:	bl	12694 <realloc@plt>
   1a3f4:	ldr	r1, [sp, #8]
   1a3f8:	strd	r6, [r4]
   1a3fc:	str	r0, [r8]
   1a400:	ldr	r3, [pc, #1836]	; 1ab34 <next@@Base+0x2310>
   1a404:	ldr	r7, [pc, #1836]	; 1ab38 <next@@Base+0x2314>
   1a408:	mov	r0, #0
   1a40c:	add	r3, pc, r3
   1a410:	mov	r2, #1
   1a414:	ldr	r7, [pc, r7]
   1a418:	ldr	r8, [pc, #1820]	; 1ab3c <next@@Base+0x2318>
   1a41c:	adds	r4, r7, #4
   1a420:	ldr	r8, [pc, r8]
   1a424:	ldr	r6, [r3, #4]
   1a428:	mov	r5, r8
   1a42c:	strb	r0, [r5, r7]!
   1a430:	strb	r2, [r5, #3]
   1a434:	strb	r0, [r5, #2]
   1a438:	strb	r0, [r5, #1]
   1a43c:	adc	r5, r6, #0
   1a440:	cmp	r1, #0
   1a444:	strd	r4, [r3]
   1a448:	beq	1a45c <next@@Base+0x1c38>
   1a44c:	mov	r0, r1
   1a450:	bl	1270c <strlen@plt>
   1a454:	add	r0, sl, r0, lsr #2
   1a458:	add	sl, r0, #2
   1a45c:	ldr	r0, [pc, #1756]	; 1ab40 <next@@Base+0x231c>
   1a460:	add	r0, pc, r0
   1a464:	ldrb	r0, [r0]
   1a468:	cmp	r0, #0
   1a46c:	beq	1a54c <next@@Base+0x1d28>
   1a470:	ldr	lr, [pc, #1744]	; 1ab48 <next@@Base+0x2324>
   1a474:	adds	r0, r7, #8
   1a478:	adc	r1, r6, #0
   1a47c:	add	lr, pc, lr
   1a480:	ldr	r2, [lr, #4]
   1a484:	ldr	r3, [pc, #1728]	; 1ab4c <next@@Base+0x2328>
   1a488:	ldr	r3, [pc, r3]
   1a48c:	subs	r0, r3, r0
   1a490:	sbcs	r0, r2, r1
   1a494:	bcs	1a79c <next@@Base+0x1f78>
   1a498:	mov	r0, #7
   1a49c:	orr	r0, r0, #131072	; 0x20000
   1a4a0:	adds	r0, r7, r0
   1a4a4:	adc	r1, r6, #0
   1a4a8:	mvn	r2, #0
   1a4ac:	and	r5, r1, r2
   1a4b0:	mov	r1, #16646144	; 0xfe0000
   1a4b4:	orr	r1, r1, #-16777216	; 0xff000000
   1a4b8:	and	r6, r0, r1
   1a4bc:	ldr	r4, [pc, #1680]	; 1ab54 <next@@Base+0x2330>
   1a4c0:	mov	r0, r8
   1a4c4:	mov	r1, r6
   1a4c8:	add	r4, pc, r4
   1a4cc:	mov	r7, lr
   1a4d0:	bl	12694 <realloc@plt>
   1a4d4:	mov	lr, r7
   1a4d8:	mov	r8, r0
   1a4dc:	str	r6, [lr]
   1a4e0:	str	r5, [lr, #4]
   1a4e4:	str	r8, [r4]
   1a4e8:	ldr	r1, [pc, #1640]	; 1ab58 <next@@Base+0x2334>
   1a4ec:	lsr	r0, sl, #24
   1a4f0:	add	r1, pc, r1
   1a4f4:	lsr	r3, sl, #16
   1a4f8:	ldrb	r2, [r1]
   1a4fc:	ldr	r1, [pc, #1624]	; 1ab5c <next@@Base+0x2338>
   1a500:	add	r1, pc, r1
   1a504:	mov	r7, r1
   1a508:	ldr	r5, [r1, #4]
   1a50c:	ldr	r4, [pc, #1612]	; 1ab60 <next@@Base+0x233c>
   1a510:	mov	r1, r8
   1a514:	ldr	r4, [pc, r4]
   1a518:	strb	sl, [r1, r4]!
   1a51c:	ldr	ip, [sp, #8]
   1a520:	strb	r0, [r1, #3]
   1a524:	lsr	r0, sl, #8
   1a528:	strb	r0, [r1, #1]
   1a52c:	adds	r0, r4, #4
   1a530:	strb	r3, [r1, #2]
   1a534:	adc	r1, r5, #0
   1a538:	mov	sl, r7
   1a53c:	cmp	r2, #1
   1a540:	strd	r0, [sl]
   1a544:	bne	1a584 <next@@Base+0x1d60>
   1a548:	b	1a7d4 <next@@Base+0x1fb0>
   1a54c:	mov	r3, r8
   1a550:	lsr	r0, sl, #24
   1a554:	strb	sl, [r3, r4]!
   1a558:	lsr	r1, sl, #16
   1a55c:	lsr	r2, sl, #8
   1a560:	strb	r0, [r3, #3]
   1a564:	strb	r1, [r3, #2]
   1a568:	strb	r2, [r3, #1]
   1a56c:	ldr	sl, [pc, #1488]	; 1ab44 <next@@Base+0x2320>
   1a570:	ldr	ip, [sp, #8]
   1a574:	adds	r0, r7, #8
   1a578:	adc	r1, r6, #0
   1a57c:	add	sl, pc, sl
   1a580:	strd	r0, [sl]
   1a584:	mov	r6, r8
   1a588:	lsr	r2, r9, #24
   1a58c:	strb	r9, [r6, r0]!
   1a590:	lsr	r3, r9, #16
   1a594:	strb	r2, [r6, #3]
   1a598:	adds	r2, r0, #4
   1a59c:	lsr	r7, r9, #8
   1a5a0:	strb	r3, [r6, #2]
   1a5a4:	adc	r3, r1, #0
   1a5a8:	strb	r7, [r6, #1]
   1a5ac:	strd	r2, [sl]
   1a5b0:	ldr	r5, [sp]
   1a5b4:	mov	r6, r8
   1a5b8:	adds	r4, r2, #4
   1a5bc:	lsr	r7, r5, #8
   1a5c0:	strb	r5, [r6, r2]!
   1a5c4:	lsr	r0, r5, #24
   1a5c8:	lsr	r1, r5, #16
   1a5cc:	strb	r7, [r6, #1]
   1a5d0:	adc	r7, r3, #0
   1a5d4:	strb	r0, [r6, #3]
   1a5d8:	strb	r1, [r6, #2]
   1a5dc:	stm	sl, {r4, r7}
   1a5e0:	ldr	r0, [sp, #4]
   1a5e4:	cmp	r0, #0
   1a5e8:	beq	1a6c0 <next@@Base+0x1e9c>
   1a5ec:	ldr	r0, [pc, #1420]	; 1ab80 <next@@Base+0x235c>
   1a5f0:	ldr	sl, [fp, #8]
   1a5f4:	add	r0, pc, r0
   1a5f8:	ldrb	r0, [r0]
   1a5fc:	cmp	r0, #1
   1a600:	bne	1a68c <next@@Base+0x1e68>
   1a604:	ldr	r9, [pc, #1400]	; 1ab84 <next@@Base+0x2360>
   1a608:	adds	r0, r2, #8
   1a60c:	adc	r1, r3, #0
   1a610:	add	r9, pc, r9
   1a614:	ldr	r6, [r9, #4]
   1a618:	ldr	r5, [pc, #1384]	; 1ab88 <next@@Base+0x2364>
   1a61c:	ldr	r5, [pc, r5]
   1a620:	subs	r0, r5, r0
   1a624:	sbcs	r0, r6, r1
   1a628:	bcs	1a68c <next@@Base+0x1e68>
   1a62c:	mov	r0, #7
   1a630:	orr	r0, r0, #131072	; 0x20000
   1a634:	adds	r0, r2, r0
   1a638:	adc	r1, r3, #0
   1a63c:	mvn	r2, #0
   1a640:	and	r5, r1, r2
   1a644:	mov	r1, #16646144	; 0xfe0000
   1a648:	orr	r1, r1, #-16777216	; 0xff000000
   1a64c:	and	r6, r0, r1
   1a650:	ldr	r4, [pc, #1332]	; 1ab8c <next@@Base+0x2368>
   1a654:	mov	r0, r8
   1a658:	mov	r1, r6
   1a65c:	add	r4, pc, r4
   1a660:	bl	12694 <realloc@plt>
   1a664:	ldr	ip, [sp, #8]
   1a668:	str	r6, [r9]
   1a66c:	str	r5, [r9, #4]
   1a670:	mov	r8, r0
   1a674:	ldr	r0, [pc, #1300]	; 1ab90 <next@@Base+0x236c>
   1a678:	str	r8, [r4]
   1a67c:	add	r0, pc, r0
   1a680:	ldr	r7, [r0, #4]
   1a684:	ldr	r4, [pc, #1288]	; 1ab94 <next@@Base+0x2370>
   1a688:	ldr	r4, [pc, r4]
   1a68c:	mov	r3, r8
   1a690:	lsr	r0, sl, #24
   1a694:	strb	sl, [r3, r4]!
   1a698:	lsr	r1, sl, #16
   1a69c:	lsr	r2, sl, #8
   1a6a0:	strb	r0, [r3, #3]
   1a6a4:	strb	r1, [r3, #2]
   1a6a8:	strb	r2, [r3, #1]
   1a6ac:	ldr	sl, [pc, #1252]	; 1ab98 <next@@Base+0x2374>
   1a6b0:	adds	r4, r4, #4
   1a6b4:	adc	r7, r7, #0
   1a6b8:	add	sl, pc, sl
   1a6bc:	stm	sl, {r4, r7}
   1a6c0:	cmp	ip, #0
   1a6c4:	beq	1ab0c <next@@Base+0x22e8>
   1a6c8:	mov	r0, ip
   1a6cc:	bl	1270c <strlen@plt>
   1a6d0:	mov	r9, #1
   1a6d4:	add	r5, r9, r0, lsr #2
   1a6d8:	ldr	r0, [pc, #1212]	; 1ab9c <next@@Base+0x2378>
   1a6dc:	add	r0, pc, r0
   1a6e0:	ldrb	r0, [r0]
   1a6e4:	cmp	r0, #1
   1a6e8:	bne	1a78c <next@@Base+0x1f68>
   1a6ec:	ldr	sl, [pc, #1196]	; 1aba0 <next@@Base+0x237c>
   1a6f0:	adds	r0, r4, #4
   1a6f4:	adc	r1, r7, #0
   1a6f8:	add	sl, pc, sl
   1a6fc:	ldr	r2, [sl, #4]
   1a700:	ldr	r3, [pc, #1180]	; 1aba4 <next@@Base+0x2380>
   1a704:	ldr	r3, [pc, r3]
   1a708:	subs	r0, r3, r0
   1a70c:	sbcs	r0, r2, r1
   1a710:	bcs	1a940 <next@@Base+0x211c>
   1a714:	mov	r0, #0
   1a718:	str	r0, [sp, #4]
   1a71c:	mov	r0, #7
   1a720:	orr	r0, r0, #131072	; 0x20000
   1a724:	adds	r0, r4, r0
   1a728:	adc	r1, r7, #0
   1a72c:	subs	r0, r0, #4
   1a730:	sbc	r1, r1, #0
   1a734:	mvn	r2, #0
   1a738:	and	r7, r1, r2
   1a73c:	mov	r1, #16646144	; 0xfe0000
   1a740:	orr	r1, r1, #-16777216	; 0xff000000
   1a744:	and	r4, r0, r1
   1a748:	ldr	r6, [pc, #1116]	; 1abac <next@@Base+0x2388>
   1a74c:	mov	r0, r8
   1a750:	mov	r1, r4
   1a754:	add	r6, pc, r6
   1a758:	bl	12694 <realloc@plt>
   1a75c:	stm	sl, {r4, r7}
   1a760:	str	r0, [r6]
   1a764:	ldr	sl, [pc, #1092]	; 1abb0 <next@@Base+0x238c>
   1a768:	mov	r8, r0
   1a76c:	add	sl, pc, sl
   1a770:	ldr	r7, [sl, #4]
   1a774:	ldr	r0, [pc, #1080]	; 1abb4 <next@@Base+0x2390>
   1a778:	add	r0, pc, r0
   1a77c:	ldrb	r9, [r0]
   1a780:	ldr	r4, [pc, #1072]	; 1abb8 <next@@Base+0x2394>
   1a784:	ldr	r4, [pc, r4]
   1a788:	b	1a950 <next@@Base+0x212c>
   1a78c:	mov	r0, #0
   1a790:	str	r0, [sp, #4]
   1a794:	mov	r9, #0
   1a798:	b	1a950 <next@@Base+0x212c>
   1a79c:	mov	r3, r8
   1a7a0:	lsr	r0, sl, #24
   1a7a4:	strb	sl, [r3, r4]!
   1a7a8:	lsr	r1, sl, #16
   1a7ac:	lsr	r2, sl, #8
   1a7b0:	strb	r0, [r3, #3]
   1a7b4:	strb	r1, [r3, #2]
   1a7b8:	strb	r2, [r3, #1]
   1a7bc:	ldr	sl, [pc, #908]	; 1ab50 <next@@Base+0x232c>
   1a7c0:	adds	r0, r7, #8
   1a7c4:	adc	r1, r6, #0
   1a7c8:	add	sl, pc, sl
   1a7cc:	ldr	ip, [sp, #8]
   1a7d0:	strd	r0, [sl]
   1a7d4:	ldr	r7, [lr, #4]
   1a7d8:	ldr	r6, [pc, #900]	; 1ab64 <next@@Base+0x2340>
   1a7dc:	adds	r2, r4, #8
   1a7e0:	adc	r3, r5, #0
   1a7e4:	ldr	r6, [pc, r6]
   1a7e8:	subs	r2, r6, r2
   1a7ec:	sbcs	r2, r7, r3
   1a7f0:	bcs	1a894 <next@@Base+0x2070>
   1a7f4:	mov	r0, #7
   1a7f8:	orr	r0, r0, #131072	; 0x20000
   1a7fc:	adds	r0, r4, r0
   1a800:	adc	r1, r5, #0
   1a804:	mvn	r2, #0
   1a808:	and	r5, r1, r2
   1a80c:	mov	r1, #16646144	; 0xfe0000
   1a810:	orr	r1, r1, #-16777216	; 0xff000000
   1a814:	and	r4, r0, r1
   1a818:	ldr	r6, [pc, #840]	; 1ab68 <next@@Base+0x2344>
   1a81c:	mov	r0, r8
   1a820:	mov	r1, r4
   1a824:	add	r6, pc, r6
   1a828:	mov	r7, lr
   1a82c:	bl	12694 <realloc@plt>
   1a830:	mov	lr, r7
   1a834:	str	r0, [r6]
   1a838:	strd	r4, [lr]
   1a83c:	mov	r8, r0
   1a840:	ldr	ip, [sp, #8]
   1a844:	ldr	r0, [pc, #800]	; 1ab6c <next@@Base+0x2348>
   1a848:	ldr	r1, [sl, #4]
   1a84c:	mov	r3, r8
   1a850:	add	r0, pc, r0
   1a854:	lsr	r2, r9, #24
   1a858:	ldrb	r7, [r0]
   1a85c:	ldr	r0, [pc, #780]	; 1ab70 <next@@Base+0x234c>
   1a860:	lsr	r6, r9, #16
   1a864:	ldr	r0, [pc, r0]
   1a868:	strb	r9, [r3, r0]!
   1a86c:	strb	r2, [r3, #3]
   1a870:	lsr	r2, r9, #8
   1a874:	strb	r2, [r3, #1]
   1a878:	adds	r2, r0, #4
   1a87c:	strb	r6, [r3, #2]
   1a880:	adc	r3, r1, #0
   1a884:	cmp	r7, #1
   1a888:	strd	r2, [sl]
   1a88c:	bne	1a5b0 <next@@Base+0x1d8c>
   1a890:	b	1a8c0 <next@@Base+0x209c>
   1a894:	mov	r6, r8
   1a898:	lsr	r2, r9, #24
   1a89c:	strb	r9, [r6, r0]!
   1a8a0:	lsr	r3, r9, #16
   1a8a4:	strb	r2, [r6, #3]
   1a8a8:	adds	r2, r0, #4
   1a8ac:	lsr	r7, r9, #8
   1a8b0:	strb	r3, [r6, #2]
   1a8b4:	adc	r3, r1, #0
   1a8b8:	strb	r7, [r6, #1]
   1a8bc:	strd	r2, [sl]
   1a8c0:	ldr	r5, [lr, #4]
   1a8c4:	ldr	r4, [pc, #680]	; 1ab74 <next@@Base+0x2350>
   1a8c8:	adds	r7, r0, #8
   1a8cc:	adc	r6, r1, #0
   1a8d0:	ldr	r4, [pc, r4]
   1a8d4:	subs	r7, r4, r7
   1a8d8:	sbcs	r7, r5, r6
   1a8dc:	bcs	1a5b0 <next@@Base+0x1d8c>
   1a8e0:	mov	r2, #7
   1a8e4:	orr	r2, r2, #131072	; 0x20000
   1a8e8:	adds	r0, r0, r2
   1a8ec:	adc	r1, r1, #0
   1a8f0:	mvn	r2, #0
   1a8f4:	and	r5, r1, r2
   1a8f8:	mov	r1, #16646144	; 0xfe0000
   1a8fc:	orr	r1, r1, #-16777216	; 0xff000000
   1a900:	and	r6, r0, r1
   1a904:	ldr	r4, [pc, #620]	; 1ab78 <next@@Base+0x2354>
   1a908:	mov	r0, r8
   1a90c:	mov	r1, r6
   1a910:	add	r4, pc, r4
   1a914:	mov	r7, lr
   1a918:	bl	12694 <realloc@plt>
   1a91c:	ldr	ip, [sp, #8]
   1a920:	str	r6, [r7]
   1a924:	str	r5, [r7, #4]
   1a928:	str	r0, [r4]
   1a92c:	ldr	r3, [sl, #4]
   1a930:	ldr	r2, [pc, #580]	; 1ab7c <next@@Base+0x2358>
   1a934:	mov	r8, r0
   1a938:	ldr	r2, [pc, r2]
   1a93c:	b	1a5b0 <next@@Base+0x1d8c>
   1a940:	mov	r0, #0
   1a944:	str	r0, [sp, #4]
   1a948:	ldr	sl, [pc, #600]	; 1aba8 <next@@Base+0x2384>
   1a94c:	add	sl, pc, sl
   1a950:	mov	r3, r8
   1a954:	ldr	r0, [sp, #8]
   1a958:	strb	r5, [r3, r4]!
   1a95c:	adds	r4, r4, #4
   1a960:	lsr	r6, r5, #24
   1a964:	lsr	r1, r5, #16
   1a968:	lsr	r2, r5, #8
   1a96c:	adc	r5, r7, #0
   1a970:	strb	r6, [r3, #3]
   1a974:	strb	r1, [r3, #2]
   1a978:	strb	r2, [r3, #1]
   1a97c:	strd	r4, [sl]
   1a980:	bl	1270c <strlen@plt>
   1a984:	mov	r7, r0
   1a988:	cmp	r9, #0
   1a98c:	beq	1aa2c <next@@Base+0x2208>
   1a990:	ldr	r6, [pc, #548]	; 1abbc <next@@Base+0x2398>
   1a994:	adds	r0, r4, r7
   1a998:	adc	r1, r5, #0
   1a99c:	add	r6, pc, r6
   1a9a0:	ldr	r2, [r6, #4]
   1a9a4:	ldr	r3, [pc, #532]	; 1abc0 <next@@Base+0x239c>
   1a9a8:	ldr	r3, [pc, r3]
   1a9ac:	subs	r3, r3, r0
   1a9b0:	sbcs	r2, r2, r1
   1a9b4:	bcs	1aa24 <next@@Base+0x2200>
   1a9b8:	mov	r2, #7
   1a9bc:	orr	r2, r2, #131072	; 0x20000
   1a9c0:	adds	r0, r0, r2
   1a9c4:	adc	r1, r1, #0
   1a9c8:	subs	r0, r0, #8
   1a9cc:	sbc	r1, r1, #0
   1a9d0:	mvn	r2, #0
   1a9d4:	and	r5, r1, r2
   1a9d8:	mov	r1, #16646144	; 0xfe0000
   1a9dc:	orr	r1, r1, #-16777216	; 0xff000000
   1a9e0:	and	r4, r0, r1
   1a9e4:	ldr	r9, [pc, #472]	; 1abc4 <next@@Base+0x23a0>
   1a9e8:	mov	r0, r8
   1a9ec:	mov	r1, r4
   1a9f0:	add	r9, pc, r9
   1a9f4:	bl	12694 <realloc@plt>
   1a9f8:	strd	r4, [r6]
   1a9fc:	str	r0, [r9]
   1aa00:	mov	r8, r0
   1aa04:	ldr	r5, [sl, #4]
   1aa08:	ldr	r0, [pc, #440]	; 1abc8 <next@@Base+0x23a4>
   1aa0c:	add	r0, pc, r0
   1aa10:	ldrb	r0, [r0]
   1aa14:	str	r0, [sp, #4]
   1aa18:	ldr	r4, [pc, #428]	; 1abcc <next@@Base+0x23a8>
   1aa1c:	ldr	r4, [pc, r4]
   1aa20:	b	1aa2c <next@@Base+0x2208>
   1aa24:	mov	r0, #1
   1aa28:	str	r0, [sp, #4]
   1aa2c:	ldr	r9, [sp, #8]
   1aa30:	add	r0, r8, r4
   1aa34:	mov	r2, r7
   1aa38:	mov	r1, r9
   1aa3c:	bl	1264c <memcpy@plt>
   1aa40:	adds	r6, r4, r7
   1aa44:	mov	r0, r9
   1aa48:	adc	r5, r5, #0
   1aa4c:	str	r6, [sl]
   1aa50:	str	r5, [sl, #4]
   1aa54:	bl	1270c <strlen@plt>
   1aa58:	and	r0, r0, #3
   1aa5c:	rsb	r4, r0, #4
   1aa60:	ldr	r0, [sp, #4]
   1aa64:	cmp	r0, #0
   1aa68:	beq	1aaf0 <next@@Base+0x22cc>
   1aa6c:	ldr	r7, [pc, #348]	; 1abd0 <next@@Base+0x23ac>
   1aa70:	adds	r0, r6, r4
   1aa74:	adc	r1, r5, #0
   1aa78:	add	r7, pc, r7
   1aa7c:	ldr	r2, [r7, #4]
   1aa80:	ldr	r3, [pc, #332]	; 1abd4 <next@@Base+0x23b0>
   1aa84:	ldr	r3, [pc, r3]
   1aa88:	subs	r3, r3, r0
   1aa8c:	sbcs	r2, r2, r1
   1aa90:	bcs	1aaf0 <next@@Base+0x22cc>
   1aa94:	mov	r2, #7
   1aa98:	orr	r2, r2, #131072	; 0x20000
   1aa9c:	adds	r0, r0, r2
   1aaa0:	adc	r1, r1, #0
   1aaa4:	subs	r0, r0, #8
   1aaa8:	sbc	r1, r1, #0
   1aaac:	mvn	r2, #0
   1aab0:	and	r5, r1, r2
   1aab4:	mov	r1, #16646144	; 0xfe0000
   1aab8:	orr	r1, r1, #-16777216	; 0xff000000
   1aabc:	and	r6, r0, r1
   1aac0:	ldr	r9, [pc, #272]	; 1abd8 <next@@Base+0x23b4>
   1aac4:	mov	r0, r8
   1aac8:	mov	r1, r6
   1aacc:	add	r9, pc, r9
   1aad0:	bl	12694 <realloc@plt>
   1aad4:	str	r6, [r7]
   1aad8:	str	r5, [r7, #4]
   1aadc:	str	r0, [r9]
   1aae0:	ldr	r5, [sl, #4]
   1aae4:	ldr	r6, [pc, #240]	; 1abdc <next@@Base+0x23b8>
   1aae8:	mov	r8, r0
   1aaec:	ldr	r6, [pc, r6]
   1aaf0:	add	r0, r8, r6
   1aaf4:	mov	r1, #0
   1aaf8:	mov	r2, r4
   1aafc:	bl	12754 <memset@plt>
   1ab00:	adds	r0, r6, r4
   1ab04:	adc	r1, r5, #0
   1ab08:	strd	r0, [sl]
   1ab0c:	sub	sp, fp, #28
   1ab10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab14:	andeq	r6, r1, r4, asr #7
   1ab18:	andeq	r6, r1, r8, lsr #7
   1ab1c:	andeq	r6, r1, r4, lsr #7
   1ab20:	muleq	r1, r8, r3
   1ab24:	muleq	r1, r4, r3
   1ab28:	andeq	r6, r1, r8, ror r3
   1ab2c:	andeq	r6, r1, ip, lsr #6
   1ab30:	andeq	r6, r1, r8, lsr #6
   1ab34:	andeq	r6, r1, r4, lsl r3
   1ab38:	andeq	r6, r1, ip, lsl #6
   1ab3c:	strdeq	r6, [r1], -r4
   1ab40:	andeq	r6, r1, ip, lsr #5
   1ab44:	andeq	r6, r1, r4, lsr #3
   1ab48:	muleq	r1, ip, r2
   1ab4c:	muleq	r1, r0, r2
   1ab50:	andeq	r5, r1, r8, asr pc
   1ab54:	andeq	r6, r1, ip, asr #4
   1ab58:	andeq	r6, r1, ip, lsl r2
   1ab5c:	andeq	r6, r1, r0, lsr #4
   1ab60:	andeq	r6, r1, ip, lsl #4
   1ab64:	andeq	r5, r1, r4, lsr pc
   1ab68:	strdeq	r5, [r1], -r0
   1ab6c:			; <UNDEFINED> instruction: 0x00015ebc
   1ab70:			; <UNDEFINED> instruction: 0x00015ebc
   1ab74:	andeq	r5, r1, r8, asr #28
   1ab78:	andeq	r5, r1, r4, lsl #28
   1ab7c:	andeq	r5, r1, r8, ror #27
   1ab80:	andeq	r6, r1, r8, lsl r1
   1ab84:	andeq	r6, r1, r8, lsl #2
   1ab88:	strdeq	r6, [r1], -ip
   1ab8c:	strheq	r6, [r1], -r8
   1ab90:	andeq	r6, r1, r4, lsr #1
   1ab94:	muleq	r1, r8, r0
   1ab98:	andeq	r6, r1, r8, rrx
   1ab9c:	andeq	r6, r1, r0, lsr r0
   1aba0:	andeq	r6, r1, r0, lsr #32
   1aba4:	andeq	r6, r1, r4, lsl r0
   1aba8:	ldrdeq	r5, [r1], -r4
   1abac:	andeq	r5, r1, r0, asr #31
   1abb0:			; <UNDEFINED> instruction: 0x00015fb4
   1abb4:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   1abb8:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   1abbc:	andeq	r5, r1, ip, ror sp
   1abc0:	andeq	r5, r1, r0, ror sp
   1abc4:	andeq	r5, r1, r4, lsr #26
   1abc8:	andeq	r5, r1, r0, lsl #26
   1abcc:	andeq	r5, r1, r4, lsl #26
   1abd0:	andeq	r5, r1, r0, lsr #25
   1abd4:	muleq	r1, r4, ip
   1abd8:	andeq	r5, r1, r8, asr #24
   1abdc:	andeq	r5, r1, r4, lsr ip
   1abe0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1abe4:	add	fp, sp, #28
   1abe8:	sub	sp, sp, #28
   1abec:	mov	ip, r0
   1abf0:	ldr	r0, [pc, #1728]	; 1b2b8 <next@@Base+0x2a94>
   1abf4:	ldr	r0, [pc, r0]
   1abf8:	cmp	r0, #0
   1abfc:	beq	1ad18 <next@@Base+0x24f4>
   1ac00:	ldr	r2, [pc, #1716]	; 1b2bc <next@@Base+0x2a98>
   1ac04:	mov	sl, r1
   1ac08:	add	r2, pc, r2
   1ac0c:	ldr	r3, [r2, #4]
   1ac10:	ldr	r4, [pc, #1704]	; 1b2c0 <next@@Base+0x2a9c>
   1ac14:	ldr	r4, [pc, r4]
   1ac18:	ldr	r6, [pc, #1700]	; 1b2c4 <next@@Base+0x2aa0>
   1ac1c:	add	r6, pc, r6
   1ac20:	ldrb	r0, [r6]
   1ac24:	cmp	r0, #0
   1ac28:	beq	1ad20 <next@@Base+0x24fc>
   1ac2c:	ldr	r8, [pc, #1720]	; 1b2ec <next@@Base+0x2ac8>
   1ac30:	mov	r5, #10551296	; 0xa10000
   1ac34:	adds	r9, r4, #4
   1ac38:	add	r8, pc, r8
   1ac3c:	adc	r2, r3, #0
   1ac40:	ldr	r0, [r8, #4]
   1ac44:	ldr	r1, [pc, #1700]	; 1b2f0 <next@@Base+0x2acc>
   1ac48:	orr	r5, r5, #16777216	; 0x1000000
   1ac4c:	ldr	r1, [pc, r1]
   1ac50:	subs	r1, r1, r9
   1ac54:	sbcs	r0, r0, r2
   1ac58:	bcs	1ae30 <next@@Base+0x260c>
   1ac5c:	mov	r0, #3
   1ac60:	orr	r0, r0, #131072	; 0x20000
   1ac64:	adds	r0, r4, r0
   1ac68:	adc	r1, r3, #0
   1ac6c:	mvn	r2, #0
   1ac70:	and	r9, r1, r2
   1ac74:	mov	r1, #16646144	; 0xfe0000
   1ac78:	orr	r1, r1, #-16777216	; 0xff000000
   1ac7c:	and	r4, r0, r1
   1ac80:	ldr	r0, [pc, #1652]	; 1b2fc <next@@Base+0x2ad8>
   1ac84:	mov	r1, r4
   1ac88:	mov	r7, ip
   1ac8c:	ldr	r0, [pc, r0]
   1ac90:	bl	12694 <realloc@plt>
   1ac94:	ldr	ip, [pc, #1636]	; 1b300 <next@@Base+0x2adc>
   1ac98:	ldr	lr, [pc, #1636]	; 1b304 <next@@Base+0x2ae0>
   1ac9c:	stm	r8, {r4, r9}
   1aca0:	ldr	r1, [pc, #1632]	; 1b308 <next@@Base+0x2ae4>
   1aca4:	add	ip, pc, ip
   1aca8:	add	lr, pc, lr
   1acac:	add	r1, pc, r1
   1acb0:	mov	r2, r0
   1acb4:	str	r2, [r1]
   1acb8:	mov	r6, ip
   1acbc:	ldrb	ip, [ip]
   1acc0:	ldr	r3, [lr, #4]
   1acc4:	ldr	r4, [pc, #1600]	; 1b30c <next@@Base+0x2ae8>
   1acc8:	lsr	r0, r5, #24
   1accc:	mov	r1, r8
   1acd0:	ldr	r4, [pc, r4]
   1acd4:	str	r2, [sp, #20]
   1acd8:	lsl	r8, r7, #1
   1acdc:	strb	r5, [r2, r4]!
   1ace0:	adds	r9, r4, #4
   1ace4:	strb	r0, [r2, #3]
   1ace8:	lsr	r0, r5, #16
   1acec:	strb	r0, [r2, #2]
   1acf0:	lsr	r0, r5, #8
   1acf4:	strb	r0, [r2, #1]
   1acf8:	adc	r5, r3, #0
   1acfc:	mov	r0, #0
   1ad00:	cmp	ip, #1
   1ad04:	str	r3, [sp, #16]
   1ad08:	str	r9, [lr]
   1ad0c:	str	r5, [lr, #4]
   1ad10:	beq	1ae84 <next@@Base+0x2660>
   1ad14:	b	1afd4 <next@@Base+0x27b0>
   1ad18:	sub	sp, fp, #28
   1ad1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad20:	ldr	r0, [pc, #1440]	; 1b2c8 <next@@Base+0x2aa4>
   1ad24:	mov	r7, r3
   1ad28:	adds	r9, r4, #4
   1ad2c:	mov	lr, r2
   1ad30:	ldr	r0, [pc, r0]
   1ad34:	str	r0, [sp, #20]
   1ad38:	ldrb	r1, [r0, r4]!
   1ad3c:	str	r7, [sp, #16]
   1ad40:	ldrb	r5, [r0, #1]
   1ad44:	ldrb	r3, [r0, #2]
   1ad48:	ldrb	r0, [r0, #3]
   1ad4c:	orr	r1, r1, r5, lsl #8
   1ad50:	orr	r1, r1, r3, lsl #16
   1ad54:	orr	r3, r1, r0, lsl #24
   1ad58:	adc	r5, r7, #0
   1ad5c:	mov	r7, #0
   1ad60:	cmn	r3, #1
   1ad64:	str	r9, [r2]
   1ad68:	str	r5, [r2, #4]
   1ad6c:	beq	1af30 <next@@Base+0x270c>
   1ad70:	mov	r0, #10551296	; 0xa10000
   1ad74:	orr	r0, r0, #16777216	; 0x1000000
   1ad78:	cmp	r3, r0
   1ad7c:	bne	1af3c <next@@Base+0x2718>
   1ad80:	str	r5, [sp, #8]
   1ad84:	ldr	r0, [sp, #20]
   1ad88:	str	r4, [sp, #4]
   1ad8c:	adds	r5, r4, #8
   1ad90:	ldr	r3, [r0, r9]
   1ad94:	ldr	r0, [sp, #16]
   1ad98:	mov	r1, r9
   1ad9c:	adc	r9, r0, #0
   1ada0:	cmn	r3, #1
   1ada4:	stm	lr, {r5, r9}
   1ada8:	beq	1af48 <next@@Base+0x2724>
   1adac:	lsr	r0, r3, #1
   1adb0:	mov	r7, ip
   1adb4:	cmp	r0, ip
   1adb8:	bne	1af48 <next@@Base+0x2724>
   1adbc:	lsl	r0, r7, #3
   1adc0:	mov	r4, r1
   1adc4:	bl	126c4 <malloc@plt>
   1adc8:	mov	r1, r0
   1adcc:	cmp	r7, #0
   1add0:	beq	1af70 <next@@Base+0x274c>
   1add4:	mov	r0, r7
   1add8:	str	r7, [sp, #24]
   1addc:	str	r1, [sp, #12]
   1ade0:	ldr	r2, [sp, #20]
   1ade4:	ldr	r3, [r2, r5]!
   1ade8:	adds	r5, r5, #8
   1adec:	ldr	r2, [r2, #4]
   1adf0:	str	r3, [r1]
   1adf4:	adc	r9, r9, #0
   1adf8:	str	r2, [r1, #4]
   1adfc:	subs	r0, r0, #1
   1ae00:	add	r1, r1, #8
   1ae04:	bne	1ade0 <next@@Base+0x25bc>
   1ae08:	ldr	lr, [pc, #1236]	; 1b2e4 <next@@Base+0x2ac0>
   1ae0c:	add	lr, pc, lr
   1ae10:	mov	r0, lr
   1ae14:	stm	r0, {r5, r9}
   1ae18:	ldr	ip, [pc, #1224]	; 1b2e8 <next@@Base+0x2ac4>
   1ae1c:	ldr	r0, [sp, #12]
   1ae20:	add	ip, pc, ip
   1ae24:	mov	r6, ip
   1ae28:	ldr	ip, [sp, #24]
   1ae2c:	b	1af8c <next@@Base+0x2768>
   1ae30:	str	r3, [sp, #16]
   1ae34:	ldr	r3, [pc, #1208]	; 1b2f4 <next@@Base+0x2ad0>
   1ae38:	mov	lr, r5
   1ae3c:	mov	r7, ip
   1ae40:	lsr	ip, r5, #16
   1ae44:	ldr	r3, [pc, r3]
   1ae48:	lsr	r1, r5, #8
   1ae4c:	str	r3, [sp, #20]
   1ae50:	strb	lr, [r3, r4]!
   1ae54:	lsr	r0, lr, #24
   1ae58:	strb	r1, [r3, #1]
   1ae5c:	strb	r0, [r3, #3]
   1ae60:	strb	ip, [r3, #2]
   1ae64:	ldr	lr, [pc, #1164]	; 1b2f8 <next@@Base+0x2ad4>
   1ae68:	lsl	r5, r7, #1
   1ae6c:	add	lr, pc, lr
   1ae70:	mov	r1, r8
   1ae74:	mov	r8, r5
   1ae78:	str	r9, [lr]
   1ae7c:	str	r2, [lr, #4]
   1ae80:	mov	r5, r2
   1ae84:	str	r8, [sp, #24]
   1ae88:	mov	r8, r1
   1ae8c:	ldr	r0, [sp, #16]
   1ae90:	ldr	r2, [r8, #4]
   1ae94:	ldr	r3, [pc, #1140]	; 1b310 <next@@Base+0x2aec>
   1ae98:	adds	ip, r4, #8
   1ae9c:	adc	r1, r0, #0
   1aea0:	mov	r0, #0
   1aea4:	ldr	r3, [pc, r3]
   1aea8:	subs	r3, r3, ip
   1aeac:	sbcs	r1, r2, r1
   1aeb0:	bcs	1af28 <next@@Base+0x2704>
   1aeb4:	ldr	r5, [pc, #1112]	; 1b314 <next@@Base+0x2af0>
   1aeb8:	mov	r0, #3
   1aebc:	ldr	r1, [sp, #16]
   1aec0:	orr	r0, r0, #131072	; 0x20000
   1aec4:	adds	r0, r4, r0
   1aec8:	adc	r1, r1, #0
   1aecc:	adds	r0, r0, #4
   1aed0:	adc	r1, r1, #0
   1aed4:	mvn	r2, #0
   1aed8:	and	r9, r1, r2
   1aedc:	mov	r1, #16646144	; 0xfe0000
   1aee0:	orr	r1, r1, #-16777216	; 0xff000000
   1aee4:	and	r4, r0, r1
   1aee8:	ldr	r0, [sp, #20]
   1aeec:	mov	r1, r4
   1aef0:	add	r5, pc, r5
   1aef4:	bl	12694 <realloc@plt>
   1aef8:	ldr	ip, [pc, #1048]	; 1b318 <next@@Base+0x2af4>
   1aefc:	ldr	lr, [pc, #1048]	; 1b31c <next@@Base+0x2af8>
   1af00:	stm	r8, {r4, r9}
   1af04:	add	lr, pc, lr
   1af08:	str	r0, [r5]
   1af0c:	str	r0, [sp, #20]
   1af10:	ldr	r5, [lr, #4]
   1af14:	ldr	r9, [pc, #1028]	; 1b320 <next@@Base+0x2afc>
   1af18:	add	ip, pc, ip
   1af1c:	mov	r6, ip
   1af20:	mov	r0, #0
   1af24:	ldr	r9, [pc, r9]
   1af28:	ldr	r8, [sp, #24]
   1af2c:	b	1afd4 <next@@Base+0x27b0>
   1af30:	ldr	r1, [sp, #16]
   1af34:	mov	r0, #0
   1af38:	b	1afa0 <next@@Base+0x277c>
   1af3c:	ldr	r1, [pc, #904]	; 1b2cc <next@@Base+0x2aa8>
   1af40:	add	r1, pc, r1
   1af44:	b	1af50 <next@@Base+0x272c>
   1af48:	ldr	r1, [pc, #904]	; 1b2d8 <next@@Base+0x2ab4>
   1af4c:	add	r1, pc, r1
   1af50:	ldr	r0, [pc, #888]	; 1b2d0 <next@@Base+0x2aac>
   1af54:	ldr	r0, [pc, r0]
   1af58:	ldr	r0, [r0]
   1af5c:	ldr	r2, [pc, #880]	; 1b2d4 <next@@Base+0x2ab0>
   1af60:	ldr	r2, [pc, r2]
   1af64:	sub	sp, fp, #28
   1af68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af6c:	b	12724 <fprintf@plt>
   1af70:	ldr	lr, [pc, #868]	; 1b2dc <next@@Base+0x2ab8>
   1af74:	ldr	ip, [pc, #868]	; 1b2e0 <next@@Base+0x2abc>
   1af78:	mov	r0, r1
   1af7c:	add	lr, pc, lr
   1af80:	add	ip, pc, ip
   1af84:	mov	r6, ip
   1af88:	mov	ip, r7
   1af8c:	mov	r9, r4
   1af90:	ldr	r5, [sp, #8]
   1af94:	ldr	r4, [sp, #4]
   1af98:	ldr	r1, [sp, #16]
   1af9c:	mov	r7, #0
   1afa0:	str	r4, [lr]
   1afa4:	str	r1, [lr, #4]
   1afa8:	ldr	r2, [sp, #20]
   1afac:	mov	r1, #1
   1afb0:	lsl	r8, ip, #1
   1afb4:	strb	r7, [r2, r4]!
   1afb8:	strb	r1, [r2, #3]
   1afbc:	mov	r1, #161	; 0xa1
   1afc0:	strb	r7, [r2, #1]
   1afc4:	strb	r1, [r2, #2]
   1afc8:	str	r9, [lr]
   1afcc:	str	r5, [lr, #4]
   1afd0:	mov	r7, ip
   1afd4:	ldr	r3, [sp, #20]
   1afd8:	lsr	r1, r8, #16
   1afdc:	mov	ip, r3
   1afe0:	strb	r8, [r3, r9]!
   1afe4:	lsr	r4, r8, #24
   1afe8:	lsr	r2, r8, #8
   1afec:	adds	r8, r9, #4
   1aff0:	strb	r1, [r3, #2]
   1aff4:	adc	r1, r5, #0
   1aff8:	cmp	r7, #0
   1affc:	strb	r4, [r3, #3]
   1b000:	strb	r2, [r3, #1]
   1b004:	str	r8, [lr]
   1b008:	str	r1, [lr, #4]
   1b00c:	str	r7, [sp, #24]
   1b010:	beq	1b2ac <next@@Base+0x2a88>
   1b014:	ldr	r7, [pc, #776]	; 1b324 <next@@Base+0x2b00>
   1b018:	mov	r4, lr
   1b01c:	mov	r2, r0
   1b020:	add	r7, pc, r7
   1b024:	str	r0, [sp, #12]
   1b028:	cmp	r0, #0
   1b02c:	mov	r0, r4
   1b030:	str	r2, [sp, #16]
   1b034:	beq	1b040 <next@@Base+0x281c>
   1b038:	ldrd	r2, [r2]
   1b03c:	b	1b048 <next@@Base+0x2824>
   1b040:	mov	r2, #0
   1b044:	mov	r3, #0
   1b048:	ldrd	r4, [sl]
   1b04c:	adds	r4, r4, r2
   1b050:	adc	r5, r5, r3
   1b054:	strd	r4, [sl]
   1b058:	ldrb	r2, [r6]
   1b05c:	str	sl, [sp, #20]
   1b060:	cmp	r2, #0
   1b064:	beq	1b130 <next@@Base+0x290c>
   1b068:	ldr	r3, [r7, #4]
   1b06c:	ldr	r6, [pc, #692]	; 1b328 <next@@Base+0x2b04>
   1b070:	adds	r2, r8, #4
   1b074:	adc	r9, r1, #0
   1b078:	ldr	r6, [pc, r6]
   1b07c:	subs	r2, r6, r2
   1b080:	sbcs	r2, r3, r9
   1b084:	bcs	1b16c <next@@Base+0x2948>
   1b088:	mov	r2, #3
   1b08c:	orr	r2, r2, #131072	; 0x20000
   1b090:	adds	r0, r8, r2
   1b094:	adc	r1, r1, #0
   1b098:	mvn	r2, #0
   1b09c:	and	r8, r1, r2
   1b0a0:	mov	r1, #16646144	; 0xfe0000
   1b0a4:	orr	r1, r1, #-16777216	; 0xff000000
   1b0a8:	and	r6, r0, r1
   1b0ac:	mov	r0, ip
   1b0b0:	mov	r1, r6
   1b0b4:	bl	12694 <realloc@plt>
   1b0b8:	ldr	ip, [pc, #620]	; 1b32c <next@@Base+0x2b08>
   1b0bc:	ldr	lr, [pc, #620]	; 1b330 <next@@Base+0x2b0c>
   1b0c0:	stm	r7, {r6, r8}
   1b0c4:	mov	r3, r0
   1b0c8:	ldr	r0, [pc, #612]	; 1b334 <next@@Base+0x2b10>
   1b0cc:	add	lr, pc, lr
   1b0d0:	mov	r9, lr
   1b0d4:	add	r0, pc, r0
   1b0d8:	add	ip, pc, ip
   1b0dc:	str	r3, [r0]
   1b0e0:	mov	lr, ip
   1b0e4:	ldrb	ip, [ip]
   1b0e8:	ldr	r1, [r9, #4]
   1b0ec:	ldr	r8, [pc, #580]	; 1b338 <next@@Base+0x2b14>
   1b0f0:	mov	r7, r3
   1b0f4:	lsr	r2, r4, #24
   1b0f8:	ldr	r8, [pc, r8]
   1b0fc:	lsr	r6, r4, #16
   1b100:	strb	r4, [r7, r8]!
   1b104:	strb	r2, [r7, #3]
   1b108:	lsr	r2, r4, #8
   1b10c:	strb	r2, [r7, #1]
   1b110:	adds	r2, r8, #4
   1b114:	mov	r4, r9
   1b118:	adc	r9, r1, #0
   1b11c:	cmp	ip, #1
   1b120:	strb	r6, [r7, #2]
   1b124:	stm	r4, {r2, r9}
   1b128:	beq	1b1a0 <next@@Base+0x297c>
   1b12c:	b	1b24c <next@@Base+0x2a28>
   1b130:	mov	r7, ip
   1b134:	lsr	r2, r4, #24
   1b138:	strb	r4, [r7, r8]!
   1b13c:	lsr	r9, r4, #16
   1b140:	strb	r2, [r7, #3]
   1b144:	adds	r2, r8, #4
   1b148:	mov	lr, r6
   1b14c:	lsr	r6, r4, #8
   1b150:	strb	r9, [r7, #2]
   1b154:	adc	r9, r1, #0
   1b158:	mov	r4, r0
   1b15c:	strb	r6, [r7, #1]
   1b160:	mov	r3, ip
   1b164:	stm	r4, {r2, r9}
   1b168:	b	1b24c <next@@Base+0x2a28>
   1b16c:	mov	r6, ip
   1b170:	lsr	r2, r4, #24
   1b174:	strb	r4, [r6, r8]!
   1b178:	lsr	r9, r4, #16
   1b17c:	strb	r2, [r6, #3]
   1b180:	adds	r2, r8, #4
   1b184:	lsr	r7, r4, #8
   1b188:	strb	r9, [r6, #2]
   1b18c:	adc	r9, r1, #0
   1b190:	mov	r4, r0
   1b194:	strb	r7, [r6, #1]
   1b198:	mov	r3, ip
   1b19c:	stm	r4, {r2, r9}
   1b1a0:	ldr	lr, [pc, #404]	; 1b33c <next@@Base+0x2b18>
   1b1a4:	mov	r0, r4
   1b1a8:	adds	r7, r8, #8
   1b1ac:	add	lr, pc, lr
   1b1b0:	adc	ip, r1, #0
   1b1b4:	ldr	r4, [lr, #4]
   1b1b8:	ldr	r6, [pc, #384]	; 1b340 <next@@Base+0x2b1c>
   1b1bc:	ldr	r6, [pc, r6]
   1b1c0:	subs	r7, r6, r7
   1b1c4:	sbcs	r7, r4, ip
   1b1c8:	bcs	1b240 <next@@Base+0x2a1c>
   1b1cc:	mov	r2, #3
   1b1d0:	orr	r2, r2, #131072	; 0x20000
   1b1d4:	adds	r0, r8, r2
   1b1d8:	adc	r1, r1, #0
   1b1dc:	adds	r0, r0, #4
   1b1e0:	adc	r1, r1, #0
   1b1e4:	mvn	r2, #0
   1b1e8:	and	r7, r1, r2
   1b1ec:	mov	r1, #16646144	; 0xfe0000
   1b1f0:	orr	r1, r1, #-16777216	; 0xff000000
   1b1f4:	and	r6, r0, r1
   1b1f8:	mov	r0, r3
   1b1fc:	mov	r1, r6
   1b200:	mov	r8, lr
   1b204:	bl	12694 <realloc@plt>
   1b208:	ldr	lr, [pc, #312]	; 1b348 <next@@Base+0x2b24>
   1b20c:	strd	r6, [r8]
   1b210:	mov	r3, r0
   1b214:	add	lr, pc, lr
   1b218:	mov	r4, lr
   1b21c:	ldr	r9, [lr, #4]
   1b220:	ldr	r0, [pc, #292]	; 1b34c <next@@Base+0x2b28>
   1b224:	add	r0, pc, r0
   1b228:	str	r3, [r0]
   1b22c:	ldr	r2, [pc, #284]	; 1b350 <next@@Base+0x2b2c>
   1b230:	ldr	r2, [pc, r2]
   1b234:	ldr	lr, [pc, #280]	; 1b354 <next@@Base+0x2b30>
   1b238:	add	lr, pc, lr
   1b23c:	b	1b24c <next@@Base+0x2a28>
   1b240:	ldr	lr, [pc, #252]	; 1b344 <next@@Base+0x2b20>
   1b244:	mov	r4, r0
   1b248:	add	lr, pc, lr
   1b24c:	mov	ip, r3
   1b250:	lsr	r1, r5, #16
   1b254:	strb	r5, [r3, r2]!
   1b258:	lsr	r0, r5, #24
   1b25c:	lsr	r7, r5, #8
   1b260:	adds	r8, r2, #4
   1b264:	strb	r1, [r3, #2]
   1b268:	adc	r1, r9, #0
   1b26c:	strb	r0, [r3, #3]
   1b270:	strb	r7, [r3, #1]
   1b274:	str	r8, [r4]
   1b278:	str	r1, [r4, #4]
   1b27c:	ldr	r0, [sp, #24]
   1b280:	mov	r6, lr
   1b284:	subs	r0, r0, #1
   1b288:	str	r0, [sp, #24]
   1b28c:	ldr	sl, [sp, #20]
   1b290:	ldr	r2, [sp, #16]
   1b294:	ldr	r0, [sp, #12]
   1b298:	ldr	r7, [pc, #184]	; 1b358 <next@@Base+0x2b34>
   1b29c:	add	sl, sl, #8
   1b2a0:	add	r2, r2, #8
   1b2a4:	add	r7, pc, r7
   1b2a8:	bne	1b028 <next@@Base+0x2804>
   1b2ac:	sub	sp, fp, #28
   1b2b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b2b4:	b	12634 <free@plt>
   1b2b8:	andeq	r5, r1, ip, lsl fp
   1b2bc:	andeq	r5, r1, r8, lsl fp
   1b2c0:	andeq	r5, r1, ip, lsl #22
   1b2c4:	strdeq	r5, [r1], -r0
   1b2c8:	andeq	r5, r1, r4, ror #19
   1b2cc:	andeq	r3, r0, r0, asr #13
   1b2d0:	andeq	r4, r1, r0, ror #2
   1b2d4:	andeq	r5, r1, r8, lsr #15
   1b2d8:	strdeq	r3, [r0], -lr
   1b2dc:	andeq	r5, r1, r4, lsr #15
   1b2e0:	andeq	r5, r1, ip, lsl #15
   1b2e4:	andeq	r5, r1, r4, lsl r9
   1b2e8:	andeq	r5, r1, ip, ror #17
   1b2ec:	andeq	r5, r1, r0, ror #21
   1b2f0:	andeq	r5, r1, ip, asr #21
   1b2f4:	ldrdeq	r5, [r1], -r0
   1b2f8:			; <UNDEFINED> instruction: 0x000158b4
   1b2fc:	andeq	r5, r1, r8, lsl #21
   1b300:	andeq	r5, r1, r8, ror #20
   1b304:	andeq	r5, r1, r8, ror sl
   1b308:	andeq	r5, r1, r8, ror #20
   1b30c:	andeq	r5, r1, r0, asr sl
   1b310:	andeq	r5, r1, r4, ror r8
   1b314:	andeq	r5, r1, r4, lsr #16
   1b318:	strdeq	r5, [r1], -r4
   1b31c:	andeq	r5, r1, ip, lsl r8
   1b320:	strdeq	r5, [r1], -ip
   1b324:	strdeq	r5, [r1], -r8
   1b328:	andeq	r5, r1, r0, lsr #13
   1b32c:	andeq	r5, r1, r4, lsr r6
   1b330:	andeq	r5, r1, r4, asr r6
   1b334:	andeq	r5, r1, r0, asr #12
   1b338:	andeq	r5, r1, r8, lsr #12
   1b33c:	andeq	r5, r1, ip, ror #10
   1b340:	andeq	r5, r1, ip, asr r5
   1b344:	andeq	r5, r1, r4, asr #9
   1b348:	andeq	r5, r1, ip, lsl #10
   1b34c:	strdeq	r5, [r1], -r0
   1b350:	strdeq	r5, [r1], -r0
   1b354:	ldrdeq	r5, [r1], -r4
   1b358:	andeq	r5, r1, r4, ror r4
   1b35c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b360:	add	fp, sp, #28
   1b364:	sub	sp, sp, #4
   1b368:	ldr	r0, [pc, #3180]	; 1bfdc <next@@Base+0x37b8>
   1b36c:	ldr	r0, [pc, r0]
   1b370:	cmp	r0, #0
   1b374:	beq	1b9d0 <next@@Base+0x31ac>
   1b378:	ldr	sl, [pc, #3168]	; 1bfe0 <next@@Base+0x37bc>
   1b37c:	add	sl, pc, sl
   1b380:	ldr	r6, [sl, #4]
   1b384:	ldr	r5, [pc, #3160]	; 1bfe4 <next@@Base+0x37c0>
   1b388:	ldr	r5, [pc, r5]
   1b38c:	ldr	r8, [pc, #3156]	; 1bfe8 <next@@Base+0x37c4>
   1b390:	add	r8, pc, r8
   1b394:	ldrb	r0, [r8]
   1b398:	cmp	r0, #0
   1b39c:	beq	1b460 <next@@Base+0x2c3c>
   1b3a0:	ldr	r9, [pc, #3164]	; 1c004 <next@@Base+0x37e0>
   1b3a4:	adds	r2, r5, #4
   1b3a8:	adc	ip, r6, #0
   1b3ac:	add	r9, pc, r9
   1b3b0:	ldr	r0, [r9, #4]
   1b3b4:	ldr	r3, [pc, #3148]	; 1c008 <next@@Base+0x37e4>
   1b3b8:	ldr	r3, [pc, r3]
   1b3bc:	subs	r3, r3, r2
   1b3c0:	sbcs	r0, r0, ip
   1b3c4:	bcs	1b4b4 <next@@Base+0x2c90>
   1b3c8:	mov	r0, #7
   1b3cc:	orr	r0, r0, #131072	; 0x20000
   1b3d0:	adds	r0, r5, r0
   1b3d4:	adc	r1, r6, #0
   1b3d8:	subs	r0, r0, #4
   1b3dc:	sbc	r1, r1, #0
   1b3e0:	mvn	r2, #0
   1b3e4:	and	r5, r1, r2
   1b3e8:	mov	r1, #16646144	; 0xfe0000
   1b3ec:	orr	r1, r1, #-16777216	; 0xff000000
   1b3f0:	ldr	r4, [pc, #3096]	; 1c010 <next@@Base+0x37ec>
   1b3f4:	and	r6, r0, r1
   1b3f8:	ldr	r0, [pc, #3092]	; 1c014 <next@@Base+0x37f0>
   1b3fc:	mov	r1, r6
   1b400:	add	r4, pc, r4
   1b404:	ldr	r0, [pc, r0]
   1b408:	bl	12694 <realloc@plt>
   1b40c:	str	r6, [r9]
   1b410:	str	r5, [r9, #4]
   1b414:	str	r0, [r4]
   1b418:	ldrb	r3, [r8]
   1b41c:	ldr	r6, [sl, #4]
   1b420:	ldr	r5, [pc, #3056]	; 1c018 <next@@Base+0x37f4>
   1b424:	mov	r2, r0
   1b428:	mov	r1, #0
   1b42c:	mov	r7, #161	; 0xa1
   1b430:	ldr	r5, [pc, r5]
   1b434:	strb	r1, [r2, r5]!
   1b438:	strb	r7, [r2, #3]
   1b43c:	strb	r1, [r2, #2]
   1b440:	strb	r1, [r2, #1]
   1b444:	adds	r2, r5, #4
   1b448:	adc	ip, r6, #0
   1b44c:	mov	r7, #1
   1b450:	cmp	r3, #1
   1b454:	stm	sl, {r2, ip}
   1b458:	beq	1b4dc <next@@Base+0x2cb8>
   1b45c:	b	1b6b4 <next@@Base+0x2e90>
   1b460:	ldr	r0, [pc, #2948]	; 1bfec <next@@Base+0x37c8>
   1b464:	ldr	r0, [pc, r0]
   1b468:	mov	r1, r0
   1b46c:	ldrb	r2, [r1, r5]!
   1b470:	ldrb	r3, [r1, #1]
   1b474:	ldrb	r7, [r1, #2]
   1b478:	ldrb	r1, [r1, #3]
   1b47c:	orr	r2, r2, r3, lsl #8
   1b480:	orr	r2, r2, r7, lsl #16
   1b484:	orr	r3, r2, r1, lsl #24
   1b488:	adds	r2, r5, #4
   1b48c:	adc	ip, r6, #0
   1b490:	cmp	r3, #-1593835520	; 0xa1000000
   1b494:	stm	sl, {r2, ip}
   1b498:	beq	1b654 <next@@Base+0x2e30>
   1b49c:	mov	r7, #1
   1b4a0:	cmn	r3, #1
   1b4a4:	beq	1b694 <next@@Base+0x2e70>
   1b4a8:	ldr	r1, [pc, #2880]	; 1bff0 <next@@Base+0x37cc>
   1b4ac:	add	r1, pc, r1
   1b4b0:	b	1bd94 <next@@Base+0x3570>
   1b4b4:	ldr	r0, [pc, #2896]	; 1c00c <next@@Base+0x37e8>
   1b4b8:	mov	r3, #0
   1b4bc:	mov	r4, #161	; 0xa1
   1b4c0:	ldr	r0, [pc, r0]
   1b4c4:	mov	r7, r0
   1b4c8:	strb	r3, [r7, r5]!
   1b4cc:	strb	r4, [r7, #3]
   1b4d0:	strb	r3, [r7, #2]
   1b4d4:	strb	r3, [r7, #1]
   1b4d8:	stm	sl, {r2, ip}
   1b4dc:	ldr	r4, [r9, #4]
   1b4e0:	ldr	r1, [pc, #2868]	; 1c01c <next@@Base+0x37f8>
   1b4e4:	adds	r3, r5, #8
   1b4e8:	adc	r7, r6, #0
   1b4ec:	ldr	r1, [pc, r1]
   1b4f0:	subs	r1, r1, r3
   1b4f4:	sbcs	r1, r4, r7
   1b4f8:	bcs	1b584 <next@@Base+0x2d60>
   1b4fc:	mov	r1, #7
   1b500:	orr	r1, r1, #131072	; 0x20000
   1b504:	adds	r1, r5, r1
   1b508:	adc	r2, r6, #0
   1b50c:	mvn	r3, #0
   1b510:	and	r5, r2, r3
   1b514:	mov	r2, #16646144	; 0xfe0000
   1b518:	orr	r2, r2, #-16777216	; 0xff000000
   1b51c:	ldr	r4, [pc, #2812]	; 1c020 <next@@Base+0x37fc>
   1b520:	and	r6, r1, r2
   1b524:	mov	r1, r6
   1b528:	add	r4, pc, r4
   1b52c:	bl	12694 <realloc@plt>
   1b530:	str	r6, [r9]
   1b534:	str	r5, [r9, #4]
   1b538:	str	r0, [r4]
   1b53c:	ldrb	r1, [r8]
   1b540:	ldr	ip, [sl, #4]
   1b544:	ldr	r2, [pc, #2776]	; 1c024 <next@@Base+0x3800>
   1b548:	mov	r7, r0
   1b54c:	mov	r3, #9
   1b550:	ldr	r2, [pc, r2]
   1b554:	strb	r3, [r7, r2]!
   1b558:	mov	r3, #0
   1b55c:	strb	r3, [r7, #3]
   1b560:	strb	r3, [r7, #2]
   1b564:	strb	r3, [r7, #1]
   1b568:	adds	r3, r2, #4
   1b56c:	adc	r5, ip, #0
   1b570:	mov	r7, #1
   1b574:	cmp	r1, #1
   1b578:	stm	sl, {r3, r5}
   1b57c:	beq	1b5ac <next@@Base+0x2d88>
   1b580:	b	1b6dc <next@@Base+0x2eb8>
   1b584:	mov	r3, r0
   1b588:	mov	r1, #9
   1b58c:	strb	r1, [r3, r2]!
   1b590:	mov	r1, #0
   1b594:	strb	r1, [r3, #3]
   1b598:	strb	r1, [r3, #2]
   1b59c:	strb	r1, [r3, #1]
   1b5a0:	adds	r3, r2, #4
   1b5a4:	adc	r5, ip, #0
   1b5a8:	stm	sl, {r3, r5}
   1b5ac:	ldr	r6, [r9, #4]
   1b5b0:	ldr	r4, [pc, #2672]	; 1c028 <next@@Base+0x3804>
   1b5b4:	adds	r1, r2, #8
   1b5b8:	adc	r7, ip, #0
   1b5bc:	ldr	r4, [pc, r4]
   1b5c0:	subs	r1, r4, r1
   1b5c4:	sbcs	r1, r6, r7
   1b5c8:	bcs	1baa0 <next@@Base+0x327c>
   1b5cc:	mov	r1, #7
   1b5d0:	orr	r1, r1, #131072	; 0x20000
   1b5d4:	adds	r1, r2, r1
   1b5d8:	adc	r2, ip, #0
   1b5dc:	mvn	r3, #0
   1b5e0:	and	r5, r2, r3
   1b5e4:	mov	r2, #16646144	; 0xfe0000
   1b5e8:	orr	r2, r2, #-16777216	; 0xff000000
   1b5ec:	ldr	r4, [pc, #2616]	; 1c02c <next@@Base+0x3808>
   1b5f0:	and	r6, r1, r2
   1b5f4:	mov	r1, r6
   1b5f8:	add	r4, pc, r4
   1b5fc:	bl	12694 <realloc@plt>
   1b600:	str	r6, [r9]
   1b604:	str	r5, [r9, #4]
   1b608:	str	r0, [r4]
   1b60c:	ldrb	r2, [r8]
   1b610:	ldr	r5, [sl, #4]
   1b614:	ldr	r3, [pc, #2580]	; 1c030 <next@@Base+0x380c>
   1b618:	mov	r7, r0
   1b61c:	mov	r1, #0
   1b620:	ldr	r3, [pc, r3]
   1b624:	adds	r6, r3, #4
   1b628:	strb	r1, [r7, r3]!
   1b62c:	strb	r1, [r7, #3]
   1b630:	strb	r1, [r7, #2]
   1b634:	strb	r1, [r7, #1]
   1b638:	adc	r1, r5, #0
   1b63c:	mov	r7, #1
   1b640:	cmp	r2, #1
   1b644:	str	r6, [sl]
   1b648:	str	r1, [sl, #4]
   1b64c:	bne	1b704 <next@@Base+0x2ee0>
   1b650:	b	1bac8 <next@@Base+0x32a4>
   1b654:	ldr	r3, [r0, r2]
   1b658:	adds	r4, r5, #8
   1b65c:	adc	r7, r6, #0
   1b660:	cmp	r3, #9
   1b664:	stm	sl, {r4, r7}
   1b668:	bne	1bd8c <next@@Base+0x3568>
   1b66c:	ldr	r3, [pc, #2444]	; 1c000 <next@@Base+0x37dc>
   1b670:	adds	r4, r5, #20
   1b674:	adc	r7, r6, #0
   1b678:	add	r3, pc, r3
   1b67c:	add	r6, r0, r5
   1b680:	ldrb	r3, [r3]
   1b684:	ldr	r6, [r6, #16]
   1b688:	stm	sl, {r4, r7}
   1b68c:	eor	r3, r3, #1
   1b690:	add	r7, r6, r3
   1b694:	mov	r6, r0
   1b698:	mov	r3, #0
   1b69c:	strb	r3, [r6, r5]!
   1b6a0:	mov	r5, #161	; 0xa1
   1b6a4:	strb	r5, [r6, #3]
   1b6a8:	strb	r3, [r6, #2]
   1b6ac:	strb	r3, [r6, #1]
   1b6b0:	stm	sl, {r2, ip}
   1b6b4:	mov	r3, r0
   1b6b8:	mov	r1, #9
   1b6bc:	strb	r1, [r3, r2]!
   1b6c0:	mov	r1, #0
   1b6c4:	strb	r1, [r3, #3]
   1b6c8:	strb	r1, [r3, #2]
   1b6cc:	strb	r1, [r3, #1]
   1b6d0:	adds	r3, r2, #4
   1b6d4:	adc	r5, ip, #0
   1b6d8:	stm	sl, {r3, r5}
   1b6dc:	mov	r2, r0
   1b6e0:	mov	r1, #0
   1b6e4:	strb	r1, [r2, r3]!
   1b6e8:	adds	r6, r3, #4
   1b6ec:	strb	r1, [r2, #3]
   1b6f0:	strb	r1, [r2, #2]
   1b6f4:	strb	r1, [r2, #1]
   1b6f8:	adc	r1, r5, #0
   1b6fc:	str	r6, [sl]
   1b700:	str	r1, [sl, #4]
   1b704:	mov	r3, r0
   1b708:	mov	r2, #0
   1b70c:	strb	r2, [r3, r6]!
   1b710:	strb	r2, [r3, #3]
   1b714:	strb	r2, [r3, #2]
   1b718:	strb	r2, [r3, #1]
   1b71c:	adds	r2, r6, #4
   1b720:	adc	r3, r1, #0
   1b724:	strd	r2, [sl]
   1b728:	lsr	r1, r7, #24
   1b72c:	strb	r7, [r0, r2]!
   1b730:	lsr	r6, r7, #16
   1b734:	lsr	r5, r7, #8
   1b738:	strb	r1, [r0, #3]
   1b73c:	strb	r6, [r0, #2]
   1b740:	strb	r5, [r0, #1]
   1b744:	ldrb	r0, [r8]
   1b748:	adds	r4, r2, #4
   1b74c:	adc	r5, r3, #0
   1b750:	cmp	r0, #0
   1b754:	strd	r4, [sl]
   1b758:	beq	1b80c <next@@Base+0x2fe8>
   1b75c:	ldr	r9, [pc, #2284]	; 1c050 <next@@Base+0x382c>
   1b760:	adds	r0, r2, #8
   1b764:	adc	r1, r3, #0
   1b768:	add	r9, pc, r9
   1b76c:	ldr	r7, [r9, #4]
   1b770:	ldr	r6, [pc, #2268]	; 1c054 <next@@Base+0x3830>
   1b774:	ldr	r6, [pc, r6]
   1b778:	subs	r0, r6, r0
   1b77c:	sbcs	r0, r7, r1
   1b780:	bcs	1b9d8 <next@@Base+0x31b4>
   1b784:	mov	r0, #7
   1b788:	orr	r0, r0, #131072	; 0x20000
   1b78c:	adds	r0, r2, r0
   1b790:	adc	r1, r3, #0
   1b794:	mvn	r2, #0
   1b798:	and	r5, r1, r2
   1b79c:	mov	r1, #16646144	; 0xfe0000
   1b7a0:	orr	r1, r1, #-16777216	; 0xff000000
   1b7a4:	ldr	r4, [pc, #2268]	; 1c088 <next@@Base+0x3864>
   1b7a8:	and	r6, r0, r1
   1b7ac:	ldr	r0, [pc, #2264]	; 1c08c <next@@Base+0x3868>
   1b7b0:	mov	r1, r6
   1b7b4:	add	r4, pc, r4
   1b7b8:	ldr	r0, [pc, r0]
   1b7bc:	bl	12694 <realloc@plt>
   1b7c0:	str	r6, [r9]
   1b7c4:	str	r5, [r9, #4]
   1b7c8:	str	r0, [r4]
   1b7cc:	ldrb	r1, [r8]
   1b7d0:	ldr	r5, [sl, #4]
   1b7d4:	ldr	r4, [pc, #2228]	; 1c090 <next@@Base+0x386c>
   1b7d8:	mov	r3, r0
   1b7dc:	mov	r2, #0
   1b7e0:	ldr	r4, [pc, r4]
   1b7e4:	strb	r2, [r3, r4]!
   1b7e8:	strb	r2, [r3, #3]
   1b7ec:	strb	r2, [r3, #2]
   1b7f0:	strb	r2, [r3, #1]
   1b7f4:	adds	r2, r4, #4
   1b7f8:	adc	r3, r5, #0
   1b7fc:	cmp	r1, #0
   1b800:	strd	r2, [sl]
   1b804:	beq	1b838 <next@@Base+0x3014>
   1b808:	b	1ba04 <next@@Base+0x31e0>
   1b80c:	ldr	r0, [pc, #2104]	; 1c04c <next@@Base+0x3828>
   1b810:	adds	r2, r2, #8
   1b814:	mov	r1, #0
   1b818:	adc	r3, r3, #0
   1b81c:	ldr	r0, [pc, r0]
   1b820:	mov	r7, r0
   1b824:	strb	r1, [r7, r4]!
   1b828:	strb	r1, [r7, #3]
   1b82c:	strb	r1, [r7, #2]
   1b830:	strb	r1, [r7, #1]
   1b834:	strd	r2, [sl]
   1b838:	mov	r7, r0
   1b83c:	mov	r1, #0
   1b840:	strb	r1, [r7, r2]!
   1b844:	strb	r1, [r7, #3]
   1b848:	strb	r1, [r7, #2]
   1b84c:	strb	r1, [r7, #1]
   1b850:	adds	r1, r2, #4
   1b854:	adc	r5, r3, #0
   1b858:	stm	sl, {r1, r5}
   1b85c:	mov	r3, r0
   1b860:	mov	r2, #0
   1b864:	strb	r2, [r3, r1]!
   1b868:	strb	r2, [r3, #3]
   1b86c:	strb	r2, [r3, #2]
   1b870:	strb	r2, [r3, #1]
   1b874:	adds	r2, r1, #4
   1b878:	adc	r3, r5, #0
   1b87c:	strd	r2, [sl]
   1b880:	mov	r7, r0
   1b884:	mov	r1, #0
   1b888:	strb	r1, [r7, r2]!
   1b88c:	strb	r1, [r7, #3]
   1b890:	strb	r1, [r7, #2]
   1b894:	strb	r1, [r7, #1]
   1b898:	adds	r1, r2, #4
   1b89c:	adc	r5, r3, #0
   1b8a0:	stm	sl, {r1, r5}
   1b8a4:	mov	r3, r0
   1b8a8:	mov	r2, #0
   1b8ac:	strb	r2, [r3, r1]!
   1b8b0:	adds	r4, r1, #4
   1b8b4:	strb	r2, [r3, #3]
   1b8b8:	strb	r2, [r3, #2]
   1b8bc:	strb	r2, [r3, #1]
   1b8c0:	adc	r3, r5, #0
   1b8c4:	str	r4, [sl]
   1b8c8:	str	r3, [sl, #4]
   1b8cc:	mov	r2, r0
   1b8d0:	mov	r1, #0
   1b8d4:	strb	r1, [r2, r4]!
   1b8d8:	strb	r1, [r2, #3]
   1b8dc:	strb	r1, [r2, #2]
   1b8e0:	strb	r1, [r2, #1]
   1b8e4:	adds	r2, r4, #4
   1b8e8:	adc	r1, r3, #0
   1b8ec:	str	r2, [sl]
   1b8f0:	str	r1, [sl, #4]
   1b8f4:	mov	r3, r0
   1b8f8:	mov	r4, #0
   1b8fc:	strb	r4, [r3, r2]!
   1b900:	mov	r7, #163	; 0xa3
   1b904:	strb	r7, [r3, #3]
   1b908:	strb	r4, [r3, #2]
   1b90c:	strb	r4, [r3, #1]
   1b910:	ldrb	r7, [r8]
   1b914:	adds	r6, r2, #4
   1b918:	adc	r3, r1, #0
   1b91c:	cmp	r7, #1
   1b920:	str	r6, [sl]
   1b924:	str	r3, [sl, #4]
   1b928:	bne	1b99c <next@@Base+0x3178>
   1b92c:	ldr	r8, [pc, #1852]	; 1c070 <next@@Base+0x384c>
   1b930:	adds	lr, r2, #8
   1b934:	adc	ip, r1, #0
   1b938:	add	r8, pc, r8
   1b93c:	ldr	r5, [r8, #4]
   1b940:	ldr	r7, [pc, #1836]	; 1c074 <next@@Base+0x3850>
   1b944:	ldr	r7, [pc, r7]
   1b948:	subs	r7, r7, lr
   1b94c:	sbcs	r7, r5, ip
   1b950:	bcs	1b99c <next@@Base+0x3178>
   1b954:	mov	r3, #7
   1b958:	orr	r3, r3, #131072	; 0x20000
   1b95c:	adds	r2, r2, r3
   1b960:	adc	r1, r1, #0
   1b964:	mvn	r3, #0
   1b968:	and	r7, r1, r3
   1b96c:	mov	r1, #16646144	; 0xfe0000
   1b970:	orr	r1, r1, #-16777216	; 0xff000000
   1b974:	ldr	r5, [pc, #1788]	; 1c078 <next@@Base+0x3854>
   1b978:	and	r6, r2, r1
   1b97c:	mov	r1, r6
   1b980:	add	r5, pc, r5
   1b984:	bl	12694 <realloc@plt>
   1b988:	strd	r6, [r8]
   1b98c:	str	r0, [r5]
   1b990:	ldr	r3, [sl, #4]
   1b994:	ldr	r6, [pc, #1760]	; 1c07c <next@@Base+0x3858>
   1b998:	ldr	r6, [pc, r6]
   1b99c:	ldr	r0, [pc, #1756]	; 1c080 <next@@Base+0x385c>
   1b9a0:	ldr	r1, [pc, #1756]	; 1c084 <next@@Base+0x3860>
   1b9a4:	adds	r2, r6, #4
   1b9a8:	add	r0, pc, r0
   1b9ac:	adc	r3, r3, #0
   1b9b0:	ldr	r1, [pc, r1]
   1b9b4:	strb	r4, [r1, r6]!
   1b9b8:	strb	r4, [r1, #3]
   1b9bc:	strb	r4, [r1, #2]
   1b9c0:	strb	r4, [r1, #1]
   1b9c4:	mov	r1, #1
   1b9c8:	strd	r2, [sl]
   1b9cc:	strb	r1, [r0]
   1b9d0:	sub	sp, fp, #28
   1b9d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b9d8:	ldr	r0, [pc, #1656]	; 1c058 <next@@Base+0x3834>
   1b9dc:	adds	r2, r2, #8
   1b9e0:	mov	r1, #0
   1b9e4:	adc	r3, r3, #0
   1b9e8:	ldr	r0, [pc, r0]
   1b9ec:	mov	r7, r0
   1b9f0:	strb	r1, [r7, r4]!
   1b9f4:	strb	r1, [r7, #3]
   1b9f8:	strb	r1, [r7, #2]
   1b9fc:	strb	r1, [r7, #1]
   1ba00:	strd	r2, [sl]
   1ba04:	ldr	r6, [r9, #4]
   1ba08:	ldr	r1, [pc, #1668]	; 1c094 <next@@Base+0x3870>
   1ba0c:	adds	ip, r4, #8
   1ba10:	adc	r7, r5, #0
   1ba14:	ldr	r1, [pc, r1]
   1ba18:	subs	r1, r1, ip
   1ba1c:	sbcs	r1, r6, r7
   1ba20:	bcs	1bb6c <next@@Base+0x3348>
   1ba24:	mov	r1, #7
   1ba28:	orr	r1, r1, #131072	; 0x20000
   1ba2c:	adds	r1, r4, r1
   1ba30:	adc	r2, r5, #0
   1ba34:	mvn	r3, #0
   1ba38:	and	r5, r2, r3
   1ba3c:	mov	r2, #16646144	; 0xfe0000
   1ba40:	orr	r2, r2, #-16777216	; 0xff000000
   1ba44:	ldr	r6, [pc, #1612]	; 1c098 <next@@Base+0x3874>
   1ba48:	and	r4, r1, r2
   1ba4c:	mov	r1, r4
   1ba50:	add	r6, pc, r6
   1ba54:	bl	12694 <realloc@plt>
   1ba58:	str	r0, [r6]
   1ba5c:	strd	r4, [r9]
   1ba60:	ldrb	r7, [r8]
   1ba64:	ldr	r3, [sl, #4]
   1ba68:	ldr	r2, [pc, #1580]	; 1c09c <next@@Base+0x3878>
   1ba6c:	mov	r6, r0
   1ba70:	mov	r1, #0
   1ba74:	ldr	r2, [pc, r2]
   1ba78:	strb	r1, [r6, r2]!
   1ba7c:	strb	r1, [r6, #3]
   1ba80:	strb	r1, [r6, #2]
   1ba84:	strb	r1, [r6, #1]
   1ba88:	adds	r1, r2, #4
   1ba8c:	adc	r5, r3, #0
   1ba90:	cmp	r7, #1
   1ba94:	stm	sl, {r1, r5}
   1ba98:	bne	1b85c <next@@Base+0x3038>
   1ba9c:	b	1bb90 <next@@Base+0x336c>
   1baa0:	mov	r2, r0
   1baa4:	mov	r1, #0
   1baa8:	strb	r1, [r2, r3]!
   1baac:	adds	r6, r3, #4
   1bab0:	strb	r1, [r2, #3]
   1bab4:	strb	r1, [r2, #2]
   1bab8:	strb	r1, [r2, #1]
   1babc:	adc	r1, r5, #0
   1bac0:	str	r6, [sl]
   1bac4:	str	r1, [sl, #4]
   1bac8:	ldr	r4, [r9, #4]
   1bacc:	ldr	r2, [pc, #1376]	; 1c034 <next@@Base+0x3810>
   1bad0:	adds	ip, r3, #8
   1bad4:	adc	r7, r5, #0
   1bad8:	ldr	r2, [pc, r2]
   1badc:	subs	r2, r2, ip
   1bae0:	sbcs	r2, r4, r7
   1bae4:	bcs	1bc30 <next@@Base+0x340c>
   1bae8:	mov	r1, #7
   1baec:	orr	r1, r1, #131072	; 0x20000
   1baf0:	adds	r1, r3, r1
   1baf4:	adc	r2, r5, #0
   1baf8:	mvn	r3, #0
   1bafc:	and	r5, r2, r3
   1bb00:	mov	r2, #16646144	; 0xfe0000
   1bb04:	orr	r2, r2, #-16777216	; 0xff000000
   1bb08:	ldr	r4, [pc, #1320]	; 1c038 <next@@Base+0x3814>
   1bb0c:	and	r6, r1, r2
   1bb10:	mov	r1, r6
   1bb14:	add	r4, pc, r4
   1bb18:	bl	12694 <realloc@plt>
   1bb1c:	str	r6, [r9]
   1bb20:	str	r5, [r9, #4]
   1bb24:	str	r0, [r4]
   1bb28:	ldrb	r5, [r8]
   1bb2c:	ldr	r1, [sl, #4]
   1bb30:	ldr	r6, [pc, #1284]	; 1c03c <next@@Base+0x3818>
   1bb34:	mov	r3, r0
   1bb38:	mov	r2, #0
   1bb3c:	mov	r7, #1
   1bb40:	ldr	r6, [pc, r6]
   1bb44:	strb	r2, [r3, r6]!
   1bb48:	strb	r2, [r3, #3]
   1bb4c:	strb	r2, [r3, #2]
   1bb50:	strb	r2, [r3, #1]
   1bb54:	adds	r2, r6, #4
   1bb58:	adc	r3, r1, #0
   1bb5c:	cmp	r5, #1
   1bb60:	strd	r2, [sl]
   1bb64:	bne	1b728 <next@@Base+0x2f04>
   1bb68:	b	1bc54 <next@@Base+0x3430>
   1bb6c:	mov	r7, r0
   1bb70:	mov	r1, #0
   1bb74:	strb	r1, [r7, r2]!
   1bb78:	strb	r1, [r7, #3]
   1bb7c:	strb	r1, [r7, #2]
   1bb80:	strb	r1, [r7, #1]
   1bb84:	adds	r1, r2, #4
   1bb88:	adc	r5, r3, #0
   1bb8c:	stm	sl, {r1, r5}
   1bb90:	ldr	r4, [r9, #4]
   1bb94:	ldr	r6, [pc, #1284]	; 1c0a0 <next@@Base+0x387c>
   1bb98:	adds	r7, r2, #8
   1bb9c:	adc	ip, r3, #0
   1bba0:	ldr	r6, [pc, r6]
   1bba4:	subs	r7, r6, r7
   1bba8:	sbcs	r7, r4, ip
   1bbac:	bcs	1bcc8 <next@@Base+0x34a4>
   1bbb0:	mov	r1, #7
   1bbb4:	orr	r1, r1, #131072	; 0x20000
   1bbb8:	adds	r1, r2, r1
   1bbbc:	adc	r2, r3, #0
   1bbc0:	mvn	r3, #0
   1bbc4:	and	r5, r2, r3
   1bbc8:	mov	r2, #16646144	; 0xfe0000
   1bbcc:	orr	r2, r2, #-16777216	; 0xff000000
   1bbd0:	ldr	r4, [pc, #1228]	; 1c0a4 <next@@Base+0x3880>
   1bbd4:	and	r6, r1, r2
   1bbd8:	mov	r1, r6
   1bbdc:	add	r4, pc, r4
   1bbe0:	bl	12694 <realloc@plt>
   1bbe4:	str	r6, [r9]
   1bbe8:	str	r5, [r9, #4]
   1bbec:	str	r0, [r4]
   1bbf0:	ldrb	r7, [r8]
   1bbf4:	ldr	r5, [sl, #4]
   1bbf8:	ldr	r1, [pc, #1192]	; 1c0a8 <next@@Base+0x3884>
   1bbfc:	mov	r3, r0
   1bc00:	mov	r2, #0
   1bc04:	ldr	r1, [pc, r1]
   1bc08:	strb	r2, [r3, r1]!
   1bc0c:	strb	r2, [r3, #3]
   1bc10:	strb	r2, [r3, #2]
   1bc14:	strb	r2, [r3, #1]
   1bc18:	adds	r2, r1, #4
   1bc1c:	adc	r3, r5, #0
   1bc20:	cmp	r7, #1
   1bc24:	strd	r2, [sl]
   1bc28:	bne	1b880 <next@@Base+0x305c>
   1bc2c:	b	1bcec <next@@Base+0x34c8>
   1bc30:	mov	r3, r0
   1bc34:	mov	r2, #0
   1bc38:	strb	r2, [r3, r6]!
   1bc3c:	strb	r2, [r3, #3]
   1bc40:	strb	r2, [r3, #2]
   1bc44:	strb	r2, [r3, #1]
   1bc48:	adds	r2, r6, #4
   1bc4c:	adc	r3, r1, #0
   1bc50:	strd	r2, [sl]
   1bc54:	ldr	r4, [r9, #4]
   1bc58:	ldr	r5, [pc, #992]	; 1c040 <next@@Base+0x381c>
   1bc5c:	adds	lr, r6, #8
   1bc60:	adc	ip, r1, #0
   1bc64:	mov	r7, #1
   1bc68:	ldr	r5, [pc, r5]
   1bc6c:	subs	r5, r5, lr
   1bc70:	sbcs	r5, r4, ip
   1bc74:	bcs	1b728 <next@@Base+0x2f04>
   1bc78:	mov	r2, #7
   1bc7c:	orr	r2, r2, #131072	; 0x20000
   1bc80:	adds	r2, r6, r2
   1bc84:	adc	r1, r1, #0
   1bc88:	mvn	r3, #0
   1bc8c:	and	r5, r1, r3
   1bc90:	mov	r1, #16646144	; 0xfe0000
   1bc94:	orr	r1, r1, #-16777216	; 0xff000000
   1bc98:	ldr	r4, [pc, #932]	; 1c044 <next@@Base+0x3820>
   1bc9c:	and	r6, r2, r1
   1bca0:	mov	r1, r6
   1bca4:	add	r4, pc, r4
   1bca8:	bl	12694 <realloc@plt>
   1bcac:	str	r6, [r9]
   1bcb0:	str	r5, [r9, #4]
   1bcb4:	str	r0, [r4]
   1bcb8:	ldr	r3, [sl, #4]
   1bcbc:	ldr	r2, [pc, #900]	; 1c048 <next@@Base+0x3824>
   1bcc0:	ldr	r2, [pc, r2]
   1bcc4:	b	1b728 <next@@Base+0x2f04>
   1bcc8:	mov	r3, r0
   1bccc:	mov	r2, #0
   1bcd0:	strb	r2, [r3, r1]!
   1bcd4:	strb	r2, [r3, #3]
   1bcd8:	strb	r2, [r3, #2]
   1bcdc:	strb	r2, [r3, #1]
   1bce0:	adds	r2, r1, #4
   1bce4:	adc	r3, r5, #0
   1bce8:	strd	r2, [sl]
   1bcec:	ldr	r4, [r9, #4]
   1bcf0:	ldr	r6, [pc, #948]	; 1c0ac <next@@Base+0x3888>
   1bcf4:	adds	r7, r1, #8
   1bcf8:	adc	ip, r5, #0
   1bcfc:	ldr	r6, [pc, r6]
   1bd00:	subs	r7, r6, r7
   1bd04:	sbcs	r7, r4, ip
   1bd08:	bcs	1bdb4 <next@@Base+0x3590>
   1bd0c:	mov	r2, #7
   1bd10:	orr	r2, r2, #131072	; 0x20000
   1bd14:	adds	r1, r1, r2
   1bd18:	adc	r2, r5, #0
   1bd1c:	mvn	r3, #0
   1bd20:	and	r5, r2, r3
   1bd24:	mov	r2, #16646144	; 0xfe0000
   1bd28:	orr	r2, r2, #-16777216	; 0xff000000
   1bd2c:	ldr	r4, [pc, #892]	; 1c0b0 <next@@Base+0x388c>
   1bd30:	and	r6, r1, r2
   1bd34:	mov	r1, r6
   1bd38:	add	r4, pc, r4
   1bd3c:	bl	12694 <realloc@plt>
   1bd40:	str	r6, [r9]
   1bd44:	str	r5, [r9, #4]
   1bd48:	str	r0, [r4]
   1bd4c:	ldrb	r7, [r8]
   1bd50:	ldr	r3, [sl, #4]
   1bd54:	ldr	r2, [pc, #856]	; 1c0b4 <next@@Base+0x3890>
   1bd58:	mov	r6, r0
   1bd5c:	mov	r1, #0
   1bd60:	ldr	r2, [pc, r2]
   1bd64:	strb	r1, [r6, r2]!
   1bd68:	strb	r1, [r6, #3]
   1bd6c:	strb	r1, [r6, #2]
   1bd70:	strb	r1, [r6, #1]
   1bd74:	adds	r1, r2, #4
   1bd78:	adc	r5, r3, #0
   1bd7c:	cmp	r7, #1
   1bd80:	stm	sl, {r1, r5}
   1bd84:	bne	1b8a4 <next@@Base+0x3080>
   1bd88:	b	1bdd8 <next@@Base+0x35b4>
   1bd8c:	ldr	r1, [pc, #616]	; 1bffc <next@@Base+0x37d8>
   1bd90:	add	r1, pc, r1
   1bd94:	ldr	r0, [pc, #600]	; 1bff4 <next@@Base+0x37d0>
   1bd98:	ldr	r0, [pc, r0]
   1bd9c:	ldr	r0, [r0]
   1bda0:	ldr	r2, [pc, #592]	; 1bff8 <next@@Base+0x37d4>
   1bda4:	ldr	r2, [pc, r2]
   1bda8:	sub	sp, fp, #28
   1bdac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bdb0:	b	12724 <fprintf@plt>
   1bdb4:	mov	r7, r0
   1bdb8:	mov	r1, #0
   1bdbc:	strb	r1, [r7, r2]!
   1bdc0:	strb	r1, [r7, #3]
   1bdc4:	strb	r1, [r7, #2]
   1bdc8:	strb	r1, [r7, #1]
   1bdcc:	adds	r1, r2, #4
   1bdd0:	adc	r5, r3, #0
   1bdd4:	stm	sl, {r1, r5}
   1bdd8:	ldr	r4, [r9, #4]
   1bddc:	ldr	r6, [pc, #724]	; 1c0b8 <next@@Base+0x3894>
   1bde0:	adds	r7, r2, #8
   1bde4:	adc	ip, r3, #0
   1bde8:	ldr	r6, [pc, r6]
   1bdec:	subs	r7, r6, r7
   1bdf0:	sbcs	r7, r4, ip
   1bdf4:	bcs	1be7c <next@@Base+0x3658>
   1bdf8:	mov	r1, #7
   1bdfc:	orr	r1, r1, #131072	; 0x20000
   1be00:	adds	r1, r2, r1
   1be04:	adc	r2, r3, #0
   1be08:	mvn	r3, #0
   1be0c:	and	r5, r2, r3
   1be10:	mov	r2, #16646144	; 0xfe0000
   1be14:	orr	r2, r2, #-16777216	; 0xff000000
   1be18:	ldr	r4, [pc, #668]	; 1c0bc <next@@Base+0x3898>
   1be1c:	and	r6, r1, r2
   1be20:	mov	r1, r6
   1be24:	add	r4, pc, r4
   1be28:	bl	12694 <realloc@plt>
   1be2c:	str	r6, [r9]
   1be30:	str	r5, [r9, #4]
   1be34:	str	r0, [r4]
   1be38:	ldrb	r2, [r8]
   1be3c:	ldr	r5, [sl, #4]
   1be40:	ldr	r1, [pc, #632]	; 1c0c0 <next@@Base+0x389c>
   1be44:	mov	r7, r0
   1be48:	mov	r3, #0
   1be4c:	ldr	r1, [pc, r1]
   1be50:	adds	r4, r1, #4
   1be54:	strb	r3, [r7, r1]!
   1be58:	strb	r3, [r7, #3]
   1be5c:	strb	r3, [r7, #2]
   1be60:	strb	r3, [r7, #1]
   1be64:	adc	r3, r5, #0
   1be68:	cmp	r2, #1
   1be6c:	str	r4, [sl]
   1be70:	str	r3, [sl, #4]
   1be74:	bne	1b8cc <next@@Base+0x30a8>
   1be78:	b	1bea4 <next@@Base+0x3680>
   1be7c:	mov	r3, r0
   1be80:	mov	r2, #0
   1be84:	strb	r2, [r3, r1]!
   1be88:	adds	r4, r1, #4
   1be8c:	strb	r2, [r3, #3]
   1be90:	strb	r2, [r3, #2]
   1be94:	strb	r2, [r3, #1]
   1be98:	adc	r3, r5, #0
   1be9c:	str	r4, [sl]
   1bea0:	str	r3, [sl, #4]
   1bea4:	ldr	r6, [r9, #4]
   1bea8:	ldr	r2, [pc, #532]	; 1c0c4 <next@@Base+0x38a0>
   1beac:	adds	ip, r1, #8
   1beb0:	adc	r7, r5, #0
   1beb4:	ldr	r2, [pc, r2]
   1beb8:	subs	r2, r2, ip
   1bebc:	sbcs	r2, r6, r7
   1bec0:	bcs	1bf48 <next@@Base+0x3724>
   1bec4:	mov	r2, #7
   1bec8:	orr	r2, r2, #131072	; 0x20000
   1becc:	adds	r1, r1, r2
   1bed0:	adc	r2, r5, #0
   1bed4:	mvn	r3, #0
   1bed8:	and	r5, r2, r3
   1bedc:	mov	r2, #16646144	; 0xfe0000
   1bee0:	orr	r2, r2, #-16777216	; 0xff000000
   1bee4:	ldr	r4, [pc, #368]	; 1c05c <next@@Base+0x3838>
   1bee8:	and	r6, r1, r2
   1beec:	mov	r1, r6
   1bef0:	add	r4, pc, r4
   1bef4:	bl	12694 <realloc@plt>
   1bef8:	str	r6, [r9]
   1befc:	str	r5, [r9, #4]
   1bf00:	str	r0, [r4]
   1bf04:	ldrb	r7, [r8]
   1bf08:	ldr	r3, [sl, #4]
   1bf0c:	ldr	r4, [pc, #332]	; 1c060 <next@@Base+0x383c>
   1bf10:	mov	r2, r0
   1bf14:	mov	r1, #0
   1bf18:	ldr	r4, [pc, r4]
   1bf1c:	strb	r1, [r2, r4]!
   1bf20:	strb	r1, [r2, #3]
   1bf24:	strb	r1, [r2, #2]
   1bf28:	strb	r1, [r2, #1]
   1bf2c:	adds	r2, r4, #4
   1bf30:	adc	r1, r3, #0
   1bf34:	cmp	r7, #0
   1bf38:	str	r2, [sl]
   1bf3c:	str	r1, [sl, #4]
   1bf40:	beq	1b8f4 <next@@Base+0x30d0>
   1bf44:	b	1bf70 <next@@Base+0x374c>
   1bf48:	mov	r2, r0
   1bf4c:	mov	r1, #0
   1bf50:	strb	r1, [r2, r4]!
   1bf54:	strb	r1, [r2, #3]
   1bf58:	strb	r1, [r2, #2]
   1bf5c:	strb	r1, [r2, #1]
   1bf60:	adds	r2, r4, #4
   1bf64:	adc	r1, r3, #0
   1bf68:	str	r2, [sl]
   1bf6c:	str	r1, [sl, #4]
   1bf70:	ldr	r5, [r9, #4]
   1bf74:	ldr	r6, [pc, #232]	; 1c064 <next@@Base+0x3840>
   1bf78:	adds	r7, r4, #8
   1bf7c:	adc	ip, r3, #0
   1bf80:	ldr	r6, [pc, r6]
   1bf84:	subs	r7, r6, r7
   1bf88:	sbcs	r7, r5, ip
   1bf8c:	bcs	1b8f4 <next@@Base+0x30d0>
   1bf90:	mov	r1, #7
   1bf94:	orr	r1, r1, #131072	; 0x20000
   1bf98:	adds	r1, r4, r1
   1bf9c:	adc	r2, r3, #0
   1bfa0:	mvn	r3, #0
   1bfa4:	and	r7, r2, r3
   1bfa8:	mov	r2, #16646144	; 0xfe0000
   1bfac:	orr	r2, r2, #-16777216	; 0xff000000
   1bfb0:	ldr	r5, [pc, #176]	; 1c068 <next@@Base+0x3844>
   1bfb4:	and	r6, r1, r2
   1bfb8:	mov	r1, r6
   1bfbc:	add	r5, pc, r5
   1bfc0:	bl	12694 <realloc@plt>
   1bfc4:	strd	r6, [r9]
   1bfc8:	str	r0, [r5]
   1bfcc:	ldr	r1, [sl, #4]
   1bfd0:	ldr	r2, [pc, #148]	; 1c06c <next@@Base+0x3848>
   1bfd4:	ldr	r2, [pc, r2]
   1bfd8:	b	1b8f4 <next@@Base+0x30d0>
   1bfdc:	andeq	r5, r1, r4, lsr #7
   1bfe0:	andeq	r5, r1, r4, lsr #7
   1bfe4:	muleq	r1, r8, r3
   1bfe8:	andeq	r5, r1, ip, ror r3
   1bfec:			; <UNDEFINED> instruction: 0x000152b0
   1bff0:	strdeq	r3, [r0], -r2
   1bff4:	andeq	r3, r1, ip, lsl r3
   1bff8:	andeq	r4, r1, r4, ror #18
   1bffc:	andeq	r2, r0, fp, asr r9
   1c000:	strheq	r5, [r1], -r0
   1c004:	andeq	r5, r1, ip, ror #6
   1c008:	andeq	r5, r1, r0, ror #6
   1c00c:	andeq	r5, r1, r4, asr r2
   1c010:	andeq	r5, r1, r4, lsl r3
   1c014:	andeq	r5, r1, r0, lsl r3
   1c018:	strdeq	r5, [r1], -r0
   1c01c:	andeq	r5, r1, ip, lsr #4
   1c020:	andeq	r5, r1, ip, ror #3
   1c024:	ldrdeq	r5, [r1], -r0
   1c028:	andeq	r5, r1, ip, asr r1
   1c02c:	andeq	r5, r1, ip, lsl r1
   1c030:	andeq	r5, r1, r0, lsl #2
   1c034:	andeq	r4, r1, r0, asr #24
   1c038:	andeq	r4, r1, r0, lsl #24
   1c03c:	andeq	r4, r1, r0, ror #23
   1c040:			; <UNDEFINED> instruction: 0x00014ab0
   1c044:	andeq	r4, r1, r0, ror sl
   1c048:	andeq	r4, r1, r0, ror #20
   1c04c:	strdeq	r4, [r1], -r8
   1c050:			; <UNDEFINED> instruction: 0x00014fb0
   1c054:	andeq	r4, r1, r4, lsr #31
   1c058:	andeq	r4, r1, ip, lsr #26
   1c05c:	andeq	r4, r1, r4, lsr #16
   1c060:	andeq	r4, r1, r8, lsl #16
   1c064:	muleq	r1, r8, r7
   1c068:	andeq	r4, r1, r8, asr r7
   1c06c:	andeq	r4, r1, ip, asr #14
   1c070:	andeq	r4, r1, r0, ror #27
   1c074:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1c078:	muleq	r1, r4, sp
   1c07c:	andeq	r4, r1, r8, lsl #27
   1c080:	andeq	r4, r1, r0, lsl #27
   1c084:	andeq	r4, r1, r4, ror #26
   1c088:	andeq	r4, r1, r0, ror #30
   1c08c:	andeq	r4, r1, ip, asr pc
   1c090:	andeq	r4, r1, r0, asr #30
   1c094:	andeq	r4, r1, r4, lsl #26
   1c098:	andeq	r4, r1, r4, asr #25
   1c09c:	andeq	r4, r1, ip, lsr #25
   1c0a0:	andeq	r4, r1, r8, ror fp
   1c0a4:	andeq	r4, r1, r8, lsr fp
   1c0a8:	andeq	r4, r1, ip, lsl fp
   1c0ac:	andeq	r4, r1, ip, lsl sl
   1c0b0:	ldrdeq	r4, [r1], -ip
   1c0b4:	andeq	r4, r1, r0, asr #19
   1c0b8:	andeq	r4, r1, r0, lsr r9
   1c0bc:	strdeq	r4, [r1], -r0
   1c0c0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1c0c4:	andeq	r4, r1, r4, ror #16
   1c0c8:	ldr	r0, [pc, #508]	; 1c2cc <next@@Base+0x3aa8>
   1c0cc:	ldr	r0, [pc, r0]
   1c0d0:	cmp	r0, #0
   1c0d4:	beq	1c284 <next@@Base+0x3a60>
   1c0d8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c0dc:	add	fp, sp, #24
   1c0e0:	ldr	r9, [pc, #488]	; 1c2d0 <next@@Base+0x3aac>
   1c0e4:	mov	r4, #0
   1c0e8:	mov	r1, #0
   1c0ec:	add	r9, pc, r9
   1c0f0:	ldrb	r0, [r9]
   1c0f4:	cmp	r0, #1
   1c0f8:	bne	1c17c <next@@Base+0x3958>
   1c0fc:	ldr	r0, [pc, #464]	; 1c2d4 <next@@Base+0x3ab0>
   1c100:	ldr	r8, [pc, #464]	; 1c2d8 <next@@Base+0x3ab4>
   1c104:	mov	r1, #1
   1c108:	add	r0, pc, r0
   1c10c:	add	r8, pc, r8
   1c110:	ldr	r0, [r0, #4]
   1c114:	ldr	r2, [pc, #448]	; 1c2dc <next@@Base+0x3ab8>
   1c118:	ldr	r2, [pc, r2]
   1c11c:	ldr	r7, [r8, #4]
   1c120:	ldr	r5, [pc, #440]	; 1c2e0 <next@@Base+0x3abc>
   1c124:	adds	r3, r2, #8
   1c128:	adc	r6, r0, #0
   1c12c:	ldr	r5, [pc, r5]
   1c130:	subs	r3, r5, r3
   1c134:	sbcs	r3, r7, r6
   1c138:	bcs	1c17c <next@@Base+0x3958>
   1c13c:	mov	r1, #7
   1c140:	orr	r1, r1, #131072	; 0x20000
   1c144:	adds	r1, r2, r1
   1c148:	adc	r7, r0, #0
   1c14c:	mov	r0, #16646144	; 0xfe0000
   1c150:	orr	r0, r0, #-16777216	; 0xff000000
   1c154:	ldr	r5, [pc, #392]	; 1c2e4 <next@@Base+0x3ac0>
   1c158:	and	r6, r1, r0
   1c15c:	ldr	r0, [pc, #388]	; 1c2e8 <next@@Base+0x3ac4>
   1c160:	mov	r1, r6
   1c164:	add	r5, pc, r5
   1c168:	ldr	r0, [pc, r0]
   1c16c:	bl	12694 <realloc@plt>
   1c170:	ldrb	r1, [r9]
   1c174:	strd	r6, [r8]
   1c178:	str	r0, [r5]
   1c17c:	ldr	r3, [pc, #360]	; 1c2ec <next@@Base+0x3ac8>
   1c180:	ldr	r2, [pc, #360]	; 1c2f0 <next@@Base+0x3acc>
   1c184:	add	r3, pc, r3
   1c188:	ldr	r2, [pc, r2]
   1c18c:	ldr	r0, [pc, #352]	; 1c2f4 <next@@Base+0x3ad0>
   1c190:	ldr	r0, [pc, r0]
   1c194:	ldr	r7, [r3, #4]
   1c198:	mov	r6, r0
   1c19c:	strb	r4, [r6, r2]!
   1c1a0:	adds	r2, r2, #8
   1c1a4:	adc	r5, r7, #0
   1c1a8:	strb	r4, [r6, #5]
   1c1ac:	strb	r4, [r6, #3]
   1c1b0:	strb	r4, [r6, #2]
   1c1b4:	strb	r4, [r6, #1]
   1c1b8:	strb	r4, [r6, #4]!
   1c1bc:	cmp	r1, #0
   1c1c0:	strb	r4, [r6, #3]
   1c1c4:	strb	r4, [r6, #2]
   1c1c8:	stm	r3, {r2, r5}
   1c1cc:	beq	1c1f4 <next@@Base+0x39d0>
   1c1d0:	ldr	r3, [pc, #288]	; 1c2f8 <next@@Base+0x3ad4>
   1c1d4:	mov	r1, r2
   1c1d8:	mov	r2, #1
   1c1dc:	ldr	r3, [pc, r3]
   1c1e0:	bl	126a0 <fwrite@plt>
   1c1e4:	ldr	r0, [pc, #272]	; 1c2fc <next@@Base+0x3ad8>
   1c1e8:	ldr	r0, [pc, r0]
   1c1ec:	bl	12634 <free@plt>
   1c1f0:	b	1c240 <next@@Base+0x3a1c>
   1c1f4:	ldr	r1, [pc, #260]	; 1c300 <next@@Base+0x3adc>
   1c1f8:	mov	r2, #4
   1c1fc:	ldr	r1, [pc, r1]
   1c200:	bl	127b4 <msync@plt>
   1c204:	cmn	r0, #1
   1c208:	beq	1c290 <next@@Base+0x3a6c>
   1c20c:	ldr	r1, [pc, #252]	; 1c310 <next@@Base+0x3aec>
   1c210:	ldr	r1, [pc, r1]
   1c214:	ldr	r0, [pc, #248]	; 1c314 <next@@Base+0x3af0>
   1c218:	ldr	r0, [pc, r0]
   1c21c:	bl	12790 <munmap@plt>
   1c220:	ldr	r0, [pc, #240]	; 1c318 <next@@Base+0x3af4>
   1c224:	ldr	r1, [pc, #240]	; 1c31c <next@@Base+0x3af8>
   1c228:	mov	r2, #0
   1c22c:	add	r0, pc, r0
   1c230:	add	r1, pc, r1
   1c234:	str	r2, [r0]
   1c238:	str	r2, [r0, #4]
   1c23c:	str	r2, [r1]
   1c240:	ldr	r0, [pc, #216]	; 1c320 <next@@Base+0x3afc>
   1c244:	ldr	r0, [pc, r0]
   1c248:	bl	1261c <fflush@plt>
   1c24c:	ldr	r0, [pc, #208]	; 1c324 <next@@Base+0x3b00>
   1c250:	ldr	r0, [pc, r0]
   1c254:	bl	1c7d0 <__gcov_flush@@Base+0x30c>
   1c258:	ldr	r0, [pc, #200]	; 1c328 <next@@Base+0x3b04>
   1c25c:	ldr	r0, [pc, r0]
   1c260:	bl	12784 <fclose@plt>
   1c264:	ldr	r0, [pc, #192]	; 1c32c <next@@Base+0x3b08>
   1c268:	ldr	r1, [pc, #192]	; 1c330 <next@@Base+0x3b0c>
   1c26c:	mov	r2, #0
   1c270:	add	r0, pc, r0
   1c274:	add	r1, pc, r1
   1c278:	str	r2, [r0]
   1c27c:	str	r2, [r1]
   1c280:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1c284:	ldr	r0, [pc, #168]	; 1c334 <next@@Base+0x3b10>
   1c288:	ldr	r0, [pc, r0]
   1c28c:	b	12634 <free@plt>
   1c290:	bl	12730 <__errno_location@plt>
   1c294:	ldr	r1, [pc, #104]	; 1c304 <next@@Base+0x3ae0>
   1c298:	ldr	r1, [pc, r1]
   1c29c:	ldr	r0, [r0]
   1c2a0:	ldr	r4, [r1]
   1c2a4:	ldr	r5, [pc, #92]	; 1c308 <next@@Base+0x3ae4>
   1c2a8:	ldr	r5, [pc, r5]
   1c2ac:	bl	126dc <strerror@plt>
   1c2b0:	ldr	r1, [pc, #84]	; 1c30c <next@@Base+0x3ae8>
   1c2b4:	mov	r3, r0
   1c2b8:	mov	r0, r4
   1c2bc:	add	r1, pc, r1
   1c2c0:	mov	r2, r5
   1c2c4:	bl	12724 <fprintf@plt>
   1c2c8:	b	1c20c <next@@Base+0x39e8>
   1c2cc:	andeq	r4, r1, r4, asr #12
   1c2d0:	andeq	r4, r1, r0, lsr #12
   1c2d4:	andeq	r4, r1, r8, lsl r6
   1c2d8:	andeq	r4, r1, ip, lsl #12
   1c2dc:	andeq	r4, r1, r8, lsl #12
   1c2e0:	andeq	r4, r1, ip, ror #11
   1c2e4:			; <UNDEFINED> instruction: 0x000145b0
   1c2e8:	andeq	r4, r1, ip, lsr #11
   1c2ec:	muleq	r1, ip, r5
   1c2f0:	muleq	r1, r8, r5
   1c2f4:	andeq	r4, r1, r4, lsl #11
   1c2f8:	andeq	r4, r1, r4, lsr r5
   1c2fc:	andeq	r4, r1, ip, lsr #10
   1c300:	andeq	r4, r1, ip, lsr r5
   1c304:	andeq	r2, r1, ip, lsl lr
   1c308:	andeq	r4, r1, r0, ror #8
   1c30c:	muleq	r0, sp, r4
   1c310:	andeq	r4, r1, r8, lsr #10
   1c314:	strdeq	r4, [r1], -ip
   1c318:	andeq	r4, r1, ip, lsl #10
   1c31c:	andeq	r4, r1, r4, ror #9
   1c320:	andeq	r4, r1, ip, asr #9
   1c324:	andeq	r2, r1, r0, lsl #29
   1c328:			; <UNDEFINED> instruction: 0x000144b4
   1c32c:	andeq	r4, r1, r0, lsr #9
   1c330:	andeq	r4, r1, r0, lsr #9
   1c334:	andeq	r4, r1, r0, lsl #9
   1c338:	push	{r4, sl, fp, lr}
   1c33c:	add	fp, sp, #8
   1c340:	mov	r4, r0
   1c344:	mov	r0, #12
   1c348:	bl	126c4 <malloc@plt>
   1c34c:	ldr	r1, [pc, #60]	; 1c390 <next@@Base+0x3b6c>
   1c350:	mov	r2, #0
   1c354:	add	r1, pc, r1
   1c358:	stm	r0, {r1, r4}
   1c35c:	str	r2, [r0, #8]
   1c360:	ldr	r1, [pc, #44]	; 1c394 <next@@Base+0x3b70>
   1c364:	ldr	r1, [pc, r1]
   1c368:	mov	r2, r1
   1c36c:	ldr	r3, [r2], #4
   1c370:	ldr	r4, [r2]
   1c374:	cmp	r3, #0
   1c378:	mov	r3, r2
   1c37c:	addne	r3, r4, #8
   1c380:	moveq	r2, r1
   1c384:	str	r0, [r3]
   1c388:	str	r0, [r2]
   1c38c:	pop	{r4, sl, fp, pc}
   1c390:	ldrdeq	r4, [r1], -r8
   1c394:	andeq	r2, r1, ip, asr #26
   1c398:	push	{r4, r5, fp, lr}
   1c39c:	add	fp, sp, #8
   1c3a0:	ldr	r0, [pc, #56]	; 1c3e0 <next@@Base+0x3bbc>
   1c3a4:	ldr	r0, [pc, r0]
   1c3a8:	ldr	r4, [r0]
   1c3ac:	cmp	r4, #0
   1c3b0:	beq	1c3dc <next@@Base+0x3bb8>
   1c3b4:	ldr	r5, [pc, #40]	; 1c3e4 <next@@Base+0x3bc0>
   1c3b8:	add	r5, pc, r5
   1c3bc:	ldr	r0, [r4]
   1c3c0:	cmp	r0, r5
   1c3c4:	bne	1c3d0 <next@@Base+0x3bac>
   1c3c8:	ldr	r0, [r4, #4]
   1c3cc:	blx	r0
   1c3d0:	ldr	r4, [r4, #8]
   1c3d4:	cmp	r4, #0
   1c3d8:	bne	1c3bc <next@@Base+0x3b98>
   1c3dc:	pop	{r4, r5, fp, pc}
   1c3e0:	andeq	r2, r1, ip, lsl #26
   1c3e4:	andeq	r4, r1, r4, ror r3
   1c3e8:	push	{r4, r5, r6, r7, fp, lr}
   1c3ec:	add	fp, sp, #16
   1c3f0:	ldr	r4, [pc, #100]	; 1c45c <next@@Base+0x3c38>
   1c3f4:	ldr	r4, [pc, r4]
   1c3f8:	ldr	r0, [r4]
   1c3fc:	cmp	r0, #0
   1c400:	beq	1c458 <next@@Base+0x3c34>
   1c404:	ldr	r5, [pc, #84]	; 1c460 <next@@Base+0x3c3c>
   1c408:	mov	r6, #0
   1c40c:	add	r5, pc, r5
   1c410:	ldr	r1, [r0]
   1c414:	ldr	r7, [r0, #8]
   1c418:	cmp	r1, r5
   1c41c:	beq	1c428 <next@@Base+0x3c04>
   1c420:	mov	r6, r0
   1c424:	b	1c44c <next@@Base+0x3c28>
   1c428:	ldr	r1, [r4]
   1c42c:	cmp	r0, r1
   1c430:	streq	r7, [r4]
   1c434:	ldr	r1, [r4, #4]
   1c438:	cmp	r0, r1
   1c43c:	streq	r6, [r4, #4]
   1c440:	cmp	r6, #0
   1c444:	strne	r7, [r6, #8]
   1c448:	bl	12634 <free@plt>
   1c44c:	mov	r0, r7
   1c450:	cmp	r7, #0
   1c454:	bne	1c410 <next@@Base+0x3bec>
   1c458:	pop	{r4, r5, r6, r7, fp, pc}
   1c45c:			; <UNDEFINED> instruction: 0x00012cbc
   1c460:	andeq	r4, r1, r0, lsr #6
   1c464:	push	{r4, sl, fp, lr}
   1c468:	add	fp, sp, #8
   1c46c:	mov	r4, r0
   1c470:	mov	r0, #12
   1c474:	bl	126c4 <malloc@plt>
   1c478:	ldr	r1, [pc, #60]	; 1c4bc <next@@Base+0x3c98>
   1c47c:	mov	r2, #0
   1c480:	add	r1, pc, r1
   1c484:	stm	r0, {r1, r4}
   1c488:	str	r2, [r0, #8]
   1c48c:	ldr	r1, [pc, #44]	; 1c4c0 <next@@Base+0x3c9c>
   1c490:	ldr	r1, [pc, r1]
   1c494:	mov	r2, r1
   1c498:	ldr	r3, [r2], #4
   1c49c:	ldr	r4, [r2]
   1c4a0:	cmp	r3, #0
   1c4a4:	mov	r3, r2
   1c4a8:	addne	r3, r4, #8
   1c4ac:	moveq	r2, r1
   1c4b0:	str	r0, [r3]
   1c4b4:	str	r0, [r2]
   1c4b8:	pop	{r4, sl, fp, pc}
   1c4bc:	andeq	r4, r1, ip, lsr #5
   1c4c0:	andeq	r2, r1, ip, lsl ip

0001c4c4 <__gcov_flush@@Base>:
   1c4c4:	push	{r4, sl, fp, lr}
   1c4c8:	add	fp, sp, #8
   1c4cc:	ldr	r0, [pc, #36]	; 1c4f8 <__gcov_flush@@Base+0x34>
   1c4d0:	ldr	r0, [pc, r0]
   1c4d4:	ldr	r4, [r0]
   1c4d8:	cmp	r4, #0
   1c4dc:	beq	1c4f4 <__gcov_flush@@Base+0x30>
   1c4e0:	ldr	r0, [r4, #4]
   1c4e4:	blx	r0
   1c4e8:	ldr	r4, [r4, #8]
   1c4ec:	cmp	r4, #0
   1c4f0:	bne	1c4e0 <__gcov_flush@@Base+0x1c>
   1c4f4:	pop	{r4, sl, fp, pc}
   1c4f8:	ldrdeq	r2, [r1], -ip
   1c4fc:	push	{r4, r5, r6, r7, fp, lr}
   1c500:	add	fp, sp, #16
   1c504:	ldr	r4, [pc, #100]	; 1c570 <__gcov_flush@@Base+0xac>
   1c508:	ldr	r4, [pc, r4]
   1c50c:	ldr	r0, [r4]
   1c510:	cmp	r0, #0
   1c514:	beq	1c56c <__gcov_flush@@Base+0xa8>
   1c518:	ldr	r5, [pc, #84]	; 1c574 <__gcov_flush@@Base+0xb0>
   1c51c:	mov	r6, #0
   1c520:	add	r5, pc, r5
   1c524:	ldr	r1, [r0]
   1c528:	ldr	r7, [r0, #8]
   1c52c:	cmp	r1, r5
   1c530:	beq	1c53c <__gcov_flush@@Base+0x78>
   1c534:	mov	r6, r0
   1c538:	b	1c560 <__gcov_flush@@Base+0x9c>
   1c53c:	ldr	r1, [r4]
   1c540:	cmp	r0, r1
   1c544:	streq	r7, [r4]
   1c548:	ldr	r1, [r4, #4]
   1c54c:	cmp	r0, r1
   1c550:	streq	r6, [r4, #4]
   1c554:	cmp	r6, #0
   1c558:	strne	r7, [r6, #8]
   1c55c:	bl	12634 <free@plt>
   1c560:	mov	r0, r7
   1c564:	cmp	r7, #0
   1c568:	bne	1c524 <__gcov_flush@@Base+0x60>
   1c56c:	pop	{r4, r5, r6, r7, fp, pc}
   1c570:	andeq	r2, r1, r4, lsr #23
   1c574:	andeq	r4, r1, ip, lsl #4
   1c578:	push	{r4, r5, fp, lr}
   1c57c:	add	fp, sp, #8
   1c580:	mov	r4, r1
   1c584:	cmp	r0, #0
   1c588:	beq	1c5d8 <__gcov_flush@@Base+0x114>
   1c58c:	mov	r5, r0
   1c590:	mov	r0, #12
   1c594:	bl	126c4 <malloc@plt>
   1c598:	ldr	r1, [pc, #204]	; 1c66c <__gcov_flush@@Base+0x1a8>
   1c59c:	mov	r2, #0
   1c5a0:	add	r1, pc, r1
   1c5a4:	stm	r0, {r1, r5}
   1c5a8:	str	r2, [r0, #8]
   1c5ac:	ldr	r1, [pc, #188]	; 1c670 <__gcov_flush@@Base+0x1ac>
   1c5b0:	ldr	r1, [pc, r1]
   1c5b4:	mov	r2, r1
   1c5b8:	ldr	r3, [r2], #4
   1c5bc:	ldr	r5, [r2]
   1c5c0:	cmp	r3, #0
   1c5c4:	mov	r3, r2
   1c5c8:	addne	r3, r5, #8
   1c5cc:	moveq	r2, r1
   1c5d0:	str	r0, [r3]
   1c5d4:	str	r0, [r2]
   1c5d8:	cmp	r4, #0
   1c5dc:	beq	1c628 <__gcov_flush@@Base+0x164>
   1c5e0:	mov	r0, #12
   1c5e4:	bl	126c4 <malloc@plt>
   1c5e8:	ldr	r1, [pc, #132]	; 1c674 <__gcov_flush@@Base+0x1b0>
   1c5ec:	mov	r2, #0
   1c5f0:	add	r1, pc, r1
   1c5f4:	stm	r0, {r1, r4}
   1c5f8:	str	r2, [r0, #8]
   1c5fc:	ldr	r1, [pc, #116]	; 1c678 <__gcov_flush@@Base+0x1b4>
   1c600:	ldr	r1, [pc, r1]
   1c604:	mov	r2, r1
   1c608:	ldr	r3, [r2], #4
   1c60c:	ldr	r5, [r2]
   1c610:	cmp	r3, #0
   1c614:	mov	r3, r2
   1c618:	addne	r3, r5, #8
   1c61c:	moveq	r2, r1
   1c620:	str	r0, [r3]
   1c624:	str	r0, [r2]
   1c628:	ldr	r1, [pc, #76]	; 1c67c <__gcov_flush@@Base+0x1b8>
   1c62c:	add	r1, pc, r1
   1c630:	ldrb	r0, [r1]
   1c634:	cmp	r0, #0
   1c638:	popne	{r4, r5, fp, pc}
   1c63c:	ldr	r0, [pc, #60]	; 1c680 <__gcov_flush@@Base+0x1bc>
   1c640:	mov	r2, #1
   1c644:	strb	r2, [r1]
   1c648:	add	r0, pc, r0
   1c64c:	bl	1cb2c <__libc_csu_fini@@Base+0x4>
   1c650:	ldr	r0, [pc, #44]	; 1c684 <__gcov_flush@@Base+0x1c0>
   1c654:	add	r0, pc, r0
   1c658:	bl	1cb2c <__libc_csu_fini@@Base+0x4>
   1c65c:	ldr	r0, [pc, #36]	; 1c688 <__gcov_flush@@Base+0x1c4>
   1c660:	add	r0, pc, r0
   1c664:	pop	{r4, r5, fp, lr}
   1c668:	b	1cb2c <__libc_csu_fini@@Base+0x4>
   1c66c:	andeq	r4, r1, ip, lsl #3
   1c670:	andeq	r2, r1, r0, lsl #22
   1c674:	andeq	r4, r1, ip, lsr r1
   1c678:	andeq	r2, r1, ip, lsr #21
   1c67c:	andeq	r4, r1, r4, lsl #2
   1c680:			; <UNDEFINED> instruction: 0xfffffeac
   1c684:			; <UNDEFINED> instruction: 0xfffffd8c
   1c688:			; <UNDEFINED> instruction: 0xfffffd30
   1c68c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c690:	add	fp, sp, #24
   1c694:	ldr	r7, [pc, #76]	; 1c6e8 <__gcov_flush@@Base+0x224>
   1c698:	mov	r4, r0
   1c69c:	mov	r5, #1
   1c6a0:	mov	r8, #0
   1c6a4:	ldr	r7, [pc, r7]
   1c6a8:	mov	r6, #47	; 0x2f
   1c6ac:	b	1c6b4 <__gcov_flush@@Base+0x1f0>
   1c6b0:	add	r5, r5, #1
   1c6b4:	ldrb	r0, [r4, r5]
   1c6b8:	cmp	r0, #47	; 0x2f
   1c6bc:	beq	1c6cc <__gcov_flush@@Base+0x208>
   1c6c0:	cmp	r0, #0
   1c6c4:	bne	1c6b0 <__gcov_flush@@Base+0x1ec>
   1c6c8:	b	1c6e4 <__gcov_flush@@Base+0x220>
   1c6cc:	strb	r8, [r4, r5]
   1c6d0:	ldr	r1, [r7]
   1c6d4:	mov	r0, r4
   1c6d8:	bl	12748 <mkdir@plt>
   1c6dc:	strb	r6, [r4, r5]
   1c6e0:	b	1c6b0 <__gcov_flush@@Base+0x1ec>
   1c6e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c6e8:	andeq	r2, r1, r4, lsl #20
   1c6ec:	ldr	r0, [pc, #8]	; 1c6fc <__gcov_flush@@Base+0x238>
   1c6f0:	ldr	r0, [pc, r0]
   1c6f4:	ldr	r0, [r0]
   1c6f8:	bx	lr
   1c6fc:			; <UNDEFINED> instruction: 0x000129b8
   1c700:	ldr	r1, [pc, #8]	; 1c710 <__gcov_flush@@Base+0x24c>
   1c704:	ldr	r1, [pc, r1]
   1c708:	str	r0, [r1]
   1c70c:	bx	lr
   1c710:	andeq	r2, r1, r4, lsr #19
   1c714:	push	{r4, r5, r6, sl, fp, lr}
   1c718:	add	fp, sp, #16
   1c71c:	sub	sp, sp, #392	; 0x188
   1c720:	mov	r6, sp
   1c724:	mov	r5, r0
   1c728:	mov	r0, r6
   1c72c:	mov	r4, r1
   1c730:	bl	12670 <uname@plt>
   1c734:	cmp	r0, #0
   1c738:	blt	1c750 <__gcov_flush@@Base+0x28c>
   1c73c:	add	r1, r6, #65	; 0x41
   1c740:	mov	r0, r5
   1c744:	mov	r2, r4
   1c748:	bl	1276c <strncpy@plt>
   1c74c:	mov	r0, #0
   1c750:	sub	sp, fp, #16
   1c754:	pop	{r4, r5, r6, sl, fp, pc}
   1c758:	push	{r4, r5, r6, sl, fp, lr}
   1c75c:	add	fp, sp, #16
   1c760:	sub	sp, sp, #32
   1c764:	mov	r4, #0
   1c768:	mov	r5, r0
   1c76c:	str	r4, [sp, #20]
   1c770:	str	r4, [sp, #16]
   1c774:	str	r4, [sp, #12]
   1c778:	str	r4, [sp, #8]
   1c77c:	strh	r4, [sp, #2]
   1c780:	bl	126f4 <getpid@plt>
   1c784:	mov	r6, sp
   1c788:	str	r0, [sp, #24]
   1c78c:	mov	r0, #1
   1c790:	strh	r0, [sp]
   1c794:	mov	r0, r5
   1c798:	mov	r1, #14
   1c79c:	mov	r2, r6
   1c7a0:	bl	1279c <fcntl64@plt>
   1c7a4:	cmn	r0, #1
   1c7a8:	bne	1c7c4 <__gcov_flush@@Base+0x300>
   1c7ac:	bl	12730 <__errno_location@plt>
   1c7b0:	ldr	r0, [r0]
   1c7b4:	cmp	r0, #4
   1c7b8:	beq	1c794 <__gcov_flush@@Base+0x2d0>
   1c7bc:	cmp	r0, #37	; 0x25
   1c7c0:	mvneq	r4, #0
   1c7c4:	mov	r0, r4
   1c7c8:	sub	sp, fp, #16
   1c7cc:	pop	{r4, r5, r6, sl, fp, pc}
   1c7d0:	push	{r4, r5, r6, sl, fp, lr}
   1c7d4:	add	fp, sp, #16
   1c7d8:	sub	sp, sp, #32
   1c7dc:	mov	r4, #0
   1c7e0:	mov	r5, r0
   1c7e4:	str	r4, [sp, #20]
   1c7e8:	str	r4, [sp, #16]
   1c7ec:	str	r4, [sp, #12]
   1c7f0:	str	r4, [sp, #8]
   1c7f4:	strh	r4, [sp, #2]
   1c7f8:	bl	126f4 <getpid@plt>
   1c7fc:	mov	r6, sp
   1c800:	str	r0, [sp, #24]
   1c804:	mov	r0, #2
   1c808:	strh	r0, [sp]
   1c80c:	mov	r0, r5
   1c810:	mov	r1, #14
   1c814:	mov	r2, r6
   1c818:	bl	1279c <fcntl64@plt>
   1c81c:	cmn	r0, #1
   1c820:	bne	1c83c <__gcov_flush@@Base+0x378>
   1c824:	bl	12730 <__errno_location@plt>
   1c828:	ldr	r0, [r0]
   1c82c:	cmp	r0, #4
   1c830:	beq	1c80c <__gcov_flush@@Base+0x348>
   1c834:	cmp	r0, #37	; 0x25
   1c838:	mvneq	r4, #0
   1c83c:	mov	r0, r4
   1c840:	sub	sp, fp, #16
   1c844:	pop	{r4, r5, r6, sl, fp, pc}
   1c848:	push	{r4, r5, fp, lr}
   1c84c:	add	fp, sp, #8
   1c850:	sub	sp, sp, #32
   1c854:	mov	r2, #182	; 0xb6
   1c858:	orr	r2, r2, #256	; 0x100
   1c85c:	mov	r1, #66	; 0x42
   1c860:	bl	126ac <open64@plt>
   1c864:	cmp	r0, #0
   1c868:	blt	1c8e4 <__gcov_flush@@Base+0x420>
   1c86c:	mov	r4, r0
   1c870:	mov	r0, #0
   1c874:	str	r0, [sp, #20]
   1c878:	str	r0, [sp, #16]
   1c87c:	str	r0, [sp, #12]
   1c880:	str	r0, [sp, #8]
   1c884:	strh	r0, [sp, #2]
   1c888:	bl	126f4 <getpid@plt>
   1c88c:	mov	r5, sp
   1c890:	str	r0, [sp, #24]
   1c894:	mov	r0, #1
   1c898:	strh	r0, [sp]
   1c89c:	mov	r0, r4
   1c8a0:	mov	r1, #14
   1c8a4:	mov	r2, r5
   1c8a8:	bl	1279c <fcntl64@plt>
   1c8ac:	cmn	r0, #1
   1c8b0:	bne	1c8cc <__gcov_flush@@Base+0x408>
   1c8b4:	bl	12730 <__errno_location@plt>
   1c8b8:	ldr	r0, [r0]
   1c8bc:	cmp	r0, #4
   1c8c0:	beq	1c89c <__gcov_flush@@Base+0x3d8>
   1c8c4:	cmp	r0, #37	; 0x25
   1c8c8:	beq	1c8f0 <__gcov_flush@@Base+0x42c>
   1c8cc:	ldr	r1, [pc, #76]	; 1c920 <__gcov_flush@@Base+0x45c>
   1c8d0:	mov	r0, r4
   1c8d4:	add	r1, pc, r1
   1c8d8:	bl	125f8 <fdopen@plt>
   1c8dc:	sub	sp, fp, #8
   1c8e0:	pop	{r4, r5, fp, pc}
   1c8e4:	mov	r0, #0
   1c8e8:	sub	sp, fp, #8
   1c8ec:	pop	{r4, r5, fp, pc}
   1c8f0:	ldr	r1, [pc, #28]	; 1c914 <__gcov_flush@@Base+0x450>
   1c8f4:	ldr	r2, [pc, #28]	; 1c918 <__gcov_flush@@Base+0x454>
   1c8f8:	ldr	r0, [pc, #28]	; 1c91c <__gcov_flush@@Base+0x458>
   1c8fc:	add	r1, pc, r1
   1c900:	add	r2, pc, r2
   1c904:	ldr	r0, [pc, r0]
   1c908:	ldr	r0, [r0]
   1c90c:	bl	12724 <fprintf@plt>
   1c910:	b	1c8cc <__gcov_flush@@Base+0x408>
   1c914:	andeq	r1, r0, lr, ror lr
   1c918:	andeq	r1, r0, r3, asr #29
   1c91c:			; <UNDEFINED> instruction: 0x000127b0
   1c920:	andeq	r1, r0, r4, lsl #26
   1c924:	push	{r4, r5, r6, sl, fp, lr}
   1c928:	add	fp, sp, #16
   1c92c:	mov	r6, r0
   1c930:	ldr	r0, [pc, #120]	; 1c9b0 <__gcov_flush@@Base+0x4ec>
   1c934:	mov	r4, r1
   1c938:	add	r0, pc, r0
   1c93c:	bl	126b8 <getenv@plt>
   1c940:	mov	r5, r0
   1c944:	ldr	r0, [pc, #104]	; 1c9b4 <__gcov_flush@@Base+0x4f0>
   1c948:	add	r0, pc, r0
   1c94c:	bl	126b8 <getenv@plt>
   1c950:	mov	r1, #0
   1c954:	str	r1, [r4]
   1c958:	str	r1, [r6]
   1c95c:	cmp	r5, #0
   1c960:	ldrbne	r2, [r5]
   1c964:	cmpne	r2, #0
   1c968:	bne	1c974 <__gcov_flush@@Base+0x4b0>
   1c96c:	mov	r0, r1
   1c970:	pop	{r4, r5, r6, sl, fp, pc}
   1c974:	cmp	r0, #0
   1c978:	beq	1c990 <__gcov_flush@@Base+0x4cc>
   1c97c:	mov	r1, #0
   1c980:	mov	r2, #10
   1c984:	bl	12604 <strtol@plt>
   1c988:	bic	r0, r0, r0, asr #31
   1c98c:	b	1c994 <__gcov_flush@@Base+0x4d0>
   1c990:	mov	r0, #0
   1c994:	str	r0, [r6]
   1c998:	mov	r0, r5
   1c99c:	bl	1270c <strlen@plt>
   1c9a0:	mov	r1, r5
   1c9a4:	str	r0, [r4]
   1c9a8:	mov	r0, r1
   1c9ac:	pop	{r4, r5, r6, sl, fp, pc}
   1c9b0:			; <UNDEFINED> instruction: 0x00001eb9
   1c9b4:			; <UNDEFINED> instruction: 0x00001eb5
   1c9b8:	push	{r4, r5, r6, r7, fp, lr}
   1c9bc:	add	fp, sp, #16
   1c9c0:	mov	r6, r0
   1c9c4:	ldr	r0, [fp, #8]
   1c9c8:	mov	r5, r3
   1c9cc:	mov	r7, r2
   1c9d0:	mov	r4, r1
   1c9d4:	cmp	r0, #1
   1c9d8:	blt	1ca10 <__gcov_flush@@Base+0x54c>
   1c9dc:	add	r1, r4, #1
   1c9e0:	mov	r2, #0
   1c9e4:	ldrb	r3, [r1]
   1c9e8:	cmp	r3, #47	; 0x2f
   1c9ec:	beq	1c9fc <__gcov_flush@@Base+0x538>
   1c9f0:	cmp	r3, #0
   1c9f4:	bne	1ca04 <__gcov_flush@@Base+0x540>
   1c9f8:	b	1ca10 <__gcov_flush@@Base+0x54c>
   1c9fc:	add	r2, r2, #1
   1ca00:	mov	r4, r1
   1ca04:	add	r1, r1, #1
   1ca08:	cmp	r2, r0
   1ca0c:	blt	1c9e4 <__gcov_flush@@Base+0x520>
   1ca10:	mov	r0, r6
   1ca14:	mov	r1, r7
   1ca18:	mov	r2, r5
   1ca1c:	bl	1264c <memcpy@plt>
   1ca20:	add	r0, r7, r5
   1ca24:	ldrb	r0, [r0, #-1]
   1ca28:	cmp	r0, #47	; 0x2f
   1ca2c:	movne	r0, #47	; 0x2f
   1ca30:	strbne	r0, [r6, r5]
   1ca34:	mov	r0, r4
   1ca38:	addne	r5, r5, #1
   1ca3c:	add	r5, r6, r5
   1ca40:	bl	1270c <strlen@plt>
   1ca44:	add	r2, r0, #1
   1ca48:	mov	r0, r5
   1ca4c:	mov	r1, r4
   1ca50:	pop	{r4, r5, r6, r7, fp, lr}
   1ca54:	b	1264c <memcpy@plt>
   1ca58:	mov	r1, #47	; 0x2f
   1ca5c:	b	12718 <strchr@plt>
   1ca60:	mov	r1, #47	; 0x2f
   1ca64:	b	127a8 <strrchr@plt>
   1ca68:	push	{fp, lr}
   1ca6c:	mov	fp, sp
   1ca70:	sub	sp, sp, #8
   1ca74:	mov	r0, #0
   1ca78:	str	r0, [sp, #4]
   1ca7c:	add	r1, sp, #4
   1ca80:	mov	r0, #2
   1ca84:	bl	12778 <prctl@plt>
   1ca88:	ldr	r1, [sp, #4]
   1ca8c:	cmp	r0, #0
   1ca90:	cmpeq	r1, #9
   1ca94:	bne	1caa8 <__gcov_flush@@Base+0x5e4>
   1ca98:	mov	r0, #1
   1ca9c:	mov	r1, #0
   1caa0:	bl	12778 <prctl@plt>
   1caa4:	ldr	r1, [sp, #4]
   1caa8:	sub	r0, r1, #9
   1caac:	clz	r0, r0
   1cab0:	lsr	r0, r0, #5
   1cab4:	mov	sp, fp
   1cab8:	pop	{fp, pc}
   1cabc:	mov	r0, #1
   1cac0:	mov	r1, #9
   1cac4:	b	12778 <prctl@plt>

0001cac8 <__libc_csu_init@@Base>:
   1cac8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cacc:	mov	r7, r0
   1cad0:	ldr	r6, [pc, #72]	; 1cb20 <__libc_csu_init@@Base+0x58>
   1cad4:	ldr	r5, [pc, #72]	; 1cb24 <__libc_csu_init@@Base+0x5c>
   1cad8:	add	r6, pc, r6
   1cadc:	add	r5, pc, r5
   1cae0:	sub	r6, r6, r5
   1cae4:	mov	r8, r1
   1cae8:	mov	r9, r2
   1caec:	bl	125d8 <fdopen@plt-0x20>
   1caf0:	asrs	r6, r6, #2
   1caf4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1caf8:	mov	r4, #0
   1cafc:	add	r4, r4, #1
   1cb00:	ldr	r3, [r5], #4
   1cb04:	mov	r2, r9
   1cb08:	mov	r1, r8
   1cb0c:	mov	r0, r7
   1cb10:	blx	r3
   1cb14:	cmp	r6, r4
   1cb18:	bne	1cafc <__libc_csu_init@@Base+0x34>
   1cb1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cb20:	andeq	r2, r1, r4, lsr #8
   1cb24:	andeq	r2, r1, ip, lsl #8

0001cb28 <__libc_csu_fini@@Base>:
   1cb28:	bx	lr
   1cb2c:	ldr	r3, [pc, #12]	; 1cb40 <__libc_csu_fini@@Base+0x18>
   1cb30:	mov	r1, #0
   1cb34:	add	r3, pc, r3
   1cb38:	ldr	r2, [r3]
   1cb3c:	b	1273c <__cxa_atexit@plt>
   1cb40:	andeq	r2, r1, ip, lsl #11

Disassembly of section .fini:

0001cb44 <.fini>:
   1cb44:	push	{r3, lr}
   1cb48:	pop	{r3, pc}
