
../repos/coreutils/src/chmod:     file format elf32-littlearm


Disassembly of section .init:

000110d0 <.init>:
   110d0:	push	{r3, lr}
   110d4:	bl	1142c <__assert_fail@plt+0x48>
   110d8:	pop	{r3, pc}

Disassembly of section .plt:

000110dc <fstatfs64@plt-0x14>:
   110dc:	push	{lr}		; (str lr, [sp, #-4]!)
   110e0:	ldr	lr, [pc, #4]	; 110ec <fstatfs64@plt-0x4>
   110e4:	add	lr, pc, lr
   110e8:	ldr	pc, [lr, #8]!
   110ec:	andeq	r8, r1, r4, lsl pc

000110f0 <fstatfs64@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #24, 20	; 0x18000
   110f8:	ldr	pc, [ip, #3860]!	; 0xf14

000110fc <calloc@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #24, 20	; 0x18000
   11104:	ldr	pc, [ip, #3852]!	; 0xf0c

00011108 <fputs_unlocked@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #24, 20	; 0x18000
   11110:	ldr	pc, [ip, #3844]!	; 0xf04

00011114 <raise@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #24, 20	; 0x18000
   1111c:	ldr	pc, [ip, #3836]!	; 0xefc

00011120 <strcmp@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #24, 20	; 0x18000
   11128:	ldr	pc, [ip, #3828]!	; 0xef4

0001112c <fflush@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #24, 20	; 0x18000
   11134:	ldr	pc, [ip, #3820]!	; 0xeec

00011138 <memmove@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #24, 20	; 0x18000
   11140:	ldr	pc, [ip, #3812]!	; 0xee4

00011144 <free@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #24, 20	; 0x18000
   1114c:	ldr	pc, [ip, #3804]!	; 0xedc

00011150 <_exit@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #24, 20	; 0x18000
   11158:	ldr	pc, [ip, #3796]!	; 0xed4

0001115c <memcpy@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #24, 20	; 0x18000
   11164:	ldr	pc, [ip, #3788]!	; 0xecc

00011168 <mbsinit@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #24, 20	; 0x18000
   11170:	ldr	pc, [ip, #3780]!	; 0xec4

00011174 <memcmp@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #24, 20	; 0x18000
   1117c:	ldr	pc, [ip, #3772]!	; 0xebc

00011180 <dcgettext@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #24, 20	; 0x18000
   11188:	ldr	pc, [ip, #3764]!	; 0xeb4

0001118c <realloc@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #24, 20	; 0x18000
   11194:	ldr	pc, [ip, #3756]!	; 0xeac

00011198 <textdomain@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #24, 20	; 0x18000
   111a0:	ldr	pc, [ip, #3748]!	; 0xea4

000111a4 <__fxstatat64@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #24, 20	; 0x18000
   111ac:	ldr	pc, [ip, #3740]!	; 0xe9c

000111b0 <iswprint@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #24, 20	; 0x18000
   111b8:	ldr	pc, [ip, #3732]!	; 0xe94

000111bc <__fxstat64@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #24, 20	; 0x18000
   111c4:	ldr	pc, [ip, #3724]!	; 0xe8c

000111c8 <lseek64@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #24, 20	; 0x18000
   111d0:	ldr	pc, [ip, #3716]!	; 0xe84

000111d4 <__ctype_get_mb_cur_max@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #24, 20	; 0x18000
   111dc:	ldr	pc, [ip, #3708]!	; 0xe7c

000111e0 <__fpending@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #24, 20	; 0x18000
   111e8:	ldr	pc, [ip, #3700]!	; 0xe74

000111ec <ferror_unlocked@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #24, 20	; 0x18000
   111f4:	ldr	pc, [ip, #3692]!	; 0xe6c

000111f8 <mbrtowc@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #24, 20	; 0x18000
   11200:	ldr	pc, [ip, #3684]!	; 0xe64

00011204 <error@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #24, 20	; 0x18000
   1120c:	ldr	pc, [ip, #3676]!	; 0xe5c

00011210 <open64@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #24, 20	; 0x18000
   11218:	ldr	pc, [ip, #3668]!	; 0xe54

0001121c <malloc@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #24, 20	; 0x18000
   11224:	ldr	pc, [ip, #3660]!	; 0xe4c

00011228 <__libc_start_main@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #24, 20	; 0x18000
   11230:	ldr	pc, [ip, #3652]!	; 0xe44

00011234 <__freading@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #24, 20	; 0x18000
   1123c:	ldr	pc, [ip, #3644]!	; 0xe3c

00011240 <__gmon_start__@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #24, 20	; 0x18000
   11248:	ldr	pc, [ip, #3636]!	; 0xe34

0001124c <getopt_long@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #24, 20	; 0x18000
   11254:	ldr	pc, [ip, #3628]!	; 0xe2c

00011258 <__ctype_b_loc@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #24, 20	; 0x18000
   11260:	ldr	pc, [ip, #3620]!	; 0xe24

00011264 <exit@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #24, 20	; 0x18000
   1126c:	ldr	pc, [ip, #3612]!	; 0xe1c

00011270 <strlen@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #24, 20	; 0x18000
   11278:	ldr	pc, [ip, #3604]!	; 0xe14

0001127c <openat64@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #24, 20	; 0x18000
   11284:	ldr	pc, [ip, #3596]!	; 0xe0c

00011288 <fchmodat@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #24, 20	; 0x18000
   11290:	ldr	pc, [ip, #3588]!	; 0xe04

00011294 <__errno_location@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #24, 20	; 0x18000
   1129c:	ldr	pc, [ip, #3580]!	; 0xdfc

000112a0 <__sprintf_chk@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #24, 20	; 0x18000
   112a8:	ldr	pc, [ip, #3572]!	; 0xdf4

000112ac <__cxa_atexit@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #24, 20	; 0x18000
   112b4:	ldr	pc, [ip, #3564]!	; 0xdec

000112b8 <memset@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #24, 20	; 0x18000
   112c0:	ldr	pc, [ip, #3556]!	; 0xde4

000112c4 <__printf_chk@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #24, 20	; 0x18000
   112cc:	ldr	pc, [ip, #3548]!	; 0xddc

000112d0 <fileno@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #24, 20	; 0x18000
   112d8:	ldr	pc, [ip, #3540]!	; 0xdd4

000112dc <__fprintf_chk@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #24, 20	; 0x18000
   112e4:	ldr	pc, [ip, #3532]!	; 0xdcc

000112e8 <fclose@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #24, 20	; 0x18000
   112f0:	ldr	pc, [ip, #3524]!	; 0xdc4

000112f4 <fseeko64@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #24, 20	; 0x18000
   112fc:	ldr	pc, [ip, #3516]!	; 0xdbc

00011300 <fcntl64@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #24, 20	; 0x18000
   11308:	ldr	pc, [ip, #3508]!	; 0xdb4

0001130c <setlocale@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #24, 20	; 0x18000
   11314:	ldr	pc, [ip, #3500]!	; 0xdac

00011318 <strrchr@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #24, 20	; 0x18000
   11320:	ldr	pc, [ip, #3492]!	; 0xda4

00011324 <nl_langinfo@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #24, 20	; 0x18000
   1132c:	ldr	pc, [ip, #3484]!	; 0xd9c

00011330 <readdir64@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #24, 20	; 0x18000
   11338:	ldr	pc, [ip, #3476]!	; 0xd94

0001133c <fdopendir@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #24, 20	; 0x18000
   11344:	ldr	pc, [ip, #3468]!	; 0xd8c

00011348 <dirfd@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #24, 20	; 0x18000
   11350:	ldr	pc, [ip, #3460]!	; 0xd84

00011354 <fchdir@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #24, 20	; 0x18000
   1135c:	ldr	pc, [ip, #3452]!	; 0xd7c

00011360 <qsort@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #24, 20	; 0x18000
   11368:	ldr	pc, [ip, #3444]!	; 0xd74

0001136c <bindtextdomain@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #24, 20	; 0x18000
   11374:	ldr	pc, [ip, #3436]!	; 0xd6c

00011378 <umask@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #24, 20	; 0x18000
   11380:	ldr	pc, [ip, #3428]!	; 0xd64

00011384 <chmod@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #24, 20	; 0x18000
   1138c:	ldr	pc, [ip, #3420]!	; 0xd5c

00011390 <__xstat64@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #24, 20	; 0x18000
   11398:	ldr	pc, [ip, #3412]!	; 0xd54

0001139c <fputs@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #24, 20	; 0x18000
   113a4:	ldr	pc, [ip, #3404]!	; 0xd4c

000113a8 <strncmp@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #24, 20	; 0x18000
   113b0:	ldr	pc, [ip, #3396]!	; 0xd44

000113b4 <abort@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #24, 20	; 0x18000
   113bc:	ldr	pc, [ip, #3388]!	; 0xd3c

000113c0 <close@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #24, 20	; 0x18000
   113c8:	ldr	pc, [ip, #3380]!	; 0xd34

000113cc <__lxstat64@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #24, 20	; 0x18000
   113d4:	ldr	pc, [ip, #3372]!	; 0xd2c

000113d8 <closedir@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #24, 20	; 0x18000
   113e0:	ldr	pc, [ip, #3364]!	; 0xd24

000113e4 <__assert_fail@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #24, 20	; 0x18000
   113ec:	ldr	pc, [ip, #3356]!	; 0xd1c

Disassembly of section .text:

000113f0 <.text>:
   113f0:	mov	fp, #0
   113f4:	mov	lr, #0
   113f8:	pop	{r1}		; (ldr r1, [sp], #4)
   113fc:	mov	r2, sp
   11400:	push	{r2}		; (str r2, [sp, #-4]!)
   11404:	push	{r0}		; (str r0, [sp, #-4]!)
   11408:	ldr	ip, [pc, #16]	; 11420 <__assert_fail@plt+0x3c>
   1140c:	push	{ip}		; (str ip, [sp, #-4]!)
   11410:	ldr	r0, [pc, #12]	; 11424 <__assert_fail@plt+0x40>
   11414:	ldr	r3, [pc, #12]	; 11428 <__assert_fail@plt+0x44>
   11418:	bl	11228 <__libc_start_main@plt>
   1141c:	bl	113b4 <abort@plt>
   11420:	andeq	r8, r1, r0, lsl lr
   11424:	muleq	r1, r8, r7
   11428:			; <UNDEFINED> instruction: 0x00018db0
   1142c:	ldr	r3, [pc, #20]	; 11448 <__assert_fail@plt+0x64>
   11430:	ldr	r2, [pc, #20]	; 1144c <__assert_fail@plt+0x68>
   11434:	add	r3, pc, r3
   11438:	ldr	r2, [r3, r2]
   1143c:	cmp	r2, #0
   11440:	bxeq	lr
   11444:	b	11240 <__gmon_start__@plt>
   11448:	andeq	r8, r1, r4, asr #23
   1144c:	andeq	r0, r0, ip, lsl #2
   11450:	ldr	r0, [pc, #24]	; 11470 <__assert_fail@plt+0x8c>
   11454:	ldr	r3, [pc, #24]	; 11474 <__assert_fail@plt+0x90>
   11458:	cmp	r3, r0
   1145c:	bxeq	lr
   11460:	ldr	r3, [pc, #16]	; 11478 <__assert_fail@plt+0x94>
   11464:	cmp	r3, #0
   11468:	bxeq	lr
   1146c:	bx	r3
   11470:	andeq	sl, r2, r8, ror #2
   11474:	andeq	sl, r2, r8, ror #2
   11478:	andeq	r0, r0, r0
   1147c:	ldr	r0, [pc, #36]	; 114a8 <__assert_fail@plt+0xc4>
   11480:	ldr	r1, [pc, #36]	; 114ac <__assert_fail@plt+0xc8>
   11484:	sub	r1, r1, r0
   11488:	asr	r1, r1, #2
   1148c:	add	r1, r1, r1, lsr #31
   11490:	asrs	r1, r1, #1
   11494:	bxeq	lr
   11498:	ldr	r3, [pc, #16]	; 114b0 <__assert_fail@plt+0xcc>
   1149c:	cmp	r3, #0
   114a0:	bxeq	lr
   114a4:	bx	r3
   114a8:	andeq	sl, r2, r8, ror #2
   114ac:	andeq	sl, r2, r8, ror #2
   114b0:	andeq	r0, r0, r0
   114b4:	push	{r4, lr}
   114b8:	ldr	r4, [pc, #24]	; 114d8 <__assert_fail@plt+0xf4>
   114bc:	ldrb	r3, [r4]
   114c0:	cmp	r3, #0
   114c4:	popne	{r4, pc}
   114c8:	bl	11450 <__assert_fail@plt+0x6c>
   114cc:	mov	r3, #1
   114d0:	strb	r3, [r4]
   114d4:	pop	{r4, pc}
   114d8:	andeq	sl, r2, r4, lsl #3
   114dc:	b	1147c <__assert_fail@plt+0x98>
   114e0:	push	{fp, lr}
   114e4:	mov	fp, sp
   114e8:	sub	sp, sp, #64	; 0x40
   114ec:	mov	r8, r0
   114f0:	cmp	r0, #0
   114f4:	bne	11758 <__assert_fail@plt+0x374>
   114f8:	movw	r1, #36539	; 0x8ebb
   114fc:	mov	r0, #0
   11500:	mov	r2, #5
   11504:	movt	r1, #1
   11508:	bl	11180 <dcgettext@plt>
   1150c:	mov	r1, r0
   11510:	movw	r0, #41396	; 0xa1b4
   11514:	movt	r0, #2
   11518:	ldr	r2, [r0]
   1151c:	mov	r0, #1
   11520:	mov	r3, r2
   11524:	str	r2, [sp]
   11528:	bl	112c4 <__printf_chk@plt>
   1152c:	movw	r1, #36674	; 0x8f42
   11530:	mov	r0, #0
   11534:	mov	r2, #5
   11538:	movt	r1, #1
   1153c:	bl	11180 <dcgettext@plt>
   11540:	movw	r9, #41340	; 0xa17c
   11544:	movt	r9, #2
   11548:	ldr	r1, [r9]
   1154c:	bl	11108 <fputs_unlocked@plt>
   11550:	movw	r1, #36779	; 0x8fab
   11554:	mov	r0, #0
   11558:	mov	r2, #5
   1155c:	movt	r1, #1
   11560:	bl	11180 <dcgettext@plt>
   11564:	ldr	r1, [r9]
   11568:	bl	11108 <fputs_unlocked@plt>
   1156c:	movw	r1, #36980	; 0x9074
   11570:	mov	r0, #0
   11574:	mov	r2, #5
   11578:	movt	r1, #1
   1157c:	bl	11180 <dcgettext@plt>
   11580:	ldr	r1, [r9]
   11584:	bl	11108 <fputs_unlocked@plt>
   11588:	movw	r1, #37108	; 0x90f4
   1158c:	mov	r0, #0
   11590:	mov	r2, #5
   11594:	movt	r1, #1
   11598:	bl	11180 <dcgettext@plt>
   1159c:	ldr	r1, [r9]
   115a0:	bl	11108 <fputs_unlocked@plt>
   115a4:	movw	r1, #37174	; 0x9136
   115a8:	mov	r0, #0
   115ac:	mov	r2, #5
   115b0:	movt	r1, #1
   115b4:	bl	11180 <dcgettext@plt>
   115b8:	ldr	r1, [r9]
   115bc:	bl	11108 <fputs_unlocked@plt>
   115c0:	movw	r1, #37241	; 0x9179
   115c4:	mov	r0, #0
   115c8:	mov	r2, #5
   115cc:	movt	r1, #1
   115d0:	bl	11180 <dcgettext@plt>
   115d4:	ldr	r1, [r9]
   115d8:	bl	11108 <fputs_unlocked@plt>
   115dc:	movw	r1, #37286	; 0x91a6
   115e0:	mov	r0, #0
   115e4:	mov	r2, #5
   115e8:	movt	r1, #1
   115ec:	bl	11180 <dcgettext@plt>
   115f0:	ldr	r1, [r9]
   115f4:	bl	11108 <fputs_unlocked@plt>
   115f8:	movw	r1, #37340	; 0x91dc
   115fc:	mov	r0, #0
   11600:	mov	r2, #5
   11604:	movt	r1, #1
   11608:	bl	11180 <dcgettext@plt>
   1160c:	ldr	r1, [r9]
   11610:	bl	11108 <fputs_unlocked@plt>
   11614:	movw	r0, #39024	; 0x9870
   11618:	add	r6, sp, #8
   1161c:	movt	r0, #1
   11620:	mov	r1, r6
   11624:	ldm	r0!, {r2, r3, r4, r5}
   11628:	stmia	r1!, {r2, r3, r4, r5}
   1162c:	ldm	r0!, {r2, r3, r4, r5, r7}
   11630:	stmia	r1!, {r2, r3, r4, r5, r7}
   11634:	ldm	r0, {r2, r3, r4, r5, r7}
   11638:	stm	r1, {r2, r3, r4, r5, r7}
   1163c:	movw	r1, #37689	; 0x9339
   11640:	movw	r5, #37415	; 0x9227
   11644:	movt	r1, #1
   11648:	movt	r5, #1
   1164c:	mov	r0, r5
   11650:	bl	11120 <strcmp@plt>
   11654:	cmp	r0, #0
   11658:	ldrne	r1, [r6, #8]!
   1165c:	cmpne	r1, #0
   11660:	bne	1164c <__assert_fail@plt+0x268>
   11664:	ldr	r6, [r6, #4]
   11668:	movw	r1, #37784	; 0x9398
   1166c:	mov	r0, #0
   11670:	mov	r2, #5
   11674:	movt	r1, #1
   11678:	bl	11180 <dcgettext@plt>
   1167c:	movw	r2, #37513	; 0x9289
   11680:	movw	r3, #37807	; 0x93af
   11684:	mov	r1, r0
   11688:	mov	r0, #1
   1168c:	movt	r2, #1
   11690:	movt	r3, #1
   11694:	bl	112c4 <__printf_chk@plt>
   11698:	cmp	r6, #0
   1169c:	mov	r0, #5
   116a0:	mov	r1, #0
   116a4:	moveq	r6, r5
   116a8:	bl	1130c <setlocale@plt>
   116ac:	cmp	r0, #0
   116b0:	beq	116e8 <__assert_fail@plt+0x304>
   116b4:	movw	r1, #37847	; 0x93d7
   116b8:	mov	r2, #3
   116bc:	movt	r1, #1
   116c0:	bl	113a8 <strncmp@plt>
   116c4:	cmp	r0, #0
   116c8:	beq	116e8 <__assert_fail@plt+0x304>
   116cc:	movw	r1, #37851	; 0x93db
   116d0:	mov	r0, #0
   116d4:	mov	r2, #5
   116d8:	movt	r1, #1
   116dc:	bl	11180 <dcgettext@plt>
   116e0:	ldr	r1, [r9]
   116e4:	bl	11108 <fputs_unlocked@plt>
   116e8:	movw	r1, #37922	; 0x9422
   116ec:	mov	r0, #0
   116f0:	mov	r2, #5
   116f4:	movt	r1, #1
   116f8:	bl	11180 <dcgettext@plt>
   116fc:	movw	r2, #37807	; 0x93af
   11700:	mov	r1, r0
   11704:	mov	r0, #1
   11708:	mov	r3, r5
   1170c:	movt	r2, #1
   11710:	bl	112c4 <__printf_chk@plt>
   11714:	movw	r1, #37949	; 0x943d
   11718:	mov	r0, #0
   1171c:	mov	r2, #5
   11720:	movt	r1, #1
   11724:	bl	11180 <dcgettext@plt>
   11728:	movw	r3, #36778	; 0x8faa
   1172c:	mov	r1, r0
   11730:	movw	r0, #37717	; 0x9355
   11734:	cmp	r6, r5
   11738:	mov	r2, r6
   1173c:	movt	r0, #1
   11740:	movt	r3, #1
   11744:	moveq	r3, r0
   11748:	mov	r0, #1
   1174c:	bl	112c4 <__printf_chk@plt>
   11750:	mov	r0, r8
   11754:	bl	11264 <exit@plt>
   11758:	movw	r0, #41336	; 0xa178
   1175c:	movw	r1, #36500	; 0x8e94
   11760:	mov	r2, #5
   11764:	movt	r0, #2
   11768:	movt	r1, #1
   1176c:	ldr	r5, [r0]
   11770:	mov	r0, #0
   11774:	bl	11180 <dcgettext@plt>
   11778:	mov	r2, r0
   1177c:	movw	r0, #41396	; 0xa1b4
   11780:	mov	r1, #1
   11784:	movt	r0, #2
   11788:	ldr	r3, [r0]
   1178c:	mov	r0, r5
   11790:	bl	112dc <__fprintf_chk@plt>
   11794:	b	11750 <__assert_fail@plt+0x36c>
   11798:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1179c:	add	fp, sp, #28
   117a0:	sub	sp, sp, #156	; 0x9c
   117a4:	mov	r4, #0
   117a8:	mov	r7, r0
   117ac:	mov	r5, r1
   117b0:	str	r4, [sp, #36]	; 0x24
   117b4:	ldr	r0, [r1]
   117b8:	bl	15ea8 <__assert_fail@plt+0x4ac4>
   117bc:	movw	r1, #36778	; 0x8faa
   117c0:	mov	r0, #6
   117c4:	movt	r1, #1
   117c8:	bl	1130c <setlocale@plt>
   117cc:	movw	r6, #37517	; 0x928d
   117d0:	movw	r1, #37421	; 0x922d
   117d4:	movt	r6, #1
   117d8:	movt	r1, #1
   117dc:	mov	r0, r6
   117e0:	bl	1136c <bindtextdomain@plt>
   117e4:	mov	r0, r6
   117e8:	bl	11198 <textdomain@plt>
   117ec:	movw	r0, #9640	; 0x25a8
   117f0:	movt	r0, #1
   117f4:	bl	18e14 <__assert_fail@plt+0x7a30>
   117f8:	movw	r0, #41352	; 0xa188
   117fc:	movw	r8, #41328	; 0xa170
   11800:	mov	r6, #0
   11804:	mov	r1, #0
   11808:	mov	sl, #0
   1180c:	movt	r0, #2
   11810:	movt	r8, #2
   11814:	strb	r4, [r0]
   11818:	movw	r0, #41353	; 0xa189
   1181c:	movt	r0, #2
   11820:	strb	r4, [r0]
   11824:	movw	r0, #41354	; 0xa18a
   11828:	movt	r0, #2
   1182c:	strb	r4, [r0]
   11830:	mov	r0, #0
   11834:	str	r0, [sp, #32]
   11838:	movw	r2, #37445	; 0x9245
   1183c:	movw	r3, #38848	; 0x97c0
   11840:	mov	r9, r1
   11844:	mov	r0, r7
   11848:	mov	r1, r5
   1184c:	str	r4, [sp]
   11850:	movt	r2, #1
   11854:	movt	r3, #1
   11858:	bl	1124c <getopt_long@plt>
   1185c:	cmp	r0, #96	; 0x60
   11860:	ble	1192c <__assert_fail@plt+0x548>
   11864:	cmp	r0, #255	; 0xff
   11868:	bgt	119d4 <__assert_fail@plt+0x5f0>
   1186c:	sub	r0, r0, #97	; 0x61
   11870:	cmp	r0, #23
   11874:	bhi	12580 <__assert_fail@plt+0x119c>
   11878:	add	r1, pc, #0
   1187c:	ldr	pc, [r1, r0, lsl #2]
   11880:	andeq	r1, r1, r0, ror #17
   11884:	andeq	r2, r1, r0, lsl #11
   11888:	andeq	r1, r1, r4, lsl sl
   1188c:	andeq	r2, r1, r0, lsl #11
   11890:	andeq	r2, r1, r0, lsl #11
   11894:	andeq	r1, r1, r0, asr #20
   11898:	andeq	r1, r1, r0, ror #17
   1189c:	andeq	r2, r1, r0, lsl #11
   118a0:	andeq	r2, r1, r0, lsl #11
   118a4:	andeq	r2, r1, r0, lsl #11
   118a8:	andeq	r2, r1, r0, lsl #11
   118ac:	andeq	r2, r1, r0, lsl #11
   118b0:	andeq	r2, r1, r0, lsl #11
   118b4:	andeq	r2, r1, r0, lsl #11
   118b8:	andeq	r1, r1, r0, ror #17
   118bc:	andeq	r2, r1, r0, lsl #11
   118c0:	andeq	r2, r1, r0, lsl #11
   118c4:	andeq	r1, r1, r0, ror #17
   118c8:	andeq	r1, r1, r0, ror #17
   118cc:	andeq	r1, r1, r0, ror #17
   118d0:	andeq	r1, r1, r0, ror #17
   118d4:	andeq	r1, r1, ip, lsr #20
   118d8:	andeq	r1, r1, r0, ror #17
   118dc:	andeq	r1, r1, r0, ror #17
   118e0:	ldr	r0, [r8]
   118e4:	str	r6, [sp, #24]
   118e8:	str	r7, [sp, #28]
   118ec:	mov	r4, r9
   118f0:	mov	r7, r5
   118f4:	add	r0, r5, r0, lsl #2
   118f8:	ldr	r6, [r0, #-4]
   118fc:	mov	r0, r6
   11900:	bl	11270 <strlen@plt>
   11904:	cmp	sl, #0
   11908:	mov	r9, sl
   1190c:	mov	r8, r0
   11910:	addne	r9, r9, #1
   11914:	add	r5, r0, r9
   11918:	ldr	r0, [sp, #36]	; 0x24
   1191c:	cmp	r0, r5
   11920:	bls	11968 <__assert_fail@plt+0x584>
   11924:	ldr	r1, [sp, #32]
   11928:	b	11980 <__assert_fail@plt+0x59c>
   1192c:	cmp	r0, #42	; 0x2a
   11930:	ble	11a64 <__assert_fail@plt+0x680>
   11934:	sub	r1, r0, #43	; 0x2b
   11938:	cmp	r1, #18
   1193c:	bhi	11954 <__assert_fail@plt+0x570>
   11940:	movw	r3, #8163	; 0x1fe3
   11944:	mov	r2, #1
   11948:	movt	r3, #4
   1194c:	tst	r3, r2, lsl r1
   11950:	bne	118e0 <__assert_fail@plt+0x4fc>
   11954:	cmp	r0, #82	; 0x52
   11958:	bne	11a58 <__assert_fail@plt+0x674>
   1195c:	movw	r0, #41354	; 0xa18a
   11960:	movt	r0, #2
   11964:	b	11a48 <__assert_fail@plt+0x664>
   11968:	add	r0, r5, #1
   1196c:	add	r1, sp, #36	; 0x24
   11970:	str	r0, [sp, #36]	; 0x24
   11974:	ldr	r0, [sp, #32]
   11978:	bl	18034 <__assert_fail@plt+0x6c50>
   1197c:	mov	r1, r0
   11980:	mov	r0, #44	; 0x2c
   11984:	str	r1, [sp, #32]
   11988:	add	r2, r8, #1
   1198c:	strb	r0, [r1, sl]
   11990:	add	r0, r1, r9
   11994:	mov	r1, r6
   11998:	bl	1115c <memcpy@plt>
   1199c:	movw	r6, #41328	; 0xa170
   119a0:	mov	sl, r5
   119a4:	mov	r5, r7
   119a8:	ldr	r7, [sp, #28]
   119ac:	movw	r0, #41352	; 0xa188
   119b0:	mov	r1, #1
   119b4:	movt	r6, #2
   119b8:	movt	r0, #2
   119bc:	mov	r8, r6
   119c0:	ldr	r6, [sp, #24]
   119c4:	strb	r1, [r0]
   119c8:	mov	r1, r4
   119cc:	mov	r4, #0
   119d0:	b	11838 <__assert_fail@plt+0x454>
   119d4:	cmp	r0, #256	; 0x100
   119d8:	mov	r1, #0
   119dc:	beq	11838 <__assert_fail@plt+0x454>
   119e0:	movw	r1, #257	; 0x101
   119e4:	cmp	r0, r1
   119e8:	bne	119f4 <__assert_fail@plt+0x610>
   119ec:	mov	r1, #1
   119f0:	b	11838 <__assert_fail@plt+0x454>
   119f4:	movw	r1, #258	; 0x102
   119f8:	cmp	r0, r1
   119fc:	bne	12580 <__assert_fail@plt+0x119c>
   11a00:	movw	r0, #41344	; 0xa180
   11a04:	mov	r1, r9
   11a08:	movt	r0, #2
   11a0c:	ldr	r6, [r0]
   11a10:	b	11838 <__assert_fail@plt+0x454>
   11a14:	movw	r0, #41240	; 0xa118
   11a18:	mov	r1, #1
   11a1c:	movt	r0, #2
   11a20:	str	r1, [r0]
   11a24:	mov	r1, r9
   11a28:	b	11838 <__assert_fail@plt+0x454>
   11a2c:	movw	r0, #41240	; 0xa118
   11a30:	mov	r1, r9
   11a34:	movt	r0, #2
   11a38:	str	r4, [r0]
   11a3c:	b	11838 <__assert_fail@plt+0x454>
   11a40:	movw	r0, #41353	; 0xa189
   11a44:	movt	r0, #2
   11a48:	mov	r1, #1
   11a4c:	strb	r1, [r0]
   11a50:	mov	r1, r9
   11a54:	b	11838 <__assert_fail@plt+0x454>
   11a58:	cmp	r0, #88	; 0x58
   11a5c:	beq	118e0 <__assert_fail@plt+0x4fc>
   11a60:	b	12580 <__assert_fail@plt+0x119c>
   11a64:	cmn	r0, #1
   11a68:	bne	12464 <__assert_fail@plt+0x1080>
   11a6c:	ldr	r0, [sp, #32]
   11a70:	cmp	r6, #0
   11a74:	beq	11a90 <__assert_fail@plt+0x6ac>
   11a78:	mov	r4, #0
   11a7c:	cmp	r0, #0
   11a80:	beq	11aac <__assert_fail@plt+0x6c8>
   11a84:	movw	r1, #37556	; 0x92b4
   11a88:	movt	r1, #1
   11a8c:	b	1252c <__assert_fail@plt+0x1148>
   11a90:	cmp	r0, #0
   11a94:	mov	r4, r0
   11a98:	bne	11aac <__assert_fail@plt+0x6c8>
   11a9c:	ldr	r0, [r8]
   11aa0:	add	r1, r0, #1
   11aa4:	str	r1, [r8]
   11aa8:	ldr	r4, [r5, r0, lsl #2]
   11aac:	ldr	r0, [r8]
   11ab0:	cmp	r0, r7
   11ab4:	bge	124d4 <__assert_fail@plt+0x10f0>
   11ab8:	cmp	r6, #0
   11abc:	beq	11b08 <__assert_fail@plt+0x724>
   11ac0:	mov	r0, r6
   11ac4:	bl	15cac <__assert_fail@plt+0x48c8>
   11ac8:	movw	r1, #41356	; 0xa18c
   11acc:	cmp	r0, #0
   11ad0:	movt	r1, #2
   11ad4:	str	r0, [r1]
   11ad8:	bne	11b38 <__assert_fail@plt+0x754>
   11adc:	bl	11294 <__errno_location@plt>
   11ae0:	ldr	r4, [r0]
   11ae4:	movw	r1, #37641	; 0x9309
   11ae8:	mov	r0, #0
   11aec:	mov	r2, #5
   11af0:	movt	r1, #1
   11af4:	bl	11180 <dcgettext@plt>
   11af8:	mov	r5, r0
   11afc:	mov	r0, #4
   11b00:	mov	r1, r6
   11b04:	b	11b9c <__assert_fail@plt+0x7b8>
   11b08:	mov	r0, r4
   11b0c:	bl	15960 <__assert_fail@plt+0x457c>
   11b10:	movw	r1, #41356	; 0xa18c
   11b14:	cmp	r0, #0
   11b18:	movt	r1, #2
   11b1c:	str	r0, [r1]
   11b20:	beq	1254c <__assert_fail@plt+0x1168>
   11b24:	mov	r0, #0
   11b28:	bl	11378 <umask@plt>
   11b2c:	movw	r1, #41360	; 0xa190
   11b30:	movt	r1, #2
   11b34:	str	r0, [r1]
   11b38:	movw	r0, #41354	; 0xa18a
   11b3c:	movt	r0, #2
   11b40:	ldrb	r0, [r0]
   11b44:	and	r0, r9, r0
   11b48:	tst	r0, #1
   11b4c:	beq	11bb4 <__assert_fail@plt+0x7d0>
   11b50:	movw	r0, #41368	; 0xa198
   11b54:	movt	r0, #2
   11b58:	bl	179e4 <__assert_fail@plt+0x6600>
   11b5c:	movw	r1, #41384	; 0xa1a8
   11b60:	cmp	r0, #0
   11b64:	movt	r1, #2
   11b68:	str	r0, [r1]
   11b6c:	bne	11bc4 <__assert_fail@plt+0x7e0>
   11b70:	bl	11294 <__errno_location@plt>
   11b74:	ldr	r4, [r0]
   11b78:	movw	r1, #37641	; 0x9309
   11b7c:	mov	r0, #0
   11b80:	mov	r2, #5
   11b84:	movt	r1, #1
   11b88:	bl	11180 <dcgettext@plt>
   11b8c:	movw	r1, #40303	; 0x9d6f
   11b90:	mov	r5, r0
   11b94:	mov	r0, #4
   11b98:	movt	r1, #1
   11b9c:	bl	17574 <__assert_fail@plt+0x6190>
   11ba0:	mov	r3, r0
   11ba4:	mov	r0, #1
   11ba8:	mov	r1, r4
   11bac:	mov	r2, r5
   11bb0:	bl	11204 <error@plt>
   11bb4:	movw	r0, #41384	; 0xa1a8
   11bb8:	mov	r1, #0
   11bbc:	movt	r0, #2
   11bc0:	str	r1, [r0]
   11bc4:	ldr	r0, [r8]
   11bc8:	movw	r1, #1041	; 0x411
   11bcc:	mov	r2, #0
   11bd0:	add	r0, r5, r0, lsl #2
   11bd4:	bl	183c4 <__assert_fail@plt+0x6fe0>
   11bd8:	str	r0, [sp, #32]
   11bdc:	bl	131dc <__assert_fail@plt+0x1df8>
   11be0:	cmp	r0, #0
   11be4:	beq	123c4 <__assert_fail@plt+0xfe0>
   11be8:	mov	r8, r0
   11bec:	sub	r0, fp, #40	; 0x28
   11bf0:	mov	r4, #1
   11bf4:	add	r0, r0, #1
   11bf8:	str	r0, [sp, #24]
   11bfc:	add	r0, sp, #40	; 0x28
   11c00:	add	r0, r0, #1
   11c04:	str	r0, [sp, #28]
   11c08:	b	11ca8 <__assert_fail@plt+0x8c4>
   11c0c:	ldr	r0, [sp, #32]
   11c10:	mov	r6, #1
   11c14:	mov	r1, r8
   11c18:	mov	r2, #1
   11c1c:	str	r6, [r8, #16]
   11c20:	bl	145a0 <__assert_fail@plt+0x31bc>
   11c24:	b	123a8 <__assert_fail@plt+0xfc4>
   11c28:	movw	r1, #38378	; 0x95ea
   11c2c:	mov	r0, #0
   11c30:	mov	r2, #5
   11c34:	movt	r1, #1
   11c38:	bl	11180 <dcgettext@plt>
   11c3c:	mov	r5, r0
   11c40:	mov	r0, #4
   11c44:	mov	r1, r6
   11c48:	bl	17574 <__assert_fail@plt+0x6190>
   11c4c:	mov	r3, r0
   11c50:	mov	r0, #0
   11c54:	mov	r1, #0
   11c58:	mov	r2, r5
   11c5c:	bl	11204 <error@plt>
   11c60:	movw	r1, #38481	; 0x9651
   11c64:	mov	r0, #0
   11c68:	mov	r2, #5
   11c6c:	mov	r6, #0
   11c70:	movt	r1, #1
   11c74:	bl	11180 <dcgettext@plt>
   11c78:	mov	r2, r0
   11c7c:	mov	r0, #0
   11c80:	mov	r1, #0
   11c84:	bl	11204 <error@plt>
   11c88:	ldr	r5, [sp, #32]
   11c8c:	mov	r1, r8
   11c90:	mov	r2, #4
   11c94:	mov	r0, r5
   11c98:	bl	145a0 <__assert_fail@plt+0x31bc>
   11c9c:	mov	r0, r5
   11ca0:	bl	131dc <__assert_fail@plt+0x1df8>
   11ca4:	b	123a8 <__assert_fail@plt+0xfc4>
   11ca8:	ldr	r9, [r8, #24]
   11cac:	ldr	r7, [r8, #28]
   11cb0:	ldrh	r0, [r8, #56]	; 0x38
   11cb4:	sub	r0, r0, #2
   11cb8:	cmp	r0, #11
   11cbc:	bhi	11d54 <__assert_fail@plt+0x970>
   11cc0:	add	r1, pc, #4
   11cc4:	mov	r6, #1
   11cc8:	ldr	pc, [r1, r0, lsl #2]
   11ccc:	strdeq	r1, [r1], -ip
   11cd0:	andeq	r1, r1, r4, asr sp
   11cd4:	andeq	r1, r1, r4, lsr lr
   11cd8:	andeq	r1, r1, r4, asr sp
   11cdc:	andeq	r2, r1, r8, lsr #7
   11ce0:	andeq	r1, r1, r4, asr #29
   11ce4:	andeq	r1, r1, r4, asr sp
   11ce8:	andeq	r1, r1, r4, asr sp
   11cec:	andeq	r1, r1, r4, lsl pc
   11cf0:	andeq	r1, r1, r4, asr sp
   11cf4:	andeq	r1, r1, r4, asr sp
   11cf8:	andeq	r1, r1, ip, ror #28
   11cfc:	ldr	r0, [sp, #32]
   11d00:	mov	r1, r8
   11d04:	bl	18410 <__assert_fail@plt+0x702c>
   11d08:	cmp	r0, #0
   11d0c:	beq	11d54 <__assert_fail@plt+0x970>
   11d10:	movw	r1, #38192	; 0x9530
   11d14:	mov	r0, #0
   11d18:	mov	r2, #5
   11d1c:	mov	r6, #0
   11d20:	movt	r1, #1
   11d24:	bl	11180 <dcgettext@plt>
   11d28:	mov	r5, r0
   11d2c:	mov	r0, #0
   11d30:	mov	r1, #3
   11d34:	mov	r2, r7
   11d38:	bl	17718 <__assert_fail@plt+0x6334>
   11d3c:	mov	r3, r0
   11d40:	mov	r0, #0
   11d44:	mov	r1, #0
   11d48:	mov	r2, r5
   11d4c:	bl	11204 <error@plt>
   11d50:	b	123a8 <__assert_fail@plt+0xfc4>
   11d54:	movw	r0, #41384	; 0xa1a8
   11d58:	movt	r0, #2
   11d5c:	ldr	r0, [r0]
   11d60:	cmp	r0, #0
   11d64:	beq	11e14 <__assert_fail@plt+0xa30>
   11d68:	mov	r5, r7
   11d6c:	ldrd	r2, [r0]
   11d70:	ldrd	r6, [r8, #160]	; 0xa0
   11d74:	eor	r1, r7, r3
   11d78:	eor	r2, r6, r2
   11d7c:	mov	r7, r5
   11d80:	orrs	r1, r2, r1
   11d84:	bne	11e14 <__assert_fail@plt+0xa30>
   11d88:	ldrd	r0, [r0, #8]
   11d8c:	ldrd	r2, [r8, #64]	; 0x40
   11d90:	eor	r1, r3, r1
   11d94:	eor	r0, r2, r0
   11d98:	orrs	r0, r0, r1
   11d9c:	bne	11e14 <__assert_fail@plt+0xa30>
   11da0:	mov	r0, r7
   11da4:	mov	r6, r7
   11da8:	movw	r7, #40303	; 0x9d6f
   11dac:	movt	r7, #1
   11db0:	mov	r1, r7
   11db4:	bl	11120 <strcmp@plt>
   11db8:	cmp	r0, #0
   11dbc:	beq	11c28 <__assert_fail@plt+0x844>
   11dc0:	movw	r1, #38423	; 0x9617
   11dc4:	mov	r0, #0
   11dc8:	mov	r2, #5
   11dcc:	movt	r1, #1
   11dd0:	bl	11180 <dcgettext@plt>
   11dd4:	mov	r5, r0
   11dd8:	mov	r0, #0
   11ddc:	mov	r1, #4
   11de0:	mov	r2, r6
   11de4:	bl	174cc <__assert_fail@plt+0x60e8>
   11de8:	mov	r6, r0
   11dec:	mov	r0, #1
   11df0:	mov	r1, #4
   11df4:	mov	r2, r7
   11df8:	bl	174cc <__assert_fail@plt+0x60e8>
   11dfc:	str	r0, [sp]
   11e00:	mov	r0, #0
   11e04:	mov	r1, #0
   11e08:	mov	r2, r5
   11e0c:	mov	r3, r6
   11e10:	b	11c5c <__assert_fail@plt+0x878>
   11e14:	ldr	sl, [r8, #80]	; 0x50
   11e18:	and	r0, sl, #61440	; 0xf000
   11e1c:	cmp	r0, #40960	; 0xa000
   11e20:	bne	12034 <__assert_fail@plt+0xc50>
   11e24:	mov	r6, #2
   11e28:	mov	r5, #0
   11e2c:	mov	sl, #0
   11e30:	b	11f94 <__assert_fail@plt+0xbb0>
   11e34:	movw	r0, #41353	; 0xa189
   11e38:	mov	r5, #0
   11e3c:	mov	sl, #0
   11e40:	mov	r6, #0
   11e44:	movt	r0, #2
   11e48:	ldrb	r0, [r0]
   11e4c:	cmp	r0, #0
   11e50:	bne	11f94 <__assert_fail@plt+0xbb0>
   11e54:	ldr	sl, [r8, #32]
   11e58:	movw	r1, #38129	; 0x94f1
   11e5c:	mov	r5, #0
   11e60:	mov	r0, #0
   11e64:	movt	r1, #1
   11e68:	b	11f60 <__assert_fail@plt+0xb7c>
   11e6c:	movw	r0, #41353	; 0xa189
   11e70:	mov	r5, #0
   11e74:	mov	sl, #0
   11e78:	mov	r6, #0
   11e7c:	movt	r0, #2
   11e80:	ldrb	r0, [r0]
   11e84:	cmp	r0, #0
   11e88:	bne	11f94 <__assert_fail@plt+0xbb0>
   11e8c:	movw	r1, #38154	; 0x950a
   11e90:	mov	r0, #0
   11e94:	mov	r2, #5
   11e98:	mov	r5, #0
   11e9c:	movt	r1, #1
   11ea0:	bl	11180 <dcgettext@plt>
   11ea4:	mov	r6, r0
   11ea8:	mov	r0, #4
   11eac:	mov	r1, r7
   11eb0:	bl	17574 <__assert_fail@plt+0x6190>
   11eb4:	mov	r3, r0
   11eb8:	mov	r0, #0
   11ebc:	mov	r1, #0
   11ec0:	b	11f84 <__assert_fail@plt+0xba0>
   11ec4:	movw	r0, #41353	; 0xa189
   11ec8:	mov	r5, #0
   11ecc:	mov	sl, #0
   11ed0:	mov	r6, #0
   11ed4:	movt	r0, #2
   11ed8:	ldrb	r0, [r0]
   11edc:	cmp	r0, #0
   11ee0:	bne	11f94 <__assert_fail@plt+0xbb0>
   11ee4:	ldr	r6, [r8, #32]
   11ee8:	mov	r0, #0
   11eec:	mov	r1, #3
   11ef0:	mov	r2, r7
   11ef4:	mov	r5, #0
   11ef8:	bl	17718 <__assert_fail@plt+0x6334>
   11efc:	movw	r2, #37686	; 0x9336
   11f00:	mov	r3, r0
   11f04:	mov	r0, #0
   11f08:	mov	r1, r6
   11f0c:	movt	r2, #1
   11f10:	b	11f88 <__assert_fail@plt+0xba4>
   11f14:	ldr	r0, [r8, #48]	; 0x30
   11f18:	cmp	r0, #0
   11f1c:	bne	11f2c <__assert_fail@plt+0xb48>
   11f20:	ldr	r0, [r8, #16]
   11f24:	cmp	r0, #0
   11f28:	beq	11c0c <__assert_fail@plt+0x828>
   11f2c:	movw	r0, #41353	; 0xa189
   11f30:	mov	r5, #0
   11f34:	mov	sl, #0
   11f38:	mov	r6, #0
   11f3c:	movt	r0, #2
   11f40:	ldrb	r0, [r0]
   11f44:	cmp	r0, #0
   11f48:	bne	11f94 <__assert_fail@plt+0xbb0>
   11f4c:	ldr	sl, [r8, #32]
   11f50:	movw	r1, #38112	; 0x94e0
   11f54:	mov	r5, #0
   11f58:	mov	r0, #0
   11f5c:	movt	r1, #1
   11f60:	mov	r2, #5
   11f64:	bl	11180 <dcgettext@plt>
   11f68:	mov	r6, r0
   11f6c:	mov	r0, #4
   11f70:	mov	r1, r7
   11f74:	bl	17574 <__assert_fail@plt+0x6190>
   11f78:	mov	r3, r0
   11f7c:	mov	r0, #0
   11f80:	mov	r1, sl
   11f84:	mov	r2, r6
   11f88:	bl	11204 <error@plt>
   11f8c:	mov	sl, #0
   11f90:	mov	r6, #0
   11f94:	movw	r0, #41240	; 0xa118
   11f98:	movt	r0, #2
   11f9c:	ldr	r0, [r0]
   11fa0:	cmp	r0, #2
   11fa4:	beq	122a4 <__assert_fail@plt+0xec0>
   11fa8:	cmp	r6, #4
   11fac:	bne	12154 <__assert_fail@plt+0xd70>
   11fb0:	tst	r5, #3584	; 0xe00
   11fb4:	mov	r0, r5
   11fb8:	beq	120f0 <__assert_fail@plt+0xd0c>
   11fbc:	ldr	r0, [sp, #32]
   11fc0:	mov	r1, r9
   11fc4:	add	r2, sp, #40	; 0x28
   11fc8:	mov	r3, #0
   11fcc:	ldr	r0, [r0, #32]
   11fd0:	bl	18e5c <__assert_fail@plt+0x7a78>
   11fd4:	cmp	r0, #0
   11fd8:	beq	120ec <__assert_fail@plt+0xd08>
   11fdc:	movw	r0, #41353	; 0xa189
   11fe0:	movt	r0, #2
   11fe4:	ldrb	r0, [r0]
   11fe8:	cmp	r0, #0
   11fec:	bne	12150 <__assert_fail@plt+0xd6c>
   11ff0:	bl	11294 <__errno_location@plt>
   11ff4:	ldr	r9, [r0]
   11ff8:	movw	r1, #38592	; 0x96c0
   11ffc:	mov	r0, #0
   12000:	mov	r2, #5
   12004:	movt	r1, #1
   12008:	bl	11180 <dcgettext@plt>
   1200c:	mov	r6, r0
   12010:	mov	r0, #4
   12014:	mov	r1, r7
   12018:	bl	17574 <__assert_fail@plt+0x6190>
   1201c:	mov	r3, r0
   12020:	mov	r0, #0
   12024:	mov	r1, r9
   12028:	mov	r2, r6
   1202c:	bl	11204 <error@plt>
   12030:	b	12150 <__assert_fail@plt+0xd6c>
   12034:	movw	r1, #41356	; 0xa18c
   12038:	sub	r0, r0, #16384	; 0x4000
   1203c:	movt	r1, #2
   12040:	clz	r0, r0
   12044:	ldr	r3, [r1]
   12048:	movw	r1, #41360	; 0xa190
   1204c:	movt	r1, #2
   12050:	ldr	r2, [r1]
   12054:	mov	r1, #0
   12058:	str	r1, [sp]
   1205c:	lsr	r1, r0, #5
   12060:	mov	r0, sl
   12064:	bl	15d00 <__assert_fail@plt+0x491c>
   12068:	mov	r5, r0
   1206c:	ldr	r0, [sp, #32]
   12070:	mov	r1, r9
   12074:	mov	r3, #0
   12078:	mov	r2, r5
   1207c:	ldr	r0, [r0, #32]
   12080:	bl	12690 <__assert_fail@plt+0x12ac>
   12084:	cmp	r0, #0
   12088:	beq	1225c <__assert_fail@plt+0xe78>
   1208c:	movw	r0, #41353	; 0xa189
   12090:	mov	r6, #1
   12094:	movt	r0, #2
   12098:	ldrb	r0, [r0]
   1209c:	cmp	r0, #0
   120a0:	bne	11f94 <__assert_fail@plt+0xbb0>
   120a4:	bl	11294 <__errno_location@plt>
   120a8:	ldr	r0, [r0]
   120ac:	movw	r1, #38530	; 0x9682
   120b0:	mov	r2, #5
   120b4:	movt	r1, #1
   120b8:	str	r0, [sp, #20]
   120bc:	mov	r0, #0
   120c0:	bl	11180 <dcgettext@plt>
   120c4:	str	r0, [sp, #16]
   120c8:	mov	r0, #4
   120cc:	mov	r1, r7
   120d0:	bl	17574 <__assert_fail@plt+0x6190>
   120d4:	ldr	r1, [sp, #20]
   120d8:	ldr	r2, [sp, #16]
   120dc:	mov	r3, r0
   120e0:	mov	r0, #0
   120e4:	bl	11204 <error@plt>
   120e8:	b	11f94 <__assert_fail@plt+0xbb0>
   120ec:	ldr	r0, [sp, #56]	; 0x38
   120f0:	eor	r0, r0, sl
   120f4:	movw	r1, #4095	; 0xfff
   120f8:	tst	r0, r1
   120fc:	beq	12150 <__assert_fail@plt+0xd6c>
   12100:	mov	r0, #4
   12104:	mov	r1, r7
   12108:	mov	r6, #4
   1210c:	str	r7, [sp, #20]
   12110:	bl	17574 <__assert_fail@plt+0x6190>
   12114:	mov	r9, r0
   12118:	mov	r0, r5
   1211c:	add	r1, sp, #40	; 0x28
   12120:	bl	127c0 <__assert_fail@plt+0x13dc>
   12124:	mov	r7, #0
   12128:	mov	r0, sl
   1212c:	sub	r1, fp, #40	; 0x28
   12130:	strb	r7, [sp, #50]	; 0x32
   12134:	bl	127c0 <__assert_fail@plt+0x13dc>
   12138:	movw	r1, #38703	; 0x972f
   1213c:	strb	r7, [fp, #-30]	; 0xffffffe2
   12140:	mov	r7, r5
   12144:	bfc	r7, #12, #20
   12148:	movt	r1, #1
   1214c:	b	1226c <__assert_fail@plt+0xe88>
   12150:	mov	r6, #3
   12154:	cmp	r6, #4
   12158:	movwne	r0, #41240	; 0xa118
   1215c:	movtne	r0, #2
   12160:	ldrne	r0, [r0]
   12164:	cmpne	r0, #0
   12168:	bne	122a4 <__assert_fail@plt+0xec0>
   1216c:	mov	r0, #4
   12170:	mov	r1, r7
   12174:	bl	17574 <__assert_fail@plt+0x6190>
   12178:	mov	r9, r0
   1217c:	cmp	r6, #0
   12180:	beq	121b8 <__assert_fail@plt+0xdd4>
   12184:	cmp	r6, #2
   12188:	bne	121e4 <__assert_fail@plt+0xe00>
   1218c:	movw	r1, #38621	; 0x96dd
   12190:	mov	r0, #0
   12194:	mov	r2, #5
   12198:	movt	r1, #1
   1219c:	bl	11180 <dcgettext@plt>
   121a0:	mov	r1, r0
   121a4:	mov	r0, #1
   121a8:	mov	r2, r9
   121ac:	bl	112c4 <__printf_chk@plt>
   121b0:	mov	r6, #2
   121b4:	b	122a4 <__assert_fail@plt+0xec0>
   121b8:	movw	r1, #38677	; 0x9715
   121bc:	mov	r0, #0
   121c0:	mov	r2, #5
   121c4:	mov	r6, #0
   121c8:	movt	r1, #1
   121cc:	bl	11180 <dcgettext@plt>
   121d0:	mov	r1, r0
   121d4:	mov	r0, #1
   121d8:	mov	r2, r9
   121dc:	bl	112c4 <__printf_chk@plt>
   121e0:	b	122a4 <__assert_fail@plt+0xec0>
   121e4:	mov	r0, r5
   121e8:	add	r1, sp, #40	; 0x28
   121ec:	str	r7, [sp, #20]
   121f0:	bl	127c0 <__assert_fail@plt+0x13dc>
   121f4:	mov	r7, #0
   121f8:	mov	r0, sl
   121fc:	sub	r1, fp, #40	; 0x28
   12200:	strb	r7, [sp, #50]	; 0x32
   12204:	bl	127c0 <__assert_fail@plt+0x13dc>
   12208:	strb	r7, [fp, #-30]	; 0xffffffe2
   1220c:	mov	r7, r5
   12210:	cmp	r6, #1
   12214:	bfc	r7, #12, #20
   12218:	beq	12264 <__assert_fail@plt+0xe80>
   1221c:	cmp	r6, #3
   12220:	bne	124d0 <__assert_fail@plt+0x10ec>
   12224:	movw	r1, #38812	; 0x979c
   12228:	mov	r0, #0
   1222c:	mov	r2, #5
   12230:	movt	r1, #1
   12234:	bl	11180 <dcgettext@plt>
   12238:	mov	r1, r0
   1223c:	ldr	r0, [sp, #28]
   12240:	mov	r2, r9
   12244:	mov	r3, r7
   12248:	str	r0, [sp]
   1224c:	mov	r0, #1
   12250:	bl	112c4 <__printf_chk@plt>
   12254:	mov	r6, #3
   12258:	b	122a0 <__assert_fail@plt+0xebc>
   1225c:	mov	r6, #4
   12260:	b	11f94 <__assert_fail@plt+0xbb0>
   12264:	movw	r1, #38753	; 0x9761
   12268:	movt	r1, #1
   1226c:	mov	r0, #0
   12270:	mov	r2, #5
   12274:	bl	11180 <dcgettext@plt>
   12278:	mov	r1, r0
   1227c:	ldr	r0, [sp, #24]
   12280:	mov	r3, sl
   12284:	mov	r2, r9
   12288:	bfc	r3, #12, #20
   1228c:	stm	sp, {r0, r7}
   12290:	ldr	r0, [sp, #28]
   12294:	str	r0, [sp, #8]
   12298:	mov	r0, #1
   1229c:	bl	112c4 <__printf_chk@plt>
   122a0:	ldr	r7, [sp, #20]
   122a4:	cmp	r6, #3
   122a8:	bcc	12378 <__assert_fail@plt+0xf94>
   122ac:	movw	r0, #41352	; 0xa188
   122b0:	movt	r0, #2
   122b4:	ldrb	r0, [r0]
   122b8:	cmp	r0, #1
   122bc:	bne	12378 <__assert_fail@plt+0xf94>
   122c0:	movw	r0, #41356	; 0xa18c
   122c4:	mov	r2, #0
   122c8:	mov	r9, r7
   122cc:	movt	r0, #2
   122d0:	ldr	r3, [r0]
   122d4:	mov	r0, #0
   122d8:	str	r0, [sp]
   122dc:	and	r0, sl, #61440	; 0xf000
   122e0:	sub	r0, r0, #16384	; 0x4000
   122e4:	clz	r0, r0
   122e8:	lsr	r1, r0, #5
   122ec:	mov	r0, sl
   122f0:	bl	15d00 <__assert_fail@plt+0x491c>
   122f4:	mov	r7, r0
   122f8:	mvn	r0, r0
   122fc:	tst	r5, r0
   12300:	beq	12378 <__assert_fail@plt+0xf94>
   12304:	mov	r0, r5
   12308:	add	r1, sp, #40	; 0x28
   1230c:	bl	127c0 <__assert_fail@plt+0x13dc>
   12310:	mov	r0, r7
   12314:	sub	r1, fp, #40	; 0x28
   12318:	bl	127c0 <__assert_fail@plt+0x13dc>
   1231c:	mov	r0, #0
   12320:	movw	r1, #38557	; 0x969d
   12324:	mov	r2, #5
   12328:	strb	r0, [sp, #50]	; 0x32
   1232c:	strb	r0, [fp, #-30]	; 0xffffffe2
   12330:	mov	r0, #0
   12334:	movt	r1, #1
   12338:	bl	11180 <dcgettext@plt>
   1233c:	mov	r5, r0
   12340:	mov	r0, #0
   12344:	mov	r1, #3
   12348:	mov	r2, r9
   1234c:	bl	17718 <__assert_fail@plt+0x6334>
   12350:	mov	r3, r0
   12354:	ldr	r0, [sp, #28]
   12358:	mov	r1, #0
   1235c:	mov	r2, r5
   12360:	str	r0, [sp]
   12364:	ldr	r0, [sp, #24]
   12368:	str	r0, [sp, #4]
   1236c:	mov	r0, #0
   12370:	bl	11204 <error@plt>
   12374:	mov	r6, #1
   12378:	movw	r0, #41354	; 0xa18a
   1237c:	movt	r0, #2
   12380:	ldrb	r0, [r0]
   12384:	cmp	r0, #0
   12388:	bne	1239c <__assert_fail@plt+0xfb8>
   1238c:	ldr	r0, [sp, #32]
   12390:	mov	r1, r8
   12394:	mov	r2, #4
   12398:	bl	145a0 <__assert_fail@plt+0x31bc>
   1239c:	cmp	r6, #1
   123a0:	mov	r6, #0
   123a4:	movwhi	r6, #1
   123a8:	ldr	r0, [sp, #32]
   123ac:	and	r4, r4, r6
   123b0:	bl	131dc <__assert_fail@plt+0x1df8>
   123b4:	mov	r8, r0
   123b8:	cmp	r0, #0
   123bc:	bne	11ca8 <__assert_fail@plt+0x8c4>
   123c0:	b	123c8 <__assert_fail@plt+0xfe4>
   123c4:	mov	r4, #1
   123c8:	bl	11294 <__errno_location@plt>
   123cc:	ldr	r6, [r0]
   123d0:	mov	r5, r0
   123d4:	cmp	r6, #0
   123d8:	beq	1241c <__assert_fail@plt+0x1038>
   123dc:	movw	r0, #41353	; 0xa189
   123e0:	mov	r4, #0
   123e4:	movt	r0, #2
   123e8:	ldrb	r0, [r0]
   123ec:	cmp	r0, #0
   123f0:	bne	1241c <__assert_fail@plt+0x1038>
   123f4:	movw	r1, #38079	; 0x94bf
   123f8:	mov	r0, #0
   123fc:	mov	r2, #5
   12400:	mov	r4, #0
   12404:	movt	r1, #1
   12408:	bl	11180 <dcgettext@plt>
   1240c:	mov	r2, r0
   12410:	mov	r0, #0
   12414:	mov	r1, r6
   12418:	bl	11204 <error@plt>
   1241c:	ldr	r0, [sp, #32]
   12420:	bl	1305c <__assert_fail@plt+0x1c78>
   12424:	cmp	r0, #0
   12428:	beq	12458 <__assert_fail@plt+0x1074>
   1242c:	ldr	r5, [r5]
   12430:	movw	r1, #38095	; 0x94cf
   12434:	mov	r0, #0
   12438:	mov	r2, #5
   1243c:	mov	r4, #0
   12440:	movt	r1, #1
   12444:	bl	11180 <dcgettext@plt>
   12448:	mov	r2, r0
   1244c:	mov	r0, #0
   12450:	mov	r1, r5
   12454:	bl	11204 <error@plt>
   12458:	eor	r0, r4, #1
   1245c:	sub	sp, fp, #28
   12460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12464:	cmn	r0, #3
   12468:	bne	124c0 <__assert_fail@plt+0x10dc>
   1246c:	movw	r0, #41244	; 0xa11c
   12470:	movw	r2, #37543	; 0x92a7
   12474:	mov	r1, #0
   12478:	movw	r7, #37527	; 0x9297
   1247c:	movt	r0, #2
   12480:	movt	r2, #1
   12484:	str	r1, [sp, #8]
   12488:	movw	r1, #37415	; 0x9227
   1248c:	movt	r7, #1
   12490:	ldr	r3, [r0]
   12494:	movw	r0, #41340	; 0xa17c
   12498:	str	r2, [sp, #4]
   1249c:	movw	r2, #37513	; 0x9289
   124a0:	movt	r1, #1
   124a4:	str	r7, [sp]
   124a8:	movt	r0, #2
   124ac:	movt	r2, #1
   124b0:	ldr	r0, [r0]
   124b4:	bl	17e28 <__assert_fail@plt+0x6a44>
   124b8:	mov	r0, #0
   124bc:	bl	11264 <exit@plt>
   124c0:	cmn	r0, #2
   124c4:	bne	12580 <__assert_fail@plt+0x119c>
   124c8:	mov	r0, #0
   124cc:	bl	114e0 <__assert_fail@plt+0xfc>
   124d0:	bl	113b4 <abort@plt>
   124d4:	cmp	r4, #0
   124d8:	beq	12524 <__assert_fail@plt+0x1140>
   124dc:	add	r0, r5, r0, lsl #2
   124e0:	ldr	r0, [r0, #-4]
   124e4:	cmp	r4, r0
   124e8:	bne	12524 <__assert_fail@plt+0x1140>
   124ec:	movw	r1, #37616	; 0x92f0
   124f0:	mov	r0, #0
   124f4:	mov	r2, #5
   124f8:	movt	r1, #1
   124fc:	bl	11180 <dcgettext@plt>
   12500:	mov	r6, r0
   12504:	add	r0, r5, r7, lsl #2
   12508:	ldr	r0, [r0, #-4]
   1250c:	bl	178ac <__assert_fail@plt+0x64c8>
   12510:	mov	r3, r0
   12514:	mov	r0, #0
   12518:	mov	r1, #0
   1251c:	mov	r2, r6
   12520:	b	1257c <__assert_fail@plt+0x1198>
   12524:	movw	r1, #37600	; 0x92e0
   12528:	movt	r1, #1
   1252c:	mov	r0, #0
   12530:	mov	r2, #5
   12534:	bl	11180 <dcgettext@plt>
   12538:	mov	r2, r0
   1253c:	mov	r0, #0
   12540:	mov	r1, #0
   12544:	bl	11204 <error@plt>
   12548:	b	12580 <__assert_fail@plt+0x119c>
   1254c:	movw	r1, #37672	; 0x9328
   12550:	mov	r0, #0
   12554:	mov	r2, #5
   12558:	movt	r1, #1
   1255c:	bl	11180 <dcgettext@plt>
   12560:	mov	r5, r0
   12564:	mov	r0, r4
   12568:	bl	178ac <__assert_fail@plt+0x64c8>
   1256c:	mov	r3, r0
   12570:	mov	r0, #0
   12574:	mov	r1, #0
   12578:	mov	r2, r5
   1257c:	bl	11204 <error@plt>
   12580:	mov	r0, #1
   12584:	bl	114e0 <__assert_fail@plt+0xfc>
   12588:	movw	r1, #41388	; 0xa1ac
   1258c:	movt	r1, #2
   12590:	str	r0, [r1]
   12594:	bx	lr
   12598:	movw	r1, #41392	; 0xa1b0
   1259c:	movt	r1, #2
   125a0:	strb	r0, [r1]
   125a4:	bx	lr
   125a8:	push	{r4, r5, r6, sl, fp, lr}
   125ac:	add	fp, sp, #16
   125b0:	sub	sp, sp, #8
   125b4:	movw	r0, #41340	; 0xa17c
   125b8:	movt	r0, #2
   125bc:	ldr	r0, [r0]
   125c0:	bl	18514 <__assert_fail@plt+0x7130>
   125c4:	cmp	r0, #0
   125c8:	beq	125f0 <__assert_fail@plt+0x120c>
   125cc:	movw	r0, #41392	; 0xa1b0
   125d0:	movt	r0, #2
   125d4:	ldrb	r0, [r0]
   125d8:	cmp	r0, #0
   125dc:	beq	12610 <__assert_fail@plt+0x122c>
   125e0:	bl	11294 <__errno_location@plt>
   125e4:	ldr	r0, [r0]
   125e8:	cmp	r0, #32
   125ec:	bne	12610 <__assert_fail@plt+0x122c>
   125f0:	movw	r0, #41336	; 0xa178
   125f4:	movt	r0, #2
   125f8:	ldr	r0, [r0]
   125fc:	bl	18514 <__assert_fail@plt+0x7130>
   12600:	cmp	r0, #0
   12604:	subeq	sp, fp, #16
   12608:	popeq	{r4, r5, r6, sl, fp, pc}
   1260c:	b	12680 <__assert_fail@plt+0x129c>
   12610:	movw	r1, #39095	; 0x98b7
   12614:	mov	r0, #0
   12618:	mov	r2, #5
   1261c:	movt	r1, #1
   12620:	bl	11180 <dcgettext@plt>
   12624:	mov	r4, r0
   12628:	movw	r0, #41388	; 0xa1ac
   1262c:	movt	r0, #2
   12630:	ldr	r6, [r0]
   12634:	bl	11294 <__errno_location@plt>
   12638:	ldr	r5, [r0]
   1263c:	cmp	r6, #0
   12640:	bne	1265c <__assert_fail@plt+0x1278>
   12644:	movw	r2, #37686	; 0x9336
   12648:	mov	r0, #0
   1264c:	mov	r1, r5
   12650:	mov	r3, r4
   12654:	movt	r2, #1
   12658:	b	1267c <__assert_fail@plt+0x1298>
   1265c:	mov	r0, r6
   12660:	bl	1766c <__assert_fail@plt+0x6288>
   12664:	movw	r2, #39107	; 0x98c3
   12668:	mov	r3, r0
   1266c:	str	r4, [sp]
   12670:	mov	r0, #0
   12674:	mov	r1, r5
   12678:	movt	r2, #1
   1267c:	bl	11204 <error@plt>
   12680:	movw	r0, #41248	; 0xa120
   12684:	movt	r0, #2
   12688:	ldr	r0, [r0]
   1268c:	bl	11150 <_exit@plt>
   12690:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12694:	add	fp, sp, #28
   12698:	sub	sp, sp, #140	; 0x8c
   1269c:	mov	r8, r2
   126a0:	mov	r5, r1
   126a4:	mov	r6, r0
   126a8:	cmp	r3, #256	; 0x100
   126ac:	bne	12798 <__assert_fail@plt+0x13b4>
   126b0:	mov	r0, r6
   126b4:	mov	r1, r5
   126b8:	mov	r2, #2654208	; 0x288000
   126bc:	bl	1127c <openat64@plt>
   126c0:	mov	r4, r0
   126c4:	cmp	r0, #0
   126c8:	blt	1270c <__assert_fail@plt+0x1328>
   126cc:	movw	r1, #36778	; 0x8faa
   126d0:	add	r2, sp, #32
   126d4:	mov	r0, r4
   126d8:	mov	r3, #4096	; 0x1000
   126dc:	movt	r1, #1
   126e0:	bl	18e5c <__assert_fail@plt+0x7a78>
   126e4:	cmp	r0, #0
   126e8:	beq	12714 <__assert_fail@plt+0x1330>
   126ec:	bl	11294 <__errno_location@plt>
   126f0:	ldr	r6, [r0]
   126f4:	mov	r5, r0
   126f8:	mov	r0, r4
   126fc:	bl	113c0 <close@plt>
   12700:	str	r6, [r5]
   12704:	mvn	r7, #0
   12708:	b	127ac <__assert_fail@plt+0x13c8>
   1270c:	mov	r7, r4
   12710:	b	127ac <__assert_fail@plt+0x13c8>
   12714:	ldr	r0, [sp, #48]	; 0x30
   12718:	and	r0, r0, #61440	; 0xf000
   1271c:	cmp	r0, #40960	; 0xa000
   12720:	bne	12740 <__assert_fail@plt+0x135c>
   12724:	mov	r0, r4
   12728:	bl	113c0 <close@plt>
   1272c:	bl	11294 <__errno_location@plt>
   12730:	mov	r1, #95	; 0x5f
   12734:	mvn	r7, #0
   12738:	str	r1, [r0]
   1273c:	b	127ac <__assert_fail@plt+0x13c8>
   12740:	movw	r3, #39114	; 0x98ca
   12744:	add	r7, sp, #6
   12748:	mov	r1, #1
   1274c:	mov	r2, #26
   12750:	str	r4, [sp]
   12754:	movt	r3, #1
   12758:	mov	r0, r7
   1275c:	bl	112a0 <__sprintf_chk@plt>
   12760:	mov	r0, r7
   12764:	mov	r1, r8
   12768:	bl	11384 <chmod@plt>
   1276c:	mov	r7, r0
   12770:	bl	11294 <__errno_location@plt>
   12774:	ldr	sl, [r0]
   12778:	mov	r9, r0
   1277c:	mov	r0, r4
   12780:	bl	113c0 <close@plt>
   12784:	cmp	r7, #0
   12788:	beq	127ac <__assert_fail@plt+0x13c8>
   1278c:	cmp	sl, #2
   12790:	bne	127b8 <__assert_fail@plt+0x13d4>
   12794:	mov	r3, #0
   12798:	mov	r0, r6
   1279c:	mov	r1, r5
   127a0:	mov	r2, r8
   127a4:	bl	11288 <fchmodat@plt>
   127a8:	mov	r7, r0
   127ac:	mov	r0, r7
   127b0:	sub	sp, fp, #28
   127b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127b8:	str	sl, [r9]
   127bc:	b	127ac <__assert_fail@plt+0x13c8>
   127c0:	and	r2, r0, #61440	; 0xf000
   127c4:	sub	r2, r2, #4096	; 0x1000
   127c8:	lsr	r3, r2, #12
   127cc:	cmp	r3, #11
   127d0:	bhi	12820 <__assert_fail@plt+0x143c>
   127d4:	add	r2, pc, #4
   127d8:	mov	ip, #45	; 0x2d
   127dc:	ldr	pc, [r2, r3, lsl #2]
   127e0:	andeq	r2, r1, r0, lsl r8
   127e4:	andeq	r2, r1, r8, lsl r8
   127e8:	andeq	r2, r1, r0, lsr #16
   127ec:	andeq	r2, r1, r8, lsr #16
   127f0:	andeq	r2, r1, r0, lsr #16
   127f4:	andeq	r2, r1, r0, asr #16
   127f8:	andeq	r2, r1, r0, lsr #16
   127fc:	andeq	r2, r1, r4, asr #16
   12800:	andeq	r2, r1, r0, lsr #16
   12804:	andeq	r2, r1, r0, lsr r8
   12808:	andeq	r2, r1, r0, lsr #16
   1280c:	andeq	r2, r1, r8, lsr r8
   12810:	mov	ip, #112	; 0x70
   12814:	b	12844 <__assert_fail@plt+0x1460>
   12818:	mov	ip, #99	; 0x63
   1281c:	b	12844 <__assert_fail@plt+0x1460>
   12820:	mov	ip, #63	; 0x3f
   12824:	b	12844 <__assert_fail@plt+0x1460>
   12828:	mov	ip, #100	; 0x64
   1282c:	b	12844 <__assert_fail@plt+0x1460>
   12830:	mov	ip, #108	; 0x6c
   12834:	b	12844 <__assert_fail@plt+0x1460>
   12838:	mov	ip, #115	; 0x73
   1283c:	b	12844 <__assert_fail@plt+0x1460>
   12840:	mov	ip, #98	; 0x62
   12844:	push	{fp, lr}
   12848:	mov	fp, sp
   1284c:	mov	r2, #32
   12850:	tst	r0, #256	; 0x100
   12854:	mov	r3, #114	; 0x72
   12858:	strb	ip, [r1]
   1285c:	mov	ip, #114	; 0x72
   12860:	mov	lr, #45	; 0x2d
   12864:	strh	r2, [r1, #10]
   12868:	movweq	r3, #45	; 0x2d
   1286c:	tst	r0, #128	; 0x80
   12870:	mov	r2, #119	; 0x77
   12874:	movweq	r2, #45	; 0x2d
   12878:	strb	r3, [r1, #1]
   1287c:	tst	r0, #32
   12880:	mov	r3, #119	; 0x77
   12884:	strb	r2, [r1, #2]
   12888:	mov	r2, #114	; 0x72
   1288c:	movweq	r2, #45	; 0x2d
   12890:	tst	r0, #16
   12894:	strb	r2, [r1, #4]
   12898:	mov	r2, #119	; 0x77
   1289c:	movweq	r2, #45	; 0x2d
   128a0:	tst	r0, #4
   128a4:	movweq	ip, #45	; 0x2d
   128a8:	tst	r0, #2
   128ac:	strb	r2, [r1, #5]
   128b0:	movweq	r3, #45	; 0x2d
   128b4:	strb	ip, [r1, #7]
   128b8:	ands	r2, r0, #64	; 0x40
   128bc:	mov	ip, #45	; 0x2d
   128c0:	strb	r3, [r1, #8]
   128c4:	mov	r3, #83	; 0x53
   128c8:	movwne	lr, #120	; 0x78
   128cc:	mov	r2, #83	; 0x53
   128d0:	movwne	r3, #115	; 0x73
   128d4:	tst	r0, #2048	; 0x800
   128d8:	moveq	r3, lr
   128dc:	strb	r3, [r1, #3]
   128e0:	ands	r3, r0, #8
   128e4:	mov	r3, #45	; 0x2d
   128e8:	movwne	r2, #115	; 0x73
   128ec:	movwne	r3, #120	; 0x78
   128f0:	tst	r0, #1024	; 0x400
   128f4:	moveq	r2, r3
   128f8:	strb	r2, [r1, #6]
   128fc:	ands	r2, r0, #1
   12900:	mov	r2, #84	; 0x54
   12904:	movwne	ip, #120	; 0x78
   12908:	movwne	r2, #116	; 0x74
   1290c:	tst	r0, #512	; 0x200
   12910:	moveq	r2, ip
   12914:	strb	r2, [r1, #9]
   12918:	pop	{fp, pc}
   1291c:	ldr	r0, [r0, #16]
   12920:	b	127c0 <__assert_fail@plt+0x13dc>
   12924:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12928:	add	fp, sp, #28
   1292c:	sub	sp, sp, #12
   12930:	cmp	r1, #4096	; 0x1000
   12934:	bcs	12950 <__assert_fail@plt+0x156c>
   12938:	mov	r6, r0
   1293c:	and	r0, r1, #516	; 0x204
   12940:	mov	r5, r1
   12944:	cmp	r0, #516	; 0x204
   12948:	tstne	r5, #18
   1294c:	bne	1296c <__assert_fail@plt+0x1588>
   12950:	bl	11294 <__errno_location@plt>
   12954:	mov	r1, #22
   12958:	str	r1, [r0]
   1295c:	mov	r8, #0
   12960:	mov	r0, r8
   12964:	sub	sp, fp, #28
   12968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1296c:	mov	r0, #1
   12970:	mov	r1, #96	; 0x60
   12974:	mov	r9, r2
   12978:	bl	18440 <__assert_fail@plt+0x705c>
   1297c:	cmp	r0, #0
   12980:	beq	1295c <__assert_fail@plt+0x1578>
   12984:	mov	r8, r0
   12988:	mvn	r0, #99	; 0x63
   1298c:	tst	r5, #2
   12990:	mov	r1, r5
   12994:	str	r0, [r8, #32]
   12998:	bic	r0, r5, #516	; 0x204
   1299c:	str	r9, [r8, #44]	; 0x2c
   129a0:	orrne	r1, r0, #4
   129a4:	str	r1, [r8, #48]	; 0x30
   129a8:	ldr	r0, [r6]
   129ac:	cmp	r0, #0
   129b0:	beq	129e4 <__assert_fail@plt+0x1600>
   129b4:	add	r4, r6, #4
   129b8:	mov	r7, #0
   129bc:	bl	11270 <strlen@plt>
   129c0:	cmp	r0, r7
   129c4:	movhi	r7, r0
   129c8:	ldr	r0, [r4], #4
   129cc:	cmp	r0, #0
   129d0:	bne	129bc <__assert_fail@plt+0x15d8>
   129d4:	add	r1, r7, #1
   129d8:	cmp	r1, #4096	; 0x1000
   129dc:	movls	r1, #4096	; 0x1000
   129e0:	b	129e8 <__assert_fail@plt+0x1604>
   129e4:	mov	r1, #4096	; 0x1000
   129e8:	mov	r0, r8
   129ec:	bl	12c40 <__assert_fail@plt+0x185c>
   129f0:	cmp	r0, #0
   129f4:	beq	12c34 <__assert_fail@plt+0x1850>
   129f8:	ldr	r0, [r6]
   129fc:	cmp	r0, #0
   12a00:	beq	12a30 <__assert_fail@plt+0x164c>
   12a04:	movw	r1, #36778	; 0x8faa
   12a08:	mov	r0, r8
   12a0c:	mov	r2, #0
   12a10:	movt	r1, #1
   12a14:	bl	12cb4 <__assert_fail@plt+0x18d0>
   12a18:	cmp	r0, #0
   12a1c:	beq	12c2c <__assert_fail@plt+0x1848>
   12a20:	mov	r4, r0
   12a24:	mvn	r0, #0
   12a28:	str	r0, [r4, #48]	; 0x30
   12a2c:	b	12a34 <__assert_fail@plt+0x1650>
   12a30:	mov	r4, #0
   12a34:	cmp	r9, #0
   12a38:	ldrbne	r0, [r8, #49]	; 0x31
   12a3c:	ubfxne	r0, r0, #2, #1
   12a40:	ldr	r7, [r6]
   12a44:	moveq	r0, #1
   12a48:	cmp	r7, #0
   12a4c:	beq	12b6c <__assert_fail@plt+0x1788>
   12a50:	eor	r0, r0, #1
   12a54:	and	r1, r5, #2048	; 0x800
   12a58:	mov	sl, #0
   12a5c:	mov	r5, #0
   12a60:	str	r0, [sp, #4]
   12a64:	mov	r0, #0
   12a68:	str	r1, [sp, #8]
   12a6c:	str	r0, [sp]
   12a70:	mov	r0, r7
   12a74:	bl	11270 <strlen@plt>
   12a78:	mov	r2, r0
   12a7c:	ldr	r0, [sp, #8]
   12a80:	cmp	r0, #0
   12a84:	bne	12abc <__assert_fail@plt+0x16d8>
   12a88:	cmp	r2, #3
   12a8c:	bcc	12abc <__assert_fail@plt+0x16d8>
   12a90:	add	r0, r7, r2
   12a94:	ldrb	r0, [r0, #-1]
   12a98:	cmp	r0, #47	; 0x2f
   12a9c:	bne	12abc <__assert_fail@plt+0x16d8>
   12aa0:	sub	r0, r7, #2
   12aa4:	ldrb	r1, [r0, r2]
   12aa8:	cmp	r1, #47	; 0x2f
   12aac:	bne	12abc <__assert_fail@plt+0x16d8>
   12ab0:	sub	r2, r2, #1
   12ab4:	cmp	r2, #1
   12ab8:	bhi	12aa4 <__assert_fail@plt+0x16c0>
   12abc:	mov	r0, r8
   12ac0:	mov	r1, r7
   12ac4:	bl	12cb4 <__assert_fail@plt+0x18d0>
   12ac8:	cmp	r0, #0
   12acc:	beq	12c1c <__assert_fail@plt+0x1838>
   12ad0:	mov	r1, #0
   12ad4:	ldr	r2, [sp, #4]
   12ad8:	str	r4, [r0, #4]
   12adc:	mov	r7, r0
   12ae0:	str	r1, [r0, #48]	; 0x30
   12ae4:	add	r0, r0, #168	; 0xa8
   12ae8:	str	r0, [r7, #24]
   12aec:	clz	r0, sl
   12af0:	lsr	r0, r0, #5
   12af4:	orrs	r0, r2, r0
   12af8:	bne	12b0c <__assert_fail@plt+0x1728>
   12afc:	mov	r0, #2
   12b00:	strd	r0, [r7, #112]	; 0x70
   12b04:	mov	r0, #11
   12b08:	b	12b20 <__assert_fail@plt+0x173c>
   12b0c:	mov	r0, r8
   12b10:	mov	r1, r7
   12b14:	mov	r2, #0
   12b18:	bl	12d34 <__assert_fail@plt+0x1950>
   12b1c:	mov	r1, #0
   12b20:	cmp	r9, #0
   12b24:	strh	r0, [r7, #56]	; 0x38
   12b28:	beq	12b38 <__assert_fail@plt+0x1754>
   12b2c:	str	sl, [r7, #8]
   12b30:	mov	sl, r7
   12b34:	b	12b50 <__assert_fail@plt+0x176c>
   12b38:	cmp	sl, #0
   12b3c:	str	r1, [r7, #8]
   12b40:	beq	12b64 <__assert_fail@plt+0x1780>
   12b44:	ldr	r0, [sp]
   12b48:	str	r7, [sp]
   12b4c:	str	r7, [r0, #8]
   12b50:	ldr	r7, [r6, #4]!
   12b54:	add	r5, r5, #1
   12b58:	cmp	r7, #0
   12b5c:	bne	12a70 <__assert_fail@plt+0x168c>
   12b60:	b	12b74 <__assert_fail@plt+0x1790>
   12b64:	str	r7, [sp]
   12b68:	b	12b30 <__assert_fail@plt+0x174c>
   12b6c:	mov	sl, #0
   12b70:	b	12b98 <__assert_fail@plt+0x17b4>
   12b74:	cmp	r9, #0
   12b78:	beq	12b98 <__assert_fail@plt+0x17b4>
   12b7c:	cmp	r5, #2
   12b80:	bcc	12b98 <__assert_fail@plt+0x17b4>
   12b84:	mov	r0, r8
   12b88:	mov	r1, sl
   12b8c:	mov	r2, r5
   12b90:	bl	12e68 <__assert_fail@plt+0x1a84>
   12b94:	mov	sl, r0
   12b98:	movw	r1, #36778	; 0x8faa
   12b9c:	mov	r0, r8
   12ba0:	mov	r2, #0
   12ba4:	movt	r1, #1
   12ba8:	bl	12cb4 <__assert_fail@plt+0x18d0>
   12bac:	cmp	r0, #0
   12bb0:	str	r0, [r8]
   12bb4:	beq	12c1c <__assert_fail@plt+0x1838>
   12bb8:	mov	r1, #9
   12bbc:	strh	r1, [r0, #56]	; 0x38
   12bc0:	mov	r1, #1
   12bc4:	str	sl, [r0, #8]
   12bc8:	str	r1, [r0, #48]	; 0x30
   12bcc:	mov	r0, r8
   12bd0:	bl	12f60 <__assert_fail@plt+0x1b7c>
   12bd4:	cmp	r0, #0
   12bd8:	beq	12c1c <__assert_fail@plt+0x1838>
   12bdc:	ldrh	r0, [r8, #48]	; 0x30
   12be0:	tst	r0, #516	; 0x204
   12be4:	bne	12c0c <__assert_fail@plt+0x1828>
   12be8:	movw	r1, #39132	; 0x98dc
   12bec:	mov	r0, r8
   12bf0:	movt	r1, #1
   12bf4:	bl	12fec <__assert_fail@plt+0x1c08>
   12bf8:	str	r0, [r8, #28]
   12bfc:	cmn	r0, #1
   12c00:	ldrle	r0, [r8, #48]	; 0x30
   12c04:	orrle	r0, r0, #4
   12c08:	strle	r0, [r8, #48]	; 0x30
   12c0c:	add	r0, r8, #60	; 0x3c
   12c10:	mvn	r1, #0
   12c14:	bl	15880 <__assert_fail@plt+0x449c>
   12c18:	b	12960 <__assert_fail@plt+0x157c>
   12c1c:	mov	r0, sl
   12c20:	bl	1301c <__assert_fail@plt+0x1c38>
   12c24:	mov	r0, r4
   12c28:	bl	18998 <__assert_fail@plt+0x75b4>
   12c2c:	ldr	r0, [r8, #24]
   12c30:	bl	18998 <__assert_fail@plt+0x75b4>
   12c34:	mov	r0, r8
   12c38:	bl	18998 <__assert_fail@plt+0x75b4>
   12c3c:	b	1295c <__assert_fail@plt+0x1578>
   12c40:	push	{r4, r5, fp, lr}
   12c44:	add	fp, sp, #8
   12c48:	mov	r4, r0
   12c4c:	ldr	r0, [r0, #36]	; 0x24
   12c50:	add	r1, r1, #256	; 0x100
   12c54:	adds	r1, r1, r0
   12c58:	bcc	12c7c <__assert_fail@plt+0x1898>
   12c5c:	ldr	r0, [r4, #24]
   12c60:	bl	18998 <__assert_fail@plt+0x75b4>
   12c64:	mov	r5, #0
   12c68:	str	r5, [r4, #24]
   12c6c:	bl	11294 <__errno_location@plt>
   12c70:	mov	r1, #36	; 0x24
   12c74:	str	r1, [r0]
   12c78:	b	12cac <__assert_fail@plt+0x18c8>
   12c7c:	str	r1, [r4, #36]	; 0x24
   12c80:	ldr	r0, [r4, #24]
   12c84:	bl	184c4 <__assert_fail@plt+0x70e0>
   12c88:	cmp	r0, #0
   12c8c:	beq	12c9c <__assert_fail@plt+0x18b8>
   12c90:	mov	r5, #1
   12c94:	str	r0, [r4, #24]
   12c98:	b	12cac <__assert_fail@plt+0x18c8>
   12c9c:	ldr	r0, [r4, #24]
   12ca0:	bl	18998 <__assert_fail@plt+0x75b4>
   12ca4:	mov	r5, #0
   12ca8:	str	r5, [r4, #24]
   12cac:	mov	r0, r5
   12cb0:	pop	{r4, r5, fp, pc}
   12cb4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12cb8:	add	fp, sp, #24
   12cbc:	mov	r5, r0
   12cc0:	add	r0, r2, #176	; 0xb0
   12cc4:	mov	r6, r2
   12cc8:	mov	r8, r1
   12ccc:	bic	r0, r0, #7
   12cd0:	bl	18494 <__assert_fail@plt+0x70b0>
   12cd4:	cmp	r0, #0
   12cd8:	beq	12d28 <__assert_fail@plt+0x1944>
   12cdc:	add	r7, r0, #168	; 0xa8
   12ce0:	mov	r4, r0
   12ce4:	mov	r1, r8
   12ce8:	mov	r2, r6
   12cec:	mov	r0, r7
   12cf0:	bl	1115c <memcpy@plt>
   12cf4:	mov	r0, #0
   12cf8:	mov	r2, #196608	; 0x30000
   12cfc:	strb	r0, [r7, r6]
   12d00:	str	r6, [r4, #52]	; 0x34
   12d04:	str	r5, [r4, #44]	; 0x2c
   12d08:	ldr	r1, [r5, #24]
   12d0c:	str	r2, [r4, #58]	; 0x3a
   12d10:	str	r0, [r4, #12]
   12d14:	str	r0, [r4, #16]
   12d18:	str	r0, [r4, #20]
   12d1c:	str	r1, [r4, #28]
   12d20:	str	r0, [r4, #32]
   12d24:	b	12d2c <__assert_fail@plt+0x1948>
   12d28:	mov	r4, #0
   12d2c:	mov	r0, r4
   12d30:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d34:	push	{r4, r5, r6, sl, fp, lr}
   12d38:	add	fp, sp, #16
   12d3c:	mov	r4, r1
   12d40:	ldr	r1, [r0, #48]	; 0x30
   12d44:	ldr	r3, [r4, #48]	; 0x30
   12d48:	add	r5, r4, #64	; 0x40
   12d4c:	cmp	r3, #0
   12d50:	andeq	r3, r1, #1
   12d54:	orreq	r2, r3, r2
   12d58:	cmp	r2, #0
   12d5c:	andseq	r1, r1, #2
   12d60:	beq	12db0 <__assert_fail@plt+0x19cc>
   12d64:	ldr	r0, [r4, #24]
   12d68:	mov	r1, r5
   12d6c:	bl	18e2c <__assert_fail@plt+0x7a48>
   12d70:	cmp	r0, #0
   12d74:	beq	12df4 <__assert_fail@plt+0x1a10>
   12d78:	bl	11294 <__errno_location@plt>
   12d7c:	mov	r6, r0
   12d80:	ldr	r0, [r0]
   12d84:	cmp	r0, #2
   12d88:	bne	12dd8 <__assert_fail@plt+0x19f4>
   12d8c:	ldr	r0, [r4, #24]
   12d90:	mov	r1, r5
   12d94:	bl	18e4c <__assert_fail@plt+0x7a68>
   12d98:	cmp	r0, #0
   12d9c:	bne	12dd4 <__assert_fail@plt+0x19f0>
   12da0:	mov	r0, #0
   12da4:	str	r0, [r6]
   12da8:	mov	r0, #13
   12dac:	pop	{r4, r5, r6, sl, fp, pc}
   12db0:	ldr	r1, [r4, #24]
   12db4:	ldr	r0, [r0, #32]
   12db8:	mov	r2, r5
   12dbc:	mov	r3, #256	; 0x100
   12dc0:	bl	18e5c <__assert_fail@plt+0x7a78>
   12dc4:	cmp	r0, #0
   12dc8:	beq	12df4 <__assert_fail@plt+0x1a10>
   12dcc:	bl	11294 <__errno_location@plt>
   12dd0:	mov	r6, r0
   12dd4:	ldr	r0, [r6]
   12dd8:	str	r0, [r4, #32]
   12ddc:	mov	r0, r5
   12de0:	mov	r1, #0
   12de4:	mov	r2, #104	; 0x68
   12de8:	bl	112b8 <memset@plt>
   12dec:	mov	r0, #10
   12df0:	pop	{r4, r5, r6, sl, fp, pc}
   12df4:	ldr	r0, [r4, #80]	; 0x50
   12df8:	and	r0, r0, #61440	; 0xf000
   12dfc:	cmp	r0, #40960	; 0xa000
   12e00:	moveq	r0, #12
   12e04:	popeq	{r4, r5, r6, sl, fp, pc}
   12e08:	cmp	r0, #32768	; 0x8000
   12e0c:	moveq	r0, #8
   12e10:	popeq	{r4, r5, r6, sl, fp, pc}
   12e14:	cmp	r0, #16384	; 0x4000
   12e18:	bne	12e4c <__assert_fail@plt+0x1a68>
   12e1c:	ldrb	r1, [r4, #168]	; 0xa8
   12e20:	mov	r0, #1
   12e24:	cmp	r1, #46	; 0x2e
   12e28:	popne	{r4, r5, r6, sl, fp, pc}
   12e2c:	ldrb	r1, [r4, #169]	; 0xa9
   12e30:	cmp	r1, #0
   12e34:	beq	12e54 <__assert_fail@plt+0x1a70>
   12e38:	cmp	r1, #46	; 0x2e
   12e3c:	ldrbeq	r1, [r4, #170]	; 0xaa
   12e40:	cmpeq	r1, #0
   12e44:	beq	12e54 <__assert_fail@plt+0x1a70>
   12e48:	pop	{r4, r5, r6, sl, fp, pc}
   12e4c:	mov	r0, #3
   12e50:	pop	{r4, r5, r6, sl, fp, pc}
   12e54:	ldr	r1, [r4, #48]	; 0x30
   12e58:	mov	r0, #5
   12e5c:	cmp	r1, #0
   12e60:	movweq	r0, #1
   12e64:	pop	{r4, r5, r6, sl, fp, pc}
   12e68:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12e6c:	add	fp, sp, #24
   12e70:	ldrd	r8, [r0, #40]	; 0x28
   12e74:	mov	r5, r2
   12e78:	mov	r4, r1
   12e7c:	mov	r6, r0
   12e80:	cmp	r8, r2
   12e84:	bcs	12ebc <__assert_fail@plt+0x1ad8>
   12e88:	add	r1, r5, #40	; 0x28
   12e8c:	cmn	r1, #-1073741823	; 0xc0000001
   12e90:	str	r1, [r6, #40]	; 0x28
   12e94:	bhi	12f44 <__assert_fail@plt+0x1b60>
   12e98:	add	r7, r6, #8
   12e9c:	lsl	r1, r1, #2
   12ea0:	ldr	r0, [r7]
   12ea4:	bl	184c4 <__assert_fail@plt+0x70e0>
   12ea8:	cmp	r0, #0
   12eac:	beq	12f44 <__assert_fail@plt+0x1b60>
   12eb0:	mov	r6, r7
   12eb4:	str	r0, [r7]
   12eb8:	b	12ec0 <__assert_fail@plt+0x1adc>
   12ebc:	ldr	r0, [r6, #8]!
   12ec0:	cmp	r4, #0
   12ec4:	beq	12edc <__assert_fail@plt+0x1af8>
   12ec8:	str	r4, [r0], #4
   12ecc:	ldr	r4, [r4, #8]
   12ed0:	cmp	r4, #0
   12ed4:	bne	12ec8 <__assert_fail@plt+0x1ae4>
   12ed8:	ldr	r0, [r6]
   12edc:	mov	r1, r5
   12ee0:	mov	r2, #4
   12ee4:	mov	r3, r9
   12ee8:	bl	11360 <qsort@plt>
   12eec:	ldr	r7, [r6]
   12ef0:	subs	r0, r5, #1
   12ef4:	ldr	r4, [r7]
   12ef8:	mov	r1, r4
   12efc:	beq	12f38 <__assert_fail@plt+0x1b54>
   12f00:	mov	r1, r7
   12f04:	cmp	r5, #2
   12f08:	ldr	r2, [r1, #4]!
   12f0c:	str	r2, [r4, #8]
   12f10:	beq	12f34 <__assert_fail@plt+0x1b50>
   12f14:	rsb	r3, r5, #2
   12f18:	mov	r2, r1
   12f1c:	ldr	r6, [r2, #4]!
   12f20:	ldr	r1, [r1]
   12f24:	adds	r3, r3, #1
   12f28:	str	r6, [r1, #8]
   12f2c:	mov	r1, r2
   12f30:	bne	12f1c <__assert_fail@plt+0x1b38>
   12f34:	ldr	r1, [r7, r0, lsl #2]
   12f38:	mov	r0, #0
   12f3c:	str	r0, [r1, #8]
   12f40:	b	12f58 <__assert_fail@plt+0x1b74>
   12f44:	ldr	r0, [r6, #8]
   12f48:	bl	18998 <__assert_fail@plt+0x75b4>
   12f4c:	mov	r0, #0
   12f50:	str	r0, [r6, #40]	; 0x28
   12f54:	str	r0, [r6, #8]
   12f58:	mov	r0, r4
   12f5c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12f60:	push	{r4, r5, fp, lr}
   12f64:	add	fp, sp, #8
   12f68:	sub	sp, sp, #8
   12f6c:	mov	r4, r0
   12f70:	ldrh	r0, [r0, #48]	; 0x30
   12f74:	movw	r1, #258	; 0x102
   12f78:	tst	r0, r1
   12f7c:	beq	12fbc <__assert_fail@plt+0x1bd8>
   12f80:	movw	r0, #35224	; 0x8998
   12f84:	movw	r2, #18224	; 0x4730
   12f88:	movw	r3, #18256	; 0x4750
   12f8c:	mov	r1, #0
   12f90:	mov	r5, #0
   12f94:	movt	r0, #1
   12f98:	movt	r2, #1
   12f9c:	movt	r3, #1
   12fa0:	str	r0, [sp]
   12fa4:	mov	r0, #31
   12fa8:	bl	14da8 <__assert_fail@plt+0x39c4>
   12fac:	cmp	r0, #0
   12fb0:	str	r0, [r4, #56]	; 0x38
   12fb4:	movne	r5, #1
   12fb8:	b	12fe0 <__assert_fail@plt+0x1bfc>
   12fbc:	mov	r0, #32
   12fc0:	bl	18494 <__assert_fail@plt+0x70b0>
   12fc4:	cmp	r0, #0
   12fc8:	str	r0, [r4, #56]	; 0x38
   12fcc:	beq	12fdc <__assert_fail@plt+0x1bf8>
   12fd0:	bl	18594 <__assert_fail@plt+0x71b0>
   12fd4:	mov	r5, #1
   12fd8:	b	12fe0 <__assert_fail@plt+0x1bfc>
   12fdc:	mov	r5, #0
   12fe0:	mov	r0, r5
   12fe4:	sub	sp, fp, #8
   12fe8:	pop	{r4, r5, fp, pc}
   12fec:	ldr	r3, [r0, #48]	; 0x30
   12ff0:	mov	r2, #32768	; 0x8000
   12ff4:	and	r2, r2, r3, lsl #11
   12ff8:	tst	r3, #512	; 0x200
   12ffc:	orr	r2, r2, #18688	; 0x4900
   13000:	orr	r2, r2, #524288	; 0x80000
   13004:	bne	13014 <__assert_fail@plt+0x1c30>
   13008:	mov	r0, r1
   1300c:	mov	r1, r2
   13010:	b	188f4 <__assert_fail@plt+0x7510>
   13014:	ldr	r0, [r0, #32]
   13018:	b	15e08 <__assert_fail@plt+0x4a24>
   1301c:	push	{r4, r6, r7, sl, fp, lr}
   13020:	add	fp, sp, #16
   13024:	cmp	r0, #0
   13028:	popeq	{r4, r6, r7, sl, fp, pc}
   1302c:	mov	r4, r0
   13030:	ldrd	r6, [r4, #8]
   13034:	cmp	r7, #0
   13038:	beq	13044 <__assert_fail@plt+0x1c60>
   1303c:	mov	r0, r7
   13040:	bl	113d8 <closedir@plt>
   13044:	mov	r0, r4
   13048:	bl	18998 <__assert_fail@plt+0x75b4>
   1304c:	cmp	r6, #0
   13050:	mov	r4, r6
   13054:	bne	13030 <__assert_fail@plt+0x1c4c>
   13058:	pop	{r4, r6, r7, sl, fp, pc}
   1305c:	push	{r4, r5, fp, lr}
   13060:	add	fp, sp, #8
   13064:	mov	r4, r0
   13068:	ldr	r0, [r0]
   1306c:	cmp	r0, #0
   13070:	beq	130b0 <__assert_fail@plt+0x1ccc>
   13074:	ldr	r1, [r0, #48]	; 0x30
   13078:	cmp	r1, #0
   1307c:	blt	130a4 <__assert_fail@plt+0x1cc0>
   13080:	ldr	r5, [r0, #8]
   13084:	cmp	r5, #0
   13088:	ldreq	r5, [r0, #4]
   1308c:	bl	18998 <__assert_fail@plt+0x75b4>
   13090:	ldr	r0, [r5, #48]	; 0x30
   13094:	cmn	r0, #1
   13098:	mov	r0, r5
   1309c:	bgt	13080 <__assert_fail@plt+0x1c9c>
   130a0:	b	130a8 <__assert_fail@plt+0x1cc4>
   130a4:	mov	r5, r0
   130a8:	mov	r0, r5
   130ac:	bl	18998 <__assert_fail@plt+0x75b4>
   130b0:	ldr	r0, [r4, #4]
   130b4:	cmp	r0, #0
   130b8:	blne	1301c <__assert_fail@plt+0x1c38>
   130bc:	ldr	r0, [r4, #8]
   130c0:	bl	18998 <__assert_fail@plt+0x75b4>
   130c4:	ldr	r0, [r4, #24]
   130c8:	bl	18998 <__assert_fail@plt+0x75b4>
   130cc:	ldr	r0, [r4, #48]	; 0x30
   130d0:	tst	r0, #512	; 0x200
   130d4:	bne	13100 <__assert_fail@plt+0x1d1c>
   130d8:	mov	r5, #0
   130dc:	tst	r0, #4
   130e0:	bne	1313c <__assert_fail@plt+0x1d58>
   130e4:	ldr	r0, [r4, #28]
   130e8:	bl	11354 <fchdir@plt>
   130ec:	cmp	r0, #0
   130f0:	beq	13118 <__assert_fail@plt+0x1d34>
   130f4:	bl	11294 <__errno_location@plt>
   130f8:	ldr	r5, [r0]
   130fc:	b	1311c <__assert_fail@plt+0x1d38>
   13100:	ldr	r0, [r4, #32]
   13104:	mov	r5, #0
   13108:	cmp	r0, #0
   1310c:	blt	1313c <__assert_fail@plt+0x1d58>
   13110:	bl	113c0 <close@plt>
   13114:	b	1312c <__assert_fail@plt+0x1d48>
   13118:	mov	r5, #0
   1311c:	ldr	r0, [r4, #28]
   13120:	bl	113c0 <close@plt>
   13124:	cmp	r5, #0
   13128:	bne	1313c <__assert_fail@plt+0x1d58>
   1312c:	cmp	r0, #0
   13130:	beq	1313c <__assert_fail@plt+0x1d58>
   13134:	bl	11294 <__errno_location@plt>
   13138:	ldr	r5, [r0]
   1313c:	add	r0, r4, #60	; 0x3c
   13140:	bl	13180 <__assert_fail@plt+0x1d9c>
   13144:	ldr	r0, [r4, #52]	; 0x34
   13148:	cmp	r0, #0
   1314c:	beq	13154 <__assert_fail@plt+0x1d70>
   13150:	bl	150d4 <__assert_fail@plt+0x3cf0>
   13154:	mov	r0, r4
   13158:	bl	131b4 <__assert_fail@plt+0x1dd0>
   1315c:	mov	r0, r4
   13160:	bl	18998 <__assert_fail@plt+0x75b4>
   13164:	cmp	r5, #0
   13168:	moveq	r0, #0
   1316c:	popeq	{r4, r5, fp, pc}
   13170:	bl	11294 <__errno_location@plt>
   13174:	str	r5, [r0]
   13178:	mvn	r0, #0
   1317c:	pop	{r4, r5, fp, pc}
   13180:	push	{r4, sl, fp, lr}
   13184:	add	fp, sp, #8
   13188:	mov	r4, r0
   1318c:	bl	158b4 <__assert_fail@plt+0x44d0>
   13190:	cmp	r0, #0
   13194:	popne	{r4, sl, fp, pc}
   13198:	mov	r0, r4
   1319c:	bl	15908 <__assert_fail@plt+0x4524>
   131a0:	cmp	r0, #0
   131a4:	blt	131ac <__assert_fail@plt+0x1dc8>
   131a8:	bl	113c0 <close@plt>
   131ac:	mov	r0, r4
   131b0:	b	1318c <__assert_fail@plt+0x1da8>
   131b4:	ldrh	r1, [r0, #48]	; 0x30
   131b8:	movw	r2, #258	; 0x102
   131bc:	tst	r1, r2
   131c0:	beq	131d4 <__assert_fail@plt+0x1df0>
   131c4:	ldr	r0, [r0, #56]	; 0x38
   131c8:	cmp	r0, #0
   131cc:	bxeq	lr
   131d0:	b	150d4 <__assert_fail@plt+0x3cf0>
   131d4:	ldr	r0, [r0, #56]	; 0x38
   131d8:	b	18998 <__assert_fail@plt+0x75b4>
   131dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   131e0:	add	fp, sp, #24
   131e4:	ldr	r6, [r0]
   131e8:	mov	r5, #0
   131ec:	cmp	r6, #0
   131f0:	beq	137e4 <__assert_fail@plt+0x2400>
   131f4:	ldr	r1, [r0, #48]	; 0x30
   131f8:	mov	r4, r0
   131fc:	tst	r1, #8192	; 0x2000
   13200:	bne	137e4 <__assert_fail@plt+0x2400>
   13204:	ldrh	r0, [r6, #60]	; 0x3c
   13208:	mov	r2, #3
   1320c:	strh	r2, [r6, #60]	; 0x3c
   13210:	cmp	r0, #1
   13214:	beq	13264 <__assert_fail@plt+0x1e80>
   13218:	mov	r7, r6
   1321c:	cmp	r0, #2
   13220:	bne	1327c <__assert_fail@plt+0x1e98>
   13224:	ldrh	r2, [r7, #56]!	; 0x38
   13228:	movw	r3, #65534	; 0xfffe
   1322c:	and	r3, r2, r3
   13230:	cmp	r3, #12
   13234:	bne	13280 <__assert_fail@plt+0x1e9c>
   13238:	mov	r0, r4
   1323c:	mov	r1, r6
   13240:	mov	r2, #1
   13244:	bl	12d34 <__assert_fail@plt+0x1950>
   13248:	strh	r0, [r6, #56]	; 0x38
   1324c:	cmp	r0, #1
   13250:	ldrbeq	r0, [r4, #48]	; 0x30
   13254:	tsteq	r0, #4
   13258:	beq	1344c <__assert_fail@plt+0x2068>
   1325c:	mov	r5, r6
   13260:	b	13574 <__assert_fail@plt+0x2190>
   13264:	mov	r0, r4
   13268:	mov	r1, r6
   1326c:	mov	r2, #0
   13270:	bl	12d34 <__assert_fail@plt+0x1950>
   13274:	strh	r0, [r6, #56]	; 0x38
   13278:	b	132d0 <__assert_fail@plt+0x1eec>
   1327c:	ldrh	r2, [r7, #56]!	; 0x38
   13280:	cmp	r2, #1
   13284:	bne	132d8 <__assert_fail@plt+0x1ef4>
   13288:	cmp	r0, #4
   1328c:	bne	13344 <__assert_fail@plt+0x1f60>
   13290:	ldrb	r0, [r6, #58]	; 0x3a
   13294:	tst	r0, #2
   13298:	beq	132a4 <__assert_fail@plt+0x1ec0>
   1329c:	ldr	r0, [r6, #36]	; 0x24
   132a0:	bl	113c0 <close@plt>
   132a4:	ldr	r0, [r4, #4]
   132a8:	cmp	r0, #0
   132ac:	beq	132bc <__assert_fail@plt+0x1ed8>
   132b0:	bl	1301c <__assert_fail@plt+0x1c38>
   132b4:	mov	r0, #0
   132b8:	str	r0, [r4, #4]
   132bc:	mov	r0, #6
   132c0:	strh	r0, [r6, #56]	; 0x38
   132c4:	mov	r0, r4
   132c8:	mov	r1, r6
   132cc:	bl	137f0 <__assert_fail@plt+0x240c>
   132d0:	mov	r5, r6
   132d4:	b	137e4 <__assert_fail@plt+0x2400>
   132d8:	ldr	r5, [r6, #8]
   132dc:	cmp	r5, #0
   132e0:	beq	133dc <__assert_fail@plt+0x1ff8>
   132e4:	mov	r0, r6
   132e8:	str	r5, [r4]
   132ec:	bl	18998 <__assert_fail@plt+0x75b4>
   132f0:	ldr	r0, [r5, #48]	; 0x30
   132f4:	cmp	r0, #0
   132f8:	beq	13428 <__assert_fail@plt+0x2044>
   132fc:	ldrh	r0, [r5, #60]	; 0x3c
   13300:	mov	r6, r5
   13304:	cmp	r0, #4
   13308:	beq	132d8 <__assert_fail@plt+0x1ef4>
   1330c:	cmp	r0, #2
   13310:	bne	13538 <__assert_fail@plt+0x2154>
   13314:	mov	r0, r4
   13318:	mov	r1, r5
   1331c:	mov	r2, #1
   13320:	bl	12d34 <__assert_fail@plt+0x1950>
   13324:	strh	r0, [r5, #56]	; 0x38
   13328:	cmp	r0, #1
   1332c:	ldrbeq	r0, [r4, #48]	; 0x30
   13330:	tsteq	r0, #4
   13334:	beq	13748 <__assert_fail@plt+0x2364>
   13338:	mov	r0, #3
   1333c:	strh	r0, [r5, #60]	; 0x3c
   13340:	b	13538 <__assert_fail@plt+0x2154>
   13344:	tst	r1, #64	; 0x40
   13348:	beq	1336c <__assert_fail@plt+0x1f88>
   1334c:	ldr	r0, [r4, #16]
   13350:	ldr	r3, [r4, #20]
   13354:	ldr	r2, [r6, #64]	; 0x40
   13358:	ldr	r5, [r6, #68]	; 0x44
   1335c:	eor	r3, r5, r3
   13360:	eor	r0, r2, r0
   13364:	orrs	r0, r0, r3
   13368:	bne	13290 <__assert_fail@plt+0x1eac>
   1336c:	ldr	r0, [r4, #4]
   13370:	cmp	r0, #0
   13374:	beq	13514 <__assert_fail@plt+0x2130>
   13378:	tst	r1, #4096	; 0x1000
   1337c:	bne	13500 <__assert_fail@plt+0x211c>
   13380:	ldr	r3, [r6, #24]
   13384:	mov	r0, r4
   13388:	mov	r1, r6
   1338c:	mvn	r2, #0
   13390:	bl	138bc <__assert_fail@plt+0x24d8>
   13394:	cmp	r0, #0
   13398:	beq	1352c <__assert_fail@plt+0x2148>
   1339c:	bl	11294 <__errno_location@plt>
   133a0:	ldr	r0, [r0]
   133a4:	str	r0, [r6, #32]
   133a8:	ldrh	r0, [r6, #58]	; 0x3a
   133ac:	orr	r0, r0, #1
   133b0:	strh	r0, [r6, #58]	; 0x3a
   133b4:	ldr	r0, [r4, #4]
   133b8:	cmp	r0, #0
   133bc:	beq	1352c <__assert_fail@plt+0x2148>
   133c0:	ldmib	r0, {r1, r2}
   133c4:	ldr	r1, [r1, #24]
   133c8:	cmp	r2, #0
   133cc:	str	r1, [r0, #24]
   133d0:	mov	r0, r2
   133d4:	bne	133c0 <__assert_fail@plt+0x1fdc>
   133d8:	b	1352c <__assert_fail@plt+0x2148>
   133dc:	ldr	r5, [r6, #4]
   133e0:	ldr	r0, [r5, #12]
   133e4:	cmp	r0, #0
   133e8:	beq	13630 <__assert_fail@plt+0x224c>
   133ec:	str	r5, [r4]
   133f0:	ldr	r1, [r5, #40]	; 0x28
   133f4:	ldr	r0, [r4, #24]
   133f8:	mov	r5, #0
   133fc:	strb	r5, [r0, r1]
   13400:	mov	r0, r4
   13404:	mov	r1, #3
   13408:	bl	13a94 <__assert_fail@plt+0x26b0>
   1340c:	cmp	r0, #0
   13410:	beq	13620 <__assert_fail@plt+0x223c>
   13414:	mov	r7, r0
   13418:	mov	r0, r6
   1341c:	bl	18998 <__assert_fail@plt+0x75b4>
   13420:	mov	r5, r7
   13424:	b	13538 <__assert_fail@plt+0x2154>
   13428:	mov	r0, r4
   1342c:	bl	14428 <__assert_fail@plt+0x3044>
   13430:	cmp	r0, #0
   13434:	beq	13478 <__assert_fail@plt+0x2094>
   13438:	ldr	r0, [r4, #48]	; 0x30
   1343c:	mov	r5, #0
   13440:	orr	r0, r0, #8192	; 0x2000
   13444:	str	r0, [r4, #48]	; 0x30
   13448:	b	137e4 <__assert_fail@plt+0x2400>
   1344c:	movw	r1, #39132	; 0x98dc
   13450:	mov	r0, r4
   13454:	movt	r1, #1
   13458:	bl	12fec <__assert_fail@plt+0x1c08>
   1345c:	cmn	r0, #1
   13460:	str	r0, [r6, #36]	; 0x24
   13464:	ble	136bc <__assert_fail@plt+0x22d8>
   13468:	ldrh	r0, [r6, #58]	; 0x3a
   1346c:	orr	r0, r0, #2
   13470:	strh	r0, [r6, #58]	; 0x3a
   13474:	b	1325c <__assert_fail@plt+0x1e78>
   13478:	mov	r0, r4
   1347c:	bl	131b4 <__assert_fail@plt+0x1dd0>
   13480:	ldr	r1, [r5, #52]	; 0x34
   13484:	add	r6, r5, #168	; 0xa8
   13488:	str	r1, [r5, #40]	; 0x28
   1348c:	add	r2, r1, #1
   13490:	mov	r1, r6
   13494:	ldr	r0, [r4, #24]
   13498:	bl	11138 <memmove@plt>
   1349c:	mov	r0, r6
   134a0:	mov	r1, #47	; 0x2f
   134a4:	bl	11318 <strrchr@plt>
   134a8:	cmp	r0, #0
   134ac:	beq	134e8 <__assert_fail@plt+0x2104>
   134b0:	cmp	r0, r6
   134b4:	bne	134c4 <__assert_fail@plt+0x20e0>
   134b8:	ldrb	r1, [r5, #169]	; 0xa9
   134bc:	cmp	r1, #0
   134c0:	beq	134e8 <__assert_fail@plt+0x2104>
   134c4:	add	r7, r0, #1
   134c8:	mov	r0, r7
   134cc:	bl	11270 <strlen@plt>
   134d0:	mov	r8, r0
   134d4:	add	r2, r0, #1
   134d8:	mov	r0, r6
   134dc:	mov	r1, r7
   134e0:	bl	11138 <memmove@plt>
   134e4:	str	r8, [r5, #52]	; 0x34
   134e8:	ldr	r0, [r4, #24]
   134ec:	str	r0, [r5, #24]
   134f0:	str	r0, [r5, #28]
   134f4:	mov	r0, r4
   134f8:	bl	12f60 <__assert_fail@plt+0x1b7c>
   134fc:	b	13574 <__assert_fail@plt+0x2190>
   13500:	bic	r1, r1, #4096	; 0x1000
   13504:	str	r1, [r4, #48]	; 0x30
   13508:	bl	1301c <__assert_fail@plt+0x1c38>
   1350c:	mov	r0, #0
   13510:	str	r0, [r4, #4]
   13514:	mov	r0, r4
   13518:	mov	r1, #3
   1351c:	bl	13a94 <__assert_fail@plt+0x26b0>
   13520:	cmp	r0, #0
   13524:	str	r0, [r4, #4]
   13528:	beq	135f4 <__assert_fail@plt+0x2210>
   1352c:	ldr	r5, [r4, #4]
   13530:	mov	r0, #0
   13534:	str	r0, [r4, #4]
   13538:	ldr	r0, [r5, #4]
   1353c:	ldr	r1, [r0, #28]
   13540:	ldr	r0, [r0, #40]	; 0x28
   13544:	sub	r2, r0, #1
   13548:	ldrb	r1, [r1, r2]
   1354c:	cmp	r1, #47	; 0x2f
   13550:	ldr	r1, [r4, #24]
   13554:	moveq	r0, r2
   13558:	mov	r2, #47	; 0x2f
   1355c:	strb	r2, [r1, r0]!
   13560:	ldr	r2, [r5, #52]	; 0x34
   13564:	add	r0, r1, #1
   13568:	add	r1, r5, #168	; 0xa8
   1356c:	add	r2, r2, #1
   13570:	bl	11138 <memmove@plt>
   13574:	str	r5, [r4]
   13578:	ldrh	r0, [r5, #56]	; 0x38
   1357c:	cmp	r0, #11
   13580:	bne	135b4 <__assert_fail@plt+0x21d0>
   13584:	ldrd	r0, [r5, #112]	; 0x70
   13588:	eor	r2, r0, #1
   1358c:	orrs	r2, r2, r1
   13590:	beq	137e4 <__assert_fail@plt+0x2400>
   13594:	eor	r0, r0, #2
   13598:	orrs	r0, r0, r1
   1359c:	bne	137ec <__assert_fail@plt+0x2408>
   135a0:	mov	r0, r4
   135a4:	mov	r1, r5
   135a8:	mov	r2, #0
   135ac:	bl	12d34 <__assert_fail@plt+0x1950>
   135b0:	strh	r0, [r5, #56]	; 0x38
   135b4:	cmp	r0, #1
   135b8:	bne	137e4 <__assert_fail@plt+0x2400>
   135bc:	ldr	r0, [r5, #48]	; 0x30
   135c0:	cmp	r0, #0
   135c4:	ldrdeq	r0, [r5, #64]	; 0x40
   135c8:	strdeq	r0, [r4, #16]
   135cc:	mov	r0, r4
   135d0:	mov	r1, r5
   135d4:	bl	14484 <__assert_fail@plt+0x30a0>
   135d8:	cmp	r0, #0
   135dc:	bne	137e4 <__assert_fail@plt+0x2400>
   135e0:	bl	11294 <__errno_location@plt>
   135e4:	mov	r1, #12
   135e8:	mov	r5, #0
   135ec:	str	r1, [r0]
   135f0:	b	137e4 <__assert_fail@plt+0x2400>
   135f4:	ldrb	r0, [r4, #49]	; 0x31
   135f8:	mov	r5, #0
   135fc:	tst	r0, #32
   13600:	bne	137e4 <__assert_fail@plt+0x2400>
   13604:	ldr	r0, [r6, #32]
   13608:	cmp	r0, #0
   1360c:	ldrhne	r0, [r7]
   13610:	cmpne	r0, #4
   13614:	movne	r0, #7
   13618:	strhne	r0, [r7]
   1361c:	b	132c4 <__assert_fail@plt+0x1ee0>
   13620:	ldrb	r0, [r4, #49]	; 0x31
   13624:	tst	r0, #32
   13628:	bne	137e4 <__assert_fail@plt+0x2400>
   1362c:	ldr	r5, [r6, #4]
   13630:	mov	r0, r6
   13634:	str	r5, [r4]
   13638:	bl	18998 <__assert_fail@plt+0x75b4>
   1363c:	ldr	r0, [r5, #48]	; 0x30
   13640:	cmn	r0, #1
   13644:	beq	136a0 <__assert_fail@plt+0x22bc>
   13648:	ldrh	r0, [r5, #56]	; 0x38
   1364c:	cmp	r0, #11
   13650:	beq	137ec <__assert_fail@plt+0x2408>
   13654:	ldr	r0, [r5, #40]	; 0x28
   13658:	ldr	r1, [r4, #24]
   1365c:	mov	r2, #0
   13660:	strb	r2, [r1, r0]
   13664:	ldr	r0, [r5, #48]	; 0x30
   13668:	cmp	r0, #0
   1366c:	beq	136d4 <__assert_fail@plt+0x22f0>
   13670:	ldrh	r0, [r5, #58]	; 0x3a
   13674:	tst	r0, #2
   13678:	bne	13700 <__assert_fail@plt+0x231c>
   1367c:	tst	r0, #1
   13680:	bne	137a8 <__assert_fail@plt+0x23c4>
   13684:	ldr	r1, [r5, #4]
   13688:	movw	r3, #39131	; 0x98db
   1368c:	mov	r0, r4
   13690:	mvn	r2, #0
   13694:	movt	r3, #1
   13698:	bl	138bc <__assert_fail@plt+0x24d8>
   1369c:	b	136dc <__assert_fail@plt+0x22f8>
   136a0:	mov	r0, r5
   136a4:	bl	18998 <__assert_fail@plt+0x75b4>
   136a8:	bl	11294 <__errno_location@plt>
   136ac:	mov	r5, #0
   136b0:	str	r5, [r0]
   136b4:	str	r5, [r4]
   136b8:	b	137e4 <__assert_fail@plt+0x2400>
   136bc:	bl	11294 <__errno_location@plt>
   136c0:	ldr	r0, [r0]
   136c4:	mov	r1, #7
   136c8:	strh	r1, [r6, #56]	; 0x38
   136cc:	str	r0, [r6, #32]
   136d0:	b	1325c <__assert_fail@plt+0x1e78>
   136d4:	mov	r0, r4
   136d8:	bl	14428 <__assert_fail@plt+0x3044>
   136dc:	cmp	r0, #0
   136e0:	beq	137a8 <__assert_fail@plt+0x23c4>
   136e4:	bl	11294 <__errno_location@plt>
   136e8:	ldr	r0, [r0]
   136ec:	str	r0, [r5, #32]
   136f0:	ldr	r0, [r4, #48]	; 0x30
   136f4:	orr	r0, r0, #8192	; 0x2000
   136f8:	str	r0, [r4, #48]	; 0x30
   136fc:	b	137a8 <__assert_fail@plt+0x23c4>
   13700:	ldr	r0, [r4, #48]	; 0x30
   13704:	tst	r0, #4
   13708:	bne	13774 <__assert_fail@plt+0x2390>
   1370c:	mov	r6, r5
   13710:	tst	r0, #512	; 0x200
   13714:	ldr	r1, [r6, #36]!	; 0x24
   13718:	bne	13794 <__assert_fail@plt+0x23b0>
   1371c:	mov	r0, r1
   13720:	bl	11354 <fchdir@plt>
   13724:	cmp	r0, #0
   13728:	beq	137a0 <__assert_fail@plt+0x23bc>
   1372c:	bl	11294 <__errno_location@plt>
   13730:	ldr	r0, [r0]
   13734:	str	r0, [r5, #32]
   13738:	ldr	r0, [r4, #48]	; 0x30
   1373c:	orr	r0, r0, #8192	; 0x2000
   13740:	str	r0, [r4, #48]	; 0x30
   13744:	b	137a0 <__assert_fail@plt+0x23bc>
   13748:	movw	r1, #39132	; 0x98dc
   1374c:	mov	r0, r4
   13750:	movt	r1, #1
   13754:	bl	12fec <__assert_fail@plt+0x1c08>
   13758:	cmn	r0, #1
   1375c:	str	r0, [r5, #36]	; 0x24
   13760:	ble	1377c <__assert_fail@plt+0x2398>
   13764:	ldrh	r0, [r5, #58]	; 0x3a
   13768:	orr	r0, r0, #2
   1376c:	strh	r0, [r5, #58]	; 0x3a
   13770:	b	13338 <__assert_fail@plt+0x1f54>
   13774:	add	r6, r5, #36	; 0x24
   13778:	b	137a0 <__assert_fail@plt+0x23bc>
   1377c:	bl	11294 <__errno_location@plt>
   13780:	ldr	r0, [r0]
   13784:	mov	r1, #7
   13788:	strh	r1, [r5, #56]	; 0x38
   1378c:	str	r0, [r5, #32]
   13790:	b	13338 <__assert_fail@plt+0x1f54>
   13794:	mov	r0, r4
   13798:	mov	r2, #1
   1379c:	bl	14538 <__assert_fail@plt+0x3154>
   137a0:	ldr	r0, [r6]
   137a4:	bl	113c0 <close@plt>
   137a8:	ldrh	r0, [r5, #56]	; 0x38
   137ac:	cmp	r0, #2
   137b0:	beq	137d8 <__assert_fail@plt+0x23f4>
   137b4:	ldr	r0, [r5, #32]
   137b8:	mov	r1, #7
   137bc:	cmp	r0, #0
   137c0:	movweq	r1, #6
   137c4:	strh	r1, [r5, #56]	; 0x38
   137c8:	bne	137d8 <__assert_fail@plt+0x23f4>
   137cc:	mov	r0, r4
   137d0:	mov	r1, r5
   137d4:	bl	137f0 <__assert_fail@plt+0x240c>
   137d8:	ldrb	r0, [r4, #49]	; 0x31
   137dc:	tst	r0, #32
   137e0:	movne	r5, #0
   137e4:	mov	r0, r5
   137e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   137ec:	bl	113b4 <abort@plt>
   137f0:	push	{r4, r5, r6, r7, fp, lr}
   137f4:	add	fp, sp, #16
   137f8:	sub	sp, sp, #24
   137fc:	ldrh	r2, [r0, #48]	; 0x30
   13800:	movw	r3, #258	; 0x102
   13804:	add	lr, r1, #64	; 0x40
   13808:	tst	r2, r3
   1380c:	beq	13844 <__assert_fail@plt+0x2460>
   13810:	ldrd	r2, [lr]
   13814:	stm	sp, {r2, r3}
   13818:	ldrd	r2, [r1, #160]	; 0xa0
   1381c:	mov	r1, sp
   13820:	str	r3, [sp, #12]
   13824:	str	r2, [sp, #8]
   13828:	ldr	r0, [r0, #56]	; 0x38
   1382c:	bl	15770 <__assert_fail@plt+0x438c>
   13830:	cmp	r0, #0
   13834:	beq	138b8 <__assert_fail@plt+0x24d4>
   13838:	bl	18998 <__assert_fail@plt+0x75b4>
   1383c:	sub	sp, fp, #16
   13840:	pop	{r4, r5, r6, r7, fp, pc}
   13844:	ldr	r2, [r1, #4]
   13848:	cmp	r2, #0
   1384c:	beq	1383c <__assert_fail@plt+0x2458>
   13850:	ldr	r3, [r2, #48]	; 0x30
   13854:	cmp	r3, #0
   13858:	blt	1383c <__assert_fail@plt+0x2458>
   1385c:	ldr	ip, [r0, #56]	; 0x38
   13860:	ldrd	r4, [ip, #16]
   13864:	orrs	r3, r4, r5
   13868:	beq	138b8 <__assert_fail@plt+0x24d4>
   1386c:	ldrd	r4, [r1, #160]	; 0xa0
   13870:	ldrd	r6, [ip]
   13874:	eor	r1, r7, r5
   13878:	eor	r3, r6, r4
   1387c:	orrs	r1, r3, r1
   13880:	bne	1383c <__assert_fail@plt+0x2458>
   13884:	ldr	r1, [ip, #8]!
   13888:	ldrd	r4, [lr]
   1388c:	ldr	r3, [ip, #4]
   13890:	eor	r1, r1, r4
   13894:	eor	r3, r3, r5
   13898:	orrs	r1, r1, r3
   1389c:	bne	1383c <__assert_fail@plt+0x2458>
   138a0:	ldrd	r4, [r2, #64]	; 0x40
   138a4:	strd	r4, [ip]
   138a8:	ldr	r0, [r0, #56]	; 0x38
   138ac:	ldrd	r2, [r2, #160]	; 0xa0
   138b0:	strd	r2, [r0]
   138b4:	b	1383c <__assert_fail@plt+0x2458>
   138b8:	bl	113b4 <abort@plt>
   138bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138c0:	add	fp, sp, #28
   138c4:	sub	sp, sp, #108	; 0x6c
   138c8:	mov	r7, r3
   138cc:	mov	r4, r2
   138d0:	mov	r8, r1
   138d4:	mov	sl, r0
   138d8:	cmp	r3, #0
   138dc:	beq	13900 <__assert_fail@plt+0x251c>
   138e0:	movw	r1, #39131	; 0x98db
   138e4:	mov	r0, r7
   138e8:	movt	r1, #1
   138ec:	bl	11120 <strcmp@plt>
   138f0:	mov	r6, r0
   138f4:	cmp	r0, #0
   138f8:	movwne	r6, #1
   138fc:	b	13904 <__assert_fail@plt+0x2520>
   13900:	mov	r6, #1
   13904:	ldr	r0, [sl, #48]	; 0x30
   13908:	tst	r0, #4
   1390c:	bne	13964 <__assert_fail@plt+0x2580>
   13910:	cmn	r4, #1
   13914:	mov	r1, #0
   13918:	mov	r9, #0
   1391c:	movwgt	r1, #1
   13920:	orrs	r1, r1, r6
   13924:	bne	13984 <__assert_fail@plt+0x25a0>
   13928:	ands	r0, r0, #512	; 0x200
   1392c:	beq	13984 <__assert_fail@plt+0x25a0>
   13930:	add	r4, sl, #60	; 0x3c
   13934:	mov	r0, r4
   13938:	bl	158b4 <__assert_fail@plt+0x44d0>
   1393c:	cmp	r0, #0
   13940:	bne	1398c <__assert_fail@plt+0x25a8>
   13944:	mov	r0, r4
   13948:	bl	15908 <__assert_fail@plt+0x4524>
   1394c:	cmn	r0, #1
   13950:	ble	1398c <__assert_fail@plt+0x25a8>
   13954:	mov	r4, r0
   13958:	mov	r9, #0
   1395c:	mov	r7, #0
   13960:	b	139a8 <__assert_fail@plt+0x25c4>
   13964:	mov	r5, #0
   13968:	cmp	r4, #0
   1396c:	blt	13a88 <__assert_fail@plt+0x26a4>
   13970:	ands	r0, r0, #512	; 0x200
   13974:	beq	13a88 <__assert_fail@plt+0x26a4>
   13978:	mov	r0, r4
   1397c:	bl	113c0 <close@plt>
   13980:	b	13a88 <__assert_fail@plt+0x26a4>
   13984:	cmn	r4, #1
   13988:	bgt	139a8 <__assert_fail@plt+0x25c4>
   1398c:	mov	r0, sl
   13990:	mov	r1, r7
   13994:	bl	12fec <__assert_fail@plt+0x1c08>
   13998:	cmp	r0, #0
   1399c:	blt	13a38 <__assert_fail@plt+0x2654>
   139a0:	mov	r4, r0
   139a4:	mov	r9, #1
   139a8:	ldr	r5, [sl, #48]	; 0x30
   139ac:	tst	r5, #2
   139b0:	bne	139d4 <__assert_fail@plt+0x25f0>
   139b4:	cmp	r7, #0
   139b8:	beq	13a20 <__assert_fail@plt+0x263c>
   139bc:	movw	r1, #39131	; 0x98db
   139c0:	mov	r0, r7
   139c4:	movt	r1, #1
   139c8:	bl	11120 <strcmp@plt>
   139cc:	cmp	r0, #0
   139d0:	bne	13a20 <__assert_fail@plt+0x263c>
   139d4:	mov	r1, sp
   139d8:	mov	r0, r4
   139dc:	bl	18e3c <__assert_fail@plt+0x7a58>
   139e0:	cmp	r0, #0
   139e4:	bne	13a64 <__assert_fail@plt+0x2680>
   139e8:	ldrd	r0, [r8, #64]	; 0x40
   139ec:	ldm	sp, {r2, r3}
   139f0:	eor	r1, r1, r3
   139f4:	eor	r0, r0, r2
   139f8:	orrs	r0, r0, r1
   139fc:	bne	13a58 <__assert_fail@plt+0x2674>
   13a00:	ldrd	r0, [r8, #160]	; 0xa0
   13a04:	ldr	r2, [sp, #96]	; 0x60
   13a08:	ldr	r3, [sp, #100]	; 0x64
   13a0c:	eor	r1, r1, r3
   13a10:	eor	r0, r0, r2
   13a14:	orrs	r0, r0, r1
   13a18:	bne	13a58 <__assert_fail@plt+0x2674>
   13a1c:	ldr	r5, [sl, #48]	; 0x30
   13a20:	tst	r5, #512	; 0x200
   13a24:	bne	13a40 <__assert_fail@plt+0x265c>
   13a28:	mov	r0, r4
   13a2c:	bl	11354 <fchdir@plt>
   13a30:	mov	r5, r0
   13a34:	b	13a68 <__assert_fail@plt+0x2684>
   13a38:	mvn	r5, #0
   13a3c:	b	13a88 <__assert_fail@plt+0x26a4>
   13a40:	mov	r0, sl
   13a44:	mov	r1, r4
   13a48:	mov	r2, r6
   13a4c:	bl	14538 <__assert_fail@plt+0x3154>
   13a50:	mov	r5, #0
   13a54:	b	13a88 <__assert_fail@plt+0x26a4>
   13a58:	bl	11294 <__errno_location@plt>
   13a5c:	mov	r1, #2
   13a60:	str	r1, [r0]
   13a64:	mvn	r5, #0
   13a68:	cmp	r9, #0
   13a6c:	beq	13a88 <__assert_fail@plt+0x26a4>
   13a70:	bl	11294 <__errno_location@plt>
   13a74:	ldr	r7, [r0]
   13a78:	mov	r6, r0
   13a7c:	mov	r0, r4
   13a80:	bl	113c0 <close@plt>
   13a84:	str	r7, [r6]
   13a88:	mov	r0, r5
   13a8c:	sub	sp, fp, #28
   13a90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a98:	add	fp, sp, #28
   13a9c:	sub	sp, sp, #68	; 0x44
   13aa0:	ldr	r8, [r0]
   13aa4:	mov	r4, r1
   13aa8:	mov	r6, r0
   13aac:	str	r0, [fp, #-40]	; 0xffffffd8
   13ab0:	ldr	r5, [r8, #12]
   13ab4:	cmp	r5, #0
   13ab8:	beq	13afc <__assert_fail@plt+0x2718>
   13abc:	mov	r0, r5
   13ac0:	bl	11348 <dirfd@plt>
   13ac4:	cmn	r0, #1
   13ac8:	str	r0, [fp, #-32]	; 0xffffffe0
   13acc:	ble	13b38 <__assert_fail@plt+0x2754>
   13ad0:	ldr	r0, [r6, #44]!	; 0x2c
   13ad4:	mvn	r2, #0
   13ad8:	str	r5, [sp, #12]
   13adc:	cmp	r0, #0
   13ae0:	str	r6, [sp, #44]	; 0x2c
   13ae4:	add	r9, r6, #4
   13ae8:	mov	r6, #0
   13aec:	movweq	r2, #34464	; 0x86a0
   13af0:	movteq	r2, #1
   13af4:	str	r2, [sp, #24]
   13af8:	b	13d2c <__assert_fail@plt+0x2948>
   13afc:	mov	r9, r6
   13b00:	mvn	r0, #99	; 0x63
   13b04:	mov	r2, #0
   13b08:	str	r5, [sp, #12]
   13b0c:	ldr	r3, [r9, #48]!	; 0x30
   13b10:	and	r1, r3, #516	; 0x204
   13b14:	cmp	r1, #512	; 0x200
   13b18:	ldr	r1, [r8, #24]
   13b1c:	ldreq	r0, [r6, #32]
   13b20:	tst	r3, #16
   13b24:	beq	13b58 <__assert_fail@plt+0x2774>
   13b28:	tst	r3, #1
   13b2c:	bne	13b4c <__assert_fail@plt+0x2768>
   13b30:	mov	r2, #32768	; 0x8000
   13b34:	b	13b58 <__assert_fail@plt+0x2774>
   13b38:	ldr	r0, [r8, #12]
   13b3c:	bl	113d8 <closedir@plt>
   13b40:	mov	r5, #0
   13b44:	str	r5, [r8, #12]
   13b48:	b	13b94 <__assert_fail@plt+0x27b0>
   13b4c:	ldr	r3, [r8, #48]	; 0x30
   13b50:	cmp	r3, #0
   13b54:	movne	r2, #32768	; 0x8000
   13b58:	sub	r3, fp, #32
   13b5c:	bl	15e4c <__assert_fail@plt+0x4a68>
   13b60:	cmp	r0, #0
   13b64:	str	r0, [r8, #12]
   13b68:	beq	13b90 <__assert_fail@plt+0x27ac>
   13b6c:	ldrh	r0, [r8, #56]	; 0x38
   13b70:	cmp	r0, #11
   13b74:	bne	13bb4 <__assert_fail@plt+0x27d0>
   13b78:	mov	r0, r6
   13b7c:	mov	r1, r8
   13b80:	mov	r2, #0
   13b84:	bl	12d34 <__assert_fail@plt+0x1950>
   13b88:	strh	r0, [r8, #56]	; 0x38
   13b8c:	b	13bf4 <__assert_fail@plt+0x2810>
   13b90:	mov	r5, #0
   13b94:	cmp	r4, #3
   13b98:	bne	143c4 <__assert_fail@plt+0x2fe0>
   13b9c:	mov	r0, #4
   13ba0:	strh	r0, [r8, #56]	; 0x38
   13ba4:	bl	11294 <__errno_location@plt>
   13ba8:	ldr	r0, [r0]
   13bac:	str	r0, [r8, #32]
   13bb0:	b	143c4 <__assert_fail@plt+0x2fe0>
   13bb4:	ldrb	r0, [r9, #1]
   13bb8:	tst	r0, #1
   13bbc:	beq	13bf4 <__assert_fail@plt+0x2810>
   13bc0:	mov	r0, r6
   13bc4:	mov	r1, r8
   13bc8:	bl	137f0 <__assert_fail@plt+0x240c>
   13bcc:	mov	r0, r6
   13bd0:	mov	r1, r8
   13bd4:	mov	r2, #0
   13bd8:	mov	r5, #0
   13bdc:	bl	12d34 <__assert_fail@plt+0x1950>
   13be0:	mov	r0, r6
   13be4:	mov	r1, r8
   13be8:	bl	14484 <__assert_fail@plt+0x30a0>
   13bec:	cmp	r0, #0
   13bf0:	beq	141d8 <__assert_fail@plt+0x2df4>
   13bf4:	mov	r1, r6
   13bf8:	mov	sl, r6
   13bfc:	ldr	r0, [r1, #44]!	; 0x2c
   13c00:	str	r1, [sp, #44]	; 0x2c
   13c04:	mvn	r1, #0
   13c08:	cmp	r0, #0
   13c0c:	movweq	r1, #34464	; 0x86a0
   13c10:	movteq	r1, #1
   13c14:	cmp	r4, #2
   13c18:	str	r1, [sp, #24]
   13c1c:	bne	13c40 <__assert_fail@plt+0x285c>
   13c20:	mov	r6, #1
   13c24:	cmp	r4, #3
   13c28:	bne	13d2c <__assert_fail@plt+0x2948>
   13c2c:	sub	r0, r4, #3
   13c30:	mov	r7, r8
   13c34:	mov	r8, r4
   13c38:	mov	r5, #0
   13c3c:	b	13c68 <__assert_fail@plt+0x2884>
   13c40:	ldr	r0, [r9]
   13c44:	and	r0, r0, #56	; 0x38
   13c48:	cmp	r0, #24
   13c4c:	ldreq	r0, [r8, #84]	; 0x54
   13c50:	cmpeq	r0, #2
   13c54:	beq	143d0 <__assert_fail@plt+0x2fec>
   13c58:	sub	r0, r4, #3
   13c5c:	mov	r7, r8
   13c60:	mov	r8, r4
   13c64:	mov	r5, #1
   13c68:	clz	r0, r0
   13c6c:	lsr	r4, r0, #5
   13c70:	ldrb	r0, [r9, #1]
   13c74:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13c78:	tst	r0, #2
   13c7c:	beq	13c98 <__assert_fail@plt+0x28b4>
   13c80:	mov	r0, r2
   13c84:	movw	r1, #1030	; 0x406
   13c88:	mov	r2, #3
   13c8c:	bl	1871c <__assert_fail@plt+0x7338>
   13c90:	mov	r2, r0
   13c94:	str	r0, [fp, #-32]	; 0xffffffe0
   13c98:	cmp	r2, #0
   13c9c:	blt	13cb8 <__assert_fail@plt+0x28d4>
   13ca0:	mov	r0, sl
   13ca4:	mov	r1, r7
   13ca8:	mov	r3, #0
   13cac:	bl	138bc <__assert_fail@plt+0x24d8>
   13cb0:	cmp	r0, #0
   13cb4:	beq	13d20 <__assert_fail@plt+0x293c>
   13cb8:	and	r0, r4, r5
   13cbc:	cmp	r0, #1
   13cc0:	bne	13cd0 <__assert_fail@plt+0x28ec>
   13cc4:	bl	11294 <__errno_location@plt>
   13cc8:	ldr	r0, [r0]
   13ccc:	str	r0, [r7, #32]
   13cd0:	ldrh	r0, [r7, #58]	; 0x3a
   13cd4:	orr	r0, r0, #1
   13cd8:	strh	r0, [r7, #58]	; 0x3a
   13cdc:	ldr	r0, [r7, #12]
   13ce0:	bl	113d8 <closedir@plt>
   13ce4:	mov	r4, #0
   13ce8:	mov	r5, r7
   13cec:	str	r4, [r7, #12]
   13cf0:	ldr	r0, [r9]
   13cf4:	tst	r0, #512	; 0x200
   13cf8:	beq	13d0c <__assert_fail@plt+0x2928>
   13cfc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13d00:	cmp	r0, #0
   13d04:	blt	13d0c <__assert_fail@plt+0x2928>
   13d08:	bl	113c0 <close@plt>
   13d0c:	str	r4, [r5, #12]
   13d10:	mov	r4, r8
   13d14:	mov	r6, #1
   13d18:	mov	r8, r5
   13d1c:	b	13d2c <__assert_fail@plt+0x2948>
   13d20:	mov	r4, r8
   13d24:	mov	r6, #0
   13d28:	mov	r8, r7
   13d2c:	ldr	r0, [r8, #40]	; 0x28
   13d30:	ldr	r1, [r8, #28]
   13d34:	mov	r5, #0
   13d38:	str	r4, [sp, #4]
   13d3c:	sub	r2, r0, #1
   13d40:	ldrb	r1, [r1, r2]
   13d44:	cmp	r1, #47	; 0x2f
   13d48:	ldrb	r1, [r9]
   13d4c:	moveq	r0, r2
   13d50:	tst	r1, #4
   13d54:	mov	r1, #0
   13d58:	str	r1, [sp, #36]	; 0x24
   13d5c:	beq	13d78 <__assert_fail@plt+0x2994>
   13d60:	ldr	r1, [fp, #-40]	; 0xffffffd8
   13d64:	mov	r2, #47	; 0x2f
   13d68:	ldr	r1, [r1, #24]
   13d6c:	strb	r2, [r1, r0]!
   13d70:	add	r1, r1, #1
   13d74:	str	r1, [sp, #36]	; 0x24
   13d78:	ldr	r4, [r8, #12]
   13d7c:	add	r0, r0, #1
   13d80:	str	r0, [sp, #48]	; 0x30
   13d84:	cmp	r4, #0
   13d88:	beq	140b0 <__assert_fail@plt+0x2ccc>
   13d8c:	mov	r1, r0
   13d90:	ldr	r0, [r8, #48]	; 0x30
   13d94:	str	r6, [sp]
   13d98:	mov	r6, #0
   13d9c:	add	r0, r0, #1
   13da0:	str	r0, [sp, #20]
   13da4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   13da8:	ldr	r0, [r0, #36]	; 0x24
   13dac:	sub	r0, r0, r1
   13db0:	str	r0, [fp, #-44]	; 0xffffffd4
   13db4:	bl	11294 <__errno_location@plt>
   13db8:	str	r0, [sp, #28]
   13dbc:	mov	r0, #0
   13dc0:	mov	r5, #0
   13dc4:	mov	r7, #0
   13dc8:	str	r8, [sp, #32]
   13dcc:	str	r9, [fp, #-36]	; 0xffffffdc
   13dd0:	str	r0, [sp, #40]	; 0x28
   13dd4:	mov	r0, #0
   13dd8:	str	r0, [sp, #16]
   13ddc:	mov	r0, #0
   13de0:	str	r0, [sp, #8]
   13de4:	ldr	r0, [sp, #28]
   13de8:	str	r6, [r0]
   13dec:	mov	r0, r4
   13df0:	bl	11330 <readdir64@plt>
   13df4:	cmp	r0, #0
   13df8:	beq	14110 <__assert_fail@plt+0x2d2c>
   13dfc:	mov	sl, r0
   13e00:	ldrb	r0, [r9]
   13e04:	ldr	r6, [fp, #-40]	; 0xffffffd8
   13e08:	add	r4, sl, #19
   13e0c:	tst	r0, #32
   13e10:	ldrbeq	r0, [r4]
   13e14:	cmpeq	r0, #46	; 0x2e
   13e18:	beq	13eb8 <__assert_fail@plt+0x2ad4>
   13e1c:	mov	r0, r4
   13e20:	bl	11270 <strlen@plt>
   13e24:	mov	r8, r0
   13e28:	mov	r0, r6
   13e2c:	mov	r1, r4
   13e30:	mov	r2, r8
   13e34:	bl	12cb4 <__assert_fail@plt+0x18d0>
   13e38:	mov	r9, r0
   13e3c:	cmp	r0, #0
   13e40:	beq	140c4 <__assert_fail@plt+0x2ce0>
   13e44:	ldr	r1, [fp, #-44]	; 0xffffffd4
   13e48:	cmp	r8, r1
   13e4c:	bcs	13e60 <__assert_fail@plt+0x2a7c>
   13e50:	ldr	r2, [sp, #48]	; 0x30
   13e54:	add	r4, r8, r2
   13e58:	mov	r8, r6
   13e5c:	b	13eec <__assert_fail@plt+0x2b08>
   13e60:	ldr	r1, [sp, #48]	; 0x30
   13e64:	add	r4, r8, r1
   13e68:	mov	r8, r6
   13e6c:	ldr	r6, [r6, #24]
   13e70:	add	r1, r4, #1
   13e74:	mov	r0, r8
   13e78:	bl	12c40 <__assert_fail@plt+0x185c>
   13e7c:	cmp	r0, #0
   13e80:	beq	140c4 <__assert_fail@plt+0x2ce0>
   13e84:	ldr	r0, [r8, #24]
   13e88:	cmp	r6, r0
   13e8c:	beq	13ee0 <__assert_fail@plt+0x2afc>
   13e90:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13e94:	ldr	r2, [sp, #48]	; 0x30
   13e98:	ldrb	r1, [r1]
   13e9c:	tst	r1, #4
   13ea0:	ldr	r1, [sp, #36]	; 0x24
   13ea4:	addne	r1, r0, r2
   13ea8:	mov	r0, #1
   13eac:	str	r1, [sp, #36]	; 0x24
   13eb0:	str	r0, [sp, #8]
   13eb4:	b	13ee4 <__assert_fail@plt+0x2b00>
   13eb8:	ldrb	r0, [sl, #20]
   13ebc:	cmp	r0, #0
   13ec0:	beq	13ed4 <__assert_fail@plt+0x2af0>
   13ec4:	cmp	r0, #46	; 0x2e
   13ec8:	ldrbeq	r0, [sl, #21]
   13ecc:	cmpeq	r0, #0
   13ed0:	bne	13e1c <__assert_fail@plt+0x2a38>
   13ed4:	ldr	r8, [sp, #32]
   13ed8:	mov	r6, #0
   13edc:	b	14098 <__assert_fail@plt+0x2cb4>
   13ee0:	ldr	r2, [sp, #48]	; 0x30
   13ee4:	ldr	r0, [r8, #36]	; 0x24
   13ee8:	sub	r1, r0, r2
   13eec:	cmp	r4, r2
   13ef0:	bcc	14168 <__assert_fail@plt+0x2d84>
   13ef4:	ldr	r0, [sp, #20]
   13ef8:	str	r1, [fp, #-44]	; 0xffffffd4
   13efc:	str	r0, [r9, #48]	; 0x30
   13f00:	ldr	r0, [r8]
   13f04:	str	r4, [r9, #40]	; 0x28
   13f08:	str	r0, [r9, #4]
   13f0c:	ldrd	r0, [sl]
   13f10:	strd	r0, [r9, #160]	; 0xa0
   13f14:	ldrb	r0, [r8, #48]	; 0x30
   13f18:	tst	r0, #4
   13f1c:	bne	13f2c <__assert_fail@plt+0x2b48>
   13f20:	add	r0, r9, #168	; 0xa8
   13f24:	str	r0, [r9, #24]
   13f28:	b	13f48 <__assert_fail@plt+0x2b64>
   13f2c:	ldr	r0, [r9, #28]
   13f30:	ldr	r2, [r9, #52]	; 0x34
   13f34:	add	r1, r9, #168	; 0xa8
   13f38:	str	r0, [r9, #24]
   13f3c:	ldr	r0, [sp, #36]	; 0x24
   13f40:	add	r2, r2, #1
   13f44:	bl	11138 <memmove@plt>
   13f48:	ldr	r0, [sp, #44]	; 0x2c
   13f4c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13f50:	ldr	r0, [r0]
   13f54:	ldr	r2, [r1]
   13f58:	cmp	r0, #0
   13f5c:	beq	13f84 <__assert_fail@plt+0x2ba0>
   13f60:	ands	r0, r2, #1024	; 0x400
   13f64:	bne	13f84 <__assert_fail@plt+0x2ba0>
   13f68:	mov	r0, r8
   13f6c:	mov	r1, r9
   13f70:	mov	r2, #0
   13f74:	bl	12d34 <__assert_fail@plt+0x1950>
   13f78:	mov	r6, #0
   13f7c:	strh	r0, [r9, #56]	; 0x38
   13f80:	b	13ff8 <__assert_fail@plt+0x2c14>
   13f84:	ldrb	r3, [sl, #18]
   13f88:	mov	r0, #0
   13f8c:	tst	r2, #8
   13f90:	mov	r1, #0
   13f94:	beq	13fb8 <__assert_fail@plt+0x2bd4>
   13f98:	orr	r1, r3, #4
   13f9c:	cmp	r1, #4
   13fa0:	mov	r1, #0
   13fa4:	beq	13fb8 <__assert_fail@plt+0x2bd4>
   13fa8:	eor	r1, r3, #10
   13fac:	and	r2, r2, #16
   13fb0:	orrs	r1, r2, r1
   13fb4:	movwne	r1, #1
   13fb8:	mov	r2, #11
   13fbc:	mov	r6, #0
   13fc0:	strh	r2, [r9, #56]	; 0x38
   13fc4:	sub	r2, r3, #1
   13fc8:	uxtb	r3, r2
   13fcc:	cmp	r3, #11
   13fd0:	sxtbls	r0, r2
   13fd4:	movwls	r2, #39136	; 0x98e0
   13fd8:	movtls	r2, #1
   13fdc:	ldrls	r0, [r2, r0, lsl #2]
   13fe0:	cmp	r1, #0
   13fe4:	str	r0, [r9, #80]	; 0x50
   13fe8:	mov	r0, #2
   13fec:	movwne	r0, #1
   13ff0:	str	r0, [r9, #112]	; 0x70
   13ff4:	str	r6, [r9, #116]	; 0x74
   13ff8:	cmp	r5, #0
   13ffc:	mov	r4, r9
   14000:	str	r6, [r9, #8]
   14004:	ldrne	r0, [sp, #40]	; 0x28
   14008:	movne	r4, r5
   1400c:	strne	r9, [r0, #8]
   14010:	movw	r0, #10000	; 0x2710
   14014:	cmp	r7, r0
   14018:	bne	1406c <__assert_fail@plt+0x2c88>
   1401c:	ldr	r0, [sp, #44]	; 0x2c
   14020:	ldr	r0, [r0]
   14024:	cmp	r0, #0
   14028:	bne	1406c <__assert_fail@plt+0x2c88>
   1402c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14030:	ldr	r0, [sp, #32]
   14034:	bl	147d0 <__assert_fail@plt+0x33ec>
   14038:	mov	r1, #0
   1403c:	str	r1, [sp, #16]
   14040:	movw	r1, #19778	; 0x4d42
   14044:	movt	r1, #65363	; 0xff53
   14048:	cmp	r0, r1
   1404c:	movwne	r1, #26985	; 0x6969
   14050:	cmpne	r0, r1
   14054:	beq	1406c <__assert_fail@plt+0x2c88>
   14058:	movw	r1, #6548	; 0x1994
   1405c:	movt	r1, #258	; 0x102
   14060:	cmp	r0, r1
   14064:	movne	r0, #1
   14068:	strne	r0, [sp, #16]
   1406c:	ldr	r0, [sp, #24]
   14070:	add	r7, r7, #1
   14074:	cmp	r0, r7
   14078:	mov	r0, #0
   1407c:	movwls	r0, #15
   14080:	cmp	r0, #0
   14084:	bne	141b4 <__assert_fail@plt+0x2dd0>
   14088:	str	r9, [sp, #40]	; 0x28
   1408c:	ldr	r9, [fp, #-36]	; 0xffffffdc
   14090:	ldr	r8, [sp, #32]
   14094:	mov	r5, r4
   14098:	ldr	r4, [r8, #12]
   1409c:	cmp	r4, #0
   140a0:	bne	13de4 <__assert_fail@plt+0x2a00>
   140a4:	ldr	r0, [sp, #8]
   140a8:	ldr	r4, [sp, #4]
   140ac:	b	14158 <__assert_fail@plt+0x2d74>
   140b0:	ldr	r4, [sp, #4]
   140b4:	mov	r7, #0
   140b8:	mov	r0, #0
   140bc:	str	r0, [sp, #16]
   140c0:	b	14280 <__assert_fail@plt+0x2e9c>
   140c4:	ldr	r4, [sp, #28]
   140c8:	mov	r0, r9
   140cc:	ldr	r8, [r4]
   140d0:	bl	18998 <__assert_fail@plt+0x75b4>
   140d4:	mov	r0, r5
   140d8:	bl	1301c <__assert_fail@plt+0x1c38>
   140dc:	ldr	r6, [sp, #32]
   140e0:	ldr	r0, [r6, #12]
   140e4:	bl	113d8 <closedir@plt>
   140e8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   140ec:	mov	r5, #0
   140f0:	mov	r0, #7
   140f4:	str	r5, [r6, #12]
   140f8:	strh	r0, [r6, #56]	; 0x38
   140fc:	ldr	r0, [r7]
   14100:	orr	r0, r0, #8192	; 0x2000
   14104:	str	r0, [r7]
   14108:	str	r8, [r4]
   1410c:	b	143c4 <__assert_fail@plt+0x2fe0>
   14110:	ldr	r0, [sp, #28]
   14114:	ldr	r0, [r0]
   14118:	cmp	r0, #0
   1411c:	beq	14138 <__assert_fail@plt+0x2d54>
   14120:	str	r0, [r8, #32]
   14124:	ldr	r0, [sp, #12]
   14128:	orrs	r0, r0, r7
   1412c:	mov	r0, #4
   14130:	movwne	r0, #7
   14134:	strh	r0, [r8, #56]	; 0x38
   14138:	ldr	r0, [r8, #12]
   1413c:	ldr	r4, [sp, #4]
   14140:	cmp	r0, #0
   14144:	beq	141e8 <__assert_fail@plt+0x2e04>
   14148:	bl	113d8 <closedir@plt>
   1414c:	mov	r0, #0
   14150:	str	r0, [r8, #12]
   14154:	ldr	r0, [sp, #8]
   14158:	tst	r0, #1
   1415c:	ldr	r6, [sp]
   14160:	bne	141f8 <__assert_fail@plt+0x2e14>
   14164:	b	14280 <__assert_fail@plt+0x2e9c>
   14168:	mov	r0, r9
   1416c:	bl	18998 <__assert_fail@plt+0x75b4>
   14170:	mov	r0, r5
   14174:	bl	1301c <__assert_fail@plt+0x1c38>
   14178:	ldr	r4, [sp, #32]
   1417c:	ldr	r0, [r4, #12]
   14180:	bl	113d8 <closedir@plt>
   14184:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14188:	mov	r5, #0
   1418c:	mov	r0, #7
   14190:	ldr	r1, [sp, #28]
   14194:	str	r5, [r4, #12]
   14198:	strh	r0, [r4, #56]	; 0x38
   1419c:	ldr	r0, [r7]
   141a0:	orr	r0, r0, #8192	; 0x2000
   141a4:	str	r0, [r7]
   141a8:	mov	r0, #36	; 0x24
   141ac:	str	r0, [r1]
   141b0:	b	143c4 <__assert_fail@plt+0x2fe0>
   141b4:	ldr	r6, [sp]
   141b8:	cmp	r0, #15
   141bc:	bne	143c0 <__assert_fail@plt+0x2fdc>
   141c0:	mov	r5, r4
   141c4:	ldr	r9, [fp, #-36]	; 0xffffffdc
   141c8:	ldr	r4, [sp, #4]
   141cc:	ldr	r0, [sp, #8]
   141d0:	ldr	r8, [sp, #32]
   141d4:	b	141f0 <__assert_fail@plt+0x2e0c>
   141d8:	bl	11294 <__errno_location@plt>
   141dc:	mov	r1, #12
   141e0:	str	r1, [r0]
   141e4:	b	143c4 <__assert_fail@plt+0x2fe0>
   141e8:	ldr	r6, [sp]
   141ec:	ldr	r0, [sp, #8]
   141f0:	tst	r0, #1
   141f4:	beq	14280 <__assert_fail@plt+0x2e9c>
   141f8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   141fc:	ldr	r1, [r0, #4]
   14200:	ldr	r0, [r0, #24]
   14204:	b	1422c <__assert_fail@plt+0x2e48>
   14208:	ldr	r2, [r1, #24]
   1420c:	add	r3, r1, #168	; 0xa8
   14210:	cmp	r2, r3
   14214:	ldrne	r3, [r1, #28]
   14218:	subne	r2, r2, r3
   1421c:	addne	r2, r0, r2
   14220:	strne	r2, [r1, #24]
   14224:	str	r0, [r1, #28]
   14228:	ldr	r1, [r1, #8]
   1422c:	cmp	r1, #0
   14230:	bne	14208 <__assert_fail@plt+0x2e24>
   14234:	ldr	r1, [r5, #48]	; 0x30
   14238:	cmp	r1, #0
   1423c:	blt	14280 <__assert_fail@plt+0x2e9c>
   14240:	mov	r1, r5
   14244:	ldr	r2, [r1, #24]
   14248:	add	r3, r1, #168	; 0xa8
   1424c:	cmp	r2, r3
   14250:	ldrne	r3, [r1, #28]
   14254:	subne	r2, r2, r3
   14258:	addne	r2, r0, r2
   1425c:	strne	r2, [r1, #24]
   14260:	str	r0, [r1, #28]
   14264:	ldr	r2, [r1, #8]
   14268:	cmp	r2, #0
   1426c:	ldreq	r2, [r1, #4]
   14270:	ldr	r1, [r2, #48]	; 0x30
   14274:	cmn	r1, #1
   14278:	mov	r1, r2
   1427c:	bgt	14244 <__assert_fail@plt+0x2e60>
   14280:	ldrb	r0, [r9]
   14284:	tst	r0, #4
   14288:	beq	142b8 <__assert_fail@plt+0x2ed4>
   1428c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14290:	ldr	r2, [sp, #36]	; 0x24
   14294:	ldr	r3, [sp, #48]	; 0x30
   14298:	ldr	r0, [r0, #36]	; 0x24
   1429c:	sub	r1, r2, #1
   142a0:	cmp	r3, r0
   142a4:	mov	r0, #0
   142a8:	moveq	r2, r1
   142ac:	cmp	r7, #0
   142b0:	moveq	r2, r1
   142b4:	strb	r0, [r2]
   142b8:	ldr	r0, [sp, #12]
   142bc:	cmp	r0, #0
   142c0:	movwne	r0, #1
   142c4:	orrs	r0, r0, r6
   142c8:	beq	142f4 <__assert_fail@plt+0x2f10>
   142cc:	cmp	r7, #0
   142d0:	bne	14328 <__assert_fail@plt+0x2f44>
   142d4:	cmp	r4, #3
   142d8:	bne	143b8 <__assert_fail@plt+0x2fd4>
   142dc:	ldrh	r0, [r8, #56]	; 0x38
   142e0:	cmp	r0, #4
   142e4:	cmpne	r0, #7
   142e8:	movne	r0, #6
   142ec:	strhne	r0, [r8, #56]	; 0x38
   142f0:	b	143b8 <__assert_fail@plt+0x2fd4>
   142f4:	cmp	r4, #1
   142f8:	cmpne	r7, #0
   142fc:	bne	14328 <__assert_fail@plt+0x2f44>
   14300:	ldr	r0, [r8, #48]	; 0x30
   14304:	cmp	r0, #0
   14308:	beq	14394 <__assert_fail@plt+0x2fb0>
   1430c:	ldr	r1, [r8, #4]
   14310:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14314:	movw	r3, #39131	; 0x98db
   14318:	mvn	r2, #0
   1431c:	movt	r3, #1
   14320:	bl	138bc <__assert_fail@plt+0x24d8>
   14324:	b	1439c <__assert_fail@plt+0x2fb8>
   14328:	ldr	r0, [sp, #16]
   1432c:	tst	r0, #1
   14330:	beq	14364 <__assert_fail@plt+0x2f80>
   14334:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14338:	movw	r0, #18328	; 0x4798
   1433c:	mov	r1, r5
   14340:	mov	r2, r7
   14344:	movt	r0, #1
   14348:	str	r0, [r4, #44]	; 0x2c
   1434c:	mov	r0, r4
   14350:	bl	12e68 <__assert_fail@plt+0x1a84>
   14354:	mov	r5, r0
   14358:	mov	r0, #0
   1435c:	str	r0, [r4, #44]	; 0x2c
   14360:	b	143c4 <__assert_fail@plt+0x2fe0>
   14364:	cmp	r7, #2
   14368:	bcc	143c4 <__assert_fail@plt+0x2fe0>
   1436c:	ldr	r0, [sp, #44]	; 0x2c
   14370:	ldr	r0, [r0]
   14374:	cmp	r0, #0
   14378:	beq	143c4 <__assert_fail@plt+0x2fe0>
   1437c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14380:	mov	r1, r5
   14384:	mov	r2, r7
   14388:	bl	12e68 <__assert_fail@plt+0x1a84>
   1438c:	mov	r5, r0
   14390:	b	143c4 <__assert_fail@plt+0x2fe0>
   14394:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14398:	bl	14428 <__assert_fail@plt+0x3044>
   1439c:	cmp	r0, #0
   143a0:	beq	142cc <__assert_fail@plt+0x2ee8>
   143a4:	mov	r0, #7
   143a8:	strh	r0, [r8, #56]	; 0x38
   143ac:	ldr	r0, [r9]
   143b0:	orr	r0, r0, #8192	; 0x2000
   143b4:	str	r0, [r9]
   143b8:	mov	r0, r5
   143bc:	bl	1301c <__assert_fail@plt+0x1c38>
   143c0:	mov	r5, #0
   143c4:	mov	r0, r5
   143c8:	sub	sp, fp, #28
   143cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143d0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   143d4:	mov	r0, r8
   143d8:	bl	147d0 <__assert_fail@plt+0x33ec>
   143dc:	movw	r1, #26984	; 0x6968
   143e0:	cmp	r0, r1
   143e4:	ble	14410 <__assert_fail@plt+0x302c>
   143e8:	movw	r1, #26985	; 0x6969
   143ec:	cmp	r0, r1
   143f0:	movwne	r1, #16719	; 0x414f
   143f4:	movtne	r1, #21318	; 0x5346
   143f8:	cmpne	r0, r1
   143fc:	beq	13c58 <__assert_fail@plt+0x2874>
   14400:	movw	r1, #40864	; 0x9fa0
   14404:	cmp	r0, r1
   14408:	beq	13c58 <__assert_fail@plt+0x2874>
   1440c:	b	13c20 <__assert_fail@plt+0x283c>
   14410:	movw	r1, #19778	; 0x4d42
   14414:	movt	r1, #65363	; 0xff53
   14418:	cmp	r0, r1
   1441c:	cmpne	r0, #0
   14420:	beq	13c58 <__assert_fail@plt+0x2874>
   14424:	b	13c20 <__assert_fail@plt+0x283c>
   14428:	push	{r4, r5, fp, lr}
   1442c:	add	fp, sp, #8
   14430:	mov	r4, r0
   14434:	ldr	r0, [r0, #48]	; 0x30
   14438:	mov	r5, #0
   1443c:	tst	r0, #4
   14440:	bne	14474 <__assert_fail@plt+0x3090>
   14444:	tst	r0, #512	; 0x200
   14448:	bne	14464 <__assert_fail@plt+0x3080>
   1444c:	ldr	r0, [r4, #28]
   14450:	bl	11354 <fchdir@plt>
   14454:	mov	r5, r0
   14458:	cmp	r0, #0
   1445c:	movwne	r5, #1
   14460:	b	14474 <__assert_fail@plt+0x3090>
   14464:	mov	r0, r4
   14468:	mvn	r1, #99	; 0x63
   1446c:	mov	r2, #1
   14470:	bl	14538 <__assert_fail@plt+0x3154>
   14474:	add	r0, r4, #60	; 0x3c
   14478:	bl	13180 <__assert_fail@plt+0x1d9c>
   1447c:	mov	r0, r5
   14480:	pop	{r4, r5, fp, pc}
   14484:	push	{r4, r5, r6, r7, fp, lr}
   14488:	add	fp, sp, #16
   1448c:	mov	r6, r0
   14490:	ldrh	r0, [r0, #48]	; 0x30
   14494:	mov	r4, r1
   14498:	movw	r1, #258	; 0x102
   1449c:	tst	r0, r1
   144a0:	beq	14510 <__assert_fail@plt+0x312c>
   144a4:	mov	r0, #24
   144a8:	bl	18494 <__assert_fail@plt+0x70b0>
   144ac:	mov	r5, #0
   144b0:	cmp	r0, #0
   144b4:	beq	14530 <__assert_fail@plt+0x314c>
   144b8:	mov	r7, r0
   144bc:	ldrd	r0, [r4, #64]	; 0x40
   144c0:	add	r2, r7, #8
   144c4:	stm	r7, {r0, r1}
   144c8:	ldrd	r0, [r4, #160]	; 0xa0
   144cc:	stm	r2, {r0, r1, r4}
   144d0:	mov	r1, r7
   144d4:	ldr	r0, [r6, #56]	; 0x38
   144d8:	bl	15730 <__assert_fail@plt+0x434c>
   144dc:	cmp	r0, r7
   144e0:	beq	14508 <__assert_fail@plt+0x3124>
   144e4:	mov	r6, r0
   144e8:	mov	r0, r7
   144ec:	bl	18998 <__assert_fail@plt+0x75b4>
   144f0:	cmp	r6, #0
   144f4:	beq	14530 <__assert_fail@plt+0x314c>
   144f8:	ldr	r0, [r6, #16]
   144fc:	mov	r1, #2
   14500:	strh	r1, [r4, #56]	; 0x38
   14504:	str	r0, [r4]
   14508:	mov	r5, #1
   1450c:	b	14530 <__assert_fail@plt+0x314c>
   14510:	ldr	r0, [r6, #56]	; 0x38
   14514:	add	r1, r4, #64	; 0x40
   14518:	bl	185b0 <__assert_fail@plt+0x71cc>
   1451c:	cmp	r0, #0
   14520:	mov	r5, #1
   14524:	movne	r0, #2
   14528:	strhne	r0, [r4, #56]	; 0x38
   1452c:	strne	r4, [r4]
   14530:	mov	r0, r5
   14534:	pop	{r4, r5, r6, r7, fp, pc}
   14538:	push	{r4, r5, fp, lr}
   1453c:	add	fp, sp, #8
   14540:	mov	r4, r1
   14544:	ldr	r1, [r0, #32]
   14548:	mov	r5, r0
   1454c:	cmp	r1, r4
   14550:	bne	1455c <__assert_fail@plt+0x3178>
   14554:	cmn	r1, #100	; 0x64
   14558:	bne	1459c <__assert_fail@plt+0x31b8>
   1455c:	cmp	r2, #0
   14560:	beq	14578 <__assert_fail@plt+0x3194>
   14564:	add	r0, r5, #60	; 0x3c
   14568:	bl	158bc <__assert_fail@plt+0x44d8>
   1456c:	cmp	r0, #0
   14570:	bge	14590 <__assert_fail@plt+0x31ac>
   14574:	b	14594 <__assert_fail@plt+0x31b0>
   14578:	cmp	r1, #0
   1457c:	blt	14594 <__assert_fail@plt+0x31b0>
   14580:	ldr	r0, [r5, #48]	; 0x30
   14584:	ands	r0, r0, #4
   14588:	bne	14594 <__assert_fail@plt+0x31b0>
   1458c:	mov	r0, r1
   14590:	bl	113c0 <close@plt>
   14594:	str	r4, [r5, #32]
   14598:	pop	{r4, r5, fp, pc}
   1459c:	bl	113b4 <abort@plt>
   145a0:	cmp	r2, #5
   145a4:	movcc	r0, #0
   145a8:	strhcc	r2, [r1, #60]	; 0x3c
   145ac:	bxcc	lr
   145b0:	push	{fp, lr}
   145b4:	mov	fp, sp
   145b8:	bl	11294 <__errno_location@plt>
   145bc:	mov	r1, #22
   145c0:	str	r1, [r0]
   145c4:	mov	r0, #1
   145c8:	pop	{fp, pc}
   145cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145d0:	add	fp, sp, #28
   145d4:	sub	sp, sp, #4
   145d8:	mov	r5, r0
   145dc:	orr	r0, r1, #4096	; 0x1000
   145e0:	cmp	r0, #4096	; 0x1000
   145e4:	bne	14624 <__assert_fail@plt+0x3240>
   145e8:	ldr	r6, [r5]
   145ec:	mov	r7, r1
   145f0:	bl	11294 <__errno_location@plt>
   145f4:	mov	r4, #0
   145f8:	mov	sl, r0
   145fc:	str	r4, [r0]
   14600:	ldrb	r0, [r5, #49]	; 0x31
   14604:	tst	r0, #32
   14608:	bne	14634 <__assert_fail@plt+0x3250>
   1460c:	ldrh	r0, [r6, #56]	; 0x38
   14610:	cmp	r0, #1
   14614:	beq	14640 <__assert_fail@plt+0x325c>
   14618:	cmp	r0, #9
   1461c:	ldreq	r4, [r6, #8]
   14620:	b	14634 <__assert_fail@plt+0x3250>
   14624:	bl	11294 <__errno_location@plt>
   14628:	mov	r1, #22
   1462c:	mov	r4, #0
   14630:	str	r1, [r0]
   14634:	mov	r0, r4
   14638:	sub	sp, fp, #28
   1463c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14640:	ldr	r0, [r5, #4]
   14644:	cmp	r0, #0
   14648:	blne	1301c <__assert_fail@plt+0x1c38>
   1464c:	cmp	r7, #4096	; 0x1000
   14650:	mov	r9, #1
   14654:	ldreq	r0, [r5, #48]	; 0x30
   14658:	moveq	r9, #2
   1465c:	orreq	r0, r0, #4096	; 0x1000
   14660:	streq	r0, [r5, #48]	; 0x30
   14664:	ldr	r0, [r6, #48]	; 0x30
   14668:	cmp	r0, #0
   1466c:	bne	146e8 <__assert_fail@plt+0x3304>
   14670:	ldr	r0, [r6, #24]
   14674:	ldrb	r0, [r0]
   14678:	cmp	r0, #47	; 0x2f
   1467c:	beq	146e8 <__assert_fail@plt+0x3304>
   14680:	ldrb	r0, [r5, #48]	; 0x30
   14684:	tst	r0, #4
   14688:	bne	146e8 <__assert_fail@plt+0x3304>
   1468c:	movw	r1, #39132	; 0x98dc
   14690:	mov	r0, r5
   14694:	movt	r1, #1
   14698:	bl	12fec <__assert_fail@plt+0x1c08>
   1469c:	cmn	r0, #1
   146a0:	ble	14700 <__assert_fail@plt+0x331c>
   146a4:	mov	r8, r0
   146a8:	mov	r0, r5
   146ac:	mov	r1, r9
   146b0:	bl	13a94 <__assert_fail@plt+0x26b0>
   146b4:	str	r0, [r5, #4]
   146b8:	ldrb	r0, [r5, #49]	; 0x31
   146bc:	tst	r0, #2
   146c0:	bne	1470c <__assert_fail@plt+0x3328>
   146c4:	mov	r0, r8
   146c8:	bl	11354 <fchdir@plt>
   146cc:	cmp	r0, #0
   146d0:	beq	14720 <__assert_fail@plt+0x333c>
   146d4:	ldr	r5, [sl]
   146d8:	mov	r0, r8
   146dc:	bl	113c0 <close@plt>
   146e0:	str	r5, [sl]
   146e4:	b	14634 <__assert_fail@plt+0x3250>
   146e8:	mov	r0, r5
   146ec:	mov	r1, r9
   146f0:	bl	13a94 <__assert_fail@plt+0x26b0>
   146f4:	mov	r4, r0
   146f8:	str	r0, [r5, #4]
   146fc:	b	14634 <__assert_fail@plt+0x3250>
   14700:	mov	r4, #0
   14704:	str	r4, [r5, #4]
   14708:	b	14634 <__assert_fail@plt+0x3250>
   1470c:	mov	r0, r5
   14710:	mov	r1, r8
   14714:	mov	r2, #1
   14718:	bl	14538 <__assert_fail@plt+0x3154>
   1471c:	b	14728 <__assert_fail@plt+0x3344>
   14720:	mov	r0, r8
   14724:	bl	113c0 <close@plt>
   14728:	ldr	r4, [r5, #4]
   1472c:	b	14634 <__assert_fail@plt+0x3250>
   14730:	push	{fp, lr}
   14734:	mov	fp, sp
   14738:	mov	r2, r1
   1473c:	ldrd	r0, [r0, #8]
   14740:	mov	r3, #0
   14744:	bl	18c3c <__assert_fail@plt+0x7858>
   14748:	mov	r0, r2
   1474c:	pop	{fp, pc}
   14750:	push	{r4, r5, fp, lr}
   14754:	add	fp, sp, #8
   14758:	ldrd	r2, [r1, #8]
   1475c:	ldrd	r4, [r0, #8]
   14760:	eor	r3, r5, r3
   14764:	eor	r2, r4, r2
   14768:	orrs	r2, r2, r3
   1476c:	mov	r2, #0
   14770:	bne	14790 <__assert_fail@plt+0x33ac>
   14774:	ldrd	r2, [r1]
   14778:	ldrd	r0, [r0]
   1477c:	eor	r1, r1, r3
   14780:	eor	r0, r0, r2
   14784:	orr	r0, r0, r1
   14788:	clz	r0, r0
   1478c:	lsr	r2, r0, #5
   14790:	mov	r0, r2
   14794:	pop	{r4, r5, fp, pc}
   14798:	push	{r4, r5, fp, lr}
   1479c:	add	fp, sp, #8
   147a0:	ldr	r0, [r0]
   147a4:	ldrd	r2, [r0, #160]	; 0xa0
   147a8:	ldr	r0, [r1]
   147ac:	ldrd	r4, [r0, #160]	; 0xa0
   147b0:	mov	r0, #0
   147b4:	subs	r1, r4, r2
   147b8:	sbcs	r1, r5, r3
   147bc:	movwcc	r0, #1
   147c0:	subs	r1, r2, r4
   147c4:	sbcs	r1, r3, r5
   147c8:	subcc	r0, r0, #1
   147cc:	pop	{r4, r5, fp, pc}
   147d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   147d4:	add	fp, sp, #24
   147d8:	sub	sp, sp, #96	; 0x60
   147dc:	ldr	r7, [r0, #44]	; 0x2c
   147e0:	mov	r4, r0
   147e4:	mov	r5, #0
   147e8:	ldrb	r0, [r7, #49]	; 0x31
   147ec:	tst	r0, #2
   147f0:	beq	148e4 <__assert_fail@plt+0x3500>
   147f4:	ldr	r6, [r7, #52]	; 0x34
   147f8:	mov	r9, r1
   147fc:	cmp	r6, #0
   14800:	bne	14840 <__assert_fail@plt+0x345c>
   14804:	movw	r0, #35224	; 0x8998
   14808:	movw	r2, #18672	; 0x48f0
   1480c:	movw	r3, #18704	; 0x4910
   14810:	mov	r1, #0
   14814:	mov	r8, #0
   14818:	movt	r0, #1
   1481c:	movt	r2, #1
   14820:	movt	r3, #1
   14824:	str	r0, [sp]
   14828:	mov	r0, #13
   1482c:	bl	14da8 <__assert_fail@plt+0x39c4>
   14830:	mov	r6, r0
   14834:	cmp	r0, #0
   14838:	str	r0, [r7, #52]	; 0x34
   1483c:	beq	14870 <__assert_fail@plt+0x348c>
   14840:	ldrd	r0, [r4, #64]	; 0x40
   14844:	str	r1, [sp, #12]
   14848:	str	r0, [sp, #8]
   1484c:	add	r1, sp, #8
   14850:	mov	r0, r6
   14854:	bl	14b08 <__assert_fail@plt+0x3724>
   14858:	cmp	r0, #0
   1485c:	beq	14868 <__assert_fail@plt+0x3484>
   14860:	ldr	r5, [r0, #8]
   14864:	b	148e4 <__assert_fail@plt+0x3500>
   14868:	mov	r8, #1
   1486c:	b	14874 <__assert_fail@plt+0x3490>
   14870:	mov	r6, #0
   14874:	cmp	r9, #0
   14878:	blt	148e4 <__assert_fail@plt+0x3500>
   1487c:	add	r1, sp, #8
   14880:	mov	r0, r9
   14884:	bl	110f0 <fstatfs64@plt>
   14888:	cmp	r0, #0
   1488c:	bne	148e4 <__assert_fail@plt+0x3500>
   14890:	cmp	r8, #0
   14894:	beq	148e0 <__assert_fail@plt+0x34fc>
   14898:	mov	r0, #16
   1489c:	bl	18494 <__assert_fail@plt+0x70b0>
   148a0:	cmp	r0, #0
   148a4:	beq	148e0 <__assert_fail@plt+0x34fc>
   148a8:	mov	r5, r0
   148ac:	ldrd	r0, [r4, #64]	; 0x40
   148b0:	ldr	r2, [sp, #8]
   148b4:	stm	r5, {r0, r1, r2}
   148b8:	mov	r0, r6
   148bc:	mov	r1, r5
   148c0:	bl	15730 <__assert_fail@plt+0x434c>
   148c4:	cmp	r0, #0
   148c8:	beq	148d8 <__assert_fail@plt+0x34f4>
   148cc:	cmp	r0, r5
   148d0:	beq	148e0 <__assert_fail@plt+0x34fc>
   148d4:	bl	113b4 <abort@plt>
   148d8:	mov	r0, r5
   148dc:	bl	18998 <__assert_fail@plt+0x75b4>
   148e0:	ldr	r5, [sp, #8]
   148e4:	mov	r0, r5
   148e8:	sub	sp, fp, #24
   148ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   148f0:	push	{fp, lr}
   148f4:	mov	fp, sp
   148f8:	mov	r2, r1
   148fc:	ldrd	r0, [r0]
   14900:	mov	r3, #0
   14904:	bl	18c3c <__assert_fail@plt+0x7858>
   14908:	mov	r0, r2
   1490c:	pop	{fp, pc}
   14910:	ldrd	r2, [r1]
   14914:	ldrd	r0, [r0]
   14918:	eor	r1, r1, r3
   1491c:	eor	r0, r0, r2
   14920:	orr	r0, r0, r1
   14924:	clz	r0, r0
   14928:	lsr	r0, r0, #5
   1492c:	bx	lr
   14930:	ldr	r0, [r0, #8]
   14934:	bx	lr
   14938:	ldr	r0, [r0, #12]
   1493c:	bx	lr
   14940:	ldr	r0, [r0, #16]
   14944:	bx	lr
   14948:	ldm	r0, {r2, ip}
   1494c:	mov	r0, #0
   14950:	cmp	r2, ip
   14954:	bxcs	lr
   14958:	mov	r0, #0
   1495c:	ldr	r1, [r2]
   14960:	cmp	r1, #0
   14964:	beq	14988 <__assert_fail@plt+0x35a4>
   14968:	mov	r3, #0
   1496c:	mov	r1, r2
   14970:	ldr	r1, [r1, #4]
   14974:	add	r3, r3, #1
   14978:	cmp	r1, #0
   1497c:	bne	14970 <__assert_fail@plt+0x358c>
   14980:	cmp	r3, r0
   14984:	movhi	r0, r3
   14988:	add	r2, r2, #8
   1498c:	cmp	r2, ip
   14990:	bcc	1495c <__assert_fail@plt+0x3578>
   14994:	bx	lr
   14998:	push	{fp, lr}
   1499c:	mov	fp, sp
   149a0:	ldm	r0, {r3, ip}
   149a4:	mov	lr, #0
   149a8:	mov	r1, #0
   149ac:	cmp	r3, ip
   149b0:	bcs	149ec <__assert_fail@plt+0x3608>
   149b4:	mov	r1, #0
   149b8:	mov	lr, #0
   149bc:	ldr	r2, [r3]
   149c0:	cmp	r2, #0
   149c4:	beq	149e0 <__assert_fail@plt+0x35fc>
   149c8:	mov	r2, r3
   149cc:	ldr	r2, [r2, #4]
   149d0:	add	r1, r1, #1
   149d4:	cmp	r2, #0
   149d8:	bne	149cc <__assert_fail@plt+0x35e8>
   149dc:	add	lr, lr, #1
   149e0:	add	r3, r3, #8
   149e4:	cmp	r3, ip
   149e8:	bcc	149bc <__assert_fail@plt+0x35d8>
   149ec:	ldr	r2, [r0, #12]
   149f0:	cmp	lr, r2
   149f4:	bne	14a0c <__assert_fail@plt+0x3628>
   149f8:	ldr	r2, [r0, #16]
   149fc:	mov	r0, #1
   14a00:	cmp	r1, r2
   14a04:	movne	r0, #0
   14a08:	pop	{fp, pc}
   14a0c:	mov	r0, #0
   14a10:	pop	{fp, pc}
   14a14:	nop	{0}
   14a18:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14a1c:	add	fp, sp, #24
   14a20:	sub	sp, sp, #8
   14a24:	ldr	r6, [r0]
   14a28:	ldmib	r0, {r2, r7, r8}
   14a2c:	ldr	r3, [r0, #16]
   14a30:	mov	r4, r1
   14a34:	mov	r5, #0
   14a38:	cmp	r6, r2
   14a3c:	bcs	14a7c <__assert_fail@plt+0x3698>
   14a40:	mov	r5, #0
   14a44:	ldr	r0, [r6]
   14a48:	cmp	r0, #0
   14a4c:	beq	14a70 <__assert_fail@plt+0x368c>
   14a50:	mov	r0, #0
   14a54:	mov	r1, r6
   14a58:	ldr	r1, [r1, #4]
   14a5c:	add	r0, r0, #1
   14a60:	cmp	r1, #0
   14a64:	bne	14a58 <__assert_fail@plt+0x3674>
   14a68:	cmp	r0, r5
   14a6c:	movhi	r5, r0
   14a70:	add	r6, r6, #8
   14a74:	cmp	r6, r2
   14a78:	bcc	14a44 <__assert_fail@plt+0x3660>
   14a7c:	movw	r2, #39184	; 0x9910
   14a80:	mov	r0, r4
   14a84:	mov	r1, #1
   14a88:	movt	r2, #1
   14a8c:	bl	112dc <__fprintf_chk@plt>
   14a90:	movw	r2, #39208	; 0x9928
   14a94:	mov	r0, r4
   14a98:	mov	r1, #1
   14a9c:	mov	r3, r7
   14aa0:	movt	r2, #1
   14aa4:	bl	112dc <__fprintf_chk@plt>
   14aa8:	vldr	d16, [pc, #80]	; 14b00 <__assert_fail@plt+0x371c>
   14aac:	vmov	s0, r8
   14ab0:	movw	r2, #39232	; 0x9940
   14ab4:	mov	r0, r4
   14ab8:	mov	r1, #1
   14abc:	mov	r3, r8
   14ac0:	vcvt.f64.u32	d17, s0
   14ac4:	vmov	s0, r7
   14ac8:	movt	r2, #1
   14acc:	vcvt.f64.u32	d18, s0
   14ad0:	vmul.f64	d16, d17, d16
   14ad4:	vdiv.f64	d16, d16, d18
   14ad8:	vstr	d16, [sp]
   14adc:	bl	112dc <__fprintf_chk@plt>
   14ae0:	movw	r2, #39265	; 0x9961
   14ae4:	mov	r0, r4
   14ae8:	mov	r1, #1
   14aec:	mov	r3, r5
   14af0:	movt	r2, #1
   14af4:	sub	sp, fp, #24
   14af8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14afc:	b	112dc <__fprintf_chk@plt>
   14b00:	andeq	r0, r0, r0
   14b04:	subsmi	r0, r9, r0
   14b08:	push	{r4, r5, r6, r7, fp, lr}
   14b0c:	add	fp, sp, #16
   14b10:	mov	r4, r1
   14b14:	ldr	r1, [r0, #8]
   14b18:	ldr	r2, [r0, #24]
   14b1c:	mov	r5, r0
   14b20:	mov	r0, r4
   14b24:	blx	r2
   14b28:	ldr	r1, [r5, #8]
   14b2c:	cmp	r0, r1
   14b30:	bcs	14b90 <__assert_fail@plt+0x37ac>
   14b34:	ldr	r7, [r5]
   14b38:	mov	r6, #0
   14b3c:	ldr	r1, [r7, r0, lsl #3]!
   14b40:	cmp	r1, #0
   14b44:	cmpne	r7, #0
   14b48:	bne	14b78 <__assert_fail@plt+0x3794>
   14b4c:	mov	r0, r6
   14b50:	pop	{r4, r5, r6, r7, fp, pc}
   14b54:	ldr	r2, [r5, #28]
   14b58:	mov	r0, r4
   14b5c:	blx	r2
   14b60:	cmp	r0, #0
   14b64:	bne	14b88 <__assert_fail@plt+0x37a4>
   14b68:	ldr	r7, [r7, #4]
   14b6c:	cmp	r7, #0
   14b70:	beq	14b4c <__assert_fail@plt+0x3768>
   14b74:	ldr	r1, [r7]
   14b78:	cmp	r1, r4
   14b7c:	bne	14b54 <__assert_fail@plt+0x3770>
   14b80:	mov	r6, r4
   14b84:	b	14b4c <__assert_fail@plt+0x3768>
   14b88:	ldr	r6, [r7]
   14b8c:	b	14b4c <__assert_fail@plt+0x3768>
   14b90:	bl	113b4 <abort@plt>
   14b94:	ldr	r1, [r0, #16]
   14b98:	cmp	r1, #0
   14b9c:	moveq	r0, #0
   14ba0:	bxeq	lr
   14ba4:	ldm	r0, {r1, r2}
   14ba8:	b	14bb8 <__assert_fail@plt+0x37d4>
   14bac:	ldr	r0, [r1], #8
   14bb0:	cmp	r0, #0
   14bb4:	bxne	lr
   14bb8:	cmp	r1, r2
   14bbc:	bcc	14bac <__assert_fail@plt+0x37c8>
   14bc0:	push	{fp, lr}
   14bc4:	mov	fp, sp
   14bc8:	bl	113b4 <abort@plt>
   14bcc:	push	{r4, r5, fp, lr}
   14bd0:	add	fp, sp, #8
   14bd4:	mov	r5, r1
   14bd8:	ldr	r1, [r0, #8]
   14bdc:	ldr	r2, [r0, #24]
   14be0:	mov	r4, r0
   14be4:	mov	r0, r5
   14be8:	blx	r2
   14bec:	ldr	r1, [r4, #8]
   14bf0:	cmp	r0, r1
   14bf4:	bcs	14c50 <__assert_fail@plt+0x386c>
   14bf8:	ldr	r1, [r4]
   14bfc:	add	r2, r1, r0, lsl #3
   14c00:	ldr	r3, [r2]
   14c04:	ldr	r2, [r2, #4]
   14c08:	cmp	r3, r5
   14c0c:	beq	14c1c <__assert_fail@plt+0x3838>
   14c10:	cmp	r2, #0
   14c14:	bne	14c00 <__assert_fail@plt+0x381c>
   14c18:	b	14c28 <__assert_fail@plt+0x3844>
   14c1c:	cmp	r2, #0
   14c20:	ldrne	r0, [r2]
   14c24:	popne	{r4, r5, fp, pc}
   14c28:	ldr	r2, [r4, #4]
   14c2c:	add	r0, r1, r0, lsl #3
   14c30:	add	r1, r0, #8
   14c34:	cmp	r1, r2
   14c38:	movcs	r0, #0
   14c3c:	popcs	{r4, r5, fp, pc}
   14c40:	ldr	r0, [r1], #8
   14c44:	cmp	r0, #0
   14c48:	popne	{r4, r5, fp, pc}
   14c4c:	b	14c34 <__assert_fail@plt+0x3850>
   14c50:	bl	113b4 <abort@plt>
   14c54:	push	{r4, r5, fp, lr}
   14c58:	add	fp, sp, #8
   14c5c:	ldm	r0, {r5, lr}
   14c60:	mov	ip, r0
   14c64:	mov	r0, #0
   14c68:	cmp	r5, lr
   14c6c:	bcs	14cb8 <__assert_fail@plt+0x38d4>
   14c70:	mov	r0, #0
   14c74:	ldr	r3, [r5]
   14c78:	cmp	r3, #0
   14c7c:	cmpne	r5, #0
   14c80:	beq	14cac <__assert_fail@plt+0x38c8>
   14c84:	mov	r3, r5
   14c88:	cmp	r0, r2
   14c8c:	popcs	{r4, r5, fp, pc}
   14c90:	ldr	r4, [r3]
   14c94:	str	r4, [r1, r0, lsl #2]
   14c98:	add	r0, r0, #1
   14c9c:	ldr	r3, [r3, #4]
   14ca0:	cmp	r3, #0
   14ca4:	bne	14c88 <__assert_fail@plt+0x38a4>
   14ca8:	ldr	lr, [ip, #4]
   14cac:	add	r5, r5, #8
   14cb0:	cmp	r5, lr
   14cb4:	bcc	14c74 <__assert_fail@plt+0x3890>
   14cb8:	pop	{r4, r5, fp, pc}
   14cbc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14cc0:	add	fp, sp, #24
   14cc4:	mov	r5, r1
   14cc8:	ldr	r4, [r0]
   14ccc:	ldr	r1, [r0, #4]
   14cd0:	mov	r6, #0
   14cd4:	cmp	r4, r1
   14cd8:	bcs	14d4c <__assert_fail@plt+0x3968>
   14cdc:	mov	r9, r2
   14ce0:	mov	r8, r0
   14ce4:	mov	r6, #0
   14ce8:	b	14d30 <__assert_fail@plt+0x394c>
   14cec:	mov	r1, r9
   14cf0:	blx	r5
   14cf4:	cmp	r0, #0
   14cf8:	beq	14d4c <__assert_fail@plt+0x3968>
   14cfc:	mov	r7, r4
   14d00:	ldr	r7, [r7, #4]
   14d04:	add	r6, r6, #1
   14d08:	cmp	r7, #0
   14d0c:	beq	14d28 <__assert_fail@plt+0x3944>
   14d10:	ldr	r0, [r7]
   14d14:	mov	r1, r9
   14d18:	blx	r5
   14d1c:	cmp	r0, #0
   14d20:	bne	14d00 <__assert_fail@plt+0x391c>
   14d24:	b	14d4c <__assert_fail@plt+0x3968>
   14d28:	ldr	r1, [r8, #4]
   14d2c:	b	14d40 <__assert_fail@plt+0x395c>
   14d30:	ldr	r0, [r4]
   14d34:	cmp	r0, #0
   14d38:	cmpne	r4, #0
   14d3c:	bne	14cec <__assert_fail@plt+0x3908>
   14d40:	add	r4, r4, #8
   14d44:	cmp	r4, r1
   14d48:	bcc	14d30 <__assert_fail@plt+0x394c>
   14d4c:	mov	r0, r6
   14d50:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14d54:	ldrb	r2, [r0]
   14d58:	cmp	r2, #0
   14d5c:	moveq	r0, #0
   14d60:	bxeq	lr
   14d64:	add	r3, r0, #1
   14d68:	mov	r0, #0
   14d6c:	rsb	r0, r0, r0, lsl #5
   14d70:	uxtab	r0, r0, r2
   14d74:	udiv	r2, r0, r1
   14d78:	mls	r0, r2, r1, r0
   14d7c:	ldrb	r2, [r3], #1
   14d80:	cmp	r2, #0
   14d84:	bne	14d6c <__assert_fail@plt+0x3988>
   14d88:	bx	lr
   14d8c:	movw	r1, #39296	; 0x9980
   14d90:	movt	r1, #1
   14d94:	vld1.32	{d16-d17}, [r1]!
   14d98:	ldr	r1, [r1]
   14d9c:	vst1.32	{d16-d17}, [r0]!
   14da0:	str	r1, [r0]
   14da4:	bx	lr
   14da8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14dac:	add	fp, sp, #28
   14db0:	sub	sp, sp, #4
   14db4:	movw	sl, #20124	; 0x4e9c
   14db8:	movw	r5, #20104	; 0x4e88
   14dbc:	cmp	r3, #0
   14dc0:	mov	r8, r0
   14dc4:	mov	r0, #40	; 0x28
   14dc8:	mov	r7, r1
   14dcc:	movt	sl, #1
   14dd0:	movt	r5, #1
   14dd4:	movne	sl, r3
   14dd8:	cmp	r2, #0
   14ddc:	movne	r5, r2
   14de0:	bl	18494 <__assert_fail@plt+0x70b0>
   14de4:	mov	r9, #0
   14de8:	cmp	r0, #0
   14dec:	beq	14e7c <__assert_fail@plt+0x3a98>
   14df0:	movw	r6, #39296	; 0x9980
   14df4:	cmp	r7, #0
   14df8:	mov	r4, r0
   14dfc:	movt	r6, #1
   14e00:	movne	r6, r7
   14e04:	str	r6, [r0, #20]
   14e08:	bl	14eac <__assert_fail@plt+0x3ac8>
   14e0c:	cmp	r0, #0
   14e10:	beq	14e74 <__assert_fail@plt+0x3a90>
   14e14:	mov	r0, r8
   14e18:	mov	r1, r6
   14e1c:	bl	14f58 <__assert_fail@plt+0x3b74>
   14e20:	cmp	r0, #0
   14e24:	str	r0, [r4, #8]
   14e28:	beq	14e74 <__assert_fail@plt+0x3a90>
   14e2c:	mov	r1, #8
   14e30:	bl	18440 <__assert_fail@plt+0x705c>
   14e34:	cmp	r0, #0
   14e38:	str	r0, [r4]
   14e3c:	beq	14e74 <__assert_fail@plt+0x3a90>
   14e40:	ldr	r1, [fp, #8]
   14e44:	mov	r2, #0
   14e48:	mov	r9, r4
   14e4c:	str	r2, [r4, #12]
   14e50:	str	r2, [r4, #16]
   14e54:	str	r5, [r4, #24]
   14e58:	str	sl, [r4, #28]
   14e5c:	str	r1, [r4, #32]
   14e60:	str	r2, [r4, #36]	; 0x24
   14e64:	ldr	r1, [r4, #8]
   14e68:	add	r0, r0, r1, lsl #3
   14e6c:	str	r0, [r4, #4]
   14e70:	b	14e7c <__assert_fail@plt+0x3a98>
   14e74:	mov	r0, r4
   14e78:	bl	18998 <__assert_fail@plt+0x75b4>
   14e7c:	mov	r0, r9
   14e80:	sub	sp, fp, #28
   14e84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e88:	ror	r2, r0, #3
   14e8c:	udiv	r2, r2, r1
   14e90:	mul	r1, r2, r1
   14e94:	rsb	r0, r1, r0, ror #3
   14e98:	bx	lr
   14e9c:	sub	r0, r0, r1
   14ea0:	clz	r0, r0
   14ea4:	lsr	r0, r0, #5
   14ea8:	bx	lr
   14eac:	ldr	r3, [r0, #20]
   14eb0:	movw	r2, #39296	; 0x9980
   14eb4:	mov	r1, r0
   14eb8:	mov	r0, #1
   14ebc:	movt	r2, #1
   14ec0:	cmp	r3, r2
   14ec4:	beq	14f48 <__assert_fail@plt+0x3b64>
   14ec8:	vldr	s2, [pc, #124]	; 14f4c <__assert_fail@plt+0x3b68>
   14ecc:	vldr	s0, [r3, #8]
   14ed0:	vcmpe.f32	s0, s2
   14ed4:	vmrs	APSR_nzcv, fpscr
   14ed8:	ble	14f40 <__assert_fail@plt+0x3b5c>
   14edc:	vldr	s4, [pc, #108]	; 14f50 <__assert_fail@plt+0x3b6c>
   14ee0:	vcmpe.f32	s0, s4
   14ee4:	vmrs	APSR_nzcv, fpscr
   14ee8:	bpl	14f40 <__assert_fail@plt+0x3b5c>
   14eec:	vldr	s4, [pc, #96]	; 14f54 <__assert_fail@plt+0x3b70>
   14ef0:	vldr	s6, [r3, #12]
   14ef4:	vcmpe.f32	s6, s4
   14ef8:	vmrs	APSR_nzcv, fpscr
   14efc:	ble	14f40 <__assert_fail@plt+0x3b5c>
   14f00:	vldr	s4, [r3]
   14f04:	vcmpe.f32	s4, #0.0
   14f08:	vmrs	APSR_nzcv, fpscr
   14f0c:	blt	14f40 <__assert_fail@plt+0x3b5c>
   14f10:	vadd.f32	s2, s4, s2
   14f14:	vcmpe.f32	s2, s0
   14f18:	vmrs	APSR_nzcv, fpscr
   14f1c:	bpl	14f40 <__assert_fail@plt+0x3b5c>
   14f20:	vldr	s0, [r3, #4]
   14f24:	vmov.f32	s4, #112	; 0x3f800000  1.0
   14f28:	vcmpe.f32	s0, s4
   14f2c:	vmrs	APSR_nzcv, fpscr
   14f30:	bhi	14f40 <__assert_fail@plt+0x3b5c>
   14f34:	vcmpe.f32	s2, s0
   14f38:	vmrs	APSR_nzcv, fpscr
   14f3c:	bxmi	lr
   14f40:	mov	r0, #0
   14f44:	str	r2, [r1, #20]
   14f48:	bx	lr
   14f4c:	stclcc	12, cr12, [ip, #820]	; 0x334
   14f50:	svccc	0x00666666
   14f54:	svccc	0x008ccccd
   14f58:	ldrb	r2, [r1, #16]
   14f5c:	cmp	r2, #0
   14f60:	bne	14f90 <__assert_fail@plt+0x3bac>
   14f64:	vldr	s0, [r1, #8]
   14f68:	vldr	s4, [pc, #160]	; 15010 <__assert_fail@plt+0x3c2c>
   14f6c:	vmov	s2, r0
   14f70:	mov	r0, #0
   14f74:	vcvt.f32.u32	s2, s2
   14f78:	vdiv.f32	s2, s2, s0
   14f7c:	vcmpe.f32	s2, s4
   14f80:	vcvt.u32.f32	s0, s2
   14f84:	vmrs	APSR_nzcv, fpscr
   14f88:	bxge	lr
   14f8c:	vmov	r0, s0
   14f90:	cmp	r0, #10
   14f94:	movls	r0, #10
   14f98:	orr	r0, r0, #1
   14f9c:	b	14ff4 <__assert_fail@plt+0x3c10>
   14fa0:	mov	r1, #3
   14fa4:	cmp	r0, #10
   14fa8:	bcc	14fe0 <__assert_fail@plt+0x3bfc>
   14fac:	mov	r1, #3
   14fb0:	mov	ip, #9
   14fb4:	mov	r2, #12
   14fb8:	udiv	r3, r0, r1
   14fbc:	mls	r3, r3, r1, r0
   14fc0:	cmp	r3, #0
   14fc4:	beq	14fe0 <__assert_fail@plt+0x3bfc>
   14fc8:	add	r3, ip, r2
   14fcc:	add	r2, r2, #8
   14fd0:	add	r1, r1, #2
   14fd4:	add	ip, r3, #4
   14fd8:	cmp	ip, r0
   14fdc:	bcc	14fb8 <__assert_fail@plt+0x3bd4>
   14fe0:	udiv	r2, r0, r1
   14fe4:	mls	r1, r2, r1, r0
   14fe8:	cmp	r1, #0
   14fec:	bne	15004 <__assert_fail@plt+0x3c20>
   14ff0:	add	r0, r0, #2
   14ff4:	cmn	r0, #1
   14ff8:	bne	14fa0 <__assert_fail@plt+0x3bbc>
   14ffc:	mov	r0, #0
   15000:	bx	lr
   15004:	cmp	r0, #536870912	; 0x20000000
   15008:	movcs	r0, #0
   1500c:	bx	lr
   15010:	svcmi	0x00800000
   15014:	push	{r4, r5, r6, r7, fp, lr}
   15018:	add	fp, sp, #16
   1501c:	mov	r4, r0
   15020:	ldr	r5, [r0]
   15024:	ldr	r0, [r0, #4]
   15028:	cmp	r5, r0
   1502c:	bcs	150c4 <__assert_fail@plt+0x3ce0>
   15030:	mov	r6, #0
   15034:	ldr	r1, [r5]
   15038:	cmp	r1, #0
   1503c:	beq	150b8 <__assert_fail@plt+0x3cd4>
   15040:	ldr	r1, [r4, #32]
   15044:	ldr	r7, [r5, #4]
   15048:	cmp	r1, #0
   1504c:	mov	r0, r1
   15050:	movwne	r0, #1
   15054:	cmp	r7, #0
   15058:	beq	1509c <__assert_fail@plt+0x3cb8>
   1505c:	tst	r0, #1
   15060:	beq	15070 <__assert_fail@plt+0x3c8c>
   15064:	ldr	r0, [r7]
   15068:	blx	r1
   1506c:	ldr	r1, [r4, #32]
   15070:	str	r6, [r7]
   15074:	cmp	r1, #0
   15078:	ldr	r0, [r4, #36]	; 0x24
   1507c:	ldr	r2, [r7, #4]
   15080:	str	r0, [r7, #4]
   15084:	mov	r0, r1
   15088:	str	r7, [r4, #36]	; 0x24
   1508c:	mov	r7, r2
   15090:	movwne	r0, #1
   15094:	cmp	r2, #0
   15098:	bne	1505c <__assert_fail@plt+0x3c78>
   1509c:	cmp	r0, #0
   150a0:	beq	150ac <__assert_fail@plt+0x3cc8>
   150a4:	ldr	r0, [r5]
   150a8:	blx	r1
   150ac:	str	r6, [r5]
   150b0:	str	r6, [r5, #4]
   150b4:	ldr	r0, [r4, #4]
   150b8:	add	r5, r5, #8
   150bc:	cmp	r5, r0
   150c0:	bcc	15034 <__assert_fail@plt+0x3c50>
   150c4:	mov	r0, #0
   150c8:	str	r0, [r4, #12]
   150cc:	str	r0, [r4, #16]
   150d0:	pop	{r4, r5, r6, r7, fp, pc}
   150d4:	push	{r4, r5, r6, sl, fp, lr}
   150d8:	add	fp, sp, #16
   150dc:	mov	r4, r0
   150e0:	ldr	r0, [r0, #32]
   150e4:	cmp	r0, #0
   150e8:	ldrne	r0, [r4, #16]
   150ec:	cmpne	r0, #0
   150f0:	beq	15148 <__assert_fail@plt+0x3d64>
   150f4:	ldr	r5, [r4]
   150f8:	ldr	r1, [r4, #4]
   150fc:	b	15140 <__assert_fail@plt+0x3d5c>
   15100:	ldr	r0, [r5]
   15104:	cmp	r0, #0
   15108:	cmpne	r5, #0
   1510c:	beq	1513c <__assert_fail@plt+0x3d58>
   15110:	ldr	r1, [r4, #32]
   15114:	blx	r1
   15118:	ldr	r6, [r5, #4]
   1511c:	b	15130 <__assert_fail@plt+0x3d4c>
   15120:	ldr	r1, [r4, #32]
   15124:	ldr	r0, [r6]
   15128:	blx	r1
   1512c:	ldr	r6, [r6, #4]
   15130:	cmp	r6, #0
   15134:	bne	15120 <__assert_fail@plt+0x3d3c>
   15138:	ldr	r1, [r4, #4]
   1513c:	add	r5, r5, #8
   15140:	cmp	r5, r1
   15144:	bcc	15100 <__assert_fail@plt+0x3d1c>
   15148:	ldr	r5, [r4]
   1514c:	ldr	r1, [r4, #4]
   15150:	b	1517c <__assert_fail@plt+0x3d98>
   15154:	ldr	r0, [r5, #4]
   15158:	cmp	r0, #0
   1515c:	beq	15178 <__assert_fail@plt+0x3d94>
   15160:	ldr	r6, [r0, #4]
   15164:	bl	18998 <__assert_fail@plt+0x75b4>
   15168:	cmp	r6, #0
   1516c:	mov	r0, r6
   15170:	bne	15160 <__assert_fail@plt+0x3d7c>
   15174:	ldr	r1, [r4, #4]
   15178:	add	r5, r5, #8
   1517c:	cmp	r5, r1
   15180:	bcc	15154 <__assert_fail@plt+0x3d70>
   15184:	ldr	r0, [r4, #36]	; 0x24
   15188:	cmp	r0, #0
   1518c:	beq	151a4 <__assert_fail@plt+0x3dc0>
   15190:	ldr	r5, [r0, #4]
   15194:	bl	18998 <__assert_fail@plt+0x75b4>
   15198:	cmp	r5, #0
   1519c:	mov	r0, r5
   151a0:	bne	15190 <__assert_fail@plt+0x3dac>
   151a4:	ldr	r0, [r4]
   151a8:	bl	18998 <__assert_fail@plt+0x75b4>
   151ac:	mov	r0, r4
   151b0:	pop	{r4, r5, r6, sl, fp, lr}
   151b4:	b	18998 <__assert_fail@plt+0x75b4>
   151b8:	push	{r4, r5, r6, r7, fp, lr}
   151bc:	add	fp, sp, #16
   151c0:	sub	sp, sp, #40	; 0x28
   151c4:	mov	r7, r0
   151c8:	mov	r2, r1
   151cc:	mov	r4, r0
   151d0:	ldr	r1, [r7, #20]!
   151d4:	mov	r0, r2
   151d8:	bl	14f58 <__assert_fail@plt+0x3b74>
   151dc:	mov	r5, #0
   151e0:	cmp	r0, #0
   151e4:	beq	15278 <__assert_fail@plt+0x3e94>
   151e8:	mov	r6, r0
   151ec:	ldr	r0, [r4, #8]
   151f0:	cmp	r6, r0
   151f4:	beq	15274 <__assert_fail@plt+0x3e90>
   151f8:	mov	r0, r6
   151fc:	mov	r1, #8
   15200:	bl	18440 <__assert_fail@plt+0x705c>
   15204:	cmp	r0, #0
   15208:	str	r0, [sp]
   1520c:	beq	15278 <__assert_fail@plt+0x3e94>
   15210:	mov	r1, #0
   15214:	add	r0, r0, r6, lsl #3
   15218:	str	r6, [sp, #8]
   1521c:	mov	r5, sp
   15220:	mov	r2, #0
   15224:	str	r1, [sp, #12]
   15228:	str	r1, [sp, #16]
   1522c:	str	r0, [sp, #4]
   15230:	add	r0, r5, #20
   15234:	mov	r1, r4
   15238:	vld1.32	{d16-d17}, [r7]
   1523c:	vst1.32	{d16-d17}, [r0]
   15240:	ldr	r0, [r4, #36]	; 0x24
   15244:	str	r0, [sp, #36]	; 0x24
   15248:	mov	r0, r5
   1524c:	bl	152d0 <__assert_fail@plt+0x3eec>
   15250:	cmp	r0, #0
   15254:	beq	15284 <__assert_fail@plt+0x3ea0>
   15258:	ldr	r0, [r4]
   1525c:	bl	18998 <__assert_fail@plt+0x75b4>
   15260:	mov	r0, #36	; 0x24
   15264:	vld1.32	{d16-d17}, [r5], r0
   15268:	vst1.32	{d16-d17}, [r4], r0
   1526c:	ldr	r0, [r5]
   15270:	str	r0, [r4]
   15274:	mov	r5, #1
   15278:	mov	r0, r5
   1527c:	sub	sp, fp, #16
   15280:	pop	{r4, r5, r6, r7, fp, pc}
   15284:	ldr	r0, [sp, #36]	; 0x24
   15288:	mov	r1, sp
   1528c:	mov	r2, #1
   15290:	str	r0, [r4, #36]	; 0x24
   15294:	mov	r0, r4
   15298:	bl	152d0 <__assert_fail@plt+0x3eec>
   1529c:	cmp	r0, #0
   152a0:	beq	152cc <__assert_fail@plt+0x3ee8>
   152a4:	mov	r1, sp
   152a8:	mov	r0, r4
   152ac:	mov	r2, #0
   152b0:	mov	r5, #0
   152b4:	bl	152d0 <__assert_fail@plt+0x3eec>
   152b8:	cmp	r0, #0
   152bc:	beq	152cc <__assert_fail@plt+0x3ee8>
   152c0:	ldr	r0, [sp]
   152c4:	bl	18998 <__assert_fail@plt+0x75b4>
   152c8:	b	15278 <__assert_fail@plt+0x3e94>
   152cc:	bl	113b4 <abort@plt>
   152d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152d4:	add	fp, sp, #28
   152d8:	sub	sp, sp, #12
   152dc:	ldr	sl, [r1]
   152e0:	str	r1, [sp, #8]
   152e4:	ldr	r1, [r1, #4]
   152e8:	mov	r7, r0
   152ec:	mov	r0, #1
   152f0:	str	r2, [sp, #4]
   152f4:	cmp	sl, r1
   152f8:	bcs	15454 <__assert_fail@plt+0x4070>
   152fc:	add	r8, r7, #36	; 0x24
   15300:	mov	r9, #0
   15304:	ldr	r4, [sl]
   15308:	cmp	r4, #0
   1530c:	beq	1543c <__assert_fail@plt+0x4058>
   15310:	ldr	r5, [sl, #4]
   15314:	cmp	r5, #0
   15318:	beq	15390 <__assert_fail@plt+0x3fac>
   1531c:	ldr	r1, [r7, #8]
   15320:	ldr	r4, [r5]
   15324:	ldr	r2, [r7, #24]
   15328:	mov	r0, r4
   1532c:	blx	r2
   15330:	ldr	r1, [r7, #8]
   15334:	cmp	r0, r1
   15338:	bcs	15464 <__assert_fail@plt+0x4080>
   1533c:	ldr	r3, [r7]
   15340:	ldr	r2, [r5, #4]
   15344:	ldr	r6, [r3, r0, lsl #3]
   15348:	cmp	r6, #0
   1534c:	beq	1535c <__assert_fail@plt+0x3f78>
   15350:	add	r0, r3, r0, lsl #3
   15354:	add	r0, r0, #4
   15358:	b	15374 <__assert_fail@plt+0x3f90>
   1535c:	str	r4, [r3, r0, lsl #3]
   15360:	ldr	r0, [r7, #12]
   15364:	add	r0, r0, #1
   15368:	str	r0, [r7, #12]
   1536c:	mov	r0, r8
   15370:	str	r9, [r5]
   15374:	ldr	r3, [r0]
   15378:	cmp	r2, #0
   1537c:	str	r3, [r5, #4]
   15380:	str	r5, [r0]
   15384:	mov	r5, r2
   15388:	bne	15320 <__assert_fail@plt+0x3f3c>
   1538c:	ldr	r4, [sl]
   15390:	ldr	r0, [sp, #4]
   15394:	str	r9, [sl, #4]
   15398:	cmp	r0, #0
   1539c:	bne	1543c <__assert_fail@plt+0x4058>
   153a0:	ldr	r1, [r7, #8]
   153a4:	ldr	r2, [r7, #24]
   153a8:	mov	r0, r4
   153ac:	blx	r2
   153b0:	mov	r5, r0
   153b4:	ldr	r0, [r7, #8]
   153b8:	cmp	r5, r0
   153bc:	bcs	15464 <__assert_fail@plt+0x4080>
   153c0:	ldr	r6, [r7]
   153c4:	ldr	r0, [r6, r5, lsl #3]
   153c8:	cmp	r0, #0
   153cc:	beq	153ec <__assert_fail@plt+0x4008>
   153d0:	ldr	r0, [r8]
   153d4:	cmp	r0, #0
   153d8:	beq	15400 <__assert_fail@plt+0x401c>
   153dc:	mov	r1, r0
   153e0:	ldr	r2, [r1, #4]!
   153e4:	str	r2, [r8]
   153e8:	b	15414 <__assert_fail@plt+0x4030>
   153ec:	str	r4, [r6, r5, lsl #3]
   153f0:	ldr	r0, [r7, #12]
   153f4:	add	r0, r0, #1
   153f8:	str	r0, [r7, #12]
   153fc:	b	15428 <__assert_fail@plt+0x4044>
   15400:	mov	r0, #8
   15404:	bl	18494 <__assert_fail@plt+0x70b0>
   15408:	cmp	r0, #0
   1540c:	beq	1545c <__assert_fail@plt+0x4078>
   15410:	add	r1, r0, #4
   15414:	str	r4, [r0]
   15418:	add	r2, r6, r5, lsl #3
   1541c:	ldr	r3, [r2, #4]
   15420:	str	r3, [r1]
   15424:	str	r0, [r2, #4]
   15428:	ldr	r1, [sp, #8]
   1542c:	str	r9, [sl]
   15430:	ldr	r0, [r1, #12]
   15434:	sub	r0, r0, #1
   15438:	str	r0, [r1, #12]
   1543c:	ldr	r0, [sp, #8]
   15440:	add	sl, sl, #8
   15444:	ldr	r0, [r0, #4]
   15448:	cmp	sl, r0
   1544c:	bcc	15304 <__assert_fail@plt+0x3f20>
   15450:	mov	r0, #1
   15454:	sub	sp, fp, #28
   15458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1545c:	mov	r0, #0
   15460:	b	15454 <__assert_fail@plt+0x4070>
   15464:	bl	113b4 <abort@plt>
   15468:	push	{r4, r5, r6, r7, fp, lr}
   1546c:	add	fp, sp, #16
   15470:	sub	sp, sp, #8
   15474:	cmp	r1, #0
   15478:	beq	155f8 <__assert_fail@plt+0x4214>
   1547c:	mov	r7, r2
   15480:	add	r2, sp, #4
   15484:	mov	r3, #0
   15488:	mov	r5, r1
   1548c:	mov	r4, r0
   15490:	mov	r6, #0
   15494:	bl	15600 <__assert_fail@plt+0x421c>
   15498:	cmp	r0, #0
   1549c:	beq	154ac <__assert_fail@plt+0x40c8>
   154a0:	cmp	r7, #0
   154a4:	strne	r0, [r7]
   154a8:	b	155e4 <__assert_fail@plt+0x4200>
   154ac:	ldr	r0, [r4, #20]
   154b0:	vldr	s0, [r4, #8]
   154b4:	vldr	s2, [r4, #12]
   154b8:	vldr	s4, [r0, #8]
   154bc:	vcvt.f32.u32	s0, s0
   154c0:	vcvt.f32.u32	s2, s2
   154c4:	vmul.f32	s0, s4, s0
   154c8:	vcmpe.f32	s0, s2
   154cc:	vmrs	APSR_nzcv, fpscr
   154d0:	bpl	15564 <__assert_fail@plt+0x4180>
   154d4:	mov	r0, r4
   154d8:	bl	14eac <__assert_fail@plt+0x3ac8>
   154dc:	vldr	s0, [r4, #8]
   154e0:	ldr	r0, [r4, #20]
   154e4:	vldr	s4, [r4, #12]
   154e8:	vcvt.f32.u32	s2, s0
   154ec:	vldr	s0, [r0, #8]
   154f0:	vcvt.f32.u32	s4, s4
   154f4:	vmul.f32	s6, s0, s2
   154f8:	vcmpe.f32	s6, s4
   154fc:	vmrs	APSR_nzcv, fpscr
   15500:	bpl	15564 <__assert_fail@plt+0x4180>
   15504:	vldr	s4, [r0, #12]
   15508:	ldrb	r0, [r0, #16]
   1550c:	mvn	r6, #0
   15510:	vmul.f32	s2, s4, s2
   15514:	vldr	s4, [pc, #224]	; 155fc <__assert_fail@plt+0x4218>
   15518:	cmp	r0, #0
   1551c:	vmul.f32	s0, s0, s2
   15520:	vseleq.f32	s0, s0, s2
   15524:	vcmpe.f32	s0, s4
   15528:	vmrs	APSR_nzcv, fpscr
   1552c:	bge	155e4 <__assert_fail@plt+0x4200>
   15530:	vcvt.u32.f32	s0, s0
   15534:	mov	r0, r4
   15538:	vmov	r1, s0
   1553c:	bl	151b8 <__assert_fail@plt+0x3dd4>
   15540:	cmp	r0, #0
   15544:	beq	155e4 <__assert_fail@plt+0x4200>
   15548:	add	r2, sp, #4
   1554c:	mov	r0, r4
   15550:	mov	r1, r5
   15554:	mov	r3, #0
   15558:	bl	15600 <__assert_fail@plt+0x421c>
   1555c:	cmp	r0, #0
   15560:	bne	155f8 <__assert_fail@plt+0x4214>
   15564:	ldr	r6, [sp, #4]
   15568:	ldr	r0, [r6]
   1556c:	cmp	r0, #0
   15570:	beq	15590 <__assert_fail@plt+0x41ac>
   15574:	ldr	r0, [r4, #36]	; 0x24
   15578:	cmp	r0, #0
   1557c:	beq	155b0 <__assert_fail@plt+0x41cc>
   15580:	mov	r1, r0
   15584:	ldr	r2, [r1, #4]!
   15588:	str	r2, [r4, #36]	; 0x24
   1558c:	b	155c4 <__assert_fail@plt+0x41e0>
   15590:	str	r5, [r6]
   15594:	ldr	r0, [r4, #12]
   15598:	ldr	r1, [r4, #16]
   1559c:	add	r0, r0, #1
   155a0:	add	r1, r1, #1
   155a4:	str	r0, [r4, #12]
   155a8:	str	r1, [r4, #16]
   155ac:	b	155e0 <__assert_fail@plt+0x41fc>
   155b0:	mov	r0, #8
   155b4:	bl	18494 <__assert_fail@plt+0x70b0>
   155b8:	cmp	r0, #0
   155bc:	beq	155f0 <__assert_fail@plt+0x420c>
   155c0:	add	r1, r0, #4
   155c4:	str	r5, [r0]
   155c8:	ldr	r2, [r6, #4]
   155cc:	str	r2, [r1]
   155d0:	str	r0, [r6, #4]
   155d4:	ldr	r0, [r4, #16]
   155d8:	add	r0, r0, #1
   155dc:	str	r0, [r4, #16]
   155e0:	mov	r6, #1
   155e4:	mov	r0, r6
   155e8:	sub	sp, fp, #16
   155ec:	pop	{r4, r5, r6, r7, fp, pc}
   155f0:	mvn	r6, #0
   155f4:	b	155e4 <__assert_fail@plt+0x4200>
   155f8:	bl	113b4 <abort@plt>
   155fc:	svcmi	0x00800000
   15600:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15604:	add	fp, sp, #24
   15608:	mov	r7, r2
   1560c:	mov	r4, r1
   15610:	ldr	r1, [r0, #8]
   15614:	ldr	r2, [r0, #24]
   15618:	mov	r5, r0
   1561c:	mov	r8, r3
   15620:	mov	r0, r4
   15624:	blx	r2
   15628:	ldr	r1, [r5, #8]
   1562c:	cmp	r0, r1
   15630:	bcs	1572c <__assert_fail@plt+0x4348>
   15634:	ldr	r1, [r5]
   15638:	add	r6, r1, r0, lsl #3
   1563c:	str	r6, [r7]
   15640:	ldr	r1, [r1, r0, lsl #3]
   15644:	cmp	r1, #0
   15648:	beq	156e0 <__assert_fail@plt+0x42fc>
   1564c:	cmp	r1, r4
   15650:	beq	1566c <__assert_fail@plt+0x4288>
   15654:	ldr	r2, [r5, #28]
   15658:	mov	r0, r4
   1565c:	blx	r2
   15660:	cmp	r0, #0
   15664:	beq	156a0 <__assert_fail@plt+0x42bc>
   15668:	ldr	r4, [r6]
   1566c:	cmp	r8, #0
   15670:	beq	156e4 <__assert_fail@plt+0x4300>
   15674:	ldr	r0, [r6, #4]
   15678:	cmp	r0, #0
   1567c:	beq	156ec <__assert_fail@plt+0x4308>
   15680:	ldm	r0, {r1, r2}
   15684:	stm	r6, {r1, r2}
   15688:	mov	r1, #0
   1568c:	str	r1, [r0]
   15690:	ldr	r1, [r5, #36]	; 0x24
   15694:	str	r1, [r0, #4]
   15698:	str	r0, [r5, #36]	; 0x24
   1569c:	b	156e4 <__assert_fail@plt+0x4300>
   156a0:	ldr	r0, [r6, #4]!
   156a4:	cmp	r0, #0
   156a8:	beq	156e0 <__assert_fail@plt+0x42fc>
   156ac:	ldr	r1, [r0]
   156b0:	cmp	r1, r4
   156b4:	beq	156f8 <__assert_fail@plt+0x4314>
   156b8:	ldr	r2, [r5, #28]
   156bc:	mov	r0, r4
   156c0:	blx	r2
   156c4:	ldr	r1, [r6]
   156c8:	cmp	r0, #0
   156cc:	bne	15700 <__assert_fail@plt+0x431c>
   156d0:	ldr	r0, [r1, #4]!
   156d4:	cmp	r0, #0
   156d8:	mov	r6, r1
   156dc:	bne	156ac <__assert_fail@plt+0x42c8>
   156e0:	mov	r4, #0
   156e4:	mov	r0, r4
   156e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   156ec:	mov	r0, #0
   156f0:	str	r0, [r6]
   156f4:	b	156e4 <__assert_fail@plt+0x4300>
   156f8:	mov	r1, r0
   156fc:	b	15704 <__assert_fail@plt+0x4320>
   15700:	ldr	r4, [r1]
   15704:	cmp	r8, #0
   15708:	beq	156e4 <__assert_fail@plt+0x4300>
   1570c:	ldr	r0, [r1, #4]
   15710:	str	r0, [r6]
   15714:	mov	r0, #0
   15718:	str	r0, [r1]
   1571c:	ldr	r0, [r5, #36]	; 0x24
   15720:	str	r0, [r1, #4]
   15724:	str	r1, [r5, #36]	; 0x24
   15728:	b	156e4 <__assert_fail@plt+0x4300>
   1572c:	bl	113b4 <abort@plt>
   15730:	push	{r4, sl, fp, lr}
   15734:	add	fp, sp, #8
   15738:	sub	sp, sp, #8
   1573c:	add	r2, sp, #4
   15740:	mov	r4, r1
   15744:	bl	15468 <__assert_fail@plt+0x4084>
   15748:	cmn	r0, #1
   1574c:	beq	15760 <__assert_fail@plt+0x437c>
   15750:	ldr	r1, [sp, #4]
   15754:	cmp	r0, #0
   15758:	moveq	r4, r1
   1575c:	b	15764 <__assert_fail@plt+0x4380>
   15760:	mov	r4, #0
   15764:	mov	r0, r4
   15768:	sub	sp, fp, #8
   1576c:	pop	{r4, sl, fp, pc}
   15770:	push	{r4, r5, r6, sl, fp, lr}
   15774:	add	fp, sp, #16
   15778:	sub	sp, sp, #8
   1577c:	add	r2, sp, #4
   15780:	mov	r3, #1
   15784:	mov	r4, r0
   15788:	bl	15600 <__assert_fail@plt+0x421c>
   1578c:	mov	r5, r0
   15790:	cmp	r0, #0
   15794:	beq	15870 <__assert_fail@plt+0x448c>
   15798:	ldr	r0, [r4, #16]
   1579c:	sub	r0, r0, #1
   157a0:	str	r0, [r4, #16]
   157a4:	ldr	r0, [sp, #4]
   157a8:	ldr	r0, [r0]
   157ac:	cmp	r0, #0
   157b0:	bne	15870 <__assert_fail@plt+0x448c>
   157b4:	ldr	r0, [r4, #12]
   157b8:	vldr	s0, [r4, #8]
   157bc:	sub	r0, r0, #1
   157c0:	str	r0, [r4, #12]
   157c4:	vmov	s4, r0
   157c8:	ldr	r1, [r4, #20]
   157cc:	vldr	s2, [r1]
   157d0:	vcvt.f32.u32	s0, s0
   157d4:	vcvt.f32.u32	s4, s4
   157d8:	vmul.f32	s0, s2, s0
   157dc:	vcmpe.f32	s0, s4
   157e0:	vmrs	APSR_nzcv, fpscr
   157e4:	ble	15870 <__assert_fail@plt+0x448c>
   157e8:	mov	r0, r4
   157ec:	bl	14eac <__assert_fail@plt+0x3ac8>
   157f0:	vldr	s0, [r4, #8]
   157f4:	ldr	r0, [r4, #20]
   157f8:	vldr	s2, [r4, #12]
   157fc:	vcvt.f32.u32	s0, s0
   15800:	vldr	s4, [r0]
   15804:	vcvt.f32.u32	s2, s2
   15808:	vmul.f32	s4, s4, s0
   1580c:	vcmpe.f32	s4, s2
   15810:	vmrs	APSR_nzcv, fpscr
   15814:	ble	15870 <__assert_fail@plt+0x448c>
   15818:	ldrb	r1, [r0, #16]
   1581c:	vldr	s2, [r0, #4]
   15820:	cmp	r1, #0
   15824:	vmul.f32	s0, s2, s0
   15828:	vldreq	s2, [r0, #8]
   1582c:	mov	r0, r4
   15830:	vmuleq.f32	s0, s0, s2
   15834:	vcvt.u32.f32	s0, s0
   15838:	vmov	r1, s0
   1583c:	bl	151b8 <__assert_fail@plt+0x3dd4>
   15840:	cmp	r0, #0
   15844:	bne	15870 <__assert_fail@plt+0x448c>
   15848:	ldr	r0, [r4, #36]	; 0x24
   1584c:	cmp	r0, #0
   15850:	beq	15868 <__assert_fail@plt+0x4484>
   15854:	ldr	r6, [r0, #4]
   15858:	bl	18998 <__assert_fail@plt+0x75b4>
   1585c:	cmp	r6, #0
   15860:	mov	r0, r6
   15864:	bne	15854 <__assert_fail@plt+0x4470>
   15868:	mov	r0, #0
   1586c:	str	r0, [r4, #36]	; 0x24
   15870:	mov	r0, r5
   15874:	sub	sp, fp, #16
   15878:	pop	{r4, r5, r6, sl, fp, pc}
   1587c:	b	15770 <__assert_fail@plt+0x438c>
   15880:	mov	r3, #1
   15884:	mov	r2, #0
   15888:	vdup.32	q8, r1
   1588c:	strb	r3, [r0, #28]
   15890:	str	r2, [r0, #20]
   15894:	str	r2, [r0, #24]
   15898:	add	r3, r0, r2
   1589c:	add	r2, r2, #16
   158a0:	cmp	r2, #16
   158a4:	vst1.32	{d16-d17}, [r3]
   158a8:	bne	15898 <__assert_fail@plt+0x44b4>
   158ac:	str	r1, [r0, #16]
   158b0:	bx	lr
   158b4:	ldrb	r0, [r0, #28]
   158b8:	bx	lr
   158bc:	push	{fp, lr}
   158c0:	mov	fp, sp
   158c4:	ldrb	r3, [r0, #28]
   158c8:	ldr	r2, [r0, #20]
   158cc:	eor	lr, r3, #1
   158d0:	add	r2, r2, lr
   158d4:	and	r3, r2, #3
   158d8:	ldr	ip, [r0, r3, lsl #2]
   158dc:	str	r1, [r0, r3, lsl #2]
   158e0:	str	r3, [r0, #20]
   158e4:	ldr	r1, [r0, #24]
   158e8:	cmp	r3, r1
   158ec:	addeq	r1, r2, lr
   158f0:	andeq	r1, r1, #3
   158f4:	streq	r1, [r0, #24]
   158f8:	mov	r1, #0
   158fc:	strb	r1, [r0, #28]
   15900:	mov	r0, ip
   15904:	pop	{fp, pc}
   15908:	ldrb	r1, [r0, #28]
   1590c:	cmp	r1, #0
   15910:	bne	15954 <__assert_fail@plt+0x4570>
   15914:	ldr	r3, [r0, #20]
   15918:	ldr	r2, [r0, #16]
   1591c:	ldr	r1, [r0, r3, lsl #2]
   15920:	str	r2, [r0, r3, lsl #2]
   15924:	ldr	r2, [r0, #20]
   15928:	ldr	r3, [r0, #24]
   1592c:	cmp	r2, r3
   15930:	bne	15940 <__assert_fail@plt+0x455c>
   15934:	mov	r2, #1
   15938:	strb	r2, [r0, #28]
   1593c:	b	1594c <__assert_fail@plt+0x4568>
   15940:	sub	r2, r2, #1
   15944:	and	r2, r2, #3
   15948:	str	r2, [r0, #20]
   1594c:	mov	r0, r1
   15950:	bx	lr
   15954:	push	{fp, lr}
   15958:	mov	fp, sp
   1595c:	bl	113b4 <abort@plt>
   15960:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15964:	add	fp, sp, #28
   15968:	sub	sp, sp, #4
   1596c:	ldrb	r1, [r0]
   15970:	mov	r4, r0
   15974:	and	r0, r1, #248	; 0xf8
   15978:	cmp	r0, #48	; 0x30
   1597c:	bne	15a00 <__assert_fail@plt+0x461c>
   15980:	mov	r0, #0
   15984:	mov	r5, #0
   15988:	mov	r2, r4
   1598c:	lsl	r3, r5, #3
   15990:	uxtab	r1, r3, r1
   15994:	sub	r5, r1, #48	; 0x30
   15998:	cmp	r0, r5, lsr #12
   1599c:	bne	15c94 <__assert_fail@plt+0x48b0>
   159a0:	ldrb	r1, [r2, #1]
   159a4:	add	r6, r2, #1
   159a8:	and	r2, r1, #248	; 0xf8
   159ac:	cmp	r2, #48	; 0x30
   159b0:	mov	r2, r6
   159b4:	beq	1598c <__assert_fail@plt+0x45a8>
   159b8:	cmp	r1, #0
   159bc:	bne	15c94 <__assert_fail@plt+0x48b0>
   159c0:	mov	r0, #32
   159c4:	bl	17f30 <__assert_fail@plt+0x6b4c>
   159c8:	movw	r1, #317	; 0x13d
   159cc:	mov	r2, #0
   159d0:	and	r3, r5, #3072	; 0xc00
   159d4:	movw	r7, #1023	; 0x3ff
   159d8:	strh	r1, [r0]
   159dc:	strb	r2, [r0, #17]
   159e0:	sub	r2, r6, r4
   159e4:	movw	r1, #4095	; 0xfff
   159e8:	cmp	r2, #5
   159ec:	str	r1, [r0, #4]
   159f0:	str	r5, [r0, #8]
   159f4:	orrlt	r1, r3, r7
   159f8:	str	r1, [r0, #12]
   159fc:	b	15c94 <__assert_fail@plt+0x48b0>
   15a00:	movw	r5, #5
   15a04:	mov	r2, #1
   15a08:	mvn	r3, #42	; 0x2a
   15a0c:	mov	r7, #1
   15a10:	mov	r0, #1
   15a14:	movt	r5, #4
   15a18:	b	15a2c <__assert_fail@plt+0x4648>
   15a1c:	mov	r6, #0
   15a20:	ldrb	r1, [r4, r7]
   15a24:	add	r0, r6, r0
   15a28:	add	r7, r7, #1
   15a2c:	uxtab	r6, r3, r1
   15a30:	uxtb	r1, r1
   15a34:	cmp	r6, #18
   15a38:	bhi	15a48 <__assert_fail@plt+0x4664>
   15a3c:	tst	r5, r2, lsl r6
   15a40:	mov	r6, #1
   15a44:	bne	15a20 <__assert_fail@plt+0x463c>
   15a48:	cmp	r1, #0
   15a4c:	bne	15a1c <__assert_fail@plt+0x4638>
   15a50:	mov	r1, #16
   15a54:	bl	18000 <__assert_fail@plt+0x6c1c>
   15a58:	mov	sl, #0
   15a5c:	mov	ip, #1
   15a60:	mvn	lr, #113	; 0x71
   15a64:	mov	r9, #0
   15a68:	b	15c28 <__assert_fail@plt+0x4844>
   15a6c:	tst	r5, ip, lsl r1
   15a70:	beq	15c8c <__assert_fail@plt+0x48a8>
   15a74:	ldrb	r3, [r4, #1]
   15a78:	add	r4, r4, #2
   15a7c:	sub	r1, r3, #48	; 0x30
   15a80:	cmp	r1, #8
   15a84:	bcs	15adc <__assert_fail@plt+0x46f8>
   15a88:	mov	r7, #0
   15a8c:	lsl	r1, r7, #3
   15a90:	uxtab	r1, r1, r3
   15a94:	sub	r7, r1, #48	; 0x30
   15a98:	cmp	sl, r7, lsr #12
   15a9c:	bne	15c8c <__assert_fail@plt+0x48a8>
   15aa0:	ldrb	r3, [r4], #1
   15aa4:	and	r1, r3, #248	; 0xf8
   15aa8:	cmp	r1, #48	; 0x30
   15aac:	beq	15a8c <__assert_fail@plt+0x46a8>
   15ab0:	cmp	r2, #0
   15ab4:	bne	15c8c <__assert_fail@plt+0x48a8>
   15ab8:	sub	r4, r4, #1
   15abc:	mov	r8, #1
   15ac0:	movw	r2, #4095	; 0xfff
   15ac4:	cmp	r3, #0
   15ac8:	beq	15b04 <__assert_fail@plt+0x4720>
   15acc:	cmp	r3, #44	; 0x2c
   15ad0:	movw	r3, #4095	; 0xfff
   15ad4:	beq	15bac <__assert_fail@plt+0x47c8>
   15ad8:	b	15c8c <__assert_fail@plt+0x48a8>
   15adc:	cmp	r3, #103	; 0x67
   15ae0:	beq	15b0c <__assert_fail@plt+0x4728>
   15ae4:	cmp	r3, #111	; 0x6f
   15ae8:	beq	15b1c <__assert_fail@plt+0x4738>
   15aec:	cmp	r3, #117	; 0x75
   15af0:	bne	15b2c <__assert_fail@plt+0x4748>
   15af4:	mov	r8, #3
   15af8:	mov	r3, #0
   15afc:	mov	r7, #448	; 0x1c0
   15b00:	b	15bac <__assert_fail@plt+0x47c8>
   15b04:	movw	r3, #4095	; 0xfff
   15b08:	b	15bac <__assert_fail@plt+0x47c8>
   15b0c:	mov	r8, #3
   15b10:	mov	r3, #0
   15b14:	mov	r7, #56	; 0x38
   15b18:	b	15bac <__assert_fail@plt+0x47c8>
   15b1c:	mov	r8, #3
   15b20:	mov	r3, #0
   15b24:	mov	r7, #7
   15b28:	b	15bac <__assert_fail@plt+0x47c8>
   15b2c:	mov	r8, #1
   15b30:	mov	r7, #0
   15b34:	b	15b60 <__assert_fail@plt+0x477c>
   15b38:	mov	r8, #2
   15b3c:	b	15b5c <__assert_fail@plt+0x4778>
   15b40:	orr	r7, r7, #3072	; 0xc00
   15b44:	b	15b5c <__assert_fail@plt+0x4778>
   15b48:	orr	r7, r7, #512	; 0x200
   15b4c:	b	15b5c <__assert_fail@plt+0x4778>
   15b50:	orr	r7, r7, #146	; 0x92
   15b54:	b	15b5c <__assert_fail@plt+0x4778>
   15b58:	orr	r7, r7, #73	; 0x49
   15b5c:	ldrb	r3, [r4], #1
   15b60:	uxtab	r1, lr, r3
   15b64:	cmp	r1, #6
   15b68:	bhi	15b98 <__assert_fail@plt+0x47b4>
   15b6c:	add	r3, pc, #0
   15b70:	ldr	pc, [r3, r1, lsl #2]
   15b74:	muleq	r1, r0, fp
   15b78:	andeq	r5, r1, r0, asr #22
   15b7c:	andeq	r5, r1, r8, asr #22
   15b80:	andeq	r5, r1, r4, lsr #23
   15b84:	andeq	r5, r1, r4, lsr #23
   15b88:	andeq	r5, r1, r0, asr fp
   15b8c:	andeq	r5, r1, r8, asr fp
   15b90:	orr	r7, r7, #292	; 0x124
   15b94:	b	15b5c <__assert_fail@plt+0x4778>
   15b98:	uxtb	r1, r3
   15b9c:	cmp	r1, #88	; 0x58
   15ba0:	beq	15b38 <__assert_fail@plt+0x4754>
   15ba4:	sub	r4, r4, #1
   15ba8:	mov	r3, #0
   15bac:	mov	r1, r0
   15bb0:	cmp	r3, #0
   15bb4:	strb	r6, [r1, r9, lsl #4]!
   15bb8:	strb	r8, [r1, #1]
   15bbc:	stmib	r1, {r2, r7}
   15bc0:	bne	15bd0 <__assert_fail@plt+0x47ec>
   15bc4:	cmp	r2, #0
   15bc8:	andne	r7, r7, r2
   15bcc:	mov	r3, r7
   15bd0:	add	r1, r0, r9, lsl #4
   15bd4:	add	r7, r9, #1
   15bd8:	str	r3, [r1, #12]
   15bdc:	ldrb	r6, [r4]
   15be0:	cmp	r6, #44	; 0x2c
   15be4:	ble	15c04 <__assert_fail@plt+0x4820>
   15be8:	cmp	r6, #45	; 0x2d
   15bec:	mov	r9, r7
   15bf0:	beq	15a74 <__assert_fail@plt+0x4690>
   15bf4:	cmp	r6, #61	; 0x3d
   15bf8:	mov	r9, r7
   15bfc:	beq	15a74 <__assert_fail@plt+0x4690>
   15c00:	b	15c8c <__assert_fail@plt+0x48a8>
   15c04:	cmp	r6, #43	; 0x2b
   15c08:	mov	r9, r7
   15c0c:	beq	15a74 <__assert_fail@plt+0x4690>
   15c10:	cmp	r6, #0
   15c14:	beq	15c9c <__assert_fail@plt+0x48b8>
   15c18:	cmp	r6, #44	; 0x2c
   15c1c:	bne	15c8c <__assert_fail@plt+0x48a8>
   15c20:	add	r4, r4, #1
   15c24:	mov	r9, r7
   15c28:	mov	r2, #0
   15c2c:	b	15c64 <__assert_fail@plt+0x4880>
   15c30:	movw	r3, #1080	; 0x438
   15c34:	b	15c5c <__assert_fail@plt+0x4878>
   15c38:	cmp	r6, #111	; 0x6f
   15c3c:	beq	15c58 <__assert_fail@plt+0x4874>
   15c40:	mov	r3, #2496	; 0x9c0
   15c44:	cmp	r6, #117	; 0x75
   15c48:	beq	15c5c <__assert_fail@plt+0x4878>
   15c4c:	b	15c8c <__assert_fail@plt+0x48a8>
   15c50:	movw	r3, #4095	; 0xfff
   15c54:	b	15c5c <__assert_fail@plt+0x4878>
   15c58:	movw	r3, #519	; 0x207
   15c5c:	orr	r2, r2, r3
   15c60:	add	r4, r4, #1
   15c64:	ldrb	r6, [r4]
   15c68:	cmp	r6, #110	; 0x6e
   15c6c:	bgt	15c38 <__assert_fail@plt+0x4854>
   15c70:	cmp	r6, #97	; 0x61
   15c74:	beq	15c50 <__assert_fail@plt+0x486c>
   15c78:	cmp	r6, #103	; 0x67
   15c7c:	beq	15c30 <__assert_fail@plt+0x484c>
   15c80:	sub	r1, r6, #43	; 0x2b
   15c84:	cmp	r1, #18
   15c88:	bls	15a6c <__assert_fail@plt+0x4688>
   15c8c:	bl	18998 <__assert_fail@plt+0x75b4>
   15c90:	mov	r0, #0
   15c94:	sub	sp, fp, #28
   15c98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c9c:	add	r1, r0, r7, lsl #4
   15ca0:	mov	r2, #0
   15ca4:	strb	r2, [r1, #1]
   15ca8:	b	15c94 <__assert_fail@plt+0x48b0>
   15cac:	push	{r4, sl, fp, lr}
   15cb0:	add	fp, sp, #8
   15cb4:	sub	sp, sp, #104	; 0x68
   15cb8:	mov	r1, sp
   15cbc:	bl	18e2c <__assert_fail@plt+0x7a48>
   15cc0:	mov	r1, r0
   15cc4:	mov	r0, #0
   15cc8:	cmp	r1, #0
   15ccc:	bne	15cf8 <__assert_fail@plt+0x4914>
   15cd0:	ldr	r4, [sp, #16]
   15cd4:	mov	r0, #32
   15cd8:	bl	17f30 <__assert_fail@plt+0x6b4c>
   15cdc:	movw	r1, #317	; 0x13d
   15ce0:	strh	r1, [r0]
   15ce4:	movw	r1, #4095	; 0xfff
   15ce8:	stmib	r0, {r1, r4}
   15cec:	str	r1, [r0, #12]
   15cf0:	mov	r1, #0
   15cf4:	strb	r1, [r0, #17]
   15cf8:	sub	sp, fp, #8
   15cfc:	pop	{r4, sl, fp, pc}
   15d00:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15d04:	add	fp, sp, #24
   15d08:	ldrb	r4, [r3, #1]
   15d0c:	ldr	ip, [fp, #8]
   15d10:	bfc	r0, #12, #20
   15d14:	cmp	r4, #0
   15d18:	beq	15df8 <__assert_fail@plt+0x4a14>
   15d1c:	cmp	r1, #0
   15d20:	mov	lr, r1
   15d24:	add	r3, r3, #8
   15d28:	mov	r9, #0
   15d2c:	movw	r8, #4095	; 0xfff
   15d30:	movwne	lr, #3072	; 0xc00
   15d34:	mov	r5, r3
   15d38:	ldr	r7, [r3, #-4]
   15d3c:	ldr	r3, [r3]
   15d40:	uxtb	r4, r4
   15d44:	ldr	r6, [r5, #4]
   15d48:	cmp	r4, #2
   15d4c:	bic	r6, lr, r6
   15d50:	beq	15d7c <__assert_fail@plt+0x4998>
   15d54:	cmp	r4, #3
   15d58:	bne	15d88 <__assert_fail@plt+0x49a4>
   15d5c:	and	r4, r3, r0
   15d60:	tst	r4, #146	; 0x92
   15d64:	mov	r3, r4
   15d68:	orrne	r3, r3, #146	; 0x92
   15d6c:	tst	r4, #292	; 0x124
   15d70:	orrne	r3, r3, #292	; 0x124
   15d74:	tst	r4, #73	; 0x49
   15d78:	b	15d84 <__assert_fail@plt+0x49a0>
   15d7c:	and	r4, r0, #73	; 0x49
   15d80:	orrs	r4, r4, r1
   15d84:	orrne	r3, r3, #73	; 0x49
   15d88:	cmp	r7, #0
   15d8c:	mov	r4, r7
   15d90:	mvneq	r4, r2
   15d94:	bic	r4, r4, r6
   15d98:	and	r3, r4, r3
   15d9c:	ldrb	r4, [r5, #-8]
   15da0:	cmp	r4, #43	; 0x2b
   15da4:	beq	15dd4 <__assert_fail@plt+0x49f0>
   15da8:	cmp	r4, #45	; 0x2d
   15dac:	beq	15ddc <__assert_fail@plt+0x49f8>
   15db0:	cmp	r4, #61	; 0x3d
   15db4:	bne	15de4 <__assert_fail@plt+0x4a00>
   15db8:	mvn	r4, r7
   15dbc:	cmp	r7, #0
   15dc0:	orrne	r6, r6, r4
   15dc4:	and	r0, r6, r0
   15dc8:	orr	r0, r3, r0
   15dcc:	bic	r3, r8, r6
   15dd0:	b	15de0 <__assert_fail@plt+0x49fc>
   15dd4:	orr	r0, r3, r0
   15dd8:	b	15de0 <__assert_fail@plt+0x49fc>
   15ddc:	bic	r0, r0, r3
   15de0:	orr	r9, r3, r9
   15de4:	ldrb	r4, [r5, #9]
   15de8:	add	r3, r5, #16
   15dec:	cmp	r4, #0
   15df0:	bne	15d34 <__assert_fail@plt+0x4950>
   15df4:	b	15dfc <__assert_fail@plt+0x4a18>
   15df8:	mov	r9, #0
   15dfc:	cmp	ip, #0
   15e00:	strne	r9, [ip]
   15e04:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15e08:	sub	sp, sp, #4
   15e0c:	push	{fp, lr}
   15e10:	mov	fp, sp
   15e14:	sub	sp, sp, #4
   15e18:	str	r3, [fp, #8]
   15e1c:	mov	r3, #0
   15e20:	tst	r2, #64	; 0x40
   15e24:	addne	r3, fp, #8
   15e28:	addne	r3, r3, #4
   15e2c:	strne	r3, [sp]
   15e30:	ldrne	r3, [fp, #8]
   15e34:	bl	1127c <openat64@plt>
   15e38:	bl	17a30 <__assert_fail@plt+0x664c>
   15e3c:	mov	sp, fp
   15e40:	pop	{fp, lr}
   15e44:	add	sp, sp, #4
   15e48:	bx	lr
   15e4c:	push	{r4, r5, r6, sl, fp, lr}
   15e50:	add	fp, sp, #16
   15e54:	orr	r2, r2, #18688	; 0x4900
   15e58:	mov	r4, r3
   15e5c:	orr	r2, r2, #524288	; 0x80000
   15e60:	bl	15e08 <__assert_fail@plt+0x4a24>
   15e64:	mov	r5, r0
   15e68:	mov	r0, #0
   15e6c:	cmp	r5, #0
   15e70:	poplt	{r4, r5, r6, sl, fp, pc}
   15e74:	mov	r0, r5
   15e78:	bl	1133c <fdopendir@plt>
   15e7c:	cmp	r0, #0
   15e80:	strne	r5, [r4]
   15e84:	popne	{r4, r5, r6, sl, fp, pc}
   15e88:	bl	11294 <__errno_location@plt>
   15e8c:	ldr	r6, [r0]
   15e90:	mov	r4, r0
   15e94:	mov	r0, r5
   15e98:	bl	113c0 <close@plt>
   15e9c:	mov	r0, #0
   15ea0:	str	r6, [r4]
   15ea4:	pop	{r4, r5, r6, sl, fp, pc}
   15ea8:	push	{r4, r5, fp, lr}
   15eac:	add	fp, sp, #8
   15eb0:	cmp	r0, #0
   15eb4:	beq	15f48 <__assert_fail@plt+0x4b64>
   15eb8:	mov	r1, #47	; 0x2f
   15ebc:	mov	r4, r0
   15ec0:	bl	11318 <strrchr@plt>
   15ec4:	cmp	r0, #0
   15ec8:	mov	r5, r4
   15ecc:	addne	r5, r0, #1
   15ed0:	sub	r0, r5, r4
   15ed4:	cmp	r0, #7
   15ed8:	blt	15f2c <__assert_fail@plt+0x4b48>
   15edc:	movw	r1, #39372	; 0x99cc
   15ee0:	sub	r0, r5, #7
   15ee4:	mov	r2, #7
   15ee8:	movt	r1, #1
   15eec:	bl	113a8 <strncmp@plt>
   15ef0:	cmp	r0, #0
   15ef4:	bne	15f2c <__assert_fail@plt+0x4b48>
   15ef8:	movw	r1, #39380	; 0x99d4
   15efc:	mov	r0, r5
   15f00:	mov	r2, #3
   15f04:	movt	r1, #1
   15f08:	bl	113a8 <strncmp@plt>
   15f0c:	cmp	r0, #0
   15f10:	beq	15f1c <__assert_fail@plt+0x4b38>
   15f14:	mov	r4, r5
   15f18:	b	15f2c <__assert_fail@plt+0x4b48>
   15f1c:	movw	r0, #41320	; 0xa168
   15f20:	add	r4, r5, #3
   15f24:	movt	r0, #2
   15f28:	str	r4, [r0]
   15f2c:	movw	r0, #41324	; 0xa16c
   15f30:	movt	r0, #2
   15f34:	str	r4, [r0]
   15f38:	movw	r0, #41396	; 0xa1b4
   15f3c:	movt	r0, #2
   15f40:	str	r4, [r0]
   15f44:	pop	{r4, r5, fp, pc}
   15f48:	movw	r0, #41336	; 0xa178
   15f4c:	movt	r0, #2
   15f50:	ldr	r1, [r0]
   15f54:	movw	r0, #39316	; 0x9994
   15f58:	movt	r0, #1
   15f5c:	bl	1139c <fputs@plt>
   15f60:	bl	113b4 <abort@plt>
   15f64:	push	{r4, r5, r6, sl, fp, lr}
   15f68:	add	fp, sp, #16
   15f6c:	mov	r4, r0
   15f70:	movw	r0, #41400	; 0xa1b8
   15f74:	movt	r0, #2
   15f78:	cmp	r4, #0
   15f7c:	moveq	r4, r0
   15f80:	bl	11294 <__errno_location@plt>
   15f84:	ldr	r6, [r0]
   15f88:	mov	r5, r0
   15f8c:	mov	r0, r4
   15f90:	mov	r1, #48	; 0x30
   15f94:	bl	18280 <__assert_fail@plt+0x6e9c>
   15f98:	str	r6, [r5]
   15f9c:	pop	{r4, r5, r6, sl, fp, pc}
   15fa0:	movw	r1, #41400	; 0xa1b8
   15fa4:	cmp	r0, #0
   15fa8:	movt	r1, #2
   15fac:	movne	r1, r0
   15fb0:	ldr	r0, [r1]
   15fb4:	bx	lr
   15fb8:	movw	r2, #41400	; 0xa1b8
   15fbc:	cmp	r0, #0
   15fc0:	movt	r2, #2
   15fc4:	movne	r2, r0
   15fc8:	str	r1, [r2]
   15fcc:	bx	lr
   15fd0:	movw	r3, #41400	; 0xa1b8
   15fd4:	cmp	r0, #0
   15fd8:	movt	r3, #2
   15fdc:	movne	r3, r0
   15fe0:	ubfx	r0, r1, #5, #3
   15fe4:	and	r1, r1, #31
   15fe8:	add	r0, r3, r0, lsl #2
   15fec:	ldr	r3, [r0, #8]
   15ff0:	eor	r2, r2, r3, lsr r1
   15ff4:	and	r2, r2, #1
   15ff8:	eor	r2, r3, r2, lsl r1
   15ffc:	str	r2, [r0, #8]
   16000:	mov	r0, #1
   16004:	and	r0, r0, r3, lsr r1
   16008:	bx	lr
   1600c:	movw	r2, #41400	; 0xa1b8
   16010:	cmp	r0, #0
   16014:	movt	r2, #2
   16018:	movne	r2, r0
   1601c:	ldr	r0, [r2, #4]
   16020:	str	r1, [r2, #4]
   16024:	bx	lr
   16028:	movw	r3, #41400	; 0xa1b8
   1602c:	cmp	r0, #0
   16030:	movt	r3, #2
   16034:	movne	r3, r0
   16038:	cmp	r1, #0
   1603c:	mov	r0, #10
   16040:	cmpne	r2, #0
   16044:	str	r0, [r3]
   16048:	bne	16058 <__assert_fail@plt+0x4c74>
   1604c:	push	{fp, lr}
   16050:	mov	fp, sp
   16054:	bl	113b4 <abort@plt>
   16058:	str	r1, [r3, #40]	; 0x28
   1605c:	str	r2, [r3, #44]	; 0x2c
   16060:	bx	lr
   16064:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16068:	add	fp, sp, #28
   1606c:	sub	sp, sp, #20
   16070:	mov	r7, r0
   16074:	ldr	r0, [fp, #8]
   16078:	movw	r5, #41400	; 0xa1b8
   1607c:	mov	r8, r3
   16080:	mov	r9, r2
   16084:	mov	sl, r1
   16088:	movt	r5, #2
   1608c:	cmp	r0, #0
   16090:	movne	r5, r0
   16094:	bl	11294 <__errno_location@plt>
   16098:	mov	r4, r0
   1609c:	ldm	r5, {r0, r1}
   160a0:	ldr	r2, [r5, #40]	; 0x28
   160a4:	ldr	r3, [r5, #44]	; 0x2c
   160a8:	add	r5, r5, #8
   160ac:	ldr	r6, [r4]
   160b0:	stm	sp, {r0, r1, r5}
   160b4:	str	r2, [sp, #12]
   160b8:	str	r3, [sp, #16]
   160bc:	mov	r0, r7
   160c0:	mov	r1, sl
   160c4:	mov	r2, r9
   160c8:	mov	r3, r8
   160cc:	bl	160dc <__assert_fail@plt+0x4cf8>
   160d0:	str	r6, [r4]
   160d4:	sub	sp, fp, #28
   160d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160e0:	add	fp, sp, #28
   160e4:	sub	sp, sp, #156	; 0x9c
   160e8:	str	r0, [fp, #-56]	; 0xffffffc8
   160ec:	ldr	r0, [fp, #12]
   160f0:	mov	r4, r1
   160f4:	str	r3, [sp, #80]	; 0x50
   160f8:	str	r2, [fp, #-84]	; 0xffffffac
   160fc:	and	r1, r0, #4
   16100:	str	r1, [sp, #24]
   16104:	and	r1, r0, #1
   16108:	str	r1, [sp, #28]
   1610c:	ubfx	r7, r0, #1, #1
   16110:	bl	111d4 <__ctype_get_mb_cur_max@plt>
   16114:	str	r0, [sp, #32]
   16118:	ldr	r0, [fp, #24]
   1611c:	ldr	r9, [fp, #8]
   16120:	mov	r2, #0
   16124:	mov	r1, #0
   16128:	mov	r5, #0
   1612c:	str	r2, [sp, #52]	; 0x34
   16130:	mov	r2, #1
   16134:	str	r0, [sp, #72]	; 0x48
   16138:	ldr	r0, [fp, #20]
   1613c:	str	r0, [sp, #64]	; 0x40
   16140:	mov	r0, #0
   16144:	str	r0, [sp, #92]	; 0x5c
   16148:	mov	r0, #0
   1614c:	str	r0, [fp, #-76]	; 0xffffffb4
   16150:	mov	r0, #0
   16154:	cmp	r9, #10
   16158:	str	r1, [sp, #68]	; 0x44
   1615c:	bhi	1715c <__assert_fail@plt+0x5d78>
   16160:	add	r1, pc, #28
   16164:	ldr	ip, [fp, #-84]	; 0xffffffac
   16168:	ldr	lr, [sp, #80]	; 0x50
   1616c:	mov	r6, r4
   16170:	mov	r8, #0
   16174:	mov	r3, #1
   16178:	mov	sl, #0
   1617c:	mov	r4, r2
   16180:	ldr	pc, [r1, r9, lsl #2]
   16184:	andeq	r6, r1, r4, asr r2
   16188:	muleq	r1, r0, r2
   1618c:	andeq	r6, r1, r4, ror #4
   16190:	andeq	r6, r1, ip, asr #4
   16194:	andeq	r6, r1, r4, lsl #5
   16198:	ldrdeq	r6, [r1], -ip
   1619c:	andeq	r6, r1, r4, ror r2
   161a0:	andeq	r6, r1, ip, lsr r3
   161a4:			; <UNDEFINED> instruction: 0x000161b0
   161a8:			; <UNDEFINED> instruction: 0x000161b0
   161ac:	ldrdeq	r6, [r1], -r8
   161b0:	movw	r0, #39462	; 0x9a26
   161b4:	mov	r1, r9
   161b8:	movt	r0, #1
   161bc:	bl	178c4 <__assert_fail@plt+0x64e0>
   161c0:	str	r0, [sp, #64]	; 0x40
   161c4:	movw	r0, #39464	; 0x9a28
   161c8:	mov	r1, r9
   161cc:	movt	r0, #1
   161d0:	bl	178c4 <__assert_fail@plt+0x64e0>
   161d4:	str	r0, [sp, #72]	; 0x48
   161d8:	mov	r8, #0
   161dc:	mov	sl, r7
   161e0:	tst	r7, #1
   161e4:	str	r5, [fp, #-48]	; 0xffffffd0
   161e8:	bne	16224 <__assert_fail@plt+0x4e40>
   161ec:	ldr	r0, [sp, #64]	; 0x40
   161f0:	ldrb	r0, [r0]
   161f4:	cmp	r0, #0
   161f8:	beq	16224 <__assert_fail@plt+0x4e40>
   161fc:	ldr	r1, [sp, #64]	; 0x40
   16200:	mov	r8, #0
   16204:	add	r1, r1, #1
   16208:	cmp	r8, r6
   1620c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16210:	strbcc	r0, [r2, r8]
   16214:	ldrb	r0, [r1, r8]
   16218:	add	r8, r8, #1
   1621c:	cmp	r0, #0
   16220:	bne	16208 <__assert_fail@plt+0x4e24>
   16224:	ldr	r7, [sp, #72]	; 0x48
   16228:	mov	r0, r7
   1622c:	bl	11270 <strlen@plt>
   16230:	ldr	ip, [fp, #-84]	; 0xffffffac
   16234:	ldr	lr, [sp, #80]	; 0x50
   16238:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1623c:	str	r0, [fp, #-76]	; 0xffffffb4
   16240:	str	r7, [sp, #92]	; 0x5c
   16244:	mov	r3, #1
   16248:	b	1633c <__assert_fail@plt+0x4f58>
   1624c:	mov	r0, #1
   16250:	b	16290 <__assert_fail@plt+0x4eac>
   16254:	mov	r9, #0
   16258:	mov	r8, #0
   1625c:	mov	r3, r0
   16260:	b	16338 <__assert_fail@plt+0x4f54>
   16264:	tst	r7, #1
   16268:	bne	16290 <__assert_fail@plt+0x4eac>
   1626c:	mov	r3, r0
   16270:	b	162b8 <__assert_fail@plt+0x4ed4>
   16274:	mov	r0, #1
   16278:	mov	r8, #0
   1627c:	mov	r9, #5
   16280:	b	162f0 <__assert_fail@plt+0x4f0c>
   16284:	mov	r3, #1
   16288:	tst	r7, #1
   1628c:	beq	162b8 <__assert_fail@plt+0x4ed4>
   16290:	mov	r1, #1
   16294:	mov	r8, #0
   16298:	mov	r9, #2
   1629c:	mov	r3, r0
   162a0:	mov	sl, #1
   162a4:	str	r1, [fp, #-76]	; 0xffffffb4
   162a8:	movw	r1, #39464	; 0x9a28
   162ac:	movt	r1, #1
   162b0:	str	r1, [sp, #92]	; 0x5c
   162b4:	b	1633c <__assert_fail@plt+0x4f58>
   162b8:	cmp	r6, #0
   162bc:	mov	r8, #1
   162c0:	mov	r9, #2
   162c4:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   162c8:	movne	r0, #39	; 0x27
   162cc:	strbne	r0, [r1]
   162d0:	movw	r0, #39464	; 0x9a28
   162d4:	movt	r0, #1
   162d8:	b	1632c <__assert_fail@plt+0x4f48>
   162dc:	mov	r9, #5
   162e0:	tst	r7, #1
   162e4:	beq	1630c <__assert_fail@plt+0x4f28>
   162e8:	mov	r0, #1
   162ec:	mov	r8, #0
   162f0:	str	r0, [fp, #-76]	; 0xffffffb4
   162f4:	movw	r0, #39460	; 0x9a24
   162f8:	mov	r3, #1
   162fc:	mov	sl, #1
   16300:	movt	r0, #1
   16304:	str	r0, [sp, #92]	; 0x5c
   16308:	b	1633c <__assert_fail@plt+0x4f58>
   1630c:	cmp	r6, #0
   16310:	mov	r8, #1
   16314:	mov	r3, #1
   16318:	ldrne	r1, [fp, #-56]	; 0xffffffc8
   1631c:	movne	r0, #34	; 0x22
   16320:	strbne	r0, [r1]
   16324:	movw	r0, #39460	; 0x9a24
   16328:	movt	r0, #1
   1632c:	str	r0, [sp, #92]	; 0x5c
   16330:	mov	r0, #1
   16334:	str	r0, [fp, #-76]	; 0xffffffb4
   16338:	mov	sl, #0
   1633c:	ldr	r0, [fp, #16]
   16340:	mov	r7, #0
   16344:	str	r9, [fp, #-64]	; 0xffffffc0
   16348:	str	sl, [fp, #-72]	; 0xffffffb8
   1634c:	str	r3, [sp, #84]	; 0x54
   16350:	cmp	r0, #0
   16354:	movwne	r0, #1
   16358:	and	r0, r0, sl
   1635c:	str	r0, [fp, #-88]	; 0xffffffa8
   16360:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16364:	cmp	r0, #0
   16368:	movwne	r0, #1
   1636c:	subs	r2, r9, #2
   16370:	and	r1, r0, sl
   16374:	str	r2, [fp, #-80]	; 0xffffffb0
   16378:	and	r1, r3, r1
   1637c:	str	r1, [sp, #44]	; 0x2c
   16380:	clz	r1, r2
   16384:	lsr	r1, r1, #5
   16388:	and	r1, r1, sl
   1638c:	str	r1, [sp, #56]	; 0x38
   16390:	mov	r1, r2
   16394:	eor	r2, sl, #1
   16398:	movwne	r1, #1
   1639c:	str	r2, [sp, #88]	; 0x58
   163a0:	orr	r2, r1, r2
   163a4:	and	r1, r1, r3
   163a8:	and	r0, r0, r1
   163ac:	str	r2, [sp, #60]	; 0x3c
   163b0:	str	r1, [fp, #-68]	; 0xffffffbc
   163b4:	str	r0, [fp, #-60]	; 0xffffffc4
   163b8:	eor	r0, r3, #1
   163bc:	str	r0, [sp, #48]	; 0x30
   163c0:	cmn	lr, #1
   163c4:	beq	163d4 <__assert_fail@plt+0x4ff0>
   163c8:	cmp	r7, lr
   163cc:	bne	163e0 <__assert_fail@plt+0x4ffc>
   163d0:	b	16f8c <__assert_fail@plt+0x5ba8>
   163d4:	ldrb	r0, [ip, r7]
   163d8:	cmp	r0, #0
   163dc:	beq	16f94 <__assert_fail@plt+0x5bb0>
   163e0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   163e4:	mov	r9, #0
   163e8:	str	r5, [fp, #-48]	; 0xffffffd0
   163ec:	str	r6, [fp, #-52]	; 0xffffffcc
   163f0:	cmp	r0, #0
   163f4:	beq	16434 <__assert_fail@plt+0x5050>
   163f8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   163fc:	mov	r5, r4
   16400:	add	r4, r7, r0
   16404:	cmp	r0, #2
   16408:	bcc	16424 <__assert_fail@plt+0x5040>
   1640c:	cmn	lr, #1
   16410:	bne	16424 <__assert_fail@plt+0x5040>
   16414:	mov	r0, ip
   16418:	bl	11270 <strlen@plt>
   1641c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16420:	mov	lr, r0
   16424:	cmp	r4, lr
   16428:	bls	1643c <__assert_fail@plt+0x5058>
   1642c:	mov	r6, #0
   16430:	b	1647c <__assert_fail@plt+0x5098>
   16434:	mov	r6, #0
   16438:	b	16480 <__assert_fail@plt+0x509c>
   1643c:	ldr	r1, [sp, #92]	; 0x5c
   16440:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16444:	add	r0, ip, r7
   16448:	mov	r4, lr
   1644c:	bl	11174 <memcmp@plt>
   16450:	ldr	r2, [sp, #88]	; 0x58
   16454:	cmp	r0, #0
   16458:	mov	r1, r0
   1645c:	movwne	r1, #1
   16460:	orr	r1, r1, r2
   16464:	tst	r1, #1
   16468:	beq	17028 <__assert_fail@plt+0x5c44>
   1646c:	ldr	ip, [fp, #-84]	; 0xffffffac
   16470:	clz	r0, r0
   16474:	mov	lr, r4
   16478:	lsr	r6, r0, #5
   1647c:	mov	r4, r5
   16480:	ldrb	r5, [ip, r7]
   16484:	cmp	r5, #126	; 0x7e
   16488:	bhi	16850 <__assert_fail@plt+0x546c>
   1648c:	add	r3, pc, #16
   16490:	mov	sl, #1
   16494:	mov	r2, #110	; 0x6e
   16498:	mov	r0, #97	; 0x61
   1649c:	mov	r1, #0
   164a0:	ldr	pc, [r3, r5, lsl #2]
   164a4:	andeq	r6, r1, r4, lsr r7
   164a8:	andeq	r6, r1, r0, asr r8
   164ac:	andeq	r6, r1, r0, asr r8
   164b0:	andeq	r6, r1, r0, asr r8
   164b4:	andeq	r6, r1, r0, asr r8
   164b8:	andeq	r6, r1, r0, asr r8
   164bc:	andeq	r6, r1, r0, asr r8
   164c0:	strdeq	r6, [r1], -r4
   164c4:	andeq	r6, r1, r4, lsl r7
   164c8:	andeq	r6, r1, ip, lsl #14
   164cc:	andeq	r6, r1, r0, lsr #14
   164d0:	andeq	r6, r1, r4, lsr #15
   164d4:	andeq	r6, r1, r4, lsl #14
   164d8:	andeq	r6, r1, ip, lsl r7
   164dc:	andeq	r6, r1, r0, asr r8
   164e0:	andeq	r6, r1, r0, asr r8
   164e4:	andeq	r6, r1, r0, asr r8
   164e8:	andeq	r6, r1, r0, asr r8
   164ec:	andeq	r6, r1, r0, asr r8
   164f0:	andeq	r6, r1, r0, asr r8
   164f4:	andeq	r6, r1, r0, asr r8
   164f8:	andeq	r6, r1, r0, asr r8
   164fc:	andeq	r6, r1, r0, asr r8
   16500:	andeq	r6, r1, r0, asr r8
   16504:	andeq	r6, r1, r0, asr r8
   16508:	andeq	r6, r1, r0, asr r8
   1650c:	andeq	r6, r1, r0, asr r8
   16510:	andeq	r6, r1, r0, asr r8
   16514:	andeq	r6, r1, r0, asr r8
   16518:	andeq	r6, r1, r0, asr r8
   1651c:	andeq	r6, r1, r0, asr r8
   16520:	andeq	r6, r1, r0, asr r8
   16524:			; <UNDEFINED> instruction: 0x000168b4
   16528:			; <UNDEFINED> instruction: 0x000168b8
   1652c:			; <UNDEFINED> instruction: 0x000168b8
   16530:			; <UNDEFINED> instruction: 0x000166b4
   16534:			; <UNDEFINED> instruction: 0x000168b8
   16538:	andeq	r6, r1, r0, lsr #13
   1653c:			; <UNDEFINED> instruction: 0x000168b8
   16540:	andeq	r6, r1, ip, lsr #15
   16544:			; <UNDEFINED> instruction: 0x000168b8
   16548:			; <UNDEFINED> instruction: 0x000168b8
   1654c:			; <UNDEFINED> instruction: 0x000168b8
   16550:	andeq	r6, r1, r0, lsr #13
   16554:	andeq	r6, r1, r0, lsr #13
   16558:	andeq	r6, r1, r0, lsr #13
   1655c:	andeq	r6, r1, r0, lsr #13
   16560:	andeq	r6, r1, r0, lsr #13
   16564:	andeq	r6, r1, r0, lsr #13
   16568:	andeq	r6, r1, r0, lsr #13
   1656c:	andeq	r6, r1, r0, lsr #13
   16570:	andeq	r6, r1, r0, lsr #13
   16574:	andeq	r6, r1, r0, lsr #13
   16578:	andeq	r6, r1, r0, lsr #13
   1657c:	andeq	r6, r1, r0, lsr #13
   16580:	andeq	r6, r1, r0, lsr #13
   16584:	andeq	r6, r1, r0, lsr #13
   16588:	andeq	r6, r1, r0, lsr #13
   1658c:	andeq	r6, r1, r0, lsr #13
   16590:			; <UNDEFINED> instruction: 0x000168b8
   16594:			; <UNDEFINED> instruction: 0x000168b8
   16598:			; <UNDEFINED> instruction: 0x000168b8
   1659c:			; <UNDEFINED> instruction: 0x000168b8
   165a0:	andeq	r6, r1, r8, ror r7
   165a4:	andeq	r6, r1, r0, asr r8
   165a8:	andeq	r6, r1, r0, lsr #13
   165ac:	andeq	r6, r1, r0, lsr #13
   165b0:	andeq	r6, r1, r0, lsr #13
   165b4:	andeq	r6, r1, r0, lsr #13
   165b8:	andeq	r6, r1, r0, lsr #13
   165bc:	andeq	r6, r1, r0, lsr #13
   165c0:	andeq	r6, r1, r0, lsr #13
   165c4:	andeq	r6, r1, r0, lsr #13
   165c8:	andeq	r6, r1, r0, lsr #13
   165cc:	andeq	r6, r1, r0, lsr #13
   165d0:	andeq	r6, r1, r0, lsr #13
   165d4:	andeq	r6, r1, r0, lsr #13
   165d8:	andeq	r6, r1, r0, lsr #13
   165dc:	andeq	r6, r1, r0, lsr #13
   165e0:	andeq	r6, r1, r0, lsr #13
   165e4:	andeq	r6, r1, r0, lsr #13
   165e8:	andeq	r6, r1, r0, lsr #13
   165ec:	andeq	r6, r1, r0, lsr #13
   165f0:	andeq	r6, r1, r0, lsr #13
   165f4:	andeq	r6, r1, r0, lsr #13
   165f8:	andeq	r6, r1, r0, lsr #13
   165fc:	andeq	r6, r1, r0, lsr #13
   16600:	andeq	r6, r1, r0, lsr #13
   16604:	andeq	r6, r1, r0, lsr #13
   16608:	andeq	r6, r1, r0, lsr #13
   1660c:	andeq	r6, r1, r0, lsr #13
   16610:			; <UNDEFINED> instruction: 0x000168b8
   16614:	andeq	r6, r1, r0, ror #13
   16618:	andeq	r6, r1, r0, lsr #13
   1661c:			; <UNDEFINED> instruction: 0x000168b8
   16620:	andeq	r6, r1, r0, lsr #13
   16624:			; <UNDEFINED> instruction: 0x000168b8
   16628:	andeq	r6, r1, r0, lsr #13
   1662c:	andeq	r6, r1, r0, lsr #13
   16630:	andeq	r6, r1, r0, lsr #13
   16634:	andeq	r6, r1, r0, lsr #13
   16638:	andeq	r6, r1, r0, lsr #13
   1663c:	andeq	r6, r1, r0, lsr #13
   16640:	andeq	r6, r1, r0, lsr #13
   16644:	andeq	r6, r1, r0, lsr #13
   16648:	andeq	r6, r1, r0, lsr #13
   1664c:	andeq	r6, r1, r0, lsr #13
   16650:	andeq	r6, r1, r0, lsr #13
   16654:	andeq	r6, r1, r0, lsr #13
   16658:	andeq	r6, r1, r0, lsr #13
   1665c:	andeq	r6, r1, r0, lsr #13
   16660:	andeq	r6, r1, r0, lsr #13
   16664:	andeq	r6, r1, r0, lsr #13
   16668:	andeq	r6, r1, r0, lsr #13
   1666c:	andeq	r6, r1, r0, lsr #13
   16670:	andeq	r6, r1, r0, lsr #13
   16674:	andeq	r6, r1, r0, lsr #13
   16678:	andeq	r6, r1, r0, lsr #13
   1667c:	andeq	r6, r1, r0, lsr #13
   16680:	andeq	r6, r1, r0, lsr #13
   16684:	andeq	r6, r1, r0, lsr #13
   16688:	andeq	r6, r1, r0, lsr #13
   1668c:	andeq	r6, r1, r0, lsr #13
   16690:	andeq	r6, r1, r4, asr #13
   16694:			; <UNDEFINED> instruction: 0x000168b8
   16698:	andeq	r6, r1, r4, asr #13
   1669c:			; <UNDEFINED> instruction: 0x000166b4
   166a0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   166a4:	cmp	r0, #0
   166a8:	beq	16908 <__assert_fail@plt+0x5524>
   166ac:	ldr	r0, [fp, #16]
   166b0:	b	1690c <__assert_fail@plt+0x5528>
   166b4:	mov	sl, #0
   166b8:	cmp	r7, #0
   166bc:	bne	16b24 <__assert_fail@plt+0x5740>
   166c0:	b	168b4 <__assert_fail@plt+0x54d0>
   166c4:	mov	sl, #0
   166c8:	cmn	lr, #1
   166cc:	beq	168a0 <__assert_fail@plt+0x54bc>
   166d0:	cmp	r7, #0
   166d4:	cmpeq	lr, #1
   166d8:	bne	16b24 <__assert_fail@plt+0x5740>
   166dc:	b	168b4 <__assert_fail@plt+0x54d0>
   166e0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   166e4:	cmp	r0, #2
   166e8:	bne	168d8 <__assert_fail@plt+0x54f4>
   166ec:	ldr	r0, [fp, #-72]	; 0xffffffb8
   166f0:	tst	r0, #1
   166f4:	bne	17044 <__assert_fail@plt+0x5c60>
   166f8:	mov	r9, #0
   166fc:	mov	r0, #92	; 0x5c
   16700:	b	168ec <__assert_fail@plt+0x5508>
   16704:	mov	r0, #102	; 0x66
   16708:	b	168f4 <__assert_fail@plt+0x5510>
   1670c:	mov	r2, #116	; 0x74
   16710:	b	16720 <__assert_fail@plt+0x533c>
   16714:	mov	r0, #98	; 0x62
   16718:	b	168f4 <__assert_fail@plt+0x5510>
   1671c:	mov	r2, #114	; 0x72
   16720:	ldr	r0, [sp, #60]	; 0x3c
   16724:	tst	r0, #1
   16728:	mov	r0, r2
   1672c:	bne	168f4 <__assert_fail@plt+0x5510>
   16730:	b	17044 <__assert_fail@plt+0x5c60>
   16734:	ldr	r0, [sp, #84]	; 0x54
   16738:	tst	r0, #1
   1673c:	beq	169e0 <__assert_fail@plt+0x55fc>
   16740:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16744:	tst	r0, #1
   16748:	bne	1714c <__assert_fail@plt+0x5d68>
   1674c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16750:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16754:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16758:	cmp	r0, #2
   1675c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   16760:	movwne	r0, #1
   16764:	orr	r0, r0, r3
   16768:	tst	r0, #1
   1676c:	beq	16e60 <__assert_fail@plt+0x5a7c>
   16770:	mov	r0, r8
   16774:	b	16ea0 <__assert_fail@plt+0x5abc>
   16778:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1677c:	mov	r9, #0
   16780:	mov	r5, #63	; 0x3f
   16784:	cmp	r0, #5
   16788:	beq	16b2c <__assert_fail@plt+0x5748>
   1678c:	cmp	r0, #2
   16790:	bne	16bec <__assert_fail@plt+0x5808>
   16794:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16798:	tst	r0, #1
   1679c:	beq	16bf0 <__assert_fail@plt+0x580c>
   167a0:	b	17044 <__assert_fail@plt+0x5c60>
   167a4:	mov	r0, #118	; 0x76
   167a8:	b	168f4 <__assert_fail@plt+0x5510>
   167ac:	mov	r0, #1
   167b0:	mov	r5, #39	; 0x27
   167b4:	str	r0, [sp, #52]	; 0x34
   167b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   167bc:	cmp	r0, #2
   167c0:	bne	16848 <__assert_fail@plt+0x5464>
   167c4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   167c8:	tst	r0, #1
   167cc:	bne	17044 <__assert_fail@plt+0x5c60>
   167d0:	ldr	r3, [sp, #68]	; 0x44
   167d4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   167d8:	mov	r9, #0
   167dc:	clz	r1, r2
   167e0:	cmp	r3, #0
   167e4:	mov	r0, r3
   167e8:	movwne	r0, #1
   167ec:	lsr	r1, r1, #5
   167f0:	orrs	r0, r0, r1
   167f4:	moveq	r3, r2
   167f8:	moveq	r2, r0
   167fc:	cmp	r8, r2
   16800:	str	r3, [sp, #68]	; 0x44
   16804:	str	r2, [fp, #-52]	; 0xffffffcc
   16808:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   1680c:	movcc	r0, #39	; 0x27
   16810:	strbcc	r0, [r1, r8]
   16814:	add	r0, r8, #1
   16818:	cmp	r0, r2
   1681c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16820:	movcc	r1, #92	; 0x5c
   16824:	strbcc	r1, [r3, r0]
   16828:	add	r0, r8, #2
   1682c:	add	r8, r8, #3
   16830:	cmp	r0, r2
   16834:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16838:	movcc	r1, #39	; 0x27
   1683c:	strbcc	r1, [r2, r0]
   16840:	mov	r0, #0
   16844:	str	r0, [fp, #-48]	; 0xffffffd0
   16848:	mov	sl, #1
   1684c:	b	166a0 <__assert_fail@plt+0x52bc>
   16850:	ldr	r0, [sp, #32]
   16854:	cmp	r0, #1
   16858:	bne	16a04 <__assert_fail@plt+0x5620>
   1685c:	str	lr, [sp, #80]	; 0x50
   16860:	bl	11258 <__ctype_b_loc@plt>
   16864:	ldr	r0, [r0]
   16868:	ldr	ip, [fp, #-84]	; 0xffffffac
   1686c:	mov	r1, #1
   16870:	add	r0, r0, r5, lsl #1
   16874:	ldrb	r0, [r0, #1]
   16878:	ubfx	sl, r0, #6, #1
   1687c:	ldr	r0, [sp, #48]	; 0x30
   16880:	mov	r2, r1
   16884:	cmp	r1, #1
   16888:	orr	r0, sl, r0
   1688c:	bhi	16bf8 <__assert_fail@plt+0x5814>
   16890:	tst	r0, #1
   16894:	beq	16bf8 <__assert_fail@plt+0x5814>
   16898:	ldr	lr, [sp, #80]	; 0x50
   1689c:	b	166a0 <__assert_fail@plt+0x52bc>
   168a0:	cmp	r7, #0
   168a4:	bne	16b20 <__assert_fail@plt+0x573c>
   168a8:	ldrb	r0, [ip, #1]
   168ac:	cmp	r0, #0
   168b0:	bne	16b20 <__assert_fail@plt+0x573c>
   168b4:	mov	r1, #1
   168b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   168bc:	cmp	r0, #2
   168c0:	bne	168d0 <__assert_fail@plt+0x54ec>
   168c4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   168c8:	tst	r0, #1
   168cc:	bne	17044 <__assert_fail@plt+0x5c60>
   168d0:	mov	sl, r1
   168d4:	b	166a0 <__assert_fail@plt+0x52bc>
   168d8:	ldr	r1, [sp, #44]	; 0x2c
   168dc:	mov	r9, #0
   168e0:	mov	r0, #92	; 0x5c
   168e4:	cmp	r1, #0
   168e8:	beq	168f4 <__assert_fail@plt+0x5510>
   168ec:	mov	sl, #0
   168f0:	b	16e0c <__assert_fail@plt+0x5a28>
   168f4:	ldr	r1, [sp, #84]	; 0x54
   168f8:	mov	sl, #0
   168fc:	mov	r9, #0
   16900:	tst	r1, #1
   16904:	bne	16940 <__assert_fail@plt+0x555c>
   16908:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1690c:	cmp	r0, #0
   16910:	mov	r0, r5
   16914:	beq	16938 <__assert_fail@plt+0x5554>
   16918:	ldr	r1, [fp, #16]
   1691c:	ubfx	r0, r5, #5, #3
   16920:	mov	r2, #1
   16924:	ldr	r0, [r1, r0, lsl #2]
   16928:	and	r1, r5, #31
   1692c:	tst	r0, r2, lsl r1
   16930:	mov	r0, r5
   16934:	bne	16940 <__assert_fail@plt+0x555c>
   16938:	cmp	r6, #0
   1693c:	beq	16e0c <__assert_fail@plt+0x5a28>
   16940:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16944:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16948:	tst	r1, #1
   1694c:	bne	17020 <__assert_fail@plt+0x5c3c>
   16950:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16954:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16958:	cmp	r1, #2
   1695c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   16960:	movwne	r1, #1
   16964:	orr	r1, r1, r5
   16968:	tst	r1, #1
   1696c:	bne	169b0 <__assert_fail@plt+0x55cc>
   16970:	cmp	r8, r6
   16974:	mov	r5, #1
   16978:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   1697c:	movcc	r1, #39	; 0x27
   16980:	strbcc	r1, [r2, r8]
   16984:	add	r1, r8, #1
   16988:	cmp	r1, r6
   1698c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16990:	movcc	r2, #36	; 0x24
   16994:	strbcc	r2, [r3, r1]
   16998:	add	r1, r8, #2
   1699c:	add	r8, r8, #3
   169a0:	cmp	r1, r6
   169a4:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   169a8:	movcc	r2, #39	; 0x27
   169ac:	strbcc	r2, [r3, r1]
   169b0:	cmp	r8, r6
   169b4:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   169b8:	movcc	r1, #92	; 0x5c
   169bc:	strbcc	r1, [r2, r8]
   169c0:	add	r8, r8, #1
   169c4:	cmp	r8, r6
   169c8:	and	r4, r4, sl
   169cc:	ldrcc	r1, [fp, #-56]	; 0xffffffc8
   169d0:	strbcc	r0, [r1, r8]
   169d4:	add	r8, r8, #1
   169d8:	add	r7, r7, #1
   169dc:	b	163c0 <__assert_fail@plt+0x4fdc>
   169e0:	ldr	r0, [sp, #28]
   169e4:	mov	sl, #0
   169e8:	mov	r9, #0
   169ec:	mov	r5, #0
   169f0:	cmp	r0, #0
   169f4:	beq	16908 <__assert_fail@plt+0x5524>
   169f8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   169fc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16a00:	b	169d8 <__assert_fail@plt+0x55f4>
   16a04:	mov	r0, #0
   16a08:	cmn	lr, #1
   16a0c:	str	r6, [sp, #76]	; 0x4c
   16a10:	str	r4, [sp, #20]
   16a14:	str	r0, [fp, #-36]	; 0xffffffdc
   16a18:	str	r0, [fp, #-40]	; 0xffffffd8
   16a1c:	bne	16a30 <__assert_fail@plt+0x564c>
   16a20:	mov	r0, ip
   16a24:	bl	11270 <strlen@plt>
   16a28:	ldr	ip, [fp, #-84]	; 0xffffffac
   16a2c:	mov	lr, r0
   16a30:	add	r0, ip, r7
   16a34:	mov	sl, #1
   16a38:	mov	r6, #0
   16a3c:	sub	r4, fp, #40	; 0x28
   16a40:	str	lr, [sp, #80]	; 0x50
   16a44:	str	r0, [sp, #36]	; 0x24
   16a48:	str	r6, [sp, #40]	; 0x28
   16a4c:	add	r6, r6, r7
   16a50:	sub	r0, fp, #44	; 0x2c
   16a54:	mov	r3, r4
   16a58:	add	r1, ip, r6
   16a5c:	sub	r2, lr, r6
   16a60:	bl	18a9c <__assert_fail@plt+0x76b8>
   16a64:	cmp	r0, #0
   16a68:	beq	16f74 <__assert_fail@plt+0x5b90>
   16a6c:	cmn	r0, #1
   16a70:	beq	16f34 <__assert_fail@plt+0x5b50>
   16a74:	ldr	lr, [sp, #80]	; 0x50
   16a78:	cmn	r0, #2
   16a7c:	beq	16f3c <__assert_fail@plt+0x5b58>
   16a80:	ldr	r2, [sp, #56]	; 0x38
   16a84:	cmp	r0, #2
   16a88:	mov	r1, #0
   16a8c:	movwcc	r1, #1
   16a90:	eor	r2, r2, #1
   16a94:	orrs	r1, r2, r1
   16a98:	bne	16ae4 <__assert_fail@plt+0x5700>
   16a9c:	ldr	r1, [sp, #40]	; 0x28
   16aa0:	ldr	r2, [sp, #36]	; 0x24
   16aa4:	add	ip, r2, r1
   16aa8:	mov	r2, #1
   16aac:	ldrb	r3, [ip, r2]
   16ab0:	sub	r6, r3, #94	; 0x5e
   16ab4:	cmp	r6, #30
   16ab8:	bhi	16acc <__assert_fail@plt+0x56e8>
   16abc:	mov	r4, #1
   16ac0:	mov	r1, #1073741829	; 0x40000005
   16ac4:	tst	r1, r4, lsl r6
   16ac8:	bne	17040 <__assert_fail@plt+0x5c5c>
   16acc:	sub	r3, r3, #91	; 0x5b
   16ad0:	cmp	r3, #2
   16ad4:	bcc	17040 <__assert_fail@plt+0x5c5c>
   16ad8:	add	r2, r2, #1
   16adc:	cmp	r2, r0
   16ae0:	bcc	16aac <__assert_fail@plt+0x56c8>
   16ae4:	ldr	r6, [sp, #40]	; 0x28
   16ae8:	add	r6, r0, r6
   16aec:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16af0:	bl	111b0 <iswprint@plt>
   16af4:	cmp	r0, #0
   16af8:	sub	r4, fp, #40	; 0x28
   16afc:	movwne	r0, #1
   16b00:	and	sl, sl, r0
   16b04:	mov	r0, r4
   16b08:	bl	11168 <mbsinit@plt>
   16b0c:	ldr	lr, [sp, #80]	; 0x50
   16b10:	ldr	ip, [fp, #-84]	; 0xffffffac
   16b14:	cmp	r0, #0
   16b18:	beq	16a48 <__assert_fail@plt+0x5664>
   16b1c:	b	16f7c <__assert_fail@plt+0x5b98>
   16b20:	mvn	lr, #0
   16b24:	mov	r9, #0
   16b28:	b	166a0 <__assert_fail@plt+0x52bc>
   16b2c:	ldr	r0, [sp, #24]
   16b30:	cmp	r0, #0
   16b34:	beq	16bec <__assert_fail@plt+0x5808>
   16b38:	add	r0, r7, #2
   16b3c:	cmp	r0, lr
   16b40:	bcs	16bec <__assert_fail@plt+0x5808>
   16b44:	add	r1, ip, r7
   16b48:	ldrb	r1, [r1, #1]
   16b4c:	cmp	r1, #63	; 0x3f
   16b50:	bne	16bec <__assert_fail@plt+0x5808>
   16b54:	ldrb	r5, [ip, r0]
   16b58:	sub	r1, r5, #33	; 0x21
   16b5c:	cmp	r1, #29
   16b60:	bhi	16bec <__assert_fail@plt+0x5808>
   16b64:	movw	r3, #20929	; 0x51c1
   16b68:	mov	r2, #1
   16b6c:	movt	r3, #14336	; 0x3800
   16b70:	tst	r3, r2, lsl r1
   16b74:	beq	16bec <__assert_fail@plt+0x5808>
   16b78:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16b7c:	tst	r1, #1
   16b80:	bne	17154 <__assert_fail@plt+0x5d70>
   16b84:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16b88:	mov	r7, r0
   16b8c:	cmp	r8, r1
   16b90:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16b94:	movcc	r1, #63	; 0x3f
   16b98:	strbcc	r1, [r2, r8]
   16b9c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16ba0:	add	r1, r8, #1
   16ba4:	cmp	r1, r2
   16ba8:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16bac:	movcc	r2, #34	; 0x22
   16bb0:	strbcc	r2, [r3, r1]
   16bb4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16bb8:	add	r1, r8, #2
   16bbc:	cmp	r1, r2
   16bc0:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16bc4:	movcc	r2, #34	; 0x22
   16bc8:	strbcc	r2, [r3, r1]
   16bcc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16bd0:	add	r1, r8, #3
   16bd4:	add	r8, r8, #4
   16bd8:	cmp	r1, r2
   16bdc:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16be0:	movcc	r2, #63	; 0x3f
   16be4:	strbcc	r2, [r3, r1]
   16be8:	b	16bf0 <__assert_fail@plt+0x580c>
   16bec:	mov	r5, #63	; 0x3f
   16bf0:	mov	sl, #0
   16bf4:	b	166a0 <__assert_fail@plt+0x52bc>
   16bf8:	str	r0, [sp, #40]	; 0x28
   16bfc:	add	r0, r2, r7
   16c00:	str	r6, [sp, #76]	; 0x4c
   16c04:	add	r1, r7, #1
   16c08:	ldr	lr, [sp, #80]	; 0x50
   16c0c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16c10:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16c14:	mov	r3, #0
   16c18:	str	r0, [sp, #36]	; 0x24
   16c1c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16c20:	b	16cb4 <__assert_fail@plt+0x58d0>
   16c24:	str	r0, [sp, #76]	; 0x4c
   16c28:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16c2c:	cmp	r9, #0
   16c30:	movwne	r9, #1
   16c34:	mvn	r7, r0
   16c38:	orr	r7, r7, r9
   16c3c:	tst	r7, #1
   16c40:	bne	16c90 <__assert_fail@plt+0x58ac>
   16c44:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16c48:	cmp	r8, r6
   16c4c:	bcs	16c64 <__assert_fail@plt+0x5880>
   16c50:	ldr	r7, [fp, #-56]	; 0xffffffc8
   16c54:	mov	r2, r4
   16c58:	mov	r4, #39	; 0x27
   16c5c:	strb	r4, [r7, r8]
   16c60:	mov	r4, r2
   16c64:	add	r7, r8, #1
   16c68:	cmp	r7, r6
   16c6c:	bcs	16c84 <__assert_fail@plt+0x58a0>
   16c70:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16c74:	mov	r2, r4
   16c78:	mov	r4, #39	; 0x27
   16c7c:	strb	r4, [r0, r7]
   16c80:	mov	r4, r2
   16c84:	add	r8, r8, #2
   16c88:	mov	r0, #0
   16c8c:	b	16c98 <__assert_fail@plt+0x58b4>
   16c90:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16c94:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16c98:	cmp	r8, r6
   16c9c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   16ca0:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16ca4:	strbcc	r5, [r2, r8]
   16ca8:	add	r8, r8, #1
   16cac:	ldrb	r5, [ip, r1]
   16cb0:	add	r1, r1, #1
   16cb4:	ldr	r2, [sp, #40]	; 0x28
   16cb8:	tst	r2, #1
   16cbc:	beq	16cf8 <__assert_fail@plt+0x5914>
   16cc0:	ldr	r2, [sp, #76]	; 0x4c
   16cc4:	str	r0, [fp, #-48]	; 0xffffffd0
   16cc8:	tst	r2, #1
   16ccc:	beq	16cf0 <__assert_fail@plt+0x590c>
   16cd0:	cmp	r8, r6
   16cd4:	bcs	16cec <__assert_fail@plt+0x5908>
   16cd8:	ldr	r6, [fp, #-56]	; 0xffffffc8
   16cdc:	mov	r2, r4
   16ce0:	mov	r4, #92	; 0x5c
   16ce4:	strb	r4, [r6, r8]
   16ce8:	mov	r4, r2
   16cec:	add	r8, r8, #1
   16cf0:	mov	r0, #0
   16cf4:	b	16dec <__assert_fail@plt+0x5a08>
   16cf8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   16cfc:	tst	r2, #1
   16d00:	bne	1704c <__assert_fail@plt+0x5c68>
   16d04:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16d08:	cmp	r7, #2
   16d0c:	movwne	r3, #1
   16d10:	orr	r3, r3, r0
   16d14:	tst	r3, #1
   16d18:	bne	16d74 <__assert_fail@plt+0x5990>
   16d1c:	cmp	r8, r6
   16d20:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16d24:	movcc	r3, #39	; 0x27
   16d28:	strbcc	r3, [r2, r8]
   16d2c:	add	r3, r8, #1
   16d30:	cmp	r3, r6
   16d34:	bcs	16d4c <__assert_fail@plt+0x5968>
   16d38:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16d3c:	mov	r7, r4
   16d40:	mov	r4, #36	; 0x24
   16d44:	strb	r4, [r2, r3]
   16d48:	mov	r4, r7
   16d4c:	add	r3, r8, #2
   16d50:	cmp	r3, r6
   16d54:	bcs	16d6c <__assert_fail@plt+0x5988>
   16d58:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16d5c:	mov	r7, r4
   16d60:	mov	r4, #39	; 0x27
   16d64:	strb	r4, [r2, r3]
   16d68:	mov	r4, r7
   16d6c:	add	r8, r8, #3
   16d70:	mov	r0, #1
   16d74:	cmp	r8, r6
   16d78:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16d7c:	movcc	r3, #92	; 0x5c
   16d80:	strbcc	r3, [r2, r8]
   16d84:	add	r3, r8, #1
   16d88:	cmp	r3, r6
   16d8c:	bcs	16dac <__assert_fail@plt+0x59c8>
   16d90:	mov	r2, r4
   16d94:	and	r7, r5, #192	; 0xc0
   16d98:	mov	r4, #48	; 0x30
   16d9c:	orr	r7, r4, r7, lsr #6
   16da0:	mov	r4, r2
   16da4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16da8:	strb	r7, [r2, r3]
   16dac:	add	r3, r8, #2
   16db0:	cmp	r3, r6
   16db4:	bcs	16dd4 <__assert_fail@plt+0x59f0>
   16db8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16dbc:	mov	r6, r4
   16dc0:	lsr	r7, r5, #3
   16dc4:	mov	r4, #6
   16dc8:	bfi	r7, r4, #3, #29
   16dcc:	mov	r4, r6
   16dd0:	strb	r7, [r2, r3]
   16dd4:	str	r0, [fp, #-48]	; 0xffffffd0
   16dd8:	ldr	r0, [sp, #76]	; 0x4c
   16ddc:	mov	r3, #6
   16de0:	add	r8, r8, #3
   16de4:	bfi	r5, r3, #3, #29
   16de8:	mov	r3, #1
   16dec:	ldr	r2, [sp, #36]	; 0x24
   16df0:	and	r9, r3, #1
   16df4:	cmp	r2, r1
   16df8:	bhi	16c24 <__assert_fail@plt+0x5840>
   16dfc:	cmp	r9, #0
   16e00:	sub	r7, r1, #1
   16e04:	mov	r0, r5
   16e08:	movwne	r9, #1
   16e0c:	cmp	r9, #0
   16e10:	bne	16e54 <__assert_fail@plt+0x5a70>
   16e14:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16e18:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16e1c:	tst	r5, #1
   16e20:	beq	169c4 <__assert_fail@plt+0x55e0>
   16e24:	cmp	r8, r6
   16e28:	mov	r5, #0
   16e2c:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16e30:	movcc	r1, #39	; 0x27
   16e34:	strbcc	r1, [r2, r8]
   16e38:	add	r1, r8, #1
   16e3c:	add	r8, r8, #2
   16e40:	cmp	r1, r6
   16e44:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16e48:	movcc	r2, #39	; 0x27
   16e4c:	strbcc	r2, [r3, r1]
   16e50:	b	169c4 <__assert_fail@plt+0x55e0>
   16e54:	ldr	r6, [fp, #-52]	; 0xffffffcc
   16e58:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16e5c:	b	169c4 <__assert_fail@plt+0x55e0>
   16e60:	cmp	r8, r1
   16e64:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16e68:	movcc	r0, #39	; 0x27
   16e6c:	strbcc	r0, [r2, r8]
   16e70:	add	r0, r8, #1
   16e74:	cmp	r0, r1
   16e78:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16e7c:	movcc	r2, #36	; 0x24
   16e80:	strbcc	r2, [r3, r0]
   16e84:	add	r0, r8, #2
   16e88:	cmp	r0, r1
   16e8c:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16e90:	movcc	r2, #39	; 0x27
   16e94:	strbcc	r2, [r3, r0]
   16e98:	add	r0, r8, #3
   16e9c:	mov	r3, #1
   16ea0:	cmp	r0, r1
   16ea4:	add	r8, r0, #1
   16ea8:	str	r3, [fp, #-48]	; 0xffffffd0
   16eac:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16eb0:	movcc	r1, #92	; 0x5c
   16eb4:	strbcc	r1, [r2, r0]
   16eb8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16ebc:	cmp	r1, #2
   16ec0:	beq	16f24 <__assert_fail@plt+0x5b40>
   16ec4:	add	r1, r7, #1
   16ec8:	mov	sl, #0
   16ecc:	mov	r9, #1
   16ed0:	mov	r5, #48	; 0x30
   16ed4:	cmp	r1, lr
   16ed8:	bcs	166a0 <__assert_fail@plt+0x52bc>
   16edc:	ldrb	r1, [ip, r1]
   16ee0:	sub	r1, r1, #48	; 0x30
   16ee4:	uxtb	r1, r1
   16ee8:	cmp	r1, #9
   16eec:	bhi	166a0 <__assert_fail@plt+0x52bc>
   16ef0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16ef4:	cmp	r8, r1
   16ef8:	ldrcc	r2, [fp, #-56]	; 0xffffffc8
   16efc:	movcc	r1, #48	; 0x30
   16f00:	strbcc	r1, [r2, r8]
   16f04:	ldr	r2, [fp, #-52]	; 0xffffffcc
   16f08:	add	r1, r0, #2
   16f0c:	add	r8, r0, #3
   16f10:	cmp	r1, r2
   16f14:	ldrcc	r3, [fp, #-56]	; 0xffffffc8
   16f18:	movcc	r2, #48	; 0x30
   16f1c:	strbcc	r2, [r3, r1]
   16f20:	b	166a0 <__assert_fail@plt+0x52bc>
   16f24:	mov	r0, #48	; 0x30
   16f28:	mov	r9, #1
   16f2c:	mov	sl, #0
   16f30:	b	16938 <__assert_fail@plt+0x5554>
   16f34:	mov	sl, #0
   16f38:	b	16f74 <__assert_fail@plt+0x5b90>
   16f3c:	mov	sl, #0
   16f40:	cmp	lr, r6
   16f44:	bls	16f74 <__assert_fail@plt+0x5b90>
   16f48:	ldr	ip, [fp, #-84]	; 0xffffffac
   16f4c:	ldr	r6, [sp, #40]	; 0x28
   16f50:	ldr	r0, [sp, #36]	; 0x24
   16f54:	ldrb	r0, [r0, r6]
   16f58:	cmp	r0, #0
   16f5c:	beq	16f7c <__assert_fail@plt+0x5b98>
   16f60:	add	r6, r6, #1
   16f64:	add	r0, r7, r6
   16f68:	cmp	r0, lr
   16f6c:	bcc	16f50 <__assert_fail@plt+0x5b6c>
   16f70:	b	16f7c <__assert_fail@plt+0x5b98>
   16f74:	ldr	ip, [fp, #-84]	; 0xffffffac
   16f78:	ldr	r6, [sp, #40]	; 0x28
   16f7c:	mov	r1, r6
   16f80:	ldr	r4, [sp, #20]
   16f84:	ldr	r6, [sp, #76]	; 0x4c
   16f88:	b	1687c <__assert_fail@plt+0x5498>
   16f8c:	mov	lr, r7
   16f90:	b	16f98 <__assert_fail@plt+0x5bb4>
   16f94:	mvn	lr, #0
   16f98:	ldr	r9, [fp, #-64]	; 0xffffffc0
   16f9c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   16fa0:	eor	r0, r9, #2
   16fa4:	orr	r0, r0, r8
   16fa8:	clz	r0, r0
   16fac:	lsr	r0, r0, #5
   16fb0:	tst	r1, r0
   16fb4:	bne	170b0 <__assert_fail@plt+0x5ccc>
   16fb8:	mov	r0, r1
   16fbc:	ldr	r1, [fp, #-80]	; 0xffffffb0
   16fc0:	cmp	r9, #2
   16fc4:	movwne	r1, #1
   16fc8:	orr	r0, r0, r1
   16fcc:	tst	r0, #1
   16fd0:	bne	170f0 <__assert_fail@plt+0x5d0c>
   16fd4:	ldr	r0, [sp, #52]	; 0x34
   16fd8:	ldr	r1, [sp, #68]	; 0x44
   16fdc:	str	lr, [sp, #80]	; 0x50
   16fe0:	eor	r0, r0, #1
   16fe4:	tst	r0, #1
   16fe8:	bne	170f0 <__assert_fail@plt+0x5d0c>
   16fec:	tst	r4, #1
   16ff0:	bne	170b8 <__assert_fail@plt+0x5cd4>
   16ff4:	mov	r7, #0
   16ff8:	cmp	r1, #0
   16ffc:	beq	170e8 <__assert_fail@plt+0x5d04>
   17000:	ldr	r0, [sp, #84]	; 0x54
   17004:	mov	r3, #0
   17008:	cmp	r6, #0
   1700c:	mov	r2, #0
   17010:	mov	r4, r1
   17014:	str	r3, [fp, #-72]	; 0xffffffb8
   17018:	beq	16154 <__assert_fail@plt+0x4d70>
   1701c:	b	170f0 <__assert_fail@plt+0x5d0c>
   17020:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17024:	b	1704c <__assert_fail@plt+0x5c68>
   17028:	ldr	ip, [fp, #-84]	; 0xffffffac
   1702c:	mov	r2, #1
   17030:	mov	lr, r4
   17034:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17038:	ldr	r6, [fp, #-52]	; 0xffffffcc
   1703c:	b	17050 <__assert_fail@plt+0x5c6c>
   17040:	ldr	ip, [fp, #-84]	; 0xffffffac
   17044:	mov	r7, #2
   17048:	ldr	r6, [fp, #-52]	; 0xffffffcc
   1704c:	ldr	r2, [sp, #84]	; 0x54
   17050:	mov	r0, #0
   17054:	ldr	r1, [fp, #12]
   17058:	tst	r2, #1
   1705c:	mov	r2, r7
   17060:	mov	r3, lr
   17064:	str	r0, [sp, #8]
   17068:	ldr	r0, [sp, #64]	; 0x40
   1706c:	movwne	r2, #4
   17070:	cmp	r7, #2
   17074:	movne	r2, r7
   17078:	str	r2, [sp]
   1707c:	mov	r2, ip
   17080:	bic	r1, r1, #2
   17084:	str	r0, [sp, #12]
   17088:	ldr	r0, [sp, #72]	; 0x48
   1708c:	str	r1, [sp, #4]
   17090:	mov	r1, r6
   17094:	str	r0, [sp, #16]
   17098:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1709c:	bl	160dc <__assert_fail@plt+0x4cf8>
   170a0:	mov	r8, r0
   170a4:	mov	r0, r8
   170a8:	sub	sp, fp, #28
   170ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170b0:	mov	r7, #2
   170b4:	b	1704c <__assert_fail@plt+0x5c68>
   170b8:	mov	r0, #5
   170bc:	ldr	r2, [fp, #-84]	; 0xffffffac
   170c0:	ldr	r3, [sp, #80]	; 0x50
   170c4:	str	r0, [sp]
   170c8:	ldr	r0, [fp, #12]
   170cc:	str	r0, [sp, #4]
   170d0:	ldr	r0, [fp, #16]
   170d4:	str	r0, [sp, #8]
   170d8:	ldr	r0, [sp, #64]	; 0x40
   170dc:	str	r0, [sp, #12]
   170e0:	ldr	r0, [sp, #72]	; 0x48
   170e4:	b	17094 <__assert_fail@plt+0x5cb0>
   170e8:	mov	r0, #0
   170ec:	str	r0, [fp, #-72]	; 0xffffffb8
   170f0:	ldr	r1, [sp, #92]	; 0x5c
   170f4:	cmp	r1, #0
   170f8:	beq	17138 <__assert_fail@plt+0x5d54>
   170fc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17100:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17104:	tst	r0, #1
   17108:	bne	1713c <__assert_fail@plt+0x5d58>
   1710c:	ldrb	r0, [r1]
   17110:	cmp	r0, #0
   17114:	beq	1713c <__assert_fail@plt+0x5d58>
   17118:	add	r1, r1, #1
   1711c:	cmp	r8, r6
   17120:	strbcc	r0, [r2, r8]
   17124:	add	r8, r8, #1
   17128:	ldrb	r0, [r1], #1
   1712c:	cmp	r0, #0
   17130:	bne	1711c <__assert_fail@plt+0x5d38>
   17134:	b	1713c <__assert_fail@plt+0x5d58>
   17138:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1713c:	cmp	r8, r6
   17140:	movcc	r0, #0
   17144:	strbcc	r0, [r2, r8]
   17148:	b	170a4 <__assert_fail@plt+0x5cc0>
   1714c:	mov	r2, #1
   17150:	b	17034 <__assert_fail@plt+0x5c50>
   17154:	mov	r7, #5
   17158:	b	17048 <__assert_fail@plt+0x5c64>
   1715c:	bl	113b4 <abort@plt>
   17160:	mov	r3, r2
   17164:	mov	r2, #0
   17168:	b	1716c <__assert_fail@plt+0x5d88>
   1716c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17170:	add	fp, sp, #28
   17174:	sub	sp, sp, #36	; 0x24
   17178:	movw	r8, #41400	; 0xa1b8
   1717c:	cmp	r3, #0
   17180:	mov	r4, r2
   17184:	str	r2, [sp, #24]
   17188:	mov	r5, r1
   1718c:	mov	r6, r0
   17190:	str	r0, [sp, #20]
   17194:	movt	r8, #2
   17198:	movne	r8, r3
   1719c:	bl	11294 <__errno_location@plt>
   171a0:	str	r0, [sp, #28]
   171a4:	cmp	r4, #0
   171a8:	add	sl, r8, #8
   171ac:	ldm	r8, {r3, r9}
   171b0:	ldr	r7, [r0]
   171b4:	ldr	r1, [r8, #40]	; 0x28
   171b8:	ldr	r2, [r8, #44]	; 0x2c
   171bc:	mov	r0, #0
   171c0:	orreq	r9, r9, #1
   171c4:	str	r7, [sp, #32]
   171c8:	mov	r7, r5
   171cc:	stm	sp, {r3, r9, sl}
   171d0:	str	r1, [sp, #12]
   171d4:	str	r2, [sp, #16]
   171d8:	mov	r1, #0
   171dc:	mov	r2, r6
   171e0:	mov	r3, r5
   171e4:	bl	160dc <__assert_fail@plt+0x4cf8>
   171e8:	add	r4, r0, #1
   171ec:	mov	r5, r0
   171f0:	mov	r0, r4
   171f4:	bl	17f60 <__assert_fail@plt+0x6b7c>
   171f8:	mov	r6, r0
   171fc:	ldr	r0, [r8]
   17200:	ldr	r2, [r8, #44]	; 0x2c
   17204:	ldr	r1, [r8, #40]	; 0x28
   17208:	mov	r3, r7
   1720c:	stm	sp, {r0, r9, sl}
   17210:	str	r2, [sp, #16]
   17214:	str	r1, [sp, #12]
   17218:	mov	r0, r6
   1721c:	mov	r1, r4
   17220:	ldr	r2, [sp, #20]
   17224:	bl	160dc <__assert_fail@plt+0x4cf8>
   17228:	ldr	r0, [sp, #24]
   1722c:	ldr	r1, [sp, #32]
   17230:	ldr	r2, [sp, #28]
   17234:	cmp	r0, #0
   17238:	str	r1, [r2]
   1723c:	strne	r5, [r0]
   17240:	mov	r0, r6
   17244:	sub	sp, fp, #28
   17248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1724c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17250:	add	fp, sp, #24
   17254:	movw	r5, #41260	; 0xa12c
   17258:	movw	r8, #41256	; 0xa128
   1725c:	movt	r5, #2
   17260:	movt	r8, #2
   17264:	ldr	r0, [r5]
   17268:	ldr	r4, [r8]
   1726c:	cmp	r0, #2
   17270:	blt	1729c <__assert_fail@plt+0x5eb8>
   17274:	add	r7, r4, #12
   17278:	mov	r6, #0
   1727c:	ldr	r0, [r7, r6, lsl #3]
   17280:	bl	18998 <__assert_fail@plt+0x75b4>
   17284:	ldr	r1, [r5]
   17288:	add	r2, r6, #2
   1728c:	add	r0, r6, #1
   17290:	mov	r6, r0
   17294:	cmp	r2, r1
   17298:	blt	1727c <__assert_fail@plt+0x5e98>
   1729c:	ldr	r0, [r4, #4]
   172a0:	movw	r7, #41448	; 0xa1e8
   172a4:	movt	r7, #2
   172a8:	cmp	r0, r7
   172ac:	beq	172c4 <__assert_fail@plt+0x5ee0>
   172b0:	bl	18998 <__assert_fail@plt+0x75b4>
   172b4:	movw	r0, #41264	; 0xa130
   172b8:	mov	r6, #256	; 0x100
   172bc:	movt	r0, #2
   172c0:	strd	r6, [r0]
   172c4:	movw	r6, #41264	; 0xa130
   172c8:	movt	r6, #2
   172cc:	cmp	r4, r6
   172d0:	beq	172e0 <__assert_fail@plt+0x5efc>
   172d4:	mov	r0, r4
   172d8:	bl	18998 <__assert_fail@plt+0x75b4>
   172dc:	str	r6, [r8]
   172e0:	mov	r0, #1
   172e4:	str	r0, [r5]
   172e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   172ec:	movw	r3, #41400	; 0xa1b8
   172f0:	mvn	r2, #0
   172f4:	movt	r3, #2
   172f8:	b	172fc <__assert_fail@plt+0x5f18>
   172fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17300:	add	fp, sp, #28
   17304:	sub	sp, sp, #44	; 0x2c
   17308:	mov	r7, r3
   1730c:	str	r2, [sp, #36]	; 0x24
   17310:	str	r1, [sp, #32]
   17314:	mov	r5, r0
   17318:	bl	11294 <__errno_location@plt>
   1731c:	cmp	r5, #0
   17320:	blt	1748c <__assert_fail@plt+0x60a8>
   17324:	cmn	r5, #-2147483647	; 0x80000001
   17328:	beq	1748c <__assert_fail@plt+0x60a8>
   1732c:	movw	r8, #41260	; 0xa12c
   17330:	movw	r4, #41256	; 0xa128
   17334:	str	r0, [sp, #28]
   17338:	ldr	r0, [r0]
   1733c:	movt	r8, #2
   17340:	movt	r4, #2
   17344:	ldr	r1, [r8]
   17348:	ldr	r6, [r4]
   1734c:	str	r0, [sp, #24]
   17350:	cmp	r1, r5
   17354:	ble	17360 <__assert_fail@plt+0x5f7c>
   17358:	mov	sl, r6
   1735c:	b	173c8 <__assert_fail@plt+0x5fe4>
   17360:	movw	r9, #41264	; 0xa130
   17364:	mov	r0, #8
   17368:	add	r2, r5, #1
   1736c:	str	r1, [fp, #-32]	; 0xffffffe0
   17370:	mvn	r3, #-2147483648	; 0x80000000
   17374:	movt	r9, #2
   17378:	str	r0, [sp]
   1737c:	sub	r2, r2, r1
   17380:	sub	r1, fp, #32
   17384:	subs	r0, r6, r9
   17388:	movne	r0, r6
   1738c:	bl	18090 <__assert_fail@plt+0x6cac>
   17390:	cmp	r6, r9
   17394:	mov	sl, r0
   17398:	str	r0, [r4]
   1739c:	ldrdeq	r0, [r9]
   173a0:	stmeq	sl, {r0, r1}
   173a4:	ldr	r1, [r8]
   173a8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   173ac:	add	r0, sl, r1, lsl #3
   173b0:	sub	r1, r2, r1
   173b4:	lsl	r2, r1, #3
   173b8:	mov	r1, #0
   173bc:	bl	112b8 <memset@plt>
   173c0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   173c4:	str	r0, [r8]
   173c8:	mov	r9, sl
   173cc:	ldr	r6, [r9, r5, lsl #3]!
   173d0:	ldr	r4, [r9, #4]!
   173d4:	ldm	r7, {r0, r1}
   173d8:	ldr	r2, [r7, #40]	; 0x28
   173dc:	ldr	r3, [r7, #44]	; 0x2c
   173e0:	orr	r8, r1, #1
   173e4:	add	r1, r7, #8
   173e8:	stm	sp, {r0, r8}
   173ec:	add	r0, sp, #8
   173f0:	str	r1, [sp, #20]
   173f4:	stm	r0, {r1, r2, r3}
   173f8:	mov	r0, r4
   173fc:	mov	r1, r6
   17400:	ldr	r2, [sp, #32]
   17404:	ldr	r3, [sp, #36]	; 0x24
   17408:	bl	160dc <__assert_fail@plt+0x4cf8>
   1740c:	cmp	r6, r0
   17410:	bhi	17474 <__assert_fail@plt+0x6090>
   17414:	add	r6, r0, #1
   17418:	movw	r0, #41448	; 0xa1e8
   1741c:	movt	r0, #2
   17420:	str	r6, [sl, r5, lsl #3]
   17424:	cmp	r4, r0
   17428:	beq	17434 <__assert_fail@plt+0x6050>
   1742c:	mov	r0, r4
   17430:	bl	18998 <__assert_fail@plt+0x75b4>
   17434:	mov	r0, r6
   17438:	bl	17f60 <__assert_fail@plt+0x6b7c>
   1743c:	str	r0, [r9]
   17440:	mov	r4, r0
   17444:	add	r3, sp, #8
   17448:	ldr	r0, [r7]
   1744c:	ldr	r1, [r7, #40]	; 0x28
   17450:	ldr	r2, [r7, #44]	; 0x2c
   17454:	stm	sp, {r0, r8}
   17458:	ldr	r0, [sp, #20]
   1745c:	stm	r3, {r0, r1, r2}
   17460:	mov	r0, r4
   17464:	mov	r1, r6
   17468:	ldr	r2, [sp, #32]
   1746c:	ldr	r3, [sp, #36]	; 0x24
   17470:	bl	160dc <__assert_fail@plt+0x4cf8>
   17474:	ldr	r0, [sp, #28]
   17478:	ldr	r1, [sp, #24]
   1747c:	str	r1, [r0]
   17480:	mov	r0, r4
   17484:	sub	sp, fp, #28
   17488:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1748c:	bl	113b4 <abort@plt>
   17490:	movw	r3, #41400	; 0xa1b8
   17494:	movt	r3, #2
   17498:	b	172fc <__assert_fail@plt+0x5f18>
   1749c:	movw	r3, #41400	; 0xa1b8
   174a0:	mov	r1, r0
   174a4:	mov	r0, #0
   174a8:	mvn	r2, #0
   174ac:	movt	r3, #2
   174b0:	b	172fc <__assert_fail@plt+0x5f18>
   174b4:	movw	r3, #41400	; 0xa1b8
   174b8:	mov	r2, r1
   174bc:	mov	r1, r0
   174c0:	mov	r0, #0
   174c4:	movt	r3, #2
   174c8:	b	172fc <__assert_fail@plt+0x5f18>
   174cc:	push	{fp, lr}
   174d0:	mov	fp, sp
   174d4:	sub	sp, sp, #48	; 0x30
   174d8:	vmov.i32	q8, #0	; 0x00000000
   174dc:	mov	ip, #32
   174e0:	mov	r3, sp
   174e4:	mov	lr, r2
   174e8:	cmp	r1, #10
   174ec:	add	r2, r3, #16
   174f0:	vst1.64	{d16-d17}, [r3], ip
   174f4:	vst1.64	{d16-d17}, [r3]
   174f8:	vst1.64	{d16-d17}, [r2]
   174fc:	beq	1751c <__assert_fail@plt+0x6138>
   17500:	str	r1, [sp]
   17504:	mov	r3, sp
   17508:	mov	r1, lr
   1750c:	mvn	r2, #0
   17510:	bl	172fc <__assert_fail@plt+0x5f18>
   17514:	mov	sp, fp
   17518:	pop	{fp, pc}
   1751c:	bl	113b4 <abort@plt>
   17520:	push	{r4, sl, fp, lr}
   17524:	add	fp, sp, #8
   17528:	sub	sp, sp, #48	; 0x30
   1752c:	mov	ip, r3
   17530:	mov	r3, sp
   17534:	vmov.i32	q8, #0	; 0x00000000
   17538:	mov	lr, #32
   1753c:	cmp	r1, #10
   17540:	add	r4, r3, #16
   17544:	vst1.64	{d16-d17}, [r3], lr
   17548:	vst1.64	{d16-d17}, [r3]
   1754c:	vst1.64	{d16-d17}, [r4]
   17550:	beq	17570 <__assert_fail@plt+0x618c>
   17554:	str	r1, [sp]
   17558:	mov	r1, r2
   1755c:	mov	r3, sp
   17560:	mov	r2, ip
   17564:	bl	172fc <__assert_fail@plt+0x5f18>
   17568:	sub	sp, fp, #8
   1756c:	pop	{r4, sl, fp, pc}
   17570:	bl	113b4 <abort@plt>
   17574:	mov	r2, r1
   17578:	mov	r1, r0
   1757c:	mov	r0, #0
   17580:	b	174cc <__assert_fail@plt+0x60e8>
   17584:	mov	r3, r2
   17588:	mov	r2, r1
   1758c:	mov	r1, r0
   17590:	mov	r0, #0
   17594:	b	17520 <__assert_fail@plt+0x613c>
   17598:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1759c:	add	fp, sp, #24
   175a0:	sub	sp, sp, #48	; 0x30
   175a4:	movw	r8, #41400	; 0xa1b8
   175a8:	mov	lr, r0
   175ac:	mov	r3, sp
   175b0:	mov	ip, r1
   175b4:	movt	r8, #2
   175b8:	mov	r1, r3
   175bc:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   175c0:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   175c4:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   175c8:	stm	r1, {r0, r4, r5, r6, r7, r9}
   175cc:	ubfx	r0, r2, #5, #3
   175d0:	and	r2, r2, #31
   175d4:	mov	r4, #1
   175d8:	add	r0, r3, r0, lsl #2
   175dc:	ldr	r1, [r0, #8]
   175e0:	bic	r4, r4, r1, lsr r2
   175e4:	eor	r1, r1, r4, lsl r2
   175e8:	mov	r2, ip
   175ec:	str	r1, [r0, #8]
   175f0:	mov	r0, #0
   175f4:	mov	r1, lr
   175f8:	bl	172fc <__assert_fail@plt+0x5f18>
   175fc:	sub	sp, fp, #24
   17600:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17604:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17608:	add	fp, sp, #24
   1760c:	sub	sp, sp, #48	; 0x30
   17610:	movw	lr, #41400	; 0xa1b8
   17614:	mov	ip, r0
   17618:	mov	r3, sp
   1761c:	movt	lr, #2
   17620:	mov	r2, r3
   17624:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   17628:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   1762c:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   17630:	stm	r2, {r0, r4, r5, r6, r7, r8}
   17634:	ubfx	r0, r1, #5, #3
   17638:	and	r1, r1, #31
   1763c:	mov	r7, #1
   17640:	add	r0, r3, r0, lsl #2
   17644:	ldr	r2, [r0, #8]
   17648:	bic	r7, r7, r2, lsr r1
   1764c:	eor	r1, r2, r7, lsl r1
   17650:	mvn	r2, #0
   17654:	str	r1, [r0, #8]
   17658:	mov	r0, #0
   1765c:	mov	r1, ip
   17660:	bl	172fc <__assert_fail@plt+0x5f18>
   17664:	sub	sp, fp, #24
   17668:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1766c:	push	{r4, r5, r6, r7, fp, lr}
   17670:	add	fp, sp, #16
   17674:	sub	sp, sp, #48	; 0x30
   17678:	movw	lr, #41400	; 0xa1b8
   1767c:	mov	ip, r0
   17680:	mov	r3, sp
   17684:	movt	lr, #2
   17688:	mov	r2, r3
   1768c:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   17690:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   17694:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   17698:	stm	r2, {r0, r1, r4, r5, r6, r7}
   1769c:	mov	r1, ip
   176a0:	mvn	r2, #0
   176a4:	ldr	r0, [sp, #12]
   176a8:	orr	r0, r0, #67108864	; 0x4000000
   176ac:	str	r0, [sp, #12]
   176b0:	mov	r0, #0
   176b4:	bl	172fc <__assert_fail@plt+0x5f18>
   176b8:	sub	sp, fp, #16
   176bc:	pop	{r4, r5, r6, r7, fp, pc}
   176c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   176c4:	add	fp, sp, #24
   176c8:	sub	sp, sp, #48	; 0x30
   176cc:	movw	r8, #41400	; 0xa1b8
   176d0:	mov	ip, r1
   176d4:	mov	lr, r0
   176d8:	mov	r3, sp
   176dc:	movt	r8, #2
   176e0:	mov	r2, r3
   176e4:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   176e8:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   176ec:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   176f0:	stm	r2, {r0, r1, r4, r5, r6, r7}
   176f4:	mov	r1, lr
   176f8:	mov	r2, ip
   176fc:	ldr	r0, [sp, #12]
   17700:	orr	r0, r0, #67108864	; 0x4000000
   17704:	str	r0, [sp, #12]
   17708:	mov	r0, #0
   1770c:	bl	172fc <__assert_fail@plt+0x5f18>
   17710:	sub	sp, fp, #24
   17714:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17718:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1771c:	add	fp, sp, #24
   17720:	sub	sp, sp, #96	; 0x60
   17724:	mov	lr, sp
   17728:	vmov.i32	q8, #0	; 0x00000000
   1772c:	mov	ip, r2
   17730:	cmp	r1, #10
   17734:	add	r3, lr, #16
   17738:	mov	r2, lr
   1773c:	vst1.64	{d16-d17}, [r3]
   17740:	mov	r3, #28
   17744:	vst1.64	{d16-d17}, [r2], r3
   17748:	vst1.32	{d16-d17}, [r2]
   1774c:	beq	1778c <__assert_fail@plt+0x63a8>
   17750:	str	r1, [sp, #48]	; 0x30
   17754:	add	r3, sp, #48	; 0x30
   17758:	ldm	lr!, {r2, r4, r5, r6, r7}
   1775c:	add	r1, r3, #4
   17760:	stmia	r1!, {r2, r4, r5, r6, r7}
   17764:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   17768:	stm	r1, {r2, r4, r5, r6, r7, r8}
   1776c:	mvn	r2, #0
   17770:	ldr	r1, [sp, #60]	; 0x3c
   17774:	orr	r1, r1, #67108864	; 0x4000000
   17778:	str	r1, [sp, #60]	; 0x3c
   1777c:	mov	r1, ip
   17780:	bl	172fc <__assert_fail@plt+0x5f18>
   17784:	sub	sp, fp, #24
   17788:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1778c:	bl	113b4 <abort@plt>
   17790:	push	{fp, lr}
   17794:	mov	fp, sp
   17798:	sub	sp, sp, #8
   1779c:	mvn	ip, #0
   177a0:	str	ip, [sp]
   177a4:	bl	177b0 <__assert_fail@plt+0x63cc>
   177a8:	mov	sp, fp
   177ac:	pop	{fp, pc}
   177b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   177b4:	add	fp, sp, #24
   177b8:	sub	sp, sp, #48	; 0x30
   177bc:	movw	ip, #41400	; 0xa1b8
   177c0:	mov	lr, r3
   177c4:	mov	r3, sp
   177c8:	cmp	r1, #0
   177cc:	movt	ip, #2
   177d0:	cmpne	r2, #0
   177d4:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   177d8:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   177dc:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   177e0:	stm	r3, {r4, r5, r6, r7, r8, r9}
   177e4:	mov	r3, #10
   177e8:	str	r3, [sp]
   177ec:	bne	177f4 <__assert_fail@plt+0x6410>
   177f0:	bl	113b4 <abort@plt>
   177f4:	ldr	ip, [fp, #8]
   177f8:	str	r2, [sp, #44]	; 0x2c
   177fc:	str	r1, [sp, #40]	; 0x28
   17800:	mov	r3, sp
   17804:	mov	r1, lr
   17808:	mov	r2, ip
   1780c:	bl	172fc <__assert_fail@plt+0x5f18>
   17810:	sub	sp, fp, #24
   17814:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17818:	push	{fp, lr}
   1781c:	mov	fp, sp
   17820:	sub	sp, sp, #8
   17824:	mov	r3, r2
   17828:	mov	r2, r1
   1782c:	mov	r1, r0
   17830:	mvn	r0, #0
   17834:	str	r0, [sp]
   17838:	mov	r0, #0
   1783c:	bl	177b0 <__assert_fail@plt+0x63cc>
   17840:	mov	sp, fp
   17844:	pop	{fp, pc}
   17848:	push	{fp, lr}
   1784c:	mov	fp, sp
   17850:	sub	sp, sp, #8
   17854:	mov	ip, r2
   17858:	mov	r2, r1
   1785c:	mov	r1, r0
   17860:	str	r3, [sp]
   17864:	mov	r0, #0
   17868:	mov	r3, ip
   1786c:	bl	177b0 <__assert_fail@plt+0x63cc>
   17870:	mov	sp, fp
   17874:	pop	{fp, pc}
   17878:	movw	r3, #41272	; 0xa138
   1787c:	movt	r3, #2
   17880:	b	172fc <__assert_fail@plt+0x5f18>
   17884:	movw	r3, #41272	; 0xa138
   17888:	mov	r2, r1
   1788c:	mov	r1, r0
   17890:	mov	r0, #0
   17894:	movt	r3, #2
   17898:	b	172fc <__assert_fail@plt+0x5f18>
   1789c:	movw	r3, #41272	; 0xa138
   178a0:	mvn	r2, #0
   178a4:	movt	r3, #2
   178a8:	b	172fc <__assert_fail@plt+0x5f18>
   178ac:	movw	r3, #41272	; 0xa138
   178b0:	mov	r1, r0
   178b4:	mov	r0, #0
   178b8:	mvn	r2, #0
   178bc:	movt	r3, #2
   178c0:	b	172fc <__assert_fail@plt+0x5f18>
   178c4:	push	{r4, r5, fp, lr}
   178c8:	add	fp, sp, #8
   178cc:	mov	r5, r0
   178d0:	mov	r4, r1
   178d4:	mov	r0, #0
   178d8:	mov	r2, #5
   178dc:	mov	r1, r5
   178e0:	bl	11180 <dcgettext@plt>
   178e4:	cmp	r0, r5
   178e8:	popne	{r4, r5, fp, pc}
   178ec:	bl	18a64 <__assert_fail@plt+0x7680>
   178f0:	ldrb	r1, [r0]
   178f4:	and	r1, r1, #223	; 0xdf
   178f8:	cmp	r1, #71	; 0x47
   178fc:	beq	17964 <__assert_fail@plt+0x6580>
   17900:	cmp	r1, #85	; 0x55
   17904:	bne	17988 <__assert_fail@plt+0x65a4>
   17908:	ldrb	r1, [r0, #1]
   1790c:	and	r1, r1, #223	; 0xdf
   17910:	cmp	r1, #84	; 0x54
   17914:	bne	17988 <__assert_fail@plt+0x65a4>
   17918:	ldrb	r1, [r0, #2]
   1791c:	and	r1, r1, #223	; 0xdf
   17920:	cmp	r1, #70	; 0x46
   17924:	ldrbeq	r1, [r0, #3]
   17928:	cmpeq	r1, #45	; 0x2d
   1792c:	bne	17988 <__assert_fail@plt+0x65a4>
   17930:	ldrb	r1, [r0, #4]
   17934:	cmp	r1, #56	; 0x38
   17938:	ldrbeq	r0, [r0, #5]
   1793c:	cmpeq	r0, #0
   17940:	bne	17988 <__assert_fail@plt+0x65a4>
   17944:	ldrb	r1, [r5]
   17948:	movw	r2, #39466	; 0x9a2a
   1794c:	movw	r0, #39470	; 0x9a2e
   17950:	movt	r2, #1
   17954:	movt	r0, #1
   17958:	cmp	r1, #96	; 0x60
   1795c:	moveq	r0, r2
   17960:	pop	{r4, r5, fp, pc}
   17964:	ldrb	r1, [r0, #1]
   17968:	and	r1, r1, #223	; 0xdf
   1796c:	cmp	r1, #66	; 0x42
   17970:	bne	17988 <__assert_fail@plt+0x65a4>
   17974:	ldrb	r1, [r0, #2]
   17978:	cmp	r1, #49	; 0x31
   1797c:	ldrbeq	r1, [r0, #3]
   17980:	cmpeq	r1, #56	; 0x38
   17984:	beq	179a4 <__assert_fail@plt+0x65c0>
   17988:	movw	r1, #39460	; 0x9a24
   1798c:	movw	r0, #39464	; 0x9a28
   17990:	cmp	r4, #9
   17994:	movt	r1, #1
   17998:	movt	r0, #1
   1799c:	moveq	r0, r1
   179a0:	pop	{r4, r5, fp, pc}
   179a4:	ldrb	r1, [r0, #4]
   179a8:	cmp	r1, #48	; 0x30
   179ac:	ldrbeq	r1, [r0, #5]
   179b0:	cmpeq	r1, #51	; 0x33
   179b4:	bne	17988 <__assert_fail@plt+0x65a4>
   179b8:	ldrb	r1, [r0, #6]
   179bc:	cmp	r1, #48	; 0x30
   179c0:	ldrbeq	r0, [r0, #7]
   179c4:	cmpeq	r0, #0
   179c8:	bne	17988 <__assert_fail@plt+0x65a4>
   179cc:	ldrb	r1, [r5]
   179d0:	movw	r2, #39474	; 0x9a32
   179d4:	movw	r0, #39478	; 0x9a36
   179d8:	movt	r2, #1
   179dc:	movt	r0, #1
   179e0:	b	17958 <__assert_fail@plt+0x6574>
   179e4:	push	{r4, sl, fp, lr}
   179e8:	add	fp, sp, #8
   179ec:	sub	sp, sp, #104	; 0x68
   179f0:	mov	r4, r0
   179f4:	movw	r0, #40303	; 0x9d6f
   179f8:	mov	r1, sp
   179fc:	movt	r0, #1
   17a00:	bl	18e4c <__assert_fail@plt+0x7a68>
   17a04:	mov	r1, r0
   17a08:	mov	r0, #0
   17a0c:	cmp	r1, #0
   17a10:	bne	17a28 <__assert_fail@plt+0x6644>
   17a14:	ldr	r0, [sp, #96]	; 0x60
   17a18:	ldr	r1, [sp, #100]	; 0x64
   17a1c:	ldm	sp, {r2, r3}
   17a20:	stm	r4, {r0, r1, r2, r3}
   17a24:	mov	r0, r4
   17a28:	sub	sp, fp, #8
   17a2c:	pop	{r4, sl, fp, pc}
   17a30:	push	{r4, r5, r6, r7, fp, lr}
   17a34:	add	fp, sp, #16
   17a38:	mov	r4, r0
   17a3c:	cmp	r0, #2
   17a40:	movhi	r0, r4
   17a44:	pophi	{r4, r5, r6, r7, fp, pc}
   17a48:	mov	r0, r4
   17a4c:	bl	18b38 <__assert_fail@plt+0x7754>
   17a50:	mov	r5, r0
   17a54:	bl	11294 <__errno_location@plt>
   17a58:	ldr	r7, [r0]
   17a5c:	mov	r6, r0
   17a60:	mov	r0, r4
   17a64:	bl	113c0 <close@plt>
   17a68:	mov	r0, r5
   17a6c:	str	r7, [r6]
   17a70:	pop	{r4, r5, r6, r7, fp, pc}
   17a74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17a78:	add	fp, sp, #24
   17a7c:	sub	sp, sp, #32
   17a80:	ldr	r6, [fp, #12]
   17a84:	ldr	r7, [fp, #8]
   17a88:	mov	r4, r2
   17a8c:	mov	r8, r0
   17a90:	cmp	r1, #0
   17a94:	beq	17abc <__assert_fail@plt+0x66d8>
   17a98:	movw	r2, #39568	; 0x9a90
   17a9c:	mov	r5, r1
   17aa0:	str	r3, [sp, #4]
   17aa4:	str	r4, [sp]
   17aa8:	mov	r0, r8
   17aac:	mov	r1, #1
   17ab0:	movt	r2, #1
   17ab4:	mov	r3, r5
   17ab8:	b	17ad4 <__assert_fail@plt+0x66f0>
   17abc:	movw	r2, #39580	; 0x9a9c
   17ac0:	str	r3, [sp]
   17ac4:	mov	r0, r8
   17ac8:	mov	r1, #1
   17acc:	mov	r3, r4
   17ad0:	movt	r2, #1
   17ad4:	bl	112dc <__fprintf_chk@plt>
   17ad8:	movw	r1, #39587	; 0x9aa3
   17adc:	mov	r0, #0
   17ae0:	mov	r2, #5
   17ae4:	movt	r1, #1
   17ae8:	bl	11180 <dcgettext@plt>
   17aec:	movw	r2, #40305	; 0x9d71
   17af0:	mov	r3, r0
   17af4:	movw	r0, #2022	; 0x7e6
   17af8:	mov	r1, #1
   17afc:	str	r0, [sp]
   17b00:	movt	r2, #1
   17b04:	mov	r0, r8
   17b08:	bl	112dc <__fprintf_chk@plt>
   17b0c:	movw	r4, #36777	; 0x8fa9
   17b10:	mov	r1, r8
   17b14:	movt	r4, #1
   17b18:	mov	r0, r4
   17b1c:	bl	11108 <fputs_unlocked@plt>
   17b20:	movw	r1, #39591	; 0x9aa7
   17b24:	mov	r0, #0
   17b28:	mov	r2, #5
   17b2c:	movt	r1, #1
   17b30:	bl	11180 <dcgettext@plt>
   17b34:	movw	r3, #39762	; 0x9b52
   17b38:	mov	r2, r0
   17b3c:	mov	r0, r8
   17b40:	mov	r1, #1
   17b44:	movt	r3, #1
   17b48:	bl	112dc <__fprintf_chk@plt>
   17b4c:	mov	r0, r4
   17b50:	mov	r1, r8
   17b54:	bl	11108 <fputs_unlocked@plt>
   17b58:	cmp	r6, #9
   17b5c:	bhi	17bc0 <__assert_fail@plt+0x67dc>
   17b60:	add	r0, pc, #0
   17b64:	ldr	pc, [r0, r6, lsl #2]
   17b68:	muleq	r1, r8, sp
   17b6c:	muleq	r1, r0, fp
   17b70:	andeq	r7, r1, ip, asr #23
   17b74:	strdeq	r7, [r1], -r4
   17b78:	andeq	r7, r1, ip, lsl ip
   17b7c:	andeq	r7, r1, r4, asr #24
   17b80:	andeq	r7, r1, ip, ror #24
   17b84:	andeq	r7, r1, r4, lsr #25
   17b88:	andeq	r7, r1, r4, asr #26
   17b8c:	andeq	r7, r1, ip, ror #25
   17b90:	movw	r1, #39796	; 0x9b74
   17b94:	mov	r0, #0
   17b98:	mov	r2, #5
   17b9c:	movt	r1, #1
   17ba0:	bl	11180 <dcgettext@plt>
   17ba4:	ldr	r3, [r7]
   17ba8:	mov	r2, r0
   17bac:	mov	r0, r8
   17bb0:	mov	r1, #1
   17bb4:	sub	sp, fp, #24
   17bb8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   17bbc:	b	112dc <__fprintf_chk@plt>
   17bc0:	movw	r1, #40115	; 0x9cb3
   17bc4:	movt	r1, #1
   17bc8:	b	17cf4 <__assert_fail@plt+0x6910>
   17bcc:	movw	r1, #39812	; 0x9b84
   17bd0:	mov	r0, #0
   17bd4:	mov	r2, #5
   17bd8:	movt	r1, #1
   17bdc:	bl	11180 <dcgettext@plt>
   17be0:	mov	r2, r0
   17be4:	ldr	r3, [r7]
   17be8:	ldr	r0, [r7, #4]
   17bec:	str	r0, [sp]
   17bf0:	b	17ce0 <__assert_fail@plt+0x68fc>
   17bf4:	movw	r1, #39835	; 0x9b9b
   17bf8:	mov	r0, #0
   17bfc:	mov	r2, #5
   17c00:	movt	r1, #1
   17c04:	bl	11180 <dcgettext@plt>
   17c08:	ldr	r3, [r7]
   17c0c:	mov	r2, r0
   17c10:	ldmib	r7, {r0, r1}
   17c14:	stm	sp, {r0, r1}
   17c18:	b	17ce0 <__assert_fail@plt+0x68fc>
   17c1c:	movw	r1, #39863	; 0x9bb7
   17c20:	mov	r0, #0
   17c24:	mov	r2, #5
   17c28:	movt	r1, #1
   17c2c:	bl	11180 <dcgettext@plt>
   17c30:	ldr	r3, [r7]
   17c34:	mov	r2, r0
   17c38:	ldmib	r7, {r0, r1, r7}
   17c3c:	stm	sp, {r0, r1, r7}
   17c40:	b	17ce0 <__assert_fail@plt+0x68fc>
   17c44:	movw	r1, #39895	; 0x9bd7
   17c48:	mov	r0, #0
   17c4c:	mov	r2, #5
   17c50:	movt	r1, #1
   17c54:	bl	11180 <dcgettext@plt>
   17c58:	ldr	r3, [r7]
   17c5c:	mov	r2, r0
   17c60:	ldmib	r7, {r0, r1, r6, r7}
   17c64:	stm	sp, {r0, r1, r6, r7}
   17c68:	b	17ce0 <__assert_fail@plt+0x68fc>
   17c6c:	movw	r1, #39931	; 0x9bfb
   17c70:	mov	r0, #0
   17c74:	mov	r2, #5
   17c78:	movt	r1, #1
   17c7c:	bl	11180 <dcgettext@plt>
   17c80:	ldr	r3, [r7]
   17c84:	mov	r2, r0
   17c88:	ldmib	r7, {r0, r1, r6}
   17c8c:	ldr	r5, [r7, #16]
   17c90:	ldr	r7, [r7, #20]
   17c94:	stm	sp, {r0, r1, r6}
   17c98:	str	r5, [sp, #12]
   17c9c:	str	r7, [sp, #16]
   17ca0:	b	17ce0 <__assert_fail@plt+0x68fc>
   17ca4:	movw	r1, #39971	; 0x9c23
   17ca8:	mov	r0, #0
   17cac:	mov	r2, #5
   17cb0:	movt	r1, #1
   17cb4:	bl	11180 <dcgettext@plt>
   17cb8:	ldr	r3, [r7]
   17cbc:	mov	r2, r0
   17cc0:	ldmib	r7, {r0, r1, r6}
   17cc4:	ldr	r5, [r7, #16]
   17cc8:	ldr	r4, [r7, #20]
   17ccc:	ldr	r7, [r7, #24]
   17cd0:	stm	sp, {r0, r1, r6}
   17cd4:	str	r5, [sp, #12]
   17cd8:	str	r4, [sp, #16]
   17cdc:	str	r7, [sp, #20]
   17ce0:	mov	r0, r8
   17ce4:	mov	r1, #1
   17ce8:	b	17d94 <__assert_fail@plt+0x69b0>
   17cec:	movw	r1, #40063	; 0x9c7f
   17cf0:	movt	r1, #1
   17cf4:	mov	r0, #0
   17cf8:	mov	r2, #5
   17cfc:	bl	11180 <dcgettext@plt>
   17d00:	mov	ip, r0
   17d04:	ldr	r3, [r7]
   17d08:	ldr	r0, [r7, #4]
   17d0c:	ldr	r1, [r7, #8]
   17d10:	ldr	r6, [r7, #12]
   17d14:	ldr	r5, [r7, #16]
   17d18:	ldr	r4, [r7, #20]
   17d1c:	ldr	r2, [r7, #24]
   17d20:	ldr	lr, [r7, #28]
   17d24:	ldr	r7, [r7, #32]
   17d28:	stm	sp, {r0, r1, r6}
   17d2c:	str	r5, [sp, #12]
   17d30:	str	r4, [sp, #16]
   17d34:	str	r2, [sp, #20]
   17d38:	str	lr, [sp, #24]
   17d3c:	str	r7, [sp, #28]
   17d40:	b	17d88 <__assert_fail@plt+0x69a4>
   17d44:	movw	r1, #40015	; 0x9c4f
   17d48:	mov	r0, #0
   17d4c:	mov	r2, #5
   17d50:	movt	r1, #1
   17d54:	bl	11180 <dcgettext@plt>
   17d58:	mov	ip, r0
   17d5c:	ldr	r3, [r7]
   17d60:	ldmib	r7, {r0, r1, r6}
   17d64:	ldr	r5, [r7, #16]
   17d68:	ldr	r4, [r7, #20]
   17d6c:	ldr	r2, [r7, #24]
   17d70:	ldr	r7, [r7, #28]
   17d74:	stm	sp, {r0, r1, r6}
   17d78:	str	r5, [sp, #12]
   17d7c:	str	r4, [sp, #16]
   17d80:	str	r2, [sp, #20]
   17d84:	str	r7, [sp, #24]
   17d88:	mov	r0, r8
   17d8c:	mov	r1, #1
   17d90:	mov	r2, ip
   17d94:	bl	112dc <__fprintf_chk@plt>
   17d98:	sub	sp, fp, #24
   17d9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17da0:	push	{r4, sl, fp, lr}
   17da4:	add	fp, sp, #8
   17da8:	sub	sp, sp, #8
   17dac:	ldr	ip, [fp, #8]
   17db0:	mov	lr, #0
   17db4:	ldr	r4, [ip, lr, lsl #2]
   17db8:	add	lr, lr, #1
   17dbc:	cmp	r4, #0
   17dc0:	bne	17db4 <__assert_fail@plt+0x69d0>
   17dc4:	sub	r4, lr, #1
   17dc8:	str	ip, [sp]
   17dcc:	str	r4, [sp, #4]
   17dd0:	bl	17a74 <__assert_fail@plt+0x6690>
   17dd4:	sub	sp, fp, #8
   17dd8:	pop	{r4, sl, fp, pc}
   17ddc:	push	{r4, r5, fp, lr}
   17de0:	add	fp, sp, #8
   17de4:	sub	sp, sp, #48	; 0x30
   17de8:	ldr	r4, [fp, #8]
   17dec:	mov	ip, #0
   17df0:	add	lr, sp, #8
   17df4:	ldr	r5, [r4]
   17df8:	cmp	r5, #0
   17dfc:	str	r5, [lr, ip, lsl #2]
   17e00:	beq	17e14 <__assert_fail@plt+0x6a30>
   17e04:	add	ip, ip, #1
   17e08:	add	r4, r4, #4
   17e0c:	cmp	ip, #10
   17e10:	bcc	17df4 <__assert_fail@plt+0x6a10>
   17e14:	str	lr, [sp]
   17e18:	str	ip, [sp, #4]
   17e1c:	bl	17a74 <__assert_fail@plt+0x6690>
   17e20:	sub	sp, fp, #8
   17e24:	pop	{r4, r5, fp, pc}
   17e28:	push	{fp, lr}
   17e2c:	mov	fp, sp
   17e30:	sub	sp, sp, #8
   17e34:	add	ip, fp, #8
   17e38:	str	ip, [sp, #4]
   17e3c:	str	ip, [sp]
   17e40:	bl	17ddc <__assert_fail@plt+0x69f8>
   17e44:	mov	sp, fp
   17e48:	pop	{fp, pc}
   17e4c:	push	{fp, lr}
   17e50:	mov	fp, sp
   17e54:	movw	r0, #41340	; 0xa17c
   17e58:	movt	r0, #2
   17e5c:	ldr	r1, [r0]
   17e60:	movw	r0, #36777	; 0x8fa9
   17e64:	movt	r0, #1
   17e68:	bl	11108 <fputs_unlocked@plt>
   17e6c:	movw	r1, #40175	; 0x9cef
   17e70:	mov	r0, #0
   17e74:	mov	r2, #5
   17e78:	movt	r1, #1
   17e7c:	bl	11180 <dcgettext@plt>
   17e80:	movw	r2, #40195	; 0x9d03
   17e84:	mov	r1, r0
   17e88:	mov	r0, #1
   17e8c:	movt	r2, #1
   17e90:	bl	112c4 <__printf_chk@plt>
   17e94:	movw	r1, #40217	; 0x9d19
   17e98:	mov	r0, #0
   17e9c:	mov	r2, #5
   17ea0:	movt	r1, #1
   17ea4:	bl	11180 <dcgettext@plt>
   17ea8:	movw	r2, #37513	; 0x9289
   17eac:	movw	r3, #37807	; 0x93af
   17eb0:	mov	r1, r0
   17eb4:	mov	r0, #1
   17eb8:	movt	r2, #1
   17ebc:	movt	r3, #1
   17ec0:	bl	112c4 <__printf_chk@plt>
   17ec4:	movw	r1, #40237	; 0x9d2d
   17ec8:	mov	r0, #0
   17ecc:	mov	r2, #5
   17ed0:	movt	r1, #1
   17ed4:	bl	11180 <dcgettext@plt>
   17ed8:	movw	r2, #40276	; 0x9d54
   17edc:	mov	r1, r0
   17ee0:	mov	r0, #1
   17ee4:	movt	r2, #1
   17ee8:	pop	{fp, lr}
   17eec:	b	112c4 <__printf_chk@plt>
   17ef0:	b	17ef4 <__assert_fail@plt+0x6b10>
   17ef4:	push	{r4, r5, r6, sl, fp, lr}
   17ef8:	add	fp, sp, #16
   17efc:	mov	r4, r2
   17f00:	mov	r5, r1
   17f04:	mov	r6, r0
   17f08:	bl	18afc <__assert_fail@plt+0x7718>
   17f0c:	cmp	r0, #0
   17f10:	popne	{r4, r5, r6, sl, fp, pc}
   17f14:	cmp	r6, #0
   17f18:	beq	17f2c <__assert_fail@plt+0x6b48>
   17f1c:	cmp	r5, #0
   17f20:	cmpne	r4, #0
   17f24:	bne	17f2c <__assert_fail@plt+0x6b48>
   17f28:	pop	{r4, r5, r6, sl, fp, pc}
   17f2c:	bl	18380 <__assert_fail@plt+0x6f9c>
   17f30:	push	{fp, lr}
   17f34:	mov	fp, sp
   17f38:	bl	18494 <__assert_fail@plt+0x70b0>
   17f3c:	cmp	r0, #0
   17f40:	popne	{fp, pc}
   17f44:	bl	18380 <__assert_fail@plt+0x6f9c>
   17f48:	push	{fp, lr}
   17f4c:	mov	fp, sp
   17f50:	bl	18494 <__assert_fail@plt+0x70b0>
   17f54:	cmp	r0, #0
   17f58:	popne	{fp, pc}
   17f5c:	bl	18380 <__assert_fail@plt+0x6f9c>
   17f60:	push	{fp, lr}
   17f64:	mov	fp, sp
   17f68:	bl	18494 <__assert_fail@plt+0x70b0>
   17f6c:	cmp	r0, #0
   17f70:	popne	{fp, pc}
   17f74:	bl	18380 <__assert_fail@plt+0x6f9c>
   17f78:	push	{r4, r5, fp, lr}
   17f7c:	add	fp, sp, #8
   17f80:	mov	r4, r1
   17f84:	mov	r5, r0
   17f88:	bl	184c4 <__assert_fail@plt+0x70e0>
   17f8c:	cmp	r0, #0
   17f90:	popne	{r4, r5, fp, pc}
   17f94:	cmp	r5, #0
   17f98:	beq	17fa8 <__assert_fail@plt+0x6bc4>
   17f9c:	cmp	r4, #0
   17fa0:	bne	17fa8 <__assert_fail@plt+0x6bc4>
   17fa4:	pop	{r4, r5, fp, pc}
   17fa8:	bl	18380 <__assert_fail@plt+0x6f9c>
   17fac:	push	{fp, lr}
   17fb0:	mov	fp, sp
   17fb4:	cmp	r1, #0
   17fb8:	orreq	r1, r1, #1
   17fbc:	bl	184c4 <__assert_fail@plt+0x70e0>
   17fc0:	cmp	r0, #0
   17fc4:	popne	{fp, pc}
   17fc8:	bl	18380 <__assert_fail@plt+0x6f9c>
   17fcc:	push	{fp, lr}
   17fd0:	mov	fp, sp
   17fd4:	clz	r3, r2
   17fd8:	lsr	ip, r3, #5
   17fdc:	clz	r3, r1
   17fe0:	lsr	r3, r3, #5
   17fe4:	orrs	r3, r3, ip
   17fe8:	movwne	r1, #1
   17fec:	movwne	r2, #1
   17ff0:	bl	18afc <__assert_fail@plt+0x7718>
   17ff4:	cmp	r0, #0
   17ff8:	popne	{fp, pc}
   17ffc:	bl	18380 <__assert_fail@plt+0x6f9c>
   18000:	push	{fp, lr}
   18004:	mov	fp, sp
   18008:	mov	r2, r1
   1800c:	mov	r1, r0
   18010:	mov	r0, #0
   18014:	bl	18afc <__assert_fail@plt+0x7718>
   18018:	cmp	r0, #0
   1801c:	popne	{fp, pc}
   18020:	bl	18380 <__assert_fail@plt+0x6f9c>
   18024:	mov	r2, r1
   18028:	mov	r1, r0
   1802c:	mov	r0, #0
   18030:	b	17fcc <__assert_fail@plt+0x6be8>
   18034:	mov	r2, #1
   18038:	b	1803c <__assert_fail@plt+0x6c58>
   1803c:	push	{r4, r5, fp, lr}
   18040:	add	fp, sp, #8
   18044:	ldr	r5, [r1]
   18048:	mov	r4, r1
   1804c:	cmp	r0, #0
   18050:	beq	18068 <__assert_fail@plt+0x6c84>
   18054:	mov	r1, #1
   18058:	add	r1, r1, r5, lsr #1
   1805c:	adds	r5, r5, r1
   18060:	bcc	18080 <__assert_fail@plt+0x6c9c>
   18064:	bl	18380 <__assert_fail@plt+0x6f9c>
   18068:	cmp	r5, #0
   1806c:	bne	18080 <__assert_fail@plt+0x6c9c>
   18070:	mov	r1, #64	; 0x40
   18074:	cmp	r2, #64	; 0x40
   18078:	udiv	r5, r1, r2
   1807c:	addhi	r5, r5, #1
   18080:	mov	r1, r5
   18084:	bl	17ef4 <__assert_fail@plt+0x6b10>
   18088:	str	r5, [r4]
   1808c:	pop	{r4, r5, fp, pc}
   18090:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18094:	add	fp, sp, #24
   18098:	ldr	r6, [r1]
   1809c:	mov	r8, r1
   180a0:	ldr	r4, [fp, #8]
   180a4:	add	r1, r6, r6, asr #1
   180a8:	cmp	r1, r6
   180ac:	mvnvs	r1, #-2147483648	; 0x80000000
   180b0:	cmp	r1, r3
   180b4:	mov	r5, r1
   180b8:	movgt	r5, r3
   180bc:	cmn	r3, #1
   180c0:	movle	r5, r1
   180c4:	cmn	r4, #1
   180c8:	ble	180e8 <__assert_fail@plt+0x6d04>
   180cc:	cmp	r4, #0
   180d0:	beq	1813c <__assert_fail@plt+0x6d58>
   180d4:	cmn	r5, #1
   180d8:	ble	18110 <__assert_fail@plt+0x6d2c>
   180dc:	mvn	r7, #-2147483648	; 0x80000000
   180e0:	udiv	r1, r7, r4
   180e4:	b	18104 <__assert_fail@plt+0x6d20>
   180e8:	cmn	r5, #1
   180ec:	ble	1812c <__assert_fail@plt+0x6d48>
   180f0:	cmn	r4, #1
   180f4:	beq	1813c <__assert_fail@plt+0x6d58>
   180f8:	mov	r1, #-2147483648	; 0x80000000
   180fc:	mvn	r7, #-2147483648	; 0x80000000
   18100:	sdiv	r1, r1, r4
   18104:	cmp	r1, r5
   18108:	bge	1813c <__assert_fail@plt+0x6d58>
   1810c:	b	1814c <__assert_fail@plt+0x6d68>
   18110:	beq	1813c <__assert_fail@plt+0x6d58>
   18114:	mov	r1, #-2147483648	; 0x80000000
   18118:	mvn	r7, #-2147483648	; 0x80000000
   1811c:	sdiv	r1, r1, r5
   18120:	cmp	r1, r4
   18124:	bge	1813c <__assert_fail@plt+0x6d58>
   18128:	b	1814c <__assert_fail@plt+0x6d68>
   1812c:	mvn	r7, #-2147483648	; 0x80000000
   18130:	sdiv	r1, r7, r4
   18134:	cmp	r5, r1
   18138:	blt	1814c <__assert_fail@plt+0x6d68>
   1813c:	mul	r1, r5, r4
   18140:	mov	r7, #64	; 0x40
   18144:	cmp	r1, #63	; 0x3f
   18148:	bgt	18154 <__assert_fail@plt+0x6d70>
   1814c:	sdiv	r5, r7, r4
   18150:	mul	r1, r5, r4
   18154:	cmp	r0, #0
   18158:	moveq	r7, #0
   1815c:	streq	r7, [r8]
   18160:	sub	r7, r5, r6
   18164:	cmp	r7, r2
   18168:	bge	1820c <__assert_fail@plt+0x6e28>
   1816c:	add	r5, r6, r2
   18170:	mov	r2, #0
   18174:	mov	r1, #0
   18178:	cmp	r5, r3
   1817c:	movwgt	r2, #1
   18180:	cmn	r3, #1
   18184:	movwgt	r1, #1
   18188:	cmp	r5, r6
   1818c:	bvs	181f4 <__assert_fail@plt+0x6e10>
   18190:	ands	r1, r1, r2
   18194:	bne	181f4 <__assert_fail@plt+0x6e10>
   18198:	cmn	r4, #1
   1819c:	ble	181bc <__assert_fail@plt+0x6dd8>
   181a0:	cmp	r4, #0
   181a4:	beq	18208 <__assert_fail@plt+0x6e24>
   181a8:	cmn	r5, #1
   181ac:	ble	181e0 <__assert_fail@plt+0x6dfc>
   181b0:	mvn	r1, #-2147483648	; 0x80000000
   181b4:	udiv	r1, r1, r4
   181b8:	b	181d4 <__assert_fail@plt+0x6df0>
   181bc:	cmn	r5, #1
   181c0:	ble	181f8 <__assert_fail@plt+0x6e14>
   181c4:	cmn	r4, #1
   181c8:	beq	18208 <__assert_fail@plt+0x6e24>
   181cc:	mov	r1, #-2147483648	; 0x80000000
   181d0:	sdiv	r1, r1, r4
   181d4:	cmp	r1, r5
   181d8:	bge	18208 <__assert_fail@plt+0x6e24>
   181dc:	b	181f4 <__assert_fail@plt+0x6e10>
   181e0:	beq	18208 <__assert_fail@plt+0x6e24>
   181e4:	mov	r1, #-2147483648	; 0x80000000
   181e8:	sdiv	r1, r1, r5
   181ec:	cmp	r1, r4
   181f0:	bge	18208 <__assert_fail@plt+0x6e24>
   181f4:	bl	18380 <__assert_fail@plt+0x6f9c>
   181f8:	mvn	r1, #-2147483648	; 0x80000000
   181fc:	sdiv	r1, r1, r4
   18200:	cmp	r5, r1
   18204:	blt	181f4 <__assert_fail@plt+0x6e10>
   18208:	mul	r1, r5, r4
   1820c:	bl	17f78 <__assert_fail@plt+0x6b94>
   18210:	str	r5, [r8]
   18214:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18218:	push	{fp, lr}
   1821c:	mov	fp, sp
   18220:	mov	r1, #1
   18224:	bl	18440 <__assert_fail@plt+0x705c>
   18228:	cmp	r0, #0
   1822c:	popne	{fp, pc}
   18230:	bl	18380 <__assert_fail@plt+0x6f9c>
   18234:	push	{fp, lr}
   18238:	mov	fp, sp
   1823c:	bl	18440 <__assert_fail@plt+0x705c>
   18240:	cmp	r0, #0
   18244:	popne	{fp, pc}
   18248:	bl	18380 <__assert_fail@plt+0x6f9c>
   1824c:	push	{fp, lr}
   18250:	mov	fp, sp
   18254:	mov	r1, #1
   18258:	bl	18440 <__assert_fail@plt+0x705c>
   1825c:	cmp	r0, #0
   18260:	popne	{fp, pc}
   18264:	bl	18380 <__assert_fail@plt+0x6f9c>
   18268:	push	{fp, lr}
   1826c:	mov	fp, sp
   18270:	bl	18440 <__assert_fail@plt+0x705c>
   18274:	cmp	r0, #0
   18278:	popne	{fp, pc}
   1827c:	bl	18380 <__assert_fail@plt+0x6f9c>
   18280:	push	{r4, r5, r6, sl, fp, lr}
   18284:	add	fp, sp, #16
   18288:	mov	r5, r0
   1828c:	mov	r0, r1
   18290:	mov	r4, r1
   18294:	bl	18494 <__assert_fail@plt+0x70b0>
   18298:	cmp	r0, #0
   1829c:	beq	182b8 <__assert_fail@plt+0x6ed4>
   182a0:	mov	r1, r5
   182a4:	mov	r2, r4
   182a8:	mov	r6, r0
   182ac:	bl	1115c <memcpy@plt>
   182b0:	mov	r0, r6
   182b4:	pop	{r4, r5, r6, sl, fp, pc}
   182b8:	bl	18380 <__assert_fail@plt+0x6f9c>
   182bc:	push	{r4, r5, r6, sl, fp, lr}
   182c0:	add	fp, sp, #16
   182c4:	mov	r5, r0
   182c8:	mov	r0, r1
   182cc:	mov	r4, r1
   182d0:	bl	18494 <__assert_fail@plt+0x70b0>
   182d4:	cmp	r0, #0
   182d8:	beq	182f4 <__assert_fail@plt+0x6f10>
   182dc:	mov	r1, r5
   182e0:	mov	r2, r4
   182e4:	mov	r6, r0
   182e8:	bl	1115c <memcpy@plt>
   182ec:	mov	r0, r6
   182f0:	pop	{r4, r5, r6, sl, fp, pc}
   182f4:	bl	18380 <__assert_fail@plt+0x6f9c>
   182f8:	push	{r4, r5, r6, sl, fp, lr}
   182fc:	add	fp, sp, #16
   18300:	mov	r5, r0
   18304:	add	r0, r1, #1
   18308:	mov	r4, r1
   1830c:	bl	18494 <__assert_fail@plt+0x70b0>
   18310:	cmp	r0, #0
   18314:	beq	1833c <__assert_fail@plt+0x6f58>
   18318:	mov	r6, r0
   1831c:	mov	r0, #0
   18320:	mov	r1, r5
   18324:	mov	r2, r4
   18328:	strb	r0, [r6, r4]
   1832c:	mov	r0, r6
   18330:	bl	1115c <memcpy@plt>
   18334:	mov	r0, r6
   18338:	pop	{r4, r5, r6, sl, fp, pc}
   1833c:	bl	18380 <__assert_fail@plt+0x6f9c>
   18340:	push	{r4, r5, r6, sl, fp, lr}
   18344:	add	fp, sp, #16
   18348:	mov	r4, r0
   1834c:	bl	11270 <strlen@plt>
   18350:	add	r5, r0, #1
   18354:	mov	r0, r5
   18358:	bl	18494 <__assert_fail@plt+0x70b0>
   1835c:	cmp	r0, #0
   18360:	beq	1837c <__assert_fail@plt+0x6f98>
   18364:	mov	r1, r4
   18368:	mov	r2, r5
   1836c:	mov	r6, r0
   18370:	bl	1115c <memcpy@plt>
   18374:	mov	r0, r6
   18378:	pop	{r4, r5, r6, sl, fp, pc}
   1837c:	bl	18380 <__assert_fail@plt+0x6f9c>
   18380:	push	{fp, lr}
   18384:	mov	fp, sp
   18388:	movw	r0, #41248	; 0xa120
   1838c:	movw	r1, #40352	; 0x9da0
   18390:	mov	r2, #5
   18394:	movt	r0, #2
   18398:	movt	r1, #1
   1839c:	ldr	r4, [r0]
   183a0:	mov	r0, #0
   183a4:	bl	11180 <dcgettext@plt>
   183a8:	movw	r2, #37686	; 0x9336
   183ac:	mov	r3, r0
   183b0:	mov	r0, r4
   183b4:	mov	r1, #0
   183b8:	movt	r2, #1
   183bc:	bl	11204 <error@plt>
   183c0:	bl	113b4 <abort@plt>
   183c4:	push	{fp, lr}
   183c8:	mov	fp, sp
   183cc:	orr	r1, r1, #512	; 0x200
   183d0:	bl	12924 <__assert_fail@plt+0x1540>
   183d4:	cmp	r0, #0
   183d8:	popne	{fp, pc}
   183dc:	bl	11294 <__errno_location@plt>
   183e0:	ldr	r0, [r0]
   183e4:	cmp	r0, #22
   183e8:	bne	1840c <__assert_fail@plt+0x7028>
   183ec:	movw	r0, #40369	; 0x9db1
   183f0:	movw	r1, #40385	; 0x9dc1
   183f4:	movw	r3, #40396	; 0x9dcc
   183f8:	mov	r2, #41	; 0x29
   183fc:	movt	r0, #1
   18400:	movt	r1, #1
   18404:	movt	r3, #1
   18408:	bl	113e4 <__assert_fail@plt>
   1840c:	bl	18380 <__assert_fail@plt+0x6f9c>
   18410:	ldr	r0, [r0, #48]	; 0x30
   18414:	and	r0, r0, #17
   18418:	cmp	r0, #16
   1841c:	moveq	r0, #1
   18420:	bxeq	lr
   18424:	cmp	r0, #17
   18428:	movne	r0, #0
   1842c:	bxne	lr
   18430:	ldr	r0, [r1, #48]	; 0x30
   18434:	cmp	r0, #0
   18438:	movwne	r0, #1
   1843c:	bx	lr
   18440:	clz	r2, r1
   18444:	clz	r3, r0
   18448:	lsr	r2, r2, #5
   1844c:	lsr	r3, r3, #5
   18450:	orrs	r2, r3, r2
   18454:	movwne	r1, #1
   18458:	movwne	r0, #1
   1845c:	cmp	r1, #0
   18460:	beq	18490 <__assert_fail@plt+0x70ac>
   18464:	mvn	r2, #-2147483648	; 0x80000000
   18468:	udiv	r2, r2, r1
   1846c:	cmp	r2, r0
   18470:	bcs	18490 <__assert_fail@plt+0x70ac>
   18474:	push	{fp, lr}
   18478:	mov	fp, sp
   1847c:	bl	11294 <__errno_location@plt>
   18480:	mov	r1, #12
   18484:	str	r1, [r0]
   18488:	mov	r0, #0
   1848c:	pop	{fp, pc}
   18490:	b	110fc <calloc@plt>
   18494:	cmp	r0, #0
   18498:	movweq	r0, #1
   1849c:	cmn	r0, #1
   184a0:	ble	184a8 <__assert_fail@plt+0x70c4>
   184a4:	b	1121c <malloc@plt>
   184a8:	push	{fp, lr}
   184ac:	mov	fp, sp
   184b0:	bl	11294 <__errno_location@plt>
   184b4:	mov	r1, #12
   184b8:	str	r1, [r0]
   184bc:	mov	r0, #0
   184c0:	pop	{fp, pc}
   184c4:	push	{fp, lr}
   184c8:	mov	fp, sp
   184cc:	cmp	r0, #0
   184d0:	beq	184ec <__assert_fail@plt+0x7108>
   184d4:	cmp	r1, #0
   184d8:	beq	184f8 <__assert_fail@plt+0x7114>
   184dc:	cmn	r1, #1
   184e0:	ble	18500 <__assert_fail@plt+0x711c>
   184e4:	pop	{fp, lr}
   184e8:	b	1118c <realloc@plt>
   184ec:	mov	r0, r1
   184f0:	pop	{fp, lr}
   184f4:	b	18494 <__assert_fail@plt+0x70b0>
   184f8:	bl	18998 <__assert_fail@plt+0x75b4>
   184fc:	b	1850c <__assert_fail@plt+0x7128>
   18500:	bl	11294 <__errno_location@plt>
   18504:	mov	r1, #12
   18508:	str	r1, [r0]
   1850c:	mov	r0, #0
   18510:	pop	{fp, pc}
   18514:	push	{r4, r5, r6, sl, fp, lr}
   18518:	add	fp, sp, #16
   1851c:	mov	r4, r0
   18520:	bl	111e0 <__fpending@plt>
   18524:	mov	r5, r0
   18528:	mov	r0, r4
   1852c:	bl	111ec <ferror_unlocked@plt>
   18530:	mov	r6, r0
   18534:	mov	r0, r4
   18538:	bl	18680 <__assert_fail@plt+0x729c>
   1853c:	cmp	r6, #0
   18540:	beq	18560 <__assert_fail@plt+0x717c>
   18544:	mvn	r4, #0
   18548:	cmp	r0, #0
   1854c:	bne	1858c <__assert_fail@plt+0x71a8>
   18550:	bl	11294 <__errno_location@plt>
   18554:	mov	r1, #0
   18558:	str	r1, [r0]
   1855c:	b	1858c <__assert_fail@plt+0x71a8>
   18560:	cmp	r0, #0
   18564:	mov	r4, r0
   18568:	mvnne	r4, #0
   1856c:	cmp	r5, #0
   18570:	bne	1858c <__assert_fail@plt+0x71a8>
   18574:	cmp	r0, #0
   18578:	beq	1858c <__assert_fail@plt+0x71a8>
   1857c:	bl	11294 <__errno_location@plt>
   18580:	ldr	r0, [r0]
   18584:	subs	r4, r0, #9
   18588:	mvnne	r4, #0
   1858c:	mov	r0, r4
   18590:	pop	{r4, r5, r6, sl, fp, pc}
   18594:	movw	r2, #62998	; 0xf616
   18598:	mov	r1, #0
   1859c:	movt	r2, #149	; 0x95
   185a0:	str	r1, [r0, #16]
   185a4:	str	r1, [r0, #20]
   185a8:	str	r2, [r0, #24]
   185ac:	bx	lr
   185b0:	push	{r4, r5, r6, r7, fp, lr}
   185b4:	add	fp, sp, #16
   185b8:	ldr	r2, [r0, #24]
   185bc:	movw	r3, #62998	; 0xf616
   185c0:	movt	r3, #149	; 0x95
   185c4:	cmp	r2, r3
   185c8:	bne	18660 <__assert_fail@plt+0x727c>
   185cc:	mov	r3, r0
   185d0:	ldr	r2, [r3, #16]!
   185d4:	ldr	lr, [r3, #4]
   185d8:	orrs	r5, r2, lr
   185dc:	beq	18614 <__assert_fail@plt+0x7230>
   185e0:	ldrd	r4, [r0]
   185e4:	ldrd	r6, [r1, #96]	; 0x60
   185e8:	eor	r7, r7, r5
   185ec:	eor	r6, r6, r4
   185f0:	orrs	r7, r6, r7
   185f4:	bne	18614 <__assert_fail@plt+0x7230>
   185f8:	ldrd	r4, [r0, #8]
   185fc:	ldrd	r6, [r1]
   18600:	mov	ip, #1
   18604:	eor	r7, r7, r5
   18608:	eor	r6, r6, r4
   1860c:	orrs	r7, r6, r7
   18610:	beq	18658 <__assert_fail@plt+0x7274>
   18614:	adds	r4, r2, #1
   18618:	mov	ip, #0
   1861c:	adc	r5, lr, #0
   18620:	and	r2, r4, r2
   18624:	strd	r4, [r3]
   18628:	and	r3, r5, lr
   1862c:	orrs	r2, r2, r3
   18630:	bne	18658 <__assert_fail@plt+0x7274>
   18634:	orrs	r2, r4, r5
   18638:	beq	18654 <__assert_fail@plt+0x7270>
   1863c:	ldrd	r2, [r1]
   18640:	str	r3, [r0, #12]
   18644:	str	r2, [r0, #8]
   18648:	ldrd	r2, [r1, #96]	; 0x60
   1864c:	stm	r0, {r2, r3}
   18650:	b	18658 <__assert_fail@plt+0x7274>
   18654:	mov	ip, #1
   18658:	mov	r0, ip
   1865c:	pop	{r4, r5, r6, r7, fp, pc}
   18660:	movw	r0, #40474	; 0x9e1a
   18664:	movw	r1, #40498	; 0x9e32
   18668:	movw	r3, #40516	; 0x9e44
   1866c:	mov	r2, #60	; 0x3c
   18670:	movt	r0, #1
   18674:	movt	r1, #1
   18678:	movt	r3, #1
   1867c:	bl	113e4 <__assert_fail@plt>
   18680:	push	{r4, r5, r6, sl, fp, lr}
   18684:	add	fp, sp, #16
   18688:	sub	sp, sp, #8
   1868c:	mov	r4, r0
   18690:	bl	112d0 <fileno@plt>
   18694:	cmn	r0, #1
   18698:	ble	1870c <__assert_fail@plt+0x7328>
   1869c:	mov	r0, r4
   186a0:	bl	11234 <__freading@plt>
   186a4:	cmp	r0, #0
   186a8:	beq	186d4 <__assert_fail@plt+0x72f0>
   186ac:	mov	r0, r4
   186b0:	bl	112d0 <fileno@plt>
   186b4:	mov	r1, #1
   186b8:	mov	r2, #0
   186bc:	mov	r3, #0
   186c0:	str	r1, [sp]
   186c4:	bl	111c8 <lseek64@plt>
   186c8:	and	r0, r0, r1
   186cc:	cmn	r0, #1
   186d0:	beq	1870c <__assert_fail@plt+0x7328>
   186d4:	mov	r0, r4
   186d8:	bl	1893c <__assert_fail@plt+0x7558>
   186dc:	cmp	r0, #0
   186e0:	beq	1870c <__assert_fail@plt+0x7328>
   186e4:	bl	11294 <__errno_location@plt>
   186e8:	ldr	r6, [r0]
   186ec:	mov	r5, r0
   186f0:	mov	r0, r4
   186f4:	bl	112e8 <fclose@plt>
   186f8:	cmp	r6, #0
   186fc:	strne	r6, [r5]
   18700:	mvnne	r0, #0
   18704:	sub	sp, fp, #16
   18708:	pop	{r4, r5, r6, sl, fp, pc}
   1870c:	mov	r0, r4
   18710:	sub	sp, fp, #16
   18714:	pop	{r4, r5, r6, sl, fp, lr}
   18718:	b	112e8 <fclose@plt>
   1871c:	sub	sp, sp, #8
   18720:	push	{r4, r5, r6, r7, fp, lr}
   18724:	add	fp, sp, #16
   18728:	sub	sp, sp, #8
   1872c:	mov	r5, r0
   18730:	add	r0, fp, #8
   18734:	cmp	r1, #11
   18738:	str	r3, [fp, #12]
   1873c:	str	r2, [fp, #8]
   18740:	str	r0, [sp, #4]
   18744:	bhi	18780 <__assert_fail@plt+0x739c>
   18748:	mov	r0, #1
   1874c:	movw	r2, #1300	; 0x514
   18750:	tst	r2, r0, lsl r1
   18754:	bne	18838 <__assert_fail@plt+0x7454>
   18758:	movw	r2, #2570	; 0xa0a
   1875c:	tst	r2, r0, lsl r1
   18760:	bne	187a8 <__assert_fail@plt+0x73c4>
   18764:	cmp	r1, #0
   18768:	bne	18780 <__assert_fail@plt+0x739c>
   1876c:	ldr	r0, [sp, #4]
   18770:	add	r1, r0, #4
   18774:	str	r1, [sp, #4]
   18778:	mov	r1, #0
   1877c:	b	18844 <__assert_fail@plt+0x7460>
   18780:	sub	r0, r1, #1024	; 0x400
   18784:	cmp	r0, #10
   18788:	bhi	18838 <__assert_fail@plt+0x7454>
   1878c:	mov	r2, #1
   18790:	movw	r3, #645	; 0x285
   18794:	tst	r3, r2, lsl r0
   18798:	bne	18838 <__assert_fail@plt+0x7454>
   1879c:	movw	r3, #1282	; 0x502
   187a0:	tst	r3, r2, lsl r0
   187a4:	beq	187b4 <__assert_fail@plt+0x73d0>
   187a8:	mov	r0, r5
   187ac:	bl	11300 <fcntl64@plt>
   187b0:	b	18850 <__assert_fail@plt+0x746c>
   187b4:	cmp	r0, #6
   187b8:	bne	18838 <__assert_fail@plt+0x7454>
   187bc:	ldr	r0, [sp, #4]
   187c0:	movw	r7, #41704	; 0xa2e8
   187c4:	movt	r7, #2
   187c8:	add	r1, r0, #4
   187cc:	str	r1, [sp, #4]
   187d0:	ldr	r6, [r0]
   187d4:	ldr	r0, [r7]
   187d8:	cmp	r0, #0
   187dc:	blt	18874 <__assert_fail@plt+0x7490>
   187e0:	mov	r0, r5
   187e4:	movw	r1, #1030	; 0x406
   187e8:	mov	r2, r6
   187ec:	bl	11300 <fcntl64@plt>
   187f0:	mov	r4, r0
   187f4:	cmn	r0, #1
   187f8:	bgt	18868 <__assert_fail@plt+0x7484>
   187fc:	bl	11294 <__errno_location@plt>
   18800:	ldr	r0, [r0]
   18804:	cmp	r0, #22
   18808:	bne	18868 <__assert_fail@plt+0x7484>
   1880c:	mov	r0, r5
   18810:	mov	r1, #0
   18814:	mov	r2, r6
   18818:	bl	11300 <fcntl64@plt>
   1881c:	mov	r4, r0
   18820:	cmp	r0, #0
   18824:	blt	18854 <__assert_fail@plt+0x7470>
   18828:	mvn	r0, #0
   1882c:	str	r0, [r7]
   18830:	mov	r0, #1
   18834:	b	18898 <__assert_fail@plt+0x74b4>
   18838:	ldr	r0, [sp, #4]
   1883c:	add	r2, r0, #4
   18840:	str	r2, [sp, #4]
   18844:	ldr	r2, [r0]
   18848:	mov	r0, r5
   1884c:	bl	11300 <fcntl64@plt>
   18850:	mov	r4, r0
   18854:	mov	r0, r4
   18858:	sub	sp, fp, #16
   1885c:	pop	{r4, r5, r6, r7, fp, lr}
   18860:	add	sp, sp, #8
   18864:	bx	lr
   18868:	mov	r0, #1
   1886c:	str	r0, [r7]
   18870:	b	18854 <__assert_fail@plt+0x7470>
   18874:	mov	r0, r5
   18878:	mov	r1, #0
   1887c:	mov	r2, r6
   18880:	bl	11300 <fcntl64@plt>
   18884:	mov	r4, r0
   18888:	ldr	r0, [r7]
   1888c:	add	r0, r0, #1
   18890:	clz	r0, r0
   18894:	lsr	r0, r0, #5
   18898:	cmp	r0, #0
   1889c:	beq	18854 <__assert_fail@plt+0x7470>
   188a0:	cmp	r4, #0
   188a4:	blt	18854 <__assert_fail@plt+0x7470>
   188a8:	mov	r0, r4
   188ac:	mov	r1, #1
   188b0:	bl	11300 <fcntl64@plt>
   188b4:	cmp	r0, #0
   188b8:	blt	188d4 <__assert_fail@plt+0x74f0>
   188bc:	orr	r2, r0, #1
   188c0:	mov	r0, r4
   188c4:	mov	r1, #2
   188c8:	bl	11300 <fcntl64@plt>
   188cc:	cmn	r0, #1
   188d0:	bne	18854 <__assert_fail@plt+0x7470>
   188d4:	bl	11294 <__errno_location@plt>
   188d8:	ldr	r6, [r0]
   188dc:	mov	r5, r0
   188e0:	mov	r0, r4
   188e4:	bl	113c0 <close@plt>
   188e8:	str	r6, [r5]
   188ec:	mvn	r4, #0
   188f0:	b	18854 <__assert_fail@plt+0x7470>
   188f4:	sub	sp, sp, #8
   188f8:	push	{fp, lr}
   188fc:	mov	fp, sp
   18900:	sub	sp, sp, #8
   18904:	str	r2, [fp, #8]
   18908:	mov	r2, #0
   1890c:	tst	r1, #64	; 0x40
   18910:	str	r3, [fp, #12]
   18914:	addne	r2, fp, #8
   18918:	orrne	r2, r2, #4
   1891c:	strne	r2, [sp, #4]
   18920:	ldrne	r2, [fp, #8]
   18924:	bl	11210 <open64@plt>
   18928:	bl	17a30 <__assert_fail@plt+0x664c>
   1892c:	mov	sp, fp
   18930:	pop	{fp, lr}
   18934:	add	sp, sp, #8
   18938:	bx	lr
   1893c:	push	{r4, sl, fp, lr}
   18940:	add	fp, sp, #8
   18944:	sub	sp, sp, #8
   18948:	mov	r4, r0
   1894c:	cmp	r0, #0
   18950:	beq	1896c <__assert_fail@plt+0x7588>
   18954:	mov	r0, r4
   18958:	bl	11234 <__freading@plt>
   1895c:	cmp	r0, #0
   18960:	ldrbne	r0, [r4, #1]
   18964:	tstne	r0, #1
   18968:	bne	1897c <__assert_fail@plt+0x7598>
   1896c:	mov	r0, r4
   18970:	sub	sp, fp, #8
   18974:	pop	{r4, sl, fp, lr}
   18978:	b	1112c <fflush@plt>
   1897c:	mov	r0, #1
   18980:	mov	r2, #0
   18984:	mov	r3, #0
   18988:	str	r0, [sp]
   1898c:	mov	r0, r4
   18990:	bl	189c0 <__assert_fail@plt+0x75dc>
   18994:	b	1896c <__assert_fail@plt+0x7588>
   18998:	push	{r4, r5, r6, sl, fp, lr}
   1899c:	add	fp, sp, #16
   189a0:	mov	r4, r0
   189a4:	bl	11294 <__errno_location@plt>
   189a8:	ldr	r6, [r0]
   189ac:	mov	r5, r0
   189b0:	mov	r0, r4
   189b4:	bl	11144 <free@plt>
   189b8:	str	r6, [r5]
   189bc:	pop	{r4, r5, r6, sl, fp, pc}
   189c0:	push	{r4, r5, r6, r7, fp, lr}
   189c4:	add	fp, sp, #16
   189c8:	sub	sp, sp, #8
   189cc:	mov	r4, r0
   189d0:	ldr	r0, [r0, #4]
   189d4:	mov	r5, r3
   189d8:	mov	r6, r2
   189dc:	ldr	r1, [r4, #8]
   189e0:	cmp	r1, r0
   189e4:	bne	18a00 <__assert_fail@plt+0x761c>
   189e8:	ldrd	r0, [r4, #16]
   189ec:	cmp	r1, r0
   189f0:	bne	18a00 <__assert_fail@plt+0x761c>
   189f4:	ldr	r0, [r4, #36]	; 0x24
   189f8:	cmp	r0, #0
   189fc:	beq	18a18 <__assert_fail@plt+0x7634>
   18a00:	mov	r0, r4
   18a04:	mov	r2, r6
   18a08:	mov	r3, r5
   18a0c:	sub	sp, fp, #16
   18a10:	pop	{r4, r5, r6, r7, fp, lr}
   18a14:	b	112f4 <fseeko64@plt>
   18a18:	ldr	r7, [fp, #8]
   18a1c:	mov	r0, r4
   18a20:	bl	112d0 <fileno@plt>
   18a24:	mov	r2, r6
   18a28:	mov	r3, r5
   18a2c:	str	r7, [sp]
   18a30:	bl	111c8 <lseek64@plt>
   18a34:	and	r2, r0, r1
   18a38:	cmn	r2, #1
   18a3c:	beq	18a58 <__assert_fail@plt+0x7674>
   18a40:	strd	r0, [r4, #80]	; 0x50
   18a44:	ldr	r0, [r4]
   18a48:	bic	r0, r0, #16
   18a4c:	str	r0, [r4]
   18a50:	mov	r0, #0
   18a54:	b	18a5c <__assert_fail@plt+0x7678>
   18a58:	mvn	r0, #0
   18a5c:	sub	sp, fp, #16
   18a60:	pop	{r4, r5, r6, r7, fp, pc}
   18a64:	push	{fp, lr}
   18a68:	mov	fp, sp
   18a6c:	mov	r0, #14
   18a70:	bl	11324 <nl_langinfo@plt>
   18a74:	movw	r1, #36778	; 0x8faa
   18a78:	cmp	r0, #0
   18a7c:	movt	r1, #1
   18a80:	movne	r1, r0
   18a84:	movw	r0, #40583	; 0x9e87
   18a88:	ldrb	r2, [r1]
   18a8c:	movt	r0, #1
   18a90:	cmp	r2, #0
   18a94:	movne	r0, r1
   18a98:	pop	{fp, pc}
   18a9c:	push	{r4, r5, r6, r7, fp, lr}
   18aa0:	add	fp, sp, #16
   18aa4:	sub	sp, sp, #8
   18aa8:	add	r5, sp, #4
   18aac:	cmp	r0, #0
   18ab0:	mov	r7, r2
   18ab4:	mov	r4, r1
   18ab8:	movne	r5, r0
   18abc:	mov	r0, r5
   18ac0:	bl	111f8 <mbrtowc@plt>
   18ac4:	mov	r6, r0
   18ac8:	cmp	r7, #0
   18acc:	beq	18af0 <__assert_fail@plt+0x770c>
   18ad0:	cmn	r6, #2
   18ad4:	bcc	18af0 <__assert_fail@plt+0x770c>
   18ad8:	mov	r0, #0
   18adc:	bl	18b44 <__assert_fail@plt+0x7760>
   18ae0:	cmp	r0, #0
   18ae4:	ldrbeq	r0, [r4]
   18ae8:	moveq	r6, #1
   18aec:	streq	r0, [r5]
   18af0:	mov	r0, r6
   18af4:	sub	sp, fp, #16
   18af8:	pop	{r4, r5, r6, r7, fp, pc}
   18afc:	cmp	r2, #0
   18b00:	beq	18b30 <__assert_fail@plt+0x774c>
   18b04:	mvn	r3, #0
   18b08:	udiv	r3, r3, r2
   18b0c:	cmp	r3, r1
   18b10:	bcs	18b30 <__assert_fail@plt+0x774c>
   18b14:	push	{fp, lr}
   18b18:	mov	fp, sp
   18b1c:	bl	11294 <__errno_location@plt>
   18b20:	mov	r1, #12
   18b24:	str	r1, [r0]
   18b28:	mov	r0, #0
   18b2c:	pop	{fp, pc}
   18b30:	mul	r1, r2, r1
   18b34:	b	184c4 <__assert_fail@plt+0x70e0>
   18b38:	mov	r1, #0
   18b3c:	mov	r2, #3
   18b40:	b	1871c <__assert_fail@plt+0x7338>
   18b44:	push	{r4, sl, fp, lr}
   18b48:	add	fp, sp, #8
   18b4c:	sub	sp, sp, #264	; 0x108
   18b50:	add	r1, sp, #7
   18b54:	movw	r2, #257	; 0x101
   18b58:	bl	18ba8 <__assert_fail@plt+0x77c4>
   18b5c:	mov	r4, #0
   18b60:	cmp	r0, #0
   18b64:	bne	18b9c <__assert_fail@plt+0x77b8>
   18b68:	movw	r1, #40589	; 0x9e8d
   18b6c:	add	r0, sp, #7
   18b70:	movt	r1, #1
   18b74:	bl	11120 <strcmp@plt>
   18b78:	cmp	r0, #0
   18b7c:	beq	18b9c <__assert_fail@plt+0x77b8>
   18b80:	movw	r1, #40591	; 0x9e8f
   18b84:	add	r0, sp, #7
   18b88:	movt	r1, #1
   18b8c:	bl	11120 <strcmp@plt>
   18b90:	mov	r4, r0
   18b94:	cmp	r0, #0
   18b98:	movwne	r4, #1
   18b9c:	mov	r0, r4
   18ba0:	sub	sp, fp, #8
   18ba4:	pop	{r4, sl, fp, pc}
   18ba8:	push	{r4, r5, r6, r7, fp, lr}
   18bac:	add	fp, sp, #16
   18bb0:	mov	r4, r1
   18bb4:	mov	r1, #0
   18bb8:	mov	r6, r2
   18bbc:	bl	1130c <setlocale@plt>
   18bc0:	cmp	r0, #0
   18bc4:	beq	18bf0 <__assert_fail@plt+0x780c>
   18bc8:	mov	r7, r0
   18bcc:	bl	11270 <strlen@plt>
   18bd0:	cmp	r0, r6
   18bd4:	bcs	18c04 <__assert_fail@plt+0x7820>
   18bd8:	add	r2, r0, #1
   18bdc:	mov	r0, r4
   18be0:	mov	r1, r7
   18be4:	bl	1115c <memcpy@plt>
   18be8:	mov	r5, #0
   18bec:	b	18c2c <__assert_fail@plt+0x7848>
   18bf0:	cmp	r6, #0
   18bf4:	mov	r5, #22
   18bf8:	movne	r0, #0
   18bfc:	strbne	r0, [r4]
   18c00:	b	18c2c <__assert_fail@plt+0x7848>
   18c04:	mov	r5, #34	; 0x22
   18c08:	cmp	r6, #0
   18c0c:	beq	18c2c <__assert_fail@plt+0x7848>
   18c10:	sub	r6, r6, #1
   18c14:	mov	r0, r4
   18c18:	mov	r1, r7
   18c1c:	mov	r2, r6
   18c20:	bl	1115c <memcpy@plt>
   18c24:	mov	r0, #0
   18c28:	strb	r0, [r4, r6]
   18c2c:	mov	r0, r5
   18c30:	pop	{r4, r5, r6, r7, fp, pc}
   18c34:	mov	r1, #0
   18c38:	b	1130c <setlocale@plt>
   18c3c:	cmp	r3, #0
   18c40:	cmpeq	r2, #0
   18c44:	bne	18c5c <__assert_fail@plt+0x7878>
   18c48:	cmp	r1, #0
   18c4c:	cmpeq	r0, #0
   18c50:	mvnne	r1, #0
   18c54:	mvnne	r0, #0
   18c58:	b	18c78 <__assert_fail@plt+0x7894>
   18c5c:	sub	sp, sp, #8
   18c60:	push	{sp, lr}
   18c64:	bl	18c88 <__assert_fail@plt+0x78a4>
   18c68:	ldr	lr, [sp, #4]
   18c6c:	add	sp, sp, #8
   18c70:	pop	{r2, r3}
   18c74:	bx	lr
   18c78:	push	{r1, lr}
   18c7c:	mov	r0, #8
   18c80:	bl	11114 <raise@plt>
   18c84:	pop	{r1, pc}
   18c88:	cmp	r1, r3
   18c8c:	cmpeq	r0, r2
   18c90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c94:	mov	r4, r0
   18c98:	movcc	r0, #0
   18c9c:	mov	r5, r1
   18ca0:	ldr	lr, [sp, #36]	; 0x24
   18ca4:	movcc	r1, r0
   18ca8:	bcc	18da4 <__assert_fail@plt+0x79c0>
   18cac:	cmp	r3, #0
   18cb0:	clzeq	ip, r2
   18cb4:	clzne	ip, r3
   18cb8:	addeq	ip, ip, #32
   18cbc:	cmp	r5, #0
   18cc0:	clzeq	r1, r4
   18cc4:	addeq	r1, r1, #32
   18cc8:	clzne	r1, r5
   18ccc:	sub	ip, ip, r1
   18cd0:	sub	sl, ip, #32
   18cd4:	lsl	r9, r3, ip
   18cd8:	rsb	fp, ip, #32
   18cdc:	orr	r9, r9, r2, lsl sl
   18ce0:	orr	r9, r9, r2, lsr fp
   18ce4:	lsl	r8, r2, ip
   18ce8:	cmp	r5, r9
   18cec:	cmpeq	r4, r8
   18cf0:	movcc	r0, #0
   18cf4:	movcc	r1, r0
   18cf8:	bcc	18d14 <__assert_fail@plt+0x7930>
   18cfc:	mov	r0, #1
   18d00:	subs	r4, r4, r8
   18d04:	lsl	r1, r0, sl
   18d08:	orr	r1, r1, r0, lsr fp
   18d0c:	lsl	r0, r0, ip
   18d10:	sbc	r5, r5, r9
   18d14:	cmp	ip, #0
   18d18:	beq	18da4 <__assert_fail@plt+0x79c0>
   18d1c:	lsr	r6, r8, #1
   18d20:	orr	r6, r6, r9, lsl #31
   18d24:	lsr	r7, r9, #1
   18d28:	mov	r2, ip
   18d2c:	b	18d50 <__assert_fail@plt+0x796c>
   18d30:	subs	r3, r4, r6
   18d34:	sbc	r8, r5, r7
   18d38:	adds	r3, r3, r3
   18d3c:	adc	r8, r8, r8
   18d40:	adds	r4, r3, #1
   18d44:	adc	r5, r8, #0
   18d48:	subs	r2, r2, #1
   18d4c:	beq	18d6c <__assert_fail@plt+0x7988>
   18d50:	cmp	r5, r7
   18d54:	cmpeq	r4, r6
   18d58:	bcs	18d30 <__assert_fail@plt+0x794c>
   18d5c:	adds	r4, r4, r4
   18d60:	adc	r5, r5, r5
   18d64:	subs	r2, r2, #1
   18d68:	bne	18d50 <__assert_fail@plt+0x796c>
   18d6c:	lsr	r3, r4, ip
   18d70:	orr	r3, r3, r5, lsl fp
   18d74:	lsr	r2, r5, ip
   18d78:	orr	r3, r3, r5, lsr sl
   18d7c:	adds	r0, r0, r4
   18d80:	mov	r4, r3
   18d84:	lsl	r3, r2, ip
   18d88:	orr	r3, r3, r4, lsl sl
   18d8c:	lsl	ip, r4, ip
   18d90:	orr	r3, r3, r4, lsr fp
   18d94:	adc	r1, r1, r5
   18d98:	subs	r0, r0, ip
   18d9c:	mov	r5, r2
   18da0:	sbc	r1, r1, r3
   18da4:	cmp	lr, #0
   18da8:	strdne	r4, [lr]
   18dac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18db0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18db4:	mov	r7, r0
   18db8:	ldr	r6, [pc, #72]	; 18e08 <__assert_fail@plt+0x7a24>
   18dbc:	ldr	r5, [pc, #72]	; 18e0c <__assert_fail@plt+0x7a28>
   18dc0:	add	r6, pc, r6
   18dc4:	add	r5, pc, r5
   18dc8:	sub	r6, r6, r5
   18dcc:	mov	r8, r1
   18dd0:	mov	r9, r2
   18dd4:	bl	110d0 <fstatfs64@plt-0x20>
   18dd8:	asrs	r6, r6, #2
   18ddc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18de0:	mov	r4, #0
   18de4:	add	r4, r4, #1
   18de8:	ldr	r3, [r5], #4
   18dec:	mov	r2, r9
   18df0:	mov	r1, r8
   18df4:	mov	r0, r7
   18df8:	blx	r3
   18dfc:	cmp	r6, r4
   18e00:	bne	18de4 <__assert_fail@plt+0x7a00>
   18e04:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18e08:	andeq	r1, r1, r4, asr #2
   18e0c:	andeq	r1, r1, ip, lsr r1
   18e10:	bx	lr
   18e14:	ldr	r3, [pc, #12]	; 18e28 <__assert_fail@plt+0x7a44>
   18e18:	mov	r1, #0
   18e1c:	add	r3, pc, r3
   18e20:	ldr	r2, [r3]
   18e24:	b	112ac <__cxa_atexit@plt>
   18e28:	strdeq	r1, [r1], -r0
   18e2c:	mov	r2, r1
   18e30:	mov	r1, r0
   18e34:	mov	r0, #3
   18e38:	b	11390 <__xstat64@plt>
   18e3c:	mov	r2, r1
   18e40:	mov	r1, r0
   18e44:	mov	r0, #3
   18e48:	b	111bc <__fxstat64@plt>
   18e4c:	mov	r2, r1
   18e50:	mov	r1, r0
   18e54:	mov	r0, #3
   18e58:	b	113cc <__lxstat64@plt>
   18e5c:	push	{lr}		; (str lr, [sp, #-4]!)
   18e60:	sub	sp, sp, #12
   18e64:	str	r3, [sp]
   18e68:	mov	r3, r2
   18e6c:	mov	r2, r1
   18e70:	mov	r1, r0
   18e74:	mov	r0, #3
   18e78:	bl	111a4 <__fxstatat64@plt>
   18e7c:	add	sp, sp, #12
   18e80:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

00018e84 <.fini>:
   18e84:	push	{r3, lr}
   18e88:	pop	{r3, pc}
