
../repos/charybdis/tools/.libs/charybdis-mkfingerprint:     file format elf32-littlearm


Disassembly of section .init:

000104a4 <.init>:
   104a4:	push	{r3, lr}
   104a8:	bl	10730 <fputs@plt+0x1f4>
   104ac:	pop	{r3, pc}

Disassembly of section .plt:

000104b0 <abort@plt-0x14>:
   104b0:	push	{lr}		; (str lr, [sp, #-4]!)
   104b4:	ldr	lr, [pc, #4]	; 104c0 <abort@plt-0x4>
   104b8:	add	lr, pc, lr
   104bc:	ldr	pc, [lr, #8]!
   104c0:	andeq	r0, r1, r0, asr #22

000104c4 <abort@plt>:
   104c4:	add	ip, pc, #0, 12
   104c8:	add	ip, ip, #16, 20	; 0x10000
   104cc:	ldr	pc, [ip, #2880]!	; 0xb40

000104d0 <__libc_start_main@plt>:
   104d0:	add	ip, pc, #0, 12
   104d4:	add	ip, ip, #16, 20	; 0x10000
   104d8:	ldr	pc, [ip, #2872]!	; 0xb38

000104dc <__gmon_start__@plt>:
   104dc:	add	ip, pc, #0, 12
   104e0:	add	ip, ip, #16, 20	; 0x10000
   104e4:	ldr	pc, [ip, #2864]!	; 0xb30

000104e8 <putchar@plt>:
   104e8:	add	ip, pc, #0, 12
   104ec:	add	ip, ip, #16, 20	; 0x10000
   104f0:	ldr	pc, [ip, #2856]!	; 0xb28

000104f4 <memset@plt>:
   104f4:	add	ip, pc, #0, 12
   104f8:	add	ip, ip, #16, 20	; 0x10000
   104fc:	ldr	pc, [ip, #2848]!	; 0xb20

00010500 <perror@plt>:
   10500:	add	ip, pc, #0, 12
   10504:	add	ip, ip, #16, 20	; 0x10000
   10508:	ldr	pc, [ip, #2840]!	; 0xb18

0001050c <printf@plt>:
   1050c:	add	ip, pc, #0, 12
   10510:	add	ip, ip, #16, 20	; 0x10000
   10514:	ldr	pc, [ip, #2832]!	; 0xb10

00010518 <puts@plt>:
   10518:	add	ip, pc, #0, 12
   1051c:	add	ip, ip, #16, 20	; 0x10000
   10520:	ldr	pc, [ip, #2824]!	; 0xb08

00010524 <rb_get_ssl_certfp_file@plt>:
   10524:	add	ip, pc, #0, 12
   10528:	add	ip, ip, #16, 20	; 0x10000
   1052c:	ldr	pc, [ip, #2816]!	; 0xb00

00010530 <strcmp@plt>:
   10530:	add	ip, pc, #0, 12
   10534:	add	ip, ip, #16, 20	; 0x10000
   10538:	ldr	pc, [ip, #2808]!	; 0xaf8

0001053c <fputs@plt>:
   1053c:	add	ip, pc, #0, 12
   10540:	add	ip, ip, #16, 20	; 0x10000
   10544:	ldr	pc, [ip, #2800]!	; 0xaf0

Disassembly of section .text:

00010548 <.text>:
   10548:	push	{r4, r5, r6, r7, lr}
   1054c:	sub	sp, sp, #76	; 0x4c
   10550:	add	r5, sp, #4
   10554:	mov	r4, r0
   10558:	mov	r6, r1
   1055c:	mov	r2, #65	; 0x41
   10560:	mov	r1, #0
   10564:	mov	r0, r5
   10568:	bl	104f4 <memset@plt>
   1056c:	cmp	r4, #3
   10570:	beq	10590 <fputs@plt+0x54>
   10574:	ldr	r0, [pc, #308]	; 106b0 <fputs@plt+0x174>
   10578:	bl	10518 <puts@plt>
   1057c:	ldr	r0, [pc, #304]	; 106b4 <fputs@plt+0x178>
   10580:	bl	10518 <puts@plt>
   10584:	mov	r0, #1
   10588:	add	sp, sp, #76	; 0x4c
   1058c:	pop	{r4, r5, r6, r7, pc}
   10590:	ldmib	r6, {r4, r6}
   10594:	ldr	r1, [pc, #284]	; 106b8 <fputs@plt+0x17c>
   10598:	mov	r0, r4
   1059c:	bl	10530 <strcmp@plt>
   105a0:	subs	r2, r0, #0
   105a4:	beq	10608 <fputs@plt+0xcc>
   105a8:	ldr	r1, [pc, #268]	; 106bc <fputs@plt+0x180>
   105ac:	mov	r0, r4
   105b0:	bl	10530 <strcmp@plt>
   105b4:	cmp	r0, #0
   105b8:	beq	1062c <fputs@plt+0xf0>
   105bc:	ldr	r1, [pc, #252]	; 106c0 <fputs@plt+0x184>
   105c0:	mov	r0, r4
   105c4:	bl	10530 <strcmp@plt>
   105c8:	cmp	r0, #0
   105cc:	beq	10638 <fputs@plt+0xfc>
   105d0:	ldr	r1, [pc, #236]	; 106c4 <fputs@plt+0x188>
   105d4:	mov	r0, r4
   105d8:	bl	10530 <strcmp@plt>
   105dc:	cmp	r0, #0
   105e0:	beq	10644 <fputs@plt+0x108>
   105e4:	ldr	r1, [pc, #220]	; 106c8 <fputs@plt+0x18c>
   105e8:	mov	r0, r4
   105ec:	bl	10530 <strcmp@plt>
   105f0:	cmp	r0, #0
   105f4:	beq	10650 <fputs@plt+0x114>
   105f8:	mov	r1, r4
   105fc:	ldr	r0, [pc, #200]	; 106cc <fputs@plt+0x190>
   10600:	bl	1050c <printf@plt>
   10604:	b	10584 <fputs@plt+0x48>
   10608:	ldr	r4, [pc, #192]	; 106d0 <fputs@plt+0x194>
   1060c:	mov	r1, r5
   10610:	mov	r0, r6
   10614:	bl	10524 <rb_get_ssl_certfp_file@plt>
   10618:	subs	r7, r0, #0
   1061c:	bge	1065c <fputs@plt+0x120>
   10620:	mov	r0, r6
   10624:	bl	10500 <perror@plt>
   10628:	b	10584 <fputs@plt+0x48>
   1062c:	ldr	r4, [pc, #156]	; 106d0 <fputs@plt+0x194>
   10630:	mov	r2, #1
   10634:	b	1060c <fputs@plt+0xd0>
   10638:	ldr	r4, [pc, #144]	; 106d0 <fputs@plt+0x194>
   1063c:	mov	r2, #2
   10640:	b	1060c <fputs@plt+0xd0>
   10644:	ldr	r4, [pc, #136]	; 106d4 <fputs@plt+0x198>
   10648:	ldr	r2, [pc, #136]	; 106d8 <fputs@plt+0x19c>
   1064c:	b	1060c <fputs@plt+0xd0>
   10650:	ldr	r4, [pc, #132]	; 106dc <fputs@plt+0x1a0>
   10654:	ldr	r2, [pc, #132]	; 106e0 <fputs@plt+0x1a4>
   10658:	b	1060c <fputs@plt+0xd0>
   1065c:	bne	10674 <fputs@plt+0x138>
   10660:	ldr	r3, [pc, #124]	; 106e4 <fputs@plt+0x1a8>
   10664:	ldr	r0, [pc, #124]	; 106e8 <fputs@plt+0x1ac>
   10668:	ldr	r1, [r3]
   1066c:	bl	1053c <fputs@plt>
   10670:	b	10584 <fputs@plt+0x48>
   10674:	mov	r1, r4
   10678:	ldr	r0, [pc, #108]	; 106ec <fputs@plt+0x1b0>
   1067c:	bl	1050c <printf@plt>
   10680:	ldr	r6, [pc, #104]	; 106f0 <fputs@plt+0x1b4>
   10684:	mov	r4, #0
   10688:	ldrb	r1, [r5, r4]
   1068c:	mov	r0, r6
   10690:	add	r4, r4, #1
   10694:	bl	1050c <printf@plt>
   10698:	cmp	r7, r4
   1069c:	bgt	10688 <fputs@plt+0x14c>
   106a0:	mov	r0, #10
   106a4:	bl	104e8 <putchar@plt>
   106a8:	mov	r0, #0
   106ac:	b	10588 <fputs@plt+0x4c>
   106b0:	andeq	r0, r1, sl, lsr #17
   106b4:	andeq	r0, r1, ip, asr #17
   106b8:	andeq	r0, r1, ip, lsl #18
   106bc:	andeq	r0, r1, r6, lsl r9
   106c0:	andeq	r0, r1, r5, lsl #18
   106c4:	andeq	r0, r1, r1, lsl r9
   106c8:	andeq	r0, r1, r0, lsl #18
   106cc:	andeq	r0, r1, sp, lsl r9
   106d0:	andeq	r0, r1, pc, lsr r9
   106d4:	andeq	r0, r1, ip, lsl #17
   106d8:	andeq	r1, r0, r1
   106dc:	muleq	r1, fp, r8
   106e0:	andeq	r1, r0, r2
   106e4:	andeq	r1, r2, r8, asr #32
   106e8:	andeq	r0, r1, r1, lsr r9
   106ec:	andeq	r0, r1, r0, asr #18
   106f0:	andeq	r0, r1, r3, asr #18
   106f4:	mov	fp, #0
   106f8:	mov	lr, #0
   106fc:	pop	{r1}		; (ldr r1, [sp], #4)
   10700:	mov	r2, sp
   10704:	push	{r2}		; (str r2, [sp, #-4]!)
   10708:	push	{r0}		; (str r0, [sp, #-4]!)
   1070c:	ldr	ip, [pc, #16]	; 10724 <fputs@plt+0x1e8>
   10710:	push	{ip}		; (str ip, [sp, #-4]!)
   10714:	ldr	r0, [pc, #12]	; 10728 <fputs@plt+0x1ec>
   10718:	ldr	r3, [pc, #12]	; 1072c <fputs@plt+0x1f0>
   1071c:	bl	104d0 <__libc_start_main@plt>
   10720:	bl	104c4 <abort@plt>
   10724:	andeq	r0, r1, ip, ror r8
   10728:	andeq	r0, r1, r8, asr #10
   1072c:	andeq	r0, r1, ip, lsl r8
   10730:	ldr	r3, [pc, #20]	; 1074c <fputs@plt+0x210>
   10734:	ldr	r2, [pc, #20]	; 10750 <fputs@plt+0x214>
   10738:	add	r3, pc, r3
   1073c:	ldr	r2, [r3, r2]
   10740:	cmp	r2, #0
   10744:	bxeq	lr
   10748:	b	104dc <__gmon_start__@plt>
   1074c:	andeq	r0, r1, r0, asr #17
   10750:	andeq	r0, r0, r8, lsr r0
   10754:	ldr	r3, [pc, #28]	; 10778 <fputs@plt+0x23c>
   10758:	ldr	r0, [pc, #28]	; 1077c <fputs@plt+0x240>
   1075c:	sub	r3, r3, r0
   10760:	cmp	r3, #6
   10764:	bxls	lr
   10768:	ldr	r3, [pc, #16]	; 10780 <fputs@plt+0x244>
   1076c:	cmp	r3, #0
   10770:	bxeq	lr
   10774:	bx	r3
   10778:	andeq	r1, r2, r7, asr #32
   1077c:	andeq	r1, r2, r4, asr #32
   10780:	andeq	r0, r0, r0
   10784:	ldr	r1, [pc, #36]	; 107b0 <fputs@plt+0x274>
   10788:	ldr	r0, [pc, #36]	; 107b4 <fputs@plt+0x278>
   1078c:	sub	r1, r1, r0
   10790:	asr	r1, r1, #2
   10794:	add	r1, r1, r1, lsr #31
   10798:	asrs	r1, r1, #1
   1079c:	bxeq	lr
   107a0:	ldr	r3, [pc, #16]	; 107b8 <fputs@plt+0x27c>
   107a4:	cmp	r3, #0
   107a8:	bxeq	lr
   107ac:	bx	r3
   107b0:	andeq	r1, r2, r4, asr #32
   107b4:	andeq	r1, r2, r4, asr #32
   107b8:	andeq	r0, r0, r0
   107bc:	push	{r4, lr}
   107c0:	ldr	r4, [pc, #24]	; 107e0 <fputs@plt+0x2a4>
   107c4:	ldrb	r3, [r4]
   107c8:	cmp	r3, #0
   107cc:	popne	{r4, pc}
   107d0:	bl	10754 <fputs@plt+0x218>
   107d4:	mov	r3, #1
   107d8:	strb	r3, [r4]
   107dc:	pop	{r4, pc}
   107e0:	andeq	r1, r2, ip, asr #32
   107e4:	ldr	r0, [pc, #40]	; 10814 <fputs@plt+0x2d8>
   107e8:	ldr	r3, [r0]
   107ec:	cmp	r3, #0
   107f0:	bne	107f8 <fputs@plt+0x2bc>
   107f4:	b	10784 <fputs@plt+0x248>
   107f8:	ldr	r3, [pc, #24]	; 10818 <fputs@plt+0x2dc>
   107fc:	cmp	r3, #0
   10800:	beq	107f4 <fputs@plt+0x2b8>
   10804:	push	{r4, lr}
   10808:	blx	r3
   1080c:	pop	{r4, lr}
   10810:	b	10784 <fputs@plt+0x248>
   10814:	strdeq	r0, [r2], -ip
   10818:	andeq	r0, r0, r0
   1081c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10820:	mov	r7, r0
   10824:	ldr	r6, [pc, #72]	; 10874 <fputs@plt+0x338>
   10828:	ldr	r5, [pc, #72]	; 10878 <fputs@plt+0x33c>
   1082c:	add	r6, pc, r6
   10830:	add	r5, pc, r5
   10834:	sub	r6, r6, r5
   10838:	mov	r8, r1
   1083c:	mov	r9, r2
   10840:	bl	104a4 <abort@plt-0x20>
   10844:	asrs	r6, r6, #2
   10848:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1084c:	mov	r4, #0
   10850:	add	r4, r4, #1
   10854:	ldr	r3, [r5], #4
   10858:	mov	r2, r9
   1085c:	mov	r1, r8
   10860:	mov	r0, r7
   10864:	blx	r3
   10868:	cmp	r6, r4
   1086c:	bne	10850 <fputs@plt+0x314>
   10870:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10874:	andeq	r0, r1, r4, asr #13
   10878:			; <UNDEFINED> instruction: 0x000106bc
   1087c:	bx	lr

Disassembly of section .fini:

00010880 <.fini>:
   10880:	push	{r3, lr}
   10884:	pop	{r3, pc}
