
../repos/prog2/0.9:     file format elf32-littlearm


Disassembly of section .init:

0001063c <.init>:
   1063c:	push	{r3, lr}
   10640:	bl	107b8 <_start@@Base+0x3c>
   10644:	pop	{r3, pc}

Disassembly of section .plt:

00010648 <strcmp@plt-0x14>:
   10648:	push	{lr}		; (str lr, [sp, #-4]!)
   1064c:	ldr	lr, [pc, #4]	; 10658 <strcmp@plt-0x4>
   10650:	add	lr, pc, lr
   10654:	ldr	pc, [lr, #8]!
   10658:	andeq	r0, r1, r8, lsr #19

0001065c <strcmp@plt>:
   1065c:	add	ip, pc, #0, 12
   10660:	add	ip, ip, #16, 20	; 0x10000
   10664:	ldr	pc, [ip, #2472]!	; 0x9a8

00010668 <printf@plt>:
   10668:	add	ip, pc, #0, 12
   1066c:	add	ip, ip, #16, 20	; 0x10000
   10670:	ldr	pc, [ip, #2464]!	; 0x9a0

00010674 <strcat@plt>:
   10674:	add	ip, pc, #0, 12
   10678:	add	ip, ip, #16, 20	; 0x10000
   1067c:	ldr	pc, [ip, #2456]!	; 0x998

00010680 <__libc_start_main@plt>:
   10680:	add	ip, pc, #0, 12
   10684:	add	ip, ip, #16, 20	; 0x10000
   10688:	ldr	pc, [ip, #2448]!	; 0x990

0001068c <__gmon_start__@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2440]!	; 0x988

00010698 <memset@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #16, 20	; 0x10000
   106a0:	ldr	pc, [ip, #2432]!	; 0x980

000106a4 <__isoc99_scanf@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2424]!	; 0x978

000106b0 <abort@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2416]!	; 0x970

Disassembly of section .text:

000106bc <main@@Base>:
   106bc:	push	{r4, r5, r6, r7, r8, lr}
   106c0:	sub	sp, sp, #20736	; 0x5100
   106c4:	mov	r5, #0
   106c8:	sub	sp, sp, #64	; 0x40
   106cc:	mov	r7, r5
   106d0:	mov	r0, sp
   106d4:	mov	r6, sp
   106d8:	ldr	r8, [pc, #140]	; 1076c <main@@Base+0xb0>
   106dc:	bl	1086c <ler_albuns@@Base>
   106e0:	mov	r1, r0
   106e4:	mov	r4, r0
   106e8:	mov	r0, sp
   106ec:	bl	10904 <lista_albuns@@Base>
   106f0:	mov	r1, r4
   106f4:	ldr	r0, [pc, #116]	; 10770 <main@@Base+0xb4>
   106f8:	bl	10668 <printf@plt>
   106fc:	cmp	r4, r7
   10700:	bgt	10740 <main@@Base+0x84>
   10704:	mov	r1, r5
   10708:	ldr	r0, [pc, #100]	; 10774 <main@@Base+0xb8>
   1070c:	bl	10668 <printf@plt>
   10710:	mov	r3, #0
   10714:	ldr	r2, [pc, #80]	; 1076c <main@@Base+0xb0>
   10718:	mov	r1, r4
   1071c:	mov	r0, sp
   10720:	bl	10954 <albuns_artista@@Base>
   10724:	mov	r1, r0
   10728:	ldr	r0, [pc, #72]	; 10778 <main@@Base+0xbc>
   1072c:	bl	10668 <printf@plt>
   10730:	mov	r0, #0
   10734:	add	sp, sp, #20736	; 0x5100
   10738:	add	sp, sp, #64	; 0x40
   1073c:	pop	{r4, r5, r6, r7, r8, pc}
   10740:	mov	r1, r6
   10744:	mov	r0, r8
   10748:	bl	1065c <strcmp@plt>
   1074c:	cmp	r0, #0
   10750:	bne	10760 <main@@Base+0xa4>
   10754:	ldr	r3, [r6, #204]	; 0xcc
   10758:	cmp	r3, #1
   1075c:	addeq	r5, r5, #1
   10760:	add	r7, r7, #1
   10764:	add	r6, r6, #208	; 0xd0
   10768:	b	106fc <main@@Base+0x40>
   1076c:	andeq	r0, r1, sl, lsl #21
   10770:	andeq	r0, r1, sl, ror #20
   10774:	muleq	r1, r9, sl
   10778:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>

0001077c <_start@@Base>:
   1077c:	mov	fp, #0
   10780:	mov	lr, #0
   10784:	pop	{r1}		; (ldr r1, [sp], #4)
   10788:	mov	r2, sp
   1078c:	push	{r2}		; (str r2, [sp, #-4]!)
   10790:	push	{r0}		; (str r0, [sp, #-4]!)
   10794:	ldr	ip, [pc, #16]	; 107ac <_start@@Base+0x30>
   10798:	push	{ip}		; (str ip, [sp, #-4]!)
   1079c:	ldr	r0, [pc, #12]	; 107b0 <_start@@Base+0x34>
   107a0:	ldr	r3, [pc, #12]	; 107b4 <_start@@Base+0x38>
   107a4:	bl	10680 <__libc_start_main@plt>
   107a8:	bl	106b0 <abort@plt>
   107ac:	andeq	r0, r1, ip, lsr sl
   107b0:			; <UNDEFINED> instruction: 0x000106bc
   107b4:	ldrdeq	r0, [r1], -ip
   107b8:	ldr	r3, [pc, #20]	; 107d4 <_start@@Base+0x58>
   107bc:	ldr	r2, [pc, #20]	; 107d8 <_start@@Base+0x5c>
   107c0:	add	r3, pc, r3
   107c4:	ldr	r2, [r3, r2]
   107c8:	cmp	r2, #0
   107cc:	bxeq	lr
   107d0:	b	1068c <__gmon_start__@plt>
   107d4:	andeq	r0, r1, r8, lsr r8
   107d8:	andeq	r0, r0, ip, lsr #32
   107dc:	ldr	r0, [pc, #24]	; 107fc <_start@@Base+0x80>
   107e0:	ldr	r3, [pc, #24]	; 10800 <_start@@Base+0x84>
   107e4:	cmp	r3, r0
   107e8:	bxeq	lr
   107ec:	ldr	r3, [pc, #16]	; 10804 <_start@@Base+0x88>
   107f0:	cmp	r3, #0
   107f4:	bxeq	lr
   107f8:	bx	r3
   107fc:	andeq	r1, r2, r8, lsr r0
   10800:	andeq	r1, r2, r8, lsr r0
   10804:	andeq	r0, r0, r0
   10808:	ldr	r0, [pc, #36]	; 10834 <_start@@Base+0xb8>
   1080c:	ldr	r1, [pc, #36]	; 10838 <_start@@Base+0xbc>
   10810:	sub	r1, r1, r0
   10814:	asr	r1, r1, #2
   10818:	add	r1, r1, r1, lsr #31
   1081c:	asrs	r1, r1, #1
   10820:	bxeq	lr
   10824:	ldr	r3, [pc, #16]	; 1083c <_start@@Base+0xc0>
   10828:	cmp	r3, #0
   1082c:	bxeq	lr
   10830:	bx	r3
   10834:	andeq	r1, r2, r8, lsr r0
   10838:	andeq	r1, r2, r8, lsr r0
   1083c:	andeq	r0, r0, r0
   10840:	push	{r4, lr}
   10844:	ldr	r4, [pc, #24]	; 10864 <_start@@Base+0xe8>
   10848:	ldrb	r3, [r4]
   1084c:	cmp	r3, #0
   10850:	popne	{r4, pc}
   10854:	bl	107dc <_start@@Base+0x60>
   10858:	mov	r3, #1
   1085c:	strb	r3, [r4]
   10860:	pop	{r4, pc}
   10864:	andeq	r1, r2, r8, lsr r0
   10868:	b	10808 <_start@@Base+0x8c>

0001086c <ler_albuns@@Base>:
   1086c:	push	{r4, r5, r6, r7, r8, lr}
   10870:	sub	sp, sp, #24
   10874:	mov	r4, r0
   10878:	mov	r2, #15
   1087c:	mov	r1, #0
   10880:	add	r0, sp, #8
   10884:	mov	r5, #0
   10888:	ldr	r7, [pc, #108]	; 108fc <ler_albuns@@Base+0x90>
   1088c:	bl	10698 <memset@plt>
   10890:	ldr	r8, [pc, #104]	; 10900 <ler_albuns@@Base+0x94>
   10894:	add	r3, r4, #204	; 0xcc
   10898:	add	r2, sp, #8
   1089c:	mov	r1, r4
   108a0:	mov	r0, r7
   108a4:	str	r3, [sp, #4]
   108a8:	add	r3, r4, #200	; 0xc8
   108ac:	mov	r6, r4
   108b0:	str	r3, [sp]
   108b4:	add	r3, r4, #100	; 0x64
   108b8:	bl	106a4 <__isoc99_scanf@plt>
   108bc:	cmp	r0, #5
   108c0:	bne	108d0 <ler_albuns@@Base+0x64>
   108c4:	cmp	r5, #100	; 0x64
   108c8:	add	r4, r4, #208	; 0xd0
   108cc:	bne	108dc <ler_albuns@@Base+0x70>
   108d0:	mov	r0, r5
   108d4:	add	sp, sp, #24
   108d8:	pop	{r4, r5, r6, r7, r8, pc}
   108dc:	mov	r1, r8
   108e0:	mov	r0, r6
   108e4:	bl	10674 <strcat@plt>
   108e8:	add	r1, sp, #8
   108ec:	mov	r0, r6
   108f0:	bl	10674 <strcat@plt>
   108f4:	add	r5, r5, #1
   108f8:	b	10894 <ler_albuns@@Base+0x28>
   108fc:	andeq	r0, r1, lr, asr #20
   10900:	andeq	r0, r1, ip, asr #20

00010904 <lista_albuns@@Base>:
   10904:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10908:	mov	r6, r1
   1090c:	mov	r4, r0
   10910:	mov	r5, #0
   10914:	ldr	r7, [pc, #52]	; 10950 <lista_albuns@@Base+0x4c>
   10918:	cmp	r5, r6
   1091c:	blt	10928 <lista_albuns@@Base+0x24>
   10920:	add	sp, sp, #12
   10924:	pop	{r4, r5, r6, r7, pc}
   10928:	ldr	r3, [r4, #204]	; 0xcc
   1092c:	add	r2, r4, #100	; 0x64
   10930:	mov	r1, r4
   10934:	mov	r0, r7
   10938:	add	r5, r5, #1
   1093c:	add	r4, r4, #208	; 0xd0
   10940:	str	r3, [sp]
   10944:	ldr	r3, [r4, #-8]
   10948:	bl	10668 <printf@plt>
   1094c:	b	10918 <lista_albuns@@Base+0x14>
   10950:	andeq	r0, r1, sp, asr sl

00010954 <albuns_artista@@Base>:
   10954:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10958:	subs	r6, r3, #0
   1095c:	mov	r5, r0
   10960:	movne	r4, #0
   10964:	mov	r8, r1
   10968:	mov	r9, r2
   1096c:	movne	r7, r4
   10970:	bne	109d0 <albuns_artista@@Base+0x7c>
   10974:	mov	r4, r6
   10978:	mov	r7, #208	; 0xd0
   1097c:	b	10998 <albuns_artista@@Base+0x44>
   10980:	mla	r1, r7, r6, r5
   10984:	mov	r0, r9
   10988:	add	r6, r6, #1
   1098c:	bl	1065c <strcmp@plt>
   10990:	cmp	r0, #0
   10994:	addeq	r4, r4, #1
   10998:	cmp	r6, r8
   1099c:	blt	10980 <albuns_artista@@Base+0x2c>
   109a0:	mov	r0, r4
   109a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   109a8:	mov	r1, r5
   109ac:	mov	r0, r9
   109b0:	bl	1065c <strcmp@plt>
   109b4:	cmp	r0, #0
   109b8:	bne	109c8 <albuns_artista@@Base+0x74>
   109bc:	ldr	r3, [r5, #204]	; 0xcc
   109c0:	cmp	r6, r3
   109c4:	addeq	r4, r4, #1
   109c8:	add	r7, r7, #1
   109cc:	add	r5, r5, #208	; 0xd0
   109d0:	cmp	r8, r7
   109d4:	bgt	109a8 <albuns_artista@@Base+0x54>
   109d8:	b	109a0 <albuns_artista@@Base+0x4c>

000109dc <__libc_csu_init@@Base>:
   109dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   109e0:	mov	r7, r0
   109e4:	ldr	r6, [pc, #72]	; 10a34 <__libc_csu_init@@Base+0x58>
   109e8:	ldr	r5, [pc, #72]	; 10a38 <__libc_csu_init@@Base+0x5c>
   109ec:	add	r6, pc, r6
   109f0:	add	r5, pc, r5
   109f4:	sub	r6, r6, r5
   109f8:	mov	r8, r1
   109fc:	mov	r9, r2
   10a00:	bl	1063c <strcmp@plt-0x20>
   10a04:	asrs	r6, r6, #2
   10a08:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a0c:	mov	r4, #0
   10a10:	add	r4, r4, #1
   10a14:	ldr	r3, [r5], #4
   10a18:	mov	r2, r9
   10a1c:	mov	r1, r8
   10a20:	mov	r0, r7
   10a24:	blx	r3
   10a28:	cmp	r6, r4
   10a2c:	bne	10a10 <__libc_csu_init@@Base+0x34>
   10a30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a34:	andeq	r0, r1, r0, lsr #10
   10a38:	andeq	r0, r1, r8, lsl r5

00010a3c <__libc_csu_fini@@Base>:
   10a3c:	bx	lr

Disassembly of section .fini:

00010a40 <.fini>:
   10a40:	push	{r3, lr}
   10a44:	pop	{r3, pc}
