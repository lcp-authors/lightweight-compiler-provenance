
../repos/coreutils/src/tr:     file format elf32-littlearm


Disassembly of section .init:

00010e10 <.init>:
   10e10:	push	{r3, lr}
   10e14:	bl	110ec <__assert_fail@plt+0x4c>
   10e18:	pop	{r3, pc}

Disassembly of section .plt:

00010e1c <calloc@plt-0x14>:
   10e1c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e20:	ldr	lr, [pc, #4]	; 10e2c <calloc@plt-0x4>
   10e24:	add	lr, pc, lr
   10e28:	ldr	pc, [lr, #8]!
   10e2c:	ldrdeq	r9, [r1], -r4

00010e30 <calloc@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #102400	; 0x19000
   10e38:	ldr	pc, [ip, #468]!	; 0x1d4

00010e3c <fputs_unlocked@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #102400	; 0x19000
   10e44:	ldr	pc, [ip, #460]!	; 0x1cc

00010e48 <raise@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #102400	; 0x19000
   10e50:	ldr	pc, [ip, #452]!	; 0x1c4

00010e54 <strcmp@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #102400	; 0x19000
   10e5c:	ldr	pc, [ip, #444]!	; 0x1bc

00010e60 <posix_fadvise64@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #102400	; 0x19000
   10e68:	ldr	pc, [ip, #436]!	; 0x1b4

00010e6c <read@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #102400	; 0x19000
   10e74:	ldr	pc, [ip, #428]!	; 0x1ac

00010e78 <fflush@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #102400	; 0x19000
   10e80:	ldr	pc, [ip, #420]!	; 0x1a4

00010e84 <free@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #102400	; 0x19000
   10e8c:	ldr	pc, [ip, #412]!	; 0x19c

00010e90 <_exit@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #102400	; 0x19000
   10e98:	ldr	pc, [ip, #404]!	; 0x194

00010e9c <memcpy@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #102400	; 0x19000
   10ea4:	ldr	pc, [ip, #396]!	; 0x18c

00010ea8 <__strtoull_internal@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #102400	; 0x19000
   10eb0:	ldr	pc, [ip, #388]!	; 0x184

00010eb4 <mbsinit@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #102400	; 0x19000
   10ebc:	ldr	pc, [ip, #380]!	; 0x17c

00010ec0 <fwrite_unlocked@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #102400	; 0x19000
   10ec8:	ldr	pc, [ip, #372]!	; 0x174

00010ecc <memcmp@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #102400	; 0x19000
   10ed4:	ldr	pc, [ip, #364]!	; 0x16c

00010ed8 <stpcpy@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #102400	; 0x19000
   10ee0:	ldr	pc, [ip, #356]!	; 0x164

00010ee4 <dcgettext@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #102400	; 0x19000
   10eec:	ldr	pc, [ip, #348]!	; 0x15c

00010ef0 <realloc@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #102400	; 0x19000
   10ef8:	ldr	pc, [ip, #340]!	; 0x154

00010efc <textdomain@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #102400	; 0x19000
   10f04:	ldr	pc, [ip, #332]!	; 0x14c

00010f08 <iswprint@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #102400	; 0x19000
   10f10:	ldr	pc, [ip, #324]!	; 0x144

00010f14 <fwrite@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #102400	; 0x19000
   10f1c:	ldr	pc, [ip, #316]!	; 0x13c

00010f20 <lseek64@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #102400	; 0x19000
   10f28:	ldr	pc, [ip, #308]!	; 0x134

00010f2c <__ctype_get_mb_cur_max@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #102400	; 0x19000
   10f34:	ldr	pc, [ip, #300]!	; 0x12c

00010f38 <__fpending@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #102400	; 0x19000
   10f40:	ldr	pc, [ip, #292]!	; 0x124

00010f44 <mbrtowc@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #102400	; 0x19000
   10f4c:	ldr	pc, [ip, #284]!	; 0x11c

00010f50 <error@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #102400	; 0x19000
   10f58:	ldr	pc, [ip, #276]!	; 0x114

00010f5c <malloc@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #102400	; 0x19000
   10f64:	ldr	pc, [ip, #268]!	; 0x10c

00010f68 <__libc_start_main@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #102400	; 0x19000
   10f70:	ldr	pc, [ip, #260]!	; 0x104

00010f74 <__freading@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #102400	; 0x19000
   10f7c:	ldr	pc, [ip, #252]!	; 0xfc

00010f80 <__ctype_tolower_loc@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #102400	; 0x19000
   10f88:	ldr	pc, [ip, #244]!	; 0xf4

00010f8c <__ctype_toupper_loc@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #102400	; 0x19000
   10f94:	ldr	pc, [ip, #236]!	; 0xec

00010f98 <__gmon_start__@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #102400	; 0x19000
   10fa0:	ldr	pc, [ip, #228]!	; 0xe4

00010fa4 <getopt_long@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #102400	; 0x19000
   10fac:	ldr	pc, [ip, #220]!	; 0xdc

00010fb0 <__ctype_b_loc@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #102400	; 0x19000
   10fb8:	ldr	pc, [ip, #212]!	; 0xd4

00010fbc <exit@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #102400	; 0x19000
   10fc4:	ldr	pc, [ip, #204]!	; 0xcc

00010fc8 <strlen@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #102400	; 0x19000
   10fd0:	ldr	pc, [ip, #196]!	; 0xc4

00010fd4 <strchr@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #102400	; 0x19000
   10fdc:	ldr	pc, [ip, #188]!	; 0xbc

00010fe0 <__errno_location@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #102400	; 0x19000
   10fe8:	ldr	pc, [ip, #180]!	; 0xb4

00010fec <__sprintf_chk@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #102400	; 0x19000
   10ff4:	ldr	pc, [ip, #172]!	; 0xac

00010ff8 <__cxa_atexit@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #102400	; 0x19000
   11000:	ldr	pc, [ip, #164]!	; 0xa4

00011004 <memset@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #102400	; 0x19000
   1100c:	ldr	pc, [ip, #156]!	; 0x9c

00011010 <__printf_chk@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #102400	; 0x19000
   11018:	ldr	pc, [ip, #148]!	; 0x94

0001101c <fileno@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #102400	; 0x19000
   11024:	ldr	pc, [ip, #140]!	; 0x8c

00011028 <__fprintf_chk@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #102400	; 0x19000
   11030:	ldr	pc, [ip, #132]!	; 0x84

00011034 <fclose@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #102400	; 0x19000
   1103c:	ldr	pc, [ip, #124]!	; 0x7c

00011040 <fseeko64@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #102400	; 0x19000
   11048:	ldr	pc, [ip, #116]!	; 0x74

0001104c <setlocale@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #102400	; 0x19000
   11054:	ldr	pc, [ip, #108]!	; 0x6c

00011058 <strrchr@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #102400	; 0x19000
   11060:	ldr	pc, [ip, #100]!	; 0x64

00011064 <nl_langinfo@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #102400	; 0x19000
   1106c:	ldr	pc, [ip, #92]!	; 0x5c

00011070 <bindtextdomain@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #102400	; 0x19000
   11078:	ldr	pc, [ip, #84]!	; 0x54

0001107c <strncmp@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #102400	; 0x19000
   11084:	ldr	pc, [ip, #76]!	; 0x4c

00011088 <abort@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #102400	; 0x19000
   11090:	ldr	pc, [ip, #68]!	; 0x44

00011094 <close@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #102400	; 0x19000
   1109c:	ldr	pc, [ip, #60]!	; 0x3c

000110a0 <__assert_fail@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #102400	; 0x19000
   110a8:	ldr	pc, [ip, #52]!	; 0x34

Disassembly of section .text:

000110b0 <.text>:
   110b0:	mov	fp, #0
   110b4:	mov	lr, #0
   110b8:	pop	{r1}		; (ldr r1, [sp], #4)
   110bc:	mov	r2, sp
   110c0:	push	{r2}		; (str r2, [sp, #-4]!)
   110c4:	push	{r0}		; (str r0, [sp, #-4]!)
   110c8:	ldr	ip, [pc, #16]	; 110e0 <__assert_fail@plt+0x40>
   110cc:	push	{ip}		; (str ip, [sp, #-4]!)
   110d0:	ldr	r0, [pc, #12]	; 110e4 <__assert_fail@plt+0x44>
   110d4:	ldr	r3, [pc, #12]	; 110e8 <__assert_fail@plt+0x48>
   110d8:	bl	10f68 <__libc_start_main@plt>
   110dc:	bl	11088 <abort@plt>
   110e0:	andeq	r7, r1, r0, asr pc
   110e4:	andeq	r1, r1, r0, ror #8
   110e8:	strdeq	r7, [r1], -r0
   110ec:	ldr	r3, [pc, #20]	; 11108 <__assert_fail@plt+0x68>
   110f0:	ldr	r2, [pc, #20]	; 1110c <__assert_fail@plt+0x6c>
   110f4:	add	r3, pc, r3
   110f8:	ldr	r2, [r3, r2]
   110fc:	cmp	r2, #0
   11100:	bxeq	lr
   11104:	b	10f98 <__gmon_start__@plt>
   11108:	andeq	r8, r1, r4, lsl #30
   1110c:	andeq	r0, r0, r0, ror #1
   11110:	ldr	r0, [pc, #24]	; 11130 <__assert_fail@plt+0x90>
   11114:	ldr	r3, [pc, #24]	; 11134 <__assert_fail@plt+0x94>
   11118:	cmp	r3, r0
   1111c:	bxeq	lr
   11120:	ldr	r3, [pc, #16]	; 11138 <__assert_fail@plt+0x98>
   11124:	cmp	r3, #0
   11128:	bxeq	lr
   1112c:	bx	r3
   11130:	andeq	sl, r2, r8, lsr r1
   11134:	andeq	sl, r2, r8, lsr r1
   11138:	andeq	r0, r0, r0
   1113c:	ldr	r0, [pc, #36]	; 11168 <__assert_fail@plt+0xc8>
   11140:	ldr	r1, [pc, #36]	; 1116c <__assert_fail@plt+0xcc>
   11144:	sub	r1, r1, r0
   11148:	asr	r1, r1, #2
   1114c:	add	r1, r1, r1, lsr #31
   11150:	asrs	r1, r1, #1
   11154:	bxeq	lr
   11158:	ldr	r3, [pc, #16]	; 11170 <__assert_fail@plt+0xd0>
   1115c:	cmp	r3, #0
   11160:	bxeq	lr
   11164:	bx	r3
   11168:	andeq	sl, r2, r8, lsr r1
   1116c:	andeq	sl, r2, r8, lsr r1
   11170:	andeq	r0, r0, r0
   11174:	push	{r4, lr}
   11178:	ldr	r4, [pc, #24]	; 11198 <__assert_fail@plt+0xf8>
   1117c:	ldrb	r3, [r4]
   11180:	cmp	r3, #0
   11184:	popne	{r4, pc}
   11188:	bl	11110 <__assert_fail@plt+0x70>
   1118c:	mov	r3, #1
   11190:	strb	r3, [r4]
   11194:	pop	{r4, pc}
   11198:	andeq	sl, r2, r0, ror #2
   1119c:	b	1113c <__assert_fail@plt+0x9c>
   111a0:	push	{fp, lr}
   111a4:	mov	fp, sp
   111a8:	sub	sp, sp, #56	; 0x38
   111ac:	mov	r4, r0
   111b0:	cmp	r0, #0
   111b4:	bne	11410 <__assert_fail@plt+0x370>
   111b8:	movw	r1, #32675	; 0x7fa3
   111bc:	mov	r0, #0
   111c0:	mov	r2, #5
   111c4:	movt	r1, #1
   111c8:	bl	10ee4 <dcgettext@plt>
   111cc:	mov	r1, r0
   111d0:	movw	r0, #50312	; 0xc488
   111d4:	movt	r0, #2
   111d8:	ldr	r2, [r0]
   111dc:	mov	r0, #1
   111e0:	bl	11010 <__printf_chk@plt>
   111e4:	movw	r1, #32710	; 0x7fc6
   111e8:	mov	r0, #0
   111ec:	mov	r2, #5
   111f0:	movt	r1, #1
   111f4:	bl	10ee4 <dcgettext@plt>
   111f8:	movw	r7, #41308	; 0xa15c
   111fc:	movt	r7, #2
   11200:	ldr	r1, [r7]
   11204:	bl	10e3c <fputs_unlocked@plt>
   11208:	movw	r1, #33206	; 0x81b6
   1120c:	mov	r0, #0
   11210:	mov	r2, #5
   11214:	movt	r1, #1
   11218:	bl	10ee4 <dcgettext@plt>
   1121c:	ldr	r1, [r7]
   11220:	bl	10e3c <fputs_unlocked@plt>
   11224:	movw	r1, #33251	; 0x81e3
   11228:	mov	r0, #0
   1122c:	mov	r2, #5
   11230:	movt	r1, #1
   11234:	bl	10ee4 <dcgettext@plt>
   11238:	ldr	r1, [r7]
   1123c:	bl	10e3c <fputs_unlocked@plt>
   11240:	movw	r1, #33305	; 0x8219
   11244:	mov	r0, #0
   11248:	mov	r2, #5
   1124c:	movt	r1, #1
   11250:	bl	10ee4 <dcgettext@plt>
   11254:	ldr	r1, [r7]
   11258:	bl	10e3c <fputs_unlocked@plt>
   1125c:	movw	r1, #33678	; 0x838e
   11260:	mov	r0, #0
   11264:	mov	r2, #5
   11268:	movt	r1, #1
   1126c:	bl	10ee4 <dcgettext@plt>
   11270:	ldr	r1, [r7]
   11274:	bl	10e3c <fputs_unlocked@plt>
   11278:	movw	r1, #34103	; 0x8537
   1127c:	mov	r0, #0
   11280:	mov	r2, #5
   11284:	movt	r1, #1
   11288:	bl	10ee4 <dcgettext@plt>
   1128c:	ldr	r1, [r7]
   11290:	bl	10e3c <fputs_unlocked@plt>
   11294:	movw	r1, #34514	; 0x86d2
   11298:	mov	r0, #0
   1129c:	mov	r2, #5
   112a0:	movt	r1, #1
   112a4:	bl	10ee4 <dcgettext@plt>
   112a8:	ldr	r1, [r7]
   112ac:	bl	10e3c <fputs_unlocked@plt>
   112b0:	movw	r0, #37952	; 0x9440
   112b4:	mov	r2, #48	; 0x30
   112b8:	mov	r6, sp
   112bc:	movw	r5, #34986	; 0x88aa
   112c0:	movt	r0, #1
   112c4:	movt	r5, #1
   112c8:	add	r1, r0, #32
   112cc:	add	r3, r0, #16
   112d0:	vld1.64	{d18-d19}, [r0], r2
   112d4:	vld1.64	{d16-d17}, [r1]
   112d8:	vld1.64	{d20-d21}, [r3]
   112dc:	add	r1, r6, #32
   112e0:	vldr	d22, [r0]
   112e4:	add	r0, r6, #16
   112e8:	vst1.64	{d16-d17}, [r1]
   112ec:	movw	r1, #35401	; 0x8a49
   112f0:	vst1.64	{d20-d21}, [r0]
   112f4:	mov	r0, r6
   112f8:	vst1.64	{d18-d19}, [r0], r2
   112fc:	movt	r1, #1
   11300:	vstr	d22, [r0]
   11304:	mov	r0, r5
   11308:	bl	10e54 <strcmp@plt>
   1130c:	cmp	r0, #0
   11310:	ldrne	r1, [r6, #8]!
   11314:	cmpne	r1, #0
   11318:	bne	11304 <__assert_fail@plt+0x264>
   1131c:	ldr	r6, [r6, #4]
   11320:	movw	r1, #35496	; 0x8aa8
   11324:	mov	r0, #0
   11328:	mov	r2, #5
   1132c:	movt	r1, #1
   11330:	bl	10ee4 <dcgettext@plt>
   11334:	movw	r2, #35023	; 0x88cf
   11338:	movw	r3, #35519	; 0x8abf
   1133c:	mov	r1, r0
   11340:	mov	r0, #1
   11344:	movt	r2, #1
   11348:	movt	r3, #1
   1134c:	bl	11010 <__printf_chk@plt>
   11350:	cmp	r6, #0
   11354:	mov	r0, #5
   11358:	mov	r1, #0
   1135c:	moveq	r6, r5
   11360:	bl	1104c <setlocale@plt>
   11364:	cmp	r0, #0
   11368:	beq	113a0 <__assert_fail@plt+0x300>
   1136c:	movw	r1, #35559	; 0x8ae7
   11370:	mov	r2, #3
   11374:	movt	r1, #1
   11378:	bl	1107c <strncmp@plt>
   1137c:	cmp	r0, #0
   11380:	beq	113a0 <__assert_fail@plt+0x300>
   11384:	movw	r1, #35563	; 0x8aeb
   11388:	mov	r0, #0
   1138c:	mov	r2, #5
   11390:	movt	r1, #1
   11394:	bl	10ee4 <dcgettext@plt>
   11398:	ldr	r1, [r7]
   1139c:	bl	10e3c <fputs_unlocked@plt>
   113a0:	movw	r1, #35634	; 0x8b32
   113a4:	mov	r0, #0
   113a8:	mov	r2, #5
   113ac:	movt	r1, #1
   113b0:	bl	10ee4 <dcgettext@plt>
   113b4:	movw	r2, #35519	; 0x8abf
   113b8:	mov	r1, r0
   113bc:	mov	r0, #1
   113c0:	mov	r3, r5
   113c4:	movt	r2, #1
   113c8:	bl	11010 <__printf_chk@plt>
   113cc:	movw	r1, #35661	; 0x8b4d
   113d0:	mov	r0, #0
   113d4:	mov	r2, #5
   113d8:	movt	r1, #1
   113dc:	bl	10ee4 <dcgettext@plt>
   113e0:	movw	r3, #35711	; 0x8b7f
   113e4:	mov	r1, r0
   113e8:	movw	r0, #35429	; 0x8a65
   113ec:	cmp	r6, r5
   113f0:	mov	r2, r6
   113f4:	movt	r0, #1
   113f8:	movt	r3, #1
   113fc:	moveq	r3, r0
   11400:	mov	r0, #1
   11404:	bl	11010 <__printf_chk@plt>
   11408:	mov	r0, r4
   1140c:	bl	10fbc <exit@plt>
   11410:	movw	r0, #41296	; 0xa150
   11414:	movw	r1, #32636	; 0x7f7c
   11418:	mov	r2, #5
   1141c:	movt	r0, #2
   11420:	movt	r1, #1
   11424:	ldr	r5, [r0]
   11428:	mov	r0, #0
   1142c:	bl	10ee4 <dcgettext@plt>
   11430:	mov	r2, r0
   11434:	movw	r0, #50312	; 0xc488
   11438:	mov	r1, #1
   1143c:	movt	r0, #2
   11440:	ldr	r3, [r0]
   11444:	mov	r0, r5
   11448:	bl	11028 <__fprintf_chk@plt>
   1144c:	mov	r0, r4
   11450:	bl	10fbc <exit@plt>
   11454:	nop	{0}
   11458:	nop	{0}
   1145c:	nop	{0}
   11460:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11464:	add	fp, sp, #28
   11468:	sub	sp, sp, #420	; 0x1a4
   1146c:	mov	r4, r0
   11470:	ldr	r0, [r1]
   11474:	mov	r9, r1
   11478:	bl	141dc <__assert_fail@plt+0x313c>
   1147c:	movw	r1, #35711	; 0x8b7f
   11480:	mov	r0, #6
   11484:	movt	r1, #1
   11488:	bl	1104c <setlocale@plt>
   1148c:	movw	r6, #35027	; 0x88d3
   11490:	movw	r1, #34989	; 0x88ad
   11494:	movt	r6, #1
   11498:	movt	r1, #1
   1149c:	mov	r0, r6
   114a0:	bl	11070 <bindtextdomain@plt>
   114a4:	mov	r0, r6
   114a8:	bl	10efc <textdomain@plt>
   114ac:	movw	r0, #16524	; 0x408c
   114b0:	movt	r0, #1
   114b4:	bl	17f54 <__assert_fail@plt+0x6eb4>
   114b8:	movw	r6, #35013	; 0x88c5
   114bc:	movw	r7, #37840	; 0x93d0
   114c0:	movw	r8, #35021	; 0x88cd
   114c4:	mov	r5, #0
   114c8:	mov	sl, #1
   114cc:	movt	r6, #1
   114d0:	movt	r7, #1
   114d4:	movt	r8, #1
   114d8:	b	114e8 <__assert_fail@plt+0x448>
   114dc:	movw	r0, #41328	; 0xa170
   114e0:	movt	r0, #2
   114e4:	strb	sl, [r0]
   114e8:	mov	r0, r4
   114ec:	mov	r1, r9
   114f0:	mov	r2, r6
   114f4:	mov	r3, r7
   114f8:	str	r5, [sp]
   114fc:	bl	10fa4 <getopt_long@plt>
   11500:	cmp	r0, #64	; 0x40
   11504:	ble	11638 <__assert_fail@plt+0x598>
   11508:	sub	r0, r0, #65	; 0x41
   1150c:	cmp	r0, #51	; 0x33
   11510:	bhi	12a54 <__assert_fail@plt+0x19b4>
   11514:	add	r1, pc, #0
   11518:	ldr	pc, [r1, r0, lsl #2]
   1151c:	andeq	r1, r1, ip, ror #11
   11520:	andeq	r2, r1, r4, asr sl
   11524:	ldrdeq	r1, [r1], -ip
   11528:	andeq	r2, r1, r4, asr sl
   1152c:	andeq	r2, r1, r4, asr sl
   11530:	andeq	r2, r1, r4, asr sl
   11534:	andeq	r2, r1, r4, asr sl
   11538:	andeq	r2, r1, r4, asr sl
   1153c:	andeq	r2, r1, r4, asr sl
   11540:	andeq	r2, r1, r4, asr sl
   11544:	andeq	r2, r1, r4, asr sl
   11548:	andeq	r2, r1, r4, asr sl
   1154c:	andeq	r2, r1, r4, asr sl
   11550:	andeq	r2, r1, r4, asr sl
   11554:	andeq	r2, r1, r4, asr sl
   11558:	andeq	r2, r1, r4, asr sl
   1155c:	andeq	r2, r1, r4, asr sl
   11560:	andeq	r2, r1, r4, asr sl
   11564:	andeq	r2, r1, r4, asr sl
   11568:	andeq	r2, r1, r4, asr sl
   1156c:	andeq	r2, r1, r4, asr sl
   11570:	andeq	r2, r1, r4, asr sl
   11574:	andeq	r2, r1, r4, asr sl
   11578:	andeq	r2, r1, r4, asr sl
   1157c:	andeq	r2, r1, r4, asr sl
   11580:	andeq	r2, r1, r4, asr sl
   11584:	andeq	r2, r1, r4, asr sl
   11588:	andeq	r2, r1, r4, asr sl
   1158c:	andeq	r2, r1, r4, asr sl
   11590:	andeq	r2, r1, r4, asr sl
   11594:	andeq	r2, r1, r4, asr sl
   11598:	andeq	r2, r1, r4, asr sl
   1159c:	andeq	r2, r1, r4, asr sl
   115a0:	andeq	r2, r1, r4, asr sl
   115a4:	ldrdeq	r1, [r1], -ip
   115a8:	andeq	r1, r1, r8, lsr #12
   115ac:	andeq	r2, r1, r4, asr sl
   115b0:	andeq	r2, r1, r4, asr sl
   115b4:	andeq	r2, r1, r4, asr sl
   115b8:	andeq	r2, r1, r4, asr sl
   115bc:	andeq	r2, r1, r4, asr sl
   115c0:	andeq	r2, r1, r4, asr sl
   115c4:	andeq	r2, r1, r4, asr sl
   115c8:	andeq	r2, r1, r4, asr sl
   115cc:	andeq	r2, r1, r4, asr sl
   115d0:	andeq	r2, r1, r4, asr sl
   115d4:	andeq	r2, r1, r4, asr sl
   115d8:	andeq	r2, r1, r4, asr sl
   115dc:	andeq	r2, r1, r4, asr sl
   115e0:	andeq	r2, r1, r4, asr sl
   115e4:	andeq	r1, r1, r8, lsl r6
   115e8:	andeq	r1, r1, r8, lsl #12
   115ec:	mov	r0, #3
   115f0:	mov	r1, r8
   115f4:	bl	1104c <setlocale@plt>
   115f8:	mov	r0, #0
   115fc:	mov	r1, r8
   11600:	bl	1104c <setlocale@plt>
   11604:	b	114e8 <__assert_fail@plt+0x448>
   11608:	movw	r0, #41331	; 0xa173
   1160c:	movt	r0, #2
   11610:	strb	sl, [r0]
   11614:	b	114e8 <__assert_fail@plt+0x448>
   11618:	movw	r0, #41330	; 0xa172
   1161c:	movt	r0, #2
   11620:	strb	sl, [r0]
   11624:	b	114e8 <__assert_fail@plt+0x448>
   11628:	movw	r0, #41329	; 0xa171
   1162c:	movt	r0, #2
   11630:	strb	sl, [r0]
   11634:	b	114e8 <__assert_fail@plt+0x448>
   11638:	cmn	r0, #1
   1163c:	bne	128dc <__assert_fail@plt+0x183c>
   11640:	movw	r8, #41288	; 0xa148
   11644:	movw	r2, #41332	; 0xa174
   11648:	mov	r5, #2
   1164c:	movt	r8, #2
   11650:	movt	r2, #2
   11654:	ldr	r0, [r8]
   11658:	sub	sl, r4, r0
   1165c:	sub	r0, sl, #2
   11660:	clz	r0, r0
   11664:	lsr	r7, r0, #5
   11668:	movw	r0, #41329	; 0xa171
   1166c:	movt	r0, #2
   11670:	ldrb	r0, [r0]
   11674:	eor	r1, r0, #1
   11678:	and	r1, r7, r1
   1167c:	strb	r1, [r2]
   11680:	movw	r1, #41330	; 0xa172
   11684:	mov	r2, #2
   11688:	movt	r1, #2
   1168c:	ldrb	r1, [r1]
   11690:	teq	r0, r1
   11694:	movwne	r2, #1
   11698:	cmp	r0, #0
   1169c:	movwne	r5, #1
   116a0:	cmp	r1, #0
   116a4:	movwne	r5, #2
   116a8:	cmp	sl, r2
   116ac:	blt	1293c <__assert_fail@plt+0x189c>
   116b0:	cmp	r5, sl
   116b4:	blt	12970 <__assert_fail@plt+0x18d0>
   116b8:	mov	r0, #24
   116bc:	bl	16664 <__assert_fail@plt+0x55c4>
   116c0:	mov	r4, #0
   116c4:	str	r0, [sp, #112]	; 0x70
   116c8:	str	r0, [sp, #116]	; 0x74
   116cc:	add	r1, sp, #112	; 0x70
   116d0:	str	r4, [r0, #4]
   116d4:	ldr	r0, [r8]
   116d8:	ldr	r0, [r9, r0, lsl #2]
   116dc:	bl	12b68 <__assert_fail@plt+0x1ac8>
   116e0:	mov	r6, #1
   116e4:	cmp	r0, #0
   116e8:	beq	128d0 <__assert_fail@plt+0x1830>
   116ec:	cmp	sl, #2
   116f0:	bne	1172c <__assert_fail@plt+0x68c>
   116f4:	mov	r0, #24
   116f8:	bl	16664 <__assert_fail@plt+0x55c4>
   116fc:	mov	r1, #0
   11700:	str	r0, [sp, #72]	; 0x48
   11704:	str	r0, [sp, #76]	; 0x4c
   11708:	add	r4, sp, #72	; 0x48
   1170c:	str	r1, [r0, #4]
   11710:	ldr	r0, [r8]
   11714:	mov	r1, r4
   11718:	add	r0, r9, r0, lsl #2
   1171c:	ldr	r0, [r0, #4]
   11720:	bl	12b68 <__assert_fail@plt+0x1ac8>
   11724:	cmp	r0, #0
   11728:	beq	128d0 <__assert_fail@plt+0x1830>
   1172c:	add	r0, sp, #112	; 0x70
   11730:	str	r7, [sp, #36]	; 0x24
   11734:	bl	13d80 <__assert_fail@plt+0x2ce0>
   11738:	movw	r0, #41328	; 0xa170
   1173c:	mvn	r8, #0
   11740:	str	r4, [sp, #68]	; 0x44
   11744:	movt	r0, #2
   11748:	ldrb	r0, [r0]
   1174c:	cmp	r0, #1
   11750:	bne	117d0 <__assert_fail@plt+0x730>
   11754:	add	r5, sp, #152	; 0x98
   11758:	mov	r1, #0
   1175c:	mov	r2, #256	; 0x100
   11760:	mov	r6, #0
   11764:	mov	r7, #256	; 0x100
   11768:	mov	r0, r5
   1176c:	bl	11004 <memset@plt>
   11770:	mvn	r0, #1
   11774:	mov	r1, #0
   11778:	str	r8, [sp, #124]	; 0x7c
   1177c:	str	r0, [sp, #120]	; 0x78
   11780:	add	r0, sp, #112	; 0x70
   11784:	bl	13930 <__assert_fail@plt+0x2890>
   11788:	cmn	r0, #1
   1178c:	beq	117c8 <__assert_fail@plt+0x728>
   11790:	mov	r7, #256	; 0x100
   11794:	mov	r4, #1
   11798:	add	r6, sp, #112	; 0x70
   1179c:	ldrb	r1, [r5, r0]
   117a0:	strb	r4, [r5, r0]
   117a4:	eor	r0, r1, #1
   117a8:	mov	r1, #0
   117ac:	sub	r7, r7, r0
   117b0:	mov	r0, r6
   117b4:	bl	13930 <__assert_fail@plt+0x2890>
   117b8:	cmn	r0, #1
   117bc:	bne	1179c <__assert_fail@plt+0x6fc>
   117c0:	ldr	r4, [sp, #68]	; 0x44
   117c4:	asr	r6, r7, #31
   117c8:	str	r7, [sp, #128]	; 0x80
   117cc:	str	r6, [sp, #132]	; 0x84
   117d0:	ldr	r0, [sp, #136]	; 0x88
   117d4:	cmp	r0, #0
   117d8:	bne	12a68 <__assert_fail@plt+0x19c8>
   117dc:	cmp	r4, #0
   117e0:	beq	11c98 <__assert_fail@plt+0xbf8>
   117e4:	ldr	r5, [sp, #128]	; 0x80
   117e8:	ldr	r9, [sp, #132]	; 0x84
   117ec:	mov	r0, r4
   117f0:	bl	13d80 <__assert_fail@plt+0x2ce0>
   117f4:	mov	r0, r4
   117f8:	ldr	r2, [r0, #16]!
   117fc:	ldr	r1, [r0, #4]
   11800:	str	r0, [sp, #52]	; 0x34
   11804:	subs	r0, r5, r2
   11808:	sbcs	r0, r9, r1
   1180c:	bcs	1181c <__assert_fail@plt+0x77c>
   11810:	mov	r5, r2
   11814:	mov	r9, r1
   11818:	b	11840 <__assert_fail@plt+0x7a0>
   1181c:	ldr	r0, [r4, #24]
   11820:	cmp	r0, #1
   11824:	bne	11ba0 <__assert_fail@plt+0xb00>
   11828:	subs	r0, r5, r2
   1182c:	ldr	r2, [r4, #28]
   11830:	sbc	r1, r9, r1
   11834:	strd	r0, [r2, #16]
   11838:	ldr	r0, [sp, #52]	; 0x34
   1183c:	stm	r0, {r5, r9}
   11840:	ldr	r0, [r4, #24]
   11844:	cmp	r0, #2
   11848:	bcs	11bb0 <__assert_fail@plt+0xb10>
   1184c:	movw	r1, #41332	; 0xa174
   11850:	movt	r1, #2
   11854:	ldrb	r1, [r1]
   11858:	cmp	r1, #0
   1185c:	beq	11b8c <__assert_fail@plt+0xaec>
   11860:	ldrb	r0, [r4, #32]
   11864:	cmp	r0, #0
   11868:	bne	12a88 <__assert_fail@plt+0x19e8>
   1186c:	ldrb	r0, [r4, #34]	; 0x22
   11870:	cmp	r0, #0
   11874:	bne	12a94 <__assert_fail@plt+0x19f4>
   11878:	add	r0, sp, #112	; 0x70
   1187c:	ldr	r2, [r4, #4]
   11880:	add	r0, r0, #16
   11884:	str	r0, [sp, #48]	; 0x30
   11888:	ldrd	r6, [r0]
   1188c:	movw	r0, #41328	; 0xa170
   11890:	movt	r0, #2
   11894:	ldrb	r0, [r0]
   11898:	cmp	r0, #0
   1189c:	bne	11b20 <__assert_fail@plt+0xa80>
   118a0:	ldrb	r0, [r4, #33]	; 0x21
   118a4:	cmp	r0, #0
   118a8:	beq	11b20 <__assert_fail@plt+0xa80>
   118ac:	ldr	r0, [sp, #116]	; 0x74
   118b0:	str	r7, [sp, #16]
   118b4:	str	r2, [sp, #20]
   118b8:	str	r9, [sp, #24]
   118bc:	str	r5, [sp, #28]
   118c0:	str	sl, [sp, #32]
   118c4:	str	r0, [sp, #8]
   118c8:	bl	10fb0 <__ctype_b_loc@plt>
   118cc:	ldr	r0, [r0]
   118d0:	vmov.i32	q8, #0	; 0x00000000
   118d4:	mov	r1, #0
   118d8:	vmov.i16	d20, #1	; 0x0001
   118dc:	vmov.i32	q9, #0	; 0x00000000
   118e0:	add	r2, r0, r1
   118e4:	add	r1, r1, #8
   118e8:	vld1.16	{d21}, [r2]
   118ec:	cmp	r1, #512	; 0x200
   118f0:	vshr.u16	d22, d21, #9
   118f4:	vshr.u16	d21, d21, #8
   118f8:	vand	d22, d22, d20
   118fc:	vand	d21, d21, d20
   11900:	vaddw.u16	q9, q9, d22
   11904:	vaddw.u16	q8, q8, d21
   11908:	bne	118e0 <__assert_fail@plt+0x840>
   1190c:	vext.8	q10, q8, q8, #8
   11910:	vext.8	q11, q9, q8, #8
   11914:	mvn	r0, #1
   11918:	str	r8, [sp, #124]	; 0x7c
   1191c:	mov	r9, #1
   11920:	str	r6, [sp, #12]
   11924:	vadd.i32	q8, q8, q10
   11928:	vadd.i32	q9, q9, q11
   1192c:	str	r0, [sp, #120]	; 0x78
   11930:	str	r0, [r4, #8]!
   11934:	vdup.32	q10, d16[1]
   11938:	vdup.32	q11, d18[1]
   1193c:	str	r8, [r4, #4]
   11940:	mov	r8, #1
   11944:	str	r4, [sp, #60]	; 0x3c
   11948:	vadd.i32	q8, q8, q10
   1194c:	vadd.i32	q9, q9, q11
   11950:	vmov.32	r0, d16[0]
   11954:	str	r0, [sp, #44]	; 0x2c
   11958:	vmov.32	r0, d18[0]
   1195c:	str	r0, [sp, #40]	; 0x28
   11960:	add	r0, sp, #112	; 0x70
   11964:	add	r0, r0, #8
   11968:	str	r0, [sp, #56]	; 0x38
   1196c:	add	r0, sp, #112	; 0x70
   11970:	add	r1, sp, #152	; 0x98
   11974:	bl	13930 <__assert_fail@plt+0x2890>
   11978:	mov	r5, r0
   1197c:	ldr	r0, [sp, #68]	; 0x44
   11980:	sub	r1, fp, #36	; 0x24
   11984:	bl	13930 <__assert_fail@plt+0x2890>
   11988:	ldr	sl, [fp, #-36]	; 0xffffffdc
   1198c:	tst	r9, #1
   11990:	cmpne	sl, #2
   11994:	bne	119c0 <__assert_fail@plt+0x920>
   11998:	cmp	sl, #2
   1199c:	bne	119e8 <__assert_fail@plt+0x948>
   119a0:	ldr	r1, [sp, #56]	; 0x38
   119a4:	mvn	ip, #0
   119a8:	mvn	lr, #1
   119ac:	ldrd	r2, [r1]
   119b0:	ldr	r1, [sp, #60]	; 0x3c
   119b4:	ldr	r4, [r1]
   119b8:	ldr	r1, [r1, #4]
   119bc:	b	11a90 <__assert_fail@plt+0x9f0>
   119c0:	ldr	r4, [sp, #152]	; 0x98
   119c4:	str	r0, [sp, #64]	; 0x40
   119c8:	mov	r0, r5
   119cc:	mvn	ip, #0
   119d0:	mvn	lr, #1
   119d4:	subs	r2, r4, #2
   119d8:	movwne	r2, #1
   119dc:	tst	r8, r2
   119e0:	bne	119fc <__assert_fail@plt+0x95c>
   119e4:	b	12a5c <__assert_fail@plt+0x19bc>
   119e8:	ldr	r4, [sp, #152]	; 0x98
   119ec:	str	r0, [sp, #64]	; 0x40
   119f0:	mov	r0, r5
   119f4:	mvn	ip, #0
   119f8:	mvn	lr, #1
   119fc:	ldr	r2, [sp, #116]	; 0x74
   11a00:	ldr	r1, [sp, #56]	; 0x38
   11a04:	ldr	r6, [sp, #68]	; 0x44
   11a08:	ldr	r2, [r2, #4]
   11a0c:	str	r2, [sp, #116]	; 0x74
   11a10:	adds	r2, lr, #1
   11a14:	adc	r3, ip, #0
   11a18:	cmp	r4, #1
   11a1c:	strd	r2, [r1]
   11a20:	ldr	r7, [r6, #4]
   11a24:	ldr	r7, [r7, #4]
   11a28:	str	r7, [r6, #4]
   11a2c:	ldr	r7, [sp, #60]	; 0x3c
   11a30:	strd	r2, [r7]
   11a34:	ldr	r6, [sp, #48]	; 0x30
   11a38:	ldr	r1, [sp, #40]	; 0x28
   11a3c:	ldr	r5, [sp, #44]	; 0x2c
   11a40:	ldm	r6, {r4, r9}
   11a44:	mov	r7, r1
   11a48:	moveq	r7, r5
   11a4c:	sub	r7, r7, #1
   11a50:	subs	r4, r4, r7
   11a54:	sbc	r7, r9, #0
   11a58:	cmp	sl, #1
   11a5c:	stm	r6, {r4, r7}
   11a60:	moveq	r1, r5
   11a64:	mov	r5, r0
   11a68:	ldr	r6, [sp, #52]	; 0x34
   11a6c:	sub	r1, r1, #1
   11a70:	ldm	r6, {r4, r7}
   11a74:	subs	r4, r4, r1
   11a78:	sbc	r1, r7, #0
   11a7c:	str	r4, [r6]
   11a80:	mov	r4, r2
   11a84:	str	r1, [r6, #4]
   11a88:	mov	r1, r3
   11a8c:	ldr	r0, [sp, #64]	; 0x40
   11a90:	adds	r6, lr, #1
   11a94:	adc	r7, ip, #0
   11a98:	cmn	r5, #1
   11a9c:	eorne	r5, r4, r6
   11aa0:	eorne	r1, r1, r7
   11aa4:	orrne	r1, r5, r1
   11aa8:	clzne	r1, r1
   11aac:	lsrne	r9, r1, #5
   11ab0:	eorne	r1, r2, r6
   11ab4:	eorne	r2, r3, r7
   11ab8:	orrne	r1, r1, r2
   11abc:	clzne	r1, r1
   11ac0:	lsrne	r8, r1, #5
   11ac4:	cmnne	r0, #1
   11ac8:	bne	1196c <__assert_fail@plt+0x8cc>
   11acc:	ldr	r0, [sp, #48]	; 0x30
   11ad0:	ldrd	r6, [r0]
   11ad4:	ldr	r0, [sp, #12]
   11ad8:	subs	r0, r0, r6
   11adc:	ldr	r0, [sp, #16]
   11ae0:	sbcs	r0, r0, r7
   11ae4:	bcc	12ab8 <__assert_fail@plt+0x1a18>
   11ae8:	ldr	r0, [sp, #52]	; 0x34
   11aec:	ldm	r0, {r5, r9}
   11af0:	ldr	r0, [sp, #28]
   11af4:	subs	r0, r0, r5
   11af8:	ldr	r0, [sp, #24]
   11afc:	sbcs	r0, r0, r9
   11b00:	bcc	12ab8 <__assert_fail@plt+0x1a18>
   11b04:	ldr	r0, [sp, #8]
   11b08:	ldr	r4, [sp, #68]	; 0x44
   11b0c:	ldr	r2, [sp, #20]
   11b10:	ldr	sl, [sp, #32]
   11b14:	mvn	r8, #0
   11b18:	str	r0, [sp, #116]	; 0x74
   11b1c:	str	r2, [r4, #4]
   11b20:	subs	r0, r5, r6
   11b24:	sbcs	r0, r9, r7
   11b28:	bcs	11c1c <__assert_fail@plt+0xb7c>
   11b2c:	movw	r0, #41331	; 0xa173
   11b30:	movt	r0, #2
   11b34:	ldrb	r0, [r0]
   11b38:	cmp	r0, #0
   11b3c:	bne	11c1c <__assert_fail@plt+0xb7c>
   11b40:	orrs	r0, r5, r9
   11b44:	beq	12adc <__assert_fail@plt+0x1a3c>
   11b48:	movw	r0, #41332	; 0xa174
   11b4c:	movt	r0, #2
   11b50:	ldrb	r0, [r0]
   11b54:	cmp	r0, #0
   11b58:	beq	12ae8 <__assert_fail@plt+0x1a48>
   11b5c:	ldr	r0, [r2]
   11b60:	cmp	r0, #4
   11b64:	bhi	12ad8 <__assert_fail@plt+0x1a38>
   11b68:	add	r1, pc, #0
   11b6c:	ldr	pc, [r1, r0, lsl #2]
   11b70:	andeq	r1, r1, r4, lsl #23
   11b74:			; <UNDEFINED> instruction: 0x00011bbc
   11b78:	andeq	r2, r1, r8, lsl #22
   11b7c:	ldrdeq	r2, [r1], -r8
   11b80:	andeq	r1, r1, r4, lsl #23
   11b84:	add	r0, r2, #8
   11b88:	b	11bc0 <__assert_fail@plt+0xb20>
   11b8c:	cmp	r0, #0
   11b90:	beq	11c98 <__assert_fail@plt+0xbf8>
   11b94:	movw	r1, #37187	; 0x9143
   11b98:	movt	r1, #1
   11b9c:	b	12a9c <__assert_fail@plt+0x19fc>
   11ba0:	mov	r5, r2
   11ba4:	mov	r9, r1
   11ba8:	cmp	r0, #2
   11bac:	bcc	1184c <__assert_fail@plt+0x7ac>
   11bb0:	movw	r1, #36818	; 0x8fd2
   11bb4:	movt	r1, #1
   11bb8:	b	12a9c <__assert_fail@plt+0x19fc>
   11bbc:	add	r0, r2, #9
   11bc0:	ldrb	r4, [r0]
   11bc4:	mov	r0, #24
   11bc8:	bl	16664 <__assert_fail@plt+0x55c4>
   11bcc:	mov	r2, #4
   11bd0:	mov	r1, #0
   11bd4:	str	r2, [r0]
   11bd8:	str	r1, [r0, #4]
   11bdc:	strb	r4, [r0, #8]
   11be0:	subs	r2, r6, r5
   11be4:	ldr	r4, [sp, #68]	; 0x44
   11be8:	sbc	r3, r7, r9
   11bec:	strd	r2, [r0, #16]
   11bf0:	ldr	r1, [r4, #4]
   11bf4:	cmp	r1, #0
   11bf8:	beq	12b14 <__assert_fail@plt+0x1a74>
   11bfc:	str	r0, [r1, #4]
   11c00:	str	r0, [r4, #4]
   11c04:	ldr	r0, [sp, #48]	; 0x30
   11c08:	ldrd	r6, [r0]
   11c0c:	ldr	r0, [sp, #52]	; 0x34
   11c10:	mov	r5, r6
   11c14:	mov	r9, r7
   11c18:	strd	r6, [r0]
   11c1c:	movw	r0, #41328	; 0xa170
   11c20:	movt	r0, #2
   11c24:	ldrb	r0, [r0]
   11c28:	cmp	r0, #1
   11c2c:	bne	11c98 <__assert_fail@plt+0xbf8>
   11c30:	ldrb	r0, [sp, #145]	; 0x91
   11c34:	cmp	r0, #0
   11c38:	beq	11c98 <__assert_fail@plt+0xbf8>
   11c3c:	eor	r0, r5, r6
   11c40:	eor	r1, r9, r7
   11c44:	orrs	r0, r0, r1
   11c48:	bne	11c8c <__assert_fail@plt+0xbec>
   11c4c:	mvn	r0, #1
   11c50:	mov	r1, #0
   11c54:	str	r0, [r4, #8]
   11c58:	mov	r0, r4
   11c5c:	str	r8, [r4, #12]
   11c60:	bl	13930 <__assert_fail@plt+0x2890>
   11c64:	cmn	r0, #1
   11c68:	beq	11c8c <__assert_fail@plt+0xbec>
   11c6c:	mov	r5, r0
   11c70:	mov	r0, r4
   11c74:	mov	r1, #0
   11c78:	bl	13930 <__assert_fail@plt+0x2890>
   11c7c:	cmn	r0, #1
   11c80:	beq	11c98 <__assert_fail@plt+0xbf8>
   11c84:	cmp	r0, r5
   11c88:	beq	11c70 <__assert_fail@plt+0xbd0>
   11c8c:	movw	r1, #37080	; 0x90d8
   11c90:	movt	r1, #1
   11c94:	b	12a9c <__assert_fail@plt+0x19fc>
   11c98:	movw	r0, #41304	; 0xa158
   11c9c:	mov	r1, #2
   11ca0:	movt	r0, #2
   11ca4:	ldr	r0, [r0]
   11ca8:	bl	14178 <__assert_fail@plt+0x30d8>
   11cac:	movw	r0, #41330	; 0xa172
   11cb0:	cmp	sl, #1
   11cb4:	movt	r0, #2
   11cb8:	ldrb	r0, [r0]
   11cbc:	bne	11e44 <__assert_fail@plt+0xda4>
   11cc0:	cmp	r0, #0
   11cc4:	beq	11e44 <__assert_fail@plt+0xda4>
   11cc8:	mvn	r0, #1
   11ccc:	mov	r1, #0
   11cd0:	str	r8, [sp, #124]	; 0x7c
   11cd4:	str	r0, [sp, #120]	; 0x78
   11cd8:	movw	r0, #41328	; 0xa170
   11cdc:	movt	r0, #2
   11ce0:	ldrb	r5, [r0]
   11ce4:	add	r0, sp, #112	; 0x70
   11ce8:	bl	13930 <__assert_fail@plt+0x2890>
   11cec:	cmn	r0, #1
   11cf0:	beq	11d1c <__assert_fail@plt+0xc7c>
   11cf4:	movw	r6, #41344	; 0xa180
   11cf8:	mov	r7, #1
   11cfc:	add	r4, sp, #112	; 0x70
   11d00:	movt	r6, #2
   11d04:	strb	r7, [r6, r0]
   11d08:	mov	r0, r4
   11d0c:	mov	r1, #0
   11d10:	bl	13930 <__assert_fail@plt+0x2890>
   11d14:	cmn	r0, #1
   11d18:	bne	11d04 <__assert_fail@plt+0xc64>
   11d1c:	cmp	r5, #0
   11d20:	beq	11e34 <__assert_fail@plt+0xd94>
   11d24:	movw	r1, #41344	; 0xa180
   11d28:	vmov.i8	q8, #1	; 0x01
   11d2c:	mov	r5, #224	; 0xe0
   11d30:	movt	r1, #2
   11d34:	add	r2, r1, #48	; 0x30
   11d38:	add	r3, r1, #32
   11d3c:	add	r7, r1, #16
   11d40:	mov	r6, r1
   11d44:	add	r0, r1, #64	; 0x40
   11d48:	add	r4, r1, #80	; 0x50
   11d4c:	vld1.64	{d18-d19}, [r7 :128]
   11d50:	vld1.64	{d20-d21}, [r3 :128]
   11d54:	vld1.64	{d22-d23}, [r2 :128]
   11d58:	vld1.64	{d24-d25}, [r0 :128]
   11d5c:	vld1.8	{d26-d27}, [r6 :128], r5
   11d60:	add	r5, r1, #96	; 0x60
   11d64:	veor	q9, q9, q8
   11d68:	veor	q10, q10, q8
   11d6c:	veor	q11, q11, q8
   11d70:	veor	q12, q12, q8
   11d74:	vst1.64	{d18-d19}, [r7 :128]
   11d78:	vst1.64	{d20-d21}, [r3 :128]
   11d7c:	vst1.64	{d22-d23}, [r2 :128]
   11d80:	add	r3, r1, #128	; 0x80
   11d84:	add	r7, r1, #112	; 0x70
   11d88:	add	r2, r1, #144	; 0x90
   11d8c:	vld1.64	{d18-d19}, [r4 :128]
   11d90:	vld1.64	{d20-d21}, [r5 :128]
   11d94:	vld1.64	{d22-d23}, [r7 :128]
   11d98:	vld1.64	{d28-d29}, [r3 :128]
   11d9c:	vld1.64	{d30-d31}, [r2 :128]
   11da0:	vst1.64	{d24-d25}, [r0 :128]
   11da4:	mov	r0, r1
   11da8:	veor	q9, q9, q8
   11dac:	veor	q10, q10, q8
   11db0:	veor	q11, q11, q8
   11db4:	veor	q14, q14, q8
   11db8:	veor	q15, q15, q8
   11dbc:	vst1.64	{d18-d19}, [r4 :128]
   11dc0:	vst1.64	{d20-d21}, [r5 :128]
   11dc4:	vst1.64	{d22-d23}, [r7 :128]
   11dc8:	vst1.64	{d28-d29}, [r3 :128]
   11dcc:	mov	r3, #240	; 0xf0
   11dd0:	veor	q9, q13, q8
   11dd4:	vst1.8	{d18-d19}, [r0 :128], r3
   11dd8:	vst1.64	{d30-d31}, [r2 :128]
   11ddc:	add	r2, r1, #160	; 0xa0
   11de0:	vld1.64	{d18-d19}, [r2 :128]
   11de4:	veor	q9, q9, q8
   11de8:	vst1.64	{d18-d19}, [r2 :128]
   11dec:	add	r2, r1, #176	; 0xb0
   11df0:	vld1.64	{d18-d19}, [r2 :128]
   11df4:	veor	q9, q9, q8
   11df8:	vst1.64	{d18-d19}, [r2 :128]
   11dfc:	add	r2, r1, #192	; 0xc0
   11e00:	add	r1, r1, #208	; 0xd0
   11e04:	vld1.64	{d18-d19}, [r2 :128]
   11e08:	veor	q9, q9, q8
   11e0c:	vst1.64	{d18-d19}, [r2 :128]
   11e10:	vld1.64	{d18-d19}, [r1 :128]
   11e14:	veor	q9, q9, q8
   11e18:	vst1.64	{d18-d19}, [r1 :128]
   11e1c:	vld1.64	{d18-d19}, [r6 :128]
   11e20:	veor	q9, q9, q8
   11e24:	vst1.64	{d18-d19}, [r6 :128]
   11e28:	vld1.64	{d18-d19}, [r0 :128]
   11e2c:	veor	q8, q9, q8
   11e30:	vst1.64	{d16-d17}, [r0 :128]
   11e34:	movw	r0, #14340	; 0x3804
   11e38:	movt	r0, #1
   11e3c:	bl	13668 <__assert_fail@plt+0x25c8>
   11e40:	b	128bc <__assert_fail@plt+0x181c>
   11e44:	movw	r1, #41329	; 0xa171
   11e48:	cmp	sl, #1
   11e4c:	movt	r1, #2
   11e50:	ldrb	r1, [r1]
   11e54:	bne	1203c <__assert_fail@plt+0xf9c>
   11e58:	cmp	r1, #0
   11e5c:	beq	1203c <__assert_fail@plt+0xf9c>
   11e60:	mvn	r0, #1
   11e64:	mov	r1, #0
   11e68:	str	r8, [sp, #124]	; 0x7c
   11e6c:	str	r0, [sp, #120]	; 0x78
   11e70:	movw	r0, #41328	; 0xa170
   11e74:	movt	r0, #2
   11e78:	ldrb	r5, [r0]
   11e7c:	add	r0, sp, #112	; 0x70
   11e80:	bl	13930 <__assert_fail@plt+0x2890>
   11e84:	cmn	r0, #1
   11e88:	beq	11eb4 <__assert_fail@plt+0xe14>
   11e8c:	movw	r6, #49792	; 0xc280
   11e90:	mov	r7, #1
   11e94:	add	r4, sp, #112	; 0x70
   11e98:	movt	r6, #2
   11e9c:	strb	r7, [r6, r0]
   11ea0:	mov	r0, r4
   11ea4:	mov	r1, #0
   11ea8:	bl	13930 <__assert_fail@plt+0x2890>
   11eac:	cmn	r0, #1
   11eb0:	bne	11e9c <__assert_fail@plt+0xdfc>
   11eb4:	cmp	r5, #0
   11eb8:	beq	11fcc <__assert_fail@plt+0xf2c>
   11ebc:	movw	r1, #49792	; 0xc280
   11ec0:	vmov.i8	q8, #1	; 0x01
   11ec4:	mov	r5, #224	; 0xe0
   11ec8:	movt	r1, #2
   11ecc:	add	r2, r1, #48	; 0x30
   11ed0:	add	r3, r1, #32
   11ed4:	add	r7, r1, #16
   11ed8:	mov	r6, r1
   11edc:	add	r0, r1, #64	; 0x40
   11ee0:	add	r4, r1, #80	; 0x50
   11ee4:	vld1.64	{d18-d19}, [r7 :128]
   11ee8:	vld1.64	{d20-d21}, [r3 :128]
   11eec:	vld1.64	{d22-d23}, [r2 :128]
   11ef0:	vld1.64	{d24-d25}, [r0 :128]
   11ef4:	vld1.8	{d26-d27}, [r6 :128], r5
   11ef8:	add	r5, r1, #96	; 0x60
   11efc:	veor	q9, q9, q8
   11f00:	veor	q10, q10, q8
   11f04:	veor	q11, q11, q8
   11f08:	veor	q12, q12, q8
   11f0c:	vst1.64	{d18-d19}, [r7 :128]
   11f10:	vst1.64	{d20-d21}, [r3 :128]
   11f14:	vst1.64	{d22-d23}, [r2 :128]
   11f18:	add	r3, r1, #128	; 0x80
   11f1c:	add	r7, r1, #112	; 0x70
   11f20:	add	r2, r1, #144	; 0x90
   11f24:	vld1.64	{d18-d19}, [r4 :128]
   11f28:	vld1.64	{d20-d21}, [r5 :128]
   11f2c:	vld1.64	{d22-d23}, [r7 :128]
   11f30:	vld1.64	{d28-d29}, [r3 :128]
   11f34:	vld1.64	{d30-d31}, [r2 :128]
   11f38:	vst1.64	{d24-d25}, [r0 :128]
   11f3c:	mov	r0, r1
   11f40:	veor	q9, q9, q8
   11f44:	veor	q10, q10, q8
   11f48:	veor	q11, q11, q8
   11f4c:	veor	q14, q14, q8
   11f50:	veor	q15, q15, q8
   11f54:	vst1.64	{d18-d19}, [r4 :128]
   11f58:	vst1.64	{d20-d21}, [r5 :128]
   11f5c:	vst1.64	{d22-d23}, [r7 :128]
   11f60:	vst1.64	{d28-d29}, [r3 :128]
   11f64:	mov	r3, #240	; 0xf0
   11f68:	veor	q9, q13, q8
   11f6c:	vst1.8	{d18-d19}, [r0 :128], r3
   11f70:	vst1.64	{d30-d31}, [r2 :128]
   11f74:	add	r2, r1, #160	; 0xa0
   11f78:	vld1.64	{d18-d19}, [r2 :128]
   11f7c:	veor	q9, q9, q8
   11f80:	vst1.64	{d18-d19}, [r2 :128]
   11f84:	add	r2, r1, #176	; 0xb0
   11f88:	vld1.64	{d18-d19}, [r2 :128]
   11f8c:	veor	q9, q9, q8
   11f90:	vst1.64	{d18-d19}, [r2 :128]
   11f94:	add	r2, r1, #192	; 0xc0
   11f98:	add	r1, r1, #208	; 0xd0
   11f9c:	vld1.64	{d18-d19}, [r2 :128]
   11fa0:	veor	q9, q9, q8
   11fa4:	vst1.64	{d18-d19}, [r2 :128]
   11fa8:	vld1.64	{d18-d19}, [r1 :128]
   11fac:	veor	q9, q9, q8
   11fb0:	vst1.64	{d18-d19}, [r1 :128]
   11fb4:	vld1.64	{d18-d19}, [r6 :128]
   11fb8:	veor	q9, q9, q8
   11fbc:	vst1.64	{d18-d19}, [r6 :128]
   11fc0:	vld1.64	{d18-d19}, [r0 :128]
   11fc4:	veor	q8, q9, q8
   11fc8:	vst1.64	{d16-d17}, [r0 :128]
   11fcc:	movw	r4, #41600	; 0xa280
   11fd0:	movw	r6, #41308	; 0xa15c
   11fd4:	movt	r4, #2
   11fd8:	movt	r6, #2
   11fdc:	mov	r0, r4
   11fe0:	mov	r1, #8192	; 0x2000
   11fe4:	bl	13850 <__assert_fail@plt+0x27b0>
   11fe8:	cmp	r0, #0
   11fec:	beq	128bc <__assert_fail@plt+0x181c>
   11ff0:	ldr	r3, [r6]
   11ff4:	mov	r5, r0
   11ff8:	mov	r0, r4
   11ffc:	mov	r1, #1
   12000:	mov	r2, r5
   12004:	bl	10ec0 <fwrite_unlocked@plt>
   12008:	cmp	r0, r5
   1200c:	beq	11fdc <__assert_fail@plt+0xf3c>
   12010:	bl	10fe0 <__errno_location@plt>
   12014:	ldr	r4, [r0]
   12018:	movw	r1, #35290	; 0x89da
   1201c:	movt	r1, #1
   12020:	mov	r0, #0
   12024:	mov	r2, #5
   12028:	bl	10ee4 <dcgettext@plt>
   1202c:	mov	r2, r0
   12030:	mov	r0, #1
   12034:	mov	r1, r4
   12038:	bl	10f50 <error@plt>
   1203c:	ldr	r2, [sp, #36]	; 0x24
   12040:	and	r1, r2, r1
   12044:	and	r0, r0, r1
   12048:	cmp	r0, #1
   1204c:	bne	12210 <__assert_fail@plt+0x1170>
   12050:	mvn	r0, #1
   12054:	mov	r1, #0
   12058:	str	r8, [sp, #124]	; 0x7c
   1205c:	str	r0, [sp, #120]	; 0x78
   12060:	movw	r0, #41328	; 0xa170
   12064:	movt	r0, #2
   12068:	ldrb	r6, [r0]
   1206c:	add	r0, sp, #112	; 0x70
   12070:	bl	13930 <__assert_fail@plt+0x2890>
   12074:	cmn	r0, #1
   12078:	beq	120a4 <__assert_fail@plt+0x1004>
   1207c:	movw	r4, #49792	; 0xc280
   12080:	mov	r7, #1
   12084:	add	r5, sp, #112	; 0x70
   12088:	movt	r4, #2
   1208c:	strb	r7, [r4, r0]
   12090:	mov	r0, r5
   12094:	mov	r1, #0
   12098:	bl	13930 <__assert_fail@plt+0x2890>
   1209c:	cmn	r0, #1
   120a0:	bne	1208c <__assert_fail@plt+0xfec>
   120a4:	cmp	r6, #0
   120a8:	beq	121bc <__assert_fail@plt+0x111c>
   120ac:	movw	r1, #49792	; 0xc280
   120b0:	vmov.i8	q8, #1	; 0x01
   120b4:	mov	r5, #224	; 0xe0
   120b8:	movt	r1, #2
   120bc:	add	r2, r1, #48	; 0x30
   120c0:	add	r3, r1, #32
   120c4:	add	r7, r1, #16
   120c8:	mov	r6, r1
   120cc:	add	r0, r1, #64	; 0x40
   120d0:	add	r4, r1, #80	; 0x50
   120d4:	vld1.64	{d18-d19}, [r7 :128]
   120d8:	vld1.64	{d20-d21}, [r3 :128]
   120dc:	vld1.64	{d22-d23}, [r2 :128]
   120e0:	vld1.64	{d24-d25}, [r0 :128]
   120e4:	vld1.8	{d26-d27}, [r6 :128], r5
   120e8:	add	r5, r1, #96	; 0x60
   120ec:	veor	q9, q9, q8
   120f0:	veor	q10, q10, q8
   120f4:	veor	q11, q11, q8
   120f8:	veor	q12, q12, q8
   120fc:	vst1.64	{d18-d19}, [r7 :128]
   12100:	vst1.64	{d20-d21}, [r3 :128]
   12104:	vst1.64	{d22-d23}, [r2 :128]
   12108:	add	r3, r1, #128	; 0x80
   1210c:	add	r7, r1, #112	; 0x70
   12110:	add	r2, r1, #144	; 0x90
   12114:	vld1.64	{d18-d19}, [r4 :128]
   12118:	vld1.64	{d20-d21}, [r5 :128]
   1211c:	vld1.64	{d22-d23}, [r7 :128]
   12120:	vld1.64	{d28-d29}, [r3 :128]
   12124:	vld1.64	{d30-d31}, [r2 :128]
   12128:	vst1.64	{d24-d25}, [r0 :128]
   1212c:	mov	r0, r1
   12130:	veor	q9, q9, q8
   12134:	veor	q10, q10, q8
   12138:	veor	q11, q11, q8
   1213c:	veor	q14, q14, q8
   12140:	veor	q15, q15, q8
   12144:	vst1.64	{d18-d19}, [r4 :128]
   12148:	vst1.64	{d20-d21}, [r5 :128]
   1214c:	vst1.64	{d22-d23}, [r7 :128]
   12150:	vst1.64	{d28-d29}, [r3 :128]
   12154:	mov	r3, #240	; 0xf0
   12158:	veor	q9, q13, q8
   1215c:	vst1.8	{d18-d19}, [r0 :128], r3
   12160:	vst1.64	{d30-d31}, [r2 :128]
   12164:	add	r2, r1, #160	; 0xa0
   12168:	vld1.64	{d18-d19}, [r2 :128]
   1216c:	veor	q9, q9, q8
   12170:	vst1.64	{d18-d19}, [r2 :128]
   12174:	add	r2, r1, #176	; 0xb0
   12178:	vld1.64	{d18-d19}, [r2 :128]
   1217c:	veor	q9, q9, q8
   12180:	vst1.64	{d18-d19}, [r2 :128]
   12184:	add	r2, r1, #192	; 0xc0
   12188:	add	r1, r1, #208	; 0xd0
   1218c:	vld1.64	{d18-d19}, [r2 :128]
   12190:	veor	q9, q9, q8
   12194:	vst1.64	{d18-d19}, [r2 :128]
   12198:	vld1.64	{d18-d19}, [r1 :128]
   1219c:	veor	q9, q9, q8
   121a0:	vst1.64	{d18-d19}, [r1 :128]
   121a4:	vld1.64	{d18-d19}, [r6 :128]
   121a8:	veor	q9, q9, q8
   121ac:	vst1.64	{d18-d19}, [r6 :128]
   121b0:	vld1.64	{d18-d19}, [r0 :128]
   121b4:	veor	q8, q9, q8
   121b8:	vst1.64	{d16-d17}, [r0 :128]
   121bc:	ldr	r6, [sp, #68]	; 0x44
   121c0:	mvn	r0, #1
   121c4:	mov	r1, #0
   121c8:	str	r0, [r6, #8]
   121cc:	mov	r0, r6
   121d0:	str	r8, [r6, #12]
   121d4:	bl	13930 <__assert_fail@plt+0x2890>
   121d8:	cmn	r0, #1
   121dc:	beq	12204 <__assert_fail@plt+0x1164>
   121e0:	movw	r4, #41344	; 0xa180
   121e4:	mov	r5, #1
   121e8:	movt	r4, #2
   121ec:	strb	r5, [r4, r0]
   121f0:	mov	r0, r6
   121f4:	mov	r1, #0
   121f8:	bl	13930 <__assert_fail@plt+0x2890>
   121fc:	cmn	r0, #1
   12200:	bne	121ec <__assert_fail@plt+0x114c>
   12204:	movw	r0, #14416	; 0x3850
   12208:	movt	r0, #1
   1220c:	b	11e3c <__assert_fail@plt+0xd9c>
   12210:	movw	r0, #41332	; 0xa174
   12214:	movt	r0, #2
   12218:	ldrb	r0, [r0]
   1221c:	cmp	r0, #0
   12220:	beq	128bc <__assert_fail@plt+0x181c>
   12224:	movw	r0, #41328	; 0xa170
   12228:	movt	r0, #2
   1222c:	ldrb	r0, [r0]
   12230:	cmp	r0, #1
   12234:	bne	123d8 <__assert_fail@plt+0x1338>
   12238:	mvn	r0, #1
   1223c:	mov	r1, #0
   12240:	str	r8, [sp, #124]	; 0x7c
   12244:	mov	r6, #0
   12248:	str	r0, [sp, #120]	; 0x78
   1224c:	add	r0, sp, #112	; 0x70
   12250:	bl	13930 <__assert_fail@plt+0x2890>
   12254:	cmn	r0, #1
   12258:	beq	12284 <__assert_fail@plt+0x11e4>
   1225c:	movw	r4, #49792	; 0xc280
   12260:	mov	r7, #1
   12264:	add	r5, sp, #112	; 0x70
   12268:	movt	r4, #2
   1226c:	strb	r7, [r4, r0]
   12270:	mov	r0, r5
   12274:	mov	r1, #0
   12278:	bl	13930 <__assert_fail@plt+0x2890>
   1227c:	cmn	r0, #1
   12280:	bne	1226c <__assert_fail@plt+0x11cc>
   12284:	ldr	r0, [sp, #68]	; 0x44
   12288:	mvn	r1, #1
   1228c:	movw	r5, #50048	; 0xc380
   12290:	movt	r5, #2
   12294:	str	r1, [r0, #8]
   12298:	add	ip, pc, #816	; 0x330
   1229c:	add	r1, pc, #828	; 0x33c
   122a0:	add	r2, pc, #840	; 0x348
   122a4:	add	r3, pc, #852	; 0x354
   122a8:	add	r7, pc, #864	; 0x360
   122ac:	str	r8, [r0, #12]
   122b0:	add	r4, pc, #872	; 0x368
   122b4:	add	r0, pc, #964	; 0x3c4
   122b8:	vld1.64	{d16-d17}, [r7 :128]
   122bc:	vld1.64	{d18-d19}, [r0 :128]
   122c0:	add	r0, pc, #968	; 0x3c8
   122c4:	add	r7, r5, #16
   122c8:	vld1.64	{d26-d27}, [r3 :128]
   122cc:	vld1.64	{d30-d31}, [r1 :128]
   122d0:	vld1.64	{d28-d29}, [r2 :128]
   122d4:	vld1.64	{d0-d1}, [ip :128]
   122d8:	vld1.64	{d2-d3}, [r4 :128]
   122dc:	vld1.64	{d20-d21}, [r0 :128]
   122e0:	add	r0, pc, #952	; 0x3b8
   122e4:	vld1.64	{d22-d23}, [r0 :128]
   122e8:	add	r0, pc, #960	; 0x3c0
   122ec:	vld1.64	{d24-d25}, [r0 :128]
   122f0:	add	r0, r5, #32
   122f4:	vst1.64	{d16-d17}, [r7 :128]
   122f8:	add	r1, pc, #960	; 0x3c0
   122fc:	vst1.64	{d18-d19}, [r0 :128]
   12300:	add	r0, r5, #48	; 0x30
   12304:	movw	r7, #49792	; 0xc280
   12308:	vld1.64	{d16-d17}, [r1 :128]
   1230c:	add	r1, pc, #956	; 0x3bc
   12310:	vst1.64	{d20-d21}, [r0 :128]
   12314:	add	r0, r5, #64	; 0x40
   12318:	movt	r7, #2
   1231c:	vld1.64	{d18-d19}, [r1 :128]
   12320:	add	r1, pc, #952	; 0x3b8
   12324:	vst1.64	{d22-d23}, [r0 :128]
   12328:	add	r0, r5, #80	; 0x50
   1232c:	vld1.64	{d20-d21}, [r1 :128]
   12330:	add	r1, pc, #952	; 0x3b8
   12334:	vst1.64	{d24-d25}, [r0 :128]
   12338:	add	r0, r5, #96	; 0x60
   1233c:	vld1.64	{d22-d23}, [r1 :128]
   12340:	add	r1, pc, #952	; 0x3b8
   12344:	vst1.64	{d26-d27}, [r0 :128]
   12348:	add	r0, r5, #112	; 0x70
   1234c:	vld1.64	{d24-d25}, [r1 :128]
   12350:	add	r1, pc, #952	; 0x3b8
   12354:	vst1.64	{d28-d29}, [r0 :128]
   12358:	add	r0, r5, #128	; 0x80
   1235c:	vst1.64	{d30-d31}, [r0 :128]
   12360:	add	r0, r5, #144	; 0x90
   12364:	vld1.64	{d26-d27}, [r1 :128]
   12368:	mov	r1, r5
   1236c:	vst1.64	{d0-d1}, [r0 :128]
   12370:	add	r0, r5, #160	; 0xa0
   12374:	vst1.64	{d2-d3}, [r0 :128]
   12378:	add	r0, r5, #176	; 0xb0
   1237c:	vst1.64	{d16-d17}, [r0 :128]
   12380:	add	r0, r5, #192	; 0xc0
   12384:	vst1.64	{d18-d19}, [r0 :128]
   12388:	add	r0, r5, #208	; 0xd0
   1238c:	vst1.64	{d20-d21}, [r0 :128]
   12390:	add	r0, r5, #224	; 0xe0
   12394:	vst1.64	{d22-d23}, [r0 :128]
   12398:	mov	r0, #240	; 0xf0
   1239c:	vst1.8	{d24-d25}, [r1 :128], r0
   123a0:	vst1.64	{d26-d27}, [r1 :128]
   123a4:	ldrb	r0, [r7, r6]
   123a8:	cmp	r0, #0
   123ac:	bne	123c8 <__assert_fail@plt+0x1328>
   123b0:	ldr	r0, [sp, #68]	; 0x44
   123b4:	mov	r1, #0
   123b8:	bl	13930 <__assert_fail@plt+0x2890>
   123bc:	cmn	r0, #1
   123c0:	beq	127c0 <__assert_fail@plt+0x1720>
   123c4:	strb	r0, [r5, r6]
   123c8:	add	r6, r6, #1
   123cc:	cmp	r6, #256	; 0x100
   123d0:	bcc	123a4 <__assert_fail@plt+0x1304>
   123d4:	b	127d4 <__assert_fail@plt+0x1734>
   123d8:	add	r0, pc, #896	; 0x380
   123dc:	add	r1, pc, #908	; 0x38c
   123e0:	add	r2, pc, #920	; 0x398
   123e4:	add	r3, pc, #932	; 0x3a4
   123e8:	add	r7, pc, #944	; 0x3b0
   123ec:	add	r5, pc, #956	; 0x3bc
   123f0:	add	r4, pc, #648	; 0x288
   123f4:	movw	r6, #50048	; 0xc380
   123f8:	vld1.64	{d18-d19}, [r4 :128]
   123fc:	add	r4, pc, #652	; 0x28c
   12400:	vld1.64	{d16-d17}, [r7 :128]
   12404:	movt	r6, #2
   12408:	vld1.64	{d0-d1}, [r0 :128]
   1240c:	vld1.64	{d26-d27}, [r3 :128]
   12410:	vld1.64	{d30-d31}, [r1 :128]
   12414:	vld1.64	{d28-d29}, [r2 :128]
   12418:	vld1.64	{d2-d3}, [r5 :128]
   1241c:	vld1.64	{d20-d21}, [r4 :128]
   12420:	add	r4, pc, #632	; 0x278
   12424:	add	r7, r6, #16
   12428:	add	r0, r6, #32
   1242c:	vld1.64	{d22-d23}, [r4 :128]
   12430:	add	r4, pc, #632	; 0x278
   12434:	vld1.64	{d24-d25}, [r4 :128]
   12438:	vst1.64	{d16-d17}, [r7 :128]
   1243c:	add	r1, pc, #636	; 0x27c
   12440:	vst1.64	{d18-d19}, [r0 :128]
   12444:	add	r0, r6, #48	; 0x30
   12448:	vld1.64	{d16-d17}, [r1 :128]
   1244c:	add	r1, pc, #636	; 0x27c
   12450:	vst1.64	{d20-d21}, [r0 :128]
   12454:	add	r0, r6, #64	; 0x40
   12458:	vld1.64	{d18-d19}, [r1 :128]
   1245c:	add	r1, pc, #636	; 0x27c
   12460:	vst1.64	{d22-d23}, [r0 :128]
   12464:	add	r0, r6, #80	; 0x50
   12468:	vld1.64	{d20-d21}, [r1 :128]
   1246c:	add	r1, pc, #636	; 0x27c
   12470:	vst1.64	{d24-d25}, [r0 :128]
   12474:	add	r0, r6, #96	; 0x60
   12478:	vld1.64	{d22-d23}, [r1 :128]
   1247c:	add	r1, pc, #636	; 0x27c
   12480:	vst1.64	{d26-d27}, [r0 :128]
   12484:	add	r0, r6, #112	; 0x70
   12488:	vld1.64	{d24-d25}, [r1 :128]
   1248c:	add	r1, pc, #636	; 0x27c
   12490:	vst1.64	{d28-d29}, [r0 :128]
   12494:	add	r0, r6, #128	; 0x80
   12498:	ldr	r4, [sp, #68]	; 0x44
   1249c:	str	r8, [sp, #124]	; 0x7c
   124a0:	vst1.64	{d30-d31}, [r0 :128]
   124a4:	add	r0, r6, #144	; 0x90
   124a8:	vld1.64	{d26-d27}, [r1 :128]
   124ac:	mov	r1, r6
   124b0:	vst1.64	{d0-d1}, [r0 :128]
   124b4:	add	r0, r6, #160	; 0xa0
   124b8:	vst1.64	{d2-d3}, [r0 :128]
   124bc:	add	r0, r6, #176	; 0xb0
   124c0:	vst1.64	{d16-d17}, [r0 :128]
   124c4:	add	r0, r6, #192	; 0xc0
   124c8:	mov	r9, r4
   124cc:	vst1.64	{d18-d19}, [r0 :128]
   124d0:	add	r0, r6, #208	; 0xd0
   124d4:	vst1.64	{d20-d21}, [r0 :128]
   124d8:	add	r0, r6, #224	; 0xe0
   124dc:	vst1.64	{d22-d23}, [r0 :128]
   124e0:	mov	r0, #240	; 0xf0
   124e4:	vst1.8	{d24-d25}, [r1 :128], r0
   124e8:	mvn	r0, #1
   124ec:	vst1.64	{d26-d27}, [r1 :128]
   124f0:	str	r0, [sp, #120]	; 0x78
   124f4:	str	r0, [r9, #8]!
   124f8:	add	r0, sp, #112	; 0x70
   124fc:	add	r0, r0, #8
   12500:	str	r8, [r9, #4]
   12504:	str	r0, [sp, #64]	; 0x40
   12508:	b	1253c <__assert_fail@plt+0x149c>
   1250c:	ldr	r0, [sp, #116]	; 0x74
   12510:	ldr	r2, [sp, #64]	; 0x40
   12514:	ldr	r0, [r0, #4]
   12518:	str	r0, [sp, #116]	; 0x74
   1251c:	mvn	r0, #1
   12520:	adds	r0, r0, #1
   12524:	adc	r1, r8, #0
   12528:	strd	r0, [r2]
   1252c:	ldr	r2, [r4, #4]
   12530:	ldr	r2, [r2, #4]
   12534:	str	r2, [r4, #4]
   12538:	strd	r0, [r9]
   1253c:	add	r0, sp, #112	; 0x70
   12540:	add	r1, sp, #152	; 0x98
   12544:	bl	13930 <__assert_fail@plt+0x2890>
   12548:	mov	r5, r0
   1254c:	mov	r0, r4
   12550:	sub	r1, fp, #36	; 0x24
   12554:	bl	13930 <__assert_fail@plt+0x2890>
   12558:	ldr	r1, [sp, #152]	; 0x98
   1255c:	ldr	sl, [fp, #-36]	; 0xffffffdc
   12560:	cmp	r1, #0
   12564:	cmpeq	sl, #1
   12568:	beq	1258c <__assert_fail@plt+0x14ec>
   1256c:	cmp	r1, #1
   12570:	cmpeq	sl, #0
   12574:	beq	12630 <__assert_fail@plt+0x1590>
   12578:	cmn	r5, #1
   1257c:	cmnne	r0, #1
   12580:	beq	12720 <__assert_fail@plt+0x1680>
   12584:	strb	r0, [r6, r5]
   12588:	b	12668 <__assert_fail@plt+0x15c8>
   1258c:	bl	10fb0 <__ctype_b_loc@plt>
   12590:	ldr	r5, [r0]
   12594:	mov	r8, #0
   12598:	ldrb	r0, [r5, #1]
   1259c:	tst	r0, #2
   125a0:	beq	125b4 <__assert_fail@plt+0x1514>
   125a4:	bl	10f8c <__ctype_toupper_loc@plt>
   125a8:	ldr	r0, [r0]
   125ac:	ldr	r0, [r0, r8, lsl #2]
   125b0:	strb	r0, [r6, r8]
   125b4:	add	r8, r8, #1
   125b8:	add	r5, r5, #2
   125bc:	cmp	r8, #256	; 0x100
   125c0:	bne	12598 <__assert_fail@plt+0x14f8>
   125c4:	b	12668 <__assert_fail@plt+0x15c8>
   125c8:	nop	{0}
   125cc:	nop	{0}
   125d0:	orrsls	r9, r2, #144, 2	; 0x24
   125d4:			; <UNDEFINED> instruction: 0x97969594
   125d8:	blls	fe6b8c40 <stdout@@GLIBC_2.4+0xfe68eae4>
   125dc:	svcls	0x009e9d9c
   125e0:	orrhi	r8, r2, #128, 2
   125e4:	strhi	r8, [r6, r4, lsl #11]
   125e8:	blhi	fe2b4c10 <stdout@@GLIBC_2.4+0xfe28aab4>
   125ec:	svchi	0x008e8d8c
   125f0:	cmnvc	r2, #112, 2
   125f4:			; <UNDEFINED> instruction: 0x77767574
   125f8:	blvc	1eb0be0 <stdout@@GLIBC_2.4+0x1e86a84>
   125fc:	svcvc	0x007e7d7c
   12600:	cmnvs	r2, #96, 2
   12604:	strbvs	r6, [r6, -r4, ror #10]!
   12608:	blvs	1aacbb0 <stdout@@GLIBC_2.4+0x1a82a54>
   1260c:	svcvs	0x006e6d6c
   12610:	tstne	r2, #16, 2
   12614:			; <UNDEFINED> instruction: 0x17161514
   12618:	blne	698a80 <stdout@@GLIBC_2.4+0x66e924>
   1261c:	svcne	0x001e1d1c
   12620:			; <UNDEFINED> instruction: 0xa3a2a1a0
   12624:	strge	sl, [r6, r4, lsr #11]!
   12628:	blge	feabccd0 <stdout@@GLIBC_2.4+0xfea92b74>
   1262c:	svcge	0x00aeadac
   12630:	bl	10fb0 <__ctype_b_loc@plt>
   12634:	ldr	r5, [r0]
   12638:	mov	r7, #0
   1263c:	ldrb	r0, [r5, #1]
   12640:	tst	r0, #1
   12644:	beq	12658 <__assert_fail@plt+0x15b8>
   12648:	bl	10f80 <__ctype_tolower_loc@plt>
   1264c:	ldr	r0, [r0]
   12650:	ldr	r0, [r0, r7, lsl #2]
   12654:	strb	r0, [r6, r7]
   12658:	add	r7, r7, #1
   1265c:	add	r5, r5, #2
   12660:	cmp	r7, #256	; 0x100
   12664:	bne	1263c <__assert_fail@plt+0x159c>
   12668:	cmp	sl, #2
   1266c:	mvn	r8, #0
   12670:	beq	1253c <__assert_fail@plt+0x149c>
   12674:	b	1250c <__assert_fail@plt+0x146c>
   12678:	nop	{0}
   1267c:	nop	{0}
   12680:			; <UNDEFINED> instruction: 0x23222120
   12684:	strcs	r2, [r6, -r4, lsr #10]!
   12688:	blcs	a9cb30 <stdout@@GLIBC_2.4+0xa729d4>
   1268c:	svccs	0x002e2d2c
   12690:	teqcc	r2, #48, 2
   12694:			; <UNDEFINED> instruction: 0x37363534
   12698:	blcc	ea0b80 <stdout@@GLIBC_2.4+0xe76a24>
   1269c:	svccc	0x003e3d3c
   126a0:	movtmi	r4, #8512	; 0x2140
   126a4:	strbmi	r4, [r6, -r4, asr #10]
   126a8:	blmi	12a4bd0 <stdout@@GLIBC_2.4+0x127aa74>
   126ac:	svcmi	0x004e4d4c
   126b0:	cmppl	r2, #80, 2
   126b4:			; <UNDEFINED> instruction: 0x57565554
   126b8:	blpl	16a8c20 <stdout@@GLIBC_2.4+0x167eac4>
   126bc:	svcpl	0x005e5d5c
   126c0:			; <UNDEFINED> instruction: 0xb3b2b1b0
   126c4:			; <UNDEFINED> instruction: 0xb7b6b5b4
   126c8:	bllt	feec0db0 <stdout@@GLIBC_2.4+0xfee96c54>
   126cc:	svclt	0x00bebdbc
   126d0:	bicgt	ip, r2, #192, 2	; 0x30
   126d4:	strbgt	ip, [r6, r4, asr #11]
   126d8:	blgt	ff2c4e00 <stdout@@GLIBC_2.4+0xff29aca4>
   126dc:	svcgt	0x00cecdcc
   126e0:	bicsle	sp, r2, #208, 2	; 0x34
   126e4:			; <UNDEFINED> instruction: 0xd7d6d5d4
   126e8:	blle	ff6c8e50 <stdout@@GLIBC_2.4+0xff69ecf4>
   126ec:	svcle	0x00dedddc
   126f0:	mvn	lr, #224, 2	; 0x38
   126f4:	strb	lr, [r6, r4, ror #11]!
   126f8:	bl	ffaccea0 <stdout@@GLIBC_2.4+0xffaa2d44>
   126fc:	svc	0x00eeedec
   12700:	movweq	r0, #8448	; 0x2100
   12704:	streq	r0, [r6, -r4, lsl #10]
   12708:	bleq	294b30 <stdout@@GLIBC_2.4+0x26a9d4>
   1270c:	svceq	0x000e0d0c
   12710:	vsra.u64	<illegal reg q15.5>, q8, #14
   12714:			; <UNDEFINED> instruction: 0xf7f6f5f4
   12718:	blx	ffed0f02 <stdout@@GLIBC_2.4+0xffea6da6>
   1271c:			; <UNDEFINED> instruction: 0xfffefdfc
   12720:	cmn	r5, #1
   12724:	beq	127d4 <__assert_fail@plt+0x1734>
   12728:	movw	r0, #41331	; 0xa173
   1272c:	movt	r0, #2
   12730:	ldrb	r0, [r0]
   12734:	cmp	r0, #0
   12738:	bne	127d4 <__assert_fail@plt+0x1734>
   1273c:	movw	r0, #35360	; 0x8a20
   12740:	movw	r1, #35328	; 0x8a00
   12744:	movw	r3, #35337	; 0x8a09
   12748:	movw	r2, #1893	; 0x765
   1274c:	movt	r0, #1
   12750:	movt	r1, #1
   12754:	movt	r3, #1
   12758:	bl	110a0 <__assert_fail@plt>
   1275c:	nop	{0}
   12760:	orrsls	r9, r2, #144, 2	; 0x24
   12764:			; <UNDEFINED> instruction: 0x97969594
   12768:	blls	fe6b8dd0 <stdout@@GLIBC_2.4+0xfe68ec74>
   1276c:	svcls	0x009e9d9c
   12770:	orrhi	r8, r2, #128, 2
   12774:	strhi	r8, [r6, r4, lsl #11]
   12778:	blhi	fe2b4da0 <stdout@@GLIBC_2.4+0xfe28ac44>
   1277c:	svchi	0x008e8d8c
   12780:	cmnvc	r2, #112, 2
   12784:			; <UNDEFINED> instruction: 0x77767574
   12788:	blvc	1eb0d70 <stdout@@GLIBC_2.4+0x1e86c14>
   1278c:	svcvc	0x007e7d7c
   12790:	cmnvs	r2, #96, 2
   12794:	strbvs	r6, [r6, -r4, ror #10]!
   12798:	blvs	1aacd40 <stdout@@GLIBC_2.4+0x1a82be4>
   1279c:	svcvs	0x006e6d6c
   127a0:	tstne	r2, #16, 2
   127a4:			; <UNDEFINED> instruction: 0x17161514
   127a8:	blne	698c10 <stdout@@GLIBC_2.4+0x66eab4>
   127ac:	svcne	0x001e1d1c
   127b0:			; <UNDEFINED> instruction: 0xa3a2a1a0
   127b4:	strge	sl, [r6, r4, lsr #11]!
   127b8:	blge	feabce60 <stdout@@GLIBC_2.4+0xfea92d04>
   127bc:	svcge	0x00aeadac
   127c0:	movw	r0, #41331	; 0xa173
   127c4:	movt	r0, #2
   127c8:	ldrb	r0, [r0]
   127cc:	cmp	r0, #0
   127d0:	beq	12b48 <__assert_fail@plt+0x1aa8>
   127d4:	movw	r0, #41330	; 0xa172
   127d8:	movt	r0, #2
   127dc:	ldrb	r0, [r0]
   127e0:	cmp	r0, #0
   127e4:	beq	1283c <__assert_fail@plt+0x179c>
   127e8:	ldr	r6, [sp, #68]	; 0x44
   127ec:	mvn	r0, #1
   127f0:	mov	r1, #0
   127f4:	str	r0, [r6, #8]
   127f8:	mov	r0, r6
   127fc:	str	r8, [r6, #12]
   12800:	bl	13930 <__assert_fail@plt+0x2890>
   12804:	cmn	r0, #1
   12808:	beq	12830 <__assert_fail@plt+0x1790>
   1280c:	movw	r4, #41344	; 0xa180
   12810:	mov	r5, #1
   12814:	movt	r4, #2
   12818:	strb	r5, [r4, r0]
   1281c:	mov	r0, r6
   12820:	mov	r1, #0
   12824:	bl	13930 <__assert_fail@plt+0x2890>
   12828:	cmn	r0, #1
   1282c:	bne	12818 <__assert_fail@plt+0x1778>
   12830:	movw	r0, #15292	; 0x3bbc
   12834:	movt	r0, #1
   12838:	b	11e3c <__assert_fail@plt+0xd9c>
   1283c:	movw	r4, #41600	; 0xa280
   12840:	movw	r6, #50048	; 0xc380
   12844:	movw	r7, #41308	; 0xa15c
   12848:	movt	r4, #2
   1284c:	movt	r6, #2
   12850:	movt	r7, #2
   12854:	mov	r0, #0
   12858:	mov	r1, r4
   1285c:	mov	r2, #8192	; 0x2000
   12860:	bl	15f48 <__assert_fail@plt+0x4ea8>
   12864:	cmp	r0, #0
   12868:	beq	128bc <__assert_fail@plt+0x181c>
   1286c:	mov	r5, r0
   12870:	cmn	r0, #1
   12874:	beq	12b34 <__assert_fail@plt+0x1a94>
   12878:	mov	r0, #0
   1287c:	ldrb	r1, [r4, r0]
   12880:	ldrb	r1, [r6, r1]
   12884:	strb	r1, [r4, r0]
   12888:	add	r0, r0, #1
   1288c:	cmp	r5, r0
   12890:	bne	1287c <__assert_fail@plt+0x17dc>
   12894:	cmp	r5, #0
   12898:	beq	128bc <__assert_fail@plt+0x181c>
   1289c:	ldr	r3, [r7]
   128a0:	mov	r0, r4
   128a4:	mov	r1, #1
   128a8:	mov	r2, r5
   128ac:	bl	10ec0 <fwrite_unlocked@plt>
   128b0:	cmp	r0, r5
   128b4:	beq	12854 <__assert_fail@plt+0x17b4>
   128b8:	b	12010 <__assert_fail@plt+0xf70>
   128bc:	mov	r0, #0
   128c0:	mov	r6, #0
   128c4:	bl	11094 <close@plt>
   128c8:	cmp	r0, #0
   128cc:	bne	12a74 <__assert_fail@plt+0x19d4>
   128d0:	mov	r0, r6
   128d4:	sub	sp, fp, #28
   128d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128dc:	cmn	r0, #3
   128e0:	bne	1292c <__assert_fail@plt+0x188c>
   128e4:	movw	r0, #41200	; 0xa0f0
   128e8:	movw	r2, #35037	; 0x88dd
   128ec:	mov	r1, #0
   128f0:	movt	r0, #2
   128f4:	movt	r2, #1
   128f8:	str	r1, [sp, #4]
   128fc:	movw	r1, #34986	; 0x88aa
   12900:	ldr	r3, [r0]
   12904:	movw	r0, #41308	; 0xa15c
   12908:	str	r2, [sp]
   1290c:	movw	r2, #35023	; 0x88cf
   12910:	movt	r1, #1
   12914:	movt	r0, #2
   12918:	movt	r2, #1
   1291c:	ldr	r0, [r0]
   12920:	bl	16430 <__assert_fail@plt+0x5390>
   12924:	mov	r0, #0
   12928:	bl	10fbc <exit@plt>
   1292c:	cmn	r0, #2
   12930:	bne	12a54 <__assert_fail@plt+0x19b4>
   12934:	mov	r0, #0
   12938:	bl	111a0 <__assert_fail@plt+0x100>
   1293c:	cmp	sl, #0
   12940:	bne	129c8 <__assert_fail@plt+0x1928>
   12944:	movw	r1, #35050	; 0x88ea
   12948:	mov	r0, #0
   1294c:	mov	r2, #5
   12950:	movt	r1, #1
   12954:	bl	10ee4 <dcgettext@plt>
   12958:	mov	r2, r0
   1295c:	mov	r0, #0
   12960:	mov	r1, #0
   12964:	bl	10f50 <error@plt>
   12968:	mov	r0, #1
   1296c:	bl	111a0 <__assert_fail@plt+0x100>
   12970:	movw	r1, #35203	; 0x8983
   12974:	mov	r0, #0
   12978:	mov	r2, #5
   1297c:	movt	r1, #1
   12980:	bl	10ee4 <dcgettext@plt>
   12984:	mov	r4, r0
   12988:	ldr	r0, [r8]
   1298c:	add	r0, r0, r5
   12990:	ldr	r0, [r9, r0, lsl #2]
   12994:	bl	15e10 <__assert_fail@plt+0x4d70>
   12998:	mov	r3, r0
   1299c:	mov	r0, #0
   129a0:	mov	r1, #0
   129a4:	mov	r2, r4
   129a8:	bl	10f50 <error@plt>
   129ac:	cmp	sl, #2
   129b0:	bne	12a54 <__assert_fail@plt+0x19b4>
   129b4:	movw	r0, #41296	; 0xa150
   129b8:	movw	r1, #35220	; 0x8994
   129bc:	movt	r0, #2
   129c0:	movt	r1, #1
   129c4:	b	12a2c <__assert_fail@plt+0x198c>
   129c8:	movw	r1, #35066	; 0x88fa
   129cc:	mov	r0, #0
   129d0:	mov	r2, #5
   129d4:	movt	r1, #1
   129d8:	bl	10ee4 <dcgettext@plt>
   129dc:	mov	r6, r0
   129e0:	add	r0, r9, r4, lsl #2
   129e4:	ldr	r0, [r0, #-4]
   129e8:	bl	15e10 <__assert_fail@plt+0x4d70>
   129ec:	mov	r3, r0
   129f0:	mov	r0, #0
   129f4:	mov	r1, #0
   129f8:	mov	r2, r6
   129fc:	bl	10f50 <error@plt>
   12a00:	movw	r0, #41330	; 0xa172
   12a04:	movw	r2, #35091	; 0x8913
   12a08:	movw	r1, #35159	; 0x8957
   12a0c:	movt	r0, #2
   12a10:	movt	r2, #1
   12a14:	movt	r1, #1
   12a18:	ldrb	r0, [r0]
   12a1c:	cmp	r0, #0
   12a20:	movw	r0, #41296	; 0xa150
   12a24:	movt	r0, #2
   12a28:	movne	r1, r2
   12a2c:	ldr	r4, [r0]
   12a30:	mov	r0, #0
   12a34:	mov	r2, #5
   12a38:	bl	10ee4 <dcgettext@plt>
   12a3c:	movw	r2, #38336	; 0x95c0
   12a40:	mov	r3, r0
   12a44:	mov	r0, r4
   12a48:	mov	r1, #1
   12a4c:	movt	r2, #1
   12a50:	bl	11028 <__fprintf_chk@plt>
   12a54:	mov	r0, #1
   12a58:	bl	111a0 <__assert_fail@plt+0x100>
   12a5c:	movw	r1, #37363	; 0x91f3
   12a60:	movt	r1, #1
   12a64:	b	12a9c <__assert_fail@plt+0x19fc>
   12a68:	movw	r1, #36766	; 0x8f9e
   12a6c:	movt	r1, #1
   12a70:	b	12a9c <__assert_fail@plt+0x19fc>
   12a74:	bl	10fe0 <__errno_location@plt>
   12a78:	ldr	r4, [r0]
   12a7c:	movw	r1, #35386	; 0x8a3a
   12a80:	movt	r1, #1
   12a84:	b	12020 <__assert_fail@plt+0xf80>
   12a88:	movw	r1, #36871	; 0x9007
   12a8c:	movt	r1, #1
   12a90:	b	12a9c <__assert_fail@plt+0x19fc>
   12a94:	movw	r1, #36932	; 0x9044
   12a98:	movt	r1, #1
   12a9c:	mov	r0, #0
   12aa0:	mov	r2, #5
   12aa4:	bl	10ee4 <dcgettext@plt>
   12aa8:	mov	r2, r0
   12aac:	mov	r0, #1
   12ab0:	mov	r1, #0
   12ab4:	bl	10f50 <error@plt>
   12ab8:	movw	r0, #37411	; 0x9223
   12abc:	movw	r1, #35328	; 0x8a00
   12ac0:	movw	r3, #37464	; 0x9258
   12ac4:	movw	r2, #1224	; 0x4c8
   12ac8:	movt	r0, #1
   12acc:	movt	r1, #1
   12ad0:	movt	r3, #1
   12ad4:	bl	110a0 <__assert_fail@plt>
   12ad8:	bl	11088 <abort@plt>
   12adc:	movw	r1, #37028	; 0x90a4
   12ae0:	movt	r1, #1
   12ae4:	b	12a9c <__assert_fail@plt+0x19fc>
   12ae8:	movw	r0, #36920	; 0x9038
   12aec:	movw	r1, #35328	; 0x8a00
   12af0:	movw	r3, #37531	; 0x929b
   12af4:	movw	r2, #1377	; 0x561
   12af8:	movt	r0, #1
   12afc:	movt	r1, #1
   12b00:	movt	r3, #1
   12b04:	bl	110a0 <__assert_fail@plt>
   12b08:	movw	r1, #37597	; 0x92dd
   12b0c:	movt	r1, #1
   12b10:	b	12a9c <__assert_fail@plt+0x19fc>
   12b14:	movw	r0, #36101	; 0x8d05
   12b18:	movw	r1, #35328	; 0x8a00
   12b1c:	movw	r3, #36503	; 0x8e97
   12b20:	movw	r2, #721	; 0x2d1
   12b24:	movt	r0, #1
   12b28:	movt	r1, #1
   12b2c:	movt	r3, #1
   12b30:	bl	110a0 <__assert_fail@plt>
   12b34:	bl	10fe0 <__errno_location@plt>
   12b38:	ldr	r4, [r0]
   12b3c:	movw	r1, #37702	; 0x9346
   12b40:	movt	r1, #1
   12b44:	b	12020 <__assert_fail@plt+0xf80>
   12b48:	movw	r0, #35302	; 0x89e6
   12b4c:	movw	r1, #35328	; 0x8a00
   12b50:	movw	r3, #35337	; 0x8a09
   12b54:	mov	r2, #1840	; 0x730
   12b58:	movt	r0, #1
   12b5c:	movt	r1, #1
   12b60:	movt	r3, #1
   12b64:	bl	110a0 <__assert_fail@plt>
   12b68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b6c:	add	fp, sp, #28
   12b70:	sub	sp, sp, #84	; 0x54
   12b74:	str	r1, [fp, #-52]	; 0xffffffcc
   12b78:	mov	r7, r0
   12b7c:	bl	10fc8 <strlen@plt>
   12b80:	mov	r5, r0
   12b84:	bl	16664 <__assert_fail@plt+0x55c4>
   12b88:	mov	r4, r0
   12b8c:	mov	r0, r5
   12b90:	mov	r1, #1
   12b94:	mov	r6, #1
   12b98:	bl	16a78 <__assert_fail@plt+0x59d8>
   12b9c:	mov	ip, r4
   12ba0:	mov	sl, r0
   12ba4:	mov	r4, #0
   12ba8:	mov	r9, #0
   12bac:	mov	r5, #0
   12bb0:	str	r0, [sp, #56]	; 0x38
   12bb4:	str	ip, [fp, #-48]	; 0xffffffd0
   12bb8:	b	12bc8 <__assert_fail@plt+0x1b28>
   12bbc:	strb	r0, [ip, r9]
   12bc0:	add	r5, r5, #1
   12bc4:	add	r9, r9, #1
   12bc8:	ldrb	r0, [r7, r5]
   12bcc:	cmp	r0, #92	; 0x5c
   12bd0:	beq	12be0 <__assert_fail@plt+0x1b40>
   12bd4:	cmp	r0, #0
   12bd8:	bne	12bbc <__assert_fail@plt+0x1b1c>
   12bdc:	b	12ef0 <__assert_fail@plt+0x1e50>
   12be0:	strb	r6, [sl, r9]
   12be4:	add	r8, r5, #1
   12be8:	ldrb	r0, [r7, r8]
   12bec:	cmp	r0, #118	; 0x76
   12bf0:	bhi	12ed0 <__assert_fail@plt+0x1e30>
   12bf4:	add	r1, pc, #0
   12bf8:	ldr	pc, [r1, r0, lsl #2]
   12bfc:	andeq	r2, r1, r0, asr #28
   12c00:	ldrdeq	r2, [r1], -r0
   12c04:	ldrdeq	r2, [r1], -r0
   12c08:	ldrdeq	r2, [r1], -r0
   12c0c:	ldrdeq	r2, [r1], -r0
   12c10:	ldrdeq	r2, [r1], -r0
   12c14:	ldrdeq	r2, [r1], -r0
   12c18:	ldrdeq	r2, [r1], -r0
   12c1c:	ldrdeq	r2, [r1], -r0
   12c20:	ldrdeq	r2, [r1], -r0
   12c24:	ldrdeq	r2, [r1], -r0
   12c28:	ldrdeq	r2, [r1], -r0
   12c2c:	ldrdeq	r2, [r1], -r0
   12c30:	ldrdeq	r2, [r1], -r0
   12c34:	ldrdeq	r2, [r1], -r0
   12c38:	ldrdeq	r2, [r1], -r0
   12c3c:	ldrdeq	r2, [r1], -r0
   12c40:	ldrdeq	r2, [r1], -r0
   12c44:	ldrdeq	r2, [r1], -r0
   12c48:	ldrdeq	r2, [r1], -r0
   12c4c:	ldrdeq	r2, [r1], -r0
   12c50:	ldrdeq	r2, [r1], -r0
   12c54:	ldrdeq	r2, [r1], -r0
   12c58:	ldrdeq	r2, [r1], -r0
   12c5c:	ldrdeq	r2, [r1], -r0
   12c60:	ldrdeq	r2, [r1], -r0
   12c64:	ldrdeq	r2, [r1], -r0
   12c68:	ldrdeq	r2, [r1], -r0
   12c6c:	ldrdeq	r2, [r1], -r0
   12c70:	ldrdeq	r2, [r1], -r0
   12c74:	ldrdeq	r2, [r1], -r0
   12c78:	ldrdeq	r2, [r1], -r0
   12c7c:	ldrdeq	r2, [r1], -r0
   12c80:	ldrdeq	r2, [r1], -r0
   12c84:	ldrdeq	r2, [r1], -r0
   12c88:	ldrdeq	r2, [r1], -r0
   12c8c:	ldrdeq	r2, [r1], -r0
   12c90:	ldrdeq	r2, [r1], -r0
   12c94:	ldrdeq	r2, [r1], -r0
   12c98:	ldrdeq	r2, [r1], -r0
   12c9c:	ldrdeq	r2, [r1], -r0
   12ca0:	ldrdeq	r2, [r1], -r0
   12ca4:	ldrdeq	r2, [r1], -r0
   12ca8:	ldrdeq	r2, [r1], -r0
   12cac:	ldrdeq	r2, [r1], -r0
   12cb0:	ldrdeq	r2, [r1], -r0
   12cb4:	ldrdeq	r2, [r1], -r0
   12cb8:	ldrdeq	r2, [r1], -r0
   12cbc:	ldrdeq	r2, [r1], -r8
   12cc0:	ldrdeq	r2, [r1], -r8
   12cc4:	ldrdeq	r2, [r1], -r8
   12cc8:	ldrdeq	r2, [r1], -r8
   12ccc:	ldrdeq	r2, [r1], -r8
   12cd0:	ldrdeq	r2, [r1], -r8
   12cd4:	ldrdeq	r2, [r1], -r8
   12cd8:	ldrdeq	r2, [r1], -r8
   12cdc:	ldrdeq	r2, [r1], -r0
   12ce0:	ldrdeq	r2, [r1], -r0
   12ce4:	ldrdeq	r2, [r1], -r0
   12ce8:	ldrdeq	r2, [r1], -r0
   12cec:	ldrdeq	r2, [r1], -r0
   12cf0:	ldrdeq	r2, [r1], -r0
   12cf4:	ldrdeq	r2, [r1], -r0
   12cf8:	ldrdeq	r2, [r1], -r0
   12cfc:	ldrdeq	r2, [r1], -r0
   12d00:	ldrdeq	r2, [r1], -r0
   12d04:	ldrdeq	r2, [r1], -r0
   12d08:	ldrdeq	r2, [r1], -r0
   12d0c:	ldrdeq	r2, [r1], -r0
   12d10:	ldrdeq	r2, [r1], -r0
   12d14:	ldrdeq	r2, [r1], -r0
   12d18:	ldrdeq	r2, [r1], -r0
   12d1c:	ldrdeq	r2, [r1], -r0
   12d20:	ldrdeq	r2, [r1], -r0
   12d24:	ldrdeq	r2, [r1], -r0
   12d28:	ldrdeq	r2, [r1], -r0
   12d2c:	ldrdeq	r2, [r1], -r0
   12d30:	ldrdeq	r2, [r1], -r0
   12d34:	ldrdeq	r2, [r1], -r0
   12d38:	ldrdeq	r2, [r1], -r0
   12d3c:	ldrdeq	r2, [r1], -r0
   12d40:	ldrdeq	r2, [r1], -r0
   12d44:	ldrdeq	r2, [r1], -r0
   12d48:	ldrdeq	r2, [r1], -r0
   12d4c:	ldrdeq	r2, [r1], -r0
   12d50:	ldrdeq	r2, [r1], -r0
   12d54:	ldrdeq	r2, [r1], -r0
   12d58:	ldrdeq	r2, [r1], -r0
   12d5c:	ldrdeq	r2, [r1], -r0
   12d60:	ldrdeq	r2, [r1], -r0
   12d64:	ldrdeq	r2, [r1], -r0
   12d68:	ldrdeq	r2, [r1], -r0
   12d6c:	ldrdeq	r2, [r1], -r0
   12d70:	ldrdeq	r2, [r1], -r0
   12d74:	ldrdeq	r2, [r1], -r0
   12d78:	ldrdeq	r2, [r1], -r0
   12d7c:	ldrdeq	r2, [r1], -r0
   12d80:	andeq	r2, r1, r8, ror #29
   12d84:	andeq	r2, r1, r0, lsr lr
   12d88:	ldrdeq	r2, [r1], -r0
   12d8c:	ldrdeq	r2, [r1], -r0
   12d90:	ldrdeq	r2, [r1], -r0
   12d94:	andeq	r2, r1, r8, ror lr
   12d98:	ldrdeq	r2, [r1], -r0
   12d9c:	ldrdeq	r2, [r1], -r0
   12da0:	ldrdeq	r2, [r1], -r0
   12da4:	ldrdeq	r2, [r1], -r0
   12da8:	ldrdeq	r2, [r1], -r0
   12dac:	ldrdeq	r2, [r1], -r0
   12db0:	ldrdeq	r2, [r1], -r0
   12db4:	andeq	r2, r1, r8, lsr lr
   12db8:	ldrdeq	r2, [r1], -r0
   12dbc:	ldrdeq	r2, [r1], -r0
   12dc0:	ldrdeq	r2, [r1], -r0
   12dc4:	andeq	r2, r1, r8, lsr #28
   12dc8:	ldrdeq	r2, [r1], -r0
   12dcc:	ldrdeq	r2, [r1], -r8
   12dd0:	ldrdeq	r2, [r1], -r0
   12dd4:	andeq	r2, r1, r0, ror #29
   12dd8:	add	r6, r5, #2
   12ddc:	sub	r0, r0, #48	; 0x30
   12de0:	ldrb	r1, [r7, r6]
   12de4:	and	r2, r1, #248	; 0xf8
   12de8:	cmp	r2, #48	; 0x30
   12dec:	bne	12ecc <__assert_fail@plt+0x1e2c>
   12df0:	add	r0, r1, r0, lsl #3
   12df4:	add	r5, r5, #3
   12df8:	sub	sl, r0, #48	; 0x30
   12dfc:	ldrb	r0, [r7, r5]
   12e00:	and	r1, r0, #248	; 0xf8
   12e04:	cmp	r1, #48	; 0x30
   12e08:	bne	12ec0 <__assert_fail@plt+0x1e20>
   12e0c:	uxtb	r1, sl
   12e10:	add	r0, r0, r1, lsl #3
   12e14:	sub	r0, r0, #48	; 0x30
   12e18:	cmp	r0, #255	; 0xff
   12e1c:	bgt	12e80 <__assert_fail@plt+0x1de0>
   12e20:	mov	r5, r6
   12e24:	b	12ec8 <__assert_fail@plt+0x1e28>
   12e28:	mov	r0, #13
   12e2c:	b	12ed0 <__assert_fail@plt+0x1e30>
   12e30:	mov	r0, #8
   12e34:	b	12ed0 <__assert_fail@plt+0x1e30>
   12e38:	mov	r0, #10
   12e3c:	b	12ed0 <__assert_fail@plt+0x1e30>
   12e40:	movw	r1, #35873	; 0x8c21
   12e44:	mov	r0, #0
   12e48:	mov	r2, #5
   12e4c:	movt	r1, #1
   12e50:	bl	10ee4 <dcgettext@plt>
   12e54:	mov	r2, r0
   12e58:	mov	r0, #0
   12e5c:	mov	r1, #0
   12e60:	bl	10f50 <error@plt>
   12e64:	ldr	ip, [fp, #-48]	; 0xffffffd0
   12e68:	sub	r5, r5, #1
   12e6c:	mov	r0, #92	; 0x5c
   12e70:	strb	r4, [sl, r9]
   12e74:	b	12ed0 <__assert_fail@plt+0x1e30>
   12e78:	mov	r0, #12
   12e7c:	b	12ed0 <__assert_fail@plt+0x1e30>
   12e80:	movw	r1, #35773	; 0x8bbd
   12e84:	mov	r0, #0
   12e88:	mov	r2, #5
   12e8c:	movt	r1, #1
   12e90:	bl	10ee4 <dcgettext@plt>
   12e94:	mov	r2, r0
   12e98:	ldrb	r3, [r7, r8]
   12e9c:	ldrb	r0, [r7, r6]
   12ea0:	ldrb	r1, [r7, r5]
   12ea4:	stm	sp, {r0, r1, r3}
   12ea8:	str	r0, [sp, #12]
   12eac:	str	r1, [sp, #16]
   12eb0:	mov	r0, #0
   12eb4:	mov	r1, #0
   12eb8:	bl	10f50 <error@plt>
   12ebc:	ldr	ip, [fp, #-48]	; 0xffffffd0
   12ec0:	mov	r5, r8
   12ec4:	mov	r0, sl
   12ec8:	ldr	sl, [sp, #56]	; 0x38
   12ecc:	mov	r6, #1
   12ed0:	add	r5, r5, #1
   12ed4:	b	12bbc <__assert_fail@plt+0x1b1c>
   12ed8:	mov	r0, #9
   12edc:	b	12ed0 <__assert_fail@plt+0x1e30>
   12ee0:	mov	r0, #11
   12ee4:	b	12ed0 <__assert_fail@plt+0x1e30>
   12ee8:	mov	r0, #7
   12eec:	b	12ed0 <__assert_fail@plt+0x1e30>
   12ef0:	mov	r6, #0
   12ef4:	cmp	r9, #3
   12ef8:	bcc	1337c <__assert_fail@plt+0x22dc>
   12efc:	mvn	r0, #2
   12f00:	mov	r7, #2
   12f04:	mov	r6, #0
   12f08:	sub	r0, r0, ip
   12f0c:	str	r0, [sp, #32]
   12f10:	add	r0, sl, #3
   12f14:	str	r0, [sp, #44]	; 0x2c
   12f18:	add	r0, ip, #3
   12f1c:	str	r0, [sp, #40]	; 0x28
   12f20:	sub	r0, r9, #1
   12f24:	str	r0, [fp, #-44]	; 0xffffffd4
   12f28:	add	r0, ip, #2
   12f2c:	str	r0, [sp, #36]	; 0x24
   12f30:	ldrb	r8, [ip, r6]
   12f34:	cmp	r8, #91	; 0x5b
   12f38:	ldrbeq	r0, [sl, r6]
   12f3c:	cmpeq	r0, #0
   12f40:	beq	12fa4 <__assert_fail@plt+0x1f04>
   12f44:	add	r5, r6, #1
   12f48:	ldrb	r0, [ip, r5]
   12f4c:	cmp	r0, #45	; 0x2d
   12f50:	ldrbeq	r0, [sl, r5]
   12f54:	cmpeq	r0, #0
   12f58:	beq	13110 <__assert_fail@plt+0x2070>
   12f5c:	mov	r0, #24
   12f60:	bl	16664 <__assert_fail@plt+0x55c4>
   12f64:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12f68:	mov	r1, #0
   12f6c:	str	r1, [r0]
   12f70:	str	r1, [r0, #4]
   12f74:	strb	r8, [r0, #8]
   12f78:	ldr	r1, [r2, #4]
   12f7c:	cmp	r1, #0
   12f80:	beq	135c8 <__assert_fail@plt+0x2528>
   12f84:	mov	r6, r5
   12f88:	str	r0, [r1, #4]
   12f8c:	str	r0, [r2, #4]
   12f90:	ldr	ip, [fp, #-48]	; 0xffffffd0
   12f94:	add	r7, r6, #2
   12f98:	cmp	r7, r9
   12f9c:	bcc	12f30 <__assert_fail@plt+0x1e90>
   12fa0:	b	1337c <__assert_fail@plt+0x22dc>
   12fa4:	add	r0, r6, #1
   12fa8:	ldrb	r4, [ip, r0]
   12fac:	cmp	r4, #61	; 0x3d
   12fb0:	cmpne	r4, #58	; 0x3a
   12fb4:	bne	131f8 <__assert_fail@plt+0x2158>
   12fb8:	ldrb	r0, [sl, r0]
   12fbc:	cmp	r0, #0
   12fc0:	bne	131f8 <__assert_fail@plt+0x2158>
   12fc4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12fc8:	cmp	r0, r7
   12fcc:	bls	131f8 <__assert_fail@plt+0x2158>
   12fd0:	add	r0, r7, #2
   12fd4:	mov	r5, r0
   12fd8:	add	r0, ip, r0
   12fdc:	ldrb	r1, [r0, #-2]
   12fe0:	cmp	r1, r4
   12fe4:	ldrbeq	r0, [r0, #-1]
   12fe8:	cmpeq	r0, #93	; 0x5d
   12fec:	beq	13008 <__assert_fail@plt+0x1f68>
   12ff0:	ldr	r2, [fp, #-44]	; 0xffffffd4
   12ff4:	sub	r1, r5, #1
   12ff8:	add	r0, r5, #1
   12ffc:	cmp	r1, r2
   13000:	bcc	12fd4 <__assert_fail@plt+0x1f34>
   13004:	b	131f8 <__assert_fail@plt+0x2158>
   13008:	add	r0, sl, r5
   1300c:	ldrb	r1, [r0, #-2]
   13010:	cmp	r1, #0
   13014:	bne	12ff0 <__assert_fail@plt+0x1f50>
   13018:	ldrb	r0, [r0, #-1]
   1301c:	cmp	r0, #0
   13020:	bne	12ff0 <__assert_fail@plt+0x1f50>
   13024:	mvn	r0, #2
   13028:	sub	r0, r0, r6
   1302c:	add	r0, r0, r5
   13030:	add	r1, r0, #3
   13034:	cmp	r1, #4
   13038:	str	r1, [sp, #28]
   1303c:	beq	13564 <__assert_fail@plt+0x24c4>
   13040:	ldr	r1, [sp, #36]	; 0x24
   13044:	cmp	r4, #58	; 0x3a
   13048:	add	r1, r1, r6
   1304c:	str	r1, [sp, #52]	; 0x34
   13050:	bne	13160 <__assert_fail@plt+0x20c0>
   13054:	sub	r0, r0, #1
   13058:	mov	sl, #0
   1305c:	str	r4, [sp, #24]
   13060:	str	r0, [sp, #48]	; 0x30
   13064:	movw	r0, #38008	; 0x9478
   13068:	ldr	r2, [sp, #48]	; 0x30
   1306c:	movt	r0, #1
   13070:	ldr	r1, [r0, sl, lsl #2]
   13074:	ldr	r0, [sp, #52]	; 0x34
   13078:	mov	r4, r1
   1307c:	bl	1107c <strncmp@plt>
   13080:	cmp	r0, #0
   13084:	bne	130a0 <__assert_fail@plt+0x2000>
   13088:	mov	r0, r4
   1308c:	bl	10fc8 <strlen@plt>
   13090:	ldr	r1, [sp, #28]
   13094:	sub	r0, r1, r0
   13098:	cmp	r0, #4
   1309c:	beq	13330 <__assert_fail@plt+0x2290>
   130a0:	add	sl, sl, #1
   130a4:	cmp	sl, #12
   130a8:	bcc	13064 <__assert_fail@plt+0x1fc4>
   130ac:	ldr	ip, [fp, #-48]	; 0xffffffd0
   130b0:	ldr	sl, [sp, #56]	; 0x38
   130b4:	ldr	r4, [sp, #24]
   130b8:	ldrb	r0, [ip, r7]
   130bc:	cmp	r0, #42	; 0x2a
   130c0:	ldrbeq	r0, [sl, r7]
   130c4:	cmpeq	r0, #0
   130c8:	bne	134c8 <__assert_fail@plt+0x2428>
   130cc:	add	r2, r7, #1
   130d0:	cmp	r2, r9
   130d4:	bcs	134c8 <__assert_fail@plt+0x2428>
   130d8:	ldrb	r1, [ip, r2]
   130dc:	mov	r0, r2
   130e0:	sub	r2, r1, #48	; 0x30
   130e4:	cmp	r2, #9
   130e8:	bhi	130fc <__assert_fail@plt+0x205c>
   130ec:	ldrb	r3, [sl, r0]
   130f0:	add	r2, r0, #1
   130f4:	cmp	r3, #0
   130f8:	beq	130d0 <__assert_fail@plt+0x2030>
   130fc:	cmp	r1, #93	; 0x5d
   13100:	ldrbeq	r0, [sl, r0]
   13104:	cmpeq	r0, #0
   13108:	beq	131f8 <__assert_fail@plt+0x2158>
   1310c:	b	134c8 <__assert_fail@plt+0x2428>
   13110:	add	r0, ip, r6
   13114:	ldr	r7, [fp, #-52]	; 0xffffffcc
   13118:	ldrb	r5, [r0, #2]
   1311c:	cmp	r5, r8
   13120:	bcc	133ec <__assert_fail@plt+0x234c>
   13124:	mov	r0, #24
   13128:	bl	16664 <__assert_fail@plt+0x55c4>
   1312c:	mov	r2, #1
   13130:	mov	r1, #0
   13134:	str	r2, [r0]
   13138:	str	r1, [r0, #4]
   1313c:	strb	r8, [r0, #8]
   13140:	strb	r5, [r0, #9]
   13144:	ldr	r1, [r7, #4]
   13148:	cmp	r1, #0
   1314c:	beq	13608 <__assert_fail@plt+0x2568>
   13150:	str	r0, [r1, #4]
   13154:	str	r0, [r7, #4]
   13158:	add	r6, r6, #3
   1315c:	b	12f90 <__assert_fail@plt+0x1ef0>
   13160:	ldr	r0, [sp, #28]
   13164:	cmp	r0, #5
   13168:	bne	131a4 <__assert_fail@plt+0x2104>
   1316c:	mov	r0, #24
   13170:	bl	16664 <__assert_fail@plt+0x55c4>
   13174:	mov	r2, #3
   13178:	mov	r1, #0
   1317c:	str	r2, [r0]
   13180:	str	r1, [r0, #4]
   13184:	ldr	r1, [sp, #52]	; 0x34
   13188:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1318c:	ldrb	r1, [r1]
   13190:	strb	r1, [r0, #8]
   13194:	ldr	r1, [r2, #4]
   13198:	cmp	r1, #0
   1319c:	bne	12f84 <__assert_fail@plt+0x1ee4>
   131a0:	b	13628 <__assert_fail@plt+0x2588>
   131a4:	ldrb	r0, [ip, r7]
   131a8:	cmp	r0, #42	; 0x2a
   131ac:	ldrbeq	r0, [sl, r7]
   131b0:	cmpeq	r0, #0
   131b4:	bne	13514 <__assert_fail@plt+0x2474>
   131b8:	add	r2, r7, #1
   131bc:	cmp	r2, r9
   131c0:	bcs	13514 <__assert_fail@plt+0x2474>
   131c4:	ldrb	r1, [ip, r2]
   131c8:	mov	r0, r2
   131cc:	sub	r2, r1, #48	; 0x30
   131d0:	cmp	r2, #9
   131d4:	bhi	131e8 <__assert_fail@plt+0x2148>
   131d8:	ldrb	r3, [sl, r0]
   131dc:	add	r2, r0, #1
   131e0:	cmp	r3, #0
   131e4:	beq	131bc <__assert_fail@plt+0x211c>
   131e8:	cmp	r1, #93	; 0x5d
   131ec:	ldrbeq	r0, [sl, r0]
   131f0:	cmpeq	r0, #0
   131f4:	bne	13514 <__assert_fail@plt+0x2474>
   131f8:	add	r0, r6, #2
   131fc:	cmp	r0, r9
   13200:	bcs	135e8 <__assert_fail@plt+0x2548>
   13204:	ldrb	r1, [ip, r0]
   13208:	cmp	r1, #42	; 0x2a
   1320c:	ldrbeq	r0, [sl, r0]
   13210:	cmpeq	r0, #0
   13214:	bne	12f44 <__assert_fail@plt+0x1ea4>
   13218:	add	r0, r6, #3
   1321c:	cmp	r0, r9
   13220:	bcs	12f44 <__assert_fail@plt+0x1ea4>
   13224:	ldr	r1, [sp, #44]	; 0x2c
   13228:	ldr	r2, [sp, #40]	; 0x28
   1322c:	mov	r7, #0
   13230:	add	r1, r1, r6
   13234:	add	r2, r2, r6
   13238:	ldrb	r3, [r1, r7]
   1323c:	cmp	r3, #0
   13240:	bne	12f44 <__assert_fail@plt+0x1ea4>
   13244:	ldrb	r3, [r2, r7]
   13248:	cmp	r3, #93	; 0x5d
   1324c:	beq	13268 <__assert_fail@plt+0x21c8>
   13250:	add	r7, r7, #1
   13254:	add	r3, r6, r7
   13258:	add	r3, r3, #3
   1325c:	cmp	r3, r9
   13260:	bcc	13238 <__assert_fail@plt+0x2198>
   13264:	b	12f44 <__assert_fail@plt+0x1ea4>
   13268:	cmp	r7, #0
   1326c:	beq	132d4 <__assert_fail@plt+0x2234>
   13270:	mov	r8, ip
   13274:	mov	r1, #0
   13278:	mov	r2, #10
   1327c:	sub	r3, fp, #40	; 0x28
   13280:	ldrb	r0, [r8, r0]!
   13284:	str	r1, [sp]
   13288:	sub	r1, fp, #32
   1328c:	cmp	r0, #48	; 0x30
   13290:	mov	r0, r8
   13294:	movweq	r2, #8
   13298:	bl	16c08 <__assert_fail@plt+0x5b68>
   1329c:	cmp	r0, #0
   132a0:	bne	1357c <__assert_fail@plt+0x24dc>
   132a4:	ldr	r5, [fp, #-40]	; 0xffffffd8
   132a8:	ldr	sl, [fp, #-36]	; 0xffffffdc
   132ac:	and	r0, r5, sl
   132b0:	cmn	r0, #1
   132b4:	beq	1357c <__assert_fail@plt+0x24dc>
   132b8:	ldr	r0, [sp, #32]
   132bc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   132c0:	sub	r0, r0, r6
   132c4:	add	r0, r1, r0
   132c8:	cmp	r0, r7
   132cc:	beq	132e4 <__assert_fail@plt+0x2244>
   132d0:	b	1357c <__assert_fail@plt+0x24dc>
   132d4:	mov	r5, #0
   132d8:	mov	sl, #0
   132dc:	str	r5, [fp, #-36]	; 0xffffffdc
   132e0:	str	r5, [fp, #-40]	; 0xffffffd8
   132e4:	mov	r0, #24
   132e8:	bl	16664 <__assert_fail@plt+0x55c4>
   132ec:	mov	r2, #4
   132f0:	mov	r1, #0
   132f4:	str	r2, [r0]
   132f8:	str	r1, [r0, #4]
   132fc:	strb	r4, [r0, #8]
   13300:	str	r5, [r0, #16]
   13304:	str	sl, [r0, #20]
   13308:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1330c:	ldr	r1, [r2, #4]
   13310:	cmp	r1, #0
   13314:	beq	13648 <__assert_fail@plt+0x25a8>
   13318:	ldr	sl, [sp, #56]	; 0x38
   1331c:	str	r0, [r1, #4]
   13320:	str	r0, [r2, #4]
   13324:	add	r0, r6, r7
   13328:	add	r6, r0, #4
   1332c:	b	12f90 <__assert_fail@plt+0x1ef0>
   13330:	mov	r0, #24
   13334:	bl	16664 <__assert_fail@plt+0x55c4>
   13338:	mov	r1, #2
   1333c:	str	r1, [r0]
   13340:	mov	r1, #0
   13344:	stmib	r0, {r1, sl}
   13348:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1334c:	ldr	sl, [sp, #56]	; 0x38
   13350:	ldr	r1, [r2, #4]
   13354:	cmp	r1, #0
   13358:	bne	12f84 <__assert_fail@plt+0x1ee4>
   1335c:	movw	r0, #36101	; 0x8d05
   13360:	movw	r1, #35328	; 0x8a00
   13364:	movw	r3, #36112	; 0x8d10
   13368:	movw	r2, #701	; 0x2bd
   1336c:	movt	r0, #1
   13370:	movt	r1, #1
   13374:	movt	r3, #1
   13378:	bl	110a0 <__assert_fail@plt>
   1337c:	mov	sl, #1
   13380:	cmp	r6, r9
   13384:	bcs	133d0 <__assert_fail@plt+0x2330>
   13388:	ldr	r4, [fp, #-52]	; 0xffffffcc
   1338c:	mov	r8, ip
   13390:	mov	r5, #0
   13394:	ldrb	r7, [r8, r6]
   13398:	mov	r0, #24
   1339c:	bl	16664 <__assert_fail@plt+0x55c4>
   133a0:	str	r5, [r0]
   133a4:	str	r5, [r0, #4]
   133a8:	strb	r7, [r0, #8]
   133ac:	ldr	r1, [r4, #4]
   133b0:	cmp	r1, #0
   133b4:	beq	135c8 <__assert_fail@plt+0x2528>
   133b8:	add	r6, r6, #1
   133bc:	str	r0, [r1, #4]
   133c0:	str	r0, [r4, #4]
   133c4:	cmp	r6, r9
   133c8:	bcc	13394 <__assert_fail@plt+0x22f4>
   133cc:	mov	ip, r8
   133d0:	mov	r0, ip
   133d4:	bl	141b4 <__assert_fail@plt+0x3114>
   133d8:	ldr	r0, [sp, #56]	; 0x38
   133dc:	bl	141b4 <__assert_fail@plt+0x3114>
   133e0:	mov	r0, sl
   133e4:	sub	sp, fp, #28
   133e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133ec:	mov	r0, #5
   133f0:	bl	16664 <__assert_fail@plt+0x55c4>
   133f4:	mov	r9, r0
   133f8:	bl	10fb0 <__ctype_b_loc@plt>
   133fc:	mov	r7, r0
   13400:	ldr	r0, [r0]
   13404:	add	r0, r0, r8, lsl #1
   13408:	ldrb	r0, [r0, #1]
   1340c:	tst	r0, #64	; 0x40
   13410:	bne	13434 <__assert_fail@plt+0x2394>
   13414:	movw	r3, #36268	; 0x8dac
   13418:	mov	r0, r9
   1341c:	mov	r1, #1
   13420:	mov	r2, #5
   13424:	str	r8, [sp]
   13428:	movt	r3, #1
   1342c:	bl	10fec <__sprintf_chk@plt>
   13430:	b	13440 <__assert_fail@plt+0x23a0>
   13434:	mov	r0, #0
   13438:	strb	r0, [r9, #1]
   1343c:	strb	r8, [r9]
   13440:	mov	r0, #5
   13444:	bl	16664 <__assert_fail@plt+0x55c4>
   13448:	mov	r6, r0
   1344c:	ldr	r0, [r7]
   13450:	add	r0, r0, r5, lsl #1
   13454:	ldrb	r0, [r0, #1]
   13458:	tst	r0, #64	; 0x40
   1345c:	bne	13480 <__assert_fail@plt+0x23e0>
   13460:	movw	r3, #36268	; 0x8dac
   13464:	mov	r0, r6
   13468:	mov	r1, #1
   1346c:	mov	r2, #5
   13470:	str	r5, [sp]
   13474:	movt	r3, #1
   13478:	bl	10fec <__sprintf_chk@plt>
   1347c:	b	1348c <__assert_fail@plt+0x23ec>
   13480:	mov	r0, #0
   13484:	strb	r0, [r6, #1]
   13488:	strb	r5, [r6]
   1348c:	movw	r1, #36571	; 0x8edb
   13490:	mov	r0, #0
   13494:	mov	r2, #5
   13498:	mov	sl, #0
   1349c:	movt	r1, #1
   134a0:	bl	10ee4 <dcgettext@plt>
   134a4:	mov	r2, r0
   134a8:	mov	r0, #0
   134ac:	mov	r1, #0
   134b0:	mov	r3, r9
   134b4:	str	r6, [sp]
   134b8:	bl	10f50 <error@plt>
   134bc:	mov	r0, r9
   134c0:	bl	141b4 <__assert_fail@plt+0x3114>
   134c4:	b	13554 <__assert_fail@plt+0x24b4>
   134c8:	sub	r0, r5, r6
   134cc:	sub	r1, r0, #4
   134d0:	ldr	r0, [sp, #52]	; 0x34
   134d4:	bl	13c38 <__assert_fail@plt+0x2b98>
   134d8:	movw	r1, #36017	; 0x8cb1
   134dc:	mov	r6, r0
   134e0:	mov	sl, #0
   134e4:	movt	r1, #1
   134e8:	mov	r0, #0
   134ec:	mov	r2, #5
   134f0:	bl	10ee4 <dcgettext@plt>
   134f4:	mov	r8, r0
   134f8:	mov	r0, r6
   134fc:	bl	15e10 <__assert_fail@plt+0x4d70>
   13500:	mov	r3, r0
   13504:	mov	r0, #0
   13508:	mov	r1, #0
   1350c:	mov	r2, r8
   13510:	b	13550 <__assert_fail@plt+0x24b0>
   13514:	sub	r0, r5, r6
   13518:	sub	r1, r0, #4
   1351c:	ldr	r0, [sp, #52]	; 0x34
   13520:	bl	13c38 <__assert_fail@plt+0x2b98>
   13524:	movw	r1, #36044	; 0x8ccc
   13528:	mov	r6, r0
   1352c:	mov	r0, #0
   13530:	mov	r2, #5
   13534:	mov	sl, #0
   13538:	movt	r1, #1
   1353c:	bl	10ee4 <dcgettext@plt>
   13540:	mov	r2, r0
   13544:	mov	r0, #0
   13548:	mov	r1, #0
   1354c:	mov	r3, r6
   13550:	bl	10f50 <error@plt>
   13554:	mov	r0, r6
   13558:	bl	141b4 <__assert_fail@plt+0x3114>
   1355c:	ldr	ip, [fp, #-48]	; 0xffffffd0
   13560:	b	133d0 <__assert_fail@plt+0x2330>
   13564:	mov	sl, #0
   13568:	cmp	r4, #58	; 0x3a
   1356c:	bne	1359c <__assert_fail@plt+0x24fc>
   13570:	movw	r1, #35938	; 0x8c62
   13574:	movt	r1, #1
   13578:	b	135a4 <__assert_fail@plt+0x2504>
   1357c:	mov	r0, r8
   13580:	mov	r1, r7
   13584:	bl	13c38 <__assert_fail@plt+0x2b98>
   13588:	movw	r1, #36460	; 0x8e6c
   1358c:	mov	r6, r0
   13590:	mov	sl, #0
   13594:	movt	r1, #1
   13598:	b	134e8 <__assert_fail@plt+0x2448>
   1359c:	movw	r1, #35974	; 0x8c86
   135a0:	movt	r1, #1
   135a4:	mov	r0, #0
   135a8:	mov	r2, #5
   135ac:	bl	10ee4 <dcgettext@plt>
   135b0:	mov	r2, r0
   135b4:	mov	r0, #0
   135b8:	mov	r1, #0
   135bc:	bl	10f50 <error@plt>
   135c0:	ldr	ip, [fp, #-48]	; 0xffffffd0
   135c4:	b	133d0 <__assert_fail@plt+0x2330>
   135c8:	movw	r0, #36101	; 0x8d05
   135cc:	movw	r1, #35328	; 0x8a00
   135d0:	movw	r3, #36707	; 0x8f63
   135d4:	movw	r2, #649	; 0x289
   135d8:	movt	r0, #1
   135dc:	movt	r1, #1
   135e0:	movt	r3, #1
   135e4:	bl	110a0 <__assert_fail@plt>
   135e8:	movw	r0, #36341	; 0x8df5
   135ec:	movw	r1, #35328	; 0x8a00
   135f0:	movw	r3, #36365	; 0x8e0d
   135f4:	mov	r2, #784	; 0x310
   135f8:	movt	r0, #1
   135fc:	movt	r1, #1
   13600:	movt	r3, #1
   13604:	bl	110a0 <__assert_fail@plt>
   13608:	movw	r0, #36101	; 0x8d05
   1360c:	movw	r1, #35328	; 0x8a00
   13610:	movw	r3, #36638	; 0x8f1e
   13614:	movw	r2, #679	; 0x2a7
   13618:	movt	r0, #1
   1361c:	movt	r1, #1
   13620:	movt	r3, #1
   13624:	bl	110a0 <__assert_fail@plt>
   13628:	movw	r0, #36101	; 0x8d05
   1362c:	movw	r1, #35328	; 0x8a00
   13630:	movw	r3, #36274	; 0x8db2
   13634:	movw	r2, #743	; 0x2e7
   13638:	movt	r0, #1
   1363c:	movt	r1, #1
   13640:	movt	r3, #1
   13644:	bl	110a0 <__assert_fail@plt>
   13648:	movw	r0, #36101	; 0x8d05
   1364c:	movw	r1, #35328	; 0x8a00
   13650:	movw	r3, #36503	; 0x8e97
   13654:	movw	r2, #721	; 0x2d1
   13658:	movt	r0, #1
   1365c:	movt	r1, #1
   13660:	movt	r3, #1
   13664:	bl	110a0 <__assert_fail@plt>
   13668:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1366c:	add	fp, sp, #28
   13670:	sub	sp, sp, #4
   13674:	movw	r5, #41600	; 0xa280
   13678:	movw	sl, #41344	; 0xa180
   1367c:	mov	r8, r0
   13680:	mvn	r7, #-2147483648	; 0x80000000
   13684:	mov	r0, #0
   13688:	mov	r6, #0
   1368c:	movt	r5, #2
   13690:	movt	sl, #2
   13694:	b	136a0 <__assert_fail@plt+0x2600>
   13698:	mov	r0, r4
   1369c:	mvn	r7, #-2147483648	; 0x80000000
   136a0:	cmp	r0, r6
   136a4:	bcc	136c8 <__assert_fail@plt+0x2628>
   136a8:	mov	r0, r5
   136ac:	mov	r1, #8192	; 0x2000
   136b0:	blx	r8
   136b4:	cmp	r0, #0
   136b8:	subeq	sp, fp, #28
   136bc:	popeq	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136c0:	mov	r6, r0
   136c4:	mov	r0, #0
   136c8:	cmn	r7, #-2147483647	; 0x80000001
   136cc:	bne	13754 <__assert_fail@plt+0x26b4>
   136d0:	cmp	r6, r0
   136d4:	mov	r4, r0
   136d8:	bls	136fc <__assert_fail@plt+0x265c>
   136dc:	mov	r4, r0
   136e0:	ldrb	r1, [r5, r4]
   136e4:	ldrb	r1, [sl, r1]
   136e8:	cmp	r1, #0
   136ec:	bne	136fc <__assert_fail@plt+0x265c>
   136f0:	add	r4, r4, #2
   136f4:	cmp	r4, r6
   136f8:	bcc	136e0 <__assert_fail@plt+0x2640>
   136fc:	cmp	r4, r6
   13700:	bne	13718 <__assert_fail@plt+0x2678>
   13704:	sub	r4, r6, #1
   13708:	ldrb	r1, [r5, r4]
   1370c:	ldrb	r1, [sl, r1]
   13710:	cmp	r1, #0
   13714:	moveq	r4, r6
   13718:	cmp	r4, r6
   1371c:	bcs	13760 <__assert_fail@plt+0x26c0>
   13720:	ldrb	r9, [r5, r4]
   13724:	sub	r1, r4, r0
   13728:	cmp	r4, #0
   1372c:	add	r7, r1, #1
   13730:	beq	13744 <__assert_fail@plt+0x26a4>
   13734:	add	r2, r5, r4
   13738:	ldrb	r2, [r2, #-1]
   1373c:	cmp	r2, r9
   13740:	moveq	r7, r1
   13744:	add	r4, r4, #1
   13748:	cmp	r7, #0
   1374c:	bne	13770 <__assert_fail@plt+0x26d0>
   13750:	b	13794 <__assert_fail@plt+0x26f4>
   13754:	mov	r9, r7
   13758:	mov	r4, r0
   1375c:	b	137a4 <__assert_fail@plt+0x2704>
   13760:	sub	r7, r6, r0
   13764:	mvn	r9, #-2147483648	; 0x80000000
   13768:	cmp	r7, #0
   1376c:	beq	13794 <__assert_fail@plt+0x26f4>
   13770:	movw	r1, #41308	; 0xa15c
   13774:	add	r0, r5, r0
   13778:	mov	r2, r7
   1377c:	movt	r1, #2
   13780:	ldr	r3, [r1]
   13784:	mov	r1, #1
   13788:	bl	10ec0 <fwrite_unlocked@plt>
   1378c:	cmp	r0, r7
   13790:	bne	137d8 <__assert_fail@plt+0x2738>
   13794:	cmn	r9, #-2147483647	; 0x80000001
   13798:	mov	r0, r4
   1379c:	mvn	r7, #-2147483648	; 0x80000000
   137a0:	beq	136a0 <__assert_fail@plt+0x2600>
   137a4:	cmp	r4, r6
   137a8:	mov	r0, r4
   137ac:	mov	r7, r9
   137b0:	bcs	136a0 <__assert_fail@plt+0x2600>
   137b4:	ldrb	r0, [r5, r4]
   137b8:	cmp	r9, r0
   137bc:	bne	13698 <__assert_fail@plt+0x25f8>
   137c0:	add	r4, r4, #1
   137c4:	cmp	r4, r6
   137c8:	bcc	137b4 <__assert_fail@plt+0x2714>
   137cc:	mov	r0, r4
   137d0:	mov	r7, r9
   137d4:	b	136a0 <__assert_fail@plt+0x2600>
   137d8:	bl	10fe0 <__errno_location@plt>
   137dc:	ldr	r4, [r0]
   137e0:	movw	r1, #35290	; 0x89da
   137e4:	mov	r0, #0
   137e8:	mov	r2, #5
   137ec:	movt	r1, #1
   137f0:	bl	10ee4 <dcgettext@plt>
   137f4:	mov	r2, r0
   137f8:	mov	r0, #1
   137fc:	mov	r1, r4
   13800:	bl	10f50 <error@plt>
   13804:	push	{r4, sl, fp, lr}
   13808:	add	fp, sp, #8
   1380c:	mov	r2, r1
   13810:	mov	r1, r0
   13814:	mov	r0, #0
   13818:	bl	15f48 <__assert_fail@plt+0x4ea8>
   1381c:	cmn	r0, #1
   13820:	popne	{r4, sl, fp, pc}
   13824:	bl	10fe0 <__errno_location@plt>
   13828:	ldr	r4, [r0]
   1382c:	movw	r1, #37702	; 0x9346
   13830:	mov	r0, #0
   13834:	mov	r2, #5
   13838:	movt	r1, #1
   1383c:	bl	10ee4 <dcgettext@plt>
   13840:	mov	r2, r0
   13844:	mov	r0, #1
   13848:	mov	r1, r4
   1384c:	bl	10f50 <error@plt>
   13850:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13854:	add	fp, sp, #24
   13858:	movw	r7, #49792	; 0xc280
   1385c:	mov	r4, r1
   13860:	mov	r5, r0
   13864:	add	r8, r0, #1
   13868:	movt	r7, #2
   1386c:	mov	r0, #0
   13870:	mov	r1, r5
   13874:	mov	r2, r4
   13878:	bl	15f48 <__assert_fail@plt+0x4ea8>
   1387c:	cmp	r0, #0
   13880:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   13884:	cmn	r0, #1
   13888:	beq	13904 <__assert_fail@plt+0x2864>
   1388c:	mov	r2, #0
   13890:	ldrb	r1, [r5, r2]
   13894:	ldrb	r1, [r7, r1]
   13898:	cmp	r1, #0
   1389c:	bne	138ac <__assert_fail@plt+0x280c>
   138a0:	add	r2, r2, #1
   138a4:	cmp	r2, r0
   138a8:	bcc	13890 <__assert_fail@plt+0x27f0>
   138ac:	add	r1, r2, #1
   138b0:	cmp	r1, r0
   138b4:	bcs	138f4 <__assert_fail@plt+0x2854>
   138b8:	sub	r0, r0, #1
   138bc:	add	r1, r8, r2
   138c0:	sub	r3, r0, r2
   138c4:	mov	r0, r2
   138c8:	ldrb	r2, [r1]
   138cc:	add	r1, r1, #1
   138d0:	ldrb	r6, [r7, r2]
   138d4:	cmp	r6, #0
   138d8:	strbeq	r2, [r5, r0]
   138dc:	addeq	r0, r0, #1
   138e0:	subs	r3, r3, #1
   138e4:	bne	138c8 <__assert_fail@plt+0x2828>
   138e8:	cmp	r0, #0
   138ec:	beq	1386c <__assert_fail@plt+0x27cc>
   138f0:	b	13900 <__assert_fail@plt+0x2860>
   138f4:	mov	r0, r2
   138f8:	cmp	r0, #0
   138fc:	beq	1386c <__assert_fail@plt+0x27cc>
   13900:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13904:	bl	10fe0 <__errno_location@plt>
   13908:	ldr	r4, [r0]
   1390c:	movw	r1, #37702	; 0x9346
   13910:	mov	r0, #0
   13914:	mov	r2, #5
   13918:	movt	r1, #1
   1391c:	bl	10ee4 <dcgettext@plt>
   13920:	mov	r2, r0
   13924:	mov	r0, #1
   13928:	mov	r1, r4
   1392c:	bl	10f50 <error@plt>
   13930:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13934:	add	fp, sp, #28
   13938:	sub	sp, sp, #4
   1393c:	mov	r4, r0
   13940:	add	sl, r0, #8
   13944:	mvn	r9, #0
   13948:	mov	ip, #2
   1394c:	b	13960 <__assert_fail@plt+0x28c0>
   13950:	ldr	r0, [r6, #4]
   13954:	str	r0, [r4, #4]
   13958:	str	r9, [sl]
   1395c:	str	r9, [sl, #4]
   13960:	cmp	r1, #0
   13964:	strne	ip, [r1]
   13968:	subs	r7, r9, #1
   1396c:	ldm	sl, {r0, r3}
   13970:	sbc	r6, r9, #0
   13974:	eor	r6, r3, r6
   13978:	eor	r7, r0, r7
   1397c:	orrs	r7, r7, r6
   13980:	bne	139ac <__assert_fail@plt+0x290c>
   13984:	ldr	r0, [r4]
   13988:	mvn	r3, #0
   1398c:	ldr	r6, [r0, #4]
   13990:	mvn	r0, #0
   13994:	str	r6, [r4, #4]
   13998:	str	r9, [sl]
   1399c:	str	r9, [sl, #4]
   139a0:	cmp	r6, #0
   139a4:	bne	139b8 <__assert_fail@plt+0x2918>
   139a8:	b	13b90 <__assert_fail@plt+0x2af0>
   139ac:	ldr	r6, [r4, #4]
   139b0:	cmp	r6, #0
   139b4:	beq	13b90 <__assert_fail@plt+0x2af0>
   139b8:	ldr	r7, [r6]
   139bc:	cmp	r7, #4
   139c0:	bhi	13b98 <__assert_fail@plt+0x2af8>
   139c4:	add	r5, pc, #0
   139c8:	ldr	pc, [r5, r7, lsl #2]
   139cc:	andeq	r3, r1, r8, lsr sl
   139d0:	andeq	r3, r1, r4, ror sl
   139d4:	andeq	r3, r1, r0, asr sl
   139d8:	andeq	r3, r1, r8, lsr sl
   139dc:	andeq	r3, r1, r0, ror #19
   139e0:	mov	r7, r6
   139e4:	ldr	r5, [r7, #16]!
   139e8:	ldr	r2, [r7, #4]
   139ec:	orrs	r2, r5, r2
   139f0:	beq	13950 <__assert_fail@plt+0x28b0>
   139f4:	eor	r1, r0, r9
   139f8:	eor	r2, r3, r9
   139fc:	orrs	r1, r1, r2
   13a00:	moveq	r0, #0
   13a04:	moveq	r3, #0
   13a08:	streq	r0, [sl]
   13a0c:	streq	r0, [sl, #4]
   13a10:	adds	r0, r0, #1
   13a14:	adc	r1, r3, #0
   13a18:	strd	r0, [sl]
   13a1c:	ldrd	r2, [r7]
   13a20:	ldrb	r8, [r6, #8]
   13a24:	eor	r1, r1, r3
   13a28:	eor	r0, r0, r2
   13a2c:	orrs	r0, r0, r1
   13a30:	beq	13b74 <__assert_fail@plt+0x2ad4>
   13a34:	b	13b84 <__assert_fail@plt+0x2ae4>
   13a38:	ldrb	r8, [r6, #8]
   13a3c:	str	r9, [sl]
   13a40:	str	r9, [sl, #4]
   13a44:	ldr	r0, [r6, #4]
   13a48:	str	r0, [r4, #4]
   13a4c:	b	13b84 <__assert_fail@plt+0x2ae4>
   13a50:	cmp	r1, #0
   13a54:	beq	13abc <__assert_fail@plt+0x2a1c>
   13a58:	ldr	r0, [r6, #8]
   13a5c:	cmp	r0, #10
   13a60:	beq	13ab4 <__assert_fail@plt+0x2a14>
   13a64:	cmp	r0, #6
   13a68:	bne	13abc <__assert_fail@plt+0x2a1c>
   13a6c:	mov	r0, #0
   13a70:	b	13ab8 <__assert_fail@plt+0x2a18>
   13a74:	eor	r1, r0, r9
   13a78:	eor	r2, r3, r9
   13a7c:	orrs	r1, r1, r2
   13a80:	bne	13a90 <__assert_fail@plt+0x29f0>
   13a84:	ldrb	r8, [r6, #8]
   13a88:	mov	r1, #0
   13a8c:	b	13a98 <__assert_fail@plt+0x29f8>
   13a90:	adds	r8, r0, #1
   13a94:	adc	r1, r3, #0
   13a98:	str	r8, [sl]
   13a9c:	str	r1, [sl, #4]
   13aa0:	ldrb	r0, [r6, #9]
   13aa4:	eor	r0, r8, r0
   13aa8:	orrs	r0, r0, r1
   13aac:	beq	13b74 <__assert_fail@plt+0x2ad4>
   13ab0:	b	13b84 <__assert_fail@plt+0x2ae4>
   13ab4:	mov	r0, #1
   13ab8:	str	r0, [r1]
   13abc:	ldr	r8, [sl]
   13ac0:	ldr	r1, [sl, #4]
   13ac4:	eor	r0, r1, r9
   13ac8:	eor	r1, r8, r9
   13acc:	orrs	r0, r1, r0
   13ad0:	bne	13b28 <__assert_fail@plt+0x2a88>
   13ad4:	ldr	r5, [r6, #8]
   13ad8:	mov	r8, #0
   13adc:	uxtb	r1, r8
   13ae0:	mov	r0, r5
   13ae4:	bl	13fa8 <__assert_fail@plt+0x2f08>
   13ae8:	cmp	r0, #0
   13aec:	bne	13b1c <__assert_fail@plt+0x2a7c>
   13af0:	add	r8, r8, #1
   13af4:	cmp	r8, #256	; 0x100
   13af8:	bcc	13adc <__assert_fail@plt+0x2a3c>
   13afc:	movw	r0, #37713	; 0x9351
   13b00:	movw	r1, #35328	; 0x8a00
   13b04:	movw	r3, #37725	; 0x935d
   13b08:	movw	r2, #1079	; 0x437
   13b0c:	movt	r0, #1
   13b10:	movt	r1, #1
   13b14:	movt	r3, #1
   13b18:	bl	110a0 <__assert_fail@plt>
   13b1c:	mov	r1, #0
   13b20:	str	r8, [sl]
   13b24:	str	r1, [sl, #4]
   13b28:	ldr	r5, [r6, #8]
   13b2c:	uxtb	r1, r8
   13b30:	mov	r0, r5
   13b34:	bl	13fa8 <__assert_fail@plt+0x2f08>
   13b38:	cmp	r0, #0
   13b3c:	beq	13b9c <__assert_fail@plt+0x2afc>
   13b40:	mov	r7, r8
   13b44:	add	r7, r7, #1
   13b48:	cmp	r7, #255	; 0xff
   13b4c:	bgt	13b74 <__assert_fail@plt+0x2ad4>
   13b50:	uxtb	r1, r7
   13b54:	mov	r0, r5
   13b58:	bl	13fa8 <__assert_fail@plt+0x2f08>
   13b5c:	cmp	r0, #0
   13b60:	beq	13b44 <__assert_fail@plt+0x2aa4>
   13b64:	asr	r1, r7, #31
   13b68:	str	r7, [sl]
   13b6c:	str	r1, [sl, #4]
   13b70:	b	13b84 <__assert_fail@plt+0x2ae4>
   13b74:	ldr	r0, [r6, #4]
   13b78:	str	r0, [r4, #4]
   13b7c:	str	r9, [sl]
   13b80:	str	r9, [sl, #4]
   13b84:	mov	r0, r8
   13b88:	sub	sp, fp, #28
   13b8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b90:	mvn	r8, #0
   13b94:	b	13b84 <__assert_fail@plt+0x2ae4>
   13b98:	bl	11088 <abort@plt>
   13b9c:	movw	r0, #37784	; 0x9398
   13ba0:	movw	r1, #35328	; 0x8a00
   13ba4:	movw	r3, #37725	; 0x935d
   13ba8:	movw	r2, #1082	; 0x43a
   13bac:	movt	r0, #1
   13bb0:	movt	r1, #1
   13bb4:	movt	r3, #1
   13bb8:	bl	110a0 <__assert_fail@plt>
   13bbc:	push	{r4, sl, fp, lr}
   13bc0:	add	fp, sp, #8
   13bc4:	mov	r4, r0
   13bc8:	mov	r2, r1
   13bcc:	mov	r0, #0
   13bd0:	mov	r1, r4
   13bd4:	bl	15f48 <__assert_fail@plt+0x4ea8>
   13bd8:	cmp	r0, #0
   13bdc:	popeq	{r4, sl, fp, pc}
   13be0:	cmn	r0, #1
   13be4:	beq	13c0c <__assert_fail@plt+0x2b6c>
   13be8:	movw	r1, #50048	; 0xc380
   13bec:	mov	r2, r0
   13bf0:	movt	r1, #2
   13bf4:	ldrb	r3, [r4]
   13bf8:	subs	r2, r2, #1
   13bfc:	ldrb	r3, [r1, r3]
   13c00:	strb	r3, [r4], #1
   13c04:	bne	13bf4 <__assert_fail@plt+0x2b54>
   13c08:	pop	{r4, sl, fp, pc}
   13c0c:	bl	10fe0 <__errno_location@plt>
   13c10:	ldr	r4, [r0]
   13c14:	movw	r1, #37702	; 0x9346
   13c18:	mov	r0, #0
   13c1c:	mov	r2, #5
   13c20:	movt	r1, #1
   13c24:	bl	10ee4 <dcgettext@plt>
   13c28:	mov	r2, r0
   13c2c:	mov	r0, #1
   13c30:	mov	r1, r4
   13c34:	bl	10f50 <error@plt>
   13c38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c3c:	add	fp, sp, #28
   13c40:	sub	sp, sp, #12
   13c44:	mov	r5, r0
   13c48:	mov	r4, r1
   13c4c:	add	r0, r1, #1
   13c50:	mov	r1, #4
   13c54:	bl	16734 <__assert_fail@plt+0x5694>
   13c58:	mov	sl, r0
   13c5c:	cmp	r4, #0
   13c60:	beq	13d68 <__assert_fail@plt+0x2cc8>
   13c64:	movw	r7, #36245	; 0x8d95
   13c68:	add	r9, sp, #7
   13c6c:	mov	r6, sl
   13c70:	movt	r7, #1
   13c74:	ldrb	r8, [r5]
   13c78:	sub	r0, r8, #7
   13c7c:	cmp	r0, #6
   13c80:	bhi	13cb4 <__assert_fail@plt+0x2c14>
   13c84:	add	r1, pc, #0
   13c88:	ldr	pc, [r1, r0, lsl #2]
   13c8c:	andeq	r3, r1, r8, lsr #25
   13c90:	strdeq	r3, [r1], -r8
   13c94:	andeq	r3, r1, r4, lsl #26
   13c98:	andeq	r3, r1, r0, lsl sp
   13c9c:	andeq	r3, r1, ip, lsl sp
   13ca0:	andeq	r3, r1, r8, lsr #26
   13ca4:	andeq	r3, r1, r4, lsr sp
   13ca8:	movw	r1, #36247	; 0x8d97
   13cac:	movt	r1, #1
   13cb0:	b	13d50 <__assert_fail@plt+0x2cb0>
   13cb4:	cmp	r8, #92	; 0x5c
   13cb8:	mov	r1, r7
   13cbc:	beq	13d50 <__assert_fail@plt+0x2cb0>
   13cc0:	bl	10fb0 <__ctype_b_loc@plt>
   13cc4:	ldr	r0, [r0]
   13cc8:	add	r0, r0, r8, lsl #1
   13ccc:	ldrb	r0, [r0, #1]
   13cd0:	tst	r0, #64	; 0x40
   13cd4:	bne	13d40 <__assert_fail@plt+0x2ca0>
   13cd8:	movw	r3, #36268	; 0x8dac
   13cdc:	mov	r0, r9
   13ce0:	mov	r1, #1
   13ce4:	mov	r2, #5
   13ce8:	str	r8, [sp]
   13cec:	movt	r3, #1
   13cf0:	bl	10fec <__sprintf_chk@plt>
   13cf4:	b	13d4c <__assert_fail@plt+0x2cac>
   13cf8:	movw	r1, #36250	; 0x8d9a
   13cfc:	movt	r1, #1
   13d00:	b	13d50 <__assert_fail@plt+0x2cb0>
   13d04:	movw	r1, #36262	; 0x8da6
   13d08:	movt	r1, #1
   13d0c:	b	13d50 <__assert_fail@plt+0x2cb0>
   13d10:	movw	r1, #36256	; 0x8da0
   13d14:	movt	r1, #1
   13d18:	b	13d50 <__assert_fail@plt+0x2cb0>
   13d1c:	movw	r1, #36265	; 0x8da9
   13d20:	movt	r1, #1
   13d24:	b	13d50 <__assert_fail@plt+0x2cb0>
   13d28:	movw	r1, #36253	; 0x8d9d
   13d2c:	movt	r1, #1
   13d30:	b	13d50 <__assert_fail@plt+0x2cb0>
   13d34:	movw	r1, #36259	; 0x8da3
   13d38:	movt	r1, #1
   13d3c:	b	13d50 <__assert_fail@plt+0x2cb0>
   13d40:	mov	r0, #0
   13d44:	strb	r0, [sp, #8]
   13d48:	strb	r8, [sp, #7]
   13d4c:	mov	r1, r9
   13d50:	mov	r0, r6
   13d54:	bl	10ed8 <stpcpy@plt>
   13d58:	mov	r6, r0
   13d5c:	subs	r4, r4, #1
   13d60:	add	r5, r5, #1
   13d64:	bne	13c74 <__assert_fail@plt+0x2bd4>
   13d68:	mov	r0, sl
   13d6c:	sub	sp, fp, #28
   13d70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d74:	nop	{0}
   13d78:	nop	{0}
   13d7c:	nop	{0}
   13d80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d84:	add	fp, sp, #28
   13d88:	sub	sp, sp, #4
   13d8c:	vpush	{d8-d10}
   13d90:	sub	sp, sp, #8
   13d94:	mov	r2, #0
   13d98:	vldr	d8, [pc, #512]	; 13fa0 <__assert_fail@plt+0x2f00>
   13d9c:	mov	r1, #0
   13da0:	mov	ip, #1
   13da4:	vmov.i32	d9, #255	; 0x000000ff
   13da8:	vmov.i32	d10, #2	; 0x00000002
   13dac:	mov	r8, #0
   13db0:	mov	r6, #0
   13db4:	str	r0, [sp, #4]
   13db8:	str	r2, [r0, #24]
   13dbc:	strb	r2, [r0, #34]	; 0x22
   13dc0:	strh	r2, [r0, #32]
   13dc4:	str	r1, [sp]
   13dc8:	ldr	r7, [r0]
   13dcc:	ldr	r7, [r7, #4]
   13dd0:	cmp	r7, #0
   13dd4:	beq	13f50 <__assert_fail@plt+0x2eb0>
   13dd8:	ldr	r2, [r7]
   13ddc:	cmp	r2, #4
   13de0:	bhi	13f68 <__assert_fail@plt+0x2ec8>
   13de4:	add	r1, pc, #8
   13de8:	mov	r5, #0
   13dec:	mov	r4, #1
   13df0:	ldr	pc, [r1, r2, lsl #2]
   13df4:	andeq	r3, r1, r4, lsl #30
   13df8:	andeq	r3, r1, r8, lsl #28
   13dfc:	andeq	r3, r1, r4, asr lr
   13e00:	andeq	r3, r1, r4, lsr #29
   13e04:	andeq	r3, r1, r8, lsr #28
   13e08:	ldrb	r2, [r7, #8]
   13e0c:	ldrb	r1, [r7, #9]
   13e10:	cmp	r1, r2
   13e14:	bcc	13f6c <__assert_fail@plt+0x2ecc>
   13e18:	add	r1, r1, #1
   13e1c:	sub	r4, r1, r2
   13e20:	asr	r5, r4, #31
   13e24:	b	13f04 <__assert_fail@plt+0x2e64>
   13e28:	ldrd	r4, [r7, #16]
   13e2c:	orrs	r1, r4, r5
   13e30:	bne	13f04 <__assert_fail@plt+0x2e64>
   13e34:	ldr	r1, [sp]
   13e38:	mov	r4, #0
   13e3c:	mov	r5, #0
   13e40:	add	r1, r1, #1
   13e44:	str	r1, [sp]
   13e48:	str	r1, [r0, #24]
   13e4c:	str	r7, [r0, #28]
   13e50:	b	13f04 <__assert_fail@plt+0x2e64>
   13e54:	strb	ip, [r0, #33]	; 0x21
   13e58:	mov	sl, #0
   13e5c:	mov	r4, #0
   13e60:	mov	r5, #0
   13e64:	ldr	r9, [r7, #8]
   13e68:	uxtb	r1, sl
   13e6c:	mov	r0, r9
   13e70:	bl	13fa8 <__assert_fail@plt+0x2f08>
   13e74:	adds	r4, r4, r0
   13e78:	add	sl, sl, #1
   13e7c:	adc	r5, r5, #0
   13e80:	cmp	sl, #256	; 0x100
   13e84:	bne	13e68 <__assert_fail@plt+0x2dc8>
   13e88:	cmp	r9, #6
   13e8c:	beq	13efc <__assert_fail@plt+0x2e5c>
   13e90:	ldr	r0, [sp, #4]
   13e94:	cmp	r9, #10
   13e98:	mov	ip, #1
   13e9c:	strbne	ip, [r0, #34]	; 0x22
   13ea0:	b	13f04 <__assert_fail@plt+0x2e64>
   13ea4:	ldrb	r1, [r7, #8]
   13ea8:	vmov.i32	q8, #0	; 0x00000000
   13eac:	mov	r2, #256	; 0x100
   13eb0:	vorr	d19, d8, d8
   13eb4:	vdup.32	d18, r1
   13eb8:	add	r1, pc, #208	; 0xd0
   13ebc:	vand	d20, d19, d9
   13ec0:	vand	d21, d18, d9
   13ec4:	subs	r2, r2, #2
   13ec8:	vadd.i32	d19, d19, d10
   13ecc:	vld1.64	{d22-d23}, [r1 :128]
   13ed0:	vceq.i32	d20, d21, d20
   13ed4:	vmovl.u32	q10, d20
   13ed8:	vand	q10, q10, q11
   13edc:	vadd.i64	q8, q8, q10
   13ee0:	bne	13eb8 <__assert_fail@plt+0x2e18>
   13ee4:	vorr	d18, d17, d17
   13ee8:	strb	ip, [r0, #32]
   13eec:	vadd.i64	q8, q8, q9
   13ef0:	vmov.32	r5, d16[1]
   13ef4:	vmov.32	r4, d16[0]
   13ef8:	b	13f04 <__assert_fail@plt+0x2e64>
   13efc:	ldr	r0, [sp, #4]
   13f00:	mov	ip, #1
   13f04:	adds	r3, r4, r8
   13f08:	adc	r1, r5, r6
   13f0c:	subs	r2, r3, r8
   13f10:	sbcs	r2, r1, r6
   13f14:	bcc	13f2c <__assert_fail@plt+0x2e8c>
   13f18:	and	r2, r3, r1
   13f1c:	mov	r8, r3
   13f20:	mov	r6, r1
   13f24:	cmn	r2, #1
   13f28:	bne	13dcc <__assert_fail@plt+0x2d2c>
   13f2c:	movw	r1, #37336	; 0x91d8
   13f30:	mov	r0, #0
   13f34:	mov	r2, #5
   13f38:	movt	r1, #1
   13f3c:	bl	10ee4 <dcgettext@plt>
   13f40:	mov	r2, r0
   13f44:	mov	r0, #1
   13f48:	mov	r1, #0
   13f4c:	bl	10f50 <error@plt>
   13f50:	str	r8, [r0, #16]
   13f54:	str	r6, [r0, #20]
   13f58:	sub	sp, fp, #56	; 0x38
   13f5c:	vpop	{d8-d10}
   13f60:	add	sp, sp, #4
   13f64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f68:	bl	11088 <abort@plt>
   13f6c:	movw	r0, #37250	; 0x9182
   13f70:	movw	r1, #35328	; 0x8a00
   13f74:	movw	r3, #37296	; 0x91b0
   13f78:	movw	r2, #1265	; 0x4f1
   13f7c:	movt	r0, #1
   13f80:	movt	r1, #1
   13f84:	movt	r3, #1
   13f88:	bl	110a0 <__assert_fail@plt>
   13f8c:	nop	{0}
   13f90:	andeq	r0, r0, r1
   13f94:	andeq	r0, r0, r0
   13f98:	andeq	r0, r0, r1
	...
   13fa4:	andeq	r0, r0, r1
   13fa8:	push	{r4, r5, fp, lr}
   13fac:	add	fp, sp, #8
   13fb0:	cmp	r0, #11
   13fb4:	bhi	14068 <__assert_fail@plt+0x2fc8>
   13fb8:	mov	r4, r1
   13fbc:	add	r1, pc, #4
   13fc0:	mov	r5, #8
   13fc4:	ldr	pc, [r1, r0, lsl #2]
   13fc8:	andeq	r4, r1, ip, asr #32
   13fcc:	strdeq	r3, [r1], -r8
   13fd0:	andeq	r4, r1, r0, lsl r0
   13fd4:	andeq	r4, r1, r0, lsr #32
   13fd8:	andeq	r4, r1, r8
   13fdc:	andeq	r4, r1, r0, lsr r0
   13fe0:	andeq	r4, r1, r8, lsr r0
   13fe4:	andeq	r4, r1, r8, lsr #32
   13fe8:	andeq	r4, r1, r0, asr #32
   13fec:	andeq	r4, r1, r8, lsl r0
   13ff0:	andeq	r4, r1, r8, asr #32
   13ff4:	andeq	r4, r1, r0
   13ff8:	mov	r5, #1024	; 0x400
   13ffc:	b	1404c <__assert_fail@plt+0x2fac>
   14000:	mov	r5, #4096	; 0x1000
   14004:	b	1404c <__assert_fail@plt+0x2fac>
   14008:	mov	r5, #2048	; 0x800
   1400c:	b	1404c <__assert_fail@plt+0x2fac>
   14010:	mov	r5, #1
   14014:	b	1404c <__assert_fail@plt+0x2fac>
   14018:	mov	r5, #8192	; 0x2000
   1401c:	b	1404c <__assert_fail@plt+0x2fac>
   14020:	mov	r5, #2
   14024:	b	1404c <__assert_fail@plt+0x2fac>
   14028:	mov	r5, #16384	; 0x4000
   1402c:	b	1404c <__assert_fail@plt+0x2fac>
   14030:	mov	r5, #32768	; 0x8000
   14034:	b	1404c <__assert_fail@plt+0x2fac>
   14038:	mov	r5, #512	; 0x200
   1403c:	b	1404c <__assert_fail@plt+0x2fac>
   14040:	mov	r5, #4
   14044:	b	1404c <__assert_fail@plt+0x2fac>
   14048:	mov	r5, #256	; 0x100
   1404c:	bl	10fb0 <__ctype_b_loc@plt>
   14050:	ldr	r0, [r0]
   14054:	add	r0, r0, r4, lsl #1
   14058:	ldrh	r0, [r0]
   1405c:	ands	r0, r0, r5
   14060:	movwne	r0, #1
   14064:	pop	{r4, r5, fp, pc}
   14068:	bl	11088 <abort@plt>
   1406c:	movw	r1, #50304	; 0xc480
   14070:	movt	r1, #2
   14074:	str	r0, [r1]
   14078:	bx	lr
   1407c:	movw	r1, #50308	; 0xc484
   14080:	movt	r1, #2
   14084:	strb	r0, [r1]
   14088:	bx	lr
   1408c:	push	{r4, r5, r6, sl, fp, lr}
   14090:	add	fp, sp, #16
   14094:	sub	sp, sp, #8
   14098:	movw	r0, #41308	; 0xa15c
   1409c:	movt	r0, #2
   140a0:	ldr	r0, [r0]
   140a4:	bl	17980 <__assert_fail@plt+0x68e0>
   140a8:	cmp	r0, #0
   140ac:	beq	140d4 <__assert_fail@plt+0x3034>
   140b0:	movw	r0, #50308	; 0xc484
   140b4:	movt	r0, #2
   140b8:	ldrb	r0, [r0]
   140bc:	cmp	r0, #0
   140c0:	beq	140f4 <__assert_fail@plt+0x3054>
   140c4:	bl	10fe0 <__errno_location@plt>
   140c8:	ldr	r0, [r0]
   140cc:	cmp	r0, #32
   140d0:	bne	140f4 <__assert_fail@plt+0x3054>
   140d4:	movw	r0, #41296	; 0xa150
   140d8:	movt	r0, #2
   140dc:	ldr	r0, [r0]
   140e0:	bl	17980 <__assert_fail@plt+0x68e0>
   140e4:	cmp	r0, #0
   140e8:	subeq	sp, fp, #16
   140ec:	popeq	{r4, r5, r6, sl, fp, pc}
   140f0:	b	14164 <__assert_fail@plt+0x30c4>
   140f4:	movw	r1, #35290	; 0x89da
   140f8:	mov	r0, #0
   140fc:	mov	r2, #5
   14100:	movt	r1, #1
   14104:	bl	10ee4 <dcgettext@plt>
   14108:	mov	r4, r0
   1410c:	movw	r0, #50304	; 0xc480
   14110:	movt	r0, #2
   14114:	ldr	r6, [r0]
   14118:	bl	10fe0 <__errno_location@plt>
   1411c:	ldr	r5, [r0]
   14120:	cmp	r6, #0
   14124:	bne	14140 <__assert_fail@plt+0x30a0>
   14128:	movw	r2, #38075	; 0x94bb
   1412c:	mov	r0, #0
   14130:	mov	r1, r5
   14134:	mov	r3, r4
   14138:	movt	r2, #1
   1413c:	b	14160 <__assert_fail@plt+0x30c0>
   14140:	mov	r0, r6
   14144:	bl	15a88 <__assert_fail@plt+0x49e8>
   14148:	movw	r2, #38071	; 0x94b7
   1414c:	mov	r3, r0
   14150:	str	r4, [sp]
   14154:	mov	r0, #0
   14158:	mov	r1, r5
   1415c:	movt	r2, #1
   14160:	bl	10f50 <error@plt>
   14164:	movw	r0, #41204	; 0xa0f4
   14168:	movt	r0, #2
   1416c:	ldr	r0, [r0]
   14170:	bl	10e90 <_exit@plt>
   14174:	b	10e60 <posix_fadvise64@plt>
   14178:	cmp	r0, #0
   1417c:	bxeq	lr
   14180:	push	{r4, sl, fp, lr}
   14184:	add	fp, sp, #8
   14188:	sub	sp, sp, #16
   1418c:	mov	r4, r1
   14190:	bl	1101c <fileno@plt>
   14194:	mov	r1, #0
   14198:	mov	r2, #0
   1419c:	mov	r3, #0
   141a0:	str	r1, [sp]
   141a4:	stmib	sp, {r1, r4}
   141a8:	bl	10e60 <posix_fadvise64@plt>
   141ac:	sub	sp, fp, #8
   141b0:	pop	{r4, sl, fp, pc}
   141b4:	push	{r4, r5, r6, sl, fp, lr}
   141b8:	add	fp, sp, #16
   141bc:	mov	r4, r0
   141c0:	bl	10fe0 <__errno_location@plt>
   141c4:	ldr	r6, [r0]
   141c8:	mov	r5, r0
   141cc:	mov	r0, r4
   141d0:	bl	10e84 <free@plt>
   141d4:	str	r6, [r5]
   141d8:	pop	{r4, r5, r6, sl, fp, pc}
   141dc:	push	{r4, r5, fp, lr}
   141e0:	add	fp, sp, #8
   141e4:	cmp	r0, #0
   141e8:	beq	1427c <__assert_fail@plt+0x31dc>
   141ec:	mov	r1, #47	; 0x2f
   141f0:	mov	r4, r0
   141f4:	bl	11058 <strrchr@plt>
   141f8:	cmp	r0, #0
   141fc:	mov	r5, r4
   14200:	addne	r5, r0, #1
   14204:	sub	r0, r5, r4
   14208:	cmp	r0, #7
   1420c:	blt	14260 <__assert_fail@plt+0x31c0>
   14210:	movw	r1, #38134	; 0x94f6
   14214:	sub	r0, r5, #7
   14218:	mov	r2, #7
   1421c:	movt	r1, #1
   14220:	bl	1107c <strncmp@plt>
   14224:	cmp	r0, #0
   14228:	bne	14260 <__assert_fail@plt+0x31c0>
   1422c:	movw	r1, #38142	; 0x94fe
   14230:	mov	r0, r5
   14234:	mov	r2, #3
   14238:	movt	r1, #1
   1423c:	bl	1107c <strncmp@plt>
   14240:	cmp	r0, #0
   14244:	beq	14250 <__assert_fail@plt+0x31b0>
   14248:	mov	r4, r5
   1424c:	b	14260 <__assert_fail@plt+0x31c0>
   14250:	movw	r0, #41280	; 0xa140
   14254:	add	r4, r5, #3
   14258:	movt	r0, #2
   1425c:	str	r4, [r0]
   14260:	movw	r0, #41284	; 0xa144
   14264:	movt	r0, #2
   14268:	str	r4, [r0]
   1426c:	movw	r0, #50312	; 0xc488
   14270:	movt	r0, #2
   14274:	str	r4, [r0]
   14278:	pop	{r4, r5, fp, pc}
   1427c:	movw	r0, #41296	; 0xa150
   14280:	mov	r1, #55	; 0x37
   14284:	mov	r2, #1
   14288:	movt	r0, #2
   1428c:	ldr	r3, [r0]
   14290:	movw	r0, #38078	; 0x94be
   14294:	movt	r0, #1
   14298:	bl	10f14 <fwrite@plt>
   1429c:	bl	11088 <abort@plt>
   142a0:	push	{r4, r5, r6, sl, fp, lr}
   142a4:	add	fp, sp, #16
   142a8:	mov	r4, r0
   142ac:	movw	r0, #50320	; 0xc490
   142b0:	movt	r0, #2
   142b4:	cmp	r4, #0
   142b8:	moveq	r4, r0
   142bc:	bl	10fe0 <__errno_location@plt>
   142c0:	ldr	r6, [r0]
   142c4:	mov	r5, r0
   142c8:	mov	r0, r4
   142cc:	mov	r1, #48	; 0x30
   142d0:	bl	16ac4 <__assert_fail@plt+0x5a24>
   142d4:	str	r6, [r5]
   142d8:	pop	{r4, r5, r6, sl, fp, pc}
   142dc:	movw	r1, #50320	; 0xc490
   142e0:	cmp	r0, #0
   142e4:	movt	r1, #2
   142e8:	movne	r1, r0
   142ec:	ldr	r0, [r1]
   142f0:	bx	lr
   142f4:	movw	r2, #50320	; 0xc490
   142f8:	cmp	r0, #0
   142fc:	movt	r2, #2
   14300:	movne	r2, r0
   14304:	str	r1, [r2]
   14308:	bx	lr
   1430c:	movw	r3, #50320	; 0xc490
   14310:	cmp	r0, #0
   14314:	movt	r3, #2
   14318:	movne	r3, r0
   1431c:	ubfx	r0, r1, #5, #3
   14320:	and	r1, r1, #31
   14324:	add	r0, r3, r0, lsl #2
   14328:	ldr	r3, [r0, #8]
   1432c:	eor	r2, r2, r3, lsr r1
   14330:	and	r2, r2, #1
   14334:	eor	r2, r3, r2, lsl r1
   14338:	str	r2, [r0, #8]
   1433c:	mov	r0, #1
   14340:	and	r0, r0, r3, lsr r1
   14344:	bx	lr
   14348:	movw	r2, #50320	; 0xc490
   1434c:	cmp	r0, #0
   14350:	movt	r2, #2
   14354:	movne	r2, r0
   14358:	ldr	r0, [r2, #4]
   1435c:	str	r1, [r2, #4]
   14360:	bx	lr
   14364:	movw	r3, #50320	; 0xc490
   14368:	cmp	r0, #0
   1436c:	movt	r3, #2
   14370:	movne	r3, r0
   14374:	cmp	r1, #0
   14378:	mov	r0, #10
   1437c:	cmpne	r2, #0
   14380:	str	r0, [r3]
   14384:	bne	14394 <__assert_fail@plt+0x32f4>
   14388:	push	{fp, lr}
   1438c:	mov	fp, sp
   14390:	bl	11088 <abort@plt>
   14394:	str	r1, [r3, #40]	; 0x28
   14398:	str	r2, [r3, #44]	; 0x2c
   1439c:	bx	lr
   143a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143a4:	add	fp, sp, #28
   143a8:	sub	sp, sp, #20
   143ac:	mov	r7, r0
   143b0:	ldr	r0, [fp, #8]
   143b4:	movw	r5, #50320	; 0xc490
   143b8:	mov	r8, r3
   143bc:	mov	r9, r2
   143c0:	mov	sl, r1
   143c4:	movt	r5, #2
   143c8:	cmp	r0, #0
   143cc:	movne	r5, r0
   143d0:	bl	10fe0 <__errno_location@plt>
   143d4:	mov	r4, r0
   143d8:	ldm	r5, {r0, r1}
   143dc:	ldr	r2, [r5, #40]	; 0x28
   143e0:	ldr	r3, [r5, #44]	; 0x2c
   143e4:	add	r5, r5, #8
   143e8:	ldr	r6, [r4]
   143ec:	stm	sp, {r0, r1, r5}
   143f0:	str	r2, [sp, #12]
   143f4:	str	r3, [sp, #16]
   143f8:	mov	r0, r7
   143fc:	mov	r1, sl
   14400:	mov	r2, r9
   14404:	mov	r3, r8
   14408:	bl	14418 <__assert_fail@plt+0x3378>
   1440c:	str	r6, [r4]
   14410:	sub	sp, fp, #28
   14414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14418:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1441c:	add	fp, sp, #28
   14420:	sub	sp, sp, #156	; 0x9c
   14424:	str	r0, [sp, #80]	; 0x50
   14428:	ldr	r0, [fp, #12]
   1442c:	mov	r6, r1
   14430:	mov	r9, r3
   14434:	str	r2, [fp, #-84]	; 0xffffffac
   14438:	and	r1, r0, #4
   1443c:	str	r1, [sp, #32]
   14440:	and	r1, r0, #1
   14444:	str	r1, [sp, #36]	; 0x24
   14448:	ubfx	r4, r0, #1, #1
   1444c:	bl	10f2c <__ctype_get_mb_cur_max@plt>
   14450:	str	r0, [sp, #40]	; 0x28
   14454:	ldr	r0, [fp, #24]
   14458:	ldr	r7, [fp, #8]
   1445c:	mov	r1, #0
   14460:	mov	r5, #1
   14464:	str	r1, [fp, #-56]	; 0xffffffc8
   14468:	mov	r1, #0
   1446c:	str	r1, [sp, #60]	; 0x3c
   14470:	str	r0, [sp, #76]	; 0x4c
   14474:	ldr	r0, [fp, #20]
   14478:	str	r0, [sp, #72]	; 0x48
   1447c:	mov	r0, #0
   14480:	str	r0, [sp, #56]	; 0x38
   14484:	mov	r0, #0
   14488:	str	r0, [sp, #92]	; 0x5c
   1448c:	mov	r0, #0
   14490:	str	r0, [fp, #-76]	; 0xffffffb4
   14494:	mov	r0, #0
   14498:	cmp	r7, #10
   1449c:	bhi	1541c <__assert_fail@plt+0x437c>
   144a0:	add	r1, pc, #28
   144a4:	mov	sl, r6
   144a8:	ldr	r6, [sp, #80]	; 0x50
   144ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   144b0:	mov	r8, #0
   144b4:	mov	r2, #1
   144b8:	mov	r3, #0
   144bc:	mov	lr, r9
   144c0:	ldr	pc, [r1, r7, lsl #2]
   144c4:	andeq	r4, r1, r8, lsr #11
   144c8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144cc:	muleq	r1, r8, r5
   144d0:	muleq	r1, r0, r5
   144d4:	andeq	r4, r1, r8, asr #11
   144d8:	andeq	r4, r1, ip, lsl r6
   144dc:			; <UNDEFINED> instruction: 0x000145b8
   144e0:	andeq	r4, r1, r8, ror r6
   144e4:	strdeq	r4, [r1], -r0
   144e8:	strdeq	r4, [r1], -r0
   144ec:	andeq	r4, r1, r8, lsl r5
   144f0:	movw	r0, #38224	; 0x9550
   144f4:	mov	r1, r7
   144f8:	movt	r0, #1
   144fc:	bl	15e28 <__assert_fail@plt+0x4d88>
   14500:	str	r0, [sp, #72]	; 0x48
   14504:	movw	r0, #35972	; 0x8c84
   14508:	mov	r1, r7
   1450c:	movt	r0, #1
   14510:	bl	15e28 <__assert_fail@plt+0x4d88>
   14514:	str	r0, [sp, #76]	; 0x4c
   14518:	str	r5, [fp, #-48]	; 0xffffffd0
   1451c:	mov	r8, #0
   14520:	mov	r5, r7
   14524:	tst	r4, #1
   14528:	bne	14560 <__assert_fail@plt+0x34c0>
   1452c:	ldr	r0, [sp, #72]	; 0x48
   14530:	ldrb	r0, [r0]
   14534:	cmp	r0, #0
   14538:	beq	14560 <__assert_fail@plt+0x34c0>
   1453c:	ldr	r1, [sp, #72]	; 0x48
   14540:	mov	r8, #0
   14544:	add	r1, r1, #1
   14548:	cmp	r8, sl
   1454c:	strbcc	r0, [r6, r8]
   14550:	ldrb	r0, [r1, r8]
   14554:	add	r8, r8, #1
   14558:	cmp	r0, #0
   1455c:	bne	14548 <__assert_fail@plt+0x34a8>
   14560:	ldr	r7, [sp, #76]	; 0x4c
   14564:	mov	r0, r7
   14568:	bl	10fc8 <strlen@plt>
   1456c:	str	r7, [sp, #92]	; 0x5c
   14570:	mov	r7, r5
   14574:	ldr	ip, [fp, #-84]	; 0xffffffac
   14578:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1457c:	str	r0, [fp, #-76]	; 0xffffffb4
   14580:	mov	r2, #1
   14584:	mov	r3, r4
   14588:	mov	lr, r9
   1458c:	b	14678 <__assert_fail@plt+0x35d8>
   14590:	mov	r0, #1
   14594:	b	145d4 <__assert_fail@plt+0x3534>
   14598:	tst	r4, #1
   1459c:	bne	145d4 <__assert_fail@plt+0x3534>
   145a0:	mov	r2, r0
   145a4:	b	145fc <__assert_fail@plt+0x355c>
   145a8:	mov	r7, #0
   145ac:	mov	r8, #0
   145b0:	mov	r2, r0
   145b4:	b	14674 <__assert_fail@plt+0x35d4>
   145b8:	mov	r0, #1
   145bc:	mov	r8, #0
   145c0:	mov	r7, #5
   145c4:	b	14630 <__assert_fail@plt+0x3590>
   145c8:	mov	r2, #1
   145cc:	tst	r4, #1
   145d0:	beq	145fc <__assert_fail@plt+0x355c>
   145d4:	mov	r1, #1
   145d8:	mov	r8, #0
   145dc:	mov	r7, #2
   145e0:	mov	r2, r0
   145e4:	mov	r3, #1
   145e8:	str	r1, [fp, #-76]	; 0xffffffb4
   145ec:	movw	r1, #35972	; 0x8c84
   145f0:	movt	r1, #1
   145f4:	str	r1, [sp, #92]	; 0x5c
   145f8:	b	14678 <__assert_fail@plt+0x35d8>
   145fc:	cmp	sl, #0
   14600:	mov	r8, #1
   14604:	mov	r7, #2
   14608:	movne	r0, #39	; 0x27
   1460c:	strbne	r0, [r6]
   14610:	movw	r0, #35972	; 0x8c84
   14614:	movt	r0, #1
   14618:	b	14668 <__assert_fail@plt+0x35c8>
   1461c:	mov	r7, #5
   14620:	tst	r4, #1
   14624:	beq	1464c <__assert_fail@plt+0x35ac>
   14628:	mov	r0, #1
   1462c:	mov	r8, #0
   14630:	str	r0, [fp, #-76]	; 0xffffffb4
   14634:	movw	r0, #38222	; 0x954e
   14638:	mov	r2, #1
   1463c:	mov	r3, #1
   14640:	movt	r0, #1
   14644:	str	r0, [sp, #92]	; 0x5c
   14648:	b	14678 <__assert_fail@plt+0x35d8>
   1464c:	cmp	sl, #0
   14650:	mov	r8, #1
   14654:	mov	r2, #1
   14658:	movne	r0, #34	; 0x22
   1465c:	strbne	r0, [r6]
   14660:	movw	r0, #38222	; 0x954e
   14664:	movt	r0, #1
   14668:	str	r0, [sp, #92]	; 0x5c
   1466c:	mov	r0, #1
   14670:	str	r0, [fp, #-76]	; 0xffffffb4
   14674:	mov	r3, #0
   14678:	ldr	r0, [fp, #16]
   1467c:	str	r3, [fp, #-72]	; 0xffffffb8
   14680:	str	r7, [fp, #-64]	; 0xffffffc0
   14684:	str	r2, [sp, #84]	; 0x54
   14688:	cmp	r0, #0
   1468c:	movwne	r0, #1
   14690:	and	r0, r0, r3
   14694:	str	r0, [fp, #-88]	; 0xffffffa8
   14698:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1469c:	cmp	r0, #0
   146a0:	movwne	r0, #1
   146a4:	subs	r4, r7, #2
   146a8:	mov	r7, #0
   146ac:	and	r1, r0, r3
   146b0:	str	r4, [fp, #-80]	; 0xffffffb0
   146b4:	and	r1, r2, r1
   146b8:	str	r1, [sp, #48]	; 0x30
   146bc:	clz	r1, r4
   146c0:	lsr	r1, r1, #5
   146c4:	and	r1, r1, r3
   146c8:	eor	r3, r3, #1
   146cc:	str	r1, [sp, #64]	; 0x40
   146d0:	mov	r1, r4
   146d4:	str	r3, [sp, #88]	; 0x58
   146d8:	movwne	r1, #1
   146dc:	orr	r3, r1, r3
   146e0:	and	r1, r1, r2
   146e4:	and	r0, r0, r1
   146e8:	str	r3, [sp, #68]	; 0x44
   146ec:	str	r1, [fp, #-68]	; 0xffffffbc
   146f0:	str	r0, [fp, #-60]	; 0xffffffc4
   146f4:	eor	r0, r2, #1
   146f8:	str	r0, [sp, #52]	; 0x34
   146fc:	cmn	lr, #1
   14700:	beq	14710 <__assert_fail@plt+0x3670>
   14704:	cmp	r7, lr
   14708:	bne	1471c <__assert_fail@plt+0x367c>
   1470c:	b	15244 <__assert_fail@plt+0x41a4>
   14710:	ldrb	r0, [ip, r7]
   14714:	cmp	r0, #0
   14718:	beq	1524c <__assert_fail@plt+0x41ac>
   1471c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14720:	mov	r9, #0
   14724:	str	r5, [fp, #-48]	; 0xffffffd0
   14728:	cmp	r0, #0
   1472c:	beq	14760 <__assert_fail@plt+0x36c0>
   14730:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14734:	add	r4, r7, r0
   14738:	cmp	r0, #2
   1473c:	bcc	14758 <__assert_fail@plt+0x36b8>
   14740:	cmn	lr, #1
   14744:	bne	14758 <__assert_fail@plt+0x36b8>
   14748:	mov	r0, ip
   1474c:	bl	10fc8 <strlen@plt>
   14750:	ldr	ip, [fp, #-84]	; 0xffffffac
   14754:	mov	lr, r0
   14758:	cmp	r4, lr
   1475c:	bls	14768 <__assert_fail@plt+0x36c8>
   14760:	mov	r0, #0
   14764:	b	147a8 <__assert_fail@plt+0x3708>
   14768:	ldr	r1, [sp, #92]	; 0x5c
   1476c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14770:	add	r0, ip, r7
   14774:	mov	r4, lr
   14778:	bl	10ecc <memcmp@plt>
   1477c:	ldr	r2, [sp, #88]	; 0x58
   14780:	cmp	r0, #0
   14784:	mov	r1, r0
   14788:	movwne	r1, #1
   1478c:	orr	r1, r1, r2
   14790:	tst	r1, #1
   14794:	beq	152dc <__assert_fail@plt+0x423c>
   14798:	ldr	ip, [fp, #-84]	; 0xffffffac
   1479c:	clz	r0, r0
   147a0:	mov	lr, r4
   147a4:	lsr	r0, r0, #5
   147a8:	str	r0, [fp, #-52]	; 0xffffffcc
   147ac:	ldrb	r5, [ip, r7]
   147b0:	cmp	r5, #126	; 0x7e
   147b4:	bhi	14b6c <__assert_fail@plt+0x3acc>
   147b8:	add	r3, pc, #16
   147bc:	mov	r4, #1
   147c0:	mov	r2, #110	; 0x6e
   147c4:	mov	r0, #97	; 0x61
   147c8:	mov	r1, #0
   147cc:	ldr	pc, [r3, r5, lsl #2]
   147d0:	andeq	r4, r1, r8, ror #20
   147d4:	andeq	r4, r1, ip, ror #22
   147d8:	andeq	r4, r1, ip, ror #22
   147dc:	andeq	r4, r1, ip, ror #22
   147e0:	andeq	r4, r1, ip, ror #22
   147e4:	andeq	r4, r1, ip, ror #22
   147e8:	andeq	r4, r1, ip, ror #22
   147ec:	andeq	r4, r1, r0, lsr #24
   147f0:	andeq	r4, r1, r8, asr #20
   147f4:	andeq	r4, r1, r0, asr #20
   147f8:	andeq	r4, r1, r4, asr sl
   147fc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14800:	andeq	r4, r1, r8, lsr sl
   14804:	andeq	r4, r1, r0, asr sl
   14808:	andeq	r4, r1, ip, ror #22
   1480c:	andeq	r4, r1, ip, ror #22
   14810:	andeq	r4, r1, ip, ror #22
   14814:	andeq	r4, r1, ip, ror #22
   14818:	andeq	r4, r1, ip, ror #22
   1481c:	andeq	r4, r1, ip, ror #22
   14820:	andeq	r4, r1, ip, ror #22
   14824:	andeq	r4, r1, ip, ror #22
   14828:	andeq	r4, r1, ip, ror #22
   1482c:	andeq	r4, r1, ip, ror #22
   14830:	andeq	r4, r1, ip, ror #22
   14834:	andeq	r4, r1, ip, ror #22
   14838:	andeq	r4, r1, ip, ror #22
   1483c:	andeq	r4, r1, ip, ror #22
   14840:	andeq	r4, r1, ip, ror #22
   14844:	andeq	r4, r1, ip, ror #22
   14848:	andeq	r4, r1, ip, ror #22
   1484c:	andeq	r4, r1, ip, ror #22
   14850:	ldrdeq	r4, [r1], -r8
   14854:	ldrdeq	r4, [r1], -ip
   14858:	ldrdeq	r4, [r1], -ip
   1485c:	andeq	r4, r1, r0, ror #19
   14860:	ldrdeq	r4, [r1], -ip
   14864:	andeq	r4, r1, ip, asr #19
   14868:	ldrdeq	r4, [r1], -ip
   1486c:	ldrdeq	r4, [r1], -ip
   14870:	ldrdeq	r4, [r1], -ip
   14874:	ldrdeq	r4, [r1], -ip
   14878:	ldrdeq	r4, [r1], -ip
   1487c:	andeq	r4, r1, ip, asr #19
   14880:	andeq	r4, r1, ip, asr #19
   14884:	andeq	r4, r1, ip, asr #19
   14888:	andeq	r4, r1, ip, asr #19
   1488c:	andeq	r4, r1, ip, asr #19
   14890:	andeq	r4, r1, ip, asr #19
   14894:	andeq	r4, r1, ip, asr #19
   14898:	andeq	r4, r1, ip, asr #19
   1489c:	andeq	r4, r1, ip, asr #19
   148a0:	andeq	r4, r1, ip, asr #19
   148a4:	andeq	r4, r1, ip, asr #19
   148a8:	andeq	r4, r1, ip, asr #19
   148ac:	andeq	r4, r1, ip, asr #19
   148b0:	andeq	r4, r1, ip, asr #19
   148b4:	andeq	r4, r1, ip, asr #19
   148b8:	andeq	r4, r1, ip, asr #19
   148bc:	ldrdeq	r4, [r1], -ip
   148c0:	ldrdeq	r4, [r1], -ip
   148c4:	ldrdeq	r4, [r1], -ip
   148c8:	ldrdeq	r4, [r1], -ip
   148cc:	andeq	r4, r1, r8, lsr #21
   148d0:	andeq	r4, r1, ip, ror #22
   148d4:	andeq	r4, r1, ip, asr #19
   148d8:	andeq	r4, r1, ip, asr #19
   148dc:	andeq	r4, r1, ip, asr #19
   148e0:	andeq	r4, r1, ip, asr #19
   148e4:	andeq	r4, r1, ip, asr #19
   148e8:	andeq	r4, r1, ip, asr #19
   148ec:	andeq	r4, r1, ip, asr #19
   148f0:	andeq	r4, r1, ip, asr #19
   148f4:	andeq	r4, r1, ip, asr #19
   148f8:	andeq	r4, r1, ip, asr #19
   148fc:	andeq	r4, r1, ip, asr #19
   14900:	andeq	r4, r1, ip, asr #19
   14904:	andeq	r4, r1, ip, asr #19
   14908:	andeq	r4, r1, ip, asr #19
   1490c:	andeq	r4, r1, ip, asr #19
   14910:	andeq	r4, r1, ip, asr #19
   14914:	andeq	r4, r1, ip, asr #19
   14918:	andeq	r4, r1, ip, asr #19
   1491c:	andeq	r4, r1, ip, asr #19
   14920:	andeq	r4, r1, ip, asr #19
   14924:	andeq	r4, r1, ip, asr #19
   14928:	andeq	r4, r1, ip, asr #19
   1492c:	andeq	r4, r1, ip, asr #19
   14930:	andeq	r4, r1, ip, asr #19
   14934:	andeq	r4, r1, ip, asr #19
   14938:	andeq	r4, r1, ip, asr #19
   1493c:	ldrdeq	r4, [r1], -ip
   14940:	andeq	r4, r1, r4, lsl sl
   14944:	andeq	r4, r1, ip, asr #19
   14948:	ldrdeq	r4, [r1], -ip
   1494c:	andeq	r4, r1, ip, asr #19
   14950:	ldrdeq	r4, [r1], -ip
   14954:	andeq	r4, r1, ip, asr #19
   14958:	andeq	r4, r1, ip, asr #19
   1495c:	andeq	r4, r1, ip, asr #19
   14960:	andeq	r4, r1, ip, asr #19
   14964:	andeq	r4, r1, ip, asr #19
   14968:	andeq	r4, r1, ip, asr #19
   1496c:	andeq	r4, r1, ip, asr #19
   14970:	andeq	r4, r1, ip, asr #19
   14974:	andeq	r4, r1, ip, asr #19
   14978:	andeq	r4, r1, ip, asr #19
   1497c:	andeq	r4, r1, ip, asr #19
   14980:	andeq	r4, r1, ip, asr #19
   14984:	andeq	r4, r1, ip, asr #19
   14988:	andeq	r4, r1, ip, asr #19
   1498c:	andeq	r4, r1, ip, asr #19
   14990:	andeq	r4, r1, ip, asr #19
   14994:	andeq	r4, r1, ip, asr #19
   14998:	andeq	r4, r1, ip, asr #19
   1499c:	andeq	r4, r1, ip, asr #19
   149a0:	andeq	r4, r1, ip, asr #19
   149a4:	andeq	r4, r1, ip, asr #19
   149a8:	andeq	r4, r1, ip, asr #19
   149ac:	andeq	r4, r1, ip, asr #19
   149b0:	andeq	r4, r1, ip, asr #19
   149b4:	andeq	r4, r1, ip, asr #19
   149b8:	andeq	r4, r1, ip, asr #19
   149bc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   149c0:	ldrdeq	r4, [r1], -ip
   149c4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   149c8:	andeq	r4, r1, r0, ror #19
   149cc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   149d0:	cmp	r0, #0
   149d4:	beq	14c34 <__assert_fail@plt+0x3b94>
   149d8:	ldr	r0, [fp, #16]
   149dc:	b	14c38 <__assert_fail@plt+0x3b98>
   149e0:	mov	r4, #0
   149e4:	cmp	r7, #0
   149e8:	beq	14bd8 <__assert_fail@plt+0x3b38>
   149ec:	mov	r9, #0
   149f0:	b	149cc <__assert_fail@plt+0x392c>
   149f4:	mov	r4, #0
   149f8:	cmn	lr, #1
   149fc:	beq	14bbc <__assert_fail@plt+0x3b1c>
   14a00:	cmp	r7, #0
   14a04:	bne	149ec <__assert_fail@plt+0x394c>
   14a08:	cmp	lr, #1
   14a0c:	beq	14bd8 <__assert_fail@plt+0x3b38>
   14a10:	b	149ec <__assert_fail@plt+0x394c>
   14a14:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14a18:	cmp	r0, #2
   14a1c:	bne	14bfc <__assert_fail@plt+0x3b5c>
   14a20:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14a24:	tst	r0, #1
   14a28:	bne	152f8 <__assert_fail@plt+0x4258>
   14a2c:	mov	r9, #0
   14a30:	mov	r0, #92	; 0x5c
   14a34:	b	14c10 <__assert_fail@plt+0x3b70>
   14a38:	mov	r0, #102	; 0x66
   14a3c:	b	14c20 <__assert_fail@plt+0x3b80>
   14a40:	mov	r2, #116	; 0x74
   14a44:	b	14a54 <__assert_fail@plt+0x39b4>
   14a48:	mov	r0, #98	; 0x62
   14a4c:	b	14c20 <__assert_fail@plt+0x3b80>
   14a50:	mov	r2, #114	; 0x72
   14a54:	ldr	r0, [sp, #68]	; 0x44
   14a58:	tst	r0, #1
   14a5c:	mov	r0, r2
   14a60:	bne	14c20 <__assert_fail@plt+0x3b80>
   14a64:	b	152f8 <__assert_fail@plt+0x4258>
   14a68:	ldr	r0, [sp, #84]	; 0x54
   14a6c:	tst	r0, #1
   14a70:	beq	14d10 <__assert_fail@plt+0x3c70>
   14a74:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14a78:	tst	r0, #1
   14a7c:	bne	15408 <__assert_fail@plt+0x4368>
   14a80:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14a84:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14a88:	cmp	r0, #2
   14a8c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14a90:	movwne	r0, #1
   14a94:	orr	r0, r0, r2
   14a98:	tst	r0, #1
   14a9c:	beq	150e0 <__assert_fail@plt+0x4040>
   14aa0:	mov	r0, r8
   14aa4:	b	15114 <__assert_fail@plt+0x4074>
   14aa8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14aac:	mov	r9, #0
   14ab0:	mov	r5, #63	; 0x3f
   14ab4:	cmp	r0, #5
   14ab8:	beq	14ec4 <__assert_fail@plt+0x3e24>
   14abc:	cmp	r0, #2
   14ac0:	bne	14f68 <__assert_fail@plt+0x3ec8>
   14ac4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14ac8:	tst	r0, #1
   14acc:	beq	14f6c <__assert_fail@plt+0x3ecc>
   14ad0:	b	152f8 <__assert_fail@plt+0x4258>
   14ad4:	mov	r0, #118	; 0x76
   14ad8:	b	14c20 <__assert_fail@plt+0x3b80>
   14adc:	mov	r0, #1
   14ae0:	mov	r5, #39	; 0x27
   14ae4:	str	r0, [sp, #60]	; 0x3c
   14ae8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14aec:	cmp	r0, #2
   14af0:	bne	14b64 <__assert_fail@plt+0x3ac4>
   14af4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14af8:	tst	r0, #1
   14afc:	bne	152f8 <__assert_fail@plt+0x4258>
   14b00:	ldr	r2, [sp, #56]	; 0x38
   14b04:	clz	r1, sl
   14b08:	mov	r9, #0
   14b0c:	lsr	r1, r1, #5
   14b10:	cmp	r2, #0
   14b14:	mov	r0, r2
   14b18:	movwne	r0, #1
   14b1c:	orrs	r0, r0, r1
   14b20:	moveq	r2, sl
   14b24:	moveq	sl, r0
   14b28:	cmp	r8, sl
   14b2c:	str	r2, [sp, #56]	; 0x38
   14b30:	movcc	r0, #39	; 0x27
   14b34:	strbcc	r0, [r6, r8]
   14b38:	add	r0, r8, #1
   14b3c:	cmp	r0, sl
   14b40:	movcc	r1, #92	; 0x5c
   14b44:	strbcc	r1, [r6, r0]
   14b48:	add	r0, r8, #2
   14b4c:	add	r8, r8, #3
   14b50:	cmp	r0, sl
   14b54:	movcc	r1, #39	; 0x27
   14b58:	strbcc	r1, [r6, r0]
   14b5c:	mov	r0, #0
   14b60:	str	r0, [fp, #-56]	; 0xffffffc8
   14b64:	mov	r4, #1
   14b68:	b	149cc <__assert_fail@plt+0x392c>
   14b6c:	ldr	r0, [sp, #40]	; 0x28
   14b70:	cmp	r0, #1
   14b74:	bne	14d3c <__assert_fail@plt+0x3c9c>
   14b78:	str	lr, [sp, #28]
   14b7c:	bl	10fb0 <__ctype_b_loc@plt>
   14b80:	ldr	r0, [r0]
   14b84:	ldr	ip, [fp, #-84]	; 0xffffffac
   14b88:	mov	r1, #1
   14b8c:	add	r0, r0, r5, lsl #1
   14b90:	ldrb	r0, [r0, #1]
   14b94:	ubfx	r4, r0, #6, #1
   14b98:	ldr	r0, [sp, #52]	; 0x34
   14b9c:	mov	r2, r1
   14ba0:	cmp	r1, #1
   14ba4:	orr	r0, r4, r0
   14ba8:	bhi	14f74 <__assert_fail@plt+0x3ed4>
   14bac:	tst	r0, #1
   14bb0:	beq	14f74 <__assert_fail@plt+0x3ed4>
   14bb4:	ldr	lr, [sp, #28]
   14bb8:	b	149cc <__assert_fail@plt+0x392c>
   14bbc:	cmp	r7, #0
   14bc0:	ldrbeq	r0, [ip, #1]
   14bc4:	cmpeq	r0, #0
   14bc8:	beq	14bd8 <__assert_fail@plt+0x3b38>
   14bcc:	mvn	lr, #0
   14bd0:	mov	r9, #0
   14bd4:	b	149cc <__assert_fail@plt+0x392c>
   14bd8:	mov	r1, #1
   14bdc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14be0:	cmp	r0, #2
   14be4:	bne	14bf4 <__assert_fail@plt+0x3b54>
   14be8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14bec:	tst	r0, #1
   14bf0:	bne	152f8 <__assert_fail@plt+0x4258>
   14bf4:	mov	r4, r1
   14bf8:	b	149cc <__assert_fail@plt+0x392c>
   14bfc:	ldr	r1, [sp, #48]	; 0x30
   14c00:	mov	r9, #0
   14c04:	mov	r0, #92	; 0x5c
   14c08:	cmp	r1, #0
   14c0c:	beq	14c20 <__assert_fail@plt+0x3b80>
   14c10:	mov	r4, #0
   14c14:	cmp	r9, #0
   14c18:	beq	151ac <__assert_fail@plt+0x410c>
   14c1c:	b	151e8 <__assert_fail@plt+0x4148>
   14c20:	ldr	r1, [sp, #84]	; 0x54
   14c24:	mov	r4, #0
   14c28:	mov	r9, #0
   14c2c:	tst	r1, #1
   14c30:	bne	14c70 <__assert_fail@plt+0x3bd0>
   14c34:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14c38:	cmp	r0, #0
   14c3c:	mov	r0, r5
   14c40:	beq	14c64 <__assert_fail@plt+0x3bc4>
   14c44:	ldr	r1, [fp, #16]
   14c48:	ubfx	r0, r5, #5, #3
   14c4c:	mov	r2, #1
   14c50:	ldr	r0, [r1, r0, lsl #2]
   14c54:	and	r1, r5, #31
   14c58:	tst	r0, r2, lsl r1
   14c5c:	mov	r0, r5
   14c60:	bne	14c70 <__assert_fail@plt+0x3bd0>
   14c64:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14c68:	cmp	r1, #0
   14c6c:	beq	151a4 <__assert_fail@plt+0x4104>
   14c70:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14c74:	tst	r1, #1
   14c78:	bne	152d0 <__assert_fail@plt+0x4230>
   14c7c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14c80:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14c84:	cmp	r1, #2
   14c88:	ldr	r1, [fp, #-80]	; 0xffffffb0
   14c8c:	movwne	r1, #1
   14c90:	orr	r1, r1, r2
   14c94:	tst	r1, #1
   14c98:	beq	14ca4 <__assert_fail@plt+0x3c04>
   14c9c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14ca0:	b	14ce0 <__assert_fail@plt+0x3c40>
   14ca4:	cmp	r8, sl
   14ca8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14cac:	movcc	r1, #39	; 0x27
   14cb0:	strbcc	r1, [r6, r8]
   14cb4:	add	r1, r8, #1
   14cb8:	cmp	r1, sl
   14cbc:	movcc	r2, #36	; 0x24
   14cc0:	strbcc	r2, [r6, r1]
   14cc4:	add	r1, r8, #2
   14cc8:	add	r8, r8, #3
   14ccc:	cmp	r1, sl
   14cd0:	movcc	r2, #39	; 0x27
   14cd4:	strbcc	r2, [r6, r1]
   14cd8:	mov	r1, #1
   14cdc:	str	r1, [fp, #-56]	; 0xffffffc8
   14ce0:	cmp	r8, sl
   14ce4:	movcc	r1, #92	; 0x5c
   14ce8:	strbcc	r1, [r6, r8]
   14cec:	add	r8, r8, #1
   14cf0:	cmp	r8, sl
   14cf4:	and	r5, r5, r4
   14cf8:	add	r7, r7, #1
   14cfc:	strbcc	r0, [r6, r8]
   14d00:	add	r8, r8, #1
   14d04:	cmn	lr, #1
   14d08:	bne	14704 <__assert_fail@plt+0x3664>
   14d0c:	b	14710 <__assert_fail@plt+0x3670>
   14d10:	ldr	r0, [sp, #36]	; 0x24
   14d14:	mov	r4, #0
   14d18:	mov	r9, #0
   14d1c:	mov	r5, #0
   14d20:	cmp	r0, #0
   14d24:	beq	14c34 <__assert_fail@plt+0x3b94>
   14d28:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14d2c:	add	r7, r7, #1
   14d30:	cmn	lr, #1
   14d34:	bne	14704 <__assert_fail@plt+0x3664>
   14d38:	b	14710 <__assert_fail@plt+0x3670>
   14d3c:	mov	r0, #0
   14d40:	cmn	lr, #1
   14d44:	str	r0, [fp, #-36]	; 0xffffffdc
   14d48:	str	r0, [fp, #-40]	; 0xffffffd8
   14d4c:	bne	14d60 <__assert_fail@plt+0x3cc0>
   14d50:	mov	r0, ip
   14d54:	bl	10fc8 <strlen@plt>
   14d58:	ldr	ip, [fp, #-84]	; 0xffffffac
   14d5c:	mov	lr, r0
   14d60:	add	r0, ip, r7
   14d64:	mov	r4, #1
   14d68:	mov	r6, #0
   14d6c:	str	lr, [sp, #28]
   14d70:	str	r0, [sp, #24]
   14d74:	sub	r0, fp, #40	; 0x28
   14d78:	mov	r3, r0
   14d7c:	str	r6, [sp, #44]	; 0x2c
   14d80:	add	r6, r6, r7
   14d84:	sub	r0, fp, #44	; 0x2c
   14d88:	add	r1, ip, r6
   14d8c:	sub	r2, lr, r6
   14d90:	bl	17bd8 <__assert_fail@plt+0x6b38>
   14d94:	cmp	r0, #0
   14d98:	beq	15230 <__assert_fail@plt+0x4190>
   14d9c:	cmn	r0, #1
   14da0:	beq	151f0 <__assert_fail@plt+0x4150>
   14da4:	ldr	lr, [sp, #28]
   14da8:	cmn	r0, #2
   14dac:	beq	151f8 <__assert_fail@plt+0x4158>
   14db0:	ldr	r2, [sp, #64]	; 0x40
   14db4:	cmp	r0, #2
   14db8:	mov	r1, #0
   14dbc:	movwcc	r1, #1
   14dc0:	eor	r2, r2, #1
   14dc4:	orrs	r1, r2, r1
   14dc8:	bne	14e88 <__assert_fail@plt+0x3de8>
   14dcc:	ldr	r1, [sp, #44]	; 0x2c
   14dd0:	ldr	r2, [sp, #24]
   14dd4:	add	r1, r2, r1
   14dd8:	mov	r2, #1
   14ddc:	ldrb	r3, [r1, r2]
   14de0:	sub	r3, r3, #91	; 0x5b
   14de4:	cmp	r3, #33	; 0x21
   14de8:	bhi	14e7c <__assert_fail@plt+0x3ddc>
   14dec:	add	r6, pc, #0
   14df0:	ldr	pc, [r6, r3, lsl #2]
   14df4:	strdeq	r5, [r1], -r0
   14df8:	strdeq	r5, [r1], -r0
   14dfc:	andeq	r4, r1, ip, ror lr
   14e00:	strdeq	r5, [r1], -r0
   14e04:	andeq	r4, r1, ip, ror lr
   14e08:	strdeq	r5, [r1], -r0
   14e0c:	andeq	r4, r1, ip, ror lr
   14e10:	andeq	r4, r1, ip, ror lr
   14e14:	andeq	r4, r1, ip, ror lr
   14e18:	andeq	r4, r1, ip, ror lr
   14e1c:	andeq	r4, r1, ip, ror lr
   14e20:	andeq	r4, r1, ip, ror lr
   14e24:	andeq	r4, r1, ip, ror lr
   14e28:	andeq	r4, r1, ip, ror lr
   14e2c:	andeq	r4, r1, ip, ror lr
   14e30:	andeq	r4, r1, ip, ror lr
   14e34:	andeq	r4, r1, ip, ror lr
   14e38:	andeq	r4, r1, ip, ror lr
   14e3c:	andeq	r4, r1, ip, ror lr
   14e40:	andeq	r4, r1, ip, ror lr
   14e44:	andeq	r4, r1, ip, ror lr
   14e48:	andeq	r4, r1, ip, ror lr
   14e4c:	andeq	r4, r1, ip, ror lr
   14e50:	andeq	r4, r1, ip, ror lr
   14e54:	andeq	r4, r1, ip, ror lr
   14e58:	andeq	r4, r1, ip, ror lr
   14e5c:	andeq	r4, r1, ip, ror lr
   14e60:	andeq	r4, r1, ip, ror lr
   14e64:	andeq	r4, r1, ip, ror lr
   14e68:	andeq	r4, r1, ip, ror lr
   14e6c:	andeq	r4, r1, ip, ror lr
   14e70:	andeq	r4, r1, ip, ror lr
   14e74:	andeq	r4, r1, ip, ror lr
   14e78:	strdeq	r5, [r1], -r0
   14e7c:	add	r2, r2, #1
   14e80:	cmp	r2, r0
   14e84:	bcc	14ddc <__assert_fail@plt+0x3d3c>
   14e88:	ldr	r6, [sp, #44]	; 0x2c
   14e8c:	add	r6, r0, r6
   14e90:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14e94:	bl	10f08 <iswprint@plt>
   14e98:	cmp	r0, #0
   14e9c:	movwne	r0, #1
   14ea0:	and	r4, r4, r0
   14ea4:	sub	r0, fp, #40	; 0x28
   14ea8:	bl	10eb4 <mbsinit@plt>
   14eac:	ldr	lr, [sp, #28]
   14eb0:	ldr	ip, [fp, #-84]	; 0xffffffac
   14eb4:	sub	r3, fp, #40	; 0x28
   14eb8:	cmp	r0, #0
   14ebc:	beq	14d7c <__assert_fail@plt+0x3cdc>
   14ec0:	b	15238 <__assert_fail@plt+0x4198>
   14ec4:	ldr	r0, [sp, #32]
   14ec8:	cmp	r0, #0
   14ecc:	beq	14f68 <__assert_fail@plt+0x3ec8>
   14ed0:	add	r0, r7, #2
   14ed4:	cmp	r0, lr
   14ed8:	bcs	14f68 <__assert_fail@plt+0x3ec8>
   14edc:	add	r1, ip, r7
   14ee0:	ldrb	r1, [r1, #1]
   14ee4:	cmp	r1, #63	; 0x3f
   14ee8:	bne	14f68 <__assert_fail@plt+0x3ec8>
   14eec:	ldrb	r5, [ip, r0]
   14ef0:	sub	r1, r5, #33	; 0x21
   14ef4:	cmp	r1, #29
   14ef8:	bhi	14f68 <__assert_fail@plt+0x3ec8>
   14efc:	movw	r3, #20929	; 0x51c1
   14f00:	mov	r2, #1
   14f04:	movt	r3, #14336	; 0x3800
   14f08:	tst	r3, r2, lsl r1
   14f0c:	beq	14f68 <__assert_fail@plt+0x3ec8>
   14f10:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14f14:	tst	r1, #1
   14f18:	bne	15410 <__assert_fail@plt+0x4370>
   14f1c:	cmp	r8, sl
   14f20:	mov	r7, r0
   14f24:	mov	r4, #0
   14f28:	movcc	r1, #63	; 0x3f
   14f2c:	strbcc	r1, [r6, r8]
   14f30:	add	r1, r8, #1
   14f34:	cmp	r1, sl
   14f38:	movcc	r2, #34	; 0x22
   14f3c:	strbcc	r2, [r6, r1]
   14f40:	add	r1, r8, #2
   14f44:	cmp	r1, sl
   14f48:	movcc	r2, #34	; 0x22
   14f4c:	strbcc	r2, [r6, r1]
   14f50:	add	r1, r8, #3
   14f54:	add	r8, r8, #4
   14f58:	cmp	r1, sl
   14f5c:	movcc	r2, #63	; 0x3f
   14f60:	strbcc	r2, [r6, r1]
   14f64:	b	149cc <__assert_fail@plt+0x392c>
   14f68:	mov	r5, #63	; 0x3f
   14f6c:	mov	r4, #0
   14f70:	b	149cc <__assert_fail@plt+0x392c>
   14f74:	add	r1, r2, r7
   14f78:	ldr	lr, [sp, #28]
   14f7c:	mov	r3, #0
   14f80:	str	r1, [sp, #44]	; 0x2c
   14f84:	add	r1, r7, #1
   14f88:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14f8c:	tst	r0, #1
   14f90:	bne	15064 <__assert_fail@plt+0x3fc4>
   14f94:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14f98:	tst	r2, #1
   14f9c:	bne	15358 <__assert_fail@plt+0x42b8>
   14fa0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14fa4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14fa8:	cmp	r7, #2
   14fac:	movwne	r3, #1
   14fb0:	orr	r3, r3, r2
   14fb4:	tst	r3, #1
   14fb8:	bne	14ff4 <__assert_fail@plt+0x3f54>
   14fbc:	cmp	r8, sl
   14fc0:	add	r3, r8, #1
   14fc4:	movcc	r2, #39	; 0x27
   14fc8:	strbcc	r2, [r6, r8]
   14fcc:	cmp	r3, sl
   14fd0:	movcc	r2, #36	; 0x24
   14fd4:	strbcc	r2, [r6, r3]
   14fd8:	add	r3, r8, #2
   14fdc:	add	r8, r8, #3
   14fe0:	cmp	r3, sl
   14fe4:	movcc	r2, #39	; 0x27
   14fe8:	strbcc	r2, [r6, r3]
   14fec:	mov	r2, #1
   14ff0:	str	r2, [fp, #-56]	; 0xffffffc8
   14ff4:	cmp	r8, sl
   14ff8:	movcc	r3, #92	; 0x5c
   14ffc:	strbcc	r3, [r6, r8]
   15000:	add	r3, r8, #1
   15004:	cmp	r3, sl
   15008:	andcc	r7, r5, #192	; 0xc0
   1500c:	movcc	r2, #48	; 0x30
   15010:	orrcc	r7, r2, r7, lsr #6
   15014:	strbcc	r7, [r6, r3]
   15018:	add	r3, r8, #2
   1501c:	add	r8, r8, #3
   15020:	cmp	r3, sl
   15024:	lsrcc	r7, r5, #3
   15028:	movcc	r2, #6
   1502c:	bficc	r7, r2, #3, #29
   15030:	mov	r2, #6
   15034:	strbcc	r7, [r6, r3]
   15038:	bfi	r5, r2, #3, #29
   1503c:	mov	r3, #1
   15040:	b	15088 <__assert_fail@plt+0x3fe8>
   15044:	cmp	r8, sl
   15048:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1504c:	strbcc	r5, [r6, r8]
   15050:	add	r8, r8, #1
   15054:	ldrb	r5, [ip, r1]
   15058:	add	r1, r1, #1
   1505c:	tst	r0, #1
   15060:	beq	14f94 <__assert_fail@plt+0x3ef4>
   15064:	ldr	r2, [fp, #-52]	; 0xffffffcc
   15068:	tst	r2, #1
   1506c:	beq	15080 <__assert_fail@plt+0x3fe0>
   15070:	cmp	r8, sl
   15074:	movcc	r7, #92	; 0x5c
   15078:	strbcc	r7, [r6, r8]
   1507c:	add	r8, r8, #1
   15080:	mov	r2, #0
   15084:	str	r2, [fp, #-52]	; 0xffffffcc
   15088:	ldr	r2, [sp, #44]	; 0x2c
   1508c:	and	r9, r3, #1
   15090:	cmp	r2, r1
   15094:	bls	15194 <__assert_fail@plt+0x40f4>
   15098:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1509c:	cmp	r9, #0
   150a0:	movwne	r9, #1
   150a4:	mvn	r7, r2
   150a8:	orr	r7, r7, r9
   150ac:	tst	r7, #1
   150b0:	bne	15044 <__assert_fail@plt+0x3fa4>
   150b4:	cmp	r8, sl
   150b8:	movcc	r7, #39	; 0x27
   150bc:	strbcc	r7, [r6, r8]
   150c0:	add	r7, r8, #1
   150c4:	add	r8, r8, #2
   150c8:	cmp	r7, sl
   150cc:	movcc	r2, #39	; 0x27
   150d0:	strbcc	r2, [r6, r7]
   150d4:	mov	r2, #0
   150d8:	str	r2, [fp, #-56]	; 0xffffffc8
   150dc:	b	15044 <__assert_fail@plt+0x3fa4>
   150e0:	cmp	r8, sl
   150e4:	mov	r2, #1
   150e8:	movcc	r0, #39	; 0x27
   150ec:	strbcc	r0, [r6, r8]
   150f0:	add	r0, r8, #1
   150f4:	cmp	r0, sl
   150f8:	movcc	r1, #36	; 0x24
   150fc:	strbcc	r1, [r6, r0]
   15100:	add	r0, r8, #2
   15104:	cmp	r0, sl
   15108:	movcc	r1, #39	; 0x27
   1510c:	strbcc	r1, [r6, r0]
   15110:	add	r0, r8, #3
   15114:	cmp	r0, sl
   15118:	add	r8, r0, #1
   1511c:	str	r2, [fp, #-56]	; 0xffffffc8
   15120:	movcc	r1, #92	; 0x5c
   15124:	strbcc	r1, [r6, r0]
   15128:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1512c:	cmp	r1, #2
   15130:	beq	15184 <__assert_fail@plt+0x40e4>
   15134:	add	r1, r7, #1
   15138:	mov	r4, #0
   1513c:	mov	r9, #1
   15140:	mov	r5, #48	; 0x30
   15144:	cmp	r1, lr
   15148:	bcs	149cc <__assert_fail@plt+0x392c>
   1514c:	ldrb	r1, [ip, r1]
   15150:	sub	r1, r1, #48	; 0x30
   15154:	uxtb	r1, r1
   15158:	cmp	r1, #9
   1515c:	bhi	149cc <__assert_fail@plt+0x392c>
   15160:	cmp	r8, sl
   15164:	movcc	r1, #48	; 0x30
   15168:	strbcc	r1, [r6, r8]
   1516c:	add	r1, r0, #2
   15170:	add	r8, r0, #3
   15174:	cmp	r1, sl
   15178:	movcc	r2, #48	; 0x30
   1517c:	strbcc	r2, [r6, r1]
   15180:	b	149cc <__assert_fail@plt+0x392c>
   15184:	mov	r0, #48	; 0x30
   15188:	mov	r9, #1
   1518c:	mov	r4, #0
   15190:	b	14c64 <__assert_fail@plt+0x3bc4>
   15194:	cmp	r9, #0
   15198:	sub	r7, r1, #1
   1519c:	mov	r0, r5
   151a0:	movwne	r9, #1
   151a4:	cmp	r9, #0
   151a8:	bne	151e8 <__assert_fail@plt+0x4148>
   151ac:	ldr	r1, [fp, #-56]	; 0xffffffc8
   151b0:	tst	r1, #1
   151b4:	beq	151e8 <__assert_fail@plt+0x4148>
   151b8:	cmp	r8, sl
   151bc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   151c0:	movcc	r1, #39	; 0x27
   151c4:	strbcc	r1, [r6, r8]
   151c8:	add	r1, r8, #1
   151cc:	add	r8, r8, #2
   151d0:	cmp	r1, sl
   151d4:	movcc	r2, #39	; 0x27
   151d8:	strbcc	r2, [r6, r1]
   151dc:	mov	r1, #0
   151e0:	str	r1, [fp, #-56]	; 0xffffffc8
   151e4:	b	14cf0 <__assert_fail@plt+0x3c50>
   151e8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   151ec:	b	14cf0 <__assert_fail@plt+0x3c50>
   151f0:	mov	r4, #0
   151f4:	b	15230 <__assert_fail@plt+0x4190>
   151f8:	mov	r4, #0
   151fc:	cmp	lr, r6
   15200:	bls	15230 <__assert_fail@plt+0x4190>
   15204:	ldr	ip, [fp, #-84]	; 0xffffffac
   15208:	ldr	r6, [sp, #44]	; 0x2c
   1520c:	ldr	r0, [sp, #24]
   15210:	ldrb	r0, [r0, r6]
   15214:	cmp	r0, #0
   15218:	beq	15238 <__assert_fail@plt+0x4198>
   1521c:	add	r6, r6, #1
   15220:	add	r0, r7, r6
   15224:	cmp	r0, lr
   15228:	bcc	1520c <__assert_fail@plt+0x416c>
   1522c:	b	15238 <__assert_fail@plt+0x4198>
   15230:	ldr	ip, [fp, #-84]	; 0xffffffac
   15234:	ldr	r6, [sp, #44]	; 0x2c
   15238:	mov	r1, r6
   1523c:	ldr	r6, [sp, #80]	; 0x50
   15240:	b	14b98 <__assert_fail@plt+0x3af8>
   15244:	mov	lr, r7
   15248:	b	15250 <__assert_fail@plt+0x41b0>
   1524c:	mvn	lr, #0
   15250:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15254:	ldr	r1, [fp, #-72]	; 0xffffffb8
   15258:	eor	r0, r7, #2
   1525c:	orr	r0, r0, r8
   15260:	clz	r0, r0
   15264:	lsr	r0, r0, #5
   15268:	tst	r1, r0
   1526c:	bne	152f8 <__assert_fail@plt+0x4258>
   15270:	mov	r0, r1
   15274:	ldr	r1, [fp, #-80]	; 0xffffffb0
   15278:	cmp	r7, #2
   1527c:	movwne	r1, #1
   15280:	orr	r0, r0, r1
   15284:	tst	r0, #1
   15288:	ldreq	r0, [sp, #60]	; 0x3c
   1528c:	eoreq	r0, r0, #1
   15290:	tsteq	r0, #1
   15294:	bne	153a4 <__assert_fail@plt+0x4304>
   15298:	mov	r9, lr
   1529c:	tst	r5, #1
   152a0:	bne	15360 <__assert_fail@plt+0x42c0>
   152a4:	ldr	r6, [sp, #56]	; 0x38
   152a8:	mov	r4, #0
   152ac:	cmp	r6, #0
   152b0:	beq	1539c <__assert_fail@plt+0x42fc>
   152b4:	ldr	r0, [sp, #84]	; 0x54
   152b8:	mov	r1, #0
   152bc:	cmp	sl, #0
   152c0:	mov	r5, #0
   152c4:	str	r1, [fp, #-72]	; 0xffffffb8
   152c8:	beq	14498 <__assert_fail@plt+0x33f8>
   152cc:	b	153a4 <__assert_fail@plt+0x4304>
   152d0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   152d4:	ldr	r2, [sp, #84]	; 0x54
   152d8:	b	15300 <__assert_fail@plt+0x4260>
   152dc:	ldr	ip, [fp, #-84]	; 0xffffffac
   152e0:	mov	r2, #1
   152e4:	mov	lr, r4
   152e8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   152ec:	b	15300 <__assert_fail@plt+0x4260>
   152f0:	ldr	r6, [sp, #80]	; 0x50
   152f4:	ldr	ip, [fp, #-84]	; 0xffffffac
   152f8:	ldr	r2, [sp, #84]	; 0x54
   152fc:	mov	r7, #2
   15300:	mov	r0, #0
   15304:	ldr	r1, [fp, #12]
   15308:	tst	r2, #1
   1530c:	mov	r2, r7
   15310:	mov	r3, lr
   15314:	str	r0, [sp, #8]
   15318:	ldr	r0, [sp, #72]	; 0x48
   1531c:	movwne	r2, #4
   15320:	cmp	r7, #2
   15324:	movne	r2, r7
   15328:	str	r2, [sp]
   1532c:	mov	r2, ip
   15330:	bic	r1, r1, #2
   15334:	str	r0, [sp, #12]
   15338:	ldr	r0, [sp, #76]	; 0x4c
   1533c:	str	r1, [sp, #4]
   15340:	mov	r1, sl
   15344:	str	r0, [sp, #16]
   15348:	mov	r0, r6
   1534c:	bl	14418 <__assert_fail@plt+0x3378>
   15350:	mov	r8, r0
   15354:	b	153fc <__assert_fail@plt+0x435c>
   15358:	ldr	r2, [sp, #84]	; 0x54
   1535c:	b	15300 <__assert_fail@plt+0x4260>
   15360:	mov	r0, #5
   15364:	ldr	r1, [sp, #56]	; 0x38
   15368:	ldr	r2, [fp, #-84]	; 0xffffffac
   1536c:	mov	r3, r9
   15370:	str	r0, [sp]
   15374:	ldr	r0, [fp, #12]
   15378:	str	r0, [sp, #4]
   1537c:	ldr	r0, [fp, #16]
   15380:	str	r0, [sp, #8]
   15384:	ldr	r0, [sp, #72]	; 0x48
   15388:	str	r0, [sp, #12]
   1538c:	ldr	r0, [sp, #76]	; 0x4c
   15390:	str	r0, [sp, #16]
   15394:	ldr	r0, [sp, #80]	; 0x50
   15398:	b	1534c <__assert_fail@plt+0x42ac>
   1539c:	mov	r0, #0
   153a0:	str	r0, [fp, #-72]	; 0xffffffb8
   153a4:	ldr	r1, [sp, #92]	; 0x5c
   153a8:	cmp	r1, #0
   153ac:	beq	153ec <__assert_fail@plt+0x434c>
   153b0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   153b4:	ldr	r2, [sp, #80]	; 0x50
   153b8:	tst	r0, #1
   153bc:	bne	153f0 <__assert_fail@plt+0x4350>
   153c0:	ldrb	r0, [r1]
   153c4:	cmp	r0, #0
   153c8:	beq	153f0 <__assert_fail@plt+0x4350>
   153cc:	add	r1, r1, #1
   153d0:	cmp	r8, sl
   153d4:	strbcc	r0, [r2, r8]
   153d8:	add	r8, r8, #1
   153dc:	ldrb	r0, [r1], #1
   153e0:	cmp	r0, #0
   153e4:	bne	153d0 <__assert_fail@plt+0x4330>
   153e8:	b	153f0 <__assert_fail@plt+0x4350>
   153ec:	ldr	r2, [sp, #80]	; 0x50
   153f0:	cmp	r8, sl
   153f4:	movcc	r0, #0
   153f8:	strbcc	r0, [r2, r8]
   153fc:	mov	r0, r8
   15400:	sub	sp, fp, #28
   15404:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15408:	mov	r2, #1
   1540c:	b	152e8 <__assert_fail@plt+0x4248>
   15410:	ldr	r2, [sp, #84]	; 0x54
   15414:	mov	r7, #5
   15418:	b	15300 <__assert_fail@plt+0x4260>
   1541c:	bl	11088 <abort@plt>
   15420:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15424:	add	fp, sp, #28
   15428:	sub	sp, sp, #28
   1542c:	movw	r5, #50320	; 0xc490
   15430:	cmp	r2, #0
   15434:	mov	r4, r1
   15438:	mov	r7, r0
   1543c:	str	r0, [sp, #20]
   15440:	movt	r5, #2
   15444:	movne	r5, r2
   15448:	bl	10fe0 <__errno_location@plt>
   1544c:	mov	sl, r0
   15450:	ldm	r5, {r0, r1}
   15454:	ldr	r2, [r5, #40]	; 0x28
   15458:	ldr	r3, [r5, #44]	; 0x2c
   1545c:	add	r9, r5, #8
   15460:	ldr	r6, [sl]
   15464:	orr	r8, r1, #1
   15468:	mov	r1, #0
   1546c:	str	r6, [sp, #24]
   15470:	stm	sp, {r0, r8, r9}
   15474:	str	r2, [sp, #12]
   15478:	str	r3, [sp, #16]
   1547c:	mov	r0, #0
   15480:	mov	r2, r7
   15484:	mov	r3, r4
   15488:	mov	r6, r4
   1548c:	bl	14418 <__assert_fail@plt+0x3378>
   15490:	add	r7, r0, #1
   15494:	mov	r0, r7
   15498:	bl	16694 <__assert_fail@plt+0x55f4>
   1549c:	mov	r4, r0
   154a0:	ldr	r0, [r5]
   154a4:	ldr	r2, [r5, #44]	; 0x2c
   154a8:	ldr	r1, [r5, #40]	; 0x28
   154ac:	mov	r3, r6
   154b0:	stm	sp, {r0, r8, r9}
   154b4:	str	r2, [sp, #16]
   154b8:	str	r1, [sp, #12]
   154bc:	mov	r0, r4
   154c0:	mov	r1, r7
   154c4:	ldr	r2, [sp, #20]
   154c8:	bl	14418 <__assert_fail@plt+0x3378>
   154cc:	ldr	r0, [sp, #24]
   154d0:	str	r0, [sl]
   154d4:	mov	r0, r4
   154d8:	sub	sp, fp, #28
   154dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154e4:	add	fp, sp, #28
   154e8:	sub	sp, sp, #36	; 0x24
   154ec:	movw	r8, #50320	; 0xc490
   154f0:	cmp	r3, #0
   154f4:	mov	r4, r2
   154f8:	str	r2, [sp, #24]
   154fc:	mov	r5, r1
   15500:	mov	r6, r0
   15504:	str	r0, [sp, #20]
   15508:	movt	r8, #2
   1550c:	movne	r8, r3
   15510:	bl	10fe0 <__errno_location@plt>
   15514:	str	r0, [sp, #28]
   15518:	cmp	r4, #0
   1551c:	add	sl, r8, #8
   15520:	ldm	r8, {r3, r9}
   15524:	ldr	r7, [r0]
   15528:	ldr	r1, [r8, #40]	; 0x28
   1552c:	ldr	r2, [r8, #44]	; 0x2c
   15530:	mov	r0, #0
   15534:	orreq	r9, r9, #1
   15538:	str	r7, [sp, #32]
   1553c:	mov	r7, r5
   15540:	stm	sp, {r3, r9, sl}
   15544:	str	r1, [sp, #12]
   15548:	str	r2, [sp, #16]
   1554c:	mov	r1, #0
   15550:	mov	r2, r6
   15554:	mov	r3, r5
   15558:	bl	14418 <__assert_fail@plt+0x3378>
   1555c:	add	r4, r0, #1
   15560:	mov	r5, r0
   15564:	mov	r0, r4
   15568:	bl	16694 <__assert_fail@plt+0x55f4>
   1556c:	mov	r6, r0
   15570:	ldr	r0, [r8]
   15574:	ldr	r2, [r8, #44]	; 0x2c
   15578:	ldr	r1, [r8, #40]	; 0x28
   1557c:	mov	r3, r7
   15580:	stm	sp, {r0, r9, sl}
   15584:	str	r2, [sp, #16]
   15588:	str	r1, [sp, #12]
   1558c:	mov	r0, r6
   15590:	mov	r1, r4
   15594:	ldr	r2, [sp, #20]
   15598:	bl	14418 <__assert_fail@plt+0x3378>
   1559c:	ldr	r0, [sp, #24]
   155a0:	ldr	r1, [sp, #32]
   155a4:	ldr	r2, [sp, #28]
   155a8:	cmp	r0, #0
   155ac:	str	r1, [r2]
   155b0:	strne	r5, [r0]
   155b4:	mov	r0, r6
   155b8:	sub	sp, fp, #28
   155bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   155c4:	add	fp, sp, #24
   155c8:	movw	r5, #41212	; 0xa0fc
   155cc:	movw	r8, #41208	; 0xa0f8
   155d0:	movt	r5, #2
   155d4:	movt	r8, #2
   155d8:	ldr	r0, [r5]
   155dc:	ldr	r4, [r8]
   155e0:	cmp	r0, #2
   155e4:	blt	15610 <__assert_fail@plt+0x4570>
   155e8:	add	r7, r4, #12
   155ec:	mov	r6, #0
   155f0:	ldr	r0, [r7, r6, lsl #3]
   155f4:	bl	141b4 <__assert_fail@plt+0x3114>
   155f8:	ldr	r1, [r5]
   155fc:	add	r2, r6, #2
   15600:	add	r0, r6, #1
   15604:	mov	r6, r0
   15608:	cmp	r2, r1
   1560c:	blt	155f0 <__assert_fail@plt+0x4550>
   15610:	ldr	r0, [r4, #4]
   15614:	movw	r7, #50368	; 0xc4c0
   15618:	movt	r7, #2
   1561c:	cmp	r0, r7
   15620:	beq	15638 <__assert_fail@plt+0x4598>
   15624:	bl	141b4 <__assert_fail@plt+0x3114>
   15628:	movw	r0, #41216	; 0xa100
   1562c:	mov	r6, #256	; 0x100
   15630:	movt	r0, #2
   15634:	strd	r6, [r0]
   15638:	movw	r6, #41216	; 0xa100
   1563c:	movt	r6, #2
   15640:	cmp	r4, r6
   15644:	beq	15654 <__assert_fail@plt+0x45b4>
   15648:	mov	r0, r4
   1564c:	bl	141b4 <__assert_fail@plt+0x3114>
   15650:	str	r6, [r8]
   15654:	mov	r0, #1
   15658:	str	r0, [r5]
   1565c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15660:	movw	r3, #50320	; 0xc490
   15664:	mvn	r2, #0
   15668:	movt	r3, #2
   1566c:	b	15670 <__assert_fail@plt+0x45d0>
   15670:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15674:	add	fp, sp, #28
   15678:	sub	sp, sp, #44	; 0x2c
   1567c:	mov	r7, r3
   15680:	str	r2, [sp, #36]	; 0x24
   15684:	str	r1, [sp, #32]
   15688:	mov	r5, r0
   1568c:	bl	10fe0 <__errno_location@plt>
   15690:	cmp	r5, #0
   15694:	blt	15800 <__assert_fail@plt+0x4760>
   15698:	cmn	r5, #-2147483647	; 0x80000001
   1569c:	beq	15800 <__assert_fail@plt+0x4760>
   156a0:	movw	r8, #41212	; 0xa0fc
   156a4:	movw	r4, #41208	; 0xa0f8
   156a8:	str	r0, [sp, #28]
   156ac:	ldr	r0, [r0]
   156b0:	movt	r8, #2
   156b4:	movt	r4, #2
   156b8:	ldr	r1, [r8]
   156bc:	ldr	r6, [r4]
   156c0:	str	r0, [sp, #24]
   156c4:	cmp	r1, r5
   156c8:	ble	156d4 <__assert_fail@plt+0x4634>
   156cc:	mov	sl, r6
   156d0:	b	1573c <__assert_fail@plt+0x469c>
   156d4:	movw	r9, #41216	; 0xa100
   156d8:	mov	r0, #8
   156dc:	add	r2, r5, #1
   156e0:	str	r1, [fp, #-32]	; 0xffffffe0
   156e4:	mvn	r3, #-2147483648	; 0x80000000
   156e8:	movt	r9, #2
   156ec:	str	r0, [sp]
   156f0:	sub	r2, r2, r1
   156f4:	sub	r1, fp, #32
   156f8:	subs	r0, r6, r9
   156fc:	movne	r0, r6
   15700:	bl	16894 <__assert_fail@plt+0x57f4>
   15704:	cmp	r6, r9
   15708:	mov	sl, r0
   1570c:	str	r0, [r4]
   15710:	ldrdeq	r0, [r9]
   15714:	stmeq	sl, {r0, r1}
   15718:	ldr	r1, [r8]
   1571c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15720:	add	r0, sl, r1, lsl #3
   15724:	sub	r1, r2, r1
   15728:	lsl	r2, r1, #3
   1572c:	mov	r1, #0
   15730:	bl	11004 <memset@plt>
   15734:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15738:	str	r0, [r8]
   1573c:	mov	r9, sl
   15740:	ldr	r6, [r9, r5, lsl #3]!
   15744:	ldr	r4, [r9, #4]!
   15748:	ldm	r7, {r0, r1}
   1574c:	ldr	r2, [r7, #40]	; 0x28
   15750:	ldr	r3, [r7, #44]	; 0x2c
   15754:	orr	r8, r1, #1
   15758:	add	r1, r7, #8
   1575c:	stm	sp, {r0, r8}
   15760:	add	r0, sp, #8
   15764:	str	r1, [sp, #20]
   15768:	stm	r0, {r1, r2, r3}
   1576c:	mov	r0, r4
   15770:	mov	r1, r6
   15774:	ldr	r2, [sp, #32]
   15778:	ldr	r3, [sp, #36]	; 0x24
   1577c:	bl	14418 <__assert_fail@plt+0x3378>
   15780:	cmp	r6, r0
   15784:	bhi	157e8 <__assert_fail@plt+0x4748>
   15788:	add	r6, r0, #1
   1578c:	movw	r0, #50368	; 0xc4c0
   15790:	movt	r0, #2
   15794:	str	r6, [sl, r5, lsl #3]
   15798:	cmp	r4, r0
   1579c:	beq	157a8 <__assert_fail@plt+0x4708>
   157a0:	mov	r0, r4
   157a4:	bl	141b4 <__assert_fail@plt+0x3114>
   157a8:	mov	r0, r6
   157ac:	bl	16694 <__assert_fail@plt+0x55f4>
   157b0:	str	r0, [r9]
   157b4:	mov	r4, r0
   157b8:	add	r3, sp, #8
   157bc:	ldr	r0, [r7]
   157c0:	ldr	r1, [r7, #40]	; 0x28
   157c4:	ldr	r2, [r7, #44]	; 0x2c
   157c8:	stm	sp, {r0, r8}
   157cc:	ldr	r0, [sp, #20]
   157d0:	stm	r3, {r0, r1, r2}
   157d4:	mov	r0, r4
   157d8:	mov	r1, r6
   157dc:	ldr	r2, [sp, #32]
   157e0:	ldr	r3, [sp, #36]	; 0x24
   157e4:	bl	14418 <__assert_fail@plt+0x3378>
   157e8:	ldr	r0, [sp, #28]
   157ec:	ldr	r1, [sp, #24]
   157f0:	str	r1, [r0]
   157f4:	mov	r0, r4
   157f8:	sub	sp, fp, #28
   157fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15800:	bl	11088 <abort@plt>
   15804:	movw	r3, #50320	; 0xc490
   15808:	movt	r3, #2
   1580c:	b	15670 <__assert_fail@plt+0x45d0>
   15810:	movw	r3, #50320	; 0xc490
   15814:	mov	r1, r0
   15818:	mov	r0, #0
   1581c:	mvn	r2, #0
   15820:	movt	r3, #2
   15824:	b	15670 <__assert_fail@plt+0x45d0>
   15828:	movw	r3, #50320	; 0xc490
   1582c:	mov	r2, r1
   15830:	mov	r1, r0
   15834:	mov	r0, #0
   15838:	movt	r3, #2
   1583c:	b	15670 <__assert_fail@plt+0x45d0>
   15840:	push	{fp, lr}
   15844:	mov	fp, sp
   15848:	sub	sp, sp, #48	; 0x30
   1584c:	vmov.i32	q8, #0	; 0x00000000
   15850:	mov	ip, #32
   15854:	mov	r3, sp
   15858:	mov	lr, r2
   1585c:	cmp	r1, #10
   15860:	add	r2, r3, #16
   15864:	vst1.64	{d16-d17}, [r3], ip
   15868:	vst1.64	{d16-d17}, [r3]
   1586c:	vst1.64	{d16-d17}, [r2]
   15870:	beq	15890 <__assert_fail@plt+0x47f0>
   15874:	str	r1, [sp]
   15878:	mov	r3, sp
   1587c:	mov	r1, lr
   15880:	mvn	r2, #0
   15884:	bl	15670 <__assert_fail@plt+0x45d0>
   15888:	mov	sp, fp
   1588c:	pop	{fp, pc}
   15890:	bl	11088 <abort@plt>
   15894:	push	{r4, sl, fp, lr}
   15898:	add	fp, sp, #8
   1589c:	sub	sp, sp, #48	; 0x30
   158a0:	mov	ip, r3
   158a4:	mov	r3, sp
   158a8:	vmov.i32	q8, #0	; 0x00000000
   158ac:	mov	lr, #32
   158b0:	cmp	r1, #10
   158b4:	add	r4, r3, #16
   158b8:	vst1.64	{d16-d17}, [r3], lr
   158bc:	vst1.64	{d16-d17}, [r3]
   158c0:	vst1.64	{d16-d17}, [r4]
   158c4:	beq	158e4 <__assert_fail@plt+0x4844>
   158c8:	str	r1, [sp]
   158cc:	mov	r1, r2
   158d0:	mov	r3, sp
   158d4:	mov	r2, ip
   158d8:	bl	15670 <__assert_fail@plt+0x45d0>
   158dc:	sub	sp, fp, #8
   158e0:	pop	{r4, sl, fp, pc}
   158e4:	bl	11088 <abort@plt>
   158e8:	push	{fp, lr}
   158ec:	mov	fp, sp
   158f0:	sub	sp, sp, #48	; 0x30
   158f4:	mov	r3, sp
   158f8:	vmov.i32	q8, #0	; 0x00000000
   158fc:	mov	ip, #32
   15900:	cmp	r0, #10
   15904:	add	r2, r3, #16
   15908:	vst1.64	{d16-d17}, [r3], ip
   1590c:	vst1.64	{d16-d17}, [r3]
   15910:	vst1.64	{d16-d17}, [r2]
   15914:	beq	15934 <__assert_fail@plt+0x4894>
   15918:	str	r0, [sp]
   1591c:	mov	r3, sp
   15920:	mov	r0, #0
   15924:	mvn	r2, #0
   15928:	bl	15670 <__assert_fail@plt+0x45d0>
   1592c:	mov	sp, fp
   15930:	pop	{fp, pc}
   15934:	bl	11088 <abort@plt>
   15938:	push	{fp, lr}
   1593c:	mov	fp, sp
   15940:	sub	sp, sp, #48	; 0x30
   15944:	mov	r3, sp
   15948:	vmov.i32	q8, #0	; 0x00000000
   1594c:	mov	ip, #32
   15950:	cmp	r0, #10
   15954:	add	lr, r3, #16
   15958:	vst1.64	{d16-d17}, [r3], ip
   1595c:	vst1.64	{d16-d17}, [r3]
   15960:	vst1.64	{d16-d17}, [lr]
   15964:	beq	15980 <__assert_fail@plt+0x48e0>
   15968:	str	r0, [sp]
   1596c:	mov	r3, sp
   15970:	mov	r0, #0
   15974:	bl	15670 <__assert_fail@plt+0x45d0>
   15978:	mov	sp, fp
   1597c:	pop	{fp, pc}
   15980:	bl	11088 <abort@plt>
   15984:	push	{r4, sl, fp, lr}
   15988:	add	fp, sp, #8
   1598c:	sub	sp, sp, #48	; 0x30
   15990:	mov	lr, r0
   15994:	movw	r0, #50320	; 0xc490
   15998:	mov	r3, #32
   1599c:	mov	ip, r1
   159a0:	mov	r4, #1
   159a4:	movt	r0, #2
   159a8:	add	r1, r0, #16
   159ac:	vld1.64	{d16-d17}, [r0], r3
   159b0:	mov	r3, sp
   159b4:	vld1.64	{d18-d19}, [r1]
   159b8:	add	r1, r3, #16
   159bc:	vld1.64	{d20-d21}, [r0]
   159c0:	add	r0, r3, #32
   159c4:	vst1.64	{d18-d19}, [r1]
   159c8:	mov	r1, r3
   159cc:	vst1.64	{d20-d21}, [r0]
   159d0:	mov	r0, #28
   159d4:	and	r0, r0, r2, lsr #3
   159d8:	and	r2, r2, #31
   159dc:	vst1.64	{d16-d17}, [r1], r0
   159e0:	ldr	r0, [r1, #8]
   159e4:	bic	r4, r4, r0, lsr r2
   159e8:	eor	r0, r0, r4, lsl r2
   159ec:	mov	r2, ip
   159f0:	str	r0, [r1, #8]
   159f4:	mov	r0, #0
   159f8:	mov	r1, lr
   159fc:	bl	15670 <__assert_fail@plt+0x45d0>
   15a00:	sub	sp, fp, #8
   15a04:	pop	{r4, sl, fp, pc}
   15a08:	push	{fp, lr}
   15a0c:	mov	fp, sp
   15a10:	sub	sp, sp, #48	; 0x30
   15a14:	mov	ip, r0
   15a18:	movw	r0, #50320	; 0xc490
   15a1c:	mov	r3, #32
   15a20:	movt	r0, #2
   15a24:	add	r2, r0, #16
   15a28:	vld1.64	{d16-d17}, [r0], r3
   15a2c:	mov	r3, sp
   15a30:	vld1.64	{d18-d19}, [r2]
   15a34:	add	r2, r3, #16
   15a38:	vld1.64	{d20-d21}, [r0]
   15a3c:	add	r0, r3, #32
   15a40:	vst1.64	{d18-d19}, [r2]
   15a44:	mov	r2, r3
   15a48:	vst1.64	{d20-d21}, [r0]
   15a4c:	mov	r0, #28
   15a50:	and	r0, r0, r1, lsr #3
   15a54:	and	r1, r1, #31
   15a58:	vst1.64	{d16-d17}, [r2], r0
   15a5c:	mov	r0, #1
   15a60:	ldr	lr, [r2, #8]
   15a64:	bic	r0, r0, lr, lsr r1
   15a68:	eor	r0, lr, r0, lsl r1
   15a6c:	mov	r1, ip
   15a70:	str	r0, [r2, #8]
   15a74:	mov	r0, #0
   15a78:	mvn	r2, #0
   15a7c:	bl	15670 <__assert_fail@plt+0x45d0>
   15a80:	mov	sp, fp
   15a84:	pop	{fp, pc}
   15a88:	push	{fp, lr}
   15a8c:	mov	fp, sp
   15a90:	sub	sp, sp, #48	; 0x30
   15a94:	movw	r2, #50320	; 0xc490
   15a98:	mov	r3, #32
   15a9c:	mov	r1, r0
   15aa0:	movt	r2, #2
   15aa4:	add	r0, r2, #16
   15aa8:	vld1.64	{d16-d17}, [r2], r3
   15aac:	mov	r3, sp
   15ab0:	vld1.64	{d18-d19}, [r0]
   15ab4:	add	r0, r3, #16
   15ab8:	vld1.64	{d20-d21}, [r2]
   15abc:	mov	r2, r3
   15ac0:	vst1.64	{d18-d19}, [r0]
   15ac4:	add	r0, r3, #32
   15ac8:	vst1.64	{d20-d21}, [r0]
   15acc:	mov	r0, #12
   15ad0:	vst1.64	{d16-d17}, [r2], r0
   15ad4:	ldr	r0, [r2]
   15ad8:	orr	r0, r0, #67108864	; 0x4000000
   15adc:	str	r0, [r2]
   15ae0:	mov	r0, #0
   15ae4:	mvn	r2, #0
   15ae8:	bl	15670 <__assert_fail@plt+0x45d0>
   15aec:	mov	sp, fp
   15af0:	pop	{fp, pc}
   15af4:	push	{fp, lr}
   15af8:	mov	fp, sp
   15afc:	sub	sp, sp, #48	; 0x30
   15b00:	mov	ip, r1
   15b04:	mov	r1, r0
   15b08:	movw	r0, #50320	; 0xc490
   15b0c:	mov	r3, #32
   15b10:	movt	r0, #2
   15b14:	add	r2, r0, #16
   15b18:	vld1.64	{d16-d17}, [r0], r3
   15b1c:	mov	r3, sp
   15b20:	vld1.64	{d18-d19}, [r2]
   15b24:	add	r2, r3, #16
   15b28:	vld1.64	{d20-d21}, [r0]
   15b2c:	add	r0, r3, #32
   15b30:	vst1.64	{d18-d19}, [r2]
   15b34:	mov	r2, r3
   15b38:	vst1.64	{d20-d21}, [r0]
   15b3c:	mov	r0, #12
   15b40:	vst1.64	{d16-d17}, [r2], r0
   15b44:	ldr	r0, [r2]
   15b48:	orr	r0, r0, #67108864	; 0x4000000
   15b4c:	str	r0, [r2]
   15b50:	mov	r0, #0
   15b54:	mov	r2, ip
   15b58:	bl	15670 <__assert_fail@plt+0x45d0>
   15b5c:	mov	sp, fp
   15b60:	pop	{fp, pc}
   15b64:	push	{r4, sl, fp, lr}
   15b68:	add	fp, sp, #8
   15b6c:	sub	sp, sp, #96	; 0x60
   15b70:	mov	ip, r2
   15b74:	mov	r2, sp
   15b78:	vmov.i32	q8, #0	; 0x00000000
   15b7c:	mov	r4, #28
   15b80:	cmp	r1, #10
   15b84:	mov	r3, r2
   15b88:	add	lr, r2, #16
   15b8c:	vst1.64	{d16-d17}, [r3], r4
   15b90:	vst1.64	{d16-d17}, [lr]
   15b94:	vst1.32	{d16-d17}, [r3]
   15b98:	beq	15be8 <__assert_fail@plt+0x4b48>
   15b9c:	vld1.64	{d16-d17}, [r2], r4
   15ba0:	vld1.64	{d18-d19}, [lr]
   15ba4:	add	r3, sp, #48	; 0x30
   15ba8:	add	r4, r3, #4
   15bac:	vld1.32	{d20-d21}, [r2]
   15bb0:	add	r2, r3, #20
   15bb4:	vst1.32	{d16-d17}, [r4]
   15bb8:	vst1.32	{d18-d19}, [r2]
   15bbc:	add	r2, r3, #32
   15bc0:	vst1.32	{d20-d21}, [r2]
   15bc4:	str	r1, [sp, #48]	; 0x30
   15bc8:	mvn	r2, #0
   15bcc:	ldr	r1, [sp, #60]	; 0x3c
   15bd0:	orr	r1, r1, #67108864	; 0x4000000
   15bd4:	str	r1, [sp, #60]	; 0x3c
   15bd8:	mov	r1, ip
   15bdc:	bl	15670 <__assert_fail@plt+0x45d0>
   15be0:	sub	sp, fp, #8
   15be4:	pop	{r4, sl, fp, pc}
   15be8:	bl	11088 <abort@plt>
   15bec:	push	{r4, r5, fp, lr}
   15bf0:	add	fp, sp, #8
   15bf4:	sub	sp, sp, #48	; 0x30
   15bf8:	mov	ip, r3
   15bfc:	movw	r3, #50320	; 0xc490
   15c00:	mov	lr, #32
   15c04:	cmp	r1, #0
   15c08:	mov	r5, sp
   15c0c:	movt	r3, #2
   15c10:	cmpne	r2, #0
   15c14:	add	r4, r3, #16
   15c18:	vld1.64	{d16-d17}, [r3], lr
   15c1c:	vld1.64	{d18-d19}, [r4]
   15c20:	add	r4, r5, #16
   15c24:	vld1.64	{d20-d21}, [r3]
   15c28:	vst1.64	{d16-d17}, [r5], lr
   15c2c:	mov	r3, #10
   15c30:	vst1.64	{d18-d19}, [r4]
   15c34:	vst1.64	{d20-d21}, [r5]
   15c38:	str	r3, [sp]
   15c3c:	bne	15c44 <__assert_fail@plt+0x4ba4>
   15c40:	bl	11088 <abort@plt>
   15c44:	str	r2, [sp, #44]	; 0x2c
   15c48:	str	r1, [sp, #40]	; 0x28
   15c4c:	mov	r3, sp
   15c50:	mov	r1, ip
   15c54:	mvn	r2, #0
   15c58:	bl	15670 <__assert_fail@plt+0x45d0>
   15c5c:	sub	sp, fp, #8
   15c60:	pop	{r4, r5, fp, pc}
   15c64:	push	{r4, r5, fp, lr}
   15c68:	add	fp, sp, #8
   15c6c:	sub	sp, sp, #48	; 0x30
   15c70:	mov	lr, r3
   15c74:	movw	r3, #50320	; 0xc490
   15c78:	mov	ip, #32
   15c7c:	cmp	r1, #0
   15c80:	mov	r5, sp
   15c84:	movt	r3, #2
   15c88:	cmpne	r2, #0
   15c8c:	add	r4, r3, #16
   15c90:	vld1.64	{d16-d17}, [r3], ip
   15c94:	vld1.64	{d18-d19}, [r4]
   15c98:	add	r4, r5, #16
   15c9c:	vld1.64	{d20-d21}, [r3]
   15ca0:	vst1.64	{d16-d17}, [r5], ip
   15ca4:	mov	r3, #10
   15ca8:	vst1.64	{d18-d19}, [r4]
   15cac:	vst1.64	{d20-d21}, [r5]
   15cb0:	str	r3, [sp]
   15cb4:	bne	15cbc <__assert_fail@plt+0x4c1c>
   15cb8:	bl	11088 <abort@plt>
   15cbc:	ldr	ip, [fp, #8]
   15cc0:	str	r2, [sp, #44]	; 0x2c
   15cc4:	str	r1, [sp, #40]	; 0x28
   15cc8:	mov	r3, sp
   15ccc:	mov	r1, lr
   15cd0:	mov	r2, ip
   15cd4:	bl	15670 <__assert_fail@plt+0x45d0>
   15cd8:	sub	sp, fp, #8
   15cdc:	pop	{r4, r5, fp, pc}
   15ce0:	push	{r4, sl, fp, lr}
   15ce4:	add	fp, sp, #8
   15ce8:	sub	sp, sp, #48	; 0x30
   15cec:	mov	ip, r2
   15cf0:	movw	r2, #50320	; 0xc490
   15cf4:	mov	lr, #32
   15cf8:	cmp	r0, #0
   15cfc:	mov	r4, sp
   15d00:	movt	r2, #2
   15d04:	cmpne	r1, #0
   15d08:	add	r3, r2, #16
   15d0c:	vld1.64	{d16-d17}, [r2], lr
   15d10:	vld1.64	{d18-d19}, [r3]
   15d14:	add	r3, r4, #16
   15d18:	vld1.64	{d20-d21}, [r2]
   15d1c:	vst1.64	{d16-d17}, [r4], lr
   15d20:	mov	r2, #10
   15d24:	vst1.64	{d18-d19}, [r3]
   15d28:	vst1.64	{d20-d21}, [r4]
   15d2c:	str	r2, [sp]
   15d30:	bne	15d38 <__assert_fail@plt+0x4c98>
   15d34:	bl	11088 <abort@plt>
   15d38:	str	r1, [sp, #44]	; 0x2c
   15d3c:	str	r0, [sp, #40]	; 0x28
   15d40:	mov	r3, sp
   15d44:	mov	r0, #0
   15d48:	mov	r1, ip
   15d4c:	mvn	r2, #0
   15d50:	bl	15670 <__assert_fail@plt+0x45d0>
   15d54:	sub	sp, fp, #8
   15d58:	pop	{r4, sl, fp, pc}
   15d5c:	push	{r4, r5, fp, lr}
   15d60:	add	fp, sp, #8
   15d64:	sub	sp, sp, #48	; 0x30
   15d68:	mov	lr, r2
   15d6c:	movw	r2, #50320	; 0xc490
   15d70:	mov	ip, r3
   15d74:	mov	r3, #32
   15d78:	cmp	r0, #0
   15d7c:	mov	r5, sp
   15d80:	movt	r2, #2
   15d84:	cmpne	r1, #0
   15d88:	add	r4, r2, #16
   15d8c:	vld1.64	{d16-d17}, [r2], r3
   15d90:	vld1.64	{d18-d19}, [r4]
   15d94:	add	r4, r5, #16
   15d98:	vld1.64	{d20-d21}, [r2]
   15d9c:	vst1.64	{d16-d17}, [r5], r3
   15da0:	mov	r2, #10
   15da4:	vst1.64	{d18-d19}, [r4]
   15da8:	vst1.64	{d20-d21}, [r5]
   15dac:	str	r2, [sp]
   15db0:	bne	15db8 <__assert_fail@plt+0x4d18>
   15db4:	bl	11088 <abort@plt>
   15db8:	str	r1, [sp, #44]	; 0x2c
   15dbc:	str	r0, [sp, #40]	; 0x28
   15dc0:	mov	r3, sp
   15dc4:	mov	r0, #0
   15dc8:	mov	r1, lr
   15dcc:	mov	r2, ip
   15dd0:	bl	15670 <__assert_fail@plt+0x45d0>
   15dd4:	sub	sp, fp, #8
   15dd8:	pop	{r4, r5, fp, pc}
   15ddc:	movw	r3, #41224	; 0xa108
   15de0:	movt	r3, #2
   15de4:	b	15670 <__assert_fail@plt+0x45d0>
   15de8:	movw	r3, #41224	; 0xa108
   15dec:	mov	r2, r1
   15df0:	mov	r1, r0
   15df4:	mov	r0, #0
   15df8:	movt	r3, #2
   15dfc:	b	15670 <__assert_fail@plt+0x45d0>
   15e00:	movw	r3, #41224	; 0xa108
   15e04:	mvn	r2, #0
   15e08:	movt	r3, #2
   15e0c:	b	15670 <__assert_fail@plt+0x45d0>
   15e10:	movw	r3, #41224	; 0xa108
   15e14:	mov	r1, r0
   15e18:	mov	r0, #0
   15e1c:	mvn	r2, #0
   15e20:	movt	r3, #2
   15e24:	b	15670 <__assert_fail@plt+0x45d0>
   15e28:	push	{r4, r5, fp, lr}
   15e2c:	add	fp, sp, #8
   15e30:	mov	r5, r0
   15e34:	mov	r4, r1
   15e38:	mov	r0, #0
   15e3c:	mov	r2, #5
   15e40:	mov	r1, r5
   15e44:	bl	10ee4 <dcgettext@plt>
   15e48:	cmp	r0, r5
   15e4c:	popne	{r4, r5, fp, pc}
   15e50:	bl	17ba0 <__assert_fail@plt+0x6b00>
   15e54:	ldrb	r1, [r0]
   15e58:	and	r1, r1, #223	; 0xdf
   15e5c:	cmp	r1, #71	; 0x47
   15e60:	beq	15ec8 <__assert_fail@plt+0x4e28>
   15e64:	cmp	r1, #85	; 0x55
   15e68:	bne	15eec <__assert_fail@plt+0x4e4c>
   15e6c:	ldrb	r1, [r0, #1]
   15e70:	and	r1, r1, #223	; 0xdf
   15e74:	cmp	r1, #84	; 0x54
   15e78:	bne	15eec <__assert_fail@plt+0x4e4c>
   15e7c:	ldrb	r1, [r0, #2]
   15e80:	and	r1, r1, #223	; 0xdf
   15e84:	cmp	r1, #70	; 0x46
   15e88:	ldrbeq	r1, [r0, #3]
   15e8c:	cmpeq	r1, #45	; 0x2d
   15e90:	bne	15eec <__assert_fail@plt+0x4e4c>
   15e94:	ldrb	r1, [r0, #4]
   15e98:	cmp	r1, #56	; 0x38
   15e9c:	ldrbeq	r0, [r0, #5]
   15ea0:	cmpeq	r0, #0
   15ea4:	bne	15eec <__assert_fail@plt+0x4e4c>
   15ea8:	ldrb	r1, [r5]
   15eac:	movw	r2, #38226	; 0x9552
   15eb0:	movw	r0, #38230	; 0x9556
   15eb4:	movt	r2, #1
   15eb8:	movt	r0, #1
   15ebc:	cmp	r1, #96	; 0x60
   15ec0:	moveq	r0, r2
   15ec4:	pop	{r4, r5, fp, pc}
   15ec8:	ldrb	r1, [r0, #1]
   15ecc:	and	r1, r1, #223	; 0xdf
   15ed0:	cmp	r1, #66	; 0x42
   15ed4:	bne	15eec <__assert_fail@plt+0x4e4c>
   15ed8:	ldrb	r1, [r0, #2]
   15edc:	cmp	r1, #49	; 0x31
   15ee0:	ldrbeq	r1, [r0, #3]
   15ee4:	cmpeq	r1, #56	; 0x38
   15ee8:	beq	15f08 <__assert_fail@plt+0x4e68>
   15eec:	movw	r1, #38222	; 0x954e
   15ef0:	movw	r0, #35972	; 0x8c84
   15ef4:	cmp	r4, #9
   15ef8:	movt	r1, #1
   15efc:	movt	r0, #1
   15f00:	moveq	r0, r1
   15f04:	pop	{r4, r5, fp, pc}
   15f08:	ldrb	r1, [r0, #4]
   15f0c:	cmp	r1, #48	; 0x30
   15f10:	ldrbeq	r1, [r0, #5]
   15f14:	cmpeq	r1, #51	; 0x33
   15f18:	bne	15eec <__assert_fail@plt+0x4e4c>
   15f1c:	ldrb	r1, [r0, #6]
   15f20:	cmp	r1, #48	; 0x30
   15f24:	ldrbeq	r0, [r0, #7]
   15f28:	cmpeq	r0, #0
   15f2c:	bne	15eec <__assert_fail@plt+0x4e4c>
   15f30:	ldrb	r1, [r5]
   15f34:	movw	r2, #38234	; 0x955a
   15f38:	movw	r0, #38238	; 0x955e
   15f3c:	movt	r2, #1
   15f40:	movt	r0, #1
   15f44:	b	15ebc <__assert_fail@plt+0x4e1c>
   15f48:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15f4c:	add	fp, sp, #24
   15f50:	movw	r8, #0
   15f54:	mov	r6, r2
   15f58:	mov	r4, r1
   15f5c:	mov	r5, r0
   15f60:	movt	r8, #32752	; 0x7ff0
   15f64:	mov	r0, r5
   15f68:	mov	r1, r4
   15f6c:	mov	r2, r6
   15f70:	bl	10e6c <read@plt>
   15f74:	mov	r7, r0
   15f78:	cmn	r0, #1
   15f7c:	bgt	15fa4 <__assert_fail@plt+0x4f04>
   15f80:	bl	10fe0 <__errno_location@plt>
   15f84:	ldr	r0, [r0]
   15f88:	cmp	r0, #4
   15f8c:	beq	15f64 <__assert_fail@plt+0x4ec4>
   15f90:	cmp	r6, r8
   15f94:	bls	15fa4 <__assert_fail@plt+0x4f04>
   15f98:	cmp	r0, #22
   15f9c:	mov	r6, r8
   15fa0:	beq	15f64 <__assert_fail@plt+0x4ec4>
   15fa4:	mov	r0, r7
   15fa8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15fac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15fb0:	add	fp, sp, #24
   15fb4:	sub	sp, sp, #32
   15fb8:	ldr	r6, [fp, #12]
   15fbc:	ldr	r7, [fp, #8]
   15fc0:	mov	r4, r2
   15fc4:	mov	r8, r0
   15fc8:	cmp	r1, #0
   15fcc:	beq	15ff4 <__assert_fail@plt+0x4f54>
   15fd0:	movw	r2, #38328	; 0x95b8
   15fd4:	mov	r5, r1
   15fd8:	str	r3, [sp, #4]
   15fdc:	str	r4, [sp]
   15fe0:	mov	r0, r8
   15fe4:	mov	r1, #1
   15fe8:	movt	r2, #1
   15fec:	mov	r3, r5
   15ff0:	b	1600c <__assert_fail@plt+0x4f6c>
   15ff4:	movw	r2, #38340	; 0x95c4
   15ff8:	str	r3, [sp]
   15ffc:	mov	r0, r8
   16000:	mov	r1, #1
   16004:	mov	r3, r4
   16008:	movt	r2, #1
   1600c:	bl	11028 <__fprintf_chk@plt>
   16010:	movw	r1, #38347	; 0x95cb
   16014:	mov	r0, #0
   16018:	mov	r2, #5
   1601c:	movt	r1, #1
   16020:	bl	10ee4 <dcgettext@plt>
   16024:	movw	r2, #39065	; 0x9899
   16028:	mov	r3, r0
   1602c:	movw	r0, #2022	; 0x7e6
   16030:	mov	r1, #1
   16034:	str	r0, [sp]
   16038:	movt	r2, #1
   1603c:	mov	r0, r8
   16040:	bl	11028 <__fprintf_chk@plt>
   16044:	movw	r4, #35710	; 0x8b7e
   16048:	mov	r1, r8
   1604c:	movt	r4, #1
   16050:	mov	r0, r4
   16054:	bl	10e3c <fputs_unlocked@plt>
   16058:	movw	r1, #38351	; 0x95cf
   1605c:	mov	r0, #0
   16060:	mov	r2, #5
   16064:	movt	r1, #1
   16068:	bl	10ee4 <dcgettext@plt>
   1606c:	movw	r3, #38522	; 0x967a
   16070:	mov	r2, r0
   16074:	mov	r0, r8
   16078:	mov	r1, #1
   1607c:	movt	r3, #1
   16080:	bl	11028 <__fprintf_chk@plt>
   16084:	mov	r0, r4
   16088:	mov	r1, r8
   1608c:	bl	10e3c <fputs_unlocked@plt>
   16090:	cmp	r6, #9
   16094:	bhi	160d0 <__assert_fail@plt+0x5030>
   16098:	add	r0, pc, #0
   1609c:	ldr	pc, [r0, r6, lsl #2]
   160a0:	andeq	r6, r1, r8, asr #1
   160a4:	ldrdeq	r6, [r1], -ip
   160a8:	andeq	r6, r1, ip, lsl #2
   160ac:	andeq	r6, r1, r4, lsr r1
   160b0:	andeq	r6, r1, ip, asr r1
   160b4:	andeq	r6, r1, r4, lsl #3
   160b8:	andeq	r6, r1, ip, lsr #3
   160bc:	andeq	r6, r1, r4, ror #3
   160c0:	andeq	r6, r1, r4, lsl #5
   160c4:	andeq	r6, r1, ip, lsr #4
   160c8:	sub	sp, fp, #24
   160cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   160d0:	movw	r1, #38875	; 0x97db
   160d4:	movt	r1, #1
   160d8:	b	16234 <__assert_fail@plt+0x5194>
   160dc:	movw	r1, #38556	; 0x969c
   160e0:	mov	r0, #0
   160e4:	mov	r2, #5
   160e8:	movt	r1, #1
   160ec:	bl	10ee4 <dcgettext@plt>
   160f0:	ldr	r3, [r7]
   160f4:	mov	r2, r0
   160f8:	mov	r0, r8
   160fc:	mov	r1, #1
   16100:	sub	sp, fp, #24
   16104:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   16108:	b	11028 <__fprintf_chk@plt>
   1610c:	movw	r1, #38572	; 0x96ac
   16110:	mov	r0, #0
   16114:	mov	r2, #5
   16118:	movt	r1, #1
   1611c:	bl	10ee4 <dcgettext@plt>
   16120:	mov	r2, r0
   16124:	ldr	r3, [r7]
   16128:	ldr	r0, [r7, #4]
   1612c:	str	r0, [sp]
   16130:	b	16220 <__assert_fail@plt+0x5180>
   16134:	movw	r1, #38595	; 0x96c3
   16138:	mov	r0, #0
   1613c:	mov	r2, #5
   16140:	movt	r1, #1
   16144:	bl	10ee4 <dcgettext@plt>
   16148:	ldr	r3, [r7]
   1614c:	mov	r2, r0
   16150:	ldmib	r7, {r0, r1}
   16154:	stm	sp, {r0, r1}
   16158:	b	16220 <__assert_fail@plt+0x5180>
   1615c:	movw	r1, #38623	; 0x96df
   16160:	mov	r0, #0
   16164:	mov	r2, #5
   16168:	movt	r1, #1
   1616c:	bl	10ee4 <dcgettext@plt>
   16170:	ldr	r3, [r7]
   16174:	mov	r2, r0
   16178:	ldmib	r7, {r0, r1, r7}
   1617c:	stm	sp, {r0, r1, r7}
   16180:	b	16220 <__assert_fail@plt+0x5180>
   16184:	movw	r1, #38655	; 0x96ff
   16188:	mov	r0, #0
   1618c:	mov	r2, #5
   16190:	movt	r1, #1
   16194:	bl	10ee4 <dcgettext@plt>
   16198:	ldr	r3, [r7]
   1619c:	mov	r2, r0
   161a0:	ldmib	r7, {r0, r1, r6, r7}
   161a4:	stm	sp, {r0, r1, r6, r7}
   161a8:	b	16220 <__assert_fail@plt+0x5180>
   161ac:	movw	r1, #38691	; 0x9723
   161b0:	mov	r0, #0
   161b4:	mov	r2, #5
   161b8:	movt	r1, #1
   161bc:	bl	10ee4 <dcgettext@plt>
   161c0:	ldr	r3, [r7]
   161c4:	mov	r2, r0
   161c8:	ldmib	r7, {r0, r1, r6}
   161cc:	ldr	r5, [r7, #16]
   161d0:	ldr	r7, [r7, #20]
   161d4:	stm	sp, {r0, r1, r6}
   161d8:	str	r5, [sp, #12]
   161dc:	str	r7, [sp, #16]
   161e0:	b	16220 <__assert_fail@plt+0x5180>
   161e4:	movw	r1, #38731	; 0x974b
   161e8:	mov	r0, #0
   161ec:	mov	r2, #5
   161f0:	movt	r1, #1
   161f4:	bl	10ee4 <dcgettext@plt>
   161f8:	ldr	r3, [r7]
   161fc:	mov	r2, r0
   16200:	ldmib	r7, {r0, r1, r6}
   16204:	ldr	r5, [r7, #16]
   16208:	ldr	r4, [r7, #20]
   1620c:	ldr	r7, [r7, #24]
   16210:	stm	sp, {r0, r1, r6}
   16214:	str	r5, [sp, #12]
   16218:	str	r4, [sp, #16]
   1621c:	str	r7, [sp, #20]
   16220:	mov	r0, r8
   16224:	mov	r1, #1
   16228:	b	162d4 <__assert_fail@plt+0x5234>
   1622c:	movw	r1, #38823	; 0x97a7
   16230:	movt	r1, #1
   16234:	mov	r0, #0
   16238:	mov	r2, #5
   1623c:	bl	10ee4 <dcgettext@plt>
   16240:	mov	ip, r0
   16244:	ldr	r3, [r7]
   16248:	ldr	r0, [r7, #4]
   1624c:	ldr	r1, [r7, #8]
   16250:	ldr	r6, [r7, #12]
   16254:	ldr	r5, [r7, #16]
   16258:	ldr	r4, [r7, #20]
   1625c:	ldr	r2, [r7, #24]
   16260:	ldr	lr, [r7, #28]
   16264:	ldr	r7, [r7, #32]
   16268:	stm	sp, {r0, r1, r6}
   1626c:	str	r5, [sp, #12]
   16270:	str	r4, [sp, #16]
   16274:	str	r2, [sp, #20]
   16278:	str	lr, [sp, #24]
   1627c:	str	r7, [sp, #28]
   16280:	b	162c8 <__assert_fail@plt+0x5228>
   16284:	movw	r1, #38775	; 0x9777
   16288:	mov	r0, #0
   1628c:	mov	r2, #5
   16290:	movt	r1, #1
   16294:	bl	10ee4 <dcgettext@plt>
   16298:	mov	ip, r0
   1629c:	ldr	r3, [r7]
   162a0:	ldmib	r7, {r0, r1, r6}
   162a4:	ldr	r5, [r7, #16]
   162a8:	ldr	r4, [r7, #20]
   162ac:	ldr	r2, [r7, #24]
   162b0:	ldr	r7, [r7, #28]
   162b4:	stm	sp, {r0, r1, r6}
   162b8:	str	r5, [sp, #12]
   162bc:	str	r4, [sp, #16]
   162c0:	str	r2, [sp, #20]
   162c4:	str	r7, [sp, #24]
   162c8:	mov	r0, r8
   162cc:	mov	r1, #1
   162d0:	mov	r2, ip
   162d4:	bl	11028 <__fprintf_chk@plt>
   162d8:	sub	sp, fp, #24
   162dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   162e0:	push	{r4, sl, fp, lr}
   162e4:	add	fp, sp, #8
   162e8:	sub	sp, sp, #8
   162ec:	ldr	ip, [fp, #8]
   162f0:	mov	lr, #0
   162f4:	ldr	r4, [ip, lr, lsl #2]
   162f8:	add	lr, lr, #1
   162fc:	cmp	r4, #0
   16300:	bne	162f4 <__assert_fail@plt+0x5254>
   16304:	sub	r4, lr, #1
   16308:	str	ip, [sp]
   1630c:	str	r4, [sp, #4]
   16310:	bl	15fac <__assert_fail@plt+0x4f0c>
   16314:	sub	sp, fp, #8
   16318:	pop	{r4, sl, fp, pc}
   1631c:	push	{fp, lr}
   16320:	mov	fp, sp
   16324:	sub	sp, sp, #48	; 0x30
   16328:	ldr	ip, [fp, #8]
   1632c:	ldr	lr, [ip]
   16330:	cmp	lr, #0
   16334:	str	lr, [sp, #8]
   16338:	beq	163d4 <__assert_fail@plt+0x5334>
   1633c:	ldr	lr, [ip, #4]
   16340:	cmp	lr, #0
   16344:	str	lr, [sp, #12]
   16348:	beq	163dc <__assert_fail@plt+0x533c>
   1634c:	ldr	lr, [ip, #8]
   16350:	cmp	lr, #0
   16354:	str	lr, [sp, #16]
   16358:	beq	163e4 <__assert_fail@plt+0x5344>
   1635c:	ldr	lr, [ip, #12]
   16360:	cmp	lr, #0
   16364:	str	lr, [sp, #20]
   16368:	beq	163ec <__assert_fail@plt+0x534c>
   1636c:	ldr	lr, [ip, #16]
   16370:	cmp	lr, #0
   16374:	str	lr, [sp, #24]
   16378:	beq	163f4 <__assert_fail@plt+0x5354>
   1637c:	ldr	lr, [ip, #20]
   16380:	cmp	lr, #0
   16384:	str	lr, [sp, #28]
   16388:	beq	163fc <__assert_fail@plt+0x535c>
   1638c:	ldr	lr, [ip, #24]
   16390:	cmp	lr, #0
   16394:	str	lr, [sp, #32]
   16398:	beq	16404 <__assert_fail@plt+0x5364>
   1639c:	ldr	lr, [ip, #28]
   163a0:	cmp	lr, #0
   163a4:	str	lr, [sp, #36]	; 0x24
   163a8:	beq	1640c <__assert_fail@plt+0x536c>
   163ac:	ldr	lr, [ip, #32]
   163b0:	cmp	lr, #0
   163b4:	str	lr, [sp, #40]	; 0x28
   163b8:	beq	16414 <__assert_fail@plt+0x5374>
   163bc:	ldr	lr, [ip, #36]	; 0x24
   163c0:	mov	ip, #10
   163c4:	cmp	lr, #0
   163c8:	str	lr, [sp, #44]	; 0x2c
   163cc:	movweq	ip, #9
   163d0:	b	16418 <__assert_fail@plt+0x5378>
   163d4:	mov	ip, #0
   163d8:	b	16418 <__assert_fail@plt+0x5378>
   163dc:	mov	ip, #1
   163e0:	b	16418 <__assert_fail@plt+0x5378>
   163e4:	mov	ip, #2
   163e8:	b	16418 <__assert_fail@plt+0x5378>
   163ec:	mov	ip, #3
   163f0:	b	16418 <__assert_fail@plt+0x5378>
   163f4:	mov	ip, #4
   163f8:	b	16418 <__assert_fail@plt+0x5378>
   163fc:	mov	ip, #5
   16400:	b	16418 <__assert_fail@plt+0x5378>
   16404:	mov	ip, #6
   16408:	b	16418 <__assert_fail@plt+0x5378>
   1640c:	mov	ip, #7
   16410:	b	16418 <__assert_fail@plt+0x5378>
   16414:	mov	ip, #8
   16418:	add	lr, sp, #8
   1641c:	str	ip, [sp, #4]
   16420:	str	lr, [sp]
   16424:	bl	15fac <__assert_fail@plt+0x4f0c>
   16428:	mov	sp, fp
   1642c:	pop	{fp, pc}
   16430:	push	{fp, lr}
   16434:	mov	fp, sp
   16438:	sub	sp, sp, #56	; 0x38
   1643c:	add	ip, fp, #8
   16440:	str	ip, [sp, #12]
   16444:	ldr	lr, [fp, #8]
   16448:	cmp	lr, #0
   1644c:	str	lr, [sp, #16]
   16450:	beq	164ec <__assert_fail@plt+0x544c>
   16454:	ldr	lr, [ip, #4]
   16458:	cmp	lr, #0
   1645c:	str	lr, [sp, #20]
   16460:	beq	164f4 <__assert_fail@plt+0x5454>
   16464:	ldr	lr, [ip, #8]
   16468:	cmp	lr, #0
   1646c:	str	lr, [sp, #24]
   16470:	beq	164fc <__assert_fail@plt+0x545c>
   16474:	ldr	lr, [ip, #12]
   16478:	cmp	lr, #0
   1647c:	str	lr, [sp, #28]
   16480:	beq	16504 <__assert_fail@plt+0x5464>
   16484:	ldr	lr, [ip, #16]
   16488:	cmp	lr, #0
   1648c:	str	lr, [sp, #32]
   16490:	beq	1650c <__assert_fail@plt+0x546c>
   16494:	ldr	lr, [ip, #20]
   16498:	cmp	lr, #0
   1649c:	str	lr, [sp, #36]	; 0x24
   164a0:	beq	16514 <__assert_fail@plt+0x5474>
   164a4:	ldr	lr, [ip, #24]
   164a8:	cmp	lr, #0
   164ac:	str	lr, [sp, #40]	; 0x28
   164b0:	beq	1651c <__assert_fail@plt+0x547c>
   164b4:	ldr	lr, [ip, #28]
   164b8:	cmp	lr, #0
   164bc:	str	lr, [sp, #44]	; 0x2c
   164c0:	beq	16524 <__assert_fail@plt+0x5484>
   164c4:	ldr	lr, [ip, #32]
   164c8:	cmp	lr, #0
   164cc:	str	lr, [sp, #48]	; 0x30
   164d0:	beq	1652c <__assert_fail@plt+0x548c>
   164d4:	ldr	lr, [ip, #36]	; 0x24
   164d8:	mov	ip, #10
   164dc:	cmp	lr, #0
   164e0:	str	lr, [sp, #52]	; 0x34
   164e4:	movweq	ip, #9
   164e8:	b	16530 <__assert_fail@plt+0x5490>
   164ec:	mov	ip, #0
   164f0:	b	16530 <__assert_fail@plt+0x5490>
   164f4:	mov	ip, #1
   164f8:	b	16530 <__assert_fail@plt+0x5490>
   164fc:	mov	ip, #2
   16500:	b	16530 <__assert_fail@plt+0x5490>
   16504:	mov	ip, #3
   16508:	b	16530 <__assert_fail@plt+0x5490>
   1650c:	mov	ip, #4
   16510:	b	16530 <__assert_fail@plt+0x5490>
   16514:	mov	ip, #5
   16518:	b	16530 <__assert_fail@plt+0x5490>
   1651c:	mov	ip, #6
   16520:	b	16530 <__assert_fail@plt+0x5490>
   16524:	mov	ip, #7
   16528:	b	16530 <__assert_fail@plt+0x5490>
   1652c:	mov	ip, #8
   16530:	add	lr, sp, #16
   16534:	str	ip, [sp, #4]
   16538:	str	lr, [sp]
   1653c:	bl	15fac <__assert_fail@plt+0x4f0c>
   16540:	mov	sp, fp
   16544:	pop	{fp, pc}
   16548:	push	{fp, lr}
   1654c:	mov	fp, sp
   16550:	movw	r0, #41308	; 0xa15c
   16554:	movt	r0, #2
   16558:	ldr	r1, [r0]
   1655c:	movw	r0, #35710	; 0x8b7e
   16560:	movt	r0, #1
   16564:	bl	10e3c <fputs_unlocked@plt>
   16568:	movw	r1, #38935	; 0x9817
   1656c:	mov	r0, #0
   16570:	mov	r2, #5
   16574:	movt	r1, #1
   16578:	bl	10ee4 <dcgettext@plt>
   1657c:	movw	r2, #38955	; 0x982b
   16580:	mov	r1, r0
   16584:	mov	r0, #1
   16588:	movt	r2, #1
   1658c:	bl	11010 <__printf_chk@plt>
   16590:	movw	r1, #38977	; 0x9841
   16594:	mov	r0, #0
   16598:	mov	r2, #5
   1659c:	movt	r1, #1
   165a0:	bl	10ee4 <dcgettext@plt>
   165a4:	movw	r2, #35023	; 0x88cf
   165a8:	movw	r3, #35519	; 0x8abf
   165ac:	mov	r1, r0
   165b0:	mov	r0, #1
   165b4:	movt	r2, #1
   165b8:	movt	r3, #1
   165bc:	bl	11010 <__printf_chk@plt>
   165c0:	movw	r1, #38997	; 0x9855
   165c4:	mov	r0, #0
   165c8:	mov	r2, #5
   165cc:	movt	r1, #1
   165d0:	bl	10ee4 <dcgettext@plt>
   165d4:	movw	r2, #39036	; 0x987c
   165d8:	mov	r1, r0
   165dc:	mov	r0, #1
   165e0:	movt	r2, #1
   165e4:	pop	{fp, lr}
   165e8:	b	11010 <__printf_chk@plt>
   165ec:	push	{r4, r5, r6, sl, fp, lr}
   165f0:	add	fp, sp, #16
   165f4:	mov	r4, r2
   165f8:	mov	r5, r1
   165fc:	mov	r6, r0
   16600:	bl	17c38 <__assert_fail@plt+0x6b98>
   16604:	cmp	r0, #0
   16608:	popne	{r4, r5, r6, sl, fp, pc}
   1660c:	cmp	r6, #0
   16610:	beq	16624 <__assert_fail@plt+0x5584>
   16614:	cmp	r5, #0
   16618:	cmpne	r4, #0
   1661c:	bne	16624 <__assert_fail@plt+0x5584>
   16620:	pop	{r4, r5, r6, sl, fp, pc}
   16624:	bl	16bc4 <__assert_fail@plt+0x5b24>
   16628:	push	{r4, r5, r6, sl, fp, lr}
   1662c:	add	fp, sp, #16
   16630:	mov	r4, r2
   16634:	mov	r5, r1
   16638:	mov	r6, r0
   1663c:	bl	17c38 <__assert_fail@plt+0x6b98>
   16640:	cmp	r0, #0
   16644:	popne	{r4, r5, r6, sl, fp, pc}
   16648:	cmp	r6, #0
   1664c:	beq	16660 <__assert_fail@plt+0x55c0>
   16650:	cmp	r5, #0
   16654:	cmpne	r4, #0
   16658:	bne	16660 <__assert_fail@plt+0x55c0>
   1665c:	pop	{r4, r5, r6, sl, fp, pc}
   16660:	bl	16bc4 <__assert_fail@plt+0x5b24>
   16664:	push	{fp, lr}
   16668:	mov	fp, sp
   1666c:	bl	178fc <__assert_fail@plt+0x685c>
   16670:	cmp	r0, #0
   16674:	popne	{fp, pc}
   16678:	bl	16bc4 <__assert_fail@plt+0x5b24>
   1667c:	push	{fp, lr}
   16680:	mov	fp, sp
   16684:	bl	178fc <__assert_fail@plt+0x685c>
   16688:	cmp	r0, #0
   1668c:	popne	{fp, pc}
   16690:	bl	16bc4 <__assert_fail@plt+0x5b24>
   16694:	push	{fp, lr}
   16698:	mov	fp, sp
   1669c:	bl	178fc <__assert_fail@plt+0x685c>
   166a0:	cmp	r0, #0
   166a4:	popne	{fp, pc}
   166a8:	bl	16bc4 <__assert_fail@plt+0x5b24>
   166ac:	push	{r4, r5, fp, lr}
   166b0:	add	fp, sp, #8
   166b4:	mov	r4, r1
   166b8:	mov	r5, r0
   166bc:	bl	1792c <__assert_fail@plt+0x688c>
   166c0:	cmp	r0, #0
   166c4:	popne	{r4, r5, fp, pc}
   166c8:	cmp	r5, #0
   166cc:	beq	166dc <__assert_fail@plt+0x563c>
   166d0:	cmp	r4, #0
   166d4:	bne	166dc <__assert_fail@plt+0x563c>
   166d8:	pop	{r4, r5, fp, pc}
   166dc:	bl	16bc4 <__assert_fail@plt+0x5b24>
   166e0:	push	{fp, lr}
   166e4:	mov	fp, sp
   166e8:	cmp	r1, #0
   166ec:	orreq	r1, r1, #1
   166f0:	bl	1792c <__assert_fail@plt+0x688c>
   166f4:	cmp	r0, #0
   166f8:	popne	{fp, pc}
   166fc:	bl	16bc4 <__assert_fail@plt+0x5b24>
   16700:	push	{fp, lr}
   16704:	mov	fp, sp
   16708:	clz	r3, r2
   1670c:	lsr	ip, r3, #5
   16710:	clz	r3, r1
   16714:	lsr	r3, r3, #5
   16718:	orrs	r3, r3, ip
   1671c:	movwne	r1, #1
   16720:	movwne	r2, #1
   16724:	bl	17c38 <__assert_fail@plt+0x6b98>
   16728:	cmp	r0, #0
   1672c:	popne	{fp, pc}
   16730:	bl	16bc4 <__assert_fail@plt+0x5b24>
   16734:	push	{fp, lr}
   16738:	mov	fp, sp
   1673c:	mov	r2, r1
   16740:	mov	r1, r0
   16744:	mov	r0, #0
   16748:	bl	17c38 <__assert_fail@plt+0x6b98>
   1674c:	cmp	r0, #0
   16750:	popne	{fp, pc}
   16754:	bl	16bc4 <__assert_fail@plt+0x5b24>
   16758:	push	{fp, lr}
   1675c:	mov	fp, sp
   16760:	mov	r2, r1
   16764:	mov	r1, r0
   16768:	clz	r0, r2
   1676c:	clz	r3, r1
   16770:	lsr	r0, r0, #5
   16774:	lsr	r3, r3, #5
   16778:	orrs	r0, r3, r0
   1677c:	movwne	r1, #1
   16780:	movwne	r2, #1
   16784:	mov	r0, #0
   16788:	bl	17c38 <__assert_fail@plt+0x6b98>
   1678c:	cmp	r0, #0
   16790:	popne	{fp, pc}
   16794:	bl	16bc4 <__assert_fail@plt+0x5b24>
   16798:	push	{r4, r5, r6, sl, fp, lr}
   1679c:	add	fp, sp, #16
   167a0:	ldr	r5, [r1]
   167a4:	mov	r4, r1
   167a8:	mov	r6, r0
   167ac:	cmp	r0, #0
   167b0:	beq	167c8 <__assert_fail@plt+0x5728>
   167b4:	mov	r0, #1
   167b8:	add	r0, r0, r5, lsr #1
   167bc:	adds	r5, r5, r0
   167c0:	bcc	167d0 <__assert_fail@plt+0x5730>
   167c4:	b	1680c <__assert_fail@plt+0x576c>
   167c8:	cmp	r5, #0
   167cc:	movweq	r5, #64	; 0x40
   167d0:	mov	r0, r6
   167d4:	mov	r1, r5
   167d8:	mov	r2, #1
   167dc:	bl	17c38 <__assert_fail@plt+0x6b98>
   167e0:	cmp	r5, #0
   167e4:	mov	r1, r5
   167e8:	movwne	r1, #1
   167ec:	cmp	r0, #0
   167f0:	bne	16804 <__assert_fail@plt+0x5764>
   167f4:	clz	r2, r6
   167f8:	lsr	r2, r2, #5
   167fc:	orrs	r1, r2, r1
   16800:	bne	1680c <__assert_fail@plt+0x576c>
   16804:	str	r5, [r4]
   16808:	pop	{r4, r5, r6, sl, fp, pc}
   1680c:	bl	16bc4 <__assert_fail@plt+0x5b24>
   16810:	push	{r4, r5, r6, r7, fp, lr}
   16814:	add	fp, sp, #16
   16818:	ldr	r5, [r1]
   1681c:	mov	r6, r2
   16820:	mov	r4, r1
   16824:	mov	r7, r0
   16828:	cmp	r0, #0
   1682c:	beq	16844 <__assert_fail@plt+0x57a4>
   16830:	mov	r0, #1
   16834:	add	r0, r0, r5, lsr #1
   16838:	adds	r5, r5, r0
   1683c:	bcc	1685c <__assert_fail@plt+0x57bc>
   16840:	b	16890 <__assert_fail@plt+0x57f0>
   16844:	cmp	r5, #0
   16848:	bne	1685c <__assert_fail@plt+0x57bc>
   1684c:	mov	r0, #64	; 0x40
   16850:	cmp	r6, #64	; 0x40
   16854:	udiv	r5, r0, r6
   16858:	addhi	r5, r5, #1
   1685c:	mov	r0, r7
   16860:	mov	r1, r5
   16864:	mov	r2, r6
   16868:	bl	17c38 <__assert_fail@plt+0x6b98>
   1686c:	cmp	r0, #0
   16870:	bne	16888 <__assert_fail@plt+0x57e8>
   16874:	cmp	r7, #0
   16878:	beq	16890 <__assert_fail@plt+0x57f0>
   1687c:	cmp	r6, #0
   16880:	cmpne	r5, #0
   16884:	bne	16890 <__assert_fail@plt+0x57f0>
   16888:	str	r5, [r4]
   1688c:	pop	{r4, r5, r6, r7, fp, pc}
   16890:	bl	16bc4 <__assert_fail@plt+0x5b24>
   16894:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16898:	add	fp, sp, #24
   1689c:	mov	r8, r1
   168a0:	ldr	r1, [r1]
   168a4:	mov	r5, r0
   168a8:	add	r0, r1, r1, asr #1
   168ac:	cmp	r0, r1
   168b0:	mvnvs	r0, #-2147483648	; 0x80000000
   168b4:	cmp	r0, r3
   168b8:	mov	r7, r0
   168bc:	movgt	r7, r3
   168c0:	cmn	r3, #1
   168c4:	movle	r7, r0
   168c8:	ldr	r0, [fp, #8]
   168cc:	cmn	r0, #1
   168d0:	ble	168f8 <__assert_fail@plt+0x5858>
   168d4:	cmp	r0, #0
   168d8:	beq	1694c <__assert_fail@plt+0x58ac>
   168dc:	cmn	r7, #1
   168e0:	ble	16920 <__assert_fail@plt+0x5880>
   168e4:	mvn	r4, #-2147483648	; 0x80000000
   168e8:	udiv	r6, r4, r0
   168ec:	cmp	r6, r7
   168f0:	bge	1694c <__assert_fail@plt+0x58ac>
   168f4:	b	1695c <__assert_fail@plt+0x58bc>
   168f8:	cmn	r7, #1
   168fc:	ble	1693c <__assert_fail@plt+0x589c>
   16900:	cmn	r0, #1
   16904:	beq	1694c <__assert_fail@plt+0x58ac>
   16908:	mov	r6, #-2147483648	; 0x80000000
   1690c:	mvn	r4, #-2147483648	; 0x80000000
   16910:	sdiv	r6, r6, r0
   16914:	cmp	r6, r7
   16918:	bge	1694c <__assert_fail@plt+0x58ac>
   1691c:	b	1695c <__assert_fail@plt+0x58bc>
   16920:	beq	1694c <__assert_fail@plt+0x58ac>
   16924:	mov	r6, #-2147483648	; 0x80000000
   16928:	mvn	r4, #-2147483648	; 0x80000000
   1692c:	sdiv	r6, r6, r7
   16930:	cmp	r6, r0
   16934:	bge	1694c <__assert_fail@plt+0x58ac>
   16938:	b	1695c <__assert_fail@plt+0x58bc>
   1693c:	mvn	r4, #-2147483648	; 0x80000000
   16940:	sdiv	r6, r4, r0
   16944:	cmp	r7, r6
   16948:	blt	1695c <__assert_fail@plt+0x58bc>
   1694c:	mul	r6, r7, r0
   16950:	mov	r4, #64	; 0x40
   16954:	cmp	r6, #63	; 0x3f
   16958:	bgt	16964 <__assert_fail@plt+0x58c4>
   1695c:	sdiv	r7, r4, r0
   16960:	mul	r6, r7, r0
   16964:	cmp	r5, #0
   16968:	moveq	r4, #0
   1696c:	streq	r4, [r8]
   16970:	sub	r4, r7, r1
   16974:	cmp	r4, r2
   16978:	bge	16a24 <__assert_fail@plt+0x5984>
   1697c:	add	r7, r1, r2
   16980:	mov	r6, #0
   16984:	mov	r2, #0
   16988:	cmp	r7, r3
   1698c:	movwgt	r6, #1
   16990:	cmn	r3, #1
   16994:	movwgt	r2, #1
   16998:	cmp	r7, r1
   1699c:	bvs	16a58 <__assert_fail@plt+0x59b8>
   169a0:	ands	r1, r2, r6
   169a4:	bne	16a58 <__assert_fail@plt+0x59b8>
   169a8:	cmn	r0, #1
   169ac:	ble	169d4 <__assert_fail@plt+0x5934>
   169b0:	cmp	r0, #0
   169b4:	beq	16a20 <__assert_fail@plt+0x5980>
   169b8:	cmn	r7, #1
   169bc:	ble	169f8 <__assert_fail@plt+0x5958>
   169c0:	mvn	r1, #-2147483648	; 0x80000000
   169c4:	udiv	r1, r1, r0
   169c8:	cmp	r1, r7
   169cc:	bge	16a20 <__assert_fail@plt+0x5980>
   169d0:	b	16a58 <__assert_fail@plt+0x59b8>
   169d4:	cmn	r7, #1
   169d8:	ble	16a10 <__assert_fail@plt+0x5970>
   169dc:	cmn	r0, #1
   169e0:	beq	16a20 <__assert_fail@plt+0x5980>
   169e4:	mov	r1, #-2147483648	; 0x80000000
   169e8:	sdiv	r1, r1, r0
   169ec:	cmp	r1, r7
   169f0:	bge	16a20 <__assert_fail@plt+0x5980>
   169f4:	b	16a58 <__assert_fail@plt+0x59b8>
   169f8:	beq	16a20 <__assert_fail@plt+0x5980>
   169fc:	mov	r1, #-2147483648	; 0x80000000
   16a00:	sdiv	r1, r1, r7
   16a04:	cmp	r1, r0
   16a08:	bge	16a20 <__assert_fail@plt+0x5980>
   16a0c:	b	16a58 <__assert_fail@plt+0x59b8>
   16a10:	mvn	r1, #-2147483648	; 0x80000000
   16a14:	sdiv	r1, r1, r0
   16a18:	cmp	r7, r1
   16a1c:	blt	16a58 <__assert_fail@plt+0x59b8>
   16a20:	mul	r6, r7, r0
   16a24:	mov	r0, r5
   16a28:	mov	r1, r6
   16a2c:	bl	1792c <__assert_fail@plt+0x688c>
   16a30:	cmp	r6, #0
   16a34:	movwne	r6, #1
   16a38:	cmp	r0, #0
   16a3c:	bne	16a50 <__assert_fail@plt+0x59b0>
   16a40:	clz	r1, r5
   16a44:	lsr	r1, r1, #5
   16a48:	orrs	r1, r1, r6
   16a4c:	bne	16a58 <__assert_fail@plt+0x59b8>
   16a50:	str	r7, [r8]
   16a54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16a58:	bl	16bc4 <__assert_fail@plt+0x5b24>
   16a5c:	push	{fp, lr}
   16a60:	mov	fp, sp
   16a64:	mov	r1, #1
   16a68:	bl	178a8 <__assert_fail@plt+0x6808>
   16a6c:	cmp	r0, #0
   16a70:	popne	{fp, pc}
   16a74:	bl	16bc4 <__assert_fail@plt+0x5b24>
   16a78:	push	{fp, lr}
   16a7c:	mov	fp, sp
   16a80:	bl	178a8 <__assert_fail@plt+0x6808>
   16a84:	cmp	r0, #0
   16a88:	popne	{fp, pc}
   16a8c:	bl	16bc4 <__assert_fail@plt+0x5b24>
   16a90:	push	{fp, lr}
   16a94:	mov	fp, sp
   16a98:	mov	r1, #1
   16a9c:	bl	178a8 <__assert_fail@plt+0x6808>
   16aa0:	cmp	r0, #0
   16aa4:	popne	{fp, pc}
   16aa8:	bl	16bc4 <__assert_fail@plt+0x5b24>
   16aac:	push	{fp, lr}
   16ab0:	mov	fp, sp
   16ab4:	bl	178a8 <__assert_fail@plt+0x6808>
   16ab8:	cmp	r0, #0
   16abc:	popne	{fp, pc}
   16ac0:	bl	16bc4 <__assert_fail@plt+0x5b24>
   16ac4:	push	{r4, r5, r6, sl, fp, lr}
   16ac8:	add	fp, sp, #16
   16acc:	mov	r5, r0
   16ad0:	mov	r0, r1
   16ad4:	mov	r4, r1
   16ad8:	bl	178fc <__assert_fail@plt+0x685c>
   16adc:	cmp	r0, #0
   16ae0:	beq	16afc <__assert_fail@plt+0x5a5c>
   16ae4:	mov	r1, r5
   16ae8:	mov	r2, r4
   16aec:	mov	r6, r0
   16af0:	bl	10e9c <memcpy@plt>
   16af4:	mov	r0, r6
   16af8:	pop	{r4, r5, r6, sl, fp, pc}
   16afc:	bl	16bc4 <__assert_fail@plt+0x5b24>
   16b00:	push	{r4, r5, r6, sl, fp, lr}
   16b04:	add	fp, sp, #16
   16b08:	mov	r5, r0
   16b0c:	mov	r0, r1
   16b10:	mov	r4, r1
   16b14:	bl	178fc <__assert_fail@plt+0x685c>
   16b18:	cmp	r0, #0
   16b1c:	beq	16b38 <__assert_fail@plt+0x5a98>
   16b20:	mov	r1, r5
   16b24:	mov	r2, r4
   16b28:	mov	r6, r0
   16b2c:	bl	10e9c <memcpy@plt>
   16b30:	mov	r0, r6
   16b34:	pop	{r4, r5, r6, sl, fp, pc}
   16b38:	bl	16bc4 <__assert_fail@plt+0x5b24>
   16b3c:	push	{r4, r5, r6, sl, fp, lr}
   16b40:	add	fp, sp, #16
   16b44:	mov	r5, r0
   16b48:	add	r0, r1, #1
   16b4c:	mov	r4, r1
   16b50:	bl	178fc <__assert_fail@plt+0x685c>
   16b54:	cmp	r0, #0
   16b58:	beq	16b80 <__assert_fail@plt+0x5ae0>
   16b5c:	mov	r6, r0
   16b60:	mov	r0, #0
   16b64:	mov	r1, r5
   16b68:	mov	r2, r4
   16b6c:	strb	r0, [r6, r4]
   16b70:	mov	r0, r6
   16b74:	bl	10e9c <memcpy@plt>
   16b78:	mov	r0, r6
   16b7c:	pop	{r4, r5, r6, sl, fp, pc}
   16b80:	bl	16bc4 <__assert_fail@plt+0x5b24>
   16b84:	push	{r4, r5, r6, sl, fp, lr}
   16b88:	add	fp, sp, #16
   16b8c:	mov	r4, r0
   16b90:	bl	10fc8 <strlen@plt>
   16b94:	add	r5, r0, #1
   16b98:	mov	r0, r5
   16b9c:	bl	178fc <__assert_fail@plt+0x685c>
   16ba0:	cmp	r0, #0
   16ba4:	beq	16bc0 <__assert_fail@plt+0x5b20>
   16ba8:	mov	r1, r4
   16bac:	mov	r2, r5
   16bb0:	mov	r6, r0
   16bb4:	bl	10e9c <memcpy@plt>
   16bb8:	mov	r0, r6
   16bbc:	pop	{r4, r5, r6, sl, fp, pc}
   16bc0:	bl	16bc4 <__assert_fail@plt+0x5b24>
   16bc4:	push	{fp, lr}
   16bc8:	mov	fp, sp
   16bcc:	movw	r0, #41204	; 0xa0f4
   16bd0:	movw	r1, #39112	; 0x98c8
   16bd4:	mov	r2, #5
   16bd8:	movt	r0, #2
   16bdc:	movt	r1, #1
   16be0:	ldr	r4, [r0]
   16be4:	mov	r0, #0
   16be8:	bl	10ee4 <dcgettext@plt>
   16bec:	movw	r2, #38075	; 0x94bb
   16bf0:	mov	r3, r0
   16bf4:	mov	r0, r4
   16bf8:	mov	r1, #0
   16bfc:	movt	r2, #1
   16c00:	bl	10f50 <error@plt>
   16c04:	bl	11088 <abort@plt>
   16c08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c0c:	add	fp, sp, #28
   16c10:	sub	sp, sp, #44	; 0x2c
   16c14:	cmp	r2, #37	; 0x25
   16c18:	bcs	17888 <__assert_fail@plt+0x67e8>
   16c1c:	ldr	sl, [fp, #8]
   16c20:	mov	r6, r2
   16c24:	mov	r7, r1
   16c28:	mov	r4, r0
   16c2c:	str	r3, [sp, #36]	; 0x24
   16c30:	bl	10fe0 <__errno_location@plt>
   16c34:	mov	r5, r0
   16c38:	mov	r0, #0
   16c3c:	str	r0, [r5]
   16c40:	bl	10fb0 <__ctype_b_loc@plt>
   16c44:	ldr	r1, [r0]
   16c48:	mov	r2, r4
   16c4c:	ldrb	r0, [r2], #1
   16c50:	add	r3, r1, r0, lsl #1
   16c54:	ldrb	r3, [r3, #1]
   16c58:	tst	r3, #32
   16c5c:	bne	16c4c <__assert_fail@plt+0x5bac>
   16c60:	sub	r9, fp, #32
   16c64:	cmp	r7, #0
   16c68:	mov	r8, #4
   16c6c:	movne	r9, r7
   16c70:	cmp	r0, #45	; 0x2d
   16c74:	beq	1787c <__assert_fail@plt+0x67dc>
   16c78:	mov	r0, r4
   16c7c:	mov	r1, r9
   16c80:	mov	r2, r6
   16c84:	mov	r3, #0
   16c88:	bl	10ea8 <__strtoull_internal@plt>
   16c8c:	mov	r7, r1
   16c90:	ldr	r1, [r9]
   16c94:	cmp	r1, r4
   16c98:	beq	16cc4 <__assert_fail@plt+0x5c24>
   16c9c:	mov	r6, r0
   16ca0:	ldr	r0, [r5]
   16ca4:	cmp	r0, #0
   16ca8:	beq	16d00 <__assert_fail@plt+0x5c60>
   16cac:	cmp	r0, #34	; 0x22
   16cb0:	bne	1787c <__assert_fail@plt+0x67dc>
   16cb4:	mov	r8, #1
   16cb8:	cmp	sl, #0
   16cbc:	bne	16d0c <__assert_fail@plt+0x5c6c>
   16cc0:	b	17874 <__assert_fail@plt+0x67d4>
   16cc4:	cmp	sl, #0
   16cc8:	beq	1787c <__assert_fail@plt+0x67dc>
   16ccc:	mov	r5, r1
   16cd0:	ldrb	r1, [r4]
   16cd4:	cmp	r1, #0
   16cd8:	beq	1787c <__assert_fail@plt+0x67dc>
   16cdc:	mov	r0, sl
   16ce0:	bl	10fd4 <strchr@plt>
   16ce4:	cmp	r0, #0
   16ce8:	beq	1787c <__assert_fail@plt+0x67dc>
   16cec:	mov	r1, r5
   16cf0:	mov	r8, #0
   16cf4:	mov	r6, #1
   16cf8:	mov	r7, #0
   16cfc:	b	16d0c <__assert_fail@plt+0x5c6c>
   16d00:	mov	r8, r0
   16d04:	cmp	sl, #0
   16d08:	beq	17874 <__assert_fail@plt+0x67d4>
   16d0c:	ldrb	r4, [r1]
   16d10:	cmp	r4, #0
   16d14:	beq	17874 <__assert_fail@plt+0x67d4>
   16d18:	str	r1, [sp, #32]
   16d1c:	mov	r0, sl
   16d20:	mov	r1, r4
   16d24:	bl	10fd4 <strchr@plt>
   16d28:	cmp	r0, #0
   16d2c:	beq	16ff4 <__assert_fail@plt+0x5f54>
   16d30:	sub	r0, r4, #69	; 0x45
   16d34:	mov	r1, #1
   16d38:	mov	r3, #0
   16d3c:	mov	r5, #1024	; 0x400
   16d40:	cmp	r0, #47	; 0x2f
   16d44:	str	r1, [sp, #28]
   16d48:	bhi	16e4c <__assert_fail@plt+0x5dac>
   16d4c:	add	r1, pc, #0
   16d50:	ldr	pc, [r1, r0, lsl #2]
   16d54:	andeq	r6, r1, r4, lsl lr
   16d58:	andeq	r6, r1, ip, asr #28
   16d5c:	andeq	r6, r1, r4, lsl lr
   16d60:	andeq	r6, r1, ip, asr #28
   16d64:	andeq	r6, r1, ip, asr #28
   16d68:	andeq	r6, r1, ip, asr #28
   16d6c:	andeq	r6, r1, r4, lsl lr
   16d70:	andeq	r6, r1, ip, asr #28
   16d74:	andeq	r6, r1, r4, lsl lr
   16d78:	andeq	r6, r1, ip, asr #28
   16d7c:	andeq	r6, r1, ip, asr #28
   16d80:	andeq	r6, r1, r4, lsl lr
   16d84:	andeq	r6, r1, ip, asr #28
   16d88:	andeq	r6, r1, ip, asr #28
   16d8c:	andeq	r6, r1, ip, asr #28
   16d90:	andeq	r6, r1, r4, lsl lr
   16d94:	andeq	r6, r1, ip, asr #28
   16d98:	andeq	r6, r1, ip, asr #28
   16d9c:	andeq	r6, r1, ip, asr #28
   16da0:	andeq	r6, r1, ip, asr #28
   16da4:	andeq	r6, r1, r4, lsl lr
   16da8:	andeq	r6, r1, r4, lsl lr
   16dac:	andeq	r6, r1, ip, asr #28
   16db0:	andeq	r6, r1, ip, asr #28
   16db4:	andeq	r6, r1, ip, asr #28
   16db8:	andeq	r6, r1, ip, asr #28
   16dbc:	andeq	r6, r1, ip, asr #28
   16dc0:	andeq	r6, r1, ip, asr #28
   16dc4:	andeq	r6, r1, ip, asr #28
   16dc8:	andeq	r6, r1, ip, asr #28
   16dcc:	andeq	r6, r1, ip, asr #28
   16dd0:	andeq	r6, r1, ip, asr #28
   16dd4:	andeq	r6, r1, ip, asr #28
   16dd8:	andeq	r6, r1, ip, asr #28
   16ddc:	andeq	r6, r1, r4, lsl lr
   16de0:	andeq	r6, r1, ip, asr #28
   16de4:	andeq	r6, r1, ip, asr #28
   16de8:	andeq	r6, r1, ip, asr #28
   16dec:	andeq	r6, r1, r4, lsl lr
   16df0:	andeq	r6, r1, ip, asr #28
   16df4:	andeq	r6, r1, r4, lsl lr
   16df8:	andeq	r6, r1, ip, asr #28
   16dfc:	andeq	r6, r1, ip, asr #28
   16e00:	andeq	r6, r1, ip, asr #28
   16e04:	andeq	r6, r1, ip, asr #28
   16e08:	andeq	r6, r1, ip, asr #28
   16e0c:	andeq	r6, r1, ip, asr #28
   16e10:	andeq	r6, r1, r4, lsl lr
   16e14:	mov	r0, sl
   16e18:	mov	r1, #48	; 0x30
   16e1c:	bl	10fd4 <strchr@plt>
   16e20:	cmp	r0, #0
   16e24:	beq	16e48 <__assert_fail@plt+0x5da8>
   16e28:	ldr	r1, [sp, #32]
   16e2c:	ldrb	r0, [r1, #1]
   16e30:	cmp	r0, #66	; 0x42
   16e34:	cmpne	r0, #68	; 0x44
   16e38:	bne	17000 <__assert_fail@plt+0x5f60>
   16e3c:	mov	r5, #1000	; 0x3e8
   16e40:	mov	r0, #2
   16e44:	str	r0, [sp, #28]
   16e48:	mov	r3, #0
   16e4c:	sub	r0, r4, #66	; 0x42
   16e50:	cmp	r0, #53	; 0x35
   16e54:	bhi	16ff4 <__assert_fail@plt+0x5f54>
   16e58:	add	r1, pc, #0
   16e5c:	ldr	pc, [r1, r0, lsl #2]
   16e60:	andeq	r7, r1, ip, ror r3
   16e64:	strdeq	r6, [r1], -r4
   16e68:	strdeq	r6, [r1], -r4
   16e6c:	andeq	r7, r1, r4, lsr #7
   16e70:	strdeq	r6, [r1], -r4
   16e74:	andeq	r6, r1, r8, lsr pc
   16e78:	strdeq	r6, [r1], -r4
   16e7c:	strdeq	r6, [r1], -r4
   16e80:	strdeq	r6, [r1], -r4
   16e84:	andeq	r7, r1, r4, lsr #32
   16e88:	strdeq	r6, [r1], -r4
   16e8c:	andeq	r7, r1, ip, rrx
   16e90:	strdeq	r6, [r1], -r4
   16e94:	strdeq	r6, [r1], -r4
   16e98:	strdeq	r7, [r1], -ip
   16e9c:	strdeq	r6, [r1], -r4
   16ea0:	strdeq	r6, [r1], -r4
   16ea4:	strdeq	r6, [r1], -r4
   16ea8:	strdeq	r7, [r1], -r8
   16eac:	strdeq	r6, [r1], -r4
   16eb0:	strdeq	r6, [r1], -r4
   16eb4:	strdeq	r6, [r1], -r4
   16eb8:	strdeq	r6, [r1], -r4
   16ebc:	andeq	r7, r1, r4, lsr #12
   16ec0:	andeq	r7, r1, r0, ror #3
   16ec4:	strdeq	r6, [r1], -r4
   16ec8:	strdeq	r6, [r1], -r4
   16ecc:	strdeq	r6, [r1], -r4
   16ed0:	strdeq	r6, [r1], -r4
   16ed4:	strdeq	r6, [r1], -r4
   16ed8:	strdeq	r6, [r1], -r4
   16edc:	strdeq	r6, [r1], -r4
   16ee0:	strdeq	r7, [r1], -ip
   16ee4:	andeq	r7, r1, r4, asr r8
   16ee8:	strdeq	r6, [r1], -r4
   16eec:	strdeq	r6, [r1], -r4
   16ef0:	strdeq	r6, [r1], -r4
   16ef4:	andeq	r6, r1, r8, lsr pc
   16ef8:	strdeq	r6, [r1], -r4
   16efc:	strdeq	r6, [r1], -r4
   16f00:	strdeq	r6, [r1], -r4
   16f04:	andeq	r7, r1, r4, lsr #32
   16f08:	strdeq	r6, [r1], -r4
   16f0c:	andeq	r7, r1, ip, rrx
   16f10:	strdeq	r6, [r1], -r4
   16f14:	strdeq	r6, [r1], -r4
   16f18:	strdeq	r6, [r1], -r4
   16f1c:	strdeq	r6, [r1], -r4
   16f20:	strdeq	r6, [r1], -r4
   16f24:	strdeq	r6, [r1], -r4
   16f28:	strdeq	r7, [r1], -r8
   16f2c:	strdeq	r6, [r1], -r4
   16f30:	strdeq	r6, [r1], -r4
   16f34:	andeq	r7, r1, r0, lsr r8
   16f38:	mvn	r0, #0
   16f3c:	mvn	r1, #0
   16f40:	mov	r2, r5
   16f44:	mov	sl, r3
   16f48:	bl	17d7c <__assert_fail@plt+0x6cdc>
   16f4c:	subs	r3, r0, r6
   16f50:	mov	lr, #0
   16f54:	umull	r4, r2, r6, r5
   16f58:	str	r1, [sp, #20]
   16f5c:	sbcs	r3, r1, r7
   16f60:	mla	ip, r6, sl, r2
   16f64:	mov	r2, r1
   16f68:	movwcc	lr, #1
   16f6c:	mla	r7, r7, r5, ip
   16f70:	mov	r2, #0
   16f74:	cmp	lr, #0
   16f78:	mvnne	r4, #0
   16f7c:	mvnne	r7, #0
   16f80:	subs	r6, r0, r4
   16f84:	sbcs	r6, r1, r7
   16f88:	movwcc	r2, #1
   16f8c:	umull	r3, r6, r4, r5
   16f90:	cmp	r2, #0
   16f94:	str	r6, [sp, #16]
   16f98:	mvnne	r3, #0
   16f9c:	cmp	r2, #0
   16fa0:	umull	r6, ip, r3, r5
   16fa4:	mla	r1, r3, sl, ip
   16fa8:	ldr	ip, [sp, #16]
   16fac:	str	r1, [sp, #12]
   16fb0:	mla	r4, r4, sl, ip
   16fb4:	mla	r4, r7, r5, r4
   16fb8:	ldr	r7, [sp, #12]
   16fbc:	mvnne	r4, #0
   16fc0:	subs	r0, r0, r3
   16fc4:	ldr	r0, [sp, #20]
   16fc8:	mla	r7, r4, r5, r7
   16fcc:	sbcs	r0, r0, r4
   16fd0:	mov	r0, #0
   16fd4:	movwcc	r0, #1
   16fd8:	cmp	r0, #0
   16fdc:	mov	r1, r0
   16fe0:	orr	r0, lr, r2
   16fe4:	mvnne	r7, #0
   16fe8:	mvnne	r6, #0
   16fec:	orr	r3, r0, r1
   16ff0:	b	17854 <__assert_fail@plt+0x67b4>
   16ff4:	ldr	r0, [sp, #36]	; 0x24
   16ff8:	orr	r8, r8, #2
   16ffc:	b	17878 <__assert_fail@plt+0x67d8>
   17000:	cmp	r0, #105	; 0x69
   17004:	mov	r3, #0
   17008:	bne	16e4c <__assert_fail@plt+0x5dac>
   1700c:	ldrb	r0, [r1, #2]
   17010:	mov	r1, #1
   17014:	cmp	r0, #66	; 0x42
   17018:	movweq	r1, #3
   1701c:	str	r1, [sp, #28]
   17020:	b	16e4c <__assert_fail@plt+0x5dac>
   17024:	mvn	r0, #0
   17028:	mvn	r1, #0
   1702c:	mov	r2, r5
   17030:	mov	r4, r3
   17034:	bl	17d7c <__assert_fail@plt+0x6cdc>
   17038:	subs	r0, r0, r6
   1703c:	mov	r2, #0
   17040:	sbcs	r0, r1, r7
   17044:	movwcc	r2, #1
   17048:	umull	r0, r1, r6, r5
   1704c:	mla	r1, r6, r4, r1
   17050:	cmp	r2, #0
   17054:	mov	r3, r2
   17058:	mla	r7, r7, r5, r1
   1705c:	mvnne	r0, #0
   17060:	mvnne	r7, #0
   17064:	mov	r6, r0
   17068:	b	17854 <__assert_fail@plt+0x67b4>
   1706c:	mvn	r0, #0
   17070:	mvn	r1, #0
   17074:	mov	r2, r5
   17078:	str	r3, [sp, #24]
   1707c:	bl	17d7c <__assert_fail@plt+0x6cdc>
   17080:	subs	r3, r0, r6
   17084:	mov	ip, r0
   17088:	umull	r4, r0, r6, r5
   1708c:	mov	sl, #0
   17090:	sbcs	r3, r1, r7
   17094:	str	r0, [sp, #20]
   17098:	ldr	r0, [sp, #24]
   1709c:	mov	r3, #0
   170a0:	movwcc	r3, #1
   170a4:	cmp	r3, #0
   170a8:	mvnne	r4, #0
   170ac:	cmp	r3, #0
   170b0:	umull	lr, r2, r4, r5
   170b4:	mla	r2, r4, r0, r2
   170b8:	str	r2, [sp, #16]
   170bc:	ldr	r2, [sp, #20]
   170c0:	mla	r6, r6, r0, r2
   170c4:	ldr	r0, [sp, #16]
   170c8:	mla	r6, r7, r5, r6
   170cc:	mvnne	r6, #0
   170d0:	mla	r7, r6, r5, r0
   170d4:	subs	r0, ip, r4
   170d8:	sbcs	r0, r1, r6
   170dc:	movwcc	sl, #1
   170e0:	cmp	sl, #0
   170e4:	orr	r3, r3, sl
   170e8:	mvnne	lr, #0
   170ec:	mvnne	r7, #0
   170f0:	mov	r6, lr
   170f4:	b	17854 <__assert_fail@plt+0x67b4>
   170f8:	mvn	r0, #0
   170fc:	mvn	r1, #0
   17100:	mov	r2, r5
   17104:	mov	sl, r3
   17108:	bl	17d7c <__assert_fail@plt+0x6cdc>
   1710c:	subs	r3, r0, r6
   17110:	mov	ip, r1
   17114:	umull	r2, lr, r6, r5
   17118:	str	r0, [sp, #20]
   1711c:	sbcs	r3, r1, r7
   17120:	mov	r1, #0
   17124:	mla	r6, r6, sl, lr
   17128:	mov	lr, #0
   1712c:	str	ip, [sp, #16]
   17130:	movwcc	r1, #1
   17134:	mla	r7, r7, r5, r6
   17138:	cmp	r1, #0
   1713c:	mvnne	r2, #0
   17140:	cmp	r1, #0
   17144:	umull	r3, r4, r2, r5
   17148:	mvnne	r7, #0
   1714c:	mla	r4, r2, sl, r4
   17150:	subs	r2, r0, r2
   17154:	sbcs	r2, ip, r7
   17158:	mla	r4, r7, r5, r4
   1715c:	movwcc	lr, #1
   17160:	mov	r2, #0
   17164:	cmp	lr, #0
   17168:	mvnne	r3, #0
   1716c:	mvnne	r4, #0
   17170:	subs	r7, r0, r3
   17174:	mov	r0, r5
   17178:	sbcs	r7, ip, r4
   1717c:	movwcc	r2, #1
   17180:	umull	r5, r7, r3, r5
   17184:	cmp	r2, #0
   17188:	mla	r3, r3, sl, r7
   1718c:	mvnne	r5, #0
   17190:	mla	r3, r4, r0, r3
   17194:	cmp	r2, #0
   17198:	umull	r6, ip, r5, r0
   1719c:	mvnne	r3, #0
   171a0:	mla	ip, r5, sl, ip
   171a4:	mla	r7, r3, r0, ip
   171a8:	ldr	r0, [sp, #20]
   171ac:	subs	r0, r0, r5
   171b0:	ldr	r0, [sp, #16]
   171b4:	sbcs	r0, r0, r3
   171b8:	mov	r0, #0
   171bc:	movwcc	r0, #1
   171c0:	cmp	r0, #0
   171c4:	mov	r3, r0
   171c8:	orr	r0, r1, lr
   171cc:	orr	r0, r0, r2
   171d0:	mvnne	r7, #0
   171d4:	mvnne	r6, #0
   171d8:	orr	r3, r0, r3
   171dc:	b	17854 <__assert_fail@plt+0x67b4>
   171e0:	mvn	r0, #0
   171e4:	mvn	r1, #0
   171e8:	mov	r2, r5
   171ec:	mov	r4, r3
   171f0:	str	r3, [sp, #24]
   171f4:	bl	17d7c <__assert_fail@plt+0x6cdc>
   171f8:	umull	r3, r2, r6, r5
   171fc:	mla	r2, r6, r4, r2
   17200:	subs	r6, r0, r6
   17204:	sbcs	r6, r1, r7
   17208:	mla	ip, r7, r5, r2
   1720c:	ldr	r2, [sp, #24]
   17210:	mov	r6, #0
   17214:	movwcc	r6, #1
   17218:	cmp	r6, #0
   1721c:	str	r6, [sp, #20]
   17220:	mov	r6, #0
   17224:	mvnne	r3, #0
   17228:	mvnne	ip, #0
   1722c:	subs	r4, r0, r3
   17230:	umull	r7, lr, r3, r5
   17234:	sbcs	r4, r1, ip
   17238:	mla	r3, r3, r2, lr
   1723c:	movwcc	r6, #1
   17240:	cmp	r6, #0
   17244:	str	r6, [sp, #16]
   17248:	mvnne	r7, #0
   1724c:	cmp	r6, #0
   17250:	umull	sl, r4, r7, r5
   17254:	mla	r4, r7, r2, r4
   17258:	mla	r2, ip, r5, r3
   1725c:	mov	ip, #0
   17260:	mvnne	r2, #0
   17264:	subs	r3, r0, r7
   17268:	mla	r6, r2, r5, r4
   1726c:	mov	r4, r0
   17270:	sbcs	r2, r1, r2
   17274:	mov	r0, #0
   17278:	movwcc	r0, #1
   1727c:	mov	r3, r4
   17280:	cmp	r0, #0
   17284:	str	r0, [sp, #12]
   17288:	mov	r0, r1
   1728c:	str	r3, [sp, #4]
   17290:	mvnne	sl, #0
   17294:	mvnne	r6, #0
   17298:	str	r0, [sp, #8]
   1729c:	subs	r2, r4, sl
   172a0:	ldr	r4, [sp, #24]
   172a4:	sbcs	r2, r1, r6
   172a8:	movwcc	ip, #1
   172ac:	umull	r7, r2, sl, r5
   172b0:	cmp	ip, #0
   172b4:	mla	r2, sl, r4, r2
   172b8:	mvnne	r7, #0
   172bc:	cmp	ip, #0
   172c0:	mov	sl, #0
   172c4:	umull	r1, lr, r7, r5
   172c8:	mla	r2, r6, r5, r2
   172cc:	mvnne	r2, #0
   172d0:	mla	lr, r7, r4, lr
   172d4:	subs	r6, r3, r7
   172d8:	mla	lr, r2, r5, lr
   172dc:	sbcs	r2, r0, r2
   172e0:	movwcc	sl, #1
   172e4:	mov	r2, #0
   172e8:	cmp	sl, #0
   172ec:	mvnne	r1, #0
   172f0:	mvnne	lr, #0
   172f4:	subs	r6, r3, r1
   172f8:	ldr	r3, [sp, #24]
   172fc:	sbcs	r6, r0, lr
   17300:	umull	r0, r7, r1, r5
   17304:	movwcc	r2, #1
   17308:	cmp	r2, #0
   1730c:	mvnne	r0, #0
   17310:	mla	r1, r1, r3, r7
   17314:	cmp	r2, #0
   17318:	umull	r6, r4, r0, r5
   1731c:	mla	r1, lr, r5, r1
   17320:	mla	r4, r0, r3, r4
   17324:	ldr	r3, [sp, #4]
   17328:	mvnne	r1, #0
   1732c:	mla	r7, r1, r5, r4
   17330:	ldr	r5, [sp, #16]
   17334:	subs	r0, r3, r0
   17338:	ldr	r0, [sp, #8]
   1733c:	sbcs	r0, r0, r1
   17340:	mov	r0, #0
   17344:	movwcc	r0, #1
   17348:	cmp	r0, #0
   1734c:	mov	r1, r0
   17350:	ldr	r0, [sp, #20]
   17354:	mvnne	r7, #0
   17358:	mvnne	r6, #0
   1735c:	orr	r0, r0, r5
   17360:	ldr	r5, [sp, #12]
   17364:	orr	r0, r0, r5
   17368:	orr	r0, r0, ip
   1736c:	orr	r0, r0, sl
   17370:	orr	r0, r0, r2
   17374:	orr	r0, r0, r1
   17378:	b	177f4 <__assert_fail@plt+0x6754>
   1737c:	mov	r1, #0
   17380:	lsl	r2, r7, #10
   17384:	lsl	r0, r6, #10
   17388:	lsr	r3, r7, #22
   1738c:	cmp	r1, r7, lsr #22
   17390:	orr	r2, r2, r6, lsr #22
   17394:	mvnne	r0, #0
   17398:	movwne	r3, #1
   1739c:	cmp	r1, r7, lsr #22
   173a0:	b	17820 <__assert_fail@plt+0x6780>
   173a4:	mvn	r0, #0
   173a8:	mvn	r1, #0
   173ac:	mov	r2, r5
   173b0:	mov	sl, r3
   173b4:	bl	17d7c <__assert_fail@plt+0x6cdc>
   173b8:	subs	r2, r0, r6
   173bc:	mov	ip, r0
   173c0:	mov	r0, #0
   173c4:	sbcs	r2, r1, r7
   173c8:	movwcc	r0, #1
   173cc:	umull	r4, r2, r6, r5
   173d0:	cmp	r0, #0
   173d4:	mla	r2, r6, sl, r2
   173d8:	str	r0, [sp, #20]
   173dc:	mvnne	r4, #0
   173e0:	cmp	r0, #0
   173e4:	mla	r2, r7, r5, r2
   173e8:	mov	r0, #0
   173ec:	umull	lr, r3, r4, r5
   173f0:	mvnne	r2, #0
   173f4:	mla	r3, r4, sl, r3
   173f8:	mla	r6, r2, r5, r3
   173fc:	subs	r3, ip, r4
   17400:	sbcs	r2, r1, r2
   17404:	mov	r3, r1
   17408:	movwcc	r0, #1
   1740c:	str	r3, [sp, #8]
   17410:	cmp	r0, #0
   17414:	str	r0, [sp, #16]
   17418:	mov	r0, ip
   1741c:	mvnne	lr, #0
   17420:	mvnne	r6, #0
   17424:	str	r0, [sp, #12]
   17428:	subs	r2, ip, lr
   1742c:	umull	r7, r4, lr, r5
   17430:	sbcs	r2, r1, r6
   17434:	mla	r4, lr, sl, r4
   17438:	mov	r2, #0
   1743c:	mla	r6, r6, r5, r4
   17440:	mov	r4, #0
   17444:	movwcc	r2, #1
   17448:	cmp	r2, #0
   1744c:	mvnne	r7, #0
   17450:	cmp	r2, #0
   17454:	umull	r1, ip, r7, r5
   17458:	mvnne	r6, #0
   1745c:	mla	ip, r7, sl, ip
   17460:	subs	r7, r0, r7
   17464:	mla	lr, r6, r5, ip
   17468:	sbcs	r7, r3, r6
   1746c:	mov	ip, #0
   17470:	movwcc	ip, #1
   17474:	cmp	ip, #0
   17478:	mvnne	r1, #0
   1747c:	mvnne	lr, #0
   17480:	subs	r7, r0, r1
   17484:	sbcs	r7, r3, lr
   17488:	movwcc	r4, #1
   1748c:	umull	r0, r7, r1, r5
   17490:	cmp	r4, #0
   17494:	mla	r1, r1, sl, r7
   17498:	mvnne	r0, #0
   1749c:	mla	r1, lr, r5, r1
   174a0:	cmp	r4, #0
   174a4:	umull	r6, r3, r0, r5
   174a8:	mvnne	r1, #0
   174ac:	mla	r3, r0, sl, r3
   174b0:	mla	r7, r1, r5, r3
   174b4:	ldr	r3, [sp, #12]
   174b8:	subs	r0, r3, r0
   174bc:	ldr	r3, [sp, #16]
   174c0:	ldr	r0, [sp, #8]
   174c4:	sbcs	r0, r0, r1
   174c8:	mov	r0, #0
   174cc:	movwcc	r0, #1
   174d0:	cmp	r0, #0
   174d4:	mov	r1, r0
   174d8:	ldr	r0, [sp, #20]
   174dc:	mvnne	r7, #0
   174e0:	mvnne	r6, #0
   174e4:	orr	r0, r0, r3
   174e8:	orr	r0, r0, r2
   174ec:	orr	r0, r0, ip
   174f0:	orr	r0, r0, r4
   174f4:	orr	r3, r0, r1
   174f8:	b	17854 <__assert_fail@plt+0x67b4>
   174fc:	mvn	r0, #0
   17500:	mvn	r1, #0
   17504:	mov	r2, r5
   17508:	mov	sl, r3
   1750c:	bl	17d7c <__assert_fail@plt+0x6cdc>
   17510:	umull	r3, r2, r6, r5
   17514:	mov	lr, r1
   17518:	mov	r1, r0
   1751c:	mla	r2, r6, sl, r2
   17520:	subs	r6, r0, r6
   17524:	mov	r0, #0
   17528:	sbcs	r6, lr, r7
   1752c:	mla	r2, r7, r5, r2
   17530:	movwcc	r0, #1
   17534:	cmp	r0, #0
   17538:	str	r0, [sp, #20]
   1753c:	mov	r0, r1
   17540:	mvnne	r3, #0
   17544:	mvnne	r2, #0
   17548:	str	r0, [sp, #16]
   1754c:	subs	r4, r1, r3
   17550:	umull	r7, ip, r3, r5
   17554:	sbcs	r4, lr, r2
   17558:	mla	r3, r3, sl, ip
   1755c:	mov	ip, #0
   17560:	mov	r4, #0
   17564:	mla	r2, r2, r5, r3
   17568:	movwcc	r4, #1
   1756c:	cmp	r4, #0
   17570:	mvnne	r7, #0
   17574:	cmp	r4, #0
   17578:	umull	r1, r6, r7, r5
   1757c:	mvnne	r2, #0
   17580:	mla	r6, r7, sl, r6
   17584:	mla	r3, r2, r5, r6
   17588:	subs	r6, r0, r7
   1758c:	sbcs	r2, lr, r2
   17590:	movwcc	ip, #1
   17594:	mov	r2, #0
   17598:	cmp	ip, #0
   1759c:	mvnne	r1, #0
   175a0:	mvnne	r3, #0
   175a4:	subs	r6, r0, r1
   175a8:	sbcs	r6, lr, r3
   175ac:	movwcc	r2, #1
   175b0:	umull	r0, r6, r1, r5
   175b4:	cmp	r2, #0
   175b8:	str	r6, [sp, #12]
   175bc:	mvnne	r0, #0
   175c0:	cmp	r2, #0
   175c4:	umull	r6, r7, r0, r5
   175c8:	mla	r7, r0, sl, r7
   175cc:	str	r7, [sp, #8]
   175d0:	ldr	r7, [sp, #12]
   175d4:	mla	r1, r1, sl, r7
   175d8:	mla	r1, r3, r5, r1
   175dc:	ldr	r3, [sp, #8]
   175e0:	mvnne	r1, #0
   175e4:	mla	r7, r1, r5, r3
   175e8:	ldr	r3, [sp, #16]
   175ec:	subs	r0, r3, r0
   175f0:	sbcs	r0, lr, r1
   175f4:	mov	r0, #0
   175f8:	movwcc	r0, #1
   175fc:	cmp	r0, #0
   17600:	mov	r1, r0
   17604:	ldr	r0, [sp, #20]
   17608:	mvnne	r7, #0
   1760c:	mvnne	r6, #0
   17610:	orr	r0, r0, r4
   17614:	orr	r0, r0, ip
   17618:	orr	r0, r0, r2
   1761c:	orr	r3, r0, r1
   17620:	b	17854 <__assert_fail@plt+0x67b4>
   17624:	mvn	r0, #0
   17628:	mvn	r1, #0
   1762c:	mov	r2, r5
   17630:	mov	sl, r3
   17634:	bl	17d7c <__assert_fail@plt+0x6cdc>
   17638:	mov	lr, r0
   1763c:	subs	r0, r0, r6
   17640:	mov	r2, #0
   17644:	mov	ip, r1
   17648:	str	sl, [sp, #24]
   1764c:	sbcs	r0, r1, r7
   17650:	umull	r3, r1, r6, r5
   17654:	str	lr, [sp, #4]
   17658:	movwcc	r2, #1
   1765c:	mla	r6, r6, sl, r1
   17660:	mov	r1, #0
   17664:	cmp	r2, #0
   17668:	mla	r7, r7, r5, r6
   1766c:	str	r2, [sp, #20]
   17670:	mvnne	r3, #0
   17674:	cmp	r2, #0
   17678:	mov	r2, #0
   1767c:	umull	r0, r4, r3, r5
   17680:	mvnne	r7, #0
   17684:	mla	r4, r3, sl, r4
   17688:	subs	r3, lr, r3
   1768c:	sbcs	r3, ip, r7
   17690:	mla	r4, r7, r5, r4
   17694:	movwcc	r1, #1
   17698:	cmp	r1, #0
   1769c:	str	r1, [sp, #16]
   176a0:	mvnne	r0, #0
   176a4:	mvnne	r4, #0
   176a8:	subs	r3, lr, r0
   176ac:	sbcs	r3, ip, r4
   176b0:	movwcc	r2, #1
   176b4:	umull	r6, r3, r0, r5
   176b8:	cmp	r2, #0
   176bc:	mla	r0, r0, sl, r3
   176c0:	str	r2, [sp, #12]
   176c4:	mvnne	r6, #0
   176c8:	mla	r0, r4, r5, r0
   176cc:	cmp	r2, #0
   176d0:	ldr	r4, [sp, #24]
   176d4:	umull	r1, r7, r6, r5
   176d8:	mvnne	r0, #0
   176dc:	subs	r3, lr, r6
   176e0:	mla	r7, r6, sl, r7
   176e4:	mov	r3, ip
   176e8:	mla	r7, r0, r5, r7
   176ec:	sbcs	r0, ip, r0
   176f0:	str	r3, [sp]
   176f4:	mov	r0, #0
   176f8:	movwcc	r0, #1
   176fc:	cmp	r0, #0
   17700:	str	r0, [sp, #8]
   17704:	mvnne	r1, #0
   17708:	mvnne	r7, #0
   1770c:	subs	r0, lr, r1
   17710:	sbcs	r0, ip, r7
   17714:	mov	ip, #0
   17718:	movwcc	ip, #1
   1771c:	umull	r6, r0, r1, r5
   17720:	cmp	ip, #0
   17724:	mla	r1, r1, r4, r0
   17728:	mov	r0, lr
   1772c:	mvnne	r6, #0
   17730:	mla	r1, r7, r5, r1
   17734:	cmp	ip, #0
   17738:	umull	r2, sl, r6, r5
   1773c:	mvnne	r1, #0
   17740:	mla	sl, r6, r4, sl
   17744:	subs	r6, lr, r6
   17748:	mov	lr, #0
   1774c:	mla	r7, r1, r5, sl
   17750:	sbcs	r1, r3, r1
   17754:	movwcc	lr, #1
   17758:	ldr	r1, [sp, #24]
   1775c:	cmp	lr, #0
   17760:	mvnne	r2, #0
   17764:	mvnne	r7, #0
   17768:	subs	r6, r0, r2
   1776c:	umull	r0, sl, r2, r5
   17770:	sbcs	r6, r3, r7
   17774:	mov	r3, #0
   17778:	mla	r2, r2, r1, sl
   1777c:	movwcc	r3, #1
   17780:	mla	r2, r7, r5, r2
   17784:	cmp	r3, #0
   17788:	mvnne	r0, #0
   1778c:	cmp	r3, #0
   17790:	umull	r6, r4, r0, r5
   17794:	mvnne	r2, #0
   17798:	mla	r4, r0, r1, r4
   1779c:	ldr	r1, [sp, #4]
   177a0:	mla	r7, r2, r5, r4
   177a4:	ldr	r5, [sp, #16]
   177a8:	subs	r0, r1, r0
   177ac:	ldr	r0, [sp]
   177b0:	sbcs	r0, r0, r2
   177b4:	mov	r0, #0
   177b8:	movwcc	r0, #1
   177bc:	cmp	r0, #0
   177c0:	mov	r2, r0
   177c4:	ldr	r0, [sp, #20]
   177c8:	mvnne	r7, #0
   177cc:	mvnne	r6, #0
   177d0:	orr	r0, r0, r5
   177d4:	ldr	r5, [sp, #12]
   177d8:	orr	r0, r0, r5
   177dc:	ldr	r5, [sp, #8]
   177e0:	orr	r0, r0, r5
   177e4:	orr	r0, r0, ip
   177e8:	orr	r0, r0, lr
   177ec:	orr	r0, r0, r3
   177f0:	orr	r0, r0, r2
   177f4:	and	r3, r0, #1
   177f8:	b	17854 <__assert_fail@plt+0x67b4>
   177fc:	mov	r1, #0
   17800:	lsl	r2, r7, #9
   17804:	lsl	r0, r6, #9
   17808:	lsr	r3, r7, #23
   1780c:	cmp	r1, r7, lsr #23
   17810:	orr	r2, r2, r6, lsr #23
   17814:	mvnne	r0, #0
   17818:	movwne	r3, #1
   1781c:	cmp	r1, r7, lsr #23
   17820:	mvnne	r2, #0
   17824:	mov	r6, r0
   17828:	mov	r7, r2
   1782c:	b	17854 <__assert_fail@plt+0x67b4>
   17830:	lsl	r1, r7, #1
   17834:	lsl	r0, r6, #1
   17838:	cmp	r7, #0
   1783c:	lsr	r3, r7, #31
   17840:	orr	r1, r1, r6, lsr #31
   17844:	mvnlt	r0, #0
   17848:	mvnlt	r1, #0
   1784c:	mov	r6, r0
   17850:	mov	r7, r1
   17854:	ldr	r1, [sp, #32]
   17858:	ldr	r2, [sp, #28]
   1785c:	orr	r8, r3, r8
   17860:	add	r0, r1, r2
   17864:	str	r0, [r9]
   17868:	ldrb	r0, [r1, r2]
   1786c:	cmp	r0, #0
   17870:	orrne	r8, r8, #2
   17874:	ldr	r0, [sp, #36]	; 0x24
   17878:	strd	r6, [r0]
   1787c:	mov	r0, r8
   17880:	sub	sp, fp, #28
   17884:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17888:	movw	r0, #39129	; 0x98d9
   1788c:	movw	r1, #39167	; 0x98ff
   17890:	movw	r3, #39183	; 0x990f
   17894:	mov	r2, #85	; 0x55
   17898:	movt	r0, #1
   1789c:	movt	r1, #1
   178a0:	movt	r3, #1
   178a4:	bl	110a0 <__assert_fail@plt>
   178a8:	clz	r2, r1
   178ac:	clz	r3, r0
   178b0:	lsr	r2, r2, #5
   178b4:	lsr	r3, r3, #5
   178b8:	orrs	r2, r3, r2
   178bc:	movwne	r1, #1
   178c0:	movwne	r0, #1
   178c4:	cmp	r1, #0
   178c8:	beq	178f8 <__assert_fail@plt+0x6858>
   178cc:	mvn	r2, #-2147483648	; 0x80000000
   178d0:	udiv	r2, r2, r1
   178d4:	cmp	r2, r0
   178d8:	bcs	178f8 <__assert_fail@plt+0x6858>
   178dc:	push	{fp, lr}
   178e0:	mov	fp, sp
   178e4:	bl	10fe0 <__errno_location@plt>
   178e8:	mov	r1, #12
   178ec:	str	r1, [r0]
   178f0:	mov	r0, #0
   178f4:	pop	{fp, pc}
   178f8:	b	10e30 <calloc@plt>
   178fc:	cmp	r0, #0
   17900:	movweq	r0, #1
   17904:	cmn	r0, #1
   17908:	ble	17910 <__assert_fail@plt+0x6870>
   1790c:	b	10f5c <malloc@plt>
   17910:	push	{fp, lr}
   17914:	mov	fp, sp
   17918:	bl	10fe0 <__errno_location@plt>
   1791c:	mov	r1, #12
   17920:	str	r1, [r0]
   17924:	mov	r0, #0
   17928:	pop	{fp, pc}
   1792c:	push	{fp, lr}
   17930:	mov	fp, sp
   17934:	cmp	r0, #0
   17938:	beq	17954 <__assert_fail@plt+0x68b4>
   1793c:	cmp	r1, #0
   17940:	beq	17960 <__assert_fail@plt+0x68c0>
   17944:	cmn	r1, #1
   17948:	ble	1796c <__assert_fail@plt+0x68cc>
   1794c:	pop	{fp, lr}
   17950:	b	10ef0 <realloc@plt>
   17954:	mov	r0, r1
   17958:	pop	{fp, lr}
   1795c:	b	178fc <__assert_fail@plt+0x685c>
   17960:	bl	141b4 <__assert_fail@plt+0x3114>
   17964:	mov	r0, #0
   17968:	pop	{fp, pc}
   1796c:	bl	10fe0 <__errno_location@plt>
   17970:	mov	r1, #12
   17974:	str	r1, [r0]
   17978:	mov	r0, #0
   1797c:	pop	{fp, pc}
   17980:	push	{r4, r5, r6, sl, fp, lr}
   17984:	add	fp, sp, #16
   17988:	mov	r4, r0
   1798c:	bl	10f38 <__fpending@plt>
   17990:	ldr	r6, [r4]
   17994:	mov	r5, r0
   17998:	mov	r0, r4
   1799c:	bl	17a04 <__assert_fail@plt+0x6964>
   179a0:	tst	r6, #32
   179a4:	bne	179dc <__assert_fail@plt+0x693c>
   179a8:	cmp	r0, #0
   179ac:	mov	r4, r0
   179b0:	mvnne	r4, #0
   179b4:	cmp	r5, #0
   179b8:	bne	179e8 <__assert_fail@plt+0x6948>
   179bc:	cmp	r0, #0
   179c0:	beq	179e8 <__assert_fail@plt+0x6948>
   179c4:	bl	10fe0 <__errno_location@plt>
   179c8:	ldr	r0, [r0]
   179cc:	subs	r4, r0, #9
   179d0:	mvnne	r4, #0
   179d4:	mov	r0, r4
   179d8:	pop	{r4, r5, r6, sl, fp, pc}
   179dc:	mvn	r4, #0
   179e0:	cmp	r0, #0
   179e4:	beq	179f0 <__assert_fail@plt+0x6950>
   179e8:	mov	r0, r4
   179ec:	pop	{r4, r5, r6, sl, fp, pc}
   179f0:	bl	10fe0 <__errno_location@plt>
   179f4:	mov	r1, #0
   179f8:	str	r1, [r0]
   179fc:	mov	r0, r4
   17a00:	pop	{r4, r5, r6, sl, fp, pc}
   17a04:	push	{r4, r5, r6, sl, fp, lr}
   17a08:	add	fp, sp, #16
   17a0c:	sub	sp, sp, #8
   17a10:	mov	r4, r0
   17a14:	bl	1101c <fileno@plt>
   17a18:	cmn	r0, #1
   17a1c:	ble	17a90 <__assert_fail@plt+0x69f0>
   17a20:	mov	r0, r4
   17a24:	bl	10f74 <__freading@plt>
   17a28:	cmp	r0, #0
   17a2c:	beq	17a58 <__assert_fail@plt+0x69b8>
   17a30:	mov	r0, r4
   17a34:	bl	1101c <fileno@plt>
   17a38:	mov	r1, #1
   17a3c:	mov	r2, #0
   17a40:	mov	r3, #0
   17a44:	str	r1, [sp]
   17a48:	bl	10f20 <lseek64@plt>
   17a4c:	and	r0, r0, r1
   17a50:	cmn	r0, #1
   17a54:	beq	17a90 <__assert_fail@plt+0x69f0>
   17a58:	mov	r0, r4
   17a5c:	bl	17aa0 <__assert_fail@plt+0x6a00>
   17a60:	cmp	r0, #0
   17a64:	beq	17a90 <__assert_fail@plt+0x69f0>
   17a68:	bl	10fe0 <__errno_location@plt>
   17a6c:	ldr	r6, [r0]
   17a70:	mov	r5, r0
   17a74:	mov	r0, r4
   17a78:	bl	11034 <fclose@plt>
   17a7c:	cmp	r6, #0
   17a80:	strne	r6, [r5]
   17a84:	mvnne	r0, #0
   17a88:	sub	sp, fp, #16
   17a8c:	pop	{r4, r5, r6, sl, fp, pc}
   17a90:	mov	r0, r4
   17a94:	sub	sp, fp, #16
   17a98:	pop	{r4, r5, r6, sl, fp, lr}
   17a9c:	b	11034 <fclose@plt>
   17aa0:	push	{r4, sl, fp, lr}
   17aa4:	add	fp, sp, #8
   17aa8:	sub	sp, sp, #8
   17aac:	mov	r4, r0
   17ab0:	cmp	r0, #0
   17ab4:	beq	17ad0 <__assert_fail@plt+0x6a30>
   17ab8:	mov	r0, r4
   17abc:	bl	10f74 <__freading@plt>
   17ac0:	cmp	r0, #0
   17ac4:	ldrbne	r0, [r4, #1]
   17ac8:	tstne	r0, #1
   17acc:	bne	17ae0 <__assert_fail@plt+0x6a40>
   17ad0:	mov	r0, r4
   17ad4:	sub	sp, fp, #8
   17ad8:	pop	{r4, sl, fp, lr}
   17adc:	b	10e78 <fflush@plt>
   17ae0:	mov	r0, #1
   17ae4:	mov	r2, #0
   17ae8:	mov	r3, #0
   17aec:	str	r0, [sp]
   17af0:	mov	r0, r4
   17af4:	bl	17afc <__assert_fail@plt+0x6a5c>
   17af8:	b	17ad0 <__assert_fail@plt+0x6a30>
   17afc:	push	{r4, r5, r6, r7, fp, lr}
   17b00:	add	fp, sp, #16
   17b04:	sub	sp, sp, #8
   17b08:	mov	r4, r0
   17b0c:	ldr	r0, [r0, #4]
   17b10:	mov	r5, r3
   17b14:	mov	r6, r2
   17b18:	ldr	r1, [r4, #8]
   17b1c:	cmp	r1, r0
   17b20:	bne	17b3c <__assert_fail@plt+0x6a9c>
   17b24:	ldrd	r0, [r4, #16]
   17b28:	cmp	r1, r0
   17b2c:	bne	17b3c <__assert_fail@plt+0x6a9c>
   17b30:	ldr	r0, [r4, #36]	; 0x24
   17b34:	cmp	r0, #0
   17b38:	beq	17b54 <__assert_fail@plt+0x6ab4>
   17b3c:	mov	r0, r4
   17b40:	mov	r2, r6
   17b44:	mov	r3, r5
   17b48:	sub	sp, fp, #16
   17b4c:	pop	{r4, r5, r6, r7, fp, lr}
   17b50:	b	11040 <fseeko64@plt>
   17b54:	ldr	r7, [fp, #8]
   17b58:	mov	r0, r4
   17b5c:	bl	1101c <fileno@plt>
   17b60:	mov	r2, r6
   17b64:	mov	r3, r5
   17b68:	str	r7, [sp]
   17b6c:	bl	10f20 <lseek64@plt>
   17b70:	and	r2, r0, r1
   17b74:	cmn	r2, #1
   17b78:	mvneq	r0, #0
   17b7c:	subeq	sp, fp, #16
   17b80:	popeq	{r4, r5, r6, r7, fp, pc}
   17b84:	strd	r0, [r4, #80]	; 0x50
   17b88:	ldr	r0, [r4]
   17b8c:	bic	r0, r0, #16
   17b90:	str	r0, [r4]
   17b94:	mov	r0, #0
   17b98:	sub	sp, fp, #16
   17b9c:	pop	{r4, r5, r6, r7, fp, pc}
   17ba0:	push	{fp, lr}
   17ba4:	mov	fp, sp
   17ba8:	mov	r0, #14
   17bac:	bl	11064 <nl_langinfo@plt>
   17bb0:	movw	r1, #35711	; 0x8b7f
   17bb4:	cmp	r0, #0
   17bb8:	movt	r1, #1
   17bbc:	movne	r1, r0
   17bc0:	movw	r0, #39262	; 0x995e
   17bc4:	ldrb	r2, [r1]
   17bc8:	movt	r0, #1
   17bcc:	cmp	r2, #0
   17bd0:	movne	r0, r1
   17bd4:	pop	{fp, pc}
   17bd8:	push	{r4, r5, r6, r7, fp, lr}
   17bdc:	add	fp, sp, #16
   17be0:	sub	sp, sp, #8
   17be4:	add	r5, sp, #4
   17be8:	cmp	r0, #0
   17bec:	mov	r7, r2
   17bf0:	mov	r4, r1
   17bf4:	movne	r5, r0
   17bf8:	mov	r0, r5
   17bfc:	bl	10f44 <mbrtowc@plt>
   17c00:	mov	r6, r0
   17c04:	cmp	r7, #0
   17c08:	beq	17c2c <__assert_fail@plt+0x6b8c>
   17c0c:	cmn	r6, #2
   17c10:	bcc	17c2c <__assert_fail@plt+0x6b8c>
   17c14:	mov	r0, #0
   17c18:	bl	17c74 <__assert_fail@plt+0x6bd4>
   17c1c:	cmp	r0, #0
   17c20:	ldrbeq	r0, [r4]
   17c24:	moveq	r6, #1
   17c28:	streq	r0, [r5]
   17c2c:	mov	r0, r6
   17c30:	sub	sp, fp, #16
   17c34:	pop	{r4, r5, r6, r7, fp, pc}
   17c38:	cmp	r2, #0
   17c3c:	beq	17c6c <__assert_fail@plt+0x6bcc>
   17c40:	mvn	r3, #0
   17c44:	udiv	r3, r3, r2
   17c48:	cmp	r3, r1
   17c4c:	bcs	17c6c <__assert_fail@plt+0x6bcc>
   17c50:	push	{fp, lr}
   17c54:	mov	fp, sp
   17c58:	bl	10fe0 <__errno_location@plt>
   17c5c:	mov	r1, #12
   17c60:	str	r1, [r0]
   17c64:	mov	r0, #0
   17c68:	pop	{fp, pc}
   17c6c:	mul	r1, r2, r1
   17c70:	b	1792c <__assert_fail@plt+0x688c>
   17c74:	push	{r4, sl, fp, lr}
   17c78:	add	fp, sp, #8
   17c7c:	sub	sp, sp, #264	; 0x108
   17c80:	add	r1, sp, #7
   17c84:	movw	r2, #257	; 0x101
   17c88:	bl	17cd8 <__assert_fail@plt+0x6c38>
   17c8c:	mov	r4, #0
   17c90:	cmp	r0, #0
   17c94:	bne	17ccc <__assert_fail@plt+0x6c2c>
   17c98:	movw	r1, #35021	; 0x88cd
   17c9c:	add	r0, sp, #7
   17ca0:	movt	r1, #1
   17ca4:	bl	10e54 <strcmp@plt>
   17ca8:	cmp	r0, #0
   17cac:	beq	17ccc <__assert_fail@plt+0x6c2c>
   17cb0:	movw	r1, #39268	; 0x9964
   17cb4:	add	r0, sp, #7
   17cb8:	movt	r1, #1
   17cbc:	bl	10e54 <strcmp@plt>
   17cc0:	mov	r4, r0
   17cc4:	cmp	r0, #0
   17cc8:	movwne	r4, #1
   17ccc:	mov	r0, r4
   17cd0:	sub	sp, fp, #8
   17cd4:	pop	{r4, sl, fp, pc}
   17cd8:	push	{r4, r5, r6, r7, fp, lr}
   17cdc:	add	fp, sp, #16
   17ce0:	mov	r4, r1
   17ce4:	mov	r1, #0
   17ce8:	mov	r6, r2
   17cec:	bl	1104c <setlocale@plt>
   17cf0:	cmp	r0, #0
   17cf4:	beq	17d24 <__assert_fail@plt+0x6c84>
   17cf8:	mov	r7, r0
   17cfc:	bl	10fc8 <strlen@plt>
   17d00:	cmp	r0, r6
   17d04:	bcs	17d44 <__assert_fail@plt+0x6ca4>
   17d08:	add	r2, r0, #1
   17d0c:	mov	r0, r4
   17d10:	mov	r1, r7
   17d14:	bl	10e9c <memcpy@plt>
   17d18:	mov	r5, #0
   17d1c:	mov	r0, r5
   17d20:	pop	{r4, r5, r6, r7, fp, pc}
   17d24:	cmp	r6, #0
   17d28:	mov	r5, #22
   17d2c:	movne	r0, #0
   17d30:	strbne	r0, [r4]
   17d34:	movne	r0, r5
   17d38:	popne	{r4, r5, r6, r7, fp, pc}
   17d3c:	mov	r0, r5
   17d40:	pop	{r4, r5, r6, r7, fp, pc}
   17d44:	mov	r5, #34	; 0x22
   17d48:	cmp	r6, #0
   17d4c:	beq	17d6c <__assert_fail@plt+0x6ccc>
   17d50:	sub	r6, r6, #1
   17d54:	mov	r0, r4
   17d58:	mov	r1, r7
   17d5c:	mov	r2, r6
   17d60:	bl	10e9c <memcpy@plt>
   17d64:	mov	r0, #0
   17d68:	strb	r0, [r4, r6]
   17d6c:	mov	r0, r5
   17d70:	pop	{r4, r5, r6, r7, fp, pc}
   17d74:	mov	r1, #0
   17d78:	b	1104c <setlocale@plt>
   17d7c:	cmp	r3, #0
   17d80:	cmpeq	r2, #0
   17d84:	bne	17d9c <__assert_fail@plt+0x6cfc>
   17d88:	cmp	r1, #0
   17d8c:	cmpeq	r0, #0
   17d90:	mvnne	r1, #0
   17d94:	mvnne	r0, #0
   17d98:	b	17db8 <__assert_fail@plt+0x6d18>
   17d9c:	sub	sp, sp, #8
   17da0:	push	{sp, lr}
   17da4:	bl	17dc8 <__assert_fail@plt+0x6d28>
   17da8:	ldr	lr, [sp, #4]
   17dac:	add	sp, sp, #8
   17db0:	pop	{r2, r3}
   17db4:	bx	lr
   17db8:	push	{r1, lr}
   17dbc:	mov	r0, #8
   17dc0:	bl	10e48 <raise@plt>
   17dc4:	pop	{r1, pc}
   17dc8:	cmp	r1, r3
   17dcc:	cmpeq	r0, r2
   17dd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17dd4:	mov	r4, r0
   17dd8:	movcc	r0, #0
   17ddc:	mov	r5, r1
   17de0:	ldr	lr, [sp, #36]	; 0x24
   17de4:	movcc	r1, r0
   17de8:	bcc	17ee4 <__assert_fail@plt+0x6e44>
   17dec:	cmp	r3, #0
   17df0:	clzeq	ip, r2
   17df4:	clzne	ip, r3
   17df8:	addeq	ip, ip, #32
   17dfc:	cmp	r5, #0
   17e00:	clzeq	r1, r4
   17e04:	addeq	r1, r1, #32
   17e08:	clzne	r1, r5
   17e0c:	sub	ip, ip, r1
   17e10:	sub	sl, ip, #32
   17e14:	lsl	r9, r3, ip
   17e18:	rsb	fp, ip, #32
   17e1c:	orr	r9, r9, r2, lsl sl
   17e20:	orr	r9, r9, r2, lsr fp
   17e24:	lsl	r8, r2, ip
   17e28:	cmp	r5, r9
   17e2c:	cmpeq	r4, r8
   17e30:	movcc	r0, #0
   17e34:	movcc	r1, r0
   17e38:	bcc	17e54 <__assert_fail@plt+0x6db4>
   17e3c:	mov	r0, #1
   17e40:	subs	r4, r4, r8
   17e44:	lsl	r1, r0, sl
   17e48:	orr	r1, r1, r0, lsr fp
   17e4c:	lsl	r0, r0, ip
   17e50:	sbc	r5, r5, r9
   17e54:	cmp	ip, #0
   17e58:	beq	17ee4 <__assert_fail@plt+0x6e44>
   17e5c:	lsr	r6, r8, #1
   17e60:	orr	r6, r6, r9, lsl #31
   17e64:	lsr	r7, r9, #1
   17e68:	mov	r2, ip
   17e6c:	b	17e90 <__assert_fail@plt+0x6df0>
   17e70:	subs	r3, r4, r6
   17e74:	sbc	r8, r5, r7
   17e78:	adds	r3, r3, r3
   17e7c:	adc	r8, r8, r8
   17e80:	adds	r4, r3, #1
   17e84:	adc	r5, r8, #0
   17e88:	subs	r2, r2, #1
   17e8c:	beq	17eac <__assert_fail@plt+0x6e0c>
   17e90:	cmp	r5, r7
   17e94:	cmpeq	r4, r6
   17e98:	bcs	17e70 <__assert_fail@plt+0x6dd0>
   17e9c:	adds	r4, r4, r4
   17ea0:	adc	r5, r5, r5
   17ea4:	subs	r2, r2, #1
   17ea8:	bne	17e90 <__assert_fail@plt+0x6df0>
   17eac:	lsr	r3, r4, ip
   17eb0:	orr	r3, r3, r5, lsl fp
   17eb4:	lsr	r2, r5, ip
   17eb8:	orr	r3, r3, r5, lsr sl
   17ebc:	adds	r0, r0, r4
   17ec0:	mov	r4, r3
   17ec4:	lsl	r3, r2, ip
   17ec8:	orr	r3, r3, r4, lsl sl
   17ecc:	lsl	ip, r4, ip
   17ed0:	orr	r3, r3, r4, lsr fp
   17ed4:	adc	r1, r1, r5
   17ed8:	subs	r0, r0, ip
   17edc:	mov	r5, r2
   17ee0:	sbc	r1, r1, r3
   17ee4:	cmp	lr, #0
   17ee8:	strdne	r4, [lr]
   17eec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ef0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17ef4:	mov	r7, r0
   17ef8:	ldr	r6, [pc, #72]	; 17f48 <__assert_fail@plt+0x6ea8>
   17efc:	ldr	r5, [pc, #72]	; 17f4c <__assert_fail@plt+0x6eac>
   17f00:	add	r6, pc, r6
   17f04:	add	r5, pc, r5
   17f08:	sub	r6, r6, r5
   17f0c:	mov	r8, r1
   17f10:	mov	r9, r2
   17f14:	bl	10e10 <calloc@plt-0x20>
   17f18:	asrs	r6, r6, #2
   17f1c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17f20:	mov	r4, #0
   17f24:	add	r4, r4, #1
   17f28:	ldr	r3, [r5], #4
   17f2c:	mov	r2, r9
   17f30:	mov	r1, r8
   17f34:	mov	r0, r7
   17f38:	blx	r3
   17f3c:	cmp	r6, r4
   17f40:	bne	17f24 <__assert_fail@plt+0x6e84>
   17f44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17f48:	andeq	r2, r1, r4
   17f4c:	strdeq	r1, [r1], -ip
   17f50:	bx	lr
   17f54:	ldr	r3, [pc, #12]	; 17f68 <__assert_fail@plt+0x6ec8>
   17f58:	mov	r1, #0
   17f5c:	add	r3, pc, r3
   17f60:	ldr	r2, [r3]
   17f64:	b	10ff8 <__cxa_atexit@plt>
   17f68:	andeq	r2, r1, r8, lsl #3

Disassembly of section .fini:

00017f6c <.fini>:
   17f6c:	push	{r3, lr}
   17f70:	pop	{r3, pc}
