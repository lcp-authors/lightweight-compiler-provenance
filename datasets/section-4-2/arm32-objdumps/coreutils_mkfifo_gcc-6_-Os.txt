
../repos/coreutils/src/mkfifo:     file format elf32-littlearm


Disassembly of section .init:

0001143c <.init>:
   1143c:	push	{r3, lr}
   11440:	bl	11cc8 <__assert_fail@plt+0x434>
   11444:	pop	{r3, pc}

Disassembly of section .plt:

00011448 <fstatfs64@plt-0x14>:
   11448:	push	{lr}		; (str lr, [sp, #-4]!)
   1144c:	ldr	lr, [pc, #4]	; 11458 <fstatfs64@plt-0x4>
   11450:	add	lr, pc, lr
   11454:	ldr	pc, [lr, #8]!
   11458:	andeq	r8, r1, r8, lsr #23

0001145c <fstatfs64@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #24, 20	; 0x18000
   11464:	ldr	pc, [ip, #2984]!	; 0xba8

00011468 <selabel_lookup@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #24, 20	; 0x18000
   11470:	ldr	pc, [ip, #2976]!	; 0xba0

00011474 <calloc@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #24, 20	; 0x18000
   1147c:	ldr	pc, [ip, #2968]!	; 0xb98

00011480 <fputs_unlocked@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #24, 20	; 0x18000
   11488:	ldr	pc, [ip, #2960]!	; 0xb90

0001148c <raise@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #24, 20	; 0x18000
   11494:	ldr	pc, [ip, #2952]!	; 0xb88

00011498 <is_selinux_enabled@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #24, 20	; 0x18000
   114a0:	ldr	pc, [ip, #2944]!	; 0xb80

000114a4 <strcmp@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #24, 20	; 0x18000
   114ac:	ldr	pc, [ip, #2936]!	; 0xb78

000114b0 <context_type_get@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #24, 20	; 0x18000
   114b8:	ldr	pc, [ip, #2928]!	; 0xb70

000114bc <fflush@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #24, 20	; 0x18000
   114c4:	ldr	pc, [ip, #2920]!	; 0xb68

000114c8 <lsetfilecon@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #24, 20	; 0x18000
   114d0:	ldr	pc, [ip, #2912]!	; 0xb60

000114d4 <memmove@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #24, 20	; 0x18000
   114dc:	ldr	pc, [ip, #2904]!	; 0xb58

000114e0 <free@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #24, 20	; 0x18000
   114e8:	ldr	pc, [ip, #2896]!	; 0xb50

000114ec <faccessat@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #24, 20	; 0x18000
   114f4:	ldr	pc, [ip, #2888]!	; 0xb48

000114f8 <_exit@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #24, 20	; 0x18000
   11500:	ldr	pc, [ip, #2880]!	; 0xb40

00011504 <memcpy@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #24, 20	; 0x18000
   1150c:	ldr	pc, [ip, #2872]!	; 0xb38

00011510 <mbsinit@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #24, 20	; 0x18000
   11518:	ldr	pc, [ip, #2864]!	; 0xb30

0001151c <context_new@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #24, 20	; 0x18000
   11524:	ldr	pc, [ip, #2856]!	; 0xb28

00011528 <memcmp@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #24, 20	; 0x18000
   11530:	ldr	pc, [ip, #2848]!	; 0xb20

00011534 <fputc_unlocked@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #24, 20	; 0x18000
   1153c:	ldr	pc, [ip, #2840]!	; 0xb18

00011540 <dcgettext@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #24, 20	; 0x18000
   11548:	ldr	pc, [ip, #2832]!	; 0xb10

0001154c <context_type_set@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #24, 20	; 0x18000
   11554:	ldr	pc, [ip, #2824]!	; 0xb08

00011558 <realloc@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #24, 20	; 0x18000
   11560:	ldr	pc, [ip, #2816]!	; 0xb00

00011564 <fgetfilecon@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #24, 20	; 0x18000
   1156c:	ldr	pc, [ip, #2808]!	; 0xaf8

00011570 <textdomain@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #24, 20	; 0x18000
   11578:	ldr	pc, [ip, #2800]!	; 0xaf0

0001157c <rawmemchr@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #24, 20	; 0x18000
   11584:	ldr	pc, [ip, #2792]!	; 0xae8

00011588 <__fxstatat64@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #24, 20	; 0x18000
   11590:	ldr	pc, [ip, #2784]!	; 0xae0

00011594 <iswprint@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #24, 20	; 0x18000
   1159c:	ldr	pc, [ip, #2776]!	; 0xad8

000115a0 <__fxstat64@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #24, 20	; 0x18000
   115a8:	ldr	pc, [ip, #2768]!	; 0xad0

000115ac <readlink@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #24, 20	; 0x18000
   115b4:	ldr	pc, [ip, #2760]!	; 0xac8

000115b8 <lseek64@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #24, 20	; 0x18000
   115c0:	ldr	pc, [ip, #2752]!	; 0xac0

000115c4 <__ctype_get_mb_cur_max@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #24, 20	; 0x18000
   115cc:	ldr	pc, [ip, #2744]!	; 0xab8

000115d0 <strcpy@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #24, 20	; 0x18000
   115d8:	ldr	pc, [ip, #2736]!	; 0xab0

000115dc <getcon@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #24, 20	; 0x18000
   115e4:	ldr	pc, [ip, #2728]!	; 0xaa8

000115e8 <__fpending@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #24, 20	; 0x18000
   115f0:	ldr	pc, [ip, #2720]!	; 0xaa0

000115f4 <ferror_unlocked@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #24, 20	; 0x18000
   115fc:	ldr	pc, [ip, #2712]!	; 0xa98

00011600 <mbrtowc@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #24, 20	; 0x18000
   11608:	ldr	pc, [ip, #2704]!	; 0xa90

0001160c <error@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #24, 20	; 0x18000
   11614:	ldr	pc, [ip, #2696]!	; 0xa88

00011618 <open64@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #24, 20	; 0x18000
   11620:	ldr	pc, [ip, #2688]!	; 0xa80

00011624 <lgetfilecon@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #24, 20	; 0x18000
   1162c:	ldr	pc, [ip, #2680]!	; 0xa78

00011630 <malloc@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #24, 20	; 0x18000
   11638:	ldr	pc, [ip, #2672]!	; 0xa70

0001163c <__libc_start_main@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #24, 20	; 0x18000
   11644:	ldr	pc, [ip, #2664]!	; 0xa68

00011648 <__freading@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #24, 20	; 0x18000
   11650:	ldr	pc, [ip, #2656]!	; 0xa60

00011654 <__gmon_start__@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #24, 20	; 0x18000
   1165c:	ldr	pc, [ip, #2648]!	; 0xa58

00011660 <context_free@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #24, 20	; 0x18000
   11668:	ldr	pc, [ip, #2640]!	; 0xa50

0001166c <mempcpy@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #24, 20	; 0x18000
   11674:	ldr	pc, [ip, #2632]!	; 0xa48

00011678 <getopt_long@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #24, 20	; 0x18000
   11680:	ldr	pc, [ip, #2624]!	; 0xa40

00011684 <__ctype_b_loc@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #24, 20	; 0x18000
   1168c:	ldr	pc, [ip, #2616]!	; 0xa38

00011690 <getcwd@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #24, 20	; 0x18000
   11698:	ldr	pc, [ip, #2608]!	; 0xa30

0001169c <exit@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #24, 20	; 0x18000
   116a4:	ldr	pc, [ip, #2600]!	; 0xa28

000116a8 <getfilecon@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #24, 20	; 0x18000
   116b0:	ldr	pc, [ip, #2592]!	; 0xa20

000116b4 <strlen@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #24, 20	; 0x18000
   116bc:	ldr	pc, [ip, #2584]!	; 0xa18

000116c0 <selabel_open@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #24, 20	; 0x18000
   116c8:	ldr	pc, [ip, #2576]!	; 0xa10

000116cc <openat64@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #24, 20	; 0x18000
   116d4:	ldr	pc, [ip, #2568]!	; 0xa08

000116d8 <setfscreatecon@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #24, 20	; 0x18000
   116e0:	ldr	pc, [ip, #2560]!	; 0xa00

000116e4 <__errno_location@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #24, 20	; 0x18000
   116ec:	ldr	pc, [ip, #2552]!	; 0x9f8

000116f0 <__sprintf_chk@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #24, 20	; 0x18000
   116f8:	ldr	pc, [ip, #2544]!	; 0x9f0

000116fc <__cxa_atexit@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #24, 20	; 0x18000
   11704:	ldr	pc, [ip, #2536]!	; 0x9e8

00011708 <memset@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #24, 20	; 0x18000
   11710:	ldr	pc, [ip, #2528]!	; 0x9e0

00011714 <__printf_chk@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #24, 20	; 0x18000
   1171c:	ldr	pc, [ip, #2520]!	; 0x9d8

00011720 <fileno@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #24, 20	; 0x18000
   11728:	ldr	pc, [ip, #2512]!	; 0x9d0

0001172c <__fprintf_chk@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #24, 20	; 0x18000
   11734:	ldr	pc, [ip, #2504]!	; 0x9c8

00011738 <fclose@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #24, 20	; 0x18000
   11740:	ldr	pc, [ip, #2496]!	; 0x9c0

00011744 <fseeko64@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #24, 20	; 0x18000
   1174c:	ldr	pc, [ip, #2488]!	; 0x9b8

00011750 <fcntl64@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #24, 20	; 0x18000
   11758:	ldr	pc, [ip, #2480]!	; 0x9b0

0001175c <setlocale@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #24, 20	; 0x18000
   11764:	ldr	pc, [ip, #2472]!	; 0x9a8

00011768 <fsetfilecon@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #24, 20	; 0x18000
   11770:	ldr	pc, [ip, #2464]!	; 0x9a0

00011774 <strrchr@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #24, 20	; 0x18000
   1177c:	ldr	pc, [ip, #2456]!	; 0x998

00011780 <nl_langinfo@plt>:
   11780:	add	ip, pc, #0, 12
   11784:	add	ip, ip, #24, 20	; 0x18000
   11788:	ldr	pc, [ip, #2448]!	; 0x990

0001178c <readdir64@plt>:
   1178c:	add	ip, pc, #0, 12
   11790:	add	ip, ip, #24, 20	; 0x18000
   11794:	ldr	pc, [ip, #2440]!	; 0x988

00011798 <fdopendir@plt>:
   11798:	add	ip, pc, #0, 12
   1179c:	add	ip, ip, #24, 20	; 0x18000
   117a0:	ldr	pc, [ip, #2432]!	; 0x980

000117a4 <security_compute_create@plt>:
   117a4:	add	ip, pc, #0, 12
   117a8:	add	ip, ip, #24, 20	; 0x18000
   117ac:	ldr	pc, [ip, #2424]!	; 0x978

000117b0 <dirfd@plt>:
   117b0:	add	ip, pc, #0, 12
   117b4:	add	ip, ip, #24, 20	; 0x18000
   117b8:	ldr	pc, [ip, #2416]!	; 0x970

000117bc <fchdir@plt>:
   117bc:	add	ip, pc, #0, 12
   117c0:	add	ip, ip, #24, 20	; 0x18000
   117c4:	ldr	pc, [ip, #2408]!	; 0x968

000117c8 <qsort@plt>:
   117c8:	add	ip, pc, #0, 12
   117cc:	add	ip, ip, #24, 20	; 0x18000
   117d0:	ldr	pc, [ip, #2400]!	; 0x960

000117d4 <freecon@plt>:
   117d4:	add	ip, pc, #0, 12
   117d8:	add	ip, ip, #24, 20	; 0x18000
   117dc:	ldr	pc, [ip, #2392]!	; 0x958

000117e0 <bindtextdomain@plt>:
   117e0:	add	ip, pc, #0, 12
   117e4:	add	ip, ip, #24, 20	; 0x18000
   117e8:	ldr	pc, [ip, #2384]!	; 0x950

000117ec <getfscreatecon@plt>:
   117ec:	add	ip, pc, #0, 12
   117f0:	add	ip, ip, #24, 20	; 0x18000
   117f4:	ldr	pc, [ip, #2376]!	; 0x948

000117f8 <umask@plt>:
   117f8:	add	ip, pc, #0, 12
   117fc:	add	ip, ip, #24, 20	; 0x18000
   11800:	ldr	pc, [ip, #2368]!	; 0x940

00011804 <context_str@plt>:
   11804:	add	ip, pc, #0, 12
   11808:	add	ip, ip, #24, 20	; 0x18000
   1180c:	ldr	pc, [ip, #2360]!	; 0x938

00011810 <chmod@plt>:
   11810:	add	ip, pc, #0, 12
   11814:	add	ip, ip, #24, 20	; 0x18000
   11818:	ldr	pc, [ip, #2352]!	; 0x930

0001181c <__xstat64@plt>:
   1181c:	add	ip, pc, #0, 12
   11820:	add	ip, ip, #24, 20	; 0x18000
   11824:	ldr	pc, [ip, #2344]!	; 0x928

00011828 <fputs@plt>:
   11828:	add	ip, pc, #0, 12
   1182c:	add	ip, ip, #24, 20	; 0x18000
   11830:	ldr	pc, [ip, #2336]!	; 0x920

00011834 <strncmp@plt>:
   11834:	add	ip, pc, #0, 12
   11838:	add	ip, ip, #24, 20	; 0x18000
   1183c:	ldr	pc, [ip, #2328]!	; 0x918

00011840 <abort@plt>:
   11840:	add	ip, pc, #0, 12
   11844:	add	ip, ip, #24, 20	; 0x18000
   11848:	ldr	pc, [ip, #2320]!	; 0x910

0001184c <close@plt>:
   1184c:	add	ip, pc, #0, 12
   11850:	add	ip, ip, #24, 20	; 0x18000
   11854:	ldr	pc, [ip, #2312]!	; 0x908

00011858 <__lxstat64@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #24, 20	; 0x18000
   11860:	ldr	pc, [ip, #2304]!	; 0x900

00011864 <mkfifo@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #24, 20	; 0x18000
   1186c:	ldr	pc, [ip, #2296]!	; 0x8f8

00011870 <mode_to_security_class@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #24, 20	; 0x18000
   11878:	ldr	pc, [ip, #2288]!	; 0x8f0

0001187c <closedir@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #24, 20	; 0x18000
   11884:	ldr	pc, [ip, #2280]!	; 0x8e8

00011888 <strspn@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #24, 20	; 0x18000
   11890:	ldr	pc, [ip, #2272]!	; 0x8e0

00011894 <__assert_fail@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #24, 20	; 0x18000
   1189c:	ldr	pc, [ip, #2264]!	; 0x8d8

Disassembly of section .text:

000118a0 <lchmod@@Base-0x419c>:
   118a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118a4:	mov	sl, r0
   118a8:	sub	sp, sp, #20
   118ac:	ldr	r0, [r1]
   118b0:	mov	r5, r1
   118b4:	bl	16028 <lchmod@@Base+0x5ec>
   118b8:	ldr	r1, [pc, #884]	; 11c34 <__assert_fail@plt+0x3a0>
   118bc:	mov	r0, #6
   118c0:	bl	1175c <setlocale@plt>
   118c4:	ldr	r1, [pc, #876]	; 11c38 <__assert_fail@plt+0x3a4>
   118c8:	ldr	r0, [pc, #876]	; 11c3c <__assert_fail@plt+0x3a8>
   118cc:	bl	117e0 <bindtextdomain@plt>
   118d0:	ldr	r0, [pc, #868]	; 11c3c <__assert_fail@plt+0x3a8>
   118d4:	bl	11570 <textdomain@plt>
   118d8:	ldr	r0, [pc, #864]	; 11c40 <__assert_fail@plt+0x3ac>
   118dc:	bl	1913c <lchmod@@Base+0x3700>
   118e0:	mov	r6, #0
   118e4:	ldr	fp, [pc, #856]	; 11c44 <__assert_fail@plt+0x3b0>
   118e8:	ldr	r9, [pc, #856]	; 11c48 <__assert_fail@plt+0x3b4>
   118ec:	mov	r8, r6
   118f0:	mov	r7, r6
   118f4:	mov	r4, r6
   118f8:	str	r4, [sp]
   118fc:	mov	r3, fp
   11900:	ldr	r2, [pc, #836]	; 11c4c <__assert_fail@plt+0x3b8>
   11904:	mov	r1, r5
   11908:	mov	r0, sl
   1190c:	bl	11678 <getopt_long@plt>
   11910:	cmn	r0, #1
   11914:	bne	1194c <__assert_fail@plt+0xb8>
   11918:	ldr	r4, [pc, #816]	; 11c50 <__assert_fail@plt+0x3bc>
   1191c:	ldr	r3, [r4]
   11920:	cmp	sl, r3
   11924:	bne	11a48 <__assert_fail@plt+0x1b4>
   11928:	mov	r2, #5
   1192c:	ldr	r1, [pc, #800]	; 11c54 <__assert_fail@plt+0x3c0>
   11930:	mov	r0, #0
   11934:	bl	11540 <dcgettext@plt>
   11938:	mov	r1, #0
   1193c:	mov	r2, r0
   11940:	mov	r0, r1
   11944:	bl	1160c <error@plt>
   11948:	b	11960 <__assert_fail@plt+0xcc>
   1194c:	cmn	r0, #2
   11950:	beq	11a10 <__assert_fail@plt+0x17c>
   11954:	bgt	11968 <__assert_fail@plt+0xd4>
   11958:	cmn	r0, #3
   1195c:	beq	11a18 <__assert_fail@plt+0x184>
   11960:	mov	r0, #1
   11964:	b	11a14 <__assert_fail@plt+0x180>
   11968:	cmp	r0, #90	; 0x5a
   1196c:	beq	11980 <__assert_fail@plt+0xec>
   11970:	cmp	r0, #109	; 0x6d
   11974:	bne	11960 <__assert_fail@plt+0xcc>
   11978:	ldr	r7, [r9]
   1197c:	b	118f8 <__assert_fail@plt+0x64>
   11980:	bl	11498 <is_selinux_enabled@plt>
   11984:	cmp	r0, #0
   11988:	ble	119e4 <__assert_fail@plt+0x150>
   1198c:	ldr	r1, [r9]
   11990:	cmp	r1, #0
   11994:	movne	r8, r1
   11998:	bne	118f8 <__assert_fail@plt+0x64>
   1199c:	mov	r2, r4
   119a0:	mov	r0, r1
   119a4:	bl	116c0 <selabel_open@plt>
   119a8:	subs	r6, r0, #0
   119ac:	bne	118f8 <__assert_fail@plt+0x64>
   119b0:	bl	116e4 <__errno_location@plt>
   119b4:	mov	r2, #5
   119b8:	ldr	r1, [pc, #664]	; 11c58 <__assert_fail@plt+0x3c4>
   119bc:	ldr	r3, [r0]
   119c0:	mov	r0, r4
   119c4:	str	r3, [sp, #12]
   119c8:	bl	11540 <dcgettext@plt>
   119cc:	ldr	r3, [sp, #12]
   119d0:	mov	r1, r3
   119d4:	mov	r2, r0
   119d8:	mov	r0, r4
   119dc:	bl	1160c <error@plt>
   119e0:	b	118f8 <__assert_fail@plt+0x64>
   119e4:	ldr	r3, [r9]
   119e8:	cmp	r3, #0
   119ec:	beq	118f8 <__assert_fail@plt+0x64>
   119f0:	mov	r2, #5
   119f4:	ldr	r1, [pc, #608]	; 11c5c <__assert_fail@plt+0x3c8>
   119f8:	mov	r0, r4
   119fc:	bl	11540 <dcgettext@plt>
   11a00:	mov	r1, r4
   11a04:	mov	r2, r0
   11a08:	mov	r0, #0
   11a0c:	b	119dc <__assert_fail@plt+0x148>
   11a10:	mov	r0, #0
   11a14:	bl	11db4 <__assert_fail@plt+0x520>
   11a18:	ldr	r3, [pc, #576]	; 11c60 <__assert_fail@plt+0x3cc>
   11a1c:	ldr	r0, [pc, #576]	; 11c64 <__assert_fail@plt+0x3d0>
   11a20:	str	r3, [sp]
   11a24:	ldr	r3, [pc, #572]	; 11c68 <__assert_fail@plt+0x3d4>
   11a28:	str	r4, [sp, #4]
   11a2c:	ldr	r2, [pc, #568]	; 11c6c <__assert_fail@plt+0x3d8>
   11a30:	ldr	r0, [r0]
   11a34:	ldr	r3, [r3]
   11a38:	ldr	r1, [pc, #560]	; 11c70 <__assert_fail@plt+0x3dc>
   11a3c:	bl	17ce0 <lchmod@@Base+0x22a4>
   11a40:	mov	r0, #0
   11a44:	bl	1169c <exit@plt>
   11a48:	cmp	r8, #0
   11a4c:	beq	11a98 <__assert_fail@plt+0x204>
   11a50:	mov	r0, r8
   11a54:	bl	116d8 <setfscreatecon@plt>
   11a58:	cmp	r0, #0
   11a5c:	bge	11a98 <__assert_fail@plt+0x204>
   11a60:	bl	116e4 <__errno_location@plt>
   11a64:	mov	r2, #5
   11a68:	ldr	r1, [pc, #516]	; 11c74 <__assert_fail@plt+0x3e0>
   11a6c:	ldr	r4, [r0]
   11a70:	mov	r0, #0
   11a74:	bl	11540 <dcgettext@plt>
   11a78:	mov	r5, r0
   11a7c:	mov	r0, r8
   11a80:	bl	17658 <lchmod@@Base+0x1c1c>
   11a84:	mov	r2, r5
   11a88:	mov	r1, r4
   11a8c:	mov	r3, r0
   11a90:	mov	r0, #1
   11a94:	bl	1160c <error@plt>
   11a98:	cmp	r7, #0
   11a9c:	beq	11b30 <__assert_fail@plt+0x29c>
   11aa0:	mov	r0, r7
   11aa4:	bl	15b34 <lchmod@@Base+0xf8>
   11aa8:	subs	fp, r0, #0
   11aac:	bne	11acc <__assert_fail@plt+0x238>
   11ab0:	mov	r2, #5
   11ab4:	ldr	r1, [pc, #444]	; 11c78 <__assert_fail@plt+0x3e4>
   11ab8:	bl	11540 <dcgettext@plt>
   11abc:	mov	r1, fp
   11ac0:	mov	r2, r0
   11ac4:	mov	r0, #1
   11ac8:	bl	1160c <error@plt>
   11acc:	mov	r0, #0
   11ad0:	bl	117f8 <umask@plt>
   11ad4:	mov	r9, #0
   11ad8:	mov	r8, r0
   11adc:	bl	117f8 <umask@plt>
   11ae0:	mov	r3, fp
   11ae4:	mov	r2, r8
   11ae8:	mov	r1, r9
   11aec:	str	r9, [sp]
   11af0:	ldr	r0, [pc, #388]	; 11c7c <__assert_fail@plt+0x3e8>
   11af4:	bl	15e98 <lchmod@@Base+0x45c>
   11af8:	mov	r8, r0
   11afc:	mov	r0, fp
   11b00:	bl	12da0 <__assert_fail@plt+0x150c>
   11b04:	bic	r3, r8, #508	; 0x1fc
   11b08:	bic	r3, r3, #3
   11b0c:	cmp	r3, r9
   11b10:	beq	11b34 <__assert_fail@plt+0x2a0>
   11b14:	mov	r2, #5
   11b18:	ldr	r1, [pc, #352]	; 11c80 <__assert_fail@plt+0x3ec>
   11b1c:	mov	r0, r9
   11b20:	bl	11540 <dcgettext@plt>
   11b24:	mov	r1, r9
   11b28:	mov	r2, r0
   11b2c:	b	11ac4 <__assert_fail@plt+0x230>
   11b30:	ldr	r8, [pc, #324]	; 11c7c <__assert_fail@plt+0x3e8>
   11b34:	mov	r9, #0
   11b38:	ldr	r3, [r4]
   11b3c:	cmp	sl, r3
   11b40:	bgt	11b50 <__assert_fail@plt+0x2bc>
   11b44:	mov	r0, r9
   11b48:	add	sp, sp, #20
   11b4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b50:	cmp	r6, #0
   11b54:	beq	11b68 <__assert_fail@plt+0x2d4>
   11b58:	mov	r2, #4096	; 0x1000
   11b5c:	ldr	r1, [r5, r3, lsl #2]
   11b60:	mov	r0, r6
   11b64:	bl	12260 <__assert_fail@plt+0x9cc>
   11b68:	ldr	r3, [r4]
   11b6c:	mov	r1, r8
   11b70:	ldr	r0, [r5, r3, lsl #2]
   11b74:	bl	11864 <mkfifo@plt>
   11b78:	subs	fp, r0, #0
   11b7c:	beq	11bd4 <__assert_fail@plt+0x340>
   11b80:	bl	116e4 <__errno_location@plt>
   11b84:	mov	r2, #5
   11b88:	ldr	r1, [pc, #244]	; 11c84 <__assert_fail@plt+0x3f0>
   11b8c:	ldr	r9, [r0]
   11b90:	mov	r0, #0
   11b94:	bl	11540 <dcgettext@plt>
   11b98:	ldr	r3, [r4]
   11b9c:	ldr	r1, [r5, r3, lsl #2]
   11ba0:	mov	fp, r0
   11ba4:	mov	r0, #4
   11ba8:	bl	17474 <lchmod@@Base+0x1a38>
   11bac:	mov	r2, fp
   11bb0:	mov	r1, r9
   11bb4:	mov	r3, r0
   11bb8:	mov	r0, #0
   11bbc:	bl	1160c <error@plt>
   11bc0:	mov	r9, #1
   11bc4:	ldr	r3, [r4]
   11bc8:	add	r3, r3, #1
   11bcc:	str	r3, [r4]
   11bd0:	b	11b38 <__assert_fail@plt+0x2a4>
   11bd4:	cmp	r7, #0
   11bd8:	beq	11bc4 <__assert_fail@plt+0x330>
   11bdc:	ldr	r3, [r4]
   11be0:	mov	r1, r8
   11be4:	ldr	r0, [r5, r3, lsl #2]
   11be8:	bl	15a3c <lchmod@@Base>
   11bec:	cmp	r0, #0
   11bf0:	beq	11bc4 <__assert_fail@plt+0x330>
   11bf4:	bl	116e4 <__errno_location@plt>
   11bf8:	mov	r2, #5
   11bfc:	ldr	r1, [pc, #132]	; 11c88 <__assert_fail@plt+0x3f4>
   11c00:	ldr	r9, [r0]
   11c04:	mov	r0, fp
   11c08:	bl	11540 <dcgettext@plt>
   11c0c:	ldr	r3, [r4]
   11c10:	ldr	r1, [r5, r3, lsl #2]
   11c14:	str	r0, [sp, #12]
   11c18:	mov	r0, #4
   11c1c:	bl	17474 <lchmod@@Base+0x1a38>
   11c20:	ldr	r2, [sp, #12]
   11c24:	mov	r1, r9
   11c28:	mov	r3, r0
   11c2c:	mov	r0, fp
   11c30:	b	11bbc <__assert_fail@plt+0x328>
   11c34:	andeq	r9, r1, sl, ror #10
   11c38:	andeq	r9, r1, fp, ror #10
   11c3c:	andeq	r9, r1, r8, asr #9
   11c40:	andeq	r2, r1, r0, ror #22
   11c44:	strdeq	r9, [r1], -r0
   11c48:	andeq	sl, r2, r8, ror #3
   11c4c:	strdeq	r9, [r1], -r8
   11c50:	ldrdeq	sl, [r2], -r8
   11c54:	strdeq	r9, [r1], -ip
   11c58:	andeq	r9, r1, r3, lsl #11
   11c5c:	muleq	r1, pc, r5	; <UNPREDICTABLE>
   11c60:	andeq	r9, r1, r8, ror #11
   11c64:	andeq	sl, r2, r4, ror #3
   11c68:	andeq	sl, r2, r4, lsl #3
   11c6c:	andeq	r9, r1, r4, asr #9
   11c70:	andeq	r9, r1, r0, asr #4
   11c74:	andeq	r9, r1, ip, lsl #12
   11c78:	andeq	r9, r1, lr, lsr r6
   11c7c:			; <UNDEFINED> instruction: 0x000001b6
   11c80:	andeq	r9, r1, fp, asr #12
   11c84:	andeq	r9, r1, r7, ror r6
   11c88:	andeq	r9, r1, sp, lsl #13
   11c8c:	mov	fp, #0
   11c90:	mov	lr, #0
   11c94:	pop	{r1}		; (ldr r1, [sp], #4)
   11c98:	mov	r2, sp
   11c9c:	push	{r2}		; (str r2, [sp, #-4]!)
   11ca0:	push	{r0}		; (str r0, [sp, #-4]!)
   11ca4:	ldr	ip, [pc, #16]	; 11cbc <__assert_fail@plt+0x428>
   11ca8:	push	{ip}		; (str ip, [sp, #-4]!)
   11cac:	ldr	r0, [pc, #12]	; 11cc0 <__assert_fail@plt+0x42c>
   11cb0:	ldr	r3, [pc, #12]	; 11cc4 <__assert_fail@plt+0x430>
   11cb4:	bl	1163c <__libc_start_main@plt>
   11cb8:	bl	11840 <abort@plt>
   11cbc:	andeq	r9, r1, r8, lsr r1
   11cc0:	andeq	r1, r1, r0, lsr #17
   11cc4:	ldrdeq	r9, [r1], -r8
   11cc8:	ldr	r3, [pc, #20]	; 11ce4 <__assert_fail@plt+0x450>
   11ccc:	ldr	r2, [pc, #20]	; 11ce8 <__assert_fail@plt+0x454>
   11cd0:	add	r3, pc, r3
   11cd4:	ldr	r2, [r3, r2]
   11cd8:	cmp	r2, #0
   11cdc:	bxeq	lr
   11ce0:	b	11654 <__gmon_start__@plt>
   11ce4:	andeq	r8, r1, r8, lsr #6
   11ce8:	andeq	r0, r0, r8, ror r1
   11cec:	ldr	r3, [pc, #28]	; 11d10 <__assert_fail@plt+0x47c>
   11cf0:	ldr	r0, [pc, #28]	; 11d14 <__assert_fail@plt+0x480>
   11cf4:	sub	r3, r3, r0
   11cf8:	cmp	r3, #6
   11cfc:	bxls	lr
   11d00:	ldr	r3, [pc, #16]	; 11d18 <__assert_fail@plt+0x484>
   11d04:	cmp	r3, #0
   11d08:	bxeq	lr
   11d0c:	bx	r3
   11d10:	andeq	sl, r2, pc, asr #3
   11d14:	andeq	sl, r2, ip, asr #3
   11d18:	andeq	r0, r0, r0
   11d1c:	ldr	r1, [pc, #36]	; 11d48 <__assert_fail@plt+0x4b4>
   11d20:	ldr	r0, [pc, #36]	; 11d4c <__assert_fail@plt+0x4b8>
   11d24:	sub	r1, r1, r0
   11d28:	asr	r1, r1, #2
   11d2c:	add	r1, r1, r1, lsr #31
   11d30:	asrs	r1, r1, #1
   11d34:	bxeq	lr
   11d38:	ldr	r3, [pc, #16]	; 11d50 <__assert_fail@plt+0x4bc>
   11d3c:	cmp	r3, #0
   11d40:	bxeq	lr
   11d44:	bx	r3
   11d48:	andeq	sl, r2, ip, asr #3
   11d4c:	andeq	sl, r2, ip, asr #3
   11d50:	andeq	r0, r0, r0
   11d54:	push	{r4, lr}
   11d58:	ldr	r4, [pc, #24]	; 11d78 <__assert_fail@plt+0x4e4>
   11d5c:	ldrb	r3, [r4]
   11d60:	cmp	r3, #0
   11d64:	popne	{r4, pc}
   11d68:	bl	11cec <__assert_fail@plt+0x458>
   11d6c:	mov	r3, #1
   11d70:	strb	r3, [r4]
   11d74:	pop	{r4, pc}
   11d78:	andeq	sl, r2, ip, ror #3
   11d7c:	ldr	r0, [pc, #40]	; 11dac <__assert_fail@plt+0x518>
   11d80:	ldr	r3, [r0]
   11d84:	cmp	r3, #0
   11d88:	bne	11d90 <__assert_fail@plt+0x4fc>
   11d8c:	b	11d1c <__assert_fail@plt+0x488>
   11d90:	ldr	r3, [pc, #24]	; 11db0 <__assert_fail@plt+0x51c>
   11d94:	cmp	r3, #0
   11d98:	beq	11d8c <__assert_fail@plt+0x4f8>
   11d9c:	push	{r4, lr}
   11da0:	blx	r3
   11da4:	pop	{r4, lr}
   11da8:	b	11d1c <__assert_fail@plt+0x488>
   11dac:	andeq	r9, r2, ip, lsl #30
   11db0:	andeq	r0, r0, r0
   11db4:	subs	r5, r0, #0
   11db8:	push	{r7, lr}
   11dbc:	sub	sp, sp, #56	; 0x38
   11dc0:	ldr	r4, [pc, #524]	; 11fd4 <__assert_fail@plt+0x740>
   11dc4:	beq	11dfc <__assert_fail@plt+0x568>
   11dc8:	ldr	r3, [pc, #520]	; 11fd8 <__assert_fail@plt+0x744>
   11dcc:	mov	r2, #5
   11dd0:	ldr	r1, [pc, #516]	; 11fdc <__assert_fail@plt+0x748>
   11dd4:	mov	r0, #0
   11dd8:	ldr	r6, [r3]
   11ddc:	bl	11540 <dcgettext@plt>
   11de0:	ldr	r3, [r4]
   11de4:	mov	r1, #1
   11de8:	mov	r2, r0
   11dec:	mov	r0, r6
   11df0:	bl	1172c <__fprintf_chk@plt>
   11df4:	mov	r0, r5
   11df8:	bl	1169c <exit@plt>
   11dfc:	mov	r2, #5
   11e00:	ldr	r1, [pc, #472]	; 11fe0 <__assert_fail@plt+0x74c>
   11e04:	bl	11540 <dcgettext@plt>
   11e08:	ldr	r2, [r4]
   11e0c:	ldr	r4, [pc, #464]	; 11fe4 <__assert_fail@plt+0x750>
   11e10:	ldr	r8, [pc, #464]	; 11fe8 <__assert_fail@plt+0x754>
   11e14:	mov	r6, r5
   11e18:	mov	r1, r0
   11e1c:	mov	r0, #1
   11e20:	bl	11714 <__printf_chk@plt>
   11e24:	mov	r2, #5
   11e28:	ldr	r1, [pc, #444]	; 11fec <__assert_fail@plt+0x758>
   11e2c:	mov	r0, r5
   11e30:	bl	11540 <dcgettext@plt>
   11e34:	ldr	r1, [r4]
   11e38:	bl	11480 <fputs_unlocked@plt>
   11e3c:	mov	r2, #5
   11e40:	ldr	r1, [pc, #424]	; 11ff0 <__assert_fail@plt+0x75c>
   11e44:	mov	r0, r5
   11e48:	bl	11540 <dcgettext@plt>
   11e4c:	ldr	r1, [r4]
   11e50:	bl	11480 <fputs_unlocked@plt>
   11e54:	mov	r2, #5
   11e58:	ldr	r1, [pc, #404]	; 11ff4 <__assert_fail@plt+0x760>
   11e5c:	mov	r0, r5
   11e60:	bl	11540 <dcgettext@plt>
   11e64:	ldr	r1, [r4]
   11e68:	bl	11480 <fputs_unlocked@plt>
   11e6c:	mov	r2, #5
   11e70:	ldr	r1, [pc, #384]	; 11ff8 <__assert_fail@plt+0x764>
   11e74:	mov	r0, r5
   11e78:	bl	11540 <dcgettext@plt>
   11e7c:	ldr	r1, [r4]
   11e80:	bl	11480 <fputs_unlocked@plt>
   11e84:	mov	r2, #5
   11e88:	ldr	r1, [pc, #364]	; 11ffc <__assert_fail@plt+0x768>
   11e8c:	mov	r0, r5
   11e90:	bl	11540 <dcgettext@plt>
   11e94:	ldr	r1, [r4]
   11e98:	bl	11480 <fputs_unlocked@plt>
   11e9c:	mov	r2, #5
   11ea0:	ldr	r1, [pc, #344]	; 12000 <__assert_fail@plt+0x76c>
   11ea4:	mov	r0, r5
   11ea8:	bl	11540 <dcgettext@plt>
   11eac:	ldr	r1, [r4]
   11eb0:	bl	11480 <fputs_unlocked@plt>
   11eb4:	ldr	lr, [pc, #328]	; 12004 <__assert_fail@plt+0x770>
   11eb8:	mov	ip, sp
   11ebc:	ldm	lr!, {r0, r1, r2, r3}
   11ec0:	stmia	ip!, {r0, r1, r2, r3}
   11ec4:	ldm	lr!, {r0, r1, r2, r3}
   11ec8:	stmia	ip!, {r0, r1, r2, r3}
   11ecc:	ldm	lr!, {r0, r1, r2, r3}
   11ed0:	stmia	ip!, {r0, r1, r2, r3}
   11ed4:	ldm	lr, {r0, r1}
   11ed8:	stm	ip, {r0, r1}
   11edc:	ldr	r1, [sp, r6]
   11ee0:	add	r7, sp, r6
   11ee4:	cmp	r1, #0
   11ee8:	bne	11f8c <__assert_fail@plt+0x6f8>
   11eec:	ldr	r6, [r7, #4]
   11ef0:	ldr	r7, [pc, #240]	; 11fe8 <__assert_fail@plt+0x754>
   11ef4:	cmp	r6, #0
   11ef8:	mov	r2, #5
   11efc:	ldr	r1, [pc, #260]	; 12008 <__assert_fail@plt+0x774>
   11f00:	mov	r0, #0
   11f04:	moveq	r6, r7
   11f08:	bl	11540 <dcgettext@plt>
   11f0c:	ldr	r3, [pc, #248]	; 1200c <__assert_fail@plt+0x778>
   11f10:	ldr	r2, [pc, #248]	; 12010 <__assert_fail@plt+0x77c>
   11f14:	mov	r1, r0
   11f18:	mov	r0, #1
   11f1c:	bl	11714 <__printf_chk@plt>
   11f20:	mov	r1, #0
   11f24:	mov	r0, #5
   11f28:	bl	1175c <setlocale@plt>
   11f2c:	cmp	r0, #0
   11f30:	bne	11fa4 <__assert_fail@plt+0x710>
   11f34:	mov	r2, #5
   11f38:	ldr	r1, [pc, #212]	; 12014 <__assert_fail@plt+0x780>
   11f3c:	mov	r0, #0
   11f40:	bl	11540 <dcgettext@plt>
   11f44:	ldr	r3, [pc, #156]	; 11fe8 <__assert_fail@plt+0x754>
   11f48:	ldr	r2, [pc, #188]	; 1200c <__assert_fail@plt+0x778>
   11f4c:	mov	r1, r0
   11f50:	mov	r0, #1
   11f54:	bl	11714 <__printf_chk@plt>
   11f58:	mov	r2, #5
   11f5c:	ldr	r1, [pc, #180]	; 12018 <__assert_fail@plt+0x784>
   11f60:	mov	r0, #0
   11f64:	bl	11540 <dcgettext@plt>
   11f68:	ldr	r2, [pc, #172]	; 1201c <__assert_fail@plt+0x788>
   11f6c:	cmp	r6, r7
   11f70:	ldr	r3, [pc, #168]	; 12020 <__assert_fail@plt+0x78c>
   11f74:	moveq	r3, r2
   11f78:	mov	r2, r6
   11f7c:	mov	r1, r0
   11f80:	mov	r0, #1
   11f84:	bl	11714 <__printf_chk@plt>
   11f88:	b	11df4 <__assert_fail@plt+0x560>
   11f8c:	mov	r0, r8
   11f90:	bl	114a4 <strcmp@plt>
   11f94:	add	r6, r6, #8
   11f98:	cmp	r0, #0
   11f9c:	bne	11edc <__assert_fail@plt+0x648>
   11fa0:	b	11eec <__assert_fail@plt+0x658>
   11fa4:	mov	r2, #3
   11fa8:	ldr	r1, [pc, #116]	; 12024 <__assert_fail@plt+0x790>
   11fac:	bl	11834 <strncmp@plt>
   11fb0:	cmp	r0, #0
   11fb4:	beq	11f34 <__assert_fail@plt+0x6a0>
   11fb8:	mov	r2, #5
   11fbc:	ldr	r1, [pc, #100]	; 12028 <__assert_fail@plt+0x794>
   11fc0:	mov	r0, #0
   11fc4:	bl	11540 <dcgettext@plt>
   11fc8:	ldr	r1, [r4]
   11fcc:	bl	11480 <fputs_unlocked@plt>
   11fd0:	b	11f34 <__assert_fail@plt+0x6a0>
   11fd4:	strdeq	sl, [r2], -r8
   11fd8:	andeq	sl, r2, r0, ror #3
   11fdc:	andeq	r9, r1, r7, asr #4
   11fe0:	andeq	r9, r1, lr, ror #4
   11fe4:	andeq	sl, r2, r4, ror #3
   11fe8:	andeq	r9, r1, r0, asr #4
   11fec:	andeq	r9, r1, sp, lsl #5
   11ff0:			; <UNDEFINED> instruction: 0x000192bf
   11ff4:	andeq	r9, r1, sl, lsl #6
   11ff8:	andeq	r9, r1, r3, asr r3
   11ffc:	andeq	r9, r1, r2, lsr #8
   12000:	andeq	r9, r1, pc, asr #8
   12004:			; <UNDEFINED> instruction: 0x000191b8
   12008:	andeq	r9, r1, r5, lsl #9
   1200c:	muleq	r1, ip, r4
   12010:	andeq	r9, r1, r4, asr #9
   12014:	andeq	r9, r1, sp, lsl r5
   12018:	andeq	r9, r1, r8, lsr r5
   1201c:	andeq	r9, r1, r6, asr #13
   12020:	andeq	r9, r1, sl, ror #10
   12024:	ldrdeq	r9, [r1], -r2
   12028:	ldrdeq	r9, [r1], -r6
   1202c:	push	{r4, r5, r6, r7, r8, r9, lr}
   12030:	sub	sp, sp, #116	; 0x74
   12034:	mov	r4, #0
   12038:	subs	r6, r0, #0
   1203c:	mov	r5, r1
   12040:	str	r4, [sp]
   12044:	str	r4, [sp, #4]
   12048:	bne	120ac <__assert_fail@plt+0x818>
   1204c:	add	r0, sp, #4
   12050:	bl	117ec <getfscreatecon@plt>
   12054:	cmp	r0, r4
   12058:	blt	12074 <__assert_fail@plt+0x7e0>
   1205c:	ldr	r1, [sp, #4]
   12060:	cmp	r1, r4
   12064:	bne	1207c <__assert_fail@plt+0x7e8>
   12068:	bl	116e4 <__errno_location@plt>
   1206c:	mov	r3, #61	; 0x3d
   12070:	str	r3, [r0]
   12074:	mvn	r5, #0
   12078:	b	120a0 <__assert_fail@plt+0x80c>
   1207c:	mov	r0, r5
   12080:	bl	114c8 <lsetfilecon@plt>
   12084:	mov	r5, r0
   12088:	bl	116e4 <__errno_location@plt>
   1208c:	ldr	r6, [r0]
   12090:	mov	r4, r0
   12094:	ldr	r0, [sp, #4]
   12098:	bl	117d4 <freecon@plt>
   1209c:	str	r6, [r4]
   120a0:	mov	r0, r5
   120a4:	add	sp, sp, #116	; 0x74
   120a8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   120ac:	mov	r1, #32768	; 0x8000
   120b0:	mov	r0, r5
   120b4:	bl	11618 <open64@plt>
   120b8:	cmn	r0, #1
   120bc:	mov	r7, r0
   120c0:	bne	12104 <__assert_fail@plt+0x870>
   120c4:	bl	116e4 <__errno_location@plt>
   120c8:	ldr	r3, [r0]
   120cc:	cmp	r3, #40	; 0x28
   120d0:	bne	120e8 <__assert_fail@plt+0x854>
   120d4:	add	r1, sp, #8
   120d8:	mov	r0, r5
   120dc:	bl	19174 <lchmod@@Base+0x3738>
   120e0:	cmp	r0, #0
   120e4:	bge	12114 <__assert_fail@plt+0x880>
   120e8:	bl	116e4 <__errno_location@plt>
   120ec:	mov	r4, #0
   120f0:	mov	r5, r7
   120f4:	mov	r8, r4
   120f8:	mov	r6, r0
   120fc:	ldr	r9, [r0]
   12100:	b	121f0 <__assert_fail@plt+0x95c>
   12104:	add	r1, sp, #8
   12108:	bl	19164 <lchmod@@Base+0x3728>
   1210c:	cmp	r0, #0
   12110:	blt	12248 <__assert_fail@plt+0x9b4>
   12114:	ldr	r3, [sp, #24]
   12118:	mov	r2, r5
   1211c:	mov	r1, sp
   12120:	mov	r0, r6
   12124:	bl	11468 <selabel_lookup@plt>
   12128:	cmp	r0, #0
   1212c:	bge	12154 <__assert_fail@plt+0x8c0>
   12130:	bl	116e4 <__errno_location@plt>
   12134:	ldr	r3, [r0]
   12138:	cmp	r3, #2
   1213c:	moveq	r3, #61	; 0x3d
   12140:	streq	r3, [r0]
   12144:	mov	r4, #0
   12148:	mov	r8, r4
   1214c:	mvn	r5, #0
   12150:	b	121d4 <__assert_fail@plt+0x940>
   12154:	ldr	r0, [sp]
   12158:	bl	1151c <context_new@plt>
   1215c:	subs	r8, r0, #0
   12160:	beq	12144 <__assert_fail@plt+0x8b0>
   12164:	cmn	r7, #1
   12168:	add	r1, sp, #4
   1216c:	beq	12218 <__assert_fail@plt+0x984>
   12170:	mov	r0, r7
   12174:	bl	17848 <lchmod@@Base+0x1e0c>
   12178:	cmp	r0, #0
   1217c:	blt	12240 <__assert_fail@plt+0x9ac>
   12180:	ldr	r0, [sp, #4]
   12184:	bl	1151c <context_new@plt>
   12188:	subs	r4, r0, #0
   1218c:	beq	1214c <__assert_fail@plt+0x8b8>
   12190:	mov	r0, r8
   12194:	bl	114b0 <context_type_get@plt>
   12198:	subs	r1, r0, #0
   1219c:	beq	1214c <__assert_fail@plt+0x8b8>
   121a0:	mov	r0, r4
   121a4:	bl	1154c <context_type_set@plt>
   121a8:	cmp	r0, #0
   121ac:	bne	1214c <__assert_fail@plt+0x8b8>
   121b0:	mov	r0, r4
   121b4:	bl	11804 <context_str@plt>
   121b8:	subs	r1, r0, #0
   121bc:	beq	1214c <__assert_fail@plt+0x8b8>
   121c0:	cmn	r7, #1
   121c4:	beq	12234 <__assert_fail@plt+0x9a0>
   121c8:	mov	r0, r7
   121cc:	bl	11768 <fsetfilecon@plt>
   121d0:	mov	r5, r0
   121d4:	bl	116e4 <__errno_location@plt>
   121d8:	cmn	r7, #1
   121dc:	mov	r6, r0
   121e0:	ldr	r9, [r0]
   121e4:	beq	121f0 <__assert_fail@plt+0x95c>
   121e8:	mov	r0, r7
   121ec:	bl	1184c <close@plt>
   121f0:	mov	r0, r8
   121f4:	bl	11660 <context_free@plt>
   121f8:	mov	r0, r4
   121fc:	bl	11660 <context_free@plt>
   12200:	ldr	r0, [sp]
   12204:	bl	117d4 <freecon@plt>
   12208:	ldr	r0, [sp, #4]
   1220c:	bl	117d4 <freecon@plt>
   12210:	str	r9, [r6]
   12214:	b	120a0 <__assert_fail@plt+0x80c>
   12218:	mov	r0, r5
   1221c:	bl	17830 <lchmod@@Base+0x1df4>
   12220:	cmp	r0, #0
   12224:	bge	12180 <__assert_fail@plt+0x8ec>
   12228:	mov	r5, r7
   1222c:	mov	r4, #0
   12230:	b	121d4 <__assert_fail@plt+0x940>
   12234:	mov	r0, r5
   12238:	bl	114c8 <lsetfilecon@plt>
   1223c:	b	121d0 <__assert_fail@plt+0x93c>
   12240:	mov	r4, #0
   12244:	b	1214c <__assert_fail@plt+0x8b8>
   12248:	bl	116e4 <__errno_location@plt>
   1224c:	mov	r8, r4
   12250:	mvn	r5, #0
   12254:	mov	r6, r0
   12258:	ldr	r9, [r0]
   1225c:	b	121e8 <__assert_fail@plt+0x954>
   12260:	push	{r4, r5, r6, r7, r8, r9, lr}
   12264:	sub	sp, sp, #20
   12268:	ldrb	r3, [r1]
   1226c:	mov	r6, #0
   12270:	mov	r7, r0
   12274:	cmp	r3, #47	; 0x2f
   12278:	mov	r4, r1
   1227c:	mov	r5, r2
   12280:	str	r6, [sp]
   12284:	str	r6, [sp, #4]
   12288:	beq	122a4 <__assert_fail@plt+0xa10>
   1228c:	mov	r0, r4
   12290:	mov	r1, #2
   12294:	bl	12540 <__assert_fail@plt+0xcac>
   12298:	subs	r6, r0, #0
   1229c:	mov	r4, r6
   122a0:	beq	12414 <__assert_fail@plt+0xb80>
   122a4:	mov	r3, r5
   122a8:	mov	r2, r4
   122ac:	mov	r1, sp
   122b0:	mov	r0, r7
   122b4:	bl	11468 <selabel_lookup@plt>
   122b8:	cmp	r0, #0
   122bc:	bge	122e0 <__assert_fail@plt+0xa4c>
   122c0:	bl	116e4 <__errno_location@plt>
   122c4:	ldr	r3, [r0]
   122c8:	cmp	r3, #2
   122cc:	moveq	r3, #61	; 0x3d
   122d0:	streq	r3, [r0]
   122d4:	mov	r4, #0
   122d8:	mov	r7, r4
   122dc:	b	12418 <__assert_fail@plt+0xb84>
   122e0:	mov	r3, #0
   122e4:	mov	r0, r4
   122e8:	str	r3, [sp, #8]
   122ec:	str	r3, [sp, #12]
   122f0:	bl	12c44 <__assert_fail@plt+0x13b0>
   122f4:	mov	r7, r0
   122f8:	add	r0, sp, #8
   122fc:	bl	115dc <getcon@plt>
   12300:	cmp	r0, #0
   12304:	bge	123d8 <__assert_fail@plt+0xb44>
   12308:	mvn	r4, #0
   1230c:	bl	116e4 <__errno_location@plt>
   12310:	ldr	r8, [r0]
   12314:	mov	r5, r0
   12318:	mov	r0, r7
   1231c:	bl	12da0 <__assert_fail@plt+0x150c>
   12320:	ldr	r0, [sp, #8]
   12324:	bl	117d4 <freecon@plt>
   12328:	ldr	r0, [sp, #12]
   1232c:	bl	117d4 <freecon@plt>
   12330:	cmp	r4, #0
   12334:	str	r8, [r5]
   12338:	blt	122d4 <__assert_fail@plt+0xa40>
   1233c:	ldr	r0, [sp]
   12340:	bl	1151c <context_new@plt>
   12344:	subs	r7, r0, #0
   12348:	beq	12420 <__assert_fail@plt+0xb8c>
   1234c:	ldr	r0, [sp, #4]
   12350:	bl	1151c <context_new@plt>
   12354:	subs	r4, r0, #0
   12358:	beq	12418 <__assert_fail@plt+0xb84>
   1235c:	mov	r0, r7
   12360:	bl	114b0 <context_type_get@plt>
   12364:	subs	r1, r0, #0
   12368:	beq	12418 <__assert_fail@plt+0xb84>
   1236c:	mov	r0, r4
   12370:	bl	1154c <context_type_set@plt>
   12374:	cmp	r0, #0
   12378:	bne	12418 <__assert_fail@plt+0xb84>
   1237c:	mov	r0, r4
   12380:	bl	11804 <context_str@plt>
   12384:	cmp	r0, #0
   12388:	beq	12418 <__assert_fail@plt+0xb84>
   1238c:	bl	116d8 <setfscreatecon@plt>
   12390:	mov	r5, r0
   12394:	bl	116e4 <__errno_location@plt>
   12398:	ldr	r9, [r0]
   1239c:	mov	r8, r0
   123a0:	mov	r0, r7
   123a4:	bl	11660 <context_free@plt>
   123a8:	mov	r0, r4
   123ac:	bl	11660 <context_free@plt>
   123b0:	ldr	r0, [sp]
   123b4:	bl	117d4 <freecon@plt>
   123b8:	ldr	r0, [sp, #4]
   123bc:	bl	117d4 <freecon@plt>
   123c0:	mov	r0, r6
   123c4:	bl	12da0 <__assert_fail@plt+0x150c>
   123c8:	mov	r0, r5
   123cc:	str	r9, [r8]
   123d0:	add	sp, sp, #20
   123d4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   123d8:	add	r1, sp, #12
   123dc:	mov	r0, r7
   123e0:	bl	17818 <lchmod@@Base+0x1ddc>
   123e4:	cmp	r0, #0
   123e8:	blt	12308 <__assert_fail@plt+0xa74>
   123ec:	mov	r0, r5
   123f0:	bl	11870 <mode_to_security_class@plt>
   123f4:	subs	r2, r0, #0
   123f8:	beq	12308 <__assert_fail@plt+0xa74>
   123fc:	add	r3, sp, #4
   12400:	ldr	r1, [sp, #12]
   12404:	ldr	r0, [sp, #8]
   12408:	bl	117a4 <security_compute_create@plt>
   1240c:	mov	r4, r0
   12410:	b	1230c <__assert_fail@plt+0xa78>
   12414:	mov	r7, r6
   12418:	mvn	r5, #0
   1241c:	b	12394 <__assert_fail@plt+0xb00>
   12420:	mov	r4, r7
   12424:	b	12418 <__assert_fail@plt+0xb84>
   12428:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1242c:	mov	r7, r0
   12430:	ldrb	r3, [r1]
   12434:	mov	r0, r1
   12438:	mov	r4, r2
   1243c:	cmp	r3, #47	; 0x2f
   12440:	beq	12460 <__assert_fail@plt+0xbcc>
   12444:	mov	r1, #2
   12448:	bl	12540 <__assert_fail@plt+0xcac>
   1244c:	subs	r5, r0, #0
   12450:	movne	r0, r5
   12454:	bne	12464 <__assert_fail@plt+0xbd0>
   12458:	mov	r4, r5
   1245c:	b	12498 <__assert_fail@plt+0xc04>
   12460:	mov	r5, #0
   12464:	cmp	r4, #0
   12468:	bne	124a4 <__assert_fail@plt+0xc10>
   1246c:	mov	r1, r0
   12470:	mov	r0, r7
   12474:	bl	1202c <__assert_fail@plt+0x798>
   12478:	adds	r4, r0, #1
   1247c:	movne	r4, #1
   12480:	bl	116e4 <__errno_location@plt>
   12484:	ldr	r7, [r0]
   12488:	mov	r6, r0
   1248c:	mov	r0, r5
   12490:	bl	12da0 <__assert_fail@plt+0x150c>
   12494:	str	r7, [r6]
   12498:	mov	r0, r4
   1249c:	add	sp, sp, #12
   124a0:	pop	{r4, r5, r6, r7, pc}
   124a4:	mov	r4, #0
   124a8:	str	r0, [sp]
   124ac:	mov	r2, r4
   124b0:	mov	r1, #16
   124b4:	mov	r0, sp
   124b8:	str	r4, [sp, #4]
   124bc:	bl	1827c <lchmod@@Base+0x2840>
   124c0:	mov	r6, r0
   124c4:	mov	r0, r6
   124c8:	bl	1441c <__assert_fail@plt+0x2b88>
   124cc:	cmp	r0, #0
   124d0:	bne	1250c <__assert_fail@plt+0xc78>
   124d4:	bl	116e4 <__errno_location@plt>
   124d8:	ldr	r3, [r0]
   124dc:	mov	r7, r0
   124e0:	cmp	r3, #0
   124e4:	mov	r0, r6
   124e8:	movne	r4, r3
   124ec:	bl	14304 <__assert_fail@plt+0x2a70>
   124f0:	cmp	r0, #0
   124f4:	mov	r0, r5
   124f8:	ldrne	r4, [r7]
   124fc:	bl	12da0 <__assert_fail@plt+0x150c>
   12500:	clz	r4, r4
   12504:	lsr	r4, r4, #5
   12508:	b	12498 <__assert_fail@plt+0xc04>
   1250c:	ldr	r1, [r6, #24]
   12510:	mov	r0, r7
   12514:	bl	1202c <__assert_fail@plt+0x798>
   12518:	cmp	r0, #0
   1251c:	bge	124c4 <__assert_fail@plt+0xc30>
   12520:	bl	116e4 <__errno_location@plt>
   12524:	ldr	r4, [r0]
   12528:	b	124c4 <__assert_fail@plt+0xc30>
   1252c:	mov	r3, r0
   12530:	ldr	r0, [r3], #8
   12534:	cmp	r0, r3
   12538:	bxeq	lr
   1253c:	b	12da0 <__assert_fail@plt+0x150c>
   12540:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12544:	sub	sp, sp, #3232	; 0xca0
   12548:	sub	sp, sp, #4
   1254c:	and	r3, r1, #3
   12550:	str	r3, [sp, #16]
   12554:	and	r2, r1, #3
   12558:	sub	r3, r3, #1
   1255c:	tst	r3, r2
   12560:	beq	12580 <__assert_fail@plt+0xcec>
   12564:	bl	116e4 <__errno_location@plt>
   12568:	mov	r3, #22
   1256c:	str	r3, [r0]
   12570:	mov	r0, #0
   12574:	add	sp, sp, #3232	; 0xca0
   12578:	add	sp, sp, #4
   1257c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12580:	cmp	r0, #0
   12584:	mov	r5, r0
   12588:	beq	12564 <__assert_fail@plt+0xcd0>
   1258c:	ldrb	r4, [r0]
   12590:	cmp	r4, #0
   12594:	bne	125a4 <__assert_fail@plt+0xd10>
   12598:	bl	116e4 <__errno_location@plt>
   1259c:	mov	r3, #2
   125a0:	b	1256c <__assert_fail@plt+0xcd8>
   125a4:	add	r3, sp, #1168	; 0x490
   125a8:	add	r3, r3, #8
   125ac:	add	r6, sp, #144	; 0x90
   125b0:	str	r3, [sp, #1168]	; 0x490
   125b4:	add	r2, sp, #2208	; 0x8a0
   125b8:	mov	r3, #1024	; 0x400
   125bc:	cmp	r4, #47	; 0x2f
   125c0:	mov	r7, r1
   125c4:	str	r3, [sp, #1172]	; 0x494
   125c8:	str	r2, [sp, #2200]	; 0x898
   125cc:	str	r3, [sp, #2204]	; 0x89c
   125d0:	str	r6, [sp, #136]	; 0x88
   125d4:	str	r3, [sp, #140]	; 0x8c
   125d8:	subne	r4, r6, #8
   125dc:	bne	1261c <__assert_fail@plt+0xd88>
   125e0:	strb	r4, [sp, #144]	; 0x90
   125e4:	add	r0, r6, #1
   125e8:	b	1263c <__assert_fail@plt+0xda8>
   125ec:	bl	116e4 <__errno_location@plt>
   125f0:	ldr	r3, [r0]
   125f4:	cmp	r3, #12
   125f8:	beq	12614 <__assert_fail@plt+0xd80>
   125fc:	cmp	r3, #34	; 0x22
   12600:	bne	12ae0 <__assert_fail@plt+0x124c>
   12604:	mov	r0, r4
   12608:	bl	176b4 <lchmod@@Base+0x1c78>
   1260c:	cmp	r0, #0
   12610:	bne	12618 <__assert_fail@plt+0xd84>
   12614:	bl	1823c <lchmod@@Base+0x2800>
   12618:	ldr	r6, [sp, #136]	; 0x88
   1261c:	ldr	r1, [sp, #140]	; 0x8c
   12620:	mov	r0, r6
   12624:	bl	11690 <getcwd@plt>
   12628:	cmp	r0, #0
   1262c:	beq	125ec <__assert_fail@plt+0xd58>
   12630:	mov	r1, #0
   12634:	mov	r0, r6
   12638:	bl	1157c <rawmemchr@plt>
   1263c:	mov	r4, r6
   12640:	mov	r6, r0
   12644:	mov	r9, #0
   12648:	and	r3, r7, #4
   1264c:	str	r3, [sp, #24]
   12650:	str	r9, [sp, #8]
   12654:	str	r9, [sp, #20]
   12658:	ldrb	r3, [r5]
   1265c:	cmp	r3, #0
   12660:	beq	12a58 <__assert_fail@plt+0x11c4>
   12664:	mov	r8, r5
   12668:	b	12670 <__assert_fail@plt+0xddc>
   1266c:	mov	r8, r2
   12670:	mov	r2, r8
   12674:	ldrb	r3, [r2], #1
   12678:	cmp	r3, #47	; 0x2f
   1267c:	beq	1266c <__assert_fail@plt+0xdd8>
   12680:	mov	r7, r8
   12684:	mov	r2, r7
   12688:	mov	r5, r7
   1268c:	ldrb	r1, [r2], #1
   12690:	cmp	r1, #0
   12694:	cmpne	r1, #47	; 0x2f
   12698:	bne	12754 <__assert_fail@plt+0xec0>
   1269c:	subs	fp, r7, r8
   126a0:	beq	12a58 <__assert_fail@plt+0x11c4>
   126a4:	cmp	fp, #1
   126a8:	bne	1275c <__assert_fail@plt+0xec8>
   126ac:	cmp	r3, #46	; 0x2e
   126b0:	beq	12658 <__assert_fail@plt+0xdc4>
   126b4:	ldrb	r3, [r6, #-1]
   126b8:	add	sl, fp, #2
   126bc:	cmp	r3, #47	; 0x2f
   126c0:	movne	r3, #47	; 0x2f
   126c4:	strbne	r3, [r6]
   126c8:	addne	r6, r6, #1
   126cc:	ldr	r3, [sp, #140]	; 0x8c
   126d0:	add	r3, r4, r3
   126d4:	sub	r3, r3, r6
   126d8:	cmp	r3, sl
   126dc:	bcc	127a0 <__assert_fail@plt+0xf0c>
   126e0:	mov	r0, r6
   126e4:	mov	r2, fp
   126e8:	mov	r1, r8
   126ec:	bl	1166c <mempcpy@plt>
   126f0:	mov	r3, #0
   126f4:	strb	r3, [r0]
   126f8:	ldr	r3, [sp, #24]
   126fc:	mov	r6, r0
   12700:	cmp	r3, #0
   12704:	bne	1294c <__assert_fail@plt+0x10b8>
   12708:	ldr	r3, [sp, #2200]	; 0x898
   1270c:	mov	r0, r4
   12710:	str	r3, [sp, #12]
   12714:	ldr	r3, [sp, #2204]	; 0x89c
   12718:	ldr	r1, [sp, #12]
   1271c:	sub	r3, r3, #1
   12720:	mov	r2, r3
   12724:	str	r3, [sp, #28]
   12728:	bl	115ac <readlink@plt>
   1272c:	ldr	r3, [sp, #28]
   12730:	cmp	r3, r0
   12734:	mov	sl, r0
   12738:	bgt	127c0 <__assert_fail@plt+0xf2c>
   1273c:	add	r0, sp, #2192	; 0x890
   12740:	add	r0, r0, #8
   12744:	bl	176b4 <lchmod@@Base+0x1c78>
   12748:	cmp	r0, #0
   1274c:	bne	12708 <__assert_fail@plt+0xe74>
   12750:	b	12614 <__assert_fail@plt+0xd80>
   12754:	mov	r7, r2
   12758:	b	12684 <__assert_fail@plt+0xdf0>
   1275c:	cmp	fp, #2
   12760:	cmpeq	r3, #46	; 0x2e
   12764:	bne	126b4 <__assert_fail@plt+0xe20>
   12768:	ldrb	r3, [r8, #1]
   1276c:	cmp	r3, #46	; 0x2e
   12770:	bne	126b4 <__assert_fail@plt+0xe20>
   12774:	add	r3, r4, #1
   12778:	cmp	r6, r3
   1277c:	bls	12658 <__assert_fail@plt+0xdc4>
   12780:	sub	r3, r6, #1
   12784:	cmp	r4, r3
   12788:	mov	r6, r3
   1278c:	beq	12658 <__assert_fail@plt+0xdc4>
   12790:	ldrb	r2, [r3, #-1]!
   12794:	cmp	r2, #47	; 0x2f
   12798:	bne	12784 <__assert_fail@plt+0xef0>
   1279c:	b	12658 <__assert_fail@plt+0xdc4>
   127a0:	add	r0, sp, #136	; 0x88
   127a4:	bl	17724 <lchmod@@Base+0x1ce8>
   127a8:	sub	r6, r6, r4
   127ac:	cmp	r0, #0
   127b0:	beq	12614 <__assert_fail@plt+0xd80>
   127b4:	ldr	r4, [sp, #136]	; 0x88
   127b8:	add	r6, r4, r6
   127bc:	b	126cc <__assert_fail@plt+0xe38>
   127c0:	cmp	r0, #0
   127c4:	blt	1294c <__assert_fail@plt+0x10b8>
   127c8:	ldr	r3, [sp, #20]
   127cc:	cmp	r3, #19
   127d0:	addle	r3, r3, #1
   127d4:	strle	r3, [sp, #20]
   127d8:	ble	12874 <__assert_fail@plt+0xfe0>
   127dc:	ldrb	r3, [r8]
   127e0:	cmp	r3, #0
   127e4:	beq	12874 <__assert_fail@plt+0xfe0>
   127e8:	rsb	fp, fp, #0
   127ec:	mov	r3, #0
   127f0:	strb	r3, [r6, fp]
   127f4:	ldrb	r0, [r4]
   127f8:	ldr	r3, [pc, #808]	; 12b28 <__assert_fail@plt+0x1294>
   127fc:	add	r1, sp, #32
   12800:	cmp	r0, #0
   12804:	movne	r0, r4
   12808:	moveq	r0, r3
   1280c:	bl	19154 <lchmod@@Base+0x3718>
   12810:	cmp	r0, #0
   12814:	bne	12b04 <__assert_fail@plt+0x1270>
   12818:	ldrb	r3, [r8]
   1281c:	cmp	r9, #0
   12820:	strb	r3, [r6, fp]
   12824:	bne	1284c <__assert_fail@plt+0xfb8>
   12828:	ldr	r3, [pc, #764]	; 12b2c <__assert_fail@plt+0x1298>
   1282c:	mov	r1, r9
   12830:	str	r3, [sp]
   12834:	ldr	r2, [pc, #756]	; 12b30 <__assert_fail@plt+0x129c>
   12838:	ldr	r3, [pc, #756]	; 12b34 <__assert_fail@plt+0x12a0>
   1283c:	mov	r0, #7
   12840:	bl	152dc <__assert_fail@plt+0x3a48>
   12844:	subs	r9, r0, #0
   12848:	beq	12614 <__assert_fail@plt+0xd80>
   1284c:	add	r2, sp, #32
   12850:	mov	r1, r8
   12854:	mov	r0, r9
   12858:	bl	12d5c <__assert_fail@plt+0x14c8>
   1285c:	cmp	r0, #0
   12860:	bne	12aec <__assert_fail@plt+0x1258>
   12864:	add	r2, sp, #32
   12868:	mov	r1, r8
   1286c:	mov	r0, r9
   12870:	bl	12cf4 <__assert_fail@plt+0x1460>
   12874:	ldr	r2, [sp, #12]
   12878:	mov	r3, #0
   1287c:	mov	r0, r7
   12880:	strb	r3, [r2, sl]
   12884:	ldr	r3, [sp, #8]
   12888:	ldr	fp, [sp, #1168]	; 0x490
   1288c:	cmp	r3, #0
   12890:	subne	r8, r7, fp
   12894:	ldreq	r8, [sp, #8]
   12898:	bl	116b4 <strlen@plt>
   1289c:	adds	r3, sl, r0
   128a0:	mov	r7, r0
   128a4:	bcs	12614 <__assert_fail@plt+0xd80>
   128a8:	ldr	r2, [sp, #1172]	; 0x494
   128ac:	cmp	r3, r2
   128b0:	bcs	1292c <__assert_fail@plt+0x1098>
   128b4:	ldr	r3, [sp, #8]
   128b8:	add	r2, r7, #1
   128bc:	cmp	r3, #0
   128c0:	addne	r5, fp, r8
   128c4:	mov	r1, r5
   128c8:	add	r0, fp, sl
   128cc:	bl	114d4 <memmove@plt>
   128d0:	ldr	r1, [sp, #12]
   128d4:	mov	r2, sl
   128d8:	mov	r0, fp
   128dc:	bl	11504 <memcpy@plt>
   128e0:	ldr	r3, [sp, #12]
   128e4:	add	r1, r4, #1
   128e8:	ldrb	r3, [r3]
   128ec:	cmp	r3, #47	; 0x2f
   128f0:	moveq	r6, r1
   128f4:	strbeq	r3, [r4]
   128f8:	mov	r5, r0
   128fc:	beq	12920 <__assert_fail@plt+0x108c>
   12900:	cmp	r6, r1
   12904:	bls	12920 <__assert_fail@plt+0x108c>
   12908:	sub	r6, r6, #1
   1290c:	cmp	r4, r6
   12910:	beq	12a50 <__assert_fail@plt+0x11bc>
   12914:	ldrb	r3, [r6, #-1]
   12918:	cmp	r3, #47	; 0x2f
   1291c:	bne	12908 <__assert_fail@plt+0x1074>
   12920:	mov	r3, #1
   12924:	str	r3, [sp, #8]
   12928:	b	12658 <__assert_fail@plt+0xdc4>
   1292c:	add	r0, sp, #1168	; 0x490
   12930:	str	r3, [sp, #28]
   12934:	bl	17724 <lchmod@@Base+0x1ce8>
   12938:	cmp	r0, #0
   1293c:	beq	12614 <__assert_fail@plt+0xd80>
   12940:	ldr	fp, [sp, #1168]	; 0x490
   12944:	ldr	r3, [sp, #28]
   12948:	b	128a8 <__assert_fail@plt+0x1014>
   1294c:	ldr	r3, [sp, #16]
   12950:	cmp	r3, #2
   12954:	movne	r3, r7
   12958:	beq	12658 <__assert_fail@plt+0xdc4>
   1295c:	ldrb	r2, [r3]
   12960:	cmp	r2, #47	; 0x2f
   12964:	beq	129cc <__assert_fail@plt+0x1138>
   12968:	ldr	r3, [sp, #24]
   1296c:	cmp	r3, #0
   12970:	beq	12a3c <__assert_fail@plt+0x11a8>
   12974:	ldrb	r2, [r7]
   12978:	cmp	r2, #0
   1297c:	moveq	r3, #512	; 0x200
   12980:	beq	12a28 <__assert_fail@plt+0x1194>
   12984:	mov	r0, #0
   12988:	cmp	r0, #0
   1298c:	beq	12658 <__assert_fail@plt+0xdc4>
   12990:	ldr	r3, [sp, #16]
   12994:	cmp	r3, #1
   12998:	bne	12b04 <__assert_fail@plt+0x1270>
   1299c:	bl	116e4 <__errno_location@plt>
   129a0:	ldr	r3, [r0]
   129a4:	cmp	r3, #2
   129a8:	bne	12b04 <__assert_fail@plt+0x1270>
   129ac:	ldr	r1, [pc, #388]	; 12b38 <__assert_fail@plt+0x12a4>
   129b0:	mov	r0, r7
   129b4:	bl	11888 <strspn@plt>
   129b8:	ldrb	r3, [r7, r0]
   129bc:	cmp	r3, #0
   129c0:	beq	12658 <__assert_fail@plt+0xdc4>
   129c4:	b	12b04 <__assert_fail@plt+0x1270>
   129c8:	mov	r3, r2
   129cc:	ldrb	r1, [r3, #1]
   129d0:	add	r2, r3, #1
   129d4:	cmp	r1, #47	; 0x2f
   129d8:	beq	129c8 <__assert_fail@plt+0x1134>
   129dc:	cmp	r1, #0
   129e0:	add	r3, r3, #2
   129e4:	beq	12a14 <__assert_fail@plt+0x1180>
   129e8:	cmp	r1, #46	; 0x2e
   129ec:	bne	12968 <__assert_fail@plt+0x10d4>
   129f0:	ldrb	r1, [r2, #1]
   129f4:	cmp	r1, #0
   129f8:	beq	12a14 <__assert_fail@plt+0x1180>
   129fc:	cmp	r1, #46	; 0x2e
   12a00:	bne	1295c <__assert_fail@plt+0x10c8>
   12a04:	ldrb	r2, [r2, #2]
   12a08:	cmp	r2, #47	; 0x2f
   12a0c:	cmpne	r2, #0
   12a10:	bne	1295c <__assert_fail@plt+0x10c8>
   12a14:	ldr	r1, [pc, #288]	; 12b3c <__assert_fail@plt+0x12a8>
   12a18:	mov	r0, r6
   12a1c:	bl	115d0 <strcpy@plt>
   12a20:	mov	r3, #512	; 0x200
   12a24:	mov	r2, #0
   12a28:	mov	r1, r4
   12a2c:	mvn	r0, #99	; 0x63
   12a30:	bl	114ec <faccessat@plt>
   12a34:	adds	r0, r0, #0
   12a38:	b	12a48 <__assert_fail@plt+0x11b4>
   12a3c:	bl	116e4 <__errno_location@plt>
   12a40:	ldr	r0, [r0]
   12a44:	subs	r0, r0, #22
   12a48:	movne	r0, #1
   12a4c:	b	12988 <__assert_fail@plt+0x10f4>
   12a50:	mov	r6, r4
   12a54:	b	12920 <__assert_fail@plt+0x108c>
   12a58:	add	r3, r4, #1
   12a5c:	cmp	r6, r3
   12a60:	bls	12a70 <__assert_fail@plt+0x11dc>
   12a64:	ldrb	r3, [r6, #-1]
   12a68:	cmp	r3, #47	; 0x2f
   12a6c:	subeq	r6, r6, #1
   12a70:	cmp	r9, #0
   12a74:	movne	r5, #0
   12a78:	bne	12ab0 <__assert_fail@plt+0x121c>
   12a7c:	add	r0, sp, #1168	; 0x490
   12a80:	bl	1252c <__assert_fail@plt+0xc98>
   12a84:	add	r0, sp, #2192	; 0x890
   12a88:	add	r0, r0, #8
   12a8c:	bl	1252c <__assert_fail@plt+0xc98>
   12a90:	mov	r3, #0
   12a94:	strb	r3, [r6], #1
   12a98:	add	r0, sp, #136	; 0x88
   12a9c:	sub	r1, r6, r4
   12aa0:	bl	17664 <lchmod@@Base+0x1c28>
   12aa4:	cmp	r0, #0
   12aa8:	bne	12574 <__assert_fail@plt+0xce0>
   12aac:	b	12614 <__assert_fail@plt+0xd80>
   12ab0:	mov	r0, r9
   12ab4:	bl	15448 <__assert_fail@plt+0x3bb4>
   12ab8:	add	r0, sp, #1168	; 0x490
   12abc:	bl	1252c <__assert_fail@plt+0xc98>
   12ac0:	add	r0, sp, #2192	; 0x890
   12ac4:	add	r0, r0, #8
   12ac8:	bl	1252c <__assert_fail@plt+0xc98>
   12acc:	cmp	r5, #0
   12ad0:	beq	12a90 <__assert_fail@plt+0x11fc>
   12ad4:	add	r0, sp, #136	; 0x88
   12ad8:	bl	1252c <__assert_fail@plt+0xc98>
   12adc:	b	12570 <__assert_fail@plt+0xcdc>
   12ae0:	mov	r4, r6
   12ae4:	mov	r5, #1
   12ae8:	b	12ab8 <__assert_fail@plt+0x1224>
   12aec:	ldr	r3, [sp, #16]
   12af0:	cmp	r3, #2
   12af4:	beq	12658 <__assert_fail@plt+0xdc4>
   12af8:	bl	116e4 <__errno_location@plt>
   12afc:	mov	r3, #40	; 0x28
   12b00:	str	r3, [r0]
   12b04:	cmp	r9, #0
   12b08:	movne	r5, #1
   12b0c:	bne	12ab0 <__assert_fail@plt+0x121c>
   12b10:	add	r0, sp, #1168	; 0x490
   12b14:	bl	1252c <__assert_fail@plt+0xc98>
   12b18:	add	r0, sp, #2192	; 0x890
   12b1c:	add	r0, r0, #8
   12b20:	bl	1252c <__assert_fail@plt+0xc98>
   12b24:	b	12ad4 <__assert_fail@plt+0x1240>
   12b28:	andeq	r9, r1, r3, asr r7
   12b2c:	andeq	r5, r1, r0, ror #18
   12b30:	ldrdeq	r5, [r1], -ip
   12b34:	andeq	r5, r1, r4, lsl r9
   12b38:	andeq	r9, r1, sl, asr #23
   12b3c:	andeq	r9, r1, r5, lsr #14
   12b40:	ldr	r3, [pc, #4]	; 12b4c <__assert_fail@plt+0x12b8>
   12b44:	str	r0, [r3]
   12b48:	bx	lr
   12b4c:	strdeq	sl, [r2], -r0
   12b50:	ldr	r3, [pc, #4]	; 12b5c <__assert_fail@plt+0x12c8>
   12b54:	strb	r0, [r3, #4]
   12b58:	bx	lr
   12b5c:	strdeq	sl, [r2], -r0
   12b60:	ldr	r3, [pc, #192]	; 12c28 <__assert_fail@plt+0x1394>
   12b64:	push	{r0, r1, r4, r5, r6, lr}
   12b68:	ldr	r0, [r3]
   12b6c:	bl	18470 <lchmod@@Base+0x2a34>
   12b70:	cmp	r0, #0
   12b74:	beq	12c0c <__assert_fail@plt+0x1378>
   12b78:	ldr	r3, [pc, #172]	; 12c2c <__assert_fail@plt+0x1398>
   12b7c:	mov	r4, r3
   12b80:	ldrb	r2, [r3, #4]
   12b84:	cmp	r2, #0
   12b88:	beq	12b9c <__assert_fail@plt+0x1308>
   12b8c:	bl	116e4 <__errno_location@plt>
   12b90:	ldr	r3, [r0]
   12b94:	cmp	r3, #32
   12b98:	beq	12c0c <__assert_fail@plt+0x1378>
   12b9c:	mov	r2, #5
   12ba0:	ldr	r1, [pc, #136]	; 12c30 <__assert_fail@plt+0x139c>
   12ba4:	mov	r0, #0
   12ba8:	bl	11540 <dcgettext@plt>
   12bac:	ldr	r4, [r4]
   12bb0:	cmp	r4, #0
   12bb4:	mov	r5, r0
   12bb8:	beq	12bf0 <__assert_fail@plt+0x135c>
   12bbc:	bl	116e4 <__errno_location@plt>
   12bc0:	ldr	r6, [r0]
   12bc4:	mov	r0, r4
   12bc8:	bl	17508 <lchmod@@Base+0x1acc>
   12bcc:	str	r5, [sp]
   12bd0:	ldr	r2, [pc, #92]	; 12c34 <__assert_fail@plt+0x13a0>
   12bd4:	mov	r1, r6
   12bd8:	mov	r3, r0
   12bdc:	mov	r0, #0
   12be0:	bl	1160c <error@plt>
   12be4:	ldr	r3, [pc, #76]	; 12c38 <__assert_fail@plt+0x13a4>
   12be8:	ldr	r0, [r3]
   12bec:	bl	114f8 <_exit@plt>
   12bf0:	bl	116e4 <__errno_location@plt>
   12bf4:	mov	r3, r5
   12bf8:	ldr	r2, [pc, #60]	; 12c3c <__assert_fail@plt+0x13a8>
   12bfc:	ldr	r1, [r0]
   12c00:	mov	r0, r4
   12c04:	bl	1160c <error@plt>
   12c08:	b	12be4 <__assert_fail@plt+0x1350>
   12c0c:	ldr	r3, [pc, #44]	; 12c40 <__assert_fail@plt+0x13ac>
   12c10:	ldr	r0, [r3]
   12c14:	bl	18470 <lchmod@@Base+0x2a34>
   12c18:	cmp	r0, #0
   12c1c:	bne	12be4 <__assert_fail@plt+0x1350>
   12c20:	add	sp, sp, #8
   12c24:	pop	{r4, r5, r6, pc}
   12c28:	andeq	sl, r2, r4, ror #3
   12c2c:	strdeq	sl, [r2], -r0
   12c30:	andeq	r9, r1, r7, lsr #14
   12c34:	andeq	r9, r1, r3, lsr r7
   12c38:	andeq	sl, r2, r8, lsl #3
   12c3c:	andeq	r9, r1, r7, lsr r7
   12c40:	andeq	sl, r2, r0, ror #3
   12c44:	push	{r4, lr}
   12c48:	bl	12c9c <__assert_fail@plt+0x1408>
   12c4c:	cmp	r0, #0
   12c50:	popne	{r4, pc}
   12c54:	bl	1823c <lchmod@@Base+0x2800>
   12c58:	push	{r4, r5, r6, lr}
   12c5c:	mov	r5, r0
   12c60:	ldrb	r4, [r0]
   12c64:	bl	183e0 <lchmod@@Base+0x29a4>
   12c68:	sub	r4, r4, #47	; 0x2f
   12c6c:	clz	r4, r4
   12c70:	lsr	r4, r4, #5
   12c74:	sub	r0, r0, r5
   12c78:	cmp	r0, r4
   12c7c:	bhi	12c84 <__assert_fail@plt+0x13f0>
   12c80:	pop	{r4, r5, r6, pc}
   12c84:	sub	r3, r0, #1
   12c88:	ldrb	r2, [r5, r3]
   12c8c:	cmp	r2, #47	; 0x2f
   12c90:	popne	{r4, r5, r6, pc}
   12c94:	mov	r0, r3
   12c98:	b	12c78 <__assert_fail@plt+0x13e4>
   12c9c:	push	{r4, r5, r6, lr}
   12ca0:	mov	r6, r0
   12ca4:	bl	12c58 <__assert_fail@plt+0x13c4>
   12ca8:	add	r3, r0, #1
   12cac:	mov	r4, r0
   12cb0:	cmp	r0, #0
   12cb4:	movne	r0, r3
   12cb8:	addeq	r0, r3, #1
   12cbc:	bl	18344 <lchmod@@Base+0x2908>
   12cc0:	subs	r5, r0, #0
   12cc4:	beq	12cec <__assert_fail@plt+0x1458>
   12cc8:	mov	r2, r4
   12ccc:	mov	r1, r6
   12cd0:	bl	11504 <memcpy@plt>
   12cd4:	cmp	r4, #0
   12cd8:	moveq	r3, #46	; 0x2e
   12cdc:	moveq	r4, #1
   12ce0:	strbeq	r3, [r5]
   12ce4:	mov	r3, #0
   12ce8:	strb	r3, [r5, r4]
   12cec:	mov	r0, r5
   12cf0:	pop	{r4, r5, r6, pc}
   12cf4:	push	{r4, r5, r6, r7, r8, lr}
   12cf8:	subs	r6, r0, #0
   12cfc:	popeq	{r4, r5, r6, r7, r8, pc}
   12d00:	mov	r0, #24
   12d04:	mov	r5, r2
   12d08:	mov	r7, r1
   12d0c:	bl	17da8 <lchmod@@Base+0x236c>
   12d10:	mov	r4, r0
   12d14:	mov	r0, r7
   12d18:	bl	18220 <lchmod@@Base+0x27e4>
   12d1c:	ldrd	r2, [r5, #96]	; 0x60
   12d20:	mov	r1, r4
   12d24:	strd	r2, [r4, #8]
   12d28:	ldrd	r2, [r5]
   12d2c:	strd	r2, [r4, #16]
   12d30:	str	r0, [r4]
   12d34:	mov	r0, r6
   12d38:	bl	157b0 <__assert_fail@plt+0x3f1c>
   12d3c:	cmp	r0, #0
   12d40:	bne	12d48 <__assert_fail@plt+0x14b4>
   12d44:	bl	1823c <lchmod@@Base+0x2800>
   12d48:	cmp	r4, r0
   12d4c:	popeq	{r4, r5, r6, r7, r8, pc}
   12d50:	mov	r0, r4
   12d54:	pop	{r4, r5, r6, r7, r8, lr}
   12d58:	b	15960 <__assert_fail@plt+0x40cc>
   12d5c:	subs	r3, r0, #0
   12d60:	beq	12d98 <__assert_fail@plt+0x1504>
   12d64:	push	{r4, r5, lr}
   12d68:	sub	sp, sp, #28
   12d6c:	ldrd	r4, [r2, #96]	; 0x60
   12d70:	ldrd	r2, [r2]
   12d74:	str	r1, [sp]
   12d78:	mov	r1, sp
   12d7c:	strd	r4, [sp, #8]
   12d80:	strd	r2, [sp, #16]
   12d84:	bl	150b8 <__assert_fail@plt+0x3824>
   12d88:	adds	r0, r0, #0
   12d8c:	movne	r0, #1
   12d90:	add	sp, sp, #28
   12d94:	pop	{r4, r5, pc}
   12d98:	mov	r0, r3
   12d9c:	bx	lr
   12da0:	push	{r0, r1, r2, r4, r5, lr}
   12da4:	mov	r5, r0
   12da8:	bl	116e4 <__errno_location@plt>
   12dac:	ldr	r3, [r0]
   12db0:	mov	r4, r0
   12db4:	str	r3, [sp]
   12db8:	str	r3, [sp, #4]
   12dbc:	mov	r3, #0
   12dc0:	str	r3, [r0]
   12dc4:	mov	r0, r5
   12dc8:	bl	114e0 <free@plt>
   12dcc:	ldr	r3, [r4]
   12dd0:	add	r2, sp, #8
   12dd4:	cmp	r3, #0
   12dd8:	moveq	r3, #4
   12ddc:	movne	r3, #0
   12de0:	add	r3, r2, r3
   12de4:	ldr	r3, [r3, #-8]
   12de8:	str	r3, [r4]
   12dec:	add	sp, sp, #12
   12df0:	pop	{r4, r5, pc}
   12df4:	ldrd	r2, [r1, #8]
   12df8:	push	{r4, r5, lr}
   12dfc:	ldrd	r4, [r0, #8]
   12e00:	cmp	r5, r3
   12e04:	cmpeq	r4, r2
   12e08:	bne	12e28 <__assert_fail@plt+0x1594>
   12e0c:	ldrd	r4, [r0]
   12e10:	ldrd	r2, [r1]
   12e14:	cmp	r5, r3
   12e18:	cmpeq	r4, r2
   12e1c:	moveq	r0, #1
   12e20:	movne	r0, #0
   12e24:	pop	{r4, r5, pc}
   12e28:	mov	r0, #0
   12e2c:	pop	{r4, r5, pc}
   12e30:	push	{r4, lr}
   12e34:	mov	r2, r1
   12e38:	mov	r3, #0
   12e3c:	ldrd	r0, [r0, #8]
   12e40:	bl	18f64 <lchmod@@Base+0x3528>
   12e44:	mov	r0, r2
   12e48:	pop	{r4, pc}
   12e4c:	push	{r4, lr}
   12e50:	mov	r2, r1
   12e54:	mov	r3, #0
   12e58:	ldrd	r0, [r0]
   12e5c:	bl	18f64 <lchmod@@Base+0x3528>
   12e60:	mov	r0, r2
   12e64:	pop	{r4, pc}
   12e68:	ldrd	r2, [r1]
   12e6c:	push	{r4, r5, lr}
   12e70:	ldrd	r4, [r0]
   12e74:	cmp	r5, r3
   12e78:	cmpeq	r4, r2
   12e7c:	moveq	r0, #1
   12e80:	movne	r0, #0
   12e84:	pop	{r4, r5, pc}
   12e88:	ldr	r3, [r0]
   12e8c:	push	{r4, r5, lr}
   12e90:	ldrd	r4, [r3, #160]	; 0xa0
   12e94:	ldr	r3, [r1]
   12e98:	ldrd	r2, [r3, #160]	; 0xa0
   12e9c:	cmp	r5, r3
   12ea0:	cmpeq	r4, r2
   12ea4:	movhi	r0, #1
   12ea8:	movls	r0, #0
   12eac:	movcc	r3, #1
   12eb0:	movcs	r3, #0
   12eb4:	sub	r0, r0, r3
   12eb8:	pop	{r4, r5, pc}
   12ebc:	ldr	r3, [r1, #48]	; 0x30
   12ec0:	push	{r4, r5, r6, lr}
   12ec4:	cmp	r3, #0
   12ec8:	mov	r4, r1
   12ecc:	add	r5, r1, #64	; 0x40
   12ed0:	ldr	r3, [r0, #48]	; 0x30
   12ed4:	bne	12ee0 <__assert_fail@plt+0x164c>
   12ed8:	tst	r3, #1
   12edc:	movne	r2, #1
   12ee0:	lsl	r3, r3, #30
   12ee4:	orrs	r3, r2, r3, lsr #31
   12ee8:	beq	12f54 <__assert_fail@plt+0x16c0>
   12eec:	mov	r1, r5
   12ef0:	ldr	r0, [r4, #24]
   12ef4:	bl	19154 <lchmod@@Base+0x3718>
   12ef8:	cmp	r0, #0
   12efc:	beq	12f7c <__assert_fail@plt+0x16e8>
   12f00:	bl	116e4 <__errno_location@plt>
   12f04:	ldr	r3, [r0]
   12f08:	mov	r6, r0
   12f0c:	cmp	r3, #2
   12f10:	bne	12f34 <__assert_fail@plt+0x16a0>
   12f14:	mov	r1, r5
   12f18:	ldr	r0, [r4, #24]
   12f1c:	bl	19174 <lchmod@@Base+0x3738>
   12f20:	cmp	r0, #0
   12f24:	bne	12f34 <__assert_fail@plt+0x16a0>
   12f28:	str	r0, [r6]
   12f2c:	mov	r0, #13
   12f30:	pop	{r4, r5, r6, pc}
   12f34:	ldr	r3, [r6]
   12f38:	str	r3, [r4, #32]
   12f3c:	mov	r2, #104	; 0x68
   12f40:	mov	r1, #0
   12f44:	mov	r0, r5
   12f48:	bl	11708 <memset@plt>
   12f4c:	mov	r0, #10
   12f50:	pop	{r4, r5, r6, pc}
   12f54:	mov	r3, #256	; 0x100
   12f58:	mov	r2, r5
   12f5c:	ldr	r1, [r4, #24]
   12f60:	ldr	r0, [r0, #32]
   12f64:	bl	19184 <lchmod@@Base+0x3748>
   12f68:	cmp	r0, #0
   12f6c:	beq	12f7c <__assert_fail@plt+0x16e8>
   12f70:	bl	116e4 <__errno_location@plt>
   12f74:	ldr	r3, [r0]
   12f78:	b	12f38 <__assert_fail@plt+0x16a4>
   12f7c:	ldr	r0, [r4, #80]	; 0x50
   12f80:	and	r0, r0, #61440	; 0xf000
   12f84:	cmp	r0, #16384	; 0x4000
   12f88:	bne	12fcc <__assert_fail@plt+0x1738>
   12f8c:	ldrb	r3, [r4, #168]	; 0xa8
   12f90:	cmp	r3, #46	; 0x2e
   12f94:	bne	12fe4 <__assert_fail@plt+0x1750>
   12f98:	ldrb	r3, [r4, #169]	; 0xa9
   12f9c:	cmp	r3, #0
   12fa0:	beq	12fb8 <__assert_fail@plt+0x1724>
   12fa4:	ldr	r3, [r4, #168]	; 0xa8
   12fa8:	bic	r3, r3, #-16777216	; 0xff000000
   12fac:	bic	r3, r3, #255	; 0xff
   12fb0:	cmp	r3, #11776	; 0x2e00
   12fb4:	bne	12fe4 <__assert_fail@plt+0x1750>
   12fb8:	ldr	r0, [r4, #48]	; 0x30
   12fbc:	cmp	r0, #0
   12fc0:	moveq	r0, #1
   12fc4:	movne	r0, #5
   12fc8:	pop	{r4, r5, r6, pc}
   12fcc:	cmp	r0, #40960	; 0xa000
   12fd0:	beq	12fec <__assert_fail@plt+0x1758>
   12fd4:	cmp	r0, #32768	; 0x8000
   12fd8:	moveq	r0, #8
   12fdc:	movne	r0, #3
   12fe0:	pop	{r4, r5, r6, pc}
   12fe4:	mov	r0, #1
   12fe8:	pop	{r4, r5, r6, pc}
   12fec:	mov	r0, #12
   12ff0:	pop	{r4, r5, r6, pc}
   12ff4:	ldr	r3, [r0, #40]	; 0x28
   12ff8:	push	{r4, r5, r6, r7, r8, lr}
   12ffc:	cmp	r3, r2
   13000:	mov	r4, r0
   13004:	mov	r6, r1
   13008:	mov	r5, r2
   1300c:	ldr	r7, [r0, #44]	; 0x2c
   13010:	bcs	13058 <__assert_fail@plt+0x17c4>
   13014:	add	r1, r2, #40	; 0x28
   13018:	cmn	r1, #-1073741823	; 0xc0000001
   1301c:	str	r1, [r0, #40]	; 0x28
   13020:	bls	13040 <__assert_fail@plt+0x17ac>
   13024:	ldr	r0, [r4, #8]
   13028:	bl	12da0 <__assert_fail@plt+0x150c>
   1302c:	mov	r3, #0
   13030:	str	r3, [r4, #8]
   13034:	str	r3, [r4, #40]	; 0x28
   13038:	mov	r0, r6
   1303c:	pop	{r4, r5, r6, r7, r8, pc}
   13040:	lsl	r1, r1, #2
   13044:	ldr	r0, [r0, #8]
   13048:	bl	18384 <lchmod@@Base+0x2948>
   1304c:	cmp	r0, #0
   13050:	beq	13024 <__assert_fail@plt+0x1790>
   13054:	str	r0, [r4, #8]
   13058:	ldr	r0, [r4, #8]
   1305c:	mov	r2, r0
   13060:	cmp	r6, #0
   13064:	bne	130a0 <__assert_fail@plt+0x180c>
   13068:	mov	r3, r7
   1306c:	mov	r2, #4
   13070:	mov	r1, r5
   13074:	bl	117c8 <qsort@plt>
   13078:	ldr	r2, [r4, #8]
   1307c:	mov	r3, r5
   13080:	mov	r1, r2
   13084:	ldr	r6, [r2]
   13088:	subs	r3, r3, #1
   1308c:	bne	130ac <__assert_fail@plt+0x1818>
   13090:	sub	r5, r5, #-1073741823	; 0xc0000001
   13094:	ldr	r2, [r2, r5, lsl #2]
   13098:	str	r3, [r2, #8]
   1309c:	b	13038 <__assert_fail@plt+0x17a4>
   130a0:	str	r6, [r2], #4
   130a4:	ldr	r6, [r6, #8]
   130a8:	b	13060 <__assert_fail@plt+0x17cc>
   130ac:	ldr	r0, [r1]
   130b0:	ldr	ip, [r1, #4]!
   130b4:	str	ip, [r0, #8]
   130b8:	b	13088 <__assert_fail@plt+0x17f4>
   130bc:	push	{r4, r5, r6, r7, r8, lr}
   130c0:	mov	r6, r0
   130c4:	add	r0, r2, #176	; 0xb0
   130c8:	bic	r0, r0, #7
   130cc:	mov	r7, r1
   130d0:	mov	r5, r2
   130d4:	bl	18344 <lchmod@@Base+0x2908>
   130d8:	subs	r4, r0, #0
   130dc:	beq	13128 <__assert_fail@plt+0x1894>
   130e0:	mov	r2, r5
   130e4:	mov	r1, r7
   130e8:	add	r0, r4, #168	; 0xa8
   130ec:	bl	11504 <memcpy@plt>
   130f0:	add	r2, r4, r5
   130f4:	mov	r3, #0
   130f8:	strb	r3, [r2, #168]	; 0xa8
   130fc:	ldr	r2, [r6, #24]
   13100:	str	r5, [r4, #52]	; 0x34
   13104:	str	r2, [r4, #28]
   13108:	mov	r2, #3
   1310c:	str	r6, [r4, #44]	; 0x2c
   13110:	str	r3, [r4, #32]
   13114:	str	r3, [r4, #12]
   13118:	strh	r3, [r4, #58]	; 0x3a
   1311c:	strh	r2, [r4, #60]	; 0x3c
   13120:	str	r3, [r4, #16]
   13124:	str	r3, [r4, #20]
   13128:	mov	r0, r4
   1312c:	pop	{r4, r5, r6, r7, r8, pc}
   13130:	ldr	ip, [r0, #48]	; 0x30
   13134:	push	{lr}		; (str lr, [sp, #-4]!)
   13138:	tst	ip, #16
   1313c:	ldr	lr, [pc, #40]	; 1316c <__assert_fail@plt+0x18d8>
   13140:	ldr	r2, [pc, #40]	; 13170 <__assert_fail@plt+0x18dc>
   13144:	moveq	r2, lr
   13148:	tst	ip, #512	; 0x200
   1314c:	beq	1315c <__assert_fail@plt+0x18c8>
   13150:	ldr	r0, [r0, #32]
   13154:	pop	{lr}		; (ldr lr, [sp], #4)
   13158:	b	15fa4 <lchmod@@Base+0x568>
   1315c:	mov	r0, r1
   13160:	pop	{lr}		; (ldr lr, [sp], #4)
   13164:	mov	r1, r2
   13168:	b	18818 <lchmod@@Base+0x2ddc>
   1316c:	andeq	r4, r8, r0, lsl #18
   13170:	andeq	ip, r8, r0, lsl #18
   13174:	push	{r4, r5, r6, lr}
   13178:	mov	r4, r0
   1317c:	cmp	r4, #0
   13180:	bne	13188 <__assert_fail@plt+0x18f4>
   13184:	pop	{r4, r5, r6, pc}
   13188:	ldr	r0, [r4, #12]
   1318c:	ldr	r5, [r4, #8]
   13190:	cmp	r0, #0
   13194:	beq	1319c <__assert_fail@plt+0x1908>
   13198:	bl	1187c <closedir@plt>
   1319c:	mov	r0, r4
   131a0:	bl	12da0 <__assert_fail@plt+0x150c>
   131a4:	mov	r4, r5
   131a8:	b	1317c <__assert_fail@plt+0x18e8>
   131ac:	ldr	r2, [r0, #48]	; 0x30
   131b0:	ldr	r3, [pc, #28]	; 131d4 <__assert_fail@plt+0x1940>
   131b4:	ldr	r0, [r0, #56]	; 0x38
   131b8:	and	r3, r3, r2
   131bc:	cmp	r3, #0
   131c0:	beq	131d0 <__assert_fail@plt+0x193c>
   131c4:	cmp	r0, #0
   131c8:	bxeq	lr
   131cc:	b	15448 <__assert_fail@plt+0x3bb4>
   131d0:	b	12da0 <__assert_fail@plt+0x150c>
   131d4:	andeq	r0, r0, r2, lsl #2
   131d8:	push	{r4, lr}
   131dc:	mov	r4, r0
   131e0:	mov	r0, r4
   131e4:	bl	159a8 <__assert_fail@plt+0x4114>
   131e8:	cmp	r0, #0
   131ec:	beq	131f4 <__assert_fail@plt+0x1960>
   131f0:	pop	{r4, pc}
   131f4:	mov	r0, r4
   131f8:	bl	159f4 <__assert_fail@plt+0x4160>
   131fc:	cmp	r0, #0
   13200:	blt	131e0 <__assert_fail@plt+0x194c>
   13204:	bl	1184c <close@plt>
   13208:	b	131e0 <__assert_fail@plt+0x194c>
   1320c:	push	{r4, r5, r6, r7, lr}
   13210:	sub	sp, sp, #100	; 0x64
   13214:	ldr	r5, [r0, #44]	; 0x2c
   13218:	ldr	r3, [r5, #48]	; 0x30
   1321c:	tst	r3, #512	; 0x200
   13220:	bne	13230 <__assert_fail@plt+0x199c>
   13224:	mov	r0, #0
   13228:	add	sp, sp, #100	; 0x64
   1322c:	pop	{r4, r5, r6, r7, pc}
   13230:	ldr	r4, [r5, #52]	; 0x34
   13234:	mov	r7, r1
   13238:	cmp	r4, #0
   1323c:	mov	r6, r0
   13240:	bne	13270 <__assert_fail@plt+0x19dc>
   13244:	ldr	r3, [pc, #184]	; 13304 <__assert_fail@plt+0x1a70>
   13248:	mov	r1, r4
   1324c:	str	r3, [sp]
   13250:	ldr	r2, [pc, #176]	; 13308 <__assert_fail@plt+0x1a74>
   13254:	ldr	r3, [pc, #176]	; 1330c <__assert_fail@plt+0x1a78>
   13258:	mov	r0, #13
   1325c:	bl	152dc <__assert_fail@plt+0x3a48>
   13260:	cmp	r0, #0
   13264:	mov	r4, r0
   13268:	str	r0, [r5, #52]	; 0x34
   1326c:	beq	13290 <__assert_fail@plt+0x19fc>
   13270:	ldrd	r2, [r6, #64]	; 0x40
   13274:	add	r1, sp, #96	; 0x60
   13278:	mov	r0, r4
   1327c:	strd	r2, [r1, #-88]!	; 0xffffffa8
   13280:	bl	150b8 <__assert_fail@plt+0x3824>
   13284:	cmp	r0, #0
   13288:	ldrne	r0, [r0, #8]
   1328c:	bne	13228 <__assert_fail@plt+0x1994>
   13290:	cmp	r7, #0
   13294:	blt	13224 <__assert_fail@plt+0x1990>
   13298:	add	r1, sp, #8
   1329c:	mov	r0, r7
   132a0:	bl	1145c <fstatfs64@plt>
   132a4:	cmp	r0, #0
   132a8:	bne	13224 <__assert_fail@plt+0x1990>
   132ac:	cmp	r4, #0
   132b0:	beq	132fc <__assert_fail@plt+0x1a68>
   132b4:	mov	r0, #16
   132b8:	bl	18344 <lchmod@@Base+0x2908>
   132bc:	subs	r5, r0, #0
   132c0:	beq	132fc <__assert_fail@plt+0x1a68>
   132c4:	ldrd	r2, [r6, #64]	; 0x40
   132c8:	mov	r1, r5
   132cc:	mov	r0, r4
   132d0:	strd	r2, [r5]
   132d4:	ldr	r3, [sp, #8]
   132d8:	str	r3, [r5, #8]
   132dc:	bl	157b0 <__assert_fail@plt+0x3f1c>
   132e0:	cmp	r0, #0
   132e4:	beq	132f4 <__assert_fail@plt+0x1a60>
   132e8:	cmp	r5, r0
   132ec:	beq	132fc <__assert_fail@plt+0x1a68>
   132f0:	bl	11840 <abort@plt>
   132f4:	mov	r0, r5
   132f8:	bl	12da0 <__assert_fail@plt+0x150c>
   132fc:	ldr	r0, [sp, #8]
   13300:	b	13228 <__assert_fail@plt+0x1994>
   13304:	andeq	r2, r1, r0, lsr #27
   13308:	andeq	r2, r1, ip, asr #28
   1330c:	andeq	r2, r1, r8, ror #28
   13310:	push	{r4, r5, r6, lr}
   13314:	mov	r5, r1
   13318:	ldr	r1, [r0, #32]
   1331c:	cmn	r1, #100	; 0x64
   13320:	sub	r3, r1, r5
   13324:	clz	r3, r3
   13328:	lsr	r3, r3, #5
   1332c:	moveq	r3, #0
   13330:	cmp	r3, #0
   13334:	beq	1333c <__assert_fail@plt+0x1aa8>
   13338:	bl	11840 <abort@plt>
   1333c:	cmp	r2, #0
   13340:	mov	r4, r0
   13344:	beq	13364 <__assert_fail@plt+0x1ad0>
   13348:	add	r0, r0, #60	; 0x3c
   1334c:	bl	159b0 <__assert_fail@plt+0x411c>
   13350:	cmp	r0, #0
   13354:	blt	1335c <__assert_fail@plt+0x1ac8>
   13358:	bl	1184c <close@plt>
   1335c:	str	r5, [r4, #32]
   13360:	pop	{r4, r5, r6, pc}
   13364:	ldr	r3, [r0, #48]	; 0x30
   13368:	lsr	r3, r3, #2
   1336c:	eor	r3, r3, #1
   13370:	cmp	r1, #0
   13374:	movlt	r3, #0
   13378:	andge	r3, r3, #1
   1337c:	cmp	r3, #0
   13380:	beq	1335c <__assert_fail@plt+0x1ac8>
   13384:	mov	r0, r1
   13388:	b	13358 <__assert_fail@plt+0x1ac4>
   1338c:	ldr	r3, [r0, #48]	; 0x30
   13390:	push	{r4, r5, r6, lr}
   13394:	ands	r4, r3, #4
   13398:	mov	r5, r0
   1339c:	movne	r4, #0
   133a0:	bne	133b8 <__assert_fail@plt+0x1b24>
   133a4:	tst	r3, #512	; 0x200
   133a8:	beq	133c8 <__assert_fail@plt+0x1b34>
   133ac:	mov	r2, #1
   133b0:	mvn	r1, #99	; 0x63
   133b4:	bl	13310 <__assert_fail@plt+0x1a7c>
   133b8:	add	r0, r5, #60	; 0x3c
   133bc:	bl	131d8 <__assert_fail@plt+0x1944>
   133c0:	mov	r0, r4
   133c4:	pop	{r4, r5, r6, pc}
   133c8:	ldr	r0, [r0, #28]
   133cc:	bl	117bc <fchdir@plt>
   133d0:	adds	r4, r0, #0
   133d4:	movne	r4, #1
   133d8:	b	133b8 <__assert_fail@plt+0x1b24>
   133dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   133e0:	subs	sl, r3, #0
   133e4:	sub	sp, sp, #104	; 0x68
   133e8:	mov	r7, r0
   133ec:	mov	r8, r1
   133f0:	mov	r6, r2
   133f4:	moveq	r9, sl
   133f8:	beq	13410 <__assert_fail@plt+0x1b7c>
   133fc:	ldr	r1, [pc, #368]	; 13574 <__assert_fail@plt+0x1ce0>
   13400:	mov	r0, sl
   13404:	bl	114a4 <strcmp@plt>
   13408:	clz	r9, r0
   1340c:	lsr	r9, r9, #5
   13410:	ldr	r3, [r7, #48]	; 0x30
   13414:	ands	r4, r3, #4
   13418:	beq	13444 <__assert_fail@plt+0x1bb0>
   1341c:	mvn	r4, r6
   13420:	lsr	r4, r4, #31
   13424:	ands	r4, r4, r3, lsr #9
   13428:	beq	13438 <__assert_fail@plt+0x1ba4>
   1342c:	mov	r0, r6
   13430:	bl	1184c <close@plt>
   13434:	mov	r4, #0
   13438:	mov	r0, r4
   1343c:	add	sp, sp, #104	; 0x68
   13440:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13444:	ands	r2, r9, r6, lsr #31
   13448:	beq	13534 <__assert_fail@plt+0x1ca0>
   1344c:	tst	r3, #512	; 0x200
   13450:	bne	13470 <__assert_fail@plt+0x1bdc>
   13454:	mov	r1, sl
   13458:	mov	r0, r7
   1345c:	bl	13130 <__assert_fail@plt+0x189c>
   13460:	subs	r5, r0, #0
   13464:	bge	1349c <__assert_fail@plt+0x1c08>
   13468:	mvn	r4, #0
   1346c:	b	13438 <__assert_fail@plt+0x1ba4>
   13470:	add	r5, r7, #60	; 0x3c
   13474:	mov	r0, r5
   13478:	bl	159a8 <__assert_fail@plt+0x4114>
   1347c:	cmp	r0, #0
   13480:	bne	13454 <__assert_fail@plt+0x1bc0>
   13484:	mov	r0, r5
   13488:	bl	159f4 <__assert_fail@plt+0x4160>
   1348c:	subs	r5, r0, #0
   13490:	movge	r6, r5
   13494:	movge	sl, r4
   13498:	blt	13454 <__assert_fail@plt+0x1bc0>
   1349c:	ldr	r3, [r7, #48]	; 0x30
   134a0:	tst	r3, #2
   134a4:	bne	134c4 <__assert_fail@plt+0x1c30>
   134a8:	cmp	sl, #0
   134ac:	beq	13544 <__assert_fail@plt+0x1cb0>
   134b0:	ldr	r1, [pc, #188]	; 13574 <__assert_fail@plt+0x1ce0>
   134b4:	mov	r0, sl
   134b8:	bl	114a4 <strcmp@plt>
   134bc:	cmp	r0, #0
   134c0:	bne	13544 <__assert_fail@plt+0x1cb0>
   134c4:	mov	r1, sp
   134c8:	mov	r0, r5
   134cc:	bl	19164 <lchmod@@Base+0x3728>
   134d0:	cmp	r0, #0
   134d4:	bne	1350c <__assert_fail@plt+0x1c78>
   134d8:	ldrd	r0, [r8, #64]	; 0x40
   134dc:	ldrd	r2, [sp]
   134e0:	cmp	r1, r3
   134e4:	cmpeq	r0, r2
   134e8:	bne	13500 <__assert_fail@plt+0x1c6c>
   134ec:	ldrd	r0, [r8, #160]	; 0xa0
   134f0:	ldrd	r2, [sp, #96]	; 0x60
   134f4:	cmp	r1, r3
   134f8:	cmpeq	r0, r2
   134fc:	beq	13544 <__assert_fail@plt+0x1cb0>
   13500:	bl	116e4 <__errno_location@plt>
   13504:	mov	r3, #2
   13508:	str	r3, [r0]
   1350c:	mvn	r4, #0
   13510:	cmp	r6, #0
   13514:	bge	13438 <__assert_fail@plt+0x1ba4>
   13518:	bl	116e4 <__errno_location@plt>
   1351c:	ldr	r7, [r0]
   13520:	mov	r6, r0
   13524:	mov	r0, r5
   13528:	bl	1184c <close@plt>
   1352c:	str	r7, [r6]
   13530:	b	13438 <__assert_fail@plt+0x1ba4>
   13534:	cmp	r6, #0
   13538:	movge	r5, r6
   1353c:	bge	1349c <__assert_fail@plt+0x1c08>
   13540:	b	13454 <__assert_fail@plt+0x1bc0>
   13544:	ldr	r3, [r7, #48]	; 0x30
   13548:	tst	r3, #512	; 0x200
   1354c:	beq	13564 <__assert_fail@plt+0x1cd0>
   13550:	eor	r2, r9, #1
   13554:	mov	r1, r5
   13558:	mov	r0, r7
   1355c:	bl	13310 <__assert_fail@plt+0x1a7c>
   13560:	b	13438 <__assert_fail@plt+0x1ba4>
   13564:	mov	r0, r5
   13568:	bl	117bc <fchdir@plt>
   1356c:	mov	r4, r0
   13570:	b	13510 <__assert_fail@plt+0x1c7c>
   13574:	andeq	r9, r1, r2, asr r7
   13578:	ldr	r2, [r0, #48]	; 0x30
   1357c:	ldr	r3, [pc, #164]	; 13628 <__assert_fail@plt+0x1d94>
   13580:	push	{r4, r5, r6, r7, lr}
   13584:	and	r3, r3, r2
   13588:	cmp	r3, #0
   1358c:	sub	sp, sp, #28
   13590:	beq	135c8 <__assert_fail@plt+0x1d34>
   13594:	ldrd	r4, [r1, #64]	; 0x40
   13598:	ldrd	r2, [r1, #160]	; 0xa0
   1359c:	ldr	r0, [r0, #56]	; 0x38
   135a0:	mov	r1, sp
   135a4:	strd	r4, [sp]
   135a8:	strd	r2, [sp, #8]
   135ac:	bl	157e0 <__assert_fail@plt+0x3f4c>
   135b0:	cmp	r0, #0
   135b4:	bne	135bc <__assert_fail@plt+0x1d28>
   135b8:	bl	11840 <abort@plt>
   135bc:	bl	12da0 <__assert_fail@plt+0x150c>
   135c0:	add	sp, sp, #28
   135c4:	pop	{r4, r5, r6, r7, pc}
   135c8:	ldr	ip, [r1, #4]
   135cc:	cmp	ip, #0
   135d0:	beq	135c0 <__assert_fail@plt+0x1d2c>
   135d4:	ldr	r3, [ip, #48]	; 0x30
   135d8:	cmp	r3, #0
   135dc:	blt	135c0 <__assert_fail@plt+0x1d2c>
   135e0:	ldr	r3, [r0, #56]	; 0x38
   135e4:	ldrd	r4, [r3, #16]
   135e8:	orrs	r2, r4, r5
   135ec:	beq	135b8 <__assert_fail@plt+0x1d24>
   135f0:	ldrd	r4, [r3]
   135f4:	ldrd	r6, [r1, #160]	; 0xa0
   135f8:	cmp	r5, r7
   135fc:	cmpeq	r4, r6
   13600:	bne	135c0 <__assert_fail@plt+0x1d2c>
   13604:	ldrd	r6, [r3, #8]
   13608:	ldrd	r4, [r1, #64]	; 0x40
   1360c:	cmp	r7, r5
   13610:	cmpeq	r6, r4
   13614:	ldrdeq	r0, [ip, #64]	; 0x40
   13618:	strdeq	r0, [r3, #8]
   1361c:	ldrdeq	r0, [ip, #160]	; 0xa0
   13620:	strdeq	r0, [r3]
   13624:	b	135c0 <__assert_fail@plt+0x1d2c>
   13628:	andeq	r0, r0, r2, lsl #2
   1362c:	ldr	r3, [r0, #36]	; 0x24
   13630:	add	r1, r1, #256	; 0x100
   13634:	adds	r1, r1, r3
   13638:	push	{r4, r5, r6, lr}
   1363c:	mov	r5, r0
   13640:	bcc	13668 <__assert_fail@plt+0x1dd4>
   13644:	ldr	r0, [r0, #24]
   13648:	mov	r4, #0
   1364c:	bl	12da0 <__assert_fail@plt+0x150c>
   13650:	str	r4, [r5, #24]
   13654:	bl	116e4 <__errno_location@plt>
   13658:	mov	r3, #36	; 0x24
   1365c:	str	r3, [r0]
   13660:	mov	r0, r4
   13664:	pop	{r4, r5, r6, pc}
   13668:	str	r1, [r0, #36]	; 0x24
   1366c:	ldr	r0, [r0, #24]
   13670:	bl	18384 <lchmod@@Base+0x2948>
   13674:	subs	r4, r0, #0
   13678:	bne	1368c <__assert_fail@plt+0x1df8>
   1367c:	ldr	r0, [r5, #24]
   13680:	bl	12da0 <__assert_fail@plt+0x150c>
   13684:	str	r4, [r5, #24]
   13688:	b	13660 <__assert_fail@plt+0x1dcc>
   1368c:	str	r4, [r5, #24]
   13690:	mov	r0, #1
   13694:	pop	{r4, r5, r6, pc}
   13698:	ldr	r2, [r0, #48]	; 0x30
   1369c:	ldr	r3, [pc, #96]	; 13704 <__assert_fail@plt+0x1e70>
   136a0:	push	{r0, r1, r4, lr}
   136a4:	and	r3, r3, r2
   136a8:	cmp	r3, #0
   136ac:	mov	r4, r0
   136b0:	beq	136e4 <__assert_fail@plt+0x1e50>
   136b4:	ldr	r3, [pc, #76]	; 13708 <__assert_fail@plt+0x1e74>
   136b8:	ldr	r2, [pc, #76]	; 1370c <__assert_fail@plt+0x1e78>
   136bc:	str	r3, [sp]
   136c0:	mov	r1, #0
   136c4:	ldr	r3, [pc, #68]	; 13710 <__assert_fail@plt+0x1e7c>
   136c8:	mov	r0, #31
   136cc:	bl	152dc <__assert_fail@plt+0x3a48>
   136d0:	str	r0, [r4, #56]	; 0x38
   136d4:	adds	r0, r0, #0
   136d8:	movne	r0, #1
   136dc:	add	sp, sp, #8
   136e0:	pop	{r4, pc}
   136e4:	mov	r0, #32
   136e8:	bl	18344 <lchmod@@Base+0x2908>
   136ec:	cmp	r0, #0
   136f0:	str	r0, [r4, #56]	; 0x38
   136f4:	beq	136dc <__assert_fail@plt+0x1e48>
   136f8:	bl	184e0 <lchmod@@Base+0x2aa4>
   136fc:	mov	r0, #1
   13700:	b	136dc <__assert_fail@plt+0x1e48>
   13704:	andeq	r0, r0, r2, lsl #2
   13708:	andeq	r2, r1, r0, lsr #27
   1370c:	andeq	r2, r1, r0, lsr lr
   13710:	strdeq	r2, [r1], -r4
   13714:	ldr	r2, [r0, #48]	; 0x30
   13718:	ldr	r3, [pc, #168]	; 137c8 <__assert_fail@plt+0x1f34>
   1371c:	push	{r4, r5, r6, lr}
   13720:	and	r3, r3, r2
   13724:	cmp	r3, #0
   13728:	mov	r6, r0
   1372c:	mov	r4, r1
   13730:	beq	137a4 <__assert_fail@plt+0x1f10>
   13734:	mov	r0, #24
   13738:	bl	18344 <lchmod@@Base+0x2908>
   1373c:	subs	r5, r0, #0
   13740:	bne	1374c <__assert_fail@plt+0x1eb8>
   13744:	mov	r0, #0
   13748:	pop	{r4, r5, r6, pc}
   1374c:	ldrd	r2, [r4, #64]	; 0x40
   13750:	ldr	r0, [r6, #56]	; 0x38
   13754:	str	r4, [r5, #16]
   13758:	strd	r2, [r5]
   1375c:	ldrd	r2, [r4, #160]	; 0xa0
   13760:	mov	r1, r5
   13764:	strd	r2, [r5, #8]
   13768:	bl	157b0 <__assert_fail@plt+0x3f1c>
   1376c:	cmp	r5, r0
   13770:	mov	r6, r0
   13774:	bne	13780 <__assert_fail@plt+0x1eec>
   13778:	mov	r0, #1
   1377c:	pop	{r4, r5, r6, pc}
   13780:	mov	r0, r5
   13784:	bl	12da0 <__assert_fail@plt+0x150c>
   13788:	cmp	r6, #0
   1378c:	beq	13744 <__assert_fail@plt+0x1eb0>
   13790:	ldr	r3, [r6, #16]
   13794:	str	r3, [r4]
   13798:	mov	r3, #2
   1379c:	strh	r3, [r4, #56]	; 0x38
   137a0:	b	13778 <__assert_fail@plt+0x1ee4>
   137a4:	add	r1, r1, #64	; 0x40
   137a8:	ldr	r0, [r0, #56]	; 0x38
   137ac:	bl	184fc <lchmod@@Base+0x2ac0>
   137b0:	cmp	r0, #0
   137b4:	beq	13778 <__assert_fail@plt+0x1ee4>
   137b8:	mov	r3, #2
   137bc:	str	r4, [r4]
   137c0:	strh	r3, [r4, #56]	; 0x38
   137c4:	pop	{r4, r5, r6, pc}
   137c8:	andeq	r0, r0, r2, lsl #2
   137cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137d0:	sub	sp, sp, #60	; 0x3c
   137d4:	ldr	r5, [r0]
   137d8:	mov	r4, r0
   137dc:	str	r1, [sp, #8]
   137e0:	ldr	r3, [r5, #12]
   137e4:	cmp	r3, #0
   137e8:	str	r3, [sp, #4]
   137ec:	beq	13840 <__assert_fail@plt+0x1fac>
   137f0:	mov	r0, r3
   137f4:	bl	117b0 <dirfd@plt>
   137f8:	cmp	r0, #0
   137fc:	str	r0, [sp, #52]	; 0x34
   13800:	bge	138b4 <__assert_fail@plt+0x2020>
   13804:	ldr	r0, [r5, #12]
   13808:	mov	r6, #0
   1380c:	bl	1187c <closedir@plt>
   13810:	str	r6, [r5, #12]
   13814:	ldr	r3, [sp, #8]
   13818:	cmp	r3, #3
   1381c:	bne	139e0 <__assert_fail@plt+0x214c>
   13820:	mov	r3, #4
   13824:	strh	r3, [r5, #56]	; 0x38
   13828:	bl	116e4 <__errno_location@plt>
   1382c:	ldr	r3, [r0]
   13830:	str	r3, [r5, #32]
   13834:	mov	r0, r6
   13838:	add	sp, sp, #60	; 0x3c
   1383c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13840:	ldr	r3, [r0, #48]	; 0x30
   13844:	ldr	r1, [r5, #24]
   13848:	and	r2, r3, #516	; 0x204
   1384c:	cmp	r2, #512	; 0x200
   13850:	mvnne	r0, #99	; 0x63
   13854:	ldreq	r0, [r0, #32]
   13858:	ands	r2, r3, #16
   1385c:	beq	1387c <__assert_fail@plt+0x1fe8>
   13860:	tst	r3, #1
   13864:	moveq	r2, #32768	; 0x8000
   13868:	beq	1387c <__assert_fail@plt+0x1fe8>
   1386c:	ldr	r2, [r5, #48]	; 0x30
   13870:	cmp	r2, #0
   13874:	movne	r2, #32768	; 0x8000
   13878:	moveq	r2, #0
   1387c:	add	r3, sp, #52	; 0x34
   13880:	bl	15fd8 <lchmod@@Base+0x59c>
   13884:	cmp	r0, #0
   13888:	mov	r6, r0
   1388c:	str	r0, [r5, #12]
   13890:	beq	13814 <__assert_fail@plt+0x1f80>
   13894:	ldrh	r3, [r5, #56]	; 0x38
   13898:	cmp	r3, #11
   1389c:	bne	139e8 <__assert_fail@plt+0x2154>
   138a0:	mov	r2, #0
   138a4:	mov	r1, r5
   138a8:	mov	r0, r4
   138ac:	bl	12ebc <__assert_fail@plt+0x1628>
   138b0:	strh	r0, [r5, #56]	; 0x38
   138b4:	ldr	r3, [r4, #44]	; 0x2c
   138b8:	cmp	r3, #0
   138bc:	ldr	r3, [pc, #1824]	; 13fe4 <__assert_fail@plt+0x2750>
   138c0:	mvnne	r3, #0
   138c4:	str	r3, [sp, #36]	; 0x24
   138c8:	ldr	r3, [sp, #4]
   138cc:	cmp	r3, #0
   138d0:	beq	13a34 <__assert_fail@plt+0x21a0>
   138d4:	mov	r3, #1
   138d8:	str	r3, [sp, #20]
   138dc:	ldr	fp, [r5, #40]	; 0x28
   138e0:	ldr	r2, [r5, #28]
   138e4:	sub	r3, fp, #1
   138e8:	mov	r9, #0
   138ec:	ldrb	r2, [r2, r3]
   138f0:	mov	r8, r9
   138f4:	mov	r6, r9
   138f8:	cmp	r2, #47	; 0x2f
   138fc:	moveq	fp, r3
   13900:	ldr	r3, [r4, #48]	; 0x30
   13904:	str	r9, [sp, #24]
   13908:	ands	r3, r3, #4
   1390c:	streq	r3, [sp]
   13910:	ldrne	r3, [r4, #24]
   13914:	str	r9, [sp, #32]
   13918:	addne	r2, r3, fp
   1391c:	addne	r2, r2, #1
   13920:	strne	r2, [sp]
   13924:	movne	r2, #47	; 0x2f
   13928:	strbne	r2, [r3, fp]
   1392c:	add	r3, fp, #1
   13930:	str	r3, [sp, #16]
   13934:	ldr	r3, [r4, #36]	; 0x24
   13938:	add	r2, fp, #1
   1393c:	sub	r3, r3, r2
   13940:	str	r3, [sp, #28]
   13944:	ldr	r3, [r5, #48]	; 0x30
   13948:	add	r3, r3, #1
   1394c:	str	r3, [sp, #40]	; 0x28
   13950:	ldr	r7, [r5, #12]
   13954:	cmp	r7, #0
   13958:	bne	13b78 <__assert_fail@plt+0x22e4>
   1395c:	ldr	r3, [sp, #24]
   13960:	cmp	r3, #0
   13964:	bne	13ea4 <__assert_fail@plt+0x2610>
   13968:	ldr	r3, [r4, #48]	; 0x30
   1396c:	tst	r3, #4
   13970:	bne	13f20 <__assert_fail@plt+0x268c>
   13974:	ldr	r3, [sp, #20]
   13978:	ldr	r2, [sp, #4]
   1397c:	cmp	r2, #0
   13980:	movne	r3, #0
   13984:	andeq	r3, r3, #1
   13988:	cmp	r3, #0
   1398c:	beq	13f64 <__assert_fail@plt+0x26d0>
   13990:	ldr	r3, [sp, #8]
   13994:	cmp	r8, #0
   13998:	cmpne	r3, #1
   1399c:	bne	13f90 <__assert_fail@plt+0x26fc>
   139a0:	ldr	r3, [r5, #48]	; 0x30
   139a4:	cmp	r3, #0
   139a8:	bne	13f4c <__assert_fail@plt+0x26b8>
   139ac:	mov	r0, r4
   139b0:	bl	1338c <__assert_fail@plt+0x1af8>
   139b4:	adds	r0, r0, #0
   139b8:	movne	r0, #1
   139bc:	cmp	r0, #0
   139c0:	beq	13f64 <__assert_fail@plt+0x26d0>
   139c4:	mov	r3, #7
   139c8:	strh	r3, [r5, #56]	; 0x38
   139cc:	ldr	r3, [r4, #48]	; 0x30
   139d0:	orr	r3, r3, #8192	; 0x2000
   139d4:	str	r3, [r4, #48]	; 0x30
   139d8:	mov	r0, r6
   139dc:	bl	13174 <__assert_fail@plt+0x18e0>
   139e0:	mov	r6, #0
   139e4:	b	13834 <__assert_fail@plt+0x1fa0>
   139e8:	ldr	r3, [r4, #48]	; 0x30
   139ec:	tst	r3, #256	; 0x100
   139f0:	beq	138b4 <__assert_fail@plt+0x2020>
   139f4:	mov	r1, r5
   139f8:	mov	r0, r4
   139fc:	bl	13578 <__assert_fail@plt+0x1ce4>
   13a00:	mov	r2, #0
   13a04:	mov	r1, r5
   13a08:	mov	r0, r4
   13a0c:	bl	12ebc <__assert_fail@plt+0x1628>
   13a10:	mov	r1, r5
   13a14:	mov	r0, r4
   13a18:	bl	13714 <__assert_fail@plt+0x1e80>
   13a1c:	subs	r6, r0, #0
   13a20:	bne	138b4 <__assert_fail@plt+0x2020>
   13a24:	bl	116e4 <__errno_location@plt>
   13a28:	mov	r3, #12
   13a2c:	str	r3, [r0]
   13a30:	b	13834 <__assert_fail@plt+0x1fa0>
   13a34:	ldr	r3, [sp, #8]
   13a38:	cmp	r3, #2
   13a3c:	beq	13a8c <__assert_fail@plt+0x21f8>
   13a40:	ldr	r3, [r4, #48]	; 0x30
   13a44:	and	r3, r3, #56	; 0x38
   13a48:	cmp	r3, #24
   13a4c:	bne	13b44 <__assert_fail@plt+0x22b0>
   13a50:	ldr	r3, [r5, #84]	; 0x54
   13a54:	cmp	r3, #2
   13a58:	bne	13b44 <__assert_fail@plt+0x22b0>
   13a5c:	ldr	r1, [sp, #52]	; 0x34
   13a60:	mov	r0, r5
   13a64:	bl	1320c <__assert_fail@plt+0x1978>
   13a68:	ldr	r3, [pc, #1400]	; 13fe8 <__assert_fail@plt+0x2754>
   13a6c:	cmp	r0, r3
   13a70:	beq	13b44 <__assert_fail@plt+0x22b0>
   13a74:	bgt	13b2c <__assert_fail@plt+0x2298>
   13a78:	ldr	r3, [pc, #1388]	; 13fec <__assert_fail@plt+0x2758>
   13a7c:	cmp	r0, r3
   13a80:	beq	13b44 <__assert_fail@plt+0x22b0>
   13a84:	cmp	r0, #0
   13a88:	beq	13b44 <__assert_fail@plt+0x22b0>
   13a8c:	mov	r3, #0
   13a90:	mov	r6, r3
   13a94:	ldr	r3, [sp, #8]
   13a98:	sub	r7, r3, #3
   13a9c:	clz	r7, r7
   13aa0:	lsr	r7, r7, #5
   13aa4:	orrs	r3, r6, r7
   13aa8:	str	r3, [sp, #20]
   13aac:	beq	138dc <__assert_fail@plt+0x2048>
   13ab0:	ldr	r3, [r4, #48]	; 0x30
   13ab4:	tst	r3, #512	; 0x200
   13ab8:	beq	13ad0 <__assert_fail@plt+0x223c>
   13abc:	mov	r2, #3
   13ac0:	ldr	r1, [pc, #1320]	; 13ff0 <__assert_fail@plt+0x275c>
   13ac4:	ldr	r0, [sp, #52]	; 0x34
   13ac8:	bl	18654 <lchmod@@Base+0x2c18>
   13acc:	str	r0, [sp, #52]	; 0x34
   13ad0:	ldr	r2, [sp, #52]	; 0x34
   13ad4:	cmp	r2, #0
   13ad8:	bge	13b4c <__assert_fail@plt+0x22b8>
   13adc:	tst	r6, r7
   13ae0:	bne	13b68 <__assert_fail@plt+0x22d4>
   13ae4:	ldrh	r3, [r5, #58]	; 0x3a
   13ae8:	ldr	r0, [r5, #12]
   13aec:	orr	r3, r3, #1
   13af0:	strh	r3, [r5, #58]	; 0x3a
   13af4:	bl	1187c <closedir@plt>
   13af8:	ldr	r2, [r4, #48]	; 0x30
   13afc:	mov	r3, #0
   13b00:	tst	r2, #512	; 0x200
   13b04:	str	r3, [r5, #12]
   13b08:	mov	r6, r3
   13b0c:	beq	13b20 <__assert_fail@plt+0x228c>
   13b10:	ldr	r0, [sp, #52]	; 0x34
   13b14:	cmp	r0, r3
   13b18:	blt	13b20 <__assert_fail@plt+0x228c>
   13b1c:	bl	1184c <close@plt>
   13b20:	str	r6, [r5, #12]
   13b24:	mov	r3, #0
   13b28:	b	138d8 <__assert_fail@plt+0x2044>
   13b2c:	ldr	r3, [pc, #1216]	; 13ff4 <__assert_fail@plt+0x2760>
   13b30:	cmp	r0, r3
   13b34:	beq	13b44 <__assert_fail@plt+0x22b0>
   13b38:	ldr	r3, [pc, #1208]	; 13ff8 <__assert_fail@plt+0x2764>
   13b3c:	cmp	r0, r3
   13b40:	b	13a88 <__assert_fail@plt+0x21f4>
   13b44:	mov	r3, #1
   13b48:	b	13a90 <__assert_fail@plt+0x21fc>
   13b4c:	mov	r3, #0
   13b50:	mov	r1, r5
   13b54:	mov	r0, r4
   13b58:	bl	133dc <__assert_fail@plt+0x1b48>
   13b5c:	cmp	r0, #0
   13b60:	bne	13adc <__assert_fail@plt+0x2248>
   13b64:	b	138d4 <__assert_fail@plt+0x2040>
   13b68:	bl	116e4 <__errno_location@plt>
   13b6c:	ldr	r3, [r0]
   13b70:	str	r3, [r5, #32]
   13b74:	b	13ae4 <__assert_fail@plt+0x2250>
   13b78:	bl	116e4 <__errno_location@plt>
   13b7c:	mov	r3, #0
   13b80:	str	r0, [sp, #12]
   13b84:	str	r3, [r0]
   13b88:	mov	r0, r7
   13b8c:	bl	1178c <readdir64@plt>
   13b90:	subs	sl, r0, #0
   13b94:	bne	13be0 <__assert_fail@plt+0x234c>
   13b98:	ldr	r3, [sp, #12]
   13b9c:	ldr	r3, [r3]
   13ba0:	cmp	r3, #0
   13ba4:	beq	13bc4 <__assert_fail@plt+0x2330>
   13ba8:	str	r3, [r5, #32]
   13bac:	ldr	r3, [sp, #4]
   13bb0:	cmp	r8, #0
   13bb4:	cmpeq	r3, #0
   13bb8:	moveq	r3, #4
   13bbc:	movne	r3, #7
   13bc0:	strh	r3, [r5, #56]	; 0x38
   13bc4:	ldr	r0, [r5, #12]
   13bc8:	cmp	r0, #0
   13bcc:	beq	1395c <__assert_fail@plt+0x20c8>
   13bd0:	bl	1187c <closedir@plt>
   13bd4:	mov	r3, #0
   13bd8:	str	r3, [r5, #12]
   13bdc:	b	1395c <__assert_fail@plt+0x20c8>
   13be0:	ldr	r3, [r4, #48]	; 0x30
   13be4:	tst	r3, #32
   13be8:	bne	13c10 <__assert_fail@plt+0x237c>
   13bec:	ldrb	r3, [sl, #19]
   13bf0:	cmp	r3, #46	; 0x2e
   13bf4:	bne	13c10 <__assert_fail@plt+0x237c>
   13bf8:	ldrb	r3, [sl, #20]
   13bfc:	cmp	r3, #0
   13c00:	beq	13950 <__assert_fail@plt+0x20bc>
   13c04:	ldrh	r3, [sl, #20]
   13c08:	cmp	r3, #46	; 0x2e
   13c0c:	beq	13950 <__assert_fail@plt+0x20bc>
   13c10:	add	r7, sl, #19
   13c14:	mov	r0, r7
   13c18:	bl	116b4 <strlen@plt>
   13c1c:	mov	r1, r7
   13c20:	mov	r2, r0
   13c24:	str	r0, [sp, #44]	; 0x2c
   13c28:	mov	r0, r4
   13c2c:	bl	130bc <__assert_fail@plt+0x1828>
   13c30:	subs	r7, r0, #0
   13c34:	beq	13c74 <__assert_fail@plt+0x23e0>
   13c38:	ldr	r2, [sp, #28]
   13c3c:	ldr	r3, [sp, #44]	; 0x2c
   13c40:	cmp	r2, r3
   13c44:	bhi	13cf4 <__assert_fail@plt+0x2460>
   13c48:	ldr	r2, [r4, #24]
   13c4c:	add	r1, fp, #2
   13c50:	add	r1, r1, r3
   13c54:	mov	r0, r4
   13c58:	str	r2, [sp, #44]	; 0x2c
   13c5c:	str	r3, [sp, #28]
   13c60:	bl	1362c <__assert_fail@plt+0x1d98>
   13c64:	ldr	r3, [sp, #28]
   13c68:	ldr	r2, [sp, #44]	; 0x2c
   13c6c:	cmp	r0, #0
   13c70:	bne	13cbc <__assert_fail@plt+0x2428>
   13c74:	ldr	r3, [sp, #12]
   13c78:	mov	r0, r7
   13c7c:	ldr	r8, [r3]
   13c80:	bl	12da0 <__assert_fail@plt+0x150c>
   13c84:	mov	r0, r6
   13c88:	bl	13174 <__assert_fail@plt+0x18e0>
   13c8c:	ldr	r0, [r5, #12]
   13c90:	bl	1187c <closedir@plt>
   13c94:	mov	r3, #7
   13c98:	strh	r3, [r5, #56]	; 0x38
   13c9c:	ldr	r3, [r4, #48]	; 0x30
   13ca0:	mov	r6, #0
   13ca4:	orr	r3, r3, #8192	; 0x2000
   13ca8:	str	r6, [r5, #12]
   13cac:	str	r3, [r4, #48]	; 0x30
   13cb0:	ldr	r3, [sp, #12]
   13cb4:	str	r8, [r3]
   13cb8:	b	13834 <__assert_fail@plt+0x1fa0>
   13cbc:	ldr	r1, [r4, #24]
   13cc0:	cmp	r2, r1
   13cc4:	ldreq	r0, [sp, #24]
   13cc8:	beq	13ce0 <__assert_fail@plt+0x244c>
   13ccc:	ldr	r2, [r4, #48]	; 0x30
   13cd0:	tst	r2, #4
   13cd4:	ldrne	r2, [sp, #16]
   13cd8:	addne	r2, r1, r2
   13cdc:	strne	r2, [sp]
   13ce0:	ldr	r2, [r4, #36]	; 0x24
   13ce4:	ldr	r1, [sp, #16]
   13ce8:	str	r0, [sp, #24]
   13cec:	sub	r2, r2, r1
   13cf0:	str	r2, [sp, #28]
   13cf4:	ldr	r2, [sp, #16]
   13cf8:	adds	r3, r2, r3
   13cfc:	bcc	13d44 <__assert_fail@plt+0x24b0>
   13d00:	mov	r0, r7
   13d04:	bl	12da0 <__assert_fail@plt+0x150c>
   13d08:	mov	r0, r6
   13d0c:	bl	13174 <__assert_fail@plt+0x18e0>
   13d10:	ldr	r0, [r5, #12]
   13d14:	bl	1187c <closedir@plt>
   13d18:	mov	r3, #7
   13d1c:	strh	r3, [r5, #56]	; 0x38
   13d20:	ldr	r3, [r4, #48]	; 0x30
   13d24:	ldr	r2, [sp, #12]
   13d28:	orr	r3, r3, #8192	; 0x2000
   13d2c:	mov	r6, #0
   13d30:	str	r6, [r5, #12]
   13d34:	str	r3, [r4, #48]	; 0x30
   13d38:	mov	r3, #36	; 0x24
   13d3c:	str	r3, [r2]
   13d40:	b	13834 <__assert_fail@plt+0x1fa0>
   13d44:	ldr	r2, [sp, #40]	; 0x28
   13d48:	str	r2, [r7, #48]	; 0x30
   13d4c:	ldr	r2, [r4]
   13d50:	str	r3, [r7, #40]	; 0x28
   13d54:	str	r2, [r7, #4]
   13d58:	ldrd	r2, [sl]
   13d5c:	strd	r2, [r7, #160]	; 0xa0
   13d60:	ldr	r3, [r4, #48]	; 0x30
   13d64:	tst	r3, #4
   13d68:	addeq	r3, r7, #168	; 0xa8
   13d6c:	streq	r3, [r7, #24]
   13d70:	beq	13d90 <__assert_fail@plt+0x24fc>
   13d74:	ldr	r3, [r7, #28]
   13d78:	ldr	r2, [r7, #52]	; 0x34
   13d7c:	str	r3, [r7, #24]
   13d80:	add	r2, r2, #1
   13d84:	add	r1, r7, #168	; 0xa8
   13d88:	ldr	r0, [sp]
   13d8c:	bl	114d4 <memmove@plt>
   13d90:	ldr	r3, [r4, #44]	; 0x2c
   13d94:	cmp	r3, #0
   13d98:	beq	13da8 <__assert_fail@plt+0x2514>
   13d9c:	ldr	r2, [r4, #48]	; 0x30
   13da0:	ands	r2, r2, #1024	; 0x400
   13da4:	beq	13e90 <__assert_fail@plt+0x25fc>
   13da8:	ldr	r3, [r4, #48]	; 0x30
   13dac:	ands	r1, r3, #8
   13db0:	beq	13dd4 <__assert_fail@plt+0x2540>
   13db4:	ldrb	r2, [sl, #18]
   13db8:	ands	r1, r2, #251	; 0xfb
   13dbc:	beq	13dd4 <__assert_fail@plt+0x2540>
   13dc0:	lsr	r3, r3, #4
   13dc4:	and	r3, r3, #1
   13dc8:	cmp	r2, #10
   13dcc:	moveq	r1, r3
   13dd0:	orrne	r1, r3, #1
   13dd4:	mov	r3, #11
   13dd8:	strh	r3, [r7, #56]	; 0x38
   13ddc:	ldrb	r2, [sl, #18]
   13de0:	sub	r2, r2, #1
   13de4:	cmp	r2, r3
   13de8:	lslls	r2, r2, #1
   13dec:	ldrls	r3, [pc, #520]	; 13ffc <__assert_fail@plt+0x2768>
   13df0:	movhi	r3, #0
   13df4:	ldrhls	r3, [r3, r2]
   13df8:	cmp	r1, #0
   13dfc:	movne	r2, #1
   13e00:	str	r3, [r7, #80]	; 0x50
   13e04:	moveq	r2, #2
   13e08:	mov	r3, #0
   13e0c:	strd	r2, [r7, #112]	; 0x70
   13e10:	mov	r3, #0
   13e14:	cmp	r6, r3
   13e18:	str	r3, [r7, #8]
   13e1c:	ldrne	r3, [sp, #32]
   13e20:	moveq	r6, r7
   13e24:	strne	r7, [r3, #8]
   13e28:	ldr	r3, [pc, #464]	; 14000 <__assert_fail@plt+0x276c>
   13e2c:	cmp	r8, r3
   13e30:	bne	13e78 <__assert_fail@plt+0x25e4>
   13e34:	ldr	r3, [r4, #44]	; 0x2c
   13e38:	cmp	r3, #0
   13e3c:	bne	13e78 <__assert_fail@plt+0x25e4>
   13e40:	ldr	r1, [sp, #52]	; 0x34
   13e44:	mov	r0, r5
   13e48:	bl	1320c <__assert_fail@plt+0x1978>
   13e4c:	ldr	r3, [pc, #404]	; 13fe8 <__assert_fail@plt+0x2754>
   13e50:	cmp	r0, r3
   13e54:	beq	13e74 <__assert_fail@plt+0x25e0>
   13e58:	ldr	r3, [pc, #420]	; 14004 <__assert_fail@plt+0x2770>
   13e5c:	cmp	r0, r3
   13e60:	beq	13e74 <__assert_fail@plt+0x25e0>
   13e64:	ldr	r3, [pc, #384]	; 13fec <__assert_fail@plt+0x2758>
   13e68:	cmp	r0, r3
   13e6c:	movne	r9, #1
   13e70:	bne	13e78 <__assert_fail@plt+0x25e4>
   13e74:	mov	r9, #0
   13e78:	ldr	r3, [sp, #36]	; 0x24
   13e7c:	add	r8, r8, #1
   13e80:	cmp	r3, r8
   13e84:	bls	1395c <__assert_fail@plt+0x20c8>
   13e88:	str	r7, [sp, #32]
   13e8c:	b	13950 <__assert_fail@plt+0x20bc>
   13e90:	mov	r1, r7
   13e94:	mov	r0, r4
   13e98:	bl	12ebc <__assert_fail@plt+0x1628>
   13e9c:	strh	r0, [r7, #56]	; 0x38
   13ea0:	b	13e10 <__assert_fail@plt+0x257c>
   13ea4:	ldr	r1, [r4, #24]
   13ea8:	ldr	r3, [r4, #4]
   13eac:	cmp	r3, #0
   13eb0:	bne	13ef8 <__assert_fail@plt+0x2664>
   13eb4:	mov	r3, r6
   13eb8:	ldr	r2, [r3, #48]	; 0x30
   13ebc:	cmp	r2, #0
   13ec0:	blt	13968 <__assert_fail@plt+0x20d4>
   13ec4:	ldr	r2, [r3, #24]
   13ec8:	add	r0, r3, #168	; 0xa8
   13ecc:	cmp	r2, r0
   13ed0:	ldrne	r0, [r3, #28]
   13ed4:	str	r1, [r3, #28]
   13ed8:	subne	r2, r2, r0
   13edc:	addne	r2, r1, r2
   13ee0:	strne	r2, [r3, #24]
   13ee4:	ldr	r2, [r3, #8]
   13ee8:	cmp	r2, #0
   13eec:	ldreq	r2, [r3, #4]
   13ef0:	mov	r3, r2
   13ef4:	b	13eb8 <__assert_fail@plt+0x2624>
   13ef8:	ldr	r2, [r3, #24]
   13efc:	add	r0, r3, #168	; 0xa8
   13f00:	cmp	r2, r0
   13f04:	ldrne	r0, [r3, #28]
   13f08:	str	r1, [r3, #28]
   13f0c:	subne	r2, r2, r0
   13f10:	addne	r2, r1, r2
   13f14:	strne	r2, [r3, #24]
   13f18:	ldr	r3, [r3, #8]
   13f1c:	b	13eac <__assert_fail@plt+0x2618>
   13f20:	ldr	r3, [r4, #36]	; 0x24
   13f24:	ldr	r2, [sp, #16]
   13f28:	cmp	r8, #0
   13f2c:	cmpne	r3, r2
   13f30:	ldreq	r3, [sp]
   13f34:	subeq	r3, r3, #1
   13f38:	streq	r3, [sp]
   13f3c:	ldr	r2, [sp]
   13f40:	mov	r3, #0
   13f44:	strb	r3, [r2]
   13f48:	b	13974 <__assert_fail@plt+0x20e0>
   13f4c:	ldr	r3, [pc, #180]	; 14008 <__assert_fail@plt+0x2774>
   13f50:	mvn	r2, #0
   13f54:	ldr	r1, [r5, #4]
   13f58:	mov	r0, r4
   13f5c:	bl	133dc <__assert_fail@plt+0x1b48>
   13f60:	b	139b4 <__assert_fail@plt+0x2120>
   13f64:	cmp	r8, #0
   13f68:	bne	13f90 <__assert_fail@plt+0x26fc>
   13f6c:	ldr	r3, [sp, #8]
   13f70:	cmp	r3, #3
   13f74:	bne	139d8 <__assert_fail@plt+0x2144>
   13f78:	ldrh	r3, [r5, #56]	; 0x38
   13f7c:	cmp	r3, #4
   13f80:	cmpne	r3, #7
   13f84:	movne	r3, #6
   13f88:	strhne	r3, [r5, #56]	; 0x38
   13f8c:	b	139d8 <__assert_fail@plt+0x2144>
   13f90:	cmp	r9, #0
   13f94:	beq	13fbc <__assert_fail@plt+0x2728>
   13f98:	ldr	r3, [pc, #108]	; 1400c <__assert_fail@plt+0x2778>
   13f9c:	mov	r1, r6
   13fa0:	str	r3, [r4, #44]	; 0x2c
   13fa4:	mov	r2, r8
   13fa8:	mov	r0, r4
   13fac:	bl	12ff4 <__assert_fail@plt+0x1760>
   13fb0:	mov	r3, #0
   13fb4:	str	r3, [r4, #44]	; 0x2c
   13fb8:	mov	r6, r0
   13fbc:	ldr	r3, [r4, #44]	; 0x2c
   13fc0:	cmp	r3, #0
   13fc4:	cmpne	r8, #1
   13fc8:	bls	13834 <__assert_fail@plt+0x1fa0>
   13fcc:	mov	r1, r6
   13fd0:	mov	r2, r8
   13fd4:	mov	r0, r4
   13fd8:	bl	12ff4 <__assert_fail@plt+0x1760>
   13fdc:	mov	r6, r0
   13fe0:	b	13834 <__assert_fail@plt+0x1fa0>
   13fe4:	andeq	r8, r1, r0, lsr #13
   13fe8:	andeq	r6, r0, r9, ror #18
   13fec:			; <UNDEFINED> instruction: 0xff534d42
   13ff0:	andeq	r0, r0, r6, lsl #8
   13ff4:	andeq	r9, r0, r0, lsr #31
   13ff8:	movtpl	r4, #24911	; 0x614f
   13ffc:	andeq	r9, r1, sl, lsr r7
   14000:	andeq	r2, r0, r0, lsl r7
   14004:			; <UNDEFINED> instruction: 0x01021994
   14008:	andeq	r9, r1, r2, asr r7
   1400c:	andeq	r2, r1, r8, lsl #29
   14010:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14014:	bic	r4, r1, #4080	; 0xff0
   14018:	bic	r4, r4, #15
   1401c:	cmp	r4, #0
   14020:	beq	14038 <__assert_fail@plt+0x27a4>
   14024:	bl	116e4 <__errno_location@plt>
   14028:	mov	r3, #22
   1402c:	str	r3, [r0]
   14030:	mov	r4, #0
   14034:	b	14054 <__assert_fail@plt+0x27c0>
   14038:	and	r3, r1, #516	; 0x204
   1403c:	cmp	r3, #516	; 0x204
   14040:	mov	r5, r1
   14044:	bne	14060 <__assert_fail@plt+0x27cc>
   14048:	bl	116e4 <__errno_location@plt>
   1404c:	mov	r3, #22
   14050:	str	r3, [r0]
   14054:	mov	r0, r4
   14058:	add	sp, sp, #12
   1405c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14060:	ands	r4, r1, #18
   14064:	beq	14048 <__assert_fail@plt+0x27b4>
   14068:	mov	fp, r0
   1406c:	mov	r1, #96	; 0x60
   14070:	mov	r0, #1
   14074:	mov	sl, r2
   14078:	bl	182fc <lchmod@@Base+0x28c0>
   1407c:	subs	r4, r0, #0
   14080:	beq	14054 <__assert_fail@plt+0x27c0>
   14084:	tst	r5, #2
   14088:	bicne	r3, r5, #512	; 0x200
   1408c:	orrne	r3, r3, #4
   14090:	sub	r7, fp, #4
   14094:	mov	r6, #0
   14098:	strne	r3, [r4, #48]	; 0x30
   1409c:	mvn	r3, #99	; 0x63
   140a0:	str	sl, [r4, #44]	; 0x2c
   140a4:	streq	r5, [r4, #48]	; 0x30
   140a8:	str	r3, [r4, #32]
   140ac:	ldr	r9, [r7, #4]!
   140b0:	cmp	r9, #0
   140b4:	bne	141dc <__assert_fail@plt+0x2948>
   140b8:	add	r1, r6, #1
   140bc:	cmp	r1, #4096	; 0x1000
   140c0:	movcc	r1, #4096	; 0x1000
   140c4:	mov	r0, r4
   140c8:	bl	1362c <__assert_fail@plt+0x1d98>
   140cc:	subs	r3, r0, #0
   140d0:	str	r3, [sp]
   140d4:	beq	142f0 <__assert_fail@plt+0x2a5c>
   140d8:	ldr	r7, [fp]
   140dc:	cmp	r7, #0
   140e0:	beq	14104 <__assert_fail@plt+0x2870>
   140e4:	mov	r2, r9
   140e8:	ldr	r1, [pc, #524]	; 142fc <__assert_fail@plt+0x2a68>
   140ec:	mov	r0, r4
   140f0:	bl	130bc <__assert_fail@plt+0x1828>
   140f4:	subs	r7, r0, #0
   140f8:	beq	142e8 <__assert_fail@plt+0x2a54>
   140fc:	mvn	r3, #0
   14100:	str	r3, [r7, #48]	; 0x30
   14104:	cmp	sl, #0
   14108:	lsr	r5, r5, #11
   1410c:	ldrne	r8, [r4, #48]	; 0x30
   14110:	eor	r5, r5, #1
   14114:	lsrne	r8, r8, #10
   14118:	andne	r3, r8, #1
   1411c:	mov	r8, #0
   14120:	mov	r9, r8
   14124:	mov	r6, r8
   14128:	strne	r3, [sp]
   1412c:	and	r3, r5, #1
   14130:	str	r3, [sp, #4]
   14134:	ldr	r5, [fp, r9, lsl #2]
   14138:	cmp	r5, #0
   1413c:	bne	141f0 <__assert_fail@plt+0x295c>
   14140:	cmp	sl, #0
   14144:	cmpne	r9, #1
   14148:	bls	14160 <__assert_fail@plt+0x28cc>
   1414c:	mov	r1, r6
   14150:	mov	r2, r9
   14154:	mov	r0, r4
   14158:	bl	12ff4 <__assert_fail@plt+0x1760>
   1415c:	mov	r6, r0
   14160:	mov	r2, #0
   14164:	ldr	r1, [pc, #400]	; 142fc <__assert_fail@plt+0x2a68>
   14168:	mov	r0, r4
   1416c:	bl	130bc <__assert_fail@plt+0x1828>
   14170:	cmp	r0, #0
   14174:	str	r0, [r4]
   14178:	beq	142d8 <__assert_fail@plt+0x2a44>
   1417c:	mov	r3, #9
   14180:	strh	r3, [r0, #56]	; 0x38
   14184:	mov	r3, #1
   14188:	str	r6, [r0, #8]
   1418c:	str	r3, [r0, #48]	; 0x30
   14190:	mov	r0, r4
   14194:	bl	13698 <__assert_fail@plt+0x1e04>
   14198:	cmp	r0, #0
   1419c:	beq	142d8 <__assert_fail@plt+0x2a44>
   141a0:	ldr	r3, [r4, #48]	; 0x30
   141a4:	tst	r3, #516	; 0x204
   141a8:	bne	141cc <__assert_fail@plt+0x2938>
   141ac:	ldr	r1, [pc, #332]	; 14300 <__assert_fail@plt+0x2a6c>
   141b0:	mov	r0, r4
   141b4:	bl	13130 <__assert_fail@plt+0x189c>
   141b8:	cmp	r0, #0
   141bc:	str	r0, [r4, #28]
   141c0:	ldrlt	r3, [r4, #48]	; 0x30
   141c4:	orrlt	r3, r3, #4
   141c8:	strlt	r3, [r4, #48]	; 0x30
   141cc:	mvn	r1, #0
   141d0:	add	r0, r4, #60	; 0x3c
   141d4:	bl	1597c <__assert_fail@plt+0x40e8>
   141d8:	b	14054 <__assert_fail@plt+0x27c0>
   141dc:	mov	r0, r9
   141e0:	bl	116b4 <strlen@plt>
   141e4:	cmp	r6, r0
   141e8:	movcc	r6, r0
   141ec:	b	140ac <__assert_fail@plt+0x2818>
   141f0:	mov	r0, r5
   141f4:	bl	116b4 <strlen@plt>
   141f8:	ldr	r1, [sp, #4]
   141fc:	cmp	r0, #2
   14200:	movls	r1, #0
   14204:	andhi	r1, r1, #1
   14208:	cmp	r1, #0
   1420c:	mov	r2, r0
   14210:	beq	14240 <__assert_fail@plt+0x29ac>
   14214:	sub	r0, r0, #1
   14218:	add	r1, r5, r0
   1421c:	ldrb	r0, [r5, r0]
   14220:	cmp	r0, #47	; 0x2f
   14224:	bne	14240 <__assert_fail@plt+0x29ac>
   14228:	ldrb	r0, [r1, #-1]!
   1422c:	cmp	r0, #47	; 0x2f
   14230:	bne	14240 <__assert_fail@plt+0x29ac>
   14234:	sub	r2, r2, #1
   14238:	cmp	r2, #1
   1423c:	bne	14228 <__assert_fail@plt+0x2994>
   14240:	mov	r1, r5
   14244:	mov	r0, r4
   14248:	bl	130bc <__assert_fail@plt+0x1828>
   1424c:	subs	r5, r0, #0
   14250:	beq	142d8 <__assert_fail@plt+0x2a44>
   14254:	mov	r2, #0
   14258:	str	r2, [r5, #48]	; 0x30
   1425c:	add	r2, r5, #168	; 0xa8
   14260:	str	r2, [r5, #24]
   14264:	ldr	r2, [sp]
   14268:	str	r7, [r5, #4]
   1426c:	cmp	r6, #0
   14270:	moveq	r2, #0
   14274:	andne	r2, r2, #1
   14278:	cmp	r2, #0
   1427c:	beq	142c4 <__assert_fail@plt+0x2a30>
   14280:	mov	r0, #2
   14284:	mov	r1, #0
   14288:	mov	r2, #11
   1428c:	strh	r2, [r5, #56]	; 0x38
   14290:	strd	r0, [r5, #112]	; 0x70
   14294:	cmp	sl, #0
   14298:	strne	r6, [r5, #8]
   1429c:	bne	142b8 <__assert_fail@plt+0x2a24>
   142a0:	cmp	r6, #0
   142a4:	str	sl, [r5, #8]
   142a8:	moveq	r8, r5
   142ac:	strne	r5, [r8, #8]
   142b0:	movne	r8, r5
   142b4:	movne	r5, r6
   142b8:	add	r9, r9, #1
   142bc:	mov	r6, r5
   142c0:	b	14134 <__assert_fail@plt+0x28a0>
   142c4:	mov	r1, r5
   142c8:	mov	r0, r4
   142cc:	bl	12ebc <__assert_fail@plt+0x1628>
   142d0:	strh	r0, [r5, #56]	; 0x38
   142d4:	b	14294 <__assert_fail@plt+0x2a00>
   142d8:	mov	r0, r6
   142dc:	bl	13174 <__assert_fail@plt+0x18e0>
   142e0:	mov	r0, r7
   142e4:	bl	12da0 <__assert_fail@plt+0x150c>
   142e8:	ldr	r0, [r4, #24]
   142ec:	bl	12da0 <__assert_fail@plt+0x150c>
   142f0:	mov	r0, r4
   142f4:	bl	12da0 <__assert_fail@plt+0x150c>
   142f8:	b	14030 <__assert_fail@plt+0x279c>
   142fc:	andeq	r9, r1, sl, ror #10
   14300:	andeq	r9, r1, r3, asr r7
   14304:	push	{r4, r5, r6, lr}
   14308:	mov	r4, r0
   1430c:	ldr	r0, [r0]
   14310:	cmp	r0, #0
   14314:	bne	143ac <__assert_fail@plt+0x2b18>
   14318:	ldr	r0, [r4, #4]
   1431c:	cmp	r0, #0
   14320:	beq	14328 <__assert_fail@plt+0x2a94>
   14324:	bl	13174 <__assert_fail@plt+0x18e0>
   14328:	ldr	r0, [r4, #8]
   1432c:	bl	12da0 <__assert_fail@plt+0x150c>
   14330:	ldr	r0, [r4, #24]
   14334:	bl	12da0 <__assert_fail@plt+0x150c>
   14338:	ldr	r3, [r4, #48]	; 0x30
   1433c:	tst	r3, #512	; 0x200
   14340:	beq	143d8 <__assert_fail@plt+0x2b44>
   14344:	ldr	r0, [r4, #32]
   14348:	cmp	r0, #0
   1434c:	bge	143c0 <__assert_fail@plt+0x2b2c>
   14350:	mov	r5, #0
   14354:	add	r0, r4, #60	; 0x3c
   14358:	bl	131d8 <__assert_fail@plt+0x1944>
   1435c:	ldr	r0, [r4, #52]	; 0x34
   14360:	cmp	r0, #0
   14364:	beq	1436c <__assert_fail@plt+0x2ad8>
   14368:	bl	15448 <__assert_fail@plt+0x3bb4>
   1436c:	mov	r0, r4
   14370:	bl	131ac <__assert_fail@plt+0x1918>
   14374:	mov	r0, r4
   14378:	bl	12da0 <__assert_fail@plt+0x150c>
   1437c:	cmp	r5, #0
   14380:	beq	14390 <__assert_fail@plt+0x2afc>
   14384:	bl	116e4 <__errno_location@plt>
   14388:	str	r5, [r0]
   1438c:	mvn	r5, #0
   14390:	mov	r0, r5
   14394:	pop	{r4, r5, r6, pc}
   14398:	ldr	r5, [r0, #8]
   1439c:	cmp	r5, #0
   143a0:	ldreq	r5, [r0, #4]
   143a4:	bl	12da0 <__assert_fail@plt+0x150c>
   143a8:	mov	r0, r5
   143ac:	ldr	r3, [r0, #48]	; 0x30
   143b0:	cmp	r3, #0
   143b4:	bge	14398 <__assert_fail@plt+0x2b04>
   143b8:	bl	12da0 <__assert_fail@plt+0x150c>
   143bc:	b	14318 <__assert_fail@plt+0x2a84>
   143c0:	bl	1184c <close@plt>
   143c4:	cmp	r0, #0
   143c8:	beq	14350 <__assert_fail@plt+0x2abc>
   143cc:	bl	116e4 <__errno_location@plt>
   143d0:	ldr	r5, [r0]
   143d4:	b	14354 <__assert_fail@plt+0x2ac0>
   143d8:	tst	r3, #4
   143dc:	bne	14350 <__assert_fail@plt+0x2abc>
   143e0:	ldr	r0, [r4, #28]
   143e4:	bl	117bc <fchdir@plt>
   143e8:	subs	r5, r0, #0
   143ec:	beq	143f8 <__assert_fail@plt+0x2b64>
   143f0:	bl	116e4 <__errno_location@plt>
   143f4:	ldr	r5, [r0]
   143f8:	ldr	r0, [r4, #28]
   143fc:	bl	1184c <close@plt>
   14400:	clz	r3, r5
   14404:	lsr	r3, r3, #5
   14408:	cmp	r0, #0
   1440c:	moveq	r3, #0
   14410:	cmp	r3, #0
   14414:	beq	14354 <__assert_fail@plt+0x2ac0>
   14418:	b	143cc <__assert_fail@plt+0x2b38>
   1441c:	push	{r4, r5, r6, r7, r8, lr}
   14420:	ldr	r4, [r0]
   14424:	cmp	r4, #0
   14428:	beq	14728 <__assert_fail@plt+0x2e94>
   1442c:	ldr	r1, [r0, #48]	; 0x30
   14430:	mov	r5, r0
   14434:	ands	r2, r1, #8192	; 0x2000
   14438:	bne	14728 <__assert_fail@plt+0x2e94>
   1443c:	ldrh	r3, [r4, #60]	; 0x3c
   14440:	mov	ip, #3
   14444:	strh	ip, [r4, #60]	; 0x3c
   14448:	cmp	r3, #1
   1444c:	bne	14464 <__assert_fail@plt+0x2bd0>
   14450:	mov	r1, r4
   14454:	bl	12ebc <__assert_fail@plt+0x1628>
   14458:	strh	r0, [r4, #56]	; 0x38
   1445c:	mov	r0, r4
   14460:	pop	{r4, r5, r6, r7, r8, pc}
   14464:	cmp	r3, #2
   14468:	ldrh	r2, [r4, #56]	; 0x38
   1446c:	bne	1454c <__assert_fail@plt+0x2cb8>
   14470:	sub	ip, r2, #12
   14474:	cmp	ip, #1
   14478:	bhi	1454c <__assert_fail@plt+0x2cb8>
   1447c:	mov	r2, #1
   14480:	mov	r1, r4
   14484:	bl	12ebc <__assert_fail@plt+0x1628>
   14488:	cmp	r0, #1
   1448c:	strh	r0, [r4, #56]	; 0x38
   14490:	bne	144d8 <__assert_fail@plt+0x2c44>
   14494:	ldr	r3, [r5, #48]	; 0x30
   14498:	tst	r3, #4
   1449c:	bne	144d8 <__assert_fail@plt+0x2c44>
   144a0:	ldr	r1, [pc, #1332]	; 149dc <__assert_fail@plt+0x3148>
   144a4:	mov	r0, r5
   144a8:	bl	13130 <__assert_fail@plt+0x189c>
   144ac:	cmp	r0, #0
   144b0:	str	r0, [r4, #36]	; 0x24
   144b4:	ldrhge	r3, [r4, #58]	; 0x3a
   144b8:	orrge	r3, r3, #2
   144bc:	strhge	r3, [r4, #58]	; 0x3a
   144c0:	bge	144d8 <__assert_fail@plt+0x2c44>
   144c4:	bl	116e4 <__errno_location@plt>
   144c8:	ldr	r3, [r0]
   144cc:	str	r3, [r4, #32]
   144d0:	mov	r3, #7
   144d4:	strh	r3, [r4, #56]	; 0x38
   144d8:	ldrh	r3, [r4, #56]	; 0x38
   144dc:	str	r4, [r5]
   144e0:	cmp	r3, #11
   144e4:	bne	1450c <__assert_fail@plt+0x2c78>
   144e8:	ldrd	r2, [r4, #112]	; 0x70
   144ec:	cmp	r3, #0
   144f0:	cmpeq	r2, #2
   144f4:	bne	1487c <__assert_fail@plt+0x2fe8>
   144f8:	mov	r2, #0
   144fc:	mov	r1, r4
   14500:	mov	r0, r5
   14504:	bl	12ebc <__assert_fail@plt+0x1628>
   14508:	strh	r0, [r4, #56]	; 0x38
   1450c:	ldrh	r3, [r4, #56]	; 0x38
   14510:	cmp	r3, #1
   14514:	bne	1445c <__assert_fail@plt+0x2bc8>
   14518:	ldr	r3, [r4, #48]	; 0x30
   1451c:	cmp	r3, #0
   14520:	ldrdeq	r2, [r4, #64]	; 0x40
   14524:	strdeq	r2, [r5, #16]
   14528:	mov	r0, r5
   1452c:	mov	r1, r4
   14530:	bl	13714 <__assert_fail@plt+0x1e80>
   14534:	subs	r5, r0, #0
   14538:	bne	1445c <__assert_fail@plt+0x2bc8>
   1453c:	bl	116e4 <__errno_location@plt>
   14540:	mov	r3, #12
   14544:	str	r3, [r0]
   14548:	b	14728 <__assert_fail@plt+0x2e94>
   1454c:	cmp	r2, #1
   14550:	movne	r6, r4
   14554:	bne	146dc <__assert_fail@plt+0x2e48>
   14558:	cmp	r3, #4
   1455c:	beq	1457c <__assert_fail@plt+0x2ce8>
   14560:	tst	r1, #64	; 0x40
   14564:	beq	145c0 <__assert_fail@plt+0x2d2c>
   14568:	ldrd	r6, [r4, #64]	; 0x40
   1456c:	ldrd	r2, [r5, #16]
   14570:	cmp	r7, r3
   14574:	cmpeq	r6, r2
   14578:	beq	145c0 <__assert_fail@plt+0x2d2c>
   1457c:	ldrh	r3, [r4, #58]	; 0x3a
   14580:	tst	r3, #2
   14584:	beq	14590 <__assert_fail@plt+0x2cfc>
   14588:	ldr	r0, [r4, #36]	; 0x24
   1458c:	bl	1184c <close@plt>
   14590:	ldr	r0, [r5, #4]
   14594:	cmp	r0, #0
   14598:	beq	145a8 <__assert_fail@plt+0x2d14>
   1459c:	bl	13174 <__assert_fail@plt+0x18e0>
   145a0:	mov	r3, #0
   145a4:	str	r3, [r5, #4]
   145a8:	mov	r3, #6
   145ac:	strh	r3, [r4, #56]	; 0x38
   145b0:	mov	r1, r4
   145b4:	mov	r0, r5
   145b8:	bl	13578 <__assert_fail@plt+0x1ce4>
   145bc:	b	1445c <__assert_fail@plt+0x2bc8>
   145c0:	ldr	r0, [r5, #4]
   145c4:	cmp	r0, #0
   145c8:	beq	145e8 <__assert_fail@plt+0x2d54>
   145cc:	tst	r1, #4096	; 0x1000
   145d0:	beq	145e8 <__assert_fail@plt+0x2d54>
   145d4:	bic	r1, r1, #4096	; 0x1000
   145d8:	str	r1, [r5, #48]	; 0x30
   145dc:	bl	13174 <__assert_fail@plt+0x18e0>
   145e0:	mov	r3, #0
   145e4:	str	r3, [r5, #4]
   145e8:	ldr	r3, [r5, #4]
   145ec:	cmp	r3, #0
   145f0:	beq	14698 <__assert_fail@plt+0x2e04>
   145f4:	ldr	r3, [r4, #24]
   145f8:	mvn	r2, #0
   145fc:	mov	r1, r4
   14600:	mov	r0, r5
   14604:	bl	133dc <__assert_fail@plt+0x1b48>
   14608:	cmp	r0, #0
   1460c:	beq	14634 <__assert_fail@plt+0x2da0>
   14610:	bl	116e4 <__errno_location@plt>
   14614:	ldr	r3, [r0]
   14618:	str	r3, [r4, #32]
   1461c:	ldrh	r3, [r4, #58]	; 0x3a
   14620:	orr	r3, r3, #1
   14624:	strh	r3, [r4, #58]	; 0x3a
   14628:	ldr	r3, [r5, #4]
   1462c:	cmp	r3, #0
   14630:	bne	14684 <__assert_fail@plt+0x2df0>
   14634:	mov	r3, #0
   14638:	ldr	r4, [r5, #4]
   1463c:	str	r3, [r5, #4]
   14640:	ldr	r0, [r4, #4]
   14644:	ldr	r2, [r5, #24]
   14648:	ldr	r1, [r0, #40]	; 0x28
   1464c:	ldr	r0, [r0, #28]
   14650:	sub	r3, r1, #1
   14654:	ldrb	r0, [r0, r3]
   14658:	cmp	r0, #47	; 0x2f
   1465c:	movne	r3, r1
   14660:	mov	r1, #47	; 0x2f
   14664:	add	r0, r2, r3
   14668:	strb	r1, [r2, r3]
   1466c:	ldr	r2, [r4, #52]	; 0x34
   14670:	add	r1, r4, #168	; 0xa8
   14674:	add	r2, r2, #1
   14678:	add	r0, r0, #1
   1467c:	bl	114d4 <memmove@plt>
   14680:	b	144d8 <__assert_fail@plt+0x2c44>
   14684:	ldr	r2, [r3, #4]
   14688:	ldr	r2, [r2, #24]
   1468c:	str	r2, [r3, #24]
   14690:	ldr	r3, [r3, #8]
   14694:	b	1462c <__assert_fail@plt+0x2d98>
   14698:	mov	r1, #3
   1469c:	mov	r0, r5
   146a0:	bl	137cc <__assert_fail@plt+0x1f38>
   146a4:	cmp	r0, #0
   146a8:	str	r0, [r5, #4]
   146ac:	bne	14634 <__assert_fail@plt+0x2da0>
   146b0:	ldr	r3, [r5, #48]	; 0x30
   146b4:	tst	r3, #8192	; 0x2000
   146b8:	bne	14728 <__assert_fail@plt+0x2e94>
   146bc:	ldr	r3, [r4, #32]
   146c0:	cmp	r3, #0
   146c4:	beq	145b0 <__assert_fail@plt+0x2d1c>
   146c8:	ldrh	r3, [r4, #56]	; 0x38
   146cc:	cmp	r3, #4
   146d0:	beq	145b0 <__assert_fail@plt+0x2d1c>
   146d4:	mov	r3, #7
   146d8:	b	145ac <__assert_fail@plt+0x2d18>
   146dc:	ldr	r4, [r4, #8]
   146e0:	cmp	r4, #0
   146e4:	bne	1473c <__assert_fail@plt+0x2ea8>
   146e8:	ldr	r3, [r6, #4]
   146ec:	ldr	r2, [r3, #12]
   146f0:	cmp	r2, #0
   146f4:	beq	1488c <__assert_fail@plt+0x2ff8>
   146f8:	str	r3, [r5]
   146fc:	ldr	r2, [r5, #24]
   14700:	ldr	r3, [r3, #40]	; 0x28
   14704:	mov	r1, #3
   14708:	mov	r0, r5
   1470c:	strb	r4, [r2, r3]
   14710:	bl	137cc <__assert_fail@plt+0x1f38>
   14714:	subs	r4, r0, #0
   14718:	bne	14730 <__assert_fail@plt+0x2e9c>
   1471c:	ldr	r3, [r5, #48]	; 0x30
   14720:	tst	r3, #8192	; 0x2000
   14724:	beq	1488c <__assert_fail@plt+0x2ff8>
   14728:	mov	r4, #0
   1472c:	b	1445c <__assert_fail@plt+0x2bc8>
   14730:	mov	r0, r6
   14734:	bl	12da0 <__assert_fail@plt+0x150c>
   14738:	b	14640 <__assert_fail@plt+0x2dac>
   1473c:	mov	r0, r6
   14740:	str	r4, [r5]
   14744:	bl	12da0 <__assert_fail@plt+0x150c>
   14748:	ldr	r6, [r4, #48]	; 0x30
   1474c:	cmp	r6, #0
   14750:	bne	147f8 <__assert_fail@plt+0x2f64>
   14754:	mov	r0, r5
   14758:	bl	1338c <__assert_fail@plt+0x1af8>
   1475c:	cmp	r0, #0
   14760:	ldrne	r3, [r5, #48]	; 0x30
   14764:	orrne	r3, r3, #8192	; 0x2000
   14768:	strne	r3, [r5, #48]	; 0x30
   1476c:	bne	14728 <__assert_fail@plt+0x2e94>
   14770:	mov	r0, r5
   14774:	bl	131ac <__assert_fail@plt+0x1918>
   14778:	ldr	r2, [r4, #52]	; 0x34
   1477c:	add	r7, r4, #168	; 0xa8
   14780:	str	r2, [r4, #40]	; 0x28
   14784:	mov	r1, r7
   14788:	add	r2, r2, #1
   1478c:	ldr	r0, [r5, #24]
   14790:	bl	114d4 <memmove@plt>
   14794:	mov	r1, #47	; 0x2f
   14798:	mov	r0, r7
   1479c:	bl	11774 <strrchr@plt>
   147a0:	cmp	r0, #0
   147a4:	beq	147e0 <__assert_fail@plt+0x2f4c>
   147a8:	cmp	r7, r0
   147ac:	bne	147bc <__assert_fail@plt+0x2f28>
   147b0:	ldrb	r3, [r4, #169]	; 0xa9
   147b4:	cmp	r3, #0
   147b8:	beq	147e0 <__assert_fail@plt+0x2f4c>
   147bc:	add	r6, r0, #1
   147c0:	mov	r0, r6
   147c4:	bl	116b4 <strlen@plt>
   147c8:	mov	r1, r6
   147cc:	mov	r8, r0
   147d0:	add	r2, r0, #1
   147d4:	mov	r0, r7
   147d8:	bl	114d4 <memmove@plt>
   147dc:	str	r8, [r4, #52]	; 0x34
   147e0:	ldr	r3, [r5, #24]
   147e4:	mov	r0, r5
   147e8:	str	r3, [r4, #28]
   147ec:	str	r3, [r4, #24]
   147f0:	bl	13698 <__assert_fail@plt+0x1e04>
   147f4:	b	144d8 <__assert_fail@plt+0x2c44>
   147f8:	ldrh	r3, [r4, #60]	; 0x3c
   147fc:	mov	r6, r4
   14800:	cmp	r3, #4
   14804:	beq	146dc <__assert_fail@plt+0x2e48>
   14808:	cmp	r3, #2
   1480c:	bne	14640 <__assert_fail@plt+0x2dac>
   14810:	mov	r2, #1
   14814:	mov	r1, r4
   14818:	mov	r0, r5
   1481c:	bl	12ebc <__assert_fail@plt+0x1628>
   14820:	cmp	r0, #1
   14824:	strh	r0, [r4, #56]	; 0x38
   14828:	bne	14870 <__assert_fail@plt+0x2fdc>
   1482c:	ldr	r3, [r5, #48]	; 0x30
   14830:	tst	r3, #4
   14834:	bne	14870 <__assert_fail@plt+0x2fdc>
   14838:	ldr	r1, [pc, #412]	; 149dc <__assert_fail@plt+0x3148>
   1483c:	mov	r0, r5
   14840:	bl	13130 <__assert_fail@plt+0x189c>
   14844:	cmp	r0, #0
   14848:	str	r0, [r4, #36]	; 0x24
   1484c:	ldrhge	r3, [r4, #58]	; 0x3a
   14850:	orrge	r3, r3, #2
   14854:	strhge	r3, [r4, #58]	; 0x3a
   14858:	bge	14870 <__assert_fail@plt+0x2fdc>
   1485c:	bl	116e4 <__errno_location@plt>
   14860:	ldr	r3, [r0]
   14864:	str	r3, [r4, #32]
   14868:	mov	r3, #7
   1486c:	strh	r3, [r4, #56]	; 0x38
   14870:	mov	r3, #3
   14874:	strh	r3, [r4, #60]	; 0x3c
   14878:	b	14640 <__assert_fail@plt+0x2dac>
   1487c:	cmp	r3, #0
   14880:	cmpeq	r2, #1
   14884:	beq	1450c <__assert_fail@plt+0x2c78>
   14888:	bl	11840 <abort@plt>
   1488c:	ldr	r4, [r6, #4]
   14890:	mov	r0, r6
   14894:	str	r4, [r5]
   14898:	bl	12da0 <__assert_fail@plt+0x150c>
   1489c:	ldr	r3, [r4, #48]	; 0x30
   148a0:	cmn	r3, #1
   148a4:	bne	148c4 <__assert_fail@plt+0x3030>
   148a8:	mov	r0, r4
   148ac:	bl	12da0 <__assert_fail@plt+0x150c>
   148b0:	bl	116e4 <__errno_location@plt>
   148b4:	mov	r4, #0
   148b8:	str	r4, [r0]
   148bc:	str	r4, [r5]
   148c0:	b	1445c <__assert_fail@plt+0x2bc8>
   148c4:	ldrh	r3, [r4, #56]	; 0x38
   148c8:	cmp	r3, #11
   148cc:	beq	14888 <__assert_fail@plt+0x2ff4>
   148d0:	ldr	r3, [r4, #40]	; 0x28
   148d4:	ldr	r2, [r5, #24]
   148d8:	mov	r1, #0
   148dc:	strb	r1, [r2, r3]
   148e0:	ldr	r3, [r4, #48]	; 0x30
   148e4:	cmp	r3, r1
   148e8:	bne	14918 <__assert_fail@plt+0x3084>
   148ec:	mov	r0, r5
   148f0:	bl	1338c <__assert_fail@plt+0x1af8>
   148f4:	cmp	r0, #0
   148f8:	beq	14950 <__assert_fail@plt+0x30bc>
   148fc:	bl	116e4 <__errno_location@plt>
   14900:	ldr	r3, [r0]
   14904:	str	r3, [r4, #32]
   14908:	ldr	r3, [r5, #48]	; 0x30
   1490c:	orr	r3, r3, #8192	; 0x2000
   14910:	str	r3, [r5, #48]	; 0x30
   14914:	b	14950 <__assert_fail@plt+0x30bc>
   14918:	ldrh	r3, [r4, #58]	; 0x3a
   1491c:	tst	r3, #2
   14920:	beq	149bc <__assert_fail@plt+0x3128>
   14924:	ldr	r3, [r5, #48]	; 0x30
   14928:	tst	r3, #4
   1492c:	bne	14948 <__assert_fail@plt+0x30b4>
   14930:	tst	r3, #512	; 0x200
   14934:	beq	14990 <__assert_fail@plt+0x30fc>
   14938:	mov	r2, #1
   1493c:	ldr	r1, [r4, #36]	; 0x24
   14940:	mov	r0, r5
   14944:	bl	13310 <__assert_fail@plt+0x1a7c>
   14948:	ldr	r0, [r4, #36]	; 0x24
   1494c:	bl	1184c <close@plt>
   14950:	ldrh	r3, [r4, #56]	; 0x38
   14954:	cmp	r3, #2
   14958:	beq	14980 <__assert_fail@plt+0x30ec>
   1495c:	ldr	r3, [r4, #32]
   14960:	cmp	r3, #0
   14964:	movne	r3, #7
   14968:	moveq	r3, #6
   1496c:	strh	r3, [r4, #56]	; 0x38
   14970:	bne	14980 <__assert_fail@plt+0x30ec>
   14974:	mov	r1, r4
   14978:	mov	r0, r5
   1497c:	bl	13578 <__assert_fail@plt+0x1ce4>
   14980:	ldr	r3, [r5, #48]	; 0x30
   14984:	tst	r3, #8192	; 0x2000
   14988:	beq	1445c <__assert_fail@plt+0x2bc8>
   1498c:	b	14728 <__assert_fail@plt+0x2e94>
   14990:	ldr	r0, [r4, #36]	; 0x24
   14994:	bl	117bc <fchdir@plt>
   14998:	cmp	r0, #0
   1499c:	beq	14948 <__assert_fail@plt+0x30b4>
   149a0:	bl	116e4 <__errno_location@plt>
   149a4:	ldr	r3, [r0]
   149a8:	str	r3, [r4, #32]
   149ac:	ldr	r3, [r5, #48]	; 0x30
   149b0:	orr	r3, r3, #8192	; 0x2000
   149b4:	str	r3, [r5, #48]	; 0x30
   149b8:	b	14948 <__assert_fail@plt+0x30b4>
   149bc:	tst	r3, #1
   149c0:	bne	14950 <__assert_fail@plt+0x30bc>
   149c4:	ldr	r3, [pc, #20]	; 149e0 <__assert_fail@plt+0x314c>
   149c8:	mvn	r2, #0
   149cc:	ldr	r1, [r4, #4]
   149d0:	mov	r0, r5
   149d4:	bl	133dc <__assert_fail@plt+0x1b48>
   149d8:	b	148f4 <__assert_fail@plt+0x3060>
   149dc:	andeq	r9, r1, r3, asr r7
   149e0:	andeq	r9, r1, r2, asr r7
   149e4:	cmp	r2, #4
   149e8:	bls	14a04 <__assert_fail@plt+0x3170>
   149ec:	push	{r4, lr}
   149f0:	bl	116e4 <__errno_location@plt>
   149f4:	mov	r3, #22
   149f8:	str	r3, [r0]
   149fc:	mov	r0, #1
   14a00:	pop	{r4, pc}
   14a04:	strh	r2, [r1, #60]	; 0x3c
   14a08:	mov	r0, #0
   14a0c:	bx	lr
   14a10:	push	{r4, r5, r6, r7, r8, lr}
   14a14:	bics	r8, r1, #4096	; 0x1000
   14a18:	beq	14a30 <__assert_fail@plt+0x319c>
   14a1c:	bl	116e4 <__errno_location@plt>
   14a20:	mov	r3, #22
   14a24:	str	r3, [r0]
   14a28:	mov	r0, #0
   14a2c:	pop	{r4, r5, r6, r7, r8, pc}
   14a30:	mov	r5, r0
   14a34:	ldr	r4, [r0]
   14a38:	mov	r7, r1
   14a3c:	bl	116e4 <__errno_location@plt>
   14a40:	mov	r6, r0
   14a44:	str	r8, [r0]
   14a48:	ldr	r0, [r5, #48]	; 0x30
   14a4c:	ands	r0, r0, #8192	; 0x2000
   14a50:	bne	14a28 <__assert_fail@plt+0x3194>
   14a54:	ldrh	r3, [r4, #56]	; 0x38
   14a58:	cmp	r3, #9
   14a5c:	bne	14a68 <__assert_fail@plt+0x31d4>
   14a60:	ldr	r0, [r4, #8]
   14a64:	pop	{r4, r5, r6, r7, r8, pc}
   14a68:	cmp	r3, #1
   14a6c:	popne	{r4, r5, r6, r7, r8, pc}
   14a70:	ldr	r0, [r5, #4]
   14a74:	cmp	r0, #0
   14a78:	beq	14a80 <__assert_fail@plt+0x31ec>
   14a7c:	bl	13174 <__assert_fail@plt+0x18e0>
   14a80:	cmp	r7, #4096	; 0x1000
   14a84:	moveq	r8, #2
   14a88:	ldreq	r3, [r5, #48]	; 0x30
   14a8c:	movne	r8, #1
   14a90:	orreq	r3, r3, #4096	; 0x1000
   14a94:	streq	r3, [r5, #48]	; 0x30
   14a98:	ldr	r3, [r4, #48]	; 0x30
   14a9c:	cmp	r3, #0
   14aa0:	bne	14ac0 <__assert_fail@plt+0x322c>
   14aa4:	ldr	r3, [r4, #24]
   14aa8:	ldrb	r3, [r3]
   14aac:	cmp	r3, #47	; 0x2f
   14ab0:	beq	14ac0 <__assert_fail@plt+0x322c>
   14ab4:	ldr	r0, [r5, #48]	; 0x30
   14ab8:	ands	r4, r0, #4
   14abc:	beq	14ad4 <__assert_fail@plt+0x3240>
   14ac0:	mov	r1, r8
   14ac4:	mov	r0, r5
   14ac8:	bl	137cc <__assert_fail@plt+0x1f38>
   14acc:	str	r0, [r5, #4]
   14ad0:	pop	{r4, r5, r6, r7, r8, pc}
   14ad4:	ldr	r1, [pc, #116]	; 14b50 <__assert_fail@plt+0x32bc>
   14ad8:	mov	r0, r5
   14adc:	bl	13130 <__assert_fail@plt+0x189c>
   14ae0:	subs	r7, r0, #0
   14ae4:	strlt	r4, [r5, #4]
   14ae8:	blt	14a28 <__assert_fail@plt+0x3194>
   14aec:	mov	r1, r8
   14af0:	mov	r0, r5
   14af4:	bl	137cc <__assert_fail@plt+0x1f38>
   14af8:	str	r0, [r5, #4]
   14afc:	ldr	r0, [r5, #48]	; 0x30
   14b00:	ands	r4, r0, #512	; 0x200
   14b04:	beq	14b20 <__assert_fail@plt+0x328c>
   14b08:	mov	r2, #1
   14b0c:	mov	r1, r7
   14b10:	mov	r0, r5
   14b14:	bl	13310 <__assert_fail@plt+0x1a7c>
   14b18:	ldr	r0, [r5, #4]
   14b1c:	pop	{r4, r5, r6, r7, r8, pc}
   14b20:	mov	r0, r7
   14b24:	bl	117bc <fchdir@plt>
   14b28:	cmp	r0, #0
   14b2c:	beq	14b44 <__assert_fail@plt+0x32b0>
   14b30:	ldr	r5, [r6]
   14b34:	mov	r0, r7
   14b38:	bl	1184c <close@plt>
   14b3c:	str	r5, [r6]
   14b40:	b	14a28 <__assert_fail@plt+0x3194>
   14b44:	mov	r0, r7
   14b48:	bl	1184c <close@plt>
   14b4c:	b	14b18 <__assert_fail@plt+0x3284>
   14b50:	andeq	r9, r1, r3, asr r7
   14b54:	andeq	r0, r0, r0
   14b58:	push	{r4, lr}
   14b5c:	ror	r0, r0, #3
   14b60:	bl	18d04 <lchmod@@Base+0x32c8>
   14b64:	mov	r0, r1
   14b68:	pop	{r4, pc}
   14b6c:	sub	r0, r1, r0
   14b70:	clz	r0, r0
   14b74:	lsr	r0, r0, #5
   14b78:	bx	lr
   14b7c:	push	{r4, lr}
   14b80:	mov	r4, r0
   14b84:	mov	r0, r1
   14b88:	ldr	r3, [r4, #24]
   14b8c:	ldr	r1, [r4, #8]
   14b90:	blx	r3
   14b94:	ldr	r3, [r4, #8]
   14b98:	cmp	r0, r3
   14b9c:	bcc	14ba4 <__assert_fail@plt+0x3310>
   14ba0:	bl	11840 <abort@plt>
   14ba4:	ldr	r3, [r4]
   14ba8:	add	r0, r3, r0, lsl #3
   14bac:	pop	{r4, pc}
   14bb0:	push	{r4, r5, r6, r7, r8, lr}
   14bb4:	mov	r6, r1
   14bb8:	mov	r8, r2
   14bbc:	mov	r5, r0
   14bc0:	mov	r7, r3
   14bc4:	bl	14b7c <__assert_fail@plt+0x32e8>
   14bc8:	str	r0, [r8]
   14bcc:	ldr	r1, [r0]
   14bd0:	cmp	r1, #0
   14bd4:	bne	14be4 <__assert_fail@plt+0x3350>
   14bd8:	mov	r2, #0
   14bdc:	mov	r0, r2
   14be0:	pop	{r4, r5, r6, r7, r8, pc}
   14be4:	cmp	r6, r1
   14be8:	mov	r4, r0
   14bec:	bne	14c2c <__assert_fail@plt+0x3398>
   14bf0:	cmp	r7, #0
   14bf4:	ldr	r2, [r4]
   14bf8:	beq	14bdc <__assert_fail@plt+0x3348>
   14bfc:	ldr	r3, [r4, #4]
   14c00:	cmp	r3, #0
   14c04:	streq	r3, [r4]
   14c08:	beq	14bdc <__assert_fail@plt+0x3348>
   14c0c:	ldm	r3, {r0, r1}
   14c10:	stm	r4, {r0, r1}
   14c14:	mov	r1, #0
   14c18:	str	r1, [r3]
   14c1c:	ldr	r1, [r5, #36]	; 0x24
   14c20:	str	r1, [r3, #4]
   14c24:	str	r3, [r5, #36]	; 0x24
   14c28:	b	14bdc <__assert_fail@plt+0x3348>
   14c2c:	ldr	r3, [r5, #28]
   14c30:	mov	r0, r6
   14c34:	blx	r3
   14c38:	cmp	r0, #0
   14c3c:	bne	14bf0 <__assert_fail@plt+0x335c>
   14c40:	ldr	r3, [r4, #4]
   14c44:	cmp	r3, #0
   14c48:	beq	14bd8 <__assert_fail@plt+0x3344>
   14c4c:	ldr	r1, [r3]
   14c50:	cmp	r6, r1
   14c54:	bne	14c74 <__assert_fail@plt+0x33e0>
   14c58:	ldr	r3, [r4, #4]
   14c5c:	cmp	r7, #0
   14c60:	ldr	r2, [r3]
   14c64:	beq	14bdc <__assert_fail@plt+0x3348>
   14c68:	ldr	r1, [r3, #4]
   14c6c:	str	r1, [r4, #4]
   14c70:	b	14c14 <__assert_fail@plt+0x3380>
   14c74:	ldr	r3, [r5, #28]
   14c78:	mov	r0, r6
   14c7c:	blx	r3
   14c80:	cmp	r0, #0
   14c84:	bne	14c58 <__assert_fail@plt+0x33c4>
   14c88:	ldr	r4, [r4, #4]
   14c8c:	b	14c40 <__assert_fail@plt+0x33ac>
   14c90:	push	{r4, r5, r6, lr}
   14c94:	ldrb	r4, [r1, #16]
   14c98:	cmp	r4, #0
   14c9c:	bne	14cc8 <__assert_fail@plt+0x3434>
   14ca0:	vmov	s15, r0
   14ca4:	vldr	s14, [r1, #8]
   14ca8:	vcvt.f32.u32	s13, s15
   14cac:	vdiv.f32	s15, s13, s14
   14cb0:	vldr	s14, [pc, #156]	; 14d54 <__assert_fail@plt+0x34c0>
   14cb4:	vcmpe.f32	s15, s14
   14cb8:	vmrs	APSR_nzcv, fpscr
   14cbc:	bge	14d20 <__assert_fail@plt+0x348c>
   14cc0:	vcvt.u32.f32	s15, s15
   14cc4:	vmov	r0, s15
   14cc8:	cmp	r0, #10
   14ccc:	movcc	r0, #10
   14cd0:	orr	r4, r0, #1
   14cd4:	cmn	r4, #1
   14cd8:	beq	14d00 <__assert_fail@plt+0x346c>
   14cdc:	mov	r6, #9
   14ce0:	mov	r5, #3
   14ce4:	cmp	r4, r6
   14ce8:	bhi	14d30 <__assert_fail@plt+0x349c>
   14cec:	mov	r1, r5
   14cf0:	mov	r0, r4
   14cf4:	bl	18d04 <lchmod@@Base+0x32c8>
   14cf8:	cmp	r1, #0
   14cfc:	beq	14d28 <__assert_fail@plt+0x3494>
   14d00:	lsrs	r3, r4, #30
   14d04:	movne	r3, #1
   14d08:	moveq	r3, #0
   14d0c:	tst	r4, #536870912	; 0x20000000
   14d10:	bne	14d1c <__assert_fail@plt+0x3488>
   14d14:	cmp	r3, #0
   14d18:	beq	14d20 <__assert_fail@plt+0x348c>
   14d1c:	mov	r4, #0
   14d20:	mov	r0, r4
   14d24:	pop	{r4, r5, r6, pc}
   14d28:	add	r4, r4, #2
   14d2c:	b	14cd4 <__assert_fail@plt+0x3440>
   14d30:	mov	r1, r5
   14d34:	mov	r0, r4
   14d38:	bl	18d04 <lchmod@@Base+0x32c8>
   14d3c:	cmp	r1, #0
   14d40:	beq	14cec <__assert_fail@plt+0x3458>
   14d44:	add	r3, r5, #1
   14d48:	add	r5, r5, #2
   14d4c:	add	r6, r6, r3, lsl #2
   14d50:	b	14ce4 <__assert_fail@plt+0x3450>
   14d54:	svcmi	0x00800000
   14d58:	ldr	r3, [r0]
   14d5c:	ldr	r2, [pc, #160]	; 14e04 <__assert_fail@plt+0x3570>
   14d60:	cmp	r3, r2
   14d64:	beq	14dec <__assert_fail@plt+0x3558>
   14d68:	vldr	s14, [r3, #8]
   14d6c:	vldr	s13, [pc, #128]	; 14df4 <__assert_fail@plt+0x3560>
   14d70:	vcmpe.f32	s14, s13
   14d74:	vmrs	APSR_nzcv, fpscr
   14d78:	ble	14de0 <__assert_fail@plt+0x354c>
   14d7c:	vldr	s15, [pc, #116]	; 14df8 <__assert_fail@plt+0x3564>
   14d80:	vcmpe.f32	s14, s15
   14d84:	vmrs	APSR_nzcv, fpscr
   14d88:	bpl	14de0 <__assert_fail@plt+0x354c>
   14d8c:	vldr	s12, [r3, #12]
   14d90:	vldr	s15, [pc, #100]	; 14dfc <__assert_fail@plt+0x3568>
   14d94:	vcmpe.f32	s12, s15
   14d98:	vmrs	APSR_nzcv, fpscr
   14d9c:	ble	14de0 <__assert_fail@plt+0x354c>
   14da0:	vldr	s15, [r3]
   14da4:	vcmpe.f32	s15, #0.0
   14da8:	vmrs	APSR_nzcv, fpscr
   14dac:	blt	14de0 <__assert_fail@plt+0x354c>
   14db0:	vadd.f32	s15, s15, s13
   14db4:	vldr	s13, [r3, #4]
   14db8:	vcmpe.f32	s15, s13
   14dbc:	vmrs	APSR_nzcv, fpscr
   14dc0:	bpl	14de0 <__assert_fail@plt+0x354c>
   14dc4:	vldr	s12, [pc, #52]	; 14e00 <__assert_fail@plt+0x356c>
   14dc8:	vcmpe.f32	s13, s12
   14dcc:	vmrs	APSR_nzcv, fpscr
   14dd0:	bhi	14de0 <__assert_fail@plt+0x354c>
   14dd4:	vcmpe.f32	s14, s15
   14dd8:	vmrs	APSR_nzcv, fpscr
   14ddc:	bgt	14dec <__assert_fail@plt+0x3558>
   14de0:	str	r2, [r0]
   14de4:	mov	r0, #0
   14de8:	bx	lr
   14dec:	mov	r0, #1
   14df0:	bx	lr
   14df4:	stclcc	12, cr12, [ip, #820]	; 0x334
   14df8:	svccc	0x00666666
   14dfc:	svccc	0x008ccccd
   14e00:	svccc	0x00800000
   14e04:	andeq	r9, r1, r8, asr r7
   14e08:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e0c:	mov	r5, r0
   14e10:	ldr	r4, [r1]
   14e14:	mov	r7, r1
   14e18:	mov	r8, r2
   14e1c:	add	r4, r4, #8
   14e20:	mov	r9, #0
   14e24:	mov	sl, #8
   14e28:	ldr	r2, [r7, #4]
   14e2c:	sub	r3, r4, #8
   14e30:	cmp	r2, r3
   14e34:	bhi	14e44 <__assert_fail@plt+0x35b0>
   14e38:	mov	r8, #1
   14e3c:	mov	r0, r8
   14e40:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e44:	ldr	r3, [r4, #-8]
   14e48:	cmp	r3, #0
   14e4c:	ldrne	r6, [r4, #-4]
   14e50:	bne	14ea8 <__assert_fail@plt+0x3614>
   14e54:	add	r4, r4, #8
   14e58:	b	14e28 <__assert_fail@plt+0x3594>
   14e5c:	ldr	fp, [r6]
   14e60:	mov	r0, r5
   14e64:	mov	r1, fp
   14e68:	bl	14b7c <__assert_fail@plt+0x32e8>
   14e6c:	ldr	r1, [r6, #4]
   14e70:	ldr	r2, [r0]
   14e74:	cmp	r2, #0
   14e78:	streq	fp, [r0]
   14e7c:	ldreq	r3, [r5, #12]
   14e80:	ldrne	r3, [r0, #4]
   14e84:	addeq	r3, r3, #1
   14e88:	streq	r3, [r5, #12]
   14e8c:	streq	r2, [r6]
   14e90:	ldreq	r3, [r5, #36]	; 0x24
   14e94:	strne	r3, [r6, #4]
   14e98:	streq	r3, [r6, #4]
   14e9c:	strne	r6, [r0, #4]
   14ea0:	streq	r6, [r5, #36]	; 0x24
   14ea4:	mov	r6, r1
   14ea8:	cmp	r6, #0
   14eac:	bne	14e5c <__assert_fail@plt+0x35c8>
   14eb0:	cmp	r8, #0
   14eb4:	ldr	fp, [r4, #-8]
   14eb8:	str	r6, [r4, #-4]
   14ebc:	bne	14e54 <__assert_fail@plt+0x35c0>
   14ec0:	mov	r1, fp
   14ec4:	mov	r0, r5
   14ec8:	bl	14b7c <__assert_fail@plt+0x32e8>
   14ecc:	ldr	r3, [r0]
   14ed0:	mov	r6, r0
   14ed4:	cmp	r3, #0
   14ed8:	beq	14f24 <__assert_fail@plt+0x3690>
   14edc:	ldr	r0, [r5, #36]	; 0x24
   14ee0:	cmp	r0, #0
   14ee4:	ldrne	r3, [r0, #4]
   14ee8:	strne	r3, [r5, #36]	; 0x24
   14eec:	bne	14f00 <__assert_fail@plt+0x366c>
   14ef0:	mov	r0, sl
   14ef4:	bl	18344 <lchmod@@Base+0x2908>
   14ef8:	cmp	r0, #0
   14efc:	beq	14e3c <__assert_fail@plt+0x35a8>
   14f00:	ldr	r3, [r6, #4]
   14f04:	str	fp, [r0]
   14f08:	str	r3, [r0, #4]
   14f0c:	str	r0, [r6, #4]
   14f10:	ldr	r3, [r7, #12]
   14f14:	str	r9, [r4, #-8]
   14f18:	sub	r3, r3, #1
   14f1c:	str	r3, [r7, #12]
   14f20:	b	14e54 <__assert_fail@plt+0x35c0>
   14f24:	ldr	r3, [r5, #12]
   14f28:	str	fp, [r0]
   14f2c:	add	r3, r3, #1
   14f30:	str	r3, [r5, #12]
   14f34:	b	14f10 <__assert_fail@plt+0x367c>
   14f38:	ldr	r0, [r0, #8]
   14f3c:	bx	lr
   14f40:	ldr	r0, [r0, #12]
   14f44:	bx	lr
   14f48:	ldr	r0, [r0, #16]
   14f4c:	bx	lr
   14f50:	ldm	r0, {r3, ip}
   14f54:	mov	r0, #0
   14f58:	cmp	r3, ip
   14f5c:	bcc	14f64 <__assert_fail@plt+0x36d0>
   14f60:	bx	lr
   14f64:	ldr	r2, [r3]
   14f68:	cmp	r2, #0
   14f6c:	movne	r1, r3
   14f70:	movne	r2, #1
   14f74:	bne	14f84 <__assert_fail@plt+0x36f0>
   14f78:	add	r3, r3, #8
   14f7c:	b	14f58 <__assert_fail@plt+0x36c4>
   14f80:	add	r2, r2, #1
   14f84:	ldr	r1, [r1, #4]
   14f88:	cmp	r1, #0
   14f8c:	bne	14f80 <__assert_fail@plt+0x36ec>
   14f90:	cmp	r0, r2
   14f94:	movcc	r0, r2
   14f98:	b	14f78 <__assert_fail@plt+0x36e4>
   14f9c:	push	{lr}		; (str lr, [sp, #-4]!)
   14fa0:	mov	r3, #0
   14fa4:	ldm	r0, {r2, lr}
   14fa8:	mov	r1, r3
   14fac:	cmp	r2, lr
   14fb0:	bcc	14fd4 <__assert_fail@plt+0x3740>
   14fb4:	ldr	r2, [r0, #12]
   14fb8:	cmp	r1, r2
   14fbc:	ldreq	r0, [r0, #16]
   14fc0:	subeq	r0, r0, r3
   14fc4:	clzeq	r0, r0
   14fc8:	lsreq	r0, r0, #5
   14fcc:	movne	r0, #0
   14fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   14fd4:	ldr	ip, [r2]
   14fd8:	cmp	ip, #0
   14fdc:	addne	r1, r1, #1
   14fe0:	addne	r3, r3, #1
   14fe4:	movne	ip, r2
   14fe8:	bne	14ff8 <__assert_fail@plt+0x3764>
   14fec:	add	r2, r2, #8
   14ff0:	b	14fac <__assert_fail@plt+0x3718>
   14ff4:	add	r3, r3, #1
   14ff8:	ldr	ip, [ip, #4]
   14ffc:	cmp	ip, #0
   15000:	bne	14ff4 <__assert_fail@plt+0x3760>
   15004:	b	14fec <__assert_fail@plt+0x3758>
   15008:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1500c:	mov	r4, r1
   15010:	ldr	r5, [r0, #8]
   15014:	ldr	r7, [r0, #12]
   15018:	mov	r6, r0
   1501c:	bl	14f50 <__assert_fail@plt+0x36bc>
   15020:	ldr	r3, [r6, #16]
   15024:	ldr	r2, [pc, #124]	; 150a8 <__assert_fail@plt+0x3814>
   15028:	mov	r1, #1
   1502c:	mov	r8, r0
   15030:	mov	r0, r4
   15034:	bl	1172c <__fprintf_chk@plt>
   15038:	mov	r3, r5
   1503c:	ldr	r2, [pc, #104]	; 150ac <__assert_fail@plt+0x3818>
   15040:	mov	r1, #1
   15044:	mov	r0, r4
   15048:	bl	1172c <__fprintf_chk@plt>
   1504c:	vmov	s15, r7
   15050:	mov	r3, r7
   15054:	ldr	r2, [pc, #84]	; 150b0 <__assert_fail@plt+0x381c>
   15058:	mov	r1, #1
   1505c:	vcvt.f64.u32	d6, s15
   15060:	vldr	d7, [pc, #56]	; 150a0 <__assert_fail@plt+0x380c>
   15064:	mov	r0, r4
   15068:	vmul.f64	d6, d6, d7
   1506c:	vmov	s15, r5
   15070:	vcvt.f64.u32	d7, s15
   15074:	vdiv.f64	d5, d6, d7
   15078:	vstr	d5, [sp]
   1507c:	bl	1172c <__fprintf_chk@plt>
   15080:	mov	r3, r8
   15084:	ldr	r2, [pc, #40]	; 150b4 <__assert_fail@plt+0x3820>
   15088:	mov	r1, #1
   1508c:	mov	r0, r4
   15090:	add	sp, sp, #8
   15094:	pop	{r4, r5, r6, r7, r8, lr}
   15098:	b	1172c <__fprintf_chk@plt>
   1509c:	nop			; (mov r0, r0)
   150a0:	andeq	r0, r0, r0
   150a4:	subsmi	r0, r9, r0
   150a8:	andeq	r9, r1, ip, ror #14
   150ac:	andeq	r9, r1, r4, lsl #15
   150b0:	muleq	r1, ip, r7
   150b4:			; <UNDEFINED> instruction: 0x000197bd
   150b8:	push	{r4, r5, r6, lr}
   150bc:	mov	r6, r0
   150c0:	mov	r5, r1
   150c4:	bl	14b7c <__assert_fail@plt+0x32e8>
   150c8:	ldr	r3, [r0]
   150cc:	cmp	r3, #0
   150d0:	movne	r4, r0
   150d4:	bne	15100 <__assert_fail@plt+0x386c>
   150d8:	mov	r0, #0
   150dc:	pop	{r4, r5, r6, pc}
   150e0:	ldr	r3, [r6, #28]
   150e4:	mov	r0, r5
   150e8:	blx	r3
   150ec:	cmp	r0, #0
   150f0:	bne	1510c <__assert_fail@plt+0x3878>
   150f4:	ldr	r4, [r4, #4]
   150f8:	cmp	r4, #0
   150fc:	beq	150d8 <__assert_fail@plt+0x3844>
   15100:	ldr	r1, [r4]
   15104:	cmp	r5, r1
   15108:	bne	150e0 <__assert_fail@plt+0x384c>
   1510c:	ldr	r0, [r4]
   15110:	pop	{r4, r5, r6, pc}
   15114:	ldr	r3, [r0, #16]
   15118:	cmp	r3, #0
   1511c:	beq	1514c <__assert_fail@plt+0x38b8>
   15120:	ldr	r3, [r0]
   15124:	ldr	r2, [r0, #4]
   15128:	cmp	r3, r2
   1512c:	bcc	15138 <__assert_fail@plt+0x38a4>
   15130:	push	{r4, lr}
   15134:	bl	11840 <abort@plt>
   15138:	ldr	r0, [r3]
   1513c:	cmp	r0, #0
   15140:	bne	15150 <__assert_fail@plt+0x38bc>
   15144:	add	r3, r3, #8
   15148:	b	15128 <__assert_fail@plt+0x3894>
   1514c:	mov	r0, r3
   15150:	bx	lr
   15154:	push	{r4, r5, r6, lr}
   15158:	mov	r4, r0
   1515c:	mov	r5, r1
   15160:	bl	14b7c <__assert_fail@plt+0x32e8>
   15164:	mov	r2, r0
   15168:	mov	r3, r0
   1516c:	ldr	r1, [r3]
   15170:	ldr	r3, [r3, #4]
   15174:	cmp	r5, r1
   15178:	bne	1518c <__assert_fail@plt+0x38f8>
   1517c:	cmp	r3, #0
   15180:	beq	1518c <__assert_fail@plt+0x38f8>
   15184:	ldr	r0, [r3]
   15188:	pop	{r4, r5, r6, pc}
   1518c:	cmp	r3, #0
   15190:	bne	1516c <__assert_fail@plt+0x38d8>
   15194:	ldr	r3, [r4, #4]
   15198:	add	r2, r2, #8
   1519c:	cmp	r2, r3
   151a0:	bcc	151ac <__assert_fail@plt+0x3918>
   151a4:	mov	r0, #0
   151a8:	pop	{r4, r5, r6, pc}
   151ac:	ldr	r0, [r2]
   151b0:	cmp	r0, #0
   151b4:	beq	15198 <__assert_fail@plt+0x3904>
   151b8:	pop	{r4, r5, r6, pc}
   151bc:	ldr	ip, [r0]
   151c0:	mov	r3, #0
   151c4:	push	{r4, r5, lr}
   151c8:	ldr	lr, [r0, #4]
   151cc:	cmp	ip, lr
   151d0:	bcc	151dc <__assert_fail@plt+0x3948>
   151d4:	mov	r0, r3
   151d8:	pop	{r4, r5, pc}
   151dc:	ldr	lr, [ip]
   151e0:	cmp	lr, #0
   151e4:	beq	15210 <__assert_fail@plt+0x397c>
   151e8:	add	r4, r1, r3, lsl #2
   151ec:	mov	lr, ip
   151f0:	cmp	r2, r3
   151f4:	bls	151d4 <__assert_fail@plt+0x3940>
   151f8:	ldr	r5, [lr]
   151fc:	add	r3, r3, #1
   15200:	str	r5, [r4], #4
   15204:	ldr	lr, [lr, #4]
   15208:	cmp	lr, #0
   1520c:	bne	151f0 <__assert_fail@plt+0x395c>
   15210:	add	ip, ip, #8
   15214:	b	151c8 <__assert_fail@plt+0x3934>
   15218:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1521c:	mov	r7, r0
   15220:	ldr	r4, [r0]
   15224:	mov	r8, r1
   15228:	mov	r9, r2
   1522c:	mov	r6, #0
   15230:	ldr	r3, [r7, #4]
   15234:	cmp	r4, r3
   15238:	bcc	15244 <__assert_fail@plt+0x39b0>
   1523c:	mov	r0, r6
   15240:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15244:	ldr	r3, [r4]
   15248:	cmp	r3, #0
   1524c:	beq	15278 <__assert_fail@plt+0x39e4>
   15250:	mov	r5, r4
   15254:	mov	r1, r9
   15258:	ldr	r0, [r5]
   1525c:	blx	r8
   15260:	cmp	r0, #0
   15264:	beq	1523c <__assert_fail@plt+0x39a8>
   15268:	ldr	r5, [r5, #4]
   1526c:	add	r6, r6, #1
   15270:	cmp	r5, #0
   15274:	bne	15254 <__assert_fail@plt+0x39c0>
   15278:	add	r4, r4, #8
   1527c:	b	15230 <__assert_fail@plt+0x399c>
   15280:	push	{r4, r5, r6, lr}
   15284:	sub	r4, r0, #1
   15288:	mov	r5, r1
   1528c:	mov	r0, #0
   15290:	mov	r6, #31
   15294:	ldrb	r3, [r4, #1]!
   15298:	cmp	r3, #0
   1529c:	bne	152a4 <__assert_fail@plt+0x3a10>
   152a0:	pop	{r4, r5, r6, pc}
   152a4:	mov	r1, r5
   152a8:	mla	r0, r6, r0, r3
   152ac:	bl	18d04 <lchmod@@Base+0x32c8>
   152b0:	mov	r0, r1
   152b4:	b	15294 <__assert_fail@plt+0x3a00>
   152b8:	push	{lr}		; (str lr, [sp, #-4]!)
   152bc:	mov	ip, r0
   152c0:	ldr	lr, [pc, #16]	; 152d8 <__assert_fail@plt+0x3a44>
   152c4:	ldm	lr!, {r0, r1, r2, r3}
   152c8:	stmia	ip!, {r0, r1, r2, r3}
   152cc:	ldr	r3, [lr]
   152d0:	str	r3, [ip]
   152d4:	pop	{pc}		; (ldr pc, [sp], #4)
   152d8:	andeq	r9, r1, r8, asr r7
   152dc:	cmp	r2, #0
   152e0:	push	{r4, r5, r6, r7, r8, lr}
   152e4:	mov	r8, r0
   152e8:	ldr	r7, [pc, #176]	; 153a0 <__assert_fail@plt+0x3b0c>
   152ec:	mov	r0, #40	; 0x28
   152f0:	movne	r7, r2
   152f4:	cmp	r3, #0
   152f8:	mov	r5, r1
   152fc:	ldr	r6, [pc, #160]	; 153a4 <__assert_fail@plt+0x3b10>
   15300:	movne	r6, r3
   15304:	bl	18344 <lchmod@@Base+0x2908>
   15308:	subs	r4, r0, #0
   1530c:	beq	15388 <__assert_fail@plt+0x3af4>
   15310:	ldr	r3, [pc, #144]	; 153a8 <__assert_fail@plt+0x3b14>
   15314:	cmp	r5, #0
   15318:	mov	r0, r4
   1531c:	moveq	r5, r3
   15320:	str	r5, [r0, #20]!
   15324:	bl	14d58 <__assert_fail@plt+0x34c4>
   15328:	cmp	r0, #0
   1532c:	beq	15390 <__assert_fail@plt+0x3afc>
   15330:	mov	r1, r5
   15334:	mov	r0, r8
   15338:	bl	14c90 <__assert_fail@plt+0x33fc>
   1533c:	cmp	r0, #0
   15340:	str	r0, [r4, #8]
   15344:	beq	15390 <__assert_fail@plt+0x3afc>
   15348:	mov	r1, #8
   1534c:	bl	182fc <lchmod@@Base+0x28c0>
   15350:	cmp	r0, #0
   15354:	str	r0, [r4]
   15358:	beq	15390 <__assert_fail@plt+0x3afc>
   1535c:	ldr	r3, [r4, #8]
   15360:	ldr	r2, [sp, #24]
   15364:	str	r7, [r4, #24]
   15368:	add	r0, r0, r3, lsl #3
   1536c:	mov	r3, #0
   15370:	str	r0, [r4, #4]
   15374:	str	r3, [r4, #12]
   15378:	str	r3, [r4, #16]
   1537c:	str	r6, [r4, #28]
   15380:	str	r2, [r4, #32]
   15384:	str	r3, [r4, #36]	; 0x24
   15388:	mov	r0, r4
   1538c:	pop	{r4, r5, r6, r7, r8, pc}
   15390:	mov	r0, r4
   15394:	bl	12da0 <__assert_fail@plt+0x150c>
   15398:	mov	r4, #0
   1539c:	b	15388 <__assert_fail@plt+0x3af4>
   153a0:	andeq	r4, r1, r8, asr fp
   153a4:	andeq	r4, r1, ip, ror #22
   153a8:	andeq	r9, r1, r8, asr r7
   153ac:	push	{r4, r5, r6, r7, r8, lr}
   153b0:	mov	r5, r0
   153b4:	ldr	r4, [r0]
   153b8:	mov	r7, #0
   153bc:	add	r4, r4, #8
   153c0:	ldr	r2, [r5, #4]
   153c4:	sub	r3, r4, #8
   153c8:	cmp	r2, r3
   153cc:	bhi	153e0 <__assert_fail@plt+0x3b4c>
   153d0:	mov	r3, #0
   153d4:	str	r3, [r5, #12]
   153d8:	str	r3, [r5, #16]
   153dc:	pop	{r4, r5, r6, r7, r8, pc}
   153e0:	ldr	r3, [r4, #-8]
   153e4:	cmp	r3, #0
   153e8:	ldrne	r6, [r4, #-4]
   153ec:	bne	15420 <__assert_fail@plt+0x3b8c>
   153f0:	add	r4, r4, #8
   153f4:	b	153c0 <__assert_fail@plt+0x3b2c>
   153f8:	cmp	r3, #0
   153fc:	beq	15408 <__assert_fail@plt+0x3b74>
   15400:	ldr	r0, [r6]
   15404:	blx	r3
   15408:	ldr	r3, [r6, #4]
   1540c:	ldr	r2, [r5, #36]	; 0x24
   15410:	str	r7, [r6]
   15414:	str	r2, [r6, #4]
   15418:	str	r6, [r5, #36]	; 0x24
   1541c:	mov	r6, r3
   15420:	cmp	r6, #0
   15424:	ldr	r3, [r5, #32]
   15428:	bne	153f8 <__assert_fail@plt+0x3b64>
   1542c:	cmp	r3, #0
   15430:	beq	1543c <__assert_fail@plt+0x3ba8>
   15434:	ldr	r0, [r4, #-8]
   15438:	blx	r3
   1543c:	str	r7, [r4, #-8]
   15440:	str	r7, [r4, #-4]
   15444:	b	153f0 <__assert_fail@plt+0x3b5c>
   15448:	ldr	r3, [r0, #32]
   1544c:	push	{r4, r5, r6, lr}
   15450:	cmp	r3, #0
   15454:	mov	r4, r0
   15458:	bne	1548c <__assert_fail@plt+0x3bf8>
   1545c:	ldr	r5, [r4]
   15460:	ldr	r3, [r4, #4]
   15464:	cmp	r5, r3
   15468:	bcc	154dc <__assert_fail@plt+0x3c48>
   1546c:	ldr	r0, [r4, #36]	; 0x24
   15470:	cmp	r0, #0
   15474:	bne	154fc <__assert_fail@plt+0x3c68>
   15478:	ldr	r0, [r4]
   1547c:	bl	12da0 <__assert_fail@plt+0x150c>
   15480:	mov	r0, r4
   15484:	pop	{r4, r5, r6, lr}
   15488:	b	12da0 <__assert_fail@plt+0x150c>
   1548c:	ldr	r3, [r0, #16]
   15490:	cmp	r3, #0
   15494:	ldrne	r5, [r0]
   15498:	beq	1545c <__assert_fail@plt+0x3bc8>
   1549c:	ldr	r3, [r4, #4]
   154a0:	cmp	r5, r3
   154a4:	bcs	1545c <__assert_fail@plt+0x3bc8>
   154a8:	ldr	r3, [r5]
   154ac:	cmp	r3, #0
   154b0:	movne	r6, r5
   154b4:	bne	154c0 <__assert_fail@plt+0x3c2c>
   154b8:	add	r5, r5, #8
   154bc:	b	1549c <__assert_fail@plt+0x3c08>
   154c0:	ldr	r0, [r6]
   154c4:	ldr	r3, [r4, #32]
   154c8:	blx	r3
   154cc:	ldr	r6, [r6, #4]
   154d0:	cmp	r6, #0
   154d4:	bne	154c0 <__assert_fail@plt+0x3c2c>
   154d8:	b	154b8 <__assert_fail@plt+0x3c24>
   154dc:	ldr	r0, [r5, #4]
   154e0:	cmp	r0, #0
   154e4:	addeq	r5, r5, #8
   154e8:	beq	15460 <__assert_fail@plt+0x3bcc>
   154ec:	ldr	r6, [r0, #4]
   154f0:	bl	12da0 <__assert_fail@plt+0x150c>
   154f4:	mov	r0, r6
   154f8:	b	154e0 <__assert_fail@plt+0x3c4c>
   154fc:	ldr	r5, [r0, #4]
   15500:	bl	12da0 <__assert_fail@plt+0x150c>
   15504:	mov	r0, r5
   15508:	b	15470 <__assert_fail@plt+0x3bdc>
   1550c:	push	{r4, r5, lr}
   15510:	mov	r4, r0
   15514:	sub	sp, sp, #44	; 0x2c
   15518:	mov	r0, r1
   1551c:	ldr	r1, [r4, #20]
   15520:	bl	14c90 <__assert_fail@plt+0x33fc>
   15524:	subs	r5, r0, #0
   15528:	bne	1553c <__assert_fail@plt+0x3ca8>
   1552c:	mov	r5, #0
   15530:	mov	r0, r5
   15534:	add	sp, sp, #44	; 0x2c
   15538:	pop	{r4, r5, pc}
   1553c:	ldr	r3, [r4, #8]
   15540:	cmp	r5, r3
   15544:	beq	1562c <__assert_fail@plt+0x3d98>
   15548:	mov	r1, #8
   1554c:	bl	182fc <lchmod@@Base+0x28c0>
   15550:	cmp	r0, #0
   15554:	str	r0, [sp]
   15558:	beq	1552c <__assert_fail@plt+0x3c98>
   1555c:	ldr	r3, [r4, #20]
   15560:	add	r0, r0, r5, lsl #3
   15564:	str	r3, [sp, #20]
   15568:	ldr	r3, [r4, #24]
   1556c:	mov	r2, #0
   15570:	str	r3, [sp, #24]
   15574:	ldr	r3, [r4, #28]
   15578:	str	r0, [sp, #4]
   1557c:	str	r3, [sp, #28]
   15580:	ldr	r3, [r4, #32]
   15584:	mov	r1, r4
   15588:	str	r3, [sp, #32]
   1558c:	ldr	r3, [r4, #36]	; 0x24
   15590:	mov	r0, sp
   15594:	str	r5, [sp, #8]
   15598:	str	r2, [sp, #12]
   1559c:	str	r2, [sp, #16]
   155a0:	str	r3, [sp, #36]	; 0x24
   155a4:	bl	14e08 <__assert_fail@plt+0x3574>
   155a8:	subs	r5, r0, #0
   155ac:	beq	155e4 <__assert_fail@plt+0x3d50>
   155b0:	ldr	r0, [r4]
   155b4:	bl	12da0 <__assert_fail@plt+0x150c>
   155b8:	ldr	r3, [sp]
   155bc:	str	r3, [r4]
   155c0:	ldr	r3, [sp, #4]
   155c4:	str	r3, [r4, #4]
   155c8:	ldr	r3, [sp, #8]
   155cc:	str	r3, [r4, #8]
   155d0:	ldr	r3, [sp, #12]
   155d4:	str	r3, [r4, #12]
   155d8:	ldr	r3, [sp, #36]	; 0x24
   155dc:	str	r3, [r4, #36]	; 0x24
   155e0:	b	15530 <__assert_fail@plt+0x3c9c>
   155e4:	ldr	r3, [sp, #36]	; 0x24
   155e8:	mov	r2, #1
   155ec:	str	r3, [r4, #36]	; 0x24
   155f0:	mov	r1, sp
   155f4:	mov	r0, r4
   155f8:	bl	14e08 <__assert_fail@plt+0x3574>
   155fc:	cmp	r0, #0
   15600:	bne	15608 <__assert_fail@plt+0x3d74>
   15604:	bl	11840 <abort@plt>
   15608:	mov	r2, r5
   1560c:	mov	r1, sp
   15610:	mov	r0, r4
   15614:	bl	14e08 <__assert_fail@plt+0x3574>
   15618:	cmp	r0, #0
   1561c:	beq	15604 <__assert_fail@plt+0x3d70>
   15620:	ldr	r0, [sp]
   15624:	bl	12da0 <__assert_fail@plt+0x150c>
   15628:	b	15530 <__assert_fail@plt+0x3c9c>
   1562c:	mov	r5, #1
   15630:	b	15530 <__assert_fail@plt+0x3c9c>
   15634:	push	{r0, r1, r4, r5, r6, lr}
   15638:	subs	r6, r1, #0
   1563c:	bne	15644 <__assert_fail@plt+0x3db0>
   15640:	bl	11840 <abort@plt>
   15644:	mov	r5, r2
   15648:	mov	r3, #0
   1564c:	add	r2, sp, #4
   15650:	mov	r4, r0
   15654:	bl	14bb0 <__assert_fail@plt+0x331c>
   15658:	cmp	r0, #0
   1565c:	beq	15674 <__assert_fail@plt+0x3de0>
   15660:	cmp	r5, #0
   15664:	strne	r0, [r5]
   15668:	movne	r0, #0
   1566c:	moveq	r0, r5
   15670:	b	156f4 <__assert_fail@plt+0x3e60>
   15674:	vldr	s15, [r4, #12]
   15678:	ldr	r3, [r4, #20]
   1567c:	vcvt.f32.u32	s14, s15
   15680:	vldr	s15, [r4, #8]
   15684:	vldr	s13, [r3, #8]
   15688:	vcvt.f32.u32	s15, s15
   1568c:	vmul.f32	s15, s15, s13
   15690:	vcmpe.f32	s14, s15
   15694:	vmrs	APSR_nzcv, fpscr
   15698:	ble	15730 <__assert_fail@plt+0x3e9c>
   1569c:	add	r0, r4, #20
   156a0:	bl	14d58 <__assert_fail@plt+0x34c4>
   156a4:	vldr	s15, [r4, #8]
   156a8:	ldr	r3, [r4, #20]
   156ac:	vldr	s14, [r4, #12]
   156b0:	vcvt.f32.u32	s15, s15
   156b4:	vldr	s13, [r3, #8]
   156b8:	vcvt.f32.u32	s14, s14
   156bc:	vmul.f32	s12, s13, s15
   156c0:	vcmpe.f32	s14, s12
   156c4:	vmrs	APSR_nzcv, fpscr
   156c8:	ble	15730 <__assert_fail@plt+0x3e9c>
   156cc:	vldr	s14, [r3, #12]
   156d0:	ldrb	r2, [r3, #16]
   156d4:	vmul.f32	s15, s15, s14
   156d8:	cmp	r2, #0
   156dc:	vldr	s14, [pc, #200]	; 157ac <__assert_fail@plt+0x3f18>
   156e0:	vmuleq.f32	s15, s15, s13
   156e4:	vcmpe.f32	s15, s14
   156e8:	vmrs	APSR_nzcv, fpscr
   156ec:	blt	156fc <__assert_fail@plt+0x3e68>
   156f0:	mvn	r0, #0
   156f4:	add	sp, sp, #8
   156f8:	pop	{r4, r5, r6, pc}
   156fc:	vcvt.u32.f32	s15, s15
   15700:	mov	r0, r4
   15704:	vmov	r1, s15
   15708:	bl	1550c <__assert_fail@plt+0x3c78>
   1570c:	cmp	r0, #0
   15710:	beq	156f0 <__assert_fail@plt+0x3e5c>
   15714:	mov	r3, #0
   15718:	add	r2, sp, #4
   1571c:	mov	r1, r6
   15720:	mov	r0, r4
   15724:	bl	14bb0 <__assert_fail@plt+0x331c>
   15728:	cmp	r0, #0
   1572c:	bne	15640 <__assert_fail@plt+0x3dac>
   15730:	ldr	r3, [sp, #4]
   15734:	ldr	r2, [r3]
   15738:	cmp	r2, #0
   1573c:	beq	1578c <__assert_fail@plt+0x3ef8>
   15740:	ldr	r0, [r4, #36]	; 0x24
   15744:	cmp	r0, #0
   15748:	ldrne	r3, [r0, #4]
   1574c:	strne	r3, [r4, #36]	; 0x24
   15750:	bne	15764 <__assert_fail@plt+0x3ed0>
   15754:	mov	r0, #8
   15758:	bl	18344 <lchmod@@Base+0x2908>
   1575c:	cmp	r0, #0
   15760:	beq	156f0 <__assert_fail@plt+0x3e5c>
   15764:	ldr	r3, [sp, #4]
   15768:	str	r6, [r0]
   1576c:	ldr	r2, [r3, #4]
   15770:	str	r2, [r0, #4]
   15774:	str	r0, [r3, #4]
   15778:	ldr	r3, [r4, #16]
   1577c:	add	r3, r3, #1
   15780:	str	r3, [r4, #16]
   15784:	mov	r0, #1
   15788:	b	156f4 <__assert_fail@plt+0x3e60>
   1578c:	str	r6, [r3]
   15790:	ldr	r3, [r4, #16]
   15794:	add	r3, r3, #1
   15798:	str	r3, [r4, #16]
   1579c:	ldr	r3, [r4, #12]
   157a0:	add	r3, r3, #1
   157a4:	str	r3, [r4, #12]
   157a8:	b	15784 <__assert_fail@plt+0x3ef0>
   157ac:	svcmi	0x00800000
   157b0:	push	{r0, r1, r4, lr}
   157b4:	add	r2, sp, #4
   157b8:	mov	r4, r1
   157bc:	bl	15634 <__assert_fail@plt+0x3da0>
   157c0:	cmn	r0, #1
   157c4:	moveq	r0, #0
   157c8:	beq	157d8 <__assert_fail@plt+0x3f44>
   157cc:	cmp	r0, #0
   157d0:	movne	r0, r4
   157d4:	ldreq	r0, [sp, #4]
   157d8:	add	sp, sp, #8
   157dc:	pop	{r4, pc}
   157e0:	push	{r0, r1, r4, r5, r6, lr}
   157e4:	mov	r3, #1
   157e8:	add	r2, sp, #4
   157ec:	mov	r4, r0
   157f0:	bl	14bb0 <__assert_fail@plt+0x331c>
   157f4:	subs	r5, r0, #0
   157f8:	beq	158b0 <__assert_fail@plt+0x401c>
   157fc:	ldr	r3, [r4, #16]
   15800:	sub	r3, r3, #1
   15804:	str	r3, [r4, #16]
   15808:	ldr	r3, [sp, #4]
   1580c:	ldr	r3, [r3]
   15810:	cmp	r3, #0
   15814:	bne	158b0 <__assert_fail@plt+0x401c>
   15818:	vldr	s14, [r4, #8]
   1581c:	ldr	r3, [r4, #12]
   15820:	sub	r3, r3, #1
   15824:	vcvt.f32.u32	s14, s14
   15828:	vmov	s15, r3
   1582c:	str	r3, [r4, #12]
   15830:	ldr	r3, [r4, #20]
   15834:	vcvt.f32.u32	s15, s15
   15838:	vldr	s13, [r3]
   1583c:	vmul.f32	s14, s14, s13
   15840:	vcmpe.f32	s15, s14
   15844:	vmrs	APSR_nzcv, fpscr
   15848:	bpl	158b0 <__assert_fail@plt+0x401c>
   1584c:	add	r0, r4, #20
   15850:	bl	14d58 <__assert_fail@plt+0x34c4>
   15854:	vldr	s15, [r4, #8]
   15858:	vldr	s14, [r4, #12]
   1585c:	ldr	r3, [r4, #20]
   15860:	vcvt.f32.u32	s15, s15
   15864:	vcvt.f32.u32	s13, s14
   15868:	vldr	s14, [r3]
   1586c:	vmul.f32	s14, s15, s14
   15870:	vcmpe.f32	s13, s14
   15874:	vmrs	APSR_nzcv, fpscr
   15878:	bpl	158b0 <__assert_fail@plt+0x401c>
   1587c:	vldr	s14, [r3, #4]
   15880:	ldrb	r2, [r3, #16]
   15884:	mov	r0, r4
   15888:	vmul.f32	s15, s15, s14
   1588c:	cmp	r2, #0
   15890:	vldreq	s14, [r3, #8]
   15894:	vmuleq.f32	s15, s15, s14
   15898:	vcvt.u32.f32	s15, s15
   1589c:	vmov	r1, s15
   158a0:	bl	1550c <__assert_fail@plt+0x3c78>
   158a4:	cmp	r0, #0
   158a8:	ldreq	r0, [r4, #36]	; 0x24
   158ac:	beq	158c8 <__assert_fail@plt+0x4034>
   158b0:	mov	r0, r5
   158b4:	add	sp, sp, #8
   158b8:	pop	{r4, r5, r6, pc}
   158bc:	ldr	r6, [r0, #4]
   158c0:	bl	12da0 <__assert_fail@plt+0x150c>
   158c4:	mov	r0, r6
   158c8:	cmp	r0, #0
   158cc:	bne	158bc <__assert_fail@plt+0x4028>
   158d0:	str	r0, [r4, #36]	; 0x24
   158d4:	b	158b0 <__assert_fail@plt+0x401c>
   158d8:	b	157e0 <__assert_fail@plt+0x3f4c>
   158dc:	push	{r4, r5, r6, lr}
   158e0:	mov	r4, r0
   158e4:	ldr	r0, [r0]
   158e8:	mov	r6, r1
   158ec:	bl	18930 <lchmod@@Base+0x2ef4>
   158f0:	ldrd	r4, [r4, #8]
   158f4:	mov	r2, r6
   158f8:	mov	r3, #0
   158fc:	eor	r4, r4, r0
   15900:	mov	r0, r4
   15904:	mov	r1, r5
   15908:	bl	18f64 <lchmod@@Base+0x3528>
   1590c:	mov	r0, r2
   15910:	pop	{r4, r5, r6, pc}
   15914:	ldrd	r2, [r1, #8]
   15918:	push	{r4, r5, r6, lr}
   1591c:	ldrd	r4, [r0, #8]
   15920:	cmp	r5, r3
   15924:	cmpeq	r4, r2
   15928:	bne	15958 <__assert_fail@plt+0x40c4>
   1592c:	ldrd	r4, [r0, #16]
   15930:	ldrd	r2, [r1, #16]
   15934:	cmp	r5, r3
   15938:	cmpeq	r4, r2
   1593c:	bne	15958 <__assert_fail@plt+0x40c4>
   15940:	ldr	r1, [r1]
   15944:	ldr	r0, [r0]
   15948:	bl	114a4 <strcmp@plt>
   1594c:	clz	r0, r0
   15950:	lsr	r0, r0, #5
   15954:	pop	{r4, r5, r6, pc}
   15958:	mov	r0, #0
   1595c:	pop	{r4, r5, r6, pc}
   15960:	push	{r4, lr}
   15964:	mov	r4, r0
   15968:	ldr	r0, [r0]
   1596c:	bl	12da0 <__assert_fail@plt+0x150c>
   15970:	mov	r0, r4
   15974:	pop	{r4, lr}
   15978:	b	12da0 <__assert_fail@plt+0x150c>
   1597c:	mov	r3, #1
   15980:	strb	r3, [r0, #28]
   15984:	mov	r3, #0
   15988:	str	r3, [r0, #20]
   1598c:	str	r3, [r0, #24]
   15990:	str	r1, [r0]
   15994:	str	r1, [r0, #4]
   15998:	str	r1, [r0, #8]
   1599c:	str	r1, [r0, #12]
   159a0:	str	r1, [r0, #16]
   159a4:	bx	lr
   159a8:	ldrb	r0, [r0, #28]
   159ac:	bx	lr
   159b0:	ldrb	ip, [r0, #28]
   159b4:	ldr	r3, [r0, #20]
   159b8:	mov	r2, r0
   159bc:	eor	ip, ip, #1
   159c0:	add	r3, ip, r3
   159c4:	and	r3, r3, #3
   159c8:	ldr	r0, [r0, r3, lsl #2]
   159cc:	str	r1, [r2, r3, lsl #2]
   159d0:	ldr	r1, [r2, #24]
   159d4:	str	r3, [r2, #20]
   159d8:	cmp	r3, r1
   159dc:	addeq	r3, ip, r3
   159e0:	andeq	r3, r3, #3
   159e4:	streq	r3, [r2, #24]
   159e8:	mov	r3, #0
   159ec:	strb	r3, [r2, #28]
   159f0:	bx	lr
   159f4:	ldrb	r2, [r0, #28]
   159f8:	cmp	r2, #0
   159fc:	beq	15a08 <__assert_fail@plt+0x4174>
   15a00:	push	{r4, lr}
   15a04:	bl	11840 <abort@plt>
   15a08:	mov	r3, r0
   15a0c:	ldr	r2, [r0, #20]
   15a10:	ldr	r1, [r3, #16]
   15a14:	ldr	r0, [r0, r2, lsl #2]
   15a18:	str	r1, [r3, r2, lsl #2]
   15a1c:	ldr	r1, [r3, #24]
   15a20:	cmp	r2, r1
   15a24:	addne	r2, r2, #3
   15a28:	moveq	r2, #1
   15a2c:	andne	r2, r2, #3
   15a30:	strbeq	r2, [r3, #28]
   15a34:	strne	r2, [r3, #20]
   15a38:	bx	lr

00015a3c <lchmod@@Base>:
   15a3c:	push	{r4, r5, r6, r7, r8, r9, lr}
   15a40:	mov	r6, r1
   15a44:	sub	sp, sp, #148	; 0x94
   15a48:	mov	r1, #2654208	; 0x288000
   15a4c:	mov	r9, r0
   15a50:	bl	11618 <open64@plt>
   15a54:	subs	r5, r0, #0
   15a58:	movlt	r4, r5
   15a5c:	blt	15a94 <lchmod@@Base+0x58>
   15a60:	mov	r3, #4096	; 0x1000
   15a64:	add	r2, sp, #40	; 0x28
   15a68:	ldr	r1, [pc, #188]	; 15b2c <lchmod@@Base+0xf0>
   15a6c:	bl	19184 <lchmod@@Base+0x3748>
   15a70:	cmp	r0, #0
   15a74:	beq	15aa0 <lchmod@@Base+0x64>
   15a78:	bl	116e4 <__errno_location@plt>
   15a7c:	ldr	r6, [r0]
   15a80:	mov	r4, r0
   15a84:	mov	r0, r5
   15a88:	bl	1184c <close@plt>
   15a8c:	str	r6, [r4]
   15a90:	mvn	r4, #0
   15a94:	mov	r0, r4
   15a98:	add	sp, sp, #148	; 0x94
   15a9c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15aa0:	ldr	r3, [sp, #56]	; 0x38
   15aa4:	and	r3, r3, #61440	; 0xf000
   15aa8:	cmp	r3, #40960	; 0xa000
   15aac:	bne	15ac8 <lchmod@@Base+0x8c>
   15ab0:	mov	r0, r5
   15ab4:	bl	1184c <close@plt>
   15ab8:	bl	116e4 <__errno_location@plt>
   15abc:	mov	r3, #95	; 0x5f
   15ac0:	str	r3, [r0]
   15ac4:	b	15a90 <lchmod@@Base+0x54>
   15ac8:	ldr	r3, [pc, #96]	; 15b30 <lchmod@@Base+0xf4>
   15acc:	mov	r2, #26
   15ad0:	mov	r1, #1
   15ad4:	str	r5, [sp]
   15ad8:	add	r0, sp, #12
   15adc:	bl	116f0 <__sprintf_chk@plt>
   15ae0:	mov	r1, r6
   15ae4:	add	r0, sp, #12
   15ae8:	bl	11810 <chmod@plt>
   15aec:	mov	r4, r0
   15af0:	bl	116e4 <__errno_location@plt>
   15af4:	ldr	r8, [r0]
   15af8:	mov	r7, r0
   15afc:	mov	r0, r5
   15b00:	bl	1184c <close@plt>
   15b04:	cmp	r4, #0
   15b08:	beq	15a94 <lchmod@@Base+0x58>
   15b0c:	cmp	r8, #2
   15b10:	strne	r8, [r7]
   15b14:	bne	15a94 <lchmod@@Base+0x58>
   15b18:	mov	r1, r6
   15b1c:	mov	r0, r9
   15b20:	bl	11810 <chmod@plt>
   15b24:	mov	r4, r0
   15b28:	b	15a94 <lchmod@@Base+0x58>
   15b2c:	andeq	r9, r1, sl, ror #10
   15b30:	ldrdeq	r9, [r1], -r5
   15b34:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b38:	mov	r4, r0
   15b3c:	ldrb	r3, [r0]
   15b40:	sub	r3, r3, #48	; 0x30
   15b44:	cmp	r3, #7
   15b48:	subhi	r3, r0, #1
   15b4c:	movhi	r0, #1
   15b50:	bhi	15bf0 <lchmod@@Base+0x1b4>
   15b54:	ldr	r0, [pc, #740]	; 15e40 <lchmod@@Base+0x404>
   15b58:	mov	r2, r4
   15b5c:	mov	r5, #0
   15b60:	ldrb	r3, [r2], #1
   15b64:	lsl	r5, r5, #3
   15b68:	sub	r5, r5, #48	; 0x30
   15b6c:	add	r5, r3, r5
   15b70:	cmp	r5, r0
   15b74:	bhi	15e38 <lchmod@@Base+0x3fc>
   15b78:	ldrb	r3, [r2]
   15b7c:	sub	r1, r3, #48	; 0x30
   15b80:	cmp	r1, #7
   15b84:	bls	15b60 <lchmod@@Base+0x124>
   15b88:	cmp	r3, #0
   15b8c:	bne	15e38 <lchmod@@Base+0x3fc>
   15b90:	sub	r2, r2, r4
   15b94:	cmp	r2, #4
   15b98:	andle	r4, r5, #3072	; 0xc00
   15b9c:	mov	r0, #32
   15ba0:	mvnle	r4, r4, lsr #10
   15ba4:	ldrgt	r4, [pc, #660]	; 15e40 <lchmod@@Base+0x404>
   15ba8:	mvnle	r4, r4, lsl #10
   15bac:	bl	17da8 <lchmod@@Base+0x236c>
   15bb0:	mov	r3, #61	; 0x3d
   15bb4:	strb	r3, [r0]
   15bb8:	mov	r3, #1
   15bbc:	strb	r3, [r0, #1]
   15bc0:	ldr	r3, [pc, #632]	; 15e40 <lchmod@@Base+0x404>
   15bc4:	str	r4, [r0, #12]
   15bc8:	stmib	r0, {r3, r5}
   15bcc:	mov	r3, #0
   15bd0:	strb	r3, [r0, #17]
   15bd4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bd8:	and	ip, r5, #239	; 0xef
   15bdc:	cmp	r5, #43	; 0x2b
   15be0:	cmpne	ip, #45	; 0x2d
   15be4:	moveq	ip, #1
   15be8:	movne	ip, #0
   15bec:	add	r0, r0, ip
   15bf0:	ldrb	r5, [r3, #1]!
   15bf4:	cmp	r5, #0
   15bf8:	bne	15bd8 <lchmod@@Base+0x19c>
   15bfc:	mov	r1, #16
   15c00:	ldr	sl, [pc, #568]	; 15e40 <lchmod@@Base+0x404>
   15c04:	bl	17e80 <lchmod@@Base+0x2444>
   15c08:	mov	ip, r5
   15c0c:	mov	r1, #0
   15c10:	mov	r2, r4
   15c14:	add	r4, r4, #1
   15c18:	ldrb	r3, [r2]
   15c1c:	cmp	r3, #97	; 0x61
   15c20:	beq	15cec <lchmod@@Base+0x2b0>
   15c24:	bhi	15cb4 <lchmod@@Base+0x278>
   15c28:	cmp	r3, #45	; 0x2d
   15c2c:	beq	15c40 <lchmod@@Base+0x204>
   15c30:	cmp	r3, #61	; 0x3d
   15c34:	beq	15c40 <lchmod@@Base+0x204>
   15c38:	cmp	r3, #43	; 0x2b
   15c3c:	bne	15e34 <lchmod@@Base+0x3f8>
   15c40:	add	lr, r0, ip, lsl #4
   15c44:	mov	r8, #3
   15c48:	mov	r7, #0
   15c4c:	mov	r9, #1
   15c50:	ldrb	r3, [r2, #1]
   15c54:	add	r5, r2, #1
   15c58:	ldrb	fp, [r2]
   15c5c:	cmp	r3, #103	; 0x67
   15c60:	beq	15db0 <lchmod@@Base+0x374>
   15c64:	bhi	15cf4 <lchmod@@Base+0x2b8>
   15c68:	sub	r3, r3, #48	; 0x30
   15c6c:	cmp	r3, #7
   15c70:	movls	r3, #0
   15c74:	movls	r2, r5
   15c78:	bls	15d18 <lchmod@@Base+0x2dc>
   15c7c:	mov	r4, r9
   15c80:	mov	r3, #0
   15c84:	mov	r2, r5
   15c88:	add	r5, r5, #1
   15c8c:	ldrb	r6, [r2]
   15c90:	cmp	r6, #115	; 0x73
   15c94:	beq	15e10 <lchmod@@Base+0x3d4>
   15c98:	bhi	15dd8 <lchmod@@Base+0x39c>
   15c9c:	cmp	r6, #88	; 0x58
   15ca0:	beq	15e18 <lchmod@@Base+0x3dc>
   15ca4:	cmp	r6, #114	; 0x72
   15ca8:	beq	15df8 <lchmod@@Base+0x3bc>
   15cac:	mov	r5, r7
   15cb0:	b	15d60 <lchmod@@Base+0x324>
   15cb4:	cmp	r3, #111	; 0x6f
   15cb8:	beq	15ce0 <lchmod@@Base+0x2a4>
   15cbc:	cmp	r3, #117	; 0x75
   15cc0:	beq	15cd8 <lchmod@@Base+0x29c>
   15cc4:	cmp	r3, #103	; 0x67
   15cc8:	bne	15e34 <lchmod@@Base+0x3f8>
   15ccc:	orr	r1, r1, #1072	; 0x430
   15cd0:	orr	r1, r1, #8
   15cd4:	b	15c10 <lchmod@@Base+0x1d4>
   15cd8:	orr	r1, r1, #2496	; 0x9c0
   15cdc:	b	15c10 <lchmod@@Base+0x1d4>
   15ce0:	orr	r1, r1, #516	; 0x204
   15ce4:	orr	r1, r1, #3
   15ce8:	b	15c10 <lchmod@@Base+0x1d4>
   15cec:	ldr	r1, [pc, #332]	; 15e40 <lchmod@@Base+0x404>
   15cf0:	b	15c10 <lchmod@@Base+0x1d4>
   15cf4:	cmp	r3, #111	; 0x6f
   15cf8:	beq	15dc4 <lchmod@@Base+0x388>
   15cfc:	cmp	r3, #117	; 0x75
   15d00:	bne	15c7c <lchmod@@Base+0x240>
   15d04:	add	r2, r2, #2
   15d08:	mov	r4, r8
   15d0c:	mov	r5, r7
   15d10:	mov	r3, #448	; 0x1c0
   15d14:	b	15d60 <lchmod@@Base+0x324>
   15d18:	ldrb	r4, [r2], #1
   15d1c:	lsl	r3, r3, #3
   15d20:	sub	r3, r3, #48	; 0x30
   15d24:	add	r3, r4, r3
   15d28:	cmp	r3, sl
   15d2c:	bhi	15e34 <lchmod@@Base+0x3f8>
   15d30:	ldrb	r4, [r2]
   15d34:	sub	r5, r4, #48	; 0x30
   15d38:	cmp	r5, #7
   15d3c:	bls	15d18 <lchmod@@Base+0x2dc>
   15d40:	cmp	r1, #0
   15d44:	bne	15e34 <lchmod@@Base+0x3f8>
   15d48:	cmp	r4, #0
   15d4c:	cmpne	r4, #44	; 0x2c
   15d50:	bne	15e34 <lchmod@@Base+0x3f8>
   15d54:	ldr	r1, [pc, #228]	; 15e40 <lchmod@@Base+0x404>
   15d58:	mov	r4, r9
   15d5c:	mov	r5, r1
   15d60:	cmp	r5, #0
   15d64:	stmib	lr, {r1, r3}
   15d68:	add	ip, ip, #1
   15d6c:	strb	fp, [lr]
   15d70:	strb	r4, [lr, #1]
   15d74:	movne	r3, r5
   15d78:	bne	15d84 <lchmod@@Base+0x348>
   15d7c:	cmp	r1, #0
   15d80:	andne	r3, r3, r1
   15d84:	str	r3, [lr, #12]
   15d88:	ldrb	r3, [r2]
   15d8c:	add	lr, lr, #16
   15d90:	and	r4, r3, #239	; 0xef
   15d94:	cmp	r3, #43	; 0x2b
   15d98:	cmpne	r4, #45	; 0x2d
   15d9c:	beq	15c50 <lchmod@@Base+0x214>
   15da0:	cmp	r3, #44	; 0x2c
   15da4:	bne	15e20 <lchmod@@Base+0x3e4>
   15da8:	add	r4, r2, #1
   15dac:	b	15c0c <lchmod@@Base+0x1d0>
   15db0:	add	r2, r2, #2
   15db4:	mov	r4, r8
   15db8:	mov	r5, r7
   15dbc:	mov	r3, #56	; 0x38
   15dc0:	b	15d60 <lchmod@@Base+0x324>
   15dc4:	add	r2, r2, #2
   15dc8:	mov	r4, r8
   15dcc:	mov	r5, r7
   15dd0:	mov	r3, #7
   15dd4:	b	15d60 <lchmod@@Base+0x324>
   15dd8:	cmp	r6, #119	; 0x77
   15ddc:	beq	15e00 <lchmod@@Base+0x3c4>
   15de0:	cmp	r6, #120	; 0x78
   15de4:	beq	15e08 <lchmod@@Base+0x3cc>
   15de8:	cmp	r6, #116	; 0x74
   15dec:	bne	15cac <lchmod@@Base+0x270>
   15df0:	orr	r3, r3, #512	; 0x200
   15df4:	b	15c84 <lchmod@@Base+0x248>
   15df8:	orr	r3, r3, #292	; 0x124
   15dfc:	b	15c84 <lchmod@@Base+0x248>
   15e00:	orr	r3, r3, #146	; 0x92
   15e04:	b	15c84 <lchmod@@Base+0x248>
   15e08:	orr	r3, r3, #73	; 0x49
   15e0c:	b	15c84 <lchmod@@Base+0x248>
   15e10:	orr	r3, r3, #3072	; 0xc00
   15e14:	b	15c84 <lchmod@@Base+0x248>
   15e18:	mov	r4, #2
   15e1c:	b	15c84 <lchmod@@Base+0x248>
   15e20:	cmp	r3, #0
   15e24:	bne	15e34 <lchmod@@Base+0x3f8>
   15e28:	add	ip, r0, ip, lsl #4
   15e2c:	strb	r3, [ip, #1]
   15e30:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e34:	bl	12da0 <__assert_fail@plt+0x150c>
   15e38:	mov	r0, #0
   15e3c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e40:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   15e44:	push	{r4, r5, lr}
   15e48:	sub	sp, sp, #108	; 0x6c
   15e4c:	mov	r1, sp
   15e50:	bl	19154 <lchmod@@Base+0x3718>
   15e54:	subs	r4, r0, #0
   15e58:	movne	r0, #0
   15e5c:	bne	15e8c <lchmod@@Base+0x450>
   15e60:	mov	r0, #32
   15e64:	ldr	r5, [sp, #16]
   15e68:	bl	17da8 <lchmod@@Base+0x236c>
   15e6c:	mov	r3, #61	; 0x3d
   15e70:	strb	r3, [r0]
   15e74:	mov	r3, #1
   15e78:	strb	r3, [r0, #1]
   15e7c:	ldr	r3, [pc, #16]	; 15e94 <lchmod@@Base+0x458>
   15e80:	strb	r4, [r0, #17]
   15e84:	str	r3, [r0, #12]
   15e88:	stmib	r0, {r3, r5}
   15e8c:	add	sp, sp, #108	; 0x6c
   15e90:	pop	{r4, r5, pc}
   15e94:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   15e98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15e9c:	cmp	r1, #0
   15ea0:	ldr	r7, [pc, #248]	; 15fa0 <lchmod@@Base+0x564>
   15ea4:	ldr	r5, [sp, #32]
   15ea8:	and	r0, r0, r7
   15eac:	movne	r6, #3072	; 0xc00
   15eb0:	moveq	r6, #0
   15eb4:	add	r3, r3, #16
   15eb8:	mov	r4, #0
   15ebc:	mvn	r2, r2
   15ec0:	ldrb	r9, [r3, #-15]
   15ec4:	cmp	r9, #0
   15ec8:	bne	15ed8 <lchmod@@Base+0x49c>
   15ecc:	cmp	r5, #0
   15ed0:	strne	r4, [r5]
   15ed4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ed8:	ldr	r8, [r3, #-4]
   15edc:	cmp	r9, #2
   15ee0:	ldr	ip, [r3, #-12]
   15ee4:	bic	r8, r6, r8
   15ee8:	ldr	lr, [r3, #-8]
   15eec:	beq	15f6c <lchmod@@Base+0x530>
   15ef0:	cmp	r9, #3
   15ef4:	bne	15f2c <lchmod@@Base+0x4f0>
   15ef8:	and	lr, lr, r0
   15efc:	tst	lr, #292	; 0x124
   15f00:	movne	r9, #292	; 0x124
   15f04:	moveq	r9, #0
   15f08:	tst	lr, #146	; 0x92
   15f0c:	movne	sl, #146	; 0x92
   15f10:	moveq	sl, #0
   15f14:	tst	lr, #73	; 0x49
   15f18:	orr	sl, r9, sl
   15f1c:	movne	r9, #73	; 0x49
   15f20:	moveq	r9, #0
   15f24:	orr	r9, r9, sl
   15f28:	orr	lr, r9, lr
   15f2c:	cmp	ip, #0
   15f30:	movne	r9, ip
   15f34:	moveq	r9, r2
   15f38:	bic	lr, lr, r8
   15f3c:	and	lr, lr, r9
   15f40:	ldrb	r9, [r3, #-16]
   15f44:	cmp	r9, #45	; 0x2d
   15f48:	orreq	r4, r4, lr
   15f4c:	biceq	r0, r0, lr
   15f50:	beq	15f98 <lchmod@@Base+0x55c>
   15f54:	cmp	r9, #61	; 0x3d
   15f58:	beq	15f7c <lchmod@@Base+0x540>
   15f5c:	cmp	r9, #43	; 0x2b
   15f60:	orreq	r4, r4, lr
   15f64:	orreq	r0, r0, lr
   15f68:	b	15f98 <lchmod@@Base+0x55c>
   15f6c:	and	r9, r0, #73	; 0x49
   15f70:	orrs	r9, r9, r1
   15f74:	orrne	lr, lr, #73	; 0x49
   15f78:	b	15f2c <lchmod@@Base+0x4f0>
   15f7c:	cmp	ip, #0
   15f80:	mvnne	ip, ip
   15f84:	orr	ip, ip, r8
   15f88:	bic	r8, r7, ip
   15f8c:	and	ip, ip, r0
   15f90:	orr	r4, r4, r8
   15f94:	orr	r0, lr, ip
   15f98:	add	r3, r3, #16
   15f9c:	b	15ec0 <lchmod@@Base+0x484>
   15fa0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   15fa4:	push	{r2, r3}
   15fa8:	push	{r0, r1, r2, lr}
   15fac:	ldr	r2, [sp, #16]
   15fb0:	ands	r3, r2, #64	; 0x40
   15fb4:	addne	r3, sp, #20
   15fb8:	strne	r3, [sp, #4]
   15fbc:	ldrne	r3, [sp, #20]
   15fc0:	bl	116cc <openat64@plt>
   15fc4:	bl	17860 <lchmod@@Base+0x1e24>
   15fc8:	add	sp, sp, #12
   15fcc:	pop	{lr}		; (ldr lr, [sp], #4)
   15fd0:	add	sp, sp, #8
   15fd4:	bx	lr
   15fd8:	orr	r2, r2, #540672	; 0x84000
   15fdc:	push	{r4, r5, r6, r7, r8, lr}
   15fe0:	orr	r2, r2, #2304	; 0x900
   15fe4:	mov	r5, r3
   15fe8:	bl	15fa4 <lchmod@@Base+0x568>
   15fec:	subs	r6, r0, #0
   15ff0:	movlt	r4, #0
   15ff4:	blt	16020 <lchmod@@Base+0x5e4>
   15ff8:	bl	11798 <fdopendir@plt>
   15ffc:	subs	r4, r0, #0
   16000:	strne	r6, [r5]
   16004:	bne	16020 <lchmod@@Base+0x5e4>
   16008:	bl	116e4 <__errno_location@plt>
   1600c:	ldr	r7, [r0]
   16010:	mov	r5, r0
   16014:	mov	r0, r6
   16018:	bl	1184c <close@plt>
   1601c:	str	r7, [r5]
   16020:	mov	r0, r4
   16024:	pop	{r4, r5, r6, r7, r8, pc}
   16028:	push	{r4, r5, r6, lr}
   1602c:	subs	r5, r0, #0
   16030:	bne	16048 <lchmod@@Base+0x60c>
   16034:	ldr	r3, [pc, #124]	; 160b8 <lchmod@@Base+0x67c>
   16038:	ldr	r0, [pc, #124]	; 160bc <lchmod@@Base+0x680>
   1603c:	ldr	r1, [r3]
   16040:	bl	11828 <fputs@plt>
   16044:	bl	11840 <abort@plt>
   16048:	mov	r1, #47	; 0x2f
   1604c:	bl	11774 <strrchr@plt>
   16050:	cmp	r0, #0
   16054:	addne	r4, r0, #1
   16058:	moveq	r4, r5
   1605c:	sub	r3, r4, r5
   16060:	cmp	r3, #6
   16064:	ble	160a4 <lchmod@@Base+0x668>
   16068:	mov	r2, #7
   1606c:	ldr	r1, [pc, #76]	; 160c0 <lchmod@@Base+0x684>
   16070:	sub	r0, r4, #7
   16074:	bl	11834 <strncmp@plt>
   16078:	cmp	r0, #0
   1607c:	bne	160a4 <lchmod@@Base+0x668>
   16080:	mov	r2, #3
   16084:	ldr	r1, [pc, #56]	; 160c4 <lchmod@@Base+0x688>
   16088:	mov	r0, r4
   1608c:	bl	11834 <strncmp@plt>
   16090:	cmp	r0, #0
   16094:	movne	r5, r4
   16098:	ldreq	r3, [pc, #40]	; 160c8 <lchmod@@Base+0x68c>
   1609c:	addeq	r5, r4, #3
   160a0:	streq	r5, [r3]
   160a4:	ldr	r3, [pc, #32]	; 160cc <lchmod@@Base+0x690>
   160a8:	str	r5, [r3]
   160ac:	ldr	r3, [pc, #28]	; 160d0 <lchmod@@Base+0x694>
   160b0:	str	r5, [r3]
   160b4:	pop	{r4, r5, r6, pc}
   160b8:	andeq	sl, r2, r0, ror #3
   160bc:	andeq	r9, r1, r6, ror #15
   160c0:	andeq	r9, r1, lr, lsl r8
   160c4:	andeq	r9, r1, r6, lsr #16
   160c8:	ldrdeq	sl, [r2], -r0
   160cc:	strdeq	sl, [r2], -r8
   160d0:	ldrdeq	sl, [r2], -r4
   160d4:	push	{r4, r5, r6, lr}
   160d8:	mov	r2, #48	; 0x30
   160dc:	mov	r5, r1
   160e0:	mov	r1, #0
   160e4:	mov	r4, r0
   160e8:	bl	11708 <memset@plt>
   160ec:	cmp	r5, #10
   160f0:	bne	160f8 <lchmod@@Base+0x6bc>
   160f4:	bl	11840 <abort@plt>
   160f8:	str	r5, [r4]
   160fc:	mov	r0, r4
   16100:	pop	{r4, r5, r6, pc}
   16104:	push	{r4, r5, r6, lr}
   16108:	mov	r4, r0
   1610c:	mov	r5, r1
   16110:	bl	1895c <lchmod@@Base+0x2f20>
   16114:	ldrb	r3, [r0]
   16118:	bic	r3, r3, #32
   1611c:	cmp	r3, #85	; 0x55
   16120:	bne	16190 <lchmod@@Base+0x754>
   16124:	ldrb	r3, [r0, #1]
   16128:	bic	r3, r3, #32
   1612c:	cmp	r3, #84	; 0x54
   16130:	bne	16168 <lchmod@@Base+0x72c>
   16134:	ldrb	r3, [r0, #2]
   16138:	bic	r3, r3, #32
   1613c:	cmp	r3, #70	; 0x46
   16140:	bne	16168 <lchmod@@Base+0x72c>
   16144:	ldrb	r3, [r0, #3]
   16148:	cmp	r3, #45	; 0x2d
   1614c:	bne	16168 <lchmod@@Base+0x72c>
   16150:	ldrb	r3, [r0, #4]
   16154:	cmp	r3, #56	; 0x38
   16158:	bne	16168 <lchmod@@Base+0x72c>
   1615c:	ldrb	r3, [r0, #5]
   16160:	cmp	r3, #0
   16164:	beq	1617c <lchmod@@Base+0x740>
   16168:	ldr	r1, [pc, #144]	; 16200 <lchmod@@Base+0x7c4>
   1616c:	ldr	r0, [pc, #144]	; 16204 <lchmod@@Base+0x7c8>
   16170:	cmp	r5, #9
   16174:	movne	r0, r1
   16178:	pop	{r4, r5, r6, pc}
   1617c:	ldrb	r3, [r4]
   16180:	ldr	r1, [pc, #128]	; 16208 <lchmod@@Base+0x7cc>
   16184:	ldr	r0, [pc, #128]	; 1620c <lchmod@@Base+0x7d0>
   16188:	cmp	r3, #96	; 0x60
   1618c:	b	16174 <lchmod@@Base+0x738>
   16190:	cmp	r3, #71	; 0x47
   16194:	bne	16168 <lchmod@@Base+0x72c>
   16198:	ldrb	r3, [r0, #1]
   1619c:	bic	r3, r3, #32
   161a0:	cmp	r3, #66	; 0x42
   161a4:	bne	16168 <lchmod@@Base+0x72c>
   161a8:	ldrb	r3, [r0, #2]
   161ac:	cmp	r3, #49	; 0x31
   161b0:	bne	16168 <lchmod@@Base+0x72c>
   161b4:	ldrb	r3, [r0, #3]
   161b8:	cmp	r3, #56	; 0x38
   161bc:	bne	16168 <lchmod@@Base+0x72c>
   161c0:	ldrb	r3, [r0, #4]
   161c4:	cmp	r3, #48	; 0x30
   161c8:	bne	16168 <lchmod@@Base+0x72c>
   161cc:	ldrb	r3, [r0, #5]
   161d0:	cmp	r3, #51	; 0x33
   161d4:	bne	16168 <lchmod@@Base+0x72c>
   161d8:	ldrb	r3, [r0, #6]
   161dc:	cmp	r3, #48	; 0x30
   161e0:	bne	16168 <lchmod@@Base+0x72c>
   161e4:	ldrb	r3, [r0, #7]
   161e8:	cmp	r3, #0
   161ec:	bne	16168 <lchmod@@Base+0x72c>
   161f0:	ldrb	r3, [r4]
   161f4:	ldr	r1, [pc, #20]	; 16210 <lchmod@@Base+0x7d4>
   161f8:	ldr	r0, [pc, #20]	; 16214 <lchmod@@Base+0x7d8>
   161fc:	b	16188 <lchmod@@Base+0x74c>
   16200:	muleq	r1, r1, r8
   16204:	andeq	r9, r1, pc, lsl #17
   16208:	andeq	r9, r1, r4, lsl #17
   1620c:	andeq	r9, r1, r0, lsl #17
   16210:	andeq	r9, r1, ip, lsl #17
   16214:	andeq	r9, r1, r8, lsl #17
   16218:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1621c:	sub	sp, sp, #108	; 0x6c
   16220:	mov	r8, r0
   16224:	str	r3, [sp, #36]	; 0x24
   16228:	mov	r5, r1
   1622c:	str	r2, [sp, #44]	; 0x2c
   16230:	ldr	sl, [sp, #144]	; 0x90
   16234:	bl	115c4 <__ctype_get_mb_cur_max@plt>
   16238:	ldr	r3, [sp, #148]	; 0x94
   1623c:	mov	r7, #0
   16240:	str	r7, [sp, #48]	; 0x30
   16244:	lsr	r6, r3, #1
   16248:	and	r6, r6, #1
   1624c:	mov	r3, #1
   16250:	str	r3, [sp, #72]	; 0x48
   16254:	str	r7, [sp, #24]
   16258:	str	r7, [sp, #32]
   1625c:	str	r7, [sp, #40]	; 0x28
   16260:	str	r7, [sp, #60]	; 0x3c
   16264:	str	r0, [sp, #76]	; 0x4c
   16268:	cmp	sl, #10
   1626c:	ldrls	pc, [pc, sl, lsl #2]
   16270:	b	164ac <lchmod@@Base+0xa70>
   16274:	andeq	r6, r1, r0, lsr #5
   16278:	andeq	r6, r1, r4, lsr pc
   1627c:	andeq	r6, r1, r8, ror r4
   16280:	andeq	r6, r1, r4, asr #9
   16284:	andeq	r6, r1, r4, asr r4
   16288:	andeq	r6, r1, ip, lsr #5
   1628c:	andeq	r6, r1, r4, lsl pc
   16290:			; <UNDEFINED> instruction: 0x000164b0
   16294:	andeq	r6, r1, r4, lsr #7
   16298:	andeq	r6, r1, r4, lsr #7
   1629c:	andeq	r6, r1, r4, lsr #7
   162a0:	mov	r6, #0
   162a4:	mov	r4, #0
   162a8:	b	162d8 <lchmod@@Base+0x89c>
   162ac:	cmp	r6, #0
   162b0:	bne	164d4 <lchmod@@Base+0xa98>
   162b4:	cmp	r5, #0
   162b8:	movne	r3, #34	; 0x22
   162bc:	strbne	r3, [r8]
   162c0:	mov	r3, #1
   162c4:	str	r3, [sp, #24]
   162c8:	str	r3, [sp, #32]
   162cc:	mov	r4, #1
   162d0:	ldr	r3, [pc, #3172]	; 16f3c <lchmod@@Base+0x1500>
   162d4:	str	r3, [sp, #40]	; 0x28
   162d8:	mov	r9, r5
   162dc:	mov	r3, #0
   162e0:	str	r7, [sp, #68]	; 0x44
   162e4:	str	r3, [sp, #28]
   162e8:	ldr	r3, [sp, #36]	; 0x24
   162ec:	cmn	r3, #1
   162f0:	bne	16e80 <lchmod@@Base+0x1444>
   162f4:	ldr	r3, [sp, #44]	; 0x2c
   162f8:	ldr	r2, [sp, #28]
   162fc:	ldrb	r3, [r3, r2]
   16300:	adds	r3, r3, #0
   16304:	movne	r3, #1
   16308:	str	r3, [sp, #52]	; 0x34
   1630c:	ldr	r3, [sp, #52]	; 0x34
   16310:	cmp	r3, #0
   16314:	bne	164fc <lchmod@@Base+0xac0>
   16318:	sub	r2, sl, #2
   1631c:	clz	r2, r2
   16320:	lsr	r2, r2, #5
   16324:	and	r3, r6, r2
   16328:	cmp	r4, #0
   1632c:	movne	r3, #0
   16330:	andeq	r3, r3, #1
   16334:	cmp	r3, #0
   16338:	bne	166c4 <lchmod@@Base+0xc88>
   1633c:	eor	r3, r6, #1
   16340:	ands	r2, r2, r3
   16344:	beq	16eb8 <lchmod@@Base+0x147c>
   16348:	ldr	r3, [sp, #68]	; 0x44
   1634c:	cmp	r3, #0
   16350:	beq	16ef0 <lchmod@@Base+0x14b4>
   16354:	ldr	r3, [sp, #72]	; 0x48
   16358:	cmp	r3, #0
   1635c:	beq	16e94 <lchmod@@Base+0x1458>
   16360:	ldr	r3, [sp, #160]	; 0xa0
   16364:	ldr	r2, [sp, #44]	; 0x2c
   16368:	str	r3, [sp, #16]
   1636c:	ldr	r3, [sp, #156]	; 0x9c
   16370:	ldr	r1, [sp, #60]	; 0x3c
   16374:	str	r3, [sp, #12]
   16378:	ldr	r3, [sp, #152]	; 0x98
   1637c:	str	r3, [sp, #8]
   16380:	ldr	r3, [sp, #148]	; 0x94
   16384:	str	r3, [sp, #4]
   16388:	mov	r3, #5
   1638c:	str	r3, [sp]
   16390:	ldr	r3, [sp, #36]	; 0x24
   16394:	mov	r0, r8
   16398:	bl	16218 <lchmod@@Base+0x7dc>
   1639c:	mov	r4, r0
   163a0:	b	16ee4 <lchmod@@Base+0x14a8>
   163a4:	cmp	sl, #10
   163a8:	beq	16404 <lchmod@@Base+0x9c8>
   163ac:	ldr	r4, [pc, #2956]	; 16f40 <lchmod@@Base+0x1504>
   163b0:	mov	r2, #5
   163b4:	mov	r1, r4
   163b8:	mov	r0, #0
   163bc:	bl	11540 <dcgettext@plt>
   163c0:	cmp	r0, r4
   163c4:	str	r0, [sp, #156]	; 0x9c
   163c8:	bne	163d8 <lchmod@@Base+0x99c>
   163cc:	mov	r1, sl
   163d0:	bl	16104 <lchmod@@Base+0x6c8>
   163d4:	str	r0, [sp, #156]	; 0x9c
   163d8:	ldr	r4, [pc, #2916]	; 16f44 <lchmod@@Base+0x1508>
   163dc:	mov	r2, #5
   163e0:	mov	r1, r4
   163e4:	mov	r0, #0
   163e8:	bl	11540 <dcgettext@plt>
   163ec:	cmp	r0, r4
   163f0:	str	r0, [sp, #160]	; 0xa0
   163f4:	bne	16404 <lchmod@@Base+0x9c8>
   163f8:	mov	r1, sl
   163fc:	bl	16104 <lchmod@@Base+0x6c8>
   16400:	str	r0, [sp, #160]	; 0xa0
   16404:	cmp	r6, #0
   16408:	moveq	r4, r6
   1640c:	beq	16424 <lchmod@@Base+0x9e8>
   16410:	mov	r4, #0
   16414:	b	16434 <lchmod@@Base+0x9f8>
   16418:	cmp	r5, r4
   1641c:	strbhi	r3, [r8, r4]
   16420:	add	r4, r4, #1
   16424:	ldr	r3, [sp, #156]	; 0x9c
   16428:	ldrb	r3, [r3, r4]
   1642c:	cmp	r3, #0
   16430:	bne	16418 <lchmod@@Base+0x9dc>
   16434:	ldr	r0, [sp, #160]	; 0xa0
   16438:	bl	116b4 <strlen@plt>
   1643c:	ldr	r3, [sp, #160]	; 0xa0
   16440:	str	r3, [sp, #40]	; 0x28
   16444:	mov	r3, #1
   16448:	str	r3, [sp, #24]
   1644c:	str	r0, [sp, #32]
   16450:	b	162d8 <lchmod@@Base+0x89c>
   16454:	mov	r3, #1
   16458:	cmp	r6, #0
   1645c:	streq	r3, [sp, #24]
   16460:	beq	16480 <lchmod@@Base+0xa44>
   16464:	str	r3, [sp, #32]
   16468:	ldr	r3, [pc, #2772]	; 16f44 <lchmod@@Base+0x1508>
   1646c:	mov	r4, #0
   16470:	str	r3, [sp, #40]	; 0x28
   16474:	b	164a4 <lchmod@@Base+0xa68>
   16478:	cmp	r6, #0
   1647c:	bne	164ec <lchmod@@Base+0xab0>
   16480:	cmp	r5, #0
   16484:	movne	r3, #39	; 0x27
   16488:	strbne	r3, [r8]
   1648c:	mov	r3, #1
   16490:	str	r3, [sp, #32]
   16494:	mov	r6, #0
   16498:	ldr	r3, [pc, #2724]	; 16f44 <lchmod@@Base+0x1508>
   1649c:	mov	r4, #1
   164a0:	str	r3, [sp, #40]	; 0x28
   164a4:	mov	sl, #2
   164a8:	b	162d8 <lchmod@@Base+0x89c>
   164ac:	bl	11840 <abort@plt>
   164b0:	mov	r6, #0
   164b4:	mov	r3, #1
   164b8:	str	r3, [sp, #24]
   164bc:	mov	r4, r6
   164c0:	b	162d8 <lchmod@@Base+0x89c>
   164c4:	mov	r6, #1
   164c8:	str	r6, [sp, #24]
   164cc:	str	r6, [sp, #32]
   164d0:	b	16468 <lchmod@@Base+0xa2c>
   164d4:	mov	r3, #1
   164d8:	str	r3, [sp, #32]
   164dc:	ldr	r3, [pc, #2648]	; 16f3c <lchmod@@Base+0x1500>
   164e0:	str	r6, [sp, #24]
   164e4:	str	r3, [sp, #40]	; 0x28
   164e8:	b	162a4 <lchmod@@Base+0x868>
   164ec:	mov	r3, #1
   164f0:	str	r3, [sp, #32]
   164f4:	ldr	r3, [pc, #2632]	; 16f44 <lchmod@@Base+0x1508>
   164f8:	b	164e4 <lchmod@@Base+0xaa8>
   164fc:	ldr	r3, [sp, #32]
   16500:	ldr	fp, [sp, #24]
   16504:	cmp	sl, #2
   16508:	moveq	fp, #0
   1650c:	andne	fp, fp, #1
   16510:	adds	r5, r3, #0
   16514:	movne	r5, #1
   16518:	ands	r3, r5, fp
   1651c:	str	r3, [sp, #64]	; 0x40
   16520:	beq	165f0 <lchmod@@Base+0xbb4>
   16524:	ldr	r2, [sp, #32]
   16528:	ldr	r3, [sp, #28]
   1652c:	add	r7, r3, r2
   16530:	mov	r3, r2
   16534:	ldr	r2, [sp, #36]	; 0x24
   16538:	cmp	r3, #1
   1653c:	movls	r3, #0
   16540:	movhi	r3, #1
   16544:	cmn	r2, #1
   16548:	movne	r3, #0
   1654c:	cmp	r3, #0
   16550:	beq	16560 <lchmod@@Base+0xb24>
   16554:	ldr	r0, [sp, #44]	; 0x2c
   16558:	bl	116b4 <strlen@plt>
   1655c:	str	r0, [sp, #36]	; 0x24
   16560:	ldr	r3, [sp, #36]	; 0x24
   16564:	cmp	r3, r7
   16568:	bcc	165e8 <lchmod@@Base+0xbac>
   1656c:	ldr	r3, [sp, #44]	; 0x2c
   16570:	ldr	r0, [sp, #28]
   16574:	ldr	r2, [sp, #32]
   16578:	ldr	r1, [sp, #40]	; 0x28
   1657c:	add	r0, r3, r0
   16580:	bl	11528 <memcmp@plt>
   16584:	cmp	r0, #0
   16588:	bne	165e8 <lchmod@@Base+0xbac>
   1658c:	cmp	r6, #0
   16590:	beq	165f0 <lchmod@@Base+0xbb4>
   16594:	str	r6, [sp, #24]
   16598:	ldr	r3, [sp, #24]
   1659c:	ldr	r2, [sp, #44]	; 0x2c
   165a0:	cmp	sl, #2
   165a4:	movne	r3, #0
   165a8:	andeq	r3, r3, #1
   165ac:	cmp	r3, #0
   165b0:	ldr	r3, [sp, #160]	; 0xa0
   165b4:	movne	sl, #4
   165b8:	str	r3, [sp, #16]
   165bc:	ldr	r3, [sp, #156]	; 0x9c
   165c0:	str	sl, [sp]
   165c4:	str	r3, [sp, #12]
   165c8:	mov	r3, #0
   165cc:	str	r3, [sp, #8]
   165d0:	ldr	r3, [sp, #148]	; 0x94
   165d4:	mov	r1, r9
   165d8:	bic	r3, r3, #2
   165dc:	str	r3, [sp, #4]
   165e0:	ldr	r3, [sp, #36]	; 0x24
   165e4:	b	16394 <lchmod@@Base+0x958>
   165e8:	mov	r3, #0
   165ec:	str	r3, [sp, #64]	; 0x40
   165f0:	ldr	r2, [sp, #28]
   165f4:	ldr	r3, [sp, #44]	; 0x2c
   165f8:	add	r3, r3, r2
   165fc:	str	r3, [sp, #80]	; 0x50
   16600:	ldr	r3, [sp, #44]	; 0x2c
   16604:	ldrb	r7, [r3, r2]
   16608:	cmp	r7, #58	; 0x3a
   1660c:	bhi	16774 <lchmod@@Base+0xd38>
   16610:	cmp	r7, #43	; 0x2b
   16614:	bcs	167c8 <lchmod@@Base+0xd8c>
   16618:	cmp	r7, #32
   1661c:	beq	16820 <lchmod@@Base+0xde4>
   16620:	bhi	166cc <lchmod@@Base+0xc90>
   16624:	cmp	r7, #9
   16628:	beq	16ad4 <lchmod@@Base+0x1098>
   1662c:	bhi	16690 <lchmod@@Base+0xc54>
   16630:	cmp	r7, #7
   16634:	beq	16b80 <lchmod@@Base+0x1144>
   16638:	bhi	1683c <lchmod@@Base+0xe00>
   1663c:	cmp	r7, #0
   16640:	beq	16858 <lchmod@@Base+0xe1c>
   16644:	ldr	r3, [sp, #76]	; 0x4c
   16648:	cmp	r3, #1
   1664c:	bne	16bc4 <lchmod@@Base+0x1188>
   16650:	bl	11684 <__ctype_b_loc@plt>
   16654:	sxth	r3, r7
   16658:	lsl	r3, r3, #1
   1665c:	ldr	r2, [r0]
   16660:	ldrh	r5, [r2, r3]
   16664:	ldr	r3, [sp, #76]	; 0x4c
   16668:	str	r3, [sp, #56]	; 0x38
   1666c:	lsr	r5, r5, #14
   16670:	and	r5, r5, #1
   16674:	ldr	r3, [sp, #24]
   16678:	eor	fp, r5, #1
   1667c:	and	fp, fp, r3
   16680:	ands	fp, fp, #255	; 0xff
   16684:	beq	16a0c <lchmod@@Base+0xfd0>
   16688:	mov	r5, #0
   1668c:	b	16c70 <lchmod@@Base+0x1234>
   16690:	cmp	r7, #11
   16694:	beq	16adc <lchmod@@Base+0x10a0>
   16698:	bcc	16b78 <lchmod@@Base+0x113c>
   1669c:	cmp	r7, #12
   166a0:	beq	16b88 <lchmod@@Base+0x114c>
   166a4:	cmp	r7, #13
   166a8:	moveq	r3, #114	; 0x72
   166ac:	bne	16644 <lchmod@@Base+0xc08>
   166b0:	cmp	sl, #2
   166b4:	movne	r2, #0
   166b8:	andeq	r2, r6, #1
   166bc:	cmp	r2, #0
   166c0:	beq	16840 <lchmod@@Base+0xe04>
   166c4:	mov	sl, #2
   166c8:	b	16598 <lchmod@@Base+0xb5c>
   166cc:	cmp	r7, #37	; 0x25
   166d0:	beq	167c8 <lchmod@@Base+0xd8c>
   166d4:	bhi	166e8 <lchmod@@Base+0xcac>
   166d8:	cmp	r7, #35	; 0x23
   166dc:	beq	16814 <lchmod@@Base+0xdd8>
   166e0:	mov	r5, #0
   166e4:	b	16824 <lchmod@@Base+0xde8>
   166e8:	cmp	r7, #39	; 0x27
   166ec:	bne	166e0 <lchmod@@Base+0xca4>
   166f0:	cmp	sl, #2
   166f4:	ldrne	r5, [sp, #52]	; 0x34
   166f8:	movne	r3, r5
   166fc:	strne	r3, [sp, #68]	; 0x44
   16700:	bne	167cc <lchmod@@Base+0xd90>
   16704:	cmp	r6, #0
   16708:	bne	16598 <lchmod@@Base+0xb5c>
   1670c:	ldr	r2, [sp, #60]	; 0x3c
   16710:	adds	r3, r9, #0
   16714:	movne	r3, #1
   16718:	cmp	r2, #0
   1671c:	movne	r3, #0
   16720:	cmp	r3, #0
   16724:	strne	r9, [sp, #60]	; 0x3c
   16728:	movne	r9, #0
   1672c:	bne	1673c <lchmod@@Base+0xd00>
   16730:	cmp	r9, r4
   16734:	movhi	r3, #39	; 0x27
   16738:	strbhi	r3, [r8, r4]
   1673c:	add	r3, r4, #1
   16740:	cmp	r3, r9
   16744:	movcc	r2, #92	; 0x5c
   16748:	strbcc	r2, [r8, r3]
   1674c:	add	r3, r4, #2
   16750:	cmp	r3, r9
   16754:	ldr	r5, [sp, #52]	; 0x34
   16758:	movcc	r2, #39	; 0x27
   1675c:	strbcc	r2, [r8, r3]
   16760:	add	r4, r4, #3
   16764:	mov	fp, r6
   16768:	str	r5, [sp, #68]	; 0x44
   1676c:	str	r6, [sp, #48]	; 0x30
   16770:	b	16a0c <lchmod@@Base+0xfd0>
   16774:	cmp	r7, #94	; 0x5e
   16778:	beq	166e0 <lchmod@@Base+0xca4>
   1677c:	bhi	167d4 <lchmod@@Base+0xd98>
   16780:	cmp	r7, #90	; 0x5a
   16784:	bhi	167bc <lchmod@@Base+0xd80>
   16788:	cmp	r7, #65	; 0x41
   1678c:	bcs	167c8 <lchmod@@Base+0xd8c>
   16790:	cmp	r7, #62	; 0x3e
   16794:	bls	166e0 <lchmod@@Base+0xca4>
   16798:	cmp	r7, #63	; 0x3f
   1679c:	bne	16644 <lchmod@@Base+0xc08>
   167a0:	cmp	sl, #2
   167a4:	beq	16948 <lchmod@@Base+0xf0c>
   167a8:	cmp	sl, #5
   167ac:	beq	16958 <lchmod@@Base+0xf1c>
   167b0:	mov	fp, #0
   167b4:	mov	r5, fp
   167b8:	b	16a0c <lchmod@@Base+0xfd0>
   167bc:	cmp	r7, #92	; 0x5c
   167c0:	beq	16ae4 <lchmod@@Base+0x10a8>
   167c4:	bls	166e0 <lchmod@@Base+0xca4>
   167c8:	ldr	r5, [sp, #52]	; 0x34
   167cc:	mov	fp, #0
   167d0:	b	16a0c <lchmod@@Base+0xfd0>
   167d4:	cmp	r7, #122	; 0x7a
   167d8:	bhi	167f8 <lchmod@@Base+0xdbc>
   167dc:	cmp	r7, #97	; 0x61
   167e0:	bcs	167c8 <lchmod@@Base+0xd8c>
   167e4:	cmp	r7, #95	; 0x5f
   167e8:	beq	167c8 <lchmod@@Base+0xd8c>
   167ec:	cmp	r7, #96	; 0x60
   167f0:	bne	16644 <lchmod@@Base+0xc08>
   167f4:	b	166e0 <lchmod@@Base+0xca4>
   167f8:	cmp	r7, #124	; 0x7c
   167fc:	beq	166e0 <lchmod@@Base+0xca4>
   16800:	bcc	16b90 <lchmod@@Base+0x1154>
   16804:	cmp	r7, #125	; 0x7d
   16808:	beq	16b90 <lchmod@@Base+0x1154>
   1680c:	cmp	r7, #126	; 0x7e
   16810:	bne	16644 <lchmod@@Base+0xc08>
   16814:	ldr	r3, [sp, #28]
   16818:	cmp	r3, #0
   1681c:	bne	16950 <lchmod@@Base+0xf14>
   16820:	ldr	r5, [sp, #52]	; 0x34
   16824:	cmp	sl, #2
   16828:	movne	fp, #0
   1682c:	andeq	fp, r6, #1
   16830:	cmp	fp, #0
   16834:	beq	16a0c <lchmod@@Base+0xfd0>
   16838:	b	166c4 <lchmod@@Base+0xc88>
   1683c:	mov	r3, #98	; 0x62
   16840:	ldr	r2, [sp, #24]
   16844:	cmp	r2, #0
   16848:	beq	16950 <lchmod@@Base+0xf14>
   1684c:	mov	r7, r3
   16850:	mov	r5, #0
   16854:	b	16a64 <lchmod@@Base+0x1028>
   16858:	ldr	r3, [sp, #24]
   1685c:	cmp	r3, #0
   16860:	beq	1692c <lchmod@@Base+0xef0>
   16864:	cmp	r6, #0
   16868:	bne	16594 <lchmod@@Base+0xb58>
   1686c:	ldr	r3, [sp, #48]	; 0x30
   16870:	eor	r2, r3, #1
   16874:	cmp	sl, #2
   16878:	movne	r2, #0
   1687c:	andeq	r2, r2, #1
   16880:	cmp	r2, #0
   16884:	moveq	r3, r4
   16888:	beq	168c0 <lchmod@@Base+0xe84>
   1688c:	cmp	r9, r4
   16890:	movhi	r3, #39	; 0x27
   16894:	strbhi	r3, [r8, r4]
   16898:	add	r3, r4, #1
   1689c:	cmp	r9, r3
   168a0:	movhi	r1, #36	; 0x24
   168a4:	strbhi	r1, [r8, r3]
   168a8:	add	r3, r4, #2
   168ac:	cmp	r9, r3
   168b0:	movhi	r1, #39	; 0x27
   168b4:	strbhi	r1, [r8, r3]
   168b8:	add	r3, r4, #3
   168bc:	str	r2, [sp, #48]	; 0x30
   168c0:	cmp	r9, r3
   168c4:	movhi	r2, #92	; 0x5c
   168c8:	strbhi	r2, [r8, r3]
   168cc:	cmp	fp, #0
   168d0:	add	r4, r3, #1
   168d4:	beq	16e64 <lchmod@@Base+0x1428>
   168d8:	ldr	r2, [sp, #28]
   168dc:	ldr	r1, [sp, #36]	; 0x24
   168e0:	add	r2, r2, #1
   168e4:	cmp	r1, r2
   168e8:	bls	16924 <lchmod@@Base+0xee8>
   168ec:	ldr	r1, [sp, #44]	; 0x2c
   168f0:	mov	r7, #48	; 0x30
   168f4:	ldrb	r2, [r1, r2]
   168f8:	sub	r2, r2, #48	; 0x30
   168fc:	cmp	r2, #9
   16900:	movhi	r5, r6
   16904:	bhi	16a0c <lchmod@@Base+0xfd0>
   16908:	cmp	r9, r4
   1690c:	add	r2, r3, #2
   16910:	strbhi	r7, [r8, r4]
   16914:	cmp	r9, r2
   16918:	add	r4, r3, #3
   1691c:	movhi	r1, #48	; 0x30
   16920:	strbhi	r1, [r8, r2]
   16924:	mov	r5, r6
   16928:	b	16e6c <lchmod@@Base+0x1430>
   1692c:	ldr	r3, [sp, #148]	; 0x94
   16930:	tst	r3, #1
   16934:	ldreq	r5, [sp, #24]
   16938:	beq	16e78 <lchmod@@Base+0x143c>
   1693c:	ldr	r3, [sp, #28]
   16940:	add	r3, r3, #1
   16944:	b	162e4 <lchmod@@Base+0x8a8>
   16948:	cmp	r6, #0
   1694c:	bne	16598 <lchmod@@Base+0xb5c>
   16950:	mov	r5, #0
   16954:	b	167cc <lchmod@@Base+0xd90>
   16958:	ldr	r3, [sp, #148]	; 0x94
   1695c:	tst	r3, #4
   16960:	beq	16950 <lchmod@@Base+0xf14>
   16964:	ldr	r3, [sp, #28]
   16968:	add	r2, r3, #2
   1696c:	ldr	r3, [sp, #36]	; 0x24
   16970:	cmp	r3, r2
   16974:	bls	16950 <lchmod@@Base+0xf14>
   16978:	ldr	r3, [sp, #44]	; 0x2c
   1697c:	ldr	r1, [sp, #28]
   16980:	add	r3, r3, r1
   16984:	ldrb	r0, [r3, #1]
   16988:	cmp	r0, #63	; 0x3f
   1698c:	bne	16950 <lchmod@@Base+0xf14>
   16990:	ldr	r3, [sp, #44]	; 0x2c
   16994:	ldrb	r1, [r3, r2]
   16998:	sub	r3, r1, #33	; 0x21
   1699c:	uxtb	r3, r3
   169a0:	cmp	r3, #29
   169a4:	bhi	16e74 <lchmod@@Base+0x1438>
   169a8:	mov	ip, #1
   169ac:	ldr	r5, [pc, #1428]	; 16f48 <lchmod@@Base+0x150c>
   169b0:	ands	r5, r5, ip, lsl r3
   169b4:	beq	167cc <lchmod@@Base+0xd90>
   169b8:	cmp	r6, #0
   169bc:	bne	16598 <lchmod@@Base+0xb5c>
   169c0:	add	r3, r4, #1
   169c4:	cmp	r9, r4
   169c8:	strbhi	r0, [r8, r4]
   169cc:	cmp	r9, r3
   169d0:	movhi	r0, #34	; 0x22
   169d4:	strbhi	r0, [r8, r3]
   169d8:	add	r3, r4, #2
   169dc:	cmp	r9, r3
   169e0:	movhi	r0, #34	; 0x22
   169e4:	strbhi	r0, [r8, r3]
   169e8:	add	r3, r4, #3
   169ec:	cmp	r9, r3
   169f0:	add	r4, r4, #4
   169f4:	mov	r5, r6
   169f8:	mov	fp, r6
   169fc:	mov	r7, r1
   16a00:	movhi	r0, #63	; 0x3f
   16a04:	strbhi	r0, [r8, r3]
   16a08:	str	r2, [sp, #28]
   16a0c:	ldr	r3, [sp, #24]
   16a10:	eor	r3, r3, #1
   16a14:	cmp	sl, #2
   16a18:	orreq	r3, r3, #1
   16a1c:	eor	r3, r3, #1
   16a20:	orr	r3, r6, r3
   16a24:	tst	r3, #255	; 0xff
   16a28:	beq	16a58 <lchmod@@Base+0x101c>
   16a2c:	ldr	r3, [sp, #152]	; 0x98
   16a30:	cmp	r3, #0
   16a34:	beq	16a58 <lchmod@@Base+0x101c>
   16a38:	lsr	r2, r7, #5
   16a3c:	ldr	r1, [sp, #152]	; 0x98
   16a40:	uxtb	r2, r2
   16a44:	and	r3, r7, #31
   16a48:	ldr	r2, [r1, r2, lsl #2]
   16a4c:	lsr	r3, r2, r3
   16a50:	tst	r3, #1
   16a54:	bne	16a64 <lchmod@@Base+0x1028>
   16a58:	ldr	r3, [sp, #64]	; 0x40
   16a5c:	cmp	r3, #0
   16a60:	beq	16afc <lchmod@@Base+0x10c0>
   16a64:	cmp	r6, #0
   16a68:	bne	16598 <lchmod@@Base+0xb5c>
   16a6c:	ldr	r3, [sp, #48]	; 0x30
   16a70:	eor	r3, r3, #1
   16a74:	cmp	sl, #2
   16a78:	movne	r3, #0
   16a7c:	andeq	r3, r3, #1
   16a80:	cmp	r3, #0
   16a84:	beq	16abc <lchmod@@Base+0x1080>
   16a88:	cmp	r9, r4
   16a8c:	movhi	r2, #39	; 0x27
   16a90:	strbhi	r2, [r8, r4]
   16a94:	add	r2, r4, #1
   16a98:	cmp	r9, r2
   16a9c:	movhi	r1, #36	; 0x24
   16aa0:	strbhi	r1, [r8, r2]
   16aa4:	add	r2, r4, #2
   16aa8:	cmp	r9, r2
   16aac:	add	r4, r4, #3
   16ab0:	movhi	r1, #39	; 0x27
   16ab4:	strbhi	r1, [r8, r2]
   16ab8:	str	r3, [sp, #48]	; 0x30
   16abc:	cmp	r9, r4
   16ac0:	movhi	r3, #92	; 0x5c
   16ac4:	strbhi	r3, [r8, r4]
   16ac8:	ldr	fp, [sp, #52]	; 0x34
   16acc:	add	r4, r4, #1
   16ad0:	b	16afc <lchmod@@Base+0x10c0>
   16ad4:	mov	r3, #116	; 0x74
   16ad8:	b	166b0 <lchmod@@Base+0xc74>
   16adc:	mov	r3, #118	; 0x76
   16ae0:	b	16840 <lchmod@@Base+0xe04>
   16ae4:	cmp	sl, #2
   16ae8:	bne	16b58 <lchmod@@Base+0x111c>
   16aec:	cmp	r6, #0
   16af0:	bne	16598 <lchmod@@Base+0xb5c>
   16af4:	mov	r5, r6
   16af8:	mov	fp, r6
   16afc:	ldr	r3, [sp, #48]	; 0x30
   16b00:	eor	fp, fp, #1
   16b04:	and	fp, fp, r3
   16b08:	tst	fp, #255	; 0xff
   16b0c:	beq	16b38 <lchmod@@Base+0x10fc>
   16b10:	cmp	r9, r4
   16b14:	movhi	r3, #39	; 0x27
   16b18:	strbhi	r3, [r8, r4]
   16b1c:	add	r3, r4, #1
   16b20:	cmp	r9, r3
   16b24:	movhi	r2, #39	; 0x27
   16b28:	add	r4, r4, #2
   16b2c:	strbhi	r2, [r8, r3]
   16b30:	mov	r3, #0
   16b34:	str	r3, [sp, #48]	; 0x30
   16b38:	cmp	r9, r4
   16b3c:	strbhi	r7, [r8, r4]
   16b40:	ldr	r3, [sp, #72]	; 0x48
   16b44:	cmp	r5, #0
   16b48:	moveq	r3, #0
   16b4c:	add	r4, r4, #1
   16b50:	str	r3, [sp, #72]	; 0x48
   16b54:	b	1693c <lchmod@@Base+0xf00>
   16b58:	ldr	r3, [sp, #24]
   16b5c:	and	r3, r3, r6
   16b60:	tst	r5, r3
   16b64:	moveq	r3, r7
   16b68:	beq	166b0 <lchmod@@Base+0xc74>
   16b6c:	mov	fp, #0
   16b70:	mov	r5, fp
   16b74:	b	16afc <lchmod@@Base+0x10c0>
   16b78:	mov	r3, #110	; 0x6e
   16b7c:	b	166b0 <lchmod@@Base+0xc74>
   16b80:	mov	r3, #97	; 0x61
   16b84:	b	16840 <lchmod@@Base+0xe04>
   16b88:	mov	r3, #102	; 0x66
   16b8c:	b	16840 <lchmod@@Base+0xe04>
   16b90:	ldr	r3, [sp, #36]	; 0x24
   16b94:	cmn	r3, #1
   16b98:	bne	16bb8 <lchmod@@Base+0x117c>
   16b9c:	ldr	r3, [sp, #44]	; 0x2c
   16ba0:	ldrb	r3, [r3, #1]
   16ba4:	adds	r3, r3, #0
   16ba8:	movne	r3, #1
   16bac:	cmp	r3, #0
   16bb0:	bne	16950 <lchmod@@Base+0xf14>
   16bb4:	b	16814 <lchmod@@Base+0xdd8>
   16bb8:	ldr	r3, [sp, #36]	; 0x24
   16bbc:	subs	r3, r3, #1
   16bc0:	b	16ba8 <lchmod@@Base+0x116c>
   16bc4:	mov	r3, #0
   16bc8:	str	r3, [sp, #96]	; 0x60
   16bcc:	str	r3, [sp, #100]	; 0x64
   16bd0:	ldr	r3, [sp, #36]	; 0x24
   16bd4:	cmn	r3, #1
   16bd8:	bne	16be8 <lchmod@@Base+0x11ac>
   16bdc:	ldr	r0, [sp, #44]	; 0x2c
   16be0:	bl	116b4 <strlen@plt>
   16be4:	str	r0, [sp, #36]	; 0x24
   16be8:	ldr	r5, [sp, #52]	; 0x34
   16bec:	mov	r3, #0
   16bf0:	str	r3, [sp, #56]	; 0x38
   16bf4:	ldr	r3, [sp, #28]
   16bf8:	ldr	r2, [sp, #56]	; 0x38
   16bfc:	ldr	r1, [sp, #36]	; 0x24
   16c00:	add	r2, r3, r2
   16c04:	ldr	r3, [sp, #44]	; 0x2c
   16c08:	add	r0, sp, #92	; 0x5c
   16c0c:	add	fp, r3, r2
   16c10:	sub	r2, r1, r2
   16c14:	add	r3, sp, #96	; 0x60
   16c18:	mov	r1, fp
   16c1c:	bl	18990 <lchmod@@Base+0x2f54>
   16c20:	subs	r2, r0, #0
   16c24:	beq	16c64 <lchmod@@Base+0x1228>
   16c28:	cmn	r2, #1
   16c2c:	beq	16e3c <lchmod@@Base+0x1400>
   16c30:	cmn	r2, #2
   16c34:	bne	16dac <lchmod@@Base+0x1370>
   16c38:	ldr	r2, [sp, #56]	; 0x38
   16c3c:	ldr	r3, [sp, #28]
   16c40:	add	r3, r3, r2
   16c44:	ldr	r2, [sp, #36]	; 0x24
   16c48:	cmp	r2, r3
   16c4c:	bls	16e3c <lchmod@@Base+0x1400>
   16c50:	ldr	r3, [sp, #80]	; 0x50
   16c54:	ldr	r2, [sp, #56]	; 0x38
   16c58:	ldrb	r5, [r3, r2]
   16c5c:	cmp	r5, #0
   16c60:	bne	16d9c <lchmod@@Base+0x1360>
   16c64:	ldr	r3, [sp, #56]	; 0x38
   16c68:	cmp	r3, #1
   16c6c:	bls	16674 <lchmod@@Base+0xc38>
   16c70:	ldr	r2, [sp, #56]	; 0x38
   16c74:	ldr	r3, [sp, #28]
   16c78:	mov	fp, #0
   16c7c:	add	r3, r3, r2
   16c80:	ldr	r2, [sp, #24]
   16c84:	str	r3, [sp, #52]	; 0x34
   16c88:	eor	r3, r5, #1
   16c8c:	and	r3, r3, r2
   16c90:	mov	ip, #92	; 0x5c
   16c94:	uxtb	r3, r3
   16c98:	mov	r2, #39	; 0x27
   16c9c:	cmp	r3, #0
   16ca0:	beq	16e44 <lchmod@@Base+0x1408>
   16ca4:	cmp	r6, #0
   16ca8:	bne	16594 <lchmod@@Base+0xb58>
   16cac:	ldr	r1, [sp, #48]	; 0x30
   16cb0:	eor	r1, r1, #1
   16cb4:	cmp	sl, #2
   16cb8:	movne	r1, #0
   16cbc:	andeq	r1, r1, #1
   16cc0:	cmp	r1, #0
   16cc4:	beq	16cf4 <lchmod@@Base+0x12b8>
   16cc8:	add	r0, r4, #1
   16ccc:	cmp	r9, r4
   16cd0:	strbhi	r2, [r8, r4]
   16cd4:	cmp	r9, r0
   16cd8:	movhi	lr, #36	; 0x24
   16cdc:	strbhi	lr, [r8, r0]
   16ce0:	add	r0, r4, #2
   16ce4:	add	r4, r4, #3
   16ce8:	cmp	r9, r0
   16cec:	strbhi	r2, [r8, r0]
   16cf0:	str	r1, [sp, #48]	; 0x30
   16cf4:	add	r0, r4, #1
   16cf8:	cmp	r9, r4
   16cfc:	strbhi	ip, [r8, r4]
   16d00:	cmp	r9, r0
   16d04:	lsrhi	r1, r7, #6
   16d08:	addhi	r1, r1, #48	; 0x30
   16d0c:	strbhi	r1, [r8, r0]
   16d10:	add	r0, r4, #2
   16d14:	cmp	r9, r0
   16d18:	lsrhi	r1, r7, #3
   16d1c:	and	r7, r7, #7
   16d20:	andhi	r1, r1, #7
   16d24:	add	r4, r4, #3
   16d28:	add	r7, r7, #48	; 0x30
   16d2c:	mov	fp, r3
   16d30:	addhi	r1, r1, #48	; 0x30
   16d34:	strbhi	r1, [r8, r0]
   16d38:	ldr	r1, [sp, #28]
   16d3c:	ldr	r0, [sp, #52]	; 0x34
   16d40:	add	r1, r1, #1
   16d44:	cmp	r0, r1
   16d48:	bls	16afc <lchmod@@Base+0x10c0>
   16d4c:	ldr	lr, [sp, #48]	; 0x30
   16d50:	eor	r0, fp, #1
   16d54:	and	r0, r0, lr
   16d58:	tst	r0, #255	; 0xff
   16d5c:	beq	16d80 <lchmod@@Base+0x1344>
   16d60:	add	r0, r4, #1
   16d64:	cmp	r9, r4
   16d68:	strbhi	r2, [r8, r4]
   16d6c:	cmp	r9, r0
   16d70:	add	r4, r4, #2
   16d74:	strbhi	r2, [r8, r0]
   16d78:	mov	r0, #0
   16d7c:	str	r0, [sp, #48]	; 0x30
   16d80:	ldr	r0, [sp, #44]	; 0x2c
   16d84:	cmp	r9, r4
   16d88:	strbhi	r7, [r8, r4]
   16d8c:	str	r1, [sp, #28]
   16d90:	add	r4, r4, #1
   16d94:	ldrb	r7, [r0, r1]
   16d98:	b	16c9c <lchmod@@Base+0x1260>
   16d9c:	ldr	r3, [sp, #56]	; 0x38
   16da0:	add	r3, r3, #1
   16da4:	str	r3, [sp, #56]	; 0x38
   16da8:	b	16c38 <lchmod@@Base+0x11fc>
   16dac:	cmp	sl, #2
   16db0:	movne	r3, #0
   16db4:	andeq	r3, r6, #1
   16db8:	cmp	r3, #0
   16dbc:	movne	r1, #1
   16dc0:	bne	16e1c <lchmod@@Base+0x13e0>
   16dc4:	ldr	r0, [sp, #92]	; 0x5c
   16dc8:	str	r2, [sp, #84]	; 0x54
   16dcc:	bl	11594 <iswprint@plt>
   16dd0:	ldr	r3, [sp, #56]	; 0x38
   16dd4:	ldr	r2, [sp, #84]	; 0x54
   16dd8:	add	r3, r3, r2
   16ddc:	str	r3, [sp, #56]	; 0x38
   16de0:	cmp	r0, #0
   16de4:	add	r0, sp, #96	; 0x60
   16de8:	moveq	r5, #0
   16dec:	bl	11510 <mbsinit@plt>
   16df0:	cmp	r0, #0
   16df4:	beq	16bf4 <lchmod@@Base+0x11b8>
   16df8:	b	16c64 <lchmod@@Base+0x1228>
   16dfc:	ldrb	r3, [fp, r1]
   16e00:	cmp	r3, #94	; 0x5e
   16e04:	beq	166c4 <lchmod@@Base+0xc88>
   16e08:	bhi	16e28 <lchmod@@Base+0x13ec>
   16e0c:	sub	r3, r3, #91	; 0x5b
   16e10:	cmp	r3, #1
   16e14:	bls	166c4 <lchmod@@Base+0xc88>
   16e18:	add	r1, r1, #1
   16e1c:	cmp	r1, r2
   16e20:	bne	16dfc <lchmod@@Base+0x13c0>
   16e24:	b	16dc4 <lchmod@@Base+0x1388>
   16e28:	cmp	r3, #96	; 0x60
   16e2c:	beq	166c4 <lchmod@@Base+0xc88>
   16e30:	cmp	r3, #124	; 0x7c
   16e34:	bne	16e18 <lchmod@@Base+0x13dc>
   16e38:	b	166c4 <lchmod@@Base+0xc88>
   16e3c:	mov	r5, #0
   16e40:	b	16c64 <lchmod@@Base+0x1228>
   16e44:	ldr	r1, [sp, #64]	; 0x40
   16e48:	cmp	r1, #0
   16e4c:	beq	16d38 <lchmod@@Base+0x12fc>
   16e50:	cmp	r9, r4
   16e54:	strbhi	ip, [r8, r4]
   16e58:	str	r3, [sp, #64]	; 0x40
   16e5c:	add	r4, r4, #1
   16e60:	b	16d38 <lchmod@@Base+0x12fc>
   16e64:	mov	r5, fp
   16e68:	ldr	fp, [sp, #24]
   16e6c:	mov	r7, #48	; 0x30
   16e70:	b	16a0c <lchmod@@Base+0xfd0>
   16e74:	mov	r5, #0
   16e78:	mov	fp, r5
   16e7c:	b	16a0c <lchmod@@Base+0xfd0>
   16e80:	ldr	r3, [sp, #36]	; 0x24
   16e84:	ldr	r2, [sp, #28]
   16e88:	subs	r3, r3, r2
   16e8c:	movne	r3, #1
   16e90:	b	16308 <lchmod@@Base+0x8cc>
   16e94:	ldr	r3, [sp, #60]	; 0x3c
   16e98:	clz	r7, r9
   16e9c:	cmp	r3, #0
   16ea0:	lsr	r7, r7, #5
   16ea4:	moveq	r7, #0
   16ea8:	cmp	r7, #0
   16eac:	mov	r5, r3
   16eb0:	bne	16268 <lchmod@@Base+0x82c>
   16eb4:	ldr	r3, [sp, #68]	; 0x44
   16eb8:	ldr	r2, [sp, #40]	; 0x28
   16ebc:	cmp	r2, #0
   16ec0:	moveq	r3, #0
   16ec4:	andne	r3, r3, #1
   16ec8:	cmp	r3, #0
   16ecc:	movne	r3, r2
   16ed0:	subne	r2, r3, #1
   16ed4:	bne	16f04 <lchmod@@Base+0x14c8>
   16ed8:	cmp	r9, r4
   16edc:	movhi	r3, #0
   16ee0:	strbhi	r3, [r8, r4]
   16ee4:	mov	r0, r4
   16ee8:	add	sp, sp, #108	; 0x6c
   16eec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ef0:	mov	r3, r2
   16ef4:	b	16eb8 <lchmod@@Base+0x147c>
   16ef8:	cmp	r9, r4
   16efc:	strbhi	r3, [r8, r4]
   16f00:	add	r4, r4, #1
   16f04:	ldrb	r3, [r2, #1]!
   16f08:	cmp	r3, #0
   16f0c:	bne	16ef8 <lchmod@@Base+0x14bc>
   16f10:	b	16ed8 <lchmod@@Base+0x149c>
   16f14:	ldr	r3, [pc, #32]	; 16f3c <lchmod@@Base+0x1500>
   16f18:	mov	r6, #1
   16f1c:	str	r6, [sp, #24]
   16f20:	str	r6, [sp, #32]
   16f24:	str	r3, [sp, #40]	; 0x28
   16f28:	mov	r4, #0
   16f2c:	mov	sl, #5
   16f30:	b	162d8 <lchmod@@Base+0x89c>
   16f34:	mov	r6, #1
   16f38:	b	164cc <lchmod@@Base+0xa90>
   16f3c:	andeq	r9, r1, pc, lsl #17
   16f40:	muleq	r1, r3, r8
   16f44:	muleq	r1, r1, r8
   16f48:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   16f4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f50:	sub	sp, sp, #52	; 0x34
   16f54:	mov	r6, r0
   16f58:	mov	r5, r3
   16f5c:	mov	r8, r1
   16f60:	mov	r9, r2
   16f64:	bl	116e4 <__errno_location@plt>
   16f68:	ldr	r7, [pc, #380]	; 170ec <lchmod@@Base+0x16b0>
   16f6c:	cmn	r6, #-2147483647	; 0x80000001
   16f70:	ldr	r4, [r7]
   16f74:	ldr	r3, [r0]
   16f78:	str	r0, [sp, #24]
   16f7c:	str	r3, [sp, #32]
   16f80:	movne	r3, #0
   16f84:	moveq	r3, #1
   16f88:	orrs	r3, r3, r6, lsr #31
   16f8c:	beq	16f94 <lchmod@@Base+0x1558>
   16f90:	bl	11840 <abort@plt>
   16f94:	ldr	r2, [r7, #4]
   16f98:	cmp	r6, r2
   16f9c:	blt	1700c <lchmod@@Base+0x15d0>
   16fa0:	add	r1, sp, #48	; 0x30
   16fa4:	add	sl, r7, #8
   16fa8:	str	r2, [r1, #-4]!
   16fac:	cmp	r4, sl
   16fb0:	mov	r3, #8
   16fb4:	sub	r2, r6, r2
   16fb8:	movne	r0, r4
   16fbc:	str	r3, [sp]
   16fc0:	add	r2, r2, #1
   16fc4:	mvn	r3, #-2147483648	; 0x80000000
   16fc8:	moveq	r0, #0
   16fcc:	bl	17f18 <lchmod@@Base+0x24dc>
   16fd0:	cmp	r4, sl
   16fd4:	ldr	r2, [sp, #44]	; 0x2c
   16fd8:	mov	fp, r0
   16fdc:	str	r0, [r7]
   16fe0:	ldmeq	r4, {r0, r1}
   16fe4:	mov	r4, fp
   16fe8:	stmeq	fp, {r0, r1}
   16fec:	ldr	r0, [r7, #4]
   16ff0:	mov	r1, #0
   16ff4:	sub	r2, r2, r0
   16ff8:	add	r0, fp, r0, lsl #3
   16ffc:	lsl	r2, r2, #3
   17000:	bl	11708 <memset@plt>
   17004:	ldr	r3, [sp, #44]	; 0x2c
   17008:	str	r3, [r7, #4]
   1700c:	ldr	r3, [r5, #4]
   17010:	add	sl, r4, r6, lsl #3
   17014:	orr	r3, r3, #1
   17018:	str	r3, [sp, #28]
   1701c:	add	r3, r5, #8
   17020:	str	r3, [sp, #36]	; 0x24
   17024:	ldr	r3, [r5, #44]	; 0x2c
   17028:	ldr	fp, [r4, r6, lsl #3]
   1702c:	ldr	r7, [sl, #4]
   17030:	str	r3, [sp, #16]
   17034:	ldr	r3, [r5, #40]	; 0x28
   17038:	mov	r2, r8
   1703c:	str	r3, [sp, #12]
   17040:	add	r3, r5, #8
   17044:	str	r3, [sp, #8]
   17048:	ldr	r3, [sp, #28]
   1704c:	mov	r1, fp
   17050:	str	r3, [sp, #4]
   17054:	ldr	r3, [r5]
   17058:	mov	r0, r7
   1705c:	str	r3, [sp]
   17060:	mov	r3, r9
   17064:	bl	16218 <lchmod@@Base+0x7dc>
   17068:	cmp	fp, r0
   1706c:	bhi	170d4 <lchmod@@Base+0x1698>
   17070:	ldr	r3, [pc, #120]	; 170f0 <lchmod@@Base+0x16b4>
   17074:	add	fp, r0, #1
   17078:	cmp	r7, r3
   1707c:	str	fp, [r4, r6, lsl #3]
   17080:	beq	1708c <lchmod@@Base+0x1650>
   17084:	mov	r0, r7
   17088:	bl	12da0 <__assert_fail@plt+0x150c>
   1708c:	mov	r0, fp
   17090:	bl	17dd0 <lchmod@@Base+0x2394>
   17094:	ldr	r3, [r5, #44]	; 0x2c
   17098:	mov	r2, r8
   1709c:	mov	r1, fp
   170a0:	str	r0, [sl, #4]
   170a4:	str	r3, [sp, #16]
   170a8:	ldr	r3, [r5, #40]	; 0x28
   170ac:	mov	r7, r0
   170b0:	str	r3, [sp, #12]
   170b4:	add	r3, r5, #8
   170b8:	str	r3, [sp, #8]
   170bc:	ldr	r3, [sp, #28]
   170c0:	str	r3, [sp, #4]
   170c4:	ldr	r3, [r5]
   170c8:	str	r3, [sp]
   170cc:	mov	r3, r9
   170d0:	bl	16218 <lchmod@@Base+0x7dc>
   170d4:	ldr	r3, [sp, #24]
   170d8:	ldr	r2, [sp, #32]
   170dc:	mov	r0, r7
   170e0:	str	r2, [r3]
   170e4:	add	sp, sp, #52	; 0x34
   170e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170ec:	andeq	sl, r2, ip, lsl #3
   170f0:	strdeq	sl, [r2], -ip
   170f4:	push	{r4, r5, r6, lr}
   170f8:	mov	r5, r0
   170fc:	bl	116e4 <__errno_location@plt>
   17100:	cmp	r5, #0
   17104:	mov	r1, #48	; 0x30
   17108:	ldr	r6, [r0]
   1710c:	mov	r4, r0
   17110:	ldr	r0, [pc, #12]	; 17124 <lchmod@@Base+0x16e8>
   17114:	movne	r0, r5
   17118:	bl	181ac <lchmod@@Base+0x2770>
   1711c:	str	r6, [r4]
   17120:	pop	{r4, r5, r6, pc}
   17124:	strdeq	sl, [r2], -ip
   17128:	ldr	r3, [pc, #12]	; 1713c <lchmod@@Base+0x1700>
   1712c:	cmp	r0, #0
   17130:	moveq	r0, r3
   17134:	ldr	r0, [r0]
   17138:	bx	lr
   1713c:	strdeq	sl, [r2], -ip
   17140:	ldr	r3, [pc, #12]	; 17154 <lchmod@@Base+0x1718>
   17144:	cmp	r0, #0
   17148:	moveq	r0, r3
   1714c:	str	r1, [r0]
   17150:	bx	lr
   17154:	strdeq	sl, [r2], -ip
   17158:	ldr	r3, [pc, #52]	; 17194 <lchmod@@Base+0x1758>
   1715c:	cmp	r0, #0
   17160:	moveq	r0, r3
   17164:	add	r3, r0, #8
   17168:	push	{lr}		; (str lr, [sp, #-4]!)
   1716c:	lsr	lr, r1, #5
   17170:	and	r1, r1, #31
   17174:	ldr	ip, [r3, lr, lsl #2]
   17178:	lsr	r0, ip, r1
   1717c:	eor	r2, r2, r0
   17180:	and	r2, r2, #1
   17184:	and	r0, r0, #1
   17188:	eor	r1, ip, r2, lsl r1
   1718c:	str	r1, [r3, lr, lsl #2]
   17190:	pop	{pc}		; (ldr pc, [sp], #4)
   17194:	strdeq	sl, [r2], -ip
   17198:	ldr	r3, [pc, #16]	; 171b0 <lchmod@@Base+0x1774>
   1719c:	cmp	r0, #0
   171a0:	movne	r3, r0
   171a4:	ldr	r0, [r3, #4]
   171a8:	str	r1, [r3, #4]
   171ac:	bx	lr
   171b0:	strdeq	sl, [r2], -ip
   171b4:	ldr	r3, [pc, #44]	; 171e8 <lchmod@@Base+0x17ac>
   171b8:	cmp	r0, #0
   171bc:	moveq	r0, r3
   171c0:	mov	r3, #10
   171c4:	cmp	r2, #0
   171c8:	cmpne	r1, #0
   171cc:	str	r3, [r0]
   171d0:	bne	171dc <lchmod@@Base+0x17a0>
   171d4:	push	{r4, lr}
   171d8:	bl	11840 <abort@plt>
   171dc:	str	r1, [r0, #40]	; 0x28
   171e0:	str	r2, [r0, #44]	; 0x2c
   171e4:	bx	lr
   171e8:	strdeq	sl, [r2], -ip
   171ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   171f0:	sub	sp, sp, #24
   171f4:	mov	sl, r3
   171f8:	ldr	r4, [sp, #56]	; 0x38
   171fc:	ldr	r3, [pc, #100]	; 17268 <lchmod@@Base+0x182c>
   17200:	cmp	r4, #0
   17204:	moveq	r4, r3
   17208:	mov	r7, r0
   1720c:	mov	r8, r1
   17210:	mov	r9, r2
   17214:	bl	116e4 <__errno_location@plt>
   17218:	ldr	r3, [r4, #44]	; 0x2c
   1721c:	mov	r2, r9
   17220:	mov	r1, r8
   17224:	ldr	r6, [r0]
   17228:	str	r3, [sp, #16]
   1722c:	ldr	r3, [r4, #40]	; 0x28
   17230:	mov	r5, r0
   17234:	str	r3, [sp, #12]
   17238:	add	r3, r4, #8
   1723c:	str	r3, [sp, #8]
   17240:	ldr	r3, [r4, #4]
   17244:	mov	r0, r7
   17248:	str	r3, [sp, #4]
   1724c:	ldr	r3, [r4]
   17250:	str	r3, [sp]
   17254:	mov	r3, sl
   17258:	bl	16218 <lchmod@@Base+0x7dc>
   1725c:	str	r6, [r5]
   17260:	add	sp, sp, #24
   17264:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17268:	strdeq	sl, [r2], -ip
   1726c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17270:	cmp	r3, #0
   17274:	sub	sp, sp, #44	; 0x2c
   17278:	ldr	r4, [pc, #188]	; 1733c <lchmod@@Base+0x1900>
   1727c:	mov	r6, r2
   17280:	movne	r4, r3
   17284:	mov	sl, r1
   17288:	mov	r9, r0
   1728c:	bl	116e4 <__errno_location@plt>
   17290:	ldr	r5, [r4, #4]
   17294:	add	fp, r4, #8
   17298:	cmp	r6, #0
   1729c:	orreq	r5, r5, #1
   172a0:	mov	r1, #0
   172a4:	mov	r2, r9
   172a8:	ldr	r3, [r0]
   172ac:	mov	r8, r0
   172b0:	str	r3, [sp, #28]
   172b4:	ldr	r3, [r4, #44]	; 0x2c
   172b8:	mov	r0, r1
   172bc:	str	r3, [sp, #16]
   172c0:	ldr	r3, [r4, #40]	; 0x28
   172c4:	stmib	sp, {r5, fp}
   172c8:	str	r3, [sp, #12]
   172cc:	ldr	r3, [r4]
   172d0:	str	r3, [sp]
   172d4:	mov	r3, sl
   172d8:	bl	16218 <lchmod@@Base+0x7dc>
   172dc:	add	r1, r0, #1
   172e0:	mov	r7, r0
   172e4:	mov	r0, r1
   172e8:	str	r1, [sp, #36]	; 0x24
   172ec:	bl	17dd0 <lchmod@@Base+0x2394>
   172f0:	ldr	r3, [r4, #44]	; 0x2c
   172f4:	mov	r2, r9
   172f8:	str	r3, [sp, #16]
   172fc:	ldr	r3, [r4, #40]	; 0x28
   17300:	stmib	sp, {r5, fp}
   17304:	str	r3, [sp, #12]
   17308:	ldr	r3, [r4]
   1730c:	ldr	r1, [sp, #36]	; 0x24
   17310:	str	r3, [sp]
   17314:	mov	r3, sl
   17318:	str	r0, [sp, #32]
   1731c:	bl	16218 <lchmod@@Base+0x7dc>
   17320:	ldr	r3, [sp, #28]
   17324:	cmp	r6, #0
   17328:	str	r3, [r8]
   1732c:	ldr	r0, [sp, #32]
   17330:	strne	r7, [r6]
   17334:	add	sp, sp, #44	; 0x2c
   17338:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1733c:	strdeq	sl, [r2], -ip
   17340:	mov	r3, r2
   17344:	mov	r2, #0
   17348:	b	1726c <lchmod@@Base+0x1830>
   1734c:	push	{r4, r5, r6, r7, r8, lr}
   17350:	mov	r6, #1
   17354:	ldr	r4, [pc, #104]	; 173c4 <lchmod@@Base+0x1988>
   17358:	ldr	r5, [r4]
   1735c:	add	r7, r5, #12
   17360:	ldr	r3, [r4, #4]
   17364:	add	r7, r7, #8
   17368:	cmp	r6, r3
   1736c:	blt	173b4 <lchmod@@Base+0x1978>
   17370:	ldr	r0, [r5, #4]
   17374:	ldr	r6, [pc, #76]	; 173c8 <lchmod@@Base+0x198c>
   17378:	cmp	r0, r6
   1737c:	beq	17390 <lchmod@@Base+0x1954>
   17380:	bl	12da0 <__assert_fail@plt+0x150c>
   17384:	mov	r3, #256	; 0x100
   17388:	str	r3, [r4, #8]
   1738c:	str	r6, [r4, #12]
   17390:	ldr	r6, [pc, #52]	; 173cc <lchmod@@Base+0x1990>
   17394:	cmp	r5, r6
   17398:	beq	173a8 <lchmod@@Base+0x196c>
   1739c:	mov	r0, r5
   173a0:	bl	12da0 <__assert_fail@plt+0x150c>
   173a4:	str	r6, [r4]
   173a8:	mov	r3, #1
   173ac:	str	r3, [r4, #4]
   173b0:	pop	{r4, r5, r6, r7, r8, pc}
   173b4:	ldr	r0, [r7, #-8]
   173b8:	bl	12da0 <__assert_fail@plt+0x150c>
   173bc:	add	r6, r6, #1
   173c0:	b	17360 <lchmod@@Base+0x1924>
   173c4:	andeq	sl, r2, ip, lsl #3
   173c8:	strdeq	sl, [r2], -ip
   173cc:	muleq	r2, r4, r1
   173d0:	ldr	r3, [pc, #4]	; 173dc <lchmod@@Base+0x19a0>
   173d4:	mvn	r2, #0
   173d8:	b	16f4c <lchmod@@Base+0x1510>
   173dc:	strdeq	sl, [r2], -ip
   173e0:	ldr	r3, [pc]	; 173e8 <lchmod@@Base+0x19ac>
   173e4:	b	16f4c <lchmod@@Base+0x1510>
   173e8:	strdeq	sl, [r2], -ip
   173ec:	mov	r1, r0
   173f0:	mov	r0, #0
   173f4:	b	173d0 <lchmod@@Base+0x1994>
   173f8:	mov	r2, r1
   173fc:	mov	r1, r0
   17400:	mov	r0, #0
   17404:	b	173e0 <lchmod@@Base+0x19a4>
   17408:	push	{r4, r5, lr}
   1740c:	sub	sp, sp, #52	; 0x34
   17410:	mov	r5, r2
   17414:	mov	r4, r0
   17418:	mov	r0, sp
   1741c:	bl	160d4 <lchmod@@Base+0x698>
   17420:	mov	r3, sp
   17424:	mvn	r2, #0
   17428:	mov	r1, r5
   1742c:	mov	r0, r4
   17430:	bl	16f4c <lchmod@@Base+0x1510>
   17434:	add	sp, sp, #52	; 0x34
   17438:	pop	{r4, r5, pc}
   1743c:	push	{r4, r5, r6, lr}
   17440:	sub	sp, sp, #48	; 0x30
   17444:	mov	r5, r2
   17448:	mov	r6, r3
   1744c:	mov	r4, r0
   17450:	mov	r0, sp
   17454:	bl	160d4 <lchmod@@Base+0x698>
   17458:	mov	r3, sp
   1745c:	mov	r2, r6
   17460:	mov	r1, r5
   17464:	mov	r0, r4
   17468:	bl	16f4c <lchmod@@Base+0x1510>
   1746c:	add	sp, sp, #48	; 0x30
   17470:	pop	{r4, r5, r6, pc}
   17474:	mov	r2, r1
   17478:	mov	r1, r0
   1747c:	mov	r0, #0
   17480:	b	17408 <lchmod@@Base+0x19cc>
   17484:	mov	r3, r2
   17488:	mov	r2, r1
   1748c:	mov	r1, r0
   17490:	mov	r0, #0
   17494:	b	1743c <lchmod@@Base+0x1a00>
   17498:	push	{r4, r5, r6, lr}
   1749c:	mov	r4, r0
   174a0:	ldr	lr, [pc, #80]	; 174f8 <lchmod@@Base+0x1abc>
   174a4:	mov	r5, r1
   174a8:	mov	r6, r2
   174ac:	ldm	lr!, {r0, r1, r2, r3}
   174b0:	sub	sp, sp, #48	; 0x30
   174b4:	mov	ip, sp
   174b8:	stmia	ip!, {r0, r1, r2, r3}
   174bc:	ldm	lr!, {r0, r1, r2, r3}
   174c0:	stmia	ip!, {r0, r1, r2, r3}
   174c4:	ldm	lr, {r0, r1, r2, r3}
   174c8:	stm	ip, {r0, r1, r2, r3}
   174cc:	mov	r1, r6
   174d0:	mov	r2, #1
   174d4:	mov	r0, sp
   174d8:	bl	17158 <lchmod@@Base+0x171c>
   174dc:	mov	r3, sp
   174e0:	mov	r2, r5
   174e4:	mov	r1, r4
   174e8:	mov	r0, #0
   174ec:	bl	16f4c <lchmod@@Base+0x1510>
   174f0:	add	sp, sp, #48	; 0x30
   174f4:	pop	{r4, r5, r6, pc}
   174f8:	strdeq	sl, [r2], -ip
   174fc:	mov	r2, r1
   17500:	mvn	r1, #0
   17504:	b	17498 <lchmod@@Base+0x1a5c>
   17508:	mov	r1, #58	; 0x3a
   1750c:	b	174fc <lchmod@@Base+0x1ac0>
   17510:	mov	r2, #58	; 0x3a
   17514:	b	17498 <lchmod@@Base+0x1a5c>
   17518:	push	{r4, r5, lr}
   1751c:	sub	sp, sp, #100	; 0x64
   17520:	mov	r4, r0
   17524:	mov	r0, sp
   17528:	mov	r5, r2
   1752c:	bl	160d4 <lchmod@@Base+0x698>
   17530:	mov	ip, sp
   17534:	add	lr, sp, #48	; 0x30
   17538:	ldm	ip!, {r0, r1, r2, r3}
   1753c:	stmia	lr!, {r0, r1, r2, r3}
   17540:	ldm	ip!, {r0, r1, r2, r3}
   17544:	stmia	lr!, {r0, r1, r2, r3}
   17548:	ldm	ip, {r0, r1, r2, r3}
   1754c:	stm	lr, {r0, r1, r2, r3}
   17550:	mov	r2, #1
   17554:	mov	r1, #58	; 0x3a
   17558:	add	r0, sp, #48	; 0x30
   1755c:	bl	17158 <lchmod@@Base+0x171c>
   17560:	add	r3, sp, #48	; 0x30
   17564:	mvn	r2, #0
   17568:	mov	r1, r5
   1756c:	mov	r0, r4
   17570:	bl	16f4c <lchmod@@Base+0x1510>
   17574:	add	sp, sp, #100	; 0x64
   17578:	pop	{r4, r5, pc}
   1757c:	push	{r4, r5, r6, r7, lr}
   17580:	mov	r4, r0
   17584:	ldr	lr, [pc, #84]	; 175e0 <lchmod@@Base+0x1ba4>
   17588:	mov	r6, r1
   1758c:	mov	r7, r2
   17590:	mov	r5, r3
   17594:	ldm	lr!, {r0, r1, r2, r3}
   17598:	sub	sp, sp, #52	; 0x34
   1759c:	mov	ip, sp
   175a0:	stmia	ip!, {r0, r1, r2, r3}
   175a4:	ldm	lr!, {r0, r1, r2, r3}
   175a8:	stmia	ip!, {r0, r1, r2, r3}
   175ac:	ldm	lr, {r0, r1, r2, r3}
   175b0:	stm	ip, {r0, r1, r2, r3}
   175b4:	mov	r2, r7
   175b8:	mov	r1, r6
   175bc:	mov	r0, sp
   175c0:	bl	171b4 <lchmod@@Base+0x1778>
   175c4:	mov	r3, sp
   175c8:	ldr	r2, [sp, #72]	; 0x48
   175cc:	mov	r1, r5
   175d0:	mov	r0, r4
   175d4:	bl	16f4c <lchmod@@Base+0x1510>
   175d8:	add	sp, sp, #52	; 0x34
   175dc:	pop	{r4, r5, r6, r7, pc}
   175e0:	strdeq	sl, [r2], -ip
   175e4:	mvn	ip, #0
   175e8:	push	{r0, r1, r2, lr}
   175ec:	str	ip, [sp]
   175f0:	bl	1757c <lchmod@@Base+0x1b40>
   175f4:	add	sp, sp, #12
   175f8:	pop	{pc}		; (ldr pc, [sp], #4)
   175fc:	mov	r3, r2
   17600:	mov	r2, r1
   17604:	mov	r1, r0
   17608:	mov	r0, #0
   1760c:	b	175e4 <lchmod@@Base+0x1ba8>
   17610:	push	{r0, r1, r2, lr}
   17614:	str	r3, [sp]
   17618:	mov	r3, r2
   1761c:	mov	r2, r1
   17620:	mov	r1, r0
   17624:	mov	r0, #0
   17628:	bl	1757c <lchmod@@Base+0x1b40>
   1762c:	add	sp, sp, #12
   17630:	pop	{pc}		; (ldr pc, [sp], #4)
   17634:	ldr	r3, [pc]	; 1763c <lchmod@@Base+0x1c00>
   17638:	b	16f4c <lchmod@@Base+0x1510>
   1763c:	muleq	r2, ip, r1
   17640:	mov	r2, r1
   17644:	mov	r1, r0
   17648:	mov	r0, #0
   1764c:	b	17634 <lchmod@@Base+0x1bf8>
   17650:	mvn	r2, #0
   17654:	b	17634 <lchmod@@Base+0x1bf8>
   17658:	mov	r1, r0
   1765c:	mov	r0, #0
   17660:	b	17650 <lchmod@@Base+0x1c14>
   17664:	push	{r4, r5, r6, lr}
   17668:	ldr	r4, [r0], #8
   1766c:	cmp	r4, r0
   17670:	bne	17698 <lchmod@@Base+0x1c5c>
   17674:	mov	r0, r1
   17678:	mov	r5, r1
   1767c:	bl	18344 <lchmod@@Base+0x2908>
   17680:	subs	r3, r0, #0
   17684:	beq	176ac <lchmod@@Base+0x1c70>
   17688:	mov	r2, r5
   1768c:	mov	r1, r4
   17690:	pop	{r4, r5, r6, lr}
   17694:	b	11504 <memcpy@plt>
   17698:	mov	r0, r4
   1769c:	bl	18384 <lchmod@@Base+0x2948>
   176a0:	cmp	r0, #0
   176a4:	movne	r3, r0
   176a8:	moveq	r3, r4
   176ac:	mov	r0, r3
   176b0:	pop	{r4, r5, r6, pc}
   176b4:	push	{r4, r5, r6, lr}
   176b8:	mov	r6, r0
   176bc:	ldr	r5, [r0, #4]
   176c0:	mov	r4, r0
   176c4:	ldr	r0, [r6], #8
   176c8:	lsl	r5, r5, #1
   176cc:	cmp	r0, r6
   176d0:	beq	176d8 <lchmod@@Base+0x1c9c>
   176d4:	bl	12da0 <__assert_fail@plt+0x150c>
   176d8:	ldr	r3, [r4, #4]
   176dc:	cmp	r5, r3
   176e0:	bcc	17708 <lchmod@@Base+0x1ccc>
   176e4:	mov	r0, r5
   176e8:	bl	18344 <lchmod@@Base+0x2908>
   176ec:	cmp	r0, #0
   176f0:	bne	17718 <lchmod@@Base+0x1cdc>
   176f4:	mov	r3, #1024	; 0x400
   176f8:	str	r6, [r4]
   176fc:	str	r3, [r4, #4]
   17700:	mov	r0, #0
   17704:	pop	{r4, r5, r6, pc}
   17708:	bl	116e4 <__errno_location@plt>
   1770c:	mov	r3, #12
   17710:	str	r3, [r0]
   17714:	b	176f4 <lchmod@@Base+0x1cb8>
   17718:	stm	r4, {r0, r5}
   1771c:	mov	r0, #1
   17720:	pop	{r4, r5, r6, pc}
   17724:	push	{r4, r5, r6, r7, r8, lr}
   17728:	mov	r7, r0
   1772c:	ldr	r3, [r0, #4]
   17730:	ldr	r8, [r7], #8
   17734:	mov	r4, r0
   17738:	cmp	r8, r7
   1773c:	lsl	r6, r3, #1
   17740:	bne	1776c <lchmod@@Base+0x1d30>
   17744:	mov	r0, r6
   17748:	bl	18344 <lchmod@@Base+0x2908>
   1774c:	subs	r5, r0, #0
   17750:	beq	1779c <lchmod@@Base+0x1d60>
   17754:	ldr	r2, [r4, #4]
   17758:	mov	r1, r8
   1775c:	bl	11504 <memcpy@plt>
   17760:	stm	r4, {r5, r6}
   17764:	mov	r0, #1
   17768:	pop	{r4, r5, r6, r7, r8, pc}
   1776c:	cmp	r3, r6
   17770:	bhi	177a4 <lchmod@@Base+0x1d68>
   17774:	mov	r1, r6
   17778:	mov	r0, r8
   1777c:	bl	18384 <lchmod@@Base+0x2948>
   17780:	subs	r5, r0, #0
   17784:	bne	17760 <lchmod@@Base+0x1d24>
   17788:	ldr	r0, [r4]
   1778c:	bl	12da0 <__assert_fail@plt+0x150c>
   17790:	mov	r3, #1024	; 0x400
   17794:	str	r7, [r4]
   17798:	str	r3, [r4, #4]
   1779c:	mov	r0, #0
   177a0:	pop	{r4, r5, r6, r7, r8, pc}
   177a4:	bl	116e4 <__errno_location@plt>
   177a8:	mov	r3, #12
   177ac:	str	r3, [r0]
   177b0:	b	17788 <lchmod@@Base+0x1d4c>
   177b4:	push	{r4, r5, r6, r7, r8, lr}
   177b8:	subs	r4, r0, #0
   177bc:	bne	177d8 <lchmod@@Base+0x1d9c>
   177c0:	bl	116e4 <__errno_location@plt>
   177c4:	mov	r3, #95	; 0x5f
   177c8:	mvn	r4, #0
   177cc:	str	r3, [r0]
   177d0:	mov	r0, r4
   177d4:	pop	{r4, r5, r6, r7, r8, pc}
   177d8:	cmp	r4, #10
   177dc:	bne	177d0 <lchmod@@Base+0x1d94>
   177e0:	ldr	r6, [r1]
   177e4:	mov	r5, r1
   177e8:	mov	r0, r6
   177ec:	ldr	r1, [pc, #32]	; 17814 <lchmod@@Base+0x1dd8>
   177f0:	bl	114a4 <strcmp@plt>
   177f4:	subs	r7, r0, #0
   177f8:	bne	177d0 <lchmod@@Base+0x1d94>
   177fc:	mov	r0, r6
   17800:	bl	117d4 <freecon@plt>
   17804:	str	r7, [r5]
   17808:	bl	116e4 <__errno_location@plt>
   1780c:	mov	r3, #61	; 0x3d
   17810:	b	177c8 <lchmod@@Base+0x1d8c>
   17814:	andeq	r9, r1, r1, ror #17
   17818:	push	{r4, lr}
   1781c:	mov	r4, r1
   17820:	bl	116a8 <getfilecon@plt>
   17824:	mov	r1, r4
   17828:	pop	{r4, lr}
   1782c:	b	177b4 <lchmod@@Base+0x1d78>
   17830:	push	{r4, lr}
   17834:	mov	r4, r1
   17838:	bl	11624 <lgetfilecon@plt>
   1783c:	mov	r1, r4
   17840:	pop	{r4, lr}
   17844:	b	177b4 <lchmod@@Base+0x1d78>
   17848:	push	{r4, lr}
   1784c:	mov	r4, r1
   17850:	bl	11564 <fgetfilecon@plt>
   17854:	mov	r1, r4
   17858:	pop	{r4, lr}
   1785c:	b	177b4 <lchmod@@Base+0x1d78>
   17860:	cmp	r0, #2
   17864:	push	{r4, r5, r6, r7, r8, lr}
   17868:	mov	r4, r0
   1786c:	bhi	17894 <lchmod@@Base+0x1e58>
   17870:	bl	18a2c <lchmod@@Base+0x2ff0>
   17874:	mov	r6, r0
   17878:	bl	116e4 <__errno_location@plt>
   1787c:	ldr	r7, [r0]
   17880:	mov	r5, r0
   17884:	mov	r0, r4
   17888:	mov	r4, r6
   1788c:	bl	1184c <close@plt>
   17890:	str	r7, [r5]
   17894:	mov	r0, r4
   17898:	pop	{r4, r5, r6, r7, r8, pc}
   1789c:	push	{r4, r5, r6, lr}
   178a0:	sub	sp, sp, #32
   178a4:	cmp	r1, #0
   178a8:	mov	r5, r0
   178ac:	ldr	r4, [sp, #48]	; 0x30
   178b0:	ldr	r6, [sp, #52]	; 0x34
   178b4:	beq	17968 <lchmod@@Base+0x1f2c>
   178b8:	stm	sp, {r2, r3}
   178bc:	mov	r3, r1
   178c0:	ldr	r2, [pc, #860]	; 17c24 <lchmod@@Base+0x21e8>
   178c4:	mov	r1, #1
   178c8:	bl	1172c <__fprintf_chk@plt>
   178cc:	mov	r2, #5
   178d0:	ldr	r1, [pc, #848]	; 17c28 <lchmod@@Base+0x21ec>
   178d4:	mov	r0, #0
   178d8:	bl	11540 <dcgettext@plt>
   178dc:	ldr	r3, [pc, #840]	; 17c2c <lchmod@@Base+0x21f0>
   178e0:	ldr	r2, [pc, #840]	; 17c30 <lchmod@@Base+0x21f4>
   178e4:	str	r3, [sp]
   178e8:	mov	r1, #1
   178ec:	mov	r3, r0
   178f0:	mov	r0, r5
   178f4:	bl	1172c <__fprintf_chk@plt>
   178f8:	mov	r1, r5
   178fc:	mov	r0, #10
   17900:	bl	11534 <fputc_unlocked@plt>
   17904:	mov	r2, #5
   17908:	ldr	r1, [pc, #804]	; 17c34 <lchmod@@Base+0x21f8>
   1790c:	mov	r0, #0
   17910:	bl	11540 <dcgettext@plt>
   17914:	mov	r1, #1
   17918:	ldr	r3, [pc, #792]	; 17c38 <lchmod@@Base+0x21fc>
   1791c:	mov	r2, r0
   17920:	mov	r0, r5
   17924:	bl	1172c <__fprintf_chk@plt>
   17928:	mov	r1, r5
   1792c:	mov	r0, #10
   17930:	bl	11534 <fputc_unlocked@plt>
   17934:	cmp	r6, #9
   17938:	ldrls	pc, [pc, r6, lsl #2]
   1793c:	b	17c18 <lchmod@@Base+0x21dc>
   17940:	andeq	r7, r1, r8, asr sl
   17944:	andeq	r7, r1, r0, lsl #19
   17948:	andeq	r7, r1, ip, lsr #19
   1794c:	andeq	r7, r1, r0, ror #19
   17950:	andeq	r7, r1, ip, lsl sl
   17954:	andeq	r7, r1, r0, ror #20
   17958:	andeq	r7, r1, r8, lsr #21
   1795c:	strdeq	r7, [r1], -r8
   17960:	andeq	r7, r1, r0, asr fp
   17964:			; <UNDEFINED> instruction: 0x00017bb0
   17968:	str	r3, [sp]
   1796c:	mov	r1, #1
   17970:	mov	r3, r2
   17974:	ldr	r2, [pc, #704]	; 17c3c <lchmod@@Base+0x2200>
   17978:	bl	1172c <__fprintf_chk@plt>
   1797c:	b	178cc <lchmod@@Base+0x1e90>
   17980:	mov	r2, #5
   17984:	ldr	r1, [pc, #692]	; 17c40 <lchmod@@Base+0x2204>
   17988:	mov	r0, #0
   1798c:	bl	11540 <dcgettext@plt>
   17990:	ldr	r3, [r4]
   17994:	mov	r1, #1
   17998:	mov	r2, r0
   1799c:	mov	r0, r5
   179a0:	add	sp, sp, #32
   179a4:	pop	{r4, r5, r6, lr}
   179a8:	b	1172c <__fprintf_chk@plt>
   179ac:	mov	r2, #5
   179b0:	ldr	r1, [pc, #652]	; 17c44 <lchmod@@Base+0x2208>
   179b4:	mov	r0, #0
   179b8:	bl	11540 <dcgettext@plt>
   179bc:	ldr	r3, [r4, #4]
   179c0:	mov	r1, #1
   179c4:	str	r3, [sp, #48]	; 0x30
   179c8:	ldr	r3, [r4]
   179cc:	mov	r2, r0
   179d0:	mov	r0, r5
   179d4:	add	sp, sp, #32
   179d8:	pop	{r4, r5, r6, lr}
   179dc:	b	1172c <__fprintf_chk@plt>
   179e0:	mov	r2, #5
   179e4:	ldr	r1, [pc, #604]	; 17c48 <lchmod@@Base+0x220c>
   179e8:	mov	r0, #0
   179ec:	bl	11540 <dcgettext@plt>
   179f0:	ldr	r3, [r4, #8]
   179f4:	mov	r1, #1
   179f8:	str	r3, [sp, #52]	; 0x34
   179fc:	ldr	r3, [r4, #4]
   17a00:	str	r3, [sp, #48]	; 0x30
   17a04:	ldr	r3, [r4]
   17a08:	mov	r2, r0
   17a0c:	mov	r0, r5
   17a10:	add	sp, sp, #32
   17a14:	pop	{r4, r5, r6, lr}
   17a18:	b	1172c <__fprintf_chk@plt>
   17a1c:	mov	r2, #5
   17a20:	ldr	r1, [pc, #548]	; 17c4c <lchmod@@Base+0x2210>
   17a24:	mov	r0, #0
   17a28:	bl	11540 <dcgettext@plt>
   17a2c:	ldr	r3, [r4, #12]
   17a30:	mov	r1, #1
   17a34:	str	r3, [sp, #8]
   17a38:	ldr	r3, [r4, #8]
   17a3c:	str	r3, [sp, #4]
   17a40:	ldr	r3, [r4, #4]
   17a44:	str	r3, [sp]
   17a48:	ldr	r3, [r4]
   17a4c:	mov	r2, r0
   17a50:	mov	r0, r5
   17a54:	bl	1172c <__fprintf_chk@plt>
   17a58:	add	sp, sp, #32
   17a5c:	pop	{r4, r5, r6, pc}
   17a60:	mov	r2, #5
   17a64:	ldr	r1, [pc, #484]	; 17c50 <lchmod@@Base+0x2214>
   17a68:	mov	r0, #0
   17a6c:	bl	11540 <dcgettext@plt>
   17a70:	ldr	r3, [r4, #16]
   17a74:	mov	r1, #1
   17a78:	str	r3, [sp, #12]
   17a7c:	ldr	r3, [r4, #12]
   17a80:	str	r3, [sp, #8]
   17a84:	ldr	r3, [r4, #8]
   17a88:	str	r3, [sp, #4]
   17a8c:	ldr	r3, [r4, #4]
   17a90:	str	r3, [sp]
   17a94:	ldr	r3, [r4]
   17a98:	mov	r2, r0
   17a9c:	mov	r0, r5
   17aa0:	bl	1172c <__fprintf_chk@plt>
   17aa4:	b	17a58 <lchmod@@Base+0x201c>
   17aa8:	mov	r2, #5
   17aac:	ldr	r1, [pc, #416]	; 17c54 <lchmod@@Base+0x2218>
   17ab0:	mov	r0, #0
   17ab4:	bl	11540 <dcgettext@plt>
   17ab8:	ldr	r3, [r4, #20]
   17abc:	mov	r1, #1
   17ac0:	str	r3, [sp, #16]
   17ac4:	ldr	r3, [r4, #16]
   17ac8:	str	r3, [sp, #12]
   17acc:	ldr	r3, [r4, #12]
   17ad0:	str	r3, [sp, #8]
   17ad4:	ldr	r3, [r4, #8]
   17ad8:	str	r3, [sp, #4]
   17adc:	ldr	r3, [r4, #4]
   17ae0:	str	r3, [sp]
   17ae4:	ldr	r3, [r4]
   17ae8:	mov	r2, r0
   17aec:	mov	r0, r5
   17af0:	bl	1172c <__fprintf_chk@plt>
   17af4:	b	17a58 <lchmod@@Base+0x201c>
   17af8:	mov	r2, #5
   17afc:	ldr	r1, [pc, #340]	; 17c58 <lchmod@@Base+0x221c>
   17b00:	mov	r0, #0
   17b04:	bl	11540 <dcgettext@plt>
   17b08:	ldr	r3, [r4, #24]
   17b0c:	mov	r1, #1
   17b10:	str	r3, [sp, #20]
   17b14:	ldr	r3, [r4, #20]
   17b18:	str	r3, [sp, #16]
   17b1c:	ldr	r3, [r4, #16]
   17b20:	str	r3, [sp, #12]
   17b24:	ldr	r3, [r4, #12]
   17b28:	str	r3, [sp, #8]
   17b2c:	ldr	r3, [r4, #8]
   17b30:	str	r3, [sp, #4]
   17b34:	ldr	r3, [r4, #4]
   17b38:	str	r3, [sp]
   17b3c:	ldr	r3, [r4]
   17b40:	mov	r2, r0
   17b44:	mov	r0, r5
   17b48:	bl	1172c <__fprintf_chk@plt>
   17b4c:	b	17a58 <lchmod@@Base+0x201c>
   17b50:	mov	r2, #5
   17b54:	ldr	r1, [pc, #256]	; 17c5c <lchmod@@Base+0x2220>
   17b58:	mov	r0, #0
   17b5c:	bl	11540 <dcgettext@plt>
   17b60:	ldr	r3, [r4, #28]
   17b64:	mov	r1, #1
   17b68:	str	r3, [sp, #24]
   17b6c:	ldr	r3, [r4, #24]
   17b70:	str	r3, [sp, #20]
   17b74:	ldr	r3, [r4, #20]
   17b78:	str	r3, [sp, #16]
   17b7c:	ldr	r3, [r4, #16]
   17b80:	str	r3, [sp, #12]
   17b84:	ldr	r3, [r4, #12]
   17b88:	str	r3, [sp, #8]
   17b8c:	ldr	r3, [r4, #8]
   17b90:	str	r3, [sp, #4]
   17b94:	ldr	r3, [r4, #4]
   17b98:	str	r3, [sp]
   17b9c:	ldr	r3, [r4]
   17ba0:	mov	r2, r0
   17ba4:	mov	r0, r5
   17ba8:	bl	1172c <__fprintf_chk@plt>
   17bac:	b	17a58 <lchmod@@Base+0x201c>
   17bb0:	ldr	r1, [pc, #168]	; 17c60 <lchmod@@Base+0x2224>
   17bb4:	mov	r2, #5
   17bb8:	mov	r0, #0
   17bbc:	bl	11540 <dcgettext@plt>
   17bc0:	ldr	r3, [r4, #32]
   17bc4:	mov	r1, #1
   17bc8:	str	r3, [sp, #28]
   17bcc:	ldr	r3, [r4, #28]
   17bd0:	str	r3, [sp, #24]
   17bd4:	ldr	r3, [r4, #24]
   17bd8:	str	r3, [sp, #20]
   17bdc:	ldr	r3, [r4, #20]
   17be0:	str	r3, [sp, #16]
   17be4:	ldr	r3, [r4, #16]
   17be8:	str	r3, [sp, #12]
   17bec:	ldr	r3, [r4, #12]
   17bf0:	str	r3, [sp, #8]
   17bf4:	ldr	r3, [r4, #8]
   17bf8:	str	r3, [sp, #4]
   17bfc:	ldr	r3, [r4, #4]
   17c00:	str	r3, [sp]
   17c04:	ldr	r3, [r4]
   17c08:	mov	r2, r0
   17c0c:	mov	r0, r5
   17c10:	bl	1172c <__fprintf_chk@plt>
   17c14:	b	17a58 <lchmod@@Base+0x201c>
   17c18:	mov	r2, #5
   17c1c:	ldr	r1, [pc, #64]	; 17c64 <lchmod@@Base+0x2228>
   17c20:	b	17bb8 <lchmod@@Base+0x217c>
   17c24:	andeq	r9, r1, fp, ror #17
   17c28:	strdeq	r9, [r1], -lr
   17c2c:	andeq	r0, r0, r6, ror #15
   17c30:	andeq	r9, r1, ip, asr #23
   17c34:	andeq	r9, r1, r2, lsl #18
   17c38:	andeq	r9, r1, sp, lsr #19
   17c3c:	strdeq	r9, [r1], -r7
   17c40:	andeq	r9, r1, pc, asr #19
   17c44:	ldrdeq	r9, [r1], -pc	; <UNPREDICTABLE>
   17c48:	strdeq	r9, [r1], -r6
   17c4c:	andeq	r9, r1, r2, lsl sl
   17c50:	andeq	r9, r1, r2, lsr sl
   17c54:	andeq	r9, r1, r6, asr sl
   17c58:	andeq	r9, r1, lr, ror sl
   17c5c:	andeq	r9, r1, sl, lsr #21
   17c60:	ldrdeq	r9, [r1], -sl
   17c64:	andeq	r9, r1, lr, lsl #22
   17c68:	push	{r0, r1, r4, lr}
   17c6c:	mov	ip, #0
   17c70:	ldr	lr, [sp, #16]
   17c74:	ldr	r4, [lr, ip, lsl #2]
   17c78:	cmp	r4, #0
   17c7c:	bne	17c94 <lchmod@@Base+0x2258>
   17c80:	str	ip, [sp, #4]
   17c84:	str	lr, [sp]
   17c88:	bl	1789c <lchmod@@Base+0x1e60>
   17c8c:	add	sp, sp, #8
   17c90:	pop	{r4, pc}
   17c94:	add	ip, ip, #1
   17c98:	b	17c74 <lchmod@@Base+0x2238>
   17c9c:	push	{r4, r5, lr}
   17ca0:	sub	sp, sp, #52	; 0x34
   17ca4:	mov	ip, #0
   17ca8:	ldr	r5, [sp, #64]	; 0x40
   17cac:	add	lr, sp, #8
   17cb0:	ldr	r4, [r5, ip, lsl #2]
   17cb4:	cmp	r4, #0
   17cb8:	str	r4, [lr, ip, lsl #2]
   17cbc:	beq	17ccc <lchmod@@Base+0x2290>
   17cc0:	add	ip, ip, #1
   17cc4:	cmp	ip, #10
   17cc8:	bne	17cb0 <lchmod@@Base+0x2274>
   17ccc:	str	ip, [sp, #4]
   17cd0:	str	lr, [sp]
   17cd4:	bl	1789c <lchmod@@Base+0x1e60>
   17cd8:	add	sp, sp, #52	; 0x34
   17cdc:	pop	{r4, r5, pc}
   17ce0:	push	{r3}		; (str r3, [sp, #-4]!)
   17ce4:	push	{r0, r1, r2, r3, lr}
   17ce8:	add	r3, sp, #24
   17cec:	str	r3, [sp, #12]
   17cf0:	str	r3, [sp]
   17cf4:	ldr	r3, [sp, #20]
   17cf8:	bl	17c9c <lchmod@@Base+0x2260>
   17cfc:	add	sp, sp, #16
   17d00:	pop	{lr}		; (ldr lr, [sp], #4)
   17d04:	add	sp, sp, #4
   17d08:	bx	lr
   17d0c:	ldr	r3, [pc, #116]	; 17d88 <lchmod@@Base+0x234c>
   17d10:	push	{r4, lr}
   17d14:	mov	r0, #10
   17d18:	ldr	r1, [r3]
   17d1c:	bl	11534 <fputc_unlocked@plt>
   17d20:	mov	r2, #5
   17d24:	ldr	r1, [pc, #96]	; 17d8c <lchmod@@Base+0x2350>
   17d28:	mov	r0, #0
   17d2c:	bl	11540 <dcgettext@plt>
   17d30:	ldr	r2, [pc, #88]	; 17d90 <lchmod@@Base+0x2354>
   17d34:	mov	r1, r0
   17d38:	mov	r0, #1
   17d3c:	bl	11714 <__printf_chk@plt>
   17d40:	mov	r2, #5
   17d44:	ldr	r1, [pc, #72]	; 17d94 <lchmod@@Base+0x2358>
   17d48:	mov	r0, #0
   17d4c:	bl	11540 <dcgettext@plt>
   17d50:	ldr	r3, [pc, #64]	; 17d98 <lchmod@@Base+0x235c>
   17d54:	ldr	r2, [pc, #64]	; 17d9c <lchmod@@Base+0x2360>
   17d58:	mov	r1, r0
   17d5c:	mov	r0, #1
   17d60:	bl	11714 <__printf_chk@plt>
   17d64:	mov	r2, #5
   17d68:	ldr	r1, [pc, #48]	; 17da0 <lchmod@@Base+0x2364>
   17d6c:	mov	r0, #0
   17d70:	bl	11540 <dcgettext@plt>
   17d74:	ldr	r2, [pc, #40]	; 17da4 <lchmod@@Base+0x2368>
   17d78:	pop	{r4, lr}
   17d7c:	mov	r1, r0
   17d80:	mov	r0, #1
   17d84:	b	11714 <__printf_chk@plt>
   17d88:	andeq	sl, r2, r4, ror #3
   17d8c:	andeq	r9, r1, sl, asr #22
   17d90:	andeq	r9, r1, lr, asr fp
   17d94:	andeq	r9, r1, r4, ror fp
   17d98:	muleq	r1, ip, r4
   17d9c:	andeq	r9, r1, r4, asr #9
   17da0:	andeq	r9, r1, r8, lsl #23
   17da4:	andeq	r9, r1, pc, lsr #23
   17da8:	push	{r4, lr}
   17dac:	bl	18344 <lchmod@@Base+0x2908>
   17db0:	cmp	r0, #0
   17db4:	popne	{r4, pc}
   17db8:	bl	1823c <lchmod@@Base+0x2800>
   17dbc:	push	{r4, lr}
   17dc0:	bl	18344 <lchmod@@Base+0x2908>
   17dc4:	cmp	r0, #0
   17dc8:	popne	{r4, pc}
   17dcc:	bl	1823c <lchmod@@Base+0x2800>
   17dd0:	b	17da8 <lchmod@@Base+0x236c>
   17dd4:	push	{r4, r5, r6, lr}
   17dd8:	mov	r5, r0
   17ddc:	mov	r4, r1
   17de0:	bl	18384 <lchmod@@Base+0x2948>
   17de4:	cmp	r0, #0
   17de8:	popne	{r4, r5, r6, pc}
   17dec:	adds	r4, r4, #0
   17df0:	movne	r4, #1
   17df4:	cmp	r5, #0
   17df8:	orreq	r4, r4, #1
   17dfc:	cmp	r4, #0
   17e00:	popeq	{r4, r5, r6, pc}
   17e04:	bl	1823c <lchmod@@Base+0x2800>
   17e08:	push	{r4, lr}
   17e0c:	cmp	r1, #0
   17e10:	orreq	r1, r1, #1
   17e14:	bl	18384 <lchmod@@Base+0x2948>
   17e18:	cmp	r0, #0
   17e1c:	popne	{r4, pc}
   17e20:	bl	1823c <lchmod@@Base+0x2800>
   17e24:	push	{r4, r5, r6, lr}
   17e28:	mov	r6, r0
   17e2c:	mov	r5, r1
   17e30:	mov	r4, r2
   17e34:	bl	189e0 <lchmod@@Base+0x2fa4>
   17e38:	cmp	r0, #0
   17e3c:	popne	{r4, r5, r6, pc}
   17e40:	cmp	r6, #0
   17e44:	beq	17e54 <lchmod@@Base+0x2418>
   17e48:	cmp	r5, #0
   17e4c:	cmpne	r4, #0
   17e50:	popeq	{r4, r5, r6, pc}
   17e54:	bl	1823c <lchmod@@Base+0x2800>
   17e58:	b	17e24 <lchmod@@Base+0x23e8>
   17e5c:	cmp	r2, #0
   17e60:	cmpne	r1, #0
   17e64:	moveq	r2, #1
   17e68:	moveq	r1, r2
   17e6c:	push	{r4, lr}
   17e70:	bl	189e0 <lchmod@@Base+0x2fa4>
   17e74:	cmp	r0, #0
   17e78:	popne	{r4, pc}
   17e7c:	bl	1823c <lchmod@@Base+0x2800>
   17e80:	mov	r2, r1
   17e84:	mov	r1, r0
   17e88:	mov	r0, #0
   17e8c:	b	17e24 <lchmod@@Base+0x23e8>
   17e90:	mov	r2, r1
   17e94:	mov	r1, r0
   17e98:	mov	r0, #0
   17e9c:	b	17e5c <lchmod@@Base+0x2420>
   17ea0:	push	{r4, r5, r6, r7, r8, lr}
   17ea4:	subs	r7, r0, #0
   17ea8:	mov	r5, r1
   17eac:	mov	r6, r2
   17eb0:	ldr	r4, [r1]
   17eb4:	bne	17ef0 <lchmod@@Base+0x24b4>
   17eb8:	cmp	r4, #0
   17ebc:	bne	17ed8 <lchmod@@Base+0x249c>
   17ec0:	mov	r1, r2
   17ec4:	mov	r0, #64	; 0x40
   17ec8:	bl	18b18 <lchmod@@Base+0x30dc>
   17ecc:	cmp	r0, #0
   17ed0:	movne	r4, r0
   17ed4:	addeq	r4, r0, #1
   17ed8:	mov	r2, r6
   17edc:	mov	r1, r4
   17ee0:	mov	r0, r7
   17ee4:	bl	17e24 <lchmod@@Base+0x23e8>
   17ee8:	str	r4, [r5]
   17eec:	pop	{r4, r5, r6, r7, r8, pc}
   17ef0:	lsr	r2, r4, #1
   17ef4:	add	r3, r2, #1
   17ef8:	mvn	r3, r3
   17efc:	cmp	r4, r3
   17f00:	addls	r4, r4, #1
   17f04:	addls	r4, r4, r2
   17f08:	bls	17ed8 <lchmod@@Base+0x249c>
   17f0c:	bl	1823c <lchmod@@Base+0x2800>
   17f10:	mov	r2, #1
   17f14:	b	17ea0 <lchmod@@Base+0x2464>
   17f18:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f1c:	mov	sl, r0
   17f20:	ldr	r8, [r1]
   17f24:	mov	fp, r1
   17f28:	mov	r5, r2
   17f2c:	asrs	r4, r8, #1
   17f30:	mov	r9, r3
   17f34:	ldr	r7, [sp, #48]	; 0x30
   17f38:	bpl	17fd4 <lchmod@@Base+0x2598>
   17f3c:	rsb	r2, r4, #-2147483648	; 0x80000000
   17f40:	cmp	r8, r2
   17f44:	movge	r2, #0
   17f48:	movlt	r2, #1
   17f4c:	mvn	r3, r9
   17f50:	cmp	r2, #0
   17f54:	lsr	r3, r3, #31
   17f58:	addeq	r4, r4, r8
   17f5c:	mvnne	r4, #-2147483648	; 0x80000000
   17f60:	mov	r0, r3
   17f64:	cmp	r9, r4
   17f68:	movge	r0, #0
   17f6c:	andlt	r0, r0, #1
   17f70:	cmp	r0, #0
   17f74:	str	r3, [sp, #4]
   17f78:	bne	18148 <lchmod@@Base+0x270c>
   17f7c:	cmp	r7, #0
   17f80:	bge	18094 <lchmod@@Base+0x2658>
   17f84:	cmp	r4, #0
   17f88:	bge	17fec <lchmod@@Base+0x25b0>
   17f8c:	mov	r1, r7
   17f90:	mvn	r0, #-2147483648	; 0x80000000
   17f94:	bl	18d24 <lchmod@@Base+0x32e8>
   17f98:	cmp	r0, r4
   17f9c:	movle	r0, #0
   17fa0:	movgt	r0, #1
   17fa4:	cmp	r0, #0
   17fa8:	mvnne	r6, #-2147483648	; 0x80000000
   17fac:	beq	17ffc <lchmod@@Base+0x25c0>
   17fb0:	mov	r1, r7
   17fb4:	mov	r0, r6
   17fb8:	bl	18d24 <lchmod@@Base+0x32e8>
   17fbc:	mov	r1, r7
   17fc0:	mov	r4, r0
   17fc4:	mov	r0, r6
   17fc8:	bl	18f44 <lchmod@@Base+0x3508>
   17fcc:	sub	r1, r6, r1
   17fd0:	b	1800c <lchmod@@Base+0x25d0>
   17fd4:	mvn	r2, #-2147483648	; 0x80000000
   17fd8:	sub	r2, r2, r4
   17fdc:	cmp	r8, r2
   17fe0:	movle	r2, #0
   17fe4:	movgt	r2, #1
   17fe8:	b	17f4c <lchmod@@Base+0x2510>
   17fec:	cmn	r7, #1
   17ff0:	movne	r1, r7
   17ff4:	movne	r0, #-2147483648	; 0x80000000
   17ff8:	bne	18160 <lchmod@@Base+0x2724>
   17ffc:	mul	r1, r7, r4
   18000:	cmp	r1, #63	; 0x3f
   18004:	movle	r6, #64	; 0x40
   18008:	ble	17fb0 <lchmod@@Base+0x2574>
   1800c:	cmp	sl, #0
   18010:	sub	r2, r4, r8
   18014:	streq	sl, [fp]
   18018:	cmp	r2, r5
   1801c:	bge	180f0 <lchmod@@Base+0x26b4>
   18020:	cmp	r5, #0
   18024:	bge	180bc <lchmod@@Base+0x2680>
   18028:	rsb	r2, r5, #-2147483648	; 0x80000000
   1802c:	cmp	r8, r2
   18030:	movge	r2, #0
   18034:	movlt	r2, #1
   18038:	cmp	r2, #0
   1803c:	bne	18090 <lchmod@@Base+0x2654>
   18040:	ldr	r0, [sp, #4]
   18044:	add	r5, r8, r5
   18048:	cmp	r9, r5
   1804c:	movge	r0, #0
   18050:	andlt	r0, r0, #1
   18054:	cmp	r0, #0
   18058:	mov	r4, r5
   1805c:	bne	18090 <lchmod@@Base+0x2654>
   18060:	cmp	r7, #0
   18064:	bge	18104 <lchmod@@Base+0x26c8>
   18068:	cmp	r5, #0
   1806c:	bge	180dc <lchmod@@Base+0x26a0>
   18070:	mov	r1, r7
   18074:	mvn	r0, #-2147483648	; 0x80000000
   18078:	bl	18d24 <lchmod@@Base+0x32e8>
   1807c:	cmp	r5, r0
   18080:	movge	r0, #0
   18084:	movlt	r0, #1
   18088:	cmp	r0, #0
   1808c:	beq	180ec <lchmod@@Base+0x26b0>
   18090:	bl	1823c <lchmod@@Base+0x2800>
   18094:	beq	17ffc <lchmod@@Base+0x25c0>
   18098:	cmp	r4, #0
   1809c:	bge	18158 <lchmod@@Base+0x271c>
   180a0:	cmn	r4, #1
   180a4:	beq	17ffc <lchmod@@Base+0x25c0>
   180a8:	mov	r1, r4
   180ac:	mov	r0, #-2147483648	; 0x80000000
   180b0:	bl	18d24 <lchmod@@Base+0x32e8>
   180b4:	cmp	r7, r0
   180b8:	b	17f9c <lchmod@@Base+0x2560>
   180bc:	cmp	r8, #0
   180c0:	blt	18040 <lchmod@@Base+0x2604>
   180c4:	mvn	r2, #-2147483648	; 0x80000000
   180c8:	sub	r2, r2, r5
   180cc:	cmp	r8, r2
   180d0:	movle	r2, #0
   180d4:	movgt	r2, #1
   180d8:	b	18038 <lchmod@@Base+0x25fc>
   180dc:	cmn	r7, #1
   180e0:	movne	r1, r7
   180e4:	movne	r0, #-2147483648	; 0x80000000
   180e8:	bne	1813c <lchmod@@Base+0x2700>
   180ec:	mul	r1, r5, r7
   180f0:	mov	r0, sl
   180f4:	bl	17dd4 <lchmod@@Base+0x2398>
   180f8:	str	r4, [fp]
   180fc:	add	sp, sp, #12
   18100:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18104:	beq	180ec <lchmod@@Base+0x26b0>
   18108:	cmp	r5, #0
   1810c:	movge	r1, r7
   18110:	mvnge	r0, #-2147483648	; 0x80000000
   18114:	bge	1813c <lchmod@@Base+0x2700>
   18118:	cmn	r5, #1
   1811c:	beq	180ec <lchmod@@Base+0x26b0>
   18120:	mov	r1, r5
   18124:	mov	r0, #-2147483648	; 0x80000000
   18128:	bl	18d24 <lchmod@@Base+0x32e8>
   1812c:	cmp	r7, r0
   18130:	movle	r0, #0
   18134:	movgt	r0, #1
   18138:	b	18088 <lchmod@@Base+0x264c>
   1813c:	bl	18d24 <lchmod@@Base+0x32e8>
   18140:	cmp	r5, r0
   18144:	b	18130 <lchmod@@Base+0x26f4>
   18148:	cmp	r7, #0
   1814c:	mov	r4, r9
   18150:	blt	17fec <lchmod@@Base+0x25b0>
   18154:	beq	17ffc <lchmod@@Base+0x25c0>
   18158:	mov	r1, r7
   1815c:	mvn	r0, #-2147483648	; 0x80000000
   18160:	bl	18d24 <lchmod@@Base+0x32e8>
   18164:	cmp	r0, r4
   18168:	movge	r0, #0
   1816c:	movlt	r0, #1
   18170:	b	17fa4 <lchmod@@Base+0x2568>
   18174:	push	{r4, lr}
   18178:	bl	182fc <lchmod@@Base+0x28c0>
   1817c:	cmp	r0, #0
   18180:	popne	{r4, pc}
   18184:	bl	1823c <lchmod@@Base+0x2800>
   18188:	mov	r1, #1
   1818c:	b	18174 <lchmod@@Base+0x2738>
   18190:	push	{r4, lr}
   18194:	bl	182fc <lchmod@@Base+0x28c0>
   18198:	cmp	r0, #0
   1819c:	popne	{r4, pc}
   181a0:	bl	1823c <lchmod@@Base+0x2800>
   181a4:	mov	r1, #1
   181a8:	b	18190 <lchmod@@Base+0x2754>
   181ac:	push	{r4, r5, r6, lr}
   181b0:	mov	r4, r1
   181b4:	mov	r5, r0
   181b8:	mov	r0, r1
   181bc:	bl	17da8 <lchmod@@Base+0x236c>
   181c0:	mov	r2, r4
   181c4:	mov	r1, r5
   181c8:	pop	{r4, r5, r6, lr}
   181cc:	b	11504 <memcpy@plt>
   181d0:	push	{r4, r5, r6, lr}
   181d4:	mov	r4, r1
   181d8:	mov	r5, r0
   181dc:	mov	r0, r1
   181e0:	bl	17dbc <lchmod@@Base+0x2380>
   181e4:	mov	r2, r4
   181e8:	mov	r1, r5
   181ec:	pop	{r4, r5, r6, lr}
   181f0:	b	11504 <memcpy@plt>
   181f4:	push	{r4, r5, r6, lr}
   181f8:	mov	r5, r0
   181fc:	add	r0, r1, #1
   18200:	mov	r4, r1
   18204:	bl	17dbc <lchmod@@Base+0x2380>
   18208:	mov	r2, #0
   1820c:	mov	r1, r5
   18210:	strb	r2, [r0, r4]
   18214:	mov	r2, r4
   18218:	pop	{r4, r5, r6, lr}
   1821c:	b	11504 <memcpy@plt>
   18220:	push	{r4, lr}
   18224:	mov	r4, r0
   18228:	bl	116b4 <strlen@plt>
   1822c:	add	r1, r0, #1
   18230:	mov	r0, r4
   18234:	pop	{r4, lr}
   18238:	b	181ac <lchmod@@Base+0x2770>
   1823c:	ldr	r3, [pc, #44]	; 18270 <lchmod@@Base+0x2834>
   18240:	push	{r4, lr}
   18244:	mov	r2, #5
   18248:	ldr	r1, [pc, #36]	; 18274 <lchmod@@Base+0x2838>
   1824c:	mov	r0, #0
   18250:	ldr	r4, [r3]
   18254:	bl	11540 <dcgettext@plt>
   18258:	ldr	r2, [pc, #24]	; 18278 <lchmod@@Base+0x283c>
   1825c:	mov	r1, #0
   18260:	mov	r3, r0
   18264:	mov	r0, r4
   18268:	bl	1160c <error@plt>
   1826c:	bl	11840 <abort@plt>
   18270:	andeq	sl, r2, r8, lsl #3
   18274:	strdeq	r9, [r1], -fp
   18278:	andeq	r9, r1, r7, lsr r7
   1827c:	push	{r4, lr}
   18280:	orr	r1, r1, #512	; 0x200
   18284:	bl	14010 <__assert_fail@plt+0x277c>
   18288:	cmp	r0, #0
   1828c:	popne	{r4, pc}
   18290:	bl	116e4 <__errno_location@plt>
   18294:	ldr	r3, [r0]
   18298:	cmp	r3, #22
   1829c:	bne	182b4 <lchmod@@Base+0x2878>
   182a0:	ldr	r3, [pc, #16]	; 182b8 <lchmod@@Base+0x287c>
   182a4:	mov	r2, #41	; 0x29
   182a8:	ldr	r1, [pc, #12]	; 182bc <lchmod@@Base+0x2880>
   182ac:	ldr	r0, [pc, #12]	; 182c0 <lchmod@@Base+0x2884>
   182b0:	bl	11894 <__assert_fail@plt>
   182b4:	bl	1823c <lchmod@@Base+0x2800>
   182b8:	andeq	r9, r1, ip, lsl #24
   182bc:	andeq	r9, r1, r6, lsl ip
   182c0:	andeq	r9, r1, r1, lsr #24
   182c4:	ldr	r3, [r0, #48]	; 0x30
   182c8:	and	r3, r3, #17
   182cc:	cmp	r3, #16
   182d0:	beq	182ec <lchmod@@Base+0x28b0>
   182d4:	cmp	r3, #17
   182d8:	bne	182f4 <lchmod@@Base+0x28b8>
   182dc:	ldr	r0, [r1, #48]	; 0x30
   182e0:	adds	r0, r0, #0
   182e4:	movne	r0, #1
   182e8:	bx	lr
   182ec:	mov	r0, #1
   182f0:	bx	lr
   182f4:	mov	r0, #0
   182f8:	bx	lr
   182fc:	cmp	r1, #0
   18300:	cmpne	r0, #0
   18304:	moveq	r1, #1
   18308:	moveq	r0, r1
   1830c:	umull	r2, r3, r0, r1
   18310:	adds	r3, r3, #0
   18314:	movne	r3, #1
   18318:	cmp	r2, #0
   1831c:	blt	1832c <lchmod@@Base+0x28f0>
   18320:	cmp	r3, #0
   18324:	bne	1832c <lchmod@@Base+0x28f0>
   18328:	b	11474 <calloc@plt>
   1832c:	push	{r4, lr}
   18330:	bl	116e4 <__errno_location@plt>
   18334:	mov	r3, #12
   18338:	str	r3, [r0]
   1833c:	mov	r0, #0
   18340:	pop	{r4, pc}
   18344:	cmp	r0, #0
   18348:	mov	r3, #0
   1834c:	moveq	r0, #1
   18350:	adds	r3, r3, #0
   18354:	movne	r3, #1
   18358:	cmp	r0, #0
   1835c:	blt	1836c <lchmod@@Base+0x2930>
   18360:	cmp	r3, #0
   18364:	bne	1836c <lchmod@@Base+0x2930>
   18368:	b	11630 <malloc@plt>
   1836c:	push	{r4, lr}
   18370:	bl	116e4 <__errno_location@plt>
   18374:	mov	r3, #12
   18378:	str	r3, [r0]
   1837c:	mov	r0, #0
   18380:	pop	{r4, pc}
   18384:	cmp	r0, #0
   18388:	push	{r4, lr}
   1838c:	mov	r4, r1
   18390:	bne	183a0 <lchmod@@Base+0x2964>
   18394:	mov	r0, r1
   18398:	pop	{r4, lr}
   1839c:	b	18344 <lchmod@@Base+0x2908>
   183a0:	cmp	r1, #0
   183a4:	bne	183b4 <lchmod@@Base+0x2978>
   183a8:	bl	12da0 <__assert_fail@plt+0x150c>
   183ac:	mov	r0, #0
   183b0:	pop	{r4, pc}
   183b4:	cmp	r1, #0
   183b8:	blt	183c8 <lchmod@@Base+0x298c>
   183bc:	mov	r3, #0
   183c0:	cmp	r3, r3
   183c4:	beq	183d8 <lchmod@@Base+0x299c>
   183c8:	bl	116e4 <__errno_location@plt>
   183cc:	mov	r3, #12
   183d0:	str	r3, [r0]
   183d4:	b	183ac <lchmod@@Base+0x2970>
   183d8:	pop	{r4, lr}
   183dc:	b	11558 <realloc@plt>
   183e0:	mov	r2, r0
   183e4:	push	{r4, lr}
   183e8:	mov	r0, r2
   183ec:	ldrb	r3, [r2]
   183f0:	add	r1, r2, #1
   183f4:	cmp	r3, #47	; 0x2f
   183f8:	beq	1841c <lchmod@@Base+0x29e0>
   183fc:	mov	r3, #0
   18400:	mov	lr, #1
   18404:	mov	r4, r3
   18408:	mov	ip, r2
   1840c:	ldrb	r1, [r2], #1
   18410:	cmp	r1, #0
   18414:	bne	18424 <lchmod@@Base+0x29e8>
   18418:	pop	{r4, pc}
   1841c:	mov	r2, r1
   18420:	b	183e8 <lchmod@@Base+0x29ac>
   18424:	cmp	r1, #47	; 0x2f
   18428:	moveq	r3, lr
   1842c:	beq	18408 <lchmod@@Base+0x29cc>
   18430:	cmp	r3, #0
   18434:	movne	r0, ip
   18438:	movne	r3, r4
   1843c:	b	18408 <lchmod@@Base+0x29cc>
   18440:	push	{r4, lr}
   18444:	mov	r4, r0
   18448:	bl	116b4 <strlen@plt>
   1844c:	cmp	r0, #1
   18450:	popls	{r4, pc}
   18454:	sub	r3, r0, #1
   18458:	ldrb	r2, [r4, r3]
   1845c:	cmp	r2, #47	; 0x2f
   18460:	beq	18468 <lchmod@@Base+0x2a2c>
   18464:	pop	{r4, pc}
   18468:	mov	r0, r3
   1846c:	b	1844c <lchmod@@Base+0x2a10>
   18470:	push	{r4, r5, r6, lr}
   18474:	mov	r4, r0
   18478:	bl	115e8 <__fpending@plt>
   1847c:	mov	r5, r0
   18480:	mov	r0, r4
   18484:	bl	115f4 <ferror_unlocked@plt>
   18488:	mov	r6, r0
   1848c:	mov	r0, r4
   18490:	bl	185ac <lchmod@@Base+0x2b70>
   18494:	cmp	r6, #0
   18498:	mov	r4, r0
   1849c:	bne	184c8 <lchmod@@Base+0x2a8c>
   184a0:	cmp	r0, #0
   184a4:	beq	184c0 <lchmod@@Base+0x2a84>
   184a8:	cmp	r5, #0
   184ac:	bne	184d8 <lchmod@@Base+0x2a9c>
   184b0:	bl	116e4 <__errno_location@plt>
   184b4:	ldr	r4, [r0]
   184b8:	subs	r4, r4, #9
   184bc:	mvnne	r4, #0
   184c0:	mov	r0, r4
   184c4:	pop	{r4, r5, r6, pc}
   184c8:	cmp	r0, #0
   184cc:	bne	184d8 <lchmod@@Base+0x2a9c>
   184d0:	bl	116e4 <__errno_location@plt>
   184d4:	str	r4, [r0]
   184d8:	mvn	r4, #0
   184dc:	b	184c0 <lchmod@@Base+0x2a84>
   184e0:	mov	r3, #0
   184e4:	mov	r2, #0
   184e8:	strd	r2, [r0, #16]
   184ec:	ldr	r3, [pc, #4]	; 184f8 <lchmod@@Base+0x2abc>
   184f0:	str	r3, [r0, #24]
   184f4:	bx	lr
   184f8:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   184fc:	ldr	r2, [r0, #24]
   18500:	ldr	r3, [pc, #148]	; 1859c <lchmod@@Base+0x2b60>
   18504:	push	{r4, r5, r6, r7, r8, lr}
   18508:	cmp	r2, r3
   1850c:	beq	18524 <lchmod@@Base+0x2ae8>
   18510:	ldr	r3, [pc, #136]	; 185a0 <lchmod@@Base+0x2b64>
   18514:	mov	r2, #60	; 0x3c
   18518:	ldr	r1, [pc, #132]	; 185a4 <lchmod@@Base+0x2b68>
   1851c:	ldr	r0, [pc, #132]	; 185a8 <lchmod@@Base+0x2b6c>
   18520:	bl	11894 <__assert_fail@plt>
   18524:	ldrd	r6, [r0, #16]
   18528:	orrs	r3, r6, r7
   1852c:	beq	18560 <lchmod@@Base+0x2b24>
   18530:	ldrd	r4, [r1, #96]	; 0x60
   18534:	ldrd	r2, [r0]
   18538:	cmp	r5, r3
   1853c:	cmpeq	r4, r2
   18540:	bne	18560 <lchmod@@Base+0x2b24>
   18544:	ldrd	r4, [r1]
   18548:	ldrd	r2, [r0, #8]
   1854c:	cmp	r5, r3
   18550:	cmpeq	r4, r2
   18554:	bne	18560 <lchmod@@Base+0x2b24>
   18558:	mov	r0, #1
   1855c:	pop	{r4, r5, r6, r7, r8, pc}
   18560:	adds	r2, r6, #1
   18564:	adc	r3, r7, #0
   18568:	and	r6, r6, r2
   1856c:	and	r7, r7, r3
   18570:	orrs	ip, r6, r7
   18574:	strd	r2, [r0, #16]
   18578:	bne	18594 <lchmod@@Base+0x2b58>
   1857c:	orrs	r3, r2, r3
   18580:	beq	18558 <lchmod@@Base+0x2b1c>
   18584:	ldrd	r2, [r1]
   18588:	strd	r2, [r0, #8]
   1858c:	ldrd	r2, [r1, #96]	; 0x60
   18590:	strd	r2, [r0]
   18594:	mov	r0, #0
   18598:	pop	{r4, r5, r6, r7, r8, pc}
   1859c:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   185a0:	andeq	r9, r1, r1, lsr ip
   185a4:	andeq	r9, r1, sp, lsr ip
   185a8:	andeq	r9, r1, pc, asr #24
   185ac:	push	{r0, r1, r2, r4, r5, lr}
   185b0:	mov	r4, r0
   185b4:	bl	11720 <fileno@plt>
   185b8:	cmp	r0, #0
   185bc:	mov	r0, r4
   185c0:	bge	185d0 <lchmod@@Base+0x2b94>
   185c4:	add	sp, sp, #12
   185c8:	pop	{r4, r5, lr}
   185cc:	b	11738 <fclose@plt>
   185d0:	bl	11648 <__freading@plt>
   185d4:	cmp	r0, #0
   185d8:	bne	18614 <lchmod@@Base+0x2bd8>
   185dc:	mov	r0, r4
   185e0:	bl	1884c <lchmod@@Base+0x2e10>
   185e4:	cmp	r0, #0
   185e8:	bne	18648 <lchmod@@Base+0x2c0c>
   185ec:	mov	r5, #0
   185f0:	mov	r0, r4
   185f4:	bl	11738 <fclose@plt>
   185f8:	cmp	r5, #0
   185fc:	beq	1860c <lchmod@@Base+0x2bd0>
   18600:	bl	116e4 <__errno_location@plt>
   18604:	str	r5, [r0]
   18608:	mvn	r0, #0
   1860c:	add	sp, sp, #12
   18610:	pop	{r4, r5, pc}
   18614:	mov	r0, r4
   18618:	bl	11720 <fileno@plt>
   1861c:	mov	r3, #1
   18620:	str	r3, [sp]
   18624:	mov	r2, #0
   18628:	mov	r3, #0
   1862c:	bl	115b8 <lseek64@plt>
   18630:	mvn	r3, #0
   18634:	mvn	r2, #0
   18638:	cmp	r1, r3
   1863c:	cmpeq	r0, r2
   18640:	bne	185dc <lchmod@@Base+0x2ba0>
   18644:	b	185ec <lchmod@@Base+0x2bb0>
   18648:	bl	116e4 <__errno_location@plt>
   1864c:	ldr	r5, [r0]
   18650:	b	185f0 <lchmod@@Base+0x2bb4>
   18654:	push	{r1, r2, r3}
   18658:	push	{r0, r1, r4, r5, r6, r7, lr}
   1865c:	add	r2, sp, #32
   18660:	ldr	r1, [sp, #28]
   18664:	str	r2, [sp, #4]
   18668:	cmp	r1, #0
   1866c:	beq	186b0 <lchmod@@Base+0x2c74>
   18670:	ldr	r3, [pc, #396]	; 18804 <lchmod@@Base+0x2dc8>
   18674:	mov	r6, r0
   18678:	cmp	r1, r3
   1867c:	beq	186bc <lchmod@@Base+0x2c80>
   18680:	cmp	r1, #11
   18684:	beq	186a0 <lchmod@@Base+0x2c64>
   18688:	bgt	187cc <lchmod@@Base+0x2d90>
   1868c:	cmp	r1, #3
   18690:	beq	186a0 <lchmod@@Base+0x2c64>
   18694:	bgt	187a8 <lchmod@@Base+0x2d6c>
   18698:	cmp	r1, #1
   1869c:	bne	187b4 <lchmod@@Base+0x2d78>
   186a0:	mov	r0, r6
   186a4:	bl	11750 <fcntl64@plt>
   186a8:	mov	r4, r0
   186ac:	b	18768 <lchmod@@Base+0x2d2c>
   186b0:	ldr	r2, [sp, #32]
   186b4:	bl	11750 <fcntl64@plt>
   186b8:	b	186a8 <lchmod@@Base+0x2c6c>
   186bc:	ldr	r5, [pc, #324]	; 18808 <lchmod@@Base+0x2dcc>
   186c0:	add	r3, sp, #36	; 0x24
   186c4:	str	r3, [sp, #4]
   186c8:	ldr	r3, [r5]
   186cc:	ldr	r7, [r2]
   186d0:	cmp	r3, #0
   186d4:	mov	r2, r7
   186d8:	blt	1877c <lchmod@@Base+0x2d40>
   186dc:	bl	11750 <fcntl64@plt>
   186e0:	subs	r4, r0, #0
   186e4:	bge	186f8 <lchmod@@Base+0x2cbc>
   186e8:	bl	116e4 <__errno_location@plt>
   186ec:	ldr	r3, [r0]
   186f0:	cmp	r3, #22
   186f4:	beq	18748 <lchmod@@Base+0x2d0c>
   186f8:	mov	r3, #1
   186fc:	str	r3, [r5]
   18700:	cmp	r4, #0
   18704:	blt	18768 <lchmod@@Base+0x2d2c>
   18708:	ldr	r5, [r5]
   1870c:	cmn	r5, #1
   18710:	bne	18768 <lchmod@@Base+0x2d2c>
   18714:	mov	r1, #1
   18718:	mov	r0, r4
   1871c:	bl	11750 <fcntl64@plt>
   18720:	subs	r2, r0, #0
   18724:	bge	1878c <lchmod@@Base+0x2d50>
   18728:	bl	116e4 <__errno_location@plt>
   1872c:	ldr	r7, [r0]
   18730:	mov	r6, r0
   18734:	mov	r0, r4
   18738:	bl	1184c <close@plt>
   1873c:	mov	r4, r5
   18740:	str	r7, [r6]
   18744:	b	18768 <lchmod@@Base+0x2d2c>
   18748:	mov	r2, r7
   1874c:	mov	r1, #0
   18750:	mov	r0, r6
   18754:	bl	11750 <fcntl64@plt>
   18758:	subs	r4, r0, #0
   1875c:	mvnge	r3, #0
   18760:	strge	r3, [r5]
   18764:	bge	18708 <lchmod@@Base+0x2ccc>
   18768:	mov	r0, r4
   1876c:	add	sp, sp, #8
   18770:	pop	{r4, r5, r6, r7, lr}
   18774:	add	sp, sp, #12
   18778:	bx	lr
   1877c:	mov	r1, #0
   18780:	bl	11750 <fcntl64@plt>
   18784:	mov	r4, r0
   18788:	b	18700 <lchmod@@Base+0x2cc4>
   1878c:	orr	r2, r2, #1
   18790:	mov	r1, #2
   18794:	mov	r0, r4
   18798:	bl	11750 <fcntl64@plt>
   1879c:	cmn	r0, #1
   187a0:	bne	18768 <lchmod@@Base+0x2d2c>
   187a4:	b	18728 <lchmod@@Base+0x2cec>
   187a8:	cmp	r1, #8
   187ac:	beq	187b4 <lchmod@@Base+0x2d78>
   187b0:	bgt	187c4 <lchmod@@Base+0x2d88>
   187b4:	ldr	r3, [sp, #4]
   187b8:	mov	r0, r6
   187bc:	ldr	r2, [r3]
   187c0:	b	186b4 <lchmod@@Base+0x2c78>
   187c4:	cmp	r1, #9
   187c8:	b	1869c <lchmod@@Base+0x2c60>
   187cc:	ldr	r2, [pc, #56]	; 1880c <lchmod@@Base+0x2dd0>
   187d0:	cmp	r1, r2
   187d4:	bgt	187ec <lchmod@@Base+0x2db0>
   187d8:	cmp	r1, r3
   187dc:	ldrlt	r3, [pc, #44]	; 18810 <lchmod@@Base+0x2dd4>
   187e0:	bge	187b4 <lchmod@@Base+0x2d78>
   187e4:	cmp	r1, r3
   187e8:	b	1869c <lchmod@@Base+0x2c60>
   187ec:	ldr	r3, [pc, #32]	; 18814 <lchmod@@Base+0x2dd8>
   187f0:	cmp	r1, r3
   187f4:	beq	187b4 <lchmod@@Base+0x2d78>
   187f8:	blt	186a0 <lchmod@@Base+0x2c64>
   187fc:	add	r3, r3, #1
   18800:	b	187e4 <lchmod@@Base+0x2da8>
   18804:	andeq	r0, r0, r6, lsl #8
   18808:	andeq	sl, r2, ip, lsr #6
   1880c:	andeq	r0, r0, r7, lsl #8
   18810:	andeq	r0, r0, r1, lsl #8
   18814:	andeq	r0, r0, r9, lsl #8
   18818:	push	{r1, r2, r3}
   1881c:	push	{r0, r1, lr}
   18820:	ldr	r1, [sp, #12]
   18824:	ands	r2, r1, #64	; 0x40
   18828:	addne	r3, sp, #16
   1882c:	ldrne	r2, [sp, #16]
   18830:	strne	r3, [sp, #4]
   18834:	bl	11618 <open64@plt>
   18838:	bl	17860 <lchmod@@Base+0x1e24>
   1883c:	add	sp, sp, #8
   18840:	pop	{lr}		; (ldr lr, [sp], #4)
   18844:	add	sp, sp, #12
   18848:	bx	lr
   1884c:	push	{r0, r1, r4, lr}
   18850:	subs	r4, r0, #0
   18854:	bne	18868 <lchmod@@Base+0x2e2c>
   18858:	mov	r0, r4
   1885c:	add	sp, sp, #8
   18860:	pop	{r4, lr}
   18864:	b	114bc <fflush@plt>
   18868:	bl	11648 <__freading@plt>
   1886c:	cmp	r0, #0
   18870:	beq	18858 <lchmod@@Base+0x2e1c>
   18874:	ldr	r3, [r4]
   18878:	tst	r3, #256	; 0x100
   1887c:	beq	18858 <lchmod@@Base+0x2e1c>
   18880:	mov	r3, #1
   18884:	str	r3, [sp]
   18888:	mov	r2, #0
   1888c:	mov	r3, #0
   18890:	mov	r0, r4
   18894:	bl	1889c <lchmod@@Base+0x2e60>
   18898:	b	18858 <lchmod@@Base+0x2e1c>
   1889c:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   188a0:	mov	r4, r0
   188a4:	ldmib	r0, {ip, lr}
   188a8:	ldr	r8, [sp, #32]
   188ac:	cmp	lr, ip
   188b0:	bne	1891c <lchmod@@Base+0x2ee0>
   188b4:	ldr	lr, [r0, #20]
   188b8:	ldr	ip, [r0, #16]
   188bc:	cmp	lr, ip
   188c0:	bne	1891c <lchmod@@Base+0x2ee0>
   188c4:	ldr	r5, [r0, #36]	; 0x24
   188c8:	cmp	r5, #0
   188cc:	bne	1891c <lchmod@@Base+0x2ee0>
   188d0:	mov	r6, r2
   188d4:	mov	r7, r3
   188d8:	bl	11720 <fileno@plt>
   188dc:	mov	r2, r6
   188e0:	mov	r3, r7
   188e4:	str	r8, [sp]
   188e8:	bl	115b8 <lseek64@plt>
   188ec:	mvn	r3, #0
   188f0:	mvn	r2, #0
   188f4:	cmp	r1, r3
   188f8:	cmpeq	r0, r2
   188fc:	mvneq	r0, #0
   18900:	ldrne	r3, [r4]
   18904:	strdne	r0, [r4, #80]	; 0x50
   18908:	movne	r0, r5
   1890c:	bicne	r3, r3, #16
   18910:	strne	r3, [r4]
   18914:	add	sp, sp, #8
   18918:	pop	{r4, r5, r6, r7, r8, pc}
   1891c:	str	r8, [sp, #32]
   18920:	mov	r0, r4
   18924:	add	sp, sp, #8
   18928:	pop	{r4, r5, r6, r7, r8, lr}
   1892c:	b	11744 <fseeko64@plt>
   18930:	sub	r2, r0, #1
   18934:	mov	r0, #0
   18938:	push	{r4, lr}
   1893c:	ldrb	r3, [r2, #1]!
   18940:	cmp	r3, #0
   18944:	bne	18954 <lchmod@@Base+0x2f18>
   18948:	bl	18d04 <lchmod@@Base+0x32c8>
   1894c:	mov	r0, r1
   18950:	pop	{r4, pc}
   18954:	add	r0, r3, r0, ror #23
   18958:	b	1893c <lchmod@@Base+0x2f00>
   1895c:	push	{r4, lr}
   18960:	mov	r0, #14
   18964:	bl	11780 <nl_langinfo@plt>
   18968:	ldr	r3, [pc, #24]	; 18988 <lchmod@@Base+0x2f4c>
   1896c:	cmp	r0, #0
   18970:	moveq	r0, r3
   18974:	ldr	r3, [pc, #16]	; 1898c <lchmod@@Base+0x2f50>
   18978:	ldrb	r2, [r0]
   1897c:	cmp	r2, #0
   18980:	moveq	r0, r3
   18984:	pop	{r4, pc}
   18988:	andeq	r9, r1, sl, ror #10
   1898c:	andeq	r9, r1, r7, ror #24
   18990:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18994:	subs	r5, r0, #0
   18998:	addeq	r5, sp, #4
   1899c:	mov	r0, r5
   189a0:	mov	r7, r2
   189a4:	mov	r6, r1
   189a8:	bl	11600 <mbrtowc@plt>
   189ac:	cmp	r7, #0
   189b0:	cmnne	r0, #3
   189b4:	mov	r4, r0
   189b8:	bls	189d4 <lchmod@@Base+0x2f98>
   189bc:	mov	r0, #0
   189c0:	bl	18a38 <lchmod@@Base+0x2ffc>
   189c4:	cmp	r0, #0
   189c8:	moveq	r4, #1
   189cc:	ldrbeq	r3, [r6]
   189d0:	streq	r3, [r5]
   189d4:	mov	r0, r4
   189d8:	add	sp, sp, #12
   189dc:	pop	{r4, r5, r6, r7, pc}
   189e0:	push	{r4, r5, r6, lr}
   189e4:	subs	r4, r2, #0
   189e8:	mov	r6, r0
   189ec:	mov	r5, r1
   189f0:	beq	18a08 <lchmod@@Base+0x2fcc>
   189f4:	mov	r1, r4
   189f8:	mvn	r0, #0
   189fc:	bl	18b18 <lchmod@@Base+0x30dc>
   18a00:	cmp	r0, r5
   18a04:	bcc	18a18 <lchmod@@Base+0x2fdc>
   18a08:	mul	r1, r5, r4
   18a0c:	mov	r0, r6
   18a10:	pop	{r4, r5, r6, lr}
   18a14:	b	18384 <lchmod@@Base+0x2948>
   18a18:	bl	116e4 <__errno_location@plt>
   18a1c:	mov	r3, #12
   18a20:	str	r3, [r0]
   18a24:	mov	r0, #0
   18a28:	pop	{r4, r5, r6, pc}
   18a2c:	mov	r2, #3
   18a30:	mov	r1, #0
   18a34:	b	18654 <lchmod@@Base+0x2c18>
   18a38:	push	{lr}		; (str lr, [sp, #-4]!)
   18a3c:	sub	sp, sp, #268	; 0x10c
   18a40:	ldr	r2, [pc, #64]	; 18a88 <lchmod@@Base+0x304c>
   18a44:	add	r1, sp, #4
   18a48:	bl	18a94 <lchmod@@Base+0x3058>
   18a4c:	cmp	r0, #0
   18a50:	movne	r0, #0
   18a54:	bne	18a80 <lchmod@@Base+0x3044>
   18a58:	ldr	r1, [pc, #44]	; 18a8c <lchmod@@Base+0x3050>
   18a5c:	add	r0, sp, #4
   18a60:	bl	114a4 <strcmp@plt>
   18a64:	cmp	r0, #0
   18a68:	beq	18a80 <lchmod@@Base+0x3044>
   18a6c:	ldr	r1, [pc, #28]	; 18a90 <lchmod@@Base+0x3054>
   18a70:	add	r0, sp, #4
   18a74:	bl	114a4 <strcmp@plt>
   18a78:	adds	r0, r0, #0
   18a7c:	movne	r0, #1
   18a80:	add	sp, sp, #268	; 0x10c
   18a84:	pop	{pc}		; (ldr pc, [sp], #4)
   18a88:	andeq	r0, r0, r1, lsl #2
   18a8c:	andeq	r9, r1, sp, ror #24
   18a90:	andeq	r9, r1, pc, ror #24
   18a94:	push	{r4, r5, r6, lr}
   18a98:	mov	r5, r1
   18a9c:	mov	r1, #0
   18aa0:	mov	r4, r2
   18aa4:	bl	1175c <setlocale@plt>
   18aa8:	subs	r6, r0, #0
   18aac:	bne	18ac0 <lchmod@@Base+0x3084>
   18ab0:	cmp	r4, #0
   18ab4:	strbne	r6, [r5]
   18ab8:	mov	r0, #22
   18abc:	pop	{r4, r5, r6, pc}
   18ac0:	bl	116b4 <strlen@plt>
   18ac4:	cmp	r4, r0
   18ac8:	bls	18ae4 <lchmod@@Base+0x30a8>
   18acc:	add	r2, r0, #1
   18ad0:	mov	r1, r6
   18ad4:	mov	r0, r5
   18ad8:	bl	11504 <memcpy@plt>
   18adc:	mov	r0, #0
   18ae0:	pop	{r4, r5, r6, pc}
   18ae4:	cmp	r4, #0
   18ae8:	beq	18b08 <lchmod@@Base+0x30cc>
   18aec:	sub	r4, r4, #1
   18af0:	mov	r2, r4
   18af4:	mov	r1, r6
   18af8:	mov	r0, r5
   18afc:	bl	11504 <memcpy@plt>
   18b00:	mov	r3, #0
   18b04:	strb	r3, [r5, r4]
   18b08:	mov	r0, #34	; 0x22
   18b0c:	pop	{r4, r5, r6, pc}
   18b10:	mov	r1, #0
   18b14:	b	1175c <setlocale@plt>
   18b18:	subs	r2, r1, #1
   18b1c:	bxeq	lr
   18b20:	bcc	18cf8 <lchmod@@Base+0x32bc>
   18b24:	cmp	r0, r1
   18b28:	bls	18cdc <lchmod@@Base+0x32a0>
   18b2c:	tst	r1, r2
   18b30:	beq	18ce8 <lchmod@@Base+0x32ac>
   18b34:	clz	r3, r0
   18b38:	clz	r2, r1
   18b3c:	sub	r3, r2, r3
   18b40:	rsbs	r3, r3, #31
   18b44:	addne	r3, r3, r3, lsl #1
   18b48:	mov	r2, #0
   18b4c:	addne	pc, pc, r3, lsl #2
   18b50:	nop			; (mov r0, r0)
   18b54:	cmp	r0, r1, lsl #31
   18b58:	adc	r2, r2, r2
   18b5c:	subcs	r0, r0, r1, lsl #31
   18b60:	cmp	r0, r1, lsl #30
   18b64:	adc	r2, r2, r2
   18b68:	subcs	r0, r0, r1, lsl #30
   18b6c:	cmp	r0, r1, lsl #29
   18b70:	adc	r2, r2, r2
   18b74:	subcs	r0, r0, r1, lsl #29
   18b78:	cmp	r0, r1, lsl #28
   18b7c:	adc	r2, r2, r2
   18b80:	subcs	r0, r0, r1, lsl #28
   18b84:	cmp	r0, r1, lsl #27
   18b88:	adc	r2, r2, r2
   18b8c:	subcs	r0, r0, r1, lsl #27
   18b90:	cmp	r0, r1, lsl #26
   18b94:	adc	r2, r2, r2
   18b98:	subcs	r0, r0, r1, lsl #26
   18b9c:	cmp	r0, r1, lsl #25
   18ba0:	adc	r2, r2, r2
   18ba4:	subcs	r0, r0, r1, lsl #25
   18ba8:	cmp	r0, r1, lsl #24
   18bac:	adc	r2, r2, r2
   18bb0:	subcs	r0, r0, r1, lsl #24
   18bb4:	cmp	r0, r1, lsl #23
   18bb8:	adc	r2, r2, r2
   18bbc:	subcs	r0, r0, r1, lsl #23
   18bc0:	cmp	r0, r1, lsl #22
   18bc4:	adc	r2, r2, r2
   18bc8:	subcs	r0, r0, r1, lsl #22
   18bcc:	cmp	r0, r1, lsl #21
   18bd0:	adc	r2, r2, r2
   18bd4:	subcs	r0, r0, r1, lsl #21
   18bd8:	cmp	r0, r1, lsl #20
   18bdc:	adc	r2, r2, r2
   18be0:	subcs	r0, r0, r1, lsl #20
   18be4:	cmp	r0, r1, lsl #19
   18be8:	adc	r2, r2, r2
   18bec:	subcs	r0, r0, r1, lsl #19
   18bf0:	cmp	r0, r1, lsl #18
   18bf4:	adc	r2, r2, r2
   18bf8:	subcs	r0, r0, r1, lsl #18
   18bfc:	cmp	r0, r1, lsl #17
   18c00:	adc	r2, r2, r2
   18c04:	subcs	r0, r0, r1, lsl #17
   18c08:	cmp	r0, r1, lsl #16
   18c0c:	adc	r2, r2, r2
   18c10:	subcs	r0, r0, r1, lsl #16
   18c14:	cmp	r0, r1, lsl #15
   18c18:	adc	r2, r2, r2
   18c1c:	subcs	r0, r0, r1, lsl #15
   18c20:	cmp	r0, r1, lsl #14
   18c24:	adc	r2, r2, r2
   18c28:	subcs	r0, r0, r1, lsl #14
   18c2c:	cmp	r0, r1, lsl #13
   18c30:	adc	r2, r2, r2
   18c34:	subcs	r0, r0, r1, lsl #13
   18c38:	cmp	r0, r1, lsl #12
   18c3c:	adc	r2, r2, r2
   18c40:	subcs	r0, r0, r1, lsl #12
   18c44:	cmp	r0, r1, lsl #11
   18c48:	adc	r2, r2, r2
   18c4c:	subcs	r0, r0, r1, lsl #11
   18c50:	cmp	r0, r1, lsl #10
   18c54:	adc	r2, r2, r2
   18c58:	subcs	r0, r0, r1, lsl #10
   18c5c:	cmp	r0, r1, lsl #9
   18c60:	adc	r2, r2, r2
   18c64:	subcs	r0, r0, r1, lsl #9
   18c68:	cmp	r0, r1, lsl #8
   18c6c:	adc	r2, r2, r2
   18c70:	subcs	r0, r0, r1, lsl #8
   18c74:	cmp	r0, r1, lsl #7
   18c78:	adc	r2, r2, r2
   18c7c:	subcs	r0, r0, r1, lsl #7
   18c80:	cmp	r0, r1, lsl #6
   18c84:	adc	r2, r2, r2
   18c88:	subcs	r0, r0, r1, lsl #6
   18c8c:	cmp	r0, r1, lsl #5
   18c90:	adc	r2, r2, r2
   18c94:	subcs	r0, r0, r1, lsl #5
   18c98:	cmp	r0, r1, lsl #4
   18c9c:	adc	r2, r2, r2
   18ca0:	subcs	r0, r0, r1, lsl #4
   18ca4:	cmp	r0, r1, lsl #3
   18ca8:	adc	r2, r2, r2
   18cac:	subcs	r0, r0, r1, lsl #3
   18cb0:	cmp	r0, r1, lsl #2
   18cb4:	adc	r2, r2, r2
   18cb8:	subcs	r0, r0, r1, lsl #2
   18cbc:	cmp	r0, r1, lsl #1
   18cc0:	adc	r2, r2, r2
   18cc4:	subcs	r0, r0, r1, lsl #1
   18cc8:	cmp	r0, r1
   18ccc:	adc	r2, r2, r2
   18cd0:	subcs	r0, r0, r1
   18cd4:	mov	r0, r2
   18cd8:	bx	lr
   18cdc:	moveq	r0, #1
   18ce0:	movne	r0, #0
   18ce4:	bx	lr
   18ce8:	clz	r2, r1
   18cec:	rsb	r2, r2, #31
   18cf0:	lsr	r0, r0, r2
   18cf4:	bx	lr
   18cf8:	cmp	r0, #0
   18cfc:	mvnne	r0, #0
   18d00:	b	18fa0 <lchmod@@Base+0x3564>
   18d04:	cmp	r1, #0
   18d08:	beq	18cf8 <lchmod@@Base+0x32bc>
   18d0c:	push	{r0, r1, lr}
   18d10:	bl	18b18 <lchmod@@Base+0x30dc>
   18d14:	pop	{r1, r2, lr}
   18d18:	mul	r3, r2, r0
   18d1c:	sub	r1, r1, r3
   18d20:	bx	lr
   18d24:	cmp	r1, #0
   18d28:	beq	18f34 <lchmod@@Base+0x34f8>
   18d2c:	eor	ip, r0, r1
   18d30:	rsbmi	r1, r1, #0
   18d34:	subs	r2, r1, #1
   18d38:	beq	18f00 <lchmod@@Base+0x34c4>
   18d3c:	movs	r3, r0
   18d40:	rsbmi	r3, r0, #0
   18d44:	cmp	r3, r1
   18d48:	bls	18f0c <lchmod@@Base+0x34d0>
   18d4c:	tst	r1, r2
   18d50:	beq	18f1c <lchmod@@Base+0x34e0>
   18d54:	clz	r2, r3
   18d58:	clz	r0, r1
   18d5c:	sub	r2, r0, r2
   18d60:	rsbs	r2, r2, #31
   18d64:	addne	r2, r2, r2, lsl #1
   18d68:	mov	r0, #0
   18d6c:	addne	pc, pc, r2, lsl #2
   18d70:	nop			; (mov r0, r0)
   18d74:	cmp	r3, r1, lsl #31
   18d78:	adc	r0, r0, r0
   18d7c:	subcs	r3, r3, r1, lsl #31
   18d80:	cmp	r3, r1, lsl #30
   18d84:	adc	r0, r0, r0
   18d88:	subcs	r3, r3, r1, lsl #30
   18d8c:	cmp	r3, r1, lsl #29
   18d90:	adc	r0, r0, r0
   18d94:	subcs	r3, r3, r1, lsl #29
   18d98:	cmp	r3, r1, lsl #28
   18d9c:	adc	r0, r0, r0
   18da0:	subcs	r3, r3, r1, lsl #28
   18da4:	cmp	r3, r1, lsl #27
   18da8:	adc	r0, r0, r0
   18dac:	subcs	r3, r3, r1, lsl #27
   18db0:	cmp	r3, r1, lsl #26
   18db4:	adc	r0, r0, r0
   18db8:	subcs	r3, r3, r1, lsl #26
   18dbc:	cmp	r3, r1, lsl #25
   18dc0:	adc	r0, r0, r0
   18dc4:	subcs	r3, r3, r1, lsl #25
   18dc8:	cmp	r3, r1, lsl #24
   18dcc:	adc	r0, r0, r0
   18dd0:	subcs	r3, r3, r1, lsl #24
   18dd4:	cmp	r3, r1, lsl #23
   18dd8:	adc	r0, r0, r0
   18ddc:	subcs	r3, r3, r1, lsl #23
   18de0:	cmp	r3, r1, lsl #22
   18de4:	adc	r0, r0, r0
   18de8:	subcs	r3, r3, r1, lsl #22
   18dec:	cmp	r3, r1, lsl #21
   18df0:	adc	r0, r0, r0
   18df4:	subcs	r3, r3, r1, lsl #21
   18df8:	cmp	r3, r1, lsl #20
   18dfc:	adc	r0, r0, r0
   18e00:	subcs	r3, r3, r1, lsl #20
   18e04:	cmp	r3, r1, lsl #19
   18e08:	adc	r0, r0, r0
   18e0c:	subcs	r3, r3, r1, lsl #19
   18e10:	cmp	r3, r1, lsl #18
   18e14:	adc	r0, r0, r0
   18e18:	subcs	r3, r3, r1, lsl #18
   18e1c:	cmp	r3, r1, lsl #17
   18e20:	adc	r0, r0, r0
   18e24:	subcs	r3, r3, r1, lsl #17
   18e28:	cmp	r3, r1, lsl #16
   18e2c:	adc	r0, r0, r0
   18e30:	subcs	r3, r3, r1, lsl #16
   18e34:	cmp	r3, r1, lsl #15
   18e38:	adc	r0, r0, r0
   18e3c:	subcs	r3, r3, r1, lsl #15
   18e40:	cmp	r3, r1, lsl #14
   18e44:	adc	r0, r0, r0
   18e48:	subcs	r3, r3, r1, lsl #14
   18e4c:	cmp	r3, r1, lsl #13
   18e50:	adc	r0, r0, r0
   18e54:	subcs	r3, r3, r1, lsl #13
   18e58:	cmp	r3, r1, lsl #12
   18e5c:	adc	r0, r0, r0
   18e60:	subcs	r3, r3, r1, lsl #12
   18e64:	cmp	r3, r1, lsl #11
   18e68:	adc	r0, r0, r0
   18e6c:	subcs	r3, r3, r1, lsl #11
   18e70:	cmp	r3, r1, lsl #10
   18e74:	adc	r0, r0, r0
   18e78:	subcs	r3, r3, r1, lsl #10
   18e7c:	cmp	r3, r1, lsl #9
   18e80:	adc	r0, r0, r0
   18e84:	subcs	r3, r3, r1, lsl #9
   18e88:	cmp	r3, r1, lsl #8
   18e8c:	adc	r0, r0, r0
   18e90:	subcs	r3, r3, r1, lsl #8
   18e94:	cmp	r3, r1, lsl #7
   18e98:	adc	r0, r0, r0
   18e9c:	subcs	r3, r3, r1, lsl #7
   18ea0:	cmp	r3, r1, lsl #6
   18ea4:	adc	r0, r0, r0
   18ea8:	subcs	r3, r3, r1, lsl #6
   18eac:	cmp	r3, r1, lsl #5
   18eb0:	adc	r0, r0, r0
   18eb4:	subcs	r3, r3, r1, lsl #5
   18eb8:	cmp	r3, r1, lsl #4
   18ebc:	adc	r0, r0, r0
   18ec0:	subcs	r3, r3, r1, lsl #4
   18ec4:	cmp	r3, r1, lsl #3
   18ec8:	adc	r0, r0, r0
   18ecc:	subcs	r3, r3, r1, lsl #3
   18ed0:	cmp	r3, r1, lsl #2
   18ed4:	adc	r0, r0, r0
   18ed8:	subcs	r3, r3, r1, lsl #2
   18edc:	cmp	r3, r1, lsl #1
   18ee0:	adc	r0, r0, r0
   18ee4:	subcs	r3, r3, r1, lsl #1
   18ee8:	cmp	r3, r1
   18eec:	adc	r0, r0, r0
   18ef0:	subcs	r3, r3, r1
   18ef4:	cmp	ip, #0
   18ef8:	rsbmi	r0, r0, #0
   18efc:	bx	lr
   18f00:	teq	ip, r0
   18f04:	rsbmi	r0, r0, #0
   18f08:	bx	lr
   18f0c:	movcc	r0, #0
   18f10:	asreq	r0, ip, #31
   18f14:	orreq	r0, r0, #1
   18f18:	bx	lr
   18f1c:	clz	r2, r1
   18f20:	rsb	r2, r2, #31
   18f24:	cmp	ip, #0
   18f28:	lsr	r0, r3, r2
   18f2c:	rsbmi	r0, r0, #0
   18f30:	bx	lr
   18f34:	cmp	r0, #0
   18f38:	mvngt	r0, #-2147483648	; 0x80000000
   18f3c:	movlt	r0, #-2147483648	; 0x80000000
   18f40:	b	18fa0 <lchmod@@Base+0x3564>
   18f44:	cmp	r1, #0
   18f48:	beq	18f34 <lchmod@@Base+0x34f8>
   18f4c:	push	{r0, r1, lr}
   18f50:	bl	18d2c <lchmod@@Base+0x32f0>
   18f54:	pop	{r1, r2, lr}
   18f58:	mul	r3, r2, r0
   18f5c:	sub	r1, r1, r3
   18f60:	bx	lr
   18f64:	cmp	r3, #0
   18f68:	cmpeq	r2, #0
   18f6c:	bne	18f84 <lchmod@@Base+0x3548>
   18f70:	cmp	r1, #0
   18f74:	cmpeq	r0, #0
   18f78:	mvnne	r1, #0
   18f7c:	mvnne	r0, #0
   18f80:	b	18fa0 <lchmod@@Base+0x3564>
   18f84:	sub	sp, sp, #8
   18f88:	push	{sp, lr}
   18f8c:	bl	18fb0 <lchmod@@Base+0x3574>
   18f90:	ldr	lr, [sp, #4]
   18f94:	add	sp, sp, #8
   18f98:	pop	{r2, r3}
   18f9c:	bx	lr
   18fa0:	push	{r1, lr}
   18fa4:	mov	r0, #8
   18fa8:	bl	1148c <raise@plt>
   18fac:	pop	{r1, pc}
   18fb0:	cmp	r1, r3
   18fb4:	push	{r4, r5, r6, r7, r8, r9, lr}
   18fb8:	cmpeq	r0, r2
   18fbc:	mov	r4, r0
   18fc0:	mov	r5, r1
   18fc4:	ldr	r9, [sp, #28]
   18fc8:	movcc	r0, #0
   18fcc:	movcc	r1, #0
   18fd0:	bcc	190c8 <lchmod@@Base+0x368c>
   18fd4:	cmp	r3, #0
   18fd8:	clzeq	ip, r2
   18fdc:	clzne	ip, r3
   18fe0:	addeq	ip, ip, #32
   18fe4:	cmp	r5, #0
   18fe8:	clzeq	r1, r4
   18fec:	addeq	r1, r1, #32
   18ff0:	clzne	r1, r5
   18ff4:	sub	ip, ip, r1
   18ff8:	sub	lr, ip, #32
   18ffc:	lsl	r7, r3, ip
   19000:	rsb	r8, ip, #32
   19004:	orr	r7, r7, r2, lsl lr
   19008:	orr	r7, r7, r2, lsr r8
   1900c:	lsl	r6, r2, ip
   19010:	cmp	r5, r7
   19014:	cmpeq	r4, r6
   19018:	movcc	r0, #0
   1901c:	movcc	r1, #0
   19020:	bcc	1903c <lchmod@@Base+0x3600>
   19024:	mov	r3, #1
   19028:	subs	r4, r4, r6
   1902c:	lsl	r1, r3, lr
   19030:	lsl	r0, r3, ip
   19034:	orr	r1, r1, r3, lsr r8
   19038:	sbc	r5, r5, r7
   1903c:	cmp	ip, #0
   19040:	beq	190c8 <lchmod@@Base+0x368c>
   19044:	lsrs	r3, r7, #1
   19048:	rrx	r2, r6
   1904c:	mov	r6, ip
   19050:	b	19074 <lchmod@@Base+0x3638>
   19054:	subs	r4, r4, r2
   19058:	sbc	r5, r5, r3
   1905c:	adds	r4, r4, r4
   19060:	adc	r5, r5, r5
   19064:	adds	r4, r4, #1
   19068:	adc	r5, r5, #0
   1906c:	subs	r6, r6, #1
   19070:	beq	19090 <lchmod@@Base+0x3654>
   19074:	cmp	r5, r3
   19078:	cmpeq	r4, r2
   1907c:	bcs	19054 <lchmod@@Base+0x3618>
   19080:	adds	r4, r4, r4
   19084:	adc	r5, r5, r5
   19088:	subs	r6, r6, #1
   1908c:	bne	19074 <lchmod@@Base+0x3638>
   19090:	lsr	r6, r4, ip
   19094:	lsr	r7, r5, ip
   19098:	orr	r6, r6, r5, lsl r8
   1909c:	adds	r2, r0, r4
   190a0:	orr	r6, r6, r5, lsr lr
   190a4:	adc	r3, r1, r5
   190a8:	lsl	r1, r7, ip
   190ac:	orr	r1, r1, r6, lsl lr
   190b0:	lsl	r0, r6, ip
   190b4:	orr	r1, r1, r6, lsr r8
   190b8:	subs	r0, r2, r0
   190bc:	mov	r4, r6
   190c0:	mov	r5, r7
   190c4:	sbc	r1, r3, r1
   190c8:	cmp	r9, #0
   190cc:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   190d0:	strd	r4, [r9]
   190d4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   190d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   190dc:	mov	r7, r0
   190e0:	ldr	r6, [pc, #72]	; 19130 <lchmod@@Base+0x36f4>
   190e4:	ldr	r5, [pc, #72]	; 19134 <lchmod@@Base+0x36f8>
   190e8:	add	r6, pc, r6
   190ec:	add	r5, pc, r5
   190f0:	sub	r6, r6, r5
   190f4:	mov	r8, r1
   190f8:	mov	r9, r2
   190fc:	bl	1143c <fstatfs64@plt-0x20>
   19100:	asrs	r6, r6, #2
   19104:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19108:	mov	r4, #0
   1910c:	add	r4, r4, #1
   19110:	ldr	r3, [r5], #4
   19114:	mov	r2, r9
   19118:	mov	r1, r8
   1911c:	mov	r0, r7
   19120:	blx	r3
   19124:	cmp	r6, r4
   19128:	bne	1910c <lchmod@@Base+0x36d0>
   1912c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19130:	andeq	r0, r1, r8, lsl lr
   19134:	andeq	r0, r1, r0, lsl lr
   19138:	bx	lr
   1913c:	ldr	r3, [pc, #12]	; 19150 <lchmod@@Base+0x3714>
   19140:	mov	r1, #0
   19144:	add	r3, pc, r3
   19148:	ldr	r2, [r3]
   1914c:	b	116fc <__cxa_atexit@plt>
   19150:	andeq	r1, r1, r4, lsr r0
   19154:	mov	r2, r1
   19158:	mov	r1, r0
   1915c:	mov	r0, #3
   19160:	b	1181c <__xstat64@plt>
   19164:	mov	r2, r1
   19168:	mov	r1, r0
   1916c:	mov	r0, #3
   19170:	b	115a0 <__fxstat64@plt>
   19174:	mov	r2, r1
   19178:	mov	r1, r0
   1917c:	mov	r0, #3
   19180:	b	11858 <__lxstat64@plt>
   19184:	push	{lr}		; (str lr, [sp, #-4]!)
   19188:	sub	sp, sp, #12
   1918c:	str	r3, [sp]
   19190:	mov	r3, r2
   19194:	mov	r2, r1
   19198:	mov	r1, r0
   1919c:	mov	r0, #3
   191a0:	bl	11588 <__fxstatat64@plt>
   191a4:	add	sp, sp, #12
   191a8:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

000191ac <.fini>:
   191ac:	push	{r3, lr}
   191b0:	pop	{r3, pc}
