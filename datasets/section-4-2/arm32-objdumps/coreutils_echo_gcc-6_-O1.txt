
../repos/coreutils/src/echo:     file format elf32-littlearm


Disassembly of section .init:

00010adc <.init>:
   10adc:	push	{r3, lr}
   10ae0:	bl	10d54 <__assert_fail@plt+0x48>
   10ae4:	pop	{r3, pc}

Disassembly of section .plt:

00010ae8 <calloc@plt-0x14>:
   10ae8:	push	{lr}		; (str lr, [sp, #-4]!)
   10aec:	ldr	lr, [pc, #4]	; 10af8 <calloc@plt-0x4>
   10af0:	add	lr, pc, lr
   10af4:	ldr	pc, [lr, #8]!
   10af8:	andeq	r5, r1, r8, lsl #10

00010afc <calloc@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #86016	; 0x15000
   10b04:	ldr	pc, [ip, #1288]!	; 0x508

00010b08 <fputs_unlocked@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #86016	; 0x15000
   10b10:	ldr	pc, [ip, #1280]!	; 0x500

00010b14 <raise@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #86016	; 0x15000
   10b1c:	ldr	pc, [ip, #1272]!	; 0x4f8

00010b20 <strcmp@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #86016	; 0x15000
   10b28:	ldr	pc, [ip, #1264]!	; 0x4f0

00010b2c <fflush@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #86016	; 0x15000
   10b34:	ldr	pc, [ip, #1256]!	; 0x4e8

00010b38 <free@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #86016	; 0x15000
   10b40:	ldr	pc, [ip, #1248]!	; 0x4e0

00010b44 <_exit@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #86016	; 0x15000
   10b4c:	ldr	pc, [ip, #1240]!	; 0x4d8

00010b50 <memcpy@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #86016	; 0x15000
   10b58:	ldr	pc, [ip, #1232]!	; 0x4d0

00010b5c <mbsinit@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #86016	; 0x15000
   10b64:	ldr	pc, [ip, #1224]!	; 0x4c8

00010b68 <memcmp@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #86016	; 0x15000
   10b70:	ldr	pc, [ip, #1216]!	; 0x4c0

00010b74 <fputc_unlocked@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #86016	; 0x15000
   10b7c:	ldr	pc, [ip, #1208]!	; 0x4b8

00010b80 <dcgettext@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #86016	; 0x15000
   10b88:	ldr	pc, [ip, #1200]!	; 0x4b0

00010b8c <realloc@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #86016	; 0x15000
   10b94:	ldr	pc, [ip, #1192]!	; 0x4a8

00010b98 <textdomain@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #86016	; 0x15000
   10ba0:	ldr	pc, [ip, #1184]!	; 0x4a0

00010ba4 <iswprint@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #86016	; 0x15000
   10bac:	ldr	pc, [ip, #1176]!	; 0x498

00010bb0 <fwrite@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #86016	; 0x15000
   10bb8:	ldr	pc, [ip, #1168]!	; 0x490

00010bbc <lseek64@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #86016	; 0x15000
   10bc4:	ldr	pc, [ip, #1160]!	; 0x488

00010bc8 <__ctype_get_mb_cur_max@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #86016	; 0x15000
   10bd0:	ldr	pc, [ip, #1152]!	; 0x480

00010bd4 <__fpending@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #86016	; 0x15000
   10bdc:	ldr	pc, [ip, #1144]!	; 0x478

00010be0 <mbrtowc@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #86016	; 0x15000
   10be8:	ldr	pc, [ip, #1136]!	; 0x470

00010bec <error@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #86016	; 0x15000
   10bf4:	ldr	pc, [ip, #1128]!	; 0x468

00010bf8 <getenv@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #86016	; 0x15000
   10c00:	ldr	pc, [ip, #1120]!	; 0x460

00010c04 <malloc@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #86016	; 0x15000
   10c0c:	ldr	pc, [ip, #1112]!	; 0x458

00010c10 <__libc_start_main@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #86016	; 0x15000
   10c18:	ldr	pc, [ip, #1104]!	; 0x450

00010c1c <__freading@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #86016	; 0x15000
   10c24:	ldr	pc, [ip, #1096]!	; 0x448

00010c28 <__gmon_start__@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #86016	; 0x15000
   10c30:	ldr	pc, [ip, #1088]!	; 0x440

00010c34 <__ctype_b_loc@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #86016	; 0x15000
   10c3c:	ldr	pc, [ip, #1080]!	; 0x438

00010c40 <exit@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #86016	; 0x15000
   10c48:	ldr	pc, [ip, #1072]!	; 0x430

00010c4c <strlen@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #86016	; 0x15000
   10c54:	ldr	pc, [ip, #1064]!	; 0x428

00010c58 <__errno_location@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #86016	; 0x15000
   10c60:	ldr	pc, [ip, #1056]!	; 0x420

00010c64 <__cxa_atexit@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #86016	; 0x15000
   10c6c:	ldr	pc, [ip, #1048]!	; 0x418

00010c70 <memset@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #86016	; 0x15000
   10c78:	ldr	pc, [ip, #1040]!	; 0x410

00010c7c <__printf_chk@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #86016	; 0x15000
   10c84:	ldr	pc, [ip, #1032]!	; 0x408

00010c88 <fileno@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #86016	; 0x15000
   10c90:	ldr	pc, [ip, #1024]!	; 0x400

00010c94 <__fprintf_chk@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #86016	; 0x15000
   10c9c:	ldr	pc, [ip, #1016]!	; 0x3f8

00010ca0 <fclose@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #86016	; 0x15000
   10ca8:	ldr	pc, [ip, #1008]!	; 0x3f0

00010cac <fseeko64@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #86016	; 0x15000
   10cb4:	ldr	pc, [ip, #1000]!	; 0x3e8

00010cb8 <__overflow@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #86016	; 0x15000
   10cc0:	ldr	pc, [ip, #992]!	; 0x3e0

00010cc4 <setlocale@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #86016	; 0x15000
   10ccc:	ldr	pc, [ip, #984]!	; 0x3d8

00010cd0 <strrchr@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #86016	; 0x15000
   10cd8:	ldr	pc, [ip, #976]!	; 0x3d0

00010cdc <nl_langinfo@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #86016	; 0x15000
   10ce4:	ldr	pc, [ip, #968]!	; 0x3c8

00010ce8 <bindtextdomain@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #86016	; 0x15000
   10cf0:	ldr	pc, [ip, #960]!	; 0x3c0

00010cf4 <strncmp@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #86016	; 0x15000
   10cfc:	ldr	pc, [ip, #952]!	; 0x3b8

00010d00 <abort@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #86016	; 0x15000
   10d08:	ldr	pc, [ip, #944]!	; 0x3b0

00010d0c <__assert_fail@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #86016	; 0x15000
   10d14:	ldr	pc, [ip, #936]!	; 0x3a8

Disassembly of section .text:

00010d18 <.text>:
   10d18:	mov	fp, #0
   10d1c:	mov	lr, #0
   10d20:	pop	{r1}		; (ldr r1, [sp], #4)
   10d24:	mov	r2, sp
   10d28:	push	{r2}		; (str r2, [sp, #-4]!)
   10d2c:	push	{r0}		; (str r0, [sp, #-4]!)
   10d30:	ldr	ip, [pc, #16]	; 10d48 <__assert_fail@plt+0x3c>
   10d34:	push	{ip}		; (str ip, [sp, #-4]!)
   10d38:	ldr	r0, [pc, #12]	; 10d4c <__assert_fail@plt+0x40>
   10d3c:	ldr	r3, [pc, #12]	; 10d50 <__assert_fail@plt+0x44>
   10d40:	bl	10c10 <__libc_start_main@plt>
   10d44:	bl	10d00 <abort@plt>
   10d48:	andeq	r4, r1, r0, ror #21
   10d4c:	andeq	r1, r1, r4, asr #5
   10d50:	andeq	r4, r1, r0, lsl #21
   10d54:	ldr	r3, [pc, #20]	; 10d70 <__assert_fail@plt+0x64>
   10d58:	ldr	r2, [pc, #20]	; 10d74 <__assert_fail@plt+0x68>
   10d5c:	add	r3, pc, r3
   10d60:	ldr	r2, [r3, r2]
   10d64:	cmp	r2, #0
   10d68:	bxeq	lr
   10d6c:	b	10c28 <__gmon_start__@plt>
   10d70:	muleq	r1, ip, r2
   10d74:	andeq	r0, r0, r0, asr #1
   10d78:	ldr	r3, [pc, #28]	; 10d9c <__assert_fail@plt+0x90>
   10d7c:	ldr	r0, [pc, #28]	; 10da0 <__assert_fail@plt+0x94>
   10d80:	sub	r3, r3, r0
   10d84:	cmp	r3, #6
   10d88:	bxls	lr
   10d8c:	ldr	r3, [pc, #16]	; 10da4 <__assert_fail@plt+0x98>
   10d90:	cmp	r3, #0
   10d94:	bxeq	lr
   10d98:	bx	r3
   10d9c:	andeq	r6, r2, r7, lsl r1
   10da0:	andeq	r6, r2, r4, lsl r1
   10da4:	andeq	r0, r0, r0
   10da8:	ldr	r1, [pc, #36]	; 10dd4 <__assert_fail@plt+0xc8>
   10dac:	ldr	r0, [pc, #36]	; 10dd8 <__assert_fail@plt+0xcc>
   10db0:	sub	r1, r1, r0
   10db4:	asr	r1, r1, #2
   10db8:	add	r1, r1, r1, lsr #31
   10dbc:	asrs	r1, r1, #1
   10dc0:	bxeq	lr
   10dc4:	ldr	r3, [pc, #16]	; 10ddc <__assert_fail@plt+0xd0>
   10dc8:	cmp	r3, #0
   10dcc:	bxeq	lr
   10dd0:	bx	r3
   10dd4:	andeq	r6, r2, r4, lsl r1
   10dd8:	andeq	r6, r2, r4, lsl r1
   10ddc:	andeq	r0, r0, r0
   10de0:	push	{r4, lr}
   10de4:	ldr	r4, [pc, #24]	; 10e04 <__assert_fail@plt+0xf8>
   10de8:	ldrb	r3, [r4]
   10dec:	cmp	r3, #0
   10df0:	popne	{r4, pc}
   10df4:	bl	10d78 <__assert_fail@plt+0x6c>
   10df8:	mov	r3, #1
   10dfc:	strb	r3, [r4]
   10e00:	pop	{r4, pc}
   10e04:	andeq	r6, r2, r8, lsr #2
   10e08:	ldr	r0, [pc, #40]	; 10e38 <__assert_fail@plt+0x12c>
   10e0c:	ldr	r3, [r0]
   10e10:	cmp	r3, #0
   10e14:	bne	10e1c <__assert_fail@plt+0x110>
   10e18:	b	10da8 <__assert_fail@plt+0x9c>
   10e1c:	ldr	r3, [pc, #24]	; 10e3c <__assert_fail@plt+0x130>
   10e20:	cmp	r3, #0
   10e24:	beq	10e18 <__assert_fail@plt+0x10c>
   10e28:	push	{r4, lr}
   10e2c:	blx	r3
   10e30:	pop	{r4, lr}
   10e34:	b	10da8 <__assert_fail@plt+0x9c>
   10e38:	andeq	r5, r2, r4, lsl pc
   10e3c:	andeq	r0, r0, r0
   10e40:	sub	r3, r0, #65	; 0x41
   10e44:	cmp	r3, #37	; 0x25
   10e48:	ldrls	pc, [pc, r3, lsl #2]
   10e4c:	b	10ef0 <__assert_fail@plt+0x1e4>
   10e50:	andeq	r0, r1, r8, lsl pc
   10e54:	andeq	r0, r1, r8, ror #29
   10e58:	strdeq	r0, [r1], -r8
   10e5c:	andeq	r0, r1, r0, lsl #30
   10e60:	andeq	r0, r1, r8, lsl #30
   10e64:	andeq	r0, r1, r0, lsl pc
   10e68:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10e6c:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10e70:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10e74:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10e78:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10e7c:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10e80:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10e84:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10e88:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10e8c:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10e90:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10e94:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10e98:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10e9c:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10ea0:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10ea4:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10ea8:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10eac:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10eb0:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10eb4:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10eb8:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10ebc:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10ec0:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10ec4:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10ec8:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10ecc:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10ed0:	andeq	r0, r1, r8, lsl pc
   10ed4:	andeq	r0, r1, r8, ror #29
   10ed8:	strdeq	r0, [r1], -r8
   10edc:	andeq	r0, r1, r0, lsl #30
   10ee0:	andeq	r0, r1, r8, lsl #30
   10ee4:	andeq	r0, r1, r0, lsl pc
   10ee8:	mov	r0, #11
   10eec:	bx	lr
   10ef0:	sub	r0, r0, #48	; 0x30
   10ef4:	bx	lr
   10ef8:	mov	r0, #12
   10efc:	bx	lr
   10f00:	mov	r0, #13
   10f04:	bx	lr
   10f08:	mov	r0, #14
   10f0c:	bx	lr
   10f10:	mov	r0, #15
   10f14:	bx	lr
   10f18:	mov	r0, #10
   10f1c:	bx	lr
   10f20:	push	{lr}		; (str lr, [sp, #-4]!)
   10f24:	sub	sp, sp, #60	; 0x3c
   10f28:	cmp	r0, #0
   10f2c:	beq	10f44 <__assert_fail@plt+0x238>
   10f30:	ldr	r3, [pc, #804]	; 1125c <__assert_fail@plt+0x550>
   10f34:	mov	r2, #40	; 0x28
   10f38:	ldr	r1, [pc, #800]	; 11260 <__assert_fail@plt+0x554>
   10f3c:	ldr	r0, [pc, #800]	; 11264 <__assert_fail@plt+0x558>
   10f40:	bl	10d0c <__assert_fail@plt>
   10f44:	mov	r2, #5
   10f48:	ldr	r1, [pc, #792]	; 11268 <__assert_fail@plt+0x55c>
   10f4c:	mov	r0, #0
   10f50:	bl	10b80 <dcgettext@plt>
   10f54:	ldr	r3, [pc, #784]	; 1126c <__assert_fail@plt+0x560>
   10f58:	ldr	r2, [r3]
   10f5c:	mov	r3, r2
   10f60:	mov	r1, r0
   10f64:	mov	r0, #1
   10f68:	bl	10c7c <__printf_chk@plt>
   10f6c:	mov	r2, #5
   10f70:	ldr	r1, [pc, #760]	; 11270 <__assert_fail@plt+0x564>
   10f74:	mov	r0, #0
   10f78:	bl	10b80 <dcgettext@plt>
   10f7c:	ldr	r4, [pc, #752]	; 11274 <__assert_fail@plt+0x568>
   10f80:	ldr	r1, [r4]
   10f84:	bl	10b08 <fputs_unlocked@plt>
   10f88:	mov	r2, #5
   10f8c:	ldr	r1, [pc, #740]	; 11278 <__assert_fail@plt+0x56c>
   10f90:	mov	r0, #0
   10f94:	bl	10b80 <dcgettext@plt>
   10f98:	ldr	r1, [r4]
   10f9c:	bl	10b08 <fputs_unlocked@plt>
   10fa0:	mov	r2, #5
   10fa4:	ldr	r1, [pc, #720]	; 1127c <__assert_fail@plt+0x570>
   10fa8:	mov	r0, #0
   10fac:	bl	10b80 <dcgettext@plt>
   10fb0:	ldr	r1, [r4]
   10fb4:	bl	10b08 <fputs_unlocked@plt>
   10fb8:	mov	r2, #5
   10fbc:	ldr	r1, [pc, #700]	; 11280 <__assert_fail@plt+0x574>
   10fc0:	mov	r0, #0
   10fc4:	bl	10b80 <dcgettext@plt>
   10fc8:	ldr	r1, [r4]
   10fcc:	bl	10b08 <fputs_unlocked@plt>
   10fd0:	mov	r2, #5
   10fd4:	ldr	r1, [pc, #680]	; 11284 <__assert_fail@plt+0x578>
   10fd8:	mov	r0, #0
   10fdc:	bl	10b80 <dcgettext@plt>
   10fe0:	ldr	r1, [r4]
   10fe4:	bl	10b08 <fputs_unlocked@plt>
   10fe8:	mov	r2, #5
   10fec:	ldr	r1, [pc, #660]	; 11288 <__assert_fail@plt+0x57c>
   10ff0:	mov	r0, #0
   10ff4:	bl	10b80 <dcgettext@plt>
   10ff8:	ldr	r1, [r4]
   10ffc:	bl	10b08 <fputs_unlocked@plt>
   11000:	mov	r2, #5
   11004:	ldr	r1, [pc, #640]	; 1128c <__assert_fail@plt+0x580>
   11008:	mov	r0, #0
   1100c:	bl	10b80 <dcgettext@plt>
   11010:	ldr	r1, [r4]
   11014:	bl	10b08 <fputs_unlocked@plt>
   11018:	mov	r2, #5
   1101c:	ldr	r1, [pc, #620]	; 11290 <__assert_fail@plt+0x584>
   11020:	mov	r0, #0
   11024:	bl	10b80 <dcgettext@plt>
   11028:	ldr	r2, [pc, #612]	; 11294 <__assert_fail@plt+0x588>
   1102c:	mov	r1, r0
   11030:	mov	r0, #1
   11034:	bl	10c7c <__printf_chk@plt>
   11038:	mov	r2, #5
   1103c:	ldr	r1, [pc, #596]	; 11298 <__assert_fail@plt+0x58c>
   11040:	mov	r0, #0
   11044:	bl	10b80 <dcgettext@plt>
   11048:	ldr	r1, [r4]
   1104c:	bl	10b08 <fputs_unlocked@plt>
   11050:	mov	ip, sp
   11054:	ldr	lr, [pc, #576]	; 1129c <__assert_fail@plt+0x590>
   11058:	ldm	lr!, {r0, r1, r2, r3}
   1105c:	stmia	ip!, {r0, r1, r2, r3}
   11060:	ldm	lr!, {r0, r1, r2, r3}
   11064:	stmia	ip!, {r0, r1, r2, r3}
   11068:	ldm	lr!, {r0, r1, r2, r3}
   1106c:	stmia	ip!, {r0, r1, r2, r3}
   11070:	ldm	lr, {r0, r1}
   11074:	stm	ip, {r0, r1}
   11078:	ldr	r1, [sp]
   1107c:	cmp	r1, #0
   11080:	moveq	r4, sp
   11084:	beq	110ac <__assert_fail@plt+0x3a0>
   11088:	mov	r4, sp
   1108c:	ldr	r5, [pc, #512]	; 11294 <__assert_fail@plt+0x588>
   11090:	mov	r0, r5
   11094:	bl	10b20 <strcmp@plt>
   11098:	cmp	r0, #0
   1109c:	beq	110ac <__assert_fail@plt+0x3a0>
   110a0:	ldr	r1, [r4, #8]!
   110a4:	cmp	r1, #0
   110a8:	bne	11090 <__assert_fail@plt+0x384>
   110ac:	ldr	r4, [r4, #4]
   110b0:	cmp	r4, #0
   110b4:	beq	111cc <__assert_fail@plt+0x4c0>
   110b8:	mov	r2, #5
   110bc:	ldr	r1, [pc, #476]	; 112a0 <__assert_fail@plt+0x594>
   110c0:	mov	r0, #0
   110c4:	bl	10b80 <dcgettext@plt>
   110c8:	ldr	r3, [pc, #468]	; 112a4 <__assert_fail@plt+0x598>
   110cc:	ldr	r2, [pc, #468]	; 112a8 <__assert_fail@plt+0x59c>
   110d0:	mov	r1, r0
   110d4:	mov	r0, #1
   110d8:	bl	10c7c <__printf_chk@plt>
   110dc:	mov	r1, #0
   110e0:	mov	r0, #5
   110e4:	bl	10cc4 <setlocale@plt>
   110e8:	cmp	r0, #0
   110ec:	beq	11104 <__assert_fail@plt+0x3f8>
   110f0:	mov	r2, #3
   110f4:	ldr	r1, [pc, #432]	; 112ac <__assert_fail@plt+0x5a0>
   110f8:	bl	10cf4 <strncmp@plt>
   110fc:	cmp	r0, #0
   11100:	bne	11168 <__assert_fail@plt+0x45c>
   11104:	mov	r2, #5
   11108:	ldr	r1, [pc, #416]	; 112b0 <__assert_fail@plt+0x5a4>
   1110c:	mov	r0, #0
   11110:	bl	10b80 <dcgettext@plt>
   11114:	ldr	r5, [pc, #376]	; 11294 <__assert_fail@plt+0x588>
   11118:	mov	r3, r5
   1111c:	ldr	r2, [pc, #384]	; 112a4 <__assert_fail@plt+0x598>
   11120:	mov	r1, r0
   11124:	mov	r0, #1
   11128:	bl	10c7c <__printf_chk@plt>
   1112c:	mov	r2, #5
   11130:	ldr	r1, [pc, #380]	; 112b4 <__assert_fail@plt+0x5a8>
   11134:	mov	r0, #0
   11138:	bl	10b80 <dcgettext@plt>
   1113c:	mov	r1, r0
   11140:	cmp	r4, r5
   11144:	ldrne	r3, [pc, #364]	; 112b8 <__assert_fail@plt+0x5ac>
   11148:	ldreq	r4, [pc, #324]	; 11294 <__assert_fail@plt+0x588>
   1114c:	ldreq	r3, [pc, #360]	; 112bc <__assert_fail@plt+0x5b0>
   11150:	mov	r2, r4
   11154:	mov	r0, #1
   11158:	bl	10c7c <__printf_chk@plt>
   1115c:	mov	r0, #0
   11160:	bl	10c40 <exit@plt>
   11164:	ldr	r4, [pc, #296]	; 11294 <__assert_fail@plt+0x588>
   11168:	mov	r2, #5
   1116c:	ldr	r1, [pc, #332]	; 112c0 <__assert_fail@plt+0x5b4>
   11170:	mov	r0, #0
   11174:	bl	10b80 <dcgettext@plt>
   11178:	ldr	r3, [pc, #244]	; 11274 <__assert_fail@plt+0x568>
   1117c:	ldr	r1, [r3]
   11180:	bl	10b08 <fputs_unlocked@plt>
   11184:	b	11104 <__assert_fail@plt+0x3f8>
   11188:	mov	r2, #5
   1118c:	ldr	r1, [pc, #284]	; 112b0 <__assert_fail@plt+0x5a4>
   11190:	mov	r0, #0
   11194:	bl	10b80 <dcgettext@plt>
   11198:	ldr	r4, [pc, #244]	; 11294 <__assert_fail@plt+0x588>
   1119c:	mov	r3, r4
   111a0:	ldr	r2, [pc, #252]	; 112a4 <__assert_fail@plt+0x598>
   111a4:	mov	r1, r0
   111a8:	mov	r0, #1
   111ac:	bl	10c7c <__printf_chk@plt>
   111b0:	mov	r2, #5
   111b4:	ldr	r1, [pc, #248]	; 112b4 <__assert_fail@plt+0x5a8>
   111b8:	mov	r0, #0
   111bc:	bl	10b80 <dcgettext@plt>
   111c0:	mov	r1, r0
   111c4:	ldr	r3, [pc, #240]	; 112bc <__assert_fail@plt+0x5b0>
   111c8:	b	11150 <__assert_fail@plt+0x444>
   111cc:	mov	r2, #5
   111d0:	ldr	r1, [pc, #200]	; 112a0 <__assert_fail@plt+0x594>
   111d4:	mov	r0, #0
   111d8:	bl	10b80 <dcgettext@plt>
   111dc:	ldr	r3, [pc, #192]	; 112a4 <__assert_fail@plt+0x598>
   111e0:	ldr	r2, [pc, #192]	; 112a8 <__assert_fail@plt+0x59c>
   111e4:	mov	r1, r0
   111e8:	mov	r0, #1
   111ec:	bl	10c7c <__printf_chk@plt>
   111f0:	mov	r1, #0
   111f4:	mov	r0, #5
   111f8:	bl	10cc4 <setlocale@plt>
   111fc:	cmp	r0, #0
   11200:	beq	11188 <__assert_fail@plt+0x47c>
   11204:	mov	r2, #3
   11208:	ldr	r1, [pc, #156]	; 112ac <__assert_fail@plt+0x5a0>
   1120c:	bl	10cf4 <strncmp@plt>
   11210:	cmp	r0, #0
   11214:	bne	11164 <__assert_fail@plt+0x458>
   11218:	mov	r2, #5
   1121c:	ldr	r1, [pc, #140]	; 112b0 <__assert_fail@plt+0x5a4>
   11220:	mov	r0, #0
   11224:	bl	10b80 <dcgettext@plt>
   11228:	ldr	r4, [pc, #100]	; 11294 <__assert_fail@plt+0x588>
   1122c:	mov	r3, r4
   11230:	ldr	r2, [pc, #108]	; 112a4 <__assert_fail@plt+0x598>
   11234:	mov	r1, r0
   11238:	mov	r0, #1
   1123c:	bl	10c7c <__printf_chk@plt>
   11240:	mov	r2, #5
   11244:	ldr	r1, [pc, #104]	; 112b4 <__assert_fail@plt+0x5a8>
   11248:	mov	r0, #0
   1124c:	bl	10b80 <dcgettext@plt>
   11250:	mov	r1, r0
   11254:	ldr	r3, [pc, #96]	; 112bc <__assert_fail@plt+0x5b0>
   11258:	b	11150 <__assert_fail@plt+0x444>
   1125c:	andeq	r4, r1, r8, lsl #22
   11260:	andeq	r4, r1, r0, asr fp
   11264:	andeq	r4, r1, ip, asr fp
   11268:	andeq	r4, r1, r4, ror fp
   1126c:	andeq	r6, r2, r4, lsr r1
   11270:			; <UNDEFINED> instruction: 0x00014bb4
   11274:	andeq	r6, r2, r4, lsr #2
   11278:	andeq	r4, r1, r4, lsl ip
   1127c:	muleq	r1, r8, ip
   11280:	andeq	r4, r1, r8, asr #25
   11284:	andeq	r4, r1, r0, lsl #26
   11288:	andeq	r4, r1, r0, asr #26
   1128c:	andeq	r4, r1, r8, lsr #28
   11290:	muleq	r1, r8, lr
   11294:	andeq	r4, r1, r8, asr #22
   11298:	andeq	r4, r1, r8, asr pc
   1129c:	andeq	r4, r1, r0, lsl fp
   112a0:	andeq	r4, r1, r4, asr #31
   112a4:	ldrdeq	r4, [r1], -ip
   112a8:	andeq	r5, r1, r4
   112ac:	andeq	r5, r1, r4, lsl r0
   112b0:	andeq	r5, r1, r0, rrx
   112b4:	andeq	r5, r1, ip, ror r0
   112b8:	andeq	r4, r1, r0, asr #31
   112bc:	andeq	r5, r1, r0, lsl r1
   112c0:	andeq	r5, r1, r8, lsl r0
   112c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112c8:	sub	sp, sp, #28
   112cc:	mov	r8, r0
   112d0:	mov	r6, r1
   112d4:	ldr	r0, [pc, #1532]	; 118d8 <__assert_fail@plt+0xbcc>
   112d8:	bl	10bf8 <getenv@plt>
   112dc:	subs	r7, r0, #0
   112e0:	movne	r5, #1
   112e4:	moveq	r5, #0
   112e8:	beq	11308 <__assert_fail@plt+0x5fc>
   112ec:	cmp	r8, #1
   112f0:	ble	117c8 <__assert_fail@plt+0xabc>
   112f4:	ldr	r1, [pc, #1504]	; 118dc <__assert_fail@plt+0xbd0>
   112f8:	ldr	r0, [r6, #4]
   112fc:	bl	10b20 <strcmp@plt>
   11300:	cmp	r0, #0
   11304:	bne	117c8 <__assert_fail@plt+0xabc>
   11308:	ldr	r0, [r6]
   1130c:	bl	11a24 <__assert_fail@plt+0xd18>
   11310:	ldr	r1, [pc, #1480]	; 118e0 <__assert_fail@plt+0xbd4>
   11314:	mov	r0, #6
   11318:	bl	10cc4 <setlocale@plt>
   1131c:	ldr	r4, [pc, #1472]	; 118e4 <__assert_fail@plt+0xbd8>
   11320:	ldr	r1, [pc, #1472]	; 118e8 <__assert_fail@plt+0xbdc>
   11324:	mov	r0, r4
   11328:	bl	10ce8 <bindtextdomain@plt>
   1132c:	mov	r0, r4
   11330:	bl	10b98 <textdomain@plt>
   11334:	ldr	r0, [pc, #1456]	; 118ec <__assert_fail@plt+0xbe0>
   11338:	bl	14ae4 <__assert_fail@plt+0x3dd8>
   1133c:	cmp	r8, #2
   11340:	bne	11858 <__assert_fail@plt+0xb4c>
   11344:	ldr	r4, [r6, #4]
   11348:	ldr	r1, [pc, #1440]	; 118f0 <__assert_fail@plt+0xbe4>
   1134c:	mov	r0, r4
   11350:	bl	10b20 <strcmp@plt>
   11354:	cmp	r0, #0
   11358:	beq	113ac <__assert_fail@plt+0x6a0>
   1135c:	ldr	r1, [pc, #1424]	; 118f4 <__assert_fail@plt+0xbe8>
   11360:	mov	r0, r4
   11364:	bl	10b20 <strcmp@plt>
   11368:	cmp	r0, #0
   1136c:	subne	r8, r8, #1
   11370:	addne	r4, r6, #4
   11374:	beq	113b0 <__assert_fail@plt+0x6a4>
   11378:	ldr	r0, [r6, #4]
   1137c:	ldrb	r3, [r0]
   11380:	cmp	r3, #45	; 0x2d
   11384:	bne	118c4 <__assert_fail@plt+0xbb8>
   11388:	mov	ip, #0
   1138c:	mov	fp, #1
   11390:	mov	lr, ip
   11394:	add	r2, r0, #1
   11398:	ldrb	r3, [r0, #1]
   1139c:	cmp	r3, #0
   113a0:	beq	11410 <__assert_fail@plt+0x704>
   113a4:	mov	r1, #0
   113a8:	b	113f8 <__assert_fail@plt+0x6ec>
   113ac:	bl	10f20 <__assert_fail@plt+0x214>
   113b0:	mov	r3, #0
   113b4:	str	r3, [sp, #8]
   113b8:	ldr	r3, [pc, #1336]	; 118f8 <__assert_fail@plt+0xbec>
   113bc:	str	r3, [sp, #4]
   113c0:	ldr	r3, [pc, #1332]	; 118fc <__assert_fail@plt+0xbf0>
   113c4:	str	r3, [sp]
   113c8:	ldr	r3, [pc, #1328]	; 11900 <__assert_fail@plt+0xbf4>
   113cc:	ldr	r3, [r3]
   113d0:	ldr	r2, [pc, #1324]	; 11904 <__assert_fail@plt+0xbf8>
   113d4:	ldr	r1, [pc, #1324]	; 11908 <__assert_fail@plt+0xbfc>
   113d8:	ldr	r0, [pc, #1324]	; 1190c <__assert_fail@plt+0xc00>
   113dc:	ldr	r0, [r0]
   113e0:	bl	13a40 <__assert_fail@plt+0x2d34>
   113e4:	b	1184c <__assert_fail@plt+0xb40>
   113e8:	add	r1, r1, #1
   113ec:	ldrb	r3, [r2, #1]!
   113f0:	cmp	r3, #0
   113f4:	beq	11438 <__assert_fail@plt+0x72c>
   113f8:	cmp	r3, #101	; 0x65
   113fc:	beq	113e8 <__assert_fail@plt+0x6dc>
   11400:	cmp	r3, #110	; 0x6e
   11404:	beq	113e8 <__assert_fail@plt+0x6dc>
   11408:	cmp	r3, #69	; 0x45
   1140c:	beq	113e8 <__assert_fail@plt+0x6dc>
   11410:	orr	r5, ip, r5
   11414:	tst	r5, #255	; 0xff
   11418:	beq	11874 <__assert_fail@plt+0xb68>
   1141c:	cmp	r8, #0
   11420:	ble	1181c <__assert_fail@plt+0xb10>
   11424:	sub	sl, r4, #4
   11428:	ldr	r7, [pc, #1244]	; 1190c <__assert_fail@plt+0xc00>
   1142c:	mov	r3, #92	; 0x5c
   11430:	str	r3, [sp, #16]
   11434:	b	117a4 <__assert_fail@plt+0xa98>
   11438:	cmp	r1, #0
   1143c:	beq	11410 <__assert_fail@plt+0x704>
   11440:	mov	r2, r0
   11444:	ldrb	r3, [r2, #1]!
   11448:	cmp	r3, #0
   1144c:	beq	11474 <__assert_fail@plt+0x768>
   11450:	cmp	r3, #101	; 0x65
   11454:	moveq	ip, #1
   11458:	beq	11444 <__assert_fail@plt+0x738>
   1145c:	cmp	r3, #110	; 0x6e
   11460:	moveq	fp, lr
   11464:	beq	11444 <__assert_fail@plt+0x738>
   11468:	cmp	r3, #69	; 0x45
   1146c:	moveq	ip, #0
   11470:	b	11444 <__assert_fail@plt+0x738>
   11474:	add	r4, r4, #4
   11478:	subs	r8, r8, #1
   1147c:	beq	11810 <__assert_fail@plt+0xb04>
   11480:	ldr	r0, [r4]
   11484:	ldrb	r3, [r0]
   11488:	cmp	r3, #45	; 0x2d
   1148c:	beq	11394 <__assert_fail@plt+0x688>
   11490:	orr	ip, ip, r5
   11494:	tst	ip, #255	; 0xff
   11498:	bne	11424 <__assert_fail@plt+0x718>
   1149c:	b	11874 <__assert_fail@plt+0xb68>
   114a0:	mov	r1, #7
   114a4:	b	115d4 <__assert_fail@plt+0x8c8>
   114a8:	mov	r1, #8
   114ac:	b	115d4 <__assert_fail@plt+0x8c8>
   114b0:	mov	r1, #27
   114b4:	b	115d4 <__assert_fail@plt+0x8c8>
   114b8:	mov	r1, #12
   114bc:	b	115d4 <__assert_fail@plt+0x8c8>
   114c0:	mov	r1, #10
   114c4:	b	115d4 <__assert_fail@plt+0x8c8>
   114c8:	mov	r1, r9
   114cc:	b	115d4 <__assert_fail@plt+0x8c8>
   114d0:	mov	r1, #9
   114d4:	b	115d4 <__assert_fail@plt+0x8c8>
   114d8:	mov	r1, #11
   114dc:	b	115d4 <__assert_fail@plt+0x8c8>
   114e0:	ldrb	r3, [r5, #2]
   114e4:	str	r3, [sp, #20]
   114e8:	bl	10c34 <__ctype_b_loc@plt>
   114ec:	ldr	r2, [r0]
   114f0:	ldr	r0, [sp, #20]
   114f4:	lsl	r3, r0, #1
   114f8:	str	r2, [sp, #20]
   114fc:	ldrh	r3, [r2, r3]
   11500:	tst	r3, #4096	; 0x1000
   11504:	beq	115ac <__assert_fail@plt+0x8a0>
   11508:	bl	10e40 <__assert_fail@plt+0x134>
   1150c:	uxtb	r1, r0
   11510:	ldrb	r0, [r5, #3]
   11514:	lsl	r3, r0, #1
   11518:	ldr	r2, [sp, #20]
   1151c:	ldrh	r3, [r2, r3]
   11520:	tst	r3, #4096	; 0x1000
   11524:	addeq	r4, r5, #3
   11528:	beq	115d4 <__assert_fail@plt+0x8c8>
   1152c:	add	r4, r5, #4
   11530:	lsl	r1, r1, #4
   11534:	uxtb	r5, r1
   11538:	bl	10e40 <__assert_fail@plt+0x134>
   1153c:	add	r1, r5, r0
   11540:	uxtb	r1, r1
   11544:	b	115d4 <__assert_fail@plt+0x8c8>
   11548:	ldrb	r6, [r5, #2]
   1154c:	sub	r3, r6, #48	; 0x30
   11550:	uxtb	r3, r3
   11554:	cmp	r3, #7
   11558:	movhi	r1, #0
   1155c:	bhi	115d4 <__assert_fail@plt+0x8c8>
   11560:	add	r4, r5, #3
   11564:	sub	r1, r6, #48	; 0x30
   11568:	uxtb	r1, r1
   1156c:	ldrb	r3, [r4]
   11570:	sub	r3, r3, #48	; 0x30
   11574:	uxtb	r3, r3
   11578:	cmp	r3, #7
   1157c:	bhi	115d4 <__assert_fail@plt+0x8c8>
   11580:	add	r1, r3, r1, lsl #3
   11584:	and	r1, r1, #255	; 0xff
   11588:	ldrb	r3, [r4, #1]
   1158c:	sub	r3, r3, #48	; 0x30
   11590:	uxtb	r3, r3
   11594:	cmp	r3, #7
   11598:	addhi	r4, r4, #1
   1159c:	addls	r4, r4, #2
   115a0:	addls	r1, r3, r1, lsl #3
   115a4:	andls	r1, r1, #255	; 0xff
   115a8:	b	115d4 <__assert_fail@plt+0x8c8>
   115ac:	ldr	r0, [r7]
   115b0:	ldr	r3, [r0, #20]
   115b4:	ldr	r2, [r0, #24]
   115b8:	cmp	r2, r3
   115bc:	bls	11754 <__assert_fail@plt+0xa48>
   115c0:	add	r2, r3, #1
   115c4:	str	r2, [r0, #20]
   115c8:	mov	r2, #92	; 0x5c
   115cc:	strb	r2, [r3]
   115d0:	mov	r1, r6
   115d4:	ldr	r0, [r7]
   115d8:	ldr	r3, [r0, #20]
   115dc:	ldr	r2, [r0, #24]
   115e0:	cmp	r3, r2
   115e4:	addcc	r2, r3, #1
   115e8:	strcc	r2, [r0, #20]
   115ec:	strbcc	r1, [r3]
   115f0:	bcs	1176c <__assert_fail@plt+0xa60>
   115f4:	mov	r5, r4
   115f8:	add	r4, r5, #1
   115fc:	ldrb	r1, [r5]
   11600:	cmp	r1, #0
   11604:	beq	11774 <__assert_fail@plt+0xa68>
   11608:	cmp	r1, #92	; 0x5c
   1160c:	bne	115d4 <__assert_fail@plt+0x8c8>
   11610:	ldrb	r6, [r5, #1]
   11614:	cmp	r6, #0
   11618:	beq	115d4 <__assert_fail@plt+0x8c8>
   1161c:	add	r4, r5, #2
   11620:	sub	r3, r6, #48	; 0x30
   11624:	cmp	r3, #72	; 0x48
   11628:	ldrls	pc, [pc, r3, lsl #2]
   1162c:	b	115ac <__assert_fail@plt+0x8a0>
   11630:	andeq	r1, r1, r8, asr #10
   11634:	andeq	r1, r1, r4, ror #10
   11638:	andeq	r1, r1, r4, ror #10
   1163c:	andeq	r1, r1, r4, ror #10
   11640:	andeq	r1, r1, r4, ror #10
   11644:	andeq	r1, r1, r4, ror #10
   11648:	andeq	r1, r1, r4, ror #10
   1164c:	andeq	r1, r1, r4, ror #10
   11650:	andeq	r1, r1, ip, lsr #11
   11654:	andeq	r1, r1, ip, lsr #11
   11658:	andeq	r1, r1, ip, lsr #11
   1165c:	andeq	r1, r1, ip, lsr #11
   11660:	andeq	r1, r1, ip, lsr #11
   11664:	andeq	r1, r1, ip, lsr #11
   11668:	andeq	r1, r1, ip, lsr #11
   1166c:	andeq	r1, r1, ip, lsr #11
   11670:	andeq	r1, r1, ip, lsr #11
   11674:	andeq	r1, r1, ip, lsr #11
   11678:	andeq	r1, r1, ip, lsr #11
   1167c:	andeq	r1, r1, ip, lsr #11
   11680:	andeq	r1, r1, ip, lsr #11
   11684:	andeq	r1, r1, ip, lsr #11
   11688:	andeq	r1, r1, ip, lsr #11
   1168c:	andeq	r1, r1, ip, lsr #11
   11690:	andeq	r1, r1, ip, lsr #11
   11694:	andeq	r1, r1, ip, lsr #11
   11698:	andeq	r1, r1, ip, lsr #11
   1169c:	andeq	r1, r1, ip, lsr #11
   116a0:	andeq	r1, r1, ip, lsr #11
   116a4:	andeq	r1, r1, ip, lsr #11
   116a8:	andeq	r1, r1, ip, lsr #11
   116ac:	andeq	r1, r1, ip, lsr #11
   116b0:	andeq	r1, r1, ip, lsr #11
   116b4:	andeq	r1, r1, ip, lsr #11
   116b8:	andeq	r1, r1, ip, lsr #11
   116bc:	andeq	r1, r1, ip, lsr #11
   116c0:	andeq	r1, r1, ip, lsr #11
   116c4:	andeq	r1, r1, ip, lsr #11
   116c8:	andeq	r1, r1, ip, lsr #11
   116cc:	andeq	r1, r1, ip, lsr #11
   116d0:	andeq	r1, r1, ip, lsr #11
   116d4:	andeq	r1, r1, ip, lsr #11
   116d8:	andeq	r1, r1, ip, lsr #11
   116dc:	andeq	r1, r1, ip, lsr #11
   116e0:	andeq	r1, r1, r4, ror #14
   116e4:	andeq	r1, r1, ip, lsr #11
   116e8:	andeq	r1, r1, ip, lsr #11
   116ec:	andeq	r1, r1, ip, lsr #11
   116f0:	andeq	r1, r1, ip, lsr #11
   116f4:	andeq	r1, r1, r0, lsr #9
   116f8:	andeq	r1, r1, r8, lsr #9
   116fc:	andeq	r1, r1, ip, asr #16
   11700:	andeq	r1, r1, ip, lsr #11
   11704:			; <UNDEFINED> instruction: 0x000114b0
   11708:			; <UNDEFINED> instruction: 0x000114b8
   1170c:	andeq	r1, r1, ip, lsr #11
   11710:	andeq	r1, r1, ip, lsr #11
   11714:	andeq	r1, r1, ip, lsr #11
   11718:	andeq	r1, r1, ip, lsr #11
   1171c:	andeq	r1, r1, ip, lsr #11
   11720:	andeq	r1, r1, ip, lsr #11
   11724:	andeq	r1, r1, ip, lsr #11
   11728:	andeq	r1, r1, r0, asr #9
   1172c:	andeq	r1, r1, ip, lsr #11
   11730:	andeq	r1, r1, ip, lsr #11
   11734:	andeq	r1, r1, ip, lsr #11
   11738:	andeq	r1, r1, r8, asr #9
   1173c:	andeq	r1, r1, ip, lsr #11
   11740:	ldrdeq	r1, [r1], -r0
   11744:	andeq	r1, r1, ip, lsr #11
   11748:	ldrdeq	r1, [r1], -r8
   1174c:	andeq	r1, r1, ip, lsr #11
   11750:	andeq	r1, r1, r0, ror #9
   11754:	ldr	r1, [sp, #16]
   11758:	bl	10cb8 <__overflow@plt>
   1175c:	mov	r1, r6
   11760:	b	115d4 <__assert_fail@plt+0x8c8>
   11764:	ldr	r1, [sp, #16]
   11768:	b	115d4 <__assert_fail@plt+0x8c8>
   1176c:	bl	10cb8 <__overflow@plt>
   11770:	b	115f4 <__assert_fail@plt+0x8e8>
   11774:	sub	r8, r8, #1
   11778:	cmp	r8, #0
   1177c:	ble	1181c <__assert_fail@plt+0xb10>
   11780:	ldr	r0, [r7]
   11784:	ldr	r3, [r0, #20]
   11788:	ldr	r2, [r0, #24]
   1178c:	cmp	r3, r2
   11790:	addcc	r2, r3, #1
   11794:	strcc	r2, [r0, #20]
   11798:	movcc	r2, #32
   1179c:	strbcc	r2, [r3]
   117a0:	bcs	117b0 <__assert_fail@plt+0xaa4>
   117a4:	ldr	r5, [sl, #4]!
   117a8:	mov	r9, #13
   117ac:	b	115f8 <__assert_fail@plt+0x8ec>
   117b0:	mov	r1, #32
   117b4:	bl	10cb8 <__overflow@plt>
   117b8:	b	117a4 <__assert_fail@plt+0xa98>
   117bc:	mov	r1, #10
   117c0:	bl	10cb8 <__overflow@plt>
   117c4:	b	1184c <__assert_fail@plt+0xb40>
   117c8:	mov	r4, r6
   117cc:	ldr	r0, [r4], #4
   117d0:	bl	11a24 <__assert_fail@plt+0xd18>
   117d4:	ldr	r1, [pc, #260]	; 118e0 <__assert_fail@plt+0xbd4>
   117d8:	mov	r0, #6
   117dc:	bl	10cc4 <setlocale@plt>
   117e0:	ldr	r6, [pc, #252]	; 118e4 <__assert_fail@plt+0xbd8>
   117e4:	ldr	r1, [pc, #252]	; 118e8 <__assert_fail@plt+0xbdc>
   117e8:	mov	r0, r6
   117ec:	bl	10ce8 <bindtextdomain@plt>
   117f0:	mov	r0, r6
   117f4:	bl	10b98 <textdomain@plt>
   117f8:	ldr	r0, [pc, #236]	; 118ec <__assert_fail@plt+0xbe0>
   117fc:	bl	14ae4 <__assert_fail@plt+0x3dd8>
   11800:	sub	r8, r8, #1
   11804:	mov	ip, #0
   11808:	mov	fp, #1
   1180c:	b	11410 <__assert_fail@plt+0x704>
   11810:	orr	ip, ip, r5
   11814:	tst	ip, #255	; 0xff
   11818:	beq	11874 <__assert_fail@plt+0xb68>
   1181c:	cmp	fp, #0
   11820:	beq	1184c <__assert_fail@plt+0xb40>
   11824:	ldr	r3, [pc, #224]	; 1190c <__assert_fail@plt+0xc00>
   11828:	ldr	r0, [r3]
   1182c:	ldr	r3, [r0, #20]
   11830:	ldr	r2, [r0, #24]
   11834:	cmp	r3, r2
   11838:	addcc	r2, r3, #1
   1183c:	strcc	r2, [r0, #20]
   11840:	movcc	r2, #10
   11844:	strbcc	r2, [r3]
   11848:	bcs	117bc <__assert_fail@plt+0xab0>
   1184c:	mov	r0, #0
   11850:	add	sp, sp, #28
   11854:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11858:	sub	r8, r8, #1
   1185c:	add	r4, r6, #4
   11860:	cmp	r8, #0
   11864:	bgt	11378 <__assert_fail@plt+0x66c>
   11868:	cmp	r7, #0
   1186c:	moveq	fp, #1
   11870:	bne	11824 <__assert_fail@plt+0xb18>
   11874:	cmp	r8, #0
   11878:	ble	1181c <__assert_fail@plt+0xb10>
   1187c:	ldr	r5, [pc, #136]	; 1190c <__assert_fail@plt+0xc00>
   11880:	mov	r6, #32
   11884:	ldr	r1, [r5]
   11888:	ldr	r0, [r4], #4
   1188c:	bl	10b08 <fputs_unlocked@plt>
   11890:	subs	r8, r8, #1
   11894:	beq	1181c <__assert_fail@plt+0xb10>
   11898:	ldr	r0, [r5]
   1189c:	ldr	r3, [r0, #20]
   118a0:	ldr	r2, [r0, #24]
   118a4:	cmp	r3, r2
   118a8:	addcc	r2, r3, #1
   118ac:	strcc	r2, [r0, #20]
   118b0:	strbcc	r6, [r3]
   118b4:	bcc	11884 <__assert_fail@plt+0xb78>
   118b8:	mov	r1, r6
   118bc:	bl	10cb8 <__overflow@plt>
   118c0:	b	11884 <__assert_fail@plt+0xb78>
   118c4:	cmp	r7, #0
   118c8:	moveq	fp, #1
   118cc:	beq	1187c <__assert_fail@plt+0xb70>
   118d0:	mov	fp, #1
   118d4:	b	11424 <__assert_fail@plt+0x718>
   118d8:	strheq	r5, [r1], -r0
   118dc:	andeq	r5, r1, r0, asr #1
   118e0:	andeq	r4, r1, r0, asr #31
   118e4:	andeq	r5, r1, r8
   118e8:	andeq	r5, r1, r4, asr #1
   118ec:	andeq	r1, r1, r0, lsr r9
   118f0:	ldrdeq	r5, [r1], -ip
   118f4:	andeq	r5, r1, r4, ror #1
   118f8:	strdeq	r5, [r1], -r0
   118fc:	strdeq	r5, [r1], -ip
   11900:	andeq	r6, r2, ip, asr #1
   11904:	andeq	r5, r1, r4
   11908:	andeq	r4, r1, r8, asr #22
   1190c:	andeq	r6, r2, r4, lsr #2
   11910:	ldr	r3, [pc, #4]	; 1191c <__assert_fail@plt+0xc10>
   11914:	str	r0, [r3]
   11918:	bx	lr
   1191c:	andeq	r6, r2, ip, lsr #2
   11920:	ldr	r3, [pc, #4]	; 1192c <__assert_fail@plt+0xc20>
   11924:	strb	r0, [r3, #4]
   11928:	bx	lr
   1192c:	andeq	r6, r2, ip, lsr #2
   11930:	push	{r4, r5, r6, lr}
   11934:	sub	sp, sp, #8
   11938:	ldr	r3, [pc, #200]	; 11a08 <__assert_fail@plt+0xcfc>
   1193c:	ldr	r0, [r3]
   11940:	bl	141c0 <__assert_fail@plt+0x34b4>
   11944:	cmp	r0, #0
   11948:	beq	1196c <__assert_fail@plt+0xc60>
   1194c:	ldr	r3, [pc, #184]	; 11a0c <__assert_fail@plt+0xd00>
   11950:	ldrb	r3, [r3, #4]
   11954:	cmp	r3, #0
   11958:	beq	11988 <__assert_fail@plt+0xc7c>
   1195c:	bl	10c58 <__errno_location@plt>
   11960:	ldr	r3, [r0]
   11964:	cmp	r3, #32
   11968:	bne	11988 <__assert_fail@plt+0xc7c>
   1196c:	ldr	r3, [pc, #156]	; 11a10 <__assert_fail@plt+0xd04>
   11970:	ldr	r0, [r3]
   11974:	bl	141c0 <__assert_fail@plt+0x34b4>
   11978:	cmp	r0, #0
   1197c:	bne	119fc <__assert_fail@plt+0xcf0>
   11980:	add	sp, sp, #8
   11984:	pop	{r4, r5, r6, pc}
   11988:	mov	r2, #5
   1198c:	ldr	r1, [pc, #128]	; 11a14 <__assert_fail@plt+0xd08>
   11990:	mov	r0, #0
   11994:	bl	10b80 <dcgettext@plt>
   11998:	mov	r4, r0
   1199c:	ldr	r3, [pc, #104]	; 11a0c <__assert_fail@plt+0xd00>
   119a0:	ldr	r5, [r3]
   119a4:	cmp	r5, #0
   119a8:	beq	119e0 <__assert_fail@plt+0xcd4>
   119ac:	bl	10c58 <__errno_location@plt>
   119b0:	ldr	r6, [r0]
   119b4:	mov	r0, r5
   119b8:	bl	133ec <__assert_fail@plt+0x26e0>
   119bc:	str	r4, [sp]
   119c0:	mov	r3, r0
   119c4:	ldr	r2, [pc, #76]	; 11a18 <__assert_fail@plt+0xd0c>
   119c8:	mov	r1, r6
   119cc:	mov	r0, #0
   119d0:	bl	10bec <error@plt>
   119d4:	ldr	r3, [pc, #64]	; 11a1c <__assert_fail@plt+0xd10>
   119d8:	ldr	r0, [r3]
   119dc:	bl	10b44 <_exit@plt>
   119e0:	bl	10c58 <__errno_location@plt>
   119e4:	mov	r3, r4
   119e8:	ldr	r2, [pc, #48]	; 11a20 <__assert_fail@plt+0xd14>
   119ec:	ldr	r1, [r0]
   119f0:	mov	r0, #0
   119f4:	bl	10bec <error@plt>
   119f8:	b	119d4 <__assert_fail@plt+0xcc8>
   119fc:	ldr	r3, [pc, #24]	; 11a1c <__assert_fail@plt+0xd10>
   11a00:	ldr	r0, [r3]
   11a04:	bl	10b44 <_exit@plt>
   11a08:	andeq	r6, r2, r4, lsr #2
   11a0c:	andeq	r6, r2, ip, lsr #2
   11a10:	andeq	r6, r2, r0, lsr #2
   11a14:	andeq	r5, r1, r4, lsl #3
   11a18:	muleq	r1, r0, r1
   11a1c:	ldrdeq	r6, [r2], -r0
   11a20:	muleq	r1, r4, r1
   11a24:	push	{r4, r5, r6, lr}
   11a28:	subs	r4, r0, #0
   11a2c:	beq	11aa4 <__assert_fail@plt+0xd98>
   11a30:	mov	r1, #47	; 0x2f
   11a34:	mov	r0, r4
   11a38:	bl	10cd0 <strrchr@plt>
   11a3c:	cmp	r0, #0
   11a40:	addne	r5, r0, #1
   11a44:	moveq	r5, r4
   11a48:	sub	r3, r5, r4
   11a4c:	cmp	r3, #6
   11a50:	ble	11a90 <__assert_fail@plt+0xd84>
   11a54:	mov	r2, #7
   11a58:	ldr	r1, [pc, #96]	; 11ac0 <__assert_fail@plt+0xdb4>
   11a5c:	sub	r0, r5, #7
   11a60:	bl	10cf4 <strncmp@plt>
   11a64:	cmp	r0, #0
   11a68:	bne	11a90 <__assert_fail@plt+0xd84>
   11a6c:	mov	r2, #3
   11a70:	ldr	r1, [pc, #76]	; 11ac4 <__assert_fail@plt+0xdb8>
   11a74:	mov	r0, r5
   11a78:	bl	10cf4 <strncmp@plt>
   11a7c:	cmp	r0, #0
   11a80:	addeq	r4, r5, #3
   11a84:	ldreq	r3, [pc, #60]	; 11ac8 <__assert_fail@plt+0xdbc>
   11a88:	streq	r4, [r3]
   11a8c:	movne	r4, r5
   11a90:	ldr	r3, [pc, #52]	; 11acc <__assert_fail@plt+0xdc0>
   11a94:	str	r4, [r3]
   11a98:	ldr	r3, [pc, #48]	; 11ad0 <__assert_fail@plt+0xdc4>
   11a9c:	str	r4, [r3]
   11aa0:	pop	{r4, r5, r6, pc}
   11aa4:	ldr	r3, [pc, #40]	; 11ad4 <__assert_fail@plt+0xdc8>
   11aa8:	ldr	r3, [r3]
   11aac:	mov	r2, #55	; 0x37
   11ab0:	mov	r1, #1
   11ab4:	ldr	r0, [pc, #28]	; 11ad8 <__assert_fail@plt+0xdcc>
   11ab8:	bl	10bb0 <fwrite@plt>
   11abc:	bl	10d00 <abort@plt>
   11ac0:	ldrdeq	r5, [r1], -r0
   11ac4:	ldrdeq	r5, [r1], -r8
   11ac8:	andeq	r6, r2, r8, lsl r1
   11acc:	andeq	r6, r2, r4, lsr r1
   11ad0:	andeq	r6, r2, ip, lsl r1
   11ad4:	andeq	r6, r2, r0, lsr #2
   11ad8:	muleq	r1, r8, r1
   11adc:	push	{r4, r5, r6, lr}
   11ae0:	mov	r5, r0
   11ae4:	mov	r4, r1
   11ae8:	mov	r2, #48	; 0x30
   11aec:	mov	r1, #0
   11af0:	bl	10c70 <memset@plt>
   11af4:	cmp	r4, #10
   11af8:	beq	11b08 <__assert_fail@plt+0xdfc>
   11afc:	str	r4, [r5]
   11b00:	mov	r0, r5
   11b04:	pop	{r4, r5, r6, pc}
   11b08:	bl	10d00 <abort@plt>
   11b0c:	push	{r4, r5, r6, lr}
   11b10:	mov	r4, r0
   11b14:	mov	r5, r1
   11b18:	mov	r2, #5
   11b1c:	mov	r1, r0
   11b20:	mov	r0, #0
   11b24:	bl	10b80 <dcgettext@plt>
   11b28:	cmp	r4, r0
   11b2c:	popne	{r4, r5, r6, pc}
   11b30:	bl	14444 <__assert_fail@plt+0x3738>
   11b34:	ldrb	r3, [r0]
   11b38:	bic	r3, r3, #32
   11b3c:	cmp	r3, #85	; 0x55
   11b40:	beq	11bbc <__assert_fail@plt+0xeb0>
   11b44:	cmp	r3, #71	; 0x47
   11b48:	bne	11c18 <__assert_fail@plt+0xf0c>
   11b4c:	ldrb	r3, [r0, #1]
   11b50:	bic	r3, r3, #32
   11b54:	cmp	r3, #66	; 0x42
   11b58:	bne	11c18 <__assert_fail@plt+0xf0c>
   11b5c:	ldrb	r3, [r0, #2]
   11b60:	cmp	r3, #49	; 0x31
   11b64:	bne	11c18 <__assert_fail@plt+0xf0c>
   11b68:	ldrb	r3, [r0, #3]
   11b6c:	cmp	r3, #56	; 0x38
   11b70:	bne	11c18 <__assert_fail@plt+0xf0c>
   11b74:	ldrb	r3, [r0, #4]
   11b78:	cmp	r3, #48	; 0x30
   11b7c:	bne	11c18 <__assert_fail@plt+0xf0c>
   11b80:	ldrb	r3, [r0, #5]
   11b84:	cmp	r3, #51	; 0x33
   11b88:	bne	11c18 <__assert_fail@plt+0xf0c>
   11b8c:	ldrb	r3, [r0, #6]
   11b90:	cmp	r3, #48	; 0x30
   11b94:	bne	11c18 <__assert_fail@plt+0xf0c>
   11b98:	ldrb	r3, [r0, #7]
   11b9c:	cmp	r3, #0
   11ba0:	bne	11c18 <__assert_fail@plt+0xf0c>
   11ba4:	ldrb	r2, [r4]
   11ba8:	ldr	r3, [pc, #124]	; 11c2c <__assert_fail@plt+0xf20>
   11bac:	ldr	r0, [pc, #124]	; 11c30 <__assert_fail@plt+0xf24>
   11bb0:	cmp	r2, #96	; 0x60
   11bb4:	movne	r0, r3
   11bb8:	pop	{r4, r5, r6, pc}
   11bbc:	ldrb	r3, [r0, #1]
   11bc0:	bic	r3, r3, #32
   11bc4:	cmp	r3, #84	; 0x54
   11bc8:	bne	11c18 <__assert_fail@plt+0xf0c>
   11bcc:	ldrb	r3, [r0, #2]
   11bd0:	bic	r3, r3, #32
   11bd4:	cmp	r3, #70	; 0x46
   11bd8:	bne	11c18 <__assert_fail@plt+0xf0c>
   11bdc:	ldrb	r3, [r0, #3]
   11be0:	cmp	r3, #45	; 0x2d
   11be4:	bne	11c18 <__assert_fail@plt+0xf0c>
   11be8:	ldrb	r3, [r0, #4]
   11bec:	cmp	r3, #56	; 0x38
   11bf0:	bne	11c18 <__assert_fail@plt+0xf0c>
   11bf4:	ldrb	r3, [r0, #5]
   11bf8:	cmp	r3, #0
   11bfc:	bne	11c18 <__assert_fail@plt+0xf0c>
   11c00:	ldrb	r2, [r4]
   11c04:	ldr	r3, [pc, #40]	; 11c34 <__assert_fail@plt+0xf28>
   11c08:	ldr	r0, [pc, #40]	; 11c38 <__assert_fail@plt+0xf2c>
   11c0c:	cmp	r2, #96	; 0x60
   11c10:	movne	r0, r3
   11c14:	pop	{r4, r5, r6, pc}
   11c18:	ldr	r3, [pc, #28]	; 11c3c <__assert_fail@plt+0xf30>
   11c1c:	ldr	r0, [pc, #28]	; 11c40 <__assert_fail@plt+0xf34>
   11c20:	cmp	r5, #9
   11c24:	movne	r0, r3
   11c28:	pop	{r4, r5, r6, pc}
   11c2c:	andeq	r5, r1, r4, lsr r2
   11c30:	andeq	r5, r1, r0, asr #4
   11c34:	andeq	r5, r1, r0, lsr r2
   11c38:	andeq	r5, r1, r4, asr #4
   11c3c:	andeq	r5, r1, r8, lsr r2
   11c40:	andeq	r5, r1, ip, lsr r2
   11c44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c48:	sub	sp, sp, #116	; 0x74
   11c4c:	str	r0, [sp, #36]	; 0x24
   11c50:	mov	sl, r1
   11c54:	str	r2, [sp, #52]	; 0x34
   11c58:	str	r3, [sp, #28]
   11c5c:	ldr	r8, [sp, #152]	; 0x98
   11c60:	bl	10bc8 <__ctype_get_mb_cur_max@plt>
   11c64:	str	r0, [sp, #84]	; 0x54
   11c68:	ldr	r3, [sp, #156]	; 0x9c
   11c6c:	lsr	r3, r3, #1
   11c70:	and	r3, r3, #1
   11c74:	str	r3, [sp, #32]
   11c78:	mov	r3, #1
   11c7c:	str	r3, [sp, #40]	; 0x28
   11c80:	mov	r3, #0
   11c84:	str	r3, [sp, #80]	; 0x50
   11c88:	str	r3, [sp, #44]	; 0x2c
   11c8c:	str	r3, [sp, #48]	; 0x30
   11c90:	str	r3, [sp, #60]	; 0x3c
   11c94:	str	r3, [sp, #72]	; 0x48
   11c98:	str	r3, [sp, #76]	; 0x4c
   11c9c:	mov	r7, sl
   11ca0:	mov	sl, r8
   11ca4:	cmp	sl, #10
   11ca8:	ldrls	pc, [pc, sl, lsl #2]
   11cac:	b	11e64 <__assert_fail@plt+0x1158>
   11cb0:	andeq	r1, r1, r4, lsl sp
   11cb4:	andeq	r1, r1, r4, ror #25
   11cb8:	andeq	r1, r1, r0, asr #28
   11cbc:	ldrdeq	r1, [r1], -ip
   11cc0:	strdeq	r1, [r1], -r4
   11cc4:	andeq	r1, r1, r4, lsr #26
   11cc8:	muleq	r1, r0, sp
   11ccc:	andeq	r1, r1, r8, ror #28
   11cd0:	andeq	r1, r1, r0, ror #26
   11cd4:	andeq	r1, r1, r0, ror #26
   11cd8:	andeq	r1, r1, r0, ror #26
   11cdc:	mov	r3, #1
   11ce0:	str	r3, [sp, #48]	; 0x30
   11ce4:	mov	r3, #1
   11ce8:	str	r3, [sp, #32]
   11cec:	str	r3, [sp, #60]	; 0x3c
   11cf0:	ldr	r3, [pc, #4068]	; 12cdc <__assert_fail@plt+0x1fd0>
   11cf4:	str	r3, [sp, #72]	; 0x48
   11cf8:	mov	fp, #0
   11cfc:	mov	sl, #2
   11d00:	mov	r6, #0
   11d04:	ldr	r3, [sp, #48]	; 0x30
   11d08:	eor	r3, r3, #1
   11d0c:	str	r3, [sp, #68]	; 0x44
   11d10:	b	125f8 <__assert_fail@plt+0x18ec>
   11d14:	mov	r3, #0
   11d18:	str	r3, [sp, #32]
   11d1c:	mov	fp, r3
   11d20:	b	11d00 <__assert_fail@plt+0xff4>
   11d24:	ldr	r3, [sp, #32]
   11d28:	cmp	r3, #0
   11d2c:	bne	11e80 <__assert_fail@plt+0x1174>
   11d30:	cmp	r7, #0
   11d34:	beq	11ea0 <__assert_fail@plt+0x1194>
   11d38:	ldr	r3, [sp, #36]	; 0x24
   11d3c:	mov	r2, #34	; 0x22
   11d40:	strb	r2, [r3]
   11d44:	mov	r3, #1
   11d48:	str	r3, [sp, #48]	; 0x30
   11d4c:	str	r3, [sp, #60]	; 0x3c
   11d50:	ldr	r3, [pc, #3980]	; 12ce4 <__assert_fail@plt+0x1fd8>
   11d54:	str	r3, [sp, #72]	; 0x48
   11d58:	mov	fp, #1
   11d5c:	b	11d00 <__assert_fail@plt+0xff4>
   11d60:	cmp	sl, #10
   11d64:	beq	11d88 <__assert_fail@plt+0x107c>
   11d68:	mov	r1, sl
   11d6c:	ldr	r0, [pc, #3948]	; 12ce0 <__assert_fail@plt+0x1fd4>
   11d70:	bl	11b0c <__assert_fail@plt+0xe00>
   11d74:	str	r0, [sp, #164]	; 0xa4
   11d78:	mov	r1, sl
   11d7c:	ldr	r0, [pc, #3928]	; 12cdc <__assert_fail@plt+0x1fd0>
   11d80:	bl	11b0c <__assert_fail@plt+0xe00>
   11d84:	str	r0, [sp, #168]	; 0xa8
   11d88:	ldr	r3, [sp, #32]
   11d8c:	cmp	r3, #0
   11d90:	movne	fp, #0
   11d94:	bne	11dcc <__assert_fail@plt+0x10c0>
   11d98:	ldr	r3, [sp, #164]	; 0xa4
   11d9c:	ldrb	r3, [r3]
   11da0:	cmp	r3, #0
   11da4:	beq	11dec <__assert_fail@plt+0x10e0>
   11da8:	ldr	r2, [sp, #164]	; 0xa4
   11dac:	mov	fp, #0
   11db0:	ldr	r1, [sp, #36]	; 0x24
   11db4:	cmp	r7, fp
   11db8:	strbhi	r3, [r1, fp]
   11dbc:	add	fp, fp, #1
   11dc0:	ldrb	r3, [r2, #1]!
   11dc4:	cmp	r3, #0
   11dc8:	bne	11db4 <__assert_fail@plt+0x10a8>
   11dcc:	ldr	r0, [sp, #168]	; 0xa8
   11dd0:	bl	10c4c <strlen@plt>
   11dd4:	str	r0, [sp, #60]	; 0x3c
   11dd8:	ldr	r3, [sp, #168]	; 0xa8
   11ddc:	str	r3, [sp, #72]	; 0x48
   11de0:	mov	r3, #1
   11de4:	str	r3, [sp, #48]	; 0x30
   11de8:	b	11d00 <__assert_fail@plt+0xff4>
   11dec:	mov	fp, #0
   11df0:	b	11dcc <__assert_fail@plt+0x10c0>
   11df4:	ldr	r3, [sp, #32]
   11df8:	cmp	r3, #0
   11dfc:	bne	11ebc <__assert_fail@plt+0x11b0>
   11e00:	mov	r3, #1
   11e04:	str	r3, [sp, #48]	; 0x30
   11e08:	cmp	r7, #0
   11e0c:	beq	11ed8 <__assert_fail@plt+0x11cc>
   11e10:	ldr	r3, [sp, #36]	; 0x24
   11e14:	mov	r2, #39	; 0x27
   11e18:	strb	r2, [r3]
   11e1c:	mov	r3, #0
   11e20:	str	r3, [sp, #32]
   11e24:	mov	r3, #1
   11e28:	str	r3, [sp, #60]	; 0x3c
   11e2c:	ldr	r3, [pc, #3752]	; 12cdc <__assert_fail@plt+0x1fd0>
   11e30:	str	r3, [sp, #72]	; 0x48
   11e34:	mov	fp, #1
   11e38:	mov	sl, #2
   11e3c:	b	11d00 <__assert_fail@plt+0xff4>
   11e40:	ldr	r3, [sp, #32]
   11e44:	cmp	r3, #0
   11e48:	beq	11e08 <__assert_fail@plt+0x10fc>
   11e4c:	mov	r3, #1
   11e50:	str	r3, [sp, #60]	; 0x3c
   11e54:	ldr	r3, [pc, #3712]	; 12cdc <__assert_fail@plt+0x1fd0>
   11e58:	str	r3, [sp, #72]	; 0x48
   11e5c:	mov	fp, #0
   11e60:	b	11d00 <__assert_fail@plt+0xff4>
   11e64:	bl	10d00 <abort@plt>
   11e68:	mov	r3, #0
   11e6c:	str	r3, [sp, #32]
   11e70:	mov	r3, #1
   11e74:	str	r3, [sp, #48]	; 0x30
   11e78:	mov	fp, #0
   11e7c:	b	11d00 <__assert_fail@plt+0xff4>
   11e80:	ldr	r3, [sp, #32]
   11e84:	str	r3, [sp, #48]	; 0x30
   11e88:	mov	r3, #1
   11e8c:	str	r3, [sp, #60]	; 0x3c
   11e90:	ldr	r3, [pc, #3660]	; 12ce4 <__assert_fail@plt+0x1fd8>
   11e94:	str	r3, [sp, #72]	; 0x48
   11e98:	mov	fp, #0
   11e9c:	b	11d00 <__assert_fail@plt+0xff4>
   11ea0:	mov	r3, #1
   11ea4:	str	r3, [sp, #48]	; 0x30
   11ea8:	str	r3, [sp, #60]	; 0x3c
   11eac:	ldr	r3, [pc, #3632]	; 12ce4 <__assert_fail@plt+0x1fd8>
   11eb0:	str	r3, [sp, #72]	; 0x48
   11eb4:	mov	fp, #1
   11eb8:	b	11d00 <__assert_fail@plt+0xff4>
   11ebc:	mov	r3, #1
   11ec0:	str	r3, [sp, #60]	; 0x3c
   11ec4:	ldr	r3, [pc, #3600]	; 12cdc <__assert_fail@plt+0x1fd0>
   11ec8:	str	r3, [sp, #72]	; 0x48
   11ecc:	mov	fp, #0
   11ed0:	mov	sl, #2
   11ed4:	b	11d00 <__assert_fail@plt+0xff4>
   11ed8:	mov	r3, #0
   11edc:	str	r3, [sp, #32]
   11ee0:	mov	r3, #1
   11ee4:	str	r3, [sp, #60]	; 0x3c
   11ee8:	ldr	r3, [pc, #3564]	; 12cdc <__assert_fail@plt+0x1fd0>
   11eec:	str	r3, [sp, #72]	; 0x48
   11ef0:	mov	fp, #1
   11ef4:	mov	sl, #2
   11ef8:	b	11d00 <__assert_fail@plt+0xff4>
   11efc:	mov	r3, #0
   11f00:	str	r3, [sp, #56]	; 0x38
   11f04:	ldr	r3, [sp, #52]	; 0x34
   11f08:	add	r2, r3, r6
   11f0c:	str	r2, [sp, #64]	; 0x40
   11f10:	ldrb	r4, [r3, r6]
   11f14:	cmp	r4, #126	; 0x7e
   11f18:	ldrls	pc, [pc, r4, lsl #2]
   11f1c:	b	12758 <__assert_fail@plt+0x1a4c>
   11f20:	andeq	r2, r1, r8, lsr r1
   11f24:	andeq	r2, r1, r8, asr r7
   11f28:	andeq	r2, r1, r8, asr r7
   11f2c:	andeq	r2, r1, r8, asr r7
   11f30:	andeq	r2, r1, r8, asr r7
   11f34:	andeq	r2, r1, r8, asr r7
   11f38:	andeq	r2, r1, r8, asr r7
   11f3c:	muleq	r1, r4, r4
   11f40:	andeq	r2, r1, r0, lsr r1
   11f44:	andeq	r2, r1, ip, asr #8
   11f48:	andeq	r2, r1, r4, asr #8
   11f4c:			; <UNDEFINED> instruction: 0x000123b4
   11f50:	andeq	r2, r1, ip, lsr #7
   11f54:	andeq	r2, r1, r8, lsr #2
   11f58:	andeq	r2, r1, r8, asr r7
   11f5c:	andeq	r2, r1, r8, asr r7
   11f60:	andeq	r2, r1, r8, asr r7
   11f64:	andeq	r2, r1, r8, asr r7
   11f68:	andeq	r2, r1, r8, asr r7
   11f6c:	andeq	r2, r1, r8, asr r7
   11f70:	andeq	r2, r1, r8, asr r7
   11f74:	andeq	r2, r1, r8, asr r7
   11f78:	andeq	r2, r1, r8, asr r7
   11f7c:	andeq	r2, r1, r8, asr r7
   11f80:	andeq	r2, r1, r8, asr r7
   11f84:	andeq	r2, r1, r8, asr r7
   11f88:	andeq	r2, r1, r8, asr r7
   11f8c:	andeq	r2, r1, r8, asr r7
   11f90:	andeq	r2, r1, r8, asr r7
   11f94:	andeq	r2, r1, r8, asr r7
   11f98:	andeq	r2, r1, r8, asr r7
   11f9c:	andeq	r2, r1, r8, asr r7
   11fa0:	andeq	r2, r1, r8, ror #9
   11fa4:	andeq	r2, r1, r4, ror #9
   11fa8:	andeq	r2, r1, r4, ror #9
   11fac:			; <UNDEFINED> instruction: 0x000124bc
   11fb0:	andeq	r2, r1, r4, ror #9
   11fb4:	andeq	r2, r1, ip, lsr #22
   11fb8:	andeq	r2, r1, r4, ror #9
   11fbc:			; <UNDEFINED> instruction: 0x000126bc
   11fc0:	andeq	r2, r1, r4, ror #9
   11fc4:	andeq	r2, r1, r4, ror #9
   11fc8:	andeq	r2, r1, r4, ror #9
   11fcc:	andeq	r2, r1, ip, lsr #22
   11fd0:	andeq	r2, r1, ip, lsr #22
   11fd4:	andeq	r2, r1, ip, lsr #22
   11fd8:	andeq	r2, r1, ip, lsr #22
   11fdc:	andeq	r2, r1, ip, lsr #22
   11fe0:	andeq	r2, r1, ip, lsr #22
   11fe4:	andeq	r2, r1, ip, lsr #22
   11fe8:	andeq	r2, r1, ip, lsr #22
   11fec:	andeq	r2, r1, ip, lsr #22
   11ff0:	andeq	r2, r1, ip, lsr #22
   11ff4:	andeq	r2, r1, ip, lsr #22
   11ff8:	andeq	r2, r1, ip, lsr #22
   11ffc:	andeq	r2, r1, ip, lsr #22
   12000:	andeq	r2, r1, ip, lsr #22
   12004:	andeq	r2, r1, ip, lsr #22
   12008:	andeq	r2, r1, ip, lsr #22
   1200c:	andeq	r2, r1, r4, ror #9
   12010:	andeq	r2, r1, r4, ror #9
   12014:	andeq	r2, r1, r4, ror #9
   12018:	andeq	r2, r1, r4, ror #9
   1201c:	andeq	r2, r1, r0, asr #4
   12020:	andeq	r2, r1, r8, asr r7
   12024:	andeq	r2, r1, ip, lsr #22
   12028:	andeq	r2, r1, ip, lsr #22
   1202c:	andeq	r2, r1, ip, lsr #22
   12030:	andeq	r2, r1, ip, lsr #22
   12034:	andeq	r2, r1, ip, lsr #22
   12038:	andeq	r2, r1, ip, lsr #22
   1203c:	andeq	r2, r1, ip, lsr #22
   12040:	andeq	r2, r1, ip, lsr #22
   12044:	andeq	r2, r1, ip, lsr #22
   12048:	andeq	r2, r1, ip, lsr #22
   1204c:	andeq	r2, r1, ip, lsr #22
   12050:	andeq	r2, r1, ip, lsr #22
   12054:	andeq	r2, r1, ip, lsr #22
   12058:	andeq	r2, r1, ip, lsr #22
   1205c:	andeq	r2, r1, ip, lsr #22
   12060:	andeq	r2, r1, ip, lsr #22
   12064:	andeq	r2, r1, ip, lsr #22
   12068:	andeq	r2, r1, ip, lsr #22
   1206c:	andeq	r2, r1, ip, lsr #22
   12070:	andeq	r2, r1, ip, lsr #22
   12074:	andeq	r2, r1, ip, lsr #22
   12078:	andeq	r2, r1, ip, lsr #22
   1207c:	andeq	r2, r1, ip, lsr #22
   12080:	andeq	r2, r1, ip, lsr #22
   12084:	andeq	r2, r1, ip, lsr #22
   12088:	andeq	r2, r1, ip, lsr #22
   1208c:	andeq	r2, r1, r4, ror #9
   12090:			; <UNDEFINED> instruction: 0x000123bc
   12094:	andeq	r2, r1, ip, lsr #22
   12098:	andeq	r2, r1, r4, ror #9
   1209c:	andeq	r2, r1, ip, lsr #22
   120a0:	andeq	r2, r1, r4, ror #9
   120a4:	andeq	r2, r1, ip, lsr #22
   120a8:	andeq	r2, r1, ip, lsr #22
   120ac:	andeq	r2, r1, ip, lsr #22
   120b0:	andeq	r2, r1, ip, lsr #22
   120b4:	andeq	r2, r1, ip, lsr #22
   120b8:	andeq	r2, r1, ip, lsr #22
   120bc:	andeq	r2, r1, ip, lsr #22
   120c0:	andeq	r2, r1, ip, lsr #22
   120c4:	andeq	r2, r1, ip, lsr #22
   120c8:	andeq	r2, r1, ip, lsr #22
   120cc:	andeq	r2, r1, ip, lsr #22
   120d0:	andeq	r2, r1, ip, lsr #22
   120d4:	andeq	r2, r1, ip, lsr #22
   120d8:	andeq	r2, r1, ip, lsr #22
   120dc:	andeq	r2, r1, ip, lsr #22
   120e0:	andeq	r2, r1, ip, lsr #22
   120e4:	andeq	r2, r1, ip, lsr #22
   120e8:	andeq	r2, r1, ip, lsr #22
   120ec:	andeq	r2, r1, ip, lsr #22
   120f0:	andeq	r2, r1, ip, lsr #22
   120f4:	andeq	r2, r1, ip, lsr #22
   120f8:	andeq	r2, r1, ip, lsr #22
   120fc:	andeq	r2, r1, ip, lsr #22
   12100:	andeq	r2, r1, ip, lsr #22
   12104:	andeq	r2, r1, ip, lsr #22
   12108:	andeq	r2, r1, ip, lsr #22
   1210c:	muleq	r1, ip, r4
   12110:	andeq	r2, r1, r4, ror #9
   12114:	muleq	r1, ip, r4
   12118:			; <UNDEFINED> instruction: 0x000124bc
   1211c:	mov	r3, #0
   12120:	str	r3, [sp, #56]	; 0x38
   12124:	b	11f04 <__assert_fail@plt+0x11f8>
   12128:	mov	r3, #114	; 0x72
   1212c:	b	12450 <__assert_fail@plt+0x1744>
   12130:	mov	r3, #98	; 0x62
   12134:	b	12468 <__assert_fail@plt+0x175c>
   12138:	ldr	r3, [sp, #48]	; 0x30
   1213c:	cmp	r3, #0
   12140:	beq	12228 <__assert_fail@plt+0x151c>
   12144:	ldr	r3, [sp, #32]
   12148:	cmp	r3, #0
   1214c:	bne	12cb0 <__assert_fail@plt+0x1fa4>
   12150:	ldr	r3, [sp, #44]	; 0x2c
   12154:	eor	r3, r3, #1
   12158:	cmp	sl, #2
   1215c:	movne	r3, #0
   12160:	andeq	r3, r3, #1
   12164:	cmp	r3, #0
   12168:	moveq	r2, fp
   1216c:	beq	121b0 <__assert_fail@plt+0x14a4>
   12170:	cmp	r7, fp
   12174:	ldrhi	r2, [sp, #36]	; 0x24
   12178:	movhi	r1, #39	; 0x27
   1217c:	strbhi	r1, [r2, fp]
   12180:	add	r2, fp, #1
   12184:	cmp	r7, r2
   12188:	ldrhi	r1, [sp, #36]	; 0x24
   1218c:	movhi	r0, #36	; 0x24
   12190:	strbhi	r0, [r1, r2]
   12194:	add	r2, fp, #2
   12198:	cmp	r7, r2
   1219c:	ldrhi	r1, [sp, #36]	; 0x24
   121a0:	movhi	r0, #39	; 0x27
   121a4:	strbhi	r0, [r1, r2]
   121a8:	add	r2, fp, #3
   121ac:	str	r3, [sp, #44]	; 0x2c
   121b0:	cmp	r7, r2
   121b4:	ldrhi	r3, [sp, #36]	; 0x24
   121b8:	movhi	r1, #92	; 0x5c
   121bc:	strbhi	r1, [r3, r2]
   121c0:	add	fp, r2, #1
   121c4:	cmp	r5, #0
   121c8:	beq	12b34 <__assert_fail@plt+0x1e28>
   121cc:	add	r3, r6, #1
   121d0:	ldr	r1, [sp, #28]
   121d4:	cmp	r1, r3
   121d8:	bls	12b44 <__assert_fail@plt+0x1e38>
   121dc:	ldr	r1, [sp, #52]	; 0x34
   121e0:	ldrb	r3, [r1, r3]
   121e4:	sub	r3, r3, #48	; 0x30
   121e8:	uxtb	r3, r3
   121ec:	cmp	r3, #9
   121f0:	bhi	12b50 <__assert_fail@plt+0x1e44>
   121f4:	cmp	r7, fp
   121f8:	movhi	r3, #48	; 0x30
   121fc:	ldrhi	r1, [sp, #36]	; 0x24
   12200:	strbhi	r3, [r1, fp]
   12204:	add	r3, r2, #2
   12208:	cmp	r7, r3
   1220c:	movhi	r1, #48	; 0x30
   12210:	ldrhi	r0, [sp, #36]	; 0x24
   12214:	strbhi	r1, [r0, r3]
   12218:	add	fp, r2, #3
   1221c:	ldr	r8, [sp, #32]
   12220:	mov	r4, #48	; 0x30
   12224:	b	12500 <__assert_fail@plt+0x17f4>
   12228:	ldr	r3, [sp, #156]	; 0x9c
   1222c:	tst	r3, #1
   12230:	bne	125f4 <__assert_fail@plt+0x18e8>
   12234:	ldr	r5, [sp, #48]	; 0x30
   12238:	mov	r8, r5
   1223c:	b	12500 <__assert_fail@plt+0x17f4>
   12240:	cmp	sl, #2
   12244:	beq	1225c <__assert_fail@plt+0x1550>
   12248:	cmp	sl, #5
   1224c:	beq	12274 <__assert_fail@plt+0x1568>
   12250:	mov	r8, #0
   12254:	mov	r5, r8
   12258:	b	12500 <__assert_fail@plt+0x17f4>
   1225c:	ldr	r3, [sp, #32]
   12260:	cmp	r3, #0
   12264:	bne	12cc4 <__assert_fail@plt+0x1fb8>
   12268:	mov	r8, r3
   1226c:	mov	r5, r3
   12270:	b	12500 <__assert_fail@plt+0x17f4>
   12274:	ldr	r3, [sp, #156]	; 0x9c
   12278:	tst	r3, #4
   1227c:	beq	12b5c <__assert_fail@plt+0x1e50>
   12280:	add	r3, r6, #2
   12284:	ldr	r2, [sp, #28]
   12288:	cmp	r2, r3
   1228c:	bls	12b68 <__assert_fail@plt+0x1e5c>
   12290:	ldr	r2, [sp, #52]	; 0x34
   12294:	add	r2, r2, r6
   12298:	ldrb	r2, [r2, #1]
   1229c:	cmp	r2, #63	; 0x3f
   122a0:	movne	r8, #0
   122a4:	movne	r5, r8
   122a8:	bne	12500 <__assert_fail@plt+0x17f4>
   122ac:	ldr	r2, [sp, #52]	; 0x34
   122b0:	ldrb	r2, [r2, r3]
   122b4:	sub	r1, r2, #33	; 0x21
   122b8:	cmp	r1, #29
   122bc:	ldrls	pc, [pc, r1, lsl #2]
   122c0:	b	12b74 <__assert_fail@plt+0x1e68>
   122c4:	andeq	r2, r1, ip, lsr r3
   122c8:	andeq	r2, r1, r4, ror fp
   122cc:	andeq	r2, r1, r4, ror fp
   122d0:	andeq	r2, r1, r4, ror fp
   122d4:	andeq	r2, r1, r4, ror fp
   122d8:	andeq	r2, r1, r4, ror fp
   122dc:	andeq	r2, r1, ip, lsr r3
   122e0:	andeq	r2, r1, ip, lsr r3
   122e4:	andeq	r2, r1, ip, lsr r3
   122e8:	andeq	r2, r1, r4, ror fp
   122ec:	andeq	r2, r1, r4, ror fp
   122f0:	andeq	r2, r1, r4, ror fp
   122f4:	andeq	r2, r1, ip, lsr r3
   122f8:	andeq	r2, r1, r4, ror fp
   122fc:	andeq	r2, r1, ip, lsr r3
   12300:	andeq	r2, r1, r4, ror fp
   12304:	andeq	r2, r1, r4, ror fp
   12308:	andeq	r2, r1, r4, ror fp
   1230c:	andeq	r2, r1, r4, ror fp
   12310:	andeq	r2, r1, r4, ror fp
   12314:	andeq	r2, r1, r4, ror fp
   12318:	andeq	r2, r1, r4, ror fp
   1231c:	andeq	r2, r1, r4, ror fp
   12320:	andeq	r2, r1, r4, ror fp
   12324:	andeq	r2, r1, r4, ror fp
   12328:	andeq	r2, r1, r4, ror fp
   1232c:	andeq	r2, r1, r4, ror fp
   12330:	andeq	r2, r1, ip, lsr r3
   12334:	andeq	r2, r1, ip, lsr r3
   12338:	andeq	r2, r1, ip, lsr r3
   1233c:	ldr	r1, [sp, #32]
   12340:	cmp	r1, #0
   12344:	bne	12d84 <__assert_fail@plt+0x2078>
   12348:	cmp	r7, fp
   1234c:	movhi	r1, #63	; 0x3f
   12350:	ldrhi	r0, [sp, #36]	; 0x24
   12354:	strbhi	r1, [r0, fp]
   12358:	add	r1, fp, #1
   1235c:	cmp	r7, r1
   12360:	ldrhi	r0, [sp, #36]	; 0x24
   12364:	movhi	ip, #34	; 0x22
   12368:	strbhi	ip, [r0, r1]
   1236c:	add	r1, fp, #2
   12370:	cmp	r7, r1
   12374:	ldrhi	r0, [sp, #36]	; 0x24
   12378:	movhi	ip, #34	; 0x22
   1237c:	strbhi	ip, [r0, r1]
   12380:	add	r1, fp, #3
   12384:	cmp	r7, r1
   12388:	movhi	r0, #63	; 0x3f
   1238c:	ldrhi	ip, [sp, #36]	; 0x24
   12390:	strbhi	r0, [ip, r1]
   12394:	add	fp, fp, #4
   12398:	ldr	r5, [sp, #32]
   1239c:	mov	r8, r5
   123a0:	mov	r4, r2
   123a4:	mov	r6, r3
   123a8:	b	12500 <__assert_fail@plt+0x17f4>
   123ac:	mov	r3, #102	; 0x66
   123b0:	b	12468 <__assert_fail@plt+0x175c>
   123b4:	mov	r3, #118	; 0x76
   123b8:	b	12468 <__assert_fail@plt+0x175c>
   123bc:	cmp	sl, #2
   123c0:	beq	1242c <__assert_fail@plt+0x1720>
   123c4:	ldr	r3, [sp, #48]	; 0x30
   123c8:	ldr	r2, [sp, #32]
   123cc:	and	r3, r3, r2
   123d0:	tst	r9, r3
   123d4:	moveq	r3, r4
   123d8:	beq	12468 <__assert_fail@plt+0x175c>
   123dc:	mov	r8, #0
   123e0:	mov	r5, r8
   123e4:	eor	r5, r5, #1
   123e8:	ldr	r3, [sp, #44]	; 0x2c
   123ec:	and	r5, r5, r3
   123f0:	tst	r5, #255	; 0xff
   123f4:	beq	125d4 <__assert_fail@plt+0x18c8>
   123f8:	cmp	r7, fp
   123fc:	ldrhi	r3, [sp, #36]	; 0x24
   12400:	movhi	r2, #39	; 0x27
   12404:	strbhi	r2, [r3, fp]
   12408:	add	r3, fp, #1
   1240c:	cmp	r7, r3
   12410:	ldrhi	r2, [sp, #36]	; 0x24
   12414:	movhi	r1, #39	; 0x27
   12418:	strbhi	r1, [r2, r3]
   1241c:	add	fp, fp, #2
   12420:	mov	r3, #0
   12424:	str	r3, [sp, #44]	; 0x2c
   12428:	b	125d4 <__assert_fail@plt+0x18c8>
   1242c:	ldr	r3, [sp, #32]
   12430:	cmp	r3, #0
   12434:	bne	12cd0 <__assert_fail@plt+0x1fc4>
   12438:	mov	r8, r3
   1243c:	mov	r5, r3
   12440:	b	123e4 <__assert_fail@plt+0x16d8>
   12444:	mov	r3, #110	; 0x6e
   12448:	b	12450 <__assert_fail@plt+0x1744>
   1244c:	mov	r3, #116	; 0x74
   12450:	ldr	r2, [sp, #32]
   12454:	cmp	sl, #2
   12458:	movne	r2, #0
   1245c:	andeq	r2, r2, #1
   12460:	cmp	r2, #0
   12464:	bne	12488 <__assert_fail@plt+0x177c>
   12468:	ldr	r2, [sp, #48]	; 0x30
   1246c:	cmp	r2, #0
   12470:	moveq	r8, r2
   12474:	moveq	r5, r2
   12478:	beq	12500 <__assert_fail@plt+0x17f4>
   1247c:	mov	r4, r3
   12480:	mov	r8, #0
   12484:	b	12558 <__assert_fail@plt+0x184c>
   12488:	mov	r8, sl
   1248c:	mov	sl, r7
   12490:	b	12cfc <__assert_fail@plt+0x1ff0>
   12494:	mov	r3, #97	; 0x61
   12498:	b	12468 <__assert_fail@plt+0x175c>
   1249c:	ldr	r3, [sp, #28]
   124a0:	cmn	r3, #1
   124a4:	beq	124d0 <__assert_fail@plt+0x17c4>
   124a8:	ldr	r3, [sp, #28]
   124ac:	subs	r3, r3, #1
   124b0:	movne	r3, #1
   124b4:	cmp	r3, #0
   124b8:	bne	12b80 <__assert_fail@plt+0x1e74>
   124bc:	cmp	r6, #0
   124c0:	beq	124e8 <__assert_fail@plt+0x17dc>
   124c4:	mov	r8, #0
   124c8:	mov	r5, r8
   124cc:	b	12500 <__assert_fail@plt+0x17f4>
   124d0:	ldr	r3, [sp, #52]	; 0x34
   124d4:	ldrb	r3, [r3, #1]
   124d8:	adds	r3, r3, #0
   124dc:	movne	r3, #1
   124e0:	b	124b4 <__assert_fail@plt+0x17a8>
   124e4:	mov	r8, #0
   124e8:	ldr	r5, [sp, #32]
   124ec:	cmp	sl, #2
   124f0:	movne	r5, #0
   124f4:	andeq	r5, r5, #1
   124f8:	cmp	r5, #0
   124fc:	bne	126b0 <__assert_fail@plt+0x19a4>
   12500:	ldr	r3, [sp, #68]	; 0x44
   12504:	cmp	sl, #2
   12508:	orreq	r3, r3, #1
   1250c:	eor	r3, r3, #1
   12510:	ldr	r2, [sp, #32]
   12514:	orr	r3, r2, r3
   12518:	tst	r3, #255	; 0xff
   1251c:	beq	1254c <__assert_fail@plt+0x1840>
   12520:	ldr	r3, [sp, #160]	; 0xa0
   12524:	cmp	r3, #0
   12528:	beq	1254c <__assert_fail@plt+0x1840>
   1252c:	lsr	r2, r4, #5
   12530:	uxtb	r2, r2
   12534:	and	r3, r4, #31
   12538:	ldr	r1, [sp, #160]	; 0xa0
   1253c:	ldr	r2, [r1, r2, lsl #2]
   12540:	lsr	r3, r2, r3
   12544:	tst	r3, #1
   12548:	bne	12558 <__assert_fail@plt+0x184c>
   1254c:	ldr	r3, [sp, #56]	; 0x38
   12550:	cmp	r3, #0
   12554:	beq	123e4 <__assert_fail@plt+0x16d8>
   12558:	ldr	r3, [sp, #32]
   1255c:	cmp	r3, #0
   12560:	bne	12d6c <__assert_fail@plt+0x2060>
   12564:	ldr	r3, [sp, #44]	; 0x2c
   12568:	eor	r3, r3, #1
   1256c:	cmp	sl, #2
   12570:	movne	r3, #0
   12574:	andeq	r3, r3, #1
   12578:	cmp	r3, #0
   1257c:	beq	125c0 <__assert_fail@plt+0x18b4>
   12580:	cmp	r7, fp
   12584:	ldrhi	r2, [sp, #36]	; 0x24
   12588:	movhi	r1, #39	; 0x27
   1258c:	strbhi	r1, [r2, fp]
   12590:	add	r2, fp, #1
   12594:	cmp	r7, r2
   12598:	ldrhi	r1, [sp, #36]	; 0x24
   1259c:	movhi	r0, #36	; 0x24
   125a0:	strbhi	r0, [r1, r2]
   125a4:	add	r2, fp, #2
   125a8:	cmp	r7, r2
   125ac:	ldrhi	r1, [sp, #36]	; 0x24
   125b0:	movhi	r0, #39	; 0x27
   125b4:	strbhi	r0, [r1, r2]
   125b8:	add	fp, fp, #3
   125bc:	str	r3, [sp, #44]	; 0x2c
   125c0:	cmp	r7, fp
   125c4:	ldrhi	r3, [sp, #36]	; 0x24
   125c8:	movhi	r2, #92	; 0x5c
   125cc:	strbhi	r2, [r3, fp]
   125d0:	add	fp, fp, #1
   125d4:	cmp	fp, r7
   125d8:	ldrcc	r3, [sp, #36]	; 0x24
   125dc:	strbcc	r4, [r3, fp]
   125e0:	add	fp, fp, #1
   125e4:	ldr	r3, [sp, #40]	; 0x28
   125e8:	cmp	r8, #0
   125ec:	moveq	r3, #0
   125f0:	str	r3, [sp, #40]	; 0x28
   125f4:	add	r6, r6, #1
   125f8:	ldr	r3, [sp, #28]
   125fc:	cmn	r3, #1
   12600:	beq	12b8c <__assert_fail@plt+0x1e80>
   12604:	ldr	r3, [sp, #28]
   12608:	subs	r8, r3, r6
   1260c:	movne	r8, #1
   12610:	cmp	r8, #0
   12614:	beq	12ba0 <__assert_fail@plt+0x1e94>
   12618:	ldr	r5, [sp, #48]	; 0x30
   1261c:	cmp	sl, #2
   12620:	moveq	r5, #0
   12624:	andne	r5, r5, #1
   12628:	ldr	r3, [sp, #60]	; 0x3c
   1262c:	adds	r9, r3, #0
   12630:	movne	r9, #1
   12634:	ands	r2, r5, r9
   12638:	str	r2, [sp, #56]	; 0x38
   1263c:	beq	11f04 <__assert_fail@plt+0x11f8>
   12640:	add	r4, r6, r3
   12644:	ldr	r2, [sp, #28]
   12648:	cmp	r3, #1
   1264c:	movls	r3, #0
   12650:	movhi	r3, #1
   12654:	cmn	r2, #1
   12658:	movne	r3, #0
   1265c:	cmp	r3, #0
   12660:	beq	12670 <__assert_fail@plt+0x1964>
   12664:	ldr	r0, [sp, #52]	; 0x34
   12668:	bl	10c4c <strlen@plt>
   1266c:	str	r0, [sp, #28]
   12670:	ldr	r3, [sp, #28]
   12674:	cmp	r3, r4
   12678:	bcc	11efc <__assert_fail@plt+0x11f0>
   1267c:	ldr	r2, [sp, #60]	; 0x3c
   12680:	ldr	r1, [sp, #72]	; 0x48
   12684:	ldr	r3, [sp, #52]	; 0x34
   12688:	add	r0, r3, r6
   1268c:	bl	10b68 <memcmp@plt>
   12690:	cmp	r0, #0
   12694:	bne	1211c <__assert_fail@plt+0x1410>
   12698:	ldr	r3, [sp, #32]
   1269c:	cmp	r3, #0
   126a0:	beq	11f04 <__assert_fail@plt+0x11f8>
   126a4:	mov	r8, sl
   126a8:	mov	sl, r7
   126ac:	b	12cfc <__assert_fail@plt+0x1ff0>
   126b0:	mov	r8, sl
   126b4:	mov	sl, r7
   126b8:	b	12cfc <__assert_fail@plt+0x1ff0>
   126bc:	cmp	sl, #2
   126c0:	strne	r8, [sp, #80]	; 0x50
   126c4:	movne	r5, #0
   126c8:	bne	12500 <__assert_fail@plt+0x17f4>
   126cc:	ldr	r3, [sp, #32]
   126d0:	cmp	r3, #0
   126d4:	bne	12ce8 <__assert_fail@plt+0x1fdc>
   126d8:	ldr	r2, [sp, #76]	; 0x4c
   126dc:	adds	r3, r7, #0
   126e0:	movne	r3, #1
   126e4:	cmp	r2, #0
   126e8:	movne	r3, #0
   126ec:	cmp	r3, #0
   126f0:	movne	r3, #0
   126f4:	bne	12724 <__assert_fail@plt+0x1a18>
   126f8:	cmp	r7, fp
   126fc:	ldrhi	r3, [sp, #36]	; 0x24
   12700:	movhi	r2, #39	; 0x27
   12704:	strbhi	r2, [r3, fp]
   12708:	add	r3, fp, #1
   1270c:	cmp	r7, r3
   12710:	ldrhi	r2, [sp, #36]	; 0x24
   12714:	movhi	r1, #92	; 0x5c
   12718:	strbhi	r1, [r2, r3]
   1271c:	mov	r3, r7
   12720:	ldr	r7, [sp, #76]	; 0x4c
   12724:	add	r2, fp, #2
   12728:	cmp	r2, r3
   1272c:	ldrcc	r1, [sp, #36]	; 0x24
   12730:	movcc	r0, #39	; 0x27
   12734:	strbcc	r0, [r1, r2]
   12738:	add	fp, fp, #3
   1273c:	ldr	r2, [sp, #32]
   12740:	mov	r5, r2
   12744:	str	r8, [sp, #80]	; 0x50
   12748:	str	r2, [sp, #44]	; 0x2c
   1274c:	str	r7, [sp, #76]	; 0x4c
   12750:	mov	r7, r3
   12754:	b	12500 <__assert_fail@plt+0x17f4>
   12758:	ldr	r5, [sp, #84]	; 0x54
   1275c:	cmp	r5, #1
   12760:	beq	12790 <__assert_fail@plt+0x1a84>
   12764:	mov	r3, #0
   12768:	str	r3, [sp, #104]	; 0x68
   1276c:	str	r3, [sp, #108]	; 0x6c
   12770:	ldr	r3, [sp, #28]
   12774:	cmn	r3, #1
   12778:	beq	127c4 <__assert_fail@plt+0x1ab8>
   1277c:	mov	r3, #0
   12780:	str	r4, [sp, #88]	; 0x58
   12784:	str	fp, [sp, #92]	; 0x5c
   12788:	mov	fp, r3
   1278c:	b	128ec <__assert_fail@plt+0x1be0>
   12790:	bl	10c34 <__ctype_b_loc@plt>
   12794:	ldr	r2, [r0]
   12798:	lsl	r3, r4, #1
   1279c:	ldrh	r8, [r2, r3]
   127a0:	lsr	r8, r8, #14
   127a4:	and	r8, r8, #1
   127a8:	mov	r2, r5
   127ac:	eor	r5, r8, #1
   127b0:	ldr	r3, [sp, #48]	; 0x30
   127b4:	and	r5, r5, r3
   127b8:	ands	r5, r5, #255	; 0xff
   127bc:	beq	12500 <__assert_fail@plt+0x17f4>
   127c0:	b	12984 <__assert_fail@plt+0x1c78>
   127c4:	ldr	r0, [sp, #52]	; 0x34
   127c8:	bl	10c4c <strlen@plt>
   127cc:	str	r0, [sp, #28]
   127d0:	b	1277c <__assert_fail@plt+0x1a70>
   127d4:	mov	r2, fp
   127d8:	mov	r1, r4
   127dc:	ldr	r4, [sp, #88]	; 0x58
   127e0:	ldr	fp, [sp, #92]	; 0x5c
   127e4:	ldr	r0, [sp, #28]
   127e8:	cmp	r0, r5
   127ec:	bls	129b8 <__assert_fail@plt+0x1cac>
   127f0:	ldrb	r3, [r1]
   127f4:	cmp	r3, #0
   127f8:	beq	129c0 <__assert_fail@plt+0x1cb4>
   127fc:	mov	r3, r1
   12800:	add	r2, r2, #1
   12804:	add	r1, r6, r2
   12808:	cmp	r0, r1
   1280c:	bls	129c8 <__assert_fail@plt+0x1cbc>
   12810:	ldrb	r1, [r3, #1]!
   12814:	cmp	r1, #0
   12818:	bne	12800 <__assert_fail@plt+0x1af4>
   1281c:	mov	r8, #0
   12820:	b	1297c <__assert_fail@plt+0x1c70>
   12824:	cmp	r4, r5
   12828:	beq	128c8 <__assert_fail@plt+0x1bbc>
   1282c:	ldrb	r3, [r4, #1]!
   12830:	sub	r3, r3, #91	; 0x5b
   12834:	cmp	r3, #33	; 0x21
   12838:	ldrls	pc, [pc, r3, lsl #2]
   1283c:	b	12824 <__assert_fail@plt+0x1b18>
   12840:	strdeq	r2, [r1], -r4
   12844:	strdeq	r2, [r1], -r4
   12848:	andeq	r2, r1, r4, lsr #16
   1284c:	strdeq	r2, [r1], -r4
   12850:	andeq	r2, r1, r4, lsr #16
   12854:	strdeq	r2, [r1], -r4
   12858:	andeq	r2, r1, r4, lsr #16
   1285c:	andeq	r2, r1, r4, lsr #16
   12860:	andeq	r2, r1, r4, lsr #16
   12864:	andeq	r2, r1, r4, lsr #16
   12868:	andeq	r2, r1, r4, lsr #16
   1286c:	andeq	r2, r1, r4, lsr #16
   12870:	andeq	r2, r1, r4, lsr #16
   12874:	andeq	r2, r1, r4, lsr #16
   12878:	andeq	r2, r1, r4, lsr #16
   1287c:	andeq	r2, r1, r4, lsr #16
   12880:	andeq	r2, r1, r4, lsr #16
   12884:	andeq	r2, r1, r4, lsr #16
   12888:	andeq	r2, r1, r4, lsr #16
   1288c:	andeq	r2, r1, r4, lsr #16
   12890:	andeq	r2, r1, r4, lsr #16
   12894:	andeq	r2, r1, r4, lsr #16
   12898:	andeq	r2, r1, r4, lsr #16
   1289c:	andeq	r2, r1, r4, lsr #16
   128a0:	andeq	r2, r1, r4, lsr #16
   128a4:	andeq	r2, r1, r4, lsr #16
   128a8:	andeq	r2, r1, r4, lsr #16
   128ac:	andeq	r2, r1, r4, lsr #16
   128b0:	andeq	r2, r1, r4, lsr #16
   128b4:	andeq	r2, r1, r4, lsr #16
   128b8:	andeq	r2, r1, r4, lsr #16
   128bc:	andeq	r2, r1, r4, lsr #16
   128c0:	andeq	r2, r1, r4, lsr #16
   128c4:	strdeq	r2, [r1], -r4
   128c8:	ldr	r0, [sp, #100]	; 0x64
   128cc:	bl	10ba4 <iswprint@plt>
   128d0:	cmp	r0, #0
   128d4:	moveq	r8, #0
   128d8:	add	fp, fp, r9
   128dc:	add	r0, sp, #104	; 0x68
   128e0:	bl	10b5c <mbsinit@plt>
   128e4:	cmp	r0, #0
   128e8:	bne	1295c <__assert_fail@plt+0x1c50>
   128ec:	add	r5, r6, fp
   128f0:	ldr	r3, [sp, #52]	; 0x34
   128f4:	add	r4, r3, r5
   128f8:	add	r3, sp, #104	; 0x68
   128fc:	ldr	r2, [sp, #28]
   12900:	sub	r2, r2, r5
   12904:	mov	r1, r4
   12908:	add	r0, sp, #100	; 0x64
   1290c:	bl	14478 <__assert_fail@plt+0x376c>
   12910:	subs	r9, r0, #0
   12914:	beq	129d0 <__assert_fail@plt+0x1cc4>
   12918:	cmn	r9, #1
   1291c:	beq	1296c <__assert_fail@plt+0x1c60>
   12920:	cmn	r9, #2
   12924:	beq	127d4 <__assert_fail@plt+0x1ac8>
   12928:	ldr	r3, [sp, #32]
   1292c:	cmp	sl, #2
   12930:	movne	r3, #0
   12934:	andeq	r3, r3, #1
   12938:	cmp	r3, #0
   1293c:	beq	128c8 <__assert_fail@plt+0x1bbc>
   12940:	cmp	r9, #1
   12944:	bls	128c8 <__assert_fail@plt+0x1bbc>
   12948:	sub	r3, r9, #1
   1294c:	add	r5, r3, r5
   12950:	ldr	r3, [sp, #52]	; 0x34
   12954:	add	r5, r3, r5
   12958:	b	1282c <__assert_fail@plt+0x1b20>
   1295c:	ldr	r4, [sp, #88]	; 0x58
   12960:	mov	r2, fp
   12964:	ldr	fp, [sp, #92]	; 0x5c
   12968:	b	1297c <__assert_fail@plt+0x1c70>
   1296c:	ldr	r4, [sp, #88]	; 0x58
   12970:	mov	r2, fp
   12974:	ldr	fp, [sp, #92]	; 0x5c
   12978:	mov	r8, #0
   1297c:	cmp	r2, #1
   12980:	bls	127ac <__assert_fail@plt+0x1aa0>
   12984:	add	r1, r6, r2
   12988:	ldr	ip, [sp, #64]	; 0x40
   1298c:	mov	r5, #0
   12990:	eor	r3, r8, #1
   12994:	ldr	r2, [sp, #48]	; 0x30
   12998:	and	r3, r3, r2
   1299c:	uxtb	r3, r3
   129a0:	ldr	r9, [sp, #32]
   129a4:	ldr	lr, [sp, #44]	; 0x2c
   129a8:	ldr	r2, [sp, #56]	; 0x38
   129ac:	str	r8, [sp, #56]	; 0x38
   129b0:	ldr	r0, [sp, #36]	; 0x24
   129b4:	b	12a50 <__assert_fail@plt+0x1d44>
   129b8:	mov	r8, #0
   129bc:	b	1297c <__assert_fail@plt+0x1c70>
   129c0:	mov	r8, #0
   129c4:	b	1297c <__assert_fail@plt+0x1c70>
   129c8:	mov	r8, #0
   129cc:	b	1297c <__assert_fail@plt+0x1c70>
   129d0:	ldr	r4, [sp, #88]	; 0x58
   129d4:	mov	r2, fp
   129d8:	ldr	fp, [sp, #92]	; 0x5c
   129dc:	b	1297c <__assert_fail@plt+0x1c70>
   129e0:	cmp	r2, #0
   129e4:	beq	129f8 <__assert_fail@plt+0x1cec>
   129e8:	cmp	r7, fp
   129ec:	movhi	r2, #92	; 0x5c
   129f0:	strbhi	r2, [r0, fp]
   129f4:	add	fp, fp, #1
   129f8:	add	r8, r6, #1
   129fc:	cmp	r1, r8
   12a00:	bls	12b08 <__assert_fail@plt+0x1dfc>
   12a04:	eor	r2, r5, #1
   12a08:	and	r2, r2, lr
   12a0c:	ands	r2, r2, #255	; 0xff
   12a10:	beq	12b24 <__assert_fail@plt+0x1e18>
   12a14:	cmp	r7, fp
   12a18:	movhi	r2, #39	; 0x27
   12a1c:	strbhi	r2, [r0, fp]
   12a20:	add	r2, fp, #1
   12a24:	cmp	r7, r2
   12a28:	movhi	lr, #39	; 0x27
   12a2c:	strbhi	lr, [r0, r2]
   12a30:	add	fp, fp, #2
   12a34:	mov	r6, r8
   12a38:	mov	r2, r3
   12a3c:	mov	lr, r3
   12a40:	cmp	r7, fp
   12a44:	strbhi	r4, [r0, fp]
   12a48:	add	fp, fp, #1
   12a4c:	ldrb	r4, [ip, #1]!
   12a50:	cmp	r3, #0
   12a54:	beq	129e0 <__assert_fail@plt+0x1cd4>
   12a58:	cmp	r9, #0
   12a5c:	bne	12d60 <__assert_fail@plt+0x2054>
   12a60:	eor	r5, lr, #1
   12a64:	cmp	sl, #2
   12a68:	movne	r5, #0
   12a6c:	andeq	r5, r5, #1
   12a70:	cmp	r5, #0
   12a74:	beq	12aac <__assert_fail@plt+0x1da0>
   12a78:	cmp	r7, fp
   12a7c:	movhi	lr, #39	; 0x27
   12a80:	strbhi	lr, [r0, fp]
   12a84:	add	lr, fp, #1
   12a88:	cmp	r7, lr
   12a8c:	movhi	r8, #36	; 0x24
   12a90:	strbhi	r8, [r0, lr]
   12a94:	add	lr, fp, #2
   12a98:	cmp	r7, lr
   12a9c:	movhi	r8, #39	; 0x27
   12aa0:	strbhi	r8, [r0, lr]
   12aa4:	add	fp, fp, #3
   12aa8:	mov	lr, r5
   12aac:	cmp	r7, fp
   12ab0:	movhi	r5, #92	; 0x5c
   12ab4:	strbhi	r5, [r0, fp]
   12ab8:	add	r5, fp, #1
   12abc:	cmp	r7, r5
   12ac0:	lsrhi	r8, r4, #6
   12ac4:	addhi	r8, r8, #48	; 0x30
   12ac8:	strbhi	r8, [r0, r5]
   12acc:	add	r8, fp, #2
   12ad0:	cmp	r7, r8
   12ad4:	lsrhi	r5, r4, #3
   12ad8:	andhi	r5, r5, #7
   12adc:	addhi	r5, r5, #48	; 0x30
   12ae0:	strbhi	r5, [r0, r8]
   12ae4:	add	fp, fp, #3
   12ae8:	and	r4, r4, #7
   12aec:	add	r4, r4, #48	; 0x30
   12af0:	add	r5, r6, #1
   12af4:	cmp	r1, r5
   12af8:	bls	12b14 <__assert_fail@plt+0x1e08>
   12afc:	mov	r6, r5
   12b00:	mov	r5, r3
   12b04:	b	12a40 <__assert_fail@plt+0x1d34>
   12b08:	str	lr, [sp, #44]	; 0x2c
   12b0c:	ldr	r8, [sp, #56]	; 0x38
   12b10:	b	123e4 <__assert_fail@plt+0x16d8>
   12b14:	str	lr, [sp, #44]	; 0x2c
   12b18:	ldr	r8, [sp, #56]	; 0x38
   12b1c:	mov	r5, r3
   12b20:	b	123e4 <__assert_fail@plt+0x16d8>
   12b24:	mov	r6, r8
   12b28:	b	12a40 <__assert_fail@plt+0x1d34>
   12b2c:	mov	r5, #0
   12b30:	b	12500 <__assert_fail@plt+0x17f4>
   12b34:	mov	r8, r5
   12b38:	ldr	r5, [sp, #48]	; 0x30
   12b3c:	mov	r4, #48	; 0x30
   12b40:	b	12500 <__assert_fail@plt+0x17f4>
   12b44:	ldr	r8, [sp, #32]
   12b48:	mov	r4, #48	; 0x30
   12b4c:	b	12500 <__assert_fail@plt+0x17f4>
   12b50:	ldr	r8, [sp, #32]
   12b54:	mov	r4, #48	; 0x30
   12b58:	b	12500 <__assert_fail@plt+0x17f4>
   12b5c:	mov	r8, #0
   12b60:	mov	r5, r8
   12b64:	b	12500 <__assert_fail@plt+0x17f4>
   12b68:	mov	r8, #0
   12b6c:	mov	r5, r8
   12b70:	b	12500 <__assert_fail@plt+0x17f4>
   12b74:	mov	r8, #0
   12b78:	mov	r5, r8
   12b7c:	b	12500 <__assert_fail@plt+0x17f4>
   12b80:	mov	r8, #0
   12b84:	mov	r5, r8
   12b88:	b	12500 <__assert_fail@plt+0x17f4>
   12b8c:	ldr	r3, [sp, #52]	; 0x34
   12b90:	ldrb	r8, [r3, r6]
   12b94:	adds	r8, r8, #0
   12b98:	movne	r8, #1
   12b9c:	b	12610 <__assert_fail@plt+0x1904>
   12ba0:	cmp	sl, #2
   12ba4:	movne	r3, #0
   12ba8:	moveq	r3, #1
   12bac:	ldr	r1, [sp, #32]
   12bb0:	mov	r2, r1
   12bb4:	and	r2, r2, r3
   12bb8:	cmp	fp, #0
   12bbc:	movne	r2, #0
   12bc0:	andeq	r2, r2, #1
   12bc4:	cmp	r2, #0
   12bc8:	bne	12d78 <__assert_fail@plt+0x206c>
   12bcc:	eor	r2, r1, #1
   12bd0:	and	r3, r3, r2
   12bd4:	ldr	r1, [sp, #80]	; 0x50
   12bd8:	tst	r1, r3
   12bdc:	beq	12c54 <__assert_fail@plt+0x1f48>
   12be0:	ldr	r3, [sp, #40]	; 0x28
   12be4:	cmp	r3, #0
   12be8:	bne	12c10 <__assert_fail@plt+0x1f04>
   12bec:	ldr	r1, [sp, #76]	; 0x4c
   12bf0:	clz	r3, r7
   12bf4:	lsr	r3, r3, #5
   12bf8:	cmp	r1, #0
   12bfc:	moveq	r3, #0
   12c00:	cmp	r3, #0
   12c04:	beq	12c54 <__assert_fail@plt+0x1f48>
   12c08:	ldr	r7, [sp, #76]	; 0x4c
   12c0c:	b	11ca4 <__assert_fail@plt+0xf98>
   12c10:	ldr	r3, [sp, #168]	; 0xa8
   12c14:	str	r3, [sp, #16]
   12c18:	ldr	r3, [sp, #164]	; 0xa4
   12c1c:	str	r3, [sp, #12]
   12c20:	ldr	r3, [sp, #160]	; 0xa0
   12c24:	str	r3, [sp, #8]
   12c28:	ldr	r3, [sp, #156]	; 0x9c
   12c2c:	str	r3, [sp, #4]
   12c30:	mov	r3, #5
   12c34:	str	r3, [sp]
   12c38:	ldr	r3, [sp, #28]
   12c3c:	ldr	r2, [sp, #52]	; 0x34
   12c40:	ldr	r1, [sp, #76]	; 0x4c
   12c44:	ldr	r0, [sp, #36]	; 0x24
   12c48:	bl	11c44 <__assert_fail@plt+0xf38>
   12c4c:	mov	fp, r0
   12c50:	b	12d54 <__assert_fail@plt+0x2048>
   12c54:	mov	sl, r7
   12c58:	ldr	r3, [sp, #72]	; 0x48
   12c5c:	cmp	r3, #0
   12c60:	moveq	r2, #0
   12c64:	andne	r2, r2, #1
   12c68:	cmp	r2, #0
   12c6c:	beq	12c9c <__assert_fail@plt+0x1f90>
   12c70:	mov	r2, r3
   12c74:	ldrb	r3, [r3]
   12c78:	cmp	r3, #0
   12c7c:	beq	12c9c <__assert_fail@plt+0x1f90>
   12c80:	ldr	r1, [sp, #36]	; 0x24
   12c84:	cmp	sl, fp
   12c88:	strbhi	r3, [r1, fp]
   12c8c:	add	fp, fp, #1
   12c90:	ldrb	r3, [r2, #1]!
   12c94:	cmp	r3, #0
   12c98:	bne	12c84 <__assert_fail@plt+0x1f78>
   12c9c:	cmp	sl, fp
   12ca0:	movhi	r3, #0
   12ca4:	ldrhi	r2, [sp, #36]	; 0x24
   12ca8:	strbhi	r3, [r2, fp]
   12cac:	b	12d54 <__assert_fail@plt+0x2048>
   12cb0:	mov	r8, sl
   12cb4:	mov	sl, r7
   12cb8:	ldr	r3, [sp, #32]
   12cbc:	str	r3, [sp, #48]	; 0x30
   12cc0:	b	12cfc <__assert_fail@plt+0x1ff0>
   12cc4:	mov	r8, sl
   12cc8:	mov	sl, r7
   12ccc:	b	12cfc <__assert_fail@plt+0x1ff0>
   12cd0:	mov	r8, sl
   12cd4:	mov	sl, r7
   12cd8:	b	12cfc <__assert_fail@plt+0x1ff0>
   12cdc:	andeq	r5, r1, r8, lsr r2
   12ce0:	andeq	r5, r1, r8, asr #4
   12ce4:	andeq	r5, r1, ip, lsr r2
   12ce8:	mov	r8, sl
   12cec:	mov	sl, r7
   12cf0:	b	12cfc <__assert_fail@plt+0x1ff0>
   12cf4:	mov	r8, sl
   12cf8:	mov	sl, r7
   12cfc:	ldr	r3, [sp, #48]	; 0x30
   12d00:	cmp	r8, #2
   12d04:	movne	r3, #0
   12d08:	andeq	r3, r3, #1
   12d0c:	cmp	r3, #0
   12d10:	movne	r8, #4
   12d14:	ldr	r3, [sp, #168]	; 0xa8
   12d18:	str	r3, [sp, #16]
   12d1c:	ldr	r3, [sp, #164]	; 0xa4
   12d20:	str	r3, [sp, #12]
   12d24:	mov	r3, #0
   12d28:	str	r3, [sp, #8]
   12d2c:	ldr	r3, [sp, #156]	; 0x9c
   12d30:	bic	r3, r3, #2
   12d34:	str	r3, [sp, #4]
   12d38:	str	r8, [sp]
   12d3c:	ldr	r3, [sp, #28]
   12d40:	ldr	r2, [sp, #52]	; 0x34
   12d44:	mov	r1, sl
   12d48:	ldr	r0, [sp, #36]	; 0x24
   12d4c:	bl	11c44 <__assert_fail@plt+0xf38>
   12d50:	mov	fp, r0
   12d54:	mov	r0, fp
   12d58:	add	sp, sp, #116	; 0x74
   12d5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d60:	mov	r8, sl
   12d64:	mov	sl, r7
   12d68:	b	12cfc <__assert_fail@plt+0x1ff0>
   12d6c:	mov	r8, sl
   12d70:	mov	sl, r7
   12d74:	b	12cfc <__assert_fail@plt+0x1ff0>
   12d78:	mov	r8, sl
   12d7c:	mov	sl, r7
   12d80:	b	12cfc <__assert_fail@plt+0x1ff0>
   12d84:	mov	r8, sl
   12d88:	mov	sl, r7
   12d8c:	b	12d14 <__assert_fail@plt+0x2008>
   12d90:	mov	r3, #1
   12d94:	str	r3, [sp, #32]
   12d98:	str	r3, [sp, #48]	; 0x30
   12d9c:	str	r3, [sp, #60]	; 0x3c
   12da0:	ldr	r3, [pc, #-196]	; 12ce4 <__assert_fail@plt+0x1fd8>
   12da4:	str	r3, [sp, #72]	; 0x48
   12da8:	mov	fp, #0
   12dac:	mov	sl, #5
   12db0:	b	11d00 <__assert_fail@plt+0xff4>
   12db4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12db8:	sub	sp, sp, #52	; 0x34
   12dbc:	mov	r5, r0
   12dc0:	str	r1, [sp, #24]
   12dc4:	str	r2, [sp, #28]
   12dc8:	mov	r4, r3
   12dcc:	bl	10c58 <__errno_location@plt>
   12dd0:	str	r0, [sp, #32]
   12dd4:	ldr	r3, [r0]
   12dd8:	str	r3, [sp, #36]	; 0x24
   12ddc:	ldr	r3, [pc, #396]	; 12f70 <__assert_fail@plt+0x2264>
   12de0:	ldr	r6, [r3]
   12de4:	cmn	r5, #-2147483647	; 0x80000001
   12de8:	movne	r3, #0
   12dec:	moveq	r3, #1
   12df0:	orrs	r3, r3, r5, lsr #31
   12df4:	bne	12f34 <__assert_fail@plt+0x2228>
   12df8:	ldr	r3, [pc, #368]	; 12f70 <__assert_fail@plt+0x2264>
   12dfc:	ldr	r2, [r3, #4]
   12e00:	cmp	r5, r2
   12e04:	blt	12e6c <__assert_fail@plt+0x2160>
   12e08:	str	r2, [sp, #44]	; 0x2c
   12e0c:	add	r3, r3, #8
   12e10:	cmp	r6, r3
   12e14:	beq	12f38 <__assert_fail@plt+0x222c>
   12e18:	sub	r2, r5, r2
   12e1c:	mov	r3, #8
   12e20:	str	r3, [sp]
   12e24:	mvn	r3, #-2147483648	; 0x80000000
   12e28:	add	r2, r2, #1
   12e2c:	add	r1, sp, #44	; 0x2c
   12e30:	mov	r0, r6
   12e34:	bl	13cb8 <__assert_fail@plt+0x2fac>
   12e38:	mov	r6, r0
   12e3c:	ldr	r3, [pc, #300]	; 12f70 <__assert_fail@plt+0x2264>
   12e40:	str	r0, [r3]
   12e44:	ldr	r7, [pc, #292]	; 12f70 <__assert_fail@plt+0x2264>
   12e48:	ldr	r0, [r7, #4]
   12e4c:	ldr	r2, [sp, #44]	; 0x2c
   12e50:	sub	r2, r2, r0
   12e54:	lsl	r2, r2, #3
   12e58:	mov	r1, #0
   12e5c:	add	r0, r6, r0, lsl #3
   12e60:	bl	10c70 <memset@plt>
   12e64:	ldr	r3, [sp, #44]	; 0x2c
   12e68:	str	r3, [r7, #4]
   12e6c:	add	fp, r6, r5, lsl #3
   12e70:	ldr	r8, [r6, r5, lsl #3]
   12e74:	ldr	r7, [fp, #4]
   12e78:	ldr	r9, [r4, #4]
   12e7c:	orr	r9, r9, #1
   12e80:	add	sl, r4, #8
   12e84:	ldr	r3, [r4, #44]	; 0x2c
   12e88:	str	r3, [sp, #16]
   12e8c:	ldr	r3, [r4, #40]	; 0x28
   12e90:	str	r3, [sp, #12]
   12e94:	str	sl, [sp, #8]
   12e98:	str	r9, [sp, #4]
   12e9c:	ldr	r3, [r4]
   12ea0:	str	r3, [sp]
   12ea4:	ldr	r3, [sp, #28]
   12ea8:	ldr	r2, [sp, #24]
   12eac:	mov	r1, r8
   12eb0:	mov	r0, r7
   12eb4:	bl	11c44 <__assert_fail@plt+0xf38>
   12eb8:	cmp	r8, r0
   12ebc:	bhi	12f1c <__assert_fail@plt+0x2210>
   12ec0:	add	r8, r0, #1
   12ec4:	str	r8, [r6, r5, lsl #3]
   12ec8:	ldr	r3, [pc, #164]	; 12f74 <__assert_fail@plt+0x2268>
   12ecc:	cmp	r7, r3
   12ed0:	beq	12edc <__assert_fail@plt+0x21d0>
   12ed4:	mov	r0, r7
   12ed8:	bl	14344 <__assert_fail@plt+0x3638>
   12edc:	mov	r0, r8
   12ee0:	bl	13b34 <__assert_fail@plt+0x2e28>
   12ee4:	mov	r7, r0
   12ee8:	str	r0, [fp, #4]
   12eec:	ldr	r3, [r4, #44]	; 0x2c
   12ef0:	str	r3, [sp, #16]
   12ef4:	ldr	r3, [r4, #40]	; 0x28
   12ef8:	str	r3, [sp, #12]
   12efc:	str	sl, [sp, #8]
   12f00:	str	r9, [sp, #4]
   12f04:	ldr	r3, [r4]
   12f08:	str	r3, [sp]
   12f0c:	ldr	r3, [sp, #28]
   12f10:	ldr	r2, [sp, #24]
   12f14:	mov	r1, r8
   12f18:	bl	11c44 <__assert_fail@plt+0xf38>
   12f1c:	ldr	r3, [sp, #32]
   12f20:	ldr	r2, [sp, #36]	; 0x24
   12f24:	str	r2, [r3]
   12f28:	mov	r0, r7
   12f2c:	add	sp, sp, #52	; 0x34
   12f30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f34:	bl	10d00 <abort@plt>
   12f38:	sub	r2, r5, r2
   12f3c:	mov	r3, #8
   12f40:	str	r3, [sp]
   12f44:	mvn	r3, #-2147483648	; 0x80000000
   12f48:	add	r2, r2, #1
   12f4c:	add	r1, sp, #44	; 0x2c
   12f50:	mov	r0, #0
   12f54:	bl	13cb8 <__assert_fail@plt+0x2fac>
   12f58:	mov	r6, r0
   12f5c:	ldr	r3, [pc, #12]	; 12f70 <__assert_fail@plt+0x2264>
   12f60:	str	r0, [r3], #8
   12f64:	ldm	r3, {r0, r1}
   12f68:	stm	r6, {r0, r1}
   12f6c:	b	12e44 <__assert_fail@plt+0x2138>
   12f70:	ldrdeq	r6, [r2], -r4
   12f74:	andeq	r6, r2, r8, lsr r1
   12f78:	push	{r4, r5, r6, lr}
   12f7c:	mov	r4, r0
   12f80:	bl	10c58 <__errno_location@plt>
   12f84:	mov	r5, r0
   12f88:	ldr	r6, [r0]
   12f8c:	cmp	r4, #0
   12f90:	ldr	r3, [pc, #20]	; 12fac <__assert_fail@plt+0x22a0>
   12f94:	moveq	r4, r3
   12f98:	mov	r1, #48	; 0x30
   12f9c:	mov	r0, r4
   12fa0:	bl	14020 <__assert_fail@plt+0x3314>
   12fa4:	str	r6, [r5]
   12fa8:	pop	{r4, r5, r6, pc}
   12fac:	andeq	r6, r2, r8, lsr r2
   12fb0:	subs	r3, r0, #0
   12fb4:	ldr	r2, [pc, #8]	; 12fc4 <__assert_fail@plt+0x22b8>
   12fb8:	moveq	r3, r2
   12fbc:	ldr	r0, [r3]
   12fc0:	bx	lr
   12fc4:	andeq	r6, r2, r8, lsr r2
   12fc8:	subs	r3, r0, #0
   12fcc:	ldr	r2, [pc, #8]	; 12fdc <__assert_fail@plt+0x22d0>
   12fd0:	moveq	r3, r2
   12fd4:	str	r1, [r3]
   12fd8:	bx	lr
   12fdc:	andeq	r6, r2, r8, lsr r2
   12fe0:	push	{lr}		; (str lr, [sp, #-4]!)
   12fe4:	subs	r3, r0, #0
   12fe8:	ldr	r0, [pc, #44]	; 1301c <__assert_fail@plt+0x2310>
   12fec:	moveq	r3, r0
   12ff0:	add	r3, r3, #8
   12ff4:	lsr	lr, r1, #5
   12ff8:	and	r1, r1, #31
   12ffc:	ldr	ip, [r3, lr, lsl #2]
   13000:	lsr	r0, ip, r1
   13004:	eor	r2, r2, r0
   13008:	and	r2, r2, #1
   1300c:	eor	r1, ip, r2, lsl r1
   13010:	str	r1, [r3, lr, lsl #2]
   13014:	and	r0, r0, #1
   13018:	pop	{pc}		; (ldr pc, [sp], #4)
   1301c:	andeq	r6, r2, r8, lsr r2
   13020:	subs	r3, r0, #0
   13024:	ldr	r2, [pc, #12]	; 13038 <__assert_fail@plt+0x232c>
   13028:	moveq	r3, r2
   1302c:	ldr	r0, [r3, #4]
   13030:	str	r1, [r3, #4]
   13034:	bx	lr
   13038:	andeq	r6, r2, r8, lsr r2
   1303c:	subs	r3, r0, #0
   13040:	ldr	r0, [pc, #40]	; 13070 <__assert_fail@plt+0x2364>
   13044:	moveq	r3, r0
   13048:	mov	r0, #10
   1304c:	str	r0, [r3]
   13050:	cmp	r2, #0
   13054:	cmpne	r1, #0
   13058:	beq	13068 <__assert_fail@plt+0x235c>
   1305c:	str	r1, [r3, #40]	; 0x28
   13060:	str	r2, [r3, #44]	; 0x2c
   13064:	bx	lr
   13068:	push	{r4, lr}
   1306c:	bl	10d00 <abort@plt>
   13070:	andeq	r6, r2, r8, lsr r2
   13074:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13078:	sub	sp, sp, #24
   1307c:	mov	r7, r0
   13080:	mov	r8, r1
   13084:	mov	r9, r2
   13088:	mov	sl, r3
   1308c:	ldr	r4, [sp, #56]	; 0x38
   13090:	cmp	r4, #0
   13094:	ldr	r3, [pc, #84]	; 130f0 <__assert_fail@plt+0x23e4>
   13098:	moveq	r4, r3
   1309c:	bl	10c58 <__errno_location@plt>
   130a0:	mov	r5, r0
   130a4:	ldr	r6, [r0]
   130a8:	ldr	r3, [r4, #44]	; 0x2c
   130ac:	str	r3, [sp, #16]
   130b0:	ldr	r3, [r4, #40]	; 0x28
   130b4:	str	r3, [sp, #12]
   130b8:	add	r3, r4, #8
   130bc:	str	r3, [sp, #8]
   130c0:	ldr	r3, [r4, #4]
   130c4:	str	r3, [sp, #4]
   130c8:	ldr	r3, [r4]
   130cc:	str	r3, [sp]
   130d0:	mov	r3, sl
   130d4:	mov	r2, r9
   130d8:	mov	r1, r8
   130dc:	mov	r0, r7
   130e0:	bl	11c44 <__assert_fail@plt+0xf38>
   130e4:	str	r6, [r5]
   130e8:	add	sp, sp, #24
   130ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   130f0:	andeq	r6, r2, r8, lsr r2
   130f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130f8:	sub	sp, sp, #44	; 0x2c
   130fc:	str	r0, [sp, #28]
   13100:	str	r1, [sp, #32]
   13104:	mov	r6, r2
   13108:	subs	r4, r3, #0
   1310c:	ldr	r3, [pc, #172]	; 131c0 <__assert_fail@plt+0x24b4>
   13110:	moveq	r4, r3
   13114:	bl	10c58 <__errno_location@plt>
   13118:	mov	r7, r0
   1311c:	ldr	fp, [r0]
   13120:	ldr	r5, [r4, #4]
   13124:	cmp	r6, #0
   13128:	orreq	r5, r5, #1
   1312c:	add	r9, r4, #8
   13130:	ldr	r3, [r4, #44]	; 0x2c
   13134:	str	r3, [sp, #16]
   13138:	ldr	r3, [r4, #40]	; 0x28
   1313c:	str	r3, [sp, #12]
   13140:	str	r9, [sp, #8]
   13144:	str	r5, [sp, #4]
   13148:	ldr	r3, [r4]
   1314c:	str	r3, [sp]
   13150:	ldr	r3, [sp, #32]
   13154:	ldr	r2, [sp, #28]
   13158:	mov	r1, #0
   1315c:	mov	r0, r1
   13160:	bl	11c44 <__assert_fail@plt+0xf38>
   13164:	mov	sl, r0
   13168:	add	r8, r0, #1
   1316c:	mov	r0, r8
   13170:	bl	13b34 <__assert_fail@plt+0x2e28>
   13174:	str	r0, [sp, #36]	; 0x24
   13178:	ldr	r3, [r4, #44]	; 0x2c
   1317c:	str	r3, [sp, #16]
   13180:	ldr	r3, [r4, #40]	; 0x28
   13184:	str	r3, [sp, #12]
   13188:	str	r9, [sp, #8]
   1318c:	str	r5, [sp, #4]
   13190:	ldr	r3, [r4]
   13194:	str	r3, [sp]
   13198:	ldr	r3, [sp, #32]
   1319c:	ldr	r2, [sp, #28]
   131a0:	mov	r1, r8
   131a4:	bl	11c44 <__assert_fail@plt+0xf38>
   131a8:	str	fp, [r7]
   131ac:	cmp	r6, #0
   131b0:	strne	sl, [r6]
   131b4:	ldr	r0, [sp, #36]	; 0x24
   131b8:	add	sp, sp, #44	; 0x2c
   131bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131c0:	andeq	r6, r2, r8, lsr r2
   131c4:	push	{r4, lr}
   131c8:	mov	r3, r2
   131cc:	mov	r2, #0
   131d0:	bl	130f4 <__assert_fail@plt+0x23e8>
   131d4:	pop	{r4, pc}
   131d8:	push	{r4, r5, r6, r7, r8, lr}
   131dc:	ldr	r3, [pc, #140]	; 13270 <__assert_fail@plt+0x2564>
   131e0:	ldr	r7, [r3]
   131e4:	ldr	r3, [r3, #4]
   131e8:	cmp	r3, #1
   131ec:	ble	13218 <__assert_fail@plt+0x250c>
   131f0:	mov	r5, r7
   131f4:	mov	r4, #1
   131f8:	ldr	r6, [pc, #112]	; 13270 <__assert_fail@plt+0x2564>
   131fc:	ldr	r0, [r5, #12]
   13200:	bl	14344 <__assert_fail@plt+0x3638>
   13204:	add	r4, r4, #1
   13208:	add	r5, r5, #8
   1320c:	ldr	r3, [r6, #4]
   13210:	cmp	r3, r4
   13214:	bgt	131fc <__assert_fail@plt+0x24f0>
   13218:	ldr	r0, [r7, #4]
   1321c:	ldr	r3, [pc, #80]	; 13274 <__assert_fail@plt+0x2568>
   13220:	cmp	r0, r3
   13224:	beq	13240 <__assert_fail@plt+0x2534>
   13228:	bl	14344 <__assert_fail@plt+0x3638>
   1322c:	ldr	r3, [pc, #60]	; 13270 <__assert_fail@plt+0x2564>
   13230:	mov	r2, #256	; 0x100
   13234:	str	r2, [r3, #8]
   13238:	ldr	r2, [pc, #52]	; 13274 <__assert_fail@plt+0x2568>
   1323c:	str	r2, [r3, #12]
   13240:	ldr	r3, [pc, #48]	; 13278 <__assert_fail@plt+0x256c>
   13244:	cmp	r7, r3
   13248:	beq	13260 <__assert_fail@plt+0x2554>
   1324c:	mov	r0, r7
   13250:	bl	14344 <__assert_fail@plt+0x3638>
   13254:	ldr	r3, [pc, #20]	; 13270 <__assert_fail@plt+0x2564>
   13258:	add	r2, r3, #8
   1325c:	str	r2, [r3]
   13260:	mov	r2, #1
   13264:	ldr	r3, [pc, #4]	; 13270 <__assert_fail@plt+0x2564>
   13268:	str	r2, [r3, #4]
   1326c:	pop	{r4, r5, r6, r7, r8, pc}
   13270:	ldrdeq	r6, [r2], -r4
   13274:	andeq	r6, r2, r8, lsr r1
   13278:	ldrdeq	r6, [r2], -ip
   1327c:	push	{r4, lr}
   13280:	ldr	r3, [pc, #8]	; 13290 <__assert_fail@plt+0x2584>
   13284:	mvn	r2, #0
   13288:	bl	12db4 <__assert_fail@plt+0x20a8>
   1328c:	pop	{r4, pc}
   13290:	andeq	r6, r2, r8, lsr r2
   13294:	push	{r4, lr}
   13298:	ldr	r3, [pc, #4]	; 132a4 <__assert_fail@plt+0x2598>
   1329c:	bl	12db4 <__assert_fail@plt+0x20a8>
   132a0:	pop	{r4, pc}
   132a4:	andeq	r6, r2, r8, lsr r2
   132a8:	push	{r4, lr}
   132ac:	mov	r1, r0
   132b0:	mov	r0, #0
   132b4:	bl	1327c <__assert_fail@plt+0x2570>
   132b8:	pop	{r4, pc}
   132bc:	push	{r4, lr}
   132c0:	mov	r2, r1
   132c4:	mov	r1, r0
   132c8:	mov	r0, #0
   132cc:	bl	13294 <__assert_fail@plt+0x2588>
   132d0:	pop	{r4, pc}
   132d4:	push	{r4, r5, lr}
   132d8:	sub	sp, sp, #52	; 0x34
   132dc:	mov	r4, r0
   132e0:	mov	r5, r2
   132e4:	mov	r0, sp
   132e8:	bl	11adc <__assert_fail@plt+0xdd0>
   132ec:	mov	r3, sp
   132f0:	mvn	r2, #0
   132f4:	mov	r1, r5
   132f8:	mov	r0, r4
   132fc:	bl	12db4 <__assert_fail@plt+0x20a8>
   13300:	add	sp, sp, #52	; 0x34
   13304:	pop	{r4, r5, pc}
   13308:	push	{r4, r5, r6, lr}
   1330c:	sub	sp, sp, #48	; 0x30
   13310:	mov	r4, r0
   13314:	mov	r5, r2
   13318:	mov	r6, r3
   1331c:	mov	r0, sp
   13320:	bl	11adc <__assert_fail@plt+0xdd0>
   13324:	mov	r3, sp
   13328:	mov	r2, r6
   1332c:	mov	r1, r5
   13330:	mov	r0, r4
   13334:	bl	12db4 <__assert_fail@plt+0x20a8>
   13338:	add	sp, sp, #48	; 0x30
   1333c:	pop	{r4, r5, r6, pc}
   13340:	push	{r4, lr}
   13344:	mov	r2, r1
   13348:	mov	r1, r0
   1334c:	mov	r0, #0
   13350:	bl	132d4 <__assert_fail@plt+0x25c8>
   13354:	pop	{r4, pc}
   13358:	push	{r4, lr}
   1335c:	mov	r3, r2
   13360:	mov	r2, r1
   13364:	mov	r1, r0
   13368:	mov	r0, #0
   1336c:	bl	13308 <__assert_fail@plt+0x25fc>
   13370:	pop	{r4, pc}
   13374:	push	{r4, r5, r6, lr}
   13378:	sub	sp, sp, #48	; 0x30
   1337c:	mov	r4, r0
   13380:	mov	r5, r1
   13384:	mov	r6, r2
   13388:	mov	ip, sp
   1338c:	ldr	lr, [pc, #64]	; 133d4 <__assert_fail@plt+0x26c8>
   13390:	ldm	lr!, {r0, r1, r2, r3}
   13394:	stmia	ip!, {r0, r1, r2, r3}
   13398:	ldm	lr!, {r0, r1, r2, r3}
   1339c:	stmia	ip!, {r0, r1, r2, r3}
   133a0:	ldm	lr, {r0, r1, r2, r3}
   133a4:	stm	ip, {r0, r1, r2, r3}
   133a8:	mov	r2, #1
   133ac:	mov	r1, r6
   133b0:	mov	r0, sp
   133b4:	bl	12fe0 <__assert_fail@plt+0x22d4>
   133b8:	mov	r3, sp
   133bc:	mov	r2, r5
   133c0:	mov	r1, r4
   133c4:	mov	r0, #0
   133c8:	bl	12db4 <__assert_fail@plt+0x20a8>
   133cc:	add	sp, sp, #48	; 0x30
   133d0:	pop	{r4, r5, r6, pc}
   133d4:	andeq	r6, r2, r8, lsr r2
   133d8:	push	{r4, lr}
   133dc:	mov	r2, r1
   133e0:	mvn	r1, #0
   133e4:	bl	13374 <__assert_fail@plt+0x2668>
   133e8:	pop	{r4, pc}
   133ec:	push	{r4, lr}
   133f0:	mov	r1, #58	; 0x3a
   133f4:	bl	133d8 <__assert_fail@plt+0x26cc>
   133f8:	pop	{r4, pc}
   133fc:	push	{r4, lr}
   13400:	mov	r2, #58	; 0x3a
   13404:	bl	13374 <__assert_fail@plt+0x2668>
   13408:	pop	{r4, pc}
   1340c:	push	{r4, r5, lr}
   13410:	sub	sp, sp, #100	; 0x64
   13414:	mov	r4, r0
   13418:	mov	r5, r2
   1341c:	mov	r0, sp
   13420:	bl	11adc <__assert_fail@plt+0xdd0>
   13424:	add	lr, sp, #48	; 0x30
   13428:	mov	ip, sp
   1342c:	ldm	ip!, {r0, r1, r2, r3}
   13430:	stmia	lr!, {r0, r1, r2, r3}
   13434:	ldm	ip!, {r0, r1, r2, r3}
   13438:	stmia	lr!, {r0, r1, r2, r3}
   1343c:	ldm	ip, {r0, r1, r2, r3}
   13440:	stm	lr, {r0, r1, r2, r3}
   13444:	mov	r2, #1
   13448:	mov	r1, #58	; 0x3a
   1344c:	add	r0, sp, #48	; 0x30
   13450:	bl	12fe0 <__assert_fail@plt+0x22d4>
   13454:	add	r3, sp, #48	; 0x30
   13458:	mvn	r2, #0
   1345c:	mov	r1, r5
   13460:	mov	r0, r4
   13464:	bl	12db4 <__assert_fail@plt+0x20a8>
   13468:	add	sp, sp, #100	; 0x64
   1346c:	pop	{r4, r5, pc}
   13470:	push	{r4, r5, r6, r7, lr}
   13474:	sub	sp, sp, #52	; 0x34
   13478:	mov	r4, r0
   1347c:	mov	r6, r1
   13480:	mov	r7, r2
   13484:	mov	r5, r3
   13488:	mov	ip, sp
   1348c:	ldr	lr, [pc, #64]	; 134d4 <__assert_fail@plt+0x27c8>
   13490:	ldm	lr!, {r0, r1, r2, r3}
   13494:	stmia	ip!, {r0, r1, r2, r3}
   13498:	ldm	lr!, {r0, r1, r2, r3}
   1349c:	stmia	ip!, {r0, r1, r2, r3}
   134a0:	ldm	lr, {r0, r1, r2, r3}
   134a4:	stm	ip, {r0, r1, r2, r3}
   134a8:	mov	r2, r7
   134ac:	mov	r1, r6
   134b0:	mov	r0, sp
   134b4:	bl	1303c <__assert_fail@plt+0x2330>
   134b8:	mov	r3, sp
   134bc:	ldr	r2, [sp, #72]	; 0x48
   134c0:	mov	r1, r5
   134c4:	mov	r0, r4
   134c8:	bl	12db4 <__assert_fail@plt+0x20a8>
   134cc:	add	sp, sp, #52	; 0x34
   134d0:	pop	{r4, r5, r6, r7, pc}
   134d4:	andeq	r6, r2, r8, lsr r2
   134d8:	push	{lr}		; (str lr, [sp, #-4]!)
   134dc:	sub	sp, sp, #12
   134e0:	mvn	ip, #0
   134e4:	str	ip, [sp]
   134e8:	bl	13470 <__assert_fail@plt+0x2764>
   134ec:	add	sp, sp, #12
   134f0:	pop	{pc}		; (ldr pc, [sp], #4)
   134f4:	push	{r4, lr}
   134f8:	mov	r3, r2
   134fc:	mov	r2, r1
   13500:	mov	r1, r0
   13504:	mov	r0, #0
   13508:	bl	134d8 <__assert_fail@plt+0x27cc>
   1350c:	pop	{r4, pc}
   13510:	push	{lr}		; (str lr, [sp, #-4]!)
   13514:	sub	sp, sp, #12
   13518:	str	r3, [sp]
   1351c:	mov	r3, r2
   13520:	mov	r2, r1
   13524:	mov	r1, r0
   13528:	mov	r0, #0
   1352c:	bl	13470 <__assert_fail@plt+0x2764>
   13530:	add	sp, sp, #12
   13534:	pop	{pc}		; (ldr pc, [sp], #4)
   13538:	push	{r4, lr}
   1353c:	ldr	r3, [pc, #4]	; 13548 <__assert_fail@plt+0x283c>
   13540:	bl	12db4 <__assert_fail@plt+0x20a8>
   13544:	pop	{r4, pc}
   13548:	andeq	r6, r2, r4, ror #1
   1354c:	push	{r4, lr}
   13550:	mov	r2, r1
   13554:	mov	r1, r0
   13558:	mov	r0, #0
   1355c:	bl	13538 <__assert_fail@plt+0x282c>
   13560:	pop	{r4, pc}
   13564:	push	{r4, lr}
   13568:	mvn	r2, #0
   1356c:	bl	13538 <__assert_fail@plt+0x282c>
   13570:	pop	{r4, pc}
   13574:	push	{r4, lr}
   13578:	mov	r1, r0
   1357c:	mov	r0, #0
   13580:	bl	13564 <__assert_fail@plt+0x2858>
   13584:	pop	{r4, pc}
   13588:	push	{r4, r5, r6, lr}
   1358c:	sub	sp, sp, #32
   13590:	mov	r4, r0
   13594:	ldr	r5, [sp, #48]	; 0x30
   13598:	ldr	r6, [sp, #52]	; 0x34
   1359c:	cmp	r1, #0
   135a0:	beq	13658 <__assert_fail@plt+0x294c>
   135a4:	str	r3, [sp, #4]
   135a8:	str	r2, [sp]
   135ac:	mov	r3, r1
   135b0:	ldr	r2, [pc, #940]	; 13964 <__assert_fail@plt+0x2c58>
   135b4:	mov	r1, #1
   135b8:	bl	10c94 <__fprintf_chk@plt>
   135bc:	mov	r2, #5
   135c0:	ldr	r1, [pc, #928]	; 13968 <__assert_fail@plt+0x2c5c>
   135c4:	mov	r0, #0
   135c8:	bl	10b80 <dcgettext@plt>
   135cc:	ldr	r3, [pc, #920]	; 1396c <__assert_fail@plt+0x2c60>
   135d0:	str	r3, [sp]
   135d4:	mov	r3, r0
   135d8:	ldr	r2, [pc, #912]	; 13970 <__assert_fail@plt+0x2c64>
   135dc:	mov	r1, #1
   135e0:	mov	r0, r4
   135e4:	bl	10c94 <__fprintf_chk@plt>
   135e8:	mov	r1, r4
   135ec:	mov	r0, #10
   135f0:	bl	10b74 <fputc_unlocked@plt>
   135f4:	mov	r2, #5
   135f8:	ldr	r1, [pc, #884]	; 13974 <__assert_fail@plt+0x2c68>
   135fc:	mov	r0, #0
   13600:	bl	10b80 <dcgettext@plt>
   13604:	ldr	r3, [pc, #876]	; 13978 <__assert_fail@plt+0x2c6c>
   13608:	mov	r2, r0
   1360c:	mov	r1, #1
   13610:	mov	r0, r4
   13614:	bl	10c94 <__fprintf_chk@plt>
   13618:	mov	r1, r4
   1361c:	mov	r0, #10
   13620:	bl	10b74 <fputc_unlocked@plt>
   13624:	cmp	r6, #9
   13628:	ldrls	pc, [pc, r6, lsl #2]
   1362c:	b	138fc <__assert_fail@plt+0x2bf0>
   13630:	muleq	r1, r4, r6
   13634:	andeq	r3, r1, r0, ror r6
   13638:	muleq	r1, ip, r6
   1363c:	andeq	r3, r1, ip, asr #13
   13640:	andeq	r3, r1, r4, lsl #14
   13644:	andeq	r3, r1, r4, asr #14
   13648:	andeq	r3, r1, ip, lsl #15
   1364c:	ldrdeq	r3, [r1], -ip
   13650:	andeq	r3, r1, r4, lsr r8
   13654:	muleq	r1, r4, r8
   13658:	str	r3, [sp]
   1365c:	mov	r3, r2
   13660:	ldr	r2, [pc, #788]	; 1397c <__assert_fail@plt+0x2c70>
   13664:	mov	r1, #1
   13668:	bl	10c94 <__fprintf_chk@plt>
   1366c:	b	135bc <__assert_fail@plt+0x28b0>
   13670:	mov	r2, #5
   13674:	ldr	r1, [pc, #772]	; 13980 <__assert_fail@plt+0x2c74>
   13678:	mov	r0, #0
   1367c:	bl	10b80 <dcgettext@plt>
   13680:	ldr	r3, [r5]
   13684:	mov	r2, r0
   13688:	mov	r1, #1
   1368c:	mov	r0, r4
   13690:	bl	10c94 <__fprintf_chk@plt>
   13694:	add	sp, sp, #32
   13698:	pop	{r4, r5, r6, pc}
   1369c:	mov	r2, #5
   136a0:	ldr	r1, [pc, #732]	; 13984 <__assert_fail@plt+0x2c78>
   136a4:	mov	r0, #0
   136a8:	bl	10b80 <dcgettext@plt>
   136ac:	ldr	r3, [r5]
   136b0:	ldr	r2, [r5, #4]
   136b4:	str	r2, [sp]
   136b8:	mov	r2, r0
   136bc:	mov	r1, #1
   136c0:	mov	r0, r4
   136c4:	bl	10c94 <__fprintf_chk@plt>
   136c8:	b	13694 <__assert_fail@plt+0x2988>
   136cc:	mov	r2, #5
   136d0:	ldr	r1, [pc, #688]	; 13988 <__assert_fail@plt+0x2c7c>
   136d4:	mov	r0, #0
   136d8:	bl	10b80 <dcgettext@plt>
   136dc:	ldr	r3, [r5]
   136e0:	ldr	r2, [r5, #8]
   136e4:	str	r2, [sp, #4]
   136e8:	ldr	r2, [r5, #4]
   136ec:	str	r2, [sp]
   136f0:	mov	r2, r0
   136f4:	mov	r1, #1
   136f8:	mov	r0, r4
   136fc:	bl	10c94 <__fprintf_chk@plt>
   13700:	b	13694 <__assert_fail@plt+0x2988>
   13704:	mov	r2, #5
   13708:	ldr	r1, [pc, #636]	; 1398c <__assert_fail@plt+0x2c80>
   1370c:	mov	r0, #0
   13710:	bl	10b80 <dcgettext@plt>
   13714:	ldr	r3, [r5]
   13718:	ldr	r2, [r5, #12]
   1371c:	str	r2, [sp, #8]
   13720:	ldr	r2, [r5, #8]
   13724:	str	r2, [sp, #4]
   13728:	ldr	r2, [r5, #4]
   1372c:	str	r2, [sp]
   13730:	mov	r2, r0
   13734:	mov	r1, #1
   13738:	mov	r0, r4
   1373c:	bl	10c94 <__fprintf_chk@plt>
   13740:	b	13694 <__assert_fail@plt+0x2988>
   13744:	mov	r2, #5
   13748:	ldr	r1, [pc, #576]	; 13990 <__assert_fail@plt+0x2c84>
   1374c:	mov	r0, #0
   13750:	bl	10b80 <dcgettext@plt>
   13754:	ldr	r3, [r5]
   13758:	ldr	r2, [r5, #16]
   1375c:	str	r2, [sp, #12]
   13760:	ldr	r2, [r5, #12]
   13764:	str	r2, [sp, #8]
   13768:	ldr	r2, [r5, #8]
   1376c:	str	r2, [sp, #4]
   13770:	ldr	r2, [r5, #4]
   13774:	str	r2, [sp]
   13778:	mov	r2, r0
   1377c:	mov	r1, #1
   13780:	mov	r0, r4
   13784:	bl	10c94 <__fprintf_chk@plt>
   13788:	b	13694 <__assert_fail@plt+0x2988>
   1378c:	mov	r2, #5
   13790:	ldr	r1, [pc, #508]	; 13994 <__assert_fail@plt+0x2c88>
   13794:	mov	r0, #0
   13798:	bl	10b80 <dcgettext@plt>
   1379c:	ldr	r3, [r5]
   137a0:	ldr	r2, [r5, #20]
   137a4:	str	r2, [sp, #16]
   137a8:	ldr	r2, [r5, #16]
   137ac:	str	r2, [sp, #12]
   137b0:	ldr	r2, [r5, #12]
   137b4:	str	r2, [sp, #8]
   137b8:	ldr	r2, [r5, #8]
   137bc:	str	r2, [sp, #4]
   137c0:	ldr	r2, [r5, #4]
   137c4:	str	r2, [sp]
   137c8:	mov	r2, r0
   137cc:	mov	r1, #1
   137d0:	mov	r0, r4
   137d4:	bl	10c94 <__fprintf_chk@plt>
   137d8:	b	13694 <__assert_fail@plt+0x2988>
   137dc:	mov	r2, #5
   137e0:	ldr	r1, [pc, #432]	; 13998 <__assert_fail@plt+0x2c8c>
   137e4:	mov	r0, #0
   137e8:	bl	10b80 <dcgettext@plt>
   137ec:	ldr	r3, [r5]
   137f0:	ldr	r2, [r5, #24]
   137f4:	str	r2, [sp, #20]
   137f8:	ldr	r2, [r5, #20]
   137fc:	str	r2, [sp, #16]
   13800:	ldr	r2, [r5, #16]
   13804:	str	r2, [sp, #12]
   13808:	ldr	r2, [r5, #12]
   1380c:	str	r2, [sp, #8]
   13810:	ldr	r2, [r5, #8]
   13814:	str	r2, [sp, #4]
   13818:	ldr	r2, [r5, #4]
   1381c:	str	r2, [sp]
   13820:	mov	r2, r0
   13824:	mov	r1, #1
   13828:	mov	r0, r4
   1382c:	bl	10c94 <__fprintf_chk@plt>
   13830:	b	13694 <__assert_fail@plt+0x2988>
   13834:	mov	r2, #5
   13838:	ldr	r1, [pc, #348]	; 1399c <__assert_fail@plt+0x2c90>
   1383c:	mov	r0, #0
   13840:	bl	10b80 <dcgettext@plt>
   13844:	ldr	r3, [r5]
   13848:	ldr	r2, [r5, #28]
   1384c:	str	r2, [sp, #24]
   13850:	ldr	r2, [r5, #24]
   13854:	str	r2, [sp, #20]
   13858:	ldr	r2, [r5, #20]
   1385c:	str	r2, [sp, #16]
   13860:	ldr	r2, [r5, #16]
   13864:	str	r2, [sp, #12]
   13868:	ldr	r2, [r5, #12]
   1386c:	str	r2, [sp, #8]
   13870:	ldr	r2, [r5, #8]
   13874:	str	r2, [sp, #4]
   13878:	ldr	r2, [r5, #4]
   1387c:	str	r2, [sp]
   13880:	mov	r2, r0
   13884:	mov	r1, #1
   13888:	mov	r0, r4
   1388c:	bl	10c94 <__fprintf_chk@plt>
   13890:	b	13694 <__assert_fail@plt+0x2988>
   13894:	mov	r2, #5
   13898:	ldr	r1, [pc, #256]	; 139a0 <__assert_fail@plt+0x2c94>
   1389c:	mov	r0, #0
   138a0:	bl	10b80 <dcgettext@plt>
   138a4:	ldr	r3, [r5]
   138a8:	ldr	r2, [r5, #32]
   138ac:	str	r2, [sp, #28]
   138b0:	ldr	r2, [r5, #28]
   138b4:	str	r2, [sp, #24]
   138b8:	ldr	r2, [r5, #24]
   138bc:	str	r2, [sp, #20]
   138c0:	ldr	r2, [r5, #20]
   138c4:	str	r2, [sp, #16]
   138c8:	ldr	r2, [r5, #16]
   138cc:	str	r2, [sp, #12]
   138d0:	ldr	r2, [r5, #12]
   138d4:	str	r2, [sp, #8]
   138d8:	ldr	r2, [r5, #8]
   138dc:	str	r2, [sp, #4]
   138e0:	ldr	r2, [r5, #4]
   138e4:	str	r2, [sp]
   138e8:	mov	r2, r0
   138ec:	mov	r1, #1
   138f0:	mov	r0, r4
   138f4:	bl	10c94 <__fprintf_chk@plt>
   138f8:	b	13694 <__assert_fail@plt+0x2988>
   138fc:	mov	r2, #5
   13900:	ldr	r1, [pc, #156]	; 139a4 <__assert_fail@plt+0x2c98>
   13904:	mov	r0, #0
   13908:	bl	10b80 <dcgettext@plt>
   1390c:	ldr	r3, [r5]
   13910:	ldr	r2, [r5, #32]
   13914:	str	r2, [sp, #28]
   13918:	ldr	r2, [r5, #28]
   1391c:	str	r2, [sp, #24]
   13920:	ldr	r2, [r5, #24]
   13924:	str	r2, [sp, #20]
   13928:	ldr	r2, [r5, #20]
   1392c:	str	r2, [sp, #16]
   13930:	ldr	r2, [r5, #16]
   13934:	str	r2, [sp, #12]
   13938:	ldr	r2, [r5, #12]
   1393c:	str	r2, [sp, #8]
   13940:	ldr	r2, [r5, #8]
   13944:	str	r2, [sp, #4]
   13948:	ldr	r2, [r5, #4]
   1394c:	str	r2, [sp]
   13950:	mov	r2, r0
   13954:	mov	r1, #1
   13958:	mov	r0, r4
   1395c:	bl	10c94 <__fprintf_chk@plt>
   13960:	b	13694 <__assert_fail@plt+0x2988>
   13964:			; <UNDEFINED> instruction: 0x000152b4
   13968:	andeq	r5, r1, r8, asr #5
   1396c:	andeq	r0, r0, r6, ror #15
   13970:	andeq	r5, r1, r0, lsr #11
   13974:	andeq	r5, r1, ip, asr #5
   13978:	andeq	r5, r1, r8, ror r3
   1397c:	andeq	r5, r1, r0, asr #5
   13980:	muleq	r1, ip, r3
   13984:	andeq	r5, r1, ip, lsr #7
   13988:	andeq	r5, r1, r4, asr #7
   1398c:	andeq	r5, r1, r0, ror #7
   13990:	andeq	r5, r1, r0, lsl #8
   13994:	andeq	r5, r1, r4, lsr #8
   13998:	andeq	r5, r1, ip, asr #8
   1399c:	andeq	r5, r1, r8, ror r4
   139a0:	andeq	r5, r1, r8, lsr #9
   139a4:	ldrdeq	r5, [r1], -ip
   139a8:	push	{r4, r5, lr}
   139ac:	sub	sp, sp, #12
   139b0:	ldr	r5, [sp, #24]
   139b4:	ldr	ip, [r5]
   139b8:	cmp	ip, #0
   139bc:	beq	139ec <__assert_fail@plt+0x2ce0>
   139c0:	mov	lr, r5
   139c4:	mov	ip, #0
   139c8:	add	ip, ip, #1
   139cc:	ldr	r4, [lr, #4]!
   139d0:	cmp	r4, #0
   139d4:	bne	139c8 <__assert_fail@plt+0x2cbc>
   139d8:	str	ip, [sp, #4]
   139dc:	str	r5, [sp]
   139e0:	bl	13588 <__assert_fail@plt+0x287c>
   139e4:	add	sp, sp, #12
   139e8:	pop	{r4, r5, pc}
   139ec:	mov	ip, #0
   139f0:	b	139d8 <__assert_fail@plt+0x2ccc>
   139f4:	push	{r4, r5, lr}
   139f8:	sub	sp, sp, #52	; 0x34
   139fc:	ldr	r4, [sp, #64]	; 0x40
   13a00:	sub	r4, r4, #4
   13a04:	add	r5, sp, #4
   13a08:	mov	ip, #0
   13a0c:	ldr	lr, [r4, #4]!
   13a10:	str	lr, [r5, #4]!
   13a14:	cmp	lr, #0
   13a18:	beq	13a28 <__assert_fail@plt+0x2d1c>
   13a1c:	add	ip, ip, #1
   13a20:	cmp	ip, #10
   13a24:	bne	13a0c <__assert_fail@plt+0x2d00>
   13a28:	str	ip, [sp, #4]
   13a2c:	add	ip, sp, #8
   13a30:	str	ip, [sp]
   13a34:	bl	13588 <__assert_fail@plt+0x287c>
   13a38:	add	sp, sp, #52	; 0x34
   13a3c:	pop	{r4, r5, pc}
   13a40:	push	{r3}		; (str r3, [sp, #-4]!)
   13a44:	push	{lr}		; (str lr, [sp, #-4]!)
   13a48:	sub	sp, sp, #16
   13a4c:	add	r3, sp, #24
   13a50:	str	r3, [sp, #12]
   13a54:	str	r3, [sp]
   13a58:	ldr	r3, [sp, #20]
   13a5c:	bl	139f4 <__assert_fail@plt+0x2ce8>
   13a60:	add	sp, sp, #16
   13a64:	pop	{lr}		; (ldr lr, [sp], #4)
   13a68:	add	sp, sp, #4
   13a6c:	bx	lr
   13a70:	push	{r4, lr}
   13a74:	ldr	r3, [pc, #112]	; 13aec <__assert_fail@plt+0x2de0>
   13a78:	ldr	r1, [r3]
   13a7c:	mov	r0, #10
   13a80:	bl	10b74 <fputc_unlocked@plt>
   13a84:	mov	r2, #5
   13a88:	ldr	r1, [pc, #96]	; 13af0 <__assert_fail@plt+0x2de4>
   13a8c:	mov	r0, #0
   13a90:	bl	10b80 <dcgettext@plt>
   13a94:	ldr	r2, [pc, #88]	; 13af4 <__assert_fail@plt+0x2de8>
   13a98:	mov	r1, r0
   13a9c:	mov	r0, #1
   13aa0:	bl	10c7c <__printf_chk@plt>
   13aa4:	mov	r2, #5
   13aa8:	ldr	r1, [pc, #72]	; 13af8 <__assert_fail@plt+0x2dec>
   13aac:	mov	r0, #0
   13ab0:	bl	10b80 <dcgettext@plt>
   13ab4:	ldr	r3, [pc, #64]	; 13afc <__assert_fail@plt+0x2df0>
   13ab8:	ldr	r2, [pc, #64]	; 13b00 <__assert_fail@plt+0x2df4>
   13abc:	mov	r1, r0
   13ac0:	mov	r0, #1
   13ac4:	bl	10c7c <__printf_chk@plt>
   13ac8:	mov	r2, #5
   13acc:	ldr	r1, [pc, #48]	; 13b04 <__assert_fail@plt+0x2df8>
   13ad0:	mov	r0, #0
   13ad4:	bl	10b80 <dcgettext@plt>
   13ad8:	ldr	r2, [pc, #40]	; 13b08 <__assert_fail@plt+0x2dfc>
   13adc:	mov	r1, r0
   13ae0:	mov	r0, #1
   13ae4:	bl	10c7c <__printf_chk@plt>
   13ae8:	pop	{r4, pc}
   13aec:	andeq	r6, r2, r4, lsr #2
   13af0:	andeq	r5, r1, r8, lsl r5
   13af4:	andeq	r5, r1, ip, lsr #10
   13af8:	andeq	r5, r1, r4, asr #10
   13afc:	ldrdeq	r4, [r1], -ip
   13b00:	andeq	r5, r1, r4
   13b04:	andeq	r5, r1, r8, asr r5
   13b08:	andeq	r5, r1, r0, lsl #11
   13b0c:	push	{r4, lr}
   13b10:	bl	14140 <__assert_fail@plt+0x3434>
   13b14:	cmp	r0, #0
   13b18:	popne	{r4, pc}
   13b1c:	bl	140b0 <__assert_fail@plt+0x33a4>
   13b20:	push	{r4, lr}
   13b24:	bl	14140 <__assert_fail@plt+0x3434>
   13b28:	cmp	r0, #0
   13b2c:	popne	{r4, pc}
   13b30:	bl	140b0 <__assert_fail@plt+0x33a4>
   13b34:	push	{r4, lr}
   13b38:	bl	13b0c <__assert_fail@plt+0x2e00>
   13b3c:	pop	{r4, pc}
   13b40:	push	{r4, r5, r6, lr}
   13b44:	mov	r5, r0
   13b48:	mov	r4, r1
   13b4c:	bl	14170 <__assert_fail@plt+0x3464>
   13b50:	cmp	r0, #0
   13b54:	popne	{r4, r5, r6, pc}
   13b58:	adds	r4, r4, #0
   13b5c:	movne	r4, #1
   13b60:	cmp	r5, #0
   13b64:	orreq	r4, r4, #1
   13b68:	cmp	r4, #0
   13b6c:	popeq	{r4, r5, r6, pc}
   13b70:	bl	140b0 <__assert_fail@plt+0x33a4>
   13b74:	push	{r4, lr}
   13b78:	cmp	r1, #0
   13b7c:	orreq	r1, r1, #1
   13b80:	bl	14170 <__assert_fail@plt+0x3464>
   13b84:	cmp	r0, #0
   13b88:	popne	{r4, pc}
   13b8c:	bl	140b0 <__assert_fail@plt+0x33a4>
   13b90:	push	{r4, r5, r6, lr}
   13b94:	mov	r6, r0
   13b98:	mov	r5, r1
   13b9c:	mov	r4, r2
   13ba0:	bl	144d0 <__assert_fail@plt+0x37c4>
   13ba4:	cmp	r0, #0
   13ba8:	popne	{r4, r5, r6, pc}
   13bac:	cmp	r6, #0
   13bb0:	beq	13bc0 <__assert_fail@plt+0x2eb4>
   13bb4:	cmp	r5, #0
   13bb8:	cmpne	r4, #0
   13bbc:	popeq	{r4, r5, r6, pc}
   13bc0:	bl	140b0 <__assert_fail@plt+0x33a4>
   13bc4:	push	{r4, lr}
   13bc8:	bl	13b90 <__assert_fail@plt+0x2e84>
   13bcc:	pop	{r4, pc}
   13bd0:	push	{r4, lr}
   13bd4:	mov	ip, r1
   13bd8:	mov	r3, r2
   13bdc:	cmp	r2, #0
   13be0:	cmpne	r1, #0
   13be4:	moveq	r3, #1
   13be8:	moveq	ip, r3
   13bec:	mov	r2, r3
   13bf0:	mov	r1, ip
   13bf4:	bl	144d0 <__assert_fail@plt+0x37c4>
   13bf8:	cmp	r0, #0
   13bfc:	popne	{r4, pc}
   13c00:	bl	140b0 <__assert_fail@plt+0x33a4>
   13c04:	push	{r4, lr}
   13c08:	mov	r2, r1
   13c0c:	mov	r1, r0
   13c10:	mov	r0, #0
   13c14:	bl	13b90 <__assert_fail@plt+0x2e84>
   13c18:	pop	{r4, pc}
   13c1c:	push	{r4, lr}
   13c20:	mov	r2, r1
   13c24:	mov	r1, r0
   13c28:	mov	r0, #0
   13c2c:	bl	13bd0 <__assert_fail@plt+0x2ec4>
   13c30:	pop	{r4, pc}
   13c34:	push	{r4, r5, r6, r7, r8, lr}
   13c38:	mov	r5, r1
   13c3c:	mov	r6, r2
   13c40:	ldr	r4, [r1]
   13c44:	subs	r7, r0, #0
   13c48:	beq	13c64 <__assert_fail@plt+0x2f58>
   13c4c:	lsr	r2, r4, #1
   13c50:	add	r3, r2, #1
   13c54:	mvn	r3, r3
   13c58:	cmp	r4, r3
   13c5c:	bls	13c88 <__assert_fail@plt+0x2f7c>
   13c60:	bl	140b0 <__assert_fail@plt+0x33a4>
   13c64:	cmp	r4, #0
   13c68:	bne	13c90 <__assert_fail@plt+0x2f84>
   13c6c:	mov	r1, r2
   13c70:	mov	r0, #64	; 0x40
   13c74:	bl	14624 <__assert_fail@plt+0x3918>
   13c78:	cmp	r0, #0
   13c7c:	movne	r4, r0
   13c80:	addeq	r4, r0, #1
   13c84:	b	13c90 <__assert_fail@plt+0x2f84>
   13c88:	add	r4, r4, #1
   13c8c:	add	r4, r4, r2
   13c90:	mov	r2, r6
   13c94:	mov	r1, r4
   13c98:	mov	r0, r7
   13c9c:	bl	13b90 <__assert_fail@plt+0x2e84>
   13ca0:	str	r4, [r5]
   13ca4:	pop	{r4, r5, r6, r7, r8, pc}
   13ca8:	push	{r4, lr}
   13cac:	mov	r2, #1
   13cb0:	bl	13c34 <__assert_fail@plt+0x2f28>
   13cb4:	pop	{r4, pc}
   13cb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cbc:	sub	sp, sp, #12
   13cc0:	mov	fp, r0
   13cc4:	mov	sl, r1
   13cc8:	mov	r9, r2
   13ccc:	mov	r7, r3
   13cd0:	ldr	r6, [sp, #48]	; 0x30
   13cd4:	ldr	r5, [r1]
   13cd8:	asrs	r4, r5, #1
   13cdc:	bmi	13e38 <__assert_fail@plt+0x312c>
   13ce0:	cmp	r5, #0
   13ce4:	blt	13e4c <__assert_fail@plt+0x3140>
   13ce8:	mvn	r3, #-2147483648	; 0x80000000
   13cec:	sub	r3, r3, r4
   13cf0:	cmp	r5, r3
   13cf4:	movle	r3, #0
   13cf8:	movgt	r3, #1
   13cfc:	cmp	r3, #0
   13d00:	addeq	r4, r4, r5
   13d04:	mvnne	r4, #-2147483648	; 0x80000000
   13d08:	mvn	r8, r7
   13d0c:	lsr	r8, r8, #31
   13d10:	cmp	r7, r4
   13d14:	movge	r3, #0
   13d18:	andlt	r3, r8, #1
   13d1c:	cmp	r3, #0
   13d20:	movne	r4, r7
   13d24:	cmp	r6, #0
   13d28:	blt	13e60 <__assert_fail@plt+0x3154>
   13d2c:	cmp	r6, #0
   13d30:	beq	13f0c <__assert_fail@plt+0x3200>
   13d34:	cmp	r4, #0
   13d38:	blt	13ebc <__assert_fail@plt+0x31b0>
   13d3c:	mov	r1, r6
   13d40:	mvn	r0, #-2147483648	; 0x80000000
   13d44:	bl	14830 <__assert_fail@plt+0x3b24>
   13d48:	cmp	r0, r4
   13d4c:	movge	r0, #0
   13d50:	movlt	r0, #1
   13d54:	cmp	r0, #0
   13d58:	mvnne	r3, #-2147483648	; 0x80000000
   13d5c:	strne	r3, [sp, #4]
   13d60:	beq	13ef4 <__assert_fail@plt+0x31e8>
   13d64:	mov	r1, r6
   13d68:	ldr	r0, [sp, #4]
   13d6c:	bl	14830 <__assert_fail@plt+0x3b24>
   13d70:	mov	r4, r0
   13d74:	mov	r1, r6
   13d78:	ldr	r0, [sp, #4]
   13d7c:	bl	14a50 <__assert_fail@plt+0x3d44>
   13d80:	ldr	r3, [sp, #4]
   13d84:	sub	r1, r3, r1
   13d88:	cmp	fp, #0
   13d8c:	moveq	r3, #0
   13d90:	streq	r3, [sl]
   13d94:	sub	r3, r4, r5
   13d98:	cmp	r3, r9
   13d9c:	bge	13e24 <__assert_fail@plt+0x3118>
   13da0:	cmp	r9, #0
   13da4:	blt	13f18 <__assert_fail@plt+0x320c>
   13da8:	cmp	r5, #0
   13dac:	blt	13f2c <__assert_fail@plt+0x3220>
   13db0:	mvn	r3, #-2147483648	; 0x80000000
   13db4:	sub	r3, r3, r9
   13db8:	cmp	r5, r3
   13dbc:	movle	r3, #0
   13dc0:	movgt	r3, #1
   13dc4:	cmp	r3, #0
   13dc8:	bne	13fd4 <__assert_fail@plt+0x32c8>
   13dcc:	add	r5, r5, r9
   13dd0:	mov	r4, r5
   13dd4:	cmp	r7, r5
   13dd8:	movge	r7, #0
   13ddc:	andlt	r7, r8, #1
   13de0:	cmp	r7, #0
   13de4:	bne	13fd4 <__assert_fail@plt+0x32c8>
   13de8:	cmp	r6, #0
   13dec:	blt	13f40 <__assert_fail@plt+0x3234>
   13df0:	cmp	r6, #0
   13df4:	beq	13e20 <__assert_fail@plt+0x3114>
   13df8:	cmp	r5, #0
   13dfc:	blt	13f9c <__assert_fail@plt+0x3290>
   13e00:	mov	r1, r6
   13e04:	mvn	r0, #-2147483648	; 0x80000000
   13e08:	bl	14830 <__assert_fail@plt+0x3b24>
   13e0c:	cmp	r5, r0
   13e10:	movle	r0, #0
   13e14:	movgt	r0, #1
   13e18:	cmp	r0, #0
   13e1c:	bne	13fd4 <__assert_fail@plt+0x32c8>
   13e20:	mul	r1, r5, r6
   13e24:	mov	r0, fp
   13e28:	bl	13b40 <__assert_fail@plt+0x2e34>
   13e2c:	str	r4, [sl]
   13e30:	add	sp, sp, #12
   13e34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e38:	rsb	r3, r4, #-2147483648	; 0x80000000
   13e3c:	cmp	r5, r3
   13e40:	movge	r3, #0
   13e44:	movlt	r3, #1
   13e48:	b	13cfc <__assert_fail@plt+0x2ff0>
   13e4c:	rsb	r3, r5, #-2147483648	; 0x80000000
   13e50:	cmp	r4, r3
   13e54:	movge	r3, #0
   13e58:	movlt	r3, #1
   13e5c:	b	13cfc <__assert_fail@plt+0x2ff0>
   13e60:	cmp	r4, #0
   13e64:	blt	13e8c <__assert_fail@plt+0x3180>
   13e68:	cmn	r6, #1
   13e6c:	beq	13ea8 <__assert_fail@plt+0x319c>
   13e70:	mov	r1, r6
   13e74:	mov	r0, #-2147483648	; 0x80000000
   13e78:	bl	14830 <__assert_fail@plt+0x3b24>
   13e7c:	cmp	r0, r4
   13e80:	movge	r0, #0
   13e84:	movlt	r0, #1
   13e88:	b	13d54 <__assert_fail@plt+0x3048>
   13e8c:	mov	r1, r6
   13e90:	mvn	r0, #-2147483648	; 0x80000000
   13e94:	bl	14830 <__assert_fail@plt+0x3b24>
   13e98:	cmp	r0, r4
   13e9c:	movle	r0, #0
   13ea0:	movgt	r0, #1
   13ea4:	b	13d54 <__assert_fail@plt+0x3048>
   13ea8:	add	r0, r4, #-2147483648	; 0x80000000
   13eac:	cmp	r0, #0
   13eb0:	movle	r0, #0
   13eb4:	movgt	r0, #1
   13eb8:	b	13d54 <__assert_fail@plt+0x3048>
   13ebc:	cmn	r4, #1
   13ec0:	beq	13ee0 <__assert_fail@plt+0x31d4>
   13ec4:	mov	r1, r4
   13ec8:	mov	r0, #-2147483648	; 0x80000000
   13ecc:	bl	14830 <__assert_fail@plt+0x3b24>
   13ed0:	cmp	r6, r0
   13ed4:	movle	r0, #0
   13ed8:	movgt	r0, #1
   13edc:	b	13d54 <__assert_fail@plt+0x3048>
   13ee0:	add	r0, r6, #-2147483648	; 0x80000000
   13ee4:	cmp	r0, #0
   13ee8:	movle	r0, #0
   13eec:	movgt	r0, #1
   13ef0:	b	13d54 <__assert_fail@plt+0x3048>
   13ef4:	mul	r1, r6, r4
   13ef8:	cmp	r1, #63	; 0x3f
   13efc:	movle	r3, #64	; 0x40
   13f00:	strle	r3, [sp, #4]
   13f04:	bgt	13d88 <__assert_fail@plt+0x307c>
   13f08:	b	13d64 <__assert_fail@plt+0x3058>
   13f0c:	mov	r3, #64	; 0x40
   13f10:	str	r3, [sp, #4]
   13f14:	b	13d64 <__assert_fail@plt+0x3058>
   13f18:	rsb	r3, r9, #-2147483648	; 0x80000000
   13f1c:	cmp	r5, r3
   13f20:	movge	r3, #0
   13f24:	movlt	r3, #1
   13f28:	b	13dc4 <__assert_fail@plt+0x30b8>
   13f2c:	rsb	r3, r5, #-2147483648	; 0x80000000
   13f30:	cmp	r9, r3
   13f34:	movge	r3, #0
   13f38:	movlt	r3, #1
   13f3c:	b	13dc4 <__assert_fail@plt+0x30b8>
   13f40:	cmp	r5, #0
   13f44:	blt	13f6c <__assert_fail@plt+0x3260>
   13f48:	cmn	r6, #1
   13f4c:	beq	13f88 <__assert_fail@plt+0x327c>
   13f50:	mov	r1, r6
   13f54:	mov	r0, #-2147483648	; 0x80000000
   13f58:	bl	14830 <__assert_fail@plt+0x3b24>
   13f5c:	cmp	r5, r0
   13f60:	movle	r0, #0
   13f64:	movgt	r0, #1
   13f68:	b	13e18 <__assert_fail@plt+0x310c>
   13f6c:	mov	r1, r6
   13f70:	mvn	r0, #-2147483648	; 0x80000000
   13f74:	bl	14830 <__assert_fail@plt+0x3b24>
   13f78:	cmp	r5, r0
   13f7c:	movge	r0, #0
   13f80:	movlt	r0, #1
   13f84:	b	13e18 <__assert_fail@plt+0x310c>
   13f88:	add	r0, r5, #-2147483648	; 0x80000000
   13f8c:	cmp	r0, #0
   13f90:	movle	r0, #0
   13f94:	movgt	r0, #1
   13f98:	b	13e18 <__assert_fail@plt+0x310c>
   13f9c:	cmn	r5, #1
   13fa0:	beq	13fc0 <__assert_fail@plt+0x32b4>
   13fa4:	mov	r1, r5
   13fa8:	mov	r0, #-2147483648	; 0x80000000
   13fac:	bl	14830 <__assert_fail@plt+0x3b24>
   13fb0:	cmp	r6, r0
   13fb4:	movle	r0, #0
   13fb8:	movgt	r0, #1
   13fbc:	b	13e18 <__assert_fail@plt+0x310c>
   13fc0:	add	r0, r6, #-2147483648	; 0x80000000
   13fc4:	cmp	r0, #0
   13fc8:	movle	r0, #0
   13fcc:	movgt	r0, #1
   13fd0:	b	13e18 <__assert_fail@plt+0x310c>
   13fd4:	bl	140b0 <__assert_fail@plt+0x33a4>
   13fd8:	push	{r4, lr}
   13fdc:	bl	140f0 <__assert_fail@plt+0x33e4>
   13fe0:	cmp	r0, #0
   13fe4:	popne	{r4, pc}
   13fe8:	bl	140b0 <__assert_fail@plt+0x33a4>
   13fec:	push	{r4, lr}
   13ff0:	mov	r1, #1
   13ff4:	bl	13fd8 <__assert_fail@plt+0x32cc>
   13ff8:	pop	{r4, pc}
   13ffc:	push	{r4, lr}
   14000:	bl	140f0 <__assert_fail@plt+0x33e4>
   14004:	cmp	r0, #0
   14008:	popne	{r4, pc}
   1400c:	bl	140b0 <__assert_fail@plt+0x33a4>
   14010:	push	{r4, lr}
   14014:	mov	r1, #1
   14018:	bl	13ffc <__assert_fail@plt+0x32f0>
   1401c:	pop	{r4, pc}
   14020:	push	{r4, r5, r6, lr}
   14024:	mov	r5, r0
   14028:	mov	r4, r1
   1402c:	mov	r0, r1
   14030:	bl	13b0c <__assert_fail@plt+0x2e00>
   14034:	mov	r2, r4
   14038:	mov	r1, r5
   1403c:	bl	10b50 <memcpy@plt>
   14040:	pop	{r4, r5, r6, pc}
   14044:	push	{r4, r5, r6, lr}
   14048:	mov	r5, r0
   1404c:	mov	r4, r1
   14050:	mov	r0, r1
   14054:	bl	13b20 <__assert_fail@plt+0x2e14>
   14058:	mov	r2, r4
   1405c:	mov	r1, r5
   14060:	bl	10b50 <memcpy@plt>
   14064:	pop	{r4, r5, r6, pc}
   14068:	push	{r4, r5, r6, lr}
   1406c:	mov	r5, r0
   14070:	mov	r4, r1
   14074:	add	r0, r1, #1
   14078:	bl	13b20 <__assert_fail@plt+0x2e14>
   1407c:	mov	r2, #0
   14080:	strb	r2, [r0, r4]
   14084:	mov	r2, r4
   14088:	mov	r1, r5
   1408c:	bl	10b50 <memcpy@plt>
   14090:	pop	{r4, r5, r6, pc}
   14094:	push	{r4, lr}
   14098:	mov	r4, r0
   1409c:	bl	10c4c <strlen@plt>
   140a0:	add	r1, r0, #1
   140a4:	mov	r0, r4
   140a8:	bl	14020 <__assert_fail@plt+0x3314>
   140ac:	pop	{r4, pc}
   140b0:	push	{r4, lr}
   140b4:	ldr	r3, [pc, #40]	; 140e4 <__assert_fail@plt+0x33d8>
   140b8:	ldr	r4, [r3]
   140bc:	mov	r2, #5
   140c0:	ldr	r1, [pc, #32]	; 140e8 <__assert_fail@plt+0x33dc>
   140c4:	mov	r0, #0
   140c8:	bl	10b80 <dcgettext@plt>
   140cc:	mov	r3, r0
   140d0:	ldr	r2, [pc, #20]	; 140ec <__assert_fail@plt+0x33e0>
   140d4:	mov	r1, #0
   140d8:	mov	r0, r4
   140dc:	bl	10bec <error@plt>
   140e0:	bl	10d00 <abort@plt>
   140e4:	ldrdeq	r6, [r2], -r0
   140e8:	ldrdeq	r5, [r1], -r0
   140ec:	muleq	r1, r4, r1
   140f0:	push	{r4, lr}
   140f4:	mov	r2, r0
   140f8:	mov	r3, r1
   140fc:	cmp	r1, #0
   14100:	cmpne	r0, #0
   14104:	moveq	r3, #1
   14108:	moveq	r2, r3
   1410c:	umull	r0, r1, r2, r3
   14110:	cmp	r0, #0
   14114:	cmpge	r1, #0
   14118:	bne	1412c <__assert_fail@plt+0x3420>
   1411c:	mov	r1, r3
   14120:	mov	r0, r2
   14124:	bl	10afc <calloc@plt>
   14128:	pop	{r4, pc}
   1412c:	bl	10c58 <__errno_location@plt>
   14130:	mov	r3, #12
   14134:	str	r3, [r0]
   14138:	mov	r0, #0
   1413c:	pop	{r4, pc}
   14140:	push	{r4, lr}
   14144:	cmp	r0, #0
   14148:	moveq	r0, #1
   1414c:	cmp	r0, #0
   14150:	blt	1415c <__assert_fail@plt+0x3450>
   14154:	bl	10c04 <malloc@plt>
   14158:	pop	{r4, pc}
   1415c:	bl	10c58 <__errno_location@plt>
   14160:	mov	r3, #12
   14164:	str	r3, [r0]
   14168:	mov	r0, #0
   1416c:	pop	{r4, pc}
   14170:	push	{r4, lr}
   14174:	cmp	r0, #0
   14178:	beq	14194 <__assert_fail@plt+0x3488>
   1417c:	cmp	r1, #0
   14180:	beq	141a0 <__assert_fail@plt+0x3494>
   14184:	cmp	r1, #0
   14188:	blt	141ac <__assert_fail@plt+0x34a0>
   1418c:	bl	10b8c <realloc@plt>
   14190:	pop	{r4, pc}
   14194:	mov	r0, r1
   14198:	bl	14140 <__assert_fail@plt+0x3434>
   1419c:	pop	{r4, pc}
   141a0:	bl	14344 <__assert_fail@plt+0x3638>
   141a4:	mov	r0, #0
   141a8:	pop	{r4, pc}
   141ac:	bl	10c58 <__errno_location@plt>
   141b0:	mov	r3, #12
   141b4:	str	r3, [r0]
   141b8:	mov	r0, #0
   141bc:	pop	{r4, pc}
   141c0:	push	{r4, r5, r6, lr}
   141c4:	mov	r5, r0
   141c8:	bl	10bd4 <__fpending@plt>
   141cc:	mov	r6, r0
   141d0:	ldr	r4, [r5]
   141d4:	and	r4, r4, #32
   141d8:	mov	r0, r5
   141dc:	bl	14238 <__assert_fail@plt+0x352c>
   141e0:	cmp	r4, #0
   141e4:	bne	1420c <__assert_fail@plt+0x3500>
   141e8:	cmp	r0, #0
   141ec:	popeq	{r4, r5, r6, pc}
   141f0:	cmp	r6, #0
   141f4:	bne	14228 <__assert_fail@plt+0x351c>
   141f8:	bl	10c58 <__errno_location@plt>
   141fc:	ldr	r0, [r0]
   14200:	subs	r0, r0, #9
   14204:	mvnne	r0, #0
   14208:	pop	{r4, r5, r6, pc}
   1420c:	cmp	r0, #0
   14210:	bne	14230 <__assert_fail@plt+0x3524>
   14214:	bl	10c58 <__errno_location@plt>
   14218:	mov	r3, #0
   1421c:	str	r3, [r0]
   14220:	mvn	r0, #0
   14224:	pop	{r4, r5, r6, pc}
   14228:	mvn	r0, #0
   1422c:	pop	{r4, r5, r6, pc}
   14230:	mvn	r0, #0
   14234:	pop	{r4, r5, r6, pc}
   14238:	push	{r4, r5, r6, lr}
   1423c:	sub	sp, sp, #8
   14240:	mov	r4, r0
   14244:	bl	10c88 <fileno@plt>
   14248:	cmp	r0, #0
   1424c:	blt	142c4 <__assert_fail@plt+0x35b8>
   14250:	mov	r0, r4
   14254:	bl	10c1c <__freading@plt>
   14258:	cmp	r0, #0
   1425c:	beq	14290 <__assert_fail@plt+0x3584>
   14260:	mov	r0, r4
   14264:	bl	10c88 <fileno@plt>
   14268:	mov	r3, #1
   1426c:	str	r3, [sp]
   14270:	mov	r2, #0
   14274:	mov	r3, #0
   14278:	bl	10bbc <lseek64@plt>
   1427c:	mvn	r2, #0
   14280:	mvn	r3, #0
   14284:	cmp	r1, r3
   14288:	cmpeq	r0, r2
   1428c:	beq	142d0 <__assert_fail@plt+0x35c4>
   14290:	mov	r0, r4
   14294:	bl	142e0 <__assert_fail@plt+0x35d4>
   14298:	cmp	r0, #0
   1429c:	beq	142d0 <__assert_fail@plt+0x35c4>
   142a0:	bl	10c58 <__errno_location@plt>
   142a4:	mov	r5, r0
   142a8:	ldr	r6, [r0]
   142ac:	mov	r0, r4
   142b0:	bl	10ca0 <fclose@plt>
   142b4:	cmp	r6, #0
   142b8:	strne	r6, [r5]
   142bc:	mvnne	r0, #0
   142c0:	b	142d8 <__assert_fail@plt+0x35cc>
   142c4:	mov	r0, r4
   142c8:	bl	10ca0 <fclose@plt>
   142cc:	b	142d8 <__assert_fail@plt+0x35cc>
   142d0:	mov	r0, r4
   142d4:	bl	10ca0 <fclose@plt>
   142d8:	add	sp, sp, #8
   142dc:	pop	{r4, r5, r6, pc}
   142e0:	push	{r4, lr}
   142e4:	sub	sp, sp, #8
   142e8:	subs	r4, r0, #0
   142ec:	beq	14300 <__assert_fail@plt+0x35f4>
   142f0:	mov	r0, r4
   142f4:	bl	10c1c <__freading@plt>
   142f8:	cmp	r0, #0
   142fc:	bne	14310 <__assert_fail@plt+0x3604>
   14300:	mov	r0, r4
   14304:	bl	10b2c <fflush@plt>
   14308:	add	sp, sp, #8
   1430c:	pop	{r4, pc}
   14310:	ldr	r3, [r4]
   14314:	tst	r3, #256	; 0x100
   14318:	bne	14328 <__assert_fail@plt+0x361c>
   1431c:	mov	r0, r4
   14320:	bl	10b2c <fflush@plt>
   14324:	b	14308 <__assert_fail@plt+0x35fc>
   14328:	mov	r3, #1
   1432c:	str	r3, [sp]
   14330:	mov	r2, #0
   14334:	mov	r3, #0
   14338:	mov	r0, r4
   1433c:	bl	1439c <__assert_fail@plt+0x3690>
   14340:	b	1431c <__assert_fail@plt+0x3610>
   14344:	push	{r4, r5, lr}
   14348:	sub	sp, sp, #12
   1434c:	mov	r5, r0
   14350:	bl	10c58 <__errno_location@plt>
   14354:	mov	r4, r0
   14358:	ldr	r3, [r0]
   1435c:	str	r3, [sp]
   14360:	str	r3, [sp, #4]
   14364:	mov	r3, #0
   14368:	str	r3, [r0]
   1436c:	mov	r0, r5
   14370:	bl	10b38 <free@plt>
   14374:	ldr	r3, [r4]
   14378:	cmp	r3, #0
   1437c:	moveq	r3, #4
   14380:	movne	r3, #0
   14384:	add	r2, sp, #8
   14388:	add	r3, r2, r3
   1438c:	ldr	r3, [r3, #-8]
   14390:	str	r3, [r4]
   14394:	add	sp, sp, #12
   14398:	pop	{r4, r5, pc}
   1439c:	push	{r4, r5, r6, r7, lr}
   143a0:	sub	sp, sp, #12
   143a4:	mov	r4, r0
   143a8:	mov	r6, r2
   143ac:	mov	r7, r3
   143b0:	ldr	r5, [sp, #32]
   143b4:	ldr	r2, [r0, #8]
   143b8:	ldr	r3, [r0, #4]
   143bc:	cmp	r2, r3
   143c0:	beq	143e0 <__assert_fail@plt+0x36d4>
   143c4:	str	r5, [sp]
   143c8:	mov	r2, r6
   143cc:	mov	r3, r7
   143d0:	mov	r0, r4
   143d4:	bl	10cac <fseeko64@plt>
   143d8:	add	sp, sp, #12
   143dc:	pop	{r4, r5, r6, r7, pc}
   143e0:	ldr	r2, [r0, #20]
   143e4:	ldr	r3, [r0, #16]
   143e8:	cmp	r2, r3
   143ec:	bne	143c4 <__assert_fail@plt+0x36b8>
   143f0:	ldr	r3, [r0, #36]	; 0x24
   143f4:	cmp	r3, #0
   143f8:	bne	143c4 <__assert_fail@plt+0x36b8>
   143fc:	bl	10c88 <fileno@plt>
   14400:	str	r5, [sp]
   14404:	mov	r2, r6
   14408:	mov	r3, r7
   1440c:	bl	10bbc <lseek64@plt>
   14410:	mvn	r2, #0
   14414:	mvn	r3, #0
   14418:	cmp	r1, r3
   1441c:	cmpeq	r0, r2
   14420:	beq	1443c <__assert_fail@plt+0x3730>
   14424:	ldr	r3, [r4]
   14428:	bic	r3, r3, #16
   1442c:	str	r3, [r4]
   14430:	strd	r0, [r4, #80]	; 0x50
   14434:	mov	r0, #0
   14438:	b	143d8 <__assert_fail@plt+0x36cc>
   1443c:	mvn	r0, #0
   14440:	b	143d8 <__assert_fail@plt+0x36cc>
   14444:	push	{r4, lr}
   14448:	mov	r0, #14
   1444c:	bl	10cdc <nl_langinfo@plt>
   14450:	cmp	r0, #0
   14454:	beq	1446c <__assert_fail@plt+0x3760>
   14458:	ldrb	r2, [r0]
   1445c:	ldr	r3, [pc, #16]	; 14474 <__assert_fail@plt+0x3768>
   14460:	cmp	r2, #0
   14464:	moveq	r0, r3
   14468:	pop	{r4, pc}
   1446c:	ldr	r0, [pc]	; 14474 <__assert_fail@plt+0x3768>
   14470:	pop	{r4, pc}
   14474:	andeq	r5, r1, r4, ror #11
   14478:	push	{r4, r5, r6, r7, lr}
   1447c:	sub	sp, sp, #12
   14480:	mov	r7, r1
   14484:	mov	r5, r2
   14488:	subs	r6, r0, #0
   1448c:	addeq	r6, sp, #4
   14490:	mov	r0, r6
   14494:	bl	10be0 <mbrtowc@plt>
   14498:	mov	r4, r0
   1449c:	cmp	r5, #0
   144a0:	cmnne	r0, #3
   144a4:	bhi	144b4 <__assert_fail@plt+0x37a8>
   144a8:	mov	r0, r4
   144ac:	add	sp, sp, #12
   144b0:	pop	{r4, r5, r6, r7, pc}
   144b4:	mov	r0, #0
   144b8:	bl	1451c <__assert_fail@plt+0x3810>
   144bc:	cmp	r0, #0
   144c0:	ldrbeq	r3, [r7]
   144c4:	streq	r3, [r6]
   144c8:	moveq	r4, #1
   144cc:	b	144a8 <__assert_fail@plt+0x379c>
   144d0:	push	{r4, r5, r6, lr}
   144d4:	mov	r6, r0
   144d8:	mov	r5, r1
   144dc:	subs	r4, r2, #0
   144e0:	beq	1450c <__assert_fail@plt+0x3800>
   144e4:	mov	r1, r4
   144e8:	mvn	r0, #0
   144ec:	bl	14624 <__assert_fail@plt+0x3918>
   144f0:	cmp	r0, r5
   144f4:	bcs	1450c <__assert_fail@plt+0x3800>
   144f8:	bl	10c58 <__errno_location@plt>
   144fc:	mov	r3, #12
   14500:	str	r3, [r0]
   14504:	mov	r0, #0
   14508:	pop	{r4, r5, r6, pc}
   1450c:	mul	r1, r5, r4
   14510:	mov	r0, r6
   14514:	bl	14170 <__assert_fail@plt+0x3464>
   14518:	pop	{r4, r5, r6, pc}
   1451c:	push	{lr}		; (str lr, [sp, #-4]!)
   14520:	sub	sp, sp, #268	; 0x10c
   14524:	ldr	r2, [pc, #68]	; 14570 <__assert_fail@plt+0x3864>
   14528:	add	r1, sp, #4
   1452c:	bl	1457c <__assert_fail@plt+0x3870>
   14530:	cmp	r0, #0
   14534:	movne	r0, #0
   14538:	bne	14568 <__assert_fail@plt+0x385c>
   1453c:	ldr	r1, [pc, #48]	; 14574 <__assert_fail@plt+0x3868>
   14540:	add	r0, sp, #4
   14544:	bl	10b20 <strcmp@plt>
   14548:	cmp	r0, #0
   1454c:	moveq	r0, #0
   14550:	beq	14568 <__assert_fail@plt+0x385c>
   14554:	ldr	r1, [pc, #28]	; 14578 <__assert_fail@plt+0x386c>
   14558:	add	r0, sp, #4
   1455c:	bl	10b20 <strcmp@plt>
   14560:	adds	r0, r0, #0
   14564:	movne	r0, #1
   14568:	add	sp, sp, #268	; 0x10c
   1456c:	pop	{pc}		; (ldr pc, [sp], #4)
   14570:	andeq	r0, r0, r1, lsl #2
   14574:	andeq	r5, r1, ip, ror #11
   14578:	strdeq	r5, [r1], -r0
   1457c:	push	{r4, r5, r6, lr}
   14580:	mov	r6, r1
   14584:	mov	r4, r2
   14588:	mov	r1, #0
   1458c:	bl	10cc4 <setlocale@plt>
   14590:	subs	r5, r0, #0
   14594:	beq	145b8 <__assert_fail@plt+0x38ac>
   14598:	mov	r0, r5
   1459c:	bl	10c4c <strlen@plt>
   145a0:	cmp	r4, r0
   145a4:	bhi	145d0 <__assert_fail@plt+0x38c4>
   145a8:	cmp	r4, #0
   145ac:	bne	145e8 <__assert_fail@plt+0x38dc>
   145b0:	mov	r0, #34	; 0x22
   145b4:	pop	{r4, r5, r6, pc}
   145b8:	cmp	r4, #0
   145bc:	beq	1460c <__assert_fail@plt+0x3900>
   145c0:	mov	r3, #0
   145c4:	strb	r3, [r6]
   145c8:	mov	r0, #22
   145cc:	pop	{r4, r5, r6, pc}
   145d0:	add	r2, r0, #1
   145d4:	mov	r1, r5
   145d8:	mov	r0, r6
   145dc:	bl	10b50 <memcpy@plt>
   145e0:	mov	r0, #0
   145e4:	pop	{r4, r5, r6, pc}
   145e8:	sub	r4, r4, #1
   145ec:	mov	r2, r4
   145f0:	mov	r1, r5
   145f4:	mov	r0, r6
   145f8:	bl	10b50 <memcpy@plt>
   145fc:	mov	r3, #0
   14600:	strb	r3, [r6, r4]
   14604:	mov	r0, #34	; 0x22
   14608:	pop	{r4, r5, r6, pc}
   1460c:	mov	r0, #22
   14610:	pop	{r4, r5, r6, pc}
   14614:	push	{r4, lr}
   14618:	mov	r1, #0
   1461c:	bl	10cc4 <setlocale@plt>
   14620:	pop	{r4, pc}
   14624:	subs	r2, r1, #1
   14628:	bxeq	lr
   1462c:	bcc	14804 <__assert_fail@plt+0x3af8>
   14630:	cmp	r0, r1
   14634:	bls	147e8 <__assert_fail@plt+0x3adc>
   14638:	tst	r1, r2
   1463c:	beq	147f4 <__assert_fail@plt+0x3ae8>
   14640:	clz	r3, r0
   14644:	clz	r2, r1
   14648:	sub	r3, r2, r3
   1464c:	rsbs	r3, r3, #31
   14650:	addne	r3, r3, r3, lsl #1
   14654:	mov	r2, #0
   14658:	addne	pc, pc, r3, lsl #2
   1465c:	nop			; (mov r0, r0)
   14660:	cmp	r0, r1, lsl #31
   14664:	adc	r2, r2, r2
   14668:	subcs	r0, r0, r1, lsl #31
   1466c:	cmp	r0, r1, lsl #30
   14670:	adc	r2, r2, r2
   14674:	subcs	r0, r0, r1, lsl #30
   14678:	cmp	r0, r1, lsl #29
   1467c:	adc	r2, r2, r2
   14680:	subcs	r0, r0, r1, lsl #29
   14684:	cmp	r0, r1, lsl #28
   14688:	adc	r2, r2, r2
   1468c:	subcs	r0, r0, r1, lsl #28
   14690:	cmp	r0, r1, lsl #27
   14694:	adc	r2, r2, r2
   14698:	subcs	r0, r0, r1, lsl #27
   1469c:	cmp	r0, r1, lsl #26
   146a0:	adc	r2, r2, r2
   146a4:	subcs	r0, r0, r1, lsl #26
   146a8:	cmp	r0, r1, lsl #25
   146ac:	adc	r2, r2, r2
   146b0:	subcs	r0, r0, r1, lsl #25
   146b4:	cmp	r0, r1, lsl #24
   146b8:	adc	r2, r2, r2
   146bc:	subcs	r0, r0, r1, lsl #24
   146c0:	cmp	r0, r1, lsl #23
   146c4:	adc	r2, r2, r2
   146c8:	subcs	r0, r0, r1, lsl #23
   146cc:	cmp	r0, r1, lsl #22
   146d0:	adc	r2, r2, r2
   146d4:	subcs	r0, r0, r1, lsl #22
   146d8:	cmp	r0, r1, lsl #21
   146dc:	adc	r2, r2, r2
   146e0:	subcs	r0, r0, r1, lsl #21
   146e4:	cmp	r0, r1, lsl #20
   146e8:	adc	r2, r2, r2
   146ec:	subcs	r0, r0, r1, lsl #20
   146f0:	cmp	r0, r1, lsl #19
   146f4:	adc	r2, r2, r2
   146f8:	subcs	r0, r0, r1, lsl #19
   146fc:	cmp	r0, r1, lsl #18
   14700:	adc	r2, r2, r2
   14704:	subcs	r0, r0, r1, lsl #18
   14708:	cmp	r0, r1, lsl #17
   1470c:	adc	r2, r2, r2
   14710:	subcs	r0, r0, r1, lsl #17
   14714:	cmp	r0, r1, lsl #16
   14718:	adc	r2, r2, r2
   1471c:	subcs	r0, r0, r1, lsl #16
   14720:	cmp	r0, r1, lsl #15
   14724:	adc	r2, r2, r2
   14728:	subcs	r0, r0, r1, lsl #15
   1472c:	cmp	r0, r1, lsl #14
   14730:	adc	r2, r2, r2
   14734:	subcs	r0, r0, r1, lsl #14
   14738:	cmp	r0, r1, lsl #13
   1473c:	adc	r2, r2, r2
   14740:	subcs	r0, r0, r1, lsl #13
   14744:	cmp	r0, r1, lsl #12
   14748:	adc	r2, r2, r2
   1474c:	subcs	r0, r0, r1, lsl #12
   14750:	cmp	r0, r1, lsl #11
   14754:	adc	r2, r2, r2
   14758:	subcs	r0, r0, r1, lsl #11
   1475c:	cmp	r0, r1, lsl #10
   14760:	adc	r2, r2, r2
   14764:	subcs	r0, r0, r1, lsl #10
   14768:	cmp	r0, r1, lsl #9
   1476c:	adc	r2, r2, r2
   14770:	subcs	r0, r0, r1, lsl #9
   14774:	cmp	r0, r1, lsl #8
   14778:	adc	r2, r2, r2
   1477c:	subcs	r0, r0, r1, lsl #8
   14780:	cmp	r0, r1, lsl #7
   14784:	adc	r2, r2, r2
   14788:	subcs	r0, r0, r1, lsl #7
   1478c:	cmp	r0, r1, lsl #6
   14790:	adc	r2, r2, r2
   14794:	subcs	r0, r0, r1, lsl #6
   14798:	cmp	r0, r1, lsl #5
   1479c:	adc	r2, r2, r2
   147a0:	subcs	r0, r0, r1, lsl #5
   147a4:	cmp	r0, r1, lsl #4
   147a8:	adc	r2, r2, r2
   147ac:	subcs	r0, r0, r1, lsl #4
   147b0:	cmp	r0, r1, lsl #3
   147b4:	adc	r2, r2, r2
   147b8:	subcs	r0, r0, r1, lsl #3
   147bc:	cmp	r0, r1, lsl #2
   147c0:	adc	r2, r2, r2
   147c4:	subcs	r0, r0, r1, lsl #2
   147c8:	cmp	r0, r1, lsl #1
   147cc:	adc	r2, r2, r2
   147d0:	subcs	r0, r0, r1, lsl #1
   147d4:	cmp	r0, r1
   147d8:	adc	r2, r2, r2
   147dc:	subcs	r0, r0, r1
   147e0:	mov	r0, r2
   147e4:	bx	lr
   147e8:	moveq	r0, #1
   147ec:	movne	r0, #0
   147f0:	bx	lr
   147f4:	clz	r2, r1
   147f8:	rsb	r2, r2, #31
   147fc:	lsr	r0, r0, r2
   14800:	bx	lr
   14804:	cmp	r0, #0
   14808:	mvnne	r0, #0
   1480c:	b	14a70 <__assert_fail@plt+0x3d64>
   14810:	cmp	r1, #0
   14814:	beq	14804 <__assert_fail@plt+0x3af8>
   14818:	push	{r0, r1, lr}
   1481c:	bl	14624 <__assert_fail@plt+0x3918>
   14820:	pop	{r1, r2, lr}
   14824:	mul	r3, r2, r0
   14828:	sub	r1, r1, r3
   1482c:	bx	lr
   14830:	cmp	r1, #0
   14834:	beq	14a40 <__assert_fail@plt+0x3d34>
   14838:	eor	ip, r0, r1
   1483c:	rsbmi	r1, r1, #0
   14840:	subs	r2, r1, #1
   14844:	beq	14a0c <__assert_fail@plt+0x3d00>
   14848:	movs	r3, r0
   1484c:	rsbmi	r3, r0, #0
   14850:	cmp	r3, r1
   14854:	bls	14a18 <__assert_fail@plt+0x3d0c>
   14858:	tst	r1, r2
   1485c:	beq	14a28 <__assert_fail@plt+0x3d1c>
   14860:	clz	r2, r3
   14864:	clz	r0, r1
   14868:	sub	r2, r0, r2
   1486c:	rsbs	r2, r2, #31
   14870:	addne	r2, r2, r2, lsl #1
   14874:	mov	r0, #0
   14878:	addne	pc, pc, r2, lsl #2
   1487c:	nop			; (mov r0, r0)
   14880:	cmp	r3, r1, lsl #31
   14884:	adc	r0, r0, r0
   14888:	subcs	r3, r3, r1, lsl #31
   1488c:	cmp	r3, r1, lsl #30
   14890:	adc	r0, r0, r0
   14894:	subcs	r3, r3, r1, lsl #30
   14898:	cmp	r3, r1, lsl #29
   1489c:	adc	r0, r0, r0
   148a0:	subcs	r3, r3, r1, lsl #29
   148a4:	cmp	r3, r1, lsl #28
   148a8:	adc	r0, r0, r0
   148ac:	subcs	r3, r3, r1, lsl #28
   148b0:	cmp	r3, r1, lsl #27
   148b4:	adc	r0, r0, r0
   148b8:	subcs	r3, r3, r1, lsl #27
   148bc:	cmp	r3, r1, lsl #26
   148c0:	adc	r0, r0, r0
   148c4:	subcs	r3, r3, r1, lsl #26
   148c8:	cmp	r3, r1, lsl #25
   148cc:	adc	r0, r0, r0
   148d0:	subcs	r3, r3, r1, lsl #25
   148d4:	cmp	r3, r1, lsl #24
   148d8:	adc	r0, r0, r0
   148dc:	subcs	r3, r3, r1, lsl #24
   148e0:	cmp	r3, r1, lsl #23
   148e4:	adc	r0, r0, r0
   148e8:	subcs	r3, r3, r1, lsl #23
   148ec:	cmp	r3, r1, lsl #22
   148f0:	adc	r0, r0, r0
   148f4:	subcs	r3, r3, r1, lsl #22
   148f8:	cmp	r3, r1, lsl #21
   148fc:	adc	r0, r0, r0
   14900:	subcs	r3, r3, r1, lsl #21
   14904:	cmp	r3, r1, lsl #20
   14908:	adc	r0, r0, r0
   1490c:	subcs	r3, r3, r1, lsl #20
   14910:	cmp	r3, r1, lsl #19
   14914:	adc	r0, r0, r0
   14918:	subcs	r3, r3, r1, lsl #19
   1491c:	cmp	r3, r1, lsl #18
   14920:	adc	r0, r0, r0
   14924:	subcs	r3, r3, r1, lsl #18
   14928:	cmp	r3, r1, lsl #17
   1492c:	adc	r0, r0, r0
   14930:	subcs	r3, r3, r1, lsl #17
   14934:	cmp	r3, r1, lsl #16
   14938:	adc	r0, r0, r0
   1493c:	subcs	r3, r3, r1, lsl #16
   14940:	cmp	r3, r1, lsl #15
   14944:	adc	r0, r0, r0
   14948:	subcs	r3, r3, r1, lsl #15
   1494c:	cmp	r3, r1, lsl #14
   14950:	adc	r0, r0, r0
   14954:	subcs	r3, r3, r1, lsl #14
   14958:	cmp	r3, r1, lsl #13
   1495c:	adc	r0, r0, r0
   14960:	subcs	r3, r3, r1, lsl #13
   14964:	cmp	r3, r1, lsl #12
   14968:	adc	r0, r0, r0
   1496c:	subcs	r3, r3, r1, lsl #12
   14970:	cmp	r3, r1, lsl #11
   14974:	adc	r0, r0, r0
   14978:	subcs	r3, r3, r1, lsl #11
   1497c:	cmp	r3, r1, lsl #10
   14980:	adc	r0, r0, r0
   14984:	subcs	r3, r3, r1, lsl #10
   14988:	cmp	r3, r1, lsl #9
   1498c:	adc	r0, r0, r0
   14990:	subcs	r3, r3, r1, lsl #9
   14994:	cmp	r3, r1, lsl #8
   14998:	adc	r0, r0, r0
   1499c:	subcs	r3, r3, r1, lsl #8
   149a0:	cmp	r3, r1, lsl #7
   149a4:	adc	r0, r0, r0
   149a8:	subcs	r3, r3, r1, lsl #7
   149ac:	cmp	r3, r1, lsl #6
   149b0:	adc	r0, r0, r0
   149b4:	subcs	r3, r3, r1, lsl #6
   149b8:	cmp	r3, r1, lsl #5
   149bc:	adc	r0, r0, r0
   149c0:	subcs	r3, r3, r1, lsl #5
   149c4:	cmp	r3, r1, lsl #4
   149c8:	adc	r0, r0, r0
   149cc:	subcs	r3, r3, r1, lsl #4
   149d0:	cmp	r3, r1, lsl #3
   149d4:	adc	r0, r0, r0
   149d8:	subcs	r3, r3, r1, lsl #3
   149dc:	cmp	r3, r1, lsl #2
   149e0:	adc	r0, r0, r0
   149e4:	subcs	r3, r3, r1, lsl #2
   149e8:	cmp	r3, r1, lsl #1
   149ec:	adc	r0, r0, r0
   149f0:	subcs	r3, r3, r1, lsl #1
   149f4:	cmp	r3, r1
   149f8:	adc	r0, r0, r0
   149fc:	subcs	r3, r3, r1
   14a00:	cmp	ip, #0
   14a04:	rsbmi	r0, r0, #0
   14a08:	bx	lr
   14a0c:	teq	ip, r0
   14a10:	rsbmi	r0, r0, #0
   14a14:	bx	lr
   14a18:	movcc	r0, #0
   14a1c:	asreq	r0, ip, #31
   14a20:	orreq	r0, r0, #1
   14a24:	bx	lr
   14a28:	clz	r2, r1
   14a2c:	rsb	r2, r2, #31
   14a30:	cmp	ip, #0
   14a34:	lsr	r0, r3, r2
   14a38:	rsbmi	r0, r0, #0
   14a3c:	bx	lr
   14a40:	cmp	r0, #0
   14a44:	mvngt	r0, #-2147483648	; 0x80000000
   14a48:	movlt	r0, #-2147483648	; 0x80000000
   14a4c:	b	14a70 <__assert_fail@plt+0x3d64>
   14a50:	cmp	r1, #0
   14a54:	beq	14a40 <__assert_fail@plt+0x3d34>
   14a58:	push	{r0, r1, lr}
   14a5c:	bl	14838 <__assert_fail@plt+0x3b2c>
   14a60:	pop	{r1, r2, lr}
   14a64:	mul	r3, r2, r0
   14a68:	sub	r1, r1, r3
   14a6c:	bx	lr
   14a70:	push	{r1, lr}
   14a74:	mov	r0, #8
   14a78:	bl	10b14 <raise@plt>
   14a7c:	pop	{r1, pc}
   14a80:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14a84:	mov	r7, r0
   14a88:	ldr	r6, [pc, #72]	; 14ad8 <__assert_fail@plt+0x3dcc>
   14a8c:	ldr	r5, [pc, #72]	; 14adc <__assert_fail@plt+0x3dd0>
   14a90:	add	r6, pc, r6
   14a94:	add	r5, pc, r5
   14a98:	sub	r6, r6, r5
   14a9c:	mov	r8, r1
   14aa0:	mov	r9, r2
   14aa4:	bl	10adc <calloc@plt-0x20>
   14aa8:	asrs	r6, r6, #2
   14aac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14ab0:	mov	r4, #0
   14ab4:	add	r4, r4, #1
   14ab8:	ldr	r3, [r5], #4
   14abc:	mov	r2, r9
   14ac0:	mov	r1, r8
   14ac4:	mov	r0, r7
   14ac8:	blx	r3
   14acc:	cmp	r6, r4
   14ad0:	bne	14ab4 <__assert_fail@plt+0x3da8>
   14ad4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14ad8:	andeq	r1, r1, r8, ror r4
   14adc:	andeq	r1, r1, r0, ror r4
   14ae0:	bx	lr
   14ae4:	ldr	r3, [pc, #12]	; 14af8 <__assert_fail@plt+0x3dec>
   14ae8:	mov	r1, #0
   14aec:	add	r3, pc, r3
   14af0:	ldr	r2, [r3]
   14af4:	b	10c64 <__cxa_atexit@plt>
   14af8:	ldrdeq	r1, [r1], -r4

Disassembly of section .fini:

00014afc <.fini>:
   14afc:	push	{r3, lr}
   14b00:	pop	{r3, pc}
