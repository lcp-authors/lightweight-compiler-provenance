
../repos/coreutils/src/chown:     file format elf32-littlearm


Disassembly of section .init:

000111c4 <.init>:
   111c4:	push	{r3, lr}
   111c8:	bl	1156c <__assert_fail@plt+0x4c>
   111cc:	pop	{r3, pc}

Disassembly of section .plt:

000111d0 <fstatfs64@plt-0x14>:
   111d0:	push	{lr}		; (str lr, [sp, #-4]!)
   111d4:	ldr	lr, [pc, #4]	; 111e0 <fstatfs64@plt-0x4>
   111d8:	add	lr, pc, lr
   111dc:	ldr	pc, [lr, #8]!
   111e0:	andeq	fp, r1, r0, lsr #28

000111e4 <fstatfs64@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #110592	; 0x1b000
   111ec:	ldr	pc, [ip, #3616]!	; 0xe20

000111f0 <calloc@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #110592	; 0x1b000
   111f8:	ldr	pc, [ip, #3608]!	; 0xe18

000111fc <endgrent@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #110592	; 0x1b000
   11204:	ldr	pc, [ip, #3600]!	; 0xe10

00011208 <fputs_unlocked@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #110592	; 0x1b000
   11210:	ldr	pc, [ip, #3592]!	; 0xe08

00011214 <raise@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #110592	; 0x1b000
   1121c:	ldr	pc, [ip, #3584]!	; 0xe00

00011220 <getpwnam@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #110592	; 0x1b000
   11228:	ldr	pc, [ip, #3576]!	; 0xdf8

0001122c <strcmp@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #110592	; 0x1b000
   11234:	ldr	pc, [ip, #3568]!	; 0xdf0

00011238 <getpwuid@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #110592	; 0x1b000
   11240:	ldr	pc, [ip, #3560]!	; 0xde8

00011244 <fflush@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #110592	; 0x1b000
   1124c:	ldr	pc, [ip, #3552]!	; 0xde0

00011250 <memmove@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #110592	; 0x1b000
   11258:	ldr	pc, [ip, #3544]!	; 0xdd8

0001125c <free@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #110592	; 0x1b000
   11264:	ldr	pc, [ip, #3536]!	; 0xdd0

00011268 <_exit@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #110592	; 0x1b000
   11270:	ldr	pc, [ip, #3528]!	; 0xdc8

00011274 <memcpy@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #110592	; 0x1b000
   1127c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011280 <mbsinit@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #110592	; 0x1b000
   11288:	ldr	pc, [ip, #3512]!	; 0xdb8

0001128c <stpcpy@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #110592	; 0x1b000
   11294:	ldr	pc, [ip, #3504]!	; 0xdb0

00011298 <dcgettext@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #110592	; 0x1b000
   112a0:	ldr	pc, [ip, #3496]!	; 0xda8

000112a4 <realloc@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #110592	; 0x1b000
   112ac:	ldr	pc, [ip, #3488]!	; 0xda0

000112b0 <textdomain@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #110592	; 0x1b000
   112b8:	ldr	pc, [ip, #3480]!	; 0xd98

000112bc <__fxstatat64@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #110592	; 0x1b000
   112c4:	ldr	pc, [ip, #3472]!	; 0xd90

000112c8 <iswprint@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #110592	; 0x1b000
   112d0:	ldr	pc, [ip, #3464]!	; 0xd88

000112d4 <__fxstat64@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #110592	; 0x1b000
   112dc:	ldr	pc, [ip, #3456]!	; 0xd80

000112e0 <fwrite@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #110592	; 0x1b000
   112e8:	ldr	pc, [ip, #3448]!	; 0xd78

000112ec <lseek64@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #110592	; 0x1b000
   112f4:	ldr	pc, [ip, #3440]!	; 0xd70

000112f8 <__ctype_get_mb_cur_max@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #110592	; 0x1b000
   11300:	ldr	pc, [ip, #3432]!	; 0xd68

00011304 <__fpending@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #110592	; 0x1b000
   1130c:	ldr	pc, [ip, #3424]!	; 0xd60

00011310 <mbrtowc@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #110592	; 0x1b000
   11318:	ldr	pc, [ip, #3416]!	; 0xd58

0001131c <error@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #110592	; 0x1b000
   11324:	ldr	pc, [ip, #3408]!	; 0xd50

00011328 <open64@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #110592	; 0x1b000
   11330:	ldr	pc, [ip, #3400]!	; 0xd48

00011334 <malloc@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #110592	; 0x1b000
   1133c:	ldr	pc, [ip, #3392]!	; 0xd40

00011340 <__libc_start_main@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #110592	; 0x1b000
   11348:	ldr	pc, [ip, #3384]!	; 0xd38

0001134c <__freading@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #110592	; 0x1b000
   11354:	ldr	pc, [ip, #3376]!	; 0xd30

00011358 <__gmon_start__@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #110592	; 0x1b000
   11360:	ldr	pc, [ip, #3368]!	; 0xd28

00011364 <getopt_long@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #110592	; 0x1b000
   1136c:	ldr	pc, [ip, #3360]!	; 0xd20

00011370 <__ctype_b_loc@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #110592	; 0x1b000
   11378:	ldr	pc, [ip, #3352]!	; 0xd18

0001137c <exit@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #110592	; 0x1b000
   11384:	ldr	pc, [ip, #3344]!	; 0xd10

00011388 <bcmp@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #110592	; 0x1b000
   11390:	ldr	pc, [ip, #3336]!	; 0xd08

00011394 <strtoul@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #110592	; 0x1b000
   1139c:	ldr	pc, [ip, #3328]!	; 0xd00

000113a0 <strlen@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #110592	; 0x1b000
   113a8:	ldr	pc, [ip, #3320]!	; 0xcf8

000113ac <strchr@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #110592	; 0x1b000
   113b4:	ldr	pc, [ip, #3312]!	; 0xcf0

000113b8 <openat64@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #110592	; 0x1b000
   113c0:	ldr	pc, [ip, #3304]!	; 0xce8

000113c4 <fchown@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #110592	; 0x1b000
   113cc:	ldr	pc, [ip, #3296]!	; 0xce0

000113d0 <__errno_location@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #110592	; 0x1b000
   113d8:	ldr	pc, [ip, #3288]!	; 0xcd8

000113dc <__cxa_atexit@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #110592	; 0x1b000
   113e4:	ldr	pc, [ip, #3280]!	; 0xcd0

000113e8 <memset@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #110592	; 0x1b000
   113f0:	ldr	pc, [ip, #3272]!	; 0xcc8

000113f4 <__printf_chk@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #110592	; 0x1b000
   113fc:	ldr	pc, [ip, #3264]!	; 0xcc0

00011400 <fileno@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #110592	; 0x1b000
   11408:	ldr	pc, [ip, #3256]!	; 0xcb8

0001140c <__fprintf_chk@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #110592	; 0x1b000
   11414:	ldr	pc, [ip, #3248]!	; 0xcb0

00011418 <fclose@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #110592	; 0x1b000
   11420:	ldr	pc, [ip, #3240]!	; 0xca8

00011424 <fseeko64@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #110592	; 0x1b000
   1142c:	ldr	pc, [ip, #3232]!	; 0xca0

00011430 <fcntl64@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #110592	; 0x1b000
   11438:	ldr	pc, [ip, #3224]!	; 0xc98

0001143c <setlocale@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #110592	; 0x1b000
   11444:	ldr	pc, [ip, #3216]!	; 0xc90

00011448 <endpwent@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #110592	; 0x1b000
   11450:	ldr	pc, [ip, #3208]!	; 0xc88

00011454 <strrchr@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #110592	; 0x1b000
   1145c:	ldr	pc, [ip, #3200]!	; 0xc80

00011460 <nl_langinfo@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #110592	; 0x1b000
   11468:	ldr	pc, [ip, #3192]!	; 0xc78

0001146c <readdir64@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #110592	; 0x1b000
   11474:	ldr	pc, [ip, #3184]!	; 0xc70

00011478 <fdopendir@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #110592	; 0x1b000
   11480:	ldr	pc, [ip, #3176]!	; 0xc68

00011484 <dirfd@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #110592	; 0x1b000
   1148c:	ldr	pc, [ip, #3168]!	; 0xc60

00011490 <fchdir@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #110592	; 0x1b000
   11498:	ldr	pc, [ip, #3160]!	; 0xc58

0001149c <qsort@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #110592	; 0x1b000
   114a4:	ldr	pc, [ip, #3152]!	; 0xc50

000114a8 <fchownat@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #110592	; 0x1b000
   114b0:	ldr	pc, [ip, #3144]!	; 0xc48

000114b4 <bindtextdomain@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #110592	; 0x1b000
   114bc:	ldr	pc, [ip, #3136]!	; 0xc40

000114c0 <__xstat64@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #110592	; 0x1b000
   114c8:	ldr	pc, [ip, #3128]!	; 0xc38

000114cc <strncmp@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #110592	; 0x1b000
   114d4:	ldr	pc, [ip, #3120]!	; 0xc30

000114d8 <abort@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #110592	; 0x1b000
   114e0:	ldr	pc, [ip, #3112]!	; 0xc28

000114e4 <close@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #110592	; 0x1b000
   114ec:	ldr	pc, [ip, #3104]!	; 0xc20

000114f0 <__lxstat64@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #110592	; 0x1b000
   114f8:	ldr	pc, [ip, #3096]!	; 0xc18

000114fc <closedir@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #110592	; 0x1b000
   11504:	ldr	pc, [ip, #3088]!	; 0xc10

00011508 <getgrgid@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #110592	; 0x1b000
   11510:	ldr	pc, [ip, #3080]!	; 0xc08

00011514 <getgrnam@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #110592	; 0x1b000
   1151c:	ldr	pc, [ip, #3072]!	; 0xc00

00011520 <__assert_fail@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #110592	; 0x1b000
   11528:	ldr	pc, [ip, #3064]!	; 0xbf8

Disassembly of section .text:

00011530 <.text>:
   11530:	mov	fp, #0
   11534:	mov	lr, #0
   11538:	pop	{r1}		; (ldr r1, [sp], #4)
   1153c:	mov	r2, sp
   11540:	push	{r2}		; (str r2, [sp, #-4]!)
   11544:	push	{r0}		; (str r0, [sp, #-4]!)
   11548:	ldr	ip, [pc, #16]	; 11560 <__assert_fail@plt+0x40>
   1154c:	push	{ip}		; (str ip, [sp, #-4]!)
   11550:	ldr	r0, [pc, #12]	; 11564 <__assert_fail@plt+0x44>
   11554:	ldr	r3, [pc, #12]	; 11568 <__assert_fail@plt+0x48>
   11558:	bl	11340 <__libc_start_main@plt>
   1155c:	bl	114d8 <abort@plt>
   11560:	andeq	fp, r1, r4, asr #1
   11564:	muleq	r1, r0, r9
   11568:	andeq	fp, r1, r4, rrx
   1156c:	ldr	r3, [pc, #20]	; 11588 <__assert_fail@plt+0x68>
   11570:	ldr	r2, [pc, #20]	; 1158c <__assert_fail@plt+0x6c>
   11574:	add	r3, pc, r3
   11578:	ldr	r2, [r3, r2]
   1157c:	cmp	r2, #0
   11580:	bxeq	lr
   11584:	b	11358 <__gmon_start__@plt>
   11588:	andeq	fp, r1, r4, lsl #21
   1158c:	andeq	r0, r0, r4, lsr #2
   11590:	ldr	r0, [pc, #24]	; 115b0 <__assert_fail@plt+0x90>
   11594:	ldr	r3, [pc, #24]	; 115b4 <__assert_fail@plt+0x94>
   11598:	cmp	r3, r0
   1159c:	bxeq	lr
   115a0:	ldr	r3, [pc, #16]	; 115b8 <__assert_fail@plt+0x98>
   115a4:	cmp	r3, #0
   115a8:	bxeq	lr
   115ac:	bx	r3
   115b0:	andeq	sp, r2, r8, ror r1
   115b4:	andeq	sp, r2, r8, ror r1
   115b8:	andeq	r0, r0, r0
   115bc:	ldr	r0, [pc, #36]	; 115e8 <__assert_fail@plt+0xc8>
   115c0:	ldr	r1, [pc, #36]	; 115ec <__assert_fail@plt+0xcc>
   115c4:	sub	r1, r1, r0
   115c8:	asr	r1, r1, #2
   115cc:	add	r1, r1, r1, lsr #31
   115d0:	asrs	r1, r1, #1
   115d4:	bxeq	lr
   115d8:	ldr	r3, [pc, #16]	; 115f0 <__assert_fail@plt+0xd0>
   115dc:	cmp	r3, #0
   115e0:	bxeq	lr
   115e4:	bx	r3
   115e8:	andeq	sp, r2, r8, ror r1
   115ec:	andeq	sp, r2, r8, ror r1
   115f0:	andeq	r0, r0, r0
   115f4:	push	{r4, lr}
   115f8:	ldr	r4, [pc, #24]	; 11618 <__assert_fail@plt+0xf8>
   115fc:	ldrb	r3, [r4]
   11600:	cmp	r3, #0
   11604:	popne	{r4, pc}
   11608:	bl	11590 <__assert_fail@plt+0x70>
   1160c:	mov	r3, #1
   11610:	strb	r3, [r4]
   11614:	pop	{r4, pc}
   11618:	muleq	r2, r4, r1
   1161c:	b	115bc <__assert_fail@plt+0x9c>
   11620:	push	{fp, lr}
   11624:	mov	fp, sp
   11628:	sub	sp, sp, #64	; 0x40
   1162c:	mov	r4, r0
   11630:	cmp	r0, #0
   11634:	bne	1194c <__assert_fail@plt+0x42c>
   11638:	movw	r1, #45331	; 0xb113
   1163c:	mov	r0, #0
   11640:	mov	r2, #5
   11644:	movt	r1, #1
   11648:	bl	11298 <dcgettext@plt>
   1164c:	movw	r5, #53688	; 0xd1b8
   11650:	mov	r1, r0
   11654:	mov	r0, #1
   11658:	movt	r5, #2
   1165c:	ldr	r2, [r5]
   11660:	mov	r3, r2
   11664:	bl	113f4 <__printf_chk@plt>
   11668:	movw	r1, #45428	; 0xb174
   1166c:	mov	r0, #0
   11670:	mov	r2, #5
   11674:	movt	r1, #1
   11678:	bl	11298 <dcgettext@plt>
   1167c:	movw	r7, #53644	; 0xd18c
   11680:	movt	r7, #2
   11684:	ldr	r1, [r7]
   11688:	bl	11208 <fputs_unlocked@plt>
   1168c:	movw	r1, #45573	; 0xb205
   11690:	mov	r0, #0
   11694:	mov	r2, #5
   11698:	movt	r1, #1
   1169c:	bl	11298 <dcgettext@plt>
   116a0:	ldr	r1, [r7]
   116a4:	bl	11208 <fputs_unlocked@plt>
   116a8:	movw	r1, #45774	; 0xb2ce
   116ac:	mov	r0, #0
   116b0:	mov	r2, #5
   116b4:	movt	r1, #1
   116b8:	bl	11298 <dcgettext@plt>
   116bc:	ldr	r1, [r7]
   116c0:	bl	11208 <fputs_unlocked@plt>
   116c4:	movw	r1, #46005	; 0xb3b5
   116c8:	mov	r0, #0
   116cc:	mov	r2, #5
   116d0:	movt	r1, #1
   116d4:	bl	11298 <dcgettext@plt>
   116d8:	ldr	r1, [r7]
   116dc:	bl	11208 <fputs_unlocked@plt>
   116e0:	movw	r1, #46124	; 0xb42c
   116e4:	mov	r0, #0
   116e8:	mov	r2, #5
   116ec:	movt	r1, #1
   116f0:	bl	11298 <dcgettext@plt>
   116f4:	ldr	r1, [r7]
   116f8:	bl	11208 <fputs_unlocked@plt>
   116fc:	movw	r1, #46464	; 0xb580
   11700:	mov	r0, #0
   11704:	mov	r2, #5
   11708:	movt	r1, #1
   1170c:	bl	11298 <dcgettext@plt>
   11710:	ldr	r1, [r7]
   11714:	bl	11208 <fputs_unlocked@plt>
   11718:	movw	r1, #46592	; 0xb600
   1171c:	mov	r0, #0
   11720:	mov	r2, #5
   11724:	movt	r1, #1
   11728:	bl	11298 <dcgettext@plt>
   1172c:	ldr	r1, [r7]
   11730:	bl	11208 <fputs_unlocked@plt>
   11734:	movw	r1, #46713	; 0xb679
   11738:	mov	r0, #0
   1173c:	mov	r2, #5
   11740:	movt	r1, #1
   11744:	bl	11298 <dcgettext@plt>
   11748:	ldr	r1, [r7]
   1174c:	bl	11208 <fputs_unlocked@plt>
   11750:	movw	r1, #46784	; 0xb6c0
   11754:	mov	r0, #0
   11758:	mov	r2, #5
   1175c:	movt	r1, #1
   11760:	bl	11298 <dcgettext@plt>
   11764:	ldr	r1, [r7]
   11768:	bl	11208 <fputs_unlocked@plt>
   1176c:	movw	r1, #47249	; 0xb891
   11770:	mov	r0, #0
   11774:	mov	r2, #5
   11778:	movt	r1, #1
   1177c:	bl	11298 <dcgettext@plt>
   11780:	ldr	r1, [r7]
   11784:	bl	11208 <fputs_unlocked@plt>
   11788:	movw	r1, #47294	; 0xb8be
   1178c:	mov	r0, #0
   11790:	mov	r2, #5
   11794:	movt	r1, #1
   11798:	bl	11298 <dcgettext@plt>
   1179c:	ldr	r1, [r7]
   117a0:	bl	11208 <fputs_unlocked@plt>
   117a4:	movw	r1, #47348	; 0xb8f4
   117a8:	mov	r0, #0
   117ac:	mov	r2, #5
   117b0:	movt	r1, #1
   117b4:	bl	11298 <dcgettext@plt>
   117b8:	ldr	r1, [r7]
   117bc:	bl	11208 <fputs_unlocked@plt>
   117c0:	movw	r1, #47540	; 0xb9b4
   117c4:	mov	r0, #0
   117c8:	mov	r2, #5
   117cc:	movt	r1, #1
   117d0:	bl	11298 <dcgettext@plt>
   117d4:	ldr	r2, [r5]
   117d8:	mov	r1, r0
   117dc:	mov	r0, #1
   117e0:	mov	r3, r2
   117e4:	str	r2, [sp]
   117e8:	bl	113f4 <__printf_chk@plt>
   117ec:	movw	r0, #48568	; 0xbdb8
   117f0:	mov	r2, #48	; 0x30
   117f4:	add	r6, sp, #8
   117f8:	movw	r5, #47741	; 0xba7d
   117fc:	movt	r0, #1
   11800:	movt	r5, #1
   11804:	add	r1, r0, #32
   11808:	add	r3, r0, #16
   1180c:	vld1.64	{d18-d19}, [r0], r2
   11810:	vld1.64	{d16-d17}, [r1]
   11814:	vld1.64	{d20-d21}, [r3]
   11818:	vldr	d22, [r0]
   1181c:	add	r1, r6, #32
   11820:	add	r0, r6, #16
   11824:	vst1.64	{d16-d17}, [r1]
   11828:	movw	r1, #47944	; 0xbb48
   1182c:	vst1.64	{d20-d21}, [r0]
   11830:	mov	r0, r6
   11834:	movt	r1, #1
   11838:	vst1.64	{d18-d19}, [r0], r2
   1183c:	vstr	d22, [r0]
   11840:	mov	r0, r5
   11844:	bl	1122c <strcmp@plt>
   11848:	cmp	r0, #0
   1184c:	ldrne	r1, [r6, #8]!
   11850:	cmpne	r1, #0
   11854:	bne	11840 <__assert_fail@plt+0x320>
   11858:	movw	r1, #48039	; 0xbba7
   1185c:	ldr	r6, [r6, #4]
   11860:	mov	r0, #0
   11864:	mov	r2, #5
   11868:	movt	r1, #1
   1186c:	bl	11298 <dcgettext@plt>
   11870:	movw	r2, #47787	; 0xbaab
   11874:	movw	r3, #48062	; 0xbbbe
   11878:	mov	r1, r0
   1187c:	mov	r0, #1
   11880:	movt	r2, #1
   11884:	movt	r3, #1
   11888:	bl	113f4 <__printf_chk@plt>
   1188c:	cmp	r6, #0
   11890:	mov	r0, #5
   11894:	mov	r1, #0
   11898:	moveq	r6, r5
   1189c:	bl	1143c <setlocale@plt>
   118a0:	cmp	r0, #0
   118a4:	beq	118dc <__assert_fail@plt+0x3bc>
   118a8:	movw	r1, #48102	; 0xbbe6
   118ac:	mov	r2, #3
   118b0:	movt	r1, #1
   118b4:	bl	114cc <strncmp@plt>
   118b8:	cmp	r0, #0
   118bc:	beq	118dc <__assert_fail@plt+0x3bc>
   118c0:	movw	r1, #48106	; 0xbbea
   118c4:	mov	r0, #0
   118c8:	mov	r2, #5
   118cc:	movt	r1, #1
   118d0:	bl	11298 <dcgettext@plt>
   118d4:	ldr	r1, [r7]
   118d8:	bl	11208 <fputs_unlocked@plt>
   118dc:	movw	r1, #48177	; 0xbc31
   118e0:	mov	r0, #0
   118e4:	mov	r2, #5
   118e8:	movt	r1, #1
   118ec:	bl	11298 <dcgettext@plt>
   118f0:	movw	r2, #48062	; 0xbbbe
   118f4:	mov	r1, r0
   118f8:	mov	r0, #1
   118fc:	mov	r3, r5
   11900:	movt	r2, #1
   11904:	bl	113f4 <__printf_chk@plt>
   11908:	movw	r1, #48204	; 0xbc4c
   1190c:	mov	r0, #0
   11910:	mov	r2, #5
   11914:	movt	r1, #1
   11918:	bl	11298 <dcgettext@plt>
   1191c:	mov	r1, r0
   11920:	movw	r0, #47972	; 0xbb64
   11924:	movw	r3, #47248	; 0xb890
   11928:	cmp	r6, r5
   1192c:	mov	r2, r6
   11930:	movt	r0, #1
   11934:	movt	r3, #1
   11938:	moveq	r3, r0
   1193c:	mov	r0, #1
   11940:	bl	113f4 <__printf_chk@plt>
   11944:	mov	r0, r4
   11948:	bl	1137c <exit@plt>
   1194c:	movw	r0, #53640	; 0xd188
   11950:	movw	r1, #45292	; 0xb0ec
   11954:	mov	r2, #5
   11958:	movt	r0, #2
   1195c:	movt	r1, #1
   11960:	ldr	r5, [r0]
   11964:	mov	r0, #0
   11968:	bl	11298 <dcgettext@plt>
   1196c:	mov	r2, r0
   11970:	movw	r0, #53688	; 0xd1b8
   11974:	mov	r1, #1
   11978:	movt	r0, #2
   1197c:	ldr	r3, [r0]
   11980:	mov	r0, r5
   11984:	bl	1140c <__fprintf_chk@plt>
   11988:	mov	r0, r4
   1198c:	bl	1137c <exit@plt>
   11990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11994:	add	fp, sp, #28
   11998:	sub	sp, sp, #164	; 0xa4
   1199c:	mvn	sl, #0
   119a0:	mov	r6, r0
   119a4:	mov	r9, r1
   119a8:	str	sl, [fp, #-32]	; 0xffffffe0
   119ac:	str	sl, [fp, #-36]	; 0xffffffdc
   119b0:	str	sl, [fp, #-40]	; 0xffffffd8
   119b4:	str	sl, [fp, #-44]	; 0xffffffd4
   119b8:	ldr	r0, [r1]
   119bc:	bl	16d4c <__assert_fail@plt+0x582c>
   119c0:	movw	r1, #47248	; 0xb890
   119c4:	mov	r0, #6
   119c8:	movt	r1, #1
   119cc:	bl	1143c <setlocale@plt>
   119d0:	movw	r5, #47791	; 0xbaaf
   119d4:	movw	r1, #47747	; 0xba83
   119d8:	movt	r5, #1
   119dc:	movt	r1, #1
   119e0:	mov	r0, r5
   119e4:	bl	114b4 <bindtextdomain@plt>
   119e8:	mov	r0, r5
   119ec:	bl	112b0 <textdomain@plt>
   119f0:	movw	r0, #11796	; 0x2e14
   119f4:	movt	r0, #1
   119f8:	bl	1b0c8 <__assert_fail@plt+0x9ba8>
   119fc:	sub	r0, fp, #68	; 0x44
   11a00:	bl	11f64 <__assert_fail@plt+0xa44>
   11a04:	movw	r7, #47771	; 0xba9b
   11a08:	movw	r5, #48344	; 0xbcd8
   11a0c:	mov	r8, #0
   11a10:	mov	r0, #16
   11a14:	movt	r7, #1
   11a18:	movt	r5, #1
   11a1c:	mov	r1, #0
   11a20:	str	r1, [sp, #12]
   11a24:	mov	r4, r0
   11a28:	mov	r0, r6
   11a2c:	mov	r1, r9
   11a30:	mov	r2, r7
   11a34:	mov	r3, r5
   11a38:	str	r8, [sp]
   11a3c:	bl	11364 <getopt_long@plt>
   11a40:	cmp	r0, #71	; 0x47
   11a44:	ble	11c14 <__assert_fail@plt+0x6f4>
   11a48:	sub	r1, r0, #72	; 0x48
   11a4c:	cmp	r1, #46	; 0x2e
   11a50:	bhi	11b24 <__assert_fail@plt+0x604>
   11a54:	add	r2, pc, #4
   11a58:	mov	r0, #17
   11a5c:	ldr	pc, [r2, r1, lsl #2]
   11a60:	andeq	r1, r1, r4, lsr #20
   11a64:	muleq	r1, r8, lr
   11a68:	muleq	r1, r8, lr
   11a6c:	muleq	r1, r8, lr
   11a70:	andeq	r1, r1, ip, lsl fp
   11a74:	muleq	r1, r8, lr
   11a78:	muleq	r1, r8, lr
   11a7c:	muleq	r1, r8, lr
   11a80:	muleq	r1, r8, fp
   11a84:	muleq	r1, r8, lr
   11a88:	andeq	r1, r1, r8, ror #22
   11a8c:	muleq	r1, r8, lr
   11a90:	muleq	r1, r8, lr
   11a94:	muleq	r1, r8, lr
   11a98:	muleq	r1, r8, lr
   11a9c:	muleq	r1, r8, lr
   11aa0:	muleq	r1, r8, lr
   11aa4:	muleq	r1, r8, lr
   11aa8:	muleq	r1, r8, lr
   11aac:	muleq	r1, r8, lr
   11ab0:	muleq	r1, r8, lr
   11ab4:	muleq	r1, r8, lr
   11ab8:	muleq	r1, r8, lr
   11abc:	muleq	r1, r8, lr
   11ac0:	muleq	r1, r8, lr
   11ac4:	muleq	r1, r8, lr
   11ac8:	muleq	r1, r8, lr
   11acc:	andeq	r1, r1, r8, asr fp
   11ad0:	muleq	r1, r8, lr
   11ad4:	muleq	r1, r8, lr
   11ad8:	andeq	r1, r1, r0, lsr #23
   11adc:	muleq	r1, r8, lr
   11ae0:			; <UNDEFINED> instruction: 0x00011bb0
   11ae4:	muleq	r1, r8, lr
   11ae8:	muleq	r1, r8, lr
   11aec:	muleq	r1, r8, lr
   11af0:	muleq	r1, r8, lr
   11af4:	muleq	r1, r8, lr
   11af8:	muleq	r1, r8, lr
   11afc:	muleq	r1, r8, lr
   11b00:	muleq	r1, r8, lr
   11b04:	muleq	r1, r8, lr
   11b08:	muleq	r1, r8, lr
   11b0c:	muleq	r1, r8, lr
   11b10:	muleq	r1, r8, lr
   11b14:	muleq	r1, r8, lr
   11b18:			; <UNDEFINED> instruction: 0x00011bbc
   11b1c:	mov	r0, #2
   11b20:	b	11a24 <__assert_fail@plt+0x504>
   11b24:	sub	r0, r0, #256	; 0x100
   11b28:	cmp	r0, #4
   11b2c:	bhi	11e98 <__assert_fail@plt+0x978>
   11b30:	add	r1, pc, #0
   11b34:	ldr	pc, [r1, r0, lsl #2]
   11b38:	andeq	r1, r1, ip, asr #22
   11b3c:	andeq	r1, r1, r8, asr #23
   11b40:	andeq	r1, r1, ip, lsl #24
   11b44:	strdeq	r1, [r1], -ip
   11b48:	andeq	r1, r1, r8, ror fp
   11b4c:	mov	sl, #1
   11b50:	mov	r0, r4
   11b54:	b	11a24 <__assert_fail@plt+0x504>
   11b58:	mov	r0, #1
   11b5c:	str	r0, [fp, #-68]	; 0xffffffbc
   11b60:	mov	r0, r4
   11b64:	b	11a24 <__assert_fail@plt+0x504>
   11b68:	mov	r0, #1
   11b6c:	strb	r0, [fp, #-64]	; 0xffffffc0
   11b70:	mov	r0, r4
   11b74:	b	11a24 <__assert_fail@plt+0x504>
   11b78:	movw	r0, #53648	; 0xd190
   11b7c:	movw	r1, #53656	; 0xd198
   11b80:	movt	r0, #2
   11b84:	movt	r1, #2
   11b88:	ldr	r0, [r0]
   11b8c:	str	r0, [r1]
   11b90:	mov	r0, r4
   11b94:	b	11a24 <__assert_fail@plt+0x504>
   11b98:	mov	r0, #16
   11b9c:	b	11a24 <__assert_fail@plt+0x504>
   11ba0:	mov	r0, #1
   11ba4:	strb	r0, [fp, #-55]	; 0xffffffc9
   11ba8:	mov	r0, r4
   11bac:	b	11a24 <__assert_fail@plt+0x504>
   11bb0:	mov	sl, #0
   11bb4:	mov	r0, r4
   11bb8:	b	11a24 <__assert_fail@plt+0x504>
   11bbc:	str	r8, [fp, #-68]	; 0xffffffbc
   11bc0:	mov	r0, r4
   11bc4:	b	11a24 <__assert_fail@plt+0x504>
   11bc8:	movw	r0, #53648	; 0xd190
   11bcc:	sub	r1, fp, #40	; 0x28
   11bd0:	sub	r2, fp, #44	; 0x2c
   11bd4:	mov	r3, #0
   11bd8:	str	r8, [sp]
   11bdc:	movt	r0, #2
   11be0:	ldr	r0, [r0]
   11be4:	bl	18dc8 <__assert_fail@plt+0x78a8>
   11be8:	mov	r1, r0
   11bec:	cmp	r0, #0
   11bf0:	mov	r0, r4
   11bf4:	beq	11a24 <__assert_fail@plt+0x504>
   11bf8:	b	11e28 <__assert_fail@plt+0x908>
   11bfc:	mov	r0, #1
   11c00:	str	r0, [sp, #12]
   11c04:	mov	r0, r4
   11c08:	b	11a24 <__assert_fail@plt+0x504>
   11c0c:	mov	r0, r4
   11c10:	b	11a1c <__assert_fail@plt+0x4fc>
   11c14:	cmn	r0, #1
   11c18:	bne	11dbc <__assert_fail@plt+0x89c>
   11c1c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   11c20:	mov	r7, #16
   11c24:	cmp	r0, #0
   11c28:	beq	11c64 <__assert_fail@plt+0x744>
   11c2c:	cmp	r4, #16
   11c30:	bne	11c6c <__assert_fail@plt+0x74c>
   11c34:	mov	r0, #0
   11c38:	cmp	sl, #1
   11c3c:	bne	11c74 <__assert_fail@plt+0x754>
   11c40:	movw	r1, #47830	; 0xbad6
   11c44:	mov	r0, #0
   11c48:	mov	r2, #5
   11c4c:	movt	r1, #1
   11c50:	bl	11298 <dcgettext@plt>
   11c54:	mov	r2, r0
   11c58:	mov	r0, #1
   11c5c:	mov	r1, #0
   11c60:	bl	1131c <error@plt>
   11c64:	mov	r0, sl
   11c68:	b	11c74 <__assert_fail@plt+0x754>
   11c6c:	mov	r0, sl
   11c70:	mov	r7, r4
   11c74:	movw	sl, #53656	; 0xd198
   11c78:	movw	r4, #53632	; 0xd180
   11c7c:	cmp	r0, #0
   11c80:	mov	r2, #2
   11c84:	sub	r8, fp, #68	; 0x44
   11c88:	movt	sl, #2
   11c8c:	movt	r4, #2
   11c90:	movwne	r0, #1
   11c94:	strb	r0, [fp, #-56]	; 0xffffffc8
   11c98:	ldr	r1, [sl]
   11c9c:	ldr	r0, [r4]
   11ca0:	cmp	r1, #0
   11ca4:	sub	r3, r6, r0
   11ca8:	movwne	r2, #1
   11cac:	cmp	r3, r2
   11cb0:	blt	11e58 <__assert_fail@plt+0x938>
   11cb4:	cmp	r1, #0
   11cb8:	beq	11d54 <__assert_fail@plt+0x834>
   11cbc:	add	r2, sp, #16
   11cc0:	mov	r0, #3
   11cc4:	bl	114c0 <__xstat64@plt>
   11cc8:	cmp	r0, #0
   11ccc:	bne	11ea0 <__assert_fail@plt+0x980>
   11cd0:	ldr	r0, [sp, #40]	; 0x28
   11cd4:	ldr	r1, [sp, #44]	; 0x2c
   11cd8:	str	r0, [fp, #-32]	; 0xffffffe0
   11cdc:	str	r1, [fp, #-36]	; 0xffffffdc
   11ce0:	bl	11ff4 <__assert_fail@plt+0xad4>
   11ce4:	str	r0, [fp, #-52]	; 0xffffffcc
   11ce8:	ldr	r0, [sp, #44]	; 0x2c
   11cec:	bl	11fac <__assert_fail@plt+0xa8c>
   11cf0:	str	r0, [fp, #-48]	; 0xffffffd0
   11cf4:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   11cf8:	cmp	r0, #0
   11cfc:	beq	11d24 <__assert_fail@plt+0x804>
   11d00:	ldr	r0, [sp, #12]
   11d04:	eor	r0, r0, #1
   11d08:	tst	r0, #1
   11d0c:	bne	11d24 <__assert_fail@plt+0x804>
   11d10:	add	r0, sl, #8
   11d14:	bl	18d28 <__assert_fail@plt+0x7808>
   11d18:	cmp	r0, #0
   11d1c:	str	r0, [fp, #-60]	; 0xffffffc4
   11d20:	beq	11ec8 <__assert_fail@plt+0x9a8>
   11d24:	ldr	r0, [r4]
   11d28:	ldr	r1, [fp, #-40]	; 0xffffffd8
   11d2c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11d30:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11d34:	ldr	r6, [fp, #-44]	; 0xffffffd4
   11d38:	add	r0, r9, r0, lsl #2
   11d3c:	stm	sp, {r1, r6, r8}
   11d40:	orr	r1, r7, #1024	; 0x400
   11d44:	bl	1203c <__assert_fail@plt+0xb1c>
   11d48:	eor	r0, r0, #1
   11d4c:	sub	sp, fp, #28
   11d50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d54:	ldr	r0, [r9, r0, lsl #2]
   11d58:	add	r1, r8, #20
   11d5c:	add	r3, r8, #16
   11d60:	sub	r2, fp, #36	; 0x24
   11d64:	str	r1, [sp]
   11d68:	sub	r1, fp, #32
   11d6c:	bl	18dc8 <__assert_fail@plt+0x78a8>
   11d70:	cmp	r0, #0
   11d74:	bne	11f38 <__assert_fail@plt+0xa18>
   11d78:	ldr	r0, [fp, #-52]	; 0xffffffcc
   11d7c:	cmp	r0, #0
   11d80:	bne	11da0 <__assert_fail@plt+0x880>
   11d84:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11d88:	cmp	r0, #0
   11d8c:	beq	11da0 <__assert_fail@plt+0x880>
   11d90:	movw	r0, #47248	; 0xb890
   11d94:	movt	r0, #1
   11d98:	bl	19d80 <__assert_fail@plt+0x8860>
   11d9c:	str	r0, [fp, #-52]	; 0xffffffcc
   11da0:	ldr	r0, [r4]
   11da4:	add	r0, r0, #1
   11da8:	str	r0, [r4]
   11dac:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   11db0:	cmp	r0, #0
   11db4:	bne	11d00 <__assert_fail@plt+0x7e0>
   11db8:	b	11d24 <__assert_fail@plt+0x804>
   11dbc:	cmn	r0, #3
   11dc0:	bne	11e18 <__assert_fail@plt+0x8f8>
   11dc4:	movw	r0, #53552	; 0xd130
   11dc8:	movw	r2, #47817	; 0xbac9
   11dcc:	mov	r1, #0
   11dd0:	movw	r7, #47801	; 0xbab9
   11dd4:	movt	r0, #2
   11dd8:	movt	r2, #1
   11ddc:	str	r1, [sp, #8]
   11de0:	movw	r1, #47741	; 0xba7d
   11de4:	movt	r7, #1
   11de8:	movt	r1, #1
   11dec:	ldr	r3, [r0]
   11df0:	movw	r0, #53644	; 0xd18c
   11df4:	str	r2, [sp, #4]
   11df8:	movw	r2, #47787	; 0xbaab
   11dfc:	str	r7, [sp]
   11e00:	movt	r0, #2
   11e04:	movt	r2, #1
   11e08:	ldr	r0, [r0]
   11e0c:	bl	19648 <__assert_fail@plt+0x8128>
   11e10:	mov	r0, #0
   11e14:	bl	1137c <exit@plt>
   11e18:	cmn	r0, #2
   11e1c:	bne	11e98 <__assert_fail@plt+0x978>
   11e20:	mov	r0, #0
   11e24:	bl	11620 <__assert_fail@plt+0x100>
   11e28:	movw	r0, #53648	; 0xd190
   11e2c:	mov	r4, r1
   11e30:	movt	r0, #2
   11e34:	ldr	r0, [r0]
   11e38:	bl	18d10 <__assert_fail@plt+0x77f0>
   11e3c:	movw	r2, #47780	; 0xbaa4
   11e40:	str	r0, [sp]
   11e44:	mov	r0, #1
   11e48:	mov	r1, #0
   11e4c:	mov	r3, r4
   11e50:	movt	r2, #1
   11e54:	bl	1131c <error@plt>
   11e58:	cmp	r0, r6
   11e5c:	bge	11f0c <__assert_fail@plt+0x9ec>
   11e60:	movw	r1, #47888	; 0xbb10
   11e64:	mov	r0, #0
   11e68:	mov	r2, #5
   11e6c:	movt	r1, #1
   11e70:	bl	11298 <dcgettext@plt>
   11e74:	mov	r5, r0
   11e78:	add	r0, r9, r6, lsl #2
   11e7c:	ldr	r0, [r0, #-4]
   11e80:	bl	18d10 <__assert_fail@plt+0x77f0>
   11e84:	mov	r3, r0
   11e88:	mov	r0, #0
   11e8c:	mov	r1, #0
   11e90:	mov	r2, r5
   11e94:	bl	1131c <error@plt>
   11e98:	mov	r0, #1
   11e9c:	bl	11620 <__assert_fail@plt+0x100>
   11ea0:	bl	113d0 <__errno_location@plt>
   11ea4:	movw	r1, #47913	; 0xbb29
   11ea8:	ldr	r4, [r0]
   11eac:	mov	r0, #0
   11eb0:	mov	r2, #5
   11eb4:	movt	r1, #1
   11eb8:	bl	11298 <dcgettext@plt>
   11ebc:	ldr	r1, [sl]
   11ec0:	mov	r5, r0
   11ec4:	b	11ef0 <__assert_fail@plt+0x9d0>
   11ec8:	bl	113d0 <__errno_location@plt>
   11ecc:	movw	r1, #47913	; 0xbb29
   11ed0:	ldr	r4, [r0]
   11ed4:	mov	r0, #0
   11ed8:	mov	r2, #5
   11edc:	movt	r1, #1
   11ee0:	bl	11298 <dcgettext@plt>
   11ee4:	movw	r1, #50791	; 0xc667
   11ee8:	mov	r5, r0
   11eec:	movt	r1, #1
   11ef0:	mov	r0, #4
   11ef4:	bl	187e8 <__assert_fail@plt+0x72c8>
   11ef8:	mov	r3, r0
   11efc:	mov	r0, #1
   11f00:	mov	r1, r4
   11f04:	mov	r2, r5
   11f08:	bl	1131c <error@plt>
   11f0c:	movw	r1, #47872	; 0xbb00
   11f10:	mov	r0, #0
   11f14:	mov	r2, #5
   11f18:	movt	r1, #1
   11f1c:	bl	11298 <dcgettext@plt>
   11f20:	mov	r2, r0
   11f24:	mov	r0, #0
   11f28:	mov	r1, #0
   11f2c:	bl	1131c <error@plt>
   11f30:	mov	r0, #1
   11f34:	bl	11620 <__assert_fail@plt+0x100>
   11f38:	mov	r5, r0
   11f3c:	ldr	r0, [r4]
   11f40:	ldr	r0, [r9, r0, lsl #2]
   11f44:	bl	18d10 <__assert_fail@plt+0x77f0>
   11f48:	movw	r2, #47780	; 0xbaa4
   11f4c:	str	r0, [sp]
   11f50:	mov	r0, #1
   11f54:	mov	r1, #0
   11f58:	mov	r3, r5
   11f5c:	movt	r2, #1
   11f60:	bl	1131c <error@plt>
   11f64:	mov	r1, #0
   11f68:	mov	r2, #2
   11f6c:	str	r1, [r0, #8]
   11f70:	str	r2, [r0]
   11f74:	mov	r2, #1
   11f78:	str	r1, [r0, #16]
   11f7c:	str	r1, [r0, #20]
   11f80:	strh	r2, [r0, #12]
   11f84:	strb	r1, [r0, #4]
   11f88:	bx	lr
   11f8c:	push	{r4, sl, fp, lr}
   11f90:	add	fp, sp, #8
   11f94:	mov	r4, r0
   11f98:	ldr	r0, [r0, #16]
   11f9c:	bl	12f00 <__assert_fail@plt+0x19e0>
   11fa0:	ldr	r0, [r4, #20]
   11fa4:	pop	{r4, sl, fp, lr}
   11fa8:	b	12f00 <__assert_fail@plt+0x19e0>
   11fac:	push	{r4, sl, fp, lr}
   11fb0:	add	fp, sp, #8
   11fb4:	sub	sp, sp, #24
   11fb8:	mov	r4, r0
   11fbc:	bl	11508 <getgrgid@plt>
   11fc0:	cmp	r0, #0
   11fc4:	beq	11fd8 <__assert_fail@plt+0xab8>
   11fc8:	ldr	r0, [r0]
   11fcc:	bl	19d80 <__assert_fail@plt+0x8860>
   11fd0:	sub	sp, fp, #8
   11fd4:	pop	{r4, sl, fp, pc}
   11fd8:	add	r2, sp, #3
   11fdc:	mov	r0, r4
   11fe0:	mov	r1, #0
   11fe4:	bl	16c58 <__assert_fail@plt+0x5738>
   11fe8:	bl	19d80 <__assert_fail@plt+0x8860>
   11fec:	sub	sp, fp, #8
   11ff0:	pop	{r4, sl, fp, pc}
   11ff4:	push	{r4, sl, fp, lr}
   11ff8:	add	fp, sp, #8
   11ffc:	sub	sp, sp, #24
   12000:	mov	r4, r0
   12004:	bl	11238 <getpwuid@plt>
   12008:	cmp	r0, #0
   1200c:	beq	12020 <__assert_fail@plt+0xb00>
   12010:	ldr	r0, [r0]
   12014:	bl	19d80 <__assert_fail@plt+0x8860>
   12018:	sub	sp, fp, #8
   1201c:	pop	{r4, sl, fp, pc}
   12020:	add	r2, sp, #3
   12024:	mov	r0, r4
   12028:	mov	r1, #0
   1202c:	bl	16c58 <__assert_fail@plt+0x5738>
   12030:	bl	19d80 <__assert_fail@plt+0x8860>
   12034:	sub	sp, fp, #8
   12038:	pop	{r4, sl, fp, pc}
   1203c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12040:	add	fp, sp, #28
   12044:	sub	sp, sp, #252	; 0xfc
   12048:	str	r3, [sp, #12]
   1204c:	str	r2, [sp, #20]
   12050:	ldr	r2, [fp, #8]
   12054:	ldr	r3, [fp, #12]
   12058:	ldr	r5, [fp, #16]
   1205c:	and	r3, r3, r2
   12060:	mov	r2, #0
   12064:	cmn	r3, #1
   12068:	str	r3, [sp, #24]
   1206c:	bne	12090 <__assert_fail@plt+0xb70>
   12070:	ldrb	r3, [r5, #12]
   12074:	cmp	r3, #0
   12078:	bne	12090 <__assert_fail@plt+0xb70>
   1207c:	ldr	r2, [r5]
   12080:	sub	r2, r2, #2
   12084:	clz	r2, r2
   12088:	lsr	r2, r2, #5
   1208c:	lsl	r2, r2, #3
   12090:	orr	r1, r2, r1
   12094:	mov	r2, #0
   12098:	bl	19dfc <__assert_fail@plt+0x88dc>
   1209c:	str	r0, [sp, #36]	; 0x24
   120a0:	bl	13a68 <__assert_fail@plt+0x2548>
   120a4:	cmp	r0, #0
   120a8:	beq	12cc4 <__assert_fail@plt+0x17a4>
   120ac:	ldr	r1, [sp, #20]
   120b0:	mov	r9, r0
   120b4:	movw	r0, #49084	; 0xbfbc
   120b8:	movw	r2, #49059	; 0xbfa3
   120bc:	mov	r6, #1
   120c0:	movt	r0, #1
   120c4:	movt	r2, #1
   120c8:	cmn	r1, #1
   120cc:	moveq	r2, r0
   120d0:	sub	r0, fp, #136	; 0x88
   120d4:	add	r0, r0, #96	; 0x60
   120d8:	str	r2, [sp, #8]
   120dc:	str	r0, [sp, #4]
   120e0:	b	12158 <__assert_fail@plt+0xc38>
   120e4:	movw	r1, #49105	; 0xbfd1
   120e8:	mov	r0, #0
   120ec:	mov	r2, #5
   120f0:	movt	r1, #1
   120f4:	bl	11298 <dcgettext@plt>
   120f8:	ldr	r1, [sp, #28]
   120fc:	mov	r4, r0
   12100:	mov	r0, #4
   12104:	bl	187e8 <__assert_fail@plt+0x72c8>
   12108:	mov	r2, r0
   1210c:	mov	r0, #1
   12110:	mov	r1, r4
   12114:	bl	113f4 <__printf_chk@plt>
   12118:	mov	r0, r7
   1211c:	bl	12f00 <__assert_fail@plt+0x19e0>
   12120:	mov	r0, sl
   12124:	bl	12f00 <__assert_fail@plt+0x19e0>
   12128:	ldr	r4, [sp, #16]
   1212c:	ldr	r5, [fp, #16]
   12130:	ldrb	r0, [r5, #4]
   12134:	cmp	r0, #0
   12138:	beq	1226c <__assert_fail@plt+0xd4c>
   1213c:	ldr	r6, [sp, #32]
   12140:	ldr	r0, [sp, #36]	; 0x24
   12144:	and	r6, r6, r4
   12148:	bl	13a68 <__assert_fail@plt+0x2548>
   1214c:	mov	r9, r0
   12150:	cmp	r0, #0
   12154:	beq	12cc8 <__assert_fail@plt+0x17a8>
   12158:	ldrh	r0, [r9, #56]	; 0x38
   1215c:	ldr	r8, [r9, #24]
   12160:	ldr	r7, [r9, #28]
   12164:	add	sl, r9, #64	; 0x40
   12168:	sub	r0, r0, #1
   1216c:	cmp	r0, #9
   12170:	bhi	1238c <__assert_fail@plt+0xe6c>
   12174:	add	r1, pc, #0
   12178:	ldr	pc, [r1, r0, lsl #2]
   1217c:	andeq	r2, r1, r4, lsr #3
   12180:	andeq	r2, r1, r8, lsr #6
   12184:	andeq	r2, r1, ip, lsl #7
   12188:	andeq	r2, r1, r0, lsl #5
   1218c:	andeq	r2, r1, ip, lsl #7
   12190:	andeq	r2, r1, r0, lsl #7
   12194:	muleq	r1, r4, r4
   12198:	andeq	r2, r1, ip, lsl #7
   1219c:	andeq	r2, r1, ip, lsl #7
   121a0:			; <UNDEFINED> instruction: 0x000122b4
   121a4:	ldrb	r0, [r5, #4]
   121a8:	cmp	r0, #0
   121ac:	beq	1238c <__assert_fail@plt+0xe6c>
   121b0:	ldr	r0, [r5, #8]
   121b4:	mov	r4, #1
   121b8:	cmp	r0, #0
   121bc:	beq	12140 <__assert_fail@plt+0xc20>
   121c0:	add	r1, r9, #160	; 0xa0
   121c4:	mov	r8, r6
   121c8:	ldrd	r2, [r0]
   121cc:	ldr	r6, [r1]
   121d0:	ldr	r5, [r1, #4]
   121d4:	eor	r1, r5, r3
   121d8:	eor	r2, r6, r2
   121dc:	orrs	r1, r2, r1
   121e0:	bne	12670 <__assert_fail@plt+0x1150>
   121e4:	ldrd	r0, [r0, #8]
   121e8:	ldrd	r2, [sl]
   121ec:	ldr	r5, [fp, #16]
   121f0:	mov	r6, r8
   121f4:	eor	r1, r3, r1
   121f8:	eor	r0, r2, r0
   121fc:	orrs	r0, r0, r1
   12200:	bne	12140 <__assert_fail@plt+0xc20>
   12204:	movw	r6, #50791	; 0xc667
   12208:	mov	r0, r7
   1220c:	movt	r6, #1
   12210:	mov	r1, r6
   12214:	bl	1122c <strcmp@plt>
   12218:	cmp	r0, #0
   1221c:	beq	12b94 <__assert_fail@plt+0x1674>
   12220:	movw	r1, #48702	; 0xbe3e
   12224:	mov	r0, #0
   12228:	mov	r2, #5
   1222c:	movt	r1, #1
   12230:	bl	11298 <dcgettext@plt>
   12234:	mov	r4, r0
   12238:	mov	r0, #0
   1223c:	mov	r1, #4
   12240:	mov	r2, r7
   12244:	bl	18740 <__assert_fail@plt+0x7220>
   12248:	mov	r5, r0
   1224c:	mov	r0, #1
   12250:	mov	r1, #4
   12254:	mov	r2, r6
   12258:	bl	18740 <__assert_fail@plt+0x7220>
   1225c:	mov	r3, r5
   12260:	ldr	r5, [fp, #16]
   12264:	str	r0, [sp]
   12268:	b	12bbc <__assert_fail@plt+0x169c>
   1226c:	ldr	r0, [sp, #36]	; 0x24
   12270:	mov	r1, r9
   12274:	mov	r2, #4
   12278:	bl	152c8 <__assert_fail@plt+0x3da8>
   1227c:	b	1213c <__assert_fail@plt+0xc1c>
   12280:	ldrb	r0, [r5, #13]
   12284:	str	r6, [sp, #32]
   12288:	mov	sl, #0
   1228c:	mov	r6, #1
   12290:	str	r7, [sp, #28]
   12294:	cmp	r0, #0
   12298:	bne	124b0 <__assert_fail@plt+0xf90>
   1229c:	ldr	r4, [r9, #32]
   122a0:	movw	r1, #48826	; 0xbeba
   122a4:	mov	sl, #0
   122a8:	mov	r0, #0
   122ac:	movt	r1, #1
   122b0:	b	122fc <__assert_fail@plt+0xddc>
   122b4:	ldr	r0, [r9, #48]	; 0x30
   122b8:	cmp	r0, #0
   122bc:	bne	122cc <__assert_fail@plt+0xdac>
   122c0:	ldr	r0, [r9, #16]
   122c4:	cmp	r0, #0
   122c8:	beq	126a0 <__assert_fail@plt+0x1180>
   122cc:	ldrb	r0, [r5, #13]
   122d0:	str	r6, [sp, #32]
   122d4:	mov	sl, #0
   122d8:	mov	r6, #1
   122dc:	str	r7, [sp, #28]
   122e0:	cmp	r0, #0
   122e4:	bne	124b0 <__assert_fail@plt+0xf90>
   122e8:	ldr	r4, [r9, #32]
   122ec:	movw	r1, #48809	; 0xbea9
   122f0:	mov	sl, #0
   122f4:	mov	r0, #0
   122f8:	movt	r1, #1
   122fc:	mov	r2, #5
   12300:	bl	11298 <dcgettext@plt>
   12304:	mov	r5, r0
   12308:	mov	r0, #4
   1230c:	mov	r1, r7
   12310:	bl	187e8 <__assert_fail@plt+0x72c8>
   12314:	mov	r3, r0
   12318:	mov	r0, #0
   1231c:	mov	r1, r4
   12320:	mov	r2, r5
   12324:	b	12624 <__assert_fail@plt+0x1104>
   12328:	ldr	r0, [sp, #36]	; 0x24
   1232c:	mov	r1, r9
   12330:	bl	19e48 <__assert_fail@plt+0x8928>
   12334:	cmp	r0, #0
   12338:	beq	1238c <__assert_fail@plt+0xe6c>
   1233c:	movw	r1, #48851	; 0xbed3
   12340:	mov	r0, #0
   12344:	mov	r2, #5
   12348:	movt	r1, #1
   1234c:	bl	11298 <dcgettext@plt>
   12350:	mov	r4, r0
   12354:	mov	r0, #0
   12358:	mov	r1, #3
   1235c:	mov	r2, r7
   12360:	bl	18a64 <__assert_fail@plt+0x7544>
   12364:	mov	r3, r0
   12368:	mov	r0, #0
   1236c:	mov	r1, #0
   12370:	mov	r2, r4
   12374:	bl	1131c <error@plt>
   12378:	mov	r4, #0
   1237c:	b	12140 <__assert_fail@plt+0xc20>
   12380:	ldrb	r0, [r5, #4]
   12384:	cmp	r0, #0
   12388:	beq	125f0 <__assert_fail@plt+0x10d0>
   1238c:	ldr	r0, [sp, #24]
   12390:	str	r6, [sp, #32]
   12394:	cmn	r0, #1
   12398:	bne	123b4 <__assert_fail@plt+0xe94>
   1239c:	ldr	r0, [r5]
   123a0:	cmp	r0, #2
   123a4:	bne	123b4 <__assert_fail@plt+0xe94>
   123a8:	ldr	r0, [r5, #8]
   123ac:	cmp	r0, #0
   123b0:	beq	1267c <__assert_fail@plt+0x115c>
   123b4:	ldrb	r0, [r5, #12]
   123b8:	cmp	r0, #0
   123bc:	beq	12460 <__assert_fail@plt+0xf40>
   123c0:	ldr	r0, [r9, #80]	; 0x50
   123c4:	and	r0, r0, #61440	; 0xf000
   123c8:	cmp	r0, #40960	; 0xa000
   123cc:	bne	12460 <__assert_fail@plt+0xf40>
   123d0:	ldr	r0, [sp, #36]	; 0x24
   123d4:	add	sl, sp, #40	; 0x28
   123d8:	mov	r2, r8
   123dc:	mov	r3, sl
   123e0:	ldr	r1, [r0, #32]
   123e4:	mov	r0, #0
   123e8:	str	r0, [sp]
   123ec:	mov	r0, #3
   123f0:	bl	112bc <__fxstatat64@plt>
   123f4:	cmp	r0, #0
   123f8:	beq	12460 <__assert_fail@plt+0xf40>
   123fc:	ldrb	r0, [r5, #13]
   12400:	mov	r4, #0
   12404:	mov	r6, #1
   12408:	str	r7, [sp, #28]
   1240c:	cmp	r0, #0
   12410:	bne	12458 <__assert_fail@plt+0xf38>
   12414:	bl	113d0 <__errno_location@plt>
   12418:	movw	r1, #49037	; 0xbf8d
   1241c:	ldr	r4, [r0]
   12420:	mov	r0, #0
   12424:	mov	r2, #5
   12428:	movt	r1, #1
   1242c:	bl	11298 <dcgettext@plt>
   12430:	ldr	r1, [sp, #28]
   12434:	mov	r5, r0
   12438:	mov	r0, #4
   1243c:	bl	187e8 <__assert_fail@plt+0x72c8>
   12440:	mov	r3, r0
   12444:	mov	r0, #0
   12448:	mov	r1, r4
   1244c:	mov	r2, r5
   12450:	bl	1131c <error@plt>
   12454:	mov	r4, #0
   12458:	add	sl, sp, #40	; 0x28
   1245c:	b	12b7c <__assert_fail@plt+0x165c>
   12460:	ldr	r2, [fp, #8]
   12464:	cmn	r2, #1
   12468:	beq	124b8 <__assert_fail@plt+0xf98>
   1246c:	ldr	r1, [sl, #24]
   12470:	ldr	r3, [fp, #12]
   12474:	sub	r0, r1, r2
   12478:	cmn	r3, #1
   1247c:	clz	r0, r0
   12480:	lsr	r0, r0, #5
   12484:	beq	124d8 <__assert_fail@plt+0xfb8>
   12488:	cmp	r1, r2
   1248c:	beq	124c4 <__assert_fail@plt+0xfa4>
   12490:	b	124d8 <__assert_fail@plt+0xfb8>
   12494:	ldrb	r0, [r5, #13]
   12498:	str	r6, [sp, #32]
   1249c:	mov	sl, #0
   124a0:	mov	r6, #1
   124a4:	str	r7, [sp, #28]
   124a8:	cmp	r0, #0
   124ac:	beq	125f8 <__assert_fail@plt+0x10d8>
   124b0:	mov	r5, #1
   124b4:	b	127e0 <__assert_fail@plt+0x12c0>
   124b8:	ldr	r0, [fp, #12]
   124bc:	cmn	r0, #1
   124c0:	beq	1268c <__assert_fail@plt+0x116c>
   124c4:	ldr	r0, [sl, #28]
   124c8:	ldr	r1, [fp, #12]
   124cc:	sub	r0, r0, r1
   124d0:	clz	r0, r0
   124d4:	lsr	r0, r0, #5
   124d8:	ldrh	r1, [r9, #56]	; 0x38
   124dc:	cmp	r1, #6
   124e0:	bhi	124fc <__assert_fail@plt+0xfdc>
   124e4:	mov	r2, #1
   124e8:	mov	r3, #86	; 0x56
   124ec:	tst	r3, r2, lsl r1
   124f0:	ldrne	r1, [r5, #8]
   124f4:	cmpne	r1, #0
   124f8:	bne	1254c <__assert_fail@plt+0x102c>
   124fc:	mov	r4, #1
   12500:	cmp	r0, #0
   12504:	str	r7, [sp, #28]
   12508:	beq	12b78 <__assert_fail@plt+0x1658>
   1250c:	ldr	r0, [sp, #36]	; 0x24
   12510:	ldr	r6, [r0, #32]
   12514:	ldrb	r0, [r5, #12]
   12518:	cmp	r0, #0
   1251c:	beq	12630 <__assert_fail@plt+0x1110>
   12520:	ldr	r0, [sp, #24]
   12524:	cmn	r0, #1
   12528:	beq	12760 <__assert_fail@plt+0x1240>
   1252c:	ldr	r0, [sl, #16]
   12530:	and	r0, r0, #61440	; 0xf000
   12534:	cmp	r0, #32768	; 0x8000
   12538:	beq	126c0 <__assert_fail@plt+0x11a0>
   1253c:	cmp	r0, #16384	; 0x4000
   12540:	bne	12760 <__assert_fail@plt+0x1240>
   12544:	mov	r5, #18688	; 0x4900
   12548:	b	126c4 <__assert_fail@plt+0x11a4>
   1254c:	ldrd	r2, [r1]
   12550:	ldr	r5, [sl, #100]	; 0x64
   12554:	ldr	r6, [sl, #96]	; 0x60
   12558:	eor	r3, r5, r3
   1255c:	ldr	r5, [fp, #16]
   12560:	eor	r2, r6, r2
   12564:	orrs	r2, r2, r3
   12568:	bne	124fc <__assert_fail@plt+0xfdc>
   1256c:	ldrd	r2, [r1, #8]
   12570:	ldr	r1, [sl, #4]
   12574:	ldr	r6, [sl]
   12578:	eor	r1, r1, r3
   1257c:	eor	r2, r6, r2
   12580:	orrs	r1, r2, r1
   12584:	bne	124fc <__assert_fail@plt+0xfdc>
   12588:	movw	r6, #50791	; 0xc667
   1258c:	mov	r0, r7
   12590:	movt	r6, #1
   12594:	mov	r1, r6
   12598:	bl	1122c <strcmp@plt>
   1259c:	cmp	r0, #0
   125a0:	beq	12ae0 <__assert_fail@plt+0x15c0>
   125a4:	movw	r1, #48702	; 0xbe3e
   125a8:	mov	r0, #0
   125ac:	mov	r2, #5
   125b0:	movt	r1, #1
   125b4:	bl	11298 <dcgettext@plt>
   125b8:	mov	r4, r0
   125bc:	mov	r0, #0
   125c0:	mov	r1, #4
   125c4:	mov	r2, r7
   125c8:	bl	18740 <__assert_fail@plt+0x7220>
   125cc:	mov	r5, r0
   125d0:	mov	r0, #1
   125d4:	mov	r1, #4
   125d8:	mov	r2, r6
   125dc:	bl	18740 <__assert_fail@plt+0x7220>
   125e0:	mov	r3, r5
   125e4:	ldr	r5, [fp, #16]
   125e8:	str	r0, [sp]
   125ec:	b	12b08 <__assert_fail@plt+0x15e8>
   125f0:	mov	r4, #1
   125f4:	b	12140 <__assert_fail@plt+0xc20>
   125f8:	ldr	r4, [r9, #32]
   125fc:	mov	r0, #0
   12600:	mov	r1, #3
   12604:	mov	r2, r7
   12608:	mov	sl, #0
   1260c:	bl	18a64 <__assert_fail@plt+0x7544>
   12610:	movw	r2, #47784	; 0xbaa8
   12614:	mov	r3, r0
   12618:	mov	r0, #0
   1261c:	mov	r1, r4
   12620:	movt	r2, #1
   12624:	bl	1131c <error@plt>
   12628:	mov	r5, #1
   1262c:	b	127e0 <__assert_fail@plt+0x12c0>
   12630:	ldr	r2, [sp, #20]
   12634:	ldr	r3, [sp, #12]
   12638:	mov	r0, #256	; 0x100
   1263c:	mov	r1, r8
   12640:	str	r0, [sp]
   12644:	mov	r0, r6
   12648:	bl	114a8 <fchownat@plt>
   1264c:	cmp	r0, #0
   12650:	beq	12ac0 <__assert_fail@plt+0x15a0>
   12654:	bl	113d0 <__errno_location@plt>
   12658:	ldr	r0, [r0]
   1265c:	mov	r6, #0
   12660:	cmp	r0, #95	; 0x5f
   12664:	bne	12788 <__assert_fail@plt+0x1268>
   12668:	mov	r5, #0
   1266c:	b	12ac8 <__assert_fail@plt+0x15a8>
   12670:	ldr	r5, [fp, #16]
   12674:	mov	r6, r8
   12678:	b	12140 <__assert_fail@plt+0xc20>
   1267c:	ldrb	r0, [r5, #12]
   12680:	add	sl, r9, #64	; 0x40
   12684:	cmp	r0, #0
   12688:	bne	123c0 <__assert_fail@plt+0xea0>
   1268c:	mov	r0, #1
   12690:	ldrh	r1, [r9, #56]	; 0x38
   12694:	cmp	r1, #6
   12698:	bls	124e4 <__assert_fail@plt+0xfc4>
   1269c:	b	124fc <__assert_fail@plt+0xfdc>
   126a0:	mov	r0, #1
   126a4:	mov	r1, r9
   126a8:	mov	r2, #1
   126ac:	str	r0, [r9, #16]
   126b0:	ldr	r0, [sp, #36]	; 0x24
   126b4:	bl	152c8 <__assert_fail@plt+0x3da8>
   126b8:	mov	r4, #1
   126bc:	b	12140 <__assert_fail@plt+0xc20>
   126c0:	mov	r5, #2304	; 0x900
   126c4:	mov	r0, r6
   126c8:	mov	r1, r8
   126cc:	mov	r2, r5
   126d0:	bl	113b8 <openat64@plt>
   126d4:	mov	r7, r0
   126d8:	cmn	r0, #1
   126dc:	ble	12714 <__assert_fail@plt+0x11f4>
   126e0:	mov	r0, #3
   126e4:	mov	r1, r7
   126e8:	sub	r2, fp, #136	; 0x88
   126ec:	bl	112d4 <__fxstat64@plt>
   126f0:	cmp	r0, #0
   126f4:	beq	12a38 <__assert_fail@plt+0x1518>
   126f8:	bl	113d0 <__errno_location@plt>
   126fc:	ldr	r5, [r0]
   12700:	mov	r4, r0
   12704:	mov	r0, r7
   12708:	bl	114e4 <close@plt>
   1270c:	str	r5, [r4]
   12710:	b	12788 <__assert_fail@plt+0x1268>
   12714:	bl	113d0 <__errno_location@plt>
   12718:	mov	r4, r0
   1271c:	ldr	r0, [r0]
   12720:	cmp	r0, #13
   12724:	bne	12788 <__assert_fail@plt+0x1268>
   12728:	ldr	r0, [sl, #16]
   1272c:	and	r0, r0, #61440	; 0xf000
   12730:	cmp	r0, #32768	; 0x8000
   12734:	bne	12760 <__assert_fail@plt+0x1240>
   12738:	orr	r2, r5, #1
   1273c:	mov	r0, r6
   12740:	mov	r1, r8
   12744:	bl	113b8 <openat64@plt>
   12748:	mov	r7, r0
   1274c:	cmn	r0, #1
   12750:	bgt	126e0 <__assert_fail@plt+0x11c0>
   12754:	ldr	r0, [r4]
   12758:	cmp	r0, #13
   1275c:	bne	12788 <__assert_fail@plt+0x1268>
   12760:	ldr	r0, [sp, #36]	; 0x24
   12764:	ldr	r2, [sp, #20]
   12768:	ldr	r3, [sp, #12]
   1276c:	mov	r5, #0
   12770:	mov	r1, r8
   12774:	str	r5, [sp]
   12778:	ldr	r0, [r0, #32]
   1277c:	bl	114a8 <fchownat@plt>
   12780:	cmp	r0, #0
   12784:	beq	12ac4 <__assert_fail@plt+0x15a4>
   12788:	ldr	r0, [fp, #16]
   1278c:	mov	r5, #0
   12790:	ldrb	r0, [r0, #13]
   12794:	cmp	r0, #0
   12798:	bne	127dc <__assert_fail@plt+0x12bc>
   1279c:	bl	113d0 <__errno_location@plt>
   127a0:	ldr	r1, [sp, #8]
   127a4:	ldr	r4, [r0]
   127a8:	mov	r0, #0
   127ac:	mov	r2, #5
   127b0:	mov	r5, #0
   127b4:	bl	11298 <dcgettext@plt>
   127b8:	ldr	r1, [sp, #28]
   127bc:	mov	r6, r0
   127c0:	mov	r0, #4
   127c4:	bl	187e8 <__assert_fail@plt+0x72c8>
   127c8:	mov	r3, r0
   127cc:	mov	r0, #0
   127d0:	mov	r1, r4
   127d4:	mov	r2, r6
   127d8:	bl	1131c <error@plt>
   127dc:	mov	r6, #1
   127e0:	mov	r4, #0
   127e4:	ldr	r0, [fp, #16]
   127e8:	ldr	r0, [r0]
   127ec:	cmp	r0, #2
   127f0:	beq	1212c <__assert_fail@plt+0xc0c>
   127f4:	eor	r1, r4, #1
   127f8:	orrs	r1, r5, r1
   127fc:	eorseq	r1, r6, #1
   12800:	beq	12844 <__assert_fail@plt+0x1324>
   12804:	cmp	r0, #0
   12808:	bne	1212c <__assert_fail@plt+0xc0c>
   1280c:	cmp	r6, #0
   12810:	mov	r5, #1
   12814:	mov	r0, #3
   12818:	str	r4, [sp, #16]
   1281c:	movwne	r5, #4
   12820:	cmp	r4, #0
   12824:	moveq	r5, r0
   12828:	cmp	sl, #0
   1282c:	bne	12898 <__assert_fail@plt+0x1378>
   12830:	mov	r7, #0
   12834:	mov	sl, #0
   12838:	cmp	r5, #1
   1283c:	beq	120e4 <__assert_fail@plt+0xbc4>
   12840:	b	12918 <__assert_fail@plt+0x13f8>
   12844:	ldr	r1, [sp, #20]
   12848:	cmn	r1, #1
   1284c:	beq	12860 <__assert_fail@plt+0x1340>
   12850:	ldr	r1, [sl, #24]
   12854:	ldr	r2, [sp, #20]
   12858:	cmp	r1, r2
   1285c:	bne	1287c <__assert_fail@plt+0x135c>
   12860:	ldr	r1, [sp, #12]
   12864:	cmn	r1, #1
   12868:	beq	12804 <__assert_fail@plt+0x12e4>
   1286c:	ldr	r1, [sl, #28]
   12870:	ldr	r2, [sp, #12]
   12874:	cmp	r1, r2
   12878:	beq	12804 <__assert_fail@plt+0x12e4>
   1287c:	cmp	r6, #0
   12880:	mov	r5, #1
   12884:	mov	r0, #3
   12888:	str	r4, [sp, #16]
   1288c:	movwne	r5, #2
   12890:	cmp	r4, #0
   12894:	moveq	r5, r0
   12898:	ldr	r4, [sl, #24]
   1289c:	mov	r0, r4
   128a0:	bl	11238 <getpwuid@plt>
   128a4:	cmp	r0, #0
   128a8:	beq	128b4 <__assert_fail@plt+0x1394>
   128ac:	ldr	r0, [r0]
   128b0:	b	128c4 <__assert_fail@plt+0x13a4>
   128b4:	mov	r0, r4
   128b8:	mov	r1, #0
   128bc:	sub	r2, fp, #136	; 0x88
   128c0:	bl	16c58 <__assert_fail@plt+0x5738>
   128c4:	bl	19d80 <__assert_fail@plt+0x8860>
   128c8:	ldr	r4, [sl, #28]
   128cc:	mov	r7, r0
   128d0:	mov	r0, r4
   128d4:	bl	11508 <getgrgid@plt>
   128d8:	cmp	r0, #0
   128dc:	beq	128f8 <__assert_fail@plt+0x13d8>
   128e0:	ldr	r0, [r0]
   128e4:	bl	19d80 <__assert_fail@plt+0x8860>
   128e8:	mov	sl, r0
   128ec:	cmp	r5, #1
   128f0:	beq	120e4 <__assert_fail@plt+0xbc4>
   128f4:	b	12918 <__assert_fail@plt+0x13f8>
   128f8:	mov	r0, r4
   128fc:	mov	r1, #0
   12900:	sub	r2, fp, #136	; 0x88
   12904:	bl	16c58 <__assert_fail@plt+0x5738>
   12908:	bl	19d80 <__assert_fail@plt+0x8860>
   1290c:	mov	sl, r0
   12910:	cmp	r5, #1
   12914:	beq	120e4 <__assert_fail@plt+0xbc4>
   12918:	ldr	r0, [fp, #16]
   1291c:	ldr	r6, [r0, #20]
   12920:	ldr	r4, [r0, #16]
   12924:	mov	r0, r4
   12928:	mov	r1, r6
   1292c:	bl	12d64 <__assert_fail@plt+0x1844>
   12930:	cmp	r4, #0
   12934:	mov	r8, r0
   12938:	mov	r0, r4
   1293c:	mov	r1, r6
   12940:	movne	r0, r7
   12944:	cmp	r6, #0
   12948:	movne	r1, sl
   1294c:	bl	12d64 <__assert_fail@plt+0x1844>
   12950:	cmp	r5, #4
   12954:	beq	129a8 <__assert_fail@plt+0x1488>
   12958:	cmp	r5, #3
   1295c:	beq	12984 <__assert_fail@plt+0x1464>
   12960:	cmp	r5, #2
   12964:	bne	12d60 <__assert_fail@plt+0x1840>
   12968:	mov	r5, r0
   1296c:	mov	r0, #0
   12970:	cmp	r4, #0
   12974:	beq	129c4 <__assert_fail@plt+0x14a4>
   12978:	movw	r1, #49161	; 0xc009
   1297c:	movt	r1, #1
   12980:	b	12c38 <__assert_fail@plt+0x1718>
   12984:	cmp	r0, #0
   12988:	beq	129d8 <__assert_fail@plt+0x14b8>
   1298c:	mov	r5, r0
   12990:	mov	r0, #0
   12994:	cmp	r4, #0
   12998:	beq	12b48 <__assert_fail@plt+0x1628>
   1299c:	movw	r1, #49265	; 0xc071
   129a0:	movt	r1, #1
   129a4:	b	12c38 <__assert_fail@plt+0x1718>
   129a8:	mov	r5, r0
   129ac:	mov	r0, #0
   129b0:	cmp	r4, #0
   129b4:	beq	12a24 <__assert_fail@plt+0x1504>
   129b8:	movw	r1, #49467	; 0xc13b
   129bc:	movt	r1, #1
   129c0:	b	12c38 <__assert_fail@plt+0x1718>
   129c4:	cmp	r6, #0
   129c8:	beq	12c18 <__assert_fail@plt+0x16f8>
   129cc:	movw	r1, #49200	; 0xc030
   129d0:	movt	r1, #1
   129d4:	b	12c38 <__assert_fail@plt+0x1718>
   129d8:	movw	r0, #49431	; 0xc117
   129dc:	movw	r1, #49357	; 0xc0cd
   129e0:	cmp	r6, #0
   129e4:	mov	r2, #5
   129e8:	movt	r0, #1
   129ec:	movt	r1, #1
   129f0:	movne	r1, r0
   129f4:	movw	r0, #49391	; 0xc0ef
   129f8:	cmp	r4, #0
   129fc:	movt	r0, #1
   12a00:	movne	r1, r0
   12a04:	mov	r0, #0
   12a08:	bl	11298 <dcgettext@plt>
   12a0c:	mov	r6, r0
   12a10:	mov	r0, #0
   12a14:	bl	12f00 <__assert_fail@plt+0x19e0>
   12a18:	mov	r5, r8
   12a1c:	mov	r8, #0
   12a20:	b	12c44 <__assert_fail@plt+0x1724>
   12a24:	cmp	r6, #0
   12a28:	beq	12c24 <__assert_fail@plt+0x1704>
   12a2c:	movw	r1, #49499	; 0xc15b
   12a30:	movt	r1, #1
   12a34:	b	12c38 <__assert_fail@plt+0x1718>
   12a38:	ldr	r0, [sp, #4]
   12a3c:	ldrd	r2, [sl, #96]	; 0x60
   12a40:	ldrd	r0, [r0]
   12a44:	eor	r1, r3, r1
   12a48:	eor	r0, r2, r0
   12a4c:	orrs	r0, r0, r1
   12a50:	bne	12b5c <__assert_fail@plt+0x163c>
   12a54:	ldrd	r0, [sl]
   12a58:	ldr	r2, [fp, #-136]	; 0xffffff78
   12a5c:	ldr	r3, [fp, #-132]	; 0xffffff7c
   12a60:	eor	r1, r1, r3
   12a64:	eor	r0, r0, r2
   12a68:	orrs	r0, r0, r1
   12a6c:	bne	12b5c <__assert_fail@plt+0x163c>
   12a70:	ldr	r0, [fp, #8]
   12a74:	cmn	r0, #1
   12a78:	beq	12a8c <__assert_fail@plt+0x156c>
   12a7c:	ldr	r0, [fp, #-112]	; 0xffffff90
   12a80:	ldr	r1, [fp, #8]
   12a84:	cmp	r0, r1
   12a88:	bne	12aa8 <__assert_fail@plt+0x1588>
   12a8c:	ldr	r0, [fp, #12]
   12a90:	cmn	r0, #1
   12a94:	beq	12c7c <__assert_fail@plt+0x175c>
   12a98:	ldr	r0, [fp, #-108]	; 0xffffff94
   12a9c:	ldr	r1, [fp, #12]
   12aa0:	cmp	r0, r1
   12aa4:	beq	12c7c <__assert_fail@plt+0x175c>
   12aa8:	bl	113d0 <__errno_location@plt>
   12aac:	ldr	r5, [r0]
   12ab0:	mov	r4, r0
   12ab4:	mov	r0, r7
   12ab8:	bl	114e4 <close@plt>
   12abc:	str	r5, [r4]
   12ac0:	mov	r5, #0
   12ac4:	mov	r6, #1
   12ac8:	mov	r4, #1
   12acc:	ldr	r0, [fp, #16]
   12ad0:	ldr	r0, [r0]
   12ad4:	cmp	r0, #2
   12ad8:	beq	1212c <__assert_fail@plt+0xc0c>
   12adc:	b	127f4 <__assert_fail@plt+0x12d4>
   12ae0:	movw	r1, #48657	; 0xbe11
   12ae4:	mov	r0, #0
   12ae8:	mov	r2, #5
   12aec:	movt	r1, #1
   12af0:	bl	11298 <dcgettext@plt>
   12af4:	mov	r4, r0
   12af8:	mov	r0, #4
   12afc:	mov	r1, r7
   12b00:	bl	187e8 <__assert_fail@plt+0x72c8>
   12b04:	mov	r3, r0
   12b08:	mov	r0, #0
   12b0c:	mov	r1, #0
   12b10:	mov	r2, r4
   12b14:	bl	1131c <error@plt>
   12b18:	movw	r1, #48760	; 0xbe78
   12b1c:	ldr	r6, [sp, #32]
   12b20:	mov	r0, #0
   12b24:	mov	r2, #5
   12b28:	movt	r1, #1
   12b2c:	bl	11298 <dcgettext@plt>
   12b30:	mov	r2, r0
   12b34:	mov	r0, #0
   12b38:	mov	r1, #0
   12b3c:	bl	1131c <error@plt>
   12b40:	mov	r4, #0
   12b44:	b	12140 <__assert_fail@plt+0xc20>
   12b48:	cmp	r6, #0
   12b4c:	beq	12c30 <__assert_fail@plt+0x1710>
   12b50:	movw	r1, #49313	; 0xc0a1
   12b54:	movt	r1, #1
   12b58:	b	12c38 <__assert_fail@plt+0x1718>
   12b5c:	bl	113d0 <__errno_location@plt>
   12b60:	ldr	r5, [r0]
   12b64:	mov	r4, r0
   12b68:	mov	r0, r7
   12b6c:	bl	114e4 <close@plt>
   12b70:	str	r5, [r4]
   12b74:	mov	r4, #0
   12b78:	mov	r6, #1
   12b7c:	mov	r5, #1
   12b80:	ldr	r0, [fp, #16]
   12b84:	ldr	r0, [r0]
   12b88:	cmp	r0, #2
   12b8c:	beq	1212c <__assert_fail@plt+0xc0c>
   12b90:	b	127f4 <__assert_fail@plt+0x12d4>
   12b94:	movw	r1, #48657	; 0xbe11
   12b98:	mov	r0, #0
   12b9c:	mov	r2, #5
   12ba0:	movt	r1, #1
   12ba4:	bl	11298 <dcgettext@plt>
   12ba8:	mov	r4, r0
   12bac:	mov	r0, #4
   12bb0:	mov	r1, r7
   12bb4:	bl	187e8 <__assert_fail@plt+0x72c8>
   12bb8:	mov	r3, r0
   12bbc:	mov	r0, #0
   12bc0:	mov	r1, #0
   12bc4:	mov	r2, r4
   12bc8:	bl	1131c <error@plt>
   12bcc:	movw	r1, #48760	; 0xbe78
   12bd0:	mov	r0, #0
   12bd4:	mov	r2, #5
   12bd8:	movt	r1, #1
   12bdc:	bl	11298 <dcgettext@plt>
   12be0:	mov	r2, r0
   12be4:	mov	r0, #0
   12be8:	mov	r1, #0
   12bec:	bl	1131c <error@plt>
   12bf0:	ldr	r4, [sp, #36]	; 0x24
   12bf4:	mov	r1, r9
   12bf8:	mov	r2, #4
   12bfc:	mov	r0, r4
   12c00:	bl	152c8 <__assert_fail@plt+0x3da8>
   12c04:	mov	r0, r4
   12c08:	bl	13a68 <__assert_fail@plt+0x2548>
   12c0c:	mov	r4, #0
   12c10:	mov	r6, r8
   12c14:	b	12140 <__assert_fail@plt+0xc20>
   12c18:	movw	r1, #49235	; 0xc053
   12c1c:	movt	r1, #1
   12c20:	b	12c38 <__assert_fail@plt+0x1718>
   12c24:	movw	r1, #49527	; 0xc177
   12c28:	movt	r1, #1
   12c2c:	b	12c38 <__assert_fail@plt+0x1718>
   12c30:	movw	r1, #49357	; 0xc0cd
   12c34:	movt	r1, #1
   12c38:	mov	r2, #5
   12c3c:	bl	11298 <dcgettext@plt>
   12c40:	mov	r6, r0
   12c44:	ldr	r1, [sp, #28]
   12c48:	mov	r0, #4
   12c4c:	bl	187e8 <__assert_fail@plt+0x72c8>
   12c50:	mov	r2, r0
   12c54:	mov	r0, #1
   12c58:	mov	r1, r6
   12c5c:	mov	r3, r5
   12c60:	str	r8, [sp]
   12c64:	bl	113f4 <__printf_chk@plt>
   12c68:	mov	r0, r5
   12c6c:	bl	12f00 <__assert_fail@plt+0x19e0>
   12c70:	mov	r0, r8
   12c74:	bl	12f00 <__assert_fail@plt+0x19e0>
   12c78:	b	12118 <__assert_fail@plt+0xbf8>
   12c7c:	ldr	r1, [sp, #20]
   12c80:	ldr	r2, [sp, #12]
   12c84:	mov	r0, r7
   12c88:	bl	113c4 <fchown@plt>
   12c8c:	cmp	r0, #0
   12c90:	bne	126f8 <__assert_fail@plt+0x11d8>
   12c94:	mov	r0, r7
   12c98:	bl	114e4 <close@plt>
   12c9c:	cmp	r0, #0
   12ca0:	mov	r4, #1
   12ca4:	bne	12788 <__assert_fail@plt+0x1268>
   12ca8:	mov	r5, #0
   12cac:	mov	r6, #1
   12cb0:	ldr	r0, [fp, #16]
   12cb4:	ldr	r0, [r0]
   12cb8:	cmp	r0, #2
   12cbc:	beq	1212c <__assert_fail@plt+0xc0c>
   12cc0:	b	127f4 <__assert_fail@plt+0x12d4>
   12cc4:	mov	r6, #1
   12cc8:	bl	113d0 <__errno_location@plt>
   12ccc:	ldr	r4, [r0]
   12cd0:	mov	r5, r0
   12cd4:	cmp	r4, #0
   12cd8:	beq	12d18 <__assert_fail@plt+0x17f8>
   12cdc:	ldr	r0, [fp, #16]
   12ce0:	mov	r6, #0
   12ce4:	ldrb	r0, [r0, #13]
   12ce8:	cmp	r0, #0
   12cec:	bne	12d18 <__assert_fail@plt+0x17f8>
   12cf0:	movw	r1, #48624	; 0xbdf0
   12cf4:	mov	r0, #0
   12cf8:	mov	r2, #5
   12cfc:	mov	r6, #0
   12d00:	movt	r1, #1
   12d04:	bl	11298 <dcgettext@plt>
   12d08:	mov	r2, r0
   12d0c:	mov	r0, #0
   12d10:	mov	r1, r4
   12d14:	bl	1131c <error@plt>
   12d18:	ldr	r0, [sp, #36]	; 0x24
   12d1c:	bl	138a0 <__assert_fail@plt+0x2380>
   12d20:	cmp	r0, #0
   12d24:	beq	12d54 <__assert_fail@plt+0x1834>
   12d28:	movw	r1, #48640	; 0xbe00
   12d2c:	ldr	r4, [r5]
   12d30:	mov	r0, #0
   12d34:	mov	r2, #5
   12d38:	mov	r6, #0
   12d3c:	movt	r1, #1
   12d40:	bl	11298 <dcgettext@plt>
   12d44:	mov	r2, r0
   12d48:	mov	r0, #0
   12d4c:	mov	r1, r4
   12d50:	bl	1131c <error@plt>
   12d54:	mov	r0, r6
   12d58:	sub	sp, fp, #28
   12d5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d60:	bl	114d8 <abort@plt>
   12d64:	push	{r4, r5, r6, sl, fp, lr}
   12d68:	add	fp, sp, #16
   12d6c:	mov	r4, r1
   12d70:	cmp	r0, #0
   12d74:	beq	12dc8 <__assert_fail@plt+0x18a8>
   12d78:	mov	r5, r0
   12d7c:	cmp	r4, #0
   12d80:	beq	12ddc <__assert_fail@plt+0x18bc>
   12d84:	mov	r0, r5
   12d88:	bl	113a0 <strlen@plt>
   12d8c:	mov	r6, r0
   12d90:	mov	r0, r4
   12d94:	bl	113a0 <strlen@plt>
   12d98:	add	r0, r6, r0
   12d9c:	add	r0, r0, #2
   12da0:	bl	1987c <__assert_fail@plt+0x835c>
   12da4:	mov	r1, r5
   12da8:	mov	r6, r0
   12dac:	bl	1128c <stpcpy@plt>
   12db0:	mov	r1, #58	; 0x3a
   12db4:	strh	r1, [r0], #1
   12db8:	mov	r1, r4
   12dbc:	bl	1128c <stpcpy@plt>
   12dc0:	mov	r0, r6
   12dc4:	pop	{r4, r5, r6, sl, fp, pc}
   12dc8:	cmp	r4, #0
   12dcc:	beq	12de8 <__assert_fail@plt+0x18c8>
   12dd0:	mov	r0, r4
   12dd4:	pop	{r4, r5, r6, sl, fp, lr}
   12dd8:	b	19d80 <__assert_fail@plt+0x8860>
   12ddc:	mov	r0, r5
   12de0:	pop	{r4, r5, r6, sl, fp, lr}
   12de4:	b	19d80 <__assert_fail@plt+0x8860>
   12de8:	mov	r6, #0
   12dec:	mov	r0, r6
   12df0:	pop	{r4, r5, r6, sl, fp, pc}
   12df4:	movw	r1, #53680	; 0xd1b0
   12df8:	movt	r1, #2
   12dfc:	str	r0, [r1, #4]
   12e00:	bx	lr
   12e04:	movw	r1, #53680	; 0xd1b0
   12e08:	movt	r1, #2
   12e0c:	strb	r0, [r1]
   12e10:	bx	lr
   12e14:	push	{r4, r5, r6, sl, fp, lr}
   12e18:	add	fp, sp, #16
   12e1c:	sub	sp, sp, #8
   12e20:	movw	r0, #53644	; 0xd18c
   12e24:	movt	r0, #2
   12e28:	ldr	r0, [r0]
   12e2c:	bl	1a7d0 <__assert_fail@plt+0x92b0>
   12e30:	cmp	r0, #0
   12e34:	beq	12e5c <__assert_fail@plt+0x193c>
   12e38:	movw	r5, #53680	; 0xd1b0
   12e3c:	movt	r5, #2
   12e40:	ldrb	r0, [r5]
   12e44:	cmp	r0, #0
   12e48:	beq	12e88 <__assert_fail@plt+0x1968>
   12e4c:	bl	113d0 <__errno_location@plt>
   12e50:	ldr	r0, [r0]
   12e54:	cmp	r0, #32
   12e58:	bne	12e88 <__assert_fail@plt+0x1968>
   12e5c:	movw	r0, #53640	; 0xd188
   12e60:	movt	r0, #2
   12e64:	ldr	r0, [r0]
   12e68:	bl	1a7d0 <__assert_fail@plt+0x92b0>
   12e6c:	cmp	r0, #0
   12e70:	subeq	sp, fp, #16
   12e74:	popeq	{r4, r5, r6, sl, fp, pc}
   12e78:	movw	r0, #53556	; 0xd134
   12e7c:	movt	r0, #2
   12e80:	ldr	r0, [r0]
   12e84:	bl	11268 <_exit@plt>
   12e88:	movw	r1, #49568	; 0xc1a0
   12e8c:	mov	r0, #0
   12e90:	mov	r2, #5
   12e94:	movt	r1, #1
   12e98:	bl	11298 <dcgettext@plt>
   12e9c:	ldr	r6, [r5, #4]
   12ea0:	mov	r4, r0
   12ea4:	bl	113d0 <__errno_location@plt>
   12ea8:	ldr	r5, [r0]
   12eac:	cmp	r6, #0
   12eb0:	bne	12ecc <__assert_fail@plt+0x19ac>
   12eb4:	movw	r2, #47784	; 0xbaa8
   12eb8:	mov	r0, #0
   12ebc:	mov	r1, r5
   12ec0:	mov	r3, r4
   12ec4:	movt	r2, #1
   12ec8:	b	12eec <__assert_fail@plt+0x19cc>
   12ecc:	mov	r0, r6
   12ed0:	bl	18988 <__assert_fail@plt+0x7468>
   12ed4:	movw	r2, #47780	; 0xbaa4
   12ed8:	mov	r3, r0
   12edc:	str	r4, [sp]
   12ee0:	mov	r0, #0
   12ee4:	mov	r1, r5
   12ee8:	movt	r2, #1
   12eec:	bl	1131c <error@plt>
   12ef0:	movw	r0, #53556	; 0xd134
   12ef4:	movt	r0, #2
   12ef8:	ldr	r0, [r0]
   12efc:	bl	11268 <_exit@plt>
   12f00:	push	{r4, r5, r6, sl, fp, lr}
   12f04:	add	fp, sp, #16
   12f08:	mov	r4, r0
   12f0c:	bl	113d0 <__errno_location@plt>
   12f10:	ldr	r6, [r0]
   12f14:	mov	r5, r0
   12f18:	mov	r0, r4
   12f1c:	bl	1125c <free@plt>
   12f20:	str	r6, [r5]
   12f24:	pop	{r4, r5, r6, sl, fp, pc}
   12f28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f2c:	add	fp, sp, #28
   12f30:	sub	sp, sp, #28
   12f34:	cmp	r1, #4096	; 0x1000
   12f38:	bcs	12f54 <__assert_fail@plt+0x1a34>
   12f3c:	mov	sl, r0
   12f40:	and	r0, r1, #516	; 0x204
   12f44:	mov	r6, r1
   12f48:	cmp	r0, #516	; 0x204
   12f4c:	tstne	r6, #18
   12f50:	bne	12f70 <__assert_fail@plt+0x1a50>
   12f54:	bl	113d0 <__errno_location@plt>
   12f58:	mov	r1, #22
   12f5c:	mov	r4, #0
   12f60:	str	r1, [r0]
   12f64:	mov	r0, r4
   12f68:	sub	sp, fp, #28
   12f6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f70:	mov	r0, #1
   12f74:	mov	r1, #96	; 0x60
   12f78:	mov	r5, r2
   12f7c:	bl	1a6f8 <__assert_fail@plt+0x91d8>
   12f80:	cmp	r0, #0
   12f84:	beq	13564 <__assert_fail@plt+0x2044>
   12f88:	mov	r4, r0
   12f8c:	mvn	r0, #99	; 0x63
   12f90:	tst	r6, #2
   12f94:	mov	r1, r6
   12f98:	str	r0, [r4, #32]
   12f9c:	bic	r0, r6, #516	; 0x204
   12fa0:	str	r5, [r4, #44]	; 0x2c
   12fa4:	str	r4, [sp, #24]
   12fa8:	orrne	r1, r0, #4
   12fac:	str	r1, [r4, #48]	; 0x30
   12fb0:	ldr	r0, [sl]
   12fb4:	cmp	r0, #0
   12fb8:	beq	1301c <__assert_fail@plt+0x1afc>
   12fbc:	add	r7, sl, #4
   12fc0:	mov	r4, #0
   12fc4:	bl	113a0 <strlen@plt>
   12fc8:	cmp	r0, r4
   12fcc:	movhi	r4, r0
   12fd0:	ldr	r0, [r7], #4
   12fd4:	cmp	r0, #0
   12fd8:	bne	12fc4 <__assert_fail@plt+0x1aa4>
   12fdc:	add	r0, r4, #1
   12fe0:	ldr	r4, [sp, #24]
   12fe4:	cmp	r0, #4096	; 0x1000
   12fe8:	movls	r0, #4096	; 0x1000
   12fec:	ldr	r1, [r4, #36]	; 0x24
   12ff0:	add	r0, r0, #256	; 0x100
   12ff4:	adds	r1, r0, r1
   12ff8:	bcc	13030 <__assert_fail@plt+0x1b10>
   12ffc:	ldr	r0, [r4, #24]
   13000:	bl	12f00 <__assert_fail@plt+0x19e0>
   13004:	mov	r0, #0
   13008:	str	r0, [r4, #24]
   1300c:	bl	113d0 <__errno_location@plt>
   13010:	mov	r1, #36	; 0x24
   13014:	str	r1, [r0]
   13018:	b	1355c <__assert_fail@plt+0x203c>
   1301c:	mov	r0, #4096	; 0x1000
   13020:	ldr	r1, [r4, #36]	; 0x24
   13024:	add	r0, r0, #256	; 0x100
   13028:	adds	r1, r0, r1
   1302c:	bcs	12ffc <__assert_fail@plt+0x1adc>
   13030:	str	r1, [r4, #36]	; 0x24
   13034:	ldr	r0, [r4, #24]
   13038:	bl	1a77c <__assert_fail@plt+0x925c>
   1303c:	cmp	r0, #0
   13040:	beq	1323c <__assert_fail@plt+0x1d1c>
   13044:	str	r0, [r4, #24]
   13048:	ldr	r0, [sl]
   1304c:	cmp	r0, #0
   13050:	beq	13250 <__assert_fail@plt+0x1d30>
   13054:	mov	r0, #176	; 0xb0
   13058:	bl	1a74c <__assert_fail@plt+0x922c>
   1305c:	cmp	r0, #0
   13060:	beq	13554 <__assert_fail@plt+0x2034>
   13064:	ldr	r1, [r4, #24]
   13068:	mov	r7, r0
   1306c:	mov	r0, #0
   13070:	mov	r2, #196608	; 0x30000
   13074:	strb	r0, [r7, #168]	; 0xa8
   13078:	str	r2, [r7, #58]	; 0x3a
   1307c:	mvn	r2, #0
   13080:	str	r4, [r7, #44]	; 0x2c
   13084:	str	r2, [r7, #48]	; 0x30
   13088:	str	r0, [r7, #52]	; 0x34
   1308c:	str	r0, [r7, #12]
   13090:	str	r0, [r7, #16]
   13094:	str	r0, [r7, #20]
   13098:	str	r1, [r7, #28]
   1309c:	str	r0, [r7, #32]
   130a0:	cmp	r5, #0
   130a4:	beq	1325c <__assert_fail@plt+0x1d3c>
   130a8:	ldrb	r0, [r4, #49]	; 0x31
   130ac:	ubfx	r0, r0, #2, #1
   130b0:	ldr	r4, [sl]
   130b4:	str	r0, [sp, #12]
   130b8:	cmp	r4, #0
   130bc:	beq	13270 <__assert_fail@plt+0x1d50>
   130c0:	tst	r6, #2048	; 0x800
   130c4:	str	r5, [sp, #16]
   130c8:	str	r7, [sp, #20]
   130cc:	bne	13294 <__assert_fail@plt+0x1d74>
   130d0:	mov	r0, #0
   130d4:	mov	r8, #0
   130d8:	mov	r5, #0
   130dc:	str	r0, [sp, #8]
   130e0:	b	13134 <__assert_fail@plt+0x1c14>
   130e4:	cmp	r8, #0
   130e8:	str	r4, [r7, #8]
   130ec:	beq	13110 <__assert_fail@plt+0x1bf0>
   130f0:	ldr	r0, [sp, #8]
   130f4:	str	r7, [sp, #8]
   130f8:	str	r7, [r0, #8]
   130fc:	ldr	r4, [sl, #4]!
   13100:	add	r5, r5, #1
   13104:	cmp	r4, #0
   13108:	bne	13134 <__assert_fail@plt+0x1c14>
   1310c:	b	133e8 <__assert_fail@plt+0x1ec8>
   13110:	mov	r0, r7
   13114:	str	r7, [sp, #8]
   13118:	b	13120 <__assert_fail@plt+0x1c00>
   1311c:	str	r8, [r7, #8]
   13120:	mov	r8, r7
   13124:	ldr	r4, [sl, #4]!
   13128:	add	r5, r5, #1
   1312c:	cmp	r4, #0
   13130:	beq	133e8 <__assert_fail@plt+0x1ec8>
   13134:	mov	r0, r4
   13138:	bl	113a0 <strlen@plt>
   1313c:	mov	r9, r0
   13140:	cmp	r0, #3
   13144:	bcc	13174 <__assert_fail@plt+0x1c54>
   13148:	add	r0, r9, r4
   1314c:	ldrb	r0, [r0, #-1]
   13150:	cmp	r0, #47	; 0x2f
   13154:	bne	13174 <__assert_fail@plt+0x1c54>
   13158:	sub	r0, r4, #2
   1315c:	ldrb	r1, [r0, r9]
   13160:	cmp	r1, #47	; 0x2f
   13164:	bne	13174 <__assert_fail@plt+0x1c54>
   13168:	sub	r9, r9, #1
   1316c:	cmp	r9, #1
   13170:	bhi	1315c <__assert_fail@plt+0x1c3c>
   13174:	add	r0, r9, #176	; 0xb0
   13178:	bic	r0, r0, #7
   1317c:	bl	1a74c <__assert_fail@plt+0x922c>
   13180:	cmp	r0, #0
   13184:	beq	133d8 <__assert_fail@plt+0x1eb8>
   13188:	add	r6, r0, #168	; 0xa8
   1318c:	mov	r7, r0
   13190:	mov	r1, r4
   13194:	mov	r2, r9
   13198:	mov	r0, r6
   1319c:	bl	11274 <memcpy@plt>
   131a0:	ldr	r0, [sp, #24]
   131a4:	ldr	r1, [sp, #20]
   131a8:	mov	r4, #0
   131ac:	cmp	r8, #0
   131b0:	strb	r4, [r6, r9]
   131b4:	ldr	r2, [r0, #24]
   131b8:	str	r1, [r7, #4]
   131bc:	add	r1, r7, #44	; 0x2c
   131c0:	stm	r1, {r0, r4, r9}
   131c4:	mov	r1, #196608	; 0x30000
   131c8:	str	r1, [r7, #58]	; 0x3a
   131cc:	str	r4, [r7, #12]
   131d0:	str	r4, [r7, #16]
   131d4:	str	r4, [r7, #20]
   131d8:	str	r6, [r7, #24]
   131dc:	mov	r1, r8
   131e0:	movwne	r1, #1
   131e4:	str	r2, [r7, #28]
   131e8:	ldr	r2, [sp, #12]
   131ec:	str	r4, [r7, #32]
   131f0:	tst	r2, r1
   131f4:	beq	1321c <__assert_fail@plt+0x1cfc>
   131f8:	mov	r0, #2
   131fc:	str	r0, [r7, #112]	; 0x70
   13200:	mov	r0, #11
   13204:	str	r4, [r7, #116]	; 0x74
   13208:	strh	r0, [r7, #56]	; 0x38
   1320c:	ldr	r0, [sp, #16]
   13210:	cmp	r0, #0
   13214:	bne	1311c <__assert_fail@plt+0x1bfc>
   13218:	b	130e4 <__assert_fail@plt+0x1bc4>
   1321c:	mov	r1, r7
   13220:	mov	r2, #0
   13224:	bl	135d8 <__assert_fail@plt+0x20b8>
   13228:	strh	r0, [r7, #56]	; 0x38
   1322c:	ldr	r0, [sp, #16]
   13230:	cmp	r0, #0
   13234:	bne	1311c <__assert_fail@plt+0x1bfc>
   13238:	b	130e4 <__assert_fail@plt+0x1bc4>
   1323c:	ldr	r0, [r4, #24]
   13240:	bl	12f00 <__assert_fail@plt+0x19e0>
   13244:	mov	r0, #0
   13248:	str	r0, [r4, #24]
   1324c:	b	1355c <__assert_fail@plt+0x203c>
   13250:	mov	r7, #0
   13254:	cmp	r5, #0
   13258:	bne	130a8 <__assert_fail@plt+0x1b88>
   1325c:	mov	r0, #1
   13260:	ldr	r4, [sl]
   13264:	str	r0, [sp, #12]
   13268:	cmp	r4, #0
   1326c:	bne	130c0 <__assert_fail@plt+0x1ba0>
   13270:	ldr	r4, [sp, #24]
   13274:	mov	r8, #0
   13278:	mov	r0, #176	; 0xb0
   1327c:	bl	1a74c <__assert_fail@plt+0x922c>
   13280:	cmp	r0, #0
   13284:	bne	13440 <__assert_fail@plt+0x1f20>
   13288:	mov	r0, #0
   1328c:	str	r0, [r4]
   13290:	b	13510 <__assert_fail@plt+0x1ff0>
   13294:	add	r0, sl, #4
   13298:	mov	r9, #0
   1329c:	mov	r8, #0
   132a0:	mov	r5, #0
   132a4:	str	r0, [sp, #8]
   132a8:	ldr	r0, [sp, #12]
   132ac:	eor	r0, r0, #1
   132b0:	str	r0, [sp, #12]
   132b4:	mov	r0, #0
   132b8:	str	r0, [sp, #4]
   132bc:	b	132f0 <__assert_fail@plt+0x1dd0>
   132c0:	cmp	r8, #0
   132c4:	str	r9, [r5, #8]
   132c8:	beq	133cc <__assert_fail@plt+0x1eac>
   132cc:	ldr	r0, [sp, #4]
   132d0:	str	r5, [sp, #4]
   132d4:	str	r5, [r0, #8]
   132d8:	ldr	r0, [sp, #8]
   132dc:	mov	r5, sl
   132e0:	add	r5, sl, #1
   132e4:	ldr	r4, [r0, sl, lsl #2]
   132e8:	cmp	r4, #0
   132ec:	beq	133e8 <__assert_fail@plt+0x1ec8>
   132f0:	mov	r0, r4
   132f4:	mov	sl, r5
   132f8:	bl	113a0 <strlen@plt>
   132fc:	mov	r7, r0
   13300:	add	r0, r0, #176	; 0xb0
   13304:	bic	r0, r0, #7
   13308:	bl	1a74c <__assert_fail@plt+0x922c>
   1330c:	cmp	r0, #0
   13310:	beq	133d8 <__assert_fail@plt+0x1eb8>
   13314:	add	r6, r0, #168	; 0xa8
   13318:	mov	r5, r0
   1331c:	mov	r1, r4
   13320:	mov	r2, r7
   13324:	mov	r0, r6
   13328:	bl	11274 <memcpy@plt>
   1332c:	ldr	r0, [sp, #24]
   13330:	ldr	r1, [sp, #20]
   13334:	strb	r9, [r6, r7]
   13338:	ldr	r2, [r0, #24]
   1333c:	str	r1, [r5, #4]
   13340:	mov	r1, #196608	; 0x30000
   13344:	str	r0, [r5, #44]	; 0x2c
   13348:	str	r9, [r5, #48]	; 0x30
   1334c:	str	r7, [r5, #52]	; 0x34
   13350:	str	r1, [r5, #58]	; 0x3a
   13354:	str	r9, [r5, #12]
   13358:	str	r9, [r5, #16]
   1335c:	str	r9, [r5, #20]
   13360:	str	r6, [r5, #24]
   13364:	clz	r1, r8
   13368:	lsr	r1, r1, #5
   1336c:	str	r2, [r5, #28]
   13370:	ldr	r2, [sp, #12]
   13374:	str	r9, [r5, #32]
   13378:	orrs	r1, r2, r1
   1337c:	bne	133a4 <__assert_fail@plt+0x1e84>
   13380:	mov	r0, #2
   13384:	str	r0, [r5, #112]	; 0x70
   13388:	str	r9, [r5, #116]	; 0x74
   1338c:	mov	r0, #11
   13390:	strh	r0, [r5, #56]	; 0x38
   13394:	ldr	r0, [sp, #16]
   13398:	cmp	r0, #0
   1339c:	bne	133c0 <__assert_fail@plt+0x1ea0>
   133a0:	b	132c0 <__assert_fail@plt+0x1da0>
   133a4:	mov	r1, r5
   133a8:	mov	r2, #0
   133ac:	bl	135d8 <__assert_fail@plt+0x20b8>
   133b0:	strh	r0, [r5, #56]	; 0x38
   133b4:	ldr	r0, [sp, #16]
   133b8:	cmp	r0, #0
   133bc:	beq	132c0 <__assert_fail@plt+0x1da0>
   133c0:	str	r8, [r5, #8]
   133c4:	mov	r8, r5
   133c8:	b	132d8 <__assert_fail@plt+0x1db8>
   133cc:	mov	r0, r5
   133d0:	str	r5, [sp, #4]
   133d4:	b	133c4 <__assert_fail@plt+0x1ea4>
   133d8:	ldr	r7, [sp, #20]
   133dc:	cmp	r8, #0
   133e0:	bne	13530 <__assert_fail@plt+0x2010>
   133e4:	b	13548 <__assert_fail@plt+0x2028>
   133e8:	ldr	r0, [sp, #16]
   133ec:	ldr	r7, [sp, #20]
   133f0:	cmp	r0, #0
   133f4:	beq	1342c <__assert_fail@plt+0x1f0c>
   133f8:	ldr	r4, [sp, #24]
   133fc:	cmp	r5, #2
   13400:	bcc	13430 <__assert_fail@plt+0x1f10>
   13404:	mov	r0, r4
   13408:	mov	r1, r8
   1340c:	mov	r2, r5
   13410:	bl	13770 <__assert_fail@plt+0x2250>
   13414:	mov	r8, r0
   13418:	mov	r0, #176	; 0xb0
   1341c:	bl	1a74c <__assert_fail@plt+0x922c>
   13420:	cmp	r0, #0
   13424:	bne	13440 <__assert_fail@plt+0x1f20>
   13428:	b	13288 <__assert_fail@plt+0x1d68>
   1342c:	ldr	r4, [sp, #24]
   13430:	mov	r0, #176	; 0xb0
   13434:	bl	1a74c <__assert_fail@plt+0x922c>
   13438:	cmp	r0, #0
   1343c:	beq	13288 <__assert_fail@plt+0x1d68>
   13440:	ldr	r2, [r4, #24]
   13444:	mov	r1, #0
   13448:	mov	r3, #196608	; 0x30000
   1344c:	str	r0, [r4]
   13450:	str	r1, [r0, #52]	; 0x34
   13454:	strb	r1, [r0, #168]	; 0xa8
   13458:	str	r4, [r0, #44]	; 0x2c
   1345c:	str	r3, [r0, #58]	; 0x3a
   13460:	str	r2, [r0, #28]
   13464:	mov	r2, #9
   13468:	str	r1, [r0, #32]
   1346c:	strh	r2, [r0, #56]	; 0x38
   13470:	str	r8, [r0, #8]
   13474:	str	r1, [r0, #12]
   13478:	str	r1, [r0, #16]
   1347c:	str	r1, [r0, #20]
   13480:	mov	r1, #1
   13484:	str	r1, [r0, #48]	; 0x30
   13488:	ldrh	r0, [r4, #48]	; 0x30
   1348c:	movw	r1, #258	; 0x102
   13490:	tst	r0, r1
   13494:	beq	134d0 <__assert_fail@plt+0x1fb0>
   13498:	movw	r0, #12032	; 0x2f00
   1349c:	movw	r2, #21792	; 0x5520
   134a0:	movw	r3, #21824	; 0x5540
   134a4:	mov	r1, #0
   134a8:	movt	r0, #1
   134ac:	movt	r2, #1
   134b0:	movt	r3, #1
   134b4:	str	r0, [sp]
   134b8:	mov	r0, #31
   134bc:	bl	15c34 <__assert_fail@plt+0x4714>
   134c0:	cmp	r0, #0
   134c4:	str	r0, [r4, #56]	; 0x38
   134c8:	bne	134e8 <__assert_fail@plt+0x1fc8>
   134cc:	b	13510 <__assert_fail@plt+0x1ff0>
   134d0:	mov	r0, #32
   134d4:	bl	1a74c <__assert_fail@plt+0x922c>
   134d8:	cmp	r0, #0
   134dc:	str	r0, [r4, #56]	; 0x38
   134e0:	beq	13510 <__assert_fail@plt+0x1ff0>
   134e4:	bl	1a854 <__assert_fail@plt+0x9334>
   134e8:	ldr	r4, [sp, #24]
   134ec:	ldr	r0, [r4, #48]	; 0x30
   134f0:	tst	r0, #516	; 0x204
   134f4:	beq	13574 <__assert_fail@plt+0x2054>
   134f8:	add	r0, r4, #60	; 0x3c
   134fc:	mvn	r1, #0
   13500:	bl	16b90 <__assert_fail@plt+0x5670>
   13504:	mov	r0, r4
   13508:	sub	sp, fp, #28
   1350c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13510:	cmp	r8, #0
   13514:	bne	13530 <__assert_fail@plt+0x2010>
   13518:	b	13548 <__assert_fail@plt+0x2028>
   1351c:	mov	r0, r8
   13520:	bl	12f00 <__assert_fail@plt+0x19e0>
   13524:	cmp	r4, #0
   13528:	mov	r8, r4
   1352c:	beq	13548 <__assert_fail@plt+0x2028>
   13530:	ldrd	r4, [r8, #8]
   13534:	cmp	r5, #0
   13538:	beq	1351c <__assert_fail@plt+0x1ffc>
   1353c:	mov	r0, r5
   13540:	bl	114fc <closedir@plt>
   13544:	b	1351c <__assert_fail@plt+0x1ffc>
   13548:	mov	r0, r7
   1354c:	bl	12f00 <__assert_fail@plt+0x19e0>
   13550:	ldr	r4, [sp, #24]
   13554:	ldr	r0, [r4, #24]
   13558:	bl	12f00 <__assert_fail@plt+0x19e0>
   1355c:	mov	r0, r4
   13560:	bl	12f00 <__assert_fail@plt+0x19e0>
   13564:	mov	r4, #0
   13568:	mov	r0, r4
   1356c:	sub	sp, fp, #28
   13570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13574:	mov	r1, #32768	; 0x8000
   13578:	tst	r0, #512	; 0x200
   1357c:	and	r1, r1, r0, lsl #11
   13580:	orr	r1, r1, #18688	; 0x4900
   13584:	orr	r2, r1, #524288	; 0x80000
   13588:	bne	135ac <__assert_fail@plt+0x208c>
   1358c:	movw	r0, #49581	; 0xc1ad
   13590:	mov	r1, r2
   13594:	movt	r0, #1
   13598:	bl	1abc0 <__assert_fail@plt+0x96a0>
   1359c:	cmn	r0, #1
   135a0:	str	r0, [r4, #28]
   135a4:	bgt	134f8 <__assert_fail@plt+0x1fd8>
   135a8:	b	135c8 <__assert_fail@plt+0x20a8>
   135ac:	ldr	r0, [r4, #32]
   135b0:	movw	r1, #49581	; 0xc1ad
   135b4:	movt	r1, #1
   135b8:	bl	16cb4 <__assert_fail@plt+0x5794>
   135bc:	cmn	r0, #1
   135c0:	str	r0, [r4, #28]
   135c4:	bgt	134f8 <__assert_fail@plt+0x1fd8>
   135c8:	ldr	r0, [r4, #48]	; 0x30
   135cc:	orr	r0, r0, #4
   135d0:	str	r0, [r4, #48]	; 0x30
   135d4:	b	134f8 <__assert_fail@plt+0x1fd8>
   135d8:	push	{r4, r5, r6, sl, fp, lr}
   135dc:	add	fp, sp, #16
   135e0:	sub	sp, sp, #8
   135e4:	mov	r4, r1
   135e8:	ldr	r1, [r0, #48]	; 0x30
   135ec:	ldr	r3, [r4, #48]	; 0x30
   135f0:	add	r5, r4, #64	; 0x40
   135f4:	cmp	r3, #0
   135f8:	andeq	r3, r1, #1
   135fc:	orreq	r2, r3, r2
   13600:	cmp	r2, #0
   13604:	andseq	r1, r1, #2
   13608:	beq	13664 <__assert_fail@plt+0x2144>
   1360c:	ldr	r1, [r4, #24]
   13610:	mov	r0, #3
   13614:	mov	r2, r5
   13618:	bl	114c0 <__xstat64@plt>
   1361c:	cmp	r0, #0
   13620:	beq	136e4 <__assert_fail@plt+0x21c4>
   13624:	bl	113d0 <__errno_location@plt>
   13628:	mov	r6, r0
   1362c:	ldr	r0, [r0]
   13630:	cmp	r0, #2
   13634:	bne	13694 <__assert_fail@plt+0x2174>
   13638:	ldr	r1, [r4, #24]
   1363c:	mov	r0, #3
   13640:	mov	r2, r5
   13644:	bl	114f0 <__lxstat64@plt>
   13648:	cmp	r0, #0
   1364c:	bne	13690 <__assert_fail@plt+0x2170>
   13650:	mov	r0, #0
   13654:	str	r0, [r6]
   13658:	mov	r0, #13
   1365c:	sub	sp, fp, #16
   13660:	pop	{r4, r5, r6, sl, fp, pc}
   13664:	ldr	r1, [r0, #32]
   13668:	ldr	r2, [r4, #24]
   1366c:	mov	r0, #256	; 0x100
   13670:	mov	r3, r5
   13674:	str	r0, [sp]
   13678:	mov	r0, #3
   1367c:	bl	112bc <__fxstatat64@plt>
   13680:	cmp	r0, #0
   13684:	beq	136e4 <__assert_fail@plt+0x21c4>
   13688:	bl	113d0 <__errno_location@plt>
   1368c:	mov	r6, r0
   13690:	ldr	r0, [r6]
   13694:	vmov.i32	q8, #0	; 0x00000000
   13698:	add	r1, r5, #80	; 0x50
   1369c:	str	r0, [r4, #32]
   136a0:	mov	r0, #0
   136a4:	str	r0, [r5, #96]	; 0x60
   136a8:	vst1.64	{d16-d17}, [r1]
   136ac:	add	r1, r5, #64	; 0x40
   136b0:	vst1.64	{d16-d17}, [r1]
   136b4:	add	r1, r5, #48	; 0x30
   136b8:	vst1.64	{d16-d17}, [r1]
   136bc:	add	r1, r5, #32
   136c0:	vst1.64	{d16-d17}, [r1]
   136c4:	add	r1, r5, #16
   136c8:	vst1.64	{d16-d17}, [r1]
   136cc:	mov	r1, #100	; 0x64
   136d0:	vst1.64	{d16-d17}, [r5], r1
   136d4:	str	r0, [r5]
   136d8:	mov	r0, #10
   136dc:	sub	sp, fp, #16
   136e0:	pop	{r4, r5, r6, sl, fp, pc}
   136e4:	ldr	r0, [r4, #80]	; 0x50
   136e8:	and	r0, r0, #61440	; 0xf000
   136ec:	cmp	r0, #40960	; 0xa000
   136f0:	beq	13758 <__assert_fail@plt+0x2238>
   136f4:	cmp	r0, #32768	; 0x8000
   136f8:	beq	1374c <__assert_fail@plt+0x222c>
   136fc:	cmp	r0, #16384	; 0x4000
   13700:	bne	13764 <__assert_fail@plt+0x2244>
   13704:	ldrb	r1, [r4, #168]	; 0xa8
   13708:	mov	r0, #1
   1370c:	cmp	r1, #46	; 0x2e
   13710:	bne	13768 <__assert_fail@plt+0x2248>
   13714:	ldrb	r1, [r4, #169]	; 0xa9
   13718:	cmp	r1, #0
   1371c:	beq	13734 <__assert_fail@plt+0x2214>
   13720:	cmp	r1, #46	; 0x2e
   13724:	bne	13768 <__assert_fail@plt+0x2248>
   13728:	ldrb	r1, [r4, #170]	; 0xaa
   1372c:	cmp	r1, #0
   13730:	bne	13768 <__assert_fail@plt+0x2248>
   13734:	ldr	r1, [r4, #48]	; 0x30
   13738:	mov	r0, #5
   1373c:	cmp	r1, #0
   13740:	movweq	r0, #1
   13744:	sub	sp, fp, #16
   13748:	pop	{r4, r5, r6, sl, fp, pc}
   1374c:	mov	r0, #8
   13750:	sub	sp, fp, #16
   13754:	pop	{r4, r5, r6, sl, fp, pc}
   13758:	mov	r0, #12
   1375c:	sub	sp, fp, #16
   13760:	pop	{r4, r5, r6, sl, fp, pc}
   13764:	mov	r0, #3
   13768:	sub	sp, fp, #16
   1376c:	pop	{r4, r5, r6, sl, fp, pc}
   13770:	push	{r4, r5, r6, r7, fp, lr}
   13774:	add	fp, sp, #16
   13778:	mov	r6, r0
   1377c:	ldr	r7, [r0, #44]	; 0x2c
   13780:	ldr	r0, [r0, #40]	; 0x28
   13784:	mov	r5, r2
   13788:	mov	r4, r1
   1378c:	cmp	r0, r2
   13790:	bcs	137c8 <__assert_fail@plt+0x22a8>
   13794:	add	r1, r5, #40	; 0x28
   13798:	cmn	r1, #-1073741823	; 0xc0000001
   1379c:	str	r1, [r6, #40]	; 0x28
   137a0:	bhi	1386c <__assert_fail@plt+0x234c>
   137a4:	ldr	r0, [r6, #8]
   137a8:	lsl	r1, r1, #2
   137ac:	bl	1a77c <__assert_fail@plt+0x925c>
   137b0:	cmp	r0, #0
   137b4:	beq	1386c <__assert_fail@plt+0x234c>
   137b8:	str	r0, [r6, #8]
   137bc:	cmp	r4, #0
   137c0:	bne	137d4 <__assert_fail@plt+0x22b4>
   137c4:	b	137e8 <__assert_fail@plt+0x22c8>
   137c8:	ldr	r0, [r6, #8]
   137cc:	cmp	r4, #0
   137d0:	beq	137e8 <__assert_fail@plt+0x22c8>
   137d4:	str	r4, [r0], #4
   137d8:	ldr	r4, [r4, #8]
   137dc:	cmp	r4, #0
   137e0:	bne	137d4 <__assert_fail@plt+0x22b4>
   137e4:	ldr	r0, [r6, #8]
   137e8:	mov	r1, r5
   137ec:	mov	r2, #4
   137f0:	mov	r3, r7
   137f4:	bl	1149c <qsort@plt>
   137f8:	ldr	r0, [r6, #8]
   137fc:	cmp	r5, #1
   13800:	ldr	r4, [r0]
   13804:	mov	r1, r4
   13808:	beq	13890 <__assert_fail@plt+0x2370>
   1380c:	mov	r2, r0
   13810:	ldr	r1, [r2, #4]!
   13814:	str	r1, [r4, #8]
   13818:	subs	r1, r5, #2
   1381c:	beq	13888 <__assert_fail@plt+0x2368>
   13820:	tst	r1, #1
   13824:	beq	1383c <__assert_fail@plt+0x231c>
   13828:	ldr	r1, [r0, #8]!
   1382c:	ldr	r2, [r0, #-4]
   13830:	str	r1, [r2, #8]
   13834:	sub	r1, r5, #3
   13838:	mov	r2, r0
   1383c:	cmp	r5, #3
   13840:	beq	1388c <__assert_fail@plt+0x236c>
   13844:	mov	r0, r2
   13848:	ldm	r2, {r3, r7}
   1384c:	subs	r1, r1, #2
   13850:	str	r7, [r3, #8]
   13854:	ldr	r3, [r0, #8]!
   13858:	ldr	r2, [r2, #4]
   1385c:	str	r3, [r2, #8]
   13860:	mov	r2, r0
   13864:	bne	13848 <__assert_fail@plt+0x2328>
   13868:	b	1388c <__assert_fail@plt+0x236c>
   1386c:	ldr	r0, [r6, #8]
   13870:	bl	12f00 <__assert_fail@plt+0x19e0>
   13874:	mov	r0, #0
   13878:	str	r0, [r6, #40]	; 0x28
   1387c:	str	r0, [r6, #8]
   13880:	mov	r0, r4
   13884:	pop	{r4, r5, r6, r7, fp, pc}
   13888:	mov	r0, r2
   1388c:	ldr	r1, [r0]
   13890:	mov	r0, #0
   13894:	str	r0, [r1, #8]
   13898:	mov	r0, r4
   1389c:	pop	{r4, r5, r6, r7, fp, pc}
   138a0:	push	{r4, r5, r6, r7, fp, lr}
   138a4:	add	fp, sp, #16
   138a8:	mov	r4, r0
   138ac:	ldr	r0, [r0]
   138b0:	cmp	r0, #0
   138b4:	beq	138f4 <__assert_fail@plt+0x23d4>
   138b8:	ldr	r1, [r0, #48]	; 0x30
   138bc:	cmp	r1, #0
   138c0:	bmi	138e8 <__assert_fail@plt+0x23c8>
   138c4:	ldr	r5, [r0, #8]
   138c8:	cmp	r5, #0
   138cc:	ldreq	r5, [r0, #4]
   138d0:	bl	12f00 <__assert_fail@plt+0x19e0>
   138d4:	ldr	r0, [r5, #48]	; 0x30
   138d8:	cmn	r0, #1
   138dc:	mov	r0, r5
   138e0:	bgt	138c4 <__assert_fail@plt+0x23a4>
   138e4:	b	138ec <__assert_fail@plt+0x23cc>
   138e8:	mov	r5, r0
   138ec:	mov	r0, r5
   138f0:	bl	12f00 <__assert_fail@plt+0x19e0>
   138f4:	ldr	r5, [r4, #4]
   138f8:	cmp	r5, #0
   138fc:	bne	13918 <__assert_fail@plt+0x23f8>
   13900:	b	13930 <__assert_fail@plt+0x2410>
   13904:	mov	r0, r5
   13908:	bl	12f00 <__assert_fail@plt+0x19e0>
   1390c:	cmp	r6, #0
   13910:	mov	r5, r6
   13914:	beq	13930 <__assert_fail@plt+0x2410>
   13918:	ldrd	r6, [r5, #8]
   1391c:	cmp	r7, #0
   13920:	beq	13904 <__assert_fail@plt+0x23e4>
   13924:	mov	r0, r7
   13928:	bl	114fc <closedir@plt>
   1392c:	b	13904 <__assert_fail@plt+0x23e4>
   13930:	ldr	r0, [r4, #8]
   13934:	bl	12f00 <__assert_fail@plt+0x19e0>
   13938:	ldr	r0, [r4, #24]
   1393c:	bl	12f00 <__assert_fail@plt+0x19e0>
   13940:	ldr	r0, [r4, #48]	; 0x30
   13944:	tst	r0, #512	; 0x200
   13948:	bne	13984 <__assert_fail@plt+0x2464>
   1394c:	mov	r6, #0
   13950:	tst	r0, #4
   13954:	bne	139a8 <__assert_fail@plt+0x2488>
   13958:	ldr	r0, [r4, #28]
   1395c:	bl	11490 <fchdir@plt>
   13960:	cmp	r0, #0
   13964:	beq	13a50 <__assert_fail@plt+0x2530>
   13968:	bl	113d0 <__errno_location@plt>
   1396c:	ldr	r6, [r0]
   13970:	ldr	r0, [r4, #28]
   13974:	bl	114e4 <close@plt>
   13978:	cmp	r6, #0
   1397c:	beq	13998 <__assert_fail@plt+0x2478>
   13980:	b	139a8 <__assert_fail@plt+0x2488>
   13984:	ldr	r0, [r4, #32]
   13988:	mov	r6, #0
   1398c:	cmp	r0, #0
   13990:	bmi	139a8 <__assert_fail@plt+0x2488>
   13994:	bl	114e4 <close@plt>
   13998:	cmp	r0, #0
   1399c:	beq	139a8 <__assert_fail@plt+0x2488>
   139a0:	bl	113d0 <__errno_location@plt>
   139a4:	ldr	r6, [r0]
   139a8:	add	r5, r4, #60	; 0x3c
   139ac:	mov	r0, r5
   139b0:	bl	16bb4 <__assert_fail@plt+0x5694>
   139b4:	cmp	r0, #0
   139b8:	bne	139e0 <__assert_fail@plt+0x24c0>
   139bc:	mov	r0, r5
   139c0:	bl	16c08 <__assert_fail@plt+0x56e8>
   139c4:	cmp	r0, #0
   139c8:	bmi	139ac <__assert_fail@plt+0x248c>
   139cc:	bl	114e4 <close@plt>
   139d0:	mov	r0, r5
   139d4:	bl	16bb4 <__assert_fail@plt+0x5694>
   139d8:	cmp	r0, #0
   139dc:	beq	139bc <__assert_fail@plt+0x249c>
   139e0:	ldr	r0, [r4, #52]	; 0x34
   139e4:	cmp	r0, #0
   139e8:	beq	139f0 <__assert_fail@plt+0x24d0>
   139ec:	bl	15f50 <__assert_fail@plt+0x4a30>
   139f0:	ldrh	r0, [r4, #48]	; 0x30
   139f4:	movw	r1, #258	; 0x102
   139f8:	tst	r0, r1
   139fc:	beq	13a30 <__assert_fail@plt+0x2510>
   13a00:	ldr	r0, [r4, #56]	; 0x38
   13a04:	cmp	r0, #0
   13a08:	beq	13a10 <__assert_fail@plt+0x24f0>
   13a0c:	bl	15f50 <__assert_fail@plt+0x4a30>
   13a10:	mov	r0, r4
   13a14:	bl	12f00 <__assert_fail@plt+0x19e0>
   13a18:	cmp	r6, #0
   13a1c:	beq	13a48 <__assert_fail@plt+0x2528>
   13a20:	bl	113d0 <__errno_location@plt>
   13a24:	str	r6, [r0]
   13a28:	mvn	r0, #0
   13a2c:	pop	{r4, r5, r6, r7, fp, pc}
   13a30:	ldr	r0, [r4, #56]	; 0x38
   13a34:	bl	12f00 <__assert_fail@plt+0x19e0>
   13a38:	mov	r0, r4
   13a3c:	bl	12f00 <__assert_fail@plt+0x19e0>
   13a40:	cmp	r6, #0
   13a44:	bne	13a20 <__assert_fail@plt+0x2500>
   13a48:	mov	r0, #0
   13a4c:	pop	{r4, r5, r6, r7, fp, pc}
   13a50:	mov	r6, #0
   13a54:	ldr	r0, [r4, #28]
   13a58:	bl	114e4 <close@plt>
   13a5c:	cmp	r6, #0
   13a60:	beq	13998 <__assert_fail@plt+0x2478>
   13a64:	b	139a8 <__assert_fail@plt+0x2488>
   13a68:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13a6c:	add	fp, sp, #24
   13a70:	sub	sp, sp, #8
   13a74:	ldr	r6, [r0]
   13a78:	mov	r5, #0
   13a7c:	cmp	r6, #0
   13a80:	beq	14228 <__assert_fail@plt+0x2d08>
   13a84:	mov	r4, r0
   13a88:	ldr	r0, [r0, #48]	; 0x30
   13a8c:	tst	r0, #8192	; 0x2000
   13a90:	bne	14228 <__assert_fail@plt+0x2d08>
   13a94:	ldrh	r1, [r6, #60]	; 0x3c
   13a98:	mov	r2, #3
   13a9c:	strh	r2, [r6, #60]	; 0x3c
   13aa0:	cmp	r1, #1
   13aa4:	beq	13b44 <__assert_fail@plt+0x2624>
   13aa8:	cmp	r1, #2
   13aac:	bne	13b68 <__assert_fail@plt+0x2648>
   13ab0:	ldrh	r2, [r6, #56]	; 0x38
   13ab4:	bic	r3, r2, #1
   13ab8:	cmp	r3, #12
   13abc:	bne	13b6c <__assert_fail@plt+0x264c>
   13ac0:	mov	r0, r4
   13ac4:	mov	r1, r6
   13ac8:	mov	r2, #1
   13acc:	bl	135d8 <__assert_fail@plt+0x20b8>
   13ad0:	cmp	r0, #1
   13ad4:	strh	r0, [r6, #56]	; 0x38
   13ad8:	bne	1413c <__assert_fail@plt+0x2c1c>
   13adc:	ldr	r0, [r4, #48]	; 0x30
   13ae0:	tst	r0, #4
   13ae4:	bne	1413c <__assert_fail@plt+0x2c1c>
   13ae8:	mov	r1, #32768	; 0x8000
   13aec:	tst	r0, #512	; 0x200
   13af0:	and	r1, r1, r0, lsl #11
   13af4:	orr	r1, r1, #18688	; 0x4900
   13af8:	orr	r2, r1, #524288	; 0x80000
   13afc:	bne	13e70 <__assert_fail@plt+0x2950>
   13b00:	movw	r0, #49581	; 0xc1ad
   13b04:	mov	r1, r2
   13b08:	movt	r0, #1
   13b0c:	bl	1abc0 <__assert_fail@plt+0x96a0>
   13b10:	cmn	r0, #1
   13b14:	str	r0, [r6, #36]	; 0x24
   13b18:	bgt	13e8c <__assert_fail@plt+0x296c>
   13b1c:	bl	113d0 <__errno_location@plt>
   13b20:	ldr	r0, [r0]
   13b24:	mov	r1, #7
   13b28:	strh	r1, [r6, #56]	; 0x38
   13b2c:	str	r0, [r6, #32]
   13b30:	str	r6, [r4]
   13b34:	ldrh	r0, [r6, #56]	; 0x38
   13b38:	cmp	r0, #11
   13b3c:	beq	1414c <__assert_fail@plt+0x2c2c>
   13b40:	b	14180 <__assert_fail@plt+0x2c60>
   13b44:	mov	r0, r4
   13b48:	mov	r1, r6
   13b4c:	mov	r2, #0
   13b50:	bl	135d8 <__assert_fail@plt+0x20b8>
   13b54:	strh	r0, [r6, #56]	; 0x38
   13b58:	mov	r5, r6
   13b5c:	mov	r0, r5
   13b60:	sub	sp, fp, #24
   13b64:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13b68:	ldrh	r2, [r6, #56]	; 0x38
   13b6c:	cmp	r2, #1
   13b70:	bne	13bcc <__assert_fail@plt+0x26ac>
   13b74:	cmp	r1, #4
   13b78:	bne	13c80 <__assert_fail@plt+0x2760>
   13b7c:	ldrb	r0, [r6, #58]	; 0x3a
   13b80:	tst	r0, #2
   13b84:	beq	13b90 <__assert_fail@plt+0x2670>
   13b88:	ldr	r0, [r6, #36]	; 0x24
   13b8c:	bl	114e4 <close@plt>
   13b90:	ldr	r5, [r4, #4]
   13b94:	cmp	r5, #0
   13b98:	bne	13bb4 <__assert_fail@plt+0x2694>
   13b9c:	b	13d18 <__assert_fail@plt+0x27f8>
   13ba0:	mov	r0, r5
   13ba4:	bl	12f00 <__assert_fail@plt+0x19e0>
   13ba8:	cmp	r8, #0
   13bac:	mov	r5, r8
   13bb0:	beq	13d10 <__assert_fail@plt+0x27f0>
   13bb4:	ldrd	r8, [r5, #8]
   13bb8:	cmp	r9, #0
   13bbc:	beq	13ba0 <__assert_fail@plt+0x2680>
   13bc0:	mov	r0, r9
   13bc4:	bl	114fc <closedir@plt>
   13bc8:	b	13ba0 <__assert_fail@plt+0x2680>
   13bcc:	mov	r7, r6
   13bd0:	ldr	r6, [r7, #8]
   13bd4:	cmp	r6, #0
   13bd8:	beq	13d3c <__assert_fail@plt+0x281c>
   13bdc:	mov	r0, r7
   13be0:	str	r6, [r4]
   13be4:	bl	12f00 <__assert_fail@plt+0x19e0>
   13be8:	ldr	r0, [r6, #48]	; 0x30
   13bec:	cmp	r0, #0
   13bf0:	beq	13d84 <__assert_fail@plt+0x2864>
   13bf4:	ldrh	r0, [r6, #60]	; 0x3c
   13bf8:	mov	r7, r6
   13bfc:	cmp	r0, #4
   13c00:	beq	13bd0 <__assert_fail@plt+0x26b0>
   13c04:	cmp	r0, #2
   13c08:	bne	14100 <__assert_fail@plt+0x2be0>
   13c0c:	mov	r0, r4
   13c10:	mov	r1, r6
   13c14:	mov	r2, #1
   13c18:	bl	135d8 <__assert_fail@plt+0x20b8>
   13c1c:	cmp	r0, #1
   13c20:	strh	r0, [r6, #56]	; 0x38
   13c24:	bne	140f8 <__assert_fail@plt+0x2bd8>
   13c28:	ldr	r0, [r4, #48]	; 0x30
   13c2c:	tst	r0, #4
   13c30:	bne	140f8 <__assert_fail@plt+0x2bd8>
   13c34:	mov	r1, #32768	; 0x8000
   13c38:	tst	r0, #512	; 0x200
   13c3c:	and	r1, r1, r0, lsl #11
   13c40:	orr	r1, r1, #18688	; 0x4900
   13c44:	orr	r2, r1, #524288	; 0x80000
   13c48:	bne	140d0 <__assert_fail@plt+0x2bb0>
   13c4c:	movw	r0, #49581	; 0xc1ad
   13c50:	mov	r1, r2
   13c54:	movt	r0, #1
   13c58:	bl	1abc0 <__assert_fail@plt+0x96a0>
   13c5c:	cmn	r0, #1
   13c60:	str	r0, [r6, #36]	; 0x24
   13c64:	bgt	140ec <__assert_fail@plt+0x2bcc>
   13c68:	bl	113d0 <__errno_location@plt>
   13c6c:	ldr	r0, [r0]
   13c70:	mov	r1, #7
   13c74:	strh	r1, [r6, #56]	; 0x38
   13c78:	str	r0, [r6, #32]
   13c7c:	b	140f8 <__assert_fail@plt+0x2bd8>
   13c80:	tst	r0, #64	; 0x40
   13c84:	beq	13ca0 <__assert_fail@plt+0x2780>
   13c88:	ldrd	r2, [r4, #16]
   13c8c:	ldrd	r8, [r6, #64]	; 0x40
   13c90:	eor	r1, r9, r3
   13c94:	eor	r2, r8, r2
   13c98:	orrs	r1, r2, r1
   13c9c:	bne	13b7c <__assert_fail@plt+0x265c>
   13ca0:	ldr	r7, [r4, #4]
   13ca4:	cmp	r7, #0
   13ca8:	beq	13e1c <__assert_fail@plt+0x28fc>
   13cac:	tst	r0, #4096	; 0x1000
   13cb0:	bne	13dd4 <__assert_fail@plt+0x28b4>
   13cb4:	ldr	r3, [r6, #24]
   13cb8:	mov	r0, r4
   13cbc:	mov	r1, r6
   13cc0:	mvn	r2, #0
   13cc4:	bl	143e4 <__assert_fail@plt+0x2ec4>
   13cc8:	cmp	r0, #0
   13ccc:	beq	13e34 <__assert_fail@plt+0x2914>
   13cd0:	bl	113d0 <__errno_location@plt>
   13cd4:	ldr	r0, [r0]
   13cd8:	str	r0, [r6, #32]
   13cdc:	ldrh	r0, [r6, #58]	; 0x3a
   13ce0:	orr	r0, r0, #1
   13ce4:	strh	r0, [r6, #58]	; 0x3a
   13ce8:	ldr	r0, [r4, #4]
   13cec:	cmp	r0, #0
   13cf0:	beq	13e34 <__assert_fail@plt+0x2914>
   13cf4:	ldmib	r0, {r1, r2}
   13cf8:	cmp	r2, #0
   13cfc:	ldr	r1, [r1, #24]
   13d00:	str	r1, [r0, #24]
   13d04:	mov	r0, r2
   13d08:	bne	13cf4 <__assert_fail@plt+0x27d4>
   13d0c:	b	13e34 <__assert_fail@plt+0x2914>
   13d10:	mov	r0, #0
   13d14:	str	r0, [r4, #4]
   13d18:	mov	r0, #6
   13d1c:	strh	r0, [r6, #56]	; 0x38
   13d20:	mov	r0, r4
   13d24:	mov	r1, r6
   13d28:	bl	14308 <__assert_fail@plt+0x2de8>
   13d2c:	mov	r5, r6
   13d30:	mov	r0, r5
   13d34:	sub	sp, fp, #24
   13d38:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13d3c:	ldr	r0, [r7, #4]
   13d40:	ldr	r1, [r0, #12]
   13d44:	cmp	r1, #0
   13d48:	beq	13dac <__assert_fail@plt+0x288c>
   13d4c:	str	r0, [r4]
   13d50:	mov	r2, #0
   13d54:	ldr	r1, [r4, #24]
   13d58:	ldr	r0, [r0, #40]	; 0x28
   13d5c:	strb	r2, [r1, r0]
   13d60:	mov	r0, r4
   13d64:	mov	r1, #3
   13d68:	bl	14694 <__assert_fail@plt+0x3174>
   13d6c:	cmp	r0, #0
   13d70:	beq	13eac <__assert_fail@plt+0x298c>
   13d74:	mov	r6, r0
   13d78:	mov	r0, r7
   13d7c:	bl	12f00 <__assert_fail@plt+0x19e0>
   13d80:	b	14100 <__assert_fail@plt+0x2be0>
   13d84:	mov	r0, r4
   13d88:	bl	1522c <__assert_fail@plt+0x3d0c>
   13d8c:	ldr	r1, [r4, #48]	; 0x30
   13d90:	cmp	r0, #0
   13d94:	beq	13db4 <__assert_fail@plt+0x2894>
   13d98:	orr	r0, r1, #8192	; 0x2000
   13d9c:	str	r0, [r4, #48]	; 0x30
   13da0:	mov	r0, r5
   13da4:	sub	sp, fp, #24
   13da8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13dac:	mov	r5, r0
   13db0:	b	13ec0 <__assert_fail@plt+0x29a0>
   13db4:	movw	r0, #258	; 0x102
   13db8:	tst	r1, r0
   13dbc:	beq	13f5c <__assert_fail@plt+0x2a3c>
   13dc0:	ldr	r0, [r4, #56]	; 0x38
   13dc4:	cmp	r0, #0
   13dc8:	beq	13f64 <__assert_fail@plt+0x2a44>
   13dcc:	bl	15f50 <__assert_fail@plt+0x4a30>
   13dd0:	b	13f64 <__assert_fail@plt+0x2a44>
   13dd4:	bic	r0, r0, #4096	; 0x1000
   13dd8:	str	r0, [r4, #48]	; 0x30
   13ddc:	ldrd	r8, [r7, #8]
   13de0:	cmp	r9, #0
   13de4:	bne	13e08 <__assert_fail@plt+0x28e8>
   13de8:	mov	r0, r7
   13dec:	bl	12f00 <__assert_fail@plt+0x19e0>
   13df0:	cmp	r8, #0
   13df4:	mov	r7, r8
   13df8:	beq	13e14 <__assert_fail@plt+0x28f4>
   13dfc:	ldrd	r8, [r7, #8]
   13e00:	cmp	r9, #0
   13e04:	beq	13de8 <__assert_fail@plt+0x28c8>
   13e08:	mov	r0, r9
   13e0c:	bl	114fc <closedir@plt>
   13e10:	b	13de8 <__assert_fail@plt+0x28c8>
   13e14:	mov	r0, #0
   13e18:	str	r0, [r4, #4]
   13e1c:	mov	r0, r4
   13e20:	mov	r1, #3
   13e24:	bl	14694 <__assert_fail@plt+0x3174>
   13e28:	cmp	r0, #0
   13e2c:	str	r0, [r4, #4]
   13e30:	beq	13e44 <__assert_fail@plt+0x2924>
   13e34:	ldr	r6, [r4, #4]
   13e38:	mov	r0, #0
   13e3c:	str	r0, [r4, #4]
   13e40:	b	14100 <__assert_fail@plt+0x2be0>
   13e44:	ldrb	r0, [r4, #49]	; 0x31
   13e48:	tst	r0, #32
   13e4c:	bne	14228 <__assert_fail@plt+0x2d08>
   13e50:	ldr	r0, [r6, #32]
   13e54:	cmp	r0, #0
   13e58:	beq	13d20 <__assert_fail@plt+0x2800>
   13e5c:	ldrh	r0, [r6, #56]	; 0x38
   13e60:	cmp	r0, #4
   13e64:	beq	13d20 <__assert_fail@plt+0x2800>
   13e68:	mov	r0, #7
   13e6c:	b	13d1c <__assert_fail@plt+0x27fc>
   13e70:	ldr	r0, [r4, #32]
   13e74:	movw	r1, #49581	; 0xc1ad
   13e78:	movt	r1, #1
   13e7c:	bl	16cb4 <__assert_fail@plt+0x5794>
   13e80:	cmn	r0, #1
   13e84:	str	r0, [r6, #36]	; 0x24
   13e88:	ble	13b1c <__assert_fail@plt+0x25fc>
   13e8c:	ldrh	r0, [r6, #58]	; 0x3a
   13e90:	orr	r0, r0, #2
   13e94:	strh	r0, [r6, #58]	; 0x3a
   13e98:	str	r6, [r4]
   13e9c:	ldrh	r0, [r6, #56]	; 0x38
   13ea0:	cmp	r0, #11
   13ea4:	beq	1414c <__assert_fail@plt+0x2c2c>
   13ea8:	b	14180 <__assert_fail@plt+0x2c60>
   13eac:	ldrb	r0, [r4, #49]	; 0x31
   13eb0:	mov	r5, #0
   13eb4:	tst	r0, #32
   13eb8:	bne	14228 <__assert_fail@plt+0x2d08>
   13ebc:	ldr	r5, [r7, #4]
   13ec0:	mov	r0, r7
   13ec4:	str	r5, [r4]
   13ec8:	bl	12f00 <__assert_fail@plt+0x19e0>
   13ecc:	ldr	r0, [r5, #48]	; 0x30
   13ed0:	cmn	r0, #1
   13ed4:	beq	13f38 <__assert_fail@plt+0x2a18>
   13ed8:	ldrh	r0, [r5, #56]	; 0x38
   13edc:	cmp	r0, #11
   13ee0:	beq	14304 <__assert_fail@plt+0x2de4>
   13ee4:	ldr	r0, [r5, #40]	; 0x28
   13ee8:	ldr	r1, [r4, #24]
   13eec:	mov	r2, #0
   13ef0:	strb	r2, [r1, r0]
   13ef4:	ldr	r0, [r5, #48]	; 0x30
   13ef8:	cmp	r0, #0
   13efc:	beq	14054 <__assert_fail@plt+0x2b34>
   13f00:	ldrh	r0, [r5, #58]	; 0x3a
   13f04:	tst	r0, #2
   13f08:	bne	1408c <__assert_fail@plt+0x2b6c>
   13f0c:	tst	r0, #1
   13f10:	bne	142bc <__assert_fail@plt+0x2d9c>
   13f14:	ldr	r1, [r5, #4]
   13f18:	movw	r3, #49580	; 0xc1ac
   13f1c:	mov	r0, r4
   13f20:	mvn	r2, #0
   13f24:	movt	r3, #1
   13f28:	bl	143e4 <__assert_fail@plt+0x2ec4>
   13f2c:	cmp	r0, #0
   13f30:	bne	14064 <__assert_fail@plt+0x2b44>
   13f34:	b	142bc <__assert_fail@plt+0x2d9c>
   13f38:	mov	r0, r5
   13f3c:	bl	12f00 <__assert_fail@plt+0x19e0>
   13f40:	bl	113d0 <__errno_location@plt>
   13f44:	mov	r5, #0
   13f48:	str	r5, [r0]
   13f4c:	str	r5, [r4]
   13f50:	mov	r0, r5
   13f54:	sub	sp, fp, #24
   13f58:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13f5c:	ldr	r0, [r4, #56]	; 0x38
   13f60:	bl	12f00 <__assert_fail@plt+0x19e0>
   13f64:	ldr	r1, [r6, #52]	; 0x34
   13f68:	add	r7, r6, #168	; 0xa8
   13f6c:	str	r1, [r6, #40]	; 0x28
   13f70:	add	r2, r1, #1
   13f74:	mov	r1, r7
   13f78:	ldr	r0, [r4, #24]
   13f7c:	bl	11250 <memmove@plt>
   13f80:	mov	r0, r7
   13f84:	mov	r1, #47	; 0x2f
   13f88:	bl	11454 <strrchr@plt>
   13f8c:	cmp	r0, #0
   13f90:	beq	13fcc <__assert_fail@plt+0x2aac>
   13f94:	cmp	r0, r7
   13f98:	bne	13fa8 <__assert_fail@plt+0x2a88>
   13f9c:	ldrb	r1, [r6, #169]	; 0xa9
   13fa0:	cmp	r1, #0
   13fa4:	beq	13fcc <__assert_fail@plt+0x2aac>
   13fa8:	add	r8, r0, #1
   13fac:	mov	r0, r8
   13fb0:	bl	113a0 <strlen@plt>
   13fb4:	mov	r9, r0
   13fb8:	add	r2, r0, #1
   13fbc:	mov	r0, r7
   13fc0:	mov	r1, r8
   13fc4:	bl	11250 <memmove@plt>
   13fc8:	str	r9, [r6, #52]	; 0x34
   13fcc:	ldr	r0, [r4, #24]
   13fd0:	movw	r1, #258	; 0x102
   13fd4:	str	r0, [r6, #24]
   13fd8:	str	r0, [r6, #28]
   13fdc:	ldrh	r0, [r4, #48]	; 0x30
   13fe0:	tst	r0, r1
   13fe4:	beq	14028 <__assert_fail@plt+0x2b08>
   13fe8:	movw	r0, #12032	; 0x2f00
   13fec:	movw	r2, #21792	; 0x5520
   13ff0:	movw	r3, #21824	; 0x5540
   13ff4:	mov	r1, #0
   13ff8:	movt	r0, #1
   13ffc:	movt	r2, #1
   14000:	movt	r3, #1
   14004:	str	r0, [sp]
   14008:	mov	r0, #31
   1400c:	bl	15c34 <__assert_fail@plt+0x4714>
   14010:	str	r0, [r4, #56]	; 0x38
   14014:	str	r6, [r4]
   14018:	ldrh	r0, [r6, #56]	; 0x38
   1401c:	cmp	r0, #11
   14020:	beq	1414c <__assert_fail@plt+0x2c2c>
   14024:	b	14180 <__assert_fail@plt+0x2c60>
   14028:	mov	r0, #32
   1402c:	bl	1a74c <__assert_fail@plt+0x922c>
   14030:	cmp	r0, #0
   14034:	str	r0, [r4, #56]	; 0x38
   14038:	beq	1413c <__assert_fail@plt+0x2c1c>
   1403c:	bl	1a854 <__assert_fail@plt+0x9334>
   14040:	str	r6, [r4]
   14044:	ldrh	r0, [r6, #56]	; 0x38
   14048:	cmp	r0, #11
   1404c:	beq	1414c <__assert_fail@plt+0x2c2c>
   14050:	b	14180 <__assert_fail@plt+0x2c60>
   14054:	mov	r0, r4
   14058:	bl	1522c <__assert_fail@plt+0x3d0c>
   1405c:	cmp	r0, #0
   14060:	beq	142bc <__assert_fail@plt+0x2d9c>
   14064:	bl	113d0 <__errno_location@plt>
   14068:	ldr	r0, [r0]
   1406c:	str	r0, [r5, #32]
   14070:	ldr	r0, [r4, #48]	; 0x30
   14074:	orr	r0, r0, #8192	; 0x2000
   14078:	str	r0, [r4, #48]	; 0x30
   1407c:	ldrh	r0, [r5, #56]	; 0x38
   14080:	cmp	r0, #2
   14084:	bne	142c8 <__assert_fail@plt+0x2da8>
   14088:	b	142ec <__assert_fail@plt+0x2dcc>
   1408c:	ldr	r0, [r4, #48]	; 0x30
   14090:	tst	r0, #4
   14094:	bne	142b4 <__assert_fail@plt+0x2d94>
   14098:	ldr	r6, [r5, #36]	; 0x24
   1409c:	tst	r0, #512	; 0x200
   140a0:	bne	14288 <__assert_fail@plt+0x2d68>
   140a4:	mov	r0, r6
   140a8:	bl	11490 <fchdir@plt>
   140ac:	cmp	r0, #0
   140b0:	beq	142b4 <__assert_fail@plt+0x2d94>
   140b4:	bl	113d0 <__errno_location@plt>
   140b8:	ldr	r0, [r0]
   140bc:	str	r0, [r5, #32]
   140c0:	ldr	r0, [r4, #48]	; 0x30
   140c4:	orr	r0, r0, #8192	; 0x2000
   140c8:	str	r0, [r4, #48]	; 0x30
   140cc:	b	142b4 <__assert_fail@plt+0x2d94>
   140d0:	ldr	r0, [r4, #32]
   140d4:	movw	r1, #49581	; 0xc1ad
   140d8:	movt	r1, #1
   140dc:	bl	16cb4 <__assert_fail@plt+0x5794>
   140e0:	cmn	r0, #1
   140e4:	str	r0, [r6, #36]	; 0x24
   140e8:	ble	13c68 <__assert_fail@plt+0x2748>
   140ec:	ldrh	r0, [r6, #58]	; 0x3a
   140f0:	orr	r0, r0, #2
   140f4:	strh	r0, [r6, #58]	; 0x3a
   140f8:	mov	r0, #3
   140fc:	strh	r0, [r6, #60]	; 0x3c
   14100:	ldr	r0, [r6, #4]
   14104:	ldr	r1, [r0, #28]
   14108:	ldr	r0, [r0, #40]	; 0x28
   1410c:	sub	r2, r0, #1
   14110:	ldrb	r1, [r1, r2]
   14114:	cmp	r1, #47	; 0x2f
   14118:	ldr	r1, [r4, #24]
   1411c:	moveq	r0, r2
   14120:	mov	r2, #47	; 0x2f
   14124:	strb	r2, [r1, r0]!
   14128:	ldr	r2, [r6, #52]	; 0x34
   1412c:	add	r0, r1, #1
   14130:	add	r1, r6, #168	; 0xa8
   14134:	add	r2, r2, #1
   14138:	bl	11250 <memmove@plt>
   1413c:	str	r6, [r4]
   14140:	ldrh	r0, [r6, #56]	; 0x38
   14144:	cmp	r0, #11
   14148:	bne	14180 <__assert_fail@plt+0x2c60>
   1414c:	add	r0, r6, #112	; 0x70
   14150:	ldrd	r0, [r0]
   14154:	eor	r2, r0, #1
   14158:	orrs	r2, r2, r1
   1415c:	beq	14234 <__assert_fail@plt+0x2d14>
   14160:	eor	r0, r0, #2
   14164:	orrs	r0, r0, r1
   14168:	bne	14304 <__assert_fail@plt+0x2de4>
   1416c:	mov	r0, r4
   14170:	mov	r1, r6
   14174:	mov	r2, #0
   14178:	bl	135d8 <__assert_fail@plt+0x20b8>
   1417c:	strh	r0, [r6, #56]	; 0x38
   14180:	cmp	r0, #1
   14184:	bne	14224 <__assert_fail@plt+0x2d04>
   14188:	ldr	r0, [r6, #48]	; 0x30
   1418c:	add	r8, r6, #64	; 0x40
   14190:	cmp	r0, #0
   14194:	bne	141a0 <__assert_fail@plt+0x2c80>
   14198:	ldrd	r0, [r8]
   1419c:	strd	r0, [r4, #16]
   141a0:	ldrh	r0, [r4, #48]	; 0x30
   141a4:	movw	r1, #258	; 0x102
   141a8:	tst	r0, r1
   141ac:	beq	14244 <__assert_fail@plt+0x2d24>
   141b0:	mov	r0, #24
   141b4:	bl	1a74c <__assert_fail@plt+0x922c>
   141b8:	cmp	r0, #0
   141bc:	beq	14270 <__assert_fail@plt+0x2d50>
   141c0:	ldrd	r2, [r8]
   141c4:	mov	r7, r0
   141c8:	add	r0, r6, #160	; 0xa0
   141cc:	stm	r7, {r2, r3}
   141d0:	add	r2, r7, #8
   141d4:	ldrd	r0, [r0]
   141d8:	stm	r2, {r0, r1, r6}
   141dc:	mov	r1, r7
   141e0:	ldr	r0, [r4, #56]	; 0x38
   141e4:	bl	16890 <__assert_fail@plt+0x5370>
   141e8:	cmp	r0, r7
   141ec:	beq	14234 <__assert_fail@plt+0x2d14>
   141f0:	mov	r4, r0
   141f4:	mov	r0, r7
   141f8:	bl	12f00 <__assert_fail@plt+0x19e0>
   141fc:	cmp	r4, #0
   14200:	beq	14270 <__assert_fail@plt+0x2d50>
   14204:	ldr	r0, [r4, #16]
   14208:	mov	r1, #2
   1420c:	mov	r5, r6
   14210:	strh	r1, [r6, #56]	; 0x38
   14214:	str	r0, [r6]
   14218:	mov	r0, r5
   1421c:	sub	sp, fp, #24
   14220:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14224:	mov	r5, r6
   14228:	mov	r0, r5
   1422c:	sub	sp, fp, #24
   14230:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14234:	mov	r5, r6
   14238:	mov	r0, r5
   1423c:	sub	sp, fp, #24
   14240:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14244:	ldr	r0, [r4, #56]	; 0x38
   14248:	mov	r1, r8
   1424c:	bl	1a870 <__assert_fail@plt+0x9350>
   14250:	cmp	r0, #0
   14254:	mov	r5, r6
   14258:	movne	r0, #2
   1425c:	strhne	r0, [r6, #56]	; 0x38
   14260:	strne	r6, [r6]
   14264:	mov	r0, r5
   14268:	sub	sp, fp, #24
   1426c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14270:	bl	113d0 <__errno_location@plt>
   14274:	mov	r1, #12
   14278:	str	r1, [r0]
   1427c:	mov	r0, r5
   14280:	sub	sp, fp, #24
   14284:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14288:	ldr	r1, [r4, #32]
   1428c:	cmp	r1, r6
   14290:	bne	1429c <__assert_fail@plt+0x2d7c>
   14294:	cmn	r1, #100	; 0x64
   14298:	bne	14304 <__assert_fail@plt+0x2de4>
   1429c:	add	r0, r4, #60	; 0x3c
   142a0:	bl	16bbc <__assert_fail@plt+0x569c>
   142a4:	cmp	r0, #0
   142a8:	bmi	142b0 <__assert_fail@plt+0x2d90>
   142ac:	bl	114e4 <close@plt>
   142b0:	str	r6, [r4, #32]
   142b4:	ldr	r0, [r5, #36]	; 0x24
   142b8:	bl	114e4 <close@plt>
   142bc:	ldrh	r0, [r5, #56]	; 0x38
   142c0:	cmp	r0, #2
   142c4:	beq	142ec <__assert_fail@plt+0x2dcc>
   142c8:	ldr	r0, [r5, #32]
   142cc:	mov	r1, #7
   142d0:	cmp	r0, #0
   142d4:	movweq	r1, #6
   142d8:	strh	r1, [r5, #56]	; 0x38
   142dc:	bne	142ec <__assert_fail@plt+0x2dcc>
   142e0:	mov	r0, r4
   142e4:	mov	r1, r5
   142e8:	bl	14308 <__assert_fail@plt+0x2de8>
   142ec:	ldrb	r0, [r4, #49]	; 0x31
   142f0:	tst	r0, #32
   142f4:	movne	r5, #0
   142f8:	mov	r0, r5
   142fc:	sub	sp, fp, #24
   14300:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14304:	bl	114d8 <abort@plt>
   14308:	push	{r4, r5, r7, sl, fp, lr}
   1430c:	add	fp, sp, #16
   14310:	sub	sp, sp, #24
   14314:	ldrh	r2, [r0, #48]	; 0x30
   14318:	movw	r3, #258	; 0x102
   1431c:	add	lr, r1, #64	; 0x40
   14320:	add	r4, r1, #160	; 0xa0
   14324:	tst	r2, r3
   14328:	beq	14360 <__assert_fail@plt+0x2e40>
   1432c:	ldrd	r2, [lr]
   14330:	mov	r1, sp
   14334:	stm	sp, {r2, r3}
   14338:	ldrd	r2, [r4]
   1433c:	str	r3, [sp, #12]
   14340:	str	r2, [sp, #8]
   14344:	ldr	r0, [r0, #56]	; 0x38
   14348:	bl	168d8 <__assert_fail@plt+0x53b8>
   1434c:	cmp	r0, #0
   14350:	beq	143e0 <__assert_fail@plt+0x2ec0>
   14354:	bl	12f00 <__assert_fail@plt+0x19e0>
   14358:	sub	sp, fp, #16
   1435c:	pop	{r4, r5, r7, sl, fp, pc}
   14360:	ldr	r1, [r1, #4]
   14364:	cmp	r1, #0
   14368:	beq	143d8 <__assert_fail@plt+0x2eb8>
   1436c:	ldr	r2, [r1, #48]	; 0x30
   14370:	cmp	r2, #0
   14374:	bmi	143d8 <__assert_fail@plt+0x2eb8>
   14378:	ldr	ip, [r0, #56]	; 0x38
   1437c:	ldrd	r2, [ip, #16]
   14380:	orrs	r2, r2, r3
   14384:	beq	143e0 <__assert_fail@plt+0x2ec0>
   14388:	ldrd	r2, [r4]
   1438c:	ldrd	r4, [ip]
   14390:	eor	r3, r5, r3
   14394:	eor	r2, r4, r2
   14398:	orrs	r2, r2, r3
   1439c:	bne	143d8 <__assert_fail@plt+0x2eb8>
   143a0:	add	r3, ip, #8
   143a4:	ldm	lr, {r2, r5}
   143a8:	ldm	r3, {r4, r7}
   143ac:	eor	r7, r7, r5
   143b0:	eor	r2, r4, r2
   143b4:	orrs	r2, r2, r7
   143b8:	bne	143d8 <__assert_fail@plt+0x2eb8>
   143bc:	add	r2, r1, #64	; 0x40
   143c0:	add	r1, r1, #160	; 0xa0
   143c4:	ldm	r2, {r2, r5}
   143c8:	stm	r3, {r2, r5}
   143cc:	ldr	r0, [r0, #56]	; 0x38
   143d0:	ldrd	r2, [r1]
   143d4:	strd	r2, [r0]
   143d8:	sub	sp, fp, #16
   143dc:	pop	{r4, r5, r7, sl, fp, pc}
   143e0:	bl	114d8 <abort@plt>
   143e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143e8:	add	fp, sp, #28
   143ec:	sub	sp, sp, #108	; 0x6c
   143f0:	mov	r7, r3
   143f4:	mov	r4, r2
   143f8:	mov	r8, r1
   143fc:	mov	sl, r0
   14400:	cmp	r3, #0
   14404:	beq	14490 <__assert_fail@plt+0x2f70>
   14408:	movw	r1, #49580	; 0xc1ac
   1440c:	mov	r0, r7
   14410:	movt	r1, #1
   14414:	bl	1122c <strcmp@plt>
   14418:	cmp	r0, #0
   1441c:	mov	r6, r0
   14420:	movwne	r6, #1
   14424:	ldr	r0, [sl, #48]	; 0x30
   14428:	tst	r0, #4
   1442c:	bne	144a0 <__assert_fail@plt+0x2f80>
   14430:	cmn	r4, #1
   14434:	mov	r1, #0
   14438:	mov	r9, #0
   1443c:	movwgt	r1, #1
   14440:	orrs	r1, r1, r6
   14444:	bne	144c8 <__assert_fail@plt+0x2fa8>
   14448:	ands	r0, r0, #512	; 0x200
   1444c:	beq	144c8 <__assert_fail@plt+0x2fa8>
   14450:	add	r4, sl, #60	; 0x3c
   14454:	mov	r0, r4
   14458:	bl	16bb4 <__assert_fail@plt+0x5694>
   1445c:	cmp	r0, #0
   14460:	bne	144d0 <__assert_fail@plt+0x2fb0>
   14464:	mov	r0, r4
   14468:	bl	16c08 <__assert_fail@plt+0x56e8>
   1446c:	cmn	r0, #1
   14470:	ble	144d0 <__assert_fail@plt+0x2fb0>
   14474:	mov	r4, r0
   14478:	mov	r9, #0
   1447c:	mov	r7, #0
   14480:	ldr	r5, [sl, #48]	; 0x30
   14484:	tst	r5, #2
   14488:	beq	14514 <__assert_fail@plt+0x2ff4>
   1448c:	b	1455c <__assert_fail@plt+0x303c>
   14490:	mov	r6, #1
   14494:	ldr	r0, [sl, #48]	; 0x30
   14498:	tst	r0, #4
   1449c:	beq	14430 <__assert_fail@plt+0x2f10>
   144a0:	mov	r5, #0
   144a4:	cmp	r4, #0
   144a8:	bmi	14550 <__assert_fail@plt+0x3030>
   144ac:	ands	r0, r0, #512	; 0x200
   144b0:	beq	14550 <__assert_fail@plt+0x3030>
   144b4:	mov	r0, r4
   144b8:	bl	114e4 <close@plt>
   144bc:	mov	r0, r5
   144c0:	sub	sp, fp, #28
   144c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144c8:	cmn	r4, #1
   144cc:	bgt	14508 <__assert_fail@plt+0x2fe8>
   144d0:	ldr	r0, [sl, #48]	; 0x30
   144d4:	mov	r1, #32768	; 0x8000
   144d8:	and	r1, r1, r0, lsl #11
   144dc:	tst	r0, #512	; 0x200
   144e0:	orr	r1, r1, #18688	; 0x4900
   144e4:	orr	r2, r1, #524288	; 0x80000
   144e8:	bne	14584 <__assert_fail@plt+0x3064>
   144ec:	mov	r0, r7
   144f0:	mov	r1, r2
   144f4:	bl	1abc0 <__assert_fail@plt+0x96a0>
   144f8:	mov	r4, r0
   144fc:	mov	r9, #1
   14500:	cmp	r0, #0
   14504:	bmi	145a0 <__assert_fail@plt+0x3080>
   14508:	ldr	r5, [sl, #48]	; 0x30
   1450c:	tst	r5, #2
   14510:	bne	1455c <__assert_fail@plt+0x303c>
   14514:	cmp	r7, #0
   14518:	beq	14534 <__assert_fail@plt+0x3014>
   1451c:	movw	r1, #49580	; 0xc1ac
   14520:	mov	r0, r7
   14524:	movt	r1, #1
   14528:	bl	1122c <strcmp@plt>
   1452c:	cmp	r0, #0
   14530:	beq	1455c <__assert_fail@plt+0x303c>
   14534:	tst	r5, #512	; 0x200
   14538:	bne	145f8 <__assert_fail@plt+0x30d8>
   1453c:	mov	r0, r4
   14540:	bl	11490 <fchdir@plt>
   14544:	mov	r5, r0
   14548:	cmp	r9, #0
   1454c:	bne	14640 <__assert_fail@plt+0x3120>
   14550:	mov	r0, r5
   14554:	sub	sp, fp, #28
   14558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1455c:	mov	r2, sp
   14560:	mov	r0, #3
   14564:	mov	r1, r4
   14568:	bl	112d4 <__fxstat64@plt>
   1456c:	cmp	r0, #0
   14570:	beq	145b0 <__assert_fail@plt+0x3090>
   14574:	mvn	r5, #0
   14578:	cmp	r9, #0
   1457c:	beq	14550 <__assert_fail@plt+0x3030>
   14580:	b	14640 <__assert_fail@plt+0x3120>
   14584:	ldr	r0, [sl, #32]
   14588:	mov	r1, r7
   1458c:	bl	16cb4 <__assert_fail@plt+0x5794>
   14590:	mov	r4, r0
   14594:	mov	r9, #1
   14598:	cmp	r0, #0
   1459c:	bpl	14508 <__assert_fail@plt+0x2fe8>
   145a0:	mvn	r5, #0
   145a4:	mov	r0, r5
   145a8:	sub	sp, fp, #28
   145ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145b0:	add	r0, r8, #64	; 0x40
   145b4:	ldm	sp, {r2, r3}
   145b8:	ldrd	r0, [r0]
   145bc:	eor	r1, r1, r3
   145c0:	eor	r0, r0, r2
   145c4:	orrs	r0, r0, r1
   145c8:	bne	14628 <__assert_fail@plt+0x3108>
   145cc:	add	r0, r8, #160	; 0xa0
   145d0:	ldr	r2, [sp, #96]	; 0x60
   145d4:	ldr	r3, [sp, #100]	; 0x64
   145d8:	ldrd	r0, [r0]
   145dc:	eor	r1, r1, r3
   145e0:	eor	r0, r0, r2
   145e4:	orrs	r0, r0, r1
   145e8:	bne	14628 <__assert_fail@plt+0x3108>
   145ec:	ldr	r5, [sl, #48]	; 0x30
   145f0:	tst	r5, #512	; 0x200
   145f4:	beq	1453c <__assert_fail@plt+0x301c>
   145f8:	ldr	r1, [sl, #32]
   145fc:	cmp	r1, r4
   14600:	bne	1460c <__assert_fail@plt+0x30ec>
   14604:	cmn	r1, #100	; 0x64
   14608:	bne	14690 <__assert_fail@plt+0x3170>
   1460c:	cmp	r6, #0
   14610:	beq	14664 <__assert_fail@plt+0x3144>
   14614:	add	r0, sl, #60	; 0x3c
   14618:	bl	16bbc <__assert_fail@plt+0x569c>
   1461c:	cmp	r0, #0
   14620:	bpl	14678 <__assert_fail@plt+0x3158>
   14624:	b	1467c <__assert_fail@plt+0x315c>
   14628:	bl	113d0 <__errno_location@plt>
   1462c:	mov	r1, #2
   14630:	str	r1, [r0]
   14634:	mvn	r5, #0
   14638:	cmp	r9, #0
   1463c:	beq	14550 <__assert_fail@plt+0x3030>
   14640:	bl	113d0 <__errno_location@plt>
   14644:	ldr	r7, [r0]
   14648:	mov	r6, r0
   1464c:	mov	r0, r4
   14650:	bl	114e4 <close@plt>
   14654:	str	r7, [r6]
   14658:	mov	r0, r5
   1465c:	sub	sp, fp, #28
   14660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14664:	tst	r5, #4
   14668:	bne	1467c <__assert_fail@plt+0x315c>
   1466c:	cmp	r1, #0
   14670:	bmi	1467c <__assert_fail@plt+0x315c>
   14674:	mov	r0, r1
   14678:	bl	114e4 <close@plt>
   1467c:	str	r4, [sl, #32]
   14680:	mov	r5, #0
   14684:	mov	r0, r5
   14688:	sub	sp, fp, #28
   1468c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14690:	bl	114d8 <abort@plt>
   14694:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14698:	add	fp, sp, #28
   1469c:	sub	sp, sp, #68	; 0x44
   146a0:	ldr	sl, [r0]
   146a4:	mov	r4, r1
   146a8:	mov	r5, r0
   146ac:	str	r0, [fp, #-44]	; 0xffffffd4
   146b0:	ldr	r6, [sl, #12]
   146b4:	cmp	r6, #0
   146b8:	beq	14700 <__assert_fail@plt+0x31e0>
   146bc:	mov	r0, r6
   146c0:	bl	11484 <dirfd@plt>
   146c4:	cmn	r0, #1
   146c8:	str	r0, [fp, #-32]	; 0xffffffe0
   146cc:	ble	14734 <__assert_fail@plt+0x3214>
   146d0:	mov	r1, r5
   146d4:	str	r6, [sp, #12]
   146d8:	str	r4, [sp, #4]
   146dc:	mov	r7, #0
   146e0:	ldr	r0, [r1, #44]!	; 0x2c
   146e4:	str	r1, [sp, #20]
   146e8:	mvn	r1, #0
   146ec:	cmp	r0, #0
   146f0:	movweq	r1, #34464	; 0x86a0
   146f4:	movteq	r1, #1
   146f8:	str	r1, [sp, #32]
   146fc:	b	14a2c <__assert_fail@plt+0x350c>
   14700:	ldr	r3, [r5, #48]	; 0x30
   14704:	mvn	r0, #99	; 0x63
   14708:	mov	r2, #0
   1470c:	and	r1, r3, #516	; 0x204
   14710:	cmp	r1, #512	; 0x200
   14714:	ldr	r1, [sl, #24]
   14718:	ldreq	r0, [r5, #32]
   1471c:	tst	r3, #16
   14720:	beq	1475c <__assert_fail@plt+0x323c>
   14724:	tst	r3, #1
   14728:	bne	14750 <__assert_fail@plt+0x3230>
   1472c:	mov	r2, #32768	; 0x8000
   14730:	b	1475c <__assert_fail@plt+0x323c>
   14734:	ldr	r0, [sl, #12]
   14738:	bl	114fc <closedir@plt>
   1473c:	mov	r6, #0
   14740:	str	r6, [sl, #12]
   14744:	cmp	r4, #3
   14748:	beq	147a4 <__assert_fail@plt+0x3284>
   1474c:	b	1513c <__assert_fail@plt+0x3c1c>
   14750:	ldr	r3, [sl, #48]	; 0x30
   14754:	cmp	r3, #0
   14758:	movne	r2, #32768	; 0x8000
   1475c:	sub	r3, fp, #32
   14760:	bl	16cec <__assert_fail@plt+0x57cc>
   14764:	cmp	r0, #0
   14768:	str	r0, [sl, #12]
   1476c:	beq	14798 <__assert_fail@plt+0x3278>
   14770:	ldrh	r0, [sl, #56]	; 0x38
   14774:	cmp	r0, #11
   14778:	bne	147c4 <__assert_fail@plt+0x32a4>
   1477c:	mov	r0, r5
   14780:	mov	r1, sl
   14784:	mov	r2, #0
   14788:	bl	135d8 <__assert_fail@plt+0x20b8>
   1478c:	strh	r0, [sl, #56]	; 0x38
   14790:	mov	r7, r5
   14794:	b	14890 <__assert_fail@plt+0x3370>
   14798:	mov	r6, #0
   1479c:	cmp	r4, #3
   147a0:	bne	1513c <__assert_fail@plt+0x3c1c>
   147a4:	mov	r0, #4
   147a8:	strh	r0, [sl, #56]	; 0x38
   147ac:	bl	113d0 <__errno_location@plt>
   147b0:	ldr	r0, [r0]
   147b4:	str	r0, [sl, #32]
   147b8:	mov	r0, r6
   147bc:	sub	sp, fp, #28
   147c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147c4:	ldrb	r0, [r5, #49]	; 0x31
   147c8:	mov	r7, r5
   147cc:	tst	r0, #1
   147d0:	beq	14890 <__assert_fail@plt+0x3370>
   147d4:	mov	r0, r7
   147d8:	mov	r1, sl
   147dc:	add	r8, sl, #64	; 0x40
   147e0:	bl	14308 <__assert_fail@plt+0x2de8>
   147e4:	mov	r0, r7
   147e8:	mov	r1, sl
   147ec:	mov	r2, #0
   147f0:	bl	135d8 <__assert_fail@plt+0x20b8>
   147f4:	ldrh	r0, [r7, #48]	; 0x30
   147f8:	movw	r1, #258	; 0x102
   147fc:	tst	r0, r1
   14800:	beq	14874 <__assert_fail@plt+0x3354>
   14804:	mov	r0, #24
   14808:	bl	1a74c <__assert_fail@plt+0x922c>
   1480c:	cmp	r0, #0
   14810:	beq	14938 <__assert_fail@plt+0x3418>
   14814:	ldrd	r2, [r8]
   14818:	mov	r5, r0
   1481c:	add	r0, sl, #160	; 0xa0
   14820:	ldr	r7, [fp, #-44]	; 0xffffffd4
   14824:	stm	r5, {r2, r3}
   14828:	add	r2, r5, #8
   1482c:	ldrd	r0, [r0]
   14830:	stm	r2, {r0, r1, sl}
   14834:	mov	r1, r5
   14838:	ldr	r0, [r7, #56]	; 0x38
   1483c:	bl	16890 <__assert_fail@plt+0x5370>
   14840:	cmp	r0, r5
   14844:	beq	14890 <__assert_fail@plt+0x3370>
   14848:	mov	r8, r0
   1484c:	mov	r0, r5
   14850:	bl	12f00 <__assert_fail@plt+0x19e0>
   14854:	cmp	r8, #0
   14858:	beq	14938 <__assert_fail@plt+0x3418>
   1485c:	ldr	r7, [fp, #-44]	; 0xffffffd4
   14860:	ldr	r0, [r8, #16]
   14864:	mov	r1, #2
   14868:	strh	r1, [sl, #56]	; 0x38
   1486c:	str	r0, [sl]
   14870:	b	14890 <__assert_fail@plt+0x3370>
   14874:	ldr	r0, [r7, #56]	; 0x38
   14878:	mov	r1, r8
   1487c:	bl	1a870 <__assert_fail@plt+0x9350>
   14880:	cmp	r0, #0
   14884:	movne	r0, #2
   14888:	strhne	r0, [sl, #56]	; 0x38
   1488c:	strne	sl, [sl]
   14890:	mov	r1, r7
   14894:	mov	r5, r7
   14898:	str	r4, [sp, #4]
   1489c:	str	r6, [sp, #12]
   148a0:	ldr	r0, [r1, #44]!	; 0x2c
   148a4:	str	r1, [sp, #20]
   148a8:	mvn	r1, #0
   148ac:	cmp	r0, #0
   148b0:	movweq	r1, #34464	; 0x86a0
   148b4:	movteq	r1, #1
   148b8:	cmp	r4, #2
   148bc:	str	r1, [sp, #32]
   148c0:	bne	148dc <__assert_fail@plt+0x33bc>
   148c4:	mov	r7, #1
   148c8:	cmp	r4, #3
   148cc:	bne	14a2c <__assert_fail@plt+0x350c>
   148d0:	sub	r0, r4, #3
   148d4:	mov	r5, #0
   148d8:	b	14970 <__assert_fail@plt+0x3450>
   148dc:	ldr	r0, [r5, #48]	; 0x30
   148e0:	and	r0, r0, #56	; 0x38
   148e4:	cmp	r0, #24
   148e8:	bne	14968 <__assert_fail@plt+0x3448>
   148ec:	ldr	r0, [sl, #84]	; 0x54
   148f0:	cmp	r0, #2
   148f4:	bne	14968 <__assert_fail@plt+0x3448>
   148f8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   148fc:	mov	r0, sl
   14900:	bl	155c0 <__assert_fail@plt+0x40a0>
   14904:	movw	r1, #26984	; 0x6968
   14908:	cmp	r0, r1
   1490c:	ble	14954 <__assert_fail@plt+0x3434>
   14910:	movw	r1, #26985	; 0x6969
   14914:	cmp	r0, r1
   14918:	movwne	r1, #16719	; 0x414f
   1491c:	movtne	r1, #21318	; 0x5346
   14920:	cmpne	r0, r1
   14924:	beq	14968 <__assert_fail@plt+0x3448>
   14928:	movw	r1, #40864	; 0x9fa0
   1492c:	cmp	r0, r1
   14930:	beq	14968 <__assert_fail@plt+0x3448>
   14934:	b	148c4 <__assert_fail@plt+0x33a4>
   14938:	bl	113d0 <__errno_location@plt>
   1493c:	mov	r1, #12
   14940:	mov	r6, #0
   14944:	str	r1, [r0]
   14948:	mov	r0, r6
   1494c:	sub	sp, fp, #28
   14950:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14954:	movw	r1, #19778	; 0x4d42
   14958:	movt	r1, #65363	; 0xff53
   1495c:	cmp	r0, r1
   14960:	cmpne	r0, #0
   14964:	bne	148c4 <__assert_fail@plt+0x33a4>
   14968:	sub	r0, r4, #3
   1496c:	mov	r5, #1
   14970:	clz	r0, r0
   14974:	lsr	r7, r0, #5
   14978:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1497c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14980:	ldrb	r0, [r0, #49]	; 0x31
   14984:	tst	r0, #2
   14988:	beq	149a4 <__assert_fail@plt+0x3484>
   1498c:	mov	r0, r2
   14990:	movw	r1, #1030	; 0x406
   14994:	mov	r2, #3
   14998:	bl	1a9e0 <__assert_fail@plt+0x94c0>
   1499c:	mov	r2, r0
   149a0:	str	r0, [fp, #-32]	; 0xffffffe0
   149a4:	cmp	r2, #0
   149a8:	bmi	149c4 <__assert_fail@plt+0x34a4>
   149ac:	ldr	r0, [fp, #-44]	; 0xffffffd4
   149b0:	mov	r1, sl
   149b4:	mov	r3, #0
   149b8:	bl	143e4 <__assert_fail@plt+0x2ec4>
   149bc:	cmp	r0, #0
   149c0:	beq	14a24 <__assert_fail@plt+0x3504>
   149c4:	and	r0, r7, r5
   149c8:	cmp	r0, #1
   149cc:	bne	149dc <__assert_fail@plt+0x34bc>
   149d0:	bl	113d0 <__errno_location@plt>
   149d4:	ldr	r0, [r0]
   149d8:	str	r0, [sl, #32]
   149dc:	ldrh	r0, [sl, #58]	; 0x3a
   149e0:	orr	r0, r0, #1
   149e4:	strh	r0, [sl, #58]	; 0x3a
   149e8:	ldr	r0, [sl, #12]
   149ec:	bl	114fc <closedir@plt>
   149f0:	ldr	r5, [fp, #-44]	; 0xffffffd4
   149f4:	mov	r4, #0
   149f8:	str	r4, [sl, #12]
   149fc:	ldrb	r0, [r5, #49]	; 0x31
   14a00:	tst	r0, #2
   14a04:	beq	14a18 <__assert_fail@plt+0x34f8>
   14a08:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14a0c:	cmp	r0, #0
   14a10:	bmi	14a18 <__assert_fail@plt+0x34f8>
   14a14:	bl	114e4 <close@plt>
   14a18:	mov	r7, #1
   14a1c:	str	r4, [sl, #12]
   14a20:	b	14a2c <__assert_fail@plt+0x350c>
   14a24:	ldr	r5, [fp, #-44]	; 0xffffffd4
   14a28:	mov	r7, #0
   14a2c:	ldr	r0, [sl, #40]	; 0x28
   14a30:	ldr	r1, [sl, #28]
   14a34:	mov	r9, #0
   14a38:	sub	r2, r0, #1
   14a3c:	ldrb	r1, [r1, r2]
   14a40:	cmp	r1, #47	; 0x2f
   14a44:	ldrb	r1, [r5, #48]	; 0x30
   14a48:	moveq	r0, r2
   14a4c:	tst	r1, #4
   14a50:	mov	r1, #0
   14a54:	str	r1, [sp, #40]	; 0x28
   14a58:	beq	14a70 <__assert_fail@plt+0x3550>
   14a5c:	ldr	r1, [r5, #24]
   14a60:	mov	r2, #47	; 0x2f
   14a64:	strb	r2, [r1, r0]!
   14a68:	add	r1, r1, #1
   14a6c:	str	r1, [sp, #40]	; 0x28
   14a70:	ldr	r6, [sl, #12]
   14a74:	add	r1, r0, #1
   14a78:	str	r1, [fp, #-40]	; 0xffffffd8
   14a7c:	cmp	r6, #0
   14a80:	beq	14e48 <__assert_fail@plt+0x3928>
   14a84:	ldr	r0, [sl, #48]	; 0x30
   14a88:	str	r7, [sp]
   14a8c:	mov	r7, #0
   14a90:	add	r0, r0, #1
   14a94:	str	r0, [sp, #24]
   14a98:	ldr	r0, [r5, #36]	; 0x24
   14a9c:	sub	r0, r0, r1
   14aa0:	str	r0, [sp, #44]	; 0x2c
   14aa4:	bl	113d0 <__errno_location@plt>
   14aa8:	str	r0, [sp, #36]	; 0x24
   14aac:	mov	r0, #0
   14ab0:	mov	r9, #0
   14ab4:	mov	r4, #0
   14ab8:	str	sl, [sp, #28]
   14abc:	str	r0, [sp, #48]	; 0x30
   14ac0:	mov	r0, #0
   14ac4:	str	r0, [sp, #8]
   14ac8:	mov	r0, #0
   14acc:	str	r0, [sp, #16]
   14ad0:	ldr	r0, [sp, #36]	; 0x24
   14ad4:	str	r7, [r0]
   14ad8:	mov	r0, r6
   14adc:	bl	1146c <readdir64@plt>
   14ae0:	cmp	r0, #0
   14ae4:	beq	14ec4 <__assert_fail@plt+0x39a4>
   14ae8:	mov	r8, r0
   14aec:	ldrb	r0, [r5, #48]	; 0x30
   14af0:	tst	r0, #32
   14af4:	bne	14b24 <__assert_fail@plt+0x3604>
   14af8:	ldrb	r0, [r8, #19]
   14afc:	cmp	r0, #46	; 0x2e
   14b00:	bne	14b24 <__assert_fail@plt+0x3604>
   14b04:	ldrb	r0, [r8, #20]
   14b08:	cmp	r0, #0
   14b0c:	beq	14de0 <__assert_fail@plt+0x38c0>
   14b10:	cmp	r0, #46	; 0x2e
   14b14:	bne	14b24 <__assert_fail@plt+0x3604>
   14b18:	ldrb	r0, [r8, #21]
   14b1c:	cmp	r0, #0
   14b20:	beq	14de0 <__assert_fail@plt+0x38c0>
   14b24:	str	r4, [fp, #-36]	; 0xffffffdc
   14b28:	add	r4, r8, #19
   14b2c:	mov	r0, r4
   14b30:	bl	113a0 <strlen@plt>
   14b34:	mov	r5, r0
   14b38:	add	r0, r0, #176	; 0xb0
   14b3c:	bic	r0, r0, #7
   14b40:	bl	1a74c <__assert_fail@plt+0x922c>
   14b44:	mov	r6, r0
   14b48:	cmp	r0, #0
   14b4c:	beq	151a8 <__assert_fail@plt+0x3c88>
   14b50:	add	sl, r6, #168	; 0xa8
   14b54:	mov	r1, r4
   14b58:	mov	r2, r5
   14b5c:	mov	r0, sl
   14b60:	bl	11274 <memcpy@plt>
   14b64:	ldr	r2, [fp, #-44]	; 0xffffffd4
   14b68:	strb	r7, [sl, r5]
   14b6c:	str	r5, [r6, #52]	; 0x34
   14b70:	mov	r0, #196608	; 0x30000
   14b74:	ldr	r1, [sp, #44]	; 0x2c
   14b78:	str	r2, [r6, #44]	; 0x2c
   14b7c:	cmp	r5, r1
   14b80:	ldr	r4, [r2, #24]
   14b84:	str	r7, [r6, #12]
   14b88:	str	r7, [r6, #16]
   14b8c:	str	r7, [r6, #20]
   14b90:	str	r0, [r6, #58]	; 0x3a
   14b94:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14b98:	str	r4, [r6, #28]
   14b9c:	str	r7, [r6, #32]
   14ba0:	add	r7, r5, r0
   14ba4:	bcs	14bb8 <__assert_fail@plt+0x3698>
   14ba8:	mov	r5, r2
   14bac:	cmp	r7, r0
   14bb0:	bcs	14c30 <__assert_fail@plt+0x3710>
   14bb4:	b	15088 <__assert_fail@plt+0x3b68>
   14bb8:	ldr	r1, [r2, #36]	; 0x24
   14bbc:	movw	r0, #257	; 0x101
   14bc0:	mov	r5, r2
   14bc4:	add	r0, r7, r0
   14bc8:	adds	r1, r0, r1
   14bcc:	bcs	15174 <__assert_fail@plt+0x3c54>
   14bd0:	mov	r0, r4
   14bd4:	str	r1, [r5, #36]	; 0x24
   14bd8:	bl	1a77c <__assert_fail@plt+0x925c>
   14bdc:	cmp	r0, #0
   14be0:	beq	15194 <__assert_fail@plt+0x3c74>
   14be4:	cmp	r0, r4
   14be8:	str	r0, [r5, #24]
   14bec:	beq	14c14 <__assert_fail@plt+0x36f4>
   14bf0:	ldrb	r1, [r5, #48]	; 0x30
   14bf4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14bf8:	tst	r1, #4
   14bfc:	ldr	r1, [sp, #40]	; 0x28
   14c00:	addne	r1, r0, r2
   14c04:	mov	r0, #1
   14c08:	str	r1, [sp, #40]	; 0x28
   14c0c:	str	r0, [sp, #16]
   14c10:	b	14c18 <__assert_fail@plt+0x36f8>
   14c14:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14c18:	ldr	r0, [r5, #36]	; 0x24
   14c1c:	sub	r0, r0, r2
   14c20:	str	r0, [sp, #44]	; 0x2c
   14c24:	mov	r0, r2
   14c28:	cmp	r7, r0
   14c2c:	bcc	15088 <__assert_fail@plt+0x3b68>
   14c30:	ldr	r0, [sp, #24]
   14c34:	add	r4, r6, #112	; 0x70
   14c38:	str	r0, [r6, #48]	; 0x30
   14c3c:	ldr	r0, [r5]
   14c40:	str	r7, [r6, #40]	; 0x28
   14c44:	str	r0, [r6, #4]
   14c48:	ldrd	r0, [r8]
   14c4c:	strd	r0, [r4, #48]	; 0x30
   14c50:	ldrb	r0, [r5, #48]	; 0x30
   14c54:	tst	r0, #4
   14c58:	bne	14c64 <__assert_fail@plt+0x3744>
   14c5c:	str	sl, [r6, #24]
   14c60:	b	14c80 <__assert_fail@plt+0x3760>
   14c64:	ldr	r0, [r6, #28]
   14c68:	ldr	r1, [r6, #52]	; 0x34
   14c6c:	str	r0, [r6, #24]
   14c70:	ldr	r0, [sp, #40]	; 0x28
   14c74:	add	r2, r1, #1
   14c78:	mov	r1, sl
   14c7c:	bl	11250 <memmove@plt>
   14c80:	ldr	r0, [r5, #44]	; 0x2c
   14c84:	ldr	r2, [r5, #48]	; 0x30
   14c88:	ldr	sl, [sp, #28]
   14c8c:	mov	r7, #0
   14c90:	cmp	r0, #0
   14c94:	beq	14d3c <__assert_fail@plt+0x381c>
   14c98:	ands	r0, r2, #1024	; 0x400
   14c9c:	bne	14d3c <__assert_fail@plt+0x381c>
   14ca0:	mov	r0, r5
   14ca4:	mov	r1, r6
   14ca8:	mov	r2, #0
   14cac:	bl	135d8 <__assert_fail@plt+0x20b8>
   14cb0:	strh	r0, [r6, #56]	; 0x38
   14cb4:	ldr	r4, [fp, #-36]	; 0xffffffdc
   14cb8:	cmp	r9, #0
   14cbc:	str	r7, [r6, #8]
   14cc0:	beq	14dbc <__assert_fail@plt+0x389c>
   14cc4:	ldr	r0, [sp, #48]	; 0x30
   14cc8:	str	r6, [r0, #8]
   14ccc:	movw	r0, #10000	; 0x2710
   14cd0:	cmp	r4, r0
   14cd4:	bne	14dcc <__assert_fail@plt+0x38ac>
   14cd8:	ldr	r0, [sp, #20]
   14cdc:	ldr	r0, [r0]
   14ce0:	cmp	r0, #0
   14ce4:	bne	14dcc <__assert_fail@plt+0x38ac>
   14ce8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14cec:	mov	r0, sl
   14cf0:	bl	155c0 <__assert_fail@plt+0x40a0>
   14cf4:	mov	r1, #0
   14cf8:	str	r1, [sp, #8]
   14cfc:	movw	r1, #19778	; 0x4d42
   14d00:	movt	r1, #65363	; 0xff53
   14d04:	cmp	r0, r1
   14d08:	movwne	r1, #26985	; 0x6969
   14d0c:	cmpne	r0, r1
   14d10:	beq	14dcc <__assert_fail@plt+0x38ac>
   14d14:	movw	r1, #6548	; 0x1994
   14d18:	movt	r1, #258	; 0x102
   14d1c:	cmp	r0, r1
   14d20:	movne	r0, #1
   14d24:	strne	r0, [sp, #8]
   14d28:	ldr	r0, [sp, #32]
   14d2c:	add	r4, r4, #1
   14d30:	cmp	r0, r4
   14d34:	bhi	14ddc <__assert_fail@plt+0x38bc>
   14d38:	b	14dec <__assert_fail@plt+0x38cc>
   14d3c:	ldrb	r3, [r8, #18]
   14d40:	mov	r0, #0
   14d44:	tst	r2, #8
   14d48:	mov	r1, #0
   14d4c:	beq	14d70 <__assert_fail@plt+0x3850>
   14d50:	orr	r1, r3, #4
   14d54:	cmp	r1, #4
   14d58:	mov	r1, #0
   14d5c:	beq	14d70 <__assert_fail@plt+0x3850>
   14d60:	eor	r1, r3, #10
   14d64:	and	r2, r2, #16
   14d68:	orrs	r1, r2, r1
   14d6c:	movwne	r1, #1
   14d70:	mov	r2, #11
   14d74:	strh	r2, [r6, #56]	; 0x38
   14d78:	sub	r2, r3, #1
   14d7c:	uxtb	r3, r2
   14d80:	cmp	r3, #11
   14d84:	bhi	14d98 <__assert_fail@plt+0x3878>
   14d88:	sxtb	r0, r2
   14d8c:	movw	r2, #49584	; 0xc1b0
   14d90:	movt	r2, #1
   14d94:	ldr	r0, [r2, r0, lsl #2]
   14d98:	cmp	r1, #0
   14d9c:	str	r0, [r6, #80]	; 0x50
   14da0:	mov	r0, #2
   14da4:	movwne	r0, #1
   14da8:	stm	r4, {r0, r7}
   14dac:	ldr	r4, [fp, #-36]	; 0xffffffdc
   14db0:	cmp	r9, #0
   14db4:	str	r7, [r6, #8]
   14db8:	bne	14cc4 <__assert_fail@plt+0x37a4>
   14dbc:	mov	r9, r6
   14dc0:	movw	r0, #10000	; 0x2710
   14dc4:	cmp	r4, r0
   14dc8:	beq	14cd8 <__assert_fail@plt+0x37b8>
   14dcc:	ldr	r0, [sp, #32]
   14dd0:	add	r4, r4, #1
   14dd4:	cmp	r0, r4
   14dd8:	bls	14dec <__assert_fail@plt+0x38cc>
   14ddc:	str	r6, [sp, #48]	; 0x30
   14de0:	ldr	r6, [sl, #12]
   14de4:	cmp	r6, #0
   14de8:	bne	14ad0 <__assert_fail@plt+0x35b0>
   14dec:	ldr	r0, [sp, #16]
   14df0:	ldr	r7, [sp]
   14df4:	ldr	r6, [sp, #8]
   14df8:	tst	r0, #1
   14dfc:	beq	14f18 <__assert_fail@plt+0x39f8>
   14e00:	ldr	r1, [r5, #4]
   14e04:	ldr	r0, [r5, #24]
   14e08:	cmp	r1, #0
   14e0c:	bne	14e24 <__assert_fail@plt+0x3904>
   14e10:	b	14e60 <__assert_fail@plt+0x3940>
   14e14:	str	r0, [r1, #28]
   14e18:	ldr	r1, [r1, #8]
   14e1c:	cmp	r1, #0
   14e20:	beq	14e60 <__assert_fail@plt+0x3940>
   14e24:	ldr	r2, [r1, #24]
   14e28:	add	r3, r1, #168	; 0xa8
   14e2c:	cmp	r2, r3
   14e30:	beq	14e14 <__assert_fail@plt+0x38f4>
   14e34:	ldr	r3, [r1, #28]
   14e38:	sub	r2, r2, r3
   14e3c:	add	r2, r0, r2
   14e40:	str	r2, [r1, #24]
   14e44:	b	14e14 <__assert_fail@plt+0x38f4>
   14e48:	mov	r4, #0
   14e4c:	mov	r6, #0
   14e50:	ldrb	r0, [r5, #48]	; 0x30
   14e54:	tst	r0, #4
   14e58:	bne	14f24 <__assert_fail@plt+0x3a04>
   14e5c:	b	14f4c <__assert_fail@plt+0x3a2c>
   14e60:	ldr	r1, [r9, #48]	; 0x30
   14e64:	cmp	r1, #0
   14e68:	bmi	14f18 <__assert_fail@plt+0x39f8>
   14e6c:	mov	r1, r9
   14e70:	ldr	r2, [r1, #24]
   14e74:	add	r3, r1, #168	; 0xa8
   14e78:	cmp	r2, r3
   14e7c:	bne	14eb0 <__assert_fail@plt+0x3990>
   14e80:	str	r0, [r1, #28]
   14e84:	ldr	r2, [r1, #8]
   14e88:	cmp	r2, #0
   14e8c:	ldreq	r2, [r1, #4]
   14e90:	ldr	r1, [r2, #48]	; 0x30
   14e94:	cmn	r1, #1
   14e98:	mov	r1, r2
   14e9c:	ble	14f18 <__assert_fail@plt+0x39f8>
   14ea0:	ldr	r2, [r1, #24]
   14ea4:	add	r3, r1, #168	; 0xa8
   14ea8:	cmp	r2, r3
   14eac:	beq	14e80 <__assert_fail@plt+0x3960>
   14eb0:	ldr	r3, [r1, #28]
   14eb4:	sub	r2, r2, r3
   14eb8:	add	r2, r0, r2
   14ebc:	str	r2, [r1, #24]
   14ec0:	b	14e80 <__assert_fail@plt+0x3960>
   14ec4:	ldr	r0, [sp, #36]	; 0x24
   14ec8:	ldr	r0, [r0]
   14ecc:	cmp	r0, #0
   14ed0:	beq	14eec <__assert_fail@plt+0x39cc>
   14ed4:	str	r0, [sl, #32]
   14ed8:	ldr	r0, [sp, #12]
   14edc:	orrs	r0, r0, r4
   14ee0:	mov	r0, #4
   14ee4:	movwne	r0, #7
   14ee8:	strh	r0, [sl, #56]	; 0x38
   14eec:	ldr	r0, [sl, #12]
   14ef0:	ldr	r6, [sp, #8]
   14ef4:	cmp	r0, #0
   14ef8:	beq	14f08 <__assert_fail@plt+0x39e8>
   14efc:	bl	114fc <closedir@plt>
   14f00:	mov	r0, #0
   14f04:	str	r0, [sl, #12]
   14f08:	ldr	r0, [sp, #16]
   14f0c:	ldr	r7, [sp]
   14f10:	tst	r0, #1
   14f14:	bne	14e00 <__assert_fail@plt+0x38e0>
   14f18:	ldrb	r0, [r5, #48]	; 0x30
   14f1c:	tst	r0, #4
   14f20:	beq	14f4c <__assert_fail@plt+0x3a2c>
   14f24:	ldr	r2, [sp, #40]	; 0x28
   14f28:	ldr	r0, [r5, #36]	; 0x24
   14f2c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14f30:	cmp	r3, r0
   14f34:	sub	r1, r2, #1
   14f38:	mov	r0, #0
   14f3c:	moveq	r2, r1
   14f40:	cmp	r4, #0
   14f44:	moveq	r2, r1
   14f48:	strb	r0, [r2]
   14f4c:	ldr	r0, [sp, #12]
   14f50:	cmp	r0, #0
   14f54:	movwne	r0, #1
   14f58:	orrs	r0, r0, r7
   14f5c:	beq	14fc4 <__assert_fail@plt+0x3aa4>
   14f60:	cmp	r4, #0
   14f64:	bne	15004 <__assert_fail@plt+0x3ae4>
   14f68:	ldr	r0, [sp, #4]
   14f6c:	cmp	r0, #3
   14f70:	bne	14f88 <__assert_fail@plt+0x3a68>
   14f74:	ldrh	r0, [sl, #56]	; 0x38
   14f78:	cmp	r0, #4
   14f7c:	cmpne	r0, #7
   14f80:	movne	r0, #6
   14f84:	strhne	r0, [sl, #56]	; 0x38
   14f88:	mov	r6, #0
   14f8c:	cmp	r9, #0
   14f90:	bne	14fac <__assert_fail@plt+0x3a8c>
   14f94:	b	1513c <__assert_fail@plt+0x3c1c>
   14f98:	mov	r0, r9
   14f9c:	bl	12f00 <__assert_fail@plt+0x19e0>
   14fa0:	cmp	r4, #0
   14fa4:	mov	r9, r4
   14fa8:	beq	1513c <__assert_fail@plt+0x3c1c>
   14fac:	ldrd	r4, [r9, #8]
   14fb0:	cmp	r5, #0
   14fb4:	beq	14f98 <__assert_fail@plt+0x3a78>
   14fb8:	mov	r0, r5
   14fbc:	bl	114fc <closedir@plt>
   14fc0:	b	14f98 <__assert_fail@plt+0x3a78>
   14fc4:	ldr	r0, [sp, #4]
   14fc8:	cmp	r0, #1
   14fcc:	cmpne	r4, #0
   14fd0:	bne	15004 <__assert_fail@plt+0x3ae4>
   14fd4:	ldr	r0, [sl, #48]	; 0x30
   14fd8:	cmp	r0, #0
   14fdc:	beq	1510c <__assert_fail@plt+0x3bec>
   14fe0:	ldr	r1, [sl, #4]
   14fe4:	movw	r3, #49580	; 0xc1ac
   14fe8:	mov	r0, r5
   14fec:	mvn	r2, #0
   14ff0:	movt	r3, #1
   14ff4:	bl	143e4 <__assert_fail@plt+0x2ec4>
   14ff8:	cmp	r0, #0
   14ffc:	bne	1511c <__assert_fail@plt+0x3bfc>
   15000:	b	14f60 <__assert_fail@plt+0x3a40>
   15004:	tst	r6, #1
   15008:	beq	15040 <__assert_fail@plt+0x3b20>
   1500c:	movw	r0, #21896	; 0x5588
   15010:	mov	r1, r9
   15014:	mov	r2, r4
   15018:	movt	r0, #1
   1501c:	str	r0, [r5, #44]	; 0x2c
   15020:	mov	r0, r5
   15024:	bl	13770 <__assert_fail@plt+0x2250>
   15028:	mov	r6, r0
   1502c:	mov	r0, #0
   15030:	str	r0, [r5, #44]	; 0x2c
   15034:	mov	r0, r6
   15038:	sub	sp, fp, #28
   1503c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15040:	cmp	r4, #2
   15044:	bcc	15078 <__assert_fail@plt+0x3b58>
   15048:	ldr	r0, [sp, #20]
   1504c:	ldr	r0, [r0]
   15050:	cmp	r0, #0
   15054:	beq	15078 <__assert_fail@plt+0x3b58>
   15058:	mov	r0, r5
   1505c:	mov	r1, r9
   15060:	mov	r2, r4
   15064:	bl	13770 <__assert_fail@plt+0x2250>
   15068:	mov	r6, r0
   1506c:	mov	r0, r6
   15070:	sub	sp, fp, #28
   15074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15078:	mov	r6, r9
   1507c:	mov	r0, r6
   15080:	sub	sp, fp, #28
   15084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15088:	mov	r0, r6
   1508c:	bl	12f00 <__assert_fail@plt+0x19e0>
   15090:	ldr	r7, [sp, #28]
   15094:	cmp	r9, #0
   15098:	bne	150b4 <__assert_fail@plt+0x3b94>
   1509c:	b	150cc <__assert_fail@plt+0x3bac>
   150a0:	mov	r0, r9
   150a4:	bl	12f00 <__assert_fail@plt+0x19e0>
   150a8:	cmp	r4, #0
   150ac:	mov	r9, r4
   150b0:	beq	150cc <__assert_fail@plt+0x3bac>
   150b4:	ldrd	r4, [r9, #8]
   150b8:	cmp	r5, #0
   150bc:	beq	150a0 <__assert_fail@plt+0x3b80>
   150c0:	mov	r0, r5
   150c4:	bl	114fc <closedir@plt>
   150c8:	b	150a0 <__assert_fail@plt+0x3b80>
   150cc:	ldr	r0, [r7, #12]
   150d0:	bl	114fc <closedir@plt>
   150d4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   150d8:	mov	r0, #7
   150dc:	mov	r6, #0
   150e0:	strh	r0, [r7, #56]	; 0x38
   150e4:	str	r6, [r7, #12]
   150e8:	ldr	r0, [r1, #48]	; 0x30
   150ec:	orr	r0, r0, #8192	; 0x2000
   150f0:	str	r0, [r1, #48]	; 0x30
   150f4:	ldr	r1, [sp, #36]	; 0x24
   150f8:	mov	r0, #36	; 0x24
   150fc:	str	r0, [r1]
   15100:	mov	r0, r6
   15104:	sub	sp, fp, #28
   15108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1510c:	mov	r0, r5
   15110:	bl	1522c <__assert_fail@plt+0x3d0c>
   15114:	cmp	r0, #0
   15118:	beq	14f60 <__assert_fail@plt+0x3a40>
   1511c:	mov	r0, #7
   15120:	mov	r6, #0
   15124:	cmp	r9, #0
   15128:	strh	r0, [sl, #56]	; 0x38
   1512c:	ldr	r0, [r5, #48]	; 0x30
   15130:	orr	r0, r0, #8192	; 0x2000
   15134:	str	r0, [r5, #48]	; 0x30
   15138:	bne	1515c <__assert_fail@plt+0x3c3c>
   1513c:	mov	r0, r6
   15140:	sub	sp, fp, #28
   15144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15148:	mov	r0, r9
   1514c:	bl	12f00 <__assert_fail@plt+0x19e0>
   15150:	cmp	r4, #0
   15154:	mov	r9, r4
   15158:	beq	1513c <__assert_fail@plt+0x3c1c>
   1515c:	ldrd	r4, [r9, #8]
   15160:	cmp	r5, #0
   15164:	beq	15148 <__assert_fail@plt+0x3c28>
   15168:	mov	r0, r5
   1516c:	bl	114fc <closedir@plt>
   15170:	b	15148 <__assert_fail@plt+0x3c28>
   15174:	mov	r0, r4
   15178:	bl	12f00 <__assert_fail@plt+0x19e0>
   1517c:	ldr	r1, [sp, #36]	; 0x24
   15180:	mov	r0, #0
   15184:	str	r0, [r5, #24]
   15188:	mov	r0, #36	; 0x24
   1518c:	str	r0, [r1]
   15190:	b	151a4 <__assert_fail@plt+0x3c84>
   15194:	ldr	r0, [r5, #24]
   15198:	bl	12f00 <__assert_fail@plt+0x19e0>
   1519c:	mov	r0, #0
   151a0:	str	r0, [r5, #24]
   151a4:	ldr	sl, [sp, #28]
   151a8:	ldr	r0, [sp, #36]	; 0x24
   151ac:	ldr	r4, [r0]
   151b0:	mov	r0, r6
   151b4:	bl	12f00 <__assert_fail@plt+0x19e0>
   151b8:	ldr	r5, [fp, #-44]	; 0xffffffd4
   151bc:	cmp	r9, #0
   151c0:	bne	151dc <__assert_fail@plt+0x3cbc>
   151c4:	b	151f4 <__assert_fail@plt+0x3cd4>
   151c8:	mov	r0, r9
   151cc:	bl	12f00 <__assert_fail@plt+0x19e0>
   151d0:	cmp	r6, #0
   151d4:	mov	r9, r6
   151d8:	beq	151f4 <__assert_fail@plt+0x3cd4>
   151dc:	ldrd	r6, [r9, #8]
   151e0:	cmp	r7, #0
   151e4:	beq	151c8 <__assert_fail@plt+0x3ca8>
   151e8:	mov	r0, r7
   151ec:	bl	114fc <closedir@plt>
   151f0:	b	151c8 <__assert_fail@plt+0x3ca8>
   151f4:	ldr	r0, [sl, #12]
   151f8:	bl	114fc <closedir@plt>
   151fc:	mov	r0, #7
   15200:	mov	r6, #0
   15204:	strh	r0, [sl, #56]	; 0x38
   15208:	str	r6, [sl, #12]
   1520c:	ldr	r0, [r5, #48]	; 0x30
   15210:	orr	r0, r0, #8192	; 0x2000
   15214:	str	r0, [r5, #48]	; 0x30
   15218:	ldr	r0, [sp, #36]	; 0x24
   1521c:	str	r4, [r0]
   15220:	mov	r0, r6
   15224:	sub	sp, fp, #28
   15228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1522c:	push	{r4, r5, fp, lr}
   15230:	add	fp, sp, #8
   15234:	mov	r5, r0
   15238:	ldr	r0, [r0, #48]	; 0x30
   1523c:	mov	r4, #0
   15240:	tst	r0, #4
   15244:	bne	15288 <__assert_fail@plt+0x3d68>
   15248:	tst	r0, #512	; 0x200
   1524c:	bne	15268 <__assert_fail@plt+0x3d48>
   15250:	ldr	r0, [r5, #28]
   15254:	bl	11490 <fchdir@plt>
   15258:	cmp	r0, #0
   1525c:	mov	r4, r0
   15260:	movwne	r4, #1
   15264:	b	15288 <__assert_fail@plt+0x3d68>
   15268:	ldr	r1, [r5, #32]
   1526c:	add	r0, r5, #60	; 0x3c
   15270:	bl	16bbc <__assert_fail@plt+0x569c>
   15274:	cmp	r0, #0
   15278:	bmi	15280 <__assert_fail@plt+0x3d60>
   1527c:	bl	114e4 <close@plt>
   15280:	mvn	r0, #99	; 0x63
   15284:	str	r0, [r5, #32]
   15288:	add	r5, r5, #60	; 0x3c
   1528c:	mov	r0, r5
   15290:	bl	16bb4 <__assert_fail@plt+0x5694>
   15294:	cmp	r0, #0
   15298:	bne	152c0 <__assert_fail@plt+0x3da0>
   1529c:	mov	r0, r5
   152a0:	bl	16c08 <__assert_fail@plt+0x56e8>
   152a4:	cmp	r0, #0
   152a8:	bmi	1528c <__assert_fail@plt+0x3d6c>
   152ac:	bl	114e4 <close@plt>
   152b0:	mov	r0, r5
   152b4:	bl	16bb4 <__assert_fail@plt+0x5694>
   152b8:	cmp	r0, #0
   152bc:	beq	1529c <__assert_fail@plt+0x3d7c>
   152c0:	mov	r0, r4
   152c4:	pop	{r4, r5, fp, pc}
   152c8:	push	{fp, lr}
   152cc:	mov	fp, sp
   152d0:	cmp	r2, #5
   152d4:	bcc	152ec <__assert_fail@plt+0x3dcc>
   152d8:	bl	113d0 <__errno_location@plt>
   152dc:	mov	r1, #22
   152e0:	str	r1, [r0]
   152e4:	mov	r0, #1
   152e8:	pop	{fp, pc}
   152ec:	mov	r0, #0
   152f0:	strh	r2, [r1, #60]	; 0x3c
   152f4:	pop	{fp, pc}
   152f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152fc:	add	fp, sp, #28
   15300:	sub	sp, sp, #4
   15304:	mov	r9, r0
   15308:	mvn	r0, #4096	; 0x1000
   1530c:	tst	r1, r0
   15310:	beq	15330 <__assert_fail@plt+0x3e10>
   15314:	bl	113d0 <__errno_location@plt>
   15318:	mov	r1, #22
   1531c:	mov	r5, #0
   15320:	str	r1, [r0]
   15324:	mov	r0, r5
   15328:	sub	sp, fp, #28
   1532c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15330:	ldr	r8, [r9]
   15334:	mov	r7, r1
   15338:	bl	113d0 <__errno_location@plt>
   1533c:	mov	r5, #0
   15340:	mov	sl, r0
   15344:	str	r5, [r0]
   15348:	ldrb	r0, [r9, #49]	; 0x31
   1534c:	tst	r0, #32
   15350:	bne	15368 <__assert_fail@plt+0x3e48>
   15354:	ldrh	r0, [r8, #56]	; 0x38
   15358:	cmp	r0, #1
   1535c:	beq	15374 <__assert_fail@plt+0x3e54>
   15360:	cmp	r0, #9
   15364:	ldreq	r5, [r8, #8]
   15368:	mov	r0, r5
   1536c:	sub	sp, fp, #28
   15370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15374:	ldr	r6, [r9, #4]
   15378:	cmp	r6, #0
   1537c:	bne	15398 <__assert_fail@plt+0x3e78>
   15380:	b	153b4 <__assert_fail@plt+0x3e94>
   15384:	mov	r0, r6
   15388:	bl	12f00 <__assert_fail@plt+0x19e0>
   1538c:	cmp	r4, #0
   15390:	mov	r6, r4
   15394:	beq	153b4 <__assert_fail@plt+0x3e94>
   15398:	ldr	r1, [r6, #12]
   1539c:	ldr	r4, [r6, #8]
   153a0:	cmp	r1, #0
   153a4:	beq	15384 <__assert_fail@plt+0x3e64>
   153a8:	mov	r0, r1
   153ac:	bl	114fc <closedir@plt>
   153b0:	b	15384 <__assert_fail@plt+0x3e64>
   153b4:	mov	r4, #1
   153b8:	cmp	r7, #4096	; 0x1000
   153bc:	bne	153d0 <__assert_fail@plt+0x3eb0>
   153c0:	ldr	r0, [r9, #48]	; 0x30
   153c4:	mov	r4, #2
   153c8:	orr	r0, r0, #4096	; 0x1000
   153cc:	str	r0, [r9, #48]	; 0x30
   153d0:	ldr	r0, [r8, #48]	; 0x30
   153d4:	cmp	r0, #0
   153d8:	bne	15430 <__assert_fail@plt+0x3f10>
   153dc:	ldr	r0, [r8, #24]
   153e0:	ldrb	r0, [r0]
   153e4:	cmp	r0, #47	; 0x2f
   153e8:	beq	15430 <__assert_fail@plt+0x3f10>
   153ec:	ldr	r0, [r9, #48]	; 0x30
   153f0:	tst	r0, #4
   153f4:	bne	15430 <__assert_fail@plt+0x3f10>
   153f8:	mov	r1, #32768	; 0x8000
   153fc:	tst	r0, #512	; 0x200
   15400:	and	r1, r1, r0, lsl #11
   15404:	orr	r1, r1, #18688	; 0x4900
   15408:	orr	r2, r1, #524288	; 0x80000
   1540c:	bne	15450 <__assert_fail@plt+0x3f30>
   15410:	movw	r0, #49581	; 0xc1ad
   15414:	mov	r1, r2
   15418:	movt	r0, #1
   1541c:	bl	1abc0 <__assert_fail@plt+0x96a0>
   15420:	mov	r8, r0
   15424:	cmn	r0, #1
   15428:	bgt	1546c <__assert_fail@plt+0x3f4c>
   1542c:	b	154b4 <__assert_fail@plt+0x3f94>
   15430:	mov	r0, r9
   15434:	mov	r1, r4
   15438:	bl	14694 <__assert_fail@plt+0x3174>
   1543c:	mov	r5, r0
   15440:	str	r0, [r9, #4]
   15444:	mov	r0, r5
   15448:	sub	sp, fp, #28
   1544c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15450:	ldr	r0, [r9, #32]
   15454:	movw	r1, #49581	; 0xc1ad
   15458:	movt	r1, #1
   1545c:	bl	16cb4 <__assert_fail@plt+0x5794>
   15460:	mov	r8, r0
   15464:	cmn	r0, #1
   15468:	ble	154b4 <__assert_fail@plt+0x3f94>
   1546c:	mov	r0, r9
   15470:	mov	r1, r4
   15474:	bl	14694 <__assert_fail@plt+0x3174>
   15478:	str	r0, [r9, #4]
   1547c:	ldrb	r0, [r9, #49]	; 0x31
   15480:	tst	r0, #2
   15484:	bne	154c8 <__assert_fail@plt+0x3fa8>
   15488:	mov	r0, r8
   1548c:	bl	11490 <fchdir@plt>
   15490:	cmp	r0, #0
   15494:	beq	15504 <__assert_fail@plt+0x3fe4>
   15498:	ldr	r4, [sl]
   1549c:	mov	r0, r8
   154a0:	bl	114e4 <close@plt>
   154a4:	str	r4, [sl]
   154a8:	mov	r0, r5
   154ac:	sub	sp, fp, #28
   154b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154b4:	mov	r5, #0
   154b8:	str	r5, [r9, #4]
   154bc:	mov	r0, r5
   154c0:	sub	sp, fp, #28
   154c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154c8:	ldr	r1, [r9, #32]
   154cc:	cmp	r1, r8
   154d0:	bne	154dc <__assert_fail@plt+0x3fbc>
   154d4:	cmn	r1, #100	; 0x64
   154d8:	bne	1551c <__assert_fail@plt+0x3ffc>
   154dc:	add	r0, r9, #60	; 0x3c
   154e0:	bl	16bbc <__assert_fail@plt+0x569c>
   154e4:	cmp	r0, #0
   154e8:	bmi	154f0 <__assert_fail@plt+0x3fd0>
   154ec:	bl	114e4 <close@plt>
   154f0:	str	r8, [r9, #32]
   154f4:	ldr	r5, [r9, #4]
   154f8:	mov	r0, r5
   154fc:	sub	sp, fp, #28
   15500:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15504:	mov	r0, r8
   15508:	bl	114e4 <close@plt>
   1550c:	ldr	r5, [r9, #4]
   15510:	mov	r0, r5
   15514:	sub	sp, fp, #28
   15518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1551c:	bl	114d8 <abort@plt>
   15520:	push	{fp, lr}
   15524:	mov	fp, sp
   15528:	mov	r2, r1
   1552c:	ldrd	r0, [r0, #8]
   15530:	mov	r3, #0
   15534:	bl	1aef0 <__assert_fail@plt+0x99d0>
   15538:	mov	r0, r2
   1553c:	pop	{fp, pc}
   15540:	push	{r4, r5, fp, lr}
   15544:	add	fp, sp, #8
   15548:	ldrd	r2, [r1, #8]
   1554c:	ldrd	r4, [r0, #8]
   15550:	eor	r3, r5, r3
   15554:	eor	r2, r4, r2
   15558:	orrs	r2, r2, r3
   1555c:	mov	r2, #0
   15560:	bne	15580 <__assert_fail@plt+0x4060>
   15564:	ldrd	r2, [r1]
   15568:	ldrd	r0, [r0]
   1556c:	eor	r1, r1, r3
   15570:	eor	r0, r0, r2
   15574:	orr	r0, r0, r1
   15578:	clz	r0, r0
   1557c:	lsr	r2, r0, #5
   15580:	mov	r0, r2
   15584:	pop	{r4, r5, fp, pc}
   15588:	push	{r4, r5, fp, lr}
   1558c:	add	fp, sp, #8
   15590:	ldr	r0, [r0]
   15594:	ldrd	r2, [r0, #160]	; 0xa0
   15598:	ldr	r0, [r1]
   1559c:	ldrd	r4, [r0, #160]	; 0xa0
   155a0:	mov	r0, #0
   155a4:	subs	r1, r4, r2
   155a8:	sbcs	r1, r5, r3
   155ac:	movwcc	r0, #1
   155b0:	subs	r1, r2, r4
   155b4:	sbcs	r1, r3, r5
   155b8:	subcc	r0, r0, #1
   155bc:	pop	{r4, r5, fp, pc}
   155c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   155c4:	add	fp, sp, #24
   155c8:	sub	sp, sp, #96	; 0x60
   155cc:	ldr	r7, [r0, #44]	; 0x2c
   155d0:	mov	r4, r0
   155d4:	mov	r5, #0
   155d8:	ldrb	r0, [r7, #49]	; 0x31
   155dc:	tst	r0, #2
   155e0:	beq	15690 <__assert_fail@plt+0x4170>
   155e4:	ldr	r6, [r7, #52]	; 0x34
   155e8:	mov	r9, r1
   155ec:	cmp	r6, #0
   155f0:	bne	15630 <__assert_fail@plt+0x4110>
   155f4:	movw	r0, #12032	; 0x2f00
   155f8:	movw	r2, #22268	; 0x56fc
   155fc:	movw	r3, #22300	; 0x571c
   15600:	mov	r1, #0
   15604:	mov	r8, #0
   15608:	movt	r0, #1
   1560c:	movt	r2, #1
   15610:	movt	r3, #1
   15614:	str	r0, [sp]
   15618:	mov	r0, #13
   1561c:	bl	15c34 <__assert_fail@plt+0x4714>
   15620:	mov	r6, r0
   15624:	cmp	r0, #0
   15628:	str	r0, [r7, #52]	; 0x34
   1562c:	beq	15670 <__assert_fail@plt+0x4150>
   15630:	ldrd	r0, [r4, #64]	; 0x40
   15634:	str	r1, [sp, #12]
   15638:	str	r0, [sp, #8]
   1563c:	add	r1, sp, #8
   15640:	mov	r0, r6
   15644:	bl	15960 <__assert_fail@plt+0x4440>
   15648:	cmp	r0, #0
   1564c:	beq	15660 <__assert_fail@plt+0x4140>
   15650:	ldr	r5, [r0, #8]
   15654:	mov	r0, r5
   15658:	sub	sp, fp, #24
   1565c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15660:	mov	r8, #1
   15664:	cmp	r9, #0
   15668:	bpl	1567c <__assert_fail@plt+0x415c>
   1566c:	b	15690 <__assert_fail@plt+0x4170>
   15670:	mov	r6, #0
   15674:	cmp	r9, #0
   15678:	bmi	15690 <__assert_fail@plt+0x4170>
   1567c:	add	r1, sp, #8
   15680:	mov	r0, r9
   15684:	bl	111e4 <fstatfs64@plt>
   15688:	cmp	r0, #0
   1568c:	beq	1569c <__assert_fail@plt+0x417c>
   15690:	mov	r0, r5
   15694:	sub	sp, fp, #24
   15698:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1569c:	cmp	r8, #0
   156a0:	beq	156ec <__assert_fail@plt+0x41cc>
   156a4:	mov	r0, #16
   156a8:	bl	1a74c <__assert_fail@plt+0x922c>
   156ac:	cmp	r0, #0
   156b0:	beq	156ec <__assert_fail@plt+0x41cc>
   156b4:	mov	r5, r0
   156b8:	ldrd	r0, [r4, #64]	; 0x40
   156bc:	ldr	r2, [sp, #8]
   156c0:	stm	r5, {r0, r1, r2}
   156c4:	mov	r0, r6
   156c8:	mov	r1, r5
   156cc:	bl	16890 <__assert_fail@plt+0x5370>
   156d0:	cmp	r0, #0
   156d4:	beq	156e4 <__assert_fail@plt+0x41c4>
   156d8:	cmp	r0, r5
   156dc:	beq	156ec <__assert_fail@plt+0x41cc>
   156e0:	bl	114d8 <abort@plt>
   156e4:	mov	r0, r5
   156e8:	bl	12f00 <__assert_fail@plt+0x19e0>
   156ec:	ldr	r5, [sp, #8]
   156f0:	mov	r0, r5
   156f4:	sub	sp, fp, #24
   156f8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   156fc:	push	{fp, lr}
   15700:	mov	fp, sp
   15704:	mov	r2, r1
   15708:	ldrd	r0, [r0]
   1570c:	mov	r3, #0
   15710:	bl	1aef0 <__assert_fail@plt+0x99d0>
   15714:	mov	r0, r2
   15718:	pop	{fp, pc}
   1571c:	ldrd	r2, [r1]
   15720:	ldrd	r0, [r0]
   15724:	eor	r1, r1, r3
   15728:	eor	r0, r0, r2
   1572c:	orr	r0, r0, r1
   15730:	clz	r0, r0
   15734:	lsr	r0, r0, #5
   15738:	bx	lr
   1573c:	andeq	r0, r0, r0
   15740:	ldr	r0, [r0, #8]
   15744:	bx	lr
   15748:	ldr	r0, [r0, #12]
   1574c:	bx	lr
   15750:	ldr	r0, [r0, #16]
   15754:	bx	lr
   15758:	ldm	r0, {r2, ip}
   1575c:	mov	r0, #0
   15760:	cmp	r2, ip
   15764:	bxcs	lr
   15768:	mov	r0, #0
   1576c:	ldr	r1, [r2]
   15770:	cmp	r1, #0
   15774:	bne	15790 <__assert_fail@plt+0x4270>
   15778:	add	r2, r2, #8
   1577c:	cmp	r2, ip
   15780:	bcs	157bc <__assert_fail@plt+0x429c>
   15784:	ldr	r1, [r2]
   15788:	cmp	r1, #0
   1578c:	beq	15778 <__assert_fail@plt+0x4258>
   15790:	mov	r3, #0
   15794:	mov	r1, r2
   15798:	ldr	r1, [r1, #4]
   1579c:	add	r3, r3, #1
   157a0:	cmp	r1, #0
   157a4:	bne	15798 <__assert_fail@plt+0x4278>
   157a8:	cmp	r3, r0
   157ac:	movhi	r0, r3
   157b0:	add	r2, r2, #8
   157b4:	cmp	r2, ip
   157b8:	bcc	15784 <__assert_fail@plt+0x4264>
   157bc:	bx	lr
   157c0:	push	{fp, lr}
   157c4:	mov	fp, sp
   157c8:	ldm	r0, {r3, ip}
   157cc:	mov	lr, #0
   157d0:	mov	r1, #0
   157d4:	cmp	r3, ip
   157d8:	bcs	1582c <__assert_fail@plt+0x430c>
   157dc:	mov	r1, #0
   157e0:	mov	lr, #0
   157e4:	ldr	r2, [r3]
   157e8:	cmp	r2, #0
   157ec:	bne	15808 <__assert_fail@plt+0x42e8>
   157f0:	add	r3, r3, #8
   157f4:	cmp	r3, ip
   157f8:	bcs	1582c <__assert_fail@plt+0x430c>
   157fc:	ldr	r2, [r3]
   15800:	cmp	r2, #0
   15804:	beq	157f0 <__assert_fail@plt+0x42d0>
   15808:	mov	r2, r3
   1580c:	ldr	r2, [r2, #4]
   15810:	add	r1, r1, #1
   15814:	cmp	r2, #0
   15818:	bne	1580c <__assert_fail@plt+0x42ec>
   1581c:	add	lr, lr, #1
   15820:	add	r3, r3, #8
   15824:	cmp	r3, ip
   15828:	bcc	157fc <__assert_fail@plt+0x42dc>
   1582c:	ldr	r2, [r0, #12]
   15830:	cmp	lr, r2
   15834:	bne	1584c <__assert_fail@plt+0x432c>
   15838:	ldr	r2, [r0, #16]
   1583c:	mov	r0, #1
   15840:	cmp	r1, r2
   15844:	movne	r0, #0
   15848:	pop	{fp, pc}
   1584c:	mov	r0, #0
   15850:	pop	{fp, pc}
   15854:	nop	{0}
   15858:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1585c:	add	fp, sp, #24
   15860:	sub	sp, sp, #8
   15864:	ldr	r6, [r0]
   15868:	ldmib	r0, {r2, r7, r8}
   1586c:	ldr	r3, [r0, #16]
   15870:	mov	r4, r1
   15874:	mov	r5, #0
   15878:	cmp	r6, r2
   1587c:	bcs	158d4 <__assert_fail@plt+0x43b4>
   15880:	mov	r5, #0
   15884:	ldr	r0, [r6]
   15888:	cmp	r0, #0
   1588c:	bne	158a8 <__assert_fail@plt+0x4388>
   15890:	add	r6, r6, #8
   15894:	cmp	r6, r2
   15898:	bcs	158d4 <__assert_fail@plt+0x43b4>
   1589c:	ldr	r0, [r6]
   158a0:	cmp	r0, #0
   158a4:	beq	15890 <__assert_fail@plt+0x4370>
   158a8:	mov	r0, #0
   158ac:	mov	r1, r6
   158b0:	ldr	r1, [r1, #4]
   158b4:	add	r0, r0, #1
   158b8:	cmp	r1, #0
   158bc:	bne	158b0 <__assert_fail@plt+0x4390>
   158c0:	cmp	r0, r5
   158c4:	movhi	r5, r0
   158c8:	add	r6, r6, #8
   158cc:	cmp	r6, r2
   158d0:	bcc	1589c <__assert_fail@plt+0x437c>
   158d4:	movw	r2, #49632	; 0xc1e0
   158d8:	mov	r0, r4
   158dc:	mov	r1, #1
   158e0:	movt	r2, #1
   158e4:	bl	1140c <__fprintf_chk@plt>
   158e8:	movw	r2, #49656	; 0xc1f8
   158ec:	mov	r0, r4
   158f0:	mov	r1, #1
   158f4:	mov	r3, r7
   158f8:	movt	r2, #1
   158fc:	bl	1140c <__fprintf_chk@plt>
   15900:	vmov	s0, r8
   15904:	vldr	d16, [pc, #76]	; 15958 <__assert_fail@plt+0x4438>
   15908:	movw	r2, #49680	; 0xc210
   1590c:	mov	r0, r4
   15910:	mov	r1, #1
   15914:	mov	r3, r8
   15918:	movt	r2, #1
   1591c:	vcvt.f64.u32	d17, s0
   15920:	vmov	s0, r7
   15924:	vcvt.f64.u32	d18, s0
   15928:	vmul.f64	d16, d17, d16
   1592c:	vdiv.f64	d16, d16, d18
   15930:	vstr	d16, [sp]
   15934:	bl	1140c <__fprintf_chk@plt>
   15938:	movw	r2, #49713	; 0xc231
   1593c:	mov	r0, r4
   15940:	mov	r1, #1
   15944:	mov	r3, r5
   15948:	movt	r2, #1
   1594c:	sub	sp, fp, #24
   15950:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15954:	b	1140c <__fprintf_chk@plt>
   15958:	andeq	r0, r0, r0
   1595c:	subsmi	r0, r9, r0
   15960:	push	{r4, r5, r6, r7, fp, lr}
   15964:	add	fp, sp, #16
   15968:	mov	r4, r1
   1596c:	ldr	r1, [r0, #8]
   15970:	ldr	r2, [r0, #24]
   15974:	mov	r5, r0
   15978:	mov	r0, r4
   1597c:	blx	r2
   15980:	ldr	r1, [r5, #8]
   15984:	cmp	r0, r1
   15988:	bcs	159f0 <__assert_fail@plt+0x44d0>
   1598c:	ldr	r7, [r5]
   15990:	mov	r6, #0
   15994:	ldr	r1, [r7, r0, lsl #3]!
   15998:	cmp	r1, #0
   1599c:	cmpne	r7, #0
   159a0:	bne	159d0 <__assert_fail@plt+0x44b0>
   159a4:	mov	r0, r6
   159a8:	pop	{r4, r5, r6, r7, fp, pc}
   159ac:	ldr	r2, [r5, #28]
   159b0:	mov	r0, r4
   159b4:	blx	r2
   159b8:	cmp	r0, #0
   159bc:	bne	159e4 <__assert_fail@plt+0x44c4>
   159c0:	ldr	r7, [r7, #4]
   159c4:	cmp	r7, #0
   159c8:	beq	159a4 <__assert_fail@plt+0x4484>
   159cc:	ldr	r1, [r7]
   159d0:	cmp	r1, r4
   159d4:	bne	159ac <__assert_fail@plt+0x448c>
   159d8:	mov	r6, r4
   159dc:	mov	r0, r6
   159e0:	pop	{r4, r5, r6, r7, fp, pc}
   159e4:	ldr	r6, [r7]
   159e8:	mov	r0, r6
   159ec:	pop	{r4, r5, r6, r7, fp, pc}
   159f0:	bl	114d8 <abort@plt>
   159f4:	push	{fp, lr}
   159f8:	mov	fp, sp
   159fc:	ldr	r1, [r0, #16]
   15a00:	cmp	r1, #0
   15a04:	beq	15a24 <__assert_fail@plt+0x4504>
   15a08:	ldm	r0, {r1, r2}
   15a0c:	cmp	r1, r2
   15a10:	bcs	15a2c <__assert_fail@plt+0x450c>
   15a14:	ldr	r0, [r1], #8
   15a18:	cmp	r0, #0
   15a1c:	beq	15a0c <__assert_fail@plt+0x44ec>
   15a20:	pop	{fp, pc}
   15a24:	mov	r0, #0
   15a28:	pop	{fp, pc}
   15a2c:	bl	114d8 <abort@plt>
   15a30:	push	{r4, r5, fp, lr}
   15a34:	add	fp, sp, #8
   15a38:	mov	r5, r1
   15a3c:	ldr	r1, [r0, #8]
   15a40:	ldr	r2, [r0, #24]
   15a44:	mov	r4, r0
   15a48:	mov	r0, r5
   15a4c:	blx	r2
   15a50:	ldr	r1, [r4, #8]
   15a54:	cmp	r0, r1
   15a58:	bcs	15abc <__assert_fail@plt+0x459c>
   15a5c:	ldr	r1, [r4]
   15a60:	add	r2, r1, r0, lsl #3
   15a64:	ldr	r3, [r2]
   15a68:	ldr	r2, [r2, #4]
   15a6c:	cmp	r3, r5
   15a70:	beq	15a80 <__assert_fail@plt+0x4560>
   15a74:	cmp	r2, #0
   15a78:	bne	15a64 <__assert_fail@plt+0x4544>
   15a7c:	b	15a90 <__assert_fail@plt+0x4570>
   15a80:	cmp	r2, #0
   15a84:	beq	15a90 <__assert_fail@plt+0x4570>
   15a88:	ldr	r0, [r2]
   15a8c:	pop	{r4, r5, fp, pc}
   15a90:	ldr	r2, [r4, #4]
   15a94:	add	r0, r1, r0, lsl #3
   15a98:	add	r1, r0, #8
   15a9c:	cmp	r1, r2
   15aa0:	bcs	15ab4 <__assert_fail@plt+0x4594>
   15aa4:	ldr	r0, [r1], #8
   15aa8:	cmp	r0, #0
   15aac:	beq	15a9c <__assert_fail@plt+0x457c>
   15ab0:	pop	{r4, r5, fp, pc}
   15ab4:	mov	r0, #0
   15ab8:	pop	{r4, r5, fp, pc}
   15abc:	bl	114d8 <abort@plt>
   15ac0:	push	{r4, r5, fp, lr}
   15ac4:	add	fp, sp, #8
   15ac8:	ldm	r0, {r5, lr}
   15acc:	mov	ip, r0
   15ad0:	mov	r0, #0
   15ad4:	cmp	r5, lr
   15ad8:	popcs	{r4, r5, fp, pc}
   15adc:	mov	r0, #0
   15ae0:	ldr	r3, [r5]
   15ae4:	cmp	r3, #0
   15ae8:	cmpne	r5, #0
   15aec:	beq	15af8 <__assert_fail@plt+0x45d8>
   15af0:	b	15b14 <__assert_fail@plt+0x45f4>
   15af4:	ldr	lr, [ip, #4]
   15af8:	add	r5, r5, #8
   15afc:	cmp	r5, lr
   15b00:	bcs	15b3c <__assert_fail@plt+0x461c>
   15b04:	ldr	r3, [r5]
   15b08:	cmp	r3, #0
   15b0c:	cmpne	r5, #0
   15b10:	beq	15af8 <__assert_fail@plt+0x45d8>
   15b14:	mov	r3, r5
   15b18:	cmp	r0, r2
   15b1c:	bcs	15b3c <__assert_fail@plt+0x461c>
   15b20:	ldr	r4, [r3]
   15b24:	str	r4, [r1, r0, lsl #2]
   15b28:	add	r0, r0, #1
   15b2c:	ldr	r3, [r3, #4]
   15b30:	cmp	r3, #0
   15b34:	bne	15b18 <__assert_fail@plt+0x45f8>
   15b38:	b	15af4 <__assert_fail@plt+0x45d4>
   15b3c:	pop	{r4, r5, fp, pc}
   15b40:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15b44:	add	fp, sp, #24
   15b48:	mov	r5, r1
   15b4c:	ldr	r4, [r0]
   15b50:	ldr	r1, [r0, #4]
   15b54:	mov	r6, #0
   15b58:	cmp	r4, r1
   15b5c:	bcs	15bd8 <__assert_fail@plt+0x46b8>
   15b60:	mov	r9, r2
   15b64:	mov	r8, r0
   15b68:	mov	r6, #0
   15b6c:	ldr	r0, [r4]
   15b70:	cmp	r0, #0
   15b74:	cmpne	r4, #0
   15b78:	beq	15b84 <__assert_fail@plt+0x4664>
   15b7c:	b	15ba0 <__assert_fail@plt+0x4680>
   15b80:	ldr	r1, [r8, #4]
   15b84:	add	r4, r4, #8
   15b88:	cmp	r4, r1
   15b8c:	bcs	15bd8 <__assert_fail@plt+0x46b8>
   15b90:	ldr	r0, [r4]
   15b94:	cmp	r0, #0
   15b98:	cmpne	r4, #0
   15b9c:	beq	15b84 <__assert_fail@plt+0x4664>
   15ba0:	mov	r1, r9
   15ba4:	blx	r5
   15ba8:	cmp	r0, #0
   15bac:	beq	15bd8 <__assert_fail@plt+0x46b8>
   15bb0:	mov	r7, r4
   15bb4:	ldr	r7, [r7, #4]
   15bb8:	add	r6, r6, #1
   15bbc:	cmp	r7, #0
   15bc0:	beq	15b80 <__assert_fail@plt+0x4660>
   15bc4:	ldr	r0, [r7]
   15bc8:	mov	r1, r9
   15bcc:	blx	r5
   15bd0:	cmp	r0, #0
   15bd4:	bne	15bb4 <__assert_fail@plt+0x4694>
   15bd8:	mov	r0, r6
   15bdc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15be0:	ldrb	r2, [r0]
   15be4:	cmp	r2, #0
   15be8:	moveq	r0, #0
   15bec:	bxeq	lr
   15bf0:	add	r3, r0, #1
   15bf4:	mov	r0, #0
   15bf8:	rsb	r0, r0, r0, lsl #5
   15bfc:	uxtab	r0, r0, r2
   15c00:	udiv	r2, r0, r1
   15c04:	mls	r0, r2, r1, r0
   15c08:	ldrb	r2, [r3], #1
   15c0c:	cmp	r2, #0
   15c10:	bne	15bf8 <__assert_fail@plt+0x46d8>
   15c14:	bx	lr
   15c18:	movw	r1, #49744	; 0xc250
   15c1c:	movt	r1, #1
   15c20:	vld1.32	{d16-d17}, [r1]!
   15c24:	ldr	r1, [r1]
   15c28:	vst1.32	{d16-d17}, [r0]!
   15c2c:	str	r1, [r0]
   15c30:	bx	lr
   15c34:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15c38:	add	fp, sp, #24
   15c3c:	movw	r9, #24168	; 0x5e68
   15c40:	cmp	r3, #0
   15c44:	movw	r5, #24148	; 0x5e54
   15c48:	mov	r6, r0
   15c4c:	mov	r0, #40	; 0x28
   15c50:	mov	r7, r1
   15c54:	movt	r9, #1
   15c58:	movne	r9, r3
   15c5c:	cmp	r2, #0
   15c60:	movt	r5, #1
   15c64:	movne	r5, r2
   15c68:	bl	1a74c <__assert_fail@plt+0x922c>
   15c6c:	mov	r8, #0
   15c70:	cmp	r0, #0
   15c74:	beq	15e3c <__assert_fail@plt+0x491c>
   15c78:	mov	r4, r0
   15c7c:	movw	r0, #49744	; 0xc250
   15c80:	cmp	r7, #0
   15c84:	movt	r0, #1
   15c88:	moveq	r7, r0
   15c8c:	cmp	r7, r0
   15c90:	str	r7, [r4, #20]
   15c94:	beq	15d10 <__assert_fail@plt+0x47f0>
   15c98:	vldr	s2, [pc, #420]	; 15e44 <__assert_fail@plt+0x4924>
   15c9c:	vldr	s0, [r7, #8]
   15ca0:	vcmpe.f32	s0, s2
   15ca4:	vmrs	APSR_nzcv, fpscr
   15ca8:	ble	15dbc <__assert_fail@plt+0x489c>
   15cac:	vldr	s4, [pc, #404]	; 15e48 <__assert_fail@plt+0x4928>
   15cb0:	vcmpe.f32	s0, s4
   15cb4:	vmrs	APSR_nzcv, fpscr
   15cb8:	bpl	15dbc <__assert_fail@plt+0x489c>
   15cbc:	vldr	s4, [pc, #392]	; 15e4c <__assert_fail@plt+0x492c>
   15cc0:	vldr	s6, [r7, #12]
   15cc4:	vcmpe.f32	s6, s4
   15cc8:	vmrs	APSR_nzcv, fpscr
   15ccc:	ble	15dbc <__assert_fail@plt+0x489c>
   15cd0:	vldr	s4, [r7]
   15cd4:	vcmpe.f32	s4, #0.0
   15cd8:	vmrs	APSR_nzcv, fpscr
   15cdc:	blt	15dbc <__assert_fail@plt+0x489c>
   15ce0:	vadd.f32	s2, s4, s2
   15ce4:	vcmpe.f32	s2, s0
   15ce8:	vmrs	APSR_nzcv, fpscr
   15cec:	bpl	15dbc <__assert_fail@plt+0x489c>
   15cf0:	vldr	s0, [r7, #4]
   15cf4:	vmov.f32	s4, #112	; 0x3f800000  1.0
   15cf8:	vcmpe.f32	s0, s4
   15cfc:	vmrs	APSR_nzcv, fpscr
   15d00:	bhi	15dbc <__assert_fail@plt+0x489c>
   15d04:	vcmpe.f32	s2, s0
   15d08:	vmrs	APSR_nzcv, fpscr
   15d0c:	bpl	15dbc <__assert_fail@plt+0x489c>
   15d10:	ldrb	r0, [r7, #16]
   15d14:	cmp	r0, #0
   15d18:	bne	15d44 <__assert_fail@plt+0x4824>
   15d1c:	vmov	s2, r6
   15d20:	vldr	s0, [r7, #8]
   15d24:	vldr	s4, [pc, #292]	; 15e50 <__assert_fail@plt+0x4930>
   15d28:	vcvt.f32.u32	s2, s2
   15d2c:	vdiv.f32	s2, s2, s0
   15d30:	vcvt.u32.f32	s0, s2
   15d34:	vcmpe.f32	s2, s4
   15d38:	vmrs	APSR_nzcv, fpscr
   15d3c:	bge	15dd8 <__assert_fail@plt+0x48b8>
   15d40:	vmov	r6, s0
   15d44:	cmp	r6, #10
   15d48:	movls	r6, #10
   15d4c:	orr	r0, r6, #1
   15d50:	cmn	r0, #1
   15d54:	beq	15dd8 <__assert_fail@plt+0x48b8>
   15d58:	ldr	r6, [fp, #8]
   15d5c:	mov	r1, #3
   15d60:	cmp	r0, #10
   15d64:	bcc	15d9c <__assert_fail@plt+0x487c>
   15d68:	mov	r1, #3
   15d6c:	mov	r3, #9
   15d70:	mov	r2, #12
   15d74:	udiv	r7, r0, r1
   15d78:	mls	r7, r7, r1, r0
   15d7c:	cmp	r7, #0
   15d80:	beq	15d9c <__assert_fail@plt+0x487c>
   15d84:	add	r3, r3, r2
   15d88:	add	r2, r2, #8
   15d8c:	add	r1, r1, #2
   15d90:	add	r3, r3, #4
   15d94:	cmp	r3, r0
   15d98:	bcc	15d74 <__assert_fail@plt+0x4854>
   15d9c:	udiv	r2, r0, r1
   15da0:	mls	r1, r2, r1, r0
   15da4:	cmp	r1, #0
   15da8:	bne	15dd0 <__assert_fail@plt+0x48b0>
   15dac:	add	r0, r0, #2
   15db0:	cmn	r0, #1
   15db4:	bne	15d5c <__assert_fail@plt+0x483c>
   15db8:	b	15dd8 <__assert_fail@plt+0x48b8>
   15dbc:	str	r0, [r4, #20]
   15dc0:	mov	r0, r4
   15dc4:	bl	12f00 <__assert_fail@plt+0x19e0>
   15dc8:	mov	r0, r8
   15dcc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15dd0:	cmp	r0, #536870912	; 0x20000000
   15dd4:	bcc	15df0 <__assert_fail@plt+0x48d0>
   15dd8:	mov	r0, #0
   15ddc:	str	r0, [r4, #8]
   15de0:	mov	r0, r4
   15de4:	bl	12f00 <__assert_fail@plt+0x19e0>
   15de8:	mov	r0, r8
   15dec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15df0:	cmp	r0, #0
   15df4:	str	r0, [r4, #8]
   15df8:	beq	15de0 <__assert_fail@plt+0x48c0>
   15dfc:	mov	r1, #8
   15e00:	bl	1a6f8 <__assert_fail@plt+0x91d8>
   15e04:	cmp	r0, #0
   15e08:	str	r0, [r4]
   15e0c:	beq	15de0 <__assert_fail@plt+0x48c0>
   15e10:	mov	r1, #0
   15e14:	str	r5, [r4, #24]
   15e18:	str	r9, [r4, #28]
   15e1c:	str	r6, [r4, #32]
   15e20:	mov	r8, r4
   15e24:	str	r1, [r4, #36]	; 0x24
   15e28:	str	r1, [r4, #12]
   15e2c:	str	r1, [r4, #16]
   15e30:	ldr	r1, [r4, #8]
   15e34:	add	r0, r0, r1, lsl #3
   15e38:	str	r0, [r4, #4]
   15e3c:	mov	r0, r8
   15e40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15e44:	stclcc	12, cr12, [ip, #820]	; 0x334
   15e48:	svccc	0x00666666
   15e4c:	svccc	0x008ccccd
   15e50:	svcmi	0x00800000
   15e54:	ror	r2, r0, #3
   15e58:	udiv	r2, r2, r1
   15e5c:	mul	r1, r2, r1
   15e60:	rsb	r0, r1, r0, ror #3
   15e64:	bx	lr
   15e68:	sub	r0, r0, r1
   15e6c:	clz	r0, r0
   15e70:	lsr	r0, r0, #5
   15e74:	bx	lr
   15e78:	push	{r4, r5, r6, r7, fp, lr}
   15e7c:	add	fp, sp, #16
   15e80:	mov	r4, r0
   15e84:	ldr	r5, [r0]
   15e88:	ldr	r0, [r0, #4]
   15e8c:	cmp	r5, r0
   15e90:	bcs	15f40 <__assert_fail@plt+0x4a20>
   15e94:	mov	r6, #0
   15e98:	ldr	r1, [r5]
   15e9c:	cmp	r1, #0
   15ea0:	bne	15ecc <__assert_fail@plt+0x49ac>
   15ea4:	b	15eb4 <__assert_fail@plt+0x4994>
   15ea8:	str	r6, [r5]
   15eac:	str	r6, [r5, #4]
   15eb0:	ldr	r0, [r4, #4]
   15eb4:	add	r5, r5, #8
   15eb8:	cmp	r5, r0
   15ebc:	bcs	15f40 <__assert_fail@plt+0x4a20>
   15ec0:	ldr	r1, [r5]
   15ec4:	cmp	r1, #0
   15ec8:	beq	15eb4 <__assert_fail@plt+0x4994>
   15ecc:	ldr	r1, [r4, #32]
   15ed0:	ldr	r7, [r5, #4]
   15ed4:	cmp	r1, #0
   15ed8:	mov	r0, r1
   15edc:	movwne	r0, #1
   15ee0:	cmp	r7, #0
   15ee4:	bne	15f28 <__assert_fail@plt+0x4a08>
   15ee8:	cmp	r0, #0
   15eec:	beq	15ea8 <__assert_fail@plt+0x4988>
   15ef0:	ldr	r0, [r5]
   15ef4:	blx	r1
   15ef8:	b	15ea8 <__assert_fail@plt+0x4988>
   15efc:	str	r6, [r7]
   15f00:	cmp	r1, #0
   15f04:	ldr	r2, [r7, #4]
   15f08:	ldr	r0, [r4, #36]	; 0x24
   15f0c:	str	r0, [r7, #4]
   15f10:	mov	r0, r1
   15f14:	str	r7, [r4, #36]	; 0x24
   15f18:	movwne	r0, #1
   15f1c:	cmp	r2, #0
   15f20:	mov	r7, r2
   15f24:	beq	15ee8 <__assert_fail@plt+0x49c8>
   15f28:	tst	r0, #1
   15f2c:	beq	15efc <__assert_fail@plt+0x49dc>
   15f30:	ldr	r0, [r7]
   15f34:	blx	r1
   15f38:	ldr	r1, [r4, #32]
   15f3c:	b	15efc <__assert_fail@plt+0x49dc>
   15f40:	mov	r0, #0
   15f44:	str	r0, [r4, #12]
   15f48:	str	r0, [r4, #16]
   15f4c:	pop	{r4, r5, r6, r7, fp, pc}
   15f50:	push	{r4, r5, r6, sl, fp, lr}
   15f54:	add	fp, sp, #16
   15f58:	mov	r4, r0
   15f5c:	ldr	r0, [r0, #32]
   15f60:	cmp	r0, #0
   15f64:	beq	15fd8 <__assert_fail@plt+0x4ab8>
   15f68:	ldr	r0, [r4, #16]
   15f6c:	cmp	r0, #0
   15f70:	beq	15fd8 <__assert_fail@plt+0x4ab8>
   15f74:	ldr	r5, [r4]
   15f78:	ldr	r1, [r4, #4]
   15f7c:	cmp	r5, r1
   15f80:	bcc	15f98 <__assert_fail@plt+0x4a78>
   15f84:	b	15fd8 <__assert_fail@plt+0x4ab8>
   15f88:	ldr	r1, [r4, #4]
   15f8c:	add	r5, r5, #8
   15f90:	cmp	r5, r1
   15f94:	bcs	15fd8 <__assert_fail@plt+0x4ab8>
   15f98:	ldr	r0, [r5]
   15f9c:	cmp	r0, #0
   15fa0:	cmpne	r5, #0
   15fa4:	beq	15f8c <__assert_fail@plt+0x4a6c>
   15fa8:	ldr	r1, [r4, #32]
   15fac:	blx	r1
   15fb0:	ldr	r6, [r5, #4]
   15fb4:	cmp	r6, #0
   15fb8:	beq	15f88 <__assert_fail@plt+0x4a68>
   15fbc:	ldr	r1, [r4, #32]
   15fc0:	ldr	r0, [r6]
   15fc4:	blx	r1
   15fc8:	ldr	r6, [r6, #4]
   15fcc:	cmp	r6, #0
   15fd0:	bne	15fbc <__assert_fail@plt+0x4a9c>
   15fd4:	b	15f88 <__assert_fail@plt+0x4a68>
   15fd8:	ldr	r5, [r4]
   15fdc:	ldr	r1, [r4, #4]
   15fe0:	cmp	r5, r1
   15fe4:	bcc	15ff8 <__assert_fail@plt+0x4ad8>
   15fe8:	b	16020 <__assert_fail@plt+0x4b00>
   15fec:	add	r5, r5, #8
   15ff0:	cmp	r5, r1
   15ff4:	bcs	16020 <__assert_fail@plt+0x4b00>
   15ff8:	ldr	r0, [r5, #4]
   15ffc:	cmp	r0, #0
   16000:	beq	15fec <__assert_fail@plt+0x4acc>
   16004:	ldr	r6, [r0, #4]
   16008:	bl	12f00 <__assert_fail@plt+0x19e0>
   1600c:	cmp	r6, #0
   16010:	mov	r0, r6
   16014:	bne	16004 <__assert_fail@plt+0x4ae4>
   16018:	ldr	r1, [r4, #4]
   1601c:	b	15fec <__assert_fail@plt+0x4acc>
   16020:	ldr	r0, [r4, #36]	; 0x24
   16024:	cmp	r0, #0
   16028:	beq	16040 <__assert_fail@plt+0x4b20>
   1602c:	ldr	r5, [r0, #4]
   16030:	bl	12f00 <__assert_fail@plt+0x19e0>
   16034:	cmp	r5, #0
   16038:	mov	r0, r5
   1603c:	bne	1602c <__assert_fail@plt+0x4b0c>
   16040:	ldr	r0, [r4]
   16044:	bl	12f00 <__assert_fail@plt+0x19e0>
   16048:	mov	r0, r4
   1604c:	pop	{r4, r5, r6, sl, fp, lr}
   16050:	b	12f00 <__assert_fail@plt+0x19e0>
   16054:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16058:	add	fp, sp, #28
   1605c:	sub	sp, sp, #44	; 0x2c
   16060:	mov	r7, r0
   16064:	mov	r4, r0
   16068:	ldr	r0, [r7, #20]!
   1606c:	ldrb	r2, [r0, #16]
   16070:	cmp	r2, #0
   16074:	bne	160a4 <__assert_fail@plt+0x4b84>
   16078:	vmov	s2, r1
   1607c:	vldr	s0, [r0, #8]
   16080:	vldr	s4, [pc, #592]	; 162d8 <__assert_fail@plt+0x4db8>
   16084:	mov	r5, #0
   16088:	vcvt.f32.u32	s2, s2
   1608c:	vdiv.f32	s2, s2, s0
   16090:	vcvt.u32.f32	s0, s2
   16094:	vcmpe.f32	s2, s4
   16098:	vmrs	APSR_nzcv, fpscr
   1609c:	bge	161c8 <__assert_fail@plt+0x4ca8>
   160a0:	vmov	r1, s0
   160a4:	cmp	r1, #10
   160a8:	mov	r5, #0
   160ac:	movls	r1, #10
   160b0:	orr	r6, r1, #1
   160b4:	cmn	r6, #1
   160b8:	beq	161c8 <__assert_fail@plt+0x4ca8>
   160bc:	mov	r0, #3
   160c0:	cmp	r6, #10
   160c4:	bcc	160fc <__assert_fail@plt+0x4bdc>
   160c8:	mov	r0, #3
   160cc:	mov	r2, #9
   160d0:	mov	r1, #12
   160d4:	udiv	r3, r6, r0
   160d8:	mls	r3, r3, r0, r6
   160dc:	cmp	r3, #0
   160e0:	beq	160fc <__assert_fail@plt+0x4bdc>
   160e4:	add	r2, r2, r1
   160e8:	add	r1, r1, #8
   160ec:	add	r0, r0, #2
   160f0:	add	r2, r2, #4
   160f4:	cmp	r2, r6
   160f8:	bcc	160d4 <__assert_fail@plt+0x4bb4>
   160fc:	udiv	r1, r6, r0
   16100:	mls	r0, r1, r0, r6
   16104:	cmp	r0, #0
   16108:	bne	1611c <__assert_fail@plt+0x4bfc>
   1610c:	add	r6, r6, #2
   16110:	cmn	r6, #1
   16114:	bne	160bc <__assert_fail@plt+0x4b9c>
   16118:	b	161c8 <__assert_fail@plt+0x4ca8>
   1611c:	sub	r0, r6, #1
   16120:	cmn	r0, #-536870910	; 0xe0000002
   16124:	bhi	161c8 <__assert_fail@plt+0x4ca8>
   16128:	ldr	r0, [r4, #8]
   1612c:	cmp	r6, r0
   16130:	bne	16144 <__assert_fail@plt+0x4c24>
   16134:	mov	r5, #1
   16138:	mov	r0, r5
   1613c:	sub	sp, fp, #28
   16140:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16144:	mov	r0, r6
   16148:	mov	r1, #8
   1614c:	bl	1a6f8 <__assert_fail@plt+0x91d8>
   16150:	cmp	r0, #0
   16154:	str	r0, [sp, #4]
   16158:	beq	161c8 <__assert_fail@plt+0x4ca8>
   1615c:	add	r0, r0, r6, lsl #3
   16160:	mov	r1, #0
   16164:	add	r5, sp, #4
   16168:	mov	sl, r4
   1616c:	mov	r2, #0
   16170:	str	r1, [sp, #20]
   16174:	str	r1, [sp, #16]
   16178:	str	r6, [sp, #12]
   1617c:	mov	r1, r4
   16180:	str	r0, [sp, #8]
   16184:	add	r0, r5, #20
   16188:	vld1.32	{d16-d17}, [r7]
   1618c:	vst1.32	{d16-d17}, [r0]
   16190:	ldr	r0, [sl, #36]!	; 0x24
   16194:	str	r0, [sp, #40]	; 0x28
   16198:	mov	r0, r5
   1619c:	bl	162dc <__assert_fail@plt+0x4dbc>
   161a0:	cmp	r0, #0
   161a4:	beq	161d4 <__assert_fail@plt+0x4cb4>
   161a8:	ldr	r0, [r4]
   161ac:	bl	12f00 <__assert_fail@plt+0x19e0>
   161b0:	mov	r0, #36	; 0x24
   161b4:	vld1.32	{d16-d17}, [r5], r0
   161b8:	vst1.32	{d16-d17}, [r4], r0
   161bc:	ldr	r0, [r5]
   161c0:	mov	r5, #1
   161c4:	str	r0, [r4]
   161c8:	mov	r0, r5
   161cc:	sub	sp, fp, #28
   161d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161d4:	ldr	r0, [sp, #40]	; 0x28
   161d8:	str	r0, [sl]
   161dc:	ldr	r0, [sp, #8]
   161e0:	ldr	r8, [sp, #4]
   161e4:	cmp	r8, r0
   161e8:	str	r0, [sp]
   161ec:	bcs	162a4 <__assert_fail@plt+0x4d84>
   161f0:	mov	r9, #0
   161f4:	ldr	r0, [r8]
   161f8:	cmp	r0, #0
   161fc:	bne	16224 <__assert_fail@plt+0x4d04>
   16200:	b	16208 <__assert_fail@plt+0x4ce8>
   16204:	str	r9, [r8, #4]
   16208:	ldr	r0, [sp]
   1620c:	add	r8, r8, #8
   16210:	cmp	r8, r0
   16214:	bcs	162a4 <__assert_fail@plt+0x4d84>
   16218:	ldr	r0, [r8]
   1621c:	cmp	r0, #0
   16220:	beq	16208 <__assert_fail@plt+0x4ce8>
   16224:	ldr	r6, [r8, #4]
   16228:	cmp	r6, #0
   1622c:	beq	16204 <__assert_fail@plt+0x4ce4>
   16230:	ldr	r1, [r4, #8]
   16234:	b	16258 <__assert_fail@plt+0x4d38>
   16238:	add	r0, r3, r0, lsl #3
   1623c:	add	r0, r0, #4
   16240:	ldr	r3, [r0]
   16244:	cmp	r2, #0
   16248:	str	r3, [r6, #4]
   1624c:	str	r6, [r0]
   16250:	mov	r6, r2
   16254:	beq	16204 <__assert_fail@plt+0x4ce4>
   16258:	ldr	r5, [r6]
   1625c:	ldr	r2, [r4, #24]
   16260:	mov	r0, r5
   16264:	blx	r2
   16268:	ldr	r1, [r4, #8]
   1626c:	cmp	r0, r1
   16270:	bcs	162d4 <__assert_fail@plt+0x4db4>
   16274:	ldr	r3, [r4]
   16278:	ldr	r2, [r6, #4]
   1627c:	ldr	r7, [r3, r0, lsl #3]
   16280:	cmp	r7, #0
   16284:	bne	16238 <__assert_fail@plt+0x4d18>
   16288:	str	r5, [r3, r0, lsl #3]
   1628c:	ldr	r0, [r4, #12]
   16290:	add	r0, r0, #1
   16294:	str	r0, [r4, #12]
   16298:	mov	r0, sl
   1629c:	str	r9, [r6]
   162a0:	b	16240 <__assert_fail@plt+0x4d20>
   162a4:	add	r1, sp, #4
   162a8:	mov	r0, r4
   162ac:	mov	r2, #0
   162b0:	mov	r5, #0
   162b4:	bl	162dc <__assert_fail@plt+0x4dbc>
   162b8:	cmp	r0, #0
   162bc:	beq	162d4 <__assert_fail@plt+0x4db4>
   162c0:	ldr	r0, [sp, #4]
   162c4:	bl	12f00 <__assert_fail@plt+0x19e0>
   162c8:	mov	r0, r5
   162cc:	sub	sp, fp, #28
   162d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   162d4:	bl	114d8 <abort@plt>
   162d8:	svcmi	0x00800000
   162dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162e0:	add	fp, sp, #28
   162e4:	sub	sp, sp, #4
   162e8:	ldr	r8, [r1]
   162ec:	ldr	r3, [r1, #4]
   162f0:	mov	r6, r0
   162f4:	mov	r0, #1
   162f8:	str	r1, [sp]
   162fc:	cmp	r8, r3
   16300:	bcs	16514 <__assert_fail@plt+0x4ff4>
   16304:	add	sl, r6, #36	; 0x24
   16308:	cmp	r2, #0
   1630c:	beq	163c8 <__assert_fail@plt+0x4ea8>
   16310:	mov	r9, #0
   16314:	ldr	r1, [r8]
   16318:	cmp	r1, #0
   1631c:	bne	16348 <__assert_fail@plt+0x4e28>
   16320:	b	16330 <__assert_fail@plt+0x4e10>
   16324:	ldr	r0, [sp]
   16328:	ldr	r3, [r0, #4]
   1632c:	str	r9, [r8, #4]
   16330:	add	r8, r8, #8
   16334:	cmp	r8, r3
   16338:	bcs	16510 <__assert_fail@plt+0x4ff0>
   1633c:	ldr	r1, [r8]
   16340:	cmp	r1, #0
   16344:	beq	16330 <__assert_fail@plt+0x4e10>
   16348:	ldr	r7, [r8, #4]
   1634c:	cmp	r7, #0
   16350:	beq	1632c <__assert_fail@plt+0x4e0c>
   16354:	ldr	r1, [r6, #8]
   16358:	b	1638c <__assert_fail@plt+0x4e6c>
   1635c:	str	r4, [r3, r0, lsl #3]
   16360:	ldr	r0, [r6, #12]
   16364:	add	r0, r0, #1
   16368:	str	r0, [r6, #12]
   1636c:	mov	r0, sl
   16370:	str	r9, [r7]
   16374:	ldr	r3, [r0]
   16378:	cmp	r2, #0
   1637c:	str	r3, [r7, #4]
   16380:	str	r7, [r0]
   16384:	mov	r7, r2
   16388:	beq	16324 <__assert_fail@plt+0x4e04>
   1638c:	ldr	r4, [r7]
   16390:	ldr	r2, [r6, #24]
   16394:	mov	r0, r4
   16398:	blx	r2
   1639c:	ldr	r1, [r6, #8]
   163a0:	cmp	r0, r1
   163a4:	bcs	16528 <__assert_fail@plt+0x5008>
   163a8:	ldr	r3, [r6]
   163ac:	ldr	r2, [r7, #4]
   163b0:	ldr	r5, [r3, r0, lsl #3]
   163b4:	cmp	r5, #0
   163b8:	beq	1635c <__assert_fail@plt+0x4e3c>
   163bc:	add	r0, r3, r0, lsl #3
   163c0:	add	r0, r0, #4
   163c4:	b	16374 <__assert_fail@plt+0x4e54>
   163c8:	mov	r5, #0
   163cc:	ldr	r7, [r8]
   163d0:	cmp	r7, #0
   163d4:	bne	1641c <__assert_fail@plt+0x4efc>
   163d8:	b	16404 <__assert_fail@plt+0x4ee4>
   163dc:	str	r7, [r9, r4, lsl #3]
   163e0:	ldr	r0, [r6, #12]
   163e4:	add	r0, r0, #1
   163e8:	str	r0, [r6, #12]
   163ec:	ldr	r0, [sp]
   163f0:	str	r5, [r8]
   163f4:	ldr	r1, [r0, #12]
   163f8:	ldr	r3, [r0, #4]
   163fc:	sub	r1, r1, #1
   16400:	str	r1, [r0, #12]
   16404:	add	r8, r8, #8
   16408:	cmp	r8, r3
   1640c:	bcs	16510 <__assert_fail@plt+0x4ff0>
   16410:	ldr	r7, [r8]
   16414:	cmp	r7, #0
   16418:	beq	16404 <__assert_fail@plt+0x4ee4>
   1641c:	ldr	r9, [r8, #4]
   16420:	ldr	r1, [r6, #8]
   16424:	cmp	r9, #0
   16428:	bne	16450 <__assert_fail@plt+0x4f30>
   1642c:	b	164a0 <__assert_fail@plt+0x4f80>
   16430:	add	r0, r3, r0, lsl #3
   16434:	add	r0, r0, #4
   16438:	ldr	r3, [r0]
   1643c:	cmp	r2, #0
   16440:	str	r3, [r9, #4]
   16444:	str	r9, [r0]
   16448:	mov	r9, r2
   1644c:	beq	1649c <__assert_fail@plt+0x4f7c>
   16450:	ldr	r4, [r9]
   16454:	ldr	r2, [r6, #24]
   16458:	mov	r0, r4
   1645c:	blx	r2
   16460:	ldr	r1, [r6, #8]
   16464:	cmp	r0, r1
   16468:	bcs	16528 <__assert_fail@plt+0x5008>
   1646c:	ldr	r3, [r6]
   16470:	ldr	r2, [r9, #4]
   16474:	ldr	r7, [r3, r0, lsl #3]
   16478:	cmp	r7, #0
   1647c:	bne	16430 <__assert_fail@plt+0x4f10>
   16480:	str	r4, [r3, r0, lsl #3]
   16484:	ldr	r0, [r6, #12]
   16488:	add	r0, r0, #1
   1648c:	str	r0, [r6, #12]
   16490:	mov	r0, sl
   16494:	str	r5, [r9]
   16498:	b	16438 <__assert_fail@plt+0x4f18>
   1649c:	ldr	r7, [r8]
   164a0:	str	r5, [r8, #4]
   164a4:	mov	r0, r7
   164a8:	ldr	r2, [r6, #24]
   164ac:	blx	r2
   164b0:	mov	r4, r0
   164b4:	ldr	r0, [r6, #8]
   164b8:	cmp	r4, r0
   164bc:	bcs	16528 <__assert_fail@plt+0x5008>
   164c0:	ldr	r9, [r6]
   164c4:	ldr	r0, [r9, r4, lsl #3]
   164c8:	cmp	r0, #0
   164cc:	beq	163dc <__assert_fail@plt+0x4ebc>
   164d0:	ldr	r0, [sl]
   164d4:	cmp	r0, #0
   164d8:	beq	164e8 <__assert_fail@plt+0x4fc8>
   164dc:	ldr	r1, [r0, #4]
   164e0:	str	r1, [sl]
   164e4:	b	164f8 <__assert_fail@plt+0x4fd8>
   164e8:	mov	r0, #8
   164ec:	bl	1a74c <__assert_fail@plt+0x922c>
   164f0:	cmp	r0, #0
   164f4:	beq	1651c <__assert_fail@plt+0x4ffc>
   164f8:	add	r1, r9, r4, lsl #3
   164fc:	str	r7, [r0]
   16500:	ldr	r2, [r1, #4]
   16504:	str	r2, [r0, #4]
   16508:	str	r0, [r1, #4]
   1650c:	b	163ec <__assert_fail@plt+0x4ecc>
   16510:	mov	r0, #1
   16514:	sub	sp, fp, #28
   16518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1651c:	mov	r0, #0
   16520:	sub	sp, fp, #28
   16524:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16528:	bl	114d8 <abort@plt>
   1652c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16530:	add	fp, sp, #28
   16534:	sub	sp, sp, #4
   16538:	cmp	r1, #0
   1653c:	beq	16878 <__assert_fail@plt+0x5358>
   16540:	mov	r8, r2
   16544:	mov	sl, r1
   16548:	ldr	r1, [r0, #8]
   1654c:	ldr	r2, [r0, #24]
   16550:	mov	r4, r0
   16554:	mov	r0, sl
   16558:	blx	r2
   1655c:	mov	r7, r0
   16560:	ldr	r0, [r4, #8]
   16564:	cmp	r7, r0
   16568:	bcs	16878 <__assert_fail@plt+0x5358>
   1656c:	ldr	r5, [r4]
   16570:	mov	r9, r5
   16574:	ldr	r1, [r9, r7, lsl #3]!
   16578:	cmp	r1, #0
   1657c:	beq	16610 <__assert_fail@plt+0x50f0>
   16580:	cmp	r1, sl
   16584:	beq	165b0 <__assert_fail@plt+0x5090>
   16588:	ldr	r2, [r4, #28]
   1658c:	mov	r0, sl
   16590:	blx	r2
   16594:	cmp	r0, #0
   16598:	mov	r6, r9
   1659c:	beq	165cc <__assert_fail@plt+0x50ac>
   165a0:	ldr	r0, [r6]
   165a4:	cmp	r0, #0
   165a8:	bne	165b4 <__assert_fail@plt+0x5094>
   165ac:	b	16610 <__assert_fail@plt+0x50f0>
   165b0:	mov	r0, sl
   165b4:	cmp	r8, #0
   165b8:	mov	r7, #0
   165bc:	strne	r0, [r8]
   165c0:	mov	r0, r7
   165c4:	sub	sp, fp, #28
   165c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165cc:	add	r6, r5, r7, lsl #3
   165d0:	ldr	r0, [r6, #4]!
   165d4:	cmp	r0, #0
   165d8:	beq	16610 <__assert_fail@plt+0x50f0>
   165dc:	ldr	r1, [r0]
   165e0:	cmp	r1, sl
   165e4:	beq	16604 <__assert_fail@plt+0x50e4>
   165e8:	ldr	r2, [r4, #28]
   165ec:	mov	r0, sl
   165f0:	blx	r2
   165f4:	ldr	r6, [r6]
   165f8:	cmp	r0, #0
   165fc:	beq	165d0 <__assert_fail@plt+0x50b0>
   16600:	b	165a0 <__assert_fail@plt+0x5080>
   16604:	mov	r0, sl
   16608:	cmp	r0, #0
   1660c:	bne	165b4 <__assert_fail@plt+0x5094>
   16610:	vldr	s0, [r4, #8]
   16614:	vldr	s2, [r4, #12]
   16618:	ldr	r0, [r4, #20]
   1661c:	vcvt.f32.u32	s0, s0
   16620:	vcvt.f32.u32	s4, s2
   16624:	vldr	s2, [r0, #8]
   16628:	vmul.f32	s6, s2, s0
   1662c:	vcmpe.f32	s6, s4
   16630:	vmrs	APSR_nzcv, fpscr
   16634:	bpl	16798 <__assert_fail@plt+0x5278>
   16638:	movw	r1, #49744	; 0xc250
   1663c:	movt	r1, #1
   16640:	cmp	r0, r1
   16644:	beq	166e0 <__assert_fail@plt+0x51c0>
   16648:	vldr	s6, [pc, #556]	; 1687c <__assert_fail@plt+0x535c>
   1664c:	vcmpe.f32	s2, s6
   16650:	vmrs	APSR_nzcv, fpscr
   16654:	ble	166bc <__assert_fail@plt+0x519c>
   16658:	vldr	s8, [pc, #544]	; 16880 <__assert_fail@plt+0x5360>
   1665c:	vcmpe.f32	s2, s8
   16660:	vmrs	APSR_nzcv, fpscr
   16664:	bpl	166bc <__assert_fail@plt+0x519c>
   16668:	vldr	s8, [pc, #532]	; 16884 <__assert_fail@plt+0x5364>
   1666c:	vldr	s10, [r0, #12]
   16670:	vcmpe.f32	s10, s8
   16674:	vmrs	APSR_nzcv, fpscr
   16678:	ble	166bc <__assert_fail@plt+0x519c>
   1667c:	vldr	s8, [r0]
   16680:	vcmpe.f32	s8, #0.0
   16684:	vmrs	APSR_nzcv, fpscr
   16688:	blt	166bc <__assert_fail@plt+0x519c>
   1668c:	vadd.f32	s6, s8, s6
   16690:	vcmpe.f32	s6, s2
   16694:	vmrs	APSR_nzcv, fpscr
   16698:	bpl	166bc <__assert_fail@plt+0x519c>
   1669c:	vldr	s8, [r0, #4]
   166a0:	vmov.f32	s10, #112	; 0x3f800000  1.0
   166a4:	vcmpe.f32	s8, s10
   166a8:	vmrs	APSR_nzcv, fpscr
   166ac:	bhi	166bc <__assert_fail@plt+0x519c>
   166b0:	vcmpe.f32	s6, s8
   166b4:	vmrs	APSR_nzcv, fpscr
   166b8:	bmi	166cc <__assert_fail@plt+0x51ac>
   166bc:	vldr	s2, [pc, #452]	; 16888 <__assert_fail@plt+0x5368>
   166c0:	movw	r0, #49744	; 0xc250
   166c4:	movt	r0, #1
   166c8:	str	r0, [r4, #20]
   166cc:	vmul.f32	s6, s2, s0
   166d0:	vcmpe.f32	s6, s4
   166d4:	vmrs	APSR_nzcv, fpscr
   166d8:	bmi	166f4 <__assert_fail@plt+0x51d4>
   166dc:	b	16798 <__assert_fail@plt+0x5278>
   166e0:	mov	r0, r1
   166e4:	vmul.f32	s6, s2, s0
   166e8:	vcmpe.f32	s6, s4
   166ec:	vmrs	APSR_nzcv, fpscr
   166f0:	bpl	16798 <__assert_fail@plt+0x5278>
   166f4:	vldr	s4, [r0, #12]
   166f8:	ldrb	r0, [r0, #16]
   166fc:	mvn	r7, #0
   16700:	cmp	r0, #0
   16704:	vmul.f32	s0, s4, s0
   16708:	vldr	s4, [pc, #380]	; 1688c <__assert_fail@plt+0x536c>
   1670c:	vmul.f32	s2, s2, s0
   16710:	vseleq.f32	s0, s2, s0
   16714:	vcmpe.f32	s0, s4
   16718:	vmrs	APSR_nzcv, fpscr
   1671c:	bge	1680c <__assert_fail@plt+0x52ec>
   16720:	vcvt.u32.f32	s0, s0
   16724:	mov	r0, r4
   16728:	vmov	r1, s0
   1672c:	bl	16054 <__assert_fail@plt+0x4b34>
   16730:	cmp	r0, #0
   16734:	beq	1680c <__assert_fail@plt+0x52ec>
   16738:	ldr	r1, [r4, #8]
   1673c:	ldr	r2, [r4, #24]
   16740:	mov	r0, sl
   16744:	blx	r2
   16748:	mov	r7, r0
   1674c:	ldr	r0, [r4, #8]
   16750:	cmp	r7, r0
   16754:	bcs	16878 <__assert_fail@plt+0x5358>
   16758:	ldr	r5, [r4]
   1675c:	mov	r9, r5
   16760:	ldr	r1, [r9, r7, lsl #3]!
   16764:	cmp	r1, #0
   16768:	beq	16798 <__assert_fail@plt+0x5278>
   1676c:	cmp	r1, sl
   16770:	mov	r0, sl
   16774:	beq	16790 <__assert_fail@plt+0x5270>
   16778:	ldr	r2, [r4, #28]
   1677c:	mov	r0, sl
   16780:	blx	r2
   16784:	cmp	r0, #0
   16788:	beq	16828 <__assert_fail@plt+0x5308>
   1678c:	ldr	r0, [r9]
   16790:	cmp	r0, #0
   16794:	bne	16878 <__assert_fail@plt+0x5358>
   16798:	ldr	r0, [r9]
   1679c:	cmp	r0, #0
   167a0:	beq	167bc <__assert_fail@plt+0x529c>
   167a4:	ldr	r0, [r4, #36]	; 0x24
   167a8:	cmp	r0, #0
   167ac:	beq	167dc <__assert_fail@plt+0x52bc>
   167b0:	ldr	r1, [r0, #4]
   167b4:	str	r1, [r4, #36]	; 0x24
   167b8:	b	167ec <__assert_fail@plt+0x52cc>
   167bc:	str	sl, [r9]
   167c0:	ldr	r0, [r4, #12]
   167c4:	ldr	r1, [r4, #16]
   167c8:	add	r0, r0, #1
   167cc:	add	r1, r1, #1
   167d0:	str	r0, [r4, #12]
   167d4:	str	r1, [r4, #16]
   167d8:	b	16808 <__assert_fail@plt+0x52e8>
   167dc:	mov	r0, #8
   167e0:	bl	1a74c <__assert_fail@plt+0x922c>
   167e4:	cmp	r0, #0
   167e8:	beq	16818 <__assert_fail@plt+0x52f8>
   167ec:	str	sl, [r0]
   167f0:	ldr	r1, [r9, #4]
   167f4:	str	r1, [r0, #4]
   167f8:	str	r0, [r9, #4]
   167fc:	ldr	r0, [r4, #16]
   16800:	add	r0, r0, #1
   16804:	str	r0, [r4, #16]
   16808:	mov	r7, #1
   1680c:	mov	r0, r7
   16810:	sub	sp, fp, #28
   16814:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16818:	mvn	r7, #0
   1681c:	mov	r0, r7
   16820:	sub	sp, fp, #28
   16824:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16828:	add	r6, r5, r7, lsl #3
   1682c:	ldr	r0, [r6, #4]!
   16830:	cmp	r0, #0
   16834:	beq	16798 <__assert_fail@plt+0x5278>
   16838:	ldr	r1, [r0]
   1683c:	cmp	r1, sl
   16840:	beq	1686c <__assert_fail@plt+0x534c>
   16844:	ldr	r2, [r4, #28]
   16848:	mov	r0, sl
   1684c:	blx	r2
   16850:	ldr	r6, [r6]
   16854:	cmp	r0, #0
   16858:	beq	1682c <__assert_fail@plt+0x530c>
   1685c:	ldr	r0, [r6]
   16860:	cmp	r0, #0
   16864:	beq	16798 <__assert_fail@plt+0x5278>
   16868:	b	16878 <__assert_fail@plt+0x5358>
   1686c:	mov	r0, sl
   16870:	cmp	r0, #0
   16874:	beq	16798 <__assert_fail@plt+0x5278>
   16878:	bl	114d8 <abort@plt>
   1687c:	stclcc	12, cr12, [ip, #820]	; 0x334
   16880:	svccc	0x00666666
   16884:	svccc	0x008ccccd
   16888:	svccc	0x004ccccd
   1688c:	svcmi	0x00800000
   16890:	push	{r4, sl, fp, lr}
   16894:	add	fp, sp, #8
   16898:	sub	sp, sp, #8
   1689c:	add	r2, sp, #4
   168a0:	mov	r4, r1
   168a4:	bl	1652c <__assert_fail@plt+0x500c>
   168a8:	cmn	r0, #1
   168ac:	beq	168c8 <__assert_fail@plt+0x53a8>
   168b0:	ldr	r1, [sp, #4]
   168b4:	cmp	r0, #0
   168b8:	moveq	r4, r1
   168bc:	mov	r0, r4
   168c0:	sub	sp, fp, #8
   168c4:	pop	{r4, sl, fp, pc}
   168c8:	mov	r4, #0
   168cc:	mov	r0, r4
   168d0:	sub	sp, fp, #8
   168d4:	pop	{r4, sl, fp, pc}
   168d8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   168dc:	add	fp, sp, #24
   168e0:	mov	r9, r1
   168e4:	ldr	r1, [r0, #8]
   168e8:	ldr	r2, [r0, #24]
   168ec:	mov	r5, r0
   168f0:	mov	r0, r9
   168f4:	blx	r2
   168f8:	mov	r7, r0
   168fc:	ldr	r0, [r5, #8]
   16900:	cmp	r7, r0
   16904:	bcs	16b78 <__assert_fail@plt+0x5658>
   16908:	ldr	r6, [r5]
   1690c:	mov	r8, #0
   16910:	mov	r4, r6
   16914:	ldr	r1, [r4, r7, lsl #3]!
   16918:	cmp	r1, #0
   1691c:	beq	169d0 <__assert_fail@plt+0x54b0>
   16920:	cmp	r1, r9
   16924:	beq	16940 <__assert_fail@plt+0x5420>
   16928:	ldr	r2, [r5, #28]
   1692c:	mov	r0, r9
   16930:	blx	r2
   16934:	cmp	r0, #0
   16938:	beq	16978 <__assert_fail@plt+0x5458>
   1693c:	ldr	r9, [r4]
   16940:	add	r0, r6, r7, lsl #3
   16944:	ldr	r0, [r0, #4]
   16948:	cmp	r0, #0
   1694c:	beq	169c0 <__assert_fail@plt+0x54a0>
   16950:	ldm	r0, {r1, r2}
   16954:	stm	r4, {r1, r2}
   16958:	mov	r1, #0
   1695c:	str	r1, [r0]
   16960:	ldr	r1, [r5, #36]	; 0x24
   16964:	str	r1, [r0, #4]
   16968:	str	r0, [r5, #36]	; 0x24
   1696c:	cmp	r9, #0
   16970:	bne	16a08 <__assert_fail@plt+0x54e8>
   16974:	b	169d0 <__assert_fail@plt+0x54b0>
   16978:	add	r7, r6, r7, lsl #3
   1697c:	ldr	r0, [r7, #4]!
   16980:	cmp	r0, #0
   16984:	beq	169d0 <__assert_fail@plt+0x54b0>
   16988:	ldr	r1, [r0]
   1698c:	cmp	r1, r9
   16990:	beq	169d8 <__assert_fail@plt+0x54b8>
   16994:	ldr	r2, [r5, #28]
   16998:	mov	r0, r9
   1699c:	blx	r2
   169a0:	ldr	r1, [r7]
   169a4:	cmp	r0, #0
   169a8:	bne	169e0 <__assert_fail@plt+0x54c0>
   169ac:	ldr	r0, [r1, #4]!
   169b0:	mov	r7, r1
   169b4:	cmp	r0, #0
   169b8:	bne	16988 <__assert_fail@plt+0x5468>
   169bc:	b	169d0 <__assert_fail@plt+0x54b0>
   169c0:	mov	r0, #0
   169c4:	str	r0, [r4]
   169c8:	cmp	r9, #0
   169cc:	bne	16a08 <__assert_fail@plt+0x54e8>
   169d0:	mov	r0, r8
   169d4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   169d8:	mov	r1, r0
   169dc:	b	169e4 <__assert_fail@plt+0x54c4>
   169e0:	ldr	r9, [r1]
   169e4:	ldr	r0, [r1, #4]
   169e8:	str	r0, [r7]
   169ec:	mov	r0, #0
   169f0:	str	r0, [r1]
   169f4:	ldr	r0, [r5, #36]	; 0x24
   169f8:	str	r0, [r1, #4]
   169fc:	str	r1, [r5, #36]	; 0x24
   16a00:	cmp	r9, #0
   16a04:	beq	169d0 <__assert_fail@plt+0x54b0>
   16a08:	ldr	r0, [r5, #16]
   16a0c:	sub	r0, r0, #1
   16a10:	str	r0, [r5, #16]
   16a14:	ldr	r0, [r4]
   16a18:	cmp	r0, #0
   16a1c:	bne	16b6c <__assert_fail@plt+0x564c>
   16a20:	ldr	r0, [r5, #12]
   16a24:	vldr	s0, [r5, #8]
   16a28:	sub	r1, r0, #1
   16a2c:	str	r1, [r5, #12]
   16a30:	vmov	s2, r1
   16a34:	ldr	r0, [r5, #20]
   16a38:	vcvt.f32.u32	s0, s0
   16a3c:	vcvt.f32.u32	s2, s2
   16a40:	vldr	s4, [r0]
   16a44:	vmul.f32	s6, s4, s0
   16a48:	vcmpe.f32	s6, s2
   16a4c:	vmrs	APSR_nzcv, fpscr
   16a50:	ble	16b6c <__assert_fail@plt+0x564c>
   16a54:	movw	r1, #49744	; 0xc250
   16a58:	movt	r1, #1
   16a5c:	cmp	r0, r1
   16a60:	beq	16afc <__assert_fail@plt+0x55dc>
   16a64:	vldr	s8, [pc, #272]	; 16b7c <__assert_fail@plt+0x565c>
   16a68:	vldr	s6, [r0, #8]
   16a6c:	vcmpe.f32	s6, s8
   16a70:	vmrs	APSR_nzcv, fpscr
   16a74:	ble	16ad8 <__assert_fail@plt+0x55b8>
   16a78:	vldr	s10, [pc, #256]	; 16b80 <__assert_fail@plt+0x5660>
   16a7c:	vcmpe.f32	s6, s10
   16a80:	vmrs	APSR_nzcv, fpscr
   16a84:	bpl	16ad8 <__assert_fail@plt+0x55b8>
   16a88:	vcmpe.f32	s4, #0.0
   16a8c:	vmrs	APSR_nzcv, fpscr
   16a90:	blt	16ad8 <__assert_fail@plt+0x55b8>
   16a94:	vldr	s10, [r0, #12]
   16a98:	vldr	s12, [pc, #228]	; 16b84 <__assert_fail@plt+0x5664>
   16a9c:	vcmpe.f32	s10, s12
   16aa0:	vmrs	APSR_nzcv, fpscr
   16aa4:	ble	16ad8 <__assert_fail@plt+0x55b8>
   16aa8:	vadd.f32	s8, s4, s8
   16aac:	vcmpe.f32	s8, s6
   16ab0:	vmrs	APSR_nzcv, fpscr
   16ab4:	bpl	16ad8 <__assert_fail@plt+0x55b8>
   16ab8:	vldr	s6, [r0, #4]
   16abc:	vmov.f32	s10, #112	; 0x3f800000  1.0
   16ac0:	vcmpe.f32	s6, s10
   16ac4:	vmrs	APSR_nzcv, fpscr
   16ac8:	bhi	16ad8 <__assert_fail@plt+0x55b8>
   16acc:	vcmpe.f32	s8, s6
   16ad0:	vmrs	APSR_nzcv, fpscr
   16ad4:	bmi	16ae8 <__assert_fail@plt+0x55c8>
   16ad8:	vldr	s4, [pc, #168]	; 16b88 <__assert_fail@plt+0x5668>
   16adc:	movw	r0, #49744	; 0xc250
   16ae0:	movt	r0, #1
   16ae4:	str	r0, [r5, #20]
   16ae8:	vmul.f32	s4, s4, s0
   16aec:	vcmpe.f32	s4, s2
   16af0:	vmrs	APSR_nzcv, fpscr
   16af4:	bgt	16b10 <__assert_fail@plt+0x55f0>
   16af8:	b	16b6c <__assert_fail@plt+0x564c>
   16afc:	mov	r0, r1
   16b00:	vmul.f32	s4, s4, s0
   16b04:	vcmpe.f32	s4, s2
   16b08:	vmrs	APSR_nzcv, fpscr
   16b0c:	ble	16b6c <__assert_fail@plt+0x564c>
   16b10:	vldr	s2, [r0, #4]
   16b14:	ldrb	r1, [r0, #16]
   16b18:	cmp	r1, #0
   16b1c:	vmul.f32	s0, s2, s0
   16b20:	bne	16b2c <__assert_fail@plt+0x560c>
   16b24:	vldr	s2, [r0, #8]
   16b28:	vmul.f32	s0, s0, s2
   16b2c:	vcvt.u32.f32	s0, s0
   16b30:	mov	r0, r5
   16b34:	vmov	r1, s0
   16b38:	bl	16054 <__assert_fail@plt+0x4b34>
   16b3c:	cmp	r0, #0
   16b40:	bne	16b6c <__assert_fail@plt+0x564c>
   16b44:	ldr	r0, [r5, #36]	; 0x24
   16b48:	cmp	r0, #0
   16b4c:	beq	16b64 <__assert_fail@plt+0x5644>
   16b50:	ldr	r4, [r0, #4]
   16b54:	bl	12f00 <__assert_fail@plt+0x19e0>
   16b58:	cmp	r4, #0
   16b5c:	mov	r0, r4
   16b60:	bne	16b50 <__assert_fail@plt+0x5630>
   16b64:	mov	r0, #0
   16b68:	str	r0, [r5, #36]	; 0x24
   16b6c:	mov	r8, r9
   16b70:	mov	r0, r8
   16b74:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16b78:	bl	114d8 <abort@plt>
   16b7c:	stclcc	12, cr12, [ip, #820]	; 0x334
   16b80:	svccc	0x00666666
   16b84:	svccc	0x008ccccd
   16b88:	andeq	r0, r0, r0
   16b8c:	b	168d8 <__assert_fail@plt+0x53b8>
   16b90:	vdup.32	q8, r1
   16b94:	mov	r2, #0
   16b98:	str	r2, [r0, #20]
   16b9c:	str	r2, [r0, #24]
   16ba0:	mov	r2, #1
   16ba4:	strb	r2, [r0, #28]
   16ba8:	vst1.32	{d16-d17}, [r0]!
   16bac:	str	r1, [r0]
   16bb0:	bx	lr
   16bb4:	ldrb	r0, [r0, #28]
   16bb8:	bx	lr
   16bbc:	push	{fp, lr}
   16bc0:	mov	fp, sp
   16bc4:	ldrb	r3, [r0, #28]
   16bc8:	ldr	r2, [r0, #20]
   16bcc:	eor	lr, r3, #1
   16bd0:	add	r2, r2, lr
   16bd4:	and	r3, r2, #3
   16bd8:	ldr	ip, [r0, r3, lsl #2]
   16bdc:	str	r1, [r0, r3, lsl #2]
   16be0:	str	r3, [r0, #20]
   16be4:	ldr	r1, [r0, #24]
   16be8:	cmp	r3, r1
   16bec:	addeq	r1, r2, lr
   16bf0:	andeq	r1, r1, #3
   16bf4:	streq	r1, [r0, #24]
   16bf8:	mov	r1, #0
   16bfc:	strb	r1, [r0, #28]
   16c00:	mov	r0, ip
   16c04:	pop	{fp, pc}
   16c08:	push	{fp, lr}
   16c0c:	mov	fp, sp
   16c10:	ldrb	r1, [r0, #28]
   16c14:	cmp	r1, #0
   16c18:	bne	16c54 <__assert_fail@plt+0x5734>
   16c1c:	ldr	r3, [r0, #20]
   16c20:	ldr	r2, [r0, #16]
   16c24:	ldr	r1, [r0, r3, lsl #2]
   16c28:	str	r2, [r0, r3, lsl #2]
   16c2c:	ldr	r2, [r0, #20]
   16c30:	ldr	r3, [r0, #24]
   16c34:	cmp	r2, r3
   16c38:	moveq	r2, #1
   16c3c:	strbeq	r2, [r0, #28]
   16c40:	subne	r2, r2, #1
   16c44:	andne	r2, r2, #3
   16c48:	strne	r2, [r0, #20]
   16c4c:	mov	r0, r1
   16c50:	pop	{fp, pc}
   16c54:	bl	114d8 <abort@plt>
   16c58:	push	{r4, r5, r6, sl, fp, lr}
   16c5c:	add	fp, sp, #16
   16c60:	mov	r5, r0
   16c64:	mov	r0, #0
   16c68:	mov	r4, r1
   16c6c:	add	r6, r2, #19
   16c70:	strb	r0, [r2, #20]
   16c74:	mov	r0, r5
   16c78:	mov	r1, r4
   16c7c:	mov	r2, #10
   16c80:	mov	r3, #0
   16c84:	bl	1aef0 <__assert_fail@plt+0x99d0>
   16c88:	add	r2, r0, r0, lsl #2
   16c8c:	sub	r2, r5, r2, lsl #1
   16c90:	orr	r2, r2, #48	; 0x30
   16c94:	strb	r2, [r6], #-1
   16c98:	rsbs	r2, r5, #9
   16c9c:	mov	r5, r0
   16ca0:	rscs	r2, r4, #0
   16ca4:	mov	r4, r1
   16ca8:	bcc	16c74 <__assert_fail@plt+0x5754>
   16cac:	add	r0, r6, #1
   16cb0:	pop	{r4, r5, r6, sl, fp, pc}
   16cb4:	sub	sp, sp, #4
   16cb8:	push	{fp, lr}
   16cbc:	mov	fp, sp
   16cc0:	sub	sp, sp, #4
   16cc4:	str	r3, [fp, #8]
   16cc8:	tst	r2, #64	; 0x40
   16ccc:	mov	r3, #0
   16cd0:	ldrne	r3, [fp, #8]
   16cd4:	bl	113b8 <openat64@plt>
   16cd8:	bl	18d80 <__assert_fail@plt+0x7860>
   16cdc:	mov	sp, fp
   16ce0:	pop	{fp, lr}
   16ce4:	add	sp, sp, #4
   16ce8:	bx	lr
   16cec:	push	{r4, r5, r6, sl, fp, lr}
   16cf0:	add	fp, sp, #16
   16cf4:	orr	r2, r2, #18688	; 0x4900
   16cf8:	mov	r4, r3
   16cfc:	orr	r2, r2, #524288	; 0x80000
   16d00:	bl	16cb4 <__assert_fail@plt+0x5794>
   16d04:	mov	r5, r0
   16d08:	mov	r0, #0
   16d0c:	cmp	r5, #0
   16d10:	bmi	16d48 <__assert_fail@plt+0x5828>
   16d14:	mov	r0, r5
   16d18:	bl	11478 <fdopendir@plt>
   16d1c:	cmp	r0, #0
   16d20:	beq	16d2c <__assert_fail@plt+0x580c>
   16d24:	str	r5, [r4]
   16d28:	pop	{r4, r5, r6, sl, fp, pc}
   16d2c:	bl	113d0 <__errno_location@plt>
   16d30:	ldr	r6, [r0]
   16d34:	mov	r4, r0
   16d38:	mov	r0, r5
   16d3c:	bl	114e4 <close@plt>
   16d40:	mov	r0, #0
   16d44:	str	r6, [r4]
   16d48:	pop	{r4, r5, r6, sl, fp, pc}
   16d4c:	push	{r4, r5, fp, lr}
   16d50:	add	fp, sp, #8
   16d54:	cmp	r0, #0
   16d58:	beq	16dec <__assert_fail@plt+0x58cc>
   16d5c:	mov	r1, #47	; 0x2f
   16d60:	mov	r4, r0
   16d64:	bl	11454 <strrchr@plt>
   16d68:	cmp	r0, #0
   16d6c:	mov	r5, r4
   16d70:	addne	r5, r0, #1
   16d74:	sub	r0, r5, r4
   16d78:	cmp	r0, #7
   16d7c:	blt	16dd0 <__assert_fail@plt+0x58b0>
   16d80:	movw	r1, #49820	; 0xc29c
   16d84:	sub	r0, r5, #7
   16d88:	mov	r2, #7
   16d8c:	movt	r1, #1
   16d90:	bl	114cc <strncmp@plt>
   16d94:	cmp	r0, #0
   16d98:	bne	16dd0 <__assert_fail@plt+0x58b0>
   16d9c:	movw	r1, #49828	; 0xc2a4
   16da0:	mov	r0, r5
   16da4:	mov	r2, #3
   16da8:	movt	r1, #1
   16dac:	bl	114cc <strncmp@plt>
   16db0:	cmp	r0, #0
   16db4:	beq	16dc0 <__assert_fail@plt+0x58a0>
   16db8:	mov	r4, r5
   16dbc:	b	16dd0 <__assert_fail@plt+0x58b0>
   16dc0:	movw	r0, #53624	; 0xd178
   16dc4:	add	r4, r5, #3
   16dc8:	movt	r0, #2
   16dcc:	str	r4, [r0]
   16dd0:	movw	r0, #53628	; 0xd17c
   16dd4:	movt	r0, #2
   16dd8:	str	r4, [r0]
   16ddc:	movw	r0, #53688	; 0xd1b8
   16de0:	movt	r0, #2
   16de4:	str	r4, [r0]
   16de8:	pop	{r4, r5, fp, pc}
   16dec:	movw	r0, #53640	; 0xd188
   16df0:	mov	r1, #55	; 0x37
   16df4:	mov	r2, #1
   16df8:	movt	r0, #2
   16dfc:	ldr	r3, [r0]
   16e00:	movw	r0, #49764	; 0xc264
   16e04:	movt	r0, #1
   16e08:	bl	112e0 <fwrite@plt>
   16e0c:	bl	114d8 <abort@plt>
   16e10:	push	{r4, r5, r6, sl, fp, lr}
   16e14:	add	fp, sp, #16
   16e18:	mov	r4, r0
   16e1c:	movw	r0, #53696	; 0xd1c0
   16e20:	movt	r0, #2
   16e24:	cmp	r4, #0
   16e28:	moveq	r4, r0
   16e2c:	bl	113d0 <__errno_location@plt>
   16e30:	ldr	r6, [r0]
   16e34:	mov	r5, r0
   16e38:	mov	r0, r4
   16e3c:	mov	r1, #48	; 0x30
   16e40:	bl	19cdc <__assert_fail@plt+0x87bc>
   16e44:	str	r6, [r5]
   16e48:	pop	{r4, r5, r6, sl, fp, pc}
   16e4c:	movw	r1, #53696	; 0xd1c0
   16e50:	cmp	r0, #0
   16e54:	movt	r1, #2
   16e58:	movne	r1, r0
   16e5c:	ldr	r0, [r1]
   16e60:	bx	lr
   16e64:	movw	r2, #53696	; 0xd1c0
   16e68:	cmp	r0, #0
   16e6c:	movt	r2, #2
   16e70:	movne	r2, r0
   16e74:	str	r1, [r2]
   16e78:	bx	lr
   16e7c:	movw	r3, #53696	; 0xd1c0
   16e80:	cmp	r0, #0
   16e84:	and	r2, r2, #1
   16e88:	movt	r3, #2
   16e8c:	movne	r3, r0
   16e90:	ubfx	r0, r1, #5, #3
   16e94:	and	r1, r1, #31
   16e98:	add	ip, r3, r0, lsl #2
   16e9c:	mov	r0, #1
   16ea0:	ldr	r3, [ip, #8]
   16ea4:	and	r0, r0, r3, lsr r1
   16ea8:	eor	r2, r0, r2
   16eac:	eor	r1, r3, r2, lsl r1
   16eb0:	str	r1, [ip, #8]
   16eb4:	bx	lr
   16eb8:	movw	r2, #53696	; 0xd1c0
   16ebc:	cmp	r0, #0
   16ec0:	movt	r2, #2
   16ec4:	movne	r2, r0
   16ec8:	ldr	r0, [r2, #4]
   16ecc:	str	r1, [r2, #4]
   16ed0:	bx	lr
   16ed4:	push	{fp, lr}
   16ed8:	mov	fp, sp
   16edc:	movw	r3, #53696	; 0xd1c0
   16ee0:	cmp	r0, #0
   16ee4:	movt	r3, #2
   16ee8:	movne	r3, r0
   16eec:	cmp	r1, #0
   16ef0:	mov	r0, #10
   16ef4:	cmpne	r2, #0
   16ef8:	str	r0, [r3]
   16efc:	bne	16f04 <__assert_fail@plt+0x59e4>
   16f00:	bl	114d8 <abort@plt>
   16f04:	str	r1, [r3, #40]	; 0x28
   16f08:	str	r2, [r3, #44]	; 0x2c
   16f0c:	pop	{fp, pc}
   16f10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f14:	add	fp, sp, #28
   16f18:	sub	sp, sp, #20
   16f1c:	mov	r7, r0
   16f20:	ldr	r0, [fp, #8]
   16f24:	movw	r5, #53696	; 0xd1c0
   16f28:	mov	r8, r3
   16f2c:	mov	r9, r2
   16f30:	mov	sl, r1
   16f34:	movt	r5, #2
   16f38:	cmp	r0, #0
   16f3c:	movne	r5, r0
   16f40:	bl	113d0 <__errno_location@plt>
   16f44:	ldr	r2, [r5, #40]	; 0x28
   16f48:	ldr	r3, [r5, #44]	; 0x2c
   16f4c:	mov	r4, r0
   16f50:	ldm	r5, {r0, r1}
   16f54:	add	r5, r5, #8
   16f58:	ldr	r6, [r4]
   16f5c:	stm	sp, {r0, r1, r5}
   16f60:	mov	r0, r7
   16f64:	mov	r1, sl
   16f68:	str	r2, [sp, #12]
   16f6c:	str	r3, [sp, #16]
   16f70:	mov	r2, r9
   16f74:	mov	r3, r8
   16f78:	bl	16f88 <__assert_fail@plt+0x5a68>
   16f7c:	str	r6, [r4]
   16f80:	sub	sp, fp, #28
   16f84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f8c:	add	fp, sp, #28
   16f90:	sub	sp, sp, #156	; 0x9c
   16f94:	str	r0, [fp, #-84]	; 0xffffffac
   16f98:	add	r0, r2, #1
   16f9c:	mov	r6, r1
   16fa0:	mov	r7, r3
   16fa4:	str	r2, [fp, #-80]	; 0xffffffb0
   16fa8:	str	r0, [sp, #80]	; 0x50
   16fac:	ldr	r0, [fp, #12]
   16fb0:	and	r1, r0, #1
   16fb4:	str	r1, [sp, #36]	; 0x24
   16fb8:	and	r1, r0, #4
   16fbc:	str	r1, [sp, #32]
   16fc0:	ubfx	r8, r0, #1, #1
   16fc4:	bl	112f8 <__ctype_get_mb_cur_max@plt>
   16fc8:	str	r0, [sp, #40]	; 0x28
   16fcc:	ldr	r0, [fp, #24]
   16fd0:	ldr	r4, [fp, #8]
   16fd4:	mov	r1, #0
   16fd8:	str	r1, [fp, #-52]	; 0xffffffcc
   16fdc:	mov	r1, #0
   16fe0:	str	r1, [sp, #60]	; 0x3c
   16fe4:	mov	r1, #1
   16fe8:	str	r1, [sp, #84]	; 0x54
   16fec:	str	r0, [sp, #76]	; 0x4c
   16ff0:	ldr	r0, [fp, #20]
   16ff4:	str	r0, [sp, #72]	; 0x48
   16ff8:	mov	r0, #0
   16ffc:	str	r0, [sp, #56]	; 0x38
   17000:	mov	r0, #0
   17004:	str	r0, [fp, #-88]	; 0xffffffa8
   17008:	mov	r0, #0
   1700c:	str	r0, [fp, #-72]	; 0xffffffb8
   17010:	mov	r0, #0
   17014:	cmp	r4, #10
   17018:	bhi	18334 <__assert_fail@plt+0x6e14>
   1701c:	add	r1, pc, #24
   17020:	ldr	ip, [fp, #-84]	; 0xffffffac
   17024:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17028:	mov	r5, r6
   1702c:	mov	r9, #0
   17030:	mov	r2, #1
   17034:	mov	r3, #0
   17038:	ldr	pc, [r1, r4, lsl #2]
   1703c:	andeq	r7, r1, r4, lsl #2
   17040:	andeq	r7, r1, r0, asr #2
   17044:	andeq	r7, r1, r4, lsl r1
   17048:	strdeq	r7, [r1], -ip
   1704c:	andeq	r7, r1, r4, lsr r1
   17050:	muleq	r1, r8, r1
   17054:	andeq	r7, r1, r4, lsr #2
   17058:	andeq	r7, r1, r0, lsl r4
   1705c:	andeq	r7, r1, r8, rrx
   17060:	andeq	r7, r1, r8, rrx
   17064:	andeq	r7, r1, r0, lsr #5
   17068:	movw	r6, #49910	; 0xc2f6
   1706c:	mov	r0, #0
   17070:	mov	r2, #5
   17074:	movt	r6, #1
   17078:	mov	r1, r6
   1707c:	bl	11298 <dcgettext@plt>
   17080:	cmp	r0, r6
   17084:	str	r0, [sp, #72]	; 0x48
   17088:	bne	17278 <__assert_fail@plt+0x5d58>
   1708c:	bl	1ad00 <__assert_fail@plt+0x97e0>
   17090:	ldrb	r1, [r0]
   17094:	and	r1, r1, #223	; 0xdf
   17098:	cmp	r1, #71	; 0x47
   1709c:	beq	171f8 <__assert_fail@plt+0x5cd8>
   170a0:	cmp	r1, #85	; 0x55
   170a4:	bne	1725c <__assert_fail@plt+0x5d3c>
   170a8:	ldrb	r1, [r0, #1]
   170ac:	and	r1, r1, #223	; 0xdf
   170b0:	cmp	r1, #84	; 0x54
   170b4:	bne	1725c <__assert_fail@plt+0x5d3c>
   170b8:	ldrb	r1, [r0, #2]
   170bc:	and	r1, r1, #223	; 0xdf
   170c0:	cmp	r1, #70	; 0x46
   170c4:	bne	1725c <__assert_fail@plt+0x5d3c>
   170c8:	ldrb	r1, [r0, #3]
   170cc:	cmp	r1, #45	; 0x2d
   170d0:	bne	1725c <__assert_fail@plt+0x5d3c>
   170d4:	ldrb	r1, [r0, #4]
   170d8:	cmp	r1, #56	; 0x38
   170dc:	bne	1725c <__assert_fail@plt+0x5d3c>
   170e0:	ldrb	r0, [r0, #5]
   170e4:	cmp	r0, #0
   170e8:	movw	r0, #49914	; 0xc2fa
   170ec:	movt	r0, #1
   170f0:	str	r0, [sp, #72]	; 0x48
   170f4:	bne	1725c <__assert_fail@plt+0x5d3c>
   170f8:	b	17278 <__assert_fail@plt+0x5d58>
   170fc:	mov	r0, #1
   17100:	b	17140 <__assert_fail@plt+0x5c20>
   17104:	mov	r4, #0
   17108:	mov	r9, #0
   1710c:	mov	r2, r0
   17110:	b	17190 <__assert_fail@plt+0x5c70>
   17114:	tst	r8, #1
   17118:	bne	17140 <__assert_fail@plt+0x5c20>
   1711c:	mov	r2, r0
   17120:	b	17168 <__assert_fail@plt+0x5c48>
   17124:	mov	r0, #1
   17128:	mov	r9, #0
   1712c:	mov	r4, #5
   17130:	b	171ac <__assert_fail@plt+0x5c8c>
   17134:	mov	r2, #1
   17138:	tst	r8, #1
   1713c:	beq	17168 <__assert_fail@plt+0x5c48>
   17140:	mov	r1, #1
   17144:	mov	r9, #0
   17148:	mov	r4, #2
   1714c:	mov	r2, r0
   17150:	mov	r3, #1
   17154:	str	r1, [fp, #-72]	; 0xffffffb8
   17158:	movw	r1, #49912	; 0xc2f8
   1715c:	movt	r1, #1
   17160:	str	r1, [fp, #-88]	; 0xffffffa8
   17164:	b	17410 <__assert_fail@plt+0x5ef0>
   17168:	cmp	r5, #0
   1716c:	mov	r9, #1
   17170:	mov	r4, #2
   17174:	movne	r0, #39	; 0x27
   17178:	strbne	r0, [ip]
   1717c:	movw	r0, #49912	; 0xc2f8
   17180:	movt	r0, #1
   17184:	str	r0, [fp, #-88]	; 0xffffffa8
   17188:	mov	r0, #1
   1718c:	str	r0, [fp, #-72]	; 0xffffffb8
   17190:	mov	r3, #0
   17194:	b	17410 <__assert_fail@plt+0x5ef0>
   17198:	mov	r4, #5
   1719c:	tst	r8, #1
   171a0:	beq	171c8 <__assert_fail@plt+0x5ca8>
   171a4:	mov	r0, #1
   171a8:	mov	r9, #0
   171ac:	str	r0, [fp, #-72]	; 0xffffffb8
   171b0:	movw	r0, #49908	; 0xc2f4
   171b4:	mov	r2, #1
   171b8:	mov	r3, #1
   171bc:	movt	r0, #1
   171c0:	str	r0, [fp, #-88]	; 0xffffffa8
   171c4:	b	17410 <__assert_fail@plt+0x5ef0>
   171c8:	cmp	r5, #0
   171cc:	mov	r3, #0
   171d0:	mov	r9, #1
   171d4:	mov	r2, #1
   171d8:	movne	r0, #34	; 0x22
   171dc:	strbne	r0, [ip]
   171e0:	movw	r0, #49908	; 0xc2f4
   171e4:	movt	r0, #1
   171e8:	str	r0, [fp, #-88]	; 0xffffffa8
   171ec:	mov	r0, #1
   171f0:	str	r0, [fp, #-72]	; 0xffffffb8
   171f4:	b	17410 <__assert_fail@plt+0x5ef0>
   171f8:	ldrb	r1, [r0, #1]
   171fc:	and	r1, r1, #223	; 0xdf
   17200:	cmp	r1, #66	; 0x42
   17204:	bne	1725c <__assert_fail@plt+0x5d3c>
   17208:	ldrb	r1, [r0, #2]
   1720c:	cmp	r1, #49	; 0x31
   17210:	bne	1725c <__assert_fail@plt+0x5d3c>
   17214:	ldrb	r1, [r0, #3]
   17218:	cmp	r1, #56	; 0x38
   1721c:	bne	1725c <__assert_fail@plt+0x5d3c>
   17220:	ldrb	r1, [r0, #4]
   17224:	cmp	r1, #48	; 0x30
   17228:	bne	1725c <__assert_fail@plt+0x5d3c>
   1722c:	ldrb	r1, [r0, #5]
   17230:	cmp	r1, #51	; 0x33
   17234:	bne	1725c <__assert_fail@plt+0x5d3c>
   17238:	ldrb	r1, [r0, #6]
   1723c:	cmp	r1, #48	; 0x30
   17240:	bne	1725c <__assert_fail@plt+0x5d3c>
   17244:	ldrb	r0, [r0, #7]
   17248:	cmp	r0, #0
   1724c:	movw	r0, #49922	; 0xc302
   17250:	movt	r0, #1
   17254:	str	r0, [sp, #72]	; 0x48
   17258:	beq	17278 <__assert_fail@plt+0x5d58>
   1725c:	movw	r1, #49908	; 0xc2f4
   17260:	movw	r0, #49912	; 0xc2f8
   17264:	cmp	r4, #9
   17268:	movt	r1, #1
   1726c:	movt	r0, #1
   17270:	moveq	r0, r1
   17274:	str	r0, [sp, #72]	; 0x48
   17278:	movw	r6, #49912	; 0xc2f8
   1727c:	mov	r0, #0
   17280:	mov	r2, #5
   17284:	movt	r6, #1
   17288:	mov	r1, r6
   1728c:	bl	11298 <dcgettext@plt>
   17290:	cmp	r0, r6
   17294:	str	r0, [sp, #76]	; 0x4c
   17298:	beq	172e4 <__assert_fail@plt+0x5dc4>
   1729c:	ldr	ip, [fp, #-84]	; 0xffffffac
   172a0:	mov	r9, #0
   172a4:	tst	r8, #1
   172a8:	bne	173ec <__assert_fail@plt+0x5ecc>
   172ac:	ldr	r0, [sp, #72]	; 0x48
   172b0:	ldrb	r0, [r0]
   172b4:	cmp	r0, #0
   172b8:	beq	173ec <__assert_fail@plt+0x5ecc>
   172bc:	ldr	r1, [sp, #72]	; 0x48
   172c0:	mov	r9, #0
   172c4:	add	r1, r1, #1
   172c8:	cmp	r9, r5
   172cc:	strbcc	r0, [ip, r9]
   172d0:	ldrb	r0, [r1, r9]
   172d4:	add	r9, r9, #1
   172d8:	cmp	r0, #0
   172dc:	bne	172c8 <__assert_fail@plt+0x5da8>
   172e0:	b	173ec <__assert_fail@plt+0x5ecc>
   172e4:	bl	1ad00 <__assert_fail@plt+0x97e0>
   172e8:	ldrb	r1, [r0]
   172ec:	and	r1, r1, #223	; 0xdf
   172f0:	cmp	r1, #71	; 0x47
   172f4:	beq	17364 <__assert_fail@plt+0x5e44>
   172f8:	ldr	ip, [fp, #-84]	; 0xffffffac
   172fc:	cmp	r1, #85	; 0x55
   17300:	bne	173c0 <__assert_fail@plt+0x5ea0>
   17304:	ldrb	r1, [r0, #1]
   17308:	and	r1, r1, #223	; 0xdf
   1730c:	cmp	r1, #84	; 0x54
   17310:	bne	173c0 <__assert_fail@plt+0x5ea0>
   17314:	ldrb	r1, [r0, #2]
   17318:	and	r1, r1, #223	; 0xdf
   1731c:	cmp	r1, #70	; 0x46
   17320:	bne	173c0 <__assert_fail@plt+0x5ea0>
   17324:	ldrb	r1, [r0, #3]
   17328:	cmp	r1, #45	; 0x2d
   1732c:	bne	173c0 <__assert_fail@plt+0x5ea0>
   17330:	ldrb	r1, [r0, #4]
   17334:	cmp	r1, #56	; 0x38
   17338:	bne	173c0 <__assert_fail@plt+0x5ea0>
   1733c:	ldrb	r0, [r0, #5]
   17340:	cmp	r0, #0
   17344:	bne	173c0 <__assert_fail@plt+0x5ea0>
   17348:	movw	r0, #49918	; 0xc2fe
   1734c:	movt	r0, #1
   17350:	str	r0, [sp, #76]	; 0x4c
   17354:	mov	r9, #0
   17358:	tst	r8, #1
   1735c:	beq	172ac <__assert_fail@plt+0x5d8c>
   17360:	b	173ec <__assert_fail@plt+0x5ecc>
   17364:	ldrb	r1, [r0, #1]
   17368:	ldr	ip, [fp, #-84]	; 0xffffffac
   1736c:	and	r1, r1, #223	; 0xdf
   17370:	cmp	r1, #66	; 0x42
   17374:	bne	173c0 <__assert_fail@plt+0x5ea0>
   17378:	ldrb	r1, [r0, #2]
   1737c:	cmp	r1, #49	; 0x31
   17380:	bne	173c0 <__assert_fail@plt+0x5ea0>
   17384:	ldrb	r1, [r0, #3]
   17388:	cmp	r1, #56	; 0x38
   1738c:	bne	173c0 <__assert_fail@plt+0x5ea0>
   17390:	ldrb	r1, [r0, #4]
   17394:	cmp	r1, #48	; 0x30
   17398:	bne	173c0 <__assert_fail@plt+0x5ea0>
   1739c:	ldrb	r1, [r0, #5]
   173a0:	cmp	r1, #51	; 0x33
   173a4:	bne	173c0 <__assert_fail@plt+0x5ea0>
   173a8:	ldrb	r1, [r0, #6]
   173ac:	cmp	r1, #48	; 0x30
   173b0:	bne	173c0 <__assert_fail@plt+0x5ea0>
   173b4:	ldrb	r0, [r0, #7]
   173b8:	cmp	r0, #0
   173bc:	beq	181d4 <__assert_fail@plt+0x6cb4>
   173c0:	movw	r0, #49912	; 0xc2f8
   173c4:	cmp	r4, #9
   173c8:	movt	r0, #1
   173cc:	mov	r1, r0
   173d0:	movw	r0, #49908	; 0xc2f4
   173d4:	movt	r0, #1
   173d8:	moveq	r1, r0
   173dc:	str	r1, [sp, #76]	; 0x4c
   173e0:	mov	r9, #0
   173e4:	tst	r8, #1
   173e8:	beq	172ac <__assert_fail@plt+0x5d8c>
   173ec:	ldr	r6, [sp, #76]	; 0x4c
   173f0:	mov	r0, r6
   173f4:	bl	113a0 <strlen@plt>
   173f8:	ldr	ip, [fp, #-84]	; 0xffffffac
   173fc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17400:	str	r0, [fp, #-72]	; 0xffffffb8
   17404:	str	r6, [fp, #-88]	; 0xffffffa8
   17408:	mov	r2, #1
   1740c:	mov	r3, r8
   17410:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17414:	str	r4, [fp, #-64]	; 0xffffffc0
   17418:	mov	sl, #0
   1741c:	str	r3, [fp, #-76]	; 0xffffffb4
   17420:	str	r2, [sp, #88]	; 0x58
   17424:	cmp	r0, #0
   17428:	movwne	r0, #1
   1742c:	and	r1, r0, r3
   17430:	and	r1, r2, r1
   17434:	str	r1, [sp, #48]	; 0x30
   17438:	sub	r1, r4, #2
   1743c:	clz	r1, r1
   17440:	lsr	r1, r1, #5
   17444:	and	r1, r1, r3
   17448:	str	r1, [sp, #44]	; 0x2c
   1744c:	subs	r1, r4, #2
   17450:	eor	r4, r3, #1
   17454:	movwne	r1, #1
   17458:	str	r4, [sp, #92]	; 0x5c
   1745c:	orr	r4, r1, r4
   17460:	and	r1, r1, r2
   17464:	and	r0, r0, r1
   17468:	str	r4, [sp, #64]	; 0x40
   1746c:	ldr	r4, [sp, #84]	; 0x54
   17470:	str	r0, [fp, #-60]	; 0xffffffc4
   17474:	orr	r0, r1, r3
   17478:	ldr	r1, [fp, #16]
   1747c:	eor	r0, r0, #1
   17480:	clz	r1, r1
   17484:	lsr	r1, r1, #5
   17488:	orr	r0, r1, r0
   1748c:	str	r0, [fp, #-68]	; 0xffffffbc
   17490:	eor	r0, r2, #1
   17494:	str	r0, [sp, #52]	; 0x34
   17498:	cmn	r7, #1
   1749c:	beq	174ac <__assert_fail@plt+0x5f8c>
   174a0:	cmp	sl, r7
   174a4:	bne	174b8 <__assert_fail@plt+0x5f98>
   174a8:	b	1814c <__assert_fail@plt+0x6c2c>
   174ac:	ldrb	r0, [lr, sl]
   174b0:	cmp	r0, #0
   174b4:	beq	18154 <__assert_fail@plt+0x6c34>
   174b8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   174bc:	cmp	r0, #0
   174c0:	beq	17520 <__assert_fail@plt+0x6000>
   174c4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   174c8:	mov	r6, r5
   174cc:	add	r5, sl, r0
   174d0:	cmp	r0, #2
   174d4:	bcc	17540 <__assert_fail@plt+0x6020>
   174d8:	mov	r0, #0
   174dc:	cmn	r7, #1
   174e0:	str	r0, [fp, #-56]	; 0xffffffc8
   174e4:	bne	174fc <__assert_fail@plt+0x5fdc>
   174e8:	mov	r0, lr
   174ec:	bl	113a0 <strlen@plt>
   174f0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   174f4:	ldr	ip, [fp, #-84]	; 0xffffffac
   174f8:	mov	r7, r0
   174fc:	cmp	r5, r7
   17500:	bls	17550 <__assert_fail@plt+0x6030>
   17504:	mov	r0, #0
   17508:	mov	r5, r6
   1750c:	str	r0, [fp, #-48]	; 0xffffffd0
   17510:	ldrb	r6, [lr, sl]
   17514:	cmp	r6, #126	; 0x7e
   17518:	bls	175a0 <__assert_fail@plt+0x6080>
   1751c:	b	17afc <__assert_fail@plt+0x65dc>
   17520:	mov	r0, #0
   17524:	str	r0, [fp, #-56]	; 0xffffffc8
   17528:	mov	r0, #0
   1752c:	str	r0, [fp, #-48]	; 0xffffffd0
   17530:	ldrb	r6, [lr, sl]
   17534:	cmp	r6, #126	; 0x7e
   17538:	bls	175a0 <__assert_fail@plt+0x6080>
   1753c:	b	17afc <__assert_fail@plt+0x65dc>
   17540:	mov	r0, #0
   17544:	str	r0, [fp, #-56]	; 0xffffffc8
   17548:	cmp	r5, r7
   1754c:	bhi	17504 <__assert_fail@plt+0x5fe4>
   17550:	ldr	r1, [fp, #-88]	; 0xffffffa8
   17554:	ldr	r2, [fp, #-72]	; 0xffffffb8
   17558:	add	r0, lr, sl
   1755c:	bl	11388 <bcmp@plt>
   17560:	ldr	r2, [sp, #92]	; 0x5c
   17564:	cmp	r0, #0
   17568:	mov	r1, r0
   1756c:	mov	r5, r6
   17570:	movwne	r1, #1
   17574:	orr	r1, r1, r2
   17578:	tst	r1, #1
   1757c:	beq	18214 <__assert_fail@plt+0x6cf4>
   17580:	ldr	ip, [fp, #-84]	; 0xffffffac
   17584:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17588:	clz	r0, r0
   1758c:	lsr	r0, r0, #5
   17590:	str	r0, [fp, #-48]	; 0xffffffd0
   17594:	ldrb	r6, [lr, sl]
   17598:	cmp	r6, #126	; 0x7e
   1759c:	bhi	17afc <__assert_fail@plt+0x65dc>
   175a0:	add	r3, pc, #16
   175a4:	mov	r8, #1
   175a8:	mov	r2, #110	; 0x6e
   175ac:	mov	r0, #97	; 0x61
   175b0:	mov	r1, #0
   175b4:	ldr	pc, [r3, r6, lsl #2]
   175b8:			; <UNDEFINED> instruction: 0x000178b4
   175bc:	strdeq	r7, [r1], -ip
   175c0:	strdeq	r7, [r1], -ip
   175c4:	strdeq	r7, [r1], -ip
   175c8:	strdeq	r7, [r1], -ip
   175cc:	strdeq	r7, [r1], -ip
   175d0:	strdeq	r7, [r1], -ip
   175d4:			; <UNDEFINED> instruction: 0x00017bb0
   175d8:	muleq	r1, r4, r8
   175dc:	andeq	r7, r1, ip, lsl #17
   175e0:	andeq	r7, r1, r0, lsr #17
   175e4:	ldrdeq	r7, [r1], -r0
   175e8:	andeq	r7, r1, r4, lsl #17
   175ec:	muleq	r1, ip, r8
   175f0:	strdeq	r7, [r1], -ip
   175f4:	strdeq	r7, [r1], -ip
   175f8:	strdeq	r7, [r1], -ip
   175fc:	strdeq	r7, [r1], -ip
   17600:	strdeq	r7, [r1], -ip
   17604:	strdeq	r7, [r1], -ip
   17608:	strdeq	r7, [r1], -ip
   1760c:	strdeq	r7, [r1], -ip
   17610:	strdeq	r7, [r1], -ip
   17614:	strdeq	r7, [r1], -ip
   17618:	strdeq	r7, [r1], -ip
   1761c:	strdeq	r7, [r1], -ip
   17620:	strdeq	r7, [r1], -ip
   17624:	strdeq	r7, [r1], -ip
   17628:	strdeq	r7, [r1], -ip
   1762c:	strdeq	r7, [r1], -ip
   17630:	strdeq	r7, [r1], -ip
   17634:	strdeq	r7, [r1], -ip
   17638:	andeq	r7, r1, r8, lsr #16
   1763c:	andeq	r7, r1, ip, lsr #16
   17640:	andeq	r7, r1, ip, lsr #16
   17644:	andeq	r7, r1, ip, lsl r8
   17648:	andeq	r7, r1, ip, lsr #16
   1764c:			; <UNDEFINED> instruction: 0x000177b4
   17650:	andeq	r7, r1, ip, lsr #16
   17654:	ldrdeq	r7, [r1], -r8
   17658:	andeq	r7, r1, ip, lsr #16
   1765c:	andeq	r7, r1, ip, lsr #16
   17660:	andeq	r7, r1, ip, lsr #16
   17664:			; <UNDEFINED> instruction: 0x000177b4
   17668:			; <UNDEFINED> instruction: 0x000177b4
   1766c:			; <UNDEFINED> instruction: 0x000177b4
   17670:			; <UNDEFINED> instruction: 0x000177b4
   17674:			; <UNDEFINED> instruction: 0x000177b4
   17678:			; <UNDEFINED> instruction: 0x000177b4
   1767c:			; <UNDEFINED> instruction: 0x000177b4
   17680:			; <UNDEFINED> instruction: 0x000177b4
   17684:			; <UNDEFINED> instruction: 0x000177b4
   17688:			; <UNDEFINED> instruction: 0x000177b4
   1768c:			; <UNDEFINED> instruction: 0x000177b4
   17690:			; <UNDEFINED> instruction: 0x000177b4
   17694:			; <UNDEFINED> instruction: 0x000177b4
   17698:			; <UNDEFINED> instruction: 0x000177b4
   1769c:			; <UNDEFINED> instruction: 0x000177b4
   176a0:			; <UNDEFINED> instruction: 0x000177b4
   176a4:	andeq	r7, r1, ip, lsr #16
   176a8:	andeq	r7, r1, ip, lsr #16
   176ac:	andeq	r7, r1, ip, lsr #16
   176b0:	andeq	r7, r1, ip, lsr #16
   176b4:	muleq	r1, ip, r9
   176b8:	strdeq	r7, [r1], -ip
   176bc:			; <UNDEFINED> instruction: 0x000177b4
   176c0:			; <UNDEFINED> instruction: 0x000177b4
   176c4:			; <UNDEFINED> instruction: 0x000177b4
   176c8:			; <UNDEFINED> instruction: 0x000177b4
   176cc:			; <UNDEFINED> instruction: 0x000177b4
   176d0:			; <UNDEFINED> instruction: 0x000177b4
   176d4:			; <UNDEFINED> instruction: 0x000177b4
   176d8:			; <UNDEFINED> instruction: 0x000177b4
   176dc:			; <UNDEFINED> instruction: 0x000177b4
   176e0:			; <UNDEFINED> instruction: 0x000177b4
   176e4:			; <UNDEFINED> instruction: 0x000177b4
   176e8:			; <UNDEFINED> instruction: 0x000177b4
   176ec:			; <UNDEFINED> instruction: 0x000177b4
   176f0:			; <UNDEFINED> instruction: 0x000177b4
   176f4:			; <UNDEFINED> instruction: 0x000177b4
   176f8:			; <UNDEFINED> instruction: 0x000177b4
   176fc:			; <UNDEFINED> instruction: 0x000177b4
   17700:			; <UNDEFINED> instruction: 0x000177b4
   17704:			; <UNDEFINED> instruction: 0x000177b4
   17708:			; <UNDEFINED> instruction: 0x000177b4
   1770c:			; <UNDEFINED> instruction: 0x000177b4
   17710:			; <UNDEFINED> instruction: 0x000177b4
   17714:			; <UNDEFINED> instruction: 0x000177b4
   17718:			; <UNDEFINED> instruction: 0x000177b4
   1771c:			; <UNDEFINED> instruction: 0x000177b4
   17720:			; <UNDEFINED> instruction: 0x000177b4
   17724:	andeq	r7, r1, ip, lsr #16
   17728:	andeq	r7, r1, r0, ror #16
   1772c:			; <UNDEFINED> instruction: 0x000177b4
   17730:	andeq	r7, r1, ip, lsr #16
   17734:			; <UNDEFINED> instruction: 0x000177b4
   17738:	andeq	r7, r1, ip, lsr #16
   1773c:			; <UNDEFINED> instruction: 0x000177b4
   17740:			; <UNDEFINED> instruction: 0x000177b4
   17744:			; <UNDEFINED> instruction: 0x000177b4
   17748:			; <UNDEFINED> instruction: 0x000177b4
   1774c:			; <UNDEFINED> instruction: 0x000177b4
   17750:			; <UNDEFINED> instruction: 0x000177b4
   17754:			; <UNDEFINED> instruction: 0x000177b4
   17758:			; <UNDEFINED> instruction: 0x000177b4
   1775c:			; <UNDEFINED> instruction: 0x000177b4
   17760:			; <UNDEFINED> instruction: 0x000177b4
   17764:			; <UNDEFINED> instruction: 0x000177b4
   17768:			; <UNDEFINED> instruction: 0x000177b4
   1776c:			; <UNDEFINED> instruction: 0x000177b4
   17770:			; <UNDEFINED> instruction: 0x000177b4
   17774:			; <UNDEFINED> instruction: 0x000177b4
   17778:			; <UNDEFINED> instruction: 0x000177b4
   1777c:			; <UNDEFINED> instruction: 0x000177b4
   17780:			; <UNDEFINED> instruction: 0x000177b4
   17784:			; <UNDEFINED> instruction: 0x000177b4
   17788:			; <UNDEFINED> instruction: 0x000177b4
   1778c:			; <UNDEFINED> instruction: 0x000177b4
   17790:			; <UNDEFINED> instruction: 0x000177b4
   17794:			; <UNDEFINED> instruction: 0x000177b4
   17798:			; <UNDEFINED> instruction: 0x000177b4
   1779c:			; <UNDEFINED> instruction: 0x000177b4
   177a0:			; <UNDEFINED> instruction: 0x000177b4
   177a4:	strdeq	r7, [r1], -r4
   177a8:	andeq	r7, r1, ip, lsr #16
   177ac:	strdeq	r7, [r1], -r4
   177b0:	andeq	r7, r1, ip, lsl r8
   177b4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   177b8:	tst	r0, #1
   177bc:	bne	17a74 <__assert_fail@plt+0x6554>
   177c0:	ldr	r1, [fp, #16]
   177c4:	ubfx	r0, r6, #5, #3
   177c8:	mov	r2, #1
   177cc:	ldr	r0, [r1, r0, lsl #2]
   177d0:	and	r1, r6, #31
   177d4:	tst	r0, r2, lsl r1
   177d8:	beq	17a74 <__assert_fail@plt+0x6554>
   177dc:	mov	r0, r6
   177e0:	mov	r1, r8
   177e4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   177e8:	tst	r2, #1
   177ec:	beq	17a94 <__assert_fail@plt+0x6574>
   177f0:	b	181f0 <__assert_fail@plt+0x6cd0>
   177f4:	cmp	r7, #1
   177f8:	beq	1781c <__assert_fail@plt+0x62fc>
   177fc:	mov	r8, #0
   17800:	cmn	r7, #1
   17804:	bne	17a60 <__assert_fail@plt+0x6540>
   17808:	ldrb	r0, [lr, #1]
   1780c:	cmp	r0, #0
   17810:	beq	1781c <__assert_fail@plt+0x62fc>
   17814:	mvn	r7, #0
   17818:	b	17a60 <__assert_fail@plt+0x6540>
   1781c:	mov	r8, #0
   17820:	cmp	sl, #0
   17824:	bne	17a60 <__assert_fail@plt+0x6540>
   17828:	mov	r1, #1
   1782c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17830:	cmp	r0, #2
   17834:	bne	1784c <__assert_fail@plt+0x632c>
   17838:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1783c:	mov	r8, r1
   17840:	tst	r0, #1
   17844:	beq	177b4 <__assert_fail@plt+0x6294>
   17848:	b	181f0 <__assert_fail@plt+0x6cd0>
   1784c:	mov	r8, r1
   17850:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17854:	tst	r0, #1
   17858:	beq	177c0 <__assert_fail@plt+0x62a0>
   1785c:	b	17a74 <__assert_fail@plt+0x6554>
   17860:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17864:	cmp	r0, #2
   17868:	bne	17b28 <__assert_fail@plt+0x6608>
   1786c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17870:	tst	r0, #1
   17874:	bne	181f0 <__assert_fail@plt+0x6cd0>
   17878:	mov	r0, #0
   1787c:	str	r0, [fp, #-56]	; 0xffffffc8
   17880:	b	17b40 <__assert_fail@plt+0x6620>
   17884:	mov	r0, #102	; 0x66
   17888:	b	17bb0 <__assert_fail@plt+0x6690>
   1788c:	mov	r2, #116	; 0x74
   17890:	b	178a0 <__assert_fail@plt+0x6380>
   17894:	mov	r0, #98	; 0x62
   17898:	b	17bb0 <__assert_fail@plt+0x6690>
   1789c:	mov	r2, #114	; 0x72
   178a0:	ldr	r0, [sp, #64]	; 0x40
   178a4:	tst	r0, #1
   178a8:	mov	r0, r2
   178ac:	bne	17bb0 <__assert_fail@plt+0x6690>
   178b0:	b	181f0 <__assert_fail@plt+0x6cd0>
   178b4:	ldr	r0, [sp, #88]	; 0x58
   178b8:	tst	r0, #1
   178bc:	beq	17bd0 <__assert_fail@plt+0x66b0>
   178c0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   178c4:	tst	r0, #1
   178c8:	bne	1832c <__assert_fail@plt+0x6e0c>
   178cc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   178d0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   178d4:	subs	r0, r0, #2
   178d8:	movwne	r0, #1
   178dc:	orr	r0, r0, r1
   178e0:	tst	r0, #1
   178e4:	bne	17920 <__assert_fail@plt+0x6400>
   178e8:	cmp	r9, r5
   178ec:	movcc	r0, #39	; 0x27
   178f0:	strbcc	r0, [ip, r9]
   178f4:	add	r0, r9, #1
   178f8:	cmp	r0, r5
   178fc:	movcc	r1, #36	; 0x24
   17900:	strbcc	r1, [ip, r0]
   17904:	add	r0, r9, #2
   17908:	add	r9, r9, #3
   1790c:	cmp	r0, r5
   17910:	movcc	r1, #39	; 0x27
   17914:	strbcc	r1, [ip, r0]
   17918:	mov	r0, #1
   1791c:	str	r0, [fp, #-52]	; 0xffffffcc
   17920:	mov	r1, #1
   17924:	cmp	r9, r5
   17928:	mov	r8, #0
   1792c:	mov	r6, #48	; 0x30
   17930:	str	r1, [fp, #-56]	; 0xffffffc8
   17934:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17938:	movcc	r0, #92	; 0x5c
   1793c:	strbcc	r0, [ip, r9]
   17940:	add	r0, r9, #1
   17944:	cmp	r1, #2
   17948:	beq	17d9c <__assert_fail@plt+0x687c>
   1794c:	add	r1, sl, #1
   17950:	cmp	r1, r7
   17954:	bcs	17d9c <__assert_fail@plt+0x687c>
   17958:	ldrb	r1, [lr, r1]
   1795c:	sub	r1, r1, #48	; 0x30
   17960:	uxtb	r1, r1
   17964:	cmp	r1, #9
   17968:	bhi	17d9c <__assert_fail@plt+0x687c>
   1796c:	cmp	r0, r5
   17970:	movcc	r1, #48	; 0x30
   17974:	strbcc	r1, [ip, r0]
   17978:	add	r0, r9, #2
   1797c:	add	r9, r9, #3
   17980:	cmp	r0, r5
   17984:	movcc	r1, #48	; 0x30
   17988:	strbcc	r1, [ip, r0]
   1798c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17990:	tst	r0, #1
   17994:	beq	177c0 <__assert_fail@plt+0x62a0>
   17998:	b	17a74 <__assert_fail@plt+0x6554>
   1799c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   179a0:	mov	r6, #63	; 0x3f
   179a4:	cmp	r0, #5
   179a8:	beq	17db0 <__assert_fail@plt+0x6890>
   179ac:	mov	r1, #0
   179b0:	cmp	r0, #2
   179b4:	str	r1, [fp, #-56]	; 0xffffffc8
   179b8:	bne	17e78 <__assert_fail@plt+0x6958>
   179bc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   179c0:	mov	r8, #0
   179c4:	tst	r0, #1
   179c8:	beq	177b4 <__assert_fail@plt+0x6294>
   179cc:	b	181f0 <__assert_fail@plt+0x6cd0>
   179d0:	mov	r0, #118	; 0x76
   179d4:	b	17bb0 <__assert_fail@plt+0x6690>
   179d8:	mov	r0, #1
   179dc:	mov	r6, #39	; 0x27
   179e0:	str	r0, [sp, #60]	; 0x3c
   179e4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   179e8:	cmp	r0, #2
   179ec:	bne	17bf0 <__assert_fail@plt+0x66d0>
   179f0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   179f4:	tst	r0, #1
   179f8:	bne	181f0 <__assert_fail@plt+0x6cd0>
   179fc:	ldr	r2, [sp, #56]	; 0x38
   17a00:	clz	r1, r5
   17a04:	mov	r8, #1
   17a08:	lsr	r1, r1, #5
   17a0c:	cmp	r2, #0
   17a10:	mov	r0, r2
   17a14:	movwne	r0, #1
   17a18:	orrs	r0, r0, r1
   17a1c:	moveq	r2, r5
   17a20:	moveq	r5, r0
   17a24:	cmp	r9, r5
   17a28:	str	r2, [sp, #56]	; 0x38
   17a2c:	movcc	r0, #39	; 0x27
   17a30:	strbcc	r0, [ip, r9]
   17a34:	add	r0, r9, #1
   17a38:	cmp	r0, r5
   17a3c:	movcc	r1, #92	; 0x5c
   17a40:	strbcc	r1, [ip, r0]
   17a44:	add	r0, r9, #2
   17a48:	add	r9, r9, #3
   17a4c:	cmp	r0, r5
   17a50:	movcc	r1, #39	; 0x27
   17a54:	strbcc	r1, [ip, r0]
   17a58:	mov	r0, #0
   17a5c:	str	r0, [fp, #-52]	; 0xffffffcc
   17a60:	mov	r0, #0
   17a64:	str	r0, [fp, #-56]	; 0xffffffc8
   17a68:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17a6c:	tst	r0, #1
   17a70:	beq	177c0 <__assert_fail@plt+0x62a0>
   17a74:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17a78:	mov	r1, r8
   17a7c:	cmp	r0, #0
   17a80:	mov	r0, r6
   17a84:	beq	17b48 <__assert_fail@plt+0x6628>
   17a88:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17a8c:	tst	r2, #1
   17a90:	bne	181f0 <__assert_fail@plt+0x6cd0>
   17a94:	ldr	r2, [fp, #-64]	; 0xffffffc0
   17a98:	ldr	r3, [fp, #-52]	; 0xffffffcc
   17a9c:	subs	r2, r2, #2
   17aa0:	movwne	r2, #1
   17aa4:	orr	r2, r2, r3
   17aa8:	tst	r2, #1
   17aac:	bne	17ae8 <__assert_fail@plt+0x65c8>
   17ab0:	cmp	r9, r5
   17ab4:	movcc	r2, #39	; 0x27
   17ab8:	strbcc	r2, [ip, r9]
   17abc:	add	r2, r9, #1
   17ac0:	cmp	r2, r5
   17ac4:	movcc	r3, #36	; 0x24
   17ac8:	strbcc	r3, [ip, r2]
   17acc:	add	r2, r9, #2
   17ad0:	add	r9, r9, #3
   17ad4:	cmp	r2, r5
   17ad8:	movcc	r3, #39	; 0x27
   17adc:	strbcc	r3, [ip, r2]
   17ae0:	mov	r2, #1
   17ae4:	str	r2, [fp, #-52]	; 0xffffffcc
   17ae8:	cmp	r9, r5
   17aec:	movcc	r2, #92	; 0x5c
   17af0:	strbcc	r2, [ip, r9]
   17af4:	add	r9, r9, #1
   17af8:	b	17b90 <__assert_fail@plt+0x6670>
   17afc:	ldr	r0, [sp, #40]	; 0x28
   17b00:	cmp	r0, #1
   17b04:	bne	17c04 <__assert_fail@plt+0x66e4>
   17b08:	bl	11370 <__ctype_b_loc@plt>
   17b0c:	ldr	r0, [r0]
   17b10:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17b14:	mov	r1, #1
   17b18:	add	r0, r0, r6, lsl #1
   17b1c:	ldrb	r0, [r0, #1]
   17b20:	ubfx	r8, r0, #6, #1
   17b24:	b	17f5c <__assert_fail@plt+0x6a3c>
   17b28:	ldr	r1, [sp, #48]	; 0x30
   17b2c:	mov	r0, #0
   17b30:	str	r0, [fp, #-56]	; 0xffffffc8
   17b34:	mov	r0, #92	; 0x5c
   17b38:	cmp	r1, #0
   17b3c:	beq	17bb0 <__assert_fail@plt+0x6690>
   17b40:	mov	r6, #92	; 0x5c
   17b44:	mov	r8, #0
   17b48:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17b4c:	cmp	r0, #0
   17b50:	bne	17b88 <__assert_fail@plt+0x6668>
   17b54:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17b58:	tst	r0, #1
   17b5c:	beq	17b88 <__assert_fail@plt+0x6668>
   17b60:	cmp	r9, r5
   17b64:	movcc	r0, #39	; 0x27
   17b68:	strbcc	r0, [ip, r9]
   17b6c:	add	r0, r9, #1
   17b70:	add	r9, r9, #2
   17b74:	cmp	r0, r5
   17b78:	movcc	r1, #39	; 0x27
   17b7c:	strbcc	r1, [ip, r0]
   17b80:	mov	r0, #0
   17b84:	str	r0, [fp, #-52]	; 0xffffffcc
   17b88:	mov	r1, r8
   17b8c:	mov	r0, r6
   17b90:	cmp	r9, r5
   17b94:	and	r4, r4, r1
   17b98:	strbcc	r0, [ip, r9]
   17b9c:	add	r9, r9, #1
   17ba0:	add	sl, sl, #1
   17ba4:	cmn	r7, #1
   17ba8:	bne	174a0 <__assert_fail@plt+0x5f80>
   17bac:	b	174ac <__assert_fail@plt+0x5f8c>
   17bb0:	mov	r1, #0
   17bb4:	mov	r8, #0
   17bb8:	str	r1, [fp, #-56]	; 0xffffffc8
   17bbc:	ldr	r1, [sp, #88]	; 0x58
   17bc0:	tst	r1, #1
   17bc4:	mov	r1, #0
   17bc8:	beq	177b4 <__assert_fail@plt+0x6294>
   17bcc:	b	17a88 <__assert_fail@plt+0x6568>
   17bd0:	ldr	r0, [sp, #36]	; 0x24
   17bd4:	mov	r6, #0
   17bd8:	mov	r8, #0
   17bdc:	cmp	r0, #0
   17be0:	mov	r0, #0
   17be4:	str	r0, [fp, #-56]	; 0xffffffc8
   17be8:	bne	17ba0 <__assert_fail@plt+0x6680>
   17bec:	b	177b4 <__assert_fail@plt+0x6294>
   17bf0:	mov	r8, #1
   17bf4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17bf8:	tst	r0, #1
   17bfc:	beq	177c0 <__assert_fail@plt+0x62a0>
   17c00:	b	17a74 <__assert_fail@plt+0x6554>
   17c04:	mov	r0, #0
   17c08:	cmn	r7, #1
   17c0c:	str	r0, [fp, #-36]	; 0xffffffdc
   17c10:	str	r0, [fp, #-40]	; 0xffffffd8
   17c14:	bne	17c28 <__assert_fail@plt+0x6708>
   17c18:	mov	r0, lr
   17c1c:	bl	113a0 <strlen@plt>
   17c20:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17c24:	mov	r7, r0
   17c28:	ldr	r0, [sp, #44]	; 0x2c
   17c2c:	str	r4, [sp, #84]	; 0x54
   17c30:	str	r5, [sp, #28]
   17c34:	cmp	r0, #0
   17c38:	beq	17e8c <__assert_fail@plt+0x696c>
   17c3c:	ldr	r0, [sp, #80]	; 0x50
   17c40:	mov	r8, #1
   17c44:	mov	r5, #0
   17c48:	add	r0, r0, sl
   17c4c:	str	r0, [sp, #24]
   17c50:	sub	r0, fp, #40	; 0x28
   17c54:	mov	r3, r0
   17c58:	b	17c94 <__assert_fail@plt+0x6774>
   17c5c:	ldr	r5, [sp, #68]	; 0x44
   17c60:	add	r5, r0, r5
   17c64:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17c68:	bl	112c8 <iswprint@plt>
   17c6c:	cmp	r0, #0
   17c70:	sub	r4, fp, #40	; 0x28
   17c74:	movwne	r0, #1
   17c78:	and	r8, r8, r0
   17c7c:	mov	r0, r4
   17c80:	bl	11280 <mbsinit@plt>
   17c84:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17c88:	mov	r3, r4
   17c8c:	cmp	r0, #0
   17c90:	bne	17f50 <__assert_fail@plt+0x6a30>
   17c94:	str	r5, [sp, #68]	; 0x44
   17c98:	add	r5, r5, sl
   17c9c:	sub	r0, fp, #44	; 0x2c
   17ca0:	add	r1, lr, r5
   17ca4:	sub	r2, r7, r5
   17ca8:	bl	1ad38 <__assert_fail@plt+0x9818>
   17cac:	cmn	r0, #2
   17cb0:	beq	17f10 <__assert_fail@plt+0x69f0>
   17cb4:	ldr	ip, [fp, #-84]	; 0xffffffac
   17cb8:	cmn	r0, #1
   17cbc:	beq	17f04 <__assert_fail@plt+0x69e4>
   17cc0:	cmp	r0, #0
   17cc4:	beq	17f08 <__assert_fail@plt+0x69e8>
   17cc8:	cmp	r0, #2
   17ccc:	bcc	17c5c <__assert_fail@plt+0x673c>
   17cd0:	ldr	r1, [sp, #68]	; 0x44
   17cd4:	ldr	r2, [sp, #24]
   17cd8:	add	r1, r2, r1
   17cdc:	sub	r2, r0, #1
   17ce0:	ldrb	r3, [r1]
   17ce4:	sub	r3, r3, #91	; 0x5b
   17ce8:	cmp	r3, #33	; 0x21
   17cec:	bls	17d0c <__assert_fail@plt+0x67ec>
   17cf0:	add	r1, r1, #1
   17cf4:	subs	r2, r2, #1
   17cf8:	beq	17c5c <__assert_fail@plt+0x673c>
   17cfc:	ldrb	r3, [r1]
   17d00:	sub	r3, r3, #91	; 0x5b
   17d04:	cmp	r3, #33	; 0x21
   17d08:	bhi	17cf0 <__assert_fail@plt+0x67d0>
   17d0c:	add	r5, pc, #0
   17d10:	ldr	pc, [r5, r3, lsl #2]
   17d14:	andeq	r8, r1, r8, lsr #4
   17d18:	andeq	r8, r1, r8, lsr #4
   17d1c:	strdeq	r7, [r1], -r0
   17d20:	andeq	r8, r1, r8, lsr #4
   17d24:	strdeq	r7, [r1], -r0
   17d28:	andeq	r8, r1, r8, lsr #4
   17d2c:	strdeq	r7, [r1], -r0
   17d30:	strdeq	r7, [r1], -r0
   17d34:	strdeq	r7, [r1], -r0
   17d38:	strdeq	r7, [r1], -r0
   17d3c:	strdeq	r7, [r1], -r0
   17d40:	strdeq	r7, [r1], -r0
   17d44:	strdeq	r7, [r1], -r0
   17d48:	strdeq	r7, [r1], -r0
   17d4c:	strdeq	r7, [r1], -r0
   17d50:	strdeq	r7, [r1], -r0
   17d54:	strdeq	r7, [r1], -r0
   17d58:	strdeq	r7, [r1], -r0
   17d5c:	strdeq	r7, [r1], -r0
   17d60:	strdeq	r7, [r1], -r0
   17d64:	strdeq	r7, [r1], -r0
   17d68:	strdeq	r7, [r1], -r0
   17d6c:	strdeq	r7, [r1], -r0
   17d70:	strdeq	r7, [r1], -r0
   17d74:	strdeq	r7, [r1], -r0
   17d78:	strdeq	r7, [r1], -r0
   17d7c:	strdeq	r7, [r1], -r0
   17d80:	strdeq	r7, [r1], -r0
   17d84:	strdeq	r7, [r1], -r0
   17d88:	strdeq	r7, [r1], -r0
   17d8c:	strdeq	r7, [r1], -r0
   17d90:	strdeq	r7, [r1], -r0
   17d94:	strdeq	r7, [r1], -r0
   17d98:	andeq	r8, r1, r8, lsr #4
   17d9c:	mov	r9, r0
   17da0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17da4:	tst	r0, #1
   17da8:	beq	177c0 <__assert_fail@plt+0x62a0>
   17dac:	b	17a74 <__assert_fail@plt+0x6554>
   17db0:	mov	r0, #0
   17db4:	str	r0, [fp, #-56]	; 0xffffffc8
   17db8:	ldr	r0, [sp, #32]
   17dbc:	cmp	r0, #0
   17dc0:	beq	17e78 <__assert_fail@plt+0x6958>
   17dc4:	add	r0, sl, #2
   17dc8:	mov	r1, r7
   17dcc:	cmp	r0, r7
   17dd0:	bcs	17e78 <__assert_fail@plt+0x6958>
   17dd4:	add	r1, sl, lr
   17dd8:	ldrb	r1, [r1, #1]
   17ddc:	cmp	r1, #63	; 0x3f
   17de0:	bne	17e78 <__assert_fail@plt+0x6958>
   17de4:	ldrb	r8, [lr, r0]
   17de8:	sub	r2, r8, #33	; 0x21
   17dec:	cmp	r2, #29
   17df0:	bhi	17e78 <__assert_fail@plt+0x6958>
   17df4:	mov	r1, r4
   17df8:	movw	r4, #20929	; 0x51c1
   17dfc:	mov	r3, #1
   17e00:	movt	r4, #14336	; 0x3800
   17e04:	tst	r4, r3, lsl r2
   17e08:	beq	18134 <__assert_fail@plt+0x6c14>
   17e0c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17e10:	tst	r2, #1
   17e14:	bne	181f0 <__assert_fail@plt+0x6cd0>
   17e18:	cmp	r9, r5
   17e1c:	mov	r6, r8
   17e20:	mov	r4, r1
   17e24:	mov	sl, r0
   17e28:	mov	r8, #0
   17e2c:	movcc	r2, #63	; 0x3f
   17e30:	strbcc	r2, [ip, r9]
   17e34:	add	r2, r9, #1
   17e38:	cmp	r2, r5
   17e3c:	movcc	r3, #34	; 0x22
   17e40:	strbcc	r3, [ip, r2]
   17e44:	add	r2, r9, #2
   17e48:	cmp	r2, r5
   17e4c:	movcc	r3, #34	; 0x22
   17e50:	strbcc	r3, [ip, r2]
   17e54:	add	r2, r9, #3
   17e58:	add	r9, r9, #4
   17e5c:	cmp	r2, r5
   17e60:	movcc	r3, #63	; 0x3f
   17e64:	strbcc	r3, [ip, r2]
   17e68:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17e6c:	tst	r0, #1
   17e70:	beq	177c0 <__assert_fail@plt+0x62a0>
   17e74:	b	17a74 <__assert_fail@plt+0x6554>
   17e78:	mov	r8, #0
   17e7c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17e80:	tst	r0, #1
   17e84:	beq	177c0 <__assert_fail@plt+0x62a0>
   17e88:	b	17a74 <__assert_fail@plt+0x6554>
   17e8c:	mov	r8, #1
   17e90:	mov	r5, #0
   17e94:	sub	r4, fp, #40	; 0x28
   17e98:	str	r5, [sp, #68]	; 0x44
   17e9c:	add	r5, r5, sl
   17ea0:	sub	r0, fp, #44	; 0x2c
   17ea4:	mov	r3, r4
   17ea8:	add	r1, lr, r5
   17eac:	sub	r2, r7, r5
   17eb0:	bl	1ad38 <__assert_fail@plt+0x9818>
   17eb4:	cmn	r0, #2
   17eb8:	beq	17f10 <__assert_fail@plt+0x69f0>
   17ebc:	cmn	r0, #1
   17ec0:	beq	17f04 <__assert_fail@plt+0x69e4>
   17ec4:	ldr	r5, [sp, #68]	; 0x44
   17ec8:	cmp	r0, #0
   17ecc:	beq	17f4c <__assert_fail@plt+0x6a2c>
   17ed0:	add	r5, r0, r5
   17ed4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17ed8:	bl	112c8 <iswprint@plt>
   17edc:	cmp	r0, #0
   17ee0:	sub	r4, fp, #40	; 0x28
   17ee4:	movwne	r0, #1
   17ee8:	and	r8, r8, r0
   17eec:	mov	r0, r4
   17ef0:	bl	11280 <mbsinit@plt>
   17ef4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17ef8:	cmp	r0, #0
   17efc:	beq	17e98 <__assert_fail@plt+0x6978>
   17f00:	b	17f50 <__assert_fail@plt+0x6a30>
   17f04:	mov	r8, #0
   17f08:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17f0c:	b	17f44 <__assert_fail@plt+0x6a24>
   17f10:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17f14:	mov	r8, #0
   17f18:	cmp	r5, r7
   17f1c:	bcs	17f44 <__assert_fail@plt+0x6a24>
   17f20:	ldrb	r0, [lr, r5]
   17f24:	cmp	r0, #0
   17f28:	beq	17f44 <__assert_fail@plt+0x6a24>
   17f2c:	ldr	r0, [sp, #68]	; 0x44
   17f30:	add	r0, r0, #1
   17f34:	add	r5, r0, sl
   17f38:	str	r0, [sp, #68]	; 0x44
   17f3c:	cmp	r5, r7
   17f40:	bcc	17f20 <__assert_fail@plt+0x6a00>
   17f44:	ldr	r5, [sp, #68]	; 0x44
   17f48:	b	17f50 <__assert_fail@plt+0x6a30>
   17f4c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   17f50:	mov	r1, r5
   17f54:	ldr	r5, [sp, #28]
   17f58:	ldr	r4, [sp, #84]	; 0x54
   17f5c:	ldr	r0, [sp, #52]	; 0x34
   17f60:	ldr	ip, [fp, #-84]	; 0xffffffac
   17f64:	cmp	r1, #1
   17f68:	orr	r2, r8, r0
   17f6c:	mov	r0, r1
   17f70:	bhi	17f7c <__assert_fail@plt+0x6a5c>
   17f74:	tst	r2, #1
   17f78:	bne	177b4 <__assert_fail@plt+0x6294>
   17f7c:	add	r0, r0, sl
   17f80:	str	r2, [sp, #84]	; 0x54
   17f84:	str	r0, [fp, #-56]	; 0xffffffc8
   17f88:	mov	r0, #0
   17f8c:	tst	r2, #1
   17f90:	bne	18070 <__assert_fail@plt+0x6b50>
   17f94:	ldr	r1, [fp, #-76]	; 0xffffffb4
   17f98:	tst	r1, #1
   17f9c:	bne	181f0 <__assert_fail@plt+0x6cd0>
   17fa0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17fa4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17fa8:	subs	r2, r1, #2
   17fac:	movwne	r2, #1
   17fb0:	orr	r2, r2, r0
   17fb4:	tst	r2, #1
   17fb8:	bne	17ff4 <__assert_fail@plt+0x6ad4>
   17fbc:	cmp	r9, r5
   17fc0:	add	r2, r9, #1
   17fc4:	mov	r0, #1
   17fc8:	movcc	r1, #39	; 0x27
   17fcc:	str	r0, [fp, #-52]	; 0xffffffcc
   17fd0:	strbcc	r1, [ip, r9]
   17fd4:	cmp	r2, r5
   17fd8:	movcc	r1, #36	; 0x24
   17fdc:	strbcc	r1, [ip, r2]
   17fe0:	add	r2, r9, #2
   17fe4:	add	r9, r9, #3
   17fe8:	cmp	r2, r5
   17fec:	movcc	r1, #39	; 0x27
   17ff0:	strbcc	r1, [ip, r2]
   17ff4:	cmp	r9, r5
   17ff8:	add	r2, r9, #1
   17ffc:	movcc	r1, #92	; 0x5c
   18000:	strbcc	r1, [ip, r9]
   18004:	cmp	r2, r5
   18008:	bcs	1801c <__assert_fail@plt+0x6afc>
   1800c:	uxtb	r3, r6
   18010:	mov	r1, #48	; 0x30
   18014:	orr	r3, r1, r3, lsr #6
   18018:	strb	r3, [ip, r2]
   1801c:	add	r2, r9, #2
   18020:	add	r9, r9, #3
   18024:	cmp	r2, r5
   18028:	lsrcc	r3, r6, #3
   1802c:	movcc	r1, #6
   18030:	bficc	r3, r1, #3, #29
   18034:	mov	r1, #6
   18038:	bfi	r6, r1, #3, #29
   1803c:	strbcc	r3, [ip, r2]
   18040:	mov	r2, #1
   18044:	b	180a4 <__assert_fail@plt+0x6b84>
   18048:	ldr	r1, [sp, #80]	; 0x50
   1804c:	cmp	r9, r2
   18050:	mov	r5, r2
   18054:	ldr	r2, [sp, #84]	; 0x54
   18058:	strbcc	r6, [ip, r9]
   1805c:	add	r9, r9, #1
   18060:	ldrb	r6, [r1, sl]
   18064:	mov	sl, r3
   18068:	tst	r2, #1
   1806c:	beq	17f94 <__assert_fail@plt+0x6a74>
   18070:	ldr	r1, [fp, #-48]	; 0xffffffd0
   18074:	tst	r1, #1
   18078:	beq	18098 <__assert_fail@plt+0x6b78>
   1807c:	cmp	r9, r5
   18080:	mov	r2, r0
   18084:	movcc	r1, #92	; 0x5c
   18088:	strbcc	r1, [ip, r9]
   1808c:	add	r9, r9, #1
   18090:	mov	r1, #0
   18094:	b	180a0 <__assert_fail@plt+0x6b80>
   18098:	mov	r1, #0
   1809c:	mov	r2, r0
   180a0:	str	r1, [fp, #-48]	; 0xffffffd0
   180a4:	mov	r0, r2
   180a8:	and	r1, r2, #1
   180ac:	ldr	r2, [fp, #-56]	; 0xffffffc8
   180b0:	add	r3, sl, #1
   180b4:	cmp	r2, r3
   180b8:	bls	18118 <__assert_fail@plt+0x6bf8>
   180bc:	mov	r2, r5
   180c0:	ldr	r5, [fp, #-52]	; 0xffffffcc
   180c4:	cmp	r1, #0
   180c8:	movwne	r1, #1
   180cc:	mvn	r5, r5
   180d0:	orr	r5, r5, r1
   180d4:	tst	r5, #1
   180d8:	bne	18048 <__assert_fail@plt+0x6b28>
   180dc:	cmp	r9, r2
   180e0:	movcc	r5, r4
   180e4:	movcc	r4, #39	; 0x27
   180e8:	strbcc	r4, [ip, r9]
   180ec:	movcc	r4, r5
   180f0:	add	r5, r9, #1
   180f4:	add	r9, r9, #2
   180f8:	cmp	r5, r2
   180fc:	movcc	r1, r4
   18100:	movcc	r4, #39	; 0x27
   18104:	strbcc	r4, [ip, r5]
   18108:	movcc	r4, r1
   1810c:	mov	r1, #0
   18110:	str	r1, [fp, #-52]	; 0xffffffcc
   18114:	b	18048 <__assert_fail@plt+0x6b28>
   18118:	cmp	r1, #0
   1811c:	movwne	r1, #1
   18120:	str	r1, [fp, #-56]	; 0xffffffc8
   18124:	ldr	r0, [fp, #-56]	; 0xffffffc8
   18128:	cmp	r0, #0
   1812c:	beq	17b54 <__assert_fail@plt+0x6634>
   18130:	b	17b88 <__assert_fail@plt+0x6668>
   18134:	mov	r8, #0
   18138:	mov	r4, r1
   1813c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   18140:	tst	r0, #1
   18144:	beq	177c0 <__assert_fail@plt+0x62a0>
   18148:	b	17a74 <__assert_fail@plt+0x6554>
   1814c:	mov	r7, sl
   18150:	b	18158 <__assert_fail@plt+0x6c38>
   18154:	mvn	r7, #0
   18158:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1815c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   18160:	ldr	r2, [sp, #88]	; 0x58
   18164:	eor	r0, r1, #2
   18168:	orr	r0, r0, r9
   1816c:	clz	r0, r0
   18170:	lsr	r0, r0, #5
   18174:	tst	r3, r0
   18178:	bne	181f0 <__assert_fail@plt+0x6cd0>
   1817c:	subs	r0, r1, #2
   18180:	movwne	r0, #1
   18184:	orr	r0, r3, r0
   18188:	tst	r0, #1
   1818c:	ldreq	r0, [sp, #60]	; 0x3c
   18190:	eoreq	r0, r0, #1
   18194:	tsteq	r0, #1
   18198:	bne	182cc <__assert_fail@plt+0x6dac>
   1819c:	tst	r4, #1
   181a0:	bne	18290 <__assert_fail@plt+0x6d70>
   181a4:	ldr	r6, [sp, #56]	; 0x38
   181a8:	mov	r8, #0
   181ac:	cmp	r6, #0
   181b0:	beq	182c8 <__assert_fail@plt+0x6da8>
   181b4:	mov	r1, #0
   181b8:	mov	r4, #2
   181bc:	cmp	r5, #0
   181c0:	mov	r0, r2
   181c4:	mov	r3, #0
   181c8:	str	r1, [sp, #84]	; 0x54
   181cc:	beq	17014 <__assert_fail@plt+0x5af4>
   181d0:	b	182cc <__assert_fail@plt+0x6dac>
   181d4:	movw	r0, #49926	; 0xc306
   181d8:	movt	r0, #1
   181dc:	str	r0, [sp, #76]	; 0x4c
   181e0:	mov	r9, #0
   181e4:	tst	r8, #1
   181e8:	beq	172ac <__assert_fail@plt+0x5d8c>
   181ec:	b	173ec <__assert_fail@plt+0x5ecc>
   181f0:	ldr	r1, [sp, #88]	; 0x58
   181f4:	mov	r0, #2
   181f8:	tst	r1, #1
   181fc:	movwne	r0, #4
   18200:	ldr	r2, [fp, #-64]	; 0xffffffc0
   18204:	ldr	r1, [fp, #12]
   18208:	cmp	r2, #2
   1820c:	moveq	r2, r0
   18210:	b	18248 <__assert_fail@plt+0x6d28>
   18214:	ldr	ip, [fp, #-84]	; 0xffffffac
   18218:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1821c:	ldr	r1, [fp, #12]
   18220:	ldr	r2, [fp, #-64]	; 0xffffffc0
   18224:	b	18248 <__assert_fail@plt+0x6d28>
   18228:	ldr	r1, [sp, #88]	; 0x58
   1822c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   18230:	ldr	r5, [sp, #28]
   18234:	mov	r0, #2
   18238:	tst	r1, #1
   1823c:	ldr	r1, [fp, #12]
   18240:	movwne	r0, #4
   18244:	mov	r2, r0
   18248:	mov	r0, #0
   1824c:	bic	r1, r1, #2
   18250:	str	r2, [sp]
   18254:	mov	r2, lr
   18258:	str	r0, [sp, #8]
   1825c:	ldr	r0, [sp, #72]	; 0x48
   18260:	str	r1, [sp, #4]
   18264:	mov	r1, r5
   18268:	str	r0, [sp, #12]
   1826c:	ldr	r0, [sp, #76]	; 0x4c
   18270:	str	r0, [sp, #16]
   18274:	mov	r0, ip
   18278:	mov	r3, r7
   1827c:	bl	16f88 <__assert_fail@plt+0x5a68>
   18280:	mov	r9, r0
   18284:	mov	r0, r9
   18288:	sub	sp, fp, #28
   1828c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18290:	mov	r0, #5
   18294:	ldr	r1, [sp, #56]	; 0x38
   18298:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1829c:	str	r0, [sp]
   182a0:	ldr	r0, [fp, #12]
   182a4:	str	r0, [sp, #4]
   182a8:	ldr	r0, [fp, #16]
   182ac:	str	r0, [sp, #8]
   182b0:	ldr	r0, [sp, #72]	; 0x48
   182b4:	str	r0, [sp, #12]
   182b8:	ldr	r0, [sp, #76]	; 0x4c
   182bc:	str	r0, [sp, #16]
   182c0:	ldr	r0, [fp, #-84]	; 0xffffffac
   182c4:	b	18278 <__assert_fail@plt+0x6d58>
   182c8:	mov	r3, #0
   182cc:	ldr	r1, [fp, #-88]	; 0xffffffa8
   182d0:	cmp	r1, #0
   182d4:	beq	18310 <__assert_fail@plt+0x6df0>
   182d8:	ldr	r2, [fp, #-84]	; 0xffffffac
   182dc:	tst	r3, #1
   182e0:	bne	18314 <__assert_fail@plt+0x6df4>
   182e4:	ldrb	r0, [r1]
   182e8:	cmp	r0, #0
   182ec:	beq	18314 <__assert_fail@plt+0x6df4>
   182f0:	add	r1, r1, #1
   182f4:	cmp	r9, r5
   182f8:	strbcc	r0, [r2, r9]
   182fc:	add	r9, r9, #1
   18300:	ldrb	r0, [r1], #1
   18304:	cmp	r0, #0
   18308:	bne	182f4 <__assert_fail@plt+0x6dd4>
   1830c:	b	18314 <__assert_fail@plt+0x6df4>
   18310:	ldr	r2, [fp, #-84]	; 0xffffffac
   18314:	cmp	r9, r5
   18318:	movcc	r0, #0
   1831c:	strbcc	r0, [r2, r9]
   18320:	mov	r0, r9
   18324:	sub	sp, fp, #28
   18328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1832c:	mov	r0, #4
   18330:	b	18200 <__assert_fail@plt+0x6ce0>
   18334:	bl	114d8 <abort@plt>
   18338:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1833c:	add	fp, sp, #28
   18340:	sub	sp, sp, #28
   18344:	movw	r5, #53696	; 0xd1c0
   18348:	cmp	r2, #0
   1834c:	mov	r4, r1
   18350:	mov	r7, r0
   18354:	str	r0, [sp, #20]
   18358:	movt	r5, #2
   1835c:	movne	r5, r2
   18360:	bl	113d0 <__errno_location@plt>
   18364:	mov	sl, r0
   18368:	ldr	r2, [r5, #40]	; 0x28
   1836c:	ldr	r3, [r5, #44]	; 0x2c
   18370:	ldm	r5, {r0, r1}
   18374:	orr	r8, r1, #1
   18378:	add	r9, r5, #8
   1837c:	mov	r1, #0
   18380:	ldr	r6, [sl]
   18384:	stm	sp, {r0, r8, r9}
   18388:	mov	r0, #0
   1838c:	str	r2, [sp, #12]
   18390:	str	r3, [sp, #16]
   18394:	mov	r2, r7
   18398:	mov	r3, r4
   1839c:	str	r6, [sp, #24]
   183a0:	mov	r6, r4
   183a4:	bl	16f88 <__assert_fail@plt+0x5a68>
   183a8:	add	r7, r0, #1
   183ac:	mov	r0, r7
   183b0:	bl	198ac <__assert_fail@plt+0x838c>
   183b4:	mov	r4, r0
   183b8:	ldr	r0, [r5]
   183bc:	ldr	r2, [r5, #44]	; 0x2c
   183c0:	ldr	r1, [r5, #40]	; 0x28
   183c4:	mov	r3, r6
   183c8:	stm	sp, {r0, r8, r9}
   183cc:	str	r2, [sp, #16]
   183d0:	ldr	r2, [sp, #20]
   183d4:	str	r1, [sp, #12]
   183d8:	mov	r0, r4
   183dc:	mov	r1, r7
   183e0:	bl	16f88 <__assert_fail@plt+0x5a68>
   183e4:	ldr	r0, [sp, #24]
   183e8:	str	r0, [sl]
   183ec:	mov	r0, r4
   183f0:	sub	sp, fp, #28
   183f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   183f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183fc:	add	fp, sp, #28
   18400:	sub	sp, sp, #36	; 0x24
   18404:	movw	r8, #53696	; 0xd1c0
   18408:	cmp	r3, #0
   1840c:	mov	r4, r2
   18410:	str	r2, [sp, #24]
   18414:	mov	r5, r1
   18418:	mov	r6, r0
   1841c:	str	r0, [sp, #20]
   18420:	movt	r8, #2
   18424:	movne	r8, r3
   18428:	bl	113d0 <__errno_location@plt>
   1842c:	str	r0, [sp, #28]
   18430:	ldr	r1, [r8, #40]	; 0x28
   18434:	ldr	r2, [r8, #44]	; 0x2c
   18438:	ldr	r7, [r0]
   1843c:	cmp	r4, #0
   18440:	add	sl, r8, #8
   18444:	mov	r0, #0
   18448:	ldm	r8, {r3, r9}
   1844c:	orreq	r9, r9, #1
   18450:	stm	sp, {r3, r9, sl}
   18454:	str	r1, [sp, #12]
   18458:	str	r2, [sp, #16]
   1845c:	mov	r1, #0
   18460:	mov	r2, r6
   18464:	mov	r3, r5
   18468:	str	r7, [sp, #32]
   1846c:	mov	r7, r5
   18470:	bl	16f88 <__assert_fail@plt+0x5a68>
   18474:	add	r4, r0, #1
   18478:	mov	r5, r0
   1847c:	mov	r0, r4
   18480:	bl	198ac <__assert_fail@plt+0x838c>
   18484:	mov	r6, r0
   18488:	ldr	r0, [r8]
   1848c:	ldr	r2, [r8, #44]	; 0x2c
   18490:	ldr	r1, [r8, #40]	; 0x28
   18494:	mov	r3, r7
   18498:	stm	sp, {r0, r9, sl}
   1849c:	str	r2, [sp, #16]
   184a0:	ldr	r2, [sp, #20]
   184a4:	str	r1, [sp, #12]
   184a8:	mov	r0, r6
   184ac:	mov	r1, r4
   184b0:	bl	16f88 <__assert_fail@plt+0x5a68>
   184b4:	ldr	r0, [sp, #24]
   184b8:	ldr	r1, [sp, #32]
   184bc:	ldr	r2, [sp, #28]
   184c0:	cmp	r0, #0
   184c4:	str	r1, [r2]
   184c8:	strne	r5, [r0]
   184cc:	mov	r0, r6
   184d0:	sub	sp, fp, #28
   184d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   184d8:	push	{r4, r5, r6, r7, fp, lr}
   184dc:	add	fp, sp, #16
   184e0:	movw	r4, #53608	; 0xd168
   184e4:	movt	r4, #2
   184e8:	ldrd	r6, [r4]
   184ec:	cmp	r7, #2
   184f0:	blt	1851c <__assert_fail@plt+0x6ffc>
   184f4:	add	r5, r6, #12
   184f8:	mov	r7, #0
   184fc:	ldr	r0, [r5, r7, lsl #3]
   18500:	bl	12f00 <__assert_fail@plt+0x19e0>
   18504:	ldr	r1, [r4, #4]
   18508:	add	r2, r7, #2
   1850c:	add	r0, r7, #1
   18510:	mov	r7, r0
   18514:	cmp	r2, r1
   18518:	blt	184fc <__assert_fail@plt+0x6fdc>
   1851c:	ldr	r0, [r6, #4]
   18520:	movw	r5, #53744	; 0xd1f0
   18524:	movt	r5, #2
   18528:	cmp	r0, r5
   1852c:	beq	18540 <__assert_fail@plt+0x7020>
   18530:	bl	12f00 <__assert_fail@plt+0x19e0>
   18534:	mov	r0, #256	; 0x100
   18538:	str	r0, [r4, #8]
   1853c:	str	r5, [r4, #12]
   18540:	add	r5, r4, #8
   18544:	cmp	r6, r5
   18548:	beq	18558 <__assert_fail@plt+0x7038>
   1854c:	mov	r0, r6
   18550:	bl	12f00 <__assert_fail@plt+0x19e0>
   18554:	str	r5, [r4]
   18558:	mov	r0, #1
   1855c:	str	r0, [r4, #4]
   18560:	pop	{r4, r5, r6, r7, fp, pc}
   18564:	movw	r3, #53696	; 0xd1c0
   18568:	mvn	r2, #0
   1856c:	movt	r3, #2
   18570:	b	18574 <__assert_fail@plt+0x7054>
   18574:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18578:	add	fp, sp, #28
   1857c:	sub	sp, sp, #44	; 0x2c
   18580:	mov	r7, r3
   18584:	str	r2, [sp, #36]	; 0x24
   18588:	str	r1, [sp, #32]
   1858c:	mov	r5, r0
   18590:	bl	113d0 <__errno_location@plt>
   18594:	cmp	r5, #0
   18598:	bmi	18700 <__assert_fail@plt+0x71e0>
   1859c:	cmn	r5, #-2147483647	; 0x80000001
   185a0:	beq	18700 <__assert_fail@plt+0x71e0>
   185a4:	movw	r8, #53608	; 0xd168
   185a8:	mov	r4, r0
   185ac:	ldr	r0, [r0]
   185b0:	movt	r8, #2
   185b4:	str	r4, [sp, #28]
   185b8:	ldr	r1, [r8, #4]
   185bc:	ldr	r6, [r8]
   185c0:	str	r0, [sp, #24]
   185c4:	cmp	r1, r5
   185c8:	ble	185d4 <__assert_fail@plt+0x70b4>
   185cc:	mov	sl, r6
   185d0:	b	1863c <__assert_fail@plt+0x711c>
   185d4:	mov	r0, #8
   185d8:	add	r9, r8, #8
   185dc:	str	r1, [fp, #-32]	; 0xffffffe0
   185e0:	sub	r1, r5, r1
   185e4:	mvn	r3, #-2147483648	; 0x80000000
   185e8:	str	r0, [sp]
   185ec:	subs	r0, r6, r9
   185f0:	add	r2, r1, #1
   185f4:	sub	r1, fp, #32
   185f8:	movne	r0, r6
   185fc:	bl	19aac <__assert_fail@plt+0x858c>
   18600:	mov	sl, r0
   18604:	cmp	r6, r9
   18608:	str	r0, [r8]
   1860c:	bne	18618 <__assert_fail@plt+0x70f8>
   18610:	ldrd	r0, [r8, #8]
   18614:	stm	sl, {r0, r1}
   18618:	ldr	r1, [r8, #4]
   1861c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18620:	add	r0, sl, r1, lsl #3
   18624:	sub	r1, r2, r1
   18628:	lsl	r2, r1, #3
   1862c:	mov	r1, #0
   18630:	bl	113e8 <memset@plt>
   18634:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18638:	str	r0, [r8, #4]
   1863c:	mov	r9, sl
   18640:	ldm	r7, {r0, r1}
   18644:	orr	r8, r1, #1
   18648:	add	r1, r7, #8
   1864c:	ldr	r2, [r7, #40]	; 0x28
   18650:	ldr	r3, [r7, #44]	; 0x2c
   18654:	ldr	r6, [r9, r5, lsl #3]!
   18658:	str	r1, [sp, #20]
   1865c:	ldr	r4, [r9, #4]!
   18660:	stm	sp, {r0, r8}
   18664:	add	r0, sp, #8
   18668:	stm	r0, {r1, r2, r3}
   1866c:	ldr	r2, [sp, #32]
   18670:	ldr	r3, [sp, #36]	; 0x24
   18674:	mov	r1, r6
   18678:	mov	r0, r4
   1867c:	bl	16f88 <__assert_fail@plt+0x5a68>
   18680:	cmp	r6, r0
   18684:	bhi	186e8 <__assert_fail@plt+0x71c8>
   18688:	add	r6, r0, #1
   1868c:	movw	r0, #53744	; 0xd1f0
   18690:	movt	r0, #2
   18694:	str	r6, [sl, r5, lsl #3]
   18698:	cmp	r4, r0
   1869c:	beq	186a8 <__assert_fail@plt+0x7188>
   186a0:	mov	r0, r4
   186a4:	bl	12f00 <__assert_fail@plt+0x19e0>
   186a8:	mov	r0, r6
   186ac:	bl	198ac <__assert_fail@plt+0x838c>
   186b0:	str	r0, [r9]
   186b4:	mov	r4, r0
   186b8:	add	r3, sp, #8
   186bc:	ldr	r0, [r7]
   186c0:	ldr	r1, [r7, #40]	; 0x28
   186c4:	ldr	r2, [r7, #44]	; 0x2c
   186c8:	stm	sp, {r0, r8}
   186cc:	ldr	r0, [sp, #20]
   186d0:	stm	r3, {r0, r1, r2}
   186d4:	ldr	r2, [sp, #32]
   186d8:	ldr	r3, [sp, #36]	; 0x24
   186dc:	mov	r0, r4
   186e0:	mov	r1, r6
   186e4:	bl	16f88 <__assert_fail@plt+0x5a68>
   186e8:	ldr	r1, [sp, #24]
   186ec:	ldr	r0, [sp, #28]
   186f0:	str	r1, [r0]
   186f4:	mov	r0, r4
   186f8:	sub	sp, fp, #28
   186fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18700:	bl	114d8 <abort@plt>
   18704:	movw	r3, #53696	; 0xd1c0
   18708:	movt	r3, #2
   1870c:	b	18574 <__assert_fail@plt+0x7054>
   18710:	movw	r3, #53696	; 0xd1c0
   18714:	mov	r1, r0
   18718:	mov	r0, #0
   1871c:	mvn	r2, #0
   18720:	movt	r3, #2
   18724:	b	18574 <__assert_fail@plt+0x7054>
   18728:	movw	r3, #53696	; 0xd1c0
   1872c:	mov	r2, r1
   18730:	mov	r1, r0
   18734:	mov	r0, #0
   18738:	movt	r3, #2
   1873c:	b	18574 <__assert_fail@plt+0x7054>
   18740:	push	{fp, lr}
   18744:	mov	fp, sp
   18748:	sub	sp, sp, #48	; 0x30
   1874c:	vmov.i32	q8, #0	; 0x00000000
   18750:	mov	ip, #32
   18754:	mov	r3, sp
   18758:	mov	lr, r2
   1875c:	cmp	r1, #10
   18760:	add	r2, r3, #16
   18764:	vst1.64	{d16-d17}, [r3], ip
   18768:	vst1.64	{d16-d17}, [r2]
   1876c:	vst1.64	{d16-d17}, [r3]
   18770:	beq	18790 <__assert_fail@plt+0x7270>
   18774:	str	r1, [sp]
   18778:	mov	r3, sp
   1877c:	mov	r1, lr
   18780:	mvn	r2, #0
   18784:	bl	18574 <__assert_fail@plt+0x7054>
   18788:	mov	sp, fp
   1878c:	pop	{fp, pc}
   18790:	bl	114d8 <abort@plt>
   18794:	push	{r4, sl, fp, lr}
   18798:	add	fp, sp, #8
   1879c:	sub	sp, sp, #48	; 0x30
   187a0:	vmov.i32	q8, #0	; 0x00000000
   187a4:	mov	ip, r3
   187a8:	mov	r3, sp
   187ac:	mov	lr, #32
   187b0:	cmp	r1, #10
   187b4:	add	r4, r3, #16
   187b8:	vst1.64	{d16-d17}, [r3], lr
   187bc:	vst1.64	{d16-d17}, [r4]
   187c0:	vst1.64	{d16-d17}, [r3]
   187c4:	beq	187e4 <__assert_fail@plt+0x72c4>
   187c8:	str	r1, [sp]
   187cc:	mov	r1, r2
   187d0:	mov	r3, sp
   187d4:	mov	r2, ip
   187d8:	bl	18574 <__assert_fail@plt+0x7054>
   187dc:	sub	sp, fp, #8
   187e0:	pop	{r4, sl, fp, pc}
   187e4:	bl	114d8 <abort@plt>
   187e8:	push	{fp, lr}
   187ec:	mov	fp, sp
   187f0:	sub	sp, sp, #48	; 0x30
   187f4:	vmov.i32	q8, #0	; 0x00000000
   187f8:	mov	r3, sp
   187fc:	mov	ip, #32
   18800:	cmp	r0, #10
   18804:	add	r2, r3, #16
   18808:	vst1.64	{d16-d17}, [r3], ip
   1880c:	vst1.64	{d16-d17}, [r2]
   18810:	vst1.64	{d16-d17}, [r3]
   18814:	beq	18834 <__assert_fail@plt+0x7314>
   18818:	str	r0, [sp]
   1881c:	mov	r3, sp
   18820:	mov	r0, #0
   18824:	mvn	r2, #0
   18828:	bl	18574 <__assert_fail@plt+0x7054>
   1882c:	mov	sp, fp
   18830:	pop	{fp, pc}
   18834:	bl	114d8 <abort@plt>
   18838:	push	{fp, lr}
   1883c:	mov	fp, sp
   18840:	sub	sp, sp, #48	; 0x30
   18844:	vmov.i32	q8, #0	; 0x00000000
   18848:	mov	r3, sp
   1884c:	mov	ip, #32
   18850:	cmp	r0, #10
   18854:	add	lr, r3, #16
   18858:	vst1.64	{d16-d17}, [r3], ip
   1885c:	vst1.64	{d16-d17}, [lr]
   18860:	vst1.64	{d16-d17}, [r3]
   18864:	beq	18880 <__assert_fail@plt+0x7360>
   18868:	str	r0, [sp]
   1886c:	mov	r3, sp
   18870:	mov	r0, #0
   18874:	bl	18574 <__assert_fail@plt+0x7054>
   18878:	mov	sp, fp
   1887c:	pop	{fp, pc}
   18880:	bl	114d8 <abort@plt>
   18884:	push	{r4, sl, fp, lr}
   18888:	add	fp, sp, #8
   1888c:	sub	sp, sp, #48	; 0x30
   18890:	mov	lr, r0
   18894:	movw	r0, #53696	; 0xd1c0
   18898:	mov	ip, r1
   1889c:	mov	r1, #32
   188a0:	mov	r4, #1
   188a4:	movt	r0, #2
   188a8:	add	r3, r0, #16
   188ac:	vld1.64	{d16-d17}, [r0], r1
   188b0:	vld1.64	{d20-d21}, [r0]
   188b4:	vld1.64	{d18-d19}, [r3]
   188b8:	mov	r3, sp
   188bc:	add	r0, r3, #32
   188c0:	add	r1, r3, #16
   188c4:	vst1.64	{d20-d21}, [r0]
   188c8:	mov	r0, #28
   188cc:	vst1.64	{d18-d19}, [r1]
   188d0:	mov	r1, r3
   188d4:	and	r0, r0, r2, lsr #3
   188d8:	and	r2, r2, #31
   188dc:	vst1.64	{d16-d17}, [r1], r0
   188e0:	ldr	r0, [r1, #8]
   188e4:	bic	r4, r4, r0, lsr r2
   188e8:	eor	r0, r0, r4, lsl r2
   188ec:	mov	r2, ip
   188f0:	str	r0, [r1, #8]
   188f4:	mov	r0, #0
   188f8:	mov	r1, lr
   188fc:	bl	18574 <__assert_fail@plt+0x7054>
   18900:	sub	sp, fp, #8
   18904:	pop	{r4, sl, fp, pc}
   18908:	push	{fp, lr}
   1890c:	mov	fp, sp
   18910:	sub	sp, sp, #48	; 0x30
   18914:	mov	ip, r0
   18918:	movw	r0, #53696	; 0xd1c0
   1891c:	mov	r2, #32
   18920:	movt	r0, #2
   18924:	add	r3, r0, #16
   18928:	vld1.64	{d16-d17}, [r0], r2
   1892c:	vld1.64	{d20-d21}, [r0]
   18930:	vld1.64	{d18-d19}, [r3]
   18934:	mov	r3, sp
   18938:	add	r0, r3, #32
   1893c:	add	r2, r3, #16
   18940:	vst1.64	{d20-d21}, [r0]
   18944:	mov	r0, #28
   18948:	vst1.64	{d18-d19}, [r2]
   1894c:	mov	r2, r3
   18950:	and	r0, r0, r1, lsr #3
   18954:	and	r1, r1, #31
   18958:	vst1.64	{d16-d17}, [r2], r0
   1895c:	mov	r0, #1
   18960:	ldr	lr, [r2, #8]
   18964:	bic	r0, r0, lr, lsr r1
   18968:	eor	r0, lr, r0, lsl r1
   1896c:	mov	r1, ip
   18970:	str	r0, [r2, #8]
   18974:	mov	r0, #0
   18978:	mvn	r2, #0
   1897c:	bl	18574 <__assert_fail@plt+0x7054>
   18980:	mov	sp, fp
   18984:	pop	{fp, pc}
   18988:	push	{fp, lr}
   1898c:	mov	fp, sp
   18990:	sub	sp, sp, #48	; 0x30
   18994:	mov	r1, r0
   18998:	movw	r0, #53696	; 0xd1c0
   1899c:	mov	r3, #32
   189a0:	movt	r0, #2
   189a4:	add	r2, r0, #16
   189a8:	vld1.64	{d16-d17}, [r0], r3
   189ac:	mov	r3, sp
   189b0:	vld1.64	{d18-d19}, [r2]
   189b4:	vld1.64	{d20-d21}, [r0]
   189b8:	add	r2, r3, #16
   189bc:	add	r0, r3, #32
   189c0:	vst1.64	{d18-d19}, [r2]
   189c4:	vst1.64	{d20-d21}, [r0]
   189c8:	mov	r0, #12
   189cc:	mov	r2, r3
   189d0:	vst1.64	{d16-d17}, [r2], r0
   189d4:	ldr	r0, [r2]
   189d8:	orr	r0, r0, #67108864	; 0x4000000
   189dc:	str	r0, [r2]
   189e0:	mov	r0, #0
   189e4:	mvn	r2, #0
   189e8:	bl	18574 <__assert_fail@plt+0x7054>
   189ec:	mov	sp, fp
   189f0:	pop	{fp, pc}
   189f4:	push	{fp, lr}
   189f8:	mov	fp, sp
   189fc:	sub	sp, sp, #48	; 0x30
   18a00:	mov	ip, r1
   18a04:	mov	r1, r0
   18a08:	movw	r0, #53696	; 0xd1c0
   18a0c:	mov	r2, #32
   18a10:	movt	r0, #2
   18a14:	add	r3, r0, #16
   18a18:	vld1.64	{d16-d17}, [r0], r2
   18a1c:	vld1.64	{d18-d19}, [r3]
   18a20:	vld1.64	{d20-d21}, [r0]
   18a24:	mov	r3, sp
   18a28:	add	r2, r3, #16
   18a2c:	add	r0, r3, #32
   18a30:	vst1.64	{d18-d19}, [r2]
   18a34:	vst1.64	{d20-d21}, [r0]
   18a38:	mov	r0, #12
   18a3c:	mov	r2, r3
   18a40:	vst1.64	{d16-d17}, [r2], r0
   18a44:	ldr	r0, [r2]
   18a48:	orr	r0, r0, #67108864	; 0x4000000
   18a4c:	str	r0, [r2]
   18a50:	mov	r0, #0
   18a54:	mov	r2, ip
   18a58:	bl	18574 <__assert_fail@plt+0x7054>
   18a5c:	mov	sp, fp
   18a60:	pop	{fp, pc}
   18a64:	push	{r4, sl, fp, lr}
   18a68:	add	fp, sp, #8
   18a6c:	sub	sp, sp, #96	; 0x60
   18a70:	vmov.i32	q8, #0	; 0x00000000
   18a74:	mov	ip, r2
   18a78:	mov	r2, sp
   18a7c:	mov	r4, #28
   18a80:	cmp	r1, #10
   18a84:	mov	r3, r2
   18a88:	add	lr, r2, #16
   18a8c:	vst1.64	{d16-d17}, [r3], r4
   18a90:	vst1.64	{d16-d17}, [lr]
   18a94:	vst1.32	{d16-d17}, [r3]
   18a98:	beq	18ae8 <__assert_fail@plt+0x75c8>
   18a9c:	vld1.64	{d16-d17}, [r2], r4
   18aa0:	vld1.64	{d18-d19}, [lr]
   18aa4:	add	r3, sp, #48	; 0x30
   18aa8:	vld1.32	{d20-d21}, [r2]
   18aac:	add	r2, r3, #20
   18ab0:	add	r4, r3, #4
   18ab4:	vst1.32	{d18-d19}, [r2]
   18ab8:	add	r2, r3, #32
   18abc:	vst1.32	{d16-d17}, [r4]
   18ac0:	vst1.32	{d20-d21}, [r2]
   18ac4:	str	r1, [sp, #48]	; 0x30
   18ac8:	mvn	r2, #0
   18acc:	ldr	r1, [sp, #60]	; 0x3c
   18ad0:	orr	r1, r1, #67108864	; 0x4000000
   18ad4:	str	r1, [sp, #60]	; 0x3c
   18ad8:	mov	r1, ip
   18adc:	bl	18574 <__assert_fail@plt+0x7054>
   18ae0:	sub	sp, fp, #8
   18ae4:	pop	{r4, sl, fp, pc}
   18ae8:	bl	114d8 <abort@plt>
   18aec:	push	{r4, r5, r6, sl, fp, lr}
   18af0:	add	fp, sp, #16
   18af4:	sub	sp, sp, #48	; 0x30
   18af8:	mov	ip, r3
   18afc:	movw	r3, #53696	; 0xd1c0
   18b00:	mov	r6, #32
   18b04:	cmp	r1, #0
   18b08:	mov	r4, sp
   18b0c:	movt	r3, #2
   18b10:	cmpne	r2, #0
   18b14:	add	r5, r4, #16
   18b18:	add	lr, r3, #16
   18b1c:	vld1.64	{d16-d17}, [r3], r6
   18b20:	vld1.64	{d18-d19}, [lr]
   18b24:	vld1.64	{d20-d21}, [r3]
   18b28:	mov	r3, #10
   18b2c:	vst1.64	{d16-d17}, [r4], r6
   18b30:	vst1.64	{d18-d19}, [r5]
   18b34:	vst1.64	{d20-d21}, [r4]
   18b38:	str	r3, [sp]
   18b3c:	bne	18b44 <__assert_fail@plt+0x7624>
   18b40:	bl	114d8 <abort@plt>
   18b44:	str	r2, [sp, #44]	; 0x2c
   18b48:	str	r1, [sp, #40]	; 0x28
   18b4c:	mov	r3, sp
   18b50:	mov	r1, ip
   18b54:	mvn	r2, #0
   18b58:	bl	18574 <__assert_fail@plt+0x7054>
   18b5c:	sub	sp, fp, #16
   18b60:	pop	{r4, r5, r6, sl, fp, pc}
   18b64:	push	{r4, r5, r6, sl, fp, lr}
   18b68:	add	fp, sp, #16
   18b6c:	sub	sp, sp, #48	; 0x30
   18b70:	mov	lr, r3
   18b74:	movw	r3, #53696	; 0xd1c0
   18b78:	mov	r6, #32
   18b7c:	cmp	r1, #0
   18b80:	mov	r4, sp
   18b84:	movt	r3, #2
   18b88:	cmpne	r2, #0
   18b8c:	add	r5, r4, #16
   18b90:	add	ip, r3, #16
   18b94:	vld1.64	{d16-d17}, [r3], r6
   18b98:	vld1.64	{d18-d19}, [ip]
   18b9c:	vld1.64	{d20-d21}, [r3]
   18ba0:	mov	r3, #10
   18ba4:	vst1.64	{d16-d17}, [r4], r6
   18ba8:	vst1.64	{d18-d19}, [r5]
   18bac:	vst1.64	{d20-d21}, [r4]
   18bb0:	str	r3, [sp]
   18bb4:	bne	18bbc <__assert_fail@plt+0x769c>
   18bb8:	bl	114d8 <abort@plt>
   18bbc:	ldr	ip, [fp, #8]
   18bc0:	str	r2, [sp, #44]	; 0x2c
   18bc4:	str	r1, [sp, #40]	; 0x28
   18bc8:	mov	r3, sp
   18bcc:	mov	r1, lr
   18bd0:	mov	r2, ip
   18bd4:	bl	18574 <__assert_fail@plt+0x7054>
   18bd8:	sub	sp, fp, #16
   18bdc:	pop	{r4, r5, r6, sl, fp, pc}
   18be0:	push	{r4, sl, fp, lr}
   18be4:	add	fp, sp, #8
   18be8:	sub	sp, sp, #48	; 0x30
   18bec:	movw	r3, #53696	; 0xd1c0
   18bf0:	mov	lr, #32
   18bf4:	mov	ip, r2
   18bf8:	cmp	r0, #0
   18bfc:	movt	r3, #2
   18c00:	cmpne	r1, #0
   18c04:	add	r2, r3, #16
   18c08:	vld1.64	{d16-d17}, [r3], lr
   18c0c:	vld1.64	{d20-d21}, [r3]
   18c10:	vld1.64	{d18-d19}, [r2]
   18c14:	mov	r2, sp
   18c18:	add	r4, r2, #16
   18c1c:	vst1.64	{d16-d17}, [r2], lr
   18c20:	vst1.64	{d20-d21}, [r2]
   18c24:	mov	r2, #10
   18c28:	vst1.64	{d18-d19}, [r4]
   18c2c:	str	r2, [sp]
   18c30:	bne	18c38 <__assert_fail@plt+0x7718>
   18c34:	bl	114d8 <abort@plt>
   18c38:	str	r1, [sp, #44]	; 0x2c
   18c3c:	str	r0, [sp, #40]	; 0x28
   18c40:	mov	r3, sp
   18c44:	mov	r0, #0
   18c48:	mov	r1, ip
   18c4c:	mvn	r2, #0
   18c50:	bl	18574 <__assert_fail@plt+0x7054>
   18c54:	sub	sp, fp, #8
   18c58:	pop	{r4, sl, fp, pc}
   18c5c:	push	{r4, r5, fp, lr}
   18c60:	add	fp, sp, #8
   18c64:	sub	sp, sp, #48	; 0x30
   18c68:	mov	ip, r3
   18c6c:	movw	r3, #53696	; 0xd1c0
   18c70:	mov	r4, #32
   18c74:	mov	lr, r2
   18c78:	cmp	r0, #0
   18c7c:	movt	r3, #2
   18c80:	cmpne	r1, #0
   18c84:	add	r2, r3, #16
   18c88:	vld1.64	{d16-d17}, [r3], r4
   18c8c:	vld1.64	{d20-d21}, [r3]
   18c90:	vld1.64	{d18-d19}, [r2]
   18c94:	mov	r2, sp
   18c98:	add	r5, r2, #16
   18c9c:	vst1.64	{d16-d17}, [r2], r4
   18ca0:	vst1.64	{d20-d21}, [r2]
   18ca4:	mov	r2, #10
   18ca8:	vst1.64	{d18-d19}, [r5]
   18cac:	str	r2, [sp]
   18cb0:	bne	18cb8 <__assert_fail@plt+0x7798>
   18cb4:	bl	114d8 <abort@plt>
   18cb8:	str	r1, [sp, #44]	; 0x2c
   18cbc:	str	r0, [sp, #40]	; 0x28
   18cc0:	mov	r3, sp
   18cc4:	mov	r0, #0
   18cc8:	mov	r1, lr
   18ccc:	mov	r2, ip
   18cd0:	bl	18574 <__assert_fail@plt+0x7054>
   18cd4:	sub	sp, fp, #8
   18cd8:	pop	{r4, r5, fp, pc}
   18cdc:	movw	r3, #53560	; 0xd138
   18ce0:	movt	r3, #2
   18ce4:	b	18574 <__assert_fail@plt+0x7054>
   18ce8:	movw	r3, #53560	; 0xd138
   18cec:	mov	r2, r1
   18cf0:	mov	r1, r0
   18cf4:	mov	r0, #0
   18cf8:	movt	r3, #2
   18cfc:	b	18574 <__assert_fail@plt+0x7054>
   18d00:	movw	r3, #53560	; 0xd138
   18d04:	mvn	r2, #0
   18d08:	movt	r3, #2
   18d0c:	b	18574 <__assert_fail@plt+0x7054>
   18d10:	movw	r3, #53560	; 0xd138
   18d14:	mov	r1, r0
   18d18:	mov	r0, #0
   18d1c:	mvn	r2, #0
   18d20:	movt	r3, #2
   18d24:	b	18574 <__assert_fail@plt+0x7054>
   18d28:	push	{r4, sl, fp, lr}
   18d2c:	add	fp, sp, #8
   18d30:	sub	sp, sp, #104	; 0x68
   18d34:	movw	r1, #50791	; 0xc667
   18d38:	mov	r4, r0
   18d3c:	mov	r2, sp
   18d40:	mov	r0, #3
   18d44:	movt	r1, #1
   18d48:	bl	114f0 <__lxstat64@plt>
   18d4c:	mov	r1, r0
   18d50:	mov	r0, #0
   18d54:	cmp	r1, #0
   18d58:	beq	18d64 <__assert_fail@plt+0x7844>
   18d5c:	sub	sp, fp, #8
   18d60:	pop	{r4, sl, fp, pc}
   18d64:	ldr	r0, [sp, #96]	; 0x60
   18d68:	ldr	r1, [sp, #100]	; 0x64
   18d6c:	ldm	sp, {r2, r3}
   18d70:	stm	r4, {r0, r1, r2, r3}
   18d74:	mov	r0, r4
   18d78:	sub	sp, fp, #8
   18d7c:	pop	{r4, sl, fp, pc}
   18d80:	push	{r4, r5, r6, r7, fp, lr}
   18d84:	add	fp, sp, #16
   18d88:	mov	r4, r0
   18d8c:	cmp	r0, #2
   18d90:	bhi	18dc0 <__assert_fail@plt+0x78a0>
   18d94:	mov	r0, r4
   18d98:	bl	1add8 <__assert_fail@plt+0x98b8>
   18d9c:	mov	r5, r0
   18da0:	bl	113d0 <__errno_location@plt>
   18da4:	ldr	r7, [r0]
   18da8:	mov	r6, r0
   18dac:	mov	r0, r4
   18db0:	bl	114e4 <close@plt>
   18db4:	mov	r0, r5
   18db8:	str	r7, [r6]
   18dbc:	pop	{r4, r5, r6, r7, fp, pc}
   18dc0:	mov	r0, r4
   18dc4:	pop	{r4, r5, r6, r7, fp, pc}
   18dc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18dcc:	add	fp, sp, #28
   18dd0:	sub	sp, sp, #12
   18dd4:	ldr	sl, [fp, #8]
   18dd8:	mov	r9, r3
   18ddc:	mov	r8, r1
   18de0:	mov	r5, r0
   18de4:	cmp	r2, #0
   18de8:	beq	18e74 <__assert_fail@plt+0x7954>
   18dec:	mov	r0, r5
   18df0:	mov	r1, #58	; 0x3a
   18df4:	mov	r6, r2
   18df8:	bl	113ac <strchr@plt>
   18dfc:	mov	r7, r0
   18e00:	mov	r0, r5
   18e04:	mov	r2, r8
   18e08:	mov	r3, r6
   18e0c:	stm	sp, {r9, sl}
   18e10:	mov	r1, r7
   18e14:	bl	18e94 <__assert_fail@plt+0x7974>
   18e18:	mov	r4, r0
   18e1c:	cmp	r0, #0
   18e20:	beq	18e68 <__assert_fail@plt+0x7948>
   18e24:	cmp	r7, #0
   18e28:	bne	18e68 <__assert_fail@plt+0x7948>
   18e2c:	mov	r0, r5
   18e30:	mov	r1, #46	; 0x2e
   18e34:	bl	113ac <strchr@plt>
   18e38:	cmp	r0, #0
   18e3c:	beq	18e68 <__assert_fail@plt+0x7948>
   18e40:	mov	r1, r0
   18e44:	mov	r0, r5
   18e48:	mov	r2, r8
   18e4c:	mov	r3, r6
   18e50:	stm	sp, {r9, sl}
   18e54:	bl	18e94 <__assert_fail@plt+0x7974>
   18e58:	cmp	r0, #0
   18e5c:	movne	r0, r4
   18e60:	sub	sp, fp, #28
   18e64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e68:	mov	r0, r4
   18e6c:	sub	sp, fp, #28
   18e70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e74:	mov	r0, r5
   18e78:	mov	r1, #0
   18e7c:	mov	r2, r8
   18e80:	mov	r3, #0
   18e84:	stm	sp, {r9, sl}
   18e88:	bl	18e94 <__assert_fail@plt+0x7974>
   18e8c:	sub	sp, fp, #28
   18e90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e98:	add	fp, sp, #28
   18e9c:	sub	sp, sp, #36	; 0x24
   18ea0:	mov	sl, r3
   18ea4:	mov	r9, r2
   18ea8:	ldr	r3, [r2]
   18eac:	ldr	r2, [fp, #8]
   18eb0:	mov	r4, r1
   18eb4:	cmp	sl, #0
   18eb8:	beq	18ec4 <__assert_fail@plt+0x79a4>
   18ebc:	ldr	r1, [sl]
   18ec0:	b	18ec8 <__assert_fail@plt+0x79a8>
   18ec4:	mvn	r1, #0
   18ec8:	ldr	r8, [fp, #12]
   18ecc:	cmp	r2, #0
   18ed0:	str	r1, [sp, #8]
   18ed4:	str	r3, [sp, #4]
   18ed8:	movne	r1, #0
   18edc:	strne	r1, [r2]
   18ee0:	cmp	r8, #0
   18ee4:	movne	r1, #0
   18ee8:	strne	r1, [r8]
   18eec:	cmp	r4, #0
   18ef0:	beq	18f78 <__assert_fail@plt+0x7a58>
   18ef4:	subs	r5, r4, r0
   18ef8:	beq	19068 <__assert_fail@plt+0x7b48>
   18efc:	add	r1, r5, #1
   18f00:	bl	19d10 <__assert_fail@plt+0x87f0>
   18f04:	mov	r7, r0
   18f08:	mov	r0, #0
   18f0c:	mov	r6, r4
   18f10:	strb	r0, [r7, r5]
   18f14:	ldrb	r0, [r6, #1]!
   18f18:	cmp	r0, #0
   18f1c:	moveq	r6, r0
   18f20:	ldrb	r0, [r7]
   18f24:	cmp	r0, #43	; 0x2b
   18f28:	beq	18f9c <__assert_fail@plt+0x7a7c>
   18f2c:	mov	r0, r7
   18f30:	bl	11220 <getpwnam@plt>
   18f34:	cmp	r0, #0
   18f38:	beq	18f9c <__assert_fail@plt+0x7a7c>
   18f3c:	ldr	r1, [r0, #8]
   18f40:	mov	r5, #0
   18f44:	cmp	r4, #0
   18f48:	str	r1, [sp, #4]
   18f4c:	beq	1917c <__assert_fail@plt+0x7c5c>
   18f50:	cmp	r6, #0
   18f54:	bne	1917c <__assert_fail@plt+0x7c5c>
   18f58:	ldr	r4, [r0, #12]
   18f5c:	mov	r0, r4
   18f60:	bl	11508 <getgrgid@plt>
   18f64:	cmp	r0, #0
   18f68:	str	r4, [sp, #8]
   18f6c:	beq	19190 <__assert_fail@plt+0x7c70>
   18f70:	ldr	r0, [r0]
   18f74:	b	191a0 <__assert_fail@plt+0x7c80>
   18f78:	ldrb	r1, [r0]
   18f7c:	cmp	r1, #0
   18f80:	beq	19104 <__assert_fail@plt+0x7be4>
   18f84:	bl	19d80 <__assert_fail@plt+0x8860>
   18f88:	mov	r7, r0
   18f8c:	mov	r6, #0
   18f90:	ldrb	r0, [r7]
   18f94:	cmp	r0, #43	; 0x2b
   18f98:	bne	18f2c <__assert_fail@plt+0x7a0c>
   18f9c:	cmp	r4, #0
   18fa0:	beq	1909c <__assert_fail@plt+0x7b7c>
   18fa4:	cmp	r6, #0
   18fa8:	bne	1909c <__assert_fail@plt+0x7b7c>
   18fac:	movw	r5, #50043	; 0xc37b
   18fb0:	mov	r4, #0
   18fb4:	movt	r5, #1
   18fb8:	bl	11448 <endpwent@plt>
   18fbc:	cmp	r6, #0
   18fc0:	beq	1908c <__assert_fail@plt+0x7b6c>
   18fc4:	cmp	r5, #0
   18fc8:	bne	1908c <__assert_fail@plt+0x7b6c>
   18fcc:	ldrb	r0, [r6]
   18fd0:	cmp	r0, #43	; 0x2b
   18fd4:	beq	18ff4 <__assert_fail@plt+0x7ad4>
   18fd8:	mov	r0, r6
   18fdc:	bl	11514 <getgrnam@plt>
   18fe0:	cmp	r0, #0
   18fe4:	beq	18ff4 <__assert_fail@plt+0x7ad4>
   18fe8:	ldr	r0, [r0, #8]
   18fec:	mov	r5, #0
   18ff0:	b	19044 <__assert_fail@plt+0x7b24>
   18ff4:	movw	r0, #47248	; 0xb890
   18ff8:	add	r3, sp, #12
   18ffc:	mov	r1, #0
   19000:	mov	r2, #10
   19004:	movt	r0, #1
   19008:	str	r0, [sp]
   1900c:	mov	r0, r6
   19010:	bl	19e78 <__assert_fail@plt+0x8958>
   19014:	ldr	r1, [sp, #12]
   19018:	mvn	r2, #0
   1901c:	clz	r0, r0
   19020:	movw	r5, #50029	; 0xc36d
   19024:	lsr	r0, r0, #5
   19028:	movt	r5, #1
   1902c:	subs	r2, r1, r2
   19030:	movwne	r2, #1
   19034:	ands	r0, r0, r2
   19038:	ldr	r0, [sp, #8]
   1903c:	movne	r0, r1
   19040:	movwne	r5, #0
   19044:	str	r0, [sp, #8]
   19048:	bl	111fc <endgrent@plt>
   1904c:	mov	r0, r6
   19050:	bl	19d80 <__assert_fail@plt+0x8860>
   19054:	mov	r4, r0
   19058:	mov	r6, #0
   1905c:	cmp	r5, #0
   19060:	bne	19148 <__assert_fail@plt+0x7c28>
   19064:	b	1910c <__assert_fail@plt+0x7bec>
   19068:	ldrb	r0, [r4, #1]!
   1906c:	mov	r7, #0
   19070:	mov	r5, #0
   19074:	cmp	r0, #0
   19078:	moveq	r4, r0
   1907c:	mov	r6, r4
   19080:	mov	r4, #0
   19084:	cmp	r6, #0
   19088:	bne	18fc4 <__assert_fail@plt+0x7aa4>
   1908c:	mov	r6, #0
   19090:	cmp	r5, #0
   19094:	bne	19148 <__assert_fail@plt+0x7c28>
   19098:	b	1910c <__assert_fail@plt+0x7bec>
   1909c:	movw	r0, #47248	; 0xb890
   190a0:	add	r3, sp, #12
   190a4:	mov	r1, #0
   190a8:	mov	r2, #10
   190ac:	mov	r4, #0
   190b0:	movt	r0, #1
   190b4:	str	r0, [sp]
   190b8:	mov	r0, r7
   190bc:	bl	19e78 <__assert_fail@plt+0x8958>
   190c0:	ldr	r1, [sp, #12]
   190c4:	mvn	r2, #0
   190c8:	clz	r0, r0
   190cc:	movw	r5, #50016	; 0xc360
   190d0:	lsr	r0, r0, #5
   190d4:	movt	r5, #1
   190d8:	subs	r2, r1, r2
   190dc:	movwne	r2, #1
   190e0:	ands	r0, r0, r2
   190e4:	ldr	r0, [sp, #4]
   190e8:	movne	r0, r1
   190ec:	movwne	r5, #0
   190f0:	str	r0, [sp, #4]
   190f4:	bl	11448 <endpwent@plt>
   190f8:	cmp	r6, #0
   190fc:	bne	18fc4 <__assert_fail@plt+0x7aa4>
   19100:	b	1908c <__assert_fail@plt+0x7b6c>
   19104:	mov	r4, #0
   19108:	mov	r7, #0
   1910c:	ldr	r0, [sp, #4]
   19110:	cmp	sl, #0
   19114:	mov	r6, #1
   19118:	str	r0, [r9]
   1911c:	ldrne	r0, [sp, #8]
   19120:	strne	r0, [sl]
   19124:	ldr	r0, [fp, #8]
   19128:	cmp	r0, #0
   1912c:	strne	r7, [r0]
   19130:	movne	r7, #0
   19134:	cmp	r8, #0
   19138:	moveq	r5, #0
   1913c:	strne	r4, [r8]
   19140:	movne	r5, #0
   19144:	movne	r4, #0
   19148:	mov	r0, r7
   1914c:	bl	12f00 <__assert_fail@plt+0x19e0>
   19150:	mov	r0, r4
   19154:	bl	12f00 <__assert_fail@plt+0x19e0>
   19158:	mov	r0, #0
   1915c:	cmp	r6, #0
   19160:	bne	19174 <__assert_fail@plt+0x7c54>
   19164:	mov	r0, #0
   19168:	mov	r1, r5
   1916c:	mov	r2, #5
   19170:	bl	11298 <dcgettext@plt>
   19174:	sub	sp, fp, #28
   19178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1917c:	mov	r4, #0
   19180:	bl	11448 <endpwent@plt>
   19184:	cmp	r6, #0
   19188:	bne	18fc4 <__assert_fail@plt+0x7aa4>
   1918c:	b	1908c <__assert_fail@plt+0x7b6c>
   19190:	add	r2, sp, #12
   19194:	mov	r0, r4
   19198:	mov	r1, #0
   1919c:	bl	16c58 <__assert_fail@plt+0x5738>
   191a0:	bl	19d80 <__assert_fail@plt+0x8860>
   191a4:	mov	r4, r0
   191a8:	bl	111fc <endgrent@plt>
   191ac:	bl	11448 <endpwent@plt>
   191b0:	cmp	r6, #0
   191b4:	bne	18fc4 <__assert_fail@plt+0x7aa4>
   191b8:	b	1908c <__assert_fail@plt+0x7b6c>
   191bc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   191c0:	add	fp, sp, #24
   191c4:	sub	sp, sp, #32
   191c8:	ldr	r6, [fp, #12]
   191cc:	ldr	r7, [fp, #8]
   191d0:	mov	r4, r2
   191d4:	mov	r8, r0
   191d8:	cmp	r1, #0
   191dc:	beq	19204 <__assert_fail@plt+0x7ce4>
   191e0:	movw	r2, #50056	; 0xc388
   191e4:	mov	r5, r1
   191e8:	str	r3, [sp, #4]
   191ec:	str	r4, [sp]
   191f0:	mov	r0, r8
   191f4:	mov	r1, #1
   191f8:	movt	r2, #1
   191fc:	mov	r3, r5
   19200:	b	1921c <__assert_fail@plt+0x7cfc>
   19204:	movw	r2, #50068	; 0xc394
   19208:	str	r3, [sp]
   1920c:	mov	r0, r8
   19210:	mov	r1, #1
   19214:	mov	r3, r4
   19218:	movt	r2, #1
   1921c:	bl	1140c <__fprintf_chk@plt>
   19220:	movw	r1, #50075	; 0xc39b
   19224:	mov	r0, #0
   19228:	mov	r2, #5
   1922c:	movt	r1, #1
   19230:	bl	11298 <dcgettext@plt>
   19234:	movw	r2, #50793	; 0xc669
   19238:	mov	r3, r0
   1923c:	movw	r0, #2022	; 0x7e6
   19240:	mov	r1, #1
   19244:	movt	r2, #1
   19248:	str	r0, [sp]
   1924c:	mov	r0, r8
   19250:	bl	1140c <__fprintf_chk@plt>
   19254:	movw	r4, #47247	; 0xb88f
   19258:	mov	r1, r8
   1925c:	movt	r4, #1
   19260:	mov	r0, r4
   19264:	bl	11208 <fputs_unlocked@plt>
   19268:	movw	r1, #50079	; 0xc39f
   1926c:	mov	r0, #0
   19270:	mov	r2, #5
   19274:	movt	r1, #1
   19278:	bl	11298 <dcgettext@plt>
   1927c:	movw	r3, #50250	; 0xc44a
   19280:	mov	r2, r0
   19284:	mov	r0, r8
   19288:	mov	r1, #1
   1928c:	movt	r3, #1
   19290:	bl	1140c <__fprintf_chk@plt>
   19294:	mov	r0, r4
   19298:	mov	r1, r8
   1929c:	bl	11208 <fputs_unlocked@plt>
   192a0:	cmp	r6, #9
   192a4:	bhi	192e0 <__assert_fail@plt+0x7dc0>
   192a8:	add	r0, pc, #0
   192ac:	ldr	pc, [r0, r6, lsl #2]
   192b0:	ldrdeq	r9, [r1], -r8
   192b4:	andeq	r9, r1, ip, ror #5
   192b8:	andeq	r9, r1, ip, lsl r3
   192bc:	andeq	r9, r1, r4, asr #6
   192c0:	andeq	r9, r1, ip, ror #6
   192c4:	muleq	r1, r4, r3
   192c8:			; <UNDEFINED> instruction: 0x000193bc
   192cc:	strdeq	r9, [r1], -r4
   192d0:	muleq	r1, ip, r4
   192d4:	andeq	r9, r1, r4, asr #8
   192d8:	sub	sp, fp, #24
   192dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   192e0:	movw	r1, #50603	; 0xc5ab
   192e4:	movt	r1, #1
   192e8:	b	1944c <__assert_fail@plt+0x7f2c>
   192ec:	movw	r1, #50284	; 0xc46c
   192f0:	mov	r0, #0
   192f4:	mov	r2, #5
   192f8:	movt	r1, #1
   192fc:	bl	11298 <dcgettext@plt>
   19300:	ldr	r3, [r7]
   19304:	mov	r2, r0
   19308:	mov	r0, r8
   1930c:	mov	r1, #1
   19310:	sub	sp, fp, #24
   19314:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19318:	b	1140c <__fprintf_chk@plt>
   1931c:	movw	r1, #50300	; 0xc47c
   19320:	mov	r0, #0
   19324:	mov	r2, #5
   19328:	movt	r1, #1
   1932c:	bl	11298 <dcgettext@plt>
   19330:	mov	r2, r0
   19334:	ldr	r3, [r7]
   19338:	ldr	r0, [r7, #4]
   1933c:	str	r0, [sp]
   19340:	b	19430 <__assert_fail@plt+0x7f10>
   19344:	movw	r1, #50323	; 0xc493
   19348:	mov	r0, #0
   1934c:	mov	r2, #5
   19350:	movt	r1, #1
   19354:	bl	11298 <dcgettext@plt>
   19358:	mov	r2, r0
   1935c:	ldr	r3, [r7]
   19360:	ldmib	r7, {r0, r1}
   19364:	stm	sp, {r0, r1}
   19368:	b	19430 <__assert_fail@plt+0x7f10>
   1936c:	movw	r1, #50351	; 0xc4af
   19370:	mov	r0, #0
   19374:	mov	r2, #5
   19378:	movt	r1, #1
   1937c:	bl	11298 <dcgettext@plt>
   19380:	ldr	r3, [r7]
   19384:	mov	r2, r0
   19388:	ldmib	r7, {r0, r1, r7}
   1938c:	stm	sp, {r0, r1, r7}
   19390:	b	19430 <__assert_fail@plt+0x7f10>
   19394:	movw	r1, #50383	; 0xc4cf
   19398:	mov	r0, #0
   1939c:	mov	r2, #5
   193a0:	movt	r1, #1
   193a4:	bl	11298 <dcgettext@plt>
   193a8:	ldr	r3, [r7]
   193ac:	mov	r2, r0
   193b0:	ldmib	r7, {r0, r1, r6, r7}
   193b4:	stm	sp, {r0, r1, r6, r7}
   193b8:	b	19430 <__assert_fail@plt+0x7f10>
   193bc:	movw	r1, #50419	; 0xc4f3
   193c0:	mov	r0, #0
   193c4:	mov	r2, #5
   193c8:	movt	r1, #1
   193cc:	bl	11298 <dcgettext@plt>
   193d0:	mov	r2, r0
   193d4:	ldr	r3, [r7]
   193d8:	ldmib	r7, {r0, r1, r6}
   193dc:	ldr	r5, [r7, #16]
   193e0:	ldr	r7, [r7, #20]
   193e4:	stm	sp, {r0, r1, r6}
   193e8:	str	r5, [sp, #12]
   193ec:	str	r7, [sp, #16]
   193f0:	b	19430 <__assert_fail@plt+0x7f10>
   193f4:	movw	r1, #50459	; 0xc51b
   193f8:	mov	r0, #0
   193fc:	mov	r2, #5
   19400:	movt	r1, #1
   19404:	bl	11298 <dcgettext@plt>
   19408:	mov	r2, r0
   1940c:	ldr	r3, [r7]
   19410:	ldmib	r7, {r0, r1, r6}
   19414:	ldr	r5, [r7, #16]
   19418:	ldr	r4, [r7, #20]
   1941c:	ldr	r7, [r7, #24]
   19420:	stm	sp, {r0, r1, r6}
   19424:	str	r5, [sp, #12]
   19428:	str	r4, [sp, #16]
   1942c:	str	r7, [sp, #20]
   19430:	mov	r0, r8
   19434:	mov	r1, #1
   19438:	bl	1140c <__fprintf_chk@plt>
   1943c:	sub	sp, fp, #24
   19440:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19444:	movw	r1, #50551	; 0xc577
   19448:	movt	r1, #1
   1944c:	mov	r0, #0
   19450:	mov	r2, #5
   19454:	bl	11298 <dcgettext@plt>
   19458:	mov	ip, r0
   1945c:	ldr	r3, [r7]
   19460:	ldr	r0, [r7, #4]
   19464:	ldr	r1, [r7, #8]
   19468:	ldr	r6, [r7, #12]
   1946c:	ldr	r5, [r7, #16]
   19470:	ldr	r4, [r7, #20]
   19474:	ldr	r2, [r7, #24]
   19478:	ldr	lr, [r7, #28]
   1947c:	ldr	r7, [r7, #32]
   19480:	stm	sp, {r0, r1, r6}
   19484:	str	r5, [sp, #12]
   19488:	str	r4, [sp, #16]
   1948c:	str	r2, [sp, #20]
   19490:	str	lr, [sp, #24]
   19494:	str	r7, [sp, #28]
   19498:	b	194e0 <__assert_fail@plt+0x7fc0>
   1949c:	movw	r1, #50503	; 0xc547
   194a0:	mov	r0, #0
   194a4:	mov	r2, #5
   194a8:	movt	r1, #1
   194ac:	bl	11298 <dcgettext@plt>
   194b0:	mov	ip, r0
   194b4:	ldr	r3, [r7]
   194b8:	ldmib	r7, {r0, r1, r6}
   194bc:	ldr	r5, [r7, #16]
   194c0:	ldr	r4, [r7, #20]
   194c4:	ldr	r2, [r7, #24]
   194c8:	ldr	r7, [r7, #28]
   194cc:	stm	sp, {r0, r1, r6}
   194d0:	str	r5, [sp, #12]
   194d4:	str	r4, [sp, #16]
   194d8:	str	r2, [sp, #20]
   194dc:	str	r7, [sp, #24]
   194e0:	mov	r0, r8
   194e4:	mov	r1, #1
   194e8:	mov	r2, ip
   194ec:	bl	1140c <__fprintf_chk@plt>
   194f0:	sub	sp, fp, #24
   194f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   194f8:	push	{r4, sl, fp, lr}
   194fc:	add	fp, sp, #8
   19500:	sub	sp, sp, #8
   19504:	ldr	ip, [fp, #8]
   19508:	mov	lr, #0
   1950c:	ldr	r4, [ip, lr, lsl #2]
   19510:	add	lr, lr, #1
   19514:	cmp	r4, #0
   19518:	bne	1950c <__assert_fail@plt+0x7fec>
   1951c:	sub	r4, lr, #1
   19520:	str	ip, [sp]
   19524:	str	r4, [sp, #4]
   19528:	bl	191bc <__assert_fail@plt+0x7c9c>
   1952c:	sub	sp, fp, #8
   19530:	pop	{r4, sl, fp, pc}
   19534:	push	{fp, lr}
   19538:	mov	fp, sp
   1953c:	sub	sp, sp, #48	; 0x30
   19540:	ldr	ip, [fp, #8]
   19544:	ldr	lr, [ip]
   19548:	cmp	lr, #0
   1954c:	str	lr, [sp, #8]
   19550:	beq	195ec <__assert_fail@plt+0x80cc>
   19554:	ldr	lr, [ip, #4]
   19558:	cmp	lr, #0
   1955c:	str	lr, [sp, #12]
   19560:	beq	195f4 <__assert_fail@plt+0x80d4>
   19564:	ldr	lr, [ip, #8]
   19568:	cmp	lr, #0
   1956c:	str	lr, [sp, #16]
   19570:	beq	195fc <__assert_fail@plt+0x80dc>
   19574:	ldr	lr, [ip, #12]
   19578:	cmp	lr, #0
   1957c:	str	lr, [sp, #20]
   19580:	beq	19604 <__assert_fail@plt+0x80e4>
   19584:	ldr	lr, [ip, #16]
   19588:	cmp	lr, #0
   1958c:	str	lr, [sp, #24]
   19590:	beq	1960c <__assert_fail@plt+0x80ec>
   19594:	ldr	lr, [ip, #20]
   19598:	cmp	lr, #0
   1959c:	str	lr, [sp, #28]
   195a0:	beq	19614 <__assert_fail@plt+0x80f4>
   195a4:	ldr	lr, [ip, #24]
   195a8:	cmp	lr, #0
   195ac:	str	lr, [sp, #32]
   195b0:	beq	1961c <__assert_fail@plt+0x80fc>
   195b4:	ldr	lr, [ip, #28]
   195b8:	cmp	lr, #0
   195bc:	str	lr, [sp, #36]	; 0x24
   195c0:	beq	19624 <__assert_fail@plt+0x8104>
   195c4:	ldr	lr, [ip, #32]
   195c8:	cmp	lr, #0
   195cc:	str	lr, [sp, #40]	; 0x28
   195d0:	beq	1962c <__assert_fail@plt+0x810c>
   195d4:	ldr	lr, [ip, #36]	; 0x24
   195d8:	mov	ip, #10
   195dc:	cmp	lr, #0
   195e0:	str	lr, [sp, #44]	; 0x2c
   195e4:	movweq	ip, #9
   195e8:	b	19630 <__assert_fail@plt+0x8110>
   195ec:	mov	ip, #0
   195f0:	b	19630 <__assert_fail@plt+0x8110>
   195f4:	mov	ip, #1
   195f8:	b	19630 <__assert_fail@plt+0x8110>
   195fc:	mov	ip, #2
   19600:	b	19630 <__assert_fail@plt+0x8110>
   19604:	mov	ip, #3
   19608:	b	19630 <__assert_fail@plt+0x8110>
   1960c:	mov	ip, #4
   19610:	b	19630 <__assert_fail@plt+0x8110>
   19614:	mov	ip, #5
   19618:	b	19630 <__assert_fail@plt+0x8110>
   1961c:	mov	ip, #6
   19620:	b	19630 <__assert_fail@plt+0x8110>
   19624:	mov	ip, #7
   19628:	b	19630 <__assert_fail@plt+0x8110>
   1962c:	mov	ip, #8
   19630:	add	lr, sp, #8
   19634:	str	ip, [sp, #4]
   19638:	str	lr, [sp]
   1963c:	bl	191bc <__assert_fail@plt+0x7c9c>
   19640:	mov	sp, fp
   19644:	pop	{fp, pc}
   19648:	push	{fp, lr}
   1964c:	mov	fp, sp
   19650:	sub	sp, sp, #56	; 0x38
   19654:	add	ip, fp, #8
   19658:	str	ip, [sp, #12]
   1965c:	ldr	lr, [fp, #8]
   19660:	cmp	lr, #0
   19664:	str	lr, [sp, #16]
   19668:	beq	19704 <__assert_fail@plt+0x81e4>
   1966c:	ldr	lr, [ip, #4]
   19670:	cmp	lr, #0
   19674:	str	lr, [sp, #20]
   19678:	beq	1970c <__assert_fail@plt+0x81ec>
   1967c:	ldr	lr, [ip, #8]
   19680:	cmp	lr, #0
   19684:	str	lr, [sp, #24]
   19688:	beq	19714 <__assert_fail@plt+0x81f4>
   1968c:	ldr	lr, [ip, #12]
   19690:	cmp	lr, #0
   19694:	str	lr, [sp, #28]
   19698:	beq	1971c <__assert_fail@plt+0x81fc>
   1969c:	ldr	lr, [ip, #16]
   196a0:	cmp	lr, #0
   196a4:	str	lr, [sp, #32]
   196a8:	beq	19724 <__assert_fail@plt+0x8204>
   196ac:	ldr	lr, [ip, #20]
   196b0:	cmp	lr, #0
   196b4:	str	lr, [sp, #36]	; 0x24
   196b8:	beq	1972c <__assert_fail@plt+0x820c>
   196bc:	ldr	lr, [ip, #24]
   196c0:	cmp	lr, #0
   196c4:	str	lr, [sp, #40]	; 0x28
   196c8:	beq	19734 <__assert_fail@plt+0x8214>
   196cc:	ldr	lr, [ip, #28]
   196d0:	cmp	lr, #0
   196d4:	str	lr, [sp, #44]	; 0x2c
   196d8:	beq	1973c <__assert_fail@plt+0x821c>
   196dc:	ldr	lr, [ip, #32]
   196e0:	cmp	lr, #0
   196e4:	str	lr, [sp, #48]	; 0x30
   196e8:	beq	19744 <__assert_fail@plt+0x8224>
   196ec:	ldr	lr, [ip, #36]	; 0x24
   196f0:	mov	ip, #10
   196f4:	cmp	lr, #0
   196f8:	str	lr, [sp, #52]	; 0x34
   196fc:	movweq	ip, #9
   19700:	b	19748 <__assert_fail@plt+0x8228>
   19704:	mov	ip, #0
   19708:	b	19748 <__assert_fail@plt+0x8228>
   1970c:	mov	ip, #1
   19710:	b	19748 <__assert_fail@plt+0x8228>
   19714:	mov	ip, #2
   19718:	b	19748 <__assert_fail@plt+0x8228>
   1971c:	mov	ip, #3
   19720:	b	19748 <__assert_fail@plt+0x8228>
   19724:	mov	ip, #4
   19728:	b	19748 <__assert_fail@plt+0x8228>
   1972c:	mov	ip, #5
   19730:	b	19748 <__assert_fail@plt+0x8228>
   19734:	mov	ip, #6
   19738:	b	19748 <__assert_fail@plt+0x8228>
   1973c:	mov	ip, #7
   19740:	b	19748 <__assert_fail@plt+0x8228>
   19744:	mov	ip, #8
   19748:	add	lr, sp, #16
   1974c:	str	ip, [sp, #4]
   19750:	str	lr, [sp]
   19754:	bl	191bc <__assert_fail@plt+0x7c9c>
   19758:	mov	sp, fp
   1975c:	pop	{fp, pc}
   19760:	push	{fp, lr}
   19764:	mov	fp, sp
   19768:	movw	r0, #53644	; 0xd18c
   1976c:	movt	r0, #2
   19770:	ldr	r1, [r0]
   19774:	movw	r0, #47247	; 0xb88f
   19778:	movt	r0, #1
   1977c:	bl	11208 <fputs_unlocked@plt>
   19780:	movw	r1, #50663	; 0xc5e7
   19784:	mov	r0, #0
   19788:	mov	r2, #5
   1978c:	movt	r1, #1
   19790:	bl	11298 <dcgettext@plt>
   19794:	movw	r2, #50683	; 0xc5fb
   19798:	mov	r1, r0
   1979c:	mov	r0, #1
   197a0:	movt	r2, #1
   197a4:	bl	113f4 <__printf_chk@plt>
   197a8:	movw	r1, #50705	; 0xc611
   197ac:	mov	r0, #0
   197b0:	mov	r2, #5
   197b4:	movt	r1, #1
   197b8:	bl	11298 <dcgettext@plt>
   197bc:	movw	r2, #47787	; 0xbaab
   197c0:	movw	r3, #48062	; 0xbbbe
   197c4:	mov	r1, r0
   197c8:	mov	r0, #1
   197cc:	movt	r2, #1
   197d0:	movt	r3, #1
   197d4:	bl	113f4 <__printf_chk@plt>
   197d8:	movw	r1, #50725	; 0xc625
   197dc:	mov	r0, #0
   197e0:	mov	r2, #5
   197e4:	movt	r1, #1
   197e8:	bl	11298 <dcgettext@plt>
   197ec:	movw	r2, #50764	; 0xc64c
   197f0:	mov	r1, r0
   197f4:	mov	r0, #1
   197f8:	movt	r2, #1
   197fc:	pop	{fp, lr}
   19800:	b	113f4 <__printf_chk@plt>
   19804:	push	{r4, r5, r6, sl, fp, lr}
   19808:	add	fp, sp, #16
   1980c:	mov	r4, r2
   19810:	mov	r5, r1
   19814:	mov	r6, r0
   19818:	bl	1ad9c <__assert_fail@plt+0x987c>
   1981c:	cmp	r0, #0
   19820:	popne	{r4, r5, r6, sl, fp, pc}
   19824:	cmp	r6, #0
   19828:	beq	1983c <__assert_fail@plt+0x831c>
   1982c:	cmp	r5, #0
   19830:	cmpne	r4, #0
   19834:	bne	1983c <__assert_fail@plt+0x831c>
   19838:	pop	{r4, r5, r6, sl, fp, pc}
   1983c:	bl	19db8 <__assert_fail@plt+0x8898>
   19840:	push	{r4, r5, r6, sl, fp, lr}
   19844:	add	fp, sp, #16
   19848:	mov	r4, r2
   1984c:	mov	r5, r1
   19850:	mov	r6, r0
   19854:	bl	1ad9c <__assert_fail@plt+0x987c>
   19858:	cmp	r0, #0
   1985c:	popne	{r4, r5, r6, sl, fp, pc}
   19860:	cmp	r6, #0
   19864:	beq	19878 <__assert_fail@plt+0x8358>
   19868:	cmp	r5, #0
   1986c:	cmpne	r4, #0
   19870:	bne	19878 <__assert_fail@plt+0x8358>
   19874:	pop	{r4, r5, r6, sl, fp, pc}
   19878:	bl	19db8 <__assert_fail@plt+0x8898>
   1987c:	push	{fp, lr}
   19880:	mov	fp, sp
   19884:	bl	1a74c <__assert_fail@plt+0x922c>
   19888:	cmp	r0, #0
   1988c:	popne	{fp, pc}
   19890:	bl	19db8 <__assert_fail@plt+0x8898>
   19894:	push	{fp, lr}
   19898:	mov	fp, sp
   1989c:	bl	1a74c <__assert_fail@plt+0x922c>
   198a0:	cmp	r0, #0
   198a4:	popne	{fp, pc}
   198a8:	bl	19db8 <__assert_fail@plt+0x8898>
   198ac:	push	{fp, lr}
   198b0:	mov	fp, sp
   198b4:	bl	1a74c <__assert_fail@plt+0x922c>
   198b8:	cmp	r0, #0
   198bc:	popne	{fp, pc}
   198c0:	bl	19db8 <__assert_fail@plt+0x8898>
   198c4:	push	{r4, r5, fp, lr}
   198c8:	add	fp, sp, #8
   198cc:	mov	r4, r1
   198d0:	mov	r5, r0
   198d4:	bl	1a77c <__assert_fail@plt+0x925c>
   198d8:	cmp	r0, #0
   198dc:	popne	{r4, r5, fp, pc}
   198e0:	cmp	r5, #0
   198e4:	beq	198f4 <__assert_fail@plt+0x83d4>
   198e8:	cmp	r4, #0
   198ec:	bne	198f4 <__assert_fail@plt+0x83d4>
   198f0:	pop	{r4, r5, fp, pc}
   198f4:	bl	19db8 <__assert_fail@plt+0x8898>
   198f8:	push	{fp, lr}
   198fc:	mov	fp, sp
   19900:	cmp	r1, #0
   19904:	orreq	r1, r1, #1
   19908:	bl	1a77c <__assert_fail@plt+0x925c>
   1990c:	cmp	r0, #0
   19910:	popne	{fp, pc}
   19914:	bl	19db8 <__assert_fail@plt+0x8898>
   19918:	push	{fp, lr}
   1991c:	mov	fp, sp
   19920:	clz	r3, r2
   19924:	lsr	ip, r3, #5
   19928:	clz	r3, r1
   1992c:	lsr	r3, r3, #5
   19930:	orrs	r3, r3, ip
   19934:	movwne	r1, #1
   19938:	movwne	r2, #1
   1993c:	bl	1ad9c <__assert_fail@plt+0x987c>
   19940:	cmp	r0, #0
   19944:	popne	{fp, pc}
   19948:	bl	19db8 <__assert_fail@plt+0x8898>
   1994c:	push	{fp, lr}
   19950:	mov	fp, sp
   19954:	mov	r2, r1
   19958:	mov	r1, r0
   1995c:	mov	r0, #0
   19960:	bl	1ad9c <__assert_fail@plt+0x987c>
   19964:	cmp	r0, #0
   19968:	popne	{fp, pc}
   1996c:	bl	19db8 <__assert_fail@plt+0x8898>
   19970:	push	{fp, lr}
   19974:	mov	fp, sp
   19978:	mov	r2, r1
   1997c:	mov	r1, r0
   19980:	clz	r0, r2
   19984:	clz	r3, r1
   19988:	lsr	r0, r0, #5
   1998c:	lsr	r3, r3, #5
   19990:	orrs	r0, r3, r0
   19994:	mov	r0, #0
   19998:	movwne	r1, #1
   1999c:	movwne	r2, #1
   199a0:	bl	1ad9c <__assert_fail@plt+0x987c>
   199a4:	cmp	r0, #0
   199a8:	popne	{fp, pc}
   199ac:	bl	19db8 <__assert_fail@plt+0x8898>
   199b0:	push	{r4, r5, r6, sl, fp, lr}
   199b4:	add	fp, sp, #16
   199b8:	ldr	r5, [r1]
   199bc:	mov	r4, r1
   199c0:	mov	r6, r0
   199c4:	cmp	r0, #0
   199c8:	beq	199e0 <__assert_fail@plt+0x84c0>
   199cc:	mov	r0, #1
   199d0:	add	r0, r0, r5, lsr #1
   199d4:	adds	r5, r5, r0
   199d8:	bcc	199e8 <__assert_fail@plt+0x84c8>
   199dc:	b	19a24 <__assert_fail@plt+0x8504>
   199e0:	cmp	r5, #0
   199e4:	movweq	r5, #64	; 0x40
   199e8:	mov	r0, r6
   199ec:	mov	r1, r5
   199f0:	mov	r2, #1
   199f4:	bl	1ad9c <__assert_fail@plt+0x987c>
   199f8:	cmp	r5, #0
   199fc:	mov	r1, r5
   19a00:	movwne	r1, #1
   19a04:	cmp	r0, #0
   19a08:	bne	19a1c <__assert_fail@plt+0x84fc>
   19a0c:	clz	r2, r6
   19a10:	lsr	r2, r2, #5
   19a14:	orrs	r1, r2, r1
   19a18:	bne	19a24 <__assert_fail@plt+0x8504>
   19a1c:	str	r5, [r4]
   19a20:	pop	{r4, r5, r6, sl, fp, pc}
   19a24:	bl	19db8 <__assert_fail@plt+0x8898>
   19a28:	push	{r4, r5, r6, r7, fp, lr}
   19a2c:	add	fp, sp, #16
   19a30:	ldr	r5, [r1]
   19a34:	mov	r6, r2
   19a38:	mov	r4, r1
   19a3c:	mov	r7, r0
   19a40:	cmp	r0, #0
   19a44:	beq	19a5c <__assert_fail@plt+0x853c>
   19a48:	mov	r0, #1
   19a4c:	add	r0, r0, r5, lsr #1
   19a50:	adds	r5, r5, r0
   19a54:	bcc	19a74 <__assert_fail@plt+0x8554>
   19a58:	b	19aa8 <__assert_fail@plt+0x8588>
   19a5c:	cmp	r5, #0
   19a60:	bne	19a74 <__assert_fail@plt+0x8554>
   19a64:	mov	r0, #64	; 0x40
   19a68:	cmp	r6, #64	; 0x40
   19a6c:	udiv	r5, r0, r6
   19a70:	addhi	r5, r5, #1
   19a74:	mov	r0, r7
   19a78:	mov	r1, r5
   19a7c:	mov	r2, r6
   19a80:	bl	1ad9c <__assert_fail@plt+0x987c>
   19a84:	cmp	r0, #0
   19a88:	bne	19aa0 <__assert_fail@plt+0x8580>
   19a8c:	cmp	r7, #0
   19a90:	beq	19aa8 <__assert_fail@plt+0x8588>
   19a94:	cmp	r6, #0
   19a98:	cmpne	r5, #0
   19a9c:	bne	19aa8 <__assert_fail@plt+0x8588>
   19aa0:	str	r5, [r4]
   19aa4:	pop	{r4, r5, r6, r7, fp, pc}
   19aa8:	bl	19db8 <__assert_fail@plt+0x8898>
   19aac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19ab0:	add	fp, sp, #24
   19ab4:	mov	r8, r1
   19ab8:	ldr	r1, [r1]
   19abc:	mov	r5, r0
   19ac0:	add	r0, r1, r1, asr #1
   19ac4:	cmp	r0, r1
   19ac8:	mvnvs	r0, #-2147483648	; 0x80000000
   19acc:	cmp	r0, r3
   19ad0:	mov	r7, r0
   19ad4:	movgt	r7, r3
   19ad8:	cmn	r3, #1
   19adc:	movle	r7, r0
   19ae0:	ldr	r0, [fp, #8]
   19ae4:	cmn	r0, #1
   19ae8:	ble	19b10 <__assert_fail@plt+0x85f0>
   19aec:	cmp	r0, #0
   19af0:	beq	19b64 <__assert_fail@plt+0x8644>
   19af4:	cmn	r7, #1
   19af8:	ble	19b38 <__assert_fail@plt+0x8618>
   19afc:	mvn	r4, #-2147483648	; 0x80000000
   19b00:	udiv	r6, r4, r0
   19b04:	cmp	r6, r7
   19b08:	bge	19b64 <__assert_fail@plt+0x8644>
   19b0c:	b	19b74 <__assert_fail@plt+0x8654>
   19b10:	cmn	r7, #1
   19b14:	ble	19b54 <__assert_fail@plt+0x8634>
   19b18:	cmn	r0, #1
   19b1c:	beq	19b64 <__assert_fail@plt+0x8644>
   19b20:	mov	r6, #-2147483648	; 0x80000000
   19b24:	mvn	r4, #-2147483648	; 0x80000000
   19b28:	sdiv	r6, r6, r0
   19b2c:	cmp	r6, r7
   19b30:	bge	19b64 <__assert_fail@plt+0x8644>
   19b34:	b	19b74 <__assert_fail@plt+0x8654>
   19b38:	beq	19b64 <__assert_fail@plt+0x8644>
   19b3c:	mov	r6, #-2147483648	; 0x80000000
   19b40:	mvn	r4, #-2147483648	; 0x80000000
   19b44:	sdiv	r6, r6, r7
   19b48:	cmp	r6, r0
   19b4c:	bge	19b64 <__assert_fail@plt+0x8644>
   19b50:	b	19b74 <__assert_fail@plt+0x8654>
   19b54:	mvn	r4, #-2147483648	; 0x80000000
   19b58:	sdiv	r6, r4, r0
   19b5c:	cmp	r7, r6
   19b60:	blt	19b74 <__assert_fail@plt+0x8654>
   19b64:	mul	r6, r7, r0
   19b68:	mov	r4, #64	; 0x40
   19b6c:	cmp	r6, #63	; 0x3f
   19b70:	bgt	19b7c <__assert_fail@plt+0x865c>
   19b74:	sdiv	r7, r4, r0
   19b78:	mul	r6, r7, r0
   19b7c:	cmp	r5, #0
   19b80:	moveq	r4, #0
   19b84:	streq	r4, [r8]
   19b88:	sub	r4, r7, r1
   19b8c:	cmp	r4, r2
   19b90:	bge	19c3c <__assert_fail@plt+0x871c>
   19b94:	add	r7, r1, r2
   19b98:	mov	r6, #0
   19b9c:	mov	r2, #0
   19ba0:	cmp	r7, r3
   19ba4:	movwgt	r6, #1
   19ba8:	cmn	r3, #1
   19bac:	movwgt	r2, #1
   19bb0:	cmp	r7, r1
   19bb4:	bvs	19c70 <__assert_fail@plt+0x8750>
   19bb8:	ands	r1, r2, r6
   19bbc:	bne	19c70 <__assert_fail@plt+0x8750>
   19bc0:	cmn	r0, #1
   19bc4:	ble	19bec <__assert_fail@plt+0x86cc>
   19bc8:	cmp	r0, #0
   19bcc:	beq	19c38 <__assert_fail@plt+0x8718>
   19bd0:	cmn	r7, #1
   19bd4:	ble	19c10 <__assert_fail@plt+0x86f0>
   19bd8:	mvn	r1, #-2147483648	; 0x80000000
   19bdc:	udiv	r1, r1, r0
   19be0:	cmp	r1, r7
   19be4:	bge	19c38 <__assert_fail@plt+0x8718>
   19be8:	b	19c70 <__assert_fail@plt+0x8750>
   19bec:	cmn	r7, #1
   19bf0:	ble	19c28 <__assert_fail@plt+0x8708>
   19bf4:	cmn	r0, #1
   19bf8:	beq	19c38 <__assert_fail@plt+0x8718>
   19bfc:	mov	r1, #-2147483648	; 0x80000000
   19c00:	sdiv	r1, r1, r0
   19c04:	cmp	r1, r7
   19c08:	bge	19c38 <__assert_fail@plt+0x8718>
   19c0c:	b	19c70 <__assert_fail@plt+0x8750>
   19c10:	beq	19c38 <__assert_fail@plt+0x8718>
   19c14:	mov	r1, #-2147483648	; 0x80000000
   19c18:	sdiv	r1, r1, r7
   19c1c:	cmp	r1, r0
   19c20:	bge	19c38 <__assert_fail@plt+0x8718>
   19c24:	b	19c70 <__assert_fail@plt+0x8750>
   19c28:	mvn	r1, #-2147483648	; 0x80000000
   19c2c:	sdiv	r1, r1, r0
   19c30:	cmp	r7, r1
   19c34:	blt	19c70 <__assert_fail@plt+0x8750>
   19c38:	mul	r6, r7, r0
   19c3c:	mov	r0, r5
   19c40:	mov	r1, r6
   19c44:	bl	1a77c <__assert_fail@plt+0x925c>
   19c48:	cmp	r6, #0
   19c4c:	movwne	r6, #1
   19c50:	cmp	r0, #0
   19c54:	bne	19c68 <__assert_fail@plt+0x8748>
   19c58:	clz	r1, r5
   19c5c:	lsr	r1, r1, #5
   19c60:	orrs	r1, r1, r6
   19c64:	bne	19c70 <__assert_fail@plt+0x8750>
   19c68:	str	r7, [r8]
   19c6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19c70:	bl	19db8 <__assert_fail@plt+0x8898>
   19c74:	push	{fp, lr}
   19c78:	mov	fp, sp
   19c7c:	mov	r1, #1
   19c80:	bl	1a6f8 <__assert_fail@plt+0x91d8>
   19c84:	cmp	r0, #0
   19c88:	popne	{fp, pc}
   19c8c:	bl	19db8 <__assert_fail@plt+0x8898>
   19c90:	push	{fp, lr}
   19c94:	mov	fp, sp
   19c98:	bl	1a6f8 <__assert_fail@plt+0x91d8>
   19c9c:	cmp	r0, #0
   19ca0:	popne	{fp, pc}
   19ca4:	bl	19db8 <__assert_fail@plt+0x8898>
   19ca8:	push	{fp, lr}
   19cac:	mov	fp, sp
   19cb0:	mov	r1, #1
   19cb4:	bl	1a6f8 <__assert_fail@plt+0x91d8>
   19cb8:	cmp	r0, #0
   19cbc:	popne	{fp, pc}
   19cc0:	bl	19db8 <__assert_fail@plt+0x8898>
   19cc4:	push	{fp, lr}
   19cc8:	mov	fp, sp
   19ccc:	bl	1a6f8 <__assert_fail@plt+0x91d8>
   19cd0:	cmp	r0, #0
   19cd4:	popne	{fp, pc}
   19cd8:	bl	19db8 <__assert_fail@plt+0x8898>
   19cdc:	push	{r4, r5, fp, lr}
   19ce0:	add	fp, sp, #8
   19ce4:	mov	r5, r0
   19ce8:	mov	r0, r1
   19cec:	mov	r4, r1
   19cf0:	bl	1a74c <__assert_fail@plt+0x922c>
   19cf4:	cmp	r0, #0
   19cf8:	beq	19d0c <__assert_fail@plt+0x87ec>
   19cfc:	mov	r1, r5
   19d00:	mov	r2, r4
   19d04:	pop	{r4, r5, fp, lr}
   19d08:	b	11274 <memcpy@plt>
   19d0c:	bl	19db8 <__assert_fail@plt+0x8898>
   19d10:	push	{r4, r5, fp, lr}
   19d14:	add	fp, sp, #8
   19d18:	mov	r5, r0
   19d1c:	mov	r0, r1
   19d20:	mov	r4, r1
   19d24:	bl	1a74c <__assert_fail@plt+0x922c>
   19d28:	cmp	r0, #0
   19d2c:	beq	19d40 <__assert_fail@plt+0x8820>
   19d30:	mov	r1, r5
   19d34:	mov	r2, r4
   19d38:	pop	{r4, r5, fp, lr}
   19d3c:	b	11274 <memcpy@plt>
   19d40:	bl	19db8 <__assert_fail@plt+0x8898>
   19d44:	push	{r4, r5, fp, lr}
   19d48:	add	fp, sp, #8
   19d4c:	mov	r5, r0
   19d50:	add	r0, r1, #1
   19d54:	mov	r4, r1
   19d58:	bl	1a74c <__assert_fail@plt+0x922c>
   19d5c:	cmp	r0, #0
   19d60:	beq	19d7c <__assert_fail@plt+0x885c>
   19d64:	mov	r1, #0
   19d68:	mov	r2, r4
   19d6c:	strb	r1, [r0, r4]
   19d70:	mov	r1, r5
   19d74:	pop	{r4, r5, fp, lr}
   19d78:	b	11274 <memcpy@plt>
   19d7c:	bl	19db8 <__assert_fail@plt+0x8898>
   19d80:	push	{r4, r5, fp, lr}
   19d84:	add	fp, sp, #8
   19d88:	mov	r4, r0
   19d8c:	bl	113a0 <strlen@plt>
   19d90:	add	r5, r0, #1
   19d94:	mov	r0, r5
   19d98:	bl	1a74c <__assert_fail@plt+0x922c>
   19d9c:	cmp	r0, #0
   19da0:	beq	19db4 <__assert_fail@plt+0x8894>
   19da4:	mov	r1, r4
   19da8:	mov	r2, r5
   19dac:	pop	{r4, r5, fp, lr}
   19db0:	b	11274 <memcpy@plt>
   19db4:	bl	19db8 <__assert_fail@plt+0x8898>
   19db8:	push	{fp, lr}
   19dbc:	mov	fp, sp
   19dc0:	movw	r0, #53556	; 0xd134
   19dc4:	movw	r1, #50840	; 0xc698
   19dc8:	mov	r2, #5
   19dcc:	movt	r0, #2
   19dd0:	movt	r1, #1
   19dd4:	ldr	r4, [r0]
   19dd8:	mov	r0, #0
   19ddc:	bl	11298 <dcgettext@plt>
   19de0:	movw	r2, #47784	; 0xbaa8
   19de4:	mov	r3, r0
   19de8:	mov	r0, r4
   19dec:	mov	r1, #0
   19df0:	movt	r2, #1
   19df4:	bl	1131c <error@plt>
   19df8:	bl	114d8 <abort@plt>
   19dfc:	push	{fp, lr}
   19e00:	mov	fp, sp
   19e04:	orr	r1, r1, #512	; 0x200
   19e08:	bl	12f28 <__assert_fail@plt+0x1a08>
   19e0c:	cmp	r0, #0
   19e10:	popne	{fp, pc}
   19e14:	bl	113d0 <__errno_location@plt>
   19e18:	ldr	r0, [r0]
   19e1c:	cmp	r0, #22
   19e20:	bne	19e44 <__assert_fail@plt+0x8924>
   19e24:	movw	r0, #50857	; 0xc6a9
   19e28:	movw	r1, #50873	; 0xc6b9
   19e2c:	movw	r3, #50884	; 0xc6c4
   19e30:	mov	r2, #41	; 0x29
   19e34:	movt	r0, #1
   19e38:	movt	r1, #1
   19e3c:	movt	r3, #1
   19e40:	bl	11520 <__assert_fail@plt>
   19e44:	bl	19db8 <__assert_fail@plt+0x8898>
   19e48:	ldr	r0, [r0, #48]	; 0x30
   19e4c:	and	r0, r0, #17
   19e50:	cmp	r0, #16
   19e54:	moveq	r0, #1
   19e58:	bxeq	lr
   19e5c:	cmp	r0, #17
   19e60:	movne	r0, #0
   19e64:	bxne	lr
   19e68:	ldr	r0, [r1, #48]	; 0x30
   19e6c:	cmp	r0, #0
   19e70:	movwne	r0, #1
   19e74:	bx	lr
   19e78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e7c:	add	fp, sp, #28
   19e80:	sub	sp, sp, #20
   19e84:	cmp	r2, #37	; 0x25
   19e88:	bcs	1a6d8 <__assert_fail@plt+0x91b8>
   19e8c:	ldr	r9, [fp, #8]
   19e90:	mov	r5, r2
   19e94:	mov	r4, r1
   19e98:	mov	r7, r0
   19e9c:	str	r3, [sp, #12]
   19ea0:	bl	113d0 <__errno_location@plt>
   19ea4:	mov	r8, r0
   19ea8:	mov	r0, #0
   19eac:	str	r0, [r8]
   19eb0:	bl	11370 <__ctype_b_loc@plt>
   19eb4:	ldr	r1, [r0]
   19eb8:	mov	r2, r7
   19ebc:	ldrb	r0, [r2], #1
   19ec0:	add	r3, r1, r0, lsl #1
   19ec4:	ldrb	r3, [r3, #1]
   19ec8:	tst	r3, #32
   19ecc:	bne	19ebc <__assert_fail@plt+0x899c>
   19ed0:	cmp	r4, #0
   19ed4:	add	r6, sp, #16
   19ed8:	mov	sl, #4
   19edc:	movne	r6, r4
   19ee0:	cmp	r0, #45	; 0x2d
   19ee4:	bne	19ef4 <__assert_fail@plt+0x89d4>
   19ee8:	mov	r0, sl
   19eec:	sub	sp, fp, #28
   19ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ef4:	mov	r0, r7
   19ef8:	mov	r1, r6
   19efc:	mov	r2, r5
   19f00:	bl	11394 <strtoul@plt>
   19f04:	ldr	r5, [r6]
   19f08:	cmp	r5, r7
   19f0c:	beq	19f44 <__assert_fail@plt+0x8a24>
   19f10:	mov	r4, r0
   19f14:	ldr	r0, [r8]
   19f18:	cmp	r0, #0
   19f1c:	beq	1a0a8 <__assert_fail@plt+0x8b88>
   19f20:	cmp	r0, #34	; 0x22
   19f24:	bne	19ee8 <__assert_fail@plt+0x89c8>
   19f28:	mov	sl, #1
   19f2c:	cmp	r9, #0
   19f30:	beq	1a6c4 <__assert_fail@plt+0x91a4>
   19f34:	ldrb	r7, [r5]
   19f38:	cmp	r7, #0
   19f3c:	bne	19f7c <__assert_fail@plt+0x8a5c>
   19f40:	b	1a6c4 <__assert_fail@plt+0x91a4>
   19f44:	cmp	r9, #0
   19f48:	beq	19ee8 <__assert_fail@plt+0x89c8>
   19f4c:	ldrb	r1, [r7]
   19f50:	cmp	r1, #0
   19f54:	beq	19ee8 <__assert_fail@plt+0x89c8>
   19f58:	mov	r0, r9
   19f5c:	bl	113ac <strchr@plt>
   19f60:	cmp	r0, #0
   19f64:	beq	19ee8 <__assert_fail@plt+0x89c8>
   19f68:	mov	r4, #1
   19f6c:	mov	sl, #0
   19f70:	ldrb	r7, [r5]
   19f74:	cmp	r7, #0
   19f78:	beq	1a6c4 <__assert_fail@plt+0x91a4>
   19f7c:	mov	r0, r9
   19f80:	mov	r1, r7
   19f84:	bl	113ac <strchr@plt>
   19f88:	cmp	r0, #0
   19f8c:	beq	1a244 <__assert_fail@plt+0x8d24>
   19f90:	sub	r0, r7, #69	; 0x45
   19f94:	mov	lr, #1
   19f98:	mov	r8, #1024	; 0x400
   19f9c:	cmp	r0, #47	; 0x2f
   19fa0:	bhi	1a0f8 <__assert_fail@plt+0x8bd8>
   19fa4:	add	r1, pc, #0
   19fa8:	ldr	pc, [r1, r0, lsl #2]
   19fac:	andeq	sl, r1, ip, rrx
   19fb0:	strdeq	sl, [r1], -r8
   19fb4:	andeq	sl, r1, ip, rrx
   19fb8:	strdeq	sl, [r1], -r8
   19fbc:	strdeq	sl, [r1], -r8
   19fc0:	strdeq	sl, [r1], -r8
   19fc4:	andeq	sl, r1, ip, rrx
   19fc8:	strdeq	sl, [r1], -r8
   19fcc:	andeq	sl, r1, ip, rrx
   19fd0:	strdeq	sl, [r1], -r8
   19fd4:	strdeq	sl, [r1], -r8
   19fd8:	andeq	sl, r1, ip, rrx
   19fdc:	strdeq	sl, [r1], -r8
   19fe0:	strdeq	sl, [r1], -r8
   19fe4:	strdeq	sl, [r1], -r8
   19fe8:	andeq	sl, r1, ip, rrx
   19fec:	strdeq	sl, [r1], -r8
   19ff0:	strdeq	sl, [r1], -r8
   19ff4:	strdeq	sl, [r1], -r8
   19ff8:	strdeq	sl, [r1], -r8
   19ffc:	andeq	sl, r1, ip, rrx
   1a000:	andeq	sl, r1, ip, rrx
   1a004:	strdeq	sl, [r1], -r8
   1a008:	strdeq	sl, [r1], -r8
   1a00c:	strdeq	sl, [r1], -r8
   1a010:	strdeq	sl, [r1], -r8
   1a014:	strdeq	sl, [r1], -r8
   1a018:	strdeq	sl, [r1], -r8
   1a01c:	strdeq	sl, [r1], -r8
   1a020:	strdeq	sl, [r1], -r8
   1a024:	strdeq	sl, [r1], -r8
   1a028:	strdeq	sl, [r1], -r8
   1a02c:	strdeq	sl, [r1], -r8
   1a030:	strdeq	sl, [r1], -r8
   1a034:	andeq	sl, r1, ip, rrx
   1a038:	strdeq	sl, [r1], -r8
   1a03c:	strdeq	sl, [r1], -r8
   1a040:	strdeq	sl, [r1], -r8
   1a044:	andeq	sl, r1, ip, rrx
   1a048:	strdeq	sl, [r1], -r8
   1a04c:	andeq	sl, r1, ip, rrx
   1a050:	strdeq	sl, [r1], -r8
   1a054:	strdeq	sl, [r1], -r8
   1a058:	strdeq	sl, [r1], -r8
   1a05c:	strdeq	sl, [r1], -r8
   1a060:	strdeq	sl, [r1], -r8
   1a064:	strdeq	sl, [r1], -r8
   1a068:	andeq	sl, r1, ip, rrx
   1a06c:	mov	r0, r9
   1a070:	mov	r1, #48	; 0x30
   1a074:	bl	113ac <strchr@plt>
   1a078:	cmp	r0, #0
   1a07c:	beq	1a0b8 <__assert_fail@plt+0x8b98>
   1a080:	ldrb	r0, [r5, #1]
   1a084:	cmp	r0, #66	; 0x42
   1a088:	cmpne	r0, #68	; 0x44
   1a08c:	bne	1a0cc <__assert_fail@plt+0x8bac>
   1a090:	mov	lr, #2
   1a094:	mov	r8, #1000	; 0x3e8
   1a098:	sub	r1, r7, #66	; 0x42
   1a09c:	cmp	r1, #53	; 0x35
   1a0a0:	bls	1a104 <__assert_fail@plt+0x8be4>
   1a0a4:	b	1a244 <__assert_fail@plt+0x8d24>
   1a0a8:	mov	sl, r0
   1a0ac:	cmp	r9, #0
   1a0b0:	bne	19f34 <__assert_fail@plt+0x8a14>
   1a0b4:	b	1a6c4 <__assert_fail@plt+0x91a4>
   1a0b8:	mov	lr, #1
   1a0bc:	sub	r1, r7, #66	; 0x42
   1a0c0:	cmp	r1, #53	; 0x35
   1a0c4:	bls	1a104 <__assert_fail@plt+0x8be4>
   1a0c8:	b	1a244 <__assert_fail@plt+0x8d24>
   1a0cc:	cmp	r0, #105	; 0x69
   1a0d0:	bne	1a0f4 <__assert_fail@plt+0x8bd4>
   1a0d4:	ldrb	r0, [r5, #2]
   1a0d8:	mov	lr, #1
   1a0dc:	cmp	r0, #66	; 0x42
   1a0e0:	movweq	lr, #3
   1a0e4:	sub	r1, r7, #66	; 0x42
   1a0e8:	cmp	r1, #53	; 0x35
   1a0ec:	bls	1a104 <__assert_fail@plt+0x8be4>
   1a0f0:	b	1a244 <__assert_fail@plt+0x8d24>
   1a0f4:	mov	lr, #1
   1a0f8:	sub	r1, r7, #66	; 0x42
   1a0fc:	cmp	r1, #53	; 0x35
   1a100:	bhi	1a244 <__assert_fail@plt+0x8d24>
   1a104:	add	r2, pc, #4
   1a108:	mov	r0, #0
   1a10c:	ldr	pc, [r2, r1, lsl #2]
   1a110:	andeq	sl, r1, ip, lsl #8
   1a114:	andeq	sl, r1, r4, asr #4
   1a118:	andeq	sl, r1, r4, asr #4
   1a11c:	andeq	sl, r1, r8, lsr #8
   1a120:	andeq	sl, r1, r4, asr #4
   1a124:	andeq	sl, r1, r8, ror #3
   1a128:	andeq	sl, r1, r4, asr #4
   1a12c:	andeq	sl, r1, r4, asr #4
   1a130:	andeq	sl, r1, r4, asr #4
   1a134:	andeq	sl, r1, ip, asr r2
   1a138:	andeq	sl, r1, r4, asr #4
   1a13c:	andeq	sl, r1, ip, ror r2
   1a140:	andeq	sl, r1, r4, asr #4
   1a144:	andeq	sl, r1, r4, asr #4
   1a148:	andeq	sl, r1, r0, ror #9
   1a14c:	andeq	sl, r1, r4, asr #4
   1a150:	andeq	sl, r1, r4, asr #4
   1a154:	andeq	sl, r1, r4, asr #4
   1a158:			; <UNDEFINED> instruction: 0x0001a2bc
   1a15c:	andeq	sl, r1, r4, asr #4
   1a160:	andeq	sl, r1, r4, asr #4
   1a164:	andeq	sl, r1, r4, asr #4
   1a168:	andeq	sl, r1, r4, asr #4
   1a16c:	andeq	sl, r1, ip, ror r5
   1a170:	andeq	sl, r1, r4, lsr r3
   1a174:	andeq	sl, r1, r4, asr #4
   1a178:	andeq	sl, r1, r4, asr #4
   1a17c:	andeq	sl, r1, r4, asr #4
   1a180:	andeq	sl, r1, r4, asr #4
   1a184:	andeq	sl, r1, r4, asr #4
   1a188:	andeq	sl, r1, r4, asr #4
   1a18c:	andeq	sl, r1, r4, asr #4
   1a190:	andeq	sl, r1, r4, ror r6
   1a194:	andeq	sl, r1, ip, lsr #13
   1a198:	andeq	sl, r1, r4, asr #4
   1a19c:	andeq	sl, r1, r4, asr #4
   1a1a0:	andeq	sl, r1, r4, asr #4
   1a1a4:	andeq	sl, r1, r8, ror #3
   1a1a8:	andeq	sl, r1, r4, asr #4
   1a1ac:	andeq	sl, r1, r4, asr #4
   1a1b0:	andeq	sl, r1, r4, asr #4
   1a1b4:	andeq	sl, r1, ip, asr r2
   1a1b8:	andeq	sl, r1, r4, asr #4
   1a1bc:	andeq	sl, r1, ip, ror r2
   1a1c0:	andeq	sl, r1, r4, asr #4
   1a1c4:	andeq	sl, r1, r4, asr #4
   1a1c8:	andeq	sl, r1, r4, asr #4
   1a1cc:	andeq	sl, r1, r4, asr #4
   1a1d0:	andeq	sl, r1, r4, asr #4
   1a1d4:	andeq	sl, r1, r4, asr #4
   1a1d8:			; <UNDEFINED> instruction: 0x0001a2bc
   1a1dc:	andeq	sl, r1, r4, asr #4
   1a1e0:	andeq	sl, r1, r4, asr #4
   1a1e4:	muleq	r1, r8, r6
   1a1e8:	mvn	r0, #0
   1a1ec:	mul	r1, r4, r8
   1a1f0:	mov	r7, #0
   1a1f4:	udiv	r0, r0, r8
   1a1f8:	cmp	r0, r4
   1a1fc:	mvncc	r1, #0
   1a200:	cmp	r0, r1
   1a204:	mul	r2, r1, r8
   1a208:	mvncc	r2, #0
   1a20c:	cmp	r0, r2
   1a210:	mul	r3, r2, r8
   1a214:	mov	r2, #0
   1a218:	mvncc	r3, #0
   1a21c:	movwcc	r7, #1
   1a220:	cmp	r0, r1
   1a224:	mov	r1, #0
   1a228:	movwcc	r1, #1
   1a22c:	cmp	r0, r4
   1a230:	mov	r4, r3
   1a234:	movwcc	r2, #1
   1a238:	orr	r0, r2, r1
   1a23c:	orr	r0, r0, r7
   1a240:	b	1a6ac <__assert_fail@plt+0x918c>
   1a244:	ldr	r0, [sp, #12]
   1a248:	orr	sl, sl, #2
   1a24c:	str	r4, [r0]
   1a250:	mov	r0, sl
   1a254:	sub	sp, fp, #28
   1a258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a25c:	mvn	r0, #0
   1a260:	mul	r1, r4, r8
   1a264:	udiv	r0, r0, r8
   1a268:	cmp	r0, r4
   1a26c:	mov	r0, #0
   1a270:	mvncc	r1, #0
   1a274:	movwcc	r0, #1
   1a278:	b	1a6a8 <__assert_fail@plt+0x9188>
   1a27c:	mvn	r0, #0
   1a280:	mul	r1, r4, r8
   1a284:	mov	r3, #0
   1a288:	udiv	r0, r0, r8
   1a28c:	cmp	r0, r4
   1a290:	mvncc	r1, #0
   1a294:	cmp	r0, r1
   1a298:	mul	r2, r1, r8
   1a29c:	mov	r1, #0
   1a2a0:	mvncc	r2, #0
   1a2a4:	movwcc	r3, #1
   1a2a8:	cmp	r0, r4
   1a2ac:	movwcc	r1, #1
   1a2b0:	mov	r4, r2
   1a2b4:	orr	r0, r1, r3
   1a2b8:	b	1a6ac <__assert_fail@plt+0x918c>
   1a2bc:	mvn	r0, #0
   1a2c0:	mul	r1, r4, r8
   1a2c4:	mov	r7, #0
   1a2c8:	udiv	r0, r0, r8
   1a2cc:	cmp	r0, r4
   1a2d0:	mvncc	r1, #0
   1a2d4:	cmp	r0, r1
   1a2d8:	mul	r2, r1, r8
   1a2dc:	mvncc	r2, #0
   1a2e0:	cmp	r0, r2
   1a2e4:	mul	r3, r2, r8
   1a2e8:	mvncc	r3, #0
   1a2ec:	cmp	r0, r3
   1a2f0:	mul	ip, r3, r8
   1a2f4:	mov	r3, #0
   1a2f8:	mvncc	ip, #0
   1a2fc:	movwcc	r7, #1
   1a300:	cmp	r0, r2
   1a304:	mov	r2, #0
   1a308:	movwcc	r2, #1
   1a30c:	cmp	r0, r1
   1a310:	mov	r1, #0
   1a314:	movwcc	r1, #1
   1a318:	cmp	r0, r4
   1a31c:	mov	r4, ip
   1a320:	movwcc	r3, #1
   1a324:	orr	r0, r3, r1
   1a328:	orr	r0, r0, r2
   1a32c:	orr	r0, r0, r7
   1a330:	b	1a6ac <__assert_fail@plt+0x918c>
   1a334:	mvn	r0, #0
   1a338:	str	lr, [sp, #8]
   1a33c:	mul	lr, r4, r8
   1a340:	udiv	r0, r0, r8
   1a344:	cmp	r0, r4
   1a348:	mvncc	lr, #0
   1a34c:	cmp	r0, lr
   1a350:	mul	r9, lr, r8
   1a354:	mvncc	r9, #0
   1a358:	cmp	r0, r9
   1a35c:	mul	r7, r9, r8
   1a360:	mvncc	r7, #0
   1a364:	cmp	r0, r7
   1a368:	mul	r3, r7, r8
   1a36c:	mvncc	r3, #0
   1a370:	cmp	r0, r3
   1a374:	mul	r1, r3, r8
   1a378:	mvncc	r1, #0
   1a37c:	cmp	r0, r1
   1a380:	mul	r2, r1, r8
   1a384:	mvncc	r2, #0
   1a388:	cmp	r0, r2
   1a38c:	mul	ip, r2, r8
   1a390:	mov	r8, #0
   1a394:	mov	r2, #0
   1a398:	mvncc	ip, #0
   1a39c:	movwcc	r8, #1
   1a3a0:	cmp	r0, r1
   1a3a4:	mov	r1, #0
   1a3a8:	movwcc	r1, #1
   1a3ac:	cmp	r0, r3
   1a3b0:	mov	r3, #0
   1a3b4:	movwcc	r3, #1
   1a3b8:	cmp	r0, r7
   1a3bc:	mov	r7, #0
   1a3c0:	movwcc	r7, #1
   1a3c4:	cmp	r0, r9
   1a3c8:	mov	r9, #0
   1a3cc:	movwcc	r9, #1
   1a3d0:	cmp	r0, lr
   1a3d4:	mov	lr, #0
   1a3d8:	movwcc	lr, #1
   1a3dc:	cmp	r0, r4
   1a3e0:	mov	r4, ip
   1a3e4:	movwcc	r2, #1
   1a3e8:	orr	r0, r2, lr
   1a3ec:	ldr	lr, [sp, #8]
   1a3f0:	orr	r0, r0, r9
   1a3f4:	orr	r0, r0, r7
   1a3f8:	orr	r0, r0, r3
   1a3fc:	orr	r0, r0, r1
   1a400:	orr	r0, r0, r8
   1a404:	and	r0, r0, #1
   1a408:	b	1a6ac <__assert_fail@plt+0x918c>
   1a40c:	mov	r1, #0
   1a410:	lsr	r0, r4, #22
   1a414:	cmp	r1, r4, lsr #22
   1a418:	lsl	r4, r4, #10
   1a41c:	movwne	r0, #1
   1a420:	mvnne	r4, #0
   1a424:	b	1a6ac <__assert_fail@plt+0x918c>
   1a428:	mvn	r0, #0
   1a42c:	mul	ip, r4, r8
   1a430:	str	lr, [sp, #8]
   1a434:	mov	r9, #0
   1a438:	udiv	r0, r0, r8
   1a43c:	cmp	r0, r4
   1a440:	mvncc	ip, #0
   1a444:	cmp	r0, ip
   1a448:	mul	r2, ip, r8
   1a44c:	mvncc	r2, #0
   1a450:	cmp	r0, r2
   1a454:	mul	r3, r2, r8
   1a458:	mvncc	r3, #0
   1a45c:	cmp	r0, r3
   1a460:	mul	r7, r3, r8
   1a464:	mvncc	r7, #0
   1a468:	cmp	r0, r7
   1a46c:	mul	r1, r7, r8
   1a470:	mvncc	r1, #0
   1a474:	cmp	r0, r1
   1a478:	mul	lr, r1, r8
   1a47c:	mov	r8, #0
   1a480:	mov	r1, #0
   1a484:	mvncc	lr, #0
   1a488:	movwcc	r8, #1
   1a48c:	cmp	r0, r7
   1a490:	mov	r7, #0
   1a494:	movwcc	r7, #1
   1a498:	cmp	r0, r3
   1a49c:	mov	r3, #0
   1a4a0:	movwcc	r3, #1
   1a4a4:	cmp	r0, r2
   1a4a8:	mov	r2, #0
   1a4ac:	movwcc	r2, #1
   1a4b0:	cmp	r0, ip
   1a4b4:	movwcc	r1, #1
   1a4b8:	cmp	r0, r4
   1a4bc:	mov	r4, lr
   1a4c0:	ldr	lr, [sp, #8]
   1a4c4:	movwcc	r9, #1
   1a4c8:	orr	r0, r9, r1
   1a4cc:	orr	r0, r0, r2
   1a4d0:	orr	r0, r0, r3
   1a4d4:	orr	r0, r0, r7
   1a4d8:	orr	r0, r0, r8
   1a4dc:	b	1a6ac <__assert_fail@plt+0x918c>
   1a4e0:	mvn	r0, #0
   1a4e4:	mul	r1, r4, r8
   1a4e8:	udiv	r0, r0, r8
   1a4ec:	cmp	r0, r4
   1a4f0:	mvncc	r1, #0
   1a4f4:	cmp	r0, r1
   1a4f8:	mul	r2, r1, r8
   1a4fc:	mvncc	r2, #0
   1a500:	cmp	r0, r2
   1a504:	mul	r3, r2, r8
   1a508:	mvncc	r3, #0
   1a50c:	cmp	r0, r3
   1a510:	mul	r7, r3, r8
   1a514:	mvncc	r7, #0
   1a518:	cmp	r0, r7
   1a51c:	mul	ip, r7, r8
   1a520:	mov	r8, lr
   1a524:	mov	lr, #0
   1a528:	mov	r7, #0
   1a52c:	mvncc	ip, #0
   1a530:	movwcc	lr, #1
   1a534:	cmp	r0, r3
   1a538:	mov	r3, #0
   1a53c:	movwcc	r3, #1
   1a540:	cmp	r0, r2
   1a544:	mov	r2, #0
   1a548:	movwcc	r2, #1
   1a54c:	cmp	r0, r1
   1a550:	mov	r1, #0
   1a554:	movwcc	r1, #1
   1a558:	cmp	r0, r4
   1a55c:	mov	r4, ip
   1a560:	movwcc	r7, #1
   1a564:	orr	r0, r7, r1
   1a568:	orr	r0, r0, r2
   1a56c:	orr	r0, r0, r3
   1a570:	orr	r0, r0, lr
   1a574:	mov	lr, r8
   1a578:	b	1a6ac <__assert_fail@plt+0x918c>
   1a57c:	mvn	r0, #0
   1a580:	str	lr, [sp, #8]
   1a584:	mul	lr, r4, r8
   1a588:	udiv	r0, r0, r8
   1a58c:	cmp	r0, r4
   1a590:	mvncc	lr, #0
   1a594:	cmp	r0, lr
   1a598:	mul	r9, lr, r8
   1a59c:	mvncc	r9, #0
   1a5a0:	cmp	r0, r9
   1a5a4:	mul	r7, r9, r8
   1a5a8:	mvncc	r7, #0
   1a5ac:	cmp	r0, r7
   1a5b0:	mul	r3, r7, r8
   1a5b4:	mvncc	r3, #0
   1a5b8:	cmp	r0, r3
   1a5bc:	mul	r1, r3, r8
   1a5c0:	mvncc	r1, #0
   1a5c4:	cmp	r0, r1
   1a5c8:	mul	r2, r1, r8
   1a5cc:	mvncc	r2, #0
   1a5d0:	cmp	r0, r2
   1a5d4:	mul	ip, r2, r8
   1a5d8:	mvncc	ip, #0
   1a5dc:	cmp	r0, ip
   1a5e0:	mul	r8, ip, r8
   1a5e4:	mov	ip, #0
   1a5e8:	mvncc	r8, #0
   1a5ec:	str	r8, [sp, #4]
   1a5f0:	mov	r8, #0
   1a5f4:	movwcc	r8, #1
   1a5f8:	cmp	r0, r2
   1a5fc:	mov	r2, #0
   1a600:	movwcc	r2, #1
   1a604:	cmp	r0, r1
   1a608:	mov	r1, #0
   1a60c:	movwcc	r1, #1
   1a610:	cmp	r0, r3
   1a614:	mov	r3, #0
   1a618:	movwcc	r3, #1
   1a61c:	cmp	r0, r7
   1a620:	mov	r7, #0
   1a624:	movwcc	r7, #1
   1a628:	cmp	r0, r9
   1a62c:	mov	r9, #0
   1a630:	movwcc	r9, #1
   1a634:	cmp	r0, lr
   1a638:	mov	lr, #0
   1a63c:	movwcc	lr, #1
   1a640:	cmp	r0, r4
   1a644:	ldr	r4, [sp, #4]
   1a648:	movwcc	ip, #1
   1a64c:	orr	r0, ip, lr
   1a650:	ldr	lr, [sp, #8]
   1a654:	orr	r0, r0, r9
   1a658:	orr	r0, r0, r7
   1a65c:	orr	r0, r0, r3
   1a660:	orr	r0, r0, r1
   1a664:	orr	r0, r0, r2
   1a668:	orr	r0, r0, r8
   1a66c:	and	r0, r0, #1
   1a670:	b	1a6ac <__assert_fail@plt+0x918c>
   1a674:	movw	r0, #65535	; 0xffff
   1a678:	movt	r0, #63	; 0x3f
   1a67c:	orr	r1, r0, #4194304	; 0x400000
   1a680:	mov	r0, #0
   1a684:	cmp	r4, r1
   1a688:	lsl	r4, r4, #9
   1a68c:	movwhi	r0, #1
   1a690:	mvnhi	r4, #0
   1a694:	b	1a6ac <__assert_fail@plt+0x918c>
   1a698:	cmp	r4, #0
   1a69c:	lsl	r1, r4, #1
   1a6a0:	lsr	r0, r4, #31
   1a6a4:	mvnmi	r1, #0
   1a6a8:	mov	r4, r1
   1a6ac:	add	r1, r5, lr
   1a6b0:	orr	sl, r0, sl
   1a6b4:	str	r1, [r6]
   1a6b8:	ldrb	r1, [r5, lr]
   1a6bc:	cmp	r1, #0
   1a6c0:	orrne	sl, sl, #2
   1a6c4:	ldr	r0, [sp, #12]
   1a6c8:	str	r4, [r0]
   1a6cc:	mov	r0, sl
   1a6d0:	sub	sp, fp, #28
   1a6d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6d8:	movw	r0, #50962	; 0xc712
   1a6dc:	movw	r1, #51000	; 0xc738
   1a6e0:	movw	r3, #51016	; 0xc748
   1a6e4:	mov	r2, #85	; 0x55
   1a6e8:	movt	r0, #1
   1a6ec:	movt	r1, #1
   1a6f0:	movt	r3, #1
   1a6f4:	bl	11520 <__assert_fail@plt>
   1a6f8:	clz	r2, r1
   1a6fc:	clz	r3, r0
   1a700:	lsr	r2, r2, #5
   1a704:	lsr	r3, r3, #5
   1a708:	orrs	r2, r3, r2
   1a70c:	movwne	r1, #1
   1a710:	movwne	r0, #1
   1a714:	cmp	r1, #0
   1a718:	beq	1a748 <__assert_fail@plt+0x9228>
   1a71c:	mvn	r2, #-2147483648	; 0x80000000
   1a720:	udiv	r2, r2, r1
   1a724:	cmp	r2, r0
   1a728:	bcs	1a748 <__assert_fail@plt+0x9228>
   1a72c:	push	{fp, lr}
   1a730:	mov	fp, sp
   1a734:	bl	113d0 <__errno_location@plt>
   1a738:	mov	r1, #12
   1a73c:	str	r1, [r0]
   1a740:	mov	r0, #0
   1a744:	pop	{fp, pc}
   1a748:	b	111f0 <calloc@plt>
   1a74c:	cmp	r0, #0
   1a750:	movweq	r0, #1
   1a754:	cmn	r0, #1
   1a758:	ble	1a760 <__assert_fail@plt+0x9240>
   1a75c:	b	11334 <malloc@plt>
   1a760:	push	{fp, lr}
   1a764:	mov	fp, sp
   1a768:	bl	113d0 <__errno_location@plt>
   1a76c:	mov	r1, #12
   1a770:	str	r1, [r0]
   1a774:	mov	r0, #0
   1a778:	pop	{fp, pc}
   1a77c:	push	{fp, lr}
   1a780:	mov	fp, sp
   1a784:	cmp	r0, #0
   1a788:	beq	1a7a4 <__assert_fail@plt+0x9284>
   1a78c:	cmp	r1, #0
   1a790:	beq	1a7b0 <__assert_fail@plt+0x9290>
   1a794:	cmn	r1, #1
   1a798:	ble	1a7bc <__assert_fail@plt+0x929c>
   1a79c:	pop	{fp, lr}
   1a7a0:	b	112a4 <realloc@plt>
   1a7a4:	mov	r0, r1
   1a7a8:	pop	{fp, lr}
   1a7ac:	b	1a74c <__assert_fail@plt+0x922c>
   1a7b0:	bl	12f00 <__assert_fail@plt+0x19e0>
   1a7b4:	mov	r0, #0
   1a7b8:	pop	{fp, pc}
   1a7bc:	bl	113d0 <__errno_location@plt>
   1a7c0:	mov	r1, #12
   1a7c4:	str	r1, [r0]
   1a7c8:	mov	r0, #0
   1a7cc:	pop	{fp, pc}
   1a7d0:	push	{r4, r5, r6, sl, fp, lr}
   1a7d4:	add	fp, sp, #16
   1a7d8:	mov	r4, r0
   1a7dc:	bl	11304 <__fpending@plt>
   1a7e0:	ldr	r6, [r4]
   1a7e4:	mov	r5, r0
   1a7e8:	mov	r0, r4
   1a7ec:	bl	1a944 <__assert_fail@plt+0x9424>
   1a7f0:	tst	r6, #32
   1a7f4:	bne	1a82c <__assert_fail@plt+0x930c>
   1a7f8:	cmp	r0, #0
   1a7fc:	mov	r4, r0
   1a800:	mvnne	r4, #0
   1a804:	cmp	r5, #0
   1a808:	bne	1a838 <__assert_fail@plt+0x9318>
   1a80c:	cmp	r0, #0
   1a810:	beq	1a838 <__assert_fail@plt+0x9318>
   1a814:	bl	113d0 <__errno_location@plt>
   1a818:	ldr	r0, [r0]
   1a81c:	subs	r4, r0, #9
   1a820:	mvnne	r4, #0
   1a824:	mov	r0, r4
   1a828:	pop	{r4, r5, r6, sl, fp, pc}
   1a82c:	mvn	r4, #0
   1a830:	cmp	r0, #0
   1a834:	beq	1a840 <__assert_fail@plt+0x9320>
   1a838:	mov	r0, r4
   1a83c:	pop	{r4, r5, r6, sl, fp, pc}
   1a840:	bl	113d0 <__errno_location@plt>
   1a844:	mov	r1, #0
   1a848:	str	r1, [r0]
   1a84c:	mov	r0, r4
   1a850:	pop	{r4, r5, r6, sl, fp, pc}
   1a854:	movw	r2, #62998	; 0xf616
   1a858:	mov	r1, #0
   1a85c:	movt	r2, #149	; 0x95
   1a860:	str	r1, [r0, #16]
   1a864:	str	r1, [r0, #20]
   1a868:	str	r2, [r0, #24]
   1a86c:	bx	lr
   1a870:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   1a874:	add	fp, sp, #24
   1a878:	ldr	r2, [r0, #24]
   1a87c:	movw	r3, #62998	; 0xf616
   1a880:	movt	r3, #149	; 0x95
   1a884:	cmp	r2, r3
   1a888:	bne	1a924 <__assert_fail@plt+0x9404>
   1a88c:	add	r3, r0, #16
   1a890:	add	ip, r0, #8
   1a894:	ldrd	r4, [r3]
   1a898:	orrs	r2, r4, r5
   1a89c:	beq	1a8d8 <__assert_fail@plt+0x93b8>
   1a8a0:	ldr	r6, [r1, #96]	; 0x60
   1a8a4:	ldr	r9, [r1, #100]	; 0x64
   1a8a8:	ldm	r0, {r2, r7}
   1a8ac:	eor	r7, r9, r7
   1a8b0:	eor	r2, r6, r2
   1a8b4:	orrs	r2, r2, r7
   1a8b8:	bne	1a8d8 <__assert_fail@plt+0x93b8>
   1a8bc:	ldm	ip, {r2, r7}
   1a8c0:	ldm	r1, {r6, r9}
   1a8c4:	eor	r7, r9, r7
   1a8c8:	eor	r2, r6, r2
   1a8cc:	orrs	r2, r2, r7
   1a8d0:	mov	r2, #1
   1a8d4:	beq	1a910 <__assert_fail@plt+0x93f0>
   1a8d8:	adds	r6, r4, #1
   1a8dc:	adc	r7, r5, #0
   1a8e0:	and	r2, r6, r4
   1a8e4:	strd	r6, [r3]
   1a8e8:	and	r3, r7, r5
   1a8ec:	orrs	r2, r2, r3
   1a8f0:	mov	r2, #0
   1a8f4:	bne	1a910 <__assert_fail@plt+0x93f0>
   1a8f8:	orrs	r3, r6, r7
   1a8fc:	beq	1a918 <__assert_fail@plt+0x93f8>
   1a900:	ldrd	r4, [r1]
   1a904:	strd	r4, [ip]
   1a908:	ldrd	r4, [r1, #96]	; 0x60
   1a90c:	strd	r4, [r0]
   1a910:	mov	r0, r2
   1a914:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   1a918:	mov	r2, #1
   1a91c:	mov	r0, r2
   1a920:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   1a924:	movw	r0, #51097	; 0xc799
   1a928:	movw	r1, #51121	; 0xc7b1
   1a92c:	movw	r3, #51139	; 0xc7c3
   1a930:	mov	r2, #60	; 0x3c
   1a934:	movt	r0, #1
   1a938:	movt	r1, #1
   1a93c:	movt	r3, #1
   1a940:	bl	11520 <__assert_fail@plt>
   1a944:	push	{r4, r5, r6, sl, fp, lr}
   1a948:	add	fp, sp, #16
   1a94c:	sub	sp, sp, #8
   1a950:	mov	r4, r0
   1a954:	bl	11400 <fileno@plt>
   1a958:	cmn	r0, #1
   1a95c:	ble	1a9d0 <__assert_fail@plt+0x94b0>
   1a960:	mov	r0, r4
   1a964:	bl	1134c <__freading@plt>
   1a968:	cmp	r0, #0
   1a96c:	beq	1a998 <__assert_fail@plt+0x9478>
   1a970:	mov	r0, r4
   1a974:	bl	11400 <fileno@plt>
   1a978:	mov	r1, #1
   1a97c:	mov	r2, #0
   1a980:	mov	r3, #0
   1a984:	str	r1, [sp]
   1a988:	bl	112ec <lseek64@plt>
   1a98c:	and	r0, r0, r1
   1a990:	cmn	r0, #1
   1a994:	beq	1a9d0 <__assert_fail@plt+0x94b0>
   1a998:	mov	r0, r4
   1a99c:	bl	1abfc <__assert_fail@plt+0x96dc>
   1a9a0:	cmp	r0, #0
   1a9a4:	beq	1a9d0 <__assert_fail@plt+0x94b0>
   1a9a8:	bl	113d0 <__errno_location@plt>
   1a9ac:	ldr	r6, [r0]
   1a9b0:	mov	r5, r0
   1a9b4:	mov	r0, r4
   1a9b8:	bl	11418 <fclose@plt>
   1a9bc:	cmp	r6, #0
   1a9c0:	strne	r6, [r5]
   1a9c4:	mvnne	r0, #0
   1a9c8:	sub	sp, fp, #16
   1a9cc:	pop	{r4, r5, r6, sl, fp, pc}
   1a9d0:	mov	r0, r4
   1a9d4:	sub	sp, fp, #16
   1a9d8:	pop	{r4, r5, r6, sl, fp, lr}
   1a9dc:	b	11418 <fclose@plt>
   1a9e0:	sub	sp, sp, #8
   1a9e4:	push	{r4, r5, r6, r7, fp, lr}
   1a9e8:	add	fp, sp, #16
   1a9ec:	sub	sp, sp, #8
   1a9f0:	mov	r5, r0
   1a9f4:	add	r0, fp, #8
   1a9f8:	cmp	r1, #11
   1a9fc:	str	r2, [fp, #8]
   1aa00:	str	r3, [fp, #12]
   1aa04:	str	r0, [sp, #4]
   1aa08:	bhi	1aa44 <__assert_fail@plt+0x9524>
   1aa0c:	mov	r0, #1
   1aa10:	movw	r2, #1300	; 0x514
   1aa14:	tst	r2, r0, lsl r1
   1aa18:	bne	1ab04 <__assert_fail@plt+0x95e4>
   1aa1c:	movw	r2, #2570	; 0xa0a
   1aa20:	tst	r2, r0, lsl r1
   1aa24:	bne	1aa6c <__assert_fail@plt+0x954c>
   1aa28:	cmp	r1, #0
   1aa2c:	bne	1aa44 <__assert_fail@plt+0x9524>
   1aa30:	ldr	r0, [sp, #4]
   1aa34:	add	r1, r0, #4
   1aa38:	str	r1, [sp, #4]
   1aa3c:	mov	r1, #0
   1aa40:	b	1ab10 <__assert_fail@plt+0x95f0>
   1aa44:	sub	r0, r1, #1024	; 0x400
   1aa48:	cmp	r0, #10
   1aa4c:	bhi	1ab04 <__assert_fail@plt+0x95e4>
   1aa50:	mov	r2, #1
   1aa54:	movw	r3, #645	; 0x285
   1aa58:	tst	r3, r2, lsl r0
   1aa5c:	bne	1ab04 <__assert_fail@plt+0x95e4>
   1aa60:	movw	r3, #1282	; 0x502
   1aa64:	tst	r3, r2, lsl r0
   1aa68:	beq	1aa78 <__assert_fail@plt+0x9558>
   1aa6c:	mov	r0, r5
   1aa70:	bl	11430 <fcntl64@plt>
   1aa74:	b	1ab1c <__assert_fail@plt+0x95fc>
   1aa78:	cmp	r0, #6
   1aa7c:	bne	1ab04 <__assert_fail@plt+0x95e4>
   1aa80:	ldr	r0, [sp, #4]
   1aa84:	movw	r7, #54000	; 0xd2f0
   1aa88:	movt	r7, #2
   1aa8c:	add	r1, r0, #4
   1aa90:	str	r1, [sp, #4]
   1aa94:	ldr	r6, [r0]
   1aa98:	ldr	r0, [r7]
   1aa9c:	cmp	r0, #0
   1aaa0:	bmi	1ab40 <__assert_fail@plt+0x9620>
   1aaa4:	mov	r0, r5
   1aaa8:	movw	r1, #1030	; 0x406
   1aaac:	mov	r2, r6
   1aab0:	bl	11430 <fcntl64@plt>
   1aab4:	mov	r4, r0
   1aab8:	cmn	r0, #1
   1aabc:	bgt	1ab34 <__assert_fail@plt+0x9614>
   1aac0:	bl	113d0 <__errno_location@plt>
   1aac4:	ldr	r0, [r0]
   1aac8:	cmp	r0, #22
   1aacc:	bne	1ab34 <__assert_fail@plt+0x9614>
   1aad0:	mov	r0, r5
   1aad4:	mov	r1, #0
   1aad8:	mov	r2, r6
   1aadc:	bl	11430 <fcntl64@plt>
   1aae0:	mov	r4, r0
   1aae4:	cmp	r0, #0
   1aae8:	bmi	1ab20 <__assert_fail@plt+0x9600>
   1aaec:	mvn	r0, #0
   1aaf0:	str	r0, [r7]
   1aaf4:	mov	r0, #1
   1aaf8:	cmp	r0, #0
   1aafc:	bne	1ab6c <__assert_fail@plt+0x964c>
   1ab00:	b	1ab20 <__assert_fail@plt+0x9600>
   1ab04:	ldr	r0, [sp, #4]
   1ab08:	add	r2, r0, #4
   1ab0c:	str	r2, [sp, #4]
   1ab10:	ldr	r2, [r0]
   1ab14:	mov	r0, r5
   1ab18:	bl	11430 <fcntl64@plt>
   1ab1c:	mov	r4, r0
   1ab20:	mov	r0, r4
   1ab24:	sub	sp, fp, #16
   1ab28:	pop	{r4, r5, r6, r7, fp, lr}
   1ab2c:	add	sp, sp, #8
   1ab30:	bx	lr
   1ab34:	mov	r0, #1
   1ab38:	str	r0, [r7]
   1ab3c:	b	1ab20 <__assert_fail@plt+0x9600>
   1ab40:	mov	r0, r5
   1ab44:	mov	r1, #0
   1ab48:	mov	r2, r6
   1ab4c:	bl	11430 <fcntl64@plt>
   1ab50:	mov	r4, r0
   1ab54:	ldr	r0, [r7]
   1ab58:	add	r0, r0, #1
   1ab5c:	clz	r0, r0
   1ab60:	lsr	r0, r0, #5
   1ab64:	cmp	r0, #0
   1ab68:	beq	1ab20 <__assert_fail@plt+0x9600>
   1ab6c:	cmp	r4, #0
   1ab70:	bmi	1ab20 <__assert_fail@plt+0x9600>
   1ab74:	mov	r0, r4
   1ab78:	mov	r1, #1
   1ab7c:	bl	11430 <fcntl64@plt>
   1ab80:	cmp	r0, #0
   1ab84:	bmi	1aba0 <__assert_fail@plt+0x9680>
   1ab88:	orr	r2, r0, #1
   1ab8c:	mov	r0, r4
   1ab90:	mov	r1, #2
   1ab94:	bl	11430 <fcntl64@plt>
   1ab98:	cmn	r0, #1
   1ab9c:	bne	1ab20 <__assert_fail@plt+0x9600>
   1aba0:	bl	113d0 <__errno_location@plt>
   1aba4:	ldr	r6, [r0]
   1aba8:	mov	r5, r0
   1abac:	mov	r0, r4
   1abb0:	bl	114e4 <close@plt>
   1abb4:	str	r6, [r5]
   1abb8:	mvn	r4, #0
   1abbc:	b	1ab20 <__assert_fail@plt+0x9600>
   1abc0:	sub	sp, sp, #8
   1abc4:	push	{fp, lr}
   1abc8:	mov	fp, sp
   1abcc:	sub	sp, sp, #8
   1abd0:	str	r2, [fp, #8]
   1abd4:	str	r3, [fp, #12]
   1abd8:	tst	r1, #64	; 0x40
   1abdc:	mov	r2, #0
   1abe0:	ldrne	r2, [fp, #8]
   1abe4:	bl	11328 <open64@plt>
   1abe8:	bl	18d80 <__assert_fail@plt+0x7860>
   1abec:	mov	sp, fp
   1abf0:	pop	{fp, lr}
   1abf4:	add	sp, sp, #8
   1abf8:	bx	lr
   1abfc:	push	{r4, sl, fp, lr}
   1ac00:	add	fp, sp, #8
   1ac04:	sub	sp, sp, #8
   1ac08:	mov	r4, r0
   1ac0c:	cmp	r0, #0
   1ac10:	beq	1ac48 <__assert_fail@plt+0x9728>
   1ac14:	mov	r0, r4
   1ac18:	bl	1134c <__freading@plt>
   1ac1c:	cmp	r0, #0
   1ac20:	beq	1ac48 <__assert_fail@plt+0x9728>
   1ac24:	ldrb	r0, [r4, #1]
   1ac28:	tst	r0, #1
   1ac2c:	beq	1ac48 <__assert_fail@plt+0x9728>
   1ac30:	mov	r0, #1
   1ac34:	mov	r2, #0
   1ac38:	mov	r3, #0
   1ac3c:	str	r0, [sp]
   1ac40:	mov	r0, r4
   1ac44:	bl	1ac58 <__assert_fail@plt+0x9738>
   1ac48:	mov	r0, r4
   1ac4c:	sub	sp, fp, #8
   1ac50:	pop	{r4, sl, fp, lr}
   1ac54:	b	11244 <fflush@plt>
   1ac58:	push	{r4, r5, r6, r7, fp, lr}
   1ac5c:	add	fp, sp, #16
   1ac60:	sub	sp, sp, #8
   1ac64:	mov	r4, r0
   1ac68:	ldr	r0, [r0, #4]
   1ac6c:	mov	r5, r3
   1ac70:	mov	r6, r2
   1ac74:	ldr	r1, [r4, #8]
   1ac78:	cmp	r1, r0
   1ac7c:	bne	1ac98 <__assert_fail@plt+0x9778>
   1ac80:	ldrd	r0, [r4, #16]
   1ac84:	cmp	r1, r0
   1ac88:	bne	1ac98 <__assert_fail@plt+0x9778>
   1ac8c:	ldr	r0, [r4, #36]	; 0x24
   1ac90:	cmp	r0, #0
   1ac94:	beq	1acb0 <__assert_fail@plt+0x9790>
   1ac98:	mov	r0, r4
   1ac9c:	mov	r2, r6
   1aca0:	mov	r3, r5
   1aca4:	sub	sp, fp, #16
   1aca8:	pop	{r4, r5, r6, r7, fp, lr}
   1acac:	b	11424 <fseeko64@plt>
   1acb0:	ldr	r7, [fp, #8]
   1acb4:	mov	r0, r4
   1acb8:	bl	11400 <fileno@plt>
   1acbc:	mov	r2, r6
   1acc0:	mov	r3, r5
   1acc4:	str	r7, [sp]
   1acc8:	bl	112ec <lseek64@plt>
   1accc:	and	r2, r0, r1
   1acd0:	cmn	r2, #1
   1acd4:	beq	1acf4 <__assert_fail@plt+0x97d4>
   1acd8:	strd	r0, [r4, #80]	; 0x50
   1acdc:	ldr	r0, [r4]
   1ace0:	bic	r0, r0, #16
   1ace4:	str	r0, [r4]
   1ace8:	mov	r0, #0
   1acec:	sub	sp, fp, #16
   1acf0:	pop	{r4, r5, r6, r7, fp, pc}
   1acf4:	mvn	r0, #0
   1acf8:	sub	sp, fp, #16
   1acfc:	pop	{r4, r5, r6, r7, fp, pc}
   1ad00:	push	{fp, lr}
   1ad04:	mov	fp, sp
   1ad08:	mov	r0, #14
   1ad0c:	bl	11460 <nl_langinfo@plt>
   1ad10:	movw	r1, #47248	; 0xb890
   1ad14:	cmp	r0, #0
   1ad18:	movt	r1, #1
   1ad1c:	movne	r1, r0
   1ad20:	movw	r0, #51206	; 0xc806
   1ad24:	ldrb	r2, [r1]
   1ad28:	movt	r0, #1
   1ad2c:	cmp	r2, #0
   1ad30:	movne	r0, r1
   1ad34:	pop	{fp, pc}
   1ad38:	push	{r4, r5, r6, r7, fp, lr}
   1ad3c:	add	fp, sp, #16
   1ad40:	sub	sp, sp, #8
   1ad44:	cmp	r0, #0
   1ad48:	add	r5, sp, #4
   1ad4c:	mov	r7, r2
   1ad50:	mov	r4, r1
   1ad54:	movne	r5, r0
   1ad58:	mov	r0, r5
   1ad5c:	bl	11310 <mbrtowc@plt>
   1ad60:	mov	r6, r0
   1ad64:	cmp	r7, #0
   1ad68:	beq	1ad90 <__assert_fail@plt+0x9870>
   1ad6c:	cmn	r6, #2
   1ad70:	bcc	1ad90 <__assert_fail@plt+0x9870>
   1ad74:	mov	r0, #0
   1ad78:	bl	1ade4 <__assert_fail@plt+0x98c4>
   1ad7c:	cmp	r0, #0
   1ad80:	bne	1ad90 <__assert_fail@plt+0x9870>
   1ad84:	ldrb	r0, [r4]
   1ad88:	mov	r6, #1
   1ad8c:	str	r0, [r5]
   1ad90:	mov	r0, r6
   1ad94:	sub	sp, fp, #16
   1ad98:	pop	{r4, r5, r6, r7, fp, pc}
   1ad9c:	cmp	r2, #0
   1ada0:	beq	1add0 <__assert_fail@plt+0x98b0>
   1ada4:	mvn	r3, #0
   1ada8:	udiv	r3, r3, r2
   1adac:	cmp	r3, r1
   1adb0:	bcs	1add0 <__assert_fail@plt+0x98b0>
   1adb4:	push	{fp, lr}
   1adb8:	mov	fp, sp
   1adbc:	bl	113d0 <__errno_location@plt>
   1adc0:	mov	r1, #12
   1adc4:	str	r1, [r0]
   1adc8:	mov	r0, #0
   1adcc:	pop	{fp, pc}
   1add0:	mul	r1, r2, r1
   1add4:	b	1a77c <__assert_fail@plt+0x925c>
   1add8:	mov	r1, #0
   1addc:	mov	r2, #3
   1ade0:	b	1a9e0 <__assert_fail@plt+0x94c0>
   1ade4:	push	{r4, sl, fp, lr}
   1ade8:	add	fp, sp, #8
   1adec:	sub	sp, sp, #264	; 0x108
   1adf0:	add	r1, sp, #7
   1adf4:	movw	r2, #257	; 0x101
   1adf8:	bl	1ae50 <__assert_fail@plt+0x9930>
   1adfc:	mov	r4, #0
   1ae00:	cmp	r0, #0
   1ae04:	bne	1ae44 <__assert_fail@plt+0x9924>
   1ae08:	movw	r1, #51212	; 0xc80c
   1ae0c:	add	r0, sp, #7
   1ae10:	mov	r2, #2
   1ae14:	movt	r1, #1
   1ae18:	bl	11388 <bcmp@plt>
   1ae1c:	cmp	r0, #0
   1ae20:	beq	1ae44 <__assert_fail@plt+0x9924>
   1ae24:	movw	r1, #51214	; 0xc80e
   1ae28:	add	r0, sp, #7
   1ae2c:	mov	r2, #6
   1ae30:	movt	r1, #1
   1ae34:	bl	11388 <bcmp@plt>
   1ae38:	cmp	r0, #0
   1ae3c:	mov	r4, r0
   1ae40:	movwne	r4, #1
   1ae44:	mov	r0, r4
   1ae48:	sub	sp, fp, #8
   1ae4c:	pop	{r4, sl, fp, pc}
   1ae50:	push	{r4, r5, r6, r7, fp, lr}
   1ae54:	add	fp, sp, #16
   1ae58:	mov	r4, r1
   1ae5c:	mov	r1, #0
   1ae60:	mov	r6, r2
   1ae64:	bl	1143c <setlocale@plt>
   1ae68:	cmp	r0, #0
   1ae6c:	beq	1ae9c <__assert_fail@plt+0x997c>
   1ae70:	mov	r7, r0
   1ae74:	bl	113a0 <strlen@plt>
   1ae78:	cmp	r0, r6
   1ae7c:	bcs	1aeb8 <__assert_fail@plt+0x9998>
   1ae80:	add	r2, r0, #1
   1ae84:	mov	r0, r4
   1ae88:	mov	r1, r7
   1ae8c:	bl	11274 <memcpy@plt>
   1ae90:	mov	r5, #0
   1ae94:	mov	r0, r5
   1ae98:	pop	{r4, r5, r6, r7, fp, pc}
   1ae9c:	mov	r5, #22
   1aea0:	cmp	r6, #0
   1aea4:	beq	1aee0 <__assert_fail@plt+0x99c0>
   1aea8:	mov	r0, #0
   1aeac:	strb	r0, [r4]
   1aeb0:	mov	r0, r5
   1aeb4:	pop	{r4, r5, r6, r7, fp, pc}
   1aeb8:	mov	r5, #34	; 0x22
   1aebc:	cmp	r6, #0
   1aec0:	beq	1aee0 <__assert_fail@plt+0x99c0>
   1aec4:	sub	r6, r6, #1
   1aec8:	mov	r0, r4
   1aecc:	mov	r1, r7
   1aed0:	mov	r2, r6
   1aed4:	bl	11274 <memcpy@plt>
   1aed8:	mov	r0, #0
   1aedc:	strb	r0, [r4, r6]
   1aee0:	mov	r0, r5
   1aee4:	pop	{r4, r5, r6, r7, fp, pc}
   1aee8:	mov	r1, #0
   1aeec:	b	1143c <setlocale@plt>
   1aef0:	cmp	r3, #0
   1aef4:	cmpeq	r2, #0
   1aef8:	bne	1af10 <__assert_fail@plt+0x99f0>
   1aefc:	cmp	r1, #0
   1af00:	cmpeq	r0, #0
   1af04:	mvnne	r1, #0
   1af08:	mvnne	r0, #0
   1af0c:	b	1af2c <__assert_fail@plt+0x9a0c>
   1af10:	sub	sp, sp, #8
   1af14:	push	{sp, lr}
   1af18:	bl	1af3c <__assert_fail@plt+0x9a1c>
   1af1c:	ldr	lr, [sp, #4]
   1af20:	add	sp, sp, #8
   1af24:	pop	{r2, r3}
   1af28:	bx	lr
   1af2c:	push	{r1, lr}
   1af30:	mov	r0, #8
   1af34:	bl	11214 <raise@plt>
   1af38:	pop	{r1, pc}
   1af3c:	cmp	r1, r3
   1af40:	cmpeq	r0, r2
   1af44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af48:	mov	r4, r0
   1af4c:	movcc	r0, #0
   1af50:	mov	r5, r1
   1af54:	ldr	lr, [sp, #36]	; 0x24
   1af58:	movcc	r1, r0
   1af5c:	bcc	1b058 <__assert_fail@plt+0x9b38>
   1af60:	cmp	r3, #0
   1af64:	clzeq	ip, r2
   1af68:	clzne	ip, r3
   1af6c:	addeq	ip, ip, #32
   1af70:	cmp	r5, #0
   1af74:	clzeq	r1, r4
   1af78:	addeq	r1, r1, #32
   1af7c:	clzne	r1, r5
   1af80:	sub	ip, ip, r1
   1af84:	sub	sl, ip, #32
   1af88:	lsl	r9, r3, ip
   1af8c:	rsb	fp, ip, #32
   1af90:	orr	r9, r9, r2, lsl sl
   1af94:	orr	r9, r9, r2, lsr fp
   1af98:	lsl	r8, r2, ip
   1af9c:	cmp	r5, r9
   1afa0:	cmpeq	r4, r8
   1afa4:	movcc	r0, #0
   1afa8:	movcc	r1, r0
   1afac:	bcc	1afc8 <__assert_fail@plt+0x9aa8>
   1afb0:	mov	r0, #1
   1afb4:	subs	r4, r4, r8
   1afb8:	lsl	r1, r0, sl
   1afbc:	orr	r1, r1, r0, lsr fp
   1afc0:	lsl	r0, r0, ip
   1afc4:	sbc	r5, r5, r9
   1afc8:	cmp	ip, #0
   1afcc:	beq	1b058 <__assert_fail@plt+0x9b38>
   1afd0:	lsr	r6, r8, #1
   1afd4:	orr	r6, r6, r9, lsl #31
   1afd8:	lsr	r7, r9, #1
   1afdc:	mov	r2, ip
   1afe0:	b	1b004 <__assert_fail@plt+0x9ae4>
   1afe4:	subs	r3, r4, r6
   1afe8:	sbc	r8, r5, r7
   1afec:	adds	r3, r3, r3
   1aff0:	adc	r8, r8, r8
   1aff4:	adds	r4, r3, #1
   1aff8:	adc	r5, r8, #0
   1affc:	subs	r2, r2, #1
   1b000:	beq	1b020 <__assert_fail@plt+0x9b00>
   1b004:	cmp	r5, r7
   1b008:	cmpeq	r4, r6
   1b00c:	bcs	1afe4 <__assert_fail@plt+0x9ac4>
   1b010:	adds	r4, r4, r4
   1b014:	adc	r5, r5, r5
   1b018:	subs	r2, r2, #1
   1b01c:	bne	1b004 <__assert_fail@plt+0x9ae4>
   1b020:	lsr	r3, r4, ip
   1b024:	orr	r3, r3, r5, lsl fp
   1b028:	lsr	r2, r5, ip
   1b02c:	orr	r3, r3, r5, lsr sl
   1b030:	adds	r0, r0, r4
   1b034:	mov	r4, r3
   1b038:	lsl	r3, r2, ip
   1b03c:	orr	r3, r3, r4, lsl sl
   1b040:	lsl	ip, r4, ip
   1b044:	orr	r3, r3, r4, lsr fp
   1b048:	adc	r1, r1, r5
   1b04c:	subs	r0, r0, ip
   1b050:	mov	r5, r2
   1b054:	sbc	r1, r1, r3
   1b058:	cmp	lr, #0
   1b05c:	strdne	r4, [lr]
   1b060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b064:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b068:	mov	r7, r0
   1b06c:	ldr	r6, [pc, #72]	; 1b0bc <__assert_fail@plt+0x9b9c>
   1b070:	ldr	r5, [pc, #72]	; 1b0c0 <__assert_fail@plt+0x9ba0>
   1b074:	add	r6, pc, r6
   1b078:	add	r5, pc, r5
   1b07c:	sub	r6, r6, r5
   1b080:	mov	r8, r1
   1b084:	mov	r9, r2
   1b088:	bl	111c4 <fstatfs64@plt-0x20>
   1b08c:	asrs	r6, r6, #2
   1b090:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b094:	mov	r4, #0
   1b098:	add	r4, r4, #1
   1b09c:	ldr	r3, [r5], #4
   1b0a0:	mov	r2, r9
   1b0a4:	mov	r1, r8
   1b0a8:	mov	r0, r7
   1b0ac:	blx	r3
   1b0b0:	cmp	r6, r4
   1b0b4:	bne	1b098 <__assert_fail@plt+0x9b78>
   1b0b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b0bc:	muleq	r1, r0, lr
   1b0c0:	andeq	r1, r1, r8, lsl #29
   1b0c4:	bx	lr
   1b0c8:	ldr	r3, [pc, #12]	; 1b0dc <__assert_fail@plt+0x9bbc>
   1b0cc:	mov	r1, #0
   1b0d0:	add	r3, pc, r3
   1b0d4:	ldr	r2, [r3]
   1b0d8:	b	113dc <__cxa_atexit@plt>
   1b0dc:	andeq	r2, r1, r4, asr r0

Disassembly of section .fini:

0001b0e0 <.fini>:
   1b0e0:	push	{r3, lr}
   1b0e4:	pop	{r3, pc}
