
../repos/coreutils/src/tr:     file format elf32-littlearm


Disassembly of section .init:

00010e10 <.init>:
   10e10:	push	{r3, lr}
   10e14:	bl	110ec <__assert_fail@plt+0x4c>
   10e18:	pop	{r3, pc}

Disassembly of section .plt:

00010e1c <calloc@plt-0x14>:
   10e1c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e20:	ldr	lr, [pc, #4]	; 10e2c <calloc@plt-0x4>
   10e24:	add	lr, pc, lr
   10e28:	ldr	pc, [lr, #8]!
   10e2c:	ldrdeq	r9, [r1], -r4

00010e30 <calloc@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #102400	; 0x19000
   10e38:	ldr	pc, [ip, #468]!	; 0x1d4

00010e3c <fputs_unlocked@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #102400	; 0x19000
   10e44:	ldr	pc, [ip, #460]!	; 0x1cc

00010e48 <raise@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #102400	; 0x19000
   10e50:	ldr	pc, [ip, #452]!	; 0x1c4

00010e54 <strcmp@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #102400	; 0x19000
   10e5c:	ldr	pc, [ip, #444]!	; 0x1bc

00010e60 <posix_fadvise64@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #102400	; 0x19000
   10e68:	ldr	pc, [ip, #436]!	; 0x1b4

00010e6c <read@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #102400	; 0x19000
   10e74:	ldr	pc, [ip, #428]!	; 0x1ac

00010e78 <fflush@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #102400	; 0x19000
   10e80:	ldr	pc, [ip, #420]!	; 0x1a4

00010e84 <free@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #102400	; 0x19000
   10e8c:	ldr	pc, [ip, #412]!	; 0x19c

00010e90 <_exit@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #102400	; 0x19000
   10e98:	ldr	pc, [ip, #404]!	; 0x194

00010e9c <memcpy@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #102400	; 0x19000
   10ea4:	ldr	pc, [ip, #396]!	; 0x18c

00010ea8 <__strtoull_internal@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #102400	; 0x19000
   10eb0:	ldr	pc, [ip, #388]!	; 0x184

00010eb4 <mbsinit@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #102400	; 0x19000
   10ebc:	ldr	pc, [ip, #380]!	; 0x17c

00010ec0 <fwrite_unlocked@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #102400	; 0x19000
   10ec8:	ldr	pc, [ip, #372]!	; 0x174

00010ecc <stpcpy@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #102400	; 0x19000
   10ed4:	ldr	pc, [ip, #364]!	; 0x16c

00010ed8 <dcgettext@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #102400	; 0x19000
   10ee0:	ldr	pc, [ip, #356]!	; 0x164

00010ee4 <realloc@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #102400	; 0x19000
   10eec:	ldr	pc, [ip, #348]!	; 0x15c

00010ef0 <textdomain@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #102400	; 0x19000
   10ef8:	ldr	pc, [ip, #340]!	; 0x154

00010efc <iswprint@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #102400	; 0x19000
   10f04:	ldr	pc, [ip, #332]!	; 0x14c

00010f08 <fwrite@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #102400	; 0x19000
   10f10:	ldr	pc, [ip, #324]!	; 0x144

00010f14 <lseek64@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #102400	; 0x19000
   10f1c:	ldr	pc, [ip, #316]!	; 0x13c

00010f20 <__ctype_get_mb_cur_max@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #102400	; 0x19000
   10f28:	ldr	pc, [ip, #308]!	; 0x134

00010f2c <__fpending@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #102400	; 0x19000
   10f34:	ldr	pc, [ip, #300]!	; 0x12c

00010f38 <mbrtowc@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #102400	; 0x19000
   10f40:	ldr	pc, [ip, #292]!	; 0x124

00010f44 <error@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #102400	; 0x19000
   10f4c:	ldr	pc, [ip, #284]!	; 0x11c

00010f50 <malloc@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #102400	; 0x19000
   10f58:	ldr	pc, [ip, #276]!	; 0x114

00010f5c <__libc_start_main@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #102400	; 0x19000
   10f64:	ldr	pc, [ip, #268]!	; 0x10c

00010f68 <__freading@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #102400	; 0x19000
   10f70:	ldr	pc, [ip, #260]!	; 0x104

00010f74 <__ctype_tolower_loc@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #102400	; 0x19000
   10f7c:	ldr	pc, [ip, #252]!	; 0xfc

00010f80 <__ctype_toupper_loc@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #102400	; 0x19000
   10f88:	ldr	pc, [ip, #244]!	; 0xf4

00010f8c <__gmon_start__@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #102400	; 0x19000
   10f94:	ldr	pc, [ip, #236]!	; 0xec

00010f98 <getopt_long@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #102400	; 0x19000
   10fa0:	ldr	pc, [ip, #228]!	; 0xe4

00010fa4 <__ctype_b_loc@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #102400	; 0x19000
   10fac:	ldr	pc, [ip, #220]!	; 0xdc

00010fb0 <exit@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #102400	; 0x19000
   10fb8:	ldr	pc, [ip, #212]!	; 0xd4

00010fbc <bcmp@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #102400	; 0x19000
   10fc4:	ldr	pc, [ip, #204]!	; 0xcc

00010fc8 <strlen@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #102400	; 0x19000
   10fd0:	ldr	pc, [ip, #196]!	; 0xc4

00010fd4 <strchr@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #102400	; 0x19000
   10fdc:	ldr	pc, [ip, #188]!	; 0xbc

00010fe0 <__errno_location@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #102400	; 0x19000
   10fe8:	ldr	pc, [ip, #180]!	; 0xb4

00010fec <__sprintf_chk@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #102400	; 0x19000
   10ff4:	ldr	pc, [ip, #172]!	; 0xac

00010ff8 <__cxa_atexit@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #102400	; 0x19000
   11000:	ldr	pc, [ip, #164]!	; 0xa4

00011004 <memset@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #102400	; 0x19000
   1100c:	ldr	pc, [ip, #156]!	; 0x9c

00011010 <__printf_chk@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #102400	; 0x19000
   11018:	ldr	pc, [ip, #148]!	; 0x94

0001101c <fileno@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #102400	; 0x19000
   11024:	ldr	pc, [ip, #140]!	; 0x8c

00011028 <__fprintf_chk@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #102400	; 0x19000
   11030:	ldr	pc, [ip, #132]!	; 0x84

00011034 <fclose@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #102400	; 0x19000
   1103c:	ldr	pc, [ip, #124]!	; 0x7c

00011040 <fseeko64@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #102400	; 0x19000
   11048:	ldr	pc, [ip, #116]!	; 0x74

0001104c <setlocale@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #102400	; 0x19000
   11054:	ldr	pc, [ip, #108]!	; 0x6c

00011058 <strrchr@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #102400	; 0x19000
   11060:	ldr	pc, [ip, #100]!	; 0x64

00011064 <nl_langinfo@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #102400	; 0x19000
   1106c:	ldr	pc, [ip, #92]!	; 0x5c

00011070 <bindtextdomain@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #102400	; 0x19000
   11078:	ldr	pc, [ip, #84]!	; 0x54

0001107c <strncmp@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #102400	; 0x19000
   11084:	ldr	pc, [ip, #76]!	; 0x4c

00011088 <abort@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #102400	; 0x19000
   11090:	ldr	pc, [ip, #68]!	; 0x44

00011094 <close@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #102400	; 0x19000
   1109c:	ldr	pc, [ip, #60]!	; 0x3c

000110a0 <__assert_fail@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #102400	; 0x19000
   110a8:	ldr	pc, [ip, #52]!	; 0x34

Disassembly of section .text:

000110b0 <.text>:
   110b0:	mov	fp, #0
   110b4:	mov	lr, #0
   110b8:	pop	{r1}		; (ldr r1, [sp], #4)
   110bc:	mov	r2, sp
   110c0:	push	{r2}		; (str r2, [sp, #-4]!)
   110c4:	push	{r0}		; (str r0, [sp, #-4]!)
   110c8:	ldr	ip, [pc, #16]	; 110e0 <__assert_fail@plt+0x40>
   110cc:	push	{ip}		; (str ip, [sp, #-4]!)
   110d0:	ldr	r0, [pc, #12]	; 110e4 <__assert_fail@plt+0x44>
   110d4:	ldr	r3, [pc, #12]	; 110e8 <__assert_fail@plt+0x48>
   110d8:	bl	10f5c <__libc_start_main@plt>
   110dc:	bl	11088 <abort@plt>
   110e0:	ldrdeq	r7, [r1], -ip
   110e4:	andeq	r1, r1, r0, ror #8
   110e8:	andeq	r7, r1, ip, ror pc
   110ec:	ldr	r3, [pc, #20]	; 11108 <__assert_fail@plt+0x68>
   110f0:	ldr	r2, [pc, #20]	; 1110c <__assert_fail@plt+0x6c>
   110f4:	add	r3, pc, r3
   110f8:	ldr	r2, [r3, r2]
   110fc:	cmp	r2, #0
   11100:	bxeq	lr
   11104:	b	10f8c <__gmon_start__@plt>
   11108:	andeq	r8, r1, r4, lsl #30
   1110c:	andeq	r0, r0, r0, ror #1
   11110:	ldr	r0, [pc, #24]	; 11130 <__assert_fail@plt+0x90>
   11114:	ldr	r3, [pc, #24]	; 11134 <__assert_fail@plt+0x94>
   11118:	cmp	r3, r0
   1111c:	bxeq	lr
   11120:	ldr	r3, [pc, #16]	; 11138 <__assert_fail@plt+0x98>
   11124:	cmp	r3, #0
   11128:	bxeq	lr
   1112c:	bx	r3
   11130:	andeq	sl, r2, r8, lsr r1
   11134:	andeq	sl, r2, r8, lsr r1
   11138:	andeq	r0, r0, r0
   1113c:	ldr	r0, [pc, #36]	; 11168 <__assert_fail@plt+0xc8>
   11140:	ldr	r1, [pc, #36]	; 1116c <__assert_fail@plt+0xcc>
   11144:	sub	r1, r1, r0
   11148:	asr	r1, r1, #2
   1114c:	add	r1, r1, r1, lsr #31
   11150:	asrs	r1, r1, #1
   11154:	bxeq	lr
   11158:	ldr	r3, [pc, #16]	; 11170 <__assert_fail@plt+0xd0>
   1115c:	cmp	r3, #0
   11160:	bxeq	lr
   11164:	bx	r3
   11168:	andeq	sl, r2, r8, lsr r1
   1116c:	andeq	sl, r2, r8, lsr r1
   11170:	andeq	r0, r0, r0
   11174:	push	{r4, lr}
   11178:	ldr	r4, [pc, #24]	; 11198 <__assert_fail@plt+0xf8>
   1117c:	ldrb	r3, [r4]
   11180:	cmp	r3, #0
   11184:	popne	{r4, pc}
   11188:	bl	11110 <__assert_fail@plt+0x70>
   1118c:	mov	r3, #1
   11190:	strb	r3, [r4]
   11194:	pop	{r4, pc}
   11198:	andeq	sl, r2, r0, ror #2
   1119c:	b	1113c <__assert_fail@plt+0x9c>
   111a0:	push	{fp, lr}
   111a4:	mov	fp, sp
   111a8:	sub	sp, sp, #56	; 0x38
   111ac:	mov	r4, r0
   111b0:	cmp	r0, #0
   111b4:	bne	11410 <__assert_fail@plt+0x370>
   111b8:	movw	r1, #32811	; 0x802b
   111bc:	mov	r0, #0
   111c0:	mov	r2, #5
   111c4:	movt	r1, #1
   111c8:	bl	10ed8 <dcgettext@plt>
   111cc:	mov	r1, r0
   111d0:	movw	r0, #50312	; 0xc488
   111d4:	movt	r0, #2
   111d8:	ldr	r2, [r0]
   111dc:	mov	r0, #1
   111e0:	bl	11010 <__printf_chk@plt>
   111e4:	movw	r1, #32846	; 0x804e
   111e8:	mov	r0, #0
   111ec:	mov	r2, #5
   111f0:	movt	r1, #1
   111f4:	bl	10ed8 <dcgettext@plt>
   111f8:	movw	r7, #41308	; 0xa15c
   111fc:	movt	r7, #2
   11200:	ldr	r1, [r7]
   11204:	bl	10e3c <fputs_unlocked@plt>
   11208:	movw	r1, #33342	; 0x823e
   1120c:	mov	r0, #0
   11210:	mov	r2, #5
   11214:	movt	r1, #1
   11218:	bl	10ed8 <dcgettext@plt>
   1121c:	ldr	r1, [r7]
   11220:	bl	10e3c <fputs_unlocked@plt>
   11224:	movw	r1, #33387	; 0x826b
   11228:	mov	r0, #0
   1122c:	mov	r2, #5
   11230:	movt	r1, #1
   11234:	bl	10ed8 <dcgettext@plt>
   11238:	ldr	r1, [r7]
   1123c:	bl	10e3c <fputs_unlocked@plt>
   11240:	movw	r1, #33441	; 0x82a1
   11244:	mov	r0, #0
   11248:	mov	r2, #5
   1124c:	movt	r1, #1
   11250:	bl	10ed8 <dcgettext@plt>
   11254:	ldr	r1, [r7]
   11258:	bl	10e3c <fputs_unlocked@plt>
   1125c:	movw	r1, #33814	; 0x8416
   11260:	mov	r0, #0
   11264:	mov	r2, #5
   11268:	movt	r1, #1
   1126c:	bl	10ed8 <dcgettext@plt>
   11270:	ldr	r1, [r7]
   11274:	bl	10e3c <fputs_unlocked@plt>
   11278:	movw	r1, #34239	; 0x85bf
   1127c:	mov	r0, #0
   11280:	mov	r2, #5
   11284:	movt	r1, #1
   11288:	bl	10ed8 <dcgettext@plt>
   1128c:	ldr	r1, [r7]
   11290:	bl	10e3c <fputs_unlocked@plt>
   11294:	movw	r1, #34650	; 0x875a
   11298:	mov	r0, #0
   1129c:	mov	r2, #5
   112a0:	movt	r1, #1
   112a4:	bl	10ed8 <dcgettext@plt>
   112a8:	ldr	r1, [r7]
   112ac:	bl	10e3c <fputs_unlocked@plt>
   112b0:	movw	r0, #38088	; 0x94c8
   112b4:	mov	r2, #48	; 0x30
   112b8:	mov	r6, sp
   112bc:	movw	r5, #35122	; 0x8932
   112c0:	movt	r0, #1
   112c4:	movt	r5, #1
   112c8:	add	r1, r0, #32
   112cc:	add	r3, r0, #16
   112d0:	vld1.64	{d18-d19}, [r0], r2
   112d4:	vld1.64	{d16-d17}, [r1]
   112d8:	vld1.64	{d20-d21}, [r3]
   112dc:	vldr	d22, [r0]
   112e0:	add	r1, r6, #32
   112e4:	add	r0, r6, #16
   112e8:	vst1.64	{d16-d17}, [r1]
   112ec:	movw	r1, #35537	; 0x8ad1
   112f0:	vst1.64	{d20-d21}, [r0]
   112f4:	mov	r0, r6
   112f8:	movt	r1, #1
   112fc:	vst1.64	{d18-d19}, [r0], r2
   11300:	vstr	d22, [r0]
   11304:	mov	r0, r5
   11308:	bl	10e54 <strcmp@plt>
   1130c:	cmp	r0, #0
   11310:	ldrne	r1, [r6, #8]!
   11314:	cmpne	r1, #0
   11318:	bne	11304 <__assert_fail@plt+0x264>
   1131c:	movw	r1, #35632	; 0x8b30
   11320:	ldr	r6, [r6, #4]
   11324:	mov	r0, #0
   11328:	mov	r2, #5
   1132c:	movt	r1, #1
   11330:	bl	10ed8 <dcgettext@plt>
   11334:	movw	r2, #35159	; 0x8957
   11338:	movw	r3, #35655	; 0x8b47
   1133c:	mov	r1, r0
   11340:	mov	r0, #1
   11344:	movt	r2, #1
   11348:	movt	r3, #1
   1134c:	bl	11010 <__printf_chk@plt>
   11350:	cmp	r6, #0
   11354:	mov	r0, #5
   11358:	mov	r1, #0
   1135c:	moveq	r6, r5
   11360:	bl	1104c <setlocale@plt>
   11364:	cmp	r0, #0
   11368:	beq	113a0 <__assert_fail@plt+0x300>
   1136c:	movw	r1, #35695	; 0x8b6f
   11370:	mov	r2, #3
   11374:	movt	r1, #1
   11378:	bl	1107c <strncmp@plt>
   1137c:	cmp	r0, #0
   11380:	beq	113a0 <__assert_fail@plt+0x300>
   11384:	movw	r1, #35699	; 0x8b73
   11388:	mov	r0, #0
   1138c:	mov	r2, #5
   11390:	movt	r1, #1
   11394:	bl	10ed8 <dcgettext@plt>
   11398:	ldr	r1, [r7]
   1139c:	bl	10e3c <fputs_unlocked@plt>
   113a0:	movw	r1, #35770	; 0x8bba
   113a4:	mov	r0, #0
   113a8:	mov	r2, #5
   113ac:	movt	r1, #1
   113b0:	bl	10ed8 <dcgettext@plt>
   113b4:	movw	r2, #35655	; 0x8b47
   113b8:	mov	r1, r0
   113bc:	mov	r0, #1
   113c0:	mov	r3, r5
   113c4:	movt	r2, #1
   113c8:	bl	11010 <__printf_chk@plt>
   113cc:	movw	r1, #35797	; 0x8bd5
   113d0:	mov	r0, #0
   113d4:	mov	r2, #5
   113d8:	movt	r1, #1
   113dc:	bl	10ed8 <dcgettext@plt>
   113e0:	mov	r1, r0
   113e4:	movw	r0, #35565	; 0x8aed
   113e8:	movw	r3, #35847	; 0x8c07
   113ec:	cmp	r6, r5
   113f0:	mov	r2, r6
   113f4:	movt	r0, #1
   113f8:	movt	r3, #1
   113fc:	moveq	r3, r0
   11400:	mov	r0, #1
   11404:	bl	11010 <__printf_chk@plt>
   11408:	mov	r0, r4
   1140c:	bl	10fb0 <exit@plt>
   11410:	movw	r0, #41296	; 0xa150
   11414:	movw	r1, #32772	; 0x8004
   11418:	mov	r2, #5
   1141c:	movt	r0, #2
   11420:	movt	r1, #1
   11424:	ldr	r5, [r0]
   11428:	mov	r0, #0
   1142c:	bl	10ed8 <dcgettext@plt>
   11430:	mov	r2, r0
   11434:	movw	r0, #50312	; 0xc488
   11438:	mov	r1, #1
   1143c:	movt	r0, #2
   11440:	ldr	r3, [r0]
   11444:	mov	r0, r5
   11448:	bl	11028 <__fprintf_chk@plt>
   1144c:	mov	r0, r4
   11450:	bl	10fb0 <exit@plt>
   11454:	nop	{0}
   11458:	nop	{0}
   1145c:	nop	{0}
   11460:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11464:	add	fp, sp, #28
   11468:	sub	sp, sp, #412	; 0x19c
   1146c:	mov	r4, r0
   11470:	ldr	r0, [r1]
   11474:	mov	sl, r1
   11478:	bl	1424c <__assert_fail@plt+0x31ac>
   1147c:	movw	r1, #35847	; 0x8c07
   11480:	mov	r0, #6
   11484:	movt	r1, #1
   11488:	bl	1104c <setlocale@plt>
   1148c:	movw	r6, #35163	; 0x895b
   11490:	movw	r1, #35125	; 0x8935
   11494:	movt	r6, #1
   11498:	movt	r1, #1
   1149c:	mov	r0, r6
   114a0:	bl	11070 <bindtextdomain@plt>
   114a4:	mov	r0, r6
   114a8:	bl	10ef0 <textdomain@plt>
   114ac:	movw	r0, #16636	; 0x40fc
   114b0:	movt	r0, #1
   114b4:	bl	17fe0 <__assert_fail@plt+0x6f40>
   114b8:	movw	r6, #35149	; 0x894d
   114bc:	movw	r7, #37976	; 0x9458
   114c0:	movw	r8, #35157	; 0x8955
   114c4:	add	r0, sp, #104	; 0x68
   114c8:	mov	r5, #0
   114cc:	mov	r9, #1
   114d0:	movt	r6, #1
   114d4:	movt	r7, #1
   114d8:	movt	r8, #1
   114dc:	add	r1, r0, #8
   114e0:	add	r0, r0, #16
   114e4:	str	r1, [sp, #60]	; 0x3c
   114e8:	str	r0, [sp, #52]	; 0x34
   114ec:	mov	r0, r4
   114f0:	mov	r1, sl
   114f4:	mov	r2, r6
   114f8:	mov	r3, r7
   114fc:	str	r5, [sp]
   11500:	bl	10f98 <getopt_long@plt>
   11504:	cmp	r0, #64	; 0x40
   11508:	ble	1164c <__assert_fail@plt+0x5ac>
   1150c:	sub	r0, r0, #65	; 0x41
   11510:	cmp	r0, #51	; 0x33
   11514:	bhi	12a0c <__assert_fail@plt+0x196c>
   11518:	add	r1, pc, #0
   1151c:	ldr	pc, [r1, r0, lsl #2]
   11520:	andeq	r1, r1, r0, lsl r6
   11524:	andeq	r2, r1, ip, lsl #20
   11528:	strdeq	r1, [r1], -r0
   1152c:	andeq	r2, r1, ip, lsl #20
   11530:	andeq	r2, r1, ip, lsl #20
   11534:	andeq	r2, r1, ip, lsl #20
   11538:	andeq	r2, r1, ip, lsl #20
   1153c:	andeq	r2, r1, ip, lsl #20
   11540:	andeq	r2, r1, ip, lsl #20
   11544:	andeq	r2, r1, ip, lsl #20
   11548:	andeq	r2, r1, ip, lsl #20
   1154c:	andeq	r2, r1, ip, lsl #20
   11550:	andeq	r2, r1, ip, lsl #20
   11554:	andeq	r2, r1, ip, lsl #20
   11558:	andeq	r2, r1, ip, lsl #20
   1155c:	andeq	r2, r1, ip, lsl #20
   11560:	andeq	r2, r1, ip, lsl #20
   11564:	andeq	r2, r1, ip, lsl #20
   11568:	andeq	r2, r1, ip, lsl #20
   1156c:	andeq	r2, r1, ip, lsl #20
   11570:	andeq	r2, r1, ip, lsl #20
   11574:	andeq	r2, r1, ip, lsl #20
   11578:	andeq	r2, r1, ip, lsl #20
   1157c:	andeq	r2, r1, ip, lsl #20
   11580:	andeq	r2, r1, ip, lsl #20
   11584:	andeq	r2, r1, ip, lsl #20
   11588:	andeq	r2, r1, ip, lsl #20
   1158c:	andeq	r2, r1, ip, lsl #20
   11590:	andeq	r2, r1, ip, lsl #20
   11594:	andeq	r2, r1, ip, lsl #20
   11598:	andeq	r2, r1, ip, lsl #20
   1159c:	andeq	r2, r1, ip, lsl #20
   115a0:	andeq	r2, r1, ip, lsl #20
   115a4:	andeq	r2, r1, ip, lsl #20
   115a8:	strdeq	r1, [r1], -r0
   115ac:	andeq	r1, r1, ip, lsr r6
   115b0:	andeq	r2, r1, ip, lsl #20
   115b4:	andeq	r2, r1, ip, lsl #20
   115b8:	andeq	r2, r1, ip, lsl #20
   115bc:	andeq	r2, r1, ip, lsl #20
   115c0:	andeq	r2, r1, ip, lsl #20
   115c4:	andeq	r2, r1, ip, lsl #20
   115c8:	andeq	r2, r1, ip, lsl #20
   115cc:	andeq	r2, r1, ip, lsl #20
   115d0:	andeq	r2, r1, ip, lsl #20
   115d4:	andeq	r2, r1, ip, lsl #20
   115d8:	andeq	r2, r1, ip, lsl #20
   115dc:	andeq	r2, r1, ip, lsl #20
   115e0:	andeq	r2, r1, ip, lsl #20
   115e4:	andeq	r2, r1, ip, lsl #20
   115e8:	andeq	r1, r1, ip, lsr #12
   115ec:	andeq	r1, r1, r0, lsl #12
   115f0:	movw	r0, #41328	; 0xa170
   115f4:	movt	r0, #2
   115f8:	strb	r9, [r0]
   115fc:	b	114ec <__assert_fail@plt+0x44c>
   11600:	movw	r0, #41331	; 0xa173
   11604:	movt	r0, #2
   11608:	strb	r9, [r0]
   1160c:	b	114ec <__assert_fail@plt+0x44c>
   11610:	mov	r0, #3
   11614:	mov	r1, r8
   11618:	bl	1104c <setlocale@plt>
   1161c:	mov	r0, #0
   11620:	mov	r1, r8
   11624:	bl	1104c <setlocale@plt>
   11628:	b	114ec <__assert_fail@plt+0x44c>
   1162c:	movw	r0, #41330	; 0xa172
   11630:	movt	r0, #2
   11634:	strb	r9, [r0]
   11638:	b	114ec <__assert_fail@plt+0x44c>
   1163c:	movw	r0, #41329	; 0xa171
   11640:	movt	r0, #2
   11644:	strb	r9, [r0]
   11648:	b	114ec <__assert_fail@plt+0x44c>
   1164c:	cmn	r0, #1
   11650:	bne	12894 <__assert_fail@plt+0x17f4>
   11654:	movw	r7, #41288	; 0xa148
   11658:	movw	r2, #41332	; 0xa174
   1165c:	mov	r5, #2
   11660:	movt	r7, #2
   11664:	movt	r2, #2
   11668:	ldr	r0, [r7]
   1166c:	sub	r8, r4, r0
   11670:	sub	r0, r8, #2
   11674:	clz	r0, r0
   11678:	lsr	r3, r0, #5
   1167c:	movw	r0, #41329	; 0xa171
   11680:	movt	r0, #2
   11684:	ldrb	r0, [r0]
   11688:	eor	r1, r0, #1
   1168c:	and	r1, r3, r1
   11690:	strb	r1, [r2]
   11694:	movw	r1, #41330	; 0xa172
   11698:	mov	r2, #2
   1169c:	movt	r1, #2
   116a0:	ldrb	r1, [r1]
   116a4:	teq	r0, r1
   116a8:	movwne	r2, #1
   116ac:	cmp	r0, #0
   116b0:	movwne	r5, #1
   116b4:	cmp	r1, #0
   116b8:	movwne	r5, #2
   116bc:	cmp	r8, r2
   116c0:	blt	128f4 <__assert_fail@plt+0x1854>
   116c4:	cmp	r5, r8
   116c8:	str	r3, [sp, #40]	; 0x28
   116cc:	blt	12928 <__assert_fail@plt+0x1888>
   116d0:	mov	r0, #24
   116d4:	bl	16708 <__assert_fail@plt+0x5668>
   116d8:	mov	r9, #0
   116dc:	str	r0, [sp, #108]	; 0x6c
   116e0:	str	r0, [sp, #104]	; 0x68
   116e4:	add	r1, sp, #104	; 0x68
   116e8:	str	r9, [r0, #4]
   116ec:	ldr	r0, [r7]
   116f0:	ldr	r0, [sl, r0, lsl #2]
   116f4:	bl	12b08 <__assert_fail@plt+0x1a68>
   116f8:	mov	r6, #1
   116fc:	cmp	r0, #0
   11700:	beq	12888 <__assert_fail@plt+0x17e8>
   11704:	cmp	r8, #2
   11708:	bne	11744 <__assert_fail@plt+0x6a4>
   1170c:	mov	r0, #24
   11710:	bl	16708 <__assert_fail@plt+0x5668>
   11714:	mov	r1, #0
   11718:	str	r0, [sp, #68]	; 0x44
   1171c:	str	r0, [sp, #64]	; 0x40
   11720:	add	r9, sp, #64	; 0x40
   11724:	str	r1, [r0, #4]
   11728:	ldr	r0, [r7]
   1172c:	mov	r1, r9
   11730:	add	r0, sl, r0, lsl #2
   11734:	ldr	r0, [r0, #4]
   11738:	bl	12b08 <__assert_fail@plt+0x1a68>
   1173c:	cmp	r0, #0
   11740:	beq	12888 <__assert_fail@plt+0x17e8>
   11744:	add	r0, sp, #104	; 0x68
   11748:	bl	13de0 <__assert_fail@plt+0x2d40>
   1174c:	movw	r0, #41328	; 0xa170
   11750:	mvn	sl, #0
   11754:	movt	r0, #2
   11758:	ldrb	r0, [r0]
   1175c:	cmp	r0, #1
   11760:	bne	117f0 <__assert_fail@plt+0x750>
   11764:	add	r5, sp, #144	; 0x90
   11768:	mov	r1, #0
   1176c:	mov	r2, #256	; 0x100
   11770:	mov	sl, r8
   11774:	mvn	r4, #0
   11778:	mov	r7, #0
   1177c:	mov	r8, #256	; 0x100
   11780:	mov	r0, r5
   11784:	bl	11004 <memset@plt>
   11788:	ldr	r1, [sp, #60]	; 0x3c
   1178c:	mvn	r0, #1
   11790:	stm	r1, {r0, r4}
   11794:	add	r0, sp, #104	; 0x68
   11798:	mov	r1, #0
   1179c:	bl	13958 <__assert_fail@plt+0x28b8>
   117a0:	cmn	r0, #1
   117a4:	beq	117dc <__assert_fail@plt+0x73c>
   117a8:	mov	r8, #256	; 0x100
   117ac:	mov	r4, #1
   117b0:	add	r6, sp, #104	; 0x68
   117b4:	ldrb	r1, [r5, r0]
   117b8:	strb	r4, [r5, r0]
   117bc:	eor	r0, r1, #1
   117c0:	mov	r1, #0
   117c4:	sub	r8, r8, r0
   117c8:	mov	r0, r6
   117cc:	bl	13958 <__assert_fail@plt+0x28b8>
   117d0:	cmn	r0, #1
   117d4:	bne	117b4 <__assert_fail@plt+0x714>
   117d8:	asr	r7, r8, #31
   117dc:	ldr	r0, [sp, #52]	; 0x34
   117e0:	str	r8, [r0]
   117e4:	mov	r8, sl
   117e8:	mvn	sl, #0
   117ec:	str	r7, [r0, #4]
   117f0:	ldr	r0, [sp, #128]	; 0x80
   117f4:	cmp	r0, #0
   117f8:	bne	12a14 <__assert_fail@plt+0x1974>
   117fc:	add	r0, r9, #8
   11800:	cmp	r9, #0
   11804:	str	r0, [sp, #56]	; 0x38
   11808:	beq	11c9c <__assert_fail@plt+0xbfc>
   1180c:	ldr	r0, [sp, #52]	; 0x34
   11810:	add	r4, r9, #16
   11814:	ldr	r6, [r0]
   11818:	ldr	r5, [r0, #4]
   1181c:	mov	r0, r9
   11820:	bl	13de0 <__assert_fail@plt+0x2d40>
   11824:	str	r4, [sp, #44]	; 0x2c
   11828:	ldrd	r0, [r4]
   1182c:	subs	r2, r6, r0
   11830:	sbcs	r2, r5, r1
   11834:	bcc	11864 <__assert_fail@plt+0x7c4>
   11838:	ldr	r2, [r9, #24]
   1183c:	cmp	r2, #1
   11840:	bne	11864 <__assert_fail@plt+0x7c4>
   11844:	ldr	r2, [r9, #28]
   11848:	subs	r0, r6, r0
   1184c:	sbc	r1, r5, r1
   11850:	strd	r0, [r2, #16]
   11854:	ldr	r0, [sp, #44]	; 0x2c
   11858:	str	r6, [r0]
   1185c:	str	r5, [r0, #4]
   11860:	b	1186c <__assert_fail@plt+0x7cc>
   11864:	mov	r6, r0
   11868:	mov	r5, r1
   1186c:	ldr	r0, [r9, #24]
   11870:	cmp	r0, #2
   11874:	bcs	12a34 <__assert_fail@plt+0x1994>
   11878:	movw	r1, #41332	; 0xa174
   1187c:	movt	r1, #2
   11880:	ldrb	r1, [r1]
   11884:	cmp	r1, #0
   11888:	beq	11ad0 <__assert_fail@plt+0xa30>
   1188c:	ldrb	r0, [r9, #32]
   11890:	cmp	r0, #0
   11894:	bne	12a40 <__assert_fail@plt+0x19a0>
   11898:	ldrb	r0, [r9, #34]	; 0x22
   1189c:	mvn	r4, #1
   118a0:	cmp	r0, #0
   118a4:	bne	12a4c <__assert_fail@plt+0x19ac>
   118a8:	ldr	r0, [sp, #52]	; 0x34
   118ac:	ldr	r2, [r9, #4]
   118b0:	ldm	r0, {r1, r7}
   118b4:	movw	r0, #41328	; 0xa170
   118b8:	movt	r0, #2
   118bc:	ldrb	r0, [r0]
   118c0:	cmp	r0, #0
   118c4:	bne	11ac4 <__assert_fail@plt+0xa24>
   118c8:	ldrb	r0, [r9, #33]	; 0x21
   118cc:	cmp	r0, #0
   118d0:	beq	11ac4 <__assert_fail@plt+0xa24>
   118d4:	ldr	r0, [sp, #108]	; 0x6c
   118d8:	str	r1, [sp, #16]
   118dc:	str	r7, [sp, #20]
   118e0:	str	r6, [sp, #24]
   118e4:	str	r5, [sp, #28]
   118e8:	str	r2, [sp, #32]
   118ec:	str	r8, [sp, #36]	; 0x24
   118f0:	str	r9, [sp, #48]	; 0x30
   118f4:	str	r0, [sp, #12]
   118f8:	bl	10fa4 <__ctype_b_loc@plt>
   118fc:	ldr	r0, [r0]
   11900:	vmov.i32	q8, #0	; 0x00000000
   11904:	vmov.i16	d20, #1	; 0x0001
   11908:	vmov.i32	q9, #0	; 0x00000000
   1190c:	mov	r1, #0
   11910:	add	r2, r0, r1
   11914:	add	r1, r1, #8
   11918:	vld1.16	{d21}, [r2]
   1191c:	cmp	r1, #512	; 0x200
   11920:	vshr.u16	d22, d21, #9
   11924:	vshr.u16	d21, d21, #8
   11928:	vand	d22, d22, d20
   1192c:	vand	d21, d21, d20
   11930:	vaddw.u16	q9, q9, d22
   11934:	vaddw.u16	q8, q8, d21
   11938:	bne	11910 <__assert_fail@plt+0x870>
   1193c:	vext.8	q11, q9, q8, #8
   11940:	vext.8	q10, q8, q8, #8
   11944:	ldr	r0, [sp, #60]	; 0x3c
   11948:	mov	r6, #1
   1194c:	vadd.i32	q8, q8, q10
   11950:	vadd.i32	q9, q9, q11
   11954:	stm	r0, {r4, sl}
   11958:	ldr	r0, [sp, #56]	; 0x38
   1195c:	vdup.32	q10, d16[1]
   11960:	vdup.32	q11, d18[1]
   11964:	stm	r0, {r4, sl}
   11968:	mov	r4, #1
   1196c:	vadd.i32	q8, q8, q10
   11970:	vadd.i32	q9, q9, q11
   11974:	vmov.32	sl, d16[0]
   11978:	vmov.32	r8, d18[0]
   1197c:	b	11a4c <__assert_fail@plt+0x9ac>
   11980:	ldr	r6, [sp, #144]	; 0x90
   11984:	ldr	r2, [sp, #108]	; 0x6c
   11988:	ldr	r5, [sp, #48]	; 0x30
   1198c:	mvn	ip, #0
   11990:	ldr	r2, [r2, #4]
   11994:	str	r2, [sp, #108]	; 0x6c
   11998:	adds	r2, r7, #1
   1199c:	ldr	r7, [sp, #60]	; 0x3c
   119a0:	adc	r3, ip, #0
   119a4:	cmp	r6, #1
   119a8:	strd	r2, [r7]
   119ac:	ldr	r7, [r5, #4]
   119b0:	ldr	r7, [r7, #4]
   119b4:	str	r7, [r5, #4]
   119b8:	ldr	r7, [sp, #56]	; 0x38
   119bc:	strd	r2, [r7]
   119c0:	mov	r7, r8
   119c4:	moveq	r7, sl
   119c8:	ldr	r6, [sp, #52]	; 0x34
   119cc:	sub	r7, r7, #1
   119d0:	ldrd	r4, [r6]
   119d4:	subs	r4, r4, r7
   119d8:	ldr	r7, [sp, #44]	; 0x2c
   119dc:	sbc	r5, r5, #0
   119e0:	cmp	r1, #1
   119e4:	mov	r1, r8
   119e8:	strd	r4, [r6]
   119ec:	moveq	r1, sl
   119f0:	sub	r1, r1, #1
   119f4:	ldrd	r4, [r7]
   119f8:	subs	r4, r4, r1
   119fc:	mov	r1, r3
   11a00:	sbc	r5, r5, #0
   11a04:	strd	r4, [r7]
   11a08:	mvn	r7, #1
   11a0c:	mov	r4, r2
   11a10:	adds	r7, r7, #1
   11a14:	adc	r5, ip, #0
   11a18:	cmn	r9, #1
   11a1c:	eorne	r6, r4, r7
   11a20:	eorne	r1, r1, r5
   11a24:	orrne	r1, r6, r1
   11a28:	clzne	r1, r1
   11a2c:	lsrne	r6, r1, #5
   11a30:	eorne	r1, r2, r7
   11a34:	eorne	r2, r3, r5
   11a38:	orrne	r1, r1, r2
   11a3c:	clzne	r1, r1
   11a40:	lsrne	r4, r1, #5
   11a44:	cmnne	r0, #1
   11a48:	beq	11ae4 <__assert_fail@plt+0xa44>
   11a4c:	add	r0, sp, #104	; 0x68
   11a50:	add	r1, sp, #144	; 0x90
   11a54:	bl	13958 <__assert_fail@plt+0x28b8>
   11a58:	mov	r9, r0
   11a5c:	ldr	r0, [sp, #48]	; 0x30
   11a60:	sub	r1, fp, #36	; 0x24
   11a64:	bl	13958 <__assert_fail@plt+0x28b8>
   11a68:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11a6c:	tst	r6, #1
   11a70:	cmpne	r1, #2
   11a74:	bne	11aa0 <__assert_fail@plt+0xa00>
   11a78:	cmp	r1, #2
   11a7c:	mvn	r7, #1
   11a80:	bne	11980 <__assert_fail@plt+0x8e0>
   11a84:	ldr	r1, [sp, #60]	; 0x3c
   11a88:	mvn	ip, #0
   11a8c:	ldrd	r2, [r1]
   11a90:	ldr	r1, [sp, #56]	; 0x38
   11a94:	ldr	r4, [r1]
   11a98:	ldr	r1, [r1, #4]
   11a9c:	b	11a10 <__assert_fail@plt+0x970>
   11aa0:	ldr	r6, [sp, #144]	; 0x90
   11aa4:	mvn	r7, #1
   11aa8:	subs	r2, r6, #2
   11aac:	movwne	r2, #1
   11ab0:	tst	r4, r2
   11ab4:	bne	11984 <__assert_fail@plt+0x8e4>
   11ab8:	movw	r1, #37499	; 0x927b
   11abc:	movt	r1, #1
   11ac0:	b	11c80 <__assert_fail@plt+0xbe0>
   11ac4:	mov	r3, r6
   11ac8:	mov	r6, r1
   11acc:	b	11b38 <__assert_fail@plt+0xa98>
   11ad0:	cmp	r0, #0
   11ad4:	beq	11c9c <__assert_fail@plt+0xbfc>
   11ad8:	movw	r1, #37323	; 0x91cb
   11adc:	movt	r1, #1
   11ae0:	b	11c80 <__assert_fail@plt+0xbe0>
   11ae4:	ldr	r0, [sp, #52]	; 0x34
   11ae8:	ldrd	r6, [r0]
   11aec:	ldr	r0, [sp, #16]
   11af0:	subs	r0, r0, r6
   11af4:	ldr	r0, [sp, #20]
   11af8:	sbcs	r0, r0, r7
   11afc:	bcc	12a58 <__assert_fail@plt+0x19b8>
   11b00:	ldr	r0, [sp, #44]	; 0x2c
   11b04:	ldm	r0, {r3, r5}
   11b08:	ldr	r0, [sp, #24]
   11b0c:	subs	r0, r0, r3
   11b10:	ldr	r0, [sp, #28]
   11b14:	sbcs	r0, r0, r5
   11b18:	bcc	12a58 <__assert_fail@plt+0x19b8>
   11b1c:	ldr	r0, [sp, #12]
   11b20:	ldr	r9, [sp, #48]	; 0x30
   11b24:	ldr	r2, [sp, #32]
   11b28:	ldr	r8, [sp, #36]	; 0x24
   11b2c:	mvn	sl, #0
   11b30:	str	r0, [sp, #108]	; 0x6c
   11b34:	str	r2, [r9, #4]
   11b38:	subs	r0, r3, r6
   11b3c:	sbcs	r0, r5, r7
   11b40:	bcs	11c08 <__assert_fail@plt+0xb68>
   11b44:	movw	r0, #41331	; 0xa173
   11b48:	movt	r0, #2
   11b4c:	ldrb	r0, [r0]
   11b50:	cmp	r0, #0
   11b54:	bne	11c08 <__assert_fail@plt+0xb68>
   11b58:	orrs	r0, r3, r5
   11b5c:	beq	12a7c <__assert_fail@plt+0x19dc>
   11b60:	movw	r0, #41332	; 0xa174
   11b64:	movt	r0, #2
   11b68:	ldrb	r0, [r0]
   11b6c:	cmp	r0, #0
   11b70:	beq	12a88 <__assert_fail@plt+0x19e8>
   11b74:	ldr	r0, [r2]
   11b78:	cmp	r0, #4
   11b7c:	bhi	12a78 <__assert_fail@plt+0x19d8>
   11b80:	add	r1, pc, #4
   11b84:	str	r3, [sp, #48]	; 0x30
   11b88:	ldr	pc, [r1, r0, lsl #2]
   11b8c:	andeq	r1, r1, r0, lsr #23
   11b90:	andeq	r1, r1, r8, lsr #23
   11b94:	andeq	r2, r1, r8, lsr #21
   11b98:	andeq	r2, r1, r8, ror sl
   11b9c:	andeq	r1, r1, r0, lsr #23
   11ba0:	add	r0, r2, #8
   11ba4:	b	11bac <__assert_fail@plt+0xb0c>
   11ba8:	add	r0, r2, #9
   11bac:	ldrb	r4, [r0]
   11bb0:	mov	r0, #24
   11bb4:	bl	16708 <__assert_fail@plt+0x5668>
   11bb8:	ldr	r2, [sp, #48]	; 0x30
   11bbc:	mov	r1, #0
   11bc0:	subs	r2, r6, r2
   11bc4:	sbc	r3, r7, r5
   11bc8:	strd	r2, [r0, #16]
   11bcc:	mov	r2, #4
   11bd0:	strb	r4, [r0, #8]
   11bd4:	str	r2, [r0]
   11bd8:	str	r1, [r0, #4]
   11bdc:	ldr	r1, [r9, #4]
   11be0:	cmp	r1, #0
   11be4:	beq	12ab4 <__assert_fail@plt+0x1a14>
   11be8:	str	r0, [r1, #4]
   11bec:	str	r0, [r9, #4]
   11bf0:	ldr	r0, [sp, #52]	; 0x34
   11bf4:	ldrd	r6, [r0]
   11bf8:	ldr	r0, [sp, #44]	; 0x2c
   11bfc:	mov	r3, r6
   11c00:	mov	r5, r7
   11c04:	strd	r6, [r0]
   11c08:	movw	r0, #41328	; 0xa170
   11c0c:	movt	r0, #2
   11c10:	ldrb	r0, [r0]
   11c14:	cmp	r0, #1
   11c18:	bne	11c9c <__assert_fail@plt+0xbfc>
   11c1c:	ldrb	r0, [sp, #137]	; 0x89
   11c20:	cmp	r0, #0
   11c24:	beq	11c9c <__assert_fail@plt+0xbfc>
   11c28:	eor	r0, r3, r6
   11c2c:	eor	r1, r5, r7
   11c30:	orrs	r0, r0, r1
   11c34:	bne	11c78 <__assert_fail@plt+0xbd8>
   11c38:	ldr	r1, [sp, #56]	; 0x38
   11c3c:	mvn	r0, #1
   11c40:	stm	r1, {r0, sl}
   11c44:	mov	r0, r9
   11c48:	mov	r1, #0
   11c4c:	bl	13958 <__assert_fail@plt+0x28b8>
   11c50:	cmn	r0, #1
   11c54:	beq	11c78 <__assert_fail@plt+0xbd8>
   11c58:	mov	r5, r0
   11c5c:	mov	r0, r9
   11c60:	mov	r1, #0
   11c64:	bl	13958 <__assert_fail@plt+0x28b8>
   11c68:	cmn	r0, #1
   11c6c:	beq	11c9c <__assert_fail@plt+0xbfc>
   11c70:	cmp	r0, r5
   11c74:	beq	11c5c <__assert_fail@plt+0xbbc>
   11c78:	movw	r1, #37216	; 0x9160
   11c7c:	movt	r1, #1
   11c80:	mov	r0, #0
   11c84:	mov	r2, #5
   11c88:	bl	10ed8 <dcgettext@plt>
   11c8c:	mov	r2, r0
   11c90:	mov	r0, #1
   11c94:	mov	r1, #0
   11c98:	bl	10f44 <error@plt>
   11c9c:	movw	r0, #41304	; 0xa158
   11ca0:	mov	r1, #2
   11ca4:	movt	r0, #2
   11ca8:	ldr	r0, [r0]
   11cac:	bl	141e8 <__assert_fail@plt+0x3148>
   11cb0:	movw	r0, #41330	; 0xa172
   11cb4:	cmp	r8, #1
   11cb8:	movt	r0, #2
   11cbc:	ldrb	r0, [r0]
   11cc0:	bne	11e48 <__assert_fail@plt+0xda8>
   11cc4:	cmp	r0, #0
   11cc8:	beq	11e48 <__assert_fail@plt+0xda8>
   11ccc:	movw	r0, #41328	; 0xa170
   11cd0:	ldr	r1, [sp, #60]	; 0x3c
   11cd4:	movt	r0, #2
   11cd8:	ldrb	r5, [r0]
   11cdc:	mvn	r0, #1
   11ce0:	stm	r1, {r0, sl}
   11ce4:	add	r0, sp, #104	; 0x68
   11ce8:	mov	r1, #0
   11cec:	bl	13958 <__assert_fail@plt+0x28b8>
   11cf0:	cmn	r0, #1
   11cf4:	beq	11d20 <__assert_fail@plt+0xc80>
   11cf8:	movw	r6, #41344	; 0xa180
   11cfc:	mov	r7, #1
   11d00:	add	r4, sp, #104	; 0x68
   11d04:	movt	r6, #2
   11d08:	strb	r7, [r6, r0]
   11d0c:	mov	r0, r4
   11d10:	mov	r1, #0
   11d14:	bl	13958 <__assert_fail@plt+0x28b8>
   11d18:	cmn	r0, #1
   11d1c:	bne	11d08 <__assert_fail@plt+0xc68>
   11d20:	cmp	r5, #0
   11d24:	beq	11e38 <__assert_fail@plt+0xd98>
   11d28:	movw	r1, #41344	; 0xa180
   11d2c:	vmov.i8	q8, #1	; 0x01
   11d30:	mov	r5, #224	; 0xe0
   11d34:	movt	r1, #2
   11d38:	add	r2, r1, #48	; 0x30
   11d3c:	add	r3, r1, #32
   11d40:	add	r7, r1, #16
   11d44:	mov	r6, r1
   11d48:	add	r0, r1, #64	; 0x40
   11d4c:	add	r4, r1, #80	; 0x50
   11d50:	vld1.64	{d18-d19}, [r7 :128]
   11d54:	vld1.64	{d20-d21}, [r3 :128]
   11d58:	vld1.64	{d22-d23}, [r2 :128]
   11d5c:	vld1.64	{d24-d25}, [r0 :128]
   11d60:	vld1.8	{d26-d27}, [r6 :128], r5
   11d64:	add	r5, r1, #96	; 0x60
   11d68:	veor	q9, q9, q8
   11d6c:	veor	q10, q10, q8
   11d70:	veor	q11, q11, q8
   11d74:	veor	q12, q12, q8
   11d78:	vst1.64	{d18-d19}, [r7 :128]
   11d7c:	vst1.64	{d20-d21}, [r3 :128]
   11d80:	vst1.64	{d22-d23}, [r2 :128]
   11d84:	add	r3, r1, #128	; 0x80
   11d88:	add	r7, r1, #112	; 0x70
   11d8c:	add	r2, r1, #144	; 0x90
   11d90:	vld1.64	{d18-d19}, [r4 :128]
   11d94:	vld1.64	{d20-d21}, [r5 :128]
   11d98:	vld1.64	{d22-d23}, [r7 :128]
   11d9c:	vld1.64	{d28-d29}, [r3 :128]
   11da0:	vld1.64	{d30-d31}, [r2 :128]
   11da4:	vst1.64	{d24-d25}, [r0 :128]
   11da8:	mov	r0, r1
   11dac:	veor	q9, q9, q8
   11db0:	veor	q10, q10, q8
   11db4:	veor	q11, q11, q8
   11db8:	veor	q14, q14, q8
   11dbc:	veor	q15, q15, q8
   11dc0:	vst1.64	{d18-d19}, [r4 :128]
   11dc4:	veor	q9, q13, q8
   11dc8:	vst1.64	{d20-d21}, [r5 :128]
   11dcc:	vst1.64	{d22-d23}, [r7 :128]
   11dd0:	vst1.64	{d28-d29}, [r3 :128]
   11dd4:	mov	r3, #240	; 0xf0
   11dd8:	vst1.8	{d18-d19}, [r0 :128], r3
   11ddc:	vst1.64	{d30-d31}, [r2 :128]
   11de0:	add	r2, r1, #160	; 0xa0
   11de4:	vld1.64	{d18-d19}, [r2 :128]
   11de8:	veor	q9, q9, q8
   11dec:	vst1.64	{d18-d19}, [r2 :128]
   11df0:	add	r2, r1, #176	; 0xb0
   11df4:	vld1.64	{d18-d19}, [r2 :128]
   11df8:	veor	q9, q9, q8
   11dfc:	vst1.64	{d18-d19}, [r2 :128]
   11e00:	add	r2, r1, #192	; 0xc0
   11e04:	add	r1, r1, #208	; 0xd0
   11e08:	vld1.64	{d18-d19}, [r2 :128]
   11e0c:	veor	q9, q9, q8
   11e10:	vst1.64	{d18-d19}, [r2 :128]
   11e14:	vld1.64	{d18-d19}, [r1 :128]
   11e18:	veor	q9, q9, q8
   11e1c:	vst1.64	{d18-d19}, [r1 :128]
   11e20:	vld1.64	{d18-d19}, [r6 :128]
   11e24:	veor	q9, q9, q8
   11e28:	vst1.64	{d18-d19}, [r6 :128]
   11e2c:	vld1.64	{d18-d19}, [r0 :128]
   11e30:	veor	q8, q9, q8
   11e34:	vst1.64	{d16-d17}, [r0 :128]
   11e38:	movw	r0, #14384	; 0x3830
   11e3c:	movt	r0, #1
   11e40:	bl	13658 <__assert_fail@plt+0x25b8>
   11e44:	b	12874 <__assert_fail@plt+0x17d4>
   11e48:	movw	r1, #41329	; 0xa171
   11e4c:	cmp	r8, #1
   11e50:	movt	r1, #2
   11e54:	ldrb	r1, [r1]
   11e58:	bne	12040 <__assert_fail@plt+0xfa0>
   11e5c:	cmp	r1, #0
   11e60:	beq	12040 <__assert_fail@plt+0xfa0>
   11e64:	movw	r0, #41328	; 0xa170
   11e68:	ldr	r1, [sp, #60]	; 0x3c
   11e6c:	movt	r0, #2
   11e70:	ldrb	r5, [r0]
   11e74:	mvn	r0, #1
   11e78:	stm	r1, {r0, sl}
   11e7c:	add	r0, sp, #104	; 0x68
   11e80:	mov	r1, #0
   11e84:	bl	13958 <__assert_fail@plt+0x28b8>
   11e88:	cmn	r0, #1
   11e8c:	beq	11eb8 <__assert_fail@plt+0xe18>
   11e90:	movw	r6, #49792	; 0xc280
   11e94:	mov	r7, #1
   11e98:	add	r4, sp, #104	; 0x68
   11e9c:	movt	r6, #2
   11ea0:	strb	r7, [r6, r0]
   11ea4:	mov	r0, r4
   11ea8:	mov	r1, #0
   11eac:	bl	13958 <__assert_fail@plt+0x28b8>
   11eb0:	cmn	r0, #1
   11eb4:	bne	11ea0 <__assert_fail@plt+0xe00>
   11eb8:	cmp	r5, #0
   11ebc:	beq	11fd0 <__assert_fail@plt+0xf30>
   11ec0:	movw	r1, #49792	; 0xc280
   11ec4:	vmov.i8	q8, #1	; 0x01
   11ec8:	mov	r5, #224	; 0xe0
   11ecc:	movt	r1, #2
   11ed0:	add	r2, r1, #48	; 0x30
   11ed4:	add	r3, r1, #32
   11ed8:	add	r7, r1, #16
   11edc:	mov	r6, r1
   11ee0:	add	r0, r1, #64	; 0x40
   11ee4:	add	r4, r1, #80	; 0x50
   11ee8:	vld1.64	{d18-d19}, [r7 :128]
   11eec:	vld1.64	{d20-d21}, [r3 :128]
   11ef0:	vld1.64	{d22-d23}, [r2 :128]
   11ef4:	vld1.64	{d24-d25}, [r0 :128]
   11ef8:	vld1.8	{d26-d27}, [r6 :128], r5
   11efc:	add	r5, r1, #96	; 0x60
   11f00:	veor	q9, q9, q8
   11f04:	veor	q10, q10, q8
   11f08:	veor	q11, q11, q8
   11f0c:	veor	q12, q12, q8
   11f10:	vst1.64	{d18-d19}, [r7 :128]
   11f14:	vst1.64	{d20-d21}, [r3 :128]
   11f18:	vst1.64	{d22-d23}, [r2 :128]
   11f1c:	add	r3, r1, #128	; 0x80
   11f20:	add	r7, r1, #112	; 0x70
   11f24:	add	r2, r1, #144	; 0x90
   11f28:	vld1.64	{d18-d19}, [r4 :128]
   11f2c:	vld1.64	{d20-d21}, [r5 :128]
   11f30:	vld1.64	{d22-d23}, [r7 :128]
   11f34:	vld1.64	{d28-d29}, [r3 :128]
   11f38:	vld1.64	{d30-d31}, [r2 :128]
   11f3c:	vst1.64	{d24-d25}, [r0 :128]
   11f40:	mov	r0, r1
   11f44:	veor	q9, q9, q8
   11f48:	veor	q10, q10, q8
   11f4c:	veor	q11, q11, q8
   11f50:	veor	q14, q14, q8
   11f54:	veor	q15, q15, q8
   11f58:	vst1.64	{d18-d19}, [r4 :128]
   11f5c:	veor	q9, q13, q8
   11f60:	vst1.64	{d20-d21}, [r5 :128]
   11f64:	vst1.64	{d22-d23}, [r7 :128]
   11f68:	vst1.64	{d28-d29}, [r3 :128]
   11f6c:	mov	r3, #240	; 0xf0
   11f70:	vst1.8	{d18-d19}, [r0 :128], r3
   11f74:	vst1.64	{d30-d31}, [r2 :128]
   11f78:	add	r2, r1, #160	; 0xa0
   11f7c:	vld1.64	{d18-d19}, [r2 :128]
   11f80:	veor	q9, q9, q8
   11f84:	vst1.64	{d18-d19}, [r2 :128]
   11f88:	add	r2, r1, #176	; 0xb0
   11f8c:	vld1.64	{d18-d19}, [r2 :128]
   11f90:	veor	q9, q9, q8
   11f94:	vst1.64	{d18-d19}, [r2 :128]
   11f98:	add	r2, r1, #192	; 0xc0
   11f9c:	add	r1, r1, #208	; 0xd0
   11fa0:	vld1.64	{d18-d19}, [r2 :128]
   11fa4:	veor	q9, q9, q8
   11fa8:	vst1.64	{d18-d19}, [r2 :128]
   11fac:	vld1.64	{d18-d19}, [r1 :128]
   11fb0:	veor	q9, q9, q8
   11fb4:	vst1.64	{d18-d19}, [r1 :128]
   11fb8:	vld1.64	{d18-d19}, [r6 :128]
   11fbc:	veor	q9, q9, q8
   11fc0:	vst1.64	{d18-d19}, [r6 :128]
   11fc4:	vld1.64	{d18-d19}, [r0 :128]
   11fc8:	veor	q8, q9, q8
   11fcc:	vst1.64	{d16-d17}, [r0 :128]
   11fd0:	movw	r4, #41600	; 0xa280
   11fd4:	movw	r6, #41308	; 0xa15c
   11fd8:	movt	r4, #2
   11fdc:	movt	r6, #2
   11fe0:	mov	r0, r4
   11fe4:	mov	r1, #8192	; 0x2000
   11fe8:	bl	1387c <__assert_fail@plt+0x27dc>
   11fec:	cmp	r0, #0
   11ff0:	beq	12874 <__assert_fail@plt+0x17d4>
   11ff4:	ldr	r3, [r6]
   11ff8:	mov	r5, r0
   11ffc:	mov	r0, r4
   12000:	mov	r1, #1
   12004:	mov	r2, r5
   12008:	bl	10ec0 <fwrite_unlocked@plt>
   1200c:	cmp	r0, r5
   12010:	beq	11fe0 <__assert_fail@plt+0xf40>
   12014:	bl	10fe0 <__errno_location@plt>
   12018:	ldr	r4, [r0]
   1201c:	movw	r1, #35426	; 0x8a62
   12020:	movt	r1, #1
   12024:	mov	r0, #0
   12028:	mov	r2, #5
   1202c:	bl	10ed8 <dcgettext@plt>
   12030:	mov	r2, r0
   12034:	mov	r0, #1
   12038:	mov	r1, r4
   1203c:	bl	10f44 <error@plt>
   12040:	ldr	r2, [sp, #40]	; 0x28
   12044:	and	r1, r2, r1
   12048:	and	r0, r0, r1
   1204c:	cmp	r0, #1
   12050:	bne	12210 <__assert_fail@plt+0x1170>
   12054:	movw	r0, #41328	; 0xa170
   12058:	ldr	r1, [sp, #60]	; 0x3c
   1205c:	movt	r0, #2
   12060:	ldrb	r6, [r0]
   12064:	mvn	r0, #1
   12068:	stm	r1, {r0, sl}
   1206c:	add	r0, sp, #104	; 0x68
   12070:	mov	r1, #0
   12074:	bl	13958 <__assert_fail@plt+0x28b8>
   12078:	cmn	r0, #1
   1207c:	beq	120a8 <__assert_fail@plt+0x1008>
   12080:	movw	r4, #49792	; 0xc280
   12084:	mov	r7, #1
   12088:	add	r5, sp, #104	; 0x68
   1208c:	movt	r4, #2
   12090:	strb	r7, [r4, r0]
   12094:	mov	r0, r5
   12098:	mov	r1, #0
   1209c:	bl	13958 <__assert_fail@plt+0x28b8>
   120a0:	cmn	r0, #1
   120a4:	bne	12090 <__assert_fail@plt+0xff0>
   120a8:	cmp	r6, #0
   120ac:	beq	121c0 <__assert_fail@plt+0x1120>
   120b0:	movw	r1, #49792	; 0xc280
   120b4:	vmov.i8	q8, #1	; 0x01
   120b8:	mov	r5, #224	; 0xe0
   120bc:	movt	r1, #2
   120c0:	add	r2, r1, #48	; 0x30
   120c4:	add	r3, r1, #32
   120c8:	add	r7, r1, #16
   120cc:	mov	r6, r1
   120d0:	add	r0, r1, #64	; 0x40
   120d4:	add	r4, r1, #80	; 0x50
   120d8:	vld1.64	{d18-d19}, [r7 :128]
   120dc:	vld1.64	{d20-d21}, [r3 :128]
   120e0:	vld1.64	{d22-d23}, [r2 :128]
   120e4:	vld1.64	{d24-d25}, [r0 :128]
   120e8:	vld1.8	{d26-d27}, [r6 :128], r5
   120ec:	add	r5, r1, #96	; 0x60
   120f0:	veor	q9, q9, q8
   120f4:	veor	q10, q10, q8
   120f8:	veor	q11, q11, q8
   120fc:	veor	q12, q12, q8
   12100:	vst1.64	{d18-d19}, [r7 :128]
   12104:	vst1.64	{d20-d21}, [r3 :128]
   12108:	vst1.64	{d22-d23}, [r2 :128]
   1210c:	add	r3, r1, #128	; 0x80
   12110:	add	r7, r1, #112	; 0x70
   12114:	add	r2, r1, #144	; 0x90
   12118:	vld1.64	{d18-d19}, [r4 :128]
   1211c:	vld1.64	{d20-d21}, [r5 :128]
   12120:	vld1.64	{d22-d23}, [r7 :128]
   12124:	vld1.64	{d28-d29}, [r3 :128]
   12128:	vld1.64	{d30-d31}, [r2 :128]
   1212c:	vst1.64	{d24-d25}, [r0 :128]
   12130:	mov	r0, r1
   12134:	veor	q9, q9, q8
   12138:	veor	q10, q10, q8
   1213c:	veor	q11, q11, q8
   12140:	veor	q14, q14, q8
   12144:	veor	q15, q15, q8
   12148:	vst1.64	{d18-d19}, [r4 :128]
   1214c:	veor	q9, q13, q8
   12150:	vst1.64	{d20-d21}, [r5 :128]
   12154:	vst1.64	{d22-d23}, [r7 :128]
   12158:	vst1.64	{d28-d29}, [r3 :128]
   1215c:	mov	r3, #240	; 0xf0
   12160:	vst1.8	{d18-d19}, [r0 :128], r3
   12164:	vst1.64	{d30-d31}, [r2 :128]
   12168:	add	r2, r1, #160	; 0xa0
   1216c:	vld1.64	{d18-d19}, [r2 :128]
   12170:	veor	q9, q9, q8
   12174:	vst1.64	{d18-d19}, [r2 :128]
   12178:	add	r2, r1, #176	; 0xb0
   1217c:	vld1.64	{d18-d19}, [r2 :128]
   12180:	veor	q9, q9, q8
   12184:	vst1.64	{d18-d19}, [r2 :128]
   12188:	add	r2, r1, #192	; 0xc0
   1218c:	add	r1, r1, #208	; 0xd0
   12190:	vld1.64	{d18-d19}, [r2 :128]
   12194:	veor	q9, q9, q8
   12198:	vst1.64	{d18-d19}, [r2 :128]
   1219c:	vld1.64	{d18-d19}, [r1 :128]
   121a0:	veor	q9, q9, q8
   121a4:	vst1.64	{d18-d19}, [r1 :128]
   121a8:	vld1.64	{d18-d19}, [r6 :128]
   121ac:	veor	q9, q9, q8
   121b0:	vst1.64	{d18-d19}, [r6 :128]
   121b4:	vld1.64	{d18-d19}, [r0 :128]
   121b8:	veor	q8, q9, q8
   121bc:	vst1.64	{d16-d17}, [r0 :128]
   121c0:	ldr	r1, [sp, #56]	; 0x38
   121c4:	mvn	r0, #1
   121c8:	stm	r1, {r0, sl}
   121cc:	mov	r0, r9
   121d0:	mov	r1, #0
   121d4:	bl	13958 <__assert_fail@plt+0x28b8>
   121d8:	cmn	r0, #1
   121dc:	beq	12204 <__assert_fail@plt+0x1164>
   121e0:	movw	r4, #41344	; 0xa180
   121e4:	mov	r5, #1
   121e8:	movt	r4, #2
   121ec:	strb	r5, [r4, r0]
   121f0:	mov	r0, r9
   121f4:	mov	r1, #0
   121f8:	bl	13958 <__assert_fail@plt+0x28b8>
   121fc:	cmn	r0, #1
   12200:	bne	121ec <__assert_fail@plt+0x114c>
   12204:	movw	r0, #14460	; 0x387c
   12208:	movt	r0, #1
   1220c:	b	11e40 <__assert_fail@plt+0xda0>
   12210:	movw	r0, #41332	; 0xa174
   12214:	movt	r0, #2
   12218:	ldrb	r0, [r0]
   1221c:	cmp	r0, #0
   12220:	beq	12874 <__assert_fail@plt+0x17d4>
   12224:	movw	r0, #41328	; 0xa170
   12228:	movt	r0, #2
   1222c:	ldrb	r0, [r0]
   12230:	cmp	r0, #1
   12234:	bne	123fc <__assert_fail@plt+0x135c>
   12238:	ldr	r1, [sp, #60]	; 0x3c
   1223c:	mvn	r0, #1
   12240:	mov	r6, #0
   12244:	stm	r1, {r0, sl}
   12248:	add	r0, sp, #104	; 0x68
   1224c:	mov	r1, #0
   12250:	bl	13958 <__assert_fail@plt+0x28b8>
   12254:	movw	r7, #49792	; 0xc280
   12258:	cmn	r0, #1
   1225c:	movt	r7, #2
   12260:	beq	12284 <__assert_fail@plt+0x11e4>
   12264:	mov	r4, #1
   12268:	add	r5, sp, #104	; 0x68
   1226c:	strb	r4, [r7, r0]
   12270:	mov	r0, r5
   12274:	mov	r1, #0
   12278:	bl	13958 <__assert_fail@plt+0x28b8>
   1227c:	cmn	r0, #1
   12280:	bne	1226c <__assert_fail@plt+0x11cc>
   12284:	ldr	r1, [sp, #56]	; 0x38
   12288:	mvn	r0, #1
   1228c:	movw	r5, #50048	; 0xc380
   12290:	movt	r5, #2
   12294:	str	r0, [r1]
   12298:	add	ip, pc, #784	; 0x310
   1229c:	add	lr, pc, #796	; 0x31c
   122a0:	add	r2, pc, #808	; 0x328
   122a4:	add	r3, pc, #820	; 0x334
   122a8:	str	sl, [r1, #4]
   122ac:	add	r4, pc, #828	; 0x33c
   122b0:	add	r0, pc, #840	; 0x348
   122b4:	add	r1, pc, #852	; 0x354
   122b8:	vld1.64	{d16-d17}, [r3 :128]
   122bc:	vld1.64	{d18-d19}, [r1 :128]
   122c0:	add	r1, pc, #856	; 0x358
   122c4:	vld1.64	{d0-d1}, [r0 :128]
   122c8:	add	r3, r5, #224	; 0xe0
   122cc:	vld1.64	{d26-d27}, [r2 :128]
   122d0:	add	r0, r5, #208	; 0xd0
   122d4:	vld1.64	{d28-d29}, [lr :128]
   122d8:	vld1.64	{d30-d31}, [ip :128]
   122dc:	vld1.64	{d2-d3}, [r4 :128]
   122e0:	vld1.64	{d20-d21}, [r1 :128]
   122e4:	add	r1, pc, #836	; 0x344
   122e8:	vld1.64	{d22-d23}, [r1 :128]
   122ec:	add	r1, pc, #844	; 0x34c
   122f0:	vld1.64	{d24-d25}, [r1 :128]
   122f4:	vst1.64	{d16-d17}, [r3 :128]
   122f8:	add	r1, pc, #848	; 0x350
   122fc:	vst1.64	{d18-d19}, [r0 :128]
   12300:	add	r0, r5, #192	; 0xc0
   12304:	vld1.64	{d16-d17}, [r1 :128]
   12308:	add	r1, pc, #848	; 0x350
   1230c:	vst1.64	{d20-d21}, [r0 :128]
   12310:	add	r0, r5, #176	; 0xb0
   12314:	vld1.64	{d18-d19}, [r1 :128]
   12318:	add	r1, pc, #848	; 0x350
   1231c:	vst1.64	{d22-d23}, [r0 :128]
   12320:	add	r0, r5, #160	; 0xa0
   12324:	vld1.64	{d20-d21}, [r1 :128]
   12328:	add	r1, pc, #848	; 0x350
   1232c:	vst1.64	{d24-d25}, [r0 :128]
   12330:	add	r0, r5, #144	; 0x90
   12334:	vld1.64	{d22-d23}, [r1 :128]
   12338:	add	r1, pc, #848	; 0x350
   1233c:	vst1.64	{d26-d27}, [r0 :128]
   12340:	add	r0, r5, #128	; 0x80
   12344:	vld1.64	{d24-d25}, [r1 :128]
   12348:	add	r1, pc, #848	; 0x350
   1234c:	vst1.64	{d28-d29}, [r0 :128]
   12350:	add	r0, r5, #112	; 0x70
   12354:	vst1.64	{d30-d31}, [r0 :128]
   12358:	add	r0, r5, #96	; 0x60
   1235c:	vld1.64	{d26-d27}, [r1 :128]
   12360:	mov	r1, r5
   12364:	vst1.64	{d0-d1}, [r0 :128]
   12368:	add	r0, r5, #80	; 0x50
   1236c:	vst1.64	{d2-d3}, [r0 :128]
   12370:	add	r0, r5, #64	; 0x40
   12374:	vst1.64	{d16-d17}, [r0 :128]
   12378:	add	r0, r5, #48	; 0x30
   1237c:	vst1.64	{d18-d19}, [r0 :128]
   12380:	add	r0, r5, #32
   12384:	vst1.64	{d20-d21}, [r0 :128]
   12388:	add	r0, r5, #16
   1238c:	vst1.64	{d22-d23}, [r0 :128]
   12390:	mov	r0, #240	; 0xf0
   12394:	vst1.8	{d24-d25}, [r1 :128], r0
   12398:	vst1.64	{d26-d27}, [r1 :128]
   1239c:	b	123b0 <__assert_fail@plt+0x1310>
   123a0:	strb	r0, [r5, r6]
   123a4:	add	r6, r6, #1
   123a8:	cmp	r6, #256	; 0x100
   123ac:	beq	12758 <__assert_fail@plt+0x16b8>
   123b0:	ldrb	r0, [r7, r6]
   123b4:	cmp	r0, #0
   123b8:	bne	123a4 <__assert_fail@plt+0x1304>
   123bc:	mov	r0, r9
   123c0:	mov	r1, #0
   123c4:	bl	13958 <__assert_fail@plt+0x28b8>
   123c8:	cmn	r0, #1
   123cc:	bne	123a0 <__assert_fail@plt+0x1300>
   123d0:	movw	r0, #41331	; 0xa173
   123d4:	movt	r0, #2
   123d8:	ldrb	r0, [r0]
   123dc:	cmp	r0, #0
   123e0:	bne	12758 <__assert_fail@plt+0x16b8>
   123e4:	movw	r0, #35438	; 0x8a6e
   123e8:	movw	r1, #35464	; 0x8a88
   123ec:	movw	r3, #35473	; 0x8a91
   123f0:	mov	r2, #1840	; 0x730
   123f4:	movt	r0, #1
   123f8:	b	12afc <__assert_fail@plt+0x1a5c>
   123fc:	add	r1, pc, #492	; 0x1ec
   12400:	add	r2, pc, #504	; 0x1f8
   12404:	add	r3, pc, #420	; 0x1a4
   12408:	add	r7, pc, #432	; 0x1b0
   1240c:	add	r5, pc, #444	; 0x1bc
   12410:	add	r4, pc, #456	; 0x1c8
   12414:	movw	r6, #50048	; 0xc380
   12418:	vld1.64	{d16-d17}, [r4 :128]
   1241c:	add	r4, pc, #492	; 0x1ec
   12420:	movt	r6, #2
   12424:	vld1.64	{d26-d27}, [r5 :128]
   12428:	vld1.64	{d28-d29}, [r7 :128]
   1242c:	vld1.64	{d2-d3}, [r1 :128]
   12430:	vld1.64	{d30-d31}, [r3 :128]
   12434:	vld1.64	{d0-d1}, [r2 :128]
   12438:	vld1.64	{d18-d19}, [r4 :128]
   1243c:	add	r4, pc, #476	; 0x1dc
   12440:	vld1.64	{d20-d21}, [r4 :128]
   12444:	add	r4, pc, #484	; 0x1e4
   12448:	add	r0, r6, #224	; 0xe0
   1244c:	vld1.64	{d22-d23}, [r4 :128]
   12450:	add	r4, pc, #488	; 0x1e8
   12454:	vld1.64	{d24-d25}, [r4 :128]
   12458:	vst1.64	{d16-d17}, [r0 :128]
   1245c:	add	r0, r6, #208	; 0xd0
   12460:	add	r1, pc, #488	; 0x1e8
   12464:	vst1.64	{d18-d19}, [r0 :128]
   12468:	add	r0, r6, #192	; 0xc0
   1246c:	vld1.64	{d16-d17}, [r1 :128]
   12470:	add	r1, pc, #488	; 0x1e8
   12474:	vst1.64	{d20-d21}, [r0 :128]
   12478:	add	r0, r6, #176	; 0xb0
   1247c:	vld1.64	{d18-d19}, [r1 :128]
   12480:	add	r1, pc, #488	; 0x1e8
   12484:	vst1.64	{d22-d23}, [r0 :128]
   12488:	add	r0, r6, #160	; 0xa0
   1248c:	vld1.64	{d20-d21}, [r1 :128]
   12490:	add	r1, pc, #488	; 0x1e8
   12494:	vst1.64	{d24-d25}, [r0 :128]
   12498:	add	r0, r6, #144	; 0x90
   1249c:	vld1.64	{d22-d23}, [r1 :128]
   124a0:	add	r1, pc, #488	; 0x1e8
   124a4:	vst1.64	{d26-d27}, [r0 :128]
   124a8:	add	r0, r6, #128	; 0x80
   124ac:	vld1.64	{d24-d25}, [r1 :128]
   124b0:	add	r1, pc, #488	; 0x1e8
   124b4:	vst1.64	{d28-d29}, [r0 :128]
   124b8:	add	r0, r6, #112	; 0x70
   124bc:	vld1.64	{d26-d27}, [r1 :128]
   124c0:	mov	r1, r6
   124c4:	vst1.64	{d30-d31}, [r0 :128]
   124c8:	add	r0, r6, #96	; 0x60
   124cc:	vst1.64	{d0-d1}, [r0 :128]
   124d0:	add	r0, r6, #80	; 0x50
   124d4:	vst1.64	{d2-d3}, [r0 :128]
   124d8:	add	r0, r6, #64	; 0x40
   124dc:	vst1.64	{d16-d17}, [r0 :128]
   124e0:	add	r0, r6, #48	; 0x30
   124e4:	vst1.64	{d18-d19}, [r0 :128]
   124e8:	add	r0, r6, #32
   124ec:	vst1.64	{d20-d21}, [r0 :128]
   124f0:	add	r0, r6, #16
   124f4:	vst1.64	{d22-d23}, [r0 :128]
   124f8:	mov	r0, #240	; 0xf0
   124fc:	vst1.8	{d24-d25}, [r1 :128], r0
   12500:	mvn	r0, #1
   12504:	vst1.64	{d26-d27}, [r1 :128]
   12508:	ldr	r1, [sp, #60]	; 0x3c
   1250c:	stm	r1, {r0, sl}
   12510:	ldr	r1, [sp, #56]	; 0x38
   12514:	stm	r1, {r0, sl}
   12518:	sub	sl, fp, #36	; 0x24
   1251c:	b	126f0 <__assert_fail@plt+0x1650>
   12520:	strb	r0, [r6, r5]
   12524:	b	126b0 <__assert_fail@plt+0x1610>
   12528:	bl	10fa4 <__ctype_b_loc@plt>
   1252c:	ldr	r5, [r0]
   12530:	mov	r8, #0
   12534:	b	12548 <__assert_fail@plt+0x14a8>
   12538:	add	r8, r8, #1
   1253c:	add	r5, r5, #2
   12540:	cmp	r8, #256	; 0x100
   12544:	beq	126b0 <__assert_fail@plt+0x1610>
   12548:	ldrb	r0, [r5, #1]
   1254c:	tst	r0, #2
   12550:	beq	12538 <__assert_fail@plt+0x1498>
   12554:	bl	10f80 <__ctype_toupper_loc@plt>
   12558:	ldr	r0, [r0]
   1255c:	ldr	r0, [r0, r8, lsl #2]
   12560:	strb	r0, [r6, r8]
   12564:	b	12538 <__assert_fail@plt+0x1498>
   12568:	bl	10fa4 <__ctype_b_loc@plt>
   1256c:	ldr	r5, [r0]
   12570:	mov	r4, #0
   12574:	b	12588 <__assert_fail@plt+0x14e8>
   12578:	add	r4, r4, #1
   1257c:	add	r5, r5, #2
   12580:	cmp	r4, #256	; 0x100
   12584:	beq	126b0 <__assert_fail@plt+0x1610>
   12588:	ldrb	r0, [r5, #1]
   1258c:	tst	r0, #1
   12590:	beq	12578 <__assert_fail@plt+0x14d8>
   12594:	bl	10f74 <__ctype_tolower_loc@plt>
   12598:	ldr	r0, [r0]
   1259c:	ldr	r0, [r0, r4, lsl #2]
   125a0:	strb	r0, [r6, r4]
   125a4:	b	12578 <__assert_fail@plt+0x14d8>
   125a8:	nop	{0}
   125ac:	nop	{0}
   125b0:	cmnvc	r2, #112, 2
   125b4:			; <UNDEFINED> instruction: 0x77767574
   125b8:	blvc	1eb0ba0 <stdout@@GLIBC_2.4+0x1e86a44>
   125bc:	svcvc	0x007e7d7c
   125c0:	orrhi	r8, r2, #128, 2
   125c4:	strhi	r8, [r6, r4, lsl #11]
   125c8:	blhi	fe2b4bf0 <stdout@@GLIBC_2.4+0xfe28aa94>
   125cc:	svchi	0x008e8d8c
   125d0:	orrsls	r9, r2, #144, 2	; 0x24
   125d4:			; <UNDEFINED> instruction: 0x97969594
   125d8:	blls	fe6b8c40 <stdout@@GLIBC_2.4+0xfe68eae4>
   125dc:	svcls	0x009e9d9c
   125e0:	mvn	lr, #224, 2	; 0x38
   125e4:	strb	lr, [r6, r4, ror #11]!
   125e8:	bl	ffaccd90 <stdout@@GLIBC_2.4+0xffaa2c34>
   125ec:	svc	0x00eeedec
   125f0:	cmppl	r2, #80, 2
   125f4:			; <UNDEFINED> instruction: 0x57565554
   125f8:	blpl	16a8b60 <stdout@@GLIBC_2.4+0x167ea04>
   125fc:	svcpl	0x005e5d5c
   12600:	cmnvs	r2, #96, 2
   12604:	strbvs	r6, [r6, -r4, ror #10]!
   12608:	blvs	1aacbb0 <stdout@@GLIBC_2.4+0x1a82a54>
   1260c:	svcvs	0x006e6d6c
   12610:	bicsle	sp, r2, #208, 2	; 0x34
   12614:			; <UNDEFINED> instruction: 0xd7d6d5d4
   12618:	blle	ff6c8d80 <stdout@@GLIBC_2.4+0xff69ec24>
   1261c:	svcle	0x00dedddc
   12620:	bicgt	ip, r2, #192, 2	; 0x30
   12624:	strbgt	ip, [r6, r4, asr #11]
   12628:	blgt	ff2c4d50 <stdout@@GLIBC_2.4+0xff29abf4>
   1262c:	svcgt	0x00cecdcc
   12630:			; <UNDEFINED> instruction: 0xb3b2b1b0
   12634:			; <UNDEFINED> instruction: 0xb7b6b5b4
   12638:	bllt	feec0d20 <stdout@@GLIBC_2.4+0xfee96bc4>
   1263c:	svclt	0x00bebdbc
   12640:			; <UNDEFINED> instruction: 0xa3a2a1a0
   12644:	strge	sl, [r6, r4, lsr #11]!
   12648:	blge	feabccf0 <stdout@@GLIBC_2.4+0xfea92b94>
   1264c:	svcge	0x00aeadac
   12650:	movtmi	r4, #8512	; 0x2140
   12654:	strbmi	r4, [r6, -r4, asr #10]
   12658:	blmi	12a4b80 <stdout@@GLIBC_2.4+0x127aa24>
   1265c:	svcmi	0x004e4d4c
   12660:	teqcc	r2, #48, 2
   12664:			; <UNDEFINED> instruction: 0x37363534
   12668:	blcc	ea0b50 <stdout@@GLIBC_2.4+0xe769f4>
   1266c:	svccc	0x003e3d3c
   12670:			; <UNDEFINED> instruction: 0x23222120
   12674:	strcs	r2, [r6, -r4, lsr #10]!
   12678:	blcs	a9cb20 <stdout@@GLIBC_2.4+0xa729c4>
   1267c:	svccs	0x002e2d2c
   12680:	tstne	r2, #16, 2
   12684:			; <UNDEFINED> instruction: 0x17161514
   12688:	blne	698af0 <stdout@@GLIBC_2.4+0x66e994>
   1268c:	svcne	0x001e1d1c
   12690:	movweq	r0, #8448	; 0x2100
   12694:	streq	r0, [r6, -r4, lsl #10]
   12698:	bleq	294ac0 <stdout@@GLIBC_2.4+0x26a964>
   1269c:	svceq	0x000e0d0c
   126a0:	vsra.u64	<illegal reg q15.5>, q8, #14
   126a4:			; <UNDEFINED> instruction: 0xf7f6f5f4
   126a8:	blx	ffed0e92 <stdout@@GLIBC_2.4+0xffea6d36>
   126ac:			; <UNDEFINED> instruction: 0xfffefdfc
   126b0:	cmp	r7, #2
   126b4:	beq	126f0 <__assert_fail@plt+0x1650>
   126b8:	ldr	r0, [sp, #108]	; 0x6c
   126bc:	ldr	r2, [sp, #60]	; 0x3c
   126c0:	mvn	r1, #0
   126c4:	ldr	r0, [r0, #4]
   126c8:	str	r0, [sp, #108]	; 0x6c
   126cc:	mvn	r0, #1
   126d0:	adds	r0, r0, #1
   126d4:	adc	r1, r1, #0
   126d8:	strd	r0, [r2]
   126dc:	ldr	r2, [r9, #4]
   126e0:	ldr	r2, [r2, #4]
   126e4:	str	r2, [r9, #4]
   126e8:	ldr	r2, [sp, #56]	; 0x38
   126ec:	strd	r0, [r2]
   126f0:	add	r0, sp, #104	; 0x68
   126f4:	add	r1, sp, #144	; 0x90
   126f8:	bl	13958 <__assert_fail@plt+0x28b8>
   126fc:	mov	r5, r0
   12700:	mov	r0, r9
   12704:	mov	r1, sl
   12708:	bl	13958 <__assert_fail@plt+0x28b8>
   1270c:	ldr	r1, [sp, #144]	; 0x90
   12710:	ldr	r7, [fp, #-36]	; 0xffffffdc
   12714:	cmp	r1, #0
   12718:	cmpeq	r7, #1
   1271c:	beq	12528 <__assert_fail@plt+0x1488>
   12720:	cmp	r1, #1
   12724:	cmpeq	r7, #0
   12728:	beq	12568 <__assert_fail@plt+0x14c8>
   1272c:	cmn	r5, #1
   12730:	cmnne	r0, #1
   12734:	bne	12520 <__assert_fail@plt+0x1480>
   12738:	cmn	r5, #1
   1273c:	beq	12754 <__assert_fail@plt+0x16b4>
   12740:	movw	r0, #41331	; 0xa173
   12744:	movt	r0, #2
   12748:	ldrb	r0, [r0]
   1274c:	cmp	r0, #0
   12750:	beq	12ae8 <__assert_fail@plt+0x1a48>
   12754:	mvn	sl, #0
   12758:	movw	r0, #41330	; 0xa172
   1275c:	movt	r0, #2
   12760:	ldrb	r0, [r0]
   12764:	cmp	r0, #0
   12768:	beq	127bc <__assert_fail@plt+0x171c>
   1276c:	ldr	r1, [sp, #56]	; 0x38
   12770:	mvn	r0, #1
   12774:	stm	r1, {r0, sl}
   12778:	mov	r0, r9
   1277c:	mov	r1, #0
   12780:	bl	13958 <__assert_fail@plt+0x28b8>
   12784:	cmn	r0, #1
   12788:	beq	127b0 <__assert_fail@plt+0x1710>
   1278c:	movw	r4, #41344	; 0xa180
   12790:	mov	r5, #1
   12794:	movt	r4, #2
   12798:	strb	r5, [r4, r0]
   1279c:	mov	r0, r9
   127a0:	mov	r1, #0
   127a4:	bl	13958 <__assert_fail@plt+0x28b8>
   127a8:	cmn	r0, #1
   127ac:	bne	12798 <__assert_fail@plt+0x16f8>
   127b0:	movw	r0, #15320	; 0x3bd8
   127b4:	movt	r0, #1
   127b8:	b	11e40 <__assert_fail@plt+0xda0>
   127bc:	movw	r4, #41600	; 0xa280
   127c0:	movw	r8, #41308	; 0xa15c
   127c4:	movw	r7, #50048	; 0xc380
   127c8:	movt	r4, #2
   127cc:	movt	r8, #2
   127d0:	movt	r7, #2
   127d4:	mov	r0, #0
   127d8:	mov	r1, r4
   127dc:	mov	r2, #8192	; 0x2000
   127e0:	bl	15fec <__assert_fail@plt+0x4f4c>
   127e4:	cmp	r0, #0
   127e8:	beq	12874 <__assert_fail@plt+0x17d4>
   127ec:	mov	r5, r0
   127f0:	cmn	r0, #1
   127f4:	beq	12ad4 <__assert_fail@plt+0x1a34>
   127f8:	and	r1, r5, #1
   127fc:	mov	r0, #0
   12800:	cmp	r5, #1
   12804:	beq	12838 <__assert_fail@plt+0x1798>
   12808:	sub	r2, r5, r1
   1280c:	mov	r0, #0
   12810:	mov	r3, r4
   12814:	ldrb	r6, [r3, r0]!
   12818:	add	r0, r0, #2
   1281c:	cmp	r2, r0
   12820:	ldrb	r6, [r7, r6]
   12824:	strb	r6, [r3]
   12828:	ldrb	r6, [r3, #1]
   1282c:	ldrb	r6, [r7, r6]
   12830:	strb	r6, [r3, #1]
   12834:	bne	12810 <__assert_fail@plt+0x1770>
   12838:	cmp	r1, #0
   1283c:	beq	1284c <__assert_fail@plt+0x17ac>
   12840:	ldrb	r1, [r4, r0]
   12844:	ldrb	r1, [r7, r1]
   12848:	strb	r1, [r4, r0]
   1284c:	cmp	r5, #0
   12850:	beq	12874 <__assert_fail@plt+0x17d4>
   12854:	ldr	r3, [r8]
   12858:	mov	r0, r4
   1285c:	mov	r1, #1
   12860:	mov	r2, r5
   12864:	bl	10ec0 <fwrite_unlocked@plt>
   12868:	cmp	r0, r5
   1286c:	beq	127d4 <__assert_fail@plt+0x1734>
   12870:	b	12014 <__assert_fail@plt+0xf74>
   12874:	mov	r0, #0
   12878:	mov	r6, #0
   1287c:	bl	11094 <close@plt>
   12880:	cmp	r0, #0
   12884:	bne	12a20 <__assert_fail@plt+0x1980>
   12888:	mov	r0, r6
   1288c:	sub	sp, fp, #28
   12890:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12894:	cmn	r0, #3
   12898:	bne	128e4 <__assert_fail@plt+0x1844>
   1289c:	movw	r0, #41200	; 0xa0f0
   128a0:	movw	r2, #35173	; 0x8965
   128a4:	mov	r1, #0
   128a8:	movt	r0, #2
   128ac:	movt	r2, #1
   128b0:	str	r1, [sp, #4]
   128b4:	movw	r1, #35122	; 0x8932
   128b8:	movt	r1, #1
   128bc:	ldr	r3, [r0]
   128c0:	movw	r0, #41308	; 0xa15c
   128c4:	str	r2, [sp]
   128c8:	movw	r2, #35159	; 0x8957
   128cc:	movt	r0, #2
   128d0:	movt	r2, #1
   128d4:	ldr	r0, [r0]
   128d8:	bl	164d4 <__assert_fail@plt+0x5434>
   128dc:	mov	r0, #0
   128e0:	bl	10fb0 <exit@plt>
   128e4:	cmn	r0, #2
   128e8:	bne	12a0c <__assert_fail@plt+0x196c>
   128ec:	mov	r0, #0
   128f0:	bl	111a0 <__assert_fail@plt+0x100>
   128f4:	cmp	r8, #0
   128f8:	bne	12980 <__assert_fail@plt+0x18e0>
   128fc:	movw	r1, #35186	; 0x8972
   12900:	mov	r0, #0
   12904:	mov	r2, #5
   12908:	movt	r1, #1
   1290c:	bl	10ed8 <dcgettext@plt>
   12910:	mov	r2, r0
   12914:	mov	r0, #0
   12918:	mov	r1, #0
   1291c:	bl	10f44 <error@plt>
   12920:	mov	r0, #1
   12924:	bl	111a0 <__assert_fail@plt+0x100>
   12928:	movw	r1, #35339	; 0x8a0b
   1292c:	mov	r0, #0
   12930:	mov	r2, #5
   12934:	movt	r1, #1
   12938:	bl	10ed8 <dcgettext@plt>
   1293c:	mov	r4, r0
   12940:	ldr	r0, [r7]
   12944:	add	r0, r0, r5
   12948:	ldr	r0, [sl, r0, lsl #2]
   1294c:	bl	15ea0 <__assert_fail@plt+0x4e00>
   12950:	mov	r3, r0
   12954:	mov	r0, #0
   12958:	mov	r1, #0
   1295c:	mov	r2, r4
   12960:	bl	10f44 <error@plt>
   12964:	cmp	r8, #2
   12968:	bne	12a0c <__assert_fail@plt+0x196c>
   1296c:	movw	r0, #41296	; 0xa150
   12970:	movw	r1, #35356	; 0x8a1c
   12974:	movt	r0, #2
   12978:	movt	r1, #1
   1297c:	b	129e4 <__assert_fail@plt+0x1944>
   12980:	movw	r1, #35202	; 0x8982
   12984:	mov	r0, #0
   12988:	mov	r2, #5
   1298c:	movt	r1, #1
   12990:	bl	10ed8 <dcgettext@plt>
   12994:	mov	r6, r0
   12998:	add	r0, sl, r4, lsl #2
   1299c:	ldr	r0, [r0, #-4]
   129a0:	bl	15ea0 <__assert_fail@plt+0x4e00>
   129a4:	mov	r3, r0
   129a8:	mov	r0, #0
   129ac:	mov	r1, #0
   129b0:	mov	r2, r6
   129b4:	bl	10f44 <error@plt>
   129b8:	movw	r0, #41330	; 0xa172
   129bc:	movw	r2, #35227	; 0x899b
   129c0:	movw	r1, #35295	; 0x89df
   129c4:	movt	r0, #2
   129c8:	movt	r2, #1
   129cc:	movt	r1, #1
   129d0:	ldrb	r0, [r0]
   129d4:	cmp	r0, #0
   129d8:	movw	r0, #41296	; 0xa150
   129dc:	movt	r0, #2
   129e0:	movne	r1, r2
   129e4:	ldr	r4, [r0]
   129e8:	mov	r0, #0
   129ec:	mov	r2, #5
   129f0:	bl	10ed8 <dcgettext@plt>
   129f4:	movw	r2, #38472	; 0x9648
   129f8:	mov	r3, r0
   129fc:	mov	r0, r4
   12a00:	mov	r1, #1
   12a04:	movt	r2, #1
   12a08:	bl	11028 <__fprintf_chk@plt>
   12a0c:	mov	r0, #1
   12a10:	bl	111a0 <__assert_fail@plt+0x100>
   12a14:	movw	r1, #36902	; 0x9026
   12a18:	movt	r1, #1
   12a1c:	b	11c80 <__assert_fail@plt+0xbe0>
   12a20:	bl	10fe0 <__errno_location@plt>
   12a24:	ldr	r4, [r0]
   12a28:	movw	r1, #35522	; 0x8ac2
   12a2c:	movt	r1, #1
   12a30:	b	12024 <__assert_fail@plt+0xf84>
   12a34:	movw	r1, #36954	; 0x905a
   12a38:	movt	r1, #1
   12a3c:	b	11c80 <__assert_fail@plt+0xbe0>
   12a40:	movw	r1, #37007	; 0x908f
   12a44:	movt	r1, #1
   12a48:	b	11c80 <__assert_fail@plt+0xbe0>
   12a4c:	movw	r1, #37068	; 0x90cc
   12a50:	movt	r1, #1
   12a54:	b	11c80 <__assert_fail@plt+0xbe0>
   12a58:	movw	r0, #37547	; 0x92ab
   12a5c:	movw	r1, #35464	; 0x8a88
   12a60:	movw	r3, #37600	; 0x92e0
   12a64:	movw	r2, #1224	; 0x4c8
   12a68:	movt	r0, #1
   12a6c:	movt	r1, #1
   12a70:	movt	r3, #1
   12a74:	bl	110a0 <__assert_fail@plt>
   12a78:	bl	11088 <abort@plt>
   12a7c:	movw	r1, #37164	; 0x912c
   12a80:	movt	r1, #1
   12a84:	b	11c80 <__assert_fail@plt+0xbe0>
   12a88:	movw	r0, #37056	; 0x90c0
   12a8c:	movw	r1, #35464	; 0x8a88
   12a90:	movw	r3, #37667	; 0x9323
   12a94:	movw	r2, #1377	; 0x561
   12a98:	movt	r0, #1
   12a9c:	movt	r1, #1
   12aa0:	movt	r3, #1
   12aa4:	bl	110a0 <__assert_fail@plt>
   12aa8:	movw	r1, #37733	; 0x9365
   12aac:	movt	r1, #1
   12ab0:	b	11c80 <__assert_fail@plt+0xbe0>
   12ab4:	movw	r0, #36237	; 0x8d8d
   12ab8:	movw	r1, #35464	; 0x8a88
   12abc:	movw	r3, #36639	; 0x8f1f
   12ac0:	movw	r2, #721	; 0x2d1
   12ac4:	movt	r0, #1
   12ac8:	movt	r1, #1
   12acc:	movt	r3, #1
   12ad0:	bl	110a0 <__assert_fail@plt>
   12ad4:	bl	10fe0 <__errno_location@plt>
   12ad8:	ldr	r4, [r0]
   12adc:	movw	r1, #37838	; 0x93ce
   12ae0:	movt	r1, #1
   12ae4:	b	12024 <__assert_fail@plt+0xf84>
   12ae8:	movw	r0, #35496	; 0x8aa8
   12aec:	movw	r1, #35464	; 0x8a88
   12af0:	movw	r3, #35473	; 0x8a91
   12af4:	movw	r2, #1893	; 0x765
   12af8:	movt	r0, #1
   12afc:	movt	r1, #1
   12b00:	movt	r3, #1
   12b04:	bl	110a0 <__assert_fail@plt>
   12b08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b0c:	add	fp, sp, #28
   12b10:	sub	sp, sp, #92	; 0x5c
   12b14:	str	r1, [fp, #-52]	; 0xffffffcc
   12b18:	mov	r7, r0
   12b1c:	bl	10fc8 <strlen@plt>
   12b20:	mov	r5, r0
   12b24:	bl	16708 <__assert_fail@plt+0x5668>
   12b28:	mov	sl, r0
   12b2c:	mov	r0, r5
   12b30:	mov	r1, #1
   12b34:	mov	r8, #1
   12b38:	bl	16b1c <__assert_fail@plt+0x5a7c>
   12b3c:	mov	ip, r0
   12b40:	mov	r9, #0
   12b44:	mov	r6, #0
   12b48:	str	sl, [fp, #-56]	; 0xffffffc8
   12b4c:	str	r0, [fp, #-48]	; 0xffffffd0
   12b50:	b	12b68 <__assert_fail@plt+0x1ac8>
   12b54:	cmp	r0, #0
   12b58:	beq	12e84 <__assert_fail@plt+0x1de4>
   12b5c:	strb	r0, [sl, r9]
   12b60:	add	r6, r6, #1
   12b64:	add	r9, r9, #1
   12b68:	ldrb	r0, [r7, r6]
   12b6c:	cmp	r0, #92	; 0x5c
   12b70:	bne	12b54 <__assert_fail@plt+0x1ab4>
   12b74:	strb	r8, [ip, r9]
   12b78:	add	r5, r6, #1
   12b7c:	ldrb	r0, [r7, r5]
   12b80:	cmp	r0, #118	; 0x76
   12b84:	bhi	12e7c <__assert_fail@plt+0x1ddc>
   12b88:	add	r1, pc, #0
   12b8c:	ldr	pc, [r1, r0, lsl #2]
   12b90:	ldrdeq	r2, [r1], -r4
   12b94:	andeq	r2, r1, ip, ror lr
   12b98:	andeq	r2, r1, ip, ror lr
   12b9c:	andeq	r2, r1, ip, ror lr
   12ba0:	andeq	r2, r1, ip, ror lr
   12ba4:	andeq	r2, r1, ip, ror lr
   12ba8:	andeq	r2, r1, ip, ror lr
   12bac:	andeq	r2, r1, ip, ror lr
   12bb0:	andeq	r2, r1, ip, ror lr
   12bb4:	andeq	r2, r1, ip, ror lr
   12bb8:	andeq	r2, r1, ip, ror lr
   12bbc:	andeq	r2, r1, ip, ror lr
   12bc0:	andeq	r2, r1, ip, ror lr
   12bc4:	andeq	r2, r1, ip, ror lr
   12bc8:	andeq	r2, r1, ip, ror lr
   12bcc:	andeq	r2, r1, ip, ror lr
   12bd0:	andeq	r2, r1, ip, ror lr
   12bd4:	andeq	r2, r1, ip, ror lr
   12bd8:	andeq	r2, r1, ip, ror lr
   12bdc:	andeq	r2, r1, ip, ror lr
   12be0:	andeq	r2, r1, ip, ror lr
   12be4:	andeq	r2, r1, ip, ror lr
   12be8:	andeq	r2, r1, ip, ror lr
   12bec:	andeq	r2, r1, ip, ror lr
   12bf0:	andeq	r2, r1, ip, ror lr
   12bf4:	andeq	r2, r1, ip, ror lr
   12bf8:	andeq	r2, r1, ip, ror lr
   12bfc:	andeq	r2, r1, ip, ror lr
   12c00:	andeq	r2, r1, ip, ror lr
   12c04:	andeq	r2, r1, ip, ror lr
   12c08:	andeq	r2, r1, ip, ror lr
   12c0c:	andeq	r2, r1, ip, ror lr
   12c10:	andeq	r2, r1, ip, ror lr
   12c14:	andeq	r2, r1, ip, ror lr
   12c18:	andeq	r2, r1, ip, ror lr
   12c1c:	andeq	r2, r1, ip, ror lr
   12c20:	andeq	r2, r1, ip, ror lr
   12c24:	andeq	r2, r1, ip, ror lr
   12c28:	andeq	r2, r1, ip, ror lr
   12c2c:	andeq	r2, r1, ip, ror lr
   12c30:	andeq	r2, r1, ip, ror lr
   12c34:	andeq	r2, r1, ip, ror lr
   12c38:	andeq	r2, r1, ip, ror lr
   12c3c:	andeq	r2, r1, ip, ror lr
   12c40:	andeq	r2, r1, ip, ror lr
   12c44:	andeq	r2, r1, ip, ror lr
   12c48:	andeq	r2, r1, ip, ror lr
   12c4c:	andeq	r2, r1, ip, ror lr
   12c50:	andeq	r2, r1, ip, ror #26
   12c54:	andeq	r2, r1, ip, ror #26
   12c58:	andeq	r2, r1, ip, ror #26
   12c5c:	andeq	r2, r1, ip, ror #26
   12c60:	andeq	r2, r1, ip, ror #26
   12c64:	andeq	r2, r1, ip, ror #26
   12c68:	andeq	r2, r1, ip, ror #26
   12c6c:	andeq	r2, r1, ip, ror #26
   12c70:	andeq	r2, r1, ip, ror lr
   12c74:	andeq	r2, r1, ip, ror lr
   12c78:	andeq	r2, r1, ip, ror lr
   12c7c:	andeq	r2, r1, ip, ror lr
   12c80:	andeq	r2, r1, ip, ror lr
   12c84:	andeq	r2, r1, ip, ror lr
   12c88:	andeq	r2, r1, ip, ror lr
   12c8c:	andeq	r2, r1, ip, ror lr
   12c90:	andeq	r2, r1, ip, ror lr
   12c94:	andeq	r2, r1, ip, ror lr
   12c98:	andeq	r2, r1, ip, ror lr
   12c9c:	andeq	r2, r1, ip, ror lr
   12ca0:	andeq	r2, r1, ip, ror lr
   12ca4:	andeq	r2, r1, ip, ror lr
   12ca8:	andeq	r2, r1, ip, ror lr
   12cac:	andeq	r2, r1, ip, ror lr
   12cb0:	andeq	r2, r1, ip, ror lr
   12cb4:	andeq	r2, r1, ip, ror lr
   12cb8:	andeq	r2, r1, ip, ror lr
   12cbc:	andeq	r2, r1, ip, ror lr
   12cc0:	andeq	r2, r1, ip, ror lr
   12cc4:	andeq	r2, r1, ip, ror lr
   12cc8:	andeq	r2, r1, ip, ror lr
   12ccc:	andeq	r2, r1, ip, ror lr
   12cd0:	andeq	r2, r1, ip, ror lr
   12cd4:	andeq	r2, r1, ip, ror lr
   12cd8:	andeq	r2, r1, ip, ror lr
   12cdc:	andeq	r2, r1, ip, ror lr
   12ce0:	andeq	r2, r1, ip, ror lr
   12ce4:	andeq	r2, r1, ip, ror lr
   12ce8:	andeq	r2, r1, ip, ror lr
   12cec:	andeq	r2, r1, ip, ror lr
   12cf0:	andeq	r2, r1, ip, ror lr
   12cf4:	andeq	r2, r1, ip, ror lr
   12cf8:	andeq	r2, r1, ip, ror lr
   12cfc:	andeq	r2, r1, ip, ror lr
   12d00:	andeq	r2, r1, ip, ror lr
   12d04:	andeq	r2, r1, ip, ror lr
   12d08:	andeq	r2, r1, ip, ror lr
   12d0c:	andeq	r2, r1, ip, ror lr
   12d10:	andeq	r2, r1, ip, ror lr
   12d14:	andeq	r2, r1, r8, ror lr
   12d18:	andeq	r2, r1, r4, asr #27
   12d1c:	andeq	r2, r1, ip, ror lr
   12d20:	andeq	r2, r1, ip, ror lr
   12d24:	andeq	r2, r1, ip, ror lr
   12d28:	andeq	r2, r1, r0, lsl lr
   12d2c:	andeq	r2, r1, ip, ror lr
   12d30:	andeq	r2, r1, ip, ror lr
   12d34:	andeq	r2, r1, ip, ror lr
   12d38:	andeq	r2, r1, ip, ror lr
   12d3c:	andeq	r2, r1, ip, ror lr
   12d40:	andeq	r2, r1, ip, ror lr
   12d44:	andeq	r2, r1, ip, ror lr
   12d48:	andeq	r2, r1, ip, asr #27
   12d4c:	andeq	r2, r1, ip, ror lr
   12d50:	andeq	r2, r1, ip, ror lr
   12d54:	andeq	r2, r1, ip, ror lr
   12d58:			; <UNDEFINED> instruction: 0x00012dbc
   12d5c:	andeq	r2, r1, ip, ror lr
   12d60:	andeq	r2, r1, r8, ror #28
   12d64:	andeq	r2, r1, ip, ror lr
   12d68:	andeq	r2, r1, r0, ror lr
   12d6c:	add	sl, r6, #2
   12d70:	sub	r0, r0, #48	; 0x30
   12d74:	ldrb	r1, [r7, sl]
   12d78:	sub	r1, r1, #48	; 0x30
   12d7c:	cmp	r1, #7
   12d80:	bhi	12db4 <__assert_fail@plt+0x1d14>
   12d84:	uxtb	r0, r0
   12d88:	add	r6, r6, #3
   12d8c:	add	r4, r1, r0, lsl #3
   12d90:	ldrb	r0, [r7, r6]
   12d94:	sub	r0, r0, #48	; 0x30
   12d98:	cmp	r0, #7
   12d9c:	bhi	12e58 <__assert_fail@plt+0x1db8>
   12da0:	uxtb	r1, r4
   12da4:	add	r0, r0, r1, lsl #3
   12da8:	cmp	r0, #255	; 0xff
   12dac:	bgt	12e18 <__assert_fail@plt+0x1d78>
   12db0:	mov	r6, sl
   12db4:	ldr	sl, [fp, #-56]	; 0xffffffc8
   12db8:	b	12e7c <__assert_fail@plt+0x1ddc>
   12dbc:	mov	r0, #13
   12dc0:	b	12e7c <__assert_fail@plt+0x1ddc>
   12dc4:	mov	r0, #8
   12dc8:	b	12e7c <__assert_fail@plt+0x1ddc>
   12dcc:	mov	r0, #10
   12dd0:	b	12e7c <__assert_fail@plt+0x1ddc>
   12dd4:	movw	r1, #36009	; 0x8ca9
   12dd8:	mov	r0, #0
   12ddc:	mov	r2, #5
   12de0:	movt	r1, #1
   12de4:	bl	10ed8 <dcgettext@plt>
   12de8:	mov	r2, r0
   12dec:	mov	r0, #0
   12df0:	mov	r1, #0
   12df4:	bl	10f44 <error@plt>
   12df8:	ldr	ip, [fp, #-48]	; 0xffffffd0
   12dfc:	mov	r0, #0
   12e00:	sub	r6, r6, #1
   12e04:	strb	r0, [ip, r9]
   12e08:	mov	r0, #92	; 0x5c
   12e0c:	b	12e7c <__assert_fail@plt+0x1ddc>
   12e10:	mov	r0, #12
   12e14:	b	12e7c <__assert_fail@plt+0x1ddc>
   12e18:	movw	r1, #35909	; 0x8c45
   12e1c:	mov	r0, #0
   12e20:	mov	r2, #5
   12e24:	movt	r1, #1
   12e28:	bl	10ed8 <dcgettext@plt>
   12e2c:	mov	r2, r0
   12e30:	ldrb	r0, [r7, sl]
   12e34:	ldrb	r1, [r7, r6]
   12e38:	ldrb	r3, [r7, r5]
   12e3c:	stm	sp, {r0, r1, r3}
   12e40:	str	r0, [sp, #12]
   12e44:	str	r1, [sp, #16]
   12e48:	mov	r0, #0
   12e4c:	mov	r1, #0
   12e50:	bl	10f44 <error@plt>
   12e54:	ldr	ip, [fp, #-48]	; 0xffffffd0
   12e58:	ldr	sl, [fp, #-56]	; 0xffffffc8
   12e5c:	mov	r6, r5
   12e60:	mov	r0, r4
   12e64:	b	12e7c <__assert_fail@plt+0x1ddc>
   12e68:	mov	r0, #9
   12e6c:	b	12e7c <__assert_fail@plt+0x1ddc>
   12e70:	mov	r0, #11
   12e74:	b	12e7c <__assert_fail@plt+0x1ddc>
   12e78:	mov	r0, #7
   12e7c:	add	r6, r6, #1
   12e80:	b	12b5c <__assert_fail@plt+0x1abc>
   12e84:	mov	r8, #0
   12e88:	cmp	r9, #3
   12e8c:	bcc	1334c <__assert_fail@plt+0x22ac>
   12e90:	mvn	r0, #2
   12e94:	add	r1, sl, #1
   12e98:	mov	r7, #0
   12e9c:	mov	r6, #2
   12ea0:	mov	r8, #0
   12ea4:	sub	r0, r0, sl
   12ea8:	str	r1, [sp, #60]	; 0x3c
   12eac:	str	r0, [sp, #28]
   12eb0:	add	r0, ip, #3
   12eb4:	str	r0, [sp, #40]	; 0x28
   12eb8:	add	r0, sl, #3
   12ebc:	str	r0, [sp, #36]	; 0x24
   12ec0:	add	r0, ip, #1
   12ec4:	str	r0, [sp, #56]	; 0x38
   12ec8:	sub	r0, r9, #1
   12ecc:	str	r0, [fp, #-44]	; 0xffffffd4
   12ed0:	add	r0, sl, #2
   12ed4:	str	r0, [sp, #32]
   12ed8:	b	12ef0 <__assert_fail@plt+0x1e50>
   12edc:	ldr	ip, [fp, #-48]	; 0xffffffd0
   12ee0:	ldr	r1, [sp, #60]	; 0x3c
   12ee4:	add	r6, r8, #2
   12ee8:	cmp	r6, r9
   12eec:	bcs	1334c <__assert_fail@plt+0x22ac>
   12ef0:	ldrb	r5, [sl, r8]
   12ef4:	cmp	r5, #91	; 0x5b
   12ef8:	bne	13160 <__assert_fail@plt+0x20c0>
   12efc:	ldrb	r0, [ip, r8]
   12f00:	cmp	r0, #0
   12f04:	bne	13160 <__assert_fail@plt+0x20c0>
   12f08:	add	r0, r8, #1
   12f0c:	ldrb	sl, [sl, r0]
   12f10:	cmp	sl, #61	; 0x3d
   12f14:	cmpne	sl, #58	; 0x3a
   12f18:	bne	130e4 <__assert_fail@plt+0x2044>
   12f1c:	ldrb	r0, [ip, r0]
   12f20:	cmp	r0, #0
   12f24:	bne	130e4 <__assert_fail@plt+0x2044>
   12f28:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12f2c:	cmp	r0, r6
   12f30:	bls	130e4 <__assert_fail@plt+0x2044>
   12f34:	mov	r7, r6
   12f38:	b	12f4c <__assert_fail@plt+0x1eac>
   12f3c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12f40:	add	r7, r7, #1
   12f44:	cmp	r0, r7
   12f48:	beq	130e4 <__assert_fail@plt+0x2044>
   12f4c:	add	r0, r1, r7
   12f50:	ldrb	r0, [r0, #-1]
   12f54:	cmp	r0, sl
   12f58:	bne	12f3c <__assert_fail@plt+0x1e9c>
   12f5c:	ldrb	r0, [r1, r7]
   12f60:	cmp	r0, #93	; 0x5d
   12f64:	bne	12f3c <__assert_fail@plt+0x1e9c>
   12f68:	ldr	r0, [sp, #56]	; 0x38
   12f6c:	add	r0, r0, r7
   12f70:	ldrb	r0, [r0, #-1]
   12f74:	cmp	r0, #0
   12f78:	bne	12f3c <__assert_fail@plt+0x1e9c>
   12f7c:	ldr	r0, [sp, #56]	; 0x38
   12f80:	ldrb	r0, [r0, r7]
   12f84:	cmp	r0, #0
   12f88:	bne	12f3c <__assert_fail@plt+0x1e9c>
   12f8c:	mvn	r0, #2
   12f90:	sub	r0, r0, r8
   12f94:	add	r0, r0, r7
   12f98:	adds	r1, r0, #1
   12f9c:	str	r1, [sp, #44]	; 0x2c
   12fa0:	beq	13534 <__assert_fail@plt+0x2494>
   12fa4:	ldr	r1, [sp, #32]
   12fa8:	cmp	sl, #58	; 0x3a
   12fac:	add	r1, r1, r8
   12fb0:	str	r1, [sp, #48]	; 0x30
   12fb4:	bne	13080 <__assert_fail@plt+0x1fe0>
   12fb8:	add	r0, r0, #3
   12fbc:	mov	r4, #0
   12fc0:	str	r0, [sp, #24]
   12fc4:	b	12fd4 <__assert_fail@plt+0x1f34>
   12fc8:	add	r4, r4, #1
   12fcc:	cmp	r4, #12
   12fd0:	beq	1301c <__assert_fail@plt+0x1f7c>
   12fd4:	movw	r0, #38144	; 0x9500
   12fd8:	ldr	r2, [sp, #44]	; 0x2c
   12fdc:	movt	r0, #1
   12fe0:	ldr	r1, [r0, r4, lsl #2]
   12fe4:	ldr	r0, [sp, #48]	; 0x30
   12fe8:	str	r1, [sp, #52]	; 0x34
   12fec:	bl	1107c <strncmp@plt>
   12ff0:	cmp	r0, #0
   12ff4:	bne	12fc8 <__assert_fail@plt+0x1f28>
   12ff8:	ldr	r0, [sp, #52]	; 0x34
   12ffc:	bl	10fc8 <strlen@plt>
   13000:	ldr	r1, [sp, #24]
   13004:	sub	r0, r1, r0
   13008:	cmp	r0, #2
   1300c:	bne	12fc8 <__assert_fail@plt+0x1f28>
   13010:	movw	r0, #9999	; 0x270f
   13014:	cmp	r4, r0
   13018:	bne	13314 <__assert_fail@plt+0x2274>
   1301c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13020:	ldr	ip, [fp, #-48]	; 0xffffffd0
   13024:	ldrb	r0, [r0, r6]
   13028:	cmp	r0, #42	; 0x2a
   1302c:	ldrbeq	r0, [ip, r6]
   13030:	cmpeq	r0, #0
   13034:	bne	13498 <__assert_fail@plt+0x23f8>
   13038:	add	r2, r6, #1
   1303c:	cmp	r2, r9
   13040:	bcs	13498 <__assert_fail@plt+0x23f8>
   13044:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13048:	mov	r0, r2
   1304c:	ldrb	r1, [r1, r2]
   13050:	sub	r2, r1, #48	; 0x30
   13054:	cmp	r2, #9
   13058:	bhi	1306c <__assert_fail@plt+0x1fcc>
   1305c:	ldrb	r3, [ip, r0]
   13060:	add	r2, r0, #1
   13064:	cmp	r3, #0
   13068:	beq	1303c <__assert_fail@plt+0x1f9c>
   1306c:	cmp	r1, #93	; 0x5d
   13070:	ldrbeq	r0, [ip, r0]
   13074:	cmpeq	r0, #0
   13078:	beq	130e4 <__assert_fail@plt+0x2044>
   1307c:	b	13498 <__assert_fail@plt+0x23f8>
   13080:	cmp	r0, #0
   13084:	beq	132dc <__assert_fail@plt+0x223c>
   13088:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1308c:	ldrb	r0, [r0, r6]
   13090:	cmp	r0, #42	; 0x2a
   13094:	ldrbeq	r0, [ip, r6]
   13098:	cmpeq	r0, #0
   1309c:	bne	134e4 <__assert_fail@plt+0x2444>
   130a0:	add	r2, r6, #1
   130a4:	cmp	r2, r9
   130a8:	bcs	134e4 <__assert_fail@plt+0x2444>
   130ac:	ldr	r1, [fp, #-56]	; 0xffffffc8
   130b0:	mov	r0, r2
   130b4:	ldrb	r1, [r1, r2]
   130b8:	sub	r2, r1, #48	; 0x30
   130bc:	cmp	r2, #9
   130c0:	bhi	130d4 <__assert_fail@plt+0x2034>
   130c4:	ldrb	r3, [ip, r0]
   130c8:	add	r2, r0, #1
   130cc:	cmp	r3, #0
   130d0:	beq	130a4 <__assert_fail@plt+0x2004>
   130d4:	cmp	r1, #93	; 0x5d
   130d8:	ldrbeq	r0, [ip, r0]
   130dc:	cmpeq	r0, #0
   130e0:	bne	134e4 <__assert_fail@plt+0x2444>
   130e4:	add	r0, r8, #2
   130e8:	cmp	r0, r9
   130ec:	bcs	135b8 <__assert_fail@plt+0x2518>
   130f0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   130f4:	ldrb	r1, [r1, r0]
   130f8:	cmp	r1, #42	; 0x2a
   130fc:	bne	13158 <__assert_fail@plt+0x20b8>
   13100:	ldrb	r0, [ip, r0]
   13104:	cmp	r0, #0
   13108:	bne	13158 <__assert_fail@plt+0x20b8>
   1310c:	add	r4, r8, #3
   13110:	cmp	r4, r9
   13114:	bcs	13158 <__assert_fail@plt+0x20b8>
   13118:	ldr	r1, [sp, #40]	; 0x28
   1311c:	ldr	r2, [sp, #36]	; 0x24
   13120:	sub	r3, r9, r8
   13124:	mov	r7, #0
   13128:	sub	r3, r3, #3
   1312c:	add	r1, r1, r8
   13130:	add	r2, r2, r8
   13134:	ldrb	r6, [r1, r7]
   13138:	cmp	r6, #0
   1313c:	bne	13158 <__assert_fail@plt+0x20b8>
   13140:	ldrb	r6, [r2, r7]
   13144:	cmp	r6, #93	; 0x5d
   13148:	beq	131fc <__assert_fail@plt+0x215c>
   1314c:	add	r7, r7, #1
   13150:	cmp	r3, r7
   13154:	bne	13134 <__assert_fail@plt+0x2094>
   13158:	ldr	sl, [fp, #-56]	; 0xffffffc8
   1315c:	mov	r7, #0
   13160:	add	r4, r8, #1
   13164:	ldrb	r0, [sl, r4]
   13168:	cmp	r0, #45	; 0x2d
   1316c:	bne	1317c <__assert_fail@plt+0x20dc>
   13170:	ldrb	r0, [ip, r4]
   13174:	cmp	r0, #0
   13178:	beq	131b0 <__assert_fail@plt+0x2110>
   1317c:	mov	r0, #24
   13180:	bl	16708 <__assert_fail@plt+0x5668>
   13184:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13188:	strb	r5, [r0, #8]
   1318c:	str	r7, [r0]
   13190:	str	r7, [r0, #4]
   13194:	ldr	r1, [r2, #4]
   13198:	cmp	r1, #0
   1319c:	beq	13598 <__assert_fail@plt+0x24f8>
   131a0:	mov	r8, r4
   131a4:	str	r0, [r1, #4]
   131a8:	str	r0, [r2, #4]
   131ac:	b	12edc <__assert_fail@plt+0x1e3c>
   131b0:	add	r0, r8, sl
   131b4:	ldr	r4, [fp, #-52]	; 0xffffffcc
   131b8:	ldrb	r7, [r0, #2]
   131bc:	cmp	r7, r5
   131c0:	bcc	133b4 <__assert_fail@plt+0x2314>
   131c4:	mov	r0, #24
   131c8:	bl	16708 <__assert_fail@plt+0x5668>
   131cc:	mov	r1, #1
   131d0:	strb	r7, [r0, #9]
   131d4:	strb	r5, [r0, #8]
   131d8:	mov	r7, #0
   131dc:	stm	r0, {r1, r7}
   131e0:	ldr	r1, [r4, #4]
   131e4:	cmp	r1, #0
   131e8:	beq	135d8 <__assert_fail@plt+0x2538>
   131ec:	str	r0, [r1, #4]
   131f0:	str	r0, [r4, #4]
   131f4:	add	r8, r8, #3
   131f8:	b	12edc <__assert_fail@plt+0x1e3c>
   131fc:	cmp	r7, #0
   13200:	beq	1326c <__assert_fail@plt+0x21cc>
   13204:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13208:	mov	r1, #0
   1320c:	sub	r3, fp, #40	; 0x28
   13210:	str	r1, [sp]
   13214:	sub	r1, fp, #32
   13218:	ldrb	r2, [r0, r4]!
   1321c:	str	r0, [sp, #52]	; 0x34
   13220:	cmp	r2, #48	; 0x30
   13224:	mov	r2, #10
   13228:	movweq	r2, #8
   1322c:	bl	16c88 <__assert_fail@plt+0x5be8>
   13230:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13234:	cmp	r0, #0
   13238:	bne	1354c <__assert_fail@plt+0x24ac>
   1323c:	ldr	r4, [fp, #-40]	; 0xffffffd8
   13240:	ldr	r5, [fp, #-36]	; 0xffffffdc
   13244:	and	r0, r4, r5
   13248:	cmn	r0, #1
   1324c:	beq	1354c <__assert_fail@plt+0x24ac>
   13250:	ldr	r0, [sp, #28]
   13254:	ldr	r1, [fp, #-32]	; 0xffffffe0
   13258:	sub	r0, r0, r8
   1325c:	add	r0, r1, r0
   13260:	cmp	r0, r7
   13264:	beq	13280 <__assert_fail@plt+0x21e0>
   13268:	b	1354c <__assert_fail@plt+0x24ac>
   1326c:	ldr	r6, [fp, #-52]	; 0xffffffcc
   13270:	mov	r4, #0
   13274:	mov	r5, #0
   13278:	str	r4, [fp, #-36]	; 0xffffffdc
   1327c:	str	r4, [fp, #-40]	; 0xffffffd8
   13280:	mov	r0, #24
   13284:	bl	16708 <__assert_fail@plt+0x5668>
   13288:	mov	r1, #0
   1328c:	mov	r2, #4
   13290:	strd	r4, [r0, #16]
   13294:	strb	sl, [r0, #8]
   13298:	str	r2, [r0]
   1329c:	str	r1, [r0, #4]
   132a0:	ldr	r1, [r6, #4]
   132a4:	cmp	r1, #0
   132a8:	beq	13638 <__assert_fail@plt+0x2598>
   132ac:	str	r0, [r1, #4]
   132b0:	str	r0, [r6, #4]
   132b4:	add	r0, r8, r7
   132b8:	add	r8, r0, #4
   132bc:	ldr	sl, [fp, #-56]	; 0xffffffc8
   132c0:	ldr	ip, [fp, #-48]	; 0xffffffd0
   132c4:	ldr	r1, [sp, #60]	; 0x3c
   132c8:	add	r6, r8, #2
   132cc:	mov	r7, #0
   132d0:	cmp	r6, r9
   132d4:	bcc	12ef0 <__assert_fail@plt+0x1e50>
   132d8:	b	1334c <__assert_fail@plt+0x22ac>
   132dc:	mov	r0, #24
   132e0:	bl	16708 <__assert_fail@plt+0x5668>
   132e4:	mov	r2, #3
   132e8:	mov	r1, #0
   132ec:	str	r2, [r0]
   132f0:	str	r1, [r0, #4]
   132f4:	ldr	r1, [sp, #48]	; 0x30
   132f8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   132fc:	ldrb	r1, [r1]
   13300:	strb	r1, [r0, #8]
   13304:	ldr	r1, [r2, #4]
   13308:	cmp	r1, #0
   1330c:	bne	1333c <__assert_fail@plt+0x229c>
   13310:	b	135f8 <__assert_fail@plt+0x2558>
   13314:	mov	r0, #24
   13318:	bl	16708 <__assert_fail@plt+0x5668>
   1331c:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13320:	mov	r1, #2
   13324:	str	r1, [r0]
   13328:	mov	r1, #0
   1332c:	stmib	r0, {r1, r4}
   13330:	ldr	r1, [r2, #4]
   13334:	cmp	r1, #0
   13338:	beq	13618 <__assert_fail@plt+0x2578>
   1333c:	add	r8, r7, #2
   13340:	str	r0, [r1, #4]
   13344:	str	r0, [r2, #4]
   13348:	b	132bc <__assert_fail@plt+0x221c>
   1334c:	mov	r7, #1
   13350:	cmp	r8, r9
   13354:	bcs	13398 <__assert_fail@plt+0x22f8>
   13358:	ldr	r6, [fp, #-52]	; 0xffffffcc
   1335c:	mov	r4, #0
   13360:	ldrb	r5, [sl, r8]
   13364:	mov	r0, #24
   13368:	bl	16708 <__assert_fail@plt+0x5668>
   1336c:	strb	r5, [r0, #8]
   13370:	str	r4, [r0]
   13374:	str	r4, [r0, #4]
   13378:	ldr	r1, [r6, #4]
   1337c:	cmp	r1, #0
   13380:	beq	13598 <__assert_fail@plt+0x24f8>
   13384:	add	r8, r8, #1
   13388:	str	r0, [r1, #4]
   1338c:	str	r0, [r6, #4]
   13390:	cmp	r9, r8
   13394:	bne	13360 <__assert_fail@plt+0x22c0>
   13398:	mov	r0, sl
   1339c:	bl	14224 <__assert_fail@plt+0x3184>
   133a0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   133a4:	bl	14224 <__assert_fail@plt+0x3184>
   133a8:	mov	r0, r7
   133ac:	sub	sp, fp, #28
   133b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133b4:	mov	r0, #5
   133b8:	bl	16708 <__assert_fail@plt+0x5668>
   133bc:	mov	r8, r0
   133c0:	bl	10fa4 <__ctype_b_loc@plt>
   133c4:	mov	r9, r0
   133c8:	ldr	r0, [r0]
   133cc:	add	r0, r0, r5, lsl #1
   133d0:	ldrb	r0, [r0, #1]
   133d4:	tst	r0, #64	; 0x40
   133d8:	bne	133fc <__assert_fail@plt+0x235c>
   133dc:	movw	r3, #36404	; 0x8e34
   133e0:	mov	r0, r8
   133e4:	mov	r1, #1
   133e8:	mov	r2, #5
   133ec:	str	r5, [sp]
   133f0:	movt	r3, #1
   133f4:	bl	10fec <__sprintf_chk@plt>
   133f8:	b	13408 <__assert_fail@plt+0x2368>
   133fc:	mov	r0, #0
   13400:	strb	r0, [r8, #1]
   13404:	strb	r5, [r8]
   13408:	mov	r0, #5
   1340c:	bl	16708 <__assert_fail@plt+0x5668>
   13410:	mov	r6, r0
   13414:	ldr	r0, [r9]
   13418:	add	r0, r0, r7, lsl #1
   1341c:	ldrb	r0, [r0, #1]
   13420:	tst	r0, #64	; 0x40
   13424:	bne	13448 <__assert_fail@plt+0x23a8>
   13428:	movw	r3, #36404	; 0x8e34
   1342c:	mov	r0, r6
   13430:	mov	r1, #1
   13434:	mov	r2, #5
   13438:	str	r7, [sp]
   1343c:	movt	r3, #1
   13440:	bl	10fec <__sprintf_chk@plt>
   13444:	b	13454 <__assert_fail@plt+0x23b4>
   13448:	mov	r0, #0
   1344c:	strb	r0, [r6, #1]
   13450:	strb	r7, [r6]
   13454:	movw	r1, #36707	; 0x8f63
   13458:	mov	r0, #0
   1345c:	mov	r2, #5
   13460:	mov	r7, #0
   13464:	movt	r1, #1
   13468:	bl	10ed8 <dcgettext@plt>
   1346c:	mov	r2, r0
   13470:	mov	r0, #0
   13474:	mov	r1, #0
   13478:	mov	r3, r8
   1347c:	str	r6, [sp]
   13480:	bl	10f44 <error@plt>
   13484:	mov	r0, r8
   13488:	bl	14224 <__assert_fail@plt+0x3184>
   1348c:	mov	r0, r6
   13490:	bl	14224 <__assert_fail@plt+0x3184>
   13494:	b	13398 <__assert_fail@plt+0x22f8>
   13498:	sub	r0, r7, r8
   1349c:	sub	r1, r0, #2
   134a0:	ldr	r0, [sp, #48]	; 0x30
   134a4:	bl	13c98 <__assert_fail@plt+0x2bf8>
   134a8:	movw	r1, #36153	; 0x8d39
   134ac:	mov	r6, r0
   134b0:	mov	r7, #0
   134b4:	movt	r1, #1
   134b8:	mov	r0, #0
   134bc:	mov	r2, #5
   134c0:	bl	10ed8 <dcgettext@plt>
   134c4:	mov	r8, r0
   134c8:	mov	r0, r6
   134cc:	bl	15ea0 <__assert_fail@plt+0x4e00>
   134d0:	mov	r3, r0
   134d4:	mov	r0, #0
   134d8:	mov	r1, #0
   134dc:	mov	r2, r8
   134e0:	b	13520 <__assert_fail@plt+0x2480>
   134e4:	sub	r0, r7, r8
   134e8:	sub	r1, r0, #2
   134ec:	ldr	r0, [sp, #48]	; 0x30
   134f0:	bl	13c98 <__assert_fail@plt+0x2bf8>
   134f4:	movw	r1, #36180	; 0x8d54
   134f8:	mov	r6, r0
   134fc:	mov	r0, #0
   13500:	mov	r2, #5
   13504:	mov	r7, #0
   13508:	movt	r1, #1
   1350c:	bl	10ed8 <dcgettext@plt>
   13510:	mov	r2, r0
   13514:	mov	r0, #0
   13518:	mov	r1, #0
   1351c:	mov	r3, r6
   13520:	bl	10f44 <error@plt>
   13524:	mov	r0, r6
   13528:	bl	14224 <__assert_fail@plt+0x3184>
   1352c:	ldr	sl, [fp, #-56]	; 0xffffffc8
   13530:	b	13398 <__assert_fail@plt+0x22f8>
   13534:	mov	r7, #0
   13538:	cmp	sl, #58	; 0x3a
   1353c:	bne	1356c <__assert_fail@plt+0x24cc>
   13540:	movw	r1, #36074	; 0x8cea
   13544:	movt	r1, #1
   13548:	b	13574 <__assert_fail@plt+0x24d4>
   1354c:	ldr	r0, [sp, #52]	; 0x34
   13550:	mov	r1, r7
   13554:	bl	13c98 <__assert_fail@plt+0x2bf8>
   13558:	movw	r1, #36596	; 0x8ef4
   1355c:	mov	r6, r0
   13560:	mov	r7, #0
   13564:	movt	r1, #1
   13568:	b	134b8 <__assert_fail@plt+0x2418>
   1356c:	movw	r1, #36110	; 0x8d0e
   13570:	movt	r1, #1
   13574:	mov	r0, #0
   13578:	mov	r2, #5
   1357c:	bl	10ed8 <dcgettext@plt>
   13580:	mov	r2, r0
   13584:	mov	r0, #0
   13588:	mov	r1, #0
   1358c:	bl	10f44 <error@plt>
   13590:	ldr	sl, [fp, #-56]	; 0xffffffc8
   13594:	b	13398 <__assert_fail@plt+0x22f8>
   13598:	movw	r0, #36237	; 0x8d8d
   1359c:	movw	r1, #35464	; 0x8a88
   135a0:	movw	r3, #36843	; 0x8feb
   135a4:	movw	r2, #649	; 0x289
   135a8:	movt	r0, #1
   135ac:	movt	r1, #1
   135b0:	movt	r3, #1
   135b4:	bl	110a0 <__assert_fail@plt>
   135b8:	movw	r0, #36477	; 0x8e7d
   135bc:	movw	r1, #35464	; 0x8a88
   135c0:	movw	r3, #36501	; 0x8e95
   135c4:	mov	r2, #784	; 0x310
   135c8:	movt	r0, #1
   135cc:	movt	r1, #1
   135d0:	movt	r3, #1
   135d4:	bl	110a0 <__assert_fail@plt>
   135d8:	movw	r0, #36237	; 0x8d8d
   135dc:	movw	r1, #35464	; 0x8a88
   135e0:	movw	r3, #36774	; 0x8fa6
   135e4:	movw	r2, #679	; 0x2a7
   135e8:	movt	r0, #1
   135ec:	movt	r1, #1
   135f0:	movt	r3, #1
   135f4:	bl	110a0 <__assert_fail@plt>
   135f8:	movw	r0, #36237	; 0x8d8d
   135fc:	movw	r1, #35464	; 0x8a88
   13600:	movw	r3, #36410	; 0x8e3a
   13604:	movw	r2, #743	; 0x2e7
   13608:	movt	r0, #1
   1360c:	movt	r1, #1
   13610:	movt	r3, #1
   13614:	bl	110a0 <__assert_fail@plt>
   13618:	movw	r0, #36237	; 0x8d8d
   1361c:	movw	r1, #35464	; 0x8a88
   13620:	movw	r3, #36248	; 0x8d98
   13624:	movw	r2, #701	; 0x2bd
   13628:	movt	r0, #1
   1362c:	movt	r1, #1
   13630:	movt	r3, #1
   13634:	bl	110a0 <__assert_fail@plt>
   13638:	movw	r0, #36237	; 0x8d8d
   1363c:	movw	r1, #35464	; 0x8a88
   13640:	movw	r3, #36639	; 0x8f1f
   13644:	movw	r2, #721	; 0x2d1
   13648:	movt	r0, #1
   1364c:	movt	r1, #1
   13650:	movt	r3, #1
   13654:	bl	110a0 <__assert_fail@plt>
   13658:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1365c:	add	fp, sp, #28
   13660:	sub	sp, sp, #4
   13664:	movw	r5, #41600	; 0xa280
   13668:	movw	sl, #41344	; 0xa180
   1366c:	mov	r8, r0
   13670:	mvn	r7, #-2147483648	; 0x80000000
   13674:	mov	r6, #0
   13678:	mov	r0, #0
   1367c:	movt	r5, #2
   13680:	movt	sl, #2
   13684:	cmp	r0, r6
   13688:	bcc	136c4 <__assert_fail@plt+0x2624>
   1368c:	b	136a8 <__assert_fail@plt+0x2608>
   13690:	mov	r0, r4
   13694:	cmp	r1, #0
   13698:	mvnne	r9, #-2147483648	; 0x80000000
   1369c:	mov	r7, r9
   136a0:	cmp	r0, r6
   136a4:	bcc	136c4 <__assert_fail@plt+0x2624>
   136a8:	mov	r0, r5
   136ac:	mov	r1, #8192	; 0x2000
   136b0:	blx	r8
   136b4:	cmp	r0, #0
   136b8:	beq	137fc <__assert_fail@plt+0x275c>
   136bc:	mov	r6, r0
   136c0:	mov	r0, #0
   136c4:	cmn	r7, #-2147483647	; 0x80000001
   136c8:	bne	13750 <__assert_fail@plt+0x26b0>
   136cc:	cmp	r6, r0
   136d0:	mov	r4, r0
   136d4:	bls	136f8 <__assert_fail@plt+0x2658>
   136d8:	mov	r4, r0
   136dc:	ldrb	r1, [r5, r4]
   136e0:	ldrb	r1, [sl, r1]
   136e4:	cmp	r1, #0
   136e8:	bne	136f8 <__assert_fail@plt+0x2658>
   136ec:	add	r4, r4, #2
   136f0:	cmp	r4, r6
   136f4:	bcc	136dc <__assert_fail@plt+0x263c>
   136f8:	cmp	r4, r6
   136fc:	bne	13714 <__assert_fail@plt+0x2674>
   13700:	sub	r4, r6, #1
   13704:	ldrb	r1, [r5, r4]
   13708:	ldrb	r1, [sl, r1]
   1370c:	cmp	r1, #0
   13710:	moveq	r4, r6
   13714:	cmp	r4, r6
   13718:	bcs	1375c <__assert_fail@plt+0x26bc>
   1371c:	ldrb	r9, [r5, r4]
   13720:	sub	r1, r4, r0
   13724:	cmp	r4, #0
   13728:	add	r7, r1, #1
   1372c:	beq	13740 <__assert_fail@plt+0x26a0>
   13730:	add	r2, r4, r5
   13734:	ldrb	r2, [r2, #-1]
   13738:	cmp	r2, r9
   1373c:	moveq	r7, r1
   13740:	add	r4, r4, #1
   13744:	cmp	r7, #0
   13748:	bne	1376c <__assert_fail@plt+0x26cc>
   1374c:	b	13790 <__assert_fail@plt+0x26f0>
   13750:	mov	r9, r7
   13754:	mov	r4, r0
   13758:	b	137a0 <__assert_fail@plt+0x2700>
   1375c:	sub	r7, r6, r0
   13760:	mvn	r9, #-2147483648	; 0x80000000
   13764:	cmp	r7, #0
   13768:	beq	13790 <__assert_fail@plt+0x26f0>
   1376c:	movw	r1, #41308	; 0xa15c
   13770:	add	r0, r5, r0
   13774:	mov	r2, r7
   13778:	movt	r1, #2
   1377c:	ldr	r3, [r1]
   13780:	mov	r1, #1
   13784:	bl	10ec0 <fwrite_unlocked@plt>
   13788:	cmp	r0, r7
   1378c:	bne	13804 <__assert_fail@plt+0x2764>
   13790:	cmn	r9, #-2147483647	; 0x80000001
   13794:	mov	r0, r4
   13798:	mvn	r7, #-2147483648	; 0x80000000
   1379c:	beq	136a0 <__assert_fail@plt+0x2600>
   137a0:	cmp	r4, r6
   137a4:	mov	r0, r4
   137a8:	mov	r7, r9
   137ac:	bcs	136a0 <__assert_fail@plt+0x2600>
   137b0:	ldrb	r0, [r5, r4]
   137b4:	mov	r1, #1
   137b8:	cmp	r9, r0
   137bc:	bne	13690 <__assert_fail@plt+0x25f0>
   137c0:	add	r0, r4, #1
   137c4:	mov	r1, r0
   137c8:	cmp	r6, r0
   137cc:	beq	137e8 <__assert_fail@plt+0x2748>
   137d0:	ldrb	r2, [r5, r1]
   137d4:	add	r0, r1, #1
   137d8:	cmp	r9, r2
   137dc:	beq	137c4 <__assert_fail@plt+0x2724>
   137e0:	sub	r0, r0, #1
   137e4:	b	137ec <__assert_fail@plt+0x274c>
   137e8:	mov	r0, r6
   137ec:	cmp	r1, r6
   137f0:	mov	r1, #0
   137f4:	movwcc	r1, #1
   137f8:	b	13694 <__assert_fail@plt+0x25f4>
   137fc:	sub	sp, fp, #28
   13800:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13804:	bl	10fe0 <__errno_location@plt>
   13808:	movw	r1, #35426	; 0x8a62
   1380c:	ldr	r4, [r0]
   13810:	mov	r0, #0
   13814:	mov	r2, #5
   13818:	movt	r1, #1
   1381c:	bl	10ed8 <dcgettext@plt>
   13820:	mov	r2, r0
   13824:	mov	r0, #1
   13828:	mov	r1, r4
   1382c:	bl	10f44 <error@plt>
   13830:	push	{r4, sl, fp, lr}
   13834:	add	fp, sp, #8
   13838:	mov	r2, r1
   1383c:	mov	r1, r0
   13840:	mov	r0, #0
   13844:	bl	15fec <__assert_fail@plt+0x4f4c>
   13848:	cmn	r0, #1
   1384c:	popne	{r4, sl, fp, pc}
   13850:	bl	10fe0 <__errno_location@plt>
   13854:	movw	r1, #37838	; 0x93ce
   13858:	ldr	r4, [r0]
   1385c:	mov	r0, #0
   13860:	mov	r2, #5
   13864:	movt	r1, #1
   13868:	bl	10ed8 <dcgettext@plt>
   1386c:	mov	r2, r0
   13870:	mov	r0, #1
   13874:	mov	r1, r4
   13878:	bl	10f44 <error@plt>
   1387c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13880:	add	fp, sp, #24
   13884:	movw	r7, #49792	; 0xc280
   13888:	mov	r4, r1
   1388c:	mov	r5, r0
   13890:	add	r8, r0, #1
   13894:	movt	r7, #2
   13898:	mov	r0, #0
   1389c:	mov	r1, r5
   138a0:	mov	r2, r4
   138a4:	bl	15fec <__assert_fail@plt+0x4f4c>
   138a8:	mov	r1, r0
   138ac:	cmp	r0, #0
   138b0:	beq	13924 <__assert_fail@plt+0x2884>
   138b4:	cmn	r1, #1
   138b8:	beq	1392c <__assert_fail@plt+0x288c>
   138bc:	mov	r0, #0
   138c0:	ldrb	r2, [r5, r0]
   138c4:	ldrb	r2, [r7, r2]
   138c8:	cmp	r2, #0
   138cc:	bne	138e0 <__assert_fail@plt+0x2840>
   138d0:	add	r0, r0, #1
   138d4:	cmp	r1, r0
   138d8:	bne	138c0 <__assert_fail@plt+0x2820>
   138dc:	mov	r0, r1
   138e0:	add	r2, r0, #1
   138e4:	cmp	r2, r1
   138e8:	bcs	13918 <__assert_fail@plt+0x2878>
   138ec:	mvn	r3, r0
   138f0:	add	r2, r8, r0
   138f4:	add	r1, r3, r1
   138f8:	ldrb	r3, [r2]
   138fc:	add	r2, r2, #1
   13900:	ldrb	r6, [r7, r3]
   13904:	cmp	r6, #0
   13908:	strbeq	r3, [r5, r0]
   1390c:	addeq	r0, r0, #1
   13910:	subs	r1, r1, #1
   13914:	bne	138f8 <__assert_fail@plt+0x2858>
   13918:	cmp	r0, #0
   1391c:	beq	13898 <__assert_fail@plt+0x27f8>
   13920:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13924:	mov	r0, r1
   13928:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1392c:	bl	10fe0 <__errno_location@plt>
   13930:	movw	r1, #37838	; 0x93ce
   13934:	ldr	r4, [r0]
   13938:	mov	r0, #0
   1393c:	mov	r2, #5
   13940:	movt	r1, #1
   13944:	bl	10ed8 <dcgettext@plt>
   13948:	mov	r2, r0
   1394c:	mov	r0, #1
   13950:	mov	r1, r4
   13954:	bl	10f44 <error@plt>
   13958:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1395c:	add	fp, sp, #28
   13960:	sub	sp, sp, #4
   13964:	mov	r4, r0
   13968:	add	sl, r0, #8
   1396c:	mvn	r9, #0
   13970:	mov	ip, #2
   13974:	cmp	r1, #0
   13978:	strne	ip, [r1]
   1397c:	subs	r7, r9, #1
   13980:	ldm	sl, {r0, r3}
   13984:	sbc	r6, r9, #0
   13988:	eor	r6, r3, r6
   1398c:	eor	r7, r0, r7
   13990:	orrs	r7, r7, r6
   13994:	bne	139c0 <__assert_fail@plt+0x2920>
   13998:	ldr	r0, [r4]
   1399c:	mvn	r3, #0
   139a0:	ldr	r6, [r0, #4]
   139a4:	mvn	r0, #0
   139a8:	str	r6, [r4, #4]
   139ac:	str	r9, [sl]
   139b0:	str	r9, [sl, #4]
   139b4:	cmp	r6, #0
   139b8:	bne	139cc <__assert_fail@plt+0x292c>
   139bc:	b	13b58 <__assert_fail@plt+0x2ab8>
   139c0:	ldr	r6, [r4, #4]
   139c4:	cmp	r6, #0
   139c8:	beq	13b58 <__assert_fail@plt+0x2ab8>
   139cc:	ldr	r7, [r6]
   139d0:	cmp	r7, #4
   139d4:	bhi	13bbc <__assert_fail@plt+0x2b1c>
   139d8:	add	r5, pc, #0
   139dc:	ldr	pc, [r5, r7, lsl #2]
   139e0:	andeq	r3, r1, ip, lsl sl
   139e4:	andeq	r3, r1, r8, asr sl
   139e8:	andeq	r3, r1, r4, lsr sl
   139ec:	andeq	r3, r1, ip, lsl sl
   139f0:	strdeq	r3, [r1], -r4
   139f4:	mov	r7, r6
   139f8:	ldr	r5, [r7, #16]!
   139fc:	ldr	r2, [r7, #4]
   13a00:	orrs	r2, r5, r2
   13a04:	bne	13b60 <__assert_fail@plt+0x2ac0>
   13a08:	ldr	r0, [r6, #4]
   13a0c:	str	r0, [r4, #4]
   13a10:	str	r9, [sl]
   13a14:	str	r9, [sl, #4]
   13a18:	b	13974 <__assert_fail@plt+0x28d4>
   13a1c:	ldrb	r8, [r6, #8]
   13a20:	str	r9, [sl]
   13a24:	str	r9, [sl, #4]
   13a28:	ldr	r0, [r6, #4]
   13a2c:	str	r0, [r4, #4]
   13a30:	b	13bb0 <__assert_fail@plt+0x2b10>
   13a34:	cmp	r1, #0
   13a38:	beq	13aa0 <__assert_fail@plt+0x2a00>
   13a3c:	ldr	r0, [r6, #8]
   13a40:	cmp	r0, #10
   13a44:	beq	13a98 <__assert_fail@plt+0x29f8>
   13a48:	cmp	r0, #6
   13a4c:	bne	13aa0 <__assert_fail@plt+0x2a00>
   13a50:	mov	r0, #0
   13a54:	b	13a9c <__assert_fail@plt+0x29fc>
   13a58:	eor	r1, r0, r9
   13a5c:	eor	r2, r3, r9
   13a60:	orrs	r1, r1, r2
   13a64:	beq	13a74 <__assert_fail@plt+0x29d4>
   13a68:	adds	r8, r0, #1
   13a6c:	adc	r1, r3, #0
   13a70:	b	13a7c <__assert_fail@plt+0x29dc>
   13a74:	ldrb	r8, [r6, #8]
   13a78:	mov	r1, #0
   13a7c:	str	r8, [sl]
   13a80:	str	r1, [sl, #4]
   13a84:	ldrb	r0, [r6, #9]
   13a88:	eor	r0, r8, r0
   13a8c:	orrs	r0, r0, r1
   13a90:	beq	13ba0 <__assert_fail@plt+0x2b00>
   13a94:	b	13bb0 <__assert_fail@plt+0x2b10>
   13a98:	mov	r0, #1
   13a9c:	str	r0, [r1]
   13aa0:	ldr	r1, [sl, #4]
   13aa4:	ldr	r8, [sl]
   13aa8:	eor	r0, r1, r9
   13aac:	eor	r1, r8, r9
   13ab0:	orrs	r0, r1, r0
   13ab4:	bne	13b0c <__assert_fail@plt+0x2a6c>
   13ab8:	ldr	r5, [r6, #8]
   13abc:	mov	r8, #0
   13ac0:	uxtb	r1, r8
   13ac4:	mov	r0, r5
   13ac8:	bl	14018 <__assert_fail@plt+0x2f78>
   13acc:	cmp	r0, #0
   13ad0:	bne	13b00 <__assert_fail@plt+0x2a60>
   13ad4:	add	r8, r8, #1
   13ad8:	cmp	r8, #256	; 0x100
   13adc:	bne	13ac0 <__assert_fail@plt+0x2a20>
   13ae0:	movw	r0, #37849	; 0x93d9
   13ae4:	movw	r1, #35464	; 0x8a88
   13ae8:	movw	r3, #37861	; 0x93e5
   13aec:	movw	r2, #1079	; 0x437
   13af0:	movt	r0, #1
   13af4:	movt	r1, #1
   13af8:	movt	r3, #1
   13afc:	bl	110a0 <__assert_fail@plt>
   13b00:	mov	r1, #0
   13b04:	str	r8, [sl]
   13b08:	str	r1, [sl, #4]
   13b0c:	ldr	r5, [r6, #8]
   13b10:	uxtb	r1, r8
   13b14:	mov	r0, r5
   13b18:	bl	14018 <__assert_fail@plt+0x2f78>
   13b1c:	cmp	r0, #0
   13b20:	beq	13bc0 <__assert_fail@plt+0x2b20>
   13b24:	mov	r7, r8
   13b28:	add	r7, r7, #1
   13b2c:	cmp	r7, #255	; 0xff
   13b30:	bgt	13ba0 <__assert_fail@plt+0x2b00>
   13b34:	uxtb	r1, r7
   13b38:	mov	r0, r5
   13b3c:	bl	14018 <__assert_fail@plt+0x2f78>
   13b40:	cmp	r0, #0
   13b44:	beq	13b28 <__assert_fail@plt+0x2a88>
   13b48:	asr	r1, r7, #31
   13b4c:	str	r7, [sl]
   13b50:	str	r1, [sl, #4]
   13b54:	b	13bb0 <__assert_fail@plt+0x2b10>
   13b58:	mvn	r8, #0
   13b5c:	b	13bb0 <__assert_fail@plt+0x2b10>
   13b60:	eor	r1, r0, r9
   13b64:	eor	r2, r3, r9
   13b68:	orrs	r1, r1, r2
   13b6c:	moveq	r0, #0
   13b70:	moveq	r3, #0
   13b74:	streq	r0, [sl]
   13b78:	streq	r0, [sl, #4]
   13b7c:	adds	r0, r0, #1
   13b80:	adc	r1, r3, #0
   13b84:	strd	r0, [sl]
   13b88:	ldrd	r2, [r7]
   13b8c:	ldrb	r8, [r6, #8]
   13b90:	eor	r1, r1, r3
   13b94:	eor	r0, r0, r2
   13b98:	orrs	r0, r0, r1
   13b9c:	bne	13bb0 <__assert_fail@plt+0x2b10>
   13ba0:	ldr	r0, [r6, #4]
   13ba4:	str	r0, [r4, #4]
   13ba8:	str	r9, [sl]
   13bac:	str	r9, [sl, #4]
   13bb0:	mov	r0, r8
   13bb4:	sub	sp, fp, #28
   13bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bbc:	bl	11088 <abort@plt>
   13bc0:	movw	r0, #37920	; 0x9420
   13bc4:	movw	r1, #35464	; 0x8a88
   13bc8:	movw	r3, #37861	; 0x93e5
   13bcc:	movw	r2, #1082	; 0x43a
   13bd0:	movt	r0, #1
   13bd4:	b	13af4 <__assert_fail@plt+0x2a54>
   13bd8:	push	{r4, r5, r6, sl, fp, lr}
   13bdc:	add	fp, sp, #16
   13be0:	mov	r6, r0
   13be4:	mov	r2, r1
   13be8:	mov	r0, #0
   13bec:	mov	r1, r6
   13bf0:	bl	15fec <__assert_fail@plt+0x4f4c>
   13bf4:	cmp	r0, #0
   13bf8:	beq	13c68 <__assert_fail@plt+0x2bc8>
   13bfc:	cmn	r0, #1
   13c00:	beq	13c6c <__assert_fail@plt+0x2bcc>
   13c04:	and	ip, r0, #1
   13c08:	mov	r1, #0
   13c0c:	cmp	r0, #1
   13c10:	beq	13c4c <__assert_fail@plt+0x2bac>
   13c14:	movw	r2, #50048	; 0xc380
   13c18:	sub	r3, r0, ip
   13c1c:	mov	r1, #0
   13c20:	movt	r2, #2
   13c24:	mov	r4, r6
   13c28:	ldrb	r5, [r4, r1]!
   13c2c:	add	r1, r1, #2
   13c30:	cmp	r3, r1
   13c34:	ldrb	r5, [r2, r5]
   13c38:	strb	r5, [r4]
   13c3c:	ldrb	r5, [r4, #1]
   13c40:	ldrb	r5, [r2, r5]
   13c44:	strb	r5, [r4, #1]
   13c48:	bne	13c24 <__assert_fail@plt+0x2b84>
   13c4c:	cmp	ip, #0
   13c50:	beq	13c68 <__assert_fail@plt+0x2bc8>
   13c54:	ldrb	r2, [r6, r1]
   13c58:	movw	r3, #50048	; 0xc380
   13c5c:	movt	r3, #2
   13c60:	ldrb	r2, [r3, r2]
   13c64:	strb	r2, [r6, r1]
   13c68:	pop	{r4, r5, r6, sl, fp, pc}
   13c6c:	bl	10fe0 <__errno_location@plt>
   13c70:	movw	r1, #37838	; 0x93ce
   13c74:	ldr	r4, [r0]
   13c78:	mov	r0, #0
   13c7c:	mov	r2, #5
   13c80:	movt	r1, #1
   13c84:	bl	10ed8 <dcgettext@plt>
   13c88:	mov	r2, r0
   13c8c:	mov	r0, #1
   13c90:	mov	r1, r4
   13c94:	bl	10f44 <error@plt>
   13c98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c9c:	add	fp, sp, #28
   13ca0:	sub	sp, sp, #12
   13ca4:	mov	r5, r0
   13ca8:	mov	r4, r1
   13cac:	add	r0, r1, #1
   13cb0:	mov	r1, #4
   13cb4:	bl	167d8 <__assert_fail@plt+0x5738>
   13cb8:	mov	sl, r0
   13cbc:	cmp	r4, #0
   13cc0:	beq	13dcc <__assert_fail@plt+0x2d2c>
   13cc4:	movw	r7, #36381	; 0x8e1d
   13cc8:	add	r9, sp, #7
   13ccc:	mov	r6, sl
   13cd0:	movt	r7, #1
   13cd4:	b	13cf8 <__assert_fail@plt+0x2c58>
   13cd8:	movw	r1, #36401	; 0x8e31
   13cdc:	movt	r1, #1
   13ce0:	mov	r0, r6
   13ce4:	bl	10ecc <stpcpy@plt>
   13ce8:	mov	r6, r0
   13cec:	add	r5, r5, #1
   13cf0:	subs	r4, r4, #1
   13cf4:	beq	13dcc <__assert_fail@plt+0x2d2c>
   13cf8:	ldrb	r8, [r5]
   13cfc:	sub	r0, r8, #7
   13d00:	cmp	r0, #6
   13d04:	bhi	13d38 <__assert_fail@plt+0x2c98>
   13d08:	add	r1, pc, #0
   13d0c:	ldr	pc, [r1, r0, lsl #2]
   13d10:	andeq	r3, r1, ip, lsr #26
   13d14:	andeq	r3, r1, ip, ror sp
   13d18:	andeq	r3, r1, r8, lsl #27
   13d1c:	muleq	r1, r4, sp
   13d20:	ldrdeq	r3, [r1], -r8
   13d24:	andeq	r3, r1, r0, lsr #27
   13d28:	andeq	r3, r1, ip, lsr #27
   13d2c:	movw	r1, #36383	; 0x8e1f
   13d30:	movt	r1, #1
   13d34:	b	13ce0 <__assert_fail@plt+0x2c40>
   13d38:	cmp	r8, #92	; 0x5c
   13d3c:	mov	r1, r7
   13d40:	beq	13ce0 <__assert_fail@plt+0x2c40>
   13d44:	bl	10fa4 <__ctype_b_loc@plt>
   13d48:	ldr	r0, [r0]
   13d4c:	add	r0, r0, r8, lsl #1
   13d50:	ldrb	r0, [r0, #1]
   13d54:	tst	r0, #64	; 0x40
   13d58:	bne	13db8 <__assert_fail@plt+0x2d18>
   13d5c:	movw	r3, #36404	; 0x8e34
   13d60:	mov	r0, r9
   13d64:	mov	r1, #1
   13d68:	mov	r2, #5
   13d6c:	str	r8, [sp]
   13d70:	movt	r3, #1
   13d74:	bl	10fec <__sprintf_chk@plt>
   13d78:	b	13dc4 <__assert_fail@plt+0x2d24>
   13d7c:	movw	r1, #36386	; 0x8e22
   13d80:	movt	r1, #1
   13d84:	b	13ce0 <__assert_fail@plt+0x2c40>
   13d88:	movw	r1, #36398	; 0x8e2e
   13d8c:	movt	r1, #1
   13d90:	b	13ce0 <__assert_fail@plt+0x2c40>
   13d94:	movw	r1, #36392	; 0x8e28
   13d98:	movt	r1, #1
   13d9c:	b	13ce0 <__assert_fail@plt+0x2c40>
   13da0:	movw	r1, #36389	; 0x8e25
   13da4:	movt	r1, #1
   13da8:	b	13ce0 <__assert_fail@plt+0x2c40>
   13dac:	movw	r1, #36395	; 0x8e2b
   13db0:	movt	r1, #1
   13db4:	b	13ce0 <__assert_fail@plt+0x2c40>
   13db8:	mov	r0, #0
   13dbc:	strb	r0, [sp, #8]
   13dc0:	strb	r8, [sp, #7]
   13dc4:	mov	r1, r9
   13dc8:	b	13ce0 <__assert_fail@plt+0x2c40>
   13dcc:	mov	r0, sl
   13dd0:	sub	sp, fp, #28
   13dd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13dd8:	nop	{0}
   13ddc:	nop	{0}
   13de0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13de4:	add	fp, sp, #28
   13de8:	sub	sp, sp, #4
   13dec:	vpush	{d8-d10}
   13df0:	sub	sp, sp, #8
   13df4:	mov	r2, #0
   13df8:	vldr	d8, [pc, #528]	; 14010 <__assert_fail@plt+0x2f70>
   13dfc:	vmov.i32	d9, #2	; 0x00000002
   13e00:	vmov.i32	d10, #4	; 0x00000004
   13e04:	mov	r1, #0
   13e08:	mov	ip, #1
   13e0c:	mov	r8, #0
   13e10:	mov	r6, #0
   13e14:	str	r0, [sp, #4]
   13e18:	strb	r2, [r0, #34]	; 0x22
   13e1c:	str	r2, [r0, #24]
   13e20:	strh	r2, [r0, #32]
   13e24:	str	r1, [sp]
   13e28:	ldr	r7, [r0]
   13e2c:	ldr	r7, [r7, #4]
   13e30:	cmp	r7, #0
   13e34:	beq	13fbc <__assert_fail@plt+0x2f1c>
   13e38:	ldr	r2, [r7]
   13e3c:	cmp	r2, #4
   13e40:	bhi	13fd4 <__assert_fail@plt+0x2f34>
   13e44:	add	r1, pc, #8
   13e48:	mov	r5, #0
   13e4c:	mov	r4, #1
   13e50:	ldr	pc, [r1, r2, lsl #2]
   13e54:	andeq	r3, r1, r0, ror pc
   13e58:	andeq	r3, r1, r8, ror #28
   13e5c:			; <UNDEFINED> instruction: 0x00013eb4
   13e60:	andeq	r3, r1, r4, lsl #30
   13e64:	andeq	r3, r1, r8, lsl #29
   13e68:	ldrb	r2, [r7, #8]
   13e6c:	ldrb	r1, [r7, #9]
   13e70:	cmp	r1, r2
   13e74:	bcc	13fd8 <__assert_fail@plt+0x2f38>
   13e78:	sub	r1, r1, r2
   13e7c:	add	r4, r1, #1
   13e80:	asr	r5, r4, #31
   13e84:	b	13f70 <__assert_fail@plt+0x2ed0>
   13e88:	ldrd	r4, [r7, #16]
   13e8c:	orrs	r1, r4, r5
   13e90:	bne	13f70 <__assert_fail@plt+0x2ed0>
   13e94:	ldr	r1, [sp]
   13e98:	mov	r4, #0
   13e9c:	mov	r5, #0
   13ea0:	add	r1, r1, #1
   13ea4:	str	r1, [sp]
   13ea8:	str	r1, [r0, #24]
   13eac:	str	r7, [r0, #28]
   13eb0:	b	13f70 <__assert_fail@plt+0x2ed0>
   13eb4:	strb	ip, [r0, #33]	; 0x21
   13eb8:	mov	sl, #0
   13ebc:	mov	r4, #0
   13ec0:	mov	r5, #0
   13ec4:	ldr	r9, [r7, #8]
   13ec8:	uxtb	r1, sl
   13ecc:	mov	r0, r9
   13ed0:	bl	14018 <__assert_fail@plt+0x2f78>
   13ed4:	adds	r4, r4, r0
   13ed8:	add	sl, sl, #1
   13edc:	adc	r5, r5, #0
   13ee0:	cmp	sl, #256	; 0x100
   13ee4:	bne	13ec8 <__assert_fail@plt+0x2e28>
   13ee8:	cmp	r9, #6
   13eec:	beq	13f68 <__assert_fail@plt+0x2ec8>
   13ef0:	ldr	r0, [sp, #4]
   13ef4:	cmp	r9, #10
   13ef8:	mov	ip, #1
   13efc:	strbne	ip, [r0, #34]	; 0x22
   13f00:	b	13f70 <__assert_fail@plt+0x2ed0>
   13f04:	ldrb	r1, [r7, #8]
   13f08:	vmov.i32	q8, #0	; 0x00000000
   13f0c:	vorr	d19, d8, d8
   13f10:	mov	r2, #256	; 0x100
   13f14:	vdup.32	d18, r1
   13f18:	vadd.i32	d20, d19, d9
   13f1c:	vceq.i32	d21, d19, d18
   13f20:	add	r1, pc, #216	; 0xd8
   13f24:	vadd.i32	d19, d19, d10
   13f28:	subs	r2, r2, #4
   13f2c:	vld1.64	{d22-d23}, [r1 :128]
   13f30:	vmovl.u32	q12, d21
   13f34:	vceq.i32	d20, d20, d18
   13f38:	vmovl.u32	q10, d20
   13f3c:	vand	q12, q12, q11
   13f40:	vand	q10, q10, q11
   13f44:	vadd.i64	q8, q8, q12
   13f48:	vadd.i64	q8, q8, q10
   13f4c:	bne	13f18 <__assert_fail@plt+0x2e78>
   13f50:	vorr	d18, d17, d17
   13f54:	strb	ip, [r0, #32]
   13f58:	vadd.i64	q8, q8, q9
   13f5c:	vmov.32	r5, d16[1]
   13f60:	vmov.32	r4, d16[0]
   13f64:	b	13f70 <__assert_fail@plt+0x2ed0>
   13f68:	ldr	r0, [sp, #4]
   13f6c:	mov	ip, #1
   13f70:	adds	r3, r4, r8
   13f74:	adc	r1, r5, r6
   13f78:	subs	r2, r3, r8
   13f7c:	sbcs	r2, r1, r6
   13f80:	bcc	13f98 <__assert_fail@plt+0x2ef8>
   13f84:	and	r2, r3, r1
   13f88:	mov	r8, r3
   13f8c:	mov	r6, r1
   13f90:	cmn	r2, #1
   13f94:	bne	13e2c <__assert_fail@plt+0x2d8c>
   13f98:	movw	r1, #37472	; 0x9260
   13f9c:	mov	r0, #0
   13fa0:	mov	r2, #5
   13fa4:	movt	r1, #1
   13fa8:	bl	10ed8 <dcgettext@plt>
   13fac:	mov	r2, r0
   13fb0:	mov	r0, #1
   13fb4:	mov	r1, #0
   13fb8:	bl	10f44 <error@plt>
   13fbc:	str	r8, [r0, #16]
   13fc0:	str	r6, [r0, #20]
   13fc4:	sub	sp, fp, #56	; 0x38
   13fc8:	vpop	{d8-d10}
   13fcc:	add	sp, sp, #4
   13fd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fd4:	bl	11088 <abort@plt>
   13fd8:	movw	r0, #37386	; 0x920a
   13fdc:	movw	r1, #35464	; 0x8a88
   13fe0:	movw	r3, #37432	; 0x9238
   13fe4:	movw	r2, #1265	; 0x4f1
   13fe8:	movt	r0, #1
   13fec:	movt	r1, #1
   13ff0:	movt	r3, #1
   13ff4:	bl	110a0 <__assert_fail@plt>
   13ff8:	nop	{0}
   13ffc:	nop	{0}
   14000:	andeq	r0, r0, r1
   14004:	andeq	r0, r0, r0
   14008:	andeq	r0, r0, r1
	...
   14014:	andeq	r0, r0, r1
   14018:	push	{r4, r5, fp, lr}
   1401c:	add	fp, sp, #8
   14020:	cmp	r0, #11
   14024:	bhi	140d8 <__assert_fail@plt+0x3038>
   14028:	mov	r4, r1
   1402c:	add	r1, pc, #4
   14030:	mov	r5, #8
   14034:	ldr	pc, [r1, r0, lsl #2]
   14038:	strheq	r4, [r1], -ip
   1403c:	andeq	r4, r1, r8, rrx
   14040:	andeq	r4, r1, r0, lsl #1
   14044:	muleq	r1, r0, r0
   14048:	andeq	r4, r1, r8, ror r0
   1404c:	andeq	r4, r1, r0, lsr #1
   14050:	andeq	r4, r1, r8, lsr #1
   14054:	muleq	r1, r8, r0
   14058:	strheq	r4, [r1], -r0
   1405c:	andeq	r4, r1, r8, lsl #1
   14060:	strheq	r4, [r1], -r8
   14064:	andeq	r4, r1, r0, ror r0
   14068:	mov	r5, #1024	; 0x400
   1406c:	b	140bc <__assert_fail@plt+0x301c>
   14070:	mov	r5, #4096	; 0x1000
   14074:	b	140bc <__assert_fail@plt+0x301c>
   14078:	mov	r5, #2048	; 0x800
   1407c:	b	140bc <__assert_fail@plt+0x301c>
   14080:	mov	r5, #1
   14084:	b	140bc <__assert_fail@plt+0x301c>
   14088:	mov	r5, #8192	; 0x2000
   1408c:	b	140bc <__assert_fail@plt+0x301c>
   14090:	mov	r5, #2
   14094:	b	140bc <__assert_fail@plt+0x301c>
   14098:	mov	r5, #16384	; 0x4000
   1409c:	b	140bc <__assert_fail@plt+0x301c>
   140a0:	mov	r5, #32768	; 0x8000
   140a4:	b	140bc <__assert_fail@plt+0x301c>
   140a8:	mov	r5, #512	; 0x200
   140ac:	b	140bc <__assert_fail@plt+0x301c>
   140b0:	mov	r5, #4
   140b4:	b	140bc <__assert_fail@plt+0x301c>
   140b8:	mov	r5, #256	; 0x100
   140bc:	bl	10fa4 <__ctype_b_loc@plt>
   140c0:	ldr	r0, [r0]
   140c4:	add	r0, r0, r4, lsl #1
   140c8:	ldrh	r0, [r0]
   140cc:	ands	r0, r0, r5
   140d0:	movwne	r0, #1
   140d4:	pop	{r4, r5, fp, pc}
   140d8:	bl	11088 <abort@plt>
   140dc:	movw	r1, #50304	; 0xc480
   140e0:	movt	r1, #2
   140e4:	str	r0, [r1]
   140e8:	bx	lr
   140ec:	movw	r1, #50308	; 0xc484
   140f0:	movt	r1, #2
   140f4:	strb	r0, [r1]
   140f8:	bx	lr
   140fc:	push	{r4, r5, r6, sl, fp, lr}
   14100:	add	fp, sp, #16
   14104:	sub	sp, sp, #8
   14108:	movw	r0, #41308	; 0xa15c
   1410c:	movt	r0, #2
   14110:	ldr	r0, [r0]
   14114:	bl	17a00 <__assert_fail@plt+0x6960>
   14118:	cmp	r0, #0
   1411c:	beq	14144 <__assert_fail@plt+0x30a4>
   14120:	movw	r0, #50308	; 0xc484
   14124:	movt	r0, #2
   14128:	ldrb	r0, [r0]
   1412c:	cmp	r0, #0
   14130:	beq	14164 <__assert_fail@plt+0x30c4>
   14134:	bl	10fe0 <__errno_location@plt>
   14138:	ldr	r0, [r0]
   1413c:	cmp	r0, #32
   14140:	bne	14164 <__assert_fail@plt+0x30c4>
   14144:	movw	r0, #41296	; 0xa150
   14148:	movt	r0, #2
   1414c:	ldr	r0, [r0]
   14150:	bl	17a00 <__assert_fail@plt+0x6960>
   14154:	cmp	r0, #0
   14158:	subeq	sp, fp, #16
   1415c:	popeq	{r4, r5, r6, sl, fp, pc}
   14160:	b	141d4 <__assert_fail@plt+0x3134>
   14164:	movw	r1, #35426	; 0x8a62
   14168:	mov	r0, #0
   1416c:	mov	r2, #5
   14170:	movt	r1, #1
   14174:	bl	10ed8 <dcgettext@plt>
   14178:	mov	r4, r0
   1417c:	movw	r0, #50304	; 0xc480
   14180:	movt	r0, #2
   14184:	ldr	r6, [r0]
   14188:	bl	10fe0 <__errno_location@plt>
   1418c:	ldr	r5, [r0]
   14190:	cmp	r6, #0
   14194:	bne	141b0 <__assert_fail@plt+0x3110>
   14198:	movw	r2, #38211	; 0x9543
   1419c:	mov	r0, #0
   141a0:	mov	r1, r5
   141a4:	mov	r3, r4
   141a8:	movt	r2, #1
   141ac:	b	141d0 <__assert_fail@plt+0x3130>
   141b0:	mov	r0, r6
   141b4:	bl	15b18 <__assert_fail@plt+0x4a78>
   141b8:	movw	r2, #38207	; 0x953f
   141bc:	mov	r3, r0
   141c0:	str	r4, [sp]
   141c4:	mov	r0, #0
   141c8:	mov	r1, r5
   141cc:	movt	r2, #1
   141d0:	bl	10f44 <error@plt>
   141d4:	movw	r0, #41204	; 0xa0f4
   141d8:	movt	r0, #2
   141dc:	ldr	r0, [r0]
   141e0:	bl	10e90 <_exit@plt>
   141e4:	b	10e60 <posix_fadvise64@plt>
   141e8:	cmp	r0, #0
   141ec:	bxeq	lr
   141f0:	push	{r4, sl, fp, lr}
   141f4:	add	fp, sp, #8
   141f8:	sub	sp, sp, #16
   141fc:	mov	r4, r1
   14200:	bl	1101c <fileno@plt>
   14204:	mov	r1, #0
   14208:	mov	r2, #0
   1420c:	mov	r3, #0
   14210:	str	r1, [sp]
   14214:	stmib	sp, {r1, r4}
   14218:	bl	10e60 <posix_fadvise64@plt>
   1421c:	sub	sp, fp, #8
   14220:	pop	{r4, sl, fp, pc}
   14224:	push	{r4, r5, r6, sl, fp, lr}
   14228:	add	fp, sp, #16
   1422c:	mov	r4, r0
   14230:	bl	10fe0 <__errno_location@plt>
   14234:	ldr	r6, [r0]
   14238:	mov	r5, r0
   1423c:	mov	r0, r4
   14240:	bl	10e84 <free@plt>
   14244:	str	r6, [r5]
   14248:	pop	{r4, r5, r6, sl, fp, pc}
   1424c:	push	{r4, r5, fp, lr}
   14250:	add	fp, sp, #8
   14254:	cmp	r0, #0
   14258:	beq	142ec <__assert_fail@plt+0x324c>
   1425c:	mov	r1, #47	; 0x2f
   14260:	mov	r4, r0
   14264:	bl	11058 <strrchr@plt>
   14268:	cmp	r0, #0
   1426c:	mov	r5, r4
   14270:	addne	r5, r0, #1
   14274:	sub	r0, r5, r4
   14278:	cmp	r0, #7
   1427c:	blt	142d0 <__assert_fail@plt+0x3230>
   14280:	movw	r1, #38270	; 0x957e
   14284:	sub	r0, r5, #7
   14288:	mov	r2, #7
   1428c:	movt	r1, #1
   14290:	bl	1107c <strncmp@plt>
   14294:	cmp	r0, #0
   14298:	bne	142d0 <__assert_fail@plt+0x3230>
   1429c:	movw	r1, #38278	; 0x9586
   142a0:	mov	r0, r5
   142a4:	mov	r2, #3
   142a8:	movt	r1, #1
   142ac:	bl	1107c <strncmp@plt>
   142b0:	cmp	r0, #0
   142b4:	beq	142c0 <__assert_fail@plt+0x3220>
   142b8:	mov	r4, r5
   142bc:	b	142d0 <__assert_fail@plt+0x3230>
   142c0:	movw	r0, #41280	; 0xa140
   142c4:	add	r4, r5, #3
   142c8:	movt	r0, #2
   142cc:	str	r4, [r0]
   142d0:	movw	r0, #41284	; 0xa144
   142d4:	movt	r0, #2
   142d8:	str	r4, [r0]
   142dc:	movw	r0, #50312	; 0xc488
   142e0:	movt	r0, #2
   142e4:	str	r4, [r0]
   142e8:	pop	{r4, r5, fp, pc}
   142ec:	movw	r0, #41296	; 0xa150
   142f0:	mov	r1, #55	; 0x37
   142f4:	mov	r2, #1
   142f8:	movt	r0, #2
   142fc:	ldr	r3, [r0]
   14300:	movw	r0, #38214	; 0x9546
   14304:	movt	r0, #1
   14308:	bl	10f08 <fwrite@plt>
   1430c:	bl	11088 <abort@plt>
   14310:	push	{r4, r5, r6, sl, fp, lr}
   14314:	add	fp, sp, #16
   14318:	mov	r4, r0
   1431c:	movw	r0, #50320	; 0xc490
   14320:	movt	r0, #2
   14324:	cmp	r4, #0
   14328:	moveq	r4, r0
   1432c:	bl	10fe0 <__errno_location@plt>
   14330:	ldr	r6, [r0]
   14334:	mov	r5, r0
   14338:	mov	r0, r4
   1433c:	mov	r1, #48	; 0x30
   14340:	bl	16b68 <__assert_fail@plt+0x5ac8>
   14344:	str	r6, [r5]
   14348:	pop	{r4, r5, r6, sl, fp, pc}
   1434c:	movw	r1, #50320	; 0xc490
   14350:	cmp	r0, #0
   14354:	movt	r1, #2
   14358:	movne	r1, r0
   1435c:	ldr	r0, [r1]
   14360:	bx	lr
   14364:	movw	r2, #50320	; 0xc490
   14368:	cmp	r0, #0
   1436c:	movt	r2, #2
   14370:	movne	r2, r0
   14374:	str	r1, [r2]
   14378:	bx	lr
   1437c:	movw	r3, #50320	; 0xc490
   14380:	cmp	r0, #0
   14384:	and	r2, r2, #1
   14388:	movt	r3, #2
   1438c:	movne	r3, r0
   14390:	ubfx	r0, r1, #5, #3
   14394:	and	r1, r1, #31
   14398:	add	ip, r3, r0, lsl #2
   1439c:	mov	r0, #1
   143a0:	ldr	r3, [ip, #8]
   143a4:	and	r0, r0, r3, lsr r1
   143a8:	eor	r2, r0, r2
   143ac:	eor	r1, r3, r2, lsl r1
   143b0:	str	r1, [ip, #8]
   143b4:	bx	lr
   143b8:	movw	r2, #50320	; 0xc490
   143bc:	cmp	r0, #0
   143c0:	movt	r2, #2
   143c4:	movne	r2, r0
   143c8:	ldr	r0, [r2, #4]
   143cc:	str	r1, [r2, #4]
   143d0:	bx	lr
   143d4:	push	{fp, lr}
   143d8:	mov	fp, sp
   143dc:	movw	r3, #50320	; 0xc490
   143e0:	cmp	r0, #0
   143e4:	movt	r3, #2
   143e8:	movne	r3, r0
   143ec:	cmp	r1, #0
   143f0:	mov	r0, #10
   143f4:	cmpne	r2, #0
   143f8:	str	r0, [r3]
   143fc:	bne	14404 <__assert_fail@plt+0x3364>
   14400:	bl	11088 <abort@plt>
   14404:	str	r1, [r3, #40]	; 0x28
   14408:	str	r2, [r3, #44]	; 0x2c
   1440c:	pop	{fp, pc}
   14410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14414:	add	fp, sp, #28
   14418:	sub	sp, sp, #20
   1441c:	mov	r7, r0
   14420:	ldr	r0, [fp, #8]
   14424:	movw	r5, #50320	; 0xc490
   14428:	mov	r8, r3
   1442c:	mov	r9, r2
   14430:	mov	sl, r1
   14434:	movt	r5, #2
   14438:	cmp	r0, #0
   1443c:	movne	r5, r0
   14440:	bl	10fe0 <__errno_location@plt>
   14444:	ldr	r2, [r5, #40]	; 0x28
   14448:	ldr	r3, [r5, #44]	; 0x2c
   1444c:	mov	r4, r0
   14450:	ldm	r5, {r0, r1}
   14454:	add	r5, r5, #8
   14458:	ldr	r6, [r4]
   1445c:	stm	sp, {r0, r1, r5}
   14460:	mov	r0, r7
   14464:	mov	r1, sl
   14468:	str	r2, [sp, #12]
   1446c:	str	r3, [sp, #16]
   14470:	mov	r2, r9
   14474:	mov	r3, r8
   14478:	bl	14488 <__assert_fail@plt+0x33e8>
   1447c:	str	r6, [r4]
   14480:	sub	sp, fp, #28
   14484:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14488:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1448c:	add	fp, sp, #28
   14490:	sub	sp, sp, #156	; 0x9c
   14494:	mov	r5, r0
   14498:	add	r0, r2, #1
   1449c:	mov	r6, r1
   144a0:	mov	sl, r3
   144a4:	str	r2, [fp, #-80]	; 0xffffffb0
   144a8:	str	r0, [sp, #72]	; 0x48
   144ac:	ldr	r0, [fp, #12]
   144b0:	and	r1, r0, #1
   144b4:	str	r1, [sp, #36]	; 0x24
   144b8:	and	r1, r0, #4
   144bc:	str	r1, [sp, #32]
   144c0:	ubfx	r9, r0, #1, #1
   144c4:	bl	10f20 <__ctype_get_mb_cur_max@plt>
   144c8:	str	r0, [sp, #40]	; 0x28
   144cc:	ldr	r0, [fp, #24]
   144d0:	ldr	r7, [fp, #8]
   144d4:	mov	r1, #0
   144d8:	str	r5, [fp, #-84]	; 0xffffffac
   144dc:	str	r1, [fp, #-56]	; 0xffffffc8
   144e0:	mov	r1, #0
   144e4:	str	r1, [sp, #60]	; 0x3c
   144e8:	mov	r1, #1
   144ec:	str	r1, [fp, #-48]	; 0xffffffd0
   144f0:	str	r0, [sp, #80]	; 0x50
   144f4:	ldr	r0, [fp, #20]
   144f8:	str	r0, [sp, #76]	; 0x4c
   144fc:	mov	r0, #0
   14500:	str	r0, [sp, #56]	; 0x38
   14504:	mov	r0, #0
   14508:	str	r0, [fp, #-88]	; 0xffffffa8
   1450c:	mov	r0, #0
   14510:	str	r0, [fp, #-72]	; 0xffffffb8
   14514:	mov	r0, #0
   14518:	cmp	r7, #10
   1451c:	bhi	154b0 <__assert_fail@plt+0x4410>
   14520:	add	r1, pc, #24
   14524:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14528:	mov	r4, r6
   1452c:	mov	r8, #0
   14530:	mov	r2, #1
   14534:	mov	r3, #0
   14538:	mov	lr, sl
   1453c:	ldr	pc, [r1, r7, lsl #2]
   14540:	andeq	r4, r1, r4, lsl #12
   14544:	andeq	r4, r1, r8, asr r6
   14548:	andeq	r4, r1, r8, lsl r6
   1454c:	strdeq	r4, [r1], -ip
   14550:	andeq	r4, r1, ip, asr #12
   14554:	andeq	r4, r1, r0, lsl #13
   14558:	andeq	r4, r1, r8, lsr #12
   1455c:	andeq	r4, r1, r4, lsl #14
   14560:	andeq	r4, r1, ip, ror #10
   14564:	andeq	r4, r1, ip, ror #10
   14568:	muleq	r1, r4, r5
   1456c:	movw	r0, #38360	; 0x95d8
   14570:	mov	r1, r7
   14574:	movt	r0, #1
   14578:	bl	15eb8 <__assert_fail@plt+0x4e18>
   1457c:	str	r0, [sp, #76]	; 0x4c
   14580:	movw	r0, #36108	; 0x8d0c
   14584:	mov	r1, r7
   14588:	movt	r0, #1
   1458c:	bl	15eb8 <__assert_fail@plt+0x4e18>
   14590:	str	r0, [sp, #80]	; 0x50
   14594:	mov	r8, #0
   14598:	tst	r9, #1
   1459c:	bne	145d4 <__assert_fail@plt+0x3534>
   145a0:	ldr	r0, [sp, #76]	; 0x4c
   145a4:	ldrb	r0, [r0]
   145a8:	cmp	r0, #0
   145ac:	beq	145d4 <__assert_fail@plt+0x3534>
   145b0:	ldr	r1, [sp, #76]	; 0x4c
   145b4:	mov	r8, #0
   145b8:	add	r1, r1, #1
   145bc:	cmp	r8, r4
   145c0:	strbcc	r0, [r5, r8]
   145c4:	ldrb	r0, [r1, r8]
   145c8:	add	r8, r8, #1
   145cc:	cmp	r0, #0
   145d0:	bne	145bc <__assert_fail@plt+0x351c>
   145d4:	ldr	r6, [sp, #80]	; 0x50
   145d8:	mov	r0, r6
   145dc:	bl	10fc8 <strlen@plt>
   145e0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   145e4:	str	r0, [fp, #-72]	; 0xffffffb8
   145e8:	str	r6, [fp, #-88]	; 0xffffffa8
   145ec:	mov	r2, #1
   145f0:	mov	r3, r9
   145f4:	mov	lr, sl
   145f8:	b	14704 <__assert_fail@plt+0x3664>
   145fc:	mov	r0, #1
   14600:	b	14658 <__assert_fail@plt+0x35b8>
   14604:	mov	r7, #0
   14608:	mov	r8, #0
   1460c:	mov	r2, r0
   14610:	mov	r3, #0
   14614:	b	14704 <__assert_fail@plt+0x3664>
   14618:	tst	r9, #1
   1461c:	bne	14658 <__assert_fail@plt+0x35b8>
   14620:	mov	r2, r0
   14624:	b	146b0 <__assert_fail@plt+0x3610>
   14628:	mov	r0, #1
   1462c:	mov	r8, #0
   14630:	mov	r7, #5
   14634:	mov	r2, #1
   14638:	str	r0, [fp, #-72]	; 0xffffffb8
   1463c:	movw	r0, #38358	; 0x95d6
   14640:	movt	r0, #1
   14644:	str	r0, [fp, #-88]	; 0xffffffa8
   14648:	b	14678 <__assert_fail@plt+0x35d8>
   1464c:	mov	r2, #1
   14650:	tst	r9, #1
   14654:	beq	146b0 <__assert_fail@plt+0x3610>
   14658:	mov	r1, #1
   1465c:	mov	r8, #0
   14660:	mov	r7, #2
   14664:	mov	r2, r0
   14668:	str	r1, [fp, #-72]	; 0xffffffb8
   1466c:	movw	r1, #36108	; 0x8d0c
   14670:	movt	r1, #1
   14674:	str	r1, [fp, #-88]	; 0xffffffa8
   14678:	mov	r3, #1
   1467c:	b	14704 <__assert_fail@plt+0x3664>
   14680:	tst	r9, #1
   14684:	beq	146d4 <__assert_fail@plt+0x3634>
   14688:	mov	r0, #1
   1468c:	mov	r8, #0
   14690:	mov	r2, #1
   14694:	mov	r3, #1
   14698:	mov	r7, #5
   1469c:	str	r0, [fp, #-72]	; 0xffffffb8
   146a0:	movw	r0, #38358	; 0x95d6
   146a4:	movt	r0, #1
   146a8:	str	r0, [fp, #-88]	; 0xffffffa8
   146ac:	b	14704 <__assert_fail@plt+0x3664>
   146b0:	cmp	r4, #0
   146b4:	mov	r8, #1
   146b8:	mov	r3, #0
   146bc:	mov	r7, #2
   146c0:	movne	r0, #39	; 0x27
   146c4:	strbne	r0, [r5]
   146c8:	movw	r0, #36108	; 0x8d0c
   146cc:	movt	r0, #1
   146d0:	b	146f8 <__assert_fail@plt+0x3658>
   146d4:	cmp	r4, #0
   146d8:	mov	r8, #1
   146dc:	mov	r2, #1
   146e0:	mov	r7, #5
   146e4:	mov	r3, #0
   146e8:	movne	r0, #34	; 0x22
   146ec:	strbne	r0, [r5]
   146f0:	movw	r0, #38358	; 0x95d6
   146f4:	movt	r0, #1
   146f8:	str	r0, [fp, #-88]	; 0xffffffa8
   146fc:	mov	r0, #1
   14700:	str	r0, [fp, #-72]	; 0xffffffb8
   14704:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14708:	eor	r6, r3, #1
   1470c:	str	r7, [fp, #-68]	; 0xffffffbc
   14710:	str	r3, [fp, #-76]	; 0xffffffb4
   14714:	str	r2, [sp, #84]	; 0x54
   14718:	str	r6, [sp, #92]	; 0x5c
   1471c:	cmp	r0, #0
   14720:	movwne	r0, #1
   14724:	and	r1, r0, r3
   14728:	and	r1, r2, r1
   1472c:	str	r1, [sp, #48]	; 0x30
   14730:	sub	r1, r7, #2
   14734:	clz	r1, r1
   14738:	lsr	r1, r1, #5
   1473c:	and	r1, r1, r3
   14740:	str	r1, [sp, #64]	; 0x40
   14744:	subs	r1, r7, #2
   14748:	mov	r7, #0
   1474c:	movwne	r1, #1
   14750:	orr	r6, r1, r6
   14754:	and	r1, r1, r2
   14758:	and	r0, r0, r1
   1475c:	str	r6, [sp, #68]	; 0x44
   14760:	str	r0, [fp, #-60]	; 0xffffffc4
   14764:	orr	r0, r1, r3
   14768:	ldr	r1, [fp, #16]
   1476c:	eor	r0, r0, #1
   14770:	clz	r1, r1
   14774:	lsr	r1, r1, #5
   14778:	orr	r0, r1, r0
   1477c:	str	r0, [fp, #-64]	; 0xffffffc0
   14780:	eor	r0, r2, #1
   14784:	str	r0, [sp, #52]	; 0x34
   14788:	cmn	lr, #1
   1478c:	beq	1479c <__assert_fail@plt+0x36fc>
   14790:	cmp	r7, lr
   14794:	bne	147a8 <__assert_fail@plt+0x3708>
   14798:	b	152f0 <__assert_fail@plt+0x4250>
   1479c:	ldrb	r0, [ip, r7]
   147a0:	cmp	r0, #0
   147a4:	beq	152f8 <__assert_fail@plt+0x4258>
   147a8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   147ac:	mov	sl, #0
   147b0:	cmp	r0, #0
   147b4:	beq	147ec <__assert_fail@plt+0x374c>
   147b8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   147bc:	add	r5, r7, r0
   147c0:	cmp	r0, #2
   147c4:	bcc	147e0 <__assert_fail@plt+0x3740>
   147c8:	cmn	lr, #1
   147cc:	bne	147e0 <__assert_fail@plt+0x3740>
   147d0:	mov	r0, ip
   147d4:	bl	10fc8 <strlen@plt>
   147d8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   147dc:	mov	lr, r0
   147e0:	cmp	r5, lr
   147e4:	bls	147f4 <__assert_fail@plt+0x3754>
   147e8:	ldr	r5, [fp, #-84]	; 0xffffffac
   147ec:	mov	r0, #0
   147f0:	b	14840 <__assert_fail@plt+0x37a0>
   147f4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   147f8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   147fc:	add	r0, ip, r7
   14800:	mov	r6, r4
   14804:	mov	r4, lr
   14808:	bl	10fbc <bcmp@plt>
   1480c:	ldr	r2, [sp, #92]	; 0x5c
   14810:	cmp	r0, #0
   14814:	ldr	r5, [fp, #-84]	; 0xffffffac
   14818:	mov	r1, r0
   1481c:	movwne	r1, #1
   14820:	orr	r1, r1, r2
   14824:	tst	r1, #1
   14828:	beq	15380 <__assert_fail@plt+0x42e0>
   1482c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14830:	clz	r0, r0
   14834:	mov	lr, r4
   14838:	mov	r4, r6
   1483c:	lsr	r0, r0, #5
   14840:	str	r0, [fp, #-52]	; 0xffffffcc
   14844:	ldrb	r6, [ip, r7]
   14848:	cmp	r6, #126	; 0x7e
   1484c:	bhi	14d7c <__assert_fail@plt+0x3cdc>
   14850:	add	r3, pc, #16
   14854:	mov	r9, #1
   14858:	mov	r2, #110	; 0x6e
   1485c:	mov	r0, #97	; 0x61
   14860:	mov	r1, #0
   14864:	ldr	pc, [r3, r6, lsl #2]
   14868:	ldrdeq	r4, [r1], -ip
   1486c:	andeq	r4, r1, ip, ror sp
   14870:	andeq	r4, r1, ip, ror sp
   14874:	andeq	r4, r1, ip, ror sp
   14878:	andeq	r4, r1, ip, ror sp
   1487c:	andeq	r4, r1, ip, ror sp
   14880:	andeq	r4, r1, ip, ror sp
   14884:	andeq	r4, r1, r8, asr lr
   14888:			; <UNDEFINED> instruction: 0x00014bbc
   1488c:			; <UNDEFINED> instruction: 0x00014bb4
   14890:	andeq	r4, r1, r8, asr #23
   14894:	andeq	r4, r1, r4, ror #25
   14898:	andeq	r4, r1, ip, lsr #23
   1489c:	andeq	r4, r1, r4, asr #23
   148a0:	andeq	r4, r1, ip, ror sp
   148a4:	andeq	r4, r1, ip, ror sp
   148a8:	andeq	r4, r1, ip, ror sp
   148ac:	andeq	r4, r1, ip, ror sp
   148b0:	andeq	r4, r1, ip, ror sp
   148b4:	andeq	r4, r1, ip, ror sp
   148b8:	andeq	r4, r1, ip, ror sp
   148bc:	andeq	r4, r1, ip, ror sp
   148c0:	andeq	r4, r1, ip, ror sp
   148c4:	andeq	r4, r1, ip, ror sp
   148c8:	andeq	r4, r1, ip, ror sp
   148cc:	andeq	r4, r1, ip, ror sp
   148d0:	andeq	r4, r1, ip, ror sp
   148d4:	andeq	r4, r1, ip, ror sp
   148d8:	andeq	r4, r1, ip, ror sp
   148dc:	andeq	r4, r1, ip, ror sp
   148e0:	andeq	r4, r1, ip, ror sp
   148e4:	andeq	r4, r1, ip, ror sp
   148e8:	andeq	r4, r1, r0, ror #22
   148ec:	andeq	r4, r1, r4, ror #22
   148f0:	andeq	r4, r1, r4, ror #22
   148f4:	andeq	r4, r1, ip, asr #22
   148f8:	andeq	r4, r1, r4, ror #22
   148fc:	andeq	r4, r1, r4, ror #20
   14900:	andeq	r4, r1, r4, ror #22
   14904:	andeq	r4, r1, ip, ror #25
   14908:	andeq	r4, r1, r4, ror #22
   1490c:	andeq	r4, r1, r4, ror #22
   14910:	andeq	r4, r1, r4, ror #22
   14914:	andeq	r4, r1, r4, ror #20
   14918:	andeq	r4, r1, r4, ror #20
   1491c:	andeq	r4, r1, r4, ror #20
   14920:	andeq	r4, r1, r4, ror #20
   14924:	andeq	r4, r1, r4, ror #20
   14928:	andeq	r4, r1, r4, ror #20
   1492c:	andeq	r4, r1, r4, ror #20
   14930:	andeq	r4, r1, r4, ror #20
   14934:	andeq	r4, r1, r4, ror #20
   14938:	andeq	r4, r1, r4, ror #20
   1493c:	andeq	r4, r1, r4, ror #20
   14940:	andeq	r4, r1, r4, ror #20
   14944:	andeq	r4, r1, r4, ror #20
   14948:	andeq	r4, r1, r4, ror #20
   1494c:	andeq	r4, r1, r4, ror #20
   14950:	andeq	r4, r1, r4, ror #20
   14954:	andeq	r4, r1, r4, ror #22
   14958:	andeq	r4, r1, r4, ror #22
   1495c:	andeq	r4, r1, r4, ror #22
   14960:	andeq	r4, r1, r4, ror #22
   14964:			; <UNDEFINED> instruction: 0x00014cb4
   14968:	andeq	r4, r1, ip, ror sp
   1496c:	andeq	r4, r1, r4, ror #20
   14970:	andeq	r4, r1, r4, ror #20
   14974:	andeq	r4, r1, r4, ror #20
   14978:	andeq	r4, r1, r4, ror #20
   1497c:	andeq	r4, r1, r4, ror #20
   14980:	andeq	r4, r1, r4, ror #20
   14984:	andeq	r4, r1, r4, ror #20
   14988:	andeq	r4, r1, r4, ror #20
   1498c:	andeq	r4, r1, r4, ror #20
   14990:	andeq	r4, r1, r4, ror #20
   14994:	andeq	r4, r1, r4, ror #20
   14998:	andeq	r4, r1, r4, ror #20
   1499c:	andeq	r4, r1, r4, ror #20
   149a0:	andeq	r4, r1, r4, ror #20
   149a4:	andeq	r4, r1, r4, ror #20
   149a8:	andeq	r4, r1, r4, ror #20
   149ac:	andeq	r4, r1, r4, ror #20
   149b0:	andeq	r4, r1, r4, ror #20
   149b4:	andeq	r4, r1, r4, ror #20
   149b8:	andeq	r4, r1, r4, ror #20
   149bc:	andeq	r4, r1, r4, ror #20
   149c0:	andeq	r4, r1, r4, ror #20
   149c4:	andeq	r4, r1, r4, ror #20
   149c8:	andeq	r4, r1, r4, ror #20
   149cc:	andeq	r4, r1, r4, ror #20
   149d0:	andeq	r4, r1, r4, ror #20
   149d4:	andeq	r4, r1, r4, ror #22
   149d8:	andeq	r4, r1, ip, lsl #23
   149dc:	andeq	r4, r1, r4, ror #20
   149e0:	andeq	r4, r1, r4, ror #22
   149e4:	andeq	r4, r1, r4, ror #20
   149e8:	andeq	r4, r1, r4, ror #22
   149ec:	andeq	r4, r1, r4, ror #20
   149f0:	andeq	r4, r1, r4, ror #20
   149f4:	andeq	r4, r1, r4, ror #20
   149f8:	andeq	r4, r1, r4, ror #20
   149fc:	andeq	r4, r1, r4, ror #20
   14a00:	andeq	r4, r1, r4, ror #20
   14a04:	andeq	r4, r1, r4, ror #20
   14a08:	andeq	r4, r1, r4, ror #20
   14a0c:	andeq	r4, r1, r4, ror #20
   14a10:	andeq	r4, r1, r4, ror #20
   14a14:	andeq	r4, r1, r4, ror #20
   14a18:	andeq	r4, r1, r4, ror #20
   14a1c:	andeq	r4, r1, r4, ror #20
   14a20:	andeq	r4, r1, r4, ror #20
   14a24:	andeq	r4, r1, r4, ror #20
   14a28:	andeq	r4, r1, r4, ror #20
   14a2c:	andeq	r4, r1, r4, ror #20
   14a30:	andeq	r4, r1, r4, ror #20
   14a34:	andeq	r4, r1, r4, ror #20
   14a38:	andeq	r4, r1, r4, ror #20
   14a3c:	andeq	r4, r1, r4, ror #20
   14a40:	andeq	r4, r1, r4, ror #20
   14a44:	andeq	r4, r1, r4, ror #20
   14a48:	andeq	r4, r1, r4, ror #20
   14a4c:	andeq	r4, r1, r4, ror #20
   14a50:	andeq	r4, r1, r4, ror #20
   14a54:	andeq	r4, r1, r0, lsr #22
   14a58:	andeq	r4, r1, r4, ror #22
   14a5c:	andeq	r4, r1, r0, lsr #22
   14a60:	andeq	r4, r1, ip, asr #22
   14a64:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14a68:	tst	r0, #1
   14a6c:	bne	14a98 <__assert_fail@plt+0x39f8>
   14a70:	ldr	r1, [fp, #16]
   14a74:	ubfx	r0, r6, #5, #3
   14a78:	mov	r2, #1
   14a7c:	ldr	r0, [r1, r0, lsl #2]
   14a80:	and	r1, r6, #31
   14a84:	tst	r0, r2, lsl r1
   14a88:	beq	14a98 <__assert_fail@plt+0x39f8>
   14a8c:	mov	r0, r6
   14a90:	mov	r1, r9
   14a94:	b	14aac <__assert_fail@plt+0x3a0c>
   14a98:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14a9c:	mov	r1, r9
   14aa0:	cmp	r0, #0
   14aa4:	mov	r0, r6
   14aa8:	beq	14dec <__assert_fail@plt+0x3d4c>
   14aac:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14ab0:	tst	r2, #1
   14ab4:	bne	153bc <__assert_fail@plt+0x431c>
   14ab8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14abc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14ac0:	subs	r2, r2, #2
   14ac4:	movwne	r2, #1
   14ac8:	orr	r2, r2, r3
   14acc:	tst	r2, #1
   14ad0:	bne	14b0c <__assert_fail@plt+0x3a6c>
   14ad4:	cmp	r8, r4
   14ad8:	movcc	r2, #39	; 0x27
   14adc:	strbcc	r2, [r5, r8]
   14ae0:	add	r2, r8, #1
   14ae4:	cmp	r2, r4
   14ae8:	movcc	r3, #36	; 0x24
   14aec:	strbcc	r3, [r5, r2]
   14af0:	add	r2, r8, #2
   14af4:	add	r8, r8, #3
   14af8:	cmp	r2, r4
   14afc:	movcc	r3, #39	; 0x27
   14b00:	strbcc	r3, [r5, r2]
   14b04:	mov	r2, #1
   14b08:	str	r2, [fp, #-56]	; 0xffffffc8
   14b0c:	cmp	r8, r4
   14b10:	movcc	r2, #92	; 0x5c
   14b14:	strbcc	r2, [r5, r8]
   14b18:	add	r8, r8, #1
   14b1c:	b	14e30 <__assert_fail@plt+0x3d90>
   14b20:	cmp	lr, #1
   14b24:	beq	14b4c <__assert_fail@plt+0x3aac>
   14b28:	mov	r9, #0
   14b2c:	cmn	lr, #1
   14b30:	bne	14b58 <__assert_fail@plt+0x3ab8>
   14b34:	ldrb	r0, [ip, #1]
   14b38:	cmp	r0, #0
   14b3c:	beq	14b4c <__assert_fail@plt+0x3aac>
   14b40:	mvn	lr, #0
   14b44:	mov	sl, #0
   14b48:	b	14a64 <__assert_fail@plt+0x39c4>
   14b4c:	mov	r9, #0
   14b50:	cmp	r7, #0
   14b54:	beq	14b60 <__assert_fail@plt+0x3ac0>
   14b58:	mov	sl, #0
   14b5c:	b	14a64 <__assert_fail@plt+0x39c4>
   14b60:	mov	r1, #1
   14b64:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14b68:	cmp	r0, #2
   14b6c:	bne	14b84 <__assert_fail@plt+0x3ae4>
   14b70:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14b74:	mov	r9, r1
   14b78:	tst	r0, #1
   14b7c:	beq	14a64 <__assert_fail@plt+0x39c4>
   14b80:	b	153bc <__assert_fail@plt+0x431c>
   14b84:	mov	r9, r1
   14b88:	b	14a64 <__assert_fail@plt+0x39c4>
   14b8c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14b90:	cmp	r0, #2
   14b94:	bne	14dd0 <__assert_fail@plt+0x3d30>
   14b98:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14b9c:	tst	r0, #1
   14ba0:	bne	153bc <__assert_fail@plt+0x431c>
   14ba4:	mov	sl, #0
   14ba8:	b	14de4 <__assert_fail@plt+0x3d44>
   14bac:	mov	r0, #102	; 0x66
   14bb0:	b	14e58 <__assert_fail@plt+0x3db8>
   14bb4:	mov	r2, #116	; 0x74
   14bb8:	b	14bc8 <__assert_fail@plt+0x3b28>
   14bbc:	mov	r0, #98	; 0x62
   14bc0:	b	14e58 <__assert_fail@plt+0x3db8>
   14bc4:	mov	r2, #114	; 0x72
   14bc8:	ldr	r0, [sp, #68]	; 0x44
   14bcc:	tst	r0, #1
   14bd0:	mov	r0, r2
   14bd4:	bne	14e58 <__assert_fail@plt+0x3db8>
   14bd8:	b	153bc <__assert_fail@plt+0x431c>
   14bdc:	ldr	r0, [sp, #84]	; 0x54
   14be0:	tst	r0, #1
   14be4:	beq	14e74 <__assert_fail@plt+0x3dd4>
   14be8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14bec:	tst	r0, #1
   14bf0:	bne	154a8 <__assert_fail@plt+0x4408>
   14bf4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14bf8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14bfc:	subs	r0, r0, #2
   14c00:	movwne	r0, #1
   14c04:	orr	r0, r0, r1
   14c08:	tst	r0, #1
   14c0c:	bne	14c48 <__assert_fail@plt+0x3ba8>
   14c10:	cmp	r8, r4
   14c14:	movcc	r0, #39	; 0x27
   14c18:	strbcc	r0, [r5, r8]
   14c1c:	add	r0, r8, #1
   14c20:	cmp	r0, r4
   14c24:	movcc	r1, #36	; 0x24
   14c28:	strbcc	r1, [r5, r0]
   14c2c:	add	r0, r8, #2
   14c30:	add	r8, r8, #3
   14c34:	cmp	r0, r4
   14c38:	movcc	r1, #39	; 0x27
   14c3c:	strbcc	r1, [r5, r0]
   14c40:	mov	r0, #1
   14c44:	str	r0, [fp, #-56]	; 0xffffffc8
   14c48:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14c4c:	cmp	r8, r4
   14c50:	mov	r9, #0
   14c54:	mov	sl, #1
   14c58:	mov	r6, #48	; 0x30
   14c5c:	movcc	r0, #92	; 0x5c
   14c60:	strbcc	r0, [r5, r8]
   14c64:	add	r0, r8, #1
   14c68:	cmp	r1, #2
   14c6c:	beq	1503c <__assert_fail@plt+0x3f9c>
   14c70:	add	r1, r7, #1
   14c74:	cmp	r1, lr
   14c78:	bcs	1503c <__assert_fail@plt+0x3f9c>
   14c7c:	ldrb	r1, [ip, r1]
   14c80:	sub	r1, r1, #48	; 0x30
   14c84:	uxtb	r1, r1
   14c88:	cmp	r1, #9
   14c8c:	bhi	1503c <__assert_fail@plt+0x3f9c>
   14c90:	cmp	r0, r4
   14c94:	movcc	r1, #48	; 0x30
   14c98:	strbcc	r1, [r5, r0]
   14c9c:	add	r0, r8, #2
   14ca0:	add	r8, r8, #3
   14ca4:	cmp	r0, r4
   14ca8:	movcc	r1, #48	; 0x30
   14cac:	strbcc	r1, [r5, r0]
   14cb0:	b	14a64 <__assert_fail@plt+0x39c4>
   14cb4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14cb8:	mov	sl, #0
   14cbc:	mov	r6, #63	; 0x3f
   14cc0:	cmp	r0, #5
   14cc4:	beq	15044 <__assert_fail@plt+0x3fa4>
   14cc8:	cmp	r0, #2
   14ccc:	bne	150ec <__assert_fail@plt+0x404c>
   14cd0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14cd4:	mov	r9, #0
   14cd8:	tst	r0, #1
   14cdc:	beq	14a64 <__assert_fail@plt+0x39c4>
   14ce0:	b	153bc <__assert_fail@plt+0x431c>
   14ce4:	mov	r0, #118	; 0x76
   14ce8:	b	14e58 <__assert_fail@plt+0x3db8>
   14cec:	mov	r0, #1
   14cf0:	mov	r6, #39	; 0x27
   14cf4:	str	r0, [sp, #60]	; 0x3c
   14cf8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14cfc:	cmp	r0, #2
   14d00:	bne	14e90 <__assert_fail@plt+0x3df0>
   14d04:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14d08:	tst	r0, #1
   14d0c:	bne	153bc <__assert_fail@plt+0x431c>
   14d10:	ldr	r2, [sp, #56]	; 0x38
   14d14:	clz	r1, r4
   14d18:	mov	sl, #0
   14d1c:	mov	r9, #1
   14d20:	lsr	r1, r1, #5
   14d24:	cmp	r2, #0
   14d28:	mov	r0, r2
   14d2c:	movwne	r0, #1
   14d30:	orrs	r0, r0, r1
   14d34:	moveq	r2, r4
   14d38:	moveq	r4, r0
   14d3c:	cmp	r8, r4
   14d40:	str	r2, [sp, #56]	; 0x38
   14d44:	movcc	r0, #39	; 0x27
   14d48:	strbcc	r0, [r5, r8]
   14d4c:	add	r0, r8, #1
   14d50:	cmp	r0, r4
   14d54:	movcc	r1, #92	; 0x5c
   14d58:	strbcc	r1, [r5, r0]
   14d5c:	add	r0, r8, #2
   14d60:	add	r8, r8, #3
   14d64:	cmp	r0, r4
   14d68:	movcc	r1, #39	; 0x27
   14d6c:	strbcc	r1, [r5, r0]
   14d70:	mov	r0, #0
   14d74:	str	r0, [fp, #-56]	; 0xffffffc8
   14d78:	b	14a64 <__assert_fail@plt+0x39c4>
   14d7c:	ldr	r0, [sp, #40]	; 0x28
   14d80:	str	r4, [sp, #88]	; 0x58
   14d84:	cmp	r0, #1
   14d88:	bne	14e98 <__assert_fail@plt+0x3df8>
   14d8c:	str	lr, [sp, #28]
   14d90:	bl	10fa4 <__ctype_b_loc@plt>
   14d94:	ldr	r0, [r0]
   14d98:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14d9c:	mov	r2, #1
   14da0:	add	r0, r0, r6, lsl #1
   14da4:	ldrb	r0, [r0, #1]
   14da8:	ubfx	r9, r0, #6, #1
   14dac:	ldr	r0, [sp, #52]	; 0x34
   14db0:	cmp	r2, #1
   14db4:	orr	r0, r9, r0
   14db8:	bhi	150f4 <__assert_fail@plt+0x4054>
   14dbc:	tst	r0, #1
   14dc0:	beq	150f4 <__assert_fail@plt+0x4054>
   14dc4:	ldr	lr, [sp, #28]
   14dc8:	ldr	r4, [sp, #88]	; 0x58
   14dcc:	b	14a64 <__assert_fail@plt+0x39c4>
   14dd0:	ldr	r1, [sp, #48]	; 0x30
   14dd4:	mov	sl, #0
   14dd8:	mov	r0, #92	; 0x5c
   14ddc:	cmp	r1, #0
   14de0:	beq	14e58 <__assert_fail@plt+0x3db8>
   14de4:	mov	r6, #92	; 0x5c
   14de8:	mov	r9, #0
   14dec:	cmp	sl, #0
   14df0:	bne	14e28 <__assert_fail@plt+0x3d88>
   14df4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14df8:	tst	r0, #1
   14dfc:	beq	14e28 <__assert_fail@plt+0x3d88>
   14e00:	cmp	r8, r4
   14e04:	movcc	r0, #39	; 0x27
   14e08:	strbcc	r0, [r5, r8]
   14e0c:	add	r0, r8, #1
   14e10:	add	r8, r8, #2
   14e14:	cmp	r0, r4
   14e18:	movcc	r1, #39	; 0x27
   14e1c:	strbcc	r1, [r5, r0]
   14e20:	mov	r0, #0
   14e24:	str	r0, [fp, #-56]	; 0xffffffc8
   14e28:	mov	r1, r9
   14e2c:	mov	r0, r6
   14e30:	cmp	r8, r4
   14e34:	strbcc	r0, [r5, r8]
   14e38:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14e3c:	add	r8, r8, #1
   14e40:	and	r0, r0, r1
   14e44:	str	r0, [fp, #-48]	; 0xffffffd0
   14e48:	add	r7, r7, #1
   14e4c:	cmn	lr, #1
   14e50:	bne	14790 <__assert_fail@plt+0x36f0>
   14e54:	b	1479c <__assert_fail@plt+0x36fc>
   14e58:	ldr	r1, [sp, #84]	; 0x54
   14e5c:	mov	sl, #0
   14e60:	mov	r9, #0
   14e64:	tst	r1, #1
   14e68:	mov	r1, #0
   14e6c:	beq	14a64 <__assert_fail@plt+0x39c4>
   14e70:	b	14aac <__assert_fail@plt+0x3a0c>
   14e74:	ldr	r0, [sp, #36]	; 0x24
   14e78:	mov	r6, #0
   14e7c:	mov	sl, #0
   14e80:	mov	r9, #0
   14e84:	cmp	r0, #0
   14e88:	beq	14a64 <__assert_fail@plt+0x39c4>
   14e8c:	b	14e48 <__assert_fail@plt+0x3da8>
   14e90:	mov	r9, #1
   14e94:	b	14a64 <__assert_fail@plt+0x39c4>
   14e98:	mov	r0, #0
   14e9c:	cmn	lr, #1
   14ea0:	sub	r4, fp, #40	; 0x28
   14ea4:	str	r0, [fp, #-36]	; 0xffffffdc
   14ea8:	str	r0, [fp, #-40]	; 0xffffffd8
   14eac:	bne	14ec0 <__assert_fail@plt+0x3e20>
   14eb0:	mov	r0, ip
   14eb4:	bl	10fc8 <strlen@plt>
   14eb8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14ebc:	mov	lr, r0
   14ec0:	ldr	r0, [sp, #72]	; 0x48
   14ec4:	mov	r9, #1
   14ec8:	mov	r2, #0
   14ecc:	str	lr, [sp, #28]
   14ed0:	add	r0, r0, r7
   14ed4:	str	r0, [sp, #20]
   14ed8:	b	14f1c <__assert_fail@plt+0x3e7c>
   14edc:	ldr	r5, [sp, #44]	; 0x2c
   14ee0:	add	r5, r0, r5
   14ee4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14ee8:	bl	10efc <iswprint@plt>
   14eec:	cmp	r0, #0
   14ef0:	sub	r4, fp, #40	; 0x28
   14ef4:	movwne	r0, #1
   14ef8:	and	r9, r9, r0
   14efc:	mov	r0, r4
   14f00:	bl	10eb4 <mbsinit@plt>
   14f04:	mov	r2, r5
   14f08:	ldr	lr, [sp, #28]
   14f0c:	ldr	r5, [fp, #-84]	; 0xffffffac
   14f10:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14f14:	cmp	r0, #0
   14f18:	bne	14dac <__assert_fail@plt+0x3d0c>
   14f1c:	add	r0, r2, r7
   14f20:	str	r2, [sp, #44]	; 0x2c
   14f24:	mov	r3, r4
   14f28:	add	r1, ip, r0
   14f2c:	str	r0, [sp, #24]
   14f30:	sub	r2, lr, r0
   14f34:	sub	r0, fp, #44	; 0x2c
   14f38:	bl	17c5c <__assert_fail@plt+0x6bbc>
   14f3c:	cmp	r0, #0
   14f40:	beq	152e4 <__assert_fail@plt+0x4244>
   14f44:	cmn	r0, #1
   14f48:	beq	152a0 <__assert_fail@plt+0x4200>
   14f4c:	ldr	lr, [sp, #28]
   14f50:	cmn	r0, #2
   14f54:	beq	152a8 <__assert_fail@plt+0x4208>
   14f58:	ldr	r2, [sp, #64]	; 0x40
   14f5c:	ldr	r4, [sp, #88]	; 0x58
   14f60:	ldr	ip, [sp, #84]	; 0x54
   14f64:	cmp	r0, #2
   14f68:	mov	r1, #0
   14f6c:	movwcc	r1, #1
   14f70:	eor	r2, r2, #1
   14f74:	orrs	r1, r2, r1
   14f78:	bne	14edc <__assert_fail@plt+0x3e3c>
   14f7c:	ldr	r1, [sp, #44]	; 0x2c
   14f80:	ldr	r2, [sp, #20]
   14f84:	add	r1, r2, r1
   14f88:	sub	r2, r0, #1
   14f8c:	b	14f9c <__assert_fail@plt+0x3efc>
   14f90:	add	r1, r1, #1
   14f94:	subs	r2, r2, #1
   14f98:	beq	14edc <__assert_fail@plt+0x3e3c>
   14f9c:	ldrb	r3, [r1]
   14fa0:	sub	r3, r3, #91	; 0x5b
   14fa4:	cmp	r3, #33	; 0x21
   14fa8:	bhi	14f90 <__assert_fail@plt+0x3ef0>
   14fac:	add	r5, pc, #0
   14fb0:	ldr	pc, [r5, r3, lsl #2]
   14fb4:	muleq	r1, r8, r3
   14fb8:	muleq	r1, r8, r3
   14fbc:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14fc0:	muleq	r1, r8, r3
   14fc4:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14fc8:	muleq	r1, r8, r3
   14fcc:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14fd0:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14fd4:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14fd8:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14fdc:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14fe0:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14fe4:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14fe8:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14fec:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14ff0:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14ff4:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14ff8:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14ffc:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   15000:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   15004:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   15008:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1500c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   15010:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   15014:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   15018:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1501c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   15020:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   15024:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   15028:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1502c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   15030:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   15034:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   15038:	muleq	r1, r8, r3
   1503c:	mov	r8, r0
   15040:	b	14a64 <__assert_fail@plt+0x39c4>
   15044:	ldr	r0, [sp, #32]
   15048:	cmp	r0, #0
   1504c:	beq	150ec <__assert_fail@plt+0x404c>
   15050:	add	r0, r7, #2
   15054:	cmp	r0, lr
   15058:	bcs	150ec <__assert_fail@plt+0x404c>
   1505c:	add	r1, r7, ip
   15060:	ldrb	r1, [r1, #1]
   15064:	cmp	r1, #63	; 0x3f
   15068:	bne	150ec <__assert_fail@plt+0x404c>
   1506c:	ldrb	r9, [ip, r0]
   15070:	sub	r2, r9, #33	; 0x21
   15074:	cmp	r2, #29
   15078:	bhi	150ec <__assert_fail@plt+0x404c>
   1507c:	movw	r1, #20929	; 0x51c1
   15080:	mov	r3, #1
   15084:	movt	r1, #14336	; 0x3800
   15088:	tst	r1, r3, lsl r2
   1508c:	beq	150ec <__assert_fail@plt+0x404c>
   15090:	ldr	r1, [fp, #-76]	; 0xffffffb4
   15094:	tst	r1, #1
   15098:	bne	153bc <__assert_fail@plt+0x431c>
   1509c:	cmp	r8, r4
   150a0:	add	r2, r8, #1
   150a4:	mov	r6, r9
   150a8:	mov	r7, r0
   150ac:	mov	r9, #0
   150b0:	movcc	r1, #63	; 0x3f
   150b4:	strbcc	r1, [r5, r8]
   150b8:	cmp	r2, r4
   150bc:	movcc	r1, #34	; 0x22
   150c0:	strbcc	r1, [r5, r2]
   150c4:	add	r2, r8, #2
   150c8:	cmp	r2, r4
   150cc:	movcc	r1, #34	; 0x22
   150d0:	strbcc	r1, [r5, r2]
   150d4:	add	r2, r8, #3
   150d8:	add	r8, r8, #4
   150dc:	cmp	r2, r4
   150e0:	movcc	r1, #63	; 0x3f
   150e4:	strbcc	r1, [r5, r2]
   150e8:	b	14a64 <__assert_fail@plt+0x39c4>
   150ec:	mov	r9, #0
   150f0:	b	14a64 <__assert_fail@plt+0x39c4>
   150f4:	ldr	lr, [sp, #28]
   150f8:	ldr	r4, [fp, #-56]	; 0xffffffc8
   150fc:	add	r1, r2, r7
   15100:	mov	r2, #0
   15104:	str	r1, [sp, #44]	; 0x2c
   15108:	tst	r0, #1
   1510c:	bne	15228 <__assert_fail@plt+0x4188>
   15110:	ldr	r1, [fp, #-76]	; 0xffffffb4
   15114:	tst	r1, #1
   15118:	bne	153b8 <__assert_fail@plt+0x4318>
   1511c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15120:	subs	r2, r1, #2
   15124:	movwne	r2, #1
   15128:	orr	r2, r2, r4
   1512c:	tst	r2, #1
   15130:	bne	15174 <__assert_fail@plt+0x40d4>
   15134:	ldr	r1, [sp, #88]	; 0x58
   15138:	add	r2, r8, #1
   1513c:	mov	r4, #1
   15140:	cmp	r8, r1
   15144:	movcc	r1, #39	; 0x27
   15148:	strbcc	r1, [r5, r8]
   1514c:	ldr	r1, [sp, #88]	; 0x58
   15150:	cmp	r2, r1
   15154:	movcc	r1, #36	; 0x24
   15158:	strbcc	r1, [r5, r2]
   1515c:	ldr	r1, [sp, #88]	; 0x58
   15160:	add	r2, r8, #2
   15164:	add	r8, r8, #3
   15168:	cmp	r2, r1
   1516c:	movcc	r1, #39	; 0x27
   15170:	strbcc	r1, [r5, r2]
   15174:	ldr	r1, [sp, #88]	; 0x58
   15178:	add	r2, r8, #1
   1517c:	cmp	r8, r1
   15180:	movcc	r1, #92	; 0x5c
   15184:	strbcc	r1, [r5, r8]
   15188:	ldr	r1, [sp, #88]	; 0x58
   1518c:	cmp	r2, r1
   15190:	bcs	151a4 <__assert_fail@plt+0x4104>
   15194:	uxtb	r3, r6
   15198:	mov	r1, #48	; 0x30
   1519c:	orr	r3, r1, r3, lsr #6
   151a0:	strb	r3, [r5, r2]
   151a4:	ldr	r1, [sp, #88]	; 0x58
   151a8:	add	r2, r8, #2
   151ac:	add	r8, r8, #3
   151b0:	cmp	r2, r1
   151b4:	lsrcc	r3, r6, #3
   151b8:	movcc	r1, #6
   151bc:	bficc	r3, r1, #3, #29
   151c0:	mov	r1, #6
   151c4:	bfi	r6, r1, #3, #29
   151c8:	strbcc	r3, [r5, r2]
   151cc:	mov	r2, #1
   151d0:	b	15250 <__assert_fail@plt+0x41b0>
   151d4:	ldr	r1, [sp, #88]	; 0x58
   151d8:	ldr	r5, [fp, #-84]	; 0xffffffac
   151dc:	ldr	r4, [sp, #88]	; 0x58
   151e0:	cmp	r8, r1
   151e4:	movcc	r1, #39	; 0x27
   151e8:	strbcc	r1, [r5, r8]
   151ec:	add	r1, r8, #1
   151f0:	add	r8, r8, #2
   151f4:	cmp	r1, r4
   151f8:	movcc	r4, #39	; 0x27
   151fc:	strbcc	r4, [r5, r1]
   15200:	mov	r4, #0
   15204:	ldr	r1, [sp, #88]	; 0x58
   15208:	cmp	r8, r1
   1520c:	ldr	r1, [sp, #72]	; 0x48
   15210:	strbcc	r6, [r5, r8]
   15214:	add	r8, r8, #1
   15218:	ldrb	r6, [r1, r7]
   1521c:	mov	r7, r3
   15220:	tst	r0, #1
   15224:	beq	15110 <__assert_fail@plt+0x4070>
   15228:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1522c:	tst	r1, #1
   15230:	beq	15248 <__assert_fail@plt+0x41a8>
   15234:	ldr	r1, [sp, #88]	; 0x58
   15238:	cmp	r8, r1
   1523c:	movcc	r1, #92	; 0x5c
   15240:	strbcc	r1, [r5, r8]
   15244:	add	r8, r8, #1
   15248:	mov	r1, #0
   1524c:	str	r1, [fp, #-52]	; 0xffffffcc
   15250:	ldr	r1, [sp, #44]	; 0x2c
   15254:	add	r3, r7, #1
   15258:	and	sl, r2, #1
   1525c:	cmp	r1, r3
   15260:	bls	15284 <__assert_fail@plt+0x41e4>
   15264:	cmp	sl, #0
   15268:	mvn	r5, r4
   1526c:	movwne	sl, #1
   15270:	orr	r5, r5, sl
   15274:	tst	r5, #1
   15278:	beq	151d4 <__assert_fail@plt+0x4134>
   1527c:	ldr	r5, [fp, #-84]	; 0xffffffac
   15280:	b	15204 <__assert_fail@plt+0x4164>
   15284:	str	r4, [fp, #-56]	; 0xffffffc8
   15288:	ldr	r4, [sp, #88]	; 0x58
   1528c:	cmp	sl, #0
   15290:	movwne	sl, #1
   15294:	cmp	sl, #0
   15298:	beq	14df4 <__assert_fail@plt+0x3d54>
   1529c:	b	14e28 <__assert_fail@plt+0x3d88>
   152a0:	mov	r9, #0
   152a4:	b	152e4 <__assert_fail@plt+0x4244>
   152a8:	ldr	r0, [sp, #24]
   152ac:	mov	r9, #0
   152b0:	cmp	lr, r0
   152b4:	bls	152e4 <__assert_fail@plt+0x4244>
   152b8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   152bc:	ldr	r2, [sp, #44]	; 0x2c
   152c0:	add	r0, ip, r7
   152c4:	ldrb	r1, [r0, r2]
   152c8:	cmp	r1, #0
   152cc:	beq	14dac <__assert_fail@plt+0x3d0c>
   152d0:	add	r2, r2, #1
   152d4:	add	r1, r7, r2
   152d8:	cmp	r1, lr
   152dc:	bcc	152c4 <__assert_fail@plt+0x4224>
   152e0:	b	14dac <__assert_fail@plt+0x3d0c>
   152e4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   152e8:	ldr	r2, [sp, #44]	; 0x2c
   152ec:	b	14dac <__assert_fail@plt+0x3d0c>
   152f0:	mov	lr, r7
   152f4:	b	152fc <__assert_fail@plt+0x425c>
   152f8:	mvn	lr, #0
   152fc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15300:	ldr	r2, [fp, #-76]	; 0xffffffb4
   15304:	eor	r0, r1, #2
   15308:	orr	r0, r0, r8
   1530c:	clz	r0, r0
   15310:	lsr	r0, r0, #5
   15314:	tst	r2, r0
   15318:	bne	153bc <__assert_fail@plt+0x431c>
   1531c:	subs	r0, r1, #2
   15320:	movwne	r0, #1
   15324:	orr	r0, r2, r0
   15328:	tst	r0, #1
   1532c:	ldreq	r0, [sp, #60]	; 0x3c
   15330:	eoreq	r0, r0, #1
   15334:	tsteq	r0, #1
   15338:	bne	15450 <__assert_fail@plt+0x43b0>
   1533c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   15340:	mov	sl, lr
   15344:	tst	r0, #1
   15348:	bne	1541c <__assert_fail@plt+0x437c>
   1534c:	ldr	r6, [sp, #56]	; 0x38
   15350:	mov	r9, #0
   15354:	cmp	r6, #0
   15358:	beq	15448 <__assert_fail@plt+0x43a8>
   1535c:	ldr	r0, [sp, #84]	; 0x54
   15360:	mov	r1, #0
   15364:	mov	r7, #2
   15368:	cmp	r4, #0
   1536c:	str	r1, [fp, #-48]	; 0xffffffd0
   15370:	mov	r1, #0
   15374:	str	r1, [fp, #-76]	; 0xffffffb4
   15378:	beq	14518 <__assert_fail@plt+0x3478>
   1537c:	b	15450 <__assert_fail@plt+0x43b0>
   15380:	ldr	ip, [fp, #-80]	; 0xffffffb0
   15384:	ldr	r1, [fp, #12]
   15388:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1538c:	mov	lr, r4
   15390:	mov	r4, r6
   15394:	b	153dc <__assert_fail@plt+0x433c>
   15398:	tst	ip, #1
   1539c:	ldr	r5, [fp, #-84]	; 0xffffffac
   153a0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   153a4:	ldr	r1, [fp, #12]
   153a8:	mov	r0, #2
   153ac:	movwne	r0, #4
   153b0:	mov	r2, r0
   153b4:	b	153dc <__assert_fail@plt+0x433c>
   153b8:	ldr	r4, [sp, #88]	; 0x58
   153bc:	ldr	r1, [sp, #84]	; 0x54
   153c0:	mov	r0, #2
   153c4:	tst	r1, #1
   153c8:	movwne	r0, #4
   153cc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   153d0:	ldr	r1, [fp, #12]
   153d4:	cmp	r2, #2
   153d8:	moveq	r2, r0
   153dc:	mov	r0, #0
   153e0:	bic	r1, r1, #2
   153e4:	str	r2, [sp]
   153e8:	mov	r2, ip
   153ec:	mov	r3, lr
   153f0:	str	r0, [sp, #8]
   153f4:	ldr	r0, [sp, #76]	; 0x4c
   153f8:	str	r1, [sp, #4]
   153fc:	mov	r1, r4
   15400:	str	r0, [sp, #12]
   15404:	ldr	r0, [sp, #80]	; 0x50
   15408:	str	r0, [sp, #16]
   1540c:	mov	r0, r5
   15410:	bl	14488 <__assert_fail@plt+0x33e8>
   15414:	mov	r8, r0
   15418:	b	1549c <__assert_fail@plt+0x43fc>
   1541c:	mov	r0, #5
   15420:	ldr	r1, [sp, #56]	; 0x38
   15424:	ldr	r2, [fp, #-80]	; 0xffffffb0
   15428:	mov	r3, sl
   1542c:	str	r0, [sp]
   15430:	ldr	r0, [fp, #12]
   15434:	str	r0, [sp, #4]
   15438:	ldr	r0, [fp, #16]
   1543c:	str	r0, [sp, #8]
   15440:	ldr	r0, [sp, #76]	; 0x4c
   15444:	b	15400 <__assert_fail@plt+0x4360>
   15448:	mov	r0, #0
   1544c:	str	r0, [fp, #-76]	; 0xffffffb4
   15450:	ldr	r1, [fp, #-88]	; 0xffffffa8
   15454:	cmp	r1, #0
   15458:	beq	15490 <__assert_fail@plt+0x43f0>
   1545c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15460:	tst	r0, #1
   15464:	bne	15490 <__assert_fail@plt+0x43f0>
   15468:	ldrb	r0, [r1]
   1546c:	cmp	r0, #0
   15470:	beq	15490 <__assert_fail@plt+0x43f0>
   15474:	add	r1, r1, #1
   15478:	cmp	r8, r4
   1547c:	strbcc	r0, [r5, r8]
   15480:	add	r8, r8, #1
   15484:	ldrb	r0, [r1], #1
   15488:	cmp	r0, #0
   1548c:	bne	15478 <__assert_fail@plt+0x43d8>
   15490:	cmp	r8, r4
   15494:	movcc	r0, #0
   15498:	strbcc	r0, [r5, r8]
   1549c:	mov	r0, r8
   154a0:	sub	sp, fp, #28
   154a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154a8:	mov	r0, #4
   154ac:	b	153cc <__assert_fail@plt+0x432c>
   154b0:	bl	11088 <abort@plt>
   154b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154b8:	add	fp, sp, #28
   154bc:	sub	sp, sp, #28
   154c0:	movw	r5, #50320	; 0xc490
   154c4:	cmp	r2, #0
   154c8:	mov	r4, r1
   154cc:	mov	r7, r0
   154d0:	str	r0, [sp, #20]
   154d4:	movt	r5, #2
   154d8:	movne	r5, r2
   154dc:	bl	10fe0 <__errno_location@plt>
   154e0:	mov	sl, r0
   154e4:	ldr	r2, [r5, #40]	; 0x28
   154e8:	ldr	r3, [r5, #44]	; 0x2c
   154ec:	ldm	r5, {r0, r1}
   154f0:	orr	r8, r1, #1
   154f4:	add	r9, r5, #8
   154f8:	mov	r1, #0
   154fc:	ldr	r6, [sl]
   15500:	stm	sp, {r0, r8, r9}
   15504:	mov	r0, #0
   15508:	str	r2, [sp, #12]
   1550c:	str	r3, [sp, #16]
   15510:	mov	r2, r7
   15514:	mov	r3, r4
   15518:	str	r6, [sp, #24]
   1551c:	mov	r6, r4
   15520:	bl	14488 <__assert_fail@plt+0x33e8>
   15524:	add	r7, r0, #1
   15528:	mov	r0, r7
   1552c:	bl	16738 <__assert_fail@plt+0x5698>
   15530:	mov	r4, r0
   15534:	ldr	r0, [r5]
   15538:	ldr	r2, [r5, #44]	; 0x2c
   1553c:	ldr	r1, [r5, #40]	; 0x28
   15540:	mov	r3, r6
   15544:	stm	sp, {r0, r8, r9}
   15548:	str	r2, [sp, #16]
   1554c:	ldr	r2, [sp, #20]
   15550:	str	r1, [sp, #12]
   15554:	mov	r0, r4
   15558:	mov	r1, r7
   1555c:	bl	14488 <__assert_fail@plt+0x33e8>
   15560:	ldr	r0, [sp, #24]
   15564:	str	r0, [sl]
   15568:	mov	r0, r4
   1556c:	sub	sp, fp, #28
   15570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15574:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15578:	add	fp, sp, #28
   1557c:	sub	sp, sp, #36	; 0x24
   15580:	movw	r8, #50320	; 0xc490
   15584:	cmp	r3, #0
   15588:	mov	r4, r2
   1558c:	str	r2, [sp, #24]
   15590:	mov	r5, r1
   15594:	mov	r6, r0
   15598:	str	r0, [sp, #20]
   1559c:	movt	r8, #2
   155a0:	movne	r8, r3
   155a4:	bl	10fe0 <__errno_location@plt>
   155a8:	str	r0, [sp, #28]
   155ac:	ldr	r1, [r8, #40]	; 0x28
   155b0:	ldr	r2, [r8, #44]	; 0x2c
   155b4:	ldr	r7, [r0]
   155b8:	cmp	r4, #0
   155bc:	add	sl, r8, #8
   155c0:	mov	r0, #0
   155c4:	ldm	r8, {r3, r9}
   155c8:	orreq	r9, r9, #1
   155cc:	stm	sp, {r3, r9, sl}
   155d0:	str	r1, [sp, #12]
   155d4:	str	r2, [sp, #16]
   155d8:	mov	r1, #0
   155dc:	mov	r2, r6
   155e0:	mov	r3, r5
   155e4:	str	r7, [sp, #32]
   155e8:	mov	r7, r5
   155ec:	bl	14488 <__assert_fail@plt+0x33e8>
   155f0:	add	r4, r0, #1
   155f4:	mov	r5, r0
   155f8:	mov	r0, r4
   155fc:	bl	16738 <__assert_fail@plt+0x5698>
   15600:	mov	r6, r0
   15604:	ldr	r0, [r8]
   15608:	ldr	r2, [r8, #44]	; 0x2c
   1560c:	ldr	r1, [r8, #40]	; 0x28
   15610:	mov	r3, r7
   15614:	stm	sp, {r0, r9, sl}
   15618:	str	r2, [sp, #16]
   1561c:	ldr	r2, [sp, #20]
   15620:	str	r1, [sp, #12]
   15624:	mov	r0, r6
   15628:	mov	r1, r4
   1562c:	bl	14488 <__assert_fail@plt+0x33e8>
   15630:	ldr	r0, [sp, #24]
   15634:	ldr	r1, [sp, #32]
   15638:	ldr	r2, [sp, #28]
   1563c:	cmp	r0, #0
   15640:	str	r1, [r2]
   15644:	strne	r5, [r0]
   15648:	mov	r0, r6
   1564c:	sub	sp, fp, #28
   15650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15654:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15658:	add	fp, sp, #24
   1565c:	movw	r5, #41212	; 0xa0fc
   15660:	movw	r8, #41208	; 0xa0f8
   15664:	movt	r5, #2
   15668:	movt	r8, #2
   1566c:	ldr	r0, [r5]
   15670:	ldr	r4, [r8]
   15674:	cmp	r0, #2
   15678:	blt	156a4 <__assert_fail@plt+0x4604>
   1567c:	add	r7, r4, #12
   15680:	mov	r6, #0
   15684:	ldr	r0, [r7, r6, lsl #3]
   15688:	bl	14224 <__assert_fail@plt+0x3184>
   1568c:	ldr	r1, [r5]
   15690:	add	r2, r6, #2
   15694:	add	r0, r6, #1
   15698:	mov	r6, r0
   1569c:	cmp	r2, r1
   156a0:	blt	15684 <__assert_fail@plt+0x45e4>
   156a4:	ldr	r0, [r4, #4]
   156a8:	movw	r9, #50368	; 0xc4c0
   156ac:	movw	r7, #41216	; 0xa100
   156b0:	movt	r9, #2
   156b4:	movt	r7, #2
   156b8:	cmp	r0, r9
   156bc:	beq	156cc <__assert_fail@plt+0x462c>
   156c0:	bl	14224 <__assert_fail@plt+0x3184>
   156c4:	mov	r0, #256	; 0x100
   156c8:	stm	r7, {r0, r9}
   156cc:	cmp	r4, r7
   156d0:	beq	156e0 <__assert_fail@plt+0x4640>
   156d4:	mov	r0, r4
   156d8:	bl	14224 <__assert_fail@plt+0x3184>
   156dc:	str	r7, [r8]
   156e0:	mov	r0, #1
   156e4:	str	r0, [r5]
   156e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   156ec:	movw	r3, #50320	; 0xc490
   156f0:	mvn	r2, #0
   156f4:	movt	r3, #2
   156f8:	b	156fc <__assert_fail@plt+0x465c>
   156fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15700:	add	fp, sp, #28
   15704:	sub	sp, sp, #44	; 0x2c
   15708:	mov	r7, r3
   1570c:	str	r2, [sp, #36]	; 0x24
   15710:	str	r1, [sp, #32]
   15714:	mov	r5, r0
   15718:	bl	10fe0 <__errno_location@plt>
   1571c:	cmp	r5, #0
   15720:	bmi	15890 <__assert_fail@plt+0x47f0>
   15724:	cmn	r5, #-2147483647	; 0x80000001
   15728:	beq	15890 <__assert_fail@plt+0x47f0>
   1572c:	movw	r8, #41212	; 0xa0fc
   15730:	movw	r4, #41208	; 0xa0f8
   15734:	str	r0, [sp, #28]
   15738:	ldr	r0, [r0]
   1573c:	movt	r8, #2
   15740:	movt	r4, #2
   15744:	ldr	r1, [r8]
   15748:	ldr	r6, [r4]
   1574c:	str	r0, [sp, #24]
   15750:	cmp	r1, r5
   15754:	ble	15760 <__assert_fail@plt+0x46c0>
   15758:	mov	sl, r6
   1575c:	b	157cc <__assert_fail@plt+0x472c>
   15760:	movw	r9, #41216	; 0xa100
   15764:	mov	r0, #8
   15768:	str	r1, [fp, #-32]	; 0xffffffe0
   1576c:	sub	r1, r5, r1
   15770:	mvn	r3, #-2147483648	; 0x80000000
   15774:	movt	r9, #2
   15778:	str	r0, [sp]
   1577c:	add	r2, r1, #1
   15780:	sub	r1, fp, #32
   15784:	subs	r0, r6, r9
   15788:	movne	r0, r6
   1578c:	bl	16938 <__assert_fail@plt+0x5898>
   15790:	mov	sl, r0
   15794:	cmp	r6, r9
   15798:	str	r0, [r4]
   1579c:	bne	157a8 <__assert_fail@plt+0x4708>
   157a0:	ldrd	r0, [r9]
   157a4:	stm	sl, {r0, r1}
   157a8:	ldr	r1, [r8]
   157ac:	ldr	r2, [fp, #-32]	; 0xffffffe0
   157b0:	add	r0, sl, r1, lsl #3
   157b4:	sub	r1, r2, r1
   157b8:	lsl	r2, r1, #3
   157bc:	mov	r1, #0
   157c0:	bl	11004 <memset@plt>
   157c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   157c8:	str	r0, [r8]
   157cc:	mov	r9, sl
   157d0:	ldm	r7, {r0, r1}
   157d4:	orr	r8, r1, #1
   157d8:	add	r1, r7, #8
   157dc:	ldr	r2, [r7, #40]	; 0x28
   157e0:	ldr	r3, [r7, #44]	; 0x2c
   157e4:	ldr	r6, [r9, r5, lsl #3]!
   157e8:	str	r1, [sp, #20]
   157ec:	ldr	r4, [r9, #4]!
   157f0:	stm	sp, {r0, r8}
   157f4:	add	r0, sp, #8
   157f8:	stm	r0, {r1, r2, r3}
   157fc:	ldr	r2, [sp, #32]
   15800:	ldr	r3, [sp, #36]	; 0x24
   15804:	mov	r1, r6
   15808:	mov	r0, r4
   1580c:	bl	14488 <__assert_fail@plt+0x33e8>
   15810:	cmp	r6, r0
   15814:	bhi	15878 <__assert_fail@plt+0x47d8>
   15818:	add	r6, r0, #1
   1581c:	movw	r0, #50368	; 0xc4c0
   15820:	movt	r0, #2
   15824:	str	r6, [sl, r5, lsl #3]
   15828:	cmp	r4, r0
   1582c:	beq	15838 <__assert_fail@plt+0x4798>
   15830:	mov	r0, r4
   15834:	bl	14224 <__assert_fail@plt+0x3184>
   15838:	mov	r0, r6
   1583c:	bl	16738 <__assert_fail@plt+0x5698>
   15840:	str	r0, [r9]
   15844:	mov	r4, r0
   15848:	add	r3, sp, #8
   1584c:	ldr	r0, [r7]
   15850:	ldr	r1, [r7, #40]	; 0x28
   15854:	ldr	r2, [r7, #44]	; 0x2c
   15858:	stm	sp, {r0, r8}
   1585c:	ldr	r0, [sp, #20]
   15860:	stm	r3, {r0, r1, r2}
   15864:	ldr	r2, [sp, #32]
   15868:	ldr	r3, [sp, #36]	; 0x24
   1586c:	mov	r0, r4
   15870:	mov	r1, r6
   15874:	bl	14488 <__assert_fail@plt+0x33e8>
   15878:	ldr	r0, [sp, #28]
   1587c:	ldr	r1, [sp, #24]
   15880:	str	r1, [r0]
   15884:	mov	r0, r4
   15888:	sub	sp, fp, #28
   1588c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15890:	bl	11088 <abort@plt>
   15894:	movw	r3, #50320	; 0xc490
   15898:	movt	r3, #2
   1589c:	b	156fc <__assert_fail@plt+0x465c>
   158a0:	movw	r3, #50320	; 0xc490
   158a4:	mov	r1, r0
   158a8:	mov	r0, #0
   158ac:	mvn	r2, #0
   158b0:	movt	r3, #2
   158b4:	b	156fc <__assert_fail@plt+0x465c>
   158b8:	movw	r3, #50320	; 0xc490
   158bc:	mov	r2, r1
   158c0:	mov	r1, r0
   158c4:	mov	r0, #0
   158c8:	movt	r3, #2
   158cc:	b	156fc <__assert_fail@plt+0x465c>
   158d0:	push	{fp, lr}
   158d4:	mov	fp, sp
   158d8:	sub	sp, sp, #48	; 0x30
   158dc:	vmov.i32	q8, #0	; 0x00000000
   158e0:	mov	ip, #32
   158e4:	mov	r3, sp
   158e8:	mov	lr, r2
   158ec:	cmp	r1, #10
   158f0:	add	r2, r3, #16
   158f4:	vst1.64	{d16-d17}, [r3], ip
   158f8:	vst1.64	{d16-d17}, [r2]
   158fc:	vst1.64	{d16-d17}, [r3]
   15900:	beq	15920 <__assert_fail@plt+0x4880>
   15904:	str	r1, [sp]
   15908:	mov	r3, sp
   1590c:	mov	r1, lr
   15910:	mvn	r2, #0
   15914:	bl	156fc <__assert_fail@plt+0x465c>
   15918:	mov	sp, fp
   1591c:	pop	{fp, pc}
   15920:	bl	11088 <abort@plt>
   15924:	push	{r4, sl, fp, lr}
   15928:	add	fp, sp, #8
   1592c:	sub	sp, sp, #48	; 0x30
   15930:	vmov.i32	q8, #0	; 0x00000000
   15934:	mov	ip, r3
   15938:	mov	r3, sp
   1593c:	mov	lr, #32
   15940:	cmp	r1, #10
   15944:	add	r4, r3, #16
   15948:	vst1.64	{d16-d17}, [r3], lr
   1594c:	vst1.64	{d16-d17}, [r4]
   15950:	vst1.64	{d16-d17}, [r3]
   15954:	beq	15974 <__assert_fail@plt+0x48d4>
   15958:	str	r1, [sp]
   1595c:	mov	r1, r2
   15960:	mov	r3, sp
   15964:	mov	r2, ip
   15968:	bl	156fc <__assert_fail@plt+0x465c>
   1596c:	sub	sp, fp, #8
   15970:	pop	{r4, sl, fp, pc}
   15974:	bl	11088 <abort@plt>
   15978:	push	{fp, lr}
   1597c:	mov	fp, sp
   15980:	sub	sp, sp, #48	; 0x30
   15984:	vmov.i32	q8, #0	; 0x00000000
   15988:	mov	r3, sp
   1598c:	mov	ip, #32
   15990:	cmp	r0, #10
   15994:	add	r2, r3, #16
   15998:	vst1.64	{d16-d17}, [r3], ip
   1599c:	vst1.64	{d16-d17}, [r2]
   159a0:	vst1.64	{d16-d17}, [r3]
   159a4:	beq	159c4 <__assert_fail@plt+0x4924>
   159a8:	str	r0, [sp]
   159ac:	mov	r3, sp
   159b0:	mov	r0, #0
   159b4:	mvn	r2, #0
   159b8:	bl	156fc <__assert_fail@plt+0x465c>
   159bc:	mov	sp, fp
   159c0:	pop	{fp, pc}
   159c4:	bl	11088 <abort@plt>
   159c8:	push	{fp, lr}
   159cc:	mov	fp, sp
   159d0:	sub	sp, sp, #48	; 0x30
   159d4:	vmov.i32	q8, #0	; 0x00000000
   159d8:	mov	r3, sp
   159dc:	mov	ip, #32
   159e0:	cmp	r0, #10
   159e4:	add	lr, r3, #16
   159e8:	vst1.64	{d16-d17}, [r3], ip
   159ec:	vst1.64	{d16-d17}, [lr]
   159f0:	vst1.64	{d16-d17}, [r3]
   159f4:	beq	15a10 <__assert_fail@plt+0x4970>
   159f8:	str	r0, [sp]
   159fc:	mov	r3, sp
   15a00:	mov	r0, #0
   15a04:	bl	156fc <__assert_fail@plt+0x465c>
   15a08:	mov	sp, fp
   15a0c:	pop	{fp, pc}
   15a10:	bl	11088 <abort@plt>
   15a14:	push	{r4, sl, fp, lr}
   15a18:	add	fp, sp, #8
   15a1c:	sub	sp, sp, #48	; 0x30
   15a20:	mov	lr, r0
   15a24:	movw	r0, #50320	; 0xc490
   15a28:	mov	ip, r1
   15a2c:	mov	r1, #32
   15a30:	mov	r4, #1
   15a34:	movt	r0, #2
   15a38:	add	r3, r0, #16
   15a3c:	vld1.64	{d16-d17}, [r0], r1
   15a40:	vld1.64	{d20-d21}, [r0]
   15a44:	vld1.64	{d18-d19}, [r3]
   15a48:	mov	r3, sp
   15a4c:	add	r0, r3, #32
   15a50:	add	r1, r3, #16
   15a54:	vst1.64	{d20-d21}, [r0]
   15a58:	mov	r0, #28
   15a5c:	vst1.64	{d18-d19}, [r1]
   15a60:	mov	r1, r3
   15a64:	and	r0, r0, r2, lsr #3
   15a68:	and	r2, r2, #31
   15a6c:	vst1.64	{d16-d17}, [r1], r0
   15a70:	ldr	r0, [r1, #8]
   15a74:	bic	r4, r4, r0, lsr r2
   15a78:	eor	r0, r0, r4, lsl r2
   15a7c:	mov	r2, ip
   15a80:	str	r0, [r1, #8]
   15a84:	mov	r0, #0
   15a88:	mov	r1, lr
   15a8c:	bl	156fc <__assert_fail@plt+0x465c>
   15a90:	sub	sp, fp, #8
   15a94:	pop	{r4, sl, fp, pc}
   15a98:	push	{fp, lr}
   15a9c:	mov	fp, sp
   15aa0:	sub	sp, sp, #48	; 0x30
   15aa4:	mov	ip, r0
   15aa8:	movw	r0, #50320	; 0xc490
   15aac:	mov	r2, #32
   15ab0:	movt	r0, #2
   15ab4:	add	r3, r0, #16
   15ab8:	vld1.64	{d16-d17}, [r0], r2
   15abc:	vld1.64	{d20-d21}, [r0]
   15ac0:	vld1.64	{d18-d19}, [r3]
   15ac4:	mov	r3, sp
   15ac8:	add	r0, r3, #32
   15acc:	add	r2, r3, #16
   15ad0:	vst1.64	{d20-d21}, [r0]
   15ad4:	mov	r0, #28
   15ad8:	vst1.64	{d18-d19}, [r2]
   15adc:	mov	r2, r3
   15ae0:	and	r0, r0, r1, lsr #3
   15ae4:	and	r1, r1, #31
   15ae8:	vst1.64	{d16-d17}, [r2], r0
   15aec:	mov	r0, #1
   15af0:	ldr	lr, [r2, #8]
   15af4:	bic	r0, r0, lr, lsr r1
   15af8:	eor	r0, lr, r0, lsl r1
   15afc:	mov	r1, ip
   15b00:	str	r0, [r2, #8]
   15b04:	mov	r0, #0
   15b08:	mvn	r2, #0
   15b0c:	bl	156fc <__assert_fail@plt+0x465c>
   15b10:	mov	sp, fp
   15b14:	pop	{fp, pc}
   15b18:	push	{fp, lr}
   15b1c:	mov	fp, sp
   15b20:	sub	sp, sp, #48	; 0x30
   15b24:	mov	r1, r0
   15b28:	movw	r0, #50320	; 0xc490
   15b2c:	mov	r3, #32
   15b30:	movt	r0, #2
   15b34:	add	r2, r0, #16
   15b38:	vld1.64	{d16-d17}, [r0], r3
   15b3c:	mov	r3, sp
   15b40:	vld1.64	{d18-d19}, [r2]
   15b44:	vld1.64	{d20-d21}, [r0]
   15b48:	add	r2, r3, #16
   15b4c:	add	r0, r3, #32
   15b50:	vst1.64	{d18-d19}, [r2]
   15b54:	vst1.64	{d20-d21}, [r0]
   15b58:	mov	r0, #12
   15b5c:	mov	r2, r3
   15b60:	vst1.64	{d16-d17}, [r2], r0
   15b64:	ldr	r0, [r2]
   15b68:	orr	r0, r0, #67108864	; 0x4000000
   15b6c:	str	r0, [r2]
   15b70:	mov	r0, #0
   15b74:	mvn	r2, #0
   15b78:	bl	156fc <__assert_fail@plt+0x465c>
   15b7c:	mov	sp, fp
   15b80:	pop	{fp, pc}
   15b84:	push	{fp, lr}
   15b88:	mov	fp, sp
   15b8c:	sub	sp, sp, #48	; 0x30
   15b90:	mov	ip, r1
   15b94:	mov	r1, r0
   15b98:	movw	r0, #50320	; 0xc490
   15b9c:	mov	r2, #32
   15ba0:	movt	r0, #2
   15ba4:	add	r3, r0, #16
   15ba8:	vld1.64	{d16-d17}, [r0], r2
   15bac:	vld1.64	{d18-d19}, [r3]
   15bb0:	vld1.64	{d20-d21}, [r0]
   15bb4:	mov	r3, sp
   15bb8:	add	r2, r3, #16
   15bbc:	add	r0, r3, #32
   15bc0:	vst1.64	{d18-d19}, [r2]
   15bc4:	vst1.64	{d20-d21}, [r0]
   15bc8:	mov	r0, #12
   15bcc:	mov	r2, r3
   15bd0:	vst1.64	{d16-d17}, [r2], r0
   15bd4:	ldr	r0, [r2]
   15bd8:	orr	r0, r0, #67108864	; 0x4000000
   15bdc:	str	r0, [r2]
   15be0:	mov	r0, #0
   15be4:	mov	r2, ip
   15be8:	bl	156fc <__assert_fail@plt+0x465c>
   15bec:	mov	sp, fp
   15bf0:	pop	{fp, pc}
   15bf4:	push	{r4, sl, fp, lr}
   15bf8:	add	fp, sp, #8
   15bfc:	sub	sp, sp, #96	; 0x60
   15c00:	vmov.i32	q8, #0	; 0x00000000
   15c04:	mov	ip, r2
   15c08:	mov	r2, sp
   15c0c:	mov	r4, #28
   15c10:	cmp	r1, #10
   15c14:	mov	r3, r2
   15c18:	add	lr, r2, #16
   15c1c:	vst1.64	{d16-d17}, [r3], r4
   15c20:	vst1.64	{d16-d17}, [lr]
   15c24:	vst1.32	{d16-d17}, [r3]
   15c28:	beq	15c78 <__assert_fail@plt+0x4bd8>
   15c2c:	vld1.64	{d16-d17}, [r2], r4
   15c30:	vld1.64	{d18-d19}, [lr]
   15c34:	add	r3, sp, #48	; 0x30
   15c38:	vld1.32	{d20-d21}, [r2]
   15c3c:	add	r2, r3, #20
   15c40:	add	r4, r3, #4
   15c44:	vst1.32	{d18-d19}, [r2]
   15c48:	add	r2, r3, #32
   15c4c:	vst1.32	{d16-d17}, [r4]
   15c50:	vst1.32	{d20-d21}, [r2]
   15c54:	str	r1, [sp, #48]	; 0x30
   15c58:	mvn	r2, #0
   15c5c:	ldr	r1, [sp, #60]	; 0x3c
   15c60:	orr	r1, r1, #67108864	; 0x4000000
   15c64:	str	r1, [sp, #60]	; 0x3c
   15c68:	mov	r1, ip
   15c6c:	bl	156fc <__assert_fail@plt+0x465c>
   15c70:	sub	sp, fp, #8
   15c74:	pop	{r4, sl, fp, pc}
   15c78:	bl	11088 <abort@plt>
   15c7c:	push	{r4, r5, r6, sl, fp, lr}
   15c80:	add	fp, sp, #16
   15c84:	sub	sp, sp, #48	; 0x30
   15c88:	mov	ip, r3
   15c8c:	movw	r3, #50320	; 0xc490
   15c90:	mov	r6, #32
   15c94:	cmp	r1, #0
   15c98:	mov	r4, sp
   15c9c:	movt	r3, #2
   15ca0:	cmpne	r2, #0
   15ca4:	add	r5, r4, #16
   15ca8:	add	lr, r3, #16
   15cac:	vld1.64	{d16-d17}, [r3], r6
   15cb0:	vld1.64	{d18-d19}, [lr]
   15cb4:	vld1.64	{d20-d21}, [r3]
   15cb8:	mov	r3, #10
   15cbc:	vst1.64	{d16-d17}, [r4], r6
   15cc0:	vst1.64	{d18-d19}, [r5]
   15cc4:	vst1.64	{d20-d21}, [r4]
   15cc8:	str	r3, [sp]
   15ccc:	bne	15cd4 <__assert_fail@plt+0x4c34>
   15cd0:	bl	11088 <abort@plt>
   15cd4:	str	r2, [sp, #44]	; 0x2c
   15cd8:	str	r1, [sp, #40]	; 0x28
   15cdc:	mov	r3, sp
   15ce0:	mov	r1, ip
   15ce4:	mvn	r2, #0
   15ce8:	bl	156fc <__assert_fail@plt+0x465c>
   15cec:	sub	sp, fp, #16
   15cf0:	pop	{r4, r5, r6, sl, fp, pc}
   15cf4:	push	{r4, r5, r6, sl, fp, lr}
   15cf8:	add	fp, sp, #16
   15cfc:	sub	sp, sp, #48	; 0x30
   15d00:	mov	lr, r3
   15d04:	movw	r3, #50320	; 0xc490
   15d08:	mov	r6, #32
   15d0c:	cmp	r1, #0
   15d10:	mov	r4, sp
   15d14:	movt	r3, #2
   15d18:	cmpne	r2, #0
   15d1c:	add	r5, r4, #16
   15d20:	add	ip, r3, #16
   15d24:	vld1.64	{d16-d17}, [r3], r6
   15d28:	vld1.64	{d18-d19}, [ip]
   15d2c:	vld1.64	{d20-d21}, [r3]
   15d30:	mov	r3, #10
   15d34:	vst1.64	{d16-d17}, [r4], r6
   15d38:	vst1.64	{d18-d19}, [r5]
   15d3c:	vst1.64	{d20-d21}, [r4]
   15d40:	str	r3, [sp]
   15d44:	bne	15d4c <__assert_fail@plt+0x4cac>
   15d48:	bl	11088 <abort@plt>
   15d4c:	ldr	ip, [fp, #8]
   15d50:	str	r2, [sp, #44]	; 0x2c
   15d54:	str	r1, [sp, #40]	; 0x28
   15d58:	mov	r3, sp
   15d5c:	mov	r1, lr
   15d60:	mov	r2, ip
   15d64:	bl	156fc <__assert_fail@plt+0x465c>
   15d68:	sub	sp, fp, #16
   15d6c:	pop	{r4, r5, r6, sl, fp, pc}
   15d70:	push	{r4, sl, fp, lr}
   15d74:	add	fp, sp, #8
   15d78:	sub	sp, sp, #48	; 0x30
   15d7c:	movw	r3, #50320	; 0xc490
   15d80:	mov	lr, #32
   15d84:	mov	ip, r2
   15d88:	cmp	r0, #0
   15d8c:	movt	r3, #2
   15d90:	cmpne	r1, #0
   15d94:	add	r2, r3, #16
   15d98:	vld1.64	{d16-d17}, [r3], lr
   15d9c:	vld1.64	{d20-d21}, [r3]
   15da0:	vld1.64	{d18-d19}, [r2]
   15da4:	mov	r2, sp
   15da8:	add	r4, r2, #16
   15dac:	vst1.64	{d16-d17}, [r2], lr
   15db0:	vst1.64	{d20-d21}, [r2]
   15db4:	mov	r2, #10
   15db8:	vst1.64	{d18-d19}, [r4]
   15dbc:	str	r2, [sp]
   15dc0:	bne	15dc8 <__assert_fail@plt+0x4d28>
   15dc4:	bl	11088 <abort@plt>
   15dc8:	str	r1, [sp, #44]	; 0x2c
   15dcc:	str	r0, [sp, #40]	; 0x28
   15dd0:	mov	r3, sp
   15dd4:	mov	r0, #0
   15dd8:	mov	r1, ip
   15ddc:	mvn	r2, #0
   15de0:	bl	156fc <__assert_fail@plt+0x465c>
   15de4:	sub	sp, fp, #8
   15de8:	pop	{r4, sl, fp, pc}
   15dec:	push	{r4, r5, fp, lr}
   15df0:	add	fp, sp, #8
   15df4:	sub	sp, sp, #48	; 0x30
   15df8:	mov	ip, r3
   15dfc:	movw	r3, #50320	; 0xc490
   15e00:	mov	r4, #32
   15e04:	mov	lr, r2
   15e08:	cmp	r0, #0
   15e0c:	movt	r3, #2
   15e10:	cmpne	r1, #0
   15e14:	add	r2, r3, #16
   15e18:	vld1.64	{d16-d17}, [r3], r4
   15e1c:	vld1.64	{d20-d21}, [r3]
   15e20:	vld1.64	{d18-d19}, [r2]
   15e24:	mov	r2, sp
   15e28:	add	r5, r2, #16
   15e2c:	vst1.64	{d16-d17}, [r2], r4
   15e30:	vst1.64	{d20-d21}, [r2]
   15e34:	mov	r2, #10
   15e38:	vst1.64	{d18-d19}, [r5]
   15e3c:	str	r2, [sp]
   15e40:	bne	15e48 <__assert_fail@plt+0x4da8>
   15e44:	bl	11088 <abort@plt>
   15e48:	str	r1, [sp, #44]	; 0x2c
   15e4c:	str	r0, [sp, #40]	; 0x28
   15e50:	mov	r3, sp
   15e54:	mov	r0, #0
   15e58:	mov	r1, lr
   15e5c:	mov	r2, ip
   15e60:	bl	156fc <__assert_fail@plt+0x465c>
   15e64:	sub	sp, fp, #8
   15e68:	pop	{r4, r5, fp, pc}
   15e6c:	movw	r3, #41224	; 0xa108
   15e70:	movt	r3, #2
   15e74:	b	156fc <__assert_fail@plt+0x465c>
   15e78:	movw	r3, #41224	; 0xa108
   15e7c:	mov	r2, r1
   15e80:	mov	r1, r0
   15e84:	mov	r0, #0
   15e88:	movt	r3, #2
   15e8c:	b	156fc <__assert_fail@plt+0x465c>
   15e90:	movw	r3, #41224	; 0xa108
   15e94:	mvn	r2, #0
   15e98:	movt	r3, #2
   15e9c:	b	156fc <__assert_fail@plt+0x465c>
   15ea0:	movw	r3, #41224	; 0xa108
   15ea4:	mov	r1, r0
   15ea8:	mov	r0, #0
   15eac:	mvn	r2, #0
   15eb0:	movt	r3, #2
   15eb4:	b	156fc <__assert_fail@plt+0x465c>
   15eb8:	push	{r4, r5, fp, lr}
   15ebc:	add	fp, sp, #8
   15ec0:	mov	r5, r0
   15ec4:	mov	r4, r1
   15ec8:	mov	r0, #0
   15ecc:	mov	r2, #5
   15ed0:	mov	r1, r5
   15ed4:	bl	10ed8 <dcgettext@plt>
   15ed8:	cmp	r0, r5
   15edc:	popne	{r4, r5, fp, pc}
   15ee0:	bl	17c24 <__assert_fail@plt+0x6b84>
   15ee4:	ldrb	r1, [r0]
   15ee8:	and	r1, r1, #223	; 0xdf
   15eec:	cmp	r1, #71	; 0x47
   15ef0:	beq	15f58 <__assert_fail@plt+0x4eb8>
   15ef4:	cmp	r1, #85	; 0x55
   15ef8:	bne	15fb0 <__assert_fail@plt+0x4f10>
   15efc:	ldrb	r1, [r0, #1]
   15f00:	and	r1, r1, #223	; 0xdf
   15f04:	cmp	r1, #84	; 0x54
   15f08:	bne	15fb0 <__assert_fail@plt+0x4f10>
   15f0c:	ldrb	r1, [r0, #2]
   15f10:	and	r1, r1, #223	; 0xdf
   15f14:	cmp	r1, #70	; 0x46
   15f18:	bne	15fb0 <__assert_fail@plt+0x4f10>
   15f1c:	ldrb	r1, [r0, #3]
   15f20:	cmp	r1, #45	; 0x2d
   15f24:	bne	15fb0 <__assert_fail@plt+0x4f10>
   15f28:	ldrb	r1, [r0, #4]
   15f2c:	cmp	r1, #56	; 0x38
   15f30:	bne	15fb0 <__assert_fail@plt+0x4f10>
   15f34:	ldrb	r0, [r0, #5]
   15f38:	cmp	r0, #0
   15f3c:	bne	15fb0 <__assert_fail@plt+0x4f10>
   15f40:	ldrb	r1, [r5]
   15f44:	movw	r2, #38362	; 0x95da
   15f48:	movw	r0, #38366	; 0x95de
   15f4c:	movt	r2, #1
   15f50:	movt	r0, #1
   15f54:	b	15fe0 <__assert_fail@plt+0x4f40>
   15f58:	ldrb	r1, [r0, #1]
   15f5c:	and	r1, r1, #223	; 0xdf
   15f60:	cmp	r1, #66	; 0x42
   15f64:	bne	15fb0 <__assert_fail@plt+0x4f10>
   15f68:	ldrb	r1, [r0, #2]
   15f6c:	cmp	r1, #49	; 0x31
   15f70:	bne	15fb0 <__assert_fail@plt+0x4f10>
   15f74:	ldrb	r1, [r0, #3]
   15f78:	cmp	r1, #56	; 0x38
   15f7c:	bne	15fb0 <__assert_fail@plt+0x4f10>
   15f80:	ldrb	r1, [r0, #4]
   15f84:	cmp	r1, #48	; 0x30
   15f88:	bne	15fb0 <__assert_fail@plt+0x4f10>
   15f8c:	ldrb	r1, [r0, #5]
   15f90:	cmp	r1, #51	; 0x33
   15f94:	bne	15fb0 <__assert_fail@plt+0x4f10>
   15f98:	ldrb	r1, [r0, #6]
   15f9c:	cmp	r1, #48	; 0x30
   15fa0:	bne	15fb0 <__assert_fail@plt+0x4f10>
   15fa4:	ldrb	r0, [r0, #7]
   15fa8:	cmp	r0, #0
   15fac:	beq	15fcc <__assert_fail@plt+0x4f2c>
   15fb0:	movw	r1, #38358	; 0x95d6
   15fb4:	movw	r0, #36108	; 0x8d0c
   15fb8:	cmp	r4, #9
   15fbc:	movt	r1, #1
   15fc0:	movt	r0, #1
   15fc4:	moveq	r0, r1
   15fc8:	pop	{r4, r5, fp, pc}
   15fcc:	ldrb	r1, [r5]
   15fd0:	movw	r2, #38370	; 0x95e2
   15fd4:	movw	r0, #38374	; 0x95e6
   15fd8:	movt	r2, #1
   15fdc:	movt	r0, #1
   15fe0:	cmp	r1, #96	; 0x60
   15fe4:	moveq	r0, r2
   15fe8:	pop	{r4, r5, fp, pc}
   15fec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15ff0:	add	fp, sp, #24
   15ff4:	movw	r8, #0
   15ff8:	mov	r6, r2
   15ffc:	mov	r4, r1
   16000:	mov	r5, r0
   16004:	movt	r8, #32752	; 0x7ff0
   16008:	mov	r0, r5
   1600c:	mov	r1, r4
   16010:	mov	r2, r6
   16014:	bl	10e6c <read@plt>
   16018:	mov	r7, r0
   1601c:	cmn	r0, #1
   16020:	bgt	16048 <__assert_fail@plt+0x4fa8>
   16024:	bl	10fe0 <__errno_location@plt>
   16028:	ldr	r0, [r0]
   1602c:	cmp	r0, #4
   16030:	beq	16008 <__assert_fail@plt+0x4f68>
   16034:	cmp	r6, r8
   16038:	bls	16048 <__assert_fail@plt+0x4fa8>
   1603c:	cmp	r0, #22
   16040:	mov	r6, r8
   16044:	beq	16008 <__assert_fail@plt+0x4f68>
   16048:	mov	r0, r7
   1604c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16050:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16054:	add	fp, sp, #24
   16058:	sub	sp, sp, #32
   1605c:	ldr	r6, [fp, #12]
   16060:	ldr	r7, [fp, #8]
   16064:	mov	r4, r2
   16068:	mov	r8, r0
   1606c:	cmp	r1, #0
   16070:	beq	16098 <__assert_fail@plt+0x4ff8>
   16074:	movw	r2, #38464	; 0x9640
   16078:	mov	r5, r1
   1607c:	str	r3, [sp, #4]
   16080:	str	r4, [sp]
   16084:	mov	r0, r8
   16088:	mov	r1, #1
   1608c:	movt	r2, #1
   16090:	mov	r3, r5
   16094:	b	160b0 <__assert_fail@plt+0x5010>
   16098:	movw	r2, #38476	; 0x964c
   1609c:	str	r3, [sp]
   160a0:	mov	r0, r8
   160a4:	mov	r1, #1
   160a8:	mov	r3, r4
   160ac:	movt	r2, #1
   160b0:	bl	11028 <__fprintf_chk@plt>
   160b4:	movw	r1, #38483	; 0x9653
   160b8:	mov	r0, #0
   160bc:	mov	r2, #5
   160c0:	movt	r1, #1
   160c4:	bl	10ed8 <dcgettext@plt>
   160c8:	movw	r2, #39201	; 0x9921
   160cc:	mov	r3, r0
   160d0:	movw	r0, #2022	; 0x7e6
   160d4:	mov	r1, #1
   160d8:	movt	r2, #1
   160dc:	str	r0, [sp]
   160e0:	mov	r0, r8
   160e4:	bl	11028 <__fprintf_chk@plt>
   160e8:	movw	r4, #35846	; 0x8c06
   160ec:	mov	r1, r8
   160f0:	movt	r4, #1
   160f4:	mov	r0, r4
   160f8:	bl	10e3c <fputs_unlocked@plt>
   160fc:	movw	r1, #38487	; 0x9657
   16100:	mov	r0, #0
   16104:	mov	r2, #5
   16108:	movt	r1, #1
   1610c:	bl	10ed8 <dcgettext@plt>
   16110:	movw	r3, #38658	; 0x9702
   16114:	mov	r2, r0
   16118:	mov	r0, r8
   1611c:	mov	r1, #1
   16120:	movt	r3, #1
   16124:	bl	11028 <__fprintf_chk@plt>
   16128:	mov	r0, r4
   1612c:	mov	r1, r8
   16130:	bl	10e3c <fputs_unlocked@plt>
   16134:	cmp	r6, #9
   16138:	bhi	16174 <__assert_fail@plt+0x50d4>
   1613c:	add	r0, pc, #0
   16140:	ldr	pc, [r0, r6, lsl #2]
   16144:	andeq	r6, r1, ip, ror #2
   16148:	andeq	r6, r1, r0, lsl #3
   1614c:			; <UNDEFINED> instruction: 0x000161b0
   16150:	ldrdeq	r6, [r1], -r8
   16154:	andeq	r6, r1, r0, lsl #4
   16158:	andeq	r6, r1, r8, lsr #4
   1615c:	andeq	r6, r1, r0, asr r2
   16160:	andeq	r6, r1, r8, lsl #5
   16164:	andeq	r6, r1, r8, lsr #6
   16168:	ldrdeq	r6, [r1], -r0
   1616c:	sub	sp, fp, #24
   16170:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16174:	movw	r1, #39011	; 0x9863
   16178:	movt	r1, #1
   1617c:	b	162d8 <__assert_fail@plt+0x5238>
   16180:	movw	r1, #38692	; 0x9724
   16184:	mov	r0, #0
   16188:	mov	r2, #5
   1618c:	movt	r1, #1
   16190:	bl	10ed8 <dcgettext@plt>
   16194:	ldr	r3, [r7]
   16198:	mov	r2, r0
   1619c:	mov	r0, r8
   161a0:	mov	r1, #1
   161a4:	sub	sp, fp, #24
   161a8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   161ac:	b	11028 <__fprintf_chk@plt>
   161b0:	movw	r1, #38708	; 0x9734
   161b4:	mov	r0, #0
   161b8:	mov	r2, #5
   161bc:	movt	r1, #1
   161c0:	bl	10ed8 <dcgettext@plt>
   161c4:	mov	r2, r0
   161c8:	ldr	r3, [r7]
   161cc:	ldr	r0, [r7, #4]
   161d0:	str	r0, [sp]
   161d4:	b	162c4 <__assert_fail@plt+0x5224>
   161d8:	movw	r1, #38731	; 0x974b
   161dc:	mov	r0, #0
   161e0:	mov	r2, #5
   161e4:	movt	r1, #1
   161e8:	bl	10ed8 <dcgettext@plt>
   161ec:	mov	r2, r0
   161f0:	ldr	r3, [r7]
   161f4:	ldmib	r7, {r0, r1}
   161f8:	stm	sp, {r0, r1}
   161fc:	b	162c4 <__assert_fail@plt+0x5224>
   16200:	movw	r1, #38759	; 0x9767
   16204:	mov	r0, #0
   16208:	mov	r2, #5
   1620c:	movt	r1, #1
   16210:	bl	10ed8 <dcgettext@plt>
   16214:	ldr	r3, [r7]
   16218:	mov	r2, r0
   1621c:	ldmib	r7, {r0, r1, r7}
   16220:	stm	sp, {r0, r1, r7}
   16224:	b	162c4 <__assert_fail@plt+0x5224>
   16228:	movw	r1, #38791	; 0x9787
   1622c:	mov	r0, #0
   16230:	mov	r2, #5
   16234:	movt	r1, #1
   16238:	bl	10ed8 <dcgettext@plt>
   1623c:	ldr	r3, [r7]
   16240:	mov	r2, r0
   16244:	ldmib	r7, {r0, r1, r6, r7}
   16248:	stm	sp, {r0, r1, r6, r7}
   1624c:	b	162c4 <__assert_fail@plt+0x5224>
   16250:	movw	r1, #38827	; 0x97ab
   16254:	mov	r0, #0
   16258:	mov	r2, #5
   1625c:	movt	r1, #1
   16260:	bl	10ed8 <dcgettext@plt>
   16264:	mov	r2, r0
   16268:	ldr	r3, [r7]
   1626c:	ldmib	r7, {r0, r1, r6}
   16270:	ldr	r5, [r7, #16]
   16274:	ldr	r7, [r7, #20]
   16278:	stm	sp, {r0, r1, r6}
   1627c:	str	r5, [sp, #12]
   16280:	str	r7, [sp, #16]
   16284:	b	162c4 <__assert_fail@plt+0x5224>
   16288:	movw	r1, #38867	; 0x97d3
   1628c:	mov	r0, #0
   16290:	mov	r2, #5
   16294:	movt	r1, #1
   16298:	bl	10ed8 <dcgettext@plt>
   1629c:	mov	r2, r0
   162a0:	ldr	r3, [r7]
   162a4:	ldmib	r7, {r0, r1, r6}
   162a8:	ldr	r5, [r7, #16]
   162ac:	ldr	r4, [r7, #20]
   162b0:	ldr	r7, [r7, #24]
   162b4:	stm	sp, {r0, r1, r6}
   162b8:	str	r5, [sp, #12]
   162bc:	str	r4, [sp, #16]
   162c0:	str	r7, [sp, #20]
   162c4:	mov	r0, r8
   162c8:	mov	r1, #1
   162cc:	b	16378 <__assert_fail@plt+0x52d8>
   162d0:	movw	r1, #38959	; 0x982f
   162d4:	movt	r1, #1
   162d8:	mov	r0, #0
   162dc:	mov	r2, #5
   162e0:	bl	10ed8 <dcgettext@plt>
   162e4:	mov	ip, r0
   162e8:	ldr	r3, [r7]
   162ec:	ldr	r0, [r7, #4]
   162f0:	ldr	r1, [r7, #8]
   162f4:	ldr	r6, [r7, #12]
   162f8:	ldr	r5, [r7, #16]
   162fc:	ldr	r4, [r7, #20]
   16300:	ldr	r2, [r7, #24]
   16304:	ldr	lr, [r7, #28]
   16308:	ldr	r7, [r7, #32]
   1630c:	stm	sp, {r0, r1, r6}
   16310:	str	r5, [sp, #12]
   16314:	str	r4, [sp, #16]
   16318:	str	r2, [sp, #20]
   1631c:	str	lr, [sp, #24]
   16320:	str	r7, [sp, #28]
   16324:	b	1636c <__assert_fail@plt+0x52cc>
   16328:	movw	r1, #38911	; 0x97ff
   1632c:	mov	r0, #0
   16330:	mov	r2, #5
   16334:	movt	r1, #1
   16338:	bl	10ed8 <dcgettext@plt>
   1633c:	mov	ip, r0
   16340:	ldr	r3, [r7]
   16344:	ldmib	r7, {r0, r1, r6}
   16348:	ldr	r5, [r7, #16]
   1634c:	ldr	r4, [r7, #20]
   16350:	ldr	r2, [r7, #24]
   16354:	ldr	r7, [r7, #28]
   16358:	stm	sp, {r0, r1, r6}
   1635c:	str	r5, [sp, #12]
   16360:	str	r4, [sp, #16]
   16364:	str	r2, [sp, #20]
   16368:	str	r7, [sp, #24]
   1636c:	mov	r0, r8
   16370:	mov	r1, #1
   16374:	mov	r2, ip
   16378:	bl	11028 <__fprintf_chk@plt>
   1637c:	sub	sp, fp, #24
   16380:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16384:	push	{r4, sl, fp, lr}
   16388:	add	fp, sp, #8
   1638c:	sub	sp, sp, #8
   16390:	ldr	ip, [fp, #8]
   16394:	mov	lr, #0
   16398:	ldr	r4, [ip, lr, lsl #2]
   1639c:	add	lr, lr, #1
   163a0:	cmp	r4, #0
   163a4:	bne	16398 <__assert_fail@plt+0x52f8>
   163a8:	sub	r4, lr, #1
   163ac:	str	ip, [sp]
   163b0:	str	r4, [sp, #4]
   163b4:	bl	16050 <__assert_fail@plt+0x4fb0>
   163b8:	sub	sp, fp, #8
   163bc:	pop	{r4, sl, fp, pc}
   163c0:	push	{fp, lr}
   163c4:	mov	fp, sp
   163c8:	sub	sp, sp, #48	; 0x30
   163cc:	ldr	ip, [fp, #8]
   163d0:	ldr	lr, [ip]
   163d4:	cmp	lr, #0
   163d8:	str	lr, [sp, #8]
   163dc:	beq	16478 <__assert_fail@plt+0x53d8>
   163e0:	ldr	lr, [ip, #4]
   163e4:	cmp	lr, #0
   163e8:	str	lr, [sp, #12]
   163ec:	beq	16480 <__assert_fail@plt+0x53e0>
   163f0:	ldr	lr, [ip, #8]
   163f4:	cmp	lr, #0
   163f8:	str	lr, [sp, #16]
   163fc:	beq	16488 <__assert_fail@plt+0x53e8>
   16400:	ldr	lr, [ip, #12]
   16404:	cmp	lr, #0
   16408:	str	lr, [sp, #20]
   1640c:	beq	16490 <__assert_fail@plt+0x53f0>
   16410:	ldr	lr, [ip, #16]
   16414:	cmp	lr, #0
   16418:	str	lr, [sp, #24]
   1641c:	beq	16498 <__assert_fail@plt+0x53f8>
   16420:	ldr	lr, [ip, #20]
   16424:	cmp	lr, #0
   16428:	str	lr, [sp, #28]
   1642c:	beq	164a0 <__assert_fail@plt+0x5400>
   16430:	ldr	lr, [ip, #24]
   16434:	cmp	lr, #0
   16438:	str	lr, [sp, #32]
   1643c:	beq	164a8 <__assert_fail@plt+0x5408>
   16440:	ldr	lr, [ip, #28]
   16444:	cmp	lr, #0
   16448:	str	lr, [sp, #36]	; 0x24
   1644c:	beq	164b0 <__assert_fail@plt+0x5410>
   16450:	ldr	lr, [ip, #32]
   16454:	cmp	lr, #0
   16458:	str	lr, [sp, #40]	; 0x28
   1645c:	beq	164b8 <__assert_fail@plt+0x5418>
   16460:	ldr	lr, [ip, #36]	; 0x24
   16464:	mov	ip, #10
   16468:	cmp	lr, #0
   1646c:	str	lr, [sp, #44]	; 0x2c
   16470:	movweq	ip, #9
   16474:	b	164bc <__assert_fail@plt+0x541c>
   16478:	mov	ip, #0
   1647c:	b	164bc <__assert_fail@plt+0x541c>
   16480:	mov	ip, #1
   16484:	b	164bc <__assert_fail@plt+0x541c>
   16488:	mov	ip, #2
   1648c:	b	164bc <__assert_fail@plt+0x541c>
   16490:	mov	ip, #3
   16494:	b	164bc <__assert_fail@plt+0x541c>
   16498:	mov	ip, #4
   1649c:	b	164bc <__assert_fail@plt+0x541c>
   164a0:	mov	ip, #5
   164a4:	b	164bc <__assert_fail@plt+0x541c>
   164a8:	mov	ip, #6
   164ac:	b	164bc <__assert_fail@plt+0x541c>
   164b0:	mov	ip, #7
   164b4:	b	164bc <__assert_fail@plt+0x541c>
   164b8:	mov	ip, #8
   164bc:	add	lr, sp, #8
   164c0:	str	ip, [sp, #4]
   164c4:	str	lr, [sp]
   164c8:	bl	16050 <__assert_fail@plt+0x4fb0>
   164cc:	mov	sp, fp
   164d0:	pop	{fp, pc}
   164d4:	push	{fp, lr}
   164d8:	mov	fp, sp
   164dc:	sub	sp, sp, #56	; 0x38
   164e0:	add	ip, fp, #8
   164e4:	str	ip, [sp, #12]
   164e8:	ldr	lr, [fp, #8]
   164ec:	cmp	lr, #0
   164f0:	str	lr, [sp, #16]
   164f4:	beq	16590 <__assert_fail@plt+0x54f0>
   164f8:	ldr	lr, [ip, #4]
   164fc:	cmp	lr, #0
   16500:	str	lr, [sp, #20]
   16504:	beq	16598 <__assert_fail@plt+0x54f8>
   16508:	ldr	lr, [ip, #8]
   1650c:	cmp	lr, #0
   16510:	str	lr, [sp, #24]
   16514:	beq	165a0 <__assert_fail@plt+0x5500>
   16518:	ldr	lr, [ip, #12]
   1651c:	cmp	lr, #0
   16520:	str	lr, [sp, #28]
   16524:	beq	165a8 <__assert_fail@plt+0x5508>
   16528:	ldr	lr, [ip, #16]
   1652c:	cmp	lr, #0
   16530:	str	lr, [sp, #32]
   16534:	beq	165b0 <__assert_fail@plt+0x5510>
   16538:	ldr	lr, [ip, #20]
   1653c:	cmp	lr, #0
   16540:	str	lr, [sp, #36]	; 0x24
   16544:	beq	165b8 <__assert_fail@plt+0x5518>
   16548:	ldr	lr, [ip, #24]
   1654c:	cmp	lr, #0
   16550:	str	lr, [sp, #40]	; 0x28
   16554:	beq	165c0 <__assert_fail@plt+0x5520>
   16558:	ldr	lr, [ip, #28]
   1655c:	cmp	lr, #0
   16560:	str	lr, [sp, #44]	; 0x2c
   16564:	beq	165c8 <__assert_fail@plt+0x5528>
   16568:	ldr	lr, [ip, #32]
   1656c:	cmp	lr, #0
   16570:	str	lr, [sp, #48]	; 0x30
   16574:	beq	165d0 <__assert_fail@plt+0x5530>
   16578:	ldr	lr, [ip, #36]	; 0x24
   1657c:	mov	ip, #10
   16580:	cmp	lr, #0
   16584:	str	lr, [sp, #52]	; 0x34
   16588:	movweq	ip, #9
   1658c:	b	165d4 <__assert_fail@plt+0x5534>
   16590:	mov	ip, #0
   16594:	b	165d4 <__assert_fail@plt+0x5534>
   16598:	mov	ip, #1
   1659c:	b	165d4 <__assert_fail@plt+0x5534>
   165a0:	mov	ip, #2
   165a4:	b	165d4 <__assert_fail@plt+0x5534>
   165a8:	mov	ip, #3
   165ac:	b	165d4 <__assert_fail@plt+0x5534>
   165b0:	mov	ip, #4
   165b4:	b	165d4 <__assert_fail@plt+0x5534>
   165b8:	mov	ip, #5
   165bc:	b	165d4 <__assert_fail@plt+0x5534>
   165c0:	mov	ip, #6
   165c4:	b	165d4 <__assert_fail@plt+0x5534>
   165c8:	mov	ip, #7
   165cc:	b	165d4 <__assert_fail@plt+0x5534>
   165d0:	mov	ip, #8
   165d4:	add	lr, sp, #16
   165d8:	str	ip, [sp, #4]
   165dc:	str	lr, [sp]
   165e0:	bl	16050 <__assert_fail@plt+0x4fb0>
   165e4:	mov	sp, fp
   165e8:	pop	{fp, pc}
   165ec:	push	{fp, lr}
   165f0:	mov	fp, sp
   165f4:	movw	r0, #41308	; 0xa15c
   165f8:	movt	r0, #2
   165fc:	ldr	r1, [r0]
   16600:	movw	r0, #35846	; 0x8c06
   16604:	movt	r0, #1
   16608:	bl	10e3c <fputs_unlocked@plt>
   1660c:	movw	r1, #39071	; 0x989f
   16610:	mov	r0, #0
   16614:	mov	r2, #5
   16618:	movt	r1, #1
   1661c:	bl	10ed8 <dcgettext@plt>
   16620:	movw	r2, #39091	; 0x98b3
   16624:	mov	r1, r0
   16628:	mov	r0, #1
   1662c:	movt	r2, #1
   16630:	bl	11010 <__printf_chk@plt>
   16634:	movw	r1, #39113	; 0x98c9
   16638:	mov	r0, #0
   1663c:	mov	r2, #5
   16640:	movt	r1, #1
   16644:	bl	10ed8 <dcgettext@plt>
   16648:	movw	r2, #35159	; 0x8957
   1664c:	movw	r3, #35655	; 0x8b47
   16650:	mov	r1, r0
   16654:	mov	r0, #1
   16658:	movt	r2, #1
   1665c:	movt	r3, #1
   16660:	bl	11010 <__printf_chk@plt>
   16664:	movw	r1, #39133	; 0x98dd
   16668:	mov	r0, #0
   1666c:	mov	r2, #5
   16670:	movt	r1, #1
   16674:	bl	10ed8 <dcgettext@plt>
   16678:	movw	r2, #39172	; 0x9904
   1667c:	mov	r1, r0
   16680:	mov	r0, #1
   16684:	movt	r2, #1
   16688:	pop	{fp, lr}
   1668c:	b	11010 <__printf_chk@plt>
   16690:	push	{r4, r5, r6, sl, fp, lr}
   16694:	add	fp, sp, #16
   16698:	mov	r4, r2
   1669c:	mov	r5, r1
   166a0:	mov	r6, r0
   166a4:	bl	17cc0 <__assert_fail@plt+0x6c20>
   166a8:	cmp	r0, #0
   166ac:	popne	{r4, r5, r6, sl, fp, pc}
   166b0:	cmp	r6, #0
   166b4:	beq	166c8 <__assert_fail@plt+0x5628>
   166b8:	cmp	r5, #0
   166bc:	cmpne	r4, #0
   166c0:	bne	166c8 <__assert_fail@plt+0x5628>
   166c4:	pop	{r4, r5, r6, sl, fp, pc}
   166c8:	bl	16c44 <__assert_fail@plt+0x5ba4>
   166cc:	push	{r4, r5, r6, sl, fp, lr}
   166d0:	add	fp, sp, #16
   166d4:	mov	r4, r2
   166d8:	mov	r5, r1
   166dc:	mov	r6, r0
   166e0:	bl	17cc0 <__assert_fail@plt+0x6c20>
   166e4:	cmp	r0, #0
   166e8:	popne	{r4, r5, r6, sl, fp, pc}
   166ec:	cmp	r6, #0
   166f0:	beq	16704 <__assert_fail@plt+0x5664>
   166f4:	cmp	r5, #0
   166f8:	cmpne	r4, #0
   166fc:	bne	16704 <__assert_fail@plt+0x5664>
   16700:	pop	{r4, r5, r6, sl, fp, pc}
   16704:	bl	16c44 <__assert_fail@plt+0x5ba4>
   16708:	push	{fp, lr}
   1670c:	mov	fp, sp
   16710:	bl	1797c <__assert_fail@plt+0x68dc>
   16714:	cmp	r0, #0
   16718:	popne	{fp, pc}
   1671c:	bl	16c44 <__assert_fail@plt+0x5ba4>
   16720:	push	{fp, lr}
   16724:	mov	fp, sp
   16728:	bl	1797c <__assert_fail@plt+0x68dc>
   1672c:	cmp	r0, #0
   16730:	popne	{fp, pc}
   16734:	bl	16c44 <__assert_fail@plt+0x5ba4>
   16738:	push	{fp, lr}
   1673c:	mov	fp, sp
   16740:	bl	1797c <__assert_fail@plt+0x68dc>
   16744:	cmp	r0, #0
   16748:	popne	{fp, pc}
   1674c:	bl	16c44 <__assert_fail@plt+0x5ba4>
   16750:	push	{r4, r5, fp, lr}
   16754:	add	fp, sp, #8
   16758:	mov	r4, r1
   1675c:	mov	r5, r0
   16760:	bl	179ac <__assert_fail@plt+0x690c>
   16764:	cmp	r0, #0
   16768:	popne	{r4, r5, fp, pc}
   1676c:	cmp	r5, #0
   16770:	beq	16780 <__assert_fail@plt+0x56e0>
   16774:	cmp	r4, #0
   16778:	bne	16780 <__assert_fail@plt+0x56e0>
   1677c:	pop	{r4, r5, fp, pc}
   16780:	bl	16c44 <__assert_fail@plt+0x5ba4>
   16784:	push	{fp, lr}
   16788:	mov	fp, sp
   1678c:	cmp	r1, #0
   16790:	orreq	r1, r1, #1
   16794:	bl	179ac <__assert_fail@plt+0x690c>
   16798:	cmp	r0, #0
   1679c:	popne	{fp, pc}
   167a0:	bl	16c44 <__assert_fail@plt+0x5ba4>
   167a4:	push	{fp, lr}
   167a8:	mov	fp, sp
   167ac:	clz	r3, r2
   167b0:	lsr	ip, r3, #5
   167b4:	clz	r3, r1
   167b8:	lsr	r3, r3, #5
   167bc:	orrs	r3, r3, ip
   167c0:	movwne	r1, #1
   167c4:	movwne	r2, #1
   167c8:	bl	17cc0 <__assert_fail@plt+0x6c20>
   167cc:	cmp	r0, #0
   167d0:	popne	{fp, pc}
   167d4:	bl	16c44 <__assert_fail@plt+0x5ba4>
   167d8:	push	{fp, lr}
   167dc:	mov	fp, sp
   167e0:	mov	r2, r1
   167e4:	mov	r1, r0
   167e8:	mov	r0, #0
   167ec:	bl	17cc0 <__assert_fail@plt+0x6c20>
   167f0:	cmp	r0, #0
   167f4:	popne	{fp, pc}
   167f8:	bl	16c44 <__assert_fail@plt+0x5ba4>
   167fc:	push	{fp, lr}
   16800:	mov	fp, sp
   16804:	mov	r2, r1
   16808:	mov	r1, r0
   1680c:	clz	r0, r2
   16810:	clz	r3, r1
   16814:	lsr	r0, r0, #5
   16818:	lsr	r3, r3, #5
   1681c:	orrs	r0, r3, r0
   16820:	mov	r0, #0
   16824:	movwne	r1, #1
   16828:	movwne	r2, #1
   1682c:	bl	17cc0 <__assert_fail@plt+0x6c20>
   16830:	cmp	r0, #0
   16834:	popne	{fp, pc}
   16838:	bl	16c44 <__assert_fail@plt+0x5ba4>
   1683c:	push	{r4, r5, r6, sl, fp, lr}
   16840:	add	fp, sp, #16
   16844:	ldr	r5, [r1]
   16848:	mov	r4, r1
   1684c:	mov	r6, r0
   16850:	cmp	r0, #0
   16854:	beq	1686c <__assert_fail@plt+0x57cc>
   16858:	mov	r0, #1
   1685c:	add	r0, r0, r5, lsr #1
   16860:	adds	r5, r5, r0
   16864:	bcc	16874 <__assert_fail@plt+0x57d4>
   16868:	b	168b0 <__assert_fail@plt+0x5810>
   1686c:	cmp	r5, #0
   16870:	movweq	r5, #64	; 0x40
   16874:	mov	r0, r6
   16878:	mov	r1, r5
   1687c:	mov	r2, #1
   16880:	bl	17cc0 <__assert_fail@plt+0x6c20>
   16884:	cmp	r5, #0
   16888:	mov	r1, r5
   1688c:	movwne	r1, #1
   16890:	cmp	r0, #0
   16894:	bne	168a8 <__assert_fail@plt+0x5808>
   16898:	clz	r2, r6
   1689c:	lsr	r2, r2, #5
   168a0:	orrs	r1, r2, r1
   168a4:	bne	168b0 <__assert_fail@plt+0x5810>
   168a8:	str	r5, [r4]
   168ac:	pop	{r4, r5, r6, sl, fp, pc}
   168b0:	bl	16c44 <__assert_fail@plt+0x5ba4>
   168b4:	push	{r4, r5, r6, r7, fp, lr}
   168b8:	add	fp, sp, #16
   168bc:	ldr	r5, [r1]
   168c0:	mov	r6, r2
   168c4:	mov	r4, r1
   168c8:	mov	r7, r0
   168cc:	cmp	r0, #0
   168d0:	beq	168e8 <__assert_fail@plt+0x5848>
   168d4:	mov	r0, #1
   168d8:	add	r0, r0, r5, lsr #1
   168dc:	adds	r5, r5, r0
   168e0:	bcc	16900 <__assert_fail@plt+0x5860>
   168e4:	b	16934 <__assert_fail@plt+0x5894>
   168e8:	cmp	r5, #0
   168ec:	bne	16900 <__assert_fail@plt+0x5860>
   168f0:	mov	r0, #64	; 0x40
   168f4:	cmp	r6, #64	; 0x40
   168f8:	udiv	r5, r0, r6
   168fc:	addhi	r5, r5, #1
   16900:	mov	r0, r7
   16904:	mov	r1, r5
   16908:	mov	r2, r6
   1690c:	bl	17cc0 <__assert_fail@plt+0x6c20>
   16910:	cmp	r0, #0
   16914:	bne	1692c <__assert_fail@plt+0x588c>
   16918:	cmp	r7, #0
   1691c:	beq	16934 <__assert_fail@plt+0x5894>
   16920:	cmp	r6, #0
   16924:	cmpne	r5, #0
   16928:	bne	16934 <__assert_fail@plt+0x5894>
   1692c:	str	r5, [r4]
   16930:	pop	{r4, r5, r6, r7, fp, pc}
   16934:	bl	16c44 <__assert_fail@plt+0x5ba4>
   16938:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1693c:	add	fp, sp, #24
   16940:	mov	r8, r1
   16944:	ldr	r1, [r1]
   16948:	mov	r5, r0
   1694c:	add	r0, r1, r1, asr #1
   16950:	cmp	r0, r1
   16954:	mvnvs	r0, #-2147483648	; 0x80000000
   16958:	cmp	r0, r3
   1695c:	mov	r7, r0
   16960:	movgt	r7, r3
   16964:	cmn	r3, #1
   16968:	movle	r7, r0
   1696c:	ldr	r0, [fp, #8]
   16970:	cmn	r0, #1
   16974:	ble	1699c <__assert_fail@plt+0x58fc>
   16978:	cmp	r0, #0
   1697c:	beq	169f0 <__assert_fail@plt+0x5950>
   16980:	cmn	r7, #1
   16984:	ble	169c4 <__assert_fail@plt+0x5924>
   16988:	mvn	r4, #-2147483648	; 0x80000000
   1698c:	udiv	r6, r4, r0
   16990:	cmp	r6, r7
   16994:	bge	169f0 <__assert_fail@plt+0x5950>
   16998:	b	16a00 <__assert_fail@plt+0x5960>
   1699c:	cmn	r7, #1
   169a0:	ble	169e0 <__assert_fail@plt+0x5940>
   169a4:	cmn	r0, #1
   169a8:	beq	169f0 <__assert_fail@plt+0x5950>
   169ac:	mov	r6, #-2147483648	; 0x80000000
   169b0:	mvn	r4, #-2147483648	; 0x80000000
   169b4:	sdiv	r6, r6, r0
   169b8:	cmp	r6, r7
   169bc:	bge	169f0 <__assert_fail@plt+0x5950>
   169c0:	b	16a00 <__assert_fail@plt+0x5960>
   169c4:	beq	169f0 <__assert_fail@plt+0x5950>
   169c8:	mov	r6, #-2147483648	; 0x80000000
   169cc:	mvn	r4, #-2147483648	; 0x80000000
   169d0:	sdiv	r6, r6, r7
   169d4:	cmp	r6, r0
   169d8:	bge	169f0 <__assert_fail@plt+0x5950>
   169dc:	b	16a00 <__assert_fail@plt+0x5960>
   169e0:	mvn	r4, #-2147483648	; 0x80000000
   169e4:	sdiv	r6, r4, r0
   169e8:	cmp	r7, r6
   169ec:	blt	16a00 <__assert_fail@plt+0x5960>
   169f0:	mul	r6, r7, r0
   169f4:	mov	r4, #64	; 0x40
   169f8:	cmp	r6, #63	; 0x3f
   169fc:	bgt	16a08 <__assert_fail@plt+0x5968>
   16a00:	sdiv	r7, r4, r0
   16a04:	mul	r6, r7, r0
   16a08:	cmp	r5, #0
   16a0c:	moveq	r4, #0
   16a10:	streq	r4, [r8]
   16a14:	sub	r4, r7, r1
   16a18:	cmp	r4, r2
   16a1c:	bge	16ac8 <__assert_fail@plt+0x5a28>
   16a20:	add	r7, r1, r2
   16a24:	mov	r6, #0
   16a28:	mov	r2, #0
   16a2c:	cmp	r7, r3
   16a30:	movwgt	r6, #1
   16a34:	cmn	r3, #1
   16a38:	movwgt	r2, #1
   16a3c:	cmp	r7, r1
   16a40:	bvs	16afc <__assert_fail@plt+0x5a5c>
   16a44:	ands	r1, r2, r6
   16a48:	bne	16afc <__assert_fail@plt+0x5a5c>
   16a4c:	cmn	r0, #1
   16a50:	ble	16a78 <__assert_fail@plt+0x59d8>
   16a54:	cmp	r0, #0
   16a58:	beq	16ac4 <__assert_fail@plt+0x5a24>
   16a5c:	cmn	r7, #1
   16a60:	ble	16a9c <__assert_fail@plt+0x59fc>
   16a64:	mvn	r1, #-2147483648	; 0x80000000
   16a68:	udiv	r1, r1, r0
   16a6c:	cmp	r1, r7
   16a70:	bge	16ac4 <__assert_fail@plt+0x5a24>
   16a74:	b	16afc <__assert_fail@plt+0x5a5c>
   16a78:	cmn	r7, #1
   16a7c:	ble	16ab4 <__assert_fail@plt+0x5a14>
   16a80:	cmn	r0, #1
   16a84:	beq	16ac4 <__assert_fail@plt+0x5a24>
   16a88:	mov	r1, #-2147483648	; 0x80000000
   16a8c:	sdiv	r1, r1, r0
   16a90:	cmp	r1, r7
   16a94:	bge	16ac4 <__assert_fail@plt+0x5a24>
   16a98:	b	16afc <__assert_fail@plt+0x5a5c>
   16a9c:	beq	16ac4 <__assert_fail@plt+0x5a24>
   16aa0:	mov	r1, #-2147483648	; 0x80000000
   16aa4:	sdiv	r1, r1, r7
   16aa8:	cmp	r1, r0
   16aac:	bge	16ac4 <__assert_fail@plt+0x5a24>
   16ab0:	b	16afc <__assert_fail@plt+0x5a5c>
   16ab4:	mvn	r1, #-2147483648	; 0x80000000
   16ab8:	sdiv	r1, r1, r0
   16abc:	cmp	r7, r1
   16ac0:	blt	16afc <__assert_fail@plt+0x5a5c>
   16ac4:	mul	r6, r7, r0
   16ac8:	mov	r0, r5
   16acc:	mov	r1, r6
   16ad0:	bl	179ac <__assert_fail@plt+0x690c>
   16ad4:	cmp	r6, #0
   16ad8:	movwne	r6, #1
   16adc:	cmp	r0, #0
   16ae0:	bne	16af4 <__assert_fail@plt+0x5a54>
   16ae4:	clz	r1, r5
   16ae8:	lsr	r1, r1, #5
   16aec:	orrs	r1, r1, r6
   16af0:	bne	16afc <__assert_fail@plt+0x5a5c>
   16af4:	str	r7, [r8]
   16af8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16afc:	bl	16c44 <__assert_fail@plt+0x5ba4>
   16b00:	push	{fp, lr}
   16b04:	mov	fp, sp
   16b08:	mov	r1, #1
   16b0c:	bl	17928 <__assert_fail@plt+0x6888>
   16b10:	cmp	r0, #0
   16b14:	popne	{fp, pc}
   16b18:	bl	16c44 <__assert_fail@plt+0x5ba4>
   16b1c:	push	{fp, lr}
   16b20:	mov	fp, sp
   16b24:	bl	17928 <__assert_fail@plt+0x6888>
   16b28:	cmp	r0, #0
   16b2c:	popne	{fp, pc}
   16b30:	bl	16c44 <__assert_fail@plt+0x5ba4>
   16b34:	push	{fp, lr}
   16b38:	mov	fp, sp
   16b3c:	mov	r1, #1
   16b40:	bl	17928 <__assert_fail@plt+0x6888>
   16b44:	cmp	r0, #0
   16b48:	popne	{fp, pc}
   16b4c:	bl	16c44 <__assert_fail@plt+0x5ba4>
   16b50:	push	{fp, lr}
   16b54:	mov	fp, sp
   16b58:	bl	17928 <__assert_fail@plt+0x6888>
   16b5c:	cmp	r0, #0
   16b60:	popne	{fp, pc}
   16b64:	bl	16c44 <__assert_fail@plt+0x5ba4>
   16b68:	push	{r4, r5, fp, lr}
   16b6c:	add	fp, sp, #8
   16b70:	mov	r5, r0
   16b74:	mov	r0, r1
   16b78:	mov	r4, r1
   16b7c:	bl	1797c <__assert_fail@plt+0x68dc>
   16b80:	cmp	r0, #0
   16b84:	beq	16b98 <__assert_fail@plt+0x5af8>
   16b88:	mov	r1, r5
   16b8c:	mov	r2, r4
   16b90:	pop	{r4, r5, fp, lr}
   16b94:	b	10e9c <memcpy@plt>
   16b98:	bl	16c44 <__assert_fail@plt+0x5ba4>
   16b9c:	push	{r4, r5, fp, lr}
   16ba0:	add	fp, sp, #8
   16ba4:	mov	r5, r0
   16ba8:	mov	r0, r1
   16bac:	mov	r4, r1
   16bb0:	bl	1797c <__assert_fail@plt+0x68dc>
   16bb4:	cmp	r0, #0
   16bb8:	beq	16bcc <__assert_fail@plt+0x5b2c>
   16bbc:	mov	r1, r5
   16bc0:	mov	r2, r4
   16bc4:	pop	{r4, r5, fp, lr}
   16bc8:	b	10e9c <memcpy@plt>
   16bcc:	bl	16c44 <__assert_fail@plt+0x5ba4>
   16bd0:	push	{r4, r5, fp, lr}
   16bd4:	add	fp, sp, #8
   16bd8:	mov	r5, r0
   16bdc:	add	r0, r1, #1
   16be0:	mov	r4, r1
   16be4:	bl	1797c <__assert_fail@plt+0x68dc>
   16be8:	cmp	r0, #0
   16bec:	beq	16c08 <__assert_fail@plt+0x5b68>
   16bf0:	mov	r1, #0
   16bf4:	mov	r2, r4
   16bf8:	strb	r1, [r0, r4]
   16bfc:	mov	r1, r5
   16c00:	pop	{r4, r5, fp, lr}
   16c04:	b	10e9c <memcpy@plt>
   16c08:	bl	16c44 <__assert_fail@plt+0x5ba4>
   16c0c:	push	{r4, r5, fp, lr}
   16c10:	add	fp, sp, #8
   16c14:	mov	r4, r0
   16c18:	bl	10fc8 <strlen@plt>
   16c1c:	add	r5, r0, #1
   16c20:	mov	r0, r5
   16c24:	bl	1797c <__assert_fail@plt+0x68dc>
   16c28:	cmp	r0, #0
   16c2c:	beq	16c40 <__assert_fail@plt+0x5ba0>
   16c30:	mov	r1, r4
   16c34:	mov	r2, r5
   16c38:	pop	{r4, r5, fp, lr}
   16c3c:	b	10e9c <memcpy@plt>
   16c40:	bl	16c44 <__assert_fail@plt+0x5ba4>
   16c44:	push	{fp, lr}
   16c48:	mov	fp, sp
   16c4c:	movw	r0, #41204	; 0xa0f4
   16c50:	movw	r1, #39248	; 0x9950
   16c54:	mov	r2, #5
   16c58:	movt	r0, #2
   16c5c:	movt	r1, #1
   16c60:	ldr	r4, [r0]
   16c64:	mov	r0, #0
   16c68:	bl	10ed8 <dcgettext@plt>
   16c6c:	movw	r2, #38211	; 0x9543
   16c70:	mov	r3, r0
   16c74:	mov	r0, r4
   16c78:	mov	r1, #0
   16c7c:	movt	r2, #1
   16c80:	bl	10f44 <error@plt>
   16c84:	bl	11088 <abort@plt>
   16c88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c8c:	add	fp, sp, #28
   16c90:	sub	sp, sp, #44	; 0x2c
   16c94:	cmp	r2, #37	; 0x25
   16c98:	bcs	17908 <__assert_fail@plt+0x6868>
   16c9c:	ldr	sl, [fp, #8]
   16ca0:	mov	r6, r2
   16ca4:	mov	r7, r1
   16ca8:	mov	r4, r0
   16cac:	str	r3, [sp, #36]	; 0x24
   16cb0:	bl	10fe0 <__errno_location@plt>
   16cb4:	mov	r5, r0
   16cb8:	mov	r0, #0
   16cbc:	str	r0, [r5]
   16cc0:	bl	10fa4 <__ctype_b_loc@plt>
   16cc4:	ldr	r1, [r0]
   16cc8:	mov	r2, r4
   16ccc:	ldrb	r0, [r2], #1
   16cd0:	add	r3, r1, r0, lsl #1
   16cd4:	ldrb	r3, [r3, #1]
   16cd8:	tst	r3, #32
   16cdc:	bne	16ccc <__assert_fail@plt+0x5c2c>
   16ce0:	cmp	r7, #0
   16ce4:	sub	r9, fp, #32
   16ce8:	mov	r8, #4
   16cec:	movne	r9, r7
   16cf0:	cmp	r0, #45	; 0x2d
   16cf4:	beq	178fc <__assert_fail@plt+0x685c>
   16cf8:	mov	r0, r4
   16cfc:	mov	r1, r9
   16d00:	mov	r2, r6
   16d04:	mov	r3, #0
   16d08:	bl	10ea8 <__strtoull_internal@plt>
   16d0c:	mov	r7, r1
   16d10:	ldr	r1, [r9]
   16d14:	cmp	r1, r4
   16d18:	beq	16d44 <__assert_fail@plt+0x5ca4>
   16d1c:	mov	r6, r0
   16d20:	ldr	r0, [r5]
   16d24:	cmp	r0, #0
   16d28:	beq	16d80 <__assert_fail@plt+0x5ce0>
   16d2c:	cmp	r0, #34	; 0x22
   16d30:	bne	178fc <__assert_fail@plt+0x685c>
   16d34:	mov	r8, #1
   16d38:	cmp	sl, #0
   16d3c:	bne	16d8c <__assert_fail@plt+0x5cec>
   16d40:	b	178f4 <__assert_fail@plt+0x6854>
   16d44:	cmp	sl, #0
   16d48:	beq	178fc <__assert_fail@plt+0x685c>
   16d4c:	mov	r5, r1
   16d50:	ldrb	r1, [r4]
   16d54:	cmp	r1, #0
   16d58:	beq	178fc <__assert_fail@plt+0x685c>
   16d5c:	mov	r0, sl
   16d60:	bl	10fd4 <strchr@plt>
   16d64:	cmp	r0, #0
   16d68:	beq	178fc <__assert_fail@plt+0x685c>
   16d6c:	mov	r1, r5
   16d70:	mov	r8, #0
   16d74:	mov	r6, #1
   16d78:	mov	r7, #0
   16d7c:	b	16d8c <__assert_fail@plt+0x5cec>
   16d80:	mov	r8, r0
   16d84:	cmp	sl, #0
   16d88:	beq	178f4 <__assert_fail@plt+0x6854>
   16d8c:	ldrb	r4, [r1]
   16d90:	cmp	r4, #0
   16d94:	beq	178f4 <__assert_fail@plt+0x6854>
   16d98:	str	r1, [sp, #32]
   16d9c:	mov	r0, sl
   16da0:	mov	r1, r4
   16da4:	bl	10fd4 <strchr@plt>
   16da8:	cmp	r0, #0
   16dac:	beq	17074 <__assert_fail@plt+0x5fd4>
   16db0:	sub	r0, r4, #69	; 0x45
   16db4:	mov	r1, #1
   16db8:	mov	r3, #0
   16dbc:	mov	r5, #1024	; 0x400
   16dc0:	cmp	r0, #47	; 0x2f
   16dc4:	str	r1, [sp, #28]
   16dc8:	bhi	16ecc <__assert_fail@plt+0x5e2c>
   16dcc:	add	r1, pc, #0
   16dd0:	ldr	pc, [r1, r0, lsl #2]
   16dd4:	muleq	r1, r4, lr
   16dd8:	andeq	r6, r1, ip, asr #29
   16ddc:	muleq	r1, r4, lr
   16de0:	andeq	r6, r1, ip, asr #29
   16de4:	andeq	r6, r1, ip, asr #29
   16de8:	andeq	r6, r1, ip, asr #29
   16dec:	muleq	r1, r4, lr
   16df0:	andeq	r6, r1, ip, asr #29
   16df4:	muleq	r1, r4, lr
   16df8:	andeq	r6, r1, ip, asr #29
   16dfc:	andeq	r6, r1, ip, asr #29
   16e00:	muleq	r1, r4, lr
   16e04:	andeq	r6, r1, ip, asr #29
   16e08:	andeq	r6, r1, ip, asr #29
   16e0c:	andeq	r6, r1, ip, asr #29
   16e10:	muleq	r1, r4, lr
   16e14:	andeq	r6, r1, ip, asr #29
   16e18:	andeq	r6, r1, ip, asr #29
   16e1c:	andeq	r6, r1, ip, asr #29
   16e20:	andeq	r6, r1, ip, asr #29
   16e24:	muleq	r1, r4, lr
   16e28:	muleq	r1, r4, lr
   16e2c:	andeq	r6, r1, ip, asr #29
   16e30:	andeq	r6, r1, ip, asr #29
   16e34:	andeq	r6, r1, ip, asr #29
   16e38:	andeq	r6, r1, ip, asr #29
   16e3c:	andeq	r6, r1, ip, asr #29
   16e40:	andeq	r6, r1, ip, asr #29
   16e44:	andeq	r6, r1, ip, asr #29
   16e48:	andeq	r6, r1, ip, asr #29
   16e4c:	andeq	r6, r1, ip, asr #29
   16e50:	andeq	r6, r1, ip, asr #29
   16e54:	andeq	r6, r1, ip, asr #29
   16e58:	andeq	r6, r1, ip, asr #29
   16e5c:	muleq	r1, r4, lr
   16e60:	andeq	r6, r1, ip, asr #29
   16e64:	andeq	r6, r1, ip, asr #29
   16e68:	andeq	r6, r1, ip, asr #29
   16e6c:	muleq	r1, r4, lr
   16e70:	andeq	r6, r1, ip, asr #29
   16e74:	muleq	r1, r4, lr
   16e78:	andeq	r6, r1, ip, asr #29
   16e7c:	andeq	r6, r1, ip, asr #29
   16e80:	andeq	r6, r1, ip, asr #29
   16e84:	andeq	r6, r1, ip, asr #29
   16e88:	andeq	r6, r1, ip, asr #29
   16e8c:	andeq	r6, r1, ip, asr #29
   16e90:	muleq	r1, r4, lr
   16e94:	mov	r0, sl
   16e98:	mov	r1, #48	; 0x30
   16e9c:	bl	10fd4 <strchr@plt>
   16ea0:	cmp	r0, #0
   16ea4:	beq	16ec8 <__assert_fail@plt+0x5e28>
   16ea8:	ldr	r1, [sp, #32]
   16eac:	ldrb	r0, [r1, #1]
   16eb0:	cmp	r0, #66	; 0x42
   16eb4:	cmpne	r0, #68	; 0x44
   16eb8:	bne	17080 <__assert_fail@plt+0x5fe0>
   16ebc:	mov	r5, #1000	; 0x3e8
   16ec0:	mov	r0, #2
   16ec4:	str	r0, [sp, #28]
   16ec8:	mov	r3, #0
   16ecc:	sub	r0, r4, #66	; 0x42
   16ed0:	cmp	r0, #53	; 0x35
   16ed4:	bhi	17074 <__assert_fail@plt+0x5fd4>
   16ed8:	add	r1, pc, #0
   16edc:	ldr	pc, [r1, r0, lsl #2]
   16ee0:	strdeq	r7, [r1], -ip
   16ee4:	andeq	r7, r1, r4, ror r0
   16ee8:	andeq	r7, r1, r4, ror r0
   16eec:	andeq	r7, r1, r4, lsr #8
   16ef0:	andeq	r7, r1, r4, ror r0
   16ef4:			; <UNDEFINED> instruction: 0x00016fb8
   16ef8:	andeq	r7, r1, r4, ror r0
   16efc:	andeq	r7, r1, r4, ror r0
   16f00:	andeq	r7, r1, r4, ror r0
   16f04:	andeq	r7, r1, r4, lsr #1
   16f08:	andeq	r7, r1, r4, ror r0
   16f0c:	andeq	r7, r1, ip, ror #1
   16f10:	andeq	r7, r1, r4, ror r0
   16f14:	andeq	r7, r1, r4, ror r0
   16f18:	andeq	r7, r1, ip, ror r5
   16f1c:	andeq	r7, r1, r4, ror r0
   16f20:	andeq	r7, r1, r4, ror r0
   16f24:	andeq	r7, r1, r4, ror r0
   16f28:	andeq	r7, r1, r8, ror r1
   16f2c:	andeq	r7, r1, r4, ror r0
   16f30:	andeq	r7, r1, r4, ror r0
   16f34:	andeq	r7, r1, r4, ror r0
   16f38:	andeq	r7, r1, r4, ror r0
   16f3c:	andeq	r7, r1, r4, lsr #13
   16f40:	andeq	r7, r1, r0, ror #4
   16f44:	andeq	r7, r1, r4, ror r0
   16f48:	andeq	r7, r1, r4, ror r0
   16f4c:	andeq	r7, r1, r4, ror r0
   16f50:	andeq	r7, r1, r4, ror r0
   16f54:	andeq	r7, r1, r4, ror r0
   16f58:	andeq	r7, r1, r4, ror r0
   16f5c:	andeq	r7, r1, r4, ror r0
   16f60:	andeq	r7, r1, ip, ror r8
   16f64:	ldrdeq	r7, [r1], -r4
   16f68:	andeq	r7, r1, r4, ror r0
   16f6c:	andeq	r7, r1, r4, ror r0
   16f70:	andeq	r7, r1, r4, ror r0
   16f74:			; <UNDEFINED> instruction: 0x00016fb8
   16f78:	andeq	r7, r1, r4, ror r0
   16f7c:	andeq	r7, r1, r4, ror r0
   16f80:	andeq	r7, r1, r4, ror r0
   16f84:	andeq	r7, r1, r4, lsr #1
   16f88:	andeq	r7, r1, r4, ror r0
   16f8c:	andeq	r7, r1, ip, ror #1
   16f90:	andeq	r7, r1, r4, ror r0
   16f94:	andeq	r7, r1, r4, ror r0
   16f98:	andeq	r7, r1, r4, ror r0
   16f9c:	andeq	r7, r1, r4, ror r0
   16fa0:	andeq	r7, r1, r4, ror r0
   16fa4:	andeq	r7, r1, r4, ror r0
   16fa8:	andeq	r7, r1, r8, ror r1
   16fac:	andeq	r7, r1, r4, ror r0
   16fb0:	andeq	r7, r1, r4, ror r0
   16fb4:			; <UNDEFINED> instruction: 0x000178b0
   16fb8:	mvn	r0, #0
   16fbc:	mvn	r1, #0
   16fc0:	mov	r2, r5
   16fc4:	mov	sl, r3
   16fc8:	bl	17e08 <__assert_fail@plt+0x6d68>
   16fcc:	subs	r3, r0, r6
   16fd0:	umull	r4, r2, r6, r5
   16fd4:	mov	lr, #0
   16fd8:	str	r1, [sp, #20]
   16fdc:	sbcs	r3, r1, r7
   16fe0:	movwcc	lr, #1
   16fe4:	mla	ip, r6, sl, r2
   16fe8:	mov	r2, r1
   16fec:	mov	r2, #0
   16ff0:	cmp	lr, #0
   16ff4:	mla	r7, r7, r5, ip
   16ff8:	mvnne	r4, #0
   16ffc:	mvnne	r7, #0
   17000:	subs	r6, r0, r4
   17004:	sbcs	r6, r1, r7
   17008:	umull	r3, r6, r4, r5
   1700c:	movwcc	r2, #1
   17010:	cmp	r2, #0
   17014:	mvnne	r3, #0
   17018:	cmp	r2, #0
   1701c:	str	r6, [sp, #16]
   17020:	umull	r6, ip, r3, r5
   17024:	mla	r1, r3, sl, ip
   17028:	ldr	ip, [sp, #16]
   1702c:	str	r1, [sp, #12]
   17030:	mla	r4, r4, sl, ip
   17034:	mla	r4, r7, r5, r4
   17038:	mvnne	r4, #0
   1703c:	subs	r0, r0, r3
   17040:	ldr	r0, [sp, #20]
   17044:	ldr	r7, [sp, #12]
   17048:	sbcs	r0, r0, r4
   1704c:	mov	r0, #0
   17050:	mla	r7, r4, r5, r7
   17054:	movwcc	r0, #1
   17058:	cmp	r0, #0
   1705c:	mov	r1, r0
   17060:	orr	r0, lr, r2
   17064:	mvnne	r7, #0
   17068:	mvnne	r6, #0
   1706c:	orr	r3, r0, r1
   17070:	b	178d4 <__assert_fail@plt+0x6834>
   17074:	ldr	r0, [sp, #36]	; 0x24
   17078:	orr	r8, r8, #2
   1707c:	b	178f8 <__assert_fail@plt+0x6858>
   17080:	cmp	r0, #105	; 0x69
   17084:	mov	r3, #0
   17088:	bne	16ecc <__assert_fail@plt+0x5e2c>
   1708c:	ldrb	r0, [r1, #2]
   17090:	mov	r1, #1
   17094:	cmp	r0, #66	; 0x42
   17098:	movweq	r1, #3
   1709c:	str	r1, [sp, #28]
   170a0:	b	16ecc <__assert_fail@plt+0x5e2c>
   170a4:	mvn	r0, #0
   170a8:	mvn	r1, #0
   170ac:	mov	r2, r5
   170b0:	mov	r4, r3
   170b4:	bl	17e08 <__assert_fail@plt+0x6d68>
   170b8:	subs	r0, r0, r6
   170bc:	mov	r2, #0
   170c0:	sbcs	r0, r1, r7
   170c4:	umull	r0, r1, r6, r5
   170c8:	movwcc	r2, #1
   170cc:	cmp	r2, #0
   170d0:	mla	r1, r6, r4, r1
   170d4:	mov	r3, r2
   170d8:	mvnne	r0, #0
   170dc:	mla	r7, r7, r5, r1
   170e0:	mvnne	r7, #0
   170e4:	mov	r6, r0
   170e8:	b	178d4 <__assert_fail@plt+0x6834>
   170ec:	mvn	r0, #0
   170f0:	mvn	r1, #0
   170f4:	mov	r2, r5
   170f8:	str	r3, [sp, #24]
   170fc:	bl	17e08 <__assert_fail@plt+0x6d68>
   17100:	subs	r3, r0, r6
   17104:	mov	ip, r0
   17108:	umull	r4, r0, r6, r5
   1710c:	mov	sl, #0
   17110:	sbcs	r3, r1, r7
   17114:	mov	r3, #0
   17118:	movwcc	r3, #1
   1711c:	cmp	r3, #0
   17120:	str	r0, [sp, #20]
   17124:	ldr	r0, [sp, #24]
   17128:	mvnne	r4, #0
   1712c:	cmp	r3, #0
   17130:	umull	lr, r2, r4, r5
   17134:	mla	r2, r4, r0, r2
   17138:	str	r2, [sp, #16]
   1713c:	ldr	r2, [sp, #20]
   17140:	mla	r6, r6, r0, r2
   17144:	ldr	r0, [sp, #16]
   17148:	mla	r6, r7, r5, r6
   1714c:	mvnne	r6, #0
   17150:	mla	r7, r6, r5, r0
   17154:	subs	r0, ip, r4
   17158:	sbcs	r0, r1, r6
   1715c:	movwcc	sl, #1
   17160:	cmp	sl, #0
   17164:	orr	r3, r3, sl
   17168:	mvnne	lr, #0
   1716c:	mvnne	r7, #0
   17170:	mov	r6, lr
   17174:	b	178d4 <__assert_fail@plt+0x6834>
   17178:	mvn	r0, #0
   1717c:	mvn	r1, #0
   17180:	mov	r2, r5
   17184:	mov	sl, r3
   17188:	bl	17e08 <__assert_fail@plt+0x6d68>
   1718c:	subs	r3, r0, r6
   17190:	mov	ip, r1
   17194:	umull	r2, lr, r6, r5
   17198:	str	r0, [sp, #20]
   1719c:	sbcs	r3, r1, r7
   171a0:	mov	r1, #0
   171a4:	str	ip, [sp, #16]
   171a8:	movwcc	r1, #1
   171ac:	mla	r6, r6, sl, lr
   171b0:	mov	lr, #0
   171b4:	cmp	r1, #0
   171b8:	mla	r7, r7, r5, r6
   171bc:	mvnne	r2, #0
   171c0:	cmp	r1, #0
   171c4:	umull	r3, r4, r2, r5
   171c8:	mvnne	r7, #0
   171cc:	mla	r4, r2, sl, r4
   171d0:	subs	r2, r0, r2
   171d4:	sbcs	r2, ip, r7
   171d8:	mla	r4, r7, r5, r4
   171dc:	mov	r2, #0
   171e0:	movwcc	lr, #1
   171e4:	cmp	lr, #0
   171e8:	mvnne	r3, #0
   171ec:	mvnne	r4, #0
   171f0:	subs	r7, r0, r3
   171f4:	mov	r0, r5
   171f8:	sbcs	r7, ip, r4
   171fc:	umull	r5, r7, r3, r5
   17200:	movwcc	r2, #1
   17204:	cmp	r2, #0
   17208:	mla	r3, r3, sl, r7
   1720c:	mvnne	r5, #0
   17210:	cmp	r2, #0
   17214:	mla	r3, r4, r0, r3
   17218:	umull	r6, ip, r5, r0
   1721c:	mvnne	r3, #0
   17220:	mla	ip, r5, sl, ip
   17224:	mla	r7, r3, r0, ip
   17228:	ldr	r0, [sp, #20]
   1722c:	subs	r0, r0, r5
   17230:	ldr	r0, [sp, #16]
   17234:	sbcs	r0, r0, r3
   17238:	mov	r0, #0
   1723c:	movwcc	r0, #1
   17240:	cmp	r0, #0
   17244:	mov	r3, r0
   17248:	orr	r0, r1, lr
   1724c:	orr	r0, r0, r2
   17250:	mvnne	r7, #0
   17254:	mvnne	r6, #0
   17258:	orr	r3, r0, r3
   1725c:	b	178d4 <__assert_fail@plt+0x6834>
   17260:	mvn	r0, #0
   17264:	mvn	r1, #0
   17268:	mov	r2, r5
   1726c:	mov	r4, r3
   17270:	str	r3, [sp, #24]
   17274:	bl	17e08 <__assert_fail@plt+0x6d68>
   17278:	umull	r3, r2, r6, r5
   1727c:	mla	r2, r6, r4, r2
   17280:	subs	r6, r0, r6
   17284:	sbcs	r6, r1, r7
   17288:	mov	r6, #0
   1728c:	mla	ip, r7, r5, r2
   17290:	ldr	r2, [sp, #24]
   17294:	movwcc	r6, #1
   17298:	cmp	r6, #0
   1729c:	str	r6, [sp, #20]
   172a0:	mov	r6, #0
   172a4:	mvnne	r3, #0
   172a8:	mvnne	ip, #0
   172ac:	subs	r4, r0, r3
   172b0:	umull	r7, lr, r3, r5
   172b4:	sbcs	r4, r1, ip
   172b8:	movwcc	r6, #1
   172bc:	mla	r3, r3, r2, lr
   172c0:	cmp	r6, #0
   172c4:	str	r6, [sp, #16]
   172c8:	mvnne	r7, #0
   172cc:	cmp	r6, #0
   172d0:	umull	sl, r4, r7, r5
   172d4:	mla	r4, r7, r2, r4
   172d8:	mla	r2, ip, r5, r3
   172dc:	mvnne	r2, #0
   172e0:	subs	r3, r0, r7
   172e4:	mov	ip, #0
   172e8:	mla	r6, r2, r5, r4
   172ec:	sbcs	r2, r1, r2
   172f0:	mov	r4, r0
   172f4:	mov	r0, #0
   172f8:	movwcc	r0, #1
   172fc:	mov	r3, r4
   17300:	cmp	r0, #0
   17304:	str	r0, [sp, #12]
   17308:	mov	r0, r1
   1730c:	str	r3, [sp, #4]
   17310:	mvnne	sl, #0
   17314:	mvnne	r6, #0
   17318:	str	r0, [sp, #8]
   1731c:	subs	r2, r4, sl
   17320:	ldr	r4, [sp, #24]
   17324:	sbcs	r2, r1, r6
   17328:	umull	r7, r2, sl, r5
   1732c:	movwcc	ip, #1
   17330:	cmp	ip, #0
   17334:	mvnne	r7, #0
   17338:	mla	r2, sl, r4, r2
   1733c:	cmp	ip, #0
   17340:	mov	sl, #0
   17344:	umull	r1, lr, r7, r5
   17348:	mla	r2, r6, r5, r2
   1734c:	mvnne	r2, #0
   17350:	subs	r6, r3, r7
   17354:	mla	lr, r7, r4, lr
   17358:	mla	lr, r2, r5, lr
   1735c:	sbcs	r2, r0, r2
   17360:	mov	r2, #0
   17364:	movwcc	sl, #1
   17368:	cmp	sl, #0
   1736c:	mvnne	r1, #0
   17370:	mvnne	lr, #0
   17374:	subs	r6, r3, r1
   17378:	ldr	r3, [sp, #24]
   1737c:	sbcs	r6, r0, lr
   17380:	umull	r0, r7, r1, r5
   17384:	movwcc	r2, #1
   17388:	cmp	r2, #0
   1738c:	mvnne	r0, #0
   17390:	mla	r1, r1, r3, r7
   17394:	cmp	r2, #0
   17398:	umull	r6, r4, r0, r5
   1739c:	mla	r1, lr, r5, r1
   173a0:	mvnne	r1, #0
   173a4:	mla	r4, r0, r3, r4
   173a8:	ldr	r3, [sp, #4]
   173ac:	mla	r7, r1, r5, r4
   173b0:	ldr	r5, [sp, #16]
   173b4:	subs	r0, r3, r0
   173b8:	ldr	r0, [sp, #8]
   173bc:	sbcs	r0, r0, r1
   173c0:	mov	r0, #0
   173c4:	movwcc	r0, #1
   173c8:	cmp	r0, #0
   173cc:	mov	r1, r0
   173d0:	ldr	r0, [sp, #20]
   173d4:	mvnne	r7, #0
   173d8:	mvnne	r6, #0
   173dc:	orr	r0, r0, r5
   173e0:	ldr	r5, [sp, #12]
   173e4:	orr	r0, r0, r5
   173e8:	orr	r0, r0, ip
   173ec:	orr	r0, r0, sl
   173f0:	orr	r0, r0, r2
   173f4:	orr	r0, r0, r1
   173f8:	b	17874 <__assert_fail@plt+0x67d4>
   173fc:	mov	r1, #0
   17400:	lsl	r2, r7, #10
   17404:	lsl	r0, r6, #10
   17408:	lsr	r3, r7, #22
   1740c:	cmp	r1, r7, lsr #22
   17410:	orr	r2, r2, r6, lsr #22
   17414:	mvnne	r0, #0
   17418:	movwne	r3, #1
   1741c:	cmp	r1, r7, lsr #22
   17420:	b	178a0 <__assert_fail@plt+0x6800>
   17424:	mvn	r0, #0
   17428:	mvn	r1, #0
   1742c:	mov	r2, r5
   17430:	mov	sl, r3
   17434:	bl	17e08 <__assert_fail@plt+0x6d68>
   17438:	subs	r2, r0, r6
   1743c:	mov	ip, r0
   17440:	mov	r0, #0
   17444:	sbcs	r2, r1, r7
   17448:	umull	r4, r2, r6, r5
   1744c:	movwcc	r0, #1
   17450:	cmp	r0, #0
   17454:	mla	r2, r6, sl, r2
   17458:	str	r0, [sp, #20]
   1745c:	mvnne	r4, #0
   17460:	cmp	r0, #0
   17464:	mla	r2, r7, r5, r2
   17468:	mov	r0, #0
   1746c:	umull	lr, r3, r4, r5
   17470:	mvnne	r2, #0
   17474:	mla	r3, r4, sl, r3
   17478:	mla	r6, r2, r5, r3
   1747c:	subs	r3, ip, r4
   17480:	mov	r3, r1
   17484:	sbcs	r2, r1, r2
   17488:	str	r3, [sp, #8]
   1748c:	movwcc	r0, #1
   17490:	cmp	r0, #0
   17494:	str	r0, [sp, #16]
   17498:	mov	r0, ip
   1749c:	mvnne	lr, #0
   174a0:	mvnne	r6, #0
   174a4:	str	r0, [sp, #12]
   174a8:	subs	r2, ip, lr
   174ac:	umull	r7, r4, lr, r5
   174b0:	sbcs	r2, r1, r6
   174b4:	mov	r2, #0
   174b8:	movwcc	r2, #1
   174bc:	mla	r4, lr, sl, r4
   174c0:	cmp	r2, #0
   174c4:	mla	r6, r6, r5, r4
   174c8:	mov	r4, #0
   174cc:	mvnne	r7, #0
   174d0:	cmp	r2, #0
   174d4:	umull	r1, ip, r7, r5
   174d8:	mvnne	r6, #0
   174dc:	mla	ip, r7, sl, ip
   174e0:	subs	r7, r0, r7
   174e4:	sbcs	r7, r3, r6
   174e8:	mla	lr, r6, r5, ip
   174ec:	mov	ip, #0
   174f0:	movwcc	ip, #1
   174f4:	cmp	ip, #0
   174f8:	mvnne	r1, #0
   174fc:	mvnne	lr, #0
   17500:	subs	r7, r0, r1
   17504:	sbcs	r7, r3, lr
   17508:	umull	r0, r7, r1, r5
   1750c:	movwcc	r4, #1
   17510:	cmp	r4, #0
   17514:	mla	r1, r1, sl, r7
   17518:	mvnne	r0, #0
   1751c:	cmp	r4, #0
   17520:	mla	r1, lr, r5, r1
   17524:	umull	r6, r3, r0, r5
   17528:	mvnne	r1, #0
   1752c:	mla	r3, r0, sl, r3
   17530:	mla	r7, r1, r5, r3
   17534:	ldr	r3, [sp, #12]
   17538:	subs	r0, r3, r0
   1753c:	ldr	r0, [sp, #8]
   17540:	ldr	r3, [sp, #16]
   17544:	sbcs	r0, r0, r1
   17548:	mov	r0, #0
   1754c:	movwcc	r0, #1
   17550:	cmp	r0, #0
   17554:	mov	r1, r0
   17558:	ldr	r0, [sp, #20]
   1755c:	mvnne	r7, #0
   17560:	mvnne	r6, #0
   17564:	orr	r0, r0, r3
   17568:	orr	r0, r0, r2
   1756c:	orr	r0, r0, ip
   17570:	orr	r0, r0, r4
   17574:	orr	r3, r0, r1
   17578:	b	178d4 <__assert_fail@plt+0x6834>
   1757c:	mvn	r0, #0
   17580:	mvn	r1, #0
   17584:	mov	r2, r5
   17588:	mov	sl, r3
   1758c:	bl	17e08 <__assert_fail@plt+0x6d68>
   17590:	umull	r3, r2, r6, r5
   17594:	mov	lr, r1
   17598:	mov	r1, r0
   1759c:	mla	r2, r6, sl, r2
   175a0:	subs	r6, r0, r6
   175a4:	mov	r0, #0
   175a8:	sbcs	r6, lr, r7
   175ac:	mla	r2, r7, r5, r2
   175b0:	movwcc	r0, #1
   175b4:	cmp	r0, #0
   175b8:	str	r0, [sp, #20]
   175bc:	mov	r0, r1
   175c0:	mvnne	r3, #0
   175c4:	mvnne	r2, #0
   175c8:	str	r0, [sp, #16]
   175cc:	subs	r4, r1, r3
   175d0:	umull	r7, ip, r3, r5
   175d4:	sbcs	r4, lr, r2
   175d8:	mov	r4, #0
   175dc:	movwcc	r4, #1
   175e0:	mla	r3, r3, sl, ip
   175e4:	mov	ip, #0
   175e8:	cmp	r4, #0
   175ec:	mla	r2, r2, r5, r3
   175f0:	mvnne	r7, #0
   175f4:	cmp	r4, #0
   175f8:	umull	r1, r6, r7, r5
   175fc:	mvnne	r2, #0
   17600:	mla	r6, r7, sl, r6
   17604:	mla	r3, r2, r5, r6
   17608:	subs	r6, r0, r7
   1760c:	sbcs	r2, lr, r2
   17610:	mov	r2, #0
   17614:	movwcc	ip, #1
   17618:	cmp	ip, #0
   1761c:	mvnne	r1, #0
   17620:	mvnne	r3, #0
   17624:	subs	r6, r0, r1
   17628:	sbcs	r6, lr, r3
   1762c:	umull	r0, r6, r1, r5
   17630:	movwcc	r2, #1
   17634:	cmp	r2, #0
   17638:	mvnne	r0, #0
   1763c:	cmp	r2, #0
   17640:	str	r6, [sp, #12]
   17644:	umull	r6, r7, r0, r5
   17648:	mla	r7, r0, sl, r7
   1764c:	str	r7, [sp, #8]
   17650:	ldr	r7, [sp, #12]
   17654:	mla	r1, r1, sl, r7
   17658:	mla	r1, r3, r5, r1
   1765c:	ldr	r3, [sp, #8]
   17660:	mvnne	r1, #0
   17664:	mla	r7, r1, r5, r3
   17668:	ldr	r3, [sp, #16]
   1766c:	subs	r0, r3, r0
   17670:	sbcs	r0, lr, r1
   17674:	mov	r0, #0
   17678:	movwcc	r0, #1
   1767c:	cmp	r0, #0
   17680:	mov	r1, r0
   17684:	ldr	r0, [sp, #20]
   17688:	mvnne	r7, #0
   1768c:	mvnne	r6, #0
   17690:	orr	r0, r0, r4
   17694:	orr	r0, r0, ip
   17698:	orr	r0, r0, r2
   1769c:	orr	r3, r0, r1
   176a0:	b	178d4 <__assert_fail@plt+0x6834>
   176a4:	mvn	r0, #0
   176a8:	mvn	r1, #0
   176ac:	mov	r2, r5
   176b0:	mov	sl, r3
   176b4:	bl	17e08 <__assert_fail@plt+0x6d68>
   176b8:	mov	lr, r0
   176bc:	subs	r0, r0, r6
   176c0:	mov	r2, #0
   176c4:	mov	ip, r1
   176c8:	str	sl, [sp, #24]
   176cc:	sbcs	r0, r1, r7
   176d0:	umull	r3, r1, r6, r5
   176d4:	str	lr, [sp, #4]
   176d8:	movwcc	r2, #1
   176dc:	cmp	r2, #0
   176e0:	mla	r6, r6, sl, r1
   176e4:	mov	r1, #0
   176e8:	str	r2, [sp, #20]
   176ec:	mvnne	r3, #0
   176f0:	cmp	r2, #0
   176f4:	mla	r7, r7, r5, r6
   176f8:	mov	r2, #0
   176fc:	umull	r0, r4, r3, r5
   17700:	mvnne	r7, #0
   17704:	mla	r4, r3, sl, r4
   17708:	subs	r3, lr, r3
   1770c:	sbcs	r3, ip, r7
   17710:	mla	r4, r7, r5, r4
   17714:	movwcc	r1, #1
   17718:	cmp	r1, #0
   1771c:	str	r1, [sp, #16]
   17720:	mvnne	r0, #0
   17724:	mvnne	r4, #0
   17728:	subs	r3, lr, r0
   1772c:	sbcs	r3, ip, r4
   17730:	umull	r6, r3, r0, r5
   17734:	movwcc	r2, #1
   17738:	cmp	r2, #0
   1773c:	mla	r0, r0, sl, r3
   17740:	str	r2, [sp, #12]
   17744:	mvnne	r6, #0
   17748:	cmp	r2, #0
   1774c:	mla	r0, r4, r5, r0
   17750:	ldr	r4, [sp, #24]
   17754:	umull	r1, r7, r6, r5
   17758:	mvnne	r0, #0
   1775c:	subs	r3, lr, r6
   17760:	mov	r3, ip
   17764:	str	r3, [sp]
   17768:	mla	r7, r6, sl, r7
   1776c:	mla	r7, r0, r5, r7
   17770:	sbcs	r0, ip, r0
   17774:	mov	r0, #0
   17778:	movwcc	r0, #1
   1777c:	cmp	r0, #0
   17780:	str	r0, [sp, #8]
   17784:	mvnne	r1, #0
   17788:	mvnne	r7, #0
   1778c:	subs	r0, lr, r1
   17790:	sbcs	r0, ip, r7
   17794:	mov	ip, #0
   17798:	umull	r6, r0, r1, r5
   1779c:	movwcc	ip, #1
   177a0:	cmp	ip, #0
   177a4:	mla	r1, r1, r4, r0
   177a8:	mov	r0, lr
   177ac:	mvnne	r6, #0
   177b0:	cmp	ip, #0
   177b4:	mla	r1, r7, r5, r1
   177b8:	umull	r2, sl, r6, r5
   177bc:	mvnne	r1, #0
   177c0:	mla	sl, r6, r4, sl
   177c4:	subs	r6, lr, r6
   177c8:	mov	lr, #0
   177cc:	mla	r7, r1, r5, sl
   177d0:	sbcs	r1, r3, r1
   177d4:	ldr	r1, [sp, #24]
   177d8:	movwcc	lr, #1
   177dc:	cmp	lr, #0
   177e0:	mvnne	r2, #0
   177e4:	mvnne	r7, #0
   177e8:	subs	r6, r0, r2
   177ec:	umull	r0, sl, r2, r5
   177f0:	sbcs	r6, r3, r7
   177f4:	mov	r3, #0
   177f8:	movwcc	r3, #1
   177fc:	mla	r2, r2, r1, sl
   17800:	cmp	r3, #0
   17804:	mla	r2, r7, r5, r2
   17808:	mvnne	r0, #0
   1780c:	cmp	r3, #0
   17810:	umull	r6, r4, r0, r5
   17814:	mvnne	r2, #0
   17818:	mla	r4, r0, r1, r4
   1781c:	ldr	r1, [sp, #4]
   17820:	mla	r7, r2, r5, r4
   17824:	ldr	r5, [sp, #16]
   17828:	subs	r0, r1, r0
   1782c:	ldr	r0, [sp]
   17830:	sbcs	r0, r0, r2
   17834:	mov	r0, #0
   17838:	movwcc	r0, #1
   1783c:	cmp	r0, #0
   17840:	mov	r2, r0
   17844:	ldr	r0, [sp, #20]
   17848:	mvnne	r7, #0
   1784c:	mvnne	r6, #0
   17850:	orr	r0, r0, r5
   17854:	ldr	r5, [sp, #12]
   17858:	orr	r0, r0, r5
   1785c:	ldr	r5, [sp, #8]
   17860:	orr	r0, r0, r5
   17864:	orr	r0, r0, ip
   17868:	orr	r0, r0, lr
   1786c:	orr	r0, r0, r3
   17870:	orr	r0, r0, r2
   17874:	and	r3, r0, #1
   17878:	b	178d4 <__assert_fail@plt+0x6834>
   1787c:	mov	r1, #0
   17880:	lsl	r2, r7, #9
   17884:	lsl	r0, r6, #9
   17888:	lsr	r3, r7, #23
   1788c:	cmp	r1, r7, lsr #23
   17890:	orr	r2, r2, r6, lsr #23
   17894:	mvnne	r0, #0
   17898:	movwne	r3, #1
   1789c:	cmp	r1, r7, lsr #23
   178a0:	mvnne	r2, #0
   178a4:	mov	r6, r0
   178a8:	mov	r7, r2
   178ac:	b	178d4 <__assert_fail@plt+0x6834>
   178b0:	lsl	r1, r7, #1
   178b4:	cmp	r7, #0
   178b8:	lsl	r0, r6, #1
   178bc:	lsr	r3, r7, #31
   178c0:	orr	r1, r1, r6, lsr #31
   178c4:	mvnmi	r0, #0
   178c8:	mvnmi	r1, #0
   178cc:	mov	r6, r0
   178d0:	mov	r7, r1
   178d4:	ldr	r1, [sp, #32]
   178d8:	ldr	r2, [sp, #28]
   178dc:	orr	r8, r3, r8
   178e0:	add	r0, r1, r2
   178e4:	str	r0, [r9]
   178e8:	ldrb	r0, [r1, r2]
   178ec:	cmp	r0, #0
   178f0:	orrne	r8, r8, #2
   178f4:	ldr	r0, [sp, #36]	; 0x24
   178f8:	strd	r6, [r0]
   178fc:	mov	r0, r8
   17900:	sub	sp, fp, #28
   17904:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17908:	movw	r0, #39265	; 0x9961
   1790c:	movw	r1, #39303	; 0x9987
   17910:	movw	r3, #39319	; 0x9997
   17914:	mov	r2, #85	; 0x55
   17918:	movt	r0, #1
   1791c:	movt	r1, #1
   17920:	movt	r3, #1
   17924:	bl	110a0 <__assert_fail@plt>
   17928:	clz	r2, r1
   1792c:	clz	r3, r0
   17930:	lsr	r2, r2, #5
   17934:	lsr	r3, r3, #5
   17938:	orrs	r2, r3, r2
   1793c:	movwne	r1, #1
   17940:	movwne	r0, #1
   17944:	cmp	r1, #0
   17948:	beq	17978 <__assert_fail@plt+0x68d8>
   1794c:	mvn	r2, #-2147483648	; 0x80000000
   17950:	udiv	r2, r2, r1
   17954:	cmp	r2, r0
   17958:	bcs	17978 <__assert_fail@plt+0x68d8>
   1795c:	push	{fp, lr}
   17960:	mov	fp, sp
   17964:	bl	10fe0 <__errno_location@plt>
   17968:	mov	r1, #12
   1796c:	str	r1, [r0]
   17970:	mov	r0, #0
   17974:	pop	{fp, pc}
   17978:	b	10e30 <calloc@plt>
   1797c:	cmp	r0, #0
   17980:	movweq	r0, #1
   17984:	cmn	r0, #1
   17988:	ble	17990 <__assert_fail@plt+0x68f0>
   1798c:	b	10f50 <malloc@plt>
   17990:	push	{fp, lr}
   17994:	mov	fp, sp
   17998:	bl	10fe0 <__errno_location@plt>
   1799c:	mov	r1, #12
   179a0:	str	r1, [r0]
   179a4:	mov	r0, #0
   179a8:	pop	{fp, pc}
   179ac:	push	{fp, lr}
   179b0:	mov	fp, sp
   179b4:	cmp	r0, #0
   179b8:	beq	179d4 <__assert_fail@plt+0x6934>
   179bc:	cmp	r1, #0
   179c0:	beq	179e0 <__assert_fail@plt+0x6940>
   179c4:	cmn	r1, #1
   179c8:	ble	179ec <__assert_fail@plt+0x694c>
   179cc:	pop	{fp, lr}
   179d0:	b	10ee4 <realloc@plt>
   179d4:	mov	r0, r1
   179d8:	pop	{fp, lr}
   179dc:	b	1797c <__assert_fail@plt+0x68dc>
   179e0:	bl	14224 <__assert_fail@plt+0x3184>
   179e4:	mov	r0, #0
   179e8:	pop	{fp, pc}
   179ec:	bl	10fe0 <__errno_location@plt>
   179f0:	mov	r1, #12
   179f4:	str	r1, [r0]
   179f8:	mov	r0, #0
   179fc:	pop	{fp, pc}
   17a00:	push	{r4, r5, r6, sl, fp, lr}
   17a04:	add	fp, sp, #16
   17a08:	mov	r4, r0
   17a0c:	bl	10f2c <__fpending@plt>
   17a10:	ldr	r6, [r4]
   17a14:	mov	r5, r0
   17a18:	mov	r0, r4
   17a1c:	bl	17a84 <__assert_fail@plt+0x69e4>
   17a20:	tst	r6, #32
   17a24:	bne	17a5c <__assert_fail@plt+0x69bc>
   17a28:	cmp	r0, #0
   17a2c:	mov	r4, r0
   17a30:	mvnne	r4, #0
   17a34:	cmp	r5, #0
   17a38:	bne	17a68 <__assert_fail@plt+0x69c8>
   17a3c:	cmp	r0, #0
   17a40:	beq	17a68 <__assert_fail@plt+0x69c8>
   17a44:	bl	10fe0 <__errno_location@plt>
   17a48:	ldr	r0, [r0]
   17a4c:	subs	r4, r0, #9
   17a50:	mvnne	r4, #0
   17a54:	mov	r0, r4
   17a58:	pop	{r4, r5, r6, sl, fp, pc}
   17a5c:	mvn	r4, #0
   17a60:	cmp	r0, #0
   17a64:	beq	17a70 <__assert_fail@plt+0x69d0>
   17a68:	mov	r0, r4
   17a6c:	pop	{r4, r5, r6, sl, fp, pc}
   17a70:	bl	10fe0 <__errno_location@plt>
   17a74:	mov	r1, #0
   17a78:	str	r1, [r0]
   17a7c:	mov	r0, r4
   17a80:	pop	{r4, r5, r6, sl, fp, pc}
   17a84:	push	{r4, r5, r6, sl, fp, lr}
   17a88:	add	fp, sp, #16
   17a8c:	sub	sp, sp, #8
   17a90:	mov	r4, r0
   17a94:	bl	1101c <fileno@plt>
   17a98:	cmn	r0, #1
   17a9c:	ble	17b10 <__assert_fail@plt+0x6a70>
   17aa0:	mov	r0, r4
   17aa4:	bl	10f68 <__freading@plt>
   17aa8:	cmp	r0, #0
   17aac:	beq	17ad8 <__assert_fail@plt+0x6a38>
   17ab0:	mov	r0, r4
   17ab4:	bl	1101c <fileno@plt>
   17ab8:	mov	r1, #1
   17abc:	mov	r2, #0
   17ac0:	mov	r3, #0
   17ac4:	str	r1, [sp]
   17ac8:	bl	10f14 <lseek64@plt>
   17acc:	and	r0, r0, r1
   17ad0:	cmn	r0, #1
   17ad4:	beq	17b10 <__assert_fail@plt+0x6a70>
   17ad8:	mov	r0, r4
   17adc:	bl	17b20 <__assert_fail@plt+0x6a80>
   17ae0:	cmp	r0, #0
   17ae4:	beq	17b10 <__assert_fail@plt+0x6a70>
   17ae8:	bl	10fe0 <__errno_location@plt>
   17aec:	ldr	r6, [r0]
   17af0:	mov	r5, r0
   17af4:	mov	r0, r4
   17af8:	bl	11034 <fclose@plt>
   17afc:	cmp	r6, #0
   17b00:	strne	r6, [r5]
   17b04:	mvnne	r0, #0
   17b08:	sub	sp, fp, #16
   17b0c:	pop	{r4, r5, r6, sl, fp, pc}
   17b10:	mov	r0, r4
   17b14:	sub	sp, fp, #16
   17b18:	pop	{r4, r5, r6, sl, fp, lr}
   17b1c:	b	11034 <fclose@plt>
   17b20:	push	{r4, sl, fp, lr}
   17b24:	add	fp, sp, #8
   17b28:	sub	sp, sp, #8
   17b2c:	mov	r4, r0
   17b30:	cmp	r0, #0
   17b34:	beq	17b6c <__assert_fail@plt+0x6acc>
   17b38:	mov	r0, r4
   17b3c:	bl	10f68 <__freading@plt>
   17b40:	cmp	r0, #0
   17b44:	beq	17b6c <__assert_fail@plt+0x6acc>
   17b48:	ldrb	r0, [r4, #1]
   17b4c:	tst	r0, #1
   17b50:	beq	17b6c <__assert_fail@plt+0x6acc>
   17b54:	mov	r0, #1
   17b58:	mov	r2, #0
   17b5c:	mov	r3, #0
   17b60:	str	r0, [sp]
   17b64:	mov	r0, r4
   17b68:	bl	17b7c <__assert_fail@plt+0x6adc>
   17b6c:	mov	r0, r4
   17b70:	sub	sp, fp, #8
   17b74:	pop	{r4, sl, fp, lr}
   17b78:	b	10e78 <fflush@plt>
   17b7c:	push	{r4, r5, r6, r7, fp, lr}
   17b80:	add	fp, sp, #16
   17b84:	sub	sp, sp, #8
   17b88:	mov	r4, r0
   17b8c:	ldr	r0, [r0, #4]
   17b90:	mov	r5, r3
   17b94:	mov	r6, r2
   17b98:	ldr	r1, [r4, #8]
   17b9c:	cmp	r1, r0
   17ba0:	bne	17bbc <__assert_fail@plt+0x6b1c>
   17ba4:	ldrd	r0, [r4, #16]
   17ba8:	cmp	r1, r0
   17bac:	bne	17bbc <__assert_fail@plt+0x6b1c>
   17bb0:	ldr	r0, [r4, #36]	; 0x24
   17bb4:	cmp	r0, #0
   17bb8:	beq	17bd4 <__assert_fail@plt+0x6b34>
   17bbc:	mov	r0, r4
   17bc0:	mov	r2, r6
   17bc4:	mov	r3, r5
   17bc8:	sub	sp, fp, #16
   17bcc:	pop	{r4, r5, r6, r7, fp, lr}
   17bd0:	b	11040 <fseeko64@plt>
   17bd4:	ldr	r7, [fp, #8]
   17bd8:	mov	r0, r4
   17bdc:	bl	1101c <fileno@plt>
   17be0:	mov	r2, r6
   17be4:	mov	r3, r5
   17be8:	str	r7, [sp]
   17bec:	bl	10f14 <lseek64@plt>
   17bf0:	and	r2, r0, r1
   17bf4:	cmn	r2, #1
   17bf8:	beq	17c18 <__assert_fail@plt+0x6b78>
   17bfc:	strd	r0, [r4, #80]	; 0x50
   17c00:	ldr	r0, [r4]
   17c04:	bic	r0, r0, #16
   17c08:	str	r0, [r4]
   17c0c:	mov	r0, #0
   17c10:	sub	sp, fp, #16
   17c14:	pop	{r4, r5, r6, r7, fp, pc}
   17c18:	mvn	r0, #0
   17c1c:	sub	sp, fp, #16
   17c20:	pop	{r4, r5, r6, r7, fp, pc}
   17c24:	push	{fp, lr}
   17c28:	mov	fp, sp
   17c2c:	mov	r0, #14
   17c30:	bl	11064 <nl_langinfo@plt>
   17c34:	movw	r1, #35847	; 0x8c07
   17c38:	cmp	r0, #0
   17c3c:	movt	r1, #1
   17c40:	movne	r1, r0
   17c44:	movw	r0, #39398	; 0x99e6
   17c48:	ldrb	r2, [r1]
   17c4c:	movt	r0, #1
   17c50:	cmp	r2, #0
   17c54:	movne	r0, r1
   17c58:	pop	{fp, pc}
   17c5c:	push	{r4, r5, r6, r7, fp, lr}
   17c60:	add	fp, sp, #16
   17c64:	sub	sp, sp, #8
   17c68:	cmp	r0, #0
   17c6c:	add	r5, sp, #4
   17c70:	mov	r7, r2
   17c74:	mov	r4, r1
   17c78:	movne	r5, r0
   17c7c:	mov	r0, r5
   17c80:	bl	10f38 <mbrtowc@plt>
   17c84:	mov	r6, r0
   17c88:	cmp	r7, #0
   17c8c:	beq	17cb4 <__assert_fail@plt+0x6c14>
   17c90:	cmn	r6, #2
   17c94:	bcc	17cb4 <__assert_fail@plt+0x6c14>
   17c98:	mov	r0, #0
   17c9c:	bl	17cfc <__assert_fail@plt+0x6c5c>
   17ca0:	cmp	r0, #0
   17ca4:	bne	17cb4 <__assert_fail@plt+0x6c14>
   17ca8:	ldrb	r0, [r4]
   17cac:	mov	r6, #1
   17cb0:	str	r0, [r5]
   17cb4:	mov	r0, r6
   17cb8:	sub	sp, fp, #16
   17cbc:	pop	{r4, r5, r6, r7, fp, pc}
   17cc0:	cmp	r2, #0
   17cc4:	beq	17cf4 <__assert_fail@plt+0x6c54>
   17cc8:	mvn	r3, #0
   17ccc:	udiv	r3, r3, r2
   17cd0:	cmp	r3, r1
   17cd4:	bcs	17cf4 <__assert_fail@plt+0x6c54>
   17cd8:	push	{fp, lr}
   17cdc:	mov	fp, sp
   17ce0:	bl	10fe0 <__errno_location@plt>
   17ce4:	mov	r1, #12
   17ce8:	str	r1, [r0]
   17cec:	mov	r0, #0
   17cf0:	pop	{fp, pc}
   17cf4:	mul	r1, r2, r1
   17cf8:	b	179ac <__assert_fail@plt+0x690c>
   17cfc:	push	{r4, sl, fp, lr}
   17d00:	add	fp, sp, #8
   17d04:	sub	sp, sp, #264	; 0x108
   17d08:	add	r1, sp, #7
   17d0c:	movw	r2, #257	; 0x101
   17d10:	bl	17d68 <__assert_fail@plt+0x6cc8>
   17d14:	mov	r4, #0
   17d18:	cmp	r0, #0
   17d1c:	bne	17d5c <__assert_fail@plt+0x6cbc>
   17d20:	movw	r1, #35157	; 0x8955
   17d24:	add	r0, sp, #7
   17d28:	mov	r2, #2
   17d2c:	movt	r1, #1
   17d30:	bl	10fbc <bcmp@plt>
   17d34:	cmp	r0, #0
   17d38:	beq	17d5c <__assert_fail@plt+0x6cbc>
   17d3c:	movw	r1, #39404	; 0x99ec
   17d40:	add	r0, sp, #7
   17d44:	mov	r2, #6
   17d48:	movt	r1, #1
   17d4c:	bl	10fbc <bcmp@plt>
   17d50:	cmp	r0, #0
   17d54:	mov	r4, r0
   17d58:	movwne	r4, #1
   17d5c:	mov	r0, r4
   17d60:	sub	sp, fp, #8
   17d64:	pop	{r4, sl, fp, pc}
   17d68:	push	{r4, r5, r6, r7, fp, lr}
   17d6c:	add	fp, sp, #16
   17d70:	mov	r4, r1
   17d74:	mov	r1, #0
   17d78:	mov	r6, r2
   17d7c:	bl	1104c <setlocale@plt>
   17d80:	cmp	r0, #0
   17d84:	beq	17db4 <__assert_fail@plt+0x6d14>
   17d88:	mov	r7, r0
   17d8c:	bl	10fc8 <strlen@plt>
   17d90:	cmp	r0, r6
   17d94:	bcs	17dd0 <__assert_fail@plt+0x6d30>
   17d98:	add	r2, r0, #1
   17d9c:	mov	r0, r4
   17da0:	mov	r1, r7
   17da4:	bl	10e9c <memcpy@plt>
   17da8:	mov	r5, #0
   17dac:	mov	r0, r5
   17db0:	pop	{r4, r5, r6, r7, fp, pc}
   17db4:	mov	r5, #22
   17db8:	cmp	r6, #0
   17dbc:	beq	17df8 <__assert_fail@plt+0x6d58>
   17dc0:	mov	r0, #0
   17dc4:	strb	r0, [r4]
   17dc8:	mov	r0, r5
   17dcc:	pop	{r4, r5, r6, r7, fp, pc}
   17dd0:	mov	r5, #34	; 0x22
   17dd4:	cmp	r6, #0
   17dd8:	beq	17df8 <__assert_fail@plt+0x6d58>
   17ddc:	sub	r6, r6, #1
   17de0:	mov	r0, r4
   17de4:	mov	r1, r7
   17de8:	mov	r2, r6
   17dec:	bl	10e9c <memcpy@plt>
   17df0:	mov	r0, #0
   17df4:	strb	r0, [r4, r6]
   17df8:	mov	r0, r5
   17dfc:	pop	{r4, r5, r6, r7, fp, pc}
   17e00:	mov	r1, #0
   17e04:	b	1104c <setlocale@plt>
   17e08:	cmp	r3, #0
   17e0c:	cmpeq	r2, #0
   17e10:	bne	17e28 <__assert_fail@plt+0x6d88>
   17e14:	cmp	r1, #0
   17e18:	cmpeq	r0, #0
   17e1c:	mvnne	r1, #0
   17e20:	mvnne	r0, #0
   17e24:	b	17e44 <__assert_fail@plt+0x6da4>
   17e28:	sub	sp, sp, #8
   17e2c:	push	{sp, lr}
   17e30:	bl	17e54 <__assert_fail@plt+0x6db4>
   17e34:	ldr	lr, [sp, #4]
   17e38:	add	sp, sp, #8
   17e3c:	pop	{r2, r3}
   17e40:	bx	lr
   17e44:	push	{r1, lr}
   17e48:	mov	r0, #8
   17e4c:	bl	10e48 <raise@plt>
   17e50:	pop	{r1, pc}
   17e54:	cmp	r1, r3
   17e58:	cmpeq	r0, r2
   17e5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e60:	mov	r4, r0
   17e64:	movcc	r0, #0
   17e68:	mov	r5, r1
   17e6c:	ldr	lr, [sp, #36]	; 0x24
   17e70:	movcc	r1, r0
   17e74:	bcc	17f70 <__assert_fail@plt+0x6ed0>
   17e78:	cmp	r3, #0
   17e7c:	clzeq	ip, r2
   17e80:	clzne	ip, r3
   17e84:	addeq	ip, ip, #32
   17e88:	cmp	r5, #0
   17e8c:	clzeq	r1, r4
   17e90:	addeq	r1, r1, #32
   17e94:	clzne	r1, r5
   17e98:	sub	ip, ip, r1
   17e9c:	sub	sl, ip, #32
   17ea0:	lsl	r9, r3, ip
   17ea4:	rsb	fp, ip, #32
   17ea8:	orr	r9, r9, r2, lsl sl
   17eac:	orr	r9, r9, r2, lsr fp
   17eb0:	lsl	r8, r2, ip
   17eb4:	cmp	r5, r9
   17eb8:	cmpeq	r4, r8
   17ebc:	movcc	r0, #0
   17ec0:	movcc	r1, r0
   17ec4:	bcc	17ee0 <__assert_fail@plt+0x6e40>
   17ec8:	mov	r0, #1
   17ecc:	subs	r4, r4, r8
   17ed0:	lsl	r1, r0, sl
   17ed4:	orr	r1, r1, r0, lsr fp
   17ed8:	lsl	r0, r0, ip
   17edc:	sbc	r5, r5, r9
   17ee0:	cmp	ip, #0
   17ee4:	beq	17f70 <__assert_fail@plt+0x6ed0>
   17ee8:	lsr	r6, r8, #1
   17eec:	orr	r6, r6, r9, lsl #31
   17ef0:	lsr	r7, r9, #1
   17ef4:	mov	r2, ip
   17ef8:	b	17f1c <__assert_fail@plt+0x6e7c>
   17efc:	subs	r3, r4, r6
   17f00:	sbc	r8, r5, r7
   17f04:	adds	r3, r3, r3
   17f08:	adc	r8, r8, r8
   17f0c:	adds	r4, r3, #1
   17f10:	adc	r5, r8, #0
   17f14:	subs	r2, r2, #1
   17f18:	beq	17f38 <__assert_fail@plt+0x6e98>
   17f1c:	cmp	r5, r7
   17f20:	cmpeq	r4, r6
   17f24:	bcs	17efc <__assert_fail@plt+0x6e5c>
   17f28:	adds	r4, r4, r4
   17f2c:	adc	r5, r5, r5
   17f30:	subs	r2, r2, #1
   17f34:	bne	17f1c <__assert_fail@plt+0x6e7c>
   17f38:	lsr	r3, r4, ip
   17f3c:	orr	r3, r3, r5, lsl fp
   17f40:	lsr	r2, r5, ip
   17f44:	orr	r3, r3, r5, lsr sl
   17f48:	adds	r0, r0, r4
   17f4c:	mov	r4, r3
   17f50:	lsl	r3, r2, ip
   17f54:	orr	r3, r3, r4, lsl sl
   17f58:	lsl	ip, r4, ip
   17f5c:	orr	r3, r3, r4, lsr fp
   17f60:	adc	r1, r1, r5
   17f64:	subs	r0, r0, ip
   17f68:	mov	r5, r2
   17f6c:	sbc	r1, r1, r3
   17f70:	cmp	lr, #0
   17f74:	strdne	r4, [lr]
   17f78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f7c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17f80:	mov	r7, r0
   17f84:	ldr	r6, [pc, #72]	; 17fd4 <__assert_fail@plt+0x6f34>
   17f88:	ldr	r5, [pc, #72]	; 17fd8 <__assert_fail@plt+0x6f38>
   17f8c:	add	r6, pc, r6
   17f90:	add	r5, pc, r5
   17f94:	sub	r6, r6, r5
   17f98:	mov	r8, r1
   17f9c:	mov	r9, r2
   17fa0:	bl	10e10 <calloc@plt-0x20>
   17fa4:	asrs	r6, r6, #2
   17fa8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17fac:	mov	r4, #0
   17fb0:	add	r4, r4, #1
   17fb4:	ldr	r3, [r5], #4
   17fb8:	mov	r2, r9
   17fbc:	mov	r1, r8
   17fc0:	mov	r0, r7
   17fc4:	blx	r3
   17fc8:	cmp	r6, r4
   17fcc:	bne	17fb0 <__assert_fail@plt+0x6f10>
   17fd0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17fd4:	andeq	r1, r1, r8, ror pc
   17fd8:	andeq	r1, r1, r0, ror pc
   17fdc:	bx	lr
   17fe0:	ldr	r3, [pc, #12]	; 17ff4 <__assert_fail@plt+0x6f54>
   17fe4:	mov	r1, #0
   17fe8:	add	r3, pc, r3
   17fec:	ldr	r2, [r3]
   17ff0:	b	10ff8 <__cxa_atexit@plt>
   17ff4:	strdeq	r2, [r1], -ip

Disassembly of section .fini:

00017ff8 <.fini>:
   17ff8:	push	{r3, lr}
   17ffc:	pop	{r3, pc}
