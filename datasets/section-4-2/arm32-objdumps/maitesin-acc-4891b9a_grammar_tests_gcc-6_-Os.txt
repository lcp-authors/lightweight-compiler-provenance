
../repos/maitesin-acc-4891b9a/bin/grammar_tests:     file format elf32-littlearm


Disassembly of section .init:

00011844 <.init>:
   11844:	push	{r3, lr}
   11848:	bl	120ac <_start@@Base+0x3c>
   1184c:	pop	{r3, pc}

Disassembly of section .plt:

00011850 <fdopen@plt-0x14>:
   11850:	push	{lr}		; (str lr, [sp, #-4]!)
   11854:	ldr	lr, [pc, #4]	; 11860 <fdopen@plt-0x4>
   11858:	add	lr, pc, lr
   1185c:	ldr	pc, [lr, #8]!
   11860:	andeq	r7, r1, r0, lsr #15

00011864 <fdopen@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #94208	; 0x17000
   1186c:	ldr	pc, [ip, #1952]!	; 0x7a0

00011870 <raise@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #94208	; 0x17000
   11878:	ldr	pc, [ip, #1944]!	; 0x798

0001187c <setbuf@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #94208	; 0x17000
   11884:	ldr	pc, [ip, #1936]!	; 0x790

00011888 <printf@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #94208	; 0x17000
   11890:	ldr	pc, [ip, #1928]!	; 0x788

00011894 <fflush@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #94208	; 0x17000
   1189c:	ldr	pc, [ip, #1920]!	; 0x780

000118a0 <free@plt>:
   118a0:	add	ip, pc, #0, 12
   118a4:	add	ip, ip, #94208	; 0x17000
   118a8:	ldr	pc, [ip, #1912]!	; 0x778

000118ac <memcpy@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #94208	; 0x17000
   118b4:	ldr	pc, [ip, #1904]!	; 0x770

000118b8 <ftell@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #94208	; 0x17000
   118c0:	ldr	pc, [ip, #1896]!	; 0x768

000118c4 <fwrite@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #94208	; 0x17000
   118cc:	ldr	pc, [ip, #1888]!	; 0x760

000118d0 <strcpy@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #94208	; 0x17000
   118d8:	ldr	pc, [ip, #1880]!	; 0x758

000118dc <fread@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #94208	; 0x17000
   118e4:	ldr	pc, [ip, #1872]!	; 0x750

000118e8 <getenv@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #94208	; 0x17000
   118f0:	ldr	pc, [ip, #1864]!	; 0x748

000118f4 <puts@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #94208	; 0x17000
   118fc:	ldr	pc, [ip, #1856]!	; 0x740

00011900 <malloc@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #94208	; 0x17000
   11908:	ldr	pc, [ip, #1848]!	; 0x738

0001190c <__libc_start_main@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #94208	; 0x17000
   11914:	ldr	pc, [ip, #1840]!	; 0x730

00011918 <__fxstat@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #94208	; 0x17000
   11920:	ldr	pc, [ip, #1832]!	; 0x728

00011924 <__gmon_start__@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #94208	; 0x17000
   1192c:	ldr	pc, [ip, #1824]!	; 0x720

00011930 <open@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #94208	; 0x17000
   11938:	ldr	pc, [ip, #1816]!	; 0x718

0001193c <getpid@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #94208	; 0x17000
   11944:	ldr	pc, [ip, #1808]!	; 0x710

00011948 <exit@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #94208	; 0x17000
   11950:	ldr	pc, [ip, #1800]!	; 0x708

00011954 <strlen@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #94208	; 0x17000
   1195c:	ldr	pc, [ip, #1792]!	; 0x700

00011960 <fprintf@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #94208	; 0x17000
   11968:	ldr	pc, [ip, #1784]!	; 0x6f8

0001196c <__errno_location@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #94208	; 0x17000
   11974:	ldr	pc, [ip, #1776]!	; 0x6f0

00011978 <__cxa_atexit@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #94208	; 0x17000
   11980:	ldr	pc, [ip, #1768]!	; 0x6e8

00011984 <mkdir@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #94208	; 0x17000
   1198c:	ldr	pc, [ip, #1760]!	; 0x6e0

00011990 <fcntl@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #94208	; 0x17000
   11998:	ldr	pc, [ip, #1752]!	; 0x6d8

0001199c <memset@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #94208	; 0x17000
   119a4:	ldr	pc, [ip, #1744]!	; 0x6d0

000119a8 <access@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #94208	; 0x17000
   119b0:	ldr	pc, [ip, #1736]!	; 0x6c8

000119b4 <fclose@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #94208	; 0x17000
   119bc:	ldr	pc, [ip, #1728]!	; 0x6c0

000119c0 <strnlen@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #94208	; 0x17000
   119c8:	ldr	pc, [ip, #1720]!	; 0x6b8

000119cc <vfprintf@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #94208	; 0x17000
   119d4:	ldr	pc, [ip, #1712]!	; 0x6b0

000119d8 <atoi@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #94208	; 0x17000
   119e0:	ldr	pc, [ip, #1704]!	; 0x6a8

000119e4 <fseek@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #94208	; 0x17000
   119ec:	ldr	pc, [ip, #1696]!	; 0x6a0

000119f0 <fputs@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #94208	; 0x17000
   119f8:	ldr	pc, [ip, #1688]!	; 0x698

000119fc <strncmp@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #94208	; 0x17000
   11a04:	ldr	pc, [ip, #1680]!	; 0x690

00011a08 <abort@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #94208	; 0x17000
   11a10:	ldr	pc, [ip, #1672]!	; 0x688

00011a14 <close@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #94208	; 0x17000
   11a1c:	ldr	pc, [ip, #1664]!	; 0x680

00011a20 <__assert_fail@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #94208	; 0x17000
   11a28:	ldr	pc, [ip, #1656]!	; 0x678

Disassembly of section .text:

00011a2c <main@@Base>:
   11a2c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11a30:	mov	r1, #0
   11a34:	ldr	r5, [pc, #1452]	; 11fe8 <main@@Base+0x5bc>
   11a38:	ldr	r6, [pc, #1452]	; 11fec <main@@Base+0x5c0>
   11a3c:	add	r4, r5, #1520	; 0x5f0
   11a40:	ldr	r9, [pc, #1448]	; 11ff0 <main@@Base+0x5c4>
   11a44:	ldrd	r2, [r4, #-8]
   11a48:	ldr	r0, [r6]
   11a4c:	ldr	r8, [pc, #1440]	; 11ff4 <main@@Base+0x5c8>
   11a50:	adds	r2, r2, #1
   11a54:	adc	r3, r3, #0
   11a58:	ldr	r7, [pc, #1432]	; 11ff8 <main@@Base+0x5cc>
   11a5c:	strd	r2, [r4, #-8]
   11a60:	bl	1187c <setbuf@plt>
   11a64:	ldrd	r2, [r4]
   11a68:	ldr	r1, [r6]
   11a6c:	mov	r0, r9
   11a70:	adds	r2, r2, #1
   11a74:	adc	r3, r3, #0
   11a78:	strd	r2, [r4]
   11a7c:	bl	119f0 <fputs@plt>
   11a80:	ldrd	r2, [r4, #8]
   11a84:	ldr	r1, [r6]
   11a88:	ldr	r0, [pc, #1388]	; 11ffc <main@@Base+0x5d0>
   11a8c:	adds	r2, r2, #1
   11a90:	adc	r3, r3, #0
   11a94:	strd	r2, [r4, #8]
   11a98:	bl	119f0 <fputs@plt>
   11a9c:	ldrd	r2, [r4, #16]
   11aa0:	ldr	r1, [r6]
   11aa4:	ldr	r0, [pc, #1364]	; 12000 <main@@Base+0x5d4>
   11aa8:	adds	r2, r2, #1
   11aac:	adc	r3, r3, #0
   11ab0:	ldr	r6, [pc, #1356]	; 12004 <main@@Base+0x5d8>
   11ab4:	strd	r2, [r4, #16]
   11ab8:	bl	119f0 <fputs@plt>
   11abc:	ldrd	r2, [r4, #24]
   11ac0:	mov	r0, #0
   11ac4:	adds	r2, r2, #1
   11ac8:	adc	r3, r3, #0
   11acc:	strd	r2, [r4, #24]
   11ad0:	bl	11894 <fflush@plt>
   11ad4:	ldrd	r2, [r4, #32]
   11ad8:	mov	r1, r8
   11adc:	mov	r0, r7
   11ae0:	adds	r2, r2, #1
   11ae4:	adc	r3, r3, #0
   11ae8:	strd	r2, [r4, #32]
   11aec:	ldr	r2, [pc, #1300]	; 12008 <main@@Base+0x5dc>
   11af0:	bl	11888 <printf@plt>
   11af4:	ldrd	r2, [r4, #40]	; 0x28
   11af8:	adds	r2, r2, #1
   11afc:	adc	r3, r3, #0
   11b00:	strd	r2, [r4, #40]	; 0x28
   11b04:	bl	12430 <setup@@Base>
   11b08:	ldrd	r2, [r4, #48]	; 0x30
   11b0c:	adds	r2, r2, #1
   11b10:	adc	r3, r3, #0
   11b14:	strd	r2, [r4, #48]	; 0x30
   11b18:	bl	12478 <no_int_as_first_stuff@@Base>
   11b1c:	ldrd	r2, [r4, #56]	; 0x38
   11b20:	mov	r0, r6
   11b24:	adds	r2, r2, #1
   11b28:	adc	r3, r3, #0
   11b2c:	strd	r2, [r4, #56]	; 0x38
   11b30:	bl	118f4 <puts@plt>
   11b34:	ldrd	r2, [r4, #64]	; 0x40
   11b38:	mov	r1, r8
   11b3c:	mov	r0, r7
   11b40:	adds	r2, r2, #1
   11b44:	adc	r3, r3, #0
   11b48:	strd	r2, [r4, #64]	; 0x40
   11b4c:	ldr	r2, [pc, #1208]	; 1200c <main@@Base+0x5e0>
   11b50:	bl	11888 <printf@plt>
   11b54:	ldrd	r2, [r4, #72]	; 0x48
   11b58:	adds	r2, r2, #1
   11b5c:	adc	r3, r3, #0
   11b60:	strd	r2, [r4, #72]	; 0x48
   11b64:	bl	12430 <setup@@Base>
   11b68:	ldrd	r2, [r4, #80]	; 0x50
   11b6c:	adds	r2, r2, #1
   11b70:	adc	r3, r3, #0
   11b74:	strd	r2, [r4, #80]	; 0x50
   11b78:	bl	12568 <int_but_not_followed_by_function@@Base>
   11b7c:	ldrd	r2, [r4, #88]	; 0x58
   11b80:	mov	r0, r6
   11b84:	adds	r2, r2, #1
   11b88:	adc	r3, r3, #0
   11b8c:	strd	r2, [r4, #88]	; 0x58
   11b90:	bl	118f4 <puts@plt>
   11b94:	ldrd	r2, [r4, #96]	; 0x60
   11b98:	mov	r1, r8
   11b9c:	mov	r0, r7
   11ba0:	adds	r2, r2, #1
   11ba4:	adc	r3, r3, #0
   11ba8:	strd	r2, [r4, #96]	; 0x60
   11bac:	ldr	r2, [pc, #1116]	; 12010 <main@@Base+0x5e4>
   11bb0:	bl	11888 <printf@plt>
   11bb4:	ldrd	r2, [r4, #104]	; 0x68
   11bb8:	adds	r2, r2, #1
   11bbc:	adc	r3, r3, #0
   11bc0:	strd	r2, [r4, #104]	; 0x68
   11bc4:	bl	12430 <setup@@Base>
   11bc8:	ldrd	r2, [r4, #112]	; 0x70
   11bcc:	adds	r2, r2, #1
   11bd0:	adc	r3, r3, #0
   11bd4:	strd	r2, [r4, #112]	; 0x70
   11bd8:	bl	12d60 <boolean_unary_operator_is_read_properly@@Base>
   11bdc:	ldrd	r2, [r4, #120]	; 0x78
   11be0:	mov	r0, r6
   11be4:	adds	r2, r2, #1
   11be8:	adc	r3, r3, #0
   11bec:	strd	r2, [r4, #120]	; 0x78
   11bf0:	bl	118f4 <puts@plt>
   11bf4:	ldrd	r2, [r4, #128]	; 0x80
   11bf8:	mov	r1, r8
   11bfc:	mov	r0, r7
   11c00:	adds	r2, r2, #1
   11c04:	adc	r3, r3, #0
   11c08:	strd	r2, [r4, #128]	; 0x80
   11c0c:	ldr	r2, [pc, #1024]	; 12014 <main@@Base+0x5e8>
   11c10:	bl	11888 <printf@plt>
   11c14:	ldrd	r2, [r4, #136]	; 0x88
   11c18:	adds	r2, r2, #1
   11c1c:	adc	r3, r3, #0
   11c20:	strd	r2, [r4, #136]	; 0x88
   11c24:	bl	12430 <setup@@Base>
   11c28:	ldrd	r2, [r4, #144]	; 0x90
   11c2c:	adds	r2, r2, #1
   11c30:	adc	r3, r3, #0
   11c34:	strd	r2, [r4, #144]	; 0x90
   11c38:	bl	12b44 <boolean_binary_operator_is_read_properly@@Base>
   11c3c:	ldrd	r2, [r4, #152]	; 0x98
   11c40:	mov	r0, r6
   11c44:	adds	r2, r2, #1
   11c48:	adc	r3, r3, #0
   11c4c:	strd	r2, [r4, #152]	; 0x98
   11c50:	bl	118f4 <puts@plt>
   11c54:	ldrd	r2, [r4, #160]	; 0xa0
   11c58:	mov	r1, r8
   11c5c:	mov	r0, r7
   11c60:	adds	r2, r2, #1
   11c64:	adc	r3, r3, #0
   11c68:	strd	r2, [r4, #160]	; 0xa0
   11c6c:	ldr	r2, [pc, #932]	; 12018 <main@@Base+0x5ec>
   11c70:	bl	11888 <printf@plt>
   11c74:	ldrd	r2, [r4, #168]	; 0xa8
   11c78:	adds	r2, r2, #1
   11c7c:	adc	r3, r3, #0
   11c80:	strd	r2, [r4, #168]	; 0xa8
   11c84:	bl	12430 <setup@@Base>
   11c88:	ldrd	r2, [r4, #176]	; 0xb0
   11c8c:	adds	r2, r2, #1
   11c90:	adc	r3, r3, #0
   11c94:	strd	r2, [r4, #176]	; 0xb0
   11c98:	bl	1268c <boolean_expression_is_read_properly@@Base>
   11c9c:	ldrd	r2, [r4, #184]	; 0xb8
   11ca0:	mov	r0, r6
   11ca4:	adds	r2, r2, #1
   11ca8:	adc	r3, r3, #0
   11cac:	strd	r2, [r4, #184]	; 0xb8
   11cb0:	bl	118f4 <puts@plt>
   11cb4:	ldrd	r2, [r4, #192]	; 0xc0
   11cb8:	mov	r1, r8
   11cbc:	mov	r0, r7
   11cc0:	adds	r2, r2, #1
   11cc4:	adc	r3, r3, #0
   11cc8:	strd	r2, [r4, #192]	; 0xc0
   11ccc:	ldr	r2, [pc, #840]	; 1201c <main@@Base+0x5f0>
   11cd0:	bl	11888 <printf@plt>
   11cd4:	ldrd	r2, [r4, #200]	; 0xc8
   11cd8:	adds	r2, r2, #1
   11cdc:	adc	r3, r3, #0
   11ce0:	strd	r2, [r4, #200]	; 0xc8
   11ce4:	bl	12430 <setup@@Base>
   11ce8:	ldrd	r2, [r4, #208]	; 0xd0
   11cec:	adds	r2, r2, #1
   11cf0:	adc	r3, r3, #0
   11cf4:	strd	r2, [r4, #208]	; 0xd0
   11cf8:	bl	128a0 <boolean_expression_complex@@Base>
   11cfc:	ldrd	r2, [r4, #216]	; 0xd8
   11d00:	mov	r0, r6
   11d04:	adds	r2, r2, #1
   11d08:	adc	r3, r3, #0
   11d0c:	strd	r2, [r4, #216]	; 0xd8
   11d10:	bl	118f4 <puts@plt>
   11d14:	ldrd	r2, [r4, #224]	; 0xe0
   11d18:	mov	r1, r8
   11d1c:	mov	r0, r7
   11d20:	adds	r2, r2, #1
   11d24:	adc	r3, r3, #0
   11d28:	strd	r2, [r4, #224]	; 0xe0
   11d2c:	ldr	r2, [pc, #748]	; 12020 <main@@Base+0x5f4>
   11d30:	bl	11888 <printf@plt>
   11d34:	ldrd	r2, [r4, #232]	; 0xe8
   11d38:	adds	r2, r2, #1
   11d3c:	adc	r3, r3, #0
   11d40:	strd	r2, [r4, #232]	; 0xe8
   11d44:	bl	12430 <setup@@Base>
   11d48:	ldrd	r2, [r4, #240]	; 0xf0
   11d4c:	adds	r2, r2, #1
   11d50:	adc	r3, r3, #0
   11d54:	strd	r2, [r4, #240]	; 0xf0
   11d58:	bl	12f4c <if_statement_only@@Base>
   11d5c:	ldrd	r2, [r4, #248]	; 0xf8
   11d60:	mov	r0, r6
   11d64:	adds	r2, r2, #1
   11d68:	adc	r3, r3, #0
   11d6c:	strd	r2, [r4, #248]	; 0xf8
   11d70:	bl	118f4 <puts@plt>
   11d74:	add	r1, r5, #1776	; 0x6f0
   11d78:	add	r4, r5, #1792	; 0x700
   11d7c:	ldrd	r2, [r1]
   11d80:	mov	r0, r7
   11d84:	adds	r2, r2, #1
   11d88:	adc	r3, r3, #0
   11d8c:	strd	r2, [r1]
   11d90:	mov	r1, r8
   11d94:	ldr	r2, [pc, #648]	; 12024 <main@@Base+0x5f8>
   11d98:	bl	11888 <printf@plt>
   11d9c:	ldrd	r2, [r4, #-8]
   11da0:	adds	r2, r2, #1
   11da4:	adc	r3, r3, #0
   11da8:	strd	r2, [r4, #-8]
   11dac:	bl	12430 <setup@@Base>
   11db0:	ldrd	r2, [r4]
   11db4:	adds	r2, r2, #1
   11db8:	adc	r3, r3, #0
   11dbc:	strd	r2, [r4]
   11dc0:	add	r4, r5, #1808	; 0x710
   11dc4:	bl	131c0 <if_else_statements@@Base>
   11dc8:	ldrd	r2, [r4, #-8]
   11dcc:	mov	r0, r6
   11dd0:	adds	r2, r2, #1
   11dd4:	adc	r3, r3, #0
   11dd8:	strd	r2, [r4, #-8]
   11ddc:	bl	118f4 <puts@plt>
   11de0:	ldrd	r2, [r4]
   11de4:	mov	r1, r8
   11de8:	mov	r0, r7
   11dec:	adds	r2, r2, #1
   11df0:	adc	r3, r3, #0
   11df4:	strd	r2, [r4]
   11df8:	add	r4, r5, #1824	; 0x720
   11dfc:	ldr	r2, [pc, #548]	; 12028 <main@@Base+0x5fc>
   11e00:	bl	11888 <printf@plt>
   11e04:	ldrd	r2, [r4, #-8]
   11e08:	adds	r2, r2, #1
   11e0c:	adc	r3, r3, #0
   11e10:	strd	r2, [r4, #-8]
   11e14:	bl	12430 <setup@@Base>
   11e18:	ldrd	r2, [r4]
   11e1c:	adds	r2, r2, #1
   11e20:	adc	r3, r3, #0
   11e24:	strd	r2, [r4]
   11e28:	add	r4, r5, #1840	; 0x730
   11e2c:	bl	1390c <if_statement_inside_if_statement@@Base>
   11e30:	ldrd	r2, [r4, #-8]
   11e34:	mov	r0, r6
   11e38:	adds	r2, r2, #1
   11e3c:	adc	r3, r3, #0
   11e40:	strd	r2, [r4, #-8]
   11e44:	bl	118f4 <puts@plt>
   11e48:	ldrd	r2, [r4]
   11e4c:	mov	r1, r8
   11e50:	mov	r0, r7
   11e54:	adds	r2, r2, #1
   11e58:	adc	r3, r3, #0
   11e5c:	strd	r2, [r4]
   11e60:	add	r4, r5, #1856	; 0x740
   11e64:	ldr	r2, [pc, #448]	; 1202c <main@@Base+0x600>
   11e68:	bl	11888 <printf@plt>
   11e6c:	ldrd	r2, [r4, #-8]
   11e70:	adds	r2, r2, #1
   11e74:	adc	r3, r3, #0
   11e78:	strd	r2, [r4, #-8]
   11e7c:	bl	12430 <setup@@Base>
   11e80:	ldrd	r2, [r4]
   11e84:	adds	r2, r2, #1
   11e88:	adc	r3, r3, #0
   11e8c:	strd	r2, [r4]
   11e90:	add	r4, r5, #1872	; 0x750
   11e94:	bl	13cec <if_statement_inside_else_statement@@Base>
   11e98:	ldrd	r2, [r4, #-8]
   11e9c:	mov	r0, r6
   11ea0:	adds	r2, r2, #1
   11ea4:	adc	r3, r3, #0
   11ea8:	strd	r2, [r4, #-8]
   11eac:	bl	118f4 <puts@plt>
   11eb0:	ldrd	r2, [r4]
   11eb4:	mov	r1, r8
   11eb8:	mov	r0, r7
   11ebc:	adds	r2, r2, #1
   11ec0:	adc	r3, r3, #0
   11ec4:	strd	r2, [r4]
   11ec8:	add	r4, r5, #1888	; 0x760
   11ecc:	ldr	r2, [pc, #348]	; 12030 <main@@Base+0x604>
   11ed0:	bl	11888 <printf@plt>
   11ed4:	ldrd	r2, [r4, #-8]
   11ed8:	adds	r2, r2, #1
   11edc:	adc	r3, r3, #0
   11ee0:	strd	r2, [r4, #-8]
   11ee4:	bl	12430 <setup@@Base>
   11ee8:	ldrd	r2, [r4]
   11eec:	adds	r2, r2, #1
   11ef0:	adc	r3, r3, #0
   11ef4:	strd	r2, [r4]
   11ef8:	add	r4, r5, #1904	; 0x770
   11efc:	bl	13710 <body_with_one_return@@Base>
   11f00:	ldrd	r2, [r4, #-8]
   11f04:	mov	r0, r6
   11f08:	adds	r2, r2, #1
   11f0c:	adc	r3, r3, #0
   11f10:	strd	r2, [r4, #-8]
   11f14:	bl	118f4 <puts@plt>
   11f18:	ldrd	r2, [r4]
   11f1c:	mov	r1, r8
   11f20:	mov	r0, r7
   11f24:	adds	r2, r2, #1
   11f28:	adc	r3, r3, #0
   11f2c:	strd	r2, [r4]
   11f30:	add	r4, r5, #1920	; 0x780
   11f34:	ldr	r2, [pc, #248]	; 12034 <main@@Base+0x608>
   11f38:	bl	11888 <printf@plt>
   11f3c:	ldrd	r2, [r4, #-8]
   11f40:	adds	r2, r2, #1
   11f44:	adc	r3, r3, #0
   11f48:	strd	r2, [r4, #-8]
   11f4c:	bl	12430 <setup@@Base>
   11f50:	ldrd	r2, [r4]
   11f54:	adds	r2, r2, #1
   11f58:	adc	r3, r3, #0
   11f5c:	strd	r2, [r4]
   11f60:	add	r4, r5, #1936	; 0x790
   11f64:	bl	13474 <body_with_two_returns@@Base>
   11f68:	ldrd	r2, [r4, #-8]
   11f6c:	mov	r0, r6
   11f70:	adds	r2, r2, #1
   11f74:	adc	r3, r3, #0
   11f78:	strd	r2, [r4, #-8]
   11f7c:	bl	118f4 <puts@plt>
   11f80:	ldrd	r2, [r4]
   11f84:	ldr	r0, [pc, #172]	; 12038 <main@@Base+0x60c>
   11f88:	adds	r2, r2, #1
   11f8c:	adc	r3, r3, #0
   11f90:	strd	r2, [r4]
   11f94:	add	r4, r5, #1952	; 0x7a0
   11f98:	bl	118f4 <puts@plt>
   11f9c:	ldrd	r2, [r4, #-8]
   11fa0:	ldr	r0, [pc, #148]	; 1203c <main@@Base+0x610>
   11fa4:	add	r5, r5, #1968	; 0x7b0
   11fa8:	adds	r2, r2, #1
   11fac:	adc	r3, r3, #0
   11fb0:	strd	r2, [r4, #-8]
   11fb4:	bl	118f4 <puts@plt>
   11fb8:	ldrd	r2, [r4]
   11fbc:	mov	r0, r9
   11fc0:	adds	r2, r2, #1
   11fc4:	adc	r3, r3, #0
   11fc8:	strd	r2, [r4]
   11fcc:	bl	118f4 <puts@plt>
   11fd0:	ldrd	r2, [r5, #-8]
   11fd4:	mov	r0, #0
   11fd8:	adds	r2, r2, #1
   11fdc:	adc	r3, r3, #0
   11fe0:	strd	r2, [r5, #-8]
   11fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11fe8:	muleq	r2, r8, r9
   11fec:	andeq	r9, r2, ip, lsl #19
   11ff0:	andeq	r7, r1, r5, lsr #31
   11ff4:	andeq	r7, r1, r9, ror #31
   11ff8:	strdeq	r7, [r1], -r5
   11ffc:			; <UNDEFINED> instruction: 0x00017fb4
   12000:	andeq	r7, r1, r3, asr #31
   12004:	andeq	r8, r1, r7
   12008:	ldrdeq	r7, [r1], -r3
   1200c:	andeq	r8, r1, r0, lsl r0
   12010:	andeq	r8, r1, r1, lsr r0
   12014:	andeq	r8, r1, r9, asr r0
   12018:	andeq	r8, r1, r2, lsl #1
   1201c:	andeq	r8, r1, r6, lsr #1
   12020:	andeq	r8, r1, r1, asr #1
   12024:	ldrdeq	r8, [r1], -r3
   12028:	andeq	r8, r1, r6, ror #1
   1202c:	andeq	r8, r1, r7, lsl #2
   12030:	andeq	r8, r1, sl, lsr #2
   12034:	andeq	r8, r1, pc, lsr r1
   12038:	andeq	r8, r1, r5, asr r1
   1203c:	andeq	r8, r1, r4, ror #2
   12040:	ldr	r0, [pc]	; 12048 <main@@Base+0x61c>
   12044:	b	177fc <__gcov_sort_n_vals@@Base+0x458>
   12048:	strheq	r9, [r2], -ip
   1204c:	ldr	r0, [pc]	; 12054 <main@@Base+0x628>
   12050:	b	177fc <__gcov_sort_n_vals@@Base+0x458>
   12054:	strdeq	r9, [r2], -r4
   12058:	ldr	r0, [pc]	; 12060 <main@@Base+0x634>
   1205c:	b	177fc <__gcov_sort_n_vals@@Base+0x458>
   12060:	andeq	r9, r2, ip, lsl #12
   12064:	ldr	r0, [pc]	; 1206c <main@@Base+0x640>
   12068:	b	177fc <__gcov_sort_n_vals@@Base+0x458>
   1206c:	andeq	r9, r2, ip, lsl #16

00012070 <_start@@Base>:
   12070:	mov	fp, #0
   12074:	mov	lr, #0
   12078:	pop	{r1}		; (ldr r1, [sp], #4)
   1207c:	mov	r2, sp
   12080:	push	{r2}		; (str r2, [sp, #-4]!)
   12084:	push	{r0}		; (str r0, [sp, #-4]!)
   12088:	ldr	ip, [pc, #16]	; 120a0 <_start@@Base+0x30>
   1208c:	push	{ip}		; (str ip, [sp, #-4]!)
   12090:	ldr	r0, [pc, #12]	; 120a4 <_start@@Base+0x34>
   12094:	ldr	r3, [pc, #12]	; 120a8 <_start@@Base+0x38>
   12098:	bl	1190c <__libc_start_main@plt>
   1209c:	bl	11a08 <abort@plt>
   120a0:	andeq	r7, r1, r8, lsl #23
   120a4:	andeq	r1, r1, ip, lsr #20
   120a8:	andeq	r7, r1, r8, lsr #22
   120ac:	ldr	r3, [pc, #20]	; 120c8 <_start@@Base+0x58>
   120b0:	ldr	r2, [pc, #20]	; 120cc <_start@@Base+0x5c>
   120b4:	add	r3, pc, r3
   120b8:	ldr	r2, [r3, r2]
   120bc:	cmp	r2, #0
   120c0:	bxeq	lr
   120c4:	b	11924 <__gmon_start__@plt>
   120c8:	andeq	r6, r1, r4, asr #30
   120cc:	andeq	r0, r0, r8, lsr #1
   120d0:	ldr	r3, [pc, #28]	; 120f4 <_start@@Base+0x84>
   120d4:	ldr	r0, [pc, #28]	; 120f8 <_start@@Base+0x88>
   120d8:	sub	r3, r3, r0
   120dc:	cmp	r3, #6
   120e0:	bxls	lr
   120e4:	ldr	r3, [pc, #16]	; 120fc <_start@@Base+0x8c>
   120e8:	cmp	r3, #0
   120ec:	bxeq	lr
   120f0:	bx	r3
   120f4:	andeq	r9, r2, fp, lsl #19
   120f8:	andeq	r9, r2, r8, lsl #19
   120fc:	andeq	r0, r0, r0
   12100:	ldr	r1, [pc, #36]	; 1212c <_start@@Base+0xbc>
   12104:	ldr	r0, [pc, #36]	; 12130 <_start@@Base+0xc0>
   12108:	sub	r1, r1, r0
   1210c:	asr	r1, r1, #2
   12110:	add	r1, r1, r1, lsr #31
   12114:	asrs	r1, r1, #1
   12118:	bxeq	lr
   1211c:	ldr	r3, [pc, #16]	; 12134 <_start@@Base+0xc4>
   12120:	cmp	r3, #0
   12124:	bxeq	lr
   12128:	bx	r3
   1212c:	andeq	r9, r2, r8, lsl #19
   12130:	andeq	r9, r2, r8, lsl #19
   12134:	andeq	r0, r0, r0
   12138:	push	{r4, lr}
   1213c:	ldr	r4, [pc, #24]	; 1215c <_start@@Base+0xec>
   12140:	ldrb	r3, [r4]
   12144:	cmp	r3, #0
   12148:	popne	{r4, pc}
   1214c:	bl	120d0 <_start@@Base+0x60>
   12150:	mov	r3, #1
   12154:	strb	r3, [r4]
   12158:	pop	{r4, pc}
   1215c:	muleq	r2, r0, r9
   12160:	ldr	r0, [pc, #40]	; 12190 <_start@@Base+0x120>
   12164:	ldr	r3, [r0]
   12168:	cmp	r3, #0
   1216c:	bne	12174 <_start@@Base+0x104>
   12170:	b	12100 <_start@@Base+0x90>
   12174:	ldr	r3, [pc, #24]	; 12194 <_start@@Base+0x124>
   12178:	cmp	r3, #0
   1217c:	beq	12170 <_start@@Base+0x100>
   12180:	push	{r4, lr}
   12184:	blx	r3
   12188:	pop	{r4, lr}
   1218c:	b	12100 <_start@@Base+0x90>
   12190:	andeq	r8, r2, r4, lsl pc
   12194:	andeq	r0, r0, r0

00012198 <next@@Base>:
   12198:	ldr	r3, [pc, #284]	; 122bc <next@@Base+0x124>
   1219c:	push	{r4, r6, r7, lr}
   121a0:	ldr	r2, [r3, #204]	; 0xcc
   121a4:	str	r0, [r3]
   121a8:	cmp	r2, #49	; 0x31
   121ac:	addls	r2, r2, #1
   121b0:	ldr	r4, [pc, #264]	; 122c0 <next@@Base+0x128>
   121b4:	strls	r0, [r3, r2, lsl #2]
   121b8:	bls	121d8 <next@@Base+0x40>
   121bc:	ldrd	r6, [r4]
   121c0:	ldr	r2, [r3, #212]	; 0xd4
   121c4:	adds	r6, r6, #1
   121c8:	adc	r7, r7, #0
   121cc:	add	r2, r2, #1
   121d0:	str	r2, [r3, #212]	; 0xd4
   121d4:	strd	r6, [r4]
   121d8:	ldr	r2, [r3, #204]	; 0xcc
   121dc:	add	r2, r2, #1
   121e0:	str	r2, [r3, #204]	; 0xcc
   121e4:	ldr	r2, [pc, #216]	; 122c4 <next@@Base+0x12c>
   121e8:	ldr	r1, [r2, #200]	; 0xc8
   121ec:	cmp	r1, #49	; 0x31
   121f0:	bhi	12214 <next@@Base+0x7c>
   121f4:	ldrd	r6, [r4, #8]
   121f8:	add	ip, r1, #1
   121fc:	str	ip, [r2, #200]	; 0xc8
   12200:	adds	r6, r6, #1
   12204:	ldr	ip, [pc, #188]	; 122c8 <next@@Base+0x130>
   12208:	adc	r7, r7, #0
   1220c:	str	ip, [r2, r1, lsl #2]
   12210:	strd	r6, [r4, #8]
   12214:	ldr	r1, [r3, #232]	; 0xe8
   12218:	cmp	r1, #0
   1221c:	beq	12248 <next@@Base+0xb0>
   12220:	ldrd	r2, [r4, #16]
   12224:	adds	r2, r2, #1
   12228:	adc	r3, r3, #0
   1222c:	strd	r2, [r4, #16]
   12230:	blx	r1
   12234:	ldrd	r2, [r4, #24]
   12238:	adds	r2, r2, #1
   1223c:	adc	r3, r3, #0
   12240:	strd	r2, [r4, #24]
   12244:	pop	{r4, r6, r7, pc}
   12248:	ldr	r2, [r3, #220]	; 0xdc
   1224c:	cmp	r2, #0
   12250:	beq	122a4 <next@@Base+0x10c>
   12254:	ldr	r1, [r3, #224]	; 0xe0
   12258:	cmp	r2, r1
   1225c:	ble	12284 <next@@Base+0xec>
   12260:	ldr	r2, [r3, #228]	; 0xe4
   12264:	add	r0, r1, #1
   12268:	str	r0, [r3, #224]	; 0xe0
   1226c:	ldr	r0, [r2, r1, lsl #2]
   12270:	ldrd	r2, [r4, #32]
   12274:	adds	r2, r2, #1
   12278:	adc	r3, r3, #0
   1227c:	strd	r2, [r4, #32]
   12280:	pop	{r4, r6, r7, pc}
   12284:	ldr	r3, [r3, #228]	; 0xe4
   12288:	sub	r2, r2, #-1073741823	; 0xc0000001
   1228c:	ldr	r0, [r3, r2, lsl #2]
   12290:	ldrd	r2, [r4, #40]	; 0x28
   12294:	adds	r2, r2, #1
   12298:	adc	r3, r3, #0
   1229c:	strd	r2, [r4, #40]	; 0x28
   122a0:	pop	{r4, r6, r7, pc}
   122a4:	ldr	r0, [r3, #216]	; 0xd8
   122a8:	ldrd	r2, [r4, #48]	; 0x30
   122ac:	adds	r2, r2, #1
   122b0:	adc	r3, r3, #0
   122b4:	strd	r2, [r4, #48]	; 0x30
   122b8:	pop	{r4, r6, r7, pc}
   122bc:	andeq	sl, r2, r0, lsl #18
   122c0:	muleq	r2, r8, r9
   122c4:	andeq	sl, r2, ip, ror #19
   122c8:	muleq	r1, r8, r1

000122cc <push_back@@Base>:
   122cc:	ldr	r3, [pc, #204]	; 123a0 <push_back@@Base+0xd4>
   122d0:	push	{r4, r5, r6, r7, r8, lr}
   122d4:	ldr	r2, [r3, #408]	; 0x198
   122d8:	str	r0, [r3]
   122dc:	cmp	r2, #49	; 0x31
   122e0:	str	r1, [r3, #204]	; 0xcc
   122e4:	ldr	r4, [pc, #184]	; 123a4 <push_back@@Base+0xd8>
   122e8:	bhi	12380 <push_back@@Base+0xb4>
   122ec:	ldrd	r6, [r4, #56]	; 0x38
   122f0:	add	r2, r2, #1
   122f4:	str	r0, [r3, r2, lsl #2]
   122f8:	ldr	r2, [r3, #408]	; 0x198
   122fc:	adds	r6, r6, #1
   12300:	add	r2, r2, #52	; 0x34
   12304:	adc	r7, r7, #0
   12308:	str	r1, [r3, r2, lsl #2]
   1230c:	strd	r6, [r4, #56]	; 0x38
   12310:	ldr	r2, [r3, #408]	; 0x198
   12314:	add	r2, r2, #1
   12318:	str	r2, [r3, #408]	; 0x198
   1231c:	ldr	r2, [pc, #132]	; 123a8 <push_back@@Base+0xdc>
   12320:	ldr	ip, [r2, #200]	; 0xc8
   12324:	cmp	ip, #49	; 0x31
   12328:	bhi	1234c <push_back@@Base+0x80>
   1232c:	ldrd	r6, [r4, #72]	; 0x48
   12330:	add	lr, ip, #1
   12334:	str	lr, [r2, #200]	; 0xc8
   12338:	adds	r6, r6, #1
   1233c:	ldr	lr, [pc, #104]	; 123ac <push_back@@Base+0xe0>
   12340:	adc	r7, r7, #0
   12344:	str	lr, [r2, ip, lsl #2]
   12348:	strd	r6, [r4, #72]	; 0x48
   1234c:	ldr	r5, [r3, #420]	; 0x1a4
   12350:	cmp	r5, #0
   12354:	popeq	{r4, r5, r6, r7, r8, pc}
   12358:	ldrd	r2, [r4, #80]	; 0x50
   1235c:	adds	r2, r2, #1
   12360:	adc	r3, r3, #0
   12364:	strd	r2, [r4, #80]	; 0x50
   12368:	blx	r5
   1236c:	ldrd	r2, [r4, #88]	; 0x58
   12370:	adds	r2, r2, #1
   12374:	adc	r3, r3, #0
   12378:	strd	r2, [r4, #88]	; 0x58
   1237c:	pop	{r4, r5, r6, r7, r8, pc}
   12380:	ldrd	r6, [r4, #64]	; 0x40
   12384:	ldr	r2, [r3, #416]	; 0x1a0
   12388:	adds	r6, r6, #1
   1238c:	adc	r7, r7, #0
   12390:	add	r2, r2, #1
   12394:	str	r2, [r3, #416]	; 0x1a0
   12398:	strd	r6, [r4, #64]	; 0x40
   1239c:	b	12310 <push_back@@Base+0x44>
   123a0:	andeq	sl, r2, r8, asr r7
   123a4:	muleq	r2, r8, r9
   123a8:	andeq	sl, r2, ip, ror #19
   123ac:	andeq	r2, r1, ip, asr #5

000123b0 <next_reset@@Base>:
   123b0:	ldr	r1, [pc, #48]	; 123e8 <next_reset@@Base+0x38>
   123b4:	push	{r4, lr}
   123b8:	ldrd	r2, [r1, #96]	; 0x60
   123bc:	ldr	r4, [pc, #40]	; 123ec <next_reset@@Base+0x3c>
   123c0:	adds	r2, r2, #1
   123c4:	adc	r3, r3, #0
   123c8:	mov	r0, r4
   123cc:	strd	r2, [r1, #96]	; 0x60
   123d0:	mov	r2, #236	; 0xec
   123d4:	mov	r1, #0
   123d8:	bl	1199c <memset@plt>
   123dc:	mov	r3, #50	; 0x32
   123e0:	str	r3, [r4, #208]	; 0xd0
   123e4:	pop	{r4, pc}
   123e8:	muleq	r2, r8, r9
   123ec:	andeq	sl, r2, r0, lsl #18

000123f0 <push_back_reset@@Base>:
   123f0:	ldr	r1, [pc, #48]	; 12428 <push_back_reset@@Base+0x38>
   123f4:	push	{r4, lr}
   123f8:	ldrd	r2, [r1, #104]	; 0x68
   123fc:	ldr	r4, [pc, #40]	; 1242c <push_back_reset@@Base+0x3c>
   12400:	adds	r2, r2, #1
   12404:	adc	r3, r3, #0
   12408:	mov	r0, r4
   1240c:	strd	r2, [r1, #104]	; 0x68
   12410:	mov	r2, #424	; 0x1a8
   12414:	mov	r1, #0
   12418:	bl	1199c <memset@plt>
   1241c:	mov	r3, #50	; 0x32
   12420:	str	r3, [r4, #412]	; 0x19c
   12424:	pop	{r4, pc}
   12428:	muleq	r2, r8, r9
   1242c:	andeq	sl, r2, r8, asr r7

00012430 <setup@@Base>:
   12430:	push	{r4, lr}
   12434:	ldr	r4, [pc, #56]	; 12474 <setup@@Base+0x44>
   12438:	ldrd	r2, [r4, #112]	; 0x70
   1243c:	adds	r2, r2, #1
   12440:	adc	r3, r3, #0
   12444:	strd	r2, [r4, #112]	; 0x70
   12448:	bl	123b0 <next_reset@@Base>
   1244c:	ldrd	r2, [r4, #120]	; 0x78
   12450:	adds	r2, r2, #1
   12454:	adc	r3, r3, #0
   12458:	strd	r2, [r4, #120]	; 0x78
   1245c:	bl	123f0 <push_back_reset@@Base>
   12460:	ldrd	r2, [r4, #128]	; 0x80
   12464:	adds	r2, r2, #1
   12468:	adc	r3, r3, #0
   1246c:	strd	r2, [r4, #128]	; 0x80
   12470:	pop	{r4, pc}
   12474:	muleq	r2, r8, r9

00012478 <no_int_as_first_stuff@@Base>:
   12478:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1247c:	add	r1, sp, #4
   12480:	ldr	r4, [pc, #200]	; 12550 <no_int_as_first_stuff@@Base+0xd8>
   12484:	mov	r0, sp
   12488:	ldr	r5, [pc, #196]	; 12554 <no_int_as_first_stuff@@Base+0xdc>
   1248c:	ldrd	r2, [r4, #136]	; 0x88
   12490:	adds	r2, r2, #1
   12494:	adc	r3, r3, #0
   12498:	strd	r2, [r4, #136]	; 0x88
   1249c:	bl	14c60 <init_grammar@@Base>
   124a0:	ldrd	r2, [r4, #144]	; 0x90
   124a4:	mov	r0, #4
   124a8:	adds	r2, r2, #1
   124ac:	adc	r3, r3, #0
   124b0:	strd	r2, [r4, #144]	; 0x90
   124b4:	bl	11900 <malloc@plt>
   124b8:	mov	r6, r0
   124bc:	bl	14180 <init_token_opar@@Base>
   124c0:	ldrd	r2, [r4, #152]	; 0x98
   124c4:	mov	r0, sp
   124c8:	str	r6, [r5, #216]	; 0xd8
   124cc:	adds	r2, r2, #1
   124d0:	adc	r3, r3, #0
   124d4:	strd	r2, [r4, #152]	; 0x98
   124d8:	bl	156f8 <read_function_ast_node@@Base>
   124dc:	ldr	r3, [r5, #204]	; 0xcc
   124e0:	cmp	r3, #1
   124e4:	beq	1250c <no_int_as_first_stuff@@Base+0x94>
   124e8:	ldrd	r2, [r4, #160]	; 0xa0
   124ec:	ldr	r1, [pc, #100]	; 12558 <no_int_as_first_stuff@@Base+0xe0>
   124f0:	ldr	r0, [pc, #100]	; 1255c <no_int_as_first_stuff@@Base+0xe4>
   124f4:	adds	r2, r2, #1
   124f8:	adc	r3, r3, #0
   124fc:	strd	r2, [r4, #160]	; 0xa0
   12500:	ldr	r3, [pc, #88]	; 12560 <no_int_as_first_stuff@@Base+0xe8>
   12504:	mov	r2, #41	; 0x29
   12508:	bl	11a20 <__assert_fail@plt>
   1250c:	cmp	r0, #0
   12510:	beq	12538 <no_int_as_first_stuff@@Base+0xc0>
   12514:	ldrd	r2, [r4, #176]	; 0xb0
   12518:	ldr	r1, [pc, #56]	; 12558 <no_int_as_first_stuff@@Base+0xe0>
   1251c:	ldr	r0, [pc, #64]	; 12564 <no_int_as_first_stuff@@Base+0xec>
   12520:	adds	r2, r2, #1
   12524:	adc	r3, r3, #0
   12528:	strd	r2, [r4, #176]	; 0xb0
   1252c:	ldr	r3, [pc, #44]	; 12560 <no_int_as_first_stuff@@Base+0xe8>
   12530:	mov	r2, #42	; 0x2a
   12534:	b	12508 <no_int_as_first_stuff@@Base+0x90>
   12538:	ldrd	r2, [r4, #168]	; 0xa8
   1253c:	adds	r2, r2, #1
   12540:	adc	r3, r3, #0
   12544:	strd	r2, [r4, #168]	; 0xa8
   12548:	add	sp, sp, #16
   1254c:	pop	{r4, r5, r6, pc}
   12550:	muleq	r2, r8, r9
   12554:	andeq	sl, r2, r0, lsl #18
   12558:	andeq	r7, r1, fp, lsl sp
   1255c:	andeq	r7, r1, pc, asr sp
   12560:	andeq	r7, r1, r0, asr #23
   12564:	andeq	r7, r1, r9, ror sp

00012568 <int_but_not_followed_by_function@@Base>:
   12568:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1256c:	add	r1, sp, #4
   12570:	ldr	r4, [pc, #252]	; 12674 <int_but_not_followed_by_function@@Base+0x10c>
   12574:	mov	r0, sp
   12578:	ldr	r5, [pc, #248]	; 12678 <int_but_not_followed_by_function@@Base+0x110>
   1257c:	ldrd	r2, [r4, #184]	; 0xb8
   12580:	adds	r2, r2, #1
   12584:	adc	r3, r3, #0
   12588:	strd	r2, [r4, #184]	; 0xb8
   1258c:	bl	14c60 <init_grammar@@Base>
   12590:	ldrd	r2, [r4, #192]	; 0xc0
   12594:	mov	r0, #8
   12598:	adds	r2, r2, #1
   1259c:	adc	r3, r3, #0
   125a0:	strd	r2, [r4, #192]	; 0xc0
   125a4:	bl	11900 <malloc@plt>
   125a8:	mov	r6, r0
   125ac:	mov	r0, #4
   125b0:	bl	11900 <malloc@plt>
   125b4:	str	r0, [r6]
   125b8:	bl	1410c <init_token_int_type@@Base>
   125bc:	ldrd	r2, [r4, #200]	; 0xc8
   125c0:	mov	r0, #4
   125c4:	adds	r2, r2, #1
   125c8:	adc	r3, r3, #0
   125cc:	strd	r2, [r4, #200]	; 0xc8
   125d0:	bl	11900 <malloc@plt>
   125d4:	str	r0, [r6, #4]
   125d8:	bl	14180 <init_token_opar@@Base>
   125dc:	ldrd	r2, [r4, #208]	; 0xd0
   125e0:	mov	r0, sp
   125e4:	str	r6, [r5, #228]	; 0xe4
   125e8:	adds	r2, r2, #1
   125ec:	adc	r3, r3, #0
   125f0:	strd	r2, [r4, #208]	; 0xd0
   125f4:	mov	r3, #2
   125f8:	str	r3, [r5, #220]	; 0xdc
   125fc:	bl	156f8 <read_function_ast_node@@Base>
   12600:	ldr	r3, [r5, #204]	; 0xcc
   12604:	cmp	r3, #2
   12608:	beq	12630 <int_but_not_followed_by_function@@Base+0xc8>
   1260c:	ldrd	r2, [r4, #216]	; 0xd8
   12610:	ldr	r1, [pc, #100]	; 1267c <int_but_not_followed_by_function@@Base+0x114>
   12614:	ldr	r0, [pc, #100]	; 12680 <int_but_not_followed_by_function@@Base+0x118>
   12618:	adds	r2, r2, #1
   1261c:	adc	r3, r3, #0
   12620:	strd	r2, [r4, #216]	; 0xd8
   12624:	ldr	r3, [pc, #88]	; 12684 <int_but_not_followed_by_function@@Base+0x11c>
   12628:	mov	r2, #67	; 0x43
   1262c:	bl	11a20 <__assert_fail@plt>
   12630:	cmp	r0, #0
   12634:	beq	1265c <int_but_not_followed_by_function@@Base+0xf4>
   12638:	ldrd	r2, [r4, #232]	; 0xe8
   1263c:	ldr	r1, [pc, #56]	; 1267c <int_but_not_followed_by_function@@Base+0x114>
   12640:	ldr	r0, [pc, #64]	; 12688 <int_but_not_followed_by_function@@Base+0x120>
   12644:	adds	r2, r2, #1
   12648:	adc	r3, r3, #0
   1264c:	strd	r2, [r4, #232]	; 0xe8
   12650:	ldr	r3, [pc, #44]	; 12684 <int_but_not_followed_by_function@@Base+0x11c>
   12654:	mov	r2, #68	; 0x44
   12658:	b	1262c <int_but_not_followed_by_function@@Base+0xc4>
   1265c:	ldrd	r2, [r4, #224]	; 0xe0
   12660:	adds	r2, r2, #1
   12664:	adc	r3, r3, #0
   12668:	strd	r2, [r4, #224]	; 0xe0
   1266c:	add	sp, sp, #16
   12670:	pop	{r4, r5, r6, pc}
   12674:	muleq	r2, r8, r9
   12678:	andeq	sl, r2, r0, lsl #18
   1267c:	andeq	r7, r1, fp, lsl sp
   12680:	andeq	r7, r1, r5, lsl #27
   12684:	ldrdeq	r7, [r1], -r6
   12688:	andeq	r7, r1, r9, ror sp

0001268c <boolean_expression_is_read_properly@@Base>:
   1268c:	push	{r4, r5, r6, r7, lr}
   12690:	mov	r0, #3
   12694:	ldr	r4, [pc, #484]	; 12880 <boolean_expression_is_read_properly@@Base+0x1f4>
   12698:	sub	sp, sp, #20
   1269c:	add	r6, r4, #272	; 0x110
   126a0:	ldrd	r2, [r4, #240]	; 0xf0
   126a4:	adds	r2, r2, #1
   126a8:	adc	r3, r3, #0
   126ac:	strd	r2, [r4, #240]	; 0xf0
   126b0:	bl	11900 <malloc@plt>
   126b4:	mov	r3, #33	; 0x21
   126b8:	add	r1, sp, #4
   126bc:	strb	r3, [r0]
   126c0:	mov	r3, #61	; 0x3d
   126c4:	strb	r3, [r0, #1]
   126c8:	mov	r3, #0
   126cc:	strb	r3, [r0, #2]
   126d0:	mov	r7, r0
   126d4:	mov	r0, sp
   126d8:	bl	14c60 <init_grammar@@Base>
   126dc:	ldrd	r2, [r4, #248]	; 0xf8
   126e0:	mov	r0, #20
   126e4:	adds	r2, r2, #1
   126e8:	adc	r3, r3, #0
   126ec:	strd	r2, [r4, #248]	; 0xf8
   126f0:	bl	11900 <malloc@plt>
   126f4:	mov	r5, r0
   126f8:	mov	r0, #8
   126fc:	bl	11900 <malloc@plt>
   12700:	mov	r1, #2
   12704:	str	r0, [r5]
   12708:	bl	14130 <init_token_int_value@@Base>
   1270c:	add	r1, r4, #256	; 0x100
   12710:	mov	r0, #8
   12714:	ldrd	r2, [r1]
   12718:	adds	r2, r2, #1
   1271c:	adc	r3, r3, #0
   12720:	strd	r2, [r1]
   12724:	bl	11900 <malloc@plt>
   12728:	mov	r1, #2
   1272c:	str	r0, [r5, #4]
   12730:	bl	14130 <init_token_int_value@@Base>
   12734:	ldrd	r2, [r6, #-8]
   12738:	mov	r0, #8
   1273c:	adds	r2, r2, #1
   12740:	adc	r3, r3, #0
   12744:	strd	r2, [r6, #-8]
   12748:	bl	11900 <malloc@plt>
   1274c:	mov	r1, r7
   12750:	str	r0, [r5, #8]
   12754:	bl	142c4 <init_token_boolean_op@@Base>
   12758:	ldrd	r2, [r6]
   1275c:	mov	r0, #8
   12760:	adds	r2, r2, #1
   12764:	adc	r3, r3, #0
   12768:	strd	r2, [r6]
   1276c:	bl	11900 <malloc@plt>
   12770:	add	r6, r4, #288	; 0x120
   12774:	mov	r1, #1
   12778:	str	r0, [r5, #12]
   1277c:	bl	14130 <init_token_int_value@@Base>
   12780:	ldrd	r2, [r6, #-8]
   12784:	mov	r0, #4
   12788:	adds	r2, r2, #1
   1278c:	adc	r3, r3, #0
   12790:	strd	r2, [r6, #-8]
   12794:	bl	11900 <malloc@plt>
   12798:	str	r0, [r5, #16]
   1279c:	bl	141a4 <init_token_cpar@@Base>
   127a0:	ldrd	r2, [r6]
   127a4:	mov	r0, sp
   127a8:	adds	r2, r2, #1
   127ac:	adc	r3, r3, #0
   127b0:	strd	r2, [r6]
   127b4:	ldr	r6, [pc, #200]	; 12884 <boolean_expression_is_read_properly@@Base+0x1f8>
   127b8:	mov	r3, #5
   127bc:	str	r3, [r6, #220]	; 0xdc
   127c0:	str	r5, [r6, #228]	; 0xe4
   127c4:	bl	15238 <read_boolean_expression@@Base>
   127c8:	ldr	r3, [r6, #204]	; 0xcc
   127cc:	cmp	r3, #5
   127d0:	beq	127fc <boolean_expression_is_read_properly@@Base+0x170>
   127d4:	add	r4, r4, #304	; 0x130
   127d8:	ldr	r1, [pc, #168]	; 12888 <boolean_expression_is_read_properly@@Base+0x1fc>
   127dc:	ldrd	r2, [r4, #-8]
   127e0:	ldr	r0, [pc, #164]	; 1288c <boolean_expression_is_read_properly@@Base+0x200>
   127e4:	adds	r2, r2, #1
   127e8:	adc	r3, r3, #0
   127ec:	strd	r2, [r4, #-8]
   127f0:	ldr	r3, [pc, #152]	; 12890 <boolean_expression_is_read_properly@@Base+0x204>
   127f4:	mov	r2, #105	; 0x69
   127f8:	bl	11a20 <__assert_fail@plt>
   127fc:	ldr	r3, [pc, #144]	; 12894 <boolean_expression_is_read_properly@@Base+0x208>
   12800:	ldr	r3, [r3, #408]	; 0x198
   12804:	cmp	r3, #1
   12808:	beq	12834 <boolean_expression_is_read_properly@@Base+0x1a8>
   1280c:	add	r4, r4, #304	; 0x130
   12810:	ldr	r1, [pc, #112]	; 12888 <boolean_expression_is_read_properly@@Base+0x1fc>
   12814:	ldrd	r2, [r4]
   12818:	ldr	r0, [pc, #120]	; 12898 <boolean_expression_is_read_properly@@Base+0x20c>
   1281c:	adds	r2, r2, #1
   12820:	adc	r3, r3, #0
   12824:	strd	r2, [r4]
   12828:	ldr	r3, [pc, #96]	; 12890 <boolean_expression_is_read_properly@@Base+0x204>
   1282c:	mov	r2, #106	; 0x6a
   12830:	b	127f8 <boolean_expression_is_read_properly@@Base+0x16c>
   12834:	ldr	r3, [r0]
   12838:	add	r4, r4, #320	; 0x140
   1283c:	cmp	r3, #5
   12840:	beq	12868 <boolean_expression_is_read_properly@@Base+0x1dc>
   12844:	ldrd	r2, [r4]
   12848:	ldr	r1, [pc, #56]	; 12888 <boolean_expression_is_read_properly@@Base+0x1fc>
   1284c:	ldr	r0, [pc, #72]	; 1289c <boolean_expression_is_read_properly@@Base+0x210>
   12850:	adds	r2, r2, #1
   12854:	adc	r3, r3, #0
   12858:	strd	r2, [r4]
   1285c:	ldr	r3, [pc, #44]	; 12890 <boolean_expression_is_read_properly@@Base+0x204>
   12860:	mov	r2, #107	; 0x6b
   12864:	b	127f8 <boolean_expression_is_read_properly@@Base+0x16c>
   12868:	ldrd	r2, [r4, #-8]
   1286c:	adds	r2, r2, #1
   12870:	adc	r3, r3, #0
   12874:	strd	r2, [r4, #-8]
   12878:	add	sp, sp, #20
   1287c:	pop	{r4, r5, r6, r7, pc}
   12880:	muleq	r2, r8, r9
   12884:	andeq	sl, r2, r0, lsl #18
   12888:	andeq	r7, r1, fp, lsl sp
   1288c:	muleq	r1, pc, sp	; <UNPREDICTABLE>
   12890:	strdeq	r7, [r1], -r7	; <UNPREDICTABLE>
   12894:	andeq	sl, r2, r8, asr r7
   12898:			; <UNDEFINED> instruction: 0x00017db9
   1289c:	ldrdeq	r7, [r1], -r8

000128a0 <boolean_expression_complex@@Base>:
   128a0:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   128a4:	mov	r0, #3
   128a8:	ldr	r4, [pc, #636]	; 12b2c <boolean_expression_complex@@Base+0x28c>
   128ac:	ldrd	r2, [r4, #-8]
   128b0:	adds	r2, r2, #1
   128b4:	adc	r3, r3, #0
   128b8:	strd	r2, [r4, #-8]
   128bc:	bl	11900 <malloc@plt>
   128c0:	mov	r8, r0
   128c4:	mov	r0, #3
   128c8:	bl	11900 <malloc@plt>
   128cc:	mov	r7, r0
   128d0:	mov	r0, #3
   128d4:	bl	11900 <malloc@plt>
   128d8:	mov	r3, #60	; 0x3c
   128dc:	mov	r2, #61	; 0x3d
   128e0:	mov	r1, #38	; 0x26
   128e4:	strb	r3, [r8]
   128e8:	mov	r3, #0
   128ec:	strb	r1, [r7]
   128f0:	strb	r1, [r7, #1]
   128f4:	add	r1, sp, #4
   128f8:	strb	r2, [r8, #1]
   128fc:	strb	r3, [r8, #2]
   12900:	strb	r3, [r7, #2]
   12904:	mov	r6, r0
   12908:	strb	r2, [r0]
   1290c:	strb	r2, [r0, #1]
   12910:	strb	r3, [r0, #2]
   12914:	mov	r0, sp
   12918:	bl	14c60 <init_grammar@@Base>
   1291c:	ldrd	r2, [r4]
   12920:	mov	r0, #40	; 0x28
   12924:	adds	r2, r2, #1
   12928:	adc	r3, r3, #0
   1292c:	strd	r2, [r4]
   12930:	bl	11900 <malloc@plt>
   12934:	mov	r5, r0
   12938:	mov	r0, #8
   1293c:	bl	11900 <malloc@plt>
   12940:	mov	r1, #2
   12944:	str	r0, [r5]
   12948:	bl	14130 <init_token_int_value@@Base>
   1294c:	ldrd	r2, [r4, #8]
   12950:	mov	r0, #8
   12954:	adds	r2, r2, #1
   12958:	adc	r3, r3, #0
   1295c:	strd	r2, [r4, #8]
   12960:	bl	11900 <malloc@plt>
   12964:	mov	r1, #2
   12968:	str	r0, [r5, #4]
   1296c:	bl	14130 <init_token_int_value@@Base>
   12970:	ldrd	r2, [r4, #16]
   12974:	mov	r0, #8
   12978:	adds	r2, r2, #1
   1297c:	adc	r3, r3, #0
   12980:	strd	r2, [r4, #16]
   12984:	bl	11900 <malloc@plt>
   12988:	mov	r1, r8
   1298c:	str	r0, [r5, #8]
   12990:	bl	142c4 <init_token_boolean_op@@Base>
   12994:	ldrd	r2, [r4, #24]
   12998:	mov	r0, #8
   1299c:	adds	r2, r2, #1
   129a0:	adc	r3, r3, #0
   129a4:	strd	r2, [r4, #24]
   129a8:	bl	11900 <malloc@plt>
   129ac:	mov	r1, #1
   129b0:	str	r0, [r5, #12]
   129b4:	bl	14130 <init_token_int_value@@Base>
   129b8:	ldrd	r2, [r4, #32]
   129bc:	mov	r0, #8
   129c0:	adds	r2, r2, #1
   129c4:	adc	r3, r3, #0
   129c8:	strd	r2, [r4, #32]
   129cc:	bl	11900 <malloc@plt>
   129d0:	mov	r1, r7
   129d4:	str	r0, [r5, #16]
   129d8:	bl	142c4 <init_token_boolean_op@@Base>
   129dc:	ldrd	r2, [r4, #40]	; 0x28
   129e0:	mov	r0, #8
   129e4:	adds	r2, r2, #1
   129e8:	adc	r3, r3, #0
   129ec:	strd	r2, [r4, #40]	; 0x28
   129f0:	bl	11900 <malloc@plt>
   129f4:	mov	r1, #4
   129f8:	str	r0, [r5, #20]
   129fc:	bl	14130 <init_token_int_value@@Base>
   12a00:	ldrd	r2, [r4, #48]	; 0x30
   12a04:	mov	r0, #8
   12a08:	adds	r2, r2, #1
   12a0c:	adc	r3, r3, #0
   12a10:	strd	r2, [r4, #48]	; 0x30
   12a14:	bl	11900 <malloc@plt>
   12a18:	mov	r1, #4
   12a1c:	str	r0, [r5, #24]
   12a20:	bl	14130 <init_token_int_value@@Base>
   12a24:	ldrd	r2, [r4, #56]	; 0x38
   12a28:	mov	r0, #8
   12a2c:	adds	r2, r2, #1
   12a30:	adc	r3, r3, #0
   12a34:	strd	r2, [r4, #56]	; 0x38
   12a38:	bl	11900 <malloc@plt>
   12a3c:	mov	r1, r6
   12a40:	ldr	r6, [pc, #232]	; 12b30 <boolean_expression_complex@@Base+0x290>
   12a44:	str	r0, [r5, #28]
   12a48:	bl	142c4 <init_token_boolean_op@@Base>
   12a4c:	ldrd	r2, [r4, #64]	; 0x40
   12a50:	mov	r0, #8
   12a54:	adds	r2, r2, #1
   12a58:	adc	r3, r3, #0
   12a5c:	strd	r2, [r4, #64]	; 0x40
   12a60:	bl	11900 <malloc@plt>
   12a64:	mov	r1, #4
   12a68:	str	r0, [r5, #32]
   12a6c:	bl	14130 <init_token_int_value@@Base>
   12a70:	ldrd	r2, [r4, #72]	; 0x48
   12a74:	mov	r0, #4
   12a78:	adds	r2, r2, #1
   12a7c:	adc	r3, r3, #0
   12a80:	strd	r2, [r4, #72]	; 0x48
   12a84:	bl	11900 <malloc@plt>
   12a88:	str	r0, [r5, #36]	; 0x24
   12a8c:	bl	141a4 <init_token_cpar@@Base>
   12a90:	ldrd	r2, [r4, #80]	; 0x50
   12a94:	mov	r0, sp
   12a98:	str	r5, [r6, #228]	; 0xe4
   12a9c:	adds	r2, r2, #1
   12aa0:	adc	r3, r3, #0
   12aa4:	strd	r2, [r4, #80]	; 0x50
   12aa8:	mov	r3, #10
   12aac:	str	r3, [r6, #220]	; 0xdc
   12ab0:	bl	15238 <read_boolean_expression@@Base>
   12ab4:	ldr	r3, [r6, #204]	; 0xcc
   12ab8:	cmp	r3, #10
   12abc:	beq	12ae4 <boolean_expression_complex@@Base+0x244>
   12ac0:	ldrd	r2, [r4, #88]	; 0x58
   12ac4:	ldr	r1, [pc, #104]	; 12b34 <boolean_expression_complex@@Base+0x294>
   12ac8:	ldr	r0, [pc, #104]	; 12b38 <boolean_expression_complex@@Base+0x298>
   12acc:	adds	r2, r2, #1
   12ad0:	adc	r3, r3, #0
   12ad4:	strd	r2, [r4, #88]	; 0x58
   12ad8:	ldr	r3, [pc, #92]	; 12b3c <boolean_expression_complex@@Base+0x29c>
   12adc:	mov	r2, #166	; 0xa6
   12ae0:	bl	11a20 <__assert_fail@plt>
   12ae4:	ldr	r3, [r0]
   12ae8:	cmp	r3, #5
   12aec:	beq	12b14 <boolean_expression_complex@@Base+0x274>
   12af0:	ldrd	r2, [r4, #104]	; 0x68
   12af4:	ldr	r1, [pc, #56]	; 12b34 <boolean_expression_complex@@Base+0x294>
   12af8:	ldr	r0, [pc, #64]	; 12b40 <boolean_expression_complex@@Base+0x2a0>
   12afc:	adds	r2, r2, #1
   12b00:	adc	r3, r3, #0
   12b04:	strd	r2, [r4, #104]	; 0x68
   12b08:	ldr	r3, [pc, #44]	; 12b3c <boolean_expression_complex@@Base+0x29c>
   12b0c:	mov	r2, #167	; 0xa7
   12b10:	b	12ae0 <boolean_expression_complex@@Base+0x240>
   12b14:	ldrd	r2, [r4, #96]	; 0x60
   12b18:	adds	r2, r2, #1
   12b1c:	adc	r3, r3, #0
   12b20:	strd	r2, [r4, #96]	; 0x60
   12b24:	add	sp, sp, #16
   12b28:	pop	{r4, r5, r6, r7, r8, pc}
   12b2c:	andeq	r9, r2, r8, ror #21
   12b30:	andeq	sl, r2, r0, lsl #18
   12b34:	andeq	r7, r1, fp, lsl sp
   12b38:	strdeq	r7, [r1], -r8
   12b3c:	andeq	r7, r1, fp, lsl ip
   12b40:	ldrdeq	r7, [r1], -r8

00012b44 <boolean_binary_operator_is_read_properly@@Base>:
   12b44:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12b48:	mov	r0, #3
   12b4c:	ldr	r4, [pc, #488]	; 12d3c <boolean_binary_operator_is_read_properly@@Base+0x1f8>
   12b50:	ldrd	r2, [r4]
   12b54:	adds	r2, r2, #1
   12b58:	adc	r3, r3, #0
   12b5c:	strd	r2, [r4]
   12b60:	bl	11900 <malloc@plt>
   12b64:	mov	r3, #33	; 0x21
   12b68:	add	r1, sp, #4
   12b6c:	strb	r3, [r0]
   12b70:	mov	r3, #61	; 0x3d
   12b74:	strb	r3, [r0, #1]
   12b78:	mov	r3, #0
   12b7c:	mov	r6, r0
   12b80:	strb	r3, [r0, #2]
   12b84:	mov	r0, sp
   12b88:	bl	14c60 <init_grammar@@Base>
   12b8c:	ldrd	r2, [r4, #8]
   12b90:	mov	r0, #12
   12b94:	adds	r2, r2, #1
   12b98:	adc	r3, r3, #0
   12b9c:	strd	r2, [r4, #8]
   12ba0:	bl	11900 <malloc@plt>
   12ba4:	mov	r5, r0
   12ba8:	mov	r0, #8
   12bac:	bl	11900 <malloc@plt>
   12bb0:	mov	r1, #2
   12bb4:	str	r0, [r5]
   12bb8:	bl	14130 <init_token_int_value@@Base>
   12bbc:	ldrd	r2, [r4, #16]
   12bc0:	mov	r0, #8
   12bc4:	adds	r2, r2, #1
   12bc8:	adc	r3, r3, #0
   12bcc:	strd	r2, [r4, #16]
   12bd0:	bl	11900 <malloc@plt>
   12bd4:	mov	r1, r6
   12bd8:	ldr	r6, [pc, #352]	; 12d40 <boolean_binary_operator_is_read_properly@@Base+0x1fc>
   12bdc:	str	r0, [r5, #4]
   12be0:	bl	142c4 <init_token_boolean_op@@Base>
   12be4:	ldrd	r2, [r4, #24]
   12be8:	mov	r0, #8
   12bec:	adds	r2, r2, #1
   12bf0:	adc	r3, r3, #0
   12bf4:	strd	r2, [r4, #24]
   12bf8:	bl	11900 <malloc@plt>
   12bfc:	mov	r1, #1
   12c00:	str	r0, [r5, #8]
   12c04:	bl	14130 <init_token_int_value@@Base>
   12c08:	ldrd	r2, [r4, #32]
   12c0c:	mov	r0, sp
   12c10:	str	r5, [r6, #228]	; 0xe4
   12c14:	adds	r2, r2, #1
   12c18:	adc	r3, r3, #0
   12c1c:	strd	r2, [r4, #32]
   12c20:	mov	r3, #3
   12c24:	str	r3, [r6, #220]	; 0xdc
   12c28:	bl	14f1c <read_boolean_binary_expression@@Base>
   12c2c:	ldr	r3, [r6, #204]	; 0xcc
   12c30:	cmp	r3, #3
   12c34:	beq	12c5c <boolean_binary_operator_is_read_properly@@Base+0x118>
   12c38:	ldrd	r2, [r4, #40]	; 0x28
   12c3c:	ldr	r1, [pc, #256]	; 12d44 <boolean_binary_operator_is_read_properly@@Base+0x200>
   12c40:	ldr	r0, [pc, #256]	; 12d48 <boolean_binary_operator_is_read_properly@@Base+0x204>
   12c44:	adds	r2, r2, #1
   12c48:	adc	r3, r3, #0
   12c4c:	strd	r2, [r4, #40]	; 0x28
   12c50:	ldr	r3, [pc, #244]	; 12d4c <boolean_binary_operator_is_read_properly@@Base+0x208>
   12c54:	mov	r2, #200	; 0xc8
   12c58:	bl	11a20 <__assert_fail@plt>
   12c5c:	ldr	r3, [r0]
   12c60:	cmp	r3, #5
   12c64:	beq	12c8c <boolean_binary_operator_is_read_properly@@Base+0x148>
   12c68:	ldrd	r2, [r4, #48]	; 0x30
   12c6c:	ldr	r1, [pc, #208]	; 12d44 <boolean_binary_operator_is_read_properly@@Base+0x200>
   12c70:	ldr	r0, [pc, #216]	; 12d50 <boolean_binary_operator_is_read_properly@@Base+0x20c>
   12c74:	adds	r2, r2, #1
   12c78:	adc	r3, r3, #0
   12c7c:	strd	r2, [r4, #48]	; 0x30
   12c80:	ldr	r3, [pc, #196]	; 12d4c <boolean_binary_operator_is_read_properly@@Base+0x208>
   12c84:	mov	r2, #201	; 0xc9
   12c88:	b	12c58 <boolean_binary_operator_is_read_properly@@Base+0x114>
   12c8c:	ldr	r3, [r0, #8]
   12c90:	ldr	r3, [r3]
   12c94:	cmp	r3, #1
   12c98:	beq	12cc0 <boolean_binary_operator_is_read_properly@@Base+0x17c>
   12c9c:	ldrd	r2, [r4, #56]	; 0x38
   12ca0:	ldr	r1, [pc, #156]	; 12d44 <boolean_binary_operator_is_read_properly@@Base+0x200>
   12ca4:	ldr	r0, [pc, #168]	; 12d54 <boolean_binary_operator_is_read_properly@@Base+0x210>
   12ca8:	adds	r2, r2, #1
   12cac:	adc	r3, r3, #0
   12cb0:	strd	r2, [r4, #56]	; 0x38
   12cb4:	ldr	r3, [pc, #144]	; 12d4c <boolean_binary_operator_is_read_properly@@Base+0x208>
   12cb8:	mov	r2, #203	; 0xcb
   12cbc:	b	12c58 <boolean_binary_operator_is_read_properly@@Base+0x114>
   12cc0:	ldr	r3, [r0, #16]
   12cc4:	cmp	r3, #1
   12cc8:	beq	12cf0 <boolean_binary_operator_is_read_properly@@Base+0x1ac>
   12ccc:	ldrd	r2, [r4, #64]	; 0x40
   12cd0:	ldr	r1, [pc, #108]	; 12d44 <boolean_binary_operator_is_read_properly@@Base+0x200>
   12cd4:	ldr	r0, [pc, #124]	; 12d58 <boolean_binary_operator_is_read_properly@@Base+0x214>
   12cd8:	adds	r2, r2, #1
   12cdc:	adc	r3, r3, #0
   12ce0:	strd	r2, [r4, #64]	; 0x40
   12ce4:	ldr	r3, [pc, #96]	; 12d4c <boolean_binary_operator_is_read_properly@@Base+0x208>
   12ce8:	mov	r2, #204	; 0xcc
   12cec:	b	12c58 <boolean_binary_operator_is_read_properly@@Base+0x114>
   12cf0:	ldr	r3, [r0, #12]
   12cf4:	ldr	r3, [r3]
   12cf8:	cmp	r3, #1
   12cfc:	beq	12d24 <boolean_binary_operator_is_read_properly@@Base+0x1e0>
   12d00:	ldrd	r2, [r4, #80]	; 0x50
   12d04:	ldr	r1, [pc, #56]	; 12d44 <boolean_binary_operator_is_read_properly@@Base+0x200>
   12d08:	ldr	r0, [pc, #76]	; 12d5c <boolean_binary_operator_is_read_properly@@Base+0x218>
   12d0c:	adds	r2, r2, #1
   12d10:	adc	r3, r3, #0
   12d14:	strd	r2, [r4, #80]	; 0x50
   12d18:	ldr	r3, [pc, #44]	; 12d4c <boolean_binary_operator_is_read_properly@@Base+0x208>
   12d1c:	mov	r2, #205	; 0xcd
   12d20:	b	12c58 <boolean_binary_operator_is_read_properly@@Base+0x114>
   12d24:	ldrd	r2, [r4, #72]	; 0x48
   12d28:	adds	r2, r2, #1
   12d2c:	adc	r3, r3, #0
   12d30:	strd	r2, [r4, #72]	; 0x48
   12d34:	add	sp, sp, #16
   12d38:	pop	{r4, r5, r6, pc}
   12d3c:	andeq	r9, r2, r8, asr fp
   12d40:	andeq	sl, r2, r0, lsl #18
   12d44:	andeq	r7, r1, fp, lsl sp
   12d48:	andeq	r7, r1, r3, lsl lr
   12d4c:	andeq	r7, r1, r6, lsr ip
   12d50:	ldrdeq	r7, [r1], -r8
   12d54:	andeq	r7, r1, sp, lsr #28
   12d58:	andeq	r7, r1, r8, asr #28
   12d5c:	andeq	r7, r1, r1, ror #28

00012d60 <boolean_unary_operator_is_read_properly@@Base>:
   12d60:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12d64:	mov	r0, #2
   12d68:	ldr	r4, [pc, #440]	; 12f28 <boolean_unary_operator_is_read_properly@@Base+0x1c8>
   12d6c:	ldrd	r2, [r4, #-8]
   12d70:	adds	r2, r2, #1
   12d74:	adc	r3, r3, #0
   12d78:	strd	r2, [r4, #-8]
   12d7c:	bl	11900 <malloc@plt>
   12d80:	mov	r3, #33	; 0x21
   12d84:	add	r1, sp, #4
   12d88:	strb	r3, [r0]
   12d8c:	mov	r3, #0
   12d90:	mov	r5, r0
   12d94:	strb	r3, [r0, #1]
   12d98:	mov	r0, sp
   12d9c:	bl	14c60 <init_grammar@@Base>
   12da0:	ldrd	r2, [r4]
   12da4:	mov	r0, #8
   12da8:	adds	r2, r2, #1
   12dac:	adc	r3, r3, #0
   12db0:	strd	r2, [r4]
   12db4:	bl	11900 <malloc@plt>
   12db8:	mov	r6, r0
   12dbc:	mov	r0, #8
   12dc0:	bl	11900 <malloc@plt>
   12dc4:	mov	r1, r5
   12dc8:	ldr	r5, [pc, #348]	; 12f2c <boolean_unary_operator_is_read_properly@@Base+0x1cc>
   12dcc:	str	r0, [r6]
   12dd0:	bl	142c4 <init_token_boolean_op@@Base>
   12dd4:	ldrd	r2, [r4, #8]
   12dd8:	mov	r0, #8
   12ddc:	adds	r2, r2, #1
   12de0:	adc	r3, r3, #0
   12de4:	strd	r2, [r4, #8]
   12de8:	bl	11900 <malloc@plt>
   12dec:	mov	r1, #1
   12df0:	str	r0, [r6, #4]
   12df4:	bl	14130 <init_token_int_value@@Base>
   12df8:	ldrd	r2, [r4, #16]
   12dfc:	mov	r0, sp
   12e00:	str	r6, [r5, #228]	; 0xe4
   12e04:	adds	r2, r2, #1
   12e08:	adc	r3, r3, #0
   12e0c:	strd	r2, [r4, #16]
   12e10:	mov	r3, #2
   12e14:	str	r3, [r5, #220]	; 0xdc
   12e18:	bl	14dac <read_boolean_unary_expression@@Base>
   12e1c:	ldr	r3, [r5, #204]	; 0xcc
   12e20:	cmp	r3, #2
   12e24:	beq	12e4c <boolean_unary_operator_is_read_properly@@Base+0xec>
   12e28:	ldrd	r2, [r4, #24]
   12e2c:	ldr	r1, [pc, #252]	; 12f30 <boolean_unary_operator_is_read_properly@@Base+0x1d0>
   12e30:	ldr	r0, [pc, #252]	; 12f34 <boolean_unary_operator_is_read_properly@@Base+0x1d4>
   12e34:	adds	r2, r2, #1
   12e38:	adc	r3, r3, #0
   12e3c:	strd	r2, [r4, #24]
   12e40:	ldr	r3, [pc, #240]	; 12f38 <boolean_unary_operator_is_read_properly@@Base+0x1d8>
   12e44:	mov	r2, #235	; 0xeb
   12e48:	bl	11a20 <__assert_fail@plt>
   12e4c:	ldr	r3, [r0]
   12e50:	cmp	r3, #5
   12e54:	beq	12e7c <boolean_unary_operator_is_read_properly@@Base+0x11c>
   12e58:	ldrd	r2, [r4, #32]
   12e5c:	ldr	r1, [pc, #204]	; 12f30 <boolean_unary_operator_is_read_properly@@Base+0x1d0>
   12e60:	ldr	r0, [pc, #212]	; 12f3c <boolean_unary_operator_is_read_properly@@Base+0x1dc>
   12e64:	adds	r2, r2, #1
   12e68:	adc	r3, r3, #0
   12e6c:	strd	r2, [r4, #32]
   12e70:	ldr	r3, [pc, #192]	; 12f38 <boolean_unary_operator_is_read_properly@@Base+0x1d8>
   12e74:	mov	r2, #236	; 0xec
   12e78:	b	12e48 <boolean_unary_operator_is_read_properly@@Base+0xe8>
   12e7c:	ldr	r3, [r0, #8]
   12e80:	ldr	r3, [r3]
   12e84:	cmp	r3, #1
   12e88:	beq	12eb0 <boolean_unary_operator_is_read_properly@@Base+0x150>
   12e8c:	ldrd	r2, [r4, #40]	; 0x28
   12e90:	ldr	r1, [pc, #152]	; 12f30 <boolean_unary_operator_is_read_properly@@Base+0x1d0>
   12e94:	ldr	r0, [pc, #164]	; 12f40 <boolean_unary_operator_is_read_properly@@Base+0x1e0>
   12e98:	adds	r2, r2, #1
   12e9c:	adc	r3, r3, #0
   12ea0:	strd	r2, [r4, #40]	; 0x28
   12ea4:	ldr	r3, [pc, #140]	; 12f38 <boolean_unary_operator_is_read_properly@@Base+0x1d8>
   12ea8:	mov	r2, #238	; 0xee
   12eac:	b	12e48 <boolean_unary_operator_is_read_properly@@Base+0xe8>
   12eb0:	ldr	r3, [r0, #16]
   12eb4:	cmp	r3, #8
   12eb8:	beq	12ee0 <boolean_unary_operator_is_read_properly@@Base+0x180>
   12ebc:	ldrd	r2, [r4, #48]	; 0x30
   12ec0:	ldr	r1, [pc, #104]	; 12f30 <boolean_unary_operator_is_read_properly@@Base+0x1d0>
   12ec4:	ldr	r0, [pc, #120]	; 12f44 <boolean_unary_operator_is_read_properly@@Base+0x1e4>
   12ec8:	adds	r2, r2, #1
   12ecc:	adc	r3, r3, #0
   12ed0:	strd	r2, [r4, #48]	; 0x30
   12ed4:	ldr	r3, [pc, #92]	; 12f38 <boolean_unary_operator_is_read_properly@@Base+0x1d8>
   12ed8:	mov	r2, #239	; 0xef
   12edc:	b	12e48 <boolean_unary_operator_is_read_properly@@Base+0xe8>
   12ee0:	ldr	r3, [r0, #12]
   12ee4:	cmp	r3, #0
   12ee8:	beq	12f10 <boolean_unary_operator_is_read_properly@@Base+0x1b0>
   12eec:	ldrd	r2, [r4, #64]	; 0x40
   12ef0:	ldr	r1, [pc, #56]	; 12f30 <boolean_unary_operator_is_read_properly@@Base+0x1d0>
   12ef4:	ldr	r0, [pc, #76]	; 12f48 <boolean_unary_operator_is_read_properly@@Base+0x1e8>
   12ef8:	adds	r2, r2, #1
   12efc:	adc	r3, r3, #0
   12f00:	strd	r2, [r4, #64]	; 0x40
   12f04:	ldr	r3, [pc, #44]	; 12f38 <boolean_unary_operator_is_read_properly@@Base+0x1d8>
   12f08:	mov	r2, #240	; 0xf0
   12f0c:	b	12e48 <boolean_unary_operator_is_read_properly@@Base+0xe8>
   12f10:	ldrd	r2, [r4, #56]	; 0x38
   12f14:	adds	r2, r2, #1
   12f18:	adc	r3, r3, #0
   12f1c:	strd	r2, [r4, #56]	; 0x38
   12f20:	add	sp, sp, #16
   12f24:	pop	{r4, r5, r6, pc}
   12f28:			; <UNDEFINED> instruction: 0x00029bb8
   12f2c:	andeq	sl, r2, r0, lsl #18
   12f30:	andeq	r7, r1, fp, lsl sp
   12f34:	andeq	r7, r1, r5, lsl #27
   12f38:	andeq	r7, r1, pc, asr ip
   12f3c:	ldrdeq	r7, [r1], -r8
   12f40:	andeq	r7, r1, sp, lsr #28
   12f44:	andeq	r7, r1, sp, ror lr
   12f48:	muleq	r1, r1, lr

00012f4c <if_statement_only@@Base>:
   12f4c:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12f50:	add	r1, sp, #4
   12f54:	ldr	r4, [pc, #576]	; 1319c <if_statement_only@@Base+0x250>
   12f58:	mov	r0, sp
   12f5c:	ldrd	r2, [r4, #-8]
   12f60:	adds	r2, r2, #1
   12f64:	adc	r3, r3, #0
   12f68:	strd	r2, [r4, #-8]
   12f6c:	bl	14c60 <init_grammar@@Base>
   12f70:	ldrd	r2, [r4]
   12f74:	mov	r0, #3
   12f78:	adds	r2, r2, #1
   12f7c:	adc	r3, r3, #0
   12f80:	strd	r2, [r4]
   12f84:	bl	11900 <malloc@plt>
   12f88:	mov	r3, #33	; 0x21
   12f8c:	strb	r3, [r0]
   12f90:	mov	r3, #61	; 0x3d
   12f94:	strb	r3, [r0, #1]
   12f98:	mov	r3, #0
   12f9c:	strb	r3, [r0, #2]
   12fa0:	mov	r6, r0
   12fa4:	mov	r0, #36	; 0x24
   12fa8:	bl	11900 <malloc@plt>
   12fac:	mov	r5, r0
   12fb0:	mov	r0, #4
   12fb4:	bl	11900 <malloc@plt>
   12fb8:	str	r0, [r5]
   12fbc:	bl	14180 <init_token_opar@@Base>
   12fc0:	ldrd	r2, [r4, #8]
   12fc4:	mov	r0, #8
   12fc8:	adds	r2, r2, #1
   12fcc:	adc	r3, r3, #0
   12fd0:	strd	r2, [r4, #8]
   12fd4:	bl	11900 <malloc@plt>
   12fd8:	mov	r1, #1
   12fdc:	str	r0, [r5, #4]
   12fe0:	bl	14130 <init_token_int_value@@Base>
   12fe4:	ldrd	r2, [r4, #16]
   12fe8:	mov	r0, #8
   12fec:	adds	r2, r2, #1
   12ff0:	adc	r3, r3, #0
   12ff4:	strd	r2, [r4, #16]
   12ff8:	bl	11900 <malloc@plt>
   12ffc:	mov	r1, #1
   13000:	str	r0, [r5, #8]
   13004:	bl	14130 <init_token_int_value@@Base>
   13008:	ldrd	r2, [r4, #24]
   1300c:	mov	r0, #8
   13010:	adds	r2, r2, #1
   13014:	adc	r3, r3, #0
   13018:	strd	r2, [r4, #24]
   1301c:	bl	11900 <malloc@plt>
   13020:	mov	r1, r6
   13024:	ldr	r6, [pc, #372]	; 131a0 <if_statement_only@@Base+0x254>
   13028:	str	r0, [r5, #12]
   1302c:	bl	142c4 <init_token_boolean_op@@Base>
   13030:	ldrd	r2, [r4, #32]
   13034:	mov	r0, #8
   13038:	adds	r2, r2, #1
   1303c:	adc	r3, r3, #0
   13040:	strd	r2, [r4, #32]
   13044:	bl	11900 <malloc@plt>
   13048:	mov	r1, #1
   1304c:	str	r0, [r5, #16]
   13050:	bl	14130 <init_token_int_value@@Base>
   13054:	ldrd	r2, [r4, #40]	; 0x28
   13058:	mov	r0, #4
   1305c:	adds	r2, r2, #1
   13060:	adc	r3, r3, #0
   13064:	strd	r2, [r4, #40]	; 0x28
   13068:	bl	11900 <malloc@plt>
   1306c:	str	r0, [r5, #20]
   13070:	bl	141a4 <init_token_cpar@@Base>
   13074:	ldrd	r2, [r4, #48]	; 0x30
   13078:	mov	r0, #4
   1307c:	adds	r2, r2, #1
   13080:	adc	r3, r3, #0
   13084:	strd	r2, [r4, #48]	; 0x30
   13088:	bl	11900 <malloc@plt>
   1308c:	str	r0, [r5, #24]
   13090:	bl	141c8 <init_token_obra@@Base>
   13094:	ldrd	r2, [r4, #56]	; 0x38
   13098:	mov	r0, #4
   1309c:	adds	r2, r2, #1
   130a0:	adc	r3, r3, #0
   130a4:	strd	r2, [r4, #56]	; 0x38
   130a8:	bl	11900 <malloc@plt>
   130ac:	str	r0, [r5, #28]
   130b0:	bl	141ec <init_token_cbra@@Base>
   130b4:	ldrd	r2, [r4, #64]	; 0x40
   130b8:	mov	r0, #4
   130bc:	adds	r2, r2, #1
   130c0:	adc	r3, r3, #0
   130c4:	strd	r2, [r4, #64]	; 0x40
   130c8:	bl	11900 <malloc@plt>
   130cc:	str	r0, [r5, #32]
   130d0:	bl	14258 <init_token_eof@@Base>
   130d4:	ldrd	r2, [r4, #72]	; 0x48
   130d8:	mov	r0, sp
   130dc:	str	r5, [r6, #228]	; 0xe4
   130e0:	adds	r2, r2, #1
   130e4:	adc	r3, r3, #0
   130e8:	strd	r2, [r4, #72]	; 0x48
   130ec:	mov	r3, #9
   130f0:	str	r3, [r6, #220]	; 0xdc
   130f4:	bl	153e0 <read_if_statement@@Base>
   130f8:	ldr	r3, [r6, #204]	; 0xcc
   130fc:	cmp	r3, #9
   13100:	beq	13128 <if_statement_only@@Base+0x1dc>
   13104:	ldrd	r2, [r4, #80]	; 0x50
   13108:	ldr	r1, [pc, #148]	; 131a4 <if_statement_only@@Base+0x258>
   1310c:	ldr	r0, [pc, #148]	; 131a8 <if_statement_only@@Base+0x25c>
   13110:	adds	r2, r2, #1
   13114:	adc	r3, r3, #0
   13118:	strd	r2, [r4, #80]	; 0x50
   1311c:	ldr	r3, [pc, #136]	; 131ac <if_statement_only@@Base+0x260>
   13120:	ldr	r2, [pc, #136]	; 131b0 <if_statement_only@@Base+0x264>
   13124:	bl	11a20 <__assert_fail@plt>
   13128:	cmp	r0, #0
   1312c:	bne	13154 <if_statement_only@@Base+0x208>
   13130:	ldrd	r2, [r4, #88]	; 0x58
   13134:	ldr	r1, [pc, #104]	; 131a4 <if_statement_only@@Base+0x258>
   13138:	ldr	r0, [pc, #116]	; 131b4 <if_statement_only@@Base+0x268>
   1313c:	adds	r2, r2, #1
   13140:	adc	r3, r3, #0
   13144:	strd	r2, [r4, #88]	; 0x58
   13148:	ldr	r3, [pc, #92]	; 131ac <if_statement_only@@Base+0x260>
   1314c:	mov	r2, #284	; 0x11c
   13150:	b	13124 <if_statement_only@@Base+0x1d8>
   13154:	ldr	r3, [r0]
   13158:	cmp	r3, #4
   1315c:	beq	13184 <if_statement_only@@Base+0x238>
   13160:	ldrd	r2, [r4, #104]	; 0x68
   13164:	ldr	r1, [pc, #56]	; 131a4 <if_statement_only@@Base+0x258>
   13168:	ldr	r0, [pc, #72]	; 131b8 <if_statement_only@@Base+0x26c>
   1316c:	adds	r2, r2, #1
   13170:	adc	r3, r3, #0
   13174:	strd	r2, [r4, #104]	; 0x68
   13178:	ldr	r3, [pc, #44]	; 131ac <if_statement_only@@Base+0x260>
   1317c:	ldr	r2, [pc, #56]	; 131bc <if_statement_only@@Base+0x270>
   13180:	b	13124 <if_statement_only@@Base+0x1d8>
   13184:	ldrd	r2, [r4, #96]	; 0x60
   13188:	adds	r2, r2, #1
   1318c:	adc	r3, r3, #0
   13190:	strd	r2, [r4, #96]	; 0x60
   13194:	add	sp, sp, #16
   13198:	pop	{r4, r5, r6, pc}
   1319c:	andeq	r9, r2, r8, lsl #24
   131a0:	andeq	sl, r2, r0, lsl #18
   131a4:	andeq	r7, r1, fp, lsl sp
   131a8:	andeq	r7, r1, r6, lsr #29
   131ac:	andeq	r7, r1, r7, lsl #25
   131b0:	andeq	r0, r0, fp, lsl r1
   131b4:	andeq	r7, r1, r0, asr #29
   131b8:	andeq	r7, r1, ip, asr #29
   131bc:	andeq	r0, r0, sp, lsl r1

000131c0 <if_else_statements@@Base>:
   131c0:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   131c4:	add	r1, sp, #4
   131c8:	ldr	r4, [pc, #640]	; 13450 <if_else_statements@@Base+0x290>
   131cc:	mov	r0, sp
   131d0:	ldrd	r2, [r4]
   131d4:	adds	r2, r2, #1
   131d8:	adc	r3, r3, #0
   131dc:	strd	r2, [r4]
   131e0:	bl	14c60 <init_grammar@@Base>
   131e4:	ldrd	r2, [r4, #8]
   131e8:	mov	r0, #3
   131ec:	adds	r2, r2, #1
   131f0:	adc	r3, r3, #0
   131f4:	strd	r2, [r4, #8]
   131f8:	bl	11900 <malloc@plt>
   131fc:	mov	r3, #33	; 0x21
   13200:	strb	r3, [r0]
   13204:	mov	r3, #61	; 0x3d
   13208:	strb	r3, [r0, #1]
   1320c:	mov	r3, #0
   13210:	strb	r3, [r0, #2]
   13214:	mov	r6, r0
   13218:	mov	r0, #44	; 0x2c
   1321c:	bl	11900 <malloc@plt>
   13220:	mov	r5, r0
   13224:	mov	r0, #4
   13228:	bl	11900 <malloc@plt>
   1322c:	str	r0, [r5]
   13230:	bl	14180 <init_token_opar@@Base>
   13234:	ldrd	r2, [r4, #16]
   13238:	mov	r0, #8
   1323c:	adds	r2, r2, #1
   13240:	adc	r3, r3, #0
   13244:	strd	r2, [r4, #16]
   13248:	bl	11900 <malloc@plt>
   1324c:	mov	r1, #1
   13250:	str	r0, [r5, #4]
   13254:	bl	14130 <init_token_int_value@@Base>
   13258:	ldrd	r2, [r4, #24]
   1325c:	mov	r0, #8
   13260:	adds	r2, r2, #1
   13264:	adc	r3, r3, #0
   13268:	strd	r2, [r4, #24]
   1326c:	bl	11900 <malloc@plt>
   13270:	mov	r1, #1
   13274:	str	r0, [r5, #8]
   13278:	bl	14130 <init_token_int_value@@Base>
   1327c:	ldrd	r2, [r4, #32]
   13280:	mov	r0, #8
   13284:	adds	r2, r2, #1
   13288:	adc	r3, r3, #0
   1328c:	strd	r2, [r4, #32]
   13290:	bl	11900 <malloc@plt>
   13294:	mov	r1, r6
   13298:	ldr	r6, [pc, #436]	; 13454 <if_else_statements@@Base+0x294>
   1329c:	str	r0, [r5, #12]
   132a0:	bl	142c4 <init_token_boolean_op@@Base>
   132a4:	ldrd	r2, [r4, #40]	; 0x28
   132a8:	mov	r0, #8
   132ac:	adds	r2, r2, #1
   132b0:	adc	r3, r3, #0
   132b4:	strd	r2, [r4, #40]	; 0x28
   132b8:	bl	11900 <malloc@plt>
   132bc:	mov	r1, #1
   132c0:	str	r0, [r5, #16]
   132c4:	bl	14130 <init_token_int_value@@Base>
   132c8:	ldrd	r2, [r4, #48]	; 0x30
   132cc:	mov	r0, #4
   132d0:	adds	r2, r2, #1
   132d4:	adc	r3, r3, #0
   132d8:	strd	r2, [r4, #48]	; 0x30
   132dc:	bl	11900 <malloc@plt>
   132e0:	str	r0, [r5, #20]
   132e4:	bl	141a4 <init_token_cpar@@Base>
   132e8:	ldrd	r2, [r4, #56]	; 0x38
   132ec:	mov	r0, #4
   132f0:	adds	r2, r2, #1
   132f4:	adc	r3, r3, #0
   132f8:	strd	r2, [r4, #56]	; 0x38
   132fc:	bl	11900 <malloc@plt>
   13300:	str	r0, [r5, #24]
   13304:	bl	141c8 <init_token_obra@@Base>
   13308:	ldrd	r2, [r4, #64]	; 0x40
   1330c:	mov	r0, #4
   13310:	adds	r2, r2, #1
   13314:	adc	r3, r3, #0
   13318:	strd	r2, [r4, #64]	; 0x40
   1331c:	bl	11900 <malloc@plt>
   13320:	str	r0, [r5, #28]
   13324:	bl	141ec <init_token_cbra@@Base>
   13328:	ldrd	r2, [r4, #72]	; 0x48
   1332c:	mov	r0, #4
   13330:	adds	r2, r2, #1
   13334:	adc	r3, r3, #0
   13338:	strd	r2, [r4, #72]	; 0x48
   1333c:	bl	11900 <malloc@plt>
   13340:	str	r0, [r5, #32]
   13344:	bl	142a0 <init_token_else@@Base>
   13348:	ldrd	r2, [r4, #80]	; 0x50
   1334c:	mov	r0, #4
   13350:	adds	r2, r2, #1
   13354:	adc	r3, r3, #0
   13358:	strd	r2, [r4, #80]	; 0x50
   1335c:	bl	11900 <malloc@plt>
   13360:	str	r0, [r5, #36]	; 0x24
   13364:	bl	141c8 <init_token_obra@@Base>
   13368:	ldrd	r2, [r4, #88]	; 0x58
   1336c:	mov	r0, #4
   13370:	adds	r2, r2, #1
   13374:	adc	r3, r3, #0
   13378:	strd	r2, [r4, #88]	; 0x58
   1337c:	bl	11900 <malloc@plt>
   13380:	str	r0, [r5, #40]	; 0x28
   13384:	bl	141ec <init_token_cbra@@Base>
   13388:	ldrd	r2, [r4, #96]	; 0x60
   1338c:	mov	r0, sp
   13390:	str	r5, [r6, #228]	; 0xe4
   13394:	adds	r2, r2, #1
   13398:	adc	r3, r3, #0
   1339c:	strd	r2, [r4, #96]	; 0x60
   133a0:	mov	r3, #11
   133a4:	str	r3, [r6, #220]	; 0xdc
   133a8:	bl	153e0 <read_if_statement@@Base>
   133ac:	ldr	r3, [r6, #204]	; 0xcc
   133b0:	cmp	r3, #11
   133b4:	beq	133dc <if_else_statements@@Base+0x21c>
   133b8:	ldrd	r2, [r4, #104]	; 0x68
   133bc:	ldr	r1, [pc, #148]	; 13458 <if_else_statements@@Base+0x298>
   133c0:	ldr	r0, [pc, #148]	; 1345c <if_else_statements@@Base+0x29c>
   133c4:	adds	r2, r2, #1
   133c8:	adc	r3, r3, #0
   133cc:	strd	r2, [r4, #104]	; 0x68
   133d0:	ldr	r3, [pc, #136]	; 13460 <if_else_statements@@Base+0x2a0>
   133d4:	mov	r2, #332	; 0x14c
   133d8:	bl	11a20 <__assert_fail@plt>
   133dc:	cmp	r0, #0
   133e0:	bne	13408 <if_else_statements@@Base+0x248>
   133e4:	ldrd	r2, [r4, #112]	; 0x70
   133e8:	ldr	r1, [pc, #104]	; 13458 <if_else_statements@@Base+0x298>
   133ec:	ldr	r0, [pc, #112]	; 13464 <if_else_statements@@Base+0x2a4>
   133f0:	adds	r2, r2, #1
   133f4:	adc	r3, r3, #0
   133f8:	strd	r2, [r4, #112]	; 0x70
   133fc:	ldr	r3, [pc, #92]	; 13460 <if_else_statements@@Base+0x2a0>
   13400:	ldr	r2, [pc, #96]	; 13468 <if_else_statements@@Base+0x2a8>
   13404:	b	133d8 <if_else_statements@@Base+0x218>
   13408:	ldr	r3, [r0]
   1340c:	cmp	r3, #4
   13410:	beq	13438 <if_else_statements@@Base+0x278>
   13414:	ldrd	r2, [r4, #128]	; 0x80
   13418:	ldr	r1, [pc, #56]	; 13458 <if_else_statements@@Base+0x298>
   1341c:	ldr	r0, [pc, #72]	; 1346c <if_else_statements@@Base+0x2ac>
   13420:	adds	r2, r2, #1
   13424:	adc	r3, r3, #0
   13428:	strd	r2, [r4, #128]	; 0x80
   1342c:	ldr	r3, [pc, #44]	; 13460 <if_else_statements@@Base+0x2a0>
   13430:	ldr	r2, [pc, #56]	; 13470 <if_else_statements@@Base+0x2b0>
   13434:	b	133d8 <if_else_statements@@Base+0x218>
   13438:	ldrd	r2, [r4, #120]	; 0x78
   1343c:	adds	r2, r2, #1
   13440:	adc	r3, r3, #0
   13444:	strd	r2, [r4, #120]	; 0x78
   13448:	add	sp, sp, #16
   1344c:	pop	{r4, r5, r6, pc}
   13450:	andeq	r9, r2, r8, ror ip
   13454:	andeq	sl, r2, r0, lsl #18
   13458:	andeq	r7, r1, fp, lsl sp
   1345c:	ldrdeq	r7, [r1], -lr
   13460:	muleq	r1, r9, ip
   13464:	andeq	r7, r1, r0, asr #29
   13468:	andeq	r0, r0, sp, asr #2
   1346c:	andeq	r7, r1, ip, asr #29
   13470:	andeq	r0, r0, lr, asr #2

00013474 <body_with_two_returns@@Base>:
   13474:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   13478:	add	r1, sp, #4
   1347c:	ldr	r4, [pc, #600]	; 136dc <body_with_two_returns@@Base+0x268>
   13480:	mov	r0, sp
   13484:	ldr	r6, [pc, #596]	; 136e0 <body_with_two_returns@@Base+0x26c>
   13488:	ldrd	r2, [r4, #-8]
   1348c:	adds	r2, r2, #1
   13490:	adc	r3, r3, #0
   13494:	strd	r2, [r4, #-8]
   13498:	bl	14c60 <init_grammar@@Base>
   1349c:	ldrd	r2, [r4]
   134a0:	mov	r0, #32
   134a4:	adds	r2, r2, #1
   134a8:	adc	r3, r3, #0
   134ac:	strd	r2, [r4]
   134b0:	bl	11900 <malloc@plt>
   134b4:	mov	r5, r0
   134b8:	mov	r0, #4
   134bc:	bl	11900 <malloc@plt>
   134c0:	str	r0, [r5]
   134c4:	bl	141c8 <init_token_obra@@Base>
   134c8:	ldrd	r2, [r4, #8]
   134cc:	mov	r0, #4
   134d0:	adds	r2, r2, #1
   134d4:	adc	r3, r3, #0
   134d8:	strd	r2, [r4, #8]
   134dc:	bl	11900 <malloc@plt>
   134e0:	str	r0, [r5, #4]
   134e4:	bl	14210 <init_token_return@@Base>
   134e8:	ldrd	r2, [r4, #16]
   134ec:	mov	r0, #8
   134f0:	adds	r2, r2, #1
   134f4:	adc	r3, r3, #0
   134f8:	strd	r2, [r4, #16]
   134fc:	bl	11900 <malloc@plt>
   13500:	mov	r1, #1
   13504:	str	r0, [r5, #8]
   13508:	bl	14130 <init_token_int_value@@Base>
   1350c:	ldrd	r2, [r4, #24]
   13510:	mov	r0, #4
   13514:	adds	r2, r2, #1
   13518:	adc	r3, r3, #0
   1351c:	strd	r2, [r4, #24]
   13520:	bl	11900 <malloc@plt>
   13524:	str	r0, [r5, #12]
   13528:	bl	14234 <init_token_semicolon@@Base>
   1352c:	ldrd	r2, [r4, #32]
   13530:	mov	r0, #4
   13534:	adds	r2, r2, #1
   13538:	adc	r3, r3, #0
   1353c:	strd	r2, [r4, #32]
   13540:	bl	11900 <malloc@plt>
   13544:	str	r0, [r5, #16]
   13548:	bl	14210 <init_token_return@@Base>
   1354c:	ldrd	r2, [r4, #40]	; 0x28
   13550:	mov	r0, #8
   13554:	adds	r2, r2, #1
   13558:	adc	r3, r3, #0
   1355c:	strd	r2, [r4, #40]	; 0x28
   13560:	bl	11900 <malloc@plt>
   13564:	mov	r1, #1
   13568:	str	r0, [r5, #20]
   1356c:	bl	14130 <init_token_int_value@@Base>
   13570:	ldrd	r2, [r4, #48]	; 0x30
   13574:	mov	r0, #4
   13578:	adds	r2, r2, #1
   1357c:	adc	r3, r3, #0
   13580:	strd	r2, [r4, #48]	; 0x30
   13584:	bl	11900 <malloc@plt>
   13588:	str	r0, [r5, #24]
   1358c:	bl	14234 <init_token_semicolon@@Base>
   13590:	ldrd	r2, [r4, #56]	; 0x38
   13594:	mov	r0, #4
   13598:	adds	r2, r2, #1
   1359c:	adc	r3, r3, #0
   135a0:	strd	r2, [r4, #56]	; 0x38
   135a4:	bl	11900 <malloc@plt>
   135a8:	str	r0, [r5, #28]
   135ac:	bl	141ec <init_token_cbra@@Base>
   135b0:	ldrd	r2, [r4, #64]	; 0x40
   135b4:	mov	r0, sp
   135b8:	str	r5, [r6, #228]	; 0xe4
   135bc:	adds	r2, r2, #1
   135c0:	adc	r3, r3, #0
   135c4:	strd	r2, [r4, #64]	; 0x40
   135c8:	mov	r3, #8
   135cc:	str	r3, [r6, #220]	; 0xdc
   135d0:	bl	15540 <read_body@@Base>
   135d4:	ldr	r3, [r6, #204]	; 0xcc
   135d8:	cmp	r3, #8
   135dc:	beq	13604 <body_with_two_returns@@Base+0x190>
   135e0:	ldrd	r2, [r4, #72]	; 0x48
   135e4:	ldr	r1, [pc, #248]	; 136e4 <body_with_two_returns@@Base+0x270>
   135e8:	ldr	r0, [pc, #248]	; 136e8 <body_with_two_returns@@Base+0x274>
   135ec:	adds	r2, r2, #1
   135f0:	adc	r3, r3, #0
   135f4:	strd	r2, [r4, #72]	; 0x48
   135f8:	ldr	r3, [pc, #236]	; 136ec <body_with_two_returns@@Base+0x278>
   135fc:	ldr	r2, [pc, #236]	; 136f0 <body_with_two_returns@@Base+0x27c>
   13600:	bl	11a20 <__assert_fail@plt>
   13604:	cmp	r0, #0
   13608:	bne	13630 <body_with_two_returns@@Base+0x1bc>
   1360c:	ldrd	r2, [r4, #80]	; 0x50
   13610:	ldr	r1, [pc, #204]	; 136e4 <body_with_two_returns@@Base+0x270>
   13614:	ldr	r0, [pc, #216]	; 136f4 <body_with_two_returns@@Base+0x280>
   13618:	adds	r2, r2, #1
   1361c:	adc	r3, r3, #0
   13620:	strd	r2, [r4, #80]	; 0x50
   13624:	ldr	r3, [pc, #192]	; 136ec <body_with_two_returns@@Base+0x278>
   13628:	mov	r2, #372	; 0x174
   1362c:	b	13600 <body_with_two_returns@@Base+0x18c>
   13630:	ldr	r3, [r0]
   13634:	cmp	r3, #3
   13638:	beq	13660 <body_with_two_returns@@Base+0x1ec>
   1363c:	ldrd	r2, [r4, #88]	; 0x58
   13640:	ldr	r1, [pc, #156]	; 136e4 <body_with_two_returns@@Base+0x270>
   13644:	ldr	r0, [pc, #172]	; 136f8 <body_with_two_returns@@Base+0x284>
   13648:	adds	r2, r2, #1
   1364c:	adc	r3, r3, #0
   13650:	strd	r2, [r4, #88]	; 0x58
   13654:	ldr	r3, [pc, #144]	; 136ec <body_with_two_returns@@Base+0x278>
   13658:	ldr	r2, [pc, #156]	; 136fc <body_with_two_returns@@Base+0x288>
   1365c:	b	13600 <body_with_two_returns@@Base+0x18c>
   13660:	ldr	r3, [r0, #4]
   13664:	ldr	r2, [r3]
   13668:	cmp	r2, #3
   1366c:	beq	13694 <body_with_two_returns@@Base+0x220>
   13670:	ldrd	r2, [r4, #96]	; 0x60
   13674:	ldr	r1, [pc, #104]	; 136e4 <body_with_two_returns@@Base+0x270>
   13678:	ldr	r0, [pc, #128]	; 13700 <body_with_two_returns@@Base+0x28c>
   1367c:	adds	r2, r2, #1
   13680:	adc	r3, r3, #0
   13684:	strd	r2, [r4, #96]	; 0x60
   13688:	ldr	r3, [pc, #92]	; 136ec <body_with_two_returns@@Base+0x278>
   1368c:	ldr	r2, [pc, #112]	; 13704 <body_with_two_returns@@Base+0x290>
   13690:	b	13600 <body_with_two_returns@@Base+0x18c>
   13694:	ldr	r3, [r3, #4]
   13698:	cmp	r3, #0
   1369c:	beq	136c4 <body_with_two_returns@@Base+0x250>
   136a0:	ldrd	r2, [r4, #112]	; 0x70
   136a4:	ldr	r1, [pc, #56]	; 136e4 <body_with_two_returns@@Base+0x270>
   136a8:	ldr	r0, [pc, #88]	; 13708 <body_with_two_returns@@Base+0x294>
   136ac:	adds	r2, r2, #1
   136b0:	adc	r3, r3, #0
   136b4:	strd	r2, [r4, #112]	; 0x70
   136b8:	ldr	r3, [pc, #44]	; 136ec <body_with_two_returns@@Base+0x278>
   136bc:	ldr	r2, [pc, #72]	; 1370c <body_with_two_returns@@Base+0x298>
   136c0:	b	13600 <body_with_two_returns@@Base+0x18c>
   136c4:	ldrd	r2, [r4, #104]	; 0x68
   136c8:	adds	r2, r2, #1
   136cc:	adc	r3, r3, #0
   136d0:	strd	r2, [r4, #104]	; 0x68
   136d4:	add	sp, sp, #16
   136d8:	pop	{r4, r5, r6, pc}
   136dc:	andeq	r9, r2, r8, lsl #26
   136e0:	andeq	sl, r2, r0, lsl #18
   136e4:	andeq	r7, r1, fp, lsl sp
   136e8:	strdeq	r7, [r1], -r9
   136ec:	andeq	r7, r1, ip, lsr #25
   136f0:	andeq	r0, r0, r3, ror r1
   136f4:	andeq	r7, r1, r0, asr #29
   136f8:	andeq	r7, r1, r3, lsl pc
   136fc:	andeq	r0, r0, r5, ror r1
   13700:	andeq	r7, r1, r9, lsr #30
   13704:	andeq	r0, r0, r6, ror r1
   13708:	andeq	r7, r1, r5, asr #30
   1370c:	andeq	r0, r0, r7, ror r1

00013710 <body_with_one_return@@Base>:
   13710:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   13714:	add	r1, sp, #4
   13718:	ldr	r4, [pc, #448]	; 138e0 <body_with_one_return@@Base+0x1d0>
   1371c:	mov	r0, sp
   13720:	ldr	r6, [pc, #444]	; 138e4 <body_with_one_return@@Base+0x1d4>
   13724:	ldrd	r2, [r4, #-8]
   13728:	adds	r2, r2, #1
   1372c:	adc	r3, r3, #0
   13730:	strd	r2, [r4, #-8]
   13734:	bl	14c60 <init_grammar@@Base>
   13738:	ldrd	r2, [r4]
   1373c:	mov	r0, #20
   13740:	adds	r2, r2, #1
   13744:	adc	r3, r3, #0
   13748:	strd	r2, [r4]
   1374c:	bl	11900 <malloc@plt>
   13750:	mov	r5, r0
   13754:	mov	r0, #4
   13758:	bl	11900 <malloc@plt>
   1375c:	str	r0, [r5]
   13760:	bl	141c8 <init_token_obra@@Base>
   13764:	ldrd	r2, [r4, #8]
   13768:	mov	r0, #4
   1376c:	adds	r2, r2, #1
   13770:	adc	r3, r3, #0
   13774:	strd	r2, [r4, #8]
   13778:	bl	11900 <malloc@plt>
   1377c:	str	r0, [r5, #4]
   13780:	bl	14210 <init_token_return@@Base>
   13784:	ldrd	r2, [r4, #16]
   13788:	mov	r0, #8
   1378c:	adds	r2, r2, #1
   13790:	adc	r3, r3, #0
   13794:	strd	r2, [r4, #16]
   13798:	bl	11900 <malloc@plt>
   1379c:	mov	r1, #1
   137a0:	str	r0, [r5, #8]
   137a4:	bl	14130 <init_token_int_value@@Base>
   137a8:	ldrd	r2, [r4, #24]
   137ac:	mov	r0, #4
   137b0:	adds	r2, r2, #1
   137b4:	adc	r3, r3, #0
   137b8:	strd	r2, [r4, #24]
   137bc:	bl	11900 <malloc@plt>
   137c0:	str	r0, [r5, #12]
   137c4:	bl	14234 <init_token_semicolon@@Base>
   137c8:	ldrd	r2, [r4, #32]
   137cc:	mov	r0, #4
   137d0:	adds	r2, r2, #1
   137d4:	adc	r3, r3, #0
   137d8:	strd	r2, [r4, #32]
   137dc:	bl	11900 <malloc@plt>
   137e0:	str	r0, [r5, #16]
   137e4:	bl	141ec <init_token_cbra@@Base>
   137e8:	ldrd	r2, [r4, #40]	; 0x28
   137ec:	mov	r0, sp
   137f0:	str	r5, [r6, #228]	; 0xe4
   137f4:	adds	r2, r2, #1
   137f8:	adc	r3, r3, #0
   137fc:	strd	r2, [r4, #40]	; 0x28
   13800:	mov	r3, #5
   13804:	str	r3, [r6, #220]	; 0xdc
   13808:	bl	15540 <read_body@@Base>
   1380c:	ldr	r3, [r6, #204]	; 0xcc
   13810:	cmp	r3, #5
   13814:	beq	1383c <body_with_one_return@@Base+0x12c>
   13818:	ldrd	r2, [r4, #48]	; 0x30
   1381c:	ldr	r1, [pc, #196]	; 138e8 <body_with_one_return@@Base+0x1d8>
   13820:	ldr	r0, [pc, #196]	; 138ec <body_with_one_return@@Base+0x1dc>
   13824:	adds	r2, r2, #1
   13828:	adc	r3, r3, #0
   1382c:	strd	r2, [r4, #48]	; 0x30
   13830:	ldr	r3, [pc, #184]	; 138f0 <body_with_one_return@@Base+0x1e0>
   13834:	ldr	r2, [pc, #184]	; 138f4 <body_with_one_return@@Base+0x1e4>
   13838:	bl	11a20 <__assert_fail@plt>
   1383c:	cmp	r0, #0
   13840:	bne	13868 <body_with_one_return@@Base+0x158>
   13844:	ldrd	r2, [r4, #56]	; 0x38
   13848:	ldr	r1, [pc, #152]	; 138e8 <body_with_one_return@@Base+0x1d8>
   1384c:	ldr	r0, [pc, #164]	; 138f8 <body_with_one_return@@Base+0x1e8>
   13850:	adds	r2, r2, #1
   13854:	adc	r3, r3, #0
   13858:	strd	r2, [r4, #56]	; 0x38
   1385c:	ldr	r3, [pc, #140]	; 138f0 <body_with_one_return@@Base+0x1e0>
   13860:	ldr	r2, [pc, #148]	; 138fc <body_with_one_return@@Base+0x1ec>
   13864:	b	13838 <body_with_one_return@@Base+0x128>
   13868:	ldr	r3, [r0]
   1386c:	cmp	r3, #3
   13870:	beq	13898 <body_with_one_return@@Base+0x188>
   13874:	ldrd	r2, [r4, #64]	; 0x40
   13878:	ldr	r1, [pc, #104]	; 138e8 <body_with_one_return@@Base+0x1d8>
   1387c:	ldr	r0, [pc, #124]	; 13900 <body_with_one_return@@Base+0x1f0>
   13880:	adds	r2, r2, #1
   13884:	adc	r3, r3, #0
   13888:	strd	r2, [r4, #64]	; 0x40
   1388c:	ldr	r3, [pc, #92]	; 138f0 <body_with_one_return@@Base+0x1e0>
   13890:	mov	r2, #408	; 0x198
   13894:	b	13838 <body_with_one_return@@Base+0x128>
   13898:	ldr	r3, [r0, #4]
   1389c:	cmp	r3, #0
   138a0:	beq	138c8 <body_with_one_return@@Base+0x1b8>
   138a4:	ldrd	r2, [r4, #80]	; 0x50
   138a8:	ldr	r1, [pc, #56]	; 138e8 <body_with_one_return@@Base+0x1d8>
   138ac:	ldr	r0, [pc, #80]	; 13904 <body_with_one_return@@Base+0x1f4>
   138b0:	adds	r2, r2, #1
   138b4:	adc	r3, r3, #0
   138b8:	strd	r2, [r4, #80]	; 0x50
   138bc:	ldr	r3, [pc, #44]	; 138f0 <body_with_one_return@@Base+0x1e0>
   138c0:	ldr	r2, [pc, #64]	; 13908 <body_with_one_return@@Base+0x1f8>
   138c4:	b	13838 <body_with_one_return@@Base+0x128>
   138c8:	ldrd	r2, [r4, #72]	; 0x48
   138cc:	adds	r2, r2, #1
   138d0:	adc	r3, r3, #0
   138d4:	strd	r2, [r4, #72]	; 0x48
   138d8:	add	sp, sp, #16
   138dc:	pop	{r4, r5, r6, pc}
   138e0:	andeq	r9, r2, r8, lsl #27
   138e4:	andeq	sl, r2, r0, lsl #18
   138e8:	andeq	r7, r1, fp, lsl sp
   138ec:	muleq	r1, pc, sp	; <UNPREDICTABLE>
   138f0:	andeq	r7, r1, r2, asr #25
   138f4:	muleq	r0, r6, r1
   138f8:	andeq	r7, r1, r0, asr #29
   138fc:	muleq	r0, r7, r1
   13900:	andeq	r7, r1, r3, lsl pc
   13904:	andeq	r7, r1, sp, asr pc
   13908:	muleq	r0, r9, r1

0001390c <if_statement_inside_if_statement@@Base>:
   1390c:	push	{r4, r5, r6, r7, lr}
   13910:	sub	sp, sp, #20
   13914:	ldr	r4, [pc, #940]	; 13cc8 <if_statement_inside_if_statement@@Base+0x3bc>
   13918:	add	r1, sp, #4
   1391c:	mov	r0, sp
   13920:	ldrd	r2, [r4, #-8]
   13924:	adds	r2, r2, #1
   13928:	adc	r3, r3, #0
   1392c:	strd	r2, [r4, #-8]
   13930:	bl	14c60 <init_grammar@@Base>
   13934:	ldrd	r2, [r4]
   13938:	mov	r0, #3
   1393c:	adds	r2, r2, #1
   13940:	adc	r3, r3, #0
   13944:	strd	r2, [r4]
   13948:	bl	11900 <malloc@plt>
   1394c:	mov	r7, r0
   13950:	mov	r0, #3
   13954:	bl	11900 <malloc@plt>
   13958:	mov	r1, #33	; 0x21
   1395c:	mov	r2, #61	; 0x3d
   13960:	mov	r3, #0
   13964:	strb	r1, [r7]
   13968:	strb	r2, [r7, #1]
   1396c:	strb	r3, [r7, #2]
   13970:	strb	r1, [r0]
   13974:	strb	r2, [r0, #1]
   13978:	strb	r3, [r0, #2]
   1397c:	mov	r6, r0
   13980:	mov	r0, #76	; 0x4c
   13984:	bl	11900 <malloc@plt>
   13988:	mov	r5, r0
   1398c:	mov	r0, #4
   13990:	bl	11900 <malloc@plt>
   13994:	str	r0, [r5]
   13998:	bl	14180 <init_token_opar@@Base>
   1399c:	ldrd	r2, [r4, #8]
   139a0:	mov	r0, #8
   139a4:	adds	r2, r2, #1
   139a8:	adc	r3, r3, #0
   139ac:	strd	r2, [r4, #8]
   139b0:	bl	11900 <malloc@plt>
   139b4:	mov	r1, #1
   139b8:	str	r0, [r5, #4]
   139bc:	bl	14130 <init_token_int_value@@Base>
   139c0:	ldrd	r2, [r4, #16]
   139c4:	mov	r0, #8
   139c8:	adds	r2, r2, #1
   139cc:	adc	r3, r3, #0
   139d0:	strd	r2, [r4, #16]
   139d4:	bl	11900 <malloc@plt>
   139d8:	mov	r1, #1
   139dc:	str	r0, [r5, #8]
   139e0:	bl	14130 <init_token_int_value@@Base>
   139e4:	ldrd	r2, [r4, #24]
   139e8:	mov	r0, #8
   139ec:	adds	r2, r2, #1
   139f0:	adc	r3, r3, #0
   139f4:	strd	r2, [r4, #24]
   139f8:	bl	11900 <malloc@plt>
   139fc:	mov	r1, r7
   13a00:	str	r0, [r5, #12]
   13a04:	bl	142c4 <init_token_boolean_op@@Base>
   13a08:	ldrd	r2, [r4, #32]
   13a0c:	mov	r0, #8
   13a10:	adds	r2, r2, #1
   13a14:	adc	r3, r3, #0
   13a18:	strd	r2, [r4, #32]
   13a1c:	bl	11900 <malloc@plt>
   13a20:	mov	r1, #1
   13a24:	str	r0, [r5, #16]
   13a28:	bl	14130 <init_token_int_value@@Base>
   13a2c:	ldrd	r2, [r4, #40]	; 0x28
   13a30:	mov	r0, #4
   13a34:	adds	r2, r2, #1
   13a38:	adc	r3, r3, #0
   13a3c:	strd	r2, [r4, #40]	; 0x28
   13a40:	bl	11900 <malloc@plt>
   13a44:	str	r0, [r5, #20]
   13a48:	bl	141a4 <init_token_cpar@@Base>
   13a4c:	ldrd	r2, [r4, #48]	; 0x30
   13a50:	mov	r0, #4
   13a54:	adds	r2, r2, #1
   13a58:	adc	r3, r3, #0
   13a5c:	strd	r2, [r4, #48]	; 0x30
   13a60:	bl	11900 <malloc@plt>
   13a64:	str	r0, [r5, #24]
   13a68:	bl	141c8 <init_token_obra@@Base>
   13a6c:	ldrd	r2, [r4, #56]	; 0x38
   13a70:	mov	r0, #4
   13a74:	adds	r2, r2, #1
   13a78:	adc	r3, r3, #0
   13a7c:	strd	r2, [r4, #56]	; 0x38
   13a80:	bl	11900 <malloc@plt>
   13a84:	str	r0, [r5, #28]
   13a88:	bl	1427c <init_token_if@@Base>
   13a8c:	ldrd	r2, [r4, #64]	; 0x40
   13a90:	mov	r0, #4
   13a94:	adds	r2, r2, #1
   13a98:	adc	r3, r3, #0
   13a9c:	strd	r2, [r4, #64]	; 0x40
   13aa0:	bl	11900 <malloc@plt>
   13aa4:	str	r0, [r5, #32]
   13aa8:	bl	14180 <init_token_opar@@Base>
   13aac:	ldrd	r2, [r4, #72]	; 0x48
   13ab0:	mov	r0, #8
   13ab4:	adds	r2, r2, #1
   13ab8:	adc	r3, r3, #0
   13abc:	strd	r2, [r4, #72]	; 0x48
   13ac0:	bl	11900 <malloc@plt>
   13ac4:	mov	r1, #1
   13ac8:	str	r0, [r5, #36]	; 0x24
   13acc:	bl	14130 <init_token_int_value@@Base>
   13ad0:	ldrd	r2, [r4, #80]	; 0x50
   13ad4:	mov	r0, #8
   13ad8:	adds	r2, r2, #1
   13adc:	adc	r3, r3, #0
   13ae0:	strd	r2, [r4, #80]	; 0x50
   13ae4:	bl	11900 <malloc@plt>
   13ae8:	mov	r1, #1
   13aec:	str	r0, [r5, #40]	; 0x28
   13af0:	bl	14130 <init_token_int_value@@Base>
   13af4:	ldrd	r2, [r4, #88]	; 0x58
   13af8:	mov	r0, #8
   13afc:	adds	r2, r2, #1
   13b00:	adc	r3, r3, #0
   13b04:	strd	r2, [r4, #88]	; 0x58
   13b08:	bl	11900 <malloc@plt>
   13b0c:	mov	r1, r6
   13b10:	ldr	r6, [pc, #436]	; 13ccc <if_statement_inside_if_statement@@Base+0x3c0>
   13b14:	str	r0, [r5, #44]	; 0x2c
   13b18:	bl	142c4 <init_token_boolean_op@@Base>
   13b1c:	ldrd	r2, [r4, #96]	; 0x60
   13b20:	mov	r0, #8
   13b24:	adds	r2, r2, #1
   13b28:	adc	r3, r3, #0
   13b2c:	strd	r2, [r4, #96]	; 0x60
   13b30:	bl	11900 <malloc@plt>
   13b34:	mov	r1, #1
   13b38:	str	r0, [r5, #48]	; 0x30
   13b3c:	bl	14130 <init_token_int_value@@Base>
   13b40:	ldrd	r2, [r4, #104]	; 0x68
   13b44:	mov	r0, #4
   13b48:	adds	r2, r2, #1
   13b4c:	adc	r3, r3, #0
   13b50:	strd	r2, [r4, #104]	; 0x68
   13b54:	bl	11900 <malloc@plt>
   13b58:	str	r0, [r5, #52]	; 0x34
   13b5c:	bl	141a4 <init_token_cpar@@Base>
   13b60:	ldrd	r2, [r4, #112]	; 0x70
   13b64:	mov	r0, #4
   13b68:	adds	r2, r2, #1
   13b6c:	adc	r3, r3, #0
   13b70:	strd	r2, [r4, #112]	; 0x70
   13b74:	bl	11900 <malloc@plt>
   13b78:	str	r0, [r5, #56]	; 0x38
   13b7c:	bl	141c8 <init_token_obra@@Base>
   13b80:	ldrd	r2, [r4, #120]	; 0x78
   13b84:	mov	r0, #4
   13b88:	adds	r2, r2, #1
   13b8c:	adc	r3, r3, #0
   13b90:	strd	r2, [r4, #120]	; 0x78
   13b94:	bl	11900 <malloc@plt>
   13b98:	str	r0, [r5, #60]	; 0x3c
   13b9c:	bl	141ec <init_token_cbra@@Base>
   13ba0:	ldrd	r2, [r4, #128]	; 0x80
   13ba4:	mov	r0, #4
   13ba8:	adds	r2, r2, #1
   13bac:	adc	r3, r3, #0
   13bb0:	strd	r2, [r4, #128]	; 0x80
   13bb4:	bl	11900 <malloc@plt>
   13bb8:	str	r0, [r5, #64]	; 0x40
   13bbc:	bl	141ec <init_token_cbra@@Base>
   13bc0:	ldrd	r2, [r4, #136]	; 0x88
   13bc4:	mov	r0, #4
   13bc8:	adds	r2, r2, #1
   13bcc:	adc	r3, r3, #0
   13bd0:	strd	r2, [r4, #136]	; 0x88
   13bd4:	bl	11900 <malloc@plt>
   13bd8:	str	r0, [r5, #68]	; 0x44
   13bdc:	bl	141ec <init_token_cbra@@Base>
   13be0:	ldrd	r2, [r4, #144]	; 0x90
   13be4:	mov	r0, #4
   13be8:	adds	r2, r2, #1
   13bec:	adc	r3, r3, #0
   13bf0:	strd	r2, [r4, #144]	; 0x90
   13bf4:	bl	11900 <malloc@plt>
   13bf8:	str	r0, [r5, #72]	; 0x48
   13bfc:	bl	14258 <init_token_eof@@Base>
   13c00:	ldrd	r2, [r4, #152]	; 0x98
   13c04:	mov	r0, sp
   13c08:	str	r5, [r6, #228]	; 0xe4
   13c0c:	adds	r2, r2, #1
   13c10:	adc	r3, r3, #0
   13c14:	strd	r2, [r4, #152]	; 0x98
   13c18:	mov	r3, #19
   13c1c:	str	r3, [r6, #220]	; 0xdc
   13c20:	bl	153e0 <read_if_statement@@Base>
   13c24:	ldr	r3, [r6, #204]	; 0xcc
   13c28:	cmp	r3, #19
   13c2c:	beq	13c54 <if_statement_inside_if_statement@@Base+0x348>
   13c30:	ldrd	r2, [r4, #160]	; 0xa0
   13c34:	ldr	r1, [pc, #148]	; 13cd0 <if_statement_inside_if_statement@@Base+0x3c4>
   13c38:	ldr	r0, [pc, #148]	; 13cd4 <if_statement_inside_if_statement@@Base+0x3c8>
   13c3c:	adds	r2, r2, #1
   13c40:	adc	r3, r3, #0
   13c44:	strd	r2, [r4, #160]	; 0xa0
   13c48:	ldr	r3, [pc, #136]	; 13cd8 <if_statement_inside_if_statement@@Base+0x3cc>
   13c4c:	mov	r2, #480	; 0x1e0
   13c50:	bl	11a20 <__assert_fail@plt>
   13c54:	cmp	r0, #0
   13c58:	bne	13c80 <if_statement_inside_if_statement@@Base+0x374>
   13c5c:	ldrd	r2, [r4, #168]	; 0xa8
   13c60:	ldr	r1, [pc, #104]	; 13cd0 <if_statement_inside_if_statement@@Base+0x3c4>
   13c64:	ldr	r0, [pc, #112]	; 13cdc <if_statement_inside_if_statement@@Base+0x3d0>
   13c68:	adds	r2, r2, #1
   13c6c:	adc	r3, r3, #0
   13c70:	strd	r2, [r4, #168]	; 0xa8
   13c74:	ldr	r3, [pc, #92]	; 13cd8 <if_statement_inside_if_statement@@Base+0x3cc>
   13c78:	ldr	r2, [pc, #96]	; 13ce0 <if_statement_inside_if_statement@@Base+0x3d4>
   13c7c:	b	13c50 <if_statement_inside_if_statement@@Base+0x344>
   13c80:	ldr	r3, [r0]
   13c84:	cmp	r3, #4
   13c88:	beq	13cb0 <if_statement_inside_if_statement@@Base+0x3a4>
   13c8c:	ldrd	r2, [r4, #184]	; 0xb8
   13c90:	ldr	r1, [pc, #56]	; 13cd0 <if_statement_inside_if_statement@@Base+0x3c4>
   13c94:	ldr	r0, [pc, #72]	; 13ce4 <if_statement_inside_if_statement@@Base+0x3d8>
   13c98:	adds	r2, r2, #1
   13c9c:	adc	r3, r3, #0
   13ca0:	strd	r2, [r4, #184]	; 0xb8
   13ca4:	ldr	r3, [pc, #44]	; 13cd8 <if_statement_inside_if_statement@@Base+0x3cc>
   13ca8:	ldr	r2, [pc, #56]	; 13ce8 <if_statement_inside_if_statement@@Base+0x3dc>
   13cac:	b	13c50 <if_statement_inside_if_statement@@Base+0x344>
   13cb0:	ldrd	r2, [r4, #176]	; 0xb0
   13cb4:	adds	r2, r2, #1
   13cb8:	adc	r3, r3, #0
   13cbc:	strd	r2, [r4, #176]	; 0xb0
   13cc0:	add	sp, sp, #20
   13cc4:	pop	{r4, r5, r6, r7, pc}
   13cc8:	andeq	r9, r2, r8, ror #27
   13ccc:	andeq	sl, r2, r0, lsl #18
   13cd0:	andeq	r7, r1, fp, lsl sp
   13cd4:	andeq	r7, r1, pc, ror #30
   13cd8:	ldrdeq	r7, [r1], -r7	; <UNPREDICTABLE>
   13cdc:	andeq	r7, r1, r0, asr #29
   13ce0:	andeq	r0, r0, r1, ror #3
   13ce4:	andeq	r7, r1, ip, asr #29
   13ce8:	andeq	r0, r0, r2, ror #3

00013cec <if_statement_inside_else_statement@@Base>:
   13cec:	push	{r4, r5, r6, r7, lr}
   13cf0:	sub	sp, sp, #20
   13cf4:	ldr	r4, [pc, #1004]	; 140e8 <if_statement_inside_else_statement@@Base+0x3fc>
   13cf8:	add	r1, sp, #4
   13cfc:	mov	r0, sp
   13d00:	ldrd	r2, [r4]
   13d04:	adds	r2, r2, #1
   13d08:	adc	r3, r3, #0
   13d0c:	strd	r2, [r4]
   13d10:	bl	14c60 <init_grammar@@Base>
   13d14:	ldrd	r2, [r4, #8]
   13d18:	mov	r0, #3
   13d1c:	adds	r2, r2, #1
   13d20:	adc	r3, r3, #0
   13d24:	strd	r2, [r4, #8]
   13d28:	bl	11900 <malloc@plt>
   13d2c:	mov	r7, r0
   13d30:	mov	r0, #3
   13d34:	bl	11900 <malloc@plt>
   13d38:	mov	r1, #33	; 0x21
   13d3c:	mov	r2, #61	; 0x3d
   13d40:	mov	r3, #0
   13d44:	strb	r1, [r7]
   13d48:	strb	r2, [r7, #1]
   13d4c:	strb	r3, [r7, #2]
   13d50:	strb	r1, [r0]
   13d54:	strb	r2, [r0, #1]
   13d58:	strb	r3, [r0, #2]
   13d5c:	mov	r6, r0
   13d60:	mov	r0, #84	; 0x54
   13d64:	bl	11900 <malloc@plt>
   13d68:	mov	r5, r0
   13d6c:	mov	r0, #4
   13d70:	bl	11900 <malloc@plt>
   13d74:	str	r0, [r5]
   13d78:	bl	14180 <init_token_opar@@Base>
   13d7c:	ldrd	r2, [r4, #16]
   13d80:	mov	r0, #8
   13d84:	adds	r2, r2, #1
   13d88:	adc	r3, r3, #0
   13d8c:	strd	r2, [r4, #16]
   13d90:	bl	11900 <malloc@plt>
   13d94:	mov	r1, #1
   13d98:	str	r0, [r5, #4]
   13d9c:	bl	14130 <init_token_int_value@@Base>
   13da0:	ldrd	r2, [r4, #24]
   13da4:	mov	r0, #8
   13da8:	adds	r2, r2, #1
   13dac:	adc	r3, r3, #0
   13db0:	strd	r2, [r4, #24]
   13db4:	bl	11900 <malloc@plt>
   13db8:	mov	r1, #1
   13dbc:	str	r0, [r5, #8]
   13dc0:	bl	14130 <init_token_int_value@@Base>
   13dc4:	ldrd	r2, [r4, #32]
   13dc8:	mov	r0, #8
   13dcc:	adds	r2, r2, #1
   13dd0:	adc	r3, r3, #0
   13dd4:	strd	r2, [r4, #32]
   13dd8:	bl	11900 <malloc@plt>
   13ddc:	mov	r1, r7
   13de0:	str	r0, [r5, #12]
   13de4:	bl	142c4 <init_token_boolean_op@@Base>
   13de8:	ldrd	r2, [r4, #40]	; 0x28
   13dec:	mov	r0, #8
   13df0:	adds	r2, r2, #1
   13df4:	adc	r3, r3, #0
   13df8:	strd	r2, [r4, #40]	; 0x28
   13dfc:	bl	11900 <malloc@plt>
   13e00:	mov	r1, #1
   13e04:	str	r0, [r5, #16]
   13e08:	bl	14130 <init_token_int_value@@Base>
   13e0c:	ldrd	r2, [r4, #48]	; 0x30
   13e10:	mov	r0, #4
   13e14:	adds	r2, r2, #1
   13e18:	adc	r3, r3, #0
   13e1c:	strd	r2, [r4, #48]	; 0x30
   13e20:	bl	11900 <malloc@plt>
   13e24:	str	r0, [r5, #20]
   13e28:	bl	141a4 <init_token_cpar@@Base>
   13e2c:	ldrd	r2, [r4, #56]	; 0x38
   13e30:	mov	r0, #4
   13e34:	adds	r2, r2, #1
   13e38:	adc	r3, r3, #0
   13e3c:	strd	r2, [r4, #56]	; 0x38
   13e40:	bl	11900 <malloc@plt>
   13e44:	str	r0, [r5, #24]
   13e48:	bl	141c8 <init_token_obra@@Base>
   13e4c:	ldrd	r2, [r4, #64]	; 0x40
   13e50:	mov	r0, #4
   13e54:	adds	r2, r2, #1
   13e58:	adc	r3, r3, #0
   13e5c:	strd	r2, [r4, #64]	; 0x40
   13e60:	bl	11900 <malloc@plt>
   13e64:	str	r0, [r5, #28]
   13e68:	bl	141ec <init_token_cbra@@Base>
   13e6c:	ldrd	r2, [r4, #72]	; 0x48
   13e70:	mov	r0, #4
   13e74:	adds	r2, r2, #1
   13e78:	adc	r3, r3, #0
   13e7c:	strd	r2, [r4, #72]	; 0x48
   13e80:	bl	11900 <malloc@plt>
   13e84:	str	r0, [r5, #32]
   13e88:	bl	142a0 <init_token_else@@Base>
   13e8c:	ldrd	r2, [r4, #80]	; 0x50
   13e90:	mov	r0, #4
   13e94:	adds	r2, r2, #1
   13e98:	adc	r3, r3, #0
   13e9c:	strd	r2, [r4, #80]	; 0x50
   13ea0:	bl	11900 <malloc@plt>
   13ea4:	str	r0, [r5, #36]	; 0x24
   13ea8:	bl	141c8 <init_token_obra@@Base>
   13eac:	ldrd	r2, [r4, #88]	; 0x58
   13eb0:	mov	r0, #4
   13eb4:	adds	r2, r2, #1
   13eb8:	adc	r3, r3, #0
   13ebc:	strd	r2, [r4, #88]	; 0x58
   13ec0:	bl	11900 <malloc@plt>
   13ec4:	str	r0, [r5, #40]	; 0x28
   13ec8:	bl	1427c <init_token_if@@Base>
   13ecc:	ldrd	r2, [r4, #96]	; 0x60
   13ed0:	mov	r0, #4
   13ed4:	adds	r2, r2, #1
   13ed8:	adc	r3, r3, #0
   13edc:	strd	r2, [r4, #96]	; 0x60
   13ee0:	bl	11900 <malloc@plt>
   13ee4:	str	r0, [r5, #44]	; 0x2c
   13ee8:	bl	14180 <init_token_opar@@Base>
   13eec:	ldrd	r2, [r4, #104]	; 0x68
   13ef0:	mov	r0, #8
   13ef4:	adds	r2, r2, #1
   13ef8:	adc	r3, r3, #0
   13efc:	strd	r2, [r4, #104]	; 0x68
   13f00:	bl	11900 <malloc@plt>
   13f04:	mov	r1, #1
   13f08:	str	r0, [r5, #48]	; 0x30
   13f0c:	bl	14130 <init_token_int_value@@Base>
   13f10:	ldrd	r2, [r4, #112]	; 0x70
   13f14:	mov	r0, #8
   13f18:	adds	r2, r2, #1
   13f1c:	adc	r3, r3, #0
   13f20:	strd	r2, [r4, #112]	; 0x70
   13f24:	bl	11900 <malloc@plt>
   13f28:	mov	r1, #1
   13f2c:	str	r0, [r5, #52]	; 0x34
   13f30:	bl	14130 <init_token_int_value@@Base>
   13f34:	ldrd	r2, [r4, #120]	; 0x78
   13f38:	mov	r0, #8
   13f3c:	adds	r2, r2, #1
   13f40:	adc	r3, r3, #0
   13f44:	strd	r2, [r4, #120]	; 0x78
   13f48:	bl	11900 <malloc@plt>
   13f4c:	mov	r1, r6
   13f50:	ldr	r6, [pc, #404]	; 140ec <if_statement_inside_else_statement@@Base+0x400>
   13f54:	str	r0, [r5, #56]	; 0x38
   13f58:	bl	142c4 <init_token_boolean_op@@Base>
   13f5c:	ldrd	r2, [r4, #128]	; 0x80
   13f60:	mov	r0, #8
   13f64:	adds	r2, r2, #1
   13f68:	adc	r3, r3, #0
   13f6c:	strd	r2, [r4, #128]	; 0x80
   13f70:	bl	11900 <malloc@plt>
   13f74:	mov	r1, #1
   13f78:	str	r0, [r5, #60]	; 0x3c
   13f7c:	bl	14130 <init_token_int_value@@Base>
   13f80:	ldrd	r2, [r4, #136]	; 0x88
   13f84:	mov	r0, #4
   13f88:	adds	r2, r2, #1
   13f8c:	adc	r3, r3, #0
   13f90:	strd	r2, [r4, #136]	; 0x88
   13f94:	bl	11900 <malloc@plt>
   13f98:	str	r0, [r5, #64]	; 0x40
   13f9c:	bl	141a4 <init_token_cpar@@Base>
   13fa0:	ldrd	r2, [r4, #144]	; 0x90
   13fa4:	mov	r0, #4
   13fa8:	adds	r2, r2, #1
   13fac:	adc	r3, r3, #0
   13fb0:	strd	r2, [r4, #144]	; 0x90
   13fb4:	bl	11900 <malloc@plt>
   13fb8:	str	r0, [r5, #68]	; 0x44
   13fbc:	bl	141c8 <init_token_obra@@Base>
   13fc0:	ldrd	r2, [r4, #152]	; 0x98
   13fc4:	mov	r0, #4
   13fc8:	adds	r2, r2, #1
   13fcc:	adc	r3, r3, #0
   13fd0:	strd	r2, [r4, #152]	; 0x98
   13fd4:	bl	11900 <malloc@plt>
   13fd8:	str	r0, [r5, #72]	; 0x48
   13fdc:	bl	141ec <init_token_cbra@@Base>
   13fe0:	ldrd	r2, [r4, #160]	; 0xa0
   13fe4:	mov	r0, #4
   13fe8:	adds	r2, r2, #1
   13fec:	adc	r3, r3, #0
   13ff0:	strd	r2, [r4, #160]	; 0xa0
   13ff4:	bl	11900 <malloc@plt>
   13ff8:	str	r0, [r5, #76]	; 0x4c
   13ffc:	bl	141ec <init_token_cbra@@Base>
   14000:	ldrd	r2, [r4, #168]	; 0xa8
   14004:	mov	r0, #4
   14008:	adds	r2, r2, #1
   1400c:	adc	r3, r3, #0
   14010:	strd	r2, [r4, #168]	; 0xa8
   14014:	bl	11900 <malloc@plt>
   14018:	str	r0, [r5, #80]	; 0x50
   1401c:	bl	141ec <init_token_cbra@@Base>
   14020:	ldrd	r2, [r4, #176]	; 0xb0
   14024:	mov	r0, sp
   14028:	str	r5, [r6, #228]	; 0xe4
   1402c:	adds	r2, r2, #1
   14030:	adc	r3, r3, #0
   14034:	strd	r2, [r4, #176]	; 0xb0
   14038:	mov	r3, #21
   1403c:	str	r3, [r6, #220]	; 0xdc
   14040:	bl	153e0 <read_if_statement@@Base>
   14044:	ldr	r3, [r6, #204]	; 0xcc
   14048:	cmp	r3, #21
   1404c:	beq	14074 <if_statement_inside_else_statement@@Base+0x388>
   14050:	ldrd	r2, [r4, #184]	; 0xb8
   14054:	ldr	r1, [pc, #148]	; 140f0 <if_statement_inside_else_statement@@Base+0x404>
   14058:	ldr	r0, [pc, #148]	; 140f4 <if_statement_inside_else_statement@@Base+0x408>
   1405c:	adds	r2, r2, #1
   14060:	adc	r3, r3, #0
   14064:	strd	r2, [r4, #184]	; 0xb8
   14068:	ldr	r3, [pc, #136]	; 140f8 <if_statement_inside_else_statement@@Base+0x40c>
   1406c:	ldr	r2, [pc, #136]	; 140fc <if_statement_inside_else_statement@@Base+0x410>
   14070:	bl	11a20 <__assert_fail@plt>
   14074:	cmp	r0, #0
   14078:	bne	140a0 <if_statement_inside_else_statement@@Base+0x3b4>
   1407c:	ldrd	r2, [r4, #192]	; 0xc0
   14080:	ldr	r1, [pc, #104]	; 140f0 <if_statement_inside_else_statement@@Base+0x404>
   14084:	ldr	r0, [pc, #116]	; 14100 <if_statement_inside_else_statement@@Base+0x414>
   14088:	adds	r2, r2, #1
   1408c:	adc	r3, r3, #0
   14090:	strd	r2, [r4, #192]	; 0xc0
   14094:	ldr	r3, [pc, #92]	; 140f8 <if_statement_inside_else_statement@@Base+0x40c>
   14098:	ldr	r2, [pc, #100]	; 14104 <if_statement_inside_else_statement@@Base+0x418>
   1409c:	b	14070 <if_statement_inside_else_statement@@Base+0x384>
   140a0:	ldr	r3, [r0]
   140a4:	cmp	r3, #4
   140a8:	beq	140d0 <if_statement_inside_else_statement@@Base+0x3e4>
   140ac:	ldrd	r2, [r4, #208]	; 0xd0
   140b0:	ldr	r1, [pc, #56]	; 140f0 <if_statement_inside_else_statement@@Base+0x404>
   140b4:	ldr	r0, [pc, #76]	; 14108 <if_statement_inside_else_statement@@Base+0x41c>
   140b8:	adds	r2, r2, #1
   140bc:	adc	r3, r3, #0
   140c0:	strd	r2, [r4, #208]	; 0xd0
   140c4:	ldr	r3, [pc, #44]	; 140f8 <if_statement_inside_else_statement@@Base+0x40c>
   140c8:	mov	r2, #560	; 0x230
   140cc:	b	14070 <if_statement_inside_else_statement@@Base+0x384>
   140d0:	ldrd	r2, [r4, #200]	; 0xc8
   140d4:	adds	r2, r2, #1
   140d8:	adc	r3, r3, #0
   140dc:	strd	r2, [r4, #200]	; 0xc8
   140e0:	add	sp, sp, #20
   140e4:	pop	{r4, r5, r6, r7, pc}
   140e8:	andeq	r9, r2, r8, lsr #29
   140ec:	andeq	sl, r2, r0, lsl #18
   140f0:	andeq	r7, r1, fp, lsl sp
   140f4:	andeq	r7, r1, sl, lsl #31
   140f8:	strdeq	r7, [r1], -r8
   140fc:	andeq	r0, r0, lr, lsr #4
   14100:	andeq	r7, r1, r0, asr #29
   14104:	andeq	r0, r0, pc, lsr #4
   14108:	andeq	r7, r1, ip, asr #29

0001410c <init_token_int_type@@Base>:
   1410c:	ldr	r1, [pc, #24]	; 1412c <init_token_int_type@@Base+0x20>
   14110:	ldrd	r2, [r1]
   14114:	adds	r2, r2, #1
   14118:	adc	r3, r3, #0
   1411c:	strd	r2, [r1]
   14120:	mov	r3, #0
   14124:	str	r3, [r0]
   14128:	bx	lr
   1412c:	andeq	sl, r2, r8, asr #2

00014130 <init_token_int_value@@Base>:
   14130:	ldr	ip, [pc, #28]	; 14154 <init_token_int_value@@Base+0x24>
   14134:	str	r1, [r0, #4]
   14138:	ldrd	r2, [ip, #8]
   1413c:	adds	r2, r2, #1
   14140:	adc	r3, r3, #0
   14144:	strd	r2, [ip, #8]
   14148:	mov	r3, #1
   1414c:	str	r3, [r0]
   14150:	bx	lr
   14154:	andeq	sl, r2, r8, asr #2

00014158 <init_token_function@@Base>:
   14158:	ldr	ip, [pc, #28]	; 1417c <init_token_function@@Base+0x24>
   1415c:	str	r1, [r0, #4]
   14160:	ldrd	r2, [ip, #16]
   14164:	adds	r2, r2, #1
   14168:	adc	r3, r3, #0
   1416c:	strd	r2, [ip, #16]
   14170:	mov	r3, #2
   14174:	str	r3, [r0]
   14178:	bx	lr
   1417c:	andeq	sl, r2, r8, asr #2

00014180 <init_token_opar@@Base>:
   14180:	ldr	r1, [pc, #24]	; 141a0 <init_token_opar@@Base+0x20>
   14184:	ldrd	r2, [r1, #24]
   14188:	adds	r2, r2, #1
   1418c:	adc	r3, r3, #0
   14190:	strd	r2, [r1, #24]
   14194:	mov	r3, #3
   14198:	str	r3, [r0]
   1419c:	bx	lr
   141a0:	andeq	sl, r2, r8, asr #2

000141a4 <init_token_cpar@@Base>:
   141a4:	ldr	r1, [pc, #24]	; 141c4 <init_token_cpar@@Base+0x20>
   141a8:	ldrd	r2, [r1, #32]
   141ac:	adds	r2, r2, #1
   141b0:	adc	r3, r3, #0
   141b4:	strd	r2, [r1, #32]
   141b8:	mov	r3, #4
   141bc:	str	r3, [r0]
   141c0:	bx	lr
   141c4:	andeq	sl, r2, r8, asr #2

000141c8 <init_token_obra@@Base>:
   141c8:	ldr	r1, [pc, #24]	; 141e8 <init_token_obra@@Base+0x20>
   141cc:	ldrd	r2, [r1, #40]	; 0x28
   141d0:	adds	r2, r2, #1
   141d4:	adc	r3, r3, #0
   141d8:	strd	r2, [r1, #40]	; 0x28
   141dc:	mov	r3, #5
   141e0:	str	r3, [r0]
   141e4:	bx	lr
   141e8:	andeq	sl, r2, r8, asr #2

000141ec <init_token_cbra@@Base>:
   141ec:	ldr	r1, [pc, #24]	; 1420c <init_token_cbra@@Base+0x20>
   141f0:	ldrd	r2, [r1, #48]	; 0x30
   141f4:	adds	r2, r2, #1
   141f8:	adc	r3, r3, #0
   141fc:	strd	r2, [r1, #48]	; 0x30
   14200:	mov	r3, #6
   14204:	str	r3, [r0]
   14208:	bx	lr
   1420c:	andeq	sl, r2, r8, asr #2

00014210 <init_token_return@@Base>:
   14210:	ldr	r1, [pc, #24]	; 14230 <init_token_return@@Base+0x20>
   14214:	ldrd	r2, [r1, #56]	; 0x38
   14218:	adds	r2, r2, #1
   1421c:	adc	r3, r3, #0
   14220:	strd	r2, [r1, #56]	; 0x38
   14224:	mov	r3, #7
   14228:	str	r3, [r0]
   1422c:	bx	lr
   14230:	andeq	sl, r2, r8, asr #2

00014234 <init_token_semicolon@@Base>:
   14234:	ldr	r1, [pc, #24]	; 14254 <init_token_semicolon@@Base+0x20>
   14238:	ldrd	r2, [r1, #64]	; 0x40
   1423c:	adds	r2, r2, #1
   14240:	adc	r3, r3, #0
   14244:	strd	r2, [r1, #64]	; 0x40
   14248:	mov	r3, #8
   1424c:	str	r3, [r0]
   14250:	bx	lr
   14254:	andeq	sl, r2, r8, asr #2

00014258 <init_token_eof@@Base>:
   14258:	ldr	r1, [pc, #24]	; 14278 <init_token_eof@@Base+0x20>
   1425c:	ldrd	r2, [r1, #72]	; 0x48
   14260:	adds	r2, r2, #1
   14264:	adc	r3, r3, #0
   14268:	strd	r2, [r1, #72]	; 0x48
   1426c:	mov	r3, #9
   14270:	str	r3, [r0]
   14274:	bx	lr
   14278:	andeq	sl, r2, r8, asr #2

0001427c <init_token_if@@Base>:
   1427c:	ldr	r1, [pc, #24]	; 1429c <init_token_if@@Base+0x20>
   14280:	ldrd	r2, [r1, #80]	; 0x50
   14284:	adds	r2, r2, #1
   14288:	adc	r3, r3, #0
   1428c:	strd	r2, [r1, #80]	; 0x50
   14290:	mov	r3, #10
   14294:	str	r3, [r0]
   14298:	bx	lr
   1429c:	andeq	sl, r2, r8, asr #2

000142a0 <init_token_else@@Base>:
   142a0:	ldr	r1, [pc, #24]	; 142c0 <init_token_else@@Base+0x20>
   142a4:	ldrd	r2, [r1, #88]	; 0x58
   142a8:	adds	r2, r2, #1
   142ac:	adc	r3, r3, #0
   142b0:	strd	r2, [r1, #88]	; 0x58
   142b4:	mov	r3, #11
   142b8:	str	r3, [r0]
   142bc:	bx	lr
   142c0:	andeq	sl, r2, r8, asr #2

000142c4 <init_token_boolean_op@@Base>:
   142c4:	ldr	ip, [pc, #28]	; 142e8 <init_token_boolean_op@@Base+0x24>
   142c8:	str	r1, [r0, #4]
   142cc:	ldrd	r2, [ip, #96]	; 0x60
   142d0:	adds	r2, r2, #1
   142d4:	adc	r3, r3, #0
   142d8:	strd	r2, [ip, #96]	; 0x60
   142dc:	mov	r3, #12
   142e0:	str	r3, [r0]
   142e4:	bx	lr
   142e8:	andeq	sl, r2, r8, asr #2

000142ec <free_token_int_type@@Base>:
   142ec:	ldr	r1, [pc, #16]	; 14304 <free_token_int_type@@Base+0x18>
   142f0:	ldrd	r2, [r1, #104]	; 0x68
   142f4:	adds	r2, r2, #1
   142f8:	adc	r3, r3, #0
   142fc:	strd	r2, [r1, #104]	; 0x68
   14300:	b	118a0 <free@plt>
   14304:	andeq	sl, r2, r8, asr #2

00014308 <free_token_int_value@@Base>:
   14308:	ldr	r1, [pc, #16]	; 14320 <free_token_int_value@@Base+0x18>
   1430c:	ldrd	r2, [r1, #112]	; 0x70
   14310:	adds	r2, r2, #1
   14314:	adc	r3, r3, #0
   14318:	strd	r2, [r1, #112]	; 0x70
   1431c:	b	118a0 <free@plt>
   14320:	andeq	sl, r2, r8, asr #2

00014324 <free_token_function@@Base>:
   14324:	ldr	r1, [pc, #16]	; 1433c <free_token_function@@Base+0x18>
   14328:	ldrd	r2, [r1, #120]	; 0x78
   1432c:	adds	r2, r2, #1
   14330:	adc	r3, r3, #0
   14334:	strd	r2, [r1, #120]	; 0x78
   14338:	b	118a0 <free@plt>
   1433c:	andeq	sl, r2, r8, asr #2

00014340 <free_token_opar@@Base>:
   14340:	ldr	r1, [pc, #16]	; 14358 <free_token_opar@@Base+0x18>
   14344:	ldrd	r2, [r1, #128]	; 0x80
   14348:	adds	r2, r2, #1
   1434c:	adc	r3, r3, #0
   14350:	strd	r2, [r1, #128]	; 0x80
   14354:	b	118a0 <free@plt>
   14358:	andeq	sl, r2, r8, asr #2

0001435c <free_token_cpar@@Base>:
   1435c:	ldr	r1, [pc, #16]	; 14374 <free_token_cpar@@Base+0x18>
   14360:	ldrd	r2, [r1, #136]	; 0x88
   14364:	adds	r2, r2, #1
   14368:	adc	r3, r3, #0
   1436c:	strd	r2, [r1, #136]	; 0x88
   14370:	b	118a0 <free@plt>
   14374:	andeq	sl, r2, r8, asr #2

00014378 <free_token_obra@@Base>:
   14378:	ldr	r1, [pc, #16]	; 14390 <free_token_obra@@Base+0x18>
   1437c:	ldrd	r2, [r1, #144]	; 0x90
   14380:	adds	r2, r2, #1
   14384:	adc	r3, r3, #0
   14388:	strd	r2, [r1, #144]	; 0x90
   1438c:	b	118a0 <free@plt>
   14390:	andeq	sl, r2, r8, asr #2

00014394 <free_token_cbra@@Base>:
   14394:	ldr	r1, [pc, #16]	; 143ac <free_token_cbra@@Base+0x18>
   14398:	ldrd	r2, [r1, #152]	; 0x98
   1439c:	adds	r2, r2, #1
   143a0:	adc	r3, r3, #0
   143a4:	strd	r2, [r1, #152]	; 0x98
   143a8:	b	118a0 <free@plt>
   143ac:	andeq	sl, r2, r8, asr #2

000143b0 <free_token_return@@Base>:
   143b0:	ldr	r1, [pc, #16]	; 143c8 <free_token_return@@Base+0x18>
   143b4:	ldrd	r2, [r1, #160]	; 0xa0
   143b8:	adds	r2, r2, #1
   143bc:	adc	r3, r3, #0
   143c0:	strd	r2, [r1, #160]	; 0xa0
   143c4:	b	118a0 <free@plt>
   143c8:	andeq	sl, r2, r8, asr #2

000143cc <free_token_semicolon@@Base>:
   143cc:	ldr	r1, [pc, #16]	; 143e4 <free_token_semicolon@@Base+0x18>
   143d0:	ldrd	r2, [r1, #168]	; 0xa8
   143d4:	adds	r2, r2, #1
   143d8:	adc	r3, r3, #0
   143dc:	strd	r2, [r1, #168]	; 0xa8
   143e0:	b	118a0 <free@plt>
   143e4:	andeq	sl, r2, r8, asr #2

000143e8 <free_token_eof@@Base>:
   143e8:	ldr	r1, [pc, #16]	; 14400 <free_token_eof@@Base+0x18>
   143ec:	ldrd	r2, [r1, #176]	; 0xb0
   143f0:	adds	r2, r2, #1
   143f4:	adc	r3, r3, #0
   143f8:	strd	r2, [r1, #176]	; 0xb0
   143fc:	b	118a0 <free@plt>
   14400:	andeq	sl, r2, r8, asr #2

00014404 <free_token_if@@Base>:
   14404:	ldr	r1, [pc, #16]	; 1441c <free_token_if@@Base+0x18>
   14408:	ldrd	r2, [r1, #184]	; 0xb8
   1440c:	adds	r2, r2, #1
   14410:	adc	r3, r3, #0
   14414:	strd	r2, [r1, #184]	; 0xb8
   14418:	b	118a0 <free@plt>
   1441c:	andeq	sl, r2, r8, asr #2

00014420 <free_token_else@@Base>:
   14420:	ldr	r1, [pc, #16]	; 14438 <free_token_else@@Base+0x18>
   14424:	ldrd	r2, [r1, #192]	; 0xc0
   14428:	adds	r2, r2, #1
   1442c:	adc	r3, r3, #0
   14430:	strd	r2, [r1, #192]	; 0xc0
   14434:	b	118a0 <free@plt>
   14438:	andeq	sl, r2, r8, asr #2

0001443c <free_token_boolean_op@@Base>:
   1443c:	push	{r4, r5, r6, lr}
   14440:	mov	r5, r0
   14444:	ldr	r4, [pc, #56]	; 14484 <free_token_boolean_op@@Base+0x48>
   14448:	ldr	r0, [r0, #4]
   1444c:	ldrd	r2, [r4, #200]	; 0xc8
   14450:	adds	r2, r2, #1
   14454:	adc	r3, r3, #0
   14458:	cmp	r0, #0
   1445c:	strd	r2, [r4, #200]	; 0xc8
   14460:	beq	14478 <free_token_boolean_op@@Base+0x3c>
   14464:	bl	118a0 <free@plt>
   14468:	ldrd	r2, [r4, #208]	; 0xd0
   1446c:	adds	r2, r2, #1
   14470:	adc	r3, r3, #0
   14474:	strd	r2, [r4, #208]	; 0xd0
   14478:	mov	r0, r5
   1447c:	pop	{r4, r5, r6, lr}
   14480:	b	118a0 <free@plt>
   14484:	andeq	sl, r2, r8, asr #2

00014488 <init_ast_base@@Base>:
   14488:	ldr	r3, [pc, #24]	; 144a8 <init_ast_base@@Base+0x20>
   1448c:	push	{r4, r5, lr}
   14490:	ldrd	r4, [r3]
   14494:	stm	r0, {r1, r2}
   14498:	adds	r4, r4, #1
   1449c:	adc	r5, r5, #0
   144a0:	strd	r4, [r3]
   144a4:	pop	{r4, r5, pc}
   144a8:	andeq	sl, r2, r0, lsr #4

000144ac <init_ast_base_single@@Base>:
   144ac:	ldr	ip, [pc, #28]	; 144d0 <init_ast_base_single@@Base+0x24>
   144b0:	str	r1, [r0]
   144b4:	ldrd	r2, [ip, #8]
   144b8:	adds	r2, r2, #1
   144bc:	adc	r3, r3, #0
   144c0:	strd	r2, [ip, #8]
   144c4:	mov	r3, #0
   144c8:	str	r3, [r0, #4]
   144cc:	bx	lr
   144d0:	andeq	sl, r2, r0, lsr #4

000144d4 <init_node_id@@Base>:
   144d4:	ldr	ip, [pc, #32]	; 144fc <init_node_id@@Base+0x28>
   144d8:	str	r1, [r0, #8]
   144dc:	ldrd	r2, [ip, #16]
   144e0:	adds	r2, r2, #1
   144e4:	adc	r3, r3, #0
   144e8:	strd	r2, [ip, #16]
   144ec:	mov	r3, #0
   144f0:	str	r3, [r0]
   144f4:	str	r3, [r0, #4]
   144f8:	bx	lr
   144fc:	andeq	sl, r2, r0, lsr #4

00014500 <init_node_int@@Base>:
   14500:	ldr	ip, [pc, #32]	; 14528 <init_node_int@@Base+0x28>
   14504:	str	r1, [r0, #8]
   14508:	ldrd	r2, [ip, #24]
   1450c:	adds	r2, r2, #1
   14510:	adc	r3, r3, #0
   14514:	strd	r2, [ip, #24]
   14518:	mov	r2, #1
   1451c:	mov	r3, #0
   14520:	stm	r0, {r2, r3}
   14524:	bx	lr
   14528:	andeq	sl, r2, r0, lsr #4

0001452c <init_node_function@@Base>:
   1452c:	ldr	r3, [pc, #40]	; 1455c <init_node_function@@Base+0x30>
   14530:	push	{r4, r5, lr}
   14534:	mov	ip, #0
   14538:	ldrd	r4, [r3, #32]
   1453c:	str	r1, [r0, #8]
   14540:	str	r2, [r0, #12]
   14544:	adds	r4, r4, #1
   14548:	adc	r5, r5, #0
   1454c:	strd	r4, [r3, #32]
   14550:	mov	r3, #2
   14554:	stm	r0, {r3, ip}
   14558:	pop	{r4, r5, pc}
   1455c:	andeq	sl, r2, r0, lsr #4

00014560 <init_node_return@@Base>:
   14560:	ldr	ip, [pc, #32]	; 14588 <init_node_return@@Base+0x28>
   14564:	str	r1, [r0, #8]
   14568:	ldrd	r2, [ip, #40]	; 0x28
   1456c:	adds	r2, r2, #1
   14570:	adc	r3, r3, #0
   14574:	strd	r2, [ip, #40]	; 0x28
   14578:	mov	r2, #3
   1457c:	mov	r3, #0
   14580:	stm	r0, {r2, r3}
   14584:	bx	lr
   14588:	andeq	sl, r2, r0, lsr #4

0001458c <init_node_if@@Base>:
   1458c:	ldr	ip, [pc, #48]	; 145c4 <init_node_if@@Base+0x38>
   14590:	push	{r4, r5, lr}
   14594:	ldrd	r4, [ip, #48]	; 0x30
   14598:	str	r1, [r0, #8]
   1459c:	str	r2, [r0, #12]
   145a0:	adds	r4, r4, #1
   145a4:	adc	r5, r5, #0
   145a8:	str	r3, [r0, #16]
   145ac:	strd	r4, [ip, #48]	; 0x30
   145b0:	mov	ip, #4
   145b4:	str	ip, [r0]
   145b8:	mov	ip, #0
   145bc:	str	ip, [r0, #4]
   145c0:	pop	{r4, r5, pc}
   145c4:	andeq	sl, r2, r0, lsr #4

000145c8 <init_node_boolean_operator@@Base>:
   145c8:	ldr	ip, [pc, #48]	; 14600 <init_node_boolean_operator@@Base+0x38>
   145cc:	push	{r4, r5, lr}
   145d0:	ldrd	r4, [ip, #56]	; 0x38
   145d4:	str	r1, [r0, #16]
   145d8:	str	r2, [r0, #8]
   145dc:	adds	r4, r4, #1
   145e0:	adc	r5, r5, #0
   145e4:	str	r3, [r0, #12]
   145e8:	strd	r4, [ip, #56]	; 0x38
   145ec:	mov	ip, #0
   145f0:	str	ip, [r0, #4]
   145f4:	mov	ip, #5
   145f8:	str	ip, [r0]
   145fc:	pop	{r4, r5, pc}
   14600:	andeq	sl, r2, r0, lsr #4

00014604 <free_node_boolean_operator@@Base>:
   14604:	push	{r4, r5, r6, lr}
   14608:	mov	r5, r0
   1460c:	ldr	r4, [pc, #120]	; 1468c <free_node_boolean_operator@@Base+0x88>
   14610:	ldr	r0, [r0, #4]
   14614:	ldrd	r2, [r4, #64]	; 0x40
   14618:	adds	r2, r2, #1
   1461c:	adc	r3, r3, #0
   14620:	cmp	r0, #0
   14624:	strd	r2, [r4, #64]	; 0x40
   14628:	beq	14650 <free_node_boolean_operator@@Base+0x4c>
   1462c:	ldrd	r2, [r4, #72]	; 0x48
   14630:	adds	r2, r2, #1
   14634:	adc	r3, r3, #0
   14638:	strd	r2, [r4, #72]	; 0x48
   1463c:	bl	14690 <free_node@@Base>
   14640:	ldrd	r2, [r4, #80]	; 0x50
   14644:	adds	r2, r2, #1
   14648:	adc	r3, r3, #0
   1464c:	strd	r2, [r4, #80]	; 0x50
   14650:	ldr	r0, [r5, #8]
   14654:	bl	14690 <free_node@@Base>
   14658:	ldrd	r2, [r4, #88]	; 0x58
   1465c:	ldr	r0, [r5, #12]
   14660:	adds	r2, r2, #1
   14664:	adc	r3, r3, #0
   14668:	strd	r2, [r4, #88]	; 0x58
   1466c:	bl	14690 <free_node@@Base>
   14670:	ldrd	r2, [r4, #96]	; 0x60
   14674:	mov	r0, r5
   14678:	adds	r2, r2, #1
   1467c:	adc	r3, r3, #0
   14680:	strd	r2, [r4, #96]	; 0x60
   14684:	pop	{r4, r5, r6, lr}
   14688:	b	118a0 <free@plt>
   1468c:	andeq	sl, r2, r0, lsr #4

00014690 <free_node@@Base>:
   14690:	ldr	r3, [r0]
   14694:	push	{r4, lr}
   14698:	ldr	r4, [pc, #328]	; 147e8 <free_node@@Base+0x158>
   1469c:	cmp	r3, #5
   146a0:	ldrls	pc, [pc, r3, lsl #2]
   146a4:	b	147b0 <free_node@@Base+0x120>
   146a8:	andeq	r4, r1, r0, asr #13
   146ac:	andeq	r4, r1, r8, ror #13
   146b0:	andeq	r4, r1, r0, lsl r7
   146b4:	andeq	r4, r1, r8, lsr r7
   146b8:	andeq	r4, r1, r0, ror #14
   146bc:	andeq	r4, r1, r8, lsl #15
   146c0:	ldrd	r2, [r4, #112]	; 0x70
   146c4:	adds	r2, r2, #1
   146c8:	adc	r3, r3, #0
   146cc:	strd	r2, [r4, #112]	; 0x70
   146d0:	bl	149bc <free_node_id@@Base>
   146d4:	ldrd	r2, [r4, #208]	; 0xd0
   146d8:	adds	r2, r2, #1
   146dc:	adc	r3, r3, #0
   146e0:	strd	r2, [r4, #208]	; 0xd0
   146e4:	pop	{r4, pc}
   146e8:	ldrd	r2, [r4, #120]	; 0x78
   146ec:	adds	r2, r2, #1
   146f0:	adc	r3, r3, #0
   146f4:	strd	r2, [r4, #120]	; 0x78
   146f8:	bl	14960 <free_node_int@@Base>
   146fc:	ldrd	r2, [r4, #160]	; 0xa0
   14700:	adds	r2, r2, #1
   14704:	adc	r3, r3, #0
   14708:	strd	r2, [r4, #160]	; 0xa0
   1470c:	pop	{r4, pc}
   14710:	ldrd	r2, [r4, #128]	; 0x80
   14714:	adds	r2, r2, #1
   14718:	adc	r3, r3, #0
   1471c:	strd	r2, [r4, #128]	; 0x80
   14720:	bl	148fc <free_node_function@@Base>
   14724:	ldrd	r2, [r4, #168]	; 0xa8
   14728:	adds	r2, r2, #1
   1472c:	adc	r3, r3, #0
   14730:	strd	r2, [r4, #168]	; 0xa8
   14734:	pop	{r4, pc}
   14738:	ldrd	r2, [r4, #136]	; 0x88
   1473c:	adds	r2, r2, #1
   14740:	adc	r3, r3, #0
   14744:	strd	r2, [r4, #136]	; 0x88
   14748:	bl	148a0 <free_node_return@@Base>
   1474c:	ldrd	r2, [r4, #176]	; 0xb0
   14750:	adds	r2, r2, #1
   14754:	adc	r3, r3, #0
   14758:	strd	r2, [r4, #176]	; 0xb0
   1475c:	pop	{r4, pc}
   14760:	ldrd	r2, [r4, #144]	; 0x90
   14764:	adds	r2, r2, #1
   14768:	adc	r3, r3, #0
   1476c:	strd	r2, [r4, #144]	; 0x90
   14770:	bl	147f4 <free_node_if@@Base>
   14774:	ldrd	r2, [r4, #184]	; 0xb8
   14778:	adds	r2, r2, #1
   1477c:	adc	r3, r3, #0
   14780:	strd	r2, [r4, #184]	; 0xb8
   14784:	pop	{r4, pc}
   14788:	ldrd	r2, [r4, #152]	; 0x98
   1478c:	adds	r2, r2, #1
   14790:	adc	r3, r3, #0
   14794:	strd	r2, [r4, #152]	; 0x98
   14798:	bl	14604 <free_node_boolean_operator@@Base>
   1479c:	ldrd	r2, [r4, #192]	; 0xc0
   147a0:	adds	r2, r2, #1
   147a4:	adc	r3, r3, #0
   147a8:	strd	r2, [r4, #192]	; 0xc0
   147ac:	pop	{r4, pc}
   147b0:	ldrd	r2, [r4, #104]	; 0x68
   147b4:	ldr	r0, [pc, #48]	; 147ec <free_node@@Base+0x15c>
   147b8:	adds	r2, r2, #1
   147bc:	adc	r3, r3, #0
   147c0:	strd	r2, [r4, #104]	; 0x68
   147c4:	ldr	r3, [pc, #36]	; 147f0 <free_node@@Base+0x160>
   147c8:	ldr	r1, [r3]
   147cc:	bl	119f0 <fputs@plt>
   147d0:	ldrd	r2, [r4, #200]	; 0xc8
   147d4:	mov	r0, #1
   147d8:	adds	r2, r2, #1
   147dc:	adc	r3, r3, #0
   147e0:	strd	r2, [r4, #200]	; 0xc8
   147e4:	bl	11948 <exit@plt>
   147e8:	andeq	sl, r2, r0, lsr #4
   147ec:	andeq	r8, r1, sp, lsr #4
   147f0:	andeq	r9, r2, r8, lsl #19

000147f4 <free_node_if@@Base>:
   147f4:	push	{r4, r5, r6, lr}
   147f8:	mov	r5, r0
   147fc:	ldr	r4, [pc, #148]	; 14898 <free_node_if@@Base+0xa4>
   14800:	ldr	r0, [r0, #4]
   14804:	ldrd	r2, [r4, #216]	; 0xd8
   14808:	adds	r2, r2, #1
   1480c:	adc	r3, r3, #0
   14810:	cmp	r0, #0
   14814:	strd	r2, [r4, #216]	; 0xd8
   14818:	beq	14840 <free_node_if@@Base+0x4c>
   1481c:	ldrd	r2, [r4, #224]	; 0xe0
   14820:	adds	r2, r2, #1
   14824:	adc	r3, r3, #0
   14828:	strd	r2, [r4, #224]	; 0xe0
   1482c:	bl	14690 <free_node@@Base>
   14830:	ldrd	r2, [r4, #232]	; 0xe8
   14834:	adds	r2, r2, #1
   14838:	adc	r3, r3, #0
   1483c:	strd	r2, [r4, #232]	; 0xe8
   14840:	ldr	r0, [r5, #8]
   14844:	bl	14690 <free_node@@Base>
   14848:	ldrd	r2, [r4, #240]	; 0xf0
   1484c:	ldr	r0, [r5, #12]
   14850:	adds	r2, r2, #1
   14854:	adc	r3, r3, #0
   14858:	strd	r2, [r4, #240]	; 0xf0
   1485c:	bl	14690 <free_node@@Base>
   14860:	ldrd	r2, [r4, #248]	; 0xf8
   14864:	ldr	r0, [r5, #16]
   14868:	adds	r2, r2, #1
   1486c:	adc	r3, r3, #0
   14870:	strd	r2, [r4, #248]	; 0xf8
   14874:	bl	14690 <free_node@@Base>
   14878:	ldr	r1, [pc, #28]	; 1489c <free_node_if@@Base+0xa8>
   1487c:	mov	r0, r5
   14880:	pop	{r4, r5, r6, lr}
   14884:	ldrd	r2, [r1]
   14888:	adds	r2, r2, #1
   1488c:	adc	r3, r3, #0
   14890:	strd	r2, [r1]
   14894:	b	118a0 <free@plt>
   14898:	andeq	sl, r2, r0, lsr #4
   1489c:	andeq	sl, r2, r0, lsr #6

000148a0 <free_node_return@@Base>:
   148a0:	push	{r4, r5, r6, lr}
   148a4:	mov	r5, r0
   148a8:	ldr	r4, [pc, #72]	; 148f8 <free_node_return@@Base+0x58>
   148ac:	ldr	r0, [r0, #4]
   148b0:	ldrd	r2, [r4, #-8]
   148b4:	adds	r2, r2, #1
   148b8:	adc	r3, r3, #0
   148bc:	cmp	r0, #0
   148c0:	strd	r2, [r4, #-8]
   148c4:	beq	148ec <free_node_return@@Base+0x4c>
   148c8:	ldrd	r2, [r4]
   148cc:	adds	r2, r2, #1
   148d0:	adc	r3, r3, #0
   148d4:	strd	r2, [r4]
   148d8:	bl	14690 <free_node@@Base>
   148dc:	ldrd	r2, [r4, #8]
   148e0:	adds	r2, r2, #1
   148e4:	adc	r3, r3, #0
   148e8:	strd	r2, [r4, #8]
   148ec:	mov	r0, r5
   148f0:	pop	{r4, r5, r6, lr}
   148f4:	b	118a0 <free@plt>
   148f8:	andeq	sl, r2, r0, lsr r3

000148fc <free_node_function@@Base>:
   148fc:	push	{r4, r5, r6, lr}
   14900:	mov	r5, r0
   14904:	ldr	r4, [pc, #80]	; 1495c <free_node_function@@Base+0x60>
   14908:	ldr	r0, [r0, #4]
   1490c:	ldrd	r2, [r4]
   14910:	adds	r2, r2, #1
   14914:	adc	r3, r3, #0
   14918:	cmp	r0, #0
   1491c:	strd	r2, [r4]
   14920:	beq	14948 <free_node_function@@Base+0x4c>
   14924:	ldrd	r2, [r4, #8]
   14928:	adds	r2, r2, #1
   1492c:	adc	r3, r3, #0
   14930:	strd	r2, [r4, #8]
   14934:	bl	14690 <free_node@@Base>
   14938:	ldrd	r2, [r4, #16]
   1493c:	adds	r2, r2, #1
   14940:	adc	r3, r3, #0
   14944:	strd	r2, [r4, #16]
   14948:	ldr	r0, [r5, #8]
   1494c:	bl	118a0 <free@plt>
   14950:	mov	r0, r5
   14954:	pop	{r4, r5, r6, lr}
   14958:	b	118a0 <free@plt>
   1495c:	andeq	sl, r2, r0, asr #6

00014960 <free_node_int@@Base>:
   14960:	push	{r4, r5, r6, lr}
   14964:	mov	r5, r0
   14968:	ldr	r4, [pc, #72]	; 149b8 <free_node_int@@Base+0x58>
   1496c:	ldr	r0, [r0, #4]
   14970:	ldrd	r2, [r4, #-8]
   14974:	adds	r2, r2, #1
   14978:	adc	r3, r3, #0
   1497c:	cmp	r0, #0
   14980:	strd	r2, [r4, #-8]
   14984:	beq	149ac <free_node_int@@Base+0x4c>
   14988:	ldrd	r2, [r4]
   1498c:	adds	r2, r2, #1
   14990:	adc	r3, r3, #0
   14994:	strd	r2, [r4]
   14998:	bl	14690 <free_node@@Base>
   1499c:	ldrd	r2, [r4, #8]
   149a0:	adds	r2, r2, #1
   149a4:	adc	r3, r3, #0
   149a8:	strd	r2, [r4, #8]
   149ac:	mov	r0, r5
   149b0:	pop	{r4, r5, r6, lr}
   149b4:	b	118a0 <free@plt>
   149b8:	andeq	sl, r2, r0, ror #6

000149bc <free_node_id@@Base>:
   149bc:	push	{r4, r5, r6, lr}
   149c0:	mov	r5, r0
   149c4:	ldr	r4, [pc, #72]	; 14a14 <free_node_id@@Base+0x58>
   149c8:	ldr	r0, [r0, #4]
   149cc:	ldrd	r2, [r4]
   149d0:	adds	r2, r2, #1
   149d4:	adc	r3, r3, #0
   149d8:	cmp	r0, #0
   149dc:	strd	r2, [r4]
   149e0:	beq	14a08 <free_node_id@@Base+0x4c>
   149e4:	ldrd	r2, [r4, #8]
   149e8:	adds	r2, r2, #1
   149ec:	adc	r3, r3, #0
   149f0:	strd	r2, [r4, #8]
   149f4:	bl	14690 <free_node@@Base>
   149f8:	ldrd	r2, [r4, #16]
   149fc:	adds	r2, r2, #1
   14a00:	adc	r3, r3, #0
   14a04:	strd	r2, [r4, #16]
   14a08:	mov	r0, r5
   14a0c:	pop	{r4, r5, r6, lr}
   14a10:	b	118a0 <free@plt>
   14a14:	andeq	sl, r2, r0, ror r3

00014a18 <get_boolean_op_value@@Base>:
   14a18:	push	{r4, r5, r6, lr}
   14a1c:	mov	r1, #2
   14a20:	ldr	r4, [pc, #532]	; 14c3c <get_boolean_op_value@@Base+0x224>
   14a24:	ldr	r6, [r0, #4]
   14a28:	ldrd	r2, [r4, #-8]
   14a2c:	mov	r0, r6
   14a30:	adds	r2, r2, #1
   14a34:	adc	r3, r3, #0
   14a38:	strd	r2, [r4, #-8]
   14a3c:	bl	119c0 <strnlen@plt>
   14a40:	cmp	r0, #2
   14a44:	bne	14b78 <get_boolean_op_value@@Base+0x160>
   14a48:	ldrd	r2, [r4]
   14a4c:	mov	r5, r0
   14a50:	ldr	r1, [pc, #488]	; 14c40 <get_boolean_op_value@@Base+0x228>
   14a54:	adds	r2, r2, #1
   14a58:	adc	r3, r3, #0
   14a5c:	strd	r2, [r4]
   14a60:	mov	r2, r0
   14a64:	mov	r0, r6
   14a68:	bl	119fc <strncmp@plt>
   14a6c:	cmp	r0, #0
   14a70:	popeq	{r4, r5, r6, pc}
   14a74:	ldrd	r2, [r4, #16]
   14a78:	ldr	r1, [pc, #452]	; 14c44 <get_boolean_op_value@@Base+0x22c>
   14a7c:	mov	r0, r6
   14a80:	adds	r2, r2, #1
   14a84:	adc	r3, r3, #0
   14a88:	strd	r2, [r4, #16]
   14a8c:	mov	r2, r5
   14a90:	bl	119fc <strncmp@plt>
   14a94:	cmp	r0, #0
   14a98:	beq	14c14 <get_boolean_op_value@@Base+0x1fc>
   14a9c:	ldrd	r2, [r4, #24]
   14aa0:	ldr	r1, [pc, #416]	; 14c48 <get_boolean_op_value@@Base+0x230>
   14aa4:	mov	r0, r6
   14aa8:	adds	r2, r2, #1
   14aac:	adc	r3, r3, #0
   14ab0:	strd	r2, [r4, #24]
   14ab4:	mov	r2, r5
   14ab8:	bl	119fc <strncmp@plt>
   14abc:	cmp	r0, #0
   14ac0:	beq	14c1c <get_boolean_op_value@@Base+0x204>
   14ac4:	ldrd	r2, [r4, #32]
   14ac8:	ldr	r1, [pc, #380]	; 14c4c <get_boolean_op_value@@Base+0x234>
   14acc:	mov	r0, r6
   14ad0:	adds	r2, r2, #1
   14ad4:	adc	r3, r3, #0
   14ad8:	strd	r2, [r4, #32]
   14adc:	mov	r2, r5
   14ae0:	bl	119fc <strncmp@plt>
   14ae4:	cmp	r0, #0
   14ae8:	beq	14c24 <get_boolean_op_value@@Base+0x20c>
   14aec:	ldrd	r2, [r4, #40]	; 0x28
   14af0:	ldr	r1, [pc, #344]	; 14c50 <get_boolean_op_value@@Base+0x238>
   14af4:	mov	r0, r6
   14af8:	adds	r2, r2, #1
   14afc:	adc	r3, r3, #0
   14b00:	strd	r2, [r4, #40]	; 0x28
   14b04:	mov	r2, r5
   14b08:	bl	119fc <strncmp@plt>
   14b0c:	cmp	r0, #0
   14b10:	beq	14c2c <get_boolean_op_value@@Base+0x214>
   14b14:	ldrd	r2, [r4, #48]	; 0x30
   14b18:	ldr	r1, [pc, #308]	; 14c54 <get_boolean_op_value@@Base+0x23c>
   14b1c:	mov	r0, r6
   14b20:	adds	r2, r2, #1
   14b24:	adc	r3, r3, #0
   14b28:	strd	r2, [r4, #48]	; 0x30
   14b2c:	mov	r2, r5
   14b30:	bl	119fc <strncmp@plt>
   14b34:	cmp	r0, #0
   14b38:	beq	14c34 <get_boolean_op_value@@Base+0x21c>
   14b3c:	ldrd	r2, [r4, #56]	; 0x38
   14b40:	ldr	r1, [pc, #272]	; 14c58 <get_boolean_op_value@@Base+0x240>
   14b44:	adds	r2, r2, #1
   14b48:	adc	r3, r3, #0
   14b4c:	strd	r2, [r4, #56]	; 0x38
   14b50:	ldr	r3, [pc, #260]	; 14c5c <get_boolean_op_value@@Base+0x244>
   14b54:	mov	r2, r6
   14b58:	ldr	r0, [r3]
   14b5c:	bl	11960 <fprintf@plt>
   14b60:	ldrd	r2, [r4, #64]	; 0x40
   14b64:	adds	r2, r2, #1
   14b68:	adc	r3, r3, #0
   14b6c:	strd	r2, [r4, #64]	; 0x40
   14b70:	mov	r0, #1
   14b74:	bl	11948 <exit@plt>
   14b78:	ldrd	r2, [r4, #8]
   14b7c:	adds	r2, r2, #1
   14b80:	adc	r3, r3, #0
   14b84:	strd	r2, [r4, #8]
   14b88:	ldrb	r3, [r6]
   14b8c:	cmp	r3, #60	; 0x3c
   14b90:	beq	14bac <get_boolean_op_value@@Base+0x194>
   14b94:	cmp	r3, #62	; 0x3e
   14b98:	beq	14bc4 <get_boolean_op_value@@Base+0x1ac>
   14b9c:	cmp	r3, #33	; 0x21
   14ba0:	bne	14bdc <get_boolean_op_value@@Base+0x1c4>
   14ba4:	mov	r0, #8
   14ba8:	pop	{r4, r5, r6, pc}
   14bac:	ldrd	r2, [r4, #80]	; 0x50
   14bb0:	mov	r0, #6
   14bb4:	adds	r2, r2, #1
   14bb8:	adc	r3, r3, #0
   14bbc:	strd	r2, [r4, #80]	; 0x50
   14bc0:	pop	{r4, r5, r6, pc}
   14bc4:	ldrd	r2, [r4, #88]	; 0x58
   14bc8:	mov	r0, #7
   14bcc:	adds	r2, r2, #1
   14bd0:	adc	r3, r3, #0
   14bd4:	strd	r2, [r4, #88]	; 0x58
   14bd8:	pop	{r4, r5, r6, pc}
   14bdc:	ldrd	r2, [r4, #72]	; 0x48
   14be0:	ldr	r1, [pc, #112]	; 14c58 <get_boolean_op_value@@Base+0x240>
   14be4:	adds	r2, r2, #1
   14be8:	adc	r3, r3, #0
   14bec:	strd	r2, [r4, #72]	; 0x48
   14bf0:	ldr	r3, [pc, #100]	; 14c5c <get_boolean_op_value@@Base+0x244>
   14bf4:	mov	r2, r6
   14bf8:	ldr	r0, [r3]
   14bfc:	bl	11960 <fprintf@plt>
   14c00:	ldrd	r2, [r4, #96]	; 0x60
   14c04:	adds	r2, r2, #1
   14c08:	adc	r3, r3, #0
   14c0c:	strd	r2, [r4, #96]	; 0x60
   14c10:	b	14b70 <get_boolean_op_value@@Base+0x158>
   14c14:	mov	r0, #1
   14c18:	pop	{r4, r5, r6, pc}
   14c1c:	mov	r0, r5
   14c20:	pop	{r4, r5, r6, pc}
   14c24:	mov	r0, #3
   14c28:	pop	{r4, r5, r6, pc}
   14c2c:	mov	r0, #4
   14c30:	pop	{r4, r5, r6, pc}
   14c34:	mov	r0, #5
   14c38:	pop	{r4, r5, r6, pc}
   14c3c:	muleq	r2, r0, r3
   14c40:	andeq	r8, r1, sp, asr #4
   14c44:	andeq	r8, r1, r0, asr r2
   14c48:	andeq	r8, r1, r3, asr r2
   14c4c:	andeq	r8, r1, r6, asr r2
   14c50:	andeq	r8, r1, r9, asr r2
   14c54:	andeq	r8, r1, ip, asr r2
   14c58:	andeq	r8, r1, pc, asr r2
   14c5c:	andeq	r9, r2, r8, lsl #19

00014c60 <init_grammar@@Base>:
   14c60:	ldr	ip, [pc, #20]	; 14c7c <init_grammar@@Base+0x1c>
   14c64:	str	r1, [r0]
   14c68:	ldrd	r2, [ip]
   14c6c:	adds	r2, r2, #1
   14c70:	adc	r3, r3, #0
   14c74:	strd	r2, [ip]
   14c78:	bx	lr
   14c7c:	strdeq	sl, [r2], -r8

00014c80 <destroy_grammar@@Base>:
   14c80:	ldr	r1, [pc, #16]	; 14c98 <destroy_grammar@@Base+0x18>
   14c84:	ldrd	r2, [r1, #8]
   14c88:	adds	r2, r2, #1
   14c8c:	adc	r3, r3, #0
   14c90:	strd	r2, [r1, #8]
   14c94:	bx	lr
   14c98:	strdeq	sl, [r2], -r8

00014c9c <read_return_expression@@Base>:
   14c9c:	push	{r4, r5, r6, r7, r8, lr}
   14ca0:	mov	r6, r0
   14ca4:	ldr	r4, [pc, #252]	; 14da8 <read_return_expression@@Base+0x10c>
   14ca8:	ldr	r0, [r0]
   14cac:	ldrd	r2, [r4, #16]
   14cb0:	adds	r2, r2, #1
   14cb4:	adc	r3, r3, #0
   14cb8:	strd	r2, [r4, #16]
   14cbc:	bl	12198 <next@@Base>
   14cc0:	ldrd	r2, [r4, #24]
   14cc4:	adds	r2, r2, #1
   14cc8:	adc	r3, r3, #0
   14ccc:	strd	r2, [r4, #24]
   14cd0:	ldr	r3, [r0]
   14cd4:	cmp	r3, #1
   14cd8:	beq	14ce8 <read_return_expression@@Base+0x4c>
   14cdc:	mov	r5, #0
   14ce0:	mov	r0, r5
   14ce4:	pop	{r4, r5, r6, r7, r8, pc}
   14ce8:	ldrd	r2, [r4, #32]
   14cec:	mov	r5, r0
   14cf0:	mov	r0, #12
   14cf4:	adds	r2, r2, #1
   14cf8:	adc	r3, r3, #0
   14cfc:	strd	r2, [r4, #32]
   14d00:	bl	11900 <malloc@plt>
   14d04:	ldr	r1, [r5, #4]
   14d08:	mov	r7, r0
   14d0c:	bl	14500 <init_node_int@@Base>
   14d10:	ldrd	r2, [r4, #40]	; 0x28
   14d14:	mov	r0, r5
   14d18:	adds	r2, r2, #1
   14d1c:	adc	r3, r3, #0
   14d20:	strd	r2, [r4, #40]	; 0x28
   14d24:	bl	14308 <free_token_int_value@@Base>
   14d28:	ldrd	r2, [r4, #48]	; 0x30
   14d2c:	mov	r0, #12
   14d30:	adds	r2, r2, #1
   14d34:	adc	r3, r3, #0
   14d38:	strd	r2, [r4, #48]	; 0x30
   14d3c:	bl	11900 <malloc@plt>
   14d40:	mov	r1, r7
   14d44:	mov	r5, r0
   14d48:	bl	14560 <init_node_return@@Base>
   14d4c:	ldrd	r2, [r4, #56]	; 0x38
   14d50:	ldr	r0, [r6]
   14d54:	adds	r2, r2, #1
   14d58:	adc	r3, r3, #0
   14d5c:	strd	r2, [r4, #56]	; 0x38
   14d60:	bl	12198 <next@@Base>
   14d64:	ldrd	r2, [r4, #64]	; 0x40
   14d68:	adds	r2, r2, #1
   14d6c:	adc	r3, r3, #0
   14d70:	strd	r2, [r4, #64]	; 0x40
   14d74:	ldr	r3, [r0]
   14d78:	cmp	r3, #8
   14d7c:	bne	14cdc <read_return_expression@@Base+0x40>
   14d80:	ldrd	r2, [r4, #72]	; 0x48
   14d84:	adds	r2, r2, #1
   14d88:	adc	r3, r3, #0
   14d8c:	strd	r2, [r4, #72]	; 0x48
   14d90:	bl	143cc <free_token_semicolon@@Base>
   14d94:	ldrd	r2, [r4, #80]	; 0x50
   14d98:	adds	r2, r2, #1
   14d9c:	adc	r3, r3, #0
   14da0:	strd	r2, [r4, #80]	; 0x50
   14da4:	b	14ce0 <read_return_expression@@Base+0x44>
   14da8:	strdeq	sl, [r2], -r8

00014dac <read_boolean_unary_expression@@Base>:
   14dac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14db0:	mov	r6, r0
   14db4:	ldr	r4, [pc, #348]	; 14f18 <read_boolean_unary_expression@@Base+0x16c>
   14db8:	mov	r0, #20
   14dbc:	ldrd	r2, [r4, #88]	; 0x58
   14dc0:	adds	r2, r2, #1
   14dc4:	adc	r3, r3, #0
   14dc8:	strd	r2, [r4, #88]	; 0x58
   14dcc:	bl	11900 <malloc@plt>
   14dd0:	mov	r5, r0
   14dd4:	ldr	r0, [r6]
   14dd8:	bl	12198 <next@@Base>
   14ddc:	ldr	r8, [r0]
   14de0:	cmp	r8, #12
   14de4:	beq	14e1c <read_boolean_unary_expression@@Base+0x70>
   14de8:	ldrd	r2, [r4, #96]	; 0x60
   14dec:	mov	r0, r5
   14df0:	adds	r2, r2, #1
   14df4:	adc	r3, r3, #0
   14df8:	strd	r2, [r4, #96]	; 0x60
   14dfc:	bl	14604 <free_node_boolean_operator@@Base>
   14e00:	ldrd	r2, [r4, #112]	; 0x70
   14e04:	adds	r2, r2, #1
   14e08:	adc	r3, r3, #0
   14e0c:	strd	r2, [r4, #112]	; 0x70
   14e10:	mov	r5, #0
   14e14:	mov	r0, r5
   14e18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14e1c:	ldrd	r2, [r4, #104]	; 0x68
   14e20:	mov	r9, r0
   14e24:	adds	r2, r2, #1
   14e28:	adc	r3, r3, #0
   14e2c:	strd	r2, [r4, #104]	; 0x68
   14e30:	bl	14a18 <get_boolean_op_value@@Base>
   14e34:	ldrd	r2, [r4, #120]	; 0x78
   14e38:	adds	r2, r2, #1
   14e3c:	adc	r3, r3, #0
   14e40:	strd	r2, [r4, #120]	; 0x78
   14e44:	mov	r7, r0
   14e48:	mov	r0, r9
   14e4c:	bl	1443c <free_token_boolean_op@@Base>
   14e50:	ldrd	r2, [r4, #128]	; 0x80
   14e54:	ldr	r0, [r6]
   14e58:	adds	r2, r2, #1
   14e5c:	adc	r3, r3, #0
   14e60:	strd	r2, [r4, #128]	; 0x80
   14e64:	bl	12198 <next@@Base>
   14e68:	ldr	r3, [r0]
   14e6c:	mov	r6, r0
   14e70:	cmp	r3, #1
   14e74:	beq	14ea4 <read_boolean_unary_expression@@Base+0xf8>
   14e78:	ldrd	r2, [r4, #136]	; 0x88
   14e7c:	mov	r0, r5
   14e80:	adds	r2, r2, #1
   14e84:	adc	r3, r3, #0
   14e88:	strd	r2, [r4, #136]	; 0x88
   14e8c:	bl	14604 <free_node_boolean_operator@@Base>
   14e90:	ldrd	r2, [r4, #152]	; 0x98
   14e94:	adds	r2, r2, #1
   14e98:	adc	r3, r3, #0
   14e9c:	strd	r2, [r4, #152]	; 0x98
   14ea0:	b	14e10 <read_boolean_unary_expression@@Base+0x64>
   14ea4:	ldrd	r2, [r4, #144]	; 0x90
   14ea8:	mov	r0, r8
   14eac:	adds	r2, r2, #1
   14eb0:	adc	r3, r3, #0
   14eb4:	strd	r2, [r4, #144]	; 0x90
   14eb8:	bl	11900 <malloc@plt>
   14ebc:	ldr	r1, [r6, #4]
   14ec0:	mov	r8, r0
   14ec4:	bl	14500 <init_node_int@@Base>
   14ec8:	ldrd	r2, [r4, #160]	; 0xa0
   14ecc:	mov	r0, r6
   14ed0:	adds	r2, r2, #1
   14ed4:	adc	r3, r3, #0
   14ed8:	strd	r2, [r4, #160]	; 0xa0
   14edc:	bl	14308 <free_token_int_value@@Base>
   14ee0:	ldrd	r0, [r4, #168]	; 0xa8
   14ee4:	mov	r3, #0
   14ee8:	mov	r2, r8
   14eec:	adds	r0, r0, #1
   14ef0:	adc	r1, r1, #0
   14ef4:	strd	r0, [r4, #168]	; 0xa8
   14ef8:	mov	r1, r7
   14efc:	mov	r0, r5
   14f00:	bl	145c8 <init_node_boolean_operator@@Base>
   14f04:	ldrd	r2, [r4, #176]	; 0xb0
   14f08:	adds	r2, r2, #1
   14f0c:	adc	r3, r3, #0
   14f10:	strd	r2, [r4, #176]	; 0xb0
   14f14:	b	14e14 <read_boolean_unary_expression@@Base+0x68>
   14f18:	strdeq	sl, [r2], -r8

00014f1c <read_boolean_binary_expression@@Base>:
   14f1c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14f20:	mov	r5, r0
   14f24:	ldr	r4, [pc, #568]	; 15164 <read_boolean_binary_expression@@Base+0x248>
   14f28:	ldr	r0, [r0]
   14f2c:	ldrd	r2, [r4, #184]	; 0xb8
   14f30:	adds	r2, r2, #1
   14f34:	adc	r3, r3, #0
   14f38:	strd	r2, [r4, #184]	; 0xb8
   14f3c:	bl	12198 <next@@Base>
   14f40:	ldr	r1, [r0]
   14f44:	mov	r6, r0
   14f48:	cmp	r1, #1
   14f4c:	beq	14fb8 <read_boolean_binary_expression@@Base+0x9c>
   14f50:	ldrd	r2, [r4, #192]	; 0xc0
   14f54:	adds	r2, r2, #1
   14f58:	adc	r3, r3, #0
   14f5c:	cmp	r1, #12
   14f60:	strd	r2, [r4, #192]	; 0xc0
   14f64:	bne	15048 <read_boolean_binary_expression@@Base+0x12c>
   14f68:	ldrd	r2, [r4, #208]	; 0xd0
   14f6c:	mov	r1, r0
   14f70:	ldr	r0, [r5]
   14f74:	adds	r2, r2, #1
   14f78:	adc	r3, r3, #0
   14f7c:	strd	r2, [r4, #208]	; 0xd0
   14f80:	bl	122cc <push_back@@Base>
   14f84:	ldrd	r2, [r4, #216]	; 0xd8
   14f88:	mov	r0, r5
   14f8c:	adds	r2, r2, #1
   14f90:	adc	r3, r3, #0
   14f94:	strd	r2, [r4, #216]	; 0xd8
   14f98:	bl	14dac <read_boolean_unary_expression@@Base>
   14f9c:	ldrd	r2, [r4, #224]	; 0xe0
   14fa0:	adds	r2, r2, #1
   14fa4:	adc	r3, r3, #0
   14fa8:	strd	r2, [r4, #224]	; 0xe0
   14fac:	mov	r5, r0
   14fb0:	mov	r0, r5
   14fb4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14fb8:	ldrd	r2, [r4, #200]	; 0xc8
   14fbc:	mov	r0, #12
   14fc0:	adds	r2, r2, #1
   14fc4:	adc	r3, r3, #0
   14fc8:	strd	r2, [r4, #200]	; 0xc8
   14fcc:	bl	11900 <malloc@plt>
   14fd0:	ldr	r1, [r6, #4]
   14fd4:	mov	r7, r0
   14fd8:	bl	14500 <init_node_int@@Base>
   14fdc:	ldrd	r2, [r4, #232]	; 0xe8
   14fe0:	mov	r0, r6
   14fe4:	add	r6, r4, #272	; 0x110
   14fe8:	adds	r2, r2, #1
   14fec:	adc	r3, r3, #0
   14ff0:	strd	r2, [r4, #232]	; 0xe8
   14ff4:	bl	14308 <free_token_int_value@@Base>
   14ff8:	ldrd	r2, [r4, #240]	; 0xf0
   14ffc:	ldr	r0, [r5]
   15000:	adds	r2, r2, #1
   15004:	adc	r3, r3, #0
   15008:	strd	r2, [r4, #240]	; 0xf0
   1500c:	bl	12198 <next@@Base>
   15010:	ldr	sl, [r0]
   15014:	mov	r9, r0
   15018:	cmp	sl, #12
   1501c:	beq	15050 <read_boolean_binary_expression@@Base+0x134>
   15020:	ldrd	r2, [r4, #248]	; 0xf8
   15024:	mov	r0, r7
   15028:	adds	r2, r2, #1
   1502c:	adc	r3, r3, #0
   15030:	strd	r2, [r4, #248]	; 0xf8
   15034:	bl	14690 <free_node@@Base>
   15038:	ldrd	r2, [r6, #-8]
   1503c:	adds	r2, r2, #1
   15040:	adc	r3, r3, #0
   15044:	strd	r2, [r6, #-8]
   15048:	mov	r5, #0
   1504c:	b	14fb0 <read_boolean_binary_expression@@Base+0x94>
   15050:	add	r1, r4, #256	; 0x100
   15054:	ldrd	r2, [r1]
   15058:	adds	r2, r2, #1
   1505c:	adc	r3, r3, #0
   15060:	strd	r2, [r1]
   15064:	bl	14a18 <get_boolean_op_value@@Base>
   15068:	ldrd	r2, [r6]
   1506c:	adds	r2, r2, #1
   15070:	adc	r3, r3, #0
   15074:	strd	r2, [r6]
   15078:	add	r6, r4, #288	; 0x120
   1507c:	mov	r8, r0
   15080:	mov	r0, r9
   15084:	bl	1443c <free_token_boolean_op@@Base>
   15088:	ldrd	r2, [r6, #-8]
   1508c:	ldr	r0, [r5]
   15090:	add	r5, r4, #304	; 0x130
   15094:	adds	r2, r2, #1
   15098:	adc	r3, r3, #0
   1509c:	strd	r2, [r6, #-8]
   150a0:	bl	12198 <next@@Base>
   150a4:	ldr	r3, [r0]
   150a8:	mov	r9, r0
   150ac:	cmp	r3, #1
   150b0:	beq	150e0 <read_boolean_binary_expression@@Base+0x1c4>
   150b4:	ldrd	r2, [r6]
   150b8:	mov	r0, r7
   150bc:	adds	r2, r2, #1
   150c0:	adc	r3, r3, #0
   150c4:	strd	r2, [r6]
   150c8:	bl	14690 <free_node@@Base>
   150cc:	ldrd	r2, [r5]
   150d0:	adds	r2, r2, #1
   150d4:	adc	r3, r3, #0
   150d8:	strd	r2, [r5]
   150dc:	b	15048 <read_boolean_binary_expression@@Base+0x12c>
   150e0:	ldrd	r2, [r5, #-8]
   150e4:	mov	r0, sl
   150e8:	adds	r2, r2, #1
   150ec:	adc	r3, r3, #0
   150f0:	strd	r2, [r5, #-8]
   150f4:	bl	11900 <malloc@plt>
   150f8:	add	r5, r4, #320	; 0x140
   150fc:	ldr	r1, [r9, #4]
   15100:	add	r4, r4, #336	; 0x150
   15104:	mov	r6, r0
   15108:	bl	14500 <init_node_int@@Base>
   1510c:	ldrd	r2, [r5, #-8]
   15110:	mov	r0, r9
   15114:	adds	r2, r2, #1
   15118:	adc	r3, r3, #0
   1511c:	strd	r2, [r5, #-8]
   15120:	bl	14308 <free_token_int_value@@Base>
   15124:	ldrd	r2, [r5]
   15128:	mov	r0, #20
   1512c:	adds	r2, r2, #1
   15130:	adc	r3, r3, #0
   15134:	strd	r2, [r5]
   15138:	bl	11900 <malloc@plt>
   1513c:	mov	r3, r6
   15140:	mov	r2, r7
   15144:	mov	r1, r8
   15148:	mov	r5, r0
   1514c:	bl	145c8 <init_node_boolean_operator@@Base>
   15150:	ldrd	r2, [r4, #-8]
   15154:	adds	r2, r2, #1
   15158:	adc	r3, r3, #0
   1515c:	strd	r2, [r4, #-8]
   15160:	b	14fb0 <read_boolean_binary_expression@@Base+0x94>
   15164:	strdeq	sl, [r2], -r8

00015168 <read_single_boolean_expression@@Base>:
   15168:	cmp	r1, #0
   1516c:	push	{r4, r5, r6, r7, r8, lr}
   15170:	ldr	r4, [pc, #188]	; 15234 <read_single_boolean_expression@@Base+0xcc>
   15174:	bne	151a8 <read_single_boolean_expression@@Base+0x40>
   15178:	ldrd	r2, [r4]
   1517c:	adds	r2, r2, #1
   15180:	adc	r3, r3, #0
   15184:	strd	r2, [r4]
   15188:	bl	14f1c <read_boolean_binary_expression@@Base>
   1518c:	ldrd	r2, [r4, #8]
   15190:	adds	r2, r2, #1
   15194:	adc	r3, r3, #0
   15198:	strd	r2, [r4, #8]
   1519c:	mov	r7, r0
   151a0:	mov	r0, r7
   151a4:	pop	{r4, r5, r6, r7, r8, pc}
   151a8:	ldr	r1, [r2]
   151ac:	mov	r5, r2
   151b0:	cmp	r1, #0
   151b4:	beq	1521c <read_single_boolean_expression@@Base+0xb4>
   151b8:	mov	r6, r3
   151bc:	ldrd	r2, [r4, #16]
   151c0:	adds	r2, r2, #1
   151c4:	adc	r3, r3, #0
   151c8:	strd	r2, [r4, #16]
   151cc:	bl	14f1c <read_boolean_binary_expression@@Base>
   151d0:	ldrd	r2, [r4, #32]
   151d4:	adds	r2, r2, #1
   151d8:	adc	r3, r3, #0
   151dc:	strd	r2, [r4, #32]
   151e0:	mov	r8, r0
   151e4:	mov	r0, #20
   151e8:	bl	11900 <malloc@plt>
   151ec:	mov	r3, r8
   151f0:	mov	r2, #0
   151f4:	mov	r1, r6
   151f8:	mov	r7, r0
   151fc:	bl	145c8 <init_node_boolean_operator@@Base>
   15200:	mov	r3, #0
   15204:	str	r3, [r5]
   15208:	ldrd	r2, [r4, #40]	; 0x28
   1520c:	adds	r2, r2, #1
   15210:	adc	r3, r3, #0
   15214:	strd	r2, [r4, #40]	; 0x28
   15218:	b	151a0 <read_single_boolean_expression@@Base+0x38>
   1521c:	ldrd	r2, [r4, #24]
   15220:	adds	r2, r2, #1
   15224:	adc	r3, r3, #0
   15228:	strd	r2, [r4, #24]
   1522c:	ldr	r3, [r1, #4]
   15230:	udf	#0
   15234:	andeq	sl, r2, r8, asr #10

00015238 <read_boolean_expression@@Base>:
   15238:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1523c:	add	r7, sp, #8
   15240:	ldr	r4, [pc, #396]	; 153d4 <read_boolean_expression@@Base+0x19c>
   15244:	mov	r6, r0
   15248:	mov	r5, #0
   1524c:	ldrd	r2, [r4, #-8]
   15250:	ldr	r0, [r0]
   15254:	str	r5, [r7, #-4]!
   15258:	adds	r2, r2, #1
   1525c:	adc	r3, r3, #0
   15260:	mov	r8, #1
   15264:	strd	r2, [r4, #-8]
   15268:	bl	12198 <next@@Base>
   1526c:	ldrd	r2, [r4]
   15270:	adds	r2, r2, #1
   15274:	adc	r3, r3, #0
   15278:	strd	r2, [r4]
   1527c:	ldr	r1, [r0]
   15280:	cmp	r1, #4
   15284:	bne	152b8 <read_boolean_expression@@Base+0x80>
   15288:	ldrd	r2, [r4, #80]	; 0x50
   1528c:	adds	r2, r2, #1
   15290:	adc	r3, r3, #0
   15294:	strd	r2, [r4, #80]	; 0x50
   15298:	bl	1435c <free_token_cpar@@Base>
   1529c:	ldrd	r2, [r4, #88]	; 0x58
   152a0:	mov	r0, r5
   152a4:	adds	r2, r2, #1
   152a8:	adc	r3, r3, #0
   152ac:	strd	r2, [r4, #88]	; 0x58
   152b0:	add	sp, sp, #12
   152b4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   152b8:	ldrd	r2, [r4, #72]	; 0x48
   152bc:	adds	r2, r2, #1
   152c0:	adc	r3, r3, #0
   152c4:	cmp	r1, #3
   152c8:	strd	r2, [r4, #72]	; 0x48
   152cc:	beq	15370 <read_boolean_expression@@Base+0x138>
   152d0:	cmp	r1, #12
   152d4:	beq	15340 <read_boolean_expression@@Base+0x108>
   152d8:	cmp	r1, #1
   152dc:	bne	153ac <read_boolean_expression@@Base+0x174>
   152e0:	ldrd	r2, [r4, #8]
   152e4:	mov	r1, r0
   152e8:	ldr	r0, [r6]
   152ec:	adds	r2, r2, #1
   152f0:	adc	r3, r3, #0
   152f4:	strd	r2, [r4, #8]
   152f8:	bl	122cc <push_back@@Base>
   152fc:	ldrd	r2, [r4, #32]
   15300:	mov	r1, r5
   15304:	mov	r0, r6
   15308:	adds	r2, r2, #1
   1530c:	adc	r3, r3, #0
   15310:	strd	r2, [r4, #32]
   15314:	mov	r3, r9
   15318:	mov	r2, r7
   1531c:	bl	15168 <read_single_boolean_expression@@Base>
   15320:	ldrd	r2, [r4, #64]	; 0x40
   15324:	adds	r2, r2, #1
   15328:	adc	r3, r3, #0
   1532c:	strd	r2, [r4, #64]	; 0x40
   15330:	mov	r5, r0
   15334:	ldr	r0, [r6]
   15338:	bl	12198 <next@@Base>
   1533c:	b	1527c <read_boolean_expression@@Base+0x44>
   15340:	ldrd	r2, [r4, #24]
   15344:	adds	r2, r2, #1
   15348:	adc	r3, r3, #0
   1534c:	strd	r2, [r4, #24]
   15350:	bl	14a18 <get_boolean_op_value@@Base>
   15354:	ldrd	r2, [r4, #40]	; 0x28
   15358:	str	r8, [sp, #4]
   1535c:	adds	r2, r2, #1
   15360:	adc	r3, r3, #0
   15364:	strd	r2, [r4, #40]	; 0x28
   15368:	mov	r9, r0
   1536c:	b	15334 <read_boolean_expression@@Base+0xfc>
   15370:	ldrd	r2, [r4, #16]
   15374:	mov	r1, r5
   15378:	mov	r0, r6
   1537c:	adds	r2, r2, #1
   15380:	adc	r3, r3, #0
   15384:	strd	r2, [r4, #16]
   15388:	mov	r3, r9
   1538c:	mov	r2, r7
   15390:	bl	15168 <read_single_boolean_expression@@Base>
   15394:	ldrd	r2, [r4, #48]	; 0x30
   15398:	adds	r2, r2, #1
   1539c:	adc	r3, r3, #0
   153a0:	strd	r2, [r4, #48]	; 0x30
   153a4:	mov	r5, r0
   153a8:	b	15334 <read_boolean_expression@@Base+0xfc>
   153ac:	ldr	r3, [pc, #36]	; 153d8 <read_boolean_expression@@Base+0x1a0>
   153b0:	ldr	r0, [pc, #36]	; 153dc <read_boolean_expression@@Base+0x1a4>
   153b4:	ldr	r1, [r3]
   153b8:	bl	119f0 <fputs@plt>
   153bc:	ldrd	r2, [r4, #56]	; 0x38
   153c0:	mov	r0, #1
   153c4:	adds	r2, r2, #1
   153c8:	adc	r3, r3, #0
   153cc:	strd	r2, [r4, #56]	; 0x38
   153d0:	bl	11948 <exit@plt>
   153d4:	andeq	sl, r2, r8, lsl #11
   153d8:	andeq	r9, r2, r8, lsl #19
   153dc:	andeq	r8, r1, sp, ror #5

000153e0 <read_if_statement@@Base>:
   153e0:	push	{r4, r5, r6, r7, r8, lr}
   153e4:	mov	r5, r0
   153e8:	ldr	r4, [pc, #332]	; 1553c <read_if_statement@@Base+0x15c>
   153ec:	ldr	r0, [r0]
   153f0:	ldrd	r2, [r4]
   153f4:	adds	r2, r2, #1
   153f8:	adc	r3, r3, #0
   153fc:	strd	r2, [r4]
   15400:	bl	12198 <next@@Base>
   15404:	ldrd	r2, [r4, #8]
   15408:	adds	r2, r2, #1
   1540c:	adc	r3, r3, #0
   15410:	strd	r2, [r4, #8]
   15414:	ldr	r3, [r0]
   15418:	cmp	r3, #3
   1541c:	movne	r5, #0
   15420:	bne	15504 <read_if_statement@@Base+0x124>
   15424:	ldrd	r2, [r4, #16]
   15428:	adds	r2, r2, #1
   1542c:	adc	r3, r3, #0
   15430:	strd	r2, [r4, #16]
   15434:	bl	14340 <free_token_opar@@Base>
   15438:	ldrd	r2, [r4, #24]
   1543c:	mov	r0, r5
   15440:	adds	r2, r2, #1
   15444:	adc	r3, r3, #0
   15448:	strd	r2, [r4, #24]
   1544c:	bl	15238 <read_boolean_expression@@Base>
   15450:	ldrd	r2, [r4, #32]
   15454:	adds	r2, r2, #1
   15458:	adc	r3, r3, #0
   1545c:	strd	r2, [r4, #32]
   15460:	mov	r6, r0
   15464:	mov	r0, r5
   15468:	bl	15540 <read_body@@Base>
   1546c:	ldrd	r2, [r4, #40]	; 0x28
   15470:	adds	r2, r2, #1
   15474:	adc	r3, r3, #0
   15478:	strd	r2, [r4, #40]	; 0x28
   1547c:	mov	r7, r0
   15480:	ldr	r0, [r5]
   15484:	bl	12198 <next@@Base>
   15488:	ldr	r3, [r0]
   1548c:	mov	r1, r0
   15490:	cmp	r3, #11
   15494:	bne	1550c <read_if_statement@@Base+0x12c>
   15498:	ldrd	r2, [r4, #48]	; 0x30
   1549c:	adds	r2, r2, #1
   154a0:	adc	r3, r3, #0
   154a4:	strd	r2, [r4, #48]	; 0x30
   154a8:	bl	14420 <free_token_else@@Base>
   154ac:	ldrd	r2, [r4, #64]	; 0x40
   154b0:	mov	r0, r5
   154b4:	adds	r2, r2, #1
   154b8:	adc	r3, r3, #0
   154bc:	strd	r2, [r4, #64]	; 0x40
   154c0:	bl	15540 <read_body@@Base>
   154c4:	ldrd	r2, [r4, #72]	; 0x48
   154c8:	adds	r2, r2, #1
   154cc:	adc	r3, r3, #0
   154d0:	strd	r2, [r4, #72]	; 0x48
   154d4:	mov	r8, r0
   154d8:	mov	r0, #20
   154dc:	bl	11900 <malloc@plt>
   154e0:	mov	r3, r8
   154e4:	mov	r2, r7
   154e8:	mov	r1, r6
   154ec:	mov	r5, r0
   154f0:	bl	1458c <init_node_if@@Base>
   154f4:	ldrd	r2, [r4, #88]	; 0x58
   154f8:	adds	r2, r2, #1
   154fc:	adc	r3, r3, #0
   15500:	strd	r2, [r4, #88]	; 0x58
   15504:	mov	r0, r5
   15508:	pop	{r4, r5, r6, r7, r8, pc}
   1550c:	ldrd	r2, [r4, #56]	; 0x38
   15510:	ldr	r0, [r5]
   15514:	mov	r8, #0
   15518:	adds	r2, r2, #1
   1551c:	adc	r3, r3, #0
   15520:	strd	r2, [r4, #56]	; 0x38
   15524:	bl	122cc <push_back@@Base>
   15528:	ldrd	r2, [r4, #80]	; 0x50
   1552c:	adds	r2, r2, #1
   15530:	adc	r3, r3, #0
   15534:	strd	r2, [r4, #80]	; 0x50
   15538:	b	154d8 <read_if_statement@@Base+0xf8>
   1553c:	andeq	sl, r2, r8, ror #11

00015540 <read_body@@Base>:
   15540:	push	{r4, r5, r6, r7, r8, lr}
   15544:	mov	r5, r0
   15548:	ldr	r4, [pc, #420]	; 156f4 <read_body@@Base+0x1b4>
   1554c:	ldr	r0, [r0]
   15550:	ldrd	r2, [r4]
   15554:	adds	r2, r2, #1
   15558:	adc	r3, r3, #0
   1555c:	strd	r2, [r4]
   15560:	bl	12198 <next@@Base>
   15564:	ldrd	r2, [r4, #8]
   15568:	adds	r2, r2, #1
   1556c:	adc	r3, r3, #0
   15570:	strd	r2, [r4, #8]
   15574:	ldr	r3, [r0]
   15578:	cmp	r3, #5
   1557c:	movne	r6, #0
   15580:	bne	15638 <read_body@@Base+0xf8>
   15584:	ldrd	r2, [r4, #16]
   15588:	mov	r7, #0
   1558c:	mov	r6, r7
   15590:	adds	r2, r2, #1
   15594:	adc	r3, r3, #0
   15598:	strd	r2, [r4, #16]
   1559c:	bl	14378 <free_token_obra@@Base>
   155a0:	ldrd	r2, [r4, #24]
   155a4:	ldr	r0, [r5]
   155a8:	adds	r2, r2, #1
   155ac:	adc	r3, r3, #0
   155b0:	strd	r2, [r4, #24]
   155b4:	bl	12198 <next@@Base>
   155b8:	ldrd	r2, [r4, #32]
   155bc:	adds	r2, r2, #1
   155c0:	adc	r3, r3, #0
   155c4:	strd	r2, [r4, #32]
   155c8:	ldr	r1, [r0]
   155cc:	cmp	r1, #6
   155d0:	bne	155fc <read_body@@Base+0xbc>
   155d4:	ldrd	r2, [r4, #112]	; 0x70
   155d8:	adds	r2, r2, #1
   155dc:	adc	r3, r3, #0
   155e0:	strd	r2, [r4, #112]	; 0x70
   155e4:	bl	14394 <free_token_cbra@@Base>
   155e8:	ldrd	r2, [r4, #120]	; 0x78
   155ec:	adds	r2, r2, #1
   155f0:	adc	r3, r3, #0
   155f4:	strd	r2, [r4, #120]	; 0x78
   155f8:	b	15638 <read_body@@Base+0xf8>
   155fc:	ldrd	r2, [r4, #104]	; 0x68
   15600:	adds	r2, r2, #1
   15604:	adc	r3, r3, #0
   15608:	cmp	r1, #7
   1560c:	strd	r2, [r4, #104]	; 0x68
   15610:	beq	15640 <read_body@@Base+0x100>
   15614:	cmp	r1, #10
   15618:	beq	156b0 <read_body@@Base+0x170>
   1561c:	mov	r1, r0
   15620:	ldr	r0, [r5]
   15624:	bl	122cc <push_back@@Base>
   15628:	ldrd	r2, [r4, #80]	; 0x50
   1562c:	adds	r2, r2, #1
   15630:	adc	r3, r3, #0
   15634:	strd	r2, [r4, #80]	; 0x50
   15638:	mov	r0, r6
   1563c:	pop	{r4, r5, r6, r7, r8, pc}
   15640:	ldrd	r2, [r4, #40]	; 0x28
   15644:	adds	r2, r2, #1
   15648:	adc	r3, r3, #0
   1564c:	strd	r2, [r4, #40]	; 0x28
   15650:	bl	143b0 <free_token_return@@Base>
   15654:	ldrd	r2, [r4, #56]	; 0x38
   15658:	mov	r0, r5
   1565c:	adds	r2, r2, #1
   15660:	adc	r3, r3, #0
   15664:	strd	r2, [r4, #56]	; 0x38
   15668:	bl	14c9c <read_return_expression@@Base>
   1566c:	ldrd	r2, [r4, #88]	; 0x58
   15670:	adds	r2, r2, #1
   15674:	adc	r3, r3, #0
   15678:	strd	r2, [r4, #88]	; 0x58
   1567c:	mov	r8, r0
   15680:	cmp	r6, #0
   15684:	moveq	r6, r8
   15688:	beq	156a0 <read_body@@Base+0x160>
   1568c:	ldrd	r2, [r4, #96]	; 0x60
   15690:	str	r8, [r7, #4]
   15694:	adds	r2, r2, #1
   15698:	adc	r3, r3, #0
   1569c:	strd	r2, [r4, #96]	; 0x60
   156a0:	ldr	r0, [r5]
   156a4:	bl	12198 <next@@Base>
   156a8:	mov	r7, r8
   156ac:	b	155c8 <read_body@@Base+0x88>
   156b0:	ldrd	r2, [r4, #48]	; 0x30
   156b4:	adds	r2, r2, #1
   156b8:	adc	r3, r3, #0
   156bc:	strd	r2, [r4, #48]	; 0x30
   156c0:	bl	14404 <free_token_if@@Base>
   156c4:	ldrd	r2, [r4, #64]	; 0x40
   156c8:	mov	r0, r5
   156cc:	adds	r2, r2, #1
   156d0:	adc	r3, r3, #0
   156d4:	strd	r2, [r4, #64]	; 0x40
   156d8:	bl	153e0 <read_if_statement@@Base>
   156dc:	ldrd	r2, [r4, #72]	; 0x48
   156e0:	adds	r2, r2, #1
   156e4:	adc	r3, r3, #0
   156e8:	strd	r2, [r4, #72]	; 0x48
   156ec:	mov	r8, r0
   156f0:	b	15680 <read_body@@Base+0x140>
   156f4:	andeq	sl, r2, r8, asr #12

000156f8 <read_function_ast_node@@Base>:
   156f8:	push	{r4, r5, r6, r7, r8, lr}
   156fc:	mov	r5, r0
   15700:	ldr	r4, [pc, #392]	; 15890 <read_function_ast_node@@Base+0x198>
   15704:	ldr	r0, [r0]
   15708:	ldrd	r2, [r4]
   1570c:	adds	r2, r2, #1
   15710:	adc	r3, r3, #0
   15714:	strd	r2, [r4]
   15718:	bl	12198 <next@@Base>
   1571c:	ldrd	r2, [r4, #8]
   15720:	adds	r2, r2, #1
   15724:	adc	r3, r3, #0
   15728:	strd	r2, [r4, #8]
   1572c:	ldr	r3, [r0]
   15730:	cmp	r3, #0
   15734:	beq	15744 <read_function_ast_node@@Base+0x4c>
   15738:	mov	r5, #0
   1573c:	mov	r0, r5
   15740:	pop	{r4, r5, r6, r7, r8, pc}
   15744:	ldrd	r2, [r4, #16]
   15748:	adds	r2, r2, #1
   1574c:	adc	r3, r3, #0
   15750:	strd	r2, [r4, #16]
   15754:	bl	142ec <free_token_int_type@@Base>
   15758:	ldrd	r2, [r4, #24]
   1575c:	ldr	r0, [r5]
   15760:	adds	r2, r2, #1
   15764:	adc	r3, r3, #0
   15768:	strd	r2, [r4, #24]
   1576c:	bl	12198 <next@@Base>
   15770:	ldrd	r2, [r4, #32]
   15774:	adds	r2, r2, #1
   15778:	adc	r3, r3, #0
   1577c:	strd	r2, [r4, #32]
   15780:	ldr	r3, [r0]
   15784:	mov	r6, r0
   15788:	cmp	r3, #2
   1578c:	bne	15738 <read_function_ast_node@@Base+0x40>
   15790:	ldrd	r2, [r4, #40]	; 0x28
   15794:	ldr	r0, [r5]
   15798:	adds	r2, r2, #1
   1579c:	adc	r3, r3, #0
   157a0:	strd	r2, [r4, #40]	; 0x28
   157a4:	bl	12198 <next@@Base>
   157a8:	ldrd	r2, [r4, #48]	; 0x30
   157ac:	adds	r2, r2, #1
   157b0:	adc	r3, r3, #0
   157b4:	strd	r2, [r4, #48]	; 0x30
   157b8:	ldr	r3, [r0]
   157bc:	cmp	r3, #3
   157c0:	bne	15738 <read_function_ast_node@@Base+0x40>
   157c4:	ldrd	r2, [r4, #56]	; 0x38
   157c8:	adds	r2, r2, #1
   157cc:	adc	r3, r3, #0
   157d0:	strd	r2, [r4, #56]	; 0x38
   157d4:	bl	14340 <free_token_opar@@Base>
   157d8:	ldrd	r2, [r4, #64]	; 0x40
   157dc:	ldr	r0, [r5]
   157e0:	adds	r2, r2, #1
   157e4:	adc	r3, r3, #0
   157e8:	strd	r2, [r4, #64]	; 0x40
   157ec:	bl	12198 <next@@Base>
   157f0:	ldrd	r2, [r4, #72]	; 0x48
   157f4:	adds	r2, r2, #1
   157f8:	adc	r3, r3, #0
   157fc:	strd	r2, [r4, #72]	; 0x48
   15800:	ldr	r3, [r0]
   15804:	cmp	r3, #4
   15808:	bne	15738 <read_function_ast_node@@Base+0x40>
   1580c:	ldrd	r2, [r4, #80]	; 0x50
   15810:	adds	r2, r2, #1
   15814:	adc	r3, r3, #0
   15818:	strd	r2, [r4, #80]	; 0x50
   1581c:	bl	1435c <free_token_cpar@@Base>
   15820:	ldrd	r2, [r4, #88]	; 0x58
   15824:	mov	r0, r5
   15828:	adds	r2, r2, #1
   1582c:	adc	r3, r3, #0
   15830:	strd	r2, [r4, #88]	; 0x58
   15834:	bl	15540 <read_body@@Base>
   15838:	mov	r7, r0
   1583c:	ldrd	r0, [r4, #96]	; 0x60
   15840:	adds	r0, r0, #1
   15844:	adc	r1, r1, #0
   15848:	strd	r0, [r4, #96]	; 0x60
   1584c:	mov	r0, #16
   15850:	bl	11900 <malloc@plt>
   15854:	mov	r2, r7
   15858:	ldr	r1, [r6, #4]
   1585c:	mov	r5, r0
   15860:	bl	1452c <init_node_function@@Base>
   15864:	ldrd	r2, [r4, #104]	; 0x68
   15868:	mov	r0, r6
   1586c:	adds	r2, r2, #1
   15870:	adc	r3, r3, #0
   15874:	strd	r2, [r4, #104]	; 0x68
   15878:	bl	14324 <free_token_function@@Base>
   1587c:	ldrd	r2, [r4, #112]	; 0x70
   15880:	adds	r2, r2, #1
   15884:	adc	r3, r3, #0
   15888:	strd	r2, [r4, #112]	; 0x70
   1588c:	b	1573c <read_function_ast_node@@Base+0x44>
   15890:	andeq	sl, r2, r8, asr #13

00015894 <build_ast@@Base>:
   15894:	push	{r4, lr}
   15898:	ldr	r4, [pc, #36]	; 158c4 <build_ast@@Base+0x30>
   1589c:	ldrd	r2, [r4, #-8]
   158a0:	adds	r2, r2, #1
   158a4:	adc	r3, r3, #0
   158a8:	strd	r2, [r4, #-8]
   158ac:	bl	156f8 <read_function_ast_node@@Base>
   158b0:	ldrd	r2, [r4]
   158b4:	adds	r2, r2, #1
   158b8:	adc	r3, r3, #0
   158bc:	strd	r2, [r4]
   158c0:	pop	{r4, pc}
   158c4:	andeq	sl, r2, r8, asr #14
   158c8:	b	16af4 <build_ast@@Base+0x1260>
   158cc:	push	{r4, r5, r6, lr}
   158d0:	subs	r5, r1, #0
   158d4:	popeq	{r4, r5, r6, pc}
   158d8:	mov	r4, r0
   158dc:	bl	158c8 <build_ast@@Base+0x34>
   158e0:	ldrd	r2, [r4]
   158e4:	adds	r0, r0, r2
   158e8:	adc	r1, r1, r3
   158ec:	subs	r5, r5, #1
   158f0:	strd	r0, [r4], #8
   158f4:	bne	158dc <build_ast@@Base+0x48>
   158f8:	pop	{r4, r5, r6, pc}
   158fc:	ldr	r3, [pc, #20]	; 15918 <build_ast@@Base+0x84>
   15900:	ldr	r2, [pc, #20]	; 1591c <build_ast@@Base+0x88>
   15904:	add	r3, pc, r3
   15908:	ldr	r3, [r3, r2]
   1590c:	ldmib	r3, {r0, r3}
   15910:	add	r0, r0, r3
   15914:	bx	lr
   15918:	strdeq	r3, [r1], -r4
   1591c:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   15920:	ldr	r3, [pc, #28]	; 15944 <build_ast@@Base+0xb0>
   15924:	ldr	r2, [pc, #28]	; 15948 <build_ast@@Base+0xb4>
   15928:	add	r3, pc, r3
   1592c:	ldr	r3, [r3, r2]
   15930:	ldr	r2, [r3]
   15934:	cmp	r2, #0
   15938:	ldrne	r0, [r3, #20]
   1593c:	moveq	r0, #1
   15940:	bx	lr
   15944:	ldrdeq	r3, [r1], -r0
   15948:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   1594c:	bx	lr
   15950:	ldr	ip, [pc, #32]	; 15978 <build_ast@@Base+0xe4>
   15954:	mov	r3, #32
   15958:	teq	r0, r1
   1595c:	movmi	r2, ip
   15960:	movpl	r2, #0
   15964:	subs	r3, r3, #1
   15968:	lsl	r1, r1, #1
   1596c:	eor	r0, r2, r0, lsl #1
   15970:	bne	15958 <build_ast@@Base+0xc4>
   15974:	bx	lr
   15978:	strbeq	r1, [r1], #3511	; 0xdb7
   1597c:	ldr	r3, [pc, #76]	; 159d0 <build_ast@@Base+0x13c>
   15980:	ldr	r1, [pc, #76]	; 159d4 <build_ast@@Base+0x140>
   15984:	add	r3, pc, r3
   15988:	push	{r4, r5, r6, lr}
   1598c:	mov	r5, r0
   15990:	ldr	r4, [r3, r1]
   15994:	lsl	r1, r0, #2
   15998:	mov	r0, r4
   1599c:	mov	r2, #1
   159a0:	ldr	r3, [r0], #28
   159a4:	bl	118c4 <fwrite@plt>
   159a8:	cmp	r0, #1
   159ac:	movne	r3, #1
   159b0:	ldr	r0, [r4, #8]
   159b4:	strne	r3, [r4, #20]
   159b8:	ldr	r3, [r4, #4]
   159bc:	sub	r0, r0, r5
   159c0:	add	r3, r3, r5
   159c4:	str	r3, [r4, #4]
   159c8:	str	r0, [r4, #8]
   159cc:	pop	{r4, r5, r6, pc}
   159d0:	andeq	r3, r1, r4, ror r6
   159d4:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   159d8:	ldr	r3, [pc, #76]	; 15a2c <build_ast@@Base+0x198>
   159dc:	ldr	r2, [pc, #76]	; 15a30 <build_ast@@Base+0x19c>
   159e0:	add	r3, pc, r3
   159e4:	push	{r4, r5, r6, lr}
   159e8:	mov	r5, r0
   159ec:	ldr	r4, [r3, r2]
   159f0:	ldr	r3, [r4, #8]
   159f4:	cmp	r3, #1024	; 0x400
   159f8:	bcc	15a18 <build_ast@@Base+0x184>
   159fc:	mov	r0, #1024	; 0x400
   15a00:	bl	1597c <build_ast@@Base+0xe8>
   15a04:	ldr	r3, [r4, #8]
   15a08:	cmp	r3, #0
   15a0c:	addne	r2, r4, #4096	; 0x1000
   15a10:	ldrne	r2, [r2, #28]
   15a14:	strne	r2, [r4, #28]
   15a18:	add	r0, r3, #7
   15a1c:	add	r3, r5, r3
   15a20:	str	r3, [r4, #8]
   15a24:	add	r0, r4, r0, lsl #2
   15a28:	pop	{r4, r5, r6, pc}
   15a2c:	andeq	r3, r1, r8, lsl r6
   15a30:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   15a34:	ldr	r3, [pc, #172]	; 15ae8 <build_ast@@Base+0x254>
   15a38:	ldr	r2, [pc, #172]	; 15aec <build_ast@@Base+0x258>
   15a3c:	add	r3, pc, r3
   15a40:	push	{r4, r5, r6, lr}
   15a44:	mov	r5, r0
   15a48:	ldr	r4, [r3, r2]
   15a4c:	ldr	r3, [r4, #8]
   15a50:	ldr	ip, [r4, #12]
   15a54:	sub	ip, ip, r3
   15a58:	cmp	ip, r0
   15a5c:	bcs	15ab8 <build_ast@@Base+0x224>
   15a60:	ldr	r2, [r4, #4]
   15a64:	cmp	ip, #0
   15a68:	add	r2, r2, r3
   15a6c:	str	r2, [r4, #4]
   15a70:	addne	r2, r4, #28
   15a74:	mov	r0, r4
   15a78:	ldrne	r3, [r2, r3, lsl #2]
   15a7c:	mov	r6, #0
   15a80:	strne	r3, [r4, #28]
   15a84:	ldr	r3, [r0], #28
   15a88:	mov	r2, #4096	; 0x1000
   15a8c:	add	r0, r0, ip, lsl #2
   15a90:	mov	r1, #1
   15a94:	str	ip, [r4, #12]
   15a98:	str	r6, [r4, #8]
   15a9c:	bl	118dc <fread@plt>
   15aa0:	ldr	r3, [r4, #12]
   15aa4:	add	r0, r3, r0, lsr #2
   15aa8:	cmp	r5, r0
   15aac:	str	r0, [r4, #12]
   15ab0:	bhi	15acc <build_ast@@Base+0x238>
   15ab4:	ldr	r3, [r4, #8]
   15ab8:	add	r0, r3, #7
   15abc:	add	r5, r5, r3
   15ac0:	add	r0, r4, r0, lsl #2
   15ac4:	str	r5, [r4, #8]
   15ac8:	pop	{r4, r5, r6, pc}
   15acc:	ldr	r3, [r4, #16]
   15ad0:	str	r6, [r4, #12]
   15ad4:	add	r5, r5, r3
   15ad8:	sub	r5, r5, r0
   15adc:	str	r5, [r4, #16]
   15ae0:	mov	r0, r6
   15ae4:	pop	{r4, r5, r6, pc}
   15ae8:			; <UNDEFINED> instruction: 0x000135bc
   15aec:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   15af0:	push	{r0, r1, r2, r3}
   15af4:	ldr	r3, [pc, #52]	; 15b30 <build_ast@@Base+0x29c>
   15af8:	ldr	r1, [pc, #52]	; 15b34 <build_ast@@Base+0x2a0>
   15afc:	push	{lr}		; (str lr, [sp, #-4]!)
   15b00:	add	r3, pc, r3
   15b04:	sub	sp, sp, #12
   15b08:	add	r2, sp, #20
   15b0c:	str	r2, [sp, #4]
   15b10:	ldr	r0, [r3, r1]
   15b14:	ldr	r1, [sp, #16]
   15b18:	ldr	r0, [r0]
   15b1c:	bl	119cc <vfprintf@plt>
   15b20:	add	sp, sp, #12
   15b24:	pop	{lr}		; (ldr lr, [sp], #4)
   15b28:	add	sp, sp, #16
   15b2c:	bx	lr
   15b30:	strdeq	r3, [r1], -r8
   15b34:	andeq	r0, r0, r4, lsr #1
   15b38:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15b3c:	subs	r6, r1, #0
   15b40:	beq	15b9c <build_ast@@Base+0x308>
   15b44:	cmp	r2, #0
   15b48:	movne	r3, #0
   15b4c:	mov	r7, r2
   15b50:	ldr	r8, [r6]
   15b54:	addne	r5, r0, #12
   15b58:	movne	r4, r3
   15b5c:	beq	15b8c <build_ast@@Base+0x2f8>
   15b60:	ldr	r0, [r5, #4]!
   15b64:	add	r2, r6, r3, lsl #3
   15b68:	cmp	r0, #0
   15b6c:	add	r9, r3, #1
   15b70:	add	r4, r4, #1
   15b74:	beq	15b84 <build_ast@@Base+0x2f0>
   15b78:	ldr	r0, [r2, #28]
   15b7c:	bl	118a0 <free@plt>
   15b80:	mov	r3, r9
   15b84:	cmp	r7, r4
   15b88:	bne	15b60 <build_ast@@Base+0x2cc>
   15b8c:	mov	r0, r6
   15b90:	bl	118a0 <free@plt>
   15b94:	mov	r0, r8
   15b98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15b9c:	mov	r8, r6
   15ba0:	b	15b94 <build_ast@@Base+0x300>
   15ba4:	push	{r4, r5}
   15ba8:	mov	r4, r0
   15bac:	mov	r5, r1
   15bb0:	orrs	r3, r4, r5
   15bb4:	beq	15bf8 <build_ast@@Base+0x364>
   15bb8:	cmp	r1, #0
   15bbc:	clzeq	r1, r0
   15bc0:	addeq	r1, r1, #32
   15bc4:	clzne	r1, r1
   15bc8:	rsb	r3, r1, #63	; 0x3f
   15bcc:	cmp	r3, #1
   15bd0:	bls	15bf8 <build_ast@@Base+0x364>
   15bd4:	rsb	r2, r1, #61	; 0x3d
   15bd8:	rsb	r0, r2, #32
   15bdc:	lsr	r3, r4, r2
   15be0:	sub	r2, r2, #32
   15be4:	orr	r3, r3, r5, lsl r0
   15be8:	orr	r3, r3, r5, lsr r2
   15bec:	rsb	r1, r1, #1073741886	; 0x4000003e
   15bf0:	and	r0, r3, #3
   15bf4:	add	r0, r0, r1, lsl #2
   15bf8:	pop	{r4, r5}
   15bfc:	bx	lr
   15c00:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15c04:	mov	r1, r3
   15c08:	mov	sl, r0
   15c0c:	mov	r0, r2
   15c10:	mov	r8, r2
   15c14:	mov	r9, r3
   15c18:	bl	15ba4 <build_ast@@Base+0x310>
   15c1c:	add	r0, r0, r0, lsl #1
   15c20:	lsl	r0, r0, #3
   15c24:	add	r3, sl, r0
   15c28:	ldr	r2, [sl, r0]
   15c2c:	ldrd	r4, [r3, #16]
   15c30:	ldrd	r6, [r3, #8]
   15c34:	add	r2, r2, #1
   15c38:	adds	r4, r4, r8
   15c3c:	adc	r5, r5, r9
   15c40:	cmp	r8, r6
   15c44:	sbcs	r1, r9, r7
   15c48:	str	r2, [sl, r0]
   15c4c:	strd	r4, [r3, #16]
   15c50:	strdlt	r8, [r3, #8]
   15c54:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15c58:	ldr	r3, [r1, #8]
   15c5c:	cmp	r3, #0
   15c60:	bxeq	lr
   15c64:	push	{r4, r5, r6, r7, r8, lr}
   15c68:	add	r2, r1, #6016	; 0x1780
   15c6c:	mov	r8, r1
   15c70:	mov	r7, r0
   15c74:	ldrd	r0, [r1, #24]
   15c78:	add	r2, r2, #32
   15c7c:	mov	r3, r8
   15c80:	mov	ip, #0
   15c84:	mov	r4, #0
   15c88:	mov	r5, #0
   15c8c:	str	ip, [r3, #40]	; 0x28
   15c90:	strd	r0, [r3, #48]	; 0x30
   15c94:	strd	r4, [r3, #56]	; 0x38
   15c98:	add	r3, r3, #24
   15c9c:	cmp	r2, r3
   15ca0:	bne	15c8c <build_ast@@Base+0x3f8>
   15ca4:	cmp	r7, #0
   15ca8:	popeq	{r4, r5, r6, r7, r8, pc}
   15cac:	add	r8, r8, #40	; 0x28
   15cb0:	ldr	r3, [r7, #16]
   15cb4:	cmp	r3, #0
   15cb8:	beq	15d40 <build_ast@@Base+0x4ac>
   15cbc:	ldr	r2, [r7, #56]	; 0x38
   15cc0:	cmp	r2, #0
   15cc4:	beq	15d40 <build_ast@@Base+0x4ac>
   15cc8:	mov	r6, #0
   15ccc:	b	15cdc <build_ast@@Base+0x448>
   15cd0:	add	r6, r6, #1
   15cd4:	cmp	r2, r6
   15cd8:	beq	15d40 <build_ast@@Base+0x4ac>
   15cdc:	ldr	r3, [r7, #60]	; 0x3c
   15ce0:	ldr	r4, [r3, r6, lsl #2]
   15ce4:	cmp	r4, #0
   15ce8:	beq	15cd0 <build_ast@@Base+0x43c>
   15cec:	ldr	r3, [r4]
   15cf0:	cmp	r3, r7
   15cf4:	bne	15cd0 <build_ast@@Base+0x43c>
   15cf8:	ldr	r3, [r4, #16]
   15cfc:	cmp	r3, #0
   15d00:	beq	15cd0 <build_ast@@Base+0x43c>
   15d04:	mov	r5, #0
   15d08:	ldr	r2, [r4, #20]
   15d0c:	lsl	r3, r5, #3
   15d10:	add	r2, r2, r3
   15d14:	mov	r0, r8
   15d18:	ldrd	r2, [r2]
   15d1c:	bl	15c00 <build_ast@@Base+0x36c>
   15d20:	ldr	r3, [r4, #16]
   15d24:	add	r5, r5, #1
   15d28:	cmp	r3, r5
   15d2c:	bhi	15d08 <build_ast@@Base+0x474>
   15d30:	ldr	r2, [r7, #56]	; 0x38
   15d34:	add	r6, r6, #1
   15d38:	cmp	r2, r6
   15d3c:	bne	15cdc <build_ast@@Base+0x448>
   15d40:	ldr	r7, [r7, #4]
   15d44:	cmp	r7, #0
   15d48:	bne	15cb0 <build_ast@@Base+0x41c>
   15d4c:	pop	{r4, r5, r6, r7, r8, pc}
   15d50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d54:	sub	sp, sp, #12
   15d58:	mov	r5, r0
   15d5c:	str	r0, [sp, #4]
   15d60:	mov	r6, r2
   15d64:	str	r2, [sp]
   15d68:	mov	r0, r1
   15d6c:	mov	r4, r1
   15d70:	ldr	r2, [pc, #344]	; 15ed0 <build_ast@@Base+0x63c>
   15d74:	mov	r1, #0
   15d78:	bl	1199c <memset@plt>
   15d7c:	subs	r3, r5, #0
   15d80:	mov	r5, #0
   15d84:	str	r5, [r6]
   15d88:	beq	15eb4 <build_ast@@Base+0x620>
   15d8c:	mov	r7, r5
   15d90:	mov	r9, r5
   15d94:	mov	r8, r3
   15d98:	ldr	r0, [r8, #12]
   15d9c:	bl	11954 <strlen@plt>
   15da0:	cmp	r5, r0
   15da4:	ldrcc	r3, [sp]
   15da8:	strcc	r0, [r3]
   15dac:	mov	r0, r7
   15db0:	ldr	r1, [r8, #8]
   15db4:	bl	15950 <build_ast@@Base+0xbc>
   15db8:	ldr	r6, [r8, #56]	; 0x38
   15dbc:	mov	r1, r6
   15dc0:	bl	15950 <build_ast@@Base+0xbc>
   15dc4:	cmp	r6, #0
   15dc8:	mov	r7, r0
   15dcc:	beq	15e9c <build_ast@@Base+0x608>
   15dd0:	ldr	r5, [r8, #60]	; 0x3c
   15dd4:	add	r6, r5, r6, lsl #2
   15dd8:	b	15dfc <build_ast@@Base+0x568>
   15ddc:	mov	r0, r7
   15de0:	mov	r1, r9
   15de4:	bl	15950 <build_ast@@Base+0xbc>
   15de8:	mov	r1, r9
   15dec:	bl	15950 <build_ast@@Base+0xbc>
   15df0:	mov	r7, r0
   15df4:	cmp	r6, r5
   15df8:	beq	15e9c <build_ast@@Base+0x608>
   15dfc:	ldr	fp, [r5], #4
   15e00:	cmp	fp, #0
   15e04:	beq	15ddc <build_ast@@Base+0x548>
   15e08:	ldr	r3, [fp]
   15e0c:	cmp	r3, r8
   15e10:	bne	15ddc <build_ast@@Base+0x548>
   15e14:	mov	r0, r7
   15e18:	ldr	r1, [fp, #12]
   15e1c:	bl	15950 <build_ast@@Base+0xbc>
   15e20:	ldr	r1, [fp, #8]
   15e24:	bl	15950 <build_ast@@Base+0xbc>
   15e28:	ldr	r3, [r8, #16]
   15e2c:	cmp	r3, #0
   15e30:	mov	r7, r0
   15e34:	beq	15df4 <build_ast@@Base+0x560>
   15e38:	ldr	sl, [fp, #16]
   15e3c:	ldr	r3, [r4, #8]
   15e40:	mov	r1, sl
   15e44:	add	r3, r3, sl
   15e48:	str	r3, [r4, #8]
   15e4c:	bl	15950 <build_ast@@Base+0xbc>
   15e50:	cmp	sl, #0
   15e54:	mov	r7, r0
   15e58:	beq	15df4 <build_ast@@Base+0x560>
   15e5c:	ldr	ip, [fp, #20]
   15e60:	ldrd	r2, [r4, #16]
   15e64:	add	lr, ip, sl, lsl #3
   15e68:	ldrd	r0, [ip]
   15e6c:	ldrd	sl, [r4, #24]
   15e70:	adds	r2, r2, r0
   15e74:	adc	r3, r3, r1
   15e78:	strd	r2, [r4, #16]
   15e7c:	ldrd	r0, [ip], #8
   15e80:	cmp	sl, r0
   15e84:	sbcs	sl, fp, r1
   15e88:	strdlt	r0, [r4, #24]
   15e8c:	cmp	lr, ip
   15e90:	bne	15e68 <build_ast@@Base+0x5d4>
   15e94:	cmp	r6, r5
   15e98:	bne	15dfc <build_ast@@Base+0x568>
   15e9c:	ldr	r8, [r8, #4]
   15ea0:	cmp	r8, #0
   15ea4:	beq	15eb8 <build_ast@@Base+0x624>
   15ea8:	ldr	r3, [sp]
   15eac:	ldr	r5, [r3]
   15eb0:	b	15d98 <build_ast@@Base+0x504>
   15eb4:	ldr	r7, [sp, #4]
   15eb8:	ldr	r0, [sp, #4]
   15ebc:	mov	r1, r4
   15ec0:	bl	15c58 <build_ast@@Base+0x3c4>
   15ec4:	mov	r0, r7
   15ec8:	add	sp, sp, #12
   15ecc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ed0:	andeq	r1, r0, r8, asr #15
   15ed4:	push	{r4, r5, r6, lr}
   15ed8:	mov	r4, r0
   15edc:	ldr	r0, [pc, #172]	; 15f90 <build_ast@@Base+0x6fc>
   15ee0:	add	r0, pc, r0
   15ee4:	bl	118e8 <getenv@plt>
   15ee8:	subs	r3, r0, #0
   15eec:	beq	15ef8 <build_ast@@Base+0x664>
   15ef0:	bl	119d8 <atoi@plt>
   15ef4:	bic	r3, r0, r0, asr #31
   15ef8:	ldr	r0, [pc, #148]	; 15f94 <build_ast@@Base+0x700>
   15efc:	str	r3, [r4, #8]
   15f00:	add	r0, pc, r0
   15f04:	bl	118e8 <getenv@plt>
   15f08:	subs	r6, r0, #0
   15f0c:	beq	15f60 <build_ast@@Base+0x6cc>
   15f10:	bl	11954 <strlen@plt>
   15f14:	subs	r5, r0, #0
   15f18:	beq	15f60 <build_ast@@Base+0x6cc>
   15f1c:	sub	r3, r5, #1
   15f20:	ldrb	r2, [r6, r3]
   15f24:	cmp	r2, #47	; 0x2f
   15f28:	beq	15f54 <build_ast@@Base+0x6c0>
   15f2c:	ldr	r0, [r4, #4]
   15f30:	str	r5, [r4, #12]
   15f34:	add	r0, r0, #2
   15f38:	add	r0, r0, r5
   15f3c:	bl	11900 <malloc@plt>
   15f40:	mov	r2, r5
   15f44:	mov	r1, r6
   15f48:	str	r0, [r4]
   15f4c:	pop	{r4, r5, r6, lr}
   15f50:	b	118ac <memcpy@plt>
   15f54:	cmp	r3, #0
   15f58:	movne	r5, r3
   15f5c:	bne	15f2c <build_ast@@Base+0x698>
   15f60:	ldr	r3, [r4, #8]
   15f64:	cmp	r3, #0
   15f68:	ldrne	r6, [pc, #40]	; 15f98 <build_ast@@Base+0x704>
   15f6c:	movne	r5, #1
   15f70:	addne	r6, pc, r6
   15f74:	bne	15f2c <build_ast@@Base+0x698>
   15f78:	ldr	r0, [r4, #4]
   15f7c:	str	r3, [r4, #12]
   15f80:	add	r0, r0, #2
   15f84:	bl	11900 <malloc@plt>
   15f88:	str	r0, [r4]
   15f8c:	pop	{r4, r5, r6, pc}
   15f90:	andeq	r2, r0, r8, lsl #9
   15f94:	andeq	r2, r0, ip, ror r4
   15f98:	strdeq	r2, [r0], -r4
   15f9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fa0:	sub	sp, sp, #6080	; 0x17c0
   15fa4:	sub	sp, sp, #44	; 0x2c
   15fa8:	add	r3, sp, #72	; 0x48
   15fac:	mov	r4, r0
   15fb0:	str	r0, [sp, #64]	; 0x40
   15fb4:	str	r1, [sp, #60]	; 0x3c
   15fb8:	mov	r0, r3
   15fbc:	ldr	r2, [pc, #1068]	; 163f0 <build_ast@@Base+0xb5c>
   15fc0:	mov	r1, #0
   15fc4:	str	r3, [sp, #68]	; 0x44
   15fc8:	bl	1199c <memset@plt>
   15fcc:	add	r3, r4, #6016	; 0x1780
   15fd0:	add	r3, r3, #8
   15fd4:	add	r2, sp, #2016	; 0x7e0
   15fd8:	mov	sl, #251	; 0xfb
   15fdc:	add	r2, r2, #8
   15fe0:	mov	fp, #0
   15fe4:	str	r3, [sp, #56]	; 0x38
   15fe8:	add	r3, sp, #72	; 0x48
   15fec:	str	r2, [sp, #44]	; 0x2c
   15ff0:	str	r3, [sp, #48]	; 0x30
   15ff4:	mov	r2, #0
   15ff8:	mov	r3, #0
   15ffc:	mov	r5, sl
   16000:	mov	r0, fp
   16004:	strd	r2, [sp, #24]
   16008:	str	sl, [sp, #52]	; 0x34
   1600c:	ldr	r9, [sp, #56]	; 0x38
   16010:	str	r5, [sp, #40]	; 0x28
   16014:	ldr	sl, [sp, #60]	; 0x3c
   16018:	ldrd	r2, [r9, #16]
   1601c:	ldr	r4, [r9]
   16020:	str	r4, [sp, #4]
   16024:	strd	r2, [sp, #8]
   16028:	ldr	r3, [sp, #4]
   1602c:	cmp	r3, #0
   16030:	beq	162dc <build_ast@@Base+0xa48>
   16034:	cmp	fp, #0
   16038:	bne	161c0 <build_ast@@Base+0x92c>
   1603c:	ldr	r5, [sp, #40]	; 0x28
   16040:	cmp	r5, #0
   16044:	blt	163cc <build_ast@@Base+0xb38>
   16048:	add	ip, r5, r5, lsl #1
   1604c:	ldr	fp, [sl, ip, lsl #3]
   16050:	add	ip, sl, ip, lsl #3
   16054:	cmp	fp, #0
   16058:	bne	163c0 <build_ast@@Base+0xb2c>
   1605c:	mov	r3, ip
   16060:	ldr	r4, [sp, #4]
   16064:	b	16078 <build_ast@@Base+0x7e4>
   16068:	ldr	fp, [r3]
   1606c:	mov	ip, r3
   16070:	cmp	fp, #0
   16074:	bne	163b8 <build_ast@@Base+0xb24>
   16078:	subs	r5, r5, #1
   1607c:	sub	r3, r3, #24
   16080:	bcs	16068 <build_ast@@Base+0x7d4>
   16084:	ldr	sl, [sp, #52]	; 0x34
   16088:	mov	r8, r0
   1608c:	mov	r5, r4
   16090:	lsl	r4, sl, #1
   16094:	ldr	r3, [sp, #44]	; 0x2c
   16098:	add	lr, r4, sl
   1609c:	sub	ip, r3, #1952	; 0x7a0
   160a0:	lsl	lr, lr, #3
   160a4:	add	ip, ip, lr
   160a8:	ldrd	r0, [sp, #8]
   160ac:	add	lr, r3, lr
   160b0:	ldrd	r2, [ip, #16]
   160b4:	ldr	r6, [lr, #-1952]	; 0xfffff860
   160b8:	adds	r0, r0, r2
   160bc:	adc	r1, r1, r3
   160c0:	mov	r2, r0
   160c4:	mov	r3, r1
   160c8:	ldrd	r0, [ip, #8]
   160cc:	strd	r2, [ip, #16]
   160d0:	ldr	r3, [sp, #56]	; 0x38
   160d4:	add	r5, r6, r5
   160d8:	str	r5, [lr, #-1952]	; 0xfffff860
   160dc:	orrs	lr, r0, r1
   160e0:	ldrd	r2, [r3, #8]
   160e4:	beq	160f4 <build_ast@@Base+0x860>
   160e8:	cmp	r2, r0
   160ec:	sbcs	r1, r3, r1
   160f0:	bge	16108 <build_ast@@Base+0x874>
   160f4:	ldr	r1, [sp, #44]	; 0x2c
   160f8:	add	r0, r4, sl
   160fc:	sub	r1, r1, #1952	; 0x7a0
   16100:	add	r1, r1, r0, lsl #3
   16104:	strd	r2, [r1, #8]
   16108:	add	lr, r4, sl
   1610c:	ldr	r3, [sp, #68]	; 0x44
   16110:	lsl	lr, lr, #3
   16114:	add	ip, r3, lr
   16118:	ldr	r3, [sp, #64]	; 0x40
   1611c:	add	lr, r3, lr
   16120:	b	16170 <build_ast@@Base+0x8dc>
   16124:	ldrd	r0, [ip, #-8]
   16128:	ldrd	r2, [lr, #-8]
   1612c:	ldrd	r4, [ip, #-16]
   16130:	adds	r6, r0, r2
   16134:	adc	r7, r1, r3
   16138:	ldr	r2, [lr, #-24]	; 0xffffffe8
   1613c:	ldr	r3, [ip, #-24]	; 0xffffffe8
   16140:	orrs	r1, r4, r5
   16144:	add	r3, r3, r2
   16148:	str	r3, [ip, #-24]	; 0xffffffe8
   1614c:	strd	r6, [ip, #-8]
   16150:	ldrd	r2, [lr, #-16]
   16154:	beq	16164 <build_ast@@Base+0x8d0>
   16158:	cmp	r2, r4
   1615c:	sbcs	r1, r3, r5
   16160:	bge	16168 <build_ast@@Base+0x8d4>
   16164:	strd	r2, [ip, #-16]
   16168:	sub	ip, ip, #24
   1616c:	sub	lr, lr, #24
   16170:	subs	sl, sl, #1
   16174:	bpl	16124 <build_ast@@Base+0x890>
   16178:	ldr	r3, [sp, #44]	; 0x2c
   1617c:	add	r0, r8, r8, lsl #1
   16180:	sub	r3, r3, #1952	; 0x7a0
   16184:	add	r3, r3, r0, lsl #3
   16188:	ldrd	r6, [sp, #24]
   1618c:	ldrd	r4, [r3, #16]
   16190:	ldr	r1, [sp, #68]	; 0x44
   16194:	ldr	r0, [sp, #64]	; 0x40
   16198:	adds	r6, r6, r4
   1619c:	adc	r7, r7, r5
   161a0:	mov	r4, r6
   161a4:	mov	r5, r7
   161a8:	ldr	r2, [pc, #576]	; 163f0 <build_ast@@Base+0xb5c>
   161ac:	strd	r4, [r3, #16]
   161b0:	bl	118ac <memcpy@plt>
   161b4:	add	sp, sp, #6080	; 0x17c0
   161b8:	add	sp, sp, #44	; 0x2c
   161bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161c0:	ldr	r3, [sp, #40]	; 0x28
   161c4:	add	ip, r3, r3, lsl #1
   161c8:	add	ip, sl, ip, lsl #3
   161cc:	ldr	lr, [sp, #4]
   161d0:	cmp	fp, lr
   161d4:	bcc	1634c <build_ast@@Base+0xab8>
   161d8:	ldrd	r2, [r9, #8]
   161dc:	ldrd	r0, [ip, #8]
   161e0:	adds	r4, r2, r0
   161e4:	adc	r5, r3, r1
   161e8:	cmp	fp, lr
   161ec:	strd	r4, [sp, #16]
   161f0:	bls	163dc <build_ast@@Base+0xb48>
   161f4:	ldrd	r6, [sp, #24]
   161f8:	mov	r2, fp
   161fc:	mov	r3, #0
   16200:	umull	r0, r1, lr, r6
   16204:	mla	r1, lr, r7, r1
   16208:	bl	178d8 <__gcov_sort_n_vals@@Base+0x534>
   1620c:	mov	r2, r0
   16210:	subs	r0, r6, r2
   16214:	mov	r3, r1
   16218:	sbc	r1, r7, r3
   1621c:	strd	r0, [sp, #24]
   16220:	ldr	r1, [sp, #4]
   16224:	mov	r0, #0
   16228:	sub	fp, fp, r1
   1622c:	mov	r8, r1
   16230:	mov	r1, #0
   16234:	str	r1, [sp, #4]
   16238:	mov	r1, #0
   1623c:	ldrd	r6, [sp, #8]
   16240:	strd	r0, [sp, #8]
   16244:	adds	r4, r2, r6
   16248:	adc	r5, r3, r7
   1624c:	ldrd	r0, [sp, #16]
   16250:	strd	r4, [sp, #32]
   16254:	bl	15ba4 <build_ast@@Base+0x310>
   16258:	ldr	r3, [sp, #48]	; 0x30
   1625c:	ldrd	r4, [sp, #32]
   16260:	add	r1, r0, r0, lsl #1
   16264:	lsl	r1, r1, #3
   16268:	add	ip, r3, r1
   1626c:	ldr	r3, [sp, #44]	; 0x2c
   16270:	ldrd	r6, [ip, #8]
   16274:	add	r1, r3, r1
   16278:	ldrd	r2, [ip, #16]
   1627c:	adds	r2, r2, r4
   16280:	adc	r3, r3, r5
   16284:	strd	r2, [sp, #32]
   16288:	ldrd	r2, [sp, #16]
   1628c:	cmp	r2, r6
   16290:	sbcs	lr, r3, r7
   16294:	movlt	lr, #1
   16298:	movge	lr, #0
   1629c:	orrs	r4, r6, r7
   162a0:	ldr	r4, [r1, #-1952]	; 0xfffff860
   162a4:	orreq	lr, lr, #1
   162a8:	add	r8, r4, r8
   162ac:	ldrd	r4, [sp, #32]
   162b0:	cmp	lr, #0
   162b4:	str	r8, [r1, #-1952]	; 0xfffff860
   162b8:	strd	r4, [ip, #16]
   162bc:	strdne	r2, [ip, #8]
   162c0:	cmp	fp, #0
   162c4:	ldreq	r3, [sp, #40]	; 0x28
   162c8:	subeq	r3, r3, #1
   162cc:	streq	r3, [sp, #40]	; 0x28
   162d0:	ldr	r3, [sp, #4]
   162d4:	cmp	r3, #0
   162d8:	bne	16034 <build_ast@@Base+0x7a0>
   162dc:	ldr	r3, [sp, #52]	; 0x34
   162e0:	ldr	r5, [sp, #40]	; 0x28
   162e4:	sub	r3, r3, #1
   162e8:	str	r3, [sp, #52]	; 0x34
   162ec:	cmn	r3, #1
   162f0:	ldr	r3, [sp, #56]	; 0x38
   162f4:	sub	r3, r3, #24
   162f8:	str	r3, [sp, #56]	; 0x38
   162fc:	bne	1600c <build_ast@@Base+0x778>
   16300:	cmp	fp, #0
   16304:	mov	r9, r5
   16308:	subne	r9, r5, #1
   1630c:	cmp	r9, #0
   16310:	mov	r8, r0
   16314:	blt	16178 <build_ast@@Base+0x8e4>
   16318:	ldr	r2, [sp, #60]	; 0x3c
   1631c:	add	r3, r9, r9, lsl #1
   16320:	sub	r0, r2, #24
   16324:	add	r1, r2, r3, lsl #3
   16328:	ldrd	r2, [sp, #24]
   1632c:	ldrd	r4, [r1, #16]
   16330:	sub	r1, r1, #24
   16334:	adds	r2, r2, r4
   16338:	adc	r3, r3, r5
   1633c:	cmp	r0, r1
   16340:	bne	1632c <build_ast@@Base+0xa98>
   16344:	strd	r2, [sp, #24]
   16348:	b	16178 <build_ast@@Base+0x8e4>
   1634c:	ldrd	r2, [sp, #8]
   16350:	ldrd	r6, [ip, #8]
   16354:	ldrd	r4, [r9, #8]
   16358:	umull	r0, r1, fp, r2
   1635c:	ldr	r8, [sp, #4]
   16360:	adds	r4, r4, r6
   16364:	adc	r5, r5, r7
   16368:	mla	r1, fp, r3, r1
   1636c:	mov	r2, r8
   16370:	mov	r3, #0
   16374:	strd	r4, [sp, #16]
   16378:	bl	178d8 <__gcov_sort_n_vals@@Base+0x534>
   1637c:	sub	r3, r8, fp
   16380:	str	r3, [sp, #4]
   16384:	ldrd	r2, [sp, #8]
   16388:	mov	r8, fp
   1638c:	mov	fp, #0
   16390:	subs	r2, r2, r0
   16394:	sbc	r3, r3, r1
   16398:	mov	r6, r0
   1639c:	mov	r7, r1
   163a0:	mov	r0, #0
   163a4:	mov	r1, #0
   163a8:	strd	r2, [sp, #8]
   163ac:	ldrd	r2, [sp, #24]
   163b0:	strd	r0, [sp, #24]
   163b4:	b	16244 <build_ast@@Base+0x9b0>
   163b8:	str	r5, [sp, #40]	; 0x28
   163bc:	str	r4, [sp, #4]
   163c0:	ldrd	r2, [ip, #16]
   163c4:	strd	r2, [sp, #24]
   163c8:	b	161cc <build_ast@@Base+0x938>
   163cc:	ldr	sl, [sp, #52]	; 0x34
   163d0:	mov	r8, r0
   163d4:	ldr	r5, [sp, #4]
   163d8:	b	16090 <build_ast@@Base+0x7fc>
   163dc:	mov	r0, #0
   163e0:	mov	r1, #0
   163e4:	ldrd	r2, [sp, #24]
   163e8:	strd	r0, [sp, #24]
   163ec:	b	16220 <build_ast@@Base+0x98c>
   163f0:	andeq	r1, r0, r0, lsr #15
   163f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   163f8:	ldrb	r4, [r0]
   163fc:	cmp	r4, #47	; 0x2f
   16400:	addeq	r5, r0, #1
   16404:	ldrbeq	r4, [r0, #1]
   16408:	movne	r5, r0
   1640c:	cmp	r4, #0
   16410:	beq	16464 <build_ast@@Base+0xbd0>
   16414:	mov	r6, r0
   16418:	ldr	sl, [pc, #144]	; 164b0 <build_ast@@Base+0xc1c>
   1641c:	mov	r8, #0
   16420:	mov	r7, #47	; 0x2f
   16424:	b	16434 <build_ast@@Base+0xba0>
   16428:	ldrb	r4, [r5, #1]!
   1642c:	cmp	r4, #0
   16430:	beq	16464 <build_ast@@Base+0xbd0>
   16434:	cmp	r4, #47	; 0x2f
   16438:	bne	16428 <build_ast@@Base+0xb94>
   1643c:	strb	r8, [r5]
   16440:	mov	r1, #0
   16444:	mov	r0, r6
   16448:	bl	119a8 <access@plt>
   1644c:	cmn	r0, #1
   16450:	beq	16470 <build_ast@@Base+0xbdc>
   16454:	strb	r7, [r5]
   16458:	ldrb	r4, [r5, #1]!
   1645c:	cmp	r4, #0
   16460:	bne	16434 <build_ast@@Base+0xba0>
   16464:	mov	r9, #0
   16468:	mov	r0, r9
   1646c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16470:	mov	r1, sl
   16474:	mov	r0, r6
   16478:	bl	11984 <mkdir@plt>
   1647c:	cmn	r0, #1
   16480:	mov	r9, r0
   16484:	bne	16454 <build_ast@@Base+0xbc0>
   16488:	bl	1196c <__errno_location@plt>
   1648c:	ldr	r3, [r0]
   16490:	cmp	r3, #17
   16494:	beq	16454 <build_ast@@Base+0xbc0>
   16498:	ldr	r0, [pc, #20]	; 164b4 <build_ast@@Base+0xc20>
   1649c:	mov	r1, r6
   164a0:	add	r0, pc, r0
   164a4:	bl	15af0 <build_ast@@Base+0x25c>
   164a8:	strb	r4, [r5]
   164ac:	b	16468 <build_ast@@Base+0xbd4>
   164b0:	andeq	r0, r0, sp, ror #3
   164b4:	andeq	r1, r0, r8, ror #29
   164b8:	ldr	r3, [pc, #124]	; 1653c <build_ast@@Base+0xca8>
   164bc:	cmp	r1, r3
   164c0:	beq	16534 <build_ast@@Base+0xca0>
   164c4:	cmp	r2, #0
   164c8:	push	{r4, r5, lr}
   164cc:	sub	sp, sp, #12
   164d0:	ldreq	r2, [r0]
   164d4:	lsr	r3, r1, #24
   164d8:	ldr	r0, [pc, #96]	; 16540 <build_ast@@Base+0xcac>
   164dc:	lsr	r5, r1, #16
   164e0:	lsr	r4, r1, #8
   164e4:	strb	r1, [sp, #3]
   164e8:	strb	r3, [sp]
   164ec:	mov	r1, #53	; 0x35
   164f0:	mov	r3, #42	; 0x2a
   164f4:	mov	lr, #54	; 0x36
   164f8:	mov	ip, #48	; 0x30
   164fc:	strb	r1, [sp, #6]
   16500:	strb	r3, [sp, #7]
   16504:	mov	r1, r2
   16508:	mov	r3, sp
   1650c:	add	r2, sp, #4
   16510:	add	r0, pc, r0
   16514:	strb	r5, [sp, #1]
   16518:	strb	r4, [sp, #2]
   1651c:	strb	lr, [sp, #4]
   16520:	strb	ip, [sp, #5]
   16524:	bl	15af0 <build_ast@@Base+0x25c>
   16528:	mov	r0, #0
   1652c:	add	sp, sp, #12
   16530:	pop	{r4, r5, pc}
   16534:	mov	r0, #1
   16538:	bx	lr
   1653c:	ldrtcc	r3, [r0], -sl, lsr #10
   16540:	andeq	r1, r0, r0, lsr #29
   16544:	ldr	r2, [r2, #16]
   16548:	push	{r4, r5, r6, lr}
   1654c:	cmp	r2, #0
   16550:	mov	r6, r3
   16554:	ldr	ip, [sp, #16]
   16558:	beq	16624 <build_ast@@Base+0xd90>
   1655c:	ldr	r3, [r3, #12]
   16560:	cmp	r1, #0
   16564:	addeq	r2, r3, #1
   16568:	streq	r2, [r6, #12]
   1656c:	cmp	r3, #0
   16570:	beq	165c8 <build_ast@@Base+0xd34>
   16574:	ldrd	r0, [ip, #16]
   16578:	ldrd	r2, [r6, #16]
   1657c:	ldrd	r4, [r6, #24]
   16580:	adds	r2, r2, r0
   16584:	adc	r3, r3, r1
   16588:	strd	r2, [r6, #16]
   1658c:	ldrd	r0, [ip, #24]
   16590:	cmp	r4, r0
   16594:	sbcs	r3, r5, r1
   16598:	blt	16648 <build_ast@@Base+0xdb4>
   1659c:	ldrd	r2, [r6, #32]
   165a0:	adds	r2, r2, r0
   165a4:	adc	r3, r3, r1
   165a8:	strd	r2, [r6, #32]
   165ac:	add	r1, ip, #40	; 0x28
   165b0:	add	r0, r6, #40	; 0x28
   165b4:	bl	15f9c <build_ast@@Base+0x708>
   165b8:	ldr	r3, [sp, #20]
   165bc:	mov	r0, #0
   165c0:	str	r3, [r6]
   165c4:	pop	{r4, r5, r6, pc}
   165c8:	ldr	r1, [ip, #8]
   165cc:	ldrd	r2, [r6, #16]
   165d0:	str	r1, [r6, #8]
   165d4:	ldrd	r0, [ip, #16]
   165d8:	ldrd	r4, [r6, #24]
   165dc:	adds	r2, r2, r0
   165e0:	adc	r3, r3, r1
   165e4:	strd	r2, [r6, #16]
   165e8:	ldrd	r0, [ip, #24]
   165ec:	cmp	r4, r0
   165f0:	sbcs	r3, r5, r1
   165f4:	bge	16664 <build_ast@@Base+0xdd0>
   165f8:	ldrd	r2, [r6, #32]
   165fc:	strd	r0, [r6, #24]
   16600:	ldrd	r0, [ip, #24]
   16604:	adds	r2, r2, r0
   16608:	adc	r3, r3, r1
   1660c:	strd	r2, [r6, #32]
   16610:	add	r1, ip, #40	; 0x28
   16614:	ldr	r2, [pc, #92]	; 16678 <build_ast@@Base+0xde4>
   16618:	add	r0, r6, #40	; 0x28
   1661c:	bl	118ac <memcpy@plt>
   16620:	b	165b8 <build_ast@@Base+0xd24>
   16624:	ldr	r3, [r3, #12]
   16628:	cmp	r3, #0
   1662c:	beq	165b8 <build_ast@@Base+0xd24>
   16630:	mov	r1, r0
   16634:	ldr	r0, [pc, #64]	; 1667c <build_ast@@Base+0xde8>
   16638:	add	r0, pc, r0
   1663c:	bl	15af0 <build_ast@@Base+0x25c>
   16640:	mvn	r0, #0
   16644:	pop	{r4, r5, r6, pc}
   16648:	ldrd	r2, [r6, #32]
   1664c:	strd	r0, [r6, #24]
   16650:	ldrd	r0, [ip, #24]
   16654:	adds	r2, r2, r0
   16658:	adc	r3, r3, r1
   1665c:	strd	r2, [r6, #32]
   16660:	b	165ac <build_ast@@Base+0xd18>
   16664:	ldrd	r2, [r6, #32]
   16668:	adds	r2, r2, r0
   1666c:	adc	r3, r3, r1
   16670:	strd	r2, [r6, #32]
   16674:	b	16610 <build_ast@@Base+0xd7c>
   16678:	andeq	r1, r0, r0, lsr #15
   1667c:			; <UNDEFINED> instruction: 0x00001db0
   16680:	ldr	ip, [pc, #52]	; 166bc <build_ast@@Base+0xe28>
   16684:	ldr	r3, [pc, #52]	; 166c0 <build_ast@@Base+0xe2c>
   16688:	add	ip, pc, ip
   1668c:	push	{r4, lr}
   16690:	mov	lr, #0
   16694:	ldr	r3, [ip, r3]
   16698:	mvn	r4, #0
   1669c:	mov	r2, lr
   166a0:	mov	r1, lr
   166a4:	str	r4, [r3, #24]
   166a8:	str	lr, [r3, #4]
   166ac:	str	lr, [r3, #8]
   166b0:	ldr	r0, [r3]
   166b4:	pop	{r4, lr}
   166b8:	b	119e4 <fseek@plt>
   166bc:	andeq	r2, r1, r0, ror r9
   166c0:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   166c4:	push	{r4, r5, r6, r7, lr}
   166c8:	sub	sp, sp, #108	; 0x6c
   166cc:	mov	r4, #0
   166d0:	mov	r7, r0
   166d4:	strh	r4, [sp, #2]
   166d8:	str	r4, [sp, #4]
   166dc:	str	r4, [sp, #8]
   166e0:	bl	1193c <getpid@plt>
   166e4:	ldr	r3, [pc, #240]	; 167dc <build_ast@@Base+0xf48>
   166e8:	ldr	ip, [pc, #240]	; 167e0 <build_ast@@Base+0xf4c>
   166ec:	add	r3, pc, r3
   166f0:	mvn	lr, #0
   166f4:	mov	r6, #1
   166f8:	ldr	r2, [pc, #228]	; 167e4 <build_ast@@Base+0xf50>
   166fc:	mov	r1, #66	; 0x42
   16700:	str	r0, [sp, #12]
   16704:	ldr	r5, [r3, ip]
   16708:	mov	r0, r7
   1670c:	strh	r6, [sp]
   16710:	str	r4, [r5, #4]
   16714:	str	r4, [r5, #12]
   16718:	str	r4, [r5, #8]
   1671c:	str	r4, [r5, #20]
   16720:	str	lr, [r5, #16]
   16724:	bl	11930 <open@plt>
   16728:	subs	r6, r0, #0
   1672c:	movlt	r0, r4
   16730:	blt	167b0 <build_ast@@Base+0xf1c>
   16734:	mov	r7, sp
   16738:	mov	r4, #7
   1673c:	mov	r2, r7
   16740:	mov	r1, r4
   16744:	mov	r0, r6
   16748:	bl	11990 <fcntl@plt>
   1674c:	cmp	r0, #0
   16750:	beq	16764 <build_ast@@Base+0xed0>
   16754:	bl	1196c <__errno_location@plt>
   16758:	ldr	r3, [r0]
   1675c:	cmp	r3, #4
   16760:	beq	1673c <build_ast@@Base+0xea8>
   16764:	ldr	r1, [pc, #124]	; 167e8 <build_ast@@Base+0xf54>
   16768:	mov	r0, r6
   1676c:	add	r1, pc, r1
   16770:	bl	11864 <fdopen@plt>
   16774:	mov	r4, r0
   16778:	cmp	r4, #0
   1677c:	mov	r0, r6
   16780:	str	r4, [r5]
   16784:	beq	167b8 <build_ast@@Base+0xf24>
   16788:	add	r1, sp, #16
   1678c:	bl	17ba4 <__libc_csu_fini@@Base+0x1c>
   16790:	cmp	r0, #0
   16794:	blt	167c4 <build_ast@@Base+0xf30>
   16798:	mov	r4, #1
   1679c:	ldr	r0, [r5]
   167a0:	mov	r1, #0
   167a4:	str	r4, [r5, #24]
   167a8:	bl	1187c <setbuf@plt>
   167ac:	mov	r0, r4
   167b0:	add	sp, sp, #108	; 0x6c
   167b4:	pop	{r4, r5, r6, r7, pc}
   167b8:	bl	11a14 <close@plt>
   167bc:	mov	r0, r4
   167c0:	b	167b0 <build_ast@@Base+0xf1c>
   167c4:	mov	r4, #0
   167c8:	ldr	r0, [r5]
   167cc:	bl	119b4 <fclose@plt>
   167d0:	str	r4, [r5]
   167d4:	mov	r0, r4
   167d8:	b	167b0 <build_ast@@Base+0xf1c>
   167dc:	andeq	r2, r1, ip, lsl #18
   167e0:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   167e4:			; <UNDEFINED> instruction: 0x000001b6
   167e8:	andeq	r1, r0, r8, lsr #25
   167ec:	push	{r4, r5, r6, lr}
   167f0:	mov	r4, r1
   167f4:	ldr	r5, [pc, #244]	; 168f0 <build_ast@@Base+0x105c>
   167f8:	ldr	ip, [r4, #8]
   167fc:	ldr	lr, [r4, #12]
   16800:	ldr	r6, [r4]
   16804:	cmp	ip, #0
   16808:	mov	r1, r0
   1680c:	add	r5, pc, r5
   16810:	add	r0, r6, lr
   16814:	ble	16850 <build_ast@@Base+0xfbc>
   16818:	ldrb	r3, [r1]
   1681c:	cmp	r3, #47	; 0x2f
   16820:	addeq	r2, r1, #1
   16824:	ldrbeq	r3, [r1, #1]
   16828:	movne	r2, r1
   1682c:	cmp	r3, #0
   16830:	beq	16850 <build_ast@@Base+0xfbc>
   16834:	cmp	r3, #47	; 0x2f
   16838:	moveq	r1, r2
   1683c:	ldrb	r3, [r2, #1]!
   16840:	subeq	ip, ip, #1
   16844:	cmp	r3, #0
   16848:	cmpne	ip, #0
   1684c:	bne	16834 <build_ast@@Base+0xfa0>
   16850:	cmp	lr, #0
   16854:	beq	1686c <build_ast@@Base+0xfd8>
   16858:	ldrb	r3, [r1]
   1685c:	cmp	r3, #47	; 0x2f
   16860:	addne	r0, r0, #1
   16864:	movne	r3, #47	; 0x2f
   16868:	strbne	r3, [r6, lr]
   1686c:	bl	118d0 <strcpy@plt>
   16870:	ldr	r0, [r4]
   16874:	bl	166c4 <build_ast@@Base+0xe30>
   16878:	cmp	r0, #0
   1687c:	beq	16888 <build_ast@@Base+0xff4>
   16880:	mov	r0, #0
   16884:	pop	{r4, r5, r6, pc}
   16888:	ldr	r0, [r4]
   1688c:	bl	163f4 <build_ast@@Base+0xb60>
   16890:	cmp	r0, #0
   16894:	bne	168cc <build_ast@@Base+0x1038>
   16898:	ldr	r0, [r4]
   1689c:	bl	166c4 <build_ast@@Base+0xe30>
   168a0:	cmp	r0, #0
   168a4:	bne	16880 <build_ast@@Base+0xfec>
   168a8:	ldr	r3, [pc, #68]	; 168f4 <build_ast@@Base+0x1060>
   168ac:	ldr	r1, [pc, #68]	; 168f8 <build_ast@@Base+0x1064>
   168b0:	ldr	r2, [r4]
   168b4:	ldr	r3, [r5, r3]
   168b8:	add	r1, pc, r1
   168bc:	ldr	r0, [r3]
   168c0:	bl	11960 <fprintf@plt>
   168c4:	mvn	r0, #0
   168c8:	pop	{r4, r5, r6, pc}
   168cc:	ldr	r3, [pc, #32]	; 168f4 <build_ast@@Base+0x1060>
   168d0:	ldr	r1, [pc, #36]	; 168fc <build_ast@@Base+0x1068>
   168d4:	ldr	r2, [r4]
   168d8:	ldr	r3, [r5, r3]
   168dc:	add	r1, pc, r1
   168e0:	ldr	r0, [r3]
   168e4:	bl	11960 <fprintf@plt>
   168e8:	mvn	r0, #0
   168ec:	pop	{r4, r5, r6, pc}
   168f0:	andeq	r2, r1, ip, ror #15
   168f4:	andeq	r0, r0, r4, lsr #1
   168f8:	andeq	r1, r0, r4, ror fp
   168fc:	andeq	r1, r0, ip, lsr fp
   16900:	ldr	r3, [pc, #96]	; 16968 <build_ast@@Base+0x10d4>
   16904:	ldr	r2, [pc, #96]	; 1696c <build_ast@@Base+0x10d8>
   16908:	add	r3, pc, r3
   1690c:	push	{r4, lr}
   16910:	ldr	r4, [r3, r2]
   16914:	ldr	r0, [r4]
   16918:	cmp	r0, #0
   1691c:	beq	1693c <build_ast@@Base+0x10a8>
   16920:	ldr	r3, [r4, #8]
   16924:	cmp	r3, #0
   16928:	bne	1694c <build_ast@@Base+0x10b8>
   1692c:	bl	119b4 <fclose@plt>
   16930:	mov	r3, #0
   16934:	str	r3, [r4]
   16938:	str	r3, [r4, #12]
   1693c:	mov	r3, #0
   16940:	str	r3, [r4, #24]
   16944:	ldr	r0, [r4, #20]
   16948:	pop	{r4, pc}
   1694c:	ldr	r2, [r4, #24]
   16950:	cmp	r2, #0
   16954:	bge	1692c <build_ast@@Base+0x1098>
   16958:	mov	r0, r3
   1695c:	bl	1597c <build_ast@@Base+0xe8>
   16960:	ldr	r0, [r4]
   16964:	b	1692c <build_ast@@Base+0x1098>
   16968:	strdeq	r2, [r1], -r0
   1696c:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   16970:	push	{r4, lr}
   16974:	mov	r4, r0
   16978:	mov	r0, #1
   1697c:	bl	159d8 <build_ast@@Base+0x144>
   16980:	str	r4, [r0]
   16984:	pop	{r4, pc}
   16988:	push	{r4, r5, r6, lr}
   1698c:	mov	r5, r0
   16990:	mov	r0, #2
   16994:	mov	r4, r1
   16998:	bl	159d8 <build_ast@@Base+0x144>
   1699c:	str	r5, [r0]
   169a0:	str	r4, [r0, #4]
   169a4:	pop	{r4, r5, r6, pc}
   169a8:	push	{r4, r5, r6, lr}
   169ac:	mov	r5, r0
   169b0:	mov	r0, #2
   169b4:	mov	r4, r1
   169b8:	bl	159d8 <build_ast@@Base+0x144>
   169bc:	str	r5, [r0]
   169c0:	str	r4, [r0, #4]
   169c4:	pop	{r4, r5, r6, pc}
   169c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   169cc:	sub	sp, sp, #32
   169d0:	mov	r7, sp
   169d4:	mov	r5, r1
   169d8:	mov	r6, sp
   169dc:	add	r2, sp, #32
   169e0:	mov	r3, #0
   169e4:	str	r3, [r6], #4
   169e8:	cmp	r2, r6
   169ec:	bne	169e4 <build_ast@@Base+0x1150>
   169f0:	mov	r8, #0
   169f4:	mov	r3, r8
   169f8:	mov	r4, r5
   169fc:	mov	r1, r5
   16a00:	mov	r9, #1
   16a04:	lsr	r2, r3, #5
   16a08:	ldr	lr, [r1, #40]	; 0x28
   16a0c:	add	ip, sp, #32
   16a10:	cmp	lr, #0
   16a14:	add	r2, ip, r2, lsl #2
   16a18:	and	sl, r3, #31
   16a1c:	ldrne	ip, [r2, #-32]	; 0xffffffe0
   16a20:	add	r3, r3, #1
   16a24:	orrne	ip, ip, r9, lsl sl
   16a28:	addne	r8, r8, #1
   16a2c:	strne	ip, [r2, #-32]	; 0xffffffe0
   16a30:	cmp	r3, #252	; 0xfc
   16a34:	add	r1, r1, #24
   16a38:	bne	16a04 <build_ast@@Base+0x1170>
   16a3c:	add	r8, r8, r8, lsl #2
   16a40:	add	r1, r8, #17
   16a44:	bl	169a8 <build_ast@@Base+0x1114>
   16a48:	ldr	r0, [r5]
   16a4c:	bl	16970 <build_ast@@Base+0x10dc>
   16a50:	ldr	r0, [r5, #8]
   16a54:	bl	16970 <build_ast@@Base+0x10dc>
   16a58:	ldr	r0, [r5, #12]
   16a5c:	bl	16970 <build_ast@@Base+0x10dc>
   16a60:	ldrd	r0, [r5, #16]
   16a64:	bl	16988 <build_ast@@Base+0x10f4>
   16a68:	ldrd	r0, [r5, #24]
   16a6c:	bl	16988 <build_ast@@Base+0x10f4>
   16a70:	ldrd	r0, [r5, #32]
   16a74:	bl	16988 <build_ast@@Base+0x10f4>
   16a78:	ldr	r0, [r7], #4
   16a7c:	bl	16970 <build_ast@@Base+0x10dc>
   16a80:	cmp	r7, r6
   16a84:	bne	16a78 <build_ast@@Base+0x11e4>
   16a88:	add	r5, r5, #6016	; 0x1780
   16a8c:	add	r5, r5, #32
   16a90:	b	16aa0 <build_ast@@Base+0x120c>
   16a94:	add	r4, r4, #24
   16a98:	cmp	r4, r5
   16a9c:	beq	16acc <build_ast@@Base+0x1238>
   16aa0:	ldr	r0, [r4, #40]	; 0x28
   16aa4:	cmp	r0, #0
   16aa8:	beq	16a94 <build_ast@@Base+0x1200>
   16aac:	bl	16970 <build_ast@@Base+0x10dc>
   16ab0:	ldrd	r0, [r4, #48]	; 0x30
   16ab4:	bl	16988 <build_ast@@Base+0x10f4>
   16ab8:	add	r4, r4, #24
   16abc:	ldrd	r0, [r4, #32]
   16ac0:	bl	16988 <build_ast@@Base+0x10f4>
   16ac4:	cmp	r4, r5
   16ac8:	bne	16aa0 <build_ast@@Base+0x120c>
   16acc:	add	sp, sp, #32
   16ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16ad4:	push	{r4, lr}
   16ad8:	mov	r0, #1
   16adc:	bl	15a34 <build_ast@@Base+0x1a0>
   16ae0:	subs	r3, r0, #0
   16ae4:	popeq	{r4, pc}
   16ae8:	ldr	r0, [r3]
   16aec:	pop	{r4, lr}
   16af0:	b	1594c <build_ast@@Base+0xb8>
   16af4:	push	{r4, r5, r6, lr}
   16af8:	mov	r0, #2
   16afc:	bl	15a34 <build_ast@@Base+0x1a0>
   16b00:	subs	r3, r0, #0
   16b04:	beq	16b34 <build_ast@@Base+0x12a0>
   16b08:	ldr	r0, [r3]
   16b0c:	bl	1594c <build_ast@@Base+0xb8>
   16b10:	mov	r5, #0
   16b14:	mov	r4, r0
   16b18:	ldr	r0, [r3, #4]
   16b1c:	bl	1594c <build_ast@@Base+0xb8>
   16b20:	mov	r2, #0
   16b24:	mov	r3, r0
   16b28:	orr	r1, r3, r5
   16b2c:	orr	r0, r2, r4
   16b30:	pop	{r4, r5, r6, pc}
   16b34:	mov	r0, #0
   16b38:	mov	r1, #0
   16b3c:	pop	{r4, r5, r6, pc}
   16b40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b44:	sub	sp, sp, #28
   16b48:	mov	r4, #0
   16b4c:	str	r1, [sp, #8]
   16b50:	str	r3, [sp, #12]
   16b54:	add	r3, r1, #56	; 0x38
   16b58:	add	r1, r1, #16
   16b5c:	str	r0, [sp, #16]
   16b60:	str	r2, [sp, #20]
   16b64:	ldr	r2, [r3, #-4]!
   16b68:	cmp	r2, #0
   16b6c:	addne	r4, r4, #1
   16b70:	cmp	r3, r1
   16b74:	bne	16b64 <build_ast@@Base+0x12d0>
   16b78:	add	r4, r4, #4
   16b7c:	lsl	r4, r4, #3
   16b80:	mov	r0, r4
   16b84:	bl	11900 <malloc@plt>
   16b88:	subs	r8, r0, #0
   16b8c:	beq	16c50 <build_ast@@Base+0x13bc>
   16b90:	ldr	r3, [sp, #12]
   16b94:	mov	r4, #0
   16b98:	str	r3, [r8, #4]
   16b9c:	str	r4, [r8]
   16ba0:	bl	16ad4 <build_ast@@Base+0x1240>
   16ba4:	ldr	r3, [sp, #8]
   16ba8:	ldr	r5, [pc, #272]	; 16cc0 <build_ast@@Base+0x142c>
   16bac:	add	r6, r3, #12
   16bb0:	mov	r7, r4
   16bb4:	str	r0, [r8, #12]
   16bb8:	bl	16ad4 <build_ast@@Base+0x1240>
   16bbc:	str	r0, [r8, #16]
   16bc0:	bl	16ad4 <build_ast@@Base+0x1240>
   16bc4:	str	r0, [r8, #20]
   16bc8:	ldr	r3, [r6, #4]!
   16bcc:	cmp	r3, #0
   16bd0:	beq	16c2c <build_ast@@Base+0x1398>
   16bd4:	bl	16ad4 <build_ast@@Base+0x1240>
   16bd8:	cmp	r5, r0
   16bdc:	bne	16ca4 <build_ast@@Base+0x1410>
   16be0:	bl	16ad4 <build_ast@@Base+0x1240>
   16be4:	lsr	r9, r0, #1
   16be8:	lsl	fp, r9, #3
   16bec:	mov	r0, fp
   16bf0:	bl	11900 <malloc@plt>
   16bf4:	subs	sl, r0, #0
   16bf8:	beq	16cb4 <build_ast@@Base+0x1420>
   16bfc:	add	r3, r8, r7, lsl #3
   16c00:	cmp	r9, #0
   16c04:	str	r9, [r3, #24]
   16c08:	str	sl, [r3, #28]
   16c0c:	sub	r9, r9, #1
   16c10:	beq	16c28 <build_ast@@Base+0x1394>
   16c14:	bl	16af4 <build_ast@@Base+0x1260>
   16c18:	sub	r9, r9, #1
   16c1c:	cmn	r9, #1
   16c20:	strd	r0, [sl], #8
   16c24:	bne	16c14 <build_ast@@Base+0x1380>
   16c28:	add	r7, r7, #1
   16c2c:	add	r4, r4, #1
   16c30:	cmp	r4, #10
   16c34:	add	r5, r5, #131072	; 0x20000
   16c38:	bne	16bc8 <build_ast@@Base+0x1334>
   16c3c:	ldr	r3, [sp, #20]
   16c40:	mov	r0, r8
   16c44:	str	r8, [r3]
   16c48:	add	sp, sp, #28
   16c4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c50:	mvn	r5, #0
   16c54:	cmp	r4, #0
   16c58:	beq	16c94 <build_ast@@Base+0x1400>
   16c5c:	ldr	r3, [pc, #96]	; 16cc4 <build_ast@@Base+0x1430>
   16c60:	add	r3, pc, r3
   16c64:	ldr	r0, [pc, #92]	; 16cc8 <build_ast@@Base+0x1434>
   16c68:	ldr	r2, [sp, #12]
   16c6c:	ldr	r1, [sp, #16]
   16c70:	str	r4, [sp]
   16c74:	add	r0, pc, r0
   16c78:	bl	15af0 <build_ast@@Base+0x25c>
   16c7c:	mov	r2, r5
   16c80:	mov	r1, r8
   16c84:	ldr	r0, [sp, #8]
   16c88:	add	sp, sp, #28
   16c8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c90:	b	15b38 <build_ast@@Base+0x2a4>
   16c94:	ldr	r3, [pc, #48]	; 16ccc <build_ast@@Base+0x1438>
   16c98:	mov	r4, r5
   16c9c:	add	r3, pc, r3
   16ca0:	b	16c64 <build_ast@@Base+0x13d0>
   16ca4:	ldr	r3, [pc, #36]	; 16cd0 <build_ast@@Base+0x143c>
   16ca8:	mov	r5, r4
   16cac:	add	r3, pc, r3
   16cb0:	b	16c64 <build_ast@@Base+0x13d0>
   16cb4:	mov	r5, r4
   16cb8:	mov	r4, fp
   16cbc:	b	16c54 <build_ast@@Base+0x13c0>
   16cc0:			; <UNDEFINED> instruction: 0x01a10000
   16cc4:	andeq	r1, r0, r8, ror #15
   16cc8:	strdeq	r1, [r0], -r8
   16ccc:			; <UNDEFINED> instruction: 0x000017bc
   16cd0:	andeq	r1, r0, ip, lsr #15
   16cd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cd8:	sub	sp, sp, #44	; 0x2c
   16cdc:	mov	r9, r0
   16ce0:	bl	16ad4 <build_ast@@Base+0x1240>
   16ce4:	mov	r7, #0
   16ce8:	add	sl, sp, #8
   16cec:	mov	r4, sl
   16cf0:	add	r5, sp, #40	; 0x28
   16cf4:	str	r0, [r9]
   16cf8:	bl	16ad4 <build_ast@@Base+0x1240>
   16cfc:	str	r0, [r9, #8]
   16d00:	bl	16ad4 <build_ast@@Base+0x1240>
   16d04:	str	r0, [r9, #12]
   16d08:	bl	16af4 <build_ast@@Base+0x1260>
   16d0c:	strd	r0, [r9, #16]
   16d10:	bl	16af4 <build_ast@@Base+0x1260>
   16d14:	strd	r0, [r9, #24]
   16d18:	bl	16af4 <build_ast@@Base+0x1260>
   16d1c:	ldr	r2, [pc, #244]	; 16e18 <build_ast@@Base+0x1584>
   16d20:	strd	r0, [r9, #32]
   16d24:	add	r0, r9, #40	; 0x28
   16d28:	mov	r1, r7
   16d2c:	bl	1199c <memset@plt>
   16d30:	bl	16ad4 <build_ast@@Base+0x1240>
   16d34:	str	r0, [r4], #4
   16d38:	bl	179bc <__gcov_sort_n_vals@@Base+0x618>
   16d3c:	cmp	r5, r4
   16d40:	add	r7, r7, r0
   16d44:	bne	16d30 <build_ast@@Base+0x149c>
   16d48:	cmp	r7, #0
   16d4c:	sub	r7, r7, #1
   16d50:	beq	16e04 <build_ast@@Base+0x1570>
   16d54:	ldr	r8, [pc, #192]	; 16e1c <build_ast@@Base+0x1588>
   16d58:	mov	r4, #0
   16d5c:	ldr	r3, [pc, #188]	; 16e20 <build_ast@@Base+0x158c>
   16d60:	add	r8, pc, r8
   16d64:	mov	r5, r4
   16d68:	mov	r6, r4
   16d6c:	add	r3, pc, r3
   16d70:	str	r3, [sp, #4]
   16d74:	cmp	r4, #0
   16d78:	addeq	r6, sl, r5, lsl #2
   16d7c:	beq	16d88 <build_ast@@Base+0x14f4>
   16d80:	b	16db0 <build_ast@@Base+0x151c>
   16d84:	mov	r5, r3
   16d88:	cmp	r5, #7
   16d8c:	bls	16d98 <build_ast@@Base+0x1504>
   16d90:	mov	r0, r8
   16d94:	bl	15af0 <build_ast@@Base+0x25c>
   16d98:	ldr	r4, [r6], #4
   16d9c:	add	r3, r5, #1
   16da0:	cmp	r4, #0
   16da4:	beq	16d84 <build_ast@@Base+0x14f0>
   16da8:	lsl	r6, r5, #5
   16dac:	mov	r5, r3
   16db0:	tst	r4, #1
   16db4:	bne	16dc8 <build_ast@@Base+0x1534>
   16db8:	lsr	r4, r4, #1
   16dbc:	tst	r4, #1
   16dc0:	add	r6, r6, #1
   16dc4:	beq	16db8 <build_ast@@Base+0x1524>
   16dc8:	cmp	r6, #251	; 0xfb
   16dcc:	bhi	16e0c <build_ast@@Base+0x1578>
   16dd0:	bl	16ad4 <build_ast@@Base+0x1240>
   16dd4:	add	r3, r6, r6, lsl #1
   16dd8:	sub	r7, r7, #1
   16ddc:	add	fp, r9, r3, lsl #3
   16de0:	lsr	r4, r4, #1
   16de4:	add	r6, r6, #1
   16de8:	str	r0, [fp, #40]	; 0x28
   16dec:	bl	16af4 <build_ast@@Base+0x1260>
   16df0:	strd	r0, [fp, #48]	; 0x30
   16df4:	bl	16af4 <build_ast@@Base+0x1260>
   16df8:	cmn	r7, #1
   16dfc:	strd	r0, [fp, #56]	; 0x38
   16e00:	bne	16d74 <build_ast@@Base+0x14e0>
   16e04:	add	sp, sp, #44	; 0x2c
   16e08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e0c:	ldr	r0, [sp, #4]
   16e10:	bl	15af0 <build_ast@@Base+0x25c>
   16e14:	b	16dd0 <build_ast@@Base+0x153c>
   16e18:	andeq	r1, r0, r0, lsr #15
   16e1c:	andeq	r1, r0, ip, ror #14
   16e20:	andeq	r1, r0, r4, lsr #14
   16e24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e28:	sub	sp, sp, #6080	; 0x17c0
   16e2c:	sub	sp, sp, #28
   16e30:	mov	r4, r1
   16e34:	stmib	sp, {r2, r3}
   16e38:	add	r3, sp, #6144	; 0x1800
   16e3c:	mov	sl, r0
   16e40:	ldr	r7, [r3]
   16e44:	add	r3, sp, #6144	; 0x1800
   16e48:	add	r3, r3, #4
   16e4c:	ldr	r6, [r3]
   16e50:	bl	16ad4 <build_ast@@Base+0x1240>
   16e54:	add	r3, r4, #12
   16e58:	mov	r2, sl
   16e5c:	str	r3, [sp, #12]
   16e60:	mov	r1, r0
   16e64:	mov	r0, r3
   16e68:	bl	164b8 <build_ast@@Base+0xc24>
   16e6c:	cmp	r0, #0
   16e70:	beq	170f0 <build_ast@@Base+0x185c>
   16e74:	bl	16ad4 <build_ast@@Base+0x1240>
   16e78:	ldr	r3, [r4, #8]
   16e7c:	cmp	r0, r3
   16e80:	beq	16e94 <build_ast@@Base+0x1600>
   16e84:	mov	r0, #0
   16e88:	add	sp, sp, #6080	; 0x17c0
   16e8c:	add	sp, sp, #28
   16e90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e94:	ldr	fp, [pc, #628]	; 17110 <build_ast@@Base+0x187c>
   16e98:	add	r9, sp, #2000	; 0x7d0
   16e9c:	add	r5, sp, #16
   16ea0:	add	fp, pc, fp
   16ea4:	add	r9, r9, #8
   16ea8:	bl	158fc <build_ast@@Base+0x68>
   16eac:	str	r0, [r6]
   16eb0:	bl	16ad4 <build_ast@@Base+0x1240>
   16eb4:	cmp	r0, #-1560281088	; 0xa3000000
   16eb8:	bne	16f5c <build_ast@@Base+0x16c8>
   16ebc:	bl	16ad4 <build_ast@@Base+0x1240>
   16ec0:	mov	r0, r5
   16ec4:	bl	16cd4 <build_ast@@Base+0x1440>
   16ec8:	bl	15920 <build_ast@@Base+0x8c>
   16ecc:	subs	r8, r0, #0
   16ed0:	bne	17090 <build_ast@@Base+0x17fc>
   16ed4:	ldr	r3, [r7]
   16ed8:	cmp	r3, #0
   16edc:	bne	16f28 <build_ast@@Base+0x1694>
   16ee0:	add	r2, sp, #6144	; 0x1800
   16ee4:	add	r2, r2, #8
   16ee8:	ldr	r3, [r9, #-1992]	; 0xfffff838
   16eec:	ldr	r2, [r2]
   16ef0:	cmp	r3, r2
   16ef4:	bne	16ea8 <build_ast@@Base+0x1614>
   16ef8:	ldr	r3, [sp, #8]
   16efc:	ldr	ip, [r9, #-1984]	; 0xfffff840
   16f00:	ldr	r2, [pc, #524]	; 17114 <build_ast@@Base+0x1880>
   16f04:	ldr	r3, [r3, #8]
   16f08:	mov	r1, r5
   16f0c:	cmp	ip, r3
   16f10:	ldr	r0, [sp, #4]
   16f14:	bne	16ea8 <build_ast@@Base+0x1614>
   16f18:	bl	118ac <memcpy@plt>
   16f1c:	ldr	r3, [r6]
   16f20:	str	r3, [r7]
   16f24:	b	16ea8 <build_ast@@Base+0x1614>
   16f28:	ldr	r0, [pc, #488]	; 17118 <build_ast@@Base+0x1884>
   16f2c:	bl	11900 <malloc@plt>
   16f30:	ldr	r2, [pc, #476]	; 17114 <build_ast@@Base+0x1880>
   16f34:	mov	r1, r5
   16f38:	mov	r3, r0
   16f3c:	str	r0, [fp]
   16f40:	add	r0, r0, #8
   16f44:	str	r3, [sp]
   16f48:	bl	118ac <memcpy@plt>
   16f4c:	ldr	r3, [sp]
   16f50:	str	r8, [r3]
   16f54:	ldr	fp, [fp]
   16f58:	b	16ea8 <build_ast@@Base+0x1614>
   16f5c:	ldr	r5, [r4, #56]	; 0x38
   16f60:	cmp	r5, #0
   16f64:	beq	170f8 <build_ast@@Base+0x1864>
   16f68:	ldr	r3, [r4, #60]	; 0x3c
   16f6c:	cmp	r0, #16777216	; 0x1000000
   16f70:	ldr	r8, [r3]
   16f74:	bne	170c0 <build_ast@@Base+0x182c>
   16f78:	ldr	r6, [pc, #412]	; 1711c <build_ast@@Base+0x1888>
   16f7c:	mov	r5, #0
   16f80:	add	r6, pc, r6
   16f84:	add	r6, r6, #4
   16f88:	b	16fcc <build_ast@@Base+0x1738>
   16f8c:	mov	r2, r6
   16f90:	mov	r3, r5
   16f94:	mov	r1, r4
   16f98:	mov	r0, sl
   16f9c:	bl	16b40 <build_ast@@Base+0x12ac>
   16fa0:	subs	r6, r0, #0
   16fa4:	beq	170c4 <build_ast@@Base+0x1830>
   16fa8:	bl	16ad4 <build_ast@@Base+0x1240>
   16fac:	ldr	r3, [r4, #56]	; 0x38
   16fb0:	add	r5, r5, #1
   16fb4:	cmp	r3, r5
   16fb8:	beq	170f8 <build_ast@@Base+0x1864>
   16fbc:	ldr	r3, [r4, #60]	; 0x3c
   16fc0:	cmp	r0, #16777216	; 0x1000000
   16fc4:	ldr	r8, [r3, r5, lsl #2]
   16fc8:	bne	170c4 <build_ast@@Base+0x1830>
   16fcc:	bl	16ad4 <build_ast@@Base+0x1240>
   16fd0:	cmp	r0, #0
   16fd4:	beq	16fa8 <build_ast@@Base+0x1714>
   16fd8:	cmp	r0, #3
   16fdc:	bne	170c4 <build_ast@@Base+0x1830>
   16fe0:	cmp	r8, #0
   16fe4:	beq	16f8c <build_ast@@Base+0x16f8>
   16fe8:	ldr	r3, [r8]
   16fec:	cmp	r4, r3
   16ff0:	bne	16f8c <build_ast@@Base+0x16f8>
   16ff4:	bl	16ad4 <build_ast@@Base+0x1240>
   16ff8:	ldr	r3, [r8, #4]
   16ffc:	cmp	r0, r3
   17000:	bne	170c4 <build_ast@@Base+0x1830>
   17004:	bl	16ad4 <build_ast@@Base+0x1240>
   17008:	ldr	r3, [r8, #8]
   1700c:	cmp	r0, r3
   17010:	bne	170c4 <build_ast@@Base+0x1830>
   17014:	bl	16ad4 <build_ast@@Base+0x1240>
   17018:	ldr	r3, [r8, #12]
   1701c:	cmp	r0, r3
   17020:	bne	170c4 <build_ast@@Base+0x1830>
   17024:	ldr	r7, [pc, #244]	; 17120 <build_ast@@Base+0x188c>
   17028:	ldr	fp, [sp, #12]
   1702c:	add	r8, r8, #16
   17030:	ldr	r9, [fp, #4]!
   17034:	cmp	r9, #0
   17038:	beq	17070 <build_ast@@Base+0x17dc>
   1703c:	bl	16ad4 <build_ast@@Base+0x1240>
   17040:	str	r0, [sp]
   17044:	bl	16ad4 <build_ast@@Base+0x1240>
   17048:	ldr	r3, [sp]
   1704c:	cmp	r3, r7
   17050:	bne	170c4 <build_ast@@Base+0x1830>
   17054:	ldr	r3, [r8]
   17058:	mov	r1, r3
   1705c:	cmp	r0, r3, lsl #1
   17060:	bne	170c4 <build_ast@@Base+0x1830>
   17064:	ldr	r0, [r8, #4]
   17068:	blx	r9
   1706c:	add	r8, r8, #8
   17070:	ldr	r3, [pc, #172]	; 17124 <build_ast@@Base+0x1890>
   17074:	add	r7, r7, #131072	; 0x20000
   17078:	cmp	r7, r3
   1707c:	bne	17030 <build_ast@@Base+0x179c>
   17080:	bl	15920 <build_ast@@Base+0x8c>
   17084:	cmp	r0, #0
   17088:	beq	16fa8 <build_ast@@Base+0x1714>
   1708c:	mov	r8, r0
   17090:	cmp	r8, #0
   17094:	blt	17104 <build_ast@@Base+0x1870>
   17098:	ldr	r2, [pc, #136]	; 17128 <build_ast@@Base+0x1894>
   1709c:	add	r2, pc, r2
   170a0:	ldr	r0, [pc, #132]	; 1712c <build_ast@@Base+0x1898>
   170a4:	mov	r1, sl
   170a8:	add	r0, pc, r0
   170ac:	bl	15af0 <build_ast@@Base+0x25c>
   170b0:	mvn	r0, #0
   170b4:	add	sp, sp, #6080	; 0x17c0
   170b8:	add	sp, sp, #28
   170bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170c0:	mov	r5, #0
   170c4:	ldr	r2, [pc, #100]	; 17130 <build_ast@@Base+0x189c>
   170c8:	ldr	r0, [pc, #100]	; 17134 <build_ast@@Base+0x18a0>
   170cc:	mov	r3, r5
   170d0:	mov	r1, sl
   170d4:	add	r2, pc, r2
   170d8:	add	r0, pc, r0
   170dc:	bl	15af0 <build_ast@@Base+0x25c>
   170e0:	mvn	r0, #0
   170e4:	add	sp, sp, #6080	; 0x17c0
   170e8:	add	sp, sp, #28
   170ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170f0:	mvn	r0, #0
   170f4:	b	16e88 <build_ast@@Base+0x15f4>
   170f8:	cmp	r0, #0
   170fc:	beq	16e84 <build_ast@@Base+0x15f0>
   17100:	b	170c4 <build_ast@@Base+0x1830>
   17104:	ldr	r2, [pc, #44]	; 17138 <build_ast@@Base+0x18a4>
   17108:	add	r2, pc, r2
   1710c:	b	170a0 <build_ast@@Base+0x180c>
   17110:	andeq	r3, r1, r8, lsr #17
   17114:	andeq	r1, r0, r8, asr #15
   17118:	ldrdeq	r1, [r0], -r0
   1711c:	andeq	r3, r1, r8, asr #15
   17120:			; <UNDEFINED> instruction: 0x01a10000
   17124:			; <UNDEFINED> instruction: 0x01b50000
   17128:	andeq	r1, r0, ip, ror r4
   1712c:	andeq	r1, r0, ip, lsr #9
   17130:	andeq	r1, r0, ip, asr #8
   17134:	andeq	r1, r0, r4, asr r4
   17138:	andeq	r1, r0, r4, lsl #8
   1713c:	ldr	r3, [pc, #68]	; 17188 <build_ast@@Base+0x18f4>
   17140:	ldr	r2, [pc, #68]	; 1718c <build_ast@@Base+0x18f8>
   17144:	add	r3, pc, r3
   17148:	push	{r4, r5, r6, lr}
   1714c:	mov	r5, r0
   17150:	ldr	r4, [r3, r2]
   17154:	ldr	r0, [r4, #8]
   17158:	cmp	r0, #0
   1715c:	beq	17164 <build_ast@@Base+0x18d0>
   17160:	bl	1597c <build_ast@@Base+0xe8>
   17164:	lsl	r1, r5, #2
   17168:	mov	r2, #0
   1716c:	ldr	r0, [r4]
   17170:	bl	119e4 <fseek@plt>
   17174:	ldr	r0, [r4]
   17178:	bl	118b8 <ftell@plt>
   1717c:	asr	r0, r0, #2
   17180:	str	r0, [r4, #4]
   17184:	pop	{r4, r5, r6, pc}
   17188:			; <UNDEFINED> instruction: 0x00011eb4
   1718c:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
   17190:	cmp	r2, #0
   17194:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17198:	mov	r9, r0
   1719c:	sub	sp, sp, #20
   171a0:	mov	r5, r1
   171a4:	mov	r4, r3
   171a8:	beq	17360 <build_ast@@Base+0x1acc>
   171ac:	cmp	r4, #0
   171b0:	bne	1737c <build_ast@@Base+0x1ae8>
   171b4:	mov	r1, r5
   171b8:	ldr	r5, [pc, #456]	; 17388 <build_ast@@Base+0x1af4>
   171bc:	mov	r0, #-1560281088	; 0xa3000000
   171c0:	add	r5, pc, r5
   171c4:	bl	169c8 <build_ast@@Base+0x1134>
   171c8:	ldr	r4, [r5]
   171cc:	cmp	r4, #0
   171d0:	movne	r6, #-1560281088	; 0xa3000000
   171d4:	beq	17200 <build_ast@@Base+0x196c>
   171d8:	add	r1, r4, #8
   171dc:	mov	r0, r6
   171e0:	bl	169c8 <build_ast@@Base+0x1134>
   171e4:	ldr	r3, [r5]
   171e8:	mov	r0, r3
   171ec:	ldr	r4, [r3]
   171f0:	bl	118a0 <free@plt>
   171f4:	cmp	r4, #0
   171f8:	str	r4, [r5]
   171fc:	bne	171d8 <build_ast@@Base+0x1944>
   17200:	ldr	r3, [r9, #56]	; 0x38
   17204:	cmp	r3, #0
   17208:	beq	17344 <build_ast@@Base+0x1ab0>
   1720c:	ldr	r3, [pc, #376]	; 1738c <build_ast@@Base+0x1af8>
   17210:	ldr	r8, [pc, #376]	; 17390 <build_ast@@Base+0x1afc>
   17214:	add	r3, pc, r3
   17218:	str	r3, [sp, #4]
   1721c:	ldr	r3, [pc, #368]	; 17394 <build_ast@@Base+0x1b00>
   17220:	mov	r7, #0
   17224:	add	r3, pc, r3
   17228:	str	r3, [sp, #12]
   1722c:	b	17268 <build_ast@@Base+0x19d4>
   17230:	ldr	r3, [r9, #60]	; 0x3c
   17234:	ldr	r4, [r3, r7, lsl #2]
   17238:	cmp	r4, #0
   1723c:	beq	1724c <build_ast@@Base+0x19b8>
   17240:	ldr	r3, [r4]
   17244:	cmp	r9, r3
   17248:	beq	17354 <build_ast@@Base+0x1ac0>
   1724c:	mov	r1, #0
   17250:	mov	r0, #16777216	; 0x1000000
   17254:	bl	169a8 <build_ast@@Base+0x1114>
   17258:	ldr	r3, [r9, #56]	; 0x38
   1725c:	add	r7, r7, #1
   17260:	cmp	r3, r7
   17264:	beq	17344 <build_ast@@Base+0x1ab0>
   17268:	ldr	r3, [sp, #4]
   1726c:	ldr	r4, [r3, #4]
   17270:	cmp	r4, #0
   17274:	beq	17230 <build_ast@@Base+0x199c>
   17278:	ldr	r3, [r4, #4]
   1727c:	cmp	r3, r7
   17280:	moveq	r3, #1
   17284:	addeq	r4, r4, #8
   17288:	streq	r3, [sp, #8]
   1728c:	bne	17230 <build_ast@@Base+0x199c>
   17290:	mov	r1, #3
   17294:	mov	r0, #16777216	; 0x1000000
   17298:	bl	169a8 <build_ast@@Base+0x1114>
   1729c:	ldr	r0, [r4, #4]
   172a0:	bl	16970 <build_ast@@Base+0x10dc>
   172a4:	ldr	r0, [r4, #8]
   172a8:	bl	16970 <build_ast@@Base+0x10dc>
   172ac:	ldr	r0, [r4, #12]
   172b0:	bl	16970 <build_ast@@Base+0x10dc>
   172b4:	ldr	r5, [pc, #220]	; 17398 <build_ast@@Base+0x1b04>
   172b8:	add	r4, r4, #16
   172bc:	add	r6, r9, #12
   172c0:	ldr	r3, [r6, #4]!
   172c4:	cmp	r3, #0
   172c8:	beq	17304 <build_ast@@Base+0x1a70>
   172cc:	ldr	fp, [r4]
   172d0:	mov	r0, r5
   172d4:	sub	sl, fp, #1
   172d8:	lsl	r1, fp, #1
   172dc:	bl	169a8 <build_ast@@Base+0x1114>
   172e0:	cmp	fp, #0
   172e4:	ldr	fp, [r4, #4]
   172e8:	beq	17300 <build_ast@@Base+0x1a6c>
   172ec:	sub	sl, sl, #1
   172f0:	ldrd	r0, [fp], #8
   172f4:	bl	16988 <build_ast@@Base+0x10f4>
   172f8:	cmn	sl, #1
   172fc:	bne	172ec <build_ast@@Base+0x1a58>
   17300:	add	r4, r4, #8
   17304:	add	r5, r5, #131072	; 0x20000
   17308:	cmp	r5, r8
   1730c:	bne	172c0 <build_ast@@Base+0x1a2c>
   17310:	ldr	r3, [sp, #8]
   17314:	cmp	r3, #0
   17318:	beq	17258 <build_ast@@Base+0x19c4>
   1731c:	ldr	r4, [sp, #12]
   17320:	mov	r2, #10
   17324:	mov	r0, r9
   17328:	ldr	r1, [r4, #4]
   1732c:	bl	15b38 <build_ast@@Base+0x2a4>
   17330:	ldr	r3, [r9, #56]	; 0x38
   17334:	add	r7, r7, #1
   17338:	cmp	r3, r7
   1733c:	str	r0, [r4, #4]
   17340:	bne	17268 <build_ast@@Base+0x19d4>
   17344:	mov	r0, #0
   17348:	add	sp, sp, #20
   1734c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17350:	b	16970 <build_ast@@Base+0x10dc>
   17354:	mov	r3, #0
   17358:	str	r3, [sp, #8]
   1735c:	b	17290 <build_ast@@Base+0x19fc>
   17360:	ldr	r1, [pc, #52]	; 1739c <build_ast@@Base+0x1b08>
   17364:	ldr	r0, [pc, #52]	; 173a0 <build_ast@@Base+0x1b0c>
   17368:	bl	169a8 <build_ast@@Base+0x1114>
   1736c:	ldr	r0, [r9, #8]
   17370:	bl	16970 <build_ast@@Base+0x10dc>
   17374:	cmp	r4, #0
   17378:	beq	171b4 <build_ast@@Base+0x1920>
   1737c:	mov	r0, r4
   17380:	bl	1713c <build_ast@@Base+0x18a8>
   17384:	b	171b4 <build_ast@@Base+0x1920>
   17388:	andeq	r3, r1, r8, lsl #11
   1738c:	andeq	r3, r1, r4, lsr r5
   17390:			; <UNDEFINED> instruction: 0x01b50000
   17394:	andeq	r3, r1, r4, lsr #10
   17398:			; <UNDEFINED> instruction: 0x01a10000
   1739c:	ldrtcc	r3, [r0], -sl, lsr #10
   173a0:	strbvs	r6, [r3, -r1, ror #8]!

000173a4 <__gcov_sort_n_vals@@Base>:
   173a4:	cmp	r1, #2
   173a8:	bxle	lr
   173ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173b0:	sub	lr, r1, #3
   173b4:	mov	ip, #0
   173b8:	lsr	lr, lr, #1
   173bc:	add	r1, r0, #8
   173c0:	add	lr, r0, lr, lsl #4
   173c4:	add	lr, lr, #24
   173c8:	ldrd	r4, [r1, #16]
   173cc:	ldrd	r6, [r1]
   173d0:	ldrd	r8, [r1, #8]
   173d4:	mov	r2, ip
   173d8:	cmp	r6, r4
   173dc:	sbcs	r3, r7, r5
   173e0:	mov	fp, ip
   173e4:	bge	1742c <__gcov_sort_n_vals@@Base+0x88>
   173e8:	add	r3, r1, #8
   173ec:	mov	sl, #0
   173f0:	b	17408 <__gcov_sort_n_vals@@Base+0x64>
   173f4:	ldrd	r6, [r3, #-24]	; 0xffffffe8
   173f8:	sub	r3, r3, #16
   173fc:	cmp	r6, r4
   17400:	sbcs	r6, r7, r5
   17404:	bge	1742c <__gcov_sort_n_vals@@Base+0x88>
   17408:	ldrd	r6, [r3, #-16]
   1740c:	subs	r2, r2, #2
   17410:	mov	fp, r2
   17414:	strd	r6, [r3]
   17418:	ldrd	r6, [r1, sl]
   1741c:	sub	sl, sl, #16
   17420:	strd	r6, [r3, #8]
   17424:	mov	r6, r3
   17428:	bpl	173f4 <__gcov_sort_n_vals@@Base+0x50>
   1742c:	add	fp, fp, #2
   17430:	mov	r3, r0
   17434:	add	r1, r1, #16
   17438:	lsl	fp, fp, #3
   1743c:	cmp	lr, r1
   17440:	strd	r8, [r3, fp]!
   17444:	add	ip, ip, #2
   17448:	strd	r4, [r3, #8]
   1744c:	bne	173c8 <__gcov_sort_n_vals@@Base+0x24>
   17450:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17454:	push	{r4, r5, r6, r7, r8, lr}
   17458:	ldr	r6, [r0]
   1745c:	ldr	r4, [pc, #76]	; 174b0 <__gcov_sort_n_vals@@Base+0x10c>
   17460:	smull	r2, r3, r4, r6
   17464:	asr	r4, r6, #31
   17468:	rsb	r4, r4, r3, asr #1
   1746c:	add	r4, r4, r4, lsl #3
   17470:	subs	r4, r6, r4
   17474:	bne	174ac <__gcov_sort_n_vals@@Base+0x108>
   17478:	cmp	r6, #0
   1747c:	ldr	r5, [r0, #4]
   17480:	pople	{r4, r5, r6, r7, r8, pc}
   17484:	add	r5, r5, #8
   17488:	mov	r7, #8
   1748c:	mov	r0, r5
   17490:	add	r4, r4, #9
   17494:	mov	r1, r7
   17498:	bl	173a4 <__gcov_sort_n_vals@@Base>
   1749c:	cmp	r6, r4
   174a0:	add	r5, r5, #72	; 0x48
   174a4:	bgt	1748c <__gcov_sort_n_vals@@Base+0xe8>
   174a8:	pop	{r4, r5, r6, r7, r8, pc}
   174ac:	bl	11a08 <abort@plt>
   174b0:	stmiacc	r3!, {r0, r3, r4, r5, r9, sl, fp, pc}^
   174b4:	ldr	r3, [r0, #52]	; 0x34
   174b8:	cmp	r3, #0
   174bc:	bxeq	lr
   174c0:	ldr	ip, [r0, #56]	; 0x38
   174c4:	cmp	ip, #0
   174c8:	bxeq	lr
   174cc:	push	{r4, r5, r6, lr}
   174d0:	mov	r5, r0
   174d4:	mov	r4, #0
   174d8:	add	r6, r0, #12
   174dc:	ldr	r1, [r5, #60]	; 0x3c
   174e0:	mov	r2, r6
   174e4:	mov	r3, #0
   174e8:	ldr	r0, [r1, r4, lsl #2]
   174ec:	add	r0, r0, #16
   174f0:	ldr	r1, [r2, #4]!
   174f4:	cmp	r1, #0
   174f8:	beq	17508 <__gcov_sort_n_vals@@Base+0x164>
   174fc:	cmp	r3, #9
   17500:	beq	17524 <__gcov_sort_n_vals@@Base+0x180>
   17504:	add	r0, r0, #8
   17508:	add	r3, r3, #1
   1750c:	cmp	r3, #10
   17510:	bne	174f0 <__gcov_sort_n_vals@@Base+0x14c>
   17514:	add	r4, r4, #1
   17518:	cmp	ip, r4
   1751c:	bne	174dc <__gcov_sort_n_vals@@Base+0x138>
   17520:	pop	{r4, r5, r6, pc}
   17524:	bl	17454 <__gcov_sort_n_vals@@Base+0xb0>
   17528:	ldr	ip, [r5, #56]	; 0x38
   1752c:	add	r4, r4, #1
   17530:	cmp	ip, r4
   17534:	bne	174dc <__gcov_sort_n_vals@@Base+0x138>
   17538:	b	17520 <__gcov_sort_n_vals@@Base+0x17c>
   1753c:	push	{r4, r5, r6, r7, r8, r9, lr}
   17540:	sub	sp, sp, #6080	; 0x17c0
   17544:	ldr	ip, [pc, #388]	; 176d0 <__gcov_sort_n_vals@@Base+0x32c>
   17548:	sub	sp, sp, #36	; 0x24
   1754c:	add	ip, pc, ip
   17550:	add	r5, sp, #2016	; 0x7e0
   17554:	mov	r4, r0
   17558:	mov	r7, r1
   1755c:	mov	r1, #0
   17560:	str	r1, [ip, #4]
   17564:	str	r1, [ip]
   17568:	mov	r8, r2
   1756c:	mov	r6, r3
   17570:	str	r1, [r5, #-2000]	; 0xfffff830
   17574:	str	r1, [r5, #-1996]	; 0xfffff834
   17578:	bl	174b4 <__gcov_sort_n_vals@@Base+0x110>
   1757c:	mov	r1, r7
   17580:	ldr	r0, [r4, #12]
   17584:	bl	167ec <build_ast@@Base+0xf58>
   17588:	cmn	r0, #1
   1758c:	beq	1760c <__gcov_sort_n_vals@@Base+0x268>
   17590:	bl	16ad4 <build_ast@@Base+0x1240>
   17594:	cmp	r0, #0
   17598:	beq	17618 <__gcov_sort_n_vals@@Base+0x274>
   1759c:	ldr	r3, [pc, #304]	; 176d4 <__gcov_sort_n_vals@@Base+0x330>
   175a0:	cmp	r0, r3
   175a4:	beq	17670 <__gcov_sort_n_vals@@Base+0x2cc>
   175a8:	ldr	r0, [pc, #296]	; 176d8 <__gcov_sort_n_vals@@Base+0x334>
   175ac:	ldr	r1, [r7]
   175b0:	add	r0, pc, r0
   175b4:	bl	15af0 <build_ast@@Base+0x25c>
   175b8:	ldr	r5, [pc, #284]	; 176dc <__gcov_sort_n_vals@@Base+0x338>
   175bc:	add	r5, pc, r5
   175c0:	ldr	r1, [r5, #4]
   175c4:	cmp	r1, #0
   175c8:	movne	r6, #10
   175cc:	beq	175ec <__gcov_sort_n_vals@@Base+0x248>
   175d0:	mov	r2, r6
   175d4:	mov	r0, r4
   175d8:	bl	15b38 <build_ast@@Base+0x2a4>
   175dc:	cmp	r0, #0
   175e0:	mov	r1, r0
   175e4:	str	r0, [r5, #4]
   175e8:	bne	175d0 <__gcov_sort_n_vals@@Base+0x22c>
   175ec:	bl	16900 <build_ast@@Base+0x106c>
   175f0:	cmp	r0, #0
   175f4:	beq	1760c <__gcov_sort_n_vals@@Base+0x268>
   175f8:	blt	176ac <__gcov_sort_n_vals@@Base+0x308>
   175fc:	ldr	r0, [pc, #220]	; 176e0 <__gcov_sort_n_vals@@Base+0x33c>
   17600:	add	r0, pc, r0
   17604:	ldr	r1, [r7]
   17608:	bl	15af0 <build_ast@@Base+0x25c>
   1760c:	add	sp, sp, #6080	; 0x17c0
   17610:	add	sp, sp, #36	; 0x24
   17614:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17618:	add	r9, sp, #24
   1761c:	bl	16680 <build_ast@@Base+0xdec>
   17620:	ldr	r1, [r5, #-2000]	; 0xfffff830
   17624:	cmp	r1, #0
   17628:	beq	176b8 <__gcov_sort_n_vals@@Base+0x314>
   1762c:	add	r3, sp, #6144	; 0x1800
   17630:	ldr	r0, [r7]
   17634:	str	r6, [sp, #4]
   17638:	ldr	r3, [r3]
   1763c:	mov	r1, r8
   17640:	str	r3, [sp]
   17644:	mov	r2, r4
   17648:	mov	r3, r9
   1764c:	bl	16544 <build_ast@@Base+0xcb0>
   17650:	cmn	r0, #1
   17654:	beq	175b8 <__gcov_sort_n_vals@@Base+0x214>
   17658:	mov	r1, r9
   1765c:	ldr	r3, [r5, #-2000]	; 0xfffff830
   17660:	ldr	r2, [r5, #-1996]	; 0xfffff834
   17664:	mov	r0, r4
   17668:	bl	17190 <build_ast@@Base+0x18fc>
   1766c:	b	175b8 <__gcov_sort_n_vals@@Base+0x214>
   17670:	add	r3, sp, #16
   17674:	ldr	r0, [r7]
   17678:	str	r3, [sp]
   1767c:	add	r3, sp, #6144	; 0x1800
   17680:	add	r1, sp, #20
   17684:	add	r9, sp, #24
   17688:	str	r1, [sp, #4]
   1768c:	str	r6, [sp, #8]
   17690:	mov	r2, r9
   17694:	ldr	r3, [r3]
   17698:	mov	r1, r4
   1769c:	bl	16e24 <build_ast@@Base+0x1590>
   176a0:	cmn	r0, #1
   176a4:	bne	1761c <__gcov_sort_n_vals@@Base+0x278>
   176a8:	b	175b8 <__gcov_sort_n_vals@@Base+0x214>
   176ac:	ldr	r0, [pc, #48]	; 176e4 <__gcov_sort_n_vals@@Base+0x340>
   176b0:	add	r0, pc, r0
   176b4:	b	17604 <__gcov_sort_n_vals@@Base+0x260>
   176b8:	ldr	r2, [pc, #40]	; 176e8 <__gcov_sort_n_vals@@Base+0x344>
   176bc:	mov	r0, r9
   176c0:	bl	1199c <memset@plt>
   176c4:	ldr	r3, [r5, #-1996]	; 0xfffff834
   176c8:	str	r3, [r5, #-2000]	; 0xfffff830
   176cc:	b	1762c <__gcov_sort_n_vals@@Base+0x288>
   176d0:	strdeq	r3, [r1], -ip
   176d4:	strbvs	r6, [r3, -r1, ror #8]!
   176d8:	strdeq	r0, [r0], -ip
   176dc:	andeq	r3, r1, ip, lsl #3
   176e0:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   176e4:	andeq	r0, r0, r0, asr #29
   176e8:	andeq	r1, r0, r8, asr #15
   176ec:	push	{r4, r5, r6, r7, r8, lr}
   176f0:	sub	sp, sp, #6080	; 0x17c0
   176f4:	sub	sp, sp, #32
   176f8:	add	r6, sp, #24
   176fc:	add	r2, sp, #12
   17700:	mov	r8, r1
   17704:	mov	r1, r6
   17708:	mov	r4, r0
   1770c:	bl	15d50 <build_ast@@Base+0x4bc>
   17710:	add	r5, sp, #8
   17714:	mov	r7, r0
   17718:	mov	r0, r5
   1771c:	bl	15ed4 <build_ast@@Base+0x640>
   17720:	cmp	r4, #0
   17724:	beq	1774c <__gcov_sort_n_vals@@Base+0x3a8>
   17728:	mov	r0, r4
   1772c:	str	r6, [sp]
   17730:	mov	r3, r7
   17734:	mov	r2, r8
   17738:	mov	r1, r5
   1773c:	bl	1753c <__gcov_sort_n_vals@@Base+0x198>
   17740:	ldr	r4, [r4, #4]
   17744:	cmp	r4, #0
   17748:	bne	17728 <__gcov_sort_n_vals@@Base+0x384>
   1774c:	ldr	r0, [sp, #8]
   17750:	bl	118a0 <free@plt>
   17754:	add	sp, sp, #6080	; 0x17c0
   17758:	add	sp, sp, #32
   1775c:	pop	{r4, r5, r6, r7, r8, pc}
   17760:	ldrb	r1, [r0, #4]
   17764:	tst	r1, #1
   17768:	bxne	lr
   1776c:	push	{r4, lr}
   17770:	lsr	r1, r1, #1
   17774:	mov	r4, r0
   17778:	and	r1, r1, #1
   1777c:	ldr	r0, [r0]
   17780:	bl	176ec <__gcov_sort_n_vals@@Base+0x348>
   17784:	ldrb	r3, [r4, #4]
   17788:	orr	r3, r3, #3
   1778c:	strb	r3, [r4, #4]
   17790:	pop	{r4, pc}
   17794:	push	{r4, r5, r6, lr}
   17798:	ldr	r4, [pc, #76]	; 177ec <__gcov_sort_n_vals@@Base+0x448>
   1779c:	ldr	r5, [pc, #76]	; 177f0 <__gcov_sort_n_vals@@Base+0x44c>
   177a0:	add	r4, pc, r4
   177a4:	mov	r0, r4
   177a8:	bl	17760 <__gcov_sort_n_vals@@Base+0x3bc>
   177ac:	ldr	r3, [r4, #8]
   177b0:	add	r5, pc, r5
   177b4:	cmp	r3, #0
   177b8:	ldrne	r2, [r4, #12]
   177bc:	strne	r2, [r3, #12]
   177c0:	ldr	r2, [pc, #44]	; 177f4 <__gcov_sort_n_vals@@Base+0x450>
   177c4:	add	r2, pc, r2
   177c8:	ldr	r2, [r2, #12]
   177cc:	cmp	r2, #0
   177d0:	beq	177dc <__gcov_sort_n_vals@@Base+0x438>
   177d4:	str	r3, [r2, #8]
   177d8:	pop	{r4, r5, r6, pc}
   177dc:	ldr	r2, [pc, #20]	; 177f8 <__gcov_sort_n_vals@@Base+0x454>
   177e0:	ldr	r2, [r5, r2]
   177e4:	str	r3, [r2, #4]
   177e8:	pop	{r4, r5, r6, pc}
   177ec:	andeq	r3, r1, r0, lsl r3
   177f0:	andeq	r1, r1, r8, asr #16
   177f4:	andeq	r3, r1, ip, ror #5
   177f8:	andeq	r0, r0, ip, lsr #1
   177fc:	ldr	r1, [r0]
   17800:	push	{r4, r5, r6, lr}
   17804:	cmp	r1, #0
   17808:	ldr	r5, [pc, #168]	; 178b8 <__gcov_sort_n_vals@@Base+0x514>
   1780c:	add	r5, pc, r5
   17810:	popeq	{r4, r5, r6, pc}
   17814:	ldr	r3, [r0, #56]	; 0x38
   17818:	cmp	r3, #0
   1781c:	popeq	{r4, r5, r6, pc}
   17820:	mov	r4, r0
   17824:	mov	r2, #0
   17828:	add	r0, r0, #12
   1782c:	bl	164b8 <build_ast@@Base+0xc24>
   17830:	cmp	r0, #0
   17834:	popeq	{r4, r5, r6, pc}
   17838:	ldr	r6, [pc, #124]	; 178bc <__gcov_sort_n_vals@@Base+0x518>
   1783c:	add	r6, pc, r6
   17840:	ldr	r2, [r6]
   17844:	cmp	r2, #0
   17848:	beq	17860 <__gcov_sort_n_vals@@Base+0x4bc>
   1784c:	ldr	r3, [pc, #108]	; 178c0 <__gcov_sort_n_vals@@Base+0x51c>
   17850:	str	r2, [r4, #4]
   17854:	add	r3, pc, r3
   17858:	str	r4, [r3]
   1785c:	pop	{r4, r5, r6, pc}
   17860:	ldr	r3, [pc, #92]	; 178c4 <__gcov_sort_n_vals@@Base+0x520>
   17864:	ldr	r2, [pc, #92]	; 178c8 <__gcov_sort_n_vals@@Base+0x524>
   17868:	mov	r0, #12
   1786c:	ldr	r5, [r5, r3]
   17870:	add	r2, pc, r2
   17874:	ldr	r1, [r5]
   17878:	bl	164b8 <build_ast@@Base+0xc24>
   1787c:	cmp	r0, #0
   17880:	beq	178a0 <__gcov_sort_n_vals@@Base+0x4fc>
   17884:	ldr	r3, [r5, #4]
   17888:	cmp	r3, #0
   1788c:	str	r3, [r6, #8]
   17890:	strne	r6, [r3, #12]
   17894:	ldr	r3, [pc, #48]	; 178cc <__gcov_sort_n_vals@@Base+0x528>
   17898:	add	r3, pc, r3
   1789c:	str	r3, [r5, #4]
   178a0:	ldr	r0, [pc, #40]	; 178d0 <__gcov_sort_n_vals@@Base+0x52c>
   178a4:	add	r0, pc, r0
   178a8:	bl	17b8c <__libc_csu_fini@@Base+0x4>
   178ac:	ldr	r3, [pc, #32]	; 178d4 <__gcov_sort_n_vals@@Base+0x530>
   178b0:	ldr	r2, [pc, r3]
   178b4:	b	1784c <__gcov_sort_n_vals@@Base+0x4a8>
   178b8:	andeq	r1, r1, ip, ror #15
   178bc:	andeq	r3, r1, r4, ror r2
   178c0:	andeq	r3, r1, ip, asr r2
   178c4:	andeq	r0, r0, ip, lsr #1
   178c8:	andeq	r0, r0, r0, ror #26
   178cc:	andeq	r3, r1, r8, lsl r2
   178d0:			; <UNDEFINED> instruction: 0xfffffee8
   178d4:	andeq	r3, r1, r0, lsl #4
   178d8:	cmp	r3, #0
   178dc:	cmpeq	r2, #0
   178e0:	bne	17904 <__gcov_sort_n_vals@@Base+0x560>
   178e4:	cmp	r1, #0
   178e8:	movlt	r1, #-2147483648	; 0x80000000
   178ec:	movlt	r0, #0
   178f0:	blt	17900 <__gcov_sort_n_vals@@Base+0x55c>
   178f4:	cmpeq	r0, #0
   178f8:	mvnne	r1, #-2147483648	; 0x80000000
   178fc:	mvnne	r0, #0
   17900:	b	179ac <__gcov_sort_n_vals@@Base+0x608>
   17904:	sub	sp, sp, #8
   17908:	push	{sp, lr}
   1790c:	cmp	r1, #0
   17910:	blt	17930 <__gcov_sort_n_vals@@Base+0x58c>
   17914:	cmp	r3, #0
   17918:	blt	17964 <__gcov_sort_n_vals@@Base+0x5c0>
   1791c:	bl	17a00 <__gcov_sort_n_vals@@Base+0x65c>
   17920:	ldr	lr, [sp, #4]
   17924:	add	sp, sp, #8
   17928:	pop	{r2, r3}
   1792c:	bx	lr
   17930:	rsbs	r0, r0, #0
   17934:	sbc	r1, r1, r1, lsl #1
   17938:	cmp	r3, #0
   1793c:	blt	17988 <__gcov_sort_n_vals@@Base+0x5e4>
   17940:	bl	17a00 <__gcov_sort_n_vals@@Base+0x65c>
   17944:	ldr	lr, [sp, #4]
   17948:	add	sp, sp, #8
   1794c:	pop	{r2, r3}
   17950:	rsbs	r0, r0, #0
   17954:	sbc	r1, r1, r1, lsl #1
   17958:	rsbs	r2, r2, #0
   1795c:	sbc	r3, r3, r3, lsl #1
   17960:	bx	lr
   17964:	rsbs	r2, r2, #0
   17968:	sbc	r3, r3, r3, lsl #1
   1796c:	bl	17a00 <__gcov_sort_n_vals@@Base+0x65c>
   17970:	ldr	lr, [sp, #4]
   17974:	add	sp, sp, #8
   17978:	pop	{r2, r3}
   1797c:	rsbs	r0, r0, #0
   17980:	sbc	r1, r1, r1, lsl #1
   17984:	bx	lr
   17988:	rsbs	r2, r2, #0
   1798c:	sbc	r3, r3, r3, lsl #1
   17990:	bl	17a00 <__gcov_sort_n_vals@@Base+0x65c>
   17994:	ldr	lr, [sp, #4]
   17998:	add	sp, sp, #8
   1799c:	pop	{r2, r3}
   179a0:	rsbs	r2, r2, #0
   179a4:	sbc	r3, r3, r3, lsl #1
   179a8:	bx	lr
   179ac:	push	{r1, lr}
   179b0:	mov	r0, #8
   179b4:	bl	11870 <raise@plt>
   179b8:	pop	{r1, pc}
   179bc:	ldr	r3, [pc, #48]	; 179f4 <__gcov_sort_n_vals@@Base+0x650>
   179c0:	ldr	r2, [pc, #48]	; 179f8 <__gcov_sort_n_vals@@Base+0x654>
   179c4:	and	r3, r3, r0, lsr #1
   179c8:	sub	r0, r0, r3
   179cc:	and	r3, r0, r2
   179d0:	and	r0, r2, r0, lsr #2
   179d4:	add	r3, r3, r0
   179d8:	ldr	r0, [pc, #28]	; 179fc <__gcov_sort_n_vals@@Base+0x658>
   179dc:	add	r3, r3, r3, lsr #4
   179e0:	and	r0, r0, r3
   179e4:	add	r0, r0, r0, lsl #8
   179e8:	add	r0, r0, r0, lsl #16
   179ec:	lsr	r0, r0, #24
   179f0:	bx	lr
   179f4:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   179f8:	teqcc	r3, #-872415232	; 0xcc000000
   179fc:	svceq	0x000f0f0f
   17a00:	cmp	r1, r3
   17a04:	push	{r4, r5, r6, r7, r8, r9, lr}
   17a08:	cmpeq	r0, r2
   17a0c:	mov	r4, r0
   17a10:	mov	r5, r1
   17a14:	ldr	r9, [sp, #28]
   17a18:	movcc	r0, #0
   17a1c:	movcc	r1, #0
   17a20:	bcc	17b18 <__gcov_sort_n_vals@@Base+0x774>
   17a24:	cmp	r3, #0
   17a28:	clzeq	ip, r2
   17a2c:	clzne	ip, r3
   17a30:	addeq	ip, ip, #32
   17a34:	cmp	r5, #0
   17a38:	clzeq	r1, r4
   17a3c:	addeq	r1, r1, #32
   17a40:	clzne	r1, r5
   17a44:	sub	ip, ip, r1
   17a48:	sub	lr, ip, #32
   17a4c:	lsl	r7, r3, ip
   17a50:	rsb	r8, ip, #32
   17a54:	orr	r7, r7, r2, lsl lr
   17a58:	orr	r7, r7, r2, lsr r8
   17a5c:	lsl	r6, r2, ip
   17a60:	cmp	r5, r7
   17a64:	cmpeq	r4, r6
   17a68:	movcc	r0, #0
   17a6c:	movcc	r1, #0
   17a70:	bcc	17a8c <__gcov_sort_n_vals@@Base+0x6e8>
   17a74:	mov	r3, #1
   17a78:	subs	r4, r4, r6
   17a7c:	lsl	r1, r3, lr
   17a80:	lsl	r0, r3, ip
   17a84:	orr	r1, r1, r3, lsr r8
   17a88:	sbc	r5, r5, r7
   17a8c:	cmp	ip, #0
   17a90:	beq	17b18 <__gcov_sort_n_vals@@Base+0x774>
   17a94:	lsrs	r3, r7, #1
   17a98:	rrx	r2, r6
   17a9c:	mov	r6, ip
   17aa0:	b	17ac4 <__gcov_sort_n_vals@@Base+0x720>
   17aa4:	subs	r4, r4, r2
   17aa8:	sbc	r5, r5, r3
   17aac:	adds	r4, r4, r4
   17ab0:	adc	r5, r5, r5
   17ab4:	adds	r4, r4, #1
   17ab8:	adc	r5, r5, #0
   17abc:	subs	r6, r6, #1
   17ac0:	beq	17ae0 <__gcov_sort_n_vals@@Base+0x73c>
   17ac4:	cmp	r5, r3
   17ac8:	cmpeq	r4, r2
   17acc:	bcs	17aa4 <__gcov_sort_n_vals@@Base+0x700>
   17ad0:	adds	r4, r4, r4
   17ad4:	adc	r5, r5, r5
   17ad8:	subs	r6, r6, #1
   17adc:	bne	17ac4 <__gcov_sort_n_vals@@Base+0x720>
   17ae0:	lsr	r6, r4, ip
   17ae4:	lsr	r7, r5, ip
   17ae8:	orr	r6, r6, r5, lsl r8
   17aec:	adds	r2, r0, r4
   17af0:	orr	r6, r6, r5, lsr lr
   17af4:	adc	r3, r1, r5
   17af8:	lsl	r1, r7, ip
   17afc:	orr	r1, r1, r6, lsl lr
   17b00:	lsl	r0, r6, ip
   17b04:	orr	r1, r1, r6, lsr r8
   17b08:	subs	r0, r2, r0
   17b0c:	mov	r4, r6
   17b10:	mov	r5, r7
   17b14:	sbc	r1, r3, r1
   17b18:	cmp	r9, #0
   17b1c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   17b20:	strd	r4, [r9]
   17b24:	pop	{r4, r5, r6, r7, r8, r9, pc}

00017b28 <__libc_csu_init@@Base>:
   17b28:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17b2c:	mov	r7, r0
   17b30:	ldr	r6, [pc, #72]	; 17b80 <__libc_csu_init@@Base+0x58>
   17b34:	ldr	r5, [pc, #72]	; 17b84 <__libc_csu_init@@Base+0x5c>
   17b38:	add	r6, pc, r6
   17b3c:	add	r5, pc, r5
   17b40:	sub	r6, r6, r5
   17b44:	mov	r8, r1
   17b48:	mov	r9, r2
   17b4c:	bl	11844 <fdopen@plt-0x20>
   17b50:	asrs	r6, r6, #2
   17b54:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17b58:	mov	r4, #0
   17b5c:	add	r4, r4, #1
   17b60:	ldr	r3, [r5], #4
   17b64:	mov	r2, r9
   17b68:	mov	r1, r8
   17b6c:	mov	r0, r7
   17b70:	blx	r3
   17b74:	cmp	r6, r4
   17b78:	bne	17b5c <__libc_csu_init@@Base+0x34>
   17b7c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17b80:	ldrdeq	r1, [r1], -r0
   17b84:			; <UNDEFINED> instruction: 0x000113b8

00017b88 <__libc_csu_fini@@Base>:
   17b88:	bx	lr
   17b8c:	ldr	r3, [pc, #12]	; 17ba0 <__libc_csu_fini@@Base+0x18>
   17b90:	mov	r1, #0
   17b94:	add	r3, pc, r3
   17b98:	ldr	r2, [r3]
   17b9c:	b	11978 <__cxa_atexit@plt>
   17ba0:	andeq	r1, r1, ip, lsl r5
   17ba4:	mov	r2, r1
   17ba8:	mov	r1, r0
   17bac:	mov	r0, #3
   17bb0:	b	11918 <__fxstat@plt>

Disassembly of section .fini:

00017bb4 <.fini>:
   17bb4:	push	{r3, lr}
   17bb8:	pop	{r3, pc}
