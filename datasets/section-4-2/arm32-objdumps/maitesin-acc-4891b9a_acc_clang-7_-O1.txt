
../repos/maitesin-acc-4891b9a/bin/acc:     file format elf32-littlearm


Disassembly of section .init:

00011ed8 <.init>:
   11ed8:	push	{r3, lr}
   11edc:	bl	1212c <_start@@Base+0x3c>
   11ee0:	pop	{r3, pc}

Disassembly of section .plt:

00011ee4 <fdopen@plt-0x14>:
   11ee4:	push	{lr}		; (str lr, [sp, #-4]!)
   11ee8:	ldr	lr, [pc, #4]	; 11ef4 <fdopen@plt-0x4>
   11eec:	add	lr, pc, lr
   11ef0:	ldr	pc, [lr, #8]!
   11ef4:	andeq	sl, r1, ip, lsl #2

00011ef8 <fdopen@plt>:
   11ef8:	add	ip, pc, #0, 12
   11efc:	add	ip, ip, #106496	; 0x1a000
   11f00:	ldr	pc, [ip, #268]!	; 0x10c

00011f04 <strtol@plt>:
   11f04:	add	ip, pc, #0, 12
   11f08:	add	ip, ip, #106496	; 0x1a000
   11f0c:	ldr	pc, [ip, #260]!	; 0x104

00011f10 <fopen@plt>:
   11f10:	add	ip, pc, #0, 12
   11f14:	add	ip, ip, #106496	; 0x1a000
   11f18:	ldr	pc, [ip, #252]!	; 0xfc

00011f1c <fflush@plt>:
   11f1c:	add	ip, pc, #0, 12
   11f20:	add	ip, ip, #106496	; 0x1a000
   11f24:	ldr	pc, [ip, #244]!	; 0xf4

00011f28 <free@plt>:
   11f28:	add	ip, pc, #0, 12
   11f2c:	add	ip, ip, #106496	; 0x1a000
   11f30:	ldr	pc, [ip, #236]!	; 0xec

00011f34 <memcpy@plt>:
   11f34:	add	ip, pc, #0, 12
   11f38:	add	ip, ip, #106496	; 0x1a000
   11f3c:	ldr	pc, [ip, #228]!	; 0xe4

00011f40 <mmap64@plt>:
   11f40:	add	ip, pc, #0, 12
   11f44:	add	ip, ip, #106496	; 0x1a000
   11f48:	ldr	pc, [ip, #220]!	; 0xdc

00011f4c <ftell@plt>:
   11f4c:	add	ip, pc, #0, 12
   11f50:	add	ip, ip, #106496	; 0x1a000
   11f54:	ldr	pc, [ip, #212]!	; 0xd4

00011f58 <uname@plt>:
   11f58:	add	ip, pc, #0, 12
   11f5c:	add	ip, ip, #106496	; 0x1a000
   11f60:	ldr	pc, [ip, #204]!	; 0xcc

00011f64 <strdup@plt>:
   11f64:	add	ip, pc, #0, 12
   11f68:	add	ip, ip, #106496	; 0x1a000
   11f6c:	ldr	pc, [ip, #196]!	; 0xc4

00011f70 <realloc@plt>:
   11f70:	add	ip, pc, #0, 12
   11f74:	add	ip, ip, #106496	; 0x1a000
   11f78:	ldr	pc, [ip, #188]!	; 0xbc

00011f7c <fwrite@plt>:
   11f7c:	add	ip, pc, #0, 12
   11f80:	add	ip, ip, #106496	; 0x1a000
   11f84:	ldr	pc, [ip, #180]!	; 0xb4

00011f88 <open64@plt>:
   11f88:	add	ip, pc, #0, 12
   11f8c:	add	ip, ip, #106496	; 0x1a000
   11f90:	ldr	pc, [ip, #172]!	; 0xac

00011f94 <getenv@plt>:
   11f94:	add	ip, pc, #0, 12
   11f98:	add	ip, ip, #106496	; 0x1a000
   11f9c:	ldr	pc, [ip, #164]!	; 0xa4

00011fa0 <malloc@plt>:
   11fa0:	add	ip, pc, #0, 12
   11fa4:	add	ip, ip, #106496	; 0x1a000
   11fa8:	ldr	pc, [ip, #156]!	; 0x9c

00011fac <__libc_start_main@plt>:
   11fac:	add	ip, pc, #0, 12
   11fb0:	add	ip, ip, #106496	; 0x1a000
   11fb4:	ldr	pc, [ip, #148]!	; 0x94

00011fb8 <strerror@plt>:
   11fb8:	add	ip, pc, #0, 12
   11fbc:	add	ip, ip, #106496	; 0x1a000
   11fc0:	ldr	pc, [ip, #140]!	; 0x8c

00011fc4 <__gmon_start__@plt>:
   11fc4:	add	ip, pc, #0, 12
   11fc8:	add	ip, ip, #106496	; 0x1a000
   11fcc:	ldr	pc, [ip, #132]!	; 0x84

00011fd0 <getpid@plt>:
   11fd0:	add	ip, pc, #0, 12
   11fd4:	add	ip, ip, #106496	; 0x1a000
   11fd8:	ldr	pc, [ip, #124]!	; 0x7c

00011fdc <exit@plt>:
   11fdc:	add	ip, pc, #0, 12
   11fe0:	add	ip, ip, #106496	; 0x1a000
   11fe4:	ldr	pc, [ip, #116]!	; 0x74

00011fe8 <strlen@plt>:
   11fe8:	add	ip, pc, #0, 12
   11fec:	add	ip, ip, #106496	; 0x1a000
   11ff0:	ldr	pc, [ip, #108]!	; 0x6c

00011ff4 <strchr@plt>:
   11ff4:	add	ip, pc, #0, 12
   11ff8:	add	ip, ip, #106496	; 0x1a000
   11ffc:	ldr	pc, [ip, #100]!	; 0x64

00012000 <getopt@plt>:
   12000:	add	ip, pc, #0, 12
   12004:	add	ip, ip, #106496	; 0x1a000
   12008:	ldr	pc, [ip, #92]!	; 0x5c

0001200c <fprintf@plt>:
   1200c:	add	ip, pc, #0, 12
   12010:	add	ip, ip, #106496	; 0x1a000
   12014:	ldr	pc, [ip, #84]!	; 0x54

00012018 <__errno_location@plt>:
   12018:	add	ip, pc, #0, 12
   1201c:	add	ip, ip, #106496	; 0x1a000
   12020:	ldr	pc, [ip, #76]!	; 0x4c

00012024 <__cxa_atexit@plt>:
   12024:	add	ip, pc, #0, 12
   12028:	add	ip, ip, #106496	; 0x1a000
   1202c:	ldr	pc, [ip, #68]!	; 0x44

00012030 <mkdir@plt>:
   12030:	add	ip, pc, #0, 12
   12034:	add	ip, ip, #106496	; 0x1a000
   12038:	ldr	pc, [ip, #60]!	; 0x3c

0001203c <memset@plt>:
   1203c:	add	ip, pc, #0, 12
   12040:	add	ip, ip, #106496	; 0x1a000
   12044:	ldr	pc, [ip, #52]!	; 0x34

00012048 <strncpy@plt>:
   12048:	add	ip, pc, #0, 12
   1204c:	add	ip, ip, #106496	; 0x1a000
   12050:	ldr	pc, [ip, #44]!	; 0x2c

00012054 <prctl@plt>:
   12054:	add	ip, pc, #0, 12
   12058:	add	ip, ip, #106496	; 0x1a000
   1205c:	ldr	pc, [ip, #36]!	; 0x24

00012060 <fclose@plt>:
   12060:	add	ip, pc, #0, 12
   12064:	add	ip, ip, #106496	; 0x1a000
   12068:	ldr	pc, [ip, #28]!

0001206c <strnlen@plt>:
   1206c:	add	ip, pc, #0, 12
   12070:	add	ip, ip, #106496	; 0x1a000
   12074:	ldr	pc, [ip, #20]!

00012078 <munmap@plt>:
   12078:	add	ip, pc, #0, 12
   1207c:	add	ip, ip, #106496	; 0x1a000
   12080:	ldr	pc, [ip, #12]!

00012084 <fcntl64@plt>:
   12084:	add	ip, pc, #0, 12
   12088:	add	ip, ip, #106496	; 0x1a000
   1208c:	ldr	pc, [ip, #4]!

00012090 <strrchr@plt>:
   12090:	add	ip, pc, #0, 12
   12094:	add	ip, ip, #102400	; 0x19000
   12098:	ldr	pc, [ip, #4092]!	; 0xffc

0001209c <fputc@plt>:
   1209c:	add	ip, pc, #0, 12
   120a0:	add	ip, ip, #102400	; 0x19000
   120a4:	ldr	pc, [ip, #4084]!	; 0xff4

000120a8 <msync@plt>:
   120a8:	add	ip, pc, #0, 12
   120ac:	add	ip, ip, #102400	; 0x19000
   120b0:	ldr	pc, [ip, #4076]!	; 0xfec

000120b4 <atoi@plt>:
   120b4:	add	ip, pc, #0, 12
   120b8:	add	ip, ip, #102400	; 0x19000
   120bc:	ldr	pc, [ip, #4068]!	; 0xfe4

000120c0 <fread_unlocked@plt>:
   120c0:	add	ip, pc, #0, 12
   120c4:	add	ip, ip, #102400	; 0x19000
   120c8:	ldr	pc, [ip, #4060]!	; 0xfdc

000120cc <fseek@plt>:
   120cc:	add	ip, pc, #0, 12
   120d0:	add	ip, ip, #102400	; 0x19000
   120d4:	ldr	pc, [ip, #4052]!	; 0xfd4

000120d8 <strncmp@plt>:
   120d8:	add	ip, pc, #0, 12
   120dc:	add	ip, ip, #102400	; 0x19000
   120e0:	ldr	pc, [ip, #4044]!	; 0xfcc

000120e4 <abort@plt>:
   120e4:	add	ip, pc, #0, 12
   120e8:	add	ip, ip, #102400	; 0x19000
   120ec:	ldr	pc, [ip, #4036]!	; 0xfc4

Disassembly of section .text:

000120f0 <_start@@Base>:
   120f0:	mov	fp, #0
   120f4:	mov	lr, #0
   120f8:	pop	{r1}		; (ldr r1, [sp], #4)
   120fc:	mov	r2, sp
   12100:	push	{r2}		; (str r2, [sp, #-4]!)
   12104:	push	{r0}		; (str r0, [sp, #-4]!)
   12108:	ldr	ip, [pc, #16]	; 12120 <_start@@Base+0x30>
   1210c:	push	{ip}		; (str ip, [sp, #-4]!)
   12110:	ldr	r0, [pc, #12]	; 12124 <_start@@Base+0x34>
   12114:	ldr	r3, [pc, #12]	; 12128 <_start@@Base+0x38>
   12118:	bl	11fac <__libc_start_main@plt>
   1211c:	bl	120e4 <abort@plt>
   12120:	andeq	r9, r1, r4, lsr #28
   12124:			; <UNDEFINED> instruction: 0x000124b0
   12128:	andeq	r9, r1, r4, asr #27
   1212c:	ldr	r3, [pc, #20]	; 12148 <_start@@Base+0x58>
   12130:	ldr	r2, [pc, #20]	; 1214c <_start@@Base+0x5c>
   12134:	add	r3, pc, r3
   12138:	ldr	r2, [r3, r2]
   1213c:	cmp	r2, #0
   12140:	bxeq	lr
   12144:	b	11fc4 <__gmon_start__@plt>
   12148:	andeq	r9, r1, r4, asr #29
   1214c:	andeq	r0, r0, r4, asr #1
   12150:	ldr	r0, [pc, #24]	; 12170 <_start@@Base+0x80>
   12154:	ldr	r3, [pc, #24]	; 12174 <_start@@Base+0x84>
   12158:	cmp	r3, r0
   1215c:	bxeq	lr
   12160:	ldr	r3, [pc, #16]	; 12178 <_start@@Base+0x88>
   12164:	cmp	r3, #0
   12168:	bxeq	lr
   1216c:	bx	r3
   12170:	strdeq	ip, [r2], -r4
   12174:	strdeq	ip, [r2], -r4
   12178:	andeq	r0, r0, r0
   1217c:	ldr	r0, [pc, #36]	; 121a8 <_start@@Base+0xb8>
   12180:	ldr	r1, [pc, #36]	; 121ac <_start@@Base+0xbc>
   12184:	sub	r1, r1, r0
   12188:	asr	r1, r1, #2
   1218c:	add	r1, r1, r1, lsr #31
   12190:	asrs	r1, r1, #1
   12194:	bxeq	lr
   12198:	ldr	r3, [pc, #16]	; 121b0 <_start@@Base+0xc0>
   1219c:	cmp	r3, #0
   121a0:	bxeq	lr
   121a4:	bx	r3
   121a8:	strdeq	ip, [r2], -r4
   121ac:	strdeq	ip, [r2], -r4
   121b0:	andeq	r0, r0, r0
   121b4:	push	{r4, lr}
   121b8:	ldr	r4, [pc, #24]	; 121d8 <_start@@Base+0xe8>
   121bc:	ldrb	r3, [r4]
   121c0:	cmp	r3, #0
   121c4:	popne	{r4, pc}
   121c8:	bl	12150 <_start@@Base+0x60>
   121cc:	mov	r3, #1
   121d0:	strb	r3, [r4]
   121d4:	pop	{r4, pc}
   121d8:	andeq	ip, r2, r4, lsl r1
   121dc:	b	1217c <_start@@Base+0x8c>

000121e0 <load_file@@Base>:
   121e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   121e4:	add	fp, sp, #24
   121e8:	mov	r8, r0
   121ec:	movw	r4, #49440	; 0xc120
   121f0:	movt	r4, #2
   121f4:	ldrd	r0, [r4]
   121f8:	adds	r0, r0, #1
   121fc:	adc	r1, r1, #0
   12200:	strd	r0, [r4]
   12204:	movw	r1, #42451	; 0xa5d3
   12208:	movt	r1, #1
   1220c:	mov	r0, r8
   12210:	bl	11f10 <fopen@plt>
   12214:	mov	r5, r0
   12218:	mov	r0, #16
   1221c:	cmp	r5, #0
   12220:	movwne	r0, #8
   12224:	mov	r1, r4
   12228:	ldr	r0, [r1, r0]!
   1222c:	adds	r0, r0, #1
   12230:	str	r0, [r1]
   12234:	ldr	r0, [r1, #4]
   12238:	adc	r0, r0, #0
   1223c:	str	r0, [r1, #4]
   12240:	mov	r6, #0
   12244:	cmp	r5, #0
   12248:	beq	12388 <load_file@@Base+0x1a8>
   1224c:	mov	r0, r5
   12250:	mov	r1, #0
   12254:	mov	r2, #2
   12258:	bl	120cc <fseek@plt>
   1225c:	mov	r1, #32
   12260:	cmp	r0, #0
   12264:	movweq	r1, #24
   12268:	mov	r2, r4
   1226c:	ldr	r1, [r2, r1]!
   12270:	adds	r1, r1, #1
   12274:	str	r1, [r2]
   12278:	ldr	r1, [r2, #4]
   1227c:	adc	r1, r1, #0
   12280:	str	r1, [r2, #4]
   12284:	cmp	r0, #0
   12288:	bne	12370 <load_file@@Base+0x190>
   1228c:	mov	r0, r5
   12290:	bl	11f4c <ftell@plt>
   12294:	mov	r7, r0
   12298:	mov	r0, #48	; 0x30
   1229c:	cmn	r7, #1
   122a0:	movweq	r0, #40	; 0x28
   122a4:	mov	r1, r4
   122a8:	ldr	r0, [r1, r0]!
   122ac:	adds	r0, r0, #1
   122b0:	str	r0, [r1]
   122b4:	ldr	r0, [r1, #4]
   122b8:	adc	r0, r0, #0
   122bc:	str	r0, [r1, #4]
   122c0:	cmn	r7, #1
   122c4:	beq	123a0 <load_file@@Base+0x1c0>
   122c8:	add	r0, r7, #1
   122cc:	bl	11fa0 <malloc@plt>
   122d0:	mov	r6, r0
   122d4:	mov	r0, r5
   122d8:	mov	r1, #0
   122dc:	mov	r2, #0
   122e0:	bl	120cc <fseek@plt>
   122e4:	mov	r1, #64	; 0x40
   122e8:	cmp	r0, #0
   122ec:	movwne	r1, #56	; 0x38
   122f0:	mov	r2, r4
   122f4:	ldr	r1, [r2, r1]!
   122f8:	adds	r1, r1, #1
   122fc:	str	r1, [r2]
   12300:	ldr	r1, [r2, #4]
   12304:	adc	r1, r1, #0
   12308:	str	r1, [r2, #4]
   1230c:	cmp	r0, #0
   12310:	bne	123bc <load_file@@Base+0x1dc>
   12314:	mov	r0, r6
   12318:	mov	r1, #1
   1231c:	mov	r2, r7
   12320:	mov	r3, r5
   12324:	bl	120c0 <fread_unlocked@plt>
   12328:	mov	r1, #80	; 0x50
   1232c:	cmp	r0, #0
   12330:	movweq	r1, #72	; 0x48
   12334:	mov	r2, r4
   12338:	ldr	r1, [r2, r1]!
   1233c:	adds	r1, r1, #1
   12340:	str	r1, [r2]
   12344:	ldr	r1, [r2, #4]
   12348:	adc	r1, r1, #0
   1234c:	str	r1, [r2, #4]
   12350:	cmp	r0, #0
   12354:	beq	123e4 <load_file@@Base+0x204>
   12358:	ldrd	r2, [r4, #88]	; 0x58
   1235c:	adds	r2, r2, #1
   12360:	adc	r3, r3, #0
   12364:	strd	r2, [r4, #88]	; 0x58
   12368:	mov	r1, #0
   1236c:	strb	r1, [r6, r0]
   12370:	ldrd	r0, [r4, #96]	; 0x60
   12374:	adds	r0, r0, #1
   12378:	adc	r1, r1, #0
   1237c:	strd	r0, [r4, #96]	; 0x60
   12380:	mov	r0, r5
   12384:	bl	12060 <fclose@plt>
   12388:	ldrd	r0, [r4, #104]	; 0x68
   1238c:	adds	r0, r0, #1
   12390:	adc	r1, r1, #0
   12394:	strd	r0, [r4, #104]	; 0x68
   12398:	mov	r0, r6
   1239c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   123a0:	movw	r0, #49416	; 0xc108
   123a4:	movt	r0, #2
   123a8:	ldr	r3, [r0]
   123ac:	movw	r0, #40532	; 0x9e54
   123b0:	movt	r0, #1
   123b4:	mov	r1, #51	; 0x33
   123b8:	b	123d4 <load_file@@Base+0x1f4>
   123bc:	movw	r0, #49416	; 0xc108
   123c0:	movt	r0, #2
   123c4:	ldr	r3, [r0]
   123c8:	movw	r0, #40584	; 0x9e88
   123cc:	movt	r0, #1
   123d0:	mov	r1, #49	; 0x31
   123d4:	mov	r2, #1
   123d8:	bl	11f7c <fwrite@plt>
   123dc:	mov	r0, #1
   123e0:	bl	11fdc <exit@plt>
   123e4:	movw	r0, #49416	; 0xc108
   123e8:	movt	r0, #2
   123ec:	ldr	r0, [r0]
   123f0:	movw	r1, #40634	; 0x9eba
   123f4:	movt	r1, #1
   123f8:	mov	r2, r8
   123fc:	bl	1200c <fprintf@plt>
   12400:	mov	r0, #1
   12404:	bl	11fdc <exit@plt>

00012408 <my_main@@Base>:
   12408:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1240c:	add	fp, sp, #24
   12410:	sub	sp, sp, #32
   12414:	mov	r8, r1
   12418:	movw	r1, #49552	; 0xc190
   1241c:	movt	r1, #2
   12420:	ldm	r1, {r2, r3, r7}
   12424:	ldr	r6, [r1, #12]
   12428:	adds	r2, r2, #1
   1242c:	adc	r3, r3, #0
   12430:	adds	r7, r7, #1
   12434:	adc	r6, r6, #0
   12438:	stm	r1, {r2, r3, r7}
   1243c:	str	r6, [r1, #12]
   12440:	bl	121e0 <load_file@@Base>
   12444:	mov	r4, r0
   12448:	add	r6, sp, #20
   1244c:	mov	r0, r6
   12450:	mov	r1, r4
   12454:	bl	12f0c <init_lexer@@Base>
   12458:	add	r7, sp, #16
   1245c:	mov	r0, r7
   12460:	mov	r1, r6
   12464:	bl	1524c <init_grammar@@Base>
   12468:	mov	r5, sp
   1246c:	mov	r0, r5
   12470:	mov	r1, r7
   12474:	mov	r2, r8
   12478:	bl	162f8 <init_generator@@Base>
   1247c:	mov	r0, r5
   12480:	bl	16390 <generate_code@@Base>
   12484:	mov	r0, r5
   12488:	bl	1635c <destroy_generator@@Base>
   1248c:	mov	r0, r7
   12490:	bl	15284 <destroy_grammar@@Base>
   12494:	mov	r0, r6
   12498:	bl	12f4c <destroy_lexer@@Base>
   1249c:	mov	r0, r4
   124a0:	bl	11f28 <free@plt>
   124a4:	mov	r0, #0
   124a8:	sub	sp, fp, #24
   124ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000124b0 <main@@Base>:
   124b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   124b4:	add	fp, sp, #24
   124b8:	mov	r4, r1
   124bc:	mov	r5, r0
   124c0:	movw	r7, #49568	; 0xc1a0
   124c4:	movt	r7, #2
   124c8:	ldm	r7, {r0, r1, r2, r3}
   124cc:	adds	r0, r0, #1
   124d0:	adc	r1, r1, #0
   124d4:	adds	r2, r2, #1
   124d8:	adc	r3, r3, #0
   124dc:	stm	r7, {r0, r1, r2, r3}
   124e0:	movw	r2, #40658	; 0x9ed2
   124e4:	movt	r2, #1
   124e8:	mov	r0, r5
   124ec:	mov	r1, r4
   124f0:	bl	12000 <getopt@plt>
   124f4:	mov	r1, #24
   124f8:	cmn	r0, #1
   124fc:	movwne	r1, #16
   12500:	mov	r2, r7
   12504:	ldr	r1, [r2, r1]!
   12508:	adds	r1, r1, #1
   1250c:	str	r1, [r2]
   12510:	ldr	r1, [r2, #4]
   12514:	adc	r1, r1, #0
   12518:	str	r1, [r2, #4]
   1251c:	mov	r8, #0
   12520:	cmn	r0, #1
   12524:	beq	125cc <main@@Base+0x11c>
   12528:	movw	r9, #49424	; 0xc110
   1252c:	movt	r9, #2
   12530:	movw	r6, #40658	; 0x9ed2
   12534:	movt	r6, #1
   12538:	cmp	r0, #111	; 0x6f
   1253c:	mov	r1, #40	; 0x28
   12540:	movweq	r1, #32
   12544:	mov	r2, r7
   12548:	ldr	r1, [r2, r1]!
   1254c:	adds	r1, r1, #1
   12550:	str	r1, [r2]
   12554:	ldr	r1, [r2, #4]
   12558:	adc	r1, r1, #0
   1255c:	str	r1, [r2, #4]
   12560:	cmp	r0, #111	; 0x6f
   12564:	bne	1257c <main@@Base+0xcc>
   12568:	ldrd	r0, [r7, #48]	; 0x30
   1256c:	adds	r0, r0, #1
   12570:	adc	r1, r1, #0
   12574:	strd	r0, [r7, #48]	; 0x30
   12578:	ldr	r8, [r9]
   1257c:	ldrd	r0, [r7, #56]	; 0x38
   12580:	adds	r0, r0, #1
   12584:	adc	r1, r1, #0
   12588:	strd	r0, [r7, #56]	; 0x38
   1258c:	mov	r0, r5
   12590:	mov	r1, r4
   12594:	mov	r2, r6
   12598:	bl	12000 <getopt@plt>
   1259c:	cmn	r0, #1
   125a0:	mov	r1, #24
   125a4:	movwne	r1, #16
   125a8:	mov	r2, r7
   125ac:	ldr	r1, [r2, r1]!
   125b0:	adds	r1, r1, #1
   125b4:	str	r1, [r2]
   125b8:	ldr	r1, [r2, #4]
   125bc:	adc	r1, r1, #0
   125c0:	str	r1, [r2, #4]
   125c4:	cmn	r0, #1
   125c8:	bne	12538 <main@@Base+0x88>
   125cc:	movw	r0, #49408	; 0xc100
   125d0:	movt	r0, #2
   125d4:	ldr	r0, [r0]
   125d8:	mov	r1, #72	; 0x48
   125dc:	cmp	r0, r5
   125e0:	movwlt	r1, #64	; 0x40
   125e4:	mov	r2, r7
   125e8:	ldr	r1, [r2, r1]!
   125ec:	adds	r1, r1, #1
   125f0:	str	r1, [r2]
   125f4:	ldr	r1, [r2, #4]
   125f8:	adc	r1, r1, #0
   125fc:	str	r1, [r2, #4]
   12600:	cmp	r0, r5
   12604:	bge	12638 <main@@Base+0x188>
   12608:	ldrd	r2, [r7, #80]	; 0x50
   1260c:	adds	r2, r2, #1
   12610:	adc	r3, r3, #0
   12614:	strd	r2, [r7, #80]	; 0x50
   12618:	ldr	r0, [r4, r0, lsl #2]
   1261c:	movw	r1, #40661	; 0x9ed5
   12620:	movt	r1, #1
   12624:	cmp	r8, #0
   12628:	movne	r1, r8
   1262c:	bl	12408 <my_main@@Base>
   12630:	mov	r0, #0
   12634:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12638:	movw	r0, #49416	; 0xc108
   1263c:	movt	r0, #2
   12640:	ldr	r3, [r0]
   12644:	movw	r0, #40665	; 0x9ed9
   12648:	movt	r0, #1
   1264c:	mov	r1, #45	; 0x2d
   12650:	mov	r2, #1
   12654:	bl	11f7c <fwrite@plt>
   12658:	mov	r0, #1
   1265c:	bl	11fdc <exit@plt>
   12660:	push	{r4, r5, r6, lr}
   12664:	sub	sp, sp, #8
   12668:	movw	r0, #40736	; 0x9f20
   1266c:	movt	r0, #1
   12670:	movw	r1, #40711	; 0x9f07
   12674:	movt	r1, #1
   12678:	movw	r2, #13547	; 0x34eb
   1267c:	movt	r2, #50461	; 0xc51d
   12680:	bl	16ec4 <__generate_code_for_binary_boolean_expression@@Base+0x490>
   12684:	movw	r0, #40880	; 0x9fb0
   12688:	movt	r0, #1
   1268c:	add	r4, r0, #4
   12690:	mov	r5, #0
   12694:	movw	r6, #40816	; 0x9f70
   12698:	movt	r6, #1
   1269c:	mov	r3, r6
   126a0:	ldr	r0, [r3, r5]!
   126a4:	ldr	r1, [r3, #16]
   126a8:	str	r1, [sp]
   126ac:	ldmib	r3, {r1, r2}
   126b0:	ldrb	r3, [r3, #12]
   126b4:	bl	17628 <__generate_code_for_binary_boolean_expression@@Base+0xbf4>
   126b8:	ldrd	r0, [r4, #-4]
   126bc:	bl	17edc <__generate_code_for_binary_boolean_expression@@Base+0x14a8>
   126c0:	add	r5, r5, #20
   126c4:	add	r4, r4, #8
   126c8:	cmp	r5, #60	; 0x3c
   126cc:	bne	1269c <main@@Base+0x1ec>
   126d0:	bl	18658 <__generate_code_for_binary_boolean_expression@@Base+0x1c24>
   126d4:	add	sp, sp, #8
   126d8:	pop	{r4, r5, r6, lr}
   126dc:	b	193c4 <__generate_code_for_binary_boolean_expression@@Base+0x2990>
   126e0:	push	{fp, lr}
   126e4:	bl	12660 <main@@Base+0x1b0>
   126e8:	movw	r0, #49440	; 0xc120
   126ec:	movt	r0, #2
   126f0:	vmov.i32	q8, #0	; 0x00000000
   126f4:	add	r1, r0, #80	; 0x50
   126f8:	vst1.64	{d16-d17}, [r1 :128]
   126fc:	add	r1, r0, #64	; 0x40
   12700:	vst1.64	{d16-d17}, [r1 :128]
   12704:	add	r1, r0, #48	; 0x30
   12708:	vst1.64	{d16-d17}, [r1 :128]
   1270c:	add	r1, r0, #32
   12710:	vst1.64	{d16-d17}, [r1 :128]
   12714:	add	r1, r0, #16
   12718:	vst1.64	{d16-d17}, [r1 :128]
   1271c:	movw	r1, #49552	; 0xc190
   12720:	movt	r1, #2
   12724:	vst1.64	{d16-d17}, [r1]
   12728:	movw	r1, #49568	; 0xc1a0
   1272c:	movt	r1, #2
   12730:	add	r2, r1, #64	; 0x40
   12734:	vst1.64	{d16-d17}, [r2 :128]
   12738:	add	r2, r1, #48	; 0x30
   1273c:	vst1.64	{d16-d17}, [r2 :128]
   12740:	add	r2, r1, #32
   12744:	vst1.64	{d16-d17}, [r2 :128]
   12748:	add	r2, r1, #16
   1274c:	vst1.64	{d16-d17}, [r2 :128]
   12750:	mov	r2, #0
   12754:	str	r2, [r1, #80]	; 0x50
   12758:	mov	r3, #96	; 0x60
   1275c:	vst1.64	{d16-d17}, [r0 :128], r3
   12760:	vst1.64	{d16-d17}, [r0 :128]
   12764:	mov	r0, #84	; 0x54
   12768:	vst1.64	{d16-d17}, [r1 :128], r0
   1276c:	str	r2, [r1]
   12770:	pop	{fp, pc}
   12774:	movw	r0, #9824	; 0x2660
   12778:	movt	r0, #1
   1277c:	movw	r1, #9952	; 0x26e0
   12780:	movt	r1, #1
   12784:	b	19874 <__gcov_flush@@Base+0xb4>

00012788 <init_token_int_type@@Base>:
   12788:	push	{fp, lr}
   1278c:	mov	fp, sp
   12790:	movw	r1, #49664	; 0xc200
   12794:	movt	r1, #2
   12798:	ldm	r1, {r2, r3, ip, lr}
   1279c:	adds	r2, r2, #1
   127a0:	adc	r3, r3, #0
   127a4:	adds	ip, ip, #1
   127a8:	adc	lr, lr, #0
   127ac:	stm	r1, {r2, r3, ip, lr}
   127b0:	mov	r1, #0
   127b4:	str	r1, [r0]
   127b8:	pop	{fp, pc}

000127bc <init_token_int_value@@Base>:
   127bc:	push	{r4, sl, fp, lr}
   127c0:	add	fp, sp, #8
   127c4:	movw	r2, #49680	; 0xc210
   127c8:	movt	r2, #2
   127cc:	ldm	r2, {r3, ip, lr}
   127d0:	ldr	r4, [r2, #12]
   127d4:	adds	r3, r3, #1
   127d8:	adc	ip, ip, #0
   127dc:	adds	lr, lr, #1
   127e0:	adc	r4, r4, #0
   127e4:	stm	r2, {r3, ip, lr}
   127e8:	str	r4, [r2, #12]
   127ec:	mov	r2, #1
   127f0:	str	r2, [r0]
   127f4:	str	r1, [r0, #4]
   127f8:	pop	{r4, sl, fp, pc}

000127fc <init_token_function@@Base>:
   127fc:	push	{r4, sl, fp, lr}
   12800:	add	fp, sp, #8
   12804:	movw	r2, #49696	; 0xc220
   12808:	movt	r2, #2
   1280c:	ldm	r2, {r3, ip, lr}
   12810:	ldr	r4, [r2, #12]
   12814:	adds	r3, r3, #1
   12818:	adc	ip, ip, #0
   1281c:	adds	lr, lr, #1
   12820:	adc	r4, r4, #0
   12824:	stm	r2, {r3, ip, lr}
   12828:	str	r4, [r2, #12]
   1282c:	mov	r2, #2
   12830:	str	r2, [r0]
   12834:	str	r1, [r0, #4]
   12838:	pop	{r4, sl, fp, pc}

0001283c <init_token_opar@@Base>:
   1283c:	push	{fp, lr}
   12840:	mov	fp, sp
   12844:	movw	r1, #49712	; 0xc230
   12848:	movt	r1, #2
   1284c:	ldm	r1, {r2, r3, ip, lr}
   12850:	adds	r2, r2, #1
   12854:	adc	r3, r3, #0
   12858:	adds	ip, ip, #1
   1285c:	adc	lr, lr, #0
   12860:	stm	r1, {r2, r3, ip, lr}
   12864:	mov	r1, #3
   12868:	str	r1, [r0]
   1286c:	pop	{fp, pc}

00012870 <init_token_cpar@@Base>:
   12870:	push	{fp, lr}
   12874:	mov	fp, sp
   12878:	movw	r1, #49728	; 0xc240
   1287c:	movt	r1, #2
   12880:	ldm	r1, {r2, r3, ip, lr}
   12884:	adds	r2, r2, #1
   12888:	adc	r3, r3, #0
   1288c:	adds	ip, ip, #1
   12890:	adc	lr, lr, #0
   12894:	stm	r1, {r2, r3, ip, lr}
   12898:	mov	r1, #4
   1289c:	str	r1, [r0]
   128a0:	pop	{fp, pc}

000128a4 <init_token_obra@@Base>:
   128a4:	push	{fp, lr}
   128a8:	mov	fp, sp
   128ac:	movw	r1, #49744	; 0xc250
   128b0:	movt	r1, #2
   128b4:	ldm	r1, {r2, r3, ip, lr}
   128b8:	adds	r2, r2, #1
   128bc:	adc	r3, r3, #0
   128c0:	adds	ip, ip, #1
   128c4:	adc	lr, lr, #0
   128c8:	stm	r1, {r2, r3, ip, lr}
   128cc:	mov	r1, #5
   128d0:	str	r1, [r0]
   128d4:	pop	{fp, pc}

000128d8 <init_token_cbra@@Base>:
   128d8:	push	{fp, lr}
   128dc:	mov	fp, sp
   128e0:	movw	r1, #49760	; 0xc260
   128e4:	movt	r1, #2
   128e8:	ldm	r1, {r2, r3, ip, lr}
   128ec:	adds	r2, r2, #1
   128f0:	adc	r3, r3, #0
   128f4:	adds	ip, ip, #1
   128f8:	adc	lr, lr, #0
   128fc:	stm	r1, {r2, r3, ip, lr}
   12900:	mov	r1, #6
   12904:	str	r1, [r0]
   12908:	pop	{fp, pc}

0001290c <init_token_return@@Base>:
   1290c:	push	{fp, lr}
   12910:	mov	fp, sp
   12914:	movw	r1, #49776	; 0xc270
   12918:	movt	r1, #2
   1291c:	ldm	r1, {r2, r3, ip, lr}
   12920:	adds	r2, r2, #1
   12924:	adc	r3, r3, #0
   12928:	adds	ip, ip, #1
   1292c:	adc	lr, lr, #0
   12930:	stm	r1, {r2, r3, ip, lr}
   12934:	mov	r1, #7
   12938:	str	r1, [r0]
   1293c:	pop	{fp, pc}

00012940 <init_token_semicolon@@Base>:
   12940:	push	{fp, lr}
   12944:	mov	fp, sp
   12948:	movw	r1, #49792	; 0xc280
   1294c:	movt	r1, #2
   12950:	ldm	r1, {r2, r3, ip, lr}
   12954:	adds	r2, r2, #1
   12958:	adc	r3, r3, #0
   1295c:	adds	ip, ip, #1
   12960:	adc	lr, lr, #0
   12964:	stm	r1, {r2, r3, ip, lr}
   12968:	mov	r1, #8
   1296c:	str	r1, [r0]
   12970:	pop	{fp, pc}

00012974 <init_token_eof@@Base>:
   12974:	push	{fp, lr}
   12978:	mov	fp, sp
   1297c:	movw	r1, #49808	; 0xc290
   12980:	movt	r1, #2
   12984:	ldm	r1, {r2, r3, ip, lr}
   12988:	adds	r2, r2, #1
   1298c:	adc	r3, r3, #0
   12990:	adds	ip, ip, #1
   12994:	adc	lr, lr, #0
   12998:	stm	r1, {r2, r3, ip, lr}
   1299c:	mov	r1, #9
   129a0:	str	r1, [r0]
   129a4:	pop	{fp, pc}

000129a8 <init_token_if@@Base>:
   129a8:	push	{fp, lr}
   129ac:	mov	fp, sp
   129b0:	movw	r1, #49824	; 0xc2a0
   129b4:	movt	r1, #2
   129b8:	ldm	r1, {r2, r3, ip, lr}
   129bc:	adds	r2, r2, #1
   129c0:	adc	r3, r3, #0
   129c4:	adds	ip, ip, #1
   129c8:	adc	lr, lr, #0
   129cc:	stm	r1, {r2, r3, ip, lr}
   129d0:	mov	r1, #10
   129d4:	str	r1, [r0]
   129d8:	pop	{fp, pc}

000129dc <init_token_else@@Base>:
   129dc:	push	{fp, lr}
   129e0:	mov	fp, sp
   129e4:	movw	r1, #49840	; 0xc2b0
   129e8:	movt	r1, #2
   129ec:	ldm	r1, {r2, r3, ip, lr}
   129f0:	adds	r2, r2, #1
   129f4:	adc	r3, r3, #0
   129f8:	adds	ip, ip, #1
   129fc:	adc	lr, lr, #0
   12a00:	stm	r1, {r2, r3, ip, lr}
   12a04:	mov	r1, #11
   12a08:	str	r1, [r0]
   12a0c:	pop	{fp, pc}

00012a10 <init_token_boolean_op@@Base>:
   12a10:	push	{r4, sl, fp, lr}
   12a14:	add	fp, sp, #8
   12a18:	movw	r2, #49856	; 0xc2c0
   12a1c:	movt	r2, #2
   12a20:	ldm	r2, {r3, ip, lr}
   12a24:	ldr	r4, [r2, #12]
   12a28:	adds	r3, r3, #1
   12a2c:	adc	ip, ip, #0
   12a30:	adds	lr, lr, #1
   12a34:	adc	r4, r4, #0
   12a38:	stm	r2, {r3, ip, lr}
   12a3c:	str	r4, [r2, #12]
   12a40:	mov	r2, #12
   12a44:	str	r2, [r0]
   12a48:	str	r1, [r0, #4]
   12a4c:	pop	{r4, sl, fp, pc}

00012a50 <free_token_int_type@@Base>:
   12a50:	push	{fp, lr}
   12a54:	mov	fp, sp
   12a58:	movw	r1, #49872	; 0xc2d0
   12a5c:	movt	r1, #2
   12a60:	ldm	r1, {r2, r3, ip, lr}
   12a64:	adds	r2, r2, #1
   12a68:	adc	r3, r3, #0
   12a6c:	adds	ip, ip, #1
   12a70:	adc	lr, lr, #0
   12a74:	stm	r1, {r2, r3, ip, lr}
   12a78:	pop	{fp, lr}
   12a7c:	b	11f28 <free@plt>

00012a80 <free_token_int_value@@Base>:
   12a80:	push	{fp, lr}
   12a84:	mov	fp, sp
   12a88:	movw	r1, #49888	; 0xc2e0
   12a8c:	movt	r1, #2
   12a90:	ldm	r1, {r2, r3, ip, lr}
   12a94:	adds	r2, r2, #1
   12a98:	adc	r3, r3, #0
   12a9c:	adds	ip, ip, #1
   12aa0:	adc	lr, lr, #0
   12aa4:	stm	r1, {r2, r3, ip, lr}
   12aa8:	pop	{fp, lr}
   12aac:	b	11f28 <free@plt>

00012ab0 <free_token_function@@Base>:
   12ab0:	push	{fp, lr}
   12ab4:	mov	fp, sp
   12ab8:	movw	r1, #49904	; 0xc2f0
   12abc:	movt	r1, #2
   12ac0:	ldm	r1, {r2, r3, ip, lr}
   12ac4:	adds	r2, r2, #1
   12ac8:	adc	r3, r3, #0
   12acc:	adds	ip, ip, #1
   12ad0:	adc	lr, lr, #0
   12ad4:	stm	r1, {r2, r3, ip, lr}
   12ad8:	pop	{fp, lr}
   12adc:	b	11f28 <free@plt>

00012ae0 <free_token_opar@@Base>:
   12ae0:	push	{fp, lr}
   12ae4:	mov	fp, sp
   12ae8:	movw	r1, #49920	; 0xc300
   12aec:	movt	r1, #2
   12af0:	ldm	r1, {r2, r3, ip, lr}
   12af4:	adds	r2, r2, #1
   12af8:	adc	r3, r3, #0
   12afc:	adds	ip, ip, #1
   12b00:	adc	lr, lr, #0
   12b04:	stm	r1, {r2, r3, ip, lr}
   12b08:	pop	{fp, lr}
   12b0c:	b	11f28 <free@plt>

00012b10 <free_token_cpar@@Base>:
   12b10:	push	{fp, lr}
   12b14:	mov	fp, sp
   12b18:	movw	r1, #49936	; 0xc310
   12b1c:	movt	r1, #2
   12b20:	ldm	r1, {r2, r3, ip, lr}
   12b24:	adds	r2, r2, #1
   12b28:	adc	r3, r3, #0
   12b2c:	adds	ip, ip, #1
   12b30:	adc	lr, lr, #0
   12b34:	stm	r1, {r2, r3, ip, lr}
   12b38:	pop	{fp, lr}
   12b3c:	b	11f28 <free@plt>

00012b40 <free_token_obra@@Base>:
   12b40:	push	{fp, lr}
   12b44:	mov	fp, sp
   12b48:	movw	r1, #49952	; 0xc320
   12b4c:	movt	r1, #2
   12b50:	ldm	r1, {r2, r3, ip, lr}
   12b54:	adds	r2, r2, #1
   12b58:	adc	r3, r3, #0
   12b5c:	adds	ip, ip, #1
   12b60:	adc	lr, lr, #0
   12b64:	stm	r1, {r2, r3, ip, lr}
   12b68:	pop	{fp, lr}
   12b6c:	b	11f28 <free@plt>

00012b70 <free_token_cbra@@Base>:
   12b70:	push	{fp, lr}
   12b74:	mov	fp, sp
   12b78:	movw	r1, #49968	; 0xc330
   12b7c:	movt	r1, #2
   12b80:	ldm	r1, {r2, r3, ip, lr}
   12b84:	adds	r2, r2, #1
   12b88:	adc	r3, r3, #0
   12b8c:	adds	ip, ip, #1
   12b90:	adc	lr, lr, #0
   12b94:	stm	r1, {r2, r3, ip, lr}
   12b98:	pop	{fp, lr}
   12b9c:	b	11f28 <free@plt>

00012ba0 <free_token_return@@Base>:
   12ba0:	push	{fp, lr}
   12ba4:	mov	fp, sp
   12ba8:	movw	r1, #49984	; 0xc340
   12bac:	movt	r1, #2
   12bb0:	ldm	r1, {r2, r3, ip, lr}
   12bb4:	adds	r2, r2, #1
   12bb8:	adc	r3, r3, #0
   12bbc:	adds	ip, ip, #1
   12bc0:	adc	lr, lr, #0
   12bc4:	stm	r1, {r2, r3, ip, lr}
   12bc8:	pop	{fp, lr}
   12bcc:	b	11f28 <free@plt>

00012bd0 <free_token_semicolon@@Base>:
   12bd0:	push	{fp, lr}
   12bd4:	mov	fp, sp
   12bd8:	movw	r1, #50000	; 0xc350
   12bdc:	movt	r1, #2
   12be0:	ldm	r1, {r2, r3, ip, lr}
   12be4:	adds	r2, r2, #1
   12be8:	adc	r3, r3, #0
   12bec:	adds	ip, ip, #1
   12bf0:	adc	lr, lr, #0
   12bf4:	stm	r1, {r2, r3, ip, lr}
   12bf8:	pop	{fp, lr}
   12bfc:	b	11f28 <free@plt>

00012c00 <free_token_eof@@Base>:
   12c00:	push	{fp, lr}
   12c04:	mov	fp, sp
   12c08:	movw	r1, #50016	; 0xc360
   12c0c:	movt	r1, #2
   12c10:	ldm	r1, {r2, r3, ip, lr}
   12c14:	adds	r2, r2, #1
   12c18:	adc	r3, r3, #0
   12c1c:	adds	ip, ip, #1
   12c20:	adc	lr, lr, #0
   12c24:	stm	r1, {r2, r3, ip, lr}
   12c28:	pop	{fp, lr}
   12c2c:	b	11f28 <free@plt>

00012c30 <free_token_if@@Base>:
   12c30:	push	{fp, lr}
   12c34:	mov	fp, sp
   12c38:	movw	r1, #50032	; 0xc370
   12c3c:	movt	r1, #2
   12c40:	ldm	r1, {r2, r3, ip, lr}
   12c44:	adds	r2, r2, #1
   12c48:	adc	r3, r3, #0
   12c4c:	adds	ip, ip, #1
   12c50:	adc	lr, lr, #0
   12c54:	stm	r1, {r2, r3, ip, lr}
   12c58:	pop	{fp, lr}
   12c5c:	b	11f28 <free@plt>

00012c60 <free_token_else@@Base>:
   12c60:	push	{fp, lr}
   12c64:	mov	fp, sp
   12c68:	movw	r1, #50048	; 0xc380
   12c6c:	movt	r1, #2
   12c70:	ldm	r1, {r2, r3, ip, lr}
   12c74:	adds	r2, r2, #1
   12c78:	adc	r3, r3, #0
   12c7c:	adds	ip, ip, #1
   12c80:	adc	lr, lr, #0
   12c84:	stm	r1, {r2, r3, ip, lr}
   12c88:	pop	{fp, lr}
   12c8c:	b	11f28 <free@plt>

00012c90 <free_token_boolean_op@@Base>:
   12c90:	push	{r4, r5, fp, lr}
   12c94:	add	fp, sp, #8
   12c98:	mov	r4, r0
   12c9c:	movw	r5, #50064	; 0xc390
   12ca0:	movt	r5, #2
   12ca4:	ldrd	r0, [r5]
   12ca8:	adds	r0, r0, #1
   12cac:	adc	r1, r1, #0
   12cb0:	strd	r0, [r5]
   12cb4:	ldr	r0, [r4, #4]
   12cb8:	mov	r1, #16
   12cbc:	cmp	r0, #0
   12cc0:	movwne	r1, #8
   12cc4:	mov	r2, r5
   12cc8:	ldr	r1, [r2, r1]!
   12ccc:	adds	r1, r1, #1
   12cd0:	str	r1, [r2]
   12cd4:	ldr	r1, [r2, #4]
   12cd8:	adc	r1, r1, #0
   12cdc:	str	r1, [r2, #4]
   12ce0:	cmp	r0, #0
   12ce4:	beq	12cfc <free_token_boolean_op@@Base+0x6c>
   12ce8:	ldrd	r2, [r5, #24]
   12cec:	adds	r2, r2, #1
   12cf0:	adc	r3, r3, #0
   12cf4:	strd	r2, [r5, #24]
   12cf8:	bl	11f28 <free@plt>
   12cfc:	ldrd	r0, [r5, #32]
   12d00:	adds	r0, r0, #1
   12d04:	adc	r1, r1, #0
   12d08:	strd	r0, [r5, #32]
   12d0c:	mov	r0, r4
   12d10:	pop	{r4, r5, fp, lr}
   12d14:	b	11f28 <free@plt>
   12d18:	push	{r4, r5, r6, lr}
   12d1c:	sub	sp, sp, #8
   12d20:	movw	r0, #40912	; 0x9fd0
   12d24:	movt	r0, #1
   12d28:	movw	r1, #40711	; 0x9f07
   12d2c:	movt	r1, #1
   12d30:	movw	r2, #10327	; 0x2857
   12d34:	movt	r2, #23326	; 0x5b1e
   12d38:	bl	16ec4 <__generate_code_for_binary_boolean_expression@@Base+0x490>
   12d3c:	movw	r0, #42112	; 0xa480
   12d40:	movt	r0, #1
   12d44:	add	r4, r0, #4
   12d48:	mov	r5, #0
   12d4c:	movw	r6, #41584	; 0xa270
   12d50:	movt	r6, #1
   12d54:	mov	r3, r6
   12d58:	ldr	r0, [r3, r5]!
   12d5c:	ldr	r1, [r3, #16]
   12d60:	str	r1, [sp]
   12d64:	ldmib	r3, {r1, r2}
   12d68:	ldrb	r3, [r3, #12]
   12d6c:	bl	17628 <__generate_code_for_binary_boolean_expression@@Base+0xbf4>
   12d70:	ldrd	r0, [r4, #-4]
   12d74:	bl	17edc <__generate_code_for_binary_boolean_expression@@Base+0x14a8>
   12d78:	add	r5, r5, #20
   12d7c:	add	r4, r4, #8
   12d80:	cmp	r5, #520	; 0x208
   12d84:	bne	12d54 <free_token_boolean_op@@Base+0xc4>
   12d88:	bl	18658 <__generate_code_for_binary_boolean_expression@@Base+0x1c24>
   12d8c:	add	sp, sp, #8
   12d90:	pop	{r4, r5, r6, lr}
   12d94:	b	193c4 <__generate_code_for_binary_boolean_expression@@Base+0x2990>
   12d98:	push	{fp, lr}
   12d9c:	bl	12d18 <free_token_boolean_op@@Base+0x88>
   12da0:	vmov.i32	q8, #0	; 0x00000000
   12da4:	movw	r0, #49680	; 0xc210
   12da8:	movt	r0, #2
   12dac:	vst1.64	{d16-d17}, [r0]
   12db0:	movw	r0, #49664	; 0xc200
   12db4:	movt	r0, #2
   12db8:	vst1.64	{d16-d17}, [r0]
   12dbc:	movw	r0, #49696	; 0xc220
   12dc0:	movt	r0, #2
   12dc4:	vst1.64	{d16-d17}, [r0]
   12dc8:	movw	r0, #49712	; 0xc230
   12dcc:	movt	r0, #2
   12dd0:	vst1.64	{d16-d17}, [r0]
   12dd4:	movw	r0, #49728	; 0xc240
   12dd8:	movt	r0, #2
   12ddc:	vst1.64	{d16-d17}, [r0]
   12de0:	movw	r0, #49744	; 0xc250
   12de4:	movt	r0, #2
   12de8:	vst1.64	{d16-d17}, [r0]
   12dec:	movw	r0, #49760	; 0xc260
   12df0:	movt	r0, #2
   12df4:	vst1.64	{d16-d17}, [r0]
   12df8:	movw	r0, #49776	; 0xc270
   12dfc:	movt	r0, #2
   12e00:	vst1.64	{d16-d17}, [r0]
   12e04:	movw	r0, #49792	; 0xc280
   12e08:	movt	r0, #2
   12e0c:	vst1.64	{d16-d17}, [r0]
   12e10:	movw	r0, #49808	; 0xc290
   12e14:	movt	r0, #2
   12e18:	vst1.64	{d16-d17}, [r0]
   12e1c:	movw	r0, #49824	; 0xc2a0
   12e20:	movt	r0, #2
   12e24:	vst1.64	{d16-d17}, [r0]
   12e28:	movw	r0, #49840	; 0xc2b0
   12e2c:	movt	r0, #2
   12e30:	vst1.64	{d16-d17}, [r0]
   12e34:	movw	r0, #49856	; 0xc2c0
   12e38:	movt	r0, #2
   12e3c:	vst1.64	{d16-d17}, [r0]
   12e40:	movw	r0, #49872	; 0xc2d0
   12e44:	movt	r0, #2
   12e48:	vst1.64	{d16-d17}, [r0]
   12e4c:	movw	r0, #49888	; 0xc2e0
   12e50:	movt	r0, #2
   12e54:	vst1.64	{d16-d17}, [r0]
   12e58:	movw	r0, #49904	; 0xc2f0
   12e5c:	movt	r0, #2
   12e60:	vst1.64	{d16-d17}, [r0]
   12e64:	movw	r0, #49920	; 0xc300
   12e68:	movt	r0, #2
   12e6c:	vst1.64	{d16-d17}, [r0]
   12e70:	movw	r0, #49936	; 0xc310
   12e74:	movt	r0, #2
   12e78:	vst1.64	{d16-d17}, [r0]
   12e7c:	movw	r0, #49952	; 0xc320
   12e80:	movt	r0, #2
   12e84:	vst1.64	{d16-d17}, [r0]
   12e88:	movw	r0, #49968	; 0xc330
   12e8c:	movt	r0, #2
   12e90:	vst1.64	{d16-d17}, [r0]
   12e94:	movw	r0, #49984	; 0xc340
   12e98:	movt	r0, #2
   12e9c:	vst1.64	{d16-d17}, [r0]
   12ea0:	movw	r0, #50000	; 0xc350
   12ea4:	movt	r0, #2
   12ea8:	vst1.64	{d16-d17}, [r0]
   12eac:	movw	r0, #50016	; 0xc360
   12eb0:	movt	r0, #2
   12eb4:	vst1.64	{d16-d17}, [r0]
   12eb8:	movw	r0, #50032	; 0xc370
   12ebc:	movt	r0, #2
   12ec0:	vst1.64	{d16-d17}, [r0]
   12ec4:	movw	r0, #50048	; 0xc380
   12ec8:	movt	r0, #2
   12ecc:	vst1.64	{d16-d17}, [r0]
   12ed0:	movw	r0, #50064	; 0xc390
   12ed4:	movt	r0, #2
   12ed8:	mov	r1, #0
   12edc:	str	r1, [r0, #32]
   12ee0:	add	r2, r0, #16
   12ee4:	vst1.64	{d16-d17}, [r2 :128]
   12ee8:	mov	r2, #36	; 0x24
   12eec:	vst1.64	{d16-d17}, [r0 :128], r2
   12ef0:	str	r1, [r0]
   12ef4:	pop	{fp, pc}
   12ef8:	movw	r0, #11544	; 0x2d18
   12efc:	movt	r0, #1
   12f00:	movw	r1, #11672	; 0x2d98
   12f04:	movt	r1, #1
   12f08:	b	19874 <__gcov_flush@@Base+0xb4>

00012f0c <init_lexer@@Base>:
   12f0c:	push	{r4, sl, fp, lr}
   12f10:	add	fp, sp, #8
   12f14:	movw	r2, #50112	; 0xc3c0
   12f18:	movt	r2, #2
   12f1c:	ldm	r2, {r3, ip, lr}
   12f20:	ldr	r4, [r2, #12]
   12f24:	adds	r3, r3, #1
   12f28:	adc	ip, ip, #0
   12f2c:	adds	lr, lr, #1
   12f30:	adc	r4, r4, #0
   12f34:	stm	r2, {r3, ip, lr}
   12f38:	str	r4, [r2, #12]
   12f3c:	mov	r2, #0
   12f40:	stm	r0, {r1, r2}
   12f44:	str	r2, [r0, #8]
   12f48:	pop	{r4, sl, fp, pc}

00012f4c <destroy_lexer@@Base>:
   12f4c:	push	{r4, sl, fp, lr}
   12f50:	add	fp, sp, #8
   12f54:	movw	r4, #50128	; 0xc3d0
   12f58:	movt	r4, #2
   12f5c:	ldrd	r2, [r4]
   12f60:	adds	r2, r2, #1
   12f64:	adc	r3, r3, #0
   12f68:	strd	r2, [r4]
   12f6c:	ldr	r0, [r0, #4]
   12f70:	mov	r1, #16
   12f74:	cmp	r0, #0
   12f78:	movwne	r1, #8
   12f7c:	mov	r2, r4
   12f80:	ldr	r1, [r2, r1]!
   12f84:	adds	r1, r1, #1
   12f88:	str	r1, [r2]
   12f8c:	ldr	r1, [r2, #4]
   12f90:	adc	r1, r1, #0
   12f94:	str	r1, [r2, #4]
   12f98:	cmp	r0, #0
   12f9c:	beq	12fb4 <destroy_lexer@@Base+0x68>
   12fa0:	ldrd	r2, [r4, #24]
   12fa4:	adds	r2, r2, #1
   12fa8:	adc	r3, r3, #0
   12fac:	strd	r2, [r4, #24]
   12fb0:	bl	12fc8 <free_stack_base@@Base>
   12fb4:	ldrd	r0, [r4, #32]
   12fb8:	adds	r0, r0, #1
   12fbc:	adc	r1, r1, #0
   12fc0:	strd	r0, [r4, #32]
   12fc4:	pop	{r4, sl, fp, pc}

00012fc8 <free_stack_base@@Base>:
   12fc8:	push	{fp, lr}
   12fcc:	mov	fp, sp
   12fd0:	movw	r1, #50168	; 0xc3f8
   12fd4:	movt	r1, #2
   12fd8:	ldm	r1, {r2, r3, ip, lr}
   12fdc:	adds	r2, r2, #1
   12fe0:	adc	r3, r3, #0
   12fe4:	adds	ip, ip, #1
   12fe8:	adc	lr, lr, #0
   12fec:	stm	r1, {r2, r3, ip, lr}
   12ff0:	pop	{fp, lr}
   12ff4:	b	11f28 <free@plt>

00012ff8 <push_back@@Base>:
   12ff8:	push	{r4, r5, r6, sl, fp, lr}
   12ffc:	add	fp, sp, #16
   13000:	mov	r6, r1
   13004:	mov	r5, r0
   13008:	movw	r0, #50184	; 0xc408
   1300c:	movt	r0, #2
   13010:	ldm	r0, {r1, r2, r3, r4}
   13014:	adds	r1, r1, #1
   13018:	adc	r2, r2, #0
   1301c:	adds	r3, r3, #1
   13020:	adc	r4, r4, #0
   13024:	stm	r0, {r1, r2, r3, r4}
   13028:	mov	r0, #8
   1302c:	bl	11fa0 <malloc@plt>
   13030:	ldr	r1, [r5, #4]
   13034:	stm	r0, {r1, r6}
   13038:	str	r0, [r5, #4]
   1303c:	pop	{r4, r5, r6, sl, fp, pc}

00013040 <get_char@@Base>:
   13040:	push	{fp, lr}
   13044:	mov	fp, sp
   13048:	movw	r1, #50200	; 0xc418
   1304c:	movt	r1, #2
   13050:	ldm	r1, {r2, r3, ip, lr}
   13054:	adds	r2, r2, #1
   13058:	adc	r3, r3, #0
   1305c:	adds	ip, ip, #1
   13060:	adc	lr, lr, #0
   13064:	stm	r1, {r2, r3, ip, lr}
   13068:	ldr	r1, [r0]
   1306c:	ldr	r2, [r0, #8]
   13070:	add	r3, r2, #1
   13074:	str	r3, [r0, #8]
   13078:	ldrb	r0, [r1, r2]
   1307c:	pop	{fp, pc}

00013080 <push_back_chars@@Base>:
   13080:	push	{r4, r5, fp, lr}
   13084:	add	fp, sp, #8
   13088:	movw	ip, #50224	; 0xc430
   1308c:	movt	ip, #2
   13090:	ldrd	r4, [ip]
   13094:	adds	r4, r4, #1
   13098:	adc	r5, r5, #0
   1309c:	strd	r4, [ip]
   130a0:	ldr	r3, [r0, #8]
   130a4:	mov	r5, #16
   130a8:	cmp	r3, r1
   130ac:	movwcs	r5, #8
   130b0:	mov	r2, ip
   130b4:	ldr	r5, [r2, r5]!
   130b8:	adds	r5, r5, #1
   130bc:	str	r5, [r2]
   130c0:	ldr	r5, [r2, #4]
   130c4:	adc	r5, r5, #0
   130c8:	str	r5, [r2, #4]
   130cc:	cmp	r3, r1
   130d0:	bcc	130f8 <push_back_chars@@Base+0x78>
   130d4:	ldr	r2, [ip, #24]
   130d8:	ldr	r5, [ip, #28]
   130dc:	adds	r2, r2, #1
   130e0:	adc	r5, r5, #0
   130e4:	str	r2, [ip, #24]
   130e8:	str	r5, [ip, #28]
   130ec:	sub	r1, r3, r1
   130f0:	str	r1, [r0, #8]
   130f4:	pop	{r4, r5, fp, pc}
   130f8:	movw	r0, #49416	; 0xc108
   130fc:	movt	r0, #2
   13100:	ldr	r3, [r0]
   13104:	movw	r0, #42320	; 0xa550
   13108:	movt	r0, #1
   1310c:	mov	r1, #32
   13110:	mov	r2, #1
   13114:	bl	11f7c <fwrite@plt>
   13118:	mov	r0, #1
   1311c:	bl	11fdc <exit@plt>

00013120 <push_back_one_char@@Base>:
   13120:	push	{fp, lr}
   13124:	mov	fp, sp
   13128:	movw	r1, #50256	; 0xc450
   1312c:	movt	r1, #2
   13130:	ldm	r1, {r2, r3, ip, lr}
   13134:	adds	r2, r2, #1
   13138:	adc	r3, r3, #0
   1313c:	adds	ip, ip, #1
   13140:	adc	lr, lr, #0
   13144:	stm	r1, {r2, r3, ip, lr}
   13148:	mov	r1, #1
   1314c:	pop	{fp, lr}
   13150:	b	13080 <push_back_chars@@Base>

00013154 <next@@Base>:
   13154:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13158:	add	fp, sp, #28
   1315c:	sub	sp, sp, #524	; 0x20c
   13160:	mov	r4, r0
   13164:	movw	r7, #50272	; 0xc460
   13168:	movt	r7, #2
   1316c:	ldrd	r0, [r7]
   13170:	adds	r0, r0, #1
   13174:	adc	r1, r1, #0
   13178:	strd	r0, [r7]
   1317c:	ldr	r0, [r4, #4]
   13180:	mov	r1, #16
   13184:	cmp	r0, #0
   13188:	movwne	r1, #8
   1318c:	mov	r2, r7
   13190:	ldr	r1, [r2, r1]!
   13194:	adds	r1, r1, #1
   13198:	str	r1, [r2]
   1319c:	ldr	r1, [r2, #4]
   131a0:	adc	r1, r1, #0
   131a4:	str	r1, [r2, #4]
   131a8:	cmp	r0, #0
   131ac:	beq	131dc <next@@Base+0x88>
   131b0:	ldrd	r2, [r7, #24]
   131b4:	adds	r2, r2, #1
   131b8:	adc	r3, r3, #0
   131bc:	strd	r2, [r7, #24]
   131c0:	ldr	r1, [r0]
   131c4:	str	r1, [r4, #4]
   131c8:	ldr	r6, [r0, #4]
   131cc:	mov	r1, #0
   131d0:	str	r1, [r0, #4]
   131d4:	bl	12fc8 <free_stack_base@@Base>
   131d8:	b	136c0 <next@@Base+0x56c>
   131dc:	ldrd	r0, [r7, #32]
   131e0:	adds	r0, r0, #1
   131e4:	adc	r1, r1, #0
   131e8:	strd	r0, [r7, #32]
   131ec:	mov	r0, r4
   131f0:	bl	13040 <get_char@@Base>
   131f4:	mov	r6, r0
   131f8:	mov	r0, #48	; 0x30
   131fc:	cmp	r6, #0
   13200:	movwne	r0, #40	; 0x28
   13204:	mov	r1, r7
   13208:	ldr	r0, [r1, r0]!
   1320c:	adds	r0, r0, #1
   13210:	str	r0, [r1]
   13214:	ldr	r0, [r1, #4]
   13218:	adc	r0, r0, #0
   1321c:	str	r0, [r1, #4]
   13220:	cmp	r6, #0
   13224:	beq	13698 <next@@Base+0x544>
   13228:	mov	sl, #0
   1322c:	movw	r5, #42480	; 0xa5f0
   13230:	movt	r5, #1
   13234:	add	r9, r5, #8
   13238:	mov	r8, #0
   1323c:	mov	r0, #0
   13240:	str	r0, [sp, #4]
   13244:	b	13554 <next@@Base+0x400>
   13248:	cmp	r2, #48	; 0x30
   1324c:	mov	r0, #176	; 0xb0
   13250:	movweq	r0, #168	; 0xa8
   13254:	mov	r1, r7
   13258:	ldr	r0, [r1, r0]!
   1325c:	adds	r0, r0, #1
   13260:	str	r0, [r1]
   13264:	ldr	r0, [r1, #4]
   13268:	adc	r0, r0, #0
   1326c:	str	r0, [r1, #4]
   13270:	cmp	r2, #48	; 0x30
   13274:	beq	13c5c <next@@Base+0xb08>
   13278:	mov	r0, #200	; 0xc8
   1327c:	movwhi	r0, #192	; 0xc0
   13280:	mov	r1, r7
   13284:	ldr	r0, [r1, r0]!
   13288:	adds	r0, r0, #1
   1328c:	str	r0, [r1]
   13290:	ldr	r0, [r1, #4]
   13294:	adc	r0, r0, #0
   13298:	str	r0, [r1, #4]
   1329c:	cmp	r2, #49	; 0x31
   132a0:	bcc	13c84 <next@@Base+0xb30>
   132a4:	cmp	r2, #58	; 0x3a
   132a8:	mov	r0, #216	; 0xd8
   132ac:	movwcc	r0, #208	; 0xd0
   132b0:	mov	r1, r7
   132b4:	ldr	r0, [r1, r0]!
   132b8:	adds	r0, r0, #1
   132bc:	str	r0, [r1]
   132c0:	ldr	r0, [r1, #4]
   132c4:	adc	r0, r0, #0
   132c8:	str	r0, [r1, #4]
   132cc:	cmp	r2, #57	; 0x39
   132d0:	bhi	13300 <next@@Base+0x1ac>
   132d4:	add	r0, sp, #8
   132d8:	ldr	r2, [sp, #4]
   132dc:	strb	r6, [r0, r2]
   132e0:	ldrd	r0, [r7, #224]	; 0xe0
   132e4:	adds	r0, r0, #1
   132e8:	adc	r1, r1, #0
   132ec:	strd	r0, [r7, #224]	; 0xe0
   132f0:	add	r2, r2, #1
   132f4:	str	r2, [sp, #4]
   132f8:	mov	r8, #1
   132fc:	b	13638 <next@@Base+0x4e4>
   13300:	mov	ip, r5
   13304:	ldrd	r0, [r7, #240]	; 0xf0
   13308:	ldr	r3, [r7, #264]	; 0x108
   1330c:	ldr	r5, [r7, #268]	; 0x10c
   13310:	adds	r0, r0, #1
   13314:	adc	r1, r1, #0
   13318:	adds	r3, r3, #1
   1331c:	str	r3, [r7, #264]	; 0x108
   13320:	strd	r0, [r7, #240]	; 0xf0
   13324:	adc	r0, r5, #0
   13328:	str	r0, [r7, #268]	; 0x10c
   1332c:	cmp	r2, #123	; 0x7b
   13330:	mov	r0, #288	; 0x120
   13334:	movweq	r0, #280	; 0x118
   13338:	mov	r1, r7
   1333c:	ldr	r0, [r1, r0]!
   13340:	adds	r0, r0, #1
   13344:	str	r0, [r1]
   13348:	ldr	r0, [r1, #4]
   1334c:	adc	r0, r0, #0
   13350:	str	r0, [r1, #4]
   13354:	cmp	r2, #123	; 0x7b
   13358:	beq	13d34 <next@@Base+0xbe0>
   1335c:	cmp	r2, #125	; 0x7d
   13360:	mov	r0, #312	; 0x138
   13364:	movweq	r0, #304	; 0x130
   13368:	mov	r1, r7
   1336c:	ldr	r0, [r1, r0]!
   13370:	adds	r0, r0, #1
   13374:	str	r0, [r1]
   13378:	ldr	r0, [r1, #4]
   1337c:	adc	r0, r0, #0
   13380:	str	r0, [r1, #4]
   13384:	cmp	r2, #125	; 0x7d
   13388:	beq	13d60 <next@@Base+0xc0c>
   1338c:	cmp	r2, #59	; 0x3b
   13390:	mov	r0, #336	; 0x150
   13394:	movweq	r0, #328	; 0x148
   13398:	mov	r1, r7
   1339c:	ldr	r0, [r1, r0]!
   133a0:	adds	r0, r0, #1
   133a4:	str	r0, [r1]
   133a8:	ldr	r0, [r1, #4]
   133ac:	adc	r0, r0, #0
   133b0:	str	r0, [r1, #4]
   133b4:	cmp	r2, #59	; 0x3b
   133b8:	beq	13d8c <next@@Base+0xc38>
   133bc:	cmp	r2, #101	; 0x65
   133c0:	mov	r0, #360	; 0x168
   133c4:	movweq	r0, #352	; 0x160
   133c8:	mov	r1, r7
   133cc:	ldr	r0, [r1, r0]!
   133d0:	adds	r0, r0, #1
   133d4:	str	r0, [r1]
   133d8:	ldr	r0, [r1, #4]
   133dc:	adc	r0, r0, #0
   133e0:	str	r0, [r1, #4]
   133e4:	cmp	r2, #101	; 0x65
   133e8:	bne	13424 <next@@Base+0x2d0>
   133ec:	add	r0, sp, #8
   133f0:	ldr	r2, [sp, #4]
   133f4:	strb	r6, [r0, r2]
   133f8:	ldr	r0, [r7, #368]	; 0x170
   133fc:	ldr	r1, [r7, #372]	; 0x174
   13400:	adds	r0, r0, #1
   13404:	adc	r1, r1, #0
   13408:	str	r0, [r7, #368]	; 0x170
   1340c:	str	r1, [r7, #372]	; 0x174
   13410:	add	r2, r2, #1
   13414:	str	r2, [sp, #4]
   13418:	mov	r8, #5
   1341c:	mov	r5, ip
   13420:	b	13638 <next@@Base+0x4e4>
   13424:	cmp	r2, #105	; 0x69
   13428:	mov	r0, #384	; 0x180
   1342c:	movweq	r0, #376	; 0x178
   13430:	mov	r1, r7
   13434:	ldr	r0, [r1, r0]!
   13438:	adds	r0, r0, #1
   1343c:	str	r0, [r1]
   13440:	ldr	r0, [r1, #4]
   13444:	adc	r0, r0, #0
   13448:	str	r0, [r1, #4]
   1344c:	cmp	r2, #105	; 0x69
   13450:	mov	r5, ip
   13454:	bne	1348c <next@@Base+0x338>
   13458:	add	r0, sp, #8
   1345c:	ldr	r2, [sp, #4]
   13460:	strb	r6, [r0, r2]
   13464:	ldr	r0, [r7, #392]	; 0x188
   13468:	ldr	r1, [r7, #396]	; 0x18c
   1346c:	adds	r0, r0, #1
   13470:	adc	r1, r1, #0
   13474:	str	r0, [r7, #392]	; 0x188
   13478:	str	r1, [r7, #396]	; 0x18c
   1347c:	add	r2, r2, #1
   13480:	str	r2, [sp, #4]
   13484:	mov	r8, #2
   13488:	b	13638 <next@@Base+0x4e4>
   1348c:	cmp	r2, #109	; 0x6d
   13490:	mov	r0, #408	; 0x198
   13494:	movweq	r0, #400	; 0x190
   13498:	mov	r1, r7
   1349c:	ldr	r0, [r1, r0]!
   134a0:	adds	r0, r0, #1
   134a4:	str	r0, [r1]
   134a8:	ldr	r0, [r1, #4]
   134ac:	adc	r0, r0, #0
   134b0:	str	r0, [r1, #4]
   134b4:	cmp	r2, #109	; 0x6d
   134b8:	bne	134f0 <next@@Base+0x39c>
   134bc:	add	r0, sp, #8
   134c0:	ldr	r2, [sp, #4]
   134c4:	strb	r6, [r0, r2]
   134c8:	ldr	r0, [r7, #416]	; 0x1a0
   134cc:	ldr	r1, [r7, #420]	; 0x1a4
   134d0:	adds	r0, r0, #1
   134d4:	adc	r1, r1, #0
   134d8:	str	r0, [r7, #416]	; 0x1a0
   134dc:	str	r1, [r7, #420]	; 0x1a4
   134e0:	add	r2, r2, #1
   134e4:	str	r2, [sp, #4]
   134e8:	mov	r8, #3
   134ec:	b	13638 <next@@Base+0x4e4>
   134f0:	cmp	r2, #114	; 0x72
   134f4:	mov	r0, #432	; 0x1b0
   134f8:	movweq	r0, #424	; 0x1a8
   134fc:	mov	r1, r7
   13500:	ldr	r0, [r1, r0]!
   13504:	adds	r0, r0, #1
   13508:	str	r0, [r1]
   1350c:	ldr	r0, [r1, #4]
   13510:	adc	r0, r0, #0
   13514:	str	r0, [r1, #4]
   13518:	cmp	r2, #114	; 0x72
   1351c:	bne	14094 <next@@Base+0xf40>
   13520:	add	r0, sp, #8
   13524:	ldr	r2, [sp, #4]
   13528:	strb	r6, [r0, r2]
   1352c:	ldr	r0, [r7, #440]	; 0x1b8
   13530:	ldr	r1, [r7, #444]	; 0x1bc
   13534:	adds	r0, r0, #1
   13538:	adc	r1, r1, #0
   1353c:	str	r0, [r7, #440]	; 0x1b8
   13540:	str	r1, [r7, #444]	; 0x1bc
   13544:	add	r2, r2, #1
   13548:	str	r2, [sp, #4]
   1354c:	mov	r8, #4
   13550:	b	13638 <next@@Base+0x4e4>
   13554:	movw	r0, #49360	; 0xc0d0
   13558:	movt	r0, #2
   1355c:	str	sl, [r0]
   13560:	cmp	r8, #5
   13564:	bhi	13644 <next@@Base+0x4f0>
   13568:	add	r0, pc, #0
   1356c:	ldr	pc, [r0, r8, lsl #2]
   13570:	andeq	r3, r1, r8, lsl #11
   13574:	andeq	r3, r1, r4, ror #13
   13578:	andeq	r3, r1, r4, lsr #20
   1357c:	andeq	r3, r1, r0, lsr #15
   13580:			; <UNDEFINED> instruction: 0x000138bc
   13584:	ldrdeq	r3, [r1], -r0
   13588:	mov	r0, r9
   1358c:	bl	14388 <next@@Base+0x1234>
   13590:	uxtb	r2, r6
   13594:	cmp	r2, #9
   13598:	mov	r0, #120	; 0x78
   1359c:	movweq	r0, #112	; 0x70
   135a0:	mov	r1, r7
   135a4:	ldr	r0, [r1, r0]!
   135a8:	adds	r0, r0, #1
   135ac:	str	r0, [r1]
   135b0:	ldr	r0, [r1, #4]
   135b4:	adc	r0, r0, #0
   135b8:	str	r0, [r1, #4]
   135bc:	cmp	r2, #9
   135c0:	beq	13624 <next@@Base+0x4d0>
   135c4:	cmp	r2, #32
   135c8:	mov	r0, #136	; 0x88
   135cc:	movweq	r0, #128	; 0x80
   135d0:	mov	r1, r7
   135d4:	ldr	r0, [r1, r0]!
   135d8:	adds	r0, r0, #1
   135dc:	str	r0, [r1]
   135e0:	ldr	r0, [r1, #4]
   135e4:	adc	r0, r0, #0
   135e8:	str	r0, [r1, #4]
   135ec:	cmp	r2, #32
   135f0:	beq	13624 <next@@Base+0x4d0>
   135f4:	cmp	r2, #10
   135f8:	mov	r0, #152	; 0x98
   135fc:	movweq	r0, #144	; 0x90
   13600:	mov	r1, r7
   13604:	ldr	r0, [r1, r0]!
   13608:	adds	r0, r0, #1
   1360c:	str	r0, [r1]
   13610:	ldr	r0, [r1, #4]
   13614:	adc	r0, r0, #0
   13618:	str	r0, [r1, #4]
   1361c:	cmp	r2, #10
   13620:	bne	13248 <next@@Base+0xf4>
   13624:	ldrd	r0, [r7, #160]	; 0xa0
   13628:	adds	r0, r0, #1
   1362c:	adc	r1, r1, #0
   13630:	strd	r0, [r7, #160]	; 0xa0
   13634:	mov	r8, #0
   13638:	mov	r0, r4
   1363c:	bl	13040 <get_char@@Base>
   13640:	mov	r6, r0
   13644:	mov	r0, r5
   13648:	bl	14388 <next@@Base+0x1234>
   1364c:	ldr	r0, [r7, #984]	; 0x3d8
   13650:	ldr	r1, [r7, #988]	; 0x3dc
   13654:	adds	r0, r0, #1
   13658:	adc	r1, r1, #0
   1365c:	str	r0, [r7, #984]	; 0x3d8
   13660:	str	r1, [r7, #988]	; 0x3dc
   13664:	uxtb	r0, r6
   13668:	cmp	r0, #0
   1366c:	mov	r1, #48	; 0x30
   13670:	movwne	r1, #40	; 0x28
   13674:	mov	r2, r7
   13678:	ldr	r1, [r2, r1]!
   1367c:	adds	r1, r1, #1
   13680:	str	r1, [r2]
   13684:	ldr	r1, [r2, #4]
   13688:	adc	r1, r1, #0
   1368c:	str	r1, [r2, #4]
   13690:	cmp	r0, #0
   13694:	bne	13554 <next@@Base+0x400>
   13698:	ldr	r0, [r7, #992]	; 0x3e0
   1369c:	ldr	r1, [r7, #996]	; 0x3e4
   136a0:	adds	r0, r0, #1
   136a4:	adc	r1, r1, #0
   136a8:	str	r0, [r7, #992]	; 0x3e0
   136ac:	str	r1, [r7, #996]	; 0x3e4
   136b0:	mov	r0, #4
   136b4:	bl	11fa0 <malloc@plt>
   136b8:	mov	r6, r0
   136bc:	bl	12974 <init_token_eof@@Base>
   136c0:	ldr	r0, [r7, #1000]	; 0x3e8
   136c4:	ldr	r1, [r7, #1004]	; 0x3ec
   136c8:	adds	r0, r0, #1
   136cc:	adc	r1, r1, #0
   136d0:	str	r0, [r7, #1000]	; 0x3e8
   136d4:	str	r1, [r7, #1004]	; 0x3ec
   136d8:	mov	r0, r6
   136dc:	sub	sp, fp, #28
   136e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136e4:	add	r8, r5, #16
   136e8:	mov	r0, r8
   136ec:	bl	14388 <next@@Base+0x1234>
   136f0:	sub	r0, r6, #48	; 0x30
   136f4:	uxtb	r0, r0
   136f8:	mov	r1, #704	; 0x2c0
   136fc:	cmp	r0, #10
   13700:	movwcc	r1, #696	; 0x2b8
   13704:	mov	r2, r7
   13708:	ldr	r1, [r2, r1]!
   1370c:	adds	r1, r1, #1
   13710:	str	r1, [r2]
   13714:	ldr	r1, [r2, #4]
   13718:	adc	r1, r1, #0
   1371c:	str	r1, [r2, #4]
   13720:	add	r9, sp, #8
   13724:	cmp	r0, #9
   13728:	bhi	13bc0 <next@@Base+0xa6c>
   1372c:	ldr	r5, [sp, #4]
   13730:	strb	r6, [r9, r5]
   13734:	ldr	r0, [r7, #712]	; 0x2c8
   13738:	ldr	r1, [r7, #716]	; 0x2cc
   1373c:	adds	r0, r0, #1
   13740:	adc	r1, r1, #0
   13744:	str	r0, [r7, #712]	; 0x2c8
   13748:	str	r1, [r7, #716]	; 0x2cc
   1374c:	mov	r0, r4
   13750:	bl	13040 <get_char@@Base>
   13754:	mov	r6, r0
   13758:	mov	r0, r8
   1375c:	bl	14388 <next@@Base+0x1234>
   13760:	sub	r0, r6, #48	; 0x30
   13764:	uxtb	r0, r0
   13768:	cmp	r0, #10
   1376c:	mov	r1, #704	; 0x2c0
   13770:	movwcc	r1, #696	; 0x2b8
   13774:	mov	r2, r7
   13778:	ldr	r1, [r2, r1]!
   1377c:	adds	r1, r1, #1
   13780:	str	r1, [r2]
   13784:	ldr	r1, [r2, #4]
   13788:	adc	r1, r1, #0
   1378c:	str	r1, [r2, #4]
   13790:	add	r5, r5, #1
   13794:	cmp	r0, #10
   13798:	bcc	13730 <next@@Base+0x5dc>
   1379c:	b	13bc4 <next@@Base+0xa70>
   137a0:	add	r0, r5, #32
   137a4:	bl	14388 <next@@Base+0x1234>
   137a8:	uxtb	r0, r6
   137ac:	mov	r1, #792	; 0x318
   137b0:	cmp	r0, #97	; 0x61
   137b4:	movwne	r1, #784	; 0x310
   137b8:	mov	r2, r7
   137bc:	ldr	r1, [r2, r1]!
   137c0:	adds	r1, r1, #1
   137c4:	str	r1, [r2]
   137c8:	ldr	r1, [r2, #4]
   137cc:	adc	r1, r1, #0
   137d0:	str	r1, [r2, #4]
   137d4:	cmp	r0, #97	; 0x61
   137d8:	bne	14338 <next@@Base+0x11e4>
   137dc:	add	r8, sp, #8
   137e0:	ldr	r5, [sp, #4]
   137e4:	strb	r6, [r8, r5]
   137e8:	mov	r0, r4
   137ec:	bl	13040 <get_char@@Base>
   137f0:	mov	r1, #808	; 0x328
   137f4:	cmp	r0, #105	; 0x69
   137f8:	movwne	r1, #800	; 0x320
   137fc:	mov	r2, r7
   13800:	ldr	r1, [r2, r1]!
   13804:	adds	r1, r1, #1
   13808:	str	r1, [r2]
   1380c:	ldr	r1, [r2, #4]
   13810:	adc	r1, r1, #0
   13814:	str	r1, [r2, #4]
   13818:	cmp	r0, #105	; 0x69
   1381c:	bne	14338 <next@@Base+0x11e4>
   13820:	add	r6, r8, r5
   13824:	strb	r0, [r6, #1]
   13828:	mov	r0, r4
   1382c:	bl	13040 <get_char@@Base>
   13830:	mov	r1, #824	; 0x338
   13834:	cmp	r0, #110	; 0x6e
   13838:	movwne	r1, #816	; 0x330
   1383c:	mov	r2, r7
   13840:	ldr	r1, [r2, r1]!
   13844:	adds	r1, r1, #1
   13848:	str	r1, [r2]
   1384c:	ldr	r1, [r2, #4]
   13850:	adc	r1, r1, #0
   13854:	str	r1, [r2, #4]
   13858:	cmp	r0, #110	; 0x6e
   1385c:	bne	14338 <next@@Base+0x11e4>
   13860:	add	r4, r5, #3
   13864:	mov	r9, #0
   13868:	strb	r9, [r8, r4]
   1386c:	strb	r0, [r6, #2]
   13870:	ldr	r0, [r7, #832]	; 0x340
   13874:	ldr	r1, [r7, #836]	; 0x344
   13878:	adds	r0, r0, #1
   1387c:	adc	r1, r1, #0
   13880:	str	r0, [r7, #832]	; 0x340
   13884:	str	r1, [r7, #836]	; 0x344
   13888:	add	r0, r5, #4
   1388c:	bl	11fa0 <malloc@plt>
   13890:	mov	r5, r0
   13894:	mov	r1, r8
   13898:	mov	r2, r4
   1389c:	bl	12048 <strncpy@plt>
   138a0:	strb	r9, [r5, r4]
   138a4:	mov	r0, #8
   138a8:	bl	11fa0 <malloc@plt>
   138ac:	mov	r6, r0
   138b0:	mov	r1, r5
   138b4:	bl	127fc <init_token_function@@Base>
   138b8:	b	136c0 <next@@Base+0x56c>
   138bc:	add	r0, r5, #40	; 0x28
   138c0:	bl	14388 <next@@Base+0x1234>
   138c4:	uxtb	r0, r6
   138c8:	mov	r1, #848	; 0x350
   138cc:	cmp	r0, #101	; 0x65
   138d0:	movwne	r1, #840	; 0x348
   138d4:	mov	r2, r7
   138d8:	ldr	r1, [r2, r1]!
   138dc:	adds	r1, r1, #1
   138e0:	str	r1, [r2]
   138e4:	ldr	r1, [r2, #4]
   138e8:	adc	r1, r1, #0
   138ec:	str	r1, [r2, #4]
   138f0:	cmp	r0, #101	; 0x65
   138f4:	bne	14338 <next@@Base+0x11e4>
   138f8:	add	r5, sp, #8
   138fc:	mov	r8, r5
   13900:	ldr	r5, [sp, #4]
   13904:	strb	r6, [r8, r5]
   13908:	mov	r0, r4
   1390c:	bl	13040 <get_char@@Base>
   13910:	mov	r1, #864	; 0x360
   13914:	cmp	r0, #116	; 0x74
   13918:	movwne	r1, #856	; 0x358
   1391c:	mov	r2, r7
   13920:	ldr	r1, [r2, r1]!
   13924:	adds	r1, r1, #1
   13928:	str	r1, [r2]
   1392c:	ldr	r1, [r2, #4]
   13930:	adc	r1, r1, #0
   13934:	str	r1, [r2, #4]
   13938:	cmp	r0, #116	; 0x74
   1393c:	bne	14338 <next@@Base+0x11e4>
   13940:	add	r5, r8, r5
   13944:	strb	r0, [r5, #1]
   13948:	mov	r0, r4
   1394c:	bl	13040 <get_char@@Base>
   13950:	mov	r1, #880	; 0x370
   13954:	cmp	r0, #117	; 0x75
   13958:	movwne	r1, #872	; 0x368
   1395c:	mov	r2, r7
   13960:	ldr	r1, [r2, r1]!
   13964:	adds	r1, r1, #1
   13968:	str	r1, [r2]
   1396c:	ldr	r1, [r2, #4]
   13970:	adc	r1, r1, #0
   13974:	str	r1, [r2, #4]
   13978:	cmp	r0, #117	; 0x75
   1397c:	bne	14338 <next@@Base+0x11e4>
   13980:	strb	r0, [r5, #2]
   13984:	mov	r0, r4
   13988:	bl	13040 <get_char@@Base>
   1398c:	mov	r1, #896	; 0x380
   13990:	cmp	r0, #114	; 0x72
   13994:	movwne	r1, #888	; 0x378
   13998:	mov	r2, r7
   1399c:	ldr	r1, [r2, r1]!
   139a0:	adds	r1, r1, #1
   139a4:	str	r1, [r2]
   139a8:	ldr	r1, [r2, #4]
   139ac:	adc	r1, r1, #0
   139b0:	str	r1, [r2, #4]
   139b4:	cmp	r0, #114	; 0x72
   139b8:	bne	14338 <next@@Base+0x11e4>
   139bc:	strb	r0, [r5, #3]
   139c0:	mov	r0, r4
   139c4:	bl	13040 <get_char@@Base>
   139c8:	mov	r1, #912	; 0x390
   139cc:	cmp	r0, #110	; 0x6e
   139d0:	movwne	r1, #904	; 0x388
   139d4:	mov	r2, r7
   139d8:	ldr	r1, [r2, r1]!
   139dc:	adds	r1, r1, #1
   139e0:	str	r1, [r2]
   139e4:	ldr	r1, [r2, #4]
   139e8:	adc	r1, r1, #0
   139ec:	str	r1, [r2, #4]
   139f0:	cmp	r0, #110	; 0x6e
   139f4:	bne	14338 <next@@Base+0x11e4>
   139f8:	ldr	r0, [r7, #920]	; 0x398
   139fc:	ldr	r1, [r7, #924]	; 0x39c
   13a00:	adds	r0, r0, #1
   13a04:	adc	r1, r1, #0
   13a08:	str	r0, [r7, #920]	; 0x398
   13a0c:	str	r1, [r7, #924]	; 0x39c
   13a10:	mov	r0, #4
   13a14:	bl	11fa0 <malloc@plt>
   13a18:	mov	r6, r0
   13a1c:	bl	1290c <init_token_return@@Base>
   13a20:	b	136c0 <next@@Base+0x56c>
   13a24:	add	r0, r5, #24
   13a28:	bl	14388 <next@@Base+0x1234>
   13a2c:	mov	r0, #1
   13a30:	movw	r1, #49360	; 0xc0d0
   13a34:	movt	r1, #2
   13a38:	str	r0, [r1]
   13a3c:	uxtb	r0, r6
   13a40:	cmp	r0, #102	; 0x66
   13a44:	beq	13c10 <next@@Base+0xabc>
   13a48:	mov	r1, r5
   13a4c:	cmp	r0, #110	; 0x6e
   13a50:	add	r5, sp, #8
   13a54:	mov	r8, r5
   13a58:	ldr	r5, [sp, #4]
   13a5c:	bne	14340 <next@@Base+0x11ec>
   13a60:	add	r0, r1, #64	; 0x40
   13a64:	bl	14388 <next@@Base+0x1234>
   13a68:	strb	r6, [r8, r5]
   13a6c:	mov	r0, r4
   13a70:	bl	13040 <get_char@@Base>
   13a74:	mov	r1, #760	; 0x2f8
   13a78:	cmp	r0, #116	; 0x74
   13a7c:	movwne	r1, #752	; 0x2f0
   13a80:	mov	r2, r7
   13a84:	ldr	r1, [r2, r1]!
   13a88:	adds	r1, r1, #1
   13a8c:	str	r1, [r2]
   13a90:	ldr	r1, [r2, #4]
   13a94:	adc	r1, r1, #0
   13a98:	str	r1, [r2, #4]
   13a9c:	cmp	r0, #116	; 0x74
   13aa0:	bne	14338 <next@@Base+0x11e4>
   13aa4:	ldr	r0, [r7, #768]	; 0x300
   13aa8:	ldr	r1, [r7, #772]	; 0x304
   13aac:	adds	r0, r0, #1
   13ab0:	adc	r1, r1, #0
   13ab4:	str	r0, [r7, #768]	; 0x300
   13ab8:	str	r1, [r7, #772]	; 0x304
   13abc:	mov	r0, #4
   13ac0:	bl	11fa0 <malloc@plt>
   13ac4:	mov	r6, r0
   13ac8:	bl	12788 <init_token_int_type@@Base>
   13acc:	b	136c0 <next@@Base+0x56c>
   13ad0:	add	r0, r5, #48	; 0x30
   13ad4:	bl	14388 <next@@Base+0x1234>
   13ad8:	uxtb	r0, r6
   13adc:	mov	r1, #936	; 0x3a8
   13ae0:	cmp	r0, #108	; 0x6c
   13ae4:	movwne	r1, #928	; 0x3a0
   13ae8:	mov	r2, r7
   13aec:	ldr	r1, [r2, r1]!
   13af0:	adds	r1, r1, #1
   13af4:	str	r1, [r2]
   13af8:	ldr	r1, [r2, #4]
   13afc:	adc	r1, r1, #0
   13b00:	str	r1, [r2, #4]
   13b04:	cmp	r0, #108	; 0x6c
   13b08:	bne	14338 <next@@Base+0x11e4>
   13b0c:	add	r5, sp, #8
   13b10:	mov	r8, r5
   13b14:	ldr	r5, [sp, #4]
   13b18:	strb	r6, [r8, r5]
   13b1c:	mov	r0, r4
   13b20:	bl	13040 <get_char@@Base>
   13b24:	mov	r1, #952	; 0x3b8
   13b28:	cmp	r0, #115	; 0x73
   13b2c:	movwne	r1, #944	; 0x3b0
   13b30:	mov	r2, r7
   13b34:	ldr	r1, [r2, r1]!
   13b38:	adds	r1, r1, #1
   13b3c:	str	r1, [r2]
   13b40:	ldr	r1, [r2, #4]
   13b44:	adc	r1, r1, #0
   13b48:	str	r1, [r2, #4]
   13b4c:	cmp	r0, #115	; 0x73
   13b50:	bne	14338 <next@@Base+0x11e4>
   13b54:	add	r1, r8, r5
   13b58:	strb	r0, [r1, #1]
   13b5c:	mov	r0, r4
   13b60:	bl	13040 <get_char@@Base>
   13b64:	mov	r1, #968	; 0x3c8
   13b68:	cmp	r0, #101	; 0x65
   13b6c:	movwne	r1, #960	; 0x3c0
   13b70:	mov	r2, r7
   13b74:	ldr	r1, [r2, r1]!
   13b78:	adds	r1, r1, #1
   13b7c:	str	r1, [r2]
   13b80:	ldr	r1, [r2, #4]
   13b84:	adc	r1, r1, #0
   13b88:	str	r1, [r2, #4]
   13b8c:	cmp	r0, #101	; 0x65
   13b90:	bne	14338 <next@@Base+0x11e4>
   13b94:	ldr	r0, [r7, #976]	; 0x3d0
   13b98:	ldr	r1, [r7, #980]	; 0x3d4
   13b9c:	adds	r0, r0, #1
   13ba0:	adc	r1, r1, #0
   13ba4:	str	r0, [r7, #976]	; 0x3d0
   13ba8:	str	r1, [r7, #980]	; 0x3d4
   13bac:	mov	r0, #4
   13bb0:	bl	11fa0 <malloc@plt>
   13bb4:	mov	r6, r0
   13bb8:	bl	129dc <init_token_else@@Base>
   13bbc:	b	136c0 <next@@Base+0x56c>
   13bc0:	ldr	r5, [sp, #4]
   13bc4:	ldr	r0, [r7, #720]	; 0x2d0
   13bc8:	ldr	r1, [r7, #724]	; 0x2d4
   13bcc:	adds	r0, r0, #1
   13bd0:	adc	r1, r1, #0
   13bd4:	str	r0, [r7, #720]	; 0x2d0
   13bd8:	str	r1, [r7, #724]	; 0x2d4
   13bdc:	mov	r0, r4
   13be0:	bl	13120 <push_back_one_char@@Base>
   13be4:	mov	r0, #0
   13be8:	strb	r0, [r9, r5]
   13bec:	mov	r0, #8
   13bf0:	bl	11fa0 <malloc@plt>
   13bf4:	mov	r6, r0
   13bf8:	mov	r0, r9
   13bfc:	bl	120b4 <atoi@plt>
   13c00:	mov	r1, r0
   13c04:	mov	r0, r6
   13c08:	bl	127bc <init_token_int_value@@Base>
   13c0c:	b	136c0 <next@@Base+0x56c>
   13c10:	add	r0, r5, #72	; 0x48
   13c14:	bl	14388 <next@@Base+0x1234>
   13c18:	add	r0, sp, #8
   13c1c:	ldr	r1, [sp, #4]
   13c20:	strb	r6, [r0, r1]
   13c24:	add	r0, r0, r1
   13c28:	mov	r1, #0
   13c2c:	strb	r1, [r0, #1]
   13c30:	ldr	r0, [r7, #776]	; 0x308
   13c34:	ldr	r1, [r7, #780]	; 0x30c
   13c38:	adds	r0, r0, #1
   13c3c:	adc	r1, r1, #0
   13c40:	str	r0, [r7, #776]	; 0x308
   13c44:	str	r1, [r7, #780]	; 0x30c
   13c48:	mov	r0, #4
   13c4c:	bl	11fa0 <malloc@plt>
   13c50:	mov	r6, r0
   13c54:	bl	129a8 <init_token_if@@Base>
   13c58:	b	136c0 <next@@Base+0x56c>
   13c5c:	ldrd	r0, [r7, #184]	; 0xb8
   13c60:	adds	r0, r0, #1
   13c64:	adc	r1, r1, #0
   13c68:	strd	r0, [r7, #184]	; 0xb8
   13c6c:	mov	r0, #8
   13c70:	bl	11fa0 <malloc@plt>
   13c74:	mov	r6, r0
   13c78:	mov	r1, #0
   13c7c:	bl	127bc <init_token_int_value@@Base>
   13c80:	b	136c0 <next@@Base+0x56c>
   13c84:	mov	r0, #240	; 0xf0
   13c88:	cmp	r2, #40	; 0x28
   13c8c:	movweq	r0, #232	; 0xe8
   13c90:	mov	r1, r7
   13c94:	ldr	r0, [r1, r0]!
   13c98:	adds	r0, r0, #1
   13c9c:	str	r0, [r1]
   13ca0:	ldr	r0, [r1, #4]
   13ca4:	adc	r0, r0, #0
   13ca8:	str	r0, [r1, #4]
   13cac:	cmp	r2, #40	; 0x28
   13cb0:	bne	13cd8 <next@@Base+0xb84>
   13cb4:	ldrd	r0, [r7, #248]	; 0xf8
   13cb8:	adds	r0, r0, #1
   13cbc:	adc	r1, r1, #0
   13cc0:	strd	r0, [r7, #248]	; 0xf8
   13cc4:	mov	r0, #4
   13cc8:	bl	11fa0 <malloc@plt>
   13ccc:	mov	r6, r0
   13cd0:	bl	1283c <init_token_opar@@Base>
   13cd4:	b	136c0 <next@@Base+0x56c>
   13cd8:	mov	r0, #264	; 0x108
   13cdc:	cmp	r2, #41	; 0x29
   13ce0:	movweq	r0, #256	; 0x100
   13ce4:	mov	r1, r7
   13ce8:	ldr	r0, [r1, r0]!
   13cec:	adds	r0, r0, #1
   13cf0:	str	r0, [r1]
   13cf4:	ldr	r0, [r1, #4]
   13cf8:	adc	r0, r0, #0
   13cfc:	str	r0, [r1, #4]
   13d00:	cmp	r2, #41	; 0x29
   13d04:	bne	13db8 <next@@Base+0xc64>
   13d08:	ldr	r0, [r7, #272]	; 0x110
   13d0c:	ldr	r1, [r7, #276]	; 0x114
   13d10:	adds	r0, r0, #1
   13d14:	adc	r1, r1, #0
   13d18:	str	r0, [r7, #272]	; 0x110
   13d1c:	str	r1, [r7, #276]	; 0x114
   13d20:	mov	r0, #4
   13d24:	bl	11fa0 <malloc@plt>
   13d28:	mov	r6, r0
   13d2c:	bl	12870 <init_token_cpar@@Base>
   13d30:	b	136c0 <next@@Base+0x56c>
   13d34:	ldr	r0, [r7, #296]	; 0x128
   13d38:	ldr	r1, [r7, #300]	; 0x12c
   13d3c:	adds	r0, r0, #1
   13d40:	adc	r1, r1, #0
   13d44:	str	r0, [r7, #296]	; 0x128
   13d48:	str	r1, [r7, #300]	; 0x12c
   13d4c:	mov	r0, #4
   13d50:	bl	11fa0 <malloc@plt>
   13d54:	mov	r6, r0
   13d58:	bl	128a4 <init_token_obra@@Base>
   13d5c:	b	136c0 <next@@Base+0x56c>
   13d60:	ldr	r0, [r7, #320]	; 0x140
   13d64:	ldr	r1, [r7, #324]	; 0x144
   13d68:	adds	r0, r0, #1
   13d6c:	adc	r1, r1, #0
   13d70:	str	r0, [r7, #320]	; 0x140
   13d74:	str	r1, [r7, #324]	; 0x144
   13d78:	mov	r0, #4
   13d7c:	bl	11fa0 <malloc@plt>
   13d80:	mov	r6, r0
   13d84:	bl	128d8 <init_token_cbra@@Base>
   13d88:	b	136c0 <next@@Base+0x56c>
   13d8c:	ldr	r0, [r7, #344]	; 0x158
   13d90:	ldr	r1, [r7, #348]	; 0x15c
   13d94:	adds	r0, r0, #1
   13d98:	adc	r1, r1, #0
   13d9c:	str	r0, [r7, #344]	; 0x158
   13da0:	str	r1, [r7, #348]	; 0x15c
   13da4:	mov	r0, #4
   13da8:	bl	11fa0 <malloc@plt>
   13dac:	mov	r6, r0
   13db0:	bl	12940 <init_token_semicolon@@Base>
   13db4:	b	136c0 <next@@Base+0x56c>
   13db8:	ldr	r0, [r7, #408]	; 0x198
   13dbc:	ldr	r1, [r7, #412]	; 0x19c
   13dc0:	adds	r3, r0, #1
   13dc4:	adc	ip, r1, #0
   13dc8:	ldr	r1, [r7, #384]	; 0x180
   13dcc:	ldr	r5, [r7, #388]	; 0x184
   13dd0:	adds	r1, r1, #1
   13dd4:	adc	lr, r5, #0
   13dd8:	ldr	r0, [r7, #360]	; 0x168
   13ddc:	ldr	r5, [r7, #364]	; 0x16c
   13de0:	adds	r0, r0, #1
   13de4:	adc	r8, r5, #0
   13de8:	ldr	r5, [r7, #336]	; 0x150
   13dec:	adds	r5, r5, #1
   13df0:	str	r5, [r7, #336]	; 0x150
   13df4:	str	r0, [r7, #360]	; 0x168
   13df8:	str	r1, [r7, #384]	; 0x180
   13dfc:	str	r3, [r7, #408]	; 0x198
   13e00:	ldr	r0, [r7, #340]	; 0x154
   13e04:	adc	r9, r0, #0
   13e08:	ldr	r1, [r7, #288]	; 0x120
   13e0c:	ldr	r3, [r7, #292]	; 0x124
   13e10:	ldr	r5, [r7, #312]	; 0x138
   13e14:	ldr	r0, [r7, #316]	; 0x13c
   13e18:	adds	r5, r5, #1
   13e1c:	str	r5, [r7, #312]	; 0x138
   13e20:	adc	r0, r0, #0
   13e24:	adds	r1, r1, #1
   13e28:	adc	r3, r3, #0
   13e2c:	ldr	r5, [r7, #432]	; 0x1b0
   13e30:	adds	r5, r5, #1
   13e34:	str	r5, [r7, #432]	; 0x1b0
   13e38:	str	r1, [r7, #288]	; 0x120
   13e3c:	str	r3, [r7, #292]	; 0x124
   13e40:	str	r0, [r7, #316]	; 0x13c
   13e44:	str	r9, [r7, #340]	; 0x154
   13e48:	str	r8, [r7, #364]	; 0x16c
   13e4c:	str	lr, [r7, #388]	; 0x184
   13e50:	str	ip, [r7, #412]	; 0x19c
   13e54:	ldr	r0, [r7, #436]	; 0x1b4
   13e58:	adc	r0, r0, #0
   13e5c:	str	r0, [r7, #436]	; 0x1b4
   13e60:	mov	r0, #456	; 0x1c8
   13e64:	cmp	r2, #33	; 0x21
   13e68:	movweq	r0, #448	; 0x1c0
   13e6c:	mov	r1, r7
   13e70:	ldr	r0, [r1, r0]!
   13e74:	adds	r0, r0, #1
   13e78:	str	r0, [r1]
   13e7c:	ldr	r0, [r1, #4]
   13e80:	adc	r0, r0, #0
   13e84:	str	r0, [r1, #4]
   13e88:	cmp	r2, #33	; 0x21
   13e8c:	bne	13f1c <next@@Base+0xdc8>
   13e90:	add	r0, sp, #8
   13e94:	ldr	r1, [sp, #4]
   13e98:	strb	r6, [r0, r1]
   13e9c:	mov	r0, r4
   13ea0:	bl	13040 <get_char@@Base>
   13ea4:	mov	r8, r0
   13ea8:	mov	r5, #472	; 0x1d8
   13eac:	cmp	r0, #61	; 0x3d
   13eb0:	movwne	r5, #464	; 0x1d0
   13eb4:	mov	r0, #8
   13eb8:	bl	11fa0 <malloc@plt>
   13ebc:	mov	r6, r0
   13ec0:	mov	r0, r7
   13ec4:	ldr	r1, [r0, r5]!
   13ec8:	adds	r1, r1, #1
   13ecc:	str	r1, [r0]
   13ed0:	ldr	r1, [r0, #4]
   13ed4:	adc	r1, r1, #0
   13ed8:	str	r1, [r0, #4]
   13edc:	cmp	r8, #61	; 0x3d
   13ee0:	beq	1403c <next@@Base+0xee8>
   13ee4:	ldr	r0, [r7, #480]	; 0x1e0
   13ee8:	ldr	r1, [r7, #484]	; 0x1e4
   13eec:	adds	r0, r0, #1
   13ef0:	adc	r1, r1, #0
   13ef4:	str	r0, [r7, #480]	; 0x1e0
   13ef8:	str	r1, [r7, #484]	; 0x1e4
   13efc:	mov	r0, r4
   13f00:	bl	13120 <push_back_one_char@@Base>
   13f04:	mov	r0, #2
   13f08:	bl	11fa0 <malloc@plt>
   13f0c:	mov	r1, r0
   13f10:	ldrb	r2, [sp, #8]
   13f14:	strb	r2, [r0], #1
   13f18:	b	14070 <next@@Base+0xf1c>
   13f1c:	ldr	r0, [r7, #584]	; 0x248
   13f20:	ldr	r1, [r7, #588]	; 0x24c
   13f24:	adds	ip, r0, #1
   13f28:	adc	lr, r1, #0
   13f2c:	ldr	r3, [r7, #512]	; 0x200
   13f30:	ldr	r5, [r7, #516]	; 0x204
   13f34:	ldr	r0, [r7, #528]	; 0x210
   13f38:	ldr	r1, [r7, #532]	; 0x214
   13f3c:	adds	r8, r0, #1
   13f40:	adc	r1, r1, #0
   13f44:	adds	r3, r3, #1
   13f48:	adc	r5, r5, #0
   13f4c:	ldr	r0, [r7, #624]	; 0x270
   13f50:	adds	r0, r0, #1
   13f54:	str	r0, [r7, #624]	; 0x270
   13f58:	str	r3, [r7, #512]	; 0x200
   13f5c:	str	r5, [r7, #516]	; 0x204
   13f60:	str	r8, [r7, #528]	; 0x210
   13f64:	str	r1, [r7, #532]	; 0x214
   13f68:	str	ip, [r7, #584]	; 0x248
   13f6c:	str	lr, [r7, #588]	; 0x24c
   13f70:	ldr	r0, [r7, #628]	; 0x274
   13f74:	adc	r0, r0, #0
   13f78:	str	r0, [r7, #628]	; 0x274
   13f7c:	mov	r0, #664	; 0x298
   13f80:	cmp	r2, #38	; 0x26
   13f84:	movweq	r0, #656	; 0x290
   13f88:	mov	r1, r7
   13f8c:	ldr	r0, [r1, r0]!
   13f90:	adds	r0, r0, #1
   13f94:	str	r0, [r1]
   13f98:	ldr	r0, [r1, #4]
   13f9c:	adc	r0, r0, #0
   13fa0:	str	r0, [r1, #4]
   13fa4:	cmp	r2, #38	; 0x26
   13fa8:	add	r0, sp, #8
   13fac:	ldr	r1, [sp, #4]
   13fb0:	bne	14368 <next@@Base+0x1214>
   13fb4:	strb	r6, [r0, r1]
   13fb8:	mov	r0, r4
   13fbc:	bl	13040 <get_char@@Base>
   13fc0:	mov	r4, r0
   13fc4:	mov	r5, #680	; 0x2a8
   13fc8:	cmp	r0, #38	; 0x26
   13fcc:	movwne	r5, #672	; 0x2a0
   13fd0:	mov	r0, #8
   13fd4:	bl	11fa0 <malloc@plt>
   13fd8:	mov	r6, r0
   13fdc:	mov	r0, r7
   13fe0:	ldr	r1, [r0, r5]!
   13fe4:	adds	r1, r1, #1
   13fe8:	str	r1, [r0]
   13fec:	ldr	r1, [r0, #4]
   13ff0:	adc	r1, r1, #0
   13ff4:	str	r1, [r0, #4]
   13ff8:	cmp	r4, #38	; 0x26
   13ffc:	bne	14338 <next@@Base+0x11e4>
   14000:	ldr	r0, [r7, #688]	; 0x2b0
   14004:	ldr	r1, [r7, #692]	; 0x2b4
   14008:	adds	r0, r0, #1
   1400c:	adc	r1, r1, #0
   14010:	str	r0, [r7, #688]	; 0x2b0
   14014:	str	r1, [r7, #692]	; 0x2b4
   14018:	mov	r0, #3
   1401c:	bl	11fa0 <malloc@plt>
   14020:	mov	r1, r0
   14024:	ldrb	r0, [sp, #8]
   14028:	strb	r4, [r1, #1]
   1402c:	mov	r2, #0
   14030:	strb	r2, [r1, #2]
   14034:	strb	r0, [r1]
   14038:	b	141ec <next@@Base+0x1098>
   1403c:	ldr	r0, [r7, #488]	; 0x1e8
   14040:	ldr	r1, [r7, #492]	; 0x1ec
   14044:	adds	r0, r0, #1
   14048:	adc	r1, r1, #0
   1404c:	str	r0, [r7, #488]	; 0x1e8
   14050:	str	r1, [r7, #492]	; 0x1ec
   14054:	mov	r0, #3
   14058:	bl	11fa0 <malloc@plt>
   1405c:	mov	r1, r0
   14060:	ldrb	r0, [sp, #8]
   14064:	strb	r8, [r1, #1]
   14068:	strb	r0, [r1]
   1406c:	add	r0, r1, #2
   14070:	mov	r2, #0
   14074:	strb	r2, [r0]
   14078:	ldr	r0, [r7, #496]	; 0x1f0
   1407c:	ldr	r2, [r7, #500]	; 0x1f4
   14080:	adds	r0, r0, #1
   14084:	adc	r2, r2, #0
   14088:	str	r0, [r7, #496]	; 0x1f0
   1408c:	str	r2, [r7, #500]	; 0x1f4
   14090:	b	141ec <next@@Base+0x1098>
   14094:	ldr	r0, [r7, #456]	; 0x1c8
   14098:	ldr	r1, [r7, #460]	; 0x1cc
   1409c:	adds	r0, r0, #1
   140a0:	adc	r1, r1, #0
   140a4:	str	r0, [r7, #456]	; 0x1c8
   140a8:	str	r1, [r7, #460]	; 0x1cc
   140ac:	mov	r0, #512	; 0x200
   140b0:	cmp	r2, #60	; 0x3c
   140b4:	movweq	r0, #504	; 0x1f8
   140b8:	mov	r1, r7
   140bc:	ldr	r0, [r1, r0]!
   140c0:	adds	r0, r0, #1
   140c4:	str	r0, [r1]
   140c8:	ldr	r0, [r1, #4]
   140cc:	adc	r0, r0, #0
   140d0:	str	r0, [r1, #4]
   140d4:	cmp	r2, #60	; 0x3c
   140d8:	beq	1410c <next@@Base+0xfb8>
   140dc:	mov	r0, #528	; 0x210
   140e0:	cmp	r2, #62	; 0x3e
   140e4:	movweq	r0, #520	; 0x208
   140e8:	mov	r1, r7
   140ec:	ldr	r0, [r1, r0]!
   140f0:	adds	r0, r0, #1
   140f4:	str	r0, [r1]
   140f8:	ldr	r0, [r1, #4]
   140fc:	adc	r0, r0, #0
   14100:	str	r0, [r1, #4]
   14104:	cmp	r2, #62	; 0x3e
   14108:	bne	141f8 <next@@Base+0x10a4>
   1410c:	add	r0, sp, #8
   14110:	ldr	r1, [sp, #4]
   14114:	strb	r6, [r0, r1]
   14118:	mov	r0, r4
   1411c:	bl	13040 <get_char@@Base>
   14120:	mov	r8, r0
   14124:	mov	r5, #544	; 0x220
   14128:	cmp	r0, #61	; 0x3d
   1412c:	movwne	r5, #536	; 0x218
   14130:	mov	r0, #8
   14134:	bl	11fa0 <malloc@plt>
   14138:	mov	r6, r0
   1413c:	mov	r0, r7
   14140:	ldr	r1, [r0, r5]!
   14144:	adds	r1, r1, #1
   14148:	str	r1, [r0]
   1414c:	ldr	r1, [r0, #4]
   14150:	adc	r1, r1, #0
   14154:	str	r1, [r0, #4]
   14158:	cmp	r8, #61	; 0x3d
   1415c:	beq	14198 <next@@Base+0x1044>
   14160:	ldr	r0, [r7, #552]	; 0x228
   14164:	ldr	r1, [r7, #556]	; 0x22c
   14168:	adds	r0, r0, #1
   1416c:	adc	r1, r1, #0
   14170:	str	r0, [r7, #552]	; 0x228
   14174:	str	r1, [r7, #556]	; 0x22c
   14178:	mov	r0, r4
   1417c:	bl	13120 <push_back_one_char@@Base>
   14180:	mov	r0, #2
   14184:	bl	11fa0 <malloc@plt>
   14188:	mov	r1, r0
   1418c:	ldrb	r2, [sp, #8]
   14190:	strb	r2, [r0], #1
   14194:	b	141cc <next@@Base+0x1078>
   14198:	ldr	r0, [r7, #560]	; 0x230
   1419c:	ldr	r1, [r7, #564]	; 0x234
   141a0:	adds	r0, r0, #1
   141a4:	adc	r1, r1, #0
   141a8:	str	r0, [r7, #560]	; 0x230
   141ac:	str	r1, [r7, #564]	; 0x234
   141b0:	mov	r0, #3
   141b4:	bl	11fa0 <malloc@plt>
   141b8:	mov	r1, r0
   141bc:	ldrb	r0, [sp, #8]
   141c0:	strb	r8, [r1, #1]
   141c4:	strb	r0, [r1]
   141c8:	add	r0, r1, #2
   141cc:	mov	r2, #0
   141d0:	strb	r2, [r0]
   141d4:	ldr	r0, [r7, #568]	; 0x238
   141d8:	ldr	r2, [r7, #572]	; 0x23c
   141dc:	adds	r0, r0, #1
   141e0:	adc	r2, r2, #0
   141e4:	str	r0, [r7, #568]	; 0x238
   141e8:	str	r2, [r7, #572]	; 0x23c
   141ec:	mov	r0, r6
   141f0:	bl	12a10 <init_token_boolean_op@@Base>
   141f4:	b	136c0 <next@@Base+0x56c>
   141f8:	mov	r0, #584	; 0x248
   141fc:	cmp	r2, #61	; 0x3d
   14200:	movweq	r0, #576	; 0x240
   14204:	mov	r1, r7
   14208:	ldr	r0, [r1, r0]!
   1420c:	adds	r0, r0, #1
   14210:	str	r0, [r1]
   14214:	ldr	r0, [r1, #4]
   14218:	adc	r0, r0, #0
   1421c:	str	r0, [r1, #4]
   14220:	cmp	r2, #61	; 0x3d
   14224:	bne	14298 <next@@Base+0x1144>
   14228:	add	r0, sp, #8
   1422c:	ldr	r1, [sp, #4]
   14230:	strb	r6, [r0, r1]
   14234:	mov	r0, r4
   14238:	bl	13040 <get_char@@Base>
   1423c:	mov	r4, r0
   14240:	mov	r5, #600	; 0x258
   14244:	cmp	r0, #61	; 0x3d
   14248:	movwne	r5, #592	; 0x250
   1424c:	mov	r0, #8
   14250:	bl	11fa0 <malloc@plt>
   14254:	mov	r6, r0
   14258:	mov	r0, r7
   1425c:	ldr	r1, [r0, r5]!
   14260:	adds	r1, r1, #1
   14264:	str	r1, [r0]
   14268:	ldr	r1, [r0, #4]
   1426c:	adc	r1, r1, #0
   14270:	str	r1, [r0, #4]
   14274:	cmp	r4, #61	; 0x3d
   14278:	bne	14338 <next@@Base+0x11e4>
   1427c:	ldr	r0, [r7, #608]	; 0x260
   14280:	ldr	r1, [r7, #612]	; 0x264
   14284:	adds	r0, r0, #1
   14288:	adc	r1, r1, #0
   1428c:	str	r0, [r7, #608]	; 0x260
   14290:	str	r1, [r7, #612]	; 0x264
   14294:	b	14018 <next@@Base+0xec4>
   14298:	mov	r0, #624	; 0x270
   1429c:	cmp	r2, #124	; 0x7c
   142a0:	movweq	r0, #616	; 0x268
   142a4:	mov	r1, r7
   142a8:	ldr	r0, [r1, r0]!
   142ac:	adds	r0, r0, #1
   142b0:	str	r0, [r1]
   142b4:	ldr	r0, [r1, #4]
   142b8:	adc	r0, r0, #0
   142bc:	str	r0, [r1, #4]
   142c0:	cmp	r2, #124	; 0x7c
   142c4:	bne	14350 <next@@Base+0x11fc>
   142c8:	add	r0, sp, #8
   142cc:	ldr	r1, [sp, #4]
   142d0:	strb	r6, [r0, r1]
   142d4:	mov	r0, r4
   142d8:	bl	13040 <get_char@@Base>
   142dc:	mov	r4, r0
   142e0:	mov	r5, #640	; 0x280
   142e4:	cmp	r0, #124	; 0x7c
   142e8:	movwne	r5, #632	; 0x278
   142ec:	mov	r0, #8
   142f0:	bl	11fa0 <malloc@plt>
   142f4:	mov	r6, r0
   142f8:	mov	r0, r7
   142fc:	ldr	r1, [r0, r5]!
   14300:	adds	r1, r1, #1
   14304:	str	r1, [r0]
   14308:	ldr	r1, [r0, #4]
   1430c:	adc	r1, r1, #0
   14310:	str	r1, [r0, #4]
   14314:	cmp	r4, #124	; 0x7c
   14318:	bne	14338 <next@@Base+0x11e4>
   1431c:	ldr	r0, [r7, #648]	; 0x288
   14320:	ldr	r1, [r7, #652]	; 0x28c
   14324:	adds	r0, r0, #1
   14328:	adc	r1, r1, #0
   1432c:	str	r0, [r7, #648]	; 0x288
   14330:	str	r1, [r7, #652]	; 0x28c
   14334:	b	14018 <next@@Base+0xec4>
   14338:	mov	r0, #1
   1433c:	bl	11fdc <exit@plt>
   14340:	add	r0, r1, #56	; 0x38
   14344:	bl	14388 <next@@Base+0x1234>
   14348:	mov	r0, #1
   1434c:	bl	11fdc <exit@plt>
   14350:	ldr	r0, [r7, #664]	; 0x298
   14354:	ldr	r1, [r7, #668]	; 0x29c
   14358:	adds	r0, r0, #1
   1435c:	adc	r1, r1, #0
   14360:	str	r0, [r7, #664]	; 0x298
   14364:	str	r1, [r7, #668]	; 0x29c
   14368:	movw	r0, #49416	; 0xc108
   1436c:	movt	r0, #2
   14370:	ldr	r0, [r0]
   14374:	movw	r1, #42353	; 0xa571
   14378:	movt	r1, #1
   1437c:	bl	1200c <fprintf@plt>
   14380:	mov	r0, #1
   14384:	bl	11fdc <exit@plt>
   14388:	movw	r1, #49360	; 0xc0d0
   1438c:	movt	r1, #2
   14390:	ldr	r1, [r1]
   14394:	cmn	r1, #1
   14398:	ldrne	r0, [r0, r1, lsl #2]
   1439c:	cmpne	r0, #0
   143a0:	bne	143a8 <next@@Base+0x1254>
   143a4:	bx	lr
   143a8:	ldrd	r2, [r0]
   143ac:	adds	r2, r2, #1
   143b0:	adc	r3, r3, #0
   143b4:	strd	r2, [r0]
   143b8:	bx	lr
   143bc:	push	{r4, r5, r6, lr}
   143c0:	sub	sp, sp, #8
   143c4:	movw	r0, #42832	; 0xa750
   143c8:	movt	r0, #1
   143cc:	movw	r1, #40711	; 0x9f07
   143d0:	movt	r1, #1
   143d4:	movw	r2, #3328	; 0xd00
   143d8:	movt	r2, #1285	; 0x505
   143dc:	bl	16ec4 <__generate_code_for_binary_boolean_expression@@Base+0x490>
   143e0:	movw	r0, #42752	; 0xa700
   143e4:	movt	r0, #1
   143e8:	add	r4, r0, #4
   143ec:	mov	r5, #0
   143f0:	movw	r6, #42560	; 0xa640
   143f4:	movt	r6, #1
   143f8:	mov	r3, r6
   143fc:	ldr	r0, [r3, r5]!
   14400:	ldr	r1, [r3, #16]
   14404:	str	r1, [sp]
   14408:	ldmib	r3, {r1, r2}
   1440c:	ldrb	r3, [r3, #12]
   14410:	bl	17628 <__generate_code_for_binary_boolean_expression@@Base+0xbf4>
   14414:	ldrd	r0, [r4, #-4]
   14418:	bl	17edc <__generate_code_for_binary_boolean_expression@@Base+0x14a8>
   1441c:	add	r5, r5, #20
   14420:	add	r4, r4, #8
   14424:	cmp	r5, #180	; 0xb4
   14428:	bne	143f8 <next@@Base+0x12a4>
   1442c:	bl	18658 <__generate_code_for_binary_boolean_expression@@Base+0x1c24>
   14430:	add	sp, sp, #8
   14434:	pop	{r4, r5, r6, lr}
   14438:	b	193c4 <__generate_code_for_binary_boolean_expression@@Base+0x2990>
   1443c:	push	{fp, lr}
   14440:	vpush	{d8-d9}
   14444:	bl	143bc <next@@Base+0x1268>
   14448:	movw	r0, #50128	; 0xc3d0
   1444c:	movt	r0, #2
   14450:	vmov.i32	q4, #0	; 0x00000000
   14454:	add	r1, r0, #16
   14458:	vst1.64	{d8-d9}, [r1 :128]
   1445c:	movw	r1, #50112	; 0xc3c0
   14460:	movt	r1, #2
   14464:	vst1.64	{d8-d9}, [r1]
   14468:	mov	r1, #0
   1446c:	str	r1, [r0, #32]
   14470:	movw	r2, #50168	; 0xc3f8
   14474:	movt	r2, #2
   14478:	vst1.64	{d8-d9}, [r2]
   1447c:	movw	r2, #50184	; 0xc408
   14480:	movt	r2, #2
   14484:	vst1.64	{d8-d9}, [r2]
   14488:	movw	r2, #50200	; 0xc418
   1448c:	movt	r2, #2
   14490:	vst1.64	{d8-d9}, [r2]
   14494:	movw	r2, #50256	; 0xc450
   14498:	movt	r2, #2
   1449c:	vst1.64	{d8-d9}, [r2]
   144a0:	mov	r2, #36	; 0x24
   144a4:	vst1.64	{d8-d9}, [r0 :128], r2
   144a8:	str	r1, [r0]
   144ac:	movw	r0, #50224	; 0xc430
   144b0:	movt	r0, #2
   144b4:	vst1.64	{d8-d9}, [r0 :128]!
   144b8:	vst1.64	{d8-d9}, [r0 :128]
   144bc:	movw	r0, #50272	; 0xc460
   144c0:	movt	r0, #2
   144c4:	mov	r1, #0
   144c8:	mov	r2, #1008	; 0x3f0
   144cc:	bl	1203c <memset@plt>
   144d0:	movw	r0, #51280	; 0xc850
   144d4:	movt	r0, #2
   144d8:	vst1.64	{d8-d9}, [r0]
   144dc:	vpop	{d8-d9}
   144e0:	pop	{fp, pc}
   144e4:	movw	r0, #17340	; 0x43bc
   144e8:	movt	r0, #1
   144ec:	movw	r1, #17468	; 0x443c
   144f0:	movt	r1, #1
   144f4:	b	19874 <__gcov_flush@@Base+0xb4>

000144f8 <init_ast_base@@Base>:
   144f8:	push	{r4, r5, fp, lr}
   144fc:	add	fp, sp, #8
   14500:	movw	r3, #51296	; 0xc860
   14504:	movt	r3, #2
   14508:	ldm	r3, {ip, lr}
   1450c:	ldr	r4, [r3, #8]
   14510:	ldr	r5, [r3, #12]
   14514:	adds	ip, ip, #1
   14518:	adc	lr, lr, #0
   1451c:	adds	r4, r4, #1
   14520:	adc	r5, r5, #0
   14524:	stm	r3, {ip, lr}
   14528:	str	r4, [r3, #8]
   1452c:	str	r5, [r3, #12]
   14530:	stm	r0, {r1, r2}
   14534:	pop	{r4, r5, fp, pc}

00014538 <init_ast_base_single@@Base>:
   14538:	push	{r4, sl, fp, lr}
   1453c:	add	fp, sp, #8
   14540:	movw	r2, #51312	; 0xc870
   14544:	movt	r2, #2
   14548:	ldm	r2, {r3, ip, lr}
   1454c:	ldr	r4, [r2, #12]
   14550:	adds	r3, r3, #1
   14554:	adc	ip, ip, #0
   14558:	adds	lr, lr, #1
   1455c:	adc	r4, r4, #0
   14560:	stm	r2, {r3, ip, lr}
   14564:	str	r4, [r2, #12]
   14568:	mov	r2, #0
   1456c:	pop	{r4, sl, fp, lr}
   14570:	b	144f8 <init_ast_base@@Base>

00014574 <init_node_id@@Base>:
   14574:	push	{r4, r5, r6, sl, fp, lr}
   14578:	add	fp, sp, #16
   1457c:	mov	r6, r1
   14580:	mov	r5, r0
   14584:	movw	r0, #51328	; 0xc880
   14588:	movt	r0, #2
   1458c:	ldm	r0, {r1, r2, r3, r4}
   14590:	adds	r1, r1, #1
   14594:	adc	r2, r2, #0
   14598:	adds	r3, r3, #1
   1459c:	adc	r4, r4, #0
   145a0:	stm	r0, {r1, r2, r3, r4}
   145a4:	mov	r0, r5
   145a8:	mov	r1, #0
   145ac:	bl	14538 <init_ast_base_single@@Base>
   145b0:	str	r6, [r5, #8]
   145b4:	pop	{r4, r5, r6, sl, fp, pc}

000145b8 <init_node_int@@Base>:
   145b8:	push	{r4, r5, r6, sl, fp, lr}
   145bc:	add	fp, sp, #16
   145c0:	mov	r6, r1
   145c4:	mov	r5, r0
   145c8:	movw	r0, #51344	; 0xc890
   145cc:	movt	r0, #2
   145d0:	ldm	r0, {r1, r2, r3, r4}
   145d4:	adds	r1, r1, #1
   145d8:	adc	r2, r2, #0
   145dc:	adds	r3, r3, #1
   145e0:	adc	r4, r4, #0
   145e4:	stm	r0, {r1, r2, r3, r4}
   145e8:	mov	r0, r5
   145ec:	mov	r1, #1
   145f0:	bl	14538 <init_ast_base_single@@Base>
   145f4:	str	r6, [r5, #8]
   145f8:	pop	{r4, r5, r6, sl, fp, pc}

000145fc <init_node_function@@Base>:
   145fc:	push	{r4, r5, r6, r7, fp, lr}
   14600:	add	fp, sp, #16
   14604:	mov	r7, r2
   14608:	mov	r5, r1
   1460c:	mov	r6, r0
   14610:	movw	r0, #51360	; 0xc8a0
   14614:	movt	r0, #2
   14618:	ldm	r0, {r1, r2, r3, r4}
   1461c:	adds	r1, r1, #1
   14620:	adc	r2, r2, #0
   14624:	adds	r3, r3, #1
   14628:	adc	r4, r4, #0
   1462c:	stm	r0, {r1, r2, r3, r4}
   14630:	mov	r0, r6
   14634:	mov	r1, #2
   14638:	bl	14538 <init_ast_base_single@@Base>
   1463c:	str	r5, [r6, #8]
   14640:	str	r7, [r6, #12]
   14644:	pop	{r4, r5, r6, r7, fp, pc}

00014648 <init_node_return@@Base>:
   14648:	push	{r4, r5, r6, sl, fp, lr}
   1464c:	add	fp, sp, #16
   14650:	mov	r6, r1
   14654:	mov	r5, r0
   14658:	movw	r0, #51376	; 0xc8b0
   1465c:	movt	r0, #2
   14660:	ldm	r0, {r1, r2, r3, r4}
   14664:	adds	r1, r1, #1
   14668:	adc	r2, r2, #0
   1466c:	adds	r3, r3, #1
   14670:	adc	r4, r4, #0
   14674:	stm	r0, {r1, r2, r3, r4}
   14678:	mov	r0, r5
   1467c:	mov	r1, #3
   14680:	bl	14538 <init_ast_base_single@@Base>
   14684:	str	r6, [r5, #8]
   14688:	pop	{r4, r5, r6, sl, fp, pc}

0001468c <init_node_if@@Base>:
   1468c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14690:	add	fp, sp, #24
   14694:	mov	r8, r3
   14698:	mov	r5, r2
   1469c:	mov	r6, r1
   146a0:	mov	r7, r0
   146a4:	movw	r0, #51392	; 0xc8c0
   146a8:	movt	r0, #2
   146ac:	ldm	r0, {r1, r2, r3, r4}
   146b0:	adds	r1, r1, #1
   146b4:	adc	r2, r2, #0
   146b8:	adds	r3, r3, #1
   146bc:	adc	r4, r4, #0
   146c0:	stm	r0, {r1, r2, r3, r4}
   146c4:	mov	r0, r7
   146c8:	mov	r1, #4
   146cc:	bl	14538 <init_ast_base_single@@Base>
   146d0:	str	r6, [r7, #8]
   146d4:	str	r5, [r7, #12]
   146d8:	str	r8, [r7, #16]
   146dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000146e0 <init_node_boolean_operator@@Base>:
   146e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   146e4:	add	fp, sp, #24
   146e8:	mov	r8, r3
   146ec:	mov	r5, r2
   146f0:	mov	r6, r1
   146f4:	mov	r7, r0
   146f8:	movw	r0, #51408	; 0xc8d0
   146fc:	movt	r0, #2
   14700:	ldm	r0, {r1, r2, r3, r4}
   14704:	adds	r1, r1, #1
   14708:	adc	r2, r2, #0
   1470c:	adds	r3, r3, #1
   14710:	adc	r4, r4, #0
   14714:	stm	r0, {r1, r2, r3, r4}
   14718:	mov	r0, r7
   1471c:	mov	r1, #0
   14720:	bl	14538 <init_ast_base_single@@Base>
   14724:	mov	r0, #5
   14728:	str	r0, [r7]
   1472c:	str	r5, [r7, #8]
   14730:	str	r8, [r7, #12]
   14734:	str	r6, [r7, #16]
   14738:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0001473c <free_node@@Base>:
   1473c:	push	{r4, r5, fp, lr}
   14740:	add	fp, sp, #8
   14744:	mov	r4, r0
   14748:	movw	r0, #49364	; 0xc0d4
   1474c:	movt	r0, #2
   14750:	mov	r1, #0
   14754:	str	r1, [r0]
   14758:	movw	r5, #51424	; 0xc8e0
   1475c:	movt	r5, #2
   14760:	ldrd	r0, [r5]
   14764:	adds	r0, r0, #1
   14768:	adc	r1, r1, #0
   1476c:	strd	r0, [r5]
   14770:	ldr	r0, [r4]
   14774:	cmp	r0, #5
   14778:	bhi	148e4 <free_node@@Base+0x1a8>
   1477c:	add	r1, pc, #0
   14780:	ldr	pc, [r1, r0, lsl #2]
   14784:	muleq	r1, ip, r7
   14788:	andeq	r4, r1, r8, lsr r8
   1478c:	andeq	r4, r1, r4, lsl #16
   14790:	andeq	r4, r1, ip, ror #16
   14794:	ldrdeq	r4, [r1], -r0
   14798:	andeq	r4, r1, r0, lsr #17
   1479c:	movw	r0, #43152	; 0xa890
   147a0:	movt	r0, #1
   147a4:	add	r1, r0, #4
   147a8:	movw	r0, #49364	; 0xc0d4
   147ac:	movt	r0, #2
   147b0:	bl	15010 <get_boolean_op_value@@Base+0x390>
   147b4:	ldrd	r0, [r5, #64]	; 0x40
   147b8:	adds	r0, r0, #1
   147bc:	adc	r1, r1, #0
   147c0:	strd	r0, [r5, #64]	; 0x40
   147c4:	mov	r0, r4
   147c8:	bl	14920 <free_node_id@@Base>
   147cc:	b	148d0 <free_node@@Base+0x194>
   147d0:	movw	r0, #43152	; 0xa890
   147d4:	movt	r0, #1
   147d8:	add	r1, r0, #20
   147dc:	movw	r0, #49364	; 0xc0d4
   147e0:	movt	r0, #2
   147e4:	bl	15010 <get_boolean_op_value@@Base+0x390>
   147e8:	ldrd	r0, [r5, #96]	; 0x60
   147ec:	adds	r0, r0, #1
   147f0:	adc	r1, r1, #0
   147f4:	strd	r0, [r5, #96]	; 0x60
   147f8:	mov	r0, r4
   147fc:	bl	14b48 <free_node_if@@Base>
   14800:	b	148d0 <free_node@@Base+0x194>
   14804:	movw	r0, #43152	; 0xa890
   14808:	movt	r0, #1
   1480c:	add	r1, r0, #12
   14810:	movw	r0, #49364	; 0xc0d4
   14814:	movt	r0, #2
   14818:	bl	15010 <get_boolean_op_value@@Base+0x390>
   1481c:	ldrd	r0, [r5, #80]	; 0x50
   14820:	adds	r0, r0, #1
   14824:	adc	r1, r1, #0
   14828:	strd	r0, [r5, #80]	; 0x50
   1482c:	mov	r0, r4
   14830:	bl	14a30 <free_node_function@@Base>
   14834:	b	148d0 <free_node@@Base+0x194>
   14838:	movw	r0, #43152	; 0xa890
   1483c:	movt	r0, #1
   14840:	add	r1, r0, #8
   14844:	movw	r0, #49364	; 0xc0d4
   14848:	movt	r0, #2
   1484c:	bl	15010 <get_boolean_op_value@@Base+0x390>
   14850:	ldrd	r0, [r5, #72]	; 0x48
   14854:	adds	r0, r0, #1
   14858:	adc	r1, r1, #0
   1485c:	strd	r0, [r5, #72]	; 0x48
   14860:	mov	r0, r4
   14864:	bl	149a8 <free_node_int@@Base>
   14868:	b	148d0 <free_node@@Base+0x194>
   1486c:	movw	r0, #43152	; 0xa890
   14870:	movt	r0, #1
   14874:	add	r1, r0, #16
   14878:	movw	r0, #49364	; 0xc0d4
   1487c:	movt	r0, #2
   14880:	bl	15010 <get_boolean_op_value@@Base+0x390>
   14884:	ldrd	r0, [r5, #88]	; 0x58
   14888:	adds	r0, r0, #1
   1488c:	adc	r1, r1, #0
   14890:	strd	r0, [r5, #88]	; 0x58
   14894:	mov	r0, r4
   14898:	bl	14ac0 <free_node_return@@Base>
   1489c:	b	148d0 <free_node@@Base+0x194>
   148a0:	movw	r0, #43152	; 0xa890
   148a4:	movt	r0, #1
   148a8:	add	r1, r0, #24
   148ac:	movw	r0, #49364	; 0xc0d4
   148b0:	movt	r0, #2
   148b4:	bl	15010 <get_boolean_op_value@@Base+0x390>
   148b8:	ldrd	r0, [r5, #104]	; 0x68
   148bc:	adds	r0, r0, #1
   148c0:	adc	r1, r1, #0
   148c4:	strd	r0, [r5, #104]	; 0x68
   148c8:	mov	r0, r4
   148cc:	bl	14be8 <free_node_boolean_operator@@Base>
   148d0:	ldrd	r0, [r5, #112]	; 0x70
   148d4:	adds	r0, r0, #1
   148d8:	adc	r1, r1, #0
   148dc:	strd	r0, [r5, #112]	; 0x70
   148e0:	pop	{r4, r5, fp, pc}
   148e4:	movw	r0, #49364	; 0xc0d4
   148e8:	movt	r0, #2
   148ec:	movw	r1, #43152	; 0xa890
   148f0:	movt	r1, #1
   148f4:	bl	15010 <get_boolean_op_value@@Base+0x390>
   148f8:	movw	r0, #49416	; 0xc108
   148fc:	movt	r0, #2
   14900:	ldr	r3, [r0]
   14904:	movw	r0, #42931	; 0xa7b3
   14908:	movt	r0, #1
   1490c:	mov	r1, #31
   14910:	mov	r2, #1
   14914:	bl	11f7c <fwrite@plt>
   14918:	mov	r0, #1
   1491c:	bl	11fdc <exit@plt>

00014920 <free_node_id@@Base>:
   14920:	push	{r4, r5, fp, lr}
   14924:	add	fp, sp, #8
   14928:	mov	r4, r0
   1492c:	movw	r5, #51552	; 0xc960
   14930:	movt	r5, #2
   14934:	ldrd	r0, [r5]
   14938:	adds	r0, r0, #1
   1493c:	adc	r1, r1, #0
   14940:	strd	r0, [r5]
   14944:	ldr	r0, [r4, #4]
   14948:	mov	r1, #16
   1494c:	cmp	r0, #0
   14950:	movwne	r1, #8
   14954:	mov	r2, r5
   14958:	ldr	r1, [r2, r1]!
   1495c:	adds	r1, r1, #1
   14960:	str	r1, [r2]
   14964:	ldr	r1, [r2, #4]
   14968:	adc	r1, r1, #0
   1496c:	str	r1, [r2, #4]
   14970:	cmp	r0, #0
   14974:	beq	1498c <free_node_id@@Base+0x6c>
   14978:	ldrd	r2, [r5, #24]
   1497c:	adds	r2, r2, #1
   14980:	adc	r3, r3, #0
   14984:	strd	r2, [r5, #24]
   14988:	bl	1473c <free_node@@Base>
   1498c:	ldrd	r0, [r5, #32]
   14990:	adds	r0, r0, #1
   14994:	adc	r1, r1, #0
   14998:	strd	r0, [r5, #32]
   1499c:	mov	r0, r4
   149a0:	pop	{r4, r5, fp, lr}
   149a4:	b	11f28 <free@plt>

000149a8 <free_node_int@@Base>:
   149a8:	push	{r4, r5, fp, lr}
   149ac:	add	fp, sp, #8
   149b0:	mov	r4, r0
   149b4:	movw	r5, #51600	; 0xc990
   149b8:	movt	r5, #2
   149bc:	ldrd	r0, [r5]
   149c0:	adds	r0, r0, #1
   149c4:	adc	r1, r1, #0
   149c8:	strd	r0, [r5]
   149cc:	ldr	r0, [r4, #4]
   149d0:	mov	r1, #16
   149d4:	cmp	r0, #0
   149d8:	movwne	r1, #8
   149dc:	mov	r2, r5
   149e0:	ldr	r1, [r2, r1]!
   149e4:	adds	r1, r1, #1
   149e8:	str	r1, [r2]
   149ec:	ldr	r1, [r2, #4]
   149f0:	adc	r1, r1, #0
   149f4:	str	r1, [r2, #4]
   149f8:	cmp	r0, #0
   149fc:	beq	14a14 <free_node_int@@Base+0x6c>
   14a00:	ldrd	r2, [r5, #24]
   14a04:	adds	r2, r2, #1
   14a08:	adc	r3, r3, #0
   14a0c:	strd	r2, [r5, #24]
   14a10:	bl	1473c <free_node@@Base>
   14a14:	ldrd	r0, [r5, #32]
   14a18:	adds	r0, r0, #1
   14a1c:	adc	r1, r1, #0
   14a20:	strd	r0, [r5, #32]
   14a24:	mov	r0, r4
   14a28:	pop	{r4, r5, fp, lr}
   14a2c:	b	11f28 <free@plt>

00014a30 <free_node_function@@Base>:
   14a30:	push	{r4, r5, fp, lr}
   14a34:	add	fp, sp, #8
   14a38:	mov	r4, r0
   14a3c:	movw	r5, #51648	; 0xc9c0
   14a40:	movt	r5, #2
   14a44:	ldrd	r0, [r5]
   14a48:	adds	r0, r0, #1
   14a4c:	adc	r1, r1, #0
   14a50:	strd	r0, [r5]
   14a54:	ldr	r0, [r4, #4]
   14a58:	mov	r1, #16
   14a5c:	cmp	r0, #0
   14a60:	movwne	r1, #8
   14a64:	mov	r2, r5
   14a68:	ldr	r1, [r2, r1]!
   14a6c:	adds	r1, r1, #1
   14a70:	str	r1, [r2]
   14a74:	ldr	r1, [r2, #4]
   14a78:	adc	r1, r1, #0
   14a7c:	str	r1, [r2, #4]
   14a80:	cmp	r0, #0
   14a84:	beq	14a9c <free_node_function@@Base+0x6c>
   14a88:	ldrd	r2, [r5, #24]
   14a8c:	adds	r2, r2, #1
   14a90:	adc	r3, r3, #0
   14a94:	strd	r2, [r5, #24]
   14a98:	bl	1473c <free_node@@Base>
   14a9c:	ldrd	r0, [r5, #32]
   14aa0:	adds	r0, r0, #1
   14aa4:	adc	r1, r1, #0
   14aa8:	strd	r0, [r5, #32]
   14aac:	ldr	r0, [r4, #8]
   14ab0:	bl	11f28 <free@plt>
   14ab4:	mov	r0, r4
   14ab8:	pop	{r4, r5, fp, lr}
   14abc:	b	11f28 <free@plt>

00014ac0 <free_node_return@@Base>:
   14ac0:	push	{r4, r5, fp, lr}
   14ac4:	add	fp, sp, #8
   14ac8:	mov	r4, r0
   14acc:	movw	r5, #51696	; 0xc9f0
   14ad0:	movt	r5, #2
   14ad4:	ldrd	r0, [r5]
   14ad8:	adds	r0, r0, #1
   14adc:	adc	r1, r1, #0
   14ae0:	strd	r0, [r5]
   14ae4:	ldr	r0, [r4, #4]
   14ae8:	mov	r1, #16
   14aec:	cmp	r0, #0
   14af0:	movwne	r1, #8
   14af4:	mov	r2, r5
   14af8:	ldr	r1, [r2, r1]!
   14afc:	adds	r1, r1, #1
   14b00:	str	r1, [r2]
   14b04:	ldr	r1, [r2, #4]
   14b08:	adc	r1, r1, #0
   14b0c:	str	r1, [r2, #4]
   14b10:	cmp	r0, #0
   14b14:	beq	14b2c <free_node_return@@Base+0x6c>
   14b18:	ldrd	r2, [r5, #24]
   14b1c:	adds	r2, r2, #1
   14b20:	adc	r3, r3, #0
   14b24:	strd	r2, [r5, #24]
   14b28:	bl	1473c <free_node@@Base>
   14b2c:	ldrd	r0, [r5, #32]
   14b30:	adds	r0, r0, #1
   14b34:	adc	r1, r1, #0
   14b38:	strd	r0, [r5, #32]
   14b3c:	mov	r0, r4
   14b40:	pop	{r4, r5, fp, lr}
   14b44:	b	11f28 <free@plt>

00014b48 <free_node_if@@Base>:
   14b48:	push	{r4, r5, fp, lr}
   14b4c:	add	fp, sp, #8
   14b50:	mov	r4, r0
   14b54:	movw	r5, #51744	; 0xca20
   14b58:	movt	r5, #2
   14b5c:	ldrd	r0, [r5]
   14b60:	adds	r0, r0, #1
   14b64:	adc	r1, r1, #0
   14b68:	strd	r0, [r5]
   14b6c:	ldr	r0, [r4, #4]
   14b70:	mov	r1, #16
   14b74:	cmp	r0, #0
   14b78:	movwne	r1, #8
   14b7c:	mov	r2, r5
   14b80:	ldr	r1, [r2, r1]!
   14b84:	adds	r1, r1, #1
   14b88:	str	r1, [r2]
   14b8c:	ldr	r1, [r2, #4]
   14b90:	adc	r1, r1, #0
   14b94:	str	r1, [r2, #4]
   14b98:	cmp	r0, #0
   14b9c:	beq	14bb4 <free_node_if@@Base+0x6c>
   14ba0:	ldrd	r2, [r5, #24]
   14ba4:	adds	r2, r2, #1
   14ba8:	adc	r3, r3, #0
   14bac:	strd	r2, [r5, #24]
   14bb0:	bl	1473c <free_node@@Base>
   14bb4:	ldrd	r0, [r5, #32]
   14bb8:	adds	r0, r0, #1
   14bbc:	adc	r1, r1, #0
   14bc0:	strd	r0, [r5, #32]
   14bc4:	ldr	r0, [r4, #8]
   14bc8:	bl	1473c <free_node@@Base>
   14bcc:	ldr	r0, [r4, #12]
   14bd0:	bl	1473c <free_node@@Base>
   14bd4:	ldr	r0, [r4, #16]
   14bd8:	bl	1473c <free_node@@Base>
   14bdc:	mov	r0, r4
   14be0:	pop	{r4, r5, fp, lr}
   14be4:	b	11f28 <free@plt>

00014be8 <free_node_boolean_operator@@Base>:
   14be8:	push	{r4, r5, fp, lr}
   14bec:	add	fp, sp, #8
   14bf0:	mov	r4, r0
   14bf4:	movw	r5, #51792	; 0xca50
   14bf8:	movt	r5, #2
   14bfc:	ldrd	r0, [r5]
   14c00:	adds	r0, r0, #1
   14c04:	adc	r1, r1, #0
   14c08:	strd	r0, [r5]
   14c0c:	ldr	r0, [r4, #4]
   14c10:	mov	r1, #16
   14c14:	cmp	r0, #0
   14c18:	movwne	r1, #8
   14c1c:	mov	r2, r5
   14c20:	ldr	r1, [r2, r1]!
   14c24:	adds	r1, r1, #1
   14c28:	str	r1, [r2]
   14c2c:	ldr	r1, [r2, #4]
   14c30:	adc	r1, r1, #0
   14c34:	str	r1, [r2, #4]
   14c38:	cmp	r0, #0
   14c3c:	beq	14c54 <free_node_boolean_operator@@Base+0x6c>
   14c40:	ldrd	r2, [r5, #24]
   14c44:	adds	r2, r2, #1
   14c48:	adc	r3, r3, #0
   14c4c:	strd	r2, [r5, #24]
   14c50:	bl	1473c <free_node@@Base>
   14c54:	ldrd	r0, [r5, #32]
   14c58:	adds	r0, r0, #1
   14c5c:	adc	r1, r1, #0
   14c60:	strd	r0, [r5, #32]
   14c64:	ldr	r0, [r4, #8]
   14c68:	bl	1473c <free_node@@Base>
   14c6c:	ldr	r0, [r4, #12]
   14c70:	bl	1473c <free_node@@Base>
   14c74:	mov	r0, r4
   14c78:	pop	{r4, r5, fp, lr}
   14c7c:	b	11f28 <free@plt>

00014c80 <get_boolean_op_value@@Base>:
   14c80:	push	{r4, r5, r6, sl, fp, lr}
   14c84:	add	fp, sp, #16
   14c88:	movw	r6, #51840	; 0xca80
   14c8c:	movt	r6, #2
   14c90:	ldrd	r2, [r6]
   14c94:	adds	r2, r2, #1
   14c98:	adc	r3, r3, #0
   14c9c:	strd	r2, [r6]
   14ca0:	ldr	r4, [r0, #4]
   14ca4:	mov	r0, r4
   14ca8:	mov	r1, #2
   14cac:	bl	1206c <strnlen@plt>
   14cb0:	mov	r1, #16
   14cb4:	cmp	r0, #2
   14cb8:	movweq	r1, #8
   14cbc:	mov	r2, r6
   14cc0:	ldr	r1, [r2, r1]!
   14cc4:	adds	r1, r1, #1
   14cc8:	str	r1, [r2]
   14ccc:	ldr	r1, [r2, #4]
   14cd0:	adc	r1, r1, #0
   14cd4:	str	r1, [r2, #4]
   14cd8:	cmp	r0, #2
   14cdc:	bne	14e94 <get_boolean_op_value@@Base+0x214>
   14ce0:	movw	r1, #42963	; 0xa7d3
   14ce4:	movt	r1, #1
   14ce8:	mov	r0, r4
   14cec:	mov	r2, #2
   14cf0:	bl	120d8 <strncmp@plt>
   14cf4:	mov	r1, #32
   14cf8:	cmp	r0, #0
   14cfc:	movweq	r1, #24
   14d00:	mov	r2, r6
   14d04:	ldr	r1, [r2, r1]!
   14d08:	adds	r1, r1, #1
   14d0c:	str	r1, [r2]
   14d10:	ldr	r1, [r2, #4]
   14d14:	adc	r1, r1, #0
   14d18:	str	r1, [r2, #4]
   14d1c:	cmp	r0, #0
   14d20:	beq	14ef0 <get_boolean_op_value@@Base+0x270>
   14d24:	movw	r1, #42966	; 0xa7d6
   14d28:	movt	r1, #1
   14d2c:	mov	r0, r4
   14d30:	mov	r2, #2
   14d34:	bl	120d8 <strncmp@plt>
   14d38:	mov	r1, #56	; 0x38
   14d3c:	cmp	r0, #0
   14d40:	movweq	r1, #48	; 0x30
   14d44:	mov	r2, r6
   14d48:	ldr	r1, [r2, r1]!
   14d4c:	adds	r1, r1, #1
   14d50:	str	r1, [r2]
   14d54:	ldr	r1, [r2, #4]
   14d58:	adc	r1, r1, #0
   14d5c:	str	r1, [r2, #4]
   14d60:	cmp	r0, #0
   14d64:	beq	14f68 <get_boolean_op_value@@Base+0x2e8>
   14d68:	movw	r1, #42969	; 0xa7d9
   14d6c:	movt	r1, #1
   14d70:	mov	r5, #2
   14d74:	mov	r0, r4
   14d78:	mov	r2, #2
   14d7c:	bl	120d8 <strncmp@plt>
   14d80:	mov	r1, #80	; 0x50
   14d84:	cmp	r0, #0
   14d88:	movweq	r1, #72	; 0x48
   14d8c:	mov	r2, r6
   14d90:	ldr	r1, [r2, r1]!
   14d94:	adds	r1, r1, #1
   14d98:	str	r1, [r2]
   14d9c:	ldr	r1, [r2, #4]
   14da0:	adc	r1, r1, #0
   14da4:	str	r1, [r2, #4]
   14da8:	cmp	r0, #0
   14dac:	beq	14f80 <get_boolean_op_value@@Base+0x300>
   14db0:	movw	r1, #42972	; 0xa7dc
   14db4:	movt	r1, #1
   14db8:	mov	r0, r4
   14dbc:	mov	r2, #2
   14dc0:	bl	120d8 <strncmp@plt>
   14dc4:	mov	r1, #104	; 0x68
   14dc8:	cmp	r0, #0
   14dcc:	movweq	r1, #96	; 0x60
   14dd0:	mov	r2, r6
   14dd4:	ldr	r1, [r2, r1]!
   14dd8:	adds	r1, r1, #1
   14ddc:	str	r1, [r2]
   14de0:	ldr	r1, [r2, #4]
   14de4:	adc	r1, r1, #0
   14de8:	str	r1, [r2, #4]
   14dec:	cmp	r0, #0
   14df0:	beq	14f94 <get_boolean_op_value@@Base+0x314>
   14df4:	movw	r1, #42975	; 0xa7df
   14df8:	movt	r1, #1
   14dfc:	mov	r0, r4
   14e00:	mov	r2, #2
   14e04:	bl	120d8 <strncmp@plt>
   14e08:	mov	r1, #128	; 0x80
   14e0c:	cmp	r0, #0
   14e10:	movweq	r1, #120	; 0x78
   14e14:	mov	r2, r6
   14e18:	ldr	r1, [r2, r1]!
   14e1c:	adds	r1, r1, #1
   14e20:	str	r1, [r2]
   14e24:	ldr	r1, [r2, #4]
   14e28:	adc	r1, r1, #0
   14e2c:	str	r1, [r2, #4]
   14e30:	cmp	r0, #0
   14e34:	beq	14fac <get_boolean_op_value@@Base+0x32c>
   14e38:	movw	r1, #42978	; 0xa7e2
   14e3c:	movt	r1, #1
   14e40:	mov	r0, r4
   14e44:	mov	r2, #2
   14e48:	bl	120d8 <strncmp@plt>
   14e4c:	mov	r1, #152	; 0x98
   14e50:	cmp	r0, #0
   14e54:	movweq	r1, #144	; 0x90
   14e58:	mov	r2, r6
   14e5c:	ldr	r1, [r2, r1]!
   14e60:	adds	r1, r1, #1
   14e64:	str	r1, [r2]
   14e68:	ldr	r1, [r2, #4]
   14e6c:	adc	r1, r1, #0
   14e70:	str	r1, [r2, #4]
   14e74:	cmp	r0, #0
   14e78:	bne	14fec <get_boolean_op_value@@Base+0x36c>
   14e7c:	ldrd	r0, [r6, #160]	; 0xa0
   14e80:	adds	r0, r0, #1
   14e84:	adc	r1, r1, #0
   14e88:	strd	r0, [r6, #160]	; 0xa0
   14e8c:	mov	r5, #5
   14e90:	b	14fc0 <get_boolean_op_value@@Base+0x340>
   14e94:	movw	r0, #49368	; 0xc0d8
   14e98:	movt	r0, #2
   14e9c:	mov	r1, #0
   14ea0:	str	r1, [r0]
   14ea4:	ldrb	r0, [r4]
   14ea8:	cmp	r0, #62	; 0x3e
   14eac:	beq	14f38 <get_boolean_op_value@@Base+0x2b8>
   14eb0:	cmp	r0, #60	; 0x3c
   14eb4:	beq	14f08 <get_boolean_op_value@@Base+0x288>
   14eb8:	cmp	r0, #33	; 0x21
   14ebc:	bne	14fd8 <get_boolean_op_value@@Base+0x358>
   14ec0:	movw	r0, #43180	; 0xa8ac
   14ec4:	movt	r0, #1
   14ec8:	add	r1, r0, #4
   14ecc:	movw	r0, #49368	; 0xc0d8
   14ed0:	movt	r0, #2
   14ed4:	bl	15010 <get_boolean_op_value@@Base+0x390>
   14ed8:	ldrd	r0, [r6, #200]	; 0xc8
   14edc:	adds	r0, r0, #1
   14ee0:	adc	r1, r1, #0
   14ee4:	strd	r0, [r6, #200]	; 0xc8
   14ee8:	mov	r5, #8
   14eec:	b	14fc0 <get_boolean_op_value@@Base+0x340>
   14ef0:	ldrd	r0, [r6, #40]	; 0x28
   14ef4:	adds	r0, r0, #1
   14ef8:	adc	r1, r1, #0
   14efc:	strd	r0, [r6, #40]	; 0x28
   14f00:	mov	r5, #0
   14f04:	b	14fc0 <get_boolean_op_value@@Base+0x340>
   14f08:	movw	r0, #43180	; 0xa8ac
   14f0c:	movt	r0, #1
   14f10:	add	r1, r0, #8
   14f14:	movw	r0, #49368	; 0xc0d8
   14f18:	movt	r0, #2
   14f1c:	bl	15010 <get_boolean_op_value@@Base+0x390>
   14f20:	ldrd	r0, [r6, #208]	; 0xd0
   14f24:	adds	r0, r0, #1
   14f28:	adc	r1, r1, #0
   14f2c:	strd	r0, [r6, #208]	; 0xd0
   14f30:	mov	r5, #6
   14f34:	b	14fc0 <get_boolean_op_value@@Base+0x340>
   14f38:	movw	r0, #43180	; 0xa8ac
   14f3c:	movt	r0, #1
   14f40:	add	r1, r0, #12
   14f44:	movw	r0, #49368	; 0xc0d8
   14f48:	movt	r0, #2
   14f4c:	bl	15010 <get_boolean_op_value@@Base+0x390>
   14f50:	ldrd	r0, [r6, #216]	; 0xd8
   14f54:	adds	r0, r0, #1
   14f58:	adc	r1, r1, #0
   14f5c:	strd	r0, [r6, #216]	; 0xd8
   14f60:	mov	r5, #7
   14f64:	b	14fc0 <get_boolean_op_value@@Base+0x340>
   14f68:	ldrd	r0, [r6, #64]	; 0x40
   14f6c:	adds	r0, r0, #1
   14f70:	adc	r1, r1, #0
   14f74:	strd	r0, [r6, #64]	; 0x40
   14f78:	mov	r5, #1
   14f7c:	b	14fc0 <get_boolean_op_value@@Base+0x340>
   14f80:	ldrd	r0, [r6, #88]	; 0x58
   14f84:	adds	r0, r0, #1
   14f88:	adc	r1, r1, #0
   14f8c:	strd	r0, [r6, #88]	; 0x58
   14f90:	b	14fc0 <get_boolean_op_value@@Base+0x340>
   14f94:	ldrd	r0, [r6, #112]	; 0x70
   14f98:	adds	r0, r0, #1
   14f9c:	adc	r1, r1, #0
   14fa0:	strd	r0, [r6, #112]	; 0x70
   14fa4:	mov	r5, #3
   14fa8:	b	14fc0 <get_boolean_op_value@@Base+0x340>
   14fac:	ldrd	r0, [r6, #136]	; 0x88
   14fb0:	adds	r0, r0, #1
   14fb4:	adc	r1, r1, #0
   14fb8:	strd	r0, [r6, #136]	; 0x88
   14fbc:	mov	r5, #4
   14fc0:	ldrd	r0, [r6, #224]	; 0xe0
   14fc4:	adds	r0, r0, #1
   14fc8:	adc	r1, r1, #0
   14fcc:	strd	r0, [r6, #224]	; 0xe0
   14fd0:	mov	r0, r5
   14fd4:	pop	{r4, r5, r6, sl, fp, pc}
   14fd8:	movw	r0, #49368	; 0xc0d8
   14fdc:	movt	r0, #2
   14fe0:	movw	r1, #43180	; 0xa8ac
   14fe4:	movt	r1, #1
   14fe8:	bl	15010 <get_boolean_op_value@@Base+0x390>
   14fec:	movw	r0, #49416	; 0xc108
   14ff0:	movt	r0, #2
   14ff4:	ldr	r0, [r0]
   14ff8:	movw	r1, #42981	; 0xa7e5
   14ffc:	movt	r1, #1
   15000:	mov	r2, r4
   15004:	bl	1200c <fprintf@plt>
   15008:	mov	r0, #1
   1500c:	bl	11fdc <exit@plt>
   15010:	ldr	r0, [r0]
   15014:	cmn	r0, #1
   15018:	ldrne	r0, [r1, r0, lsl #2]
   1501c:	cmpne	r0, #0
   15020:	bne	15028 <get_boolean_op_value@@Base+0x3a8>
   15024:	bx	lr
   15028:	ldrd	r2, [r0]
   1502c:	adds	r2, r2, #1
   15030:	adc	r3, r3, #0
   15034:	strd	r2, [r0]
   15038:	bx	lr
   1503c:	push	{r4, r5, r6, lr}
   15040:	sub	sp, sp, #8
   15044:	movw	r0, #43648	; 0xaa80
   15048:	movt	r0, #1
   1504c:	movw	r1, #40711	; 0x9f07
   15050:	movt	r1, #1
   15054:	movw	r2, #23410	; 0x5b72
   15058:	movt	r2, #13184	; 0x3380
   1505c:	bl	16ec4 <__generate_code_for_binary_boolean_expression@@Base+0x490>
   15060:	movw	r0, #43520	; 0xaa00
   15064:	movt	r0, #1
   15068:	add	r4, r0, #4
   1506c:	mov	r5, #0
   15070:	movw	r6, #43200	; 0xa8c0
   15074:	movt	r6, #1
   15078:	mov	r3, r6
   1507c:	ldr	r0, [r3, r5]!
   15080:	ldr	r1, [r3, #16]
   15084:	str	r1, [sp]
   15088:	ldmib	r3, {r1, r2}
   1508c:	ldrb	r3, [r3, #12]
   15090:	bl	17628 <__generate_code_for_binary_boolean_expression@@Base+0xbf4>
   15094:	ldrd	r0, [r4, #-4]
   15098:	bl	17edc <__generate_code_for_binary_boolean_expression@@Base+0x14a8>
   1509c:	add	r5, r5, #20
   150a0:	add	r4, r4, #8
   150a4:	cmp	r5, #320	; 0x140
   150a8:	bne	15078 <get_boolean_op_value@@Base+0x3f8>
   150ac:	bl	18658 <__generate_code_for_binary_boolean_expression@@Base+0x1c24>
   150b0:	add	sp, sp, #8
   150b4:	pop	{r4, r5, r6, lr}
   150b8:	b	193c4 <__generate_code_for_binary_boolean_expression@@Base+0x2990>
   150bc:	push	{fp, lr}
   150c0:	bl	1503c <get_boolean_op_value@@Base+0x3bc>
   150c4:	movw	r2, #51552	; 0xc960
   150c8:	movt	r2, #2
   150cc:	mov	r0, #0
   150d0:	vmov.i32	q8, #0	; 0x00000000
   150d4:	str	r0, [r2, #32]
   150d8:	add	r1, r2, #16
   150dc:	vst1.64	{d16-d17}, [r1 :128]
   150e0:	movw	r3, #51424	; 0xc8e0
   150e4:	movt	r3, #2
   150e8:	str	r0, [r3, #112]	; 0x70
   150ec:	add	r1, r3, #96	; 0x60
   150f0:	vst1.64	{d16-d17}, [r1 :128]
   150f4:	add	r1, r3, #80	; 0x50
   150f8:	vst1.64	{d16-d17}, [r1 :128]
   150fc:	add	r1, r3, #64	; 0x40
   15100:	vst1.64	{d16-d17}, [r1 :128]
   15104:	add	r1, r3, #48	; 0x30
   15108:	vst1.64	{d16-d17}, [r1 :128]
   1510c:	add	r1, r3, #32
   15110:	vst1.64	{d16-d17}, [r1 :128]
   15114:	add	r1, r3, #16
   15118:	vst1.64	{d16-d17}, [r1 :128]
   1511c:	movw	r1, #51312	; 0xc870
   15120:	movt	r1, #2
   15124:	vst1.64	{d16-d17}, [r1]
   15128:	movw	r1, #51296	; 0xc860
   1512c:	movt	r1, #2
   15130:	vst1.64	{d16-d17}, [r1]
   15134:	movw	r1, #51328	; 0xc880
   15138:	movt	r1, #2
   1513c:	vst1.64	{d16-d17}, [r1]
   15140:	movw	r1, #51344	; 0xc890
   15144:	movt	r1, #2
   15148:	vst1.64	{d16-d17}, [r1]
   1514c:	movw	r1, #51360	; 0xc8a0
   15150:	movt	r1, #2
   15154:	vst1.64	{d16-d17}, [r1]
   15158:	movw	r1, #51376	; 0xc8b0
   1515c:	movt	r1, #2
   15160:	vst1.64	{d16-d17}, [r1]
   15164:	movw	r1, #51392	; 0xc8c0
   15168:	movt	r1, #2
   1516c:	vst1.64	{d16-d17}, [r1]
   15170:	movw	r1, #51408	; 0xc8d0
   15174:	movt	r1, #2
   15178:	vst1.64	{d16-d17}, [r1]
   1517c:	mov	r1, #36	; 0x24
   15180:	vst1.64	{d16-d17}, [r2 :128], r1
   15184:	str	r0, [r2]
   15188:	mov	r2, #116	; 0x74
   1518c:	vst1.64	{d16-d17}, [r3 :128], r2
   15190:	str	r0, [r3]
   15194:	movw	r2, #51600	; 0xc990
   15198:	movt	r2, #2
   1519c:	str	r0, [r2, #32]
   151a0:	add	r3, r2, #16
   151a4:	vst1.64	{d16-d17}, [r3 :128]
   151a8:	vst1.64	{d16-d17}, [r2 :128], r1
   151ac:	str	r0, [r2]
   151b0:	movw	r2, #51648	; 0xc9c0
   151b4:	movt	r2, #2
   151b8:	str	r0, [r2, #32]
   151bc:	add	r3, r2, #16
   151c0:	vst1.64	{d16-d17}, [r3 :128]
   151c4:	vst1.64	{d16-d17}, [r2 :128], r1
   151c8:	str	r0, [r2]
   151cc:	movw	r2, #51696	; 0xc9f0
   151d0:	movt	r2, #2
   151d4:	str	r0, [r2, #32]
   151d8:	add	r3, r2, #16
   151dc:	vst1.64	{d16-d17}, [r3 :128]
   151e0:	vst1.64	{d16-d17}, [r2 :128], r1
   151e4:	str	r0, [r2]
   151e8:	movw	r2, #51744	; 0xca20
   151ec:	movt	r2, #2
   151f0:	str	r0, [r2, #32]
   151f4:	add	r3, r2, #16
   151f8:	vst1.64	{d16-d17}, [r3 :128]
   151fc:	vst1.64	{d16-d17}, [r2 :128], r1
   15200:	str	r0, [r2]
   15204:	movw	r2, #51792	; 0xca50
   15208:	movt	r2, #2
   1520c:	str	r0, [r2, #32]
   15210:	add	r3, r2, #16
   15214:	vst1.64	{d16-d17}, [r3 :128]
   15218:	vst1.64	{d16-d17}, [r2 :128], r1
   1521c:	str	r0, [r2]
   15220:	movw	r0, #51840	; 0xca80
   15224:	movt	r0, #2
   15228:	mov	r1, #0
   1522c:	mov	r2, #232	; 0xe8
   15230:	bl	1203c <memset@plt>
   15234:	pop	{fp, pc}
   15238:	movw	r0, #20540	; 0x503c
   1523c:	movt	r0, #1
   15240:	movw	r1, #20668	; 0x50bc
   15244:	movt	r1, #1
   15248:	b	19874 <__gcov_flush@@Base+0xb4>

0001524c <init_grammar@@Base>:
   1524c:	push	{r4, sl, fp, lr}
   15250:	add	fp, sp, #8
   15254:	movw	r2, #52080	; 0xcb70
   15258:	movt	r2, #2
   1525c:	ldm	r2, {r3, ip, lr}
   15260:	ldr	r4, [r2, #12]
   15264:	adds	r3, r3, #1
   15268:	adc	ip, ip, #0
   1526c:	adds	lr, lr, #1
   15270:	adc	r4, r4, #0
   15274:	stm	r2, {r3, ip, lr}
   15278:	str	r4, [r2, #12]
   1527c:	str	r1, [r0]
   15280:	pop	{r4, sl, fp, pc}

00015284 <destroy_grammar@@Base>:
   15284:	movw	r0, #52096	; 0xcb80
   15288:	movt	r0, #2
   1528c:	ldm	r0, {r1, r2, r3, ip}
   15290:	adds	r1, r1, #1
   15294:	adc	r2, r2, #0
   15298:	adds	r3, r3, #1
   1529c:	adc	ip, ip, #0
   152a0:	stm	r0, {r1, r2, r3, ip}
   152a4:	bx	lr

000152a8 <build_ast@@Base>:
   152a8:	push	{fp, lr}
   152ac:	mov	fp, sp
   152b0:	movw	r1, #52112	; 0xcb90
   152b4:	movt	r1, #2
   152b8:	ldm	r1, {r2, r3, ip, lr}
   152bc:	adds	r2, r2, #1
   152c0:	adc	r3, r3, #0
   152c4:	adds	ip, ip, #1
   152c8:	adc	lr, lr, #0
   152cc:	stm	r1, {r2, r3, ip, lr}
   152d0:	pop	{fp, lr}
   152d4:	b	152d8 <read_function_ast_node@@Base>

000152d8 <read_function_ast_node@@Base>:
   152d8:	push	{r4, r5, r6, r7, fp, lr}
   152dc:	add	fp, sp, #16
   152e0:	mov	r4, r0
   152e4:	movw	r7, #52128	; 0xcba0
   152e8:	movt	r7, #2
   152ec:	ldrd	r0, [r7]
   152f0:	adds	r0, r0, #1
   152f4:	adc	r1, r1, #0
   152f8:	strd	r0, [r7]
   152fc:	ldr	r0, [r4]
   15300:	bl	13154 <next@@Base>
   15304:	ldr	r1, [r0]
   15308:	mov	r2, #16
   1530c:	cmp	r1, #0
   15310:	movwne	r2, #8
   15314:	mov	r3, r7
   15318:	ldr	r2, [r3, r2]!
   1531c:	adds	r2, r2, #1
   15320:	str	r2, [r3]
   15324:	ldr	r2, [r3, #4]
   15328:	adc	r2, r2, #0
   1532c:	str	r2, [r3, #4]
   15330:	cmp	r1, #0
   15334:	beq	15350 <read_function_ast_node@@Base+0x78>
   15338:	ldrd	r0, [r7, #24]
   1533c:	adds	r0, r0, #1
   15340:	adc	r1, r1, #0
   15344:	strd	r0, [r7, #24]
   15348:	mov	r4, #0
   1534c:	b	15498 <read_function_ast_node@@Base+0x1c0>
   15350:	bl	12a50 <free_token_int_type@@Base>
   15354:	ldr	r0, [r4]
   15358:	bl	13154 <next@@Base>
   1535c:	mov	r5, r0
   15360:	ldr	r0, [r0]
   15364:	mov	r1, #40	; 0x28
   15368:	cmp	r0, #2
   1536c:	movwne	r1, #32
   15370:	mov	r2, r7
   15374:	ldr	r1, [r2, r1]!
   15378:	adds	r1, r1, #1
   1537c:	str	r1, [r2]
   15380:	ldr	r1, [r2, #4]
   15384:	adc	r1, r1, #0
   15388:	str	r1, [r2, #4]
   1538c:	cmp	r0, #2
   15390:	beq	153ac <read_function_ast_node@@Base+0xd4>
   15394:	ldrd	r0, [r7, #48]	; 0x30
   15398:	adds	r0, r0, #1
   1539c:	adc	r1, r1, #0
   153a0:	strd	r0, [r7, #48]	; 0x30
   153a4:	mov	r4, #0
   153a8:	b	15498 <read_function_ast_node@@Base+0x1c0>
   153ac:	ldr	r0, [r4]
   153b0:	bl	13154 <next@@Base>
   153b4:	ldr	r1, [r0]
   153b8:	mov	r2, #64	; 0x40
   153bc:	cmp	r1, #3
   153c0:	movwne	r2, #56	; 0x38
   153c4:	mov	r3, r7
   153c8:	ldr	r2, [r3, r2]!
   153cc:	adds	r2, r2, #1
   153d0:	str	r2, [r3]
   153d4:	ldr	r2, [r3, #4]
   153d8:	adc	r2, r2, #0
   153dc:	str	r2, [r3, #4]
   153e0:	cmp	r1, #3
   153e4:	beq	15400 <read_function_ast_node@@Base+0x128>
   153e8:	ldrd	r0, [r7, #72]	; 0x48
   153ec:	adds	r0, r0, #1
   153f0:	adc	r1, r1, #0
   153f4:	strd	r0, [r7, #72]	; 0x48
   153f8:	mov	r4, #0
   153fc:	b	15498 <read_function_ast_node@@Base+0x1c0>
   15400:	bl	12ae0 <free_token_opar@@Base>
   15404:	ldr	r0, [r4]
   15408:	bl	13154 <next@@Base>
   1540c:	ldr	r1, [r0]
   15410:	mov	r2, #88	; 0x58
   15414:	cmp	r1, #4
   15418:	movwne	r2, #80	; 0x50
   1541c:	mov	r3, r7
   15420:	ldr	r2, [r3, r2]!
   15424:	adds	r2, r2, #1
   15428:	str	r2, [r3]
   1542c:	ldr	r2, [r3, #4]
   15430:	adc	r2, r2, #0
   15434:	str	r2, [r3, #4]
   15438:	cmp	r1, #4
   1543c:	beq	15458 <read_function_ast_node@@Base+0x180>
   15440:	ldrd	r0, [r7, #96]	; 0x60
   15444:	adds	r0, r0, #1
   15448:	adc	r1, r1, #0
   1544c:	strd	r0, [r7, #96]	; 0x60
   15450:	mov	r4, #0
   15454:	b	15498 <read_function_ast_node@@Base+0x1c0>
   15458:	ldrd	r2, [r7, #104]	; 0x68
   1545c:	adds	r2, r2, #1
   15460:	adc	r3, r3, #0
   15464:	strd	r2, [r7, #104]	; 0x68
   15468:	bl	12b10 <free_token_cpar@@Base>
   1546c:	mov	r0, r4
   15470:	bl	154b0 <read_body@@Base>
   15474:	mov	r6, r0
   15478:	mov	r0, #16
   1547c:	bl	11fa0 <malloc@plt>
   15480:	mov	r4, r0
   15484:	ldr	r1, [r5, #4]
   15488:	mov	r2, r6
   1548c:	bl	145fc <init_node_function@@Base>
   15490:	mov	r0, r5
   15494:	bl	12ab0 <free_token_function@@Base>
   15498:	ldrd	r0, [r7, #112]	; 0x70
   1549c:	adds	r0, r0, #1
   154a0:	adc	r1, r1, #0
   154a4:	strd	r0, [r7, #112]	; 0x70
   154a8:	mov	r0, r4
   154ac:	pop	{r4, r5, r6, r7, fp, pc}

000154b0 <read_body@@Base>:
   154b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154b4:	add	fp, sp, #28
   154b8:	sub	sp, sp, #4
   154bc:	mov	sl, r0
   154c0:	movw	r4, #52256	; 0xcc20
   154c4:	movt	r4, #2
   154c8:	ldrd	r0, [r4]
   154cc:	adds	r0, r0, #1
   154d0:	adc	r1, r1, #0
   154d4:	strd	r0, [r4]
   154d8:	ldr	r0, [sl]
   154dc:	bl	13154 <next@@Base>
   154e0:	ldr	r1, [r0]
   154e4:	mov	r2, #16
   154e8:	cmp	r1, #5
   154ec:	movwne	r2, #8
   154f0:	mov	r3, r4
   154f4:	ldr	r2, [r3, r2]!
   154f8:	adds	r2, r2, #1
   154fc:	str	r2, [r3]
   15500:	ldr	r2, [r3, #4]
   15504:	adc	r2, r2, #0
   15508:	str	r2, [r3, #4]
   1550c:	cmp	r1, #5
   15510:	beq	1552c <read_body@@Base+0x7c>
   15514:	ldrd	r0, [r4, #24]
   15518:	adds	r0, r0, #1
   1551c:	adc	r1, r1, #0
   15520:	strd	r0, [r4, #24]
   15524:	mov	r6, #0
   15528:	b	15720 <read_body@@Base+0x270>
   1552c:	ldrd	r2, [r4, #32]
   15530:	adds	r2, r2, #1
   15534:	adc	r3, r3, #0
   15538:	strd	r2, [r4, #32]
   1553c:	bl	12b40 <free_token_obra@@Base>
   15540:	ldr	r0, [sl]
   15544:	bl	13154 <next@@Base>
   15548:	mov	r7, r0
   1554c:	ldr	r0, [r0]
   15550:	mov	r1, #48	; 0x30
   15554:	cmp	r0, #6
   15558:	movwne	r1, #40	; 0x28
   1555c:	mov	r2, r4
   15560:	ldr	r1, [r2, r1]!
   15564:	adds	r1, r1, #1
   15568:	str	r1, [r2]
   1556c:	ldr	r1, [r2, #4]
   15570:	adc	r1, r1, #0
   15574:	str	r1, [r2, #4]
   15578:	mov	r6, #0
   1557c:	cmp	r0, #6
   15580:	beq	156d4 <read_body@@Base+0x224>
   15584:	movw	r9, #49372	; 0xc0dc
   15588:	movt	r9, #2
   1558c:	movw	r1, #44112	; 0xac50
   15590:	movt	r1, #1
   15594:	add	r1, r1, #8
   15598:	str	r1, [sp]
   1559c:	mov	r8, #0
   155a0:	mov	r6, #0
   155a4:	mov	r1, #0
   155a8:	str	r1, [r9]
   155ac:	cmp	r0, #10
   155b0:	beq	155f4 <read_body@@Base+0x144>
   155b4:	cmp	r0, #7
   155b8:	bne	156f0 <read_body@@Base+0x240>
   155bc:	movw	r0, #44112	; 0xac50
   155c0:	movt	r0, #1
   155c4:	add	r1, r0, #4
   155c8:	mov	r0, r9
   155cc:	bl	1606c <read_boolean_unary_expression@@Base+0x150>
   155d0:	ldrd	r0, [r4, #80]	; 0x50
   155d4:	adds	r0, r0, #1
   155d8:	adc	r1, r1, #0
   155dc:	strd	r0, [r4, #80]	; 0x50
   155e0:	mov	r0, r7
   155e4:	bl	12ba0 <free_token_return@@Base>
   155e8:	mov	r0, sl
   155ec:	bl	1573c <read_return_expression@@Base>
   155f0:	b	15620 <read_body@@Base+0x170>
   155f4:	mov	r0, r9
   155f8:	ldr	r1, [sp]
   155fc:	bl	1606c <read_boolean_unary_expression@@Base+0x150>
   15600:	ldrd	r0, [r4, #88]	; 0x58
   15604:	adds	r0, r0, #1
   15608:	adc	r1, r1, #0
   1560c:	strd	r0, [r4, #88]	; 0x58
   15610:	mov	r0, r7
   15614:	bl	12c30 <free_token_if@@Base>
   15618:	mov	r0, sl
   1561c:	bl	15868 <read_if_statement@@Base>
   15620:	mov	r5, r0
   15624:	cmp	r6, #0
   15628:	mov	r0, #112	; 0x70
   1562c:	movwne	r0, #104	; 0x68
   15630:	mov	r1, r4
   15634:	ldr	r0, [r1, r0]!
   15638:	adds	r0, r0, #1
   1563c:	str	r0, [r1]
   15640:	ldr	r0, [r1, #4]
   15644:	adc	r0, r0, #0
   15648:	str	r0, [r1, #4]
   1564c:	cmp	r6, #0
   15650:	beq	1566c <read_body@@Base+0x1bc>
   15654:	ldrd	r0, [r4, #120]	; 0x78
   15658:	adds	r0, r0, #1
   1565c:	adc	r1, r1, #0
   15660:	strd	r0, [r4, #120]	; 0x78
   15664:	str	r5, [r8, #4]
   15668:	b	15680 <read_body@@Base+0x1d0>
   1566c:	ldrd	r0, [r4, #128]	; 0x80
   15670:	adds	r0, r0, #1
   15674:	adc	r1, r1, #0
   15678:	strd	r0, [r4, #128]	; 0x80
   1567c:	mov	r6, r5
   15680:	ldrd	r0, [r4, #136]	; 0x88
   15684:	adds	r0, r0, #1
   15688:	adc	r1, r1, #0
   1568c:	strd	r0, [r4, #136]	; 0x88
   15690:	ldr	r0, [sl]
   15694:	bl	13154 <next@@Base>
   15698:	mov	r7, r0
   1569c:	ldr	r0, [r0]
   156a0:	cmp	r0, #6
   156a4:	mov	r1, #48	; 0x30
   156a8:	movwne	r1, #40	; 0x28
   156ac:	mov	r2, r4
   156b0:	ldr	r1, [r2, r1]!
   156b4:	adds	r1, r1, #1
   156b8:	str	r1, [r2]
   156bc:	ldr	r1, [r2, #4]
   156c0:	adc	r1, r1, #0
   156c4:	str	r1, [r2, #4]
   156c8:	cmp	r0, #6
   156cc:	mov	r8, r5
   156d0:	bne	155a4 <read_body@@Base+0xf4>
   156d4:	ldrd	r0, [r4, #144]	; 0x90
   156d8:	adds	r0, r0, #1
   156dc:	adc	r1, r1, #0
   156e0:	strd	r0, [r4, #144]	; 0x90
   156e4:	mov	r0, r7
   156e8:	bl	12b70 <free_token_cbra@@Base>
   156ec:	b	15720 <read_body@@Base+0x270>
   156f0:	movw	r0, #49372	; 0xc0dc
   156f4:	movt	r0, #2
   156f8:	movw	r1, #44112	; 0xac50
   156fc:	movt	r1, #1
   15700:	bl	1606c <read_boolean_unary_expression@@Base+0x150>
   15704:	ldrd	r0, [r4, #96]	; 0x60
   15708:	adds	r0, r0, #1
   1570c:	adc	r1, r1, #0
   15710:	strd	r0, [r4, #96]	; 0x60
   15714:	ldr	r0, [sl]
   15718:	mov	r1, r7
   1571c:	bl	12ff8 <push_back@@Base>
   15720:	ldrd	r0, [r4, #152]	; 0x98
   15724:	adds	r0, r0, #1
   15728:	adc	r1, r1, #0
   1572c:	strd	r0, [r4, #152]	; 0x98
   15730:	mov	r0, r6
   15734:	sub	sp, fp, #28
   15738:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001573c <read_return_expression@@Base>:
   1573c:	push	{r4, r5, r6, r7, fp, lr}
   15740:	add	fp, sp, #16
   15744:	mov	r4, r0
   15748:	movw	r7, #52416	; 0xccc0
   1574c:	movt	r7, #2
   15750:	ldrd	r0, [r7]
   15754:	adds	r0, r0, #1
   15758:	adc	r1, r1, #0
   1575c:	strd	r0, [r7]
   15760:	ldr	r0, [r4]
   15764:	bl	13154 <next@@Base>
   15768:	mov	r5, r0
   1576c:	ldr	r0, [r0]
   15770:	mov	r1, #16
   15774:	cmp	r0, #1
   15778:	movwne	r1, #8
   1577c:	mov	r2, r7
   15780:	ldr	r1, [r2, r1]!
   15784:	adds	r1, r1, #1
   15788:	str	r1, [r2]
   1578c:	ldr	r1, [r2, #4]
   15790:	adc	r1, r1, #0
   15794:	str	r1, [r2, #4]
   15798:	cmp	r0, #1
   1579c:	beq	157b8 <read_return_expression@@Base+0x7c>
   157a0:	ldrd	r0, [r7, #24]
   157a4:	adds	r0, r0, #1
   157a8:	adc	r1, r1, #0
   157ac:	strd	r0, [r7, #24]
   157b0:	mov	r5, #0
   157b4:	b	15850 <read_return_expression@@Base+0x114>
   157b8:	mov	r0, #12
   157bc:	bl	11fa0 <malloc@plt>
   157c0:	mov	r6, r0
   157c4:	ldr	r1, [r5, #4]
   157c8:	bl	145b8 <init_node_int@@Base>
   157cc:	mov	r0, r5
   157d0:	bl	12a80 <free_token_int_value@@Base>
   157d4:	mov	r0, #12
   157d8:	bl	11fa0 <malloc@plt>
   157dc:	mov	r5, r0
   157e0:	mov	r1, r6
   157e4:	bl	14648 <init_node_return@@Base>
   157e8:	ldr	r0, [r4]
   157ec:	bl	13154 <next@@Base>
   157f0:	ldr	r1, [r0]
   157f4:	mov	r2, #40	; 0x28
   157f8:	cmp	r1, #8
   157fc:	movwne	r2, #32
   15800:	mov	r3, r7
   15804:	ldr	r2, [r3, r2]!
   15808:	adds	r2, r2, #1
   1580c:	str	r2, [r3]
   15810:	ldr	r2, [r3, #4]
   15814:	adc	r2, r2, #0
   15818:	str	r2, [r3, #4]
   1581c:	cmp	r1, #8
   15820:	beq	1583c <read_return_expression@@Base+0x100>
   15824:	ldrd	r0, [r7, #48]	; 0x30
   15828:	adds	r0, r0, #1
   1582c:	adc	r1, r1, #0
   15830:	strd	r0, [r7, #48]	; 0x30
   15834:	mov	r5, #0
   15838:	b	15850 <read_return_expression@@Base+0x114>
   1583c:	ldrd	r2, [r7, #56]	; 0x38
   15840:	adds	r2, r2, #1
   15844:	adc	r3, r3, #0
   15848:	strd	r2, [r7, #56]	; 0x38
   1584c:	bl	12bd0 <free_token_semicolon@@Base>
   15850:	ldrd	r0, [r7, #64]	; 0x40
   15854:	adds	r0, r0, #1
   15858:	adc	r1, r1, #0
   1585c:	strd	r0, [r7, #64]	; 0x40
   15860:	mov	r0, r5
   15864:	pop	{r4, r5, r6, r7, fp, pc}

00015868 <read_if_statement@@Base>:
   15868:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1586c:	add	fp, sp, #24
   15870:	mov	r4, r0
   15874:	movw	r5, #52496	; 0xcd10
   15878:	movt	r5, #2
   1587c:	ldrd	r0, [r5]
   15880:	adds	r0, r0, #1
   15884:	adc	r1, r1, #0
   15888:	strd	r0, [r5]
   1588c:	ldr	r0, [r4]
   15890:	bl	13154 <next@@Base>
   15894:	ldr	r1, [r0]
   15898:	mov	r2, #16
   1589c:	cmp	r1, #3
   158a0:	movwne	r2, #8
   158a4:	mov	r3, r5
   158a8:	ldr	r2, [r3, r2]!
   158ac:	adds	r2, r2, #1
   158b0:	str	r2, [r3]
   158b4:	ldr	r2, [r3, #4]
   158b8:	adc	r2, r2, #0
   158bc:	str	r2, [r3, #4]
   158c0:	cmp	r1, #3
   158c4:	beq	158e0 <read_if_statement@@Base+0x78>
   158c8:	ldrd	r0, [r5, #24]
   158cc:	adds	r0, r0, #1
   158d0:	adc	r1, r1, #0
   158d4:	strd	r0, [r5, #24]
   158d8:	mov	r7, #0
   158dc:	b	159bc <read_if_statement@@Base+0x154>
   158e0:	bl	12ae0 <free_token_opar@@Base>
   158e4:	mov	r0, r4
   158e8:	bl	159d4 <read_boolean_expression@@Base>
   158ec:	mov	r8, r0
   158f0:	mov	r0, r4
   158f4:	bl	154b0 <read_body@@Base>
   158f8:	mov	r6, r0
   158fc:	ldr	r0, [r4]
   15900:	bl	13154 <next@@Base>
   15904:	mov	r1, r0
   15908:	ldr	r0, [r0]
   1590c:	mov	r2, #40	; 0x28
   15910:	cmp	r0, #11
   15914:	movweq	r2, #32
   15918:	mov	r3, r5
   1591c:	ldr	r2, [r3, r2]!
   15920:	adds	r2, r2, #1
   15924:	str	r2, [r3]
   15928:	ldr	r2, [r3, #4]
   1592c:	adc	r2, r2, #0
   15930:	str	r2, [r3, #4]
   15934:	cmp	r0, #11
   15938:	bne	1596c <read_if_statement@@Base+0x104>
   1593c:	ldr	r0, [r5, #48]	; 0x30
   15940:	ldr	r3, [r5, #52]	; 0x34
   15944:	adds	r0, r0, #1
   15948:	adc	r3, r3, #0
   1594c:	str	r0, [r5, #48]	; 0x30
   15950:	str	r3, [r5, #52]	; 0x34
   15954:	mov	r0, r1
   15958:	bl	12c60 <free_token_else@@Base>
   1595c:	mov	r0, r4
   15960:	bl	154b0 <read_body@@Base>
   15964:	mov	r4, r0
   15968:	b	15990 <read_if_statement@@Base+0x128>
   1596c:	ldr	r0, [r5, #56]	; 0x38
   15970:	ldr	r3, [r5, #60]	; 0x3c
   15974:	adds	r0, r0, #1
   15978:	adc	r3, r3, #0
   1597c:	str	r0, [r5, #56]	; 0x38
   15980:	str	r3, [r5, #60]	; 0x3c
   15984:	ldr	r0, [r4]
   15988:	bl	12ff8 <push_back@@Base>
   1598c:	mov	r4, #0
   15990:	ldrd	r0, [r5, #64]	; 0x40
   15994:	adds	r0, r0, #1
   15998:	adc	r1, r1, #0
   1599c:	strd	r0, [r5, #64]	; 0x40
   159a0:	mov	r0, #20
   159a4:	bl	11fa0 <malloc@plt>
   159a8:	mov	r7, r0
   159ac:	mov	r1, r8
   159b0:	mov	r2, r6
   159b4:	mov	r3, r4
   159b8:	bl	1468c <init_node_if@@Base>
   159bc:	ldrd	r0, [r5, #72]	; 0x48
   159c0:	adds	r0, r0, #1
   159c4:	adc	r1, r1, #0
   159c8:	strd	r0, [r5, #72]	; 0x48
   159cc:	mov	r0, r7
   159d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000159d4 <read_boolean_expression@@Base>:
   159d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   159d8:	add	fp, sp, #28
   159dc:	sub	sp, sp, #12
   159e0:	mov	r4, r0
   159e4:	movw	r8, #52576	; 0xcd60
   159e8:	movt	r8, #2
   159ec:	ldm	r8, {r0, r1, r2, r3}
   159f0:	adds	r0, r0, #1
   159f4:	adc	r1, r1, #0
   159f8:	adds	r2, r2, #1
   159fc:	adc	r3, r3, #0
   15a00:	stm	r8, {r0, r1, r2, r3}
   15a04:	mov	r5, #0
   15a08:	str	r5, [sp, #8]
   15a0c:	ldr	r0, [r4]
   15a10:	bl	13154 <next@@Base>
   15a14:	mov	r6, r0
   15a18:	ldr	r0, [r0]
   15a1c:	mov	r1, #24
   15a20:	cmp	r0, #4
   15a24:	movwne	r1, #16
   15a28:	mov	r2, r8
   15a2c:	ldr	r1, [r2, r1]!
   15a30:	adds	r1, r1, #1
   15a34:	str	r1, [r2]
   15a38:	ldr	r1, [r2, #4]
   15a3c:	adc	r1, r1, #0
   15a40:	str	r1, [r2, #4]
   15a44:	cmp	r0, #4
   15a48:	beq	15b7c <read_boolean_expression@@Base+0x1a8>
   15a4c:	mov	r9, #0
   15a50:	movw	sl, #49376	; 0xc0e0
   15a54:	movt	sl, #2
   15a58:	movw	r1, #44124	; 0xac5c
   15a5c:	movt	r1, #1
   15a60:	add	r1, r1, #8
   15a64:	str	r1, [sp, #4]
   15a68:	mov	r5, #0
   15a6c:	str	r9, [sl]
   15a70:	cmp	r0, #12
   15a74:	beq	15afc <read_boolean_expression@@Base+0x128>
   15a78:	cmp	r0, #3
   15a7c:	beq	15abc <read_boolean_expression@@Base+0xe8>
   15a80:	cmp	r0, #1
   15a84:	bne	15ba0 <read_boolean_expression@@Base+0x1cc>
   15a88:	movw	r0, #44124	; 0xac5c
   15a8c:	movt	r0, #1
   15a90:	add	r1, r0, #4
   15a94:	mov	r0, sl
   15a98:	bl	1606c <read_boolean_unary_expression@@Base+0x150>
   15a9c:	ldrd	r0, [r8, #64]	; 0x40
   15aa0:	adds	r0, r0, #1
   15aa4:	adc	r1, r1, #0
   15aa8:	strd	r0, [r8, #64]	; 0x40
   15aac:	ldr	r0, [r4]
   15ab0:	mov	r1, r6
   15ab4:	bl	12ff8 <push_back@@Base>
   15ab8:	b	15ae0 <read_boolean_expression@@Base+0x10c>
   15abc:	movw	r0, #44124	; 0xac5c
   15ac0:	movt	r0, #1
   15ac4:	add	r1, r0, #12
   15ac8:	mov	r0, sl
   15acc:	bl	1606c <read_boolean_unary_expression@@Base+0x150>
   15ad0:	ldrd	r0, [r8, #80]	; 0x50
   15ad4:	adds	r0, r0, #1
   15ad8:	adc	r1, r1, #0
   15adc:	strd	r0, [r8, #80]	; 0x50
   15ae0:	mov	r0, r4
   15ae4:	mov	r1, r5
   15ae8:	add	r2, sp, #8
   15aec:	mov	r3, r7
   15af0:	bl	15bdc <read_single_boolean_expression@@Base>
   15af4:	mov	r5, r0
   15af8:	b	15b2c <read_boolean_expression@@Base+0x158>
   15afc:	mov	r0, sl
   15b00:	ldr	r1, [sp, #4]
   15b04:	bl	1606c <read_boolean_unary_expression@@Base+0x150>
   15b08:	ldrd	r0, [r8, #72]	; 0x48
   15b0c:	adds	r0, r0, #1
   15b10:	adc	r1, r1, #0
   15b14:	strd	r0, [r8, #72]	; 0x48
   15b18:	mov	r0, r6
   15b1c:	bl	14c80 <get_boolean_op_value@@Base>
   15b20:	mov	r7, r0
   15b24:	mov	r0, #1
   15b28:	str	r0, [sp, #8]
   15b2c:	ldrd	r0, [r8, #88]	; 0x58
   15b30:	adds	r0, r0, #1
   15b34:	adc	r1, r1, #0
   15b38:	strd	r0, [r8, #88]	; 0x58
   15b3c:	ldr	r0, [r4]
   15b40:	bl	13154 <next@@Base>
   15b44:	mov	r6, r0
   15b48:	ldr	r0, [r0]
   15b4c:	cmp	r0, #4
   15b50:	mov	r1, #24
   15b54:	movwne	r1, #16
   15b58:	mov	r2, r8
   15b5c:	ldr	r1, [r2, r1]!
   15b60:	adds	r1, r1, #1
   15b64:	str	r1, [r2]
   15b68:	ldr	r1, [r2, #4]
   15b6c:	adc	r1, r1, #0
   15b70:	str	r1, [r2, #4]
   15b74:	cmp	r0, #4
   15b78:	bne	15a6c <read_boolean_expression@@Base+0x98>
   15b7c:	ldrd	r0, [r8, #96]	; 0x60
   15b80:	adds	r0, r0, #1
   15b84:	adc	r1, r1, #0
   15b88:	strd	r0, [r8, #96]	; 0x60
   15b8c:	mov	r0, r6
   15b90:	bl	12b10 <free_token_cpar@@Base>
   15b94:	mov	r0, r5
   15b98:	sub	sp, fp, #28
   15b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ba0:	movw	r0, #49376	; 0xc0e0
   15ba4:	movt	r0, #2
   15ba8:	movw	r1, #44124	; 0xac5c
   15bac:	movt	r1, #1
   15bb0:	bl	1606c <read_boolean_unary_expression@@Base+0x150>
   15bb4:	movw	r0, #49416	; 0xc108
   15bb8:	movt	r0, #2
   15bbc:	ldr	r3, [r0]
   15bc0:	movw	r0, #43973	; 0xabc5
   15bc4:	movt	r0, #1
   15bc8:	mov	r1, #33	; 0x21
   15bcc:	mov	r2, #1
   15bd0:	bl	11f7c <fwrite@plt>
   15bd4:	mov	r0, #1
   15bd8:	bl	11fdc <exit@plt>

00015bdc <read_single_boolean_expression@@Base>:
   15bdc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15be0:	add	fp, sp, #24
   15be4:	mov	r8, r3
   15be8:	mov	r4, r2
   15bec:	movw	r5, #52688	; 0xcdd0
   15bf0:	movt	r5, #2
   15bf4:	ldrd	r2, [r5]
   15bf8:	adds	r2, r2, #1
   15bfc:	adc	r3, r3, #0
   15c00:	strd	r2, [r5]
   15c04:	mov	r2, #16
   15c08:	cmp	r1, #0
   15c0c:	movweq	r2, #8
   15c10:	mov	r3, r5
   15c14:	ldr	r2, [r3, r2]!
   15c18:	adds	r2, r2, #1
   15c1c:	str	r2, [r3]
   15c20:	ldr	r2, [r3, #4]
   15c24:	adc	r2, r2, #0
   15c28:	str	r2, [r3, #4]
   15c2c:	cmp	r1, #0
   15c30:	beq	15ca8 <read_single_boolean_expression@@Base+0xcc>
   15c34:	ldr	r1, [r4]
   15c38:	mov	r2, #40	; 0x28
   15c3c:	cmp	r1, #0
   15c40:	movwne	r2, #32
   15c44:	mov	r3, r5
   15c48:	ldr	r2, [r3, r2]!
   15c4c:	adds	r2, r2, #1
   15c50:	str	r2, [r3]
   15c54:	ldr	r2, [r3, #4]
   15c58:	adc	r2, r2, #0
   15c5c:	str	r2, [r3, #4]
   15c60:	cmp	r1, #0
   15c64:	beq	15cd8 <read_single_boolean_expression@@Base+0xfc>
   15c68:	ldrd	r2, [r5, #48]	; 0x30
   15c6c:	adds	r2, r2, #1
   15c70:	adc	r3, r3, #0
   15c74:	strd	r2, [r5, #48]	; 0x30
   15c78:	bl	15d00 <read_boolean_binary_expression@@Base>
   15c7c:	mov	r7, r0
   15c80:	mov	r0, #20
   15c84:	bl	11fa0 <malloc@plt>
   15c88:	mov	r6, r0
   15c8c:	mov	r9, #0
   15c90:	mov	r1, r8
   15c94:	mov	r2, #0
   15c98:	mov	r3, r7
   15c9c:	bl	146e0 <init_node_boolean_operator@@Base>
   15ca0:	str	r9, [r4]
   15ca4:	b	15cc0 <read_single_boolean_expression@@Base+0xe4>
   15ca8:	ldrd	r2, [r5, #24]
   15cac:	adds	r2, r2, #1
   15cb0:	adc	r3, r3, #0
   15cb4:	strd	r2, [r5, #24]
   15cb8:	bl	15d00 <read_boolean_binary_expression@@Base>
   15cbc:	mov	r6, r0
   15cc0:	ldrd	r0, [r5, #56]	; 0x38
   15cc4:	adds	r0, r0, #1
   15cc8:	adc	r1, r1, #0
   15ccc:	strd	r0, [r5, #56]	; 0x38
   15cd0:	mov	r0, r6
   15cd4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15cd8:	mov	r0, #4
   15cdc:	ldr	r2, [r0]
   15ce0:	movw	r0, #49416	; 0xc108
   15ce4:	movt	r0, #2
   15ce8:	ldr	r0, [r0]
   15cec:	movw	r1, #44007	; 0xabe7
   15cf0:	movt	r1, #1
   15cf4:	bl	1200c <fprintf@plt>
   15cf8:	mov	r0, #1
   15cfc:	bl	11fdc <exit@plt>

00015d00 <read_boolean_binary_expression@@Base>:
   15d00:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15d04:	add	fp, sp, #24
   15d08:	mov	r5, r0
   15d0c:	movw	r4, #52752	; 0xce10
   15d10:	movt	r4, #2
   15d14:	ldrd	r0, [r4]
   15d18:	adds	r0, r0, #1
   15d1c:	adc	r1, r1, #0
   15d20:	strd	r0, [r4]
   15d24:	ldr	r0, [r5]
   15d28:	bl	13154 <next@@Base>
   15d2c:	mov	r6, r0
   15d30:	ldr	r0, [r0]
   15d34:	mov	r1, #16
   15d38:	cmp	r0, #1
   15d3c:	movwne	r1, #8
   15d40:	mov	r2, r4
   15d44:	ldr	r1, [r2, r1]!
   15d48:	adds	r1, r1, #1
   15d4c:	str	r1, [r2]
   15d50:	ldr	r1, [r2, #4]
   15d54:	adc	r1, r1, #0
   15d58:	str	r1, [r2, #4]
   15d5c:	cmp	r0, #1
   15d60:	beq	15dc0 <read_boolean_binary_expression@@Base+0xc0>
   15d64:	mov	r1, #32
   15d68:	cmp	r0, #12
   15d6c:	movweq	r1, #24
   15d70:	mov	r2, r4
   15d74:	ldr	r1, [r2, r1]!
   15d78:	adds	r1, r1, #1
   15d7c:	str	r1, [r2]
   15d80:	ldr	r1, [r2, #4]
   15d84:	adc	r1, r1, #0
   15d88:	str	r1, [r2, #4]
   15d8c:	cmp	r0, #12
   15d90:	bne	15e30 <read_boolean_binary_expression@@Base+0x130>
   15d94:	ldrd	r0, [r4, #40]	; 0x28
   15d98:	adds	r0, r0, #1
   15d9c:	adc	r1, r1, #0
   15da0:	strd	r0, [r4, #40]	; 0x28
   15da4:	ldr	r0, [r5]
   15da8:	mov	r1, r6
   15dac:	bl	12ff8 <push_back@@Base>
   15db0:	mov	r0, r5
   15db4:	bl	15f1c <read_boolean_unary_expression@@Base>
   15db8:	mov	r5, r0
   15dbc:	b	15f04 <read_boolean_binary_expression@@Base+0x204>
   15dc0:	mov	r0, #12
   15dc4:	bl	11fa0 <malloc@plt>
   15dc8:	mov	r8, r0
   15dcc:	ldr	r1, [r6, #4]
   15dd0:	bl	145b8 <init_node_int@@Base>
   15dd4:	mov	r0, r6
   15dd8:	bl	12a80 <free_token_int_value@@Base>
   15ddc:	ldr	r0, [r5]
   15de0:	bl	13154 <next@@Base>
   15de4:	mov	r7, r0
   15de8:	ldr	r0, [r0]
   15dec:	mov	r1, #64	; 0x40
   15df0:	cmp	r0, #12
   15df4:	movwne	r1, #56	; 0x38
   15df8:	mov	r2, r4
   15dfc:	ldr	r1, [r2, r1]!
   15e00:	adds	r1, r1, #1
   15e04:	str	r1, [r2]
   15e08:	ldr	r1, [r2, #4]
   15e0c:	adc	r1, r1, #0
   15e10:	str	r1, [r2, #4]
   15e14:	cmp	r0, #12
   15e18:	beq	15e48 <read_boolean_binary_expression@@Base+0x148>
   15e1c:	ldrd	r0, [r4, #72]	; 0x48
   15e20:	adds	r0, r0, #1
   15e24:	adc	r1, r1, #0
   15e28:	strd	r0, [r4, #72]	; 0x48
   15e2c:	b	15eac <read_boolean_binary_expression@@Base+0x1ac>
   15e30:	ldrd	r0, [r4, #48]	; 0x30
   15e34:	adds	r0, r0, #1
   15e38:	adc	r1, r1, #0
   15e3c:	strd	r0, [r4, #48]	; 0x30
   15e40:	mov	r5, #0
   15e44:	b	15f04 <read_boolean_binary_expression@@Base+0x204>
   15e48:	mov	r0, r7
   15e4c:	bl	14c80 <get_boolean_op_value@@Base>
   15e50:	mov	r6, r0
   15e54:	mov	r0, r7
   15e58:	bl	12c90 <free_token_boolean_op@@Base>
   15e5c:	ldr	r0, [r5]
   15e60:	bl	13154 <next@@Base>
   15e64:	mov	r5, r0
   15e68:	ldr	r0, [r0]
   15e6c:	mov	r1, #88	; 0x58
   15e70:	cmp	r0, #1
   15e74:	movwne	r1, #80	; 0x50
   15e78:	mov	r2, r4
   15e7c:	ldr	r1, [r2, r1]!
   15e80:	adds	r1, r1, #1
   15e84:	str	r1, [r2]
   15e88:	ldr	r1, [r2, #4]
   15e8c:	adc	r1, r1, #0
   15e90:	str	r1, [r2, #4]
   15e94:	cmp	r0, #1
   15e98:	beq	15ebc <read_boolean_binary_expression@@Base+0x1bc>
   15e9c:	ldrd	r0, [r4, #96]	; 0x60
   15ea0:	adds	r0, r0, #1
   15ea4:	adc	r1, r1, #0
   15ea8:	strd	r0, [r4, #96]	; 0x60
   15eac:	mov	r0, r8
   15eb0:	bl	1473c <free_node@@Base>
   15eb4:	mov	r5, #0
   15eb8:	b	15f04 <read_boolean_binary_expression@@Base+0x204>
   15ebc:	ldrd	r0, [r4, #104]	; 0x68
   15ec0:	adds	r0, r0, #1
   15ec4:	adc	r1, r1, #0
   15ec8:	strd	r0, [r4, #104]	; 0x68
   15ecc:	mov	r0, #12
   15ed0:	bl	11fa0 <malloc@plt>
   15ed4:	mov	r7, r0
   15ed8:	ldr	r1, [r5, #4]
   15edc:	bl	145b8 <init_node_int@@Base>
   15ee0:	mov	r0, r5
   15ee4:	bl	12a80 <free_token_int_value@@Base>
   15ee8:	mov	r0, #20
   15eec:	bl	11fa0 <malloc@plt>
   15ef0:	mov	r5, r0
   15ef4:	mov	r1, r6
   15ef8:	mov	r2, r8
   15efc:	mov	r3, r7
   15f00:	bl	146e0 <init_node_boolean_operator@@Base>
   15f04:	ldrd	r0, [r4, #112]	; 0x70
   15f08:	adds	r0, r0, #1
   15f0c:	adc	r1, r1, #0
   15f10:	strd	r0, [r4, #112]	; 0x70
   15f14:	mov	r0, r5
   15f18:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00015f1c <read_boolean_unary_expression@@Base>:
   15f1c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15f20:	add	fp, sp, #24
   15f24:	mov	r6, r0
   15f28:	movw	r5, #52880	; 0xce90
   15f2c:	movt	r5, #2
   15f30:	ldrd	r0, [r5]
   15f34:	adds	r0, r0, #1
   15f38:	adc	r1, r1, #0
   15f3c:	strd	r0, [r5]
   15f40:	mov	r0, #20
   15f44:	bl	11fa0 <malloc@plt>
   15f48:	mov	r4, r0
   15f4c:	ldr	r0, [r6]
   15f50:	bl	13154 <next@@Base>
   15f54:	mov	r7, r0
   15f58:	ldr	r0, [r0]
   15f5c:	mov	r1, #16
   15f60:	cmp	r0, #12
   15f64:	movwne	r1, #8
   15f68:	mov	r2, r5
   15f6c:	ldr	r1, [r2, r1]!
   15f70:	adds	r1, r1, #1
   15f74:	str	r1, [r2]
   15f78:	ldr	r1, [r2, #4]
   15f7c:	adc	r1, r1, #0
   15f80:	str	r1, [r2, #4]
   15f84:	cmp	r0, #12
   15f88:	beq	15fa0 <read_boolean_unary_expression@@Base+0x84>
   15f8c:	ldrd	r0, [r5, #24]
   15f90:	adds	r0, r0, #1
   15f94:	adc	r1, r1, #0
   15f98:	strd	r0, [r5, #24]
   15f9c:	b	16004 <read_boolean_unary_expression@@Base+0xe8>
   15fa0:	mov	r0, r7
   15fa4:	bl	14c80 <get_boolean_op_value@@Base>
   15fa8:	mov	r8, r0
   15fac:	mov	r0, r7
   15fb0:	bl	12c90 <free_token_boolean_op@@Base>
   15fb4:	ldr	r0, [r6]
   15fb8:	bl	13154 <next@@Base>
   15fbc:	mov	r6, r0
   15fc0:	ldr	r0, [r0]
   15fc4:	mov	r1, #40	; 0x28
   15fc8:	cmp	r0, #1
   15fcc:	movwne	r1, #32
   15fd0:	mov	r2, r5
   15fd4:	ldr	r1, [r2, r1]!
   15fd8:	adds	r1, r1, #1
   15fdc:	str	r1, [r2]
   15fe0:	ldr	r1, [r2, #4]
   15fe4:	adc	r1, r1, #0
   15fe8:	str	r1, [r2, #4]
   15fec:	cmp	r0, #1
   15ff0:	beq	16014 <read_boolean_unary_expression@@Base+0xf8>
   15ff4:	ldrd	r0, [r5, #48]	; 0x30
   15ff8:	adds	r0, r0, #1
   15ffc:	adc	r1, r1, #0
   16000:	strd	r0, [r5, #48]	; 0x30
   16004:	mov	r0, r4
   16008:	bl	14be8 <free_node_boolean_operator@@Base>
   1600c:	mov	r4, #0
   16010:	b	16054 <read_boolean_unary_expression@@Base+0x138>
   16014:	ldrd	r0, [r5, #56]	; 0x38
   16018:	adds	r0, r0, #1
   1601c:	adc	r1, r1, #0
   16020:	strd	r0, [r5, #56]	; 0x38
   16024:	mov	r0, #12
   16028:	bl	11fa0 <malloc@plt>
   1602c:	mov	r7, r0
   16030:	ldr	r1, [r6, #4]
   16034:	bl	145b8 <init_node_int@@Base>
   16038:	mov	r0, r6
   1603c:	bl	12a80 <free_token_int_value@@Base>
   16040:	mov	r0, r4
   16044:	mov	r1, r8
   16048:	mov	r2, r7
   1604c:	mov	r3, #0
   16050:	bl	146e0 <init_node_boolean_operator@@Base>
   16054:	ldrd	r0, [r5, #64]	; 0x40
   16058:	adds	r0, r0, #1
   1605c:	adc	r1, r1, #0
   16060:	strd	r0, [r5, #64]	; 0x40
   16064:	mov	r0, r4
   16068:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1606c:	ldr	r0, [r0]
   16070:	cmn	r0, #1
   16074:	ldrne	r0, [r1, r0, lsl #2]
   16078:	cmpne	r0, #0
   1607c:	bne	16084 <read_boolean_unary_expression@@Base+0x168>
   16080:	bx	lr
   16084:	ldrd	r2, [r0]
   16088:	adds	r2, r2, #1
   1608c:	adc	r3, r3, #0
   16090:	strd	r2, [r0]
   16094:	bx	lr
   16098:	push	{r4, r5, r6, lr}
   1609c:	sub	sp, sp, #8
   160a0:	movw	r0, #44464	; 0xadb0
   160a4:	movt	r0, #1
   160a8:	movw	r1, #40711	; 0x9f07
   160ac:	movt	r1, #1
   160b0:	movw	r2, #27576	; 0x6bb8
   160b4:	movt	r2, #51930	; 0xcada
   160b8:	bl	16ec4 <__generate_code_for_binary_boolean_expression@@Base+0x490>
   160bc:	movw	r0, #44368	; 0xad50
   160c0:	movt	r0, #1
   160c4:	add	r4, r0, #4
   160c8:	mov	r5, #0
   160cc:	movw	r6, #44144	; 0xac70
   160d0:	movt	r6, #1
   160d4:	mov	r3, r6
   160d8:	ldr	r0, [r3, r5]!
   160dc:	ldr	r1, [r3, #16]
   160e0:	str	r1, [sp]
   160e4:	ldmib	r3, {r1, r2}
   160e8:	ldrb	r3, [r3, #12]
   160ec:	bl	17628 <__generate_code_for_binary_boolean_expression@@Base+0xbf4>
   160f0:	ldrd	r0, [r4, #-4]
   160f4:	bl	17edc <__generate_code_for_binary_boolean_expression@@Base+0x14a8>
   160f8:	add	r5, r5, #20
   160fc:	add	r4, r4, #8
   16100:	cmp	r5, #220	; 0xdc
   16104:	bne	160d4 <read_boolean_unary_expression@@Base+0x1b8>
   16108:	bl	18658 <__generate_code_for_binary_boolean_expression@@Base+0x1c24>
   1610c:	add	sp, sp, #8
   16110:	pop	{r4, r5, r6, lr}
   16114:	b	193c4 <__generate_code_for_binary_boolean_expression@@Base+0x2990>
   16118:	push	{r4, r5, fp, lr}
   1611c:	vpush	{d8-d9}
   16120:	bl	16098 <read_boolean_unary_expression@@Base+0x17c>
   16124:	vmov.i32	q4, #0	; 0x00000000
   16128:	movw	r0, #52096	; 0xcb80
   1612c:	movt	r0, #2
   16130:	vst1.64	{d8-d9}, [r0]
   16134:	movw	r0, #52080	; 0xcb70
   16138:	movt	r0, #2
   1613c:	vst1.64	{d8-d9}, [r0]
   16140:	movw	r0, #52112	; 0xcb90
   16144:	movt	r0, #2
   16148:	vst1.64	{d8-d9}, [r0]
   1614c:	movw	r0, #52128	; 0xcba0
   16150:	movt	r0, #2
   16154:	add	r1, r0, #96	; 0x60
   16158:	vst1.64	{d8-d9}, [r1 :128]
   1615c:	add	r1, r0, #80	; 0x50
   16160:	vst1.64	{d8-d9}, [r1 :128]
   16164:	add	r1, r0, #64	; 0x40
   16168:	vst1.64	{d8-d9}, [r1 :128]
   1616c:	add	r1, r0, #48	; 0x30
   16170:	vst1.64	{d8-d9}, [r1 :128]
   16174:	add	r1, r0, #32
   16178:	vst1.64	{d8-d9}, [r1 :128]
   1617c:	add	r1, r0, #16
   16180:	vst1.64	{d8-d9}, [r1 :128]
   16184:	mov	r4, #0
   16188:	str	r4, [r0, #112]	; 0x70
   1618c:	mov	r5, #116	; 0x74
   16190:	vst1.64	{d8-d9}, [r0 :128], r5
   16194:	str	r4, [r0]
   16198:	movw	r0, #52256	; 0xcc20
   1619c:	movt	r0, #2
   161a0:	mov	r1, #0
   161a4:	mov	r2, #160	; 0xa0
   161a8:	bl	1203c <memset@plt>
   161ac:	movw	r1, #52576	; 0xcd60
   161b0:	movt	r1, #2
   161b4:	add	r0, r1, #80	; 0x50
   161b8:	vst1.64	{d8-d9}, [r0 :128]
   161bc:	add	r0, r1, #64	; 0x40
   161c0:	vst1.64	{d8-d9}, [r0 :128]
   161c4:	add	r0, r1, #48	; 0x30
   161c8:	vst1.64	{d8-d9}, [r0 :128]
   161cc:	add	r0, r1, #32
   161d0:	vst1.64	{d8-d9}, [r0 :128]
   161d4:	add	r0, r1, #16
   161d8:	vst1.64	{d8-d9}, [r0 :128]
   161dc:	movw	r0, #52496	; 0xcd10
   161e0:	movt	r0, #2
   161e4:	add	r2, r0, #48	; 0x30
   161e8:	vst1.64	{d8-d9}, [r2 :128]
   161ec:	add	r2, r0, #32
   161f0:	vst1.64	{d8-d9}, [r2 :128]
   161f4:	add	r2, r0, #16
   161f8:	vst1.64	{d8-d9}, [r2 :128]
   161fc:	movw	r2, #52416	; 0xccc0
   16200:	movt	r2, #2
   16204:	str	r4, [r2, #64]	; 0x40
   16208:	add	r3, r2, #48	; 0x30
   1620c:	vst1.64	{d8-d9}, [r3 :128]
   16210:	add	r3, r2, #32
   16214:	vst1.64	{d8-d9}, [r3 :128]
   16218:	add	r3, r2, #16
   1621c:	vst1.64	{d8-d9}, [r3 :128]
   16220:	str	r4, [r1, #96]	; 0x60
   16224:	mov	r3, #64	; 0x40
   16228:	vst1.64	{d8-d9}, [r0 :128], r3
   1622c:	vst1.64	{d8-d9}, [r0 :128]
   16230:	mov	r0, #68	; 0x44
   16234:	vst1.64	{d8-d9}, [r2 :128], r0
   16238:	str	r4, [r2]
   1623c:	mov	r2, #100	; 0x64
   16240:	vst1.64	{d8-d9}, [r1 :128], r2
   16244:	str	r4, [r1]
   16248:	movw	r1, #52688	; 0xcdd0
   1624c:	movt	r1, #2
   16250:	add	r2, r1, #32
   16254:	vst1.64	{d8-d9}, [r2 :128]
   16258:	add	r2, r1, #16
   1625c:	vst1.64	{d8-d9}, [r2 :128]
   16260:	mov	r2, #48	; 0x30
   16264:	vst1.64	{d8-d9}, [r1 :128], r2
   16268:	vst1.64	{d8-d9}, [r1 :128]
   1626c:	movw	r1, #52752	; 0xce10
   16270:	movt	r1, #2
   16274:	str	r4, [r1, #112]	; 0x70
   16278:	add	r2, r1, #96	; 0x60
   1627c:	vst1.64	{d8-d9}, [r2 :128]
   16280:	add	r2, r1, #80	; 0x50
   16284:	vst1.64	{d8-d9}, [r2 :128]
   16288:	add	r2, r1, #64	; 0x40
   1628c:	vst1.64	{d8-d9}, [r2 :128]
   16290:	add	r2, r1, #48	; 0x30
   16294:	vst1.64	{d8-d9}, [r2 :128]
   16298:	add	r2, r1, #32
   1629c:	vst1.64	{d8-d9}, [r2 :128]
   162a0:	add	r2, r1, #16
   162a4:	vst1.64	{d8-d9}, [r2 :128]
   162a8:	vst1.64	{d8-d9}, [r1 :128], r5
   162ac:	str	r4, [r1]
   162b0:	movw	r1, #52880	; 0xce90
   162b4:	movt	r1, #2
   162b8:	str	r4, [r1, #64]	; 0x40
   162bc:	add	r2, r1, #48	; 0x30
   162c0:	vst1.64	{d8-d9}, [r2 :128]
   162c4:	add	r2, r1, #32
   162c8:	vst1.64	{d8-d9}, [r2 :128]
   162cc:	add	r2, r1, #16
   162d0:	vst1.64	{d8-d9}, [r2 :128]
   162d4:	vst1.64	{d8-d9}, [r1 :128], r0
   162d8:	str	r4, [r1]
   162dc:	vpop	{d8-d9}
   162e0:	pop	{r4, r5, fp, pc}
   162e4:	movw	r0, #24728	; 0x6098
   162e8:	movt	r0, #1
   162ec:	movw	r1, #24856	; 0x6118
   162f0:	movt	r1, #1
   162f4:	b	19874 <__gcov_flush@@Base+0xb4>

000162f8 <init_generator@@Base>:
   162f8:	push	{r4, r5, fp, lr}
   162fc:	add	fp, sp, #8
   16300:	mov	ip, r2
   16304:	mov	r4, r0
   16308:	movw	r0, #52960	; 0xcee0
   1630c:	movt	r0, #2
   16310:	ldr	r3, [r0]
   16314:	ldmib	r0, {r2, lr}
   16318:	ldr	r5, [r0, #12]
   1631c:	adds	r3, r3, #1
   16320:	adc	r2, r2, #0
   16324:	adds	lr, lr, #1
   16328:	adc	r5, r5, #0
   1632c:	str	r3, [r0]
   16330:	stmib	r0, {r2, lr}
   16334:	str	r5, [r0, #12]
   16338:	str	r1, [r4]
   1633c:	movw	r1, #44782	; 0xaeee
   16340:	movt	r1, #1
   16344:	mov	r0, ip
   16348:	bl	11f10 <fopen@plt>
   1634c:	mov	r1, #0
   16350:	stmib	r4, {r0, r1}
   16354:	str	r1, [r4, #12]
   16358:	pop	{r4, r5, fp, pc}

0001635c <destroy_generator@@Base>:
   1635c:	push	{fp, lr}
   16360:	mov	fp, sp
   16364:	movw	r1, #52976	; 0xcef0
   16368:	movt	r1, #2
   1636c:	ldm	r1, {r2, r3, ip, lr}
   16370:	adds	r2, r2, #1
   16374:	adc	r3, r3, #0
   16378:	adds	ip, ip, #1
   1637c:	adc	lr, lr, #0
   16380:	stm	r1, {r2, r3, ip, lr}
   16384:	ldr	r0, [r0, #4]
   16388:	pop	{fp, lr}
   1638c:	b	12060 <fclose@plt>

00016390 <generate_code@@Base>:
   16390:	push	{r4, r5, fp, lr}
   16394:	add	fp, sp, #8
   16398:	mov	r4, r0
   1639c:	movw	r0, #52992	; 0xcf00
   163a0:	movt	r0, #2
   163a4:	ldm	r0, {r1, r2, r3, r5}
   163a8:	adds	r1, r1, #1
   163ac:	adc	r2, r2, #0
   163b0:	adds	r3, r3, #1
   163b4:	adc	r5, r5, #0
   163b8:	stm	r0, {r1, r2, r3, r5}
   163bc:	ldr	r0, [r4]
   163c0:	bl	152a8 <build_ast@@Base>
   163c4:	mov	r5, r0
   163c8:	mov	r0, r4
   163cc:	mov	r1, r5
   163d0:	bl	163e0 <__generate_code@@Base>
   163d4:	mov	r0, r5
   163d8:	pop	{r4, r5, fp, lr}
   163dc:	b	1473c <free_node@@Base>

000163e0 <__generate_code@@Base>:
   163e0:	push	{r4, r5, r6, sl, fp, lr}
   163e4:	add	fp, sp, #16
   163e8:	mov	r6, r1
   163ec:	mov	r5, r0
   163f0:	movw	r0, #53008	; 0xcf10
   163f4:	movt	r0, #2
   163f8:	ldm	r0, {r1, r2, r3, r4}
   163fc:	adds	r1, r1, #1
   16400:	adc	r2, r2, #0
   16404:	adds	r3, r3, #1
   16408:	adc	r4, r4, #0
   1640c:	stm	r0, {r1, r2, r3, r4}
   16410:	ldr	r3, [r5, #4]
   16414:	movw	r0, #44784	; 0xaef0
   16418:	movt	r0, #1
   1641c:	mov	r1, #21
   16420:	mov	r2, #1
   16424:	bl	11f7c <fwrite@plt>
   16428:	mov	r0, r5
   1642c:	mov	r1, r6
   16430:	pop	{r4, r5, r6, sl, fp, lr}
   16434:	b	16438 <__generate_code_for_main@@Base>

00016438 <__generate_code_for_main@@Base>:
   16438:	push	{r4, r5, fp, lr}
   1643c:	add	fp, sp, #8
   16440:	movw	ip, #53024	; 0xcf20
   16444:	movt	ip, #2
   16448:	ldrd	r4, [ip]
   1644c:	adds	r4, r4, #1
   16450:	adc	r5, r5, #0
   16454:	strd	r4, [ip]
   16458:	ldr	r3, [r1]
   1645c:	mov	r5, #16
   16460:	cmp	r3, #2
   16464:	movweq	r5, #8
   16468:	mov	r2, ip
   1646c:	ldr	r5, [r2, r5]!
   16470:	adds	r5, r5, #1
   16474:	str	r5, [r2]
   16478:	ldr	r5, [r2, #4]
   1647c:	adc	r5, r5, #0
   16480:	str	r5, [r2, #4]
   16484:	cmp	r3, #2
   16488:	bne	164a4 <__generate_code_for_main@@Base+0x6c>
   1648c:	ldrd	r2, [ip, #24]
   16490:	adds	r2, r2, #1
   16494:	adc	r3, r3, #0
   16498:	strd	r2, [ip, #24]
   1649c:	pop	{r4, r5, fp, lr}
   164a0:	b	164cc <__generate_code_for_function@@Base>
   164a4:	movw	r0, #49416	; 0xc108
   164a8:	movt	r0, #2
   164ac:	ldr	r3, [r0]
   164b0:	movw	r0, #44806	; 0xaf06
   164b4:	movt	r0, #1
   164b8:	mov	r1, #46	; 0x2e
   164bc:	mov	r2, #1
   164c0:	bl	11f7c <fwrite@plt>
   164c4:	mov	r0, #1
   164c8:	bl	11fdc <exit@plt>

000164cc <__generate_code_for_function@@Base>:
   164cc:	push	{r4, r5, r6, sl, fp, lr}
   164d0:	add	fp, sp, #16
   164d4:	mov	r6, r1
   164d8:	mov	r5, r0
   164dc:	movw	r0, #53056	; 0xcf40
   164e0:	movt	r0, #2
   164e4:	ldm	r0, {r1, r2, r3, r4}
   164e8:	adds	r1, r1, #1
   164ec:	adc	r2, r2, #0
   164f0:	adds	r3, r3, #1
   164f4:	adc	r4, r4, #0
   164f8:	stm	r0, {r1, r2, r3, r4}
   164fc:	ldr	r2, [r6, #8]
   16500:	ldr	r0, [r5, #4]
   16504:	movw	r1, #44853	; 0xaf35
   16508:	movt	r1, #1
   1650c:	bl	1200c <fprintf@plt>
   16510:	ldr	r1, [r6, #12]
   16514:	mov	r0, r5
   16518:	pop	{r4, r5, r6, sl, fp, lr}
   1651c:	b	16520 <__generate_code_for_body@@Base>

00016520 <__generate_code_for_body@@Base>:
   16520:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16524:	add	fp, sp, #28
   16528:	sub	sp, sp, #4
   1652c:	mov	r5, r1
   16530:	mov	r4, r0
   16534:	movw	r7, #53072	; 0xcf50
   16538:	movt	r7, #2
   1653c:	ldm	r7, {r0, r1, r2, r3}
   16540:	adds	r0, r0, #1
   16544:	adc	r1, r1, #0
   16548:	adds	r2, r2, #1
   1654c:	adc	r3, r3, #0
   16550:	stm	r7, {r0, r1, r2, r3}
   16554:	mov	r0, #24
   16558:	cmp	r5, #0
   1655c:	movwne	r0, #16
   16560:	mov	r1, r7
   16564:	ldr	r0, [r1, r0]!
   16568:	adds	r0, r0, #1
   1656c:	str	r0, [r1]
   16570:	ldr	r0, [r1, #4]
   16574:	adc	r0, r0, #0
   16578:	str	r0, [r1, #4]
   1657c:	cmp	r5, #0
   16580:	beq	16650 <__generate_code_for_body@@Base+0x130>
   16584:	movw	r6, #49380	; 0xc0e4
   16588:	movt	r6, #2
   1658c:	movw	r0, #45200	; 0xb090
   16590:	movt	r0, #1
   16594:	add	r8, r0, #8
   16598:	add	r9, r0, #4
   1659c:	mov	r0, #0
   165a0:	str	r0, [r6]
   165a4:	ldm	r5, {r0, sl}
   165a8:	cmp	r0, #4
   165ac:	beq	165e4 <__generate_code_for_body@@Base+0xc4>
   165b0:	cmp	r0, #3
   165b4:	bne	16668 <__generate_code_for_body@@Base+0x148>
   165b8:	mov	r0, r6
   165bc:	mov	r1, r9
   165c0:	bl	16cf0 <__generate_code_for_binary_boolean_expression@@Base+0x2bc>
   165c4:	ldrd	r0, [r7, #56]	; 0x38
   165c8:	adds	r0, r0, #1
   165cc:	adc	r1, r1, #0
   165d0:	strd	r0, [r7, #56]	; 0x38
   165d4:	mov	r0, r4
   165d8:	mov	r1, r5
   165dc:	bl	16820 <__generate_code_for_return@@Base>
   165e0:	b	1660c <__generate_code_for_body@@Base+0xec>
   165e4:	mov	r0, r6
   165e8:	mov	r1, r8
   165ec:	bl	16cf0 <__generate_code_for_binary_boolean_expression@@Base+0x2bc>
   165f0:	ldrd	r0, [r7, #64]	; 0x40
   165f4:	adds	r0, r0, #1
   165f8:	adc	r1, r1, #0
   165fc:	strd	r0, [r7, #64]	; 0x40
   16600:	mov	r0, r4
   16604:	mov	r1, r5
   16608:	bl	166a4 <__generate_code_for_if@@Base>
   1660c:	ldrd	r0, [r7, #72]	; 0x48
   16610:	adds	r0, r0, #1
   16614:	adc	r1, r1, #0
   16618:	strd	r0, [r7, #72]	; 0x48
   1661c:	cmp	sl, #0
   16620:	mov	r0, #24
   16624:	movwne	r0, #16
   16628:	mov	r1, r7
   1662c:	ldr	r0, [r1, r0]!
   16630:	adds	r0, r0, #1
   16634:	str	r0, [r1]
   16638:	ldr	r0, [r1, #4]
   1663c:	adc	r0, r0, #0
   16640:	str	r0, [r1, #4]
   16644:	cmp	sl, #0
   16648:	mov	r5, sl
   1664c:	bne	1659c <__generate_code_for_body@@Base+0x7c>
   16650:	ldrd	r0, [r7, #80]	; 0x50
   16654:	adds	r0, r0, #1
   16658:	adc	r1, r1, #0
   1665c:	strd	r0, [r7, #80]	; 0x50
   16660:	sub	sp, fp, #28
   16664:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16668:	movw	r0, #49380	; 0xc0e4
   1666c:	movt	r0, #2
   16670:	movw	r1, #45200	; 0xb090
   16674:	movt	r1, #1
   16678:	bl	16cf0 <__generate_code_for_binary_boolean_expression@@Base+0x2bc>
   1667c:	movw	r0, #49416	; 0xc108
   16680:	movt	r0, #2
   16684:	ldr	r3, [r0]
   16688:	movw	r0, #45115	; 0xb03b
   1668c:	movt	r0, #1
   16690:	mov	r1, #52	; 0x34
   16694:	mov	r2, #1
   16698:	bl	11f7c <fwrite@plt>
   1669c:	mov	r0, #1
   166a0:	bl	11fdc <exit@plt>

000166a4 <__generate_code_for_if@@Base>:
   166a4:	push	{r4, r5, r6, r8, r9, sl, fp, lr}
   166a8:	add	fp, sp, #24
   166ac:	mov	r5, r1
   166b0:	mov	r4, r0
   166b4:	movw	r6, #53168	; 0xcfb0
   166b8:	movt	r6, #2
   166bc:	ldrd	r0, [r6]
   166c0:	adds	r0, r0, #1
   166c4:	adc	r1, r1, #0
   166c8:	strd	r0, [r6]
   166cc:	ldrd	r8, [r4, #8]
   166d0:	adds	r0, r8, #1
   166d4:	adc	r1, r9, #0
   166d8:	strd	r0, [r4, #8]
   166dc:	ldr	r1, [r5, #8]
   166e0:	mov	r0, r4
   166e4:	mov	r2, r8
   166e8:	mov	r3, r9
   166ec:	bl	1677c <__generate_code_for_if_expression@@Base>
   166f0:	ldr	r1, [r5, #12]
   166f4:	mov	r0, r4
   166f8:	bl	16520 <__generate_code_for_body@@Base>
   166fc:	ldr	r0, [r4, #4]
   16700:	movw	r1, #44858	; 0xaf3a
   16704:	movt	r1, #1
   16708:	mov	r2, r8
   1670c:	mov	r3, r9
   16710:	bl	1200c <fprintf@plt>
   16714:	ldr	r1, [r5, #16]
   16718:	mov	r0, #16
   1671c:	cmp	r1, #0
   16720:	movwne	r0, #8
   16724:	mov	r2, r6
   16728:	ldr	r0, [r2, r0]!
   1672c:	adds	r0, r0, #1
   16730:	str	r0, [r2]
   16734:	ldr	r0, [r2, #4]
   16738:	adc	r0, r0, #0
   1673c:	str	r0, [r2, #4]
   16740:	cmp	r1, #0
   16744:	beq	16768 <__generate_code_for_if@@Base+0xc4>
   16748:	ldr	r0, [r6, #24]
   1674c:	ldr	r3, [r6, #28]
   16750:	adds	r0, r0, #1
   16754:	adc	r3, r3, #0
   16758:	str	r0, [r6, #24]
   1675c:	str	r3, [r6, #28]
   16760:	mov	r0, r4
   16764:	bl	16520 <__generate_code_for_body@@Base>
   16768:	ldrd	r0, [r6, #32]
   1676c:	adds	r0, r0, #1
   16770:	adc	r1, r1, #0
   16774:	strd	r0, [r6, #32]
   16778:	pop	{r4, r5, r6, r8, r9, sl, fp, pc}

0001677c <__generate_code_for_if_expression@@Base>:
   1677c:	push	{r4, r5, r6, r7, fp, lr}
   16780:	add	fp, sp, #16
   16784:	movw	r5, #53216	; 0xcfe0
   16788:	movt	r5, #2
   1678c:	ldrd	r6, [r5]
   16790:	adds	r6, r6, #1
   16794:	adc	r7, r7, #0
   16798:	strd	r6, [r5]
   1679c:	ldr	r6, [r1, #16]
   167a0:	cmp	r6, #8
   167a4:	mov	r7, r6
   167a8:	movwne	r7, #16
   167ac:	mov	r4, r5
   167b0:	ldr	r7, [r4, r7]!
   167b4:	adds	r7, r7, #1
   167b8:	str	r7, [r4]
   167bc:	ldr	r7, [r4, #4]
   167c0:	adc	r7, r7, #0
   167c4:	str	r7, [r4, #4]
   167c8:	cmp	r6, #8
   167cc:	bne	167f0 <__generate_code_for_if_expression@@Base+0x74>
   167d0:	ldr	r4, [r5, #24]
   167d4:	ldr	r7, [r5, #28]
   167d8:	adds	r4, r4, #1
   167dc:	adc	r7, r7, #0
   167e0:	str	r4, [r5, #24]
   167e4:	str	r7, [r5, #28]
   167e8:	bl	1693c <__generate_code_for_unary_boolean_expression@@Base>
   167ec:	b	1680c <__generate_code_for_if_expression@@Base+0x90>
   167f0:	ldr	r4, [r5, #32]
   167f4:	ldr	r7, [r5, #36]	; 0x24
   167f8:	adds	r4, r4, #1
   167fc:	adc	r7, r7, #0
   16800:	str	r4, [r5, #32]
   16804:	str	r7, [r5, #36]	; 0x24
   16808:	bl	16a34 <__generate_code_for_binary_boolean_expression@@Base>
   1680c:	ldrd	r0, [r5, #40]	; 0x28
   16810:	adds	r0, r0, #1
   16814:	adc	r1, r1, #0
   16818:	strd	r0, [r5, #40]	; 0x28
   1681c:	pop	{r4, r5, r6, r7, fp, pc}

00016820 <__generate_code_for_return@@Base>:
   16820:	push	{r4, r5, r6, sl, fp, lr}
   16824:	add	fp, sp, #16
   16828:	mov	r4, r0
   1682c:	movw	r6, #53264	; 0xd010
   16830:	movt	r6, #2
   16834:	ldm	r6, {r0, r3}
   16838:	adds	r0, r0, #1
   1683c:	adc	r3, r3, #0
   16840:	stm	r6, {r0, r3}
   16844:	ldr	r5, [r1, #8]
   16848:	ldr	r3, [r4, #4]
   1684c:	movw	r0, #44873	; 0xaf49
   16850:	movt	r0, #1
   16854:	mov	r1, #9
   16858:	mov	r2, #1
   1685c:	bl	11f7c <fwrite@plt>
   16860:	ldr	r0, [r5]
   16864:	mov	r1, #16
   16868:	cmp	r0, #1
   1686c:	movweq	r1, #8
   16870:	mov	r2, r6
   16874:	ldr	r1, [r2, r1]!
   16878:	adds	r1, r1, #1
   1687c:	str	r1, [r2]
   16880:	ldr	r1, [r2, #4]
   16884:	adc	r1, r1, #0
   16888:	str	r1, [r2, #4]
   1688c:	cmp	r0, #1
   16890:	bne	168cc <__generate_code_for_return@@Base+0xac>
   16894:	ldrd	r0, [r6, #24]
   16898:	adds	r0, r0, #1
   1689c:	adc	r1, r1, #0
   168a0:	strd	r0, [r6, #24]
   168a4:	mov	r0, r4
   168a8:	mov	r1, r5
   168ac:	bl	168f4 <__generate_code_for_int@@Base>
   168b0:	ldr	r3, [r4, #4]
   168b4:	movw	r0, #44921	; 0xaf79
   168b8:	movt	r0, #1
   168bc:	mov	r1, #8
   168c0:	mov	r2, #1
   168c4:	pop	{r4, r5, r6, sl, fp, lr}
   168c8:	b	11f7c <fwrite@plt>
   168cc:	movw	r0, #49416	; 0xc108
   168d0:	movt	r0, #2
   168d4:	ldr	r3, [r0]
   168d8:	movw	r0, #44883	; 0xaf53
   168dc:	movt	r0, #1
   168e0:	mov	r1, #37	; 0x25
   168e4:	mov	r2, #1
   168e8:	bl	11f7c <fwrite@plt>
   168ec:	mov	r0, #1
   168f0:	bl	11fdc <exit@plt>

000168f4 <__generate_code_for_int@@Base>:
   168f4:	push	{r4, sl, fp, lr}
   168f8:	add	fp, sp, #8
   168fc:	movw	r2, #53296	; 0xd030
   16900:	movt	r2, #2
   16904:	ldm	r2, {r3, ip, lr}
   16908:	ldr	r4, [r2, #12]
   1690c:	adds	r3, r3, #1
   16910:	adc	ip, ip, #0
   16914:	adds	lr, lr, #1
   16918:	adc	r4, r4, #0
   1691c:	stm	r2, {r3, ip, lr}
   16920:	str	r4, [r2, #12]
   16924:	ldr	r2, [r1, #8]
   16928:	ldr	r0, [r0, #4]
   1692c:	movw	r1, #44930	; 0xaf82
   16930:	movt	r1, #1
   16934:	pop	{r4, sl, fp, lr}
   16938:	b	1200c <fprintf@plt>

0001693c <__generate_code_for_unary_boolean_expression@@Base>:
   1693c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16940:	add	fp, sp, #24
   16944:	mov	r8, r3
   16948:	mov	r9, r2
   1694c:	mov	r7, r1
   16950:	mov	r6, r0
   16954:	movw	r5, #53312	; 0xd040
   16958:	movt	r5, #2
   1695c:	ldrd	r0, [r5]
   16960:	adds	r0, r0, #1
   16964:	adc	r1, r1, #0
   16968:	strd	r0, [r5]
   1696c:	ldr	r4, [r7, #8]
   16970:	ldr	r3, [r6, #4]
   16974:	movw	r0, #45103	; 0xb02f
   16978:	movt	r0, #1
   1697c:	mov	r1, #11
   16980:	mov	r2, #1
   16984:	bl	11f7c <fwrite@plt>
   16988:	ldr	r3, [r6, #4]
   1698c:	movw	r0, #44934	; 0xaf86
   16990:	movt	r0, #1
   16994:	mov	r1, #9
   16998:	mov	r2, #1
   1699c:	bl	11f7c <fwrite@plt>
   169a0:	mov	r0, r6
   169a4:	mov	r1, r4
   169a8:	bl	168f4 <__generate_code_for_int@@Base>
   169ac:	ldr	r0, [r7, #16]
   169b0:	cmp	r0, #8
   169b4:	mov	r1, r0
   169b8:	movwne	r1, #16
   169bc:	mov	r2, r5
   169c0:	ldr	r1, [r2, r1]!
   169c4:	adds	r1, r1, #1
   169c8:	str	r1, [r2]
   169cc:	ldr	r1, [r2, #4]
   169d0:	adc	r1, r1, #0
   169d4:	str	r1, [r2, #4]
   169d8:	cmp	r0, #8
   169dc:	bne	16a0c <__generate_code_for_unary_boolean_expression@@Base+0xd0>
   169e0:	ldrd	r0, [r5, #24]
   169e4:	adds	r0, r0, #1
   169e8:	adc	r1, r1, #0
   169ec:	strd	r0, [r5, #24]
   169f0:	ldr	r0, [r6, #4]
   169f4:	movw	r1, #44976	; 0xafb0
   169f8:	movt	r1, #1
   169fc:	mov	r2, r9
   16a00:	mov	r3, r8
   16a04:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   16a08:	b	1200c <fprintf@plt>
   16a0c:	movw	r0, #49416	; 0xc108
   16a10:	movt	r0, #2
   16a14:	ldr	r3, [r0]
   16a18:	movw	r0, #45071	; 0xb00f
   16a1c:	movt	r0, #1
   16a20:	mov	r1, #31
   16a24:	mov	r2, #1
   16a28:	bl	11f7c <fwrite@plt>
   16a2c:	mov	r0, #1
   16a30:	bl	11fdc <exit@plt>

00016a34 <__generate_code_for_binary_boolean_expression@@Base>:
   16a34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a38:	add	fp, sp, #28
   16a3c:	sub	sp, sp, #4
   16a40:	mov	r8, r3
   16a44:	mov	r9, r2
   16a48:	mov	r7, r1
   16a4c:	mov	r6, r0
   16a50:	movw	r0, #49384	; 0xc0e8
   16a54:	movt	r0, #2
   16a58:	mov	r1, #0
   16a5c:	str	r1, [r0]
   16a60:	movw	sl, #53344	; 0xd060
   16a64:	movt	sl, #2
   16a68:	ldrd	r0, [sl]
   16a6c:	adds	r0, r0, #1
   16a70:	adc	r1, r1, #0
   16a74:	strd	r0, [sl]
   16a78:	ldr	r5, [r7, #8]
   16a7c:	ldr	r4, [r7, #12]
   16a80:	ldr	r3, [r6, #4]
   16a84:	movw	r0, #44873	; 0xaf49
   16a88:	movt	r0, #1
   16a8c:	mov	r1, #9
   16a90:	mov	r2, #1
   16a94:	bl	11f7c <fwrite@plt>
   16a98:	mov	r0, r6
   16a9c:	mov	r1, r5
   16aa0:	bl	168f4 <__generate_code_for_int@@Base>
   16aa4:	ldr	r1, [r6, #4]
   16aa8:	mov	r0, #10
   16aac:	bl	1209c <fputc@plt>
   16ab0:	ldr	r3, [r6, #4]
   16ab4:	movw	r0, #44934	; 0xaf86
   16ab8:	movt	r0, #1
   16abc:	mov	r1, #9
   16ac0:	mov	r2, #1
   16ac4:	bl	11f7c <fwrite@plt>
   16ac8:	mov	r0, r6
   16acc:	mov	r1, r4
   16ad0:	bl	168f4 <__generate_code_for_int@@Base>
   16ad4:	ldr	r1, [r6, #4]
   16ad8:	mov	r0, #10
   16adc:	bl	1209c <fputc@plt>
   16ae0:	ldr	r3, [r6, #4]
   16ae4:	movw	r0, #44944	; 0xaf90
   16ae8:	movt	r0, #1
   16aec:	mov	r1, #12
   16af0:	mov	r2, #1
   16af4:	bl	11f7c <fwrite@plt>
   16af8:	ldr	r0, [r7, #16]
   16afc:	cmp	r0, #7
   16b00:	bhi	16cb4 <__generate_code_for_binary_boolean_expression@@Base+0x280>
   16b04:	add	r1, pc, #0
   16b08:	ldr	pc, [r1, r0, lsl #2]
   16b0c:	andeq	r6, r1, ip, lsr #22
   16b10:	muleq	r1, ip, fp
   16b14:	andeq	r6, r1, r4, ror #22
   16b18:	andeq	r6, r1, ip, lsl #24
   16b1c:	andeq	r6, r1, r4, lsl #25
   16b20:	andeq	r6, r1, r4, lsl #25
   16b24:	andeq	r6, r1, r4, asr #24
   16b28:	ldrdeq	r6, [r1], -r4
   16b2c:	movw	r0, #45216	; 0xb0a0
   16b30:	movt	r0, #1
   16b34:	add	r1, r0, #4
   16b38:	movw	r0, #49384	; 0xc0e8
   16b3c:	movt	r0, #2
   16b40:	bl	16cf0 <__generate_code_for_binary_boolean_expression@@Base+0x2bc>
   16b44:	ldrd	r0, [sl, #80]	; 0x50
   16b48:	adds	r0, r0, #1
   16b4c:	adc	r1, r1, #0
   16b50:	strd	r0, [sl, #80]	; 0x50
   16b54:	ldr	r0, [r6, #4]
   16b58:	movw	r1, #44957	; 0xaf9d
   16b5c:	movt	r1, #1
   16b60:	b	16c78 <__generate_code_for_binary_boolean_expression@@Base+0x244>
   16b64:	movw	r0, #45216	; 0xb0a0
   16b68:	movt	r0, #1
   16b6c:	add	r1, r0, #12
   16b70:	movw	r0, #49384	; 0xc0e8
   16b74:	movt	r0, #2
   16b78:	bl	16cf0 <__generate_code_for_binary_boolean_expression@@Base+0x2bc>
   16b7c:	ldrd	r0, [sl, #96]	; 0x60
   16b80:	adds	r0, r0, #1
   16b84:	adc	r1, r1, #0
   16b88:	strd	r0, [sl, #96]	; 0x60
   16b8c:	ldr	r0, [r6, #4]
   16b90:	movw	r1, #44995	; 0xafc3
   16b94:	movt	r1, #1
   16b98:	b	16c78 <__generate_code_for_binary_boolean_expression@@Base+0x244>
   16b9c:	movw	r0, #45216	; 0xb0a0
   16ba0:	movt	r0, #1
   16ba4:	add	r1, r0, #8
   16ba8:	movw	r0, #49384	; 0xc0e8
   16bac:	movt	r0, #2
   16bb0:	bl	16cf0 <__generate_code_for_binary_boolean_expression@@Base+0x2bc>
   16bb4:	ldrd	r0, [sl, #88]	; 0x58
   16bb8:	adds	r0, r0, #1
   16bbc:	adc	r1, r1, #0
   16bc0:	strd	r0, [sl, #88]	; 0x58
   16bc4:	ldr	r0, [r6, #4]
   16bc8:	movw	r1, #44976	; 0xafb0
   16bcc:	movt	r1, #1
   16bd0:	b	16c78 <__generate_code_for_binary_boolean_expression@@Base+0x244>
   16bd4:	movw	r0, #45216	; 0xb0a0
   16bd8:	movt	r0, #1
   16bdc:	add	r1, r0, #28
   16be0:	movw	r0, #49384	; 0xc0e8
   16be4:	movt	r0, #2
   16be8:	bl	16cf0 <__generate_code_for_binary_boolean_expression@@Base+0x2bc>
   16bec:	ldrd	r0, [sl, #120]	; 0x78
   16bf0:	adds	r0, r0, #1
   16bf4:	adc	r1, r1, #0
   16bf8:	strd	r0, [sl, #120]	; 0x78
   16bfc:	ldr	r0, [r6, #4]
   16c00:	movw	r1, #45052	; 0xaffc
   16c04:	movt	r1, #1
   16c08:	b	16c78 <__generate_code_for_binary_boolean_expression@@Base+0x244>
   16c0c:	movw	r0, #45216	; 0xb0a0
   16c10:	movt	r0, #1
   16c14:	add	r1, r0, #16
   16c18:	movw	r0, #49384	; 0xc0e8
   16c1c:	movt	r0, #2
   16c20:	bl	16cf0 <__generate_code_for_binary_boolean_expression@@Base+0x2bc>
   16c24:	ldrd	r0, [sl, #104]	; 0x68
   16c28:	adds	r0, r0, #1
   16c2c:	adc	r1, r1, #0
   16c30:	strd	r0, [sl, #104]	; 0x68
   16c34:	ldr	r0, [r6, #4]
   16c38:	movw	r1, #45014	; 0xafd6
   16c3c:	movt	r1, #1
   16c40:	b	16c78 <__generate_code_for_binary_boolean_expression@@Base+0x244>
   16c44:	movw	r0, #45216	; 0xb0a0
   16c48:	movt	r0, #1
   16c4c:	add	r1, r0, #24
   16c50:	movw	r0, #49384	; 0xc0e8
   16c54:	movt	r0, #2
   16c58:	bl	16cf0 <__generate_code_for_binary_boolean_expression@@Base+0x2bc>
   16c5c:	ldrd	r0, [sl, #112]	; 0x70
   16c60:	adds	r0, r0, #1
   16c64:	adc	r1, r1, #0
   16c68:	strd	r0, [sl, #112]	; 0x70
   16c6c:	ldr	r0, [r6, #4]
   16c70:	movw	r1, #45033	; 0xafe9
   16c74:	movt	r1, #1
   16c78:	mov	r2, r9
   16c7c:	mov	r3, r8
   16c80:	bl	1200c <fprintf@plt>
   16c84:	movw	r0, #45216	; 0xb0a0
   16c88:	movt	r0, #1
   16c8c:	add	r1, r0, #20
   16c90:	movw	r0, #49384	; 0xc0e8
   16c94:	movt	r0, #2
   16c98:	bl	16cf0 <__generate_code_for_binary_boolean_expression@@Base+0x2bc>
   16c9c:	ldrd	r0, [sl, #128]	; 0x80
   16ca0:	adds	r0, r0, #1
   16ca4:	adc	r1, r1, #0
   16ca8:	strd	r0, [sl, #128]	; 0x80
   16cac:	sub	sp, fp, #28
   16cb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cb4:	movw	r0, #49384	; 0xc0e8
   16cb8:	movt	r0, #2
   16cbc:	movw	r1, #45216	; 0xb0a0
   16cc0:	movt	r1, #1
   16cc4:	bl	16cf0 <__generate_code_for_binary_boolean_expression@@Base+0x2bc>
   16cc8:	movw	r0, #49416	; 0xc108
   16ccc:	movt	r0, #2
   16cd0:	ldr	r3, [r0]
   16cd4:	movw	r0, #45071	; 0xb00f
   16cd8:	movt	r0, #1
   16cdc:	mov	r1, #31
   16ce0:	mov	r2, #1
   16ce4:	bl	11f7c <fwrite@plt>
   16ce8:	mov	r0, #1
   16cec:	bl	11fdc <exit@plt>
   16cf0:	ldr	r0, [r0]
   16cf4:	cmn	r0, #1
   16cf8:	ldrne	r0, [r1, r0, lsl #2]
   16cfc:	cmpne	r0, #0
   16d00:	bne	16d08 <__generate_code_for_binary_boolean_expression@@Base+0x2d4>
   16d04:	bx	lr
   16d08:	ldrd	r2, [r0]
   16d0c:	adds	r2, r2, #1
   16d10:	adc	r3, r3, #0
   16d14:	strd	r2, [r0]
   16d18:	bx	lr
   16d1c:	push	{r4, r5, r6, lr}
   16d20:	sub	sp, sp, #8
   16d24:	movw	r0, #45632	; 0xb240
   16d28:	movt	r0, #1
   16d2c:	movw	r1, #40711	; 0x9f07
   16d30:	movt	r1, #1
   16d34:	movw	r2, #11716	; 0x2dc4
   16d38:	movt	r2, #2155	; 0x86b
   16d3c:	bl	16ec4 <__generate_code_for_binary_boolean_expression@@Base+0x490>
   16d40:	movw	r0, #45520	; 0xb1d0
   16d44:	movt	r0, #1
   16d48:	add	r4, r0, #4
   16d4c:	mov	r5, #0
   16d50:	movw	r6, #45248	; 0xb0c0
   16d54:	movt	r6, #1
   16d58:	mov	r3, r6
   16d5c:	ldr	r0, [r3, r5]!
   16d60:	ldr	r1, [r3, #16]
   16d64:	str	r1, [sp]
   16d68:	ldmib	r3, {r1, r2}
   16d6c:	ldrb	r3, [r3, #12]
   16d70:	bl	17628 <__generate_code_for_binary_boolean_expression@@Base+0xbf4>
   16d74:	ldrd	r0, [r4, #-4]
   16d78:	bl	17edc <__generate_code_for_binary_boolean_expression@@Base+0x14a8>
   16d7c:	add	r5, r5, #20
   16d80:	add	r4, r4, #8
   16d84:	cmp	r5, #260	; 0x104
   16d88:	bne	16d58 <__generate_code_for_binary_boolean_expression@@Base+0x324>
   16d8c:	bl	18658 <__generate_code_for_binary_boolean_expression@@Base+0x1c24>
   16d90:	add	sp, sp, #8
   16d94:	pop	{r4, r5, r6, lr}
   16d98:	b	193c4 <__generate_code_for_binary_boolean_expression@@Base+0x2990>
   16d9c:	push	{fp, lr}
   16da0:	bl	16d1c <__generate_code_for_binary_boolean_expression@@Base+0x2e8>
   16da4:	movw	r0, #53168	; 0xcfb0
   16da8:	movt	r0, #2
   16dac:	mov	r1, #0
   16db0:	vmov.i32	q8, #0	; 0x00000000
   16db4:	str	r1, [r0, #32]
   16db8:	add	r2, r0, #16
   16dbc:	vst1.64	{d16-d17}, [r2 :128]
   16dc0:	movw	r2, #53072	; 0xcf50
   16dc4:	movt	r2, #2
   16dc8:	str	r1, [r2, #80]	; 0x50
   16dcc:	add	r3, r2, #64	; 0x40
   16dd0:	vst1.64	{d16-d17}, [r3 :128]
   16dd4:	add	r3, r2, #48	; 0x30
   16dd8:	vst1.64	{d16-d17}, [r3 :128]
   16ddc:	add	r3, r2, #32
   16de0:	vst1.64	{d16-d17}, [r3 :128]
   16de4:	add	r3, r2, #16
   16de8:	vst1.64	{d16-d17}, [r3 :128]
   16dec:	movw	r3, #52976	; 0xcef0
   16df0:	movt	r3, #2
   16df4:	vst1.64	{d16-d17}, [r3]
   16df8:	movw	r3, #52960	; 0xcee0
   16dfc:	movt	r3, #2
   16e00:	vst1.64	{d16-d17}, [r3]
   16e04:	movw	r3, #52992	; 0xcf00
   16e08:	movt	r3, #2
   16e0c:	vst1.64	{d16-d17}, [r3]
   16e10:	movw	r3, #53008	; 0xcf10
   16e14:	movt	r3, #2
   16e18:	vst1.64	{d16-d17}, [r3]
   16e1c:	movw	r3, #53056	; 0xcf40
   16e20:	movt	r3, #2
   16e24:	vst1.64	{d16-d17}, [r3]
   16e28:	mov	r3, #36	; 0x24
   16e2c:	vst1.64	{d16-d17}, [r0 :128], r3
   16e30:	str	r1, [r0]
   16e34:	mov	r0, #84	; 0x54
   16e38:	vst1.64	{d16-d17}, [r2 :128], r0
   16e3c:	str	r1, [r2]
   16e40:	movw	r0, #53024	; 0xcf20
   16e44:	movt	r0, #2
   16e48:	vst1.64	{d16-d17}, [r0 :128]!
   16e4c:	vst1.64	{d16-d17}, [r0 :128]
   16e50:	movw	r0, #53216	; 0xcfe0
   16e54:	movt	r0, #2
   16e58:	add	r1, r0, #16
   16e5c:	vst1.64	{d16-d17}, [r1 :128]
   16e60:	mov	r1, #32
   16e64:	vst1.64	{d16-d17}, [r0 :128], r1
   16e68:	vst1.64	{d16-d17}, [r0 :128]
   16e6c:	movw	r0, #53264	; 0xd010
   16e70:	movt	r0, #2
   16e74:	vst1.64	{d16-d17}, [r0 :128]!
   16e78:	vst1.64	{d16-d17}, [r0 :128]
   16e7c:	movw	r0, #53296	; 0xd030
   16e80:	movt	r0, #2
   16e84:	vst1.64	{d16-d17}, [r0]
   16e88:	movw	r0, #53312	; 0xd040
   16e8c:	movt	r0, #2
   16e90:	vst1.64	{d16-d17}, [r0 :128]!
   16e94:	vst1.64	{d16-d17}, [r0 :128]
   16e98:	movw	r0, #53344	; 0xd060
   16e9c:	movt	r0, #2
   16ea0:	mov	r1, #0
   16ea4:	mov	r2, #136	; 0x88
   16ea8:	bl	1203c <memset@plt>
   16eac:	pop	{fp, pc}
   16eb0:	movw	r0, #27932	; 0x6d1c
   16eb4:	movt	r0, #1
   16eb8:	movw	r1, #28060	; 0x6d9c
   16ebc:	movt	r1, #1
   16ec0:	b	19874 <__gcov_flush@@Base+0xb4>
   16ec4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ec8:	add	fp, sp, #28
   16ecc:	sub	sp, sp, #36	; 0x24
   16ed0:	mov	r9, r1
   16ed4:	mov	r6, r0
   16ed8:	add	r0, sp, #28
   16edc:	add	r1, sp, #32
   16ee0:	mov	r8, r2
   16ee4:	bl	19c20 <__gcov_flush@@Base+0x460>
   16ee8:	cmp	r0, #0
   16eec:	beq	16f30 <__generate_code_for_binary_boolean_expression@@Base+0x4fc>
   16ef0:	mov	r4, r0
   16ef4:	mov	r0, r6
   16ef8:	ldr	r5, [sp, #32]
   16efc:	bl	11fe8 <strlen@plt>
   16f00:	add	r0, r5, r0
   16f04:	add	r0, r0, #2
   16f08:	bl	11fa0 <malloc@plt>
   16f0c:	mov	r7, r0
   16f10:	ldr	r0, [sp, #28]
   16f14:	mov	r1, r6
   16f18:	mov	r2, r4
   16f1c:	str	r0, [sp]
   16f20:	mov	r0, r7
   16f24:	mov	r3, r5
   16f28:	bl	19cb4 <__gcov_flush@@Base+0x4f4>
   16f2c:	b	16f3c <__generate_code_for_binary_boolean_expression@@Base+0x508>
   16f30:	mov	r0, r6
   16f34:	bl	11f64 <strdup@plt>
   16f38:	mov	r7, r0
   16f3c:	ldr	r0, [pc, #1548]	; 17550 <__generate_code_for_binary_boolean_expression@@Base+0xb1c>
   16f40:	ldr	r6, [pc, #1548]	; 17554 <__generate_code_for_binary_boolean_expression@@Base+0xb20>
   16f44:	mov	r1, #2
   16f48:	add	r0, pc, r0
   16f4c:	add	r6, pc, r6
   16f50:	str	r7, [r0]
   16f54:	mov	r0, r7
   16f58:	mov	r4, #0
   16f5c:	strb	r4, [r6]
   16f60:	bl	11f88 <open64@plt>
   16f64:	ldr	r5, [pc, #1516]	; 17558 <__generate_code_for_binary_boolean_expression@@Base+0xb24>
   16f68:	cmn	r0, #1
   16f6c:	add	r5, pc, r5
   16f70:	str	r0, [r5]
   16f74:	beq	16f84 <__generate_code_for_binary_boolean_expression@@Base+0x550>
   16f78:	ldr	r6, [pc, #1500]	; 1755c <__generate_code_for_binary_boolean_expression@@Base+0xb28>
   16f7c:	add	r6, pc, r6
   16f80:	b	16fe0 <__generate_code_for_binary_boolean_expression@@Base+0x5ac>
   16f84:	mov	r0, #1
   16f88:	strb	r0, [r6]
   16f8c:	ldr	r0, [pc, #1508]	; 17578 <__generate_code_for_binary_boolean_expression@@Base+0xb44>
   16f90:	mov	r1, #66	; 0x42
   16f94:	mov	r2, #420	; 0x1a4
   16f98:	ldr	r0, [pc, r0]
   16f9c:	bl	11f88 <open64@plt>
   16fa0:	ldr	r6, [pc, #1492]	; 1757c <__generate_code_for_binary_boolean_expression@@Base+0xb48>
   16fa4:	cmn	r0, #1
   16fa8:	str	r0, [r5]
   16fac:	add	r6, pc, r6
   16fb0:	bne	16fe0 <__generate_code_for_binary_boolean_expression@@Base+0x5ac>
   16fb4:	ldr	r0, [pc, #1476]	; 17580 <__generate_code_for_binary_boolean_expression@@Base+0xb4c>
   16fb8:	ldr	r0, [pc, r0]
   16fbc:	bl	19988 <__gcov_flush@@Base+0x1c8>
   16fc0:	ldr	r0, [pc, #1468]	; 17584 <__generate_code_for_binary_boolean_expression@@Base+0xb50>
   16fc4:	mov	r1, #66	; 0x42
   16fc8:	mov	r2, #420	; 0x1a4
   16fcc:	ldr	r0, [pc, r0]
   16fd0:	bl	11f88 <open64@plt>
   16fd4:	cmn	r0, #1
   16fd8:	str	r0, [r5]
   16fdc:	beq	17508 <__generate_code_for_binary_boolean_expression@@Base+0xad4>
   16fe0:	str	r9, [sp, #20]
   16fe4:	bl	19a54 <__gcov_flush@@Base+0x294>
   16fe8:	ldr	r0, [pc, #1392]	; 17560 <__generate_code_for_binary_boolean_expression@@Base+0xb2c>
   16fec:	mov	r1, r6
   16ff0:	ldr	r0, [pc, r0]
   16ff4:	bl	11ef8 <fdopen@plt>
   16ff8:	ldr	r5, [pc, #1380]	; 17564 <__generate_code_for_binary_boolean_expression@@Base+0xb30>
   16ffc:	ldr	r9, [pc, #1380]	; 17568 <__generate_code_for_binary_boolean_expression@@Base+0xb34>
   17000:	ldr	r1, [pc, #1380]	; 1756c <__generate_code_for_binary_boolean_expression@@Base+0xb38>
   17004:	ldr	sl, [pc, #1380]	; 17570 <__generate_code_for_binary_boolean_expression@@Base+0xb3c>
   17008:	add	r5, pc, r5
   1700c:	add	r9, pc, r9
   17010:	add	r1, pc, r1
   17014:	add	sl, pc, sl
   17018:	str	r4, [r5]
   1701c:	str	r4, [r5, #4]
   17020:	str	r4, [r9]
   17024:	str	r4, [r9, #4]
   17028:	str	r0, [r1]
   1702c:	str	r4, [sl]
   17030:	ldr	r6, [pc, #1340]	; 17574 <__generate_code_for_binary_boolean_expression@@Base+0xb40>
   17034:	ldr	r2, [pc, #1292]	; 17548 <__generate_code_for_binary_boolean_expression@@Base+0xb14>
   17038:	str	r8, [sp, #24]
   1703c:	add	r6, pc, r6
   17040:	ldrb	r1, [r6]
   17044:	mov	r6, r2
   17048:	cmp	r1, #1
   1704c:	bne	17074 <__generate_code_for_binary_boolean_expression@@Base+0x640>
   17050:	mov	r0, #131072	; 0x20000
   17054:	mov	r4, #131072	; 0x20000
   17058:	bl	11fa0 <malloc@plt>
   1705c:	mov	r1, #0
   17060:	str	r4, [r5]
   17064:	str	r1, [r5, #4]
   17068:	mov	r8, r0
   1706c:	str	r0, [sl]
   17070:	b	17204 <__generate_code_for_binary_boolean_expression@@Base+0x7d0>
   17074:	mov	r1, #0
   17078:	mov	r2, #2
   1707c:	mov	r8, #0
   17080:	bl	120cc <fseek@plt>
   17084:	ldr	r0, [pc, #1288]	; 17594 <__generate_code_for_binary_boolean_expression@@Base+0xb60>
   17088:	ldr	r0, [pc, r0]
   1708c:	bl	11f4c <ftell@plt>
   17090:	mov	r2, r0
   17094:	ldr	r0, [pc, #1276]	; 17598 <__generate_code_for_binary_boolean_expression@@Base+0xb64>
   17098:	asr	r3, r2, #31
   1709c:	add	r0, pc, r0
   170a0:	cmp	r2, #0
   170a4:	strd	r2, [r0]
   170a8:	beq	17178 <__generate_code_for_binary_boolean_expression@@Base+0x744>
   170ac:	ldr	r0, [pc, #1256]	; 1759c <__generate_code_for_binary_boolean_expression@@Base+0xb68>
   170b0:	mov	r1, r2
   170b4:	mov	r2, #3
   170b8:	mov	r3, #1
   170bc:	ldr	r0, [pc, r0]
   170c0:	str	r8, [sp, #8]
   170c4:	str	r8, [sp, #12]
   170c8:	str	r0, [sp]
   170cc:	mov	r0, #0
   170d0:	bl	11f40 <mmap64@plt>
   170d4:	ldr	r1, [pc, #1220]	; 175a0 <__generate_code_for_binary_boolean_expression@@Base+0xb6c>
   170d8:	cmn	r0, #1
   170dc:	add	r1, pc, r1
   170e0:	str	r0, [r1]
   170e4:	beq	17140 <__generate_code_for_binary_boolean_expression@@Base+0x70c>
   170e8:	ldr	r1, [pc, #1232]	; 175c0 <__generate_code_for_binary_boolean_expression@@Base+0xb8c>
   170ec:	add	r1, pc, r1
   170f0:	ldrb	r1, [r1]
   170f4:	cmp	r1, #0
   170f8:	beq	17104 <__generate_code_for_binary_boolean_expression@@Base+0x6d0>
   170fc:	mov	r8, r0
   17100:	b	17210 <__generate_code_for_binary_boolean_expression@@Base+0x7dc>
   17104:	ldr	ip, [r9, #4]
   17108:	ldr	r5, [pc, #1236]	; 175e4 <__generate_code_for_binary_boolean_expression@@Base+0xbb0>
   1710c:	mov	r4, r0
   17110:	lsr	r2, r6, #16
   17114:	ldr	r5, [pc, r5]
   17118:	lsr	r1, r6, #24
   1711c:	lsr	r3, r6, #8
   17120:	strb	r6, [r4, r5]!
   17124:	strb	r2, [r4, #2]
   17128:	adds	r2, r5, #4
   1712c:	adc	ip, ip, #0
   17130:	strb	r1, [r4, #3]
   17134:	strb	r3, [r4, #1]
   17138:	stm	r9, {r2, ip}
   1713c:	b	172d8 <__generate_code_for_binary_boolean_expression@@Base+0x8a4>
   17140:	bl	12018 <__errno_location@plt>
   17144:	ldr	r1, [pc, #1112]	; 175a4 <__generate_code_for_binary_boolean_expression@@Base+0xb70>
   17148:	ldr	r1, [pc, r1]
   1714c:	ldr	r0, [r0]
   17150:	ldr	r4, [r1]
   17154:	ldr	r7, [pc, #1100]	; 175a8 <__generate_code_for_binary_boolean_expression@@Base+0xb74>
   17158:	ldr	r7, [pc, r7]
   1715c:	bl	11fb8 <strerror@plt>
   17160:	ldr	r1, [pc, #1092]	; 175ac <__generate_code_for_binary_boolean_expression@@Base+0xb78>
   17164:	mov	r3, r0
   17168:	mov	r0, r4
   1716c:	add	r1, pc, r1
   17170:	mov	r2, r7
   17174:	bl	1200c <fprintf@plt>
   17178:	str	r8, [r5]
   1717c:	str	r8, [r5, #4]
   17180:	ldr	r0, [pc, #1064]	; 175b0 <__generate_code_for_binary_boolean_expression@@Base+0xb7c>
   17184:	mov	r2, #16646144	; 0xfe0000
   17188:	orr	r2, r2, #-16777216	; 0xff000000
   1718c:	add	r0, pc, r0
   17190:	mvn	r3, #0
   17194:	str	r8, [r0]
   17198:	ldr	r1, [pc, #1044]	; 175b4 <__generate_code_for_binary_boolean_expression@@Base+0xb80>
   1719c:	mov	r0, #1
   171a0:	add	r1, pc, r1
   171a4:	strb	r0, [r1]
   171a8:	ldr	r0, [r9, #4]
   171ac:	ldr	r1, [pc, #1028]	; 175b8 <__generate_code_for_binary_boolean_expression@@Base+0xb84>
   171b0:	eor	r3, r0, r3
   171b4:	ldr	r1, [pc, r1]
   171b8:	eor	r2, r1, r2
   171bc:	orrs	r2, r2, r3
   171c0:	beq	17200 <__generate_code_for_binary_boolean_expression@@Base+0x7cc>
   171c4:	ldr	r2, [pc, #896]	; 1754c <__generate_code_for_binary_boolean_expression@@Base+0xb18>
   171c8:	adds	r1, r1, r2
   171cc:	adc	r0, r0, #0
   171d0:	mvn	r2, #0
   171d4:	and	r7, r0, r2
   171d8:	mov	r0, #16646144	; 0xfe0000
   171dc:	orr	r0, r0, #-16777216	; 0xff000000
   171e0:	and	r4, r1, r0
   171e4:	mov	r0, r4
   171e8:	bl	11fa0 <malloc@plt>
   171ec:	stm	r5, {r4, r7}
   171f0:	mov	r8, r0
   171f4:	ldr	r0, [pc, #960]	; 175bc <__generate_code_for_binary_boolean_expression@@Base+0xb88>
   171f8:	add	r0, pc, r0
   171fc:	str	r8, [r0]
   17200:	mov	r0, r8
   17204:	mov	r1, #0
   17208:	mov	r2, #131072	; 0x20000
   1720c:	bl	1203c <memset@plt>
   17210:	ldr	r0, [r9, #4]
   17214:	ldr	r1, [pc, #936]	; 175c4 <__generate_code_for_binary_boolean_expression@@Base+0xb90>
   17218:	mov	sl, r5
   1721c:	mov	r7, #7
   17220:	orr	r7, r7, #131072	; 0x20000
   17224:	ldr	r1, [pc, r1]
   17228:	ldr	r4, [r5, #4]
   1722c:	ldr	r5, [pc, #916]	; 175c8 <__generate_code_for_binary_boolean_expression@@Base+0xb94>
   17230:	adds	r2, r1, #4
   17234:	adc	r3, r0, #0
   17238:	ldr	r5, [pc, r5]
   1723c:	subs	r2, r5, r2
   17240:	sbcs	r2, r4, r3
   17244:	bcs	1731c <__generate_code_for_binary_boolean_expression@@Base+0x8e8>
   17248:	adds	r1, r1, r7
   1724c:	adc	r0, r0, #0
   17250:	subs	r1, r1, #4
   17254:	sbc	r0, r0, #0
   17258:	mvn	r2, #0
   1725c:	and	r5, r0, r2
   17260:	mov	r0, #16646144	; 0xfe0000
   17264:	orr	r0, r0, #-16777216	; 0xff000000
   17268:	and	r4, r1, r0
   1726c:	mov	r0, r8
   17270:	mov	r1, r4
   17274:	bl	11f70 <realloc@plt>
   17278:	strd	r4, [sl]
   1727c:	ldr	r1, [pc, #844]	; 175d0 <__generate_code_for_binary_boolean_expression@@Base+0xb9c>
   17280:	mov	r7, r6
   17284:	lsr	r2, r6, #24
   17288:	add	r1, pc, r1
   1728c:	mov	r3, r0
   17290:	str	r0, [r1]
   17294:	ldr	r6, [pc, #824]	; 175d4 <__generate_code_for_binary_boolean_expression@@Base+0xba0>
   17298:	ldr	r1, [r9, #4]
   1729c:	lsr	r5, r7, #16
   172a0:	add	r6, pc, r6
   172a4:	ldrb	r6, [r6]
   172a8:	ldr	r4, [pc, #808]	; 175d8 <__generate_code_for_binary_boolean_expression@@Base+0xba4>
   172ac:	ldr	r4, [pc, r4]
   172b0:	strb	r7, [r3, r4]!
   172b4:	strb	r2, [r3, #3]
   172b8:	lsr	r2, r7, #8
   172bc:	strb	r2, [r3, #1]
   172c0:	adds	r2, r4, #4
   172c4:	adc	ip, r1, #0
   172c8:	cmp	r6, #1
   172cc:	strb	r5, [r3, #2]
   172d0:	stm	r9, {r2, ip}
   172d4:	beq	1735c <__generate_code_for_binary_boolean_expression@@Base+0x928>
   172d8:	ldr	r4, [sp, #20]
   172dc:	mov	r5, r0
   172e0:	mov	lr, r9
   172e4:	ldrb	r1, [r4]
   172e8:	ldrb	r3, [r4, #1]
   172ec:	ldrb	r7, [r4, #2]
   172f0:	ldrb	r6, [r4, #3]
   172f4:	strb	r1, [r5, r2]!
   172f8:	adds	r4, r2, #4
   172fc:	adc	r1, ip, #0
   17300:	strb	r6, [r5, #3]
   17304:	strb	r7, [r5, #2]
   17308:	strb	r3, [r5, #1]
   1730c:	str	r4, [lr]
   17310:	str	r1, [lr, #4]
   17314:	ldr	r6, [sp, #24]
   17318:	b	174d8 <__generate_code_for_binary_boolean_expression@@Base+0xaa4>
   1731c:	ldr	r1, [r9, #4]
   17320:	ldr	r4, [pc, #676]	; 175cc <__generate_code_for_binary_boolean_expression@@Base+0xb98>
   17324:	mov	r5, r6
   17328:	lsr	r0, r6, #24
   1732c:	ldr	r4, [pc, r4]
   17330:	lsr	r2, r6, #16
   17334:	lsr	r3, r6, #8
   17338:	mov	r6, r8
   1733c:	strb	r5, [r6, r4]!
   17340:	strb	r2, [r6, #2]
   17344:	adds	r2, r4, #4
   17348:	adc	ip, r1, #0
   1734c:	strb	r0, [r6, #3]
   17350:	strb	r3, [r6, #1]
   17354:	stm	r9, {r2, ip}
   17358:	mov	r0, r8
   1735c:	ldr	r7, [sl, #4]
   17360:	ldr	r3, [pc, #628]	; 175dc <__generate_code_for_binary_boolean_expression@@Base+0xba8>
   17364:	adds	r6, r4, #8
   17368:	mov	r8, r9
   1736c:	adc	r5, r1, #0
   17370:	ldr	r3, [pc, r3]
   17374:	mov	r9, sl
   17378:	subs	r3, r3, r6
   1737c:	sbcs	r3, r7, r5
   17380:	bcs	17424 <__generate_code_for_binary_boolean_expression@@Base+0x9f0>
   17384:	mov	r2, #7
   17388:	orr	r2, r2, #131072	; 0x20000
   1738c:	adds	r2, r4, r2
   17390:	adc	r4, r1, #0
   17394:	mov	r1, #16646144	; 0xfe0000
   17398:	orr	r1, r1, #-16777216	; 0xff000000
   1739c:	and	r6, r2, r1
   173a0:	mov	r1, r6
   173a4:	bl	11f70 <realloc@plt>
   173a8:	ldr	sl, [pc, #568]	; 175e8 <__generate_code_for_binary_boolean_expression@@Base+0xbb4>
   173ac:	mvn	r1, #0
   173b0:	and	r7, r4, r1
   173b4:	add	sl, pc, sl
   173b8:	strd	r6, [r9]
   173bc:	str	r0, [sl]
   173c0:	ldr	r1, [pc, #548]	; 175ec <__generate_code_for_binary_boolean_expression@@Base+0xbb8>
   173c4:	ldr	r2, [sp, #20]
   173c8:	ldr	ip, [r8, #4]
   173cc:	add	r1, pc, r1
   173d0:	mov	lr, r8
   173d4:	ldrb	r3, [r1]
   173d8:	ldrb	r1, [r2]
   173dc:	ldrb	r7, [r2, #1]
   173e0:	ldrb	r6, [r2, #2]
   173e4:	ldrb	r5, [r2, #3]
   173e8:	ldr	r2, [pc, #512]	; 175f0 <__generate_code_for_binary_boolean_expression@@Base+0xbbc>
   173ec:	ldr	r2, [pc, r2]
   173f0:	adds	r4, r2, #4
   173f4:	strb	r1, [r0, r2]
   173f8:	add	r1, r0, r2
   173fc:	strb	r5, [r1, #3]
   17400:	strb	r6, [r1, #2]
   17404:	strb	r7, [r1, #1]
   17408:	adc	r1, ip, #0
   1740c:	str	r4, [lr]
   17410:	str	r1, [lr, #4]
   17414:	ldr	r6, [sp, #24]
   17418:	cmp	r3, #1
   1741c:	beq	1746c <__generate_code_for_binary_boolean_expression@@Base+0xa38>
   17420:	b	174d8 <__generate_code_for_binary_boolean_expression@@Base+0xaa4>
   17424:	ldr	r6, [sp, #20]
   17428:	mov	r5, r0
   1742c:	adds	r4, r2, #4
   17430:	ldrb	r1, [r6]
   17434:	ldrb	r3, [r6, #1]
   17438:	ldrb	r7, [r6, #2]
   1743c:	ldrb	r6, [r6, #3]
   17440:	strb	r1, [r5, r2]!
   17444:	adc	r1, ip, #0
   17448:	strb	r3, [r5, #1]
   1744c:	mov	r3, r8
   17450:	strb	r6, [r5, #3]
   17454:	strb	r7, [r5, #2]
   17458:	str	r4, [r3]
   1745c:	str	r1, [r3, #4]
   17460:	ldr	r6, [sp, #24]
   17464:	ldr	sl, [pc, #372]	; 175e0 <__generate_code_for_binary_boolean_expression@@Base+0xbac>
   17468:	add	sl, pc, sl
   1746c:	ldr	r7, [r9, #4]
   17470:	ldr	r5, [pc, #380]	; 175f4 <__generate_code_for_binary_boolean_expression@@Base+0xbc0>
   17474:	adds	r3, r2, #8
   17478:	adc	lr, ip, #0
   1747c:	ldr	r5, [pc, r5]
   17480:	subs	r3, r5, r3
   17484:	sbcs	r3, r7, lr
   17488:	bcs	174d4 <__generate_code_for_binary_boolean_expression@@Base+0xaa0>
   1748c:	mov	r1, #7
   17490:	orr	r1, r1, #131072	; 0x20000
   17494:	adds	r1, r2, r1
   17498:	adc	r2, ip, #0
   1749c:	mvn	r3, #0
   174a0:	and	r5, r2, r3
   174a4:	mov	r2, #16646144	; 0xfe0000
   174a8:	orr	r2, r2, #-16777216	; 0xff000000
   174ac:	and	r4, r1, r2
   174b0:	mov	r1, r4
   174b4:	bl	11f70 <realloc@plt>
   174b8:	strd	r4, [r9]
   174bc:	str	r0, [sl]
   174c0:	ldr	r1, [r8, #4]
   174c4:	ldr	r4, [pc, #300]	; 175f8 <__generate_code_for_binary_boolean_expression@@Base+0xbc4>
   174c8:	mov	lr, r8
   174cc:	ldr	r4, [pc, r4]
   174d0:	b	174d8 <__generate_code_for_binary_boolean_expression@@Base+0xaa4>
   174d4:	mov	lr, r8
   174d8:	lsr	r2, r6, #24
   174dc:	strb	r6, [r0, r4]!
   174e0:	lsr	r3, r6, #16
   174e4:	lsr	r7, r6, #8
   174e8:	strb	r2, [r0, #3]
   174ec:	strb	r3, [r0, #2]
   174f0:	strb	r7, [r0, #1]
   174f4:	adds	r0, r4, #4
   174f8:	adc	r1, r1, #0
   174fc:	strd	r0, [lr]
   17500:	sub	sp, fp, #28
   17504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17508:	bl	12018 <__errno_location@plt>
   1750c:	ldr	r1, [pc, #116]	; 17588 <__generate_code_for_binary_boolean_expression@@Base+0xb54>
   17510:	ldr	r1, [pc, r1]
   17514:	ldr	r0, [r0]
   17518:	ldr	r4, [r1]
   1751c:	ldr	r5, [pc, #104]	; 1758c <__generate_code_for_binary_boolean_expression@@Base+0xb58>
   17520:	ldr	r5, [pc, r5]
   17524:	bl	11fb8 <strerror@plt>
   17528:	ldr	r1, [pc, #96]	; 17590 <__generate_code_for_binary_boolean_expression@@Base+0xb5c>
   1752c:	mov	r3, r0
   17530:	mov	r0, r4
   17534:	add	r1, pc, r1
   17538:	mov	r2, r5
   1753c:	bl	1200c <fprintf@plt>
   17540:	sub	sp, fp, #28
   17544:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17548:	strbvs	r6, [r3, -r1, ror #8]!
   1754c:	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
   17550:	muleq	r1, r8, r1
   17554:	muleq	r1, r8, r1
   17558:	andeq	r5, r1, r8, ror r1
   1755c:	andeq	r4, r0, ip, lsl #9
   17560:	strdeq	r5, [r1], -r4
   17564:	andeq	r6, r1, r8, ror #1
   17568:	andeq	r6, r1, ip, ror #1
   1756c:	ldrdeq	r6, [r1], -r8
   17570:	ldrdeq	r6, [r1], -r8
   17574:	andeq	r6, r1, r8, lsr #1
   17578:	andeq	r6, r1, r8, asr #2
   1757c:	andeq	r4, r0, r0, ror #8
   17580:	andeq	r6, r1, r8, lsr #2
   17584:	andeq	r6, r1, r4, lsl r1
   17588:	andeq	r4, r1, r8, lsr #23
   1758c:	andeq	r5, r1, r0, asr #23
   17590:	ldrdeq	r3, [r0], -ip
   17594:	andeq	r6, r1, r0, rrx
   17598:	andeq	r6, r1, r4, ror r0
   1759c:	andeq	r5, r1, r8, lsr #32
   175a0:	andeq	r6, r1, r0, lsl r0
   175a4:	andeq	r4, r1, r0, ror pc
   175a8:	andeq	r5, r1, r8, lsl #31
   175ac:	strdeq	r4, [r0], -lr
   175b0:	andeq	r5, r1, r0, ror #30
   175b4:	andeq	r5, r1, r4, asr #30
   175b8:	andeq	r5, r1, r4, asr #30
   175bc:	strdeq	r5, [r1], -r4
   175c0:	strdeq	r5, [r1], -r8
   175c4:	ldrdeq	r5, [r1], -r4
   175c8:			; <UNDEFINED> instruction: 0x00015eb8
   175cc:	andeq	r5, r1, ip, asr #27
   175d0:	andeq	r5, r1, r4, ror #28
   175d4:	andeq	r5, r1, r4, asr #28
   175d8:	andeq	r5, r1, ip, asr #28
   175dc:	andeq	r5, r1, r0, lsl #27
   175e0:	andeq	r5, r1, r4, lsl #25
   175e4:	andeq	r5, r1, r4, ror #31
   175e8:	andeq	r5, r1, r8, lsr sp
   175ec:	andeq	r5, r1, r8, lsl sp
   175f0:	andeq	r5, r1, ip, lsl #26
   175f4:	andeq	r5, r1, r4, ror ip
   175f8:	andeq	r5, r1, ip, lsr #24
   175fc:	ldr	r0, [r0]
   17600:	cmn	r0, #1
   17604:	beq	17624 <__generate_code_for_binary_boolean_expression@@Base+0xbf0>
   17608:	ldr	r0, [r1, r0, lsl #2]
   1760c:	cmp	r0, #0
   17610:	bxeq	lr
   17614:	ldrd	r2, [r0]
   17618:	adds	r2, r2, #1
   1761c:	adc	r3, r3, #0
   17620:	strd	r2, [r0]
   17624:	bx	lr
   17628:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1762c:	add	fp, sp, #28
   17630:	sub	sp, sp, #12
   17634:	mov	r9, r0
   17638:	ldr	r0, [pc, #2000]	; 17e10 <__generate_code_for_binary_boolean_expression@@Base+0x13dc>
   1763c:	mov	sl, #2
   17640:	cmp	r3, #0
   17644:	movne	sl, #3
   17648:	ldr	r0, [pc, r0]
   1764c:	cmp	r0, #0
   17650:	beq	17e08 <__generate_code_for_binary_boolean_expression@@Base+0x13d4>
   17654:	stm	sp, {r2, r3}
   17658:	ldr	r0, [pc, #1972]	; 17e14 <__generate_code_for_binary_boolean_expression@@Base+0x13e0>
   1765c:	str	r1, [sp, #8]
   17660:	add	r0, pc, r0
   17664:	ldrb	r0, [r0]
   17668:	cmp	r0, #1
   1766c:	bne	176fc <__generate_code_for_binary_boolean_expression@@Base+0xcc8>
   17670:	ldr	r0, [pc, #1952]	; 17e18 <__generate_code_for_binary_boolean_expression@@Base+0x13e4>
   17674:	ldr	r4, [pc, #1952]	; 17e1c <__generate_code_for_binary_boolean_expression@@Base+0x13e8>
   17678:	add	r0, pc, r0
   1767c:	add	r4, pc, r4
   17680:	ldr	r0, [r0, #4]
   17684:	ldr	r5, [pc, #1940]	; 17e20 <__generate_code_for_binary_boolean_expression@@Base+0x13ec>
   17688:	ldr	r5, [pc, r5]
   1768c:	ldr	r7, [r4, #4]
   17690:	ldr	r6, [pc, #1932]	; 17e24 <__generate_code_for_binary_boolean_expression@@Base+0x13f0>
   17694:	adds	r2, r5, #4
   17698:	adc	r3, r0, #0
   1769c:	ldr	r6, [pc, r6]
   176a0:	subs	r2, r6, r2
   176a4:	sbcs	r2, r7, r3
   176a8:	bcs	176fc <__generate_code_for_binary_boolean_expression@@Base+0xcc8>
   176ac:	mov	r2, #7
   176b0:	orr	r2, r2, #131072	; 0x20000
   176b4:	adds	r1, r5, r2
   176b8:	adc	r0, r0, #0
   176bc:	subs	r1, r1, #4
   176c0:	sbc	r0, r0, #0
   176c4:	mvn	r2, #0
   176c8:	and	r7, r0, r2
   176cc:	mov	r0, #16646144	; 0xfe0000
   176d0:	orr	r0, r0, #-16777216	; 0xff000000
   176d4:	ldr	r8, [pc, #1868]	; 17e28 <__generate_code_for_binary_boolean_expression@@Base+0x13f4>
   176d8:	and	r6, r1, r0
   176dc:	ldr	r0, [pc, #1864]	; 17e2c <__generate_code_for_binary_boolean_expression@@Base+0x13f8>
   176e0:	mov	r1, r6
   176e4:	add	r8, pc, r8
   176e8:	ldr	r0, [pc, r0]
   176ec:	bl	11f70 <realloc@plt>
   176f0:	ldr	r1, [sp, #8]
   176f4:	strd	r6, [r4]
   176f8:	str	r0, [r8]
   176fc:	ldr	r3, [pc, #1836]	; 17e30 <__generate_code_for_binary_boolean_expression@@Base+0x13fc>
   17700:	ldr	r7, [pc, #1836]	; 17e34 <__generate_code_for_binary_boolean_expression@@Base+0x1400>
   17704:	mov	r0, #0
   17708:	add	r3, pc, r3
   1770c:	mov	r2, #1
   17710:	ldr	r7, [pc, r7]
   17714:	ldr	r8, [pc, #1820]	; 17e38 <__generate_code_for_binary_boolean_expression@@Base+0x1404>
   17718:	adds	r4, r7, #4
   1771c:	ldr	r8, [pc, r8]
   17720:	ldr	r6, [r3, #4]
   17724:	mov	r5, r8
   17728:	strb	r0, [r5, r7]!
   1772c:	strb	r2, [r5, #3]
   17730:	strb	r0, [r5, #2]
   17734:	strb	r0, [r5, #1]
   17738:	adc	r5, r6, #0
   1773c:	cmp	r1, #0
   17740:	strd	r4, [r3]
   17744:	beq	17758 <__generate_code_for_binary_boolean_expression@@Base+0xd24>
   17748:	mov	r0, r1
   1774c:	bl	11fe8 <strlen@plt>
   17750:	add	r0, sl, r0, lsr #2
   17754:	add	sl, r0, #2
   17758:	ldr	r0, [pc, #1756]	; 17e3c <__generate_code_for_binary_boolean_expression@@Base+0x1408>
   1775c:	add	r0, pc, r0
   17760:	ldrb	r0, [r0]
   17764:	cmp	r0, #0
   17768:	beq	17848 <__generate_code_for_binary_boolean_expression@@Base+0xe14>
   1776c:	ldr	lr, [pc, #1744]	; 17e44 <__generate_code_for_binary_boolean_expression@@Base+0x1410>
   17770:	adds	r0, r7, #8
   17774:	adc	r1, r6, #0
   17778:	add	lr, pc, lr
   1777c:	ldr	r2, [lr, #4]
   17780:	ldr	r3, [pc, #1728]	; 17e48 <__generate_code_for_binary_boolean_expression@@Base+0x1414>
   17784:	ldr	r3, [pc, r3]
   17788:	subs	r0, r3, r0
   1778c:	sbcs	r0, r2, r1
   17790:	bcs	17a98 <__generate_code_for_binary_boolean_expression@@Base+0x1064>
   17794:	mov	r0, #7
   17798:	orr	r0, r0, #131072	; 0x20000
   1779c:	adds	r0, r7, r0
   177a0:	adc	r1, r6, #0
   177a4:	mvn	r2, #0
   177a8:	and	r5, r1, r2
   177ac:	mov	r1, #16646144	; 0xfe0000
   177b0:	orr	r1, r1, #-16777216	; 0xff000000
   177b4:	and	r6, r0, r1
   177b8:	ldr	r4, [pc, #1680]	; 17e50 <__generate_code_for_binary_boolean_expression@@Base+0x141c>
   177bc:	mov	r0, r8
   177c0:	mov	r1, r6
   177c4:	add	r4, pc, r4
   177c8:	mov	r7, lr
   177cc:	bl	11f70 <realloc@plt>
   177d0:	mov	lr, r7
   177d4:	mov	r8, r0
   177d8:	str	r6, [lr]
   177dc:	str	r5, [lr, #4]
   177e0:	str	r8, [r4]
   177e4:	ldr	r1, [pc, #1640]	; 17e54 <__generate_code_for_binary_boolean_expression@@Base+0x1420>
   177e8:	lsr	r0, sl, #24
   177ec:	add	r1, pc, r1
   177f0:	lsr	r3, sl, #16
   177f4:	ldrb	r2, [r1]
   177f8:	ldr	r1, [pc, #1624]	; 17e58 <__generate_code_for_binary_boolean_expression@@Base+0x1424>
   177fc:	add	r1, pc, r1
   17800:	mov	r7, r1
   17804:	ldr	r5, [r1, #4]
   17808:	ldr	r4, [pc, #1612]	; 17e5c <__generate_code_for_binary_boolean_expression@@Base+0x1428>
   1780c:	mov	r1, r8
   17810:	ldr	r4, [pc, r4]
   17814:	strb	sl, [r1, r4]!
   17818:	ldr	ip, [sp, #8]
   1781c:	strb	r0, [r1, #3]
   17820:	lsr	r0, sl, #8
   17824:	strb	r0, [r1, #1]
   17828:	adds	r0, r4, #4
   1782c:	strb	r3, [r1, #2]
   17830:	adc	r1, r5, #0
   17834:	mov	sl, r7
   17838:	cmp	r2, #1
   1783c:	strd	r0, [sl]
   17840:	bne	17880 <__generate_code_for_binary_boolean_expression@@Base+0xe4c>
   17844:	b	17ad0 <__generate_code_for_binary_boolean_expression@@Base+0x109c>
   17848:	mov	r3, r8
   1784c:	lsr	r0, sl, #24
   17850:	strb	sl, [r3, r4]!
   17854:	lsr	r1, sl, #16
   17858:	lsr	r2, sl, #8
   1785c:	strb	r0, [r3, #3]
   17860:	strb	r1, [r3, #2]
   17864:	strb	r2, [r3, #1]
   17868:	ldr	sl, [pc, #1488]	; 17e40 <__generate_code_for_binary_boolean_expression@@Base+0x140c>
   1786c:	ldr	ip, [sp, #8]
   17870:	adds	r0, r7, #8
   17874:	adc	r1, r6, #0
   17878:	add	sl, pc, sl
   1787c:	strd	r0, [sl]
   17880:	mov	r6, r8
   17884:	lsr	r2, r9, #24
   17888:	strb	r9, [r6, r0]!
   1788c:	lsr	r3, r9, #16
   17890:	strb	r2, [r6, #3]
   17894:	adds	r2, r0, #4
   17898:	lsr	r7, r9, #8
   1789c:	strb	r3, [r6, #2]
   178a0:	adc	r3, r1, #0
   178a4:	strb	r7, [r6, #1]
   178a8:	strd	r2, [sl]
   178ac:	ldr	r5, [sp]
   178b0:	mov	r6, r8
   178b4:	adds	r4, r2, #4
   178b8:	lsr	r7, r5, #8
   178bc:	strb	r5, [r6, r2]!
   178c0:	lsr	r0, r5, #24
   178c4:	lsr	r1, r5, #16
   178c8:	strb	r7, [r6, #1]
   178cc:	adc	r7, r3, #0
   178d0:	strb	r0, [r6, #3]
   178d4:	strb	r1, [r6, #2]
   178d8:	stm	sl, {r4, r7}
   178dc:	ldr	r0, [sp, #4]
   178e0:	cmp	r0, #0
   178e4:	beq	179bc <__generate_code_for_binary_boolean_expression@@Base+0xf88>
   178e8:	ldr	r0, [pc, #1420]	; 17e7c <__generate_code_for_binary_boolean_expression@@Base+0x1448>
   178ec:	ldr	sl, [fp, #8]
   178f0:	add	r0, pc, r0
   178f4:	ldrb	r0, [r0]
   178f8:	cmp	r0, #1
   178fc:	bne	17988 <__generate_code_for_binary_boolean_expression@@Base+0xf54>
   17900:	ldr	r9, [pc, #1400]	; 17e80 <__generate_code_for_binary_boolean_expression@@Base+0x144c>
   17904:	adds	r0, r2, #8
   17908:	adc	r1, r3, #0
   1790c:	add	r9, pc, r9
   17910:	ldr	r6, [r9, #4]
   17914:	ldr	r5, [pc, #1384]	; 17e84 <__generate_code_for_binary_boolean_expression@@Base+0x1450>
   17918:	ldr	r5, [pc, r5]
   1791c:	subs	r0, r5, r0
   17920:	sbcs	r0, r6, r1
   17924:	bcs	17988 <__generate_code_for_binary_boolean_expression@@Base+0xf54>
   17928:	mov	r0, #7
   1792c:	orr	r0, r0, #131072	; 0x20000
   17930:	adds	r0, r2, r0
   17934:	adc	r1, r3, #0
   17938:	mvn	r2, #0
   1793c:	and	r5, r1, r2
   17940:	mov	r1, #16646144	; 0xfe0000
   17944:	orr	r1, r1, #-16777216	; 0xff000000
   17948:	and	r6, r0, r1
   1794c:	ldr	r4, [pc, #1332]	; 17e88 <__generate_code_for_binary_boolean_expression@@Base+0x1454>
   17950:	mov	r0, r8
   17954:	mov	r1, r6
   17958:	add	r4, pc, r4
   1795c:	bl	11f70 <realloc@plt>
   17960:	ldr	ip, [sp, #8]
   17964:	str	r6, [r9]
   17968:	str	r5, [r9, #4]
   1796c:	mov	r8, r0
   17970:	ldr	r0, [pc, #1300]	; 17e8c <__generate_code_for_binary_boolean_expression@@Base+0x1458>
   17974:	str	r8, [r4]
   17978:	add	r0, pc, r0
   1797c:	ldr	r7, [r0, #4]
   17980:	ldr	r4, [pc, #1288]	; 17e90 <__generate_code_for_binary_boolean_expression@@Base+0x145c>
   17984:	ldr	r4, [pc, r4]
   17988:	mov	r3, r8
   1798c:	lsr	r0, sl, #24
   17990:	strb	sl, [r3, r4]!
   17994:	lsr	r1, sl, #16
   17998:	lsr	r2, sl, #8
   1799c:	strb	r0, [r3, #3]
   179a0:	strb	r1, [r3, #2]
   179a4:	strb	r2, [r3, #1]
   179a8:	ldr	sl, [pc, #1252]	; 17e94 <__generate_code_for_binary_boolean_expression@@Base+0x1460>
   179ac:	adds	r4, r4, #4
   179b0:	adc	r7, r7, #0
   179b4:	add	sl, pc, sl
   179b8:	stm	sl, {r4, r7}
   179bc:	cmp	ip, #0
   179c0:	beq	17e08 <__generate_code_for_binary_boolean_expression@@Base+0x13d4>
   179c4:	mov	r0, ip
   179c8:	bl	11fe8 <strlen@plt>
   179cc:	mov	r9, #1
   179d0:	add	r5, r9, r0, lsr #2
   179d4:	ldr	r0, [pc, #1212]	; 17e98 <__generate_code_for_binary_boolean_expression@@Base+0x1464>
   179d8:	add	r0, pc, r0
   179dc:	ldrb	r0, [r0]
   179e0:	cmp	r0, #1
   179e4:	bne	17a88 <__generate_code_for_binary_boolean_expression@@Base+0x1054>
   179e8:	ldr	sl, [pc, #1196]	; 17e9c <__generate_code_for_binary_boolean_expression@@Base+0x1468>
   179ec:	adds	r0, r4, #4
   179f0:	adc	r1, r7, #0
   179f4:	add	sl, pc, sl
   179f8:	ldr	r2, [sl, #4]
   179fc:	ldr	r3, [pc, #1180]	; 17ea0 <__generate_code_for_binary_boolean_expression@@Base+0x146c>
   17a00:	ldr	r3, [pc, r3]
   17a04:	subs	r0, r3, r0
   17a08:	sbcs	r0, r2, r1
   17a0c:	bcs	17c3c <__generate_code_for_binary_boolean_expression@@Base+0x1208>
   17a10:	mov	r0, #0
   17a14:	str	r0, [sp, #4]
   17a18:	mov	r0, #7
   17a1c:	orr	r0, r0, #131072	; 0x20000
   17a20:	adds	r0, r4, r0
   17a24:	adc	r1, r7, #0
   17a28:	subs	r0, r0, #4
   17a2c:	sbc	r1, r1, #0
   17a30:	mvn	r2, #0
   17a34:	and	r7, r1, r2
   17a38:	mov	r1, #16646144	; 0xfe0000
   17a3c:	orr	r1, r1, #-16777216	; 0xff000000
   17a40:	and	r4, r0, r1
   17a44:	ldr	r6, [pc, #1116]	; 17ea8 <__generate_code_for_binary_boolean_expression@@Base+0x1474>
   17a48:	mov	r0, r8
   17a4c:	mov	r1, r4
   17a50:	add	r6, pc, r6
   17a54:	bl	11f70 <realloc@plt>
   17a58:	stm	sl, {r4, r7}
   17a5c:	str	r0, [r6]
   17a60:	ldr	sl, [pc, #1092]	; 17eac <__generate_code_for_binary_boolean_expression@@Base+0x1478>
   17a64:	mov	r8, r0
   17a68:	add	sl, pc, sl
   17a6c:	ldr	r7, [sl, #4]
   17a70:	ldr	r0, [pc, #1080]	; 17eb0 <__generate_code_for_binary_boolean_expression@@Base+0x147c>
   17a74:	add	r0, pc, r0
   17a78:	ldrb	r9, [r0]
   17a7c:	ldr	r4, [pc, #1072]	; 17eb4 <__generate_code_for_binary_boolean_expression@@Base+0x1480>
   17a80:	ldr	r4, [pc, r4]
   17a84:	b	17c4c <__generate_code_for_binary_boolean_expression@@Base+0x1218>
   17a88:	mov	r0, #0
   17a8c:	str	r0, [sp, #4]
   17a90:	mov	r9, #0
   17a94:	b	17c4c <__generate_code_for_binary_boolean_expression@@Base+0x1218>
   17a98:	mov	r3, r8
   17a9c:	lsr	r0, sl, #24
   17aa0:	strb	sl, [r3, r4]!
   17aa4:	lsr	r1, sl, #16
   17aa8:	lsr	r2, sl, #8
   17aac:	strb	r0, [r3, #3]
   17ab0:	strb	r1, [r3, #2]
   17ab4:	strb	r2, [r3, #1]
   17ab8:	ldr	sl, [pc, #908]	; 17e4c <__generate_code_for_binary_boolean_expression@@Base+0x1418>
   17abc:	adds	r0, r7, #8
   17ac0:	adc	r1, r6, #0
   17ac4:	add	sl, pc, sl
   17ac8:	ldr	ip, [sp, #8]
   17acc:	strd	r0, [sl]
   17ad0:	ldr	r7, [lr, #4]
   17ad4:	ldr	r6, [pc, #900]	; 17e60 <__generate_code_for_binary_boolean_expression@@Base+0x142c>
   17ad8:	adds	r2, r4, #8
   17adc:	adc	r3, r5, #0
   17ae0:	ldr	r6, [pc, r6]
   17ae4:	subs	r2, r6, r2
   17ae8:	sbcs	r2, r7, r3
   17aec:	bcs	17b90 <__generate_code_for_binary_boolean_expression@@Base+0x115c>
   17af0:	mov	r0, #7
   17af4:	orr	r0, r0, #131072	; 0x20000
   17af8:	adds	r0, r4, r0
   17afc:	adc	r1, r5, #0
   17b00:	mvn	r2, #0
   17b04:	and	r5, r1, r2
   17b08:	mov	r1, #16646144	; 0xfe0000
   17b0c:	orr	r1, r1, #-16777216	; 0xff000000
   17b10:	and	r4, r0, r1
   17b14:	ldr	r6, [pc, #840]	; 17e64 <__generate_code_for_binary_boolean_expression@@Base+0x1430>
   17b18:	mov	r0, r8
   17b1c:	mov	r1, r4
   17b20:	add	r6, pc, r6
   17b24:	mov	r7, lr
   17b28:	bl	11f70 <realloc@plt>
   17b2c:	mov	lr, r7
   17b30:	str	r0, [r6]
   17b34:	strd	r4, [lr]
   17b38:	mov	r8, r0
   17b3c:	ldr	ip, [sp, #8]
   17b40:	ldr	r0, [pc, #800]	; 17e68 <__generate_code_for_binary_boolean_expression@@Base+0x1434>
   17b44:	ldr	r1, [sl, #4]
   17b48:	mov	r3, r8
   17b4c:	add	r0, pc, r0
   17b50:	lsr	r2, r9, #24
   17b54:	ldrb	r7, [r0]
   17b58:	ldr	r0, [pc, #780]	; 17e6c <__generate_code_for_binary_boolean_expression@@Base+0x1438>
   17b5c:	lsr	r6, r9, #16
   17b60:	ldr	r0, [pc, r0]
   17b64:	strb	r9, [r3, r0]!
   17b68:	strb	r2, [r3, #3]
   17b6c:	lsr	r2, r9, #8
   17b70:	strb	r2, [r3, #1]
   17b74:	adds	r2, r0, #4
   17b78:	strb	r6, [r3, #2]
   17b7c:	adc	r3, r1, #0
   17b80:	cmp	r7, #1
   17b84:	strd	r2, [sl]
   17b88:	bne	178ac <__generate_code_for_binary_boolean_expression@@Base+0xe78>
   17b8c:	b	17bbc <__generate_code_for_binary_boolean_expression@@Base+0x1188>
   17b90:	mov	r6, r8
   17b94:	lsr	r2, r9, #24
   17b98:	strb	r9, [r6, r0]!
   17b9c:	lsr	r3, r9, #16
   17ba0:	strb	r2, [r6, #3]
   17ba4:	adds	r2, r0, #4
   17ba8:	lsr	r7, r9, #8
   17bac:	strb	r3, [r6, #2]
   17bb0:	adc	r3, r1, #0
   17bb4:	strb	r7, [r6, #1]
   17bb8:	strd	r2, [sl]
   17bbc:	ldr	r5, [lr, #4]
   17bc0:	ldr	r4, [pc, #680]	; 17e70 <__generate_code_for_binary_boolean_expression@@Base+0x143c>
   17bc4:	adds	r7, r0, #8
   17bc8:	adc	r6, r1, #0
   17bcc:	ldr	r4, [pc, r4]
   17bd0:	subs	r7, r4, r7
   17bd4:	sbcs	r7, r5, r6
   17bd8:	bcs	178ac <__generate_code_for_binary_boolean_expression@@Base+0xe78>
   17bdc:	mov	r2, #7
   17be0:	orr	r2, r2, #131072	; 0x20000
   17be4:	adds	r0, r0, r2
   17be8:	adc	r1, r1, #0
   17bec:	mvn	r2, #0
   17bf0:	and	r5, r1, r2
   17bf4:	mov	r1, #16646144	; 0xfe0000
   17bf8:	orr	r1, r1, #-16777216	; 0xff000000
   17bfc:	and	r6, r0, r1
   17c00:	ldr	r4, [pc, #620]	; 17e74 <__generate_code_for_binary_boolean_expression@@Base+0x1440>
   17c04:	mov	r0, r8
   17c08:	mov	r1, r6
   17c0c:	add	r4, pc, r4
   17c10:	mov	r7, lr
   17c14:	bl	11f70 <realloc@plt>
   17c18:	ldr	ip, [sp, #8]
   17c1c:	str	r6, [r7]
   17c20:	str	r5, [r7, #4]
   17c24:	str	r0, [r4]
   17c28:	ldr	r3, [sl, #4]
   17c2c:	ldr	r2, [pc, #580]	; 17e78 <__generate_code_for_binary_boolean_expression@@Base+0x1444>
   17c30:	mov	r8, r0
   17c34:	ldr	r2, [pc, r2]
   17c38:	b	178ac <__generate_code_for_binary_boolean_expression@@Base+0xe78>
   17c3c:	mov	r0, #0
   17c40:	str	r0, [sp, #4]
   17c44:	ldr	sl, [pc, #600]	; 17ea4 <__generate_code_for_binary_boolean_expression@@Base+0x1470>
   17c48:	add	sl, pc, sl
   17c4c:	mov	r3, r8
   17c50:	ldr	r0, [sp, #8]
   17c54:	strb	r5, [r3, r4]!
   17c58:	adds	r4, r4, #4
   17c5c:	lsr	r6, r5, #24
   17c60:	lsr	r1, r5, #16
   17c64:	lsr	r2, r5, #8
   17c68:	adc	r5, r7, #0
   17c6c:	strb	r6, [r3, #3]
   17c70:	strb	r1, [r3, #2]
   17c74:	strb	r2, [r3, #1]
   17c78:	strd	r4, [sl]
   17c7c:	bl	11fe8 <strlen@plt>
   17c80:	mov	r7, r0
   17c84:	cmp	r9, #0
   17c88:	beq	17d28 <__generate_code_for_binary_boolean_expression@@Base+0x12f4>
   17c8c:	ldr	r6, [pc, #548]	; 17eb8 <__generate_code_for_binary_boolean_expression@@Base+0x1484>
   17c90:	adds	r0, r4, r7
   17c94:	adc	r1, r5, #0
   17c98:	add	r6, pc, r6
   17c9c:	ldr	r2, [r6, #4]
   17ca0:	ldr	r3, [pc, #532]	; 17ebc <__generate_code_for_binary_boolean_expression@@Base+0x1488>
   17ca4:	ldr	r3, [pc, r3]
   17ca8:	subs	r3, r3, r0
   17cac:	sbcs	r2, r2, r1
   17cb0:	bcs	17d20 <__generate_code_for_binary_boolean_expression@@Base+0x12ec>
   17cb4:	mov	r2, #7
   17cb8:	orr	r2, r2, #131072	; 0x20000
   17cbc:	adds	r0, r0, r2
   17cc0:	adc	r1, r1, #0
   17cc4:	subs	r0, r0, #8
   17cc8:	sbc	r1, r1, #0
   17ccc:	mvn	r2, #0
   17cd0:	and	r5, r1, r2
   17cd4:	mov	r1, #16646144	; 0xfe0000
   17cd8:	orr	r1, r1, #-16777216	; 0xff000000
   17cdc:	and	r4, r0, r1
   17ce0:	ldr	r9, [pc, #472]	; 17ec0 <__generate_code_for_binary_boolean_expression@@Base+0x148c>
   17ce4:	mov	r0, r8
   17ce8:	mov	r1, r4
   17cec:	add	r9, pc, r9
   17cf0:	bl	11f70 <realloc@plt>
   17cf4:	strd	r4, [r6]
   17cf8:	str	r0, [r9]
   17cfc:	mov	r8, r0
   17d00:	ldr	r5, [sl, #4]
   17d04:	ldr	r0, [pc, #440]	; 17ec4 <__generate_code_for_binary_boolean_expression@@Base+0x1490>
   17d08:	add	r0, pc, r0
   17d0c:	ldrb	r0, [r0]
   17d10:	str	r0, [sp, #4]
   17d14:	ldr	r4, [pc, #428]	; 17ec8 <__generate_code_for_binary_boolean_expression@@Base+0x1494>
   17d18:	ldr	r4, [pc, r4]
   17d1c:	b	17d28 <__generate_code_for_binary_boolean_expression@@Base+0x12f4>
   17d20:	mov	r0, #1
   17d24:	str	r0, [sp, #4]
   17d28:	ldr	r9, [sp, #8]
   17d2c:	add	r0, r8, r4
   17d30:	mov	r2, r7
   17d34:	mov	r1, r9
   17d38:	bl	11f34 <memcpy@plt>
   17d3c:	adds	r6, r4, r7
   17d40:	mov	r0, r9
   17d44:	adc	r5, r5, #0
   17d48:	str	r6, [sl]
   17d4c:	str	r5, [sl, #4]
   17d50:	bl	11fe8 <strlen@plt>
   17d54:	and	r0, r0, #3
   17d58:	rsb	r4, r0, #4
   17d5c:	ldr	r0, [sp, #4]
   17d60:	cmp	r0, #0
   17d64:	beq	17dec <__generate_code_for_binary_boolean_expression@@Base+0x13b8>
   17d68:	ldr	r7, [pc, #348]	; 17ecc <__generate_code_for_binary_boolean_expression@@Base+0x1498>
   17d6c:	adds	r0, r6, r4
   17d70:	adc	r1, r5, #0
   17d74:	add	r7, pc, r7
   17d78:	ldr	r2, [r7, #4]
   17d7c:	ldr	r3, [pc, #332]	; 17ed0 <__generate_code_for_binary_boolean_expression@@Base+0x149c>
   17d80:	ldr	r3, [pc, r3]
   17d84:	subs	r3, r3, r0
   17d88:	sbcs	r2, r2, r1
   17d8c:	bcs	17dec <__generate_code_for_binary_boolean_expression@@Base+0x13b8>
   17d90:	mov	r2, #7
   17d94:	orr	r2, r2, #131072	; 0x20000
   17d98:	adds	r0, r0, r2
   17d9c:	adc	r1, r1, #0
   17da0:	subs	r0, r0, #8
   17da4:	sbc	r1, r1, #0
   17da8:	mvn	r2, #0
   17dac:	and	r5, r1, r2
   17db0:	mov	r1, #16646144	; 0xfe0000
   17db4:	orr	r1, r1, #-16777216	; 0xff000000
   17db8:	and	r6, r0, r1
   17dbc:	ldr	r9, [pc, #272]	; 17ed4 <__generate_code_for_binary_boolean_expression@@Base+0x14a0>
   17dc0:	mov	r0, r8
   17dc4:	mov	r1, r6
   17dc8:	add	r9, pc, r9
   17dcc:	bl	11f70 <realloc@plt>
   17dd0:	str	r6, [r7]
   17dd4:	str	r5, [r7, #4]
   17dd8:	str	r0, [r9]
   17ddc:	ldr	r5, [sl, #4]
   17de0:	ldr	r6, [pc, #240]	; 17ed8 <__generate_code_for_binary_boolean_expression@@Base+0x14a4>
   17de4:	mov	r8, r0
   17de8:	ldr	r6, [pc, r6]
   17dec:	add	r0, r8, r6
   17df0:	mov	r1, #0
   17df4:	mov	r2, r4
   17df8:	bl	1203c <memset@plt>
   17dfc:	adds	r0, r6, r4
   17e00:	adc	r1, r5, #0
   17e04:	strd	r0, [sl]
   17e08:	sub	sp, fp, #28
   17e0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e10:	andeq	r5, r1, r0, lsr #21
   17e14:	andeq	r5, r1, r4, lsl #21
   17e18:	andeq	r5, r1, r0, lsl #21
   17e1c:	andeq	r5, r1, r4, ror sl
   17e20:	andeq	r5, r1, r0, ror sl
   17e24:	andeq	r5, r1, r4, asr sl
   17e28:	andeq	r5, r1, r8, lsl #20
   17e2c:	andeq	r5, r1, r4, lsl #20
   17e30:	strdeq	r5, [r1], -r0
   17e34:	andeq	r5, r1, r8, ror #19
   17e38:	ldrdeq	r5, [r1], -r0
   17e3c:	andeq	r5, r1, r8, lsl #19
   17e40:	andeq	r5, r1, r0, lsl #17
   17e44:	andeq	r5, r1, r8, ror r9
   17e48:	andeq	r5, r1, ip, ror #18
   17e4c:	andeq	r5, r1, r4, lsr r6
   17e50:	andeq	r5, r1, r8, lsr #18
   17e54:	strdeq	r5, [r1], -r8
   17e58:	strdeq	r5, [r1], -ip
   17e5c:	andeq	r5, r1, r8, ror #17
   17e60:	andeq	r5, r1, r0, lsl r6
   17e64:	andeq	r5, r1, ip, asr #11
   17e68:	muleq	r1, r8, r5
   17e6c:	muleq	r1, r8, r5
   17e70:	andeq	r5, r1, r4, lsr #10
   17e74:	andeq	r5, r1, r0, ror #9
   17e78:	andeq	r5, r1, r4, asr #9
   17e7c:	strdeq	r5, [r1], -r4
   17e80:	andeq	r5, r1, r4, ror #15
   17e84:	ldrdeq	r5, [r1], -r8
   17e88:	muleq	r1, r4, r7
   17e8c:	andeq	r5, r1, r0, lsl #15
   17e90:	andeq	r5, r1, r4, ror r7
   17e94:	andeq	r5, r1, r4, asr #14
   17e98:	andeq	r5, r1, ip, lsl #14
   17e9c:	strdeq	r5, [r1], -ip
   17ea0:	strdeq	r5, [r1], -r0
   17ea4:			; <UNDEFINED> instruction: 0x000154b0
   17ea8:	muleq	r1, ip, r6
   17eac:	muleq	r1, r0, r6
   17eb0:	andeq	r5, r1, r0, ror r6
   17eb4:	andeq	r5, r1, r8, ror r6
   17eb8:	andeq	r5, r1, r8, asr r4
   17ebc:	andeq	r5, r1, ip, asr #8
   17ec0:	andeq	r5, r1, r0, lsl #8
   17ec4:	ldrdeq	r5, [r1], -ip
   17ec8:	andeq	r5, r1, r0, ror #7
   17ecc:	andeq	r5, r1, ip, ror r3
   17ed0:	andeq	r5, r1, r0, ror r3
   17ed4:	andeq	r5, r1, r4, lsr #6
   17ed8:	andeq	r5, r1, r0, lsl r3
   17edc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ee0:	add	fp, sp, #28
   17ee4:	sub	sp, sp, #28
   17ee8:	mov	ip, r0
   17eec:	ldr	r0, [pc, #1728]	; 185b4 <__generate_code_for_binary_boolean_expression@@Base+0x1b80>
   17ef0:	ldr	r0, [pc, r0]
   17ef4:	cmp	r0, #0
   17ef8:	beq	18014 <__generate_code_for_binary_boolean_expression@@Base+0x15e0>
   17efc:	ldr	r2, [pc, #1716]	; 185b8 <__generate_code_for_binary_boolean_expression@@Base+0x1b84>
   17f00:	mov	sl, r1
   17f04:	add	r2, pc, r2
   17f08:	ldr	r3, [r2, #4]
   17f0c:	ldr	r4, [pc, #1704]	; 185bc <__generate_code_for_binary_boolean_expression@@Base+0x1b88>
   17f10:	ldr	r4, [pc, r4]
   17f14:	ldr	r6, [pc, #1700]	; 185c0 <__generate_code_for_binary_boolean_expression@@Base+0x1b8c>
   17f18:	add	r6, pc, r6
   17f1c:	ldrb	r0, [r6]
   17f20:	cmp	r0, #0
   17f24:	beq	1801c <__generate_code_for_binary_boolean_expression@@Base+0x15e8>
   17f28:	ldr	r8, [pc, #1720]	; 185e8 <__generate_code_for_binary_boolean_expression@@Base+0x1bb4>
   17f2c:	mov	r5, #10551296	; 0xa10000
   17f30:	adds	r9, r4, #4
   17f34:	add	r8, pc, r8
   17f38:	adc	r2, r3, #0
   17f3c:	ldr	r0, [r8, #4]
   17f40:	ldr	r1, [pc, #1700]	; 185ec <__generate_code_for_binary_boolean_expression@@Base+0x1bb8>
   17f44:	orr	r5, r5, #16777216	; 0x1000000
   17f48:	ldr	r1, [pc, r1]
   17f4c:	subs	r1, r1, r9
   17f50:	sbcs	r0, r0, r2
   17f54:	bcs	1812c <__generate_code_for_binary_boolean_expression@@Base+0x16f8>
   17f58:	mov	r0, #3
   17f5c:	orr	r0, r0, #131072	; 0x20000
   17f60:	adds	r0, r4, r0
   17f64:	adc	r1, r3, #0
   17f68:	mvn	r2, #0
   17f6c:	and	r9, r1, r2
   17f70:	mov	r1, #16646144	; 0xfe0000
   17f74:	orr	r1, r1, #-16777216	; 0xff000000
   17f78:	and	r4, r0, r1
   17f7c:	ldr	r0, [pc, #1652]	; 185f8 <__generate_code_for_binary_boolean_expression@@Base+0x1bc4>
   17f80:	mov	r1, r4
   17f84:	mov	r7, ip
   17f88:	ldr	r0, [pc, r0]
   17f8c:	bl	11f70 <realloc@plt>
   17f90:	ldr	ip, [pc, #1636]	; 185fc <__generate_code_for_binary_boolean_expression@@Base+0x1bc8>
   17f94:	ldr	lr, [pc, #1636]	; 18600 <__generate_code_for_binary_boolean_expression@@Base+0x1bcc>
   17f98:	stm	r8, {r4, r9}
   17f9c:	ldr	r1, [pc, #1632]	; 18604 <__generate_code_for_binary_boolean_expression@@Base+0x1bd0>
   17fa0:	add	ip, pc, ip
   17fa4:	add	lr, pc, lr
   17fa8:	add	r1, pc, r1
   17fac:	mov	r2, r0
   17fb0:	str	r2, [r1]
   17fb4:	mov	r6, ip
   17fb8:	ldrb	ip, [ip]
   17fbc:	ldr	r3, [lr, #4]
   17fc0:	ldr	r4, [pc, #1600]	; 18608 <__generate_code_for_binary_boolean_expression@@Base+0x1bd4>
   17fc4:	lsr	r0, r5, #24
   17fc8:	mov	r1, r8
   17fcc:	ldr	r4, [pc, r4]
   17fd0:	str	r2, [sp, #20]
   17fd4:	lsl	r8, r7, #1
   17fd8:	strb	r5, [r2, r4]!
   17fdc:	adds	r9, r4, #4
   17fe0:	strb	r0, [r2, #3]
   17fe4:	lsr	r0, r5, #16
   17fe8:	strb	r0, [r2, #2]
   17fec:	lsr	r0, r5, #8
   17ff0:	strb	r0, [r2, #1]
   17ff4:	adc	r5, r3, #0
   17ff8:	mov	r0, #0
   17ffc:	cmp	ip, #1
   18000:	str	r3, [sp, #16]
   18004:	str	r9, [lr]
   18008:	str	r5, [lr, #4]
   1800c:	beq	18180 <__generate_code_for_binary_boolean_expression@@Base+0x174c>
   18010:	b	182d0 <__generate_code_for_binary_boolean_expression@@Base+0x189c>
   18014:	sub	sp, fp, #28
   18018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1801c:	ldr	r0, [pc, #1440]	; 185c4 <__generate_code_for_binary_boolean_expression@@Base+0x1b90>
   18020:	mov	r7, r3
   18024:	adds	r9, r4, #4
   18028:	mov	lr, r2
   1802c:	ldr	r0, [pc, r0]
   18030:	str	r0, [sp, #20]
   18034:	ldrb	r1, [r0, r4]!
   18038:	str	r7, [sp, #16]
   1803c:	ldrb	r5, [r0, #1]
   18040:	ldrb	r3, [r0, #2]
   18044:	ldrb	r0, [r0, #3]
   18048:	orr	r1, r1, r5, lsl #8
   1804c:	orr	r1, r1, r3, lsl #16
   18050:	orr	r3, r1, r0, lsl #24
   18054:	adc	r5, r7, #0
   18058:	mov	r7, #0
   1805c:	cmn	r3, #1
   18060:	str	r9, [r2]
   18064:	str	r5, [r2, #4]
   18068:	beq	1822c <__generate_code_for_binary_boolean_expression@@Base+0x17f8>
   1806c:	mov	r0, #10551296	; 0xa10000
   18070:	orr	r0, r0, #16777216	; 0x1000000
   18074:	cmp	r3, r0
   18078:	bne	18238 <__generate_code_for_binary_boolean_expression@@Base+0x1804>
   1807c:	str	r5, [sp, #8]
   18080:	ldr	r0, [sp, #20]
   18084:	str	r4, [sp, #4]
   18088:	adds	r5, r4, #8
   1808c:	ldr	r3, [r0, r9]
   18090:	ldr	r0, [sp, #16]
   18094:	mov	r1, r9
   18098:	adc	r9, r0, #0
   1809c:	cmn	r3, #1
   180a0:	stm	lr, {r5, r9}
   180a4:	beq	18244 <__generate_code_for_binary_boolean_expression@@Base+0x1810>
   180a8:	lsr	r0, r3, #1
   180ac:	mov	r7, ip
   180b0:	cmp	r0, ip
   180b4:	bne	18244 <__generate_code_for_binary_boolean_expression@@Base+0x1810>
   180b8:	lsl	r0, r7, #3
   180bc:	mov	r4, r1
   180c0:	bl	11fa0 <malloc@plt>
   180c4:	mov	r1, r0
   180c8:	cmp	r7, #0
   180cc:	beq	1826c <__generate_code_for_binary_boolean_expression@@Base+0x1838>
   180d0:	mov	r0, r7
   180d4:	str	r7, [sp, #24]
   180d8:	str	r1, [sp, #12]
   180dc:	ldr	r2, [sp, #20]
   180e0:	ldr	r3, [r2, r5]!
   180e4:	adds	r5, r5, #8
   180e8:	ldr	r2, [r2, #4]
   180ec:	str	r3, [r1]
   180f0:	adc	r9, r9, #0
   180f4:	str	r2, [r1, #4]
   180f8:	subs	r0, r0, #1
   180fc:	add	r1, r1, #8
   18100:	bne	180dc <__generate_code_for_binary_boolean_expression@@Base+0x16a8>
   18104:	ldr	lr, [pc, #1236]	; 185e0 <__generate_code_for_binary_boolean_expression@@Base+0x1bac>
   18108:	add	lr, pc, lr
   1810c:	mov	r0, lr
   18110:	stm	r0, {r5, r9}
   18114:	ldr	ip, [pc, #1224]	; 185e4 <__generate_code_for_binary_boolean_expression@@Base+0x1bb0>
   18118:	ldr	r0, [sp, #12]
   1811c:	add	ip, pc, ip
   18120:	mov	r6, ip
   18124:	ldr	ip, [sp, #24]
   18128:	b	18288 <__generate_code_for_binary_boolean_expression@@Base+0x1854>
   1812c:	str	r3, [sp, #16]
   18130:	ldr	r3, [pc, #1208]	; 185f0 <__generate_code_for_binary_boolean_expression@@Base+0x1bbc>
   18134:	mov	lr, r5
   18138:	mov	r7, ip
   1813c:	lsr	ip, r5, #16
   18140:	ldr	r3, [pc, r3]
   18144:	lsr	r1, r5, #8
   18148:	str	r3, [sp, #20]
   1814c:	strb	lr, [r3, r4]!
   18150:	lsr	r0, lr, #24
   18154:	strb	r1, [r3, #1]
   18158:	strb	r0, [r3, #3]
   1815c:	strb	ip, [r3, #2]
   18160:	ldr	lr, [pc, #1164]	; 185f4 <__generate_code_for_binary_boolean_expression@@Base+0x1bc0>
   18164:	lsl	r5, r7, #1
   18168:	add	lr, pc, lr
   1816c:	mov	r1, r8
   18170:	mov	r8, r5
   18174:	str	r9, [lr]
   18178:	str	r2, [lr, #4]
   1817c:	mov	r5, r2
   18180:	str	r8, [sp, #24]
   18184:	mov	r8, r1
   18188:	ldr	r0, [sp, #16]
   1818c:	ldr	r2, [r8, #4]
   18190:	ldr	r3, [pc, #1140]	; 1860c <__generate_code_for_binary_boolean_expression@@Base+0x1bd8>
   18194:	adds	ip, r4, #8
   18198:	adc	r1, r0, #0
   1819c:	mov	r0, #0
   181a0:	ldr	r3, [pc, r3]
   181a4:	subs	r3, r3, ip
   181a8:	sbcs	r1, r2, r1
   181ac:	bcs	18224 <__generate_code_for_binary_boolean_expression@@Base+0x17f0>
   181b0:	ldr	r5, [pc, #1112]	; 18610 <__generate_code_for_binary_boolean_expression@@Base+0x1bdc>
   181b4:	mov	r0, #3
   181b8:	ldr	r1, [sp, #16]
   181bc:	orr	r0, r0, #131072	; 0x20000
   181c0:	adds	r0, r4, r0
   181c4:	adc	r1, r1, #0
   181c8:	adds	r0, r0, #4
   181cc:	adc	r1, r1, #0
   181d0:	mvn	r2, #0
   181d4:	and	r9, r1, r2
   181d8:	mov	r1, #16646144	; 0xfe0000
   181dc:	orr	r1, r1, #-16777216	; 0xff000000
   181e0:	and	r4, r0, r1
   181e4:	ldr	r0, [sp, #20]
   181e8:	mov	r1, r4
   181ec:	add	r5, pc, r5
   181f0:	bl	11f70 <realloc@plt>
   181f4:	ldr	ip, [pc, #1048]	; 18614 <__generate_code_for_binary_boolean_expression@@Base+0x1be0>
   181f8:	ldr	lr, [pc, #1048]	; 18618 <__generate_code_for_binary_boolean_expression@@Base+0x1be4>
   181fc:	stm	r8, {r4, r9}
   18200:	add	lr, pc, lr
   18204:	str	r0, [r5]
   18208:	str	r0, [sp, #20]
   1820c:	ldr	r5, [lr, #4]
   18210:	ldr	r9, [pc, #1028]	; 1861c <__generate_code_for_binary_boolean_expression@@Base+0x1be8>
   18214:	add	ip, pc, ip
   18218:	mov	r6, ip
   1821c:	mov	r0, #0
   18220:	ldr	r9, [pc, r9]
   18224:	ldr	r8, [sp, #24]
   18228:	b	182d0 <__generate_code_for_binary_boolean_expression@@Base+0x189c>
   1822c:	ldr	r1, [sp, #16]
   18230:	mov	r0, #0
   18234:	b	1829c <__generate_code_for_binary_boolean_expression@@Base+0x1868>
   18238:	ldr	r1, [pc, #904]	; 185c8 <__generate_code_for_binary_boolean_expression@@Base+0x1b94>
   1823c:	add	r1, pc, r1
   18240:	b	1824c <__generate_code_for_binary_boolean_expression@@Base+0x1818>
   18244:	ldr	r1, [pc, #904]	; 185d4 <__generate_code_for_binary_boolean_expression@@Base+0x1ba0>
   18248:	add	r1, pc, r1
   1824c:	ldr	r0, [pc, #888]	; 185cc <__generate_code_for_binary_boolean_expression@@Base+0x1b98>
   18250:	ldr	r0, [pc, r0]
   18254:	ldr	r0, [r0]
   18258:	ldr	r2, [pc, #880]	; 185d0 <__generate_code_for_binary_boolean_expression@@Base+0x1b9c>
   1825c:	ldr	r2, [pc, r2]
   18260:	sub	sp, fp, #28
   18264:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18268:	b	1200c <fprintf@plt>
   1826c:	ldr	lr, [pc, #868]	; 185d8 <__generate_code_for_binary_boolean_expression@@Base+0x1ba4>
   18270:	ldr	ip, [pc, #868]	; 185dc <__generate_code_for_binary_boolean_expression@@Base+0x1ba8>
   18274:	mov	r0, r1
   18278:	add	lr, pc, lr
   1827c:	add	ip, pc, ip
   18280:	mov	r6, ip
   18284:	mov	ip, r7
   18288:	mov	r9, r4
   1828c:	ldr	r5, [sp, #8]
   18290:	ldr	r4, [sp, #4]
   18294:	ldr	r1, [sp, #16]
   18298:	mov	r7, #0
   1829c:	str	r4, [lr]
   182a0:	str	r1, [lr, #4]
   182a4:	ldr	r2, [sp, #20]
   182a8:	mov	r1, #1
   182ac:	lsl	r8, ip, #1
   182b0:	strb	r7, [r2, r4]!
   182b4:	strb	r1, [r2, #3]
   182b8:	mov	r1, #161	; 0xa1
   182bc:	strb	r7, [r2, #1]
   182c0:	strb	r1, [r2, #2]
   182c4:	str	r9, [lr]
   182c8:	str	r5, [lr, #4]
   182cc:	mov	r7, ip
   182d0:	ldr	r3, [sp, #20]
   182d4:	lsr	r1, r8, #16
   182d8:	mov	ip, r3
   182dc:	strb	r8, [r3, r9]!
   182e0:	lsr	r4, r8, #24
   182e4:	lsr	r2, r8, #8
   182e8:	adds	r8, r9, #4
   182ec:	strb	r1, [r3, #2]
   182f0:	adc	r1, r5, #0
   182f4:	cmp	r7, #0
   182f8:	strb	r4, [r3, #3]
   182fc:	strb	r2, [r3, #1]
   18300:	str	r8, [lr]
   18304:	str	r1, [lr, #4]
   18308:	str	r7, [sp, #24]
   1830c:	beq	185a8 <__generate_code_for_binary_boolean_expression@@Base+0x1b74>
   18310:	ldr	r7, [pc, #776]	; 18620 <__generate_code_for_binary_boolean_expression@@Base+0x1bec>
   18314:	mov	r4, lr
   18318:	mov	r2, r0
   1831c:	add	r7, pc, r7
   18320:	str	r0, [sp, #12]
   18324:	cmp	r0, #0
   18328:	mov	r0, r4
   1832c:	str	r2, [sp, #16]
   18330:	beq	1833c <__generate_code_for_binary_boolean_expression@@Base+0x1908>
   18334:	ldrd	r2, [r2]
   18338:	b	18344 <__generate_code_for_binary_boolean_expression@@Base+0x1910>
   1833c:	mov	r2, #0
   18340:	mov	r3, #0
   18344:	ldrd	r4, [sl]
   18348:	adds	r4, r4, r2
   1834c:	adc	r5, r5, r3
   18350:	strd	r4, [sl]
   18354:	ldrb	r2, [r6]
   18358:	str	sl, [sp, #20]
   1835c:	cmp	r2, #0
   18360:	beq	1842c <__generate_code_for_binary_boolean_expression@@Base+0x19f8>
   18364:	ldr	r3, [r7, #4]
   18368:	ldr	r6, [pc, #692]	; 18624 <__generate_code_for_binary_boolean_expression@@Base+0x1bf0>
   1836c:	adds	r2, r8, #4
   18370:	adc	r9, r1, #0
   18374:	ldr	r6, [pc, r6]
   18378:	subs	r2, r6, r2
   1837c:	sbcs	r2, r3, r9
   18380:	bcs	18468 <__generate_code_for_binary_boolean_expression@@Base+0x1a34>
   18384:	mov	r2, #3
   18388:	orr	r2, r2, #131072	; 0x20000
   1838c:	adds	r0, r8, r2
   18390:	adc	r1, r1, #0
   18394:	mvn	r2, #0
   18398:	and	r8, r1, r2
   1839c:	mov	r1, #16646144	; 0xfe0000
   183a0:	orr	r1, r1, #-16777216	; 0xff000000
   183a4:	and	r6, r0, r1
   183a8:	mov	r0, ip
   183ac:	mov	r1, r6
   183b0:	bl	11f70 <realloc@plt>
   183b4:	ldr	ip, [pc, #620]	; 18628 <__generate_code_for_binary_boolean_expression@@Base+0x1bf4>
   183b8:	ldr	lr, [pc, #620]	; 1862c <__generate_code_for_binary_boolean_expression@@Base+0x1bf8>
   183bc:	stm	r7, {r6, r8}
   183c0:	mov	r3, r0
   183c4:	ldr	r0, [pc, #612]	; 18630 <__generate_code_for_binary_boolean_expression@@Base+0x1bfc>
   183c8:	add	lr, pc, lr
   183cc:	mov	r9, lr
   183d0:	add	r0, pc, r0
   183d4:	add	ip, pc, ip
   183d8:	str	r3, [r0]
   183dc:	mov	lr, ip
   183e0:	ldrb	ip, [ip]
   183e4:	ldr	r1, [r9, #4]
   183e8:	ldr	r8, [pc, #580]	; 18634 <__generate_code_for_binary_boolean_expression@@Base+0x1c00>
   183ec:	mov	r7, r3
   183f0:	lsr	r2, r4, #24
   183f4:	ldr	r8, [pc, r8]
   183f8:	lsr	r6, r4, #16
   183fc:	strb	r4, [r7, r8]!
   18400:	strb	r2, [r7, #3]
   18404:	lsr	r2, r4, #8
   18408:	strb	r2, [r7, #1]
   1840c:	adds	r2, r8, #4
   18410:	mov	r4, r9
   18414:	adc	r9, r1, #0
   18418:	cmp	ip, #1
   1841c:	strb	r6, [r7, #2]
   18420:	stm	r4, {r2, r9}
   18424:	beq	1849c <__generate_code_for_binary_boolean_expression@@Base+0x1a68>
   18428:	b	18548 <__generate_code_for_binary_boolean_expression@@Base+0x1b14>
   1842c:	mov	r7, ip
   18430:	lsr	r2, r4, #24
   18434:	strb	r4, [r7, r8]!
   18438:	lsr	r9, r4, #16
   1843c:	strb	r2, [r7, #3]
   18440:	adds	r2, r8, #4
   18444:	mov	lr, r6
   18448:	lsr	r6, r4, #8
   1844c:	strb	r9, [r7, #2]
   18450:	adc	r9, r1, #0
   18454:	mov	r4, r0
   18458:	strb	r6, [r7, #1]
   1845c:	mov	r3, ip
   18460:	stm	r4, {r2, r9}
   18464:	b	18548 <__generate_code_for_binary_boolean_expression@@Base+0x1b14>
   18468:	mov	r6, ip
   1846c:	lsr	r2, r4, #24
   18470:	strb	r4, [r6, r8]!
   18474:	lsr	r9, r4, #16
   18478:	strb	r2, [r6, #3]
   1847c:	adds	r2, r8, #4
   18480:	lsr	r7, r4, #8
   18484:	strb	r9, [r6, #2]
   18488:	adc	r9, r1, #0
   1848c:	mov	r4, r0
   18490:	strb	r7, [r6, #1]
   18494:	mov	r3, ip
   18498:	stm	r4, {r2, r9}
   1849c:	ldr	lr, [pc, #404]	; 18638 <__generate_code_for_binary_boolean_expression@@Base+0x1c04>
   184a0:	mov	r0, r4
   184a4:	adds	r7, r8, #8
   184a8:	add	lr, pc, lr
   184ac:	adc	ip, r1, #0
   184b0:	ldr	r4, [lr, #4]
   184b4:	ldr	r6, [pc, #384]	; 1863c <__generate_code_for_binary_boolean_expression@@Base+0x1c08>
   184b8:	ldr	r6, [pc, r6]
   184bc:	subs	r7, r6, r7
   184c0:	sbcs	r7, r4, ip
   184c4:	bcs	1853c <__generate_code_for_binary_boolean_expression@@Base+0x1b08>
   184c8:	mov	r2, #3
   184cc:	orr	r2, r2, #131072	; 0x20000
   184d0:	adds	r0, r8, r2
   184d4:	adc	r1, r1, #0
   184d8:	adds	r0, r0, #4
   184dc:	adc	r1, r1, #0
   184e0:	mvn	r2, #0
   184e4:	and	r7, r1, r2
   184e8:	mov	r1, #16646144	; 0xfe0000
   184ec:	orr	r1, r1, #-16777216	; 0xff000000
   184f0:	and	r6, r0, r1
   184f4:	mov	r0, r3
   184f8:	mov	r1, r6
   184fc:	mov	r8, lr
   18500:	bl	11f70 <realloc@plt>
   18504:	ldr	lr, [pc, #312]	; 18644 <__generate_code_for_binary_boolean_expression@@Base+0x1c10>
   18508:	strd	r6, [r8]
   1850c:	mov	r3, r0
   18510:	add	lr, pc, lr
   18514:	mov	r4, lr
   18518:	ldr	r9, [lr, #4]
   1851c:	ldr	r0, [pc, #292]	; 18648 <__generate_code_for_binary_boolean_expression@@Base+0x1c14>
   18520:	add	r0, pc, r0
   18524:	str	r3, [r0]
   18528:	ldr	r2, [pc, #284]	; 1864c <__generate_code_for_binary_boolean_expression@@Base+0x1c18>
   1852c:	ldr	r2, [pc, r2]
   18530:	ldr	lr, [pc, #280]	; 18650 <__generate_code_for_binary_boolean_expression@@Base+0x1c1c>
   18534:	add	lr, pc, lr
   18538:	b	18548 <__generate_code_for_binary_boolean_expression@@Base+0x1b14>
   1853c:	ldr	lr, [pc, #252]	; 18640 <__generate_code_for_binary_boolean_expression@@Base+0x1c0c>
   18540:	mov	r4, r0
   18544:	add	lr, pc, lr
   18548:	mov	ip, r3
   1854c:	lsr	r1, r5, #16
   18550:	strb	r5, [r3, r2]!
   18554:	lsr	r0, r5, #24
   18558:	lsr	r7, r5, #8
   1855c:	adds	r8, r2, #4
   18560:	strb	r1, [r3, #2]
   18564:	adc	r1, r9, #0
   18568:	strb	r0, [r3, #3]
   1856c:	strb	r7, [r3, #1]
   18570:	str	r8, [r4]
   18574:	str	r1, [r4, #4]
   18578:	ldr	r0, [sp, #24]
   1857c:	mov	r6, lr
   18580:	subs	r0, r0, #1
   18584:	str	r0, [sp, #24]
   18588:	ldr	sl, [sp, #20]
   1858c:	ldr	r2, [sp, #16]
   18590:	ldr	r0, [sp, #12]
   18594:	ldr	r7, [pc, #184]	; 18654 <__generate_code_for_binary_boolean_expression@@Base+0x1c20>
   18598:	add	sl, sl, #8
   1859c:	add	r2, r2, #8
   185a0:	add	r7, pc, r7
   185a4:	bne	18324 <__generate_code_for_binary_boolean_expression@@Base+0x18f0>
   185a8:	sub	sp, fp, #28
   185ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   185b0:	b	11f28 <free@plt>
   185b4:	strdeq	r5, [r1], -r8
   185b8:	strdeq	r5, [r1], -r4
   185bc:	andeq	r5, r1, r8, ror #3
   185c0:	andeq	r5, r1, ip, asr #3
   185c4:	andeq	r5, r1, r0, asr #1
   185c8:	strdeq	r3, [r0], -r4
   185cc:	andeq	r3, r1, r8, ror #28
   185d0:	andeq	r4, r1, r4, lsl #29
   185d4:	andeq	r3, r0, r2, lsr r2
   185d8:	andeq	r4, r1, r0, lsl #29
   185dc:	andeq	r4, r1, r8, ror #28
   185e0:	strdeq	r4, [r1], -r0
   185e4:	andeq	r4, r1, r8, asr #31
   185e8:			; <UNDEFINED> instruction: 0x000151bc
   185ec:	andeq	r5, r1, r8, lsr #3
   185f0:	andeq	r4, r1, ip, lsr #31
   185f4:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   185f8:	andeq	r5, r1, r4, ror #2
   185fc:	andeq	r5, r1, r4, asr #2
   18600:	andeq	r5, r1, r4, asr r1
   18604:	andeq	r5, r1, r4, asr #2
   18608:	andeq	r5, r1, ip, lsr #2
   1860c:	andeq	r4, r1, r0, asr pc
   18610:	andeq	r4, r1, r0, lsl #30
   18614:	ldrdeq	r4, [r1], -r0
   18618:	strdeq	r4, [r1], -r8
   1861c:	ldrdeq	r4, [r1], -r8
   18620:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   18624:	andeq	r4, r1, ip, ror sp
   18628:	andeq	r4, r1, r0, lsl sp
   1862c:	andeq	r4, r1, r0, lsr sp
   18630:	andeq	r4, r1, ip, lsl sp
   18634:	andeq	r4, r1, r4, lsl #26
   18638:	andeq	r4, r1, r8, asr #24
   1863c:	andeq	r4, r1, r8, lsr ip
   18640:	andeq	r4, r1, r0, lsr #23
   18644:	andeq	r4, r1, r8, ror #23
   18648:	andeq	r4, r1, ip, asr #23
   1864c:	andeq	r4, r1, ip, asr #23
   18650:			; <UNDEFINED> instruction: 0x00014bb0
   18654:	andeq	r4, r1, r0, asr fp
   18658:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1865c:	add	fp, sp, #28
   18660:	sub	sp, sp, #4
   18664:	ldr	r0, [pc, #3180]	; 192d8 <__generate_code_for_binary_boolean_expression@@Base+0x28a4>
   18668:	ldr	r0, [pc, r0]
   1866c:	cmp	r0, #0
   18670:	beq	18ccc <__generate_code_for_binary_boolean_expression@@Base+0x2298>
   18674:	ldr	sl, [pc, #3168]	; 192dc <__generate_code_for_binary_boolean_expression@@Base+0x28a8>
   18678:	add	sl, pc, sl
   1867c:	ldr	r6, [sl, #4]
   18680:	ldr	r5, [pc, #3160]	; 192e0 <__generate_code_for_binary_boolean_expression@@Base+0x28ac>
   18684:	ldr	r5, [pc, r5]
   18688:	ldr	r8, [pc, #3156]	; 192e4 <__generate_code_for_binary_boolean_expression@@Base+0x28b0>
   1868c:	add	r8, pc, r8
   18690:	ldrb	r0, [r8]
   18694:	cmp	r0, #0
   18698:	beq	1875c <__generate_code_for_binary_boolean_expression@@Base+0x1d28>
   1869c:	ldr	r9, [pc, #3164]	; 19300 <__generate_code_for_binary_boolean_expression@@Base+0x28cc>
   186a0:	adds	r2, r5, #4
   186a4:	adc	ip, r6, #0
   186a8:	add	r9, pc, r9
   186ac:	ldr	r0, [r9, #4]
   186b0:	ldr	r3, [pc, #3148]	; 19304 <__generate_code_for_binary_boolean_expression@@Base+0x28d0>
   186b4:	ldr	r3, [pc, r3]
   186b8:	subs	r3, r3, r2
   186bc:	sbcs	r0, r0, ip
   186c0:	bcs	187b0 <__generate_code_for_binary_boolean_expression@@Base+0x1d7c>
   186c4:	mov	r0, #7
   186c8:	orr	r0, r0, #131072	; 0x20000
   186cc:	adds	r0, r5, r0
   186d0:	adc	r1, r6, #0
   186d4:	subs	r0, r0, #4
   186d8:	sbc	r1, r1, #0
   186dc:	mvn	r2, #0
   186e0:	and	r5, r1, r2
   186e4:	mov	r1, #16646144	; 0xfe0000
   186e8:	orr	r1, r1, #-16777216	; 0xff000000
   186ec:	ldr	r4, [pc, #3096]	; 1930c <__generate_code_for_binary_boolean_expression@@Base+0x28d8>
   186f0:	and	r6, r0, r1
   186f4:	ldr	r0, [pc, #3092]	; 19310 <__generate_code_for_binary_boolean_expression@@Base+0x28dc>
   186f8:	mov	r1, r6
   186fc:	add	r4, pc, r4
   18700:	ldr	r0, [pc, r0]
   18704:	bl	11f70 <realloc@plt>
   18708:	str	r6, [r9]
   1870c:	str	r5, [r9, #4]
   18710:	str	r0, [r4]
   18714:	ldrb	r3, [r8]
   18718:	ldr	r6, [sl, #4]
   1871c:	ldr	r5, [pc, #3056]	; 19314 <__generate_code_for_binary_boolean_expression@@Base+0x28e0>
   18720:	mov	r2, r0
   18724:	mov	r1, #0
   18728:	mov	r7, #161	; 0xa1
   1872c:	ldr	r5, [pc, r5]
   18730:	strb	r1, [r2, r5]!
   18734:	strb	r7, [r2, #3]
   18738:	strb	r1, [r2, #2]
   1873c:	strb	r1, [r2, #1]
   18740:	adds	r2, r5, #4
   18744:	adc	ip, r6, #0
   18748:	mov	r7, #1
   1874c:	cmp	r3, #1
   18750:	stm	sl, {r2, ip}
   18754:	beq	187d8 <__generate_code_for_binary_boolean_expression@@Base+0x1da4>
   18758:	b	189b0 <__generate_code_for_binary_boolean_expression@@Base+0x1f7c>
   1875c:	ldr	r0, [pc, #2948]	; 192e8 <__generate_code_for_binary_boolean_expression@@Base+0x28b4>
   18760:	ldr	r0, [pc, r0]
   18764:	mov	r1, r0
   18768:	ldrb	r2, [r1, r5]!
   1876c:	ldrb	r3, [r1, #1]
   18770:	ldrb	r7, [r1, #2]
   18774:	ldrb	r1, [r1, #3]
   18778:	orr	r2, r2, r3, lsl #8
   1877c:	orr	r2, r2, r7, lsl #16
   18780:	orr	r3, r2, r1, lsl #24
   18784:	adds	r2, r5, #4
   18788:	adc	ip, r6, #0
   1878c:	cmp	r3, #-1593835520	; 0xa1000000
   18790:	stm	sl, {r2, ip}
   18794:	beq	18950 <__generate_code_for_binary_boolean_expression@@Base+0x1f1c>
   18798:	mov	r7, #1
   1879c:	cmn	r3, #1
   187a0:	beq	18990 <__generate_code_for_binary_boolean_expression@@Base+0x1f5c>
   187a4:	ldr	r1, [pc, #2880]	; 192ec <__generate_code_for_binary_boolean_expression@@Base+0x28b8>
   187a8:	add	r1, pc, r1
   187ac:	b	19090 <__generate_code_for_binary_boolean_expression@@Base+0x265c>
   187b0:	ldr	r0, [pc, #2896]	; 19308 <__generate_code_for_binary_boolean_expression@@Base+0x28d4>
   187b4:	mov	r3, #0
   187b8:	mov	r4, #161	; 0xa1
   187bc:	ldr	r0, [pc, r0]
   187c0:	mov	r7, r0
   187c4:	strb	r3, [r7, r5]!
   187c8:	strb	r4, [r7, #3]
   187cc:	strb	r3, [r7, #2]
   187d0:	strb	r3, [r7, #1]
   187d4:	stm	sl, {r2, ip}
   187d8:	ldr	r4, [r9, #4]
   187dc:	ldr	r1, [pc, #2868]	; 19318 <__generate_code_for_binary_boolean_expression@@Base+0x28e4>
   187e0:	adds	r3, r5, #8
   187e4:	adc	r7, r6, #0
   187e8:	ldr	r1, [pc, r1]
   187ec:	subs	r1, r1, r3
   187f0:	sbcs	r1, r4, r7
   187f4:	bcs	18880 <__generate_code_for_binary_boolean_expression@@Base+0x1e4c>
   187f8:	mov	r1, #7
   187fc:	orr	r1, r1, #131072	; 0x20000
   18800:	adds	r1, r5, r1
   18804:	adc	r2, r6, #0
   18808:	mvn	r3, #0
   1880c:	and	r5, r2, r3
   18810:	mov	r2, #16646144	; 0xfe0000
   18814:	orr	r2, r2, #-16777216	; 0xff000000
   18818:	ldr	r4, [pc, #2812]	; 1931c <__generate_code_for_binary_boolean_expression@@Base+0x28e8>
   1881c:	and	r6, r1, r2
   18820:	mov	r1, r6
   18824:	add	r4, pc, r4
   18828:	bl	11f70 <realloc@plt>
   1882c:	str	r6, [r9]
   18830:	str	r5, [r9, #4]
   18834:	str	r0, [r4]
   18838:	ldrb	r1, [r8]
   1883c:	ldr	ip, [sl, #4]
   18840:	ldr	r2, [pc, #2776]	; 19320 <__generate_code_for_binary_boolean_expression@@Base+0x28ec>
   18844:	mov	r7, r0
   18848:	mov	r3, #9
   1884c:	ldr	r2, [pc, r2]
   18850:	strb	r3, [r7, r2]!
   18854:	mov	r3, #0
   18858:	strb	r3, [r7, #3]
   1885c:	strb	r3, [r7, #2]
   18860:	strb	r3, [r7, #1]
   18864:	adds	r3, r2, #4
   18868:	adc	r5, ip, #0
   1886c:	mov	r7, #1
   18870:	cmp	r1, #1
   18874:	stm	sl, {r3, r5}
   18878:	beq	188a8 <__generate_code_for_binary_boolean_expression@@Base+0x1e74>
   1887c:	b	189d8 <__generate_code_for_binary_boolean_expression@@Base+0x1fa4>
   18880:	mov	r3, r0
   18884:	mov	r1, #9
   18888:	strb	r1, [r3, r2]!
   1888c:	mov	r1, #0
   18890:	strb	r1, [r3, #3]
   18894:	strb	r1, [r3, #2]
   18898:	strb	r1, [r3, #1]
   1889c:	adds	r3, r2, #4
   188a0:	adc	r5, ip, #0
   188a4:	stm	sl, {r3, r5}
   188a8:	ldr	r6, [r9, #4]
   188ac:	ldr	r4, [pc, #2672]	; 19324 <__generate_code_for_binary_boolean_expression@@Base+0x28f0>
   188b0:	adds	r1, r2, #8
   188b4:	adc	r7, ip, #0
   188b8:	ldr	r4, [pc, r4]
   188bc:	subs	r1, r4, r1
   188c0:	sbcs	r1, r6, r7
   188c4:	bcs	18d9c <__generate_code_for_binary_boolean_expression@@Base+0x2368>
   188c8:	mov	r1, #7
   188cc:	orr	r1, r1, #131072	; 0x20000
   188d0:	adds	r1, r2, r1
   188d4:	adc	r2, ip, #0
   188d8:	mvn	r3, #0
   188dc:	and	r5, r2, r3
   188e0:	mov	r2, #16646144	; 0xfe0000
   188e4:	orr	r2, r2, #-16777216	; 0xff000000
   188e8:	ldr	r4, [pc, #2616]	; 19328 <__generate_code_for_binary_boolean_expression@@Base+0x28f4>
   188ec:	and	r6, r1, r2
   188f0:	mov	r1, r6
   188f4:	add	r4, pc, r4
   188f8:	bl	11f70 <realloc@plt>
   188fc:	str	r6, [r9]
   18900:	str	r5, [r9, #4]
   18904:	str	r0, [r4]
   18908:	ldrb	r2, [r8]
   1890c:	ldr	r5, [sl, #4]
   18910:	ldr	r3, [pc, #2580]	; 1932c <__generate_code_for_binary_boolean_expression@@Base+0x28f8>
   18914:	mov	r7, r0
   18918:	mov	r1, #0
   1891c:	ldr	r3, [pc, r3]
   18920:	adds	r6, r3, #4
   18924:	strb	r1, [r7, r3]!
   18928:	strb	r1, [r7, #3]
   1892c:	strb	r1, [r7, #2]
   18930:	strb	r1, [r7, #1]
   18934:	adc	r1, r5, #0
   18938:	mov	r7, #1
   1893c:	cmp	r2, #1
   18940:	str	r6, [sl]
   18944:	str	r1, [sl, #4]
   18948:	bne	18a00 <__generate_code_for_binary_boolean_expression@@Base+0x1fcc>
   1894c:	b	18dc4 <__generate_code_for_binary_boolean_expression@@Base+0x2390>
   18950:	ldr	r3, [r0, r2]
   18954:	adds	r4, r5, #8
   18958:	adc	r7, r6, #0
   1895c:	cmp	r3, #9
   18960:	stm	sl, {r4, r7}
   18964:	bne	19088 <__generate_code_for_binary_boolean_expression@@Base+0x2654>
   18968:	ldr	r3, [pc, #2444]	; 192fc <__generate_code_for_binary_boolean_expression@@Base+0x28c8>
   1896c:	adds	r4, r5, #20
   18970:	adc	r7, r6, #0
   18974:	add	r3, pc, r3
   18978:	add	r6, r0, r5
   1897c:	ldrb	r3, [r3]
   18980:	ldr	r6, [r6, #16]
   18984:	stm	sl, {r4, r7}
   18988:	eor	r3, r3, #1
   1898c:	add	r7, r6, r3
   18990:	mov	r6, r0
   18994:	mov	r3, #0
   18998:	strb	r3, [r6, r5]!
   1899c:	mov	r5, #161	; 0xa1
   189a0:	strb	r5, [r6, #3]
   189a4:	strb	r3, [r6, #2]
   189a8:	strb	r3, [r6, #1]
   189ac:	stm	sl, {r2, ip}
   189b0:	mov	r3, r0
   189b4:	mov	r1, #9
   189b8:	strb	r1, [r3, r2]!
   189bc:	mov	r1, #0
   189c0:	strb	r1, [r3, #3]
   189c4:	strb	r1, [r3, #2]
   189c8:	strb	r1, [r3, #1]
   189cc:	adds	r3, r2, #4
   189d0:	adc	r5, ip, #0
   189d4:	stm	sl, {r3, r5}
   189d8:	mov	r2, r0
   189dc:	mov	r1, #0
   189e0:	strb	r1, [r2, r3]!
   189e4:	adds	r6, r3, #4
   189e8:	strb	r1, [r2, #3]
   189ec:	strb	r1, [r2, #2]
   189f0:	strb	r1, [r2, #1]
   189f4:	adc	r1, r5, #0
   189f8:	str	r6, [sl]
   189fc:	str	r1, [sl, #4]
   18a00:	mov	r3, r0
   18a04:	mov	r2, #0
   18a08:	strb	r2, [r3, r6]!
   18a0c:	strb	r2, [r3, #3]
   18a10:	strb	r2, [r3, #2]
   18a14:	strb	r2, [r3, #1]
   18a18:	adds	r2, r6, #4
   18a1c:	adc	r3, r1, #0
   18a20:	strd	r2, [sl]
   18a24:	lsr	r1, r7, #24
   18a28:	strb	r7, [r0, r2]!
   18a2c:	lsr	r6, r7, #16
   18a30:	lsr	r5, r7, #8
   18a34:	strb	r1, [r0, #3]
   18a38:	strb	r6, [r0, #2]
   18a3c:	strb	r5, [r0, #1]
   18a40:	ldrb	r0, [r8]
   18a44:	adds	r4, r2, #4
   18a48:	adc	r5, r3, #0
   18a4c:	cmp	r0, #0
   18a50:	strd	r4, [sl]
   18a54:	beq	18b08 <__generate_code_for_binary_boolean_expression@@Base+0x20d4>
   18a58:	ldr	r9, [pc, #2284]	; 1934c <__generate_code_for_binary_boolean_expression@@Base+0x2918>
   18a5c:	adds	r0, r2, #8
   18a60:	adc	r1, r3, #0
   18a64:	add	r9, pc, r9
   18a68:	ldr	r7, [r9, #4]
   18a6c:	ldr	r6, [pc, #2268]	; 19350 <__generate_code_for_binary_boolean_expression@@Base+0x291c>
   18a70:	ldr	r6, [pc, r6]
   18a74:	subs	r0, r6, r0
   18a78:	sbcs	r0, r7, r1
   18a7c:	bcs	18cd4 <__generate_code_for_binary_boolean_expression@@Base+0x22a0>
   18a80:	mov	r0, #7
   18a84:	orr	r0, r0, #131072	; 0x20000
   18a88:	adds	r0, r2, r0
   18a8c:	adc	r1, r3, #0
   18a90:	mvn	r2, #0
   18a94:	and	r5, r1, r2
   18a98:	mov	r1, #16646144	; 0xfe0000
   18a9c:	orr	r1, r1, #-16777216	; 0xff000000
   18aa0:	ldr	r4, [pc, #2268]	; 19384 <__generate_code_for_binary_boolean_expression@@Base+0x2950>
   18aa4:	and	r6, r0, r1
   18aa8:	ldr	r0, [pc, #2264]	; 19388 <__generate_code_for_binary_boolean_expression@@Base+0x2954>
   18aac:	mov	r1, r6
   18ab0:	add	r4, pc, r4
   18ab4:	ldr	r0, [pc, r0]
   18ab8:	bl	11f70 <realloc@plt>
   18abc:	str	r6, [r9]
   18ac0:	str	r5, [r9, #4]
   18ac4:	str	r0, [r4]
   18ac8:	ldrb	r1, [r8]
   18acc:	ldr	r5, [sl, #4]
   18ad0:	ldr	r4, [pc, #2228]	; 1938c <__generate_code_for_binary_boolean_expression@@Base+0x2958>
   18ad4:	mov	r3, r0
   18ad8:	mov	r2, #0
   18adc:	ldr	r4, [pc, r4]
   18ae0:	strb	r2, [r3, r4]!
   18ae4:	strb	r2, [r3, #3]
   18ae8:	strb	r2, [r3, #2]
   18aec:	strb	r2, [r3, #1]
   18af0:	adds	r2, r4, #4
   18af4:	adc	r3, r5, #0
   18af8:	cmp	r1, #0
   18afc:	strd	r2, [sl]
   18b00:	beq	18b34 <__generate_code_for_binary_boolean_expression@@Base+0x2100>
   18b04:	b	18d00 <__generate_code_for_binary_boolean_expression@@Base+0x22cc>
   18b08:	ldr	r0, [pc, #2104]	; 19348 <__generate_code_for_binary_boolean_expression@@Base+0x2914>
   18b0c:	adds	r2, r2, #8
   18b10:	mov	r1, #0
   18b14:	adc	r3, r3, #0
   18b18:	ldr	r0, [pc, r0]
   18b1c:	mov	r7, r0
   18b20:	strb	r1, [r7, r4]!
   18b24:	strb	r1, [r7, #3]
   18b28:	strb	r1, [r7, #2]
   18b2c:	strb	r1, [r7, #1]
   18b30:	strd	r2, [sl]
   18b34:	mov	r7, r0
   18b38:	mov	r1, #0
   18b3c:	strb	r1, [r7, r2]!
   18b40:	strb	r1, [r7, #3]
   18b44:	strb	r1, [r7, #2]
   18b48:	strb	r1, [r7, #1]
   18b4c:	adds	r1, r2, #4
   18b50:	adc	r5, r3, #0
   18b54:	stm	sl, {r1, r5}
   18b58:	mov	r3, r0
   18b5c:	mov	r2, #0
   18b60:	strb	r2, [r3, r1]!
   18b64:	strb	r2, [r3, #3]
   18b68:	strb	r2, [r3, #2]
   18b6c:	strb	r2, [r3, #1]
   18b70:	adds	r2, r1, #4
   18b74:	adc	r3, r5, #0
   18b78:	strd	r2, [sl]
   18b7c:	mov	r7, r0
   18b80:	mov	r1, #0
   18b84:	strb	r1, [r7, r2]!
   18b88:	strb	r1, [r7, #3]
   18b8c:	strb	r1, [r7, #2]
   18b90:	strb	r1, [r7, #1]
   18b94:	adds	r1, r2, #4
   18b98:	adc	r5, r3, #0
   18b9c:	stm	sl, {r1, r5}
   18ba0:	mov	r3, r0
   18ba4:	mov	r2, #0
   18ba8:	strb	r2, [r3, r1]!
   18bac:	adds	r4, r1, #4
   18bb0:	strb	r2, [r3, #3]
   18bb4:	strb	r2, [r3, #2]
   18bb8:	strb	r2, [r3, #1]
   18bbc:	adc	r3, r5, #0
   18bc0:	str	r4, [sl]
   18bc4:	str	r3, [sl, #4]
   18bc8:	mov	r2, r0
   18bcc:	mov	r1, #0
   18bd0:	strb	r1, [r2, r4]!
   18bd4:	strb	r1, [r2, #3]
   18bd8:	strb	r1, [r2, #2]
   18bdc:	strb	r1, [r2, #1]
   18be0:	adds	r2, r4, #4
   18be4:	adc	r1, r3, #0
   18be8:	str	r2, [sl]
   18bec:	str	r1, [sl, #4]
   18bf0:	mov	r3, r0
   18bf4:	mov	r4, #0
   18bf8:	strb	r4, [r3, r2]!
   18bfc:	mov	r7, #163	; 0xa3
   18c00:	strb	r7, [r3, #3]
   18c04:	strb	r4, [r3, #2]
   18c08:	strb	r4, [r3, #1]
   18c0c:	ldrb	r7, [r8]
   18c10:	adds	r6, r2, #4
   18c14:	adc	r3, r1, #0
   18c18:	cmp	r7, #1
   18c1c:	str	r6, [sl]
   18c20:	str	r3, [sl, #4]
   18c24:	bne	18c98 <__generate_code_for_binary_boolean_expression@@Base+0x2264>
   18c28:	ldr	r8, [pc, #1852]	; 1936c <__generate_code_for_binary_boolean_expression@@Base+0x2938>
   18c2c:	adds	lr, r2, #8
   18c30:	adc	ip, r1, #0
   18c34:	add	r8, pc, r8
   18c38:	ldr	r5, [r8, #4]
   18c3c:	ldr	r7, [pc, #1836]	; 19370 <__generate_code_for_binary_boolean_expression@@Base+0x293c>
   18c40:	ldr	r7, [pc, r7]
   18c44:	subs	r7, r7, lr
   18c48:	sbcs	r7, r5, ip
   18c4c:	bcs	18c98 <__generate_code_for_binary_boolean_expression@@Base+0x2264>
   18c50:	mov	r3, #7
   18c54:	orr	r3, r3, #131072	; 0x20000
   18c58:	adds	r2, r2, r3
   18c5c:	adc	r1, r1, #0
   18c60:	mvn	r3, #0
   18c64:	and	r7, r1, r3
   18c68:	mov	r1, #16646144	; 0xfe0000
   18c6c:	orr	r1, r1, #-16777216	; 0xff000000
   18c70:	ldr	r5, [pc, #1788]	; 19374 <__generate_code_for_binary_boolean_expression@@Base+0x2940>
   18c74:	and	r6, r2, r1
   18c78:	mov	r1, r6
   18c7c:	add	r5, pc, r5
   18c80:	bl	11f70 <realloc@plt>
   18c84:	strd	r6, [r8]
   18c88:	str	r0, [r5]
   18c8c:	ldr	r3, [sl, #4]
   18c90:	ldr	r6, [pc, #1760]	; 19378 <__generate_code_for_binary_boolean_expression@@Base+0x2944>
   18c94:	ldr	r6, [pc, r6]
   18c98:	ldr	r0, [pc, #1756]	; 1937c <__generate_code_for_binary_boolean_expression@@Base+0x2948>
   18c9c:	ldr	r1, [pc, #1756]	; 19380 <__generate_code_for_binary_boolean_expression@@Base+0x294c>
   18ca0:	adds	r2, r6, #4
   18ca4:	add	r0, pc, r0
   18ca8:	adc	r3, r3, #0
   18cac:	ldr	r1, [pc, r1]
   18cb0:	strb	r4, [r1, r6]!
   18cb4:	strb	r4, [r1, #3]
   18cb8:	strb	r4, [r1, #2]
   18cbc:	strb	r4, [r1, #1]
   18cc0:	mov	r1, #1
   18cc4:	strd	r2, [sl]
   18cc8:	strb	r1, [r0]
   18ccc:	sub	sp, fp, #28
   18cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18cd4:	ldr	r0, [pc, #1656]	; 19354 <__generate_code_for_binary_boolean_expression@@Base+0x2920>
   18cd8:	adds	r2, r2, #8
   18cdc:	mov	r1, #0
   18ce0:	adc	r3, r3, #0
   18ce4:	ldr	r0, [pc, r0]
   18ce8:	mov	r7, r0
   18cec:	strb	r1, [r7, r4]!
   18cf0:	strb	r1, [r7, #3]
   18cf4:	strb	r1, [r7, #2]
   18cf8:	strb	r1, [r7, #1]
   18cfc:	strd	r2, [sl]
   18d00:	ldr	r6, [r9, #4]
   18d04:	ldr	r1, [pc, #1668]	; 19390 <__generate_code_for_binary_boolean_expression@@Base+0x295c>
   18d08:	adds	ip, r4, #8
   18d0c:	adc	r7, r5, #0
   18d10:	ldr	r1, [pc, r1]
   18d14:	subs	r1, r1, ip
   18d18:	sbcs	r1, r6, r7
   18d1c:	bcs	18e68 <__generate_code_for_binary_boolean_expression@@Base+0x2434>
   18d20:	mov	r1, #7
   18d24:	orr	r1, r1, #131072	; 0x20000
   18d28:	adds	r1, r4, r1
   18d2c:	adc	r2, r5, #0
   18d30:	mvn	r3, #0
   18d34:	and	r5, r2, r3
   18d38:	mov	r2, #16646144	; 0xfe0000
   18d3c:	orr	r2, r2, #-16777216	; 0xff000000
   18d40:	ldr	r6, [pc, #1612]	; 19394 <__generate_code_for_binary_boolean_expression@@Base+0x2960>
   18d44:	and	r4, r1, r2
   18d48:	mov	r1, r4
   18d4c:	add	r6, pc, r6
   18d50:	bl	11f70 <realloc@plt>
   18d54:	str	r0, [r6]
   18d58:	strd	r4, [r9]
   18d5c:	ldrb	r7, [r8]
   18d60:	ldr	r3, [sl, #4]
   18d64:	ldr	r2, [pc, #1580]	; 19398 <__generate_code_for_binary_boolean_expression@@Base+0x2964>
   18d68:	mov	r6, r0
   18d6c:	mov	r1, #0
   18d70:	ldr	r2, [pc, r2]
   18d74:	strb	r1, [r6, r2]!
   18d78:	strb	r1, [r6, #3]
   18d7c:	strb	r1, [r6, #2]
   18d80:	strb	r1, [r6, #1]
   18d84:	adds	r1, r2, #4
   18d88:	adc	r5, r3, #0
   18d8c:	cmp	r7, #1
   18d90:	stm	sl, {r1, r5}
   18d94:	bne	18b58 <__generate_code_for_binary_boolean_expression@@Base+0x2124>
   18d98:	b	18e8c <__generate_code_for_binary_boolean_expression@@Base+0x2458>
   18d9c:	mov	r2, r0
   18da0:	mov	r1, #0
   18da4:	strb	r1, [r2, r3]!
   18da8:	adds	r6, r3, #4
   18dac:	strb	r1, [r2, #3]
   18db0:	strb	r1, [r2, #2]
   18db4:	strb	r1, [r2, #1]
   18db8:	adc	r1, r5, #0
   18dbc:	str	r6, [sl]
   18dc0:	str	r1, [sl, #4]
   18dc4:	ldr	r4, [r9, #4]
   18dc8:	ldr	r2, [pc, #1376]	; 19330 <__generate_code_for_binary_boolean_expression@@Base+0x28fc>
   18dcc:	adds	ip, r3, #8
   18dd0:	adc	r7, r5, #0
   18dd4:	ldr	r2, [pc, r2]
   18dd8:	subs	r2, r2, ip
   18ddc:	sbcs	r2, r4, r7
   18de0:	bcs	18f2c <__generate_code_for_binary_boolean_expression@@Base+0x24f8>
   18de4:	mov	r1, #7
   18de8:	orr	r1, r1, #131072	; 0x20000
   18dec:	adds	r1, r3, r1
   18df0:	adc	r2, r5, #0
   18df4:	mvn	r3, #0
   18df8:	and	r5, r2, r3
   18dfc:	mov	r2, #16646144	; 0xfe0000
   18e00:	orr	r2, r2, #-16777216	; 0xff000000
   18e04:	ldr	r4, [pc, #1320]	; 19334 <__generate_code_for_binary_boolean_expression@@Base+0x2900>
   18e08:	and	r6, r1, r2
   18e0c:	mov	r1, r6
   18e10:	add	r4, pc, r4
   18e14:	bl	11f70 <realloc@plt>
   18e18:	str	r6, [r9]
   18e1c:	str	r5, [r9, #4]
   18e20:	str	r0, [r4]
   18e24:	ldrb	r5, [r8]
   18e28:	ldr	r1, [sl, #4]
   18e2c:	ldr	r6, [pc, #1284]	; 19338 <__generate_code_for_binary_boolean_expression@@Base+0x2904>
   18e30:	mov	r3, r0
   18e34:	mov	r2, #0
   18e38:	mov	r7, #1
   18e3c:	ldr	r6, [pc, r6]
   18e40:	strb	r2, [r3, r6]!
   18e44:	strb	r2, [r3, #3]
   18e48:	strb	r2, [r3, #2]
   18e4c:	strb	r2, [r3, #1]
   18e50:	adds	r2, r6, #4
   18e54:	adc	r3, r1, #0
   18e58:	cmp	r5, #1
   18e5c:	strd	r2, [sl]
   18e60:	bne	18a24 <__generate_code_for_binary_boolean_expression@@Base+0x1ff0>
   18e64:	b	18f50 <__generate_code_for_binary_boolean_expression@@Base+0x251c>
   18e68:	mov	r7, r0
   18e6c:	mov	r1, #0
   18e70:	strb	r1, [r7, r2]!
   18e74:	strb	r1, [r7, #3]
   18e78:	strb	r1, [r7, #2]
   18e7c:	strb	r1, [r7, #1]
   18e80:	adds	r1, r2, #4
   18e84:	adc	r5, r3, #0
   18e88:	stm	sl, {r1, r5}
   18e8c:	ldr	r4, [r9, #4]
   18e90:	ldr	r6, [pc, #1284]	; 1939c <__generate_code_for_binary_boolean_expression@@Base+0x2968>
   18e94:	adds	r7, r2, #8
   18e98:	adc	ip, r3, #0
   18e9c:	ldr	r6, [pc, r6]
   18ea0:	subs	r7, r6, r7
   18ea4:	sbcs	r7, r4, ip
   18ea8:	bcs	18fc4 <__generate_code_for_binary_boolean_expression@@Base+0x2590>
   18eac:	mov	r1, #7
   18eb0:	orr	r1, r1, #131072	; 0x20000
   18eb4:	adds	r1, r2, r1
   18eb8:	adc	r2, r3, #0
   18ebc:	mvn	r3, #0
   18ec0:	and	r5, r2, r3
   18ec4:	mov	r2, #16646144	; 0xfe0000
   18ec8:	orr	r2, r2, #-16777216	; 0xff000000
   18ecc:	ldr	r4, [pc, #1228]	; 193a0 <__generate_code_for_binary_boolean_expression@@Base+0x296c>
   18ed0:	and	r6, r1, r2
   18ed4:	mov	r1, r6
   18ed8:	add	r4, pc, r4
   18edc:	bl	11f70 <realloc@plt>
   18ee0:	str	r6, [r9]
   18ee4:	str	r5, [r9, #4]
   18ee8:	str	r0, [r4]
   18eec:	ldrb	r7, [r8]
   18ef0:	ldr	r5, [sl, #4]
   18ef4:	ldr	r1, [pc, #1192]	; 193a4 <__generate_code_for_binary_boolean_expression@@Base+0x2970>
   18ef8:	mov	r3, r0
   18efc:	mov	r2, #0
   18f00:	ldr	r1, [pc, r1]
   18f04:	strb	r2, [r3, r1]!
   18f08:	strb	r2, [r3, #3]
   18f0c:	strb	r2, [r3, #2]
   18f10:	strb	r2, [r3, #1]
   18f14:	adds	r2, r1, #4
   18f18:	adc	r3, r5, #0
   18f1c:	cmp	r7, #1
   18f20:	strd	r2, [sl]
   18f24:	bne	18b7c <__generate_code_for_binary_boolean_expression@@Base+0x2148>
   18f28:	b	18fe8 <__generate_code_for_binary_boolean_expression@@Base+0x25b4>
   18f2c:	mov	r3, r0
   18f30:	mov	r2, #0
   18f34:	strb	r2, [r3, r6]!
   18f38:	strb	r2, [r3, #3]
   18f3c:	strb	r2, [r3, #2]
   18f40:	strb	r2, [r3, #1]
   18f44:	adds	r2, r6, #4
   18f48:	adc	r3, r1, #0
   18f4c:	strd	r2, [sl]
   18f50:	ldr	r4, [r9, #4]
   18f54:	ldr	r5, [pc, #992]	; 1933c <__generate_code_for_binary_boolean_expression@@Base+0x2908>
   18f58:	adds	lr, r6, #8
   18f5c:	adc	ip, r1, #0
   18f60:	mov	r7, #1
   18f64:	ldr	r5, [pc, r5]
   18f68:	subs	r5, r5, lr
   18f6c:	sbcs	r5, r4, ip
   18f70:	bcs	18a24 <__generate_code_for_binary_boolean_expression@@Base+0x1ff0>
   18f74:	mov	r2, #7
   18f78:	orr	r2, r2, #131072	; 0x20000
   18f7c:	adds	r2, r6, r2
   18f80:	adc	r1, r1, #0
   18f84:	mvn	r3, #0
   18f88:	and	r5, r1, r3
   18f8c:	mov	r1, #16646144	; 0xfe0000
   18f90:	orr	r1, r1, #-16777216	; 0xff000000
   18f94:	ldr	r4, [pc, #932]	; 19340 <__generate_code_for_binary_boolean_expression@@Base+0x290c>
   18f98:	and	r6, r2, r1
   18f9c:	mov	r1, r6
   18fa0:	add	r4, pc, r4
   18fa4:	bl	11f70 <realloc@plt>
   18fa8:	str	r6, [r9]
   18fac:	str	r5, [r9, #4]
   18fb0:	str	r0, [r4]
   18fb4:	ldr	r3, [sl, #4]
   18fb8:	ldr	r2, [pc, #900]	; 19344 <__generate_code_for_binary_boolean_expression@@Base+0x2910>
   18fbc:	ldr	r2, [pc, r2]
   18fc0:	b	18a24 <__generate_code_for_binary_boolean_expression@@Base+0x1ff0>
   18fc4:	mov	r3, r0
   18fc8:	mov	r2, #0
   18fcc:	strb	r2, [r3, r1]!
   18fd0:	strb	r2, [r3, #3]
   18fd4:	strb	r2, [r3, #2]
   18fd8:	strb	r2, [r3, #1]
   18fdc:	adds	r2, r1, #4
   18fe0:	adc	r3, r5, #0
   18fe4:	strd	r2, [sl]
   18fe8:	ldr	r4, [r9, #4]
   18fec:	ldr	r6, [pc, #948]	; 193a8 <__generate_code_for_binary_boolean_expression@@Base+0x2974>
   18ff0:	adds	r7, r1, #8
   18ff4:	adc	ip, r5, #0
   18ff8:	ldr	r6, [pc, r6]
   18ffc:	subs	r7, r6, r7
   19000:	sbcs	r7, r4, ip
   19004:	bcs	190b0 <__generate_code_for_binary_boolean_expression@@Base+0x267c>
   19008:	mov	r2, #7
   1900c:	orr	r2, r2, #131072	; 0x20000
   19010:	adds	r1, r1, r2
   19014:	adc	r2, r5, #0
   19018:	mvn	r3, #0
   1901c:	and	r5, r2, r3
   19020:	mov	r2, #16646144	; 0xfe0000
   19024:	orr	r2, r2, #-16777216	; 0xff000000
   19028:	ldr	r4, [pc, #892]	; 193ac <__generate_code_for_binary_boolean_expression@@Base+0x2978>
   1902c:	and	r6, r1, r2
   19030:	mov	r1, r6
   19034:	add	r4, pc, r4
   19038:	bl	11f70 <realloc@plt>
   1903c:	str	r6, [r9]
   19040:	str	r5, [r9, #4]
   19044:	str	r0, [r4]
   19048:	ldrb	r7, [r8]
   1904c:	ldr	r3, [sl, #4]
   19050:	ldr	r2, [pc, #856]	; 193b0 <__generate_code_for_binary_boolean_expression@@Base+0x297c>
   19054:	mov	r6, r0
   19058:	mov	r1, #0
   1905c:	ldr	r2, [pc, r2]
   19060:	strb	r1, [r6, r2]!
   19064:	strb	r1, [r6, #3]
   19068:	strb	r1, [r6, #2]
   1906c:	strb	r1, [r6, #1]
   19070:	adds	r1, r2, #4
   19074:	adc	r5, r3, #0
   19078:	cmp	r7, #1
   1907c:	stm	sl, {r1, r5}
   19080:	bne	18ba0 <__generate_code_for_binary_boolean_expression@@Base+0x216c>
   19084:	b	190d4 <__generate_code_for_binary_boolean_expression@@Base+0x26a0>
   19088:	ldr	r1, [pc, #616]	; 192f8 <__generate_code_for_binary_boolean_expression@@Base+0x28c4>
   1908c:	add	r1, pc, r1
   19090:	ldr	r0, [pc, #600]	; 192f0 <__generate_code_for_binary_boolean_expression@@Base+0x28bc>
   19094:	ldr	r0, [pc, r0]
   19098:	ldr	r0, [r0]
   1909c:	ldr	r2, [pc, #592]	; 192f4 <__generate_code_for_binary_boolean_expression@@Base+0x28c0>
   190a0:	ldr	r2, [pc, r2]
   190a4:	sub	sp, fp, #28
   190a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190ac:	b	1200c <fprintf@plt>
   190b0:	mov	r7, r0
   190b4:	mov	r1, #0
   190b8:	strb	r1, [r7, r2]!
   190bc:	strb	r1, [r7, #3]
   190c0:	strb	r1, [r7, #2]
   190c4:	strb	r1, [r7, #1]
   190c8:	adds	r1, r2, #4
   190cc:	adc	r5, r3, #0
   190d0:	stm	sl, {r1, r5}
   190d4:	ldr	r4, [r9, #4]
   190d8:	ldr	r6, [pc, #724]	; 193b4 <__generate_code_for_binary_boolean_expression@@Base+0x2980>
   190dc:	adds	r7, r2, #8
   190e0:	adc	ip, r3, #0
   190e4:	ldr	r6, [pc, r6]
   190e8:	subs	r7, r6, r7
   190ec:	sbcs	r7, r4, ip
   190f0:	bcs	19178 <__generate_code_for_binary_boolean_expression@@Base+0x2744>
   190f4:	mov	r1, #7
   190f8:	orr	r1, r1, #131072	; 0x20000
   190fc:	adds	r1, r2, r1
   19100:	adc	r2, r3, #0
   19104:	mvn	r3, #0
   19108:	and	r5, r2, r3
   1910c:	mov	r2, #16646144	; 0xfe0000
   19110:	orr	r2, r2, #-16777216	; 0xff000000
   19114:	ldr	r4, [pc, #668]	; 193b8 <__generate_code_for_binary_boolean_expression@@Base+0x2984>
   19118:	and	r6, r1, r2
   1911c:	mov	r1, r6
   19120:	add	r4, pc, r4
   19124:	bl	11f70 <realloc@plt>
   19128:	str	r6, [r9]
   1912c:	str	r5, [r9, #4]
   19130:	str	r0, [r4]
   19134:	ldrb	r2, [r8]
   19138:	ldr	r5, [sl, #4]
   1913c:	ldr	r1, [pc, #632]	; 193bc <__generate_code_for_binary_boolean_expression@@Base+0x2988>
   19140:	mov	r7, r0
   19144:	mov	r3, #0
   19148:	ldr	r1, [pc, r1]
   1914c:	adds	r4, r1, #4
   19150:	strb	r3, [r7, r1]!
   19154:	strb	r3, [r7, #3]
   19158:	strb	r3, [r7, #2]
   1915c:	strb	r3, [r7, #1]
   19160:	adc	r3, r5, #0
   19164:	cmp	r2, #1
   19168:	str	r4, [sl]
   1916c:	str	r3, [sl, #4]
   19170:	bne	18bc8 <__generate_code_for_binary_boolean_expression@@Base+0x2194>
   19174:	b	191a0 <__generate_code_for_binary_boolean_expression@@Base+0x276c>
   19178:	mov	r3, r0
   1917c:	mov	r2, #0
   19180:	strb	r2, [r3, r1]!
   19184:	adds	r4, r1, #4
   19188:	strb	r2, [r3, #3]
   1918c:	strb	r2, [r3, #2]
   19190:	strb	r2, [r3, #1]
   19194:	adc	r3, r5, #0
   19198:	str	r4, [sl]
   1919c:	str	r3, [sl, #4]
   191a0:	ldr	r6, [r9, #4]
   191a4:	ldr	r2, [pc, #532]	; 193c0 <__generate_code_for_binary_boolean_expression@@Base+0x298c>
   191a8:	adds	ip, r1, #8
   191ac:	adc	r7, r5, #0
   191b0:	ldr	r2, [pc, r2]
   191b4:	subs	r2, r2, ip
   191b8:	sbcs	r2, r6, r7
   191bc:	bcs	19244 <__generate_code_for_binary_boolean_expression@@Base+0x2810>
   191c0:	mov	r2, #7
   191c4:	orr	r2, r2, #131072	; 0x20000
   191c8:	adds	r1, r1, r2
   191cc:	adc	r2, r5, #0
   191d0:	mvn	r3, #0
   191d4:	and	r5, r2, r3
   191d8:	mov	r2, #16646144	; 0xfe0000
   191dc:	orr	r2, r2, #-16777216	; 0xff000000
   191e0:	ldr	r4, [pc, #368]	; 19358 <__generate_code_for_binary_boolean_expression@@Base+0x2924>
   191e4:	and	r6, r1, r2
   191e8:	mov	r1, r6
   191ec:	add	r4, pc, r4
   191f0:	bl	11f70 <realloc@plt>
   191f4:	str	r6, [r9]
   191f8:	str	r5, [r9, #4]
   191fc:	str	r0, [r4]
   19200:	ldrb	r7, [r8]
   19204:	ldr	r3, [sl, #4]
   19208:	ldr	r4, [pc, #332]	; 1935c <__generate_code_for_binary_boolean_expression@@Base+0x2928>
   1920c:	mov	r2, r0
   19210:	mov	r1, #0
   19214:	ldr	r4, [pc, r4]
   19218:	strb	r1, [r2, r4]!
   1921c:	strb	r1, [r2, #3]
   19220:	strb	r1, [r2, #2]
   19224:	strb	r1, [r2, #1]
   19228:	adds	r2, r4, #4
   1922c:	adc	r1, r3, #0
   19230:	cmp	r7, #0
   19234:	str	r2, [sl]
   19238:	str	r1, [sl, #4]
   1923c:	beq	18bf0 <__generate_code_for_binary_boolean_expression@@Base+0x21bc>
   19240:	b	1926c <__generate_code_for_binary_boolean_expression@@Base+0x2838>
   19244:	mov	r2, r0
   19248:	mov	r1, #0
   1924c:	strb	r1, [r2, r4]!
   19250:	strb	r1, [r2, #3]
   19254:	strb	r1, [r2, #2]
   19258:	strb	r1, [r2, #1]
   1925c:	adds	r2, r4, #4
   19260:	adc	r1, r3, #0
   19264:	str	r2, [sl]
   19268:	str	r1, [sl, #4]
   1926c:	ldr	r5, [r9, #4]
   19270:	ldr	r6, [pc, #232]	; 19360 <__generate_code_for_binary_boolean_expression@@Base+0x292c>
   19274:	adds	r7, r4, #8
   19278:	adc	ip, r3, #0
   1927c:	ldr	r6, [pc, r6]
   19280:	subs	r7, r6, r7
   19284:	sbcs	r7, r5, ip
   19288:	bcs	18bf0 <__generate_code_for_binary_boolean_expression@@Base+0x21bc>
   1928c:	mov	r1, #7
   19290:	orr	r1, r1, #131072	; 0x20000
   19294:	adds	r1, r4, r1
   19298:	adc	r2, r3, #0
   1929c:	mvn	r3, #0
   192a0:	and	r7, r2, r3
   192a4:	mov	r2, #16646144	; 0xfe0000
   192a8:	orr	r2, r2, #-16777216	; 0xff000000
   192ac:	ldr	r5, [pc, #176]	; 19364 <__generate_code_for_binary_boolean_expression@@Base+0x2930>
   192b0:	and	r6, r1, r2
   192b4:	mov	r1, r6
   192b8:	add	r5, pc, r5
   192bc:	bl	11f70 <realloc@plt>
   192c0:	strd	r6, [r9]
   192c4:	str	r0, [r5]
   192c8:	ldr	r1, [sl, #4]
   192cc:	ldr	r2, [pc, #148]	; 19368 <__generate_code_for_binary_boolean_expression@@Base+0x2934>
   192d0:	ldr	r2, [pc, r2]
   192d4:	b	18bf0 <__generate_code_for_binary_boolean_expression@@Base+0x21bc>
   192d8:	andeq	r4, r1, r0, lsl #21
   192dc:	andeq	r4, r1, r0, lsl #21
   192e0:	andeq	r4, r1, r4, ror sl
   192e4:	andeq	r4, r1, r8, asr sl
   192e8:	andeq	r4, r1, ip, lsl #19
   192ec:	andeq	r2, r0, r6, lsr #26
   192f0:	andeq	r3, r1, r4, lsr #32
   192f4:	andeq	r4, r1, r0, asr #32
   192f8:	andeq	r2, r0, pc, lsl #9
   192fc:	andeq	r4, r1, ip, lsl #15
   19300:	andeq	r4, r1, r8, asr #20
   19304:	andeq	r4, r1, ip, lsr sl
   19308:	andeq	r4, r1, r0, lsr r9
   1930c:	strdeq	r4, [r1], -r0
   19310:	andeq	r4, r1, ip, ror #19
   19314:	andeq	r4, r1, ip, asr #19
   19318:	andeq	r4, r1, r8, lsl #18
   1931c:	andeq	r4, r1, r8, asr #17
   19320:	andeq	r4, r1, ip, lsr #17
   19324:	andeq	r4, r1, r8, lsr r8
   19328:	strdeq	r4, [r1], -r8
   1932c:	ldrdeq	r4, [r1], -ip
   19330:	andeq	r4, r1, ip, lsl r3
   19334:	ldrdeq	r4, [r1], -ip
   19338:			; <UNDEFINED> instruction: 0x000142bc
   1933c:	andeq	r4, r1, ip, lsl #3
   19340:	andeq	r4, r1, ip, asr #2
   19344:	andeq	r4, r1, ip, lsr r1
   19348:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1934c:	andeq	r4, r1, ip, lsl #13
   19350:	andeq	r4, r1, r0, lsl #13
   19354:	andeq	r4, r1, r8, lsl #8
   19358:	andeq	r3, r1, r0, lsl #30
   1935c:	andeq	r3, r1, r4, ror #29
   19360:	andeq	r3, r1, r4, ror lr
   19364:	andeq	r3, r1, r4, lsr lr
   19368:	andeq	r3, r1, r8, lsr #28
   1936c:			; <UNDEFINED> instruction: 0x000144bc
   19370:			; <UNDEFINED> instruction: 0x000144b0
   19374:	andeq	r4, r1, r0, ror r4
   19378:	andeq	r4, r1, r4, ror #8
   1937c:	andeq	r4, r1, ip, asr r4
   19380:	andeq	r4, r1, r0, asr #8
   19384:	andeq	r4, r1, ip, lsr r6
   19388:	andeq	r4, r1, r8, lsr r6
   1938c:	andeq	r4, r1, ip, lsl r6
   19390:	andeq	r4, r1, r0, ror #7
   19394:	andeq	r4, r1, r0, lsr #7
   19398:	andeq	r4, r1, r8, lsl #7
   1939c:	andeq	r4, r1, r4, asr r2
   193a0:	andeq	r4, r1, r4, lsl r2
   193a4:	strdeq	r4, [r1], -r8
   193a8:	strdeq	r4, [r1], -r8
   193ac:	strheq	r4, [r1], -r8
   193b0:	muleq	r1, ip, r0
   193b4:	andeq	r4, r1, ip
   193b8:	andeq	r3, r1, ip, asr #31
   193bc:			; <UNDEFINED> instruction: 0x00013fb0
   193c0:	andeq	r3, r1, r0, asr #30
   193c4:	ldr	r0, [pc, #508]	; 195c8 <__generate_code_for_binary_boolean_expression@@Base+0x2b94>
   193c8:	ldr	r0, [pc, r0]
   193cc:	cmp	r0, #0
   193d0:	beq	19580 <__generate_code_for_binary_boolean_expression@@Base+0x2b4c>
   193d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   193d8:	add	fp, sp, #24
   193dc:	ldr	r9, [pc, #488]	; 195cc <__generate_code_for_binary_boolean_expression@@Base+0x2b98>
   193e0:	mov	r4, #0
   193e4:	mov	r1, #0
   193e8:	add	r9, pc, r9
   193ec:	ldrb	r0, [r9]
   193f0:	cmp	r0, #1
   193f4:	bne	19478 <__generate_code_for_binary_boolean_expression@@Base+0x2a44>
   193f8:	ldr	r0, [pc, #464]	; 195d0 <__generate_code_for_binary_boolean_expression@@Base+0x2b9c>
   193fc:	ldr	r8, [pc, #464]	; 195d4 <__generate_code_for_binary_boolean_expression@@Base+0x2ba0>
   19400:	mov	r1, #1
   19404:	add	r0, pc, r0
   19408:	add	r8, pc, r8
   1940c:	ldr	r0, [r0, #4]
   19410:	ldr	r2, [pc, #448]	; 195d8 <__generate_code_for_binary_boolean_expression@@Base+0x2ba4>
   19414:	ldr	r2, [pc, r2]
   19418:	ldr	r7, [r8, #4]
   1941c:	ldr	r5, [pc, #440]	; 195dc <__generate_code_for_binary_boolean_expression@@Base+0x2ba8>
   19420:	adds	r3, r2, #8
   19424:	adc	r6, r0, #0
   19428:	ldr	r5, [pc, r5]
   1942c:	subs	r3, r5, r3
   19430:	sbcs	r3, r7, r6
   19434:	bcs	19478 <__generate_code_for_binary_boolean_expression@@Base+0x2a44>
   19438:	mov	r1, #7
   1943c:	orr	r1, r1, #131072	; 0x20000
   19440:	adds	r1, r2, r1
   19444:	adc	r7, r0, #0
   19448:	mov	r0, #16646144	; 0xfe0000
   1944c:	orr	r0, r0, #-16777216	; 0xff000000
   19450:	ldr	r5, [pc, #392]	; 195e0 <__generate_code_for_binary_boolean_expression@@Base+0x2bac>
   19454:	and	r6, r1, r0
   19458:	ldr	r0, [pc, #388]	; 195e4 <__generate_code_for_binary_boolean_expression@@Base+0x2bb0>
   1945c:	mov	r1, r6
   19460:	add	r5, pc, r5
   19464:	ldr	r0, [pc, r0]
   19468:	bl	11f70 <realloc@plt>
   1946c:	ldrb	r1, [r9]
   19470:	strd	r6, [r8]
   19474:	str	r0, [r5]
   19478:	ldr	r3, [pc, #360]	; 195e8 <__generate_code_for_binary_boolean_expression@@Base+0x2bb4>
   1947c:	ldr	r2, [pc, #360]	; 195ec <__generate_code_for_binary_boolean_expression@@Base+0x2bb8>
   19480:	add	r3, pc, r3
   19484:	ldr	r2, [pc, r2]
   19488:	ldr	r0, [pc, #352]	; 195f0 <__generate_code_for_binary_boolean_expression@@Base+0x2bbc>
   1948c:	ldr	r0, [pc, r0]
   19490:	ldr	r7, [r3, #4]
   19494:	mov	r6, r0
   19498:	strb	r4, [r6, r2]!
   1949c:	adds	r2, r2, #8
   194a0:	adc	r5, r7, #0
   194a4:	strb	r4, [r6, #5]
   194a8:	strb	r4, [r6, #3]
   194ac:	strb	r4, [r6, #2]
   194b0:	strb	r4, [r6, #1]
   194b4:	strb	r4, [r6, #4]!
   194b8:	cmp	r1, #0
   194bc:	strb	r4, [r6, #3]
   194c0:	strb	r4, [r6, #2]
   194c4:	stm	r3, {r2, r5}
   194c8:	beq	194f0 <__generate_code_for_binary_boolean_expression@@Base+0x2abc>
   194cc:	ldr	r3, [pc, #288]	; 195f4 <__generate_code_for_binary_boolean_expression@@Base+0x2bc0>
   194d0:	mov	r1, r2
   194d4:	mov	r2, #1
   194d8:	ldr	r3, [pc, r3]
   194dc:	bl	11f7c <fwrite@plt>
   194e0:	ldr	r0, [pc, #272]	; 195f8 <__generate_code_for_binary_boolean_expression@@Base+0x2bc4>
   194e4:	ldr	r0, [pc, r0]
   194e8:	bl	11f28 <free@plt>
   194ec:	b	1953c <__generate_code_for_binary_boolean_expression@@Base+0x2b08>
   194f0:	ldr	r1, [pc, #260]	; 195fc <__generate_code_for_binary_boolean_expression@@Base+0x2bc8>
   194f4:	mov	r2, #4
   194f8:	ldr	r1, [pc, r1]
   194fc:	bl	120a8 <msync@plt>
   19500:	cmn	r0, #1
   19504:	beq	1958c <__generate_code_for_binary_boolean_expression@@Base+0x2b58>
   19508:	ldr	r1, [pc, #252]	; 1960c <__generate_code_for_binary_boolean_expression@@Base+0x2bd8>
   1950c:	ldr	r1, [pc, r1]
   19510:	ldr	r0, [pc, #248]	; 19610 <__generate_code_for_binary_boolean_expression@@Base+0x2bdc>
   19514:	ldr	r0, [pc, r0]
   19518:	bl	12078 <munmap@plt>
   1951c:	ldr	r0, [pc, #240]	; 19614 <__generate_code_for_binary_boolean_expression@@Base+0x2be0>
   19520:	ldr	r1, [pc, #240]	; 19618 <__generate_code_for_binary_boolean_expression@@Base+0x2be4>
   19524:	mov	r2, #0
   19528:	add	r0, pc, r0
   1952c:	add	r1, pc, r1
   19530:	str	r2, [r0]
   19534:	str	r2, [r0, #4]
   19538:	str	r2, [r1]
   1953c:	ldr	r0, [pc, #216]	; 1961c <__generate_code_for_binary_boolean_expression@@Base+0x2be8>
   19540:	ldr	r0, [pc, r0]
   19544:	bl	11f1c <fflush@plt>
   19548:	ldr	r0, [pc, #208]	; 19620 <__generate_code_for_binary_boolean_expression@@Base+0x2bec>
   1954c:	ldr	r0, [pc, r0]
   19550:	bl	19acc <__gcov_flush@@Base+0x30c>
   19554:	ldr	r0, [pc, #200]	; 19624 <__generate_code_for_binary_boolean_expression@@Base+0x2bf0>
   19558:	ldr	r0, [pc, r0]
   1955c:	bl	12060 <fclose@plt>
   19560:	ldr	r0, [pc, #192]	; 19628 <__generate_code_for_binary_boolean_expression@@Base+0x2bf4>
   19564:	ldr	r1, [pc, #192]	; 1962c <__generate_code_for_binary_boolean_expression@@Base+0x2bf8>
   19568:	mov	r2, #0
   1956c:	add	r0, pc, r0
   19570:	add	r1, pc, r1
   19574:	str	r2, [r0]
   19578:	str	r2, [r1]
   1957c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   19580:	ldr	r0, [pc, #168]	; 19630 <__generate_code_for_binary_boolean_expression@@Base+0x2bfc>
   19584:	ldr	r0, [pc, r0]
   19588:	b	11f28 <free@plt>
   1958c:	bl	12018 <__errno_location@plt>
   19590:	ldr	r1, [pc, #104]	; 19600 <__generate_code_for_binary_boolean_expression@@Base+0x2bcc>
   19594:	ldr	r1, [pc, r1]
   19598:	ldr	r0, [r0]
   1959c:	ldr	r4, [r1]
   195a0:	ldr	r5, [pc, #92]	; 19604 <__generate_code_for_binary_boolean_expression@@Base+0x2bd0>
   195a4:	ldr	r5, [pc, r5]
   195a8:	bl	11fb8 <strerror@plt>
   195ac:	ldr	r1, [pc, #84]	; 19608 <__generate_code_for_binary_boolean_expression@@Base+0x2bd4>
   195b0:	mov	r3, r0
   195b4:	mov	r0, r4
   195b8:	add	r1, pc, r1
   195bc:	mov	r2, r5
   195c0:	bl	1200c <fprintf@plt>
   195c4:	b	19508 <__generate_code_for_binary_boolean_expression@@Base+0x2ad4>
   195c8:	andeq	r3, r1, r0, lsr #26
   195cc:	strdeq	r3, [r1], -ip
   195d0:	strdeq	r3, [r1], -r4
   195d4:	andeq	r3, r1, r8, ror #25
   195d8:	andeq	r3, r1, r4, ror #25
   195dc:	andeq	r3, r1, r8, asr #25
   195e0:	andeq	r3, r1, ip, lsl #25
   195e4:	andeq	r3, r1, r8, lsl #25
   195e8:	andeq	r3, r1, r8, ror ip
   195ec:	andeq	r3, r1, r4, ror ip
   195f0:	andeq	r3, r1, r0, ror #24
   195f4:	andeq	r3, r1, r0, lsl ip
   195f8:	andeq	r3, r1, r8, lsl #24
   195fc:	andeq	r3, r1, r8, lsl ip
   19600:	andeq	r2, r1, r4, lsr #22
   19604:	andeq	r3, r1, ip, lsr fp
   19608:	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
   1960c:	andeq	r3, r1, r4, lsl #24
   19610:	ldrdeq	r3, [r1], -r8
   19614:	andeq	r3, r1, r8, ror #23
   19618:	andeq	r3, r1, r0, asr #23
   1961c:	andeq	r3, r1, r8, lsr #23
   19620:	muleq	r1, r8, fp
   19624:	muleq	r1, r0, fp
   19628:	andeq	r3, r1, ip, ror fp
   1962c:	andeq	r3, r1, ip, ror fp
   19630:	andeq	r3, r1, ip, asr fp
   19634:	push	{r4, sl, fp, lr}
   19638:	add	fp, sp, #8
   1963c:	mov	r4, r0
   19640:	mov	r0, #12
   19644:	bl	11fa0 <malloc@plt>
   19648:	ldr	r1, [pc, #60]	; 1968c <__generate_code_for_binary_boolean_expression@@Base+0x2c58>
   1964c:	mov	r2, #0
   19650:	add	r1, pc, r1
   19654:	stm	r0, {r1, r4}
   19658:	str	r2, [r0, #8]
   1965c:	ldr	r1, [pc, #44]	; 19690 <__generate_code_for_binary_boolean_expression@@Base+0x2c5c>
   19660:	ldr	r1, [pc, r1]
   19664:	mov	r2, r1
   19668:	ldr	r3, [r2], #4
   1966c:	ldr	r4, [r2]
   19670:	cmp	r3, #0
   19674:	mov	r3, r2
   19678:	addne	r3, r4, #8
   1967c:	moveq	r2, r1
   19680:	str	r0, [r3]
   19684:	str	r0, [r2]
   19688:	pop	{r4, sl, fp, pc}
   1968c:			; <UNDEFINED> instruction: 0x00013ab4
   19690:	andeq	r2, r1, r4, asr sl
   19694:	push	{r4, r5, fp, lr}
   19698:	add	fp, sp, #8
   1969c:	ldr	r0, [pc, #56]	; 196dc <__generate_code_for_binary_boolean_expression@@Base+0x2ca8>
   196a0:	ldr	r0, [pc, r0]
   196a4:	ldr	r4, [r0]
   196a8:	cmp	r4, #0
   196ac:	beq	196d8 <__generate_code_for_binary_boolean_expression@@Base+0x2ca4>
   196b0:	ldr	r5, [pc, #40]	; 196e0 <__generate_code_for_binary_boolean_expression@@Base+0x2cac>
   196b4:	add	r5, pc, r5
   196b8:	ldr	r0, [r4]
   196bc:	cmp	r0, r5
   196c0:	bne	196cc <__generate_code_for_binary_boolean_expression@@Base+0x2c98>
   196c4:	ldr	r0, [r4, #4]
   196c8:	blx	r0
   196cc:	ldr	r4, [r4, #8]
   196d0:	cmp	r4, #0
   196d4:	bne	196b8 <__generate_code_for_binary_boolean_expression@@Base+0x2c84>
   196d8:	pop	{r4, r5, fp, pc}
   196dc:	andeq	r2, r1, r4, lsl sl
   196e0:	andeq	r3, r1, r0, asr sl
   196e4:	push	{r4, r5, r6, r7, fp, lr}
   196e8:	add	fp, sp, #16
   196ec:	ldr	r4, [pc, #100]	; 19758 <__generate_code_for_binary_boolean_expression@@Base+0x2d24>
   196f0:	ldr	r4, [pc, r4]
   196f4:	ldr	r0, [r4]
   196f8:	cmp	r0, #0
   196fc:	beq	19754 <__generate_code_for_binary_boolean_expression@@Base+0x2d20>
   19700:	ldr	r5, [pc, #84]	; 1975c <__generate_code_for_binary_boolean_expression@@Base+0x2d28>
   19704:	mov	r6, #0
   19708:	add	r5, pc, r5
   1970c:	ldr	r1, [r0]
   19710:	ldr	r7, [r0, #8]
   19714:	cmp	r1, r5
   19718:	beq	19724 <__generate_code_for_binary_boolean_expression@@Base+0x2cf0>
   1971c:	mov	r6, r0
   19720:	b	19748 <__generate_code_for_binary_boolean_expression@@Base+0x2d14>
   19724:	ldr	r1, [r4]
   19728:	cmp	r0, r1
   1972c:	streq	r7, [r4]
   19730:	ldr	r1, [r4, #4]
   19734:	cmp	r0, r1
   19738:	streq	r6, [r4, #4]
   1973c:	cmp	r6, #0
   19740:	strne	r7, [r6, #8]
   19744:	bl	11f28 <free@plt>
   19748:	mov	r0, r7
   1974c:	cmp	r7, #0
   19750:	bne	1970c <__generate_code_for_binary_boolean_expression@@Base+0x2cd8>
   19754:	pop	{r4, r5, r6, r7, fp, pc}
   19758:	andeq	r2, r1, r4, asr #19
   1975c:	strdeq	r3, [r1], -ip
   19760:	push	{r4, sl, fp, lr}
   19764:	add	fp, sp, #8
   19768:	mov	r4, r0
   1976c:	mov	r0, #12
   19770:	bl	11fa0 <malloc@plt>
   19774:	ldr	r1, [pc, #60]	; 197b8 <__generate_code_for_binary_boolean_expression@@Base+0x2d84>
   19778:	mov	r2, #0
   1977c:	add	r1, pc, r1
   19780:	stm	r0, {r1, r4}
   19784:	str	r2, [r0, #8]
   19788:	ldr	r1, [pc, #44]	; 197bc <__generate_code_for_binary_boolean_expression@@Base+0x2d88>
   1978c:	ldr	r1, [pc, r1]
   19790:	mov	r2, r1
   19794:	ldr	r3, [r2], #4
   19798:	ldr	r4, [r2]
   1979c:	cmp	r3, #0
   197a0:	mov	r3, r2
   197a4:	addne	r3, r4, #8
   197a8:	moveq	r2, r1
   197ac:	str	r0, [r3]
   197b0:	str	r0, [r2]
   197b4:	pop	{r4, sl, fp, pc}
   197b8:	andeq	r3, r1, r8, lsl #19
   197bc:	andeq	r2, r1, r4, lsr #18

000197c0 <__gcov_flush@@Base>:
   197c0:	push	{r4, sl, fp, lr}
   197c4:	add	fp, sp, #8
   197c8:	ldr	r0, [pc, #36]	; 197f4 <__gcov_flush@@Base+0x34>
   197cc:	ldr	r0, [pc, r0]
   197d0:	ldr	r4, [r0]
   197d4:	cmp	r4, #0
   197d8:	beq	197f0 <__gcov_flush@@Base+0x30>
   197dc:	ldr	r0, [r4, #4]
   197e0:	blx	r0
   197e4:	ldr	r4, [r4, #8]
   197e8:	cmp	r4, #0
   197ec:	bne	197dc <__gcov_flush@@Base+0x1c>
   197f0:	pop	{r4, sl, fp, pc}
   197f4:	andeq	r2, r1, r4, ror #17
   197f8:	push	{r4, r5, r6, r7, fp, lr}
   197fc:	add	fp, sp, #16
   19800:	ldr	r4, [pc, #100]	; 1986c <__gcov_flush@@Base+0xac>
   19804:	ldr	r4, [pc, r4]
   19808:	ldr	r0, [r4]
   1980c:	cmp	r0, #0
   19810:	beq	19868 <__gcov_flush@@Base+0xa8>
   19814:	ldr	r5, [pc, #84]	; 19870 <__gcov_flush@@Base+0xb0>
   19818:	mov	r6, #0
   1981c:	add	r5, pc, r5
   19820:	ldr	r1, [r0]
   19824:	ldr	r7, [r0, #8]
   19828:	cmp	r1, r5
   1982c:	beq	19838 <__gcov_flush@@Base+0x78>
   19830:	mov	r6, r0
   19834:	b	1985c <__gcov_flush@@Base+0x9c>
   19838:	ldr	r1, [r4]
   1983c:	cmp	r0, r1
   19840:	streq	r7, [r4]
   19844:	ldr	r1, [r4, #4]
   19848:	cmp	r0, r1
   1984c:	streq	r6, [r4, #4]
   19850:	cmp	r6, #0
   19854:	strne	r7, [r6, #8]
   19858:	bl	11f28 <free@plt>
   1985c:	mov	r0, r7
   19860:	cmp	r7, #0
   19864:	bne	19820 <__gcov_flush@@Base+0x60>
   19868:	pop	{r4, r5, r6, r7, fp, pc}
   1986c:	andeq	r2, r1, ip, lsr #17
   19870:	andeq	r3, r1, r8, ror #17
   19874:	push	{r4, r5, fp, lr}
   19878:	add	fp, sp, #8
   1987c:	mov	r4, r1
   19880:	cmp	r0, #0
   19884:	beq	198d4 <__gcov_flush@@Base+0x114>
   19888:	mov	r5, r0
   1988c:	mov	r0, #12
   19890:	bl	11fa0 <malloc@plt>
   19894:	ldr	r1, [pc, #204]	; 19968 <__gcov_flush@@Base+0x1a8>
   19898:	mov	r2, #0
   1989c:	add	r1, pc, r1
   198a0:	stm	r0, {r1, r5}
   198a4:	str	r2, [r0, #8]
   198a8:	ldr	r1, [pc, #188]	; 1996c <__gcov_flush@@Base+0x1ac>
   198ac:	ldr	r1, [pc, r1]
   198b0:	mov	r2, r1
   198b4:	ldr	r3, [r2], #4
   198b8:	ldr	r5, [r2]
   198bc:	cmp	r3, #0
   198c0:	mov	r3, r2
   198c4:	addne	r3, r5, #8
   198c8:	moveq	r2, r1
   198cc:	str	r0, [r3]
   198d0:	str	r0, [r2]
   198d4:	cmp	r4, #0
   198d8:	beq	19924 <__gcov_flush@@Base+0x164>
   198dc:	mov	r0, #12
   198e0:	bl	11fa0 <malloc@plt>
   198e4:	ldr	r1, [pc, #132]	; 19970 <__gcov_flush@@Base+0x1b0>
   198e8:	mov	r2, #0
   198ec:	add	r1, pc, r1
   198f0:	stm	r0, {r1, r4}
   198f4:	str	r2, [r0, #8]
   198f8:	ldr	r1, [pc, #116]	; 19974 <__gcov_flush@@Base+0x1b4>
   198fc:	ldr	r1, [pc, r1]
   19900:	mov	r2, r1
   19904:	ldr	r3, [r2], #4
   19908:	ldr	r5, [r2]
   1990c:	cmp	r3, #0
   19910:	mov	r3, r2
   19914:	addne	r3, r5, #8
   19918:	moveq	r2, r1
   1991c:	str	r0, [r3]
   19920:	str	r0, [r2]
   19924:	ldr	r1, [pc, #76]	; 19978 <__gcov_flush@@Base+0x1b8>
   19928:	add	r1, pc, r1
   1992c:	ldrb	r0, [r1]
   19930:	cmp	r0, #0
   19934:	popne	{r4, r5, fp, pc}
   19938:	ldr	r0, [pc, #60]	; 1997c <__gcov_flush@@Base+0x1bc>
   1993c:	mov	r2, #1
   19940:	strb	r2, [r1]
   19944:	add	r0, pc, r0
   19948:	bl	19e28 <__libc_csu_fini@@Base+0x4>
   1994c:	ldr	r0, [pc, #44]	; 19980 <__gcov_flush@@Base+0x1c0>
   19950:	add	r0, pc, r0
   19954:	bl	19e28 <__libc_csu_fini@@Base+0x4>
   19958:	ldr	r0, [pc, #36]	; 19984 <__gcov_flush@@Base+0x1c4>
   1995c:	add	r0, pc, r0
   19960:	pop	{r4, r5, fp, lr}
   19964:	b	19e28 <__libc_csu_fini@@Base+0x4>
   19968:	andeq	r3, r1, r8, ror #16
   1996c:	andeq	r2, r1, r8, lsl #16
   19970:	andeq	r3, r1, r8, lsl r8
   19974:			; <UNDEFINED> instruction: 0x000127b4
   19978:	andeq	r3, r1, r0, ror #15
   1997c:			; <UNDEFINED> instruction: 0xfffffeac
   19980:			; <UNDEFINED> instruction: 0xfffffd8c
   19984:			; <UNDEFINED> instruction: 0xfffffd30
   19988:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1998c:	add	fp, sp, #24
   19990:	ldr	r7, [pc, #76]	; 199e4 <__gcov_flush@@Base+0x224>
   19994:	mov	r4, r0
   19998:	mov	r5, #1
   1999c:	mov	r8, #0
   199a0:	ldr	r7, [pc, r7]
   199a4:	mov	r6, #47	; 0x2f
   199a8:	b	199b0 <__gcov_flush@@Base+0x1f0>
   199ac:	add	r5, r5, #1
   199b0:	ldrb	r0, [r4, r5]
   199b4:	cmp	r0, #47	; 0x2f
   199b8:	beq	199c8 <__gcov_flush@@Base+0x208>
   199bc:	cmp	r0, #0
   199c0:	bne	199ac <__gcov_flush@@Base+0x1ec>
   199c4:	b	199e0 <__gcov_flush@@Base+0x220>
   199c8:	strb	r8, [r4, r5]
   199cc:	ldr	r1, [r7]
   199d0:	mov	r0, r4
   199d4:	bl	12030 <mkdir@plt>
   199d8:	strb	r6, [r4, r5]
   199dc:	b	199ac <__gcov_flush@@Base+0x1ec>
   199e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   199e4:	andeq	r2, r1, ip, lsl #14
   199e8:	ldr	r0, [pc, #8]	; 199f8 <__gcov_flush@@Base+0x238>
   199ec:	ldr	r0, [pc, r0]
   199f0:	ldr	r0, [r0]
   199f4:	bx	lr
   199f8:	andeq	r2, r1, r0, asr #13
   199fc:	ldr	r1, [pc, #8]	; 19a0c <__gcov_flush@@Base+0x24c>
   19a00:	ldr	r1, [pc, r1]
   19a04:	str	r0, [r1]
   19a08:	bx	lr
   19a0c:	andeq	r2, r1, ip, lsr #13
   19a10:	push	{r4, r5, r6, sl, fp, lr}
   19a14:	add	fp, sp, #16
   19a18:	sub	sp, sp, #392	; 0x188
   19a1c:	mov	r6, sp
   19a20:	mov	r5, r0
   19a24:	mov	r0, r6
   19a28:	mov	r4, r1
   19a2c:	bl	11f58 <uname@plt>
   19a30:	cmp	r0, #0
   19a34:	blt	19a4c <__gcov_flush@@Base+0x28c>
   19a38:	add	r1, r6, #65	; 0x41
   19a3c:	mov	r0, r5
   19a40:	mov	r2, r4
   19a44:	bl	12048 <strncpy@plt>
   19a48:	mov	r0, #0
   19a4c:	sub	sp, fp, #16
   19a50:	pop	{r4, r5, r6, sl, fp, pc}
   19a54:	push	{r4, r5, r6, sl, fp, lr}
   19a58:	add	fp, sp, #16
   19a5c:	sub	sp, sp, #32
   19a60:	mov	r4, #0
   19a64:	mov	r5, r0
   19a68:	str	r4, [sp, #20]
   19a6c:	str	r4, [sp, #16]
   19a70:	str	r4, [sp, #12]
   19a74:	str	r4, [sp, #8]
   19a78:	strh	r4, [sp, #2]
   19a7c:	bl	11fd0 <getpid@plt>
   19a80:	mov	r6, sp
   19a84:	str	r0, [sp, #24]
   19a88:	mov	r0, #1
   19a8c:	strh	r0, [sp]
   19a90:	mov	r0, r5
   19a94:	mov	r1, #14
   19a98:	mov	r2, r6
   19a9c:	bl	12084 <fcntl64@plt>
   19aa0:	cmn	r0, #1
   19aa4:	bne	19ac0 <__gcov_flush@@Base+0x300>
   19aa8:	bl	12018 <__errno_location@plt>
   19aac:	ldr	r0, [r0]
   19ab0:	cmp	r0, #4
   19ab4:	beq	19a90 <__gcov_flush@@Base+0x2d0>
   19ab8:	cmp	r0, #37	; 0x25
   19abc:	mvneq	r4, #0
   19ac0:	mov	r0, r4
   19ac4:	sub	sp, fp, #16
   19ac8:	pop	{r4, r5, r6, sl, fp, pc}
   19acc:	push	{r4, r5, r6, sl, fp, lr}
   19ad0:	add	fp, sp, #16
   19ad4:	sub	sp, sp, #32
   19ad8:	mov	r4, #0
   19adc:	mov	r5, r0
   19ae0:	str	r4, [sp, #20]
   19ae4:	str	r4, [sp, #16]
   19ae8:	str	r4, [sp, #12]
   19aec:	str	r4, [sp, #8]
   19af0:	strh	r4, [sp, #2]
   19af4:	bl	11fd0 <getpid@plt>
   19af8:	mov	r6, sp
   19afc:	str	r0, [sp, #24]
   19b00:	mov	r0, #2
   19b04:	strh	r0, [sp]
   19b08:	mov	r0, r5
   19b0c:	mov	r1, #14
   19b10:	mov	r2, r6
   19b14:	bl	12084 <fcntl64@plt>
   19b18:	cmn	r0, #1
   19b1c:	bne	19b38 <__gcov_flush@@Base+0x378>
   19b20:	bl	12018 <__errno_location@plt>
   19b24:	ldr	r0, [r0]
   19b28:	cmp	r0, #4
   19b2c:	beq	19b08 <__gcov_flush@@Base+0x348>
   19b30:	cmp	r0, #37	; 0x25
   19b34:	mvneq	r4, #0
   19b38:	mov	r0, r4
   19b3c:	sub	sp, fp, #16
   19b40:	pop	{r4, r5, r6, sl, fp, pc}
   19b44:	push	{r4, r5, fp, lr}
   19b48:	add	fp, sp, #8
   19b4c:	sub	sp, sp, #32
   19b50:	mov	r2, #182	; 0xb6
   19b54:	orr	r2, r2, #256	; 0x100
   19b58:	mov	r1, #66	; 0x42
   19b5c:	bl	11f88 <open64@plt>
   19b60:	cmp	r0, #0
   19b64:	blt	19be0 <__gcov_flush@@Base+0x420>
   19b68:	mov	r4, r0
   19b6c:	mov	r0, #0
   19b70:	str	r0, [sp, #20]
   19b74:	str	r0, [sp, #16]
   19b78:	str	r0, [sp, #12]
   19b7c:	str	r0, [sp, #8]
   19b80:	strh	r0, [sp, #2]
   19b84:	bl	11fd0 <getpid@plt>
   19b88:	mov	r5, sp
   19b8c:	str	r0, [sp, #24]
   19b90:	mov	r0, #1
   19b94:	strh	r0, [sp]
   19b98:	mov	r0, r4
   19b9c:	mov	r1, #14
   19ba0:	mov	r2, r5
   19ba4:	bl	12084 <fcntl64@plt>
   19ba8:	cmn	r0, #1
   19bac:	bne	19bc8 <__gcov_flush@@Base+0x408>
   19bb0:	bl	12018 <__errno_location@plt>
   19bb4:	ldr	r0, [r0]
   19bb8:	cmp	r0, #4
   19bbc:	beq	19b98 <__gcov_flush@@Base+0x3d8>
   19bc0:	cmp	r0, #37	; 0x25
   19bc4:	beq	19bec <__gcov_flush@@Base+0x42c>
   19bc8:	ldr	r1, [pc, #76]	; 19c1c <__gcov_flush@@Base+0x45c>
   19bcc:	mov	r0, r4
   19bd0:	add	r1, pc, r1
   19bd4:	bl	11ef8 <fdopen@plt>
   19bd8:	sub	sp, fp, #8
   19bdc:	pop	{r4, r5, fp, pc}
   19be0:	mov	r0, #0
   19be4:	sub	sp, fp, #8
   19be8:	pop	{r4, r5, fp, pc}
   19bec:	ldr	r1, [pc, #28]	; 19c10 <__gcov_flush@@Base+0x450>
   19bf0:	ldr	r2, [pc, #28]	; 19c14 <__gcov_flush@@Base+0x454>
   19bf4:	ldr	r0, [pc, #28]	; 19c18 <__gcov_flush@@Base+0x458>
   19bf8:	add	r1, pc, r1
   19bfc:	add	r2, pc, r2
   19c00:	ldr	r0, [pc, r0]
   19c04:	ldr	r0, [r0]
   19c08:	bl	1200c <fprintf@plt>
   19c0c:	b	19bc8 <__gcov_flush@@Base+0x408>
   19c10:			; <UNDEFINED> instruction: 0x000019b2
   19c14:	strdeq	r1, [r0], -r7
   19c18:			; <UNDEFINED> instruction: 0x000124b8
   19c1c:	andeq	r1, r0, r8, lsr r8
   19c20:	push	{r4, r5, r6, sl, fp, lr}
   19c24:	add	fp, sp, #16
   19c28:	mov	r6, r0
   19c2c:	ldr	r0, [pc, #120]	; 19cac <__gcov_flush@@Base+0x4ec>
   19c30:	mov	r4, r1
   19c34:	add	r0, pc, r0
   19c38:	bl	11f94 <getenv@plt>
   19c3c:	mov	r5, r0
   19c40:	ldr	r0, [pc, #104]	; 19cb0 <__gcov_flush@@Base+0x4f0>
   19c44:	add	r0, pc, r0
   19c48:	bl	11f94 <getenv@plt>
   19c4c:	mov	r1, #0
   19c50:	str	r1, [r4]
   19c54:	str	r1, [r6]
   19c58:	cmp	r5, #0
   19c5c:	ldrbne	r2, [r5]
   19c60:	cmpne	r2, #0
   19c64:	bne	19c70 <__gcov_flush@@Base+0x4b0>
   19c68:	mov	r0, r1
   19c6c:	pop	{r4, r5, r6, sl, fp, pc}
   19c70:	cmp	r0, #0
   19c74:	beq	19c8c <__gcov_flush@@Base+0x4cc>
   19c78:	mov	r1, #0
   19c7c:	mov	r2, #10
   19c80:	bl	11f04 <strtol@plt>
   19c84:	bic	r0, r0, r0, asr #31
   19c88:	b	19c90 <__gcov_flush@@Base+0x4d0>
   19c8c:	mov	r0, #0
   19c90:	str	r0, [r6]
   19c94:	mov	r0, r5
   19c98:	bl	11fe8 <strlen@plt>
   19c9c:	mov	r1, r5
   19ca0:	str	r0, [r4]
   19ca4:	mov	r0, r1
   19ca8:	pop	{r4, r5, r6, sl, fp, pc}
   19cac:	andeq	r1, r0, sp, ror #19
   19cb0:	andeq	r1, r0, r9, ror #19
   19cb4:	push	{r4, r5, r6, r7, fp, lr}
   19cb8:	add	fp, sp, #16
   19cbc:	mov	r6, r0
   19cc0:	ldr	r0, [fp, #8]
   19cc4:	mov	r5, r3
   19cc8:	mov	r7, r2
   19ccc:	mov	r4, r1
   19cd0:	cmp	r0, #1
   19cd4:	blt	19d0c <__gcov_flush@@Base+0x54c>
   19cd8:	add	r1, r4, #1
   19cdc:	mov	r2, #0
   19ce0:	ldrb	r3, [r1]
   19ce4:	cmp	r3, #47	; 0x2f
   19ce8:	beq	19cf8 <__gcov_flush@@Base+0x538>
   19cec:	cmp	r3, #0
   19cf0:	bne	19d00 <__gcov_flush@@Base+0x540>
   19cf4:	b	19d0c <__gcov_flush@@Base+0x54c>
   19cf8:	add	r2, r2, #1
   19cfc:	mov	r4, r1
   19d00:	add	r1, r1, #1
   19d04:	cmp	r2, r0
   19d08:	blt	19ce0 <__gcov_flush@@Base+0x520>
   19d0c:	mov	r0, r6
   19d10:	mov	r1, r7
   19d14:	mov	r2, r5
   19d18:	bl	11f34 <memcpy@plt>
   19d1c:	add	r0, r7, r5
   19d20:	ldrb	r0, [r0, #-1]
   19d24:	cmp	r0, #47	; 0x2f
   19d28:	movne	r0, #47	; 0x2f
   19d2c:	strbne	r0, [r6, r5]
   19d30:	mov	r0, r4
   19d34:	addne	r5, r5, #1
   19d38:	add	r5, r6, r5
   19d3c:	bl	11fe8 <strlen@plt>
   19d40:	add	r2, r0, #1
   19d44:	mov	r0, r5
   19d48:	mov	r1, r4
   19d4c:	pop	{r4, r5, r6, r7, fp, lr}
   19d50:	b	11f34 <memcpy@plt>
   19d54:	mov	r1, #47	; 0x2f
   19d58:	b	11ff4 <strchr@plt>
   19d5c:	mov	r1, #47	; 0x2f
   19d60:	b	12090 <strrchr@plt>
   19d64:	push	{fp, lr}
   19d68:	mov	fp, sp
   19d6c:	sub	sp, sp, #8
   19d70:	mov	r0, #0
   19d74:	str	r0, [sp, #4]
   19d78:	add	r1, sp, #4
   19d7c:	mov	r0, #2
   19d80:	bl	12054 <prctl@plt>
   19d84:	ldr	r1, [sp, #4]
   19d88:	cmp	r0, #0
   19d8c:	cmpeq	r1, #9
   19d90:	bne	19da4 <__gcov_flush@@Base+0x5e4>
   19d94:	mov	r0, #1
   19d98:	mov	r1, #0
   19d9c:	bl	12054 <prctl@plt>
   19da0:	ldr	r1, [sp, #4]
   19da4:	sub	r0, r1, #9
   19da8:	clz	r0, r0
   19dac:	lsr	r0, r0, #5
   19db0:	mov	sp, fp
   19db4:	pop	{fp, pc}
   19db8:	mov	r0, #1
   19dbc:	mov	r1, #9
   19dc0:	b	12054 <prctl@plt>

00019dc4 <__libc_csu_init@@Base>:
   19dc4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19dc8:	mov	r7, r0
   19dcc:	ldr	r6, [pc, #72]	; 19e1c <__libc_csu_init@@Base+0x58>
   19dd0:	ldr	r5, [pc, #72]	; 19e20 <__libc_csu_init@@Base+0x5c>
   19dd4:	add	r6, pc, r6
   19dd8:	add	r5, pc, r5
   19ddc:	sub	r6, r6, r5
   19de0:	mov	r8, r1
   19de4:	mov	r9, r2
   19de8:	bl	11ed8 <fdopen@plt-0x20>
   19dec:	asrs	r6, r6, #2
   19df0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19df4:	mov	r4, #0
   19df8:	add	r4, r4, #1
   19dfc:	ldr	r3, [r5], #4
   19e00:	mov	r2, r9
   19e04:	mov	r1, r8
   19e08:	mov	r0, r7
   19e0c:	blx	r3
   19e10:	cmp	r6, r4
   19e14:	bne	19df8 <__libc_csu_init@@Base+0x34>
   19e18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19e1c:	andeq	r2, r1, r8, lsr #2
   19e20:	andeq	r2, r1, r8, lsl #2

00019e24 <__libc_csu_fini@@Base>:
   19e24:	bx	lr
   19e28:	ldr	r3, [pc, #12]	; 19e3c <__libc_csu_fini@@Base+0x18>
   19e2c:	mov	r1, #0
   19e30:	add	r3, pc, r3
   19e34:	ldr	r2, [r3]
   19e38:	b	12024 <__cxa_atexit@plt>
   19e3c:	muleq	r1, r4, r2

Disassembly of section .fini:

00019e40 <.fini>:
   19e40:	push	{r3, lr}
   19e44:	pop	{r3, pc}
