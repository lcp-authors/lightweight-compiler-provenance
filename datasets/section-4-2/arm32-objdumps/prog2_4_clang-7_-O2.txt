
../repos/prog2/4:     file format elf32-littlearm


Disassembly of section .init:

00010a94 <.init>:
   10a94:	push	{r3, lr}
   10a98:	bl	10b8c <_start@@Base+0x3c>
   10a9c:	pop	{r3, pc}

Disassembly of section .plt:

00010aa0 <strcmp@plt-0x14>:
   10aa0:	push	{lr}		; (str lr, [sp, #-4]!)
   10aa4:	ldr	lr, [pc, #4]	; 10ab0 <strcmp@plt-0x4>
   10aa8:	add	lr, pc, lr
   10aac:	ldr	pc, [lr, #8]!
   10ab0:	andeq	r2, r1, r0, asr r5

00010ab4 <strcmp@plt>:
   10ab4:	add	ip, pc, #0, 12
   10ab8:	add	ip, ip, #73728	; 0x12000
   10abc:	ldr	pc, [ip, #1360]!	; 0x550

00010ac0 <printf@plt>:
   10ac0:	add	ip, pc, #0, 12
   10ac4:	add	ip, ip, #73728	; 0x12000
   10ac8:	ldr	pc, [ip, #1352]!	; 0x548

00010acc <free@plt>:
   10acc:	add	ip, pc, #0, 12
   10ad0:	add	ip, ip, #73728	; 0x12000
   10ad4:	ldr	pc, [ip, #1344]!	; 0x540

00010ad8 <strdup@plt>:
   10ad8:	add	ip, pc, #0, 12
   10adc:	add	ip, ip, #73728	; 0x12000
   10ae0:	ldr	pc, [ip, #1336]!	; 0x538

00010ae4 <strcpy@plt>:
   10ae4:	add	ip, pc, #0, 12
   10ae8:	add	ip, ip, #73728	; 0x12000
   10aec:	ldr	pc, [ip, #1328]!	; 0x530

00010af0 <puts@plt>:
   10af0:	add	ip, pc, #0, 12
   10af4:	add	ip, ip, #73728	; 0x12000
   10af8:	ldr	pc, [ip, #1320]!	; 0x528

00010afc <malloc@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #73728	; 0x12000
   10b04:	ldr	pc, [ip, #1312]!	; 0x520

00010b08 <__libc_start_main@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #73728	; 0x12000
   10b10:	ldr	pc, [ip, #1304]!	; 0x518

00010b14 <__gmon_start__@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #73728	; 0x12000
   10b1c:	ldr	pc, [ip, #1296]!	; 0x510

00010b20 <strlen@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #73728	; 0x12000
   10b28:	ldr	pc, [ip, #1288]!	; 0x508

00010b2c <setvbuf@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #73728	; 0x12000
   10b34:	ldr	pc, [ip, #1280]!	; 0x500

00010b38 <putchar@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #73728	; 0x12000
   10b40:	ldr	pc, [ip, #1272]!	; 0x4f8

00010b44 <abort@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #73728	; 0x12000
   10b4c:	ldr	pc, [ip, #1264]!	; 0x4f0

Disassembly of section .text:

00010b50 <_start@@Base>:
   10b50:	mov	fp, #0
   10b54:	mov	lr, #0
   10b58:	pop	{r1}		; (ldr r1, [sp], #4)
   10b5c:	mov	r2, sp
   10b60:	push	{r2}		; (str r2, [sp, #-4]!)
   10b64:	push	{r0}		; (str r0, [sp, #-4]!)
   10b68:	ldr	ip, [pc, #16]	; 10b80 <_start@@Base+0x30>
   10b6c:	push	{ip}		; (str ip, [sp, #-4]!)
   10b70:	ldr	r0, [pc, #12]	; 10b84 <_start@@Base+0x34>
   10b74:	ldr	r3, [pc, #12]	; 10b88 <_start@@Base+0x38>
   10b78:	bl	10b08 <__libc_start_main@plt>
   10b7c:	bl	10b44 <abort@plt>
   10b80:	andeq	r1, r1, r0, lsr #29
   10b84:	andeq	r1, r1, r4, ror r9
   10b88:	andeq	r1, r1, r0, asr #28
   10b8c:	ldr	r3, [pc, #20]	; 10ba8 <_start@@Base+0x58>
   10b90:	ldr	r2, [pc, #20]	; 10bac <_start@@Base+0x5c>
   10b94:	add	r3, pc, r3
   10b98:	ldr	r2, [r3, r2]
   10b9c:	cmp	r2, #0
   10ba0:	bxeq	lr
   10ba4:	b	10b14 <__gmon_start__@plt>
   10ba8:	andeq	r2, r1, r4, ror #8
   10bac:	andeq	r0, r0, r4, asr #32
   10bb0:	ldr	r0, [pc, #24]	; 10bd0 <_start@@Base+0x80>
   10bb4:	ldr	r3, [pc, #24]	; 10bd4 <_start@@Base+0x84>
   10bb8:	cmp	r3, r0
   10bbc:	bxeq	lr
   10bc0:	ldr	r3, [pc, #16]	; 10bd8 <_start@@Base+0x88>
   10bc4:	cmp	r3, #0
   10bc8:	bxeq	lr
   10bcc:	bx	r3
   10bd0:	andeq	r3, r2, r4, asr r0
   10bd4:	andeq	r3, r2, r4, asr r0
   10bd8:	andeq	r0, r0, r0
   10bdc:	ldr	r0, [pc, #36]	; 10c08 <_start@@Base+0xb8>
   10be0:	ldr	r1, [pc, #36]	; 10c0c <_start@@Base+0xbc>
   10be4:	sub	r1, r1, r0
   10be8:	asr	r1, r1, #2
   10bec:	add	r1, r1, r1, lsr #31
   10bf0:	asrs	r1, r1, #1
   10bf4:	bxeq	lr
   10bf8:	ldr	r3, [pc, #16]	; 10c10 <_start@@Base+0xc0>
   10bfc:	cmp	r3, #0
   10c00:	bxeq	lr
   10c04:	bx	r3
   10c08:	andeq	r3, r2, r4, asr r0
   10c0c:	andeq	r3, r2, r4, asr r0
   10c10:	andeq	r0, r0, r0
   10c14:	push	{r4, lr}
   10c18:	ldr	r4, [pc, #24]	; 10c38 <_start@@Base+0xe8>
   10c1c:	ldrb	r3, [r4]
   10c20:	cmp	r3, #0
   10c24:	popne	{r4, pc}
   10c28:	bl	10bb0 <_start@@Base+0x60>
   10c2c:	mov	r3, #1
   10c30:	strb	r3, [r4]
   10c34:	pop	{r4, pc}
   10c38:	andeq	r3, r2, r4, asr r0
   10c3c:	b	10bdc <_start@@Base+0x8c>

00010c40 <_l@@Base>:
   10c40:	sub	sp, sp, #12
   10c44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c48:	add	fp, sp, #28
   10c4c:	sub	sp, sp, #8
   10c50:	mov	r9, r0
   10c54:	add	r0, fp, #8
   10c58:	stm	r0, {r1, r2, r3}
   10c5c:	mov	r0, #12
   10c60:	bl	10afc <malloc@plt>
   10c64:	mov	r1, #0
   10c68:	mov	r8, r0
   10c6c:	cmp	r9, #1
   10c70:	str	r1, [r0]
   10c74:	stmib	r0, {r1, r9}
   10c78:	add	r0, fp, #8
   10c7c:	str	r0, [sp, #4]
   10c80:	blt	10cf4 <_l@@Base+0xb4>
   10c84:	mov	r5, #0
   10c88:	ldr	r0, [sp, #4]
   10c8c:	cmp	r5, #0
   10c90:	mov	sl, r8
   10c94:	addne	sl, r6, #4
   10c98:	add	r1, r0, #4
   10c9c:	str	r1, [sp, #4]
   10ca0:	ldr	r7, [r0]
   10ca4:	mov	r0, #12
   10ca8:	bl	10afc <malloc@plt>
   10cac:	cmp	r5, #0
   10cb0:	mov	r4, r0
   10cb4:	str	r0, [sl]
   10cb8:	moveq	r6, r5
   10cbc:	str	r6, [r0, #8]
   10cc0:	mov	r0, r7
   10cc4:	bl	10b20 <strlen@plt>
   10cc8:	add	r0, r0, #1
   10ccc:	bl	10afc <malloc@plt>
   10cd0:	mov	r1, r7
   10cd4:	str	r0, [r4]
   10cd8:	bl	10ae4 <strcpy@plt>
   10cdc:	add	r5, r5, #1
   10ce0:	mov	r6, r4
   10ce4:	cmp	r9, r5
   10ce8:	bne	10c88 <_l@@Base+0x48>
   10cec:	mov	r1, #0
   10cf0:	b	10cf4 <_l@@Base+0xb4>
   10cf4:	str	r1, [r4, #4]
   10cf8:	str	r4, [r8, #4]
   10cfc:	mov	r0, r8
   10d00:	sub	sp, fp, #28
   10d04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d08:	add	sp, sp, #12
   10d0c:	bx	lr

00010d10 <_f@@Base>:
   10d10:	cmp	r0, #0
   10d14:	moveq	r0, #0
   10d18:	bxeq	lr
   10d1c:	ldr	r0, [r0]
   10d20:	mov	r2, #0
   10d24:	cmp	r1, #1
   10d28:	blt	10d50 <_f@@Base+0x40>
   10d2c:	cmp	r0, #0
   10d30:	beq	10d50 <_f@@Base+0x40>
   10d34:	mov	r2, #0
   10d38:	ldr	r0, [r0, #4]
   10d3c:	add	r2, r2, #1
   10d40:	cmp	r2, r1
   10d44:	bge	10d50 <_f@@Base+0x40>
   10d48:	cmp	r0, #0
   10d4c:	bne	10d38 <_f@@Base+0x28>
   10d50:	cmp	r2, r1
   10d54:	ldreq	r0, [r0]
   10d58:	ldrne	r0, [pc, #4]	; 10d64 <_f@@Base+0x54>
   10d5c:	addne	r0, pc, r0
   10d60:	bx	lr
   10d64:	andeq	r1, r0, lr, lsr r6

00010d68 <teste_lista_nova@@Base>:
   10d68:	push	{r4, sl, fp, lr}
   10d6c:	add	fp, sp, #8
   10d70:	ldr	r0, [pc, #112]	; 10de8 <teste_lista_nova@@Base+0x80>
   10d74:	add	r0, pc, r0
   10d78:	bl	10ac0 <printf@plt>
   10d7c:	bl	11a20 <lista_nova@@Base>
   10d80:	cmp	r0, #0
   10d84:	beq	10db0 <teste_lista_nova@@Base+0x48>
   10d88:	mov	r4, r0
   10d8c:	ldr	r0, [r0, #8]
   10d90:	cmp	r0, #0
   10d94:	beq	10dcc <teste_lista_nova@@Base+0x64>
   10d98:	ldr	r0, [pc, #84]	; 10df4 <teste_lista_nova@@Base+0x8c>
   10d9c:	add	r0, pc, r0
   10da0:	bl	10ac0 <printf@plt>
   10da4:	mov	r0, r4
   10da8:	bl	11a44 <lista_apaga@@Base>
   10dac:	b	10dbc <teste_lista_nova@@Base+0x54>
   10db0:	ldr	r0, [pc, #52]	; 10dec <teste_lista_nova@@Base+0x84>
   10db4:	add	r0, pc, r0
   10db8:	bl	10ac0 <printf@plt>
   10dbc:	mov	r0, #10
   10dc0:	bl	10b38 <putchar@plt>
   10dc4:	mov	r0, #1
   10dc8:	pop	{r4, sl, fp, pc}
   10dcc:	mov	r0, r4
   10dd0:	bl	11a44 <lista_apaga@@Base>
   10dd4:	ldr	r0, [pc, #20]	; 10df0 <teste_lista_nova@@Base+0x88>
   10dd8:	add	r0, pc, r0
   10ddc:	bl	10af0 <puts@plt>
   10de0:	mov	r0, #0
   10de4:	pop	{r4, sl, fp, pc}
   10de8:	andeq	r1, r0, r8, lsr r1
   10dec:	andeq	r1, r0, r7, lsl #2
   10df0:	andeq	r1, r0, r3, asr #11
   10df4:	andeq	r1, r0, r5, lsr r1

00010df8 <teste_lista_insere@@Base>:
   10df8:	push	{r4, r5, r6, r7, fp, lr}
   10dfc:	add	fp, sp, #16
   10e00:	ldr	r1, [pc, #748]	; 110f4 <teste_lista_insere@@Base+0x2fc>
   10e04:	mov	r0, #2
   10e08:	add	r1, pc, r1
   10e0c:	mov	r2, r1
   10e10:	bl	10c40 <_l@@Base>
   10e14:	mov	r5, r0
   10e18:	ldr	r0, [pc, #728]	; 110f8 <teste_lista_insere@@Base+0x300>
   10e1c:	add	r0, pc, r0
   10e20:	bl	10ac0 <printf@plt>
   10e24:	ldr	r0, [r5]
   10e28:	ldr	r2, [r0, #4]
   10e2c:	ldr	r1, [pc, #712]	; 110fc <teste_lista_insere@@Base+0x304>
   10e30:	mov	r0, r5
   10e34:	add	r1, pc, r1
   10e38:	bl	11ae0 <lista_insere@@Base>
   10e3c:	mov	r4, #0
   10e40:	cmp	r0, #0
   10e44:	bne	10e58 <teste_lista_insere@@Base+0x60>
   10e48:	ldr	r0, [pc, #688]	; 11100 <teste_lista_insere@@Base+0x308>
   10e4c:	add	r0, pc, r0
   10e50:	bl	10ac0 <printf@plt>
   10e54:	mov	r4, #1
   10e58:	ldr	r0, [r5, #8]
   10e5c:	cmp	r0, #3
   10e60:	beq	10e80 <teste_lista_insere@@Base+0x88>
   10e64:	ldr	r0, [pc, #664]	; 11104 <teste_lista_insere@@Base+0x30c>
   10e68:	add	r0, pc, r0
   10e6c:	bl	10ac0 <printf@plt>
   10e70:	ldr	r0, [r5, #8]
   10e74:	add	r4, r4, #1
   10e78:	cmp	r0, #3
   10e7c:	bne	110cc <teste_lista_insere@@Base+0x2d4>
   10e80:	ldr	r6, [r5]
   10e84:	ldr	r0, [r6]
   10e88:	ldr	r1, [pc, #632]	; 11108 <teste_lista_insere@@Base+0x310>
   10e8c:	add	r1, pc, r1
   10e90:	bl	10ab4 <strcmp@plt>
   10e94:	cmp	r0, #0
   10e98:	bne	10ed4 <teste_lista_insere@@Base+0xdc>
   10e9c:	ldr	r7, [r6, #4]
   10ea0:	ldr	r0, [r7]
   10ea4:	ldr	r1, [pc, #608]	; 1110c <teste_lista_insere@@Base+0x314>
   10ea8:	add	r1, pc, r1
   10eac:	bl	10ab4 <strcmp@plt>
   10eb0:	cmp	r0, #0
   10eb4:	bne	10ed4 <teste_lista_insere@@Base+0xdc>
   10eb8:	ldr	r0, [r7, #4]
   10ebc:	ldr	r0, [r0]
   10ec0:	ldr	r1, [pc, #584]	; 11110 <teste_lista_insere@@Base+0x318>
   10ec4:	add	r1, pc, r1
   10ec8:	bl	10ab4 <strcmp@plt>
   10ecc:	cmp	r0, #0
   10ed0:	beq	10ee8 <teste_lista_insere@@Base+0xf0>
   10ed4:	ldr	r0, [pc, #568]	; 11114 <teste_lista_insere@@Base+0x31c>
   10ed8:	add	r0, pc, r0
   10edc:	bl	10ac0 <printf@plt>
   10ee0:	ldr	r6, [r5]
   10ee4:	add	r4, r4, #1
   10ee8:	ldr	r1, [pc, #552]	; 11118 <teste_lista_insere@@Base+0x320>
   10eec:	mov	r0, r5
   10ef0:	mov	r2, r6
   10ef4:	add	r1, pc, r1
   10ef8:	bl	11ae0 <lista_insere@@Base>
   10efc:	ldr	r1, [r5]
   10f00:	cmp	r0, r1
   10f04:	beq	10f18 <teste_lista_insere@@Base+0x120>
   10f08:	ldr	r0, [pc, #524]	; 1111c <teste_lista_insere@@Base+0x324>
   10f0c:	add	r0, pc, r0
   10f10:	bl	10ac0 <printf@plt>
   10f14:	add	r4, r4, #1
   10f18:	ldr	r0, [r5, #8]
   10f1c:	cmp	r0, #4
   10f20:	beq	10f40 <teste_lista_insere@@Base+0x148>
   10f24:	ldr	r0, [pc, #500]	; 11120 <teste_lista_insere@@Base+0x328>
   10f28:	add	r0, pc, r0
   10f2c:	bl	10ac0 <printf@plt>
   10f30:	ldr	r0, [r5, #8]
   10f34:	add	r4, r4, #1
   10f38:	cmp	r0, #4
   10f3c:	bne	110cc <teste_lista_insere@@Base+0x2d4>
   10f40:	ldr	r6, [r5]
   10f44:	ldr	r0, [r6]
   10f48:	ldr	r1, [pc, #468]	; 11124 <teste_lista_insere@@Base+0x32c>
   10f4c:	add	r1, pc, r1
   10f50:	bl	10ab4 <strcmp@plt>
   10f54:	cmp	r0, #0
   10f58:	bne	10fb0 <teste_lista_insere@@Base+0x1b8>
   10f5c:	ldr	r6, [r6, #4]
   10f60:	ldr	r0, [r6]
   10f64:	ldr	r1, [pc, #444]	; 11128 <teste_lista_insere@@Base+0x330>
   10f68:	add	r1, pc, r1
   10f6c:	bl	10ab4 <strcmp@plt>
   10f70:	cmp	r0, #0
   10f74:	bne	10fb0 <teste_lista_insere@@Base+0x1b8>
   10f78:	ldr	r6, [r6, #4]
   10f7c:	ldr	r0, [r6]
   10f80:	ldr	r1, [pc, #420]	; 1112c <teste_lista_insere@@Base+0x334>
   10f84:	add	r1, pc, r1
   10f88:	bl	10ab4 <strcmp@plt>
   10f8c:	cmp	r0, #0
   10f90:	bne	10fb0 <teste_lista_insere@@Base+0x1b8>
   10f94:	ldr	r0, [r6, #4]
   10f98:	ldr	r0, [r0]
   10f9c:	ldr	r1, [pc, #396]	; 11130 <teste_lista_insere@@Base+0x338>
   10fa0:	add	r1, pc, r1
   10fa4:	bl	10ab4 <strcmp@plt>
   10fa8:	cmp	r0, #0
   10fac:	beq	10fc0 <teste_lista_insere@@Base+0x1c8>
   10fb0:	ldr	r0, [pc, #380]	; 11134 <teste_lista_insere@@Base+0x33c>
   10fb4:	add	r0, pc, r0
   10fb8:	bl	10ac0 <printf@plt>
   10fbc:	add	r4, r4, #1
   10fc0:	ldr	r1, [pc, #368]	; 11138 <teste_lista_insere@@Base+0x340>
   10fc4:	mov	r0, r5
   10fc8:	mov	r2, #0
   10fcc:	add	r1, pc, r1
   10fd0:	bl	11ae0 <lista_insere@@Base>
   10fd4:	ldr	r0, [r5, #8]
   10fd8:	cmp	r0, #5
   10fdc:	beq	10ffc <teste_lista_insere@@Base+0x204>
   10fe0:	ldr	r0, [pc, #340]	; 1113c <teste_lista_insere@@Base+0x344>
   10fe4:	add	r0, pc, r0
   10fe8:	bl	10ac0 <printf@plt>
   10fec:	ldr	r0, [r5, #8]
   10ff0:	add	r4, r4, #1
   10ff4:	cmp	r0, #5
   10ff8:	bne	110cc <teste_lista_insere@@Base+0x2d4>
   10ffc:	ldr	r0, [r5]
   11000:	ldr	r0, [r0, #4]
   11004:	ldr	r0, [r0, #4]
   11008:	ldr	r0, [r0, #4]
   1100c:	ldr	r0, [r0, #4]
   11010:	ldr	r0, [r0]
   11014:	ldr	r1, [pc, #292]	; 11140 <teste_lista_insere@@Base+0x348>
   11018:	add	r1, pc, r1
   1101c:	bl	10ab4 <strcmp@plt>
   11020:	cmp	r0, #0
   11024:	beq	11038 <teste_lista_insere@@Base+0x240>
   11028:	ldr	r0, [pc, #276]	; 11144 <teste_lista_insere@@Base+0x34c>
   1102c:	add	r0, pc, r0
   11030:	bl	10ac0 <printf@plt>
   11034:	add	r4, r4, #1
   11038:	mov	r0, r5
   1103c:	bl	11a44 <lista_apaga@@Base>
   11040:	bl	11a20 <lista_nova@@Base>
   11044:	ldr	r1, [pc, #252]	; 11148 <teste_lista_insere@@Base+0x350>
   11048:	mov	r2, #0
   1104c:	mov	r5, r0
   11050:	add	r1, pc, r1
   11054:	bl	11ae0 <lista_insere@@Base>
   11058:	ldr	r0, [r5, #8]
   1105c:	cmp	r0, #1
   11060:	beq	11074 <teste_lista_insere@@Base+0x27c>
   11064:	ldr	r0, [pc, #224]	; 1114c <teste_lista_insere@@Base+0x354>
   11068:	add	r0, pc, r0
   1106c:	bl	10ac0 <printf@plt>
   11070:	add	r4, r4, #1
   11074:	mov	r0, r5
   11078:	bl	11ab0 <lista_tamanho@@Base>
   1107c:	cmp	r0, #1
   11080:	bne	110c4 <teste_lista_insere@@Base+0x2cc>
   11084:	ldr	r0, [r5]
   11088:	ldr	r0, [r0]
   1108c:	ldr	r1, [pc, #192]	; 11154 <teste_lista_insere@@Base+0x35c>
   11090:	add	r1, pc, r1
   11094:	bl	10ab4 <strcmp@plt>
   11098:	cmp	r0, #0
   1109c:	beq	110bc <teste_lista_insere@@Base+0x2c4>
   110a0:	ldr	r0, [pc, #176]	; 11158 <teste_lista_insere@@Base+0x360>
   110a4:	add	r0, pc, r0
   110a8:	bl	10ac0 <printf@plt>
   110ac:	mov	r0, r5
   110b0:	bl	11a44 <lista_apaga@@Base>
   110b4:	add	r4, r4, #1
   110b8:	b	110cc <teste_lista_insere@@Base+0x2d4>
   110bc:	mov	r0, r5
   110c0:	bl	11a44 <lista_apaga@@Base>
   110c4:	cmp	r4, #0
   110c8:	beq	110dc <teste_lista_insere@@Base+0x2e4>
   110cc:	mov	r0, #10
   110d0:	bl	10b38 <putchar@plt>
   110d4:	mov	r0, r4
   110d8:	pop	{r4, r5, r6, r7, fp, pc}
   110dc:	ldr	r0, [pc, #108]	; 11150 <teste_lista_insere@@Base+0x358>
   110e0:	add	r0, pc, r0
   110e4:	bl	10af0 <puts@plt>
   110e8:	mov	r4, #0
   110ec:	mov	r0, r4
   110f0:	pop	{r4, r5, r6, r7, fp, pc}
   110f4:	andeq	r1, r0, ip, ror #1
   110f8:	andeq	r1, r0, r2, ror #1
   110fc:	andeq	r1, r0, r4, asr #1
   11100:	andeq	r1, r0, r3, asr #1
   11104:	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
   11108:	andeq	r1, r0, r8, rrx
   1110c:	andeq	r1, r0, r0, asr r0
   11110:	andeq	r1, r0, r0, lsr r0
   11114:	muleq	r0, sp, r0
   11118:	andeq	r1, r0, r4
   1111c:	muleq	r0, pc, r0	; <UNPREDICTABLE>
   11120:	strheq	r1, [r0], -r3
   11124:	andeq	r0, r0, ip, lsr #31
   11128:	andeq	r0, r0, ip, lsl #31
   1112c:	andeq	r0, r0, r4, ror pc
   11130:	andeq	r0, r0, r4, asr pc
   11134:	andeq	r0, r0, r1, asr #31
   11138:	andeq	r0, r0, ip, lsr #30
   1113c:	andeq	r1, r0, r3, lsr r0
   11140:	andeq	r0, r0, r0, ror #29
   11144:	andeq	r0, r0, r9, asr #30
   11148:	andeq	r0, r0, r8, lsr #29
   1114c:	andeq	r0, r0, fp, ror #31
   11150:			; <UNDEFINED> instruction: 0x000012bb
   11154:	andeq	r0, r0, r8, ror #28
   11158:	ldrdeq	r0, [r0], -r1

0001115c <teste_lista_remove@@Base>:
   1115c:	push	{r4, r5, r6, sl, fp, lr}
   11160:	add	fp, sp, #16
   11164:	sub	sp, sp, #8
   11168:	ldr	r0, [pc, #384]	; 112f0 <teste_lista_remove@@Base+0x194>
   1116c:	ldr	r1, [pc, #384]	; 112f4 <teste_lista_remove@@Base+0x198>
   11170:	add	r0, pc, r0
   11174:	add	r1, pc, r1
   11178:	str	r0, [sp, #4]
   1117c:	str	r1, [sp]
   11180:	mov	r0, #5
   11184:	ldr	r1, [pc, #364]	; 112f8 <teste_lista_remove@@Base+0x19c>
   11188:	ldr	r2, [pc, #364]	; 112fc <teste_lista_remove@@Base+0x1a0>
   1118c:	ldr	r3, [pc, #364]	; 11300 <teste_lista_remove@@Base+0x1a4>
   11190:	add	r1, pc, r1
   11194:	add	r2, pc, r2
   11198:	add	r3, pc, r3
   1119c:	bl	10c40 <_l@@Base>
   111a0:	mov	r4, r0
   111a4:	ldr	r0, [pc, #344]	; 11304 <teste_lista_remove@@Base+0x1a8>
   111a8:	add	r0, pc, r0
   111ac:	bl	10ac0 <printf@plt>
   111b0:	ldr	r0, [r4]
   111b4:	ldr	r0, [r0, #4]
   111b8:	ldr	r0, [r0, #4]
   111bc:	ldr	r1, [r0, #4]
   111c0:	mov	r0, r4
   111c4:	bl	11bb4 <lista_remove@@Base>
   111c8:	ldr	r1, [r4, #4]
   111cc:	cmp	r0, r1
   111d0:	beq	111e8 <teste_lista_remove@@Base+0x8c>
   111d4:	ldr	r0, [pc, #300]	; 11308 <teste_lista_remove@@Base+0x1ac>
   111d8:	add	r0, pc, r0
   111dc:	bl	10ac0 <printf@plt>
   111e0:	mov	r5, #1
   111e4:	b	111ec <teste_lista_remove@@Base+0x90>
   111e8:	mov	r5, #0
   111ec:	ldr	r0, [r4, #8]
   111f0:	cmp	r0, #4
   111f4:	beq	11208 <teste_lista_remove@@Base+0xac>
   111f8:	ldr	r0, [pc, #268]	; 1130c <teste_lista_remove@@Base+0x1b0>
   111fc:	add	r0, pc, r0
   11200:	bl	10ac0 <printf@plt>
   11204:	add	r5, r5, #1
   11208:	ldr	r6, [r4]
   1120c:	ldr	r0, [r6]
   11210:	ldr	r1, [pc, #248]	; 11310 <teste_lista_remove@@Base+0x1b4>
   11214:	add	r1, pc, r1
   11218:	bl	10ab4 <strcmp@plt>
   1121c:	cmp	r0, #0
   11220:	bne	11278 <teste_lista_remove@@Base+0x11c>
   11224:	ldr	r6, [r6, #4]
   11228:	ldr	r0, [r6]
   1122c:	ldr	r1, [pc, #224]	; 11314 <teste_lista_remove@@Base+0x1b8>
   11230:	add	r1, pc, r1
   11234:	bl	10ab4 <strcmp@plt>
   11238:	cmp	r0, #0
   1123c:	bne	11278 <teste_lista_remove@@Base+0x11c>
   11240:	ldr	r6, [r6, #4]
   11244:	ldr	r0, [r6]
   11248:	ldr	r1, [pc, #200]	; 11318 <teste_lista_remove@@Base+0x1bc>
   1124c:	add	r1, pc, r1
   11250:	bl	10ab4 <strcmp@plt>
   11254:	cmp	r0, #0
   11258:	bne	11278 <teste_lista_remove@@Base+0x11c>
   1125c:	ldr	r0, [r6, #4]
   11260:	ldr	r0, [r0]
   11264:	ldr	r1, [pc, #176]	; 1131c <teste_lista_remove@@Base+0x1c0>
   11268:	add	r1, pc, r1
   1126c:	bl	10ab4 <strcmp@plt>
   11270:	cmp	r0, #0
   11274:	beq	11288 <teste_lista_remove@@Base+0x12c>
   11278:	ldr	r0, [pc, #160]	; 11320 <teste_lista_remove@@Base+0x1c4>
   1127c:	add	r0, pc, r0
   11280:	bl	10ac0 <printf@plt>
   11284:	add	r5, r5, #1
   11288:	mov	r0, r4
   1128c:	mov	r1, #0
   11290:	bl	11bb4 <lista_remove@@Base>
   11294:	cmp	r0, #0
   11298:	beq	112b8 <teste_lista_remove@@Base+0x15c>
   1129c:	ldr	r0, [pc, #128]	; 11324 <teste_lista_remove@@Base+0x1c8>
   112a0:	add	r0, pc, r0
   112a4:	bl	10ac0 <printf@plt>
   112a8:	mov	r0, r4
   112ac:	bl	11a44 <lista_apaga@@Base>
   112b0:	add	r5, r5, #1
   112b4:	b	112c8 <teste_lista_remove@@Base+0x16c>
   112b8:	mov	r0, r4
   112bc:	bl	11a44 <lista_apaga@@Base>
   112c0:	cmp	r5, #0
   112c4:	beq	112dc <teste_lista_remove@@Base+0x180>
   112c8:	mov	r0, #10
   112cc:	bl	10b38 <putchar@plt>
   112d0:	mov	r0, r5
   112d4:	sub	sp, fp, #16
   112d8:	pop	{r4, r5, r6, sl, fp, pc}
   112dc:	ldr	r0, [pc, #68]	; 11328 <teste_lista_remove@@Base+0x1cc>
   112e0:	add	r0, pc, r0
   112e4:	bl	10af0 <puts@plt>
   112e8:	mov	r5, #0
   112ec:	b	112d0 <teste_lista_remove@@Base+0x174>
   112f0:	andeq	r0, r0, fp, lsr #30
   112f4:	andeq	r0, r0, r4, lsr #30
   112f8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   112fc:	strdeq	r0, [r0], -lr
   11300:	strdeq	r0, [r0], -sp
   11304:	strdeq	r0, [r0], -r6
   11308:	ldrdeq	r0, [r0], -r7
   1130c:	andeq	r0, r0, ip, ror #29
   11310:	andeq	r0, r0, fp, ror lr
   11314:	andeq	r0, r0, r2, ror #28
   11318:	andeq	r0, r0, r9, asr #28
   1131c:	andeq	r0, r0, r3, lsr lr
   11320:	andeq	r0, r0, r8, lsr #29
   11324:			; <UNDEFINED> instruction: 0x00000eba
   11328:	strheq	r1, [r0], -fp

0001132c <teste_lista_pesquisa@@Base>:
   1132c:	push	{r4, r5, r6, sl, fp, lr}
   11330:	add	fp, sp, #16
   11334:	sub	sp, sp, #16
   11338:	ldr	r1, [pc, #344]	; 11498 <teste_lista_pesquisa@@Base+0x16c>
   1133c:	ldr	r6, [pc, #344]	; 1149c <teste_lista_pesquisa@@Base+0x170>
   11340:	mov	r0, #7
   11344:	add	r1, pc, r1
   11348:	add	r6, pc, r6
   1134c:	mov	r2, r1
   11350:	mov	r3, r1
   11354:	stm	sp, {r1, r6}
   11358:	str	r1, [sp, #8]
   1135c:	str	r1, [sp, #12]
   11360:	bl	10c40 <_l@@Base>
   11364:	mov	r5, r0
   11368:	ldr	r0, [pc, #304]	; 114a0 <teste_lista_pesquisa@@Base+0x174>
   1136c:	add	r0, pc, r0
   11370:	bl	10ac0 <printf@plt>
   11374:	mov	r0, r5
   11378:	mov	r1, r6
   1137c:	mov	r2, #0
   11380:	mov	r4, #0
   11384:	bl	11c44 <lista_pesquisa@@Base>
   11388:	ldr	r1, [r5]
   1138c:	ldr	r1, [r1, #4]
   11390:	ldr	r1, [r1, #4]
   11394:	ldr	r1, [r1, #4]
   11398:	ldr	r1, [r1, #4]
   1139c:	cmp	r0, r1
   113a0:	beq	113b4 <teste_lista_pesquisa@@Base+0x88>
   113a4:	ldr	r0, [pc, #248]	; 114a4 <teste_lista_pesquisa@@Base+0x178>
   113a8:	add	r0, pc, r0
   113ac:	bl	10ac0 <printf@plt>
   113b0:	mov	r4, #1
   113b4:	ldr	r1, [pc, #236]	; 114a8 <teste_lista_pesquisa@@Base+0x17c>
   113b8:	mov	r0, r5
   113bc:	mov	r2, #0
   113c0:	add	r1, pc, r1
   113c4:	bl	11c44 <lista_pesquisa@@Base>
   113c8:	cmp	r0, #0
   113cc:	beq	113e0 <teste_lista_pesquisa@@Base+0xb4>
   113d0:	ldr	r0, [pc, #212]	; 114ac <teste_lista_pesquisa@@Base+0x180>
   113d4:	add	r0, pc, r0
   113d8:	bl	10ac0 <printf@plt>
   113dc:	add	r4, r4, #1
   113e0:	ldr	r1, [pc, #200]	; 114b0 <teste_lista_pesquisa@@Base+0x184>
   113e4:	mov	r0, r5
   113e8:	mov	r2, #1
   113ec:	add	r1, pc, r1
   113f0:	bl	11c44 <lista_pesquisa@@Base>
   113f4:	ldr	r1, [r5]
   113f8:	ldr	r1, [r1, #4]
   113fc:	ldr	r1, [r1, #4]
   11400:	ldr	r1, [r1, #4]
   11404:	ldr	r1, [r1, #4]
   11408:	ldr	r1, [r1, #4]
   1140c:	ldr	r1, [r1, #4]
   11410:	cmp	r0, r1
   11414:	beq	11428 <teste_lista_pesquisa@@Base+0xfc>
   11418:	ldr	r0, [pc, #148]	; 114b4 <teste_lista_pesquisa@@Base+0x188>
   1141c:	add	r0, pc, r0
   11420:	bl	10ac0 <printf@plt>
   11424:	add	r4, r4, #1
   11428:	ldr	r1, [pc, #136]	; 114b8 <teste_lista_pesquisa@@Base+0x18c>
   1142c:	mov	r0, r5
   11430:	mov	r2, #1
   11434:	add	r1, pc, r1
   11438:	bl	11c44 <lista_pesquisa@@Base>
   1143c:	cmp	r0, #0
   11440:	beq	11460 <teste_lista_pesquisa@@Base+0x134>
   11444:	ldr	r0, [pc, #112]	; 114bc <teste_lista_pesquisa@@Base+0x190>
   11448:	add	r0, pc, r0
   1144c:	bl	10ac0 <printf@plt>
   11450:	mov	r0, r5
   11454:	bl	11a44 <lista_apaga@@Base>
   11458:	add	r4, r4, #1
   1145c:	b	11470 <teste_lista_pesquisa@@Base+0x144>
   11460:	mov	r0, r5
   11464:	bl	11a44 <lista_apaga@@Base>
   11468:	cmp	r4, #0
   1146c:	beq	11484 <teste_lista_pesquisa@@Base+0x158>
   11470:	mov	r0, #10
   11474:	bl	10b38 <putchar@plt>
   11478:	mov	r0, r4
   1147c:	sub	sp, fp, #16
   11480:	pop	{r4, r5, r6, sl, fp, pc}
   11484:	ldr	r0, [pc, #52]	; 114c0 <teste_lista_pesquisa@@Base+0x194>
   11488:	add	r0, pc, r0
   1148c:	bl	10af0 <puts@plt>
   11490:	mov	r4, #0
   11494:	b	11478 <teste_lista_pesquisa@@Base+0x14c>
   11498:			; <UNDEFINED> instruction: 0x00000bb0
   1149c:	andeq	r0, r0, r4, asr #28
   114a0:	andeq	r0, r0, r3, lsr #28
   114a4:	strdeq	r0, [r0], -sl
   114a8:	andeq	r0, r0, r9, lsr #28
   114ac:	andeq	r0, r0, ip, lsl lr
   114b0:	andeq	r0, r0, r8, lsl #22
   114b4:	andeq	r0, r0, r6, lsl #27
   114b8:			; <UNDEFINED> instruction: 0x00000db5
   114bc:	andeq	r0, r0, r8, lsr #27
   114c0:	andeq	r0, r0, r3, lsl pc

000114c4 <teste_lista_ordena@@Base>:
   114c4:	push	{r4, r5, r6, sl, fp, lr}
   114c8:	add	fp, sp, #16
   114cc:	sub	sp, sp, #8
   114d0:	ldr	r0, [pc, #484]	; 116bc <teste_lista_ordena@@Base+0x1f8>
   114d4:	ldr	r1, [pc, #484]	; 116c0 <teste_lista_ordena@@Base+0x1fc>
   114d8:	add	r0, pc, r0
   114dc:	add	r1, pc, r1
   114e0:	str	r0, [sp, #4]
   114e4:	str	r1, [sp]
   114e8:	mov	r0, #5
   114ec:	ldr	r1, [pc, #464]	; 116c4 <teste_lista_ordena@@Base+0x200>
   114f0:	ldr	r2, [pc, #464]	; 116c8 <teste_lista_ordena@@Base+0x204>
   114f4:	ldr	r3, [pc, #464]	; 116cc <teste_lista_ordena@@Base+0x208>
   114f8:	add	r1, pc, r1
   114fc:	add	r2, pc, r2
   11500:	add	r3, pc, r3
   11504:	bl	10c40 <_l@@Base>
   11508:	mov	r5, r0
   1150c:	ldr	r0, [pc, #444]	; 116d0 <teste_lista_ordena@@Base+0x20c>
   11510:	add	r0, pc, r0
   11514:	bl	10ac0 <printf@plt>
   11518:	mov	r0, #0
   1151c:	mov	r4, #0
   11520:	bl	11cf0 <lista_ordena@@Base>
   11524:	cmn	r0, #1
   11528:	beq	1153c <teste_lista_ordena@@Base+0x78>
   1152c:	ldr	r0, [pc, #416]	; 116d4 <teste_lista_ordena@@Base+0x210>
   11530:	add	r0, pc, r0
   11534:	bl	10ac0 <printf@plt>
   11538:	mov	r4, #1
   1153c:	mov	r0, r5
   11540:	bl	11cf0 <lista_ordena@@Base>
   11544:	ldr	r6, [r5]
   11548:	ldr	r0, [r6]
   1154c:	ldr	r1, [pc, #388]	; 116d8 <teste_lista_ordena@@Base+0x214>
   11550:	add	r1, pc, r1
   11554:	bl	10ab4 <strcmp@plt>
   11558:	cmp	r0, #0
   1155c:	bne	115d0 <teste_lista_ordena@@Base+0x10c>
   11560:	ldr	r6, [r6, #4]
   11564:	ldr	r0, [r6]
   11568:	ldr	r1, [pc, #364]	; 116dc <teste_lista_ordena@@Base+0x218>
   1156c:	add	r1, pc, r1
   11570:	bl	10ab4 <strcmp@plt>
   11574:	cmp	r0, #0
   11578:	bne	115d0 <teste_lista_ordena@@Base+0x10c>
   1157c:	ldr	r6, [r6, #4]
   11580:	ldr	r0, [r6]
   11584:	ldr	r1, [pc, #340]	; 116e0 <teste_lista_ordena@@Base+0x21c>
   11588:	add	r1, pc, r1
   1158c:	bl	10ab4 <strcmp@plt>
   11590:	cmp	r0, #0
   11594:	bne	115d0 <teste_lista_ordena@@Base+0x10c>
   11598:	ldr	r6, [r6, #4]
   1159c:	ldr	r0, [r6]
   115a0:	ldr	r1, [pc, #316]	; 116e4 <teste_lista_ordena@@Base+0x220>
   115a4:	add	r1, pc, r1
   115a8:	bl	10ab4 <strcmp@plt>
   115ac:	cmp	r0, #0
   115b0:	bne	115d0 <teste_lista_ordena@@Base+0x10c>
   115b4:	ldr	r0, [r6, #4]
   115b8:	ldr	r0, [r0]
   115bc:	ldr	r1, [pc, #292]	; 116e8 <teste_lista_ordena@@Base+0x224>
   115c0:	add	r1, pc, r1
   115c4:	bl	10ab4 <strcmp@plt>
   115c8:	cmp	r0, #0
   115cc:	beq	115e0 <teste_lista_ordena@@Base+0x11c>
   115d0:	ldr	r0, [pc, #276]	; 116ec <teste_lista_ordena@@Base+0x228>
   115d4:	add	r0, pc, r0
   115d8:	bl	10ac0 <printf@plt>
   115dc:	add	r4, r4, #1
   115e0:	ldr	r6, [r5, #4]
   115e4:	ldr	r0, [r6]
   115e8:	ldr	r1, [pc, #256]	; 116f0 <teste_lista_ordena@@Base+0x22c>
   115ec:	add	r1, pc, r1
   115f0:	bl	10ab4 <strcmp@plt>
   115f4:	cmp	r0, #0
   115f8:	bne	1166c <teste_lista_ordena@@Base+0x1a8>
   115fc:	ldr	r6, [r6, #8]
   11600:	ldr	r0, [r6]
   11604:	ldr	r1, [pc, #232]	; 116f4 <teste_lista_ordena@@Base+0x230>
   11608:	add	r1, pc, r1
   1160c:	bl	10ab4 <strcmp@plt>
   11610:	cmp	r0, #0
   11614:	bne	1166c <teste_lista_ordena@@Base+0x1a8>
   11618:	ldr	r6, [r6, #8]
   1161c:	ldr	r0, [r6]
   11620:	ldr	r1, [pc, #208]	; 116f8 <teste_lista_ordena@@Base+0x234>
   11624:	add	r1, pc, r1
   11628:	bl	10ab4 <strcmp@plt>
   1162c:	cmp	r0, #0
   11630:	bne	1166c <teste_lista_ordena@@Base+0x1a8>
   11634:	ldr	r6, [r6, #8]
   11638:	ldr	r0, [r6]
   1163c:	ldr	r1, [pc, #184]	; 116fc <teste_lista_ordena@@Base+0x238>
   11640:	add	r1, pc, r1
   11644:	bl	10ab4 <strcmp@plt>
   11648:	cmp	r0, #0
   1164c:	bne	1166c <teste_lista_ordena@@Base+0x1a8>
   11650:	ldr	r0, [r6, #8]
   11654:	ldr	r0, [r0]
   11658:	ldr	r1, [pc, #160]	; 11700 <teste_lista_ordena@@Base+0x23c>
   1165c:	add	r1, pc, r1
   11660:	bl	10ab4 <strcmp@plt>
   11664:	cmp	r0, #0
   11668:	beq	11698 <teste_lista_ordena@@Base+0x1d4>
   1166c:	ldr	r0, [pc, #144]	; 11704 <teste_lista_ordena@@Base+0x240>
   11670:	add	r0, pc, r0
   11674:	bl	10ac0 <printf@plt>
   11678:	mov	r0, r5
   1167c:	bl	11a44 <lista_apaga@@Base>
   11680:	add	r4, r4, #1
   11684:	mov	r0, #10
   11688:	bl	10b38 <putchar@plt>
   1168c:	mov	r0, r4
   11690:	sub	sp, fp, #16
   11694:	pop	{r4, r5, r6, sl, fp, pc}
   11698:	mov	r0, r5
   1169c:	bl	11a44 <lista_apaga@@Base>
   116a0:	cmp	r4, #0
   116a4:	bne	11684 <teste_lista_ordena@@Base+0x1c0>
   116a8:	ldr	r0, [pc, #88]	; 11708 <teste_lista_ordena@@Base+0x244>
   116ac:	add	r0, pc, r0
   116b0:	bl	10af0 <puts@plt>
   116b4:	mov	r4, #0
   116b8:	b	1168c <teste_lista_ordena@@Base+0x1c8>
   116bc:	andeq	r0, r0, r4, ror #26
   116c0:	andeq	r0, r0, sp, asr sp
   116c4:	andeq	r0, r0, r8, lsr sp
   116c8:	andeq	r0, r0, r7, lsr sp
   116cc:	andeq	r0, r0, r6, lsr sp
   116d0:	andeq	r0, r0, pc, lsr #26
   116d4:	andeq	r0, r0, r0, lsr #26
   116d8:	andeq	r0, r0, r0, ror #25
   116dc:	andeq	r0, r0, r7, asr #25
   116e0:			; <UNDEFINED> instruction: 0x00000cb1
   116e4:	muleq	r0, r8, ip
   116e8:	andeq	r0, r0, r6, ror ip
   116ec:	andeq	r0, r0, sl, lsr #25
   116f0:	andeq	r0, r0, sl, asr #24
   116f4:	andeq	r0, r0, r4, lsr ip
   116f8:	andeq	r0, r0, r5, lsl ip
   116fc:	strdeq	r0, [r0], -r3
   11700:	ldrdeq	r0, [r0], -r4
   11704:	andeq	r0, r0, fp, asr #24
   11708:	andeq	r0, r0, pc, ror #25

0001170c <teste_lista_inverte@@Base>:
   1170c:	push	{r4, r5, r6, sl, fp, lr}
   11710:	add	fp, sp, #16
   11714:	sub	sp, sp, #8
   11718:	ldr	r0, [pc, #512]	; 11920 <teste_lista_inverte@@Base+0x214>
   1171c:	ldr	r1, [pc, #512]	; 11924 <teste_lista_inverte@@Base+0x218>
   11720:	add	r0, pc, r0
   11724:	add	r1, pc, r1
   11728:	str	r0, [sp, #4]
   1172c:	str	r1, [sp]
   11730:	mov	r0, #5
   11734:	ldr	r1, [pc, #492]	; 11928 <teste_lista_inverte@@Base+0x21c>
   11738:	ldr	r2, [pc, #492]	; 1192c <teste_lista_inverte@@Base+0x220>
   1173c:	ldr	r3, [pc, #492]	; 11930 <teste_lista_inverte@@Base+0x224>
   11740:	add	r1, pc, r1
   11744:	add	r2, pc, r2
   11748:	add	r3, pc, r3
   1174c:	bl	10c40 <_l@@Base>
   11750:	mov	r5, r0
   11754:	ldr	r0, [pc, #472]	; 11934 <teste_lista_inverte@@Base+0x228>
   11758:	add	r0, pc, r0
   1175c:	bl	10ac0 <printf@plt>
   11760:	mov	r0, #0
   11764:	mov	r4, #0
   11768:	bl	11dbc <lista_inverte@@Base>
   1176c:	cmn	r0, #1
   11770:	beq	11784 <teste_lista_inverte@@Base+0x78>
   11774:	ldr	r0, [pc, #444]	; 11938 <teste_lista_inverte@@Base+0x22c>
   11778:	add	r0, pc, r0
   1177c:	bl	10ac0 <printf@plt>
   11780:	mov	r4, #1
   11784:	mov	r0, r5
   11788:	bl	11dbc <lista_inverte@@Base>
   1178c:	ldr	r0, [r5, #8]
   11790:	cmp	r0, #5
   11794:	beq	117a8 <teste_lista_inverte@@Base+0x9c>
   11798:	ldr	r0, [pc, #412]	; 1193c <teste_lista_inverte@@Base+0x230>
   1179c:	add	r0, pc, r0
   117a0:	bl	10ac0 <printf@plt>
   117a4:	add	r4, r4, #1
   117a8:	ldr	r6, [r5]
   117ac:	ldr	r0, [r6]
   117b0:	ldr	r1, [pc, #392]	; 11940 <teste_lista_inverte@@Base+0x234>
   117b4:	add	r1, pc, r1
   117b8:	bl	10ab4 <strcmp@plt>
   117bc:	cmp	r0, #0
   117c0:	bne	11834 <teste_lista_inverte@@Base+0x128>
   117c4:	ldr	r6, [r6, #4]
   117c8:	ldr	r0, [r6]
   117cc:	ldr	r1, [pc, #368]	; 11944 <teste_lista_inverte@@Base+0x238>
   117d0:	add	r1, pc, r1
   117d4:	bl	10ab4 <strcmp@plt>
   117d8:	cmp	r0, #0
   117dc:	bne	11834 <teste_lista_inverte@@Base+0x128>
   117e0:	ldr	r6, [r6, #4]
   117e4:	ldr	r0, [r6]
   117e8:	ldr	r1, [pc, #344]	; 11948 <teste_lista_inverte@@Base+0x23c>
   117ec:	add	r1, pc, r1
   117f0:	bl	10ab4 <strcmp@plt>
   117f4:	cmp	r0, #0
   117f8:	bne	11834 <teste_lista_inverte@@Base+0x128>
   117fc:	ldr	r6, [r6, #4]
   11800:	ldr	r0, [r6]
   11804:	ldr	r1, [pc, #320]	; 1194c <teste_lista_inverte@@Base+0x240>
   11808:	add	r1, pc, r1
   1180c:	bl	10ab4 <strcmp@plt>
   11810:	cmp	r0, #0
   11814:	bne	11834 <teste_lista_inverte@@Base+0x128>
   11818:	ldr	r0, [r6, #4]
   1181c:	ldr	r0, [r0]
   11820:	ldr	r1, [pc, #296]	; 11950 <teste_lista_inverte@@Base+0x244>
   11824:	add	r1, pc, r1
   11828:	bl	10ab4 <strcmp@plt>
   1182c:	cmp	r0, #0
   11830:	beq	11844 <teste_lista_inverte@@Base+0x138>
   11834:	ldr	r0, [pc, #280]	; 11954 <teste_lista_inverte@@Base+0x248>
   11838:	add	r0, pc, r0
   1183c:	bl	10ac0 <printf@plt>
   11840:	add	r4, r4, #1
   11844:	ldr	r6, [r5, #4]
   11848:	ldr	r0, [r6]
   1184c:	ldr	r1, [pc, #260]	; 11958 <teste_lista_inverte@@Base+0x24c>
   11850:	add	r1, pc, r1
   11854:	bl	10ab4 <strcmp@plt>
   11858:	cmp	r0, #0
   1185c:	bne	118d0 <teste_lista_inverte@@Base+0x1c4>
   11860:	ldr	r6, [r6, #8]
   11864:	ldr	r0, [r6]
   11868:	ldr	r1, [pc, #236]	; 1195c <teste_lista_inverte@@Base+0x250>
   1186c:	add	r1, pc, r1
   11870:	bl	10ab4 <strcmp@plt>
   11874:	cmp	r0, #0
   11878:	bne	118d0 <teste_lista_inverte@@Base+0x1c4>
   1187c:	ldr	r6, [r6, #8]
   11880:	ldr	r0, [r6]
   11884:	ldr	r1, [pc, #212]	; 11960 <teste_lista_inverte@@Base+0x254>
   11888:	add	r1, pc, r1
   1188c:	bl	10ab4 <strcmp@plt>
   11890:	cmp	r0, #0
   11894:	bne	118d0 <teste_lista_inverte@@Base+0x1c4>
   11898:	ldr	r6, [r6, #8]
   1189c:	ldr	r0, [r6]
   118a0:	ldr	r1, [pc, #188]	; 11964 <teste_lista_inverte@@Base+0x258>
   118a4:	add	r1, pc, r1
   118a8:	bl	10ab4 <strcmp@plt>
   118ac:	cmp	r0, #0
   118b0:	bne	118d0 <teste_lista_inverte@@Base+0x1c4>
   118b4:	ldr	r0, [r6, #8]
   118b8:	ldr	r0, [r0]
   118bc:	ldr	r1, [pc, #164]	; 11968 <teste_lista_inverte@@Base+0x25c>
   118c0:	add	r1, pc, r1
   118c4:	bl	10ab4 <strcmp@plt>
   118c8:	cmp	r0, #0
   118cc:	beq	118fc <teste_lista_inverte@@Base+0x1f0>
   118d0:	ldr	r0, [pc, #148]	; 1196c <teste_lista_inverte@@Base+0x260>
   118d4:	add	r0, pc, r0
   118d8:	bl	10ac0 <printf@plt>
   118dc:	mov	r0, r5
   118e0:	bl	11a44 <lista_apaga@@Base>
   118e4:	add	r4, r4, #1
   118e8:	mov	r0, #10
   118ec:	bl	10b38 <putchar@plt>
   118f0:	mov	r0, r4
   118f4:	sub	sp, fp, #16
   118f8:	pop	{r4, r5, r6, sl, fp, pc}
   118fc:	mov	r0, r5
   11900:	bl	11a44 <lista_apaga@@Base>
   11904:	cmp	r4, #0
   11908:	bne	118e8 <teste_lista_inverte@@Base+0x1dc>
   1190c:	ldr	r0, [pc, #92]	; 11970 <teste_lista_inverte@@Base+0x264>
   11910:	add	r0, pc, r0
   11914:	bl	10af0 <puts@plt>
   11918:	mov	r4, #0
   1191c:	b	118f0 <teste_lista_inverte@@Base+0x1e4>
   11920:	andeq	r0, r0, ip, lsl fp
   11924:	andeq	r0, r0, r5, lsl fp
   11928:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1192c:	andeq	r0, r0, pc, ror #21
   11930:	andeq	r0, r0, lr, ror #21
   11934:	andeq	r0, r0, r1, lsr #23
   11938:	ldrdeq	r0, [r0], -r8
   1193c:	andeq	r0, r0, pc, ror #22
   11940:	andeq	r0, r0, r8, lsl #21
   11944:	andeq	r0, r0, r9, ror #20
   11948:	andeq	r0, r0, sl, asr #20
   1194c:	andeq	r0, r0, fp, lsr #20
   11950:	andeq	r0, r0, ip, lsl #20
   11954:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   11958:	andeq	r0, r0, r0, ror #19
   1195c:	andeq	r0, r0, r7, asr #19
   11960:	andeq	r0, r0, lr, lsr #19
   11964:	muleq	r0, r5, r9
   11968:	andeq	r0, r0, ip, ror r9
   1196c:	andeq	r0, r0, r7, ror #19
   11970:	andeq	r0, r0, fp, lsl #21

00011974 <main@@Base>:
   11974:	push	{r4, sl, fp, lr}
   11978:	add	fp, sp, #8
   1197c:	ldr	r0, [pc, #140]	; 11a10 <main@@Base+0x9c>
   11980:	mov	r1, #0
   11984:	mov	r2, #2
   11988:	mov	r3, #0
   1198c:	ldr	r0, [pc, r0]
   11990:	ldr	r0, [r0]
   11994:	bl	10b2c <setvbuf@plt>
   11998:	ldr	r0, [pc, #116]	; 11a14 <main@@Base+0xa0>
   1199c:	mov	r1, #0
   119a0:	mov	r2, #2
   119a4:	mov	r3, #0
   119a8:	ldr	r0, [pc, r0]
   119ac:	ldr	r0, [r0]
   119b0:	bl	10b2c <setvbuf@plt>
   119b4:	bl	10d68 <teste_lista_nova@@Base>
   119b8:	mov	r4, r0
   119bc:	bl	10df8 <teste_lista_insere@@Base>
   119c0:	add	r4, r0, r4
   119c4:	bl	1115c <teste_lista_remove@@Base>
   119c8:	add	r4, r4, r0
   119cc:	bl	1132c <teste_lista_pesquisa@@Base>
   119d0:	add	r4, r4, r0
   119d4:	bl	114c4 <teste_lista_ordena@@Base>
   119d8:	add	r4, r4, r0
   119dc:	bl	1170c <teste_lista_inverte@@Base>
   119e0:	adds	r1, r4, r0
   119e4:	beq	119fc <main@@Base+0x88>
   119e8:	ldr	r0, [pc, #44]	; 11a1c <main@@Base+0xa8>
   119ec:	add	r0, pc, r0
   119f0:	bl	10ac0 <printf@plt>
   119f4:	mov	r0, #0
   119f8:	pop	{r4, sl, fp, pc}
   119fc:	ldr	r0, [pc, #20]	; 11a18 <main@@Base+0xa4>
   11a00:	add	r0, pc, r0
   11a04:	bl	10af0 <puts@plt>
   11a08:	mov	r0, #0
   11a0c:	pop	{r4, sl, fp, pc}
   11a10:			; <UNDEFINED> instruction: 0x000116b4
   11a14:	muleq	r1, r0, r6
   11a18:	andeq	r0, r0, r8, lsr #19
   11a1c:	andeq	r0, r0, r9, lsl #19

00011a20 <lista_nova@@Base>:
   11a20:	push	{fp, lr}
   11a24:	mov	fp, sp
   11a28:	mov	r0, #12
   11a2c:	bl	10afc <malloc@plt>
   11a30:	cmp	r0, #0
   11a34:	moveq	r0, #0
   11a38:	movne	r1, #0
   11a3c:	strne	r1, [r0, #8]
   11a40:	pop	{fp, pc}

00011a44 <lista_apaga@@Base>:
   11a44:	push	{r4, r5, r6, sl, fp, lr}
   11a48:	add	fp, sp, #16
   11a4c:	cmp	r0, #0
   11a50:	popeq	{r4, r5, r6, sl, fp, pc}
   11a54:	mov	r4, r0
   11a58:	ldr	r0, [r0, #8]
   11a5c:	cmp	r0, #0
   11a60:	beq	11aa4 <lista_apaga@@Base+0x60>
   11a64:	ldr	r6, [r4]
   11a68:	cmp	r6, #0
   11a6c:	ldrne	r5, [r6, #4]
   11a70:	cmpne	r5, #0
   11a74:	beq	11aa4 <lista_apaga@@Base+0x60>
   11a78:	ldr	r0, [r6]
   11a7c:	bl	10acc <free@plt>
   11a80:	mov	r0, r6
   11a84:	bl	10acc <free@plt>
   11a88:	ldm	r5, {r0, r6}
   11a8c:	bl	10acc <free@plt>
   11a90:	mov	r0, r5
   11a94:	bl	10acc <free@plt>
   11a98:	cmp	r6, #0
   11a9c:	mov	r5, r6
   11aa0:	bne	11a88 <lista_apaga@@Base+0x44>
   11aa4:	mov	r0, r4
   11aa8:	pop	{r4, r5, r6, sl, fp, lr}
   11aac:	b	10acc <free@plt>

00011ab0 <lista_tamanho@@Base>:
   11ab0:	cmp	r0, #0
   11ab4:	ldrne	r0, [r0, #8]
   11ab8:	mvneq	r0, #0
   11abc:	bx	lr

00011ac0 <lista_inicio@@Base>:
   11ac0:	cmp	r0, #0
   11ac4:	ldrne	r0, [r0]
   11ac8:	moveq	r0, #0
   11acc:	bx	lr

00011ad0 <lista_fim@@Base>:
   11ad0:	cmp	r0, #0
   11ad4:	ldrne	r0, [r0, #4]
   11ad8:	moveq	r0, #0
   11adc:	bx	lr

00011ae0 <lista_insere@@Base>:
   11ae0:	push	{r4, r5, r6, r7, fp, lr}
   11ae4:	add	fp, sp, #16
   11ae8:	cmp	r0, #0
   11aec:	moveq	r5, #0
   11af0:	moveq	r0, r5
   11af4:	popeq	{r4, r5, r6, r7, fp, pc}
   11af8:	mov	r4, r0
   11afc:	mov	r0, #12
   11b00:	mov	r6, r2
   11b04:	mov	r7, r1
   11b08:	bl	10afc <malloc@plt>
   11b0c:	mov	r5, r0
   11b10:	mov	r0, r7
   11b14:	bl	10b20 <strlen@plt>
   11b18:	add	r0, r0, #1
   11b1c:	bl	10afc <malloc@plt>
   11b20:	mov	r1, r7
   11b24:	str	r0, [r5]
   11b28:	bl	10ae4 <strcpy@plt>
   11b2c:	ldr	r0, [r4, #8]
   11b30:	cmp	r0, #0
   11b34:	beq	11b64 <lista_insere@@Base+0x84>
   11b38:	cmp	r6, #0
   11b3c:	beq	11b7c <lista_insere@@Base+0x9c>
   11b40:	ldr	r1, [r4]
   11b44:	cmp	r1, r6
   11b48:	beq	11b94 <lista_insere@@Base+0xb4>
   11b4c:	mov	r1, r6
   11b50:	ldr	r2, [r1, #8]!
   11b54:	str	r5, [r2, #4]
   11b58:	str	r6, [r5, #4]
   11b5c:	str	r2, [r5, #8]
   11b60:	b	11ba0 <lista_insere@@Base+0xc0>
   11b64:	mov	r1, #0
   11b68:	str	r1, [r5, #4]
   11b6c:	str	r1, [r5, #8]
   11b70:	mov	r1, r4
   11b74:	str	r5, [r1], #4
   11b78:	b	11ba0 <lista_insere@@Base+0xc0>
   11b7c:	mov	r1, r4
   11b80:	mov	r2, #0
   11b84:	ldr	r3, [r1, #4]!
   11b88:	stmib	r5, {r2, r3}
   11b8c:	str	r5, [r3, #4]
   11b90:	b	11ba0 <lista_insere@@Base+0xc0>
   11b94:	str	r1, [r5, #4]
   11b98:	str	r5, [r4]
   11b9c:	add	r1, r5, #8
   11ba0:	add	r0, r0, #1
   11ba4:	str	r5, [r1]
   11ba8:	str	r0, [r4, #8]
   11bac:	mov	r0, r5
   11bb0:	pop	{r4, r5, r6, r7, fp, pc}

00011bb4 <lista_remove@@Base>:
   11bb4:	push	{r4, r5, r6, sl, fp, lr}
   11bb8:	add	fp, sp, #16
   11bbc:	cmp	r1, #0
   11bc0:	moveq	r4, #0
   11bc4:	moveq	r0, r4
   11bc8:	popeq	{r4, r5, r6, sl, fp, pc}
   11bcc:	mov	r5, r0
   11bd0:	ldr	r0, [r0]
   11bd4:	ldr	r4, [r1, #4]
   11bd8:	mov	r6, r1
   11bdc:	cmp	r0, r1
   11be0:	beq	11c04 <lista_remove@@Base+0x50>
   11be4:	ldr	r1, [r5, #4]
   11be8:	ldr	r0, [r6, #8]
   11bec:	cmp	r1, r6
   11bf0:	beq	11c14 <lista_remove@@Base+0x60>
   11bf4:	str	r4, [r0, #4]
   11bf8:	ldr	r1, [r6, #4]
   11bfc:	str	r0, [r1, #8]
   11c00:	b	11c20 <lista_remove@@Base+0x6c>
   11c04:	mov	r0, #0
   11c08:	str	r0, [r4, #8]
   11c0c:	str	r4, [r5]
   11c10:	b	11c20 <lista_remove@@Base+0x6c>
   11c14:	mov	r1, #0
   11c18:	str	r1, [r0, #4]
   11c1c:	str	r0, [r5, #4]
   11c20:	ldr	r0, [r6]
   11c24:	bl	10acc <free@plt>
   11c28:	mov	r0, r6
   11c2c:	bl	10acc <free@plt>
   11c30:	ldr	r0, [r5, #8]
   11c34:	sub	r0, r0, #1
   11c38:	str	r0, [r5, #8]
   11c3c:	mov	r0, r4
   11c40:	pop	{r4, r5, r6, sl, fp, pc}

00011c44 <lista_pesquisa@@Base>:
   11c44:	push	{r4, r5, r6, r7, fp, lr}
   11c48:	add	fp, sp, #16
   11c4c:	mov	r5, #0
   11c50:	cmp	r0, #0
   11c54:	beq	11ce8 <lista_pesquisa@@Base+0xa4>
   11c58:	mov	r4, r1
   11c5c:	cmp	r2, #1
   11c60:	beq	11ca8 <lista_pesquisa@@Base+0x64>
   11c64:	cmp	r2, #0
   11c68:	bne	11ce8 <lista_pesquisa@@Base+0xa4>
   11c6c:	ldr	r6, [r0, #8]
   11c70:	cmp	r6, #1
   11c74:	blt	11ce8 <lista_pesquisa@@Base+0xa4>
   11c78:	mov	r7, #0
   11c7c:	ldr	r5, [r0]
   11c80:	mov	r1, r4
   11c84:	ldr	r0, [r5]
   11c88:	bl	10ab4 <strcmp@plt>
   11c8c:	cmp	r0, #0
   11c90:	beq	11ce8 <lista_pesquisa@@Base+0xa4>
   11c94:	add	r7, r7, #1
   11c98:	add	r0, r5, #4
   11c9c:	cmp	r7, r6
   11ca0:	blt	11c7c <lista_pesquisa@@Base+0x38>
   11ca4:	b	11ce4 <lista_pesquisa@@Base+0xa0>
   11ca8:	ldr	r6, [r0, #8]
   11cac:	cmp	r6, #1
   11cb0:	blt	11ce8 <lista_pesquisa@@Base+0xa4>
   11cb4:	add	r0, r0, #4
   11cb8:	mov	r7, #0
   11cbc:	ldr	r5, [r0]
   11cc0:	mov	r1, r4
   11cc4:	ldr	r0, [r5]
   11cc8:	bl	10ab4 <strcmp@plt>
   11ccc:	cmp	r0, #0
   11cd0:	beq	11ce8 <lista_pesquisa@@Base+0xa4>
   11cd4:	add	r7, r7, #1
   11cd8:	add	r0, r5, #8
   11cdc:	cmp	r7, r6
   11ce0:	blt	11cbc <lista_pesquisa@@Base+0x78>
   11ce4:	mov	r5, #0
   11ce8:	mov	r0, r5
   11cec:	pop	{r4, r5, r6, r7, fp, pc}

00011cf0 <lista_ordena@@Base>:
   11cf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cf4:	add	fp, sp, #28
   11cf8:	sub	sp, sp, #4
   11cfc:	cmp	r0, #0
   11d00:	beq	11dac <lista_ordena@@Base+0xbc>
   11d04:	ldr	r1, [r0, #8]
   11d08:	mov	r2, #0
   11d0c:	cmp	r1, #0
   11d10:	beq	11db0 <lista_ordena@@Base+0xc0>
   11d14:	ldr	sl, [r0]
   11d18:	ldr	r9, [r0, #4]
   11d1c:	cmp	sl, r9
   11d20:	beq	11db0 <lista_ordena@@Base+0xc0>
   11d24:	mov	r8, sl
   11d28:	ldr	r4, [r8, #4]
   11d2c:	ldr	r5, [r8]
   11d30:	ldr	r6, [r4]
   11d34:	mov	r0, r5
   11d38:	mov	r1, r6
   11d3c:	bl	10ab4 <strcmp@plt>
   11d40:	cmp	r0, #1
   11d44:	blt	11d98 <lista_ordena@@Base+0xa8>
   11d48:	mov	r7, r8
   11d4c:	mov	r0, r8
   11d50:	str	r6, [r7]
   11d54:	str	r5, [r4]
   11d58:	cmp	r0, sl
   11d5c:	mov	r7, sl
   11d60:	ldrne	r7, [r0, #8]
   11d64:	ldr	r4, [r7, #4]
   11d68:	ldr	r5, [r7]
   11d6c:	ldr	r6, [r4]
   11d70:	mov	r0, r5
   11d74:	mov	r1, r6
   11d78:	bl	10ab4 <strcmp@plt>
   11d7c:	cmp	r0, #0
   11d80:	mov	r0, r7
   11d84:	bgt	11d50 <lista_ordena@@Base+0x60>
   11d88:	ldr	r8, [r8, #4]
   11d8c:	cmp	r8, r9
   11d90:	bne	11d28 <lista_ordena@@Base+0x38>
   11d94:	b	11da4 <lista_ordena@@Base+0xb4>
   11d98:	mov	r8, r4
   11d9c:	cmp	r8, r9
   11da0:	bne	11d28 <lista_ordena@@Base+0x38>
   11da4:	mov	r2, #0
   11da8:	b	11db0 <lista_ordena@@Base+0xc0>
   11dac:	mvn	r2, #0
   11db0:	mov	r0, r2
   11db4:	sub	sp, fp, #28
   11db8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011dbc <lista_inverte@@Base>:
   11dbc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11dc0:	add	fp, sp, #24
   11dc4:	cmp	r0, #0
   11dc8:	mvneq	r8, #0
   11dcc:	moveq	r0, r8
   11dd0:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   11dd4:	mov	r9, r0
   11dd8:	ldr	r0, [r0, #8]
   11ddc:	mov	r8, #0
   11de0:	cmp	r0, #2
   11de4:	blt	11e38 <lista_inverte@@Base+0x7c>
   11de8:	add	r7, r9, #4
   11dec:	mov	r8, #0
   11df0:	mov	r4, r9
   11df4:	mov	r5, #0
   11df8:	ldr	r4, [r4]
   11dfc:	ldr	r7, [r7]
   11e00:	ldr	r0, [r4]
   11e04:	bl	10ad8 <strdup@plt>
   11e08:	mov	r6, r0
   11e0c:	ldr	r0, [r7]
   11e10:	bl	10ad8 <strdup@plt>
   11e14:	str	r0, [r4], #4
   11e18:	mov	r0, r6
   11e1c:	bl	10ad8 <strdup@plt>
   11e20:	str	r0, [r7], #8
   11e24:	add	r5, r5, #1
   11e28:	ldr	r0, [r9, #8]
   11e2c:	add	r0, r0, r0, lsr #31
   11e30:	cmp	r5, r0, asr #1
   11e34:	blt	11df8 <lista_inverte@@Base+0x3c>
   11e38:	mov	r0, r8
   11e3c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00011e40 <__libc_csu_init@@Base>:
   11e40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11e44:	mov	r7, r0
   11e48:	ldr	r6, [pc, #72]	; 11e98 <__libc_csu_init@@Base+0x58>
   11e4c:	ldr	r5, [pc, #72]	; 11e9c <__libc_csu_init@@Base+0x5c>
   11e50:	add	r6, pc, r6
   11e54:	add	r5, pc, r5
   11e58:	sub	r6, r6, r5
   11e5c:	mov	r8, r1
   11e60:	mov	r9, r2
   11e64:	bl	10a94 <strcmp@plt-0x20>
   11e68:	asrs	r6, r6, #2
   11e6c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e70:	mov	r4, #0
   11e74:	add	r4, r4, #1
   11e78:	ldr	r3, [r5], #4
   11e7c:	mov	r2, r9
   11e80:	mov	r1, r8
   11e84:	mov	r0, r7
   11e88:	blx	r3
   11e8c:	cmp	r6, r4
   11e90:	bne	11e74 <__libc_csu_init@@Base+0x34>
   11e94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11e98:	strheq	r1, [r1], -r4
   11e9c:	andeq	r1, r1, ip, lsr #1

00011ea0 <__libc_csu_fini@@Base>:
   11ea0:	bx	lr

Disassembly of section .fini:

00011ea4 <.fini>:
   11ea4:	push	{r3, lr}
   11ea8:	pop	{r3, pc}
