
../repos/prog2/0.11.2:     file format elf32-littlearm


Disassembly of section .init:

00010660 <.init>:
   10660:	push	{r3, lr}
   10664:	bl	10828 <_start@@Base+0x3c>
   10668:	pop	{r3, pc}

Disassembly of section .plt:

0001066c <strcmp@plt-0x14>:
   1066c:	push	{lr}		; (str lr, [sp, #-4]!)
   10670:	ldr	lr, [pc, #4]	; 1067c <strcmp@plt-0x4>
   10674:	add	lr, pc, lr
   10678:	ldr	pc, [lr, #8]!
   1067c:	andeq	r0, r1, r4, lsl #19

00010680 <strcmp@plt>:
   10680:	add	ip, pc, #0, 12
   10684:	add	ip, ip, #16, 20	; 0x10000
   10688:	ldr	pc, [ip, #2436]!	; 0x984

0001068c <strcat@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2428]!	; 0x97c

00010698 <strcpy@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #16, 20	; 0x10000
   106a0:	ldr	pc, [ip, #2420]!	; 0x974

000106a4 <puts@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2412]!	; 0x96c

000106b0 <__libc_start_main@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2404]!	; 0x964

000106bc <__gmon_start__@plt>:
   106bc:	add	ip, pc, #0, 12
   106c0:	add	ip, ip, #16, 20	; 0x10000
   106c4:	ldr	pc, [ip, #2396]!	; 0x95c

000106c8 <strlen@plt>:
   106c8:	add	ip, pc, #0, 12
   106cc:	add	ip, ip, #16, 20	; 0x10000
   106d0:	ldr	pc, [ip, #2388]!	; 0x954

000106d4 <__isoc99_scanf@plt>:
   106d4:	add	ip, pc, #0, 12
   106d8:	add	ip, ip, #16, 20	; 0x10000
   106dc:	ldr	pc, [ip, #2380]!	; 0x94c

000106e0 <abort@plt>:
   106e0:	add	ip, pc, #0, 12
   106e4:	add	ip, ip, #16, 20	; 0x10000
   106e8:	ldr	pc, [ip, #2372]!	; 0x944

Disassembly of section .text:

000106ec <main@@Base>:
   106ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   106f0:	mov	r2, #0
   106f4:	strd	r6, [sp, #8]
   106f8:	strd	r8, [sp, #16]
   106fc:	ldr	r9, [pc, #224]	; 107e4 <main@@Base+0xf8>
   10700:	strd	sl, [sp, #24]
   10704:	ldr	sl, [pc, #220]	; 107e8 <main@@Base+0xfc>
   10708:	str	lr, [sp, #32]
   1070c:	sub	sp, sp, #108	; 0x6c
   10710:	add	r8, sp, #8
   10714:	add	fp, sp, #4
   10718:	add	r9, pc, r9
   1071c:	str	r2, [sp, #20]
   10720:	str	r2, [sp, #24]
   10724:	add	sl, pc, sl
   10728:	str	r2, [sp, #28]
   1072c:	str	r2, [sp, #32]
   10730:	str	r2, [sp, #36]	; 0x24
   10734:	str	r2, [sp, #40]	; 0x28
   10738:	strh	r2, [sp, #44]	; 0x2c
   1073c:	mov	r1, r8
   10740:	mov	r0, r9
   10744:	bl	106d4 <__isoc99_scanf@plt>
   10748:	ldrb	r3, [sp, #8]
   1074c:	cmp	r3, #46	; 0x2e
   10750:	beq	107c4 <main@@Base+0xd8>
   10754:	mov	r1, fp
   10758:	add	r4, sp, #20
   1075c:	mov	r0, sl
   10760:	add	r7, sp, #48	; 0x30
   10764:	bl	106d4 <__isoc99_scanf@plt>
   10768:	mov	r1, r4
   1076c:	mov	r0, r8
   10770:	ldr	r2, [sp, #4]
   10774:	bl	109b8 <StringSet@@Base>
   10778:	mov	r0, r4
   1077c:	mov	r1, r7
   10780:	add	r5, sp, #76	; 0x4c
   10784:	bl	108dc <R_ShiftString@@Base>
   10788:	mov	r1, r7
   1078c:	mov	r0, r4
   10790:	bl	10680 <strcmp@plt>
   10794:	mov	r6, r0
   10798:	mov	r0, r4
   1079c:	bl	106a4 <puts@plt>
   107a0:	mov	r1, r4
   107a4:	mov	r0, r5
   107a8:	bl	10698 <strcpy@plt>
   107ac:	mov	r1, r4
   107b0:	mov	r0, r5
   107b4:	bl	10948 <L_ShiftString@@Base>
   107b8:	cmp	r6, #0
   107bc:	bne	10788 <main@@Base+0x9c>
   107c0:	b	1073c <main@@Base+0x50>
   107c4:	mov	r0, #0
   107c8:	add	sp, sp, #108	; 0x6c
   107cc:	ldrd	r4, [sp]
   107d0:	ldrd	r6, [sp, #8]
   107d4:	ldrd	r8, [sp, #16]
   107d8:	ldrd	sl, [sp, #24]
   107dc:	add	sp, sp, #32
   107e0:	pop	{pc}		; (ldr pc, [sp], #4)
   107e4:	andeq	r0, r0, r8, asr r3
   107e8:	andeq	r0, r0, r0, asr r3

000107ec <_start@@Base>:
   107ec:	mov	fp, #0
   107f0:	mov	lr, #0
   107f4:	pop	{r1}		; (ldr r1, [sp], #4)
   107f8:	mov	r2, sp
   107fc:	push	{r2}		; (str r2, [sp, #-4]!)
   10800:	push	{r0}		; (str r0, [sp, #-4]!)
   10804:	ldr	ip, [pc, #16]	; 1081c <_start@@Base+0x30>
   10808:	push	{ip}		; (str ip, [sp, #-4]!)
   1080c:	ldr	r0, [pc, #12]	; 10820 <_start@@Base+0x34>
   10810:	ldr	r3, [pc, #12]	; 10824 <_start@@Base+0x38>
   10814:	bl	106b0 <__libc_start_main@plt>
   10818:	bl	106e0 <abort@plt>
   1081c:	andeq	r0, r1, r8, ror #20
   10820:	andeq	r0, r1, ip, ror #13
   10824:	andeq	r0, r1, r8, lsl #20
   10828:	ldr	r3, [pc, #20]	; 10844 <_start@@Base+0x58>
   1082c:	ldr	r2, [pc, #20]	; 10848 <_start@@Base+0x5c>
   10830:	add	r3, pc, r3
   10834:	ldr	r2, [r3, r2]
   10838:	cmp	r2, #0
   1083c:	bxeq	lr
   10840:	b	106bc <__gmon_start__@plt>
   10844:	andeq	r0, r1, r8, asr #15
   10848:	andeq	r0, r0, r0, lsr r0
   1084c:	ldr	r0, [pc, #24]	; 1086c <_start@@Base+0x80>
   10850:	ldr	r3, [pc, #24]	; 10870 <_start@@Base+0x84>
   10854:	cmp	r3, r0
   10858:	bxeq	lr
   1085c:	ldr	r3, [pc, #16]	; 10874 <_start@@Base+0x88>
   10860:	cmp	r3, #0
   10864:	bxeq	lr
   10868:	bx	r3
   1086c:	andeq	r1, r2, ip, lsr r0
   10870:	andeq	r1, r2, ip, lsr r0
   10874:	andeq	r0, r0, r0
   10878:	ldr	r0, [pc, #36]	; 108a4 <_start@@Base+0xb8>
   1087c:	ldr	r1, [pc, #36]	; 108a8 <_start@@Base+0xbc>
   10880:	sub	r1, r1, r0
   10884:	asr	r1, r1, #2
   10888:	add	r1, r1, r1, lsr #31
   1088c:	asrs	r1, r1, #1
   10890:	bxeq	lr
   10894:	ldr	r3, [pc, #16]	; 108ac <_start@@Base+0xc0>
   10898:	cmp	r3, #0
   1089c:	bxeq	lr
   108a0:	bx	r3
   108a4:	andeq	r1, r2, ip, lsr r0
   108a8:	andeq	r1, r2, ip, lsr r0
   108ac:	andeq	r0, r0, r0
   108b0:	push	{r4, lr}
   108b4:	ldr	r4, [pc, #24]	; 108d4 <_start@@Base+0xe8>
   108b8:	ldrb	r3, [r4]
   108bc:	cmp	r3, #0
   108c0:	popne	{r4, pc}
   108c4:	bl	1084c <_start@@Base+0x60>
   108c8:	mov	r3, #1
   108cc:	strb	r3, [r4]
   108d0:	pop	{r4, pc}
   108d4:	andeq	r1, r2, ip, lsr r0
   108d8:	b	10878 <_start@@Base+0x8c>

000108dc <R_ShiftString@@Base>:
   108dc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   108e0:	mov	r5, r1
   108e4:	strd	r6, [sp, #8]
   108e8:	mov	r6, r0
   108ec:	str	r8, [sp, #16]
   108f0:	sub	r4, r6, #1
   108f4:	rsb	r7, r6, #2
   108f8:	str	lr, [sp, #20]
   108fc:	bl	106c8 <strlen@plt>
   10900:	add	r0, r6, r0
   10904:	ldrb	r3, [r0, #-1]
   10908:	strb	r3, [r5], #1
   1090c:	b	10918 <R_ShiftString@@Base+0x3c>
   10910:	ldrb	r3, [r4, #1]!
   10914:	strb	r3, [r5], #1
   10918:	mov	r0, r6
   1091c:	bl	106c8 <strlen@plt>
   10920:	add	r3, r7, r4
   10924:	cmp	r0, r3
   10928:	bhi	10910 <R_ShiftString@@Base+0x34>
   1092c:	mov	r3, #0
   10930:	strb	r3, [r5]
   10934:	ldrd	r4, [sp]
   10938:	ldrd	r6, [sp, #8]
   1093c:	ldr	r8, [sp, #16]
   10940:	add	sp, sp, #20
   10944:	pop	{pc}		; (ldr pc, [sp], #4)

00010948 <L_ShiftString@@Base>:
   10948:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1094c:	mov	r4, #1
   10950:	strd	r6, [sp, #8]
   10954:	mov	r7, r0
   10958:	str	r8, [sp, #16]
   1095c:	mov	r8, r1
   10960:	mov	r6, r7
   10964:	str	lr, [sp, #20]
   10968:	sub	r5, r8, #1
   1096c:	bl	106c8 <strlen@plt>
   10970:	ldrb	r3, [r7]
   10974:	add	r0, r8, r0
   10978:	strb	r3, [r0, #-1]
   1097c:	b	1098c <L_ShiftString@@Base+0x44>
   10980:	ldrb	r3, [r6, #1]!
   10984:	add	r4, r4, #1
   10988:	strb	r3, [r5, #1]!
   1098c:	mov	r0, r7
   10990:	bl	106c8 <strlen@plt>
   10994:	cmp	r0, r4
   10998:	bhi	10980 <L_ShiftString@@Base+0x38>
   1099c:	mov	r3, #0
   109a0:	strb	r3, [r8, r4]
   109a4:	ldrd	r4, [sp]
   109a8:	ldrd	r6, [sp, #8]
   109ac:	ldr	r8, [sp, #16]
   109b0:	add	sp, sp, #20
   109b4:	pop	{pc}		; (ldr pc, [sp], #4)

000109b8 <StringSet@@Base>:
   109b8:	strd	r4, [sp, #-16]!
   109bc:	mov	r4, #0
   109c0:	subs	r5, r2, #0
   109c4:	str	r6, [sp, #8]
   109c8:	str	lr, [sp, #12]
   109cc:	strb	r4, [r1]
   109d0:	ble	109f8 <StringSet@@Base+0x40>
   109d4:	mov	r6, r0
   109d8:	mov	r3, r1
   109dc:	mov	r0, r3
   109e0:	add	r4, r4, #1
   109e4:	mov	r1, r6
   109e8:	bl	1068c <strcat@plt>
   109ec:	cmp	r5, r4
   109f0:	mov	r3, r0
   109f4:	bne	109dc <StringSet@@Base+0x24>
   109f8:	ldrd	r4, [sp]
   109fc:	ldr	r6, [sp, #8]
   10a00:	add	sp, sp, #12
   10a04:	pop	{pc}		; (ldr pc, [sp], #4)

00010a08 <__libc_csu_init@@Base>:
   10a08:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a0c:	mov	r7, r0
   10a10:	ldr	r6, [pc, #72]	; 10a60 <__libc_csu_init@@Base+0x58>
   10a14:	ldr	r5, [pc, #72]	; 10a64 <__libc_csu_init@@Base+0x5c>
   10a18:	add	r6, pc, r6
   10a1c:	add	r5, pc, r5
   10a20:	sub	r6, r6, r5
   10a24:	mov	r8, r1
   10a28:	mov	r9, r2
   10a2c:	bl	10660 <strcmp@plt-0x20>
   10a30:	asrs	r6, r6, #2
   10a34:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a38:	mov	r4, #0
   10a3c:	add	r4, r4, #1
   10a40:	ldr	r3, [r5], #4
   10a44:	mov	r2, r9
   10a48:	mov	r1, r8
   10a4c:	mov	r0, r7
   10a50:	blx	r3
   10a54:	cmp	r6, r4
   10a58:	bne	10a3c <__libc_csu_init@@Base+0x34>
   10a5c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a60:	strdeq	r0, [r1], -r4
   10a64:	andeq	r0, r1, ip, ror #9

00010a68 <__libc_csu_fini@@Base>:
   10a68:	bx	lr

Disassembly of section .fini:

00010a6c <.fini>:
   10a6c:	push	{r3, lr}
   10a70:	pop	{r3, pc}
