
../repos/coreutils/src/dir:     file format elf32-littlearm


Disassembly of section .init:

00011838 <.init>:
   11838:	push	{r3, lr}
   1183c:	bl	13cb4 <__assert_fail@plt+0x1f40>
   11840:	pop	{r3, pc}

Disassembly of section .plt:

00011844 <calloc@plt-0x14>:
   11844:	push	{lr}		; (str lr, [sp, #-4]!)
   11848:	ldr	lr, [pc, #4]	; 11854 <calloc@plt-0x4>
   1184c:	add	lr, pc, lr
   11850:	ldr	pc, [lr, #8]!
   11854:	andeq	pc, r2, ip, lsr #15

00011858 <calloc@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #192512	; 0x2f000
   11860:	ldr	pc, [ip, #1964]!	; 0x7ac

00011864 <fputs_unlocked@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #192512	; 0x2f000
   1186c:	ldr	pc, [ip, #1956]!	; 0x7a4

00011870 <cap_to_text@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #192512	; 0x2f000
   11878:	ldr	pc, [ip, #1948]!	; 0x79c

0001187c <raise@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #192512	; 0x2f000
   11884:	ldr	pc, [ip, #1940]!	; 0x794

00011888 <gmtime_r@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #192512	; 0x2f000
   11890:	ldr	pc, [ip, #1932]!	; 0x78c

00011894 <getpwnam@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #192512	; 0x2f000
   1189c:	ldr	pc, [ip, #1924]!	; 0x784

000118a0 <strcmp@plt>:
   118a0:	add	ip, pc, #0, 12
   118a4:	add	ip, ip, #192512	; 0x2f000
   118a8:	ldr	pc, [ip, #1916]!	; 0x77c

000118ac <getpwuid@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #192512	; 0x2f000
   118b4:	ldr	pc, [ip, #1908]!	; 0x774

000118b8 <mktime@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #192512	; 0x2f000
   118c0:	ldr	pc, [ip, #1900]!	; 0x76c

000118c4 <fflush@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #192512	; 0x2f000
   118cc:	ldr	pc, [ip, #1892]!	; 0x764

000118d0 <wcwidth@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #192512	; 0x2f000
   118d8:	ldr	pc, [ip, #1884]!	; 0x75c

000118dc <sigprocmask@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #192512	; 0x2f000
   118e4:	ldr	pc, [ip, #1876]!	; 0x754

000118e8 <_setjmp@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #192512	; 0x2f000
   118f0:	ldr	pc, [ip, #1868]!	; 0x74c

000118f4 <memmove@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #192512	; 0x2f000
   118fc:	ldr	pc, [ip, #1860]!	; 0x744

00011900 <free@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #192512	; 0x2f000
   11908:	ldr	pc, [ip, #1852]!	; 0x73c

0001190c <faccessat@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #192512	; 0x2f000
   11914:	ldr	pc, [ip, #1844]!	; 0x734

00011918 <clock_gettime@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #192512	; 0x2f000
   11920:	ldr	pc, [ip, #1836]!	; 0x72c

00011924 <_exit@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #192512	; 0x2f000
   1192c:	ldr	pc, [ip, #1828]!	; 0x724

00011930 <memcpy@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #192512	; 0x2f000
   11938:	ldr	pc, [ip, #1820]!	; 0x71c

0001193c <__strtoull_internal@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #192512	; 0x2f000
   11944:	ldr	pc, [ip, #1812]!	; 0x714

00011948 <mbsinit@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #192512	; 0x2f000
   11950:	ldr	pc, [ip, #1804]!	; 0x70c

00011954 <signal@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #192512	; 0x2f000
   1195c:	ldr	pc, [ip, #1796]!	; 0x704

00011960 <fwrite_unlocked@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #192512	; 0x2f000
   11968:	ldr	pc, [ip, #1788]!	; 0x6fc

0001196c <memcmp@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #192512	; 0x2f000
   11974:	ldr	pc, [ip, #1780]!	; 0x6f4

00011978 <fputc_unlocked@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #192512	; 0x2f000
   11980:	ldr	pc, [ip, #1772]!	; 0x6ec

00011984 <dcgettext@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #192512	; 0x2f000
   1198c:	ldr	pc, [ip, #1764]!	; 0x6e4

00011990 <realloc@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #192512	; 0x2f000
   11998:	ldr	pc, [ip, #1756]!	; 0x6dc

0001199c <sigismember@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #192512	; 0x2f000
   119a4:	ldr	pc, [ip, #1748]!	; 0x6d4

000119a8 <fgetfilecon@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #192512	; 0x2f000
   119b0:	ldr	pc, [ip, #1740]!	; 0x6cc

000119b4 <localtime_r@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #192512	; 0x2f000
   119bc:	ldr	pc, [ip, #1732]!	; 0x6c4

000119c0 <textdomain@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #192512	; 0x2f000
   119c8:	ldr	pc, [ip, #1724]!	; 0x6bc

000119cc <iswcntrl@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #192512	; 0x2f000
   119d4:	ldr	pc, [ip, #1716]!	; 0x6b4

000119d8 <rawmemchr@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #192512	; 0x2f000
   119e0:	ldr	pc, [ip, #1708]!	; 0x6ac

000119e4 <fflush_unlocked@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #192512	; 0x2f000
   119ec:	ldr	pc, [ip, #1700]!	; 0x6a4

000119f0 <iswprint@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #192512	; 0x2f000
   119f8:	ldr	pc, [ip, #1692]!	; 0x69c

000119fc <tzset@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #192512	; 0x2f000
   11a04:	ldr	pc, [ip, #1684]!	; 0x694

00011a08 <readlink@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #192512	; 0x2f000
   11a10:	ldr	pc, [ip, #1676]!	; 0x68c

00011a14 <sigaction@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #192512	; 0x2f000
   11a1c:	ldr	pc, [ip, #1668]!	; 0x684

00011a20 <__memcpy_chk@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #192512	; 0x2f000
   11a28:	ldr	pc, [ip, #1660]!	; 0x67c

00011a2c <fwrite@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #192512	; 0x2f000
   11a34:	ldr	pc, [ip, #1652]!	; 0x674

00011a38 <ioctl@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #192512	; 0x2f000
   11a40:	ldr	pc, [ip, #1644]!	; 0x66c

00011a44 <lseek64@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #192512	; 0x2f000
   11a4c:	ldr	pc, [ip, #1636]!	; 0x664

00011a50 <__ctype_get_mb_cur_max@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #192512	; 0x2f000
   11a58:	ldr	pc, [ip, #1628]!	; 0x65c

00011a5c <strcpy@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #192512	; 0x2f000
   11a64:	ldr	pc, [ip, #1620]!	; 0x654

00011a68 <__fpending@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #192512	; 0x2f000
   11a70:	ldr	pc, [ip, #1612]!	; 0x64c

00011a74 <mbrtowc@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #192512	; 0x2f000
   11a7c:	ldr	pc, [ip, #1604]!	; 0x644

00011a80 <wcstombs@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #192512	; 0x2f000
   11a88:	ldr	pc, [ip, #1596]!	; 0x63c

00011a8c <error@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #192512	; 0x2f000
   11a94:	ldr	pc, [ip, #1588]!	; 0x634

00011a98 <gethostname@plt>:
   11a98:	add	ip, pc, #0, 12
   11a9c:	add	ip, ip, #192512	; 0x2f000
   11aa0:	ldr	pc, [ip, #1580]!	; 0x62c

00011aa4 <opendir@plt>:
   11aa4:	add	ip, pc, #0, 12
   11aa8:	add	ip, ip, #192512	; 0x2f000
   11aac:	ldr	pc, [ip, #1572]!	; 0x624

00011ab0 <fnmatch@plt>:
   11ab0:	add	ip, pc, #0, 12
   11ab4:	add	ip, ip, #192512	; 0x2f000
   11ab8:	ldr	pc, [ip, #1564]!	; 0x61c

00011abc <strcoll@plt>:
   11abc:	add	ip, pc, #0, 12
   11ac0:	add	ip, ip, #192512	; 0x2f000
   11ac4:	ldr	pc, [ip, #1556]!	; 0x614

00011ac8 <getenv@plt>:
   11ac8:	add	ip, pc, #0, 12
   11acc:	add	ip, ip, #192512	; 0x2f000
   11ad0:	ldr	pc, [ip, #1548]!	; 0x60c

00011ad4 <lgetfilecon@plt>:
   11ad4:	add	ip, pc, #0, 12
   11ad8:	add	ip, ip, #192512	; 0x2f000
   11adc:	ldr	pc, [ip, #1540]!	; 0x604

00011ae0 <malloc@plt>:
   11ae0:	add	ip, pc, #0, 12
   11ae4:	add	ip, ip, #192512	; 0x2f000
   11ae8:	ldr	pc, [ip, #1532]!	; 0x5fc

00011aec <sigaddset@plt>:
   11aec:	add	ip, pc, #0, 12
   11af0:	add	ip, ip, #192512	; 0x2f000
   11af4:	ldr	pc, [ip, #1524]!	; 0x5f4

00011af8 <__libc_start_main@plt>:
   11af8:	add	ip, pc, #0, 12
   11afc:	add	ip, ip, #192512	; 0x2f000
   11b00:	ldr	pc, [ip, #1516]!	; 0x5ec

00011b04 <strftime@plt>:
   11b04:	add	ip, pc, #0, 12
   11b08:	add	ip, ip, #192512	; 0x2f000
   11b0c:	ldr	pc, [ip, #1508]!	; 0x5e4

00011b10 <__freading@plt>:
   11b10:	add	ip, pc, #0, 12
   11b14:	add	ip, ip, #192512	; 0x2f000
   11b18:	ldr	pc, [ip, #1500]!	; 0x5dc

00011b1c <__ctype_tolower_loc@plt>:
   11b1c:	add	ip, pc, #0, 12
   11b20:	add	ip, ip, #192512	; 0x2f000
   11b24:	ldr	pc, [ip, #1492]!	; 0x5d4

00011b28 <__ctype_toupper_loc@plt>:
   11b28:	add	ip, pc, #0, 12
   11b2c:	add	ip, ip, #192512	; 0x2f000
   11b30:	ldr	pc, [ip, #1484]!	; 0x5cc

00011b34 <__gmon_start__@plt>:
   11b34:	add	ip, pc, #0, 12
   11b38:	add	ip, ip, #192512	; 0x2f000
   11b3c:	ldr	pc, [ip, #1476]!	; 0x5c4

00011b40 <mempcpy@plt>:
   11b40:	add	ip, pc, #0, 12
   11b44:	add	ip, ip, #192512	; 0x2f000
   11b48:	ldr	pc, [ip, #1468]!	; 0x5bc

00011b4c <getopt_long@plt>:
   11b4c:	add	ip, pc, #0, 12
   11b50:	add	ip, ip, #192512	; 0x2f000
   11b54:	ldr	pc, [ip, #1460]!	; 0x5b4

00011b58 <__ctype_b_loc@plt>:
   11b58:	add	ip, pc, #0, 12
   11b5c:	add	ip, ip, #192512	; 0x2f000
   11b60:	ldr	pc, [ip, #1452]!	; 0x5ac

00011b64 <getcwd@plt>:
   11b64:	add	ip, pc, #0, 12
   11b68:	add	ip, ip, #192512	; 0x2f000
   11b6c:	ldr	pc, [ip, #1444]!	; 0x5a4

00011b70 <exit@plt>:
   11b70:	add	ip, pc, #0, 12
   11b74:	add	ip, ip, #192512	; 0x2f000
   11b78:	ldr	pc, [ip, #1436]!	; 0x59c

00011b7c <getfilecon@plt>:
   11b7c:	add	ip, pc, #0, 12
   11b80:	add	ip, ip, #192512	; 0x2f000
   11b84:	ldr	pc, [ip, #1428]!	; 0x594

00011b88 <tcgetpgrp@plt>:
   11b88:	add	ip, pc, #0, 12
   11b8c:	add	ip, ip, #192512	; 0x2f000
   11b90:	ldr	pc, [ip, #1420]!	; 0x58c

00011b94 <strlen@plt>:
   11b94:	add	ip, pc, #0, 12
   11b98:	add	ip, ip, #192512	; 0x2f000
   11b9c:	ldr	pc, [ip, #1412]!	; 0x584

00011ba0 <strchr@plt>:
   11ba0:	add	ip, pc, #0, 12
   11ba4:	add	ip, ip, #192512	; 0x2f000
   11ba8:	ldr	pc, [ip, #1404]!	; 0x57c

00011bac <setenv@plt>:
   11bac:	add	ip, pc, #0, 12
   11bb0:	add	ip, ip, #192512	; 0x2f000
   11bb4:	ldr	pc, [ip, #1396]!	; 0x574

00011bb8 <__errno_location@plt>:
   11bb8:	add	ip, pc, #0, 12
   11bbc:	add	ip, ip, #192512	; 0x2f000
   11bc0:	ldr	pc, [ip, #1388]!	; 0x56c

00011bc4 <__sprintf_chk@plt>:
   11bc4:	add	ip, pc, #0, 12
   11bc8:	add	ip, ip, #192512	; 0x2f000
   11bcc:	ldr	pc, [ip, #1380]!	; 0x564

00011bd0 <snprintf@plt>:
   11bd0:	add	ip, pc, #0, 12
   11bd4:	add	ip, ip, #192512	; 0x2f000
   11bd8:	ldr	pc, [ip, #1372]!	; 0x55c

00011bdc <__cxa_atexit@plt>:
   11bdc:	add	ip, pc, #0, 12
   11be0:	add	ip, ip, #192512	; 0x2f000
   11be4:	ldr	pc, [ip, #1364]!	; 0x554

00011be8 <memset@plt>:
   11be8:	add	ip, pc, #0, 12
   11bec:	add	ip, ip, #192512	; 0x2f000
   11bf0:	ldr	pc, [ip, #1356]!	; 0x54c

00011bf4 <__printf_chk@plt>:
   11bf4:	add	ip, pc, #0, 12
   11bf8:	add	ip, ip, #192512	; 0x2f000
   11bfc:	ldr	pc, [ip, #1348]!	; 0x544

00011c00 <stpncpy@plt>:
   11c00:	add	ip, pc, #0, 12
   11c04:	add	ip, ip, #192512	; 0x2f000
   11c08:	ldr	pc, [ip, #1340]!	; 0x53c

00011c0c <fileno@plt>:
   11c0c:	add	ip, pc, #0, 12
   11c10:	add	ip, ip, #192512	; 0x2f000
   11c14:	ldr	pc, [ip, #1332]!	; 0x534

00011c18 <__fprintf_chk@plt>:
   11c18:	add	ip, pc, #0, 12
   11c1c:	add	ip, ip, #192512	; 0x2f000
   11c20:	ldr	pc, [ip, #1324]!	; 0x52c

00011c24 <fclose@plt>:
   11c24:	add	ip, pc, #0, 12
   11c28:	add	ip, ip, #192512	; 0x2f000
   11c2c:	ldr	pc, [ip, #1316]!	; 0x524

00011c30 <fseeko64@plt>:
   11c30:	add	ip, pc, #0, 12
   11c34:	add	ip, ip, #192512	; 0x2f000
   11c38:	ldr	pc, [ip, #1308]!	; 0x51c

00011c3c <statx@plt>:
   11c3c:	add	ip, pc, #0, 12
   11c40:	add	ip, ip, #192512	; 0x2f000
   11c44:	ldr	pc, [ip, #1300]!	; 0x514

00011c48 <__overflow@plt>:
   11c48:	add	ip, pc, #0, 12
   11c4c:	add	ip, ip, #192512	; 0x2f000
   11c50:	ldr	pc, [ip, #1292]!	; 0x50c

00011c54 <setlocale@plt>:
   11c54:	add	ip, pc, #0, 12
   11c58:	add	ip, ip, #192512	; 0x2f000
   11c5c:	ldr	pc, [ip, #1284]!	; 0x504

00011c60 <sigemptyset@plt>:
   11c60:	add	ip, pc, #0, 12
   11c64:	add	ip, ip, #192512	; 0x2f000
   11c68:	ldr	pc, [ip, #1276]!	; 0x4fc

00011c6c <wcswidth@plt>:
   11c6c:	add	ip, pc, #0, 12
   11c70:	add	ip, ip, #192512	; 0x2f000
   11c74:	ldr	pc, [ip, #1268]!	; 0x4f4

00011c78 <strrchr@plt>:
   11c78:	add	ip, pc, #0, 12
   11c7c:	add	ip, ip, #192512	; 0x2f000
   11c80:	ldr	pc, [ip, #1260]!	; 0x4ec

00011c84 <cap_get_file@plt>:
   11c84:	add	ip, pc, #0, 12
   11c88:	add	ip, ip, #192512	; 0x2f000
   11c8c:	ldr	pc, [ip, #1252]!	; 0x4e4

00011c90 <nl_langinfo@plt>:
   11c90:	add	ip, pc, #0, 12
   11c94:	add	ip, ip, #192512	; 0x2f000
   11c98:	ldr	pc, [ip, #1244]!	; 0x4dc

00011c9c <localeconv@plt>:
   11c9c:	add	ip, pc, #0, 12
   11ca0:	add	ip, ip, #192512	; 0x2f000
   11ca4:	ldr	pc, [ip, #1236]!	; 0x4d4

00011ca8 <mbstowcs@plt>:
   11ca8:	add	ip, pc, #0, 12
   11cac:	add	ip, ip, #192512	; 0x2f000
   11cb0:	ldr	pc, [ip, #1228]!	; 0x4cc

00011cb4 <readdir64@plt>:
   11cb4:	add	ip, pc, #0, 12
   11cb8:	add	ip, ip, #192512	; 0x2f000
   11cbc:	ldr	pc, [ip, #1220]!	; 0x4c4

00011cc0 <timegm@plt>:
   11cc0:	add	ip, pc, #0, 12
   11cc4:	add	ip, ip, #192512	; 0x2f000
   11cc8:	ldr	pc, [ip, #1212]!	; 0x4bc

00011ccc <cap_free@plt>:
   11ccc:	add	ip, pc, #0, 12
   11cd0:	add	ip, ip, #192512	; 0x2f000
   11cd4:	ldr	pc, [ip, #1204]!	; 0x4b4

00011cd8 <dirfd@plt>:
   11cd8:	add	ip, pc, #0, 12
   11cdc:	add	ip, ip, #192512	; 0x2f000
   11ce0:	ldr	pc, [ip, #1196]!	; 0x4ac

00011ce4 <freecon@plt>:
   11ce4:	add	ip, pc, #0, 12
   11ce8:	add	ip, ip, #192512	; 0x2f000
   11cec:	ldr	pc, [ip, #1188]!	; 0x4a4

00011cf0 <bindtextdomain@plt>:
   11cf0:	add	ip, pc, #0, 12
   11cf4:	add	ip, ip, #192512	; 0x2f000
   11cf8:	ldr	pc, [ip, #1180]!	; 0x49c

00011cfc <__xstat64@plt>:
   11cfc:	add	ip, pc, #0, 12
   11d00:	add	ip, ip, #192512	; 0x2f000
   11d04:	ldr	pc, [ip, #1172]!	; 0x494

00011d08 <isatty@plt>:
   11d08:	add	ip, pc, #0, 12
   11d0c:	add	ip, ip, #192512	; 0x2f000
   11d10:	ldr	pc, [ip, #1164]!	; 0x48c

00011d14 <unsetenv@plt>:
   11d14:	add	ip, pc, #0, 12
   11d18:	add	ip, ip, #192512	; 0x2f000
   11d1c:	ldr	pc, [ip, #1156]!	; 0x484

00011d20 <strncmp@plt>:
   11d20:	add	ip, pc, #0, 12
   11d24:	add	ip, ip, #192512	; 0x2f000
   11d28:	ldr	pc, [ip, #1148]!	; 0x47c

00011d2c <abort@plt>:
   11d2c:	add	ip, pc, #0, 12
   11d30:	add	ip, ip, #192512	; 0x2f000
   11d34:	ldr	pc, [ip, #1140]!	; 0x474

00011d38 <closedir@plt>:
   11d38:	add	ip, pc, #0, 12
   11d3c:	add	ip, ip, #192512	; 0x2f000
   11d40:	ldr	pc, [ip, #1132]!	; 0x46c

00011d44 <getgrgid@plt>:
   11d44:	add	ip, pc, #0, 12
   11d48:	add	ip, ip, #192512	; 0x2f000
   11d4c:	ldr	pc, [ip, #1124]!	; 0x464

00011d50 <getgrnam@plt>:
   11d50:	add	ip, pc, #0, 12
   11d54:	add	ip, ip, #192512	; 0x2f000
   11d58:	ldr	pc, [ip, #1116]!	; 0x45c

00011d5c <__snprintf_chk@plt>:
   11d5c:	add	ip, pc, #0, 12
   11d60:	add	ip, ip, #192512	; 0x2f000
   11d64:	ldr	pc, [ip, #1108]!	; 0x454

00011d68 <strspn@plt>:
   11d68:	add	ip, pc, #0, 12
   11d6c:	add	ip, ip, #192512	; 0x2f000
   11d70:	ldr	pc, [ip, #1100]!	; 0x44c

00011d74 <__assert_fail@plt>:
   11d74:	add	ip, pc, #0, 12
   11d78:	add	ip, ip, #192512	; 0x2f000
   11d7c:	ldr	pc, [ip, #1092]!	; 0x444

Disassembly of section .text:

00011d80 <_obstack_begin@@Base-0x12470>:
   11d80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d84:	mov	r7, r0
   11d88:	sub	sp, sp, #92	; 0x5c
   11d8c:	ldr	r0, [r1]
   11d90:	mov	r5, r1
   11d94:	bl	245e0 <_obstack_memory_used@@Base+0x34>
   11d98:	ldr	r1, [pc, #3540]	; 12b74 <__assert_fail@plt+0xe00>
   11d9c:	mov	r0, #6
   11da0:	bl	11c54 <setlocale@plt>
   11da4:	ldr	r1, [pc, #3244]	; 12a58 <__assert_fail@plt+0xce4>
   11da8:	ldr	r0, [pc, #3244]	; 12a5c <__assert_fail@plt+0xce8>
   11dac:	bl	11cf0 <bindtextdomain@plt>
   11db0:	ldr	r0, [pc, #3236]	; 12a5c <__assert_fail@plt+0xce8>
   11db4:	bl	119c0 <textdomain@plt>
   11db8:	ldr	r3, [pc, #3232]	; 12a60 <__assert_fail@plt+0xcec>
   11dbc:	ldr	r4, [pc, #3232]	; 12a64 <__assert_fail@plt+0xcf0>
   11dc0:	mov	r2, #2
   11dc4:	ldr	r0, [pc, #3228]	; 12a68 <__assert_fail@plt+0xcf4>
   11dc8:	str	r2, [r3]
   11dcc:	bl	2c064 <_obstack_memory_used@@Base+0x7ab8>
   11dd0:	add	r2, r4, #3680	; 0xe60
   11dd4:	add	r2, r2, #8
   11dd8:	ldr	sl, [pc, #3212]	; 12a6c <__assert_fail@plt+0xcf8>
   11ddc:	str	r2, [sp, #56]	; 0x38
   11de0:	ldr	r8, [pc, #3208]	; 12a70 <__assert_fail@plt+0xcfc>
   11de4:	mov	r2, #0
   11de8:	ldr	r6, [pc, #3204]	; 12a74 <__assert_fail@plt+0xd00>
   11dec:	mvn	r3, #0
   11df0:	str	r2, [sp, #52]	; 0x34
   11df4:	str	r2, [sp, #44]	; 0x2c
   11df8:	add	fp, sp, #72	; 0x48
   11dfc:	mov	r2, #-2147483648	; 0x80000000
   11e00:	mov	r9, r3
   11e04:	str	r3, [sp, #48]	; 0x30
   11e08:	str	r3, [sp, #32]
   11e0c:	str	r3, [sp, #36]	; 0x24
   11e10:	str	r3, [sp, #40]	; 0x28
   11e14:	str	r3, [sp, #28]
   11e18:	str	r2, [r4, #4040]	; 0xfc8
   11e1c:	str	r3, [r4, #4044]	; 0xfcc
   11e20:	mov	r2, #0
   11e24:	mov	r3, #1
   11e28:	str	r2, [r4, #3680]	; 0xe60
   11e2c:	str	r2, [sl, #-4072]	; 0xfffff018
   11e30:	strb	r3, [sl, #-3991]	; 0xfffff069
   11e34:	mvn	ip, #0
   11e38:	str	fp, [sp]
   11e3c:	sub	r3, r8, #12
   11e40:	mov	r2, r6
   11e44:	mov	r1, r5
   11e48:	mov	r0, r7
   11e4c:	str	ip, [sp, #72]	; 0x48
   11e50:	bl	11b4c <getopt_long@plt>
   11e54:	cmn	r0, #1
   11e58:	beq	12bf8 <__assert_fail@plt+0xe84>
   11e5c:	add	r0, r0, #3
   11e60:	cmp	r0, #276	; 0x114
   11e64:	ldrls	pc, [pc, r0, lsl #2]
   11e68:	b	12a50 <__assert_fail@plt+0xcdc>
   11e6c:	andeq	r2, r1, r0, ror r5
   11e70:	andeq	r2, r1, r8, ror #10
   11e74:	andeq	r2, r1, r0, asr sl
   11e78:	andeq	r2, r1, r0, asr sl
   11e7c:	andeq	r2, r1, r0, asr sl
   11e80:	andeq	r2, r1, r0, asr sl
   11e84:	andeq	r2, r1, r0, asr sl
   11e88:	andeq	r2, r1, r0, asr sl
   11e8c:	andeq	r2, r1, r0, asr sl
   11e90:	andeq	r2, r1, r0, asr sl
   11e94:	andeq	r2, r1, r0, asr sl
   11e98:	andeq	r2, r1, r0, asr sl
   11e9c:	andeq	r2, r1, r0, asr sl
   11ea0:	andeq	r2, r1, r0, asr sl
   11ea4:	andeq	r2, r1, r0, asr sl
   11ea8:	andeq	r2, r1, r0, asr sl
   11eac:	andeq	r2, r1, r0, asr sl
   11eb0:	andeq	r2, r1, r0, asr sl
   11eb4:	andeq	r2, r1, r0, asr sl
   11eb8:	andeq	r2, r1, r0, asr sl
   11ebc:	andeq	r2, r1, r0, asr sl
   11ec0:	andeq	r2, r1, r0, asr sl
   11ec4:	andeq	r2, r1, r0, asr sl
   11ec8:	andeq	r2, r1, r0, asr sl
   11ecc:	andeq	r2, r1, r0, asr sl
   11ed0:	andeq	r2, r1, r0, asr sl
   11ed4:	andeq	r2, r1, r0, asr sl
   11ed8:	andeq	r2, r1, r0, asr sl
   11edc:	andeq	r2, r1, r0, asr sl
   11ee0:	andeq	r2, r1, r0, asr sl
   11ee4:	andeq	r2, r1, r0, asr sl
   11ee8:	andeq	r2, r1, r0, asr sl
   11eec:	andeq	r2, r1, r0, asr sl
   11ef0:	andeq	r2, r1, r0, asr sl
   11ef4:	andeq	r2, r1, r0, asr sl
   11ef8:	andeq	r2, r1, r0, asr sl
   11efc:	andeq	r2, r1, r0, asr sl
   11f00:	andeq	r2, r1, r0, asr sl
   11f04:	andeq	r2, r1, r0, asr sl
   11f08:	andeq	r2, r1, r0, asr sl
   11f0c:	andeq	r2, r1, r0, asr sl
   11f10:	andeq	r2, r1, r0, asr sl
   11f14:	andeq	r2, r1, r0, asr sl
   11f18:	andeq	r2, r1, r0, asr sl
   11f1c:	andeq	r2, r1, r0, asr sl
   11f20:	andeq	r2, r1, r0, asr sl
   11f24:	andeq	r2, r1, r0, asr sl
   11f28:	andeq	r2, r1, r0, asr sl
   11f2c:	andeq	r2, r1, r0, asr sl
   11f30:	andeq	r2, r1, r0, asr sl
   11f34:	andeq	r2, r1, r0, asr sl
   11f38:	andeq	r2, r1, r0, asr sl
   11f3c:	andeq	r2, r1, r4, asr r5
   11f40:	andeq	r2, r1, r0, asr sl
   11f44:	andeq	r2, r1, r0, asr sl
   11f48:	andeq	r2, r1, r0, asr sl
   11f4c:	andeq	r2, r1, r0, asr sl
   11f50:	andeq	r2, r1, r0, asr sl
   11f54:	andeq	r2, r1, r0, asr sl
   11f58:	andeq	r2, r1, r0, asr sl
   11f5c:	andeq	r2, r1, r0, asr sl
   11f60:	andeq	r2, r1, r0, asr sl
   11f64:	andeq	r2, r1, r0, asr sl
   11f68:	andeq	r2, r1, r0, asr sl
   11f6c:	andeq	r2, r1, r0, asr sl
   11f70:	andeq	r2, r1, r0, asr sl
   11f74:	andeq	r2, r1, r0, asr sl
   11f78:	andeq	r2, r1, r0, asr sl
   11f7c:	andeq	r2, r1, r8, asr #10
   11f80:	andeq	r2, r1, ip, lsl #10
   11f84:	andeq	r2, r1, r0, lsl #10
   11f88:	strdeq	r2, [r1], -r4
   11f8c:	andeq	r2, r1, r0, asr sl
   11f90:	andeq	r2, r1, r8, lsl #9
   11f94:	andeq	r2, r1, r8, ror r4
   11f98:	andeq	r2, r1, ip, ror #8
   11f9c:	andeq	r2, r1, r4, asr #8
   11fa0:	andeq	r2, r1, r0, asr sl
   11fa4:	andeq	r2, r1, r0, asr sl
   11fa8:	andeq	r2, r1, r8, lsr r4
   11fac:	andeq	r2, r1, r0, asr sl
   11fb0:	andeq	r2, r1, ip, lsr #8
   11fb4:	andeq	r2, r1, r0, asr sl
   11fb8:	andeq	r2, r1, r0, asr sl
   11fbc:	andeq	r2, r1, r0, lsr #8
   11fc0:	andeq	r2, r1, r4, lsl r4
   11fc4:	andeq	r2, r1, r8, lsl #8
   11fc8:			; <UNDEFINED> instruction: 0x000123b0
   11fcc:	andeq	r2, r1, r4, lsr #7
   11fd0:	andeq	r2, r1, r0, asr sl
   11fd4:	andeq	r2, r1, r0, asr sl
   11fd8:	muleq	r1, r8, r3
   11fdc:	andeq	r2, r1, r0, asr sl
   11fe0:	andeq	r2, r1, ip, lsl #7
   11fe4:	andeq	r2, r1, r0, asr sl
   11fe8:	andeq	r2, r1, r0, asr sl
   11fec:	andeq	r2, r1, r0, asr sl
   11ff0:	andeq	r2, r1, r0, asr sl
   11ff4:	andeq	r2, r1, r0, asr sl
   11ff8:	andeq	r2, r1, r0, asr sl
   11ffc:	andeq	r2, r1, r0, lsl #7
   12000:	andeq	r2, r1, r4, ror r3
   12004:	andeq	r2, r1, r8, ror #6
   12008:	andeq	r2, r1, ip, asr r3
   1200c:	andeq	r2, r1, r0, asr sl
   12010:	andeq	r2, r1, r8, lsr #6
   12014:	andeq	r2, r1, r4, lsl r3
   12018:	andeq	r2, r1, ip, ror #5
   1201c:	andeq	r2, r1, r0, ror #5
   12020:	andeq	r2, r1, r0, asr sl
   12024:	ldrdeq	r2, [r1], -r4
   12028:	andeq	r2, r1, r8, asr #5
   1202c:	ldrdeq	r2, [r1], -r8
   12030:	andeq	r2, r1, r0, asr #5
   12034:	andeq	r2, r1, r4, asr #19
   12038:			; <UNDEFINED> instruction: 0x000129b8
   1203c:	andeq	r2, r1, ip, lsr #19
   12040:	andeq	r2, r1, r0, lsr #19
   12044:	muleq	r1, r4, r9
   12048:	andeq	r2, r1, r8, lsl #19
   1204c:	andeq	r2, r1, ip, ror r9
   12050:	andeq	r2, r1, r0, ror r9
   12054:	andeq	r2, r1, r4, lsr #18
   12058:	andeq	r2, r1, r8, lsl r9
   1205c:	andeq	r2, r1, r0, asr sl
   12060:	andeq	r2, r1, r0, asr sl
   12064:	andeq	r2, r1, r0, asr sl
   12068:	andeq	r2, r1, r0, asr sl
   1206c:	andeq	r2, r1, r0, asr sl
   12070:	andeq	r2, r1, r0, asr sl
   12074:	andeq	r2, r1, r0, asr sl
   12078:	andeq	r2, r1, r0, asr sl
   1207c:	andeq	r2, r1, r0, asr sl
   12080:	andeq	r2, r1, r0, asr sl
   12084:	andeq	r2, r1, r0, asr sl
   12088:	andeq	r2, r1, r0, asr sl
   1208c:	andeq	r2, r1, r0, asr sl
   12090:	andeq	r2, r1, r0, asr sl
   12094:	andeq	r2, r1, r0, asr sl
   12098:	andeq	r2, r1, r0, asr sl
   1209c:	andeq	r2, r1, r0, asr sl
   120a0:	andeq	r2, r1, r0, asr sl
   120a4:	andeq	r2, r1, r0, asr sl
   120a8:	andeq	r2, r1, r0, asr sl
   120ac:	andeq	r2, r1, r0, asr sl
   120b0:	andeq	r2, r1, r0, asr sl
   120b4:	andeq	r2, r1, r0, asr sl
   120b8:	andeq	r2, r1, r0, asr sl
   120bc:	andeq	r2, r1, r0, asr sl
   120c0:	andeq	r2, r1, r0, asr sl
   120c4:	andeq	r2, r1, r0, asr sl
   120c8:	andeq	r2, r1, r0, asr sl
   120cc:	andeq	r2, r1, r0, asr sl
   120d0:	andeq	r2, r1, r0, asr sl
   120d4:	andeq	r2, r1, r0, asr sl
   120d8:	andeq	r2, r1, r0, asr sl
   120dc:	andeq	r2, r1, r0, asr sl
   120e0:	andeq	r2, r1, r0, asr sl
   120e4:	andeq	r2, r1, r0, asr sl
   120e8:	andeq	r2, r1, r0, asr sl
   120ec:	andeq	r2, r1, r0, asr sl
   120f0:	andeq	r2, r1, r0, asr sl
   120f4:	andeq	r2, r1, r0, asr sl
   120f8:	andeq	r2, r1, r0, asr sl
   120fc:	andeq	r2, r1, r0, asr sl
   12100:	andeq	r2, r1, r0, asr sl
   12104:	andeq	r2, r1, r0, asr sl
   12108:	andeq	r2, r1, r0, asr sl
   1210c:	andeq	r2, r1, r0, asr sl
   12110:	andeq	r2, r1, r0, asr sl
   12114:	andeq	r2, r1, r0, asr sl
   12118:	andeq	r2, r1, r0, asr sl
   1211c:	andeq	r2, r1, r0, asr sl
   12120:	andeq	r2, r1, r0, asr sl
   12124:	andeq	r2, r1, r0, asr sl
   12128:	andeq	r2, r1, r0, asr sl
   1212c:	andeq	r2, r1, r0, asr sl
   12130:	andeq	r2, r1, r0, asr sl
   12134:	andeq	r2, r1, r0, asr sl
   12138:	andeq	r2, r1, r0, asr sl
   1213c:	andeq	r2, r1, r0, asr sl
   12140:	andeq	r2, r1, r0, asr sl
   12144:	andeq	r2, r1, r0, asr sl
   12148:	andeq	r2, r1, r0, asr sl
   1214c:	andeq	r2, r1, r0, asr sl
   12150:	andeq	r2, r1, r0, asr sl
   12154:	andeq	r2, r1, r0, asr sl
   12158:	andeq	r2, r1, r0, asr sl
   1215c:	andeq	r2, r1, r0, asr sl
   12160:	andeq	r2, r1, r0, asr sl
   12164:	andeq	r2, r1, r0, asr sl
   12168:	andeq	r2, r1, r0, asr sl
   1216c:	andeq	r2, r1, r0, asr sl
   12170:	andeq	r2, r1, r0, asr sl
   12174:	andeq	r2, r1, r0, asr sl
   12178:	andeq	r2, r1, r0, asr sl
   1217c:	andeq	r2, r1, r0, asr sl
   12180:	andeq	r2, r1, r0, asr sl
   12184:	andeq	r2, r1, r0, asr sl
   12188:	andeq	r2, r1, r0, asr sl
   1218c:	andeq	r2, r1, r0, asr sl
   12190:	andeq	r2, r1, r0, asr sl
   12194:	andeq	r2, r1, r0, asr sl
   12198:	andeq	r2, r1, r0, asr sl
   1219c:	andeq	r2, r1, r0, asr sl
   121a0:	andeq	r2, r1, r0, asr sl
   121a4:	andeq	r2, r1, r0, asr sl
   121a8:	andeq	r2, r1, r0, asr sl
   121ac:	andeq	r2, r1, r0, asr sl
   121b0:	andeq	r2, r1, r0, asr sl
   121b4:	andeq	r2, r1, r0, asr sl
   121b8:	andeq	r2, r1, r0, asr sl
   121bc:	andeq	r2, r1, r0, asr sl
   121c0:	andeq	r2, r1, r0, asr sl
   121c4:	andeq	r2, r1, r0, asr sl
   121c8:	andeq	r2, r1, r0, asr sl
   121cc:	andeq	r2, r1, r0, asr sl
   121d0:	andeq	r2, r1, r0, asr sl
   121d4:	andeq	r2, r1, r0, asr sl
   121d8:	andeq	r2, r1, r0, asr sl
   121dc:	andeq	r2, r1, r0, asr sl
   121e0:	andeq	r2, r1, r0, asr sl
   121e4:	andeq	r2, r1, r0, asr sl
   121e8:	andeq	r2, r1, r0, asr sl
   121ec:	andeq	r2, r1, r0, asr sl
   121f0:	andeq	r2, r1, r0, asr sl
   121f4:	andeq	r2, r1, r0, asr sl
   121f8:	andeq	r2, r1, r0, asr sl
   121fc:	andeq	r2, r1, r0, asr sl
   12200:	andeq	r2, r1, r0, asr sl
   12204:	andeq	r2, r1, r0, asr sl
   12208:	andeq	r2, r1, r0, asr sl
   1220c:	andeq	r2, r1, r0, asr sl
   12210:	andeq	r2, r1, r0, asr sl
   12214:	andeq	r2, r1, r0, asr sl
   12218:	andeq	r2, r1, r0, asr sl
   1221c:	andeq	r2, r1, r0, asr sl
   12220:	andeq	r2, r1, r0, asr sl
   12224:	andeq	r2, r1, r0, asr sl
   12228:	andeq	r2, r1, r0, asr sl
   1222c:	andeq	r2, r1, r0, asr sl
   12230:	andeq	r2, r1, r0, asr sl
   12234:	andeq	r2, r1, r0, asr sl
   12238:	andeq	r2, r1, r0, asr sl
   1223c:	andeq	r2, r1, r0, asr sl
   12240:	andeq	r2, r1, r0, asr sl
   12244:	andeq	r2, r1, r0, asr sl
   12248:	andeq	r2, r1, r0, asr sl
   1224c:	andeq	r2, r1, r0, asr sl
   12250:	andeq	r2, r1, r0, asr sl
   12254:	andeq	r2, r1, r0, asr sl
   12258:	andeq	r2, r1, r0, asr sl
   1225c:	andeq	r2, r1, r0, asr sl
   12260:	andeq	r2, r1, r0, asr sl
   12264:	andeq	r2, r1, r0, asr sl
   12268:	andeq	r2, r1, r0, asr sl
   1226c:	andeq	r2, r1, r0, asr sl
   12270:	andeq	r2, r1, r0, asr sl
   12274:	andeq	r2, r1, r0, asr sl
   12278:	andeq	r2, r1, ip, lsl #18
   1227c:	andeq	r2, r1, ip, asr #17
   12280:	andeq	r2, r1, r8, ror #16
   12284:	andeq	r2, r1, ip, asr r8
   12288:	andeq	r2, r1, r0, asr r8
   1228c:	andeq	r2, r1, r4, lsl #16
   12290:	strdeq	r2, [r1], -r0
   12294:	andeq	r2, r1, r4, ror #15
   12298:	andeq	r2, r1, r0, asr #15
   1229c:	andeq	r2, r1, ip, asr r7
   122a0:	andeq	r2, r1, r4, lsl r7
   122a4:	ldrdeq	r2, [r1], -r0
   122a8:	andeq	r2, r1, r4, asr #13
   122ac:	muleq	r1, ip, r6
   122b0:	andeq	r2, r1, r0, asr r6
   122b4:	andeq	r2, r1, r4, lsl #12
   122b8:	strdeq	r2, [r1], -r4
   122bc:	andeq	r2, r1, r4, asr #11
   122c0:	mov	r3, #1
   122c4:	strb	r3, [r4, #4008]	; 0xfa8
   122c8:	mov	r3, #0
   122cc:	str	r3, [sp, #28]
   122d0:	b	11e34 <__assert_fail@plt+0xc0>
   122d4:	mov	r3, #1
   122d8:	str	r3, [sp, #52]	; 0x34
   122dc:	b	11e34 <__assert_fail@plt+0xc0>
   122e0:	mov	r3, #1
   122e4:	strb	r3, [r4, #3240]	; 0xca8
   122e8:	b	11e34 <__assert_fail@plt+0xc0>
   122ec:	ldr	ip, [pc, #2044]	; 12af0 <__assert_fail@plt+0xd7c>
   122f0:	ldr	r1, [pc, #2260]	; 12bcc <__assert_fail@plt+0xe58>
   122f4:	mov	r2, #1
   122f8:	mov	r3, #0
   122fc:	mov	r0, #176	; 0xb0
   12300:	strd	r2, [ip]
   12304:	strd	r2, [r1, #216]	; 0xd8
   12308:	str	r0, [r4, #3688]	; 0xe68
   1230c:	str	r0, [r4, #4032]	; 0xfc0
   12310:	b	11e34 <__assert_fail@plt+0xc0>
   12314:	ldr	r1, [pc, #2224]	; 12bcc <__assert_fail@plt+0xe58>
   12318:	mov	r3, #0
   1231c:	str	r3, [sp, #28]
   12320:	strb	r3, [r1, #204]	; 0xcc
   12324:	b	11e34 <__assert_fail@plt+0xc0>
   12328:	ldr	r2, [sp, #28]
   1232c:	mov	r3, #2
   12330:	cmp	r2, #0
   12334:	mvneq	r2, #0
   12338:	str	r2, [sp, #28]
   1233c:	str	r3, [sl, #-3940]	; 0xfffff09c
   12340:	mov	r2, #0
   12344:	mov	r3, #6
   12348:	strb	r2, [r4, #3996]	; 0xf9c
   1234c:	strb	r2, [sl, #-4084]	; 0xfffff00c
   12350:	strb	r2, [r4, #3241]	; 0xca9
   12354:	str	r3, [sp, #32]
   12358:	b	11e34 <__assert_fail@plt+0xc0>
   1235c:	mov	r3, #1
   12360:	strb	r3, [sl, #-4040]	; 0xfffff038
   12364:	b	11e34 <__assert_fail@plt+0xc0>
   12368:	mov	r3, #1
   1236c:	str	r3, [r4, #3248]	; 0xcb0
   12370:	b	11e34 <__assert_fail@plt+0xc0>
   12374:	mov	r3, #7
   12378:	str	r3, [sp, #36]	; 0x24
   1237c:	b	11e34 <__assert_fail@plt+0xc0>
   12380:	mov	r3, #2
   12384:	str	r3, [sl, #-3940]	; 0xfffff09c
   12388:	b	11e34 <__assert_fail@plt+0xc0>
   1238c:	mov	r3, #1
   12390:	strb	r3, [r4, #3708]	; 0xe7c
   12394:	b	11e34 <__assert_fail@plt+0xc0>
   12398:	mov	r3, #1
   1239c:	str	r3, [sp, #32]
   123a0:	b	11e34 <__assert_fail@plt+0xc0>
   123a4:	mov	r3, #6
   123a8:	str	r3, [sp, #32]
   123ac:	b	11e34 <__assert_fail@plt+0xc0>
   123b0:	ldr	r3, [pc, #1728]	; 12a78 <__assert_fail@plt+0xd04>
   123b4:	mov	r2, #5
   123b8:	ldr	r1, [pc, #1724]	; 12a7c <__assert_fail@plt+0xd08>
   123bc:	ldr	r3, [r3]
   123c0:	mov	r0, #0
   123c4:	str	r3, [sp, #48]	; 0x30
   123c8:	bl	11984 <dcgettext@plt>
   123cc:	ldr	r3, [pc, #1952]	; 12b74 <__assert_fail@plt+0xe00>
   123d0:	mvn	r2, #-2147483648	; 0x80000000
   123d4:	str	r3, [sp, #8]
   123d8:	mov	r3, #0
   123dc:	mov	r1, #2
   123e0:	strd	r2, [sp]
   123e4:	str	r1, [sp, #16]
   123e8:	mov	r2, #0
   123ec:	mov	r3, #0
   123f0:	mov	r1, #0
   123f4:	str	r0, [sp, #12]
   123f8:	ldr	r0, [sp, #48]	; 0x30
   123fc:	bl	29fe0 <_obstack_memory_used@@Base+0x5a34>
   12400:	str	r0, [sp, #48]	; 0x30
   12404:	b	11e34 <__assert_fail@plt+0xc0>
   12408:	mov	r3, #3
   1240c:	str	r3, [sp, #32]
   12410:	b	11e34 <__assert_fail@plt+0xc0>
   12414:	mov	r3, #1
   12418:	strb	r3, [sl, #-3992]	; 0xfffff068
   1241c:	b	11e34 <__assert_fail@plt+0xc0>
   12420:	mov	r3, #5
   12424:	str	r3, [sp, #36]	; 0x24
   12428:	b	11e34 <__assert_fail@plt+0xc0>
   1242c:	mov	r3, #0
   12430:	str	r3, [sp, #36]	; 0x24
   12434:	b	11e34 <__assert_fail@plt+0xc0>
   12438:	mov	r3, #4
   1243c:	str	r3, [sl, #-4080]	; 0xfffff010
   12440:	b	11e34 <__assert_fail@plt+0xc0>
   12444:	ldr	r3, [pc, #1580]	; 12a78 <__assert_fail@plt+0xd04>
   12448:	mov	r0, #8
   1244c:	ldr	r2, [r3]
   12450:	str	r2, [sp, #60]	; 0x3c
   12454:	bl	29958 <_obstack_memory_used@@Base+0x53ac>
   12458:	ldr	r3, [sl, #-3936]	; 0xfffff0a0
   1245c:	ldr	r2, [sp, #60]	; 0x3c
   12460:	stm	r0, {r2, r3}
   12464:	str	r0, [sl, #-3936]	; 0xfffff0a0
   12468:	b	11e34 <__assert_fail@plt+0xc0>
   1246c:	mov	r3, #2
   12470:	str	r3, [sl, #-4080]	; 0xfffff010
   12474:	b	11e34 <__assert_fail@plt+0xc0>
   12478:	ldr	r1, [pc, #1868]	; 12bcc <__assert_fail@plt+0xe58>
   1247c:	mov	r3, #0
   12480:	strb	r3, [r1, #205]	; 0xcd
   12484:	b	11e34 <__assert_fail@plt+0xc0>
   12488:	ldr	r3, [pc, #1512]	; 12a78 <__assert_fail@plt+0xd04>
   1248c:	ldr	r1, [r3]
   12490:	cmp	r1, #0
   12494:	beq	124e8 <__assert_fail@plt+0x774>
   12498:	ldr	r0, [pc, #1504]	; 12a80 <__assert_fail@plt+0xd0c>
   1249c:	mov	r3, #4
   124a0:	mov	r2, #1
   124a4:	ldr	r0, [r0]
   124a8:	str	r3, [sp]
   124ac:	ldr	r3, [pc, #1488]	; 12a84 <__assert_fail@plt+0xd10>
   124b0:	stmib	sp, {r0, r2}
   124b4:	add	r2, r3, #36	; 0x24
   124b8:	ldr	r0, [pc, #1480]	; 12a88 <__assert_fail@plt+0xd14>
   124bc:	bl	1d118 <__assert_fail@plt+0xb3a4>
   124c0:	ldr	r3, [pc, #1476]	; 12a8c <__assert_fail@plt+0xd18>
   124c4:	add	r3, r3, r0, lsl #2
   124c8:	ldr	r3, [r3, #-2620]	; 0xfffff5c4
   124cc:	cmp	r3, #1
   124d0:	beq	124e8 <__assert_fail@plt+0x774>
   124d4:	cmp	r3, #2
   124d8:	bne	11e34 <__assert_fail@plt+0xc0>
   124dc:	bl	13ee4 <__assert_fail@plt+0x2170>
   124e0:	cmp	r0, #0
   124e4:	beq	11e34 <__assert_fail@plt+0xc0>
   124e8:	mov	r3, #3
   124ec:	str	r3, [r4, #3096]	; 0xc18
   124f0:	b	11e34 <__assert_fail@plt+0xc0>
   124f4:	mov	r3, #1
   124f8:	strb	r3, [r4, #3988]	; 0xf94
   124fc:	b	11e34 <__assert_fail@plt+0xc0>
   12500:	mov	r3, #2
   12504:	str	r3, [sp, #28]
   12508:	b	11e34 <__assert_fail@plt+0xc0>
   1250c:	mov	r0, #8
   12510:	bl	29958 <_obstack_memory_used@@Base+0x53ac>
   12514:	ldr	r2, [sl, #-3936]	; 0xfffff0a0
   12518:	ldr	r1, [pc, #1392]	; 12a90 <__assert_fail@plt+0xd1c>
   1251c:	mov	r3, r0
   12520:	str	r1, [r0]
   12524:	str	r2, [r3, #4]
   12528:	mov	r0, #8
   1252c:	str	r3, [sl, #-3936]	; 0xfffff0a0
   12530:	bl	29958 <_obstack_memory_used@@Base+0x53ac>
   12534:	ldr	r3, [sl, #-3936]	; 0xfffff0a0
   12538:	ldr	r2, [pc, #1364]	; 12a94 <__assert_fail@plt+0xd20>
   1253c:	stm	r0, {r2, r3}
   12540:	str	r0, [sl, #-3936]	; 0xfffff0a0
   12544:	b	11e34 <__assert_fail@plt+0xc0>
   12548:	mov	r3, #1
   1254c:	str	r3, [sl, #-3940]	; 0xfffff09c
   12550:	b	11e34 <__assert_fail@plt+0xc0>
   12554:	ldr	r3, [sp, #28]
   12558:	adds	r3, r3, #0
   1255c:	movne	r3, #1
   12560:	str	r3, [sp, #28]
   12564:	b	11e34 <__assert_fail@plt+0xc0>
   12568:	mov	r0, #0
   1256c:	bl	1c6c4 <__assert_fail@plt+0xa950>
   12570:	ldr	r3, [pc, #1584]	; 12ba8 <__assert_fail@plt+0xe34>
   12574:	ldr	r2, [pc, #1488]	; 12b4c <__assert_fail@plt+0xdd8>
   12578:	ldr	r3, [r3]
   1257c:	ldr	r0, [r2]
   12580:	cmp	r3, #1
   12584:	beq	130fc <__assert_fail@plt+0x1388>
   12588:	ldr	r2, [pc, #1288]	; 12a98 <__assert_fail@plt+0xd24>
   1258c:	cmp	r3, #2
   12590:	ldr	r1, [pc, #1284]	; 12a9c <__assert_fail@plt+0xd28>
   12594:	moveq	r1, r2
   12598:	ldr	ip, [pc, #1280]	; 12aa0 <__assert_fail@plt+0xd2c>
   1259c:	ldr	r2, [pc, #1280]	; 12aa4 <__assert_fail@plt+0xd30>
   125a0:	ldr	r3, [pc, #1280]	; 12aa8 <__assert_fail@plt+0xd34>
   125a4:	mov	r4, #0
   125a8:	ldr	r3, [r3]
   125ac:	stm	sp, {r2, ip}
   125b0:	str	r4, [sp, #8]
   125b4:	ldr	r2, [pc, #1264]	; 12aac <__assert_fail@plt+0xd38>
   125b8:	bl	29770 <_obstack_memory_used@@Base+0x51c4>
   125bc:	mov	r0, r4
   125c0:	bl	11b70 <exit@plt>
   125c4:	ldr	r3, [sp, #28]
   125c8:	ldr	r1, [pc, #1532]	; 12bcc <__assert_fail@plt+0xe58>
   125cc:	adds	r3, r3, #0
   125d0:	movne	r3, #1
   125d4:	str	r3, [sp, #28]
   125d8:	mov	r3, #0
   125dc:	strb	r3, [r4, #3996]	; 0xf9c
   125e0:	strb	r3, [r1, #210]	; 0xd2
   125e4:	mov	r3, #0
   125e8:	str	r3, [sp, #36]	; 0x24
   125ec:	str	r3, [sp, #40]	; 0x28
   125f0:	b	11e34 <__assert_fail@plt+0xc0>
   125f4:	ldr	r3, [pc, #1148]	; 12a78 <__assert_fail@plt+0xd04>
   125f8:	ldr	r3, [r3]
   125fc:	str	r3, [sp, #44]	; 0x2c
   12600:	b	11e34 <__assert_fail@plt+0xc0>
   12604:	ldr	r3, [pc, #1140]	; 12a80 <__assert_fail@plt+0xd0c>
   12608:	ldr	r2, [pc, #1128]	; 12a78 <__assert_fail@plt+0xd04>
   1260c:	mov	r0, #1
   12610:	ldr	r1, [r3]
   12614:	mov	r3, #4
   12618:	str	r1, [sp, #4]
   1261c:	ldr	r1, [r2]
   12620:	ldr	r2, [pc, #1124]	; 12a8c <__assert_fail@plt+0xd18>
   12624:	str	r0, [sp, #8]
   12628:	sub	r2, r2, #2464	; 0x9a0
   1262c:	str	r3, [sp]
   12630:	ldr	r0, [pc, #1144]	; 12ab0 <__assert_fail@plt+0xd3c>
   12634:	sub	r3, r2, #28
   12638:	bl	1d118 <__assert_fail@plt+0xb3a4>
   1263c:	ldr	r3, [pc, #1096]	; 12a8c <__assert_fail@plt+0xd18>
   12640:	add	r0, r3, r0, lsl #2
   12644:	ldr	r3, [r0, #-2492]	; 0xfffff644
   12648:	str	r3, [r4, #3248]	; 0xcb0
   1264c:	b	11e34 <__assert_fail@plt+0xc0>
   12650:	ldr	r2, [pc, #1064]	; 12a80 <__assert_fail@plt+0xd0c>
   12654:	ldr	r3, [pc, #1052]	; 12a78 <__assert_fail@plt+0xd04>
   12658:	mov	r0, #1
   1265c:	ldr	r1, [r2]
   12660:	mov	r2, #4
   12664:	str	r1, [sp, #4]
   12668:	ldr	r1, [r3]
   1266c:	ldr	r3, [pc, #1048]	; 12a8c <__assert_fail@plt+0xd18>
   12670:	str	r0, [sp, #8]
   12674:	sub	r3, r3, #2544	; 0x9f0
   12678:	str	r2, [sp]
   1267c:	ldr	r0, [pc, #1072]	; 12ab4 <__assert_fail@plt+0xd40>
   12680:	add	r2, r3, #24
   12684:	bl	1d118 <__assert_fail@plt+0xb3a4>
   12688:	ldr	r3, [pc, #1020]	; 12a8c <__assert_fail@plt+0xd18>
   1268c:	add	r0, r3, r0, lsl #2
   12690:	ldr	r3, [r0, #-2544]	; 0xfffff610
   12694:	str	r3, [sp, #32]
   12698:	b	11e34 <__assert_fail@plt+0xc0>
   1269c:	ldr	ip, [pc, #1100]	; 12af0 <__assert_fail@plt+0xd7c>
   126a0:	ldr	r1, [pc, #1316]	; 12bcc <__assert_fail@plt+0xe58>
   126a4:	mov	r2, #1
   126a8:	mov	r3, #0
   126ac:	mov	r0, #144	; 0x90
   126b0:	strd	r2, [ip]
   126b4:	strd	r2, [r1, #216]	; 0xd8
   126b8:	str	r0, [r4, #3688]	; 0xe68
   126bc:	str	r0, [r4, #4032]	; 0xfc0
   126c0:	b	11e34 <__assert_fail@plt+0xc0>
   126c4:	mov	r3, #0
   126c8:	str	r3, [sp, #40]	; 0x28
   126cc:	b	11e34 <__assert_fail@plt+0xc0>
   126d0:	ldr	r2, [pc, #936]	; 12a80 <__assert_fail@plt+0xd0c>
   126d4:	ldr	r3, [pc, #924]	; 12a78 <__assert_fail@plt+0xd04>
   126d8:	mov	r0, #1
   126dc:	ldr	r1, [r2]
   126e0:	mov	r2, #4
   126e4:	str	r1, [sp, #4]
   126e8:	ldr	r1, [r3]
   126ec:	ldr	r3, [pc, #1196]	; 12ba0 <__assert_fail@plt+0xe2c>
   126f0:	str	r0, [sp, #8]
   126f4:	str	r2, [sp]
   126f8:	ldr	r0, [pc, #952]	; 12ab8 <__assert_fail@plt+0xd44>
   126fc:	ldr	r2, [pc, #1184]	; 12ba4 <__assert_fail@plt+0xe30>
   12700:	bl	1d118 <__assert_fail@plt+0xb3a4>
   12704:	ldr	r3, [pc, #1172]	; 12ba0 <__assert_fail@plt+0xe2c>
   12708:	ldr	r3, [r3, r0, lsl #2]
   1270c:	str	r3, [sp, #36]	; 0x24
   12710:	b	11e34 <__assert_fail@plt+0xc0>
   12714:	ldr	r3, [pc, #868]	; 12a80 <__assert_fail@plt+0xd0c>
   12718:	ldr	r1, [pc, #856]	; 12a78 <__assert_fail@plt+0xd04>
   1271c:	mov	r2, #1
   12720:	ldr	r0, [r3]
   12724:	mov	r3, #4
   12728:	str	r0, [sp, #4]
   1272c:	ldr	r1, [r1]
   12730:	str	r3, [sp]
   12734:	ldr	r3, [pc, #896]	; 12abc <__assert_fail@plt+0xd48>
   12738:	str	r2, [sp, #8]
   1273c:	ldr	r0, [pc, #892]	; 12ac0 <__assert_fail@plt+0xd4c>
   12740:	add	r2, r3, #16
   12744:	bl	1d118 <__assert_fail@plt+0xb3a4>
   12748:	ldr	r3, [pc, #828]	; 12a8c <__assert_fail@plt+0xd18>
   1274c:	add	r0, r3, r0, lsl #2
   12750:	ldr	r3, [r0, #-2372]	; 0xfffff6bc
   12754:	str	r3, [r4, #3096]	; 0xc18
   12758:	b	11e34 <__assert_fail@plt+0xc0>
   1275c:	ldr	r3, [pc, #788]	; 12a78 <__assert_fail@plt+0xd04>
   12760:	ldr	r1, [r3]
   12764:	cmp	r1, #0
   12768:	beq	130ec <__assert_fail@plt+0x1378>
   1276c:	ldr	r0, [pc, #780]	; 12a80 <__assert_fail@plt+0xd0c>
   12770:	mov	r3, #4
   12774:	mov	r2, #1
   12778:	ldr	r0, [r0]
   1277c:	str	r3, [sp]
   12780:	ldr	r3, [pc, #764]	; 12a84 <__assert_fail@plt+0xd10>
   12784:	stmib	sp, {r0, r2}
   12788:	add	r2, r3, #36	; 0x24
   1278c:	ldr	r0, [pc, #816]	; 12ac4 <__assert_fail@plt+0xd50>
   12790:	bl	1d118 <__assert_fail@plt+0xb3a4>
   12794:	ldr	r3, [pc, #752]	; 12a8c <__assert_fail@plt+0xd18>
   12798:	add	r3, r3, r0, lsl #2
   1279c:	ldr	r3, [r3, #-2620]	; 0xfffff5c4
   127a0:	cmp	r3, #1
   127a4:	beq	130ec <__assert_fail@plt+0x1378>
   127a8:	cmp	r3, #2
   127ac:	movne	r0, #0
   127b0:	beq	138d0 <__assert_fail@plt+0x1b5c>
   127b4:	and	r0, r0, #1
   127b8:	strb	r0, [sl, #-4084]	; 0xfffff00c
   127bc:	b	11e34 <__assert_fail@plt+0xc0>
   127c0:	mov	r0, #8
   127c4:	bl	29958 <_obstack_memory_used@@Base+0x53ac>
   127c8:	ldr	r3, [pc, #680]	; 12a78 <__assert_fail@plt+0xd04>
   127cc:	ldr	r2, [sl, #-3932]	; 0xfffff0a4
   127d0:	ldr	r3, [r3]
   127d4:	str	r0, [sl, #-3932]	; 0xfffff0a4
   127d8:	str	r2, [r0, #4]
   127dc:	str	r3, [r0]
   127e0:	b	11e34 <__assert_fail@plt+0xc0>
   127e4:	mov	r3, #1
   127e8:	strb	r3, [r4, #3673]	; 0xe59
   127ec:	b	11e34 <__assert_fail@plt+0xc0>
   127f0:	mov	r3, #0
   127f4:	str	r3, [sp, #28]
   127f8:	ldr	r3, [pc, #712]	; 12ac8 <__assert_fail@plt+0xd54>
   127fc:	str	r3, [sp, #44]	; 0x2c
   12800:	b	11e34 <__assert_fail@plt+0xc0>
   12804:	ldr	r2, [pc, #628]	; 12a80 <__assert_fail@plt+0xd0c>
   12808:	ldr	r3, [pc, #616]	; 12a78 <__assert_fail@plt+0xd04>
   1280c:	mov	r0, #1
   12810:	ldr	r1, [r2]
   12814:	mov	r2, #4
   12818:	str	r1, [sp, #4]
   1281c:	ldr	r1, [r3]
   12820:	ldr	r3, [pc, #612]	; 12a8c <__assert_fail@plt+0xd18>
   12824:	str	r0, [sp, #8]
   12828:	sub	r3, r3, #2432	; 0x980
   1282c:	str	r2, [sp]
   12830:	ldr	r0, [pc, #660]	; 12acc <__assert_fail@plt+0xd58>
   12834:	add	r2, r3, #28
   12838:	bl	1d118 <__assert_fail@plt+0xb3a4>
   1283c:	ldr	r3, [pc, #584]	; 12a8c <__assert_fail@plt+0xd18>
   12840:	add	r0, r3, r0, lsl #2
   12844:	ldr	r3, [r0, #-2432]	; 0xfffff680
   12848:	str	r3, [sp, #28]
   1284c:	b	11e34 <__assert_fail@plt+0xc0>
   12850:	mov	r3, #2
   12854:	str	r3, [r4, #3096]	; 0xc18
   12858:	b	11e34 <__assert_fail@plt+0xc0>
   1285c:	mov	r3, #3
   12860:	str	r3, [sl, #-4080]	; 0xfffff010
   12864:	b	11e34 <__assert_fail@plt+0xc0>
   12868:	ldr	r3, [pc, #520]	; 12a78 <__assert_fail@plt+0xd04>
   1286c:	ldr	r1, [r3]
   12870:	cmp	r1, #0
   12874:	beq	130f4 <__assert_fail@plt+0x1380>
   12878:	ldr	r0, [pc, #512]	; 12a80 <__assert_fail@plt+0xd0c>
   1287c:	mov	r3, #4
   12880:	mov	r2, #1
   12884:	ldr	r0, [r0]
   12888:	str	r3, [sp]
   1288c:	ldr	r3, [pc, #496]	; 12a84 <__assert_fail@plt+0xd10>
   12890:	stmib	sp, {r0, r2}
   12894:	add	r2, r3, #36	; 0x24
   12898:	ldr	r0, [pc, #560]	; 12ad0 <__assert_fail@plt+0xd5c>
   1289c:	bl	1d118 <__assert_fail@plt+0xb3a4>
   128a0:	ldr	r3, [pc, #484]	; 12a8c <__assert_fail@plt+0xd18>
   128a4:	add	r3, r3, r0, lsl #2
   128a8:	ldr	r3, [r3, #-2620]	; 0xfffff5c4
   128ac:	cmp	r3, #1
   128b0:	beq	130f4 <__assert_fail@plt+0x1380>
   128b4:	cmp	r3, #2
   128b8:	movne	r0, #0
   128bc:	beq	138d8 <__assert_fail@plt+0x1b64>
   128c0:	and	r0, r0, #1
   128c4:	strb	r0, [r4, #3996]	; 0xf9c
   128c8:	b	11e34 <__assert_fail@plt+0xc0>
   128cc:	ldr	r2, [pc, #420]	; 12a78 <__assert_fail@plt+0xd04>
   128d0:	ldr	r3, [pc, #536]	; 12af0 <__assert_fail@plt+0xd7c>
   128d4:	ldr	r1, [sp, #56]	; 0x38
   128d8:	ldr	r0, [r2]
   128dc:	mov	r2, r3
   128e0:	str	r3, [sp, #60]	; 0x3c
   128e4:	bl	21110 <__assert_fail@plt+0xf39c>
   128e8:	ldr	r3, [sp, #60]	; 0x3c
   128ec:	cmp	r0, #0
   128f0:	bne	13bdc <__assert_fail@plt+0x1e68>
   128f4:	ldr	r1, [pc, #720]	; 12bcc <__assert_fail@plt+0xe58>
   128f8:	ldrd	r2, [r3]
   128fc:	ldr	r0, [r4, #3688]	; 0xe68
   12900:	strd	r2, [r1, #216]	; 0xd8
   12904:	str	r0, [r4, #4032]	; 0xfc0
   12908:	b	11e34 <__assert_fail@plt+0xc0>
   1290c:	mov	r3, #1
   12910:	strb	r3, [r4, #3252]	; 0xcb4
   12914:	b	11e34 <__assert_fail@plt+0xc0>
   12918:	mov	r3, #3
   1291c:	str	r3, [sp, #28]
   12920:	b	11e34 <__assert_fail@plt+0xc0>
   12924:	ldr	r3, [pc, #332]	; 12a78 <__assert_fail@plt+0xd04>
   12928:	ldr	r0, [r3]
   1292c:	bl	13e1c <__assert_fail@plt+0x20a8>
   12930:	subs	r9, r0, #0
   12934:	bge	11e34 <__assert_fail@plt+0xc0>
   12938:	mov	r2, #5
   1293c:	ldr	r1, [pc, #400]	; 12ad4 <__assert_fail@plt+0xd60>
   12940:	mov	r0, #0
   12944:	bl	11984 <dcgettext@plt>
   12948:	ldr	r3, [pc, #296]	; 12a78 <__assert_fail@plt+0xd04>
   1294c:	mov	r4, r0
   12950:	ldr	r0, [r3]
   12954:	bl	284ac <_obstack_memory_used@@Base+0x3f00>
   12958:	mov	r3, r4
   1295c:	ldr	r2, [pc, #372]	; 12ad8 <__assert_fail@plt+0xd64>
   12960:	mov	r1, #0
   12964:	str	r0, [sp]
   12968:	mov	r0, #2
   1296c:	bl	11a8c <error@plt>
   12970:	mov	r3, #4
   12974:	str	r3, [sp, #32]
   12978:	b	11e34 <__assert_fail@plt+0xc0>
   1297c:	mov	r3, #2
   12980:	str	r3, [r4, #3248]	; 0xcb0
   12984:	b	11e34 <__assert_fail@plt+0xc0>
   12988:	mov	r3, #5
   1298c:	str	r3, [sp, #32]
   12990:	b	11e34 <__assert_fail@plt+0xc0>
   12994:	mov	r3, #1
   12998:	strb	r3, [r4, #3241]	; 0xca9
   1299c:	b	11e34 <__assert_fail@plt+0xc0>
   129a0:	mov	r3, #1
   129a4:	strb	r3, [r4, #3672]	; 0xe58
   129a8:	b	11e34 <__assert_fail@plt+0xc0>
   129ac:	mov	r3, #1
   129b0:	str	r3, [sp, #40]	; 0x28
   129b4:	b	11e34 <__assert_fail@plt+0xc0>
   129b8:	mov	r3, #1
   129bc:	str	r3, [r4, #3096]	; 0xc18
   129c0:	b	11e34 <__assert_fail@plt+0xc0>
   129c4:	ldr	r1, [pc, #512]	; 12bcc <__assert_fail@plt+0xe58>
   129c8:	mov	r3, #0
   129cc:	str	r3, [sp, #28]
   129d0:	strb	r3, [r1, #205]	; 0xcd
   129d4:	b	11e34 <__assert_fail@plt+0xc0>
   129d8:	mov	r3, #4
   129dc:	str	r3, [sp, #28]
   129e0:	b	11e34 <__assert_fail@plt+0xc0>
   129e4:	ldr	r4, [pc, #240]	; 12adc <__assert_fail@plt+0xd68>
   129e8:	ldr	r1, [sp, #44]	; 0x2c
   129ec:	ldr	r0, [pc, #236]	; 12ae0 <__assert_fail@plt+0xd6c>
   129f0:	bl	1cf9c <__assert_fail@plt+0xb228>
   129f4:	mov	r2, #5
   129f8:	ldr	r1, [pc, #228]	; 12ae4 <__assert_fail@plt+0xd70>
   129fc:	mov	r0, #0
   12a00:	bl	11984 <dcgettext@plt>
   12a04:	ldr	r1, [r4]
   12a08:	bl	11864 <fputs_unlocked@plt>
   12a0c:	ldr	r5, [pc, #280]	; 12b2c <__assert_fail@plt+0xdb8>
   12a10:	ldr	r3, [pc, #176]	; 12ac8 <__assert_fail@plt+0xd54>
   12a14:	ldr	r7, [pc, #204]	; 12ae8 <__assert_fail@plt+0xd74>
   12a18:	mov	r6, #1
   12a1c:	mov	r2, r7
   12a20:	mov	r1, r6
   12a24:	ldr	r0, [r4]
   12a28:	bl	11c18 <__fprintf_chk@plt>
   12a2c:	ldr	r3, [r5, #4]!
   12a30:	cmp	r3, #0
   12a34:	bne	12a1c <__assert_fail@plt+0xca8>
   12a38:	ldr	r1, [pc, #172]	; 12aec <__assert_fail@plt+0xd78>
   12a3c:	mov	r0, r3
   12a40:	mov	r2, #5
   12a44:	bl	11984 <dcgettext@plt>
   12a48:	ldr	r1, [r4]
   12a4c:	bl	11864 <fputs_unlocked@plt>
   12a50:	mov	r0, #2
   12a54:	bl	1c6c4 <__assert_fail@plt+0xa950>
   12a58:	andeq	pc, r2, r8, asr r8	; <UNPREDICTABLE>
   12a5c:	muleq	r2, r8, r7
   12a60:	andeq	r1, r4, r4, asr #5
   12a64:	andeq	r1, r4, r0, lsr r3
   12a68:	andeq	sp, r1, r0, lsl #24
   12a6c:	andeq	r3, r4, r8, lsr #6
   12a70:	andeq	sp, r2, r0, lsl #7
   12a74:	andeq	pc, r2, r0, ror r8	; <UNPREDICTABLE>
   12a78:	andeq	r1, r4, r8, lsr #6
   12a7c:	andeq	pc, r2, ip, asr #17
   12a80:	andeq	r1, r4, r0, asr #5
   12a84:	andeq	sp, r2, r4, asr #12
   12a88:	andeq	pc, r2, r0, asr #17
   12a8c:	andeq	lr, r2, r0, lsl #1
   12a90:			; <UNDEFINED> instruction: 0x0002f8b8
   12a94:			; <UNDEFINED> instruction: 0x0002f8bc
   12a98:	strdeq	pc, [r2], -r8
   12a9c:	andeq	sp, r2, r4, lsl #19
   12aa0:	andeq	pc, r2, r4, lsr r9	; <UNPREDICTABLE>
   12aa4:	andeq	pc, r2, r4, asr #18
   12aa8:			; <UNDEFINED> instruction: 0x000412bc
   12aac:	muleq	r2, r4, r7
   12ab0:	andeq	pc, r2, r8, ror #17
   12ab4:	andeq	pc, r2, r0, ror #17
   12ab8:	andeq	pc, r2, r4, lsr #18
   12abc:	andeq	sp, r2, ip, lsr r7
   12ac0:	andeq	pc, r2, r0, lsl r9	; <UNPREDICTABLE>
   12ac4:	andeq	pc, r2, r4, lsl #18
   12ac8:	andeq	pc, r2, r0, asr #16
   12acc:	strdeq	pc, [r2], -r0
   12ad0:	strdeq	pc, [r2], -ip
   12ad4:	muleq	r2, ip, r8
   12ad8:			; <UNDEFINED> instruction: 0x0002f8b0
   12adc:	andeq	r1, r4, r0, lsr #6
   12ae0:	andeq	pc, r2, r4, lsr #21
   12ae4:			; <UNDEFINED> instruction: 0x0002fab0
   12ae8:	andeq	pc, r2, r8, asr #21
   12aec:	ldrdeq	pc, [r2], -r8
   12af0:	andeq	r2, r4, r0, lsr #3
   12af4:	andeq	pc, r2, ip, asr #20
   12af8:	andeq	r3, r1, r8, lsl lr
   12afc:			; <UNDEFINED> instruction: 0x00013dbc
   12b00:	andeq	r3, r1, r0, lsr #27
   12b04:	andeq	r2, r4, r4, ror #6
   12b08:	andeq	pc, r2, r0, lsl #23
   12b0c:			; <UNDEFINED> instruction: 0x0002f9b0
   12b10:			; <UNDEFINED> instruction: 0x0002f9b8
   12b14:	andeq	sp, r2, ip, lsl #19
   12b18:	ldrdeq	r1, [r4], -r8
   12b1c:	andeq	ip, r2, r4, lsl #1
   12b20:	andeq	r1, r4, r0, asr pc
   12b24:	andeq	sp, r2, r0, ror #14
   12b28:	andeq	sp, r2, r8, ror #14
   12b2c:	andeq	ip, r2, r8, lsl #5
   12b30:	andeq	pc, r2, r8, asr r9	; <UNPREDICTABLE>
   12b34:	andeq	pc, r2, r0, asr fp	; <UNPREDICTABLE>
   12b38:	andeq	pc, r2, ip, asr fp	; <UNPREDICTABLE>
   12b3c:	andeq	pc, r2, r8, ror #22
   12b40:	muleq	r2, ip, r2
   12b44:	ldrdeq	r1, [r0], -r5
   12b48:	andeq	pc, r2, r0, ror fp	; <UNPREDICTABLE>
   12b4c:	andeq	r1, r4, r4, lsr #6
   12b50:	andeq	r2, r4, r0, asr #3
   12b54:	andeq	pc, r2, ip, asr #23
   12b58:	ldrdeq	pc, [r2], -r8
   12b5c:	andeq	pc, r2, r8, ror #23
   12b60:	andeq	r2, r4, r3, asr #3
   12b64:	andeq	lr, r1, r8, asr #17
   12b68:	andeq	r2, r4, r0, lsl #6
   12b6c:	andeq	fp, r2, ip, lsl #4
   12b70:	muleq	r4, r8, r3
   12b74:	andeq	r0, r3, r4, lsr #3
   12b78:	andeq	r1, r4, r8, lsl r3
   12b7c:	andeq	pc, r2, r4, lsl #23
   12b80:	andeq	pc, r2, r8, asr #23
   12b84:	andeq	pc, r2, r8, lsl #25
   12b88:	andeq	pc, r2, r4, ror r9	; <UNPREDICTABLE>
   12b8c:	andeq	pc, r2, r8, lsr fp	; <UNPREDICTABLE>
   12b90:	andeq	pc, r2, r4, asr #22
   12b94:	andeq	pc, r2, r8, lsr #22
   12b98:	andeq	pc, r2, r0, lsl fp	; <UNPREDICTABLE>
   12b9c:	strdeq	pc, [r2], -r8
   12ba0:	andeq	r0, r3, r4, lsr #5
   12ba4:	andeq	r0, r3, ip, asr #5
   12ba8:			; <UNDEFINED> instruction: 0x000412b8
   12bac:	muleq	r2, r0, ip
   12bb0:	andeq	sp, r2, r8, ror r7
   12bb4:	andeq	pc, r2, r4, asr ip	; <UNPREDICTABLE>
   12bb8:	andeq	pc, r2, r8, ror fp	; <UNPREDICTABLE>
   12bbc:	andeq	pc, r2, r8, ror sl	; <UNPREDICTABLE>
   12bc0:	andeq	pc, r2, ip, asr #16
   12bc4:	andeq	r5, r0, r3, lsl r4
   12bc8:	andeq	pc, r2, r8, ror #18
   12bcc:	ldrdeq	r1, [r4], -r0
   12bd0:	andeq	pc, r2, r4, asr r8	; <UNPREDICTABLE>
   12bd4:	andeq	pc, r2, ip, lsr ip	; <UNPREDICTABLE>
   12bd8:	andeq	pc, r2, r4, lsl #21
   12bdc:	andeq	r0, r0, sp, lsl #14
   12be0:	andeq	pc, r2, r0, asr #23
   12be4:	ldrdeq	sp, [r2], -ip
   12be8:	andeq	pc, r2, r8, lsl #23
   12bec:	andeq	r0, r0, sp, lsl r4
   12bf0:	andeq	sp, r2, r8, ror #15
   12bf4:	andeq	sp, r2, r8, lsl #16
   12bf8:	ldr	r6, [pc, #-272]	; 12af0 <__assert_fail@plt+0xd7c>
   12bfc:	ldrd	r2, [r6]
   12c00:	orrs	r3, r2, r3
   12c04:	beq	132b8 <__assert_fail@plt+0x1544>
   12c08:	ldr	r3, [pc, #-68]	; 12bcc <__assert_fail@plt+0xe58>
   12c0c:	str	r3, [sp, #56]	; 0x38
   12c10:	ldr	r3, [sp, #28]
   12c14:	cmp	r3, #0
   12c18:	blt	130b0 <__assert_fail@plt+0x133c>
   12c1c:	ldr	r2, [sp, #28]
   12c20:	sub	r3, r2, #2
   12c24:	cmp	r3, #2
   12c28:	str	r2, [r4, #3244]	; 0xcac
   12c2c:	bhi	130d0 <__assert_fail@plt+0x135c>
   12c30:	cmn	r9, #1
   12c34:	beq	13734 <__assert_fail@plt+0x19c0>
   12c38:	mov	r1, #3
   12c3c:	mov	r0, r9
   12c40:	str	r9, [r4, #3276]	; 0xccc
   12c44:	bl	2b758 <_obstack_memory_used@@Base+0x71ac>
   12c48:	mov	r0, r9
   12c4c:	adds	r6, r1, #0
   12c50:	mov	r1, #3
   12c54:	movne	r6, #1
   12c58:	bl	2b56c <_obstack_memory_used@@Base+0x6fc0>
   12c5c:	ldr	r3, [r4, #3244]	; 0xcac
   12c60:	sub	r3, r3, #2
   12c64:	cmp	r3, #2
   12c68:	add	r0, r6, r0
   12c6c:	str	r0, [r4, #3084]	; 0xc0c
   12c70:	bls	13018 <__assert_fail@plt+0x12a4>
   12c74:	ldr	r3, [sp, #40]	; 0x28
   12c78:	cmn	r3, #1
   12c7c:	ldrne	r3, [sp, #40]	; 0x28
   12c80:	andne	r3, r3, #1
   12c84:	beq	135bc <__assert_fail@plt+0x1848>
   12c88:	ldr	r2, [sp, #36]	; 0x24
   12c8c:	strb	r3, [r4, #3232]	; 0xca0
   12c90:	cmp	r2, #0
   12c94:	blt	1382c <__assert_fail@plt+0x1ab8>
   12c98:	ldr	r1, [sp, #36]	; 0x24
   12c9c:	mov	r0, #0
   12ca0:	bl	25d84 <_obstack_memory_used@@Base+0x17d8>
   12ca4:	mov	r0, #0
   12ca8:	bl	25d6c <_obstack_memory_used@@Base+0x17c0>
   12cac:	ldr	r3, [r4, #3244]	; 0xcac
   12cb0:	cmp	r3, #0
   12cb4:	mov	r6, r0
   12cb8:	bne	12ff8 <__assert_fail@plt+0x1284>
   12cbc:	bic	r3, r6, #2
   12cc0:	cmp	r6, #6
   12cc4:	cmpne	r3, #1
   12cc8:	moveq	r3, #1
   12ccc:	movne	r3, #0
   12cd0:	mov	r0, #0
   12cd4:	strb	r3, [r4, #3233]	; 0xca1
   12cd8:	bl	25d38 <_obstack_memory_used@@Base+0x178c>
   12cdc:	cmp	r6, #7
   12ce0:	str	r0, [r4, #3236]	; 0xca4
   12ce4:	beq	1381c <__assert_fail@plt+0x1aa8>
   12ce8:	ldr	r3, [r4, #3096]	; 0xc18
   12cec:	cmp	r3, #1
   12cf0:	bls	12d28 <__assert_fail@plt+0xfb4>
   12cf4:	ldr	r2, [pc, #-520]	; 12af4 <__assert_fail@plt+0xd80>
   12cf8:	sub	r3, r3, #2
   12cfc:	add	r8, r3, r2
   12d00:	ldrb	r1, [r2, r3]
   12d04:	cmp	r1, #0
   12d08:	beq	12d28 <__assert_fail@plt+0xfb4>
   12d0c:	mov	r6, #1
   12d10:	mov	r2, r6
   12d14:	ldr	r0, [r4, #3236]	; 0xca4
   12d18:	bl	25d9c <_obstack_memory_used@@Base+0x17f0>
   12d1c:	ldrb	r1, [r8, #1]!
   12d20:	cmp	r1, #0
   12d24:	bne	12d10 <__assert_fail@plt+0xf9c>
   12d28:	mov	r0, #0
   12d2c:	bl	25d38 <_obstack_memory_used@@Base+0x178c>
   12d30:	mov	r2, #1
   12d34:	mov	r1, #58	; 0x3a
   12d38:	str	r0, [sl, #-3988]	; 0xfffff06c
   12d3c:	bl	25d9c <_obstack_memory_used@@Base+0x17f0>
   12d40:	ldrb	r3, [sl, #-4084]	; 0xfffff00c
   12d44:	ldr	r1, [sp, #56]	; 0x38
   12d48:	ldrb	r0, [r4, #3988]	; 0xf94
   12d4c:	ldr	r2, [r4, #3244]	; 0xcac
   12d50:	eor	r3, r3, #1
   12d54:	ldrb	r1, [r1, #210]	; 0xd2
   12d58:	cmp	r2, #0
   12d5c:	movne	r3, #0
   12d60:	andeq	r3, r3, #1
   12d64:	and	r3, r3, r0
   12d68:	cmp	r3, r1
   12d6c:	strb	r3, [r4, #3988]	; 0xf94
   12d70:	bgt	13bf8 <__assert_fail@plt+0x1e84>
   12d74:	ldr	r3, [sp, #32]
   12d78:	cmp	r3, #0
   12d7c:	ldrge	r3, [sp, #32]
   12d80:	blt	13204 <__assert_fail@plt+0x1490>
   12d84:	cmp	r2, #0
   12d88:	str	r3, [r4, #3256]	; 0xcb8
   12d8c:	beq	13210 <__assert_fail@plt+0x149c>
   12d90:	ldr	r3, [pc, #-544]	; 12b78 <__assert_fail@plt+0xe04>
   12d94:	ldr	r8, [r3]
   12d98:	ldrb	r3, [r4, #3996]	; 0xf9c
   12d9c:	cmp	r3, #0
   12da0:	bne	13318 <__assert_fail@plt+0x15a4>
   12da4:	ldrb	r3, [r4, #3673]	; 0xe59
   12da8:	cmp	r3, #0
   12dac:	beq	12db8 <__assert_fail@plt+0x1044>
   12db0:	mov	r3, #1
   12db4:	strb	r3, [sl, #-4076]	; 0xfffff014
   12db8:	ldr	r3, [sl, #-4080]	; 0xfffff010
   12dbc:	cmp	r3, #0
   12dc0:	bne	12df0 <__assert_fail@plt+0x107c>
   12dc4:	ldrb	r3, [sl, #-4040]	; 0xfffff038
   12dc8:	cmp	r3, #0
   12dcc:	bne	132b0 <__assert_fail@plt+0x153c>
   12dd0:	ldr	r3, [r4, #3096]	; 0xc18
   12dd4:	cmp	r3, #3
   12dd8:	beq	132b0 <__assert_fail@plt+0x153c>
   12ddc:	ldr	r3, [r4, #3244]	; 0xcac
   12de0:	cmp	r3, #0
   12de4:	movne	r3, #3
   12de8:	moveq	r3, #1
   12dec:	str	r3, [sl, #-4080]	; 0xfffff010
   12df0:	ldrb	r3, [sl, #-3992]	; 0xfffff068
   12df4:	cmp	r3, #0
   12df8:	beq	12e40 <__assert_fail@plt+0x10cc>
   12dfc:	ldr	r2, [pc, #-780]	; 12af8 <__assert_fail@plt+0xd84>
   12e00:	ldr	r3, [pc, #-780]	; 12afc <__assert_fail@plt+0xd88>
   12e04:	str	r2, [sp]
   12e08:	mov	r1, #0
   12e0c:	ldr	r2, [pc, #-788]	; 12b00 <__assert_fail@plt+0xd8c>
   12e10:	mov	r0, #30
   12e14:	bl	1f138 <__assert_fail@plt+0xd3c4>
   12e18:	cmp	r0, #0
   12e1c:	str	r0, [r4, #3676]	; 0xe5c
   12e20:	beq	13c58 <__assert_fail@plt+0x1ee4>
   12e24:	ldr	r3, [pc, #-712]	; 12b64 <__assert_fail@plt+0xdf0>
   12e28:	mov	r2, #0
   12e2c:	str	r3, [sp]
   12e30:	mov	r1, r2
   12e34:	ldr	r3, [pc, #-720]	; 12b6c <__assert_fail@plt+0xdf8>
   12e38:	ldr	r0, [pc, #-828]	; 12b04 <__assert_fail@plt+0xd90>
   12e3c:	bl	241f0 <_obstack_begin@@Base>
   12e40:	ldr	r0, [pc, #-832]	; 12b08 <__assert_fail@plt+0xd94>
   12e44:	bl	11ac8 <getenv@plt>
   12e48:	bl	28c10 <_obstack_memory_used@@Base+0x4664>
   12e4c:	ldr	r3, [r4, #3256]	; 0xcb8
   12e50:	sub	r3, r3, #3
   12e54:	bics	r3, r3, #2
   12e58:	str	r0, [r4, #4036]	; 0xfc4
   12e5c:	beq	12e78 <__assert_fail@plt+0x1104>
   12e60:	ldr	r3, [r4, #3244]	; 0xcac
   12e64:	cmp	r3, #0
   12e68:	beq	12e78 <__assert_fail@plt+0x1104>
   12e6c:	ldrb	r3, [r4, #3708]	; 0xe7c
   12e70:	cmp	r3, #0
   12e74:	beq	136bc <__assert_fail@plt+0x1948>
   12e78:	mov	r3, #1
   12e7c:	strb	r3, [sl, #-4083]	; 0xfffff00d
   12e80:	mov	r3, #0
   12e84:	ldrb	r2, [r4, #3988]	; 0xf94
   12e88:	and	r3, r3, #1
   12e8c:	strb	r3, [sl, #-4082]	; 0xfffff00e
   12e90:	cmp	r2, #0
   12e94:	bne	13584 <__assert_fail@plt+0x1810>
   12e98:	ldrb	r3, [sl, #-4084]	; 0xfffff00c
   12e9c:	cmp	r3, #0
   12ea0:	bne	134f8 <__assert_fail@plt+0x1784>
   12ea4:	mov	r3, #100	; 0x64
   12ea8:	mov	r0, r3
   12eac:	mov	r1, #152	; 0x98
   12eb0:	str	r3, [sl, #-4088]	; 0xfffff008
   12eb4:	bl	29a3c <_obstack_memory_used@@Base+0x5490>
   12eb8:	sub	r3, r7, r8
   12ebc:	cmp	r3, #0
   12ec0:	mov	r6, #0
   12ec4:	str	r3, [sp, #28]
   12ec8:	str	r6, [r4, #3260]	; 0xcbc
   12ecc:	strb	r6, [r4, #3234]	; 0xca2
   12ed0:	strb	r6, [r4, #3997]	; 0xf9d
   12ed4:	str	r6, [r4, #3684]	; 0xe64
   12ed8:	str	r6, [r4, #3704]	; 0xe78
   12edc:	str	r6, [r4, #4000]	; 0xfa0
   12ee0:	str	r6, [r4, #4004]	; 0xfa4
   12ee4:	str	r6, [r4, #4012]	; 0xfac
   12ee8:	str	r6, [r4, #4016]	; 0xfb0
   12eec:	str	r6, [r4, #3712]	; 0xe80
   12ef0:	str	r6, [r4, #4020]	; 0xfb4
   12ef4:	str	r6, [r4, #4028]	; 0xfbc
   12ef8:	str	r6, [r4, #4024]	; 0xfb8
   12efc:	ldrgt	r9, [pc, #-912]	; 12b74 <__assert_fail@plt+0xe00>
   12f00:	addgt	r5, r5, r8, lsl #2
   12f04:	str	r0, [r4, #3272]	; 0xcc8
   12f08:	ble	135d8 <__assert_fail@plt+0x1864>
   12f0c:	add	r8, r8, #1
   12f10:	mov	r3, r9
   12f14:	mov	r2, #1
   12f18:	mov	r1, r6
   12f1c:	ldr	r0, [r5], #4
   12f20:	bl	1ab24 <__assert_fail@plt+0x8db0>
   12f24:	cmp	r7, r8
   12f28:	bgt	12f0c <__assert_fail@plt+0x1198>
   12f2c:	ldr	r3, [r4, #3260]	; 0xcbc
   12f30:	cmp	r3, #0
   12f34:	bne	1344c <__assert_fail@plt+0x16d8>
   12f38:	ldr	r3, [sp, #28]
   12f3c:	cmp	r3, #1
   12f40:	ble	13104 <__assert_fail@plt+0x1390>
   12f44:	mov	r6, #1
   12f48:	b	12f74 <__assert_fail@plt+0x1200>
   12f4c:	ldrb	r2, [r5, #8]
   12f50:	ldr	r1, [r5, #4]
   12f54:	bl	1bbbc <__assert_fail@plt+0x9e48>
   12f58:	ldr	r0, [r5]
   12f5c:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   12f60:	ldr	r0, [r5, #4]
   12f64:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   12f68:	mov	r0, r5
   12f6c:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   12f70:	strb	r6, [sl, #-3991]	; 0xfffff069
   12f74:	ldr	r5, [r4, #3680]	; 0xe60
   12f78:	cmp	r5, #0
   12f7c:	beq	13110 <__assert_fail@plt+0x139c>
   12f80:	ldr	ip, [r4, #3676]	; 0xe5c
   12f84:	ldr	r3, [r5, #12]
   12f88:	cmp	ip, #0
   12f8c:	str	r3, [r4, #3680]	; 0xe60
   12f90:	ldr	r0, [r5]
   12f94:	beq	12f4c <__assert_fail@plt+0x11d8>
   12f98:	cmp	r0, #0
   12f9c:	bne	12f4c <__assert_fail@plt+0x11d8>
   12fa0:	ldr	r3, [sl, #-4024]	; 0xfffff048
   12fa4:	ldr	r2, [sl, #-4028]	; 0xfffff044
   12fa8:	sub	r2, r3, r2
   12fac:	cmp	r2, #15
   12fb0:	bls	13bb4 <__assert_fail@plt+0x1e40>
   12fb4:	sub	r3, r3, #16
   12fb8:	str	r3, [sl, #-4024]	; 0xfffff048
   12fbc:	ldm	r3, {r0, r1, r2, r3}
   12fc0:	stm	fp, {r0, r1, r2, r3}
   12fc4:	mov	r0, ip
   12fc8:	mov	r1, fp
   12fcc:	bl	1fd64 <__assert_fail@plt+0xdff0>
   12fd0:	cmp	r0, #0
   12fd4:	beq	13ba0 <__assert_fail@plt+0x1e2c>
   12fd8:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   12fdc:	ldr	r0, [r5]
   12fe0:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   12fe4:	ldr	r0, [r5, #4]
   12fe8:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   12fec:	mov	r0, r5
   12ff0:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   12ff4:	b	12f74 <__assert_fail@plt+0x1200>
   12ff8:	sub	r3, r3, #2
   12ffc:	cmp	r3, #1
   13000:	movhi	r3, #0
   13004:	bhi	12cd0 <__assert_fail@plt+0xf5c>
   13008:	ldr	r3, [r4, #3276]	; 0xccc
   1300c:	cmp	r3, #0
   13010:	beq	12cd0 <__assert_fail@plt+0xf5c>
   13014:	b	12cbc <__assert_fail@plt+0xf48>
   13018:	ldr	r3, [sp, #48]	; 0x30
   1301c:	cmp	r3, #0
   13020:	strge	r3, [r4, #4092]	; 0xffc
   13024:	bge	12c74 <__assert_fail@plt+0xf00>
   13028:	mov	r3, #8
   1302c:	ldr	r0, [pc, #-1320]	; 12b0c <__assert_fail@plt+0xd98>
   13030:	str	r3, [r4, #4092]	; 0xffc
   13034:	bl	11ac8 <getenv@plt>
   13038:	subs	r6, r0, #0
   1303c:	beq	12c74 <__assert_fail@plt+0xf00>
   13040:	ldr	r3, [pc, #-1236]	; 12b74 <__assert_fail@plt+0xe00>
   13044:	mov	r2, #0
   13048:	str	r3, [sp]
   1304c:	mov	r1, r2
   13050:	mov	r3, fp
   13054:	bl	2a3f8 <_obstack_memory_used@@Base+0x5e4c>
   13058:	cmp	r0, #0
   1305c:	bne	1307c <__assert_fail@plt+0x1308>
   13060:	ldrd	r2, [sp, #72]	; 0x48
   13064:	mov	r1, #0
   13068:	mvn	r0, #0
   1306c:	cmp	r3, r1
   13070:	cmpeq	r2, r0
   13074:	strls	r2, [r4, #4092]	; 0xffc
   13078:	bls	12c74 <__assert_fail@plt+0xf00>
   1307c:	mov	r2, #5
   13080:	ldr	r1, [pc, #-1400]	; 12b10 <__assert_fail@plt+0xd9c>
   13084:	mov	r0, #0
   13088:	bl	11984 <dcgettext@plt>
   1308c:	mov	r8, r0
   13090:	mov	r0, r6
   13094:	bl	284ac <_obstack_memory_used@@Base+0x3f00>
   13098:	mov	r1, #0
   1309c:	mov	r2, r8
   130a0:	mov	r3, r0
   130a4:	mov	r0, r1
   130a8:	bl	11a8c <error@plt>
   130ac:	b	12c74 <__assert_fail@plt+0xf00>
   130b0:	ldr	r3, [pc, #-1296]	; 12ba8 <__assert_fail@plt+0xe34>
   130b4:	ldr	r6, [r3]
   130b8:	cmp	r6, #1
   130bc:	beq	138ac <__assert_fail@plt+0x1b38>
   130c0:	cmp	r6, #2
   130c4:	movne	r6, #0
   130c8:	beq	138b8 <__assert_fail@plt+0x1b44>
   130cc:	str	r6, [r4, #3244]	; 0xcac
   130d0:	ldrb	r3, [r4, #3996]	; 0xf9c
   130d4:	cmp	r3, #0
   130d8:	bne	12c30 <__assert_fail@plt+0xebc>
   130dc:	cmn	r9, #1
   130e0:	bne	12c38 <__assert_fail@plt+0xec4>
   130e4:	mov	r9, #80	; 0x50
   130e8:	b	12c38 <__assert_fail@plt+0xec4>
   130ec:	mov	r0, #1
   130f0:	b	127b4 <__assert_fail@plt+0xa40>
   130f4:	mov	r0, #1
   130f8:	b	128c0 <__assert_fail@plt+0xb4c>
   130fc:	ldr	r1, [pc, #-1520]	; 12b14 <__assert_fail@plt+0xda0>
   13100:	b	12598 <__assert_fail@plt+0x824>
   13104:	ldr	r3, [r4, #3680]	; 0xe60
   13108:	cmp	r3, #0
   1310c:	bne	13658 <__assert_fail@plt+0x18e4>
   13110:	ldrb	r3, [r4, #3996]	; 0xf9c
   13114:	cmp	r3, #0
   13118:	beq	131c8 <__assert_fail@plt+0x1454>
   1311c:	ldrb	r3, [r4, #3100]	; 0xc1c
   13120:	cmp	r3, #0
   13124:	beq	131c8 <__assert_fail@plt+0x1454>
   13128:	ldr	r5, [sp, #56]	; 0x38
   1312c:	ldr	r2, [r5]
   13130:	cmp	r2, #2
   13134:	beq	136fc <__assert_fail@plt+0x1988>
   13138:	ldr	r0, [pc, #-1396]	; 12bcc <__assert_fail@plt+0xe58>
   1313c:	bl	14b74 <__assert_fail@plt+0x2e00>
   13140:	ldr	r0, [pc, #-1584]	; 12b18 <__assert_fail@plt+0xda4>
   13144:	bl	14b74 <__assert_fail@plt+0x2e00>
   13148:	ldr	r3, [pc, #-1540]	; 12b4c <__assert_fail@plt+0xdd8>
   1314c:	ldr	r5, [pc, #-1592]	; 12b1c <__assert_fail@plt+0xda8>
   13150:	ldr	r8, [pc, #-1592]	; 12b20 <__assert_fail@plt+0xdac>
   13154:	ldr	r0, [r3]
   13158:	bl	119e4 <fflush_unlocked@plt>
   1315c:	add	r7, r5, #48	; 0x30
   13160:	mov	r9, #0
   13164:	b	13170 <__assert_fail@plt+0x13fc>
   13168:	cmp	r7, r5
   1316c:	beq	13198 <__assert_fail@plt+0x1424>
   13170:	ldr	r6, [r5, #4]!
   13174:	mov	r0, r8
   13178:	mov	r1, r6
   1317c:	bl	1199c <sigismember@plt>
   13180:	cmp	r0, #0
   13184:	beq	13168 <__assert_fail@plt+0x13f4>
   13188:	mov	r0, r6
   1318c:	mov	r1, r9
   13190:	bl	11954 <signal@plt>
   13194:	b	13168 <__assert_fail@plt+0x13f4>
   13198:	ldr	r5, [r4, #3092]	; 0xc14
   1319c:	cmp	r5, #0
   131a0:	movne	r6, #19
   131a4:	beq	131b8 <__assert_fail@plt+0x1444>
   131a8:	mov	r0, r6
   131ac:	bl	1187c <raise@plt>
   131b0:	subs	r5, r5, #1
   131b4:	bne	131a8 <__assert_fail@plt+0x1434>
   131b8:	ldr	r0, [r4]
   131bc:	cmp	r0, #0
   131c0:	beq	131c8 <__assert_fail@plt+0x1454>
   131c4:	bl	1187c <raise@plt>
   131c8:	ldrb	r3, [r4, #3988]	; 0xf94
   131cc:	cmp	r3, #0
   131d0:	bne	134c0 <__assert_fail@plt+0x174c>
   131d4:	ldr	r4, [r4, #3676]	; 0xe5c
   131d8:	cmp	r4, #0
   131dc:	beq	131f8 <__assert_fail@plt+0x1484>
   131e0:	mov	r0, r4
   131e4:	bl	1ec90 <__assert_fail@plt+0xcf1c>
   131e8:	cmp	r0, #0
   131ec:	bne	13bc8 <__assert_fail@plt+0x1e54>
   131f0:	mov	r0, r4
   131f4:	bl	1f428 <__assert_fail@plt+0xd6b4>
   131f8:	ldr	r0, [sl, #-4072]	; 0xfffff018
   131fc:	add	sp, sp, #92	; 0x5c
   13200:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13204:	cmp	r2, #0
   13208:	bne	13668 <__assert_fail@plt+0x18f4>
   1320c:	str	r2, [r4, #3256]	; 0xcb8
   13210:	ldr	r3, [sp, #44]	; 0x2c
   13214:	cmp	r3, #0
   13218:	beq	139d8 <__assert_fail@plt+0x1c64>
   1321c:	str	r7, [sp, #28]
   13220:	mov	r8, #6
   13224:	ldr	r6, [pc, #-1800]	; 12b24 <__assert_fail@plt+0xdb0>
   13228:	mov	r9, #2
   1322c:	ldr	r7, [sp, #44]	; 0x2c
   13230:	b	13248 <__assert_fail@plt+0x14d4>
   13234:	mov	r0, r9
   13238:	bl	1e958 <__assert_fail@plt+0xcbe4>
   1323c:	cmp	r0, #0
   13240:	beq	13648 <__assert_fail@plt+0x18d4>
   13244:	add	r7, r7, #6
   13248:	mov	r2, r8
   1324c:	mov	r1, r6
   13250:	mov	r0, r7
   13254:	bl	11d20 <strncmp@plt>
   13258:	cmp	r0, #0
   1325c:	beq	13234 <__assert_fail@plt+0x14c0>
   13260:	mov	r3, r7
   13264:	str	r7, [sp, #44]	; 0x2c
   13268:	ldrb	r3, [r3]
   1326c:	ldr	r7, [sp, #28]
   13270:	cmp	r3, #43	; 0x2b
   13274:	beq	135fc <__assert_fail@plt+0x1888>
   13278:	ldr	r2, [pc, #-1880]	; 12b28 <__assert_fail@plt+0xdb4>
   1327c:	mov	r3, #4
   13280:	ldr	r1, [pc, #-1884]	; 12b2c <__assert_fail@plt+0xdb8>
   13284:	ldr	r0, [sp, #44]	; 0x2c
   13288:	bl	1ce08 <__assert_fail@plt+0xb094>
   1328c:	subs	r2, r0, #0
   13290:	blt	129e4 <__assert_fail@plt+0xc70>
   13294:	cmp	r2, #3
   13298:	ldrls	pc, [pc, r2, lsl #2]
   1329c:	b	13640 <__assert_fail@plt+0x18cc>
   132a0:	andeq	r3, r1, r8, lsl #16
   132a4:	strdeq	r3, [r1], -r4
   132a8:	ldrdeq	r3, [r1], -ip
   132ac:	muleq	r1, ip, r7
   132b0:	mov	r3, #1
   132b4:	b	12dec <__assert_fail@plt+0x1078>
   132b8:	ldr	r0, [pc, #-1936]	; 12b30 <__assert_fail@plt+0xdbc>
   132bc:	bl	11ac8 <getenv@plt>
   132c0:	mov	r2, r6
   132c4:	sub	r1, r6, #8
   132c8:	mov	r8, r0
   132cc:	bl	21110 <__assert_fail@plt+0xf39c>
   132d0:	cmp	r8, #0
   132d4:	beq	13a2c <__assert_fail@plt+0x1cb8>
   132d8:	ldr	r3, [pc, #-1812]	; 12bcc <__assert_fail@plt+0xe58>
   132dc:	ldr	r1, [r4, #3688]	; 0xe68
   132e0:	mov	r0, r3
   132e4:	str	r3, [sp, #56]	; 0x38
   132e8:	ldrd	r2, [r6]
   132ec:	str	r1, [r4, #4032]	; 0xfc0
   132f0:	strd	r2, [r0, #216]	; 0xd8
   132f4:	ldr	r3, [sp, #52]	; 0x34
   132f8:	cmp	r3, #0
   132fc:	beq	12c10 <__assert_fail@plt+0xe9c>
   13300:	mov	r2, #1024	; 0x400
   13304:	mov	r3, #0
   13308:	mov	r1, #0
   1330c:	strd	r2, [r6]
   13310:	str	r1, [r4, #3688]	; 0xe68
   13314:	b	12c10 <__assert_fail@plt+0xe9c>
   13318:	ldr	r0, [pc, #-2028]	; 12b34 <__assert_fail@plt+0xdc0>
   1331c:	bl	11ac8 <getenv@plt>
   13320:	cmp	r0, #0
   13324:	str	r0, [sp, #68]	; 0x44
   13328:	beq	13338 <__assert_fail@plt+0x15c4>
   1332c:	ldrb	r3, [r0]
   13330:	cmp	r3, #0
   13334:	bne	138e0 <__assert_fail@plt+0x1b6c>
   13338:	ldr	r0, [pc, #-2056]	; 12b38 <__assert_fail@plt+0xdc4>
   1333c:	bl	11ac8 <getenv@plt>
   13340:	cmp	r0, #0
   13344:	beq	13354 <__assert_fail@plt+0x15e0>
   13348:	ldrb	r3, [r0]
   1334c:	cmp	r3, #0
   13350:	bne	133e0 <__assert_fail@plt+0x166c>
   13354:	ldr	r0, [pc, #-2080]	; 12b3c <__assert_fail@plt+0xdc8>
   13358:	bl	11ac8 <getenv@plt>
   1335c:	subs	r3, r0, #0
   13360:	mov	r2, r3
   13364:	beq	138a0 <__assert_fail@plt+0x1b2c>
   13368:	ldrb	r3, [r3]
   1336c:	cmp	r3, #0
   13370:	beq	138a0 <__assert_fail@plt+0x1b2c>
   13374:	ldr	r6, [pc, #-2108]	; 12b40 <__assert_fail@plt+0xdcc>
   13378:	str	r7, [sp, #28]
   1337c:	mov	r9, r5
   13380:	mov	r7, r6
   13384:	mov	r5, r2
   13388:	b	1339c <__assert_fail@plt+0x1628>
   1338c:	mov	r0, r7
   13390:	bl	11b94 <strlen@plt>
   13394:	add	r0, r0, #1
   13398:	add	r7, r7, r0
   1339c:	ldr	r3, [pc, #-2144]	; 12b44 <__assert_fail@plt+0xdd0>
   133a0:	sub	r2, r7, r6
   133a4:	cmp	r2, r3
   133a8:	bhi	13898 <__assert_fail@plt+0x1b24>
   133ac:	mov	r2, #5
   133b0:	ldr	r1, [pc, #-2160]	; 12b48 <__assert_fail@plt+0xdd4>
   133b4:	mov	r0, r7
   133b8:	bl	11d20 <strncmp@plt>
   133bc:	subs	r2, r0, #0
   133c0:	bne	1338c <__assert_fail@plt+0x1618>
   133c4:	mov	r1, r5
   133c8:	add	r0, r7, #5
   133cc:	bl	11ab0 <fnmatch@plt>
   133d0:	cmp	r0, #0
   133d4:	bne	1338c <__assert_fail@plt+0x1618>
   133d8:	ldr	r7, [sp, #28]
   133dc:	mov	r5, r9
   133e0:	ldrb	r3, [r4, #3996]	; 0xf9c
   133e4:	cmp	r3, #0
   133e8:	ldrb	r3, [r4, #3673]	; 0xe59
   133ec:	beq	13c4c <__assert_fail@plt+0x1ed8>
   133f0:	mov	r2, #0
   133f4:	cmp	r3, r2
   133f8:	str	r2, [r4, #4092]	; 0xffc
   133fc:	bne	12db0 <__assert_fail@plt+0x103c>
   13400:	mov	r0, #13
   13404:	bl	13e7c <__assert_fail@plt+0x2108>
   13408:	cmp	r0, #0
   1340c:	bne	12db0 <__assert_fail@plt+0x103c>
   13410:	mov	r0, #14
   13414:	bl	13e7c <__assert_fail@plt+0x2108>
   13418:	cmp	r0, #0
   1341c:	beq	1342c <__assert_fail@plt+0x16b8>
   13420:	ldrb	r3, [r4, #3989]	; 0xf95
   13424:	cmp	r3, #0
   13428:	bne	12db0 <__assert_fail@plt+0x103c>
   1342c:	mov	r0, #12
   13430:	bl	13e7c <__assert_fail@plt+0x2108>
   13434:	cmp	r0, #0
   13438:	beq	12db8 <__assert_fail@plt+0x1044>
   1343c:	ldr	r3, [r4, #3244]	; 0xcac
   13440:	cmp	r3, #0
   13444:	beq	12db0 <__assert_fail@plt+0x103c>
   13448:	b	12db8 <__assert_fail@plt+0x1044>
   1344c:	bl	1608c <__assert_fail@plt+0x4318>
   13450:	ldrb	r0, [sl, #-4040]	; 0xfffff038
   13454:	cmp	r0, #0
   13458:	beq	138c4 <__assert_fail@plt+0x1b50>
   1345c:	ldr	r3, [r4, #3260]	; 0xcbc
   13460:	cmp	r3, #0
   13464:	beq	12f38 <__assert_fail@plt+0x11c4>
   13468:	bl	1a238 <__assert_fail@plt+0x84c4>
   1346c:	ldr	r3, [r4, #3680]	; 0xe60
   13470:	cmp	r3, #0
   13474:	beq	13110 <__assert_fail@plt+0x139c>
   13478:	ldr	r3, [pc, #-2356]	; 12b4c <__assert_fail@plt+0xdd8>
   1347c:	ldr	ip, [pc, #-2356]	; 12b50 <__assert_fail@plt+0xddc>
   13480:	ldr	r0, [r3]
   13484:	ldrd	r2, [ip, #-8]
   13488:	ldr	r1, [r0, #20]
   1348c:	adds	r2, r2, #1
   13490:	ldr	lr, [r0, #24]
   13494:	adc	r3, r3, #0
   13498:	cmp	r1, lr
   1349c:	strd	r2, [ip, #-8]
   134a0:	addcc	r2, r1, #1
   134a4:	movcc	r3, #10
   134a8:	strcc	r2, [r0, #20]
   134ac:	strbcc	r3, [r1]
   134b0:	bcc	12f44 <__assert_fail@plt+0x11d0>
   134b4:	mov	r1, #10
   134b8:	bl	11c48 <__overflow@plt>
   134bc:	b	12f44 <__assert_fail@plt+0x11d0>
   134c0:	ldr	r1, [pc, #-2400]	; 12b68 <__assert_fail@plt+0xdf4>
   134c4:	ldr	r0, [pc, #-2424]	; 12b54 <__assert_fail@plt+0xde0>
   134c8:	bl	14994 <__assert_fail@plt+0x2c20>
   134cc:	ldr	r1, [pc, #-2404]	; 12b70 <__assert_fail@plt+0xdfc>
   134d0:	ldr	r0, [pc, #-2432]	; 12b58 <__assert_fail@plt+0xde4>
   134d4:	bl	14994 <__assert_fail@plt+0x2c20>
   134d8:	ldr	r0, [r4, #3236]	; 0xca4
   134dc:	bl	25d6c <_obstack_memory_used@@Base+0x17c0>
   134e0:	ldr	r3, [pc, #-2372]	; 12ba4 <__assert_fail@plt+0xe30>
   134e4:	ldr	r1, [pc, #-2448]	; 12b5c <__assert_fail@plt+0xde8>
   134e8:	ldr	r2, [r3, r0, lsl #2]
   134ec:	mov	r0, #1
   134f0:	bl	11bf4 <__printf_chk@plt>
   134f4:	b	131d4 <__assert_fail@plt+0x1460>
   134f8:	ldr	r0, [pc, #-2464]	; 12b60 <__assert_fail@plt+0xdec>
   134fc:	mov	r3, #0
   13500:	mov	ip, #1
   13504:	b	13550 <__assert_fail@plt+0x17dc>
   13508:	cmp	r3, #65	; 0x41
   1350c:	bge	13564 <__assert_fail@plt+0x17f0>
   13510:	sub	r2, r3, #48	; 0x30
   13514:	cmp	r2, #9
   13518:	bls	13564 <__assert_fail@plt+0x17f0>
   1351c:	sub	r2, r3, #45	; 0x2d
   13520:	cmp	r3, #126	; 0x7e
   13524:	cmpne	r2, #1
   13528:	bls	13564 <__assert_fail@plt+0x17f0>
   1352c:	sub	r2, r3, #95	; 0x5f
   13530:	clz	r2, r2
   13534:	lsr	r2, r2, #5
   13538:	ldrb	r1, [r0, #1]
   1353c:	add	r3, r3, #1
   13540:	cmp	r3, #256	; 0x100
   13544:	orr	r2, r2, r1
   13548:	strb	r2, [r0, #1]!
   1354c:	beq	1356c <__assert_fail@plt+0x17f8>
   13550:	cmp	r3, #90	; 0x5a
   13554:	ble	13508 <__assert_fail@plt+0x1794>
   13558:	sub	r2, r3, #97	; 0x61
   1355c:	cmp	r2, #25
   13560:	bhi	1351c <__assert_fail@plt+0x17a8>
   13564:	mov	r2, ip
   13568:	b	13538 <__assert_fail@plt+0x17c4>
   1356c:	bl	2a258 <_obstack_memory_used@@Base+0x5cac>
   13570:	cmp	r0, #0
   13574:	str	r0, [r4, #3728]	; 0xe90
   13578:	ldreq	r3, [pc, #-2572]	; 12b74 <__assert_fail@plt+0xe00>
   1357c:	streq	r3, [r4, #3728]	; 0xe90
   13580:	b	12ea4 <__assert_fail@plt+0x1130>
   13584:	ldr	r6, [pc, #-2600]	; 12b64 <__assert_fail@plt+0xdf0>
   13588:	mov	r2, #0
   1358c:	mov	r1, r2
   13590:	str	r6, [sp]
   13594:	ldr	r3, [pc, #-2608]	; 12b6c <__assert_fail@plt+0xdf8>
   13598:	ldr	r0, [pc, #-2616]	; 12b68 <__assert_fail@plt+0xdf4>
   1359c:	bl	241f0 <_obstack_begin@@Base>
   135a0:	mov	r2, #0
   135a4:	str	r6, [sp]
   135a8:	mov	r1, r2
   135ac:	ldr	r3, [pc, #-2632]	; 12b6c <__assert_fail@plt+0xdf8>
   135b0:	ldr	r0, [pc, #-2632]	; 12b70 <__assert_fail@plt+0xdfc>
   135b4:	bl	241f0 <_obstack_begin@@Base>
   135b8:	b	12e98 <__assert_fail@plt+0x1124>
   135bc:	ldr	r3, [pc, #-2588]	; 12ba8 <__assert_fail@plt+0xe34>
   135c0:	ldr	r3, [r3]
   135c4:	cmp	r3, #1
   135c8:	movne	r0, #0
   135cc:	beq	139f8 <__assert_fail@plt+0x1c84>
   135d0:	and	r3, r0, #1
   135d4:	b	12c88 <__assert_fail@plt+0xf14>
   135d8:	ldrb	r6, [sl, #-4040]	; 0xfffff038
   135dc:	cmp	r6, #0
   135e0:	beq	13688 <__assert_fail@plt+0x1914>
   135e4:	ldr	r3, [pc, #-2680]	; 12b74 <__assert_fail@plt+0xe00>
   135e8:	mov	r2, #1
   135ec:	mov	r1, #3
   135f0:	ldr	r0, [pc, #-2684]	; 12b7c <__assert_fail@plt+0xe08>
   135f4:	bl	1ab24 <__assert_fail@plt+0x8db0>
   135f8:	b	12f2c <__assert_fail@plt+0x11b8>
   135fc:	ldr	r3, [sp, #44]	; 0x2c
   13600:	mov	r1, #10
   13604:	add	r9, r3, #1
   13608:	mov	r0, r9
   1360c:	bl	11ba0 <strchr@plt>
   13610:	subs	r8, r0, #0
   13614:	beq	13b68 <__assert_fail@plt+0x1df4>
   13618:	add	r6, r8, #1
   1361c:	mov	r0, r6
   13620:	mov	r1, #10
   13624:	bl	11ba0 <strchr@plt>
   13628:	cmp	r0, #0
   1362c:	strbeq	r0, [r8]
   13630:	bne	13b70 <__assert_fail@plt+0x1dfc>
   13634:	ldr	r3, [sp, #56]	; 0x38
   13638:	str	r9, [r3, #196]	; 0xc4
   1363c:	str	r6, [r3, #200]	; 0xc8
   13640:	bl	13f1c <__assert_fail@plt+0x21a8>
   13644:	b	12d90 <__assert_fail@plt+0x101c>
   13648:	ldr	r3, [pc, #-2776]	; 12b78 <__assert_fail@plt+0xe04>
   1364c:	ldr	r7, [sp, #28]
   13650:	ldr	r8, [r3]
   13654:	b	12d98 <__assert_fail@plt+0x1024>
   13658:	ldr	r3, [r3, #12]
   1365c:	cmp	r3, #0
   13660:	strbeq	r3, [sl, #-3991]	; 0xfffff069
   13664:	b	12f44 <__assert_fail@plt+0x11d0>
   13668:	ldr	r3, [r4, #3248]	; 0xcb0
   1366c:	sub	r3, r3, #1
   13670:	cmp	r3, #2
   13674:	movhi	r3, #0
   13678:	bhi	12d84 <__assert_fail@plt+0x1010>
   1367c:	mov	r3, #5
   13680:	str	r3, [r4, #3256]	; 0xcb8
   13684:	b	12d90 <__assert_fail@plt+0x101c>
   13688:	mov	r0, #16
   1368c:	bl	29958 <_obstack_memory_used@@Base+0x53ac>
   13690:	mov	r5, r0
   13694:	ldr	r0, [pc, #-2848]	; 12b7c <__assert_fail@plt+0xe08>
   13698:	str	r6, [r5, #4]
   1369c:	bl	29f68 <_obstack_memory_used@@Base+0x59bc>
   136a0:	ldr	r3, [r4, #3680]	; 0xe60
   136a4:	str	r5, [r4, #3680]	; 0xe60
   136a8:	str	r3, [r5, #12]
   136ac:	mov	r3, #1
   136b0:	strb	r3, [r5, #8]
   136b4:	str	r0, [r5]
   136b8:	b	12f2c <__assert_fail@plt+0x11b8>
   136bc:	ldrb	r2, [r4, #3241]	; 0xca9
   136c0:	cmp	r2, #0
   136c4:	bne	12e78 <__assert_fail@plt+0x1104>
   136c8:	ldrb	r3, [sl, #-3992]	; 0xfffff068
   136cc:	strb	r2, [sl, #-4083]	; 0xfffff00d
   136d0:	cmp	r3, #0
   136d4:	bne	136f4 <__assert_fail@plt+0x1980>
   136d8:	ldrb	r3, [r4, #3996]	; 0xf9c
   136dc:	cmp	r3, #0
   136e0:	bne	136f4 <__assert_fail@plt+0x1980>
   136e4:	ldr	r3, [r4, #3096]	; 0xc18
   136e8:	cmp	r3, #0
   136ec:	ldrbeq	r3, [r4, #3673]	; 0xe59
   136f0:	beq	12e84 <__assert_fail@plt+0x1110>
   136f4:	mov	r3, #1
   136f8:	b	12e84 <__assert_fail@plt+0x1110>
   136fc:	ldr	r1, [pc, #-2948]	; 12b80 <__assert_fail@plt+0xe0c>
   13700:	ldr	r0, [r5, #4]
   13704:	bl	1196c <memcmp@plt>
   13708:	cmp	r0, #0
   1370c:	bne	13138 <__assert_fail@plt+0x13c4>
   13710:	ldr	r3, [r5, #8]
   13714:	cmp	r3, #1
   13718:	bne	13138 <__assert_fail@plt+0x13c4>
   1371c:	ldr	r3, [sp, #56]	; 0x38
   13720:	ldr	r3, [r3, #12]
   13724:	ldrb	r3, [r3]
   13728:	cmp	r3, #109	; 0x6d
   1372c:	bne	13138 <__assert_fail@plt+0x13c4>
   13730:	b	13148 <__assert_fail@plt+0x13d4>
   13734:	bl	13ee4 <__assert_fail@plt+0x2170>
   13738:	cmp	r0, #0
   1373c:	bne	13a00 <__assert_fail@plt+0x1c8c>
   13740:	ldr	r0, [pc, #-3012]	; 12b84 <__assert_fail@plt+0xe10>
   13744:	bl	11ac8 <getenv@plt>
   13748:	subs	r6, r0, #0
   1374c:	beq	130e4 <__assert_fail@plt+0x1370>
   13750:	ldrb	r3, [r6]
   13754:	cmp	r3, #0
   13758:	beq	130e4 <__assert_fail@plt+0x1370>
   1375c:	bl	13e1c <__assert_fail@plt+0x20a8>
   13760:	subs	r9, r0, #0
   13764:	bge	12c38 <__assert_fail@plt+0xec4>
   13768:	mov	r2, #5
   1376c:	ldr	r1, [pc, #-3052]	; 12b88 <__assert_fail@plt+0xe14>
   13770:	mov	r0, #0
   13774:	bl	11984 <dcgettext@plt>
   13778:	mov	r8, r0
   1377c:	mov	r0, r6
   13780:	bl	284ac <_obstack_memory_used@@Base+0x3f00>
   13784:	mov	r1, #0
   13788:	mov	r2, r8
   1378c:	mov	r3, r0
   13790:	mov	r0, r1
   13794:	bl	11a8c <error@plt>
   13798:	b	130e4 <__assert_fail@plt+0x1370>
   1379c:	mov	r0, #2
   137a0:	bl	1e958 <__assert_fail@plt+0xcbe4>
   137a4:	cmp	r0, #0
   137a8:	beq	13640 <__assert_fail@plt+0x18cc>
   137ac:	ldr	r6, [sp, #56]	; 0x38
   137b0:	mov	r2, #2
   137b4:	mov	r0, #0
   137b8:	ldr	r1, [r6, #196]	; 0xc4
   137bc:	bl	11984 <dcgettext@plt>
   137c0:	mov	r2, #2
   137c4:	ldr	r1, [r6, #200]	; 0xc8
   137c8:	str	r0, [r6, #196]	; 0xc4
   137cc:	mov	r0, #0
   137d0:	bl	11984 <dcgettext@plt>
   137d4:	str	r0, [r6, #200]	; 0xc8
   137d8:	b	13640 <__assert_fail@plt+0x18cc>
   137dc:	ldr	r1, [sp, #56]	; 0x38
   137e0:	ldr	r2, [pc, #-3164]	; 12b8c <__assert_fail@plt+0xe18>
   137e4:	ldr	r3, [pc, #-3164]	; 12b90 <__assert_fail@plt+0xe1c>
   137e8:	str	r2, [r1, #196]	; 0xc4
   137ec:	str	r3, [r1, #200]	; 0xc8
   137f0:	b	13640 <__assert_fail@plt+0x18cc>
   137f4:	ldr	r2, [sp, #56]	; 0x38
   137f8:	ldr	r3, [pc, #-3180]	; 12b94 <__assert_fail@plt+0xe20>
   137fc:	str	r3, [r2, #200]	; 0xc8
   13800:	str	r3, [r2, #196]	; 0xc4
   13804:	b	13640 <__assert_fail@plt+0x18cc>
   13808:	ldr	r2, [sp, #56]	; 0x38
   1380c:	ldr	r3, [pc, #-3196]	; 12b98 <__assert_fail@plt+0xe24>
   13810:	str	r3, [r2, #200]	; 0xc8
   13814:	str	r3, [r2, #196]	; 0xc4
   13818:	b	13640 <__assert_fail@plt+0x18cc>
   1381c:	mov	r2, #1
   13820:	mov	r1, #32
   13824:	bl	25d9c <_obstack_memory_used@@Base+0x17f0>
   13828:	b	12ce8 <__assert_fail@plt+0xf74>
   1382c:	ldr	r0, [pc, #-3224]	; 12b9c <__assert_fail@plt+0xe28>
   13830:	bl	11ac8 <getenv@plt>
   13834:	subs	r8, r0, #0
   13838:	beq	13868 <__assert_fail@plt+0x1af4>
   1383c:	ldr	r6, [pc, #-3236]	; 12ba0 <__assert_fail@plt+0xe2c>
   13840:	mov	r3, #4
   13844:	mov	r2, r6
   13848:	ldr	r1, [pc, #-3244]	; 12ba4 <__assert_fail@plt+0xe30>
   1384c:	bl	1ce08 <__assert_fail@plt+0xb094>
   13850:	cmp	r0, #0
   13854:	blt	13c18 <__assert_fail@plt+0x1ea4>
   13858:	ldr	r3, [r6, r0, lsl #2]
   1385c:	cmp	r3, #0
   13860:	str	r3, [sp, #36]	; 0x24
   13864:	bge	12c98 <__assert_fail@plt+0xf24>
   13868:	ldr	r3, [pc, #-3272]	; 12ba8 <__assert_fail@plt+0xe34>
   1386c:	ldr	r3, [r3]
   13870:	cmp	r3, #1
   13874:	movne	r3, #7
   13878:	strne	r3, [sp, #36]	; 0x24
   1387c:	bne	12c98 <__assert_fail@plt+0xf24>
   13880:	bl	13ee4 <__assert_fail@plt+0x2170>
   13884:	cmp	r0, #0
   13888:	beq	12ca4 <__assert_fail@plt+0xf30>
   1388c:	mov	r3, #3
   13890:	str	r3, [sp, #36]	; 0x24
   13894:	b	12c98 <__assert_fail@plt+0xf24>
   13898:	ldr	r7, [sp, #28]
   1389c:	mov	r5, r9
   138a0:	mov	r3, #0
   138a4:	strb	r3, [r4, #3996]	; 0xf9c
   138a8:	b	133e0 <__assert_fail@plt+0x166c>
   138ac:	bl	13ee4 <__assert_fail@plt+0x2170>
   138b0:	cmp	r0, #0
   138b4:	beq	130cc <__assert_fail@plt+0x1358>
   138b8:	mov	r3, #2
   138bc:	str	r3, [r4, #3244]	; 0xcac
   138c0:	b	12c30 <__assert_fail@plt+0xebc>
   138c4:	mov	r1, #1
   138c8:	bl	163f8 <__assert_fail@plt+0x4684>
   138cc:	b	1345c <__assert_fail@plt+0x16e8>
   138d0:	bl	13ee4 <__assert_fail@plt+0x2170>
   138d4:	b	127b4 <__assert_fail@plt+0xa40>
   138d8:	bl	13ee4 <__assert_fail@plt+0x2170>
   138dc:	b	128c0 <__assert_fail@plt+0xb4c>
   138e0:	ldr	r3, [pc, #-3388]	; 12bac <__assert_fail@plt+0xe38>
   138e4:	ldr	r9, [pc, #-3388]	; 12bb0 <__assert_fail@plt+0xe3c>
   138e8:	ldr	r3, [r3]
   138ec:	strh	r3, [sp, #64]	; 0x40
   138f0:	lsr	r3, r3, #16
   138f4:	strb	r3, [sp, #66]	; 0x42
   138f8:	bl	29f68 <_obstack_memory_used@@Base+0x59bc>
   138fc:	str	r0, [sl, #-3928]	; 0xfffff0a8
   13900:	str	r0, [sp, #72]	; 0x48
   13904:	ldr	r3, [sp, #68]	; 0x44
   13908:	ldrb	r2, [r3]
   1390c:	cmp	r2, #42	; 0x2a
   13910:	beq	13ae0 <__assert_fail@plt+0x1d6c>
   13914:	cmp	r2, #58	; 0x3a
   13918:	beq	13a48 <__assert_fail@plt+0x1cd4>
   1391c:	cmp	r2, #0
   13920:	beq	139ac <__assert_fail@plt+0x1c38>
   13924:	add	r2, r3, #1
   13928:	str	r2, [sp, #68]	; 0x44
   1392c:	ldrb	r2, [r3]
   13930:	strb	r2, [sp, #64]	; 0x40
   13934:	ldrb	r2, [r3, #1]
   13938:	cmp	r2, #0
   1393c:	beq	13964 <__assert_fail@plt+0x1bf0>
   13940:	add	r2, r3, #2
   13944:	str	r2, [sp, #68]	; 0x44
   13948:	ldrb	r2, [r3, #1]
   1394c:	add	r1, r3, #3
   13950:	str	r1, [sp, #68]	; 0x44
   13954:	strb	r2, [sp, #65]	; 0x41
   13958:	ldrb	r3, [r3, #2]
   1395c:	cmp	r3, #61	; 0x3d
   13960:	beq	13a54 <__assert_fail@plt+0x1ce0>
   13964:	mov	r2, #5
   13968:	ldr	r1, [pc, #-3516]	; 12bb4 <__assert_fail@plt+0xe40>
   1396c:	mov	r0, #0
   13970:	bl	11984 <dcgettext@plt>
   13974:	mov	r1, #0
   13978:	mov	r2, r0
   1397c:	mov	r0, r1
   13980:	bl	11a8c <error@plt>
   13984:	ldr	r0, [sl, #-3928]	; 0xfffff0a8
   13988:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   1398c:	ldr	r0, [r4, #3992]	; 0xf98
   13990:	b	139a0 <__assert_fail@plt+0x1c2c>
   13994:	ldr	r6, [r0, #16]
   13998:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   1399c:	mov	r0, r6
   139a0:	cmp	r0, #0
   139a4:	bne	13994 <__assert_fail@plt+0x1c20>
   139a8:	strb	r0, [r4, #3996]	; 0xf9c
   139ac:	ldr	r3, [sp, #56]	; 0x38
   139b0:	ldr	r2, [r3, #56]	; 0x38
   139b4:	cmp	r2, #6
   139b8:	bne	133e0 <__assert_fail@plt+0x166c>
   139bc:	ldr	r0, [r3, #60]	; 0x3c
   139c0:	ldr	r1, [pc, #-3600]	; 12bb8 <__assert_fail@plt+0xe44>
   139c4:	bl	11d20 <strncmp@plt>
   139c8:	cmp	r0, #0
   139cc:	moveq	r3, #1
   139d0:	strbeq	r3, [r4, #3989]	; 0xf95
   139d4:	b	133e0 <__assert_fail@plt+0x166c>
   139d8:	ldr	r0, [pc, #-3620]	; 12bbc <__assert_fail@plt+0xe48>
   139dc:	bl	11ac8 <getenv@plt>
   139e0:	subs	r3, r0, #0
   139e4:	str	r3, [sp, #44]	; 0x2c
   139e8:	bne	1321c <__assert_fail@plt+0x14a8>
   139ec:	ldr	r3, [pc, #-3636]	; 12bc0 <__assert_fail@plt+0xe4c>
   139f0:	str	r3, [sp, #44]	; 0x2c
   139f4:	b	13278 <__assert_fail@plt+0x1504>
   139f8:	bl	13ee4 <__assert_fail@plt+0x2170>
   139fc:	b	135d0 <__assert_fail@plt+0x185c>
   13a00:	mov	r2, fp
   13a04:	ldr	r1, [pc, #-3656]	; 12bc4 <__assert_fail@plt+0xe50>
   13a08:	mov	r0, #1
   13a0c:	bl	11a38 <ioctl@plt>
   13a10:	cmp	r0, #0
   13a14:	blt	13740 <__assert_fail@plt+0x19cc>
   13a18:	ldrh	r3, [sp, #74]	; 0x4a
   13a1c:	cmp	r3, #0
   13a20:	movne	r9, r3
   13a24:	bne	12c38 <__assert_fail@plt+0xec4>
   13a28:	b	13740 <__assert_fail@plt+0x19cc>
   13a2c:	ldr	r0, [pc, #-3692]	; 12bc8 <__assert_fail@plt+0xe54>
   13a30:	bl	11ac8 <getenv@plt>
   13a34:	cmp	r0, #0
   13a38:	bne	132d8 <__assert_fail@plt+0x1564>
   13a3c:	ldr	r3, [pc, #-3704]	; 12bcc <__assert_fail@plt+0xe58>
   13a40:	str	r3, [sp, #56]	; 0x38
   13a44:	b	132f4 <__assert_fail@plt+0x1580>
   13a48:	add	r3, r3, #1
   13a4c:	str	r3, [sp, #68]	; 0x44
   13a50:	b	13904 <__assert_fail@plt+0x1b90>
   13a54:	mov	r6, #0
   13a58:	ldr	r1, [pc, #-3728]	; 12bd0 <__assert_fail@plt+0xe5c>
   13a5c:	b	13a70 <__assert_fail@plt+0x1cfc>
   13a60:	add	r6, r6, #1
   13a64:	ldr	r1, [r9, r6, lsl #2]
   13a68:	cmp	r1, #0
   13a6c:	beq	13aac <__assert_fail@plt+0x1d38>
   13a70:	add	r0, sp, #64	; 0x40
   13a74:	bl	118a0 <strcmp@plt>
   13a78:	cmp	r0, #0
   13a7c:	bne	13a60 <__assert_fail@plt+0x1cec>
   13a80:	ldr	r3, [sp, #56]	; 0x38
   13a84:	mov	r2, r0
   13a88:	add	r6, r3, r6, lsl #3
   13a8c:	ldr	r0, [sp, #72]	; 0x48
   13a90:	mov	r3, r6
   13a94:	str	r0, [r6, #4]
   13a98:	add	r1, sp, #68	; 0x44
   13a9c:	mov	r0, fp
   13aa0:	bl	1419c <__assert_fail@plt+0x2428>
   13aa4:	cmp	r0, #0
   13aa8:	bne	13904 <__assert_fail@plt+0x1b90>
   13aac:	mov	r2, #5
   13ab0:	ldr	r1, [pc, #-3812]	; 12bd4 <__assert_fail@plt+0xe60>
   13ab4:	mov	r0, #0
   13ab8:	bl	11984 <dcgettext@plt>
   13abc:	mov	r6, r0
   13ac0:	add	r0, sp, #64	; 0x40
   13ac4:	bl	284ac <_obstack_memory_used@@Base+0x3f00>
   13ac8:	mov	r1, #0
   13acc:	mov	r2, r6
   13ad0:	mov	r3, r0
   13ad4:	mov	r0, r1
   13ad8:	bl	11a8c <error@plt>
   13adc:	b	13964 <__assert_fail@plt+0x1bf0>
   13ae0:	mov	r0, #20
   13ae4:	bl	29958 <_obstack_memory_used@@Base+0x53ac>
   13ae8:	ldr	r1, [r4, #3992]	; 0xf98
   13aec:	ldr	ip, [sp, #68]	; 0x44
   13af0:	mov	r2, #1
   13af4:	add	ip, ip, #1
   13af8:	str	ip, [sp, #68]	; 0x44
   13afc:	mov	r6, r0
   13b00:	ldr	r0, [sp, #72]	; 0x48
   13b04:	str	r1, [r6, #16]
   13b08:	str	r0, [r6, #4]
   13b0c:	mov	r3, r6
   13b10:	add	r1, sp, #68	; 0x44
   13b14:	mov	r0, fp
   13b18:	str	r6, [r4, #3992]	; 0xf98
   13b1c:	bl	1419c <__assert_fail@plt+0x2428>
   13b20:	cmp	r0, #0
   13b24:	beq	13964 <__assert_fail@plt+0x1bf0>
   13b28:	ldr	r3, [sp, #68]	; 0x44
   13b2c:	add	r2, r3, #1
   13b30:	str	r2, [sp, #68]	; 0x44
   13b34:	ldrb	r3, [r3]
   13b38:	cmp	r3, #61	; 0x3d
   13b3c:	bne	13964 <__assert_fail@plt+0x1bf0>
   13b40:	ldr	r0, [sp, #72]	; 0x48
   13b44:	add	r3, r6, #8
   13b48:	str	r0, [r6, #12]
   13b4c:	mov	r2, #0
   13b50:	add	r1, sp, #68	; 0x44
   13b54:	mov	r0, fp
   13b58:	bl	1419c <__assert_fail@plt+0x2428>
   13b5c:	cmp	r0, #0
   13b60:	beq	13964 <__assert_fail@plt+0x1bf0>
   13b64:	b	13904 <__assert_fail@plt+0x1b90>
   13b68:	mov	r6, r9
   13b6c:	b	13634 <__assert_fail@plt+0x18c0>
   13b70:	mov	r2, #5
   13b74:	ldr	r1, [pc, #-4004]	; 12bd8 <__assert_fail@plt+0xe64>
   13b78:	mov	r0, #0
   13b7c:	bl	11984 <dcgettext@plt>
   13b80:	mov	r4, r0
   13b84:	mov	r0, r9
   13b88:	bl	284ac <_obstack_memory_used@@Base+0x3f00>
   13b8c:	mov	r2, r4
   13b90:	mov	r1, #0
   13b94:	mov	r3, r0
   13b98:	mov	r0, #2
   13b9c:	bl	11a8c <error@plt>
   13ba0:	ldr	r3, [pc, #-4024]	; 12bf0 <__assert_fail@plt+0xe7c>
   13ba4:	ldr	r2, [pc, #-4048]	; 12bdc <__assert_fail@plt+0xe68>
   13ba8:	ldr	r1, [pc, #-4028]	; 12bf4 <__assert_fail@plt+0xe80>
   13bac:	ldr	r0, [pc, #-4052]	; 12be0 <__assert_fail@plt+0xe6c>
   13bb0:	bl	11d74 <__assert_fail@plt>
   13bb4:	ldr	r3, [pc, #-4056]	; 12be4 <__assert_fail@plt+0xe70>
   13bb8:	ldr	r2, [pc, #-4052]	; 12bec <__assert_fail@plt+0xe78>
   13bbc:	ldr	r1, [pc, #-4048]	; 12bf4 <__assert_fail@plt+0xe80>
   13bc0:	ldr	r0, [pc, #-4064]	; 12be8 <__assert_fail@plt+0xe74>
   13bc4:	bl	11d74 <__assert_fail@plt>
   13bc8:	ldr	r3, [pc, #-4064]	; 12bf0 <__assert_fail@plt+0xe7c>
   13bcc:	ldr	r2, [pc, #136]	; 13c5c <__assert_fail@plt+0x1ee8>
   13bd0:	ldr	r1, [pc, #136]	; 13c60 <__assert_fail@plt+0x1eec>
   13bd4:	ldr	r0, [pc, #136]	; 13c64 <__assert_fail@plt+0x1ef0>
   13bd8:	bl	11d74 <__assert_fail@plt>
   13bdc:	ldr	r3, [pc, #132]	; 13c68 <__assert_fail@plt+0x1ef4>
   13be0:	ldr	r1, [sp, #72]	; 0x48
   13be4:	ldr	r2, [r3]
   13be8:	ldr	r3, [pc, #124]	; 13c6c <__assert_fail@plt+0x1ef8>
   13bec:	str	r2, [sp]
   13bf0:	mov	r2, #0
   13bf4:	bl	2a344 <_obstack_memory_used@@Base+0x5d98>
   13bf8:	mov	r2, #5
   13bfc:	ldr	r1, [pc, #108]	; 13c70 <__assert_fail@plt+0x1efc>
   13c00:	mov	r0, #0
   13c04:	bl	11984 <dcgettext@plt>
   13c08:	mov	r1, #0
   13c0c:	mov	r2, r0
   13c10:	mov	r0, #2
   13c14:	bl	11a8c <error@plt>
   13c18:	mov	r2, #5
   13c1c:	ldr	r1, [pc, #80]	; 13c74 <__assert_fail@plt+0x1f00>
   13c20:	mov	r0, #0
   13c24:	bl	11984 <dcgettext@plt>
   13c28:	mov	r6, r0
   13c2c:	mov	r0, r8
   13c30:	bl	284ac <_obstack_memory_used@@Base+0x3f00>
   13c34:	mov	r1, #0
   13c38:	mov	r2, r6
   13c3c:	mov	r3, r0
   13c40:	mov	r0, r1
   13c44:	bl	11a8c <error@plt>
   13c48:	b	13868 <__assert_fail@plt+0x1af4>
   13c4c:	cmp	r3, #0
   13c50:	bne	12db0 <__assert_fail@plt+0x103c>
   13c54:	b	12db8 <__assert_fail@plt+0x1044>
   13c58:	bl	29fa0 <_obstack_memory_used@@Base+0x59f4>
   13c5c:	andeq	r0, r0, r1, asr #14
   13c60:	andeq	sp, r2, r8, lsl #16
   13c64:	andeq	pc, r2, r0, lsl ip	; <UNPREDICTABLE>
   13c68:	andeq	r1, r4, r8, lsr #6
   13c6c:	andeq	sp, r2, r4, ror r3
   13c70:	andeq	pc, r2, r4, asr sl	; <UNPREDICTABLE>
   13c74:	andeq	pc, r2, r8, lsl #20
   13c78:	mov	fp, #0
   13c7c:	mov	lr, #0
   13c80:	pop	{r1}		; (ldr r1, [sp], #4)
   13c84:	mov	r2, sp
   13c88:	push	{r2}		; (str r2, [sp, #-4]!)
   13c8c:	push	{r0}		; (str r0, [sp, #-4]!)
   13c90:	ldr	ip, [pc, #16]	; 13ca8 <__assert_fail@plt+0x1f34>
   13c94:	push	{ip}		; (str ip, [sp, #-4]!)
   13c98:	ldr	r0, [pc, #12]	; 13cac <__assert_fail@plt+0x1f38>
   13c9c:	ldr	r3, [pc, #12]	; 13cb0 <__assert_fail@plt+0x1f3c>
   13ca0:	bl	11af8 <__libc_start_main@plt>
   13ca4:	bl	11d2c <abort@plt>
   13ca8:	andeq	ip, r2, r0, rrx
   13cac:	andeq	r1, r1, r0, lsl #27
   13cb0:	andeq	ip, r2, r0
   13cb4:	ldr	r3, [pc, #20]	; 13cd0 <__assert_fail@plt+0x1f5c>
   13cb8:	ldr	r2, [pc, #20]	; 13cd4 <__assert_fail@plt+0x1f60>
   13cbc:	add	r3, pc, r3
   13cc0:	ldr	r2, [r3, r2]
   13cc4:	cmp	r2, #0
   13cc8:	bxeq	lr
   13ccc:	b	11b34 <__gmon_start__@plt>
   13cd0:	andeq	sp, r2, ip, lsr r3
   13cd4:	andeq	r0, r0, r4, asr #3
   13cd8:	ldr	r3, [pc, #28]	; 13cfc <__assert_fail@plt+0x1f88>
   13cdc:	ldr	r0, [pc, #28]	; 13d00 <__assert_fail@plt+0x1f8c>
   13ce0:	sub	r3, r3, r0
   13ce4:	cmp	r3, #6
   13ce8:	bxls	lr
   13cec:	ldr	r3, [pc, #16]	; 13d04 <__assert_fail@plt+0x1f90>
   13cf0:	cmp	r3, #0
   13cf4:	bxeq	lr
   13cf8:	bx	r3
   13cfc:	andeq	r1, r4, pc, lsl #6
   13d00:	andeq	r1, r4, ip, lsl #6
   13d04:	andeq	r0, r0, r0
   13d08:	ldr	r1, [pc, #36]	; 13d34 <__assert_fail@plt+0x1fc0>
   13d0c:	ldr	r0, [pc, #36]	; 13d38 <__assert_fail@plt+0x1fc4>
   13d10:	sub	r1, r1, r0
   13d14:	asr	r1, r1, #2
   13d18:	add	r1, r1, r1, lsr #31
   13d1c:	asrs	r1, r1, #1
   13d20:	bxeq	lr
   13d24:	ldr	r3, [pc, #16]	; 13d3c <__assert_fail@plt+0x1fc8>
   13d28:	cmp	r3, #0
   13d2c:	bxeq	lr
   13d30:	bx	r3
   13d34:	andeq	r1, r4, ip, lsl #6
   13d38:	andeq	r1, r4, ip, lsl #6
   13d3c:	andeq	r0, r0, r0
   13d40:	push	{r4, lr}
   13d44:	ldr	r4, [pc, #24]	; 13d64 <__assert_fail@plt+0x1ff0>
   13d48:	ldrb	r3, [r4]
   13d4c:	cmp	r3, #0
   13d50:	popne	{r4, pc}
   13d54:	bl	13cd8 <__assert_fail@plt+0x1f64>
   13d58:	mov	r3, #1
   13d5c:	strb	r3, [r4]
   13d60:	pop	{r4, pc}
   13d64:	andeq	r1, r4, ip, lsr #6
   13d68:	ldr	r0, [pc, #40]	; 13d98 <__assert_fail@plt+0x2024>
   13d6c:	ldr	r3, [r0]
   13d70:	cmp	r3, #0
   13d74:	bne	13d7c <__assert_fail@plt+0x2008>
   13d78:	b	13d08 <__assert_fail@plt+0x1f94>
   13d7c:	ldr	r3, [pc, #24]	; 13d9c <__assert_fail@plt+0x2028>
   13d80:	cmp	r3, #0
   13d84:	beq	13d78 <__assert_fail@plt+0x2004>
   13d88:	push	{r4, lr}
   13d8c:	blx	r3
   13d90:	pop	{r4, lr}
   13d94:	b	13d08 <__assert_fail@plt+0x1f94>
   13d98:	andeq	r0, r4, r4, lsl #30
   13d9c:	andeq	r0, r0, r0
   13da0:	push	{r4, lr}
   13da4:	mov	r2, r1
   13da8:	mov	r3, #0
   13dac:	ldrd	r0, [r0]
   13db0:	bl	2be44 <_obstack_memory_used@@Base+0x7898>
   13db4:	mov	r0, r2
   13db8:	pop	{r4, pc}
   13dbc:	ldrd	r2, [r1]
   13dc0:	push	{r4, r5}
   13dc4:	ldrd	r4, [r0]
   13dc8:	cmp	r5, r3
   13dcc:	cmpeq	r4, r2
   13dd0:	movne	r0, #0
   13dd4:	beq	13de0 <__assert_fail@plt+0x206c>
   13dd8:	pop	{r4, r5}
   13ddc:	bx	lr
   13de0:	ldrd	r4, [r0, #8]
   13de4:	ldrd	r2, [r1, #8]
   13de8:	cmp	r5, r3
   13dec:	cmpeq	r4, r2
   13df0:	moveq	r0, #1
   13df4:	movne	r0, #0
   13df8:	pop	{r4, r5}
   13dfc:	bx	lr
   13e00:	ldr	r3, [pc, #12]	; 13e14 <__assert_fail@plt+0x20a0>
   13e04:	ldr	r2, [r3]
   13e08:	cmp	r2, #0
   13e0c:	streq	r0, [r3]
   13e10:	bx	lr
   13e14:	andeq	r1, r4, r0, lsr r3
   13e18:	b	1e8c8 <__assert_fail@plt+0xcb54>
   13e1c:	push	{lr}		; (str lr, [sp, #-4]!)
   13e20:	sub	sp, sp, #20
   13e24:	ldr	r3, [pc, #76]	; 13e78 <__assert_fail@plt+0x2104>
   13e28:	mov	r2, #0
   13e2c:	str	r3, [sp]
   13e30:	mov	r1, r2
   13e34:	add	r3, sp, #8
   13e38:	bl	2a3f8 <_obstack_memory_used@@Base+0x5e4c>
   13e3c:	cmp	r0, #0
   13e40:	beq	13e58 <__assert_fail@plt+0x20e4>
   13e44:	cmp	r0, #1
   13e48:	moveq	r0, #0
   13e4c:	mvnne	r0, #0
   13e50:	add	sp, sp, #20
   13e54:	pop	{pc}		; (ldr pc, [sp], #4)
   13e58:	ldrd	r0, [sp, #8]
   13e5c:	mov	r3, #0
   13e60:	mvn	r2, #-2147483648	; 0x80000000
   13e64:	cmp	r1, r3
   13e68:	cmpeq	r0, r2
   13e6c:	movhi	r0, #0
   13e70:	add	sp, sp, #20
   13e74:	pop	{pc}		; (ldr pc, [sp], #4)
   13e78:	andeq	r0, r3, r4, lsr #3
   13e7c:	ldr	r3, [pc, #88]	; 13edc <__assert_fail@plt+0x2168>
   13e80:	ldr	r2, [r3, r0, lsl #3]
   13e84:	cmp	r2, #0
   13e88:	beq	13eac <__assert_fail@plt+0x2138>
   13e8c:	add	r3, r3, r0, lsl #3
   13e90:	cmp	r2, #1
   13e94:	ldr	r0, [r3, #4]
   13e98:	beq	13ecc <__assert_fail@plt+0x2158>
   13e9c:	cmp	r2, #2
   13ea0:	beq	13eb4 <__assert_fail@plt+0x2140>
   13ea4:	mov	r0, #1
   13ea8:	bx	lr
   13eac:	mov	r0, r2
   13eb0:	bx	lr
   13eb4:	push	{r4, lr}
   13eb8:	ldr	r1, [pc, #32]	; 13ee0 <__assert_fail@plt+0x216c>
   13ebc:	bl	11d20 <strncmp@plt>
   13ec0:	adds	r0, r0, #0
   13ec4:	movne	r0, #1
   13ec8:	pop	{r4, pc}
   13ecc:	ldrb	r2, [r0]
   13ed0:	subs	r0, r2, #48	; 0x30
   13ed4:	movne	r0, #1
   13ed8:	bx	lr
   13edc:	ldrdeq	r1, [r4], -r0
   13ee0:	strdeq	sp, [r2], -r0
   13ee4:	push	{r4, lr}
   13ee8:	ldr	r4, [pc, #40]	; 13f18 <__assert_fail@plt+0x21a4>
   13eec:	ldrsb	r0, [r4, #192]	; 0xc0
   13ef0:	cmp	r0, #0
   13ef4:	blt	13f00 <__assert_fail@plt+0x218c>
   13ef8:	and	r0, r0, #1
   13efc:	pop	{r4, pc}
   13f00:	mov	r0, #1
   13f04:	bl	11d08 <isatty@plt>
   13f08:	sxtb	r0, r0
   13f0c:	strb	r0, [r4, #192]	; 0xc0
   13f10:	and	r0, r0, #1
   13f14:	pop	{r4, pc}
   13f18:	ldrdeq	r1, [r4], -r0
   13f1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f20:	sub	sp, sp, #1584	; 0x630
   13f24:	sub	sp, sp, #4
   13f28:	mov	r1, #0
   13f2c:	ldr	r3, [pc, #560]	; 14164 <__assert_fail@plt+0x23f0>
   13f30:	ldr	r2, [r3, r1, lsl #2]
   13f34:	ldrb	r3, [r2]
   13f38:	cmp	r3, #0
   13f3c:	bne	13f50 <__assert_fail@plt+0x21dc>
   13f40:	b	14048 <__assert_fail@plt+0x22d4>
   13f44:	cmp	r3, #0
   13f48:	add	r2, r2, #1
   13f4c:	beq	14048 <__assert_fail@plt+0x22d4>
   13f50:	cmp	r3, #37	; 0x25
   13f54:	ldrb	r3, [r2, #1]
   13f58:	bne	13f44 <__assert_fail@plt+0x21d0>
   13f5c:	cmp	r3, #37	; 0x25
   13f60:	beq	14034 <__assert_fail@plt+0x22c0>
   13f64:	cmp	r3, #98	; 0x62
   13f68:	bne	13f44 <__assert_fail@plt+0x21d0>
   13f6c:	add	r3, sp, #40	; 0x28
   13f70:	str	r2, [r3, r1, lsl #2]
   13f74:	add	r1, r1, #1
   13f78:	cmp	r1, #2
   13f7c:	bne	13f2c <__assert_fail@plt+0x21b8>
   13f80:	ldr	r3, [sp, #40]	; 0x28
   13f84:	cmp	r3, #0
   13f88:	beq	1411c <__assert_fail@plt+0x23a8>
   13f8c:	mov	r9, #12
   13f90:	mov	sl, #37	; 0x25
   13f94:	add	fp, sp, #36	; 0x24
   13f98:	ldr	r4, [pc, #456]	; 14168 <__assert_fail@plt+0x23f4>
   13f9c:	add	r6, sp, #48	; 0x30
   13fa0:	mov	r5, #0
   13fa4:	mov	r0, r4
   13fa8:	str	r9, [sp, #36]	; 0x24
   13fac:	bl	11c90 <nl_langinfo@plt>
   13fb0:	mov	r1, sl
   13fb4:	add	r4, r4, #1
   13fb8:	mov	r7, r0
   13fbc:	bl	11ba0 <strchr@plt>
   13fc0:	subs	r8, r0, #0
   13fc4:	bne	14110 <__assert_fail@plt+0x239c>
   13fc8:	bl	11b58 <__ctype_b_loc@plt>
   13fcc:	str	r8, [sp, #4]
   13fd0:	ldrb	ip, [r7]
   13fd4:	mov	r2, #128	; 0x80
   13fd8:	mov	r1, r6
   13fdc:	mov	r3, fp
   13fe0:	lsl	ip, ip, #1
   13fe4:	add	r6, r6, r2
   13fe8:	ldr	lr, [r0]
   13fec:	mov	r0, r7
   13ff0:	ldrh	ip, [lr, ip]
   13ff4:	lsr	ip, ip, #11
   13ff8:	and	ip, ip, #1
   13ffc:	str	ip, [sp]
   14000:	bl	2179c <__assert_fail@plt+0xfa28>
   14004:	cmp	r0, #127	; 0x7f
   14008:	bhi	14110 <__assert_fail@plt+0x239c>
   1400c:	ldr	r3, [sp, #36]	; 0x24
   14010:	cmp	r5, r3
   14014:	movcc	r5, r3
   14018:	ldr	r3, [pc, #332]	; 1416c <__assert_fail@plt+0x23f8>
   1401c:	cmp	r4, r3
   14020:	bne	13fa4 <__assert_fail@plt+0x2230>
   14024:	cmp	r9, r5
   14028:	bls	14050 <__assert_fail@plt+0x22dc>
   1402c:	mov	r9, r5
   14030:	b	13f98 <__assert_fail@plt+0x2224>
   14034:	ldrb	r3, [r2, #2]
   14038:	add	r2, r2, #1
   1403c:	add	r2, r2, #1
   14040:	cmp	r3, #0
   14044:	bne	13f50 <__assert_fail@plt+0x21dc>
   14048:	mov	r2, r3
   1404c:	b	13f6c <__assert_fail@plt+0x21f8>
   14050:	str	r8, [sp, #28]
   14054:	ldr	r2, [sp, #28]
   14058:	add	r1, sp, #40	; 0x28
   1405c:	mov	r3, #12
   14060:	ldr	r5, [r1, r2, lsl #2]
   14064:	ldr	r1, [pc, #248]	; 14164 <__assert_fail@plt+0x23f0>
   14068:	cmp	r5, #0
   1406c:	mul	r4, r3, r2
   14070:	ldr	r7, [r1, r2, lsl #2]
   14074:	sub	r8, r5, r7
   14078:	beq	1412c <__assert_fail@plt+0x23b8>
   1407c:	cmp	r8, #128	; 0x80
   14080:	bgt	14110 <__assert_fail@plt+0x239c>
   14084:	mov	r6, #1536	; 0x600
   14088:	add	r5, r5, #2
   1408c:	mul	r6, r6, r2
   14090:	mov	r4, #0
   14094:	mvn	fp, #0
   14098:	mov	sl, #1
   1409c:	mov	r9, #128	; 0x80
   140a0:	ldr	r2, [pc, #200]	; 14170 <__assert_fail@plt+0x23fc>
   140a4:	add	r3, sp, #48	; 0x30
   140a8:	str	r2, [sp]
   140ac:	ldr	r2, [pc, #192]	; 14174 <__assert_fail@plt+0x2400>
   140b0:	add	r3, r3, r4
   140b4:	add	r0, r6, r4
   140b8:	add	r0, r2, r0
   140bc:	str	r3, [sp, #12]
   140c0:	str	r5, [sp, #16]
   140c4:	str	r7, [sp, #8]
   140c8:	str	r8, [sp, #4]
   140cc:	mov	r3, fp
   140d0:	mov	r2, sl
   140d4:	mov	r1, r9
   140d8:	bl	11d5c <__snprintf_chk@plt>
   140dc:	add	r4, r4, #128	; 0x80
   140e0:	cmp	r0, #127	; 0x7f
   140e4:	bhi	14110 <__assert_fail@plt+0x239c>
   140e8:	cmp	r4, #1536	; 0x600
   140ec:	bne	140a0 <__assert_fail@plt+0x232c>
   140f0:	ldr	r3, [sp, #28]
   140f4:	add	r3, r3, #1
   140f8:	cmp	r3, #2
   140fc:	str	r3, [sp, #28]
   14100:	bne	14054 <__assert_fail@plt+0x22e0>
   14104:	ldr	r3, [pc, #108]	; 14178 <__assert_fail@plt+0x2404>
   14108:	mov	r2, #1
   1410c:	strb	r2, [r3, #3076]	; 0xc04
   14110:	add	sp, sp, #1584	; 0x630
   14114:	add	sp, sp, #4
   14118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1411c:	ldr	r3, [sp, #44]	; 0x2c
   14120:	cmp	r3, #0
   14124:	bne	13f8c <__assert_fail@plt+0x2218>
   14128:	b	14110 <__assert_fail@plt+0x239c>
   1412c:	mov	r6, #128	; 0x80
   14130:	add	r0, r5, r4
   14134:	ldr	r2, [pc, #56]	; 14174 <__assert_fail@plt+0x2400>
   14138:	mov	r3, r7
   1413c:	add	r0, r2, r0, lsl #7
   14140:	mov	r1, r6
   14144:	ldr	r2, [pc, #48]	; 1417c <__assert_fail@plt+0x2408>
   14148:	bl	11bd0 <snprintf@plt>
   1414c:	add	r5, r5, #1
   14150:	cmp	r0, #127	; 0x7f
   14154:	bhi	14110 <__assert_fail@plt+0x239c>
   14158:	cmp	r5, #12
   1415c:	bne	14130 <__assert_fail@plt+0x23bc>
   14160:	b	140f0 <__assert_fail@plt+0x237c>
   14164:	muleq	r4, r4, r2
   14168:	andeq	r0, r2, lr
   1416c:	andeq	r0, r2, sl, lsl r0
   14170:	strdeq	sp, [r2], -r4
   14174:	andeq	r1, r4, r4, lsr r3
   14178:	andeq	r1, r4, r0, lsr r3
   1417c:	andeq	pc, r2, ip, lsr #19
   14180:	ldr	r1, [r1]
   14184:	ldr	r0, [r0]
   14188:	b	118a0 <strcmp@plt>
   1418c:	ldr	r3, [r1]
   14190:	ldr	r1, [r0]
   14194:	mov	r0, r3
   14198:	b	118a0 <strcmp@plt>
   1419c:	ldr	ip, [r1]
   141a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141a4:	mov	r6, #1
   141a8:	ldrb	r4, [ip]
   141ac:	ldr	lr, [r0]
   141b0:	mov	r9, #27
   141b4:	cmp	r4, #61	; 0x3d
   141b8:	mov	r8, #7
   141bc:	mov	r7, #127	; 0x7f
   141c0:	sub	fp, r6, #1
   141c4:	beq	1424c <__assert_fail@plt+0x24d8>
   141c8:	bls	14210 <__assert_fail@plt+0x249c>
   141cc:	cmp	r4, #92	; 0x5c
   141d0:	beq	1425c <__assert_fail@plt+0x24e8>
   141d4:	cmp	r4, #94	; 0x5e
   141d8:	bne	1422c <__assert_fail@plt+0x24b8>
   141dc:	ldrb	r4, [ip, #1]
   141e0:	add	sl, ip, #1
   141e4:	sub	r5, r4, #64	; 0x40
   141e8:	cmp	r5, #62	; 0x3e
   141ec:	bls	14460 <__assert_fail@plt+0x26ec>
   141f0:	cmp	r4, #63	; 0x3f
   141f4:	beq	14638 <__assert_fail@plt+0x28c4>
   141f8:	mov	r2, #0
   141fc:	str	lr, [r0]
   14200:	str	sl, [r1]
   14204:	mov	r0, r2
   14208:	str	fp, [r3]
   1420c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14210:	cmp	r4, #0
   14214:	beq	14220 <__assert_fail@plt+0x24ac>
   14218:	cmp	r4, #58	; 0x3a
   1421c:	bne	1422c <__assert_fail@plt+0x24b8>
   14220:	mov	sl, ip
   14224:	mov	r2, #1
   14228:	b	141fc <__assert_fail@plt+0x2488>
   1422c:	add	ip, ip, #1
   14230:	strb	r4, [lr]
   14234:	ldrb	r4, [ip]
   14238:	add	r6, r6, #1
   1423c:	add	lr, lr, #1
   14240:	cmp	r4, #61	; 0x3d
   14244:	sub	fp, r6, #1
   14248:	bne	141c8 <__assert_fail@plt+0x2454>
   1424c:	cmp	r2, #0
   14250:	beq	1422c <__assert_fail@plt+0x24b8>
   14254:	mov	sl, ip
   14258:	b	141fc <__assert_fail@plt+0x2488>
   1425c:	ldrb	r4, [ip, #1]
   14260:	cmp	r4, #120	; 0x78
   14264:	ldrls	pc, [pc, r4, lsl #2]
   14268:	b	14454 <__assert_fail@plt+0x26e0>
   1426c:	andeq	r4, r1, r8, lsr #12
   14270:	andeq	r4, r1, r4, asr r4
   14274:	andeq	r4, r1, r4, asr r4
   14278:	andeq	r4, r1, r4, asr r4
   1427c:	andeq	r4, r1, r4, asr r4
   14280:	andeq	r4, r1, r4, asr r4
   14284:	andeq	r4, r1, r4, asr r4
   14288:	andeq	r4, r1, r4, asr r4
   1428c:	andeq	r4, r1, r4, asr r4
   14290:	andeq	r4, r1, r4, asr r4
   14294:	andeq	r4, r1, r4, asr r4
   14298:	andeq	r4, r1, r4, asr r4
   1429c:	andeq	r4, r1, r4, asr r4
   142a0:	andeq	r4, r1, r4, asr r4
   142a4:	andeq	r4, r1, r4, asr r4
   142a8:	andeq	r4, r1, r4, asr r4
   142ac:	andeq	r4, r1, r4, asr r4
   142b0:	andeq	r4, r1, r4, asr r4
   142b4:	andeq	r4, r1, r4, asr r4
   142b8:	andeq	r4, r1, r4, asr r4
   142bc:	andeq	r4, r1, r4, asr r4
   142c0:	andeq	r4, r1, r4, asr r4
   142c4:	andeq	r4, r1, r4, asr r4
   142c8:	andeq	r4, r1, r4, asr r4
   142cc:	andeq	r4, r1, r4, asr r4
   142d0:	andeq	r4, r1, r4, asr r4
   142d4:	andeq	r4, r1, r4, asr r4
   142d8:	andeq	r4, r1, r4, asr r4
   142dc:	andeq	r4, r1, r4, asr r4
   142e0:	andeq	r4, r1, r4, asr r4
   142e4:	andeq	r4, r1, r4, asr r4
   142e8:	andeq	r4, r1, r4, asr r4
   142ec:	andeq	r4, r1, r4, asr r4
   142f0:	andeq	r4, r1, r4, asr r4
   142f4:	andeq	r4, r1, r4, asr r4
   142f8:	andeq	r4, r1, r4, asr r4
   142fc:	andeq	r4, r1, r4, asr r4
   14300:	andeq	r4, r1, r4, asr r4
   14304:	andeq	r4, r1, r4, asr r4
   14308:	andeq	r4, r1, r4, asr r4
   1430c:	andeq	r4, r1, r4, asr r4
   14310:	andeq	r4, r1, r4, asr r4
   14314:	andeq	r4, r1, r4, asr r4
   14318:	andeq	r4, r1, r4, asr r4
   1431c:	andeq	r4, r1, r4, asr r4
   14320:	andeq	r4, r1, r4, asr r4
   14324:	andeq	r4, r1, r4, asr r4
   14328:	andeq	r4, r1, r4, asr r4
   1432c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14330:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14334:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14338:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1433c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14340:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14344:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14348:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1434c:	andeq	r4, r1, r4, asr r4
   14350:	andeq	r4, r1, r4, asr r4
   14354:	andeq	r4, r1, r4, asr r4
   14358:	andeq	r4, r1, r4, asr r4
   1435c:	andeq	r4, r1, r4, asr r4
   14360:	andeq	r4, r1, r4, asr r4
   14364:	andeq	r4, r1, r4, asr r4
   14368:	andeq	r4, r1, ip, ror #11
   1436c:	andeq	r4, r1, r4, asr r4
   14370:	andeq	r4, r1, r4, asr r4
   14374:	andeq	r4, r1, r4, asr r4
   14378:	andeq	r4, r1, r4, asr r4
   1437c:	andeq	r4, r1, r4, asr r4
   14380:	andeq	r4, r1, r4, asr r4
   14384:	andeq	r4, r1, r4, asr r4
   14388:	andeq	r4, r1, r4, asr r4
   1438c:	andeq	r4, r1, r4, asr r4
   14390:	andeq	r4, r1, r4, asr r4
   14394:	andeq	r4, r1, r4, asr r4
   14398:	andeq	r4, r1, r4, asr r4
   1439c:	andeq	r4, r1, r4, asr r4
   143a0:	andeq	r4, r1, r4, asr r4
   143a4:	andeq	r4, r1, r4, asr r4
   143a8:	andeq	r4, r1, r4, asr r4
   143ac:	andeq	r4, r1, r4, asr r4
   143b0:	andeq	r4, r1, r4, asr r4
   143b4:	andeq	r4, r1, r4, asr r4
   143b8:	andeq	r4, r1, r4, asr r4
   143bc:	andeq	r4, r1, r4, asr r4
   143c0:	andeq	r4, r1, r4, asr r4
   143c4:	andeq	r4, r1, r4, asr r4
   143c8:	andeq	r4, r1, r4, asr r4
   143cc:			; <UNDEFINED> instruction: 0x000144b0
   143d0:	andeq	r4, r1, r4, asr r4
   143d4:	andeq	r4, r1, r4, asr r4
   143d8:	andeq	r4, r1, r4, asr r4
   143dc:	andeq	r4, r1, r4, asr r4
   143e0:	andeq	r4, r1, r4, asr r4
   143e4:	andeq	r4, r1, r4, asr r4
   143e8:	andeq	r4, r1, r8, lsr #9
   143ec:	andeq	r4, r1, r4, asr r4
   143f0:	andeq	r4, r1, r0, lsr #9
   143f4:	muleq	r1, r8, r4
   143f8:	andeq	r4, r1, r4, asr r4
   143fc:	andeq	r4, r1, r4, asr r4
   14400:	andeq	r4, r1, r0, ror r4
   14404:	andeq	r4, r1, r0, lsl #9
   14408:	andeq	r4, r1, r4, asr r4
   1440c:	andeq	r4, r1, r4, asr r4
   14410:	andeq	r4, r1, r4, asr r4
   14414:	andeq	r4, r1, r4, asr r4
   14418:	andeq	r4, r1, r4, asr r4
   1441c:	andeq	r4, r1, r4, asr r4
   14420:	andeq	r4, r1, r4, asr r4
   14424:	muleq	r1, r0, r4
   14428:	andeq	r4, r1, r4, asr r4
   1442c:	andeq	r4, r1, r4, asr r4
   14430:	andeq	r4, r1, r4, asr r4
   14434:	andeq	r4, r1, r8, lsl #9
   14438:	andeq	r4, r1, r4, asr r4
   1443c:	andeq	r4, r1, r8, ror r4
   14440:	andeq	r4, r1, r4, asr r4
   14444:	andeq	r4, r1, r0, asr r4
   14448:	andeq	r4, r1, r4, asr r4
   1444c:			; <UNDEFINED> instruction: 0x000144b0
   14450:	mov	r4, #11
   14454:	strb	r4, [lr]
   14458:	add	ip, ip, #2
   1445c:	b	14234 <__assert_fail@plt+0x24c0>
   14460:	and	r4, r4, #31
   14464:	strb	r4, [lr]
   14468:	add	ip, ip, #2
   1446c:	b	14234 <__assert_fail@plt+0x24c0>
   14470:	mov	r4, r9
   14474:	b	14454 <__assert_fail@plt+0x26e0>
   14478:	mov	r4, #9
   1447c:	b	14454 <__assert_fail@plt+0x26e0>
   14480:	mov	r4, #12
   14484:	b	14454 <__assert_fail@plt+0x26e0>
   14488:	mov	r4, #13
   1448c:	b	14454 <__assert_fail@plt+0x26e0>
   14490:	mov	r4, #10
   14494:	b	14454 <__assert_fail@plt+0x26e0>
   14498:	mov	r4, #8
   1449c:	b	14454 <__assert_fail@plt+0x26e0>
   144a0:	mov	r4, r8
   144a4:	b	14454 <__assert_fail@plt+0x26e0>
   144a8:	mov	r4, #32
   144ac:	b	14454 <__assert_fail@plt+0x26e0>
   144b0:	add	sl, ip, #2
   144b4:	mov	r5, #0
   144b8:	mov	ip, sl
   144bc:	ldrb	r4, [sl], #1
   144c0:	sub	fp, r4, #48	; 0x30
   144c4:	cmp	fp, #54	; 0x36
   144c8:	ldrls	pc, [pc, fp, lsl #2]
   144cc:	b	145e4 <__assert_fail@plt+0x2870>
   144d0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144d4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144d8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144dc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144e0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144e4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144e8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144ec:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144f0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144f4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144f8:	andeq	r4, r1, r4, ror #11
   144fc:	andeq	r4, r1, r4, ror #11
   14500:	andeq	r4, r1, r4, ror #11
   14504:	andeq	r4, r1, r4, ror #11
   14508:	andeq	r4, r1, r4, ror #11
   1450c:	andeq	r4, r1, r4, ror #11
   14510:	andeq	r4, r1, r4, ror #11
   14514:	andeq	r4, r1, r0, asr #11
   14518:	andeq	r4, r1, r0, asr #11
   1451c:	andeq	r4, r1, r0, asr #11
   14520:	andeq	r4, r1, r0, asr #11
   14524:	andeq	r4, r1, r0, asr #11
   14528:	andeq	r4, r1, r0, asr #11
   1452c:	andeq	r4, r1, r4, ror #11
   14530:	andeq	r4, r1, r4, ror #11
   14534:	andeq	r4, r1, r4, ror #11
   14538:	andeq	r4, r1, r4, ror #11
   1453c:	andeq	r4, r1, r4, ror #11
   14540:	andeq	r4, r1, r4, ror #11
   14544:	andeq	r4, r1, r4, ror #11
   14548:	andeq	r4, r1, r4, ror #11
   1454c:	andeq	r4, r1, r4, ror #11
   14550:	andeq	r4, r1, r4, ror #11
   14554:	andeq	r4, r1, r4, ror #11
   14558:	andeq	r4, r1, r4, ror #11
   1455c:	andeq	r4, r1, r4, ror #11
   14560:	andeq	r4, r1, r4, ror #11
   14564:	andeq	r4, r1, r4, ror #11
   14568:	andeq	r4, r1, r4, ror #11
   1456c:	andeq	r4, r1, r4, ror #11
   14570:	andeq	r4, r1, r4, ror #11
   14574:	andeq	r4, r1, r4, ror #11
   14578:	andeq	r4, r1, r4, ror #11
   1457c:	andeq	r4, r1, r4, ror #11
   14580:	andeq	r4, r1, r4, ror #11
   14584:	andeq	r4, r1, r4, ror #11
   14588:	andeq	r4, r1, r4, ror #11
   1458c:	andeq	r4, r1, r4, ror #11
   14590:	andeq	r4, r1, r4, ror #11
   14594:	andeq	r4, r1, ip, lsr #11
   14598:	andeq	r4, r1, ip, lsr #11
   1459c:	andeq	r4, r1, ip, lsr #11
   145a0:	andeq	r4, r1, ip, lsr #11
   145a4:	andeq	r4, r1, ip, lsr #11
   145a8:	andeq	r4, r1, ip, lsr #11
   145ac:	lsl	r5, r5, #4
   145b0:	sub	r5, r5, #87	; 0x57
   145b4:	uxtab	r5, r4, r5
   145b8:	uxtb	r5, r5
   145bc:	b	144b8 <__assert_fail@plt+0x2744>
   145c0:	lsl	r5, r5, #4
   145c4:	sub	r5, r5, #55	; 0x37
   145c8:	uxtab	r5, r4, r5
   145cc:	uxtb	r5, r5
   145d0:	b	144b8 <__assert_fail@plt+0x2744>
   145d4:	add	r5, r4, r5, lsl #4
   145d8:	sub	r5, r5, #48	; 0x30
   145dc:	and	r5, r5, #255	; 0xff
   145e0:	b	144b8 <__assert_fail@plt+0x2744>
   145e4:	strb	r5, [lr]
   145e8:	b	14234 <__assert_fail@plt+0x24c0>
   145ec:	mov	r4, r7
   145f0:	b	14454 <__assert_fail@plt+0x26e0>
   145f4:	sub	r4, r4, #48	; 0x30
   145f8:	add	sl, ip, #2
   145fc:	uxtb	r4, r4
   14600:	ldrb	r5, [sl]
   14604:	mov	ip, sl
   14608:	add	sl, sl, #1
   1460c:	sub	fp, r5, #48	; 0x30
   14610:	cmp	fp, #7
   14614:	add	r5, r5, r4, lsl #3
   14618:	sub	r5, r5, #48	; 0x30
   1461c:	bls	14630 <__assert_fail@plt+0x28bc>
   14620:	strb	r4, [lr]
   14624:	b	14234 <__assert_fail@plt+0x24c0>
   14628:	add	sl, ip, #2
   1462c:	b	141f8 <__assert_fail@plt+0x2484>
   14630:	and	r4, r5, #255	; 0xff
   14634:	b	14600 <__assert_fail@plt+0x288c>
   14638:	strb	r7, [lr]
   1463c:	mov	ip, sl
   14640:	b	14234 <__assert_fail@plt+0x24c0>
   14644:	push	{r4, r5, r6, r7, r8, lr}
   14648:	mov	r4, r0
   1464c:	ldr	r5, [pc, #292]	; 14778 <__assert_fail@plt+0x2a04>
   14650:	ldr	r3, [r5, #3080]	; 0xc08
   14654:	cmp	r3, r0
   14658:	bcs	14704 <__assert_fail@plt+0x2990>
   1465c:	ldr	r1, [r5, #3084]	; 0xc0c
   14660:	cmp	r1, #0
   14664:	beq	14670 <__assert_fail@plt+0x28fc>
   14668:	cmp	r0, r1, lsr #1
   1466c:	bcs	1475c <__assert_fail@plt+0x29e8>
   14670:	mov	r2, #24
   14674:	mov	r1, r4
   14678:	ldr	r0, [r5, #3088]	; 0xc10
   1467c:	bl	299e4 <_obstack_memory_used@@Base+0x5438>
   14680:	lsl	r6, r4, #1
   14684:	str	r0, [r5, #3088]	; 0xc10
   14688:	ldr	r1, [r5, #3080]	; 0xc08
   1468c:	add	r7, r1, #1
   14690:	add	r7, r7, r6
   14694:	sub	r1, r6, r1
   14698:	cmp	r6, r7
   1469c:	mul	r8, r7, r1
   146a0:	bhi	14774 <__assert_fail@plt+0x2a00>
   146a4:	mov	r0, r8
   146a8:	bl	2b56c <_obstack_memory_used@@Base+0x6fc0>
   146ac:	cmp	r7, r0
   146b0:	bne	14774 <__assert_fail@plt+0x2a00>
   146b4:	lsr	r0, r8, #1
   146b8:	mov	r1, #4
   146bc:	bl	29a3c <_obstack_memory_used@@Base+0x5490>
   146c0:	ldr	r3, [r5, #3080]	; 0xc08
   146c4:	cmp	r6, r3
   146c8:	bls	14700 <__assert_fail@plt+0x298c>
   146cc:	add	ip, r3, r3, lsl #1
   146d0:	ldr	r2, [r5, #3088]	; 0xc10
   146d4:	add	r3, r3, #1
   146d8:	add	r1, r6, #1
   146dc:	lsl	r3, r3, #2
   146e0:	add	r2, r2, ip, lsl #2
   146e4:	lsl	r1, r1, #2
   146e8:	str	r0, [r2, #8]
   146ec:	add	r0, r0, r3
   146f0:	add	r3, r3, #4
   146f4:	cmp	r1, r3
   146f8:	add	r2, r2, #12
   146fc:	bne	146e8 <__assert_fail@plt+0x2974>
   14700:	str	r6, [r5, #3080]	; 0xc08
   14704:	cmp	r4, #0
   14708:	popeq	{r4, r5, r6, r7, r8, pc}
   1470c:	ldr	ip, [r5, #3088]	; 0xc10
   14710:	mov	r1, #0
   14714:	mov	r6, #1
   14718:	mov	r0, #3
   1471c:	ldr	r2, [ip, #8]
   14720:	add	lr, r1, #1
   14724:	sub	r2, r2, #4
   14728:	mov	r3, #0
   1472c:	add	r5, lr, lr, lsl #1
   14730:	strb	r6, [ip]
   14734:	str	r5, [ip, #4]
   14738:	add	r3, r3, #1
   1473c:	cmp	r3, r1
   14740:	str	r0, [r2, #4]!
   14744:	bls	14738 <__assert_fail@plt+0x29c4>
   14748:	cmp	r4, lr
   1474c:	mov	r1, lr
   14750:	add	ip, ip, #12
   14754:	bne	1471c <__assert_fail@plt+0x29a8>
   14758:	pop	{r4, r5, r6, r7, r8, pc}
   1475c:	mov	r2, #12
   14760:	ldr	r0, [r5, #3088]	; 0xc10
   14764:	bl	299e4 <_obstack_memory_used@@Base+0x5438>
   14768:	ldr	r6, [r5, #3084]	; 0xc0c
   1476c:	str	r0, [r5, #3088]	; 0xc10
   14770:	b	14688 <__assert_fail@plt+0x2914>
   14774:	bl	29fa0 <_obstack_memory_used@@Base+0x59f4>
   14778:	andeq	r1, r4, r0, lsr r3
   1477c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14780:	sub	sp, sp, #292	; 0x124
   14784:	mov	ip, r3
   14788:	add	r5, sp, #32
   1478c:	mov	r4, r2
   14790:	ldr	r3, [sp, #328]	; 0x148
   14794:	mov	r2, ip
   14798:	str	r5, [sp]
   1479c:	bl	11c3c <statx@plt>
   147a0:	subs	ip, r0, #0
   147a4:	blt	1495c <__assert_fail@plt+0x2be8>
   147a8:	ldr	r1, [sp, #168]	; 0xa8
   147ac:	ldr	r2, [sp, #160]	; 0xa0
   147b0:	mov	fp, r1
   147b4:	lsr	r0, r1, #24
   147b8:	lsl	r1, r1, #8
   147bc:	str	r0, [sp, #12]
   147c0:	str	r1, [sp, #8]
   147c4:	ldrd	r6, [sp, #8]
   147c8:	ldr	r0, [pc, #416]	; 14970 <__assert_fail@plt+0x2bfc>
   147cc:	mov	r1, #0
   147d0:	and	r6, r6, r0
   147d4:	and	r7, r7, r1
   147d8:	ldr	lr, [sp, #172]	; 0xac
   147dc:	strd	r6, [sp, #8]
   147e0:	mov	r3, #0
   147e4:	mov	r6, #0
   147e8:	ldr	r7, [pc, #388]	; 14974 <__assert_fail@plt+0x2c00>
   147ec:	and	r6, r6, r3
   147f0:	lsr	r9, r2, #24
   147f4:	lsl	r8, r2, #8
   147f8:	mov	sl, r6
   147fc:	and	r7, r7, fp
   14800:	lsr	r6, lr, #20
   14804:	mov	fp, r7
   14808:	str	r6, [sp, #20]
   1480c:	and	r7, r9, r1
   14810:	and	r6, r8, r0
   14814:	ldrd	r0, [sp, #8]
   14818:	strd	r6, [sp, #24]
   1481c:	ldr	r7, [sp, #164]	; 0xa4
   14820:	orr	r0, r0, sl
   14824:	orr	r1, r1, fp
   14828:	mov	sl, r0
   1482c:	mov	fp, r1
   14830:	mov	r0, #0
   14834:	ldr	r1, [pc, #312]	; 14974 <__assert_fail@plt+0x2c00>
   14838:	and	r0, r0, r3
   1483c:	lsl	r3, lr, #12
   14840:	and	r1, r1, r2
   14844:	str	r3, [sp, #16]
   14848:	ldrd	r2, [sp, #24]
   1484c:	mov	r9, r1
   14850:	uxtb	r6, lr
   14854:	orr	r2, r2, r0
   14858:	orr	r3, r3, r9
   1485c:	orr	sl, sl, r6
   14860:	lsr	r1, r7, #20
   14864:	lsl	r0, r7, #12
   14868:	uxtb	lr, r7
   1486c:	mov	r8, r2
   14870:	ldrd	r6, [sp, #16]
   14874:	mov	r9, r3
   14878:	add	r3, pc, #232	; 0xe8
   1487c:	ldrd	r2, [r3]
   14880:	orr	r8, r8, lr
   14884:	ldr	lr, [sp, #328]	; 0x148
   14888:	and	r6, r6, r2
   1488c:	and	r7, r7, r3
   14890:	tst	lr, #2048	; 0x800
   14894:	strd	r6, [sp, #8]
   14898:	and	r6, r2, r0
   1489c:	and	r7, r3, r1
   148a0:	mov	r2, r6
   148a4:	mov	r3, r7
   148a8:	ldrd	r6, [sp, #8]
   148ac:	orr	r2, r2, r8
   148b0:	orr	r3, r3, r9
   148b4:	orr	r6, r6, sl
   148b8:	orr	r7, r7, fp
   148bc:	ldrh	r1, [r5, #28]
   148c0:	ldrd	sl, [r5, #40]	; 0x28
   148c4:	strd	r6, [r4]
   148c8:	ldrd	r6, [r5, #32]
   148cc:	ldr	r0, [sp, #48]	; 0x30
   148d0:	strd	r2, [r4, #32]
   148d4:	ldr	r3, [sp, #36]	; 0x24
   148d8:	ldrd	r8, [r5, #48]	; 0x30
   148dc:	ldr	lr, [sp, #52]	; 0x34
   148e0:	ldr	r2, [sp, #104]	; 0x68
   148e4:	strd	r6, [r4, #96]	; 0x60
   148e8:	str	r1, [r4, #16]
   148ec:	ldr	r7, [r5, #64]	; 0x40
   148f0:	ldr	r1, [r5, #112]	; 0x70
   148f4:	strd	sl, [r4, #48]	; 0x30
   148f8:	ldr	fp, [sp, #136]	; 0x88
   148fc:	ldr	sl, [r5, #96]	; 0x60
   14900:	str	r0, [r4, #20]
   14904:	str	r3, [r4, #56]	; 0x38
   14908:	ldr	r0, [sp, #56]	; 0x38
   1490c:	ldr	r3, [sp, #152]	; 0x98
   14910:	strd	r8, [r4, #64]	; 0x40
   14914:	str	lr, [r4, #24]
   14918:	str	r0, [r4, #28]
   1491c:	str	r2, [r4, #76]	; 0x4c
   14920:	str	r7, [r4, #72]	; 0x48
   14924:	str	r3, [r4, #84]	; 0x54
   14928:	str	r1, [r4, #80]	; 0x50
   1492c:	str	sl, [r4, #88]	; 0x58
   14930:	str	fp, [r4, #92]	; 0x5c
   14934:	beq	1495c <__assert_fail@plt+0x2be8>
   14938:	ldr	r3, [sp, #32]
   1493c:	tst	r3, #2048	; 0x800
   14940:	mvneq	r3, #0
   14944:	ldrne	r2, [r5, #80]	; 0x50
   14948:	ldrne	r3, [sp, #120]	; 0x78
   1494c:	strne	r2, [r4, #80]	; 0x50
   14950:	strne	r3, [r4, #84]	; 0x54
   14954:	streq	r3, [r4, #84]	; 0x54
   14958:	streq	r3, [r4, #80]	; 0x50
   1495c:	mov	r0, ip
   14960:	add	sp, sp, #292	; 0x124
   14964:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14968:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1496c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   14970:	andeq	pc, pc, r0, lsl #30
   14974:			; <UNDEFINED> instruction: 0xfffff000
   14978:	ldr	r3, [r1]
   1497c:	ldr	r1, [r0]
   14980:	mov	r0, r3
   14984:	b	1e274 <__assert_fail@plt+0xc500>
   14988:	ldr	r1, [r1]
   1498c:	ldr	r0, [r0]
   14990:	b	1e274 <__assert_fail@plt+0xc500>
   14994:	push	{r4, r5, r6, r7, r8, lr}
   14998:	ldr	r3, [r1, #12]
   1499c:	ldr	r4, [r1, #8]
   149a0:	sub	r5, r3, r4
   149a4:	lsrs	r5, r5, #3
   149a8:	popeq	{r4, r5, r6, r7, r8, pc}
   149ac:	cmp	r3, r4
   149b0:	ldr	ip, [r1, #24]
   149b4:	ldrbeq	r2, [r1, #40]	; 0x28
   149b8:	ldr	lr, [r1, #16]
   149bc:	add	r3, r3, ip
   149c0:	orreq	r2, r2, #2
   149c4:	strbeq	r2, [r1, #40]	; 0x28
   149c8:	ldr	r2, [r1, #4]
   149cc:	bic	r3, r3, ip
   149d0:	sub	ip, r3, r2
   149d4:	sub	r2, lr, r2
   149d8:	cmp	ip, r2
   149dc:	ldr	r8, [pc, #112]	; 14a54 <__assert_fail@plt+0x2ce0>
   149e0:	str	r3, [r1, #12]
   149e4:	strhi	lr, [r1, #12]
   149e8:	mov	r3, r1
   149ec:	ldr	r2, [r1, #12]
   149f0:	ldr	r1, [r8]
   149f4:	str	r2, [r3, #8]
   149f8:	bl	11864 <fputs_unlocked@plt>
   149fc:	ldr	r7, [pc, #84]	; 14a58 <__assert_fail@plt+0x2ce4>
   14a00:	add	r5, r4, r5, lsl #3
   14a04:	mov	r6, #1
   14a08:	ldrd	r2, [r4], #8
   14a0c:	mov	r1, r7
   14a10:	mov	r0, r6
   14a14:	bl	11bf4 <__printf_chk@plt>
   14a18:	cmp	r5, r4
   14a1c:	bne	14a08 <__assert_fail@plt+0x2c94>
   14a20:	ldr	r0, [r8]
   14a24:	ldr	r3, [r0, #20]
   14a28:	ldr	r2, [r0, #24]
   14a2c:	cmp	r3, r2
   14a30:	bcs	14a48 <__assert_fail@plt+0x2cd4>
   14a34:	add	r1, r3, #1
   14a38:	mov	r2, #10
   14a3c:	str	r1, [r0, #20]
   14a40:	strb	r2, [r3]
   14a44:	pop	{r4, r5, r6, r7, r8, pc}
   14a48:	mov	r1, #10
   14a4c:	pop	{r4, r5, r6, r7, r8, lr}
   14a50:	b	11c48 <__overflow@plt>
   14a54:	andeq	r1, r4, r4, lsr #6
   14a58:	andeq	sp, r2, r0, lsl #16
   14a5c:	ldr	r3, [pc, #20]	; 14a78 <__assert_fail@plt+0x2d04>
   14a60:	ldr	r2, [r3]
   14a64:	cmp	r2, #0
   14a68:	ldreq	r2, [r3, #3092]	; 0xc14
   14a6c:	addeq	r2, r2, #1
   14a70:	streq	r2, [r3, #3092]	; 0xc14
   14a74:	bx	lr
   14a78:	andeq	r1, r4, r0, lsr r3
   14a7c:	cmp	r0, #0
   14a80:	beq	14aa8 <__assert_fail@plt+0x2d34>
   14a84:	and	r3, r1, #61440	; 0xf000
   14a88:	cmp	r3, #32768	; 0x8000
   14a8c:	bne	14ad0 <__assert_fail@plt+0x2d5c>
   14a90:	ldr	r3, [pc, #216]	; 14b70 <__assert_fail@plt+0x2dfc>
   14a94:	ldr	r3, [r3, #3096]	; 0xc18
   14a98:	cmp	r3, #3
   14a9c:	beq	14b14 <__assert_fail@plt+0x2da0>
   14aa0:	mov	r0, #0
   14aa4:	bx	lr
   14aa8:	cmp	r2, #5
   14aac:	beq	14b10 <__assert_fail@plt+0x2d9c>
   14ab0:	cmp	r2, #9
   14ab4:	cmpne	r2, #3
   14ab8:	moveq	r3, #1
   14abc:	movne	r3, #0
   14ac0:	cmp	r3, #0
   14ac4:	beq	14ae4 <__assert_fail@plt+0x2d70>
   14ac8:	mov	r0, #47	; 0x2f
   14acc:	bx	lr
   14ad0:	sub	r3, r3, #16384	; 0x4000
   14ad4:	clz	r3, r3
   14ad8:	lsr	r3, r3, #5
   14adc:	cmp	r3, #0
   14ae0:	bne	14ac8 <__assert_fail@plt+0x2d54>
   14ae4:	ldr	ip, [pc, #132]	; 14b70 <__assert_fail@plt+0x2dfc>
   14ae8:	ldr	ip, [ip, #3096]	; 0xc18
   14aec:	cmp	ip, #1
   14af0:	beq	14aa0 <__assert_fail@plt+0x2d2c>
   14af4:	cmp	r0, #0
   14af8:	beq	14b24 <__assert_fail@plt+0x2db0>
   14afc:	and	r1, r1, #61440	; 0xf000
   14b00:	cmp	r1, #40960	; 0xa000
   14b04:	bne	14b3c <__assert_fail@plt+0x2dc8>
   14b08:	mov	r0, #64	; 0x40
   14b0c:	bx	lr
   14b10:	bx	lr
   14b14:	tst	r1, #73	; 0x49
   14b18:	moveq	r0, #0
   14b1c:	movne	r0, #42	; 0x2a
   14b20:	bx	lr
   14b24:	cmp	r2, #6
   14b28:	beq	14b08 <__assert_fail@plt+0x2d94>
   14b2c:	cmp	r2, #1
   14b30:	bne	14b60 <__assert_fail@plt+0x2dec>
   14b34:	mov	r0, #124	; 0x7c
   14b38:	bx	lr
   14b3c:	cmp	r1, #4096	; 0x1000
   14b40:	beq	14b34 <__assert_fail@plt+0x2dc0>
   14b44:	sub	r0, r1, #49152	; 0xc000
   14b48:	clz	r0, r0
   14b4c:	lsr	r0, r0, #5
   14b50:	cmp	r0, #0
   14b54:	movne	r0, #61	; 0x3d
   14b58:	moveq	r0, #0
   14b5c:	bx	lr
   14b60:	sub	r0, r2, #7
   14b64:	clz	r0, r0
   14b68:	lsr	r0, r0, #5
   14b6c:	b	14b50 <__assert_fail@plt+0x2ddc>
   14b70:	andeq	r1, r4, r0, lsr r3
   14b74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b78:	mov	r7, r0
   14b7c:	ldr	r8, [pc, #304]	; 14cb4 <__assert_fail@plt+0x2f40>
   14b80:	sub	sp, sp, #148	; 0x94
   14b84:	ldrb	r9, [r8, #3100]	; 0xc1c
   14b88:	cmp	r9, #0
   14b8c:	beq	14bb0 <__assert_fail@plt+0x2e3c>
   14b90:	ldr	r3, [pc, #288]	; 14cb8 <__assert_fail@plt+0x2f44>
   14b94:	mov	r2, #1
   14b98:	ldr	r1, [r7]
   14b9c:	ldr	r3, [r3]
   14ba0:	ldr	r0, [r7, #4]
   14ba4:	bl	11960 <fwrite_unlocked@plt>
   14ba8:	add	sp, sp, #148	; 0x94
   14bac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bb0:	mov	r3, #1
   14bb4:	mov	r0, r3
   14bb8:	strb	r3, [r8, #3100]	; 0xc1c
   14bbc:	bl	11b88 <tcgetpgrp@plt>
   14bc0:	cmp	r0, #0
   14bc4:	blt	14c7c <__assert_fail@plt+0x2f08>
   14bc8:	add	r0, r8, #3104	; 0xc20
   14bcc:	bl	11c60 <sigemptyset@plt>
   14bd0:	ldr	r6, [pc, #228]	; 14cbc <__assert_fail@plt+0x2f48>
   14bd4:	add	r8, r8, #3104	; 0xc20
   14bd8:	add	sl, r6, #48	; 0x30
   14bdc:	mov	r5, r6
   14be0:	ldr	r4, [r5, #4]!
   14be4:	mov	r1, r9
   14be8:	add	r2, sp, #4
   14bec:	mov	r0, r4
   14bf0:	bl	11a14 <sigaction@plt>
   14bf4:	ldr	r3, [sp, #4]
   14bf8:	mov	r1, r4
   14bfc:	cmp	r3, #1
   14c00:	mov	r0, r8
   14c04:	beq	14c0c <__assert_fail@plt+0x2e98>
   14c08:	bl	11aec <sigaddset@plt>
   14c0c:	cmp	r5, sl
   14c10:	bne	14be0 <__assert_fail@plt+0x2e6c>
   14c14:	ldr	r9, [pc, #164]	; 14cc0 <__assert_fail@plt+0x2f4c>
   14c18:	ldr	fp, [pc, #164]	; 14cc4 <__assert_fail@plt+0x2f50>
   14c1c:	ldr	sl, [pc, #164]	; 14cc8 <__assert_fail@plt+0x2f54>
   14c20:	mov	r2, #128	; 0x80
   14c24:	mov	r1, r9
   14c28:	add	r0, sp, #8
   14c2c:	mov	r8, #0
   14c30:	bl	11930 <memcpy@plt>
   14c34:	mov	r3, #268435456	; 0x10000000
   14c38:	str	r3, [sp, #136]	; 0x88
   14c3c:	ldr	r4, [r6, #4]!
   14c40:	mov	r0, r9
   14c44:	mov	r1, r4
   14c48:	bl	1199c <sigismember@plt>
   14c4c:	mov	r2, r8
   14c50:	add	r1, sp, #4
   14c54:	cmp	r0, #0
   14c58:	mov	r0, r4
   14c5c:	beq	14c74 <__assert_fail@plt+0x2f00>
   14c60:	cmp	r4, #20
   14c64:	moveq	r4, fp
   14c68:	movne	r4, sl
   14c6c:	str	r4, [sp, #4]
   14c70:	bl	11a14 <sigaction@plt>
   14c74:	cmp	r6, r5
   14c78:	bne	14c3c <__assert_fail@plt+0x2ec8>
   14c7c:	ldr	r4, [pc, #72]	; 14ccc <__assert_fail@plt+0x2f58>
   14c80:	ldr	r3, [r4, #20]
   14c84:	cmp	r3, #0
   14c88:	beq	14c98 <__assert_fail@plt+0x2f24>
   14c8c:	add	r0, r4, #16
   14c90:	bl	14b74 <__assert_fail@plt+0x2e00>
   14c94:	b	14b90 <__assert_fail@plt+0x2e1c>
   14c98:	mov	r0, r4
   14c9c:	bl	14b74 <__assert_fail@plt+0x2e00>
   14ca0:	add	r0, r4, #24
   14ca4:	bl	14b74 <__assert_fail@plt+0x2e00>
   14ca8:	add	r0, r4, #8
   14cac:	bl	14b74 <__assert_fail@plt+0x2e00>
   14cb0:	b	14b90 <__assert_fail@plt+0x2e1c>
   14cb4:	andeq	r1, r4, r0, lsr r3
   14cb8:	andeq	r1, r4, r4, lsr #6
   14cbc:	andeq	ip, r2, r4, lsl #1
   14cc0:	andeq	r1, r4, r0, asr pc
   14cc4:	andeq	r4, r1, ip, asr sl
   14cc8:	andeq	r3, r1, r0, lsl #28
   14ccc:	ldrdeq	r1, [r4], -r0
   14cd0:	mov	ip, r0
   14cd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14cd8:	sub	sp, sp, #52	; 0x34
   14cdc:	mov	r6, r3
   14ce0:	ldr	r3, [ip]
   14ce4:	str	r0, [sp, #28]
   14ce8:	mov	r0, r2
   14cec:	str	r3, [sp, #20]
   14cf0:	mov	r5, r2
   14cf4:	mov	r4, r1
   14cf8:	bl	25d6c <_obstack_memory_used@@Base+0x17c0>
   14cfc:	ldr	r3, [pc, #1416]	; 1528c <__assert_fail@plt+0x3518>
   14d00:	ldrb	r3, [r3, #3232]	; 0xca0
   14d04:	cmp	r0, #2
   14d08:	movhi	r3, #0
   14d0c:	andls	r3, r3, #1
   14d10:	cmp	r3, #0
   14d14:	str	r3, [sp, #24]
   14d18:	beq	14fa4 <__assert_fail@plt+0x3230>
   14d1c:	cmp	r6, #0
   14d20:	bne	15284 <__assert_fail@plt+0x3510>
   14d24:	mov	r0, r4
   14d28:	bl	11b94 <strlen@plt>
   14d2c:	cmp	r0, #8192	; 0x2000
   14d30:	mov	fp, r0
   14d34:	add	r5, r0, #1
   14d38:	bcs	15214 <__assert_fail@plt+0x34a0>
   14d3c:	ldr	r0, [sp, #20]
   14d40:	mov	r2, r5
   14d44:	mov	r1, r4
   14d48:	bl	11930 <memcpy@plt>
   14d4c:	mov	r3, #0
   14d50:	str	r3, [sp, #24]
   14d54:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   14d58:	cmp	r0, #1
   14d5c:	bls	151cc <__assert_fail@plt+0x3458>
   14d60:	ldr	r3, [sp, #20]
   14d64:	add	sl, r3, fp
   14d68:	cmp	sl, r3
   14d6c:	mov	fp, #0
   14d70:	bls	1520c <__assert_fail@plt+0x3498>
   14d74:	mov	r6, r3
   14d78:	mov	r4, r3
   14d7c:	mov	r3, fp
   14d80:	mov	fp, sl
   14d84:	mov	sl, r3
   14d88:	ldrb	r3, [r4]
   14d8c:	cmp	r3, #63	; 0x3f
   14d90:	bhi	15128 <__assert_fail@plt+0x33b4>
   14d94:	cmp	r3, #37	; 0x25
   14d98:	bcs	1510c <__assert_fail@plt+0x3398>
   14d9c:	sub	r2, r3, #32
   14da0:	cmp	r2, #3
   14da4:	bls	1510c <__assert_fail@plt+0x3398>
   14da8:	mov	r3, #0
   14dac:	str	r3, [sp, #40]	; 0x28
   14db0:	str	r3, [sp, #44]	; 0x2c
   14db4:	b	14ee8 <__assert_fail@plt+0x3174>
   14db8:	bl	118d0 <wcwidth@plt>
   14dbc:	subs	r9, r0, #0
   14dc0:	blt	14f2c <__assert_fail@plt+0x31b8>
   14dc4:	add	r3, r4, #4
   14dc8:	add	r2, r6, #4
   14dcc:	cmp	r4, r2
   14dd0:	cmpcc	r6, r3
   14dd4:	movcs	r3, #1
   14dd8:	movcc	r3, #0
   14ddc:	cmp	r5, #11
   14de0:	movls	r3, #0
   14de4:	andhi	r3, r3, #1
   14de8:	cmp	r3, #0
   14dec:	beq	150ec <__assert_fail@plt+0x3378>
   14df0:	rsb	r3, r4, #0
   14df4:	ands	r3, r3, #3
   14df8:	beq	150dc <__assert_fail@plt+0x3368>
   14dfc:	ldrb	r2, [r4]
   14e00:	cmp	r3, #1
   14e04:	add	lr, r6, #1
   14e08:	strb	r2, [r6]
   14e0c:	add	r7, r4, #1
   14e10:	sub	r1, r5, #1
   14e14:	beq	14e48 <__assert_fail@plt+0x30d4>
   14e18:	ldrb	r2, [r4, #1]
   14e1c:	cmp	r3, #3
   14e20:	add	lr, r6, #2
   14e24:	strb	r2, [r6, #1]
   14e28:	add	r7, r4, #2
   14e2c:	sub	r1, r5, #2
   14e30:	bne	14e48 <__assert_fail@plt+0x30d4>
   14e34:	ldrb	r2, [r4, #2]
   14e38:	add	lr, r6, #3
   14e3c:	add	r7, r4, #3
   14e40:	sub	r1, r5, #3
   14e44:	strb	r2, [r6, #2]
   14e48:	sub	r2, r5, r3
   14e4c:	str	r2, [sp, #12]
   14e50:	sub	r2, r2, #4
   14e54:	add	r8, r4, r3
   14e58:	lsr	r2, r2, #2
   14e5c:	add	r2, r2, #1
   14e60:	add	r3, r6, r3
   14e64:	lsl	r0, r2, #2
   14e68:	mov	ip, #0
   14e6c:	str	fp, [sp, #16]
   14e70:	add	ip, ip, #1
   14e74:	ldr	fp, [r8], #4
   14e78:	cmp	r2, ip
   14e7c:	str	fp, [r3], #4
   14e80:	bhi	14e70 <__assert_fail@plt+0x30fc>
   14e84:	ldr	r3, [sp, #12]
   14e88:	sub	r1, r1, r0
   14e8c:	cmp	r0, r3
   14e90:	ldr	fp, [sp, #16]
   14e94:	add	r3, lr, r0
   14e98:	add	r0, r7, r0
   14e9c:	beq	150d4 <__assert_fail@plt+0x3360>
   14ea0:	ldrb	ip, [r7, r2, lsl #2]
   14ea4:	cmp	r1, #1
   14ea8:	strb	ip, [lr, r2, lsl #2]
   14eac:	beq	150d4 <__assert_fail@plt+0x3360>
   14eb0:	ldrb	r2, [r0, #1]
   14eb4:	cmp	r1, #2
   14eb8:	strb	r2, [r3, #1]
   14ebc:	beq	150d4 <__assert_fail@plt+0x3360>
   14ec0:	ldrb	r1, [r0, #2]
   14ec4:	add	r2, r4, r5
   14ec8:	strb	r1, [r3, #2]
   14ecc:	add	r0, sp, #40	; 0x28
   14ed0:	mov	r4, r2
   14ed4:	bl	11948 <mbsinit@plt>
   14ed8:	add	r6, r6, r5
   14edc:	add	sl, sl, r9
   14ee0:	cmp	r0, #0
   14ee4:	bne	14f50 <__assert_fail@plt+0x31dc>
   14ee8:	add	r3, sp, #40	; 0x28
   14eec:	sub	r2, fp, r4
   14ef0:	mov	r1, r4
   14ef4:	add	r0, sp, #36	; 0x24
   14ef8:	bl	21748 <__assert_fail@plt+0xf9d4>
   14efc:	cmn	r0, #1
   14f00:	mov	r5, r0
   14f04:	beq	15108 <__assert_fail@plt+0x3394>
   14f08:	cmn	r0, #2
   14f0c:	beq	15158 <__assert_fail@plt+0x33e4>
   14f10:	cmp	r5, #0
   14f14:	ldr	r0, [sp, #36]	; 0x24
   14f18:	bne	14db8 <__assert_fail@plt+0x3044>
   14f1c:	bl	118d0 <wcwidth@plt>
   14f20:	mov	r5, #1
   14f24:	subs	r9, r0, #0
   14f28:	bge	150ec <__assert_fail@plt+0x3378>
   14f2c:	mov	r3, #63	; 0x3f
   14f30:	strb	r3, [r6]
   14f34:	add	r0, sp, #40	; 0x28
   14f38:	bl	11948 <mbsinit@plt>
   14f3c:	add	r4, r4, r5
   14f40:	add	sl, sl, #1
   14f44:	add	r6, r6, #1
   14f48:	cmp	r0, #0
   14f4c:	beq	14ee8 <__assert_fail@plt+0x3174>
   14f50:	cmp	fp, r4
   14f54:	bhi	14d88 <__assert_fail@plt+0x3014>
   14f58:	ldr	r3, [sp, #20]
   14f5c:	mov	fp, sl
   14f60:	sub	r6, r6, r3
   14f64:	ldr	r3, [pc, #800]	; 1528c <__assert_fail@plt+0x3518>
   14f68:	ldrb	r3, [r3, #3233]	; 0xca1
   14f6c:	cmp	r3, #0
   14f70:	beq	150cc <__assert_fail@plt+0x3358>
   14f74:	ldr	r2, [pc, #784]	; 1528c <__assert_fail@plt+0x3518>
   14f78:	ldr	r1, [sp, #24]
   14f7c:	ldrb	r2, [r2, #3234]	; 0xca2
   14f80:	eor	r2, r2, #1
   14f84:	orrs	r2, r1, r2
   14f88:	bne	150cc <__assert_fail@plt+0x3358>
   14f8c:	ldr	r2, [sp, #88]	; 0x58
   14f90:	cmp	r2, #0
   14f94:	ldr	r2, [sp, #92]	; 0x5c
   14f98:	strb	r3, [r2]
   14f9c:	bne	15064 <__assert_fail@plt+0x32f0>
   14fa0:	b	1506c <__assert_fail@plt+0x32f8>
   14fa4:	cmp	r6, #0
   14fa8:	movne	r7, r3
   14fac:	beq	15084 <__assert_fail@plt+0x3310>
   14fb0:	str	r5, [sp]
   14fb4:	mvn	r3, #0
   14fb8:	mov	r2, r4
   14fbc:	mov	r1, #8192	; 0x2000
   14fc0:	ldr	r0, [sp, #20]
   14fc4:	bl	25e30 <_obstack_memory_used@@Base+0x1884>
   14fc8:	cmp	r0, #8192	; 0x2000
   14fcc:	mov	r6, r0
   14fd0:	bcs	1523c <__assert_fail@plt+0x34c8>
   14fd4:	ldr	r3, [sp, #20]
   14fd8:	ldrb	r2, [r4]
   14fdc:	ldrb	r3, [r3]
   14fe0:	cmp	r2, r3
   14fe4:	movne	r3, #1
   14fe8:	strne	r3, [sp, #24]
   14fec:	beq	15224 <__assert_fail@plt+0x34b0>
   14ff0:	cmp	r7, #0
   14ff4:	bne	1527c <__assert_fail@plt+0x3508>
   14ff8:	ldr	r3, [sp, #88]	; 0x58
   14ffc:	cmp	r3, #0
   15000:	beq	150a0 <__assert_fail@plt+0x332c>
   15004:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   15008:	cmp	r0, #1
   1500c:	bhi	15178 <__assert_fail@plt+0x3404>
   15010:	ldr	r5, [sp, #20]
   15014:	add	r4, r5, r6
   15018:	cmp	r4, r5
   1501c:	bls	15264 <__assert_fail@plt+0x34f0>
   15020:	bl	11b58 <__ctype_b_loc@plt>
   15024:	mov	fp, #0
   15028:	mov	r2, r5
   1502c:	ldr	r1, [r0]
   15030:	ldrb	r3, [r2], #1
   15034:	cmp	r4, r2
   15038:	lsl	r3, r3, #1
   1503c:	ldrh	r3, [r1, r3]
   15040:	lsl	r3, r3, #17
   15044:	add	fp, fp, r3, lsr #31
   15048:	bne	15030 <__assert_fail@plt+0x32bc>
   1504c:	ldr	r3, [pc, #568]	; 1528c <__assert_fail@plt+0x3518>
   15050:	ldrb	r3, [r3, #3233]	; 0xca1
   15054:	cmp	r3, #0
   15058:	bne	1519c <__assert_fail@plt+0x3428>
   1505c:	ldr	r2, [sp, #92]	; 0x5c
   15060:	strb	r3, [r2]
   15064:	ldr	r3, [sp, #88]	; 0x58
   15068:	str	fp, [r3]
   1506c:	ldr	r3, [sp, #28]
   15070:	ldr	r2, [sp, #20]
   15074:	mov	r0, r6
   15078:	str	r2, [r3]
   1507c:	add	sp, sp, #52	; 0x34
   15080:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15084:	mov	r0, r4
   15088:	bl	11b94 <strlen@plt>
   1508c:	ldr	r3, [sp, #88]	; 0x58
   15090:	str	r4, [sp, #20]
   15094:	cmp	r3, #0
   15098:	mov	r6, r0
   1509c:	bne	15004 <__assert_fail@plt+0x3290>
   150a0:	ldr	r3, [pc, #484]	; 1528c <__assert_fail@plt+0x3518>
   150a4:	ldrb	r3, [r3, #3233]	; 0xca1
   150a8:	cmp	r3, #0
   150ac:	beq	151bc <__assert_fail@plt+0x3448>
   150b0:	ldr	r3, [pc, #468]	; 1528c <__assert_fail@plt+0x3518>
   150b4:	ldr	r2, [sp, #24]
   150b8:	ldrb	r3, [r3, #3234]	; 0xca2
   150bc:	eor	r3, r3, #1
   150c0:	orrs	r3, r2, r3
   150c4:	ldrne	fp, [sp, #88]	; 0x58
   150c8:	beq	1526c <__assert_fail@plt+0x34f8>
   150cc:	mov	r3, #0
   150d0:	b	14f8c <__assert_fail@plt+0x3218>
   150d4:	add	r2, r4, r5
   150d8:	b	14ecc <__assert_fail@plt+0x3158>
   150dc:	mov	r1, r5
   150e0:	mov	r7, r4
   150e4:	mov	lr, r6
   150e8:	b	14e48 <__assert_fail@plt+0x30d4>
   150ec:	sub	r3, r6, #1
   150f0:	add	r2, r4, r5
   150f4:	ldrb	r1, [r4], #1
   150f8:	cmp	r4, r2
   150fc:	strb	r1, [r3, #1]!
   15100:	bne	150f4 <__assert_fail@plt+0x3380>
   15104:	b	14ecc <__assert_fail@plt+0x3158>
   15108:	mov	r3, #63	; 0x3f
   1510c:	strb	r3, [r6]
   15110:	add	r4, r4, #1
   15114:	add	sl, sl, #1
   15118:	add	r6, r6, #1
   1511c:	cmp	fp, r4
   15120:	bhi	14d88 <__assert_fail@plt+0x3014>
   15124:	b	14f58 <__assert_fail@plt+0x31e4>
   15128:	cmp	r3, #65	; 0x41
   1512c:	bcc	14da8 <__assert_fail@plt+0x3034>
   15130:	cmp	r3, #95	; 0x5f
   15134:	bls	1510c <__assert_fail@plt+0x3398>
   15138:	sub	r2, r3, #97	; 0x61
   1513c:	cmp	r2, #29
   15140:	bhi	14da8 <__assert_fail@plt+0x3034>
   15144:	strb	r3, [r6]
   15148:	add	r4, r4, #1
   1514c:	add	sl, sl, #1
   15150:	add	r6, r6, #1
   15154:	b	1511c <__assert_fail@plt+0x33a8>
   15158:	mov	r4, fp
   1515c:	mov	r3, #63	; 0x3f
   15160:	cmp	fp, r4
   15164:	strb	r3, [r6]
   15168:	add	sl, sl, #1
   1516c:	add	r6, r6, #1
   15170:	bhi	14d88 <__assert_fail@plt+0x3014>
   15174:	b	14f58 <__assert_fail@plt+0x31e4>
   15178:	mov	r2, #0
   1517c:	mov	r1, r6
   15180:	ldr	r0, [sp, #20]
   15184:	bl	21f8c <__assert_fail@plt+0x10218>
   15188:	ldr	r3, [pc, #252]	; 1528c <__assert_fail@plt+0x3518>
   1518c:	ldrb	r3, [r3, #3233]	; 0xca1
   15190:	cmp	r3, #0
   15194:	mov	fp, r0
   15198:	beq	1505c <__assert_fail@plt+0x32e8>
   1519c:	ldr	r3, [pc, #232]	; 1528c <__assert_fail@plt+0x3518>
   151a0:	ldr	r2, [sp, #24]
   151a4:	ldrb	r3, [r3, #3234]	; 0xca2
   151a8:	eor	r3, r3, #1
   151ac:	orrs	r3, r2, r3
   151b0:	moveq	r3, #1
   151b4:	beq	1505c <__assert_fail@plt+0x32e8>
   151b8:	b	150cc <__assert_fail@plt+0x3358>
   151bc:	ldr	r3, [sp, #92]	; 0x5c
   151c0:	ldrb	r2, [sp, #88]	; 0x58
   151c4:	strb	r2, [r3]
   151c8:	b	1506c <__assert_fail@plt+0x32f8>
   151cc:	ldr	r5, [sp, #20]
   151d0:	add	r4, r5, fp
   151d4:	cmp	r4, r5
   151d8:	bls	1520c <__assert_fail@plt+0x3498>
   151dc:	bl	11b58 <__ctype_b_loc@plt>
   151e0:	mov	r3, r5
   151e4:	mov	r1, #63	; 0x3f
   151e8:	ldrb	r2, [r3]
   151ec:	ldr	ip, [r0]
   151f0:	add	r3, r3, #1
   151f4:	lsl	r2, r2, #1
   151f8:	ldrh	r2, [ip, r2]
   151fc:	tst	r2, #16384	; 0x4000
   15200:	strbeq	r1, [r3, #-1]
   15204:	cmp	r4, r3
   15208:	bne	151e8 <__assert_fail@plt+0x3474>
   1520c:	mov	r6, fp
   15210:	b	14f64 <__assert_fail@plt+0x31f0>
   15214:	mov	r0, r5
   15218:	bl	29958 <_obstack_memory_used@@Base+0x53ac>
   1521c:	str	r0, [sp, #20]
   15220:	b	14d40 <__assert_fail@plt+0x2fcc>
   15224:	mov	r0, r4
   15228:	bl	11b94 <strlen@plt>
   1522c:	subs	r3, r6, r0
   15230:	movne	r3, #1
   15234:	str	r3, [sp, #24]
   15238:	b	14ff0 <__assert_fail@plt+0x327c>
   1523c:	add	r8, r0, #1
   15240:	mov	r0, r8
   15244:	bl	29958 <_obstack_memory_used@@Base+0x53ac>
   15248:	mov	r1, r8
   1524c:	str	r5, [sp]
   15250:	mvn	r3, #0
   15254:	mov	r2, r4
   15258:	str	r0, [sp, #20]
   1525c:	bl	25e30 <_obstack_memory_used@@Base+0x1884>
   15260:	b	14fd4 <__assert_fail@plt+0x3260>
   15264:	mov	fp, #0
   15268:	b	1504c <__assert_fail@plt+0x32d8>
   1526c:	ldr	r2, [sp, #92]	; 0x5c
   15270:	mov	r3, #1
   15274:	strb	r3, [r2]
   15278:	b	1506c <__assert_fail@plt+0x32f8>
   1527c:	mov	fp, r6
   15280:	b	14d54 <__assert_fail@plt+0x2fe0>
   15284:	mov	r7, #1
   15288:	b	14fb0 <__assert_fail@plt+0x323c>
   1528c:	andeq	r1, r4, r0, lsr r3
   15290:	push	{r4, r5, lr}
   15294:	sub	sp, sp, #8192	; 0x2000
   15298:	sub	sp, sp, #28
   1529c:	add	r4, sp, #24
   152a0:	mov	r5, r0
   152a4:	sub	ip, r4, #9
   152a8:	sub	r0, r4, #4
   152ac:	str	r0, [sp]
   152b0:	mov	r3, r2
   152b4:	str	ip, [sp, #4]
   152b8:	mov	r2, r1
   152bc:	sub	r0, r4, #8
   152c0:	mov	r1, r5
   152c4:	str	r4, [r4, #-8]
   152c8:	bl	14cd0 <__assert_fail@plt+0x2f5c>
   152cc:	ldr	r0, [r4, #-8]
   152d0:	cmp	r5, r0
   152d4:	cmpne	r0, r4
   152d8:	beq	152e0 <__assert_fail@plt+0x356c>
   152dc:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   152e0:	ldrb	r0, [r4, #-9]
   152e4:	ldr	r3, [r4, #-4]
   152e8:	add	r0, r0, r3
   152ec:	add	sp, sp, #8192	; 0x2000
   152f0:	add	sp, sp, #28
   152f4:	pop	{r4, r5, pc}
   152f8:	ldr	r3, [r1, #96]	; 0x60
   152fc:	push	{r4, lr}
   15300:	mov	ip, r1
   15304:	ldr	r4, [r0, #96]	; 0x60
   15308:	ldr	lr, [r0, #100]	; 0x64
   1530c:	cmp	r4, r3
   15310:	ldr	r1, [r1, #100]	; 0x64
   15314:	movge	r2, #0
   15318:	movlt	r2, #1
   1531c:	cmp	r4, r3
   15320:	rsble	r2, r2, #0
   15324:	rsbgt	r2, r2, #1
   15328:	cmp	lr, r1
   1532c:	movge	r3, #0
   15330:	movlt	r3, #1
   15334:	cmp	lr, r1
   15338:	rsble	r3, r3, #0
   1533c:	rsbgt	r3, r3, #1
   15340:	adds	r3, r3, r2, lsl #1
   15344:	beq	15350 <__assert_fail@plt+0x35dc>
   15348:	mov	r0, r3
   1534c:	pop	{r4, pc}
   15350:	ldr	r1, [r0]
   15354:	pop	{r4, lr}
   15358:	ldr	r0, [ip]
   1535c:	b	118a0 <strcmp@plt>
   15360:	ldr	r3, [r1, #104]	; 0x68
   15364:	push	{r4, lr}
   15368:	mov	ip, r1
   1536c:	ldr	r4, [r0, #104]	; 0x68
   15370:	ldr	lr, [r0, #108]	; 0x6c
   15374:	cmp	r4, r3
   15378:	ldr	r1, [r1, #108]	; 0x6c
   1537c:	movge	r2, #0
   15380:	movlt	r2, #1
   15384:	cmp	r4, r3
   15388:	rsble	r2, r2, #0
   1538c:	rsbgt	r2, r2, #1
   15390:	cmp	lr, r1
   15394:	movge	r3, #0
   15398:	movlt	r3, #1
   1539c:	cmp	lr, r1
   153a0:	rsble	r3, r3, #0
   153a4:	rsbgt	r3, r3, #1
   153a8:	adds	r3, r3, r2, lsl #1
   153ac:	beq	153b8 <__assert_fail@plt+0x3644>
   153b0:	mov	r0, r3
   153b4:	pop	{r4, pc}
   153b8:	ldr	r1, [r0]
   153bc:	pop	{r4, lr}
   153c0:	ldr	r0, [ip]
   153c4:	b	118a0 <strcmp@plt>
   153c8:	ldrd	r2, [r1, #64]	; 0x40
   153cc:	push	{r4, r5}
   153d0:	ldrd	r4, [r0, #64]	; 0x40
   153d4:	cmp	r2, r4
   153d8:	sbcs	ip, r3, r5
   153dc:	blt	153fc <__assert_fail@plt+0x3688>
   153e0:	cmp	r4, r2
   153e4:	sbcs	r3, r5, r3
   153e8:	blt	15408 <__assert_fail@plt+0x3694>
   153ec:	ldr	r1, [r1]
   153f0:	ldr	r0, [r0]
   153f4:	pop	{r4, r5}
   153f8:	b	118a0 <strcmp@plt>
   153fc:	mvn	r0, #0
   15400:	pop	{r4, r5}
   15404:	bx	lr
   15408:	mov	r0, #1
   1540c:	pop	{r4, r5}
   15410:	bx	lr
   15414:	ldrd	r2, [r0, #64]	; 0x40
   15418:	push	{r4, r5}
   1541c:	mov	ip, r1
   15420:	ldrd	r4, [r1, #64]	; 0x40
   15424:	cmp	r2, r4
   15428:	sbcs	r1, r3, r5
   1542c:	blt	1544c <__assert_fail@plt+0x36d8>
   15430:	cmp	r4, r2
   15434:	sbcs	r3, r5, r3
   15438:	blt	15458 <__assert_fail@plt+0x36e4>
   1543c:	ldr	r1, [r0]
   15440:	pop	{r4, r5}
   15444:	ldr	r0, [ip]
   15448:	b	118a0 <strcmp@plt>
   1544c:	mvn	r0, #0
   15450:	pop	{r4, r5}
   15454:	bx	lr
   15458:	mov	r0, #1
   1545c:	pop	{r4, r5}
   15460:	bx	lr
   15464:	push	{r4, r5, r6, lr}
   15468:	mov	r6, r0
   1546c:	ldr	r5, [r1]
   15470:	mov	r1, #46	; 0x2e
   15474:	mov	r0, r5
   15478:	bl	11c78 <strrchr@plt>
   1547c:	ldr	r6, [r6]
   15480:	mov	r1, #46	; 0x2e
   15484:	mov	r4, r0
   15488:	mov	r0, r6
   1548c:	bl	11c78 <strrchr@plt>
   15490:	cmp	r4, #0
   15494:	beq	154c8 <__assert_fail@plt+0x3754>
   15498:	ldr	r3, [pc, #56]	; 154d8 <__assert_fail@plt+0x3764>
   1549c:	cmp	r0, #0
   154a0:	moveq	r0, r3
   154a4:	mov	r1, r0
   154a8:	mov	r0, r4
   154ac:	bl	118a0 <strcmp@plt>
   154b0:	cmp	r0, #0
   154b4:	popne	{r4, r5, r6, pc}
   154b8:	mov	r1, r6
   154bc:	mov	r0, r5
   154c0:	pop	{r4, r5, r6, lr}
   154c4:	b	118a0 <strcmp@plt>
   154c8:	cmp	r0, #0
   154cc:	ldrne	r4, [pc, #4]	; 154d8 <__assert_fail@plt+0x3764>
   154d0:	bne	154a4 <__assert_fail@plt+0x3730>
   154d4:	b	154b8 <__assert_fail@plt+0x3744>
   154d8:	andeq	r0, r3, r4, lsr #3
   154dc:	ldr	r3, [r1, #88]	; 0x58
   154e0:	push	{r4, lr}
   154e4:	mov	ip, r1
   154e8:	ldr	r4, [r0, #88]	; 0x58
   154ec:	ldr	lr, [r0, #92]	; 0x5c
   154f0:	cmp	r4, r3
   154f4:	ldr	r1, [r1, #92]	; 0x5c
   154f8:	movge	r2, #0
   154fc:	movlt	r2, #1
   15500:	cmp	r4, r3
   15504:	rsble	r2, r2, #0
   15508:	rsbgt	r2, r2, #1
   1550c:	cmp	lr, r1
   15510:	movge	r3, #0
   15514:	movlt	r3, #1
   15518:	cmp	lr, r1
   1551c:	rsble	r3, r3, #0
   15520:	rsbgt	r3, r3, #1
   15524:	adds	r3, r3, r2, lsl #1
   15528:	beq	15534 <__assert_fail@plt+0x37c0>
   1552c:	mov	r0, r3
   15530:	pop	{r4, pc}
   15534:	ldr	r1, [r0]
   15538:	pop	{r4, lr}
   1553c:	ldr	r0, [ip]
   15540:	b	118a0 <strcmp@plt>
   15544:	ldr	r3, [r1, #96]	; 0x60
   15548:	push	{r4, lr}
   1554c:	mov	ip, r1
   15550:	ldr	r4, [r0, #96]	; 0x60
   15554:	ldr	lr, [r0, #100]	; 0x64
   15558:	cmp	r4, r3
   1555c:	ldr	r1, [r1, #100]	; 0x64
   15560:	movge	r2, #0
   15564:	movlt	r2, #1
   15568:	cmp	r4, r3
   1556c:	rsble	r2, r2, #0
   15570:	rsbgt	r2, r2, #1
   15574:	cmp	lr, r1
   15578:	movge	r3, #0
   1557c:	movlt	r3, #1
   15580:	cmp	lr, r1
   15584:	rsble	r3, r3, #0
   15588:	rsbgt	r3, r3, #1
   1558c:	adds	r3, r3, r2, lsl #1
   15590:	beq	1559c <__assert_fail@plt+0x3828>
   15594:	mov	r0, r3
   15598:	pop	{r4, pc}
   1559c:	ldr	r1, [r0]
   155a0:	pop	{r4, lr}
   155a4:	ldr	r0, [ip]
   155a8:	b	118a0 <strcmp@plt>
   155ac:	ldr	r3, [r0, #96]	; 0x60
   155b0:	push	{r4, lr}
   155b4:	ldr	r4, [r1, #96]	; 0x60
   155b8:	ldr	lr, [r1, #100]	; 0x64
   155bc:	cmp	r4, r3
   155c0:	ldr	ip, [r0, #100]	; 0x64
   155c4:	movge	r2, #0
   155c8:	movlt	r2, #1
   155cc:	cmp	r4, r3
   155d0:	rsble	r2, r2, #0
   155d4:	rsbgt	r2, r2, #1
   155d8:	cmp	lr, ip
   155dc:	movge	r3, #0
   155e0:	movlt	r3, #1
   155e4:	cmp	lr, ip
   155e8:	rsble	r3, r3, #0
   155ec:	rsbgt	r3, r3, #1
   155f0:	adds	r3, r3, r2, lsl #1
   155f4:	beq	15600 <__assert_fail@plt+0x388c>
   155f8:	mov	r0, r3
   155fc:	pop	{r4, pc}
   15600:	ldr	r1, [r1]
   15604:	ldr	r0, [r0]
   15608:	pop	{r4, lr}
   1560c:	b	118a0 <strcmp@plt>
   15610:	ldr	r3, [r0, #104]	; 0x68
   15614:	push	{r4, lr}
   15618:	ldr	r4, [r1, #104]	; 0x68
   1561c:	ldr	lr, [r1, #108]	; 0x6c
   15620:	cmp	r4, r3
   15624:	ldr	ip, [r0, #108]	; 0x6c
   15628:	movge	r2, #0
   1562c:	movlt	r2, #1
   15630:	cmp	r4, r3
   15634:	rsble	r2, r2, #0
   15638:	rsbgt	r2, r2, #1
   1563c:	cmp	lr, ip
   15640:	movge	r3, #0
   15644:	movlt	r3, #1
   15648:	cmp	lr, ip
   1564c:	rsble	r3, r3, #0
   15650:	rsbgt	r3, r3, #1
   15654:	adds	r3, r3, r2, lsl #1
   15658:	beq	15664 <__assert_fail@plt+0x38f0>
   1565c:	mov	r0, r3
   15660:	pop	{r4, pc}
   15664:	ldr	r1, [r1]
   15668:	ldr	r0, [r0]
   1566c:	pop	{r4, lr}
   15670:	b	118a0 <strcmp@plt>
   15674:	ldr	r3, [r0, #88]	; 0x58
   15678:	push	{r4, lr}
   1567c:	ldr	r4, [r1, #88]	; 0x58
   15680:	ldr	lr, [r1, #92]	; 0x5c
   15684:	cmp	r4, r3
   15688:	ldr	ip, [r0, #92]	; 0x5c
   1568c:	movge	r2, #0
   15690:	movlt	r2, #1
   15694:	cmp	r4, r3
   15698:	rsble	r2, r2, #0
   1569c:	rsbgt	r2, r2, #1
   156a0:	cmp	lr, ip
   156a4:	movge	r3, #0
   156a8:	movlt	r3, #1
   156ac:	cmp	lr, ip
   156b0:	rsble	r3, r3, #0
   156b4:	rsbgt	r3, r3, #1
   156b8:	adds	r3, r3, r2, lsl #1
   156bc:	beq	156c8 <__assert_fail@plt+0x3954>
   156c0:	mov	r0, r3
   156c4:	pop	{r4, pc}
   156c8:	ldr	r1, [r1]
   156cc:	ldr	r0, [r0]
   156d0:	pop	{r4, lr}
   156d4:	b	118a0 <strcmp@plt>
   156d8:	ldr	r3, [r0, #96]	; 0x60
   156dc:	push	{r4, lr}
   156e0:	ldr	r4, [r1, #96]	; 0x60
   156e4:	ldr	lr, [r1, #100]	; 0x64
   156e8:	cmp	r4, r3
   156ec:	ldr	ip, [r0, #100]	; 0x64
   156f0:	movge	r2, #0
   156f4:	movlt	r2, #1
   156f8:	cmp	r4, r3
   156fc:	rsble	r2, r2, #0
   15700:	rsbgt	r2, r2, #1
   15704:	cmp	lr, ip
   15708:	movge	r3, #0
   1570c:	movlt	r3, #1
   15710:	cmp	lr, ip
   15714:	rsble	r3, r3, #0
   15718:	rsbgt	r3, r3, #1
   1571c:	adds	r3, r3, r2, lsl #1
   15720:	beq	1572c <__assert_fail@plt+0x39b8>
   15724:	mov	r0, r3
   15728:	pop	{r4, pc}
   1572c:	ldr	r1, [r1]
   15730:	ldr	r0, [r0]
   15734:	pop	{r4, lr}
   15738:	b	118a0 <strcmp@plt>
   1573c:	push	{r4, r5, r6, lr}
   15740:	ldr	r4, [r0]
   15744:	ldr	r5, [r1]
   15748:	bl	11bb8 <__errno_location@plt>
   1574c:	mov	r2, #0
   15750:	mov	r1, r5
   15754:	mov	r3, r0
   15758:	mov	r0, r4
   1575c:	str	r2, [r3]
   15760:	pop	{r4, r5, r6, lr}
   15764:	b	11abc <strcoll@plt>
   15768:	push	{r4, r5, r6, lr}
   1576c:	ldr	r4, [r1]
   15770:	ldr	r5, [r0]
   15774:	bl	11bb8 <__errno_location@plt>
   15778:	mov	r2, #0
   1577c:	mov	r1, r5
   15780:	mov	r3, r0
   15784:	mov	r0, r4
   15788:	str	r2, [r3]
   1578c:	pop	{r4, r5, r6, lr}
   15790:	b	11abc <strcoll@plt>
   15794:	ldr	r3, [r1, #96]	; 0x60
   15798:	push	{r4, r5, r6, lr}
   1579c:	ldr	lr, [r0, #96]	; 0x60
   157a0:	ldr	ip, [r0, #100]	; 0x64
   157a4:	cmp	lr, r3
   157a8:	ldr	r2, [r1, #100]	; 0x64
   157ac:	movge	r4, #0
   157b0:	movlt	r4, #1
   157b4:	cmp	lr, r3
   157b8:	rsble	r4, r4, #0
   157bc:	rsbgt	r4, r4, #1
   157c0:	cmp	ip, r2
   157c4:	movge	r3, #0
   157c8:	movlt	r3, #1
   157cc:	cmp	ip, r2
   157d0:	rsble	r3, r3, #0
   157d4:	rsbgt	r3, r3, #1
   157d8:	adds	r4, r3, r4, lsl #1
   157dc:	beq	157e8 <__assert_fail@plt+0x3a74>
   157e0:	mov	r0, r4
   157e4:	pop	{r4, r5, r6, pc}
   157e8:	ldr	r5, [r1]
   157ec:	ldr	r6, [r0]
   157f0:	bl	11bb8 <__errno_location@plt>
   157f4:	mov	r1, r6
   157f8:	str	r4, [r0]
   157fc:	mov	r0, r5
   15800:	pop	{r4, r5, r6, lr}
   15804:	b	11abc <strcoll@plt>
   15808:	ldr	r3, [r1, #104]	; 0x68
   1580c:	push	{r4, r5, r6, lr}
   15810:	ldr	lr, [r0, #104]	; 0x68
   15814:	ldr	ip, [r0, #108]	; 0x6c
   15818:	cmp	lr, r3
   1581c:	ldr	r2, [r1, #108]	; 0x6c
   15820:	movge	r4, #0
   15824:	movlt	r4, #1
   15828:	cmp	lr, r3
   1582c:	rsble	r4, r4, #0
   15830:	rsbgt	r4, r4, #1
   15834:	cmp	ip, r2
   15838:	movge	r3, #0
   1583c:	movlt	r3, #1
   15840:	cmp	ip, r2
   15844:	rsble	r3, r3, #0
   15848:	rsbgt	r3, r3, #1
   1584c:	adds	r4, r3, r4, lsl #1
   15850:	beq	1585c <__assert_fail@plt+0x3ae8>
   15854:	mov	r0, r4
   15858:	pop	{r4, r5, r6, pc}
   1585c:	ldr	r5, [r1]
   15860:	ldr	r6, [r0]
   15864:	bl	11bb8 <__errno_location@plt>
   15868:	mov	r1, r6
   1586c:	str	r4, [r0]
   15870:	mov	r0, r5
   15874:	pop	{r4, r5, r6, lr}
   15878:	b	11abc <strcoll@plt>
   1587c:	ldr	r3, [r0, #88]	; 0x58
   15880:	push	{r4, r5, r6, lr}
   15884:	ldr	lr, [r1, #88]	; 0x58
   15888:	ldr	ip, [r1, #92]	; 0x5c
   1588c:	cmp	lr, r3
   15890:	ldr	r2, [r0, #92]	; 0x5c
   15894:	movge	r4, #0
   15898:	movlt	r4, #1
   1589c:	cmp	lr, r3
   158a0:	rsble	r4, r4, #0
   158a4:	rsbgt	r4, r4, #1
   158a8:	cmp	ip, r2
   158ac:	movge	r3, #0
   158b0:	movlt	r3, #1
   158b4:	cmp	ip, r2
   158b8:	rsble	r3, r3, #0
   158bc:	rsbgt	r3, r3, #1
   158c0:	adds	r4, r3, r4, lsl #1
   158c4:	beq	158d0 <__assert_fail@plt+0x3b5c>
   158c8:	mov	r0, r4
   158cc:	pop	{r4, r5, r6, pc}
   158d0:	ldr	r5, [r0]
   158d4:	ldr	r6, [r1]
   158d8:	bl	11bb8 <__errno_location@plt>
   158dc:	mov	r1, r6
   158e0:	str	r4, [r0]
   158e4:	mov	r0, r5
   158e8:	pop	{r4, r5, r6, lr}
   158ec:	b	11abc <strcoll@plt>
   158f0:	ldr	r3, [r1, #96]	; 0x60
   158f4:	push	{r4, r5, r6, lr}
   158f8:	ldr	lr, [r0, #96]	; 0x60
   158fc:	ldr	ip, [r0, #100]	; 0x64
   15900:	cmp	lr, r3
   15904:	ldr	r2, [r1, #100]	; 0x64
   15908:	movge	r4, #0
   1590c:	movlt	r4, #1
   15910:	cmp	lr, r3
   15914:	rsble	r4, r4, #0
   15918:	rsbgt	r4, r4, #1
   1591c:	cmp	ip, r2
   15920:	movge	r3, #0
   15924:	movlt	r3, #1
   15928:	cmp	ip, r2
   1592c:	rsble	r3, r3, #0
   15930:	rsbgt	r3, r3, #1
   15934:	adds	r4, r3, r4, lsl #1
   15938:	beq	15944 <__assert_fail@plt+0x3bd0>
   1593c:	mov	r0, r4
   15940:	pop	{r4, r5, r6, pc}
   15944:	ldr	r5, [r1]
   15948:	ldr	r6, [r0]
   1594c:	bl	11bb8 <__errno_location@plt>
   15950:	mov	r1, r6
   15954:	str	r4, [r0]
   15958:	mov	r0, r5
   1595c:	pop	{r4, r5, r6, lr}
   15960:	b	11abc <strcoll@plt>
   15964:	ldr	r3, [r0, #104]	; 0x68
   15968:	push	{r4, r5, r6, lr}
   1596c:	ldr	lr, [r1, #104]	; 0x68
   15970:	ldr	ip, [r1, #108]	; 0x6c
   15974:	cmp	lr, r3
   15978:	ldr	r2, [r0, #108]	; 0x6c
   1597c:	movge	r4, #0
   15980:	movlt	r4, #1
   15984:	cmp	lr, r3
   15988:	rsble	r4, r4, #0
   1598c:	rsbgt	r4, r4, #1
   15990:	cmp	ip, r2
   15994:	movge	r3, #0
   15998:	movlt	r3, #1
   1599c:	cmp	ip, r2
   159a0:	rsble	r3, r3, #0
   159a4:	rsbgt	r3, r3, #1
   159a8:	adds	r4, r3, r4, lsl #1
   159ac:	beq	159b8 <__assert_fail@plt+0x3c44>
   159b0:	mov	r0, r4
   159b4:	pop	{r4, r5, r6, pc}
   159b8:	ldr	r5, [r0]
   159bc:	ldr	r6, [r1]
   159c0:	bl	11bb8 <__errno_location@plt>
   159c4:	mov	r1, r6
   159c8:	str	r4, [r0]
   159cc:	mov	r0, r5
   159d0:	pop	{r4, r5, r6, lr}
   159d4:	b	11abc <strcoll@plt>
   159d8:	ldr	r3, [r0, #96]	; 0x60
   159dc:	push	{r4, r5, r6, lr}
   159e0:	ldr	lr, [r1, #96]	; 0x60
   159e4:	ldr	ip, [r1, #100]	; 0x64
   159e8:	cmp	lr, r3
   159ec:	ldr	r2, [r0, #100]	; 0x64
   159f0:	movge	r4, #0
   159f4:	movlt	r4, #1
   159f8:	cmp	lr, r3
   159fc:	rsble	r4, r4, #0
   15a00:	rsbgt	r4, r4, #1
   15a04:	cmp	ip, r2
   15a08:	movge	r3, #0
   15a0c:	movlt	r3, #1
   15a10:	cmp	ip, r2
   15a14:	rsble	r3, r3, #0
   15a18:	rsbgt	r3, r3, #1
   15a1c:	adds	r4, r3, r4, lsl #1
   15a20:	beq	15a2c <__assert_fail@plt+0x3cb8>
   15a24:	mov	r0, r4
   15a28:	pop	{r4, r5, r6, pc}
   15a2c:	ldr	r5, [r0]
   15a30:	ldr	r6, [r1]
   15a34:	bl	11bb8 <__errno_location@plt>
   15a38:	mov	r1, r6
   15a3c:	str	r4, [r0]
   15a40:	mov	r0, r5
   15a44:	pop	{r4, r5, r6, lr}
   15a48:	b	11abc <strcoll@plt>
   15a4c:	ldr	r3, [r0, #96]	; 0x60
   15a50:	push	{r4, r5, r6, lr}
   15a54:	ldr	lr, [r1, #96]	; 0x60
   15a58:	ldr	ip, [r1, #100]	; 0x64
   15a5c:	cmp	lr, r3
   15a60:	ldr	r2, [r0, #100]	; 0x64
   15a64:	movge	r4, #0
   15a68:	movlt	r4, #1
   15a6c:	cmp	lr, r3
   15a70:	rsble	r4, r4, #0
   15a74:	rsbgt	r4, r4, #1
   15a78:	cmp	ip, r2
   15a7c:	movge	r3, #0
   15a80:	movlt	r3, #1
   15a84:	cmp	ip, r2
   15a88:	rsble	r3, r3, #0
   15a8c:	rsbgt	r3, r3, #1
   15a90:	adds	r4, r3, r4, lsl #1
   15a94:	beq	15aa0 <__assert_fail@plt+0x3d2c>
   15a98:	mov	r0, r4
   15a9c:	pop	{r4, r5, r6, pc}
   15aa0:	ldr	r5, [r0]
   15aa4:	ldr	r6, [r1]
   15aa8:	bl	11bb8 <__errno_location@plt>
   15aac:	mov	r1, r6
   15ab0:	str	r4, [r0]
   15ab4:	mov	r0, r5
   15ab8:	pop	{r4, r5, r6, lr}
   15abc:	b	11abc <strcoll@plt>
   15ac0:	ldr	r3, [r1, #88]	; 0x58
   15ac4:	push	{r4, r5, r6, lr}
   15ac8:	ldr	lr, [r0, #88]	; 0x58
   15acc:	ldr	ip, [r0, #92]	; 0x5c
   15ad0:	cmp	lr, r3
   15ad4:	ldr	r2, [r1, #92]	; 0x5c
   15ad8:	movge	r4, #0
   15adc:	movlt	r4, #1
   15ae0:	cmp	lr, r3
   15ae4:	rsble	r4, r4, #0
   15ae8:	rsbgt	r4, r4, #1
   15aec:	cmp	ip, r2
   15af0:	movge	r3, #0
   15af4:	movlt	r3, #1
   15af8:	cmp	ip, r2
   15afc:	rsble	r3, r3, #0
   15b00:	rsbgt	r3, r3, #1
   15b04:	adds	r4, r3, r4, lsl #1
   15b08:	beq	15b14 <__assert_fail@plt+0x3da0>
   15b0c:	mov	r0, r4
   15b10:	pop	{r4, r5, r6, pc}
   15b14:	ldr	r5, [r1]
   15b18:	ldr	r6, [r0]
   15b1c:	bl	11bb8 <__errno_location@plt>
   15b20:	mov	r1, r6
   15b24:	str	r4, [r0]
   15b28:	mov	r0, r5
   15b2c:	pop	{r4, r5, r6, lr}
   15b30:	b	11abc <strcoll@plt>
   15b34:	push	{r4, r5, r6, lr}
   15b38:	mov	r6, r0
   15b3c:	ldr	r4, [r0, #148]	; 0x94
   15b40:	mov	r5, r1
   15b44:	cmp	r4, #0
   15b48:	beq	15b9c <__assert_fail@plt+0x3e28>
   15b4c:	ldr	r0, [r5, #148]	; 0x94
   15b50:	cmp	r0, #0
   15b54:	beq	15b84 <__assert_fail@plt+0x3e10>
   15b58:	subs	r4, r4, r0
   15b5c:	beq	15b68 <__assert_fail@plt+0x3df4>
   15b60:	mov	r0, r4
   15b64:	pop	{r4, r5, r6, pc}
   15b68:	bl	11bb8 <__errno_location@plt>
   15b6c:	ldr	r3, [r6]
   15b70:	ldr	r1, [r5]
   15b74:	str	r4, [r0]
   15b78:	mov	r0, r3
   15b7c:	pop	{r4, r5, r6, lr}
   15b80:	b	11abc <strcoll@plt>
   15b84:	ldr	r3, [pc, #44]	; 15bb8 <__assert_fail@plt+0x3e44>
   15b88:	ldr	r2, [r5, #144]	; 0x90
   15b8c:	ldr	r0, [r5]
   15b90:	ldr	r1, [r3, #3236]	; 0xca4
   15b94:	bl	15290 <__assert_fail@plt+0x351c>
   15b98:	b	15b58 <__assert_fail@plt+0x3de4>
   15b9c:	ldr	r3, [pc, #20]	; 15bb8 <__assert_fail@plt+0x3e44>
   15ba0:	ldr	r2, [r0, #144]	; 0x90
   15ba4:	ldr	r0, [r0]
   15ba8:	ldr	r1, [r3, #3236]	; 0xca4
   15bac:	bl	15290 <__assert_fail@plt+0x351c>
   15bb0:	mov	r4, r0
   15bb4:	b	15b4c <__assert_fail@plt+0x3dd8>
   15bb8:	andeq	r1, r4, r0, lsr r3
   15bbc:	push	{r4, r5, r6, lr}
   15bc0:	mov	r6, r1
   15bc4:	ldr	r4, [r1, #148]	; 0x94
   15bc8:	mov	r5, r0
   15bcc:	cmp	r4, #0
   15bd0:	beq	15c24 <__assert_fail@plt+0x3eb0>
   15bd4:	ldr	r0, [r5, #148]	; 0x94
   15bd8:	cmp	r0, #0
   15bdc:	beq	15c0c <__assert_fail@plt+0x3e98>
   15be0:	subs	r4, r4, r0
   15be4:	beq	15bf0 <__assert_fail@plt+0x3e7c>
   15be8:	mov	r0, r4
   15bec:	pop	{r4, r5, r6, pc}
   15bf0:	bl	11bb8 <__errno_location@plt>
   15bf4:	ldr	r3, [r6]
   15bf8:	ldr	r1, [r5]
   15bfc:	str	r4, [r0]
   15c00:	mov	r0, r3
   15c04:	pop	{r4, r5, r6, lr}
   15c08:	b	11abc <strcoll@plt>
   15c0c:	ldr	r3, [pc, #44]	; 15c40 <__assert_fail@plt+0x3ecc>
   15c10:	ldr	r2, [r5, #144]	; 0x90
   15c14:	ldr	r0, [r5]
   15c18:	ldr	r1, [r3, #3236]	; 0xca4
   15c1c:	bl	15290 <__assert_fail@plt+0x351c>
   15c20:	b	15be0 <__assert_fail@plt+0x3e6c>
   15c24:	ldr	r3, [pc, #20]	; 15c40 <__assert_fail@plt+0x3ecc>
   15c28:	ldr	r2, [r1, #144]	; 0x90
   15c2c:	ldr	r0, [r1]
   15c30:	ldr	r1, [r3, #3236]	; 0xca4
   15c34:	bl	15290 <__assert_fail@plt+0x351c>
   15c38:	mov	r4, r0
   15c3c:	b	15bd4 <__assert_fail@plt+0x3e60>
   15c40:	andeq	r1, r4, r0, lsr r3
   15c44:	push	{r4, r5, r6, lr}
   15c48:	mov	r5, r1
   15c4c:	ldr	r4, [r1, #148]	; 0x94
   15c50:	mov	r6, r0
   15c54:	cmp	r4, #0
   15c58:	beq	15ca0 <__assert_fail@plt+0x3f2c>
   15c5c:	ldr	r0, [r6, #148]	; 0x94
   15c60:	cmp	r0, #0
   15c64:	beq	15c80 <__assert_fail@plt+0x3f0c>
   15c68:	subs	r0, r4, r0
   15c6c:	popne	{r4, r5, r6, pc}
   15c70:	ldr	r1, [r6]
   15c74:	ldr	r0, [r5]
   15c78:	pop	{r4, r5, r6, lr}
   15c7c:	b	118a0 <strcmp@plt>
   15c80:	ldr	r3, [pc, #52]	; 15cbc <__assert_fail@plt+0x3f48>
   15c84:	ldr	r2, [r6, #144]	; 0x90
   15c88:	ldr	r0, [r6]
   15c8c:	ldr	r1, [r3, #3236]	; 0xca4
   15c90:	bl	15290 <__assert_fail@plt+0x351c>
   15c94:	subs	r0, r4, r0
   15c98:	popne	{r4, r5, r6, pc}
   15c9c:	b	15c70 <__assert_fail@plt+0x3efc>
   15ca0:	ldr	r3, [pc, #20]	; 15cbc <__assert_fail@plt+0x3f48>
   15ca4:	ldr	r2, [r1, #144]	; 0x90
   15ca8:	ldr	r0, [r1]
   15cac:	ldr	r1, [r3, #3236]	; 0xca4
   15cb0:	bl	15290 <__assert_fail@plt+0x351c>
   15cb4:	mov	r4, r0
   15cb8:	b	15c5c <__assert_fail@plt+0x3ee8>
   15cbc:	andeq	r1, r4, r0, lsr r3
   15cc0:	push	{r4, r5, r6, lr}
   15cc4:	mov	r5, r0
   15cc8:	ldr	r4, [r0, #148]	; 0x94
   15ccc:	mov	r6, r1
   15cd0:	cmp	r4, #0
   15cd4:	beq	15d1c <__assert_fail@plt+0x3fa8>
   15cd8:	ldr	r0, [r6, #148]	; 0x94
   15cdc:	cmp	r0, #0
   15ce0:	beq	15cfc <__assert_fail@plt+0x3f88>
   15ce4:	subs	r0, r4, r0
   15ce8:	popne	{r4, r5, r6, pc}
   15cec:	ldr	r1, [r6]
   15cf0:	ldr	r0, [r5]
   15cf4:	pop	{r4, r5, r6, lr}
   15cf8:	b	118a0 <strcmp@plt>
   15cfc:	ldr	r3, [pc, #52]	; 15d38 <__assert_fail@plt+0x3fc4>
   15d00:	ldr	r2, [r6, #144]	; 0x90
   15d04:	ldr	r0, [r6]
   15d08:	ldr	r1, [r3, #3236]	; 0xca4
   15d0c:	bl	15290 <__assert_fail@plt+0x351c>
   15d10:	subs	r0, r4, r0
   15d14:	popne	{r4, r5, r6, pc}
   15d18:	b	15cec <__assert_fail@plt+0x3f78>
   15d1c:	ldr	r3, [pc, #20]	; 15d38 <__assert_fail@plt+0x3fc4>
   15d20:	ldr	r2, [r0, #144]	; 0x90
   15d24:	ldr	r0, [r0]
   15d28:	ldr	r1, [r3, #3236]	; 0xca4
   15d2c:	bl	15290 <__assert_fail@plt+0x351c>
   15d30:	mov	r4, r0
   15d34:	b	15cd8 <__assert_fail@plt+0x3f64>
   15d38:	andeq	r1, r4, r0, lsr r3
   15d3c:	ldrd	r2, [r0, #64]	; 0x40
   15d40:	push	{r4, r5, r6, lr}
   15d44:	ldrd	r4, [r1, #64]	; 0x40
   15d48:	cmp	r2, r4
   15d4c:	sbcs	ip, r3, r5
   15d50:	blt	15d88 <__assert_fail@plt+0x4014>
   15d54:	cmp	r4, r2
   15d58:	sbcs	r3, r5, r3
   15d5c:	blt	15d90 <__assert_fail@plt+0x401c>
   15d60:	ldr	r4, [r1]
   15d64:	ldr	r5, [r0]
   15d68:	bl	11bb8 <__errno_location@plt>
   15d6c:	mov	r2, #0
   15d70:	mov	r1, r5
   15d74:	mov	r3, r0
   15d78:	mov	r0, r4
   15d7c:	str	r2, [r3]
   15d80:	pop	{r4, r5, r6, lr}
   15d84:	b	11abc <strcoll@plt>
   15d88:	mvn	r0, #0
   15d8c:	pop	{r4, r5, r6, pc}
   15d90:	mov	r0, #1
   15d94:	pop	{r4, r5, r6, pc}
   15d98:	ldrd	r2, [r1, #64]	; 0x40
   15d9c:	push	{r4, r5, r6, lr}
   15da0:	ldrd	r4, [r0, #64]	; 0x40
   15da4:	cmp	r2, r4
   15da8:	sbcs	ip, r3, r5
   15dac:	blt	15de4 <__assert_fail@plt+0x4070>
   15db0:	cmp	r4, r2
   15db4:	sbcs	r3, r5, r3
   15db8:	blt	15dec <__assert_fail@plt+0x4078>
   15dbc:	ldr	r4, [r0]
   15dc0:	ldr	r5, [r1]
   15dc4:	bl	11bb8 <__errno_location@plt>
   15dc8:	mov	r2, #0
   15dcc:	mov	r1, r5
   15dd0:	mov	r3, r0
   15dd4:	mov	r0, r4
   15dd8:	str	r2, [r3]
   15ddc:	pop	{r4, r5, r6, lr}
   15de0:	b	11abc <strcoll@plt>
   15de4:	mvn	r0, #0
   15de8:	pop	{r4, r5, r6, pc}
   15dec:	mov	r0, #1
   15df0:	pop	{r4, r5, r6, pc}
   15df4:	ldr	r3, [pc, #556]	; 16028 <__assert_fail@plt+0x42b4>
   15df8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dfc:	sub	sp, sp, #36	; 0x24
   15e00:	ldrb	fp, [r3, #3240]	; 0xca8
   15e04:	ldr	r9, [pc, #544]	; 1602c <__assert_fail@plt+0x42b8>
   15e08:	ldr	r1, [pc, #544]	; 16030 <__assert_fail@plt+0x42bc>
   15e0c:	cmp	fp, #0
   15e10:	ldrb	r2, [r3, #3241]	; 0xca9
   15e14:	moveq	r1, r9
   15e18:	ldr	ip, [pc, #532]	; 16034 <__assert_fail@plt+0x42c0>
   15e1c:	str	r1, [sp, #28]
   15e20:	ldr	r1, [pc, #528]	; 16038 <__assert_fail@plt+0x42c4>
   15e24:	ldr	r0, [pc, #528]	; 1603c <__assert_fail@plt+0x42c8>
   15e28:	str	r2, [sp, #4]
   15e2c:	ldr	r8, [pc, #524]	; 16040 <__assert_fail@plt+0x42cc>
   15e30:	ldr	r2, [pc, #524]	; 16044 <__assert_fail@plt+0x42d0>
   15e34:	movne	r0, ip
   15e38:	ldr	r5, [pc, #520]	; 16048 <__assert_fail@plt+0x42d4>
   15e3c:	movne	r5, r1
   15e40:	add	r1, r1, #2016	; 0x7e0
   15e44:	ldr	r7, [pc, #512]	; 1604c <__assert_fail@plt+0x42d8>
   15e48:	ldr	lr, [pc, #512]	; 16050 <__assert_fail@plt+0x42dc>
   15e4c:	movne	r7, r8
   15e50:	movne	lr, r1
   15e54:	add	r8, r8, #508	; 0x1fc
   15e58:	sub	r1, r1, #896	; 0x380
   15e5c:	str	r0, [sp, #12]
   15e60:	moveq	r1, r2
   15e64:	ldr	r0, [pc, #488]	; 16054 <__assert_fail@plt+0x42e0>
   15e68:	ldr	sl, [pc, #488]	; 16058 <__assert_fail@plt+0x42e4>
   15e6c:	str	r1, [sp, #8]
   15e70:	movne	sl, r8
   15e74:	ldr	r1, [pc, #480]	; 1605c <__assert_fail@plt+0x42e8>
   15e78:	sub	r8, r8, #320	; 0x140
   15e7c:	ldr	fp, [pc, #476]	; 16060 <__assert_fail@plt+0x42ec>
   15e80:	ldr	r6, [pc, #476]	; 16064 <__assert_fail@plt+0x42f0>
   15e84:	str	r7, [sp, #24]
   15e88:	movne	r6, r0
   15e8c:	ldr	r7, [pc, #468]	; 16068 <__assert_fail@plt+0x42f4>
   15e90:	str	lr, [sp, #16]
   15e94:	sub	r0, r0, #580	; 0x244
   15e98:	ldr	lr, [pc, #460]	; 1606c <__assert_fail@plt+0x42f8>
   15e9c:	moveq	r0, r8
   15ea0:	ldr	r8, [sp, #4]
   15ea4:	ldr	r4, [pc, #452]	; 16070 <__assert_fail@plt+0x42fc>
   15ea8:	movne	r4, r1
   15eac:	add	r1, r1, #1664	; 0x680
   15eb0:	add	r9, r9, #928	; 0x3a0
   15eb4:	str	r5, [sp, #20]
   15eb8:	movne	r9, fp
   15ebc:	ldr	r5, [pc, #432]	; 16074 <__assert_fail@plt+0x4300>
   15ec0:	ldr	ip, [pc, #432]	; 16078 <__assert_fail@plt+0x4304>
   15ec4:	movne	r5, r7
   15ec8:	movne	ip, lr
   15ecc:	ldr	r2, [pc, #424]	; 1607c <__assert_fail@plt+0x4308>
   15ed0:	ldr	fp, [pc, #424]	; 16080 <__assert_fail@plt+0x430c>
   15ed4:	moveq	r2, r1
   15ed8:	sub	r7, r7, #992	; 0x3e0
   15edc:	ldr	lr, [pc, #416]	; 16084 <__assert_fail@plt+0x4310>
   15ee0:	sub	r1, r1, #2816	; 0xb00
   15ee4:	moveq	fp, #130	; 0x82
   15ee8:	moveq	r7, #66	; 0x42
   15eec:	moveq	lr, #34	; 0x22
   15ef0:	moveq	r1, #2
   15ef4:	cmp	r8, #0
   15ef8:	bne	15f24 <__assert_fail@plt+0x41b0>
   15efc:	ldr	r0, [sp, #28]
   15f00:	ldr	r6, [sp, #24]
   15f04:	ldr	r9, [sp, #20]
   15f08:	ldr	ip, [sp, #16]
   15f0c:	ldr	r2, [sp, #12]
   15f10:	str	r0, [sp, #8]
   15f14:	mov	r4, fp
   15f18:	mov	sl, r7
   15f1c:	mov	r5, lr
   15f20:	mov	r0, r1
   15f24:	ldr	r1, [r3, #3244]	; 0xcac
   15f28:	cmp	r1, #0
   15f2c:	bne	15f80 <__assert_fail@plt+0x420c>
   15f30:	ldr	r1, [r3, #3248]	; 0xcb0
   15f34:	cmp	r1, #3
   15f38:	ldrls	pc, [pc, r1, lsl #2]
   15f3c:	b	16024 <__assert_fail@plt+0x42b0>
   15f40:	andeq	r5, r1, r0, asr pc
   15f44:	andeq	r6, r1, r0
   15f48:	andeq	r5, r1, r8, ror #31
   15f4c:	strdeq	r5, [r1], -r4
   15f50:	mov	r0, r6
   15f54:	ldr	r2, [pc, #300]	; 16088 <__assert_fail@plt+0x4314>
   15f58:	ldrb	r1, [r2, #204]	; 0xcc
   15f5c:	cmp	r1, #0
   15f60:	bne	15f70 <__assert_fail@plt+0x41fc>
   15f64:	ldrb	r1, [r3, #3252]	; 0xcb4
   15f68:	cmp	r1, #0
   15f6c:	beq	15f74 <__assert_fail@plt+0x4200>
   15f70:	orr	r0, sl, #524	; 0x20c
   15f74:	ldrb	r2, [r2, #205]	; 0xcd
   15f78:	cmp	r2, #0
   15f7c:	orrne	r0, r0, #16
   15f80:	ldr	r1, [r3, #3256]	; 0xcb8
   15f84:	cmp	r1, #6
   15f88:	bhi	16024 <__assert_fail@plt+0x42b0>
   15f8c:	mov	r2, #1
   15f90:	lsl	r2, r2, r1
   15f94:	tst	r2, #87	; 0x57
   15f98:	bne	15fd4 <__assert_fail@plt+0x4260>
   15f9c:	tst	r2, #8
   15fa0:	bne	15fdc <__assert_fail@plt+0x4268>
   15fa4:	tst	r2, #32
   15fa8:	beq	16024 <__assert_fail@plt+0x42b0>
   15fac:	ldr	r3, [r3, #3248]	; 0xcb0
   15fb0:	cmp	r3, #3
   15fb4:	ldrls	pc, [pc, r3, lsl #2]
   15fb8:	b	16024 <__assert_fail@plt+0x42b0>
   15fbc:	andeq	r5, r1, ip, asr #31
   15fc0:	andeq	r6, r1, ip
   15fc4:	andeq	r6, r1, ip, lsl r0
   15fc8:	andeq	r6, r1, r4, lsl r0
   15fcc:	mov	r3, #64	; 0x40
   15fd0:	orr	r0, r0, r3
   15fd4:	add	sp, sp, #36	; 0x24
   15fd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fdc:	orr	r0, r0, #512	; 0x200
   15fe0:	add	sp, sp, #36	; 0x24
   15fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fe8:	mov	r0, r9
   15fec:	mov	sl, r5
   15ff0:	b	15f54 <__assert_fail@plt+0x41e0>
   15ff4:	mov	r0, ip
   15ff8:	mov	sl, r2
   15ffc:	b	15f54 <__assert_fail@plt+0x41e0>
   16000:	ldr	r0, [sp, #8]
   16004:	mov	sl, r4
   16008:	b	15f54 <__assert_fail@plt+0x41e0>
   1600c:	mov	r3, #128	; 0x80
   16010:	b	15fd0 <__assert_fail@plt+0x425c>
   16014:	mov	r3, #2048	; 0x800
   16018:	b	15fd0 <__assert_fail@plt+0x425c>
   1601c:	mov	r3, #32
   16020:	b	15fd0 <__assert_fail@plt+0x425c>
   16024:	bl	11d2c <abort@plt>
   16028:	andeq	r1, r4, r0, lsr r3
   1602c:	andeq	r0, r0, r6, lsl #5
   16030:	andeq	r0, r0, r6, lsl #7
   16034:	andeq	r0, r0, r2, lsl #18
   16038:	andeq	r0, r0, r6, lsr #6
   1603c:	andeq	r0, r0, r2, lsl #16
   16040:	andeq	r0, r0, r6, asr #6
   16044:	andeq	r0, r0, r6, lsl #13
   16048:	andeq	r0, r0, r6, lsr #4
   1604c:	andeq	r0, r0, r6, asr #4
   16050:	andeq	r0, r0, r6, lsl #20
   16054:	andeq	r0, r0, r6, asr #14
   16058:	andeq	r0, r0, r2, asr #8
   1605c:	andeq	r0, r0, r2, lsl #11
   16060:	andeq	r0, r0, r6, lsr #14
   16064:	andeq	r0, r0, r6, asr #12
   16068:	andeq	r0, r0, r2, lsr #10
   1606c:	andeq	r0, r0, r6, lsl #30
   16070:	andeq	r0, r0, r2, lsl #9
   16074:	andeq	r0, r0, r2, lsr #8
   16078:	andeq	r0, r0, r6, lsl #28
   1607c:	andeq	r0, r0, r2, lsl #26
   16080:	andeq	r0, r0, r2, lsl #3
   16084:	andeq	r0, r0, r2, lsr #2
   16088:	ldrdeq	r1, [r4], -r0
   1608c:	push	{r4, r5, r6, lr}
   16090:	ldr	r4, [pc, #468]	; 1626c <__assert_fail@plt+0x44f8>
   16094:	ldr	r1, [r4, #3260]	; 0xcbc
   16098:	ldr	r3, [r4, #3264]	; 0xcc0
   1609c:	add	r2, r1, r1, lsr #1
   160a0:	cmp	r2, r3
   160a4:	bhi	1621c <__assert_fail@plt+0x44a8>
   160a8:	cmp	r1, #0
   160ac:	beq	16244 <__assert_fail@plt+0x44d0>
   160b0:	ldr	r2, [pc, #436]	; 1626c <__assert_fail@plt+0x44f8>
   160b4:	ldr	r3, [r2, #3268]	; 0xcc4
   160b8:	ldr	r2, [r2, #3272]	; 0xcc8
   160bc:	add	r0, r3, r1, lsl #2
   160c0:	str	r2, [r3], #4
   160c4:	cmp	r0, r3
   160c8:	add	r2, r2, #152	; 0x98
   160cc:	bne	160c0 <__assert_fail@plt+0x434c>
   160d0:	ldr	r3, [pc, #404]	; 1626c <__assert_fail@plt+0x44f8>
   160d4:	ldr	r3, [r3, #3256]	; 0xcb8
   160d8:	cmp	r3, #2
   160dc:	beq	161b4 <__assert_fail@plt+0x4440>
   160e0:	ldr	r2, [pc, #388]	; 1626c <__assert_fail@plt+0x44f8>
   160e4:	ldr	r0, [r2, #3276]	; 0xccc
   160e8:	cmp	r0, #0
   160ec:	beq	16100 <__assert_fail@plt+0x438c>
   160f0:	ldr	r2, [r2, #3244]	; 0xcac
   160f4:	sub	r2, r2, #2
   160f8:	cmp	r2, #1
   160fc:	bls	161ac <__assert_fail@plt+0x4438>
   16100:	cmp	r3, #6
   16104:	popeq	{r4, r5, r6, pc}
   16108:	ldr	r0, [pc, #352]	; 16270 <__assert_fail@plt+0x44fc>
   1610c:	bl	118e8 <_setjmp@plt>
   16110:	subs	r3, r0, #0
   16114:	beq	1615c <__assert_fail@plt+0x43e8>
   16118:	ldr	r3, [pc, #332]	; 1626c <__assert_fail@plt+0x44f8>
   1611c:	ldr	lr, [r3, #3256]	; 0xcb8
   16120:	cmp	lr, #4
   16124:	beq	16258 <__assert_fail@plt+0x44e4>
   16128:	ldr	r1, [r3, #3260]	; 0xcbc
   1612c:	ldr	r0, [r3, #3268]	; 0xcc4
   16130:	cmp	r1, #0
   16134:	beq	16154 <__assert_fail@plt+0x43e0>
   16138:	ldr	r2, [r3, #3272]	; 0xcc8
   1613c:	add	ip, r0, r1, lsl #2
   16140:	mov	r3, r0
   16144:	str	r2, [r3], #4
   16148:	cmp	r3, ip
   1614c:	add	r2, r2, #152	; 0x98
   16150:	bne	16144 <__assert_fail@plt+0x43d0>
   16154:	mov	r3, #1
   16158:	b	1616c <__assert_fail@plt+0x43f8>
   1615c:	ldr	r2, [pc, #264]	; 1626c <__assert_fail@plt+0x44f8>
   16160:	ldr	r1, [r2, #3260]	; 0xcbc
   16164:	ldr	lr, [r2, #3256]	; 0xcb8
   16168:	ldr	r0, [r2, #3268]	; 0xcc4
   1616c:	cmp	lr, #5
   16170:	ldr	r4, [pc, #244]	; 1626c <__assert_fail@plt+0x44f8>
   16174:	ldreq	r2, [pc, #240]	; 1626c <__assert_fail@plt+0x44f8>
   16178:	movne	ip, #0
   1617c:	ldreq	ip, [r2, #3248]	; 0xcb0
   16180:	ldr	r2, [pc, #236]	; 16274 <__assert_fail@plt+0x4500>
   16184:	add	ip, ip, lr
   16188:	ldrb	lr, [r4, #3672]	; 0xe58
   1618c:	add	r3, r3, ip, lsl #1
   16190:	ldrb	ip, [r4, #3673]	; 0xe59
   16194:	add	r3, lr, r3, lsl #1
   16198:	add	r3, ip, r3, lsl #1
   1619c:	add	r3, r2, r3, lsl #2
   161a0:	ldr	r2, [r3, #60]	; 0x3c
   161a4:	bl	22450 <__assert_fail@plt+0x106dc>
   161a8:	pop	{r4, r5, r6, pc}
   161ac:	cmp	r1, #0
   161b0:	beq	16100 <__assert_fail@plt+0x438c>
   161b4:	ldr	r6, [pc, #176]	; 1626c <__assert_fail@plt+0x44f8>
   161b8:	mov	r4, #0
   161bc:	b	161d0 <__assert_fail@plt+0x445c>
   161c0:	add	r4, r4, #1
   161c4:	cmp	r4, r1
   161c8:	str	r0, [r5, #148]	; 0x94
   161cc:	bcs	16208 <__assert_fail@plt+0x4494>
   161d0:	ldr	r3, [r6, #3268]	; 0xcc4
   161d4:	ldr	r5, [r3, r4, lsl #2]
   161d8:	ldr	r0, [r5, #148]	; 0x94
   161dc:	cmp	r0, #0
   161e0:	bne	161c0 <__assert_fail@plt+0x444c>
   161e4:	ldr	r1, [r6, #3236]	; 0xca4
   161e8:	ldr	r2, [r5, #144]	; 0x90
   161ec:	ldr	r0, [r5]
   161f0:	bl	15290 <__assert_fail@plt+0x351c>
   161f4:	ldr	r1, [r6, #3260]	; 0xcbc
   161f8:	add	r4, r4, #1
   161fc:	cmp	r4, r1
   16200:	str	r0, [r5, #148]	; 0x94
   16204:	bcc	161d0 <__assert_fail@plt+0x445c>
   16208:	ldr	r3, [pc, #92]	; 1626c <__assert_fail@plt+0x44f8>
   1620c:	ldr	r3, [r3, #3256]	; 0xcb8
   16210:	cmp	r3, #6
   16214:	bne	16108 <__assert_fail@plt+0x4394>
   16218:	pop	{r4, r5, r6, pc}
   1621c:	ldr	r0, [r4, #3268]	; 0xcc4
   16220:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   16224:	mov	r1, #12
   16228:	ldr	r0, [r4, #3260]	; 0xcbc
   1622c:	bl	29a3c <_obstack_memory_used@@Base+0x5490>
   16230:	ldr	r1, [r4, #3260]	; 0xcbc
   16234:	add	r3, r1, r1, lsl #1
   16238:	str	r3, [r4, #3264]	; 0xcc0
   1623c:	str	r0, [r4, #3268]	; 0xcc4
   16240:	b	160a8 <__assert_fail@plt+0x4334>
   16244:	ldr	r3, [pc, #32]	; 1626c <__assert_fail@plt+0x44f8>
   16248:	ldr	r3, [r3, #3256]	; 0xcb8
   1624c:	cmp	r3, #2
   16250:	bne	160e0 <__assert_fail@plt+0x436c>
   16254:	b	16108 <__assert_fail@plt+0x4394>
   16258:	ldr	r3, [pc, #24]	; 16278 <__assert_fail@plt+0x4504>
   1625c:	ldr	r2, [pc, #24]	; 1627c <__assert_fail@plt+0x4508>
   16260:	ldr	r1, [pc, #24]	; 16280 <__assert_fail@plt+0x450c>
   16264:	ldr	r0, [pc, #24]	; 16284 <__assert_fail@plt+0x4510>
   16268:	bl	11d74 <__assert_fail@plt>
   1626c:	andeq	r1, r4, r0, lsr r3
   16270:	andeq	r2, r4, r0
   16274:	andeq	ip, r2, r8, lsl #1
   16278:	strheq	ip, [r2], -r8
   1627c:	andeq	r1, r0, r6
   16280:	andeq	sp, r2, r8, lsl #16
   16284:	andeq	sp, r2, r4, lsl r8
   16288:	push	{r4, r5, r6, lr}
   1628c:	mov	r6, r1
   16290:	ldr	r5, [r0]
   16294:	mov	r1, #46	; 0x2e
   16298:	mov	r0, r5
   1629c:	bl	11c78 <strrchr@plt>
   162a0:	ldr	r6, [r6]
   162a4:	mov	r1, #46	; 0x2e
   162a8:	mov	r4, r0
   162ac:	mov	r0, r6
   162b0:	bl	11c78 <strrchr@plt>
   162b4:	cmp	r4, #0
   162b8:	beq	162ec <__assert_fail@plt+0x4578>
   162bc:	ldr	r3, [pc, #56]	; 162fc <__assert_fail@plt+0x4588>
   162c0:	cmp	r0, #0
   162c4:	moveq	r0, r3
   162c8:	mov	r1, r0
   162cc:	mov	r0, r4
   162d0:	bl	118a0 <strcmp@plt>
   162d4:	cmp	r0, #0
   162d8:	popne	{r4, r5, r6, pc}
   162dc:	mov	r1, r6
   162e0:	mov	r0, r5
   162e4:	pop	{r4, r5, r6, lr}
   162e8:	b	118a0 <strcmp@plt>
   162ec:	cmp	r0, #0
   162f0:	ldrne	r4, [pc, #4]	; 162fc <__assert_fail@plt+0x4588>
   162f4:	bne	162c8 <__assert_fail@plt+0x4554>
   162f8:	b	162dc <__assert_fail@plt+0x4568>
   162fc:	andeq	r0, r3, r4, lsr #3
   16300:	push	{r4, r5, r6, r7, r8, lr}
   16304:	mov	r5, r1
   16308:	ldr	r6, [r0]
   1630c:	mov	r1, #46	; 0x2e
   16310:	mov	r0, r6
   16314:	bl	11c78 <strrchr@plt>
   16318:	ldr	r7, [r5]
   1631c:	mov	r1, #46	; 0x2e
   16320:	mov	r4, r0
   16324:	mov	r0, r7
   16328:	bl	11c78 <strrchr@plt>
   1632c:	ldr	r1, [pc, #68]	; 16378 <__assert_fail@plt+0x4604>
   16330:	cmp	r4, #0
   16334:	moveq	r4, r1
   16338:	cmp	r0, #0
   1633c:	movne	r5, r0
   16340:	moveq	r5, r1
   16344:	bl	11bb8 <__errno_location@plt>
   16348:	mov	r2, #0
   1634c:	mov	r1, r5
   16350:	mov	r3, r0
   16354:	mov	r0, r4
   16358:	str	r2, [r3]
   1635c:	bl	11abc <strcoll@plt>
   16360:	cmp	r0, #0
   16364:	popne	{r4, r5, r6, r7, r8, pc}
   16368:	mov	r1, r7
   1636c:	mov	r0, r6
   16370:	pop	{r4, r5, r6, r7, r8, lr}
   16374:	b	11abc <strcoll@plt>
   16378:	andeq	r0, r3, r4, lsr #3
   1637c:	push	{r4, r5, r6, r7, r8, lr}
   16380:	mov	r5, r0
   16384:	ldr	r6, [r1]
   16388:	mov	r1, #46	; 0x2e
   1638c:	mov	r0, r6
   16390:	bl	11c78 <strrchr@plt>
   16394:	ldr	r7, [r5]
   16398:	mov	r1, #46	; 0x2e
   1639c:	mov	r4, r0
   163a0:	mov	r0, r7
   163a4:	bl	11c78 <strrchr@plt>
   163a8:	ldr	r1, [pc, #68]	; 163f4 <__assert_fail@plt+0x4680>
   163ac:	cmp	r4, #0
   163b0:	moveq	r4, r1
   163b4:	cmp	r0, #0
   163b8:	movne	r5, r0
   163bc:	moveq	r5, r1
   163c0:	bl	11bb8 <__errno_location@plt>
   163c4:	mov	r2, #0
   163c8:	mov	r1, r5
   163cc:	mov	r3, r0
   163d0:	mov	r0, r4
   163d4:	str	r2, [r3]
   163d8:	bl	11abc <strcoll@plt>
   163dc:	cmp	r0, #0
   163e0:	popne	{r4, r5, r6, r7, r8, pc}
   163e4:	mov	r1, r7
   163e8:	mov	r0, r6
   163ec:	pop	{r4, r5, r6, r7, r8, lr}
   163f0:	b	11abc <strcoll@plt>
   163f4:	andeq	r0, r3, r4, lsr #3
   163f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163fc:	sub	sp, sp, #12
   16400:	subs	r7, r0, #0
   16404:	ldr	fp, [pc, #604]	; 16668 <__assert_fail@plt+0x48f4>
   16408:	str	r1, [sp]
   1640c:	beq	1644c <__assert_fail@plt+0x46d8>
   16410:	ldr	r2, [fp, #3676]	; 0xe5c
   16414:	cmp	r2, #0
   16418:	beq	1644c <__assert_fail@plt+0x46d8>
   1641c:	mov	r0, #16
   16420:	bl	29958 <_obstack_memory_used@@Base+0x53ac>
   16424:	mov	r4, r0
   16428:	mov	r0, r7
   1642c:	bl	29f68 <_obstack_memory_used@@Base+0x59bc>
   16430:	ldr	r1, [fp, #3680]	; 0xe60
   16434:	mov	r2, #0
   16438:	str	r1, [r4, #12]
   1643c:	str	r4, [fp, #3680]	; 0xe60
   16440:	str	r2, [r4]
   16444:	strb	r2, [r4, #8]
   16448:	str	r0, [r4, #4]
   1644c:	ldr	r4, [fp, #3260]	; 0xcbc
   16450:	mov	r8, #16
   16454:	sub	r6, r4, #-1073741823	; 0xc0000001
   16458:	cmp	r4, #0
   1645c:	lsl	r6, r6, #2
   16460:	beq	1651c <__assert_fail@plt+0x47a8>
   16464:	ldr	r2, [fp, #3268]	; 0xcc4
   16468:	ldr	r5, [r2, r6]
   1646c:	ldr	r2, [r5, #120]	; 0x78
   16470:	cmp	r2, #9
   16474:	cmpne	r2, #3
   16478:	bne	1650c <__assert_fail@plt+0x4798>
   1647c:	cmp	r7, #0
   16480:	beq	16634 <__assert_fail@plt+0x48c0>
   16484:	ldr	r9, [r5]
   16488:	mov	r0, r9
   1648c:	bl	1d3c0 <__assert_fail@plt+0xb64c>
   16490:	ldrb	r2, [r0]
   16494:	cmp	r2, #46	; 0x2e
   16498:	beq	1655c <__assert_fail@plt+0x47e8>
   1649c:	ldrb	r2, [r9]
   164a0:	cmp	r2, #47	; 0x2f
   164a4:	bne	16588 <__assert_fail@plt+0x4814>
   164a8:	ldr	r1, [r5, #4]
   164ac:	mov	r0, r8
   164b0:	str	r1, [sp, #4]
   164b4:	bl	29958 <_obstack_memory_used@@Base+0x53ac>
   164b8:	ldr	r1, [sp, #4]
   164bc:	cmp	r1, #0
   164c0:	mov	sl, r0
   164c4:	beq	16660 <__assert_fail@plt+0x48ec>
   164c8:	mov	r0, r1
   164cc:	bl	29f68 <_obstack_memory_used@@Base+0x59bc>
   164d0:	cmp	r9, #0
   164d4:	str	r0, [sl, #4]
   164d8:	moveq	r0, #0
   164dc:	beq	164e8 <__assert_fail@plt+0x4774>
   164e0:	mov	r0, r9
   164e4:	bl	29f68 <_obstack_memory_used@@Base+0x59bc>
   164e8:	ldrb	r3, [sp]
   164ec:	ldr	r2, [r5, #120]	; 0x78
   164f0:	ldr	r1, [fp, #3680]	; 0xe60
   164f4:	cmp	r2, #9
   164f8:	str	r0, [sl]
   164fc:	strb	r3, [sl, #8]
   16500:	str	r1, [sl, #12]
   16504:	str	sl, [fp, #3680]	; 0xe60
   16508:	beq	16604 <__assert_fail@plt+0x4890>
   1650c:	sub	r4, r4, #1
   16510:	cmp	r4, #0
   16514:	sub	r6, r6, #4
   16518:	bne	16464 <__assert_fail@plt+0x46f0>
   1651c:	ldr	r0, [fp, #3260]	; 0xcbc
   16520:	cmp	r0, #0
   16524:	beq	16550 <__assert_fail@plt+0x47dc>
   16528:	ldr	ip, [fp, #3268]	; 0xcc4
   1652c:	add	r0, ip, r0, lsl #2
   16530:	mov	r2, ip
   16534:	ldr	r1, [r2], #4
   16538:	str	r1, [ip, r4, lsl #2]
   1653c:	ldr	r1, [r1, #120]	; 0x78
   16540:	cmp	r1, #9
   16544:	addne	r4, r4, #1
   16548:	cmp	r0, r2
   1654c:	bne	16534 <__assert_fail@plt+0x47c0>
   16550:	str	r4, [fp, #3260]	; 0xcbc
   16554:	add	sp, sp, #12
   16558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1655c:	ldrb	r2, [r0, #1]
   16560:	cmp	r2, #46	; 0x2e
   16564:	movne	r2, #1
   16568:	moveq	r2, #2
   1656c:	ldrb	r2, [r0, r2]
   16570:	cmp	r2, #47	; 0x2f
   16574:	cmpne	r2, #0
   16578:	beq	1650c <__assert_fail@plt+0x4798>
   1657c:	ldrb	r2, [r9]
   16580:	cmp	r2, #47	; 0x2f
   16584:	beq	164a8 <__assert_fail@plt+0x4734>
   16588:	mov	r1, r9
   1658c:	mov	r2, #0
   16590:	mov	r0, r7
   16594:	bl	1e190 <__assert_fail@plt+0xc41c>
   16598:	ldr	r1, [r5, #4]
   1659c:	str	r1, [sp, #4]
   165a0:	mov	r9, r0
   165a4:	mov	r0, r8
   165a8:	bl	29958 <_obstack_memory_used@@Base+0x53ac>
   165ac:	ldr	r1, [sp, #4]
   165b0:	cmp	r1, #0
   165b4:	moveq	r1, #0
   165b8:	mov	sl, r0
   165bc:	beq	165cc <__assert_fail@plt+0x4858>
   165c0:	mov	r0, r1
   165c4:	bl	29f68 <_obstack_memory_used@@Base+0x59bc>
   165c8:	mov	r1, r0
   165cc:	str	r1, [sl, #4]
   165d0:	mov	r0, r9
   165d4:	bl	29f68 <_obstack_memory_used@@Base+0x59bc>
   165d8:	ldrb	r3, [sp]
   165dc:	ldr	r1, [fp, #3680]	; 0xe60
   165e0:	str	sl, [fp, #3680]	; 0xe60
   165e4:	strb	r3, [sl, #8]
   165e8:	str	r1, [sl, #12]
   165ec:	str	r0, [sl]
   165f0:	mov	r0, r9
   165f4:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   165f8:	ldr	r2, [r5, #120]	; 0x78
   165fc:	cmp	r2, #9
   16600:	bne	1650c <__assert_fail@plt+0x4798>
   16604:	ldr	r0, [r5]
   16608:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   1660c:	ldr	r0, [r5, #4]
   16610:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   16614:	ldr	r0, [r5, #8]
   16618:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   1661c:	ldr	r0, [r5, #128]	; 0x80
   16620:	ldr	r3, [pc, #68]	; 1666c <__assert_fail@plt+0x48f8>
   16624:	cmp	r0, r3
   16628:	beq	1650c <__assert_fail@plt+0x4798>
   1662c:	bl	11ce4 <freecon@plt>
   16630:	b	1650c <__assert_fail@plt+0x4798>
   16634:	ldr	r1, [r5, #4]
   16638:	mov	r0, r8
   1663c:	str	r1, [sp, #4]
   16640:	ldr	r9, [r5]
   16644:	bl	29958 <_obstack_memory_used@@Base+0x53ac>
   16648:	ldr	r1, [sp, #4]
   1664c:	cmp	r1, #0
   16650:	mov	sl, r0
   16654:	moveq	r0, #0
   16658:	bne	164c8 <__assert_fail@plt+0x4754>
   1665c:	b	164d0 <__assert_fail@plt+0x475c>
   16660:	str	r1, [sl, #4]
   16664:	b	164e0 <__assert_fail@plt+0x476c>
   16668:	andeq	r1, r4, r0, lsr r3
   1666c:	andeq	r1, r4, r0, lsr #5
   16670:	push	{r4, r5, r6, r8, r9, lr}
   16674:	mov	r6, r0
   16678:	ldr	r5, [pc, #516]	; 16884 <__assert_fail@plt+0x4b10>
   1667c:	sub	sp, sp, #672	; 0x2a0
   16680:	ldrb	r4, [r5, #3240]	; 0xca8
   16684:	cmp	r4, #0
   16688:	beq	16728 <__assert_fail@plt+0x49b4>
   1668c:	ldr	r3, [r5, #3244]	; 0xcac
   16690:	cmp	r3, #4
   16694:	beq	16714 <__assert_fail@plt+0x49a0>
   16698:	ldrb	r3, [r5, #3241]	; 0xca9
   1669c:	ldr	r4, [r5, #3684]	; 0xe64
   166a0:	cmp	r3, #0
   166a4:	add	r4, r4, #1
   166a8:	bne	16740 <__assert_fail@plt+0x49cc>
   166ac:	ldrb	r3, [r5, #3708]	; 0xe7c
   166b0:	cmp	r3, #0
   166b4:	bne	16764 <__assert_fail@plt+0x49f0>
   166b8:	ldr	r0, [r6, #148]	; 0x94
   166bc:	cmp	r0, #0
   166c0:	beq	1677c <__assert_fail@plt+0x4a08>
   166c4:	ldr	r2, [r5, #3096]	; 0xc18
   166c8:	add	r0, r4, r0
   166cc:	cmp	r2, #0
   166d0:	beq	1670c <__assert_fail@plt+0x4998>
   166d4:	ldrb	r3, [r6, #132]	; 0x84
   166d8:	ldr	lr, [r6, #32]
   166dc:	ldr	ip, [r6, #120]	; 0x78
   166e0:	cmp	r3, #0
   166e4:	beq	16790 <__assert_fail@plt+0x4a1c>
   166e8:	and	r1, lr, #61440	; 0xf000
   166ec:	cmp	r1, #32768	; 0x8000
   166f0:	bne	16804 <__assert_fail@plt+0x4a90>
   166f4:	cmp	r2, #3
   166f8:	bne	1687c <__assert_fail@plt+0x4b08>
   166fc:	tst	lr, #73	; 0x49
   16700:	movne	r3, #1
   16704:	moveq	r3, #0
   16708:	add	r0, r0, r3
   1670c:	add	sp, sp, #672	; 0x2a0
   16710:	pop	{r4, r5, r6, r8, r9, pc}
   16714:	add	r2, sp, #20
   16718:	ldrd	r0, [r0, #112]	; 0x70
   1671c:	bl	216e0 <__assert_fail@plt+0xf96c>
   16720:	bl	11b94 <strlen@plt>
   16724:	add	r4, r0, #1
   16728:	ldrb	r3, [r5, #3241]	; 0xca9
   1672c:	cmp	r3, #0
   16730:	beq	1674c <__assert_fail@plt+0x49d8>
   16734:	ldr	r3, [r5, #3244]	; 0xcac
   16738:	cmp	r3, #4
   1673c:	beq	167bc <__assert_fail@plt+0x4a48>
   16740:	ldr	r0, [r5, #3704]	; 0xe78
   16744:	add	r0, r0, #1
   16748:	add	r4, r4, r0
   1674c:	ldrb	r3, [r5, #3708]	; 0xe7c
   16750:	cmp	r3, #0
   16754:	beq	166b8 <__assert_fail@plt+0x4944>
   16758:	ldr	r3, [r5, #3244]	; 0xcac
   1675c:	cmp	r3, #4
   16760:	beq	1684c <__assert_fail@plt+0x4ad8>
   16764:	ldr	r0, [r5, #3712]	; 0xe80
   16768:	add	r0, r0, #1
   1676c:	add	r4, r4, r0
   16770:	ldr	r0, [r6, #148]	; 0x94
   16774:	cmp	r0, #0
   16778:	bne	166c4 <__assert_fail@plt+0x4950>
   1677c:	ldr	r2, [r6, #144]	; 0x90
   16780:	ldr	r1, [r5, #3236]	; 0xca4
   16784:	ldr	r0, [r6]
   16788:	bl	15290 <__assert_fail@plt+0x351c>
   1678c:	b	166c4 <__assert_fail@plt+0x4950>
   16790:	cmp	ip, #5
   16794:	beq	16708 <__assert_fail@plt+0x4994>
   16798:	cmp	ip, #9
   1679c:	cmpne	ip, #3
   167a0:	moveq	r1, #1
   167a4:	movne	r1, #0
   167a8:	cmp	r1, #0
   167ac:	beq	16818 <__assert_fail@plt+0x4aa4>
   167b0:	mov	r3, #1
   167b4:	add	r0, r0, r3
   167b8:	b	1670c <__assert_fail@plt+0x4998>
   167bc:	ldrb	r3, [r6, #132]	; 0x84
   167c0:	cmp	r3, #0
   167c4:	moveq	r0, #2
   167c8:	beq	16748 <__assert_fail@plt+0x49d4>
   167cc:	ldr	r3, [pc, #180]	; 16888 <__assert_fail@plt+0x4b14>
   167d0:	ldr	ip, [r5, #3688]	; 0xe68
   167d4:	mov	r8, #512	; 0x200
   167d8:	ldrd	r2, [r3]
   167dc:	mov	r9, #0
   167e0:	ldrd	r0, [r6, #80]	; 0x50
   167e4:	strd	r2, [sp, #8]
   167e8:	strd	r8, [sp]
   167ec:	mov	r3, ip
   167f0:	add	r2, sp, #20
   167f4:	bl	202e8 <__assert_fail@plt+0xe574>
   167f8:	bl	11b94 <strlen@plt>
   167fc:	add	r0, r0, #1
   16800:	b	16748 <__assert_fail@plt+0x49d4>
   16804:	sub	r1, r1, #16384	; 0x4000
   16808:	clz	r1, r1
   1680c:	lsr	r1, r1, #5
   16810:	cmp	r1, #0
   16814:	bne	167b0 <__assert_fail@plt+0x4a3c>
   16818:	cmp	r2, #1
   1681c:	beq	1687c <__assert_fail@plt+0x4b08>
   16820:	cmp	r3, #0
   16824:	beq	1685c <__assert_fail@plt+0x4ae8>
   16828:	and	lr, lr, #61440	; 0xf000
   1682c:	cmp	lr, #40960	; 0xa000
   16830:	beq	167b0 <__assert_fail@plt+0x4a3c>
   16834:	cmp	lr, #4096	; 0x1000
   16838:	beq	167b0 <__assert_fail@plt+0x4a3c>
   1683c:	sub	r3, lr, #49152	; 0xc000
   16840:	clz	r3, r3
   16844:	lsr	r3, r3, #5
   16848:	b	16708 <__assert_fail@plt+0x4994>
   1684c:	ldr	r0, [r6, #128]	; 0x80
   16850:	bl	11b94 <strlen@plt>
   16854:	add	r0, r0, #1
   16858:	b	1676c <__assert_fail@plt+0x49f8>
   1685c:	cmp	ip, #6
   16860:	beq	167b0 <__assert_fail@plt+0x4a3c>
   16864:	cmp	ip, #1
   16868:	moveq	r3, ip
   1686c:	subne	r3, ip, #7
   16870:	clzne	r3, r3
   16874:	lsrne	r3, r3, #5
   16878:	b	16708 <__assert_fail@plt+0x4994>
   1687c:	mov	r3, #0
   16880:	b	16708 <__assert_fail@plt+0x4994>
   16884:	andeq	r1, r4, r0, lsr r3
   16888:	andeq	r2, r4, r0, lsr #3
   1688c:	ldr	r3, [r1, #120]	; 0x78
   16890:	push	{r4, r5, r6, lr}
   16894:	cmp	r3, #9
   16898:	cmpne	r3, #3
   1689c:	beq	168d8 <__assert_fail@plt+0x4b64>
   168a0:	ldr	r3, [r1, #124]	; 0x7c
   168a4:	and	r3, r3, #61440	; 0xf000
   168a8:	cmp	r3, #16384	; 0x4000
   168ac:	beq	168d8 <__assert_fail@plt+0x4b64>
   168b0:	ldr	r3, [r0, #120]	; 0x78
   168b4:	cmp	r3, #9
   168b8:	cmpne	r3, #3
   168bc:	movne	r3, #0
   168c0:	moveq	r3, #1
   168c4:	movne	r4, r3
   168c8:	bne	168ec <__assert_fail@plt+0x4b78>
   168cc:	mvn	r4, #0
   168d0:	mov	r0, r4
   168d4:	pop	{r4, r5, r6, pc}
   168d8:	ldr	r3, [r0, #120]	; 0x78
   168dc:	cmp	r3, #3
   168e0:	cmpne	r3, #9
   168e4:	movne	r4, #1
   168e8:	beq	16904 <__assert_fail@plt+0x4b90>
   168ec:	ldr	r3, [r0, #124]	; 0x7c
   168f0:	and	r3, r3, #61440	; 0xf000
   168f4:	cmp	r3, #16384	; 0x4000
   168f8:	subeq	r4, r4, #1
   168fc:	cmp	r4, #0
   16900:	bne	168d0 <__assert_fail@plt+0x4b5c>
   16904:	ldr	r4, [r0, #104]	; 0x68
   16908:	ldr	lr, [r1, #104]	; 0x68
   1690c:	ldr	ip, [r1, #108]	; 0x6c
   16910:	cmp	lr, r4
   16914:	ldr	r2, [r0, #108]	; 0x6c
   16918:	movge	r3, #0
   1691c:	movlt	r3, #1
   16920:	cmp	lr, r4
   16924:	rsble	r3, r3, #0
   16928:	rsbgt	r3, r3, #1
   1692c:	cmp	ip, r2
   16930:	movge	r4, #0
   16934:	movlt	r4, #1
   16938:	cmp	ip, r2
   1693c:	rsble	r4, r4, #0
   16940:	rsbgt	r4, r4, #1
   16944:	adds	r4, r4, r3, lsl #1
   16948:	bne	168d0 <__assert_fail@plt+0x4b5c>
   1694c:	ldr	r5, [r0]
   16950:	ldr	r6, [r1]
   16954:	bl	11bb8 <__errno_location@plt>
   16958:	mov	r1, r6
   1695c:	str	r4, [r0]
   16960:	mov	r0, r5
   16964:	pop	{r4, r5, r6, lr}
   16968:	b	11abc <strcoll@plt>
   1696c:	ldr	r3, [r1, #120]	; 0x78
   16970:	push	{r4, r5, r6, lr}
   16974:	cmp	r3, #9
   16978:	cmpne	r3, #3
   1697c:	beq	169b8 <__assert_fail@plt+0x4c44>
   16980:	ldr	r3, [r1, #124]	; 0x7c
   16984:	and	r3, r3, #61440	; 0xf000
   16988:	cmp	r3, #16384	; 0x4000
   1698c:	beq	169b8 <__assert_fail@plt+0x4c44>
   16990:	ldr	r3, [r0, #120]	; 0x78
   16994:	cmp	r3, #9
   16998:	cmpne	r3, #3
   1699c:	movne	r3, #0
   169a0:	moveq	r3, #1
   169a4:	movne	r4, r3
   169a8:	bne	169cc <__assert_fail@plt+0x4c58>
   169ac:	mvn	r4, #0
   169b0:	mov	r0, r4
   169b4:	pop	{r4, r5, r6, pc}
   169b8:	ldr	r3, [r0, #120]	; 0x78
   169bc:	cmp	r3, #3
   169c0:	cmpne	r3, #9
   169c4:	movne	r4, #1
   169c8:	beq	169e4 <__assert_fail@plt+0x4c70>
   169cc:	ldr	r3, [r0, #124]	; 0x7c
   169d0:	and	r3, r3, #61440	; 0xf000
   169d4:	cmp	r3, #16384	; 0x4000
   169d8:	subeq	r4, r4, #1
   169dc:	cmp	r4, #0
   169e0:	bne	169b0 <__assert_fail@plt+0x4c3c>
   169e4:	ldr	r4, [r1, #104]	; 0x68
   169e8:	ldr	lr, [r0, #104]	; 0x68
   169ec:	ldr	ip, [r0, #108]	; 0x6c
   169f0:	cmp	lr, r4
   169f4:	ldr	r2, [r1, #108]	; 0x6c
   169f8:	movge	r3, #0
   169fc:	movlt	r3, #1
   16a00:	cmp	lr, r4
   16a04:	rsble	r3, r3, #0
   16a08:	rsbgt	r3, r3, #1
   16a0c:	cmp	ip, r2
   16a10:	movge	r4, #0
   16a14:	movlt	r4, #1
   16a18:	cmp	ip, r2
   16a1c:	rsble	r4, r4, #0
   16a20:	rsbgt	r4, r4, #1
   16a24:	adds	r4, r4, r3, lsl #1
   16a28:	bne	169b0 <__assert_fail@plt+0x4c3c>
   16a2c:	ldr	r5, [r1]
   16a30:	ldr	r6, [r0]
   16a34:	bl	11bb8 <__errno_location@plt>
   16a38:	mov	r1, r6
   16a3c:	str	r4, [r0]
   16a40:	mov	r0, r5
   16a44:	pop	{r4, r5, r6, lr}
   16a48:	b	11abc <strcoll@plt>
   16a4c:	ldr	r3, [r1, #120]	; 0x78
   16a50:	mov	r2, r1
   16a54:	cmp	r3, #9
   16a58:	cmpne	r3, #3
   16a5c:	beq	16a94 <__assert_fail@plt+0x4d20>
   16a60:	ldr	r3, [r1, #124]	; 0x7c
   16a64:	and	r3, r3, #61440	; 0xf000
   16a68:	cmp	r3, #16384	; 0x4000
   16a6c:	beq	16a94 <__assert_fail@plt+0x4d20>
   16a70:	ldr	r3, [r0, #120]	; 0x78
   16a74:	cmp	r3, #9
   16a78:	cmpne	r3, #3
   16a7c:	moveq	r3, #1
   16a80:	movne	r3, #0
   16a84:	mvneq	r3, #0
   16a88:	bne	16aa8 <__assert_fail@plt+0x4d34>
   16a8c:	mov	r0, r3
   16a90:	bx	lr
   16a94:	ldr	r3, [r0, #120]	; 0x78
   16a98:	cmp	r3, #9
   16a9c:	cmpne	r3, #3
   16aa0:	movne	r3, #1
   16aa4:	beq	16ac0 <__assert_fail@plt+0x4d4c>
   16aa8:	ldr	r1, [r0, #124]	; 0x7c
   16aac:	and	r1, r1, #61440	; 0xf000
   16ab0:	cmp	r1, #16384	; 0x4000
   16ab4:	subeq	r3, r3, #1
   16ab8:	cmp	r3, #0
   16abc:	bne	16a8c <__assert_fail@plt+0x4d18>
   16ac0:	ldr	r3, [r2, #104]	; 0x68
   16ac4:	push	{r4, lr}
   16ac8:	ldr	r4, [r0, #104]	; 0x68
   16acc:	ldr	lr, [r0, #108]	; 0x6c
   16ad0:	cmp	r4, r3
   16ad4:	ldr	ip, [r2, #108]	; 0x6c
   16ad8:	movge	r1, #0
   16adc:	movlt	r1, #1
   16ae0:	cmp	r4, r3
   16ae4:	rsble	r1, r1, #0
   16ae8:	rsbgt	r1, r1, #1
   16aec:	cmp	lr, ip
   16af0:	movge	r3, #0
   16af4:	movlt	r3, #1
   16af8:	cmp	lr, ip
   16afc:	rsble	r3, r3, #0
   16b00:	rsbgt	r3, r3, #1
   16b04:	adds	r3, r3, r1, lsl #1
   16b08:	beq	16b14 <__assert_fail@plt+0x4da0>
   16b0c:	mov	r0, r3
   16b10:	pop	{r4, pc}
   16b14:	ldr	r1, [r0]
   16b18:	pop	{r4, lr}
   16b1c:	ldr	r0, [r2]
   16b20:	b	118a0 <strcmp@plt>
   16b24:	ldr	r3, [r1, #120]	; 0x78
   16b28:	cmp	r3, #9
   16b2c:	cmpne	r3, #3
   16b30:	beq	16b68 <__assert_fail@plt+0x4df4>
   16b34:	ldr	r3, [r1, #124]	; 0x7c
   16b38:	and	r3, r3, #61440	; 0xf000
   16b3c:	cmp	r3, #16384	; 0x4000
   16b40:	beq	16b68 <__assert_fail@plt+0x4df4>
   16b44:	ldr	r3, [r0, #120]	; 0x78
   16b48:	cmp	r3, #9
   16b4c:	cmpne	r3, #3
   16b50:	moveq	r3, #1
   16b54:	movne	r3, #0
   16b58:	mvneq	r3, #0
   16b5c:	bne	16b7c <__assert_fail@plt+0x4e08>
   16b60:	mov	r0, r3
   16b64:	bx	lr
   16b68:	ldr	r3, [r0, #120]	; 0x78
   16b6c:	cmp	r3, #3
   16b70:	cmpne	r3, #9
   16b74:	movne	r3, #1
   16b78:	beq	16b94 <__assert_fail@plt+0x4e20>
   16b7c:	ldr	r2, [r0, #124]	; 0x7c
   16b80:	and	r2, r2, #61440	; 0xf000
   16b84:	cmp	r2, #16384	; 0x4000
   16b88:	subeq	r3, r3, #1
   16b8c:	cmp	r3, #0
   16b90:	bne	16b60 <__assert_fail@plt+0x4dec>
   16b94:	push	{r4, r5, r6, lr}
   16b98:	mov	r5, r0
   16b9c:	ldr	r4, [r1, #148]	; 0x94
   16ba0:	mov	r6, r1
   16ba4:	cmp	r4, #0
   16ba8:	beq	16bf0 <__assert_fail@plt+0x4e7c>
   16bac:	ldr	r0, [r5, #148]	; 0x94
   16bb0:	cmp	r0, #0
   16bb4:	beq	16bd8 <__assert_fail@plt+0x4e64>
   16bb8:	subs	r3, r4, r0
   16bbc:	beq	16bc8 <__assert_fail@plt+0x4e54>
   16bc0:	mov	r0, r3
   16bc4:	pop	{r4, r5, r6, pc}
   16bc8:	ldr	r1, [r5]
   16bcc:	ldr	r0, [r6]
   16bd0:	pop	{r4, r5, r6, lr}
   16bd4:	b	118a0 <strcmp@plt>
   16bd8:	ldr	r3, [pc, #44]	; 16c0c <__assert_fail@plt+0x4e98>
   16bdc:	ldr	r2, [r5, #144]	; 0x90
   16be0:	ldr	r0, [r5]
   16be4:	ldr	r1, [r3, #3236]	; 0xca4
   16be8:	bl	15290 <__assert_fail@plt+0x351c>
   16bec:	b	16bb8 <__assert_fail@plt+0x4e44>
   16bf0:	ldr	r3, [pc, #20]	; 16c0c <__assert_fail@plt+0x4e98>
   16bf4:	ldr	r2, [r1, #144]	; 0x90
   16bf8:	ldr	r0, [r1]
   16bfc:	ldr	r1, [r3, #3236]	; 0xca4
   16c00:	bl	15290 <__assert_fail@plt+0x351c>
   16c04:	mov	r4, r0
   16c08:	b	16bac <__assert_fail@plt+0x4e38>
   16c0c:	andeq	r1, r4, r0, lsr r3
   16c10:	ldr	r3, [r1, #120]	; 0x78
   16c14:	mov	r2, r1
   16c18:	cmp	r3, #9
   16c1c:	cmpne	r3, #3
   16c20:	beq	16c58 <__assert_fail@plt+0x4ee4>
   16c24:	ldr	r3, [r1, #124]	; 0x7c
   16c28:	and	r3, r3, #61440	; 0xf000
   16c2c:	cmp	r3, #16384	; 0x4000
   16c30:	beq	16c58 <__assert_fail@plt+0x4ee4>
   16c34:	ldr	r3, [r0, #120]	; 0x78
   16c38:	cmp	r3, #9
   16c3c:	cmpne	r3, #3
   16c40:	moveq	r3, #1
   16c44:	movne	r3, #0
   16c48:	mvneq	r3, #0
   16c4c:	bne	16c6c <__assert_fail@plt+0x4ef8>
   16c50:	mov	r0, r3
   16c54:	bx	lr
   16c58:	ldr	r3, [r0, #120]	; 0x78
   16c5c:	cmp	r3, #9
   16c60:	cmpne	r3, #3
   16c64:	movne	r3, #1
   16c68:	beq	16c84 <__assert_fail@plt+0x4f10>
   16c6c:	ldr	r1, [r0, #124]	; 0x7c
   16c70:	and	r1, r1, #61440	; 0xf000
   16c74:	cmp	r1, #16384	; 0x4000
   16c78:	subeq	r3, r3, #1
   16c7c:	cmp	r3, #0
   16c80:	bne	16c50 <__assert_fail@plt+0x4edc>
   16c84:	ldr	r1, [r0]
   16c88:	ldr	r0, [r2]
   16c8c:	b	1e274 <__assert_fail@plt+0xc500>
   16c90:	ldr	r3, [r1, #120]	; 0x78
   16c94:	cmp	r3, #9
   16c98:	cmpne	r3, #3
   16c9c:	beq	16cd4 <__assert_fail@plt+0x4f60>
   16ca0:	ldr	r3, [r1, #124]	; 0x7c
   16ca4:	and	r3, r3, #61440	; 0xf000
   16ca8:	cmp	r3, #16384	; 0x4000
   16cac:	beq	16cd4 <__assert_fail@plt+0x4f60>
   16cb0:	ldr	r3, [r0, #120]	; 0x78
   16cb4:	cmp	r3, #9
   16cb8:	cmpne	r3, #3
   16cbc:	moveq	r3, #1
   16cc0:	movne	r3, #0
   16cc4:	mvneq	r3, #0
   16cc8:	bne	16ce8 <__assert_fail@plt+0x4f74>
   16ccc:	mov	r0, r3
   16cd0:	bx	lr
   16cd4:	ldr	r3, [r0, #120]	; 0x78
   16cd8:	cmp	r3, #9
   16cdc:	cmpne	r3, #3
   16ce0:	movne	r3, #1
   16ce4:	beq	16d00 <__assert_fail@plt+0x4f8c>
   16ce8:	ldr	r2, [r0, #124]	; 0x7c
   16cec:	and	r2, r2, #61440	; 0xf000
   16cf0:	cmp	r2, #16384	; 0x4000
   16cf4:	subeq	r3, r3, #1
   16cf8:	cmp	r3, #0
   16cfc:	bne	16ccc <__assert_fail@plt+0x4f58>
   16d00:	push	{r4, r5, r6, lr}
   16d04:	mov	r4, r1
   16d08:	ldr	r6, [r0]
   16d0c:	mov	r1, #46	; 0x2e
   16d10:	mov	r0, r6
   16d14:	bl	11c78 <strrchr@plt>
   16d18:	ldr	r4, [r4]
   16d1c:	mov	r1, #46	; 0x2e
   16d20:	mov	r5, r0
   16d24:	mov	r0, r4
   16d28:	bl	11c78 <strrchr@plt>
   16d2c:	cmp	r5, #0
   16d30:	beq	16d5c <__assert_fail@plt+0x4fe8>
   16d34:	ldr	r3, [pc, #60]	; 16d78 <__assert_fail@plt+0x5004>
   16d38:	cmp	r0, #0
   16d3c:	moveq	r0, r3
   16d40:	mov	r1, r0
   16d44:	mov	r0, r5
   16d48:	bl	118a0 <strcmp@plt>
   16d4c:	subs	r3, r0, #0
   16d50:	beq	16d68 <__assert_fail@plt+0x4ff4>
   16d54:	mov	r0, r3
   16d58:	pop	{r4, r5, r6, pc}
   16d5c:	cmp	r0, #0
   16d60:	ldrne	r5, [pc, #16]	; 16d78 <__assert_fail@plt+0x5004>
   16d64:	bne	16d40 <__assert_fail@plt+0x4fcc>
   16d68:	mov	r1, r4
   16d6c:	mov	r0, r6
   16d70:	pop	{r4, r5, r6, lr}
   16d74:	b	118a0 <strcmp@plt>
   16d78:	andeq	r0, r3, r4, lsr #3
   16d7c:	ldr	r3, [r1, #120]	; 0x78
   16d80:	cmp	r3, #9
   16d84:	cmpne	r3, #3
   16d88:	beq	16dc0 <__assert_fail@plt+0x504c>
   16d8c:	ldr	r3, [r1, #124]	; 0x7c
   16d90:	and	r3, r3, #61440	; 0xf000
   16d94:	cmp	r3, #16384	; 0x4000
   16d98:	beq	16dc0 <__assert_fail@plt+0x504c>
   16d9c:	ldr	r3, [r0, #120]	; 0x78
   16da0:	cmp	r3, #9
   16da4:	cmpne	r3, #3
   16da8:	moveq	r3, #1
   16dac:	movne	r3, #0
   16db0:	mvneq	r3, #0
   16db4:	bne	16dd4 <__assert_fail@plt+0x5060>
   16db8:	mov	r0, r3
   16dbc:	bx	lr
   16dc0:	ldr	r3, [r0, #120]	; 0x78
   16dc4:	cmp	r3, #9
   16dc8:	cmpne	r3, #3
   16dcc:	movne	r3, #1
   16dd0:	beq	16dec <__assert_fail@plt+0x5078>
   16dd4:	ldr	r2, [r0, #124]	; 0x7c
   16dd8:	and	r2, r2, #61440	; 0xf000
   16ddc:	cmp	r2, #16384	; 0x4000
   16de0:	subeq	r3, r3, #1
   16de4:	cmp	r3, #0
   16de8:	bne	16db8 <__assert_fail@plt+0x5044>
   16dec:	ldr	r3, [r0, #88]	; 0x58
   16df0:	push	{r4, lr}
   16df4:	ldr	r4, [r1, #88]	; 0x58
   16df8:	ldr	lr, [r1, #92]	; 0x5c
   16dfc:	cmp	r4, r3
   16e00:	ldr	ip, [r0, #92]	; 0x5c
   16e04:	movge	r2, #0
   16e08:	movlt	r2, #1
   16e0c:	cmp	r4, r3
   16e10:	rsble	r2, r2, #0
   16e14:	rsbgt	r2, r2, #1
   16e18:	cmp	lr, ip
   16e1c:	movge	r3, #0
   16e20:	movlt	r3, #1
   16e24:	cmp	lr, ip
   16e28:	rsble	r3, r3, #0
   16e2c:	rsbgt	r3, r3, #1
   16e30:	adds	r3, r3, r2, lsl #1
   16e34:	beq	16e40 <__assert_fail@plt+0x50cc>
   16e38:	mov	r0, r3
   16e3c:	pop	{r4, pc}
   16e40:	ldr	r1, [r1]
   16e44:	ldr	r0, [r0]
   16e48:	pop	{r4, lr}
   16e4c:	b	118a0 <strcmp@plt>
   16e50:	ldr	r3, [r1, #120]	; 0x78
   16e54:	cmp	r3, #9
   16e58:	cmpne	r3, #3
   16e5c:	beq	16e94 <__assert_fail@plt+0x5120>
   16e60:	ldr	r3, [r1, #124]	; 0x7c
   16e64:	and	r3, r3, #61440	; 0xf000
   16e68:	cmp	r3, #16384	; 0x4000
   16e6c:	beq	16e94 <__assert_fail@plt+0x5120>
   16e70:	ldr	r3, [r0, #120]	; 0x78
   16e74:	cmp	r3, #9
   16e78:	cmpne	r3, #3
   16e7c:	moveq	r3, #1
   16e80:	movne	r3, #0
   16e84:	mvneq	r3, #0
   16e88:	bne	16ea8 <__assert_fail@plt+0x5134>
   16e8c:	mov	r0, r3
   16e90:	bx	lr
   16e94:	ldr	r3, [r0, #120]	; 0x78
   16e98:	cmp	r3, #3
   16e9c:	cmpne	r3, #9
   16ea0:	movne	r3, #1
   16ea4:	beq	16ec0 <__assert_fail@plt+0x514c>
   16ea8:	ldr	r2, [r0, #124]	; 0x7c
   16eac:	and	r2, r2, #61440	; 0xf000
   16eb0:	cmp	r2, #16384	; 0x4000
   16eb4:	subeq	r3, r3, #1
   16eb8:	cmp	r3, #0
   16ebc:	bne	16e8c <__assert_fail@plt+0x5118>
   16ec0:	push	{r4, r5, r6, r7, r8, lr}
   16ec4:	mov	r4, r1
   16ec8:	ldr	r6, [r0]
   16ecc:	mov	r1, #46	; 0x2e
   16ed0:	mov	r0, r6
   16ed4:	bl	11c78 <strrchr@plt>
   16ed8:	ldr	r7, [r4]
   16edc:	mov	r1, #46	; 0x2e
   16ee0:	mov	r5, r0
   16ee4:	mov	r0, r7
   16ee8:	bl	11c78 <strrchr@plt>
   16eec:	ldr	r1, [pc, #76]	; 16f40 <__assert_fail@plt+0x51cc>
   16ef0:	cmp	r5, #0
   16ef4:	moveq	r5, r1
   16ef8:	cmp	r0, #0
   16efc:	movne	r4, r0
   16f00:	moveq	r4, r1
   16f04:	bl	11bb8 <__errno_location@plt>
   16f08:	mov	r2, #0
   16f0c:	mov	r1, r4
   16f10:	mov	r3, r0
   16f14:	mov	r0, r5
   16f18:	str	r2, [r3]
   16f1c:	bl	11abc <strcoll@plt>
   16f20:	subs	r3, r0, #0
   16f24:	beq	16f30 <__assert_fail@plt+0x51bc>
   16f28:	mov	r0, r3
   16f2c:	pop	{r4, r5, r6, r7, r8, pc}
   16f30:	mov	r1, r7
   16f34:	mov	r0, r6
   16f38:	pop	{r4, r5, r6, r7, r8, lr}
   16f3c:	b	11abc <strcoll@plt>
   16f40:	andeq	r0, r3, r4, lsr #3
   16f44:	ldr	r3, [r1, #120]	; 0x78
   16f48:	cmp	r3, #9
   16f4c:	cmpne	r3, #3
   16f50:	beq	16f88 <__assert_fail@plt+0x5214>
   16f54:	ldr	r3, [r1, #124]	; 0x7c
   16f58:	and	r3, r3, #61440	; 0xf000
   16f5c:	cmp	r3, #16384	; 0x4000
   16f60:	beq	16f88 <__assert_fail@plt+0x5214>
   16f64:	ldr	r3, [r0, #120]	; 0x78
   16f68:	cmp	r3, #9
   16f6c:	cmpne	r3, #3
   16f70:	moveq	r3, #1
   16f74:	movne	r3, #0
   16f78:	mvneq	r3, #0
   16f7c:	bne	16f9c <__assert_fail@plt+0x5228>
   16f80:	mov	r0, r3
   16f84:	bx	lr
   16f88:	ldr	r3, [r0, #120]	; 0x78
   16f8c:	cmp	r3, #9
   16f90:	cmpne	r3, #3
   16f94:	movne	r3, #1
   16f98:	beq	16fb4 <__assert_fail@plt+0x5240>
   16f9c:	ldr	r2, [r0, #124]	; 0x7c
   16fa0:	and	r2, r2, #61440	; 0xf000
   16fa4:	cmp	r2, #16384	; 0x4000
   16fa8:	subeq	r3, r3, #1
   16fac:	cmp	r3, #0
   16fb0:	bne	16f80 <__assert_fail@plt+0x520c>
   16fb4:	ldr	r3, [r0, #104]	; 0x68
   16fb8:	push	{r4, lr}
   16fbc:	ldr	r4, [r1, #104]	; 0x68
   16fc0:	ldr	lr, [r1, #108]	; 0x6c
   16fc4:	cmp	r4, r3
   16fc8:	ldr	ip, [r0, #108]	; 0x6c
   16fcc:	movge	r2, #0
   16fd0:	movlt	r2, #1
   16fd4:	cmp	r4, r3
   16fd8:	rsble	r2, r2, #0
   16fdc:	rsbgt	r2, r2, #1
   16fe0:	cmp	lr, ip
   16fe4:	movge	r3, #0
   16fe8:	movlt	r3, #1
   16fec:	cmp	lr, ip
   16ff0:	rsble	r3, r3, #0
   16ff4:	rsbgt	r3, r3, #1
   16ff8:	adds	r3, r3, r2, lsl #1
   16ffc:	beq	17008 <__assert_fail@plt+0x5294>
   17000:	mov	r0, r3
   17004:	pop	{r4, pc}
   17008:	ldr	r1, [r1]
   1700c:	ldr	r0, [r0]
   17010:	pop	{r4, lr}
   17014:	b	118a0 <strcmp@plt>
   17018:	ldr	r3, [r1, #120]	; 0x78
   1701c:	cmp	r3, #9
   17020:	cmpne	r3, #3
   17024:	beq	1705c <__assert_fail@plt+0x52e8>
   17028:	ldr	r3, [r1, #124]	; 0x7c
   1702c:	and	r3, r3, #61440	; 0xf000
   17030:	cmp	r3, #16384	; 0x4000
   17034:	beq	1705c <__assert_fail@plt+0x52e8>
   17038:	ldr	r3, [r0, #120]	; 0x78
   1703c:	cmp	r3, #9
   17040:	cmpne	r3, #3
   17044:	moveq	r3, #1
   17048:	movne	r3, #0
   1704c:	mvneq	r3, #0
   17050:	bne	17070 <__assert_fail@plt+0x52fc>
   17054:	mov	r0, r3
   17058:	bx	lr
   1705c:	ldr	r3, [r0, #120]	; 0x78
   17060:	cmp	r3, #9
   17064:	cmpne	r3, #3
   17068:	movne	r3, #1
   1706c:	beq	17088 <__assert_fail@plt+0x5314>
   17070:	ldr	r2, [r0, #124]	; 0x7c
   17074:	and	r2, r2, #61440	; 0xf000
   17078:	cmp	r2, #16384	; 0x4000
   1707c:	subeq	r3, r3, #1
   17080:	cmp	r3, #0
   17084:	bne	17054 <__assert_fail@plt+0x52e0>
   17088:	ldr	r3, [r0, #96]	; 0x60
   1708c:	push	{r4, lr}
   17090:	ldr	r4, [r1, #96]	; 0x60
   17094:	ldr	lr, [r1, #100]	; 0x64
   17098:	cmp	r4, r3
   1709c:	ldr	ip, [r0, #100]	; 0x64
   170a0:	movge	r2, #0
   170a4:	movlt	r2, #1
   170a8:	cmp	r4, r3
   170ac:	rsble	r2, r2, #0
   170b0:	rsbgt	r2, r2, #1
   170b4:	cmp	lr, ip
   170b8:	movge	r3, #0
   170bc:	movlt	r3, #1
   170c0:	cmp	lr, ip
   170c4:	rsble	r3, r3, #0
   170c8:	rsbgt	r3, r3, #1
   170cc:	adds	r3, r3, r2, lsl #1
   170d0:	beq	170dc <__assert_fail@plt+0x5368>
   170d4:	mov	r0, r3
   170d8:	pop	{r4, pc}
   170dc:	ldr	r1, [r1]
   170e0:	ldr	r0, [r0]
   170e4:	pop	{r4, lr}
   170e8:	b	118a0 <strcmp@plt>
   170ec:	ldr	r3, [r1, #120]	; 0x78
   170f0:	push	{r4, r5, r6, lr}
   170f4:	cmp	r3, #9
   170f8:	cmpne	r3, #3
   170fc:	beq	17138 <__assert_fail@plt+0x53c4>
   17100:	ldr	r3, [r1, #124]	; 0x7c
   17104:	and	r3, r3, #61440	; 0xf000
   17108:	cmp	r3, #16384	; 0x4000
   1710c:	beq	17138 <__assert_fail@plt+0x53c4>
   17110:	ldr	r3, [r0, #120]	; 0x78
   17114:	cmp	r3, #9
   17118:	cmpne	r3, #3
   1711c:	movne	r3, #0
   17120:	moveq	r3, #1
   17124:	movne	r4, r3
   17128:	bne	1714c <__assert_fail@plt+0x53d8>
   1712c:	mvn	r4, #0
   17130:	mov	r0, r4
   17134:	pop	{r4, r5, r6, pc}
   17138:	ldr	r3, [r0, #120]	; 0x78
   1713c:	cmp	r3, #3
   17140:	cmpne	r3, #9
   17144:	movne	r4, #1
   17148:	beq	17164 <__assert_fail@plt+0x53f0>
   1714c:	ldr	r3, [r0, #124]	; 0x7c
   17150:	and	r3, r3, #61440	; 0xf000
   17154:	cmp	r3, #16384	; 0x4000
   17158:	subeq	r4, r4, #1
   1715c:	cmp	r4, #0
   17160:	bne	17130 <__assert_fail@plt+0x53bc>
   17164:	ldr	r4, [r1, #96]	; 0x60
   17168:	ldr	lr, [r0, #96]	; 0x60
   1716c:	ldr	ip, [r0, #100]	; 0x64
   17170:	cmp	lr, r4
   17174:	ldr	r2, [r1, #100]	; 0x64
   17178:	movge	r3, #0
   1717c:	movlt	r3, #1
   17180:	cmp	lr, r4
   17184:	rsble	r3, r3, #0
   17188:	rsbgt	r3, r3, #1
   1718c:	cmp	ip, r2
   17190:	movge	r4, #0
   17194:	movlt	r4, #1
   17198:	cmp	ip, r2
   1719c:	rsble	r4, r4, #0
   171a0:	rsbgt	r4, r4, #1
   171a4:	adds	r4, r4, r3, lsl #1
   171a8:	bne	17130 <__assert_fail@plt+0x53bc>
   171ac:	ldr	r5, [r1]
   171b0:	ldr	r6, [r0]
   171b4:	bl	11bb8 <__errno_location@plt>
   171b8:	mov	r1, r6
   171bc:	str	r4, [r0]
   171c0:	mov	r0, r5
   171c4:	pop	{r4, r5, r6, lr}
   171c8:	b	11abc <strcoll@plt>
   171cc:	ldr	r3, [r1, #120]	; 0x78
   171d0:	mov	r2, r1
   171d4:	cmp	r3, #9
   171d8:	cmpne	r3, #3
   171dc:	beq	17214 <__assert_fail@plt+0x54a0>
   171e0:	ldr	r3, [r1, #124]	; 0x7c
   171e4:	and	r3, r3, #61440	; 0xf000
   171e8:	cmp	r3, #16384	; 0x4000
   171ec:	beq	17214 <__assert_fail@plt+0x54a0>
   171f0:	ldr	r3, [r0, #120]	; 0x78
   171f4:	cmp	r3, #9
   171f8:	cmpne	r3, #3
   171fc:	moveq	r3, #1
   17200:	movne	r3, #0
   17204:	mvneq	r3, #0
   17208:	bne	17228 <__assert_fail@plt+0x54b4>
   1720c:	mov	r0, r3
   17210:	bx	lr
   17214:	ldr	r3, [r0, #120]	; 0x78
   17218:	cmp	r3, #9
   1721c:	cmpne	r3, #3
   17220:	movne	r3, #1
   17224:	beq	17240 <__assert_fail@plt+0x54cc>
   17228:	ldr	r1, [r0, #124]	; 0x7c
   1722c:	and	r1, r1, #61440	; 0xf000
   17230:	cmp	r1, #16384	; 0x4000
   17234:	subeq	r3, r3, #1
   17238:	cmp	r3, #0
   1723c:	bne	1720c <__assert_fail@plt+0x5498>
   17240:	ldr	r3, [r2, #96]	; 0x60
   17244:	push	{r4, lr}
   17248:	ldr	r4, [r0, #96]	; 0x60
   1724c:	ldr	lr, [r0, #100]	; 0x64
   17250:	cmp	r4, r3
   17254:	ldr	ip, [r2, #100]	; 0x64
   17258:	movge	r1, #0
   1725c:	movlt	r1, #1
   17260:	cmp	r4, r3
   17264:	rsble	r1, r1, #0
   17268:	rsbgt	r1, r1, #1
   1726c:	cmp	lr, ip
   17270:	movge	r3, #0
   17274:	movlt	r3, #1
   17278:	cmp	lr, ip
   1727c:	rsble	r3, r3, #0
   17280:	rsbgt	r3, r3, #1
   17284:	adds	r3, r3, r1, lsl #1
   17288:	beq	17294 <__assert_fail@plt+0x5520>
   1728c:	mov	r0, r3
   17290:	pop	{r4, pc}
   17294:	ldr	r1, [r0]
   17298:	pop	{r4, lr}
   1729c:	ldr	r0, [r2]
   172a0:	b	118a0 <strcmp@plt>
   172a4:	ldr	r3, [r1, #120]	; 0x78
   172a8:	push	{r4, r5, r6, lr}
   172ac:	cmp	r3, #9
   172b0:	cmpne	r3, #3
   172b4:	beq	172f0 <__assert_fail@plt+0x557c>
   172b8:	ldr	r3, [r1, #124]	; 0x7c
   172bc:	and	r3, r3, #61440	; 0xf000
   172c0:	cmp	r3, #16384	; 0x4000
   172c4:	beq	172f0 <__assert_fail@plt+0x557c>
   172c8:	ldr	r3, [r0, #120]	; 0x78
   172cc:	cmp	r3, #9
   172d0:	cmpne	r3, #3
   172d4:	movne	r3, #0
   172d8:	moveq	r3, #1
   172dc:	movne	r4, r3
   172e0:	bne	17304 <__assert_fail@plt+0x5590>
   172e4:	mvn	r4, #0
   172e8:	mov	r0, r4
   172ec:	pop	{r4, r5, r6, pc}
   172f0:	ldr	r3, [r0, #120]	; 0x78
   172f4:	cmp	r3, #3
   172f8:	cmpne	r3, #9
   172fc:	movne	r4, #1
   17300:	beq	1731c <__assert_fail@plt+0x55a8>
   17304:	ldr	r3, [r0, #124]	; 0x7c
   17308:	and	r3, r3, #61440	; 0xf000
   1730c:	cmp	r3, #16384	; 0x4000
   17310:	subeq	r4, r4, #1
   17314:	cmp	r4, #0
   17318:	bne	172e8 <__assert_fail@plt+0x5574>
   1731c:	ldr	r4, [r0, #96]	; 0x60
   17320:	ldr	lr, [r1, #96]	; 0x60
   17324:	ldr	ip, [r1, #100]	; 0x64
   17328:	cmp	lr, r4
   1732c:	ldr	r2, [r0, #100]	; 0x64
   17330:	movge	r3, #0
   17334:	movlt	r3, #1
   17338:	cmp	lr, r4
   1733c:	rsble	r3, r3, #0
   17340:	rsbgt	r3, r3, #1
   17344:	cmp	ip, r2
   17348:	movge	r4, #0
   1734c:	movlt	r4, #1
   17350:	cmp	ip, r2
   17354:	rsble	r4, r4, #0
   17358:	rsbgt	r4, r4, #1
   1735c:	adds	r4, r4, r3, lsl #1
   17360:	bne	172e8 <__assert_fail@plt+0x5574>
   17364:	ldr	r5, [r0]
   17368:	ldr	r6, [r1]
   1736c:	bl	11bb8 <__errno_location@plt>
   17370:	mov	r1, r6
   17374:	str	r4, [r0]
   17378:	mov	r0, r5
   1737c:	pop	{r4, r5, r6, lr}
   17380:	b	11abc <strcoll@plt>
   17384:	ldr	r3, [r1, #120]	; 0x78
   17388:	push	{r4, r5, r6, lr}
   1738c:	cmp	r3, #9
   17390:	cmpne	r3, #3
   17394:	beq	173d0 <__assert_fail@plt+0x565c>
   17398:	ldr	r3, [r1, #124]	; 0x7c
   1739c:	and	r3, r3, #61440	; 0xf000
   173a0:	cmp	r3, #16384	; 0x4000
   173a4:	beq	173d0 <__assert_fail@plt+0x565c>
   173a8:	ldr	r3, [r0, #120]	; 0x78
   173ac:	cmp	r3, #9
   173b0:	cmpne	r3, #3
   173b4:	movne	r3, #0
   173b8:	moveq	r3, #1
   173bc:	movne	r4, r3
   173c0:	bne	173e4 <__assert_fail@plt+0x5670>
   173c4:	mvn	r4, #0
   173c8:	mov	r0, r4
   173cc:	pop	{r4, r5, r6, pc}
   173d0:	ldr	r3, [r0, #120]	; 0x78
   173d4:	cmp	r3, #3
   173d8:	cmpne	r3, #9
   173dc:	movne	r4, #1
   173e0:	beq	173fc <__assert_fail@plt+0x5688>
   173e4:	ldr	r3, [r0, #124]	; 0x7c
   173e8:	and	r3, r3, #61440	; 0xf000
   173ec:	cmp	r3, #16384	; 0x4000
   173f0:	subeq	r4, r4, #1
   173f4:	cmp	r4, #0
   173f8:	bne	173c8 <__assert_fail@plt+0x5654>
   173fc:	ldr	r4, [r0, #88]	; 0x58
   17400:	ldr	lr, [r1, #88]	; 0x58
   17404:	ldr	ip, [r1, #92]	; 0x5c
   17408:	cmp	lr, r4
   1740c:	ldr	r2, [r0, #92]	; 0x5c
   17410:	movge	r3, #0
   17414:	movlt	r3, #1
   17418:	cmp	lr, r4
   1741c:	rsble	r3, r3, #0
   17420:	rsbgt	r3, r3, #1
   17424:	cmp	ip, r2
   17428:	movge	r4, #0
   1742c:	movlt	r4, #1
   17430:	cmp	ip, r2
   17434:	rsble	r4, r4, #0
   17438:	rsbgt	r4, r4, #1
   1743c:	adds	r4, r4, r3, lsl #1
   17440:	bne	173c8 <__assert_fail@plt+0x5654>
   17444:	ldr	r5, [r0]
   17448:	ldr	r6, [r1]
   1744c:	bl	11bb8 <__errno_location@plt>
   17450:	mov	r1, r6
   17454:	str	r4, [r0]
   17458:	mov	r0, r5
   1745c:	pop	{r4, r5, r6, lr}
   17460:	b	11abc <strcoll@plt>
   17464:	ldr	r3, [r1, #120]	; 0x78
   17468:	push	{r4, r5, r6, lr}
   1746c:	cmp	r3, #9
   17470:	cmpne	r3, #3
   17474:	beq	174b0 <__assert_fail@plt+0x573c>
   17478:	ldr	r3, [r1, #124]	; 0x7c
   1747c:	and	r3, r3, #61440	; 0xf000
   17480:	cmp	r3, #16384	; 0x4000
   17484:	beq	174b0 <__assert_fail@plt+0x573c>
   17488:	ldr	r3, [r0, #120]	; 0x78
   1748c:	cmp	r3, #9
   17490:	cmpne	r3, #3
   17494:	movne	r3, #0
   17498:	moveq	r3, #1
   1749c:	movne	r4, r3
   174a0:	bne	174c4 <__assert_fail@plt+0x5750>
   174a4:	mvn	r4, #0
   174a8:	mov	r0, r4
   174ac:	pop	{r4, r5, r6, pc}
   174b0:	ldr	r3, [r0, #120]	; 0x78
   174b4:	cmp	r3, #3
   174b8:	cmpne	r3, #9
   174bc:	movne	r4, #1
   174c0:	beq	174dc <__assert_fail@plt+0x5768>
   174c4:	ldr	r3, [r0, #124]	; 0x7c
   174c8:	and	r3, r3, #61440	; 0xf000
   174cc:	cmp	r3, #16384	; 0x4000
   174d0:	subeq	r4, r4, #1
   174d4:	cmp	r4, #0
   174d8:	bne	174a8 <__assert_fail@plt+0x5734>
   174dc:	ldr	r4, [r1, #88]	; 0x58
   174e0:	ldr	lr, [r0, #88]	; 0x58
   174e4:	ldr	ip, [r0, #92]	; 0x5c
   174e8:	cmp	lr, r4
   174ec:	ldr	r2, [r1, #92]	; 0x5c
   174f0:	movge	r3, #0
   174f4:	movlt	r3, #1
   174f8:	cmp	lr, r4
   174fc:	rsble	r3, r3, #0
   17500:	rsbgt	r3, r3, #1
   17504:	cmp	ip, r2
   17508:	movge	r4, #0
   1750c:	movlt	r4, #1
   17510:	cmp	ip, r2
   17514:	rsble	r4, r4, #0
   17518:	rsbgt	r4, r4, #1
   1751c:	adds	r4, r4, r3, lsl #1
   17520:	bne	174a8 <__assert_fail@plt+0x5734>
   17524:	ldr	r5, [r1]
   17528:	ldr	r6, [r0]
   1752c:	bl	11bb8 <__errno_location@plt>
   17530:	mov	r1, r6
   17534:	str	r4, [r0]
   17538:	mov	r0, r5
   1753c:	pop	{r4, r5, r6, lr}
   17540:	b	11abc <strcoll@plt>
   17544:	ldr	r3, [r1, #120]	; 0x78
   17548:	mov	r2, r1
   1754c:	cmp	r3, #9
   17550:	cmpne	r3, #3
   17554:	beq	1758c <__assert_fail@plt+0x5818>
   17558:	ldr	r3, [r1, #124]	; 0x7c
   1755c:	and	r3, r3, #61440	; 0xf000
   17560:	cmp	r3, #16384	; 0x4000
   17564:	beq	1758c <__assert_fail@plt+0x5818>
   17568:	ldr	r3, [r0, #120]	; 0x78
   1756c:	cmp	r3, #9
   17570:	cmpne	r3, #3
   17574:	moveq	r3, #1
   17578:	movne	r3, #0
   1757c:	mvneq	r3, #0
   17580:	bne	175a0 <__assert_fail@plt+0x582c>
   17584:	mov	r0, r3
   17588:	bx	lr
   1758c:	ldr	r3, [r0, #120]	; 0x78
   17590:	cmp	r3, #9
   17594:	cmpne	r3, #3
   17598:	movne	r3, #1
   1759c:	beq	175b8 <__assert_fail@plt+0x5844>
   175a0:	ldr	r1, [r0, #124]	; 0x7c
   175a4:	and	r1, r1, #61440	; 0xf000
   175a8:	cmp	r1, #16384	; 0x4000
   175ac:	subeq	r3, r3, #1
   175b0:	cmp	r3, #0
   175b4:	bne	17584 <__assert_fail@plt+0x5810>
   175b8:	ldr	r3, [r2, #88]	; 0x58
   175bc:	push	{r4, lr}
   175c0:	ldr	r4, [r0, #88]	; 0x58
   175c4:	ldr	lr, [r0, #92]	; 0x5c
   175c8:	cmp	r4, r3
   175cc:	ldr	ip, [r2, #92]	; 0x5c
   175d0:	movge	r1, #0
   175d4:	movlt	r1, #1
   175d8:	cmp	r4, r3
   175dc:	rsble	r1, r1, #0
   175e0:	rsbgt	r1, r1, #1
   175e4:	cmp	lr, ip
   175e8:	movge	r3, #0
   175ec:	movlt	r3, #1
   175f0:	cmp	lr, ip
   175f4:	rsble	r3, r3, #0
   175f8:	rsbgt	r3, r3, #1
   175fc:	adds	r3, r3, r1, lsl #1
   17600:	beq	1760c <__assert_fail@plt+0x5898>
   17604:	mov	r0, r3
   17608:	pop	{r4, pc}
   1760c:	ldr	r1, [r0]
   17610:	pop	{r4, lr}
   17614:	ldr	r0, [r2]
   17618:	b	118a0 <strcmp@plt>
   1761c:	ldr	r3, [r1, #120]	; 0x78
   17620:	push	{r4, r5, r6, lr}
   17624:	cmp	r3, #9
   17628:	cmpne	r3, #3
   1762c:	beq	17668 <__assert_fail@plt+0x58f4>
   17630:	ldr	r3, [r1, #124]	; 0x7c
   17634:	and	r3, r3, #61440	; 0xf000
   17638:	cmp	r3, #16384	; 0x4000
   1763c:	beq	17668 <__assert_fail@plt+0x58f4>
   17640:	ldr	r3, [r0, #120]	; 0x78
   17644:	cmp	r3, #9
   17648:	cmpne	r3, #3
   1764c:	movne	r3, #0
   17650:	moveq	r3, #1
   17654:	movne	r4, r3
   17658:	bne	1767c <__assert_fail@plt+0x5908>
   1765c:	mvn	r4, #0
   17660:	mov	r0, r4
   17664:	pop	{r4, r5, r6, pc}
   17668:	ldr	r3, [r0, #120]	; 0x78
   1766c:	cmp	r3, #3
   17670:	cmpne	r3, #9
   17674:	movne	r4, #1
   17678:	beq	17694 <__assert_fail@plt+0x5920>
   1767c:	ldr	r3, [r0, #124]	; 0x7c
   17680:	and	r3, r3, #61440	; 0xf000
   17684:	cmp	r3, #16384	; 0x4000
   17688:	subeq	r4, r4, #1
   1768c:	cmp	r4, #0
   17690:	bne	17660 <__assert_fail@plt+0x58ec>
   17694:	ldr	r4, [r0, #96]	; 0x60
   17698:	ldr	lr, [r1, #96]	; 0x60
   1769c:	ldr	ip, [r1, #100]	; 0x64
   176a0:	cmp	lr, r4
   176a4:	ldr	r2, [r0, #100]	; 0x64
   176a8:	movge	r3, #0
   176ac:	movlt	r3, #1
   176b0:	cmp	lr, r4
   176b4:	rsble	r3, r3, #0
   176b8:	rsbgt	r3, r3, #1
   176bc:	cmp	ip, r2
   176c0:	movge	r4, #0
   176c4:	movlt	r4, #1
   176c8:	cmp	ip, r2
   176cc:	rsble	r4, r4, #0
   176d0:	rsbgt	r4, r4, #1
   176d4:	adds	r4, r4, r3, lsl #1
   176d8:	bne	17660 <__assert_fail@plt+0x58ec>
   176dc:	ldr	r5, [r0]
   176e0:	ldr	r6, [r1]
   176e4:	bl	11bb8 <__errno_location@plt>
   176e8:	mov	r1, r6
   176ec:	str	r4, [r0]
   176f0:	mov	r0, r5
   176f4:	pop	{r4, r5, r6, lr}
   176f8:	b	11abc <strcoll@plt>
   176fc:	ldr	r3, [r1, #120]	; 0x78
   17700:	cmp	r3, #9
   17704:	cmpne	r3, #3
   17708:	beq	17740 <__assert_fail@plt+0x59cc>
   1770c:	ldr	r3, [r1, #124]	; 0x7c
   17710:	and	r3, r3, #61440	; 0xf000
   17714:	cmp	r3, #16384	; 0x4000
   17718:	beq	17740 <__assert_fail@plt+0x59cc>
   1771c:	ldr	r3, [r0, #120]	; 0x78
   17720:	cmp	r3, #9
   17724:	cmpne	r3, #3
   17728:	moveq	r3, #1
   1772c:	movne	r3, #0
   17730:	mvneq	r3, #0
   17734:	bne	17754 <__assert_fail@plt+0x59e0>
   17738:	mov	r0, r3
   1773c:	bx	lr
   17740:	ldr	r3, [r0, #120]	; 0x78
   17744:	cmp	r3, #9
   17748:	cmpne	r3, #3
   1774c:	movne	r3, #1
   17750:	beq	1776c <__assert_fail@plt+0x59f8>
   17754:	ldr	r2, [r0, #124]	; 0x7c
   17758:	and	r2, r2, #61440	; 0xf000
   1775c:	cmp	r2, #16384	; 0x4000
   17760:	subeq	r3, r3, #1
   17764:	cmp	r3, #0
   17768:	bne	17738 <__assert_fail@plt+0x59c4>
   1776c:	ldr	r3, [r0, #96]	; 0x60
   17770:	push	{r4, lr}
   17774:	ldr	r4, [r1, #96]	; 0x60
   17778:	ldr	lr, [r1, #100]	; 0x64
   1777c:	cmp	r4, r3
   17780:	ldr	ip, [r0, #100]	; 0x64
   17784:	movge	r2, #0
   17788:	movlt	r2, #1
   1778c:	cmp	r4, r3
   17790:	rsble	r2, r2, #0
   17794:	rsbgt	r2, r2, #1
   17798:	cmp	lr, ip
   1779c:	movge	r3, #0
   177a0:	movlt	r3, #1
   177a4:	cmp	lr, ip
   177a8:	rsble	r3, r3, #0
   177ac:	rsbgt	r3, r3, #1
   177b0:	adds	r3, r3, r2, lsl #1
   177b4:	beq	177c0 <__assert_fail@plt+0x5a4c>
   177b8:	mov	r0, r3
   177bc:	pop	{r4, pc}
   177c0:	ldr	r1, [r1]
   177c4:	ldr	r0, [r0]
   177c8:	pop	{r4, lr}
   177cc:	b	118a0 <strcmp@plt>
   177d0:	ldr	r3, [r1, #120]	; 0x78
   177d4:	push	{r4, r5, r6, lr}
   177d8:	cmp	r3, #9
   177dc:	cmpne	r3, #3
   177e0:	beq	1781c <__assert_fail@plt+0x5aa8>
   177e4:	ldr	r3, [r1, #124]	; 0x7c
   177e8:	and	r3, r3, #61440	; 0xf000
   177ec:	cmp	r3, #16384	; 0x4000
   177f0:	beq	1781c <__assert_fail@plt+0x5aa8>
   177f4:	ldr	r3, [r0, #120]	; 0x78
   177f8:	cmp	r3, #9
   177fc:	cmpne	r3, #3
   17800:	movne	r3, #0
   17804:	moveq	r3, #1
   17808:	movne	r4, r3
   1780c:	bne	17830 <__assert_fail@plt+0x5abc>
   17810:	mvn	r4, #0
   17814:	mov	r0, r4
   17818:	pop	{r4, r5, r6, pc}
   1781c:	ldr	r3, [r0, #120]	; 0x78
   17820:	cmp	r3, #3
   17824:	cmpne	r3, #9
   17828:	movne	r4, #1
   1782c:	beq	17848 <__assert_fail@plt+0x5ad4>
   17830:	ldr	r3, [r0, #124]	; 0x7c
   17834:	and	r3, r3, #61440	; 0xf000
   17838:	cmp	r3, #16384	; 0x4000
   1783c:	subeq	r4, r4, #1
   17840:	cmp	r4, #0
   17844:	bne	17814 <__assert_fail@plt+0x5aa0>
   17848:	ldr	r4, [r1, #96]	; 0x60
   1784c:	ldr	lr, [r0, #96]	; 0x60
   17850:	ldr	ip, [r0, #100]	; 0x64
   17854:	cmp	lr, r4
   17858:	ldr	r2, [r1, #100]	; 0x64
   1785c:	movge	r3, #0
   17860:	movlt	r3, #1
   17864:	cmp	lr, r4
   17868:	rsble	r3, r3, #0
   1786c:	rsbgt	r3, r3, #1
   17870:	cmp	ip, r2
   17874:	movge	r4, #0
   17878:	movlt	r4, #1
   1787c:	cmp	ip, r2
   17880:	rsble	r4, r4, #0
   17884:	rsbgt	r4, r4, #1
   17888:	adds	r4, r4, r3, lsl #1
   1788c:	bne	17814 <__assert_fail@plt+0x5aa0>
   17890:	ldr	r5, [r1]
   17894:	ldr	r6, [r0]
   17898:	bl	11bb8 <__errno_location@plt>
   1789c:	mov	r1, r6
   178a0:	str	r4, [r0]
   178a4:	mov	r0, r5
   178a8:	pop	{r4, r5, r6, lr}
   178ac:	b	11abc <strcoll@plt>
   178b0:	ldr	r3, [r1, #120]	; 0x78
   178b4:	mov	r2, r1
   178b8:	cmp	r3, #9
   178bc:	cmpne	r3, #3
   178c0:	beq	178f8 <__assert_fail@plt+0x5b84>
   178c4:	ldr	r3, [r1, #124]	; 0x7c
   178c8:	and	r3, r3, #61440	; 0xf000
   178cc:	cmp	r3, #16384	; 0x4000
   178d0:	beq	178f8 <__assert_fail@plt+0x5b84>
   178d4:	ldr	r3, [r0, #120]	; 0x78
   178d8:	cmp	r3, #9
   178dc:	cmpne	r3, #3
   178e0:	moveq	r3, #1
   178e4:	movne	r3, #0
   178e8:	mvneq	r3, #0
   178ec:	bne	1790c <__assert_fail@plt+0x5b98>
   178f0:	mov	r0, r3
   178f4:	bx	lr
   178f8:	ldr	r3, [r0, #120]	; 0x78
   178fc:	cmp	r3, #9
   17900:	cmpne	r3, #3
   17904:	movne	r3, #1
   17908:	beq	17924 <__assert_fail@plt+0x5bb0>
   1790c:	ldr	r1, [r0, #124]	; 0x7c
   17910:	and	r1, r1, #61440	; 0xf000
   17914:	cmp	r1, #16384	; 0x4000
   17918:	subeq	r3, r3, #1
   1791c:	cmp	r3, #0
   17920:	bne	178f0 <__assert_fail@plt+0x5b7c>
   17924:	ldr	r3, [r2, #96]	; 0x60
   17928:	push	{r4, lr}
   1792c:	ldr	r4, [r0, #96]	; 0x60
   17930:	ldr	lr, [r0, #100]	; 0x64
   17934:	cmp	r4, r3
   17938:	ldr	ip, [r2, #100]	; 0x64
   1793c:	movge	r1, #0
   17940:	movlt	r1, #1
   17944:	cmp	r4, r3
   17948:	rsble	r1, r1, #0
   1794c:	rsbgt	r1, r1, #1
   17950:	cmp	lr, ip
   17954:	movge	r3, #0
   17958:	movlt	r3, #1
   1795c:	cmp	lr, ip
   17960:	rsble	r3, r3, #0
   17964:	rsbgt	r3, r3, #1
   17968:	adds	r3, r3, r1, lsl #1
   1796c:	beq	17978 <__assert_fail@plt+0x5c04>
   17970:	mov	r0, r3
   17974:	pop	{r4, pc}
   17978:	ldr	r1, [r0]
   1797c:	pop	{r4, lr}
   17980:	ldr	r0, [r2]
   17984:	b	118a0 <strcmp@plt>
   17988:	ldr	r3, [r1, #120]	; 0x78
   1798c:	cmp	r3, #9
   17990:	cmpne	r3, #3
   17994:	beq	179e0 <__assert_fail@plt+0x5c6c>
   17998:	ldr	r3, [r1, #124]	; 0x7c
   1799c:	and	r3, r3, #61440	; 0xf000
   179a0:	cmp	r3, #16384	; 0x4000
   179a4:	beq	179e0 <__assert_fail@plt+0x5c6c>
   179a8:	ldr	r3, [r0, #120]	; 0x78
   179ac:	cmp	r3, #3
   179b0:	cmpne	r3, #9
   179b4:	moveq	r3, #1
   179b8:	movne	r3, #0
   179bc:	beq	17a4c <__assert_fail@plt+0x5cd8>
   179c0:	ldr	r2, [r0, #124]	; 0x7c
   179c4:	and	r2, r2, #61440	; 0xf000
   179c8:	cmp	r2, #16384	; 0x4000
   179cc:	subeq	r3, r3, #1
   179d0:	cmp	r3, #0
   179d4:	beq	179f4 <__assert_fail@plt+0x5c80>
   179d8:	mov	r0, r3
   179dc:	bx	lr
   179e0:	ldr	r3, [r0, #120]	; 0x78
   179e4:	cmp	r3, #9
   179e8:	cmpne	r3, #3
   179ec:	movne	r3, #1
   179f0:	bne	179c0 <__assert_fail@plt+0x5c4c>
   179f4:	ldrd	r2, [r1, #64]	; 0x40
   179f8:	push	{r4, r5, r6, lr}
   179fc:	ldrd	r4, [r0, #64]	; 0x40
   17a00:	cmp	r2, r4
   17a04:	sbcs	ip, r3, r5
   17a08:	blt	17a40 <__assert_fail@plt+0x5ccc>
   17a0c:	cmp	r4, r2
   17a10:	sbcs	r3, r5, r3
   17a14:	blt	17a58 <__assert_fail@plt+0x5ce4>
   17a18:	ldr	r4, [r0]
   17a1c:	ldr	r5, [r1]
   17a20:	bl	11bb8 <__errno_location@plt>
   17a24:	mov	r2, #0
   17a28:	mov	r1, r5
   17a2c:	mov	r3, r0
   17a30:	mov	r0, r4
   17a34:	str	r2, [r3]
   17a38:	pop	{r4, r5, r6, lr}
   17a3c:	b	11abc <strcoll@plt>
   17a40:	mvn	r3, #0
   17a44:	mov	r0, r3
   17a48:	pop	{r4, r5, r6, pc}
   17a4c:	mvn	r3, #0
   17a50:	mov	r0, r3
   17a54:	bx	lr
   17a58:	mov	r3, #1
   17a5c:	b	17a44 <__assert_fail@plt+0x5cd0>
   17a60:	ldr	r3, [r1, #120]	; 0x78
   17a64:	cmp	r3, #9
   17a68:	cmpne	r3, #3
   17a6c:	beq	17ab8 <__assert_fail@plt+0x5d44>
   17a70:	ldr	r3, [r1, #124]	; 0x7c
   17a74:	and	r3, r3, #61440	; 0xf000
   17a78:	cmp	r3, #16384	; 0x4000
   17a7c:	beq	17ab8 <__assert_fail@plt+0x5d44>
   17a80:	ldr	r3, [r0, #120]	; 0x78
   17a84:	cmp	r3, #9
   17a88:	cmpne	r3, #3
   17a8c:	moveq	r3, #1
   17a90:	movne	r3, #0
   17a94:	beq	17b10 <__assert_fail@plt+0x5d9c>
   17a98:	ldr	r2, [r0, #124]	; 0x7c
   17a9c:	and	r2, r2, #61440	; 0xf000
   17aa0:	cmp	r2, #16384	; 0x4000
   17aa4:	subeq	r3, r3, #1
   17aa8:	cmp	r3, #0
   17aac:	beq	17acc <__assert_fail@plt+0x5d58>
   17ab0:	mov	r0, r3
   17ab4:	bx	lr
   17ab8:	ldr	r3, [r0, #120]	; 0x78
   17abc:	cmp	r3, #9
   17ac0:	cmpne	r3, #3
   17ac4:	movne	r3, #1
   17ac8:	bne	17a98 <__assert_fail@plt+0x5d24>
   17acc:	ldrd	r2, [r1, #64]	; 0x40
   17ad0:	push	{r4, r5}
   17ad4:	ldrd	r4, [r0, #64]	; 0x40
   17ad8:	cmp	r2, r4
   17adc:	sbcs	ip, r3, r5
   17ae0:	blt	17b00 <__assert_fail@plt+0x5d8c>
   17ae4:	cmp	r4, r2
   17ae8:	sbcs	r3, r5, r3
   17aec:	blt	17b1c <__assert_fail@plt+0x5da8>
   17af0:	ldr	r1, [r1]
   17af4:	ldr	r0, [r0]
   17af8:	pop	{r4, r5}
   17afc:	b	118a0 <strcmp@plt>
   17b00:	mvn	r3, #0
   17b04:	mov	r0, r3
   17b08:	pop	{r4, r5}
   17b0c:	bx	lr
   17b10:	mvn	r3, #0
   17b14:	mov	r0, r3
   17b18:	bx	lr
   17b1c:	mov	r3, #1
   17b20:	b	17b04 <__assert_fail@plt+0x5d90>
   17b24:	ldr	r3, [r1, #120]	; 0x78
   17b28:	cmp	r3, #9
   17b2c:	cmpne	r3, #3
   17b30:	beq	17b7c <__assert_fail@plt+0x5e08>
   17b34:	ldr	r3, [r1, #124]	; 0x7c
   17b38:	and	r3, r3, #61440	; 0xf000
   17b3c:	cmp	r3, #16384	; 0x4000
   17b40:	beq	17b7c <__assert_fail@plt+0x5e08>
   17b44:	ldr	r3, [r0, #120]	; 0x78
   17b48:	cmp	r3, #3
   17b4c:	cmpne	r3, #9
   17b50:	moveq	r3, #1
   17b54:	movne	r3, #0
   17b58:	beq	17be8 <__assert_fail@plt+0x5e74>
   17b5c:	ldr	r2, [r0, #124]	; 0x7c
   17b60:	and	r2, r2, #61440	; 0xf000
   17b64:	cmp	r2, #16384	; 0x4000
   17b68:	subeq	r3, r3, #1
   17b6c:	cmp	r3, #0
   17b70:	beq	17b90 <__assert_fail@plt+0x5e1c>
   17b74:	mov	r0, r3
   17b78:	bx	lr
   17b7c:	ldr	r3, [r0, #120]	; 0x78
   17b80:	cmp	r3, #9
   17b84:	cmpne	r3, #3
   17b88:	movne	r3, #1
   17b8c:	bne	17b5c <__assert_fail@plt+0x5de8>
   17b90:	ldrd	r2, [r0, #64]	; 0x40
   17b94:	push	{r4, r5, r6, lr}
   17b98:	ldrd	r4, [r1, #64]	; 0x40
   17b9c:	cmp	r2, r4
   17ba0:	sbcs	ip, r3, r5
   17ba4:	blt	17bdc <__assert_fail@plt+0x5e68>
   17ba8:	cmp	r4, r2
   17bac:	sbcs	r3, r5, r3
   17bb0:	blt	17bf4 <__assert_fail@plt+0x5e80>
   17bb4:	ldr	r4, [r1]
   17bb8:	ldr	r5, [r0]
   17bbc:	bl	11bb8 <__errno_location@plt>
   17bc0:	mov	r2, #0
   17bc4:	mov	r1, r5
   17bc8:	mov	r3, r0
   17bcc:	mov	r0, r4
   17bd0:	str	r2, [r3]
   17bd4:	pop	{r4, r5, r6, lr}
   17bd8:	b	11abc <strcoll@plt>
   17bdc:	mvn	r3, #0
   17be0:	mov	r0, r3
   17be4:	pop	{r4, r5, r6, pc}
   17be8:	mvn	r3, #0
   17bec:	mov	r0, r3
   17bf0:	bx	lr
   17bf4:	mov	r3, #1
   17bf8:	b	17be0 <__assert_fail@plt+0x5e6c>
   17bfc:	ldr	r3, [r1, #120]	; 0x78
   17c00:	mov	r2, r1
   17c04:	cmp	r3, #9
   17c08:	cmpne	r3, #3
   17c0c:	beq	17c58 <__assert_fail@plt+0x5ee4>
   17c10:	ldr	r3, [r1, #124]	; 0x7c
   17c14:	and	r3, r3, #61440	; 0xf000
   17c18:	cmp	r3, #16384	; 0x4000
   17c1c:	beq	17c58 <__assert_fail@plt+0x5ee4>
   17c20:	ldr	r3, [r0, #120]	; 0x78
   17c24:	cmp	r3, #9
   17c28:	cmpne	r3, #3
   17c2c:	moveq	r3, #1
   17c30:	movne	r3, #0
   17c34:	beq	17cb0 <__assert_fail@plt+0x5f3c>
   17c38:	ldr	r1, [r0, #124]	; 0x7c
   17c3c:	and	r1, r1, #61440	; 0xf000
   17c40:	cmp	r1, #16384	; 0x4000
   17c44:	subeq	r3, r3, #1
   17c48:	cmp	r3, #0
   17c4c:	beq	17c6c <__assert_fail@plt+0x5ef8>
   17c50:	mov	r0, r3
   17c54:	bx	lr
   17c58:	ldr	r3, [r0, #120]	; 0x78
   17c5c:	cmp	r3, #9
   17c60:	cmpne	r3, #3
   17c64:	movne	r3, #1
   17c68:	bne	17c38 <__assert_fail@plt+0x5ec4>
   17c6c:	push	{r4, r5, r6, r7}
   17c70:	ldrd	r4, [r0, #64]	; 0x40
   17c74:	ldrd	r6, [r2, #64]	; 0x40
   17c78:	cmp	r4, r6
   17c7c:	sbcs	r3, r5, r7
   17c80:	blt	17ca0 <__assert_fail@plt+0x5f2c>
   17c84:	cmp	r6, r4
   17c88:	sbcs	r3, r7, r5
   17c8c:	blt	17cbc <__assert_fail@plt+0x5f48>
   17c90:	ldr	r1, [r0]
   17c94:	pop	{r4, r5, r6, r7}
   17c98:	ldr	r0, [r2]
   17c9c:	b	118a0 <strcmp@plt>
   17ca0:	mvn	r3, #0
   17ca4:	mov	r0, r3
   17ca8:	pop	{r4, r5, r6, r7}
   17cac:	bx	lr
   17cb0:	mvn	r3, #0
   17cb4:	mov	r0, r3
   17cb8:	bx	lr
   17cbc:	mov	r3, #1
   17cc0:	b	17ca4 <__assert_fail@plt+0x5f30>
   17cc4:	ldr	r3, [r1, #120]	; 0x78
   17cc8:	cmp	r3, #9
   17ccc:	cmpne	r3, #3
   17cd0:	beq	17d08 <__assert_fail@plt+0x5f94>
   17cd4:	ldr	r3, [r1, #124]	; 0x7c
   17cd8:	and	r3, r3, #61440	; 0xf000
   17cdc:	cmp	r3, #16384	; 0x4000
   17ce0:	beq	17d08 <__assert_fail@plt+0x5f94>
   17ce4:	ldr	r3, [r0, #120]	; 0x78
   17ce8:	cmp	r3, #9
   17cec:	cmpne	r3, #3
   17cf0:	moveq	r3, #1
   17cf4:	movne	r3, #0
   17cf8:	mvneq	r3, #0
   17cfc:	bne	17d1c <__assert_fail@plt+0x5fa8>
   17d00:	mov	r0, r3
   17d04:	bx	lr
   17d08:	ldr	r3, [r0, #120]	; 0x78
   17d0c:	cmp	r3, #9
   17d10:	cmpne	r3, #3
   17d14:	movne	r3, #1
   17d18:	beq	17d34 <__assert_fail@plt+0x5fc0>
   17d1c:	ldr	r2, [r0, #124]	; 0x7c
   17d20:	and	r2, r2, #61440	; 0xf000
   17d24:	cmp	r2, #16384	; 0x4000
   17d28:	subeq	r3, r3, #1
   17d2c:	cmp	r3, #0
   17d30:	bne	17d00 <__assert_fail@plt+0x5f8c>
   17d34:	push	{r4, r5, r6, lr}
   17d38:	ldr	r4, [r0]
   17d3c:	ldr	r5, [r1]
   17d40:	bl	11bb8 <__errno_location@plt>
   17d44:	mov	r2, #0
   17d48:	mov	r1, r5
   17d4c:	mov	r3, r0
   17d50:	mov	r0, r4
   17d54:	str	r2, [r3]
   17d58:	pop	{r4, r5, r6, lr}
   17d5c:	b	11abc <strcoll@plt>
   17d60:	ldr	r3, [r1, #120]	; 0x78
   17d64:	cmp	r3, #9
   17d68:	cmpne	r3, #3
   17d6c:	beq	17da4 <__assert_fail@plt+0x6030>
   17d70:	ldr	r3, [r1, #124]	; 0x7c
   17d74:	and	r3, r3, #61440	; 0xf000
   17d78:	cmp	r3, #16384	; 0x4000
   17d7c:	beq	17da4 <__assert_fail@plt+0x6030>
   17d80:	ldr	r3, [r0, #120]	; 0x78
   17d84:	cmp	r3, #9
   17d88:	cmpne	r3, #3
   17d8c:	moveq	r3, #1
   17d90:	movne	r3, #0
   17d94:	mvneq	r3, #0
   17d98:	bne	17db8 <__assert_fail@plt+0x6044>
   17d9c:	mov	r0, r3
   17da0:	bx	lr
   17da4:	ldr	r3, [r0, #120]	; 0x78
   17da8:	cmp	r3, #9
   17dac:	cmpne	r3, #3
   17db0:	movne	r3, #1
   17db4:	beq	17dd0 <__assert_fail@plt+0x605c>
   17db8:	ldr	r2, [r0, #124]	; 0x7c
   17dbc:	and	r2, r2, #61440	; 0xf000
   17dc0:	cmp	r2, #16384	; 0x4000
   17dc4:	subeq	r3, r3, #1
   17dc8:	cmp	r3, #0
   17dcc:	bne	17d9c <__assert_fail@plt+0x6028>
   17dd0:	push	{r4, r5, r6, lr}
   17dd4:	ldr	r4, [r1]
   17dd8:	ldr	r5, [r0]
   17ddc:	bl	11bb8 <__errno_location@plt>
   17de0:	mov	r2, #0
   17de4:	mov	r1, r5
   17de8:	mov	r3, r0
   17dec:	mov	r0, r4
   17df0:	str	r2, [r3]
   17df4:	pop	{r4, r5, r6, lr}
   17df8:	b	11abc <strcoll@plt>
   17dfc:	ldr	r3, [r1, #120]	; 0x78
   17e00:	mov	r2, r1
   17e04:	cmp	r3, #9
   17e08:	cmpne	r3, #3
   17e0c:	beq	17e44 <__assert_fail@plt+0x60d0>
   17e10:	ldr	r3, [r1, #124]	; 0x7c
   17e14:	and	r3, r3, #61440	; 0xf000
   17e18:	cmp	r3, #16384	; 0x4000
   17e1c:	beq	17e44 <__assert_fail@plt+0x60d0>
   17e20:	ldr	r3, [r0, #120]	; 0x78
   17e24:	cmp	r3, #9
   17e28:	cmpne	r3, #3
   17e2c:	moveq	r3, #1
   17e30:	movne	r3, #0
   17e34:	mvneq	r3, #0
   17e38:	bne	17e58 <__assert_fail@plt+0x60e4>
   17e3c:	mov	r0, r3
   17e40:	bx	lr
   17e44:	ldr	r3, [r0, #120]	; 0x78
   17e48:	cmp	r3, #9
   17e4c:	cmpne	r3, #3
   17e50:	movne	r3, #1
   17e54:	beq	17e70 <__assert_fail@plt+0x60fc>
   17e58:	ldr	r1, [r0, #124]	; 0x7c
   17e5c:	and	r1, r1, #61440	; 0xf000
   17e60:	cmp	r1, #16384	; 0x4000
   17e64:	subeq	r3, r3, #1
   17e68:	cmp	r3, #0
   17e6c:	bne	17e3c <__assert_fail@plt+0x60c8>
   17e70:	ldr	r1, [r0]
   17e74:	ldr	r0, [r2]
   17e78:	b	118a0 <strcmp@plt>
   17e7c:	ldr	r3, [r1, #120]	; 0x78
   17e80:	cmp	r3, #9
   17e84:	cmpne	r3, #3
   17e88:	beq	17ec0 <__assert_fail@plt+0x614c>
   17e8c:	ldr	r3, [r1, #124]	; 0x7c
   17e90:	and	r3, r3, #61440	; 0xf000
   17e94:	cmp	r3, #16384	; 0x4000
   17e98:	beq	17ec0 <__assert_fail@plt+0x614c>
   17e9c:	ldr	r3, [r0, #120]	; 0x78
   17ea0:	cmp	r3, #9
   17ea4:	cmpne	r3, #3
   17ea8:	moveq	r3, #1
   17eac:	movne	r3, #0
   17eb0:	mvneq	r3, #0
   17eb4:	bne	17ed4 <__assert_fail@plt+0x6160>
   17eb8:	mov	r0, r3
   17ebc:	bx	lr
   17ec0:	ldr	r3, [r0, #120]	; 0x78
   17ec4:	cmp	r3, #3
   17ec8:	cmpne	r3, #9
   17ecc:	movne	r3, #1
   17ed0:	beq	17eec <__assert_fail@plt+0x6178>
   17ed4:	ldr	r2, [r0, #124]	; 0x7c
   17ed8:	and	r2, r2, #61440	; 0xf000
   17edc:	cmp	r2, #16384	; 0x4000
   17ee0:	subeq	r3, r3, #1
   17ee4:	cmp	r3, #0
   17ee8:	bne	17eb8 <__assert_fail@plt+0x6144>
   17eec:	push	{r4, r5, r6, r7, r8, lr}
   17ef0:	mov	r4, r0
   17ef4:	ldr	r6, [r1]
   17ef8:	mov	r1, #46	; 0x2e
   17efc:	mov	r0, r6
   17f00:	bl	11c78 <strrchr@plt>
   17f04:	ldr	r7, [r4]
   17f08:	mov	r1, #46	; 0x2e
   17f0c:	mov	r5, r0
   17f10:	mov	r0, r7
   17f14:	bl	11c78 <strrchr@plt>
   17f18:	ldr	r1, [pc, #76]	; 17f6c <__assert_fail@plt+0x61f8>
   17f1c:	cmp	r5, #0
   17f20:	moveq	r5, r1
   17f24:	cmp	r0, #0
   17f28:	movne	r4, r0
   17f2c:	moveq	r4, r1
   17f30:	bl	11bb8 <__errno_location@plt>
   17f34:	mov	r2, #0
   17f38:	mov	r1, r4
   17f3c:	mov	r3, r0
   17f40:	mov	r0, r5
   17f44:	str	r2, [r3]
   17f48:	bl	11abc <strcoll@plt>
   17f4c:	subs	r3, r0, #0
   17f50:	beq	17f5c <__assert_fail@plt+0x61e8>
   17f54:	mov	r0, r3
   17f58:	pop	{r4, r5, r6, r7, r8, pc}
   17f5c:	mov	r1, r7
   17f60:	mov	r0, r6
   17f64:	pop	{r4, r5, r6, r7, r8, lr}
   17f68:	b	11abc <strcoll@plt>
   17f6c:	andeq	r0, r3, r4, lsr #3
   17f70:	ldr	r3, [r1, #120]	; 0x78
   17f74:	cmp	r3, #9
   17f78:	cmpne	r3, #3
   17f7c:	beq	17fb4 <__assert_fail@plt+0x6240>
   17f80:	ldr	r3, [r1, #124]	; 0x7c
   17f84:	and	r3, r3, #61440	; 0xf000
   17f88:	cmp	r3, #16384	; 0x4000
   17f8c:	beq	17fb4 <__assert_fail@plt+0x6240>
   17f90:	ldr	r3, [r0, #120]	; 0x78
   17f94:	cmp	r3, #9
   17f98:	cmpne	r3, #3
   17f9c:	moveq	r3, #1
   17fa0:	movne	r3, #0
   17fa4:	mvneq	r3, #0
   17fa8:	bne	17fc8 <__assert_fail@plt+0x6254>
   17fac:	mov	r0, r3
   17fb0:	bx	lr
   17fb4:	ldr	r3, [r0, #120]	; 0x78
   17fb8:	cmp	r3, #9
   17fbc:	cmpne	r3, #3
   17fc0:	movne	r3, #1
   17fc4:	beq	17fe0 <__assert_fail@plt+0x626c>
   17fc8:	ldr	r2, [r0, #124]	; 0x7c
   17fcc:	and	r2, r2, #61440	; 0xf000
   17fd0:	cmp	r2, #16384	; 0x4000
   17fd4:	subeq	r3, r3, #1
   17fd8:	cmp	r3, #0
   17fdc:	bne	17fac <__assert_fail@plt+0x6238>
   17fe0:	push	{r4, r5, r6, lr}
   17fe4:	mov	r4, r0
   17fe8:	ldr	r6, [r1]
   17fec:	mov	r1, #46	; 0x2e
   17ff0:	mov	r0, r6
   17ff4:	bl	11c78 <strrchr@plt>
   17ff8:	ldr	r4, [r4]
   17ffc:	mov	r1, #46	; 0x2e
   18000:	mov	r5, r0
   18004:	mov	r0, r4
   18008:	bl	11c78 <strrchr@plt>
   1800c:	cmp	r5, #0
   18010:	beq	1803c <__assert_fail@plt+0x62c8>
   18014:	ldr	r3, [pc, #60]	; 18058 <__assert_fail@plt+0x62e4>
   18018:	cmp	r0, #0
   1801c:	moveq	r0, r3
   18020:	mov	r1, r0
   18024:	mov	r0, r5
   18028:	bl	118a0 <strcmp@plt>
   1802c:	subs	r3, r0, #0
   18030:	beq	18048 <__assert_fail@plt+0x62d4>
   18034:	mov	r0, r3
   18038:	pop	{r4, r5, r6, pc}
   1803c:	cmp	r0, #0
   18040:	ldrne	r5, [pc, #16]	; 18058 <__assert_fail@plt+0x62e4>
   18044:	bne	18020 <__assert_fail@plt+0x62ac>
   18048:	mov	r1, r4
   1804c:	mov	r0, r6
   18050:	pop	{r4, r5, r6, lr}
   18054:	b	118a0 <strcmp@plt>
   18058:	andeq	r0, r3, r4, lsr #3
   1805c:	ldr	r3, [r1, #120]	; 0x78
   18060:	push	{r4, r5, r6, lr}
   18064:	cmp	r3, #9
   18068:	cmpne	r3, #3
   1806c:	beq	180a8 <__assert_fail@plt+0x6334>
   18070:	ldr	r3, [r1, #124]	; 0x7c
   18074:	and	r3, r3, #61440	; 0xf000
   18078:	cmp	r3, #16384	; 0x4000
   1807c:	beq	180a8 <__assert_fail@plt+0x6334>
   18080:	ldr	r3, [r0, #120]	; 0x78
   18084:	cmp	r3, #9
   18088:	cmpne	r3, #3
   1808c:	movne	r3, #0
   18090:	moveq	r3, #1
   18094:	movne	r4, r3
   18098:	bne	180bc <__assert_fail@plt+0x6348>
   1809c:	mvn	r4, #0
   180a0:	mov	r0, r4
   180a4:	pop	{r4, r5, r6, pc}
   180a8:	ldr	r3, [r0, #120]	; 0x78
   180ac:	cmp	r3, #3
   180b0:	cmpne	r3, #9
   180b4:	movne	r4, #1
   180b8:	beq	180d4 <__assert_fail@plt+0x6360>
   180bc:	ldr	r3, [r0, #124]	; 0x7c
   180c0:	and	r3, r3, #61440	; 0xf000
   180c4:	cmp	r3, #16384	; 0x4000
   180c8:	subeq	r4, r4, #1
   180cc:	cmp	r4, #0
   180d0:	bne	180a0 <__assert_fail@plt+0x632c>
   180d4:	ldr	r4, [r0, #148]	; 0x94
   180d8:	mov	r5, r0
   180dc:	cmp	r4, #0
   180e0:	mov	r6, r1
   180e4:	beq	18130 <__assert_fail@plt+0x63bc>
   180e8:	ldr	r0, [r6, #148]	; 0x94
   180ec:	cmp	r0, #0
   180f0:	beq	18118 <__assert_fail@plt+0x63a4>
   180f4:	subs	r4, r4, r0
   180f8:	bne	180a0 <__assert_fail@plt+0x632c>
   180fc:	bl	11bb8 <__errno_location@plt>
   18100:	ldr	r3, [r5]
   18104:	ldr	r1, [r6]
   18108:	str	r4, [r0]
   1810c:	mov	r0, r3
   18110:	pop	{r4, r5, r6, lr}
   18114:	b	11abc <strcoll@plt>
   18118:	ldr	r3, [pc, #44]	; 1814c <__assert_fail@plt+0x63d8>
   1811c:	ldr	r2, [r6, #144]	; 0x90
   18120:	ldr	r0, [r6]
   18124:	ldr	r1, [r3, #3236]	; 0xca4
   18128:	bl	15290 <__assert_fail@plt+0x351c>
   1812c:	b	180f4 <__assert_fail@plt+0x6380>
   18130:	ldr	r3, [pc, #20]	; 1814c <__assert_fail@plt+0x63d8>
   18134:	ldr	r2, [r0, #144]	; 0x90
   18138:	ldr	r0, [r0]
   1813c:	ldr	r1, [r3, #3236]	; 0xca4
   18140:	bl	15290 <__assert_fail@plt+0x351c>
   18144:	mov	r4, r0
   18148:	b	180e8 <__assert_fail@plt+0x6374>
   1814c:	andeq	r1, r4, r0, lsr r3
   18150:	ldr	r3, [r1, #120]	; 0x78
   18154:	cmp	r3, #9
   18158:	cmpne	r3, #3
   1815c:	beq	18194 <__assert_fail@plt+0x6420>
   18160:	ldr	r3, [r1, #124]	; 0x7c
   18164:	and	r3, r3, #61440	; 0xf000
   18168:	cmp	r3, #16384	; 0x4000
   1816c:	beq	18194 <__assert_fail@plt+0x6420>
   18170:	ldr	r3, [r0, #120]	; 0x78
   18174:	cmp	r3, #9
   18178:	cmpne	r3, #3
   1817c:	moveq	r3, #1
   18180:	movne	r3, #0
   18184:	mvneq	r3, #0
   18188:	bne	181a8 <__assert_fail@plt+0x6434>
   1818c:	mov	r0, r3
   18190:	bx	lr
   18194:	ldr	r3, [r0, #120]	; 0x78
   18198:	cmp	r3, #3
   1819c:	cmpne	r3, #9
   181a0:	movne	r3, #1
   181a4:	beq	181c0 <__assert_fail@plt+0x644c>
   181a8:	ldr	r2, [r0, #124]	; 0x7c
   181ac:	and	r2, r2, #61440	; 0xf000
   181b0:	cmp	r2, #16384	; 0x4000
   181b4:	subeq	r3, r3, #1
   181b8:	cmp	r3, #0
   181bc:	bne	1818c <__assert_fail@plt+0x6418>
   181c0:	push	{r4, r5, r6, lr}
   181c4:	mov	r5, r0
   181c8:	ldr	r4, [r0, #148]	; 0x94
   181cc:	mov	r6, r1
   181d0:	cmp	r4, #0
   181d4:	beq	1821c <__assert_fail@plt+0x64a8>
   181d8:	ldr	r0, [r6, #148]	; 0x94
   181dc:	cmp	r0, #0
   181e0:	beq	18204 <__assert_fail@plt+0x6490>
   181e4:	subs	r3, r4, r0
   181e8:	beq	181f4 <__assert_fail@plt+0x6480>
   181ec:	mov	r0, r3
   181f0:	pop	{r4, r5, r6, pc}
   181f4:	ldr	r1, [r6]
   181f8:	ldr	r0, [r5]
   181fc:	pop	{r4, r5, r6, lr}
   18200:	b	118a0 <strcmp@plt>
   18204:	ldr	r3, [pc, #44]	; 18238 <__assert_fail@plt+0x64c4>
   18208:	ldr	r2, [r6, #144]	; 0x90
   1820c:	ldr	r0, [r6]
   18210:	ldr	r1, [r3, #3236]	; 0xca4
   18214:	bl	15290 <__assert_fail@plt+0x351c>
   18218:	b	181e4 <__assert_fail@plt+0x6470>
   1821c:	ldr	r3, [pc, #20]	; 18238 <__assert_fail@plt+0x64c4>
   18220:	ldr	r2, [r0, #144]	; 0x90
   18224:	ldr	r0, [r0]
   18228:	ldr	r1, [r3, #3236]	; 0xca4
   1822c:	bl	15290 <__assert_fail@plt+0x351c>
   18230:	mov	r4, r0
   18234:	b	181d8 <__assert_fail@plt+0x6464>
   18238:	andeq	r1, r4, r0, lsr r3
   1823c:	ldr	r3, [r1, #120]	; 0x78
   18240:	push	{r4, r5, r6, lr}
   18244:	cmp	r3, #9
   18248:	cmpne	r3, #3
   1824c:	beq	18288 <__assert_fail@plt+0x6514>
   18250:	ldr	r3, [r1, #124]	; 0x7c
   18254:	and	r3, r3, #61440	; 0xf000
   18258:	cmp	r3, #16384	; 0x4000
   1825c:	beq	18288 <__assert_fail@plt+0x6514>
   18260:	ldr	r3, [r0, #120]	; 0x78
   18264:	cmp	r3, #9
   18268:	cmpne	r3, #3
   1826c:	movne	r3, #0
   18270:	moveq	r3, #1
   18274:	movne	r4, r3
   18278:	bne	1829c <__assert_fail@plt+0x6528>
   1827c:	mvn	r4, #0
   18280:	mov	r0, r4
   18284:	pop	{r4, r5, r6, pc}
   18288:	ldr	r3, [r0, #120]	; 0x78
   1828c:	cmp	r3, #3
   18290:	cmpne	r3, #9
   18294:	movne	r4, #1
   18298:	beq	182b4 <__assert_fail@plt+0x6540>
   1829c:	ldr	r3, [r0, #124]	; 0x7c
   182a0:	and	r3, r3, #61440	; 0xf000
   182a4:	cmp	r3, #16384	; 0x4000
   182a8:	subeq	r4, r4, #1
   182ac:	cmp	r4, #0
   182b0:	bne	18280 <__assert_fail@plt+0x650c>
   182b4:	ldr	r4, [r1, #148]	; 0x94
   182b8:	mov	r5, r0
   182bc:	cmp	r4, #0
   182c0:	mov	r6, r1
   182c4:	beq	18310 <__assert_fail@plt+0x659c>
   182c8:	ldr	r0, [r5, #148]	; 0x94
   182cc:	cmp	r0, #0
   182d0:	beq	182f8 <__assert_fail@plt+0x6584>
   182d4:	subs	r4, r4, r0
   182d8:	bne	18280 <__assert_fail@plt+0x650c>
   182dc:	bl	11bb8 <__errno_location@plt>
   182e0:	ldr	r3, [r6]
   182e4:	ldr	r1, [r5]
   182e8:	str	r4, [r0]
   182ec:	mov	r0, r3
   182f0:	pop	{r4, r5, r6, lr}
   182f4:	b	11abc <strcoll@plt>
   182f8:	ldr	r3, [pc, #44]	; 1832c <__assert_fail@plt+0x65b8>
   182fc:	ldr	r2, [r5, #144]	; 0x90
   18300:	ldr	r0, [r5]
   18304:	ldr	r1, [r3, #3236]	; 0xca4
   18308:	bl	15290 <__assert_fail@plt+0x351c>
   1830c:	b	182d4 <__assert_fail@plt+0x6560>
   18310:	ldr	r3, [pc, #20]	; 1832c <__assert_fail@plt+0x65b8>
   18314:	ldr	r2, [r1, #144]	; 0x90
   18318:	ldr	r0, [r1]
   1831c:	ldr	r1, [r3, #3236]	; 0xca4
   18320:	bl	15290 <__assert_fail@plt+0x351c>
   18324:	mov	r4, r0
   18328:	b	182c8 <__assert_fail@plt+0x6554>
   1832c:	andeq	r1, r4, r0, lsr r3
   18330:	ldr	r3, [r1, #120]	; 0x78
   18334:	cmp	r3, #9
   18338:	cmpne	r3, #3
   1833c:	beq	18374 <__assert_fail@plt+0x6600>
   18340:	ldr	r3, [r1, #124]	; 0x7c
   18344:	and	r3, r3, #61440	; 0xf000
   18348:	cmp	r3, #16384	; 0x4000
   1834c:	beq	18374 <__assert_fail@plt+0x6600>
   18350:	ldr	r3, [r0, #120]	; 0x78
   18354:	cmp	r3, #9
   18358:	cmpne	r3, #3
   1835c:	moveq	r3, #1
   18360:	movne	r3, #0
   18364:	mvneq	r3, #0
   18368:	bne	18388 <__assert_fail@plt+0x6614>
   1836c:	mov	r0, r3
   18370:	bx	lr
   18374:	ldr	r3, [r0, #120]	; 0x78
   18378:	cmp	r3, #9
   1837c:	cmpne	r3, #3
   18380:	movne	r3, #1
   18384:	beq	183a0 <__assert_fail@plt+0x662c>
   18388:	ldr	r2, [r0, #124]	; 0x7c
   1838c:	and	r2, r2, #61440	; 0xf000
   18390:	cmp	r2, #16384	; 0x4000
   18394:	subeq	r3, r3, #1
   18398:	cmp	r3, #0
   1839c:	bne	1836c <__assert_fail@plt+0x65f8>
   183a0:	ldr	r1, [r1]
   183a4:	ldr	r0, [r0]
   183a8:	b	1e274 <__assert_fail@plt+0xc500>
   183ac:	ldr	r3, [r1, #120]	; 0x78
   183b0:	cmp	r3, #9
   183b4:	cmpne	r3, #3
   183b8:	beq	183f0 <__assert_fail@plt+0x667c>
   183bc:	ldr	r3, [r1, #124]	; 0x7c
   183c0:	and	r3, r3, #61440	; 0xf000
   183c4:	cmp	r3, #16384	; 0x4000
   183c8:	beq	183f0 <__assert_fail@plt+0x667c>
   183cc:	ldr	r3, [r0, #120]	; 0x78
   183d0:	cmp	r3, #9
   183d4:	cmpne	r3, #3
   183d8:	moveq	r3, #1
   183dc:	movne	r3, #0
   183e0:	mvneq	r3, #0
   183e4:	bne	18404 <__assert_fail@plt+0x6690>
   183e8:	mov	r0, r3
   183ec:	bx	lr
   183f0:	ldr	r3, [r0, #120]	; 0x78
   183f4:	cmp	r3, #9
   183f8:	cmpne	r3, #3
   183fc:	movne	r3, #1
   18400:	beq	1841c <__assert_fail@plt+0x66a8>
   18404:	ldr	r2, [r0, #124]	; 0x7c
   18408:	and	r2, r2, #61440	; 0xf000
   1840c:	cmp	r2, #16384	; 0x4000
   18410:	subeq	r3, r3, #1
   18414:	cmp	r3, #0
   18418:	bne	183e8 <__assert_fail@plt+0x6674>
   1841c:	ldr	r1, [r1]
   18420:	ldr	r0, [r0]
   18424:	b	118a0 <strcmp@plt>
   18428:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1842c:	subs	sl, r0, #0
   18430:	sub	sp, sp, #8
   18434:	beq	184dc <__assert_fail@plt+0x6768>
   18438:	mov	r1, #0
   1843c:	bl	221d8 <__assert_fail@plt+0x10464>
   18440:	ldr	r3, [sp, #40]	; 0x28
   18444:	ldr	r5, [pc, #192]	; 1850c <__assert_fail@plt+0x6798>
   18448:	ldr	r6, [pc, #192]	; 18510 <__assert_fail@plt+0x679c>
   1844c:	mov	r7, #32
   18450:	sub	r4, r3, r0
   18454:	mov	r0, sl
   18458:	bl	11b94 <strlen@plt>
   1845c:	ldrd	r8, [r5, #-8]
   18460:	ldr	r3, [r6]
   18464:	mov	r1, #1
   18468:	bic	r4, r4, r4, asr #31
   1846c:	mov	r2, r0
   18470:	adds	r8, r8, r2
   18474:	adc	r9, r9, #0
   18478:	mov	r0, sl
   1847c:	strd	r8, [r5, #-8]
   18480:	bl	11960 <fwrite_unlocked@plt>
   18484:	b	18498 <__assert_fail@plt+0x6724>
   18488:	cmn	r4, #1
   1848c:	str	ip, [r0, #20]
   18490:	strb	r7, [r1]
   18494:	beq	184d4 <__assert_fail@plt+0x6760>
   18498:	ldrd	r2, [r5, #-8]
   1849c:	ldr	r0, [r6]
   184a0:	sub	r4, r4, #1
   184a4:	adds	r2, r2, #1
   184a8:	ldr	r1, [r0, #20]
   184ac:	ldr	ip, [r0, #24]
   184b0:	adc	r3, r3, #0
   184b4:	cmp	r1, ip
   184b8:	strd	r2, [r5, #-8]
   184bc:	add	ip, r1, #1
   184c0:	bcc	18488 <__assert_fail@plt+0x6714>
   184c4:	mov	r1, r7
   184c8:	bl	11c48 <__overflow@plt>
   184cc:	cmn	r4, #1
   184d0:	bne	18498 <__assert_fail@plt+0x6724>
   184d4:	add	sp, sp, #8
   184d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   184dc:	strd	r2, [sp]
   184e0:	ldr	r1, [pc, #44]	; 18514 <__assert_fail@plt+0x67a0>
   184e4:	ldr	r2, [sp, #40]	; 0x28
   184e8:	mov	r0, #1
   184ec:	bl	11bf4 <__printf_chk@plt>
   184f0:	ldr	r1, [pc, #20]	; 1850c <__assert_fail@plt+0x6798>
   184f4:	ldrd	r2, [r1, #-8]
   184f8:	adds	r2, r2, r0
   184fc:	adc	r3, r3, r0, asr #31
   18500:	strd	r2, [r1, #-8]
   18504:	add	sp, sp, #8
   18508:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1850c:	andeq	r2, r4, r0, asr #3
   18510:	andeq	r1, r4, r4, lsr #6
   18514:	andeq	sp, r2, r0, lsr r8
   18518:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1851c:	sub	sp, sp, #8192	; 0x2000
   18520:	sub	sp, sp, #52	; 0x34
   18524:	mov	ip, #0
   18528:	add	r7, sp, #48	; 0x30
   1852c:	str	ip, [sp]
   18530:	add	ip, sp, #8256	; 0x2040
   18534:	mov	lr, r0
   18538:	str	r0, [sp, #24]
   1853c:	add	ip, ip, #24
   18540:	sub	r0, r7, #5
   18544:	str	r0, [sp, #4]
   18548:	mov	r4, r3
   1854c:	sub	r0, r7, #4
   18550:	mov	r3, r2
   18554:	str	r7, [r7, #-4]
   18558:	mov	r2, r1
   1855c:	mov	r1, lr
   18560:	ldrb	r5, [ip]
   18564:	bl	14cd0 <__assert_fail@plt+0x2f5c>
   18568:	ldrb	r3, [r7, #-5]
   1856c:	tst	r5, r3
   18570:	str	r0, [sp, #12]
   18574:	bne	18a7c <__assert_fail@plt+0x6d08>
   18578:	ldr	r3, [pc, #1404]	; 18afc <__assert_fail@plt+0x6d88>
   1857c:	str	r3, [sp, #20]
   18580:	ldr	r3, [pc, #1400]	; 18b00 <__assert_fail@plt+0x6d8c>
   18584:	str	r3, [sp, #16]
   18588:	cmp	r4, #0
   1858c:	beq	185b8 <__assert_fail@plt+0x6844>
   18590:	ldr	r3, [pc, #1388]	; 18b04 <__assert_fail@plt+0x6d90>
   18594:	ldr	r2, [r3, #32]
   18598:	cmp	r2, #0
   1859c:	bne	1889c <__assert_fail@plt+0x6b28>
   185a0:	ldr	r0, [pc, #1372]	; 18b04 <__assert_fail@plt+0x6d90>
   185a4:	bl	14b74 <__assert_fail@plt+0x2e00>
   185a8:	mov	r0, r4
   185ac:	bl	14b74 <__assert_fail@plt+0x2e00>
   185b0:	ldr	r0, [pc, #1360]	; 18b08 <__assert_fail@plt+0x6d94>
   185b4:	bl	14b74 <__assert_fail@plt+0x2e00>
   185b8:	add	r3, sp, #8256	; 0x2040
   185bc:	add	r3, r3, #32
   185c0:	ldr	r3, [r3]
   185c4:	cmp	r3, #0
   185c8:	beq	18a4c <__assert_fail@plt+0x6cd8>
   185cc:	ldr	r5, [pc, #1336]	; 18b0c <__assert_fail@plt+0x6d98>
   185d0:	ldrb	fp, [r5, #3233]	; 0xca1
   185d4:	cmp	fp, #0
   185d8:	bne	1880c <__assert_fail@plt+0x6a98>
   185dc:	str	fp, [sp, #32]
   185e0:	str	fp, [sp, #28]
   185e4:	ldr	r6, [r5, #3728]	; 0xe90
   185e8:	mov	r8, #1
   185ec:	mov	r0, r6
   185f0:	bl	11b94 <strlen@plt>
   185f4:	ldr	sl, [pc, #1300]	; 18b10 <__assert_fail@plt+0x6d9c>
   185f8:	mvn	r9, #0
   185fc:	add	r1, r0, r8
   18600:	mov	r0, #3
   18604:	bl	29a3c <_obstack_memory_used@@Base+0x5490>
   18608:	mov	r4, r0
   1860c:	str	r0, [sp, #36]	; 0x24
   18610:	ldrb	r3, [r6], #1
   18614:	cmp	r3, #0
   18618:	add	r2, r5, r3
   1861c:	beq	18644 <__assert_fail@plt+0x68d0>
   18620:	ldrb	r2, [r2, #3732]	; 0xe94
   18624:	cmp	r2, #0
   18628:	beq	187cc <__assert_fail@plt+0x6a58>
   1862c:	strb	r3, [r4]
   18630:	ldrb	r3, [r6], #1
   18634:	add	r4, r4, #1
   18638:	cmp	r3, #0
   1863c:	add	r2, r5, r3
   18640:	bne	18620 <__assert_fail@plt+0x68ac>
   18644:	add	r2, sp, #8256	; 0x2040
   18648:	add	r2, r2, #32
   1864c:	strb	r3, [r4]
   18650:	ldr	r0, [r2]
   18654:	bl	11b94 <strlen@plt>
   18658:	add	r3, sp, #8256	; 0x2040
   1865c:	add	r3, r3, #32
   18660:	mov	r9, #1
   18664:	ldr	r6, [r3]
   18668:	mvn	sl, #0
   1866c:	add	r1, r0, r9
   18670:	mov	r0, #3
   18674:	bl	29a3c <_obstack_memory_used@@Base+0x5490>
   18678:	mov	r8, r0
   1867c:	mov	r4, r0
   18680:	ldrb	r3, [r6], #1
   18684:	cmp	r3, #0
   18688:	add	r2, r5, r3
   1868c:	beq	186bc <__assert_fail@plt+0x6948>
   18690:	cmp	r3, #47	; 0x2f
   18694:	beq	186a4 <__assert_fail@plt+0x6930>
   18698:	ldrb	r2, [r2, #3732]	; 0xe94
   1869c:	cmp	r2, #0
   186a0:	beq	187ec <__assert_fail@plt+0x6a78>
   186a4:	strb	r3, [r4]
   186a8:	ldrb	r3, [r6], #1
   186ac:	add	r4, r4, #1
   186b0:	cmp	r3, #0
   186b4:	add	r2, r5, r3
   186b8:	bne	18690 <__assert_fail@plt+0x691c>
   186bc:	strb	r3, [r4]
   186c0:	ldrb	r1, [r8]
   186c4:	ldr	r4, [sp, #36]	; 0x24
   186c8:	ldr	r2, [pc, #1092]	; 18b14 <__assert_fail@plt+0x6da0>
   186cc:	cmp	r1, #47	; 0x2f
   186d0:	ldr	r3, [pc, #1088]	; 18b18 <__assert_fail@plt+0x6da4>
   186d4:	ldr	r1, [pc, #1088]	; 18b1c <__assert_fail@plt+0x6da8>
   186d8:	moveq	r3, r2
   186dc:	str	r8, [sp]
   186e0:	mov	r2, r4
   186e4:	mov	r0, #1
   186e8:	bl	11bf4 <__printf_chk@plt>
   186ec:	mov	r0, r4
   186f0:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   186f4:	mov	r0, r8
   186f8:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   186fc:	add	r3, sp, #8256	; 0x2040
   18700:	add	r3, r3, #28
   18704:	ldr	r3, [r3]
   18708:	cmp	r3, #0
   1870c:	beq	18a0c <__assert_fail@plt+0x6c98>
   18710:	ldr	r5, [pc, #1012]	; 18b0c <__assert_fail@plt+0x6d98>
   18714:	ldrb	r3, [r5, #3988]	; 0xf94
   18718:	cmp	r3, #0
   1871c:	bne	1892c <__assert_fail@plt+0x6bb8>
   18720:	ldr	r3, [sp, #32]
   18724:	ldr	r0, [r7, #-4]
   18728:	ldr	r4, [sp, #12]
   1872c:	add	r0, r0, r3
   18730:	ldr	r3, [sp, #16]
   18734:	ldr	r2, [sp, #28]
   18738:	mov	r1, #1
   1873c:	sub	r2, r4, r2
   18740:	ldr	r3, [r3]
   18744:	bl	11960 <fwrite_unlocked@plt>
   18748:	ldr	ip, [sp, #20]
   1874c:	ldrb	r1, [r5, #3988]	; 0xf94
   18750:	ldrd	r2, [ip, #-8]
   18754:	adds	r2, r2, r4
   18758:	adc	r3, r3, #0
   1875c:	cmp	r1, #0
   18760:	strd	r2, [ip, #-8]
   18764:	bne	188c4 <__assert_fail@plt+0x6b50>
   18768:	add	r3, sp, #8256	; 0x2040
   1876c:	add	r3, r3, #32
   18770:	ldr	r3, [r3]
   18774:	cmp	r3, #0
   18778:	beq	1879c <__assert_fail@plt+0x6a28>
   1877c:	ldr	r4, [sp, #16]
   18780:	mov	r2, #6
   18784:	mov	r1, #1
   18788:	ldr	r3, [r4]
   1878c:	ldr	r0, [pc, #908]	; 18b20 <__assert_fail@plt+0x6dac>
   18790:	bl	11960 <fwrite_unlocked@plt>
   18794:	cmp	fp, #0
   18798:	bne	18864 <__assert_fail@plt+0x6af0>
   1879c:	ldr	r0, [r7, #-4]
   187a0:	ldr	r3, [sp, #24]
   187a4:	cmp	r0, r7
   187a8:	cmpne	r3, r0
   187ac:	beq	187b4 <__assert_fail@plt+0x6a40>
   187b0:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   187b4:	ldrb	r0, [r7, #-5]
   187b8:	ldr	r3, [sp, #12]
   187bc:	add	r0, r0, r3
   187c0:	add	sp, sp, #8192	; 0x2000
   187c4:	add	sp, sp, #52	; 0x34
   187c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187cc:	str	r3, [sp]
   187d0:	mov	r0, r4
   187d4:	mov	r3, sl
   187d8:	mov	r2, r9
   187dc:	mov	r1, r8
   187e0:	bl	11bc4 <__sprintf_chk@plt>
   187e4:	add	r4, r4, r0
   187e8:	b	18610 <__assert_fail@plt+0x689c>
   187ec:	str	r3, [sp]
   187f0:	mov	r0, r4
   187f4:	ldr	r3, [pc, #788]	; 18b10 <__assert_fail@plt+0x6d9c>
   187f8:	mov	r2, sl
   187fc:	mov	r1, r9
   18800:	bl	11bc4 <__sprintf_chk@plt>
   18804:	add	r4, r4, r0
   18808:	b	18680 <__assert_fail@plt+0x690c>
   1880c:	ldrb	fp, [r5, #3234]	; 0xca2
   18810:	cmp	fp, #0
   18814:	beq	185dc <__assert_fail@plt+0x6868>
   18818:	ldrb	r3, [r7, #-5]
   1881c:	cmp	r3, #0
   18820:	bne	189a8 <__assert_fail@plt+0x6c34>
   18824:	ldr	r3, [sp, #16]
   18828:	ldr	r1, [r7, #-4]
   1882c:	ldr	r0, [r3]
   18830:	ldrb	r1, [r1]
   18834:	ldr	r3, [r0, #20]
   18838:	ldr	r2, [r0, #24]
   1883c:	cmp	r3, r2
   18840:	bcs	18ae4 <__assert_fail@plt+0x6d70>
   18844:	add	r2, r3, #1
   18848:	str	r2, [r0, #20]
   1884c:	mov	r2, #1
   18850:	strb	r1, [r3]
   18854:	mov	r3, #2
   18858:	str	r2, [sp, #32]
   1885c:	str	r3, [sp, #28]
   18860:	b	185e4 <__assert_fail@plt+0x6870>
   18864:	ldr	r0, [r4]
   18868:	ldr	r3, [r7, #-4]
   1886c:	ldr	ip, [sp, #12]
   18870:	ldr	r2, [r0, #20]
   18874:	ldr	r1, [r0, #24]
   18878:	add	r3, r3, ip
   1887c:	cmp	r2, r1
   18880:	ldrb	r1, [r3, #-1]
   18884:	addcc	r3, r2, #1
   18888:	strcc	r3, [r0, #20]
   1888c:	strbcc	r1, [r2]
   18890:	bcc	1879c <__assert_fail@plt+0x6a28>
   18894:	bl	11c48 <__overflow@plt>
   18898:	b	1879c <__assert_fail@plt+0x6a28>
   1889c:	cmp	r2, #1
   188a0:	ldr	r0, [r3, #36]	; 0x24
   188a4:	beq	18ad4 <__assert_fail@plt+0x6d60>
   188a8:	cmp	r2, #2
   188ac:	beq	18994 <__assert_fail@plt+0x6c20>
   188b0:	ldr	r0, [pc, #588]	; 18b04 <__assert_fail@plt+0x6d90>
   188b4:	bl	14b74 <__assert_fail@plt+0x2e00>
   188b8:	ldr	r0, [pc, #584]	; 18b08 <__assert_fail@plt+0x6d94>
   188bc:	bl	14b74 <__assert_fail@plt+0x2e00>
   188c0:	b	185a0 <__assert_fail@plt+0x682c>
   188c4:	add	r3, sp, #8256	; 0x2040
   188c8:	add	r3, r3, #28
   188cc:	ldr	r3, [r3]
   188d0:	ldr	r2, [r3, #12]
   188d4:	add	r3, sp, #8256	; 0x2040
   188d8:	add	r3, r3, #28
   188dc:	ldr	r3, [r3]
   188e0:	ldr	r3, [r3, #16]
   188e4:	sub	r3, r3, r2
   188e8:	cmp	r3, #7
   188ec:	bls	189bc <__assert_fail@plt+0x6c48>
   188f0:	ldr	r3, [sp, #20]
   188f4:	sub	r3, r3, #8
   188f8:	ldm	r3!, {r0, r1}
   188fc:	add	r3, sp, #8256	; 0x2040
   18900:	add	r3, r3, #28
   18904:	str	r0, [r2]
   18908:	str	r1, [r2, #4]
   1890c:	ldr	r3, [r3]
   18910:	add	r2, sp, #8256	; 0x2040
   18914:	add	r2, r2, #28
   18918:	ldr	r3, [r3, #12]
   1891c:	ldr	r2, [r2]
   18920:	add	r3, r3, #8
   18924:	str	r3, [r2, #12]
   18928:	b	18768 <__assert_fail@plt+0x69f4>
   1892c:	add	r3, sp, #8256	; 0x2040
   18930:	add	r3, r3, #28
   18934:	ldr	r3, [r3]
   18938:	ldr	r2, [r3, #12]
   1893c:	add	r3, sp, #8256	; 0x2040
   18940:	add	r3, r3, #28
   18944:	ldr	r3, [r3]
   18948:	ldr	r3, [r3, #16]
   1894c:	sub	r3, r3, r2
   18950:	cmp	r3, #7
   18954:	bls	189e4 <__assert_fail@plt+0x6c70>
   18958:	ldr	r3, [sp, #20]
   1895c:	sub	r3, r3, #8
   18960:	ldm	r3!, {r0, r1}
   18964:	add	r3, sp, #8256	; 0x2040
   18968:	add	r3, r3, #28
   1896c:	str	r0, [r2]
   18970:	str	r1, [r2, #4]
   18974:	ldr	r3, [r3]
   18978:	add	r2, sp, #8256	; 0x2040
   1897c:	add	r2, r2, #28
   18980:	ldr	r3, [r3, #12]
   18984:	ldr	r2, [r2]
   18988:	add	r3, r3, #8
   1898c:	str	r3, [r2, #12]
   18990:	b	18720 <__assert_fail@plt+0x69ac>
   18994:	ldr	r1, [pc, #392]	; 18b24 <__assert_fail@plt+0x6db0>
   18998:	bl	11d20 <strncmp@plt>
   1899c:	cmp	r0, #0
   189a0:	beq	185a0 <__assert_fail@plt+0x682c>
   189a4:	b	188b0 <__assert_fail@plt+0x6b3c>
   189a8:	mov	r3, #0
   189ac:	str	r3, [sp, #32]
   189b0:	str	r3, [sp, #28]
   189b4:	mov	fp, r3
   189b8:	b	185e4 <__assert_fail@plt+0x6870>
   189bc:	add	r3, sp, #8256	; 0x2040
   189c0:	add	r3, r3, #28
   189c4:	mov	r1, #8
   189c8:	ldr	r0, [r3]
   189cc:	bl	24384 <_obstack_newchunk@@Base>
   189d0:	add	r3, sp, #8256	; 0x2040
   189d4:	add	r3, r3, #28
   189d8:	ldr	r3, [r3]
   189dc:	ldr	r2, [r3, #12]
   189e0:	b	188f0 <__assert_fail@plt+0x6b7c>
   189e4:	add	r3, sp, #8256	; 0x2040
   189e8:	add	r3, r3, #28
   189ec:	mov	r1, #8
   189f0:	ldr	r0, [r3]
   189f4:	bl	24384 <_obstack_newchunk@@Base>
   189f8:	add	r3, sp, #8256	; 0x2040
   189fc:	add	r3, r3, #28
   18a00:	ldr	r3, [r3]
   18a04:	ldr	r2, [r3, #12]
   18a08:	b	18958 <__assert_fail@plt+0x6be4>
   18a0c:	ldr	r3, [sp, #32]
   18a10:	ldr	r0, [r7, #-4]
   18a14:	ldr	r4, [sp, #12]
   18a18:	add	r0, r0, r3
   18a1c:	ldr	r3, [sp, #16]
   18a20:	ldr	r2, [sp, #28]
   18a24:	mov	r1, #1
   18a28:	sub	r2, r4, r2
   18a2c:	ldr	r3, [r3]
   18a30:	bl	11960 <fwrite_unlocked@plt>
   18a34:	ldr	r0, [sp, #20]
   18a38:	ldrd	r2, [r0, #-8]
   18a3c:	adds	r2, r2, r4
   18a40:	adc	r3, r3, #0
   18a44:	strd	r2, [r0, #-8]
   18a48:	b	18768 <__assert_fail@plt+0x69f4>
   18a4c:	add	r3, sp, #8256	; 0x2040
   18a50:	add	r3, r3, #32
   18a54:	ldr	r3, [r3]
   18a58:	str	r3, [sp, #32]
   18a5c:	add	r3, sp, #8256	; 0x2040
   18a60:	add	r3, r3, #32
   18a64:	ldr	r3, [r3]
   18a68:	str	r3, [sp, #28]
   18a6c:	add	r3, sp, #8256	; 0x2040
   18a70:	add	r3, r3, #32
   18a74:	ldr	fp, [r3]
   18a78:	b	186fc <__assert_fail@plt+0x6988>
   18a7c:	ldr	r3, [pc, #124]	; 18b00 <__assert_fail@plt+0x6d8c>
   18a80:	mov	r2, r3
   18a84:	str	r3, [sp, #16]
   18a88:	ldr	r3, [pc, #108]	; 18afc <__assert_fail@plt+0x6d88>
   18a8c:	ldr	r0, [r2]
   18a90:	mov	lr, r3
   18a94:	str	r3, [sp, #20]
   18a98:	ldrd	r2, [r3, #-8]
   18a9c:	ldr	r1, [r0, #20]
   18aa0:	ldr	ip, [r0, #24]
   18aa4:	adds	r2, r2, #1
   18aa8:	adc	r3, r3, #0
   18aac:	cmp	r1, ip
   18ab0:	strd	r2, [lr, #-8]
   18ab4:	addcc	r2, r1, #1
   18ab8:	movcc	r3, #32
   18abc:	strcc	r2, [r0, #20]
   18ac0:	strbcc	r3, [r1]
   18ac4:	bcc	18588 <__assert_fail@plt+0x6814>
   18ac8:	mov	r1, #32
   18acc:	bl	11c48 <__overflow@plt>
   18ad0:	b	18588 <__assert_fail@plt+0x6814>
   18ad4:	ldrb	r3, [r0]
   18ad8:	cmp	r3, #48	; 0x30
   18adc:	bne	188b0 <__assert_fail@plt+0x6b3c>
   18ae0:	b	185a0 <__assert_fail@plt+0x682c>
   18ae4:	bl	11c48 <__overflow@plt>
   18ae8:	mov	r3, #1
   18aec:	str	r3, [sp, #32]
   18af0:	mov	r3, #2
   18af4:	str	r3, [sp, #28]
   18af8:	b	185e4 <__assert_fail@plt+0x6870>
   18afc:	andeq	r2, r4, r0, asr #3
   18b00:	andeq	r1, r4, r4, lsr #6
   18b04:	ldrdeq	r1, [r4], -r0
   18b08:	ldrdeq	r1, [r4], -r8
   18b0c:	andeq	r1, r4, r0, lsr r3
   18b10:	andeq	sp, r2, r8, lsr r8
   18b14:	andeq	r0, r3, r4, lsr #3
   18b18:	ldrdeq	pc, [r2], -r4
   18b1c:	andeq	sp, r2, r0, asr #16
   18b20:	andeq	sp, r2, r4, asr r8
   18b24:	strdeq	sp, [r2], -r0
   18b28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b2c:	sub	sp, sp, #156	; 0x9c
   18b30:	subs	r8, r1, #0
   18b34:	mov	r7, r0
   18b38:	mov	r9, r2
   18b3c:	str	r3, [sp, #20]
   18b40:	beq	18c44 <__assert_fail@plt+0x6ed0>
   18b44:	ldr	r4, [pc, #1780]	; 19240 <__assert_fail@plt+0x74cc>
   18b48:	ldr	r6, [r0, #4]
   18b4c:	ldrb	r3, [r4, #3996]	; 0xf9c
   18b50:	cmp	r3, #0
   18b54:	streq	r3, [sp, #16]
   18b58:	bne	18cc8 <__assert_fail@plt+0x6f54>
   18b5c:	ldr	ip, [r7, #8]
   18b60:	eor	r0, r8, #1
   18b64:	ldr	r2, [r7, #144]	; 0x90
   18b68:	ldr	r1, [r4, #3236]	; 0xca4
   18b6c:	stm	sp, {r0, r9}
   18b70:	str	ip, [sp, #8]
   18b74:	mov	r0, r6
   18b78:	bl	18518 <__assert_fail@plt+0x67a4>
   18b7c:	ldr	r8, [pc, #1728]	; 19244 <__assert_fail@plt+0x74d0>
   18b80:	ldr	r7, [pc, #1728]	; 19248 <__assert_fail@plt+0x74d4>
   18b84:	add	r9, r8, #8
   18b88:	ldr	r6, [pc, #1724]	; 1924c <__assert_fail@plt+0x74d8>
   18b8c:	mov	r5, #0
   18b90:	mov	sl, r0
   18b94:	b	18be4 <__assert_fail@plt+0x6e70>
   18b98:	ldr	r0, [r7]
   18b9c:	bl	119e4 <fflush_unlocked@plt>
   18ba0:	add	r2, sp, #24
   18ba4:	mov	r1, r6
   18ba8:	mov	r0, r5
   18bac:	bl	118dc <sigprocmask@plt>
   18bb0:	ldr	fp, [r4]
   18bb4:	ldr	r3, [r4, #3092]	; 0xc14
   18bb8:	cmp	r3, #0
   18bbc:	sub	r3, r3, #1
   18bc0:	beq	18c1c <__assert_fail@plt+0x6ea8>
   18bc4:	mov	fp, #19
   18bc8:	str	r3, [r4, #3092]	; 0xc14
   18bcc:	mov	r0, fp
   18bd0:	bl	1187c <raise@plt>
   18bd4:	mov	r2, r5
   18bd8:	add	r1, sp, #24
   18bdc:	mov	r0, #2
   18be0:	bl	118dc <sigprocmask@plt>
   18be4:	ldr	r3, [r4]
   18be8:	cmp	r3, #0
   18bec:	bne	18bfc <__assert_fail@plt+0x6e88>
   18bf0:	ldr	r3, [r4, #3092]	; 0xc14
   18bf4:	cmp	r3, #0
   18bf8:	beq	18c2c <__assert_fail@plt+0x6eb8>
   18bfc:	ldrb	r3, [r4, #3100]	; 0xc1c
   18c00:	cmp	r3, #0
   18c04:	beq	18b98 <__assert_fail@plt+0x6e24>
   18c08:	mov	r0, r8
   18c0c:	bl	14b74 <__assert_fail@plt+0x2e00>
   18c10:	mov	r0, r9
   18c14:	bl	14b74 <__assert_fail@plt+0x2e00>
   18c18:	b	18b98 <__assert_fail@plt+0x6e24>
   18c1c:	mov	r1, r5
   18c20:	mov	r0, fp
   18c24:	bl	11954 <signal@plt>
   18c28:	b	18bcc <__assert_fail@plt+0x6e58>
   18c2c:	ldr	r3, [sp, #16]
   18c30:	cmp	r3, #0
   18c34:	bne	18d04 <__assert_fail@plt+0x6f90>
   18c38:	mov	r0, sl
   18c3c:	add	sp, sp, #156	; 0x9c
   18c40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c44:	ldr	r4, [pc, #1524]	; 19240 <__assert_fail@plt+0x74cc>
   18c48:	ldr	r6, [r0]
   18c4c:	ldrb	r3, [r4, #3996]	; 0xf9c
   18c50:	cmp	r3, #0
   18c54:	moveq	r3, r8
   18c58:	streq	r8, [sp, #16]
   18c5c:	beq	18b5c <__assert_fail@plt+0x6de8>
   18c60:	ldrb	r3, [r4, #3989]	; 0xf95
   18c64:	ldrb	r2, [r7, #133]	; 0x85
   18c68:	cmp	r3, #0
   18c6c:	bne	18df8 <__assert_fail@plt+0x7084>
   18c70:	ldr	sl, [r7, #32]
   18c74:	ldrb	r3, [r7, #132]	; 0x84
   18c78:	cmp	r3, #0
   18c7c:	beq	18d78 <__assert_fail@plt+0x7004>
   18c80:	and	r3, sl, #61440	; 0xf000
   18c84:	cmp	r3, #32768	; 0x8000
   18c88:	beq	18f1c <__assert_fail@plt+0x71a8>
   18c8c:	cmp	r3, #16384	; 0x4000
   18c90:	beq	18fb4 <__assert_fail@plt+0x7240>
   18c94:	cmp	r3, #40960	; 0xa000
   18c98:	beq	190b0 <__assert_fail@plt+0x733c>
   18c9c:	cmp	r3, #4096	; 0x1000
   18ca0:	beq	19118 <__assert_fail@plt+0x73a4>
   18ca4:	cmp	r3, #49152	; 0xc000
   18ca8:	beq	18fa8 <__assert_fail@plt+0x7234>
   18cac:	cmp	r3, #24576	; 0x6000
   18cb0:	beq	191a8 <__assert_fail@plt+0x7434>
   18cb4:	cmp	r3, #8192	; 0x2000
   18cb8:	movne	r3, #104	; 0x68
   18cbc:	moveq	r3, #88	; 0x58
   18cc0:	ldr	r5, [pc, #1404]	; 19244 <__assert_fail@plt+0x74d0>
   18cc4:	b	18e6c <__assert_fail@plt+0x70f8>
   18cc8:	ldrb	r3, [r7, #133]	; 0x85
   18ccc:	ldr	sl, [r7, #124]	; 0x7c
   18cd0:	cmp	r3, #0
   18cd4:	bne	18d68 <__assert_fail@plt+0x6ff4>
   18cd8:	ldr	r5, [pc, #1380]	; 19244 <__assert_fail@plt+0x74d0>
   18cdc:	ldr	r2, [r5, #96]	; 0x60
   18ce0:	cmp	r2, #0
   18ce4:	beq	18eac <__assert_fail@plt+0x7138>
   18ce8:	cmp	r2, #1
   18cec:	ldr	r0, [r5, #100]	; 0x64
   18cf0:	beq	19124 <__assert_fail@plt+0x73b0>
   18cf4:	cmp	r2, #2
   18cf8:	beq	18e9c <__assert_fail@plt+0x7128>
   18cfc:	mov	r0, #12
   18d00:	b	18f54 <__assert_fail@plt+0x71e0>
   18d04:	ldr	r5, [pc, #1336]	; 19244 <__assert_fail@plt+0x74d0>
   18d08:	ldr	r3, [r5, #20]
   18d0c:	cmp	r3, #0
   18d10:	beq	18eb4 <__assert_fail@plt+0x7140>
   18d14:	add	r0, r5, #16
   18d18:	bl	14b74 <__assert_fail@plt+0x2e00>
   18d1c:	ldr	r4, [r4, #3276]	; 0xccc
   18d20:	cmp	r4, #0
   18d24:	beq	18c38 <__assert_fail@plt+0x6ec4>
   18d28:	ldr	r6, [sp, #20]
   18d2c:	mov	r1, r4
   18d30:	mov	r0, r6
   18d34:	bl	2b56c <_obstack_memory_used@@Base+0x6fc0>
   18d38:	mov	r1, r4
   18d3c:	mov	r5, r0
   18d40:	sub	r0, r6, #1
   18d44:	add	r0, r0, sl
   18d48:	bl	2b56c <_obstack_memory_used@@Base+0x6fc0>
   18d4c:	cmp	r5, r0
   18d50:	beq	18c38 <__assert_fail@plt+0x6ec4>
   18d54:	ldr	r0, [pc, #1268]	; 19250 <__assert_fail@plt+0x74dc>
   18d58:	bl	14b74 <__assert_fail@plt+0x2e00>
   18d5c:	mov	r0, sl
   18d60:	add	sp, sp, #156	; 0x9c
   18d64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d68:	ldrb	r3, [r7, #132]	; 0x84
   18d6c:	mov	r2, #0
   18d70:	cmp	r3, #0
   18d74:	bne	18c80 <__assert_fail@plt+0x6f0c>
   18d78:	ldr	r1, [r7, #120]	; 0x78
   18d7c:	ldr	r3, [pc, #1232]	; 19254 <__assert_fail@plt+0x74e0>
   18d80:	add	r3, r3, r1, lsl #2
   18d84:	ldr	r0, [r3, #348]	; 0x15c
   18d88:	cmp	r0, #5
   18d8c:	beq	18e18 <__assert_fail@plt+0x70a4>
   18d90:	cmp	r2, #0
   18d94:	cmpeq	r0, #7
   18d98:	moveq	r2, #1
   18d9c:	movne	r2, #0
   18da0:	cmp	r2, #0
   18da4:	beq	19238 <__assert_fail@plt+0x74c4>
   18da8:	ldrb	r3, [r4, #3989]	; 0xf95
   18dac:	cmp	r3, #0
   18db0:	bne	18e90 <__assert_fail@plt+0x711c>
   18db4:	ldr	r5, [pc, #1160]	; 19244 <__assert_fail@plt+0x74d0>
   18db8:	ldr	r2, [r5, #104]	; 0x68
   18dbc:	cmp	r2, #0
   18dc0:	moveq	r3, #56	; 0x38
   18dc4:	beq	18e6c <__assert_fail@plt+0x70f8>
   18dc8:	cmp	r2, #1
   18dcc:	ldr	r0, [r5, #108]	; 0x6c
   18dd0:	beq	18f94 <__assert_fail@plt+0x7220>
   18dd4:	cmp	r2, #2
   18dd8:	movne	r3, #104	; 0x68
   18ddc:	bne	18e6c <__assert_fail@plt+0x70f8>
   18de0:	ldr	r1, [pc, #1136]	; 19258 <__assert_fail@plt+0x74e4>
   18de4:	bl	11d20 <strncmp@plt>
   18de8:	cmp	r0, #0
   18dec:	moveq	r3, #56	; 0x38
   18df0:	movne	r3, #104	; 0x68
   18df4:	b	18e6c <__assert_fail@plt+0x70f8>
   18df8:	cmp	r2, #0
   18dfc:	beq	18c70 <__assert_fail@plt+0x6efc>
   18e00:	ldr	sl, [r7, #124]	; 0x7c
   18e04:	b	18c74 <__assert_fail@plt+0x6f00>
   18e08:	ldrb	r3, [r0]
   18e0c:	cmp	r3, #48	; 0x30
   18e10:	movne	r3, #176	; 0xb0
   18e14:	bne	18e6c <__assert_fail@plt+0x70f8>
   18e18:	mov	r0, r6
   18e1c:	bl	11b94 <strlen@plt>
   18e20:	ldr	r5, [r4, #3992]	; 0xf98
   18e24:	cmp	r5, #0
   18e28:	mov	sl, r0
   18e2c:	beq	18e64 <__assert_fail@plt+0x70f0>
   18e30:	ldr	r3, [r5]
   18e34:	sub	r0, sl, r3
   18e38:	cmp	sl, r3
   18e3c:	mov	r2, r3
   18e40:	add	r0, r6, r0
   18e44:	bcc	18e58 <__assert_fail@plt+0x70e4>
   18e48:	ldr	r1, [r5, #4]
   18e4c:	bl	1d46c <__assert_fail@plt+0xb6f8>
   18e50:	cmp	r0, #0
   18e54:	beq	18e88 <__assert_fail@plt+0x7114>
   18e58:	ldr	r5, [r5, #16]
   18e5c:	cmp	r5, #0
   18e60:	bne	18e30 <__assert_fail@plt+0x70bc>
   18e64:	ldr	r5, [pc, #984]	; 19244 <__assert_fail@plt+0x74d0>
   18e68:	mov	r3, #40	; 0x28
   18e6c:	add	r3, r5, r3
   18e70:	ldr	r5, [r3, #4]
   18e74:	cmp	r5, #0
   18e78:	beq	18ed0 <__assert_fail@plt+0x715c>
   18e7c:	mov	r2, #1
   18e80:	str	r2, [sp, #16]
   18e84:	b	18b5c <__assert_fail@plt+0x6de8>
   18e88:	add	r3, r5, #8
   18e8c:	b	18e70 <__assert_fail@plt+0x70fc>
   18e90:	mov	r3, #104	; 0x68
   18e94:	ldr	r5, [pc, #936]	; 19244 <__assert_fail@plt+0x74d0>
   18e98:	b	18e6c <__assert_fail@plt+0x70f8>
   18e9c:	ldr	r1, [pc, #948]	; 19258 <__assert_fail@plt+0x74e4>
   18ea0:	bl	11d20 <strncmp@plt>
   18ea4:	cmp	r0, #0
   18ea8:	bne	18cfc <__assert_fail@plt+0x6f88>
   18eac:	mvn	r2, #0
   18eb0:	b	18c74 <__assert_fail@plt+0x6f00>
   18eb4:	mov	r0, r5
   18eb8:	bl	14b74 <__assert_fail@plt+0x2e00>
   18ebc:	add	r0, r5, #24
   18ec0:	bl	14b74 <__assert_fail@plt+0x2e00>
   18ec4:	add	r0, r5, #8
   18ec8:	bl	14b74 <__assert_fail@plt+0x2e00>
   18ecc:	b	18d1c <__assert_fail@plt+0x6fa8>
   18ed0:	ldr	r3, [pc, #876]	; 19244 <__assert_fail@plt+0x74d0>
   18ed4:	ldr	r2, [r3, #32]
   18ed8:	cmp	r2, #0
   18edc:	moveq	r3, r2
   18ee0:	streq	r3, [sp, #16]
   18ee4:	beq	18b5c <__assert_fail@plt+0x6de8>
   18ee8:	cmp	r2, #1
   18eec:	ldr	r0, [r3, #36]	; 0x24
   18ef0:	beq	19158 <__assert_fail@plt+0x73e4>
   18ef4:	cmp	r2, #2
   18ef8:	movne	r3, r5
   18efc:	bne	18e7c <__assert_fail@plt+0x7108>
   18f00:	ldr	r1, [pc, #848]	; 19258 <__assert_fail@plt+0x74e4>
   18f04:	bl	11d20 <strncmp@plt>
   18f08:	mov	r3, r5
   18f0c:	adds	r2, r0, #0
   18f10:	movne	r2, #1
   18f14:	str	r2, [sp, #16]
   18f18:	b	18b5c <__assert_fail@plt+0x6de8>
   18f1c:	tst	sl, #2048	; 0x800
   18f20:	ldr	r5, [pc, #796]	; 19244 <__assert_fail@plt+0x74d0>
   18f24:	bne	18f5c <__assert_fail@plt+0x71e8>
   18f28:	tst	sl, #1024	; 0x400
   18f2c:	beq	19004 <__assert_fail@plt+0x7290>
   18f30:	ldr	r2, [r5, #136]	; 0x88
   18f34:	cmp	r2, #0
   18f38:	beq	19004 <__assert_fail@plt+0x7290>
   18f3c:	cmp	r2, #1
   18f40:	ldr	r0, [r5, #140]	; 0x8c
   18f44:	beq	191e0 <__assert_fail@plt+0x746c>
   18f48:	cmp	r2, #2
   18f4c:	beq	18ff4 <__assert_fail@plt+0x7280>
   18f50:	mov	r0, #17
   18f54:	lsl	r3, r0, #3
   18f58:	b	18e6c <__assert_fail@plt+0x70f8>
   18f5c:	ldr	r2, [r5, #128]	; 0x80
   18f60:	cmp	r2, #0
   18f64:	beq	18f28 <__assert_fail@plt+0x71b4>
   18f68:	cmp	r2, #1
   18f6c:	ldr	r0, [r5, #132]	; 0x84
   18f70:	beq	191cc <__assert_fail@plt+0x7458>
   18f74:	cmp	r2, #2
   18f78:	bne	18f8c <__assert_fail@plt+0x7218>
   18f7c:	ldr	r1, [pc, #724]	; 19258 <__assert_fail@plt+0x74e4>
   18f80:	bl	11d20 <strncmp@plt>
   18f84:	cmp	r0, #0
   18f88:	beq	18f28 <__assert_fail@plt+0x71b4>
   18f8c:	mov	r0, #16
   18f90:	b	18f54 <__assert_fail@plt+0x71e0>
   18f94:	ldrb	r3, [r0]
   18f98:	cmp	r3, #48	; 0x30
   18f9c:	moveq	r3, #56	; 0x38
   18fa0:	movne	r3, #104	; 0x68
   18fa4:	b	18e6c <__assert_fail@plt+0x70f8>
   18fa8:	mov	r3, #72	; 0x48
   18fac:	ldr	r5, [pc, #656]	; 19244 <__assert_fail@plt+0x74d0>
   18fb0:	b	18e6c <__assert_fail@plt+0x70f8>
   18fb4:	ldr	r3, [pc, #672]	; 1925c <__assert_fail@plt+0x74e8>
   18fb8:	ldr	r5, [pc, #644]	; 19244 <__assert_fail@plt+0x74d0>
   18fbc:	bics	r3, r3, sl
   18fc0:	beq	19170 <__assert_fail@plt+0x73fc>
   18fc4:	tst	sl, #2
   18fc8:	beq	190d0 <__assert_fail@plt+0x735c>
   18fcc:	ldr	r2, [r5, #152]	; 0x98
   18fd0:	cmp	r2, #0
   18fd4:	beq	190d0 <__assert_fail@plt+0x735c>
   18fd8:	cmp	r2, #1
   18fdc:	ldr	r0, [r5, #156]	; 0x9c
   18fe0:	beq	191f4 <__assert_fail@plt+0x7480>
   18fe4:	cmp	r2, #2
   18fe8:	beq	190c0 <__assert_fail@plt+0x734c>
   18fec:	mov	r0, #19
   18ff0:	b	18f54 <__assert_fail@plt+0x71e0>
   18ff4:	ldr	r1, [pc, #604]	; 19258 <__assert_fail@plt+0x74e4>
   18ff8:	bl	11d20 <strncmp@plt>
   18ffc:	cmp	r0, #0
   19000:	bne	18f50 <__assert_fail@plt+0x71dc>
   19004:	ldr	r2, [r5, #168]	; 0xa8
   19008:	cmp	r2, #0
   1900c:	beq	19034 <__assert_fail@plt+0x72c0>
   19010:	cmp	r2, #1
   19014:	ldr	r0, [r5, #172]	; 0xac
   19018:	beq	19138 <__assert_fail@plt+0x73c4>
   1901c:	cmp	r2, #2
   19020:	bne	19144 <__assert_fail@plt+0x73d0>
   19024:	ldr	r1, [pc, #556]	; 19258 <__assert_fail@plt+0x74e4>
   19028:	bl	11d20 <strncmp@plt>
   1902c:	cmp	r0, #0
   19030:	bne	19144 <__assert_fail@plt+0x73d0>
   19034:	tst	sl, #73	; 0x49
   19038:	beq	1906c <__assert_fail@plt+0x72f8>
   1903c:	ldr	r2, [r5, #112]	; 0x70
   19040:	cmp	r2, #0
   19044:	beq	1906c <__assert_fail@plt+0x72f8>
   19048:	cmp	r2, #1
   1904c:	ldr	r0, [r5, #116]	; 0x74
   19050:	beq	19224 <__assert_fail@plt+0x74b0>
   19054:	cmp	r2, #2
   19058:	bne	1921c <__assert_fail@plt+0x74a8>
   1905c:	ldr	r1, [pc, #500]	; 19258 <__assert_fail@plt+0x74e4>
   19060:	bl	11d20 <strncmp@plt>
   19064:	cmp	r0, #0
   19068:	bne	1921c <__assert_fail@plt+0x74a8>
   1906c:	ldr	r3, [r7, #36]	; 0x24
   19070:	cmp	r3, #1
   19074:	bls	18e18 <__assert_fail@plt+0x70a4>
   19078:	ldr	r2, [r5, #176]	; 0xb0
   1907c:	cmp	r2, #0
   19080:	beq	18e18 <__assert_fail@plt+0x70a4>
   19084:	cmp	r2, #1
   19088:	ldr	r0, [r5, #180]	; 0xb4
   1908c:	beq	18e08 <__assert_fail@plt+0x7094>
   19090:	cmp	r2, #2
   19094:	bne	190a8 <__assert_fail@plt+0x7334>
   19098:	ldr	r1, [pc, #440]	; 19258 <__assert_fail@plt+0x74e4>
   1909c:	bl	11d20 <strncmp@plt>
   190a0:	cmp	r0, #0
   190a4:	beq	18e18 <__assert_fail@plt+0x70a4>
   190a8:	mov	r0, #22
   190ac:	b	18f54 <__assert_fail@plt+0x71e0>
   190b0:	clz	r2, r2
   190b4:	mov	r0, #7
   190b8:	lsr	r2, r2, #5
   190bc:	b	18da0 <__assert_fail@plt+0x702c>
   190c0:	ldr	r1, [pc, #400]	; 19258 <__assert_fail@plt+0x74e4>
   190c4:	bl	11d20 <strncmp@plt>
   190c8:	cmp	r0, #0
   190cc:	bne	18fec <__assert_fail@plt+0x7278>
   190d0:	tst	sl, #512	; 0x200
   190d4:	moveq	r3, #48	; 0x30
   190d8:	beq	18e6c <__assert_fail@plt+0x70f8>
   190dc:	ldr	r2, [r5, #144]	; 0x90
   190e0:	cmp	r2, #0
   190e4:	beq	191c4 <__assert_fail@plt+0x7450>
   190e8:	cmp	r2, #1
   190ec:	ldr	r0, [r5, #148]	; 0x94
   190f0:	beq	191b4 <__assert_fail@plt+0x7440>
   190f4:	cmp	r2, #2
   190f8:	movne	r0, #18
   190fc:	bne	18f54 <__assert_fail@plt+0x71e0>
   19100:	ldr	r1, [pc, #336]	; 19258 <__assert_fail@plt+0x74e4>
   19104:	bl	11d20 <strncmp@plt>
   19108:	cmp	r0, #0
   1910c:	movne	r0, #18
   19110:	moveq	r0, #6
   19114:	b	18f54 <__assert_fail@plt+0x71e0>
   19118:	mov	r3, #64	; 0x40
   1911c:	ldr	r5, [pc, #288]	; 19244 <__assert_fail@plt+0x74d0>
   19120:	b	18e6c <__assert_fail@plt+0x70f8>
   19124:	ldrb	r3, [r0]
   19128:	cmp	r3, #48	; 0x30
   1912c:	movne	r3, #96	; 0x60
   19130:	bne	18e6c <__assert_fail@plt+0x70f8>
   19134:	b	18eac <__assert_fail@plt+0x7138>
   19138:	ldrb	r3, [r0]
   1913c:	cmp	r3, #48	; 0x30
   19140:	beq	19034 <__assert_fail@plt+0x72c0>
   19144:	ldrb	r3, [r7, #140]	; 0x8c
   19148:	cmp	r3, #0
   1914c:	beq	19034 <__assert_fail@plt+0x72c0>
   19150:	mov	r3, #168	; 0xa8
   19154:	b	18e6c <__assert_fail@plt+0x70f8>
   19158:	ldrb	fp, [r0]
   1915c:	mov	r3, r5
   19160:	subs	r2, fp, #48	; 0x30
   19164:	movne	r2, #1
   19168:	str	r2, [sp, #16]
   1916c:	b	18b5c <__assert_fail@plt+0x6de8>
   19170:	ldr	r2, [r5, #160]	; 0xa0
   19174:	cmp	r2, #0
   19178:	beq	18fc4 <__assert_fail@plt+0x7250>
   1917c:	cmp	r2, #1
   19180:	ldr	r0, [r5, #164]	; 0xa4
   19184:	beq	19208 <__assert_fail@plt+0x7494>
   19188:	cmp	r2, #2
   1918c:	bne	191a0 <__assert_fail@plt+0x742c>
   19190:	ldr	r1, [pc, #192]	; 19258 <__assert_fail@plt+0x74e4>
   19194:	bl	11d20 <strncmp@plt>
   19198:	cmp	r0, #0
   1919c:	beq	18fc4 <__assert_fail@plt+0x7250>
   191a0:	mov	r0, #20
   191a4:	b	18f54 <__assert_fail@plt+0x71e0>
   191a8:	mov	r3, #80	; 0x50
   191ac:	ldr	r5, [pc, #144]	; 19244 <__assert_fail@plt+0x74d0>
   191b0:	b	18e6c <__assert_fail@plt+0x70f8>
   191b4:	ldrb	r3, [r0]
   191b8:	cmp	r3, #48	; 0x30
   191bc:	movne	r3, #144	; 0x90
   191c0:	bne	18e6c <__assert_fail@plt+0x70f8>
   191c4:	mov	r0, #6
   191c8:	b	18f54 <__assert_fail@plt+0x71e0>
   191cc:	ldrb	r3, [r0]
   191d0:	cmp	r3, #48	; 0x30
   191d4:	movne	r3, #128	; 0x80
   191d8:	bne	18e6c <__assert_fail@plt+0x70f8>
   191dc:	b	18f28 <__assert_fail@plt+0x71b4>
   191e0:	ldrb	r3, [r0]
   191e4:	cmp	r3, #48	; 0x30
   191e8:	movne	r3, #136	; 0x88
   191ec:	bne	18e6c <__assert_fail@plt+0x70f8>
   191f0:	b	19004 <__assert_fail@plt+0x7290>
   191f4:	ldrb	r3, [r0]
   191f8:	cmp	r3, #48	; 0x30
   191fc:	movne	r3, #152	; 0x98
   19200:	bne	18e6c <__assert_fail@plt+0x70f8>
   19204:	b	190d0 <__assert_fail@plt+0x735c>
   19208:	ldrb	r3, [r0]
   1920c:	cmp	r3, #48	; 0x30
   19210:	movne	r3, #160	; 0xa0
   19214:	bne	18e6c <__assert_fail@plt+0x70f8>
   19218:	b	18fc4 <__assert_fail@plt+0x7250>
   1921c:	mov	r0, #14
   19220:	b	18f54 <__assert_fail@plt+0x71e0>
   19224:	ldrb	r3, [r0]
   19228:	cmp	r3, #48	; 0x30
   1922c:	movne	r3, #112	; 0x70
   19230:	bne	18e6c <__assert_fail@plt+0x70f8>
   19234:	b	1906c <__assert_fail@plt+0x72f8>
   19238:	ldr	r5, [pc, #4]	; 19244 <__assert_fail@plt+0x74d0>
   1923c:	b	18f54 <__assert_fail@plt+0x71e0>
   19240:	andeq	r1, r4, r0, lsr r3
   19244:	ldrdeq	r1, [r4], -r0
   19248:	andeq	r1, r4, r4, lsr #6
   1924c:	andeq	r1, r4, r0, asr pc
   19250:	andeq	r1, r4, r8, lsl #5
   19254:	andeq	ip, r2, r8, lsl #1
   19258:	strdeq	sp, [r2], -r0
   1925c:	andeq	r0, r0, r2, lsl #4
   19260:	push	{r4, r5, r6, r7, r8, r9, lr}
   19264:	mov	r5, r0
   19268:	ldr	r4, [pc, #516]	; 19474 <__assert_fail@plt+0x7700>
   1926c:	sub	sp, sp, #676	; 0x2a4
   19270:	mov	r6, r1
   19274:	ldrb	r3, [r4, #3996]	; 0xf9c
   19278:	cmp	r3, #0
   1927c:	beq	192bc <__assert_fail@plt+0x7548>
   19280:	ldr	r3, [pc, #496]	; 19478 <__assert_fail@plt+0x7704>
   19284:	ldr	r2, [r3, #32]
   19288:	cmp	r2, #0
   1928c:	beq	192bc <__assert_fail@plt+0x7548>
   19290:	cmp	r2, #1
   19294:	ldr	r0, [r3, #36]	; 0x24
   19298:	beq	19464 <__assert_fail@plt+0x76f0>
   1929c:	cmp	r2, #2
   192a0:	beq	1940c <__assert_fail@plt+0x7698>
   192a4:	ldr	r0, [pc, #460]	; 19478 <__assert_fail@plt+0x7704>
   192a8:	bl	14b74 <__assert_fail@plt+0x2e00>
   192ac:	ldr	r0, [pc, #456]	; 1947c <__assert_fail@plt+0x7708>
   192b0:	bl	14b74 <__assert_fail@plt+0x2e00>
   192b4:	ldr	r0, [pc, #452]	; 19480 <__assert_fail@plt+0x770c>
   192b8:	bl	14b74 <__assert_fail@plt+0x2e00>
   192bc:	ldrb	r3, [r4, #3240]	; 0xca8
   192c0:	cmp	r3, #0
   192c4:	beq	19304 <__assert_fail@plt+0x7590>
   192c8:	ldr	r3, [r4, #3244]	; 0xcac
   192cc:	cmp	r3, #4
   192d0:	ldrb	r3, [r5, #132]	; 0x84
   192d4:	ldrne	r7, [r4, #3684]	; 0xe64
   192d8:	moveq	r7, #0
   192dc:	cmp	r3, #0
   192e0:	beq	192f0 <__assert_fail@plt+0x757c>
   192e4:	ldrd	r0, [r5, #112]	; 0x70
   192e8:	orrs	r3, r0, r1
   192ec:	bne	193fc <__assert_fail@plt+0x7688>
   192f0:	ldr	r3, [pc, #396]	; 19484 <__assert_fail@plt+0x7710>
   192f4:	mov	r2, r7
   192f8:	ldr	r1, [pc, #392]	; 19488 <__assert_fail@plt+0x7714>
   192fc:	mov	r0, #1
   19300:	bl	11bf4 <__printf_chk@plt>
   19304:	ldrb	r3, [r4, #3241]	; 0xca9
   19308:	cmp	r3, #0
   1930c:	beq	19340 <__assert_fail@plt+0x75cc>
   19310:	ldr	r3, [r4, #3244]	; 0xcac
   19314:	cmp	r3, #4
   19318:	ldrb	r3, [r5, #132]	; 0x84
   1931c:	ldrne	r7, [r4, #3704]	; 0xe78
   19320:	moveq	r7, #0
   19324:	cmp	r3, #0
   19328:	ldreq	r3, [pc, #340]	; 19484 <__assert_fail@plt+0x7710>
   1932c:	bne	193c8 <__assert_fail@plt+0x7654>
   19330:	mov	r2, r7
   19334:	ldr	r1, [pc, #332]	; 19488 <__assert_fail@plt+0x7714>
   19338:	mov	r0, #1
   1933c:	bl	11bf4 <__printf_chk@plt>
   19340:	ldrb	r3, [r4, #3708]	; 0xe7c
   19344:	cmp	r3, #0
   19348:	beq	1936c <__assert_fail@plt+0x75f8>
   1934c:	ldr	r3, [r4, #3244]	; 0xcac
   19350:	ldr	r1, [pc, #304]	; 19488 <__assert_fail@plt+0x7714>
   19354:	cmp	r3, #4
   19358:	moveq	r2, #0
   1935c:	ldrne	r2, [r4, #3712]	; 0xe80
   19360:	ldr	r3, [r5, #128]	; 0x80
   19364:	mov	r0, #1
   19368:	bl	11bf4 <__printf_chk@plt>
   1936c:	mov	r2, #0
   19370:	mov	r3, r6
   19374:	mov	r1, r2
   19378:	mov	r0, r5
   1937c:	bl	18b28 <__assert_fail@plt+0x6db4>
   19380:	ldr	r3, [r4, #3096]	; 0xc18
   19384:	cmp	r3, #0
   19388:	mov	r6, r0
   1938c:	bne	1939c <__assert_fail@plt+0x7628>
   19390:	mov	r0, r6
   19394:	add	sp, sp, #676	; 0x2a4
   19398:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1939c:	ldr	r2, [r5, #120]	; 0x78
   193a0:	ldr	r1, [r5, #32]
   193a4:	ldrb	r0, [r5, #132]	; 0x84
   193a8:	bl	14a7c <__assert_fail@plt+0x2d08>
   193ac:	subs	r4, r0, #0
   193b0:	bne	19420 <__assert_fail@plt+0x76ac>
   193b4:	cmp	r4, #0
   193b8:	addne	r6, r6, #1
   193bc:	mov	r0, r6
   193c0:	add	sp, sp, #676	; 0x2a4
   193c4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   193c8:	ldr	r3, [pc, #188]	; 1948c <__assert_fail@plt+0x7718>
   193cc:	ldr	ip, [r4, #3688]	; 0xe68
   193d0:	mov	r8, #512	; 0x200
   193d4:	ldrd	r2, [r3]
   193d8:	mov	r9, #0
   193dc:	ldrd	r0, [r5, #80]	; 0x50
   193e0:	strd	r2, [sp, #8]
   193e4:	strd	r8, [sp]
   193e8:	mov	r3, ip
   193ec:	add	r2, sp, #20
   193f0:	bl	202e8 <__assert_fail@plt+0xe574>
   193f4:	mov	r3, r0
   193f8:	b	19330 <__assert_fail@plt+0x75bc>
   193fc:	add	r2, sp, #20
   19400:	bl	216e0 <__assert_fail@plt+0xf96c>
   19404:	mov	r3, r0
   19408:	b	192f4 <__assert_fail@plt+0x7580>
   1940c:	ldr	r1, [pc, #124]	; 19490 <__assert_fail@plt+0x771c>
   19410:	bl	11d20 <strncmp@plt>
   19414:	cmp	r0, #0
   19418:	beq	192bc <__assert_fail@plt+0x7548>
   1941c:	b	192a4 <__assert_fail@plt+0x7530>
   19420:	ldr	r3, [pc, #108]	; 19494 <__assert_fail@plt+0x7720>
   19424:	ldr	ip, [pc, #108]	; 19498 <__assert_fail@plt+0x7724>
   19428:	ldr	r0, [r3]
   1942c:	ldrd	r2, [ip, #-8]
   19430:	ldr	r1, [r0, #20]
   19434:	adds	r2, r2, #1
   19438:	ldr	lr, [r0, #24]
   1943c:	adc	r3, r3, #0
   19440:	cmp	r1, lr
   19444:	strd	r2, [ip, #-8]
   19448:	addcc	r3, r1, #1
   1944c:	strcc	r3, [r0, #20]
   19450:	strbcc	r4, [r1]
   19454:	bcc	193b4 <__assert_fail@plt+0x7640>
   19458:	mov	r1, r4
   1945c:	bl	11c48 <__overflow@plt>
   19460:	b	193b4 <__assert_fail@plt+0x7640>
   19464:	ldrb	r3, [r0]
   19468:	cmp	r3, #48	; 0x30
   1946c:	bne	192a4 <__assert_fail@plt+0x7530>
   19470:	b	192bc <__assert_fail@plt+0x7548>
   19474:	andeq	r1, r4, r0, lsr r3
   19478:	ldrdeq	r1, [r4], -r0
   1947c:	strdeq	r1, [r4], -r0
   19480:	ldrdeq	r1, [r4], -r8
   19484:	andeq	sp, r2, ip, asr r8
   19488:	andeq	sp, r2, r0, ror #16
   1948c:	andeq	r2, r4, r0, lsr #3
   19490:	strdeq	sp, [r2], -r0
   19494:	andeq	r1, r4, r4, lsr #6
   19498:	andeq	r2, r4, r0, asr #3
   1949c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194a0:	sub	sp, sp, #20
   194a4:	ldr	r5, [pc, #396]	; 19638 <__assert_fail@plt+0x78c4>
   194a8:	ldr	r3, [r5, #3260]	; 0xcbc
   194ac:	cmp	r3, #0
   194b0:	beq	19628 <__assert_fail@plt+0x78b4>
   194b4:	ldr	r3, [pc, #384]	; 1963c <__assert_fail@plt+0x78c8>
   194b8:	mov	r8, #0
   194bc:	mov	sl, r0
   194c0:	str	r3, [sp, #4]
   194c4:	ldr	r9, [pc, #372]	; 19640 <__assert_fail@plt+0x78cc>
   194c8:	mov	r4, r8
   194cc:	mov	fp, #32
   194d0:	b	19504 <__assert_fail@plt+0x7790>
   194d4:	cmp	r4, #0
   194d8:	addne	r8, r8, #2
   194dc:	movne	r6, r8
   194e0:	bne	19564 <__assert_fail@plt+0x77f0>
   194e4:	mov	r6, r8
   194e8:	mov	r1, r6
   194ec:	mov	r0, r7
   194f0:	bl	19260 <__assert_fail@plt+0x74ec>
   194f4:	ldr	r3, [r5, #3260]	; 0xcbc
   194f8:	add	r4, r4, #1
   194fc:	cmp	r3, r4
   19500:	bls	195d0 <__assert_fail@plt+0x785c>
   19504:	ldr	r3, [r5, #3268]	; 0xcc4
   19508:	ldr	r2, [r5, #3276]	; 0xccc
   1950c:	cmp	r2, #0
   19510:	ldr	r7, [r3, r4, lsl #2]
   19514:	beq	194d4 <__assert_fail@plt+0x7760>
   19518:	mov	r0, r7
   1951c:	bl	16670 <__assert_fail@plt+0x48fc>
   19520:	cmp	r4, #0
   19524:	moveq	r6, r8
   19528:	addeq	r8, r0, r8
   1952c:	beq	194e8 <__assert_fail@plt+0x7774>
   19530:	ldr	r3, [r5, #3276]	; 0xccc
   19534:	add	r6, r8, #2
   19538:	cmp	r3, #0
   1953c:	addeq	r8, r0, r6
   19540:	beq	19564 <__assert_fail@plt+0x77f0>
   19544:	add	r2, r6, r0
   19548:	cmp	r3, r2
   1954c:	bls	195b8 <__assert_fail@plt+0x7844>
   19550:	mvn	r3, #2
   19554:	sub	r3, r3, r0
   19558:	cmp	r3, r8
   1955c:	bcc	195b8 <__assert_fail@plt+0x7844>
   19560:	mov	r8, r2
   19564:	mov	r2, fp
   19568:	mov	r3, #32
   1956c:	ldr	r0, [r9]
   19570:	ldr	r1, [r0, #20]
   19574:	ldr	ip, [r0, #24]
   19578:	cmp	r1, ip
   1957c:	addcc	ip, r1, #1
   19580:	strcc	ip, [r0, #20]
   19584:	strbcc	sl, [r1]
   19588:	bcs	19600 <__assert_fail@plt+0x788c>
   1958c:	ldr	r0, [r9]
   19590:	ldr	r1, [r0, #20]
   19594:	ldr	ip, [r0, #24]
   19598:	cmp	r1, ip
   1959c:	addcc	r2, r1, #1
   195a0:	strcc	r2, [r0, #20]
   195a4:	strbcc	r3, [r1]
   195a8:	bcc	194e8 <__assert_fail@plt+0x7774>
   195ac:	mov	r1, r2
   195b0:	bl	11c48 <__overflow@plt>
   195b4:	b	194e8 <__assert_fail@plt+0x7774>
   195b8:	ldr	r3, [sp, #4]
   195bc:	mov	r8, r0
   195c0:	mov	r6, #0
   195c4:	ldrb	r3, [r3, #210]	; 0xd2
   195c8:	mov	r2, r3
   195cc:	b	1956c <__assert_fail@plt+0x77f8>
   195d0:	ldr	r3, [sp, #4]
   195d4:	ldr	r0, [r9]
   195d8:	ldrb	r1, [r3, #210]	; 0xd2
   195dc:	ldr	r2, [r0, #24]
   195e0:	ldr	r3, [r0, #20]
   195e4:	cmp	r3, r2
   195e8:	bcs	1961c <__assert_fail@plt+0x78a8>
   195ec:	add	r2, r3, #1
   195f0:	str	r2, [r0, #20]
   195f4:	strb	r1, [r3]
   195f8:	add	sp, sp, #20
   195fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19600:	mov	r1, sl
   19604:	str	r2, [sp, #12]
   19608:	str	r3, [sp, #8]
   1960c:	bl	11c48 <__overflow@plt>
   19610:	ldr	r3, [sp, #8]
   19614:	ldr	r2, [sp, #12]
   19618:	b	1958c <__assert_fail@plt+0x7818>
   1961c:	add	sp, sp, #20
   19620:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19624:	b	11c48 <__overflow@plt>
   19628:	ldr	r3, [pc, #12]	; 1963c <__assert_fail@plt+0x78c8>
   1962c:	ldr	r9, [pc, #12]	; 19640 <__assert_fail@plt+0x78cc>
   19630:	str	r3, [sp, #4]
   19634:	b	195d4 <__assert_fail@plt+0x7860>
   19638:	andeq	r1, r4, r0, lsr r3
   1963c:	ldrdeq	r1, [r4], -r0
   19640:	andeq	r1, r4, r4, lsr #6
   19644:	ldrb	r3, [r0, #132]	; 0x84
   19648:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1964c:	sub	sp, sp, #4800	; 0x12c0
   19650:	cmp	r3, #0
   19654:	sub	sp, sp, #4
   19658:	mov	r5, r0
   1965c:	beq	196cc <__assert_fail@plt+0x7958>
   19660:	add	r3, sp, #64	; 0x40
   19664:	add	r1, sp, #52	; 0x34
   19668:	add	r0, r0, #16
   1966c:	str	r3, [sp, #20]
   19670:	bl	1e044 <__assert_fail@plt+0xc2d0>
   19674:	ldr	r6, [pc, #2936]	; 1a1f4 <__assert_fail@plt+0x8480>
   19678:	ldrb	r3, [r6, #3997]	; 0xf9d
   1967c:	cmp	r3, #0
   19680:	beq	196c4 <__assert_fail@plt+0x7950>
   19684:	ldr	r3, [r5, #136]	; 0x88
   19688:	cmp	r3, #1
   1968c:	moveq	r3, #46	; 0x2e
   19690:	strbeq	r3, [sp, #62]	; 0x3e
   19694:	beq	196a0 <__assert_fail@plt+0x792c>
   19698:	cmp	r3, #2
   1969c:	beq	196c0 <__assert_fail@plt+0x794c>
   196a0:	ldr	r3, [r6, #3248]	; 0xcb0
   196a4:	cmp	r3, #3
   196a8:	ldrls	pc, [pc, r3, lsl #2]
   196ac:	b	19b64 <__assert_fail@plt+0x7df0>
   196b0:	andeq	r9, r1, r8, asr #20
   196b4:	andeq	r9, r1, r0, ror sl
   196b8:	andeq	r9, r1, r0, lsr #20
   196bc:	andeq	r9, r1, ip, lsl #14
   196c0:	mov	r3, #43	; 0x2b
   196c4:	strb	r3, [sp, #62]	; 0x3e
   196c8:	b	196a0 <__assert_fail@plt+0x792c>
   196cc:	ldr	r1, [r0, #120]	; 0x78
   196d0:	ldr	r2, [pc, #2848]	; 1a1f8 <__assert_fail@plt+0x8484>
   196d4:	add	r0, sp, #64	; 0x40
   196d8:	add	r2, r2, r1
   196dc:	mov	ip, r0
   196e0:	str	r0, [sp, #20]
   196e4:	ldrb	r0, [r2, #388]	; 0x184
   196e8:	sub	r1, ip, #11
   196ec:	ldr	r2, [pc, #2824]	; 1a1fc <__assert_fail@plt+0x8488>
   196f0:	strb	r0, [sp, #52]	; 0x34
   196f4:	str	r2, [ip, #-11]
   196f8:	mov	r0, ip
   196fc:	str	r2, [r1, #4]
   19700:	strh	r2, [r1, #8]
   19704:	strb	r3, [sp, #63]	; 0x3f
   19708:	b	19674 <__assert_fail@plt+0x7900>
   1970c:	ldr	r2, [r5, #96]	; 0x60
   19710:	ldr	r3, [r5, #100]	; 0x64
   19714:	add	r1, sp, #704	; 0x2c0
   19718:	cmn	r2, #1
   1971c:	cmneq	r3, #1
   19720:	mov	r0, r1
   19724:	str	r1, [sp, #36]	; 0x24
   19728:	moveq	r1, #1
   1972c:	movne	r1, #0
   19730:	eor	r1, r1, #1
   19734:	str	r1, [sp, #28]
   19738:	str	r2, [r0, #-660]	; 0xfffffd6c
   1973c:	str	r3, [r0, #-656]	; 0xfffffd70
   19740:	ldrb	r3, [r6, #3240]	; 0xca8
   19744:	cmp	r3, #0
   19748:	addeq	r7, sp, #1168	; 0x490
   1974c:	subeq	r7, r7, #12
   19750:	moveq	r4, r7
   19754:	bne	19aa0 <__assert_fail@plt+0x7d2c>
   19758:	ldrb	r3, [r6, #3241]	; 0xca9
   1975c:	cmp	r3, #0
   19760:	beq	197c4 <__assert_fail@plt+0x7a50>
   19764:	ldrb	r3, [r5, #132]	; 0x84
   19768:	cmp	r3, #0
   1976c:	ldreq	r8, [pc, #2700]	; 1a200 <__assert_fail@plt+0x848c>
   19770:	bne	19c74 <__assert_fail@plt+0x7f00>
   19774:	mov	r1, #0
   19778:	mov	r0, r8
   1977c:	ldr	r9, [r6, #3704]	; 0xe78
   19780:	bl	221d8 <__assert_fail@plt+0x10464>
   19784:	sub	r9, r9, r0
   19788:	cmp	r9, #0
   1978c:	ble	1a08c <__assert_fail@plt+0x8318>
   19790:	mov	r0, r4
   19794:	mov	r2, r9
   19798:	mov	r1, #32
   1979c:	bl	11be8 <memset@plt>
   197a0:	ldr	sl, [sp, #20]
   197a4:	add	r4, r4, r9
   197a8:	ldrb	r3, [r8], #1
   197ac:	cmp	r3, #0
   197b0:	strb	r3, [r4], #1
   197b4:	bne	197a8 <__assert_fail@plt+0x7a34>
   197b8:	mov	r3, #32
   197bc:	str	sl, [sp, #20]
   197c0:	strb	r3, [r4, #-1]
   197c4:	ldrb	r3, [r5, #132]	; 0x84
   197c8:	ldr	r8, [r6, #4000]	; 0xfa0
   197cc:	cmp	r3, #0
   197d0:	ldreq	r0, [pc, #2600]	; 1a200 <__assert_fail@plt+0x848c>
   197d4:	bne	19b50 <__assert_fail@plt+0x7ddc>
   197d8:	ldr	r3, [sp, #20]
   197dc:	str	r0, [sp, #8]
   197e0:	sub	r3, r3, #12
   197e4:	mov	r0, r4
   197e8:	stm	sp, {r3, r8}
   197ec:	mvn	r2, #0
   197f0:	ldr	r3, [pc, #2572]	; 1a204 <__assert_fail@plt+0x8490>
   197f4:	mov	r1, #1
   197f8:	bl	11bc4 <__sprintf_chk@plt>
   197fc:	ldrb	r3, [r6, #3988]	; 0xf94
   19800:	cmp	r3, #0
   19804:	add	r4, r4, r0
   19808:	bne	19aec <__assert_fail@plt+0x7d78>
   1980c:	ldr	r8, [pc, #2548]	; 1a208 <__assert_fail@plt+0x8494>
   19810:	ldr	r3, [pc, #2548]	; 1a20c <__assert_fail@plt+0x8498>
   19814:	str	r3, [sp, #24]
   19818:	ldr	r9, [pc, #2544]	; 1a210 <__assert_fail@plt+0x849c>
   1981c:	ldrb	r3, [r9, #204]	; 0xcc
   19820:	cmp	r3, #0
   19824:	bne	19840 <__assert_fail@plt+0x7acc>
   19828:	ldrb	r3, [r9, #205]	; 0xcd
   1982c:	cmp	r3, #0
   19830:	bne	19840 <__assert_fail@plt+0x7acc>
   19834:	ldrb	r3, [r6, #3252]	; 0xcb4
   19838:	cmp	r3, #0
   1983c:	beq	19b68 <__assert_fail@plt+0x7df4>
   19840:	ldrd	r0, [r8, #-8]
   19844:	sub	r4, r4, r7
   19848:	ldr	r3, [sp, #24]
   1984c:	adds	sl, r0, r4
   19850:	adc	fp, r1, #0
   19854:	ldr	r3, [r3]
   19858:	mov	r2, r4
   1985c:	mov	r1, #1
   19860:	mov	r0, r7
   19864:	strd	sl, [r8, #-8]
   19868:	bl	11960 <fwrite_unlocked@plt>
   1986c:	ldrb	r3, [r9, #204]	; 0xcc
   19870:	cmp	r3, #0
   19874:	bne	19b78 <__assert_fail@plt+0x7e04>
   19878:	ldrb	r3, [r9, #205]	; 0xcd
   1987c:	cmp	r3, #0
   19880:	bne	19bc0 <__assert_fail@plt+0x7e4c>
   19884:	ldrb	r3, [r6, #3252]	; 0xcb4
   19888:	cmp	r3, #0
   1988c:	bne	19c08 <__assert_fail@plt+0x7e94>
   19890:	ldrb	r3, [r6, #3708]	; 0xe7c
   19894:	cmp	r3, #0
   19898:	moveq	r4, r7
   1989c:	bne	19c54 <__assert_fail@plt+0x7ee0>
   198a0:	ldrb	r3, [r5, #132]	; 0x84
   198a4:	cmp	r3, #0
   198a8:	beq	19a98 <__assert_fail@plt+0x7d24>
   198ac:	ldr	r3, [r5, #32]
   198b0:	and	r3, r3, #45056	; 0xb000
   198b4:	cmp	r3, #8192	; 0x2000
   198b8:	beq	19ca8 <__assert_fail@plt+0x7f34>
   198bc:	ldrd	sl, [r9, #216]	; 0xd8
   198c0:	ldrd	r0, [r5, #64]	; 0x40
   198c4:	ldr	r3, [r6, #4032]	; 0xfc0
   198c8:	strd	sl, [sp, #8]
   198cc:	mov	fp, #0
   198d0:	mov	sl, #1
   198d4:	add	r2, sp, #152	; 0x98
   198d8:	strd	sl, [sp]
   198dc:	bl	202e8 <__assert_fail@plt+0xe574>
   198e0:	mov	fp, r0
   198e4:	ldr	r3, [r6, #4024]	; 0xfb8
   198e8:	mov	r1, #0
   198ec:	mov	r0, fp
   198f0:	str	r3, [sp, #32]
   198f4:	bl	221d8 <__assert_fail@plt+0x10464>
   198f8:	ldr	r3, [sp, #32]
   198fc:	sub	r3, r3, r0
   19900:	cmp	r3, #0
   19904:	ble	1a084 <__assert_fail@plt+0x8310>
   19908:	mov	r2, r3
   1990c:	mov	r0, r4
   19910:	mov	r1, #32
   19914:	str	r3, [sp, #32]
   19918:	bl	11be8 <memset@plt>
   1991c:	ldr	r3, [sp, #32]
   19920:	ldr	sl, [sp, #20]
   19924:	add	r4, r4, r3
   19928:	ldrb	r3, [fp], #1
   1992c:	cmp	r3, #0
   19930:	strb	r3, [r4], #1
   19934:	bne	19928 <__assert_fail@plt+0x7bb4>
   19938:	mov	r3, #32
   1993c:	str	sl, [sp, #20]
   19940:	strb	r3, [r4, #-1]
   19944:	ldrb	r3, [r5, #132]	; 0x84
   19948:	mov	r2, #1
   1994c:	strb	r2, [r4]
   19950:	ldr	r2, [sp, #28]
   19954:	tst	r2, r3
   19958:	bne	19d54 <__assert_fail@plt+0x7fe0>
   1995c:	ldr	fp, [r9, #224]	; 0xe0
   19960:	cmp	fp, #0
   19964:	bge	1a038 <__assert_fail@plt+0x82c4>
   19968:	add	r3, sp, #108	; 0x6c
   1996c:	str	r3, [sp, #32]
   19970:	ldr	ip, [sp, #36]	; 0x24
   19974:	ldr	r3, [sp, #20]
   19978:	ldr	r2, [sp, #32]
   1997c:	sub	r1, r3, #24
   19980:	ldr	r0, [r6, #4036]	; 0xfc4
   19984:	mov	r3, #0
   19988:	str	r3, [ip, #-664]	; 0xfffffd68
   1998c:	bl	28cc4 <_obstack_memory_used@@Base+0x4718>
   19990:	cmp	r0, #0
   19994:	beq	199e4 <__assert_fail@plt+0x7c70>
   19998:	ldrb	r2, [r6, #3076]	; 0xc04
   1999c:	ldr	r3, [r6, #4036]	; 0xfc4
   199a0:	mov	sl, #0
   199a4:	cmp	r2, #0
   199a8:	ldrne	r2, [sp, #36]	; 0x24
   199ac:	ldreq	r2, [r9, #196]	; 0xc4
   199b0:	ldrne	r1, [r2, #-580]	; 0xfffffdbc
   199b4:	ldrne	r2, [pc, #2136]	; 1a214 <__assert_fail@plt+0x84a0>
   199b8:	str	r3, [sp]
   199bc:	addne	r2, r2, r1, lsl #7
   199c0:	add	r1, sp, #152	; 0x98
   199c4:	str	r1, [sp, #20]
   199c8:	mov	r0, r1
   199cc:	ldr	r3, [sp, #32]
   199d0:	ldr	r1, [pc, #2112]	; 1a218 <__assert_fail@plt+0x84a4>
   199d4:	str	sl, [sp, #4]
   199d8:	bl	24160 <__assert_fail@plt+0x123ec>
   199dc:	subs	r1, r0, #0
   199e0:	bne	1a1dc <__assert_fail@plt+0x8468>
   199e4:	ldr	fp, [r9, #224]	; 0xe0
   199e8:	cmp	fp, #0
   199ec:	movlt	r3, #0
   199f0:	movlt	fp, r3
   199f4:	strlt	r3, [r9, #224]	; 0xe0
   199f8:	ldrb	r3, [r5, #132]	; 0x84
   199fc:	ldr	r2, [sp, #28]
   19a00:	tst	r2, r3
   19a04:	beq	1a038 <__assert_fail@plt+0x82c4>
   19a08:	ldr	r3, [sp, #36]	; 0x24
   19a0c:	add	r2, sp, #152	; 0x98
   19a10:	ldr	r0, [r3, #-660]	; 0xfffffd6c
   19a14:	asr	r1, r0, #31
   19a18:	bl	21610 <__assert_fail@plt+0xf89c>
   19a1c:	b	1a03c <__assert_fail@plt+0x82c8>
   19a20:	add	r3, sp, #704	; 0x2c0
   19a24:	mov	r1, r3
   19a28:	str	r3, [sp, #36]	; 0x24
   19a2c:	ldr	r3, [r5, #88]	; 0x58
   19a30:	ldr	r2, [r5, #92]	; 0x5c
   19a34:	str	r3, [r1, #-660]	; 0xfffffd6c
   19a38:	mov	r3, #1
   19a3c:	str	r2, [r1, #-656]	; 0xfffffd70
   19a40:	str	r3, [sp, #28]
   19a44:	b	19740 <__assert_fail@plt+0x79cc>
   19a48:	add	r3, sp, #704	; 0x2c0
   19a4c:	mov	r1, r3
   19a50:	str	r3, [sp, #36]	; 0x24
   19a54:	ldr	r3, [r5, #96]	; 0x60
   19a58:	ldr	r2, [r5, #100]	; 0x64
   19a5c:	str	r3, [r1, #-660]	; 0xfffffd6c
   19a60:	mov	r3, #1
   19a64:	str	r2, [r1, #-656]	; 0xfffffd70
   19a68:	str	r3, [sp, #28]
   19a6c:	b	19740 <__assert_fail@plt+0x79cc>
   19a70:	add	r3, sp, #704	; 0x2c0
   19a74:	mov	r1, r3
   19a78:	str	r3, [sp, #36]	; 0x24
   19a7c:	ldr	r3, [r5, #104]	; 0x68
   19a80:	ldr	r2, [r5, #108]	; 0x6c
   19a84:	str	r3, [r1, #-660]	; 0xfffffd6c
   19a88:	mov	r3, #1
   19a8c:	str	r2, [r1, #-656]	; 0xfffffd70
   19a90:	str	r3, [sp, #28]
   19a94:	b	19740 <__assert_fail@plt+0x79cc>
   19a98:	ldr	fp, [pc, #1888]	; 1a200 <__assert_fail@plt+0x848c>
   19a9c:	b	198e4 <__assert_fail@plt+0x7b70>
   19aa0:	ldrb	r3, [r5, #132]	; 0x84
   19aa4:	ldr	r4, [r6, #3684]	; 0xe64
   19aa8:	cmp	r3, #0
   19aac:	beq	19abc <__assert_fail@plt+0x7d48>
   19ab0:	ldrd	r0, [r5, #112]	; 0x70
   19ab4:	orrs	r3, r0, r1
   19ab8:	bne	1a078 <__assert_fail@plt+0x8304>
   19abc:	ldr	r0, [pc, #1852]	; 1a200 <__assert_fail@plt+0x848c>
   19ac0:	add	r7, sp, #1168	; 0x490
   19ac4:	sub	r7, r7, #12
   19ac8:	str	r0, [sp, #4]
   19acc:	str	r4, [sp]
   19ad0:	mov	r0, r7
   19ad4:	ldr	r3, [pc, #1856]	; 1a21c <__assert_fail@plt+0x84a8>
   19ad8:	ldr	r2, [pc, #1856]	; 1a220 <__assert_fail@plt+0x84ac>
   19adc:	mov	r1, #1
   19ae0:	bl	11bc4 <__sprintf_chk@plt>
   19ae4:	add	r4, r7, r0
   19ae8:	b	19758 <__assert_fail@plt+0x79e4>
   19aec:	ldr	r3, [pc, #1816]	; 1a20c <__assert_fail@plt+0x8498>
   19af0:	ldr	r8, [pc, #1808]	; 1a208 <__assert_fail@plt+0x8494>
   19af4:	str	r3, [sp, #24]
   19af8:	ldr	r9, [r3]
   19afc:	ldrd	r2, [r8, #-8]
   19b00:	ldr	r1, [r9, #20]
   19b04:	adds	sl, r2, #2
   19b08:	ldr	r0, [r9, #24]
   19b0c:	adc	fp, r3, #0
   19b10:	cmp	r0, r1
   19b14:	strd	sl, [r8, #-8]
   19b18:	bls	1a094 <__assert_fail@plt+0x8320>
   19b1c:	add	r2, r1, #1
   19b20:	mov	r3, #32
   19b24:	str	r2, [r9, #20]
   19b28:	strb	r3, [r1]
   19b2c:	ldr	r3, [r9, #20]
   19b30:	ldr	r2, [r9, #24]
   19b34:	cmp	r2, r3
   19b38:	bls	1a0ac <__assert_fail@plt+0x8338>
   19b3c:	add	r1, r3, #1
   19b40:	mov	r2, #32
   19b44:	str	r1, [r9, #20]
   19b48:	strb	r2, [r3]
   19b4c:	b	19818 <__assert_fail@plt+0x7aa4>
   19b50:	add	r2, sp, #152	; 0x98
   19b54:	ldr	r0, [r5, #36]	; 0x24
   19b58:	mov	r1, #0
   19b5c:	bl	216e0 <__assert_fail@plt+0xf96c>
   19b60:	b	197d8 <__assert_fail@plt+0x7a64>
   19b64:	bl	11d2c <abort@plt>
   19b68:	ldrb	r3, [r6, #3708]	; 0xe7c
   19b6c:	cmp	r3, #0
   19b70:	beq	198a0 <__assert_fail@plt+0x7b2c>
   19b74:	b	19840 <__assert_fail@plt+0x7acc>
   19b78:	ldrb	r3, [r5, #132]	; 0x84
   19b7c:	ldr	r4, [r5, #40]	; 0x28
   19b80:	ldr	fp, [r6, #4004]	; 0xfa4
   19b84:	cmp	r3, #0
   19b88:	beq	1a068 <__assert_fail@plt+0x82f4>
   19b8c:	ldrb	r3, [r6, #4008]	; 0xfa8
   19b90:	cmp	r3, #0
   19b94:	movne	r0, #0
   19b98:	bne	19ba4 <__assert_fail@plt+0x7e30>
   19b9c:	mov	r0, r4
   19ba0:	bl	212c8 <__assert_fail@plt+0xf554>
   19ba4:	mov	r3, #0
   19ba8:	str	fp, [sp]
   19bac:	mov	r2, r4
   19bb0:	bl	18428 <__assert_fail@plt+0x66b4>
   19bb4:	ldrb	r3, [r9, #205]	; 0xcd
   19bb8:	cmp	r3, #0
   19bbc:	beq	19884 <__assert_fail@plt+0x7b10>
   19bc0:	ldrb	r3, [r5, #132]	; 0x84
   19bc4:	ldr	r4, [r5, #44]	; 0x2c
   19bc8:	ldr	fp, [r6, #4012]	; 0xfac
   19bcc:	cmp	r3, #0
   19bd0:	beq	1a070 <__assert_fail@plt+0x82fc>
   19bd4:	ldrb	r3, [r6, #4008]	; 0xfa8
   19bd8:	cmp	r3, #0
   19bdc:	movne	r0, #0
   19be0:	bne	19bec <__assert_fail@plt+0x7e78>
   19be4:	mov	r0, r4
   19be8:	bl	2146c <__assert_fail@plt+0xf6f8>
   19bec:	mov	r3, #0
   19bf0:	str	fp, [sp]
   19bf4:	mov	r2, r4
   19bf8:	bl	18428 <__assert_fail@plt+0x66b4>
   19bfc:	ldrb	r3, [r6, #3252]	; 0xcb4
   19c00:	cmp	r3, #0
   19c04:	beq	19890 <__assert_fail@plt+0x7b1c>
   19c08:	ldrb	r3, [r5, #132]	; 0x84
   19c0c:	ldr	r4, [r5, #40]	; 0x28
   19c10:	ldr	fp, [r6, #4016]	; 0xfb0
   19c14:	cmp	r3, #0
   19c18:	beq	1a060 <__assert_fail@plt+0x82ec>
   19c1c:	ldrb	r3, [r6, #4008]	; 0xfa8
   19c20:	cmp	r3, #0
   19c24:	movne	r0, #0
   19c28:	bne	19c34 <__assert_fail@plt+0x7ec0>
   19c2c:	mov	r0, r4
   19c30:	bl	212c8 <__assert_fail@plt+0xf554>
   19c34:	mov	r2, r4
   19c38:	mov	r3, #0
   19c3c:	str	fp, [sp]
   19c40:	bl	18428 <__assert_fail@plt+0x66b4>
   19c44:	ldrb	r3, [r6, #3708]	; 0xe7c
   19c48:	cmp	r3, #0
   19c4c:	moveq	r4, r7
   19c50:	beq	198a0 <__assert_fail@plt+0x7b2c>
   19c54:	ldr	r3, [r6, #3712]	; 0xe80
   19c58:	ldr	r0, [r5, #128]	; 0x80
   19c5c:	mov	r2, #0
   19c60:	str	r3, [sp]
   19c64:	mov	r3, #0
   19c68:	bl	18428 <__assert_fail@plt+0x66b4>
   19c6c:	mov	r4, r7
   19c70:	b	198a0 <__assert_fail@plt+0x7b2c>
   19c74:	ldr	r3, [pc, #1448]	; 1a224 <__assert_fail@plt+0x84b0>
   19c78:	ldr	ip, [r6, #3688]	; 0xe68
   19c7c:	mov	r8, #512	; 0x200
   19c80:	ldrd	r2, [r3]
   19c84:	mov	r9, #0
   19c88:	ldrd	r0, [r5, #80]	; 0x50
   19c8c:	strd	r2, [sp, #8]
   19c90:	strd	r8, [sp]
   19c94:	mov	r3, ip
   19c98:	add	r2, sp, #152	; 0x98
   19c9c:	bl	202e8 <__assert_fail@plt+0xe574>
   19ca0:	mov	r8, r0
   19ca4:	b	19774 <__assert_fail@plt+0x7a00>
   19ca8:	ldr	lr, [r6, #4020]	; 0xfb4
   19cac:	ldr	r0, [r5, #48]	; 0x30
   19cb0:	ldr	r1, [r6, #4028]	; 0xfbc
   19cb4:	ldr	r3, [r5, #52]	; 0x34
   19cb8:	add	r2, lr, #2
   19cbc:	ldr	ip, [r6, #4024]	; 0xfb8
   19cc0:	add	r2, r2, r1
   19cc4:	bic	r3, r3, #4080	; 0xff0
   19cc8:	lsl	r0, r0, #12
   19ccc:	sub	ip, ip, r2
   19cd0:	bic	r3, r3, #15
   19cd4:	mov	r1, #0
   19cd8:	cmp	ip, r1
   19cdc:	addge	lr, lr, ip
   19ce0:	addlt	lr, lr, r1
   19ce4:	orr	r0, r3, r0, lsr #20
   19ce8:	add	r2, sp, #108	; 0x6c
   19cec:	mov	sl, lr
   19cf0:	bl	216e0 <__assert_fail@plt+0xf96c>
   19cf4:	ldr	r1, [r5, #48]	; 0x30
   19cf8:	ldr	fp, [r6, #4028]	; 0xfbc
   19cfc:	lsr	r2, r1, #12
   19d00:	uxtb	r1, r1
   19d04:	str	r0, [sp, #32]
   19d08:	ldr	r0, [r5, #52]	; 0x34
   19d0c:	orr	r2, r2, r0, lsl #20
   19d10:	bic	r2, r2, #255	; 0xff
   19d14:	orr	r0, r2, r1
   19d18:	add	r2, sp, #152	; 0x98
   19d1c:	mov	r1, #0
   19d20:	bl	216e0 <__assert_fail@plt+0xf96c>
   19d24:	ldr	r3, [sp, #32]
   19d28:	str	sl, [sp]
   19d2c:	str	r3, [sp, #4]
   19d30:	str	fp, [sp, #8]
   19d34:	ldr	r3, [pc, #1260]	; 1a228 <__assert_fail@plt+0x84b4>
   19d38:	mvn	r2, #0
   19d3c:	mov	r1, #1
   19d40:	str	r0, [sp, #12]
   19d44:	mov	r0, r4
   19d48:	bl	11bc4 <__sprintf_chk@plt>
   19d4c:	add	r4, r4, r0
   19d50:	b	19944 <__assert_fail@plt+0x7bd0>
   19d54:	ldr	r3, [sp, #20]
   19d58:	ldr	r0, [r6, #4036]	; 0xfc4
   19d5c:	mov	r2, r3
   19d60:	sub	r1, r3, #20
   19d64:	bl	28cc4 <_obstack_memory_used@@Base+0x4718>
   19d68:	cmp	r0, #0
   19d6c:	beq	1a0fc <__assert_fail@plt+0x8388>
   19d70:	ldr	r3, [sp, #36]	; 0x24
   19d74:	ldr	r2, [r6, #4044]	; 0xfcc
   19d78:	ldr	r1, [r6, #4040]	; 0xfc8
   19d7c:	ldr	ip, [r3, #-656]	; 0xfffffd70
   19d80:	ldr	r3, [r3, #-660]	; 0xfffffd6c
   19d84:	cmp	r2, ip
   19d88:	movgt	r0, #1
   19d8c:	movle	r0, #0
   19d90:	movlt	fp, #1
   19d94:	movge	fp, #0
   19d98:	cmp	r1, r3
   19d9c:	movge	r2, #0
   19da0:	movlt	r2, #1
   19da4:	cmp	r1, r3
   19da8:	rsble	r2, r2, #0
   19dac:	rsbgt	r2, r2, #1
   19db0:	sub	lr, r0, fp
   19db4:	adds	r2, lr, r2, lsl #1
   19db8:	bmi	1a1a4 <__assert_fail@plt+0x8430>
   19dbc:	ldr	r2, [pc, #1128]	; 1a22c <__assert_fail@plt+0x84b8>
   19dc0:	add	r2, r1, r2
   19dc4:	cmp	r2, r3
   19dc8:	movge	sl, #0
   19dcc:	movlt	sl, #1
   19dd0:	cmp	r2, r3
   19dd4:	rsble	sl, sl, #0
   19dd8:	rsbgt	sl, sl, #1
   19ddc:	mov	r2, sl
   19de0:	adds	r2, lr, r2, lsl #1
   19de4:	movpl	r3, #0
   19de8:	bmi	1a0bc <__assert_fail@plt+0x8348>
   19dec:	ldrb	r2, [r6, #3076]	; 0xc04
   19df0:	ldr	r1, [r6, #4036]	; 0xfc4
   19df4:	cmp	r2, #0
   19df8:	lslne	r0, r3, #1
   19dfc:	addne	r0, r0, r3
   19e00:	ldrne	r3, [sp, #36]	; 0x24
   19e04:	addeq	r3, r9, r3, lsl #2
   19e08:	ldrne	r2, [pc, #1028]	; 1a214 <__assert_fail@plt+0x84a0>
   19e0c:	ldrne	r3, [r3, #-624]	; 0xfffffd90
   19e10:	ldreq	r2, [r3, #196]	; 0xc4
   19e14:	addne	r3, r3, r0, lsl #2
   19e18:	stm	sp, {r1, ip}
   19e1c:	addne	r2, r2, r3, lsl #7
   19e20:	ldr	r1, [pc, #1008]	; 1a218 <__assert_fail@plt+0x84a4>
   19e24:	ldr	r3, [sp, #20]
   19e28:	mov	r0, r4
   19e2c:	bl	24160 <__assert_fail@plt+0x123ec>
   19e30:	subs	r3, r0, #0
   19e34:	beq	1a0fc <__assert_fail@plt+0x8388>
   19e38:	add	r0, r4, r3
   19e3c:	add	r0, r0, #1
   19e40:	mov	r2, #32
   19e44:	strb	r2, [r4, r3]
   19e48:	ldrd	sl, [r8, #-8]
   19e4c:	sub	r4, r0, r7
   19e50:	mov	r1, #1
   19e54:	adds	r2, sl, r4
   19e58:	adc	r3, fp, #0
   19e5c:	mov	fp, r3
   19e60:	ldr	r3, [sp, #24]
   19e64:	mov	sl, r2
   19e68:	mov	r0, r7
   19e6c:	mov	r2, r4
   19e70:	ldr	r3, [r3]
   19e74:	strd	sl, [r8, #-8]
   19e78:	bl	11960 <fwrite_unlocked@plt>
   19e7c:	ldr	r2, [pc, #940]	; 1a230 <__assert_fail@plt+0x84bc>
   19e80:	mov	r3, r4
   19e84:	mov	r1, #0
   19e88:	mov	r0, r5
   19e8c:	bl	18b28 <__assert_fail@plt+0x6db4>
   19e90:	ldr	r2, [r5, #120]	; 0x78
   19e94:	cmp	r2, #6
   19e98:	mov	r9, r0
   19e9c:	beq	19eb8 <__assert_fail@plt+0x8144>
   19ea0:	ldr	r3, [r6, #3096]	; 0xc18
   19ea4:	cmp	r3, #0
   19ea8:	bne	19fe4 <__assert_fail@plt+0x8270>
   19eac:	add	sp, sp, #4800	; 0x12c0
   19eb0:	add	sp, sp, #4
   19eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19eb8:	ldr	r3, [r5, #4]
   19ebc:	cmp	r3, #0
   19ec0:	beq	19eac <__assert_fail@plt+0x8138>
   19ec4:	ldr	r3, [sp, #24]
   19ec8:	ldr	r7, [r3]
   19ecc:	ldrd	r2, [r8, #-8]
   19ed0:	ldr	r1, [r7, #20]
   19ed4:	adds	sl, r2, #4
   19ed8:	ldr	r0, [r7, #24]
   19edc:	adc	fp, r3, #0
   19ee0:	cmp	r1, r0
   19ee4:	strd	sl, [r8, #-8]
   19ee8:	bcs	1a0e4 <__assert_fail@plt+0x8370>
   19eec:	add	r2, r1, #1
   19ef0:	mov	r3, #32
   19ef4:	str	r2, [r7, #20]
   19ef8:	strb	r3, [r1]
   19efc:	ldr	r3, [r7, #20]
   19f00:	ldr	r2, [r7, #24]
   19f04:	cmp	r2, r3
   19f08:	bls	1a118 <__assert_fail@plt+0x83a4>
   19f0c:	add	r1, r3, #1
   19f10:	mov	r2, #45	; 0x2d
   19f14:	str	r1, [r7, #20]
   19f18:	strb	r2, [r3]
   19f1c:	ldr	r3, [r7, #20]
   19f20:	ldr	r2, [r7, #24]
   19f24:	cmp	r2, r3
   19f28:	bls	1a130 <__assert_fail@plt+0x83bc>
   19f2c:	add	r1, r3, #1
   19f30:	mov	r2, #62	; 0x3e
   19f34:	str	r1, [r7, #20]
   19f38:	strb	r2, [r3]
   19f3c:	ldr	r3, [r7, #20]
   19f40:	ldr	r2, [r7, #24]
   19f44:	cmp	r3, r2
   19f48:	addcc	r1, r3, #1
   19f4c:	movcc	r2, #32
   19f50:	strcc	r1, [r7, #20]
   19f54:	strbcc	r2, [r3]
   19f58:	bcs	1a148 <__assert_fail@plt+0x83d4>
   19f5c:	add	r3, r9, #4
   19f60:	add	r3, r3, r4
   19f64:	mov	r2, #0
   19f68:	mov	r1, #1
   19f6c:	mov	r0, r5
   19f70:	bl	18b28 <__assert_fail@plt+0x6db4>
   19f74:	ldr	r3, [r6, #3096]	; 0xc18
   19f78:	cmp	r3, #0
   19f7c:	beq	19eac <__assert_fail@plt+0x8138>
   19f80:	ldr	r1, [r5, #124]	; 0x7c
   19f84:	and	r2, r1, #61440	; 0xf000
   19f88:	cmp	r2, #32768	; 0x8000
   19f8c:	bne	1a158 <__assert_fail@plt+0x83e4>
   19f90:	cmp	r3, #3
   19f94:	bne	19eac <__assert_fail@plt+0x8138>
   19f98:	tst	r1, #73	; 0x49
   19f9c:	movne	r1, #42	; 0x2a
   19fa0:	movne	ip, r1
   19fa4:	beq	19eac <__assert_fail@plt+0x8138>
   19fa8:	ldr	r3, [sp, #24]
   19fac:	ldr	r0, [r3]
   19fb0:	ldrd	r2, [r8, #-8]
   19fb4:	ldr	lr, [r0, #20]
   19fb8:	ldr	r4, [r0, #24]
   19fbc:	adds	r6, r2, #1
   19fc0:	adc	r7, r3, #0
   19fc4:	cmp	lr, r4
   19fc8:	addcc	r3, lr, #1
   19fcc:	strd	r6, [r8, #-8]
   19fd0:	strcc	r3, [r0, #20]
   19fd4:	strbcc	ip, [lr]
   19fd8:	bcc	19eac <__assert_fail@plt+0x8138>
   19fdc:	bl	11c48 <__overflow@plt>
   19fe0:	b	19eac <__assert_fail@plt+0x8138>
   19fe4:	ldr	r1, [r5, #32]
   19fe8:	ldrb	r0, [r5, #132]	; 0x84
   19fec:	bl	14a7c <__assert_fail@plt+0x2d08>
   19ff0:	cmp	r0, #0
   19ff4:	beq	19eac <__assert_fail@plt+0x8138>
   19ff8:	ldr	r3, [sp, #24]
   19ffc:	ldrd	r4, [r8, #-8]
   1a000:	ldr	r3, [r3]
   1a004:	adds	r6, r4, #1
   1a008:	adc	r7, r5, #0
   1a00c:	ldr	r2, [r3, #20]
   1a010:	ldr	r1, [r3, #24]
   1a014:	strd	r6, [r8, #-8]
   1a018:	cmp	r2, r1
   1a01c:	addcc	r1, r2, #1
   1a020:	strcc	r1, [r3, #20]
   1a024:	strbcc	r0, [r2]
   1a028:	bcc	19eac <__assert_fail@plt+0x8138>
   1a02c:	mov	r1, r0
   1a030:	mov	r0, r3
   1a034:	b	19fdc <__assert_fail@plt+0x8268>
   1a038:	ldr	r0, [pc, #448]	; 1a200 <__assert_fail@plt+0x848c>
   1a03c:	str	r0, [sp, #4]
   1a040:	str	fp, [sp]
   1a044:	ldr	r3, [pc, #464]	; 1a21c <__assert_fail@plt+0x84a8>
   1a048:	mvn	r2, #0
   1a04c:	mov	r1, #1
   1a050:	mov	r0, r4
   1a054:	bl	11bc4 <__sprintf_chk@plt>
   1a058:	add	r0, r4, r0
   1a05c:	b	19e48 <__assert_fail@plt+0x80d4>
   1a060:	ldr	r0, [pc, #408]	; 1a200 <__assert_fail@plt+0x848c>
   1a064:	b	19c34 <__assert_fail@plt+0x7ec0>
   1a068:	ldr	r0, [pc, #400]	; 1a200 <__assert_fail@plt+0x848c>
   1a06c:	b	19ba4 <__assert_fail@plt+0x7e30>
   1a070:	ldr	r0, [pc, #392]	; 1a200 <__assert_fail@plt+0x848c>
   1a074:	b	19bec <__assert_fail@plt+0x7e78>
   1a078:	add	r2, sp, #152	; 0x98
   1a07c:	bl	216e0 <__assert_fail@plt+0xf96c>
   1a080:	b	19ac0 <__assert_fail@plt+0x7d4c>
   1a084:	ldr	sl, [sp, #20]
   1a088:	b	19928 <__assert_fail@plt+0x7bb4>
   1a08c:	ldr	sl, [sp, #20]
   1a090:	b	197a8 <__assert_fail@plt+0x7a34>
   1a094:	mov	r1, #32
   1a098:	mov	r0, r9
   1a09c:	bl	11c48 <__overflow@plt>
   1a0a0:	cmn	r0, #1
   1a0a4:	bne	19b2c <__assert_fail@plt+0x7db8>
   1a0a8:	b	19818 <__assert_fail@plt+0x7aa4>
   1a0ac:	mov	r0, r9
   1a0b0:	mov	r1, #32
   1a0b4:	bl	11c48 <__overflow@plt>
   1a0b8:	b	19818 <__assert_fail@plt+0x7aa4>
   1a0bc:	cmp	r1, r3
   1a0c0:	movle	r2, #0
   1a0c4:	movgt	r2, #1
   1a0c8:	cmp	r1, r3
   1a0cc:	rsbge	r1, r2, #0
   1a0d0:	rsblt	r1, r2, #1
   1a0d4:	sub	r3, fp, r0
   1a0d8:	add	r3, r3, r1, lsl #1
   1a0dc:	lsr	r3, r3, #31
   1a0e0:	b	19dec <__assert_fail@plt+0x8078>
   1a0e4:	mov	r1, #32
   1a0e8:	mov	r0, r7
   1a0ec:	bl	11c48 <__overflow@plt>
   1a0f0:	cmn	r0, #1
   1a0f4:	bne	19efc <__assert_fail@plt+0x8188>
   1a0f8:	b	19f5c <__assert_fail@plt+0x81e8>
   1a0fc:	ldrb	r3, [r4]
   1a100:	cmp	r3, #0
   1a104:	beq	19e38 <__assert_fail@plt+0x80c4>
   1a108:	ldr	fp, [r9, #224]	; 0xe0
   1a10c:	cmp	fp, #0
   1a110:	bge	199f8 <__assert_fail@plt+0x7c84>
   1a114:	b	19968 <__assert_fail@plt+0x7bf4>
   1a118:	mov	r1, #45	; 0x2d
   1a11c:	mov	r0, r7
   1a120:	bl	11c48 <__overflow@plt>
   1a124:	cmn	r0, #1
   1a128:	bne	19f1c <__assert_fail@plt+0x81a8>
   1a12c:	b	19f5c <__assert_fail@plt+0x81e8>
   1a130:	mov	r1, #62	; 0x3e
   1a134:	mov	r0, r7
   1a138:	bl	11c48 <__overflow@plt>
   1a13c:	cmn	r0, #1
   1a140:	bne	19f3c <__assert_fail@plt+0x81c8>
   1a144:	b	19f5c <__assert_fail@plt+0x81e8>
   1a148:	mov	r0, r7
   1a14c:	mov	r1, #32
   1a150:	bl	11c48 <__overflow@plt>
   1a154:	b	19f5c <__assert_fail@plt+0x81e8>
   1a158:	cmp	r2, #16384	; 0x4000
   1a15c:	moveq	r1, #47	; 0x2f
   1a160:	moveq	ip, r1
   1a164:	beq	19fa8 <__assert_fail@plt+0x8234>
   1a168:	cmp	r3, #1
   1a16c:	beq	19eac <__assert_fail@plt+0x8138>
   1a170:	cmp	r2, #40960	; 0xa000
   1a174:	moveq	r1, #64	; 0x40
   1a178:	moveq	ip, r1
   1a17c:	beq	19fa8 <__assert_fail@plt+0x8234>
   1a180:	cmp	r2, #4096	; 0x1000
   1a184:	moveq	r1, #124	; 0x7c
   1a188:	moveq	ip, r1
   1a18c:	beq	19fa8 <__assert_fail@plt+0x8234>
   1a190:	cmp	r2, #49152	; 0xc000
   1a194:	moveq	r1, #61	; 0x3d
   1a198:	moveq	ip, r1
   1a19c:	beq	19fa8 <__assert_fail@plt+0x8234>
   1a1a0:	b	19eac <__assert_fail@plt+0x8138>
   1a1a4:	ldr	r0, [pc, #136]	; 1a234 <__assert_fail@plt+0x84c0>
   1a1a8:	bl	1e920 <__assert_fail@plt+0xcbac>
   1a1ac:	ldr	r2, [sp, #36]	; 0x24
   1a1b0:	ldr	r3, [r6, #4044]	; 0xfcc
   1a1b4:	ldr	r1, [r6, #4040]	; 0xfc8
   1a1b8:	ldr	ip, [r2, #-656]	; 0xfffffd70
   1a1bc:	cmp	ip, r3
   1a1c0:	movlt	r0, #1
   1a1c4:	movge	r0, #0
   1a1c8:	movgt	fp, #1
   1a1cc:	movle	fp, #0
   1a1d0:	ldr	r3, [r2, #-660]	; 0xfffffd6c
   1a1d4:	sub	lr, r0, fp
   1a1d8:	b	19dbc <__assert_fail@plt+0x8048>
   1a1dc:	mov	r2, sl
   1a1e0:	ldr	r0, [sp, #20]
   1a1e4:	bl	21f8c <__assert_fail@plt+0x10218>
   1a1e8:	mov	fp, r0
   1a1ec:	str	r0, [r9, #224]	; 0xe0
   1a1f0:	b	199e8 <__assert_fail@plt+0x7c74>
   1a1f4:	andeq	r1, r4, r0, lsr r3
   1a1f8:	andeq	ip, r2, r8, lsl #1
   1a1fc:	svccc	0x003f3f3f
   1a200:	andeq	sp, r2, ip, asr r8
   1a204:	andeq	sp, r2, r8, ror #16
   1a208:	andeq	r2, r4, r0, asr #3
   1a20c:	andeq	r1, r4, r4, lsr #6
   1a210:	ldrdeq	r1, [r4], -r0
   1a214:	andeq	r1, r4, r4, lsr r3
   1a218:	andeq	r0, r0, r9, ror #7
   1a21c:	andeq	sp, r2, r0, ror #16
   1a220:	andeq	r0, r0, fp, lsr lr
   1a224:	andeq	r2, r4, r0, lsr #3
   1a228:	andeq	sp, r2, r0, ror r8
   1a22c:			; <UNDEFINED> instruction: 0xff0f3d54
   1a230:	andeq	r2, r4, r0, lsl #6
   1a234:	strdeq	r2, [r4], -r8
   1a238:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a23c:	sub	sp, sp, #36	; 0x24
   1a240:	ldr	r6, [pc, #2248]	; 1ab10 <__assert_fail@plt+0x8d9c>
   1a244:	ldr	r3, [r6, #3244]	; 0xcac
   1a248:	cmp	r3, #4
   1a24c:	ldrls	pc, [pc, r3, lsl #2]
   1a250:	b	1a290 <__assert_fail@plt+0x851c>
   1a254:	andeq	sl, r1, r8, lsr #5
   1a258:	muleq	r1, r0, r3
   1a25c:	andeq	sl, r1, r4, lsl r4
   1a260:	ldrdeq	sl, [r1], -r8
   1a264:	muleq	r1, r8, r2
   1a268:	ldr	r3, [sp, #24]
   1a26c:	ldr	r0, [r8]
   1a270:	ldrb	r1, [r3, #210]	; 0xd2
   1a274:	ldr	r2, [r0, #24]
   1a278:	ldr	r3, [r0, #20]
   1a27c:	cmp	r3, r2
   1a280:	addcc	r2, r3, #1
   1a284:	strcc	r2, [r0, #20]
   1a288:	strbcc	r1, [r3]
   1a28c:	bcs	1aac0 <__assert_fail@plt+0x8d4c>
   1a290:	add	sp, sp, #36	; 0x24
   1a294:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a298:	mov	r0, #44	; 0x2c
   1a29c:	add	sp, sp, #36	; 0x24
   1a2a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2a4:	b	1949c <__assert_fail@plt+0x7728>
   1a2a8:	ldr	r3, [r6, #3260]	; 0xcbc
   1a2ac:	cmp	r3, #0
   1a2b0:	beq	1a290 <__assert_fail@plt+0x851c>
   1a2b4:	ldr	r3, [pc, #2136]	; 1ab14 <__assert_fail@plt+0x8da0>
   1a2b8:	mov	r4, #0
   1a2bc:	str	r3, [sp, #24]
   1a2c0:	mov	r7, r3
   1a2c4:	add	r5, r3, #32
   1a2c8:	add	sl, r3, #8
   1a2cc:	ldr	r8, [pc, #2116]	; 1ab18 <__assert_fail@plt+0x8da4>
   1a2d0:	ldr	r9, [pc, #2116]	; 1ab1c <__assert_fail@plt+0x8da8>
   1a2d4:	mov	fp, #2
   1a2d8:	b	1a344 <__assert_fail@plt+0x85d0>
   1a2dc:	mov	r2, fp
   1a2e0:	ldr	r1, [pc, #2104]	; 1ab20 <__assert_fail@plt+0x8dac>
   1a2e4:	bl	11d20 <strncmp@plt>
   1a2e8:	cmp	r0, #0
   1a2ec:	bne	1a374 <__assert_fail@plt+0x8600>
   1a2f0:	ldr	r3, [r6, #3268]	; 0xcc4
   1a2f4:	ldr	r0, [r3, r4, lsl #2]
   1a2f8:	bl	19644 <__assert_fail@plt+0x78d0>
   1a2fc:	ldrd	r2, [r9, #-8]
   1a300:	ldr	r0, [r8]
   1a304:	ldr	r1, [sp, #24]
   1a308:	adds	r2, r2, #1
   1a30c:	ldr	lr, [r0, #24]
   1a310:	ldrb	ip, [r1, #210]	; 0xd2
   1a314:	ldr	r1, [r0, #20]
   1a318:	adc	r3, r3, #0
   1a31c:	cmp	r1, lr
   1a320:	strd	r2, [r9, #-8]
   1a324:	bcs	1a9b0 <__assert_fail@plt+0x8c3c>
   1a328:	ldr	r3, [r6, #3260]	; 0xcbc
   1a32c:	add	r4, r4, #1
   1a330:	cmp	r3, r4
   1a334:	add	r3, r1, #1
   1a338:	str	r3, [r0, #20]
   1a33c:	strb	ip, [r1]
   1a340:	bls	1a290 <__assert_fail@plt+0x851c>
   1a344:	ldrb	r3, [r6, #3996]	; 0xf9c
   1a348:	cmp	r3, #0
   1a34c:	beq	1a2f0 <__assert_fail@plt+0x857c>
   1a350:	ldr	r2, [sp, #24]
   1a354:	ldr	r3, [r2, #32]
   1a358:	cmp	r3, #0
   1a35c:	beq	1a2f0 <__assert_fail@plt+0x857c>
   1a360:	cmp	r3, #1
   1a364:	ldr	r0, [r2, #36]	; 0x24
   1a368:	beq	1a9dc <__assert_fail@plt+0x8c68>
   1a36c:	cmp	r3, #2
   1a370:	beq	1a2dc <__assert_fail@plt+0x8568>
   1a374:	mov	r0, r7
   1a378:	bl	14b74 <__assert_fail@plt+0x2e00>
   1a37c:	mov	r0, r5
   1a380:	bl	14b74 <__assert_fail@plt+0x2e00>
   1a384:	mov	r0, sl
   1a388:	bl	14b74 <__assert_fail@plt+0x2e00>
   1a38c:	b	1a2f0 <__assert_fail@plt+0x857c>
   1a390:	ldr	r3, [r6, #3260]	; 0xcbc
   1a394:	cmp	r3, #0
   1a398:	beq	1a290 <__assert_fail@plt+0x851c>
   1a39c:	ldr	r3, [pc, #1904]	; 1ab14 <__assert_fail@plt+0x8da0>
   1a3a0:	mov	r4, #0
   1a3a4:	mov	r5, r4
   1a3a8:	str	r3, [sp, #24]
   1a3ac:	ldr	r8, [pc, #1892]	; 1ab18 <__assert_fail@plt+0x8da4>
   1a3b0:	b	1a3cc <__assert_fail@plt+0x8658>
   1a3b4:	ldr	r2, [r6, #3260]	; 0xcbc
   1a3b8:	add	r4, r4, #1
   1a3bc:	cmp	r2, r4
   1a3c0:	str	ip, [r0, #20]
   1a3c4:	strb	r1, [r3]
   1a3c8:	bls	1a290 <__assert_fail@plt+0x851c>
   1a3cc:	ldr	r3, [r6, #3268]	; 0xcc4
   1a3d0:	mov	r1, r5
   1a3d4:	ldr	r0, [r3, r4, lsl #2]
   1a3d8:	bl	19260 <__assert_fail@plt+0x74ec>
   1a3dc:	ldr	r0, [r8]
   1a3e0:	ldr	r3, [sp, #24]
   1a3e4:	ldr	r2, [r0, #24]
   1a3e8:	ldrb	r1, [r3, #210]	; 0xd2
   1a3ec:	ldr	r3, [r0, #20]
   1a3f0:	cmp	r3, r2
   1a3f4:	add	ip, r3, #1
   1a3f8:	bcc	1a3b4 <__assert_fail@plt+0x8640>
   1a3fc:	bl	11c48 <__overflow@plt>
   1a400:	ldr	r3, [r6, #3260]	; 0xcbc
   1a404:	add	r4, r4, #1
   1a408:	cmp	r3, r4
   1a40c:	bhi	1a3cc <__assert_fail@plt+0x8658>
   1a410:	b	1a290 <__assert_fail@plt+0x851c>
   1a414:	ldr	r3, [r6, #3276]	; 0xccc
   1a418:	cmp	r3, #0
   1a41c:	beq	1a9cc <__assert_fail@plt+0x8c58>
   1a420:	ldr	r2, [r6, #3084]	; 0xc0c
   1a424:	ldr	sl, [r6, #3260]	; 0xcbc
   1a428:	cmp	r2, #0
   1a42c:	beq	1a438 <__assert_fail@plt+0x86c4>
   1a430:	cmp	sl, r2
   1a434:	movcs	sl, r2
   1a438:	mov	r0, sl
   1a43c:	bl	14644 <__assert_fail@plt+0x28d0>
   1a440:	ldr	r3, [r6, #3260]	; 0xcbc
   1a444:	cmp	r3, #0
   1a448:	str	r3, [sp, #4]
   1a44c:	beq	1a51c <__assert_fail@plt+0x87a8>
   1a450:	mov	r8, #0
   1a454:	ldr	r3, [r6, #3268]	; 0xcc4
   1a458:	ldr	r0, [r3, r8, lsl #2]
   1a45c:	bl	16670 <__assert_fail@plt+0x48fc>
   1a460:	ldr	r3, [r6, #3260]	; 0xcbc
   1a464:	cmp	sl, #0
   1a468:	str	r3, [sp, #4]
   1a46c:	mov	r7, r0
   1a470:	beq	1a50c <__assert_fail@plt+0x8798>
   1a474:	ldr	r5, [r6, #3088]	; 0xc10
   1a478:	ldr	r2, [r6, #3276]	; 0xccc
   1a47c:	sub	fp, r3, #1
   1a480:	mov	r4, #1
   1a484:	str	r2, [sp]
   1a488:	ldrb	r2, [r5]
   1a48c:	mov	r1, r4
   1a490:	add	r0, fp, r4
   1a494:	cmp	r2, #0
   1a498:	sub	r9, r4, #1
   1a49c:	beq	1a4fc <__assert_fail@plt+0x8788>
   1a4a0:	bl	2b56c <_obstack_memory_used@@Base+0x6fc0>
   1a4a4:	mov	r1, r0
   1a4a8:	mov	r0, r8
   1a4ac:	bl	2b56c <_obstack_memory_used@@Base+0x6fc0>
   1a4b0:	ldr	r1, [r5, #8]
   1a4b4:	cmp	r0, r9
   1a4b8:	movne	r9, #2
   1a4bc:	moveq	r9, #0
   1a4c0:	ldr	ip, [r1, r0, lsl #2]
   1a4c4:	add	r9, r7, r9
   1a4c8:	cmp	r9, ip
   1a4cc:	bls	1a4fc <__assert_fail@plt+0x8788>
   1a4d0:	ldr	r2, [r5, #4]
   1a4d4:	ldr	r3, [sp]
   1a4d8:	sub	r2, r2, ip
   1a4dc:	add	r2, r2, r9
   1a4e0:	str	r2, [r5, #4]
   1a4e4:	str	r9, [r1, r0, lsl #2]
   1a4e8:	ldr	r2, [r5, #4]
   1a4ec:	cmp	r2, r3
   1a4f0:	movcs	r2, #0
   1a4f4:	movcc	r2, #1
   1a4f8:	strb	r2, [r5]
   1a4fc:	cmp	sl, r4
   1a500:	add	r5, r5, #12
   1a504:	add	r4, r4, #1
   1a508:	bhi	1a488 <__assert_fail@plt+0x8714>
   1a50c:	ldr	r3, [sp, #4]
   1a510:	add	r8, r8, #1
   1a514:	cmp	r8, r3
   1a518:	bcc	1a454 <__assert_fail@plt+0x86e0>
   1a51c:	cmp	sl, #1
   1a520:	add	r2, sl, sl, lsl #1
   1a524:	bls	1aadc <__assert_fail@plt+0x8d68>
   1a528:	ldr	r0, [r6, #3088]	; 0xc10
   1a52c:	lsl	r2, r2, #2
   1a530:	sub	r1, r2, #12
   1a534:	add	r3, r0, r1
   1a538:	ldrb	r1, [r0, r1]
   1a53c:	str	r3, [sp, #16]
   1a540:	cmp	r1, #0
   1a544:	addeq	r2, r0, r2
   1a548:	beq	1a55c <__assert_fail@plt+0x87e8>
   1a54c:	b	1a574 <__assert_fail@plt+0x8800>
   1a550:	ldrb	r3, [r2, #-12]
   1a554:	cmp	r3, #0
   1a558:	bne	1aad4 <__assert_fail@plt+0x8d60>
   1a55c:	sub	sl, sl, #1
   1a560:	cmp	sl, #1
   1a564:	sub	r1, r2, #24
   1a568:	sub	r2, r2, #12
   1a56c:	bne	1a550 <__assert_fail@plt+0x87dc>
   1a570:	str	r0, [sp, #16]
   1a574:	ldr	r4, [sp, #4]
   1a578:	mov	r1, sl
   1a57c:	mov	r0, r4
   1a580:	bl	2b758 <_obstack_memory_used@@Base+0x71ac>
   1a584:	mov	r0, r4
   1a588:	adds	r4, r1, #0
   1a58c:	mov	r1, sl
   1a590:	movne	r4, #1
   1a594:	bl	2b56c <_obstack_memory_used@@Base+0x6fc0>
   1a598:	adds	r3, r4, r0
   1a59c:	str	r3, [sp, #12]
   1a5a0:	beq	1a290 <__assert_fail@plt+0x851c>
   1a5a4:	ldr	r8, [pc, #1388]	; 1ab18 <__assert_fail@plt+0x8da4>
   1a5a8:	lsl	r3, r3, #2
   1a5ac:	ldr	r2, [pc, #1376]	; 1ab14 <__assert_fail@plt+0x8da0>
   1a5b0:	mov	fp, #32
   1a5b4:	str	r3, [sp, #20]
   1a5b8:	mov	r3, #0
   1a5bc:	str	r2, [sp, #24]
   1a5c0:	str	r3, [sp, #28]
   1a5c4:	mov	r3, #0
   1a5c8:	str	r3, [sp]
   1a5cc:	mov	r5, r3
   1a5d0:	ldr	r3, [sp, #28]
   1a5d4:	lsl	r2, r3, #2
   1a5d8:	stmib	sp, {r2, r3}
   1a5dc:	mov	r2, r3
   1a5e0:	ldr	r1, [sp, #12]
   1a5e4:	ldr	r3, [r6, #3268]	; 0xcc4
   1a5e8:	add	r2, r2, r1
   1a5ec:	mov	r9, r2
   1a5f0:	str	r2, [sp, #8]
   1a5f4:	ldr	r2, [sp, #4]
   1a5f8:	ldr	r7, [r3, r2]
   1a5fc:	mov	r0, r7
   1a600:	bl	16670 <__assert_fail@plt+0x48fc>
   1a604:	ldr	r3, [sp, #16]
   1a608:	ldr	r2, [sp]
   1a60c:	mov	r1, r5
   1a610:	ldr	r3, [r3, #8]
   1a614:	mov	r4, r0
   1a618:	mov	r0, r7
   1a61c:	ldr	r7, [r3, r2]
   1a620:	bl	19260 <__assert_fail@plt+0x74ec>
   1a624:	ldr	r3, [r6, #3260]	; 0xcbc
   1a628:	cmp	r9, r3
   1a62c:	bcs	1aa3c <__assert_fail@plt+0x8cc8>
   1a630:	add	r4, r4, r5
   1a634:	add	r5, r5, r7
   1a638:	cmp	r4, r5
   1a63c:	bcs	1a6b4 <__assert_fail@plt+0x8940>
   1a640:	ldr	r7, [r6, #4092]	; 0xffc
   1a644:	cmp	r7, #0
   1a648:	beq	1a9f4 <__assert_fail@plt+0x8c80>
   1a64c:	mov	r1, r7
   1a650:	mov	r0, r5
   1a654:	bl	2b56c <_obstack_memory_used@@Base+0x6fc0>
   1a658:	add	r9, r4, #1
   1a65c:	mov	r1, r7
   1a660:	mov	sl, r0
   1a664:	mov	r0, r9
   1a668:	bl	2b56c <_obstack_memory_used@@Base+0x6fc0>
   1a66c:	cmp	sl, r0
   1a670:	bls	1aa24 <__assert_fail@plt+0x8cb0>
   1a674:	ldr	r0, [r8]
   1a678:	ldr	r2, [r0, #24]
   1a67c:	ldr	r3, [r0, #20]
   1a680:	cmp	r3, r2
   1a684:	addcc	r2, r3, #1
   1a688:	strcc	r2, [r0, #20]
   1a68c:	movcc	r2, #9
   1a690:	strbcc	r2, [r3]
   1a694:	bcs	1aa2c <__assert_fail@plt+0x8cb8>
   1a698:	mov	r1, r7
   1a69c:	mov	r0, r4
   1a6a0:	bl	2b758 <_obstack_memory_used@@Base+0x71ac>
   1a6a4:	add	r7, r4, r7
   1a6a8:	sub	r4, r7, r1
   1a6ac:	cmp	r4, r5
   1a6b0:	bcc	1a640 <__assert_fail@plt+0x88cc>
   1a6b4:	ldr	r3, [sp, #4]
   1a6b8:	ldr	r2, [sp, #20]
   1a6bc:	add	r3, r3, r2
   1a6c0:	str	r3, [sp, #4]
   1a6c4:	ldr	r3, [sp]
   1a6c8:	ldr	r2, [sp, #8]
   1a6cc:	add	r3, r3, #4
   1a6d0:	str	r3, [sp]
   1a6d4:	b	1a5e0 <__assert_fail@plt+0x886c>
   1a6d8:	ldr	r3, [r6, #3276]	; 0xccc
   1a6dc:	cmp	r3, #0
   1a6e0:	beq	1a9cc <__assert_fail@plt+0x8c58>
   1a6e4:	ldr	r3, [r6, #3084]	; 0xc0c
   1a6e8:	ldr	r5, [r6, #3260]	; 0xcbc
   1a6ec:	cmp	r3, #0
   1a6f0:	beq	1a6fc <__assert_fail@plt+0x8988>
   1a6f4:	cmp	r5, r3
   1a6f8:	movcs	r5, r3
   1a6fc:	mov	r0, r5
   1a700:	bl	14644 <__assert_fail@plt+0x28d0>
   1a704:	ldr	r3, [r6, #3260]	; 0xcbc
   1a708:	cmp	r3, #0
   1a70c:	movne	fp, #0
   1a710:	beq	1a7bc <__assert_fail@plt+0x8a48>
   1a714:	ldr	r3, [r6, #3268]	; 0xcc4
   1a718:	ldr	r0, [r3, fp, lsl #2]
   1a71c:	bl	16670 <__assert_fail@plt+0x48fc>
   1a720:	cmp	r5, #0
   1a724:	mov	r9, r0
   1a728:	beq	1a7ac <__assert_fail@plt+0x8a38>
   1a72c:	ldr	sl, [r6, #3276]	; 0xccc
   1a730:	ldr	r7, [r6, #3088]	; 0xc10
   1a734:	mov	r4, #1
   1a738:	ldrb	r3, [r7]
   1a73c:	mov	r1, r4
   1a740:	mov	r0, fp
   1a744:	cmp	r3, #0
   1a748:	sub	r8, r4, #1
   1a74c:	beq	1a79c <__assert_fail@plt+0x8a28>
   1a750:	bl	2b758 <_obstack_memory_used@@Base+0x71ac>
   1a754:	ldr	r2, [r7, #8]
   1a758:	cmp	r1, r8
   1a75c:	movne	r8, #2
   1a760:	moveq	r8, #0
   1a764:	ldr	r0, [r2, r1, lsl #2]
   1a768:	add	r8, r9, r8
   1a76c:	cmp	r8, r0
   1a770:	bls	1a79c <__assert_fail@plt+0x8a28>
   1a774:	ldr	r3, [r7, #4]
   1a778:	sub	r3, r3, r0
   1a77c:	add	r3, r3, r8
   1a780:	str	r3, [r7, #4]
   1a784:	str	r8, [r2, r1, lsl #2]
   1a788:	ldr	r3, [r7, #4]
   1a78c:	cmp	r3, sl
   1a790:	movcs	r3, #0
   1a794:	movcc	r3, #1
   1a798:	strb	r3, [r7]
   1a79c:	cmp	r5, r4
   1a7a0:	add	r7, r7, #12
   1a7a4:	add	r4, r4, #1
   1a7a8:	bhi	1a738 <__assert_fail@plt+0x89c4>
   1a7ac:	ldr	r3, [r6, #3260]	; 0xcbc
   1a7b0:	add	fp, fp, #1
   1a7b4:	cmp	fp, r3
   1a7b8:	bcc	1a714 <__assert_fail@plt+0x89a0>
   1a7bc:	cmp	r5, #1
   1a7c0:	bls	1aaf4 <__assert_fail@plt+0x8d80>
   1a7c4:	add	r3, r5, r5, lsl #1
   1a7c8:	ldr	r1, [r6, #3088]	; 0xc10
   1a7cc:	lsl	r3, r3, #2
   1a7d0:	sub	r2, r3, #12
   1a7d4:	add	r0, r1, r2
   1a7d8:	ldrb	r2, [r1, r2]
   1a7dc:	str	r0, [sp, #4]
   1a7e0:	cmp	r2, #0
   1a7e4:	addeq	r3, r1, r3
   1a7e8:	beq	1a7fc <__assert_fail@plt+0x8a88>
   1a7ec:	b	1a814 <__assert_fail@plt+0x8aa0>
   1a7f0:	ldrb	r2, [r3, #-12]
   1a7f4:	cmp	r2, #0
   1a7f8:	bne	1aacc <__assert_fail@plt+0x8d58>
   1a7fc:	sub	r5, r5, #1
   1a800:	cmp	r5, #1
   1a804:	sub	r0, r3, #24
   1a808:	sub	r3, r3, #12
   1a80c:	bne	1a7f0 <__assert_fail@plt+0x8a7c>
   1a810:	str	r1, [sp, #4]
   1a814:	ldr	r3, [r6, #3268]	; 0xcc4
   1a818:	ldr	r8, [pc, #760]	; 1ab18 <__assert_fail@plt+0x8da4>
   1a81c:	ldr	r7, [r3]
   1a820:	mov	r0, r7
   1a824:	bl	16670 <__assert_fail@plt+0x48fc>
   1a828:	ldr	r3, [sp, #4]
   1a82c:	mov	r1, #0
   1a830:	ldr	r3, [r3, #8]
   1a834:	ldr	fp, [r3]
   1a838:	mov	r4, r0
   1a83c:	mov	r0, r7
   1a840:	bl	19260 <__assert_fail@plt+0x74ec>
   1a844:	ldr	r3, [r6, #3260]	; 0xcbc
   1a848:	cmp	r3, #1
   1a84c:	ldr	r3, [pc, #704]	; 1ab14 <__assert_fail@plt+0x8da0>
   1a850:	movhi	r7, #0
   1a854:	str	r3, [sp, #24]
   1a858:	movhi	r9, #1
   1a85c:	strhi	r5, [sp, #8]
   1a860:	bhi	1a8d4 <__assert_fail@plt+0x8b60>
   1a864:	b	1a26c <__assert_fail@plt+0x84f8>
   1a868:	ldr	r0, [r8]
   1a86c:	ldr	r3, [sp, #24]
   1a870:	ldr	r2, [r0, #24]
   1a874:	ldrb	r1, [r3, #210]	; 0xd2
   1a878:	ldr	r3, [r0, #20]
   1a87c:	cmp	r3, r2
   1a880:	bcs	1aab4 <__assert_fail@plt+0x8d40>
   1a884:	ldr	r7, [sp]
   1a888:	add	r2, r3, #1
   1a88c:	str	r2, [r0, #20]
   1a890:	strb	r1, [r3]
   1a894:	ldr	r3, [r6, #3268]	; 0xcc4
   1a898:	mov	r1, r7
   1a89c:	ldr	r4, [r3, r9, lsl #2]
   1a8a0:	add	r9, r9, #1
   1a8a4:	mov	r0, r4
   1a8a8:	bl	19260 <__assert_fail@plt+0x74ec>
   1a8ac:	mov	r0, r4
   1a8b0:	bl	16670 <__assert_fail@plt+0x48fc>
   1a8b4:	ldr	r3, [sp, #4]
   1a8b8:	ldr	r2, [r6, #3260]	; 0xcbc
   1a8bc:	ldr	r3, [r3, #8]
   1a8c0:	cmp	r9, r2
   1a8c4:	ldr	r2, [sp]
   1a8c8:	ldr	fp, [r3, r2, lsl #2]
   1a8cc:	mov	r4, r0
   1a8d0:	bcs	1a268 <__assert_fail@plt+0x84f4>
   1a8d4:	ldr	r1, [sp, #8]
   1a8d8:	mov	r0, r9
   1a8dc:	bl	2b758 <_obstack_memory_used@@Base+0x71ac>
   1a8e0:	subs	r3, r1, #0
   1a8e4:	str	r3, [sp]
   1a8e8:	beq	1a868 <__assert_fail@plt+0x8af4>
   1a8ec:	add	r4, r4, r7
   1a8f0:	add	r7, r7, fp
   1a8f4:	cmp	r4, r7
   1a8f8:	bcs	1a894 <__assert_fail@plt+0x8b20>
   1a8fc:	ldr	r5, [r6, #4092]	; 0xffc
   1a900:	cmp	r5, #0
   1a904:	beq	1a97c <__assert_fail@plt+0x8c08>
   1a908:	mov	r1, r5
   1a90c:	mov	r0, r7
   1a910:	bl	2b56c <_obstack_memory_used@@Base+0x6fc0>
   1a914:	add	sl, r4, #1
   1a918:	mov	r1, r5
   1a91c:	mov	fp, r0
   1a920:	mov	r0, sl
   1a924:	bl	2b56c <_obstack_memory_used@@Base+0x6fc0>
   1a928:	cmp	fp, r0
   1a92c:	bls	1a9ec <__assert_fail@plt+0x8c78>
   1a930:	ldr	r0, [r8]
   1a934:	ldr	r2, [r0, #24]
   1a938:	ldr	r3, [r0, #20]
   1a93c:	cmp	r3, r2
   1a940:	addcc	r2, r3, #1
   1a944:	strcc	r2, [r0, #20]
   1a948:	movcc	r2, #9
   1a94c:	strbcc	r2, [r3]
   1a950:	bcs	1aaa4 <__assert_fail@plt+0x8d30>
   1a954:	mov	r1, r5
   1a958:	mov	r0, r4
   1a95c:	bl	2b758 <_obstack_memory_used@@Base+0x71ac>
   1a960:	add	r5, r4, r5
   1a964:	sub	r4, r5, r1
   1a968:	cmp	r4, r7
   1a96c:	bcs	1a894 <__assert_fail@plt+0x8b20>
   1a970:	ldr	r5, [r6, #4092]	; 0xffc
   1a974:	cmp	r5, #0
   1a978:	bne	1a908 <__assert_fail@plt+0x8b94>
   1a97c:	add	r4, r4, #1
   1a980:	ldr	r0, [r8]
   1a984:	ldr	r2, [r0, #24]
   1a988:	ldr	r3, [r0, #20]
   1a98c:	cmp	r3, r2
   1a990:	addcc	r2, r3, #1
   1a994:	strcc	r2, [r0, #20]
   1a998:	movcc	r2, #32
   1a99c:	strbcc	r2, [r3]
   1a9a0:	bcc	1a8f4 <__assert_fail@plt+0x8b80>
   1a9a4:	mov	r1, #32
   1a9a8:	bl	11c48 <__overflow@plt>
   1a9ac:	b	1a8f4 <__assert_fail@plt+0x8b80>
   1a9b0:	mov	r1, ip
   1a9b4:	bl	11c48 <__overflow@plt>
   1a9b8:	ldr	r3, [r6, #3260]	; 0xcbc
   1a9bc:	add	r4, r4, #1
   1a9c0:	cmp	r3, r4
   1a9c4:	bhi	1a344 <__assert_fail@plt+0x85d0>
   1a9c8:	b	1a290 <__assert_fail@plt+0x851c>
   1a9cc:	mov	r0, #32
   1a9d0:	add	sp, sp, #36	; 0x24
   1a9d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a9d8:	b	1949c <__assert_fail@plt+0x7728>
   1a9dc:	ldrb	r3, [r0]
   1a9e0:	cmp	r3, #48	; 0x30
   1a9e4:	bne	1a374 <__assert_fail@plt+0x8600>
   1a9e8:	b	1a2f0 <__assert_fail@plt+0x857c>
   1a9ec:	mov	r4, sl
   1a9f0:	b	1a980 <__assert_fail@plt+0x8c0c>
   1a9f4:	add	r4, r4, #1
   1a9f8:	ldr	r0, [r8]
   1a9fc:	ldr	r3, [r0, #20]
   1aa00:	ldr	r2, [r0, #24]
   1aa04:	cmp	r3, r2
   1aa08:	addcc	r2, r3, #1
   1aa0c:	strcc	r2, [r0, #20]
   1aa10:	strbcc	fp, [r3]
   1aa14:	bcc	1a638 <__assert_fail@plt+0x88c4>
   1aa18:	mov	r1, fp
   1aa1c:	bl	11c48 <__overflow@plt>
   1aa20:	b	1a638 <__assert_fail@plt+0x88c4>
   1aa24:	mov	r4, r9
   1aa28:	b	1a9f8 <__assert_fail@plt+0x8c84>
   1aa2c:	mov	r1, #9
   1aa30:	bl	11c48 <__overflow@plt>
   1aa34:	ldr	r7, [r6, #4092]	; 0xffc
   1aa38:	b	1a698 <__assert_fail@plt+0x8924>
   1aa3c:	ldr	r0, [r8]
   1aa40:	ldr	r3, [sp, #24]
   1aa44:	ldr	r2, [r0, #24]
   1aa48:	ldrb	r1, [r3, #210]	; 0xd2
   1aa4c:	ldr	r3, [r0, #20]
   1aa50:	cmp	r3, r2
   1aa54:	bcs	1aa80 <__assert_fail@plt+0x8d0c>
   1aa58:	ldr	r2, [sp, #28]
   1aa5c:	ldr	ip, [sp, #12]
   1aa60:	add	r2, r2, #1
   1aa64:	str	r2, [sp, #28]
   1aa68:	cmp	ip, r2
   1aa6c:	add	r2, r3, #1
   1aa70:	str	r2, [r0, #20]
   1aa74:	strb	r1, [r3]
   1aa78:	bne	1a5c4 <__assert_fail@plt+0x8850>
   1aa7c:	b	1a290 <__assert_fail@plt+0x851c>
   1aa80:	ldr	r3, [sp, #28]
   1aa84:	add	r3, r3, #1
   1aa88:	mov	r4, r3
   1aa8c:	str	r3, [sp, #28]
   1aa90:	bl	11c48 <__overflow@plt>
   1aa94:	ldr	r2, [sp, #12]
   1aa98:	cmp	r2, r4
   1aa9c:	bne	1a5c4 <__assert_fail@plt+0x8850>
   1aaa0:	b	1a290 <__assert_fail@plt+0x851c>
   1aaa4:	mov	r1, #9
   1aaa8:	bl	11c48 <__overflow@plt>
   1aaac:	ldr	r5, [r6, #4092]	; 0xffc
   1aab0:	b	1a954 <__assert_fail@plt+0x8be0>
   1aab4:	bl	11c48 <__overflow@plt>
   1aab8:	ldr	r7, [sp]
   1aabc:	b	1a894 <__assert_fail@plt+0x8b20>
   1aac0:	add	sp, sp, #36	; 0x24
   1aac4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aac8:	b	11c48 <__overflow@plt>
   1aacc:	str	r0, [sp, #4]
   1aad0:	b	1a814 <__assert_fail@plt+0x8aa0>
   1aad4:	str	r1, [sp, #16]
   1aad8:	b	1a574 <__assert_fail@plt+0x8800>
   1aadc:	ldr	r1, [r6, #3088]	; 0xc10
   1aae0:	lsl	r2, r2, #2
   1aae4:	sub	r2, r2, #12
   1aae8:	add	r3, r1, r2
   1aaec:	str	r3, [sp, #16]
   1aaf0:	b	1a574 <__assert_fail@plt+0x8800>
   1aaf4:	add	r3, r5, r5, lsl #1
   1aaf8:	ldr	r2, [r6, #3088]	; 0xc10
   1aafc:	lsl	r3, r3, #2
   1ab00:	sub	r3, r3, #12
   1ab04:	add	r3, r2, r3
   1ab08:	str	r3, [sp, #4]
   1ab0c:	b	1a814 <__assert_fail@plt+0x8aa0>
   1ab10:	andeq	r1, r4, r0, lsr r3
   1ab14:	ldrdeq	r1, [r4], -r0
   1ab18:	andeq	r1, r4, r4, lsr #6
   1ab1c:	andeq	r2, r4, r0, asr #3
   1ab20:	strdeq	sp, [r2], -r0
   1ab24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab28:	mov	sl, r0
   1ab2c:	ldr	r4, [pc, #3936]	; 1ba94 <__assert_fail@plt+0x9d20>
   1ab30:	ldr	r9, [pc, #3936]	; 1ba98 <__assert_fail@plt+0x9d24>
   1ab34:	add	fp, sp, #32
   1ab38:	sub	sp, sp, #724	; 0x2d4
   1ab3c:	ldr	r6, [r4, #3260]	; 0xcbc
   1ab40:	ldr	r0, [r9, #-4088]	; 0xfffff008
   1ab44:	mov	r8, r1
   1ab48:	cmp	r6, r0
   1ab4c:	str	r2, [fp, #-728]	; 0xfffffd28
   1ab50:	mov	r7, r3
   1ab54:	beq	1b52c <__assert_fail@plt+0x97b8>
   1ab58:	ldr	r1, [r4, #3272]	; 0xcc8
   1ab5c:	mov	r3, #152	; 0x98
   1ab60:	mov	r2, r3
   1ab64:	mla	r6, r3, r6, r1
   1ab68:	mov	r1, #0
   1ab6c:	mov	r0, r6
   1ab70:	bl	11be8 <memset@plt>
   1ab74:	ldrb	r5, [r4, #3234]	; 0xca2
   1ab78:	mvn	r3, #0
   1ab7c:	str	r8, [r6, #120]	; 0x78
   1ab80:	cmp	r5, #0
   1ab84:	str	r3, [r6, #144]	; 0x90
   1ab88:	bne	1ab98 <__assert_fail@plt+0x8e24>
   1ab8c:	ldrb	r2, [r4, #3233]	; 0xca1
   1ab90:	cmp	r2, #0
   1ab94:	bne	1b3e8 <__assert_fail@plt+0x9674>
   1ab98:	ldr	r3, [fp, #-728]	; 0xfffffd28
   1ab9c:	cmp	r3, #0
   1aba0:	bne	1aca0 <__assert_fail@plt+0x8f2c>
   1aba4:	ldrb	r3, [r9, #-4084]	; 0xfffff00c
   1aba8:	cmp	r3, #0
   1abac:	beq	1af28 <__assert_fail@plt+0x91b4>
   1abb0:	ldrb	r5, [sl]
   1abb4:	cmp	r5, #47	; 0x2f
   1abb8:	beq	1b9a0 <__assert_fail@plt+0x9c2c>
   1abbc:	ldrb	r2, [r7]
   1abc0:	cmp	r2, #0
   1abc4:	streq	sl, [fp, #-724]	; 0xfffffd2c
   1abc8:	moveq	r0, sl
   1abcc:	bne	1b0f4 <__assert_fail@plt+0x9380>
   1abd0:	mov	r1, #2
   1abd4:	bl	1d4e4 <__assert_fail@plt+0xb770>
   1abd8:	cmp	r0, #0
   1abdc:	mov	r5, r0
   1abe0:	str	r0, [r6, #8]
   1abe4:	beq	1b7a8 <__assert_fail@plt+0x9a34>
   1abe8:	ldr	r5, [r9, #-4080]	; 0xfffff010
   1abec:	cmp	r5, #2
   1abf0:	bcc	1ace0 <__assert_fail@plt+0x8f6c>
   1abf4:	cmp	r5, #3
   1abf8:	bls	1aec8 <__assert_fail@plt+0x9154>
   1abfc:	cmp	r5, #4
   1ac00:	bne	1ace0 <__assert_fail@plt+0x8f6c>
   1ac04:	bl	15df4 <__assert_fail@plt+0x4080>
   1ac08:	add	r3, r6, #16
   1ac0c:	str	r3, [fp, #-732]	; 0xfffffd24
   1ac10:	mov	r2, r3
   1ac14:	ldr	r1, [fp, #-724]	; 0xfffffd2c
   1ac18:	mov	r3, #0
   1ac1c:	mov	r7, #1
   1ac20:	str	r0, [sp]
   1ac24:	mvn	r0, #99	; 0x63
   1ac28:	bl	1477c <__assert_fail@plt+0x2a08>
   1ac2c:	cmp	r0, #0
   1ac30:	beq	1ad10 <__assert_fail@plt+0x8f9c>
   1ac34:	mov	r2, #5
   1ac38:	ldr	r1, [pc, #3676]	; 1ba9c <__assert_fail@plt+0x9d28>
   1ac3c:	mov	r0, #0
   1ac40:	bl	11984 <dcgettext@plt>
   1ac44:	mov	r7, r0
   1ac48:	bl	11bb8 <__errno_location@plt>
   1ac4c:	ldr	r1, [fp, #-724]	; 0xfffffd2c
   1ac50:	ldr	r5, [r0]
   1ac54:	mov	r0, #4
   1ac58:	bl	26b3c <_obstack_memory_used@@Base+0x2590>
   1ac5c:	mov	r2, r7
   1ac60:	mov	r1, r5
   1ac64:	mov	r3, r0
   1ac68:	mov	r0, #0
   1ac6c:	bl	11a8c <error@plt>
   1ac70:	ldr	r3, [fp, #-728]	; 0xfffffd28
   1ac74:	cmp	r3, #0
   1ac78:	beq	1b420 <__assert_fail@plt+0x96ac>
   1ac7c:	ldr	r2, [pc, #3612]	; 1baa0 <__assert_fail@plt+0x9d2c>
   1ac80:	mov	r3, #2
   1ac84:	str	r2, [r6, #128]	; 0x80
   1ac88:	str	r3, [r9, #-4072]	; 0xfffff018
   1ac8c:	mov	r2, #0
   1ac90:	mov	r3, #0
   1ac94:	sub	r1, fp, #724	; 0x2d4
   1ac98:	strd	r2, [r1]
   1ac9c:	b	1aeb8 <__assert_fail@plt+0x9144>
   1aca0:	ldrb	r5, [sl]
   1aca4:	cmp	r5, #47	; 0x2f
   1aca8:	streq	sl, [fp, #-724]	; 0xfffffd2c
   1acac:	ldrbeq	r3, [r9, #-4084]	; 0xfffff00c
   1acb0:	beq	1acc8 <__assert_fail@plt+0x8f54>
   1acb4:	ldrb	r2, [r7]
   1acb8:	ldrb	r3, [r9, #-4084]	; 0xfffff00c
   1acbc:	cmp	r2, #0
   1acc0:	streq	sl, [fp, #-724]	; 0xfffffd2c
   1acc4:	bne	1b0f4 <__assert_fail@plt+0x9380>
   1acc8:	cmp	r3, #0
   1accc:	ldrne	r0, [fp, #-724]	; 0xfffffd2c
   1acd0:	bne	1abd0 <__assert_fail@plt+0x8e5c>
   1acd4:	ldr	r5, [r9, #-4080]	; 0xfffff010
   1acd8:	cmp	r5, #2
   1acdc:	bcs	1abf4 <__assert_fail@plt+0x8e80>
   1ace0:	add	r3, r6, #16
   1ace4:	str	r3, [fp, #-732]	; 0xfffffd24
   1ace8:	bl	15df4 <__assert_fail@plt+0x4080>
   1acec:	mov	r3, #256	; 0x100
   1acf0:	ldr	r2, [fp, #-732]	; 0xfffffd24
   1acf4:	ldr	r1, [fp, #-724]	; 0xfffffd2c
   1acf8:	mov	r7, #0
   1acfc:	str	r0, [sp]
   1ad00:	mvn	r0, #99	; 0x63
   1ad04:	bl	1477c <__assert_fail@plt+0x2a08>
   1ad08:	cmp	r0, #0
   1ad0c:	bne	1ac34 <__assert_fail@plt+0x8ec0>
   1ad10:	mov	r3, #1
   1ad14:	cmp	r8, #5
   1ad18:	strb	r3, [r6, #132]	; 0x84
   1ad1c:	beq	1b050 <__assert_fail@plt+0x92dc>
   1ad20:	ldr	r3, [r6, #32]
   1ad24:	and	r3, r3, #61440	; 0xf000
   1ad28:	cmp	r3, #32768	; 0x8000
   1ad2c:	beq	1b050 <__assert_fail@plt+0x92dc>
   1ad30:	ldr	r3, [r4, #3244]	; 0xcac
   1ad34:	cmp	r3, #0
   1ad38:	beq	1ad48 <__assert_fail@plt+0x8fd4>
   1ad3c:	ldrb	r3, [r4, #3708]	; 0xe7c
   1ad40:	cmp	r3, #0
   1ad44:	beq	1adac <__assert_fail@plt+0x9038>
   1ad48:	ldr	r5, [pc, #3412]	; 1baa4 <__assert_fail@plt+0x9d30>
   1ad4c:	ldrd	r0, [r6, #16]
   1ad50:	ldrd	r2, [r5, #-8]
   1ad54:	cmp	r1, r3
   1ad58:	cmpeq	r0, r2
   1ad5c:	beq	1b938 <__assert_fail@plt+0x9bc4>
   1ad60:	cmp	r7, #0
   1ad64:	add	r1, r6, #128	; 0x80
   1ad68:	ldr	r0, [fp, #-724]	; 0xfffffd2c
   1ad6c:	beq	1b1b4 <__assert_fail@plt+0x9440>
   1ad70:	bl	28788 <_obstack_memory_used@@Base+0x41dc>
   1ad74:	cmp	r0, #0
   1ad78:	blt	1b1c0 <__assert_fail@plt+0x944c>
   1ad7c:	ldr	r1, [r6, #128]	; 0x80
   1ad80:	ldr	r0, [pc, #3360]	; 1baa8 <__assert_fail@plt+0x9d34>
   1ad84:	bl	118a0 <strcmp@plt>
   1ad88:	ldr	r3, [r4, #3244]	; 0xcac
   1ad8c:	adds	r7, r0, #0
   1ad90:	movne	r7, #1
   1ad94:	cmp	r3, #0
   1ad98:	beq	1b658 <__assert_fail@plt+0x98e4>
   1ad9c:	cmp	r0, #0
   1ada0:	bne	1bba4 <__assert_fail@plt+0x9e30>
   1ada4:	mov	r3, #0
   1ada8:	str	r3, [r6, #136]	; 0x88
   1adac:	ldr	r3, [r6, #32]
   1adb0:	and	r3, r3, #61440	; 0xf000
   1adb4:	cmp	r3, #40960	; 0xa000
   1adb8:	beq	1b51c <__assert_fail@plt+0x97a8>
   1adbc:	cmp	r3, #16384	; 0x4000
   1adc0:	movne	r3, #5
   1adc4:	strne	r3, [r6, #120]	; 0x78
   1adc8:	beq	1b4f0 <__assert_fail@plt+0x977c>
   1adcc:	ldr	r3, [r4, #3244]	; 0xcac
   1add0:	ldrd	r0, [r6, #80]	; 0x50
   1add4:	sub	r2, fp, #724	; 0x2d4
   1add8:	cmp	r3, #0
   1addc:	strd	r0, [r2]
   1ade0:	beq	1adf0 <__assert_fail@plt+0x907c>
   1ade4:	ldrb	r3, [r4, #3241]	; 0xca9
   1ade8:	cmp	r3, #0
   1adec:	beq	1ae68 <__assert_fail@plt+0x90f4>
   1adf0:	ldr	r2, [pc, #3252]	; 1baac <__assert_fail@plt+0x9d38>
   1adf4:	mov	r0, #512	; 0x200
   1adf8:	mov	r1, #0
   1adfc:	ldrd	r2, [r2]
   1ae00:	ldr	ip, [r4, #3688]	; 0xe68
   1ae04:	strd	r0, [sp]
   1ae08:	sub	r1, fp, #724	; 0x2d4
   1ae0c:	strd	r2, [sp, #8]
   1ae10:	mov	r3, ip
   1ae14:	sub	r2, fp, #692	; 0x2b4
   1ae18:	ldrd	r0, [r1]
   1ae1c:	bl	202e8 <__assert_fail@plt+0xe574>
   1ae20:	mov	r1, #0
   1ae24:	bl	221d8 <__assert_fail@plt+0x10464>
   1ae28:	ldr	r3, [r4, #3704]	; 0xe78
   1ae2c:	cmp	r0, r3
   1ae30:	ldr	r3, [r4, #3244]	; 0xcac
   1ae34:	strgt	r0, [r4, #3704]	; 0xe78
   1ae38:	cmp	r3, #0
   1ae3c:	bne	1b648 <__assert_fail@plt+0x98d4>
   1ae40:	ldr	r5, [pc, #3176]	; 1bab0 <__assert_fail@plt+0x9d3c>
   1ae44:	ldrb	r2, [r5, #204]	; 0xcc
   1ae48:	cmp	r2, #0
   1ae4c:	bne	1b604 <__assert_fail@plt+0x9890>
   1ae50:	ldrb	r3, [r5, #205]	; 0xcd
   1ae54:	cmp	r3, #0
   1ae58:	bne	1b56c <__assert_fail@plt+0x97f8>
   1ae5c:	ldrb	r3, [r4, #3252]	; 0xcb4
   1ae60:	cmp	r3, #0
   1ae64:	bne	1b5bc <__assert_fail@plt+0x9848>
   1ae68:	ldrb	r3, [r4, #3708]	; 0xe7c
   1ae6c:	cmp	r3, #0
   1ae70:	beq	1ae88 <__assert_fail@plt+0x9114>
   1ae74:	ldr	r0, [r6, #128]	; 0x80
   1ae78:	bl	11b94 <strlen@plt>
   1ae7c:	ldr	r3, [r4, #3712]	; 0xe80
   1ae80:	cmp	r0, r3
   1ae84:	strgt	r0, [r4, #3712]	; 0xe80
   1ae88:	ldr	r1, [r4, #3244]	; 0xcac
   1ae8c:	cmp	r1, #0
   1ae90:	beq	1b330 <__assert_fail@plt+0x95bc>
   1ae94:	ldrb	r3, [r4, #3240]	; 0xca8
   1ae98:	cmp	r3, #0
   1ae9c:	bne	1b310 <__assert_fail@plt+0x959c>
   1aea0:	mov	r0, sl
   1aea4:	bl	29f68 <_obstack_memory_used@@Base+0x59bc>
   1aea8:	ldr	r3, [r4, #3260]	; 0xcbc
   1aeac:	add	r3, r3, #1
   1aeb0:	str	r3, [r4, #3260]	; 0xcbc
   1aeb4:	str	r0, [r6]
   1aeb8:	sub	r3, fp, #724	; 0x2d4
   1aebc:	ldrd	r0, [r3]
   1aec0:	sub	sp, fp, #32
   1aec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aec8:	ldr	r3, [fp, #-728]	; 0xfffffd28
   1aecc:	cmp	r3, #0
   1aed0:	beq	1ace0 <__assert_fail@plt+0x8f6c>
   1aed4:	bl	15df4 <__assert_fail@plt+0x4080>
   1aed8:	add	r3, r6, #16
   1aedc:	str	r3, [fp, #-732]	; 0xfffffd24
   1aee0:	mov	r2, r3
   1aee4:	ldr	r1, [fp, #-724]	; 0xfffffd2c
   1aee8:	mov	r3, #0
   1aeec:	str	r0, [sp]
   1aef0:	mvn	r0, #99	; 0x63
   1aef4:	bl	1477c <__assert_fail@plt+0x2a08>
   1aef8:	cmp	r5, #2
   1aefc:	beq	1af18 <__assert_fail@plt+0x91a4>
   1af00:	cmp	r0, #0
   1af04:	blt	1b758 <__assert_fail@plt+0x99e4>
   1af08:	ldr	r3, [r6, #32]
   1af0c:	and	r3, r3, #61440	; 0xf000
   1af10:	cmp	r3, #16384	; 0x4000
   1af14:	bne	1ace8 <__assert_fail@plt+0x8f74>
   1af18:	cmp	r0, #0
   1af1c:	moveq	r7, #1
   1af20:	beq	1ad10 <__assert_fail@plt+0x8f9c>
   1af24:	b	1b768 <__assert_fail@plt+0x99f4>
   1af28:	ldrb	r2, [r9, #-4083]	; 0xfffff00d
   1af2c:	cmp	r2, #0
   1af30:	bne	1b01c <__assert_fail@plt+0x92a8>
   1af34:	cmp	r8, #3
   1af38:	beq	1b87c <__assert_fail@plt+0x9b08>
   1af3c:	ldrb	r1, [r4, #3240]	; 0xca8
   1af40:	cmp	r1, #0
   1af44:	bne	1b6a4 <__assert_fail@plt+0x9930>
   1af48:	ldrb	r2, [r9, #-4082]	; 0xfffff00e
   1af4c:	cmp	r2, #0
   1af50:	beq	1b704 <__assert_fail@plt+0x9990>
   1af54:	cmp	r8, #0
   1af58:	cmpne	r8, #6
   1af5c:	clz	r2, r8
   1af60:	lsr	r2, r2, #5
   1af64:	bne	1afa8 <__assert_fail@plt+0x9234>
   1af68:	ldr	r0, [r9, #-4080]	; 0xfffff010
   1af6c:	cmp	r0, #4
   1af70:	beq	1b01c <__assert_fail@plt+0x92a8>
   1af74:	ldrb	r0, [r4, #3989]	; 0xf95
   1af78:	cmp	r0, #0
   1af7c:	bne	1b01c <__assert_fail@plt+0x92a8>
   1af80:	ldrb	r0, [r9, #-4076]	; 0xfffff014
   1af84:	cmp	r0, #0
   1af88:	bne	1b01c <__assert_fail@plt+0x92a8>
   1af8c:	cmp	r1, #0
   1af90:	bne	1b01c <__assert_fail@plt+0x92a8>
   1af94:	ldrb	r1, [r9, #-4082]	; 0xfffff00e
   1af98:	cmp	r1, #0
   1af9c:	beq	1b704 <__assert_fail@plt+0x9990>
   1afa0:	cmp	r2, #0
   1afa4:	bne	1b01c <__assert_fail@plt+0x92a8>
   1afa8:	cmp	r8, #5
   1afac:	bne	1b704 <__assert_fail@plt+0x9990>
   1afb0:	ldr	r2, [r4, #3096]	; 0xc18
   1afb4:	cmp	r2, #3
   1afb8:	beq	1b01c <__assert_fail@plt+0x92a8>
   1afbc:	ldrb	r2, [r4, #3996]	; 0xf9c
   1afc0:	str	r3, [fp, #-724]	; 0xfffffd2c
   1afc4:	cmp	r2, #0
   1afc8:	beq	1b704 <__assert_fail@plt+0x9990>
   1afcc:	mov	r0, #14
   1afd0:	bl	13e7c <__assert_fail@plt+0x2108>
   1afd4:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   1afd8:	cmp	r0, #0
   1afdc:	bne	1b01c <__assert_fail@plt+0x92a8>
   1afe0:	mov	r0, #16
   1afe4:	bl	13e7c <__assert_fail@plt+0x2108>
   1afe8:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   1afec:	cmp	r0, #0
   1aff0:	bne	1b01c <__assert_fail@plt+0x92a8>
   1aff4:	mov	r0, #17
   1aff8:	bl	13e7c <__assert_fail@plt+0x2108>
   1affc:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   1b000:	cmp	r0, #0
   1b004:	bne	1b01c <__assert_fail@plt+0x92a8>
   1b008:	mov	r0, #21
   1b00c:	bl	13e7c <__assert_fail@plt+0x2108>
   1b010:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   1b014:	cmp	r0, #0
   1b018:	beq	1b704 <__assert_fail@plt+0x9990>
   1b01c:	ldrb	r5, [sl]
   1b020:	cmp	r5, #47	; 0x2f
   1b024:	bne	1b6f0 <__assert_fail@plt+0x997c>
   1b028:	ldr	r3, [r9, #-4080]	; 0xfffff010
   1b02c:	cmp	r3, #2
   1b030:	bcc	1b048 <__assert_fail@plt+0x92d4>
   1b034:	cmp	r3, #3
   1b038:	bls	1b048 <__assert_fail@plt+0x92d4>
   1b03c:	cmp	r3, #4
   1b040:	streq	sl, [fp, #-724]	; 0xfffffd2c
   1b044:	beq	1ac04 <__assert_fail@plt+0x8e90>
   1b048:	str	sl, [fp, #-724]	; 0xfffffd2c
   1b04c:	b	1ace0 <__assert_fail@plt+0x8f6c>
   1b050:	ldrb	r5, [r4, #3996]	; 0xf9c
   1b054:	cmp	r5, #0
   1b058:	beq	1ad30 <__assert_fail@plt+0x8fbc>
   1b05c:	ldr	r3, [pc, #2636]	; 1bab0 <__assert_fail@plt+0x9d3c>
   1b060:	ldr	r2, [r3, #168]	; 0xa8
   1b064:	cmp	r2, #0
   1b068:	beq	1ad30 <__assert_fail@plt+0x8fbc>
   1b06c:	cmp	r2, #1
   1b070:	ldr	r0, [r3, #172]	; 0xac
   1b074:	beq	1ba14 <__assert_fail@plt+0x9ca0>
   1b078:	cmp	r2, #2
   1b07c:	beq	1b6dc <__assert_fail@plt+0x9968>
   1b080:	ldr	r8, [pc, #2604]	; 1bab4 <__assert_fail@plt+0x9d40>
   1b084:	ldrd	r0, [r6, #16]
   1b088:	ldrd	r2, [r8]
   1b08c:	cmp	r1, r3
   1b090:	cmpeq	r0, r2
   1b094:	beq	1ba54 <__assert_fail@plt+0x9ce0>
   1b098:	ldr	r0, [fp, #-724]	; 0xfffffd2c
   1b09c:	bl	11c84 <cap_get_file@plt>
   1b0a0:	subs	r3, r0, #0
   1b0a4:	beq	1ba24 <__assert_fail@plt+0x9cb0>
   1b0a8:	mov	r1, #0
   1b0ac:	str	r3, [fp, #-740]	; 0xfffffd1c
   1b0b0:	bl	11870 <cap_to_text@plt>
   1b0b4:	ldr	r3, [fp, #-740]	; 0xfffffd1c
   1b0b8:	str	r0, [fp, #-736]	; 0xfffffd20
   1b0bc:	mov	r0, r3
   1b0c0:	bl	11ccc <cap_free@plt>
   1b0c4:	ldr	r2, [fp, #-736]	; 0xfffffd20
   1b0c8:	cmp	r2, #0
   1b0cc:	beq	1ba24 <__assert_fail@plt+0x9cb0>
   1b0d0:	ldrb	r3, [r2]
   1b0d4:	mov	r0, r2
   1b0d8:	str	r3, [fp, #-736]	; 0xfffffd20
   1b0dc:	bl	11ccc <cap_free@plt>
   1b0e0:	ldr	r3, [fp, #-736]	; 0xfffffd20
   1b0e4:	cmp	r3, #0
   1b0e8:	beq	1ba24 <__assert_fail@plt+0x9cb0>
   1b0ec:	strb	r5, [r6, #140]	; 0x8c
   1b0f0:	b	1ad30 <__assert_fail@plt+0x8fbc>
   1b0f4:	mov	r0, sl
   1b0f8:	str	r3, [fp, #-736]	; 0xfffffd20
   1b0fc:	str	r2, [fp, #-732]	; 0xfffffd24
   1b100:	bl	11b94 <strlen@plt>
   1b104:	str	r0, [fp, #-724]	; 0xfffffd2c
   1b108:	mov	r0, r7
   1b10c:	bl	11b94 <strlen@plt>
   1b110:	ldr	r1, [fp, #-724]	; 0xfffffd2c
   1b114:	ldr	r2, [fp, #-732]	; 0xfffffd24
   1b118:	cmp	r2, #46	; 0x2e
   1b11c:	add	r1, r1, r0
   1b120:	add	r1, r1, #16
   1b124:	bic	r1, r1, #7
   1b128:	sub	sp, sp, r1
   1b12c:	add	r3, sp, #16
   1b130:	str	r3, [fp, #-724]	; 0xfffffd2c
   1b134:	ldr	r3, [fp, #-736]	; 0xfffffd20
   1b138:	beq	1b4a8 <__assert_fail@plt+0x9734>
   1b13c:	add	r0, r7, #1
   1b140:	ldr	ip, [fp, #-724]	; 0xfffffd2c
   1b144:	b	1b14c <__assert_fail@plt+0x93d8>
   1b148:	mov	ip, r1
   1b14c:	mov	r1, ip
   1b150:	mov	lr, r0
   1b154:	strb	r2, [r1], #1
   1b158:	ldrb	r2, [r0], #1
   1b15c:	cmp	r2, #0
   1b160:	bne	1b148 <__assert_fail@plt+0x93d4>
   1b164:	cmp	r7, lr
   1b168:	bcs	1b180 <__assert_fail@plt+0x940c>
   1b16c:	ldrb	r2, [lr, #-1]
   1b170:	cmp	r2, #47	; 0x2f
   1b174:	movne	r2, #47	; 0x2f
   1b178:	strbne	r2, [r1]
   1b17c:	addne	r1, ip, #2
   1b180:	cmp	r5, #0
   1b184:	beq	1b19c <__assert_fail@plt+0x9428>
   1b188:	mov	r2, sl
   1b18c:	strb	r5, [r1], #1
   1b190:	ldrb	r5, [r2, #1]!
   1b194:	cmp	r5, #0
   1b198:	bne	1b18c <__assert_fail@plt+0x9418>
   1b19c:	cmp	r3, #0
   1b1a0:	mov	r2, #0
   1b1a4:	strb	r2, [r1]
   1b1a8:	ldrne	r0, [fp, #-724]	; 0xfffffd2c
   1b1ac:	beq	1acd4 <__assert_fail@plt+0x8f60>
   1b1b0:	b	1abd0 <__assert_fail@plt+0x8e5c>
   1b1b4:	bl	287fc <_obstack_memory_used@@Base+0x4250>
   1b1b8:	cmp	r0, #0
   1b1bc:	bge	1ad7c <__assert_fail@plt+0x9008>
   1b1c0:	bl	11bb8 <__errno_location@plt>
   1b1c4:	ldr	r7, [r0]
   1b1c8:	mov	r8, r0
   1b1cc:	sub	r3, r7, #22
   1b1d0:	bics	r3, r3, #16
   1b1d4:	sub	r1, r7, #95	; 0x5f
   1b1d8:	clz	r1, r1
   1b1dc:	lsr	r1, r1, #5
   1b1e0:	movne	r3, r1
   1b1e4:	orreq	r3, r1, #1
   1b1e8:	cmp	r3, #0
   1b1ec:	bne	1b558 <__assert_fail@plt+0x97e4>
   1b1f0:	sub	r1, r7, #61	; 0x3d
   1b1f4:	clz	r1, r1
   1b1f8:	lsr	r1, r1, #5
   1b1fc:	ldr	r3, [pc, #2204]	; 1baa0 <__assert_fail@plt+0x9d2c>
   1b200:	cmp	r1, #0
   1b204:	str	r3, [r6, #128]	; 0x80
   1b208:	streq	r1, [r6, #136]	; 0x88
   1b20c:	bne	1b950 <__assert_fail@plt+0x9bdc>
   1b210:	ldr	r2, [fp, #-724]	; 0xfffffd2c
   1b214:	mov	r1, #3
   1b218:	mov	r0, #0
   1b21c:	bl	275b8 <_obstack_memory_used@@Base+0x300c>
   1b220:	mov	r1, r7
   1b224:	ldr	r2, [pc, #2188]	; 1bab8 <__assert_fail@plt+0x9d44>
   1b228:	mov	r3, r0
   1b22c:	mov	r0, #0
   1b230:	bl	11a8c <error@plt>
   1b234:	ldr	r3, [r6, #32]
   1b238:	and	r3, r3, #61440	; 0xf000
   1b23c:	cmp	r3, #40960	; 0xa000
   1b240:	bne	1adbc <__assert_fail@plt+0x9048>
   1b244:	ldr	r3, [r4, #3244]	; 0xcac
   1b248:	cmp	r3, #0
   1b24c:	bne	1b51c <__assert_fail@plt+0x97a8>
   1b250:	ldr	r1, [r6, #64]	; 0x40
   1b254:	ldr	r0, [fp, #-724]	; 0xfffffd2c
   1b258:	bl	1ccb8 <__assert_fail@plt+0xaf44>
   1b25c:	cmp	r0, #0
   1b260:	mov	r5, r0
   1b264:	str	r0, [r6, #4]
   1b268:	beq	1bacc <__assert_fail@plt+0x9d58>
   1b26c:	ldrb	r3, [r5]
   1b270:	cmp	r3, #47	; 0x2f
   1b274:	beq	1bb54 <__assert_fail@plt+0x9de0>
   1b278:	ldr	r0, [fp, #-724]	; 0xfffffd2c
   1b27c:	bl	1dce4 <__assert_fail@plt+0xbf70>
   1b280:	subs	r8, r0, #0
   1b284:	mov	r0, r5
   1b288:	beq	1b80c <__assert_fail@plt+0x9a98>
   1b28c:	bl	11b94 <strlen@plt>
   1b290:	add	r3, r8, #2
   1b294:	add	r0, r3, r0
   1b298:	bl	29958 <_obstack_memory_used@@Base+0x53ac>
   1b29c:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   1b2a0:	ldr	r1, [fp, #-724]	; 0xfffffd2c
   1b2a4:	add	r3, r3, r8
   1b2a8:	ldrb	r3, [r3, #-1]
   1b2ac:	cmp	r3, #47	; 0x2f
   1b2b0:	addne	r8, r8, #1
   1b2b4:	mov	r2, r8
   1b2b8:	mov	r7, r0
   1b2bc:	bl	11c00 <stpncpy@plt>
   1b2c0:	mov	r1, r5
   1b2c4:	bl	11a5c <strcpy@plt>
   1b2c8:	ldr	r3, [r6, #144]	; 0x90
   1b2cc:	cmp	r3, #0
   1b2d0:	beq	1b960 <__assert_fail@plt+0x9bec>
   1b2d4:	ldr	r3, [r4, #3096]	; 0xc18
   1b2d8:	cmp	r3, #1
   1b2dc:	bhi	1b4bc <__assert_fail@plt+0x9748>
   1b2e0:	ldrb	r3, [r9, #-4076]	; 0xfffff014
   1b2e4:	cmp	r3, #0
   1b2e8:	bne	1b4bc <__assert_fail@plt+0x9748>
   1b2ec:	mov	r0, r7
   1b2f0:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   1b2f4:	ldr	r3, [r6, #32]
   1b2f8:	and	r3, r3, #61440	; 0xf000
   1b2fc:	cmp	r3, #40960	; 0xa000
   1b300:	bne	1adbc <__assert_fail@plt+0x9048>
   1b304:	mov	r3, #6
   1b308:	str	r3, [r6, #120]	; 0x78
   1b30c:	b	1adcc <__assert_fail@plt+0x9058>
   1b310:	sub	r2, fp, #692	; 0x2b4
   1b314:	ldrd	r0, [r6, #112]	; 0x70
   1b318:	bl	216e0 <__assert_fail@plt+0xf96c>
   1b31c:	bl	11b94 <strlen@plt>
   1b320:	ldr	r3, [r4, #3684]	; 0xe64
   1b324:	cmp	r0, r3
   1b328:	strgt	r0, [r4, #3684]	; 0xe64
   1b32c:	b	1aea0 <__assert_fail@plt+0x912c>
   1b330:	sub	r2, fp, #716	; 0x2cc
   1b334:	ldr	r0, [r6, #36]	; 0x24
   1b338:	bl	216e0 <__assert_fail@plt+0xf96c>
   1b33c:	bl	11b94 <strlen@plt>
   1b340:	ldr	r3, [r4, #4000]	; 0xfa0
   1b344:	cmp	r0, r3
   1b348:	ldr	r3, [r6, #32]
   1b34c:	strgt	r0, [r4, #4000]	; 0xfa0
   1b350:	and	r3, r3, #45056	; 0xb000
   1b354:	cmp	r3, #8192	; 0x2000
   1b358:	bne	1b464 <__assert_fail@plt+0x96f0>
   1b35c:	ldr	r0, [r6, #48]	; 0x30
   1b360:	ldr	r3, [r6, #52]	; 0x34
   1b364:	sub	r2, fp, #692	; 0x2b4
   1b368:	bic	r3, r3, #4080	; 0xff0
   1b36c:	lsl	r0, r0, #12
   1b370:	bic	r3, r3, #15
   1b374:	orr	r0, r3, r0, lsr #20
   1b378:	mov	r1, #0
   1b37c:	bl	216e0 <__assert_fail@plt+0xf96c>
   1b380:	bl	11b94 <strlen@plt>
   1b384:	ldr	r3, [r4, #4020]	; 0xfb4
   1b388:	ldr	r1, [r6, #52]	; 0x34
   1b38c:	sub	r2, fp, #692	; 0x2b4
   1b390:	cmp	r0, r3
   1b394:	strgt	r0, [r4, #4020]	; 0xfb4
   1b398:	ldr	r0, [r6, #48]	; 0x30
   1b39c:	lsr	r3, r0, #12
   1b3a0:	orr	r3, r3, r1, lsl #20
   1b3a4:	bic	r3, r3, #255	; 0xff
   1b3a8:	uxtb	r0, r0
   1b3ac:	orr	r0, r3, r0
   1b3b0:	mov	r1, #0
   1b3b4:	bl	216e0 <__assert_fail@plt+0xf96c>
   1b3b8:	bl	11b94 <strlen@plt>
   1b3bc:	ldr	r2, [r4, #4028]	; 0xfbc
   1b3c0:	ldr	r3, [r4, #4020]	; 0xfb4
   1b3c4:	ldr	r1, [r4, #4024]	; 0xfb8
   1b3c8:	add	r3, r3, #2
   1b3cc:	cmp	r0, r2
   1b3d0:	movgt	r2, r0
   1b3d4:	add	r3, r3, r2
   1b3d8:	strgt	r0, [r4, #4028]	; 0xfbc
   1b3dc:	cmp	r3, r1
   1b3e0:	strgt	r3, [r4, #4024]	; 0xfb8
   1b3e4:	b	1ae94 <__assert_fail@plt+0x9120>
   1b3e8:	ldr	r2, [r4, #3236]	; 0xca4
   1b3ec:	mov	r1, #2
   1b3f0:	str	r2, [sp]
   1b3f4:	sub	r0, fp, #692	; 0x2b4
   1b3f8:	mov	r2, sl
   1b3fc:	bl	25e30 <_obstack_memory_used@@Base+0x1884>
   1b400:	ldrb	r2, [sl]
   1b404:	ldrb	r3, [fp, #-692]	; 0xfffffd4c
   1b408:	cmp	r2, r3
   1b40c:	beq	1b6bc <__assert_fail@plt+0x9948>
   1b410:	mov	r3, #1
   1b414:	str	r3, [r6, #144]	; 0x90
   1b418:	strb	r3, [r4, #3234]	; 0xca2
   1b41c:	b	1ab98 <__assert_fail@plt+0x8e24>
   1b420:	ldr	r3, [r9, #-4072]	; 0xfffff018
   1b424:	mov	r0, sl
   1b428:	cmp	r3, #0
   1b42c:	moveq	r3, #1
   1b430:	streq	r3, [r9, #-4072]	; 0xfffff018
   1b434:	ldr	r3, [pc, #1636]	; 1baa0 <__assert_fail@plt+0x9d2c>
   1b438:	mov	r8, #0
   1b43c:	str	r3, [r6, #128]	; 0x80
   1b440:	bl	29f68 <_obstack_memory_used@@Base+0x59bc>
   1b444:	ldr	r3, [r4, #3260]	; 0xcbc
   1b448:	mov	r9, #0
   1b44c:	sub	r2, fp, #724	; 0x2d4
   1b450:	add	r3, r3, #1
   1b454:	strd	r8, [r2]
   1b458:	str	r3, [r4, #3260]	; 0xcbc
   1b45c:	str	r0, [r6]
   1b460:	b	1aeb8 <__assert_fail@plt+0x9144>
   1b464:	ldr	r3, [pc, #1604]	; 1bab0 <__assert_fail@plt+0x9d3c>
   1b468:	ldr	ip, [r4, #4032]	; 0xfc0
   1b46c:	mov	r8, #1
   1b470:	ldrd	r2, [r3, #216]	; 0xd8
   1b474:	mov	r9, #0
   1b478:	ldrd	r0, [r6, #64]	; 0x40
   1b47c:	strd	r2, [sp, #8]
   1b480:	strd	r8, [sp]
   1b484:	mov	r3, ip
   1b488:	sub	r2, fp, #692	; 0x2b4
   1b48c:	bl	202e8 <__assert_fail@plt+0xe574>
   1b490:	mov	r1, #0
   1b494:	bl	221d8 <__assert_fail@plt+0x10464>
   1b498:	ldr	r3, [r4, #4024]	; 0xfb8
   1b49c:	cmp	r0, r3
   1b4a0:	strgt	r0, [r4, #4024]	; 0xfb8
   1b4a4:	b	1ae94 <__assert_fail@plt+0x9120>
   1b4a8:	ldrb	r1, [r7, #1]
   1b4ac:	cmp	r1, #0
   1b4b0:	bne	1b13c <__assert_fail@plt+0x93c8>
   1b4b4:	ldr	r1, [fp, #-724]	; 0xfffffd2c
   1b4b8:	b	1b180 <__assert_fail@plt+0x940c>
   1b4bc:	mov	r3, #2
   1b4c0:	sub	r2, fp, #692	; 0x2b4
   1b4c4:	str	r3, [sp]
   1b4c8:	mov	r1, r7
   1b4cc:	mov	r3, #0
   1b4d0:	mvn	r0, #99	; 0x63
   1b4d4:	bl	1477c <__assert_fail@plt+0x2a08>
   1b4d8:	cmp	r0, #0
   1b4dc:	moveq	r3, #1
   1b4e0:	ldreq	r2, [fp, #-676]	; 0xfffffd5c
   1b4e4:	strbeq	r3, [r6, #133]	; 0x85
   1b4e8:	streq	r2, [r6, #124]	; 0x7c
   1b4ec:	b	1b2ec <__assert_fail@plt+0x9578>
   1b4f0:	ldr	r3, [fp, #-728]	; 0xfffffd28
   1b4f4:	cmp	r3, #0
   1b4f8:	beq	1b510 <__assert_fail@plt+0x979c>
   1b4fc:	ldrb	r3, [r9, #-4040]	; 0xfffff038
   1b500:	cmp	r3, #0
   1b504:	moveq	r3, #9
   1b508:	streq	r3, [r6, #120]	; 0x78
   1b50c:	beq	1adcc <__assert_fail@plt+0x9058>
   1b510:	mov	r3, #3
   1b514:	str	r3, [r6, #120]	; 0x78
   1b518:	b	1adcc <__assert_fail@plt+0x9058>
   1b51c:	ldrb	r3, [r9, #-4076]	; 0xfffff014
   1b520:	cmp	r3, #0
   1b524:	bne	1b250 <__assert_fail@plt+0x94dc>
   1b528:	b	1b304 <__assert_fail@plt+0x9590>
   1b52c:	mov	r1, r6
   1b530:	mov	r2, #304	; 0x130
   1b534:	ldr	r0, [r4, #3272]	; 0xcc8
   1b538:	bl	299e4 <_obstack_memory_used@@Base+0x5438>
   1b53c:	ldr	r3, [r9, #-4088]	; 0xfffff008
   1b540:	ldr	r6, [r4, #3260]	; 0xcbc
   1b544:	lsl	r3, r3, #1
   1b548:	str	r3, [r9, #-4088]	; 0xfffff008
   1b54c:	mov	r1, r0
   1b550:	str	r0, [r4, #3272]	; 0xcc8
   1b554:	b	1ab5c <__assert_fail@plt+0x8de8>
   1b558:	ldrd	r2, [r6, #16]
   1b55c:	cmp	r7, #61	; 0x3d
   1b560:	orreq	r1, r1, #1
   1b564:	strd	r2, [r5, #-8]
   1b568:	b	1b1fc <__assert_fail@plt+0x9488>
   1b56c:	ldrb	r5, [r4, #4008]	; 0xfa8
   1b570:	ldr	r7, [r6, #44]	; 0x2c
   1b574:	cmp	r5, #0
   1b578:	movne	r3, #0
   1b57c:	beq	1b85c <__assert_fail@plt+0x9ae8>
   1b580:	ldr	r2, [pc, #1332]	; 1babc <__assert_fail@plt+0x9d48>
   1b584:	mov	r1, #0
   1b588:	str	r3, [sp, #12]
   1b58c:	str	r2, [sp]
   1b590:	str	r7, [sp, #8]
   1b594:	mov	r0, r1
   1b598:	mvn	r3, #0
   1b59c:	mov	r2, #1
   1b5a0:	bl	11d5c <__snprintf_chk@plt>
   1b5a4:	ldr	r3, [r4, #4012]	; 0xfac
   1b5a8:	cmp	r3, r0
   1b5ac:	ldrb	r3, [r4, #3252]	; 0xcb4
   1b5b0:	strlt	r0, [r4, #4012]	; 0xfac
   1b5b4:	cmp	r3, #0
   1b5b8:	beq	1ae68 <__assert_fail@plt+0x90f4>
   1b5bc:	ldrb	r5, [r4, #4008]	; 0xfa8
   1b5c0:	ldr	r7, [r6, #40]	; 0x28
   1b5c4:	cmp	r5, #0
   1b5c8:	movne	r3, #0
   1b5cc:	beq	1b818 <__assert_fail@plt+0x9aa4>
   1b5d0:	ldr	r2, [pc, #1252]	; 1babc <__assert_fail@plt+0x9d48>
   1b5d4:	mov	r1, #0
   1b5d8:	str	r3, [sp, #12]
   1b5dc:	str	r2, [sp]
   1b5e0:	str	r7, [sp, #8]
   1b5e4:	mov	r0, r1
   1b5e8:	mvn	r3, #0
   1b5ec:	mov	r2, #1
   1b5f0:	bl	11d5c <__snprintf_chk@plt>
   1b5f4:	ldr	r3, [r4, #4016]	; 0xfb0
   1b5f8:	cmp	r3, r0
   1b5fc:	strlt	r0, [r4, #4016]	; 0xfb0
   1b600:	b	1ae68 <__assert_fail@plt+0x90f4>
   1b604:	ldrb	r1, [r4, #4008]	; 0xfa8
   1b608:	ldr	r7, [r6, #40]	; 0x28
   1b60c:	cmp	r1, #0
   1b610:	beq	1b838 <__assert_fail@plt+0x9ac4>
   1b614:	ldr	r2, [pc, #1184]	; 1babc <__assert_fail@plt+0x9d48>
   1b618:	mov	r1, #0
   1b61c:	str	r3, [sp, #12]
   1b620:	str	r2, [sp]
   1b624:	str	r7, [sp, #8]
   1b628:	mov	r0, r1
   1b62c:	mvn	r3, #0
   1b630:	mov	r2, #1
   1b634:	bl	11d5c <__snprintf_chk@plt>
   1b638:	ldr	r3, [r4, #4004]	; 0xfa4
   1b63c:	cmp	r3, r0
   1b640:	strlt	r0, [r4, #4004]	; 0xfa4
   1b644:	b	1ae50 <__assert_fail@plt+0x90dc>
   1b648:	ldrb	r3, [r4, #3708]	; 0xe7c
   1b64c:	cmp	r3, #0
   1b650:	beq	1ae94 <__assert_fail@plt+0x9120>
   1b654:	b	1ae74 <__assert_fail@plt+0x9100>
   1b658:	bl	11bb8 <__errno_location@plt>
   1b65c:	mov	r8, r0
   1b660:	ldrd	r0, [r6, #16]
   1b664:	ldrd	r2, [r5]
   1b668:	cmp	r1, r3
   1b66c:	cmpeq	r0, r2
   1b670:	beq	1b718 <__assert_fail@plt+0x99a4>
   1b674:	mov	r3, #0
   1b678:	ldr	r1, [fp, #-732]	; 0xfffffd24
   1b67c:	str	r3, [r8]
   1b680:	ldr	r0, [fp, #-724]	; 0xfffffd2c
   1b684:	bl	1de44 <__assert_fail@plt+0xc0d0>
   1b688:	cmp	r0, #0
   1b68c:	ble	1ba68 <__assert_fail@plt+0x9cf4>
   1b690:	mov	r2, #2
   1b694:	mov	r3, #1
   1b698:	str	r2, [r6, #136]	; 0x88
   1b69c:	strb	r3, [r4, #3997]	; 0xf9d
   1b6a0:	b	1b234 <__assert_fail@plt+0x94c0>
   1b6a4:	cmp	r8, #0
   1b6a8:	cmpne	r8, #6
   1b6ac:	clz	r2, r8
   1b6b0:	lsr	r2, r2, #5
   1b6b4:	bne	1b01c <__assert_fail@plt+0x92a8>
   1b6b8:	b	1af68 <__assert_fail@plt+0x91f4>
   1b6bc:	str	r0, [fp, #-724]	; 0xfffffd2c
   1b6c0:	mov	r0, sl
   1b6c4:	bl	11b94 <strlen@plt>
   1b6c8:	ldr	r1, [fp, #-724]	; 0xfffffd2c
   1b6cc:	cmp	r1, r0
   1b6d0:	bne	1b410 <__assert_fail@plt+0x969c>
   1b6d4:	str	r5, [r6, #144]	; 0x90
   1b6d8:	b	1ab98 <__assert_fail@plt+0x8e24>
   1b6dc:	ldr	r1, [pc, #988]	; 1bac0 <__assert_fail@plt+0x9d4c>
   1b6e0:	bl	11d20 <strncmp@plt>
   1b6e4:	cmp	r0, #0
   1b6e8:	beq	1ad30 <__assert_fail@plt+0x8fbc>
   1b6ec:	b	1b080 <__assert_fail@plt+0x930c>
   1b6f0:	ldrb	r2, [r7]
   1b6f4:	cmp	r2, #0
   1b6f8:	bne	1b0f4 <__assert_fail@plt+0x9380>
   1b6fc:	str	sl, [fp, #-724]	; 0xfffffd2c
   1b700:	b	1abe8 <__assert_fail@plt+0x8e74>
   1b704:	mov	r2, #0
   1b708:	mov	r3, #0
   1b70c:	sub	r1, fp, #724	; 0x2d4
   1b710:	strd	r2, [r1]
   1b714:	b	1aea0 <__assert_fail@plt+0x912c>
   1b718:	cmp	r7, #0
   1b71c:	mov	r3, #95	; 0x5f
   1b720:	str	r3, [r8]
   1b724:	movne	r0, #0
   1b728:	beq	1bbb4 <__assert_fail@plt+0x9e40>
   1b72c:	mov	r7, #1
   1b730:	mov	r2, r7
   1b734:	ldrb	r3, [r4, #3997]	; 0xf9d
   1b738:	cmp	r0, #0
   1b73c:	str	r2, [r6, #136]	; 0x88
   1b740:	orr	r7, r7, r3
   1b744:	strb	r7, [r4, #3997]	; 0xf9d
   1b748:	beq	1b234 <__assert_fail@plt+0x94c0>
   1b74c:	bl	11bb8 <__errno_location@plt>
   1b750:	ldr	r7, [r0]
   1b754:	b	1b210 <__assert_fail@plt+0x949c>
   1b758:	bl	11bb8 <__errno_location@plt>
   1b75c:	ldr	r3, [r0]
   1b760:	cmp	r3, #2
   1b764:	beq	1ace8 <__assert_fail@plt+0x8f74>
   1b768:	mov	r2, #5
   1b76c:	ldr	r1, [pc, #808]	; 1ba9c <__assert_fail@plt+0x9d28>
   1b770:	mov	r0, #0
   1b774:	bl	11984 <dcgettext@plt>
   1b778:	mov	r5, r0
   1b77c:	bl	11bb8 <__errno_location@plt>
   1b780:	ldr	r1, [fp, #-724]	; 0xfffffd2c
   1b784:	ldr	r4, [r0]
   1b788:	mov	r0, #4
   1b78c:	bl	26b3c <_obstack_memory_used@@Base+0x2590>
   1b790:	mov	r2, r5
   1b794:	mov	r1, r4
   1b798:	mov	r3, r0
   1b79c:	mov	r0, #0
   1b7a0:	bl	11a8c <error@plt>
   1b7a4:	b	1ac7c <__assert_fail@plt+0x8f08>
   1b7a8:	mov	r2, #5
   1b7ac:	ldr	r1, [pc, #784]	; 1bac4 <__assert_fail@plt+0x9d50>
   1b7b0:	bl	11984 <dcgettext@plt>
   1b7b4:	str	r0, [fp, #-732]	; 0xfffffd24
   1b7b8:	bl	11bb8 <__errno_location@plt>
   1b7bc:	ldr	r1, [fp, #-724]	; 0xfffffd2c
   1b7c0:	ldr	r7, [r0]
   1b7c4:	mov	r0, #4
   1b7c8:	bl	26b3c <_obstack_memory_used@@Base+0x2590>
   1b7cc:	ldr	r2, [fp, #-732]	; 0xfffffd24
   1b7d0:	mov	r1, r7
   1b7d4:	mov	r3, r0
   1b7d8:	mov	r0, r5
   1b7dc:	bl	11a8c <error@plt>
   1b7e0:	ldr	r3, [fp, #-728]	; 0xfffffd28
   1b7e4:	cmp	r3, #0
   1b7e8:	beq	1b9f4 <__assert_fail@plt+0x9c80>
   1b7ec:	ldr	r5, [r9, #-4080]	; 0xfffff010
   1b7f0:	mov	r3, #2
   1b7f4:	cmp	r5, r3
   1b7f8:	str	r3, [r9, #-4072]	; 0xfffff018
   1b7fc:	bcc	1ace0 <__assert_fail@plt+0x8f6c>
   1b800:	cmp	r5, #3
   1b804:	bhi	1abfc <__assert_fail@plt+0x8e88>
   1b808:	b	1aed4 <__assert_fail@plt+0x9160>
   1b80c:	bl	29f68 <_obstack_memory_used@@Base+0x59bc>
   1b810:	mov	r7, r0
   1b814:	b	1b2c8 <__assert_fail@plt+0x9554>
   1b818:	mov	r0, r7
   1b81c:	bl	212c8 <__assert_fail@plt+0xf554>
   1b820:	subs	r3, r0, #0
   1b824:	beq	1b5d0 <__assert_fail@plt+0x985c>
   1b828:	mov	r1, r5
   1b82c:	bl	221d8 <__assert_fail@plt+0x10464>
   1b830:	bic	r0, r0, r0, asr #31
   1b834:	b	1b5f4 <__assert_fail@plt+0x9880>
   1b838:	mov	r0, r7
   1b83c:	str	r1, [fp, #-728]	; 0xfffffd28
   1b840:	bl	212c8 <__assert_fail@plt+0xf554>
   1b844:	subs	r3, r0, #0
   1b848:	beq	1b614 <__assert_fail@plt+0x98a0>
   1b84c:	ldr	r1, [fp, #-728]	; 0xfffffd28
   1b850:	bl	221d8 <__assert_fail@plt+0x10464>
   1b854:	bic	r0, r0, r0, asr #31
   1b858:	b	1b638 <__assert_fail@plt+0x98c4>
   1b85c:	mov	r0, r7
   1b860:	bl	2146c <__assert_fail@plt+0xf6f8>
   1b864:	subs	r3, r0, #0
   1b868:	beq	1b580 <__assert_fail@plt+0x980c>
   1b86c:	mov	r1, r5
   1b870:	bl	221d8 <__assert_fail@plt+0x10464>
   1b874:	bic	r0, r0, r0, asr #31
   1b878:	b	1b5a4 <__assert_fail@plt+0x9830>
   1b87c:	ldrb	r2, [r4, #3996]	; 0xf9c
   1b880:	cmp	r2, #0
   1b884:	beq	1af3c <__assert_fail@plt+0x91c8>
   1b888:	ldr	r5, [pc, #544]	; 1bab0 <__assert_fail@plt+0x9d3c>
   1b88c:	ldr	r2, [r5, #152]	; 0x98
   1b890:	cmp	r2, #0
   1b894:	beq	1b8c4 <__assert_fail@plt+0x9b50>
   1b898:	cmp	r2, #1
   1b89c:	ldr	r0, [r5, #156]	; 0x9c
   1b8a0:	beq	1bb74 <__assert_fail@plt+0x9e00>
   1b8a4:	cmp	r2, #2
   1b8a8:	bne	1b01c <__assert_fail@plt+0x92a8>
   1b8ac:	ldr	r1, [pc, #524]	; 1bac0 <__assert_fail@plt+0x9d4c>
   1b8b0:	str	r3, [fp, #-724]	; 0xfffffd2c
   1b8b4:	bl	11d20 <strncmp@plt>
   1b8b8:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   1b8bc:	cmp	r0, #0
   1b8c0:	bne	1b01c <__assert_fail@plt+0x92a8>
   1b8c4:	ldr	r2, [r5, #144]	; 0x90
   1b8c8:	cmp	r2, #0
   1b8cc:	beq	1b8fc <__assert_fail@plt+0x9b88>
   1b8d0:	cmp	r2, #1
   1b8d4:	ldr	r0, [r5, #148]	; 0x94
   1b8d8:	beq	1bb84 <__assert_fail@plt+0x9e10>
   1b8dc:	cmp	r2, #2
   1b8e0:	bne	1b01c <__assert_fail@plt+0x92a8>
   1b8e4:	ldr	r1, [pc, #468]	; 1bac0 <__assert_fail@plt+0x9d4c>
   1b8e8:	str	r3, [fp, #-724]	; 0xfffffd2c
   1b8ec:	bl	11d20 <strncmp@plt>
   1b8f0:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   1b8f4:	cmp	r0, #0
   1b8f8:	bne	1b01c <__assert_fail@plt+0x92a8>
   1b8fc:	ldr	r2, [r5, #160]	; 0xa0
   1b900:	cmp	r2, #0
   1b904:	beq	1af3c <__assert_fail@plt+0x91c8>
   1b908:	cmp	r2, #1
   1b90c:	ldr	r0, [r5, #164]	; 0xa4
   1b910:	beq	1bb94 <__assert_fail@plt+0x9e20>
   1b914:	cmp	r2, #2
   1b918:	bne	1b01c <__assert_fail@plt+0x92a8>
   1b91c:	ldr	r1, [pc, #412]	; 1bac0 <__assert_fail@plt+0x9d4c>
   1b920:	str	r3, [fp, #-724]	; 0xfffffd2c
   1b924:	bl	11d20 <strncmp@plt>
   1b928:	ldr	r3, [fp, #-724]	; 0xfffffd2c
   1b92c:	cmp	r0, #0
   1b930:	beq	1af3c <__assert_fail@plt+0x91c8>
   1b934:	b	1b01c <__assert_fail@plt+0x92a8>
   1b938:	bl	11bb8 <__errno_location@plt>
   1b93c:	ldr	r3, [pc, #348]	; 1baa0 <__assert_fail@plt+0x9d2c>
   1b940:	mov	r2, #95	; 0x5f
   1b944:	mov	r8, r0
   1b948:	str	r2, [r0]
   1b94c:	str	r3, [r6, #128]	; 0x80
   1b950:	ldr	r7, [r4, #3244]	; 0xcac
   1b954:	cmp	r7, #0
   1b958:	bne	1ada4 <__assert_fail@plt+0x9030>
   1b95c:	b	1b660 <__assert_fail@plt+0x98ec>
   1b960:	ldr	r5, [r6, #4]
   1b964:	ldr	r3, [r4, #3236]	; 0xca4
   1b968:	mov	r2, r5
   1b96c:	str	r3, [sp]
   1b970:	mov	r1, #2
   1b974:	mvn	r3, #0
   1b978:	sub	r0, fp, #692	; 0x2b4
   1b97c:	bl	25e30 <_obstack_memory_used@@Base+0x1884>
   1b980:	ldrb	r2, [r5]
   1b984:	ldrb	r3, [fp, #-692]	; 0xfffffd4c
   1b988:	cmp	r2, r3
   1b98c:	mov	r8, r0
   1b990:	beq	1bb40 <__assert_fail@plt+0x9dcc>
   1b994:	mvn	r3, #0
   1b998:	str	r3, [r6, #144]	; 0x90
   1b99c:	b	1b2d4 <__assert_fail@plt+0x9560>
   1b9a0:	mov	r1, #2
   1b9a4:	mov	r0, sl
   1b9a8:	bl	1d4e4 <__assert_fail@plt+0xb770>
   1b9ac:	cmp	r0, #0
   1b9b0:	str	r0, [r6, #8]
   1b9b4:	bne	1b6fc <__assert_fail@plt+0x9988>
   1b9b8:	mov	r2, #5
   1b9bc:	ldr	r1, [pc, #256]	; 1bac4 <__assert_fail@plt+0x9d50>
   1b9c0:	bl	11984 <dcgettext@plt>
   1b9c4:	mov	r7, r0
   1b9c8:	bl	11bb8 <__errno_location@plt>
   1b9cc:	mov	r1, sl
   1b9d0:	str	sl, [fp, #-724]	; 0xfffffd2c
   1b9d4:	ldr	r5, [r0]
   1b9d8:	mov	r0, #4
   1b9dc:	bl	26b3c <_obstack_memory_used@@Base+0x2590>
   1b9e0:	mov	r2, r7
   1b9e4:	mov	r1, r5
   1b9e8:	mov	r3, r0
   1b9ec:	ldr	r0, [fp, #-728]	; 0xfffffd28
   1b9f0:	bl	11a8c <error@plt>
   1b9f4:	ldr	r3, [r9, #-4072]	; 0xfffff018
   1b9f8:	cmp	r3, #0
   1b9fc:	moveq	r3, #1
   1ba00:	streq	r3, [r9, #-4072]	; 0xfffff018
   1ba04:	ldr	r3, [r9, #-4080]	; 0xfffff010
   1ba08:	cmp	r3, #4
   1ba0c:	bne	1ace0 <__assert_fail@plt+0x8f6c>
   1ba10:	b	1ac04 <__assert_fail@plt+0x8e90>
   1ba14:	ldrb	r3, [r0]
   1ba18:	cmp	r3, #48	; 0x30
   1ba1c:	bne	1b080 <__assert_fail@plt+0x930c>
   1ba20:	b	1ad30 <__assert_fail@plt+0x8fbc>
   1ba24:	bl	11bb8 <__errno_location@plt>
   1ba28:	ldr	r3, [r0]
   1ba2c:	sub	r5, r3, #22
   1ba30:	bic	r5, r5, #16
   1ba34:	cmp	r5, #0
   1ba38:	cmpne	r3, #95	; 0x5f
   1ba3c:	moveq	r5, #1
   1ba40:	movne	r5, #0
   1ba44:	ldrdeq	r2, [r6, #16]
   1ba48:	moveq	r5, #0
   1ba4c:	strdeq	r2, [r8]
   1ba50:	b	1b0ec <__assert_fail@plt+0x9378>
   1ba54:	bl	11bb8 <__errno_location@plt>
   1ba58:	mov	r3, #95	; 0x5f
   1ba5c:	mov	r5, #0
   1ba60:	str	r3, [r0]
   1ba64:	b	1b0ec <__assert_fail@plt+0x9378>
   1ba68:	ldr	r2, [r8]
   1ba6c:	sub	r3, r2, #22
   1ba70:	bic	r3, r3, #16
   1ba74:	cmp	r3, #0
   1ba78:	cmpne	r2, #95	; 0x5f
   1ba7c:	beq	1bb64 <__assert_fail@plt+0x9df0>
   1ba80:	lsr	r0, r0, #31
   1ba84:	cmp	r7, #0
   1ba88:	bne	1b72c <__assert_fail@plt+0x99b8>
   1ba8c:	mov	r2, r7
   1ba90:	b	1b734 <__assert_fail@plt+0x99c0>
   1ba94:	andeq	r1, r4, r0, lsr r3
   1ba98:	andeq	r3, r4, r8, lsr #6
   1ba9c:	muleq	r2, r4, r8
   1baa0:	andeq	r1, r4, r0, lsr #5
   1baa4:	andeq	r2, r4, r8, asr r3
   1baa8:	ldrdeq	sp, [r2], -r0
   1baac:	andeq	r2, r4, r0, lsr #3
   1bab0:	ldrdeq	r1, [r4], -r0
   1bab4:	andeq	r2, r4, r8, asr #6
   1bab8:	andeq	pc, r2, ip, lsr #19
   1babc:	andeq	sp, r2, r8, asr #17
   1bac0:	strdeq	sp, [r2], -r0
   1bac4:	andeq	sp, r2, ip, ror r8
   1bac8:	andeq	sp, r2, r8, lsr #17
   1bacc:	mov	r2, #5
   1bad0:	ldr	r1, [pc, #-16]	; 1bac8 <__assert_fail@plt+0x9d54>
   1bad4:	bl	11984 <dcgettext@plt>
   1bad8:	mov	r8, r0
   1badc:	bl	11bb8 <__errno_location@plt>
   1bae0:	ldr	r1, [fp, #-724]	; 0xfffffd2c
   1bae4:	ldr	r7, [r0]
   1bae8:	mov	r0, #4
   1baec:	bl	26b3c <_obstack_memory_used@@Base+0x2590>
   1baf0:	mov	r2, r8
   1baf4:	mov	r1, r7
   1baf8:	mov	r3, r0
   1bafc:	mov	r0, r5
   1bb00:	bl	11a8c <error@plt>
   1bb04:	ldr	r3, [fp, #-728]	; 0xfffffd28
   1bb08:	cmp	r3, #0
   1bb0c:	movne	r3, #2
   1bb10:	strne	r3, [r9, #-4072]	; 0xfffff018
   1bb14:	bne	1bb28 <__assert_fail@plt+0x9db4>
   1bb18:	ldr	r3, [r9, #-4072]	; 0xfffff018
   1bb1c:	cmp	r3, #0
   1bb20:	moveq	r3, #1
   1bb24:	streq	r3, [r9, #-4072]	; 0xfffff018
   1bb28:	ldr	r3, [r6, #4]
   1bb2c:	cmp	r3, #0
   1bb30:	moveq	r7, r5
   1bb34:	beq	1b2ec <__assert_fail@plt+0x9578>
   1bb38:	mov	r5, r3
   1bb3c:	b	1b26c <__assert_fail@plt+0x94f8>
   1bb40:	mov	r0, r5
   1bb44:	bl	11b94 <strlen@plt>
   1bb48:	cmp	r8, r0
   1bb4c:	bne	1b994 <__assert_fail@plt+0x9c20>
   1bb50:	b	1b2d4 <__assert_fail@plt+0x9560>
   1bb54:	mov	r0, r5
   1bb58:	bl	29f68 <_obstack_memory_used@@Base+0x59bc>
   1bb5c:	mov	r7, r0
   1bb60:	b	1b2c8 <__assert_fail@plt+0x9554>
   1bb64:	ldrd	r2, [r6, #16]
   1bb68:	lsr	r0, r0, #31
   1bb6c:	strd	r2, [r5]
   1bb70:	b	1ba84 <__assert_fail@plt+0x9d10>
   1bb74:	ldrb	r2, [r0]
   1bb78:	cmp	r2, #48	; 0x30
   1bb7c:	bne	1b01c <__assert_fail@plt+0x92a8>
   1bb80:	b	1b8c4 <__assert_fail@plt+0x9b50>
   1bb84:	ldrb	r2, [r0]
   1bb88:	cmp	r2, #48	; 0x30
   1bb8c:	bne	1b01c <__assert_fail@plt+0x92a8>
   1bb90:	b	1b8fc <__assert_fail@plt+0x9b88>
   1bb94:	ldrb	r2, [r0]
   1bb98:	cmp	r2, #48	; 0x30
   1bb9c:	bne	1b01c <__assert_fail@plt+0x92a8>
   1bba0:	b	1af3c <__assert_fail@plt+0x91c8>
   1bba4:	mov	r3, #1
   1bba8:	str	r3, [r6, #136]	; 0x88
   1bbac:	strb	r3, [r4, #3997]	; 0xf9d
   1bbb0:	b	1b234 <__assert_fail@plt+0x94c0>
   1bbb4:	str	r7, [r6, #136]	; 0x88
   1bbb8:	b	1b234 <__assert_fail@plt+0x94c0>
   1bbbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bbc0:	sub	sp, sp, #708	; 0x2c4
   1bbc4:	mov	r4, r0
   1bbc8:	mov	fp, r1
   1bbcc:	str	r2, [sp, #44]	; 0x2c
   1bbd0:	str	r0, [sp, #40]	; 0x28
   1bbd4:	bl	11bb8 <__errno_location@plt>
   1bbd8:	mov	r5, #0
   1bbdc:	str	r0, [sp, #24]
   1bbe0:	str	r5, [r0]
   1bbe4:	mov	r0, r4
   1bbe8:	bl	11aa4 <opendir@plt>
   1bbec:	subs	r3, r0, #0
   1bbf0:	str	r3, [sp, #28]
   1bbf4:	beq	1c518 <__assert_fail@plt+0xa7a4>
   1bbf8:	ldr	r4, [pc, #2680]	; 1c678 <__assert_fail@plt+0xa904>
   1bbfc:	ldr	r3, [r4, #3676]	; 0xe5c
   1bc00:	cmp	r3, #0
   1bc04:	beq	1c3e4 <__assert_fail@plt+0xa670>
   1bc08:	bl	11cd8 <dirfd@plt>
   1bc0c:	add	sl, sp, #48	; 0x30
   1bc10:	cmp	r0, #0
   1bc14:	blt	1bd4c <__assert_fail@plt+0x9fd8>
   1bc18:	mov	r3, #256	; 0x100
   1bc1c:	str	r3, [sp]
   1bc20:	mov	r2, sl
   1bc24:	mov	r3, #4096	; 0x1000
   1bc28:	ldr	r1, [pc, #2636]	; 1c67c <__assert_fail@plt+0xa908>
   1bc2c:	bl	1477c <__assert_fail@plt+0x2a08>
   1bc30:	lsr	r5, r0, #31
   1bc34:	cmp	r5, #0
   1bc38:	bne	1bcd8 <__assert_fail@plt+0x9f64>
   1bc3c:	mov	r0, #16
   1bc40:	ldrd	r8, [sl]
   1bc44:	ldrd	r6, [sl, #96]	; 0x60
   1bc48:	bl	29958 <_obstack_memory_used@@Base+0x53ac>
   1bc4c:	mov	r3, r0
   1bc50:	strd	r8, [r0, #8]
   1bc54:	mov	r1, r0
   1bc58:	strd	r6, [r3]
   1bc5c:	ldr	r0, [r4, #3676]	; 0xe5c
   1bc60:	str	r3, [sp, #20]
   1bc64:	bl	1faa0 <__assert_fail@plt+0xdd2c>
   1bc68:	ldr	r3, [sp, #20]
   1bc6c:	cmp	r0, #0
   1bc70:	beq	1c634 <__assert_fail@plt+0xa8c0>
   1bc74:	cmp	r3, r0
   1bc78:	beq	1bd70 <__assert_fail@plt+0x9ffc>
   1bc7c:	mov	r0, r3
   1bc80:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   1bc84:	mov	r2, #5
   1bc88:	ldr	r1, [pc, #2544]	; 1c680 <__assert_fail@plt+0xa90c>
   1bc8c:	mov	r0, r5
   1bc90:	bl	11984 <dcgettext@plt>
   1bc94:	ldr	r2, [sp, #40]	; 0x28
   1bc98:	mov	r1, #3
   1bc9c:	mov	r4, r0
   1bca0:	mov	r0, r5
   1bca4:	bl	275b8 <_obstack_memory_used@@Base+0x300c>
   1bca8:	mov	r2, r4
   1bcac:	mov	r1, r5
   1bcb0:	mov	r3, r0
   1bcb4:	mov	r0, r5
   1bcb8:	bl	11a8c <error@plt>
   1bcbc:	ldr	r0, [sp, #28]
   1bcc0:	bl	11d38 <closedir@plt>
   1bcc4:	ldr	r3, [pc, #2488]	; 1c684 <__assert_fail@plt+0xa910>
   1bcc8:	mov	r2, #2
   1bccc:	str	r2, [r3, #-4072]	; 0xfffff018
   1bcd0:	add	sp, sp, #708	; 0x2c4
   1bcd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bcd8:	mov	r2, #5
   1bcdc:	ldr	r1, [pc, #2468]	; 1c688 <__assert_fail@plt+0xa914>
   1bce0:	mov	r0, #0
   1bce4:	bl	11984 <dcgettext@plt>
   1bce8:	ldr	r3, [sp, #24]
   1bcec:	ldr	r1, [sp, #40]	; 0x28
   1bcf0:	ldr	r4, [r3]
   1bcf4:	mov	r5, r0
   1bcf8:	mov	r0, #4
   1bcfc:	bl	26b3c <_obstack_memory_used@@Base+0x2590>
   1bd00:	mov	r2, r5
   1bd04:	mov	r1, r4
   1bd08:	mov	r3, r0
   1bd0c:	mov	r0, #0
   1bd10:	bl	11a8c <error@plt>
   1bd14:	ldr	r3, [sp, #44]	; 0x2c
   1bd18:	cmp	r3, #0
   1bd1c:	ldr	r3, [pc, #2400]	; 1c684 <__assert_fail@plt+0xa910>
   1bd20:	movne	r2, #2
   1bd24:	strne	r2, [r3, #-4072]	; 0xfffff018
   1bd28:	bne	1bd3c <__assert_fail@plt+0x9fc8>
   1bd2c:	ldr	r2, [r3, #-4072]	; 0xfffff018
   1bd30:	cmp	r2, #0
   1bd34:	moveq	r2, #1
   1bd38:	streq	r2, [r3, #-4072]	; 0xfffff018
   1bd3c:	ldr	r0, [sp, #28]
   1bd40:	bl	11d38 <closedir@plt>
   1bd44:	add	sp, sp, #708	; 0x2c4
   1bd48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd4c:	mov	r1, #256	; 0x100
   1bd50:	mov	r3, r5
   1bd54:	str	r1, [sp]
   1bd58:	mov	r2, sl
   1bd5c:	ldr	r1, [sp, #40]	; 0x28
   1bd60:	mvn	r0, #99	; 0x63
   1bd64:	bl	1477c <__assert_fail@plt+0x2a08>
   1bd68:	lsr	r5, r0, #31
   1bd6c:	b	1bc34 <__assert_fail@plt+0x9ec0>
   1bd70:	ldr	r3, [pc, #2316]	; 1c684 <__assert_fail@plt+0xa910>
   1bd74:	ldrd	r6, [sl]
   1bd78:	mov	r2, r3
   1bd7c:	str	r3, [sp, #20]
   1bd80:	ldr	r2, [r2, #-4020]	; 0xfffff04c
   1bd84:	ldr	r3, [r3, #-4024]	; 0xfffff048
   1bd88:	ldrd	r8, [sl, #96]	; 0x60
   1bd8c:	sub	r2, r2, r3
   1bd90:	cmp	r2, #15
   1bd94:	bls	1c0b0 <__assert_fail@plt+0xa33c>
   1bd98:	ldr	r1, [sp, #20]
   1bd9c:	add	r2, r3, #16
   1bda0:	str	r2, [r1, #-4024]	; 0xfffff048
   1bda4:	strd	r6, [r3, #8]
   1bda8:	strd	r8, [r3]
   1bdac:	ldr	r3, [r4, #3260]	; 0xcbc
   1bdb0:	cmp	r3, #0
   1bdb4:	movne	r7, #0
   1bdb8:	ldrne	r6, [pc, #2252]	; 1c68c <__assert_fail@plt+0xa918>
   1bdbc:	beq	1be00 <__assert_fail@plt+0xa08c>
   1bdc0:	ldr	r3, [r4, #3268]	; 0xcc4
   1bdc4:	ldr	r5, [r3, r7, lsl #2]
   1bdc8:	ldr	r0, [r5]
   1bdcc:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   1bdd0:	ldr	r0, [r5, #4]
   1bdd4:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   1bdd8:	ldr	r0, [r5, #8]
   1bddc:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   1bde0:	ldr	r0, [r5, #128]	; 0x80
   1bde4:	cmp	r0, r6
   1bde8:	beq	1bdf0 <__assert_fail@plt+0xa07c>
   1bdec:	bl	11ce4 <freecon@plt>
   1bdf0:	ldr	r3, [r4, #3260]	; 0xcbc
   1bdf4:	add	r7, r7, #1
   1bdf8:	cmp	r7, r3
   1bdfc:	bcc	1bdc0 <__assert_fail@plt+0xa04c>
   1be00:	ldr	r3, [sp, #20]
   1be04:	ldrb	r2, [r3, #-3992]	; 0xfffff068
   1be08:	mov	r3, #0
   1be0c:	str	r3, [r4, #3260]	; 0xcbc
   1be10:	cmp	r2, r3
   1be14:	strb	r3, [r4, #3234]	; 0xca2
   1be18:	strb	r3, [r4, #3997]	; 0xf9d
   1be1c:	str	r3, [r4, #3684]	; 0xe64
   1be20:	str	r3, [r4, #3704]	; 0xe78
   1be24:	str	r3, [r4, #4000]	; 0xfa0
   1be28:	str	r3, [r4, #4004]	; 0xfa4
   1be2c:	str	r3, [r4, #4012]	; 0xfac
   1be30:	str	r3, [r4, #4016]	; 0xfb0
   1be34:	str	r3, [r4, #3712]	; 0xe80
   1be38:	str	r3, [r4, #4020]	; 0xfb4
   1be3c:	str	r3, [r4, #4028]	; 0xfbc
   1be40:	str	r3, [r4, #4024]	; 0xfb8
   1be44:	beq	1c048 <__assert_fail@plt+0xa2d4>
   1be48:	ldr	r6, [pc, #2112]	; 1c690 <__assert_fail@plt+0xa91c>
   1be4c:	ldrb	r3, [r6, #228]	; 0xe4
   1be50:	cmp	r3, #0
   1be54:	beq	1c068 <__assert_fail@plt+0xa2f4>
   1be58:	ldr	r5, [pc, #2100]	; 1c694 <__assert_fail@plt+0xa920>
   1be5c:	ldr	r8, [pc, #2100]	; 1c698 <__assert_fail@plt+0xa924>
   1be60:	ldrb	r3, [r4, #3988]	; 0xf94
   1be64:	mov	r2, #0
   1be68:	strb	r2, [r6, #228]	; 0xe4
   1be6c:	cmp	r3, r2
   1be70:	bne	1c3f0 <__assert_fail@plt+0xa67c>
   1be74:	ldr	r3, [sp, #20]
   1be78:	ldrb	r3, [r3, #-4084]	; 0xfffff00c
   1be7c:	cmp	r3, #0
   1be80:	bne	1c448 <__assert_fail@plt+0xa6d4>
   1be84:	mov	r6, #0
   1be88:	ldr	r3, [sp, #20]
   1be8c:	ldr	r2, [pc, #2056]	; 1c69c <__assert_fail@plt+0xa928>
   1be90:	cmp	fp, #0
   1be94:	ldr	r1, [r3, #-3988]	; 0xfffff06c
   1be98:	mov	r3, #1
   1be9c:	str	r6, [sp, #8]
   1bea0:	ldr	r0, [sp, #40]	; 0x28
   1bea4:	str	r2, [sp, #4]
   1bea8:	movne	r0, fp
   1beac:	mvn	r2, #0
   1beb0:	str	r3, [sp]
   1beb4:	mov	r3, #0
   1beb8:	bl	18518 <__assert_fail@plt+0x67a4>
   1bebc:	mov	r0, r6
   1bec0:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   1bec4:	ldrd	r2, [r5, #-8]
   1bec8:	ldr	r6, [r8]
   1becc:	adds	r2, r2, #2
   1bed0:	ldr	r1, [r6, #20]
   1bed4:	ldr	r0, [r6, #24]
   1bed8:	adc	r3, r3, #0
   1bedc:	cmp	r0, r1
   1bee0:	strd	r2, [r5, #-8]
   1bee4:	bls	1c61c <__assert_fail@plt+0xa8a8>
   1bee8:	add	r2, r1, #1
   1beec:	mov	r3, #58	; 0x3a
   1bef0:	str	r2, [r6, #20]
   1bef4:	strb	r3, [r1]
   1bef8:	ldr	r3, [r6, #20]
   1befc:	ldr	r2, [r6, #24]
   1bf00:	cmp	r2, r3
   1bf04:	bls	1c5e4 <__assert_fail@plt+0xa870>
   1bf08:	add	r1, r3, #1
   1bf0c:	mov	r2, #10
   1bf10:	str	r1, [r6, #20]
   1bf14:	strb	r2, [r3]
   1bf18:	mov	r3, #0
   1bf1c:	mov	r2, #0
   1bf20:	ldr	r5, [pc, #1904]	; 1c698 <__assert_fail@plt+0xa924>
   1bf24:	strd	r2, [sp, #32]
   1bf28:	ldr	r3, [pc, #1884]	; 1c68c <__assert_fail@plt+0xa918>
   1bf2c:	sub	r7, r3, #208	; 0xd0
   1bf30:	add	r8, r7, #8
   1bf34:	ldr	r2, [sp, #24]
   1bf38:	mov	r3, #0
   1bf3c:	ldr	r0, [sp, #28]
   1bf40:	str	r3, [r2]
   1bf44:	bl	11cb4 <readdir64@plt>
   1bf48:	subs	sl, r0, #0
   1bf4c:	beq	1c248 <__assert_fail@plt+0xa4d4>
   1bf50:	ldr	r3, [sp, #20]
   1bf54:	add	r6, sl, #19
   1bf58:	ldr	r3, [r3, #-3940]	; 0xfffff09c
   1bf5c:	cmp	r3, #2
   1bf60:	beq	1c0fc <__assert_fail@plt+0xa388>
   1bf64:	ldrb	r2, [sl, #19]
   1bf68:	cmp	r2, #46	; 0x2e
   1bf6c:	beq	1c0d8 <__assert_fail@plt+0xa364>
   1bf70:	cmp	r3, #0
   1bf74:	bne	1c0fc <__assert_fail@plt+0xa388>
   1bf78:	ldr	r3, [sp, #20]
   1bf7c:	ldr	r3, [r3, #-3932]	; 0xfffff0a4
   1bf80:	cmp	r3, #0
   1bf84:	beq	1c0fc <__assert_fail@plt+0xa388>
   1bf88:	mov	fp, r3
   1bf8c:	mov	r9, #4
   1bf90:	b	1bfa0 <__assert_fail@plt+0xa22c>
   1bf94:	ldr	fp, [fp, #4]
   1bf98:	cmp	fp, #0
   1bf9c:	beq	1c0fc <__assert_fail@plt+0xa388>
   1bfa0:	mov	r2, r9
   1bfa4:	mov	r1, r6
   1bfa8:	ldr	r0, [fp]
   1bfac:	bl	11ab0 <fnmatch@plt>
   1bfb0:	cmp	r0, #0
   1bfb4:	bne	1bf94 <__assert_fail@plt+0xa220>
   1bfb8:	ldr	r9, [pc, #1760]	; 1c6a0 <__assert_fail@plt+0xa92c>
   1bfbc:	mov	r6, #0
   1bfc0:	b	1c010 <__assert_fail@plt+0xa29c>
   1bfc4:	ldr	r0, [r5]
   1bfc8:	bl	119e4 <fflush_unlocked@plt>
   1bfcc:	add	r2, sp, #48	; 0x30
   1bfd0:	mov	r1, r9
   1bfd4:	mov	r0, r6
   1bfd8:	bl	118dc <sigprocmask@plt>
   1bfdc:	ldr	sl, [r4]
   1bfe0:	ldr	r3, [r4, #3092]	; 0xc14
   1bfe4:	cmp	r3, #0
   1bfe8:	beq	1c0c8 <__assert_fail@plt+0xa354>
   1bfec:	mov	sl, #19
   1bff0:	sub	r3, r3, #1
   1bff4:	str	r3, [r4, #3092]	; 0xc14
   1bff8:	mov	r0, sl
   1bffc:	bl	1187c <raise@plt>
   1c000:	mov	r2, r6
   1c004:	add	r1, sp, #48	; 0x30
   1c008:	mov	r0, #2
   1c00c:	bl	118dc <sigprocmask@plt>
   1c010:	ldr	r3, [r4]
   1c014:	cmp	r3, #0
   1c018:	bne	1c028 <__assert_fail@plt+0xa2b4>
   1c01c:	ldr	r3, [r4, #3092]	; 0xc14
   1c020:	cmp	r3, #0
   1c024:	beq	1bf34 <__assert_fail@plt+0xa1c0>
   1c028:	ldrb	r3, [r4, #3100]	; 0xc1c
   1c02c:	cmp	r3, #0
   1c030:	beq	1bfc4 <__assert_fail@plt+0xa250>
   1c034:	mov	r0, r7
   1c038:	bl	14b74 <__assert_fail@plt+0x2e00>
   1c03c:	mov	r0, r8
   1c040:	bl	14b74 <__assert_fail@plt+0x2e00>
   1c044:	b	1bfc4 <__assert_fail@plt+0xa250>
   1c048:	ldr	r3, [sp, #20]
   1c04c:	ldrb	r3, [r3, #-3991]	; 0xfffff069
   1c050:	cmp	r3, #0
   1c054:	beq	1bf18 <__assert_fail@plt+0xa1a4>
   1c058:	ldr	r6, [pc, #1584]	; 1c690 <__assert_fail@plt+0xa91c>
   1c05c:	ldrb	r3, [r6, #228]	; 0xe4
   1c060:	cmp	r3, #0
   1c064:	bne	1be58 <__assert_fail@plt+0xa0e4>
   1c068:	ldr	r5, [pc, #1572]	; 1c694 <__assert_fail@plt+0xa920>
   1c06c:	ldr	r8, [pc, #1572]	; 1c698 <__assert_fail@plt+0xa924>
   1c070:	ldrd	r2, [r5, #-8]
   1c074:	ldr	r0, [r8]
   1c078:	adds	r2, r2, #1
   1c07c:	ldr	r1, [r0, #20]
   1c080:	ldr	ip, [r0, #24]
   1c084:	adc	r3, r3, #0
   1c088:	cmp	r1, ip
   1c08c:	strd	r2, [r5, #-8]
   1c090:	addcc	r2, r1, #1
   1c094:	movcc	r3, #10
   1c098:	strcc	r2, [r0, #20]
   1c09c:	strbcc	r3, [r1]
   1c0a0:	bcc	1be60 <__assert_fail@plt+0xa0ec>
   1c0a4:	mov	r1, #10
   1c0a8:	bl	11c48 <__overflow@plt>
   1c0ac:	b	1be60 <__assert_fail@plt+0xa0ec>
   1c0b0:	mov	r1, #16
   1c0b4:	ldr	r0, [pc, #1512]	; 1c6a4 <__assert_fail@plt+0xa930>
   1c0b8:	bl	24384 <_obstack_newchunk@@Base>
   1c0bc:	ldr	r3, [sp, #20]
   1c0c0:	ldr	r3, [r3, #-4024]	; 0xfffff048
   1c0c4:	b	1bd98 <__assert_fail@plt+0xa024>
   1c0c8:	mov	r1, r6
   1c0cc:	mov	r0, sl
   1c0d0:	bl	11954 <signal@plt>
   1c0d4:	b	1bff8 <__assert_fail@plt+0xa284>
   1c0d8:	cmp	r3, #0
   1c0dc:	beq	1bfb8 <__assert_fail@plt+0xa244>
   1c0e0:	ldrb	r3, [sl, #20]
   1c0e4:	cmp	r3, #46	; 0x2e
   1c0e8:	movne	r3, #1
   1c0ec:	moveq	r3, #2
   1c0f0:	ldrb	r3, [r6, r3]
   1c0f4:	cmp	r3, #0
   1c0f8:	beq	1bfb8 <__assert_fail@plt+0xa244>
   1c0fc:	ldr	r3, [sp, #20]
   1c100:	ldr	r3, [r3, #-3936]	; 0xfffff0a0
   1c104:	cmp	r3, #0
   1c108:	movne	fp, r3
   1c10c:	movne	r9, #4
   1c110:	bne	1c124 <__assert_fail@plt+0xa3b0>
   1c114:	b	1c140 <__assert_fail@plt+0xa3cc>
   1c118:	ldr	fp, [fp, #4]
   1c11c:	cmp	fp, #0
   1c120:	beq	1c140 <__assert_fail@plt+0xa3cc>
   1c124:	mov	r2, r9
   1c128:	mov	r1, r6
   1c12c:	ldr	r0, [fp]
   1c130:	bl	11ab0 <fnmatch@plt>
   1c134:	cmp	r0, #0
   1c138:	bne	1c118 <__assert_fail@plt+0xa3a4>
   1c13c:	b	1bfb8 <__assert_fail@plt+0xa244>
   1c140:	ldrb	r3, [sl, #18]
   1c144:	sub	r3, r3, #1
   1c148:	uxtb	r3, r3
   1c14c:	cmp	r3, #13
   1c150:	movhi	r1, #0
   1c154:	ldrls	r2, [pc, #1356]	; 1c6a8 <__assert_fail@plt+0xa934>
   1c158:	addls	r3, r2, r3, lsl #2
   1c15c:	ldrls	r1, [r3, #400]	; 0x190
   1c160:	ldr	r3, [sp, #40]	; 0x28
   1c164:	mov	r0, r6
   1c168:	mov	r2, #0
   1c16c:	bl	1ab24 <__assert_fail@plt+0x8db0>
   1c170:	ldrd	sl, [sp, #32]
   1c174:	ldr	r3, [r4, #3244]	; 0xcac
   1c178:	adds	sl, sl, r0
   1c17c:	adc	fp, fp, r1
   1c180:	cmp	r3, #1
   1c184:	strd	sl, [sp, #32]
   1c188:	bne	1bfb8 <__assert_fail@plt+0xa244>
   1c18c:	ldr	r3, [r4, #3256]	; 0xcb8
   1c190:	cmp	r3, #6
   1c194:	bne	1bfb8 <__assert_fail@plt+0xa244>
   1c198:	ldrb	r3, [r4, #3241]	; 0xca9
   1c19c:	cmp	r3, #0
   1c1a0:	bne	1bfb8 <__assert_fail@plt+0xa244>
   1c1a4:	ldr	r3, [sp, #20]
   1c1a8:	ldrb	r9, [r3, #-3992]	; 0xfffff068
   1c1ac:	cmp	r9, #0
   1c1b0:	bne	1bfb8 <__assert_fail@plt+0xa244>
   1c1b4:	bl	1608c <__assert_fail@plt+0x4318>
   1c1b8:	bl	1a238 <__assert_fail@plt+0x84c4>
   1c1bc:	ldr	r3, [r4, #3260]	; 0xcbc
   1c1c0:	cmp	r3, #0
   1c1c4:	beq	1c20c <__assert_fail@plt+0xa498>
   1c1c8:	ldr	r3, [r4, #3268]	; 0xcc4
   1c1cc:	ldr	r6, [r3, r9, lsl #2]
   1c1d0:	ldr	r0, [r6]
   1c1d4:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   1c1d8:	ldr	r0, [r6, #4]
   1c1dc:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   1c1e0:	ldr	r0, [r6, #8]
   1c1e4:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   1c1e8:	ldr	r0, [r6, #128]	; 0x80
   1c1ec:	ldr	r3, [pc, #1176]	; 1c68c <__assert_fail@plt+0xa918>
   1c1f0:	cmp	r0, r3
   1c1f4:	beq	1c1fc <__assert_fail@plt+0xa488>
   1c1f8:	bl	11ce4 <freecon@plt>
   1c1fc:	ldr	r3, [r4, #3260]	; 0xcbc
   1c200:	add	r9, r9, #1
   1c204:	cmp	r9, r3
   1c208:	bcc	1c1c8 <__assert_fail@plt+0xa454>
   1c20c:	mov	r3, #0
   1c210:	str	r3, [r4, #3260]	; 0xcbc
   1c214:	strb	r3, [r4, #3234]	; 0xca2
   1c218:	strb	r3, [r4, #3997]	; 0xf9d
   1c21c:	str	r3, [r4, #3684]	; 0xe64
   1c220:	str	r3, [r4, #3704]	; 0xe78
   1c224:	str	r3, [r4, #4000]	; 0xfa0
   1c228:	str	r3, [r4, #4004]	; 0xfa4
   1c22c:	str	r3, [r4, #4012]	; 0xfac
   1c230:	str	r3, [r4, #4016]	; 0xfb0
   1c234:	str	r3, [r4, #3712]	; 0xe80
   1c238:	str	r3, [r4, #4020]	; 0xfb4
   1c23c:	str	r3, [r4, #4028]	; 0xfbc
   1c240:	str	r3, [r4, #4024]	; 0xfb8
   1c244:	b	1bfb8 <__assert_fail@plt+0xa244>
   1c248:	ldr	r6, [sp, #24]
   1c24c:	ldr	r3, [r6]
   1c250:	cmp	r3, #0
   1c254:	beq	1c2b4 <__assert_fail@plt+0xa540>
   1c258:	mov	r2, #5
   1c25c:	ldr	r1, [pc, #1096]	; 1c6ac <__assert_fail@plt+0xa938>
   1c260:	bl	11984 <dcgettext@plt>
   1c264:	ldr	r1, [sp, #40]	; 0x28
   1c268:	ldr	r6, [r6]
   1c26c:	mov	r9, r0
   1c270:	mov	r0, #4
   1c274:	bl	26b3c <_obstack_memory_used@@Base+0x2590>
   1c278:	mov	r2, r9
   1c27c:	mov	r1, r6
   1c280:	mov	r3, r0
   1c284:	mov	r0, sl
   1c288:	bl	11a8c <error@plt>
   1c28c:	ldr	r3, [sp, #44]	; 0x2c
   1c290:	cmp	r3, #0
   1c294:	beq	1c3cc <__assert_fail@plt+0xa658>
   1c298:	ldr	r2, [sp, #20]
   1c29c:	mov	r3, #2
   1c2a0:	str	r3, [r2, #-4072]	; 0xfffff018
   1c2a4:	ldr	r3, [sp, #24]
   1c2a8:	ldr	r3, [r3]
   1c2ac:	cmp	r3, #75	; 0x4b
   1c2b0:	beq	1bfb8 <__assert_fail@plt+0xa244>
   1c2b4:	ldr	r0, [sp, #28]
   1c2b8:	bl	11d38 <closedir@plt>
   1c2bc:	cmp	r0, #0
   1c2c0:	bne	1c4c0 <__assert_fail@plt+0xa74c>
   1c2c4:	bl	1608c <__assert_fail@plt+0x4318>
   1c2c8:	ldr	r3, [sp, #20]
   1c2cc:	ldrb	r3, [r3, #-3992]	; 0xfffff068
   1c2d0:	cmp	r3, #0
   1c2d4:	bne	1c4b0 <__assert_fail@plt+0xa73c>
   1c2d8:	ldr	r3, [r4, #3244]	; 0xcac
   1c2dc:	cmp	r3, #0
   1c2e0:	beq	1c2f0 <__assert_fail@plt+0xa57c>
   1c2e4:	ldrb	r3, [r4, #3241]	; 0xca9
   1c2e8:	cmp	r3, #0
   1c2ec:	beq	1c3b8 <__assert_fail@plt+0xa644>
   1c2f0:	ldr	r5, [pc, #952]	; 1c6b0 <__assert_fail@plt+0xa93c>
   1c2f4:	mov	r8, #512	; 0x200
   1c2f8:	mov	r9, #0
   1c2fc:	ldrd	r6, [r5]
   1c300:	ldr	r3, [r4, #3688]	; 0xe68
   1c304:	ldrd	r0, [sp, #32]
   1c308:	strd	r8, [sp]
   1c30c:	add	r2, sp, #49	; 0x31
   1c310:	strd	r6, [sp, #8]
   1c314:	bl	202e8 <__assert_fail@plt+0xe574>
   1c318:	ldr	r8, [pc, #888]	; 1c698 <__assert_fail@plt+0xa924>
   1c31c:	mov	sl, r0
   1c320:	bl	11b94 <strlen@plt>
   1c324:	ldr	r3, [pc, #868]	; 1c690 <__assert_fail@plt+0xa91c>
   1c328:	ldrb	r2, [r4, #3988]	; 0xf94
   1c32c:	mov	r1, #32
   1c330:	ldrb	r3, [r3, #210]	; 0xd2
   1c334:	cmp	r2, #0
   1c338:	strb	r1, [sl, #-1]
   1c33c:	add	r9, sl, r0
   1c340:	strb	r3, [sl, r0]
   1c344:	add	r9, r9, #1
   1c348:	sub	sl, sl, #1
   1c34c:	bne	1c58c <__assert_fail@plt+0xa818>
   1c350:	add	r5, r5, r1
   1c354:	mov	r2, #5
   1c358:	ldr	r1, [pc, #852]	; 1c6b4 <__assert_fail@plt+0xa940>
   1c35c:	mov	r0, #0
   1c360:	bl	11984 <dcgettext@plt>
   1c364:	mov	fp, r0
   1c368:	bl	11b94 <strlen@plt>
   1c36c:	ldrd	r6, [r5, #-8]
   1c370:	mov	r1, #1
   1c374:	mov	r3, r0
   1c378:	adds	r6, r6, r3
   1c37c:	adc	r7, r7, #0
   1c380:	mov	r2, r3
   1c384:	mov	r0, fp
   1c388:	ldr	r3, [r8]
   1c38c:	strd	r6, [r5, #-8]
   1c390:	bl	11960 <fwrite_unlocked@plt>
   1c394:	ldrd	r6, [r5, #-8]
   1c398:	sub	r2, r9, sl
   1c39c:	ldr	r3, [r8]
   1c3a0:	adds	r6, r6, r2
   1c3a4:	adc	r7, r7, #0
   1c3a8:	mov	r0, sl
   1c3ac:	mov	r1, #1
   1c3b0:	strd	r6, [r5, #-8]
   1c3b4:	bl	11960 <fwrite_unlocked@plt>
   1c3b8:	ldr	r3, [r4, #3260]	; 0xcbc
   1c3bc:	cmp	r3, #0
   1c3c0:	beq	1bcd0 <__assert_fail@plt+0x9f5c>
   1c3c4:	bl	1a238 <__assert_fail@plt+0x84c4>
   1c3c8:	b	1bcd0 <__assert_fail@plt+0x9f5c>
   1c3cc:	ldr	r2, [sp, #20]
   1c3d0:	ldr	r3, [r2, #-4072]	; 0xfffff018
   1c3d4:	cmp	r3, #0
   1c3d8:	moveq	r3, #1
   1c3dc:	streq	r3, [r2, #-4072]	; 0xfffff018
   1c3e0:	b	1c2a4 <__assert_fail@plt+0xa530>
   1c3e4:	ldr	r3, [pc, #664]	; 1c684 <__assert_fail@plt+0xa910>
   1c3e8:	str	r3, [sp, #20]
   1c3ec:	b	1bdac <__assert_fail@plt+0xa038>
   1c3f0:	ldrd	r2, [r5, #-8]
   1c3f4:	ldr	r6, [r8]
   1c3f8:	adds	r2, r2, #2
   1c3fc:	ldr	r1, [r6, #20]
   1c400:	ldr	r0, [r6, #24]
   1c404:	adc	r3, r3, #0
   1c408:	cmp	r0, r1
   1c40c:	strd	r2, [r5, #-8]
   1c410:	bls	1c604 <__assert_fail@plt+0xa890>
   1c414:	add	r2, r1, #1
   1c418:	mov	r3, #32
   1c41c:	str	r2, [r6, #20]
   1c420:	strb	r3, [r1]
   1c424:	ldr	r3, [r6, #20]
   1c428:	ldr	r2, [r6, #24]
   1c42c:	cmp	r2, r3
   1c430:	bls	1c5f4 <__assert_fail@plt+0xa880>
   1c434:	add	r1, r3, #1
   1c438:	mov	r2, #32
   1c43c:	str	r1, [r6, #20]
   1c440:	strb	r2, [r3]
   1c444:	b	1be74 <__assert_fail@plt+0xa100>
   1c448:	mov	r1, #2
   1c44c:	ldr	r0, [sp, #40]	; 0x28
   1c450:	bl	1d4e4 <__assert_fail@plt+0xb770>
   1c454:	subs	r6, r0, #0
   1c458:	bne	1be88 <__assert_fail@plt+0xa114>
   1c45c:	mov	r2, #5
   1c460:	ldr	r1, [pc, #592]	; 1c6b8 <__assert_fail@plt+0xa944>
   1c464:	bl	11984 <dcgettext@plt>
   1c468:	ldr	r3, [sp, #24]
   1c46c:	ldr	r1, [sp, #40]	; 0x28
   1c470:	ldr	r7, [r3]
   1c474:	mov	r9, r0
   1c478:	mov	r0, #4
   1c47c:	bl	26b3c <_obstack_memory_used@@Base+0x2590>
   1c480:	mov	r2, r9
   1c484:	mov	r1, r7
   1c488:	mov	r3, r0
   1c48c:	mov	r0, r6
   1c490:	bl	11a8c <error@plt>
   1c494:	ldr	r3, [sp, #44]	; 0x2c
   1c498:	cmp	r3, #0
   1c49c:	beq	1c638 <__assert_fail@plt+0xa8c4>
   1c4a0:	ldr	r2, [sp, #20]
   1c4a4:	mov	r3, #2
   1c4a8:	str	r3, [r2, #-4072]	; 0xfffff018
   1c4ac:	b	1be88 <__assert_fail@plt+0xa114>
   1c4b0:	ldr	r0, [sp, #40]	; 0x28
   1c4b4:	mov	r1, #0
   1c4b8:	bl	163f8 <__assert_fail@plt+0x4684>
   1c4bc:	b	1c2d8 <__assert_fail@plt+0xa564>
   1c4c0:	mov	r2, #5
   1c4c4:	ldr	r1, [pc, #496]	; 1c6bc <__assert_fail@plt+0xa948>
   1c4c8:	mov	r0, #0
   1c4cc:	bl	11984 <dcgettext@plt>
   1c4d0:	ldr	r3, [sp, #24]
   1c4d4:	ldr	r1, [sp, #40]	; 0x28
   1c4d8:	ldr	r5, [r3]
   1c4dc:	mov	r6, r0
   1c4e0:	mov	r0, #4
   1c4e4:	bl	26b3c <_obstack_memory_used@@Base+0x2590>
   1c4e8:	mov	r2, r6
   1c4ec:	mov	r1, r5
   1c4f0:	mov	r3, r0
   1c4f4:	mov	r0, #0
   1c4f8:	bl	11a8c <error@plt>
   1c4fc:	ldr	r3, [sp, #44]	; 0x2c
   1c500:	cmp	r3, #0
   1c504:	beq	1c574 <__assert_fail@plt+0xa800>
   1c508:	ldr	r2, [sp, #20]
   1c50c:	mov	r3, #2
   1c510:	str	r3, [r2, #-4072]	; 0xfffff018
   1c514:	b	1c2c4 <__assert_fail@plt+0xa550>
   1c518:	mov	r2, #5
   1c51c:	ldr	r1, [pc, #412]	; 1c6c0 <__assert_fail@plt+0xa94c>
   1c520:	bl	11984 <dcgettext@plt>
   1c524:	ldr	r3, [sp, #24]
   1c528:	ldr	r1, [sp, #40]	; 0x28
   1c52c:	ldr	r4, [r3]
   1c530:	mov	r5, r0
   1c534:	mov	r0, #4
   1c538:	bl	26b3c <_obstack_memory_used@@Base+0x2590>
   1c53c:	mov	r2, r5
   1c540:	mov	r1, r4
   1c544:	mov	r3, r0
   1c548:	ldr	r0, [sp, #28]
   1c54c:	bl	11a8c <error@plt>
   1c550:	ldr	r3, [sp, #44]	; 0x2c
   1c554:	cmp	r3, #0
   1c558:	ldr	r3, [pc, #292]	; 1c684 <__assert_fail@plt+0xa910>
   1c55c:	bne	1bcc8 <__assert_fail@plt+0x9f54>
   1c560:	ldr	r2, [r3, #-4072]	; 0xfffff018
   1c564:	cmp	r2, #0
   1c568:	moveq	r2, #1
   1c56c:	streq	r2, [r3, #-4072]	; 0xfffff018
   1c570:	b	1bcd0 <__assert_fail@plt+0x9f5c>
   1c574:	ldr	r2, [sp, #20]
   1c578:	ldr	r3, [r2, #-4072]	; 0xfffff018
   1c57c:	cmp	r3, #0
   1c580:	moveq	r3, #1
   1c584:	streq	r3, [r2, #-4072]	; 0xfffff018
   1c588:	b	1c2c4 <__assert_fail@plt+0xa550>
   1c58c:	add	r5, r5, #32
   1c590:	ldr	r6, [r8]
   1c594:	ldrd	r2, [r5, #-8]
   1c598:	ldr	r0, [r6, #20]
   1c59c:	adds	r2, r2, #2
   1c5a0:	ldr	ip, [r6, #24]
   1c5a4:	adc	r3, r3, #0
   1c5a8:	cmp	r0, ip
   1c5ac:	strd	r2, [r5, #-8]
   1c5b0:	bcs	1c664 <__assert_fail@plt+0xa8f0>
   1c5b4:	add	r3, r0, #1
   1c5b8:	str	r3, [r6, #20]
   1c5bc:	strb	r1, [r0]
   1c5c0:	ldr	r3, [r6, #20]
   1c5c4:	ldr	r2, [r6, #24]
   1c5c8:	cmp	r2, r3
   1c5cc:	bls	1c654 <__assert_fail@plt+0xa8e0>
   1c5d0:	add	r1, r3, #1
   1c5d4:	mov	r2, #32
   1c5d8:	str	r1, [r6, #20]
   1c5dc:	strb	r2, [r3]
   1c5e0:	b	1c354 <__assert_fail@plt+0xa5e0>
   1c5e4:	mov	r0, r6
   1c5e8:	mov	r1, #10
   1c5ec:	bl	11c48 <__overflow@plt>
   1c5f0:	b	1bf18 <__assert_fail@plt+0xa1a4>
   1c5f4:	mov	r0, r6
   1c5f8:	mov	r1, #32
   1c5fc:	bl	11c48 <__overflow@plt>
   1c600:	b	1be74 <__assert_fail@plt+0xa100>
   1c604:	mov	r1, #32
   1c608:	mov	r0, r6
   1c60c:	bl	11c48 <__overflow@plt>
   1c610:	cmn	r0, #1
   1c614:	beq	1be74 <__assert_fail@plt+0xa100>
   1c618:	b	1c424 <__assert_fail@plt+0xa6b0>
   1c61c:	mov	r1, #58	; 0x3a
   1c620:	mov	r0, r6
   1c624:	bl	11c48 <__overflow@plt>
   1c628:	cmn	r0, #1
   1c62c:	bne	1bef8 <__assert_fail@plt+0xa184>
   1c630:	b	1bf18 <__assert_fail@plt+0xa1a4>
   1c634:	bl	29fa0 <_obstack_memory_used@@Base+0x59f4>
   1c638:	ldr	r2, [sp, #20]
   1c63c:	ldr	r3, [r2, #-4072]	; 0xfffff018
   1c640:	cmp	r3, #0
   1c644:	bne	1be84 <__assert_fail@plt+0xa110>
   1c648:	mov	r3, #1
   1c64c:	str	r3, [r2, #-4072]	; 0xfffff018
   1c650:	b	1be88 <__assert_fail@plt+0xa114>
   1c654:	mov	r0, r6
   1c658:	mov	r1, #32
   1c65c:	bl	11c48 <__overflow@plt>
   1c660:	b	1c354 <__assert_fail@plt+0xa5e0>
   1c664:	mov	r0, r6
   1c668:	bl	11c48 <__overflow@plt>
   1c66c:	cmn	r0, #1
   1c670:	beq	1c354 <__assert_fail@plt+0xa5e0>
   1c674:	b	1c5c0 <__assert_fail@plt+0xa84c>
   1c678:	andeq	r1, r4, r0, lsr r3
   1c67c:	andeq	r0, r3, r4, lsr #3
   1c680:	andeq	sp, r2, r0, lsr #18
   1c684:	andeq	r3, r4, r8, lsr #6
   1c688:	strdeq	sp, [r2], -r8
   1c68c:	andeq	r1, r4, r0, lsr #5
   1c690:	ldrdeq	r1, [r4], -r0
   1c694:	andeq	r2, r4, r0, asr #3
   1c698:	andeq	r1, r4, r4, lsr #6
   1c69c:	muleq	r4, r8, r3
   1c6a0:	andeq	r1, r4, r0, asr pc
   1c6a4:	andeq	r2, r4, r4, ror #6
   1c6a8:	andeq	ip, r2, r8, lsl #1
   1c6ac:	andeq	sp, r2, ip, asr #18
   1c6b0:	andeq	r2, r4, r0, lsr #3
   1c6b4:	andeq	sp, r2, ip, ror r9
   1c6b8:	andeq	sp, r2, ip, ror r8
   1c6bc:	andeq	sp, r2, r4, ror #18
   1c6c0:	ldrdeq	sp, [r2], -ip
   1c6c4:	subs	r4, r0, #0
   1c6c8:	push	{r7, lr}
   1c6cc:	sub	sp, sp, #56	; 0x38
   1c6d0:	beq	1c70c <__assert_fail@plt+0xa998>
   1c6d4:	ldr	r3, [pc, #1300]	; 1cbf0 <__assert_fail@plt+0xae7c>
   1c6d8:	mov	r2, #5
   1c6dc:	ldr	r1, [pc, #1296]	; 1cbf4 <__assert_fail@plt+0xae80>
   1c6e0:	mov	r0, #0
   1c6e4:	ldr	r5, [r3]
   1c6e8:	bl	11984 <dcgettext@plt>
   1c6ec:	ldr	r3, [pc, #1284]	; 1cbf8 <__assert_fail@plt+0xae84>
   1c6f0:	mov	r1, #1
   1c6f4:	ldr	r3, [r3]
   1c6f8:	mov	r2, r0
   1c6fc:	mov	r0, r5
   1c700:	bl	11c18 <__fprintf_chk@plt>
   1c704:	mov	r0, r4
   1c708:	bl	11b70 <exit@plt>
   1c70c:	mov	r2, #5
   1c710:	ldr	r1, [pc, #1252]	; 1cbfc <__assert_fail@plt+0xae88>
   1c714:	bl	11984 <dcgettext@plt>
   1c718:	ldr	r3, [pc, #1240]	; 1cbf8 <__assert_fail@plt+0xae84>
   1c71c:	ldr	r5, [pc, #1244]	; 1cc00 <__assert_fail@plt+0xae8c>
   1c720:	ldr	r2, [r3]
   1c724:	mov	r1, r0
   1c728:	mov	r0, #1
   1c72c:	bl	11bf4 <__printf_chk@plt>
   1c730:	mov	r2, #5
   1c734:	ldr	r1, [pc, #1224]	; 1cc04 <__assert_fail@plt+0xae90>
   1c738:	mov	r0, r4
   1c73c:	bl	11984 <dcgettext@plt>
   1c740:	ldr	r1, [r5]
   1c744:	bl	11864 <fputs_unlocked@plt>
   1c748:	mov	r2, #5
   1c74c:	ldr	r1, [pc, #1204]	; 1cc08 <__assert_fail@plt+0xae94>
   1c750:	mov	r0, r4
   1c754:	bl	11984 <dcgettext@plt>
   1c758:	ldr	r1, [r5]
   1c75c:	bl	11864 <fputs_unlocked@plt>
   1c760:	mov	r2, #5
   1c764:	ldr	r1, [pc, #1184]	; 1cc0c <__assert_fail@plt+0xae98>
   1c768:	mov	r0, r4
   1c76c:	bl	11984 <dcgettext@plt>
   1c770:	ldr	r1, [r5]
   1c774:	bl	11864 <fputs_unlocked@plt>
   1c778:	mov	r2, #5
   1c77c:	ldr	r1, [pc, #1164]	; 1cc10 <__assert_fail@plt+0xae9c>
   1c780:	mov	r0, r4
   1c784:	bl	11984 <dcgettext@plt>
   1c788:	ldr	r1, [r5]
   1c78c:	bl	11864 <fputs_unlocked@plt>
   1c790:	mov	r2, #5
   1c794:	ldr	r1, [pc, #1144]	; 1cc14 <__assert_fail@plt+0xaea0>
   1c798:	mov	r0, r4
   1c79c:	bl	11984 <dcgettext@plt>
   1c7a0:	ldr	r1, [r5]
   1c7a4:	bl	11864 <fputs_unlocked@plt>
   1c7a8:	mov	r2, #5
   1c7ac:	ldr	r1, [pc, #1124]	; 1cc18 <__assert_fail@plt+0xaea4>
   1c7b0:	mov	r0, r4
   1c7b4:	bl	11984 <dcgettext@plt>
   1c7b8:	ldr	r1, [r5]
   1c7bc:	bl	11864 <fputs_unlocked@plt>
   1c7c0:	mov	r2, #5
   1c7c4:	ldr	r1, [pc, #1104]	; 1cc1c <__assert_fail@plt+0xaea8>
   1c7c8:	mov	r0, r4
   1c7cc:	bl	11984 <dcgettext@plt>
   1c7d0:	ldr	r1, [r5]
   1c7d4:	bl	11864 <fputs_unlocked@plt>
   1c7d8:	mov	r2, #5
   1c7dc:	ldr	r1, [pc, #1084]	; 1cc20 <__assert_fail@plt+0xaeac>
   1c7e0:	mov	r0, r4
   1c7e4:	bl	11984 <dcgettext@plt>
   1c7e8:	ldr	r1, [r5]
   1c7ec:	bl	11864 <fputs_unlocked@plt>
   1c7f0:	mov	r2, #5
   1c7f4:	ldr	r1, [pc, #1064]	; 1cc24 <__assert_fail@plt+0xaeb0>
   1c7f8:	mov	r0, r4
   1c7fc:	bl	11984 <dcgettext@plt>
   1c800:	ldr	r1, [r5]
   1c804:	bl	11864 <fputs_unlocked@plt>
   1c808:	mov	r2, #5
   1c80c:	ldr	r1, [pc, #1044]	; 1cc28 <__assert_fail@plt+0xaeb4>
   1c810:	mov	r0, r4
   1c814:	bl	11984 <dcgettext@plt>
   1c818:	ldr	r1, [r5]
   1c81c:	bl	11864 <fputs_unlocked@plt>
   1c820:	mov	r2, #5
   1c824:	ldr	r1, [pc, #1024]	; 1cc2c <__assert_fail@plt+0xaeb8>
   1c828:	mov	r0, r4
   1c82c:	bl	11984 <dcgettext@plt>
   1c830:	ldr	r1, [r5]
   1c834:	bl	11864 <fputs_unlocked@plt>
   1c838:	mov	r2, #5
   1c83c:	ldr	r1, [pc, #1004]	; 1cc30 <__assert_fail@plt+0xaebc>
   1c840:	mov	r0, r4
   1c844:	bl	11984 <dcgettext@plt>
   1c848:	ldr	r1, [r5]
   1c84c:	bl	11864 <fputs_unlocked@plt>
   1c850:	mov	r2, #5
   1c854:	ldr	r1, [pc, #984]	; 1cc34 <__assert_fail@plt+0xaec0>
   1c858:	mov	r0, r4
   1c85c:	bl	11984 <dcgettext@plt>
   1c860:	ldr	r1, [r5]
   1c864:	bl	11864 <fputs_unlocked@plt>
   1c868:	mov	r2, #5
   1c86c:	ldr	r1, [pc, #964]	; 1cc38 <__assert_fail@plt+0xaec4>
   1c870:	mov	r0, r4
   1c874:	bl	11984 <dcgettext@plt>
   1c878:	ldr	r1, [r5]
   1c87c:	bl	11864 <fputs_unlocked@plt>
   1c880:	mov	r2, #5
   1c884:	ldr	r1, [pc, #944]	; 1cc3c <__assert_fail@plt+0xaec8>
   1c888:	mov	r0, r4
   1c88c:	bl	11984 <dcgettext@plt>
   1c890:	ldr	r1, [r5]
   1c894:	bl	11864 <fputs_unlocked@plt>
   1c898:	mov	r2, #5
   1c89c:	ldr	r1, [pc, #924]	; 1cc40 <__assert_fail@plt+0xaecc>
   1c8a0:	mov	r0, r4
   1c8a4:	bl	11984 <dcgettext@plt>
   1c8a8:	ldr	r1, [r5]
   1c8ac:	bl	11864 <fputs_unlocked@plt>
   1c8b0:	mov	r2, #5
   1c8b4:	ldr	r1, [pc, #904]	; 1cc44 <__assert_fail@plt+0xaed0>
   1c8b8:	mov	r0, r4
   1c8bc:	bl	11984 <dcgettext@plt>
   1c8c0:	ldr	r1, [r5]
   1c8c4:	bl	11864 <fputs_unlocked@plt>
   1c8c8:	mov	r2, #5
   1c8cc:	ldr	r1, [pc, #884]	; 1cc48 <__assert_fail@plt+0xaed4>
   1c8d0:	mov	r0, r4
   1c8d4:	bl	11984 <dcgettext@plt>
   1c8d8:	ldr	r1, [r5]
   1c8dc:	bl	11864 <fputs_unlocked@plt>
   1c8e0:	mov	r2, #5
   1c8e4:	ldr	r1, [pc, #864]	; 1cc4c <__assert_fail@plt+0xaed8>
   1c8e8:	mov	r0, r4
   1c8ec:	bl	11984 <dcgettext@plt>
   1c8f0:	ldr	r1, [r5]
   1c8f4:	bl	11864 <fputs_unlocked@plt>
   1c8f8:	mov	r2, #5
   1c8fc:	ldr	r1, [pc, #844]	; 1cc50 <__assert_fail@plt+0xaedc>
   1c900:	mov	r0, r4
   1c904:	bl	11984 <dcgettext@plt>
   1c908:	ldr	r1, [r5]
   1c90c:	bl	11864 <fputs_unlocked@plt>
   1c910:	mov	r2, #5
   1c914:	ldr	r1, [pc, #824]	; 1cc54 <__assert_fail@plt+0xaee0>
   1c918:	mov	r0, r4
   1c91c:	bl	11984 <dcgettext@plt>
   1c920:	ldr	r1, [r5]
   1c924:	bl	11864 <fputs_unlocked@plt>
   1c928:	mov	r2, #5
   1c92c:	ldr	r1, [pc, #804]	; 1cc58 <__assert_fail@plt+0xaee4>
   1c930:	mov	r0, r4
   1c934:	bl	11984 <dcgettext@plt>
   1c938:	ldr	r1, [r5]
   1c93c:	bl	11864 <fputs_unlocked@plt>
   1c940:	mov	r2, #5
   1c944:	ldr	r1, [pc, #784]	; 1cc5c <__assert_fail@plt+0xaee8>
   1c948:	mov	r0, r4
   1c94c:	bl	11984 <dcgettext@plt>
   1c950:	ldr	r1, [r5]
   1c954:	bl	11864 <fputs_unlocked@plt>
   1c958:	mov	r2, #5
   1c95c:	ldr	r1, [pc, #764]	; 1cc60 <__assert_fail@plt+0xaeec>
   1c960:	mov	r0, r4
   1c964:	bl	11984 <dcgettext@plt>
   1c968:	ldr	r1, [r5]
   1c96c:	bl	11864 <fputs_unlocked@plt>
   1c970:	mov	r2, #5
   1c974:	ldr	r1, [pc, #744]	; 1cc64 <__assert_fail@plt+0xaef0>
   1c978:	mov	r0, r4
   1c97c:	bl	11984 <dcgettext@plt>
   1c980:	ldr	r1, [r5]
   1c984:	bl	11864 <fputs_unlocked@plt>
   1c988:	mov	r2, #5
   1c98c:	ldr	r1, [pc, #724]	; 1cc68 <__assert_fail@plt+0xaef4>
   1c990:	mov	r0, r4
   1c994:	bl	11984 <dcgettext@plt>
   1c998:	ldr	r1, [r5]
   1c99c:	bl	11864 <fputs_unlocked@plt>
   1c9a0:	mov	r2, #5
   1c9a4:	ldr	r1, [pc, #704]	; 1cc6c <__assert_fail@plt+0xaef8>
   1c9a8:	mov	r0, r4
   1c9ac:	bl	11984 <dcgettext@plt>
   1c9b0:	ldr	r1, [r5]
   1c9b4:	bl	11864 <fputs_unlocked@plt>
   1c9b8:	mov	r2, #5
   1c9bc:	ldr	r1, [pc, #684]	; 1cc70 <__assert_fail@plt+0xaefc>
   1c9c0:	mov	r0, r4
   1c9c4:	bl	11984 <dcgettext@plt>
   1c9c8:	ldr	r1, [r5]
   1c9cc:	bl	11864 <fputs_unlocked@plt>
   1c9d0:	mov	r2, #5
   1c9d4:	ldr	r1, [pc, #664]	; 1cc74 <__assert_fail@plt+0xaf00>
   1c9d8:	mov	r0, r4
   1c9dc:	bl	11984 <dcgettext@plt>
   1c9e0:	ldr	r1, [r5]
   1c9e4:	bl	11864 <fputs_unlocked@plt>
   1c9e8:	mov	r2, #5
   1c9ec:	ldr	r1, [pc, #644]	; 1cc78 <__assert_fail@plt+0xaf04>
   1c9f0:	mov	r0, r4
   1c9f4:	bl	11984 <dcgettext@plt>
   1c9f8:	ldr	r1, [r5]
   1c9fc:	bl	11864 <fputs_unlocked@plt>
   1ca00:	mov	r2, #5
   1ca04:	ldr	r1, [pc, #624]	; 1cc7c <__assert_fail@plt+0xaf08>
   1ca08:	mov	r0, r4
   1ca0c:	bl	11984 <dcgettext@plt>
   1ca10:	ldr	r1, [r5]
   1ca14:	bl	11864 <fputs_unlocked@plt>
   1ca18:	ldr	r3, [pc, #608]	; 1cc80 <__assert_fail@plt+0xaf0c>
   1ca1c:	ldr	r3, [r3]
   1ca20:	cmp	r3, #1
   1ca24:	beq	1cb44 <__assert_fail@plt+0xadd0>
   1ca28:	ldr	r2, [pc, #596]	; 1cc84 <__assert_fail@plt+0xaf10>
   1ca2c:	cmp	r3, #2
   1ca30:	ldr	r7, [pc, #592]	; 1cc88 <__assert_fail@plt+0xaf14>
   1ca34:	movne	r7, r2
   1ca38:	ldr	r6, [pc, #588]	; 1cc8c <__assert_fail@plt+0xaf18>
   1ca3c:	mov	lr, sp
   1ca40:	ldm	r6!, {r0, r1, r2, r3}
   1ca44:	stmia	lr!, {r0, r1, r2, r3}
   1ca48:	ldm	r6!, {r0, r1, r2, r3}
   1ca4c:	ldr	ip, [sp]
   1ca50:	stmia	lr!, {r0, r1, r2, r3}
   1ca54:	cmp	ip, #0
   1ca58:	ldm	r6!, {r0, r1, r2, r3}
   1ca5c:	stmia	lr!, {r0, r1, r2, r3}
   1ca60:	ldm	r6, {r0, r1}
   1ca64:	mov	r6, sp
   1ca68:	stm	lr, {r0, r1}
   1ca6c:	bne	1ca80 <__assert_fail@plt+0xad0c>
   1ca70:	b	1ca94 <__assert_fail@plt+0xad20>
   1ca74:	ldr	ip, [r6, #8]!
   1ca78:	cmp	ip, #0
   1ca7c:	beq	1ca94 <__assert_fail@plt+0xad20>
   1ca80:	mov	r1, ip
   1ca84:	mov	r0, r7
   1ca88:	bl	118a0 <strcmp@plt>
   1ca8c:	cmp	r0, #0
   1ca90:	bne	1ca74 <__assert_fail@plt+0xad00>
   1ca94:	ldr	r6, [r6, #4]
   1ca98:	mov	r2, #5
   1ca9c:	cmp	r6, #0
   1caa0:	ldr	r1, [pc, #488]	; 1cc90 <__assert_fail@plt+0xaf1c>
   1caa4:	beq	1cb4c <__assert_fail@plt+0xadd8>
   1caa8:	mov	r0, #0
   1caac:	bl	11984 <dcgettext@plt>
   1cab0:	ldr	r3, [pc, #476]	; 1cc94 <__assert_fail@plt+0xaf20>
   1cab4:	ldr	r2, [pc, #476]	; 1cc98 <__assert_fail@plt+0xaf24>
   1cab8:	mov	r1, r0
   1cabc:	mov	r0, #1
   1cac0:	bl	11bf4 <__printf_chk@plt>
   1cac4:	mov	r1, #0
   1cac8:	mov	r0, #5
   1cacc:	bl	11c54 <setlocale@plt>
   1cad0:	cmp	r0, #0
   1cad4:	beq	1caec <__assert_fail@plt+0xad78>
   1cad8:	mov	r2, #3
   1cadc:	ldr	r1, [pc, #440]	; 1cc9c <__assert_fail@plt+0xaf28>
   1cae0:	bl	11d20 <strncmp@plt>
   1cae4:	cmp	r0, #0
   1cae8:	bne	1cb94 <__assert_fail@plt+0xae20>
   1caec:	mov	r2, #5
   1caf0:	ldr	r1, [pc, #424]	; 1cca0 <__assert_fail@plt+0xaf2c>
   1caf4:	mov	r0, #0
   1caf8:	bl	11984 <dcgettext@plt>
   1cafc:	mov	r3, r7
   1cb00:	ldr	r2, [pc, #396]	; 1cc94 <__assert_fail@plt+0xaf20>
   1cb04:	mov	r1, r0
   1cb08:	mov	r0, #1
   1cb0c:	bl	11bf4 <__printf_chk@plt>
   1cb10:	mov	r2, #5
   1cb14:	ldr	r1, [pc, #392]	; 1cca4 <__assert_fail@plt+0xaf30>
   1cb18:	mov	r0, #0
   1cb1c:	bl	11984 <dcgettext@plt>
   1cb20:	ldr	r2, [pc, #384]	; 1cca8 <__assert_fail@plt+0xaf34>
   1cb24:	cmp	r7, r6
   1cb28:	ldr	r3, [pc, #380]	; 1ccac <__assert_fail@plt+0xaf38>
   1cb2c:	movne	r3, r2
   1cb30:	mov	r1, r0
   1cb34:	mov	r2, r6
   1cb38:	mov	r0, #1
   1cb3c:	bl	11bf4 <__printf_chk@plt>
   1cb40:	b	1c704 <__assert_fail@plt+0xa990>
   1cb44:	ldr	r7, [pc, #356]	; 1ccb0 <__assert_fail@plt+0xaf3c>
   1cb48:	b	1ca38 <__assert_fail@plt+0xacc4>
   1cb4c:	mov	r0, r6
   1cb50:	bl	11984 <dcgettext@plt>
   1cb54:	ldr	r3, [pc, #312]	; 1cc94 <__assert_fail@plt+0xaf20>
   1cb58:	ldr	r2, [pc, #312]	; 1cc98 <__assert_fail@plt+0xaf24>
   1cb5c:	mov	r1, r0
   1cb60:	mov	r0, #1
   1cb64:	bl	11bf4 <__printf_chk@plt>
   1cb68:	mov	r1, r6
   1cb6c:	mov	r0, #5
   1cb70:	bl	11c54 <setlocale@plt>
   1cb74:	cmp	r0, #0
   1cb78:	beq	1cbb0 <__assert_fail@plt+0xae3c>
   1cb7c:	mov	r2, #3
   1cb80:	ldr	r1, [pc, #276]	; 1cc9c <__assert_fail@plt+0xaf28>
   1cb84:	bl	11d20 <strncmp@plt>
   1cb88:	cmp	r0, #0
   1cb8c:	beq	1cbb0 <__assert_fail@plt+0xae3c>
   1cb90:	mov	r6, r7
   1cb94:	mov	r2, #5
   1cb98:	ldr	r1, [pc, #276]	; 1ccb4 <__assert_fail@plt+0xaf40>
   1cb9c:	mov	r0, #0
   1cba0:	bl	11984 <dcgettext@plt>
   1cba4:	ldr	r1, [r5]
   1cba8:	bl	11864 <fputs_unlocked@plt>
   1cbac:	b	1caec <__assert_fail@plt+0xad78>
   1cbb0:	mov	r2, #5
   1cbb4:	ldr	r1, [pc, #228]	; 1cca0 <__assert_fail@plt+0xaf2c>
   1cbb8:	bl	11984 <dcgettext@plt>
   1cbbc:	mov	r3, r7
   1cbc0:	ldr	r2, [pc, #204]	; 1cc94 <__assert_fail@plt+0xaf20>
   1cbc4:	mov	r1, r0
   1cbc8:	mov	r0, #1
   1cbcc:	bl	11bf4 <__printf_chk@plt>
   1cbd0:	mov	r0, r6
   1cbd4:	ldr	r1, [pc, #200]	; 1cca4 <__assert_fail@plt+0xaf30>
   1cbd8:	mov	r2, #5
   1cbdc:	bl	11984 <dcgettext@plt>
   1cbe0:	mov	r6, r7
   1cbe4:	ldr	r3, [pc, #192]	; 1ccac <__assert_fail@plt+0xaf38>
   1cbe8:	mov	r1, r0
   1cbec:	b	1cb34 <__assert_fail@plt+0xadc0>
   1cbf0:	andeq	r1, r4, r0, lsr #6
   1cbf4:	muleq	r2, r0, r9
   1cbf8:	andeq	r2, r4, ip, ror #7
   1cbfc:			; <UNDEFINED> instruction: 0x0002d9b8
   1cc00:	andeq	r1, r4, r4, lsr #6
   1cc04:	ldrdeq	sp, [r2], -ip
   1cc08:	andeq	sp, r2, ip, ror #20
   1cc0c:			; <UNDEFINED> instruction: 0x0002dab8
   1cc10:	andeq	sp, r2, r8, asr #23
   1cc14:	andeq	sp, r2, r4, ror #24
   1cc18:	ldrdeq	sp, [r2], -r0
   1cc1c:	andeq	sp, r2, r4, ror #29
   1cc20:	andeq	lr, r2, r4, lsl #1
   1cc24:	andeq	lr, r2, r4, asr #1
   1cc28:			; <UNDEFINED> instruction: 0x0002e1bc
   1cc2c:	andeq	lr, r2, r8, lsl #4
   1cc30:	andeq	lr, r2, r0, lsr #5
   1cc34:	andeq	lr, r2, r8, asr #8
   1cc38:	andeq	lr, r2, r0, lsl #9
   1cc3c:	andeq	lr, r2, r4, ror #11
   1cc40:	andeq	lr, r2, r0, lsl #13
   1cc44:	andeq	lr, r2, r8, ror #15
   1cc48:	andeq	lr, r2, r8, lsl r9
   1cc4c:	andeq	lr, r2, r4, ror #22
   1cc50:	andeq	lr, r2, ip, lsr #24
   1cc54:			; <UNDEFINED> instruction: 0x0002eeb0
   1cc58:	andeq	lr, r2, r0, lsl #30
   1cc5c:	muleq	r2, r0, pc	; <UNPREDICTABLE>
   1cc60:	andeq	pc, r2, r4, lsl #2
   1cc64:	muleq	r2, ip, r2
   1cc68:	andeq	pc, r2, ip, asr #5
   1cc6c:	andeq	pc, r2, r4, lsl #6
   1cc70:	ldrdeq	pc, [r2], -r8
   1cc74:	andeq	pc, r2, r0, asr r5	; <UNPREDICTABLE>
   1cc78:	muleq	r2, ip, r5
   1cc7c:			; <UNDEFINED> instruction: 0x0002f6bc
   1cc80:			; <UNDEFINED> instruction: 0x000412b8
   1cc84:	andeq	sp, r2, r4, lsl #19
   1cc88:	strdeq	pc, [r2], -r8
   1cc8c:	andeq	ip, r2, r0, asr r2
   1cc90:	andeq	pc, r2, r4, asr r7	; <UNPREDICTABLE>
   1cc94:	andeq	pc, r2, ip, ror #14
   1cc98:	muleq	r2, r4, r7
   1cc9c:	andeq	pc, r2, r4, lsr #15
   1cca0:	strdeq	pc, [r2], -r0
   1cca4:	andeq	pc, r2, ip, lsl #16
   1cca8:	andeq	r0, r3, r4, lsr #3
   1ccac:	muleq	r2, ip, ip
   1ccb0:	andeq	sp, r2, ip, lsl #19
   1ccb4:	andeq	pc, r2, r8, lsr #15
   1ccb8:	push	{r4, r5, r6, r7, r8, lr}
   1ccbc:	subs	r7, r1, #0
   1ccc0:	sub	sp, sp, #128	; 0x80
   1ccc4:	mov	r8, r0
   1ccc8:	moveq	r4, #128	; 0x80
   1cccc:	beq	1cce0 <__assert_fail@plt+0xaf6c>
   1ccd0:	cmp	r7, #1024	; 0x400
   1ccd4:	addls	r4, r7, #1
   1ccd8:	ldrhi	r4, [pc, #284]	; 1cdfc <__assert_fail@plt+0xb088>
   1ccdc:	mov	r7, #1
   1cce0:	cmp	r4, #128	; 0x80
   1cce4:	moveq	r0, r7
   1cce8:	orrne	r0, r7, #1
   1ccec:	cmp	r0, #0
   1ccf0:	moveq	r5, r0
   1ccf4:	moveq	r6, sp
   1ccf8:	bne	1cd40 <__assert_fail@plt+0xafcc>
   1ccfc:	mov	r1, r6
   1cd00:	mov	r2, r4
   1cd04:	mov	r0, r8
   1cd08:	bl	11a08 <readlink@plt>
   1cd0c:	subs	r1, r0, #0
   1cd10:	mov	r0, r5
   1cd14:	blt	1cd6c <__assert_fail@plt+0xaff8>
   1cd18:	cmp	r4, r1
   1cd1c:	bhi	1cd80 <__assert_fail@plt+0xb00c>
   1cd20:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   1cd24:	cmn	r4, #-1073741823	; 0xc0000001
   1cd28:	lslls	r4, r4, #1
   1cd2c:	bls	1cce0 <__assert_fail@plt+0xaf6c>
   1cd30:	cmn	r4, #-2147483646	; 0x80000002
   1cd34:	bhi	1cdb8 <__assert_fail@plt+0xb044>
   1cd38:	mvn	r4, #-2147483648	; 0x80000000
   1cd3c:	b	1cce0 <__assert_fail@plt+0xaf6c>
   1cd40:	mov	r0, r4
   1cd44:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   1cd48:	subs	r6, r0, #0
   1cd4c:	mov	r5, r6
   1cd50:	bne	1ccfc <__assert_fail@plt+0xaf88>
   1cd54:	bl	11bb8 <__errno_location@plt>
   1cd58:	mov	r3, #12
   1cd5c:	str	r3, [r0]
   1cd60:	mov	r0, r5
   1cd64:	add	sp, sp, #128	; 0x80
   1cd68:	pop	{r4, r5, r6, r7, r8, pc}
   1cd6c:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   1cd70:	mov	r5, #0
   1cd74:	mov	r0, r5
   1cd78:	add	sp, sp, #128	; 0x80
   1cd7c:	pop	{r4, r5, r6, r7, r8, pc}
   1cd80:	mov	r3, #0
   1cd84:	cmp	r5, #0
   1cd88:	strb	r3, [r6, r1]
   1cd8c:	beq	1cdd4 <__assert_fail@plt+0xb060>
   1cd90:	add	r1, r1, #1
   1cd94:	cmp	r4, r1
   1cd98:	bls	1cd74 <__assert_fail@plt+0xb000>
   1cd9c:	mov	r0, r5
   1cda0:	bl	2b238 <_obstack_memory_used@@Base+0x6c8c>
   1cda4:	cmp	r0, #0
   1cda8:	movne	r5, r0
   1cdac:	mov	r0, r5
   1cdb0:	add	sp, sp, #128	; 0x80
   1cdb4:	pop	{r4, r5, r6, r7, r8, pc}
   1cdb8:	bl	11bb8 <__errno_location@plt>
   1cdbc:	mov	r5, #0
   1cdc0:	mov	r3, #12
   1cdc4:	str	r3, [r0]
   1cdc8:	mov	r0, r5
   1cdcc:	add	sp, sp, #128	; 0x80
   1cdd0:	pop	{r4, r5, r6, r7, r8, pc}
   1cdd4:	add	r4, r1, #1
   1cdd8:	mov	r0, r4
   1cddc:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   1cde0:	subs	r5, r0, #0
   1cde4:	beq	1cd74 <__assert_fail@plt+0xb000>
   1cde8:	mov	r2, r4
   1cdec:	mov	r1, r6
   1cdf0:	bl	11930 <memcpy@plt>
   1cdf4:	mov	r5, r0
   1cdf8:	b	1cd74 <__assert_fail@plt+0xb000>
   1cdfc:	andeq	r0, r0, r1, lsl #8
   1ce00:	mov	r0, #1
   1ce04:	b	1c6c4 <__assert_fail@plt+0xa950>
   1ce08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce0c:	mov	r4, r1
   1ce10:	sub	sp, sp, #12
   1ce14:	mov	r5, r2
   1ce18:	str	r2, [sp, #4]
   1ce1c:	mov	r7, r3
   1ce20:	mov	sl, r0
   1ce24:	bl	11b94 <strlen@plt>
   1ce28:	ldr	fp, [r4]
   1ce2c:	cmp	fp, #0
   1ce30:	beq	1cf44 <__assert_fail@plt+0xb1d0>
   1ce34:	cmp	r5, #0
   1ce38:	mov	r8, r0
   1ce3c:	mov	r3, r5
   1ce40:	beq	1ceec <__assert_fail@plt+0xb178>
   1ce44:	mov	r2, #0
   1ce48:	mov	r5, r2
   1ce4c:	mov	r6, r3
   1ce50:	mvn	r9, #0
   1ce54:	str	r2, [sp]
   1ce58:	mov	r2, r8
   1ce5c:	mov	r1, sl
   1ce60:	mov	r0, fp
   1ce64:	bl	11d20 <strncmp@plt>
   1ce68:	cmp	r0, #0
   1ce6c:	mov	r0, fp
   1ce70:	bne	1ceb0 <__assert_fail@plt+0xb13c>
   1ce74:	bl	11b94 <strlen@plt>
   1ce78:	ldr	r3, [sp, #4]
   1ce7c:	mov	r2, r7
   1ce80:	mov	r1, r6
   1ce84:	cmp	r8, r0
   1ce88:	mla	r0, r7, r9, r3
   1ce8c:	beq	1cedc <__assert_fail@plt+0xb168>
   1ce90:	cmn	r9, #1
   1ce94:	moveq	r9, r5
   1ce98:	beq	1ceb0 <__assert_fail@plt+0xb13c>
   1ce9c:	bl	1196c <memcmp@plt>
   1cea0:	ldr	r3, [sp]
   1cea4:	cmp	r0, #0
   1cea8:	movne	r3, #1
   1ceac:	str	r3, [sp]
   1ceb0:	ldr	fp, [r4, #4]!
   1ceb4:	add	r5, r5, #1
   1ceb8:	cmp	fp, #0
   1cebc:	add	r6, r6, r7
   1cec0:	bne	1ce58 <__assert_fail@plt+0xb0e4>
   1cec4:	ldr	r3, [sp]
   1cec8:	cmp	r3, #0
   1cecc:	mvnne	r9, #1
   1ced0:	mov	r0, r9
   1ced4:	add	sp, sp, #12
   1ced8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cedc:	mov	r9, r5
   1cee0:	mov	r0, r9
   1cee4:	add	sp, sp, #12
   1cee8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ceec:	mov	r6, r5
   1cef0:	mvn	r9, #0
   1cef4:	mov	r2, r8
   1cef8:	mov	r1, sl
   1cefc:	mov	r0, fp
   1cf00:	bl	11d20 <strncmp@plt>
   1cf04:	cmp	r0, #0
   1cf08:	mov	r0, fp
   1cf0c:	bne	1cf28 <__assert_fail@plt+0xb1b4>
   1cf10:	bl	11b94 <strlen@plt>
   1cf14:	cmp	r8, r0
   1cf18:	beq	1cedc <__assert_fail@plt+0xb168>
   1cf1c:	cmn	r9, #1
   1cf20:	moveq	r9, r5
   1cf24:	movne	r6, #1
   1cf28:	ldr	fp, [r4, #4]!
   1cf2c:	add	r5, r5, #1
   1cf30:	cmp	fp, #0
   1cf34:	bne	1cef4 <__assert_fail@plt+0xb180>
   1cf38:	str	r6, [sp]
   1cf3c:	mov	r3, r6
   1cf40:	b	1cec8 <__assert_fail@plt+0xb154>
   1cf44:	mvn	r9, #0
   1cf48:	b	1ced0 <__assert_fail@plt+0xb15c>
   1cf4c:	push	{r4, r5, r6, lr}
   1cf50:	mov	r6, r0
   1cf54:	ldr	r0, [r1]
   1cf58:	cmp	r0, #0
   1cf5c:	beq	1cf94 <__assert_fail@plt+0xb220>
   1cf60:	mov	r4, r1
   1cf64:	mov	r5, #0
   1cf68:	b	1cf7c <__assert_fail@plt+0xb208>
   1cf6c:	ldr	r0, [r4, #4]!
   1cf70:	add	r5, r5, #1
   1cf74:	cmp	r0, #0
   1cf78:	beq	1cf94 <__assert_fail@plt+0xb220>
   1cf7c:	mov	r1, r6
   1cf80:	bl	118a0 <strcmp@plt>
   1cf84:	cmp	r0, #0
   1cf88:	bne	1cf6c <__assert_fail@plt+0xb1f8>
   1cf8c:	mov	r0, r5
   1cf90:	pop	{r4, r5, r6, pc}
   1cf94:	mvn	r0, #0
   1cf98:	pop	{r4, r5, r6, pc}
   1cf9c:	cmn	r2, #1
   1cfa0:	push	{r4, r5, r6, lr}
   1cfa4:	mov	r2, #5
   1cfa8:	sub	sp, sp, #8
   1cfac:	mov	r4, r1
   1cfb0:	mov	r5, r0
   1cfb4:	ldreq	r1, [pc, #76]	; 1d008 <__assert_fail@plt+0xb294>
   1cfb8:	ldrne	r1, [pc, #76]	; 1d00c <__assert_fail@plt+0xb298>
   1cfbc:	mov	r0, #0
   1cfc0:	bl	11984 <dcgettext@plt>
   1cfc4:	mov	r2, r4
   1cfc8:	mov	r1, #8
   1cfcc:	mov	r6, r0
   1cfd0:	mov	r0, #0
   1cfd4:	bl	2675c <_obstack_memory_used@@Base+0x21b0>
   1cfd8:	mov	r1, r5
   1cfdc:	mov	r4, r0
   1cfe0:	mov	r0, #1
   1cfe4:	bl	282f8 <_obstack_memory_used@@Base+0x3d4c>
   1cfe8:	mov	r1, #0
   1cfec:	mov	r3, r4
   1cff0:	mov	r2, r6
   1cff4:	str	r0, [sp]
   1cff8:	mov	r0, r1
   1cffc:	bl	11a8c <error@plt>
   1d000:	add	sp, sp, #8
   1d004:	pop	{r4, r5, r6, pc}
   1d008:	andeq	r0, r3, r0, asr #1
   1d00c:	ldrdeq	r0, [r3], -ip
   1d010:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d014:	mov	r6, r0
   1d018:	ldr	r9, [pc, #232]	; 1d108 <__assert_fail@plt+0xb394>
   1d01c:	mov	r4, r1
   1d020:	mov	r7, r2
   1d024:	ldr	r1, [pc, #224]	; 1d10c <__assert_fail@plt+0xb398>
   1d028:	mov	r2, #5
   1d02c:	mov	r0, #0
   1d030:	bl	11984 <dcgettext@plt>
   1d034:	ldr	r1, [r9]
   1d038:	bl	11864 <fputs_unlocked@plt>
   1d03c:	ldr	fp, [r6]
   1d040:	cmp	fp, #0
   1d044:	movne	r8, #0
   1d048:	movne	r5, r8
   1d04c:	movne	sl, #1
   1d050:	bne	1d090 <__assert_fail@plt+0xb31c>
   1d054:	b	1d0d4 <__assert_fail@plt+0xb360>
   1d058:	mov	r0, fp
   1d05c:	ldr	r8, [r9]
   1d060:	bl	284ac <_obstack_memory_used@@Base+0x3f00>
   1d064:	ldr	r2, [pc, #164]	; 1d110 <__assert_fail@plt+0xb39c>
   1d068:	mov	r1, sl
   1d06c:	mov	r3, r0
   1d070:	mov	r0, r8
   1d074:	bl	11c18 <__fprintf_chk@plt>
   1d078:	mov	r8, r4
   1d07c:	ldr	fp, [r6, #4]!
   1d080:	add	r5, r5, #1
   1d084:	cmp	fp, #0
   1d088:	add	r4, r4, r7
   1d08c:	beq	1d0d4 <__assert_fail@plt+0xb360>
   1d090:	cmp	r5, #0
   1d094:	mov	r1, r4
   1d098:	mov	r2, r7
   1d09c:	mov	r0, r8
   1d0a0:	beq	1d058 <__assert_fail@plt+0xb2e4>
   1d0a4:	bl	1196c <memcmp@plt>
   1d0a8:	cmp	r0, #0
   1d0ac:	bne	1d058 <__assert_fail@plt+0xb2e4>
   1d0b0:	mov	r0, fp
   1d0b4:	ldr	fp, [r9]
   1d0b8:	bl	284ac <_obstack_memory_used@@Base+0x3f00>
   1d0bc:	ldr	r2, [pc, #80]	; 1d114 <__assert_fail@plt+0xb3a0>
   1d0c0:	mov	r1, sl
   1d0c4:	mov	r3, r0
   1d0c8:	mov	r0, fp
   1d0cc:	bl	11c18 <__fprintf_chk@plt>
   1d0d0:	b	1d07c <__assert_fail@plt+0xb308>
   1d0d4:	ldr	r0, [r9]
   1d0d8:	ldr	r3, [r0, #20]
   1d0dc:	ldr	r2, [r0, #24]
   1d0e0:	cmp	r3, r2
   1d0e4:	bcs	1d0fc <__assert_fail@plt+0xb388>
   1d0e8:	add	r1, r3, #1
   1d0ec:	mov	r2, #10
   1d0f0:	str	r1, [r0, #20]
   1d0f4:	strb	r2, [r3]
   1d0f8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d0fc:	mov	r1, #10
   1d100:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d104:	b	11c48 <__overflow@plt>
   1d108:	andeq	r1, r4, r0, lsr #6
   1d10c:	strdeq	r0, [r3], -ip
   1d110:	andeq	r0, r3, r4, lsl r1
   1d114:	andeq	r0, r3, ip, lsl r1
   1d118:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d11c:	sub	sp, sp, #36	; 0x24
   1d120:	mov	r6, r1
   1d124:	ldrb	ip, [sp, #80]	; 0x50
   1d128:	str	r0, [sp, #28]
   1d12c:	str	r2, [sp, #24]
   1d130:	cmp	ip, #0
   1d134:	str	ip, [sp, #20]
   1d138:	str	r3, [sp, #12]
   1d13c:	ldr	r7, [sp, #72]	; 0x48
   1d140:	bne	1d1f8 <__assert_fail@plt+0xb484>
   1d144:	ldr	r0, [r2]
   1d148:	cmp	r0, #0
   1d14c:	movne	sl, ip
   1d150:	movne	r4, r2
   1d154:	bne	1d1dc <__assert_fail@plt+0xb468>
   1d158:	mov	r2, #5
   1d15c:	ldr	r1, [pc, #512]	; 1d364 <__assert_fail@plt+0xb5f0>
   1d160:	mov	r0, #0
   1d164:	bl	11984 <dcgettext@plt>
   1d168:	mov	r4, r0
   1d16c:	mov	r2, r6
   1d170:	mov	r1, #8
   1d174:	mov	r0, #0
   1d178:	bl	2675c <_obstack_memory_used@@Base+0x21b0>
   1d17c:	ldr	r1, [sp, #28]
   1d180:	mvn	sl, #0
   1d184:	mov	r5, r0
   1d188:	mov	r0, #1
   1d18c:	bl	282f8 <_obstack_memory_used@@Base+0x3d4c>
   1d190:	mov	r1, #0
   1d194:	mov	r3, r5
   1d198:	mov	r2, r4
   1d19c:	str	r0, [sp]
   1d1a0:	mov	r0, r1
   1d1a4:	bl	11a8c <error@plt>
   1d1a8:	ldr	r0, [sp, #24]
   1d1ac:	mov	r2, r7
   1d1b0:	ldr	r1, [sp, #12]
   1d1b4:	bl	1d010 <__assert_fail@plt+0xb29c>
   1d1b8:	ldr	r3, [sp, #76]	; 0x4c
   1d1bc:	blx	r3
   1d1c0:	mov	r0, sl
   1d1c4:	add	sp, sp, #36	; 0x24
   1d1c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d1cc:	ldr	r0, [r4, #4]!
   1d1d0:	add	sl, sl, #1
   1d1d4:	cmp	r0, #0
   1d1d8:	beq	1d158 <__assert_fail@plt+0xb3e4>
   1d1dc:	mov	r1, r6
   1d1e0:	bl	118a0 <strcmp@plt>
   1d1e4:	cmp	r0, #0
   1d1e8:	bne	1d1cc <__assert_fail@plt+0xb458>
   1d1ec:	mov	r0, sl
   1d1f0:	add	sp, sp, #36	; 0x24
   1d1f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d1f8:	mov	r0, r1
   1d1fc:	bl	11b94 <strlen@plt>
   1d200:	ldr	r3, [sp, #24]
   1d204:	ldr	fp, [r3]
   1d208:	cmp	fp, #0
   1d20c:	mov	r9, r0
   1d210:	beq	1d158 <__assert_fail@plt+0xb3e4>
   1d214:	ldr	r2, [sp, #12]
   1d218:	cmp	r2, #0
   1d21c:	beq	1d2d8 <__assert_fail@plt+0xb564>
   1d220:	mov	r1, #0
   1d224:	mov	r4, r1
   1d228:	mov	r8, r3
   1d22c:	mov	r5, r2
   1d230:	mvn	sl, #0
   1d234:	str	r1, [sp, #16]
   1d238:	mov	r2, r9
   1d23c:	mov	r1, r6
   1d240:	mov	r0, fp
   1d244:	bl	11d20 <strncmp@plt>
   1d248:	cmp	r0, #0
   1d24c:	mov	r0, fp
   1d250:	bne	1d294 <__assert_fail@plt+0xb520>
   1d254:	bl	11b94 <strlen@plt>
   1d258:	ldr	r3, [sp, #12]
   1d25c:	mov	r2, r7
   1d260:	mov	r1, r5
   1d264:	cmp	r9, r0
   1d268:	mla	r0, r7, sl, r3
   1d26c:	beq	1d2c8 <__assert_fail@plt+0xb554>
   1d270:	cmn	sl, #1
   1d274:	moveq	sl, r4
   1d278:	beq	1d294 <__assert_fail@plt+0xb520>
   1d27c:	bl	1196c <memcmp@plt>
   1d280:	ldr	r2, [sp, #20]
   1d284:	ldr	r3, [sp, #16]
   1d288:	cmp	r0, #0
   1d28c:	movne	r3, r2
   1d290:	str	r3, [sp, #16]
   1d294:	ldr	fp, [r8, #4]!
   1d298:	add	r4, r4, #1
   1d29c:	cmp	fp, #0
   1d2a0:	add	r5, r5, r7
   1d2a4:	bne	1d238 <__assert_fail@plt+0xb4c4>
   1d2a8:	ldr	r3, [sp, #16]
   1d2ac:	cmp	r3, #0
   1d2b0:	bne	1d34c <__assert_fail@plt+0xb5d8>
   1d2b4:	cmn	sl, #1
   1d2b8:	beq	1d158 <__assert_fail@plt+0xb3e4>
   1d2bc:	mov	r0, sl
   1d2c0:	add	sp, sp, #36	; 0x24
   1d2c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d2c8:	mov	sl, r4
   1d2cc:	mov	r0, sl
   1d2d0:	add	sp, sp, #36	; 0x24
   1d2d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d2d8:	mov	r5, r3
   1d2dc:	ldr	r3, [sp, #12]
   1d2e0:	str	r7, [sp, #72]	; 0x48
   1d2e4:	mov	r7, fp
   1d2e8:	ldr	fp, [sp, #20]
   1d2ec:	mov	r8, r3
   1d2f0:	mvn	sl, #0
   1d2f4:	mov	r4, r3
   1d2f8:	mov	r2, r9
   1d2fc:	mov	r1, r6
   1d300:	mov	r0, r7
   1d304:	bl	11d20 <strncmp@plt>
   1d308:	cmp	r0, #0
   1d30c:	mov	r0, r7
   1d310:	bne	1d32c <__assert_fail@plt+0xb5b8>
   1d314:	bl	11b94 <strlen@plt>
   1d318:	cmp	r9, r0
   1d31c:	beq	1d2c8 <__assert_fail@plt+0xb554>
   1d320:	cmn	sl, #1
   1d324:	moveq	sl, r4
   1d328:	movne	r8, fp
   1d32c:	ldr	r7, [r5, #4]!
   1d330:	add	r4, r4, #1
   1d334:	cmp	r7, #0
   1d338:	bne	1d2f8 <__assert_fail@plt+0xb584>
   1d33c:	str	r8, [sp, #16]
   1d340:	ldr	r7, [sp, #72]	; 0x48
   1d344:	mov	r3, r8
   1d348:	b	1d2ac <__assert_fail@plt+0xb538>
   1d34c:	mov	r2, #5
   1d350:	ldr	r1, [pc, #16]	; 1d368 <__assert_fail@plt+0xb5f4>
   1d354:	mov	r0, #0
   1d358:	bl	11984 <dcgettext@plt>
   1d35c:	mov	r4, r0
   1d360:	b	1d16c <__assert_fail@plt+0xb3f8>
   1d364:	andeq	r0, r3, r0, asr #1
   1d368:	ldrdeq	r0, [r3], -ip
   1d36c:	push	{r4, r5, r6, r7, r8, lr}
   1d370:	ldr	r7, [r1]
   1d374:	cmp	r7, #0
   1d378:	beq	1d3b8 <__assert_fail@plt+0xb644>
   1d37c:	mov	r6, r3
   1d380:	mov	r8, r0
   1d384:	mov	r4, r2
   1d388:	mov	r5, r1
   1d38c:	b	1d39c <__assert_fail@plt+0xb628>
   1d390:	ldr	r7, [r5, #4]!
   1d394:	cmp	r7, #0
   1d398:	beq	1d3b8 <__assert_fail@plt+0xb644>
   1d39c:	mov	r1, r4
   1d3a0:	mov	r2, r6
   1d3a4:	mov	r0, r8
   1d3a8:	bl	1196c <memcmp@plt>
   1d3ac:	add	r4, r4, r6
   1d3b0:	cmp	r0, #0
   1d3b4:	bne	1d390 <__assert_fail@plt+0xb61c>
   1d3b8:	mov	r0, r7
   1d3bc:	pop	{r4, r5, r6, r7, r8, pc}
   1d3c0:	ldrb	r3, [r0]
   1d3c4:	cmp	r3, #47	; 0x2f
   1d3c8:	bne	1d3d8 <__assert_fail@plt+0xb664>
   1d3cc:	ldrb	r3, [r0, #1]!
   1d3d0:	cmp	r3, #47	; 0x2f
   1d3d4:	beq	1d3cc <__assert_fail@plt+0xb658>
   1d3d8:	cmp	r3, #0
   1d3dc:	bxeq	lr
   1d3e0:	mov	r2, #0
   1d3e4:	push	{lr}		; (str lr, [sp, #-4]!)
   1d3e8:	mov	ip, r2
   1d3ec:	mov	r1, r0
   1d3f0:	mov	lr, #1
   1d3f4:	cmp	r3, #47	; 0x2f
   1d3f8:	moveq	r2, lr
   1d3fc:	beq	1d40c <__assert_fail@plt+0xb698>
   1d400:	cmp	r2, #0
   1d404:	movne	r0, r1
   1d408:	movne	r2, ip
   1d40c:	ldrb	r3, [r1, #1]!
   1d410:	cmp	r3, #0
   1d414:	bne	1d3f4 <__assert_fail@plt+0xb680>
   1d418:	pop	{pc}		; (ldr pc, [sp], #4)
   1d41c:	push	{r4, lr}
   1d420:	mov	r4, r0
   1d424:	bl	11b94 <strlen@plt>
   1d428:	cmp	r0, #1
   1d42c:	popls	{r4, pc}
   1d430:	sub	r3, r0, #1
   1d434:	add	r2, r4, r3
   1d438:	ldrb	r1, [r4, r3]
   1d43c:	cmp	r1, #47	; 0x2f
   1d440:	popne	{r4, pc}
   1d444:	cmp	r3, #1
   1d448:	beq	1d45c <__assert_fail@plt+0xb6e8>
   1d44c:	ldrb	r1, [r2, #-1]!
   1d450:	sub	r0, r3, #1
   1d454:	cmp	r1, #47	; 0x2f
   1d458:	beq	1d464 <__assert_fail@plt+0xb6f0>
   1d45c:	mov	r0, r3
   1d460:	pop	{r4, pc}
   1d464:	mov	r3, r0
   1d468:	b	1d444 <__assert_fail@plt+0xb6d0>
   1d46c:	cmp	r2, #0
   1d470:	cmpne	r0, r1
   1d474:	beq	1d4dc <__assert_fail@plt+0xb768>
   1d478:	push	{lr}		; (str lr, [sp, #-4]!)
   1d47c:	sub	r1, r1, #1
   1d480:	sub	lr, r0, #1
   1d484:	b	1d490 <__assert_fail@plt+0xb71c>
   1d488:	cmp	r0, r3
   1d48c:	bne	1d4d4 <__assert_fail@plt+0xb760>
   1d490:	ldrb	r0, [lr, #1]!
   1d494:	sub	r3, r0, #65	; 0x41
   1d498:	cmp	r3, #25
   1d49c:	ldrb	r3, [r1, #1]!
   1d4a0:	addls	r0, r0, #32
   1d4a4:	sub	ip, r3, #65	; 0x41
   1d4a8:	cmp	ip, #25
   1d4ac:	addls	r3, r3, #32
   1d4b0:	subs	r2, r2, #1
   1d4b4:	moveq	ip, #1
   1d4b8:	movne	ip, #0
   1d4bc:	uxtb	r0, r0
   1d4c0:	cmp	r0, #0
   1d4c4:	orreq	ip, ip, #1
   1d4c8:	cmp	ip, #0
   1d4cc:	uxtb	r3, r3
   1d4d0:	beq	1d488 <__assert_fail@plt+0xb714>
   1d4d4:	sub	r0, r0, r3
   1d4d8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d4dc:	mov	r0, #0
   1d4e0:	bx	lr
   1d4e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d4e8:	and	r9, r1, #3
   1d4ec:	sub	r3, r9, #1
   1d4f0:	sub	sp, sp, #3232	; 0xca0
   1d4f4:	tst	r3, r9
   1d4f8:	sub	sp, sp, #12
   1d4fc:	bne	1d6e0 <__assert_fail@plt+0xb96c>
   1d500:	cmp	r0, #0
   1d504:	mov	r8, r0
   1d508:	beq	1d6e0 <__assert_fail@plt+0xb96c>
   1d50c:	ldrb	r6, [r0]
   1d510:	cmp	r6, #0
   1d514:	beq	1d71c <__assert_fail@plt+0xb9a8>
   1d518:	add	fp, sp, #2208	; 0x8a0
   1d51c:	mov	r5, r1
   1d520:	add	r3, sp, #1184	; 0x4a0
   1d524:	mov	r1, #1024	; 0x400
   1d528:	add	fp, fp, #8
   1d52c:	add	sl, sp, #152	; 0x98
   1d530:	cmp	r6, #47	; 0x2f
   1d534:	str	r3, [sp, #1176]	; 0x498
   1d538:	str	r1, [sp, #1180]	; 0x49c
   1d53c:	str	r1, [sp, #2212]	; 0x8a4
   1d540:	str	r1, [sp, #148]	; 0x94
   1d544:	str	fp, [sp, #2208]	; 0x8a0
   1d548:	str	sl, [sp, #144]	; 0x90
   1d54c:	beq	1d5f8 <__assert_fail@plt+0xb884>
   1d550:	mov	r4, sl
   1d554:	sub	r6, sl, #8
   1d558:	mov	r0, r4
   1d55c:	bl	11b64 <getcwd@plt>
   1d560:	cmp	r0, #0
   1d564:	bne	1d898 <__assert_fail@plt+0xbb24>
   1d568:	bl	11bb8 <__errno_location@plt>
   1d56c:	ldr	r3, [r0]
   1d570:	cmp	r3, #12
   1d574:	beq	1d6dc <__assert_fail@plt+0xb968>
   1d578:	cmp	r3, #34	; 0x22
   1d57c:	beq	1d5dc <__assert_fail@plt+0xb868>
   1d580:	mov	r5, r4
   1d584:	mov	r6, #1
   1d588:	ldr	r0, [sp, #1176]	; 0x498
   1d58c:	add	r3, sp, #1184	; 0x4a0
   1d590:	cmp	r0, r3
   1d594:	beq	1d59c <__assert_fail@plt+0xb828>
   1d598:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   1d59c:	ldr	r0, [sp, #2208]	; 0x8a0
   1d5a0:	cmp	r0, fp
   1d5a4:	beq	1d5ac <__assert_fail@plt+0xb838>
   1d5a8:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   1d5ac:	cmp	r6, #0
   1d5b0:	beq	1d700 <__assert_fail@plt+0xb98c>
   1d5b4:	ldr	r0, [sp, #144]	; 0x90
   1d5b8:	cmp	r0, sl
   1d5bc:	moveq	r6, #0
   1d5c0:	beq	1d5cc <__assert_fail@plt+0xb858>
   1d5c4:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   1d5c8:	mov	r6, #0
   1d5cc:	mov	r0, r6
   1d5d0:	add	sp, sp, #3232	; 0xca0
   1d5d4:	add	sp, sp, #12
   1d5d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d5dc:	mov	r0, r6
   1d5e0:	bl	2867c <_obstack_memory_used@@Base+0x40d0>
   1d5e4:	cmp	r0, #0
   1d5e8:	beq	1d6dc <__assert_fail@plt+0xb968>
   1d5ec:	ldr	r4, [sp, #144]	; 0x90
   1d5f0:	ldr	r1, [sp, #148]	; 0x94
   1d5f4:	b	1d558 <__assert_fail@plt+0xb7e4>
   1d5f8:	mov	r4, sl
   1d5fc:	add	r0, sl, #1
   1d600:	strb	r6, [sp, #152]	; 0x98
   1d604:	mov	r3, #0
   1d608:	and	r2, r5, #4
   1d60c:	str	r3, [sp, #24]
   1d610:	str	r2, [sp, #8]
   1d614:	str	r3, [sp, #12]
   1d618:	str	r3, [sp, #16]
   1d61c:	str	r9, [sp, #20]
   1d620:	cmp	r6, #0
   1d624:	beq	1d9fc <__assert_fail@plt+0xbc88>
   1d628:	cmp	r6, #47	; 0x2f
   1d62c:	movne	r3, r6
   1d630:	bne	1d648 <__assert_fail@plt+0xb8d4>
   1d634:	ldrb	r3, [r8, #1]!
   1d638:	cmp	r3, #47	; 0x2f
   1d63c:	beq	1d634 <__assert_fail@plt+0xb8c0>
   1d640:	cmp	r3, #0
   1d644:	beq	1d9fc <__assert_fail@plt+0xbc88>
   1d648:	mov	r5, r8
   1d64c:	ldrb	r6, [r5, #1]!
   1d650:	cmp	r6, #0
   1d654:	cmpne	r6, #47	; 0x2f
   1d658:	bne	1d64c <__assert_fail@plt+0xb8d8>
   1d65c:	subs	r7, r5, r8
   1d660:	beq	1d9fc <__assert_fail@plt+0xbc88>
   1d664:	cmp	r7, #1
   1d668:	beq	1d7e8 <__assert_fail@plt+0xba74>
   1d66c:	cmp	r7, #2
   1d670:	cmpeq	r3, #46	; 0x2e
   1d674:	beq	1d72c <__assert_fail@plt+0xb9b8>
   1d678:	ldrb	r3, [r0, #-1]
   1d67c:	add	r6, r7, #2
   1d680:	cmp	r3, #47	; 0x2f
   1d684:	movne	r3, #47	; 0x2f
   1d688:	strbne	r3, [r0]
   1d68c:	ldr	r3, [sp, #148]	; 0x94
   1d690:	addne	r0, r0, #1
   1d694:	add	r3, r4, r3
   1d698:	sub	r3, r3, r0
   1d69c:	cmp	r3, r6
   1d6a0:	bcs	1d780 <__assert_fail@plt+0xba0c>
   1d6a4:	mov	r9, r0
   1d6a8:	b	1d6c8 <__assert_fail@plt+0xb954>
   1d6ac:	ldr	r3, [sp, #148]	; 0x94
   1d6b0:	ldr	r4, [sp, #144]	; 0x90
   1d6b4:	sub	r3, r3, r9
   1d6b8:	cmp	r3, r6
   1d6bc:	add	r9, r4, r9
   1d6c0:	mov	r0, r9
   1d6c4:	bcs	1d780 <__assert_fail@plt+0xba0c>
   1d6c8:	add	r0, sp, #144	; 0x90
   1d6cc:	bl	286f4 <_obstack_memory_used@@Base+0x4148>
   1d6d0:	sub	r9, r9, r4
   1d6d4:	cmp	r0, #0
   1d6d8:	bne	1d6ac <__assert_fail@plt+0xb938>
   1d6dc:	bl	29fa0 <_obstack_memory_used@@Base+0x59f4>
   1d6e0:	bl	11bb8 <__errno_location@plt>
   1d6e4:	mov	r6, #0
   1d6e8:	mov	r3, #22
   1d6ec:	str	r3, [r0]
   1d6f0:	mov	r0, r6
   1d6f4:	add	sp, sp, #3232	; 0xca0
   1d6f8:	add	sp, sp, #12
   1d6fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d700:	strb	r6, [r4], #1
   1d704:	sub	r0, sl, #8
   1d708:	sub	r1, r4, r5
   1d70c:	bl	2862c <_obstack_memory_used@@Base+0x4080>
   1d710:	subs	r6, r0, #0
   1d714:	bne	1d5cc <__assert_fail@plt+0xb858>
   1d718:	b	1d6dc <__assert_fail@plt+0xb968>
   1d71c:	bl	11bb8 <__errno_location@plt>
   1d720:	mov	r3, #2
   1d724:	str	r3, [r0]
   1d728:	b	1d5cc <__assert_fail@plt+0xb858>
   1d72c:	ldrb	r3, [r8, #1]
   1d730:	cmp	r3, #46	; 0x2e
   1d734:	bne	1d678 <__assert_fail@plt+0xb904>
   1d738:	add	r3, r4, #1
   1d73c:	cmp	r0, r3
   1d740:	bls	1d778 <__assert_fail@plt+0xba04>
   1d744:	sub	r3, r0, #1
   1d748:	cmp	r4, r3
   1d74c:	bcs	1dbc4 <__assert_fail@plt+0xbe50>
   1d750:	ldrb	r2, [r0, #-2]
   1d754:	cmp	r2, #47	; 0x2f
   1d758:	beq	1dbc4 <__assert_fail@plt+0xbe50>
   1d75c:	sub	r3, r0, #2
   1d760:	cmp	r3, r4
   1d764:	mov	r0, r3
   1d768:	beq	1d778 <__assert_fail@plt+0xba04>
   1d76c:	ldrb	r2, [r3, #-1]!
   1d770:	cmp	r2, #47	; 0x2f
   1d774:	bne	1d760 <__assert_fail@plt+0xb9ec>
   1d778:	mov	r8, r5
   1d77c:	b	1d620 <__assert_fail@plt+0xb8ac>
   1d780:	mov	r2, r7
   1d784:	mov	r1, r8
   1d788:	bl	11b40 <mempcpy@plt>
   1d78c:	ldr	r3, [sp, #8]
   1d790:	cmp	r3, #0
   1d794:	mov	r3, #0
   1d798:	str	r0, [sp, #28]
   1d79c:	strb	r3, [r0]
   1d7a0:	bne	1d7f4 <__assert_fail@plt+0xba80>
   1d7a4:	sub	r3, fp, #8
   1d7a8:	mov	r9, r3
   1d7ac:	str	r5, [sp, #32]
   1d7b0:	ldr	r6, [sp, #2212]	; 0x8a4
   1d7b4:	ldr	r5, [sp, #2208]	; 0x8a0
   1d7b8:	sub	r6, r6, #1
   1d7bc:	mov	r2, r6
   1d7c0:	mov	r1, r5
   1d7c4:	mov	r0, r4
   1d7c8:	bl	11a08 <readlink@plt>
   1d7cc:	cmp	r6, r0
   1d7d0:	bgt	1d8ac <__assert_fail@plt+0xbb38>
   1d7d4:	mov	r0, r9
   1d7d8:	bl	2867c <_obstack_memory_used@@Base+0x40d0>
   1d7dc:	cmp	r0, #0
   1d7e0:	bne	1d7b0 <__assert_fail@plt+0xba3c>
   1d7e4:	b	1d6dc <__assert_fail@plt+0xb968>
   1d7e8:	cmp	r3, #46	; 0x2e
   1d7ec:	bne	1d678 <__assert_fail@plt+0xb904>
   1d7f0:	b	1d778 <__assert_fail@plt+0xba04>
   1d7f4:	ldr	r3, [sp, #20]
   1d7f8:	cmp	r3, #2
   1d7fc:	beq	1da94 <__assert_fail@plt+0xbd20>
   1d800:	ldrb	r2, [r5]
   1d804:	mov	r3, r5
   1d808:	mov	r1, r2
   1d80c:	cmp	r1, #47	; 0x2f
   1d810:	beq	1d81c <__assert_fail@plt+0xbaa8>
   1d814:	b	1d864 <__assert_fail@plt+0xbaf0>
   1d818:	mov	r3, r0
   1d81c:	ldrb	r1, [r3, #1]
   1d820:	add	r0, r3, #1
   1d824:	cmp	r1, #47	; 0x2f
   1d828:	beq	1d818 <__assert_fail@plt+0xbaa4>
   1d82c:	cmp	r1, #0
   1d830:	add	r3, r3, #2
   1d834:	beq	1dab0 <__assert_fail@plt+0xbd3c>
   1d838:	cmp	r1, #46	; 0x2e
   1d83c:	bne	1d864 <__assert_fail@plt+0xbaf0>
   1d840:	ldrb	r1, [r0, #1]
   1d844:	cmp	r1, #0
   1d848:	beq	1dab0 <__assert_fail@plt+0xbd3c>
   1d84c:	cmp	r1, #46	; 0x2e
   1d850:	bne	1d80c <__assert_fail@plt+0xba98>
   1d854:	ldrb	r3, [r0, #2]
   1d858:	cmp	r3, #47	; 0x2f
   1d85c:	cmpne	r3, #0
   1d860:	beq	1dab0 <__assert_fail@plt+0xbd3c>
   1d864:	ldr	r3, [sp, #8]
   1d868:	cmp	r3, #0
   1d86c:	bne	1db70 <__assert_fail@plt+0xbdfc>
   1d870:	bl	11bb8 <__errno_location@plt>
   1d874:	ldr	r6, [r0]
   1d878:	subs	r6, r6, #22
   1d87c:	movne	r6, #1
   1d880:	cmp	r6, #0
   1d884:	bne	1dae0 <__assert_fail@plt+0xbd6c>
   1d888:	ldrb	r2, [r5]
   1d88c:	mov	r6, r2
   1d890:	ldr	r0, [sp, #28]
   1d894:	b	1d778 <__assert_fail@plt+0xba04>
   1d898:	mov	r1, #0
   1d89c:	mov	r0, r4
   1d8a0:	bl	119d8 <rawmemchr@plt>
   1d8a4:	ldrb	r6, [r8]
   1d8a8:	b	1d604 <__assert_fail@plt+0xb890>
   1d8ac:	cmp	r0, #0
   1d8b0:	mov	r9, r5
   1d8b4:	mov	r6, r0
   1d8b8:	ldr	r5, [sp, #32]
   1d8bc:	blt	1d7f4 <__assert_fail@plt+0xba80>
   1d8c0:	ldr	r3, [sp, #16]
   1d8c4:	cmp	r3, #19
   1d8c8:	addle	r3, r3, #1
   1d8cc:	strle	r3, [sp, #16]
   1d8d0:	ble	1d994 <__assert_fail@plt+0xbc20>
   1d8d4:	ldrb	r3, [r8]
   1d8d8:	cmp	r3, #0
   1d8dc:	beq	1d994 <__assert_fail@plt+0xbc20>
   1d8e0:	ldr	r2, [sp, #28]
   1d8e4:	rsb	r7, r7, #0
   1d8e8:	mov	r3, #0
   1d8ec:	strb	r3, [r2, r7]
   1d8f0:	ldrb	r1, [r4]
   1d8f4:	add	r3, sp, #40	; 0x28
   1d8f8:	mov	r2, r3
   1d8fc:	cmp	r1, #0
   1d900:	ldr	r3, [pc, #708]	; 1dbcc <__assert_fail@plt+0xbe58>
   1d904:	movne	r3, r4
   1d908:	mov	r1, r3
   1d90c:	mov	r0, #3
   1d910:	bl	11cfc <__xstat64@plt>
   1d914:	cmp	r0, #0
   1d918:	bne	1d964 <__assert_fail@plt+0xbbf0>
   1d91c:	ldrb	r3, [r8]
   1d920:	ldr	r1, [sp, #24]
   1d924:	ldr	r2, [sp, #28]
   1d928:	cmp	r1, #0
   1d92c:	strb	r3, [r2, r7]
   1d930:	beq	1db80 <__assert_fail@plt+0xbe0c>
   1d934:	add	r2, sp, #40	; 0x28
   1d938:	mov	r1, r8
   1d93c:	ldr	r0, [sp, #24]
   1d940:	bl	1deb4 <__assert_fail@plt+0xc140>
   1d944:	cmp	r0, #0
   1d948:	beq	1d984 <__assert_fail@plt+0xbc10>
   1d94c:	ldr	r3, [sp, #20]
   1d950:	cmp	r3, #2
   1d954:	beq	1da94 <__assert_fail@plt+0xbd20>
   1d958:	bl	11bb8 <__errno_location@plt>
   1d95c:	mov	r3, #40	; 0x28
   1d960:	str	r3, [r0]
   1d964:	mov	r5, r4
   1d968:	ldr	r4, [sp, #28]
   1d96c:	mov	r6, #1
   1d970:	ldr	r0, [sp, #24]
   1d974:	cmp	r0, #0
   1d978:	beq	1d588 <__assert_fail@plt+0xb814>
   1d97c:	bl	1f428 <__assert_fail@plt+0xd6b4>
   1d980:	b	1d588 <__assert_fail@plt+0xb814>
   1d984:	add	r2, sp, #40	; 0x28
   1d988:	mov	r1, r8
   1d98c:	ldr	r0, [sp, #24]
   1d990:	bl	1de4c <__assert_fail@plt+0xc0d8>
   1d994:	mov	r3, #0
   1d998:	strb	r3, [r9, r6]
   1d99c:	ldr	r2, [sp, #12]
   1d9a0:	ldr	r8, [sp, #1176]	; 0x498
   1d9a4:	cmp	r2, r3
   1d9a8:	subne	r3, r5, r8
   1d9ac:	moveq	r3, r2
   1d9b0:	mov	r0, r5
   1d9b4:	str	r3, [sp, #36]	; 0x24
   1d9b8:	bl	11b94 <strlen@plt>
   1d9bc:	adds	r7, r6, r0
   1d9c0:	str	r0, [sp, #32]
   1d9c4:	bcs	1d6dc <__assert_fail@plt+0xb968>
   1d9c8:	ldr	r3, [sp, #1180]	; 0x49c
   1d9cc:	cmp	r3, r7
   1d9d0:	bls	1d9e4 <__assert_fail@plt+0xbc70>
   1d9d4:	b	1da28 <__assert_fail@plt+0xbcb4>
   1d9d8:	ldr	r3, [sp, #1180]	; 0x49c
   1d9dc:	cmp	r7, r3
   1d9e0:	bcc	1da24 <__assert_fail@plt+0xbcb0>
   1d9e4:	add	r0, sp, #1168	; 0x490
   1d9e8:	add	r0, r0, #8
   1d9ec:	bl	286f4 <_obstack_memory_used@@Base+0x4148>
   1d9f0:	cmp	r0, #0
   1d9f4:	bne	1d9d8 <__assert_fail@plt+0xbc64>
   1d9f8:	b	1d6dc <__assert_fail@plt+0xb968>
   1d9fc:	add	r3, r4, #1
   1da00:	cmp	r0, r3
   1da04:	bls	1daa0 <__assert_fail@plt+0xbd2c>
   1da08:	ldrb	r3, [r0, #-1]
   1da0c:	mov	r5, r4
   1da10:	mov	r6, #0
   1da14:	cmp	r3, #47	; 0x2f
   1da18:	subeq	r4, r0, #1
   1da1c:	movne	r4, r0
   1da20:	b	1d970 <__assert_fail@plt+0xbbfc>
   1da24:	ldr	r8, [sp, #1176]	; 0x498
   1da28:	ldr	r3, [sp, #12]
   1da2c:	add	r0, r8, r6
   1da30:	cmp	r3, #0
   1da34:	ldrne	r3, [sp, #36]	; 0x24
   1da38:	addne	r5, r8, r3
   1da3c:	ldr	r3, [sp, #32]
   1da40:	mov	r1, r5
   1da44:	add	r2, r3, #1
   1da48:	bl	118f4 <memmove@plt>
   1da4c:	mov	r2, r6
   1da50:	mov	r1, r9
   1da54:	mov	r0, r8
   1da58:	bl	11930 <memcpy@plt>
   1da5c:	ldrb	r2, [r9]
   1da60:	cmp	r2, #47	; 0x2f
   1da64:	mov	r3, r0
   1da68:	beq	1dba8 <__assert_fail@plt+0xbe34>
   1da6c:	ldr	r1, [sp, #28]
   1da70:	add	r2, r4, #1
   1da74:	cmp	r1, r2
   1da78:	bhi	1db20 <__assert_fail@plt+0xbdac>
   1da7c:	ldrb	r6, [r3]
   1da80:	mov	r5, r3
   1da84:	mov	r3, #1
   1da88:	mov	r0, r1
   1da8c:	str	r3, [sp, #12]
   1da90:	b	1d778 <__assert_fail@plt+0xba04>
   1da94:	ldr	r0, [sp, #28]
   1da98:	ldrb	r6, [r5]
   1da9c:	b	1d778 <__assert_fail@plt+0xba04>
   1daa0:	mov	r5, r4
   1daa4:	mov	r6, #0
   1daa8:	mov	r4, r0
   1daac:	b	1d970 <__assert_fail@plt+0xbbfc>
   1dab0:	ldr	r3, [pc, #280]	; 1dbd0 <__assert_fail@plt+0xbe5c>
   1dab4:	ldr	r0, [sp, #28]
   1dab8:	mov	r2, #0
   1dabc:	ldrh	r1, [r3]
   1dac0:	mov	r3, #512	; 0x200
   1dac4:	strh	r1, [r0]
   1dac8:	mov	r1, r4
   1dacc:	mvn	r0, #99	; 0x63
   1dad0:	bl	1190c <faccessat@plt>
   1dad4:	adds	r6, r0, #0
   1dad8:	movne	r6, #1
   1dadc:	b	1d880 <__assert_fail@plt+0xbb0c>
   1dae0:	ldr	r3, [sp, #20]
   1dae4:	cmp	r3, #1
   1dae8:	bne	1db14 <__assert_fail@plt+0xbda0>
   1daec:	bl	11bb8 <__errno_location@plt>
   1daf0:	ldr	r3, [r0]
   1daf4:	cmp	r3, #2
   1daf8:	bne	1db14 <__assert_fail@plt+0xbda0>
   1dafc:	ldr	r1, [pc, #204]	; 1dbd0 <__assert_fail@plt+0xbe5c>
   1db00:	mov	r0, r5
   1db04:	bl	11d68 <strspn@plt>
   1db08:	ldrb	r3, [r5, r0]
   1db0c:	cmp	r3, #0
   1db10:	beq	1da94 <__assert_fail@plt+0xbd20>
   1db14:	mov	r5, r4
   1db18:	ldr	r4, [sp, #28]
   1db1c:	b	1d970 <__assert_fail@plt+0xbbfc>
   1db20:	sub	r0, r1, #1
   1db24:	cmp	r0, r4
   1db28:	bls	1db5c <__assert_fail@plt+0xbde8>
   1db2c:	ldrb	r2, [r1, #-2]
   1db30:	cmp	r2, #47	; 0x2f
   1db34:	beq	1db5c <__assert_fail@plt+0xbde8>
   1db38:	ldr	r2, [sp, #28]
   1db3c:	sub	r2, r2, #2
   1db40:	cmp	r4, r2
   1db44:	mov	r0, r2
   1db48:	beq	1db5c <__assert_fail@plt+0xbde8>
   1db4c:	ldrb	r1, [r2, #-1]
   1db50:	sub	r2, r2, #1
   1db54:	cmp	r1, #47	; 0x2f
   1db58:	bne	1db40 <__assert_fail@plt+0xbdcc>
   1db5c:	ldrb	r6, [r3]
   1db60:	mov	r5, r3
   1db64:	mov	r3, #1
   1db68:	str	r3, [sp, #12]
   1db6c:	b	1d778 <__assert_fail@plt+0xba04>
   1db70:	cmp	r2, #0
   1db74:	bne	1d88c <__assert_fail@plt+0xbb18>
   1db78:	mov	r3, #512	; 0x200
   1db7c:	b	1dac8 <__assert_fail@plt+0xbd54>
   1db80:	ldr	r3, [pc, #76]	; 1dbd4 <__assert_fail@plt+0xbe60>
   1db84:	ldr	r2, [pc, #76]	; 1dbd8 <__assert_fail@plt+0xbe64>
   1db88:	str	r3, [sp]
   1db8c:	mov	r0, #7
   1db90:	ldr	r3, [pc, #68]	; 1dbdc <__assert_fail@plt+0xbe68>
   1db94:	bl	1f138 <__assert_fail@plt+0xd3c4>
   1db98:	subs	r3, r0, #0
   1db9c:	str	r3, [sp, #24]
   1dba0:	bne	1d934 <__assert_fail@plt+0xbbc0>
   1dba4:	b	1d6dc <__assert_fail@plt+0xb968>
   1dba8:	mov	r3, #1
   1dbac:	strb	r2, [r4]
   1dbb0:	mov	r5, r0
   1dbb4:	ldrb	r6, [r0]
   1dbb8:	str	r3, [sp, #12]
   1dbbc:	add	r0, r4, #1
   1dbc0:	b	1d778 <__assert_fail@plt+0xba04>
   1dbc4:	mov	r0, r3
   1dbc8:	b	1d778 <__assert_fail@plt+0xba04>
   1dbcc:	andeq	pc, r2, r4, lsl #23
   1dbd0:	ldrdeq	pc, [r2], -r4
   1dbd4:	andeq	r0, r2, r8, asr #5
   1dbd8:	andeq	r0, r2, r4, asr #4
   1dbdc:	andeq	r0, r2, ip, ror r2
   1dbe0:	ldr	r3, [pc, #4]	; 1dbec <__assert_fail@plt+0xbe78>
   1dbe4:	str	r0, [r3]
   1dbe8:	bx	lr
   1dbec:	ldrdeq	r2, [r4], -r4
   1dbf0:	ldr	r3, [pc, #4]	; 1dbfc <__assert_fail@plt+0xbe88>
   1dbf4:	strb	r0, [r3, #4]
   1dbf8:	bx	lr
   1dbfc:	ldrdeq	r2, [r4], -r4
   1dc00:	ldr	r3, [pc, #192]	; 1dcc8 <__assert_fail@plt+0xbf54>
   1dc04:	push	{r4, r5, r6, lr}
   1dc08:	sub	sp, sp, #8
   1dc0c:	ldr	r0, [r3]
   1dc10:	bl	2b294 <_obstack_memory_used@@Base+0x6ce8>
   1dc14:	cmp	r0, #0
   1dc18:	beq	1dc3c <__assert_fail@plt+0xbec8>
   1dc1c:	ldr	r4, [pc, #168]	; 1dccc <__assert_fail@plt+0xbf58>
   1dc20:	ldrb	r3, [r4, #4]
   1dc24:	cmp	r3, #0
   1dc28:	beq	1dc58 <__assert_fail@plt+0xbee4>
   1dc2c:	bl	11bb8 <__errno_location@plt>
   1dc30:	ldr	r3, [r0]
   1dc34:	cmp	r3, #32
   1dc38:	bne	1dc58 <__assert_fail@plt+0xbee4>
   1dc3c:	ldr	r3, [pc, #140]	; 1dcd0 <__assert_fail@plt+0xbf5c>
   1dc40:	ldr	r0, [r3]
   1dc44:	bl	2b294 <_obstack_memory_used@@Base+0x6ce8>
   1dc48:	cmp	r0, #0
   1dc4c:	bne	1dca0 <__assert_fail@plt+0xbf2c>
   1dc50:	add	sp, sp, #8
   1dc54:	pop	{r4, r5, r6, pc}
   1dc58:	mov	r2, #5
   1dc5c:	ldr	r1, [pc, #112]	; 1dcd4 <__assert_fail@plt+0xbf60>
   1dc60:	mov	r0, #0
   1dc64:	bl	11984 <dcgettext@plt>
   1dc68:	ldr	r4, [r4]
   1dc6c:	cmp	r4, #0
   1dc70:	mov	r5, r0
   1dc74:	beq	1dcac <__assert_fail@plt+0xbf38>
   1dc78:	bl	11bb8 <__errno_location@plt>
   1dc7c:	ldr	r6, [r0]
   1dc80:	mov	r0, r4
   1dc84:	bl	2724c <_obstack_memory_used@@Base+0x2ca0>
   1dc88:	mov	r1, r6
   1dc8c:	str	r5, [sp]
   1dc90:	ldr	r2, [pc, #64]	; 1dcd8 <__assert_fail@plt+0xbf64>
   1dc94:	mov	r3, r0
   1dc98:	mov	r0, #0
   1dc9c:	bl	11a8c <error@plt>
   1dca0:	ldr	r3, [pc, #52]	; 1dcdc <__assert_fail@plt+0xbf68>
   1dca4:	ldr	r0, [r3]
   1dca8:	bl	11924 <_exit@plt>
   1dcac:	bl	11bb8 <__errno_location@plt>
   1dcb0:	mov	r3, r5
   1dcb4:	ldr	r2, [pc, #36]	; 1dce0 <__assert_fail@plt+0xbf6c>
   1dcb8:	ldr	r1, [r0]
   1dcbc:	mov	r0, r4
   1dcc0:	bl	11a8c <error@plt>
   1dcc4:	b	1dca0 <__assert_fail@plt+0xbf2c>
   1dcc8:	andeq	r1, r4, r4, lsr #6
   1dccc:	ldrdeq	r2, [r4], -r4
   1dcd0:	andeq	r1, r4, r0, lsr #6
   1dcd4:	andeq	r0, r3, r4, lsr #2
   1dcd8:			; <UNDEFINED> instruction: 0x0002f8b0
   1dcdc:	andeq	r1, r4, r4, asr #5
   1dce0:	andeq	pc, r2, ip, lsr #19
   1dce4:	push	{r4, r5, r6, lr}
   1dce8:	mov	r5, r0
   1dcec:	ldrb	r4, [r0]
   1dcf0:	bl	1d3c0 <__assert_fail@plt+0xb64c>
   1dcf4:	sub	r4, r4, #47	; 0x2f
   1dcf8:	clz	r4, r4
   1dcfc:	lsr	r4, r4, #5
   1dd00:	sub	r0, r0, r5
   1dd04:	cmp	r0, r4
   1dd08:	bls	1dd54 <__assert_fail@plt+0xbfe0>
   1dd0c:	sub	r3, r0, #1
   1dd10:	add	r2, r5, r3
   1dd14:	ldrb	r1, [r5, r3]
   1dd18:	cmp	r1, #47	; 0x2f
   1dd1c:	beq	1dd38 <__assert_fail@plt+0xbfc4>
   1dd20:	b	1dd54 <__assert_fail@plt+0xbfe0>
   1dd24:	ldrb	r1, [r2, #-1]!
   1dd28:	sub	r0, r3, #1
   1dd2c:	cmp	r1, #47	; 0x2f
   1dd30:	bne	1dd48 <__assert_fail@plt+0xbfd4>
   1dd34:	mov	r3, r0
   1dd38:	cmp	r4, r3
   1dd3c:	bne	1dd24 <__assert_fail@plt+0xbfb0>
   1dd40:	mov	r0, r4
   1dd44:	pop	{r4, r5, r6, pc}
   1dd48:	mov	r4, r3
   1dd4c:	mov	r0, r4
   1dd50:	pop	{r4, r5, r6, pc}
   1dd54:	mov	r4, r0
   1dd58:	b	1dd40 <__assert_fail@plt+0xbfcc>
   1dd5c:	push	{r4, r5, r6, r7, r8, lr}
   1dd60:	mov	r6, r0
   1dd64:	ldrb	r4, [r0]
   1dd68:	bl	1d3c0 <__assert_fail@plt+0xb64c>
   1dd6c:	sub	r4, r4, #47	; 0x2f
   1dd70:	clz	r4, r4
   1dd74:	lsr	r4, r4, #5
   1dd78:	sub	r5, r0, r6
   1dd7c:	cmp	r5, r4
   1dd80:	bls	1de3c <__assert_fail@plt+0xc0c8>
   1dd84:	sub	r3, r5, #1
   1dd88:	add	r2, r6, r3
   1dd8c:	ldrb	r1, [r6, r3]
   1dd90:	cmp	r1, #47	; 0x2f
   1dd94:	beq	1ddb0 <__assert_fail@plt+0xc03c>
   1dd98:	b	1de0c <__assert_fail@plt+0xc098>
   1dd9c:	ldrb	r0, [r2, #-1]!
   1dda0:	sub	ip, r3, #1
   1dda4:	cmp	r0, #47	; 0x2f
   1dda8:	bne	1de08 <__assert_fail@plt+0xc094>
   1ddac:	mov	r3, ip
   1ddb0:	cmp	r4, r3
   1ddb4:	bne	1dd9c <__assert_fail@plt+0xc028>
   1ddb8:	eor	r3, r4, #1
   1ddbc:	and	r3, r3, #1
   1ddc0:	add	r0, r4, #1
   1ddc4:	add	r0, r0, r3
   1ddc8:	uxtb	r5, r3
   1ddcc:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   1ddd0:	subs	r7, r0, #0
   1ddd4:	beq	1de34 <__assert_fail@plt+0xc0c0>
   1ddd8:	mov	r1, r6
   1dddc:	mov	r2, r4
   1dde0:	bl	11930 <memcpy@plt>
   1dde4:	cmp	r5, #0
   1dde8:	movne	r5, #1
   1ddec:	moveq	r5, r4
   1ddf0:	movne	r3, #46	; 0x2e
   1ddf4:	strbne	r3, [r7]
   1ddf8:	mov	r3, #0
   1ddfc:	strb	r3, [r7, r5]
   1de00:	mov	r0, r7
   1de04:	pop	{r4, r5, r6, r7, r8, pc}
   1de08:	mov	r5, r3
   1de0c:	add	r0, r5, #1
   1de10:	cmp	r5, #0
   1de14:	addeq	r0, r0, #1
   1de18:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   1de1c:	subs	r7, r0, #0
   1de20:	beq	1de34 <__assert_fail@plt+0xc0c0>
   1de24:	mov	r1, r6
   1de28:	mov	r2, r5
   1de2c:	bl	11930 <memcpy@plt>
   1de30:	b	1ddf8 <__assert_fail@plt+0xc084>
   1de34:	mov	r7, #0
   1de38:	b	1de00 <__assert_fail@plt+0xc08c>
   1de3c:	mov	r4, r5
   1de40:	b	1ddb8 <__assert_fail@plt+0xc044>
   1de44:	mov	r0, #0
   1de48:	bx	lr
   1de4c:	push	{r4, r5, r6, r7, r8, lr}
   1de50:	subs	r8, r0, #0
   1de54:	popeq	{r4, r5, r6, r7, r8, pc}
   1de58:	mov	r0, #24
   1de5c:	mov	r4, r1
   1de60:	mov	r7, r2
   1de64:	bl	29958 <_obstack_memory_used@@Base+0x53ac>
   1de68:	mov	r6, r0
   1de6c:	mov	r0, r4
   1de70:	bl	29f68 <_obstack_memory_used@@Base+0x59bc>
   1de74:	ldrd	r4, [r7, #96]	; 0x60
   1de78:	ldrd	r2, [r7]
   1de7c:	mov	r1, r6
   1de80:	strd	r4, [r6, #8]
   1de84:	strd	r2, [r6, #16]
   1de88:	str	r0, [r6]
   1de8c:	mov	r0, r8
   1de90:	bl	1faa0 <__assert_fail@plt+0xdd2c>
   1de94:	cmp	r0, #0
   1de98:	beq	1deb0 <__assert_fail@plt+0xc13c>
   1de9c:	cmp	r6, r0
   1dea0:	popeq	{r4, r5, r6, r7, r8, pc}
   1dea4:	mov	r0, r6
   1dea8:	pop	{r4, r5, r6, r7, r8, lr}
   1deac:	b	202c8 <__assert_fail@plt+0xe554>
   1deb0:	bl	29fa0 <_obstack_memory_used@@Base+0x59f4>
   1deb4:	subs	r3, r0, #0
   1deb8:	beq	1def4 <__assert_fail@plt+0xc180>
   1debc:	push	{r4, r5, lr}
   1dec0:	sub	sp, sp, #28
   1dec4:	ldrd	r4, [r2, #96]	; 0x60
   1dec8:	ldrd	r2, [r2]
   1decc:	mov	ip, r1
   1ded0:	mov	r1, sp
   1ded4:	str	ip, [sp]
   1ded8:	strd	r4, [sp, #8]
   1dedc:	strd	r2, [sp, #16]
   1dee0:	bl	1ee58 <__assert_fail@plt+0xd0e4>
   1dee4:	adds	r0, r0, #0
   1dee8:	movne	r0, #1
   1deec:	add	sp, sp, #28
   1def0:	pop	{r4, r5, pc}
   1def4:	mov	r0, r3
   1def8:	bx	lr
   1defc:	and	r3, r0, #61440	; 0xf000
   1df00:	cmp	r3, #32768	; 0x8000
   1df04:	moveq	r3, #45	; 0x2d
   1df08:	beq	1df54 <__assert_fail@plt+0xc1e0>
   1df0c:	cmp	r3, #16384	; 0x4000
   1df10:	moveq	r3, #100	; 0x64
   1df14:	beq	1df54 <__assert_fail@plt+0xc1e0>
   1df18:	cmp	r3, #24576	; 0x6000
   1df1c:	moveq	r3, #98	; 0x62
   1df20:	beq	1df54 <__assert_fail@plt+0xc1e0>
   1df24:	cmp	r3, #8192	; 0x2000
   1df28:	moveq	r3, #99	; 0x63
   1df2c:	beq	1df54 <__assert_fail@plt+0xc1e0>
   1df30:	cmp	r3, #40960	; 0xa000
   1df34:	moveq	r3, #108	; 0x6c
   1df38:	beq	1df54 <__assert_fail@plt+0xc1e0>
   1df3c:	cmp	r3, #4096	; 0x1000
   1df40:	moveq	r3, #112	; 0x70
   1df44:	beq	1df54 <__assert_fail@plt+0xc1e0>
   1df48:	cmp	r3, #49152	; 0xc000
   1df4c:	moveq	r3, #115	; 0x73
   1df50:	movne	r3, #63	; 0x3f
   1df54:	tst	r0, #256	; 0x100
   1df58:	movne	ip, #114	; 0x72
   1df5c:	moveq	ip, #45	; 0x2d
   1df60:	tst	r0, #128	; 0x80
   1df64:	movne	r2, #119	; 0x77
   1df68:	moveq	r2, #45	; 0x2d
   1df6c:	tst	r0, #2048	; 0x800
   1df70:	strb	r3, [r1]
   1df74:	strb	ip, [r1, #1]
   1df78:	strb	r2, [r1, #2]
   1df7c:	beq	1e014 <__assert_fail@plt+0xc2a0>
   1df80:	tst	r0, #64	; 0x40
   1df84:	movne	ip, #115	; 0x73
   1df88:	moveq	ip, #83	; 0x53
   1df8c:	tst	r0, #32
   1df90:	movne	r2, #114	; 0x72
   1df94:	moveq	r2, #45	; 0x2d
   1df98:	tst	r0, #16
   1df9c:	movne	r3, #119	; 0x77
   1dfa0:	moveq	r3, #45	; 0x2d
   1dfa4:	tst	r0, #1024	; 0x400
   1dfa8:	strb	ip, [r1, #3]
   1dfac:	strb	r2, [r1, #4]
   1dfb0:	strb	r3, [r1, #5]
   1dfb4:	beq	1e034 <__assert_fail@plt+0xc2c0>
   1dfb8:	tst	r0, #8
   1dfbc:	movne	ip, #115	; 0x73
   1dfc0:	moveq	ip, #83	; 0x53
   1dfc4:	tst	r0, #4
   1dfc8:	movne	r2, #114	; 0x72
   1dfcc:	moveq	r2, #45	; 0x2d
   1dfd0:	tst	r0, #2
   1dfd4:	movne	r3, #119	; 0x77
   1dfd8:	moveq	r3, #45	; 0x2d
   1dfdc:	tst	r0, #512	; 0x200
   1dfe0:	strb	ip, [r1, #6]
   1dfe4:	strb	r2, [r1, #7]
   1dfe8:	strb	r3, [r1, #8]
   1dfec:	beq	1e024 <__assert_fail@plt+0xc2b0>
   1dff0:	tst	r0, #1
   1dff4:	movne	r0, #116	; 0x74
   1dff8:	moveq	r0, #84	; 0x54
   1dffc:	mov	r2, #32
   1e000:	mov	r3, #0
   1e004:	strb	r0, [r1, #9]
   1e008:	strb	r2, [r1, #10]
   1e00c:	strb	r3, [r1, #11]
   1e010:	bx	lr
   1e014:	tst	r0, #64	; 0x40
   1e018:	movne	ip, #120	; 0x78
   1e01c:	moveq	ip, #45	; 0x2d
   1e020:	b	1df8c <__assert_fail@plt+0xc218>
   1e024:	tst	r0, #1
   1e028:	movne	r0, #120	; 0x78
   1e02c:	moveq	r0, #45	; 0x2d
   1e030:	b	1dffc <__assert_fail@plt+0xc288>
   1e034:	tst	r0, #8
   1e038:	movne	ip, #120	; 0x78
   1e03c:	moveq	ip, #45	; 0x2d
   1e040:	b	1dfc4 <__assert_fail@plt+0xc250>
   1e044:	ldr	r3, [r0, #16]
   1e048:	and	r2, r3, #61440	; 0xf000
   1e04c:	cmp	r2, #32768	; 0x8000
   1e050:	moveq	r2, #45	; 0x2d
   1e054:	beq	1e0a0 <__assert_fail@plt+0xc32c>
   1e058:	cmp	r2, #16384	; 0x4000
   1e05c:	moveq	r2, #100	; 0x64
   1e060:	beq	1e0a0 <__assert_fail@plt+0xc32c>
   1e064:	cmp	r2, #24576	; 0x6000
   1e068:	moveq	r2, #98	; 0x62
   1e06c:	beq	1e0a0 <__assert_fail@plt+0xc32c>
   1e070:	cmp	r2, #8192	; 0x2000
   1e074:	moveq	r2, #99	; 0x63
   1e078:	beq	1e0a0 <__assert_fail@plt+0xc32c>
   1e07c:	cmp	r2, #40960	; 0xa000
   1e080:	moveq	r2, #108	; 0x6c
   1e084:	beq	1e0a0 <__assert_fail@plt+0xc32c>
   1e088:	cmp	r2, #4096	; 0x1000
   1e08c:	moveq	r2, #112	; 0x70
   1e090:	beq	1e0a0 <__assert_fail@plt+0xc32c>
   1e094:	cmp	r2, #49152	; 0xc000
   1e098:	moveq	r2, #115	; 0x73
   1e09c:	movne	r2, #63	; 0x3f
   1e0a0:	tst	r3, #256	; 0x100
   1e0a4:	movne	ip, #114	; 0x72
   1e0a8:	moveq	ip, #45	; 0x2d
   1e0ac:	tst	r3, #128	; 0x80
   1e0b0:	movne	r0, #119	; 0x77
   1e0b4:	moveq	r0, #45	; 0x2d
   1e0b8:	tst	r3, #2048	; 0x800
   1e0bc:	strb	r2, [r1]
   1e0c0:	strb	ip, [r1, #1]
   1e0c4:	strb	r0, [r1, #2]
   1e0c8:	beq	1e160 <__assert_fail@plt+0xc3ec>
   1e0cc:	tst	r3, #64	; 0x40
   1e0d0:	movne	ip, #115	; 0x73
   1e0d4:	moveq	ip, #83	; 0x53
   1e0d8:	tst	r3, #32
   1e0dc:	movne	r0, #114	; 0x72
   1e0e0:	moveq	r0, #45	; 0x2d
   1e0e4:	tst	r3, #16
   1e0e8:	movne	r2, #119	; 0x77
   1e0ec:	moveq	r2, #45	; 0x2d
   1e0f0:	tst	r3, #1024	; 0x400
   1e0f4:	strb	ip, [r1, #3]
   1e0f8:	strb	r0, [r1, #4]
   1e0fc:	strb	r2, [r1, #5]
   1e100:	beq	1e180 <__assert_fail@plt+0xc40c>
   1e104:	tst	r3, #8
   1e108:	movne	ip, #115	; 0x73
   1e10c:	moveq	ip, #83	; 0x53
   1e110:	tst	r3, #4
   1e114:	movne	r0, #114	; 0x72
   1e118:	moveq	r0, #45	; 0x2d
   1e11c:	tst	r3, #2
   1e120:	movne	r2, #119	; 0x77
   1e124:	moveq	r2, #45	; 0x2d
   1e128:	tst	r3, #512	; 0x200
   1e12c:	strb	ip, [r1, #6]
   1e130:	strb	r0, [r1, #7]
   1e134:	strb	r2, [r1, #8]
   1e138:	beq	1e170 <__assert_fail@plt+0xc3fc>
   1e13c:	tst	r3, #1
   1e140:	movne	r0, #116	; 0x74
   1e144:	moveq	r0, #84	; 0x54
   1e148:	mov	r2, #32
   1e14c:	mov	r3, #0
   1e150:	strb	r0, [r1, #9]
   1e154:	strb	r2, [r1, #10]
   1e158:	strb	r3, [r1, #11]
   1e15c:	bx	lr
   1e160:	tst	r3, #64	; 0x40
   1e164:	movne	ip, #120	; 0x78
   1e168:	moveq	ip, #45	; 0x2d
   1e16c:	b	1e0d8 <__assert_fail@plt+0xc364>
   1e170:	tst	r3, #1
   1e174:	movne	r0, #120	; 0x78
   1e178:	moveq	r0, #45	; 0x2d
   1e17c:	b	1e148 <__assert_fail@plt+0xc3d4>
   1e180:	tst	r3, #8
   1e184:	movne	ip, #120	; 0x78
   1e188:	moveq	ip, #45	; 0x2d
   1e18c:	b	1e110 <__assert_fail@plt+0xc39c>
   1e190:	push	{r4, lr}
   1e194:	bl	1e1a4 <__assert_fail@plt+0xc430>
   1e198:	cmp	r0, #0
   1e19c:	popne	{r4, pc}
   1e1a0:	bl	29fa0 <_obstack_memory_used@@Base+0x59f4>
   1e1a4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e1a8:	mov	r6, r1
   1e1ac:	mov	r8, r2
   1e1b0:	mov	fp, r0
   1e1b4:	bl	1d3c0 <__assert_fail@plt+0xb64c>
   1e1b8:	mov	r4, r0
   1e1bc:	bl	1d41c <__assert_fail@plt+0xb6a8>
   1e1c0:	sub	r4, r4, fp
   1e1c4:	mov	r5, r0
   1e1c8:	mov	r0, r6
   1e1cc:	bl	11b94 <strlen@plt>
   1e1d0:	cmp	r5, #0
   1e1d4:	add	r4, r4, r5
   1e1d8:	mov	r7, r0
   1e1dc:	beq	1e250 <__assert_fail@plt+0xc4dc>
   1e1e0:	add	r3, fp, r4
   1e1e4:	ldrb	r3, [r3, #-1]
   1e1e8:	cmp	r3, #47	; 0x2f
   1e1ec:	beq	1e268 <__assert_fail@plt+0xc4f4>
   1e1f0:	ldrb	r3, [r6]
   1e1f4:	cmp	r3, #47	; 0x2f
   1e1f8:	beq	1e268 <__assert_fail@plt+0xc4f4>
   1e1fc:	mov	r5, #1
   1e200:	mov	sl, #47	; 0x2f
   1e204:	add	r0, r7, #1
   1e208:	add	r0, r0, r4
   1e20c:	add	r0, r0, r5
   1e210:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   1e214:	subs	r9, r0, #0
   1e218:	beq	1e248 <__assert_fail@plt+0xc4d4>
   1e21c:	mov	r2, r4
   1e220:	mov	r1, fp
   1e224:	bl	11b40 <mempcpy@plt>
   1e228:	cmp	r8, #0
   1e22c:	mov	r2, r7
   1e230:	mov	r1, r6
   1e234:	strb	sl, [r0], r5
   1e238:	strne	r0, [r8]
   1e23c:	bl	11b40 <mempcpy@plt>
   1e240:	mov	r3, #0
   1e244:	strb	r3, [r0]
   1e248:	mov	r0, r9
   1e24c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e250:	ldrb	r3, [r6]
   1e254:	cmp	r3, #47	; 0x2f
   1e258:	moveq	r5, #1
   1e25c:	moveq	sl, #46	; 0x2e
   1e260:	movne	sl, r5
   1e264:	b	1e204 <__assert_fail@plt+0xc490>
   1e268:	mov	r5, #0
   1e26c:	mov	sl, r5
   1e270:	b	1e204 <__assert_fail@plt+0xc490>
   1e274:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e278:	sub	sp, sp, #12
   1e27c:	mov	r6, r0
   1e280:	mov	fp, r1
   1e284:	bl	118a0 <strcmp@plt>
   1e288:	subs	r7, r0, #0
   1e28c:	beq	1e484 <__assert_fail@plt+0xc710>
   1e290:	ldrb	r5, [r6]
   1e294:	cmp	r5, #0
   1e298:	beq	1e554 <__assert_fail@plt+0xc7e0>
   1e29c:	ldrb	r8, [fp]
   1e2a0:	cmp	r8, #0
   1e2a4:	beq	1e490 <__assert_fail@plt+0xc71c>
   1e2a8:	mov	r1, r6
   1e2ac:	ldr	r0, [pc, #1548]	; 1e8c0 <__assert_fail@plt+0xcb4c>
   1e2b0:	bl	118a0 <strcmp@plt>
   1e2b4:	cmp	r0, #0
   1e2b8:	beq	1e554 <__assert_fail@plt+0xc7e0>
   1e2bc:	mov	r1, fp
   1e2c0:	ldr	r0, [pc, #1528]	; 1e8c0 <__assert_fail@plt+0xcb4c>
   1e2c4:	bl	118a0 <strcmp@plt>
   1e2c8:	cmp	r0, #0
   1e2cc:	beq	1e490 <__assert_fail@plt+0xc71c>
   1e2d0:	mov	r1, r6
   1e2d4:	ldr	r0, [pc, #1512]	; 1e8c4 <__assert_fail@plt+0xcb50>
   1e2d8:	bl	118a0 <strcmp@plt>
   1e2dc:	cmp	r0, #0
   1e2e0:	beq	1e554 <__assert_fail@plt+0xc7e0>
   1e2e4:	mov	r1, fp
   1e2e8:	ldr	r0, [pc, #1492]	; 1e8c4 <__assert_fail@plt+0xcb50>
   1e2ec:	bl	118a0 <strcmp@plt>
   1e2f0:	cmp	r0, #0
   1e2f4:	beq	1e490 <__assert_fail@plt+0xc71c>
   1e2f8:	cmp	r5, #46	; 0x2e
   1e2fc:	beq	1e7e4 <__assert_fail@plt+0xca70>
   1e300:	cmp	r8, #46	; 0x2e
   1e304:	beq	1e490 <__assert_fail@plt+0xc71c>
   1e308:	mov	r9, r6
   1e30c:	mov	r4, #0
   1e310:	cmp	r5, #46	; 0x2e
   1e314:	beq	1e4e4 <__assert_fail@plt+0xc770>
   1e318:	mov	r3, r9
   1e31c:	cmp	r5, #90	; 0x5a
   1e320:	sub	r2, r5, #48	; 0x30
   1e324:	sub	r1, r5, #97	; 0x61
   1e328:	bhi	1e4a0 <__assert_fail@plt+0xc72c>
   1e32c:	cmp	r5, #65	; 0x41
   1e330:	bcs	1e4a8 <__assert_fail@plt+0xc734>
   1e334:	cmp	r2, #9
   1e338:	bls	1e4a8 <__assert_fail@plt+0xc734>
   1e33c:	cmp	r5, #126	; 0x7e
   1e340:	beq	1e4a8 <__assert_fail@plt+0xc734>
   1e344:	ldrb	r5, [r9, #1]!
   1e348:	mov	r4, #0
   1e34c:	cmp	r5, r4
   1e350:	beq	1e80c <__assert_fail@plt+0xca98>
   1e354:	cmp	r5, #46	; 0x2e
   1e358:	mov	r3, r9
   1e35c:	bne	1e31c <__assert_fail@plt+0xc5a8>
   1e360:	ldrb	r3, [r9, #1]
   1e364:	add	r2, r9, #1
   1e368:	mov	r4, r9
   1e36c:	cmp	r3, #0
   1e370:	bne	1e4fc <__assert_fail@plt+0xc788>
   1e374:	mov	r9, r2
   1e378:	cmp	r8, #0
   1e37c:	mov	r1, #1
   1e380:	beq	1e4d0 <__assert_fail@plt+0xc75c>
   1e384:	mov	r5, #0
   1e388:	mov	r0, r5
   1e38c:	mov	sl, fp
   1e390:	cmp	r8, #46	; 0x2e
   1e394:	beq	1e7b4 <__assert_fail@plt+0xca40>
   1e398:	mov	r3, sl
   1e39c:	cmp	r8, #90	; 0x5a
   1e3a0:	sub	r2, r8, #48	; 0x30
   1e3a4:	sub	ip, r8, #97	; 0x61
   1e3a8:	bhi	1e754 <__assert_fail@plt+0xc9e0>
   1e3ac:	cmp	r8, #65	; 0x41
   1e3b0:	bcs	1e75c <__assert_fail@plt+0xc9e8>
   1e3b4:	cmp	r2, #9
   1e3b8:	bls	1e75c <__assert_fail@plt+0xc9e8>
   1e3bc:	cmp	r8, #126	; 0x7e
   1e3c0:	beq	1e75c <__assert_fail@plt+0xc9e8>
   1e3c4:	ldrb	r8, [sl, #1]!
   1e3c8:	mov	r5, r0
   1e3cc:	cmp	r8, #0
   1e3d0:	beq	1e824 <__assert_fail@plt+0xcab0>
   1e3d4:	cmp	r8, #46	; 0x2e
   1e3d8:	mov	r3, sl
   1e3dc:	bne	1e39c <__assert_fail@plt+0xc628>
   1e3e0:	b	1e58c <__assert_fail@plt+0xc818>
   1e3e4:	ldrb	r2, [fp, r3]
   1e3e8:	ldrb	ip, [r6, r1]
   1e3ec:	add	lr, r6, r1
   1e3f0:	cmp	ip, #48	; 0x30
   1e3f4:	mov	ip, r1
   1e3f8:	bne	1e40c <__assert_fail@plt+0xc698>
   1e3fc:	ldrb	r1, [lr, #1]!
   1e400:	add	ip, ip, #1
   1e404:	cmp	r1, #48	; 0x30
   1e408:	beq	1e3fc <__assert_fail@plt+0xc688>
   1e40c:	cmp	r2, #48	; 0x30
   1e410:	bne	1e428 <__assert_fail@plt+0xc6b4>
   1e414:	add	r2, fp, r3
   1e418:	ldrb	r1, [r2, #1]!
   1e41c:	add	r3, r3, #1
   1e420:	cmp	r1, #48	; 0x30
   1e424:	beq	1e418 <__assert_fail@plt+0xc6a4>
   1e428:	mov	r1, ip
   1e42c:	sub	r9, r3, r1
   1e430:	add	ip, r6, ip
   1e434:	add	r2, fp, r3
   1e438:	mov	sl, #0
   1e43c:	mov	r8, r5
   1e440:	str	r4, [sp, #4]
   1e444:	ldrb	r5, [ip], #1
   1e448:	add	r3, r9, r1
   1e44c:	sub	lr, r5, #48	; 0x30
   1e450:	cmp	lr, #9
   1e454:	bls	1e778 <__assert_fail@plt+0xca04>
   1e458:	cmp	lr, #9
   1e45c:	mov	r5, r8
   1e460:	ldr	r4, [sp, #4]
   1e464:	bls	1e850 <__assert_fail@plt+0xcadc>
   1e468:	ldrb	r2, [fp, r3]
   1e46c:	sub	r2, r2, #48	; 0x30
   1e470:	cmp	r2, #9
   1e474:	bls	1e858 <__assert_fail@plt+0xcae4>
   1e478:	cmp	sl, #0
   1e47c:	beq	1e604 <__assert_fail@plt+0xc890>
   1e480:	mov	r7, sl
   1e484:	mov	r0, r7
   1e488:	add	sp, sp, #12
   1e48c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e490:	mov	r7, #1
   1e494:	mov	r0, r7
   1e498:	add	sp, sp, #12
   1e49c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e4a0:	cmp	r1, #25
   1e4a4:	bhi	1e33c <__assert_fail@plt+0xc5c8>
   1e4a8:	ldrb	r5, [r3, #1]
   1e4ac:	add	r9, r9, #1
   1e4b0:	cmp	r5, #0
   1e4b4:	bne	1e310 <__assert_fail@plt+0xc59c>
   1e4b8:	adds	r1, r4, #0
   1e4bc:	movne	r1, #1
   1e4c0:	cmp	r8, #0
   1e4c4:	bne	1e384 <__assert_fail@plt+0xc610>
   1e4c8:	cmp	r4, #0
   1e4cc:	beq	1e888 <__assert_fail@plt+0xcb14>
   1e4d0:	sub	r4, r4, r6
   1e4d4:	mov	sl, fp
   1e4d8:	mov	r3, #0
   1e4dc:	sub	r5, sl, fp
   1e4e0:	b	1e5dc <__assert_fail@plt+0xc868>
   1e4e4:	cmp	r4, #0
   1e4e8:	beq	1e360 <__assert_fail@plt+0xc5ec>
   1e4ec:	ldrb	r3, [r9, #1]
   1e4f0:	add	r2, r9, #1
   1e4f4:	cmp	r3, #0
   1e4f8:	beq	1e374 <__assert_fail@plt+0xc600>
   1e4fc:	cmp	r3, #65	; 0x41
   1e500:	bcc	1e518 <__assert_fail@plt+0xc7a4>
   1e504:	cmp	r3, #90	; 0x5a
   1e508:	bls	1e540 <__assert_fail@plt+0xc7cc>
   1e50c:	sub	r1, r3, #97	; 0x61
   1e510:	cmp	r1, #25
   1e514:	bls	1e540 <__assert_fail@plt+0xc7cc>
   1e518:	cmp	r3, #126	; 0x7e
   1e51c:	beq	1e540 <__assert_fail@plt+0xc7cc>
   1e520:	ldrb	r5, [r2, #1]
   1e524:	add	r9, r2, #1
   1e528:	cmp	r5, #0
   1e52c:	beq	1e80c <__assert_fail@plt+0xca98>
   1e530:	cmp	r5, #46	; 0x2e
   1e534:	movne	r4, #0
   1e538:	bne	1e318 <__assert_fail@plt+0xc5a4>
   1e53c:	b	1e360 <__assert_fail@plt+0xc5ec>
   1e540:	ldrb	r5, [r2, #1]
   1e544:	add	r9, r2, #1
   1e548:	cmp	r5, #0
   1e54c:	bne	1e310 <__assert_fail@plt+0xc59c>
   1e550:	b	1e378 <__assert_fail@plt+0xc604>
   1e554:	mvn	r7, #0
   1e558:	b	1e484 <__assert_fail@plt+0xc710>
   1e55c:	sub	ip, r3, #97	; 0x61
   1e560:	cmp	ip, #25
   1e564:	bls	1e5b0 <__assert_fail@plt+0xc83c>
   1e568:	cmp	r3, #126	; 0x7e
   1e56c:	beq	1e5b0 <__assert_fail@plt+0xc83c>
   1e570:	ldrb	r8, [r2, #1]
   1e574:	add	sl, r2, #1
   1e578:	cmp	r8, #0
   1e57c:	beq	1e824 <__assert_fail@plt+0xcab0>
   1e580:	cmp	r8, #46	; 0x2e
   1e584:	movne	r5, r0
   1e588:	bne	1e398 <__assert_fail@plt+0xc624>
   1e58c:	ldrb	r3, [sl, #1]
   1e590:	add	r2, sl, #1
   1e594:	mov	r5, sl
   1e598:	cmp	r3, #0
   1e59c:	beq	1e868 <__assert_fail@plt+0xcaf4>
   1e5a0:	cmp	r3, #65	; 0x41
   1e5a4:	bcc	1e568 <__assert_fail@plt+0xc7f4>
   1e5a8:	cmp	r3, #90	; 0x5a
   1e5ac:	bhi	1e55c <__assert_fail@plt+0xc7e8>
   1e5b0:	ldrb	r8, [r2, #1]
   1e5b4:	add	sl, r2, #1
   1e5b8:	cmp	r8, #0
   1e5bc:	bne	1e390 <__assert_fail@plt+0xc61c>
   1e5c0:	mov	r3, #1
   1e5c4:	cmp	r4, #0
   1e5c8:	moveq	r4, r9
   1e5cc:	cmp	r5, #0
   1e5d0:	sub	r4, r4, r6
   1e5d4:	beq	1e4dc <__assert_fail@plt+0xc768>
   1e5d8:	sub	r5, r5, fp
   1e5dc:	orr	r3, r3, r1
   1e5e0:	cmp	r5, r4
   1e5e4:	movne	r3, #0
   1e5e8:	andeq	r3, r3, #1
   1e5ec:	cmp	r3, #0
   1e5f0:	bne	1e830 <__assert_fail@plt+0xcabc>
   1e5f4:	mov	r3, #0
   1e5f8:	mov	r1, r3
   1e5fc:	mov	r0, r3
   1e600:	str	r7, [sp]
   1e604:	cmp	r5, r3
   1e608:	cmpls	r4, r1
   1e60c:	bls	1e860 <__assert_fail@plt+0xcaec>
   1e610:	add	lr, fp, r3
   1e614:	add	ip, r6, r1
   1e618:	b	1e654 <__assert_fail@plt+0xc8e0>
   1e61c:	mov	r8, r0
   1e620:	cmp	r5, r3
   1e624:	beq	1e638 <__assert_fail@plt+0xc8c4>
   1e628:	ldrb	r2, [lr]
   1e62c:	sub	r7, r2, #48	; 0x30
   1e630:	cmp	r7, #9
   1e634:	bhi	1e730 <__assert_fail@plt+0xc9bc>
   1e638:	mov	r9, r0
   1e63c:	cmp	r9, r8
   1e640:	bne	1e8ac <__assert_fail@plt+0xcb38>
   1e644:	add	r1, r1, #1
   1e648:	add	r3, r3, #1
   1e64c:	add	lr, lr, #1
   1e650:	add	ip, ip, #1
   1e654:	cmp	r4, r1
   1e658:	bls	1e66c <__assert_fail@plt+0xc8f8>
   1e65c:	ldrb	r2, [ip]
   1e660:	sub	r2, r2, #48	; 0x30
   1e664:	cmp	r2, #9
   1e668:	bhi	1e684 <__assert_fail@plt+0xc910>
   1e66c:	cmp	r5, r3
   1e670:	bls	1e3e4 <__assert_fail@plt+0xc670>
   1e674:	ldrb	r2, [lr]
   1e678:	sub	r7, r2, #48	; 0x30
   1e67c:	cmp	r7, #9
   1e680:	bls	1e3e8 <__assert_fail@plt+0xc674>
   1e684:	cmp	r4, r1
   1e688:	beq	1e714 <__assert_fail@plt+0xc9a0>
   1e68c:	ldrb	r2, [ip]
   1e690:	sub	r7, r2, #48	; 0x30
   1e694:	cmp	r7, #9
   1e698:	bls	1e61c <__assert_fail@plt+0xc8a8>
   1e69c:	cmp	r2, #65	; 0x41
   1e6a0:	mov	r8, r2
   1e6a4:	bcc	1e6bc <__assert_fail@plt+0xc948>
   1e6a8:	cmp	r2, #90	; 0x5a
   1e6ac:	bls	1e620 <__assert_fail@plt+0xc8ac>
   1e6b0:	sub	r7, r2, #97	; 0x61
   1e6b4:	cmp	r7, #25
   1e6b8:	bls	1e620 <__assert_fail@plt+0xc8ac>
   1e6bc:	cmp	r2, #126	; 0x7e
   1e6c0:	addne	r8, r2, #256	; 0x100
   1e6c4:	bne	1e620 <__assert_fail@plt+0xc8ac>
   1e6c8:	cmp	r5, r3
   1e6cc:	beq	1e89c <__assert_fail@plt+0xcb28>
   1e6d0:	ldrb	r2, [lr]
   1e6d4:	sub	r7, r2, #48	; 0x30
   1e6d8:	cmp	r7, #9
   1e6dc:	bls	1e798 <__assert_fail@plt+0xca24>
   1e6e0:	cmp	r2, #65	; 0x41
   1e6e4:	mov	r9, r2
   1e6e8:	bcc	1e700 <__assert_fail@plt+0xc98c>
   1e6ec:	cmp	r2, #90	; 0x5a
   1e6f0:	bls	1e8b4 <__assert_fail@plt+0xcb40>
   1e6f4:	sub	r7, r2, #97	; 0x61
   1e6f8:	cmp	r7, #25
   1e6fc:	bls	1e8b4 <__assert_fail@plt+0xcb40>
   1e700:	mvn	r8, #0
   1e704:	cmp	r2, #126	; 0x7e
   1e708:	addne	r9, r2, #256	; 0x100
   1e70c:	mvneq	r9, #0
   1e710:	b	1e63c <__assert_fail@plt+0xc8c8>
   1e714:	cmp	r5, r3
   1e718:	beq	1e644 <__assert_fail@plt+0xc8d0>
   1e71c:	ldrb	r2, [lr]
   1e720:	sub	r7, r2, #48	; 0x30
   1e724:	cmp	r7, #9
   1e728:	bls	1e644 <__assert_fail@plt+0xc8d0>
   1e72c:	mov	r8, r0
   1e730:	cmp	r2, #65	; 0x41
   1e734:	mov	r9, r2
   1e738:	bcc	1e704 <__assert_fail@plt+0xc990>
   1e73c:	cmp	r2, #90	; 0x5a
   1e740:	bls	1e63c <__assert_fail@plt+0xc8c8>
   1e744:	sub	r7, r2, #97	; 0x61
   1e748:	cmp	r7, #25
   1e74c:	bls	1e63c <__assert_fail@plt+0xc8c8>
   1e750:	b	1e704 <__assert_fail@plt+0xc990>
   1e754:	cmp	ip, #25
   1e758:	bhi	1e3bc <__assert_fail@plt+0xc648>
   1e75c:	ldrb	r8, [r3, #1]
   1e760:	add	sl, sl, #1
   1e764:	cmp	r8, #0
   1e768:	bne	1e390 <__assert_fail@plt+0xc61c>
   1e76c:	adds	r3, r5, #0
   1e770:	movne	r3, #1
   1e774:	b	1e5c4 <__assert_fail@plt+0xc850>
   1e778:	ldrb	r7, [r2], #1
   1e77c:	sub	r4, r7, #48	; 0x30
   1e780:	cmp	r4, #9
   1e784:	bhi	1e458 <__assert_fail@plt+0xc6e4>
   1e788:	cmp	sl, #0
   1e78c:	subeq	sl, r5, r7
   1e790:	add	r1, r1, #1
   1e794:	b	1e444 <__assert_fail@plt+0xc6d0>
   1e798:	ldr	r7, [sp]
   1e79c:	mvn	r8, #0
   1e7a0:	mov	r9, #0
   1e7a4:	subs	r8, r8, r9
   1e7a8:	beq	1e484 <__assert_fail@plt+0xc710>
   1e7ac:	mov	r7, r8
   1e7b0:	b	1e484 <__assert_fail@plt+0xc710>
   1e7b4:	cmp	r5, #0
   1e7b8:	beq	1e58c <__assert_fail@plt+0xc818>
   1e7bc:	ldrb	r3, [sl, #1]
   1e7c0:	add	r2, sl, #1
   1e7c4:	cmp	r3, #0
   1e7c8:	bne	1e5a0 <__assert_fail@plt+0xc82c>
   1e7cc:	cmp	r4, #0
   1e7d0:	beq	1e874 <__assert_fail@plt+0xcb00>
   1e7d4:	sub	r4, r4, r6
   1e7d8:	mov	sl, r2
   1e7dc:	mov	r3, #1
   1e7e0:	b	1e5d8 <__assert_fail@plt+0xc864>
   1e7e4:	cmp	r8, #46	; 0x2e
   1e7e8:	bne	1e554 <__assert_fail@plt+0xc7e0>
   1e7ec:	ldrb	r5, [r6, #1]
   1e7f0:	add	r9, r6, #1
   1e7f4:	add	r3, fp, #1
   1e7f8:	cmp	r5, #0
   1e7fc:	ldrb	r8, [fp, #1]
   1e800:	mov	r6, r9
   1e804:	mov	fp, r3
   1e808:	bne	1e308 <__assert_fail@plt+0xc594>
   1e80c:	cmp	r8, #0
   1e810:	moveq	r1, r8
   1e814:	beq	1e888 <__assert_fail@plt+0xcb14>
   1e818:	mov	r1, #0
   1e81c:	mov	r4, r1
   1e820:	b	1e384 <__assert_fail@plt+0xc610>
   1e824:	mov	r5, r8
   1e828:	mov	r3, r8
   1e82c:	b	1e5c4 <__assert_fail@plt+0xc850>
   1e830:	mov	r2, r4
   1e834:	mov	r1, fp
   1e838:	mov	r0, r6
   1e83c:	bl	11d20 <strncmp@plt>
   1e840:	cmp	r0, #0
   1e844:	subeq	r4, r9, r6
   1e848:	subeq	r5, sl, fp
   1e84c:	b	1e5f4 <__assert_fail@plt+0xc880>
   1e850:	mov	r8, #1
   1e854:	b	1e7ac <__assert_fail@plt+0xca38>
   1e858:	mvn	r8, #0
   1e85c:	b	1e7ac <__assert_fail@plt+0xca38>
   1e860:	ldr	r7, [sp]
   1e864:	b	1e484 <__assert_fail@plt+0xc710>
   1e868:	mov	r3, #1
   1e86c:	mov	sl, r2
   1e870:	b	1e5c4 <__assert_fail@plt+0xc850>
   1e874:	sub	r5, r5, fp
   1e878:	mov	sl, r2
   1e87c:	sub	r4, r9, r6
   1e880:	mov	r3, #1
   1e884:	b	1e5dc <__assert_fail@plt+0xc868>
   1e888:	mov	r3, #0
   1e88c:	mov	r5, r3
   1e890:	sub	r4, r9, r6
   1e894:	mov	sl, fp
   1e898:	b	1e5dc <__assert_fail@plt+0xc868>
   1e89c:	ldr	r7, [sp]
   1e8a0:	mov	r9, #0
   1e8a4:	mvn	r8, #0
   1e8a8:	b	1e7a4 <__assert_fail@plt+0xca30>
   1e8ac:	ldr	r7, [sp]
   1e8b0:	b	1e7a4 <__assert_fail@plt+0xca30>
   1e8b4:	ldr	r7, [sp]
   1e8b8:	mvn	r8, #0
   1e8bc:	b	1e7a4 <__assert_fail@plt+0xca30>
   1e8c0:	andeq	pc, r2, r4, lsl #23
   1e8c4:	andeq	r0, r3, r0, lsr r1
   1e8c8:	push	{r4, r5, lr}
   1e8cc:	sub	sp, sp, #12
   1e8d0:	mov	r5, r0
   1e8d4:	bl	11bb8 <__errno_location@plt>
   1e8d8:	mov	r2, #0
   1e8dc:	mov	r4, r0
   1e8e0:	ldr	r3, [r0]
   1e8e4:	str	r2, [r4]
   1e8e8:	mov	r0, r5
   1e8ec:	str	r3, [sp]
   1e8f0:	str	r3, [sp, #4]
   1e8f4:	bl	11900 <free@plt>
   1e8f8:	ldr	r3, [r4]
   1e8fc:	add	r2, sp, #8
   1e900:	cmp	r3, #0
   1e904:	moveq	r3, #4
   1e908:	movne	r3, #0
   1e90c:	add	r3, r2, r3
   1e910:	ldr	r3, [r3, #-8]
   1e914:	str	r3, [r4]
   1e918:	add	sp, sp, #12
   1e91c:	pop	{r4, r5, pc}
   1e920:	mov	r1, r0
   1e924:	mov	r0, #0
   1e928:	b	11918 <clock_gettime@plt>
   1e92c:	push	{r4, r5, lr}
   1e930:	sub	sp, sp, #12
   1e934:	mov	r4, r0
   1e938:	mov	r1, sp
   1e93c:	mov	r0, #0
   1e940:	bl	11918 <clock_gettime@plt>
   1e944:	ldm	sp, {r0, r1}
   1e948:	stm	r4, {r0, r1}
   1e94c:	mov	r0, r4
   1e950:	add	sp, sp, #12
   1e954:	pop	{r4, r5, pc}
   1e958:	push	{lr}		; (str lr, [sp, #-4]!)
   1e95c:	sub	sp, sp, #268	; 0x10c
   1e960:	add	r1, sp, #4
   1e964:	ldr	r2, [pc, #60]	; 1e9a8 <__assert_fail@plt+0xcc34>
   1e968:	bl	288e4 <_obstack_memory_used@@Base+0x4338>
   1e96c:	cmp	r0, #0
   1e970:	movne	r0, #0
   1e974:	bne	1e9a0 <__assert_fail@plt+0xcc2c>
   1e978:	ldr	r1, [pc, #44]	; 1e9ac <__assert_fail@plt+0xcc38>
   1e97c:	add	r0, sp, #4
   1e980:	bl	118a0 <strcmp@plt>
   1e984:	cmp	r0, #0
   1e988:	beq	1e9a0 <__assert_fail@plt+0xcc2c>
   1e98c:	add	r0, sp, #4
   1e990:	ldr	r1, [pc, #24]	; 1e9b0 <__assert_fail@plt+0xcc3c>
   1e994:	bl	118a0 <strcmp@plt>
   1e998:	adds	r0, r0, #0
   1e99c:	movne	r0, #1
   1e9a0:	add	sp, sp, #268	; 0x10c
   1e9a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e9a8:	andeq	r0, r0, r1, lsl #2
   1e9ac:	andeq	r0, r3, r4, lsr r1
   1e9b0:	andeq	r0, r3, r8, lsr r1
   1e9b4:	andeq	r0, r0, r0
   1e9b8:	push	{r4, lr}
   1e9bc:	ror	r0, r0, #3
   1e9c0:	bl	2b758 <_obstack_memory_used@@Base+0x71ac>
   1e9c4:	mov	r0, r1
   1e9c8:	pop	{r4, pc}
   1e9cc:	sub	r0, r1, r0
   1e9d0:	clz	r0, r0
   1e9d4:	lsr	r0, r0, #5
   1e9d8:	bx	lr
   1e9dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e9e0:	mov	r5, r1
   1e9e4:	mov	r6, r0
   1e9e8:	ldr	r4, [r0, #24]
   1e9ec:	ldr	r1, [r0, #8]
   1e9f0:	mov	r0, r5
   1e9f4:	mov	r8, r3
   1e9f8:	mov	sl, r2
   1e9fc:	blx	r4
   1ea00:	ldr	r3, [r6, #8]
   1ea04:	cmp	r0, r3
   1ea08:	bcs	1eaf8 <__assert_fail@plt+0xcd84>
   1ea0c:	ldr	r9, [r6]
   1ea10:	mov	r7, r0
   1ea14:	add	r4, r9, r0, lsl #3
   1ea18:	str	r4, [sl]
   1ea1c:	ldr	r3, [r9, r0, lsl #3]
   1ea20:	cmp	r3, #0
   1ea24:	beq	1eab8 <__assert_fail@plt+0xcd44>
   1ea28:	cmp	r5, r3
   1ea2c:	beq	1ea4c <__assert_fail@plt+0xccd8>
   1ea30:	mov	r1, r3
   1ea34:	mov	r0, r5
   1ea38:	ldr	r3, [r6, #28]
   1ea3c:	blx	r3
   1ea40:	cmp	r0, #0
   1ea44:	beq	1eaac <__assert_fail@plt+0xcd38>
   1ea48:	ldr	r3, [r9, r7, lsl #3]
   1ea4c:	cmp	r8, #0
   1ea50:	beq	1ea7c <__assert_fail@plt+0xcd08>
   1ea54:	ldr	r2, [r4, #4]
   1ea58:	cmp	r2, #0
   1ea5c:	movne	ip, #0
   1ea60:	ldmne	r2, {r0, r1}
   1ea64:	streq	r2, [r9, r7, lsl #3]
   1ea68:	stmne	r4, {r0, r1}
   1ea6c:	strne	ip, [r2]
   1ea70:	ldrne	r1, [r6, #36]	; 0x24
   1ea74:	strne	r1, [r2, #4]
   1ea78:	strne	r2, [r6, #36]	; 0x24
   1ea7c:	mov	r0, r3
   1ea80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ea84:	ldr	r3, [r2]
   1ea88:	cmp	r5, r3
   1ea8c:	beq	1eacc <__assert_fail@plt+0xcd58>
   1ea90:	mov	r1, r3
   1ea94:	mov	r0, r5
   1ea98:	ldr	r3, [r6, #28]
   1ea9c:	blx	r3
   1eaa0:	cmp	r0, #0
   1eaa4:	bne	1eac4 <__assert_fail@plt+0xcd50>
   1eaa8:	ldr	r4, [r4, #4]
   1eaac:	ldr	r2, [r4, #4]
   1eab0:	cmp	r2, #0
   1eab4:	bne	1ea84 <__assert_fail@plt+0xcd10>
   1eab8:	mov	r3, #0
   1eabc:	mov	r0, r3
   1eac0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1eac4:	ldr	r2, [r4, #4]
   1eac8:	ldr	r3, [r2]
   1eacc:	cmp	r8, #0
   1ead0:	beq	1ea7c <__assert_fail@plt+0xcd08>
   1ead4:	ldr	r0, [r2, #4]
   1ead8:	mov	r1, #0
   1eadc:	str	r0, [r4, #4]
   1eae0:	str	r1, [r2]
   1eae4:	ldr	r1, [r6, #36]	; 0x24
   1eae8:	mov	r0, r3
   1eaec:	str	r1, [r2, #4]
   1eaf0:	str	r2, [r6, #36]	; 0x24
   1eaf4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1eaf8:	bl	11d2c <abort@plt>
   1eafc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb00:	ldr	r6, [r1]
   1eb04:	ldr	r3, [r1, #4]
   1eb08:	cmp	r6, r3
   1eb0c:	bcs	1ebdc <__assert_fail@plt+0xce68>
   1eb10:	mov	r9, r2
   1eb14:	mov	r5, r0
   1eb18:	mov	r8, r1
   1eb1c:	add	r6, r6, #8
   1eb20:	mov	sl, #0
   1eb24:	ldr	fp, [r6, #-8]
   1eb28:	mov	r7, r6
   1eb2c:	cmp	fp, #0
   1eb30:	beq	1ebd0 <__assert_fail@plt+0xce5c>
   1eb34:	ldr	r4, [r6, #-4]
   1eb38:	cmp	r4, #0
   1eb3c:	beq	1ebc0 <__assert_fail@plt+0xce4c>
   1eb40:	ldr	r1, [r5, #8]
   1eb44:	b	1eb60 <__assert_fail@plt+0xcdec>
   1eb48:	ldr	r3, [ip, #4]
   1eb4c:	cmp	r2, #0
   1eb50:	str	r3, [r4, #4]
   1eb54:	str	r4, [ip, #4]
   1eb58:	beq	1ebbc <__assert_fail@plt+0xce48>
   1eb5c:	mov	r4, r2
   1eb60:	ldr	fp, [r4]
   1eb64:	ldr	r3, [r5, #24]
   1eb68:	mov	r0, fp
   1eb6c:	blx	r3
   1eb70:	ldr	r1, [r5, #8]
   1eb74:	cmp	r0, r1
   1eb78:	bcs	1ec7c <__assert_fail@plt+0xcf08>
   1eb7c:	ldr	r3, [r5]
   1eb80:	ldr	r2, [r4, #4]
   1eb84:	add	ip, r3, r0, lsl #3
   1eb88:	ldr	lr, [r3, r0, lsl #3]
   1eb8c:	cmp	lr, #0
   1eb90:	bne	1eb48 <__assert_fail@plt+0xcdd4>
   1eb94:	ldr	ip, [r5, #12]
   1eb98:	str	fp, [r3, r0, lsl #3]
   1eb9c:	add	r3, ip, #1
   1eba0:	str	r3, [r5, #12]
   1eba4:	str	lr, [r4]
   1eba8:	ldr	r3, [r5, #36]	; 0x24
   1ebac:	cmp	r2, #0
   1ebb0:	str	r3, [r4, #4]
   1ebb4:	str	r4, [r5, #36]	; 0x24
   1ebb8:	bne	1eb5c <__assert_fail@plt+0xcde8>
   1ebbc:	ldr	fp, [r6, #-8]
   1ebc0:	cmp	r9, #0
   1ebc4:	str	sl, [r6, #-4]
   1ebc8:	beq	1ebe4 <__assert_fail@plt+0xce70>
   1ebcc:	ldr	r3, [r8, #4]
   1ebd0:	cmp	r3, r7
   1ebd4:	add	r6, r6, #8
   1ebd8:	bhi	1eb24 <__assert_fail@plt+0xcdb0>
   1ebdc:	mov	r0, #1
   1ebe0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ebe4:	ldr	r3, [r5, #24]
   1ebe8:	ldr	r1, [r5, #8]
   1ebec:	mov	r0, fp
   1ebf0:	blx	r3
   1ebf4:	ldr	r3, [r5, #8]
   1ebf8:	cmp	r0, r3
   1ebfc:	bcs	1ec7c <__assert_fail@plt+0xcf08>
   1ec00:	ldr	r3, [r5]
   1ec04:	add	r4, r3, r0, lsl #3
   1ec08:	ldr	r2, [r3, r0, lsl #3]
   1ec0c:	cmp	r2, #0
   1ec10:	beq	1ec50 <__assert_fail@plt+0xcedc>
   1ec14:	ldr	r0, [r5, #36]	; 0x24
   1ec18:	cmp	r0, #0
   1ec1c:	beq	1ec64 <__assert_fail@plt+0xcef0>
   1ec20:	ldr	r3, [r0, #4]
   1ec24:	str	r3, [r5, #36]	; 0x24
   1ec28:	ldr	r3, [r4, #4]
   1ec2c:	str	fp, [r0]
   1ec30:	str	r3, [r0, #4]
   1ec34:	str	r0, [r4, #4]
   1ec38:	ldr	r2, [r8, #12]
   1ec3c:	str	sl, [r6, #-8]
   1ec40:	sub	r2, r2, #1
   1ec44:	ldr	r3, [r8, #4]
   1ec48:	str	r2, [r8, #12]
   1ec4c:	b	1ebd0 <__assert_fail@plt+0xce5c>
   1ec50:	ldr	r2, [r5, #12]
   1ec54:	str	fp, [r3, r0, lsl #3]
   1ec58:	add	r3, r2, #1
   1ec5c:	str	r3, [r5, #12]
   1ec60:	b	1ec38 <__assert_fail@plt+0xcec4>
   1ec64:	mov	r0, #8
   1ec68:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   1ec6c:	cmp	r0, #0
   1ec70:	bne	1ec28 <__assert_fail@plt+0xceb4>
   1ec74:	mov	r0, r9
   1ec78:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ec7c:	bl	11d2c <abort@plt>
   1ec80:	ldr	r0, [r0, #8]
   1ec84:	bx	lr
   1ec88:	ldr	r0, [r0, #12]
   1ec8c:	bx	lr
   1ec90:	ldr	r0, [r0, #16]
   1ec94:	bx	lr
   1ec98:	ldm	r0, {r1, ip}
   1ec9c:	mov	r0, #0
   1eca0:	cmp	r1, ip
   1eca4:	bcs	1ecec <__assert_fail@plt+0xcf78>
   1eca8:	ldr	r3, [r1]
   1ecac:	cmp	r3, #0
   1ecb0:	beq	1ecdc <__assert_fail@plt+0xcf68>
   1ecb4:	ldr	r3, [r1, #4]
   1ecb8:	mov	r2, #1
   1ecbc:	cmp	r3, #0
   1ecc0:	beq	1ecd4 <__assert_fail@plt+0xcf60>
   1ecc4:	ldr	r3, [r3, #4]
   1ecc8:	add	r2, r2, #1
   1eccc:	cmp	r3, #0
   1ecd0:	bne	1ecc4 <__assert_fail@plt+0xcf50>
   1ecd4:	cmp	r0, r2
   1ecd8:	movcc	r0, r2
   1ecdc:	add	r1, r1, #8
   1ece0:	cmp	r1, ip
   1ece4:	bcc	1eca8 <__assert_fail@plt+0xcf34>
   1ece8:	bx	lr
   1ecec:	bx	lr
   1ecf0:	push	{lr}		; (str lr, [sp, #-4]!)
   1ecf4:	mov	r2, #0
   1ecf8:	ldm	r0, {r1, lr}
   1ecfc:	mov	ip, r2
   1ed00:	cmp	r1, lr
   1ed04:	bcs	1ed44 <__assert_fail@plt+0xcfd0>
   1ed08:	ldr	r3, [r1]
   1ed0c:	cmp	r3, #0
   1ed10:	beq	1ed38 <__assert_fail@plt+0xcfc4>
   1ed14:	ldr	r3, [r1, #4]
   1ed18:	add	ip, ip, #1
   1ed1c:	cmp	r3, #0
   1ed20:	add	r2, r2, #1
   1ed24:	beq	1ed38 <__assert_fail@plt+0xcfc4>
   1ed28:	ldr	r3, [r3, #4]
   1ed2c:	add	r2, r2, #1
   1ed30:	cmp	r3, #0
   1ed34:	bne	1ed28 <__assert_fail@plt+0xcfb4>
   1ed38:	add	r1, r1, #8
   1ed3c:	cmp	r1, lr
   1ed40:	bcc	1ed08 <__assert_fail@plt+0xcf94>
   1ed44:	ldr	r3, [r0, #12]
   1ed48:	cmp	r3, ip
   1ed4c:	ldreq	r0, [r0, #16]
   1ed50:	subeq	r0, r0, r2
   1ed54:	clzeq	r0, r0
   1ed58:	lsreq	r0, r0, #5
   1ed5c:	movne	r0, #0
   1ed60:	pop	{pc}		; (ldr pc, [sp], #4)
   1ed64:	push	{r4, r5, r6, r7, lr}
   1ed68:	mov	r5, r1
   1ed6c:	ldm	r0, {ip, lr}
   1ed70:	sub	sp, sp, #12
   1ed74:	ldr	r3, [r0, #16]
   1ed78:	cmp	ip, lr
   1ed7c:	mov	r4, #0
   1ed80:	ldr	r6, [r0, #8]
   1ed84:	ldr	r7, [r0, #12]
   1ed88:	bcs	1edcc <__assert_fail@plt+0xd058>
   1ed8c:	ldr	r2, [ip]
   1ed90:	cmp	r2, #0
   1ed94:	beq	1edc0 <__assert_fail@plt+0xd04c>
   1ed98:	ldr	r2, [ip, #4]
   1ed9c:	mov	r1, #1
   1eda0:	cmp	r2, #0
   1eda4:	beq	1edb8 <__assert_fail@plt+0xd044>
   1eda8:	ldr	r2, [r2, #4]
   1edac:	add	r1, r1, #1
   1edb0:	cmp	r2, #0
   1edb4:	bne	1eda8 <__assert_fail@plt+0xd034>
   1edb8:	cmp	r4, r1
   1edbc:	movcc	r4, r1
   1edc0:	add	ip, ip, #8
   1edc4:	cmp	ip, lr
   1edc8:	bcc	1ed8c <__assert_fail@plt+0xd018>
   1edcc:	ldr	r2, [pc, #116]	; 1ee48 <__assert_fail@plt+0xd0d4>
   1edd0:	mov	r1, #1
   1edd4:	mov	r0, r5
   1edd8:	bl	11c18 <__fprintf_chk@plt>
   1eddc:	mov	r3, r6
   1ede0:	ldr	r2, [pc, #100]	; 1ee4c <__assert_fail@plt+0xd0d8>
   1ede4:	mov	r1, #1
   1ede8:	mov	r0, r5
   1edec:	bl	11c18 <__fprintf_chk@plt>
   1edf0:	vmov	s15, r7
   1edf4:	vldr	d5, [pc, #68]	; 1ee40 <__assert_fail@plt+0xd0cc>
   1edf8:	mov	r3, r7
   1edfc:	ldr	r2, [pc, #76]	; 1ee50 <__assert_fail@plt+0xd0dc>
   1ee00:	vcvt.f64.u32	d6, s15
   1ee04:	vmov	s15, r6
   1ee08:	mov	r1, #1
   1ee0c:	mov	r0, r5
   1ee10:	vcvt.f64.u32	d7, s15
   1ee14:	vmul.f64	d6, d6, d5
   1ee18:	vdiv.f64	d5, d6, d7
   1ee1c:	vstr	d5, [sp]
   1ee20:	bl	11c18 <__fprintf_chk@plt>
   1ee24:	mov	r3, r4
   1ee28:	mov	r0, r5
   1ee2c:	ldr	r2, [pc, #32]	; 1ee54 <__assert_fail@plt+0xd0e0>
   1ee30:	mov	r1, #1
   1ee34:	add	sp, sp, #12
   1ee38:	pop	{r4, r5, r6, r7, lr}
   1ee3c:	b	11c18 <__fprintf_chk@plt>
   1ee40:	andeq	r0, r0, r0
   1ee44:	subsmi	r0, r9, r0
   1ee48:	andeq	r0, r3, r4, asr r1
   1ee4c:	andeq	r0, r3, ip, ror #2
   1ee50:	andeq	r0, r3, r4, lsl #3
   1ee54:	andeq	r0, r3, r8, lsr #3
   1ee58:	push	{r4, r5, r6, lr}
   1ee5c:	mov	r5, r1
   1ee60:	ldr	r3, [r0, #24]
   1ee64:	mov	r6, r0
   1ee68:	ldr	r1, [r0, #8]
   1ee6c:	mov	r0, r5
   1ee70:	blx	r3
   1ee74:	ldr	r3, [r6, #8]
   1ee78:	cmp	r0, r3
   1ee7c:	bcs	1eedc <__assert_fail@plt+0xd168>
   1ee80:	ldr	r3, [r6]
   1ee84:	add	r4, r3, r0, lsl #3
   1ee88:	ldr	r1, [r3, r0, lsl #3]
   1ee8c:	cmp	r1, #0
   1ee90:	bne	1ee9c <__assert_fail@plt+0xd128>
   1ee94:	b	1eec4 <__assert_fail@plt+0xd150>
   1ee98:	ldr	r1, [r4]
   1ee9c:	cmp	r5, r1
   1eea0:	beq	1eecc <__assert_fail@plt+0xd158>
   1eea4:	ldr	r3, [r6, #28]
   1eea8:	mov	r0, r5
   1eeac:	blx	r3
   1eeb0:	cmp	r0, #0
   1eeb4:	bne	1eed4 <__assert_fail@plt+0xd160>
   1eeb8:	ldr	r4, [r4, #4]
   1eebc:	cmp	r4, #0
   1eec0:	bne	1ee98 <__assert_fail@plt+0xd124>
   1eec4:	mov	r0, #0
   1eec8:	pop	{r4, r5, r6, pc}
   1eecc:	mov	r0, r5
   1eed0:	pop	{r4, r5, r6, pc}
   1eed4:	ldr	r0, [r4]
   1eed8:	pop	{r4, r5, r6, pc}
   1eedc:	bl	11d2c <abort@plt>
   1eee0:	ldr	r3, [r0, #16]
   1eee4:	cmp	r3, #0
   1eee8:	beq	1ef1c <__assert_fail@plt+0xd1a8>
   1eeec:	ldr	r3, [r0]
   1eef0:	ldr	r2, [r0, #4]
   1eef4:	cmp	r3, r2
   1eef8:	bcc	1ef0c <__assert_fail@plt+0xd198>
   1eefc:	b	1ef24 <__assert_fail@plt+0xd1b0>
   1ef00:	add	r3, r3, #8
   1ef04:	cmp	r3, r2
   1ef08:	bcs	1ef24 <__assert_fail@plt+0xd1b0>
   1ef0c:	ldr	r0, [r3]
   1ef10:	cmp	r0, #0
   1ef14:	beq	1ef00 <__assert_fail@plt+0xd18c>
   1ef18:	bx	lr
   1ef1c:	mov	r0, r3
   1ef20:	bx	lr
   1ef24:	push	{r4, lr}
   1ef28:	bl	11d2c <abort@plt>
   1ef2c:	push	{r4, r5, r6, lr}
   1ef30:	mov	r4, r1
   1ef34:	ldr	r3, [r0, #24]
   1ef38:	mov	r5, r0
   1ef3c:	ldr	r1, [r0, #8]
   1ef40:	mov	r0, r4
   1ef44:	blx	r3
   1ef48:	ldr	r3, [r5, #8]
   1ef4c:	cmp	r0, r3
   1ef50:	bcs	1efb4 <__assert_fail@plt+0xd240>
   1ef54:	ldr	r3, [r5]
   1ef58:	add	r0, r3, r0, lsl #3
   1ef5c:	mov	r3, r0
   1ef60:	b	1ef6c <__assert_fail@plt+0xd1f8>
   1ef64:	cmp	r3, #0
   1ef68:	beq	1ef80 <__assert_fail@plt+0xd20c>
   1ef6c:	ldm	r3, {r2, r3}
   1ef70:	cmp	r4, r2
   1ef74:	bne	1ef64 <__assert_fail@plt+0xd1f0>
   1ef78:	cmp	r3, #0
   1ef7c:	bne	1efac <__assert_fail@plt+0xd238>
   1ef80:	ldr	r2, [r5, #4]
   1ef84:	mov	r3, r0
   1ef88:	b	1ef98 <__assert_fail@plt+0xd224>
   1ef8c:	ldr	r0, [r3]
   1ef90:	cmp	r0, #0
   1ef94:	popne	{r4, r5, r6, pc}
   1ef98:	add	r3, r3, #8
   1ef9c:	cmp	r3, r2
   1efa0:	bcc	1ef8c <__assert_fail@plt+0xd218>
   1efa4:	mov	r0, #0
   1efa8:	pop	{r4, r5, r6, pc}
   1efac:	ldr	r0, [r3]
   1efb0:	pop	{r4, r5, r6, pc}
   1efb4:	bl	11d2c <abort@plt>
   1efb8:	push	{r4, r5, r6, lr}
   1efbc:	mov	r5, r0
   1efc0:	ldr	r4, [r0]
   1efc4:	ldr	r0, [r0, #4]
   1efc8:	cmp	r4, r0
   1efcc:	bcs	1f048 <__assert_fail@plt+0xd2d4>
   1efd0:	add	r4, r4, #8
   1efd4:	mov	ip, #0
   1efd8:	ldr	r3, [r4, #-8]
   1efdc:	mov	r6, r4
   1efe0:	cmp	r3, #0
   1efe4:	beq	1f030 <__assert_fail@plt+0xd2bc>
   1efe8:	cmp	r2, ip
   1efec:	bls	1f03c <__assert_fail@plt+0xd2c8>
   1eff0:	str	r3, [r1, ip, lsl #2]
   1eff4:	ldr	r3, [r4, #-4]
   1eff8:	add	r0, ip, #1
   1effc:	cmp	r3, #0
   1f000:	add	ip, r1, ip, lsl #2
   1f004:	beq	1f028 <__assert_fail@plt+0xd2b4>
   1f008:	cmp	r2, r0
   1f00c:	beq	1f044 <__assert_fail@plt+0xd2d0>
   1f010:	ldr	lr, [r3]
   1f014:	add	r0, r0, #1
   1f018:	str	lr, [ip, #4]!
   1f01c:	ldr	r3, [r3, #4]
   1f020:	cmp	r3, #0
   1f024:	bne	1f008 <__assert_fail@plt+0xd294>
   1f028:	mov	ip, r0
   1f02c:	ldr	r0, [r5, #4]
   1f030:	cmp	r0, r6
   1f034:	add	r4, r4, #8
   1f038:	bhi	1efd8 <__assert_fail@plt+0xd264>
   1f03c:	mov	r0, ip
   1f040:	pop	{r4, r5, r6, pc}
   1f044:	pop	{r4, r5, r6, pc}
   1f048:	mov	r0, #0
   1f04c:	pop	{r4, r5, r6, pc}
   1f050:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f054:	ldr	r3, [r0, #4]
   1f058:	ldr	r8, [r0]
   1f05c:	cmp	r8, r3
   1f060:	bcs	1f0c4 <__assert_fail@plt+0xd350>
   1f064:	mov	r7, r2
   1f068:	mov	r6, r1
   1f06c:	mov	r9, r0
   1f070:	mov	r5, #0
   1f074:	ldr	r0, [r8]
   1f078:	cmp	r0, #0
   1f07c:	beq	1f0b0 <__assert_fail@plt+0xd33c>
   1f080:	mov	r4, r8
   1f084:	b	1f08c <__assert_fail@plt+0xd318>
   1f088:	ldr	r0, [r4]
   1f08c:	mov	r1, r7
   1f090:	blx	r6
   1f094:	cmp	r0, #0
   1f098:	beq	1f0bc <__assert_fail@plt+0xd348>
   1f09c:	ldr	r4, [r4, #4]
   1f0a0:	add	r5, r5, #1
   1f0a4:	cmp	r4, #0
   1f0a8:	bne	1f088 <__assert_fail@plt+0xd314>
   1f0ac:	ldr	r3, [r9, #4]
   1f0b0:	add	r8, r8, #8
   1f0b4:	cmp	r3, r8
   1f0b8:	bhi	1f074 <__assert_fail@plt+0xd300>
   1f0bc:	mov	r0, r5
   1f0c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f0c4:	mov	r5, #0
   1f0c8:	b	1f0bc <__assert_fail@plt+0xd348>
   1f0cc:	push	{r4, r5, r6, lr}
   1f0d0:	mov	r4, r0
   1f0d4:	ldrb	r0, [r0]
   1f0d8:	cmp	r0, #0
   1f0dc:	beq	1f10c <__assert_fail@plt+0xd398>
   1f0e0:	mov	r5, r1
   1f0e4:	mov	r1, #0
   1f0e8:	rsb	r1, r1, r1, lsl #5
   1f0ec:	add	r0, r1, r0
   1f0f0:	mov	r1, r5
   1f0f4:	bl	2b758 <_obstack_memory_used@@Base+0x71ac>
   1f0f8:	ldrb	r0, [r4, #1]!
   1f0fc:	cmp	r0, #0
   1f100:	bne	1f0e8 <__assert_fail@plt+0xd374>
   1f104:	mov	r0, r1
   1f108:	pop	{r4, r5, r6, pc}
   1f10c:	mov	r1, r0
   1f110:	b	1f104 <__assert_fail@plt+0xd390>
   1f114:	push	{lr}		; (str lr, [sp, #-4]!)
   1f118:	mov	ip, r0
   1f11c:	ldr	lr, [pc, #16]	; 1f134 <__assert_fail@plt+0xd3c0>
   1f120:	ldm	lr!, {r0, r1, r2, r3}
   1f124:	ldr	lr, [lr]
   1f128:	stmia	ip!, {r0, r1, r2, r3}
   1f12c:	str	lr, [ip]
   1f130:	pop	{pc}		; (ldr pc, [sp], #4)
   1f134:	andeq	r0, r3, r0, asr #2
   1f138:	cmp	r2, #0
   1f13c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f140:	mov	r4, r0
   1f144:	ldr	sl, [pc, #548]	; 1f370 <__assert_fail@plt+0xd5fc>
   1f148:	mov	r0, #40	; 0x28
   1f14c:	movne	sl, r2
   1f150:	cmp	r3, #0
   1f154:	ldr	fp, [pc, #536]	; 1f374 <__assert_fail@plt+0xd600>
   1f158:	mov	r5, r1
   1f15c:	movne	fp, r3
   1f160:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   1f164:	subs	r8, r0, #0
   1f168:	beq	1f200 <__assert_fail@plt+0xd48c>
   1f16c:	cmp	r5, #0
   1f170:	ldr	r3, [pc, #512]	; 1f378 <__assert_fail@plt+0xd604>
   1f174:	beq	1f208 <__assert_fail@plt+0xd494>
   1f178:	cmp	r5, r3
   1f17c:	str	r5, [r8, #20]
   1f180:	beq	1f20c <__assert_fail@plt+0xd498>
   1f184:	vldr	s15, [r5, #8]
   1f188:	vldr	s14, [pc, #456]	; 1f358 <__assert_fail@plt+0xd5e4>
   1f18c:	vcmpe.f32	s15, s14
   1f190:	vmrs	APSR_nzcv, fpscr
   1f194:	ble	1f1f0 <__assert_fail@plt+0xd47c>
   1f198:	vldr	s13, [pc, #444]	; 1f35c <__assert_fail@plt+0xd5e8>
   1f19c:	vcmpe.f32	s15, s13
   1f1a0:	vmrs	APSR_nzcv, fpscr
   1f1a4:	bpl	1f1f0 <__assert_fail@plt+0xd47c>
   1f1a8:	vldr	s13, [pc, #432]	; 1f360 <__assert_fail@plt+0xd5ec>
   1f1ac:	vldr	s12, [r5, #12]
   1f1b0:	vcmpe.f32	s12, s13
   1f1b4:	vmrs	APSR_nzcv, fpscr
   1f1b8:	ble	1f1f0 <__assert_fail@plt+0xd47c>
   1f1bc:	vldr	s13, [r5]
   1f1c0:	vcmpe.f32	s13, #0.0
   1f1c4:	vmrs	APSR_nzcv, fpscr
   1f1c8:	blt	1f1f0 <__assert_fail@plt+0xd47c>
   1f1cc:	vadd.f32	s14, s13, s14
   1f1d0:	vldr	s13, [r5, #4]
   1f1d4:	vcmpe.f32	s14, s13
   1f1d8:	vmrs	APSR_nzcv, fpscr
   1f1dc:	bpl	1f1f0 <__assert_fail@plt+0xd47c>
   1f1e0:	vldr	s12, [pc, #380]	; 1f364 <__assert_fail@plt+0xd5f0>
   1f1e4:	vcmpe.f32	s13, s12
   1f1e8:	vmrs	APSR_nzcv, fpscr
   1f1ec:	bls	1f33c <__assert_fail@plt+0xd5c8>
   1f1f0:	str	r3, [r8, #20]
   1f1f4:	mov	r0, r8
   1f1f8:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   1f1fc:	mov	r8, #0
   1f200:	mov	r0, r8
   1f204:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f208:	str	r3, [r8, #20]
   1f20c:	vldr	s15, [pc, #340]	; 1f368 <__assert_fail@plt+0xd5f4>
   1f210:	vmov	s14, r4
   1f214:	vldr	s13, [pc, #336]	; 1f36c <__assert_fail@plt+0xd5f8>
   1f218:	vcvt.f32.u32	s12, s14
   1f21c:	vdiv.f32	s14, s12, s15
   1f220:	vcmpe.f32	s14, s13
   1f224:	vmrs	APSR_nzcv, fpscr
   1f228:	bge	1f328 <__assert_fail@plt+0xd5b4>
   1f22c:	vcvt.u32.f32	s15, s14
   1f230:	vmov	r4, s15
   1f234:	cmp	r4, #10
   1f238:	movcc	r4, #10
   1f23c:	orr	r7, r4, #1
   1f240:	cmn	r7, #1
   1f244:	ldrne	r9, [pc, #304]	; 1f37c <__assert_fail@plt+0xd608>
   1f248:	beq	1f2c0 <__assert_fail@plt+0xd54c>
   1f24c:	cmp	r7, #9
   1f250:	bls	1f334 <__assert_fail@plt+0xd5c0>
   1f254:	umull	r2, r3, r9, r7
   1f258:	lsr	r3, r3, #1
   1f25c:	add	r3, r3, r3, lsl #1
   1f260:	cmp	r7, r3
   1f264:	beq	1f2b4 <__assert_fail@plt+0xd540>
   1f268:	mov	r6, #16
   1f26c:	mov	r5, #9
   1f270:	mov	r4, #3
   1f274:	b	1f288 <__assert_fail@plt+0xd514>
   1f278:	bl	2b758 <_obstack_memory_used@@Base+0x71ac>
   1f27c:	add	r6, r6, #8
   1f280:	cmp	r1, #0
   1f284:	beq	1f2b4 <__assert_fail@plt+0xd540>
   1f288:	add	r5, r5, r6
   1f28c:	add	r4, r4, #2
   1f290:	cmp	r5, r7
   1f294:	mov	r0, r7
   1f298:	mov	r1, r4
   1f29c:	bcc	1f278 <__assert_fail@plt+0xd504>
   1f2a0:	mov	r1, r4
   1f2a4:	mov	r0, r7
   1f2a8:	bl	2b758 <_obstack_memory_used@@Base+0x71ac>
   1f2ac:	cmp	r1, #0
   1f2b0:	bne	1f2c0 <__assert_fail@plt+0xd54c>
   1f2b4:	add	r7, r7, #2
   1f2b8:	cmn	r7, #1
   1f2bc:	bne	1f24c <__assert_fail@plt+0xd4d8>
   1f2c0:	lsrs	r3, r7, #30
   1f2c4:	movne	r4, #1
   1f2c8:	moveq	r4, #0
   1f2cc:	tst	r7, #536870912	; 0x20000000
   1f2d0:	bne	1f328 <__assert_fail@plt+0xd5b4>
   1f2d4:	cmp	r4, #0
   1f2d8:	bne	1f328 <__assert_fail@plt+0xd5b4>
   1f2dc:	str	r7, [r8, #8]
   1f2e0:	mov	r0, r7
   1f2e4:	mov	r1, #8
   1f2e8:	bl	2b1c4 <_obstack_memory_used@@Base+0x6c18>
   1f2ec:	cmp	r0, #0
   1f2f0:	str	r0, [r8]
   1f2f4:	beq	1f1f4 <__assert_fail@plt+0xd480>
   1f2f8:	ldr	r3, [r8, #8]
   1f2fc:	str	r4, [r8, #12]
   1f300:	str	r4, [r8, #16]
   1f304:	add	r0, r0, r3, lsl #3
   1f308:	ldr	r3, [sp, #40]	; 0x28
   1f30c:	str	r0, [r8, #4]
   1f310:	str	sl, [r8, #24]
   1f314:	str	fp, [r8, #28]
   1f318:	str	r3, [r8, #32]
   1f31c:	str	r4, [r8, #36]	; 0x24
   1f320:	mov	r0, r8
   1f324:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f328:	mov	r3, #0
   1f32c:	str	r3, [r8, #8]
   1f330:	b	1f1f4 <__assert_fail@plt+0xd480>
   1f334:	mov	r4, #3
   1f338:	b	1f2a0 <__assert_fail@plt+0xd52c>
   1f33c:	vcmpe.f32	s15, s14
   1f340:	vmrs	APSR_nzcv, fpscr
   1f344:	ble	1f1f0 <__assert_fail@plt+0xd47c>
   1f348:	ldrb	r3, [r5, #16]
   1f34c:	cmp	r3, #0
   1f350:	bne	1f234 <__assert_fail@plt+0xd4c0>
   1f354:	b	1f210 <__assert_fail@plt+0xd49c>
   1f358:	stclcc	12, cr12, [ip, #820]	; 0x334
   1f35c:	svccc	0x00666666
   1f360:	svccc	0x008ccccd
   1f364:	svccc	0x00800000
   1f368:	svccc	0x004ccccd
   1f36c:	svcmi	0x00800000
   1f370:			; <UNDEFINED> instruction: 0x0001e9b8
   1f374:	andeq	lr, r1, ip, asr #19
   1f378:	andeq	r0, r3, r0, asr #2
   1f37c:	bge	feac9e30 <optarg@@GLIBC_2.4+0xfea88b08>
   1f380:	push	{r4, r5, r6, r7, r8, lr}
   1f384:	mov	r5, r0
   1f388:	ldr	r7, [r0]
   1f38c:	ldr	r3, [r0, #4]
   1f390:	cmp	r7, r3
   1f394:	addcc	r7, r7, #8
   1f398:	movcc	r6, #0
   1f39c:	bcs	1f418 <__assert_fail@plt+0xd6a4>
   1f3a0:	ldr	r2, [r7, #-8]
   1f3a4:	mov	r8, r7
   1f3a8:	cmp	r2, #0
   1f3ac:	beq	1f40c <__assert_fail@plt+0xd698>
   1f3b0:	ldr	r4, [r7, #-4]
   1f3b4:	ldr	r2, [r5, #32]
   1f3b8:	cmp	r4, #0
   1f3bc:	beq	1f3f0 <__assert_fail@plt+0xd67c>
   1f3c0:	cmp	r2, #0
   1f3c4:	beq	1f3d4 <__assert_fail@plt+0xd660>
   1f3c8:	ldr	r0, [r4]
   1f3cc:	blx	r2
   1f3d0:	ldr	r2, [r5, #32]
   1f3d4:	ldr	r3, [r4, #4]
   1f3d8:	ldr	r1, [r5, #36]	; 0x24
   1f3dc:	str	r6, [r4]
   1f3e0:	str	r1, [r4, #4]
   1f3e4:	str	r4, [r5, #36]	; 0x24
   1f3e8:	subs	r4, r3, #0
   1f3ec:	bne	1f3c0 <__assert_fail@plt+0xd64c>
   1f3f0:	cmp	r2, #0
   1f3f4:	beq	1f400 <__assert_fail@plt+0xd68c>
   1f3f8:	ldr	r0, [r7, #-8]
   1f3fc:	blx	r2
   1f400:	str	r6, [r7, #-8]
   1f404:	str	r6, [r7, #-4]
   1f408:	ldr	r3, [r5, #4]
   1f40c:	cmp	r3, r8
   1f410:	add	r7, r7, #8
   1f414:	bhi	1f3a0 <__assert_fail@plt+0xd62c>
   1f418:	mov	r3, #0
   1f41c:	str	r3, [r5, #12]
   1f420:	str	r3, [r5, #16]
   1f424:	pop	{r4, r5, r6, r7, r8, pc}
   1f428:	ldr	r3, [r0, #32]
   1f42c:	push	{r4, r5, r6, lr}
   1f430:	cmp	r3, #0
   1f434:	mov	r5, r0
   1f438:	beq	1f498 <__assert_fail@plt+0xd724>
   1f43c:	ldr	r3, [r0, #16]
   1f440:	cmp	r3, #0
   1f444:	beq	1f498 <__assert_fail@plt+0xd724>
   1f448:	ldr	r6, [r0]
   1f44c:	ldr	r3, [r0, #4]
   1f450:	cmp	r6, r3
   1f454:	bcs	1f4d4 <__assert_fail@plt+0xd760>
   1f458:	ldr	r0, [r6]
   1f45c:	cmp	r0, #0
   1f460:	beq	1f488 <__assert_fail@plt+0xd714>
   1f464:	mov	r4, r6
   1f468:	b	1f470 <__assert_fail@plt+0xd6fc>
   1f46c:	ldr	r0, [r4]
   1f470:	ldr	r3, [r5, #32]
   1f474:	blx	r3
   1f478:	ldr	r4, [r4, #4]
   1f47c:	cmp	r4, #0
   1f480:	bne	1f46c <__assert_fail@plt+0xd6f8>
   1f484:	ldr	r3, [r5, #4]
   1f488:	add	r6, r6, #8
   1f48c:	cmp	r3, r6
   1f490:	bhi	1f458 <__assert_fail@plt+0xd6e4>
   1f494:	b	1f49c <__assert_fail@plt+0xd728>
   1f498:	ldr	r3, [r5, #4]
   1f49c:	ldr	r6, [r5]
   1f4a0:	cmp	r6, r3
   1f4a4:	bcs	1f4d4 <__assert_fail@plt+0xd760>
   1f4a8:	ldr	r0, [r6, #4]
   1f4ac:	cmp	r0, #0
   1f4b0:	beq	1f4c8 <__assert_fail@plt+0xd754>
   1f4b4:	ldr	r4, [r0, #4]
   1f4b8:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   1f4bc:	subs	r0, r4, #0
   1f4c0:	bne	1f4b4 <__assert_fail@plt+0xd740>
   1f4c4:	ldr	r3, [r5, #4]
   1f4c8:	add	r6, r6, #8
   1f4cc:	cmp	r3, r6
   1f4d0:	bhi	1f4a8 <__assert_fail@plt+0xd734>
   1f4d4:	ldr	r0, [r5, #36]	; 0x24
   1f4d8:	cmp	r0, #0
   1f4dc:	beq	1f4f0 <__assert_fail@plt+0xd77c>
   1f4e0:	ldr	r4, [r0, #4]
   1f4e4:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   1f4e8:	subs	r0, r4, #0
   1f4ec:	bne	1f4e0 <__assert_fail@plt+0xd76c>
   1f4f0:	ldr	r0, [r5]
   1f4f4:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   1f4f8:	mov	r0, r5
   1f4fc:	pop	{r4, r5, r6, lr}
   1f500:	b	1e8c8 <__assert_fail@plt+0xcb54>
   1f504:	ldr	r3, [r0, #20]
   1f508:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f50c:	mov	r8, r0
   1f510:	ldrb	r2, [r3, #16]
   1f514:	sub	sp, sp, #40	; 0x28
   1f518:	cmp	r2, #0
   1f51c:	bne	1f548 <__assert_fail@plt+0xd7d4>
   1f520:	vmov	s15, r1
   1f524:	vldr	s13, [r3, #8]
   1f528:	vldr	s14, [pc, #648]	; 1f7b8 <__assert_fail@plt+0xda44>
   1f52c:	vcvt.f32.u32	s12, s15
   1f530:	vdiv.f32	s15, s12, s13
   1f534:	vcmpe.f32	s15, s14
   1f538:	vmrs	APSR_nzcv, fpscr
   1f53c:	bge	1f770 <__assert_fail@plt+0xd9fc>
   1f540:	vcvt.u32.f32	s15, s15
   1f544:	vmov	r1, s15
   1f548:	cmp	r1, #10
   1f54c:	movcc	r1, #10
   1f550:	orr	r7, r1, #1
   1f554:	cmn	r7, #1
   1f558:	ldrne	r9, [pc, #604]	; 1f7bc <__assert_fail@plt+0xda48>
   1f55c:	beq	1f5d4 <__assert_fail@plt+0xd860>
   1f560:	cmp	r7, #9
   1f564:	bls	1f780 <__assert_fail@plt+0xda0c>
   1f568:	umull	r2, r3, r9, r7
   1f56c:	lsr	r3, r3, #1
   1f570:	add	r3, r3, r3, lsl #1
   1f574:	cmp	r7, r3
   1f578:	beq	1f5c8 <__assert_fail@plt+0xd854>
   1f57c:	mov	r6, #16
   1f580:	mov	r5, #9
   1f584:	mov	r4, #3
   1f588:	b	1f5a4 <__assert_fail@plt+0xd830>
   1f58c:	mov	r1, r4
   1f590:	mov	r0, r7
   1f594:	bl	2b758 <_obstack_memory_used@@Base+0x71ac>
   1f598:	add	r6, r6, #8
   1f59c:	cmp	r1, #0
   1f5a0:	beq	1f5c8 <__assert_fail@plt+0xd854>
   1f5a4:	add	r5, r5, r6
   1f5a8:	cmp	r5, r7
   1f5ac:	add	r4, r4, #2
   1f5b0:	bcc	1f58c <__assert_fail@plt+0xd818>
   1f5b4:	mov	r1, r4
   1f5b8:	mov	r0, r7
   1f5bc:	bl	2b758 <_obstack_memory_used@@Base+0x71ac>
   1f5c0:	cmp	r1, #0
   1f5c4:	bne	1f5d4 <__assert_fail@plt+0xd860>
   1f5c8:	add	r7, r7, #2
   1f5cc:	cmn	r7, #1
   1f5d0:	bne	1f560 <__assert_fail@plt+0xd7ec>
   1f5d4:	lsrs	r3, r7, #30
   1f5d8:	movne	r4, #1
   1f5dc:	moveq	r4, #0
   1f5e0:	tst	r7, #536870912	; 0x20000000
   1f5e4:	bne	1f770 <__assert_fail@plt+0xd9fc>
   1f5e8:	cmp	r4, #0
   1f5ec:	bne	1f770 <__assert_fail@plt+0xd9fc>
   1f5f0:	ldr	r3, [r8, #8]
   1f5f4:	cmp	r3, r7
   1f5f8:	beq	1f760 <__assert_fail@plt+0xd9ec>
   1f5fc:	mov	r1, #8
   1f600:	mov	r0, r7
   1f604:	bl	2b1c4 <_obstack_memory_used@@Base+0x6c18>
   1f608:	cmp	r0, #0
   1f60c:	str	r0, [sp]
   1f610:	beq	1f770 <__assert_fail@plt+0xd9fc>
   1f614:	ldr	r1, [r8, #24]
   1f618:	ldr	r5, [r8, #20]
   1f61c:	ldr	lr, [r8, #28]
   1f620:	ldr	ip, [r8, #32]
   1f624:	add	r0, r0, r7, lsl #3
   1f628:	ldr	r3, [r8, #36]	; 0x24
   1f62c:	str	r0, [sp, #4]
   1f630:	str	r1, [sp, #24]
   1f634:	mov	r2, r4
   1f638:	mov	r0, sp
   1f63c:	mov	r1, r8
   1f640:	str	r7, [sp, #8]
   1f644:	str	r4, [sp, #12]
   1f648:	str	r4, [sp, #16]
   1f64c:	str	r5, [sp, #20]
   1f650:	str	lr, [sp, #28]
   1f654:	str	ip, [sp, #32]
   1f658:	str	r3, [sp, #36]	; 0x24
   1f65c:	bl	1eafc <__assert_fail@plt+0xcd88>
   1f660:	subs	r9, r0, #0
   1f664:	bne	1f788 <__assert_fail@plt+0xda14>
   1f668:	ldr	r5, [sp]
   1f66c:	ldr	r2, [sp, #4]
   1f670:	ldr	r3, [sp, #36]	; 0x24
   1f674:	cmp	r5, r2
   1f678:	str	r3, [r8, #36]	; 0x24
   1f67c:	addcc	r5, r5, #8
   1f680:	movcc	r7, r9
   1f684:	bcs	1f734 <__assert_fail@plt+0xd9c0>
   1f688:	ldr	r3, [r5, #-8]
   1f68c:	mov	r6, r5
   1f690:	cmp	r3, #0
   1f694:	beq	1f728 <__assert_fail@plt+0xd9b4>
   1f698:	ldr	r4, [r5, #-4]
   1f69c:	cmp	r4, #0
   1f6a0:	beq	1f724 <__assert_fail@plt+0xd9b0>
   1f6a4:	ldr	r1, [r8, #8]
   1f6a8:	b	1f6c4 <__assert_fail@plt+0xd950>
   1f6ac:	ldr	r3, [ip, #4]
   1f6b0:	cmp	r2, #0
   1f6b4:	str	r3, [r4, #4]
   1f6b8:	str	r4, [ip, #4]
   1f6bc:	beq	1f720 <__assert_fail@plt+0xd9ac>
   1f6c0:	mov	r4, r2
   1f6c4:	ldr	sl, [r4]
   1f6c8:	ldr	r3, [r8, #24]
   1f6cc:	mov	r0, sl
   1f6d0:	blx	r3
   1f6d4:	ldr	r1, [r8, #8]
   1f6d8:	cmp	r0, r1
   1f6dc:	bcs	1f7b4 <__assert_fail@plt+0xda40>
   1f6e0:	ldr	r3, [r8]
   1f6e4:	ldr	r2, [r4, #4]
   1f6e8:	add	ip, r3, r0, lsl #3
   1f6ec:	ldr	lr, [r3, r0, lsl #3]
   1f6f0:	cmp	lr, #0
   1f6f4:	bne	1f6ac <__assert_fail@plt+0xd938>
   1f6f8:	ldr	ip, [r8, #12]
   1f6fc:	str	sl, [r3, r0, lsl #3]
   1f700:	add	r3, ip, #1
   1f704:	str	r3, [r8, #12]
   1f708:	str	lr, [r4]
   1f70c:	ldr	r3, [r8, #36]	; 0x24
   1f710:	cmp	r2, #0
   1f714:	str	r3, [r4, #4]
   1f718:	str	r4, [r8, #36]	; 0x24
   1f71c:	bne	1f6c0 <__assert_fail@plt+0xd94c>
   1f720:	ldr	r2, [sp, #4]
   1f724:	str	r7, [r5, #-4]
   1f728:	cmp	r6, r2
   1f72c:	add	r5, r5, #8
   1f730:	bcc	1f688 <__assert_fail@plt+0xd914>
   1f734:	mov	r1, sp
   1f738:	mov	r0, r8
   1f73c:	mov	r2, #0
   1f740:	bl	1eafc <__assert_fail@plt+0xcd88>
   1f744:	cmp	r0, #0
   1f748:	beq	1f7b4 <__assert_fail@plt+0xda40>
   1f74c:	ldr	r0, [sp]
   1f750:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   1f754:	mov	r0, r9
   1f758:	add	sp, sp, #40	; 0x28
   1f75c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f760:	mov	r9, #1
   1f764:	mov	r0, r9
   1f768:	add	sp, sp, #40	; 0x28
   1f76c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f770:	mov	r9, #0
   1f774:	mov	r0, r9
   1f778:	add	sp, sp, #40	; 0x28
   1f77c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f780:	mov	r4, #3
   1f784:	b	1f5b4 <__assert_fail@plt+0xd840>
   1f788:	ldr	r0, [r8]
   1f78c:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   1f790:	ldmib	sp, {r0, r1, r2}
   1f794:	ldr	ip, [sp]
   1f798:	ldr	r3, [sp, #36]	; 0x24
   1f79c:	stmib	r8, {r0, r1, r2}
   1f7a0:	mov	r0, r9
   1f7a4:	str	ip, [r8]
   1f7a8:	str	r3, [r8, #36]	; 0x24
   1f7ac:	add	sp, sp, #40	; 0x28
   1f7b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f7b4:	bl	11d2c <abort@plt>
   1f7b8:	svcmi	0x00800000
   1f7bc:	bge	feaca270 <optarg@@GLIBC_2.4+0xfea88f48>
   1f7c0:	push	{r4, r5, r6, r7, r8, r9, lr}
   1f7c4:	subs	r5, r1, #0
   1f7c8:	sub	sp, sp, #12
   1f7cc:	beq	1f9e8 <__assert_fail@plt+0xdc74>
   1f7d0:	ldr	r3, [r0, #24]
   1f7d4:	mov	r6, r0
   1f7d8:	ldr	r1, [r0, #8]
   1f7dc:	mov	r0, r5
   1f7e0:	mov	r7, r2
   1f7e4:	blx	r3
   1f7e8:	ldr	r3, [r6, #8]
   1f7ec:	cmp	r0, r3
   1f7f0:	mov	r8, r0
   1f7f4:	bcs	1f9e8 <__assert_fail@plt+0xdc74>
   1f7f8:	ldr	r9, [r6]
   1f7fc:	add	r4, r9, r0, lsl #3
   1f800:	ldr	r1, [r9, r0, lsl #3]
   1f804:	str	r4, [sp, #4]
   1f808:	cmp	r1, #0
   1f80c:	beq	1f9ec <__assert_fail@plt+0xdc78>
   1f810:	cmp	r5, r1
   1f814:	beq	1f86c <__assert_fail@plt+0xdaf8>
   1f818:	ldr	r3, [r6, #28]
   1f81c:	mov	r0, r5
   1f820:	blx	r3
   1f824:	cmp	r0, #0
   1f828:	bne	1f880 <__assert_fail@plt+0xdb0c>
   1f82c:	ldr	r3, [r4, #4]
   1f830:	cmp	r3, #0
   1f834:	bne	1f860 <__assert_fail@plt+0xdaec>
   1f838:	b	1f88c <__assert_fail@plt+0xdb18>
   1f83c:	ldr	r3, [r6, #28]
   1f840:	mov	r0, r5
   1f844:	blx	r3
   1f848:	cmp	r0, #0
   1f84c:	bne	1f900 <__assert_fail@plt+0xdb8c>
   1f850:	ldr	r4, [r4, #4]
   1f854:	ldr	r3, [r4, #4]
   1f858:	cmp	r3, #0
   1f85c:	beq	1f88c <__assert_fail@plt+0xdb18>
   1f860:	ldr	r1, [r3]
   1f864:	cmp	r5, r1
   1f868:	bne	1f83c <__assert_fail@plt+0xdac8>
   1f86c:	mov	r0, #0
   1f870:	cmp	r7, #0
   1f874:	strne	r1, [r7]
   1f878:	add	sp, sp, #12
   1f87c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1f880:	ldr	r1, [r9, r8, lsl #3]
   1f884:	cmp	r1, #0
   1f888:	bne	1f86c <__assert_fail@plt+0xdaf8>
   1f88c:	vldr	s15, [r6, #8]
   1f890:	ldr	r3, [r6, #20]
   1f894:	vldr	s14, [r6, #12]
   1f898:	vcvt.f32.u32	s15, s15
   1f89c:	vldr	s13, [r3, #8]
   1f8a0:	vcvt.f32.u32	s14, s14
   1f8a4:	vmul.f32	s12, s13, s15
   1f8a8:	vcmpe.f32	s14, s12
   1f8ac:	vmrs	APSR_nzcv, fpscr
   1f8b0:	bgt	1f90c <__assert_fail@plt+0xdb98>
   1f8b4:	ldr	r4, [sp, #4]
   1f8b8:	ldr	r3, [r4]
   1f8bc:	cmp	r3, #0
   1f8c0:	beq	1fa50 <__assert_fail@plt+0xdcdc>
   1f8c4:	ldr	r3, [r6, #36]	; 0x24
   1f8c8:	cmp	r3, #0
   1f8cc:	beq	1fa38 <__assert_fail@plt+0xdcc4>
   1f8d0:	ldr	r2, [r3, #4]
   1f8d4:	str	r2, [r6, #36]	; 0x24
   1f8d8:	ldr	r2, [r6, #16]
   1f8dc:	ldr	r1, [r4, #4]
   1f8e0:	add	r2, r2, #1
   1f8e4:	str	r5, [r3]
   1f8e8:	str	r1, [r3, #4]
   1f8ec:	mov	r0, #1
   1f8f0:	str	r3, [r4, #4]
   1f8f4:	str	r2, [r6, #16]
   1f8f8:	add	sp, sp, #12
   1f8fc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1f900:	ldr	r3, [r4, #4]
   1f904:	ldr	r1, [r3]
   1f908:	b	1f884 <__assert_fail@plt+0xdb10>
   1f90c:	ldr	r2, [pc, #392]	; 1fa9c <__assert_fail@plt+0xdd28>
   1f910:	cmp	r3, r2
   1f914:	beq	1f998 <__assert_fail@plt+0xdc24>
   1f918:	vldr	s12, [pc, #352]	; 1fa80 <__assert_fail@plt+0xdd0c>
   1f91c:	vcmpe.f32	s13, s12
   1f920:	vmrs	APSR_nzcv, fpscr
   1f924:	ble	1f980 <__assert_fail@plt+0xdc0c>
   1f928:	vldr	s11, [pc, #340]	; 1fa84 <__assert_fail@plt+0xdd10>
   1f92c:	vcmpe.f32	s13, s11
   1f930:	vmrs	APSR_nzcv, fpscr
   1f934:	bpl	1f980 <__assert_fail@plt+0xdc0c>
   1f938:	vldr	s11, [r3, #12]
   1f93c:	vldr	s10, [pc, #324]	; 1fa88 <__assert_fail@plt+0xdd14>
   1f940:	vcmpe.f32	s11, s10
   1f944:	vmrs	APSR_nzcv, fpscr
   1f948:	ble	1f980 <__assert_fail@plt+0xdc0c>
   1f94c:	vldr	s10, [r3]
   1f950:	vcmpe.f32	s10, #0.0
   1f954:	vmrs	APSR_nzcv, fpscr
   1f958:	blt	1f980 <__assert_fail@plt+0xdc0c>
   1f95c:	vadd.f32	s12, s10, s12
   1f960:	vldr	s10, [r3, #4]
   1f964:	vcmpe.f32	s12, s10
   1f968:	vmrs	APSR_nzcv, fpscr
   1f96c:	bpl	1f980 <__assert_fail@plt+0xdc0c>
   1f970:	vldr	s9, [pc, #276]	; 1fa8c <__assert_fail@plt+0xdd18>
   1f974:	vcmpe.f32	s10, s9
   1f978:	vmrs	APSR_nzcv, fpscr
   1f97c:	bls	1fa60 <__assert_fail@plt+0xdcec>
   1f980:	vldr	s13, [pc, #264]	; 1fa90 <__assert_fail@plt+0xdd1c>
   1f984:	str	r2, [r6, #20]
   1f988:	vmul.f32	s12, s15, s13
   1f98c:	vcmpe.f32	s12, s14
   1f990:	vmrs	APSR_nzcv, fpscr
   1f994:	bpl	1f8b4 <__assert_fail@plt+0xdb40>
   1f998:	vldr	s11, [pc, #244]	; 1fa94 <__assert_fail@plt+0xdd20>
   1f99c:	vmul.f32	s15, s15, s11
   1f9a0:	vmul.f32	s15, s15, s13
   1f9a4:	vldr	s14, [pc, #236]	; 1fa98 <__assert_fail@plt+0xdd24>
   1f9a8:	vcmpe.f32	s15, s14
   1f9ac:	vmrs	APSR_nzcv, fpscr
   1f9b0:	bge	1fa58 <__assert_fail@plt+0xdce4>
   1f9b4:	vcvt.u32.f32	s15, s15
   1f9b8:	mov	r0, r6
   1f9bc:	vmov	r1, s15
   1f9c0:	bl	1f504 <__assert_fail@plt+0xd790>
   1f9c4:	cmp	r0, #0
   1f9c8:	beq	1fa58 <__assert_fail@plt+0xdce4>
   1f9cc:	mov	r3, #0
   1f9d0:	add	r2, sp, #4
   1f9d4:	mov	r1, r5
   1f9d8:	mov	r0, r6
   1f9dc:	bl	1e9dc <__assert_fail@plt+0xcc68>
   1f9e0:	cmp	r0, #0
   1f9e4:	beq	1f8b4 <__assert_fail@plt+0xdb40>
   1f9e8:	bl	11d2c <abort@plt>
   1f9ec:	vmov	s15, r3
   1f9f0:	ldr	r2, [r6, #12]
   1f9f4:	ldr	r3, [r6, #20]
   1f9f8:	vcvt.f32.u32	s15, s15
   1f9fc:	vldr	s13, [r3, #8]
   1fa00:	vmov	s14, r2
   1fa04:	vcvt.f32.u32	s14, s14
   1fa08:	vmul.f32	s12, s13, s15
   1fa0c:	vcmpe.f32	s14, s12
   1fa10:	vmrs	APSR_nzcv, fpscr
   1fa14:	bgt	1f90c <__assert_fail@plt+0xdb98>
   1fa18:	ldr	r3, [r6, #16]
   1fa1c:	add	r2, r2, #1
   1fa20:	add	r3, r3, #1
   1fa24:	str	r5, [r4]
   1fa28:	mov	r0, #1
   1fa2c:	str	r2, [r6, #12]
   1fa30:	str	r3, [r6, #16]
   1fa34:	b	1f878 <__assert_fail@plt+0xdb04>
   1fa38:	mov	r0, #8
   1fa3c:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   1fa40:	subs	r3, r0, #0
   1fa44:	beq	1fa58 <__assert_fail@plt+0xdce4>
   1fa48:	ldr	r4, [sp, #4]
   1fa4c:	b	1f8d8 <__assert_fail@plt+0xdb64>
   1fa50:	ldr	r2, [r6, #12]
   1fa54:	b	1fa18 <__assert_fail@plt+0xdca4>
   1fa58:	mvn	r0, #0
   1fa5c:	b	1f878 <__assert_fail@plt+0xdb04>
   1fa60:	vcmpe.f32	s12, s13
   1fa64:	vmrs	APSR_nzcv, fpscr
   1fa68:	bpl	1f980 <__assert_fail@plt+0xdc0c>
   1fa6c:	ldrb	r3, [r3, #16]
   1fa70:	cmp	r3, #0
   1fa74:	vmulne.f32	s15, s11, s15
   1fa78:	bne	1f9a4 <__assert_fail@plt+0xdc30>
   1fa7c:	b	1f99c <__assert_fail@plt+0xdc28>
   1fa80:	stclcc	12, cr12, [ip, #820]	; 0x334
   1fa84:	svccc	0x00666666
   1fa88:	svccc	0x008ccccd
   1fa8c:	svccc	0x00800000
   1fa90:	svccc	0x004ccccd
   1fa94:	svccc	0x00b4fdf4
   1fa98:	svcmi	0x00800000
   1fa9c:	andeq	r0, r3, r0, asr #2
   1faa0:	push	{r4, r5, r6, r7, r8, lr}
   1faa4:	subs	r5, r1, #0
   1faa8:	sub	sp, sp, #8
   1faac:	beq	1fcb0 <__assert_fail@plt+0xdf3c>
   1fab0:	ldr	r3, [r0, #24]
   1fab4:	mov	r6, r0
   1fab8:	ldr	r1, [r0, #8]
   1fabc:	mov	r0, r5
   1fac0:	blx	r3
   1fac4:	ldr	r3, [r6, #8]
   1fac8:	cmp	r0, r3
   1facc:	mov	r7, r0
   1fad0:	bcs	1fcb0 <__assert_fail@plt+0xdf3c>
   1fad4:	ldr	r8, [r6]
   1fad8:	add	r4, r8, r0, lsl #3
   1fadc:	ldr	r1, [r8, r0, lsl #3]
   1fae0:	str	r4, [sp, #4]
   1fae4:	cmp	r1, #0
   1fae8:	beq	1fcb4 <__assert_fail@plt+0xdf40>
   1faec:	cmp	r5, r1
   1faf0:	beq	1fb14 <__assert_fail@plt+0xdda0>
   1faf4:	ldr	r3, [r6, #28]
   1faf8:	mov	r0, r5
   1fafc:	blx	r3
   1fb00:	cmp	r0, #0
   1fb04:	beq	1fb44 <__assert_fail@plt+0xddd0>
   1fb08:	ldr	r1, [r8, r7, lsl #3]
   1fb0c:	cmp	r1, #0
   1fb10:	beq	1fb50 <__assert_fail@plt+0xdddc>
   1fb14:	mov	r0, r1
   1fb18:	add	sp, sp, #8
   1fb1c:	pop	{r4, r5, r6, r7, r8, pc}
   1fb20:	ldr	r1, [r3]
   1fb24:	cmp	r5, r1
   1fb28:	beq	1fb14 <__assert_fail@plt+0xdda0>
   1fb2c:	ldr	r3, [r6, #28]
   1fb30:	mov	r0, r5
   1fb34:	blx	r3
   1fb38:	cmp	r0, #0
   1fb3c:	bne	1fbc8 <__assert_fail@plt+0xde54>
   1fb40:	ldr	r4, [r4, #4]
   1fb44:	ldr	r3, [r4, #4]
   1fb48:	cmp	r3, #0
   1fb4c:	bne	1fb20 <__assert_fail@plt+0xddac>
   1fb50:	vldr	s15, [r6, #8]
   1fb54:	ldr	r3, [r6, #20]
   1fb58:	vldr	s14, [r6, #12]
   1fb5c:	vcvt.f32.u32	s15, s15
   1fb60:	vldr	s13, [r3, #8]
   1fb64:	vcvt.f32.u32	s14, s14
   1fb68:	vmul.f32	s12, s13, s15
   1fb6c:	vcmpe.f32	s14, s12
   1fb70:	vmrs	APSR_nzcv, fpscr
   1fb74:	bgt	1fbd4 <__assert_fail@plt+0xde60>
   1fb78:	ldr	r4, [sp, #4]
   1fb7c:	ldr	r3, [r4]
   1fb80:	cmp	r3, #0
   1fb84:	beq	1fd14 <__assert_fail@plt+0xdfa0>
   1fb88:	ldr	r0, [r6, #36]	; 0x24
   1fb8c:	cmp	r0, #0
   1fb90:	beq	1fcfc <__assert_fail@plt+0xdf88>
   1fb94:	ldr	r3, [r0, #4]
   1fb98:	str	r3, [r6, #36]	; 0x24
   1fb9c:	ldr	r3, [r6, #16]
   1fba0:	ldr	r2, [r4, #4]
   1fba4:	add	r3, r3, #1
   1fba8:	str	r5, [r0]
   1fbac:	str	r2, [r0, #4]
   1fbb0:	str	r0, [r4, #4]
   1fbb4:	str	r3, [r6, #16]
   1fbb8:	mov	r1, r5
   1fbbc:	mov	r0, r1
   1fbc0:	add	sp, sp, #8
   1fbc4:	pop	{r4, r5, r6, r7, r8, pc}
   1fbc8:	ldr	r3, [r4, #4]
   1fbcc:	ldr	r1, [r3]
   1fbd0:	b	1fb0c <__assert_fail@plt+0xdd98>
   1fbd4:	ldr	r2, [pc, #388]	; 1fd60 <__assert_fail@plt+0xdfec>
   1fbd8:	cmp	r3, r2
   1fbdc:	beq	1fc60 <__assert_fail@plt+0xdeec>
   1fbe0:	vldr	s12, [pc, #348]	; 1fd44 <__assert_fail@plt+0xdfd0>
   1fbe4:	vcmpe.f32	s13, s12
   1fbe8:	vmrs	APSR_nzcv, fpscr
   1fbec:	ble	1fc48 <__assert_fail@plt+0xded4>
   1fbf0:	vldr	s11, [pc, #336]	; 1fd48 <__assert_fail@plt+0xdfd4>
   1fbf4:	vcmpe.f32	s13, s11
   1fbf8:	vmrs	APSR_nzcv, fpscr
   1fbfc:	bpl	1fc48 <__assert_fail@plt+0xded4>
   1fc00:	vldr	s11, [r3, #12]
   1fc04:	vldr	s10, [pc, #320]	; 1fd4c <__assert_fail@plt+0xdfd8>
   1fc08:	vcmpe.f32	s11, s10
   1fc0c:	vmrs	APSR_nzcv, fpscr
   1fc10:	ble	1fc48 <__assert_fail@plt+0xded4>
   1fc14:	vldr	s10, [r3]
   1fc18:	vcmpe.f32	s10, #0.0
   1fc1c:	vmrs	APSR_nzcv, fpscr
   1fc20:	blt	1fc48 <__assert_fail@plt+0xded4>
   1fc24:	vadd.f32	s12, s10, s12
   1fc28:	vldr	s10, [r3, #4]
   1fc2c:	vcmpe.f32	s12, s10
   1fc30:	vmrs	APSR_nzcv, fpscr
   1fc34:	bpl	1fc48 <__assert_fail@plt+0xded4>
   1fc38:	vldr	s9, [pc, #272]	; 1fd50 <__assert_fail@plt+0xdfdc>
   1fc3c:	vcmpe.f32	s10, s9
   1fc40:	vmrs	APSR_nzcv, fpscr
   1fc44:	bls	1fd24 <__assert_fail@plt+0xdfb0>
   1fc48:	vldr	s13, [pc, #260]	; 1fd54 <__assert_fail@plt+0xdfe0>
   1fc4c:	str	r2, [r6, #20]
   1fc50:	vmul.f32	s12, s15, s13
   1fc54:	vcmpe.f32	s12, s14
   1fc58:	vmrs	APSR_nzcv, fpscr
   1fc5c:	bpl	1fb78 <__assert_fail@plt+0xde04>
   1fc60:	vldr	s11, [pc, #240]	; 1fd58 <__assert_fail@plt+0xdfe4>
   1fc64:	vmul.f32	s15, s15, s11
   1fc68:	vmul.f32	s15, s15, s13
   1fc6c:	vldr	s14, [pc, #232]	; 1fd5c <__assert_fail@plt+0xdfe8>
   1fc70:	vcmpe.f32	s15, s14
   1fc74:	vmrs	APSR_nzcv, fpscr
   1fc78:	bge	1fd1c <__assert_fail@plt+0xdfa8>
   1fc7c:	vcvt.u32.f32	s15, s15
   1fc80:	mov	r0, r6
   1fc84:	vmov	r1, s15
   1fc88:	bl	1f504 <__assert_fail@plt+0xd790>
   1fc8c:	cmp	r0, #0
   1fc90:	beq	1fd1c <__assert_fail@plt+0xdfa8>
   1fc94:	mov	r3, #0
   1fc98:	add	r2, sp, #4
   1fc9c:	mov	r1, r5
   1fca0:	mov	r0, r6
   1fca4:	bl	1e9dc <__assert_fail@plt+0xcc68>
   1fca8:	cmp	r0, #0
   1fcac:	beq	1fb78 <__assert_fail@plt+0xde04>
   1fcb0:	bl	11d2c <abort@plt>
   1fcb4:	vmov	s15, r3
   1fcb8:	ldr	r2, [r6, #12]
   1fcbc:	ldr	r3, [r6, #20]
   1fcc0:	vcvt.f32.u32	s15, s15
   1fcc4:	vldr	s13, [r3, #8]
   1fcc8:	vmov	s14, r2
   1fccc:	vcvt.f32.u32	s14, s14
   1fcd0:	vmul.f32	s12, s15, s13
   1fcd4:	vcmpe.f32	s12, s14
   1fcd8:	vmrs	APSR_nzcv, fpscr
   1fcdc:	bmi	1fbd4 <__assert_fail@plt+0xde60>
   1fce0:	ldr	r3, [r6, #16]
   1fce4:	add	r2, r2, #1
   1fce8:	add	r3, r3, #1
   1fcec:	str	r5, [r4]
   1fcf0:	str	r2, [r6, #12]
   1fcf4:	str	r3, [r6, #16]
   1fcf8:	b	1fbb8 <__assert_fail@plt+0xde44>
   1fcfc:	mov	r0, #8
   1fd00:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   1fd04:	cmp	r0, #0
   1fd08:	beq	1fd1c <__assert_fail@plt+0xdfa8>
   1fd0c:	ldr	r4, [sp, #4]
   1fd10:	b	1fb9c <__assert_fail@plt+0xde28>
   1fd14:	ldr	r2, [r6, #12]
   1fd18:	b	1fce0 <__assert_fail@plt+0xdf6c>
   1fd1c:	mov	r1, #0
   1fd20:	b	1fb14 <__assert_fail@plt+0xdda0>
   1fd24:	vcmpe.f32	s12, s13
   1fd28:	vmrs	APSR_nzcv, fpscr
   1fd2c:	bpl	1fc48 <__assert_fail@plt+0xded4>
   1fd30:	ldrb	r3, [r3, #16]
   1fd34:	cmp	r3, #0
   1fd38:	vmulne.f32	s15, s11, s15
   1fd3c:	bne	1fc6c <__assert_fail@plt+0xdef8>
   1fd40:	b	1fc64 <__assert_fail@plt+0xdef0>
   1fd44:	stclcc	12, cr12, [ip, #820]	; 0x334
   1fd48:	svccc	0x00666666
   1fd4c:	svccc	0x008ccccd
   1fd50:	svccc	0x00800000
   1fd54:	svccc	0x004ccccd
   1fd58:	svccc	0x00b4fdf4
   1fd5c:	svcmi	0x00800000
   1fd60:	andeq	r0, r3, r0, asr #2
   1fd64:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1fd68:	mov	r7, r1
   1fd6c:	ldr	r3, [r0, #24]
   1fd70:	mov	r6, r0
   1fd74:	ldr	r1, [r0, #8]
   1fd78:	mov	r0, r7
   1fd7c:	blx	r3
   1fd80:	ldr	r3, [r6, #8]
   1fd84:	cmp	r0, r3
   1fd88:	bcs	1ffb4 <__assert_fail@plt+0xe240>
   1fd8c:	ldr	r9, [r6]
   1fd90:	mov	r8, r0
   1fd94:	add	r5, r9, r0, lsl #3
   1fd98:	ldr	r4, [r9, r0, lsl #3]
   1fd9c:	cmp	r4, #0
   1fda0:	beq	1fe4c <__assert_fail@plt+0xe0d8>
   1fda4:	cmp	r7, r4
   1fda8:	beq	1fdc8 <__assert_fail@plt+0xe054>
   1fdac:	mov	r1, r4
   1fdb0:	ldr	r3, [r6, #28]
   1fdb4:	mov	r0, r7
   1fdb8:	blx	r3
   1fdbc:	cmp	r0, #0
   1fdc0:	beq	1fe40 <__assert_fail@plt+0xe0cc>
   1fdc4:	ldr	r4, [r9, r8, lsl #3]
   1fdc8:	ldr	r3, [r5, #4]
   1fdcc:	cmp	r3, #0
   1fdd0:	movne	r2, #0
   1fdd4:	ldmne	r3, {r0, r1}
   1fdd8:	streq	r3, [r9, r8, lsl #3]
   1fddc:	stmne	r5, {r0, r1}
   1fde0:	strne	r2, [r3]
   1fde4:	ldrne	r2, [r6, #36]	; 0x24
   1fde8:	strne	r2, [r3, #4]
   1fdec:	strne	r3, [r6, #36]	; 0x24
   1fdf0:	cmp	r4, #0
   1fdf4:	beq	1fe4c <__assert_fail@plt+0xe0d8>
   1fdf8:	ldr	r2, [r9, r8, lsl #3]
   1fdfc:	ldr	r3, [r6, #16]
   1fe00:	cmp	r2, #0
   1fe04:	sub	r3, r3, #1
   1fe08:	str	r3, [r6, #16]
   1fe0c:	beq	1fe80 <__assert_fail@plt+0xe10c>
   1fe10:	mov	r0, r4
   1fe14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fe18:	ldr	r4, [r3]
   1fe1c:	cmp	r7, r4
   1fe20:	beq	1fe60 <__assert_fail@plt+0xe0ec>
   1fe24:	mov	r1, r4
   1fe28:	ldr	r3, [r6, #28]
   1fe2c:	mov	r0, r7
   1fe30:	blx	r3
   1fe34:	cmp	r0, #0
   1fe38:	bne	1fe58 <__assert_fail@plt+0xe0e4>
   1fe3c:	ldr	r5, [r5, #4]
   1fe40:	ldr	r3, [r5, #4]
   1fe44:	cmp	r3, #0
   1fe48:	bne	1fe18 <__assert_fail@plt+0xe0a4>
   1fe4c:	mov	r4, #0
   1fe50:	mov	r0, r4
   1fe54:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fe58:	ldr	r3, [r5, #4]
   1fe5c:	ldr	r4, [r3]
   1fe60:	ldr	r1, [r3, #4]
   1fe64:	mov	r2, #0
   1fe68:	str	r1, [r5, #4]
   1fe6c:	str	r2, [r3]
   1fe70:	ldr	r2, [r6, #36]	; 0x24
   1fe74:	str	r2, [r3, #4]
   1fe78:	str	r3, [r6, #36]	; 0x24
   1fe7c:	b	1fdf0 <__assert_fail@plt+0xe07c>
   1fe80:	vldr	s15, [r6, #8]
   1fe84:	ldr	r3, [r6, #12]
   1fe88:	ldr	r2, [r6, #20]
   1fe8c:	sub	r3, r3, #1
   1fe90:	vcvt.f32.u32	s14, s15
   1fe94:	vldr	s13, [r2]
   1fe98:	vmov	s15, r3
   1fe9c:	str	r3, [r6, #12]
   1fea0:	vcvt.f32.u32	s15, s15
   1fea4:	vmul.f32	s12, s13, s14
   1fea8:	vcmpe.f32	s15, s12
   1feac:	vmrs	APSR_nzcv, fpscr
   1feb0:	bpl	1fe10 <__assert_fail@plt+0xe09c>
   1feb4:	ldr	r3, [pc, #276]	; 1ffd0 <__assert_fail@plt+0xe25c>
   1feb8:	cmp	r2, r3
   1febc:	beq	1ff9c <__assert_fail@plt+0xe228>
   1fec0:	vldr	s12, [r2, #8]
   1fec4:	vldr	s11, [pc, #236]	; 1ffb8 <__assert_fail@plt+0xe244>
   1fec8:	vcmpe.f32	s12, s11
   1fecc:	vmrs	APSR_nzcv, fpscr
   1fed0:	ble	1ff84 <__assert_fail@plt+0xe210>
   1fed4:	vldr	s10, [pc, #224]	; 1ffbc <__assert_fail@plt+0xe248>
   1fed8:	vcmpe.f32	s12, s10
   1fedc:	vmrs	APSR_nzcv, fpscr
   1fee0:	bpl	1ff84 <__assert_fail@plt+0xe210>
   1fee4:	vldr	s10, [pc, #212]	; 1ffc0 <__assert_fail@plt+0xe24c>
   1fee8:	vldr	s9, [r2, #12]
   1feec:	vcmpe.f32	s9, s10
   1fef0:	vmrs	APSR_nzcv, fpscr
   1fef4:	ble	1ff84 <__assert_fail@plt+0xe210>
   1fef8:	vcmpe.f32	s13, #0.0
   1fefc:	vmrs	APSR_nzcv, fpscr
   1ff00:	blt	1ff84 <__assert_fail@plt+0xe210>
   1ff04:	vadd.f32	s13, s13, s11
   1ff08:	vldr	s11, [r2, #4]
   1ff0c:	vcmpe.f32	s13, s11
   1ff10:	vmrs	APSR_nzcv, fpscr
   1ff14:	bpl	1ff84 <__assert_fail@plt+0xe210>
   1ff18:	vldr	s10, [pc, #164]	; 1ffc4 <__assert_fail@plt+0xe250>
   1ff1c:	vcmpe.f32	s11, s10
   1ff20:	vmrs	APSR_nzcv, fpscr
   1ff24:	bhi	1ff84 <__assert_fail@plt+0xe210>
   1ff28:	vcmpe.f32	s12, s13
   1ff2c:	vmrs	APSR_nzcv, fpscr
   1ff30:	ble	1ff84 <__assert_fail@plt+0xe210>
   1ff34:	ldrb	r3, [r2, #16]
   1ff38:	cmp	r3, #0
   1ff3c:	beq	1ffa4 <__assert_fail@plt+0xe230>
   1ff40:	vmul.f32	s15, s14, s11
   1ff44:	vcvt.u32.f32	s15, s15
   1ff48:	vmov	r1, s15
   1ff4c:	mov	r0, r6
   1ff50:	bl	1f504 <__assert_fail@plt+0xd790>
   1ff54:	cmp	r0, #0
   1ff58:	bne	1fe10 <__assert_fail@plt+0xe09c>
   1ff5c:	ldr	r0, [r6, #36]	; 0x24
   1ff60:	cmp	r0, #0
   1ff64:	beq	1ff78 <__assert_fail@plt+0xe204>
   1ff68:	ldr	r5, [r0, #4]
   1ff6c:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   1ff70:	subs	r0, r5, #0
   1ff74:	bne	1ff68 <__assert_fail@plt+0xe1f4>
   1ff78:	mov	r3, #0
   1ff7c:	str	r3, [r6, #36]	; 0x24
   1ff80:	b	1fe10 <__assert_fail@plt+0xe09c>
   1ff84:	vldr	s13, [pc, #60]	; 1ffc8 <__assert_fail@plt+0xe254>
   1ff88:	str	r3, [r6, #20]
   1ff8c:	vmul.f32	s13, s14, s13
   1ff90:	vcmpe.f32	s15, s13
   1ff94:	vmrs	APSR_nzcv, fpscr
   1ff98:	bpl	1fe10 <__assert_fail@plt+0xe09c>
   1ff9c:	vldr	s12, [pc, #40]	; 1ffcc <__assert_fail@plt+0xe258>
   1ffa0:	vldr	s11, [pc, #28]	; 1ffc4 <__assert_fail@plt+0xe250>
   1ffa4:	vmul.f32	s15, s14, s11
   1ffa8:	vmul.f32	s15, s15, s12
   1ffac:	vcvt.u32.f32	s15, s15
   1ffb0:	b	1ff48 <__assert_fail@plt+0xe1d4>
   1ffb4:	bl	11d2c <abort@plt>
   1ffb8:	stclcc	12, cr12, [ip, #820]	; 0x334
   1ffbc:	svccc	0x00666666
   1ffc0:	svccc	0x008ccccd
   1ffc4:	svccc	0x00800000
   1ffc8:	andeq	r0, r0, r0
   1ffcc:	svccc	0x004ccccd
   1ffd0:	andeq	r0, r3, r0, asr #2
   1ffd4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ffd8:	mov	r7, r1
   1ffdc:	ldr	r3, [r0, #24]
   1ffe0:	mov	r6, r0
   1ffe4:	ldr	r1, [r0, #8]
   1ffe8:	mov	r0, r7
   1ffec:	blx	r3
   1fff0:	ldr	r3, [r6, #8]
   1fff4:	cmp	r0, r3
   1fff8:	bcs	20224 <__assert_fail@plt+0xe4b0>
   1fffc:	ldr	r9, [r6]
   20000:	mov	r8, r0
   20004:	add	r5, r9, r0, lsl #3
   20008:	ldr	r4, [r9, r0, lsl #3]
   2000c:	cmp	r4, #0
   20010:	beq	200bc <__assert_fail@plt+0xe348>
   20014:	cmp	r7, r4
   20018:	beq	20038 <__assert_fail@plt+0xe2c4>
   2001c:	mov	r1, r4
   20020:	ldr	r3, [r6, #28]
   20024:	mov	r0, r7
   20028:	blx	r3
   2002c:	cmp	r0, #0
   20030:	beq	200b0 <__assert_fail@plt+0xe33c>
   20034:	ldr	r4, [r9, r8, lsl #3]
   20038:	ldr	r3, [r5, #4]
   2003c:	cmp	r3, #0
   20040:	movne	r2, #0
   20044:	ldmne	r3, {r0, r1}
   20048:	streq	r3, [r9, r8, lsl #3]
   2004c:	stmne	r5, {r0, r1}
   20050:	strne	r2, [r3]
   20054:	ldrne	r2, [r6, #36]	; 0x24
   20058:	strne	r2, [r3, #4]
   2005c:	strne	r3, [r6, #36]	; 0x24
   20060:	cmp	r4, #0
   20064:	beq	200bc <__assert_fail@plt+0xe348>
   20068:	ldr	r2, [r9, r8, lsl #3]
   2006c:	ldr	r3, [r6, #16]
   20070:	cmp	r2, #0
   20074:	sub	r3, r3, #1
   20078:	str	r3, [r6, #16]
   2007c:	beq	200f0 <__assert_fail@plt+0xe37c>
   20080:	mov	r0, r4
   20084:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20088:	ldr	r4, [r3]
   2008c:	cmp	r7, r4
   20090:	beq	200d0 <__assert_fail@plt+0xe35c>
   20094:	mov	r1, r4
   20098:	ldr	r3, [r6, #28]
   2009c:	mov	r0, r7
   200a0:	blx	r3
   200a4:	cmp	r0, #0
   200a8:	bne	200c8 <__assert_fail@plt+0xe354>
   200ac:	ldr	r5, [r5, #4]
   200b0:	ldr	r3, [r5, #4]
   200b4:	cmp	r3, #0
   200b8:	bne	20088 <__assert_fail@plt+0xe314>
   200bc:	mov	r4, #0
   200c0:	mov	r0, r4
   200c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   200c8:	ldr	r3, [r5, #4]
   200cc:	ldr	r4, [r3]
   200d0:	ldr	r1, [r3, #4]
   200d4:	mov	r2, #0
   200d8:	str	r1, [r5, #4]
   200dc:	str	r2, [r3]
   200e0:	ldr	r2, [r6, #36]	; 0x24
   200e4:	str	r2, [r3, #4]
   200e8:	str	r3, [r6, #36]	; 0x24
   200ec:	b	20060 <__assert_fail@plt+0xe2ec>
   200f0:	vldr	s15, [r6, #8]
   200f4:	ldr	r3, [r6, #12]
   200f8:	ldr	r2, [r6, #20]
   200fc:	sub	r3, r3, #1
   20100:	vcvt.f32.u32	s14, s15
   20104:	vldr	s13, [r2]
   20108:	vmov	s15, r3
   2010c:	str	r3, [r6, #12]
   20110:	vcvt.f32.u32	s15, s15
   20114:	vmul.f32	s12, s13, s14
   20118:	vcmpe.f32	s15, s12
   2011c:	vmrs	APSR_nzcv, fpscr
   20120:	bpl	20080 <__assert_fail@plt+0xe30c>
   20124:	ldr	r3, [pc, #276]	; 20240 <__assert_fail@plt+0xe4cc>
   20128:	cmp	r2, r3
   2012c:	beq	2020c <__assert_fail@plt+0xe498>
   20130:	vldr	s12, [r2, #8]
   20134:	vldr	s11, [pc, #236]	; 20228 <__assert_fail@plt+0xe4b4>
   20138:	vcmpe.f32	s12, s11
   2013c:	vmrs	APSR_nzcv, fpscr
   20140:	ble	201f4 <__assert_fail@plt+0xe480>
   20144:	vldr	s10, [pc, #224]	; 2022c <__assert_fail@plt+0xe4b8>
   20148:	vcmpe.f32	s12, s10
   2014c:	vmrs	APSR_nzcv, fpscr
   20150:	bpl	201f4 <__assert_fail@plt+0xe480>
   20154:	vldr	s10, [pc, #212]	; 20230 <__assert_fail@plt+0xe4bc>
   20158:	vldr	s9, [r2, #12]
   2015c:	vcmpe.f32	s9, s10
   20160:	vmrs	APSR_nzcv, fpscr
   20164:	ble	201f4 <__assert_fail@plt+0xe480>
   20168:	vcmpe.f32	s13, #0.0
   2016c:	vmrs	APSR_nzcv, fpscr
   20170:	blt	201f4 <__assert_fail@plt+0xe480>
   20174:	vadd.f32	s13, s13, s11
   20178:	vldr	s11, [r2, #4]
   2017c:	vcmpe.f32	s13, s11
   20180:	vmrs	APSR_nzcv, fpscr
   20184:	bpl	201f4 <__assert_fail@plt+0xe480>
   20188:	vldr	s10, [pc, #164]	; 20234 <__assert_fail@plt+0xe4c0>
   2018c:	vcmpe.f32	s11, s10
   20190:	vmrs	APSR_nzcv, fpscr
   20194:	bhi	201f4 <__assert_fail@plt+0xe480>
   20198:	vcmpe.f32	s12, s13
   2019c:	vmrs	APSR_nzcv, fpscr
   201a0:	ble	201f4 <__assert_fail@plt+0xe480>
   201a4:	ldrb	r3, [r2, #16]
   201a8:	cmp	r3, #0
   201ac:	beq	20214 <__assert_fail@plt+0xe4a0>
   201b0:	vmul.f32	s15, s14, s11
   201b4:	vcvt.u32.f32	s15, s15
   201b8:	vmov	r1, s15
   201bc:	mov	r0, r6
   201c0:	bl	1f504 <__assert_fail@plt+0xd790>
   201c4:	cmp	r0, #0
   201c8:	bne	20080 <__assert_fail@plt+0xe30c>
   201cc:	ldr	r0, [r6, #36]	; 0x24
   201d0:	cmp	r0, #0
   201d4:	beq	201e8 <__assert_fail@plt+0xe474>
   201d8:	ldr	r5, [r0, #4]
   201dc:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   201e0:	subs	r0, r5, #0
   201e4:	bne	201d8 <__assert_fail@plt+0xe464>
   201e8:	mov	r3, #0
   201ec:	str	r3, [r6, #36]	; 0x24
   201f0:	b	20080 <__assert_fail@plt+0xe30c>
   201f4:	vldr	s13, [pc, #60]	; 20238 <__assert_fail@plt+0xe4c4>
   201f8:	str	r3, [r6, #20]
   201fc:	vmul.f32	s13, s14, s13
   20200:	vcmpe.f32	s15, s13
   20204:	vmrs	APSR_nzcv, fpscr
   20208:	bpl	20080 <__assert_fail@plt+0xe30c>
   2020c:	vldr	s12, [pc, #40]	; 2023c <__assert_fail@plt+0xe4c8>
   20210:	vldr	s11, [pc, #28]	; 20234 <__assert_fail@plt+0xe4c0>
   20214:	vmul.f32	s15, s14, s11
   20218:	vmul.f32	s15, s15, s12
   2021c:	vcvt.u32.f32	s15, s15
   20220:	b	201b8 <__assert_fail@plt+0xe444>
   20224:	bl	11d2c <abort@plt>
   20228:	stclcc	12, cr12, [ip, #820]	; 0x334
   2022c:	svccc	0x00666666
   20230:	svccc	0x008ccccd
   20234:	svccc	0x00800000
   20238:	andeq	r0, r0, r0
   2023c:	svccc	0x004ccccd
   20240:	andeq	r0, r3, r0, asr #2
   20244:	push	{r4, r5, r6, lr}
   20248:	mov	r4, r0
   2024c:	ldr	r0, [r0]
   20250:	mov	r6, r1
   20254:	bl	2b4b0 <_obstack_memory_used@@Base+0x6f04>
   20258:	ldrd	r4, [r4, #8]
   2025c:	mov	r2, r6
   20260:	mov	r3, #0
   20264:	eor	r4, r4, r0
   20268:	mov	r0, r4
   2026c:	mov	r1, r5
   20270:	bl	2be44 <_obstack_memory_used@@Base+0x7898>
   20274:	mov	r0, r2
   20278:	pop	{r4, r5, r6, pc}
   2027c:	ldrd	r2, [r1, #8]
   20280:	push	{r4, r5, r6, lr}
   20284:	ldrd	r4, [r0, #8]
   20288:	cmp	r5, r3
   2028c:	cmpeq	r4, r2
   20290:	beq	2029c <__assert_fail@plt+0xe528>
   20294:	mov	r0, #0
   20298:	pop	{r4, r5, r6, pc}
   2029c:	ldrd	r4, [r0, #16]
   202a0:	ldrd	r2, [r1, #16]
   202a4:	cmp	r5, r3
   202a8:	cmpeq	r4, r2
   202ac:	bne	20294 <__assert_fail@plt+0xe520>
   202b0:	ldr	r1, [r1]
   202b4:	ldr	r0, [r0]
   202b8:	bl	118a0 <strcmp@plt>
   202bc:	clz	r0, r0
   202c0:	lsr	r0, r0, #5
   202c4:	pop	{r4, r5, r6, pc}
   202c8:	push	{r4, lr}
   202cc:	mov	r4, r0
   202d0:	ldr	r0, [r0]
   202d4:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   202d8:	mov	r0, r4
   202dc:	pop	{r4, lr}
   202e0:	b	1e8c8 <__assert_fail@plt+0xcb54>
   202e4:	andeq	r0, r0, r0
   202e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   202ec:	vpush	{d8-d9}
   202f0:	mov	r4, r3
   202f4:	ands	r3, r3, #32
   202f8:	mov	r9, r1
   202fc:	sub	sp, sp, #108	; 0x6c
   20300:	mov	r8, r0
   20304:	str	r3, [sp, #36]	; 0x24
   20308:	and	r3, r4, #3
   2030c:	str	r3, [sp, #8]
   20310:	movne	r3, #1024	; 0x400
   20314:	moveq	r3, #1000	; 0x3e8
   20318:	str	r2, [sp, #12]
   2031c:	strne	r3, [sp, #40]	; 0x28
   20320:	movne	r2, #1024	; 0x400
   20324:	moveq	r2, #1000	; 0x3e8
   20328:	strne	r3, [sp, #28]
   2032c:	streq	r3, [sp, #40]	; 0x28
   20330:	streq	r3, [sp, #28]
   20334:	mov	r3, #0
   20338:	ldrd	r6, [sp, #160]	; 0xa0
   2033c:	strd	r2, [sp, #16]
   20340:	bl	11c9c <localeconv@plt>
   20344:	ldr	r3, [sp, #12]
   20348:	add	r3, r3, #644	; 0x284
   2034c:	str	r3, [sp, #24]
   20350:	ldr	fp, [r0]
   20354:	mov	r5, r0
   20358:	mov	r0, fp
   2035c:	bl	11b94 <strlen@plt>
   20360:	ldr	sl, [r5, #4]
   20364:	ldr	r1, [pc, #684]	; 20618 <__assert_fail@plt+0xe8a4>
   20368:	mov	r2, r0
   2036c:	sub	r0, r0, #1
   20370:	cmp	r0, #16
   20374:	movcs	r2, #1
   20378:	str	r2, [sp, #48]	; 0x30
   2037c:	mov	r0, sl
   20380:	movcc	r2, fp
   20384:	movcs	r2, r1
   20388:	str	r2, [sp, #52]	; 0x34
   2038c:	bl	11b94 <strlen@plt>
   20390:	ldr	r3, [sp, #24]
   20394:	ldr	r2, [pc, #640]	; 2061c <__assert_fail@plt+0xe8a8>
   20398:	add	r3, r3, #3
   2039c:	str	r3, [sp, #8]
   203a0:	ldr	r5, [r5, #8]
   203a4:	cmp	r0, #16
   203a8:	movhi	sl, r2
   203ac:	ldrd	r2, [sp, #168]	; 0xa8
   203b0:	str	sl, [sp, #32]
   203b4:	cmp	r3, r7
   203b8:	cmpeq	r2, r6
   203bc:	bhi	20628 <__assert_fail@plt+0xe8b4>
   203c0:	mov	r0, r6
   203c4:	mov	r1, r7
   203c8:	bl	2be44 <_obstack_memory_used@@Base+0x7898>
   203cc:	orrs	r3, r2, r3
   203d0:	bne	20414 <__assert_fail@plt+0xe6a0>
   203d4:	ldrd	r2, [sp, #168]	; 0xa8
   203d8:	mov	r0, r6
   203dc:	mov	r1, r7
   203e0:	bl	2be44 <_obstack_memory_used@@Base+0x7898>
   203e4:	mov	r2, r0
   203e8:	mul	r0, r0, r9
   203ec:	umull	sl, fp, r2, r8
   203f0:	mla	r0, r8, r1, r0
   203f4:	mov	r3, r1
   203f8:	add	fp, r0, fp
   203fc:	mov	r1, fp
   20400:	mov	r0, sl
   20404:	bl	2be44 <_obstack_memory_used@@Base+0x7898>
   20408:	cmp	r9, r1
   2040c:	cmpeq	r8, r0
   20410:	beq	20ce0 <__assert_fail@plt+0xef6c>
   20414:	mov	r0, r6
   20418:	mov	r1, r7
   2041c:	bl	2bcfc <_obstack_memory_used@@Base+0x7750>
   20420:	vmov	d9, r0, r1
   20424:	ldrd	r0, [sp, #168]	; 0xa8
   20428:	bl	2bcfc <_obstack_memory_used@@Base+0x7750>
   2042c:	vmov	d7, r0, r1
   20430:	mov	r0, r8
   20434:	mov	r1, r9
   20438:	vdiv.f64	d8, d9, d7
   2043c:	bl	2bcfc <_obstack_memory_used@@Base+0x7750>
   20440:	ands	r8, r4, #16
   20444:	vmov	d7, r0, r1
   20448:	vmul.f64	d8, d8, d7
   2044c:	beq	20a58 <__assert_fail@plt+0xece4>
   20450:	vldr	s15, [sp, #40]	; 0x28
   20454:	vcvt.f64.s32	d7, s15
   20458:	vmul.f64	d6, d7, d7
   2045c:	vcmpe.f64	d8, d6
   20460:	vmrs	APSR_nzcv, fpscr
   20464:	blt	20fb8 <__assert_fail@plt+0xf244>
   20468:	vmul.f64	d5, d7, d6
   2046c:	vcmpe.f64	d8, d5
   20470:	vmrs	APSR_nzcv, fpscr
   20474:	blt	20fc4 <__assert_fail@plt+0xf250>
   20478:	vmul.f64	d6, d7, d5
   2047c:	vcmpe.f64	d8, d6
   20480:	vmrs	APSR_nzcv, fpscr
   20484:	blt	20fcc <__assert_fail@plt+0xf258>
   20488:	vmul.f64	d5, d7, d6
   2048c:	vcmpe.f64	d8, d5
   20490:	vmrs	APSR_nzcv, fpscr
   20494:	blt	20fd8 <__assert_fail@plt+0xf264>
   20498:	vmul.f64	d6, d7, d5
   2049c:	vcmpe.f64	d8, d6
   204a0:	vmrs	APSR_nzcv, fpscr
   204a4:	blt	20fe0 <__assert_fail@plt+0xf26c>
   204a8:	vmul.f64	d5, d7, d6
   204ac:	vcmpe.f64	d8, d5
   204b0:	vmrs	APSR_nzcv, fpscr
   204b4:	blt	20fec <__assert_fail@plt+0xf278>
   204b8:	vmul.f64	d6, d7, d5
   204bc:	vcmpe.f64	d8, d6
   204c0:	vmrs	APSR_nzcv, fpscr
   204c4:	blt	20ff4 <__assert_fail@plt+0xf280>
   204c8:	mov	r9, #8
   204cc:	and	r8, r4, #3
   204d0:	cmp	r8, #1
   204d4:	vdiv.f64	d9, d8, d6
   204d8:	beq	20b84 <__assert_fail@plt+0xee10>
   204dc:	vldr	d7, [pc, #292]	; 20608 <__assert_fail@plt+0xe894>
   204e0:	vmov	r0, r1, d9
   204e4:	vcmpe.f64	d9, d7
   204e8:	vmrs	APSR_nzcv, fpscr
   204ec:	bpl	20534 <__assert_fail@plt+0xe7c0>
   204f0:	bl	2be90 <_obstack_memory_used@@Base+0x78e4>
   204f4:	cmp	r8, #0
   204f8:	mov	r6, r0
   204fc:	mov	r7, r1
   20500:	movne	r0, #0
   20504:	bne	20520 <__assert_fail@plt+0xe7ac>
   20508:	bl	2bcfc <_obstack_memory_used@@Base+0x7750>
   2050c:	vmov	d7, r0, r1
   20510:	vcmp.f64	d7, d9
   20514:	vmrs	APSR_nzcv, fpscr
   20518:	movne	r0, #1
   2051c:	moveq	r0, #0
   20520:	adds	r2, r6, r0
   20524:	adc	r3, r7, #0
   20528:	mov	r0, r2
   2052c:	mov	r1, r3
   20530:	bl	2bcfc <_obstack_memory_used@@Base+0x7750>
   20534:	ldr	r6, [sp, #12]
   20538:	strd	r0, [sp]
   2053c:	ldr	r3, [pc, #220]	; 20620 <__assert_fail@plt+0xe8ac>
   20540:	mvn	r2, #0
   20544:	mov	r1, #1
   20548:	mov	r0, r6
   2054c:	bl	11bc4 <__sprintf_chk@plt>
   20550:	ldr	r3, [sp, #48]	; 0x30
   20554:	mov	r0, r6
   20558:	add	r6, r3, #1
   2055c:	bl	11b94 <strlen@plt>
   20560:	ands	r3, r4, #32
   20564:	cmp	r3, #0
   20568:	movne	r3, #1
   2056c:	moveq	r3, #2
   20570:	add	r3, r3, r6
   20574:	cmp	r0, r3
   20578:	mov	r7, r0
   2057c:	bls	20bd0 <__assert_fail@plt+0xee5c>
   20580:	vldr	d7, [pc, #136]	; 20610 <__assert_fail@plt+0xe89c>
   20584:	vmul.f64	d9, d9, d7
   20588:	vldr	d7, [pc, #120]	; 20608 <__assert_fail@plt+0xe894>
   2058c:	vcmpe.f64	d9, d7
   20590:	vmrs	APSR_nzcv, fpscr
   20594:	bpl	205d0 <__assert_fail@plt+0xe85c>
   20598:	vmov	r0, r1, d9
   2059c:	bl	2be90 <_obstack_memory_used@@Base+0x78e4>
   205a0:	and	r3, r4, #3
   205a4:	cmp	r3, #0
   205a8:	mov	r6, r0
   205ac:	mov	r7, r1
   205b0:	movne	r0, #0
   205b4:	beq	20f04 <__assert_fail@plt+0xf190>
   205b8:	adds	r2, r6, r0
   205bc:	adc	r3, r7, #0
   205c0:	mov	r0, r2
   205c4:	mov	r1, r3
   205c8:	bl	2bcfc <_obstack_memory_used@@Base+0x7750>
   205cc:	vmov	d9, r0, r1
   205d0:	vldr	d6, [pc, #56]	; 20610 <__assert_fail@plt+0xe89c>
   205d4:	ldr	r7, [sp, #12]
   205d8:	ldr	r3, [pc, #68]	; 20624 <__assert_fail@plt+0xe8b0>
   205dc:	mvn	r2, #0
   205e0:	vdiv.f64	d7, d9, d6
   205e4:	mov	r1, #1
   205e8:	mov	r0, r7
   205ec:	mov	r6, #0
   205f0:	vstr	d7, [sp]
   205f4:	bl	11bc4 <__sprintf_chk@plt>
   205f8:	mov	r0, r7
   205fc:	bl	11b94 <strlen@plt>
   20600:	mov	r7, r0
   20604:	b	20aa4 <__assert_fail@plt+0xed30>
   20608:	andeq	r0, r0, r0
   2060c:	mvnsmi	r0, #0
   20610:	andeq	r0, r0, r0
   20614:	eormi	r0, r4, r0
   20618:	andeq	pc, r2, r4, lsl #23
   2061c:	andeq	r0, r3, r4, lsr #3
   20620:	andeq	r0, r3, r8, ror #3
   20624:	andeq	r0, r3, r0, ror #3
   20628:	orrs	r3, r6, r7
   2062c:	beq	20414 <__assert_fail@plt+0xe6a0>
   20630:	mov	r2, r6
   20634:	mov	r3, r7
   20638:	ldrd	r0, [sp, #168]	; 0xa8
   2063c:	bl	2be44 <_obstack_memory_used@@Base+0x7898>
   20640:	orrs	r3, r2, r3
   20644:	bne	20414 <__assert_fail@plt+0xe6a0>
   20648:	mov	r2, r6
   2064c:	mov	r3, r7
   20650:	ldrd	r0, [sp, #168]	; 0xa8
   20654:	bl	2be44 <_obstack_memory_used@@Base+0x7898>
   20658:	mov	sl, r0
   2065c:	mov	fp, r1
   20660:	mov	r2, r0
   20664:	mov	r3, r1
   20668:	mov	r0, r8
   2066c:	mov	r1, r9
   20670:	bl	2be44 <_obstack_memory_used@@Base+0x7898>
   20674:	mov	r1, #10
   20678:	umull	r6, r7, r2, r1
   2067c:	mla	r7, r1, r3, r7
   20680:	mov	r2, sl
   20684:	mov	r3, fp
   20688:	mov	r0, r6
   2068c:	mov	r1, r7
   20690:	bl	2be44 <_obstack_memory_used@@Base+0x7898>
   20694:	mov	r0, r8
   20698:	mov	r1, r9
   2069c:	strd	sl, [sp, #40]	; 0x28
   206a0:	lsls	r8, r2, #1
   206a4:	adc	r9, r3, r3
   206a8:	mov	r2, sl
   206ac:	mov	r3, fp
   206b0:	bl	2be44 <_obstack_memory_used@@Base+0x7898>
   206b4:	ldrd	r2, [sp, #40]	; 0x28
   206b8:	mov	sl, r0
   206bc:	mov	fp, r1
   206c0:	mov	r0, r6
   206c4:	mov	r1, r7
   206c8:	bl	2be44 <_obstack_memory_used@@Base+0x7898>
   206cc:	ldrd	r2, [sp, #40]	; 0x28
   206d0:	cmp	r3, r9
   206d4:	cmpeq	r2, r8
   206d8:	mov	r6, r0
   206dc:	bls	20ee8 <__assert_fail@plt+0xf174>
   206e0:	orrs	r3, r8, r9
   206e4:	movne	r8, #1
   206e8:	moveq	r8, #0
   206ec:	ands	r3, r4, #16
   206f0:	str	r3, [sp, #40]	; 0x28
   206f4:	beq	20df4 <__assert_fail@plt+0xf080>
   206f8:	ldrd	r2, [sp, #16]
   206fc:	cmp	fp, r3
   20700:	cmpeq	sl, r2
   20704:	bcc	20ef4 <__assert_fail@plt+0xf180>
   20708:	mov	r0, sl
   2070c:	mov	r1, fp
   20710:	bl	2be44 <_obstack_memory_used@@Base+0x7898>
   20714:	ldr	r1, [sp, #28]
   20718:	add	r2, r2, r2, lsl #2
   2071c:	add	r7, r6, r2, lsl #1
   20720:	mov	r0, r7
   20724:	bl	2b758 <_obstack_memory_used@@Base+0x71ac>
   20728:	asr	r6, r8, #1
   2072c:	ldrd	r2, [sp, #16]
   20730:	mov	r0, sl
   20734:	add	r9, r6, r1, lsl #1
   20738:	mov	r1, fp
   2073c:	bl	2be44 <_obstack_memory_used@@Base+0x7898>
   20740:	mov	sl, r0
   20744:	mov	fp, r1
   20748:	mov	r0, r7
   2074c:	ldr	r1, [sp, #28]
   20750:	bl	2b56c <_obstack_memory_used@@Base+0x6fc0>
   20754:	ldr	r3, [sp, #28]
   20758:	cmp	r3, r9
   2075c:	mov	r6, r0
   20760:	bls	20f2c <__assert_fail@plt+0xf1b8>
   20764:	cmn	r8, r9
   20768:	movne	r8, #1
   2076c:	moveq	r8, #0
   20770:	ldrd	r2, [sp, #16]
   20774:	cmp	r3, fp
   20778:	cmpeq	r2, sl
   2077c:	bhi	210a0 <__assert_fail@plt+0xf32c>
   20780:	mov	r0, sl
   20784:	mov	r1, fp
   20788:	bl	2be44 <_obstack_memory_used@@Base+0x7898>
   2078c:	ldr	r1, [sp, #28]
   20790:	add	r2, r2, r2, lsl #2
   20794:	add	r7, r6, r2, lsl #1
   20798:	mov	r0, r7
   2079c:	bl	2b758 <_obstack_memory_used@@Base+0x71ac>
   207a0:	asr	r6, r8, #1
   207a4:	ldrd	r2, [sp, #16]
   207a8:	mov	r0, sl
   207ac:	add	r9, r6, r1, lsl #1
   207b0:	mov	r1, fp
   207b4:	bl	2be44 <_obstack_memory_used@@Base+0x7898>
   207b8:	mov	sl, r0
   207bc:	mov	fp, r1
   207c0:	mov	r0, r7
   207c4:	ldr	r1, [sp, #28]
   207c8:	bl	2b56c <_obstack_memory_used@@Base+0x6fc0>
   207cc:	ldr	r3, [sp, #28]
   207d0:	cmp	r3, r9
   207d4:	mov	r6, r0
   207d8:	mov	r7, r0
   207dc:	bls	20f44 <__assert_fail@plt+0xf1d0>
   207e0:	cmn	r8, r9
   207e4:	movne	r8, #1
   207e8:	moveq	r8, #0
   207ec:	ldrd	r2, [sp, #16]
   207f0:	cmp	fp, r3
   207f4:	cmpeq	sl, r2
   207f8:	bcc	210a8 <__assert_fail@plt+0xf334>
   207fc:	mov	r0, sl
   20800:	mov	r1, fp
   20804:	bl	2be44 <_obstack_memory_used@@Base+0x7898>
   20808:	ldr	r9, [sp, #28]
   2080c:	mov	r1, r9
   20810:	add	r2, r2, r2, lsl #2
   20814:	add	r6, r7, r2, lsl #1
   20818:	mov	r0, r6
   2081c:	bl	2b758 <_obstack_memory_used@@Base+0x71ac>
   20820:	asr	r7, r8, #1
   20824:	ldrd	r2, [sp, #16]
   20828:	mov	r0, sl
   2082c:	add	r7, r7, r1, lsl #1
   20830:	mov	r1, fp
   20834:	bl	2be44 <_obstack_memory_used@@Base+0x7898>
   20838:	mov	sl, r0
   2083c:	mov	fp, r1
   20840:	mov	r0, r6
   20844:	mov	r1, r9
   20848:	bl	2b56c <_obstack_memory_used@@Base+0x6fc0>
   2084c:	cmp	r9, r7
   20850:	mov	r6, r0
   20854:	mov	r9, r0
   20858:	bls	20f5c <__assert_fail@plt+0xf1e8>
   2085c:	cmn	r8, r7
   20860:	movne	r8, #1
   20864:	moveq	r8, #0
   20868:	ldrd	r2, [sp, #16]
   2086c:	cmp	fp, r3
   20870:	cmpeq	sl, r2
   20874:	bcc	210b0 <__assert_fail@plt+0xf33c>
   20878:	mov	r0, sl
   2087c:	mov	r1, fp
   20880:	bl	2be44 <_obstack_memory_used@@Base+0x7898>
   20884:	ldr	r1, [sp, #28]
   20888:	asr	r7, r8, #1
   2088c:	add	r2, r2, r2, lsl #2
   20890:	add	r6, r9, r2, lsl #1
   20894:	mov	r0, r6
   20898:	bl	2b758 <_obstack_memory_used@@Base+0x71ac>
   2089c:	ldrd	r2, [sp, #16]
   208a0:	mov	r0, sl
   208a4:	add	r7, r7, r1, lsl #1
   208a8:	mov	r1, fp
   208ac:	bl	2be44 <_obstack_memory_used@@Base+0x7898>
   208b0:	ldr	r9, [sp, #28]
   208b4:	mov	sl, r0
   208b8:	mov	fp, r1
   208bc:	mov	r0, r6
   208c0:	mov	r1, r9
   208c4:	bl	2b56c <_obstack_memory_used@@Base+0x6fc0>
   208c8:	cmp	r9, r7
   208cc:	mov	r6, r0
   208d0:	mov	r9, r0
   208d4:	bls	20f74 <__assert_fail@plt+0xf200>
   208d8:	cmn	r8, r7
   208dc:	movne	r8, #1
   208e0:	moveq	r8, #0
   208e4:	ldrd	r2, [sp, #16]
   208e8:	cmp	fp, r3
   208ec:	cmpeq	sl, r2
   208f0:	bcc	210e8 <__assert_fail@plt+0xf374>
   208f4:	mov	r0, sl
   208f8:	mov	r1, fp
   208fc:	bl	2be44 <_obstack_memory_used@@Base+0x7898>
   20900:	ldr	r1, [sp, #28]
   20904:	asr	r7, r8, #1
   20908:	add	r2, r2, r2, lsl #2
   2090c:	add	r6, r9, r2, lsl #1
   20910:	mov	r0, r6
   20914:	bl	2b758 <_obstack_memory_used@@Base+0x71ac>
   20918:	ldrd	r2, [sp, #16]
   2091c:	mov	r0, sl
   20920:	add	r7, r7, r1, lsl #1
   20924:	mov	r1, fp
   20928:	bl	2be44 <_obstack_memory_used@@Base+0x7898>
   2092c:	ldr	r9, [sp, #28]
   20930:	mov	sl, r0
   20934:	mov	fp, r1
   20938:	mov	r0, r6
   2093c:	mov	r1, r9
   20940:	bl	2b56c <_obstack_memory_used@@Base+0x6fc0>
   20944:	cmp	r9, r7
   20948:	mov	r6, r0
   2094c:	mov	r9, r0
   20950:	bls	20f8c <__assert_fail@plt+0xf218>
   20954:	cmn	r8, r7
   20958:	movne	r8, #1
   2095c:	moveq	r8, #0
   20960:	ldrd	r2, [sp, #16]
   20964:	cmp	r3, fp
   20968:	cmpeq	r2, sl
   2096c:	bhi	210f0 <__assert_fail@plt+0xf37c>
   20970:	mov	r0, sl
   20974:	mov	r1, fp
   20978:	bl	2be44 <_obstack_memory_used@@Base+0x7898>
   2097c:	ldr	r1, [sp, #28]
   20980:	asr	r7, r8, #1
   20984:	add	r2, r2, r2, lsl #2
   20988:	add	r6, r9, r2, lsl #1
   2098c:	mov	r0, r6
   20990:	bl	2b758 <_obstack_memory_used@@Base+0x71ac>
   20994:	ldrd	r2, [sp, #16]
   20998:	mov	r0, sl
   2099c:	add	r7, r7, r1, lsl #1
   209a0:	mov	r1, fp
   209a4:	bl	2be44 <_obstack_memory_used@@Base+0x7898>
   209a8:	ldr	r9, [sp, #28]
   209ac:	mov	sl, r0
   209b0:	mov	fp, r1
   209b4:	mov	r0, r6
   209b8:	mov	r1, r9
   209bc:	bl	2b56c <_obstack_memory_used@@Base+0x6fc0>
   209c0:	cmp	r9, r7
   209c4:	mov	r6, r0
   209c8:	bls	20fa4 <__assert_fail@plt+0xf230>
   209cc:	cmn	r8, r7
   209d0:	movne	r8, #1
   209d4:	moveq	r8, #0
   209d8:	mov	r9, #6
   209dc:	cmp	fp, #0
   209e0:	cmpeq	sl, #9
   209e4:	bhi	21094 <__assert_fail@plt+0xf320>
   209e8:	and	r3, r4, #3
   209ec:	cmp	r3, #1
   209f0:	beq	21028 <__assert_fail@plt+0xf2b4>
   209f4:	cmp	r8, #0
   209f8:	and	r3, r4, #3
   209fc:	clz	r3, r3
   20a00:	lsr	r3, r3, #5
   20a04:	moveq	r3, #0
   20a08:	cmp	r3, #0
   20a0c:	beq	21000 <__assert_fail@plt+0xf28c>
   20a10:	add	r6, r6, #1
   20a14:	cmp	r6, #10
   20a18:	beq	21078 <__assert_fail@plt+0xf304>
   20a1c:	add	r7, r6, #48	; 0x30
   20a20:	uxtb	r3, r7
   20a24:	ldr	r2, [sp, #24]
   20a28:	ldr	r0, [sp, #12]
   20a2c:	add	r7, r2, #2
   20a30:	ldr	r2, [sp, #48]	; 0x30
   20a34:	strb	r3, [r0, #646]	; 0x286
   20a38:	sub	r1, r7, r2
   20a3c:	str	r1, [sp, #24]
   20a40:	mov	r0, r1
   20a44:	mov	r8, #0
   20a48:	ldr	r1, [sp, #52]	; 0x34
   20a4c:	bl	11930 <memcpy@plt>
   20a50:	mov	r6, r8
   20a54:	b	20e00 <__assert_fail@plt+0xf08c>
   20a58:	and	r9, r4, #3
   20a5c:	cmp	r9, #1
   20a60:	beq	20a74 <__assert_fail@plt+0xed00>
   20a64:	vldr	d7, [pc, #876]	; 20dd8 <__assert_fail@plt+0xf064>
   20a68:	vcmpe.f64	d8, d7
   20a6c:	vmrs	APSR_nzcv, fpscr
   20a70:	bmi	20c9c <__assert_fail@plt+0xef28>
   20a74:	ldr	r6, [sp, #12]
   20a78:	ldr	r3, [pc, #872]	; 20de8 <__assert_fail@plt+0xf074>
   20a7c:	mvn	r2, #0
   20a80:	mov	r1, #1
   20a84:	mov	r0, r6
   20a88:	vstr	d8, [sp]
   20a8c:	bl	11bc4 <__sprintf_chk@plt>
   20a90:	mov	r0, r6
   20a94:	bl	11b94 <strlen@plt>
   20a98:	mov	r6, #0
   20a9c:	mvn	r9, #0
   20aa0:	mov	r7, r0
   20aa4:	ldr	r3, [sp, #8]
   20aa8:	mov	r2, r7
   20aac:	sub	r8, r3, r7
   20ab0:	mov	r0, r8
   20ab4:	ldr	r1, [sp, #12]
   20ab8:	bl	118f4 <memmove@plt>
   20abc:	sub	r7, r7, r6
   20ac0:	add	r7, r8, r7
   20ac4:	tst	r4, #4
   20ac8:	bne	20c04 <__assert_fail@plt+0xee90>
   20acc:	tst	r4, #128	; 0x80
   20ad0:	beq	20b68 <__assert_fail@plt+0xedf4>
   20ad4:	cmn	r9, #1
   20ad8:	beq	20cec <__assert_fail@plt+0xef78>
   20adc:	and	r3, r4, #256	; 0x100
   20ae0:	orrs	r2, r9, r3
   20ae4:	beq	20b68 <__assert_fail@plt+0xedf4>
   20ae8:	tst	r4, #64	; 0x40
   20aec:	ldrne	r1, [sp, #12]
   20af0:	addne	r2, r1, #648	; 0x288
   20af4:	strne	r2, [sp, #8]
   20af8:	movne	r2, #32
   20afc:	strbne	r2, [r1, #647]	; 0x287
   20b00:	cmp	r9, #0
   20b04:	beq	210f8 <__assert_fail@plt+0xf384>
   20b08:	ldr	r2, [sp, #36]	; 0x24
   20b0c:	ldr	r0, [sp, #8]
   20b10:	cmp	r2, #0
   20b14:	cmpeq	r9, #1
   20b18:	ldr	r2, [sp, #8]
   20b1c:	ldrne	r1, [pc, #712]	; 20dec <__assert_fail@plt+0xf078>
   20b20:	moveq	r1, #107	; 0x6b
   20b24:	add	r2, r2, #1
   20b28:	ldrbne	r1, [r1, r9]
   20b2c:	cmp	r3, #0
   20b30:	streq	r2, [sp, #8]
   20b34:	strb	r1, [r0]
   20b38:	beq	20b68 <__assert_fail@plt+0xedf4>
   20b3c:	ldr	r3, [sp, #36]	; 0x24
   20b40:	cmp	r9, #0
   20b44:	cmpne	r3, #0
   20b48:	movne	r2, r0
   20b4c:	movne	r3, #105	; 0x69
   20b50:	strbne	r3, [r2, #1]
   20b54:	addne	r2, r2, #2
   20b58:	mov	r3, #66	; 0x42
   20b5c:	strb	r3, [r2]
   20b60:	add	r3, r2, #1
   20b64:	str	r3, [sp, #8]
   20b68:	ldr	r2, [sp, #8]
   20b6c:	mov	r3, #0
   20b70:	mov	r0, r8
   20b74:	strb	r3, [r2]
   20b78:	add	sp, sp, #108	; 0x6c
   20b7c:	vpop	{d8-d9}
   20b80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b84:	ldr	r6, [sp, #12]
   20b88:	ldr	r3, [pc, #608]	; 20df0 <__assert_fail@plt+0xf07c>
   20b8c:	mvn	r2, #0
   20b90:	and	r1, r4, #3
   20b94:	mov	r0, r6
   20b98:	vstr	d9, [sp]
   20b9c:	bl	11bc4 <__sprintf_chk@plt>
   20ba0:	ldr	r3, [sp, #48]	; 0x30
   20ba4:	mov	r0, r6
   20ba8:	add	r6, r3, #1
   20bac:	bl	11b94 <strlen@plt>
   20bb0:	ands	r3, r4, #32
   20bb4:	cmp	r3, #0
   20bb8:	movne	r3, #1
   20bbc:	moveq	r3, #2
   20bc0:	add	r3, r3, r6
   20bc4:	cmp	r3, r0
   20bc8:	mov	r7, r0
   20bcc:	bcc	20f20 <__assert_fail@plt+0xf1ac>
   20bd0:	tst	r4, #8
   20bd4:	beq	20aa4 <__assert_fail@plt+0xed30>
   20bd8:	ldr	r3, [sp, #12]
   20bdc:	add	r3, r3, r7
   20be0:	ldrb	r3, [r3, #-1]
   20be4:	cmp	r3, #48	; 0x30
   20be8:	bne	20aa4 <__assert_fail@plt+0xed30>
   20bec:	vldr	d7, [pc, #492]	; 20de0 <__assert_fail@plt+0xf06c>
   20bf0:	and	r3, r4, #3
   20bf4:	cmp	r3, #1
   20bf8:	vmul.f64	d9, d9, d7
   20bfc:	beq	205d0 <__assert_fail@plt+0xe85c>
   20c00:	b	20588 <__assert_fail@plt+0xe814>
   20c04:	ldr	r0, [sp, #32]
   20c08:	bl	11b94 <strlen@plt>
   20c0c:	sub	r6, r7, r8
   20c10:	mov	r1, r8
   20c14:	mov	r2, r6
   20c18:	mov	r3, #41	; 0x29
   20c1c:	mvn	sl, #0
   20c20:	mov	fp, r0
   20c24:	add	r0, sp, #60	; 0x3c
   20c28:	bl	11a20 <__memcpy_chk@plt>
   20c2c:	ldr	r8, [sp, #32]
   20c30:	b	20c38 <__assert_fail@plt+0xeec4>
   20c34:	bl	11930 <memcpy@plt>
   20c38:	ldrb	r3, [r5]
   20c3c:	cmp	r3, #0
   20c40:	beq	20c54 <__assert_fail@plt+0xeee0>
   20c44:	cmp	r3, #255	; 0xff
   20c48:	movne	sl, r3
   20c4c:	moveq	sl, r6
   20c50:	add	r5, r5, #1
   20c54:	cmp	sl, r6
   20c58:	movcs	sl, r6
   20c5c:	sub	r3, r7, sl
   20c60:	sub	r6, r6, sl
   20c64:	add	r2, sp, #60	; 0x3c
   20c68:	add	r1, r2, r6
   20c6c:	mov	r0, r3
   20c70:	mov	r2, sl
   20c74:	sub	r7, r3, fp
   20c78:	bl	11930 <memcpy@plt>
   20c7c:	cmp	r6, #0
   20c80:	mov	r2, fp
   20c84:	mov	r1, r8
   20c88:	mov	r3, r0
   20c8c:	mov	r0, r7
   20c90:	bne	20c34 <__assert_fail@plt+0xeec0>
   20c94:	mov	r8, r3
   20c98:	b	20acc <__assert_fail@plt+0xed58>
   20c9c:	vmov	r0, r1, d8
   20ca0:	bl	2be90 <_obstack_memory_used@@Base+0x78e4>
   20ca4:	cmp	r9, #0
   20ca8:	mov	r6, r0
   20cac:	mov	r7, r1
   20cb0:	bne	20ccc <__assert_fail@plt+0xef58>
   20cb4:	bl	2bcfc <_obstack_memory_used@@Base+0x7750>
   20cb8:	vmov	d7, r0, r1
   20cbc:	vcmp.f64	d7, d8
   20cc0:	vmrs	APSR_nzcv, fpscr
   20cc4:	movne	r8, #1
   20cc8:	moveq	r8, #0
   20ccc:	adds	r0, r6, r8
   20cd0:	adc	r1, r7, #0
   20cd4:	bl	2bcfc <_obstack_memory_used@@Base+0x7750>
   20cd8:	vmov	d8, r0, r1
   20cdc:	b	20a74 <__assert_fail@plt+0xed00>
   20ce0:	mov	r8, #0
   20ce4:	mov	r6, r8
   20ce8:	b	206ec <__assert_fail@plt+0xe978>
   20cec:	ldrd	r2, [sp, #168]	; 0xa8
   20cf0:	cmp	r3, #0
   20cf4:	cmpeq	r2, #1
   20cf8:	bls	21018 <__assert_fail@plt+0xf2a4>
   20cfc:	ldrd	r6, [sp, #16]
   20d00:	mov	r1, r3
   20d04:	mov	r0, r2
   20d08:	cmp	r1, r7
   20d0c:	cmpeq	r0, r6
   20d10:	bls	21020 <__assert_fail@plt+0xf2ac>
   20d14:	mul	r1, r6, r7
   20d18:	umull	r2, r3, r6, r6
   20d1c:	add	r3, r3, r1, lsl #1
   20d20:	ldrd	r0, [sp, #168]	; 0xa8
   20d24:	cmp	r1, r3
   20d28:	cmpeq	r0, r2
   20d2c:	bls	21040 <__assert_fail@plt+0xf2cc>
   20d30:	mul	r3, r6, r3
   20d34:	umull	r0, r1, r6, r2
   20d38:	mla	r2, r2, r7, r3
   20d3c:	add	r1, r2, r1
   20d40:	ldrd	r2, [sp, #168]	; 0xa8
   20d44:	cmp	r3, r1
   20d48:	cmpeq	r2, r0
   20d4c:	bls	21048 <__assert_fail@plt+0xf2d4>
   20d50:	mul	r1, r6, r1
   20d54:	umull	r2, r3, r6, r0
   20d58:	mla	r0, r0, r7, r1
   20d5c:	add	r3, r0, r3
   20d60:	ldrd	r0, [sp, #168]	; 0xa8
   20d64:	cmp	r1, r3
   20d68:	cmpeq	r0, r2
   20d6c:	bls	21050 <__assert_fail@plt+0xf2dc>
   20d70:	mul	r3, r6, r3
   20d74:	umull	r0, r1, r6, r2
   20d78:	mla	r2, r2, r7, r3
   20d7c:	add	r1, r2, r1
   20d80:	ldrd	r2, [sp, #168]	; 0xa8
   20d84:	cmp	r3, r1
   20d88:	cmpeq	r2, r0
   20d8c:	bls	21058 <__assert_fail@plt+0xf2e4>
   20d90:	mul	r1, r6, r1
   20d94:	umull	r2, r3, r6, r0
   20d98:	mla	r0, r0, r7, r1
   20d9c:	add	r3, r0, r3
   20da0:	ldrd	r0, [sp, #168]	; 0xa8
   20da4:	cmp	r1, r3
   20da8:	cmpeq	r0, r2
   20dac:	bls	21060 <__assert_fail@plt+0xf2ec>
   20db0:	mul	r3, r6, r3
   20db4:	umull	r0, r1, r6, r2
   20db8:	mla	r2, r2, r7, r3
   20dbc:	add	r1, r2, r1
   20dc0:	ldrd	r2, [sp, #168]	; 0xa8
   20dc4:	cmp	r3, r1
   20dc8:	cmpeq	r2, r0
   20dcc:	movhi	r9, #8
   20dd0:	movls	r9, #7
   20dd4:	b	20adc <__assert_fail@plt+0xed68>
   20dd8:	andeq	r0, r0, r0
   20ddc:	mvnsmi	r0, #0
   20de0:	andeq	r0, r0, r0
   20de4:	eormi	r0, r4, r0
   20de8:	andeq	r0, r3, r0, ror #3
   20dec:	andeq	r0, r3, r0, asr #3
   20df0:	andeq	r0, r3, r8, ror #3
   20df4:	ldr	r3, [sp, #8]
   20df8:	mvn	r9, #0
   20dfc:	str	r3, [sp, #24]
   20e00:	and	r3, r4, #3
   20e04:	cmp	r3, #1
   20e08:	beq	20e6c <__assert_fail@plt+0xf0f8>
   20e0c:	and	r3, r4, #3
   20e10:	cmp	r3, #0
   20e14:	bne	20e94 <__assert_fail@plt+0xf120>
   20e18:	add	r7, r6, r8
   20e1c:	cmp	r7, #0
   20e20:	ble	20e94 <__assert_fail@plt+0xf120>
   20e24:	adds	sl, sl, #1
   20e28:	adc	fp, fp, #0
   20e2c:	ands	r3, r4, #16
   20e30:	cmp	r3, #0
   20e34:	beq	20e94 <__assert_fail@plt+0xf120>
   20e38:	ldrd	r2, [sp, #16]
   20e3c:	cmp	fp, r3
   20e40:	cmpeq	sl, r2
   20e44:	bne	20e94 <__assert_fail@plt+0xf120>
   20e48:	tst	r4, #8
   20e4c:	add	r9, r9, #1
   20e50:	beq	210b8 <__assert_fail@plt+0xf344>
   20e54:	ldr	r2, [sp, #24]
   20e58:	mov	r3, #49	; 0x31
   20e5c:	sub	r8, r2, #1
   20e60:	strb	r3, [r2, #-1]
   20e64:	mov	r7, r2
   20e68:	b	20ac4 <__assert_fail@plt+0xed50>
   20e6c:	and	r2, sl, #1
   20e70:	adds	r2, r2, r8
   20e74:	mov	r3, #0
   20e78:	adc	r3, r3, r8, asr #31
   20e7c:	orr	r7, r2, r3
   20e80:	cmp	r7, #0
   20e84:	moveq	r7, r6
   20e88:	addne	r7, r6, #1
   20e8c:	cmp	r7, #5
   20e90:	bgt	20e24 <__assert_fail@plt+0xf0b0>
   20e94:	ldr	r8, [sp, #24]
   20e98:	mov	r6, #10
   20e9c:	mov	r7, #0
   20ea0:	mov	r0, sl
   20ea4:	mov	r1, fp
   20ea8:	mov	r2, r6
   20eac:	mov	r3, r7
   20eb0:	bl	2be44 <_obstack_memory_used@@Base+0x7898>
   20eb4:	mov	r0, sl
   20eb8:	mov	r1, fp
   20ebc:	mov	r3, r7
   20ec0:	add	r2, r2, #48	; 0x30
   20ec4:	strb	r2, [r8, #-1]!
   20ec8:	mov	r2, r6
   20ecc:	bl	2be44 <_obstack_memory_used@@Base+0x7898>
   20ed0:	mov	sl, r0
   20ed4:	mov	fp, r1
   20ed8:	orrs	r3, sl, fp
   20edc:	bne	20ea0 <__assert_fail@plt+0xf12c>
   20ee0:	ldr	r7, [sp, #24]
   20ee4:	b	20ac4 <__assert_fail@plt+0xed50>
   20ee8:	movcc	r8, #3
   20eec:	movcs	r8, #2
   20ef0:	b	206ec <__assert_fail@plt+0xe978>
   20ef4:	ldr	r3, [sp, #8]
   20ef8:	mov	r9, #0
   20efc:	str	r3, [sp, #24]
   20f00:	b	20e00 <__assert_fail@plt+0xf08c>
   20f04:	bl	2bcfc <_obstack_memory_used@@Base+0x7750>
   20f08:	vmov	d7, r0, r1
   20f0c:	vcmp.f64	d7, d9
   20f10:	vmrs	APSR_nzcv, fpscr
   20f14:	movne	r0, #1
   20f18:	moveq	r0, #0
   20f1c:	b	205b8 <__assert_fail@plt+0xe844>
   20f20:	vldr	d7, [pc, #480]	; 21108 <__assert_fail@plt+0xf394>
   20f24:	vmul.f64	d9, d9, d7
   20f28:	b	205d0 <__assert_fail@plt+0xe85c>
   20f2c:	mov	r2, r3
   20f30:	add	r3, r8, r9
   20f34:	cmp	r2, r3
   20f38:	movcs	r8, #2
   20f3c:	movcc	r8, #3
   20f40:	b	20770 <__assert_fail@plt+0xe9fc>
   20f44:	mov	r2, r3
   20f48:	add	r3, r8, r9
   20f4c:	cmp	r2, r3
   20f50:	movcs	r8, #2
   20f54:	movcc	r8, #3
   20f58:	b	207ec <__assert_fail@plt+0xea78>
   20f5c:	ldr	r3, [sp, #28]
   20f60:	add	r7, r8, r7
   20f64:	cmp	r3, r7
   20f68:	movcs	r8, #2
   20f6c:	movcc	r8, #3
   20f70:	b	20868 <__assert_fail@plt+0xeaf4>
   20f74:	ldr	r3, [sp, #28]
   20f78:	add	r7, r8, r7
   20f7c:	cmp	r3, r7
   20f80:	movcs	r8, #2
   20f84:	movcc	r8, #3
   20f88:	b	208e4 <__assert_fail@plt+0xeb70>
   20f8c:	ldr	r3, [sp, #28]
   20f90:	add	r7, r8, r7
   20f94:	cmp	r3, r7
   20f98:	movcs	r8, #2
   20f9c:	movcc	r8, #3
   20fa0:	b	20960 <__assert_fail@plt+0xebec>
   20fa4:	add	r7, r8, r7
   20fa8:	cmp	r9, r7
   20fac:	movcs	r8, #2
   20fb0:	movcc	r8, #3
   20fb4:	b	209d8 <__assert_fail@plt+0xec64>
   20fb8:	vmov.f64	d6, d7
   20fbc:	mov	r9, #1
   20fc0:	b	204cc <__assert_fail@plt+0xe758>
   20fc4:	mov	r9, #2
   20fc8:	b	204cc <__assert_fail@plt+0xe758>
   20fcc:	vmov.f64	d6, d5
   20fd0:	mov	r9, #3
   20fd4:	b	204cc <__assert_fail@plt+0xe758>
   20fd8:	mov	r9, #4
   20fdc:	b	204cc <__assert_fail@plt+0xe758>
   20fe0:	vmov.f64	d6, d5
   20fe4:	mov	r9, #5
   20fe8:	b	204cc <__assert_fail@plt+0xe758>
   20fec:	mov	r9, #6
   20ff0:	b	204cc <__assert_fail@plt+0xe758>
   20ff4:	vmov.f64	d6, d5
   20ff8:	mov	r9, #7
   20ffc:	b	204cc <__assert_fail@plt+0xe758>
   21000:	cmp	r6, #0
   21004:	bne	20a1c <__assert_fail@plt+0xeca8>
   21008:	tst	r4, #8
   2100c:	bne	21068 <__assert_fail@plt+0xf2f4>
   21010:	mov	r3, #48	; 0x30
   21014:	b	20a24 <__assert_fail@plt+0xecb0>
   21018:	mov	r9, #0
   2101c:	b	20adc <__assert_fail@plt+0xed68>
   21020:	mov	r9, #1
   21024:	b	20adc <__assert_fail@plt+0xed68>
   21028:	and	r3, r6, #1
   2102c:	add	r3, r3, r8
   21030:	cmp	r3, #2
   21034:	movle	r3, #0
   21038:	movgt	r3, #1
   2103c:	b	20a08 <__assert_fail@plt+0xec94>
   21040:	mov	r9, #2
   21044:	b	20adc <__assert_fail@plt+0xed68>
   21048:	mov	r9, #3
   2104c:	b	20adc <__assert_fail@plt+0xed68>
   21050:	mov	r9, #4
   21054:	b	20adc <__assert_fail@plt+0xed68>
   21058:	mov	r9, #5
   2105c:	b	20adc <__assert_fail@plt+0xed68>
   21060:	mov	r9, #6
   21064:	b	20adc <__assert_fail@plt+0xed68>
   21068:	ldr	r3, [sp, #8]
   2106c:	mov	r6, #0
   21070:	str	r3, [sp, #24]
   21074:	b	20e00 <__assert_fail@plt+0xf08c>
   21078:	adds	sl, sl, #1
   2107c:	adc	fp, fp, #0
   21080:	cmp	fp, #0
   21084:	cmpeq	sl, #10
   21088:	mov	r8, #0
   2108c:	moveq	r6, r8
   21090:	bne	21008 <__assert_fail@plt+0xf294>
   21094:	ldr	r3, [sp, #8]
   21098:	str	r3, [sp, #24]
   2109c:	b	20e00 <__assert_fail@plt+0xf08c>
   210a0:	mov	r9, #1
   210a4:	b	209dc <__assert_fail@plt+0xec68>
   210a8:	mov	r9, #2
   210ac:	b	209dc <__assert_fail@plt+0xec68>
   210b0:	mov	r9, #3
   210b4:	b	209dc <__assert_fail@plt+0xec68>
   210b8:	ldr	ip, [sp, #48]	; 0x30
   210bc:	ldr	r1, [sp, #24]
   210c0:	mvn	r3, ip
   210c4:	add	r3, r1, r3
   210c8:	mov	r2, #48	; 0x30
   210cc:	strb	r2, [r1, #-1]
   210d0:	mov	r0, r3
   210d4:	ldr	r1, [sp, #52]	; 0x34
   210d8:	mov	r2, ip
   210dc:	str	r3, [sp, #24]
   210e0:	bl	11930 <memcpy@plt>
   210e4:	b	20e54 <__assert_fail@plt+0xf0e0>
   210e8:	mov	r9, #4
   210ec:	b	209dc <__assert_fail@plt+0xec68>
   210f0:	mov	r9, #5
   210f4:	b	209dc <__assert_fail@plt+0xec68>
   210f8:	cmp	r3, #0
   210fc:	ldrne	r2, [sp, #8]
   21100:	bne	20b58 <__assert_fail@plt+0xede4>
   21104:	b	20b68 <__assert_fail@plt+0xedf4>
   21108:	andeq	r0, r0, r0
   2110c:	eormi	r0, r4, r0
   21110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21114:	subs	r4, r0, #0
   21118:	sub	sp, sp, #20
   2111c:	mov	r8, r1
   21120:	mov	r7, r2
   21124:	beq	21234 <__assert_fail@plt+0xf4c0>
   21128:	ldrb	r3, [r4]
   2112c:	ldr	r5, [pc, #384]	; 212b4 <__assert_fail@plt+0xf540>
   21130:	cmp	r3, #39	; 0x27
   21134:	addeq	r4, r4, #1
   21138:	mov	r3, #4
   2113c:	add	r2, r5, #12
   21140:	add	r1, r5, #20
   21144:	mov	r0, r4
   21148:	moveq	r9, #164	; 0xa4
   2114c:	moveq	fp, #420	; 0x1a4
   21150:	moveq	sl, #388	; 0x184
   21154:	moveq	r6, #4
   21158:	movne	r9, #160	; 0xa0
   2115c:	movne	fp, #416	; 0x1a0
   21160:	movne	sl, #384	; 0x180
   21164:	movne	r6, #0
   21168:	bl	1ce08 <__assert_fail@plt+0xb094>
   2116c:	cmp	r0, #0
   21170:	blt	211d0 <__assert_fail@plt+0xf45c>
   21174:	add	r5, r5, r0, lsl #2
   21178:	mov	r1, #0
   2117c:	ldr	ip, [r5, #12]
   21180:	mov	r0, #1
   21184:	mov	r2, r0
   21188:	orr	r6, r6, ip
   2118c:	mov	r3, r1
   21190:	str	r0, [r7]
   21194:	str	r1, [r7, #4]
   21198:	mov	r0, #0
   2119c:	str	r6, [r8]
   211a0:	orrs	r3, r2, r3
   211a4:	bne	211c8 <__assert_fail@plt+0xf454>
   211a8:	ldr	r0, [pc, #264]	; 212b8 <__assert_fail@plt+0xf544>
   211ac:	bl	11ac8 <getenv@plt>
   211b0:	mov	r3, #0
   211b4:	cmp	r0, #0
   211b8:	movne	r2, #512	; 0x200
   211bc:	moveq	r2, #1024	; 0x400
   211c0:	mov	r0, #4
   211c4:	strd	r2, [r7]
   211c8:	add	sp, sp, #20
   211cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   211d0:	ldr	r2, [pc, #228]	; 212bc <__assert_fail@plt+0xf548>
   211d4:	mov	r3, r7
   211d8:	str	r2, [sp]
   211dc:	add	r1, sp, #12
   211e0:	mov	r2, #0
   211e4:	mov	r0, r4
   211e8:	bl	2a3f8 <_obstack_memory_used@@Base+0x5e4c>
   211ec:	cmp	r0, #0
   211f0:	bne	21278 <__assert_fail@plt+0xf504>
   211f4:	ldrb	r3, [r4]
   211f8:	sub	r3, r3, #48	; 0x30
   211fc:	cmp	r3, #9
   21200:	bls	2122c <__assert_fail@plt+0xf4b8>
   21204:	ldr	r2, [sp, #12]
   21208:	cmp	r4, r2
   2120c:	bne	2121c <__assert_fail@plt+0xf4a8>
   21210:	b	21288 <__assert_fail@plt+0xf514>
   21214:	cmp	r2, r4
   21218:	beq	21288 <__assert_fail@plt+0xf514>
   2121c:	ldrb	r3, [r4, #1]!
   21220:	sub	r3, r3, #48	; 0x30
   21224:	cmp	r3, #9
   21228:	bhi	21214 <__assert_fail@plt+0xf4a0>
   2122c:	ldrd	r2, [r7]
   21230:	b	21198 <__assert_fail@plt+0xf424>
   21234:	ldr	r0, [pc, #132]	; 212c0 <__assert_fail@plt+0xf54c>
   21238:	bl	11ac8 <getenv@plt>
   2123c:	subs	r4, r0, #0
   21240:	bne	21128 <__assert_fail@plt+0xf3b4>
   21244:	ldr	r0, [pc, #120]	; 212c4 <__assert_fail@plt+0xf550>
   21248:	bl	11ac8 <getenv@plt>
   2124c:	subs	r4, r0, #0
   21250:	bne	21128 <__assert_fail@plt+0xf3b4>
   21254:	ldr	r0, [pc, #92]	; 212b8 <__assert_fail@plt+0xf544>
   21258:	bl	11ac8 <getenv@plt>
   2125c:	mov	r3, #0
   21260:	mov	r6, #0
   21264:	cmp	r0, #0
   21268:	movne	r2, #512	; 0x200
   2126c:	moveq	r2, #1024	; 0x400
   21270:	strd	r2, [r7]
   21274:	b	21198 <__assert_fail@plt+0xf424>
   21278:	mov	r3, #0
   2127c:	str	r3, [r8]
   21280:	ldrd	r2, [r7]
   21284:	b	211a0 <__assert_fail@plt+0xf42c>
   21288:	ldrb	r3, [r2, #-1]
   2128c:	cmp	r3, #66	; 0x42
   21290:	beq	2129c <__assert_fail@plt+0xf528>
   21294:	mov	r6, r9
   21298:	b	2122c <__assert_fail@plt+0xf4b8>
   2129c:	ldrb	r3, [r2, #-2]
   212a0:	cmp	r3, #105	; 0x69
   212a4:	movne	r6, sl
   212a8:	bne	2122c <__assert_fail@plt+0xf4b8>
   212ac:	mov	r9, fp
   212b0:	b	21294 <__assert_fail@plt+0xf520>
   212b4:	andeq	r0, r3, r0, asr #3
   212b8:	strdeq	r0, [r3], -ip
   212bc:	andeq	r0, r3, ip, lsl #4
   212c0:	andeq	pc, r2, r8, ror #18
   212c4:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   212c8:	push	{r4, r5, r6, r7, r8, lr}
   212cc:	ldr	r6, [pc, #144]	; 21364 <__assert_fail@plt+0xf5f0>
   212d0:	ldr	r4, [r6]
   212d4:	cmp	r4, #0
   212d8:	beq	21304 <__assert_fail@plt+0xf590>
   212dc:	ldr	r3, [r4]
   212e0:	cmp	r0, r3
   212e4:	bne	212f8 <__assert_fail@plt+0xf584>
   212e8:	b	21348 <__assert_fail@plt+0xf5d4>
   212ec:	ldr	r3, [r4]
   212f0:	cmp	r3, r0
   212f4:	beq	21348 <__assert_fail@plt+0xf5d4>
   212f8:	ldr	r4, [r4, #4]
   212fc:	cmp	r4, #0
   21300:	bne	212ec <__assert_fail@plt+0xf578>
   21304:	mov	r5, r0
   21308:	bl	118ac <getpwuid@plt>
   2130c:	cmp	r0, #0
   21310:	beq	21358 <__assert_fail@plt+0xf5e4>
   21314:	ldr	r7, [r0]
   21318:	mov	r0, r7
   2131c:	bl	11b94 <strlen@plt>
   21320:	add	r0, r0, #12
   21324:	bic	r0, r0, #3
   21328:	bl	29958 <_obstack_memory_used@@Base+0x53ac>
   2132c:	mov	r1, r7
   21330:	mov	r4, r0
   21334:	str	r5, [r0], #8
   21338:	bl	11a5c <strcpy@plt>
   2133c:	ldr	r3, [r6]
   21340:	str	r4, [r6]
   21344:	str	r3, [r4, #4]
   21348:	ldrb	r0, [r4, #8]
   2134c:	cmp	r0, #0
   21350:	addne	r0, r4, #8
   21354:	pop	{r4, r5, r6, r7, r8, pc}
   21358:	mov	r0, #12
   2135c:	ldr	r7, [pc, #4]	; 21368 <__assert_fail@plt+0xf5f4>
   21360:	b	21328 <__assert_fail@plt+0xf5b4>
   21364:	ldrdeq	r2, [r4], -ip
   21368:	andeq	r0, r3, r4, lsr #3
   2136c:	push	{r4, r5, r6, r7, r8, lr}
   21370:	mov	r6, r0
   21374:	ldr	r5, [pc, #236]	; 21468 <__assert_fail@plt+0xf6f4>
   21378:	ldr	r4, [r5]
   2137c:	cmp	r4, #0
   21380:	beq	213c0 <__assert_fail@plt+0xf64c>
   21384:	ldrb	r7, [r0]
   21388:	b	21398 <__assert_fail@plt+0xf624>
   2138c:	ldr	r4, [r4, #4]
   21390:	cmp	r4, #0
   21394:	beq	213c0 <__assert_fail@plt+0xf64c>
   21398:	ldrb	r3, [r4, #8]
   2139c:	cmp	r3, r7
   213a0:	bne	2138c <__assert_fail@plt+0xf618>
   213a4:	mov	r1, r6
   213a8:	add	r0, r4, #8
   213ac:	bl	118a0 <strcmp@plt>
   213b0:	cmp	r0, #0
   213b4:	bne	2138c <__assert_fail@plt+0xf618>
   213b8:	mov	r0, r4
   213bc:	pop	{r4, r5, r6, r7, r8, pc}
   213c0:	ldr	r4, [r5, #4]
   213c4:	cmp	r4, #0
   213c8:	beq	2140c <__assert_fail@plt+0xf698>
   213cc:	ldrb	r7, [r6]
   213d0:	b	213e0 <__assert_fail@plt+0xf66c>
   213d4:	ldr	r4, [r4, #4]
   213d8:	cmp	r4, #0
   213dc:	beq	2140c <__assert_fail@plt+0xf698>
   213e0:	ldrb	r3, [r4, #8]
   213e4:	cmp	r3, r7
   213e8:	bne	213d4 <__assert_fail@plt+0xf660>
   213ec:	mov	r1, r6
   213f0:	add	r0, r4, #8
   213f4:	bl	118a0 <strcmp@plt>
   213f8:	cmp	r0, #0
   213fc:	popeq	{r4, r5, r6, r7, r8, pc}
   21400:	ldr	r4, [r4, #4]
   21404:	cmp	r4, #0
   21408:	bne	213e0 <__assert_fail@plt+0xf66c>
   2140c:	mov	r0, r6
   21410:	bl	11894 <getpwnam@plt>
   21414:	mov	r4, r0
   21418:	mov	r0, r6
   2141c:	bl	11b94 <strlen@plt>
   21420:	add	r0, r0, #12
   21424:	bic	r0, r0, #3
   21428:	bl	29958 <_obstack_memory_used@@Base+0x53ac>
   2142c:	mov	r1, r6
   21430:	mov	r7, r0
   21434:	add	r0, r0, #8
   21438:	bl	11a5c <strcpy@plt>
   2143c:	cmp	r4, #0
   21440:	movne	r0, r7
   21444:	ldrne	r3, [r5]
   21448:	ldrne	r2, [r4, #8]
   2144c:	ldreq	r3, [r5, #4]
   21450:	strne	r7, [r5]
   21454:	moveq	r0, r4
   21458:	streq	r7, [r5, #4]
   2145c:	stmne	r7, {r2, r3}
   21460:	streq	r3, [r7, #4]
   21464:	pop	{r4, r5, r6, r7, r8, pc}
   21468:	ldrdeq	r2, [r4], -ip
   2146c:	push	{r4, r5, r6, r7, r8, lr}
   21470:	ldr	r6, [pc, #144]	; 21508 <__assert_fail@plt+0xf794>
   21474:	ldr	r4, [r6, #8]
   21478:	cmp	r4, #0
   2147c:	beq	214a8 <__assert_fail@plt+0xf734>
   21480:	ldr	r3, [r4]
   21484:	cmp	r0, r3
   21488:	bne	2149c <__assert_fail@plt+0xf728>
   2148c:	b	214ec <__assert_fail@plt+0xf778>
   21490:	ldr	r3, [r4]
   21494:	cmp	r3, r0
   21498:	beq	214ec <__assert_fail@plt+0xf778>
   2149c:	ldr	r4, [r4, #4]
   214a0:	cmp	r4, #0
   214a4:	bne	21490 <__assert_fail@plt+0xf71c>
   214a8:	mov	r5, r0
   214ac:	bl	11d44 <getgrgid@plt>
   214b0:	cmp	r0, #0
   214b4:	beq	214fc <__assert_fail@plt+0xf788>
   214b8:	ldr	r7, [r0]
   214bc:	mov	r0, r7
   214c0:	bl	11b94 <strlen@plt>
   214c4:	add	r0, r0, #12
   214c8:	bic	r0, r0, #3
   214cc:	bl	29958 <_obstack_memory_used@@Base+0x53ac>
   214d0:	mov	r1, r7
   214d4:	mov	r4, r0
   214d8:	str	r5, [r0], #8
   214dc:	bl	11a5c <strcpy@plt>
   214e0:	ldr	r3, [r6, #8]
   214e4:	str	r4, [r6, #8]
   214e8:	str	r3, [r4, #4]
   214ec:	ldrb	r0, [r4, #8]
   214f0:	cmp	r0, #0
   214f4:	addne	r0, r4, #8
   214f8:	pop	{r4, r5, r6, r7, r8, pc}
   214fc:	mov	r0, #12
   21500:	ldr	r7, [pc, #4]	; 2150c <__assert_fail@plt+0xf798>
   21504:	b	214cc <__assert_fail@plt+0xf758>
   21508:	ldrdeq	r2, [r4], -ip
   2150c:	andeq	r0, r3, r4, lsr #3
   21510:	push	{r4, r5, r6, r7, r8, lr}
   21514:	mov	r6, r0
   21518:	ldr	r5, [pc, #236]	; 2160c <__assert_fail@plt+0xf898>
   2151c:	ldr	r4, [r5, #8]
   21520:	cmp	r4, #0
   21524:	beq	21564 <__assert_fail@plt+0xf7f0>
   21528:	ldrb	r7, [r0]
   2152c:	b	2153c <__assert_fail@plt+0xf7c8>
   21530:	ldr	r4, [r4, #4]
   21534:	cmp	r4, #0
   21538:	beq	21564 <__assert_fail@plt+0xf7f0>
   2153c:	ldrb	r3, [r4, #8]
   21540:	cmp	r3, r7
   21544:	bne	21530 <__assert_fail@plt+0xf7bc>
   21548:	mov	r1, r6
   2154c:	add	r0, r4, #8
   21550:	bl	118a0 <strcmp@plt>
   21554:	cmp	r0, #0
   21558:	bne	21530 <__assert_fail@plt+0xf7bc>
   2155c:	mov	r0, r4
   21560:	pop	{r4, r5, r6, r7, r8, pc}
   21564:	ldr	r4, [r5, #12]
   21568:	cmp	r4, #0
   2156c:	beq	215b0 <__assert_fail@plt+0xf83c>
   21570:	ldrb	r7, [r6]
   21574:	b	21584 <__assert_fail@plt+0xf810>
   21578:	ldr	r4, [r4, #4]
   2157c:	cmp	r4, #0
   21580:	beq	215b0 <__assert_fail@plt+0xf83c>
   21584:	ldrb	r3, [r4, #8]
   21588:	cmp	r3, r7
   2158c:	bne	21578 <__assert_fail@plt+0xf804>
   21590:	mov	r1, r6
   21594:	add	r0, r4, #8
   21598:	bl	118a0 <strcmp@plt>
   2159c:	cmp	r0, #0
   215a0:	popeq	{r4, r5, r6, r7, r8, pc}
   215a4:	ldr	r4, [r4, #4]
   215a8:	cmp	r4, #0
   215ac:	bne	21584 <__assert_fail@plt+0xf810>
   215b0:	mov	r0, r6
   215b4:	bl	11d50 <getgrnam@plt>
   215b8:	mov	r4, r0
   215bc:	mov	r0, r6
   215c0:	bl	11b94 <strlen@plt>
   215c4:	add	r0, r0, #12
   215c8:	bic	r0, r0, #3
   215cc:	bl	29958 <_obstack_memory_used@@Base+0x53ac>
   215d0:	mov	r1, r6
   215d4:	mov	r7, r0
   215d8:	add	r0, r0, #8
   215dc:	bl	11a5c <strcpy@plt>
   215e0:	cmp	r4, #0
   215e4:	movne	r0, r7
   215e8:	ldrne	r3, [r5, #8]
   215ec:	ldrne	r2, [r4, #8]
   215f0:	ldreq	r3, [r5, #12]
   215f4:	strne	r7, [r5, #8]
   215f8:	moveq	r0, r4
   215fc:	streq	r7, [r5, #12]
   21600:	stmne	r7, {r2, r3}
   21604:	streq	r3, [r7, #4]
   21608:	pop	{r4, r5, r6, r7, r8, pc}
   2160c:	ldrdeq	r2, [r4], -ip
   21610:	cmp	r0, #0
   21614:	sbcs	r3, r1, #0
   21618:	mov	r3, #0
   2161c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21620:	mov	r4, r0
   21624:	mov	r5, r1
   21628:	strb	r3, [r2, #20]
   2162c:	add	r6, r2, #20
   21630:	mov	r8, #10
   21634:	mov	r9, #0
   21638:	blt	21688 <__assert_fail@plt+0xf914>
   2163c:	mov	r0, r4
   21640:	mov	r1, r5
   21644:	mov	r2, r8
   21648:	mov	r3, r9
   2164c:	bl	2bd70 <_obstack_memory_used@@Base+0x77c4>
   21650:	mov	r0, r4
   21654:	mov	r1, r5
   21658:	mov	r3, r9
   2165c:	add	r2, r2, #48	; 0x30
   21660:	strb	r2, [r6, #-1]!
   21664:	mov	r2, r8
   21668:	bl	2bd70 <_obstack_memory_used@@Base+0x77c4>
   2166c:	mov	r4, r0
   21670:	mov	r5, r1
   21674:	orrs	r3, r4, r5
   21678:	bne	2163c <__assert_fail@plt+0xf8c8>
   2167c:	mov	r0, r6
   21680:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21684:	mov	r6, r7
   21688:	mov	r0, r4
   2168c:	mov	r1, r5
   21690:	mov	r2, r8
   21694:	mov	r3, r9
   21698:	bl	2bd70 <_obstack_memory_used@@Base+0x77c4>
   2169c:	mov	r0, r4
   216a0:	mov	r1, r5
   216a4:	mov	r3, r9
   216a8:	sub	r7, r6, #1
   216ac:	rsb	r2, r2, #48	; 0x30
   216b0:	strb	r2, [r6, #-1]
   216b4:	mov	r2, r8
   216b8:	bl	2bd70 <_obstack_memory_used@@Base+0x77c4>
   216bc:	mov	r4, r0
   216c0:	mov	r5, r1
   216c4:	orrs	r3, r4, r5
   216c8:	bne	21684 <__assert_fail@plt+0xf910>
   216cc:	mov	r3, #45	; 0x2d
   216d0:	sub	r6, r6, #2
   216d4:	strb	r3, [r7, #-1]
   216d8:	mov	r0, r6
   216dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   216e0:	push	{r4, r5, r6, r8, r9, lr}
   216e4:	mov	r4, r0
   216e8:	mov	r5, r1
   216ec:	add	r6, r2, #20
   216f0:	mov	r8, #10
   216f4:	mov	r9, #0
   216f8:	mov	r3, #0
   216fc:	strb	r3, [r2, #20]
   21700:	mov	r0, r4
   21704:	mov	r1, r5
   21708:	mov	r2, r8
   2170c:	mov	r3, r9
   21710:	bl	2be44 <_obstack_memory_used@@Base+0x7898>
   21714:	mov	r0, r4
   21718:	mov	r1, r5
   2171c:	mov	r3, r9
   21720:	add	r2, r2, #48	; 0x30
   21724:	strb	r2, [r6, #-1]!
   21728:	mov	r2, r8
   2172c:	bl	2be44 <_obstack_memory_used@@Base+0x7898>
   21730:	mov	r4, r0
   21734:	mov	r5, r1
   21738:	orrs	r3, r4, r5
   2173c:	bne	21700 <__assert_fail@plt+0xf98c>
   21740:	mov	r0, r6
   21744:	pop	{r4, r5, r6, r8, r9, pc}
   21748:	push	{r4, r5, r6, r7, lr}
   2174c:	subs	r6, r0, #0
   21750:	sub	sp, sp, #12
   21754:	addeq	r6, sp, #4
   21758:	mov	r0, r6
   2175c:	mov	r5, r2
   21760:	mov	r7, r1
   21764:	bl	11a74 <mbrtowc@plt>
   21768:	cmp	r5, #0
   2176c:	cmnne	r0, #3
   21770:	mov	r4, r0
   21774:	bls	21790 <__assert_fail@plt+0xfa1c>
   21778:	mov	r0, #0
   2177c:	bl	1e958 <__assert_fail@plt+0xcbe4>
   21780:	cmp	r0, #0
   21784:	moveq	r4, #1
   21788:	ldrbeq	r3, [r7]
   2178c:	streq	r3, [r6]
   21790:	mov	r0, r4
   21794:	add	sp, sp, #12
   21798:	pop	{r4, r5, r6, r7, pc}
   2179c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   217a0:	sub	sp, sp, #12
   217a4:	mov	r9, r3
   217a8:	mov	r4, r1
   217ac:	str	r2, [sp]
   217b0:	mov	fp, r0
   217b4:	bl	11b94 <strlen@plt>
   217b8:	ldr	r3, [sp, #52]	; 0x34
   217bc:	ands	r5, r3, #2
   217c0:	mov	r7, r0
   217c4:	beq	21924 <__assert_fail@plt+0xfbb0>
   217c8:	mov	r8, #0
   217cc:	mov	sl, r8
   217d0:	mov	r5, r7
   217d4:	ldr	r2, [r9]
   217d8:	cmp	r5, r2
   217dc:	movhi	r7, r2
   217e0:	movhi	r6, #0
   217e4:	bls	218e4 <__assert_fail@plt+0xfb70>
   217e8:	ldr	r3, [sp, #48]	; 0x30
   217ec:	str	r2, [r9]
   217f0:	cmp	r3, #0
   217f4:	beq	21908 <__assert_fail@plt+0xfb94>
   217f8:	cmp	r3, #1
   217fc:	moveq	r9, #0
   21800:	bne	21914 <__assert_fail@plt+0xfba0>
   21804:	ldr	r3, [sp, #52]	; 0x34
   21808:	tst	r3, #4
   2180c:	movne	r6, #0
   21810:	tst	r3, #8
   21814:	ldr	r3, [sp]
   21818:	movne	r9, #0
   2181c:	cmp	r3, #0
   21820:	beq	218bc <__assert_fail@plt+0xfb48>
   21824:	sub	r5, r3, #1
   21828:	add	r5, r4, r5
   2182c:	cmp	r6, #0
   21830:	cmpne	r4, r5
   21834:	sub	r3, r6, #1
   21838:	bcs	21860 <__assert_fail@plt+0xfaec>
   2183c:	mov	r1, #32
   21840:	strb	r1, [r4], #1
   21844:	cmp	r3, #0
   21848:	cmpne	r5, r4
   2184c:	movhi	r2, #1
   21850:	movls	r2, #0
   21854:	cmp	r2, #0
   21858:	sub	r3, r3, #1
   2185c:	bne	21840 <__assert_fail@plt+0xfacc>
   21860:	sub	r2, r5, r4
   21864:	cmp	r2, r7
   21868:	mov	r3, #0
   2186c:	movcs	r2, r7
   21870:	strb	r3, [r4]
   21874:	mov	r1, fp
   21878:	mov	r0, r4
   2187c:	bl	11b40 <mempcpy@plt>
   21880:	sub	r3, r9, #1
   21884:	cmp	r9, #0
   21888:	cmpne	r5, r0
   2188c:	bls	218b4 <__assert_fail@plt+0xfb40>
   21890:	mov	r1, #32
   21894:	strb	r1, [r0], #1
   21898:	cmp	r3, #0
   2189c:	cmpne	r5, r0
   218a0:	movhi	r2, #1
   218a4:	movls	r2, #0
   218a8:	cmp	r2, #0
   218ac:	sub	r3, r3, #1
   218b0:	bne	21894 <__assert_fail@plt+0xfb20>
   218b4:	mov	r3, #0
   218b8:	strb	r3, [r0]
   218bc:	add	r6, r6, r7
   218c0:	add	r9, r6, r9
   218c4:	mov	r0, r8
   218c8:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   218cc:	mov	r0, sl
   218d0:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   218d4:	mov	r0, r9
   218d8:	add	sp, sp, #12
   218dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   218e0:	mov	sl, #0
   218e4:	ldr	r3, [sp, #48]	; 0x30
   218e8:	cmp	r5, r2
   218ec:	movcs	r2, r5
   218f0:	subcc	r6, r2, r5
   218f4:	movcs	r6, #0
   218f8:	movcc	r2, r5
   218fc:	cmp	r3, #0
   21900:	str	r2, [r9]
   21904:	bne	217f8 <__assert_fail@plt+0xfa84>
   21908:	mov	r9, r6
   2190c:	ldr	r6, [sp, #48]	; 0x30
   21910:	b	21804 <__assert_fail@plt+0xfa90>
   21914:	lsr	r9, r6, #1
   21918:	and	r6, r6, #1
   2191c:	add	r6, r6, r9
   21920:	b	21804 <__assert_fail@plt+0xfa90>
   21924:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   21928:	cmp	r0, #1
   2192c:	bls	217c8 <__assert_fail@plt+0xfa54>
   21930:	mov	r2, r5
   21934:	mov	r1, fp
   21938:	mov	r0, r5
   2193c:	bl	11ca8 <mbstowcs@plt>
   21940:	cmn	r0, #1
   21944:	bne	21964 <__assert_fail@plt+0xfbf0>
   21948:	ldr	r3, [sp, #52]	; 0x34
   2194c:	tst	r3, #1
   21950:	bne	217c8 <__assert_fail@plt+0xfa54>
   21954:	mov	r8, #0
   21958:	mov	sl, r8
   2195c:	mvn	r9, #0
   21960:	b	218c4 <__assert_fail@plt+0xfb50>
   21964:	add	sl, r0, #1
   21968:	lsl	r6, sl, #2
   2196c:	mov	r0, r6
   21970:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   21974:	subs	r8, r0, #0
   21978:	beq	21ae8 <__assert_fail@plt+0xfd74>
   2197c:	mov	r2, sl
   21980:	mov	r1, fp
   21984:	bl	11ca8 <mbstowcs@plt>
   21988:	cmp	r0, #0
   2198c:	beq	21a94 <__assert_fail@plt+0xfd20>
   21990:	add	r6, r8, r6
   21994:	str	r5, [r6, #-4]
   21998:	ldr	r6, [r8]
   2199c:	cmp	r6, #0
   219a0:	beq	21aa0 <__assert_fail@plt+0xfd2c>
   219a4:	mov	r3, r5
   219a8:	mov	r0, r6
   219ac:	mov	r5, r8
   219b0:	mov	r6, r3
   219b4:	bl	119f0 <iswprint@plt>
   219b8:	cmp	r0, #0
   219bc:	moveq	r6, #1
   219c0:	ldreq	r3, [pc, #324]	; 21b0c <__assert_fail@plt+0xfd98>
   219c4:	streq	r3, [r5]
   219c8:	ldr	r0, [r5, #4]!
   219cc:	cmp	r0, #0
   219d0:	bne	219b4 <__assert_fail@plt+0xfc40>
   219d4:	str	r6, [sp, #4]
   219d8:	mov	r1, sl
   219dc:	mov	r6, r0
   219e0:	mov	r0, r8
   219e4:	bl	11c6c <wcswidth@plt>
   219e8:	ldr	r3, [sp, #4]
   219ec:	cmp	r3, #0
   219f0:	mov	r5, r0
   219f4:	beq	21ab0 <__assert_fail@plt+0xfd3c>
   219f8:	mov	r2, r6
   219fc:	mov	r1, r8
   21a00:	mov	r0, r6
   21a04:	bl	11a80 <wcstombs@plt>
   21a08:	add	r3, r0, #1
   21a0c:	mov	r0, r3
   21a10:	str	r3, [sp, #4]
   21a14:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   21a18:	subs	sl, r0, #0
   21a1c:	beq	21ad4 <__assert_fail@plt+0xfd60>
   21a20:	ldr	r0, [r8]
   21a24:	ldr	r6, [r9]
   21a28:	cmp	r0, #0
   21a2c:	beq	21b00 <__assert_fail@plt+0xfd8c>
   21a30:	mov	r7, r8
   21a34:	mov	r5, #0
   21a38:	mov	fp, #1
   21a3c:	b	21a50 <__assert_fail@plt+0xfcdc>
   21a40:	ldr	r0, [r7, #4]!
   21a44:	mov	r5, r3
   21a48:	cmp	r0, #0
   21a4c:	beq	21a70 <__assert_fail@plt+0xfcfc>
   21a50:	bl	118d0 <wcwidth@plt>
   21a54:	cmn	r0, #1
   21a58:	moveq	r0, fp
   21a5c:	ldreq	r3, [pc, #168]	; 21b0c <__assert_fail@plt+0xfd98>
   21a60:	streq	r3, [r7]
   21a64:	add	r3, r5, r0
   21a68:	cmp	r6, r3
   21a6c:	bcs	21a40 <__assert_fail@plt+0xfccc>
   21a70:	mov	r0, #0
   21a74:	str	r0, [r7]
   21a78:	ldr	r2, [sp, #4]
   21a7c:	mov	r1, r8
   21a80:	mov	r0, sl
   21a84:	bl	11a80 <wcstombs@plt>
   21a88:	mov	fp, sl
   21a8c:	mov	r7, r0
   21a90:	b	217d4 <__assert_fail@plt+0xfa60>
   21a94:	mov	sl, r0
   21a98:	mov	r5, r7
   21a9c:	b	217d4 <__assert_fail@plt+0xfa60>
   21aa0:	mov	r1, sl
   21aa4:	mov	r0, r8
   21aa8:	bl	11c6c <wcswidth@plt>
   21aac:	mov	r5, r0
   21ab0:	ldr	r2, [r9]
   21ab4:	cmp	r2, r5
   21ab8:	bcs	218e0 <__assert_fail@plt+0xfb6c>
   21abc:	add	r3, r7, #1
   21ac0:	mov	r0, r3
   21ac4:	str	r3, [sp, #4]
   21ac8:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   21acc:	subs	sl, r0, #0
   21ad0:	bne	21a20 <__assert_fail@plt+0xfcac>
   21ad4:	ldr	r3, [sp, #52]	; 0x34
   21ad8:	tst	r3, #1
   21adc:	mvneq	r9, #0
   21ae0:	beq	218c4 <__assert_fail@plt+0xfb50>
   21ae4:	b	217d4 <__assert_fail@plt+0xfa60>
   21ae8:	ldr	r3, [sp, #52]	; 0x34
   21aec:	tst	r3, #1
   21af0:	beq	21954 <__assert_fail@plt+0xfbe0>
   21af4:	mov	r5, r7
   21af8:	mov	sl, r8
   21afc:	b	217d4 <__assert_fail@plt+0xfa60>
   21b00:	mov	r5, r0
   21b04:	mov	r7, r8
   21b08:	b	21a70 <__assert_fail@plt+0xfcfc>
   21b0c:	strdeq	pc, [r0], -sp
   21b10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b14:	sub	sp, sp, #44	; 0x2c
   21b18:	mov	r4, #0
   21b1c:	str	r1, [sp, #4]
   21b20:	ldr	r1, [r1]
   21b24:	str	r2, [sp, #20]
   21b28:	and	r2, r3, #2
   21b2c:	str	r2, [sp, #16]
   21b30:	mov	r5, r1
   21b34:	and	r2, r3, #1
   21b38:	mov	r6, #32
   21b3c:	str	r2, [sp, #36]	; 0x24
   21b40:	and	r2, r3, #4
   21b44:	and	r3, r3, #8
   21b48:	str	r1, [sp, #12]
   21b4c:	str	r0, [sp, #8]
   21b50:	str	r2, [sp, #24]
   21b54:	str	r3, [sp, #28]
   21b58:	add	r7, r5, #1
   21b5c:	mov	r1, r7
   21b60:	mov	r0, r4
   21b64:	bl	2b238 <_obstack_memory_used@@Base+0x6c8c>
   21b68:	subs	r8, r0, #0
   21b6c:	beq	21f74 <__assert_fail@plt+0x10200>
   21b70:	ldr	r3, [sp, #4]
   21b74:	ldr	r2, [sp, #12]
   21b78:	ldr	r0, [sp, #8]
   21b7c:	str	r2, [r3]
   21b80:	bl	11b94 <strlen@plt>
   21b84:	ldr	r3, [sp, #16]
   21b88:	cmp	r3, #0
   21b8c:	mov	r4, r0
   21b90:	beq	21d28 <__assert_fail@plt+0xffb4>
   21b94:	mov	r3, #0
   21b98:	ldr	r2, [sp, #12]
   21b9c:	ldr	r1, [sp, #8]
   21ba0:	mov	r9, r0
   21ba4:	mov	sl, r3
   21ba8:	str	r3, [sp]
   21bac:	cmp	r9, r2
   21bb0:	movhi	r4, r2
   21bb4:	movhi	fp, #0
   21bb8:	bls	21d04 <__assert_fail@plt+0xff90>
   21bbc:	ldr	r3, [sp, #20]
   21bc0:	ldr	r0, [sp, #4]
   21bc4:	cmp	r3, #0
   21bc8:	str	r2, [r0]
   21bcc:	beq	21d1c <__assert_fail@plt+0xffa8>
   21bd0:	cmp	r3, #1
   21bd4:	moveq	r3, #0
   21bd8:	lsrne	r3, fp, #1
   21bdc:	andne	fp, fp, #1
   21be0:	addne	fp, fp, r3
   21be4:	ldr	r2, [sp, #24]
   21be8:	cmp	r2, #0
   21bec:	ldr	r2, [sp, #28]
   21bf0:	movne	fp, #0
   21bf4:	cmp	r2, #0
   21bf8:	movne	r3, #0
   21bfc:	cmp	r7, #0
   21c00:	beq	21cc4 <__assert_fail@plt+0xff50>
   21c04:	add	r5, r8, r5
   21c08:	cmp	fp, #0
   21c0c:	cmpne	r8, r5
   21c10:	mov	r0, r8
   21c14:	sub	r2, fp, #1
   21c18:	bcs	21c3c <__assert_fail@plt+0xfec8>
   21c1c:	strb	r6, [r0], #1
   21c20:	cmp	r2, #0
   21c24:	cmpne	r5, r0
   21c28:	movhi	ip, #1
   21c2c:	movls	ip, #0
   21c30:	cmp	ip, #0
   21c34:	sub	r2, r2, #1
   21c38:	bne	21c1c <__assert_fail@plt+0xfea8>
   21c3c:	sub	r2, r5, r0
   21c40:	cmp	r2, r4
   21c44:	str	r3, [sp, #32]
   21c48:	mov	r3, #0
   21c4c:	movcs	r2, r4
   21c50:	strb	r3, [r0]
   21c54:	bl	11b40 <mempcpy@plt>
   21c58:	ldr	r3, [sp, #32]
   21c5c:	sub	r2, r3, #1
   21c60:	cmp	r3, #0
   21c64:	cmpne	r5, r0
   21c68:	bls	21c8c <__assert_fail@plt+0xff18>
   21c6c:	strb	r6, [r0], #1
   21c70:	cmp	r2, #0
   21c74:	cmpne	r5, r0
   21c78:	movhi	r1, #1
   21c7c:	movls	r1, #0
   21c80:	cmp	r1, #0
   21c84:	sub	r2, r2, #1
   21c88:	bne	21c6c <__assert_fail@plt+0xfef8>
   21c8c:	mov	r2, #0
   21c90:	strb	r2, [r0]
   21c94:	add	r5, fp, r4
   21c98:	ldr	r0, [sp]
   21c9c:	add	r5, r5, r3
   21ca0:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   21ca4:	mov	r0, sl
   21ca8:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   21cac:	cmn	r5, #1
   21cb0:	beq	21d68 <__assert_fail@plt+0xfff4>
   21cb4:	cmp	r7, r5
   21cb8:	bhi	21cf0 <__assert_fail@plt+0xff7c>
   21cbc:	mov	r4, r8
   21cc0:	b	21b58 <__assert_fail@plt+0xfde4>
   21cc4:	ldr	r0, [sp]
   21cc8:	add	r5, fp, r4
   21ccc:	add	r5, r5, r3
   21cd0:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   21cd4:	mov	r0, sl
   21cd8:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   21cdc:	cmn	r5, #1
   21ce0:	bne	21cbc <__assert_fail@plt+0xff48>
   21ce4:	mov	r0, r8
   21ce8:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   21cec:	mov	r8, #0
   21cf0:	mov	r0, r8
   21cf4:	add	sp, sp, #44	; 0x2c
   21cf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21cfc:	ldr	r1, [sp, #8]
   21d00:	mov	sl, #0
   21d04:	cmp	r2, r9
   21d08:	subhi	fp, r2, r9
   21d0c:	movls	r2, r9
   21d10:	movhi	r2, r9
   21d14:	movls	fp, #0
   21d18:	b	21bbc <__assert_fail@plt+0xfe48>
   21d1c:	mov	r3, fp
   21d20:	ldr	fp, [sp, #20]
   21d24:	b	21be4 <__assert_fail@plt+0xfe70>
   21d28:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   21d2c:	cmp	r0, #1
   21d30:	bls	21d80 <__assert_fail@plt+0x1000c>
   21d34:	mov	r2, #0
   21d38:	ldr	r1, [sp, #8]
   21d3c:	ldr	r0, [sp, #16]
   21d40:	bl	11ca8 <mbstowcs@plt>
   21d44:	cmn	r0, #1
   21d48:	bne	21da0 <__assert_fail@plt+0x1002c>
   21d4c:	ldr	r3, [sp, #36]	; 0x24
   21d50:	cmp	r3, #0
   21d54:	bne	21d80 <__assert_fail@plt+0x1000c>
   21d58:	mov	r0, #0
   21d5c:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   21d60:	mov	r0, #0
   21d64:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   21d68:	mov	r0, r8
   21d6c:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   21d70:	mov	r8, #0
   21d74:	mov	r0, r8
   21d78:	add	sp, sp, #44	; 0x2c
   21d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21d80:	ldr	r3, [sp, #4]
   21d84:	mov	r9, r4
   21d88:	ldr	r1, [sp, #8]
   21d8c:	ldr	r2, [r3]
   21d90:	mov	r3, #0
   21d94:	str	r3, [sp]
   21d98:	ldr	sl, [sp, #16]
   21d9c:	b	21bac <__assert_fail@plt+0xfe38>
   21da0:	add	fp, r0, #1
   21da4:	lsl	sl, fp, #2
   21da8:	mov	r0, sl
   21dac:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   21db0:	subs	r3, r0, #0
   21db4:	str	r3, [sp]
   21db8:	beq	21ee8 <__assert_fail@plt+0x10174>
   21dbc:	mov	r2, fp
   21dc0:	ldr	r1, [sp, #8]
   21dc4:	bl	11ca8 <mbstowcs@plt>
   21dc8:	cmp	r0, #0
   21dcc:	beq	21ef4 <__assert_fail@plt+0x10180>
   21dd0:	ldr	r3, [sp]
   21dd4:	ldr	r2, [sp, #16]
   21dd8:	add	sl, r3, sl
   21ddc:	str	r2, [sl, #-4]
   21de0:	ldr	sl, [r3]
   21de4:	cmp	sl, #0
   21de8:	beq	21f0c <__assert_fail@plt+0x10198>
   21dec:	mov	r9, r3
   21df0:	mov	r3, #0
   21df4:	mov	r0, sl
   21df8:	mov	sl, r3
   21dfc:	bl	119f0 <iswprint@plt>
   21e00:	cmp	r0, #0
   21e04:	moveq	sl, #1
   21e08:	ldreq	r3, [pc, #376]	; 21f88 <__assert_fail@plt+0x10214>
   21e0c:	streq	r3, [r9]
   21e10:	ldr	r0, [r9, #4]!
   21e14:	cmp	r0, #0
   21e18:	bne	21dfc <__assert_fail@plt+0x10088>
   21e1c:	str	sl, [sp, #32]
   21e20:	mov	r1, fp
   21e24:	mov	sl, r0
   21e28:	ldr	r0, [sp]
   21e2c:	bl	11c6c <wcswidth@plt>
   21e30:	ldr	r3, [sp, #32]
   21e34:	cmp	r3, #0
   21e38:	mov	r9, r0
   21e3c:	beq	21f1c <__assert_fail@plt+0x101a8>
   21e40:	mov	r0, sl
   21e44:	mov	r2, #0
   21e48:	ldr	r1, [sp]
   21e4c:	bl	11a80 <wcstombs@plt>
   21e50:	add	r3, r0, #1
   21e54:	mov	r0, r3
   21e58:	str	r3, [sp, #32]
   21e5c:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   21e60:	subs	sl, r0, #0
   21e64:	beq	21f44 <__assert_fail@plt+0x101d0>
   21e68:	ldr	r3, [sp]
   21e6c:	ldr	r2, [sp, #4]
   21e70:	mov	fp, r3
   21e74:	ldr	r0, [r3]
   21e78:	ldr	r4, [r2]
   21e7c:	cmp	r0, #0
   21e80:	mov	r9, #0
   21e84:	bne	21e9c <__assert_fail@plt+0x10128>
   21e88:	b	21ebc <__assert_fail@plt+0x10148>
   21e8c:	ldr	r0, [fp, #4]!
   21e90:	mov	r9, r3
   21e94:	cmp	r0, #0
   21e98:	beq	21ebc <__assert_fail@plt+0x10148>
   21e9c:	bl	118d0 <wcwidth@plt>
   21ea0:	cmn	r0, #1
   21ea4:	moveq	r0, #1
   21ea8:	ldreq	r3, [pc, #216]	; 21f88 <__assert_fail@plt+0x10214>
   21eac:	streq	r3, [fp]
   21eb0:	add	r3, r0, r9
   21eb4:	cmp	r4, r3
   21eb8:	bcs	21e8c <__assert_fail@plt+0x10118>
   21ebc:	mov	r3, #0
   21ec0:	str	r3, [fp]
   21ec4:	ldr	r2, [sp, #32]
   21ec8:	ldr	r1, [sp]
   21ecc:	mov	r0, sl
   21ed0:	bl	11a80 <wcstombs@plt>
   21ed4:	ldr	r3, [sp, #4]
   21ed8:	mov	r1, sl
   21edc:	ldr	r2, [r3]
   21ee0:	mov	r4, r0
   21ee4:	b	21bac <__assert_fail@plt+0xfe38>
   21ee8:	ldr	r3, [sp, #36]	; 0x24
   21eec:	cmp	r3, #0
   21ef0:	beq	21d58 <__assert_fail@plt+0xffe4>
   21ef4:	ldr	r3, [sp, #4]
   21ef8:	mov	r9, r4
   21efc:	ldr	r1, [sp, #8]
   21f00:	ldr	r2, [r3]
   21f04:	mov	sl, #0
   21f08:	b	21bac <__assert_fail@plt+0xfe38>
   21f0c:	mov	r0, r3
   21f10:	mov	r1, fp
   21f14:	bl	11c6c <wcswidth@plt>
   21f18:	mov	r9, r0
   21f1c:	ldr	r3, [sp, #4]
   21f20:	ldr	r2, [r3]
   21f24:	cmp	r2, r9
   21f28:	bcs	21cfc <__assert_fail@plt+0xff88>
   21f2c:	add	r3, r4, #1
   21f30:	mov	r0, r3
   21f34:	str	r3, [sp, #32]
   21f38:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   21f3c:	subs	sl, r0, #0
   21f40:	bne	21e68 <__assert_fail@plt+0x100f4>
   21f44:	ldr	r3, [sp, #36]	; 0x24
   21f48:	cmp	r3, #0
   21f4c:	bne	21f64 <__assert_fail@plt+0x101f0>
   21f50:	ldr	r0, [sp]
   21f54:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   21f58:	ldr	r0, [sp, #36]	; 0x24
   21f5c:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   21f60:	b	21d68 <__assert_fail@plt+0xfff4>
   21f64:	ldr	r3, [sp, #4]
   21f68:	ldr	r1, [sp, #8]
   21f6c:	ldr	r2, [r3]
   21f70:	b	21bac <__assert_fail@plt+0xfe38>
   21f74:	mov	r0, r4
   21f78:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   21f7c:	mov	r0, r8
   21f80:	add	sp, sp, #44	; 0x2c
   21f84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21f88:	strdeq	pc, [r0], -sp
   21f8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21f90:	sub	sp, sp, #20
   21f94:	mov	r5, r0
   21f98:	add	r7, r0, r1
   21f9c:	mov	sl, r2
   21fa0:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   21fa4:	cmp	r0, #1
   21fa8:	bls	2214c <__assert_fail@plt+0x103d8>
   21fac:	cmp	r5, r7
   21fb0:	mov	r6, #0
   21fb4:	bcs	220b0 <__assert_fail@plt+0x1033c>
   21fb8:	and	fp, sl, #2
   21fbc:	mov	r9, r6
   21fc0:	and	sl, sl, #1
   21fc4:	mvn	r8, #-2147483648	; 0x80000000
   21fc8:	b	21ff0 <__assert_fail@plt+0x1027c>
   21fcc:	cmp	r3, #37	; 0x25
   21fd0:	bcs	21fe0 <__assert_fail@plt+0x1026c>
   21fd4:	sub	r3, r3, #32
   21fd8:	cmp	r3, #3
   21fdc:	bhi	22018 <__assert_fail@plt+0x102a4>
   21fe0:	add	r5, r5, #1
   21fe4:	add	r6, r6, #1
   21fe8:	cmp	r7, r5
   21fec:	bls	220b0 <__assert_fail@plt+0x1033c>
   21ff0:	ldrb	r3, [r5]
   21ff4:	cmp	r3, #63	; 0x3f
   21ff8:	bls	21fcc <__assert_fail@plt+0x10258>
   21ffc:	cmp	r3, #65	; 0x41
   22000:	bcc	22018 <__assert_fail@plt+0x102a4>
   22004:	cmp	r3, #95	; 0x5f
   22008:	bls	21fe0 <__assert_fail@plt+0x1026c>
   2200c:	sub	r3, r3, #97	; 0x61
   22010:	cmp	r3, #29
   22014:	bls	21fe0 <__assert_fail@plt+0x1026c>
   22018:	cmp	fp, #0
   2201c:	str	r9, [sp, #8]
   22020:	str	r9, [sp, #12]
   22024:	beq	2204c <__assert_fail@plt+0x102d8>
   22028:	b	220f8 <__assert_fail@plt+0x10384>
   2202c:	cmp	r0, r3
   22030:	bgt	220ac <__assert_fail@plt+0x10338>
   22034:	add	r6, r6, r0
   22038:	add	r0, sp, #8
   2203c:	bl	11948 <mbsinit@plt>
   22040:	add	r5, r5, r4
   22044:	cmp	r0, #0
   22048:	bne	21fe8 <__assert_fail@plt+0x10274>
   2204c:	add	r3, sp, #8
   22050:	sub	r2, r7, r5
   22054:	mov	r1, r5
   22058:	add	r0, sp, #4
   2205c:	bl	21748 <__assert_fail@plt+0xf9d4>
   22060:	cmn	r0, #1
   22064:	mov	r4, r0
   22068:	beq	22134 <__assert_fail@plt+0x103c0>
   2206c:	cmn	r0, #2
   22070:	beq	22120 <__assert_fail@plt+0x103ac>
   22074:	ldr	r0, [sp, #4]
   22078:	bl	118d0 <wcwidth@plt>
   2207c:	cmp	r4, #0
   22080:	moveq	r4, #1
   22084:	sub	r3, r8, r6
   22088:	cmp	r0, #0
   2208c:	bge	2202c <__assert_fail@plt+0x102b8>
   22090:	ldr	r0, [sp, #4]
   22094:	bl	119cc <iswcntrl@plt>
   22098:	cmp	r0, #0
   2209c:	bne	22038 <__assert_fail@plt+0x102c4>
   220a0:	cmn	r6, #-2147483647	; 0x80000001
   220a4:	add	r6, r6, #1
   220a8:	bne	22038 <__assert_fail@plt+0x102c4>
   220ac:	mvn	r6, #-2147483648	; 0x80000000
   220b0:	mov	r0, r6
   220b4:	add	sp, sp, #20
   220b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   220bc:	ldr	r0, [sp, #4]
   220c0:	bl	118d0 <wcwidth@plt>
   220c4:	cmp	r4, #0
   220c8:	moveq	r4, #1
   220cc:	sub	r2, r8, r6
   220d0:	add	r5, r5, r4
   220d4:	subs	r3, r0, #0
   220d8:	add	r6, r6, r3
   220dc:	add	r0, sp, #8
   220e0:	blt	2213c <__assert_fail@plt+0x103c8>
   220e4:	cmp	r3, r2
   220e8:	bgt	220ac <__assert_fail@plt+0x10338>
   220ec:	bl	11948 <mbsinit@plt>
   220f0:	cmp	r0, #0
   220f4:	bne	21fe8 <__assert_fail@plt+0x10274>
   220f8:	add	r3, sp, #8
   220fc:	sub	r2, r7, r5
   22100:	mov	r1, r5
   22104:	add	r0, sp, #4
   22108:	bl	21748 <__assert_fail@plt+0xf9d4>
   2210c:	cmn	r0, #1
   22110:	mov	r4, r0
   22114:	beq	22134 <__assert_fail@plt+0x103c0>
   22118:	cmn	r0, #2
   2211c:	bne	220bc <__assert_fail@plt+0x10348>
   22120:	cmp	sl, #0
   22124:	bne	2213c <__assert_fail@plt+0x103c8>
   22128:	add	r6, r6, #1
   2212c:	mov	r5, r7
   22130:	b	21fe8 <__assert_fail@plt+0x10274>
   22134:	cmp	sl, #0
   22138:	beq	21fe0 <__assert_fail@plt+0x1026c>
   2213c:	mvn	r6, #0
   22140:	mov	r0, r6
   22144:	add	sp, sp, #20
   22148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2214c:	cmp	r5, r7
   22150:	movcs	r6, #0
   22154:	bcs	220b0 <__assert_fail@plt+0x1033c>
   22158:	bl	11b58 <__ctype_b_loc@plt>
   2215c:	ands	r6, sl, #2
   22160:	ldr	r2, [r0]
   22164:	bne	221a4 <__assert_fail@plt+0x10430>
   22168:	ldrb	r3, [r5], #1
   2216c:	lsl	r3, r3, #1
   22170:	ldrh	r3, [r2, r3]
   22174:	tst	r3, #16384	; 0x4000
   22178:	bne	22184 <__assert_fail@plt+0x10410>
   2217c:	tst	r3, #2
   22180:	bne	22190 <__assert_fail@plt+0x1041c>
   22184:	cmn	r6, #-2147483647	; 0x80000001
   22188:	beq	220b0 <__assert_fail@plt+0x1033c>
   2218c:	add	r6, r6, #1
   22190:	cmp	r7, r5
   22194:	bne	22168 <__assert_fail@plt+0x103f4>
   22198:	mov	r0, r6
   2219c:	add	sp, sp, #20
   221a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   221a4:	mov	r6, #0
   221a8:	b	221c0 <__assert_fail@plt+0x1044c>
   221ac:	cmn	r6, #-2147483647	; 0x80000001
   221b0:	beq	220b0 <__assert_fail@plt+0x1033c>
   221b4:	cmp	r7, r5
   221b8:	add	r6, r6, #1
   221bc:	beq	220b0 <__assert_fail@plt+0x1033c>
   221c0:	ldrb	r3, [r5], #1
   221c4:	lsl	r3, r3, #1
   221c8:	ldrh	r3, [r2, r3]
   221cc:	tst	r3, #16384	; 0x4000
   221d0:	beq	2213c <__assert_fail@plt+0x103c8>
   221d4:	b	221ac <__assert_fail@plt+0x10438>
   221d8:	push	{r4, r5, r6, lr}
   221dc:	mov	r5, r1
   221e0:	mov	r4, r0
   221e4:	bl	11b94 <strlen@plt>
   221e8:	mov	r2, r5
   221ec:	mov	r1, r0
   221f0:	mov	r0, r4
   221f4:	pop	{r4, r5, r6, lr}
   221f8:	b	21f8c <__assert_fail@plt+0x10218>
   221fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22200:	sub	sp, sp, #20
   22204:	lsr	r7, r1, #1
   22208:	str	r1, [sp, #12]
   2220c:	sub	r1, r1, r7
   22210:	cmp	r1, #2
   22214:	mov	r4, r0
   22218:	add	r6, r0, r7, lsl #2
   2221c:	str	r2, [sp, #4]
   22220:	mov	r5, r3
   22224:	bhi	22390 <__assert_fail@plt+0x1061c>
   22228:	beq	223e0 <__assert_fail@plt+0x1066c>
   2222c:	cmp	r7, #1
   22230:	bls	22380 <__assert_fail@plt+0x1060c>
   22234:	ldr	r2, [sp, #12]
   22238:	bic	r6, r2, #3
   2223c:	lsr	r3, r2, #2
   22240:	sub	r1, r7, r3
   22244:	cmp	r1, #2
   22248:	str	r3, [sp, #8]
   2224c:	add	r9, r4, r6
   22250:	bhi	223a4 <__assert_fail@plt+0x10630>
   22254:	beq	2242c <__assert_fail@plt+0x106b8>
   22258:	ldr	r3, [sp, #8]
   2225c:	cmp	r3, #2
   22260:	bhi	223c0 <__assert_fail@plt+0x1064c>
   22264:	beq	22404 <__assert_fail@plt+0x10690>
   22268:	ldr	r9, [r4]
   2226c:	mov	fp, r3
   22270:	ldr	r3, [sp, #4]
   22274:	ldr	r8, [r4, r6]
   22278:	mov	sl, #0
   2227c:	add	r6, r3, #4
   22280:	b	2229c <__assert_fail@plt+0x10528>
   22284:	add	fp, fp, #1
   22288:	cmp	r7, fp
   2228c:	str	r8, [r6, #-4]
   22290:	beq	222d0 <__assert_fail@plt+0x1055c>
   22294:	ldr	r8, [r4, fp, lsl #2]
   22298:	add	r6, r6, #4
   2229c:	mov	r1, r8
   222a0:	mov	r0, r9
   222a4:	blx	r5
   222a8:	cmp	r0, #0
   222ac:	bgt	22284 <__assert_fail@plt+0x10510>
   222b0:	ldr	r3, [sp, #8]
   222b4:	add	sl, sl, #1
   222b8:	cmp	r3, sl
   222bc:	str	r9, [r6, #-4]
   222c0:	ldrne	r9, [r4, sl, lsl #2]
   222c4:	bne	22298 <__assert_fail@plt+0x10524>
   222c8:	mov	sl, fp
   222cc:	str	r7, [sp, #8]
   222d0:	ldr	r3, [sp, #8]
   222d4:	add	r1, r4, sl, lsl #2
   222d8:	sub	r2, r3, sl
   222dc:	mov	r0, r6
   222e0:	lsl	r2, r2, #2
   222e4:	bl	11930 <memcpy@plt>
   222e8:	ldr	r3, [sp, #4]
   222ec:	ldr	r9, [r3]
   222f0:	ldr	r8, [r4, r7, lsl #2]
   222f4:	mov	r6, #0
   222f8:	mov	fp, r8
   222fc:	mov	sl, r6
   22300:	str	r7, [sp, #8]
   22304:	ldr	r8, [sp, #12]
   22308:	b	22324 <__assert_fail@plt+0x105b0>
   2230c:	add	r7, r7, #1
   22310:	cmp	r8, r7
   22314:	str	fp, [r4, r6, lsl #2]
   22318:	beq	2235c <__assert_fail@plt+0x105e8>
   2231c:	ldr	fp, [r4, r7, lsl #2]
   22320:	mov	r6, ip
   22324:	mov	r1, fp
   22328:	mov	r0, r9
   2232c:	blx	r5
   22330:	add	ip, r6, #1
   22334:	cmp	r0, #0
   22338:	bgt	2230c <__assert_fail@plt+0x10598>
   2233c:	ldr	r3, [sp, #8]
   22340:	add	sl, sl, #1
   22344:	cmp	r3, sl
   22348:	str	r9, [r4, r6, lsl #2]
   2234c:	beq	2239c <__assert_fail@plt+0x10628>
   22350:	ldr	r3, [sp, #4]
   22354:	ldr	r9, [r3, sl, lsl #2]
   22358:	b	22320 <__assert_fail@plt+0x105ac>
   2235c:	ldr	r7, [sp, #8]
   22360:	ldr	r3, [sp, #4]
   22364:	sub	r2, r7, sl
   22368:	add	r1, r3, sl, lsl #2
   2236c:	lsl	r2, r2, #2
   22370:	add	r0, r4, ip, lsl #2
   22374:	add	sp, sp, #20
   22378:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2237c:	b	11930 <memcpy@plt>
   22380:	ldr	r3, [sp, #4]
   22384:	ldr	r9, [r4]
   22388:	str	r9, [r3]
   2238c:	b	222f0 <__assert_fail@plt+0x1057c>
   22390:	mov	r0, r6
   22394:	bl	221fc <__assert_fail@plt+0x10488>
   22398:	b	2222c <__assert_fail@plt+0x104b8>
   2239c:	add	sp, sp, #20
   223a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   223a4:	mov	r3, r5
   223a8:	mov	r0, r9
   223ac:	ldr	r2, [sp, #4]
   223b0:	bl	221fc <__assert_fail@plt+0x10488>
   223b4:	ldr	r3, [sp, #8]
   223b8:	cmp	r3, #2
   223bc:	bls	22264 <__assert_fail@plt+0x104f0>
   223c0:	mov	r1, r3
   223c4:	ldr	r2, [sp, #4]
   223c8:	mov	r3, r5
   223cc:	mov	r0, r4
   223d0:	bl	221fc <__assert_fail@plt+0x10488>
   223d4:	ldr	r9, [r4]
   223d8:	ldr	fp, [sp, #8]
   223dc:	b	22270 <__assert_fail@plt+0x104fc>
   223e0:	ldr	r9, [r0, r7, lsl #2]
   223e4:	ldr	sl, [r6, #4]
   223e8:	mov	r0, r9
   223ec:	mov	r1, sl
   223f0:	blx	r3
   223f4:	cmp	r0, #0
   223f8:	strgt	sl, [r4, r7, lsl #2]
   223fc:	strgt	r9, [r6, #4]
   22400:	b	2222c <__assert_fail@plt+0x104b8>
   22404:	ldr	sl, [r4]
   22408:	ldr	r9, [r4, #4]
   2240c:	mov	r0, sl
   22410:	mov	r1, r9
   22414:	blx	r5
   22418:	cmp	r0, #0
   2241c:	ble	223d4 <__assert_fail@plt+0x10660>
   22420:	stm	r4, {r9, sl}
   22424:	ldr	fp, [sp, #8]
   22428:	b	22270 <__assert_fail@plt+0x104fc>
   2242c:	ldr	sl, [r4, r6]
   22430:	ldr	r8, [r9, #4]
   22434:	mov	r0, sl
   22438:	mov	r1, r8
   2243c:	blx	r5
   22440:	cmp	r0, #0
   22444:	strgt	r8, [r4, r6]
   22448:	strgt	sl, [r9, #4]
   2244c:	b	22258 <__assert_fail@plt+0x104e4>
   22450:	cmp	r1, #2
   22454:	push	{r4, r5, r6, lr}
   22458:	mov	r4, r0
   2245c:	bhi	22484 <__assert_fail@plt+0x10710>
   22460:	popne	{r4, r5, r6, pc}
   22464:	ldm	r0, {r5, r6}
   22468:	mov	r0, r5
   2246c:	mov	r1, r6
   22470:	blx	r2
   22474:	cmp	r0, #0
   22478:	strgt	r6, [r4]
   2247c:	strgt	r5, [r4, #4]
   22480:	pop	{r4, r5, r6, pc}
   22484:	mov	r3, r2
   22488:	pop	{r4, r5, r6, lr}
   2248c:	add	r2, r0, r1, lsl #2
   22490:	b	221fc <__assert_fail@plt+0x10488>
   22494:	push	{r4, r5, r6, lr}
   22498:	subs	r4, r2, #0
   2249c:	mov	r6, r0
   224a0:	beq	224cc <__assert_fail@plt+0x10758>
   224a4:	mov	r5, r1
   224a8:	bl	11b28 <__ctype_toupper_loc@plt>
   224ac:	add	r3, r5, r4
   224b0:	add	r2, r6, r4
   224b4:	ldrb	lr, [r3, #-1]!
   224b8:	ldr	ip, [r0]
   224bc:	cmp	r5, r3
   224c0:	ldr	ip, [ip, lr, lsl #2]
   224c4:	strb	ip, [r2, #-1]!
   224c8:	bne	224b4 <__assert_fail@plt+0x10740>
   224cc:	mov	r0, r6
   224d0:	pop	{r4, r5, r6, pc}
   224d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   224d8:	sub	sp, sp, #1120	; 0x460
   224dc:	sub	sp, sp, #4
   224e0:	mov	r4, r3
   224e4:	str	r3, [sp, #40]	; 0x28
   224e8:	str	r1, [sp, #36]	; 0x24
   224ec:	mov	sl, r2
   224f0:	mov	r6, r0
   224f4:	bl	11bb8 <__errno_location@plt>
   224f8:	ldr	r3, [r4, #40]	; 0x28
   224fc:	ldr	r2, [r4, #8]
   22500:	mov	r1, r3
   22504:	ldr	r3, [pc, #4040]	; 234d4 <__assert_fail@plt+0x11760>
   22508:	mov	ip, r2
   2250c:	str	r2, [sp, #56]	; 0x38
   22510:	subs	r2, r1, #0
   22514:	moveq	r2, r3
   22518:	cmp	ip, #12
   2251c:	str	r2, [sp, #60]	; 0x3c
   22520:	ldr	r5, [sp, #1168]	; 0x490
   22524:	ldr	r3, [r0]
   22528:	str	r0, [sp, #48]	; 0x30
   2252c:	str	r3, [sp, #68]	; 0x44
   22530:	ldrb	r3, [sp, #1160]	; 0x488
   22534:	str	r3, [sp, #64]	; 0x40
   22538:	subgt	r3, ip, #12
   2253c:	strgt	r3, [sp, #56]	; 0x38
   22540:	bgt	22550 <__assert_fail@plt+0x107dc>
   22544:	subs	r3, ip, #0
   22548:	moveq	r3, #12
   2254c:	str	r3, [sp, #56]	; 0x38
   22550:	ldrb	r3, [sl]
   22554:	cmp	r3, #0
   22558:	beq	23dc4 <__assert_fail@plt+0x12050>
   2255c:	ldr	fp, [pc, #3956]	; 234d8 <__assert_fail@plt+0x11764>
   22560:	mov	r2, #0
   22564:	str	r2, [sp, #28]
   22568:	str	sl, [sp, #32]
   2256c:	cmp	r3, #37	; 0x25
   22570:	beq	22660 <__assert_fail@plt+0x108ec>
   22574:	bic	r5, r5, r5, asr #31
   22578:	ldr	r2, [sp, #36]	; 0x24
   2257c:	ldr	r1, [sp, #28]
   22580:	cmp	r5, #1
   22584:	movcs	r4, r5
   22588:	movcc	r4, #1
   2258c:	sub	r2, r2, r1
   22590:	cmp	r4, r2
   22594:	bcs	2263c <__assert_fail@plt+0x108c8>
   22598:	cmp	r6, #0
   2259c:	beq	225cc <__assert_fail@plt+0x10858>
   225a0:	cmp	r5, #1
   225a4:	ble	225c8 <__assert_fail@plt+0x10854>
   225a8:	sub	r5, r5, #1
   225ac:	mov	r0, r6
   225b0:	mov	r2, r5
   225b4:	mov	r1, #32
   225b8:	bl	11be8 <memset@plt>
   225bc:	ldr	r3, [sp, #32]
   225c0:	add	r6, r6, r5
   225c4:	ldrb	r3, [r3]
   225c8:	strb	r3, [r6], #1
   225cc:	ldr	r3, [sp, #28]
   225d0:	add	r3, r3, r4
   225d4:	ldr	r4, [sp, #32]
   225d8:	str	r3, [sp, #28]
   225dc:	ldrb	r3, [r4, #1]
   225e0:	add	r2, r4, #1
   225e4:	str	r2, [sp, #32]
   225e8:	cmp	r3, #0
   225ec:	mvn	r5, #0
   225f0:	bne	2256c <__assert_fail@plt+0x107f8>
   225f4:	ldr	r3, [sp, #36]	; 0x24
   225f8:	ldr	r2, [sp, #68]	; 0x44
   225fc:	cmp	r6, #0
   22600:	cmpne	r3, #0
   22604:	movne	r3, #0
   22608:	strbne	r3, [r6]
   2260c:	ldr	r3, [sp, #48]	; 0x30
   22610:	ldr	r0, [sp, #28]
   22614:	str	r2, [r3]
   22618:	b	22654 <__assert_fail@plt+0x108e0>
   2261c:	ldr	r3, [sp, #28]
   22620:	ldr	r2, [sp, #36]	; 0x24
   22624:	add	r3, r3, r8
   22628:	str	r3, [sp, #28]
   2262c:	sub	r3, r2, r3
   22630:	cmp	r3, #1
   22634:	sub	r5, r5, r8
   22638:	bhi	22f18 <__assert_fail@plt+0x111a4>
   2263c:	ldr	r2, [sp, #48]	; 0x30
   22640:	mov	r3, #34	; 0x22
   22644:	str	r3, [r2]
   22648:	mov	r3, #0
   2264c:	mov	r0, r3
   22650:	str	r3, [sp, #28]
   22654:	add	sp, sp, #1120	; 0x460
   22658:	add	sp, sp, #4
   2265c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22660:	mov	r7, #0
   22664:	ldr	r4, [sp, #32]
   22668:	ldr	r3, [sp, #64]	; 0x40
   2266c:	mov	sl, r7
   22670:	str	r3, [sp, #44]	; 0x2c
   22674:	ldrb	r1, [r4, #1]!
   22678:	sub	r3, r1, #35	; 0x23
   2267c:	mov	r9, r1
   22680:	cmp	r3, #60	; 0x3c
   22684:	ldrls	pc, [pc, r3, lsl #2]
   22688:	b	2279c <__assert_fail@plt+0x10a28>
   2268c:	muleq	r2, r4, r7
   22690:	muleq	r2, ip, r7
   22694:	muleq	r2, ip, r7
   22698:	muleq	r2, ip, r7
   2269c:	muleq	r2, ip, r7
   226a0:	muleq	r2, ip, r7
   226a4:	muleq	r2, ip, r7
   226a8:	muleq	r2, ip, r7
   226ac:	andeq	r2, r2, ip, lsl #15
   226b0:	muleq	r2, ip, r7
   226b4:	andeq	r2, r2, ip, lsl #15
   226b8:	muleq	r2, ip, r7
   226bc:	muleq	r2, ip, r7
   226c0:	andeq	r2, r2, ip, lsl #15
   226c4:	muleq	r2, ip, r7
   226c8:	muleq	r2, ip, r7
   226cc:	muleq	r2, ip, r7
   226d0:	muleq	r2, ip, r7
   226d4:	muleq	r2, ip, r7
   226d8:	muleq	r2, ip, r7
   226dc:	muleq	r2, ip, r7
   226e0:	muleq	r2, ip, r7
   226e4:	muleq	r2, ip, r7
   226e8:	muleq	r2, ip, r7
   226ec:	muleq	r2, ip, r7
   226f0:	muleq	r2, ip, r7
   226f4:	muleq	r2, ip, r7
   226f8:	muleq	r2, ip, r7
   226fc:	muleq	r2, ip, r7
   22700:	muleq	r2, ip, r7
   22704:	muleq	r2, ip, r7
   22708:	muleq	r2, ip, r7
   2270c:	muleq	r2, ip, r7
   22710:	muleq	r2, ip, r7
   22714:	muleq	r2, ip, r7
   22718:	muleq	r2, ip, r7
   2271c:	muleq	r2, ip, r7
   22720:	muleq	r2, ip, r7
   22724:	muleq	r2, ip, r7
   22728:	muleq	r2, ip, r7
   2272c:	muleq	r2, ip, r7
   22730:	muleq	r2, ip, r7
   22734:	muleq	r2, ip, r7
   22738:	muleq	r2, ip, r7
   2273c:	muleq	r2, ip, r7
   22740:	muleq	r2, ip, r7
   22744:	muleq	r2, ip, r7
   22748:	muleq	r2, ip, r7
   2274c:	muleq	r2, ip, r7
   22750:	muleq	r2, ip, r7
   22754:	muleq	r2, ip, r7
   22758:	muleq	r2, ip, r7
   2275c:	muleq	r2, ip, r7
   22760:	muleq	r2, ip, r7
   22764:	muleq	r2, ip, r7
   22768:	muleq	r2, ip, r7
   2276c:	muleq	r2, ip, r7
   22770:	muleq	r2, ip, r7
   22774:	muleq	r2, ip, r7
   22778:	andeq	r2, r2, r0, lsl #15
   2277c:	andeq	r2, r2, ip, lsl #15
   22780:	mov	r3, #1
   22784:	str	r3, [sp, #44]	; 0x2c
   22788:	b	22674 <__assert_fail@plt+0x10900>
   2278c:	mov	sl, r1
   22790:	b	22674 <__assert_fail@plt+0x10900>
   22794:	mov	r7, #1
   22798:	b	22674 <__assert_fail@plt+0x10900>
   2279c:	sub	r3, r1, #48	; 0x30
   227a0:	cmp	r3, #9
   227a4:	bhi	227e8 <__assert_fail@plt+0x10a74>
   227a8:	ldr	r9, [pc, #3372]	; 234dc <__assert_fail@plt+0x11768>
   227ac:	mov	r5, #0
   227b0:	mvn	r8, #-2147483648	; 0x80000000
   227b4:	cmp	r5, #0
   227b8:	blt	22ad0 <__assert_fail@plt+0x10d5c>
   227bc:	cmp	r5, r9
   227c0:	ble	22aec <__assert_fail@plt+0x10d78>
   227c4:	mov	r3, r4
   227c8:	ldrb	r1, [r3, #1]
   227cc:	add	r4, r3, #1
   227d0:	mov	r3, r4
   227d4:	sub	r2, r1, #48	; 0x30
   227d8:	cmp	r2, #9
   227dc:	bls	227c8 <__assert_fail@plt+0x10a54>
   227e0:	mov	r9, r1
   227e4:	mvn	r5, #-2147483648	; 0x80000000
   227e8:	cmp	r1, #69	; 0x45
   227ec:	beq	229f4 <__assert_fail@plt+0x10c80>
   227f0:	cmp	r1, #79	; 0x4f
   227f4:	movne	r9, #0
   227f8:	beq	229f4 <__assert_fail@plt+0x10c80>
   227fc:	cmp	r1, #122	; 0x7a
   22800:	ldrls	pc, [pc, r1, lsl #2]
   22804:	b	22a04 <__assert_fail@plt+0x10c90>
   22808:	andeq	r2, r2, r0, lsl #20
   2280c:	andeq	r2, r2, r4, lsl #20
   22810:	andeq	r2, r2, r4, lsl #20
   22814:	andeq	r2, r2, r4, lsl #20
   22818:	andeq	r2, r2, r4, lsl #20
   2281c:	andeq	r2, r2, r4, lsl #20
   22820:	andeq	r2, r2, r4, lsl #20
   22824:	andeq	r2, r2, r4, lsl #20
   22828:	andeq	r2, r2, r4, lsl #20
   2282c:	andeq	r2, r2, r4, lsl #20
   22830:	andeq	r2, r2, r4, lsl #20
   22834:	andeq	r2, r2, r4, lsl #20
   22838:	andeq	r2, r2, r4, lsl #20
   2283c:	andeq	r2, r2, r4, lsl #20
   22840:	andeq	r2, r2, r4, lsl #20
   22844:	andeq	r2, r2, r4, lsl #20
   22848:	andeq	r2, r2, r4, lsl #20
   2284c:	andeq	r2, r2, r4, lsl #20
   22850:	andeq	r2, r2, r4, lsl #20
   22854:	andeq	r2, r2, r4, lsl #20
   22858:	andeq	r2, r2, r4, lsl #20
   2285c:	andeq	r2, r2, r4, lsl #20
   22860:	andeq	r2, r2, r4, lsl #20
   22864:	andeq	r2, r2, r4, lsl #20
   22868:	andeq	r2, r2, r4, lsl #20
   2286c:	andeq	r2, r2, r4, lsl #20
   22870:	andeq	r2, r2, r4, lsl #20
   22874:	andeq	r2, r2, r4, lsl #20
   22878:	andeq	r2, r2, r4, lsl #20
   2287c:	andeq	r2, r2, r4, lsl #20
   22880:	andeq	r2, r2, r4, lsl #20
   22884:	andeq	r2, r2, r4, lsl #20
   22888:	andeq	r2, r2, r4, lsl #20
   2288c:	andeq	r2, r2, r4, lsl #20
   22890:	andeq	r2, r2, r4, lsl #20
   22894:	andeq	r2, r2, r4, lsl #20
   22898:	andeq	r2, r2, r4, lsl #20
   2289c:	andeq	r3, r2, ip, lsr r5
   228a0:	andeq	r2, r2, r4, lsl #20
   228a4:	andeq	r2, r2, r4, lsl #20
   228a8:	andeq	r2, r2, r4, lsl #20
   228ac:	andeq	r2, r2, r4, lsl #20
   228b0:	andeq	r2, r2, r4, lsl #20
   228b4:	andeq	r2, r2, r4, lsl #20
   228b8:	andeq	r2, r2, r4, lsl #20
   228bc:	andeq	r2, r2, r4, lsl #20
   228c0:	andeq	r2, r2, r4, lsl #20
   228c4:	andeq	r2, r2, r4, lsl #20
   228c8:	andeq	r2, r2, r4, lsl #20
   228cc:	andeq	r2, r2, r4, lsl #20
   228d0:	andeq	r2, r2, r4, lsl #20
   228d4:	andeq	r2, r2, r4, lsl #20
   228d8:	andeq	r2, r2, r4, lsl #20
   228dc:	andeq	r2, r2, r4, lsl #20
   228e0:	andeq	r2, r2, r4, lsl #20
   228e4:	andeq	r2, r2, r4, lsl #20
   228e8:	andeq	r2, r2, r4, lsl #20
   228ec:	andeq	r2, r2, r4, lsl #20
   228f0:	andeq	r3, r2, ip, ror #13
   228f4:	andeq	r2, r2, r4, lsl #20
   228f8:	andeq	r2, r2, r4, lsl #20
   228fc:	andeq	r2, r2, r4, lsl #20
   22900:	andeq	r2, r2, r4, lsl #20
   22904:	andeq	r2, r2, r4, lsl #20
   22908:	andeq	r2, r2, r4, lsl #20
   2290c:	andeq	r2, r2, r4, lsr sp
   22910:	muleq	r2, r4, fp
   22914:	andeq	r2, r2, r4, ror sp
   22918:	andeq	r3, r2, r8, lsr #3
   2291c:	andeq	r2, r2, r4, lsl #20
   22920:	muleq	r2, r4, r0
   22924:			; <UNDEFINED> instruction: 0x000231bc
   22928:	ldrdeq	r3, [r2], -r4
   2292c:	andeq	r3, r2, r0, asr #13
   22930:	andeq	r2, r2, r4, lsl #20
   22934:	andeq	r2, r2, r4, lsl #20
   22938:	andeq	r2, r2, r4, lsl #20
   2293c:	andeq	r3, r2, r8, lsr #13
   22940:	muleq	r2, r0, r7
   22944:	andeq	r2, r2, r4, lsl #20
   22948:	andeq	r3, r2, r0, ror r7
   2294c:	andeq	r2, r2, r4, lsl #20
   22950:	andeq	r3, r2, r4, ror #14
   22954:	andeq	r3, r2, ip, asr #14
   22958:	andeq	r3, r2, r8, asr #9
   2295c:	muleq	r2, r0, r4
   22960:			; <UNDEFINED> instruction: 0x000231bc
   22964:	andeq	r3, r2, r0, lsl r7
   22968:	andeq	r2, r2, r8, lsr #26
   2296c:	andeq	r3, r2, r0, lsr #25
   22970:	andeq	r3, r2, ip, ror #23
   22974:	andeq	r2, r2, r4, lsl #20
   22978:	andeq	r2, r2, r4, lsl #20
   2297c:	andeq	r2, r2, r4, lsl #20
   22980:	andeq	r2, r2, r4, lsl #20
   22984:	andeq	r2, r2, r4, lsl #20
   22988:	andeq	r2, r2, r4, lsl #20
   2298c:	andeq	r2, r2, r4, lsr sp
   22990:	andeq	r3, r2, r8, lsr #8
   22994:	andeq	r2, r2, r8, lsr #26
   22998:	andeq	r3, r2, r8, lsr r3
   2299c:			; <UNDEFINED> instruction: 0x00023ab8
   229a0:	andeq	r2, r2, r4, lsl #20
   229a4:			; <UNDEFINED> instruction: 0x000231bc
   229a8:	andeq	r3, r2, r8, lsr #8
   229ac:	andeq	r2, r2, r4, lsl #20
   229b0:	andeq	r3, r2, ip, ror sl
   229b4:	muleq	r2, ip, fp
   229b8:	andeq	r3, r2, ip, lsl #23
   229bc:	andeq	r3, r2, r0, asr fp
   229c0:	ldrdeq	r3, [r2], -r8
   229c4:	andeq	r2, r2, r4, lsl #20
   229c8:	andeq	r3, r2, r4, ror #23
   229cc:			; <UNDEFINED> instruction: 0x00023bb0
   229d0:	andeq	r2, r2, r8, lsr #23
   229d4:	ldrdeq	r2, [r2], -r8
   229d8:	andeq	r3, r2, r4, lsr #12
   229dc:	strdeq	r3, [r2], -r0
   229e0:	andeq	r2, r2, r4, lsl #20
   229e4:	ldrdeq	r3, [r2], -r8
   229e8:	andeq	r2, r2, r8, lsr #26
   229ec:	andeq	r3, r2, ip, asr #8
   229f0:	andeq	r3, r2, r0, ror r3
   229f4:	ldrb	r1, [r4, #1]
   229f8:	add	r4, r4, #1
   229fc:	b	227fc <__assert_fail@plt+0x10a88>
   22a00:	sub	r4, r4, #1
   22a04:	ldr	r3, [sp, #32]
   22a08:	ldr	r2, [sp, #28]
   22a0c:	sub	r8, r4, r3
   22a10:	subs	r3, sl, #45	; 0x2d
   22a14:	movne	r3, #1
   22a18:	cmp	r5, #0
   22a1c:	movlt	r3, #0
   22a20:	cmp	r3, #0
   22a24:	add	r7, r8, #1
   22a28:	moveq	r5, #0
   22a2c:	ldr	r3, [sp, #36]	; 0x24
   22a30:	cmp	r7, r5
   22a34:	movcs	r9, r7
   22a38:	movcc	r9, r5
   22a3c:	sub	r3, r3, r2
   22a40:	cmp	r9, r3
   22a44:	bcs	2263c <__assert_fail@plt+0x108c8>
   22a48:	cmp	r6, #0
   22a4c:	beq	22ac0 <__assert_fail@plt+0x10d4c>
   22a50:	cmp	r7, r5
   22a54:	bcs	22a7c <__assert_fail@plt+0x10d08>
   22a58:	cmp	sl, #43	; 0x2b
   22a5c:	cmpne	sl, #48	; 0x30
   22a60:	sub	r5, r5, r7
   22a64:	mov	r0, r6
   22a68:	mov	r2, r5
   22a6c:	moveq	r1, #48	; 0x30
   22a70:	movne	r1, #32
   22a74:	bl	11be8 <memset@plt>
   22a78:	add	r6, r6, r5
   22a7c:	ldr	r3, [sp, #44]	; 0x2c
   22a80:	cmp	r3, #0
   22a84:	beq	22cdc <__assert_fail@plt+0x10f68>
   22a88:	cmp	r7, #0
   22a8c:	beq	22abc <__assert_fail@plt+0x10d48>
   22a90:	bl	11b28 <__ctype_toupper_loc@plt>
   22a94:	ldr	r3, [sp, #32]
   22a98:	add	r8, r6, r8
   22a9c:	sub	sl, r3, #1
   22aa0:	mov	r3, r4
   22aa4:	ldrb	r1, [r3], #-1
   22aa8:	ldr	r2, [r0]
   22aac:	cmp	r3, sl
   22ab0:	ldr	r2, [r2, r1, lsl #2]
   22ab4:	strb	r2, [r8], #-1
   22ab8:	bne	22aa4 <__assert_fail@plt+0x10d30>
   22abc:	add	r6, r6, r7
   22ac0:	ldr	r3, [sp, #28]
   22ac4:	add	r3, r3, r9
   22ac8:	str	r3, [sp, #28]
   22acc:	b	225dc <__assert_fail@plt+0x10868>
   22ad0:	cmn	r5, #1
   22ad4:	beq	22b68 <__assert_fail@plt+0x10df4>
   22ad8:	mov	r1, r5
   22adc:	mov	r0, #-2147483648	; 0x80000000
   22ae0:	bl	2b778 <_obstack_memory_used@@Base+0x71cc>
   22ae4:	cmp	r0, #9
   22ae8:	ble	227c4 <__assert_fail@plt+0x10a50>
   22aec:	ldrb	r0, [r4]
   22af0:	add	r5, r5, r5, lsl #2
   22af4:	cmp	r0, #47	; 0x2f
   22af8:	lsl	r3, r5, #1
   22afc:	mov	r1, r3
   22b00:	ble	22b80 <__assert_fail@plt+0x10e0c>
   22b04:	cmp	r3, #0
   22b08:	blt	22b44 <__assert_fail@plt+0x10dd0>
   22b0c:	sub	r2, r0, #48	; 0x30
   22b10:	sub	r2, r8, r2
   22b14:	cmp	r3, r2
   22b18:	movle	r2, #0
   22b1c:	movgt	r2, #1
   22b20:	cmp	r2, #0
   22b24:	beq	22b44 <__assert_fail@plt+0x10dd0>
   22b28:	ldrb	r1, [r4, #1]
   22b2c:	add	r3, r4, #1
   22b30:	sub	r2, r1, #48	; 0x30
   22b34:	cmp	r2, #9
   22b38:	bls	227c8 <__assert_fail@plt+0x10a54>
   22b3c:	mov	r4, r3
   22b40:	b	227e0 <__assert_fail@plt+0x10a6c>
   22b44:	ldrb	r1, [r4, #1]
   22b48:	add	r3, r0, r3
   22b4c:	sub	r5, r3, #48	; 0x30
   22b50:	sub	r3, r1, #48	; 0x30
   22b54:	cmp	r3, #9
   22b58:	add	r4, r4, #1
   22b5c:	bls	227b4 <__assert_fail@plt+0x10a40>
   22b60:	mov	r9, r1
   22b64:	b	227e8 <__assert_fail@plt+0x10a74>
   22b68:	ldrb	r0, [r4]
   22b6c:	cmp	r0, #47	; 0x2f
   22b70:	mvngt	r3, #9
   22b74:	bgt	22b44 <__assert_fail@plt+0x10dd0>
   22b78:	mvn	r1, #9
   22b7c:	mov	r3, r1
   22b80:	rsb	r2, r0, #-2147483600	; 0x80000030
   22b84:	cmp	r2, r1
   22b88:	movle	r2, #0
   22b8c:	movgt	r2, #1
   22b90:	b	22b20 <__assert_fail@plt+0x10dac>
   22b94:	cmp	r9, #69	; 0x45
   22b98:	beq	22a04 <__assert_fail@plt+0x10c90>
   22b9c:	cmp	r7, #0
   22ba0:	beq	22bac <__assert_fail@plt+0x10e38>
   22ba4:	str	r7, [sp, #44]	; 0x2c
   22ba8:	mov	r7, #0
   22bac:	cmp	r9, #0
   22bb0:	mov	r3, #37	; 0x25
   22bb4:	mov	r2, #32
   22bb8:	strb	r3, [sp, #81]	; 0x51
   22bbc:	addeq	r3, sp, #80	; 0x50
   22bc0:	strb	r2, [sp, #80]	; 0x50
   22bc4:	streq	r3, [sp, #32]
   22bc8:	addeq	ip, sp, #82	; 0x52
   22bcc:	moveq	r2, r3
   22bd0:	bne	22cc4 <__assert_fail@plt+0x10f50>
   22bd4:	mov	lr, #0
   22bd8:	strb	r1, [ip]
   22bdc:	add	r0, sp, #96	; 0x60
   22be0:	ldr	r3, [sp, #40]	; 0x28
   22be4:	strb	lr, [ip, #1]
   22be8:	mov	r1, #1024	; 0x400
   22bec:	bl	11b04 <strftime@plt>
   22bf0:	subs	r9, r0, #0
   22bf4:	beq	225dc <__assert_fail@plt+0x10868>
   22bf8:	mvn	r3, r5
   22bfc:	cmp	sl, #45	; 0x2d
   22c00:	lsr	r3, r3, #31
   22c04:	moveq	r3, #0
   22c08:	cmp	r3, #0
   22c0c:	moveq	r5, #0
   22c10:	sub	r8, r9, #1
   22c14:	cmp	r8, r5
   22c18:	movcs	r3, r8
   22c1c:	movcc	r3, r5
   22c20:	mov	r2, r3
   22c24:	str	r3, [sp, #32]
   22c28:	ldr	r1, [sp, #28]
   22c2c:	ldr	r3, [sp, #36]	; 0x24
   22c30:	sub	r3, r3, r1
   22c34:	cmp	r2, r3
   22c38:	bcs	2263c <__assert_fail@plt+0x108c8>
   22c3c:	cmp	r6, #0
   22c40:	beq	22ca0 <__assert_fail@plt+0x10f2c>
   22c44:	cmp	r8, r5
   22c48:	bcs	22c70 <__assert_fail@plt+0x10efc>
   22c4c:	cmp	sl, #43	; 0x2b
   22c50:	cmpne	sl, #48	; 0x30
   22c54:	sub	r5, r5, r8
   22c58:	mov	r0, r6
   22c5c:	mov	r2, r5
   22c60:	moveq	r1, #48	; 0x30
   22c64:	movne	r1, #32
   22c68:	bl	11be8 <memset@plt>
   22c6c:	add	r6, r6, r5
   22c70:	cmp	r7, #0
   22c74:	bne	23d24 <__assert_fail@plt+0x11fb0>
   22c78:	ldr	r3, [sp, #44]	; 0x2c
   22c7c:	cmp	r3, #0
   22c80:	bne	22cf0 <__assert_fail@plt+0x10f7c>
   22c84:	mov	r2, r8
   22c88:	add	r1, sp, #97	; 0x61
   22c8c:	mov	r0, r6
   22c90:	bl	11930 <memcpy@plt>
   22c94:	add	r8, r6, r8
   22c98:	ldr	r2, [sp, #32]
   22c9c:	mov	r6, r8
   22ca0:	ldr	r3, [sp, #28]
   22ca4:	add	r3, r3, r2
   22ca8:	str	r3, [sp, #28]
   22cac:	b	225dc <__assert_fail@plt+0x10868>
   22cb0:	mov	r7, #0
   22cb4:	mov	r2, #32
   22cb8:	mov	r3, #37	; 0x25
   22cbc:	strb	r2, [sp, #80]	; 0x50
   22cc0:	strb	r3, [sp, #81]	; 0x51
   22cc4:	add	r3, sp, #80	; 0x50
   22cc8:	str	r3, [sp, #32]
   22ccc:	strb	r9, [sp, #82]	; 0x52
   22cd0:	add	ip, sp, #83	; 0x53
   22cd4:	mov	r2, r3
   22cd8:	b	22bd4 <__assert_fail@plt+0x10e60>
   22cdc:	ldr	r1, [sp, #32]
   22ce0:	mov	r2, r7
   22ce4:	mov	r0, r6
   22ce8:	bl	11930 <memcpy@plt>
   22cec:	b	22abc <__assert_fail@plt+0x10d48>
   22cf0:	cmp	r8, #0
   22cf4:	beq	23f40 <__assert_fail@plt+0x121cc>
   22cf8:	bl	11b28 <__ctype_toupper_loc@plt>
   22cfc:	add	r8, r6, r8
   22d00:	add	r3, sp, #96	; 0x60
   22d04:	add	r9, r3, r9
   22d08:	mov	r3, r8
   22d0c:	ldrb	r1, [r9, #-1]!
   22d10:	ldr	r2, [r0]
   22d14:	ldr	r2, [r2, r1, lsl #2]
   22d18:	strb	r2, [r3, #-1]!
   22d1c:	cmp	r6, r3
   22d20:	bne	22d0c <__assert_fail@plt+0x10f98>
   22d24:	b	22c98 <__assert_fail@plt+0x10f24>
   22d28:	cmp	r9, #79	; 0x4f
   22d2c:	bne	22ba8 <__assert_fail@plt+0x10e34>
   22d30:	b	22a04 <__assert_fail@plt+0x10c90>
   22d34:	cmp	r9, #0
   22d38:	bne	22a04 <__assert_fail@plt+0x10c90>
   22d3c:	ldr	r3, [sp, #44]	; 0x2c
   22d40:	cmp	r7, #0
   22d44:	moveq	r7, r3
   22d48:	mov	r2, #32
   22d4c:	add	r0, sp, #80	; 0x50
   22d50:	mov	r3, #37	; 0x25
   22d54:	str	r7, [sp, #44]	; 0x2c
   22d58:	strb	r2, [sp, #80]	; 0x50
   22d5c:	str	r0, [sp, #32]
   22d60:	strb	r3, [sp, #81]	; 0x51
   22d64:	add	ip, sp, #82	; 0x52
   22d68:	mov	r7, #0
   22d6c:	mov	r2, r0
   22d70:	b	22bd4 <__assert_fail@plt+0x10e60>
   22d74:	cmp	r9, #69	; 0x45
   22d78:	beq	22cb0 <__assert_fail@plt+0x10f3c>
   22d7c:	ldr	r3, [sp, #40]	; 0x28
   22d80:	ldr	r0, [pc, #1880]	; 234e0 <__assert_fail@plt+0x1176c>
   22d84:	mvn	ip, #98	; 0x62
   22d88:	ldr	r2, [r3, #20]
   22d8c:	add	r3, r2, #1888	; 0x760
   22d90:	add	r3, r3, #12
   22d94:	cmp	r3, r0
   22d98:	ldr	r0, [pc, #1912]	; 23518 <__assert_fail@plt+0x117a4>
   22d9c:	movhi	r3, #0
   22da0:	movls	r3, #1
   22da4:	cmp	r2, r0
   22da8:	mla	r3, ip, r3, r2
   22dac:	movge	ip, #0
   22db0:	movlt	ip, #1
   22db4:	str	ip, [sp, #52]	; 0x34
   22db8:	ldr	ip, [pc, #1896]	; 23528 <__assert_fail@plt+0x117b4>
   22dbc:	cmp	sl, #0
   22dc0:	smull	lr, ip, ip, r3
   22dc4:	asr	r3, r3, #31
   22dc8:	rsb	r3, r3, ip, asr #5
   22dcc:	add	r3, r3, #19
   22dd0:	bne	23dec <__assert_fail@plt+0x12078>
   22dd4:	ldr	ip, [sp, #1164]	; 0x48c
   22dd8:	cmp	r2, r0
   22ddc:	movlt	r2, #0
   22de0:	movge	r2, #1
   22de4:	cmp	ip, #43	; 0x2b
   22de8:	beq	23e34 <__assert_fail@plt+0x120c0>
   22dec:	mov	sl, ip
   22df0:	mov	lr, #0
   22df4:	mov	ip, #2
   22df8:	mov	r0, #0
   22dfc:	cmp	r9, #79	; 0x4f
   22e00:	movne	r2, #0
   22e04:	andeq	r2, r2, #1
   22e08:	cmp	r2, #0
   22e0c:	uxtbne	r1, r1
   22e10:	bne	22cb0 <__assert_fail@plt+0x10f3c>
   22e14:	ldr	r2, [sp, #52]	; 0x34
   22e18:	cmp	r2, #0
   22e1c:	rsbne	r3, r3, #0
   22e20:	add	r2, sp, #80	; 0x50
   22e24:	add	r7, sp, #94	; 0x5e
   22e28:	str	r2, [sp, #32]
   22e2c:	ldr	r9, [pc, #1712]	; 234e4 <__assert_fail@plt+0x11770>
   22e30:	mov	r2, r7
   22e34:	mov	r7, r3
   22e38:	mov	r3, r2
   22e3c:	tst	r0, #1
   22e40:	movne	r2, #58	; 0x3a
   22e44:	mov	r8, r3
   22e48:	strbne	r2, [r3, #-1]
   22e4c:	subne	r8, r3, #1
   22e50:	umull	r3, r2, r9, r7
   22e54:	asrs	r0, r0, #1
   22e58:	lsr	r2, r2, #3
   22e5c:	movne	r1, #1
   22e60:	add	r3, r2, r2, lsl #2
   22e64:	moveq	r1, #0
   22e68:	sub	r3, r7, r3, lsl #1
   22e6c:	cmp	r2, #0
   22e70:	orrne	r1, r1, #1
   22e74:	add	r3, r3, #48	; 0x30
   22e78:	cmp	r1, #0
   22e7c:	strb	r3, [r8, #-1]
   22e80:	mov	r7, r2
   22e84:	sub	r3, r8, #1
   22e88:	bne	22e3c <__assert_fail@plt+0x110c8>
   22e8c:	mov	r7, r3
   22e90:	cmp	sl, #0
   22e94:	moveq	r9, #1
   22e98:	moveq	sl, #48	; 0x30
   22e9c:	beq	22ea8 <__assert_fail@plt+0x11134>
   22ea0:	subs	r9, sl, #45	; 0x2d
   22ea4:	movne	r9, #1
   22ea8:	ldr	r3, [sp, #52]	; 0x34
   22eac:	cmp	r5, #0
   22eb0:	movlt	r5, ip
   22eb4:	cmp	r3, #0
   22eb8:	bne	23d04 <__assert_fail@plt+0x11f90>
   22ebc:	cmp	lr, #0
   22ec0:	beq	23d5c <__assert_fail@plt+0x11fe8>
   22ec4:	mov	r3, #43	; 0x2b
   22ec8:	ldr	r2, [sp, #32]
   22ecc:	add	r8, r2, #14
   22ed0:	sub	r2, r8, r7
   22ed4:	sub	r8, r5, #1
   22ed8:	sub	r8, r8, r2
   22edc:	str	r2, [sp, #32]
   22ee0:	cmp	r8, #0
   22ee4:	movle	r2, #0
   22ee8:	andgt	r2, r9, #1
   22eec:	cmp	r2, #0
   22ef0:	moveq	r8, #0
   22ef4:	cmp	sl, #95	; 0x5f
   22ef8:	beq	23d8c <__assert_fail@plt+0x12018>
   22efc:	ldr	r2, [sp, #36]	; 0x24
   22f00:	ldr	r1, [sp, #28]
   22f04:	sub	r2, r2, r1
   22f08:	cmp	r2, #1
   22f0c:	bls	2263c <__assert_fail@plt+0x108c8>
   22f10:	cmp	r6, #0
   22f14:	strbne	r3, [r6], #1
   22f18:	ldr	r3, [sp, #28]
   22f1c:	sub	r5, r5, #1
   22f20:	cmp	r5, #0
   22f24:	movlt	r9, #0
   22f28:	andge	r9, r9, #1
   22f2c:	add	r3, r3, #1
   22f30:	cmp	r9, #0
   22f34:	str	r3, [sp, #28]
   22f38:	ldr	r8, [sp, #32]
   22f3c:	bne	22f44 <__assert_fail@plt+0x111d0>
   22f40:	mov	r5, r9
   22f44:	ldr	r3, [sp, #36]	; 0x24
   22f48:	ldr	r2, [sp, #28]
   22f4c:	cmp	r5, r8
   22f50:	movcs	r9, r5
   22f54:	movcc	r9, r8
   22f58:	sub	r3, r3, r2
   22f5c:	cmp	r9, r3
   22f60:	bcs	2263c <__assert_fail@plt+0x108c8>
   22f64:	cmp	r6, #0
   22f68:	beq	22ac0 <__assert_fail@plt+0x10d4c>
   22f6c:	cmp	r5, r8
   22f70:	bls	22f98 <__assert_fail@plt+0x11224>
   22f74:	cmp	sl, #43	; 0x2b
   22f78:	cmpne	sl, #48	; 0x30
   22f7c:	sub	r5, r5, r8
   22f80:	mov	r0, r6
   22f84:	mov	r2, r5
   22f88:	moveq	r1, #48	; 0x30
   22f8c:	movne	r1, #32
   22f90:	bl	11be8 <memset@plt>
   22f94:	add	r6, r6, r5
   22f98:	ldr	r3, [sp, #44]	; 0x2c
   22f9c:	cmp	r3, #0
   22fa0:	beq	23d0c <__assert_fail@plt+0x11f98>
   22fa4:	cmp	r8, #0
   22fa8:	beq	22ac0 <__assert_fail@plt+0x10d4c>
   22fac:	add	r6, r6, r8
   22fb0:	bl	11b28 <__ctype_toupper_loc@plt>
   22fb4:	add	r8, r7, r8
   22fb8:	mov	r3, r6
   22fbc:	ldrb	r1, [r8, #-1]!
   22fc0:	ldr	r2, [r0]
   22fc4:	cmp	r7, r8
   22fc8:	ldr	r2, [r2, r1, lsl #2]
   22fcc:	strb	r2, [r3, #-1]!
   22fd0:	bne	22fbc <__assert_fail@plt+0x11248>
   22fd4:	b	22ac0 <__assert_fail@plt+0x10d4c>
   22fd8:	ldr	lr, [sp, #40]	; 0x28
   22fdc:	add	ip, sp, #96	; 0x60
   22fe0:	mvn	r7, #0
   22fe4:	ldm	lr!, {r0, r1, r2, r3}
   22fe8:	stmia	ip!, {r0, r1, r2, r3}
   22fec:	ldm	lr!, {r0, r1, r2, r3}
   22ff0:	stmia	ip!, {r0, r1, r2, r3}
   22ff4:	ldm	lr, {r0, r1, r2}
   22ff8:	str	r7, [sp, #124]	; 0x7c
   22ffc:	stm	ip, {r0, r1, r2}
   23000:	add	r1, sp, #96	; 0x60
   23004:	ldr	r0, [sp, #1176]	; 0x498
   23008:	bl	28db8 <_obstack_memory_used@@Base+0x480c>
   2300c:	ldr	r3, [sp, #124]	; 0x7c
   23010:	cmp	r3, #0
   23014:	blt	23ec4 <__assert_fail@plt+0x12150>
   23018:	lsr	r3, r0, #31
   2301c:	str	r3, [sp, #52]	; 0x34
   23020:	cmp	r0, #0
   23024:	add	r3, sp, #80	; 0x50
   23028:	str	r3, [sp, #32]
   2302c:	add	r7, sp, #94	; 0x5e
   23030:	blt	23068 <__assert_fail@plt+0x112f4>
   23034:	smull	r3, r2, fp, r0
   23038:	asr	r3, r0, #31
   2303c:	rsb	r3, r3, r2, asr #2
   23040:	mov	r2, r3
   23044:	add	r3, r3, r3, lsl #2
   23048:	sub	r3, r0, r3, lsl #1
   2304c:	add	r3, r3, #48	; 0x30
   23050:	subs	r0, r2, #0
   23054:	strb	r3, [r7, #-1]!
   23058:	bne	23034 <__assert_fail@plt+0x112c0>
   2305c:	mov	lr, #0
   23060:	mov	ip, #1
   23064:	b	22e90 <__assert_fail@plt+0x1111c>
   23068:	smull	r3, r2, fp, r0
   2306c:	asr	r3, r0, #31
   23070:	rsb	r3, r3, r2, asr #2
   23074:	mov	r2, r3
   23078:	add	r3, r3, r3, lsl #2
   2307c:	sub	r3, r0, r3, lsl #1
   23080:	rsb	r3, r3, #48	; 0x30
   23084:	subs	r0, r2, #0
   23088:	strb	r3, [r7, #-1]!
   2308c:	bne	23068 <__assert_fail@plt+0x112f4>
   23090:	b	2305c <__assert_fail@plt+0x112e8>
   23094:	cmp	r9, #0
   23098:	bne	22a04 <__assert_fail@plt+0x10c90>
   2309c:	clz	r3, sl
   230a0:	lsr	r3, r3, #5
   230a4:	ands	r3, r3, r5, lsr #31
   230a8:	bne	23e6c <__assert_fail@plt+0x120f8>
   230ac:	sub	r7, r5, #6
   230b0:	ldr	r9, [pc, #1124]	; 2351c <__assert_fail@plt+0x117a8>
   230b4:	bic	r7, r7, r7, asr #31
   230b8:	ldr	r3, [sp, #1180]	; 0x49c
   230bc:	str	r7, [sp, #8]
   230c0:	str	r3, [sp, #20]
   230c4:	ldr	r3, [sp, #1176]	; 0x498
   230c8:	str	sl, [sp, #4]
   230cc:	str	r3, [sp, #16]
   230d0:	ldr	r3, [sp, #1172]	; 0x494
   230d4:	mov	r2, r9
   230d8:	str	r3, [sp, #12]
   230dc:	ldr	r3, [sp, #44]	; 0x2c
   230e0:	mvn	r1, #0
   230e4:	str	r3, [sp]
   230e8:	mov	r0, #0
   230ec:	ldr	r3, [sp, #40]	; 0x28
   230f0:	bl	224d4 <__assert_fail@plt+0x10760>
   230f4:	cmp	sl, #45	; 0x2d
   230f8:	moveq	r3, #0
   230fc:	bicne	r3, r5, r5, asr #31
   23100:	mov	r8, r0
   23104:	ldr	r1, [sp, #36]	; 0x24
   23108:	ldr	r0, [sp, #28]
   2310c:	cmp	r3, r8
   23110:	movcs	r2, r3
   23114:	movcc	r2, r8
   23118:	sub	r1, r1, r0
   2311c:	cmp	r2, r1
   23120:	str	r2, [sp, #32]
   23124:	str	r1, [sp, #52]	; 0x34
   23128:	bcs	2263c <__assert_fail@plt+0x108c8>
   2312c:	cmp	r6, #0
   23130:	beq	22ca0 <__assert_fail@plt+0x10f2c>
   23134:	cmp	r3, r8
   23138:	bls	23164 <__assert_fail@plt+0x113f0>
   2313c:	cmp	sl, #43	; 0x2b
   23140:	cmpne	sl, #48	; 0x30
   23144:	sub	r5, r3, r8
   23148:	moveq	r1, #48	; 0x30
   2314c:	movne	r1, #32
   23150:	mov	r0, r6
   23154:	mov	r2, r5
   23158:	bl	11be8 <memset@plt>
   2315c:	ldr	r1, [sp, #52]	; 0x34
   23160:	add	r6, r6, r5
   23164:	ldr	r3, [sp, #1180]	; 0x49c
   23168:	mov	r2, r9
   2316c:	str	r3, [sp, #20]
   23170:	ldr	r3, [sp, #1176]	; 0x498
   23174:	mov	r0, r6
   23178:	str	r3, [sp, #16]
   2317c:	ldr	r3, [sp, #1172]	; 0x494
   23180:	str	r7, [sp, #8]
   23184:	str	r3, [sp, #12]
   23188:	ldr	r3, [sp, #44]	; 0x2c
   2318c:	str	sl, [sp, #4]
   23190:	str	r3, [sp]
   23194:	ldr	r3, [sp, #40]	; 0x28
   23198:	bl	224d4 <__assert_fail@plt+0x10760>
   2319c:	add	r6, r6, r8
   231a0:	ldr	r2, [sp, #32]
   231a4:	b	22ca0 <__assert_fail@plt+0x10f2c>
   231a8:	cmp	r9, #0
   231ac:	bne	22a04 <__assert_fail@plt+0x10c90>
   231b0:	mvn	r7, #0
   231b4:	ldr	r9, [pc, #812]	; 234e8 <__assert_fail@plt+0x11774>
   231b8:	b	230b8 <__assert_fail@plt+0x11344>
   231bc:	cmp	r9, #69	; 0x45
   231c0:	beq	22a04 <__assert_fail@plt+0x10c90>
   231c4:	ldr	r3, [sp, #40]	; 0x28
   231c8:	ldr	r8, [r3, #28]
   231cc:	ldr	r2, [r3, #24]
   231d0:	ldr	r7, [r3, #20]
   231d4:	str	r2, [sp, #32]
   231d8:	sub	r2, r8, r2
   231dc:	add	r2, r2, #380	; 0x17c
   231e0:	ldr	r3, [pc, #844]	; 23534 <__assert_fail@plt+0x117c0>
   231e4:	add	r2, r2, #2
   231e8:	cmp	r7, #0
   231ec:	smull	r0, r3, r3, r2
   231f0:	add	r3, r3, r2
   231f4:	asr	r0, r2, #31
   231f8:	rsb	r0, r0, r3, asr #2
   231fc:	mvnge	r3, #99	; 0x63
   23200:	rsb	r0, r0, r0, lsl #3
   23204:	sub	r2, r2, r0
   23208:	sub	r2, r8, r2
   2320c:	movlt	r3, #300	; 0x12c
   23210:	adds	r2, r2, #3
   23214:	str	r2, [sp, #52]	; 0x34
   23218:	add	r3, r3, r7
   2321c:	bmi	2406c <__assert_fail@plt+0x122f8>
   23220:	tst	r3, #3
   23224:	ldrne	r3, [pc, #772]	; 23530 <__assert_fail@plt+0x117bc>
   23228:	bne	23270 <__assert_fail@plt+0x114fc>
   2322c:	ldr	r2, [pc, #756]	; 23528 <__assert_fail@plt+0x117b4>
   23230:	mov	r0, #100	; 0x64
   23234:	smull	r2, ip, r2, r3
   23238:	asr	r2, r3, #31
   2323c:	rsb	lr, r2, ip, asr #5
   23240:	mul	r0, r0, lr
   23244:	cmp	r3, r0
   23248:	ldrne	r3, [pc, #732]	; 2352c <__assert_fail@plt+0x117b8>
   2324c:	bne	23270 <__assert_fail@plt+0x114fc>
   23250:	rsb	r2, r2, ip, asr #7
   23254:	mov	ip, #400	; 0x190
   23258:	ldr	r0, [pc, #720]	; 23530 <__assert_fail@plt+0x117bc>
   2325c:	mul	r2, ip, r2
   23260:	sub	ip, ip, #34	; 0x22
   23264:	cmp	r3, r2
   23268:	movne	r3, r0
   2326c:	moveq	r3, ip
   23270:	ldr	r2, [sp, #32]
   23274:	sub	r3, r8, r3
   23278:	sub	r2, r3, r2
   2327c:	ldr	r0, [pc, #688]	; 23534 <__assert_fail@plt+0x117c0>
   23280:	add	r2, r2, #380	; 0x17c
   23284:	add	r2, r2, #2
   23288:	smull	r0, ip, r0, r2
   2328c:	add	ip, ip, r2
   23290:	asr	r0, r2, #31
   23294:	rsb	r0, r0, ip, asr #2
   23298:	rsb	r0, r0, r0, lsl #3
   2329c:	sub	r2, r2, r0
   232a0:	sub	r3, r3, r2
   232a4:	adds	r3, r3, #3
   232a8:	movmi	r0, #0
   232ac:	movpl	r0, #1
   232b0:	ldrmi	r3, [sp, #52]	; 0x34
   232b4:	ldrmi	lr, [pc, #604]	; 23518 <__assert_fail@plt+0x117a4>
   232b8:	ldrpl	lr, [pc, #556]	; 234ec <__assert_fail@plt+0x11778>
   232bc:	movmi	r8, r0
   232c0:	movpl	r8, r0
   232c4:	cmp	r1, #71	; 0x47
   232c8:	beq	23ef4 <__assert_fail@plt+0x12180>
   232cc:	cmp	r1, #103	; 0x67
   232d0:	bne	23ed4 <__assert_fail@plt+0x12160>
   232d4:	ldr	r3, [pc, #588]	; 23528 <__assert_fail@plt+0x117b4>
   232d8:	mov	r0, #100	; 0x64
   232dc:	smull	r2, r3, r3, r7
   232e0:	asr	r2, r7, #31
   232e4:	rsb	r2, r2, r3, asr #5
   232e8:	ldr	r3, [pc, #568]	; 23528 <__assert_fail@plt+0x117b4>
   232ec:	mul	r2, r0, r2
   232f0:	sub	r2, r7, r2
   232f4:	add	r2, r2, r8
   232f8:	smull	r3, ip, r3, r2
   232fc:	asr	r3, r2, #31
   23300:	rsb	r3, r3, ip, asr #5
   23304:	mul	r3, r0, r3
   23308:	subs	r3, r2, r3
   2330c:	bmi	23dfc <__assert_fail@plt+0x12088>
   23310:	cmp	sl, #0
   23314:	beq	23e10 <__assert_fail@plt+0x1209c>
   23318:	mov	r2, #1
   2331c:	mov	r0, #0
   23320:	str	r0, [sp, #52]	; 0x34
   23324:	cmp	sl, #43	; 0x2b
   23328:	beq	23e34 <__assert_fail@plt+0x120c0>
   2332c:	mov	lr, #0
   23330:	mov	ip, #2
   23334:	b	22df8 <__assert_fail@plt+0x11084>
   23338:	cmp	r9, #69	; 0x45
   2333c:	beq	22a04 <__assert_fail@plt+0x10c90>
   23340:	ldr	r3, [sp, #40]	; 0x28
   23344:	mov	ip, #2
   23348:	ldr	r2, [r3, #12]
   2334c:	mov	r3, r2
   23350:	mov	r0, #0
   23354:	lsr	r2, r2, #31
   23358:	cmp	r3, r0
   2335c:	str	r2, [sp, #52]	; 0x34
   23360:	mov	lr, r0
   23364:	movlt	r2, #0
   23368:	movge	r2, #1
   2336c:	b	22dfc <__assert_fail@plt+0x11088>
   23370:	mov	r8, #0
   23374:	ldr	r2, [sp, #40]	; 0x28
   23378:	ldr	r3, [r2, #32]
   2337c:	cmp	r3, #0
   23380:	blt	225dc <__assert_fail@plt+0x10868>
   23384:	ldr	lr, [r2, #36]	; 0x24
   23388:	cmp	lr, #0
   2338c:	blt	23f84 <__assert_fail@plt+0x12210>
   23390:	bne	23e5c <__assert_fail@plt+0x120e8>
   23394:	ldr	r3, [sp, #60]	; 0x3c
   23398:	ldrb	r3, [r3]
   2339c:	cmp	r3, #45	; 0x2d
   233a0:	moveq	r2, lr
   233a4:	movne	r2, #1
   233a8:	movne	r3, lr
   233ac:	moveq	r3, #1
   233b0:	str	r3, [sp, #52]	; 0x34
   233b4:	ldr	r3, [pc, #308]	; 234f0 <__assert_fail@plt+0x1177c>
   233b8:	ldr	r7, [pc, #304]	; 234f0 <__assert_fail@plt+0x1177c>
   233bc:	smull	r3, ip, r3, lr
   233c0:	ldr	r3, [pc, #300]	; 234f4 <__assert_fail@plt+0x11780>
   233c4:	add	ip, ip, lr
   233c8:	smull	r0, r3, r3, lr
   233cc:	asr	r0, lr, #31
   233d0:	rsb	ip, r0, ip, asr #5
   233d4:	str	r0, [sp, #72]	; 0x48
   233d8:	smull	r7, r0, r7, ip
   233dc:	add	r0, r0, ip
   233e0:	asr	r7, ip, #31
   233e4:	rsb	r0, r7, r0, asr #5
   233e8:	add	r3, r3, lr
   233ec:	rsb	r0, r0, r0, lsl #4
   233f0:	str	r0, [sp, #76]	; 0x4c
   233f4:	ldr	r0, [sp, #72]	; 0x48
   233f8:	rsb	r7, ip, ip, lsl #4
   233fc:	rsb	r3, r0, r3, asr #11
   23400:	ldr	r0, [sp, #76]	; 0x4c
   23404:	sub	r7, lr, r7, lsl #2
   23408:	sub	r0, ip, r0, lsl #2
   2340c:	cmp	r8, #3
   23410:	ldrls	pc, [pc, r8, lsl #2]
   23414:	b	22a04 <__assert_fail@plt+0x10c90>
   23418:	ldrdeq	r3, [r2], -r4
   2341c:			; <UNDEFINED> instruction: 0x00023fbc
   23420:	andeq	r4, r2, r0, lsr r0
   23424:	andeq	r3, r2, r4, lsr #31
   23428:	ldr	r3, [sp, #44]	; 0x2c
   2342c:	cmp	r7, #0
   23430:	movne	r3, r7
   23434:	cmp	r9, #69	; 0x45
   23438:	str	r3, [sp, #44]	; 0x2c
   2343c:	beq	22a04 <__assert_fail@plt+0x10c90>
   23440:	uxtb	r1, r1
   23444:	mov	r7, #0
   23448:	b	22bac <__assert_fail@plt+0x10e38>
   2344c:	cmp	r9, #69	; 0x45
   23450:	beq	22cb0 <__assert_fail@plt+0x10f3c>
   23454:	ldr	r3, [sp, #40]	; 0x28
   23458:	mov	r0, #100	; 0x64
   2345c:	ldr	r2, [r3, #20]
   23460:	ldr	r3, [pc, #192]	; 23528 <__assert_fail@plt+0x117b4>
   23464:	smull	r3, ip, r3, r2
   23468:	asr	r3, r2, #31
   2346c:	rsb	r3, r3, ip, asr #5
   23470:	mul	r3, r0, r3
   23474:	subs	r3, r2, r3
   23478:	bpl	23310 <__assert_fail@plt+0x1159c>
   2347c:	sub	r0, r0, #2000	; 0x7d0
   23480:	cmp	r2, r0
   23484:	rsblt	r3, r3, #0
   23488:	addge	r3, r3, #100	; 0x64
   2348c:	b	23310 <__assert_fail@plt+0x1159c>
   23490:	cmp	r9, #69	; 0x45
   23494:	beq	22a04 <__assert_fail@plt+0x10c90>
   23498:	ldr	r2, [sp, #40]	; 0x28
   2349c:	mov	ip, #2
   234a0:	ldr	r3, [r2, #28]
   234a4:	ldr	r2, [r2, #24]
   234a8:	sub	r3, r3, r2
   234ac:	ldr	r2, [pc, #128]	; 23534 <__assert_fail@plt+0x117c0>
   234b0:	add	r3, r3, #7
   234b4:	smull	r0, r2, r2, r3
   234b8:	add	r2, r2, r3
   234bc:	asr	r3, r3, #31
   234c0:	rsb	r2, r3, r2, asr ip
   234c4:	b	2334c <__assert_fail@plt+0x115d8>
   234c8:	ldr	r9, [pc, #40]	; 234f8 <__assert_fail@plt+0x11784>
   234cc:	mvn	r7, #0
   234d0:	b	230b8 <__assert_fail@plt+0x11344>
   234d4:	andeq	r0, r3, r4, lsr #3
   234d8:	strbtvs	r6, [r6], -r7, ror #12
   234dc:	stcleq	12, cr12, [ip], {204}	; 0xcc
   234e0:	andeq	r0, r0, fp, ror #14
   234e4:	stclgt	12, cr12, [ip], {205}	; 0xcd
   234e8:	andeq	r0, r3, r8, lsr #4
   234ec:			; <UNDEFINED> instruction: 0xfffff893
   234f0:	stmhi	r8, {r0, r3, r7, fp, pc}
   234f4:			; <UNDEFINED> instruction: 0x91a2b3c5
   234f8:	andeq	r0, r3, r4, lsr r2
   234fc:	andeq	r0, r3, r0, lsr #4
   23500:	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
   23504:	ldmvs	fp, {r0, r2, r3, r5, r7, r8, r9, fp, pc}^
   23508:	ldrbtne	fp, [r8], #1417	; 0x589
   2350c:	tstmi	fp, #2096	; 0x830
   23510:	blvs	1815ec4 <optarg@@GLIBC_2.4+0x17d4b9c>
   23514:	strbpl	r3, [r6, #2953]!	; 0xb89
   23518:			; <UNDEFINED> instruction: 0xfffff894
   2351c:	andeq	r0, r3, r0, asr #4
   23520:	andeq	r2, r0, pc, lsl #14
   23524:	andeq	r2, r0, r0, lsl r7
   23528:	mvnpl	r8, pc, lsl r5
   2352c:	andeq	r0, r0, lr, ror #2
   23530:	andeq	r0, r0, sp, ror #2
   23534:	subls	r2, r9, #-1828716544	; 0x93000000
   23538:			; <UNDEFINED> instruction: 0xfffff895
   2353c:	ldr	r2, [sp, #32]
   23540:	sub	r3, r4, #1
   23544:	cmp	r3, r2
   23548:	movne	r4, r3
   2354c:	bne	22a04 <__assert_fail@plt+0x10c90>
   23550:	mvn	r3, r5
   23554:	cmp	sl, #45	; 0x2d
   23558:	lsr	r3, r3, #31
   2355c:	moveq	r3, #0
   23560:	cmp	r3, #0
   23564:	moveq	r5, #1
   23568:	beq	23578 <__assert_fail@plt+0x11804>
   2356c:	cmp	r5, #1
   23570:	mov	r3, r5
   23574:	movcc	r5, #1
   23578:	ldr	r2, [sp, #36]	; 0x24
   2357c:	ldr	r0, [sp, #28]
   23580:	sub	r2, r2, r0
   23584:	cmp	r2, r5
   23588:	bls	2263c <__assert_fail@plt+0x108c8>
   2358c:	cmp	r6, #0
   23590:	beq	235c8 <__assert_fail@plt+0x11854>
   23594:	cmp	r3, #1
   23598:	bls	235c4 <__assert_fail@plt+0x11850>
   2359c:	sub	r7, r3, #1
   235a0:	cmp	sl, #43	; 0x2b
   235a4:	cmpne	sl, #48	; 0x30
   235a8:	mov	r2, r7
   235ac:	bne	24054 <__assert_fail@plt+0x122e0>
   235b0:	mov	r1, #48	; 0x30
   235b4:	mov	r0, r6
   235b8:	bl	11be8 <memset@plt>
   235bc:	ldrb	r1, [r4]
   235c0:	add	r6, r6, r7
   235c4:	strb	r1, [r6], #1
   235c8:	ldr	r3, [sp, #28]
   235cc:	add	r3, r3, r5
   235d0:	str	r3, [sp, #28]
   235d4:	b	225dc <__assert_fail@plt+0x10868>
   235d8:	cmp	r9, #69	; 0x45
   235dc:	beq	22a04 <__assert_fail@plt+0x10c90>
   235e0:	ldr	r3, [sp, #40]	; 0x28
   235e4:	mov	ip, #1
   235e8:	ldr	r2, [r3, #24]
   235ec:	b	2334c <__assert_fail@plt+0x115d8>
   235f0:	ldr	r3, [sp, #40]	; 0x28
   235f4:	ldr	r2, [pc, #-200]	; 23534 <__assert_fail@plt+0x117c0>
   235f8:	mov	ip, #1
   235fc:	ldr	r3, [r3, #24]
   23600:	add	r3, r3, #6
   23604:	smull	r0, r2, r2, r3
   23608:	add	r0, r2, r3
   2360c:	asr	r2, r3, #31
   23610:	rsb	r2, r2, r0, asr #2
   23614:	rsb	r2, r2, r2, lsl #3
   23618:	sub	r3, r3, r2
   2361c:	add	r2, r3, ip
   23620:	b	2334c <__assert_fail@plt+0x115d8>
   23624:	subs	r3, sl, #45	; 0x2d
   23628:	movne	r3, #1
   2362c:	cmp	r5, #0
   23630:	movlt	r3, #0
   23634:	cmp	r3, #0
   23638:	beq	24108 <__assert_fail@plt+0x12394>
   2363c:	cmp	r5, #1
   23640:	movcs	r7, r5
   23644:	movcc	r7, #1
   23648:	ldr	r3, [sp, #36]	; 0x24
   2364c:	ldr	r2, [sp, #28]
   23650:	sub	r3, r3, r2
   23654:	cmp	r3, r7
   23658:	bls	2263c <__assert_fail@plt+0x108c8>
   2365c:	cmp	r6, #0
   23660:	beq	23698 <__assert_fail@plt+0x11924>
   23664:	cmp	r5, #1
   23668:	bls	23690 <__assert_fail@plt+0x1191c>
   2366c:	cmp	sl, #43	; 0x2b
   23670:	cmpne	sl, #48	; 0x30
   23674:	sub	r5, r5, #1
   23678:	mov	r0, r6
   2367c:	mov	r2, r5
   23680:	moveq	r1, #48	; 0x30
   23684:	movne	r1, #32
   23688:	bl	11be8 <memset@plt>
   2368c:	add	r6, r6, r5
   23690:	mov	r3, #9
   23694:	strb	r3, [r6], #1
   23698:	ldr	r3, [sp, #28]
   2369c:	add	r3, r3, r7
   236a0:	str	r3, [sp, #28]
   236a4:	b	225dc <__assert_fail@plt+0x10868>
   236a8:	cmp	r9, #69	; 0x45
   236ac:	beq	22a04 <__assert_fail@plt+0x10c90>
   236b0:	ldr	r3, [sp, #40]	; 0x28
   236b4:	mov	ip, #2
   236b8:	ldr	r2, [r3, #4]
   236bc:	b	2334c <__assert_fail@plt+0x115d8>
   236c0:	cmp	r9, #69	; 0x45
   236c4:	beq	22a04 <__assert_fail@plt+0x10c90>
   236c8:	ldr	r2, [sp, #56]	; 0x38
   236cc:	mov	ip, #2
   236d0:	b	2334c <__assert_fail@plt+0x115d8>
   236d4:	cmp	r9, #69	; 0x45
   236d8:	beq	22a04 <__assert_fail@plt+0x10c90>
   236dc:	ldr	r3, [sp, #40]	; 0x28
   236e0:	mov	ip, #2
   236e4:	ldr	r2, [r3, #8]
   236e8:	b	2334c <__assert_fail@plt+0x115d8>
   236ec:	ldrb	r3, [r4, #1]
   236f0:	add	r0, r4, #1
   236f4:	cmp	r3, #58	; 0x3a
   236f8:	movne	r8, #1
   236fc:	beq	24114 <__assert_fail@plt+0x123a0>
   23700:	cmp	r3, #122	; 0x7a
   23704:	moveq	r4, r0
   23708:	bne	22a04 <__assert_fail@plt+0x10c90>
   2370c:	b	23374 <__assert_fail@plt+0x11600>
   23710:	cmp	r9, #69	; 0x45
   23714:	beq	22a04 <__assert_fail@plt+0x10c90>
   23718:	ldr	r3, [sp, #40]	; 0x28
   2371c:	ldr	r0, [pc, #-496]	; 23534 <__assert_fail@plt+0x117c0>
   23720:	ldr	r2, [r3, #24]
   23724:	ldr	r3, [r3, #28]
   23728:	add	r2, r2, #6
   2372c:	smull	ip, r0, r0, r2
   23730:	add	ip, r0, r2
   23734:	asr	r0, r2, #31
   23738:	rsb	r0, r0, ip, asr #2
   2373c:	mov	ip, #2
   23740:	rsb	r0, r0, r0, lsl #3
   23744:	sub	r2, r2, r0
   23748:	b	234a8 <__assert_fail@plt+0x11734>
   2374c:	cmp	r9, #69	; 0x45
   23750:	beq	22a04 <__assert_fail@plt+0x10c90>
   23754:	ldr	r3, [sp, #40]	; 0x28
   23758:	mov	ip, #2
   2375c:	ldr	r2, [r3]
   23760:	b	2334c <__assert_fail@plt+0x115d8>
   23764:	mvn	r7, #0
   23768:	ldr	r9, [pc, #-628]	; 234fc <__assert_fail@plt+0x11788>
   2376c:	b	230b8 <__assert_fail@plt+0x11344>
   23770:	mov	r3, #1
   23774:	cmp	r7, #0
   23778:	moveq	r7, r3
   2377c:	moveq	r1, #112	; 0x70
   23780:	movne	r3, #0
   23784:	movne	r1, #112	; 0x70
   23788:	strne	r3, [sp, #44]	; 0x2c
   2378c:	b	22bac <__assert_fail@plt+0x10e38>
   23790:	cmp	r9, #69	; 0x45
   23794:	beq	22a04 <__assert_fail@plt+0x10c90>
   23798:	cmp	r5, #0
   2379c:	movle	r5, #9
   237a0:	ldr	r3, [sp, #1180]	; 0x49c
   237a4:	mov	r8, #9
   237a8:	b	237bc <__assert_fail@plt+0x11a48>
   237ac:	asr	r2, r3, #31
   237b0:	smull	r1, r3, fp, r3
   237b4:	sub	r8, r8, #1
   237b8:	rsb	r3, r2, r3, asr #2
   237bc:	cmp	r8, r5
   237c0:	bgt	237ac <__assert_fail@plt+0x11a38>
   237c4:	smull	r2, r1, fp, r3
   237c8:	asr	r2, r3, #31
   237cc:	rsb	r1, r2, r1, asr #2
   237d0:	cmp	r8, #1
   237d4:	add	r0, r1, r1, lsl #2
   237d8:	mov	lr, r1
   237dc:	ble	24150 <__assert_fail@plt+0x123dc>
   237e0:	subs	r1, r3, r0, lsl #1
   237e4:	beq	237b0 <__assert_fail@plt+0x11a3c>
   237e8:	sub	r0, r8, #1
   237ec:	add	ip, sp, #1120	; 0x460
   237f0:	add	ip, ip, r0
   237f4:	add	r1, r1, #48	; 0x30
   237f8:	cmp	r0, #0
   237fc:	strb	r1, [ip, #-1040]	; 0xfffffbf0
   23800:	beq	24148 <__assert_fail@plt+0x123d4>
   23804:	smull	r1, ip, fp, lr
   23808:	ldr	r1, [pc, #-744]	; 23528 <__assert_fail@plt+0x117b4>
   2380c:	smull	r1, r0, r1, r3
   23810:	asr	r1, lr, #31
   23814:	rsb	r1, r1, ip, asr #2
   23818:	sub	ip, r8, #2
   2381c:	add	r1, r1, r1, lsl #2
   23820:	cmp	ip, #0
   23824:	sub	r1, lr, r1, lsl #1
   23828:	add	lr, sp, #1120	; 0x460
   2382c:	add	lr, lr, ip
   23830:	add	r1, r1, #48	; 0x30
   23834:	rsb	r0, r2, r0, asr #5
   23838:	strb	r1, [lr, #-1040]	; 0xfffffbf0
   2383c:	beq	239c8 <__assert_fail@plt+0x11c54>
   23840:	smull	r1, lr, fp, r0
   23844:	ldr	r1, [pc, #-844]	; 23500 <__assert_fail@plt+0x1178c>
   23848:	smull	r1, ip, r1, r3
   2384c:	asr	r1, r0, #31
   23850:	rsb	r1, r1, lr, asr #2
   23854:	rsb	lr, r2, ip, asr #6
   23858:	add	r1, r1, r1, lsl #2
   2385c:	sub	ip, r8, #3
   23860:	sub	r0, r0, r1, lsl #1
   23864:	add	r1, sp, #1120	; 0x460
   23868:	add	r1, r1, ip
   2386c:	add	r0, r0, #48	; 0x30
   23870:	cmp	ip, #0
   23874:	strb	r0, [r1, #-1040]	; 0xfffffbf0
   23878:	ble	239c8 <__assert_fail@plt+0x11c54>
   2387c:	smull	r1, ip, fp, lr
   23880:	ldr	r1, [pc, #-900]	; 23504 <__assert_fail@plt+0x11790>
   23884:	asr	r0, lr, #31
   23888:	rsb	r0, r0, ip, asr #2
   2388c:	smull	ip, r1, r1, r3
   23890:	add	r0, r0, r0, lsl #2
   23894:	sub	ip, r8, #4
   23898:	sub	r0, lr, r0, lsl #1
   2389c:	add	lr, sp, #1120	; 0x460
   238a0:	add	lr, lr, ip
   238a4:	add	r0, r0, #48	; 0x30
   238a8:	cmp	ip, #0
   238ac:	strb	r0, [lr, #-1040]	; 0xfffffbf0
   238b0:	rsb	ip, r2, r1, asr #12
   238b4:	ble	239c8 <__assert_fail@plt+0x11c54>
   238b8:	smull	r1, lr, fp, ip
   238bc:	ldr	r0, [pc, #-956]	; 23508 <__assert_fail@plt+0x11794>
   238c0:	asr	r1, ip, #31
   238c4:	rsb	r1, r1, lr, asr #2
   238c8:	smull	lr, r0, r0, r3
   238cc:	add	r1, r1, r1, lsl #2
   238d0:	sub	lr, r8, #5
   238d4:	sub	r1, ip, r1, lsl #1
   238d8:	add	ip, sp, #1120	; 0x460
   238dc:	add	ip, ip, lr
   238e0:	add	r1, r1, #48	; 0x30
   238e4:	cmp	lr, #0
   238e8:	strb	r1, [ip, #-1040]	; 0xfffffbf0
   238ec:	rsb	lr, r2, r0, asr #13
   238f0:	ble	239c8 <__assert_fail@plt+0x11c54>
   238f4:	smull	r1, ip, fp, lr
   238f8:	ldr	r1, [pc, #-1012]	; 2350c <__assert_fail@plt+0x11798>
   238fc:	asr	r0, lr, #31
   23900:	rsb	r0, r0, ip, asr #2
   23904:	smull	ip, r1, r1, r3
   23908:	add	r0, r0, r0, lsl #2
   2390c:	sub	ip, r8, #6
   23910:	sub	r0, lr, r0, lsl #1
   23914:	add	lr, sp, #1120	; 0x460
   23918:	add	lr, lr, ip
   2391c:	add	r0, r0, #48	; 0x30
   23920:	cmp	ip, #0
   23924:	strb	r0, [lr, #-1040]	; 0xfffffbf0
   23928:	rsb	ip, r2, r1, asr #18
   2392c:	ble	239c8 <__assert_fail@plt+0x11c54>
   23930:	smull	r1, lr, fp, ip
   23934:	ldr	r0, [pc, #-1068]	; 23510 <__assert_fail@plt+0x1179c>
   23938:	asr	r1, ip, #31
   2393c:	rsb	r1, r1, lr, asr #2
   23940:	smull	lr, r0, r0, r3
   23944:	add	r1, r1, r1, lsl #2
   23948:	sub	lr, r8, #7
   2394c:	sub	r1, ip, r1, lsl #1
   23950:	add	ip, sp, #1120	; 0x460
   23954:	add	ip, ip, lr
   23958:	add	r1, r1, #48	; 0x30
   2395c:	cmp	lr, #0
   23960:	strb	r1, [ip, #-1040]	; 0xfffffbf0
   23964:	rsb	ip, r2, r0, asr #22
   23968:	ble	239c8 <__assert_fail@plt+0x11c54>
   2396c:	smull	r1, lr, fp, ip
   23970:	ldr	r1, [pc, #-1124]	; 23514 <__assert_fail@plt+0x117a0>
   23974:	asr	r0, ip, #31
   23978:	rsb	r0, r0, lr, asr #2
   2397c:	smull	r1, r3, r1, r3
   23980:	add	r0, r0, r0, lsl #2
   23984:	sub	r1, r8, #8
   23988:	sub	r0, ip, r0, lsl #1
   2398c:	add	ip, sp, #1120	; 0x460
   23990:	add	lr, ip, r1
   23994:	add	r0, r0, #48	; 0x30
   23998:	cmp	r1, #1
   2399c:	strb	r0, [lr, #-1040]	; 0xfffffbf0
   239a0:	rsb	r2, r2, r3, asr #25
   239a4:	bne	239c8 <__assert_fail@plt+0x11c54>
   239a8:	smull	r3, r1, fp, r2
   239ac:	asr	r3, r2, #31
   239b0:	rsb	r3, r3, r1, asr #2
   239b4:	mov	r8, #9
   239b8:	add	r3, r3, r3, lsl #2
   239bc:	sub	r2, r2, r3, lsl #1
   239c0:	add	r3, r2, #48	; 0x30
   239c4:	strb	r3, [sp, #80]	; 0x50
   239c8:	cmp	sl, #0
   239cc:	ldr	r3, [sp, #36]	; 0x24
   239d0:	ldr	r2, [sp, #28]
   239d4:	moveq	sl, #48	; 0x30
   239d8:	cmp	r8, #0
   239dc:	movcs	r7, r8
   239e0:	movcc	r7, #0
   239e4:	sub	r3, r3, r2
   239e8:	cmp	r7, r3
   239ec:	bcs	2263c <__assert_fail@plt+0x108c8>
   239f0:	cmp	r6, #0
   239f4:	beq	23a18 <__assert_fail@plt+0x11ca4>
   239f8:	ldr	r3, [sp, #44]	; 0x2c
   239fc:	mov	r2, r8
   23a00:	cmp	r3, #0
   23a04:	add	r1, sp, #80	; 0x50
   23a08:	mov	r0, r6
   23a0c:	beq	24140 <__assert_fail@plt+0x123cc>
   23a10:	bl	22494 <__assert_fail@plt+0x10720>
   23a14:	add	r6, r6, r8
   23a18:	cmp	sl, #45	; 0x2d
   23a1c:	ldr	r3, [sp, #28]
   23a20:	subne	r5, r5, r8
   23a24:	add	r7, r7, r3
   23a28:	ldr	r3, [sp, #36]	; 0x24
   23a2c:	bicne	r5, r5, r5, asr #31
   23a30:	moveq	r5, #0
   23a34:	sub	r3, r3, r7
   23a38:	cmp	r5, r3
   23a3c:	bcs	2263c <__assert_fail@plt+0x108c8>
   23a40:	cmp	r6, #0
   23a44:	beq	23a70 <__assert_fail@plt+0x11cfc>
   23a48:	cmp	r5, #0
   23a4c:	beq	23a70 <__assert_fail@plt+0x11cfc>
   23a50:	cmp	sl, #43	; 0x2b
   23a54:	cmpne	sl, #48	; 0x30
   23a58:	mov	r0, r6
   23a5c:	mov	r2, r5
   23a60:	moveq	r1, #48	; 0x30
   23a64:	movne	r1, #32
   23a68:	bl	11be8 <memset@plt>
   23a6c:	add	r6, r6, r5
   23a70:	add	r3, r5, r7
   23a74:	str	r3, [sp, #28]
   23a78:	b	225dc <__assert_fail@plt+0x10868>
   23a7c:	cmp	r9, #69	; 0x45
   23a80:	beq	22a04 <__assert_fail@plt+0x10c90>
   23a84:	ldr	r3, [sp, #40]	; 0x28
   23a88:	mov	r0, #0
   23a8c:	mov	lr, r0
   23a90:	ldr	r3, [r3, #28]
   23a94:	mov	ip, #3
   23a98:	cmn	r3, #1
   23a9c:	movlt	r2, #1
   23aa0:	movge	r2, r0
   23aa4:	str	r2, [sp, #52]	; 0x34
   23aa8:	add	r3, r3, #1
   23aac:	movge	r2, #1
   23ab0:	movlt	r2, r0
   23ab4:	b	22dfc <__assert_fail@plt+0x11088>
   23ab8:	cmp	r9, #69	; 0x45
   23abc:	beq	22a04 <__assert_fail@plt+0x10c90>
   23ac0:	ldr	r3, [sp, #40]	; 0x28
   23ac4:	ldr	r2, [r3, #12]
   23ac8:	cmp	sl, #0
   23acc:	mov	ip, #2
   23ad0:	moveq	sl, #95	; 0x5f
   23ad4:	b	2334c <__assert_fail@plt+0x115d8>
   23ad8:	mvn	r3, r5
   23adc:	cmp	sl, #45	; 0x2d
   23ae0:	lsr	r3, r3, #31
   23ae4:	moveq	r3, #0
   23ae8:	cmp	r3, #0
   23aec:	beq	24134 <__assert_fail@plt+0x123c0>
   23af0:	cmp	r5, #1
   23af4:	movcs	r7, r5
   23af8:	movcc	r7, #1
   23afc:	ldr	r3, [sp, #36]	; 0x24
   23b00:	ldr	r2, [sp, #28]
   23b04:	sub	r3, r3, r2
   23b08:	cmp	r3, r7
   23b0c:	bls	2263c <__assert_fail@plt+0x108c8>
   23b10:	cmp	r6, #0
   23b14:	beq	23698 <__assert_fail@plt+0x11924>
   23b18:	cmp	r5, #1
   23b1c:	bls	23b44 <__assert_fail@plt+0x11dd0>
   23b20:	cmp	sl, #43	; 0x2b
   23b24:	cmpne	sl, #48	; 0x30
   23b28:	sub	r5, r5, #1
   23b2c:	mov	r0, r6
   23b30:	mov	r2, r5
   23b34:	moveq	r1, #48	; 0x30
   23b38:	movne	r1, #32
   23b3c:	bl	11be8 <memset@plt>
   23b40:	add	r6, r6, r5
   23b44:	mov	r3, #10
   23b48:	strb	r3, [r6], #1
   23b4c:	b	23698 <__assert_fail@plt+0x11924>
   23b50:	cmp	r9, #69	; 0x45
   23b54:	beq	22a04 <__assert_fail@plt+0x10c90>
   23b58:	ldr	r3, [sp, #40]	; 0x28
   23b5c:	mov	r0, #0
   23b60:	mov	lr, r0
   23b64:	ldr	r3, [r3, #16]
   23b68:	mov	ip, #2
   23b6c:	cmn	r3, #1
   23b70:	movlt	r2, #1
   23b74:	movge	r2, r0
   23b78:	str	r2, [sp, #52]	; 0x34
   23b7c:	add	r3, r3, #1
   23b80:	movge	r2, #1
   23b84:	movlt	r2, r0
   23b88:	b	22dfc <__assert_fail@plt+0x11088>
   23b8c:	cmp	r9, #69	; 0x45
   23b90:	beq	22a04 <__assert_fail@plt+0x10c90>
   23b94:	ldr	r2, [sp, #56]	; 0x38
   23b98:	b	23ac8 <__assert_fail@plt+0x11d54>
   23b9c:	cmp	r9, #69	; 0x45
   23ba0:	beq	22a04 <__assert_fail@plt+0x10c90>
   23ba4:	ldr	r3, [sp, #40]	; 0x28
   23ba8:	ldr	r2, [r3, #8]
   23bac:	b	23ac8 <__assert_fail@plt+0x11d54>
   23bb0:	ldr	r3, [sp, #40]	; 0x28
   23bb4:	cmp	r9, #79	; 0x4f
   23bb8:	ldr	r3, [r3, #16]
   23bbc:	beq	22cb0 <__assert_fail@plt+0x10f3c>
   23bc0:	add	r2, r3, r3, lsl #2
   23bc4:	mov	lr, #0
   23bc8:	add	r3, r3, r2, lsl #1
   23bcc:	str	lr, [sp, #52]	; 0x34
   23bd0:	asr	r3, r3, #5
   23bd4:	add	r3, r3, #1
   23bd8:	mov	r0, lr
   23bdc:	mov	ip, #1
   23be0:	b	22e20 <__assert_fail@plt+0x110ac>
   23be4:	mov	r3, #0
   23be8:	b	23774 <__assert_fail@plt+0x11a00>
   23bec:	ldr	r0, [sp, #60]	; 0x3c
   23bf0:	bl	11b94 <strlen@plt>
   23bf4:	mvn	r3, r5
   23bf8:	cmp	sl, #45	; 0x2d
   23bfc:	lsr	r3, r3, #31
   23c00:	moveq	r3, #0
   23c04:	cmp	r3, #0
   23c08:	moveq	r5, #0
   23c0c:	ldr	r3, [sp, #44]	; 0x2c
   23c10:	cmp	r7, #0
   23c14:	movne	r3, #0
   23c18:	str	r3, [sp, #44]	; 0x2c
   23c1c:	ldr	r2, [sp, #28]
   23c20:	ldr	r3, [sp, #36]	; 0x24
   23c24:	sub	r3, r3, r2
   23c28:	cmp	r0, r5
   23c2c:	movcs	r9, r0
   23c30:	movcc	r9, r5
   23c34:	cmp	r9, r3
   23c38:	mov	r8, r0
   23c3c:	bcs	2263c <__assert_fail@plt+0x108c8>
   23c40:	cmp	r6, #0
   23c44:	beq	22ac0 <__assert_fail@plt+0x10d4c>
   23c48:	cmp	r0, r5
   23c4c:	bcs	23c74 <__assert_fail@plt+0x11f00>
   23c50:	cmp	sl, #43	; 0x2b
   23c54:	cmpne	sl, #48	; 0x30
   23c58:	sub	r5, r5, r0
   23c5c:	mov	r2, r5
   23c60:	mov	r0, r6
   23c64:	moveq	r1, #48	; 0x30
   23c68:	movne	r1, #32
   23c6c:	bl	11be8 <memset@plt>
   23c70:	add	r6, r6, r5
   23c74:	cmp	r7, #0
   23c78:	bne	23ff4 <__assert_fail@plt+0x12280>
   23c7c:	ldr	r3, [sp, #44]	; 0x2c
   23c80:	mov	r2, r8
   23c84:	cmp	r3, #0
   23c88:	ldr	r1, [sp, #60]	; 0x3c
   23c8c:	mov	r0, r6
   23c90:	beq	23fe8 <__assert_fail@plt+0x12274>
   23c94:	bl	22494 <__assert_fail@plt+0x10720>
   23c98:	add	r6, r6, r8
   23c9c:	b	22ac0 <__assert_fail@plt+0x10d4c>
   23ca0:	cmp	r9, #69	; 0x45
   23ca4:	beq	22cb0 <__assert_fail@plt+0x10f3c>
   23ca8:	cmp	r9, #79	; 0x4f
   23cac:	beq	22a04 <__assert_fail@plt+0x10c90>
   23cb0:	ldr	r3, [sp, #40]	; 0x28
   23cb4:	ldr	r0, [pc, #-1956]	; 23518 <__assert_fail@plt+0x117a4>
   23cb8:	ldr	r2, [r3, #20]
   23cbc:	cmp	r2, r0
   23cc0:	movge	ip, #0
   23cc4:	movlt	ip, #1
   23cc8:	add	r3, r2, #1888	; 0x760
   23ccc:	cmp	sl, #0
   23cd0:	str	ip, [sp, #52]	; 0x34
   23cd4:	add	r3, r3, #12
   23cd8:	bne	23dcc <__assert_fail@plt+0x12058>
   23cdc:	ldr	ip, [sp, #1164]	; 0x48c
   23ce0:	cmp	r2, r0
   23ce4:	movlt	r2, #0
   23ce8:	movge	r2, #1
   23cec:	cmp	ip, #43	; 0x2b
   23cf0:	beq	23f78 <__assert_fail@plt+0x12204>
   23cf4:	mov	sl, ip
   23cf8:	mov	lr, #0
   23cfc:	mov	ip, #4
   23d00:	b	22df8 <__assert_fail@plt+0x11084>
   23d04:	mov	r3, #45	; 0x2d
   23d08:	b	22ec8 <__assert_fail@plt+0x11154>
   23d0c:	mov	r0, r6
   23d10:	mov	r1, r7
   23d14:	mov	r2, r8
   23d18:	bl	11930 <memcpy@plt>
   23d1c:	add	r6, r6, r8
   23d20:	b	22ac0 <__assert_fail@plt+0x10d4c>
   23d24:	cmp	r8, #0
   23d28:	beq	23f40 <__assert_fail@plt+0x121cc>
   23d2c:	bl	11b1c <__ctype_tolower_loc@plt>
   23d30:	add	r8, r6, r8
   23d34:	add	r3, sp, #96	; 0x60
   23d38:	add	r9, r3, r9
   23d3c:	mov	r3, r8
   23d40:	ldrb	r1, [r9, #-1]!
   23d44:	ldr	r2, [r0]
   23d48:	ldr	r2, [r2, r1, lsl #2]
   23d4c:	strb	r2, [r3, #-1]!
   23d50:	cmp	r6, r3
   23d54:	bne	23d40 <__assert_fail@plt+0x11fcc>
   23d58:	b	22c98 <__assert_fail@plt+0x10f24>
   23d5c:	ldr	r3, [sp, #32]
   23d60:	add	r8, r3, #14
   23d64:	sub	r8, r8, r7
   23d68:	sub	r3, r5, r8
   23d6c:	cmp	r3, #0
   23d70:	movle	r3, #0
   23d74:	andgt	r3, r9, #1
   23d78:	cmp	r3, #0
   23d7c:	bne	22f44 <__assert_fail@plt+0x111d0>
   23d80:	cmp	r9, #0
   23d84:	bne	22f44 <__assert_fail@plt+0x111d0>
   23d88:	b	22f40 <__assert_fail@plt+0x111cc>
   23d8c:	cmp	r6, #0
   23d90:	beq	2261c <__assert_fail@plt+0x108a8>
   23d94:	mov	r0, r6
   23d98:	mov	r2, r8
   23d9c:	mov	r1, #32
   23da0:	str	r3, [sp, #52]	; 0x34
   23da4:	bl	11be8 <memset@plt>
   23da8:	ldr	r3, [sp, #28]
   23dac:	sub	r5, r5, r8
   23db0:	add	r3, r3, r8
   23db4:	str	r3, [sp, #28]
   23db8:	add	r6, r6, r8
   23dbc:	ldr	r3, [sp, #52]	; 0x34
   23dc0:	b	22efc <__assert_fail@plt+0x11188>
   23dc4:	str	r3, [sp, #28]
   23dc8:	b	225f4 <__assert_fail@plt+0x10880>
   23dcc:	ldr	r2, [sp, #52]	; 0x34
   23dd0:	cmp	sl, #43	; 0x2b
   23dd4:	eor	r2, r2, #1
   23dd8:	beq	23f48 <__assert_fail@plt+0x121d4>
   23ddc:	mov	lr, #0
   23de0:	uxtb	r2, r2
   23de4:	mov	ip, #4
   23de8:	b	22df8 <__assert_fail@plt+0x11084>
   23dec:	cmp	r2, r0
   23df0:	movlt	r2, #0
   23df4:	movge	r2, #1
   23df8:	b	23324 <__assert_fail@plt+0x115b0>
   23dfc:	cmp	r7, lr
   23e00:	bge	23f94 <__assert_fail@plt+0x12220>
   23e04:	cmp	sl, #0
   23e08:	rsb	r3, r3, #0
   23e0c:	bne	23318 <__assert_fail@plt+0x115a4>
   23e10:	ldr	r2, [sp, #1164]	; 0x48c
   23e14:	cmp	r2, #43	; 0x2b
   23e18:	beq	23f58 <__assert_fail@plt+0x121e4>
   23e1c:	mov	lr, #0
   23e20:	mov	sl, r2
   23e24:	str	lr, [sp, #52]	; 0x34
   23e28:	mov	r2, #1
   23e2c:	mov	ip, #2
   23e30:	b	22df8 <__assert_fail@plt+0x11084>
   23e34:	mov	ip, #2
   23e38:	mov	r0, #99	; 0x63
   23e3c:	cmp	r0, r3
   23e40:	movcs	r0, #0
   23e44:	movcc	r0, #1
   23e48:	cmp	r5, ip
   23e4c:	movle	lr, r0
   23e50:	orrgt	lr, r0, #1
   23e54:	mov	sl, #43	; 0x2b
   23e58:	b	22df8 <__assert_fail@plt+0x11084>
   23e5c:	mov	r3, #0
   23e60:	mov	r2, #1
   23e64:	str	r3, [sp, #52]	; 0x34
   23e68:	b	233b4 <__assert_fail@plt+0x11640>
   23e6c:	ldr	r3, [sp, #1180]	; 0x49c
   23e70:	mov	ip, #43	; 0x2b
   23e74:	str	r3, [sp, #20]
   23e78:	ldr	r3, [sp, #1176]	; 0x498
   23e7c:	mov	r7, #4
   23e80:	str	r3, [sp, #16]
   23e84:	ldr	r3, [sp, #1172]	; 0x494
   23e88:	mov	r0, r9
   23e8c:	str	r3, [sp, #12]
   23e90:	ldr	r3, [sp, #44]	; 0x2c
   23e94:	str	r7, [sp, #8]
   23e98:	str	r3, [sp]
   23e9c:	str	ip, [sp, #4]
   23ea0:	ldr	r3, [sp, #40]	; 0x28
   23ea4:	ldr	r2, [pc, #-2448]	; 2351c <__assert_fail@plt+0x117a8>
   23ea8:	mvn	r1, #0
   23eac:	mov	sl, ip
   23eb0:	bl	224d4 <__assert_fail@plt+0x10760>
   23eb4:	mov	r3, r9
   23eb8:	ldr	r9, [pc, #-2468]	; 2351c <__assert_fail@plt+0x117a8>
   23ebc:	mov	r8, r0
   23ec0:	b	23104 <__assert_fail@plt+0x11390>
   23ec4:	ldr	r2, [sp, #48]	; 0x30
   23ec8:	mov	r3, #75	; 0x4b
   23ecc:	str	r3, [r2]
   23ed0:	b	22648 <__assert_fail@plt+0x108d4>
   23ed4:	ldr	r2, [pc, #-2472]	; 23534 <__assert_fail@plt+0x117c0>
   23ed8:	mov	ip, #2
   23edc:	smull	r0, r2, r2, r3
   23ee0:	add	r0, r2, r3
   23ee4:	asr	r2, r3, #31
   23ee8:	rsb	r2, r2, r0, asr #2
   23eec:	add	r2, r2, #1
   23ef0:	b	2334c <__assert_fail@plt+0x115d8>
   23ef4:	cmp	r7, lr
   23ef8:	add	r3, r7, #1888	; 0x760
   23efc:	movge	r2, #0
   23f00:	movlt	r2, #1
   23f04:	add	r3, r3, #12
   23f08:	cmp	sl, #0
   23f0c:	str	r2, [sp, #52]	; 0x34
   23f10:	add	r3, r3, r0
   23f14:	bne	23dcc <__assert_fail@plt+0x12058>
   23f18:	ldr	r2, [sp, #1164]	; 0x48c
   23f1c:	cmp	r2, #43	; 0x2b
   23f20:	beq	23f6c <__assert_fail@plt+0x121f8>
   23f24:	cmp	r7, lr
   23f28:	mov	sl, r2
   23f2c:	mov	lr, #0
   23f30:	movlt	r2, #0
   23f34:	movge	r2, #1
   23f38:	mov	ip, #4
   23f3c:	b	22df8 <__assert_fail@plt+0x11084>
   23f40:	mov	r8, r6
   23f44:	b	22c98 <__assert_fail@plt+0x10f24>
   23f48:	mov	ip, #4
   23f4c:	uxtb	r2, r2
   23f50:	ldr	r0, [pc, #-2616]	; 23520 <__assert_fail@plt+0x117ac>
   23f54:	b	23e3c <__assert_fail@plt+0x120c8>
   23f58:	str	sl, [sp, #52]	; 0x34
   23f5c:	mov	r2, #1
   23f60:	mov	ip, #2
   23f64:	mov	r0, #99	; 0x63
   23f68:	b	23e3c <__assert_fail@plt+0x120c8>
   23f6c:	cmp	r7, lr
   23f70:	movlt	r2, #0
   23f74:	movge	r2, #1
   23f78:	mov	ip, #4
   23f7c:	ldr	r0, [pc, #-2660]	; 23520 <__assert_fail@plt+0x117ac>
   23f80:	b	23e3c <__assert_fail@plt+0x120c8>
   23f84:	mov	r3, #1
   23f88:	mov	r2, #0
   23f8c:	str	r3, [sp, #52]	; 0x34
   23f90:	b	233b4 <__assert_fail@plt+0x11640>
   23f94:	cmp	sl, #0
   23f98:	add	r3, r3, #100	; 0x64
   23f9c:	beq	23e10 <__assert_fail@plt+0x1209c>
   23fa0:	b	23318 <__assert_fail@plt+0x115a4>
   23fa4:	cmp	r7, #0
   23fa8:	bne	24030 <__assert_fail@plt+0x122bc>
   23fac:	cmp	r0, #0
   23fb0:	moveq	lr, #1
   23fb4:	moveq	ip, #3
   23fb8:	beq	22dfc <__assert_fail@plt+0x11088>
   23fbc:	mov	ip, #100	; 0x64
   23fc0:	mov	lr, #1
   23fc4:	mla	r3, ip, r3, r0
   23fc8:	mov	ip, #6
   23fcc:	mov	r0, #4
   23fd0:	b	22dfc <__assert_fail@plt+0x11088>
   23fd4:	mov	ip, #100	; 0x64
   23fd8:	mov	lr, #1
   23fdc:	mla	r3, ip, r3, r0
   23fe0:	mov	ip, #5
   23fe4:	b	22df8 <__assert_fail@plt+0x11084>
   23fe8:	bl	11930 <memcpy@plt>
   23fec:	add	r6, r6, r8
   23ff0:	b	22ac0 <__assert_fail@plt+0x10d4c>
   23ff4:	cmp	r8, #0
   23ff8:	beq	22ac0 <__assert_fail@plt+0x10d4c>
   23ffc:	bl	11b1c <__ctype_tolower_loc@plt>
   24000:	ldr	r3, [sp, #60]	; 0x3c
   24004:	add	r6, r6, r8
   24008:	ldr	ip, [sp, #60]	; 0x3c
   2400c:	add	r8, r3, r8
   24010:	mov	r3, r6
   24014:	ldrb	r1, [r8, #-1]!
   24018:	ldr	r2, [r0]
   2401c:	cmp	ip, r8
   24020:	ldr	r2, [r2, r1, lsl #2]
   24024:	strb	r2, [r3, #-1]!
   24028:	bne	24014 <__assert_fail@plt+0x122a0>
   2402c:	b	22ac0 <__assert_fail@plt+0x10d4c>
   24030:	mov	lr, #100	; 0x64
   24034:	ldr	ip, [pc, #-2840]	; 23524 <__assert_fail@plt+0x117b0>
   24038:	mul	r0, lr, r0
   2403c:	mov	lr, #1
   24040:	mla	r3, ip, r3, r0
   24044:	mov	r0, #20
   24048:	add	r3, r3, r7
   2404c:	mov	ip, #9
   24050:	b	22dfc <__assert_fail@plt+0x11088>
   24054:	mov	r1, #32
   24058:	mov	r0, r6
   2405c:	bl	11be8 <memset@plt>
   24060:	add	r6, r6, r7
   24064:	ldrb	r1, [r4]
   24068:	b	235c4 <__assert_fail@plt+0x11850>
   2406c:	sub	r3, r3, #1
   24070:	tst	r3, #3
   24074:	ldrne	r3, [pc, #-2892]	; 23530 <__assert_fail@plt+0x117bc>
   24078:	bne	240c0 <__assert_fail@plt+0x1234c>
   2407c:	ldr	r2, [pc, #-2908]	; 23528 <__assert_fail@plt+0x117b4>
   24080:	mov	r0, #100	; 0x64
   24084:	smull	r2, ip, r2, r3
   24088:	asr	r2, r3, #31
   2408c:	rsb	lr, r2, ip, asr #5
   24090:	mul	r0, r0, lr
   24094:	cmp	r3, r0
   24098:	ldrne	r3, [pc, #-2932]	; 2352c <__assert_fail@plt+0x117b8>
   2409c:	bne	240c0 <__assert_fail@plt+0x1234c>
   240a0:	rsb	r2, r2, ip, asr #7
   240a4:	mov	ip, #400	; 0x190
   240a8:	ldr	r0, [pc, #-2944]	; 23530 <__assert_fail@plt+0x117bc>
   240ac:	mul	r2, ip, r2
   240b0:	sub	ip, ip, #34	; 0x22
   240b4:	cmp	r3, r2
   240b8:	movne	r3, r0
   240bc:	moveq	r3, ip
   240c0:	ldr	r2, [sp, #32]
   240c4:	add	r3, r8, r3
   240c8:	sub	r2, r3, r2
   240cc:	ldr	ip, [pc, #-2976]	; 23534 <__assert_fail@plt+0x117c0>
   240d0:	add	r2, r2, #380	; 0x17c
   240d4:	add	r2, r2, #2
   240d8:	mvn	r0, #0
   240dc:	smull	ip, lr, ip, r2
   240e0:	add	lr, lr, r2
   240e4:	asr	ip, r2, #31
   240e8:	rsb	ip, ip, lr, asr #2
   240ec:	mov	r8, r0
   240f0:	rsb	ip, ip, ip, lsl #3
   240f4:	sub	ip, r2, ip
   240f8:	sub	r3, r3, ip
   240fc:	add	r3, r3, #3
   24100:	ldr	lr, [pc, #-3024]	; 23538 <__assert_fail@plt+0x117c4>
   24104:	b	232c4 <__assert_fail@plt+0x11550>
   24108:	mov	r5, r3
   2410c:	mov	r7, #1
   24110:	b	23648 <__assert_fail@plt+0x118d4>
   24114:	add	r2, r4, #2
   24118:	mov	r8, #1
   2411c:	mov	r0, r2
   24120:	ldrb	r3, [r2], #1
   24124:	add	r8, r8, #1
   24128:	cmp	r3, #58	; 0x3a
   2412c:	bne	23700 <__assert_fail@plt+0x1198c>
   24130:	b	2411c <__assert_fail@plt+0x123a8>
   24134:	mov	r5, r3
   24138:	mov	r7, #1
   2413c:	b	23afc <__assert_fail@plt+0x11d88>
   24140:	bl	11930 <memcpy@plt>
   24144:	b	23a14 <__assert_fail@plt+0x11ca0>
   24148:	mov	r8, #1
   2414c:	b	239c8 <__assert_fail@plt+0x11c54>
   24150:	subeq	r3, r3, r0, lsl #1
   24154:	addeq	r3, r3, #48	; 0x30
   24158:	strbeq	r3, [sp, #80]	; 0x50
   2415c:	b	239c8 <__assert_fail@plt+0x11c54>
   24160:	push	{r4, r5, lr}
   24164:	sub	sp, sp, #36	; 0x24
   24168:	add	lr, sp, #32
   2416c:	mov	ip, #0
   24170:	ldr	r5, [sp, #48]	; 0x30
   24174:	ldr	r4, [sp, #52]	; 0x34
   24178:	strb	ip, [lr, #-1]!
   2417c:	str	lr, [sp, #12]
   24180:	mvn	lr, #0
   24184:	str	ip, [sp, #4]
   24188:	str	ip, [sp]
   2418c:	str	r5, [sp, #16]
   24190:	str	r4, [sp, #20]
   24194:	str	lr, [sp, #8]
   24198:	bl	224d4 <__assert_fail@plt+0x10760>
   2419c:	add	sp, sp, #36	; 0x24
   241a0:	pop	{r4, r5, pc}
   241a4:	ldr	r3, [pc, #52]	; 241e0 <__assert_fail@plt+0x1246c>
   241a8:	push	{r4, lr}
   241ac:	mov	r2, #5
   241b0:	ldr	r1, [pc, #44]	; 241e4 <__assert_fail@plt+0x12470>
   241b4:	mov	r0, #0
   241b8:	ldr	r4, [r3]
   241bc:	bl	11984 <dcgettext@plt>
   241c0:	ldr	r2, [pc, #32]	; 241e8 <__assert_fail@plt+0x12474>
   241c4:	mov	r1, #1
   241c8:	mov	r3, r0
   241cc:	mov	r0, r4
   241d0:	bl	11c18 <__fprintf_chk@plt>
   241d4:	ldr	r3, [pc, #16]	; 241ec <__assert_fail@plt+0x12478>
   241d8:	ldr	r0, [r3]
   241dc:	bl	11b70 <exit@plt>
   241e0:	andeq	r1, r4, r0, lsr #6
   241e4:	andeq	r0, r3, ip, asr #4
   241e8:	andeq	r0, r3, r8, ror #6
   241ec:	andeq	r1, r4, r4, asr #5

000241f0 <_obstack_begin@@Base>:
   241f0:	push	{r4, r5, r6, lr}
   241f4:	mov	r4, r0
   241f8:	ldrb	r0, [r0, #40]	; 0x28
   241fc:	subs	r5, r2, #0
   24200:	subne	r6, r5, #1
   24204:	bic	r0, r0, #1
   24208:	strb	r0, [r4, #40]	; 0x28
   2420c:	ldrb	r2, [r4, #40]	; 0x28
   24210:	ldr	r0, [pc, #152]	; 242b0 <_obstack_begin@@Base+0xc0>
   24214:	moveq	r6, #7
   24218:	ldr	ip, [sp, #16]
   2421c:	moveq	r5, #8
   24220:	cmp	r1, #0
   24224:	moveq	r1, r0
   24228:	tst	r2, #1
   2422c:	str	r3, [r4, #28]
   24230:	str	ip, [r4, #32]
   24234:	str	r6, [r4, #24]
   24238:	str	r1, [r4]
   2423c:	bne	24298 <_obstack_begin@@Base+0xa8>
   24240:	mov	r0, r1
   24244:	blx	r3
   24248:	cmp	r0, #0
   2424c:	str	r0, [r4, #4]
   24250:	beq	242a4 <_obstack_begin@@Base+0xb4>
   24254:	ldr	r3, [r4]
   24258:	add	r2, r0, #8
   2425c:	rsb	r5, r5, #0
   24260:	add	r2, r2, r6
   24264:	add	r3, r0, r3
   24268:	and	r2, r2, r5
   2426c:	mov	r1, #0
   24270:	str	r2, [r4, #8]
   24274:	str	r2, [r4, #12]
   24278:	str	r3, [r0]
   2427c:	str	r3, [r4, #16]
   24280:	str	r1, [r0, #4]
   24284:	ldrb	r3, [r4, #40]	; 0x28
   24288:	mov	r0, #1
   2428c:	and	r3, r3, #249	; 0xf9
   24290:	strb	r3, [r4, #40]	; 0x28
   24294:	pop	{r4, r5, r6, pc}
   24298:	ldr	r0, [r4, #36]	; 0x24
   2429c:	blx	r3
   242a0:	b	24248 <_obstack_begin@@Base+0x58>
   242a4:	ldr	r3, [pc, #8]	; 242b4 <_obstack_begin@@Base+0xc4>
   242a8:	ldr	r3, [r3]
   242ac:	blx	r3
   242b0:	andeq	r0, r0, r8, ror #31
   242b4:	andeq	r1, r4, r8, asr #5

000242b8 <_obstack_begin_1@@Base>:
   242b8:	ldrb	ip, [r0, #40]	; 0x28
   242bc:	push	{r4, r5, r6, lr}
   242c0:	mov	r4, r0
   242c4:	orr	ip, ip, #1
   242c8:	subs	r5, r2, #0
   242cc:	strb	ip, [r4, #40]	; 0x28
   242d0:	ldrb	r2, [r4, #40]	; 0x28
   242d4:	ldr	ip, [pc, #160]	; 2437c <_obstack_begin_1@@Base+0xc4>
   242d8:	subne	r6, r5, #1
   242dc:	moveq	r6, #7
   242e0:	ldr	lr, [sp, #16]
   242e4:	ldr	r0, [sp, #20]
   242e8:	moveq	r5, #8
   242ec:	cmp	r1, #0
   242f0:	moveq	r1, ip
   242f4:	tst	r2, #1
   242f8:	str	r3, [r4, #28]
   242fc:	str	lr, [r4, #32]
   24300:	str	r0, [r4, #36]	; 0x24
   24304:	str	r6, [r4, #24]
   24308:	str	r1, [r4]
   2430c:	bne	24368 <_obstack_begin_1@@Base+0xb0>
   24310:	mov	r0, r1
   24314:	blx	r3
   24318:	cmp	r0, #0
   2431c:	str	r0, [r4, #4]
   24320:	beq	24370 <_obstack_begin_1@@Base+0xb8>
   24324:	ldr	r3, [r4]
   24328:	add	r2, r0, #8
   2432c:	rsb	r5, r5, #0
   24330:	add	r2, r2, r6
   24334:	add	r3, r0, r3
   24338:	and	r2, r2, r5
   2433c:	mov	r1, #0
   24340:	str	r2, [r4, #8]
   24344:	str	r2, [r4, #12]
   24348:	str	r3, [r0]
   2434c:	str	r3, [r4, #16]
   24350:	str	r1, [r0, #4]
   24354:	ldrb	r3, [r4, #40]	; 0x28
   24358:	mov	r0, #1
   2435c:	and	r3, r3, #249	; 0xf9
   24360:	strb	r3, [r4, #40]	; 0x28
   24364:	pop	{r4, r5, r6, pc}
   24368:	blx	r3
   2436c:	b	24318 <_obstack_begin_1@@Base+0x60>
   24370:	ldr	r3, [pc, #8]	; 24380 <_obstack_begin_1@@Base+0xc8>
   24374:	ldr	r3, [r3]
   24378:	blx	r3
   2437c:	andeq	r0, r0, r8, ror #31
   24380:	andeq	r1, r4, r8, asr #5

00024384 <_obstack_newchunk@@Base>:
   24384:	ldr	r2, [r0, #8]
   24388:	push	{r4, r5, r6, r7, r8, lr}
   2438c:	ldr	r6, [r0, #12]
   24390:	ldr	r3, [r0, #24]
   24394:	sub	r6, r6, r2
   24398:	add	r1, r6, r1
   2439c:	adds	r3, r1, r3
   243a0:	movcc	r2, #1
   243a4:	movcs	r2, #0
   243a8:	cmp	r6, r1
   243ac:	movhi	r1, #0
   243b0:	andls	r1, r2, #1
   243b4:	cmp	r1, #0
   243b8:	bne	243c8 <_obstack_newchunk@@Base+0x44>
   243bc:	ldr	r3, [pc, #272]	; 244d4 <_obstack_newchunk@@Base+0x150>
   243c0:	ldr	r3, [r3]
   243c4:	blx	r3
   243c8:	ldr	r5, [r0]
   243cc:	add	r1, r3, r6, lsr #3
   243d0:	cmp	r3, r5
   243d4:	ldrb	r2, [r0, #40]	; 0x28
   243d8:	movcc	r3, r5
   243dc:	add	r1, r1, #100	; 0x64
   243e0:	cmp	r3, r1
   243e4:	movcs	r5, r3
   243e8:	movcc	r5, r1
   243ec:	tst	r2, #1
   243f0:	mov	r4, r0
   243f4:	ldr	r7, [r0, #4]
   243f8:	ldr	r3, [r0, #28]
   243fc:	bne	2448c <_obstack_newchunk@@Base+0x108>
   24400:	mov	r0, r5
   24404:	blx	r3
   24408:	mov	r8, r0
   2440c:	cmp	r8, #0
   24410:	beq	243bc <_obstack_newchunk@@Base+0x38>
   24414:	ldr	r2, [r4, #24]
   24418:	mov	r3, r8
   2441c:	add	r1, r8, r5
   24420:	str	r8, [r4, #4]
   24424:	str	r7, [r8, #4]
   24428:	str	r1, [r4, #16]
   2442c:	str	r1, [r3], #8
   24430:	add	r3, r3, r2
   24434:	bic	r5, r3, r2
   24438:	mov	r0, r5
   2443c:	mov	r2, r6
   24440:	ldr	r1, [r4, #8]
   24444:	bl	11930 <memcpy@plt>
   24448:	ldrb	r2, [r4, #40]	; 0x28
   2444c:	tst	r2, #2
   24450:	bne	24470 <_obstack_newchunk@@Base+0xec>
   24454:	ldr	r1, [r4, #24]
   24458:	add	r3, r7, #8
   2445c:	add	r3, r3, r1
   24460:	ldr	r0, [r4, #8]
   24464:	bic	r3, r3, r1
   24468:	cmp	r0, r3
   2446c:	beq	244a0 <_obstack_newchunk@@Base+0x11c>
   24470:	ldrb	r3, [r4, #40]	; 0x28
   24474:	add	r2, r5, r6
   24478:	str	r2, [r4, #12]
   2447c:	bic	r3, r3, #2
   24480:	str	r5, [r4, #8]
   24484:	strb	r3, [r4, #40]	; 0x28
   24488:	pop	{r4, r5, r6, r7, r8, pc}
   2448c:	mov	r1, r5
   24490:	ldr	r0, [r0, #36]	; 0x24
   24494:	blx	r3
   24498:	mov	r8, r0
   2449c:	b	2440c <_obstack_newchunk@@Base+0x88>
   244a0:	ldr	r3, [r7, #4]
   244a4:	tst	r2, #1
   244a8:	str	r3, [r8, #4]
   244ac:	bne	244c0 <_obstack_newchunk@@Base+0x13c>
   244b0:	mov	r0, r7
   244b4:	ldr	r3, [r4, #32]
   244b8:	blx	r3
   244bc:	b	24470 <_obstack_newchunk@@Base+0xec>
   244c0:	mov	r1, r7
   244c4:	ldr	r3, [r4, #32]
   244c8:	ldr	r0, [r4, #36]	; 0x24
   244cc:	blx	r3
   244d0:	b	24470 <_obstack_newchunk@@Base+0xec>
   244d4:	andeq	r1, r4, r8, asr #5

000244d8 <_obstack_allocated_p@@Base>:
   244d8:	ldr	r0, [r0, #4]
   244dc:	cmp	r0, #0
   244e0:	bne	244f4 <_obstack_allocated_p@@Base+0x1c>
   244e4:	b	24510 <_obstack_allocated_p@@Base+0x38>
   244e8:	ldr	r0, [r0, #4]
   244ec:	cmp	r0, #0
   244f0:	bxeq	lr
   244f4:	cmp	r1, r0
   244f8:	bls	244e8 <_obstack_allocated_p@@Base+0x10>
   244fc:	ldr	r3, [r0]
   24500:	cmp	r1, r3
   24504:	bhi	244e8 <_obstack_allocated_p@@Base+0x10>
   24508:	mov	r0, #1
   2450c:	bx	lr
   24510:	bx	lr

00024514 <_obstack_free@@Base>:
   24514:	push	{r4, r5, r6, lr}
   24518:	mov	r4, r0
   2451c:	ldr	r0, [r0, #4]
   24520:	mov	r6, r1
   24524:	cmp	r0, #0
   24528:	bne	24550 <_obstack_free@@Base+0x3c>
   2452c:	b	2459c <_obstack_free@@Base+0x88>
   24530:	ldr	r3, [r4, #32]
   24534:	blx	r3
   24538:	ldrb	r3, [r4, #40]	; 0x28
   2453c:	cmp	r5, #0
   24540:	orr	r3, r3, #2
   24544:	strb	r3, [r4, #40]	; 0x28
   24548:	beq	2459c <_obstack_free@@Base+0x88>
   2454c:	mov	r0, r5
   24550:	cmp	r6, r0
   24554:	bls	24564 <_obstack_free@@Base+0x50>
   24558:	ldr	r3, [r0]
   2455c:	cmp	r6, r3
   24560:	bls	24588 <_obstack_free@@Base+0x74>
   24564:	ldrb	r3, [r4, #40]	; 0x28
   24568:	ldr	r5, [r0, #4]
   2456c:	tst	r3, #1
   24570:	beq	24530 <_obstack_free@@Base+0x1c>
   24574:	mov	r1, r0
   24578:	ldr	r3, [r4, #32]
   2457c:	ldr	r0, [r4, #36]	; 0x24
   24580:	blx	r3
   24584:	b	24538 <_obstack_free@@Base+0x24>
   24588:	str	r6, [r4, #12]
   2458c:	str	r6, [r4, #8]
   24590:	str	r3, [r4, #16]
   24594:	str	r0, [r4, #4]
   24598:	pop	{r4, r5, r6, pc}
   2459c:	cmp	r6, #0
   245a0:	bne	245a8 <_obstack_free@@Base+0x94>
   245a4:	pop	{r4, r5, r6, pc}
   245a8:	bl	11d2c <abort@plt>

000245ac <_obstack_memory_used@@Base>:
   245ac:	ldr	r3, [r0, #4]
   245b0:	cmp	r3, #0
   245b4:	beq	245d8 <_obstack_memory_used@@Base+0x2c>
   245b8:	mov	r0, #0
   245bc:	ldr	r2, [r3]
   245c0:	sub	r2, r2, r3
   245c4:	ldr	r3, [r3, #4]
   245c8:	add	r0, r0, r2
   245cc:	cmp	r3, #0
   245d0:	bne	245bc <_obstack_memory_used@@Base+0x10>
   245d4:	bx	lr
   245d8:	mov	r0, r3
   245dc:	bx	lr
   245e0:	push	{r4, r5, r6, lr}
   245e4:	subs	r4, r0, #0
   245e8:	beq	2465c <_obstack_memory_used@@Base+0xb0>
   245ec:	mov	r1, #47	; 0x2f
   245f0:	bl	11c78 <strrchr@plt>
   245f4:	subs	r5, r0, #0
   245f8:	beq	24648 <_obstack_memory_used@@Base+0x9c>
   245fc:	add	r6, r5, #1
   24600:	sub	r3, r6, r4
   24604:	cmp	r3, #6
   24608:	ble	24648 <_obstack_memory_used@@Base+0x9c>
   2460c:	mov	r2, #7
   24610:	ldr	r1, [pc, #96]	; 24678 <_obstack_memory_used@@Base+0xcc>
   24614:	sub	r0, r5, #6
   24618:	bl	11d20 <strncmp@plt>
   2461c:	cmp	r0, #0
   24620:	bne	24648 <_obstack_memory_used@@Base+0x9c>
   24624:	mov	r2, #3
   24628:	ldr	r1, [pc, #76]	; 2467c <_obstack_memory_used@@Base+0xd0>
   2462c:	mov	r0, r6
   24630:	bl	11d20 <strncmp@plt>
   24634:	cmp	r0, #0
   24638:	movne	r4, r6
   2463c:	ldreq	r3, [pc, #60]	; 24680 <_obstack_memory_used@@Base+0xd4>
   24640:	addeq	r4, r5, #4
   24644:	streq	r4, [r3]
   24648:	ldr	r2, [pc, #52]	; 24684 <_obstack_memory_used@@Base+0xd8>
   2464c:	ldr	r3, [pc, #52]	; 24688 <_obstack_memory_used@@Base+0xdc>
   24650:	str	r4, [r2]
   24654:	str	r4, [r3]
   24658:	pop	{r4, r5, r6, pc}
   2465c:	ldr	r3, [pc, #40]	; 2468c <_obstack_memory_used@@Base+0xe0>
   24660:	mov	r2, #55	; 0x37
   24664:	mov	r1, #1
   24668:	ldr	r3, [r3]
   2466c:	ldr	r0, [pc, #28]	; 24690 <_obstack_memory_used@@Base+0xe4>
   24670:	bl	11a2c <fwrite@plt>
   24674:	bl	11d2c <abort@plt>
   24678:	muleq	r3, r8, r2
   2467c:	andeq	r0, r3, r0, lsr #5
   24680:	andeq	r1, r4, r0, lsl r3
   24684:	andeq	r2, r4, ip, ror #7
   24688:	andeq	r1, r4, r4, lsl r3
   2468c:	andeq	r1, r4, r0, lsr #6
   24690:	andeq	r0, r3, r0, ror #4
   24694:	push	{r4, r5, r6, lr}
   24698:	mov	r4, r0
   2469c:	mov	r5, r1
   246a0:	bl	2b4ec <_obstack_memory_used@@Base+0x6f40>
   246a4:	ldrb	r3, [r0]
   246a8:	bic	r3, r3, #32
   246ac:	cmp	r3, #85	; 0x55
   246b0:	bne	24710 <_obstack_memory_used@@Base+0x164>
   246b4:	ldrb	r3, [r0, #1]
   246b8:	bic	r3, r3, #32
   246bc:	cmp	r3, #84	; 0x54
   246c0:	bne	2474c <_obstack_memory_used@@Base+0x1a0>
   246c4:	ldrb	r3, [r0, #2]
   246c8:	bic	r3, r3, #32
   246cc:	cmp	r3, #70	; 0x46
   246d0:	bne	2474c <_obstack_memory_used@@Base+0x1a0>
   246d4:	ldrb	r3, [r0, #3]
   246d8:	cmp	r3, #45	; 0x2d
   246dc:	bne	2474c <_obstack_memory_used@@Base+0x1a0>
   246e0:	ldrb	r3, [r0, #4]
   246e4:	cmp	r3, #56	; 0x38
   246e8:	bne	2474c <_obstack_memory_used@@Base+0x1a0>
   246ec:	ldrb	r3, [r0, #5]
   246f0:	cmp	r3, #0
   246f4:	bne	2474c <_obstack_memory_used@@Base+0x1a0>
   246f8:	ldrb	r2, [r4]
   246fc:	ldr	r3, [pc, #152]	; 2479c <_obstack_memory_used@@Base+0x1f0>
   24700:	ldr	r0, [pc, #152]	; 247a0 <_obstack_memory_used@@Base+0x1f4>
   24704:	cmp	r2, #96	; 0x60
   24708:	movne	r0, r3
   2470c:	pop	{r4, r5, r6, pc}
   24710:	cmp	r3, #71	; 0x47
   24714:	bne	2474c <_obstack_memory_used@@Base+0x1a0>
   24718:	ldrb	r3, [r0, #1]
   2471c:	bic	r3, r3, #32
   24720:	cmp	r3, #66	; 0x42
   24724:	bne	2474c <_obstack_memory_used@@Base+0x1a0>
   24728:	ldrb	r3, [r0, #2]
   2472c:	cmp	r3, #49	; 0x31
   24730:	bne	2474c <_obstack_memory_used@@Base+0x1a0>
   24734:	ldrb	r3, [r0, #3]
   24738:	cmp	r3, #56	; 0x38
   2473c:	bne	2474c <_obstack_memory_used@@Base+0x1a0>
   24740:	ldrb	r3, [r0, #4]
   24744:	cmp	r3, #48	; 0x30
   24748:	beq	24760 <_obstack_memory_used@@Base+0x1b4>
   2474c:	ldr	r3, [pc, #80]	; 247a4 <_obstack_memory_used@@Base+0x1f8>
   24750:	cmp	r5, #9
   24754:	ldr	r0, [pc, #76]	; 247a8 <_obstack_memory_used@@Base+0x1fc>
   24758:	movne	r0, r3
   2475c:	pop	{r4, r5, r6, pc}
   24760:	ldrb	r3, [r0, #5]
   24764:	cmp	r3, #51	; 0x33
   24768:	bne	2474c <_obstack_memory_used@@Base+0x1a0>
   2476c:	ldrb	r3, [r0, #6]
   24770:	cmp	r3, #48	; 0x30
   24774:	bne	2474c <_obstack_memory_used@@Base+0x1a0>
   24778:	ldrb	r3, [r0, #7]
   2477c:	cmp	r3, #0
   24780:	bne	2474c <_obstack_memory_used@@Base+0x1a0>
   24784:	ldrb	r2, [r4]
   24788:	ldr	r3, [pc, #28]	; 247ac <_obstack_memory_used@@Base+0x200>
   2478c:	ldr	r0, [pc, #28]	; 247b0 <_obstack_memory_used@@Base+0x204>
   24790:	cmp	r2, #96	; 0x60
   24794:	movne	r0, r3
   24798:	pop	{r4, r5, r6, pc}
   2479c:	strdeq	r0, [r3], -ip
   247a0:	strdeq	r0, [r3], -r8
   247a4:	andeq	r0, r3, ip, lsl #6
   247a8:	andeq	r0, r3, r8, lsl #6
   247ac:	andeq	r0, r3, r4, lsl #6
   247b0:	andeq	r0, r3, r0, lsl #6
   247b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   247b8:	sub	sp, sp, #140	; 0x8c
   247bc:	mov	r9, r1
   247c0:	str	r3, [sp, #24]
   247c4:	mov	r3, #1
   247c8:	mov	sl, r0
   247cc:	str	r2, [sp, #44]	; 0x2c
   247d0:	str	r3, [sp, #28]
   247d4:	bl	11a50 <__ctype_get_mb_cur_max@plt>
   247d8:	ldr	r3, [sp, #180]	; 0xb4
   247dc:	mov	fp, r9
   247e0:	mov	r9, sl
   247e4:	lsr	r3, r3, #1
   247e8:	and	r3, r3, #1
   247ec:	str	r3, [sp, #40]	; 0x28
   247f0:	ldr	r3, [sp, #180]	; 0xb4
   247f4:	mov	r2, #0
   247f8:	and	r3, r3, #4
   247fc:	str	r3, [sp, #100]	; 0x64
   24800:	ldr	r3, [sp, #180]	; 0xb4
   24804:	str	r2, [sp, #76]	; 0x4c
   24808:	and	r3, r3, #1
   2480c:	str	r3, [sp, #96]	; 0x60
   24810:	str	r2, [sp, #36]	; 0x24
   24814:	str	r2, [sp, #56]	; 0x38
   24818:	str	r2, [sp, #68]	; 0x44
   2481c:	str	r2, [sp, #72]	; 0x48
   24820:	str	r2, [sp, #84]	; 0x54
   24824:	str	r0, [sp, #80]	; 0x50
   24828:	ldr	r3, [sp, #176]	; 0xb0
   2482c:	cmp	r3, #10
   24830:	ldrls	pc, [pc, r3, lsl #2]
   24834:	b	25a0c <_obstack_memory_used@@Base+0x1460>
   24838:	andeq	r4, r2, r4, ror #16
   2483c:	andeq	r4, r2, r4, lsl #23
   24840:	ldrdeq	r4, [r2], -ip
   24844:			; <UNDEFINED> instruction: 0x00024bb8
   24848:	andeq	r4, r2, r0, lsr sp
   2484c:	andeq	r4, r2, r0, lsl sp
   24850:	ldrdeq	r4, [r2], -r8
   24854:	strdeq	r4, [r2], -ip
   24858:	andeq	r4, r2, r4, lsr #24
   2485c:	andeq	r4, r2, r4, lsr #24
   24860:	andeq	r4, r2, r4, lsr #24
   24864:	mov	r3, #0
   24868:	ldr	r1, [sp, #56]	; 0x38
   2486c:	ldr	r2, [sp, #176]	; 0xb0
   24870:	ldr	lr, [sp, #176]	; 0xb0
   24874:	mov	r8, r3
   24878:	mov	ip, r3
   2487c:	str	r3, [sp, #40]	; 0x28
   24880:	mov	r3, r1
   24884:	cmp	r2, #2
   24888:	moveq	r3, #0
   2488c:	andne	r3, r3, #1
   24890:	mov	r0, r3
   24894:	str	r3, [sp, #92]	; 0x5c
   24898:	ldr	r3, [sp, #68]	; 0x44
   2489c:	sub	lr, lr, #2
   248a0:	adds	r2, r3, #0
   248a4:	movne	r2, #1
   248a8:	and	r3, r1, ip
   248ac:	and	r3, r2, r3
   248b0:	clz	lr, lr
   248b4:	str	r3, [sp, #88]	; 0x58
   248b8:	lsr	lr, lr, #5
   248bc:	mov	r3, ip
   248c0:	and	r3, r3, lr
   248c4:	mov	sl, #0
   248c8:	and	r0, r2, r0
   248cc:	str	r3, [sp, #64]	; 0x40
   248d0:	eor	r3, r1, #1
   248d4:	str	lr, [sp, #52]	; 0x34
   248d8:	str	r0, [sp, #48]	; 0x30
   248dc:	str	r3, [sp, #60]	; 0x3c
   248e0:	ldr	r3, [sp, #24]
   248e4:	cmn	r3, #1
   248e8:	beq	24e18 <_obstack_memory_used@@Base+0x86c>
   248ec:	subs	r7, r3, sl
   248f0:	movne	r7, #1
   248f4:	cmp	r7, #0
   248f8:	beq	24e30 <_obstack_memory_used@@Base+0x884>
   248fc:	ldr	r3, [sp, #48]	; 0x30
   24900:	cmp	r3, #0
   24904:	beq	2519c <_obstack_memory_used@@Base+0xbf0>
   24908:	ldr	r2, [sp, #68]	; 0x44
   2490c:	ldr	r1, [sp, #24]
   24910:	cmp	r2, #1
   24914:	mov	r3, r2
   24918:	movls	r3, #0
   2491c:	movhi	r3, #1
   24920:	cmn	r1, #1
   24924:	movne	r3, #0
   24928:	cmp	r3, #0
   2492c:	add	r4, sl, r2
   24930:	beq	24940 <_obstack_memory_used@@Base+0x394>
   24934:	ldr	r0, [sp, #44]	; 0x2c
   24938:	bl	11b94 <strlen@plt>
   2493c:	str	r0, [sp, #24]
   24940:	ldr	r3, [sp, #24]
   24944:	cmp	r3, r4
   24948:	ldr	r3, [sp, #44]	; 0x2c
   2494c:	add	r5, r3, sl
   24950:	bcc	251a4 <_obstack_memory_used@@Base+0xbf8>
   24954:	mov	r0, r5
   24958:	ldr	r2, [sp, #68]	; 0x44
   2495c:	ldr	r1, [sp, #72]	; 0x48
   24960:	bl	1196c <memcmp@plt>
   24964:	cmp	r0, #0
   24968:	bne	251a4 <_obstack_memory_used@@Base+0xbf8>
   2496c:	ldr	r3, [sp, #40]	; 0x28
   24970:	cmp	r3, #0
   24974:	bne	25b60 <_obstack_memory_used@@Base+0x15b4>
   24978:	ldrb	r4, [r5]
   2497c:	cmp	r4, #126	; 0x7e
   24980:	ldrls	pc, [pc, r4, lsl #2]
   24984:	b	25a9c <_obstack_memory_used@@Base+0x14f0>
   24988:	andeq	r5, r2, ip, asr r0
   2498c:	muleq	r2, ip, sl
   24990:	muleq	r2, ip, sl
   24994:	muleq	r2, ip, sl
   24998:	muleq	r2, ip, sl
   2499c:	muleq	r2, ip, sl
   249a0:	muleq	r2, ip, sl
   249a4:	andeq	r5, r2, r8, asr #32
   249a8:	andeq	r5, r2, r4, lsr r0
   249ac:	andeq	r5, r2, r0, lsl r0
   249b0:	strdeq	r4, [r2], -r0
   249b4:	andeq	r5, r2, r0, lsr #32
   249b8:	andeq	r4, r2, r8, asr pc
   249bc:	andeq	r5, r2, ip, lsl #3
   249c0:	muleq	r2, ip, sl
   249c4:	muleq	r2, ip, sl
   249c8:	muleq	r2, ip, sl
   249cc:	muleq	r2, ip, sl
   249d0:	muleq	r2, ip, sl
   249d4:	muleq	r2, ip, sl
   249d8:	muleq	r2, ip, sl
   249dc:	muleq	r2, ip, sl
   249e0:	muleq	r2, ip, sl
   249e4:	muleq	r2, ip, sl
   249e8:	muleq	r2, ip, sl
   249ec:	muleq	r2, ip, sl
   249f0:	muleq	r2, ip, sl
   249f4:	muleq	r2, ip, sl
   249f8:	muleq	r2, ip, sl
   249fc:	muleq	r2, ip, sl
   24a00:	muleq	r2, ip, sl
   24a04:	muleq	r2, ip, sl
   24a08:	andeq	r5, r2, ip, ror r1
   24a0c:	andeq	r5, r2, ip, asr r1
   24a10:	andeq	r5, r2, ip, asr r1
   24a14:	andeq	r5, r2, ip, lsr r1
   24a18:	andeq	r5, r2, ip, asr r1
   24a1c:	andeq	r4, r2, r8, asr #30
   24a20:	andeq	r5, r2, ip, asr r1
   24a24:	andeq	r4, r2, r4, lsr #30
   24a28:	andeq	r5, r2, ip, asr r1
   24a2c:	andeq	r5, r2, ip, asr r1
   24a30:	andeq	r5, r2, ip, asr r1
   24a34:	andeq	r4, r2, r8, asr #30
   24a38:	andeq	r4, r2, r8, asr #30
   24a3c:	andeq	r4, r2, r8, asr #30
   24a40:	andeq	r4, r2, r8, asr #30
   24a44:	andeq	r4, r2, r8, asr #30
   24a48:	andeq	r4, r2, r8, asr #30
   24a4c:	andeq	r4, r2, r8, asr #30
   24a50:	andeq	r4, r2, r8, asr #30
   24a54:	andeq	r4, r2, r8, asr #30
   24a58:	andeq	r4, r2, r8, asr #30
   24a5c:	andeq	r4, r2, r8, asr #30
   24a60:	andeq	r4, r2, r8, asr #30
   24a64:	andeq	r4, r2, r8, asr #30
   24a68:	andeq	r4, r2, r8, asr #30
   24a6c:	andeq	r4, r2, r8, asr #30
   24a70:	andeq	r4, r2, r8, asr #30
   24a74:	andeq	r5, r2, ip, asr r1
   24a78:	andeq	r5, r2, ip, asr r1
   24a7c:	andeq	r5, r2, ip, asr r1
   24a80:	andeq	r5, r2, ip, asr r1
   24a84:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   24a88:	muleq	r2, ip, sl
   24a8c:	andeq	r4, r2, r8, asr #30
   24a90:	andeq	r4, r2, r8, asr #30
   24a94:	andeq	r4, r2, r8, asr #30
   24a98:	andeq	r4, r2, r8, asr #30
   24a9c:	andeq	r4, r2, r8, asr #30
   24aa0:	andeq	r4, r2, r8, asr #30
   24aa4:	andeq	r4, r2, r8, asr #30
   24aa8:	andeq	r4, r2, r8, asr #30
   24aac:	andeq	r4, r2, r8, asr #30
   24ab0:	andeq	r4, r2, r8, asr #30
   24ab4:	andeq	r4, r2, r8, asr #30
   24ab8:	andeq	r4, r2, r8, asr #30
   24abc:	andeq	r4, r2, r8, asr #30
   24ac0:	andeq	r4, r2, r8, asr #30
   24ac4:	andeq	r4, r2, r8, asr #30
   24ac8:	andeq	r4, r2, r8, asr #30
   24acc:	andeq	r4, r2, r8, asr #30
   24ad0:	andeq	r4, r2, r8, asr #30
   24ad4:	andeq	r4, r2, r8, asr #30
   24ad8:	andeq	r4, r2, r8, asr #30
   24adc:	andeq	r4, r2, r8, asr #30
   24ae0:	andeq	r4, r2, r8, asr #30
   24ae4:	andeq	r4, r2, r8, asr #30
   24ae8:	andeq	r4, r2, r8, asr #30
   24aec:	andeq	r4, r2, r8, asr #30
   24af0:	andeq	r4, r2, r8, asr #30
   24af4:	andeq	r5, r2, ip, asr r1
   24af8:	andeq	r4, r2, r0, lsr #29
   24afc:	andeq	r4, r2, r8, asr #30
   24b00:	andeq	r5, r2, ip, asr r1
   24b04:	andeq	r4, r2, r8, asr #30
   24b08:	andeq	r5, r2, ip, asr r1
   24b0c:	andeq	r4, r2, r8, asr #30
   24b10:	andeq	r4, r2, r8, asr #30
   24b14:	andeq	r4, r2, r8, asr #30
   24b18:	andeq	r4, r2, r8, asr #30
   24b1c:	andeq	r4, r2, r8, asr #30
   24b20:	andeq	r4, r2, r8, asr #30
   24b24:	andeq	r4, r2, r8, asr #30
   24b28:	andeq	r4, r2, r8, asr #30
   24b2c:	andeq	r4, r2, r8, asr #30
   24b30:	andeq	r4, r2, r8, asr #30
   24b34:	andeq	r4, r2, r8, asr #30
   24b38:	andeq	r4, r2, r8, asr #30
   24b3c:	andeq	r4, r2, r8, asr #30
   24b40:	andeq	r4, r2, r8, asr #30
   24b44:	andeq	r4, r2, r8, asr #30
   24b48:	andeq	r4, r2, r8, asr #30
   24b4c:	andeq	r4, r2, r8, asr #30
   24b50:	andeq	r4, r2, r8, asr #30
   24b54:	andeq	r4, r2, r8, asr #30
   24b58:	andeq	r4, r2, r8, asr #30
   24b5c:	andeq	r4, r2, r8, asr #30
   24b60:	andeq	r4, r2, r8, asr #30
   24b64:	andeq	r4, r2, r8, asr #30
   24b68:	andeq	r4, r2, r8, asr #30
   24b6c:	andeq	r4, r2, r8, asr #30
   24b70:	andeq	r4, r2, r8, asr #30
   24b74:	andeq	r4, r2, r8, asr sp
   24b78:	andeq	r5, r2, ip, asr r1
   24b7c:	andeq	r4, r2, r8, asr sp
   24b80:	andeq	r5, r2, ip, lsr r1
   24b84:	mov	r3, #1
   24b88:	str	r3, [sp, #40]	; 0x28
   24b8c:	str	r3, [sp, #68]	; 0x44
   24b90:	mov	r8, #0
   24b94:	ldr	r3, [pc, #4056]	; 25b74 <_obstack_memory_used@@Base+0x15c8>
   24b98:	str	r3, [sp, #72]	; 0x48
   24b9c:	mov	r3, #2
   24ba0:	str	r3, [sp, #176]	; 0xb0
   24ba4:	ldr	r1, [sp, #56]	; 0x38
   24ba8:	mov	r2, r3
   24bac:	ldr	ip, [sp, #40]	; 0x28
   24bb0:	mov	lr, r3
   24bb4:	b	24880 <_obstack_memory_used@@Base+0x2d4>
   24bb8:	mov	r3, #1
   24bbc:	str	r3, [sp, #56]	; 0x38
   24bc0:	str	r3, [sp, #68]	; 0x44
   24bc4:	str	r3, [sp, #40]	; 0x28
   24bc8:	ldr	r3, [pc, #4004]	; 25b74 <_obstack_memory_used@@Base+0x15c8>
   24bcc:	mov	r8, #0
   24bd0:	str	r3, [sp, #72]	; 0x48
   24bd4:	b	24b9c <_obstack_memory_used@@Base+0x5f0>
   24bd8:	mov	r3, #1
   24bdc:	str	r3, [sp, #56]	; 0x38
   24be0:	str	r3, [sp, #68]	; 0x44
   24be4:	str	r3, [sp, #40]	; 0x28
   24be8:	ldr	r3, [pc, #3976]	; 25b78 <_obstack_memory_used@@Base+0x15cc>
   24bec:	mov	r8, #0
   24bf0:	str	r3, [sp, #72]	; 0x48
   24bf4:	mov	r3, #5
   24bf8:	b	24ba0 <_obstack_memory_used@@Base+0x5f4>
   24bfc:	mov	r3, #0
   24c00:	str	r3, [sp, #40]	; 0x28
   24c04:	mov	r3, #1
   24c08:	str	r3, [sp, #56]	; 0x38
   24c0c:	mov	r8, #0
   24c10:	mov	r1, r3
   24c14:	ldr	r2, [sp, #176]	; 0xb0
   24c18:	ldr	ip, [sp, #40]	; 0x28
   24c1c:	ldr	lr, [sp, #176]	; 0xb0
   24c20:	b	24880 <_obstack_memory_used@@Base+0x2d4>
   24c24:	ldr	r3, [sp, #176]	; 0xb0
   24c28:	cmp	r3, #10
   24c2c:	beq	24c70 <_obstack_memory_used@@Base+0x6c4>
   24c30:	mov	r2, #5
   24c34:	ldr	r1, [pc, #3904]	; 25b7c <_obstack_memory_used@@Base+0x15d0>
   24c38:	mov	r0, #0
   24c3c:	bl	11984 <dcgettext@plt>
   24c40:	ldr	r2, [pc, #3892]	; 25b7c <_obstack_memory_used@@Base+0x15d0>
   24c44:	cmp	r0, r2
   24c48:	str	r0, [sp, #188]	; 0xbc
   24c4c:	beq	25d08 <_obstack_memory_used@@Base+0x175c>
   24c50:	mov	r2, #5
   24c54:	ldr	r1, [pc, #3864]	; 25b74 <_obstack_memory_used@@Base+0x15c8>
   24c58:	mov	r0, #0
   24c5c:	bl	11984 <dcgettext@plt>
   24c60:	ldr	r2, [pc, #3852]	; 25b74 <_obstack_memory_used@@Base+0x15c8>
   24c64:	cmp	r0, r2
   24c68:	str	r0, [sp, #192]	; 0xc0
   24c6c:	beq	25cf8 <_obstack_memory_used@@Base+0x174c>
   24c70:	ldr	r8, [sp, #40]	; 0x28
   24c74:	cmp	r8, #0
   24c78:	movne	r8, #0
   24c7c:	bne	24cac <_obstack_memory_used@@Base+0x700>
   24c80:	ldr	r3, [sp, #188]	; 0xbc
   24c84:	ldrb	r3, [r3]
   24c88:	cmp	r3, #0
   24c8c:	beq	24cac <_obstack_memory_used@@Base+0x700>
   24c90:	ldr	r2, [sp, #188]	; 0xbc
   24c94:	cmp	fp, r8
   24c98:	strbhi	r3, [r9, r8]
   24c9c:	ldrb	r3, [r2, #1]!
   24ca0:	add	r8, r8, #1
   24ca4:	cmp	r3, #0
   24ca8:	bne	24c94 <_obstack_memory_used@@Base+0x6e8>
   24cac:	ldr	r0, [sp, #192]	; 0xc0
   24cb0:	bl	11b94 <strlen@plt>
   24cb4:	ldr	r3, [sp, #192]	; 0xc0
   24cb8:	ldr	r2, [sp, #176]	; 0xb0
   24cbc:	str	r3, [sp, #72]	; 0x48
   24cc0:	mov	r3, #1
   24cc4:	str	r3, [sp, #56]	; 0x38
   24cc8:	mov	r1, r3
   24ccc:	ldr	ip, [sp, #40]	; 0x28
   24cd0:	ldr	lr, [sp, #176]	; 0xb0
   24cd4:	str	r0, [sp, #68]	; 0x44
   24cd8:	b	24880 <_obstack_memory_used@@Base+0x2d4>
   24cdc:	ldr	r3, [sp, #40]	; 0x28
   24ce0:	cmp	r3, #0
   24ce4:	beq	2598c <_obstack_memory_used@@Base+0x13e0>
   24ce8:	mov	r3, #1
   24cec:	str	r3, [sp, #68]	; 0x44
   24cf0:	ldr	r3, [pc, #3708]	; 25b74 <_obstack_memory_used@@Base+0x15c8>
   24cf4:	str	r3, [sp, #72]	; 0x48
   24cf8:	mov	r8, #0
   24cfc:	ldr	r1, [sp, #56]	; 0x38
   24d00:	ldr	r2, [sp, #176]	; 0xb0
   24d04:	ldr	ip, [sp, #40]	; 0x28
   24d08:	ldr	lr, [sp, #176]	; 0xb0
   24d0c:	b	24880 <_obstack_memory_used@@Base+0x2d4>
   24d10:	ldr	r3, [sp, #40]	; 0x28
   24d14:	cmp	r3, #0
   24d18:	beq	25a10 <_obstack_memory_used@@Base+0x1464>
   24d1c:	str	r3, [sp, #56]	; 0x38
   24d20:	mov	r3, #1
   24d24:	str	r3, [sp, #68]	; 0x44
   24d28:	ldr	r3, [pc, #3656]	; 25b78 <_obstack_memory_used@@Base+0x15cc>
   24d2c:	b	24cf4 <_obstack_memory_used@@Base+0x748>
   24d30:	ldr	r3, [sp, #40]	; 0x28
   24d34:	cmp	r3, #0
   24d38:	mov	r3, #1
   24d3c:	streq	r3, [sp, #56]	; 0x38
   24d40:	beq	2598c <_obstack_memory_used@@Base+0x13e0>
   24d44:	str	r3, [sp, #68]	; 0x44
   24d48:	ldr	r3, [pc, #3620]	; 25b74 <_obstack_memory_used@@Base+0x15c8>
   24d4c:	mov	r8, #0
   24d50:	str	r3, [sp, #72]	; 0x48
   24d54:	b	24b9c <_obstack_memory_used@@Base+0x5f0>
   24d58:	ldr	r3, [sp, #24]
   24d5c:	ldr	r6, [sp, #48]	; 0x30
   24d60:	cmn	r3, #1
   24d64:	beq	253c0 <_obstack_memory_used@@Base+0xe14>
   24d68:	subs	r3, r3, #1
   24d6c:	movne	r3, #1
   24d70:	cmp	r3, #0
   24d74:	beq	25140 <_obstack_memory_used@@Base+0xb94>
   24d78:	ldr	r1, [sp, #52]	; 0x34
   24d7c:	mov	r7, r3
   24d80:	mov	r3, #0
   24d84:	str	r3, [sp, #32]
   24d88:	ldr	r3, [sp, #60]	; 0x3c
   24d8c:	orr	r2, r1, r3
   24d90:	ldr	r3, [sp, #40]	; 0x28
   24d94:	eor	r2, r2, #1
   24d98:	orr	r2, r3, r2
   24d9c:	tst	r2, #255	; 0xff
   24da0:	bne	256c4 <_obstack_memory_used@@Base+0x1118>
   24da4:	cmp	r6, #0
   24da8:	bne	24f84 <_obstack_memory_used@@Base+0x9d8>
   24dac:	ldr	r3, [sp, #36]	; 0x24
   24db0:	add	sl, sl, #1
   24db4:	and	r3, r3, r7
   24db8:	uxtb	r6, r3
   24dbc:	cmp	r6, #0
   24dc0:	beq	24dec <_obstack_memory_used@@Base+0x840>
   24dc4:	cmp	fp, r8
   24dc8:	movhi	r3, #39	; 0x27
   24dcc:	strbhi	r3, [r9, r8]
   24dd0:	add	r3, r8, #1
   24dd4:	cmp	fp, r3
   24dd8:	movhi	r2, #39	; 0x27
   24ddc:	add	r8, r8, #2
   24de0:	strbhi	r2, [r9, r3]
   24de4:	mov	r3, #0
   24de8:	str	r3, [sp, #36]	; 0x24
   24dec:	ldr	r2, [sp, #32]
   24df0:	cmp	r8, fp
   24df4:	ldr	r3, [sp, #28]
   24df8:	strbcc	r4, [r9, r8]
   24dfc:	cmp	r2, #0
   24e00:	moveq	r3, #0
   24e04:	str	r3, [sp, #28]
   24e08:	ldr	r3, [sp, #24]
   24e0c:	add	r8, r8, #1
   24e10:	cmn	r3, #1
   24e14:	bne	248ec <_obstack_memory_used@@Base+0x340>
   24e18:	ldr	r3, [sp, #44]	; 0x2c
   24e1c:	ldrb	r3, [r3, sl]
   24e20:	adds	r7, r3, #0
   24e24:	movne	r7, #1
   24e28:	cmp	r7, #0
   24e2c:	bne	248fc <_obstack_memory_used@@Base+0x350>
   24e30:	ldr	r3, [sp, #64]	; 0x40
   24e34:	cmp	r8, #0
   24e38:	movne	r3, #0
   24e3c:	andeq	r3, r3, #1
   24e40:	cmp	r3, #0
   24e44:	str	r3, [sp, #64]	; 0x40
   24e48:	bne	258ec <_obstack_memory_used@@Base+0x1340>
   24e4c:	ldr	r3, [sp, #40]	; 0x28
   24e50:	ldr	r2, [sp, #52]	; 0x34
   24e54:	eor	r3, r3, #1
   24e58:	ands	r2, r2, r3
   24e5c:	beq	25d18 <_obstack_memory_used@@Base+0x176c>
   24e60:	ldr	r3, [sp, #76]	; 0x4c
   24e64:	cmp	r3, #0
   24e68:	beq	25ce8 <_obstack_memory_used@@Base+0x173c>
   24e6c:	ldr	r3, [sp, #28]
   24e70:	cmp	r3, #0
   24e74:	bne	25ca4 <_obstack_memory_used@@Base+0x16f8>
   24e78:	ldr	r2, [sp, #84]	; 0x54
   24e7c:	clz	r3, fp
   24e80:	cmp	r2, #0
   24e84:	lsr	r3, r3, #5
   24e88:	moveq	r3, #0
   24e8c:	cmp	r3, #0
   24e90:	beq	25c44 <_obstack_memory_used@@Base+0x1698>
   24e94:	mov	fp, r2
   24e98:	str	r3, [sp, #76]	; 0x4c
   24e9c:	b	24828 <_obstack_memory_used@@Base+0x27c>
   24ea0:	ldr	r3, [sp, #176]	; 0xb0
   24ea4:	ldr	r6, [sp, #48]	; 0x30
   24ea8:	cmp	r3, #2
   24eac:	beq	253e4 <_obstack_memory_used@@Base+0xe38>
   24eb0:	ldr	r3, [sp, #88]	; 0x58
   24eb4:	cmp	r3, #0
   24eb8:	beq	25968 <_obstack_memory_used@@Base+0x13bc>
   24ebc:	mov	r3, #0
   24ec0:	add	sl, sl, #1
   24ec4:	ldr	r6, [sp, #36]	; 0x24
   24ec8:	str	r3, [sp, #32]
   24ecc:	mov	r4, #92	; 0x5c
   24ed0:	b	24dbc <_obstack_memory_used@@Base+0x810>
   24ed4:	ldr	r3, [sp, #176]	; 0xb0
   24ed8:	ldr	r6, [sp, #48]	; 0x30
   24edc:	cmp	r3, #2
   24ee0:	beq	25414 <_obstack_memory_used@@Base+0xe68>
   24ee4:	cmp	r3, #5
   24ee8:	bne	25978 <_obstack_memory_used@@Base+0x13cc>
   24eec:	ldr	r3, [sp, #100]	; 0x64
   24ef0:	cmp	r3, #0
   24ef4:	beq	259dc <_obstack_memory_used@@Base+0x1430>
   24ef8:	ldr	r2, [sp, #24]
   24efc:	add	r3, sl, #2
   24f00:	cmp	r2, r3
   24f04:	bls	24f14 <_obstack_memory_used@@Base+0x968>
   24f08:	ldrb	r4, [r5, #1]
   24f0c:	cmp	r4, #63	; 0x3f
   24f10:	beq	25b84 <_obstack_memory_used@@Base+0x15d8>
   24f14:	mov	r1, #0
   24f18:	str	r1, [sp, #32]
   24f1c:	mov	r4, #63	; 0x3f
   24f20:	b	24d88 <_obstack_memory_used@@Base+0x7dc>
   24f24:	ldr	r3, [sp, #176]	; 0xb0
   24f28:	ldr	r6, [sp, #48]	; 0x30
   24f2c:	cmp	r3, #2
   24f30:	beq	25440 <_obstack_memory_used@@Base+0xe94>
   24f34:	str	r7, [sp, #32]
   24f38:	str	r7, [sp, #76]	; 0x4c
   24f3c:	mov	r1, #0
   24f40:	mov	r4, #39	; 0x27
   24f44:	b	24d88 <_obstack_memory_used@@Base+0x7dc>
   24f48:	ldr	r6, [sp, #48]	; 0x30
   24f4c:	ldr	r1, [sp, #52]	; 0x34
   24f50:	str	r7, [sp, #32]
   24f54:	b	24d88 <_obstack_memory_used@@Base+0x7dc>
   24f58:	ldr	r6, [sp, #48]	; 0x30
   24f5c:	ldr	r1, [sp, #52]	; 0x34
   24f60:	mov	r4, #12
   24f64:	mov	r3, #102	; 0x66
   24f68:	ldr	r2, [sp, #56]	; 0x38
   24f6c:	cmp	r2, #0
   24f70:	streq	r2, [sp, #32]
   24f74:	beq	24d88 <_obstack_memory_used@@Base+0x7dc>
   24f78:	mov	r4, r3
   24f7c:	mov	r3, #0
   24f80:	str	r3, [sp, #32]
   24f84:	ldr	r3, [sp, #40]	; 0x28
   24f88:	cmp	r3, #0
   24f8c:	bne	256fc <_obstack_memory_used@@Base+0x1150>
   24f90:	ldr	r3, [sp, #36]	; 0x24
   24f94:	eor	r3, r3, #1
   24f98:	and	r3, r3, r1
   24f9c:	ands	r3, r3, #255	; 0xff
   24fa0:	beq	24fd8 <_obstack_memory_used@@Base+0xa2c>
   24fa4:	cmp	fp, r8
   24fa8:	movhi	r2, #39	; 0x27
   24fac:	strbhi	r2, [r9, r8]
   24fb0:	add	r2, r8, #1
   24fb4:	cmp	fp, r2
   24fb8:	movhi	r1, #36	; 0x24
   24fbc:	strbhi	r1, [r9, r2]
   24fc0:	add	r2, r8, #2
   24fc4:	cmp	fp, r2
   24fc8:	add	r8, r8, #3
   24fcc:	movhi	r1, #39	; 0x27
   24fd0:	strbhi	r1, [r9, r2]
   24fd4:	str	r3, [sp, #36]	; 0x24
   24fd8:	cmp	fp, r8
   24fdc:	movhi	r3, #92	; 0x5c
   24fe0:	strbhi	r3, [r9, r8]
   24fe4:	add	sl, sl, #1
   24fe8:	add	r8, r8, #1
   24fec:	b	24dec <_obstack_memory_used@@Base+0x840>
   24ff0:	ldr	r6, [sp, #48]	; 0x30
   24ff4:	mov	r4, #10
   24ff8:	mov	r3, #110	; 0x6e
   24ffc:	ldr	r2, [sp, #64]	; 0x40
   25000:	cmp	r2, #0
   25004:	bne	25a84 <_obstack_memory_used@@Base+0x14d8>
   25008:	ldr	r1, [sp, #52]	; 0x34
   2500c:	b	24f68 <_obstack_memory_used@@Base+0x9bc>
   25010:	ldr	r6, [sp, #48]	; 0x30
   25014:	ldr	r1, [sp, #52]	; 0x34
   25018:	mov	r3, #116	; 0x74
   2501c:	b	24f68 <_obstack_memory_used@@Base+0x9bc>
   25020:	ldr	r6, [sp, #48]	; 0x30
   25024:	ldr	r1, [sp, #52]	; 0x34
   25028:	mov	r4, #11
   2502c:	mov	r3, #118	; 0x76
   25030:	b	24f68 <_obstack_memory_used@@Base+0x9bc>
   25034:	ldr	r6, [sp, #48]	; 0x30
   25038:	ldr	r1, [sp, #52]	; 0x34
   2503c:	mov	r4, #8
   25040:	mov	r3, #98	; 0x62
   25044:	b	24f68 <_obstack_memory_used@@Base+0x9bc>
   25048:	ldr	r6, [sp, #48]	; 0x30
   2504c:	ldr	r1, [sp, #52]	; 0x34
   25050:	mov	r4, #7
   25054:	mov	r3, #97	; 0x61
   25058:	b	24f68 <_obstack_memory_used@@Base+0x9bc>
   2505c:	ldr	r3, [sp, #56]	; 0x38
   25060:	ldr	r6, [sp, #48]	; 0x30
   25064:	cmp	r3, #0
   25068:	beq	2552c <_obstack_memory_used@@Base+0xf80>
   2506c:	ldr	r3, [sp, #40]	; 0x28
   25070:	cmp	r3, #0
   25074:	bne	25b60 <_obstack_memory_used@@Base+0x15b4>
   25078:	ldr	r3, [sp, #36]	; 0x24
   2507c:	ldr	r2, [sp, #52]	; 0x34
   25080:	eor	r3, r3, #1
   25084:	ands	r3, r2, r3
   25088:	moveq	r2, r8
   2508c:	beq	250c4 <_obstack_memory_used@@Base+0xb18>
   25090:	cmp	fp, r8
   25094:	movhi	r2, #39	; 0x27
   25098:	strbhi	r2, [r9, r8]
   2509c:	add	r2, r8, #1
   250a0:	cmp	fp, r2
   250a4:	movhi	r1, #36	; 0x24
   250a8:	strbhi	r1, [r9, r2]
   250ac:	add	r2, r8, #2
   250b0:	cmp	fp, r2
   250b4:	movhi	r1, #39	; 0x27
   250b8:	strbhi	r1, [r9, r2]
   250bc:	add	r2, r8, #3
   250c0:	str	r3, [sp, #36]	; 0x24
   250c4:	cmp	fp, r2
   250c8:	movhi	r3, #92	; 0x5c
   250cc:	strbhi	r3, [r9, r2]
   250d0:	ldr	r3, [sp, #92]	; 0x5c
   250d4:	add	r8, r2, #1
   250d8:	cmp	r3, #0
   250dc:	beq	25a60 <_obstack_memory_used@@Base+0x14b4>
   250e0:	ldr	r1, [sp, #24]
   250e4:	add	r3, sl, #1
   250e8:	cmp	r1, r3
   250ec:	bls	25124 <_obstack_memory_used@@Base+0xb78>
   250f0:	ldr	r1, [sp, #44]	; 0x2c
   250f4:	ldrb	r3, [r1, r3]
   250f8:	sub	r3, r3, #48	; 0x30
   250fc:	cmp	r3, #9
   25100:	bhi	25124 <_obstack_memory_used@@Base+0xb78>
   25104:	cmp	fp, r8
   25108:	movhi	r3, #48	; 0x30
   2510c:	strbhi	r3, [r9, r8]
   25110:	add	r3, r2, #2
   25114:	cmp	fp, r3
   25118:	add	r8, r2, #3
   2511c:	movhi	r1, #48	; 0x30
   25120:	strbhi	r1, [r9, r3]
   25124:	ldr	r3, [sp, #40]	; 0x28
   25128:	ldr	r1, [sp, #52]	; 0x34
   2512c:	mov	r7, r3
   25130:	str	r3, [sp, #32]
   25134:	mov	r4, #48	; 0x30
   25138:	b	24d88 <_obstack_memory_used@@Base+0x7dc>
   2513c:	ldr	r6, [sp, #48]	; 0x30
   25140:	cmp	sl, #0
   25144:	streq	r7, [sp, #32]
   25148:	beq	25168 <_obstack_memory_used@@Base+0xbbc>
   2514c:	mov	r3, #0
   25150:	ldr	r1, [sp, #52]	; 0x34
   25154:	str	r3, [sp, #32]
   25158:	b	24d88 <_obstack_memory_used@@Base+0x7dc>
   2515c:	ldr	r6, [sp, #48]	; 0x30
   25160:	mov	r3, #0
   25164:	str	r3, [sp, #32]
   25168:	ldr	r3, [sp, #64]	; 0x40
   2516c:	cmp	r3, #0
   25170:	bne	258ec <_obstack_memory_used@@Base+0x1340>
   25174:	ldr	r1, [sp, #52]	; 0x34
   25178:	b	24d88 <_obstack_memory_used@@Base+0x7dc>
   2517c:	ldr	r3, [sp, #48]	; 0x30
   25180:	mov	r6, r3
   25184:	str	r3, [sp, #32]
   25188:	b	25168 <_obstack_memory_used@@Base+0xbbc>
   2518c:	ldr	r6, [sp, #48]	; 0x30
   25190:	mov	r4, #13
   25194:	mov	r3, #114	; 0x72
   25198:	b	24ffc <_obstack_memory_used@@Base+0xa50>
   2519c:	ldr	r3, [sp, #44]	; 0x2c
   251a0:	add	r5, r3, sl
   251a4:	ldrb	r4, [r5]
   251a8:	cmp	r4, #126	; 0x7e
   251ac:	ldrls	pc, [pc, r4, lsl #2]
   251b0:	b	2554c <_obstack_memory_used@@Base+0xfa0>
   251b4:	andeq	r5, r2, ip, lsl r5
   251b8:	andeq	r5, r2, ip, asr #10
   251bc:	andeq	r5, r2, ip, asr #10
   251c0:	andeq	r5, r2, ip, asr #10
   251c4:	andeq	r5, r2, ip, asr #10
   251c8:	andeq	r5, r2, ip, asr #10
   251cc:	andeq	r5, r2, ip, asr #10
   251d0:	andeq	r5, r2, r4, lsl r5
   251d4:	andeq	r5, r2, ip, lsl #10
   251d8:	andeq	r5, r2, r0, lsl #10
   251dc:	strdeq	r5, [r2], -r8
   251e0:	strdeq	r5, [r2], -r0
   251e4:	andeq	r5, r2, r8, ror #9
   251e8:	andeq	r5, r2, r0, ror #9
   251ec:	andeq	r5, r2, ip, asr #10
   251f0:	andeq	r5, r2, ip, asr #10
   251f4:	andeq	r5, r2, ip, asr #10
   251f8:	andeq	r5, r2, ip, asr #10
   251fc:	andeq	r5, r2, ip, asr #10
   25200:	andeq	r5, r2, ip, asr #10
   25204:	andeq	r5, r2, ip, asr #10
   25208:	andeq	r5, r2, ip, asr #10
   2520c:	andeq	r5, r2, ip, asr #10
   25210:	andeq	r5, r2, ip, asr #10
   25214:	andeq	r5, r2, ip, asr #10
   25218:	andeq	r5, r2, ip, asr #10
   2521c:	andeq	r5, r2, ip, asr #10
   25220:	andeq	r5, r2, ip, asr #10
   25224:	andeq	r5, r2, ip, asr #10
   25228:	andeq	r5, r2, ip, asr #10
   2522c:	andeq	r5, r2, ip, asr #10
   25230:	andeq	r5, r2, ip, asr #10
   25234:	ldrdeq	r5, [r2], -r4
   25238:	andeq	r5, r2, ip, asr #9
   2523c:	andeq	r5, r2, ip, asr #9
   25240:	andeq	r5, r2, r4, asr #9
   25244:	andeq	r5, r2, ip, asr #9
   25248:			; <UNDEFINED> instruction: 0x000254bc
   2524c:	andeq	r5, r2, ip, asr #9
   25250:	andeq	r5, r2, r0, lsr r4
   25254:	andeq	r5, r2, ip, asr #9
   25258:	andeq	r5, r2, ip, asr #9
   2525c:	andeq	r5, r2, ip, asr #9
   25260:			; <UNDEFINED> instruction: 0x000254bc
   25264:			; <UNDEFINED> instruction: 0x000254bc
   25268:			; <UNDEFINED> instruction: 0x000254bc
   2526c:			; <UNDEFINED> instruction: 0x000254bc
   25270:			; <UNDEFINED> instruction: 0x000254bc
   25274:			; <UNDEFINED> instruction: 0x000254bc
   25278:			; <UNDEFINED> instruction: 0x000254bc
   2527c:			; <UNDEFINED> instruction: 0x000254bc
   25280:			; <UNDEFINED> instruction: 0x000254bc
   25284:			; <UNDEFINED> instruction: 0x000254bc
   25288:			; <UNDEFINED> instruction: 0x000254bc
   2528c:			; <UNDEFINED> instruction: 0x000254bc
   25290:			; <UNDEFINED> instruction: 0x000254bc
   25294:			; <UNDEFINED> instruction: 0x000254bc
   25298:			; <UNDEFINED> instruction: 0x000254bc
   2529c:			; <UNDEFINED> instruction: 0x000254bc
   252a0:	andeq	r5, r2, ip, asr #9
   252a4:	andeq	r5, r2, ip, asr #9
   252a8:	andeq	r5, r2, ip, asr #9
   252ac:	andeq	r5, r2, ip, asr #9
   252b0:	andeq	r5, r2, r4, lsl #8
   252b4:	andeq	r5, r2, ip, asr #10
   252b8:			; <UNDEFINED> instruction: 0x000254bc
   252bc:			; <UNDEFINED> instruction: 0x000254bc
   252c0:			; <UNDEFINED> instruction: 0x000254bc
   252c4:			; <UNDEFINED> instruction: 0x000254bc
   252c8:			; <UNDEFINED> instruction: 0x000254bc
   252cc:			; <UNDEFINED> instruction: 0x000254bc
   252d0:			; <UNDEFINED> instruction: 0x000254bc
   252d4:			; <UNDEFINED> instruction: 0x000254bc
   252d8:			; <UNDEFINED> instruction: 0x000254bc
   252dc:			; <UNDEFINED> instruction: 0x000254bc
   252e0:			; <UNDEFINED> instruction: 0x000254bc
   252e4:			; <UNDEFINED> instruction: 0x000254bc
   252e8:			; <UNDEFINED> instruction: 0x000254bc
   252ec:			; <UNDEFINED> instruction: 0x000254bc
   252f0:			; <UNDEFINED> instruction: 0x000254bc
   252f4:			; <UNDEFINED> instruction: 0x000254bc
   252f8:			; <UNDEFINED> instruction: 0x000254bc
   252fc:			; <UNDEFINED> instruction: 0x000254bc
   25300:			; <UNDEFINED> instruction: 0x000254bc
   25304:			; <UNDEFINED> instruction: 0x000254bc
   25308:			; <UNDEFINED> instruction: 0x000254bc
   2530c:			; <UNDEFINED> instruction: 0x000254bc
   25310:			; <UNDEFINED> instruction: 0x000254bc
   25314:			; <UNDEFINED> instruction: 0x000254bc
   25318:			; <UNDEFINED> instruction: 0x000254bc
   2531c:			; <UNDEFINED> instruction: 0x000254bc
   25320:	andeq	r5, r2, ip, asr #9
   25324:	ldrdeq	r5, [r2], -r4
   25328:			; <UNDEFINED> instruction: 0x000254bc
   2532c:	andeq	r5, r2, ip, asr #9
   25330:			; <UNDEFINED> instruction: 0x000254bc
   25334:	andeq	r5, r2, ip, asr #9
   25338:			; <UNDEFINED> instruction: 0x000254bc
   2533c:			; <UNDEFINED> instruction: 0x000254bc
   25340:			; <UNDEFINED> instruction: 0x000254bc
   25344:			; <UNDEFINED> instruction: 0x000254bc
   25348:			; <UNDEFINED> instruction: 0x000254bc
   2534c:			; <UNDEFINED> instruction: 0x000254bc
   25350:			; <UNDEFINED> instruction: 0x000254bc
   25354:			; <UNDEFINED> instruction: 0x000254bc
   25358:			; <UNDEFINED> instruction: 0x000254bc
   2535c:			; <UNDEFINED> instruction: 0x000254bc
   25360:			; <UNDEFINED> instruction: 0x000254bc
   25364:			; <UNDEFINED> instruction: 0x000254bc
   25368:			; <UNDEFINED> instruction: 0x000254bc
   2536c:			; <UNDEFINED> instruction: 0x000254bc
   25370:			; <UNDEFINED> instruction: 0x000254bc
   25374:			; <UNDEFINED> instruction: 0x000254bc
   25378:			; <UNDEFINED> instruction: 0x000254bc
   2537c:			; <UNDEFINED> instruction: 0x000254bc
   25380:			; <UNDEFINED> instruction: 0x000254bc
   25384:			; <UNDEFINED> instruction: 0x000254bc
   25388:			; <UNDEFINED> instruction: 0x000254bc
   2538c:			; <UNDEFINED> instruction: 0x000254bc
   25390:			; <UNDEFINED> instruction: 0x000254bc
   25394:			; <UNDEFINED> instruction: 0x000254bc
   25398:			; <UNDEFINED> instruction: 0x000254bc
   2539c:			; <UNDEFINED> instruction: 0x000254bc
   253a0:			; <UNDEFINED> instruction: 0x000253b0
   253a4:	andeq	r5, r2, ip, asr #9
   253a8:			; <UNDEFINED> instruction: 0x000253b0
   253ac:	andeq	r5, r2, r4, asr #9
   253b0:	ldr	r3, [sp, #24]
   253b4:	mov	r6, #0
   253b8:	cmn	r3, #1
   253bc:	bne	24d68 <_obstack_memory_used@@Base+0x7bc>
   253c0:	ldr	r3, [sp, #44]	; 0x2c
   253c4:	ldrb	r3, [r3, #1]
   253c8:	adds	r3, r3, #0
   253cc:	movne	r3, #1
   253d0:	b	24d70 <_obstack_memory_used@@Base+0x7c4>
   253d4:	ldr	r3, [sp, #176]	; 0xb0
   253d8:	mov	r6, #0
   253dc:	cmp	r3, #2
   253e0:	bne	24eb0 <_obstack_memory_used@@Base+0x904>
   253e4:	ldr	r3, [sp, #64]	; 0x40
   253e8:	cmp	r3, #0
   253ec:	bne	25c24 <_obstack_memory_used@@Base+0x1678>
   253f0:	add	sl, sl, #1
   253f4:	ldr	r6, [sp, #36]	; 0x24
   253f8:	str	r3, [sp, #32]
   253fc:	mov	r4, #92	; 0x5c
   25400:	b	24dbc <_obstack_memory_used@@Base+0x810>
   25404:	ldr	r3, [sp, #176]	; 0xb0
   25408:	mov	r6, #0
   2540c:	cmp	r3, #2
   25410:	bne	24ee4 <_obstack_memory_used@@Base+0x938>
   25414:	ldr	r3, [sp, #40]	; 0x28
   25418:	cmp	r3, #0
   2541c:	bne	25700 <_obstack_memory_used@@Base+0x1154>
   25420:	mov	r1, r7
   25424:	str	r3, [sp, #32]
   25428:	mov	r4, #63	; 0x3f
   2542c:	b	24d88 <_obstack_memory_used@@Base+0x7dc>
   25430:	ldr	r3, [sp, #176]	; 0xb0
   25434:	mov	r6, #0
   25438:	cmp	r3, #2
   2543c:	bne	24f34 <_obstack_memory_used@@Base+0x988>
   25440:	ldr	r3, [sp, #64]	; 0x40
   25444:	cmp	r3, #0
   25448:	bne	25c24 <_obstack_memory_used@@Base+0x1678>
   2544c:	ldr	r2, [sp, #84]	; 0x54
   25450:	adds	r3, fp, #0
   25454:	movne	r3, #1
   25458:	cmp	r2, #0
   2545c:	movne	r3, #0
   25460:	cmp	r3, #0
   25464:	strne	fp, [sp, #84]	; 0x54
   25468:	movne	fp, #0
   2546c:	bne	2549c <_obstack_memory_used@@Base+0xef0>
   25470:	cmp	fp, r8
   25474:	movhi	r3, #39	; 0x27
   25478:	strbhi	r3, [r9, r8]
   2547c:	add	r3, r8, #1
   25480:	cmp	fp, r3
   25484:	movhi	r2, #92	; 0x5c
   25488:	strbhi	r2, [r9, r3]
   2548c:	add	r3, r8, #2
   25490:	cmp	fp, r3
   25494:	movhi	r2, #39	; 0x27
   25498:	strbhi	r2, [r9, r3]
   2549c:	ldr	r3, [sp, #64]	; 0x40
   254a0:	add	r8, r8, #3
   254a4:	mov	r1, r7
   254a8:	str	r7, [sp, #32]
   254ac:	str	r7, [sp, #76]	; 0x4c
   254b0:	str	r3, [sp, #36]	; 0x24
   254b4:	mov	r4, #39	; 0x27
   254b8:	b	24d88 <_obstack_memory_used@@Base+0x7dc>
   254bc:	mov	r6, #0
   254c0:	b	24f4c <_obstack_memory_used@@Base+0x9a0>
   254c4:	mov	r6, #0
   254c8:	b	25140 <_obstack_memory_used@@Base+0xb94>
   254cc:	mov	r6, #0
   254d0:	b	25160 <_obstack_memory_used@@Base+0xbb4>
   254d4:	str	r7, [sp, #32]
   254d8:	mov	r6, #0
   254dc:	b	25168 <_obstack_memory_used@@Base+0xbbc>
   254e0:	mov	r6, #0
   254e4:	b	25190 <_obstack_memory_used@@Base+0xbe4>
   254e8:	mov	r6, #0
   254ec:	b	24f5c <_obstack_memory_used@@Base+0x9b0>
   254f0:	mov	r6, #0
   254f4:	b	25024 <_obstack_memory_used@@Base+0xa78>
   254f8:	mov	r6, #0
   254fc:	b	24ff4 <_obstack_memory_used@@Base+0xa48>
   25500:	mov	r6, #0
   25504:	mov	r3, #116	; 0x74
   25508:	b	24ffc <_obstack_memory_used@@Base+0xa50>
   2550c:	mov	r6, #0
   25510:	b	25038 <_obstack_memory_used@@Base+0xa8c>
   25514:	mov	r6, #0
   25518:	b	2504c <_obstack_memory_used@@Base+0xaa0>
   2551c:	ldr	r3, [sp, #56]	; 0x38
   25520:	mov	r6, #0
   25524:	cmp	r3, #0
   25528:	bne	2506c <_obstack_memory_used@@Base+0xac0>
   2552c:	ldr	r3, [sp, #96]	; 0x60
   25530:	cmp	r3, #0
   25534:	addne	sl, sl, #1
   25538:	bne	248e0 <_obstack_memory_used@@Base+0x334>
   2553c:	ldr	r1, [sp, #52]	; 0x34
   25540:	str	r3, [sp, #32]
   25544:	mov	r4, r3
   25548:	b	24d88 <_obstack_memory_used@@Base+0x7dc>
   2554c:	mov	r6, #0
   25550:	ldr	r3, [sp, #80]	; 0x50
   25554:	cmp	r3, #1
   25558:	bne	25748 <_obstack_memory_used@@Base+0x119c>
   2555c:	bl	11b58 <__ctype_b_loc@plt>
   25560:	ldr	r2, [sp, #80]	; 0x50
   25564:	sxth	r3, r4
   25568:	mov	r1, r2
   2556c:	lsl	r3, r3, #1
   25570:	ldr	r2, [r0]
   25574:	ldrh	r3, [r2, r3]
   25578:	and	r3, r3, #16384	; 0x4000
   2557c:	cmp	r3, #0
   25580:	movne	r3, #1
   25584:	moveq	r3, #0
   25588:	str	r3, [sp, #32]
   2558c:	moveq	r3, #1
   25590:	movne	r3, #0
   25594:	ldr	r2, [sp, #56]	; 0x38
   25598:	and	r3, r3, r2
   2559c:	ands	r3, r3, #255	; 0xff
   255a0:	beq	25174 <_obstack_memory_used@@Base+0xbc8>
   255a4:	add	r1, sl, r1
   255a8:	mov	r0, #0
   255ac:	ldr	r7, [sp, #40]	; 0x28
   255b0:	ldr	r2, [sp, #36]	; 0x24
   255b4:	ldr	lr, [sp, #52]	; 0x34
   255b8:	b	25668 <_obstack_memory_used@@Base+0x10bc>
   255bc:	cmp	r7, #0
   255c0:	bne	259bc <_obstack_memory_used@@Base+0x1410>
   255c4:	eor	r0, r2, #1
   255c8:	ands	r0, lr, r0
   255cc:	beq	25604 <_obstack_memory_used@@Base+0x1058>
   255d0:	cmp	fp, r8
   255d4:	movhi	r2, #39	; 0x27
   255d8:	strbhi	r2, [r9, r8]
   255dc:	add	r2, r8, #1
   255e0:	cmp	fp, r2
   255e4:	movhi	ip, #36	; 0x24
   255e8:	strbhi	ip, [r9, r2]
   255ec:	add	r2, r8, #2
   255f0:	cmp	fp, r2
   255f4:	movhi	ip, #39	; 0x27
   255f8:	strbhi	ip, [r9, r2]
   255fc:	add	r8, r8, #3
   25600:	mov	r2, r0
   25604:	cmp	fp, r8
   25608:	movhi	r0, #92	; 0x5c
   2560c:	strbhi	r0, [r9, r8]
   25610:	add	r0, r8, #1
   25614:	cmp	fp, r0
   25618:	lsrhi	ip, r4, #6
   2561c:	addhi	ip, ip, #48	; 0x30
   25620:	strbhi	ip, [r9, r0]
   25624:	add	ip, r8, #2
   25628:	cmp	fp, ip
   2562c:	lsrhi	r0, r4, #3
   25630:	andhi	r0, r0, #7
   25634:	addhi	r0, r0, #48	; 0x30
   25638:	add	sl, sl, #1
   2563c:	strbhi	r0, [r9, ip]
   25640:	and	r4, r4, #7
   25644:	cmp	sl, r1
   25648:	add	r4, r4, #48	; 0x30
   2564c:	add	r8, r8, #3
   25650:	bcs	259d4 <_obstack_memory_used@@Base+0x1428>
   25654:	mov	r0, r3
   25658:	cmp	fp, r8
   2565c:	strbhi	r4, [r9, r8]
   25660:	ldrb	r4, [r5, #1]!
   25664:	add	r8, r8, #1
   25668:	cmp	r3, #0
   2566c:	bne	255bc <_obstack_memory_used@@Base+0x1010>
   25670:	cmp	r6, #0
   25674:	bne	25718 <_obstack_memory_used@@Base+0x116c>
   25678:	eor	r6, r0, #1
   2567c:	and	r6, r6, r2
   25680:	add	sl, sl, #1
   25684:	cmp	r1, sl
   25688:	uxtb	r6, r6
   2568c:	bls	25740 <_obstack_memory_used@@Base+0x1194>
   25690:	cmp	r6, #0
   25694:	beq	25658 <_obstack_memory_used@@Base+0x10ac>
   25698:	cmp	fp, r8
   2569c:	movhi	r2, #39	; 0x27
   256a0:	strbhi	r2, [r9, r8]
   256a4:	add	r2, r8, #1
   256a8:	cmp	fp, r2
   256ac:	movhi	ip, #39	; 0x27
   256b0:	strbhi	ip, [r9, r2]
   256b4:	add	r8, r8, #2
   256b8:	mov	r6, r3
   256bc:	mov	r2, r3
   256c0:	b	25658 <_obstack_memory_used@@Base+0x10ac>
   256c4:	ldr	r3, [sp, #184]	; 0xb8
   256c8:	cmp	r3, #0
   256cc:	beq	24da4 <_obstack_memory_used@@Base+0x7f8>
   256d0:	lsr	r2, r4, #5
   256d4:	mov	r0, r3
   256d8:	uxtb	r2, r2
   256dc:	and	r3, r4, #31
   256e0:	ldr	r2, [r0, r2, lsl #2]
   256e4:	lsr	r3, r2, r3
   256e8:	tst	r3, #1
   256ec:	beq	24da4 <_obstack_memory_used@@Base+0x7f8>
   256f0:	ldr	r3, [sp, #40]	; 0x28
   256f4:	cmp	r3, #0
   256f8:	beq	24f90 <_obstack_memory_used@@Base+0x9e4>
   256fc:	mov	r3, r1
   25700:	str	r3, [sp, #64]	; 0x40
   25704:	mov	sl, r9
   25708:	ldr	r3, [sp, #56]	; 0x38
   2570c:	mov	r9, fp
   25710:	ldr	r2, [sp, #64]	; 0x40
   25714:	b	25904 <_obstack_memory_used@@Base+0x1358>
   25718:	cmp	fp, r8
   2571c:	eor	r6, r0, #1
   25720:	movhi	ip, #92	; 0x5c
   25724:	and	r6, r6, r2
   25728:	add	sl, sl, #1
   2572c:	strbhi	ip, [r9, r8]
   25730:	cmp	r1, sl
   25734:	add	r8, r8, #1
   25738:	uxtb	r6, r6
   2573c:	bhi	25690 <_obstack_memory_used@@Base+0x10e4>
   25740:	str	r2, [sp, #36]	; 0x24
   25744:	b	24dbc <_obstack_memory_used@@Base+0x810>
   25748:	ldr	r3, [sp, #24]
   2574c:	cmn	r3, #1
   25750:	mov	r3, #0
   25754:	str	r3, [sp, #128]	; 0x80
   25758:	str	r3, [sp, #132]	; 0x84
   2575c:	beq	25a50 <_obstack_memory_used@@Base+0x14a4>
   25760:	mov	r2, r7
   25764:	mov	r3, #0
   25768:	str	r7, [sp, #104]	; 0x68
   2576c:	str	r5, [sp, #116]	; 0x74
   25770:	mov	r7, r3
   25774:	mov	r5, r2
   25778:	str	r4, [sp, #32]
   2577c:	str	r6, [sp, #108]	; 0x6c
   25780:	str	r8, [sp, #112]	; 0x70
   25784:	ldr	r3, [sp, #44]	; 0x2c
   25788:	add	r6, sl, r7
   2578c:	add	r4, r3, r6
   25790:	ldr	r3, [sp, #24]
   25794:	mov	r1, r4
   25798:	sub	r2, r3, r6
   2579c:	add	r0, sp, #124	; 0x7c
   257a0:	add	r3, sp, #128	; 0x80
   257a4:	bl	21748 <__assert_fail@plt+0xf9d4>
   257a8:	subs	r8, r0, #0
   257ac:	beq	25b34 <_obstack_memory_used@@Base+0x1588>
   257b0:	cmn	r8, #1
   257b4:	beq	25b0c <_obstack_memory_used@@Base+0x1560>
   257b8:	cmn	r8, #2
   257bc:	beq	25aa4 <_obstack_memory_used@@Base+0x14f8>
   257c0:	ldr	r3, [sp, #64]	; 0x40
   257c4:	cmp	r3, #0
   257c8:	beq	25888 <_obstack_memory_used@@Base+0x12dc>
   257cc:	cmp	r8, #1
   257d0:	beq	25888 <_obstack_memory_used@@Base+0x12dc>
   257d4:	sub	r3, r8, #1
   257d8:	add	r6, r3, r6
   257dc:	ldr	r3, [sp, #44]	; 0x2c
   257e0:	add	r6, r3, r6
   257e4:	ldrb	r3, [r4, #1]!
   257e8:	sub	r3, r3, #91	; 0x5b
   257ec:	cmp	r3, #33	; 0x21
   257f0:	ldrls	pc, [pc, r3, lsl #2]
   257f4:	b	25880 <_obstack_memory_used@@Base+0x12d4>
   257f8:	andeq	r5, r2, ip, ror #17
   257fc:	andeq	r5, r2, ip, ror #17
   25800:	andeq	r5, r2, r0, lsl #17
   25804:	andeq	r5, r2, ip, ror #17
   25808:	andeq	r5, r2, r0, lsl #17
   2580c:	andeq	r5, r2, ip, ror #17
   25810:	andeq	r5, r2, r0, lsl #17
   25814:	andeq	r5, r2, r0, lsl #17
   25818:	andeq	r5, r2, r0, lsl #17
   2581c:	andeq	r5, r2, r0, lsl #17
   25820:	andeq	r5, r2, r0, lsl #17
   25824:	andeq	r5, r2, r0, lsl #17
   25828:	andeq	r5, r2, r0, lsl #17
   2582c:	andeq	r5, r2, r0, lsl #17
   25830:	andeq	r5, r2, r0, lsl #17
   25834:	andeq	r5, r2, r0, lsl #17
   25838:	andeq	r5, r2, r0, lsl #17
   2583c:	andeq	r5, r2, r0, lsl #17
   25840:	andeq	r5, r2, r0, lsl #17
   25844:	andeq	r5, r2, r0, lsl #17
   25848:	andeq	r5, r2, r0, lsl #17
   2584c:	andeq	r5, r2, r0, lsl #17
   25850:	andeq	r5, r2, r0, lsl #17
   25854:	andeq	r5, r2, r0, lsl #17
   25858:	andeq	r5, r2, r0, lsl #17
   2585c:	andeq	r5, r2, r0, lsl #17
   25860:	andeq	r5, r2, r0, lsl #17
   25864:	andeq	r5, r2, r0, lsl #17
   25868:	andeq	r5, r2, r0, lsl #17
   2586c:	andeq	r5, r2, r0, lsl #17
   25870:	andeq	r5, r2, r0, lsl #17
   25874:	andeq	r5, r2, r0, lsl #17
   25878:	andeq	r5, r2, r0, lsl #17
   2587c:	andeq	r5, r2, ip, ror #17
   25880:	cmp	r6, r4
   25884:	bne	257e4 <_obstack_memory_used@@Base+0x1238>
   25888:	ldr	r0, [sp, #124]	; 0x7c
   2588c:	bl	119f0 <iswprint@plt>
   25890:	add	r7, r7, r8
   25894:	cmp	r0, #0
   25898:	add	r0, sp, #128	; 0x80
   2589c:	moveq	r5, #0
   258a0:	bl	11948 <mbsinit@plt>
   258a4:	cmp	r0, #0
   258a8:	beq	25784 <_obstack_memory_used@@Base+0x11d8>
   258ac:	ldr	r4, [sp, #32]
   258b0:	str	r5, [sp, #32]
   258b4:	ldr	r3, [sp, #32]
   258b8:	mov	r1, r7
   258bc:	eor	r3, r3, #1
   258c0:	ldr	r7, [sp, #104]	; 0x68
   258c4:	ldr	r6, [sp, #108]	; 0x6c
   258c8:	ldr	r8, [sp, #112]	; 0x70
   258cc:	ldr	r5, [sp, #116]	; 0x74
   258d0:	uxtb	r3, r3
   258d4:	cmp	r1, #1
   258d8:	bls	25594 <_obstack_memory_used@@Base+0xfe8>
   258dc:	ldr	r2, [sp, #56]	; 0x38
   258e0:	and	r3, r3, r2
   258e4:	uxtb	r3, r3
   258e8:	b	255a4 <_obstack_memory_used@@Base+0xff8>
   258ec:	mov	r3, #2
   258f0:	str	r3, [sp, #176]	; 0xb0
   258f4:	ldr	r2, [sp, #64]	; 0x40
   258f8:	ldr	r3, [sp, #56]	; 0x38
   258fc:	mov	sl, r9
   25900:	mov	r9, fp
   25904:	and	r3, r3, r2
   25908:	tst	r3, #255	; 0xff
   2590c:	ldr	r3, [sp, #176]	; 0xb0
   25910:	movne	r3, #4
   25914:	str	r3, [sp, #176]	; 0xb0
   25918:	ldr	r3, [sp, #180]	; 0xb4
   2591c:	mov	ip, #0
   25920:	bic	r3, r3, #2
   25924:	str	r3, [sp, #4]
   25928:	ldr	r3, [sp, #192]	; 0xc0
   2592c:	ldr	r2, [sp, #44]	; 0x2c
   25930:	str	r3, [sp, #16]
   25934:	ldr	r3, [sp, #188]	; 0xbc
   25938:	mov	r1, r9
   2593c:	str	r3, [sp, #12]
   25940:	ldr	r3, [sp, #176]	; 0xb0
   25944:	mov	r0, sl
   25948:	str	r3, [sp]
   2594c:	str	ip, [sp, #8]
   25950:	ldr	r3, [sp, #24]
   25954:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   25958:	mov	fp, r0
   2595c:	mov	r0, fp
   25960:	add	sp, sp, #140	; 0x8c
   25964:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25968:	mov	r4, #92	; 0x5c
   2596c:	mov	r1, #0
   25970:	mov	r3, r4
   25974:	b	24f68 <_obstack_memory_used@@Base+0x9bc>
   25978:	mov	r3, #0
   2597c:	ldr	r1, [sp, #52]	; 0x34
   25980:	str	r3, [sp, #32]
   25984:	mov	r4, #63	; 0x3f
   25988:	b	24d88 <_obstack_memory_used@@Base+0x7dc>
   2598c:	cmp	fp, #0
   25990:	beq	259ec <_obstack_memory_used@@Base+0x1440>
   25994:	mov	r3, #39	; 0x27
   25998:	strb	r3, [r9]
   2599c:	mov	r3, #0
   259a0:	str	r3, [sp, #40]	; 0x28
   259a4:	mov	r3, #1
   259a8:	str	r3, [sp, #68]	; 0x44
   259ac:	ldr	r3, [pc, #448]	; 25b74 <_obstack_memory_used@@Base+0x15c8>
   259b0:	mov	r8, #1
   259b4:	str	r3, [sp, #72]	; 0x48
   259b8:	b	24b9c <_obstack_memory_used@@Base+0x5f0>
   259bc:	ldr	r3, [sp, #40]	; 0x28
   259c0:	mov	sl, r9
   259c4:	str	r3, [sp, #56]	; 0x38
   259c8:	mov	r9, fp
   259cc:	ldr	r2, [sp, #64]	; 0x40
   259d0:	b	25904 <_obstack_memory_used@@Base+0x1358>
   259d4:	str	r2, [sp, #36]	; 0x24
   259d8:	b	24dec <_obstack_memory_used@@Base+0x840>
   259dc:	mov	r1, #0
   259e0:	str	r3, [sp, #32]
   259e4:	mov	r4, #63	; 0x3f
   259e8:	b	24d88 <_obstack_memory_used@@Base+0x7dc>
   259ec:	ldr	r3, [pc, #384]	; 25b74 <_obstack_memory_used@@Base+0x15c8>
   259f0:	str	r3, [sp, #72]	; 0x48
   259f4:	mov	r3, #0
   259f8:	str	r3, [sp, #40]	; 0x28
   259fc:	mov	r3, #1
   25a00:	str	r3, [sp, #68]	; 0x44
   25a04:	mov	r8, r3
   25a08:	b	24b9c <_obstack_memory_used@@Base+0x5f0>
   25a0c:	bl	11d2c <abort@plt>
   25a10:	cmp	fp, #0
   25a14:	beq	25a74 <_obstack_memory_used@@Base+0x14c8>
   25a18:	mov	r2, #1
   25a1c:	mov	r3, #34	; 0x22
   25a20:	strb	r3, [r9]
   25a24:	mov	r8, r2
   25a28:	mov	r3, r2
   25a2c:	str	r2, [sp, #68]	; 0x44
   25a30:	str	r3, [sp, #56]	; 0x38
   25a34:	ldr	r3, [pc, #316]	; 25b78 <_obstack_memory_used@@Base+0x15cc>
   25a38:	ldr	r1, [sp, #56]	; 0x38
   25a3c:	str	r3, [sp, #72]	; 0x48
   25a40:	ldr	r2, [sp, #176]	; 0xb0
   25a44:	ldr	ip, [sp, #40]	; 0x28
   25a48:	ldr	lr, [sp, #176]	; 0xb0
   25a4c:	b	24880 <_obstack_memory_used@@Base+0x2d4>
   25a50:	ldr	r0, [sp, #44]	; 0x2c
   25a54:	bl	11b94 <strlen@plt>
   25a58:	str	r0, [sp, #24]
   25a5c:	b	25760 <_obstack_memory_used@@Base+0x11b4>
   25a60:	mov	r7, #0
   25a64:	ldr	r1, [sp, #52]	; 0x34
   25a68:	str	r3, [sp, #32]
   25a6c:	mov	r4, #48	; 0x30
   25a70:	b	24d88 <_obstack_memory_used@@Base+0x7dc>
   25a74:	mov	r3, #1
   25a78:	str	r3, [sp, #68]	; 0x44
   25a7c:	mov	r8, r3
   25a80:	b	25a30 <_obstack_memory_used@@Base+0x1484>
   25a84:	mov	r3, #2
   25a88:	mov	sl, r9
   25a8c:	str	r3, [sp, #176]	; 0xb0
   25a90:	mov	r9, fp
   25a94:	ldr	r3, [sp, #56]	; 0x38
   25a98:	b	25904 <_obstack_memory_used@@Base+0x1358>
   25a9c:	ldr	r6, [sp, #48]	; 0x30
   25aa0:	b	25550 <_obstack_memory_used@@Base+0xfa4>
   25aa4:	ldr	r0, [sp, #24]
   25aa8:	mov	ip, r6
   25aac:	cmp	r0, ip
   25ab0:	mov	r1, r7
   25ab4:	mov	r2, r4
   25ab8:	ldr	r7, [sp, #104]	; 0x68
   25abc:	ldr	r4, [sp, #32]
   25ac0:	ldr	r6, [sp, #108]	; 0x6c
   25ac4:	ldr	r8, [sp, #112]	; 0x70
   25ac8:	ldr	r5, [sp, #116]	; 0x74
   25acc:	bls	25afc <_obstack_memory_used@@Base+0x1550>
   25ad0:	ldrb	r3, [r2]
   25ad4:	cmp	r3, #0
   25ad8:	bne	25aec <_obstack_memory_used@@Base+0x1540>
   25adc:	b	25c0c <_obstack_memory_used@@Base+0x1660>
   25ae0:	ldrb	r3, [r2, #1]!
   25ae4:	cmp	r3, #0
   25ae8:	beq	25c0c <_obstack_memory_used@@Base+0x1660>
   25aec:	add	r1, r1, #1
   25af0:	add	r3, sl, r1
   25af4:	cmp	r0, r3
   25af8:	bhi	25ae0 <_obstack_memory_used@@Base+0x1534>
   25afc:	mov	r2, #0
   25b00:	mov	r3, r7
   25b04:	str	r2, [sp, #32]
   25b08:	b	258d4 <_obstack_memory_used@@Base+0x1328>
   25b0c:	mov	r1, r7
   25b10:	ldr	r7, [sp, #104]	; 0x68
   25b14:	mov	r2, #0
   25b18:	ldr	r4, [sp, #32]
   25b1c:	ldr	r6, [sp, #108]	; 0x6c
   25b20:	ldr	r8, [sp, #112]	; 0x70
   25b24:	ldr	r5, [sp, #116]	; 0x74
   25b28:	mov	r3, r7
   25b2c:	str	r2, [sp, #32]
   25b30:	b	258d4 <_obstack_memory_used@@Base+0x1328>
   25b34:	mov	r3, r5
   25b38:	eor	r3, r3, #1
   25b3c:	ldr	r4, [sp, #32]
   25b40:	mov	r1, r7
   25b44:	str	r5, [sp, #32]
   25b48:	ldr	r7, [sp, #104]	; 0x68
   25b4c:	ldr	r6, [sp, #108]	; 0x6c
   25b50:	ldr	r8, [sp, #112]	; 0x70
   25b54:	ldr	r5, [sp, #116]	; 0x74
   25b58:	uxtb	r3, r3
   25b5c:	b	258d4 <_obstack_memory_used@@Base+0x1328>
   25b60:	mov	sl, r9
   25b64:	str	r3, [sp, #56]	; 0x38
   25b68:	mov	r9, fp
   25b6c:	ldr	r2, [sp, #64]	; 0x40
   25b70:	b	25904 <_obstack_memory_used@@Base+0x1358>
   25b74:	andeq	r0, r3, ip, lsl #6
   25b78:	andeq	r0, r3, r8, lsl #6
   25b7c:	andeq	r0, r3, r0, lsl r3
   25b80:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   25b84:	ldr	r2, [sp, #44]	; 0x2c
   25b88:	ldrb	r1, [r2, r3]
   25b8c:	sub	r2, r1, #33	; 0x21
   25b90:	uxtb	r2, r2
   25b94:	cmp	r2, #29
   25b98:	bhi	25c18 <_obstack_memory_used@@Base+0x166c>
   25b9c:	ldr	r0, [pc, #-36]	; 25b80 <_obstack_memory_used@@Base+0x15d4>
   25ba0:	mov	ip, #1
   25ba4:	ands	r2, r0, ip, lsl r2
   25ba8:	beq	25c38 <_obstack_memory_used@@Base+0x168c>
   25bac:	ldr	r2, [sp, #40]	; 0x28
   25bb0:	cmp	r2, #0
   25bb4:	bne	25d2c <_obstack_memory_used@@Base+0x1780>
   25bb8:	add	r2, r8, #1
   25bbc:	cmp	fp, r8
   25bc0:	strbhi	r4, [r9, r8]
   25bc4:	cmp	fp, r2
   25bc8:	movhi	r0, #34	; 0x22
   25bcc:	strbhi	r0, [r9, r2]
   25bd0:	add	r2, r8, #2
   25bd4:	cmp	fp, r2
   25bd8:	movhi	r0, #34	; 0x22
   25bdc:	strbhi	r0, [r9, r2]
   25be0:	add	r2, r8, #3
   25be4:	cmp	fp, r2
   25be8:	mov	sl, r3
   25bec:	ldr	r3, [sp, #40]	; 0x28
   25bf0:	movhi	r0, #63	; 0x3f
   25bf4:	mov	r4, r1
   25bf8:	strbhi	r0, [r9, r2]
   25bfc:	add	r8, r8, #4
   25c00:	mov	r1, r3
   25c04:	str	r3, [sp, #32]
   25c08:	b	24d88 <_obstack_memory_used@@Base+0x7dc>
   25c0c:	str	r3, [sp, #32]
   25c10:	mov	r3, r7
   25c14:	b	258d4 <_obstack_memory_used@@Base+0x1328>
   25c18:	mov	r1, #0
   25c1c:	str	r1, [sp, #32]
   25c20:	b	24d88 <_obstack_memory_used@@Base+0x7dc>
   25c24:	mov	sl, r9
   25c28:	ldr	r3, [sp, #56]	; 0x38
   25c2c:	mov	r9, fp
   25c30:	ldr	r2, [sp, #64]	; 0x40
   25c34:	b	25904 <_obstack_memory_used@@Base+0x1358>
   25c38:	str	r2, [sp, #32]
   25c3c:	mov	r1, #0
   25c40:	b	24d88 <_obstack_memory_used@@Base+0x7dc>
   25c44:	ldr	r2, [sp, #76]	; 0x4c
   25c48:	mov	sl, r9
   25c4c:	mov	r9, fp
   25c50:	mov	fp, r8
   25c54:	ldr	r1, [sp, #72]	; 0x48
   25c58:	cmp	r1, #0
   25c5c:	moveq	r3, #0
   25c60:	andne	r3, r2, #1
   25c64:	cmp	r3, #0
   25c68:	beq	25c94 <_obstack_memory_used@@Base+0x16e8>
   25c6c:	ldrb	r3, [r1]
   25c70:	cmp	r3, #0
   25c74:	beq	25c94 <_obstack_memory_used@@Base+0x16e8>
   25c78:	mov	r2, r1
   25c7c:	cmp	r9, fp
   25c80:	strbhi	r3, [sl, fp]
   25c84:	ldrb	r3, [r2, #1]!
   25c88:	add	fp, fp, #1
   25c8c:	cmp	r3, #0
   25c90:	bne	25c7c <_obstack_memory_used@@Base+0x16d0>
   25c94:	cmp	r9, fp
   25c98:	movhi	r3, #0
   25c9c:	strbhi	r3, [sl, fp]
   25ca0:	b	2595c <_obstack_memory_used@@Base+0x13b0>
   25ca4:	ldr	r3, [sp, #192]	; 0xc0
   25ca8:	mov	ip, #5
   25cac:	str	r3, [sp, #16]
   25cb0:	ldr	r3, [sp, #188]	; 0xbc
   25cb4:	ldr	r2, [sp, #44]	; 0x2c
   25cb8:	str	r3, [sp, #12]
   25cbc:	ldr	r3, [sp, #184]	; 0xb8
   25cc0:	ldr	r1, [sp, #84]	; 0x54
   25cc4:	str	r3, [sp, #8]
   25cc8:	ldr	r3, [sp, #180]	; 0xb4
   25ccc:	mov	r0, r9
   25cd0:	str	r3, [sp, #4]
   25cd4:	str	ip, [sp]
   25cd8:	ldr	r3, [sp, #24]
   25cdc:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   25ce0:	mov	fp, r0
   25ce4:	b	2595c <_obstack_memory_used@@Base+0x13b0>
   25ce8:	mov	sl, r9
   25cec:	mov	r9, fp
   25cf0:	mov	fp, r8
   25cf4:	b	25c54 <_obstack_memory_used@@Base+0x16a8>
   25cf8:	ldr	r1, [sp, #176]	; 0xb0
   25cfc:	bl	24694 <_obstack_memory_used@@Base+0xe8>
   25d00:	str	r0, [sp, #192]	; 0xc0
   25d04:	b	24c70 <_obstack_memory_used@@Base+0x6c4>
   25d08:	ldr	r1, [sp, #176]	; 0xb0
   25d0c:	bl	24694 <_obstack_memory_used@@Base+0xe8>
   25d10:	str	r0, [sp, #188]	; 0xbc
   25d14:	b	24c50 <_obstack_memory_used@@Base+0x6a4>
   25d18:	mov	sl, r9
   25d1c:	mov	r2, r3
   25d20:	mov	r9, fp
   25d24:	mov	fp, r8
   25d28:	b	25c54 <_obstack_memory_used@@Base+0x16a8>
   25d2c:	mov	sl, r9
   25d30:	mov	r9, fp
   25d34:	b	25918 <_obstack_memory_used@@Base+0x136c>
   25d38:	push	{r4, r5, r6, lr}
   25d3c:	mov	r5, r0
   25d40:	bl	11bb8 <__errno_location@plt>
   25d44:	cmp	r5, #0
   25d48:	mov	r1, #48	; 0x30
   25d4c:	mov	r4, r0
   25d50:	ldr	r0, [pc, #16]	; 25d68 <_obstack_memory_used@@Base+0x17bc>
   25d54:	ldr	r6, [r4]
   25d58:	movne	r0, r5
   25d5c:	bl	29ec4 <_obstack_memory_used@@Base+0x5918>
   25d60:	str	r6, [r4]
   25d64:	pop	{r4, r5, r6, pc}
   25d68:	strdeq	r2, [r4], -r0
   25d6c:	ldr	r3, [pc, #12]	; 25d80 <_obstack_memory_used@@Base+0x17d4>
   25d70:	cmp	r0, #0
   25d74:	moveq	r0, r3
   25d78:	ldr	r0, [r0]
   25d7c:	bx	lr
   25d80:	strdeq	r2, [r4], -r0
   25d84:	ldr	r3, [pc, #12]	; 25d98 <_obstack_memory_used@@Base+0x17ec>
   25d88:	cmp	r0, #0
   25d8c:	moveq	r0, r3
   25d90:	str	r1, [r0]
   25d94:	bx	lr
   25d98:	strdeq	r2, [r4], -r0
   25d9c:	ldr	r3, [pc, #52]	; 25dd8 <_obstack_memory_used@@Base+0x182c>
   25da0:	cmp	r0, #0
   25da4:	moveq	r0, r3
   25da8:	add	r3, r0, #8
   25dac:	push	{lr}		; (str lr, [sp, #-4]!)
   25db0:	lsr	lr, r1, #5
   25db4:	and	r1, r1, #31
   25db8:	ldr	ip, [r3, lr, lsl #2]
   25dbc:	lsr	r0, ip, r1
   25dc0:	eor	r2, r2, r0
   25dc4:	and	r2, r2, #1
   25dc8:	and	r0, r0, #1
   25dcc:	eor	r1, ip, r2, lsl r1
   25dd0:	str	r1, [r3, lr, lsl #2]
   25dd4:	pop	{pc}		; (ldr pc, [sp], #4)
   25dd8:	strdeq	r2, [r4], -r0
   25ddc:	ldr	r3, [pc, #16]	; 25df4 <_obstack_memory_used@@Base+0x1848>
   25de0:	cmp	r0, #0
   25de4:	movne	r3, r0
   25de8:	ldr	r0, [r3, #4]
   25dec:	str	r1, [r3, #4]
   25df0:	bx	lr
   25df4:	strdeq	r2, [r4], -r0
   25df8:	ldr	r3, [pc, #44]	; 25e2c <_obstack_memory_used@@Base+0x1880>
   25dfc:	cmp	r0, #0
   25e00:	moveq	r0, r3
   25e04:	mov	ip, #10
   25e08:	cmp	r2, #0
   25e0c:	cmpne	r1, #0
   25e10:	str	ip, [r0]
   25e14:	beq	25e24 <_obstack_memory_used@@Base+0x1878>
   25e18:	str	r1, [r0, #40]	; 0x28
   25e1c:	str	r2, [r0, #44]	; 0x2c
   25e20:	bx	lr
   25e24:	push	{r4, lr}
   25e28:	bl	11d2c <abort@plt>
   25e2c:	strdeq	r2, [r4], -r0
   25e30:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25e34:	sub	sp, sp, #24
   25e38:	ldr	ip, [pc, #108]	; 25eac <_obstack_memory_used@@Base+0x1900>
   25e3c:	ldr	r4, [sp, #56]	; 0x38
   25e40:	mov	r9, r2
   25e44:	cmp	r4, #0
   25e48:	moveq	r4, ip
   25e4c:	mov	sl, r3
   25e50:	mov	r7, r0
   25e54:	mov	r8, r1
   25e58:	bl	11bb8 <__errno_location@plt>
   25e5c:	ldr	r3, [r4, #44]	; 0x2c
   25e60:	mov	r1, r8
   25e64:	ldr	r6, [r0]
   25e68:	str	r3, [sp, #16]
   25e6c:	ldr	r2, [r4, #40]	; 0x28
   25e70:	add	r3, r4, #8
   25e74:	str	r3, [sp, #8]
   25e78:	str	r2, [sp, #12]
   25e7c:	ldr	r2, [r4, #4]
   25e80:	mov	r5, r0
   25e84:	str	r2, [sp, #4]
   25e88:	ldr	ip, [r4]
   25e8c:	mov	r3, sl
   25e90:	mov	r2, r9
   25e94:	mov	r0, r7
   25e98:	str	ip, [sp]
   25e9c:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   25ea0:	str	r6, [r5]
   25ea4:	add	sp, sp, #24
   25ea8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25eac:	strdeq	r2, [r4], -r0
   25eb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25eb4:	cmp	r2, #0
   25eb8:	sub	sp, sp, #36	; 0x24
   25ebc:	ldr	r4, [pc, #164]	; 25f68 <_obstack_memory_used@@Base+0x19bc>
   25ec0:	mov	r8, r1
   25ec4:	movne	r4, r2
   25ec8:	mov	r7, r0
   25ecc:	bl	11bb8 <__errno_location@plt>
   25ed0:	ldr	r3, [r4, #44]	; 0x2c
   25ed4:	ldr	r5, [r4, #4]
   25ed8:	add	r9, r4, #8
   25edc:	orr	r5, r5, #1
   25ee0:	mov	r1, #0
   25ee4:	mov	r2, r7
   25ee8:	ldr	fp, [r0]
   25eec:	str	r3, [sp, #16]
   25ef0:	ldr	r3, [r4, #40]	; 0x28
   25ef4:	stmib	sp, {r5, r9}
   25ef8:	str	r3, [sp, #12]
   25efc:	ldr	r3, [r4]
   25f00:	mov	r6, r0
   25f04:	str	r3, [sp]
   25f08:	mov	r0, r1
   25f0c:	mov	r3, r8
   25f10:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   25f14:	add	r1, r0, #1
   25f18:	mov	r0, r1
   25f1c:	str	r1, [sp, #28]
   25f20:	bl	29980 <_obstack_memory_used@@Base+0x53d4>
   25f24:	ldr	r3, [r4, #44]	; 0x2c
   25f28:	ldr	r1, [sp, #28]
   25f2c:	str	r3, [sp, #16]
   25f30:	ldr	r3, [r4, #40]	; 0x28
   25f34:	str	r5, [sp, #4]
   25f38:	str	r3, [sp, #12]
   25f3c:	str	r9, [sp, #8]
   25f40:	ldr	ip, [r4]
   25f44:	mov	r3, r8
   25f48:	mov	r2, r7
   25f4c:	str	ip, [sp]
   25f50:	mov	sl, r0
   25f54:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   25f58:	mov	r0, sl
   25f5c:	str	fp, [r6]
   25f60:	add	sp, sp, #36	; 0x24
   25f64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25f68:	strdeq	r2, [r4], -r0
   25f6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25f70:	cmp	r3, #0
   25f74:	sub	sp, sp, #44	; 0x2c
   25f78:	ldr	r4, [pc, #192]	; 26040 <_obstack_memory_used@@Base+0x1a94>
   25f7c:	mov	r6, r2
   25f80:	movne	r4, r3
   25f84:	mov	r9, r1
   25f88:	mov	r8, r0
   25f8c:	bl	11bb8 <__errno_location@plt>
   25f90:	ldr	r3, [r4, #44]	; 0x2c
   25f94:	ldr	r5, [r4, #4]
   25f98:	add	sl, r4, #8
   25f9c:	cmp	r6, #0
   25fa0:	orreq	r5, r5, #1
   25fa4:	mov	r1, #0
   25fa8:	ldr	r2, [r0]
   25fac:	str	r3, [sp, #16]
   25fb0:	ldr	r3, [r4, #40]	; 0x28
   25fb4:	stmib	sp, {r5, sl}
   25fb8:	str	r3, [sp, #12]
   25fbc:	ldr	r3, [r4]
   25fc0:	mov	r7, r0
   25fc4:	str	r2, [sp, #28]
   25fc8:	str	r3, [sp]
   25fcc:	mov	r2, r8
   25fd0:	mov	r3, r9
   25fd4:	mov	r0, r1
   25fd8:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   25fdc:	add	r1, r0, #1
   25fe0:	mov	fp, r0
   25fe4:	mov	r0, r1
   25fe8:	str	r1, [sp, #36]	; 0x24
   25fec:	bl	29980 <_obstack_memory_used@@Base+0x53d4>
   25ff0:	ldr	r3, [r4, #44]	; 0x2c
   25ff4:	mov	r2, r8
   25ff8:	str	r3, [sp, #16]
   25ffc:	ldr	r3, [r4, #40]	; 0x28
   26000:	str	r5, [sp, #4]
   26004:	str	r3, [sp, #12]
   26008:	str	sl, [sp, #8]
   2600c:	ldr	ip, [r4]
   26010:	ldr	r1, [sp, #36]	; 0x24
   26014:	mov	r3, r9
   26018:	str	ip, [sp]
   2601c:	str	r0, [sp, #32]
   26020:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   26024:	ldr	r2, [sp, #28]
   26028:	cmp	r6, #0
   2602c:	str	r2, [r7]
   26030:	ldr	r0, [sp, #32]
   26034:	strne	fp, [r6]
   26038:	add	sp, sp, #44	; 0x2c
   2603c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26040:	strdeq	r2, [r4], -r0
   26044:	push	{r4, r5, r6, r7, r8, lr}
   26048:	ldr	r6, [pc, #116]	; 260c4 <_obstack_memory_used@@Base+0x1b18>
   2604c:	ldr	r3, [r6, #4]
   26050:	ldr	r7, [r6]
   26054:	cmp	r3, #1
   26058:	movgt	r5, r7
   2605c:	movgt	r4, #1
   26060:	ble	26080 <_obstack_memory_used@@Base+0x1ad4>
   26064:	ldr	r0, [r5, #12]
   26068:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   2606c:	ldr	r3, [r6, #4]
   26070:	add	r4, r4, #1
   26074:	cmp	r3, r4
   26078:	add	r5, r5, #8
   2607c:	bgt	26064 <_obstack_memory_used@@Base+0x1ab8>
   26080:	ldr	r0, [r7, #4]
   26084:	ldr	r4, [pc, #60]	; 260c8 <_obstack_memory_used@@Base+0x1b1c>
   26088:	cmp	r0, r4
   2608c:	beq	260a0 <_obstack_memory_used@@Base+0x1af4>
   26090:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   26094:	mov	r3, #256	; 0x100
   26098:	str	r4, [r6, #12]
   2609c:	str	r3, [r6, #8]
   260a0:	ldr	r4, [pc, #36]	; 260cc <_obstack_memory_used@@Base+0x1b20>
   260a4:	cmp	r7, r4
   260a8:	beq	260b8 <_obstack_memory_used@@Base+0x1b0c>
   260ac:	mov	r0, r7
   260b0:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   260b4:	str	r4, [r6]
   260b8:	mov	r3, #1
   260bc:	str	r3, [r6, #4]
   260c0:	pop	{r4, r5, r6, r7, r8, pc}
   260c4:	andeq	r1, r4, ip, asr #5
   260c8:	andeq	r2, r4, r0, lsr #8
   260cc:	ldrdeq	r1, [r4], -r4
   260d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   260d4:	sub	sp, sp, #44	; 0x2c
   260d8:	mov	r5, r0
   260dc:	mov	sl, r1
   260e0:	bl	11bb8 <__errno_location@plt>
   260e4:	ldr	r4, [pc, #400]	; 2627c <_obstack_memory_used@@Base+0x1cd0>
   260e8:	cmn	r5, #-2147483647	; 0x80000001
   260ec:	ldr	r6, [r4]
   260f0:	mov	r8, r0
   260f4:	movne	r0, #0
   260f8:	moveq	r0, #1
   260fc:	ldr	r3, [r8]
   26100:	orrs	r0, r0, r5, lsr #31
   26104:	str	r3, [sp, #24]
   26108:	bne	26278 <_obstack_memory_used@@Base+0x1ccc>
   2610c:	ldr	r2, [r4, #4]
   26110:	cmp	r5, r2
   26114:	blt	26174 <_obstack_memory_used@@Base+0x1bc8>
   26118:	add	r7, r4, #8
   2611c:	cmp	r6, r7
   26120:	str	r2, [sp, #36]	; 0x24
   26124:	beq	26248 <_obstack_memory_used@@Base+0x1c9c>
   26128:	mov	r3, #8
   2612c:	sub	r2, r5, r2
   26130:	mov	r0, r6
   26134:	str	r3, [sp]
   26138:	add	r2, r2, #1
   2613c:	mvn	r3, #-2147483648	; 0x80000000
   26140:	add	r1, sp, #36	; 0x24
   26144:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   26148:	mov	r6, r0
   2614c:	str	r0, [r4]
   26150:	ldr	r0, [r4, #4]
   26154:	ldr	r2, [sp, #36]	; 0x24
   26158:	mov	r1, #0
   2615c:	sub	r2, r2, r0
   26160:	add	r0, r6, r0, lsl #3
   26164:	lsl	r2, r2, #3
   26168:	bl	11be8 <memset@plt>
   2616c:	ldr	r3, [sp, #36]	; 0x24
   26170:	str	r3, [r4, #4]
   26174:	ldr	r4, [pc, #260]	; 26280 <_obstack_memory_used@@Base+0x1cd4>
   26178:	add	fp, r6, r5, lsl #3
   2617c:	ldr	r9, [r6, r5, lsl #3]
   26180:	ldr	r0, [r4, #4]
   26184:	ldr	r3, [r4]
   26188:	ldr	r7, [fp, #4]
   2618c:	ldr	r1, [r4, #44]	; 0x2c
   26190:	ldr	r2, [r4, #40]	; 0x28
   26194:	orr	r0, r0, #1
   26198:	str	r3, [sp]
   2619c:	add	r3, r4, #8
   261a0:	str	r0, [sp, #28]
   261a4:	str	r0, [sp, #4]
   261a8:	str	r1, [sp, #16]
   261ac:	str	r2, [sp, #12]
   261b0:	str	r3, [sp, #8]
   261b4:	mov	r0, r7
   261b8:	mov	r1, r9
   261bc:	mvn	r3, #0
   261c0:	mov	r2, sl
   261c4:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   261c8:	cmp	r9, r0
   261cc:	bhi	26234 <_obstack_memory_used@@Base+0x1c88>
   261d0:	add	r3, r4, #48	; 0x30
   261d4:	add	r9, r0, #1
   261d8:	cmp	r7, r3
   261dc:	str	r9, [r6, r5, lsl #3]
   261e0:	beq	261ec <_obstack_memory_used@@Base+0x1c40>
   261e4:	mov	r0, r7
   261e8:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   261ec:	mov	r0, r9
   261f0:	bl	29980 <_obstack_memory_used@@Base+0x53d4>
   261f4:	ldr	ip, [r4, #44]	; 0x2c
   261f8:	ldr	r3, [r4]
   261fc:	ldr	lr, [r4, #40]	; 0x28
   26200:	ldr	r4, [pc, #124]	; 26284 <_obstack_memory_used@@Base+0x1cd8>
   26204:	mov	r2, sl
   26208:	mov	r1, r9
   2620c:	str	r0, [fp, #4]
   26210:	str	r4, [sp, #8]
   26214:	ldr	r4, [sp, #28]
   26218:	str	r3, [sp]
   2621c:	str	r4, [sp, #4]
   26220:	str	ip, [sp, #16]
   26224:	str	lr, [sp, #12]
   26228:	mvn	r3, #0
   2622c:	mov	r7, r0
   26230:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   26234:	ldr	r3, [sp, #24]
   26238:	mov	r0, r7
   2623c:	str	r3, [r8]
   26240:	add	sp, sp, #44	; 0x2c
   26244:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26248:	mov	r3, #8
   2624c:	sub	r2, r5, r2
   26250:	str	r3, [sp]
   26254:	add	r1, sp, #36	; 0x24
   26258:	add	r2, r2, #1
   2625c:	mvn	r3, #-2147483648	; 0x80000000
   26260:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   26264:	mov	r6, r0
   26268:	ldm	r7, {r0, r1}
   2626c:	str	r6, [r4]
   26270:	stm	r6, {r0, r1}
   26274:	b	26150 <_obstack_memory_used@@Base+0x1ba4>
   26278:	bl	11d2c <abort@plt>
   2627c:	andeq	r1, r4, ip, asr #5
   26280:	strdeq	r2, [r4], -r0
   26284:	strdeq	r2, [r4], -r8
   26288:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2628c:	sub	sp, sp, #52	; 0x34
   26290:	mov	r5, r0
   26294:	mov	sl, r1
   26298:	mov	fp, r2
   2629c:	bl	11bb8 <__errno_location@plt>
   262a0:	ldr	r4, [pc, #408]	; 26440 <_obstack_memory_used@@Base+0x1e94>
   262a4:	cmn	r5, #-2147483647	; 0x80000001
   262a8:	ldr	r6, [r4]
   262ac:	mov	r8, r0
   262b0:	movne	r0, #0
   262b4:	moveq	r0, #1
   262b8:	ldr	r3, [r8]
   262bc:	orrs	r0, r0, r5, lsr #31
   262c0:	str	r3, [sp, #28]
   262c4:	bne	2643c <_obstack_memory_used@@Base+0x1e90>
   262c8:	ldr	r2, [r4, #4]
   262cc:	cmp	r5, r2
   262d0:	blt	26330 <_obstack_memory_used@@Base+0x1d84>
   262d4:	add	r7, r4, #8
   262d8:	cmp	r6, r7
   262dc:	str	r2, [sp, #44]	; 0x2c
   262e0:	beq	2640c <_obstack_memory_used@@Base+0x1e60>
   262e4:	mov	r3, #8
   262e8:	sub	r2, r5, r2
   262ec:	mov	r0, r6
   262f0:	str	r3, [sp]
   262f4:	add	r2, r2, #1
   262f8:	mvn	r3, #-2147483648	; 0x80000000
   262fc:	add	r1, sp, #44	; 0x2c
   26300:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   26304:	mov	r6, r0
   26308:	str	r0, [r4]
   2630c:	ldr	r0, [r4, #4]
   26310:	ldr	r2, [sp, #44]	; 0x2c
   26314:	mov	r1, #0
   26318:	sub	r2, r2, r0
   2631c:	add	r0, r6, r0, lsl #3
   26320:	lsl	r2, r2, #3
   26324:	bl	11be8 <memset@plt>
   26328:	ldr	r3, [sp, #44]	; 0x2c
   2632c:	str	r3, [r4, #4]
   26330:	ldr	r4, [pc, #268]	; 26444 <_obstack_memory_used@@Base+0x1e98>
   26334:	add	r3, r6, r5, lsl #3
   26338:	str	r3, [sp, #32]
   2633c:	ldr	r7, [r3, #4]
   26340:	ldr	r0, [r4, #4]
   26344:	ldr	r3, [r4]
   26348:	ldr	r9, [r6, r5, lsl #3]
   2634c:	ldr	r1, [r4, #44]	; 0x2c
   26350:	ldr	r2, [r4, #40]	; 0x28
   26354:	orr	r0, r0, #1
   26358:	str	r3, [sp]
   2635c:	add	r3, r4, #8
   26360:	str	r0, [sp, #36]	; 0x24
   26364:	str	r0, [sp, #4]
   26368:	str	r1, [sp, #16]
   2636c:	str	r2, [sp, #12]
   26370:	str	r3, [sp, #8]
   26374:	mov	r0, r7
   26378:	mov	r1, r9
   2637c:	mov	r3, fp
   26380:	mov	r2, sl
   26384:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   26388:	cmp	r9, r0
   2638c:	bhi	263f8 <_obstack_memory_used@@Base+0x1e4c>
   26390:	add	r3, r4, #48	; 0x30
   26394:	add	r9, r0, #1
   26398:	cmp	r7, r3
   2639c:	str	r9, [r6, r5, lsl #3]
   263a0:	beq	263ac <_obstack_memory_used@@Base+0x1e00>
   263a4:	mov	r0, r7
   263a8:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   263ac:	mov	r0, r9
   263b0:	bl	29980 <_obstack_memory_used@@Base+0x53d4>
   263b4:	ldr	ip, [sp, #32]
   263b8:	ldr	lr, [r4, #44]	; 0x2c
   263bc:	ldr	r5, [r4, #40]	; 0x28
   263c0:	mov	r3, fp
   263c4:	mov	r2, sl
   263c8:	mov	r1, r9
   263cc:	str	r0, [ip, #4]
   263d0:	ldr	ip, [r4]
   263d4:	ldr	r4, [pc, #108]	; 26448 <_obstack_memory_used@@Base+0x1e9c>
   263d8:	str	lr, [sp, #16]
   263dc:	str	r4, [sp, #8]
   263e0:	ldr	r4, [sp, #36]	; 0x24
   263e4:	str	r5, [sp, #12]
   263e8:	str	r4, [sp, #4]
   263ec:	str	ip, [sp]
   263f0:	mov	r7, r0
   263f4:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   263f8:	ldr	r3, [sp, #28]
   263fc:	mov	r0, r7
   26400:	str	r3, [r8]
   26404:	add	sp, sp, #52	; 0x34
   26408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2640c:	mov	r3, #8
   26410:	sub	r2, r5, r2
   26414:	str	r3, [sp]
   26418:	add	r1, sp, #44	; 0x2c
   2641c:	add	r2, r2, #1
   26420:	mvn	r3, #-2147483648	; 0x80000000
   26424:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   26428:	mov	r6, r0
   2642c:	ldm	r7, {r0, r1}
   26430:	str	r6, [r4]
   26434:	stm	r6, {r0, r1}
   26438:	b	2630c <_obstack_memory_used@@Base+0x1d60>
   2643c:	bl	11d2c <abort@plt>
   26440:	andeq	r1, r4, ip, asr #5
   26444:	strdeq	r2, [r4], -r0
   26448:	strdeq	r2, [r4], -r8
   2644c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26450:	sub	sp, sp, #44	; 0x2c
   26454:	mov	sl, r0
   26458:	bl	11bb8 <__errno_location@plt>
   2645c:	ldr	r4, [pc, #352]	; 265c4 <_obstack_memory_used@@Base+0x2018>
   26460:	ldr	r2, [r4, #4]
   26464:	ldr	r5, [r4]
   26468:	cmp	r2, #0
   2646c:	ldr	r3, [r0]
   26470:	mov	r8, r0
   26474:	str	r3, [sp, #28]
   26478:	bgt	264d4 <_obstack_memory_used@@Base+0x1f28>
   2647c:	add	r6, r4, #8
   26480:	cmp	r5, r6
   26484:	str	r2, [sp, #36]	; 0x24
   26488:	beq	26594 <_obstack_memory_used@@Base+0x1fe8>
   2648c:	mov	r3, #8
   26490:	mov	r0, r5
   26494:	str	r3, [sp]
   26498:	rsb	r2, r2, #1
   2649c:	mvn	r3, #-2147483648	; 0x80000000
   264a0:	add	r1, sp, #36	; 0x24
   264a4:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   264a8:	mov	r5, r0
   264ac:	str	r0, [r4]
   264b0:	ldr	r0, [r4, #4]
   264b4:	ldr	r2, [sp, #36]	; 0x24
   264b8:	mov	r1, #0
   264bc:	sub	r2, r2, r0
   264c0:	add	r0, r5, r0, lsl #3
   264c4:	lsl	r2, r2, #3
   264c8:	bl	11be8 <memset@plt>
   264cc:	ldr	r3, [sp, #36]	; 0x24
   264d0:	str	r3, [r4, #4]
   264d4:	ldr	r4, [pc, #236]	; 265c8 <_obstack_memory_used@@Base+0x201c>
   264d8:	ldr	r9, [r5]
   264dc:	ldr	r6, [r5, #4]
   264e0:	ldr	r7, [r4, #4]
   264e4:	ldr	r1, [r4, #44]	; 0x2c
   264e8:	ldr	r2, [r4, #40]	; 0x28
   264ec:	ldr	r3, [r4]
   264f0:	orr	r7, r7, #1
   264f4:	add	fp, r4, #8
   264f8:	str	r1, [sp, #16]
   264fc:	str	r2, [sp, #12]
   26500:	str	r3, [sp]
   26504:	str	r7, [sp, #4]
   26508:	str	fp, [sp, #8]
   2650c:	mov	r1, r9
   26510:	mov	r0, r6
   26514:	mvn	r3, #0
   26518:	mov	r2, sl
   2651c:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   26520:	cmp	r9, r0
   26524:	bhi	26580 <_obstack_memory_used@@Base+0x1fd4>
   26528:	add	r3, r4, #48	; 0x30
   2652c:	add	r9, r0, #1
   26530:	cmp	r6, r3
   26534:	str	r9, [r5]
   26538:	beq	26544 <_obstack_memory_used@@Base+0x1f98>
   2653c:	mov	r0, r6
   26540:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   26544:	mov	r0, r9
   26548:	bl	29980 <_obstack_memory_used@@Base+0x53d4>
   2654c:	ldr	ip, [r4, #44]	; 0x2c
   26550:	ldr	r3, [r4]
   26554:	ldr	lr, [r4, #40]	; 0x28
   26558:	mov	r2, sl
   2655c:	mov	r1, r9
   26560:	str	r0, [r5, #4]
   26564:	str	r3, [sp]
   26568:	stmib	sp, {r7, fp}
   2656c:	str	ip, [sp, #16]
   26570:	str	lr, [sp, #12]
   26574:	mvn	r3, #0
   26578:	mov	r6, r0
   2657c:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   26580:	ldr	r3, [sp, #28]
   26584:	mov	r0, r6
   26588:	str	r3, [r8]
   2658c:	add	sp, sp, #44	; 0x2c
   26590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26594:	mov	r3, #8
   26598:	str	r3, [sp]
   2659c:	add	r1, sp, #36	; 0x24
   265a0:	rsb	r2, r2, #1
   265a4:	mvn	r3, #-2147483648	; 0x80000000
   265a8:	mov	r0, #0
   265ac:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   265b0:	mov	r5, r0
   265b4:	ldm	r6, {r0, r1}
   265b8:	str	r5, [r4]
   265bc:	stm	r5, {r0, r1}
   265c0:	b	264b0 <_obstack_memory_used@@Base+0x1f04>
   265c4:	andeq	r1, r4, ip, asr #5
   265c8:	strdeq	r2, [r4], -r0
   265cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   265d0:	sub	sp, sp, #44	; 0x2c
   265d4:	mov	r9, r0
   265d8:	mov	sl, r1
   265dc:	bl	11bb8 <__errno_location@plt>
   265e0:	ldr	r4, [pc, #364]	; 26754 <_obstack_memory_used@@Base+0x21a8>
   265e4:	ldr	r2, [r4, #4]
   265e8:	ldr	r5, [r4]
   265ec:	cmp	r2, #0
   265f0:	ldr	r3, [r0]
   265f4:	mov	r7, r0
   265f8:	str	r3, [sp, #24]
   265fc:	bgt	26658 <_obstack_memory_used@@Base+0x20ac>
   26600:	add	r6, r4, #8
   26604:	cmp	r5, r6
   26608:	str	r2, [sp, #36]	; 0x24
   2660c:	beq	26724 <_obstack_memory_used@@Base+0x2178>
   26610:	mov	r3, #8
   26614:	mov	r0, r5
   26618:	str	r3, [sp]
   2661c:	rsb	r2, r2, #1
   26620:	mvn	r3, #-2147483648	; 0x80000000
   26624:	add	r1, sp, #36	; 0x24
   26628:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   2662c:	mov	r5, r0
   26630:	str	r0, [r4]
   26634:	ldr	r0, [r4, #4]
   26638:	ldr	r2, [sp, #36]	; 0x24
   2663c:	mov	r1, #0
   26640:	sub	r2, r2, r0
   26644:	add	r0, r5, r0, lsl #3
   26648:	lsl	r2, r2, #3
   2664c:	bl	11be8 <memset@plt>
   26650:	ldr	r3, [sp, #36]	; 0x24
   26654:	str	r3, [r4, #4]
   26658:	ldr	r4, [pc, #248]	; 26758 <_obstack_memory_used@@Base+0x21ac>
   2665c:	ldr	r8, [r5]
   26660:	ldr	r6, [r5, #4]
   26664:	ldr	r0, [r4, #4]
   26668:	ldr	r1, [r4, #44]	; 0x2c
   2666c:	ldr	r2, [r4, #40]	; 0x28
   26670:	ldr	r3, [r4]
   26674:	orr	r0, r0, #1
   26678:	add	fp, r4, #8
   2667c:	str	r0, [sp, #28]
   26680:	str	r0, [sp, #4]
   26684:	str	r1, [sp, #16]
   26688:	str	r2, [sp, #12]
   2668c:	str	r3, [sp]
   26690:	str	fp, [sp, #8]
   26694:	mov	r1, r8
   26698:	mov	r0, r6
   2669c:	mov	r3, sl
   266a0:	mov	r2, r9
   266a4:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   266a8:	cmp	r8, r0
   266ac:	bhi	26710 <_obstack_memory_used@@Base+0x2164>
   266b0:	add	r3, r4, #48	; 0x30
   266b4:	add	r8, r0, #1
   266b8:	cmp	r6, r3
   266bc:	str	r8, [r5]
   266c0:	beq	266cc <_obstack_memory_used@@Base+0x2120>
   266c4:	mov	r0, r6
   266c8:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   266cc:	mov	r0, r8
   266d0:	bl	29980 <_obstack_memory_used@@Base+0x53d4>
   266d4:	ldr	lr, [r4, #44]	; 0x2c
   266d8:	ldr	ip, [r4]
   266dc:	mov	r3, sl
   266e0:	mov	r2, r9
   266e4:	mov	r1, r8
   266e8:	str	r0, [r5, #4]
   266ec:	ldr	r5, [r4, #40]	; 0x28
   266f0:	ldr	r4, [sp, #28]
   266f4:	str	fp, [sp, #8]
   266f8:	str	r4, [sp, #4]
   266fc:	str	lr, [sp, #16]
   26700:	str	r5, [sp, #12]
   26704:	str	ip, [sp]
   26708:	mov	r6, r0
   2670c:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   26710:	ldr	r3, [sp, #24]
   26714:	mov	r0, r6
   26718:	str	r3, [r7]
   2671c:	add	sp, sp, #44	; 0x2c
   26720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26724:	mov	r3, #8
   26728:	str	r3, [sp]
   2672c:	add	r1, sp, #36	; 0x24
   26730:	rsb	r2, r2, #1
   26734:	mvn	r3, #-2147483648	; 0x80000000
   26738:	mov	r0, #0
   2673c:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   26740:	mov	r5, r0
   26744:	ldm	r6, {r0, r1}
   26748:	str	r5, [r4]
   2674c:	stm	r5, {r0, r1}
   26750:	b	26634 <_obstack_memory_used@@Base+0x2088>
   26754:	andeq	r1, r4, ip, asr #5
   26758:	strdeq	r2, [r4], -r0
   2675c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26760:	sub	sp, sp, #132	; 0x84
   26764:	mov	r5, r1
   26768:	mov	r4, r0
   2676c:	mov	r9, r2
   26770:	add	r0, sp, #80	; 0x50
   26774:	mov	r2, #48	; 0x30
   26778:	mov	r1, #0
   2677c:	bl	11be8 <memset@plt>
   26780:	cmp	r5, #10
   26784:	beq	2693c <_obstack_memory_used@@Base+0x2390>
   26788:	add	lr, sp, #80	; 0x50
   2678c:	str	r5, [sp, #80]	; 0x50
   26790:	ldm	lr!, {r0, r1, r2, r3}
   26794:	add	ip, sp, #32
   26798:	ldr	r6, [pc, #416]	; 26940 <_obstack_memory_used@@Base+0x2394>
   2679c:	stmia	ip!, {r0, r1, r2, r3}
   267a0:	ldm	lr!, {r0, r1, r2, r3}
   267a4:	stmia	ip!, {r0, r1, r2, r3}
   267a8:	ldm	lr, {r0, r1, r2, r3}
   267ac:	stm	ip, {r0, r1, r2, r3}
   267b0:	bl	11bb8 <__errno_location@plt>
   267b4:	cmn	r4, #-2147483647	; 0x80000001
   267b8:	ldr	r5, [r6]
   267bc:	mov	r7, r0
   267c0:	movne	r0, #0
   267c4:	moveq	r0, #1
   267c8:	ldr	r3, [r7]
   267cc:	orrs	r0, r0, r4, lsr #31
   267d0:	str	r3, [sp, #24]
   267d4:	bne	2693c <_obstack_memory_used@@Base+0x2390>
   267d8:	ldr	r2, [r6, #4]
   267dc:	cmp	r4, r2
   267e0:	blt	26840 <_obstack_memory_used@@Base+0x2294>
   267e4:	add	r8, r6, #8
   267e8:	cmp	r5, r8
   267ec:	str	r2, [sp, #80]	; 0x50
   267f0:	beq	2690c <_obstack_memory_used@@Base+0x2360>
   267f4:	mov	r3, #8
   267f8:	sub	r2, r4, r2
   267fc:	mov	r0, r5
   26800:	str	r3, [sp]
   26804:	add	r2, r2, #1
   26808:	add	r1, sp, #80	; 0x50
   2680c:	mvn	r3, #-2147483648	; 0x80000000
   26810:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   26814:	mov	r5, r0
   26818:	str	r0, [r6]
   2681c:	ldr	r0, [r6, #4]
   26820:	ldr	r2, [sp, #80]	; 0x50
   26824:	mov	r1, #0
   26828:	sub	r2, r2, r0
   2682c:	add	r0, r5, r0, lsl #3
   26830:	lsl	r2, r2, #3
   26834:	bl	11be8 <memset@plt>
   26838:	ldr	r3, [sp, #80]	; 0x50
   2683c:	str	r3, [r6, #4]
   26840:	add	fp, r5, r4, lsl #3
   26844:	ldr	r1, [sp, #36]	; 0x24
   26848:	ldr	r8, [r5, r4, lsl #3]
   2684c:	ldr	r6, [fp, #4]
   26850:	ldr	r2, [sp, #72]	; 0x48
   26854:	ldr	r3, [sp, #32]
   26858:	ldr	ip, [sp, #76]	; 0x4c
   2685c:	orr	r1, r1, #1
   26860:	add	sl, sp, #40	; 0x28
   26864:	str	r1, [sp, #28]
   26868:	str	r1, [sp, #4]
   2686c:	str	r2, [sp, #12]
   26870:	str	r3, [sp]
   26874:	mov	r0, r6
   26878:	mov	r1, r8
   2687c:	str	ip, [sp, #16]
   26880:	str	sl, [sp, #8]
   26884:	mvn	r3, #0
   26888:	mov	r2, r9
   2688c:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   26890:	cmp	r8, r0
   26894:	bhi	268f8 <_obstack_memory_used@@Base+0x234c>
   26898:	ldr	r3, [pc, #164]	; 26944 <_obstack_memory_used@@Base+0x2398>
   2689c:	add	r8, r0, #1
   268a0:	cmp	r6, r3
   268a4:	str	r8, [r5, r4, lsl #3]
   268a8:	beq	268b4 <_obstack_memory_used@@Base+0x2308>
   268ac:	mov	r0, r6
   268b0:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   268b4:	mov	r0, r8
   268b8:	bl	29980 <_obstack_memory_used@@Base+0x53d4>
   268bc:	ldr	lr, [sp, #76]	; 0x4c
   268c0:	ldr	r3, [sp, #32]
   268c4:	ldr	ip, [sp, #72]	; 0x48
   268c8:	ldr	r4, [sp, #28]
   268cc:	mov	r2, r9
   268d0:	mov	r1, r8
   268d4:	str	r0, [fp, #4]
   268d8:	str	r3, [sp]
   268dc:	str	sl, [sp, #8]
   268e0:	str	r4, [sp, #4]
   268e4:	str	lr, [sp, #16]
   268e8:	str	ip, [sp, #12]
   268ec:	mvn	r3, #0
   268f0:	mov	r6, r0
   268f4:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   268f8:	ldr	r3, [sp, #24]
   268fc:	mov	r0, r6
   26900:	str	r3, [r7]
   26904:	add	sp, sp, #132	; 0x84
   26908:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2690c:	mov	r3, #8
   26910:	sub	r2, r4, r2
   26914:	add	r1, sp, #80	; 0x50
   26918:	str	r3, [sp]
   2691c:	add	r2, r2, #1
   26920:	mvn	r3, #-2147483648	; 0x80000000
   26924:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   26928:	mov	r5, r0
   2692c:	ldm	r8, {r0, r1}
   26930:	str	r5, [r6]
   26934:	stm	r5, {r0, r1}
   26938:	b	2681c <_obstack_memory_used@@Base+0x2270>
   2693c:	bl	11d2c <abort@plt>
   26940:	andeq	r1, r4, ip, asr #5
   26944:	andeq	r2, r4, r0, lsr #8
   26948:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2694c:	sub	sp, sp, #132	; 0x84
   26950:	mov	r5, r1
   26954:	mov	r4, r0
   26958:	mov	r9, r2
   2695c:	add	r0, sp, #80	; 0x50
   26960:	mov	r2, #48	; 0x30
   26964:	mov	r1, #0
   26968:	mov	sl, r3
   2696c:	bl	11be8 <memset@plt>
   26970:	cmp	r5, #10
   26974:	beq	26b30 <_obstack_memory_used@@Base+0x2584>
   26978:	add	lr, sp, #80	; 0x50
   2697c:	str	r5, [sp, #80]	; 0x50
   26980:	ldm	lr!, {r0, r1, r2, r3}
   26984:	add	ip, sp, #32
   26988:	ldr	r6, [pc, #420]	; 26b34 <_obstack_memory_used@@Base+0x2588>
   2698c:	stmia	ip!, {r0, r1, r2, r3}
   26990:	ldm	lr!, {r0, r1, r2, r3}
   26994:	stmia	ip!, {r0, r1, r2, r3}
   26998:	ldm	lr, {r0, r1, r2, r3}
   2699c:	stm	ip, {r0, r1, r2, r3}
   269a0:	bl	11bb8 <__errno_location@plt>
   269a4:	cmn	r4, #-2147483647	; 0x80000001
   269a8:	ldr	r5, [r6]
   269ac:	mov	r7, r0
   269b0:	movne	r0, #0
   269b4:	moveq	r0, #1
   269b8:	ldr	r3, [r7]
   269bc:	orrs	r0, r0, r4, lsr #31
   269c0:	str	r3, [sp, #24]
   269c4:	bne	26b30 <_obstack_memory_used@@Base+0x2584>
   269c8:	ldr	r2, [r6, #4]
   269cc:	cmp	r4, r2
   269d0:	blt	26a30 <_obstack_memory_used@@Base+0x2484>
   269d4:	add	r8, r6, #8
   269d8:	cmp	r5, r8
   269dc:	str	r2, [sp, #80]	; 0x50
   269e0:	beq	26b00 <_obstack_memory_used@@Base+0x2554>
   269e4:	mov	r3, #8
   269e8:	sub	r2, r4, r2
   269ec:	mov	r0, r5
   269f0:	str	r3, [sp]
   269f4:	add	r2, r2, #1
   269f8:	add	r1, sp, #80	; 0x50
   269fc:	mvn	r3, #-2147483648	; 0x80000000
   26a00:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   26a04:	mov	r5, r0
   26a08:	str	r0, [r6]
   26a0c:	ldr	r0, [r6, #4]
   26a10:	ldr	r2, [sp, #80]	; 0x50
   26a14:	mov	r1, #0
   26a18:	sub	r2, r2, r0
   26a1c:	add	r0, r5, r0, lsl #3
   26a20:	lsl	r2, r2, #3
   26a24:	bl	11be8 <memset@plt>
   26a28:	ldr	r3, [sp, #80]	; 0x50
   26a2c:	str	r3, [r6, #4]
   26a30:	add	fp, r5, r4, lsl #3
   26a34:	ldr	r3, [sp, #32]
   26a38:	ldr	r1, [sp, #36]	; 0x24
   26a3c:	ldr	r8, [r5, r4, lsl #3]
   26a40:	ldr	r6, [fp, #4]
   26a44:	ldr	r2, [sp, #72]	; 0x48
   26a48:	ldr	ip, [sp, #76]	; 0x4c
   26a4c:	orr	r1, r1, #1
   26a50:	str	r3, [sp]
   26a54:	add	r3, sp, #40	; 0x28
   26a58:	str	r1, [sp, #28]
   26a5c:	str	r1, [sp, #4]
   26a60:	str	r2, [sp, #12]
   26a64:	str	r3, [sp, #8]
   26a68:	mov	r0, r6
   26a6c:	mov	r1, r8
   26a70:	str	ip, [sp, #16]
   26a74:	mov	r3, sl
   26a78:	mov	r2, r9
   26a7c:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   26a80:	cmp	r8, r0
   26a84:	bhi	26aec <_obstack_memory_used@@Base+0x2540>
   26a88:	ldr	r3, [pc, #168]	; 26b38 <_obstack_memory_used@@Base+0x258c>
   26a8c:	add	r8, r0, #1
   26a90:	cmp	r6, r3
   26a94:	str	r8, [r5, r4, lsl #3]
   26a98:	beq	26aa4 <_obstack_memory_used@@Base+0x24f8>
   26a9c:	mov	r0, r6
   26aa0:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   26aa4:	mov	r0, r8
   26aa8:	bl	29980 <_obstack_memory_used@@Base+0x53d4>
   26aac:	add	lr, sp, #40	; 0x28
   26ab0:	ldr	ip, [sp, #76]	; 0x4c
   26ab4:	ldr	r4, [sp, #72]	; 0x48
   26ab8:	ldr	r5, [sp, #28]
   26abc:	mov	r3, sl
   26ac0:	mov	r2, r9
   26ac4:	mov	r1, r8
   26ac8:	str	r0, [fp, #4]
   26acc:	str	lr, [sp, #8]
   26ad0:	ldr	lr, [sp, #32]
   26ad4:	str	r5, [sp, #4]
   26ad8:	str	ip, [sp, #16]
   26adc:	str	r4, [sp, #12]
   26ae0:	str	lr, [sp]
   26ae4:	mov	r6, r0
   26ae8:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   26aec:	ldr	r3, [sp, #24]
   26af0:	mov	r0, r6
   26af4:	str	r3, [r7]
   26af8:	add	sp, sp, #132	; 0x84
   26afc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26b00:	mov	r3, #8
   26b04:	sub	r2, r4, r2
   26b08:	add	r1, sp, #80	; 0x50
   26b0c:	str	r3, [sp]
   26b10:	add	r2, r2, #1
   26b14:	mvn	r3, #-2147483648	; 0x80000000
   26b18:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   26b1c:	mov	r5, r0
   26b20:	ldm	r8, {r0, r1}
   26b24:	str	r5, [r6]
   26b28:	stm	r5, {r0, r1}
   26b2c:	b	26a0c <_obstack_memory_used@@Base+0x2460>
   26b30:	bl	11d2c <abort@plt>
   26b34:	andeq	r1, r4, ip, asr #5
   26b38:	andeq	r2, r4, r0, lsr #8
   26b3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26b40:	sub	sp, sp, #124	; 0x7c
   26b44:	mov	r4, r0
   26b48:	mov	r9, r1
   26b4c:	add	r0, sp, #72	; 0x48
   26b50:	mov	r2, #48	; 0x30
   26b54:	mov	r1, #0
   26b58:	bl	11be8 <memset@plt>
   26b5c:	cmp	r4, #10
   26b60:	beq	26cec <_obstack_memory_used@@Base+0x2740>
   26b64:	add	lr, sp, #72	; 0x48
   26b68:	str	r4, [sp, #72]	; 0x48
   26b6c:	ldm	lr!, {r0, r1, r2, r3}
   26b70:	add	ip, sp, #24
   26b74:	ldr	r5, [pc, #372]	; 26cf0 <_obstack_memory_used@@Base+0x2744>
   26b78:	stmia	ip!, {r0, r1, r2, r3}
   26b7c:	ldm	lr!, {r0, r1, r2, r3}
   26b80:	stmia	ip!, {r0, r1, r2, r3}
   26b84:	ldm	lr, {r0, r1, r2, r3}
   26b88:	stm	ip, {r0, r1, r2, r3}
   26b8c:	bl	11bb8 <__errno_location@plt>
   26b90:	ldr	r2, [r5, #4]
   26b94:	ldr	r4, [r5]
   26b98:	cmp	r2, #0
   26b9c:	mov	r7, r0
   26ba0:	ldr	fp, [r0]
   26ba4:	bgt	26c00 <_obstack_memory_used@@Base+0x2654>
   26ba8:	add	r6, r5, #8
   26bac:	cmp	r4, r6
   26bb0:	str	r2, [sp, #72]	; 0x48
   26bb4:	beq	26cbc <_obstack_memory_used@@Base+0x2710>
   26bb8:	mov	r3, #8
   26bbc:	mov	r0, r4
   26bc0:	str	r3, [sp]
   26bc4:	rsb	r2, r2, #1
   26bc8:	add	r1, sp, #72	; 0x48
   26bcc:	mvn	r3, #-2147483648	; 0x80000000
   26bd0:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   26bd4:	mov	r4, r0
   26bd8:	str	r0, [r5]
   26bdc:	ldr	r0, [r5, #4]
   26be0:	ldr	r2, [sp, #72]	; 0x48
   26be4:	mov	r1, #0
   26be8:	sub	r2, r2, r0
   26bec:	add	r0, r4, r0, lsl #3
   26bf0:	lsl	r2, r2, #3
   26bf4:	bl	11be8 <memset@plt>
   26bf8:	ldr	r3, [sp, #72]	; 0x48
   26bfc:	str	r3, [r5, #4]
   26c00:	ldr	r6, [sp, #28]
   26c04:	ldr	r8, [r4]
   26c08:	ldr	r5, [r4, #4]
   26c0c:	ldr	r2, [sp, #64]	; 0x40
   26c10:	ldr	r3, [sp, #24]
   26c14:	ldr	ip, [sp, #68]	; 0x44
   26c18:	orr	r6, r6, #1
   26c1c:	add	sl, sp, #32
   26c20:	str	r2, [sp, #12]
   26c24:	str	r3, [sp]
   26c28:	str	r6, [sp, #4]
   26c2c:	mov	r1, r8
   26c30:	mov	r0, r5
   26c34:	str	ip, [sp, #16]
   26c38:	str	sl, [sp, #8]
   26c3c:	mvn	r3, #0
   26c40:	mov	r2, r9
   26c44:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   26c48:	cmp	r8, r0
   26c4c:	bhi	26cac <_obstack_memory_used@@Base+0x2700>
   26c50:	ldr	r3, [pc, #156]	; 26cf4 <_obstack_memory_used@@Base+0x2748>
   26c54:	add	r8, r0, #1
   26c58:	cmp	r5, r3
   26c5c:	str	r8, [r4]
   26c60:	beq	26c6c <_obstack_memory_used@@Base+0x26c0>
   26c64:	mov	r0, r5
   26c68:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   26c6c:	mov	r0, r8
   26c70:	bl	29980 <_obstack_memory_used@@Base+0x53d4>
   26c74:	ldr	lr, [sp, #68]	; 0x44
   26c78:	ldr	r3, [sp, #24]
   26c7c:	ldr	ip, [sp, #64]	; 0x40
   26c80:	mov	r2, r9
   26c84:	mov	r1, r8
   26c88:	str	r0, [r4, #4]
   26c8c:	str	r3, [sp]
   26c90:	str	sl, [sp, #8]
   26c94:	str	r6, [sp, #4]
   26c98:	str	lr, [sp, #16]
   26c9c:	str	ip, [sp, #12]
   26ca0:	mvn	r3, #0
   26ca4:	mov	r5, r0
   26ca8:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   26cac:	mov	r0, r5
   26cb0:	str	fp, [r7]
   26cb4:	add	sp, sp, #124	; 0x7c
   26cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26cbc:	mov	r3, #8
   26cc0:	add	r1, sp, #72	; 0x48
   26cc4:	str	r3, [sp]
   26cc8:	rsb	r2, r2, #1
   26ccc:	mvn	r3, #-2147483648	; 0x80000000
   26cd0:	mov	r0, #0
   26cd4:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   26cd8:	mov	r4, r0
   26cdc:	ldm	r6, {r0, r1}
   26ce0:	str	r4, [r5]
   26ce4:	stm	r4, {r0, r1}
   26ce8:	b	26bdc <_obstack_memory_used@@Base+0x2630>
   26cec:	bl	11d2c <abort@plt>
   26cf0:	andeq	r1, r4, ip, asr #5
   26cf4:	andeq	r2, r4, r0, lsr #8
   26cf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26cfc:	sub	sp, sp, #132	; 0x84
   26d00:	mov	r4, r0
   26d04:	mov	r9, r1
   26d08:	mov	sl, r2
   26d0c:	add	r0, sp, #80	; 0x50
   26d10:	mov	r2, #48	; 0x30
   26d14:	mov	r1, #0
   26d18:	bl	11be8 <memset@plt>
   26d1c:	cmp	r4, #10
   26d20:	beq	26eb4 <_obstack_memory_used@@Base+0x2908>
   26d24:	add	lr, sp, #80	; 0x50
   26d28:	str	r4, [sp, #80]	; 0x50
   26d2c:	ldm	lr!, {r0, r1, r2, r3}
   26d30:	add	ip, sp, #32
   26d34:	ldr	r5, [pc, #380]	; 26eb8 <_obstack_memory_used@@Base+0x290c>
   26d38:	stmia	ip!, {r0, r1, r2, r3}
   26d3c:	ldm	lr!, {r0, r1, r2, r3}
   26d40:	stmia	ip!, {r0, r1, r2, r3}
   26d44:	ldm	lr, {r0, r1, r2, r3}
   26d48:	stm	ip, {r0, r1, r2, r3}
   26d4c:	bl	11bb8 <__errno_location@plt>
   26d50:	ldr	r2, [r5, #4]
   26d54:	ldr	r4, [r5]
   26d58:	cmp	r2, #0
   26d5c:	ldr	r3, [r0]
   26d60:	mov	r7, r0
   26d64:	str	r3, [sp, #28]
   26d68:	bgt	26dc4 <_obstack_memory_used@@Base+0x2818>
   26d6c:	add	r6, r5, #8
   26d70:	cmp	r4, r6
   26d74:	str	r2, [sp, #80]	; 0x50
   26d78:	beq	26e84 <_obstack_memory_used@@Base+0x28d8>
   26d7c:	mov	r3, #8
   26d80:	mov	r0, r4
   26d84:	str	r3, [sp]
   26d88:	rsb	r2, r2, #1
   26d8c:	add	r1, sp, #80	; 0x50
   26d90:	mvn	r3, #-2147483648	; 0x80000000
   26d94:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   26d98:	mov	r4, r0
   26d9c:	str	r0, [r5]
   26da0:	ldr	r0, [r5, #4]
   26da4:	ldr	r2, [sp, #80]	; 0x50
   26da8:	mov	r1, #0
   26dac:	sub	r2, r2, r0
   26db0:	add	r0, r4, r0, lsl #3
   26db4:	lsl	r2, r2, #3
   26db8:	bl	11be8 <memset@plt>
   26dbc:	ldr	r3, [sp, #80]	; 0x50
   26dc0:	str	r3, [r5, #4]
   26dc4:	ldr	r6, [sp, #36]	; 0x24
   26dc8:	ldr	r8, [r4]
   26dcc:	ldr	r5, [r4, #4]
   26dd0:	ldr	r2, [sp, #72]	; 0x48
   26dd4:	ldr	r3, [sp, #32]
   26dd8:	ldr	ip, [sp, #76]	; 0x4c
   26ddc:	orr	r6, r6, #1
   26de0:	add	fp, sp, #40	; 0x28
   26de4:	str	r2, [sp, #12]
   26de8:	str	r3, [sp]
   26dec:	str	r6, [sp, #4]
   26df0:	mov	r1, r8
   26df4:	mov	r0, r5
   26df8:	str	ip, [sp, #16]
   26dfc:	str	fp, [sp, #8]
   26e00:	mov	r3, sl
   26e04:	mov	r2, r9
   26e08:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   26e0c:	cmp	r8, r0
   26e10:	bhi	26e70 <_obstack_memory_used@@Base+0x28c4>
   26e14:	ldr	r3, [pc, #160]	; 26ebc <_obstack_memory_used@@Base+0x2910>
   26e18:	add	r8, r0, #1
   26e1c:	cmp	r5, r3
   26e20:	str	r8, [r4]
   26e24:	beq	26e30 <_obstack_memory_used@@Base+0x2884>
   26e28:	mov	r0, r5
   26e2c:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   26e30:	mov	r0, r8
   26e34:	bl	29980 <_obstack_memory_used@@Base+0x53d4>
   26e38:	ldr	ip, [sp, #76]	; 0x4c
   26e3c:	ldr	lr, [sp, #32]
   26e40:	mov	r3, sl
   26e44:	mov	r2, r9
   26e48:	mov	r1, r8
   26e4c:	str	r0, [r4, #4]
   26e50:	ldr	r4, [sp, #72]	; 0x48
   26e54:	str	fp, [sp, #8]
   26e58:	str	r6, [sp, #4]
   26e5c:	str	ip, [sp, #16]
   26e60:	str	r4, [sp, #12]
   26e64:	str	lr, [sp]
   26e68:	mov	r5, r0
   26e6c:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   26e70:	ldr	r3, [sp, #28]
   26e74:	mov	r0, r5
   26e78:	str	r3, [r7]
   26e7c:	add	sp, sp, #132	; 0x84
   26e80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26e84:	mov	r3, #8
   26e88:	add	r1, sp, #80	; 0x50
   26e8c:	str	r3, [sp]
   26e90:	rsb	r2, r2, #1
   26e94:	mvn	r3, #-2147483648	; 0x80000000
   26e98:	mov	r0, #0
   26e9c:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   26ea0:	mov	r4, r0
   26ea4:	ldm	r6, {r0, r1}
   26ea8:	str	r4, [r5]
   26eac:	stm	r4, {r0, r1}
   26eb0:	b	26da0 <_obstack_memory_used@@Base+0x27f4>
   26eb4:	bl	11d2c <abort@plt>
   26eb8:	andeq	r1, r4, ip, asr #5
   26ebc:	andeq	r2, r4, r0, lsr #8
   26ec0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26ec4:	mov	r4, r2
   26ec8:	ldr	lr, [pc, #432]	; 27080 <_obstack_memory_used@@Base+0x2ad4>
   26ecc:	mov	sl, r0
   26ed0:	mov	fp, r1
   26ed4:	ldm	lr!, {r0, r1, r2, r3}
   26ed8:	sub	sp, sp, #92	; 0x5c
   26edc:	add	ip, sp, #40	; 0x28
   26ee0:	lsr	r7, r4, #5
   26ee4:	stmia	ip!, {r0, r1, r2, r3}
   26ee8:	add	r6, sp, #48	; 0x30
   26eec:	ldm	lr!, {r0, r1, r2, r3}
   26ef0:	and	r4, r4, #31
   26ef4:	ldr	r5, [pc, #392]	; 27084 <_obstack_memory_used@@Base+0x2ad8>
   26ef8:	stmia	ip!, {r0, r1, r2, r3}
   26efc:	ldm	lr, {r0, r1, r2, r3}
   26f00:	stm	ip, {r0, r1, r2, r3}
   26f04:	ldr	r2, [r6, r7, lsl #2]
   26f08:	lsr	r3, r2, r4
   26f0c:	eor	r3, r3, #1
   26f10:	and	r3, r3, #1
   26f14:	eor	r4, r2, r3, lsl r4
   26f18:	str	r4, [r6, r7, lsl #2]
   26f1c:	bl	11bb8 <__errno_location@plt>
   26f20:	ldr	r2, [r5, #4]
   26f24:	ldr	r4, [r5]
   26f28:	cmp	r2, #0
   26f2c:	ldr	r3, [r0]
   26f30:	mov	r8, r0
   26f34:	str	r3, [sp, #28]
   26f38:	bgt	26f94 <_obstack_memory_used@@Base+0x29e8>
   26f3c:	add	r7, r5, #8
   26f40:	cmp	r4, r7
   26f44:	str	r2, [sp, #36]	; 0x24
   26f48:	beq	27050 <_obstack_memory_used@@Base+0x2aa4>
   26f4c:	mov	r3, #8
   26f50:	mov	r0, r4
   26f54:	str	r3, [sp]
   26f58:	rsb	r2, r2, #1
   26f5c:	mvn	r3, #-2147483648	; 0x80000000
   26f60:	add	r1, sp, #36	; 0x24
   26f64:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   26f68:	mov	r4, r0
   26f6c:	str	r0, [r5]
   26f70:	ldr	r0, [r5, #4]
   26f74:	ldr	r2, [sp, #36]	; 0x24
   26f78:	mov	r1, #0
   26f7c:	sub	r2, r2, r0
   26f80:	add	r0, r4, r0, lsl #3
   26f84:	lsl	r2, r2, #3
   26f88:	bl	11be8 <memset@plt>
   26f8c:	ldr	r3, [sp, #36]	; 0x24
   26f90:	str	r3, [r5, #4]
   26f94:	ldr	r7, [sp, #44]	; 0x2c
   26f98:	ldr	r9, [r4]
   26f9c:	ldr	r5, [r4, #4]
   26fa0:	ldr	r2, [sp, #80]	; 0x50
   26fa4:	ldr	r3, [sp, #40]	; 0x28
   26fa8:	ldr	ip, [sp, #84]	; 0x54
   26fac:	orr	r7, r7, #1
   26fb0:	str	r2, [sp, #12]
   26fb4:	str	r3, [sp]
   26fb8:	str	r7, [sp, #4]
   26fbc:	str	r6, [sp, #8]
   26fc0:	mov	r1, r9
   26fc4:	mov	r0, r5
   26fc8:	str	ip, [sp, #16]
   26fcc:	mov	r3, fp
   26fd0:	mov	r2, sl
   26fd4:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   26fd8:	cmp	r9, r0
   26fdc:	bhi	2703c <_obstack_memory_used@@Base+0x2a90>
   26fe0:	ldr	r3, [pc, #160]	; 27088 <_obstack_memory_used@@Base+0x2adc>
   26fe4:	add	r9, r0, #1
   26fe8:	cmp	r5, r3
   26fec:	str	r9, [r4]
   26ff0:	beq	26ffc <_obstack_memory_used@@Base+0x2a50>
   26ff4:	mov	r0, r5
   26ff8:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   26ffc:	mov	r0, r9
   27000:	bl	29980 <_obstack_memory_used@@Base+0x53d4>
   27004:	ldr	ip, [sp, #84]	; 0x54
   27008:	ldr	lr, [sp, #40]	; 0x28
   2700c:	mov	r3, fp
   27010:	mov	r2, sl
   27014:	mov	r1, r9
   27018:	str	r0, [r4, #4]
   2701c:	ldr	r4, [sp, #80]	; 0x50
   27020:	str	r6, [sp, #8]
   27024:	str	r7, [sp, #4]
   27028:	str	ip, [sp, #16]
   2702c:	str	r4, [sp, #12]
   27030:	str	lr, [sp]
   27034:	mov	r5, r0
   27038:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   2703c:	ldr	r3, [sp, #28]
   27040:	mov	r0, r5
   27044:	str	r3, [r8]
   27048:	add	sp, sp, #92	; 0x5c
   2704c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27050:	mov	r3, #8
   27054:	str	r3, [sp]
   27058:	add	r1, sp, #36	; 0x24
   2705c:	rsb	r2, r2, #1
   27060:	mvn	r3, #-2147483648	; 0x80000000
   27064:	mov	r0, #0
   27068:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   2706c:	mov	r4, r0
   27070:	ldm	r7, {r0, r1}
   27074:	str	r4, [r5]
   27078:	stm	r4, {r0, r1}
   2707c:	b	26f70 <_obstack_memory_used@@Base+0x29c4>
   27080:	strdeq	r2, [r4], -r0
   27084:	andeq	r1, r4, ip, asr #5
   27088:	andeq	r2, r4, r0, lsr #8
   2708c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27090:	mov	r4, r1
   27094:	ldr	lr, [pc, #420]	; 27240 <_obstack_memory_used@@Base+0x2c94>
   27098:	mov	r6, r0
   2709c:	sub	sp, sp, #84	; 0x54
   270a0:	ldm	lr!, {r0, r1, r2, r3}
   270a4:	add	ip, sp, #32
   270a8:	lsr	r8, r4, #5
   270ac:	add	r5, sp, #40	; 0x28
   270b0:	stmia	ip!, {r0, r1, r2, r3}
   270b4:	and	r4, r4, #31
   270b8:	ldm	lr!, {r0, r1, r2, r3}
   270bc:	ldr	r7, [pc, #384]	; 27244 <_obstack_memory_used@@Base+0x2c98>
   270c0:	stmia	ip!, {r0, r1, r2, r3}
   270c4:	ldm	lr, {r0, r1, r2, r3}
   270c8:	stm	ip, {r0, r1, r2, r3}
   270cc:	ldr	r2, [r5, r8, lsl #2]
   270d0:	lsr	r3, r2, r4
   270d4:	eor	r3, r3, #1
   270d8:	and	r3, r3, #1
   270dc:	eor	r4, r2, r3, lsl r4
   270e0:	str	r4, [r5, r8, lsl #2]
   270e4:	bl	11bb8 <__errno_location@plt>
   270e8:	ldr	r2, [r7, #4]
   270ec:	ldr	r4, [r7]
   270f0:	cmp	r2, #0
   270f4:	mov	r9, r0
   270f8:	ldr	sl, [r0]
   270fc:	bgt	27158 <_obstack_memory_used@@Base+0x2bac>
   27100:	add	r8, r7, #8
   27104:	cmp	r4, r8
   27108:	str	r2, [sp, #28]
   2710c:	beq	27210 <_obstack_memory_used@@Base+0x2c64>
   27110:	mov	r3, #8
   27114:	mov	r0, r4
   27118:	str	r3, [sp]
   2711c:	rsb	r2, r2, #1
   27120:	mvn	r3, #-2147483648	; 0x80000000
   27124:	add	r1, sp, #28
   27128:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   2712c:	mov	r4, r0
   27130:	str	r0, [r7]
   27134:	ldr	r0, [r7, #4]
   27138:	ldr	r2, [sp, #28]
   2713c:	mov	r1, #0
   27140:	sub	r2, r2, r0
   27144:	add	r0, r4, r0, lsl #3
   27148:	lsl	r2, r2, #3
   2714c:	bl	11be8 <memset@plt>
   27150:	ldr	r3, [sp, #28]
   27154:	str	r3, [r7, #4]
   27158:	ldr	r8, [sp, #36]	; 0x24
   2715c:	ldr	fp, [r4]
   27160:	ldr	r7, [r4, #4]
   27164:	ldr	r2, [sp, #72]	; 0x48
   27168:	ldr	r3, [sp, #32]
   2716c:	ldr	ip, [sp, #76]	; 0x4c
   27170:	orr	r8, r8, #1
   27174:	str	r2, [sp, #12]
   27178:	str	r3, [sp]
   2717c:	str	r8, [sp, #4]
   27180:	str	r5, [sp, #8]
   27184:	mov	r1, fp
   27188:	mov	r0, r7
   2718c:	str	ip, [sp, #16]
   27190:	mvn	r3, #0
   27194:	mov	r2, r6
   27198:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   2719c:	cmp	fp, r0
   271a0:	bhi	27200 <_obstack_memory_used@@Base+0x2c54>
   271a4:	ldr	r3, [pc, #156]	; 27248 <_obstack_memory_used@@Base+0x2c9c>
   271a8:	add	fp, r0, #1
   271ac:	cmp	r7, r3
   271b0:	str	fp, [r4]
   271b4:	beq	271c0 <_obstack_memory_used@@Base+0x2c14>
   271b8:	mov	r0, r7
   271bc:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   271c0:	mov	r0, fp
   271c4:	bl	29980 <_obstack_memory_used@@Base+0x53d4>
   271c8:	ldr	lr, [sp, #76]	; 0x4c
   271cc:	ldr	r3, [sp, #32]
   271d0:	ldr	ip, [sp, #72]	; 0x48
   271d4:	mov	r2, r6
   271d8:	mov	r1, fp
   271dc:	str	r0, [r4, #4]
   271e0:	str	r3, [sp]
   271e4:	str	r5, [sp, #8]
   271e8:	str	r8, [sp, #4]
   271ec:	str	lr, [sp, #16]
   271f0:	str	ip, [sp, #12]
   271f4:	mvn	r3, #0
   271f8:	mov	r7, r0
   271fc:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   27200:	mov	r0, r7
   27204:	str	sl, [r9]
   27208:	add	sp, sp, #84	; 0x54
   2720c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27210:	mov	r3, #8
   27214:	str	r3, [sp]
   27218:	add	r1, sp, #28
   2721c:	rsb	r2, r2, #1
   27220:	mvn	r3, #-2147483648	; 0x80000000
   27224:	mov	r0, #0
   27228:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   2722c:	mov	r4, r0
   27230:	ldm	r8, {r0, r1}
   27234:	str	r4, [r7]
   27238:	stm	r4, {r0, r1}
   2723c:	b	27134 <_obstack_memory_used@@Base+0x2b88>
   27240:	strdeq	r2, [r4], -r0
   27244:	andeq	r1, r4, ip, asr #5
   27248:	andeq	r2, r4, r0, lsr #8
   2724c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27250:	mov	r6, r0
   27254:	ldr	lr, [pc, #404]	; 273f0 <_obstack_memory_used@@Base+0x2e44>
   27258:	sub	sp, sp, #84	; 0x54
   2725c:	add	ip, sp, #32
   27260:	ldm	lr!, {r0, r1, r2, r3}
   27264:	ldr	r5, [pc, #392]	; 273f4 <_obstack_memory_used@@Base+0x2e48>
   27268:	stmia	ip!, {r0, r1, r2, r3}
   2726c:	ldm	lr!, {r0, r1, r2, r3}
   27270:	ldr	r4, [sp, #44]	; 0x2c
   27274:	stmia	ip!, {r0, r1, r2, r3}
   27278:	ldm	lr, {r0, r1, r2, r3}
   2727c:	mvn	lr, r4
   27280:	and	lr, lr, #67108864	; 0x4000000
   27284:	eor	lr, lr, r4
   27288:	stm	ip, {r0, r1, r2, r3}
   2728c:	str	lr, [sp, #44]	; 0x2c
   27290:	bl	11bb8 <__errno_location@plt>
   27294:	ldr	r2, [r5, #4]
   27298:	ldr	r4, [r5]
   2729c:	cmp	r2, #0
   272a0:	mov	r8, r0
   272a4:	ldr	sl, [r0]
   272a8:	bgt	27304 <_obstack_memory_used@@Base+0x2d58>
   272ac:	add	r7, r5, #8
   272b0:	cmp	r4, r7
   272b4:	str	r2, [sp, #28]
   272b8:	beq	273c0 <_obstack_memory_used@@Base+0x2e14>
   272bc:	mov	r3, #8
   272c0:	mov	r0, r4
   272c4:	str	r3, [sp]
   272c8:	rsb	r2, r2, #1
   272cc:	mvn	r3, #-2147483648	; 0x80000000
   272d0:	add	r1, sp, #28
   272d4:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   272d8:	mov	r4, r0
   272dc:	str	r0, [r5]
   272e0:	ldr	r0, [r5, #4]
   272e4:	ldr	r2, [sp, #28]
   272e8:	mov	r1, #0
   272ec:	sub	r2, r2, r0
   272f0:	add	r0, r4, r0, lsl #3
   272f4:	lsl	r2, r2, #3
   272f8:	bl	11be8 <memset@plt>
   272fc:	ldr	r3, [sp, #28]
   27300:	str	r3, [r5, #4]
   27304:	ldr	r7, [sp, #36]	; 0x24
   27308:	ldr	r9, [r4]
   2730c:	ldr	r5, [r4, #4]
   27310:	ldr	r2, [sp, #72]	; 0x48
   27314:	ldr	r3, [sp, #32]
   27318:	ldr	ip, [sp, #76]	; 0x4c
   2731c:	orr	r7, r7, #1
   27320:	add	fp, sp, #40	; 0x28
   27324:	str	r2, [sp, #12]
   27328:	str	r3, [sp]
   2732c:	str	r7, [sp, #4]
   27330:	mov	r1, r9
   27334:	mov	r0, r5
   27338:	str	ip, [sp, #16]
   2733c:	str	fp, [sp, #8]
   27340:	mvn	r3, #0
   27344:	mov	r2, r6
   27348:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   2734c:	cmp	r9, r0
   27350:	bhi	273b0 <_obstack_memory_used@@Base+0x2e04>
   27354:	ldr	r3, [pc, #156]	; 273f8 <_obstack_memory_used@@Base+0x2e4c>
   27358:	add	r9, r0, #1
   2735c:	cmp	r5, r3
   27360:	str	r9, [r4]
   27364:	beq	27370 <_obstack_memory_used@@Base+0x2dc4>
   27368:	mov	r0, r5
   2736c:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   27370:	mov	r0, r9
   27374:	bl	29980 <_obstack_memory_used@@Base+0x53d4>
   27378:	ldr	lr, [sp, #76]	; 0x4c
   2737c:	ldr	r3, [sp, #32]
   27380:	ldr	ip, [sp, #72]	; 0x48
   27384:	mov	r2, r6
   27388:	mov	r1, r9
   2738c:	str	r0, [r4, #4]
   27390:	str	r3, [sp]
   27394:	str	fp, [sp, #8]
   27398:	str	r7, [sp, #4]
   2739c:	str	lr, [sp, #16]
   273a0:	str	ip, [sp, #12]
   273a4:	mvn	r3, #0
   273a8:	mov	r5, r0
   273ac:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   273b0:	mov	r0, r5
   273b4:	str	sl, [r8]
   273b8:	add	sp, sp, #84	; 0x54
   273bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   273c0:	mov	r3, #8
   273c4:	str	r3, [sp]
   273c8:	add	r1, sp, #28
   273cc:	rsb	r2, r2, #1
   273d0:	mvn	r3, #-2147483648	; 0x80000000
   273d4:	mov	r0, #0
   273d8:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   273dc:	mov	r4, r0
   273e0:	ldm	r7, {r0, r1}
   273e4:	str	r4, [r5]
   273e8:	stm	r4, {r0, r1}
   273ec:	b	272e0 <_obstack_memory_used@@Base+0x2d34>
   273f0:	strdeq	r2, [r4], -r0
   273f4:	andeq	r1, r4, ip, asr #5
   273f8:	andeq	r2, r4, r0, lsr #8
   273fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27400:	mov	r9, r0
   27404:	ldr	lr, [pc, #416]	; 275ac <_obstack_memory_used@@Base+0x3000>
   27408:	mov	sl, r1
   2740c:	sub	sp, sp, #92	; 0x5c
   27410:	ldm	lr!, {r0, r1, r2, r3}
   27414:	add	ip, sp, #40	; 0x28
   27418:	ldr	r5, [pc, #400]	; 275b0 <_obstack_memory_used@@Base+0x3004>
   2741c:	stmia	ip!, {r0, r1, r2, r3}
   27420:	ldm	lr!, {r0, r1, r2, r3}
   27424:	ldr	r4, [sp, #52]	; 0x34
   27428:	stmia	ip!, {r0, r1, r2, r3}
   2742c:	ldm	lr, {r0, r1, r2, r3}
   27430:	mvn	lr, r4
   27434:	and	lr, lr, #67108864	; 0x4000000
   27438:	eor	lr, lr, r4
   2743c:	stm	ip, {r0, r1, r2, r3}
   27440:	str	lr, [sp, #52]	; 0x34
   27444:	bl	11bb8 <__errno_location@plt>
   27448:	ldr	r2, [r5, #4]
   2744c:	ldr	r4, [r5]
   27450:	cmp	r2, #0
   27454:	ldr	r3, [r0]
   27458:	mov	r7, r0
   2745c:	str	r3, [sp, #28]
   27460:	bgt	274bc <_obstack_memory_used@@Base+0x2f10>
   27464:	add	r6, r5, #8
   27468:	cmp	r4, r6
   2746c:	str	r2, [sp, #36]	; 0x24
   27470:	beq	2757c <_obstack_memory_used@@Base+0x2fd0>
   27474:	mov	r3, #8
   27478:	mov	r0, r4
   2747c:	str	r3, [sp]
   27480:	rsb	r2, r2, #1
   27484:	mvn	r3, #-2147483648	; 0x80000000
   27488:	add	r1, sp, #36	; 0x24
   2748c:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   27490:	mov	r4, r0
   27494:	str	r0, [r5]
   27498:	ldr	r0, [r5, #4]
   2749c:	ldr	r2, [sp, #36]	; 0x24
   274a0:	mov	r1, #0
   274a4:	sub	r2, r2, r0
   274a8:	add	r0, r4, r0, lsl #3
   274ac:	lsl	r2, r2, #3
   274b0:	bl	11be8 <memset@plt>
   274b4:	ldr	r3, [sp, #36]	; 0x24
   274b8:	str	r3, [r5, #4]
   274bc:	ldr	r6, [sp, #44]	; 0x2c
   274c0:	ldr	r8, [r4]
   274c4:	ldr	r5, [r4, #4]
   274c8:	ldr	r2, [sp, #80]	; 0x50
   274cc:	ldr	r3, [sp, #40]	; 0x28
   274d0:	ldr	ip, [sp, #84]	; 0x54
   274d4:	orr	r6, r6, #1
   274d8:	add	fp, sp, #48	; 0x30
   274dc:	str	r2, [sp, #12]
   274e0:	str	r3, [sp]
   274e4:	str	r6, [sp, #4]
   274e8:	mov	r1, r8
   274ec:	mov	r0, r5
   274f0:	str	ip, [sp, #16]
   274f4:	str	fp, [sp, #8]
   274f8:	mov	r3, sl
   274fc:	mov	r2, r9
   27500:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   27504:	cmp	r8, r0
   27508:	bhi	27568 <_obstack_memory_used@@Base+0x2fbc>
   2750c:	ldr	r3, [pc, #160]	; 275b4 <_obstack_memory_used@@Base+0x3008>
   27510:	add	r8, r0, #1
   27514:	cmp	r5, r3
   27518:	str	r8, [r4]
   2751c:	beq	27528 <_obstack_memory_used@@Base+0x2f7c>
   27520:	mov	r0, r5
   27524:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   27528:	mov	r0, r8
   2752c:	bl	29980 <_obstack_memory_used@@Base+0x53d4>
   27530:	ldr	ip, [sp, #84]	; 0x54
   27534:	ldr	lr, [sp, #40]	; 0x28
   27538:	mov	r3, sl
   2753c:	mov	r2, r9
   27540:	mov	r1, r8
   27544:	str	r0, [r4, #4]
   27548:	ldr	r4, [sp, #80]	; 0x50
   2754c:	str	fp, [sp, #8]
   27550:	str	r6, [sp, #4]
   27554:	str	ip, [sp, #16]
   27558:	str	r4, [sp, #12]
   2755c:	str	lr, [sp]
   27560:	mov	r5, r0
   27564:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   27568:	ldr	r3, [sp, #28]
   2756c:	mov	r0, r5
   27570:	str	r3, [r7]
   27574:	add	sp, sp, #92	; 0x5c
   27578:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2757c:	mov	r3, #8
   27580:	str	r3, [sp]
   27584:	add	r1, sp, #36	; 0x24
   27588:	rsb	r2, r2, #1
   2758c:	mvn	r3, #-2147483648	; 0x80000000
   27590:	mov	r0, #0
   27594:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   27598:	mov	r4, r0
   2759c:	ldm	r6, {r0, r1}
   275a0:	str	r4, [r5]
   275a4:	stm	r4, {r0, r1}
   275a8:	b	27498 <_obstack_memory_used@@Base+0x2eec>
   275ac:	strdeq	r2, [r4], -r0
   275b0:	andeq	r1, r4, ip, asr #5
   275b4:	andeq	r2, r4, r0, lsr #8
   275b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   275bc:	sub	sp, sp, #180	; 0xb4
   275c0:	mov	r6, r1
   275c4:	mov	r4, r0
   275c8:	mov	r9, r2
   275cc:	add	r0, sp, #80	; 0x50
   275d0:	mov	r2, #48	; 0x30
   275d4:	mov	r1, #0
   275d8:	bl	11be8 <memset@plt>
   275dc:	cmp	r6, #10
   275e0:	beq	277c0 <_obstack_memory_used@@Base+0x3214>
   275e4:	add	r5, sp, #80	; 0x50
   275e8:	str	r6, [sp, #80]	; 0x50
   275ec:	ldm	r5!, {r0, r1, r2, r3}
   275f0:	add	ip, sp, #128	; 0x80
   275f4:	mov	r7, ip
   275f8:	add	lr, sp, #32
   275fc:	stmia	ip!, {r0, r1, r2, r3}
   27600:	mov	r8, #67108864	; 0x4000000
   27604:	ldm	r5!, {r0, r1, r2, r3}
   27608:	ldr	r6, [pc, #436]	; 277c4 <_obstack_memory_used@@Base+0x3218>
   2760c:	stmia	ip!, {r0, r1, r2, r3}
   27610:	ldm	r5, {r0, r1, r2, r3}
   27614:	stm	ip, {r0, r1, r2, r3}
   27618:	ldm	r7!, {r0, r1, r2, r3}
   2761c:	stmia	lr!, {r0, r1, r2, r3}
   27620:	ldm	r7!, {r0, r1, r2, r3}
   27624:	str	r8, [sp, #44]	; 0x2c
   27628:	stmia	lr!, {r0, r1, r2, r3}
   2762c:	ldm	ip, {r0, r1, r2, r3}
   27630:	stm	lr, {r0, r1, r2, r3}
   27634:	bl	11bb8 <__errno_location@plt>
   27638:	cmn	r4, #-2147483647	; 0x80000001
   2763c:	ldr	r5, [r6]
   27640:	mov	r7, r0
   27644:	movne	r0, #0
   27648:	moveq	r0, #1
   2764c:	ldr	r3, [r7]
   27650:	orrs	r0, r0, r4, lsr #31
   27654:	str	r3, [sp, #24]
   27658:	bne	277c0 <_obstack_memory_used@@Base+0x3214>
   2765c:	ldr	r2, [r6, #4]
   27660:	cmp	r4, r2
   27664:	blt	276c4 <_obstack_memory_used@@Base+0x3118>
   27668:	add	r8, r6, #8
   2766c:	cmp	r5, r8
   27670:	str	r2, [sp, #80]	; 0x50
   27674:	beq	27790 <_obstack_memory_used@@Base+0x31e4>
   27678:	mov	r3, #8
   2767c:	sub	r2, r4, r2
   27680:	mov	r0, r5
   27684:	str	r3, [sp]
   27688:	add	r2, r2, #1
   2768c:	add	r1, sp, #80	; 0x50
   27690:	mvn	r3, #-2147483648	; 0x80000000
   27694:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   27698:	mov	r5, r0
   2769c:	str	r0, [r6]
   276a0:	ldr	r0, [r6, #4]
   276a4:	ldr	r2, [sp, #80]	; 0x50
   276a8:	mov	r1, #0
   276ac:	sub	r2, r2, r0
   276b0:	add	r0, r5, r0, lsl #3
   276b4:	lsl	r2, r2, #3
   276b8:	bl	11be8 <memset@plt>
   276bc:	ldr	r3, [sp, #80]	; 0x50
   276c0:	str	r3, [r6, #4]
   276c4:	add	fp, r5, r4, lsl #3
   276c8:	ldr	r1, [sp, #36]	; 0x24
   276cc:	ldr	r8, [r5, r4, lsl #3]
   276d0:	ldr	r6, [fp, #4]
   276d4:	ldr	r2, [sp, #72]	; 0x48
   276d8:	ldr	r3, [sp, #32]
   276dc:	ldr	ip, [sp, #76]	; 0x4c
   276e0:	orr	r1, r1, #1
   276e4:	add	sl, sp, #40	; 0x28
   276e8:	str	r1, [sp, #28]
   276ec:	str	r1, [sp, #4]
   276f0:	str	r2, [sp, #12]
   276f4:	str	r3, [sp]
   276f8:	mov	r0, r6
   276fc:	mov	r1, r8
   27700:	str	ip, [sp, #16]
   27704:	str	sl, [sp, #8]
   27708:	mvn	r3, #0
   2770c:	mov	r2, r9
   27710:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   27714:	cmp	r8, r0
   27718:	bhi	2777c <_obstack_memory_used@@Base+0x31d0>
   2771c:	ldr	r3, [pc, #164]	; 277c8 <_obstack_memory_used@@Base+0x321c>
   27720:	add	r8, r0, #1
   27724:	cmp	r6, r3
   27728:	str	r8, [r5, r4, lsl #3]
   2772c:	beq	27738 <_obstack_memory_used@@Base+0x318c>
   27730:	mov	r0, r6
   27734:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   27738:	mov	r0, r8
   2773c:	bl	29980 <_obstack_memory_used@@Base+0x53d4>
   27740:	ldr	lr, [sp, #76]	; 0x4c
   27744:	ldr	r3, [sp, #32]
   27748:	ldr	ip, [sp, #72]	; 0x48
   2774c:	ldr	r4, [sp, #28]
   27750:	mov	r2, r9
   27754:	mov	r1, r8
   27758:	str	r0, [fp, #4]
   2775c:	str	r3, [sp]
   27760:	str	sl, [sp, #8]
   27764:	str	r4, [sp, #4]
   27768:	str	lr, [sp, #16]
   2776c:	str	ip, [sp, #12]
   27770:	mvn	r3, #0
   27774:	mov	r6, r0
   27778:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   2777c:	ldr	r3, [sp, #24]
   27780:	mov	r0, r6
   27784:	str	r3, [r7]
   27788:	add	sp, sp, #180	; 0xb4
   2778c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27790:	mov	r3, #8
   27794:	sub	r2, r4, r2
   27798:	add	r1, sp, #80	; 0x50
   2779c:	str	r3, [sp]
   277a0:	add	r2, r2, #1
   277a4:	mvn	r3, #-2147483648	; 0x80000000
   277a8:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   277ac:	mov	r5, r0
   277b0:	ldm	r8, {r0, r1}
   277b4:	str	r5, [r6]
   277b8:	stm	r5, {r0, r1}
   277bc:	b	276a0 <_obstack_memory_used@@Base+0x30f4>
   277c0:	bl	11d2c <abort@plt>
   277c4:	andeq	r1, r4, ip, asr #5
   277c8:	andeq	r2, r4, r0, lsr #8
   277cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   277d0:	mov	r7, r1
   277d4:	ldr	lr, [pc, #492]	; 279c8 <_obstack_memory_used@@Base+0x341c>
   277d8:	mov	r8, r2
   277dc:	mov	r4, r0
   277e0:	mov	fp, r3
   277e4:	ldm	lr!, {r0, r1, r2, r3}
   277e8:	sub	sp, sp, #100	; 0x64
   277ec:	add	ip, sp, #48	; 0x30
   277f0:	mov	sl, #10
   277f4:	stmia	ip!, {r0, r1, r2, r3}
   277f8:	cmp	r8, #0
   277fc:	cmpne	r7, #0
   27800:	ldm	lr!, {r0, r1, r2, r3}
   27804:	str	sl, [sp, #48]	; 0x30
   27808:	stmia	ip!, {r0, r1, r2, r3}
   2780c:	ldm	lr, {r0, r1, r2, r3}
   27810:	stm	ip, {r0, r1, r2, r3}
   27814:	beq	279c4 <_obstack_memory_used@@Base+0x3418>
   27818:	str	r7, [sp, #88]	; 0x58
   2781c:	str	r8, [sp, #92]	; 0x5c
   27820:	bl	11bb8 <__errno_location@plt>
   27824:	ldr	r6, [pc, #416]	; 279cc <_obstack_memory_used@@Base+0x3420>
   27828:	cmn	r4, #-2147483647	; 0x80000001
   2782c:	ldr	r5, [r6]
   27830:	mov	r9, r0
   27834:	movne	r0, #0
   27838:	moveq	r0, #1
   2783c:	ldr	r3, [r9]
   27840:	orrs	r0, r0, r4, lsr #31
   27844:	str	r3, [sp, #28]
   27848:	bne	279c4 <_obstack_memory_used@@Base+0x3418>
   2784c:	ldr	r2, [r6, #4]
   27850:	cmp	r4, r2
   27854:	movlt	r3, sl
   27858:	blt	278c4 <_obstack_memory_used@@Base+0x3318>
   2785c:	add	r7, r6, #8
   27860:	cmp	r5, r7
   27864:	str	r2, [sp, #44]	; 0x2c
   27868:	beq	27994 <_obstack_memory_used@@Base+0x33e8>
   2786c:	mov	r3, #8
   27870:	sub	r2, r4, r2
   27874:	mov	r0, r5
   27878:	str	r3, [sp]
   2787c:	add	r2, r2, #1
   27880:	mvn	r3, #-2147483648	; 0x80000000
   27884:	add	r1, sp, #44	; 0x2c
   27888:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   2788c:	mov	r5, r0
   27890:	str	r0, [r6]
   27894:	ldr	r0, [r6, #4]
   27898:	ldr	r2, [sp, #44]	; 0x2c
   2789c:	mov	r1, #0
   278a0:	sub	r2, r2, r0
   278a4:	add	r0, r5, r0, lsl #3
   278a8:	lsl	r2, r2, #3
   278ac:	bl	11be8 <memset@plt>
   278b0:	ldr	r3, [sp, #48]	; 0x30
   278b4:	ldr	r7, [sp, #88]	; 0x58
   278b8:	ldr	r8, [sp, #92]	; 0x5c
   278bc:	ldr	r2, [sp, #44]	; 0x2c
   278c0:	str	r2, [r6, #4]
   278c4:	add	r2, r5, r4, lsl #3
   278c8:	mov	r1, r2
   278cc:	str	r2, [sp, #32]
   278d0:	ldr	r2, [sp, #52]	; 0x34
   278d4:	ldr	r6, [r1, #4]
   278d8:	ldr	sl, [r5, r4, lsl #3]
   278dc:	orr	r2, r2, #1
   278e0:	str	r3, [sp]
   278e4:	add	r3, sp, #56	; 0x38
   278e8:	str	r2, [sp, #36]	; 0x24
   278ec:	str	r2, [sp, #4]
   278f0:	str	r3, [sp, #8]
   278f4:	mov	r0, r6
   278f8:	str	r8, [sp, #16]
   278fc:	str	r7, [sp, #12]
   27900:	mov	r1, sl
   27904:	mvn	r3, #0
   27908:	mov	r2, fp
   2790c:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   27910:	cmp	sl, r0
   27914:	bhi	27980 <_obstack_memory_used@@Base+0x33d4>
   27918:	ldr	r3, [pc, #176]	; 279d0 <_obstack_memory_used@@Base+0x3424>
   2791c:	add	r7, r0, #1
   27920:	cmp	r6, r3
   27924:	str	r7, [r5, r4, lsl #3]
   27928:	beq	27934 <_obstack_memory_used@@Base+0x3388>
   2792c:	mov	r0, r6
   27930:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   27934:	mov	r0, r7
   27938:	bl	29980 <_obstack_memory_used@@Base+0x53d4>
   2793c:	ldr	r3, [sp, #32]
   27940:	ldr	lr, [sp, #92]	; 0x5c
   27944:	ldr	ip, [sp, #88]	; 0x58
   27948:	ldr	r4, [sp, #36]	; 0x24
   2794c:	mov	r2, fp
   27950:	mov	r1, r7
   27954:	str	r0, [r3, #4]
   27958:	add	r3, sp, #56	; 0x38
   2795c:	str	r3, [sp, #8]
   27960:	ldr	r3, [sp, #48]	; 0x30
   27964:	str	r4, [sp, #4]
   27968:	str	r3, [sp]
   2796c:	str	lr, [sp, #16]
   27970:	str	ip, [sp, #12]
   27974:	mvn	r3, #0
   27978:	mov	r6, r0
   2797c:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   27980:	ldr	r3, [sp, #28]
   27984:	mov	r0, r6
   27988:	str	r3, [r9]
   2798c:	add	sp, sp, #100	; 0x64
   27990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27994:	mov	r3, #8
   27998:	sub	r2, r4, r2
   2799c:	str	r3, [sp]
   279a0:	add	r1, sp, #44	; 0x2c
   279a4:	add	r2, r2, #1
   279a8:	mvn	r3, #-2147483648	; 0x80000000
   279ac:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   279b0:	mov	r5, r0
   279b4:	ldm	r7, {r0, r1}
   279b8:	str	r5, [r6]
   279bc:	stm	r5, {r0, r1}
   279c0:	b	27894 <_obstack_memory_used@@Base+0x32e8>
   279c4:	bl	11d2c <abort@plt>
   279c8:	strdeq	r2, [r4], -r0
   279cc:	andeq	r1, r4, ip, asr #5
   279d0:	andeq	r2, r4, r0, lsr #8
   279d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   279d8:	mov	r7, r1
   279dc:	ldr	lr, [pc, #492]	; 27bd0 <_obstack_memory_used@@Base+0x3624>
   279e0:	mov	r8, r2
   279e4:	mov	r4, r0
   279e8:	mov	fp, r3
   279ec:	ldm	lr!, {r0, r1, r2, r3}
   279f0:	sub	sp, sp, #100	; 0x64
   279f4:	add	ip, sp, #48	; 0x30
   279f8:	mov	sl, #10
   279fc:	stmia	ip!, {r0, r1, r2, r3}
   27a00:	cmp	r8, #0
   27a04:	cmpne	r7, #0
   27a08:	ldm	lr!, {r0, r1, r2, r3}
   27a0c:	str	sl, [sp, #48]	; 0x30
   27a10:	stmia	ip!, {r0, r1, r2, r3}
   27a14:	ldm	lr, {r0, r1, r2, r3}
   27a18:	stm	ip, {r0, r1, r2, r3}
   27a1c:	beq	27bcc <_obstack_memory_used@@Base+0x3620>
   27a20:	str	r7, [sp, #88]	; 0x58
   27a24:	str	r8, [sp, #92]	; 0x5c
   27a28:	bl	11bb8 <__errno_location@plt>
   27a2c:	ldr	r6, [pc, #416]	; 27bd4 <_obstack_memory_used@@Base+0x3628>
   27a30:	cmn	r4, #-2147483647	; 0x80000001
   27a34:	ldr	r5, [r6]
   27a38:	mov	r9, r0
   27a3c:	movne	r0, #0
   27a40:	moveq	r0, #1
   27a44:	ldr	r3, [r9]
   27a48:	orrs	r0, r0, r4, lsr #31
   27a4c:	str	r3, [sp, #28]
   27a50:	bne	27bcc <_obstack_memory_used@@Base+0x3620>
   27a54:	ldr	r2, [r6, #4]
   27a58:	cmp	r4, r2
   27a5c:	movlt	r3, sl
   27a60:	blt	27acc <_obstack_memory_used@@Base+0x3520>
   27a64:	add	r7, r6, #8
   27a68:	cmp	r5, r7
   27a6c:	str	r2, [sp, #44]	; 0x2c
   27a70:	beq	27b9c <_obstack_memory_used@@Base+0x35f0>
   27a74:	mov	r3, #8
   27a78:	sub	r2, r4, r2
   27a7c:	mov	r0, r5
   27a80:	str	r3, [sp]
   27a84:	add	r2, r2, #1
   27a88:	mvn	r3, #-2147483648	; 0x80000000
   27a8c:	add	r1, sp, #44	; 0x2c
   27a90:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   27a94:	mov	r5, r0
   27a98:	str	r0, [r6]
   27a9c:	ldr	r0, [r6, #4]
   27aa0:	ldr	r2, [sp, #44]	; 0x2c
   27aa4:	mov	r1, #0
   27aa8:	sub	r2, r2, r0
   27aac:	add	r0, r5, r0, lsl #3
   27ab0:	lsl	r2, r2, #3
   27ab4:	bl	11be8 <memset@plt>
   27ab8:	ldr	r3, [sp, #48]	; 0x30
   27abc:	ldr	r7, [sp, #88]	; 0x58
   27ac0:	ldr	r8, [sp, #92]	; 0x5c
   27ac4:	ldr	r2, [sp, #44]	; 0x2c
   27ac8:	str	r2, [r6, #4]
   27acc:	add	r2, r5, r4, lsl #3
   27ad0:	mov	r1, r2
   27ad4:	str	r2, [sp, #32]
   27ad8:	ldr	r2, [sp, #52]	; 0x34
   27adc:	ldr	r6, [r1, #4]
   27ae0:	ldr	sl, [r5, r4, lsl #3]
   27ae4:	orr	r2, r2, #1
   27ae8:	str	r3, [sp]
   27aec:	add	r3, sp, #56	; 0x38
   27af0:	str	r2, [sp, #36]	; 0x24
   27af4:	str	r2, [sp, #4]
   27af8:	str	r3, [sp, #8]
   27afc:	mov	r0, r6
   27b00:	str	r8, [sp, #16]
   27b04:	str	r7, [sp, #12]
   27b08:	mov	r1, sl
   27b0c:	ldr	r3, [sp, #136]	; 0x88
   27b10:	mov	r2, fp
   27b14:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   27b18:	cmp	sl, r0
   27b1c:	bhi	27b88 <_obstack_memory_used@@Base+0x35dc>
   27b20:	ldr	r3, [pc, #176]	; 27bd8 <_obstack_memory_used@@Base+0x362c>
   27b24:	add	r7, r0, #1
   27b28:	cmp	r6, r3
   27b2c:	str	r7, [r5, r4, lsl #3]
   27b30:	beq	27b3c <_obstack_memory_used@@Base+0x3590>
   27b34:	mov	r0, r6
   27b38:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   27b3c:	mov	r0, r7
   27b40:	bl	29980 <_obstack_memory_used@@Base+0x53d4>
   27b44:	ldr	r3, [sp, #32]
   27b48:	ldr	lr, [sp, #92]	; 0x5c
   27b4c:	ldr	ip, [sp, #88]	; 0x58
   27b50:	ldr	r4, [sp, #36]	; 0x24
   27b54:	mov	r2, fp
   27b58:	mov	r1, r7
   27b5c:	str	r0, [r3, #4]
   27b60:	add	r3, sp, #56	; 0x38
   27b64:	str	r3, [sp, #8]
   27b68:	ldr	r3, [sp, #48]	; 0x30
   27b6c:	str	r4, [sp, #4]
   27b70:	str	r3, [sp]
   27b74:	str	lr, [sp, #16]
   27b78:	str	ip, [sp, #12]
   27b7c:	ldr	r3, [sp, #136]	; 0x88
   27b80:	mov	r6, r0
   27b84:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   27b88:	ldr	r3, [sp, #28]
   27b8c:	mov	r0, r6
   27b90:	str	r3, [r9]
   27b94:	add	sp, sp, #100	; 0x64
   27b98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27b9c:	mov	r3, #8
   27ba0:	sub	r2, r4, r2
   27ba4:	str	r3, [sp]
   27ba8:	add	r1, sp, #44	; 0x2c
   27bac:	add	r2, r2, #1
   27bb0:	mvn	r3, #-2147483648	; 0x80000000
   27bb4:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   27bb8:	mov	r5, r0
   27bbc:	ldm	r7, {r0, r1}
   27bc0:	str	r5, [r6]
   27bc4:	stm	r5, {r0, r1}
   27bc8:	b	27a9c <_obstack_memory_used@@Base+0x34f0>
   27bcc:	bl	11d2c <abort@plt>
   27bd0:	strdeq	r2, [r4], -r0
   27bd4:	andeq	r1, r4, ip, asr #5
   27bd8:	andeq	r2, r4, r0, lsr #8
   27bdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27be0:	mov	r5, r0
   27be4:	ldr	lr, [pc, #452]	; 27db0 <_obstack_memory_used@@Base+0x3804>
   27be8:	mov	r6, r1
   27bec:	mov	sl, r2
   27bf0:	ldm	lr!, {r0, r1, r2, r3}
   27bf4:	sub	sp, sp, #92	; 0x5c
   27bf8:	add	ip, sp, #40	; 0x28
   27bfc:	cmp	r6, #0
   27c00:	cmpne	r5, #0
   27c04:	stmia	ip!, {r0, r1, r2, r3}
   27c08:	mov	r9, #10
   27c0c:	ldm	lr!, {r0, r1, r2, r3}
   27c10:	moveq	fp, #1
   27c14:	movne	fp, #0
   27c18:	str	r9, [sp, #40]	; 0x28
   27c1c:	stmia	ip!, {r0, r1, r2, r3}
   27c20:	ldm	lr, {r0, r1, r2, r3}
   27c24:	stm	ip, {r0, r1, r2, r3}
   27c28:	beq	27dac <_obstack_memory_used@@Base+0x3800>
   27c2c:	str	r5, [sp, #80]	; 0x50
   27c30:	str	r6, [sp, #84]	; 0x54
   27c34:	bl	11bb8 <__errno_location@plt>
   27c38:	ldr	r7, [pc, #372]	; 27db4 <_obstack_memory_used@@Base+0x3808>
   27c3c:	ldr	r2, [r7, #4]
   27c40:	ldr	r4, [r7]
   27c44:	cmp	r2, #0
   27c48:	ldr	r3, [r0]
   27c4c:	mov	r8, r0
   27c50:	str	r3, [sp, #24]
   27c54:	movgt	r3, r9
   27c58:	bgt	27cc0 <_obstack_memory_used@@Base+0x3714>
   27c5c:	add	r5, r7, #8
   27c60:	cmp	r4, r5
   27c64:	str	r2, [sp, #36]	; 0x24
   27c68:	beq	27d7c <_obstack_memory_used@@Base+0x37d0>
   27c6c:	mov	r3, #8
   27c70:	mov	r0, r4
   27c74:	str	r3, [sp]
   27c78:	rsb	r2, r2, #1
   27c7c:	mvn	r3, #-2147483648	; 0x80000000
   27c80:	add	r1, sp, #36	; 0x24
   27c84:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   27c88:	mov	r4, r0
   27c8c:	str	r0, [r7]
   27c90:	ldr	r0, [r7, #4]
   27c94:	ldr	r2, [sp, #36]	; 0x24
   27c98:	mov	r1, #0
   27c9c:	sub	r2, r2, r0
   27ca0:	add	r0, r4, r0, lsl #3
   27ca4:	lsl	r2, r2, #3
   27ca8:	bl	11be8 <memset@plt>
   27cac:	ldr	r3, [sp, #40]	; 0x28
   27cb0:	ldr	r5, [sp, #80]	; 0x50
   27cb4:	ldr	r6, [sp, #84]	; 0x54
   27cb8:	ldr	r2, [sp, #36]	; 0x24
   27cbc:	str	r2, [r7, #4]
   27cc0:	ldr	r2, [sp, #44]	; 0x2c
   27cc4:	ldr	r9, [r4]
   27cc8:	ldr	r7, [r4, #4]
   27ccc:	orr	r2, r2, #1
   27cd0:	add	fp, sp, #48	; 0x30
   27cd4:	str	r2, [sp, #28]
   27cd8:	str	r2, [sp, #4]
   27cdc:	str	r3, [sp]
   27ce0:	str	r6, [sp, #16]
   27ce4:	str	r5, [sp, #12]
   27ce8:	mov	r1, r9
   27cec:	mov	r0, r7
   27cf0:	str	fp, [sp, #8]
   27cf4:	mvn	r3, #0
   27cf8:	mov	r2, sl
   27cfc:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   27d00:	cmp	r9, r0
   27d04:	bhi	27d68 <_obstack_memory_used@@Base+0x37bc>
   27d08:	ldr	r3, [pc, #168]	; 27db8 <_obstack_memory_used@@Base+0x380c>
   27d0c:	add	r5, r0, #1
   27d10:	cmp	r7, r3
   27d14:	str	r5, [r4]
   27d18:	beq	27d24 <_obstack_memory_used@@Base+0x3778>
   27d1c:	mov	r0, r7
   27d20:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   27d24:	mov	r0, r5
   27d28:	bl	29980 <_obstack_memory_used@@Base+0x53d4>
   27d2c:	ldr	lr, [sp, #84]	; 0x54
   27d30:	ldr	r3, [sp, #40]	; 0x28
   27d34:	ldr	ip, [sp, #80]	; 0x50
   27d38:	mov	r2, sl
   27d3c:	mov	r1, r5
   27d40:	str	r0, [r4, #4]
   27d44:	ldr	r4, [sp, #28]
   27d48:	str	r3, [sp]
   27d4c:	str	fp, [sp, #8]
   27d50:	str	r4, [sp, #4]
   27d54:	str	lr, [sp, #16]
   27d58:	str	ip, [sp, #12]
   27d5c:	mvn	r3, #0
   27d60:	mov	r7, r0
   27d64:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   27d68:	ldr	r3, [sp, #24]
   27d6c:	mov	r0, r7
   27d70:	str	r3, [r8]
   27d74:	add	sp, sp, #92	; 0x5c
   27d78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27d7c:	mov	r3, #8
   27d80:	str	r3, [sp]
   27d84:	add	r1, sp, #36	; 0x24
   27d88:	rsb	r2, r2, #1
   27d8c:	mov	r0, fp
   27d90:	mvn	r3, #-2147483648	; 0x80000000
   27d94:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   27d98:	mov	r4, r0
   27d9c:	ldm	r5, {r0, r1}
   27da0:	str	r4, [r7]
   27da4:	stm	r4, {r0, r1}
   27da8:	b	27c90 <_obstack_memory_used@@Base+0x36e4>
   27dac:	bl	11d2c <abort@plt>
   27db0:	strdeq	r2, [r4], -r0
   27db4:	andeq	r1, r4, ip, asr #5
   27db8:	andeq	r2, r4, r0, lsr #8
   27dbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27dc0:	mov	r5, r0
   27dc4:	ldr	lr, [pc, #464]	; 27f9c <_obstack_memory_used@@Base+0x39f0>
   27dc8:	mov	r6, r1
   27dcc:	mov	sl, r2
   27dd0:	mov	fp, r3
   27dd4:	ldm	lr!, {r0, r1, r2, r3}
   27dd8:	sub	sp, sp, #92	; 0x5c
   27ddc:	add	ip, sp, #40	; 0x28
   27de0:	cmp	r6, #0
   27de4:	cmpne	r5, #0
   27de8:	stmia	ip!, {r0, r1, r2, r3}
   27dec:	moveq	r4, #1
   27df0:	ldm	lr!, {r0, r1, r2, r3}
   27df4:	movne	r4, #0
   27df8:	mov	r9, #10
   27dfc:	str	r4, [sp, #28]
   27e00:	stmia	ip!, {r0, r1, r2, r3}
   27e04:	ldm	lr, {r0, r1, r2, r3}
   27e08:	str	r9, [sp, #40]	; 0x28
   27e0c:	stm	ip, {r0, r1, r2, r3}
   27e10:	beq	27f98 <_obstack_memory_used@@Base+0x39ec>
   27e14:	str	r5, [sp, #80]	; 0x50
   27e18:	str	r6, [sp, #84]	; 0x54
   27e1c:	bl	11bb8 <__errno_location@plt>
   27e20:	ldr	r7, [pc, #376]	; 27fa0 <_obstack_memory_used@@Base+0x39f4>
   27e24:	ldr	r2, [r7, #4]
   27e28:	ldr	r4, [r7]
   27e2c:	cmp	r2, #0
   27e30:	ldr	r3, [r0]
   27e34:	mov	r8, r0
   27e38:	str	r3, [sp, #24]
   27e3c:	movgt	r3, r9
   27e40:	bgt	27ea8 <_obstack_memory_used@@Base+0x38fc>
   27e44:	add	r5, r7, #8
   27e48:	cmp	r4, r5
   27e4c:	str	r2, [sp, #36]	; 0x24
   27e50:	beq	27f68 <_obstack_memory_used@@Base+0x39bc>
   27e54:	mov	r3, #8
   27e58:	mov	r0, r4
   27e5c:	str	r3, [sp]
   27e60:	rsb	r2, r2, #1
   27e64:	mvn	r3, #-2147483648	; 0x80000000
   27e68:	add	r1, sp, #36	; 0x24
   27e6c:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   27e70:	mov	r4, r0
   27e74:	str	r0, [r7]
   27e78:	ldr	r0, [r7, #4]
   27e7c:	ldr	r2, [sp, #36]	; 0x24
   27e80:	mov	r1, #0
   27e84:	sub	r2, r2, r0
   27e88:	add	r0, r4, r0, lsl #3
   27e8c:	lsl	r2, r2, #3
   27e90:	bl	11be8 <memset@plt>
   27e94:	ldr	r3, [sp, #40]	; 0x28
   27e98:	ldr	r5, [sp, #80]	; 0x50
   27e9c:	ldr	r6, [sp, #84]	; 0x54
   27ea0:	ldr	r2, [sp, #36]	; 0x24
   27ea4:	str	r2, [r7, #4]
   27ea8:	ldr	r2, [sp, #44]	; 0x2c
   27eac:	ldr	r9, [r4]
   27eb0:	ldr	r7, [r4, #4]
   27eb4:	orr	r2, r2, #1
   27eb8:	str	r3, [sp]
   27ebc:	add	r3, sp, #48	; 0x30
   27ec0:	str	r2, [sp, #28]
   27ec4:	str	r2, [sp, #4]
   27ec8:	str	r3, [sp, #8]
   27ecc:	str	r6, [sp, #16]
   27ed0:	str	r5, [sp, #12]
   27ed4:	mov	r1, r9
   27ed8:	mov	r0, r7
   27edc:	mov	r3, fp
   27ee0:	mov	r2, sl
   27ee4:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   27ee8:	cmp	r9, r0
   27eec:	bhi	27f54 <_obstack_memory_used@@Base+0x39a8>
   27ef0:	ldr	r3, [pc, #172]	; 27fa4 <_obstack_memory_used@@Base+0x39f8>
   27ef4:	add	r5, r0, #1
   27ef8:	cmp	r7, r3
   27efc:	str	r5, [r4]
   27f00:	beq	27f0c <_obstack_memory_used@@Base+0x3960>
   27f04:	mov	r0, r7
   27f08:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   27f0c:	mov	r0, r5
   27f10:	bl	29980 <_obstack_memory_used@@Base+0x53d4>
   27f14:	add	lr, sp, #48	; 0x30
   27f18:	ldr	ip, [sp, #84]	; 0x54
   27f1c:	mov	r1, r5
   27f20:	ldr	r5, [sp, #28]
   27f24:	mov	r3, fp
   27f28:	mov	r2, sl
   27f2c:	str	r0, [r4, #4]
   27f30:	ldr	r4, [sp, #80]	; 0x50
   27f34:	str	lr, [sp, #8]
   27f38:	ldr	lr, [sp, #40]	; 0x28
   27f3c:	str	r5, [sp, #4]
   27f40:	str	ip, [sp, #16]
   27f44:	str	r4, [sp, #12]
   27f48:	str	lr, [sp]
   27f4c:	mov	r7, r0
   27f50:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   27f54:	ldr	r3, [sp, #24]
   27f58:	mov	r0, r7
   27f5c:	str	r3, [r8]
   27f60:	add	sp, sp, #92	; 0x5c
   27f64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27f68:	mov	r3, #8
   27f6c:	str	r3, [sp]
   27f70:	add	r1, sp, #36	; 0x24
   27f74:	rsb	r2, r2, #1
   27f78:	ldr	r0, [sp, #28]
   27f7c:	mvn	r3, #-2147483648	; 0x80000000
   27f80:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   27f84:	mov	r4, r0
   27f88:	ldm	r5, {r0, r1}
   27f8c:	str	r4, [r7]
   27f90:	stm	r4, {r0, r1}
   27f94:	b	27e78 <_obstack_memory_used@@Base+0x38cc>
   27f98:	bl	11d2c <abort@plt>
   27f9c:	strdeq	r2, [r4], -r0
   27fa0:	andeq	r1, r4, ip, asr #5
   27fa4:	andeq	r2, r4, r0, lsr #8
   27fa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27fac:	sub	sp, sp, #52	; 0x34
   27fb0:	mov	r5, r0
   27fb4:	mov	sl, r1
   27fb8:	mov	fp, r2
   27fbc:	bl	11bb8 <__errno_location@plt>
   27fc0:	ldr	r4, [pc, #404]	; 2815c <_obstack_memory_used@@Base+0x3bb0>
   27fc4:	cmn	r5, #-2147483647	; 0x80000001
   27fc8:	ldr	r6, [r4]
   27fcc:	mov	r8, r0
   27fd0:	movne	r0, #0
   27fd4:	moveq	r0, #1
   27fd8:	ldr	r3, [r8]
   27fdc:	orrs	r0, r0, r5, lsr #31
   27fe0:	str	r3, [sp, #28]
   27fe4:	bne	28158 <_obstack_memory_used@@Base+0x3bac>
   27fe8:	ldr	r2, [r4, #4]
   27fec:	cmp	r5, r2
   27ff0:	blt	28050 <_obstack_memory_used@@Base+0x3aa4>
   27ff4:	add	r7, r4, #8
   27ff8:	cmp	r6, r7
   27ffc:	str	r2, [sp, #44]	; 0x2c
   28000:	beq	28128 <_obstack_memory_used@@Base+0x3b7c>
   28004:	mov	r3, #8
   28008:	sub	r2, r5, r2
   2800c:	mov	r0, r6
   28010:	str	r3, [sp]
   28014:	add	r2, r2, #1
   28018:	mvn	r3, #-2147483648	; 0x80000000
   2801c:	add	r1, sp, #44	; 0x2c
   28020:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   28024:	mov	r6, r0
   28028:	str	r0, [r4]
   2802c:	ldr	r0, [r4, #4]
   28030:	ldr	r2, [sp, #44]	; 0x2c
   28034:	mov	r1, #0
   28038:	sub	r2, r2, r0
   2803c:	add	r0, r6, r0, lsl #3
   28040:	lsl	r2, r2, #3
   28044:	bl	11be8 <memset@plt>
   28048:	ldr	r3, [sp, #44]	; 0x2c
   2804c:	str	r3, [r4, #4]
   28050:	ldr	r2, [r4, #56]	; 0x38
   28054:	add	r3, r6, r5, lsl #3
   28058:	ldr	r1, [r4, #20]
   2805c:	ldr	r7, [r3, #4]
   28060:	ldr	r9, [r6, r5, lsl #3]
   28064:	ldr	ip, [r4, #60]	; 0x3c
   28068:	str	r3, [sp, #32]
   2806c:	ldr	r3, [r4, #16]
   28070:	str	r2, [sp, #12]
   28074:	ldr	r2, [pc, #228]	; 28160 <_obstack_memory_used@@Base+0x3bb4>
   28078:	orr	r1, r1, #1
   2807c:	str	r1, [sp, #36]	; 0x24
   28080:	str	r1, [sp, #4]
   28084:	str	r2, [sp, #8]
   28088:	str	r3, [sp]
   2808c:	mov	r0, r7
   28090:	mov	r1, r9
   28094:	str	ip, [sp, #16]
   28098:	mov	r3, fp
   2809c:	mov	r2, sl
   280a0:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   280a4:	cmp	r9, r0
   280a8:	bhi	28114 <_obstack_memory_used@@Base+0x3b68>
   280ac:	ldr	r3, [pc, #176]	; 28164 <_obstack_memory_used@@Base+0x3bb8>
   280b0:	add	r9, r0, #1
   280b4:	cmp	r7, r3
   280b8:	str	r9, [r6, r5, lsl #3]
   280bc:	beq	280c8 <_obstack_memory_used@@Base+0x3b1c>
   280c0:	mov	r0, r7
   280c4:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   280c8:	mov	r0, r9
   280cc:	bl	29980 <_obstack_memory_used@@Base+0x53d4>
   280d0:	ldr	ip, [sp, #32]
   280d4:	ldr	lr, [r4, #60]	; 0x3c
   280d8:	ldr	r5, [r4, #56]	; 0x38
   280dc:	mov	r3, fp
   280e0:	mov	r2, sl
   280e4:	mov	r1, r9
   280e8:	str	r0, [ip, #4]
   280ec:	ldr	ip, [r4, #16]
   280f0:	ldr	r4, [pc, #104]	; 28160 <_obstack_memory_used@@Base+0x3bb4>
   280f4:	str	lr, [sp, #16]
   280f8:	str	r4, [sp, #8]
   280fc:	ldr	r4, [sp, #36]	; 0x24
   28100:	str	r5, [sp, #12]
   28104:	str	r4, [sp, #4]
   28108:	str	ip, [sp]
   2810c:	mov	r7, r0
   28110:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   28114:	ldr	r3, [sp, #28]
   28118:	mov	r0, r7
   2811c:	str	r3, [r8]
   28120:	add	sp, sp, #52	; 0x34
   28124:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28128:	mov	r3, #8
   2812c:	sub	r2, r5, r2
   28130:	str	r3, [sp]
   28134:	add	r1, sp, #44	; 0x2c
   28138:	add	r2, r2, #1
   2813c:	mvn	r3, #-2147483648	; 0x80000000
   28140:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   28144:	mov	r6, r0
   28148:	ldm	r7, {r0, r1}
   2814c:	str	r6, [r4]
   28150:	stm	r6, {r0, r1}
   28154:	b	2802c <_obstack_memory_used@@Base+0x3a80>
   28158:	bl	11d2c <abort@plt>
   2815c:	andeq	r1, r4, ip, asr #5
   28160:	andeq	r1, r4, r4, ror #5
   28164:	andeq	r2, r4, r0, lsr #8
   28168:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2816c:	sub	sp, sp, #44	; 0x2c
   28170:	mov	r9, r0
   28174:	mov	sl, r1
   28178:	bl	11bb8 <__errno_location@plt>
   2817c:	ldr	r4, [pc, #360]	; 282ec <_obstack_memory_used@@Base+0x3d40>
   28180:	ldr	r2, [r4, #4]
   28184:	ldr	r5, [r4]
   28188:	cmp	r2, #0
   2818c:	ldr	r3, [r0]
   28190:	mov	r7, r0
   28194:	str	r3, [sp, #24]
   28198:	bgt	281f4 <_obstack_memory_used@@Base+0x3c48>
   2819c:	add	r6, r4, #8
   281a0:	cmp	r5, r6
   281a4:	str	r2, [sp, #36]	; 0x24
   281a8:	beq	282bc <_obstack_memory_used@@Base+0x3d10>
   281ac:	mov	r3, #8
   281b0:	mov	r0, r5
   281b4:	str	r3, [sp]
   281b8:	rsb	r2, r2, #1
   281bc:	mvn	r3, #-2147483648	; 0x80000000
   281c0:	add	r1, sp, #36	; 0x24
   281c4:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   281c8:	mov	r5, r0
   281cc:	str	r0, [r4]
   281d0:	ldr	r0, [r4, #4]
   281d4:	ldr	r2, [sp, #36]	; 0x24
   281d8:	mov	r1, #0
   281dc:	sub	r2, r2, r0
   281e0:	add	r0, r5, r0, lsl #3
   281e4:	lsl	r2, r2, #3
   281e8:	bl	11be8 <memset@plt>
   281ec:	ldr	r3, [sp, #36]	; 0x24
   281f0:	str	r3, [r4, #4]
   281f4:	ldr	r1, [r4, #20]
   281f8:	ldr	r8, [r5]
   281fc:	ldr	r6, [r5, #4]
   28200:	ldr	r2, [r4, #56]	; 0x38
   28204:	ldr	r3, [r4, #16]
   28208:	ldr	ip, [r4, #60]	; 0x3c
   2820c:	ldr	fp, [pc, #220]	; 282f0 <_obstack_memory_used@@Base+0x3d44>
   28210:	orr	r1, r1, #1
   28214:	str	r1, [sp, #28]
   28218:	str	r1, [sp, #4]
   2821c:	str	r2, [sp, #12]
   28220:	str	r3, [sp]
   28224:	mov	r1, r8
   28228:	mov	r0, r6
   2822c:	str	ip, [sp, #16]
   28230:	str	fp, [sp, #8]
   28234:	mov	r3, sl
   28238:	mov	r2, r9
   2823c:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   28240:	cmp	r8, r0
   28244:	bhi	282a8 <_obstack_memory_used@@Base+0x3cfc>
   28248:	ldr	r3, [pc, #164]	; 282f4 <_obstack_memory_used@@Base+0x3d48>
   2824c:	add	r8, r0, #1
   28250:	cmp	r6, r3
   28254:	str	r8, [r5]
   28258:	beq	28264 <_obstack_memory_used@@Base+0x3cb8>
   2825c:	mov	r0, r6
   28260:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   28264:	mov	r0, r8
   28268:	bl	29980 <_obstack_memory_used@@Base+0x53d4>
   2826c:	ldr	lr, [r4, #60]	; 0x3c
   28270:	ldr	ip, [r4, #16]
   28274:	mov	r3, sl
   28278:	mov	r2, r9
   2827c:	mov	r1, r8
   28280:	str	r0, [r5, #4]
   28284:	ldr	r5, [r4, #56]	; 0x38
   28288:	ldr	r4, [sp, #28]
   2828c:	str	fp, [sp, #8]
   28290:	str	r4, [sp, #4]
   28294:	str	lr, [sp, #16]
   28298:	str	r5, [sp, #12]
   2829c:	str	ip, [sp]
   282a0:	mov	r6, r0
   282a4:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   282a8:	ldr	r3, [sp, #24]
   282ac:	mov	r0, r6
   282b0:	str	r3, [r7]
   282b4:	add	sp, sp, #44	; 0x2c
   282b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   282bc:	mov	r3, #8
   282c0:	str	r3, [sp]
   282c4:	add	r1, sp, #36	; 0x24
   282c8:	rsb	r2, r2, #1
   282cc:	mvn	r3, #-2147483648	; 0x80000000
   282d0:	mov	r0, #0
   282d4:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   282d8:	mov	r5, r0
   282dc:	ldm	r6, {r0, r1}
   282e0:	str	r5, [r4]
   282e4:	stm	r5, {r0, r1}
   282e8:	b	281d0 <_obstack_memory_used@@Base+0x3c24>
   282ec:	andeq	r1, r4, ip, asr #5
   282f0:	andeq	r1, r4, r4, ror #5
   282f4:	andeq	r2, r4, r0, lsr #8
   282f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   282fc:	sub	sp, sp, #44	; 0x2c
   28300:	mov	r5, r0
   28304:	mov	sl, r1
   28308:	bl	11bb8 <__errno_location@plt>
   2830c:	ldr	r4, [pc, #396]	; 284a0 <_obstack_memory_used@@Base+0x3ef4>
   28310:	cmn	r5, #-2147483647	; 0x80000001
   28314:	ldr	r6, [r4]
   28318:	mov	r8, r0
   2831c:	movne	r0, #0
   28320:	moveq	r0, #1
   28324:	ldr	r3, [r8]
   28328:	orrs	r0, r0, r5, lsr #31
   2832c:	str	r3, [sp, #24]
   28330:	bne	2849c <_obstack_memory_used@@Base+0x3ef0>
   28334:	ldr	r2, [r4, #4]
   28338:	cmp	r5, r2
   2833c:	blt	2839c <_obstack_memory_used@@Base+0x3df0>
   28340:	add	r7, r4, #8
   28344:	cmp	r6, r7
   28348:	str	r2, [sp, #36]	; 0x24
   2834c:	beq	2846c <_obstack_memory_used@@Base+0x3ec0>
   28350:	mov	r3, #8
   28354:	sub	r2, r5, r2
   28358:	mov	r0, r6
   2835c:	str	r3, [sp]
   28360:	add	r2, r2, #1
   28364:	mvn	r3, #-2147483648	; 0x80000000
   28368:	add	r1, sp, #36	; 0x24
   2836c:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   28370:	mov	r6, r0
   28374:	str	r0, [r4]
   28378:	ldr	r0, [r4, #4]
   2837c:	ldr	r2, [sp, #36]	; 0x24
   28380:	mov	r1, #0
   28384:	sub	r2, r2, r0
   28388:	add	r0, r6, r0, lsl #3
   2838c:	lsl	r2, r2, #3
   28390:	bl	11be8 <memset@plt>
   28394:	ldr	r3, [sp, #36]	; 0x24
   28398:	str	r3, [r4, #4]
   2839c:	ldr	r2, [r4, #56]	; 0x38
   283a0:	add	fp, r6, r5, lsl #3
   283a4:	ldr	r1, [r4, #20]
   283a8:	ldr	r9, [r6, r5, lsl #3]
   283ac:	ldr	r7, [fp, #4]
   283b0:	ldr	r3, [r4, #16]
   283b4:	ldr	ip, [r4, #60]	; 0x3c
   283b8:	str	r2, [sp, #12]
   283bc:	ldr	r2, [pc, #224]	; 284a4 <_obstack_memory_used@@Base+0x3ef8>
   283c0:	orr	r1, r1, #1
   283c4:	str	r1, [sp, #28]
   283c8:	str	r1, [sp, #4]
   283cc:	str	r2, [sp, #8]
   283d0:	str	r3, [sp]
   283d4:	mov	r0, r7
   283d8:	mov	r1, r9
   283dc:	str	ip, [sp, #16]
   283e0:	mvn	r3, #0
   283e4:	mov	r2, sl
   283e8:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   283ec:	cmp	r9, r0
   283f0:	bhi	28458 <_obstack_memory_used@@Base+0x3eac>
   283f4:	ldr	r3, [pc, #172]	; 284a8 <_obstack_memory_used@@Base+0x3efc>
   283f8:	add	r9, r0, #1
   283fc:	cmp	r7, r3
   28400:	str	r9, [r6, r5, lsl #3]
   28404:	beq	28410 <_obstack_memory_used@@Base+0x3e64>
   28408:	mov	r0, r7
   2840c:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   28410:	mov	r0, r9
   28414:	bl	29980 <_obstack_memory_used@@Base+0x53d4>
   28418:	ldr	ip, [r4, #60]	; 0x3c
   2841c:	ldr	r3, [r4, #16]
   28420:	ldr	lr, [r4, #56]	; 0x38
   28424:	ldr	r4, [pc, #120]	; 284a4 <_obstack_memory_used@@Base+0x3ef8>
   28428:	mov	r2, sl
   2842c:	mov	r1, r9
   28430:	str	r0, [fp, #4]
   28434:	str	r4, [sp, #8]
   28438:	ldr	r4, [sp, #28]
   2843c:	str	r3, [sp]
   28440:	str	r4, [sp, #4]
   28444:	str	ip, [sp, #16]
   28448:	str	lr, [sp, #12]
   2844c:	mvn	r3, #0
   28450:	mov	r7, r0
   28454:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   28458:	ldr	r3, [sp, #24]
   2845c:	mov	r0, r7
   28460:	str	r3, [r8]
   28464:	add	sp, sp, #44	; 0x2c
   28468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2846c:	mov	r3, #8
   28470:	sub	r2, r5, r2
   28474:	str	r3, [sp]
   28478:	add	r1, sp, #36	; 0x24
   2847c:	add	r2, r2, #1
   28480:	mvn	r3, #-2147483648	; 0x80000000
   28484:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   28488:	mov	r6, r0
   2848c:	ldm	r7, {r0, r1}
   28490:	str	r6, [r4]
   28494:	stm	r6, {r0, r1}
   28498:	b	28378 <_obstack_memory_used@@Base+0x3dcc>
   2849c:	bl	11d2c <abort@plt>
   284a0:	andeq	r1, r4, ip, asr #5
   284a4:	andeq	r1, r4, r4, ror #5
   284a8:	andeq	r2, r4, r0, lsr #8
   284ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   284b0:	sub	sp, sp, #44	; 0x2c
   284b4:	mov	sl, r0
   284b8:	bl	11bb8 <__errno_location@plt>
   284bc:	ldr	r4, [pc, #348]	; 28620 <_obstack_memory_used@@Base+0x4074>
   284c0:	ldr	r2, [r4, #4]
   284c4:	ldr	r5, [r4]
   284c8:	cmp	r2, #0
   284cc:	ldr	r3, [r0]
   284d0:	mov	r8, r0
   284d4:	str	r3, [sp, #28]
   284d8:	bgt	28534 <_obstack_memory_used@@Base+0x3f88>
   284dc:	add	r6, r4, #8
   284e0:	cmp	r5, r6
   284e4:	str	r2, [sp, #36]	; 0x24
   284e8:	beq	285f0 <_obstack_memory_used@@Base+0x4044>
   284ec:	mov	r3, #8
   284f0:	mov	r0, r5
   284f4:	str	r3, [sp]
   284f8:	rsb	r2, r2, #1
   284fc:	mvn	r3, #-2147483648	; 0x80000000
   28500:	add	r1, sp, #36	; 0x24
   28504:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   28508:	mov	r5, r0
   2850c:	str	r0, [r4]
   28510:	ldr	r0, [r4, #4]
   28514:	ldr	r2, [sp, #36]	; 0x24
   28518:	mov	r1, #0
   2851c:	sub	r2, r2, r0
   28520:	add	r0, r5, r0, lsl #3
   28524:	lsl	r2, r2, #3
   28528:	bl	11be8 <memset@plt>
   2852c:	ldr	r3, [sp, #36]	; 0x24
   28530:	str	r3, [r4, #4]
   28534:	ldr	r7, [r4, #20]
   28538:	ldr	r9, [r5]
   2853c:	ldr	r6, [r5, #4]
   28540:	ldr	r2, [r4, #56]	; 0x38
   28544:	ldr	r3, [r4, #16]
   28548:	ldr	ip, [r4, #60]	; 0x3c
   2854c:	ldr	fp, [pc, #208]	; 28624 <_obstack_memory_used@@Base+0x4078>
   28550:	orr	r7, r7, #1
   28554:	str	r2, [sp, #12]
   28558:	str	r3, [sp]
   2855c:	str	r7, [sp, #4]
   28560:	mov	r1, r9
   28564:	mov	r0, r6
   28568:	str	ip, [sp, #16]
   2856c:	str	fp, [sp, #8]
   28570:	mvn	r3, #0
   28574:	mov	r2, sl
   28578:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   2857c:	cmp	r9, r0
   28580:	bhi	285dc <_obstack_memory_used@@Base+0x4030>
   28584:	ldr	r3, [pc, #156]	; 28628 <_obstack_memory_used@@Base+0x407c>
   28588:	add	r9, r0, #1
   2858c:	cmp	r6, r3
   28590:	str	r9, [r5]
   28594:	beq	285a0 <_obstack_memory_used@@Base+0x3ff4>
   28598:	mov	r0, r6
   2859c:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   285a0:	mov	r0, r9
   285a4:	bl	29980 <_obstack_memory_used@@Base+0x53d4>
   285a8:	ldr	ip, [r4, #60]	; 0x3c
   285ac:	ldr	r3, [r4, #16]
   285b0:	ldr	lr, [r4, #56]	; 0x38
   285b4:	mov	r2, sl
   285b8:	mov	r1, r9
   285bc:	str	r0, [r5, #4]
   285c0:	str	r3, [sp]
   285c4:	stmib	sp, {r7, fp}
   285c8:	str	ip, [sp, #16]
   285cc:	str	lr, [sp, #12]
   285d0:	mvn	r3, #0
   285d4:	mov	r6, r0
   285d8:	bl	247b4 <_obstack_memory_used@@Base+0x208>
   285dc:	ldr	r3, [sp, #28]
   285e0:	mov	r0, r6
   285e4:	str	r3, [r8]
   285e8:	add	sp, sp, #44	; 0x2c
   285ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   285f0:	mov	r3, #8
   285f4:	str	r3, [sp]
   285f8:	add	r1, sp, #36	; 0x24
   285fc:	rsb	r2, r2, #1
   28600:	mvn	r3, #-2147483648	; 0x80000000
   28604:	mov	r0, #0
   28608:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   2860c:	mov	r5, r0
   28610:	ldm	r6, {r0, r1}
   28614:	str	r5, [r4]
   28618:	stm	r5, {r0, r1}
   2861c:	b	28510 <_obstack_memory_used@@Base+0x3f64>
   28620:	andeq	r1, r4, ip, asr #5
   28624:	andeq	r1, r4, r4, ror #5
   28628:	andeq	r2, r4, r0, lsr #8
   2862c:	push	{r4, r5, r6, lr}
   28630:	ldr	r4, [r0], #8
   28634:	cmp	r4, r0
   28638:	beq	28658 <_obstack_memory_used@@Base+0x40ac>
   2863c:	mov	r0, r4
   28640:	bl	2b238 <_obstack_memory_used@@Base+0x6c8c>
   28644:	cmp	r0, #0
   28648:	movne	r3, r0
   2864c:	moveq	r3, r4
   28650:	mov	r0, r3
   28654:	pop	{r4, r5, r6, pc}
   28658:	mov	r0, r1
   2865c:	mov	r5, r1
   28660:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   28664:	subs	r3, r0, #0
   28668:	beq	28650 <_obstack_memory_used@@Base+0x40a4>
   2866c:	mov	r2, r5
   28670:	mov	r1, r4
   28674:	pop	{r4, r5, r6, lr}
   28678:	b	11930 <memcpy@plt>
   2867c:	push	{r4, r5, r6, lr}
   28680:	mov	r5, r0
   28684:	ldr	r3, [r0, #4]
   28688:	mov	r4, r0
   2868c:	ldr	r0, [r5], #8
   28690:	lsl	r6, r3, #1
   28694:	cmp	r0, r5
   28698:	beq	286a4 <_obstack_memory_used@@Base+0x40f8>
   2869c:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   286a0:	ldr	r3, [r4, #4]
   286a4:	cmp	r6, r3
   286a8:	bcc	286d8 <_obstack_memory_used@@Base+0x412c>
   286ac:	mov	r0, r6
   286b0:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   286b4:	cmp	r0, #0
   286b8:	mov	r3, r0
   286bc:	mov	r2, r0
   286c0:	moveq	r3, r5
   286c4:	moveq	r6, #1024	; 0x400
   286c8:	movne	r2, #1
   286cc:	stm	r4, {r3, r6}
   286d0:	mov	r0, r2
   286d4:	pop	{r4, r5, r6, pc}
   286d8:	bl	11bb8 <__errno_location@plt>
   286dc:	mov	r1, #12
   286e0:	mov	r3, r5
   286e4:	mov	r6, #1024	; 0x400
   286e8:	mov	r2, #0
   286ec:	str	r1, [r0]
   286f0:	b	286cc <_obstack_memory_used@@Base+0x4120>
   286f4:	push	{r4, r5, r6, r7, r8, lr}
   286f8:	mov	r5, r0
   286fc:	ldr	r3, [r0, #4]
   28700:	ldr	r8, [r5], #8
   28704:	mov	r4, r0
   28708:	cmp	r8, r5
   2870c:	lsl	r7, r3, #1
   28710:	beq	28768 <_obstack_memory_used@@Base+0x41bc>
   28714:	cmp	r3, r7
   28718:	bhi	28740 <_obstack_memory_used@@Base+0x4194>
   2871c:	mov	r0, r8
   28720:	mov	r1, r7
   28724:	bl	2b238 <_obstack_memory_used@@Base+0x6c8c>
   28728:	subs	r6, r0, #0
   2872c:	ldreq	r8, [r4]
   28730:	beq	2874c <_obstack_memory_used@@Base+0x41a0>
   28734:	stm	r4, {r6, r7}
   28738:	mov	r0, #1
   2873c:	pop	{r4, r5, r6, r7, r8, pc}
   28740:	bl	11bb8 <__errno_location@plt>
   28744:	mov	r3, #12
   28748:	str	r3, [r0]
   2874c:	mov	r0, r8
   28750:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   28754:	mov	r3, #1024	; 0x400
   28758:	str	r5, [r4]
   2875c:	str	r3, [r4, #4]
   28760:	mov	r0, #0
   28764:	pop	{r4, r5, r6, r7, r8, pc}
   28768:	mov	r0, r7
   2876c:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   28770:	subs	r6, r0, #0
   28774:	beq	28760 <_obstack_memory_used@@Base+0x41b4>
   28778:	mov	r1, r8
   2877c:	ldr	r2, [r4, #4]
   28780:	bl	11930 <memcpy@plt>
   28784:	b	28734 <_obstack_memory_used@@Base+0x4188>
   28788:	push	{r4, r5, r6, r7, r8, lr}
   2878c:	mov	r5, r1
   28790:	bl	11b7c <getfilecon@plt>
   28794:	subs	r4, r0, #0
   28798:	beq	287e4 <_obstack_memory_used@@Base+0x4238>
   2879c:	cmp	r4, #10
   287a0:	beq	287ac <_obstack_memory_used@@Base+0x4200>
   287a4:	mov	r0, r4
   287a8:	pop	{r4, r5, r6, r7, r8, pc}
   287ac:	ldr	r6, [r5]
   287b0:	ldr	r1, [pc, #64]	; 287f8 <_obstack_memory_used@@Base+0x424c>
   287b4:	mov	r0, r6
   287b8:	bl	118a0 <strcmp@plt>
   287bc:	subs	r7, r0, #0
   287c0:	bne	287a4 <_obstack_memory_used@@Base+0x41f8>
   287c4:	mov	r0, r6
   287c8:	bl	11ce4 <freecon@plt>
   287cc:	str	r7, [r5]
   287d0:	bl	11bb8 <__errno_location@plt>
   287d4:	mov	r3, #61	; 0x3d
   287d8:	mvn	r4, #0
   287dc:	str	r3, [r0]
   287e0:	b	287a4 <_obstack_memory_used@@Base+0x41f8>
   287e4:	bl	11bb8 <__errno_location@plt>
   287e8:	mov	r3, #95	; 0x5f
   287ec:	mvn	r4, #0
   287f0:	str	r3, [r0]
   287f4:	b	287a4 <_obstack_memory_used@@Base+0x41f8>
   287f8:	ldrdeq	sp, [r2], -r0
   287fc:	push	{r4, r5, r6, r7, r8, lr}
   28800:	mov	r5, r1
   28804:	bl	11ad4 <lgetfilecon@plt>
   28808:	subs	r4, r0, #0
   2880c:	beq	28858 <_obstack_memory_used@@Base+0x42ac>
   28810:	cmp	r4, #10
   28814:	beq	28820 <_obstack_memory_used@@Base+0x4274>
   28818:	mov	r0, r4
   2881c:	pop	{r4, r5, r6, r7, r8, pc}
   28820:	ldr	r6, [r5]
   28824:	ldr	r1, [pc, #64]	; 2886c <_obstack_memory_used@@Base+0x42c0>
   28828:	mov	r0, r6
   2882c:	bl	118a0 <strcmp@plt>
   28830:	subs	r7, r0, #0
   28834:	bne	28818 <_obstack_memory_used@@Base+0x426c>
   28838:	mov	r0, r6
   2883c:	bl	11ce4 <freecon@plt>
   28840:	str	r7, [r5]
   28844:	bl	11bb8 <__errno_location@plt>
   28848:	mov	r3, #61	; 0x3d
   2884c:	mvn	r4, #0
   28850:	str	r3, [r0]
   28854:	b	28818 <_obstack_memory_used@@Base+0x426c>
   28858:	bl	11bb8 <__errno_location@plt>
   2885c:	mov	r3, #95	; 0x5f
   28860:	mvn	r4, #0
   28864:	str	r3, [r0]
   28868:	b	28818 <_obstack_memory_used@@Base+0x426c>
   2886c:	ldrdeq	sp, [r2], -r0
   28870:	push	{r4, r5, r6, r7, r8, lr}
   28874:	mov	r5, r1
   28878:	bl	119a8 <fgetfilecon@plt>
   2887c:	subs	r4, r0, #0
   28880:	beq	288cc <_obstack_memory_used@@Base+0x4320>
   28884:	cmp	r4, #10
   28888:	beq	28894 <_obstack_memory_used@@Base+0x42e8>
   2888c:	mov	r0, r4
   28890:	pop	{r4, r5, r6, r7, r8, pc}
   28894:	ldr	r6, [r5]
   28898:	ldr	r1, [pc, #64]	; 288e0 <_obstack_memory_used@@Base+0x4334>
   2889c:	mov	r0, r6
   288a0:	bl	118a0 <strcmp@plt>
   288a4:	subs	r7, r0, #0
   288a8:	bne	2888c <_obstack_memory_used@@Base+0x42e0>
   288ac:	mov	r0, r6
   288b0:	bl	11ce4 <freecon@plt>
   288b4:	str	r7, [r5]
   288b8:	bl	11bb8 <__errno_location@plt>
   288bc:	mov	r3, #61	; 0x3d
   288c0:	mvn	r4, #0
   288c4:	str	r3, [r0]
   288c8:	b	2888c <_obstack_memory_used@@Base+0x42e0>
   288cc:	bl	11bb8 <__errno_location@plt>
   288d0:	mov	r3, #95	; 0x5f
   288d4:	mvn	r4, #0
   288d8:	str	r3, [r0]
   288dc:	b	2888c <_obstack_memory_used@@Base+0x42e0>
   288e0:	ldrdeq	sp, [r2], -r0
   288e4:	push	{r4, r5, r6, lr}
   288e8:	mov	r5, r1
   288ec:	mov	r1, #0
   288f0:	mov	r4, r2
   288f4:	bl	11c54 <setlocale@plt>
   288f8:	subs	r6, r0, #0
   288fc:	beq	28958 <_obstack_memory_used@@Base+0x43ac>
   28900:	bl	11b94 <strlen@plt>
   28904:	cmp	r4, r0
   28908:	bhi	28940 <_obstack_memory_used@@Base+0x4394>
   2890c:	cmp	r4, #0
   28910:	bne	2891c <_obstack_memory_used@@Base+0x4370>
   28914:	mov	r0, #34	; 0x22
   28918:	pop	{r4, r5, r6, pc}
   2891c:	sub	r4, r4, #1
   28920:	mov	r1, r6
   28924:	mov	r2, r4
   28928:	mov	r0, r5
   2892c:	bl	11930 <memcpy@plt>
   28930:	mov	r3, #0
   28934:	strb	r3, [r5, r4]
   28938:	mov	r0, #34	; 0x22
   2893c:	pop	{r4, r5, r6, pc}
   28940:	add	r2, r0, #1
   28944:	mov	r1, r6
   28948:	mov	r0, r5
   2894c:	bl	11930 <memcpy@plt>
   28950:	mov	r0, #0
   28954:	pop	{r4, r5, r6, pc}
   28958:	cmp	r4, #0
   2895c:	beq	2896c <_obstack_memory_used@@Base+0x43c0>
   28960:	strb	r6, [r5]
   28964:	mov	r0, #22
   28968:	pop	{r4, r5, r6, pc}
   2896c:	mov	r0, #22
   28970:	pop	{r4, r5, r6, pc}
   28974:	mov	r1, #0
   28978:	b	11c54 <setlocale@plt>
   2897c:	push	{r4, r5, r6, r7, r8, lr}
   28980:	mov	r5, r0
   28984:	ldr	r0, [pc, #296]	; 28ab4 <_obstack_memory_used@@Base+0x4508>
   28988:	bl	11ac8 <getenv@plt>
   2898c:	ldrb	r3, [r5, #4]
   28990:	subs	r6, r0, #0
   28994:	beq	28a88 <_obstack_memory_used@@Base+0x44dc>
   28998:	cmp	r3, #0
   2899c:	beq	289c0 <_obstack_memory_used@@Base+0x4414>
   289a0:	mov	r1, r6
   289a4:	add	r0, r5, #5
   289a8:	bl	118a0 <strcmp@plt>
   289ac:	cmp	r0, #0
   289b0:	bne	289c0 <_obstack_memory_used@@Base+0x4414>
   289b4:	mov	r4, #1
   289b8:	mov	r0, r4
   289bc:	pop	{r4, r5, r6, r7, r8, pc}
   289c0:	mov	r0, r6
   289c4:	bl	11b94 <strlen@plt>
   289c8:	add	r7, r0, #1
   289cc:	cmp	r7, #58	; 0x3a
   289d0:	movls	r0, #64	; 0x40
   289d4:	addhi	r0, r0, #10
   289d8:	bichi	r0, r0, #3
   289dc:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   289e0:	subs	r4, r0, #0
   289e4:	beq	28aac <_obstack_memory_used@@Base+0x4500>
   289e8:	mov	r3, r4
   289ec:	mov	r8, #0
   289f0:	mov	r2, #1
   289f4:	strb	r2, [r4, #4]
   289f8:	str	r8, [r4]
   289fc:	mov	r1, r6
   28a00:	strb	r8, [r3, #5]!
   28a04:	mov	r2, r7
   28a08:	mov	r0, r3
   28a0c:	bl	11930 <memcpy@plt>
   28a10:	strb	r8, [r0, r7]
   28a14:	ldrb	r3, [r5, #4]
   28a18:	cmp	r3, #0
   28a1c:	beq	28a6c <_obstack_memory_used@@Base+0x44c0>
   28a20:	add	r1, r5, #5
   28a24:	mov	r2, #1
   28a28:	ldr	r0, [pc, #132]	; 28ab4 <_obstack_memory_used@@Base+0x4508>
   28a2c:	bl	11bac <setenv@plt>
   28a30:	cmp	r0, #0
   28a34:	beq	28a7c <_obstack_memory_used@@Base+0x44d0>
   28a38:	bl	11bb8 <__errno_location@plt>
   28a3c:	cmp	r4, #1
   28a40:	mov	r6, r0
   28a44:	ldr	r7, [r0]
   28a48:	beq	28a60 <_obstack_memory_used@@Base+0x44b4>
   28a4c:	ldr	r5, [r4]
   28a50:	mov	r0, r4
   28a54:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   28a58:	subs	r4, r5, #0
   28a5c:	bne	28a4c <_obstack_memory_used@@Base+0x44a0>
   28a60:	str	r7, [r6]
   28a64:	mov	r4, #0
   28a68:	b	289b8 <_obstack_memory_used@@Base+0x440c>
   28a6c:	ldr	r0, [pc, #64]	; 28ab4 <_obstack_memory_used@@Base+0x4508>
   28a70:	bl	11d14 <unsetenv@plt>
   28a74:	cmp	r0, #0
   28a78:	bne	28a38 <_obstack_memory_used@@Base+0x448c>
   28a7c:	bl	119fc <tzset@plt>
   28a80:	mov	r0, r4
   28a84:	pop	{r4, r5, r6, r7, r8, pc}
   28a88:	cmp	r3, #0
   28a8c:	beq	289b4 <_obstack_memory_used@@Base+0x4408>
   28a90:	mov	r0, #64	; 0x40
   28a94:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   28a98:	subs	r4, r0, #0
   28a9c:	strne	r6, [r4]
   28aa0:	strbne	r6, [r4, #4]
   28aa4:	strbne	r6, [r4, #5]
   28aa8:	bne	28a14 <_obstack_memory_used@@Base+0x4468>
   28aac:	mov	r4, #0
   28ab0:	b	289b8 <_obstack_memory_used@@Base+0x440c>
   28ab4:	andeq	pc, r2, r0, lsl #23
   28ab8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   28abc:	ldr	r6, [r1, #40]	; 0x28
   28ac0:	cmp	r6, #0
   28ac4:	beq	28bc0 <_obstack_memory_used@@Base+0x4614>
   28ac8:	cmp	r1, r6
   28acc:	mov	r7, r1
   28ad0:	mov	r5, r0
   28ad4:	bhi	28ae4 <_obstack_memory_used@@Base+0x4538>
   28ad8:	add	r3, r1, #44	; 0x2c
   28adc:	cmp	r6, r3
   28ae0:	bcc	28bc0 <_obstack_memory_used@@Base+0x4614>
   28ae4:	ldrb	r3, [r6]
   28ae8:	cmp	r3, #0
   28aec:	addne	r4, r5, #5
   28af0:	beq	28bb8 <_obstack_memory_used@@Base+0x460c>
   28af4:	mov	r1, r6
   28af8:	mov	r0, r4
   28afc:	bl	118a0 <strcmp@plt>
   28b00:	add	r2, r5, #5
   28b04:	cmp	r0, #0
   28b08:	mov	r0, r4
   28b0c:	beq	28bac <_obstack_memory_used@@Base+0x4600>
   28b10:	ldrb	r3, [r4]
   28b14:	cmp	r3, #0
   28b18:	bne	28b30 <_obstack_memory_used@@Base+0x4584>
   28b1c:	cmp	r4, r2
   28b20:	bne	28bc8 <_obstack_memory_used@@Base+0x461c>
   28b24:	ldrb	r3, [r5, #4]
   28b28:	cmp	r3, #0
   28b2c:	beq	28bc8 <_obstack_memory_used@@Base+0x461c>
   28b30:	bl	11b94 <strlen@plt>
   28b34:	add	r0, r0, #1
   28b38:	ldrb	r3, [r4, r0]!
   28b3c:	cmp	r3, #0
   28b40:	bne	28af4 <_obstack_memory_used@@Base+0x4548>
   28b44:	ldr	r3, [r5]
   28b48:	cmp	r3, #0
   28b4c:	addne	r4, r3, #5
   28b50:	movne	r5, r3
   28b54:	b	28af4 <_obstack_memory_used@@Base+0x4548>
   28b58:	cmp	r8, #58	; 0x3a
   28b5c:	addhi	r0, r0, #10
   28b60:	bichi	r0, r0, #3
   28b64:	movls	r0, #64	; 0x40
   28b68:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   28b6c:	subs	r9, r0, #0
   28b70:	beq	28c00 <_obstack_memory_used@@Base+0x4654>
   28b74:	mov	r3, r9
   28b78:	mov	sl, #0
   28b7c:	mov	r2, #1
   28b80:	strb	r2, [r9, #4]
   28b84:	str	sl, [r9]
   28b88:	mov	r1, r6
   28b8c:	strb	sl, [r3, #5]!
   28b90:	mov	r2, r8
   28b94:	mov	r0, r3
   28b98:	bl	11930 <memcpy@plt>
   28b9c:	mov	r4, r0
   28ba0:	strb	sl, [r0, r8]
   28ba4:	str	r9, [r5]
   28ba8:	strb	sl, [r9, #4]
   28bac:	str	r4, [r7, #40]	; 0x28
   28bb0:	mov	r0, #1
   28bb4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   28bb8:	ldr	r4, [pc, #76]	; 28c0c <_obstack_memory_used@@Base+0x4660>
   28bbc:	b	28bac <_obstack_memory_used@@Base+0x4600>
   28bc0:	mov	r0, #1
   28bc4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   28bc8:	mov	r0, r6
   28bcc:	bl	11b94 <strlen@plt>
   28bd0:	add	r3, r5, #64	; 0x40
   28bd4:	sub	r3, r3, r4
   28bd8:	add	r8, r0, #1
   28bdc:	cmp	r8, r3
   28be0:	bge	28b58 <_obstack_memory_used@@Base+0x45ac>
   28be4:	mov	r1, r6
   28be8:	mov	r2, r8
   28bec:	mov	r0, r4
   28bf0:	bl	11930 <memcpy@plt>
   28bf4:	mov	r3, #0
   28bf8:	strb	r3, [r4, r8]
   28bfc:	b	28bac <_obstack_memory_used@@Base+0x4600>
   28c00:	mov	r0, r9
   28c04:	str	r9, [r5]
   28c08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   28c0c:	andeq	r0, r3, r4, lsr #3
   28c10:	push	{r4, r5, r6, r7, r8, lr}
   28c14:	subs	r7, r0, #0
   28c18:	beq	28c74 <_obstack_memory_used@@Base+0x46c8>
   28c1c:	bl	11b94 <strlen@plt>
   28c20:	add	r5, r0, #1
   28c24:	cmp	r5, #58	; 0x3a
   28c28:	addhi	r0, r0, #10
   28c2c:	bichi	r0, r0, #3
   28c30:	movls	r0, #64	; 0x40
   28c34:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   28c38:	subs	r4, r0, #0
   28c3c:	beq	28c6c <_obstack_memory_used@@Base+0x46c0>
   28c40:	mov	r3, r4
   28c44:	mov	r6, #0
   28c48:	mov	r2, #1
   28c4c:	strb	r2, [r4, #4]
   28c50:	str	r6, [r4]
   28c54:	mov	r1, r7
   28c58:	strb	r6, [r3, #5]!
   28c5c:	mov	r2, r5
   28c60:	mov	r0, r3
   28c64:	bl	11930 <memcpy@plt>
   28c68:	strb	r6, [r0, r5]
   28c6c:	mov	r0, r4
   28c70:	pop	{r4, r5, r6, r7, r8, pc}
   28c74:	mov	r0, #64	; 0x40
   28c78:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   28c7c:	subs	r4, r0, #0
   28c80:	beq	28c6c <_obstack_memory_used@@Base+0x46c0>
   28c84:	str	r7, [r4]
   28c88:	strb	r7, [r4, #4]
   28c8c:	strb	r7, [r4, #5]
   28c90:	mov	r0, r4
   28c94:	pop	{r4, r5, r6, r7, r8, pc}
   28c98:	cmp	r0, #1
   28c9c:	bxeq	lr
   28ca0:	cmp	r0, #0
   28ca4:	beq	28cc0 <_obstack_memory_used@@Base+0x4714>
   28ca8:	push	{r4, lr}
   28cac:	ldr	r4, [r0]
   28cb0:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   28cb4:	subs	r0, r4, #0
   28cb8:	bne	28cac <_obstack_memory_used@@Base+0x4700>
   28cbc:	pop	{r4, pc}
   28cc0:	bx	lr
   28cc4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   28cc8:	subs	r8, r0, #0
   28ccc:	mov	r5, r1
   28cd0:	mov	r6, r2
   28cd4:	beq	28da4 <_obstack_memory_used@@Base+0x47f8>
   28cd8:	bl	2897c <_obstack_memory_used@@Base+0x43d0>
   28cdc:	subs	r4, r0, #0
   28ce0:	beq	28d8c <_obstack_memory_used@@Base+0x47e0>
   28ce4:	mov	r0, r5
   28ce8:	mov	r1, r6
   28cec:	bl	119b4 <localtime_r@plt>
   28cf0:	subs	r7, r0, #0
   28cf4:	beq	28d84 <_obstack_memory_used@@Base+0x47d8>
   28cf8:	mov	r0, r8
   28cfc:	mov	r1, r6
   28d00:	bl	28ab8 <_obstack_memory_used@@Base+0x450c>
   28d04:	cmp	r4, #1
   28d08:	mov	r7, r0
   28d0c:	beq	28d68 <_obstack_memory_used@@Base+0x47bc>
   28d10:	bl	11bb8 <__errno_location@plt>
   28d14:	ldrb	r3, [r4, #4]
   28d18:	cmp	r3, #0
   28d1c:	mov	r8, r0
   28d20:	ldr	r9, [r0]
   28d24:	beq	28d98 <_obstack_memory_used@@Base+0x47ec>
   28d28:	mov	r2, #1
   28d2c:	add	r1, r4, #5
   28d30:	ldr	r0, [pc, #124]	; 28db4 <_obstack_memory_used@@Base+0x4808>
   28d34:	bl	11bac <setenv@plt>
   28d38:	cmp	r0, #0
   28d3c:	beq	28d78 <_obstack_memory_used@@Base+0x47cc>
   28d40:	ldr	r9, [r8]
   28d44:	mov	sl, #0
   28d48:	ldr	r5, [r4]
   28d4c:	mov	r0, r4
   28d50:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   28d54:	subs	r4, r5, #0
   28d58:	bne	28d48 <_obstack_memory_used@@Base+0x479c>
   28d5c:	cmp	sl, #0
   28d60:	str	r9, [r8]
   28d64:	beq	28d8c <_obstack_memory_used@@Base+0x47e0>
   28d68:	cmp	r7, #0
   28d6c:	beq	28d8c <_obstack_memory_used@@Base+0x47e0>
   28d70:	mov	r0, r6
   28d74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   28d78:	bl	119fc <tzset@plt>
   28d7c:	mov	sl, #1
   28d80:	b	28d48 <_obstack_memory_used@@Base+0x479c>
   28d84:	cmp	r4, #1
   28d88:	bne	28d10 <_obstack_memory_used@@Base+0x4764>
   28d8c:	mov	r6, #0
   28d90:	mov	r0, r6
   28d94:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   28d98:	ldr	r0, [pc, #20]	; 28db4 <_obstack_memory_used@@Base+0x4808>
   28d9c:	bl	11d14 <unsetenv@plt>
   28da0:	b	28d38 <_obstack_memory_used@@Base+0x478c>
   28da4:	mov	r0, r5
   28da8:	mov	r1, r2
   28dac:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   28db0:	b	11888 <gmtime_r@plt>
   28db4:	andeq	pc, r2, r0, lsl #23
   28db8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28dbc:	subs	r5, r0, #0
   28dc0:	sub	sp, sp, #52	; 0x34
   28dc4:	mov	r6, r1
   28dc8:	beq	28ef8 <_obstack_memory_used@@Base+0x494c>
   28dcc:	bl	2897c <_obstack_memory_used@@Base+0x43d0>
   28dd0:	subs	r4, r0, #0
   28dd4:	beq	28f10 <_obstack_memory_used@@Base+0x4964>
   28dd8:	ldm	r6, {r1, r2, ip}
   28ddc:	ldr	r0, [r6, #12]
   28de0:	ldr	r3, [r6, #16]
   28de4:	str	r1, [sp, #4]
   28de8:	str	r2, [sp, #8]
   28dec:	ldr	r1, [r6, #20]
   28df0:	ldr	r2, [r6, #32]
   28df4:	str	r0, [sp, #16]
   28df8:	str	r3, [sp, #20]
   28dfc:	add	r0, sp, #4
   28e00:	mvn	r3, #0
   28e04:	str	r3, [sp, #32]
   28e08:	str	ip, [sp, #12]
   28e0c:	str	r1, [sp, #24]
   28e10:	str	r2, [sp, #36]	; 0x24
   28e14:	bl	118b8 <mktime@plt>
   28e18:	ldr	r3, [sp, #32]
   28e1c:	cmp	r3, #0
   28e20:	mov	r8, r0
   28e24:	blt	28ec4 <_obstack_memory_used@@Base+0x4918>
   28e28:	mov	r0, r5
   28e2c:	add	r1, sp, #4
   28e30:	bl	28ab8 <_obstack_memory_used@@Base+0x450c>
   28e34:	cmp	r4, #1
   28e38:	mov	sl, r0
   28e3c:	beq	28e90 <_obstack_memory_used@@Base+0x48e4>
   28e40:	bl	11bb8 <__errno_location@plt>
   28e44:	ldrb	r3, [r4, #4]
   28e48:	cmp	r3, #0
   28e4c:	mov	r7, r0
   28e50:	ldr	r9, [r0]
   28e54:	bne	28ed4 <_obstack_memory_used@@Base+0x4928>
   28e58:	ldr	r0, [pc, #184]	; 28f18 <_obstack_memory_used@@Base+0x496c>
   28e5c:	bl	11d14 <unsetenv@plt>
   28e60:	cmp	r0, #0
   28e64:	beq	28eec <_obstack_memory_used@@Base+0x4940>
   28e68:	ldr	r9, [r7]
   28e6c:	mov	fp, #0
   28e70:	ldr	r5, [r4]
   28e74:	mov	r0, r4
   28e78:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   28e7c:	subs	r4, r5, #0
   28e80:	bne	28e70 <_obstack_memory_used@@Base+0x48c4>
   28e84:	cmp	fp, #0
   28e88:	str	r9, [r7]
   28e8c:	beq	28f10 <_obstack_memory_used@@Base+0x4964>
   28e90:	cmp	sl, #0
   28e94:	beq	28f10 <_obstack_memory_used@@Base+0x4964>
   28e98:	add	lr, sp, #4
   28e9c:	mov	ip, r6
   28ea0:	ldm	lr!, {r0, r1, r2, r3}
   28ea4:	stmia	ip!, {r0, r1, r2, r3}
   28ea8:	ldm	lr!, {r0, r1, r2, r3}
   28eac:	stmia	ip!, {r0, r1, r2, r3}
   28eb0:	ldm	lr, {r0, r1, r2}
   28eb4:	stm	ip, {r0, r1, r2}
   28eb8:	mov	r0, r8
   28ebc:	add	sp, sp, #52	; 0x34
   28ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28ec4:	cmp	r4, #1
   28ec8:	beq	28f10 <_obstack_memory_used@@Base+0x4964>
   28ecc:	mov	sl, #0
   28ed0:	b	28e40 <_obstack_memory_used@@Base+0x4894>
   28ed4:	mov	r2, #1
   28ed8:	add	r1, r4, #5
   28edc:	ldr	r0, [pc, #52]	; 28f18 <_obstack_memory_used@@Base+0x496c>
   28ee0:	bl	11bac <setenv@plt>
   28ee4:	cmp	r0, #0
   28ee8:	bne	28e68 <_obstack_memory_used@@Base+0x48bc>
   28eec:	bl	119fc <tzset@plt>
   28ef0:	mov	fp, #1
   28ef4:	b	28e70 <_obstack_memory_used@@Base+0x48c4>
   28ef8:	mov	r0, r1
   28efc:	bl	11cc0 <timegm@plt>
   28f00:	mov	r8, r0
   28f04:	mov	r0, r8
   28f08:	add	sp, sp, #52	; 0x34
   28f0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28f10:	mvn	r8, #0
   28f14:	b	28eb8 <_obstack_memory_used@@Base+0x490c>
   28f18:	andeq	pc, r2, r0, lsl #23
   28f1c:	push	{r4, r5, r6, lr}
   28f20:	sub	sp, sp, #32
   28f24:	cmp	r1, #0
   28f28:	mov	r4, r0
   28f2c:	ldr	r5, [sp, #48]	; 0x30
   28f30:	ldr	r6, [sp, #52]	; 0x34
   28f34:	beq	2924c <_obstack_memory_used@@Base+0x4ca0>
   28f38:	stm	sp, {r2, r3}
   28f3c:	mov	r3, r1
   28f40:	ldr	r2, [pc, #808]	; 29270 <_obstack_memory_used@@Base+0x4cc4>
   28f44:	mov	r1, #1
   28f48:	bl	11c18 <__fprintf_chk@plt>
   28f4c:	mov	r2, #5
   28f50:	ldr	r1, [pc, #796]	; 29274 <_obstack_memory_used@@Base+0x4cc8>
   28f54:	mov	r0, #0
   28f58:	bl	11984 <dcgettext@plt>
   28f5c:	ldr	r3, [pc, #788]	; 29278 <_obstack_memory_used@@Base+0x4ccc>
   28f60:	ldr	r2, [pc, #788]	; 2927c <_obstack_memory_used@@Base+0x4cd0>
   28f64:	str	r3, [sp]
   28f68:	mov	r1, #1
   28f6c:	mov	r3, r0
   28f70:	mov	r0, r4
   28f74:	bl	11c18 <__fprintf_chk@plt>
   28f78:	mov	r1, r4
   28f7c:	mov	r0, #10
   28f80:	bl	11978 <fputc_unlocked@plt>
   28f84:	mov	r2, #5
   28f88:	ldr	r1, [pc, #752]	; 29280 <_obstack_memory_used@@Base+0x4cd4>
   28f8c:	mov	r0, #0
   28f90:	bl	11984 <dcgettext@plt>
   28f94:	mov	r1, #1
   28f98:	ldr	r3, [pc, #740]	; 29284 <_obstack_memory_used@@Base+0x4cd8>
   28f9c:	mov	r2, r0
   28fa0:	mov	r0, r4
   28fa4:	bl	11c18 <__fprintf_chk@plt>
   28fa8:	mov	r1, r4
   28fac:	mov	r0, #10
   28fb0:	bl	11978 <fputc_unlocked@plt>
   28fb4:	cmp	r6, #9
   28fb8:	ldrls	pc, [pc, r6, lsl #2]
   28fbc:	b	29264 <_obstack_memory_used@@Base+0x4cb8>
   28fc0:	andeq	r9, r2, r4, asr #32
   28fc4:	andeq	r9, r2, ip, asr #32
   28fc8:	andeq	r9, r2, r8, ror r0
   28fcc:	andeq	r9, r2, ip, lsr #1
   28fd0:	andeq	r9, r2, r8, ror #1
   28fd4:	andeq	r9, r2, r4, lsr #2
   28fd8:	andeq	r9, r2, r0, ror #2
   28fdc:	andeq	r9, r2, r4, lsr #3
   28fe0:	strdeq	r9, [r2], -r4
   28fe4:	andeq	r8, r2, r8, ror #31
   28fe8:	ldr	r1, [pc, #664]	; 29288 <_obstack_memory_used@@Base+0x4cdc>
   28fec:	mov	r2, #5
   28ff0:	mov	r0, #0
   28ff4:	bl	11984 <dcgettext@plt>
   28ff8:	ldr	ip, [r5, #32]
   28ffc:	ldr	r1, [r5, #28]
   29000:	ldr	r2, [r5, #24]
   29004:	ldr	r3, [r5]
   29008:	ldr	r6, [r5, #20]
   2900c:	str	ip, [sp, #28]
   29010:	ldr	lr, [r5, #16]
   29014:	str	r1, [sp, #24]
   29018:	ldr	ip, [r5, #12]
   2901c:	str	r2, [sp, #20]
   29020:	ldr	r1, [r5, #8]
   29024:	ldr	r2, [r5, #4]
   29028:	str	r6, [sp, #16]
   2902c:	stmib	sp, {r1, ip, lr}
   29030:	mov	r1, #1
   29034:	str	r2, [sp]
   29038:	mov	r2, r0
   2903c:	mov	r0, r4
   29040:	bl	11c18 <__fprintf_chk@plt>
   29044:	add	sp, sp, #32
   29048:	pop	{r4, r5, r6, pc}
   2904c:	mov	r2, #5
   29050:	ldr	r1, [pc, #564]	; 2928c <_obstack_memory_used@@Base+0x4ce0>
   29054:	mov	r0, #0
   29058:	bl	11984 <dcgettext@plt>
   2905c:	ldr	r3, [r5]
   29060:	mov	r1, #1
   29064:	mov	r2, r0
   29068:	mov	r0, r4
   2906c:	add	sp, sp, #32
   29070:	pop	{r4, r5, r6, lr}
   29074:	b	11c18 <__fprintf_chk@plt>
   29078:	mov	r2, #5
   2907c:	ldr	r1, [pc, #524]	; 29290 <_obstack_memory_used@@Base+0x4ce4>
   29080:	mov	r0, #0
   29084:	bl	11984 <dcgettext@plt>
   29088:	ldr	r2, [r5, #4]
   2908c:	ldr	r3, [r5]
   29090:	mov	r1, #1
   29094:	str	r2, [sp, #48]	; 0x30
   29098:	mov	r2, r0
   2909c:	mov	r0, r4
   290a0:	add	sp, sp, #32
   290a4:	pop	{r4, r5, r6, lr}
   290a8:	b	11c18 <__fprintf_chk@plt>
   290ac:	mov	r2, #5
   290b0:	ldr	r1, [pc, #476]	; 29294 <_obstack_memory_used@@Base+0x4ce8>
   290b4:	mov	r0, #0
   290b8:	bl	11984 <dcgettext@plt>
   290bc:	ldr	r1, [r5, #8]
   290c0:	ldr	r2, [r5, #4]
   290c4:	ldr	r3, [r5]
   290c8:	str	r1, [sp, #52]	; 0x34
   290cc:	str	r2, [sp, #48]	; 0x30
   290d0:	mov	r1, #1
   290d4:	mov	r2, r0
   290d8:	mov	r0, r4
   290dc:	add	sp, sp, #32
   290e0:	pop	{r4, r5, r6, lr}
   290e4:	b	11c18 <__fprintf_chk@plt>
   290e8:	mov	r2, #5
   290ec:	ldr	r1, [pc, #420]	; 29298 <_obstack_memory_used@@Base+0x4cec>
   290f0:	mov	r0, #0
   290f4:	bl	11984 <dcgettext@plt>
   290f8:	ldr	r1, [r5, #8]
   290fc:	ldr	ip, [r5, #12]
   29100:	ldr	r2, [r5, #4]
   29104:	ldr	r3, [r5]
   29108:	stmib	sp, {r1, ip}
   2910c:	str	r2, [sp]
   29110:	mov	r1, #1
   29114:	mov	r2, r0
   29118:	mov	r0, r4
   2911c:	bl	11c18 <__fprintf_chk@plt>
   29120:	b	29044 <_obstack_memory_used@@Base+0x4a98>
   29124:	mov	r2, #5
   29128:	ldr	r1, [pc, #364]	; 2929c <_obstack_memory_used@@Base+0x4cf0>
   2912c:	mov	r0, #0
   29130:	bl	11984 <dcgettext@plt>
   29134:	add	r1, r5, #8
   29138:	ldr	r2, [r5, #4]
   2913c:	ldm	r1, {r1, ip, lr}
   29140:	ldr	r3, [r5]
   29144:	str	r2, [sp]
   29148:	stmib	sp, {r1, ip, lr}
   2914c:	mov	r1, #1
   29150:	mov	r2, r0
   29154:	mov	r0, r4
   29158:	bl	11c18 <__fprintf_chk@plt>
   2915c:	b	29044 <_obstack_memory_used@@Base+0x4a98>
   29160:	mov	r2, #5
   29164:	ldr	r1, [pc, #308]	; 292a0 <_obstack_memory_used@@Base+0x4cf4>
   29168:	mov	r0, #0
   2916c:	bl	11984 <dcgettext@plt>
   29170:	add	r1, r5, #8
   29174:	ldr	r2, [r5, #4]
   29178:	ldm	r1, {r1, ip, lr}
   2917c:	ldr	r6, [r5, #20]
   29180:	ldr	r3, [r5]
   29184:	stmib	sp, {r1, ip, lr}
   29188:	mov	r1, #1
   2918c:	str	r2, [sp]
   29190:	str	r6, [sp, #16]
   29194:	mov	r2, r0
   29198:	mov	r0, r4
   2919c:	bl	11c18 <__fprintf_chk@plt>
   291a0:	b	29044 <_obstack_memory_used@@Base+0x4a98>
   291a4:	mov	r2, #5
   291a8:	ldr	r1, [pc, #244]	; 292a4 <_obstack_memory_used@@Base+0x4cf8>
   291ac:	mov	r0, #0
   291b0:	bl	11984 <dcgettext@plt>
   291b4:	ldr	r2, [r5, #24]
   291b8:	ldr	r3, [r5]
   291bc:	ldr	r6, [r5, #20]
   291c0:	ldr	lr, [r5, #16]
   291c4:	ldr	ip, [r5, #12]
   291c8:	str	r2, [sp, #20]
   291cc:	ldr	r1, [r5, #8]
   291d0:	ldr	r2, [r5, #4]
   291d4:	str	r6, [sp, #16]
   291d8:	stmib	sp, {r1, ip, lr}
   291dc:	mov	r1, #1
   291e0:	str	r2, [sp]
   291e4:	mov	r2, r0
   291e8:	mov	r0, r4
   291ec:	bl	11c18 <__fprintf_chk@plt>
   291f0:	b	29044 <_obstack_memory_used@@Base+0x4a98>
   291f4:	mov	r2, #5
   291f8:	ldr	r1, [pc, #168]	; 292a8 <_obstack_memory_used@@Base+0x4cfc>
   291fc:	mov	r0, #0
   29200:	bl	11984 <dcgettext@plt>
   29204:	ldr	r1, [r5, #28]
   29208:	ldr	r2, [r5, #24]
   2920c:	ldr	r3, [r5]
   29210:	ldr	r6, [r5, #20]
   29214:	ldr	lr, [r5, #16]
   29218:	str	r1, [sp, #24]
   2921c:	ldr	ip, [r5, #12]
   29220:	str	r2, [sp, #20]
   29224:	ldr	r1, [r5, #8]
   29228:	ldr	r2, [r5, #4]
   2922c:	str	r6, [sp, #16]
   29230:	stmib	sp, {r1, ip, lr}
   29234:	mov	r1, #1
   29238:	str	r2, [sp]
   2923c:	mov	r2, r0
   29240:	mov	r0, r4
   29244:	bl	11c18 <__fprintf_chk@plt>
   29248:	b	29044 <_obstack_memory_used@@Base+0x4a98>
   2924c:	str	r3, [sp]
   29250:	mov	r1, #1
   29254:	mov	r3, r2
   29258:	ldr	r2, [pc, #76]	; 292ac <_obstack_memory_used@@Base+0x4d00>
   2925c:	bl	11c18 <__fprintf_chk@plt>
   29260:	b	28f4c <_obstack_memory_used@@Base+0x49a0>
   29264:	mov	r2, #5
   29268:	ldr	r1, [pc, #64]	; 292b0 <_obstack_memory_used@@Base+0x4d04>
   2926c:	b	28ff0 <_obstack_memory_used@@Base+0x4a44>
   29270:	andeq	r0, r3, r0, ror #6
   29274:	andeq	r0, r3, r4, ror r3
   29278:	andeq	r0, r0, r6, ror #15
   2927c:	andeq	r0, r3, ip, asr #12
   29280:	andeq	r0, r3, r8, ror r3
   29284:	andeq	r0, r3, r4, lsr #8
   29288:	andeq	r0, r3, r4, asr r5
   2928c:	andeq	r0, r3, r8, asr #8
   29290:	andeq	r0, r3, r8, asr r4
   29294:	andeq	r0, r3, r0, ror r4
   29298:	andeq	r0, r3, ip, lsl #9
   2929c:	andeq	r0, r3, ip, lsr #9
   292a0:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   292a4:	strdeq	r0, [r3], -r8
   292a8:	andeq	r0, r3, r4, lsr #10
   292ac:	andeq	r0, r3, ip, ror #6
   292b0:	andeq	r0, r3, r8, lsl #11
   292b4:	push	{r4, r5, lr}
   292b8:	sub	sp, sp, #12
   292bc:	ldr	r5, [sp, #24]
   292c0:	ldr	ip, [r5]
   292c4:	cmp	ip, #0
   292c8:	beq	292e4 <_obstack_memory_used@@Base+0x4d38>
   292cc:	mov	lr, r5
   292d0:	mov	ip, #0
   292d4:	ldr	r4, [lr, #4]!
   292d8:	add	ip, ip, #1
   292dc:	cmp	r4, #0
   292e0:	bne	292d4 <_obstack_memory_used@@Base+0x4d28>
   292e4:	stm	sp, {r5, ip}
   292e8:	bl	28f1c <_obstack_memory_used@@Base+0x4970>
   292ec:	add	sp, sp, #12
   292f0:	pop	{r4, r5, pc}
   292f4:	push	{r4, r5, lr}
   292f8:	sub	sp, sp, #76	; 0x4c
   292fc:	mov	r5, r0
   29300:	ldr	ip, [sp, #88]	; 0x58
   29304:	ldr	r0, [ip]
   29308:	cmp	r0, #0
   2930c:	str	r0, [sp, #32]
   29310:	beq	296e4 <_obstack_memory_used@@Base+0x5138>
   29314:	ldr	r0, [ip, #4]
   29318:	cmp	r0, #0
   2931c:	str	r0, [sp, #36]	; 0x24
   29320:	beq	296ec <_obstack_memory_used@@Base+0x5140>
   29324:	ldr	r0, [ip, #8]
   29328:	cmp	r0, #0
   2932c:	str	r0, [sp, #40]	; 0x28
   29330:	beq	296f4 <_obstack_memory_used@@Base+0x5148>
   29334:	ldr	r0, [ip, #12]
   29338:	cmp	r0, #0
   2933c:	str	r0, [sp, #44]	; 0x2c
   29340:	beq	296fc <_obstack_memory_used@@Base+0x5150>
   29344:	ldr	r0, [ip, #16]
   29348:	cmp	r0, #0
   2934c:	str	r0, [sp, #48]	; 0x30
   29350:	beq	29704 <_obstack_memory_used@@Base+0x5158>
   29354:	ldr	r0, [ip, #20]
   29358:	cmp	r0, #0
   2935c:	str	r0, [sp, #52]	; 0x34
   29360:	beq	2970c <_obstack_memory_used@@Base+0x5160>
   29364:	ldr	r0, [ip, #24]
   29368:	cmp	r0, #0
   2936c:	str	r0, [sp, #56]	; 0x38
   29370:	beq	29714 <_obstack_memory_used@@Base+0x5168>
   29374:	ldr	r0, [ip, #28]
   29378:	cmp	r0, #0
   2937c:	str	r0, [sp, #60]	; 0x3c
   29380:	beq	2971c <_obstack_memory_used@@Base+0x5170>
   29384:	ldr	r0, [ip, #32]
   29388:	cmp	r0, #0
   2938c:	str	r0, [sp, #64]	; 0x40
   29390:	beq	29724 <_obstack_memory_used@@Base+0x5178>
   29394:	ldr	r0, [ip, #36]	; 0x24
   29398:	cmp	r0, #0
   2939c:	movne	r4, #10
   293a0:	moveq	r4, #9
   293a4:	cmp	r1, #0
   293a8:	beq	296bc <_obstack_memory_used@@Base+0x5110>
   293ac:	stm	sp, {r2, r3}
   293b0:	mov	r0, r5
   293b4:	mov	r3, r1
   293b8:	ldr	r2, [pc, #876]	; 2972c <_obstack_memory_used@@Base+0x5180>
   293bc:	mov	r1, #1
   293c0:	bl	11c18 <__fprintf_chk@plt>
   293c4:	mov	r2, #5
   293c8:	ldr	r1, [pc, #864]	; 29730 <_obstack_memory_used@@Base+0x5184>
   293cc:	mov	r0, #0
   293d0:	bl	11984 <dcgettext@plt>
   293d4:	ldr	r3, [pc, #856]	; 29734 <_obstack_memory_used@@Base+0x5188>
   293d8:	ldr	r2, [pc, #856]	; 29738 <_obstack_memory_used@@Base+0x518c>
   293dc:	str	r3, [sp]
   293e0:	mov	r1, #1
   293e4:	mov	r3, r0
   293e8:	mov	r0, r5
   293ec:	bl	11c18 <__fprintf_chk@plt>
   293f0:	mov	r1, r5
   293f4:	mov	r0, #10
   293f8:	bl	11978 <fputc_unlocked@plt>
   293fc:	mov	r2, #5
   29400:	ldr	r1, [pc, #820]	; 2973c <_obstack_memory_used@@Base+0x5190>
   29404:	mov	r0, #0
   29408:	bl	11984 <dcgettext@plt>
   2940c:	mov	r1, #1
   29410:	ldr	r3, [pc, #808]	; 29740 <_obstack_memory_used@@Base+0x5194>
   29414:	mov	r2, r0
   29418:	mov	r0, r5
   2941c:	bl	11c18 <__fprintf_chk@plt>
   29420:	mov	r1, r5
   29424:	mov	r0, #10
   29428:	bl	11978 <fputc_unlocked@plt>
   2942c:	cmp	r4, #9
   29430:	ldrls	pc, [pc, r4, lsl #2]
   29434:	b	296d8 <_obstack_memory_used@@Base+0x512c>
   29438:			; <UNDEFINED> instruction: 0x000294bc
   2943c:	andeq	r9, r2, r4, asr #9
   29440:	strdeq	r9, [r2], -r0
   29444:	andeq	r9, r2, r4, lsr #10
   29448:	andeq	r9, r2, ip, asr r5
   2944c:	muleq	r2, r8, r5
   29450:	ldrdeq	r9, [r2], -r4
   29454:	andeq	r9, r2, r8, lsl r6
   29458:	andeq	r9, r2, r4, ror #12
   2945c:	andeq	r9, r2, r0, ror #8
   29460:	ldr	r1, [pc, #732]	; 29744 <_obstack_memory_used@@Base+0x5198>
   29464:	mov	r2, #5
   29468:	mov	r0, #0
   2946c:	bl	11984 <dcgettext@plt>
   29470:	ldr	ip, [sp, #64]	; 0x40
   29474:	ldr	r1, [sp, #60]	; 0x3c
   29478:	ldr	r2, [sp, #56]	; 0x38
   2947c:	ldr	lr, [sp, #48]	; 0x30
   29480:	str	ip, [sp, #28]
   29484:	str	r1, [sp, #24]
   29488:	ldr	ip, [sp, #44]	; 0x2c
   2948c:	ldr	r1, [sp, #40]	; 0x28
   29490:	ldr	r4, [sp, #52]	; 0x34
   29494:	str	r2, [sp, #20]
   29498:	ldr	r2, [sp, #36]	; 0x24
   2949c:	stmib	sp, {r1, ip, lr}
   294a0:	mov	r1, #1
   294a4:	str	r2, [sp]
   294a8:	ldr	r3, [sp, #32]
   294ac:	str	r4, [sp, #16]
   294b0:	mov	r2, r0
   294b4:	mov	r0, r5
   294b8:	bl	11c18 <__fprintf_chk@plt>
   294bc:	add	sp, sp, #76	; 0x4c
   294c0:	pop	{r4, r5, pc}
   294c4:	mov	r2, #5
   294c8:	ldr	r1, [pc, #632]	; 29748 <_obstack_memory_used@@Base+0x519c>
   294cc:	mov	r0, #0
   294d0:	bl	11984 <dcgettext@plt>
   294d4:	ldr	r3, [sp, #32]
   294d8:	mov	r1, #1
   294dc:	mov	r2, r0
   294e0:	mov	r0, r5
   294e4:	add	sp, sp, #76	; 0x4c
   294e8:	pop	{r4, r5, lr}
   294ec:	b	11c18 <__fprintf_chk@plt>
   294f0:	mov	r2, #5
   294f4:	ldr	r1, [pc, #592]	; 2974c <_obstack_memory_used@@Base+0x51a0>
   294f8:	mov	r0, #0
   294fc:	bl	11984 <dcgettext@plt>
   29500:	ldr	r2, [sp, #36]	; 0x24
   29504:	ldr	r3, [sp, #32]
   29508:	str	r2, [sp, #88]	; 0x58
   2950c:	mov	r1, #1
   29510:	mov	r2, r0
   29514:	mov	r0, r5
   29518:	add	sp, sp, #76	; 0x4c
   2951c:	pop	{r4, r5, lr}
   29520:	b	11c18 <__fprintf_chk@plt>
   29524:	mov	r2, #5
   29528:	ldr	r1, [pc, #544]	; 29750 <_obstack_memory_used@@Base+0x51a4>
   2952c:	mov	r0, #0
   29530:	bl	11984 <dcgettext@plt>
   29534:	ldr	r1, [sp, #40]	; 0x28
   29538:	ldr	r2, [sp, #36]	; 0x24
   2953c:	str	r1, [sp, #4]
   29540:	str	r2, [sp]
   29544:	ldr	r3, [sp, #32]
   29548:	mov	r1, #1
   2954c:	mov	r2, r0
   29550:	mov	r0, r5
   29554:	bl	11c18 <__fprintf_chk@plt>
   29558:	b	294bc <_obstack_memory_used@@Base+0x4f10>
   2955c:	mov	r2, #5
   29560:	ldr	r1, [pc, #492]	; 29754 <_obstack_memory_used@@Base+0x51a8>
   29564:	mov	r0, #0
   29568:	bl	11984 <dcgettext@plt>
   2956c:	ldr	r1, [sp, #40]	; 0x28
   29570:	ldr	ip, [sp, #44]	; 0x2c
   29574:	ldr	r2, [sp, #36]	; 0x24
   29578:	ldr	r3, [sp, #32]
   2957c:	stmib	sp, {r1, ip}
   29580:	str	r2, [sp]
   29584:	mov	r1, #1
   29588:	mov	r2, r0
   2958c:	mov	r0, r5
   29590:	bl	11c18 <__fprintf_chk@plt>
   29594:	b	294bc <_obstack_memory_used@@Base+0x4f10>
   29598:	mov	r2, #5
   2959c:	ldr	r1, [pc, #436]	; 29758 <_obstack_memory_used@@Base+0x51ac>
   295a0:	mov	r0, #0
   295a4:	bl	11984 <dcgettext@plt>
   295a8:	add	r1, sp, #40	; 0x28
   295ac:	ldr	r2, [sp, #36]	; 0x24
   295b0:	ldm	r1, {r1, ip, lr}
   295b4:	ldr	r3, [sp, #32]
   295b8:	str	r2, [sp]
   295bc:	stmib	sp, {r1, ip, lr}
   295c0:	mov	r1, #1
   295c4:	mov	r2, r0
   295c8:	mov	r0, r5
   295cc:	bl	11c18 <__fprintf_chk@plt>
   295d0:	b	294bc <_obstack_memory_used@@Base+0x4f10>
   295d4:	mov	r2, #5
   295d8:	ldr	r1, [pc, #380]	; 2975c <_obstack_memory_used@@Base+0x51b0>
   295dc:	mov	r0, #0
   295e0:	bl	11984 <dcgettext@plt>
   295e4:	add	r1, sp, #40	; 0x28
   295e8:	ldr	r2, [sp, #36]	; 0x24
   295ec:	ldm	r1, {r1, ip, lr}
   295f0:	ldr	r4, [sp, #52]	; 0x34
   295f4:	str	r2, [sp]
   295f8:	stmib	sp, {r1, ip, lr}
   295fc:	mov	r1, #1
   29600:	ldr	r3, [sp, #32]
   29604:	str	r4, [sp, #16]
   29608:	mov	r2, r0
   2960c:	mov	r0, r5
   29610:	bl	11c18 <__fprintf_chk@plt>
   29614:	b	294bc <_obstack_memory_used@@Base+0x4f10>
   29618:	mov	r2, #5
   2961c:	ldr	r1, [pc, #316]	; 29760 <_obstack_memory_used@@Base+0x51b4>
   29620:	mov	r0, #0
   29624:	bl	11984 <dcgettext@plt>
   29628:	add	r1, sp, #40	; 0x28
   2962c:	ldr	r2, [sp, #56]	; 0x38
   29630:	ldm	r1, {r1, ip, lr}
   29634:	ldr	r4, [sp, #52]	; 0x34
   29638:	str	r2, [sp, #20]
   2963c:	ldr	r2, [sp, #36]	; 0x24
   29640:	stmib	sp, {r1, ip, lr}
   29644:	mov	r1, #1
   29648:	str	r2, [sp]
   2964c:	ldr	r3, [sp, #32]
   29650:	str	r4, [sp, #16]
   29654:	mov	r2, r0
   29658:	mov	r0, r5
   2965c:	bl	11c18 <__fprintf_chk@plt>
   29660:	b	294bc <_obstack_memory_used@@Base+0x4f10>
   29664:	mov	r2, #5
   29668:	ldr	r1, [pc, #244]	; 29764 <_obstack_memory_used@@Base+0x51b8>
   2966c:	mov	r0, #0
   29670:	bl	11984 <dcgettext@plt>
   29674:	ldr	r1, [sp, #60]	; 0x3c
   29678:	ldr	r2, [sp, #56]	; 0x38
   2967c:	ldr	lr, [sp, #48]	; 0x30
   29680:	ldr	ip, [sp, #44]	; 0x2c
   29684:	str	r1, [sp, #24]
   29688:	ldr	r1, [sp, #40]	; 0x28
   2968c:	ldr	r4, [sp, #52]	; 0x34
   29690:	str	r2, [sp, #20]
   29694:	ldr	r2, [sp, #36]	; 0x24
   29698:	stmib	sp, {r1, ip, lr}
   2969c:	mov	r1, #1
   296a0:	str	r2, [sp]
   296a4:	ldr	r3, [sp, #32]
   296a8:	str	r4, [sp, #16]
   296ac:	mov	r2, r0
   296b0:	mov	r0, r5
   296b4:	bl	11c18 <__fprintf_chk@plt>
   296b8:	b	294bc <_obstack_memory_used@@Base+0x4f10>
   296bc:	str	r3, [sp]
   296c0:	mov	r1, #1
   296c4:	mov	r3, r2
   296c8:	mov	r0, r5
   296cc:	ldr	r2, [pc, #148]	; 29768 <_obstack_memory_used@@Base+0x51bc>
   296d0:	bl	11c18 <__fprintf_chk@plt>
   296d4:	b	293c4 <_obstack_memory_used@@Base+0x4e18>
   296d8:	mov	r2, #5
   296dc:	ldr	r1, [pc, #136]	; 2976c <_obstack_memory_used@@Base+0x51c0>
   296e0:	b	29468 <_obstack_memory_used@@Base+0x4ebc>
   296e4:	mov	r4, r0
   296e8:	b	293a4 <_obstack_memory_used@@Base+0x4df8>
   296ec:	mov	r4, #1
   296f0:	b	293a4 <_obstack_memory_used@@Base+0x4df8>
   296f4:	mov	r4, #2
   296f8:	b	293a4 <_obstack_memory_used@@Base+0x4df8>
   296fc:	mov	r4, #3
   29700:	b	293a4 <_obstack_memory_used@@Base+0x4df8>
   29704:	mov	r4, #4
   29708:	b	293a4 <_obstack_memory_used@@Base+0x4df8>
   2970c:	mov	r4, #5
   29710:	b	293a4 <_obstack_memory_used@@Base+0x4df8>
   29714:	mov	r4, #6
   29718:	b	293a4 <_obstack_memory_used@@Base+0x4df8>
   2971c:	mov	r4, #7
   29720:	b	293a4 <_obstack_memory_used@@Base+0x4df8>
   29724:	mov	r4, #8
   29728:	b	293a4 <_obstack_memory_used@@Base+0x4df8>
   2972c:	andeq	r0, r3, r0, ror #6
   29730:	andeq	r0, r3, r4, ror r3
   29734:	andeq	r0, r0, r6, ror #15
   29738:	andeq	r0, r3, ip, asr #12
   2973c:	andeq	r0, r3, r8, ror r3
   29740:	andeq	r0, r3, r4, lsr #8
   29744:	andeq	r0, r3, r4, asr r5
   29748:	andeq	r0, r3, r8, asr #8
   2974c:	andeq	r0, r3, r8, asr r4
   29750:	andeq	r0, r3, r0, ror r4
   29754:	andeq	r0, r3, ip, lsl #9
   29758:	andeq	r0, r3, ip, lsr #9
   2975c:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   29760:	strdeq	r0, [r3], -r8
   29764:	andeq	r0, r3, r4, lsr #10
   29768:	andeq	r0, r3, ip, ror #6
   2976c:	andeq	r0, r3, r8, lsl #11
   29770:	push	{r3}		; (str r3, [sp, #-4]!)
   29774:	push	{lr}		; (str lr, [sp, #-4]!)
   29778:	sub	sp, sp, #56	; 0x38
   2977c:	add	r3, sp, #64	; 0x40
   29780:	ldr	ip, [sp, #64]	; 0x40
   29784:	str	r3, [sp, #12]
   29788:	cmp	ip, #0
   2978c:	str	ip, [sp, #16]
   29790:	beq	29828 <_obstack_memory_used@@Base+0x527c>
   29794:	ldr	ip, [sp, #68]	; 0x44
   29798:	cmp	ip, #0
   2979c:	str	ip, [sp, #20]
   297a0:	beq	29848 <_obstack_memory_used@@Base+0x529c>
   297a4:	ldr	ip, [sp, #72]	; 0x48
   297a8:	cmp	ip, #0
   297ac:	str	ip, [sp, #24]
   297b0:	beq	29850 <_obstack_memory_used@@Base+0x52a4>
   297b4:	ldr	ip, [sp, #76]	; 0x4c
   297b8:	cmp	ip, #0
   297bc:	str	ip, [sp, #28]
   297c0:	beq	29858 <_obstack_memory_used@@Base+0x52ac>
   297c4:	ldr	ip, [sp, #80]	; 0x50
   297c8:	cmp	ip, #0
   297cc:	str	ip, [sp, #32]
   297d0:	beq	29860 <_obstack_memory_used@@Base+0x52b4>
   297d4:	ldr	ip, [sp, #84]	; 0x54
   297d8:	cmp	ip, #0
   297dc:	str	ip, [sp, #36]	; 0x24
   297e0:	beq	29868 <_obstack_memory_used@@Base+0x52bc>
   297e4:	ldr	ip, [sp, #88]	; 0x58
   297e8:	cmp	ip, #0
   297ec:	str	ip, [sp, #40]	; 0x28
   297f0:	beq	29870 <_obstack_memory_used@@Base+0x52c4>
   297f4:	ldr	ip, [sp, #92]	; 0x5c
   297f8:	cmp	ip, #0
   297fc:	str	ip, [sp, #44]	; 0x2c
   29800:	beq	29878 <_obstack_memory_used@@Base+0x52cc>
   29804:	ldr	ip, [sp, #96]	; 0x60
   29808:	cmp	ip, #0
   2980c:	str	ip, [sp, #48]	; 0x30
   29810:	beq	29880 <_obstack_memory_used@@Base+0x52d4>
   29814:	ldr	ip, [sp, #100]	; 0x64
   29818:	cmp	ip, #0
   2981c:	str	ip, [sp, #52]	; 0x34
   29820:	movne	ip, #10
   29824:	moveq	ip, #9
   29828:	add	r3, sp, #16
   2982c:	stm	sp, {r3, ip}
   29830:	ldr	r3, [sp, #60]	; 0x3c
   29834:	bl	28f1c <_obstack_memory_used@@Base+0x4970>
   29838:	add	sp, sp, #56	; 0x38
   2983c:	pop	{lr}		; (ldr lr, [sp], #4)
   29840:	add	sp, sp, #4
   29844:	bx	lr
   29848:	mov	ip, #1
   2984c:	b	29828 <_obstack_memory_used@@Base+0x527c>
   29850:	mov	ip, #2
   29854:	b	29828 <_obstack_memory_used@@Base+0x527c>
   29858:	mov	ip, #3
   2985c:	b	29828 <_obstack_memory_used@@Base+0x527c>
   29860:	mov	ip, #4
   29864:	b	29828 <_obstack_memory_used@@Base+0x527c>
   29868:	mov	ip, #5
   2986c:	b	29828 <_obstack_memory_used@@Base+0x527c>
   29870:	mov	ip, #6
   29874:	b	29828 <_obstack_memory_used@@Base+0x527c>
   29878:	mov	ip, #7
   2987c:	b	29828 <_obstack_memory_used@@Base+0x527c>
   29880:	mov	ip, #8
   29884:	b	29828 <_obstack_memory_used@@Base+0x527c>
   29888:	ldr	r3, [pc, #116]	; 29904 <_obstack_memory_used@@Base+0x5358>
   2988c:	push	{r4, lr}
   29890:	mov	r0, #10
   29894:	ldr	r1, [r3]
   29898:	bl	11978 <fputc_unlocked@plt>
   2989c:	mov	r2, #5
   298a0:	ldr	r1, [pc, #96]	; 29908 <_obstack_memory_used@@Base+0x535c>
   298a4:	mov	r0, #0
   298a8:	bl	11984 <dcgettext@plt>
   298ac:	ldr	r2, [pc, #88]	; 2990c <_obstack_memory_used@@Base+0x5360>
   298b0:	mov	r1, r0
   298b4:	mov	r0, #1
   298b8:	bl	11bf4 <__printf_chk@plt>
   298bc:	mov	r2, #5
   298c0:	ldr	r1, [pc, #72]	; 29910 <_obstack_memory_used@@Base+0x5364>
   298c4:	mov	r0, #0
   298c8:	bl	11984 <dcgettext@plt>
   298cc:	ldr	r3, [pc, #64]	; 29914 <_obstack_memory_used@@Base+0x5368>
   298d0:	ldr	r2, [pc, #64]	; 29918 <_obstack_memory_used@@Base+0x536c>
   298d4:	mov	r1, r0
   298d8:	mov	r0, #1
   298dc:	bl	11bf4 <__printf_chk@plt>
   298e0:	mov	r2, #5
   298e4:	ldr	r1, [pc, #48]	; 2991c <_obstack_memory_used@@Base+0x5370>
   298e8:	mov	r0, #0
   298ec:	bl	11984 <dcgettext@plt>
   298f0:	ldr	r2, [pc, #40]	; 29920 <_obstack_memory_used@@Base+0x5374>
   298f4:	pop	{r4, lr}
   298f8:	mov	r1, r0
   298fc:	mov	r0, #1
   29900:	b	11bf4 <__printf_chk@plt>
   29904:	andeq	r1, r4, r4, lsr #6
   29908:	andeq	r0, r3, r4, asr #11
   2990c:	ldrdeq	r0, [r3], -r8
   29910:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   29914:	andeq	pc, r2, ip, ror #14
   29918:	muleq	r2, r4, r7
   2991c:	andeq	r0, r3, r4, lsl #12
   29920:	andeq	r0, r3, ip, lsr #12
   29924:	push	{r4, r5, r6, lr}
   29928:	mov	r6, r0
   2992c:	mov	r5, r1
   29930:	mov	r4, r2
   29934:	bl	2b520 <_obstack_memory_used@@Base+0x6f74>
   29938:	cmp	r0, #0
   2993c:	popne	{r4, r5, r6, pc}
   29940:	cmp	r6, #0
   29944:	beq	29954 <_obstack_memory_used@@Base+0x53a8>
   29948:	cmp	r5, #0
   2994c:	cmpne	r4, #0
   29950:	popeq	{r4, r5, r6, pc}
   29954:	bl	29fa0 <_obstack_memory_used@@Base+0x59f4>
   29958:	push	{r4, lr}
   2995c:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   29960:	cmp	r0, #0
   29964:	popne	{r4, pc}
   29968:	bl	29fa0 <_obstack_memory_used@@Base+0x59f4>
   2996c:	push	{r4, lr}
   29970:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   29974:	cmp	r0, #0
   29978:	popne	{r4, pc}
   2997c:	bl	29fa0 <_obstack_memory_used@@Base+0x59f4>
   29980:	push	{r4, lr}
   29984:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   29988:	cmp	r0, #0
   2998c:	popne	{r4, pc}
   29990:	bl	29fa0 <_obstack_memory_used@@Base+0x59f4>
   29994:	push	{r4, r5, r6, lr}
   29998:	mov	r5, r0
   2999c:	mov	r4, r1
   299a0:	bl	2b238 <_obstack_memory_used@@Base+0x6c8c>
   299a4:	cmp	r0, #0
   299a8:	popne	{r4, r5, r6, pc}
   299ac:	adds	r4, r4, #0
   299b0:	movne	r4, #1
   299b4:	cmp	r5, #0
   299b8:	orreq	r4, r4, #1
   299bc:	cmp	r4, #0
   299c0:	popeq	{r4, r5, r6, pc}
   299c4:	bl	29fa0 <_obstack_memory_used@@Base+0x59f4>
   299c8:	push	{r4, lr}
   299cc:	cmp	r1, #0
   299d0:	orreq	r1, r1, #1
   299d4:	bl	2b238 <_obstack_memory_used@@Base+0x6c8c>
   299d8:	cmp	r0, #0
   299dc:	popne	{r4, pc}
   299e0:	bl	29fa0 <_obstack_memory_used@@Base+0x59f4>
   299e4:	push	{r4, r5, r6, lr}
   299e8:	mov	r6, r0
   299ec:	mov	r5, r1
   299f0:	mov	r4, r2
   299f4:	bl	2b520 <_obstack_memory_used@@Base+0x6f74>
   299f8:	cmp	r0, #0
   299fc:	popne	{r4, r5, r6, pc}
   29a00:	cmp	r6, #0
   29a04:	beq	29a14 <_obstack_memory_used@@Base+0x5468>
   29a08:	cmp	r5, #0
   29a0c:	cmpne	r4, #0
   29a10:	popeq	{r4, r5, r6, pc}
   29a14:	bl	29fa0 <_obstack_memory_used@@Base+0x59f4>
   29a18:	cmp	r2, #0
   29a1c:	cmpne	r1, #0
   29a20:	moveq	r2, #1
   29a24:	moveq	r1, r2
   29a28:	push	{r4, lr}
   29a2c:	bl	2b520 <_obstack_memory_used@@Base+0x6f74>
   29a30:	cmp	r0, #0
   29a34:	popne	{r4, pc}
   29a38:	bl	29fa0 <_obstack_memory_used@@Base+0x59f4>
   29a3c:	push	{r4, lr}
   29a40:	mov	r2, r1
   29a44:	mov	r1, r0
   29a48:	mov	r0, #0
   29a4c:	bl	2b520 <_obstack_memory_used@@Base+0x6f74>
   29a50:	cmp	r0, #0
   29a54:	popne	{r4, pc}
   29a58:	bl	29fa0 <_obstack_memory_used@@Base+0x59f4>
   29a5c:	cmp	r1, #0
   29a60:	cmpne	r0, #0
   29a64:	moveq	r2, #1
   29a68:	movne	r2, r1
   29a6c:	moveq	r1, r2
   29a70:	movne	r1, r0
   29a74:	push	{r4, lr}
   29a78:	mov	r0, #0
   29a7c:	bl	2b520 <_obstack_memory_used@@Base+0x6f74>
   29a80:	cmp	r0, #0
   29a84:	popne	{r4, pc}
   29a88:	bl	29fa0 <_obstack_memory_used@@Base+0x59f4>
   29a8c:	cmp	r0, #0
   29a90:	push	{r4, r5, r6, lr}
   29a94:	mov	r5, r1
   29a98:	ldr	r4, [r1]
   29a9c:	beq	29ad8 <_obstack_memory_used@@Base+0x552c>
   29aa0:	lsr	r2, r4, #1
   29aa4:	add	r3, r2, #1
   29aa8:	mvn	r3, r3
   29aac:	cmp	r4, r3
   29ab0:	bhi	29af4 <_obstack_memory_used@@Base+0x5548>
   29ab4:	add	r4, r4, #1
   29ab8:	add	r4, r4, r2
   29abc:	mov	r1, r4
   29ac0:	mov	r2, #1
   29ac4:	bl	2b520 <_obstack_memory_used@@Base+0x6f74>
   29ac8:	cmp	r0, #0
   29acc:	beq	29af8 <_obstack_memory_used@@Base+0x554c>
   29ad0:	str	r4, [r5]
   29ad4:	pop	{r4, r5, r6, pc}
   29ad8:	cmp	r4, #0
   29adc:	moveq	r4, #64	; 0x40
   29ae0:	mov	r1, r4
   29ae4:	mov	r2, #1
   29ae8:	bl	2b520 <_obstack_memory_used@@Base+0x6f74>
   29aec:	cmp	r0, #0
   29af0:	bne	29ad0 <_obstack_memory_used@@Base+0x5524>
   29af4:	bl	29fa0 <_obstack_memory_used@@Base+0x59f4>
   29af8:	cmp	r4, #0
   29afc:	bne	29af4 <_obstack_memory_used@@Base+0x5548>
   29b00:	str	r4, [r5]
   29b04:	pop	{r4, r5, r6, pc}
   29b08:	cmp	r0, #0
   29b0c:	push	{r4, r5, r6, lr}
   29b10:	mov	r5, r1
   29b14:	ldr	r4, [r1]
   29b18:	mov	r6, r2
   29b1c:	beq	29b60 <_obstack_memory_used@@Base+0x55b4>
   29b20:	lsr	r1, r4, #1
   29b24:	add	r3, r1, #1
   29b28:	mvn	r3, r3
   29b2c:	cmp	r4, r3
   29b30:	bhi	29b98 <_obstack_memory_used@@Base+0x55ec>
   29b34:	add	r4, r4, #1
   29b38:	add	r4, r4, r1
   29b3c:	mov	r1, r4
   29b40:	bl	2b520 <_obstack_memory_used@@Base+0x6f74>
   29b44:	cmp	r0, #0
   29b48:	bne	29b58 <_obstack_memory_used@@Base+0x55ac>
   29b4c:	cmp	r4, #0
   29b50:	cmpne	r6, #0
   29b54:	bne	29b98 <_obstack_memory_used@@Base+0x55ec>
   29b58:	str	r4, [r5]
   29b5c:	pop	{r4, r5, r6, pc}
   29b60:	cmp	r4, #0
   29b64:	bne	29b80 <_obstack_memory_used@@Base+0x55d4>
   29b68:	mov	r1, r2
   29b6c:	mov	r0, #64	; 0x40
   29b70:	bl	2b56c <_obstack_memory_used@@Base+0x6fc0>
   29b74:	cmp	r0, #0
   29b78:	movne	r4, r0
   29b7c:	addeq	r4, r0, #1
   29b80:	mov	r2, r6
   29b84:	mov	r1, r4
   29b88:	mov	r0, #0
   29b8c:	bl	2b520 <_obstack_memory_used@@Base+0x6f74>
   29b90:	cmp	r0, #0
   29b94:	bne	29b58 <_obstack_memory_used@@Base+0x55ac>
   29b98:	bl	29fa0 <_obstack_memory_used@@Base+0x59f4>
   29b9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29ba0:	sub	sp, sp, #12
   29ba4:	ldr	r6, [r1]
   29ba8:	mov	r8, r1
   29bac:	mov	r9, r0
   29bb0:	asrs	r4, r6, #1
   29bb4:	mov	sl, r2
   29bb8:	mov	fp, r3
   29bbc:	ldr	r7, [sp, #48]	; 0x30
   29bc0:	bmi	29d3c <_obstack_memory_used@@Base+0x5790>
   29bc4:	mvn	r1, #-2147483648	; 0x80000000
   29bc8:	sub	r1, r1, r4
   29bcc:	cmp	r6, r1
   29bd0:	movle	r1, #0
   29bd4:	movgt	r1, #1
   29bd8:	mvn	r3, fp
   29bdc:	cmp	r1, #0
   29be0:	addeq	r4, r4, r6
   29be4:	mvnne	r4, #-2147483648	; 0x80000000
   29be8:	lsr	r3, r3, #31
   29bec:	cmp	fp, r4
   29bf0:	movge	r2, #0
   29bf4:	andlt	r2, r3, #1
   29bf8:	cmp	r2, #0
   29bfc:	beq	29cec <_obstack_memory_used@@Base+0x5740>
   29c00:	cmp	r7, #0
   29c04:	blt	29dd4 <_obstack_memory_used@@Base+0x5828>
   29c08:	bne	29dcc <_obstack_memory_used@@Base+0x5820>
   29c0c:	mov	r5, #64	; 0x40
   29c10:	mov	r1, r7
   29c14:	mov	r0, r5
   29c18:	str	r3, [sp, #4]
   29c1c:	bl	2b778 <_obstack_memory_used@@Base+0x71cc>
   29c20:	mov	r1, r7
   29c24:	mov	r4, r0
   29c28:	mov	r0, r5
   29c2c:	bl	2b998 <_obstack_memory_used@@Base+0x73ec>
   29c30:	ldr	r3, [sp, #4]
   29c34:	sub	r5, r5, r1
   29c38:	cmp	r9, #0
   29c3c:	sub	r2, r4, r6
   29c40:	streq	r9, [r8]
   29c44:	cmp	r2, sl
   29c48:	bge	29ccc <_obstack_memory_used@@Base+0x5720>
   29c4c:	cmp	sl, #0
   29c50:	blt	29d6c <_obstack_memory_used@@Base+0x57c0>
   29c54:	cmp	r6, #0
   29c58:	blt	29c78 <_obstack_memory_used@@Base+0x56cc>
   29c5c:	mvn	r2, #-2147483648	; 0x80000000
   29c60:	sub	r2, r2, sl
   29c64:	cmp	r6, r2
   29c68:	movle	r2, #0
   29c6c:	movgt	r2, #1
   29c70:	cmp	r2, #0
   29c74:	bne	29d68 <_obstack_memory_used@@Base+0x57bc>
   29c78:	add	r6, r6, sl
   29c7c:	cmp	fp, r6
   29c80:	movge	r3, #0
   29c84:	andlt	r3, r3, #1
   29c88:	cmp	r3, #0
   29c8c:	mov	r4, r6
   29c90:	bne	29d68 <_obstack_memory_used@@Base+0x57bc>
   29c94:	cmp	r7, #0
   29c98:	blt	29d80 <_obstack_memory_used@@Base+0x57d4>
   29c9c:	beq	29cc8 <_obstack_memory_used@@Base+0x571c>
   29ca0:	cmp	r6, #0
   29ca4:	blt	29e24 <_obstack_memory_used@@Base+0x5878>
   29ca8:	mov	r1, r7
   29cac:	mvn	r0, #-2147483648	; 0x80000000
   29cb0:	bl	2b778 <_obstack_memory_used@@Base+0x71cc>
   29cb4:	cmp	r6, r0
   29cb8:	movle	r0, #0
   29cbc:	movgt	r0, #1
   29cc0:	cmp	r0, #0
   29cc4:	bne	29d68 <_obstack_memory_used@@Base+0x57bc>
   29cc8:	mul	r5, r6, r7
   29ccc:	mov	r1, r5
   29cd0:	mov	r0, r9
   29cd4:	bl	2b238 <_obstack_memory_used@@Base+0x6c8c>
   29cd8:	cmp	r0, #0
   29cdc:	beq	29d50 <_obstack_memory_used@@Base+0x57a4>
   29ce0:	str	r4, [r8]
   29ce4:	add	sp, sp, #12
   29ce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29cec:	cmp	r7, #0
   29cf0:	blt	29dac <_obstack_memory_used@@Base+0x5800>
   29cf4:	beq	29c0c <_obstack_memory_used@@Base+0x5660>
   29cf8:	cmp	r4, #0
   29cfc:	blt	29ddc <_obstack_memory_used@@Base+0x5830>
   29d00:	mov	r1, r7
   29d04:	mvn	r0, #-2147483648	; 0x80000000
   29d08:	str	r3, [sp, #4]
   29d0c:	bl	2b778 <_obstack_memory_used@@Base+0x71cc>
   29d10:	ldr	r3, [sp, #4]
   29d14:	cmp	r0, r4
   29d18:	movge	r0, #0
   29d1c:	movlt	r0, #1
   29d20:	cmp	r0, #0
   29d24:	mvnne	r5, #-2147483648	; 0x80000000
   29d28:	bne	29c10 <_obstack_memory_used@@Base+0x5664>
   29d2c:	mul	r5, r7, r4
   29d30:	cmp	r5, #63	; 0x3f
   29d34:	bgt	29c38 <_obstack_memory_used@@Base+0x568c>
   29d38:	b	29c0c <_obstack_memory_used@@Base+0x5660>
   29d3c:	rsb	r1, r4, #-2147483648	; 0x80000000
   29d40:	cmp	r6, r1
   29d44:	movge	r1, #0
   29d48:	movlt	r1, #1
   29d4c:	b	29bd8 <_obstack_memory_used@@Base+0x562c>
   29d50:	adds	r5, r5, #0
   29d54:	movne	r5, #1
   29d58:	cmp	r9, #0
   29d5c:	orreq	r5, r5, #1
   29d60:	cmp	r5, #0
   29d64:	beq	29ce0 <_obstack_memory_used@@Base+0x5734>
   29d68:	bl	29fa0 <_obstack_memory_used@@Base+0x59f4>
   29d6c:	rsb	r2, sl, #-2147483648	; 0x80000000
   29d70:	cmp	r6, r2
   29d74:	movge	r2, #0
   29d78:	movlt	r2, #1
   29d7c:	b	29c70 <_obstack_memory_used@@Base+0x56c4>
   29d80:	cmp	r6, #0
   29d84:	blt	29e08 <_obstack_memory_used@@Base+0x585c>
   29d88:	cmn	r7, #1
   29d8c:	beq	29cc8 <_obstack_memory_used@@Base+0x571c>
   29d90:	mov	r1, r7
   29d94:	mov	r0, #-2147483648	; 0x80000000
   29d98:	bl	2b778 <_obstack_memory_used@@Base+0x71cc>
   29d9c:	cmp	r6, r0
   29da0:	movle	r0, #0
   29da4:	movgt	r0, #1
   29da8:	b	29cc0 <_obstack_memory_used@@Base+0x5714>
   29dac:	cmp	r4, #0
   29db0:	blt	29e48 <_obstack_memory_used@@Base+0x589c>
   29db4:	cmn	r7, #1
   29db8:	beq	29d2c <_obstack_memory_used@@Base+0x5780>
   29dbc:	str	r3, [sp, #4]
   29dc0:	mov	r1, r7
   29dc4:	mov	r0, #-2147483648	; 0x80000000
   29dc8:	b	29d0c <_obstack_memory_used@@Base+0x5760>
   29dcc:	mov	r4, fp
   29dd0:	b	29d00 <_obstack_memory_used@@Base+0x5754>
   29dd4:	mov	r4, fp
   29dd8:	b	29db4 <_obstack_memory_used@@Base+0x5808>
   29ddc:	cmn	r4, #1
   29de0:	beq	29d2c <_obstack_memory_used@@Base+0x5780>
   29de4:	mov	r1, r4
   29de8:	mov	r0, #-2147483648	; 0x80000000
   29dec:	str	r3, [sp, #4]
   29df0:	bl	2b778 <_obstack_memory_used@@Base+0x71cc>
   29df4:	ldr	r3, [sp, #4]
   29df8:	cmp	r7, r0
   29dfc:	movle	r0, #0
   29e00:	movgt	r0, #1
   29e04:	b	29d20 <_obstack_memory_used@@Base+0x5774>
   29e08:	mov	r1, r7
   29e0c:	mvn	r0, #-2147483648	; 0x80000000
   29e10:	bl	2b778 <_obstack_memory_used@@Base+0x71cc>
   29e14:	cmp	r6, r0
   29e18:	movge	r0, #0
   29e1c:	movlt	r0, #1
   29e20:	b	29cc0 <_obstack_memory_used@@Base+0x5714>
   29e24:	cmn	r6, #1
   29e28:	beq	29cc8 <_obstack_memory_used@@Base+0x571c>
   29e2c:	mov	r1, r6
   29e30:	mov	r0, #-2147483648	; 0x80000000
   29e34:	bl	2b778 <_obstack_memory_used@@Base+0x71cc>
   29e38:	cmp	r7, r0
   29e3c:	movle	r0, #0
   29e40:	movgt	r0, #1
   29e44:	b	29cc0 <_obstack_memory_used@@Base+0x5714>
   29e48:	mov	r1, r7
   29e4c:	mvn	r0, #-2147483648	; 0x80000000
   29e50:	str	r3, [sp, #4]
   29e54:	bl	2b778 <_obstack_memory_used@@Base+0x71cc>
   29e58:	ldr	r3, [sp, #4]
   29e5c:	cmp	r0, r4
   29e60:	movle	r0, #0
   29e64:	movgt	r0, #1
   29e68:	b	29d20 <_obstack_memory_used@@Base+0x5774>
   29e6c:	push	{r4, lr}
   29e70:	mov	r1, #1
   29e74:	bl	2b1c4 <_obstack_memory_used@@Base+0x6c18>
   29e78:	cmp	r0, #0
   29e7c:	popne	{r4, pc}
   29e80:	bl	29fa0 <_obstack_memory_used@@Base+0x59f4>
   29e84:	push	{r4, lr}
   29e88:	mov	r1, #1
   29e8c:	bl	2b1c4 <_obstack_memory_used@@Base+0x6c18>
   29e90:	cmp	r0, #0
   29e94:	popne	{r4, pc}
   29e98:	bl	29fa0 <_obstack_memory_used@@Base+0x59f4>
   29e9c:	push	{r4, lr}
   29ea0:	bl	2b1c4 <_obstack_memory_used@@Base+0x6c18>
   29ea4:	cmp	r0, #0
   29ea8:	popne	{r4, pc}
   29eac:	bl	29fa0 <_obstack_memory_used@@Base+0x59f4>
   29eb0:	push	{r4, lr}
   29eb4:	bl	2b1c4 <_obstack_memory_used@@Base+0x6c18>
   29eb8:	cmp	r0, #0
   29ebc:	popne	{r4, pc}
   29ec0:	bl	29fa0 <_obstack_memory_used@@Base+0x59f4>
   29ec4:	push	{r4, r5, r6, lr}
   29ec8:	mov	r6, r0
   29ecc:	mov	r0, r1
   29ed0:	mov	r4, r1
   29ed4:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   29ed8:	subs	r5, r0, #0
   29edc:	beq	29ef4 <_obstack_memory_used@@Base+0x5948>
   29ee0:	mov	r2, r4
   29ee4:	mov	r1, r6
   29ee8:	bl	11930 <memcpy@plt>
   29eec:	mov	r0, r5
   29ef0:	pop	{r4, r5, r6, pc}
   29ef4:	bl	29fa0 <_obstack_memory_used@@Base+0x59f4>
   29ef8:	push	{r4, r5, r6, lr}
   29efc:	mov	r6, r0
   29f00:	mov	r0, r1
   29f04:	mov	r4, r1
   29f08:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   29f0c:	subs	r5, r0, #0
   29f10:	beq	29f28 <_obstack_memory_used@@Base+0x597c>
   29f14:	mov	r2, r4
   29f18:	mov	r1, r6
   29f1c:	bl	11930 <memcpy@plt>
   29f20:	mov	r0, r5
   29f24:	pop	{r4, r5, r6, pc}
   29f28:	bl	29fa0 <_obstack_memory_used@@Base+0x59f4>
   29f2c:	push	{r4, r5, r6, lr}
   29f30:	mov	r6, r0
   29f34:	add	r0, r1, #1
   29f38:	mov	r4, r1
   29f3c:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   29f40:	subs	r5, r0, #0
   29f44:	beq	29f64 <_obstack_memory_used@@Base+0x59b8>
   29f48:	mov	r3, #0
   29f4c:	mov	r1, r6
   29f50:	strb	r3, [r5, r4]
   29f54:	mov	r2, r4
   29f58:	bl	11930 <memcpy@plt>
   29f5c:	mov	r0, r5
   29f60:	pop	{r4, r5, r6, pc}
   29f64:	bl	29fa0 <_obstack_memory_used@@Base+0x59f4>
   29f68:	push	{r4, r5, r6, lr}
   29f6c:	mov	r6, r0
   29f70:	bl	11b94 <strlen@plt>
   29f74:	add	r4, r0, #1
   29f78:	mov	r0, r4
   29f7c:	bl	2b20c <_obstack_memory_used@@Base+0x6c60>
   29f80:	subs	r5, r0, #0
   29f84:	beq	29f9c <_obstack_memory_used@@Base+0x59f0>
   29f88:	mov	r2, r4
   29f8c:	mov	r1, r6
   29f90:	bl	11930 <memcpy@plt>
   29f94:	mov	r0, r5
   29f98:	pop	{r4, r5, r6, pc}
   29f9c:	bl	29fa0 <_obstack_memory_used@@Base+0x59f4>
   29fa0:	ldr	r3, [pc, #44]	; 29fd4 <_obstack_memory_used@@Base+0x5a28>
   29fa4:	push	{r4, lr}
   29fa8:	mov	r2, #5
   29fac:	ldr	r1, [pc, #36]	; 29fd8 <_obstack_memory_used@@Base+0x5a2c>
   29fb0:	mov	r0, #0
   29fb4:	ldr	r4, [r3]
   29fb8:	bl	11984 <dcgettext@plt>
   29fbc:	ldr	r2, [pc, #24]	; 29fdc <_obstack_memory_used@@Base+0x5a30>
   29fc0:	mov	r1, #0
   29fc4:	mov	r3, r0
   29fc8:	mov	r0, r4
   29fcc:	bl	11a8c <error@plt>
   29fd0:	bl	11d2c <abort@plt>
   29fd4:	andeq	r1, r4, r4, asr #5
   29fd8:	andeq	r0, r3, ip, asr #4
   29fdc:	andeq	pc, r2, ip, lsr #19
   29fe0:	push	{r4, r5, r6, r7, lr}
   29fe4:	sub	sp, sp, #20
   29fe8:	mov	r6, r2
   29fec:	ldr	ip, [sp, #48]	; 0x30
   29ff0:	mov	r2, r1
   29ff4:	mov	r7, r3
   29ff8:	str	ip, [sp]
   29ffc:	add	r3, sp, #8
   2a000:	mov	r1, #0
   2a004:	mov	r5, r0
   2a008:	ldr	r4, [sp, #56]	; 0x38
   2a00c:	bl	2a3f8 <_obstack_memory_used@@Base+0x5e4c>
   2a010:	cmp	r0, #0
   2a014:	bne	2a098 <_obstack_memory_used@@Base+0x5aec>
   2a018:	ldrd	r0, [sp, #8]
   2a01c:	cmp	r1, r7
   2a020:	cmpeq	r0, r6
   2a024:	ldrd	r6, [sp, #40]	; 0x28
   2a028:	movcc	r3, #1
   2a02c:	movcs	r3, #0
   2a030:	cmp	r1, r7
   2a034:	cmpeq	r0, r6
   2a038:	orrhi	r3, r3, #1
   2a03c:	cmp	r3, #0
   2a040:	beq	2a090 <_obstack_memory_used@@Base+0x5ae4>
   2a044:	mov	r3, #0
   2a048:	mvn	r2, #-1073741824	; 0xc0000000
   2a04c:	cmp	r1, r3
   2a050:	cmpeq	r0, r2
   2a054:	bhi	2a0c4 <_obstack_memory_used@@Base+0x5b18>
   2a058:	bl	11bb8 <__errno_location@plt>
   2a05c:	mov	r3, #34	; 0x22
   2a060:	mov	r6, r3
   2a064:	str	r3, [r0]
   2a068:	cmp	r4, #0
   2a06c:	moveq	r4, #1
   2a070:	mov	r0, r5
   2a074:	bl	284ac <_obstack_memory_used@@Base+0x3f00>
   2a078:	mov	r1, r6
   2a07c:	ldr	r3, [sp, #52]	; 0x34
   2a080:	ldr	r2, [pc, #144]	; 2a118 <_obstack_memory_used@@Base+0x5b6c>
   2a084:	str	r0, [sp]
   2a088:	mov	r0, r4
   2a08c:	bl	11a8c <error@plt>
   2a090:	add	sp, sp, #20
   2a094:	pop	{r4, r5, r6, r7, pc}
   2a098:	cmp	r0, #1
   2a09c:	beq	2a0d8 <_obstack_memory_used@@Base+0x5b2c>
   2a0a0:	cmp	r0, #3
   2a0a4:	beq	2a108 <_obstack_memory_used@@Base+0x5b5c>
   2a0a8:	cmp	r4, #0
   2a0ac:	beq	2a0f8 <_obstack_memory_used@@Base+0x5b4c>
   2a0b0:	bl	11bb8 <__errno_location@plt>
   2a0b4:	ldr	r6, [r0]
   2a0b8:	cmp	r6, #22
   2a0bc:	moveq	r6, #0
   2a0c0:	b	2a070 <_obstack_memory_used@@Base+0x5ac4>
   2a0c4:	bl	11bb8 <__errno_location@plt>
   2a0c8:	mov	r3, #75	; 0x4b
   2a0cc:	mov	r6, r3
   2a0d0:	str	r3, [r0]
   2a0d4:	b	2a068 <_obstack_memory_used@@Base+0x5abc>
   2a0d8:	bl	11bb8 <__errno_location@plt>
   2a0dc:	mov	r3, #75	; 0x4b
   2a0e0:	mov	r6, r3
   2a0e4:	str	r3, [r0]
   2a0e8:	cmp	r4, #0
   2a0ec:	moveq	r4, #1
   2a0f0:	bne	2a0b8 <_obstack_memory_used@@Base+0x5b0c>
   2a0f4:	b	2a070 <_obstack_memory_used@@Base+0x5ac4>
   2a0f8:	bl	11bb8 <__errno_location@plt>
   2a0fc:	mov	r4, #1
   2a100:	ldr	r6, [r0]
   2a104:	b	2a0b8 <_obstack_memory_used@@Base+0x5b0c>
   2a108:	bl	11bb8 <__errno_location@plt>
   2a10c:	mov	r6, #0
   2a110:	str	r6, [r0]
   2a114:	b	2a0e8 <_obstack_memory_used@@Base+0x5b3c>
   2a118:			; <UNDEFINED> instruction: 0x0002f8b0
   2a11c:	push	{r4, r5, r6, r7, lr}
   2a120:	sub	sp, sp, #20
   2a124:	mov	r6, r2
   2a128:	ldr	r1, [sp, #48]	; 0x30
   2a12c:	mov	r7, r3
   2a130:	str	r1, [sp]
   2a134:	add	r3, sp, #8
   2a138:	mov	r2, #10
   2a13c:	mov	r1, #0
   2a140:	mov	r5, r0
   2a144:	ldr	r4, [sp, #56]	; 0x38
   2a148:	bl	2a3f8 <_obstack_memory_used@@Base+0x5e4c>
   2a14c:	cmp	r0, #0
   2a150:	bne	2a1d4 <_obstack_memory_used@@Base+0x5c28>
   2a154:	ldrd	r0, [sp, #8]
   2a158:	cmp	r7, r1
   2a15c:	cmpeq	r6, r0
   2a160:	ldrd	r6, [sp, #40]	; 0x28
   2a164:	movhi	r3, #1
   2a168:	movls	r3, #0
   2a16c:	cmp	r7, r1
   2a170:	cmpeq	r6, r0
   2a174:	orrcc	r3, r3, #1
   2a178:	cmp	r3, #0
   2a17c:	beq	2a1cc <_obstack_memory_used@@Base+0x5c20>
   2a180:	mov	r3, #0
   2a184:	mvn	r2, #-1073741824	; 0xc0000000
   2a188:	cmp	r1, r3
   2a18c:	cmpeq	r0, r2
   2a190:	bhi	2a200 <_obstack_memory_used@@Base+0x5c54>
   2a194:	bl	11bb8 <__errno_location@plt>
   2a198:	mov	r3, #34	; 0x22
   2a19c:	mov	r6, r3
   2a1a0:	str	r3, [r0]
   2a1a4:	cmp	r4, #0
   2a1a8:	moveq	r4, #1
   2a1ac:	mov	r0, r5
   2a1b0:	bl	284ac <_obstack_memory_used@@Base+0x3f00>
   2a1b4:	mov	r1, r6
   2a1b8:	ldr	r3, [sp, #52]	; 0x34
   2a1bc:	ldr	r2, [pc, #144]	; 2a254 <_obstack_memory_used@@Base+0x5ca8>
   2a1c0:	str	r0, [sp]
   2a1c4:	mov	r0, r4
   2a1c8:	bl	11a8c <error@plt>
   2a1cc:	add	sp, sp, #20
   2a1d0:	pop	{r4, r5, r6, r7, pc}
   2a1d4:	cmp	r0, #1
   2a1d8:	beq	2a214 <_obstack_memory_used@@Base+0x5c68>
   2a1dc:	cmp	r0, #3
   2a1e0:	beq	2a244 <_obstack_memory_used@@Base+0x5c98>
   2a1e4:	cmp	r4, #0
   2a1e8:	beq	2a234 <_obstack_memory_used@@Base+0x5c88>
   2a1ec:	bl	11bb8 <__errno_location@plt>
   2a1f0:	ldr	r6, [r0]
   2a1f4:	cmp	r6, #22
   2a1f8:	moveq	r6, #0
   2a1fc:	b	2a1ac <_obstack_memory_used@@Base+0x5c00>
   2a200:	bl	11bb8 <__errno_location@plt>
   2a204:	mov	r3, #75	; 0x4b
   2a208:	mov	r6, r3
   2a20c:	str	r3, [r0]
   2a210:	b	2a1a4 <_obstack_memory_used@@Base+0x5bf8>
   2a214:	bl	11bb8 <__errno_location@plt>
   2a218:	mov	r3, #75	; 0x4b
   2a21c:	mov	r6, r3
   2a220:	str	r3, [r0]
   2a224:	cmp	r4, #0
   2a228:	moveq	r4, #1
   2a22c:	bne	2a1f4 <_obstack_memory_used@@Base+0x5c48>
   2a230:	b	2a1ac <_obstack_memory_used@@Base+0x5c00>
   2a234:	bl	11bb8 <__errno_location@plt>
   2a238:	mov	r4, #1
   2a23c:	ldr	r6, [r0]
   2a240:	b	2a1f4 <_obstack_memory_used@@Base+0x5c48>
   2a244:	bl	11bb8 <__errno_location@plt>
   2a248:	mov	r6, #0
   2a24c:	str	r6, [r0]
   2a250:	b	2a224 <_obstack_memory_used@@Base+0x5c78>
   2a254:			; <UNDEFINED> instruction: 0x0002f8b0
   2a258:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a25c:	sub	sp, sp, #116	; 0x74
   2a260:	mov	r4, #100	; 0x64
   2a264:	str	r4, [sp, #8]
   2a268:	bl	11bb8 <__errno_location@plt>
   2a26c:	mov	r7, #0
   2a270:	mov	r5, r7
   2a274:	add	fp, sp, #12
   2a278:	mov	r8, #1
   2a27c:	mvn	sl, #0
   2a280:	mov	r6, r0
   2a284:	b	2a29c <_obstack_memory_used@@Base+0x5cf0>
   2a288:	str	r8, [sp]
   2a28c:	bl	29b9c <_obstack_memory_used@@Base+0x55f0>
   2a290:	ldr	r4, [sp, #8]
   2a294:	mov	fp, r0
   2a298:	mov	r7, r0
   2a29c:	sub	r4, r4, #1
   2a2a0:	mov	r1, r4
   2a2a4:	strb	r5, [fp, r4]
   2a2a8:	mov	r0, fp
   2a2ac:	str	r5, [r6]
   2a2b0:	bl	11a98 <gethostname@plt>
   2a2b4:	subs	r9, r0, #0
   2a2b8:	mov	r0, fp
   2a2bc:	bne	2a2d4 <_obstack_memory_used@@Base+0x5d28>
   2a2c0:	bl	11b94 <strlen@plt>
   2a2c4:	add	r0, r0, #1
   2a2c8:	cmp	r4, r0
   2a2cc:	bgt	2a324 <_obstack_memory_used@@Base+0x5d78>
   2a2d0:	str	r9, [r6]
   2a2d4:	mov	r0, r7
   2a2d8:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   2a2dc:	ldr	ip, [r6]
   2a2e0:	mov	r3, r8
   2a2e4:	cmp	ip, #22
   2a2e8:	mov	r2, #1
   2a2ec:	ldrls	r3, [pc, #76]	; 2a340 <_obstack_memory_used@@Base+0x5d94>
   2a2f0:	add	r1, sp, #8
   2a2f4:	mov	r0, r5
   2a2f8:	mvnls	r3, r3, lsr ip
   2a2fc:	cmp	ip, #36	; 0x24
   2a300:	moveq	ip, #0
   2a304:	andne	ip, r3, #1
   2a308:	cmp	ip, #0
   2a30c:	mov	r3, sl
   2a310:	beq	2a288 <_obstack_memory_used@@Base+0x5cdc>
   2a314:	mov	r7, #0
   2a318:	mov	r0, r7
   2a31c:	add	sp, sp, #116	; 0x74
   2a320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a324:	cmp	r7, #0
   2a328:	bne	2a318 <_obstack_memory_used@@Base+0x5d6c>
   2a32c:	mov	r1, r0
   2a330:	mov	r0, fp
   2a334:	bl	29ef8 <_obstack_memory_used@@Base+0x594c>
   2a338:	mov	r7, r0
   2a33c:	b	2a318 <_obstack_memory_used@@Base+0x5d6c>
   2a340:	subeq	r1, r0, r1
   2a344:	ldr	ip, [pc, #148]	; 2a3e0 <_obstack_memory_used@@Base+0x5e34>
   2a348:	sub	r0, r0, #1
   2a34c:	push	{lr}		; (str lr, [sp, #-4]!)
   2a350:	sub	sp, sp, #20
   2a354:	ldr	r5, [ip]
   2a358:	cmp	r0, #3
   2a35c:	ldrls	pc, [pc, r0, lsl #2]
   2a360:	b	2a3cc <_obstack_memory_used@@Base+0x5e20>
   2a364:	ldrdeq	sl, [r2], -r8
   2a368:	ldrdeq	sl, [r2], -r0
   2a36c:	ldrdeq	sl, [r2], -r0
   2a370:	andeq	sl, r2, r4, ror r3
   2a374:	ldr	r0, [pc, #104]	; 2a3e4 <_obstack_memory_used@@Base+0x5e38>
   2a378:	cmp	r1, #0
   2a37c:	movlt	r3, #0
   2a380:	ldrlt	r4, [pc, #96]	; 2a3e8 <_obstack_memory_used@@Base+0x5e3c>
   2a384:	ldrge	r6, [r3, r1, lsl #4]
   2a388:	sublt	r4, r4, r1
   2a38c:	strblt	r2, [sp, #12]
   2a390:	mov	r1, r0
   2a394:	mov	r2, #5
   2a398:	mov	r0, #0
   2a39c:	strblt	r3, [sp, #13]
   2a3a0:	addlt	r6, sp, #12
   2a3a4:	ldrge	r4, [pc, #60]	; 2a3e8 <_obstack_memory_used@@Base+0x5e3c>
   2a3a8:	bl	11984 <dcgettext@plt>
   2a3ac:	ldr	r3, [sp, #24]
   2a3b0:	str	r6, [sp]
   2a3b4:	str	r3, [sp, #4]
   2a3b8:	mov	r1, #0
   2a3bc:	mov	r3, r4
   2a3c0:	mov	r2, r0
   2a3c4:	mov	r0, r5
   2a3c8:	bl	11a8c <error@plt>
   2a3cc:	bl	11d2c <abort@plt>
   2a3d0:	ldr	r0, [pc, #20]	; 2a3ec <_obstack_memory_used@@Base+0x5e40>
   2a3d4:	b	2a378 <_obstack_memory_used@@Base+0x5dcc>
   2a3d8:	ldr	r0, [pc, #16]	; 2a3f0 <_obstack_memory_used@@Base+0x5e44>
   2a3dc:	b	2a378 <_obstack_memory_used@@Base+0x5dcc>
   2a3e0:	andeq	r1, r4, r4, asr #5
   2a3e4:	andeq	r0, r3, ip, ror r6
   2a3e8:	andeq	r0, r3, r0, ror #13
   2a3ec:	muleq	r3, r8, r6
   2a3f0:	andeq	r0, r3, r0, asr #13
   2a3f4:	andeq	r0, r0, r0
   2a3f8:	cmp	r2, #36	; 0x24
   2a3fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a400:	sub	sp, sp, #52	; 0x34
   2a404:	bhi	2b194 <_obstack_memory_used@@Base+0x6be8>
   2a408:	cmp	r1, #0
   2a40c:	mov	r6, r2
   2a410:	mov	sl, r0
   2a414:	mov	r5, r1
   2a418:	mov	r8, r3
   2a41c:	addeq	r5, sp, #44	; 0x2c
   2a420:	bl	11bb8 <__errno_location@plt>
   2a424:	mov	r3, #0
   2a428:	str	r3, [r0]
   2a42c:	mov	fp, r0
   2a430:	bl	11b58 <__ctype_b_loc@plt>
   2a434:	ldrb	r3, [sl]
   2a438:	mov	r2, sl
   2a43c:	ldr	r0, [r0]
   2a440:	b	2a448 <_obstack_memory_used@@Base+0x5e9c>
   2a444:	ldrb	r3, [r2, #1]!
   2a448:	lsl	r1, r3, #1
   2a44c:	ldrh	r4, [r0, r1]
   2a450:	ands	r4, r4, #8192	; 0x2000
   2a454:	bne	2a444 <_obstack_memory_used@@Base+0x5e98>
   2a458:	cmp	r3, #45	; 0x2d
   2a45c:	bne	2a470 <_obstack_memory_used@@Base+0x5ec4>
   2a460:	mov	r4, #4
   2a464:	mov	r0, r4
   2a468:	add	sp, sp, #52	; 0x34
   2a46c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a470:	mov	r2, r6
   2a474:	mov	r3, r4
   2a478:	mov	r1, r5
   2a47c:	mov	r0, sl
   2a480:	bl	1193c <__strtoull_internal@plt>
   2a484:	ldr	r9, [r5]
   2a488:	cmp	sl, r9
   2a48c:	mov	r6, r0
   2a490:	mov	r7, r1
   2a494:	beq	2a4dc <_obstack_memory_used@@Base+0x5f30>
   2a498:	ldr	r4, [fp]
   2a49c:	cmp	r4, #0
   2a4a0:	bne	2a4cc <_obstack_memory_used@@Base+0x5f20>
   2a4a4:	ldr	r3, [sp, #88]	; 0x58
   2a4a8:	cmp	r3, #0
   2a4ac:	beq	2a4bc <_obstack_memory_used@@Base+0x5f10>
   2a4b0:	ldrb	sl, [r9]
   2a4b4:	cmp	sl, #0
   2a4b8:	bne	2a510 <_obstack_memory_used@@Base+0x5f64>
   2a4bc:	mov	r0, r4
   2a4c0:	strd	r6, [r8]
   2a4c4:	add	sp, sp, #52	; 0x34
   2a4c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a4cc:	cmp	r4, #34	; 0x22
   2a4d0:	bne	2a460 <_obstack_memory_used@@Base+0x5eb4>
   2a4d4:	mov	r4, #1
   2a4d8:	b	2a4a4 <_obstack_memory_used@@Base+0x5ef8>
   2a4dc:	ldr	r3, [sp, #88]	; 0x58
   2a4e0:	cmp	r3, #0
   2a4e4:	beq	2a460 <_obstack_memory_used@@Base+0x5eb4>
   2a4e8:	ldrb	sl, [r9]
   2a4ec:	cmp	sl, #0
   2a4f0:	beq	2a460 <_obstack_memory_used@@Base+0x5eb4>
   2a4f4:	mov	r1, sl
   2a4f8:	mov	r0, r3
   2a4fc:	bl	11ba0 <strchr@plt>
   2a500:	cmp	r0, #0
   2a504:	movne	r6, #1
   2a508:	movne	r7, #0
   2a50c:	beq	2a460 <_obstack_memory_used@@Base+0x5eb4>
   2a510:	mov	r1, sl
   2a514:	ldr	r0, [sp, #88]	; 0x58
   2a518:	bl	11ba0 <strchr@plt>
   2a51c:	cmp	r0, #0
   2a520:	beq	2b080 <_obstack_memory_used@@Base+0x6ad4>
   2a524:	sub	r3, sl, #69	; 0x45
   2a528:	cmp	r3, #47	; 0x2f
   2a52c:	ldrls	pc, [pc, r3, lsl #2]
   2a530:	b	2a624 <_obstack_memory_used@@Base+0x6078>
   2a534:	strdeq	sl, [r2], -r4
   2a538:	andeq	sl, r2, r4, lsr #12
   2a53c:	strdeq	sl, [r2], -r4
   2a540:	andeq	sl, r2, r4, lsr #12
   2a544:	andeq	sl, r2, r4, lsr #12
   2a548:	andeq	sl, r2, r4, lsr #12
   2a54c:	strdeq	sl, [r2], -r4
   2a550:	andeq	sl, r2, r4, lsr #12
   2a554:	strdeq	sl, [r2], -r4
   2a558:	andeq	sl, r2, r4, lsr #12
   2a55c:	andeq	sl, r2, r4, lsr #12
   2a560:	strdeq	sl, [r2], -r4
   2a564:	andeq	sl, r2, r4, lsr #12
   2a568:	andeq	sl, r2, r4, lsr #12
   2a56c:	andeq	sl, r2, r4, lsr #12
   2a570:	strdeq	sl, [r2], -r4
   2a574:	andeq	sl, r2, r4, lsr #12
   2a578:	andeq	sl, r2, r4, lsr #12
   2a57c:	andeq	sl, r2, r4, lsr #12
   2a580:	andeq	sl, r2, r4, lsr #12
   2a584:	strdeq	sl, [r2], -r4
   2a588:	strdeq	sl, [r2], -r4
   2a58c:	andeq	sl, r2, r4, lsr #12
   2a590:	andeq	sl, r2, r4, lsr #12
   2a594:	andeq	sl, r2, r4, lsr #12
   2a598:	andeq	sl, r2, r4, lsr #12
   2a59c:	andeq	sl, r2, r4, lsr #12
   2a5a0:	andeq	sl, r2, r4, lsr #12
   2a5a4:	andeq	sl, r2, r4, lsr #12
   2a5a8:	andeq	sl, r2, r4, lsr #12
   2a5ac:	andeq	sl, r2, r4, lsr #12
   2a5b0:	andeq	sl, r2, r4, lsr #12
   2a5b4:	andeq	sl, r2, r4, lsr #12
   2a5b8:	andeq	sl, r2, r4, lsr #12
   2a5bc:	strdeq	sl, [r2], -r4
   2a5c0:	andeq	sl, r2, r4, lsr #12
   2a5c4:	andeq	sl, r2, r4, lsr #12
   2a5c8:	andeq	sl, r2, r4, lsr #12
   2a5cc:	strdeq	sl, [r2], -r4
   2a5d0:	andeq	sl, r2, r4, lsr #12
   2a5d4:	strdeq	sl, [r2], -r4
   2a5d8:	andeq	sl, r2, r4, lsr #12
   2a5dc:	andeq	sl, r2, r4, lsr #12
   2a5e0:	andeq	sl, r2, r4, lsr #12
   2a5e4:	andeq	sl, r2, r4, lsr #12
   2a5e8:	andeq	sl, r2, r4, lsr #12
   2a5ec:	andeq	sl, r2, r4, lsr #12
   2a5f0:	strdeq	sl, [r2], -r4
   2a5f4:	mov	r1, #48	; 0x30
   2a5f8:	ldr	r0, [sp, #88]	; 0x58
   2a5fc:	bl	11ba0 <strchr@plt>
   2a600:	cmp	r0, #0
   2a604:	beq	2b114 <_obstack_memory_used@@Base+0x6b68>
   2a608:	ldrb	r3, [r9, #1]
   2a60c:	cmp	r3, #68	; 0x44
   2a610:	beq	2b0f4 <_obstack_memory_used@@Base+0x6b48>
   2a614:	cmp	r3, #105	; 0x69
   2a618:	beq	2b0c4 <_obstack_memory_used@@Base+0x6b18>
   2a61c:	cmp	r3, #66	; 0x42
   2a620:	beq	2b0f4 <_obstack_memory_used@@Base+0x6b48>
   2a624:	ldr	r3, [pc, #2948]	; 2b1b0 <_obstack_memory_used@@Base+0x6c04>
   2a628:	mvn	r2, #0
   2a62c:	mov	r1, #1024	; 0x400
   2a630:	mov	lr, #0
   2a634:	strd	r2, [sp]
   2a638:	mov	r3, #1
   2a63c:	str	r3, [sp, #12]
   2a640:	sub	sl, sl, #66	; 0x42
   2a644:	cmp	sl, #53	; 0x35
   2a648:	ldrls	pc, [pc, sl, lsl #2]
   2a64c:	b	2b080 <_obstack_memory_used@@Base+0x6ad4>
   2a650:	andeq	fp, r2, r0, asr r0
   2a654:	andeq	fp, r2, r0, lsl #1
   2a658:	andeq	fp, r2, r0, lsl #1
   2a65c:	andeq	sl, r2, ip, asr #29
   2a660:	andeq	fp, r2, r0, lsl #1
   2a664:	andeq	sl, r2, r8, lsl #28
   2a668:	andeq	fp, r2, r0, lsl #1
   2a66c:	andeq	fp, r2, r0, lsl #1
   2a670:	andeq	fp, r2, r0, lsl #1
   2a674:	andeq	fp, r2, ip, lsl #1
   2a678:	andeq	fp, r2, r0, lsl #1
   2a67c:	andeq	sl, r2, r8, lsr #14
   2a680:	andeq	fp, r2, r0, lsl #1
   2a684:	andeq	fp, r2, r0, lsl #1
   2a688:			; <UNDEFINED> instruction: 0x0002a7b4
   2a68c:	andeq	fp, r2, r0, lsl #1
   2a690:	andeq	fp, r2, r0, lsl #1
   2a694:	andeq	fp, r2, r0, lsl #1
   2a698:	andeq	sl, r2, r4, lsr fp
   2a69c:	andeq	fp, r2, r0, lsl #1
   2a6a0:	andeq	fp, r2, r0, lsl #1
   2a6a4:	andeq	fp, r2, r0, lsl #1
   2a6a8:	andeq	fp, r2, r0, lsl #1
   2a6ac:	andeq	sl, r2, ip, lsl #18
   2a6b0:	andeq	sl, r2, r8, ror #24
   2a6b4:	andeq	fp, r2, r0, lsl #1
   2a6b8:	andeq	fp, r2, r0, lsl #1
   2a6bc:	andeq	fp, r2, r0, lsl #1
   2a6c0:	andeq	fp, r2, r0, lsl #1
   2a6c4:	andeq	fp, r2, r0, lsl #1
   2a6c8:	andeq	fp, r2, r0, lsl #1
   2a6cc:	andeq	fp, r2, r0, lsl #1
   2a6d0:	andeq	sl, r2, r8, lsr ip
   2a6d4:	andeq	sl, r2, r0, lsr ip
   2a6d8:	andeq	fp, r2, r0, lsl #1
   2a6dc:	andeq	fp, r2, r0, lsl #1
   2a6e0:	andeq	fp, r2, r0, lsl #1
   2a6e4:	andeq	sl, r2, r8, lsl #28
   2a6e8:	andeq	fp, r2, r0, lsl #1
   2a6ec:	andeq	fp, r2, r0, lsl #1
   2a6f0:	andeq	fp, r2, r0, lsl #1
   2a6f4:	andeq	fp, r2, ip, lsl #1
   2a6f8:	andeq	fp, r2, r0, lsl #1
   2a6fc:	andeq	sl, r2, r8, lsr #14
   2a700:	andeq	fp, r2, r0, lsl #1
   2a704:	andeq	fp, r2, r0, lsl #1
   2a708:	andeq	fp, r2, r0, lsl #1
   2a70c:	andeq	fp, r2, r0, lsl #1
   2a710:	andeq	fp, r2, r0, lsl #1
   2a714:	andeq	fp, r2, r0, lsl #1
   2a718:	andeq	sl, r2, r4, lsr fp
   2a71c:	andeq	fp, r2, r0, lsl #1
   2a720:	andeq	fp, r2, r0, lsl #1
   2a724:	andeq	sl, r2, r4, lsl ip
   2a728:	mul	r0, r6, lr
   2a72c:	ldrd	sl, [sp]
   2a730:	umull	r2, r3, r6, r1
   2a734:	mla	r0, r1, r7, r0
   2a738:	cmp	r7, fp
   2a73c:	cmpeq	r6, sl
   2a740:	add	r3, r0, r3
   2a744:	mvnhi	r3, #0
   2a748:	mvnhi	r2, #0
   2a74c:	mul	r6, r1, r3
   2a750:	umull	r0, r1, r1, r2
   2a754:	mla	lr, lr, r2, r6
   2a758:	ldrd	r6, [sp]
   2a75c:	movhi	ip, #1
   2a760:	movls	ip, #0
   2a764:	cmp	r7, r3
   2a768:	cmpeq	r6, r2
   2a76c:	mvncc	r0, #0
   2a770:	add	r1, lr, r1
   2a774:	mov	sl, r6
   2a778:	movcc	r1, r0
   2a77c:	mov	fp, r7
   2a780:	cmp	fp, r3
   2a784:	cmpeq	sl, r2
   2a788:	mov	r6, r0
   2a78c:	mov	r7, r1
   2a790:	orrcc	ip, ip, #1
   2a794:	ldr	r2, [sp, #12]
   2a798:	orr	r4, r4, ip
   2a79c:	add	r3, r9, r2
   2a7a0:	str	r3, [r5]
   2a7a4:	ldrb	r3, [r9, r2]
   2a7a8:	cmp	r3, #0
   2a7ac:	orrne	r4, r4, #2
   2a7b0:	b	2a4bc <_obstack_memory_used@@Base+0x5f10>
   2a7b4:	ldrd	sl, [sp]
   2a7b8:	umull	r2, r3, r6, r1
   2a7bc:	mul	r0, r6, lr
   2a7c0:	cmp	r7, fp
   2a7c4:	cmpeq	r6, sl
   2a7c8:	mvnhi	r2, #0
   2a7cc:	mla	r0, r1, r7, r0
   2a7d0:	umull	sl, fp, r2, r1
   2a7d4:	add	r3, r0, r3
   2a7d8:	mul	r0, lr, r2
   2a7dc:	mvnhi	r3, #0
   2a7e0:	strd	sl, [sp, #16]
   2a7e4:	ldrd	sl, [sp]
   2a7e8:	mla	r0, r1, r3, r0
   2a7ec:	ldr	ip, [sp, #20]
   2a7f0:	cmp	r3, fp
   2a7f4:	add	r0, r0, ip
   2a7f8:	cmpeq	r2, sl
   2a7fc:	str	r0, [sp, #20]
   2a800:	bls	2a818 <_obstack_memory_used@@Base+0x626c>
   2a804:	mvn	sl, #0
   2a808:	mvn	fp, #0
   2a80c:	strd	sl, [sp, #16]
   2a810:	ldr	r0, [sp, #20]
   2a814:	ldrd	sl, [sp]
   2a818:	cmp	r7, fp
   2a81c:	cmpeq	r6, sl
   2a820:	mul	r0, r1, r0
   2a824:	ldrd	r6, [sp, #16]
   2a828:	mla	ip, lr, r6, r0
   2a82c:	mov	r0, r6
   2a830:	movhi	r0, #1
   2a834:	movls	r0, #0
   2a838:	cmp	r3, fp
   2a83c:	cmpeq	r2, sl
   2a840:	ldrd	r2, [sp, #16]
   2a844:	umull	r6, r7, r1, r6
   2a848:	orrhi	r0, r0, #1
   2a84c:	cmp	fp, r3
   2a850:	cmpeq	sl, r2
   2a854:	add	r7, ip, r7
   2a858:	bcc	2b164 <_obstack_memory_used@@Base+0x6bb8>
   2a85c:	mov	sl, r6
   2a860:	mov	fp, r7
   2a864:	strd	r6, [sp, #24]
   2a868:	mul	r3, r1, fp
   2a86c:	umull	r6, r7, r1, sl
   2a870:	mla	ip, lr, sl, r3
   2a874:	ldrd	sl, [sp]
   2a878:	ldrd	r2, [sp, #16]
   2a87c:	add	r7, ip, r7
   2a880:	cmp	fp, r3
   2a884:	cmpeq	sl, r2
   2a888:	mov	r3, fp
   2a88c:	mov	r2, sl
   2a890:	ldrd	sl, [sp, #24]
   2a894:	orrcc	r0, r0, #1
   2a898:	str	r0, [sp, #16]
   2a89c:	cmp	r3, fp
   2a8a0:	cmpeq	r2, sl
   2a8a4:	bcs	2adfc <_obstack_memory_used@@Base+0x6850>
   2a8a8:	mvn	r2, #0
   2a8ac:	mvn	r3, #0
   2a8b0:	mul	ip, lr, r2
   2a8b4:	ldrd	sl, [sp]
   2a8b8:	mla	ip, r1, r3, ip
   2a8bc:	umull	r6, r7, r2, r1
   2a8c0:	ldrd	r0, [sp, #24]
   2a8c4:	add	r7, ip, r7
   2a8c8:	cmp	fp, r1
   2a8cc:	ldr	r1, [sp, #16]
   2a8d0:	cmpeq	sl, r0
   2a8d4:	orrcc	r1, r1, #1
   2a8d8:	cmp	r3, fp
   2a8dc:	cmpeq	r2, sl
   2a8e0:	mvnhi	r0, #0
   2a8e4:	movls	ip, r7
   2a8e8:	movhi	ip, r0
   2a8ec:	movls	r0, r6
   2a8f0:	cmp	r3, fp
   2a8f4:	cmpeq	r2, sl
   2a8f8:	mov	r7, ip
   2a8fc:	mov	r6, r0
   2a900:	movls	ip, r1
   2a904:	orrhi	ip, r1, #1
   2a908:	b	2a794 <_obstack_memory_used@@Base+0x61e8>
   2a90c:	ldrd	sl, [sp]
   2a910:	umull	r2, r3, r6, r1
   2a914:	mul	r0, r6, lr
   2a918:	cmp	r7, fp
   2a91c:	cmpeq	r6, sl
   2a920:	mvnhi	r2, #0
   2a924:	mla	r0, r1, r7, r0
   2a928:	umull	sl, fp, r2, r1
   2a92c:	add	r3, r0, r3
   2a930:	mul	r0, lr, r2
   2a934:	mvnhi	r3, #0
   2a938:	strd	sl, [sp, #16]
   2a93c:	ldrd	sl, [sp]
   2a940:	mla	r0, r1, r3, r0
   2a944:	ldr	ip, [sp, #20]
   2a948:	cmp	r3, fp
   2a94c:	add	r0, r0, ip
   2a950:	cmpeq	r2, sl
   2a954:	str	r0, [sp, #20]
   2a958:	mvnhi	sl, #0
   2a95c:	mvnhi	fp, #0
   2a960:	strdhi	sl, [sp, #16]
   2a964:	ldrdhi	sl, [sp]
   2a968:	ldr	r0, [sp, #16]
   2a96c:	cmp	r3, fp
   2a970:	ldr	r3, [sp, #20]
   2a974:	mul	r0, lr, r0
   2a978:	cmpeq	r2, sl
   2a97c:	mla	r0, r1, r3, r0
   2a980:	ldr	r3, [sp, #16]
   2a984:	umull	r2, r3, r3, r1
   2a988:	strd	r2, [sp, #24]
   2a98c:	movhi	r3, #1
   2a990:	movls	r3, #0
   2a994:	cmp	r7, fp
   2a998:	cmpeq	r6, sl
   2a99c:	ldrd	r6, [sp, #16]
   2a9a0:	ldr	r2, [sp, #28]
   2a9a4:	movls	ip, r3
   2a9a8:	orrhi	ip, r3, #1
   2a9ac:	cmp	r7, fp
   2a9b0:	add	r2, r0, r2
   2a9b4:	cmpeq	r6, sl
   2a9b8:	str	r2, [sp, #28]
   2a9bc:	mvnhi	r2, #0
   2a9c0:	mvnhi	r3, #0
   2a9c4:	strdhi	r2, [sp, #24]
   2a9c8:	ldrd	r6, [sp, #24]
   2a9cc:	mul	r2, r1, r7
   2a9d0:	umull	sl, fp, r1, r6
   2a9d4:	mla	r3, lr, r6, r2
   2a9d8:	ldrd	r6, [sp]
   2a9dc:	str	r3, [sp, #32]
   2a9e0:	ldrd	r2, [sp, #16]
   2a9e4:	cmp	r3, r7
   2a9e8:	cmpeq	r2, r6
   2a9ec:	ldrd	r2, [sp, #24]
   2a9f0:	orrhi	ip, ip, #1
   2a9f4:	cmp	r3, r7
   2a9f8:	ldr	r3, [sp, #32]
   2a9fc:	cmpeq	r2, r6
   2aa00:	add	r2, r3, fp
   2aa04:	mov	fp, r2
   2aa08:	bhi	2b14c <_obstack_memory_used@@Base+0x6ba0>
   2aa0c:	strd	sl, [sp, #16]
   2aa10:	mul	r2, r1, fp
   2aa14:	umull	r6, r7, r1, sl
   2aa18:	mla	r3, lr, sl, r2
   2aa1c:	ldrd	sl, [sp]
   2aa20:	str	r3, [sp, #32]
   2aa24:	ldrd	r2, [sp, #24]
   2aa28:	cmp	r3, fp
   2aa2c:	cmpeq	r2, sl
   2aa30:	ldrd	r2, [sp, #16]
   2aa34:	orrhi	ip, ip, #1
   2aa38:	cmp	fp, r3
   2aa3c:	ldr	r3, [sp, #32]
   2aa40:	cmpeq	sl, r2
   2aa44:	add	r2, r3, r7
   2aa48:	mov	r7, r2
   2aa4c:	mvncc	r7, #0
   2aa50:	mvncc	r6, #0
   2aa54:	mul	r2, r1, r7
   2aa58:	mov	sl, r6
   2aa5c:	strd	r6, [sp, #24]
   2aa60:	mla	r0, lr, sl, r2
   2aa64:	ldrd	r2, [sp, #16]
   2aa68:	ldrd	sl, [sp]
   2aa6c:	umull	r6, r7, r1, r6
   2aa70:	cmp	fp, r3
   2aa74:	cmpeq	sl, r2
   2aa78:	mov	r3, fp
   2aa7c:	mov	r2, sl
   2aa80:	ldrd	sl, [sp, #24]
   2aa84:	orrcc	ip, ip, #1
   2aa88:	add	r7, r0, r7
   2aa8c:	cmp	r3, fp
   2aa90:	cmpeq	r2, sl
   2aa94:	mvncc	r6, #0
   2aa98:	mvncc	r7, #0
   2aa9c:	umull	sl, fp, r1, r6
   2aaa0:	mul	r3, r1, r7
   2aaa4:	strd	sl, [sp, #16]
   2aaa8:	mla	r0, lr, r6, r3
   2aaac:	ldrd	sl, [sp, #24]
   2aab0:	ldrd	r2, [sp]
   2aab4:	cmp	r3, fp
   2aab8:	cmpeq	r2, sl
   2aabc:	orrcc	ip, ip, #1
   2aac0:	cmp	r3, r7
   2aac4:	ldr	r3, [sp, #20]
   2aac8:	cmpeq	r2, r6
   2aacc:	add	r3, r0, r3
   2aad0:	str	r3, [sp, #20]
   2aad4:	mvncc	r2, #0
   2aad8:	mvncc	r3, #0
   2aadc:	ldrdcs	r2, [sp, #16]
   2aae0:	ldrd	sl, [sp]
   2aae4:	mul	r0, r1, r3
   2aae8:	cmp	fp, r7
   2aaec:	str	r0, [sp, #16]
   2aaf0:	cmpeq	sl, r6
   2aaf4:	ldr	r6, [sp, #16]
   2aaf8:	umull	r0, r1, r1, r2
   2aafc:	mla	lr, lr, r2, r6
   2ab00:	orrcc	ip, ip, #1
   2ab04:	cmp	r3, fp
   2ab08:	cmpeq	r2, sl
   2ab0c:	add	r1, lr, r1
   2ab10:	bls	2ab1c <_obstack_memory_used@@Base+0x6570>
   2ab14:	mvn	r0, #0
   2ab18:	mov	r1, r0
   2ab1c:	cmp	r3, fp
   2ab20:	cmpeq	r2, sl
   2ab24:	mov	r6, r0
   2ab28:	mov	r7, r1
   2ab2c:	orrhi	ip, ip, #1
   2ab30:	b	2a794 <_obstack_memory_used@@Base+0x61e8>
   2ab34:	ldrd	sl, [sp]
   2ab38:	umull	r2, r3, r6, r1
   2ab3c:	mul	r0, r6, lr
   2ab40:	cmp	r7, fp
   2ab44:	cmpeq	r6, sl
   2ab48:	mvnhi	r2, #0
   2ab4c:	mla	r0, r1, r7, r0
   2ab50:	umull	sl, fp, r1, r2
   2ab54:	add	r3, r0, r3
   2ab58:	mvnhi	r3, #0
   2ab5c:	strd	sl, [sp, #16]
   2ab60:	mul	r0, r1, r3
   2ab64:	ldrd	sl, [sp]
   2ab68:	mla	r0, lr, r2, r0
   2ab6c:	ldr	ip, [sp, #20]
   2ab70:	cmp	fp, r3
   2ab74:	add	r0, r0, ip
   2ab78:	cmpeq	sl, r2
   2ab7c:	str	r0, [sp, #20]
   2ab80:	mvncc	sl, #0
   2ab84:	mvncc	fp, #0
   2ab88:	strdcc	sl, [sp, #16]
   2ab8c:	ldrdcc	sl, [sp]
   2ab90:	ldr	r0, [sp, #16]
   2ab94:	cmp	fp, r3
   2ab98:	cmpeq	sl, r2
   2ab9c:	mul	r0, lr, r0
   2aba0:	ldr	r2, [sp, #20]
   2aba4:	ldr	r3, [sp, #16]
   2aba8:	movcc	ip, #1
   2abac:	movcs	ip, #0
   2abb0:	cmp	r7, fp
   2abb4:	cmpeq	r6, sl
   2abb8:	ldrd	r6, [sp, #16]
   2abbc:	mla	r0, r1, r2, r0
   2abc0:	umull	r2, r3, r3, r1
   2abc4:	orrhi	ip, ip, #1
   2abc8:	cmp	r7, fp
   2abcc:	cmpeq	r6, sl
   2abd0:	add	r3, r0, r3
   2abd4:	mvnhi	r3, #0
   2abd8:	mvnhi	r2, #0
   2abdc:	mul	r0, r1, r3
   2abe0:	cmp	r7, fp
   2abe4:	str	r0, [sp, #24]
   2abe8:	cmpeq	r6, sl
   2abec:	ldr	r6, [sp, #24]
   2abf0:	umull	r0, r1, r1, r2
   2abf4:	mla	lr, lr, r2, r6
   2abf8:	orrhi	ip, ip, #1
   2abfc:	cmp	fp, r3
   2ac00:	cmpeq	sl, r2
   2ac04:	mvncc	r0, #0
   2ac08:	add	r1, lr, r1
   2ac0c:	movcc	r1, r0
   2ac10:	b	2a780 <_obstack_memory_used@@Base+0x61d4>
   2ac14:	cmp	r6, #0
   2ac18:	sbcs	r3, r7, #0
   2ac1c:	blt	2b0b4 <_obstack_memory_used@@Base+0x6b08>
   2ac20:	adds	r6, r6, r6
   2ac24:	adc	r7, r7, r7
   2ac28:	mov	ip, #0
   2ac2c:	b	2a794 <_obstack_memory_used@@Base+0x61e8>
   2ac30:	mov	ip, #0
   2ac34:	b	2a794 <_obstack_memory_used@@Base+0x61e8>
   2ac38:	ldr	r3, [pc, #1396]	; 2b1b4 <_obstack_memory_used@@Base+0x6c08>
   2ac3c:	mvn	r2, #0
   2ac40:	cmp	r7, r3
   2ac44:	cmpeq	r6, r2
   2ac48:	bhi	2b0b4 <_obstack_memory_used@@Base+0x6b08>
   2ac4c:	lsl	r3, r7, #9
   2ac50:	orr	r3, r3, r6, lsr #23
   2ac54:	lsl	r2, r6, #9
   2ac58:	mov	r6, r2
   2ac5c:	mov	r7, r3
   2ac60:	mov	ip, #0
   2ac64:	b	2a794 <_obstack_memory_used@@Base+0x61e8>
   2ac68:	ldrd	sl, [sp]
   2ac6c:	umull	r2, r3, r6, r1
   2ac70:	mul	r0, r6, lr
   2ac74:	cmp	r7, fp
   2ac78:	cmpeq	r6, sl
   2ac7c:	mvnhi	r2, #0
   2ac80:	mla	r0, r1, r7, r0
   2ac84:	umull	sl, fp, r2, r1
   2ac88:	add	r3, r0, r3
   2ac8c:	mul	r0, lr, r2
   2ac90:	mvnhi	r3, #0
   2ac94:	strd	sl, [sp, #16]
   2ac98:	ldrd	sl, [sp]
   2ac9c:	mla	r0, r1, r3, r0
   2aca0:	ldr	ip, [sp, #20]
   2aca4:	cmp	r3, fp
   2aca8:	add	r0, r0, ip
   2acac:	cmpeq	r2, sl
   2acb0:	str	r0, [sp, #20]
   2acb4:	mvnhi	sl, #0
   2acb8:	mvnhi	fp, #0
   2acbc:	strdhi	sl, [sp, #16]
   2acc0:	ldrdhi	sl, [sp]
   2acc4:	ldr	r0, [sp, #16]
   2acc8:	cmp	r3, fp
   2accc:	ldr	r3, [sp, #20]
   2acd0:	mul	r0, lr, r0
   2acd4:	cmpeq	r2, sl
   2acd8:	mla	r0, r1, r3, r0
   2acdc:	ldr	r3, [sp, #16]
   2ace0:	umull	r2, r3, r3, r1
   2ace4:	strd	r2, [sp, #24]
   2ace8:	movhi	r3, #1
   2acec:	movls	r3, #0
   2acf0:	cmp	r7, fp
   2acf4:	cmpeq	r6, sl
   2acf8:	ldrd	r6, [sp, #16]
   2acfc:	ldr	r2, [sp, #28]
   2ad00:	movls	ip, r3
   2ad04:	orrhi	ip, r3, #1
   2ad08:	cmp	r7, fp
   2ad0c:	add	r2, r0, r2
   2ad10:	cmpeq	r6, sl
   2ad14:	str	r2, [sp, #28]
   2ad18:	mvnhi	r2, #0
   2ad1c:	mvnhi	r3, #0
   2ad20:	strdhi	r2, [sp, #24]
   2ad24:	ldrd	r6, [sp, #24]
   2ad28:	mul	r2, lr, r6
   2ad2c:	umull	sl, fp, r6, r1
   2ad30:	mla	r3, r1, r7, r2
   2ad34:	ldrd	r6, [sp]
   2ad38:	str	r3, [sp, #32]
   2ad3c:	ldrd	r2, [sp, #16]
   2ad40:	cmp	r3, r7
   2ad44:	cmpeq	r2, r6
   2ad48:	ldrd	r2, [sp, #24]
   2ad4c:	orrhi	ip, ip, #1
   2ad50:	cmp	r3, r7
   2ad54:	ldr	r3, [sp, #32]
   2ad58:	cmpeq	r2, r6
   2ad5c:	add	r2, r3, fp
   2ad60:	mov	fp, r2
   2ad64:	bhi	2b17c <_obstack_memory_used@@Base+0x6bd0>
   2ad68:	strd	sl, [sp, #16]
   2ad6c:	mul	r2, lr, sl
   2ad70:	umull	r6, r7, sl, r1
   2ad74:	mla	r3, r1, fp, r2
   2ad78:	ldrd	sl, [sp]
   2ad7c:	str	r3, [sp, #32]
   2ad80:	ldrd	r2, [sp, #24]
   2ad84:	cmp	r3, fp
   2ad88:	cmpeq	r2, sl
   2ad8c:	ldrd	r2, [sp, #16]
   2ad90:	orrhi	ip, ip, #1
   2ad94:	cmp	r3, fp
   2ad98:	ldr	r3, [sp, #32]
   2ad9c:	cmpeq	r2, sl
   2ada0:	add	r2, r3, r7
   2ada4:	mov	r7, r2
   2ada8:	mvnhi	r7, #0
   2adac:	mvnhi	r6, #0
   2adb0:	mul	r2, r1, r7
   2adb4:	mov	sl, r6
   2adb8:	strd	r6, [sp, #24]
   2adbc:	mla	r0, lr, sl, r2
   2adc0:	ldrd	sl, [sp]
   2adc4:	ldrd	r2, [sp, #16]
   2adc8:	umull	r6, r7, r1, r6
   2adcc:	cmp	r3, fp
   2add0:	cmpeq	r2, sl
   2add4:	mov	r3, ip
   2add8:	orrhi	r3, r3, #1
   2addc:	mov	r2, sl
   2ade0:	str	r3, [sp, #16]
   2ade4:	mov	r3, fp
   2ade8:	ldrd	sl, [sp, #24]
   2adec:	add	r7, r0, r7
   2adf0:	cmp	r3, fp
   2adf4:	cmpeq	r2, sl
   2adf8:	bcc	2a8a8 <_obstack_memory_used@@Base+0x62fc>
   2adfc:	mov	r2, r6
   2ae00:	mov	r3, r7
   2ae04:	b	2a8b0 <_obstack_memory_used@@Base+0x6304>
   2ae08:	ldrd	sl, [sp]
   2ae0c:	umull	r2, r3, r6, r1
   2ae10:	mul	r0, r6, lr
   2ae14:	cmp	r7, fp
   2ae18:	cmpeq	r6, sl
   2ae1c:	mvnhi	r2, #0
   2ae20:	mla	r0, r1, r7, r0
   2ae24:	umull	sl, fp, r2, r1
   2ae28:	add	r3, r0, r3
   2ae2c:	mul	r0, lr, r2
   2ae30:	mvnhi	r3, #0
   2ae34:	strd	sl, [sp, #16]
   2ae38:	ldrd	sl, [sp]
   2ae3c:	mla	r0, r1, r3, r0
   2ae40:	ldr	ip, [sp, #20]
   2ae44:	cmp	r3, fp
   2ae48:	add	r0, r0, ip
   2ae4c:	cmpeq	r2, sl
   2ae50:	str	r0, [sp, #20]
   2ae54:	mvnhi	sl, #0
   2ae58:	mvnhi	fp, #0
   2ae5c:	strdhi	sl, [sp, #16]
   2ae60:	ldrdhi	sl, [sp]
   2ae64:	ldr	r0, [sp, #16]
   2ae68:	cmp	r3, fp
   2ae6c:	ldr	ip, [sp, #20]
   2ae70:	mul	r0, lr, r0
   2ae74:	ldr	r3, [sp, #16]
   2ae78:	cmpeq	r2, sl
   2ae7c:	mla	r0, r1, ip, r0
   2ae80:	umull	r2, r3, r3, r1
   2ae84:	movhi	r1, #1
   2ae88:	movls	r1, #0
   2ae8c:	cmp	r7, fp
   2ae90:	cmpeq	r6, sl
   2ae94:	ldrd	r6, [sp, #16]
   2ae98:	movls	ip, r1
   2ae9c:	orrhi	ip, r1, #1
   2aea0:	cmp	r7, fp
   2aea4:	cmpeq	r6, sl
   2aea8:	mvnhi	r2, #0
   2aeac:	add	r3, r0, r3
   2aeb0:	movhi	r3, r2
   2aeb4:	cmp	r7, fp
   2aeb8:	cmpeq	r6, sl
   2aebc:	mov	r7, r3
   2aec0:	mov	r6, r2
   2aec4:	orrhi	ip, ip, #1
   2aec8:	b	2a794 <_obstack_memory_used@@Base+0x61e8>
   2aecc:	ldrd	sl, [sp]
   2aed0:	umull	r2, r3, r6, r1
   2aed4:	mul	r0, r6, lr
   2aed8:	cmp	r7, fp
   2aedc:	cmpeq	r6, sl
   2aee0:	mvnhi	r2, #0
   2aee4:	mla	r0, r1, r7, r0
   2aee8:	umull	sl, fp, r1, r2
   2aeec:	add	r3, r0, r3
   2aef0:	mvnhi	r3, #0
   2aef4:	strd	sl, [sp, #16]
   2aef8:	mul	r0, r1, r3
   2aefc:	ldrd	sl, [sp]
   2af00:	mla	r0, lr, r2, r0
   2af04:	ldr	ip, [sp, #20]
   2af08:	cmp	fp, r3
   2af0c:	add	r0, r0, ip
   2af10:	cmpeq	sl, r2
   2af14:	str	r0, [sp, #20]
   2af18:	mvncc	sl, #0
   2af1c:	mvncc	fp, #0
   2af20:	strdcc	sl, [sp, #16]
   2af24:	ldrdcc	sl, [sp]
   2af28:	ldr	r0, [sp, #16]
   2af2c:	cmp	fp, r3
   2af30:	ldr	r3, [sp, #20]
   2af34:	mul	r0, lr, r0
   2af38:	cmpeq	sl, r2
   2af3c:	mla	r0, r1, r3, r0
   2af40:	ldr	r3, [sp, #16]
   2af44:	umull	r2, r3, r3, r1
   2af48:	strd	r2, [sp, #24]
   2af4c:	movcc	r3, #1
   2af50:	movcs	r3, #0
   2af54:	cmp	r7, fp
   2af58:	cmpeq	r6, sl
   2af5c:	movls	ip, r3
   2af60:	orrhi	ip, r3, #1
   2af64:	ldrd	r2, [sp, #16]
   2af68:	cmp	r3, fp
   2af6c:	ldr	r3, [sp, #28]
   2af70:	cmpeq	r2, sl
   2af74:	add	r3, r0, r3
   2af78:	str	r3, [sp, #28]
   2af7c:	bhi	2b134 <_obstack_memory_used@@Base+0x6b88>
   2af80:	ldrd	r2, [sp, #24]
   2af84:	mov	sl, r2
   2af88:	mov	fp, r3
   2af8c:	mul	r2, lr, sl
   2af90:	umull	r6, r7, sl, r1
   2af94:	mla	r0, r1, fp, r2
   2af98:	ldrd	r2, [sp]
   2af9c:	add	r7, r0, r7
   2afa0:	mov	sl, r2
   2afa4:	mov	fp, r3
   2afa8:	strd	r2, [sp, #32]
   2afac:	ldrd	r2, [sp, #16]
   2afb0:	cmp	r3, fp
   2afb4:	cmpeq	r2, sl
   2afb8:	ldrd	r2, [sp, #32]
   2afbc:	ldrd	sl, [sp, #24]
   2afc0:	orrhi	ip, ip, #1
   2afc4:	cmp	fp, r3
   2afc8:	cmpeq	sl, r2
   2afcc:	mvnhi	r6, #0
   2afd0:	mvnhi	r7, #0
   2afd4:	umull	sl, fp, r6, r1
   2afd8:	mul	r3, lr, r6
   2afdc:	strd	sl, [sp, #16]
   2afe0:	mla	r0, r1, r7, r3
   2afe4:	ldrd	sl, [sp, #24]
   2afe8:	ldrd	r2, [sp]
   2afec:	cmp	fp, r3
   2aff0:	cmpeq	sl, r2
   2aff4:	orrhi	ip, ip, #1
   2aff8:	cmp	r7, r3
   2affc:	ldr	r3, [sp, #20]
   2b000:	cmpeq	r6, r2
   2b004:	add	r3, r0, r3
   2b008:	str	r3, [sp, #20]
   2b00c:	mvnhi	r2, #0
   2b010:	mvnhi	r3, #0
   2b014:	ldrdls	r2, [sp, #16]
   2b018:	ldrd	sl, [sp]
   2b01c:	mul	r0, r1, r3
   2b020:	cmp	r7, fp
   2b024:	str	r0, [sp, #16]
   2b028:	cmpeq	r6, sl
   2b02c:	ldr	r6, [sp, #16]
   2b030:	umull	r0, r1, r1, r2
   2b034:	mla	lr, lr, r2, r6
   2b038:	orrhi	ip, ip, #1
   2b03c:	cmp	r3, fp
   2b040:	cmpeq	r2, sl
   2b044:	add	r1, lr, r1
   2b048:	bls	2ab1c <_obstack_memory_used@@Base+0x6570>
   2b04c:	b	2ab14 <_obstack_memory_used@@Base+0x6568>
   2b050:	ldr	r3, [pc, #344]	; 2b1b0 <_obstack_memory_used@@Base+0x6c04>
   2b054:	mvn	r2, #0
   2b058:	cmp	r7, r3
   2b05c:	cmpeq	r6, r2
   2b060:	bhi	2b0b4 <_obstack_memory_used@@Base+0x6b08>
   2b064:	lsl	r3, r7, #10
   2b068:	orr	r3, r3, r6, lsr #22
   2b06c:	lsl	r2, r6, #10
   2b070:	mov	r6, r2
   2b074:	mov	r7, r3
   2b078:	mov	ip, #0
   2b07c:	b	2a794 <_obstack_memory_used@@Base+0x61e8>
   2b080:	strd	r6, [r8]
   2b084:	orr	r4, r4, #2
   2b088:	b	2a464 <_obstack_memory_used@@Base+0x5eb8>
   2b08c:	ldrd	r2, [sp]
   2b090:	cmp	r7, r3
   2b094:	cmpeq	r6, r2
   2b098:	bhi	2b0b4 <_obstack_memory_used@@Base+0x6b08>
   2b09c:	mul	r3, r6, lr
   2b0a0:	mov	ip, #0
   2b0a4:	mla	r3, r1, r7, r3
   2b0a8:	umull	r6, r7, r6, r1
   2b0ac:	add	r7, r3, r7
   2b0b0:	b	2a794 <_obstack_memory_used@@Base+0x61e8>
   2b0b4:	mvn	r6, #0
   2b0b8:	mvn	r7, #0
   2b0bc:	mov	ip, #1
   2b0c0:	b	2a794 <_obstack_memory_used@@Base+0x61e8>
   2b0c4:	ldrb	r3, [r9, #2]
   2b0c8:	mvn	r2, #0
   2b0cc:	mov	r1, #1024	; 0x400
   2b0d0:	cmp	r3, #66	; 0x42
   2b0d4:	ldr	r3, [pc, #212]	; 2b1b0 <_obstack_memory_used@@Base+0x6c04>
   2b0d8:	mov	lr, #0
   2b0dc:	strd	r2, [sp]
   2b0e0:	moveq	r3, #3
   2b0e4:	streq	r3, [sp, #12]
   2b0e8:	movne	r3, #1
   2b0ec:	strne	r3, [sp, #12]
   2b0f0:	b	2a640 <_obstack_memory_used@@Base+0x6094>
   2b0f4:	add	r3, pc, #172	; 0xac
   2b0f8:	ldrd	r2, [r3]
   2b0fc:	mov	r1, #1000	; 0x3e8
   2b100:	mov	lr, #0
   2b104:	strd	r2, [sp]
   2b108:	mov	r3, #2
   2b10c:	str	r3, [sp, #12]
   2b110:	b	2a640 <_obstack_memory_used@@Base+0x6094>
   2b114:	ldr	r3, [pc, #148]	; 2b1b0 <_obstack_memory_used@@Base+0x6c04>
   2b118:	mvn	r2, #0
   2b11c:	mov	lr, r0
   2b120:	strd	r2, [sp]
   2b124:	mov	r3, #1
   2b128:	mov	r1, #1024	; 0x400
   2b12c:	str	r3, [sp, #12]
   2b130:	b	2a640 <_obstack_memory_used@@Base+0x6094>
   2b134:	mvn	r2, #0
   2b138:	mvn	r3, #0
   2b13c:	mov	sl, r2
   2b140:	strd	r2, [sp, #24]
   2b144:	mov	fp, r3
   2b148:	b	2af8c <_obstack_memory_used@@Base+0x69e0>
   2b14c:	mvn	r2, #0
   2b150:	mvn	r3, #0
   2b154:	mov	sl, r2
   2b158:	strd	r2, [sp, #16]
   2b15c:	mov	fp, r3
   2b160:	b	2aa10 <_obstack_memory_used@@Base+0x6464>
   2b164:	mvn	r2, #0
   2b168:	mvn	r3, #0
   2b16c:	mov	sl, r2
   2b170:	strd	r2, [sp, #24]
   2b174:	mov	fp, r3
   2b178:	b	2a868 <_obstack_memory_used@@Base+0x62bc>
   2b17c:	mvn	r2, #0
   2b180:	mvn	r3, #0
   2b184:	mov	sl, r2
   2b188:	strd	r2, [sp, #16]
   2b18c:	mov	fp, r3
   2b190:	b	2ad6c <_obstack_memory_used@@Base+0x67c0>
   2b194:	ldr	r3, [pc, #28]	; 2b1b8 <_obstack_memory_used@@Base+0x6c0c>
   2b198:	mov	r2, #85	; 0x55
   2b19c:	ldr	r1, [pc, #24]	; 2b1bc <_obstack_memory_used@@Base+0x6c10>
   2b1a0:	ldr	r0, [pc, #24]	; 2b1c0 <_obstack_memory_used@@Base+0x6c14>
   2b1a4:	bl	11d74 <__assert_fail@plt>
   2b1a8:	blmi	ff1d516c <optarg@@GLIBC_2.4+0xff193e44>
   2b1ac:	subeq	r8, r1, r7, lsr r9
   2b1b0:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   2b1b4:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   2b1b8:	andeq	r0, r3, r4, ror #13
   2b1bc:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   2b1c0:	andeq	r0, r3, r0, lsl #14
   2b1c4:	cmp	r1, #0
   2b1c8:	cmpne	r0, #0
   2b1cc:	moveq	r1, #1
   2b1d0:	moveq	r0, r1
   2b1d4:	umull	r2, r3, r0, r1
   2b1d8:	adds	r3, r3, #0
   2b1dc:	movne	r3, #1
   2b1e0:	cmp	r2, #0
   2b1e4:	blt	2b1f4 <_obstack_memory_used@@Base+0x6c48>
   2b1e8:	cmp	r3, #0
   2b1ec:	bne	2b1f4 <_obstack_memory_used@@Base+0x6c48>
   2b1f0:	b	11858 <calloc@plt>
   2b1f4:	push	{r4, lr}
   2b1f8:	bl	11bb8 <__errno_location@plt>
   2b1fc:	mov	r3, #12
   2b200:	str	r3, [r0]
   2b204:	mov	r0, #0
   2b208:	pop	{r4, pc}
   2b20c:	cmp	r0, #0
   2b210:	moveq	r0, #1
   2b214:	cmp	r0, #0
   2b218:	blt	2b220 <_obstack_memory_used@@Base+0x6c74>
   2b21c:	b	11ae0 <malloc@plt>
   2b220:	push	{r4, lr}
   2b224:	bl	11bb8 <__errno_location@plt>
   2b228:	mov	r3, #12
   2b22c:	str	r3, [r0]
   2b230:	mov	r0, #0
   2b234:	pop	{r4, pc}
   2b238:	cmp	r0, #0
   2b23c:	beq	2b260 <_obstack_memory_used@@Base+0x6cb4>
   2b240:	cmp	r1, #0
   2b244:	push	{lr}		; (str lr, [sp, #-4]!)
   2b248:	sub	sp, sp, #12
   2b24c:	beq	2b268 <_obstack_memory_used@@Base+0x6cbc>
   2b250:	blt	2b280 <_obstack_memory_used@@Base+0x6cd4>
   2b254:	add	sp, sp, #12
   2b258:	pop	{lr}		; (ldr lr, [sp], #4)
   2b25c:	b	11990 <realloc@plt>
   2b260:	mov	r0, r1
   2b264:	b	2b20c <_obstack_memory_used@@Base+0x6c60>
   2b268:	str	r1, [sp, #4]
   2b26c:	bl	1e8c8 <__assert_fail@plt+0xcb54>
   2b270:	ldr	r3, [sp, #4]
   2b274:	mov	r0, r3
   2b278:	add	sp, sp, #12
   2b27c:	pop	{pc}		; (ldr pc, [sp], #4)
   2b280:	bl	11bb8 <__errno_location@plt>
   2b284:	mov	r2, #12
   2b288:	mov	r3, #0
   2b28c:	str	r2, [r0]
   2b290:	b	2b274 <_obstack_memory_used@@Base+0x6cc8>
   2b294:	push	{r4, r5, r6, lr}
   2b298:	mov	r4, r0
   2b29c:	bl	11a68 <__fpending@plt>
   2b2a0:	ldr	r5, [r4]
   2b2a4:	and	r5, r5, #32
   2b2a8:	mov	r6, r0
   2b2ac:	mov	r0, r4
   2b2b0:	bl	2b310 <_obstack_memory_used@@Base+0x6d64>
   2b2b4:	cmp	r5, #0
   2b2b8:	mov	r4, r0
   2b2bc:	bne	2b2dc <_obstack_memory_used@@Base+0x6d30>
   2b2c0:	cmp	r0, #0
   2b2c4:	beq	2b2d4 <_obstack_memory_used@@Base+0x6d28>
   2b2c8:	cmp	r6, #0
   2b2cc:	beq	2b2f8 <_obstack_memory_used@@Base+0x6d4c>
   2b2d0:	mvn	r4, #0
   2b2d4:	mov	r0, r4
   2b2d8:	pop	{r4, r5, r6, pc}
   2b2dc:	cmp	r0, #0
   2b2e0:	bne	2b2d0 <_obstack_memory_used@@Base+0x6d24>
   2b2e4:	bl	11bb8 <__errno_location@plt>
   2b2e8:	str	r4, [r0]
   2b2ec:	mvn	r4, #0
   2b2f0:	mov	r0, r4
   2b2f4:	pop	{r4, r5, r6, pc}
   2b2f8:	bl	11bb8 <__errno_location@plt>
   2b2fc:	ldr	r4, [r0]
   2b300:	subs	r4, r4, #9
   2b304:	mvnne	r4, #0
   2b308:	mov	r0, r4
   2b30c:	pop	{r4, r5, r6, pc}
   2b310:	push	{r4, r5, lr}
   2b314:	sub	sp, sp, #12
   2b318:	mov	r4, r0
   2b31c:	bl	11c0c <fileno@plt>
   2b320:	cmp	r0, #0
   2b324:	mov	r0, r4
   2b328:	blt	2b3a4 <_obstack_memory_used@@Base+0x6df8>
   2b32c:	bl	11b10 <__freading@plt>
   2b330:	cmp	r0, #0
   2b334:	bne	2b370 <_obstack_memory_used@@Base+0x6dc4>
   2b338:	mov	r0, r4
   2b33c:	bl	2b3b0 <_obstack_memory_used@@Base+0x6e04>
   2b340:	cmp	r0, #0
   2b344:	beq	2b3a0 <_obstack_memory_used@@Base+0x6df4>
   2b348:	bl	11bb8 <__errno_location@plt>
   2b34c:	mov	r5, r0
   2b350:	mov	r0, r4
   2b354:	ldr	r4, [r5]
   2b358:	bl	11c24 <fclose@plt>
   2b35c:	cmp	r4, #0
   2b360:	mvnne	r0, #0
   2b364:	strne	r4, [r5]
   2b368:	add	sp, sp, #12
   2b36c:	pop	{r4, r5, pc}
   2b370:	mov	r0, r4
   2b374:	bl	11c0c <fileno@plt>
   2b378:	mov	r3, #1
   2b37c:	str	r3, [sp]
   2b380:	mov	r2, #0
   2b384:	mov	r3, #0
   2b388:	bl	11a44 <lseek64@plt>
   2b38c:	mvn	r3, #0
   2b390:	mvn	r2, #0
   2b394:	cmp	r1, r3
   2b398:	cmpeq	r0, r2
   2b39c:	bne	2b338 <_obstack_memory_used@@Base+0x6d8c>
   2b3a0:	mov	r0, r4
   2b3a4:	add	sp, sp, #12
   2b3a8:	pop	{r4, r5, lr}
   2b3ac:	b	11c24 <fclose@plt>
   2b3b0:	push	{r4, lr}
   2b3b4:	subs	r4, r0, #0
   2b3b8:	sub	sp, sp, #8
   2b3bc:	beq	2b3d8 <_obstack_memory_used@@Base+0x6e2c>
   2b3c0:	bl	11b10 <__freading@plt>
   2b3c4:	cmp	r0, #0
   2b3c8:	beq	2b3d8 <_obstack_memory_used@@Base+0x6e2c>
   2b3cc:	ldr	r3, [r4]
   2b3d0:	tst	r3, #256	; 0x100
   2b3d4:	bne	2b3e8 <_obstack_memory_used@@Base+0x6e3c>
   2b3d8:	mov	r0, r4
   2b3dc:	add	sp, sp, #8
   2b3e0:	pop	{r4, lr}
   2b3e4:	b	118c4 <fflush@plt>
   2b3e8:	mov	r3, #1
   2b3ec:	str	r3, [sp]
   2b3f0:	mov	r2, #0
   2b3f4:	mov	r3, #0
   2b3f8:	mov	r0, r4
   2b3fc:	bl	2b410 <_obstack_memory_used@@Base+0x6e64>
   2b400:	mov	r0, r4
   2b404:	add	sp, sp, #8
   2b408:	pop	{r4, lr}
   2b40c:	b	118c4 <fflush@plt>
   2b410:	push	{r4, r5, r6, r7, r8, lr}
   2b414:	sub	sp, sp, #8
   2b418:	ldmib	r0, {ip, lr}
   2b41c:	mov	r4, r0
   2b420:	ldr	r5, [sp, #32]
   2b424:	cmp	lr, ip
   2b428:	beq	2b440 <_obstack_memory_used@@Base+0x6e94>
   2b42c:	str	r5, [sp, #32]
   2b430:	mov	r0, r4
   2b434:	add	sp, sp, #8
   2b438:	pop	{r4, r5, r6, r7, r8, lr}
   2b43c:	b	11c30 <fseeko64@plt>
   2b440:	ldr	lr, [r0, #20]
   2b444:	ldr	ip, [r0, #16]
   2b448:	cmp	lr, ip
   2b44c:	bne	2b42c <_obstack_memory_used@@Base+0x6e80>
   2b450:	ldr	r8, [r0, #36]	; 0x24
   2b454:	cmp	r8, #0
   2b458:	bne	2b42c <_obstack_memory_used@@Base+0x6e80>
   2b45c:	mov	r6, r2
   2b460:	mov	r7, r3
   2b464:	bl	11c0c <fileno@plt>
   2b468:	mov	r2, r6
   2b46c:	mov	r3, r7
   2b470:	str	r5, [sp]
   2b474:	bl	11a44 <lseek64@plt>
   2b478:	mvn	r3, #0
   2b47c:	mvn	r2, #0
   2b480:	cmp	r1, r3
   2b484:	cmpeq	r0, r2
   2b488:	beq	2b4a8 <_obstack_memory_used@@Base+0x6efc>
   2b48c:	ldr	r3, [r4]
   2b490:	strd	r0, [r4, #80]	; 0x50
   2b494:	mov	r0, r8
   2b498:	bic	r3, r3, #16
   2b49c:	str	r3, [r4]
   2b4a0:	add	sp, sp, #8
   2b4a4:	pop	{r4, r5, r6, r7, r8, pc}
   2b4a8:	mvn	r0, #0
   2b4ac:	b	2b4a0 <_obstack_memory_used@@Base+0x6ef4>
   2b4b0:	ldrb	r3, [r0]
   2b4b4:	cmp	r3, #0
   2b4b8:	beq	2b4e4 <_obstack_memory_used@@Base+0x6f38>
   2b4bc:	mov	r2, r0
   2b4c0:	mov	r0, #0
   2b4c4:	push	{r4, lr}
   2b4c8:	add	r0, r3, r0, ror #23
   2b4cc:	ldrb	r3, [r2, #1]!
   2b4d0:	cmp	r3, #0
   2b4d4:	bne	2b4c8 <_obstack_memory_used@@Base+0x6f1c>
   2b4d8:	bl	2b758 <_obstack_memory_used@@Base+0x71ac>
   2b4dc:	mov	r0, r1
   2b4e0:	pop	{r4, pc}
   2b4e4:	mov	r0, r3
   2b4e8:	bx	lr
   2b4ec:	push	{r4, lr}
   2b4f0:	mov	r0, #14
   2b4f4:	bl	11c90 <nl_langinfo@plt>
   2b4f8:	cmp	r0, #0
   2b4fc:	beq	2b514 <_obstack_memory_used@@Base+0x6f68>
   2b500:	ldrb	r2, [r0]
   2b504:	ldr	r3, [pc, #16]	; 2b51c <_obstack_memory_used@@Base+0x6f70>
   2b508:	cmp	r2, #0
   2b50c:	moveq	r0, r3
   2b510:	pop	{r4, pc}
   2b514:	ldr	r0, [pc]	; 2b51c <_obstack_memory_used@@Base+0x6f70>
   2b518:	pop	{r4, pc}
   2b51c:	andeq	r0, r3, r8, lsr #14
   2b520:	push	{r4, r5, r6, lr}
   2b524:	subs	r4, r2, #0
   2b528:	mov	r6, r0
   2b52c:	mov	r5, r1
   2b530:	beq	2b55c <_obstack_memory_used@@Base+0x6fb0>
   2b534:	mov	r1, r4
   2b538:	mvn	r0, #0
   2b53c:	bl	2b56c <_obstack_memory_used@@Base+0x6fc0>
   2b540:	cmp	r0, r5
   2b544:	bcs	2b55c <_obstack_memory_used@@Base+0x6fb0>
   2b548:	bl	11bb8 <__errno_location@plt>
   2b54c:	mov	r3, #12
   2b550:	str	r3, [r0]
   2b554:	mov	r0, #0
   2b558:	pop	{r4, r5, r6, pc}
   2b55c:	mul	r1, r5, r4
   2b560:	mov	r0, r6
   2b564:	pop	{r4, r5, r6, lr}
   2b568:	b	2b238 <_obstack_memory_used@@Base+0x6c8c>
   2b56c:	subs	r2, r1, #1
   2b570:	bxeq	lr
   2b574:	bcc	2b74c <_obstack_memory_used@@Base+0x71a0>
   2b578:	cmp	r0, r1
   2b57c:	bls	2b730 <_obstack_memory_used@@Base+0x7184>
   2b580:	tst	r1, r2
   2b584:	beq	2b73c <_obstack_memory_used@@Base+0x7190>
   2b588:	clz	r3, r0
   2b58c:	clz	r2, r1
   2b590:	sub	r3, r2, r3
   2b594:	rsbs	r3, r3, #31
   2b598:	addne	r3, r3, r3, lsl #1
   2b59c:	mov	r2, #0
   2b5a0:	addne	pc, pc, r3, lsl #2
   2b5a4:	nop			; (mov r0, r0)
   2b5a8:	cmp	r0, r1, lsl #31
   2b5ac:	adc	r2, r2, r2
   2b5b0:	subcs	r0, r0, r1, lsl #31
   2b5b4:	cmp	r0, r1, lsl #30
   2b5b8:	adc	r2, r2, r2
   2b5bc:	subcs	r0, r0, r1, lsl #30
   2b5c0:	cmp	r0, r1, lsl #29
   2b5c4:	adc	r2, r2, r2
   2b5c8:	subcs	r0, r0, r1, lsl #29
   2b5cc:	cmp	r0, r1, lsl #28
   2b5d0:	adc	r2, r2, r2
   2b5d4:	subcs	r0, r0, r1, lsl #28
   2b5d8:	cmp	r0, r1, lsl #27
   2b5dc:	adc	r2, r2, r2
   2b5e0:	subcs	r0, r0, r1, lsl #27
   2b5e4:	cmp	r0, r1, lsl #26
   2b5e8:	adc	r2, r2, r2
   2b5ec:	subcs	r0, r0, r1, lsl #26
   2b5f0:	cmp	r0, r1, lsl #25
   2b5f4:	adc	r2, r2, r2
   2b5f8:	subcs	r0, r0, r1, lsl #25
   2b5fc:	cmp	r0, r1, lsl #24
   2b600:	adc	r2, r2, r2
   2b604:	subcs	r0, r0, r1, lsl #24
   2b608:	cmp	r0, r1, lsl #23
   2b60c:	adc	r2, r2, r2
   2b610:	subcs	r0, r0, r1, lsl #23
   2b614:	cmp	r0, r1, lsl #22
   2b618:	adc	r2, r2, r2
   2b61c:	subcs	r0, r0, r1, lsl #22
   2b620:	cmp	r0, r1, lsl #21
   2b624:	adc	r2, r2, r2
   2b628:	subcs	r0, r0, r1, lsl #21
   2b62c:	cmp	r0, r1, lsl #20
   2b630:	adc	r2, r2, r2
   2b634:	subcs	r0, r0, r1, lsl #20
   2b638:	cmp	r0, r1, lsl #19
   2b63c:	adc	r2, r2, r2
   2b640:	subcs	r0, r0, r1, lsl #19
   2b644:	cmp	r0, r1, lsl #18
   2b648:	adc	r2, r2, r2
   2b64c:	subcs	r0, r0, r1, lsl #18
   2b650:	cmp	r0, r1, lsl #17
   2b654:	adc	r2, r2, r2
   2b658:	subcs	r0, r0, r1, lsl #17
   2b65c:	cmp	r0, r1, lsl #16
   2b660:	adc	r2, r2, r2
   2b664:	subcs	r0, r0, r1, lsl #16
   2b668:	cmp	r0, r1, lsl #15
   2b66c:	adc	r2, r2, r2
   2b670:	subcs	r0, r0, r1, lsl #15
   2b674:	cmp	r0, r1, lsl #14
   2b678:	adc	r2, r2, r2
   2b67c:	subcs	r0, r0, r1, lsl #14
   2b680:	cmp	r0, r1, lsl #13
   2b684:	adc	r2, r2, r2
   2b688:	subcs	r0, r0, r1, lsl #13
   2b68c:	cmp	r0, r1, lsl #12
   2b690:	adc	r2, r2, r2
   2b694:	subcs	r0, r0, r1, lsl #12
   2b698:	cmp	r0, r1, lsl #11
   2b69c:	adc	r2, r2, r2
   2b6a0:	subcs	r0, r0, r1, lsl #11
   2b6a4:	cmp	r0, r1, lsl #10
   2b6a8:	adc	r2, r2, r2
   2b6ac:	subcs	r0, r0, r1, lsl #10
   2b6b0:	cmp	r0, r1, lsl #9
   2b6b4:	adc	r2, r2, r2
   2b6b8:	subcs	r0, r0, r1, lsl #9
   2b6bc:	cmp	r0, r1, lsl #8
   2b6c0:	adc	r2, r2, r2
   2b6c4:	subcs	r0, r0, r1, lsl #8
   2b6c8:	cmp	r0, r1, lsl #7
   2b6cc:	adc	r2, r2, r2
   2b6d0:	subcs	r0, r0, r1, lsl #7
   2b6d4:	cmp	r0, r1, lsl #6
   2b6d8:	adc	r2, r2, r2
   2b6dc:	subcs	r0, r0, r1, lsl #6
   2b6e0:	cmp	r0, r1, lsl #5
   2b6e4:	adc	r2, r2, r2
   2b6e8:	subcs	r0, r0, r1, lsl #5
   2b6ec:	cmp	r0, r1, lsl #4
   2b6f0:	adc	r2, r2, r2
   2b6f4:	subcs	r0, r0, r1, lsl #4
   2b6f8:	cmp	r0, r1, lsl #3
   2b6fc:	adc	r2, r2, r2
   2b700:	subcs	r0, r0, r1, lsl #3
   2b704:	cmp	r0, r1, lsl #2
   2b708:	adc	r2, r2, r2
   2b70c:	subcs	r0, r0, r1, lsl #2
   2b710:	cmp	r0, r1, lsl #1
   2b714:	adc	r2, r2, r2
   2b718:	subcs	r0, r0, r1, lsl #1
   2b71c:	cmp	r0, r1
   2b720:	adc	r2, r2, r2
   2b724:	subcs	r0, r0, r1
   2b728:	mov	r0, r2
   2b72c:	bx	lr
   2b730:	moveq	r0, #1
   2b734:	movne	r0, #0
   2b738:	bx	lr
   2b73c:	clz	r2, r1
   2b740:	rsb	r2, r2, #31
   2b744:	lsr	r0, r0, r2
   2b748:	bx	lr
   2b74c:	cmp	r0, #0
   2b750:	mvnne	r0, #0
   2b754:	b	2be80 <_obstack_memory_used@@Base+0x78d4>
   2b758:	cmp	r1, #0
   2b75c:	beq	2b74c <_obstack_memory_used@@Base+0x71a0>
   2b760:	push	{r0, r1, lr}
   2b764:	bl	2b56c <_obstack_memory_used@@Base+0x6fc0>
   2b768:	pop	{r1, r2, lr}
   2b76c:	mul	r3, r2, r0
   2b770:	sub	r1, r1, r3
   2b774:	bx	lr
   2b778:	cmp	r1, #0
   2b77c:	beq	2b988 <_obstack_memory_used@@Base+0x73dc>
   2b780:	eor	ip, r0, r1
   2b784:	rsbmi	r1, r1, #0
   2b788:	subs	r2, r1, #1
   2b78c:	beq	2b954 <_obstack_memory_used@@Base+0x73a8>
   2b790:	movs	r3, r0
   2b794:	rsbmi	r3, r0, #0
   2b798:	cmp	r3, r1
   2b79c:	bls	2b960 <_obstack_memory_used@@Base+0x73b4>
   2b7a0:	tst	r1, r2
   2b7a4:	beq	2b970 <_obstack_memory_used@@Base+0x73c4>
   2b7a8:	clz	r2, r3
   2b7ac:	clz	r0, r1
   2b7b0:	sub	r2, r0, r2
   2b7b4:	rsbs	r2, r2, #31
   2b7b8:	addne	r2, r2, r2, lsl #1
   2b7bc:	mov	r0, #0
   2b7c0:	addne	pc, pc, r2, lsl #2
   2b7c4:	nop			; (mov r0, r0)
   2b7c8:	cmp	r3, r1, lsl #31
   2b7cc:	adc	r0, r0, r0
   2b7d0:	subcs	r3, r3, r1, lsl #31
   2b7d4:	cmp	r3, r1, lsl #30
   2b7d8:	adc	r0, r0, r0
   2b7dc:	subcs	r3, r3, r1, lsl #30
   2b7e0:	cmp	r3, r1, lsl #29
   2b7e4:	adc	r0, r0, r0
   2b7e8:	subcs	r3, r3, r1, lsl #29
   2b7ec:	cmp	r3, r1, lsl #28
   2b7f0:	adc	r0, r0, r0
   2b7f4:	subcs	r3, r3, r1, lsl #28
   2b7f8:	cmp	r3, r1, lsl #27
   2b7fc:	adc	r0, r0, r0
   2b800:	subcs	r3, r3, r1, lsl #27
   2b804:	cmp	r3, r1, lsl #26
   2b808:	adc	r0, r0, r0
   2b80c:	subcs	r3, r3, r1, lsl #26
   2b810:	cmp	r3, r1, lsl #25
   2b814:	adc	r0, r0, r0
   2b818:	subcs	r3, r3, r1, lsl #25
   2b81c:	cmp	r3, r1, lsl #24
   2b820:	adc	r0, r0, r0
   2b824:	subcs	r3, r3, r1, lsl #24
   2b828:	cmp	r3, r1, lsl #23
   2b82c:	adc	r0, r0, r0
   2b830:	subcs	r3, r3, r1, lsl #23
   2b834:	cmp	r3, r1, lsl #22
   2b838:	adc	r0, r0, r0
   2b83c:	subcs	r3, r3, r1, lsl #22
   2b840:	cmp	r3, r1, lsl #21
   2b844:	adc	r0, r0, r0
   2b848:	subcs	r3, r3, r1, lsl #21
   2b84c:	cmp	r3, r1, lsl #20
   2b850:	adc	r0, r0, r0
   2b854:	subcs	r3, r3, r1, lsl #20
   2b858:	cmp	r3, r1, lsl #19
   2b85c:	adc	r0, r0, r0
   2b860:	subcs	r3, r3, r1, lsl #19
   2b864:	cmp	r3, r1, lsl #18
   2b868:	adc	r0, r0, r0
   2b86c:	subcs	r3, r3, r1, lsl #18
   2b870:	cmp	r3, r1, lsl #17
   2b874:	adc	r0, r0, r0
   2b878:	subcs	r3, r3, r1, lsl #17
   2b87c:	cmp	r3, r1, lsl #16
   2b880:	adc	r0, r0, r0
   2b884:	subcs	r3, r3, r1, lsl #16
   2b888:	cmp	r3, r1, lsl #15
   2b88c:	adc	r0, r0, r0
   2b890:	subcs	r3, r3, r1, lsl #15
   2b894:	cmp	r3, r1, lsl #14
   2b898:	adc	r0, r0, r0
   2b89c:	subcs	r3, r3, r1, lsl #14
   2b8a0:	cmp	r3, r1, lsl #13
   2b8a4:	adc	r0, r0, r0
   2b8a8:	subcs	r3, r3, r1, lsl #13
   2b8ac:	cmp	r3, r1, lsl #12
   2b8b0:	adc	r0, r0, r0
   2b8b4:	subcs	r3, r3, r1, lsl #12
   2b8b8:	cmp	r3, r1, lsl #11
   2b8bc:	adc	r0, r0, r0
   2b8c0:	subcs	r3, r3, r1, lsl #11
   2b8c4:	cmp	r3, r1, lsl #10
   2b8c8:	adc	r0, r0, r0
   2b8cc:	subcs	r3, r3, r1, lsl #10
   2b8d0:	cmp	r3, r1, lsl #9
   2b8d4:	adc	r0, r0, r0
   2b8d8:	subcs	r3, r3, r1, lsl #9
   2b8dc:	cmp	r3, r1, lsl #8
   2b8e0:	adc	r0, r0, r0
   2b8e4:	subcs	r3, r3, r1, lsl #8
   2b8e8:	cmp	r3, r1, lsl #7
   2b8ec:	adc	r0, r0, r0
   2b8f0:	subcs	r3, r3, r1, lsl #7
   2b8f4:	cmp	r3, r1, lsl #6
   2b8f8:	adc	r0, r0, r0
   2b8fc:	subcs	r3, r3, r1, lsl #6
   2b900:	cmp	r3, r1, lsl #5
   2b904:	adc	r0, r0, r0
   2b908:	subcs	r3, r3, r1, lsl #5
   2b90c:	cmp	r3, r1, lsl #4
   2b910:	adc	r0, r0, r0
   2b914:	subcs	r3, r3, r1, lsl #4
   2b918:	cmp	r3, r1, lsl #3
   2b91c:	adc	r0, r0, r0
   2b920:	subcs	r3, r3, r1, lsl #3
   2b924:	cmp	r3, r1, lsl #2
   2b928:	adc	r0, r0, r0
   2b92c:	subcs	r3, r3, r1, lsl #2
   2b930:	cmp	r3, r1, lsl #1
   2b934:	adc	r0, r0, r0
   2b938:	subcs	r3, r3, r1, lsl #1
   2b93c:	cmp	r3, r1
   2b940:	adc	r0, r0, r0
   2b944:	subcs	r3, r3, r1
   2b948:	cmp	ip, #0
   2b94c:	rsbmi	r0, r0, #0
   2b950:	bx	lr
   2b954:	teq	ip, r0
   2b958:	rsbmi	r0, r0, #0
   2b95c:	bx	lr
   2b960:	movcc	r0, #0
   2b964:	asreq	r0, ip, #31
   2b968:	orreq	r0, r0, #1
   2b96c:	bx	lr
   2b970:	clz	r2, r1
   2b974:	rsb	r2, r2, #31
   2b978:	cmp	ip, #0
   2b97c:	lsr	r0, r3, r2
   2b980:	rsbmi	r0, r0, #0
   2b984:	bx	lr
   2b988:	cmp	r0, #0
   2b98c:	mvngt	r0, #-2147483648	; 0x80000000
   2b990:	movlt	r0, #-2147483648	; 0x80000000
   2b994:	b	2be80 <_obstack_memory_used@@Base+0x78d4>
   2b998:	cmp	r1, #0
   2b99c:	beq	2b988 <_obstack_memory_used@@Base+0x73dc>
   2b9a0:	push	{r0, r1, lr}
   2b9a4:	bl	2b780 <_obstack_memory_used@@Base+0x71d4>
   2b9a8:	pop	{r1, r2, lr}
   2b9ac:	mul	r3, r2, r0
   2b9b0:	sub	r1, r1, r3
   2b9b4:	bx	lr
   2b9b8:	eor	r1, r1, #-2147483648	; 0x80000000
   2b9bc:	b	2b9c4 <_obstack_memory_used@@Base+0x7418>
   2b9c0:	eor	r3, r3, #-2147483648	; 0x80000000
   2b9c4:	push	{r4, r5, lr}
   2b9c8:	lsl	r4, r1, #1
   2b9cc:	lsl	r5, r3, #1
   2b9d0:	teq	r4, r5
   2b9d4:	teqeq	r0, r2
   2b9d8:	orrsne	ip, r4, r0
   2b9dc:	orrsne	ip, r5, r2
   2b9e0:	mvnsne	ip, r4, asr #21
   2b9e4:	mvnsne	ip, r5, asr #21
   2b9e8:	beq	2bbd4 <_obstack_memory_used@@Base+0x7628>
   2b9ec:	lsr	r4, r4, #21
   2b9f0:	rsbs	r5, r4, r5, lsr #21
   2b9f4:	rsblt	r5, r5, #0
   2b9f8:	ble	2ba18 <_obstack_memory_used@@Base+0x746c>
   2b9fc:	add	r4, r4, r5
   2ba00:	eor	r2, r0, r2
   2ba04:	eor	r3, r1, r3
   2ba08:	eor	r0, r2, r0
   2ba0c:	eor	r1, r3, r1
   2ba10:	eor	r2, r0, r2
   2ba14:	eor	r3, r1, r3
   2ba18:	cmp	r5, #54	; 0x36
   2ba1c:	pophi	{r4, r5, pc}
   2ba20:	tst	r1, #-2147483648	; 0x80000000
   2ba24:	lsl	r1, r1, #12
   2ba28:	mov	ip, #1048576	; 0x100000
   2ba2c:	orr	r1, ip, r1, lsr #12
   2ba30:	beq	2ba3c <_obstack_memory_used@@Base+0x7490>
   2ba34:	rsbs	r0, r0, #0
   2ba38:	rsc	r1, r1, #0
   2ba3c:	tst	r3, #-2147483648	; 0x80000000
   2ba40:	lsl	r3, r3, #12
   2ba44:	orr	r3, ip, r3, lsr #12
   2ba48:	beq	2ba54 <_obstack_memory_used@@Base+0x74a8>
   2ba4c:	rsbs	r2, r2, #0
   2ba50:	rsc	r3, r3, #0
   2ba54:	teq	r4, r5
   2ba58:	beq	2bbbc <_obstack_memory_used@@Base+0x7610>
   2ba5c:	sub	r4, r4, #1
   2ba60:	rsbs	lr, r5, #32
   2ba64:	blt	2ba80 <_obstack_memory_used@@Base+0x74d4>
   2ba68:	lsl	ip, r2, lr
   2ba6c:	adds	r0, r0, r2, lsr r5
   2ba70:	adc	r1, r1, #0
   2ba74:	adds	r0, r0, r3, lsl lr
   2ba78:	adcs	r1, r1, r3, asr r5
   2ba7c:	b	2ba9c <_obstack_memory_used@@Base+0x74f0>
   2ba80:	sub	r5, r5, #32
   2ba84:	add	lr, lr, #32
   2ba88:	cmp	r2, #1
   2ba8c:	lsl	ip, r3, lr
   2ba90:	orrcs	ip, ip, #2
   2ba94:	adds	r0, r0, r3, asr r5
   2ba98:	adcs	r1, r1, r3, asr #31
   2ba9c:	and	r5, r1, #-2147483648	; 0x80000000
   2baa0:	bpl	2bab0 <_obstack_memory_used@@Base+0x7504>
   2baa4:	rsbs	ip, ip, #0
   2baa8:	rscs	r0, r0, #0
   2baac:	rsc	r1, r1, #0
   2bab0:	cmp	r1, #1048576	; 0x100000
   2bab4:	bcc	2baf4 <_obstack_memory_used@@Base+0x7548>
   2bab8:	cmp	r1, #2097152	; 0x200000
   2babc:	bcc	2badc <_obstack_memory_used@@Base+0x7530>
   2bac0:	lsrs	r1, r1, #1
   2bac4:	rrxs	r0, r0
   2bac8:	rrx	ip, ip
   2bacc:	add	r4, r4, #1
   2bad0:	lsl	r2, r4, #21
   2bad4:	cmn	r2, #4194304	; 0x400000
   2bad8:	bcs	2bc34 <_obstack_memory_used@@Base+0x7688>
   2badc:	cmp	ip, #-2147483648	; 0x80000000
   2bae0:	lsrseq	ip, r0, #1
   2bae4:	adcs	r0, r0, #0
   2bae8:	adc	r1, r1, r4, lsl #20
   2baec:	orr	r1, r1, r5
   2baf0:	pop	{r4, r5, pc}
   2baf4:	lsls	ip, ip, #1
   2baf8:	adcs	r0, r0, r0
   2bafc:	adc	r1, r1, r1
   2bb00:	tst	r1, #1048576	; 0x100000
   2bb04:	sub	r4, r4, #1
   2bb08:	bne	2badc <_obstack_memory_used@@Base+0x7530>
   2bb0c:	teq	r1, #0
   2bb10:	moveq	r1, r0
   2bb14:	moveq	r0, #0
   2bb18:	clz	r3, r1
   2bb1c:	addeq	r3, r3, #32
   2bb20:	sub	r3, r3, #11
   2bb24:	subs	r2, r3, #32
   2bb28:	bge	2bb4c <_obstack_memory_used@@Base+0x75a0>
   2bb2c:	adds	r2, r2, #12
   2bb30:	ble	2bb48 <_obstack_memory_used@@Base+0x759c>
   2bb34:	add	ip, r2, #20
   2bb38:	rsb	r2, r2, #12
   2bb3c:	lsl	r0, r1, ip
   2bb40:	lsr	r1, r1, r2
   2bb44:	b	2bb5c <_obstack_memory_used@@Base+0x75b0>
   2bb48:	add	r2, r2, #20
   2bb4c:	rsble	ip, r2, #32
   2bb50:	lsl	r1, r1, r2
   2bb54:	orrle	r1, r1, r0, lsr ip
   2bb58:	lslle	r0, r0, r2
   2bb5c:	subs	r4, r4, r3
   2bb60:	addge	r1, r1, r4, lsl #20
   2bb64:	orrge	r1, r1, r5
   2bb68:	popge	{r4, r5, pc}
   2bb6c:	mvn	r4, r4
   2bb70:	subs	r4, r4, #31
   2bb74:	bge	2bbb0 <_obstack_memory_used@@Base+0x7604>
   2bb78:	adds	r4, r4, #12
   2bb7c:	bgt	2bb98 <_obstack_memory_used@@Base+0x75ec>
   2bb80:	add	r4, r4, #20
   2bb84:	rsb	r2, r4, #32
   2bb88:	lsr	r0, r0, r4
   2bb8c:	orr	r0, r0, r1, lsl r2
   2bb90:	orr	r1, r5, r1, lsr r4
   2bb94:	pop	{r4, r5, pc}
   2bb98:	rsb	r4, r4, #12
   2bb9c:	rsb	r2, r4, #32
   2bba0:	lsr	r0, r0, r2
   2bba4:	orr	r0, r0, r1, lsl r4
   2bba8:	mov	r1, r5
   2bbac:	pop	{r4, r5, pc}
   2bbb0:	lsr	r0, r1, r4
   2bbb4:	mov	r1, r5
   2bbb8:	pop	{r4, r5, pc}
   2bbbc:	teq	r4, #0
   2bbc0:	eor	r3, r3, #1048576	; 0x100000
   2bbc4:	eoreq	r1, r1, #1048576	; 0x100000
   2bbc8:	addeq	r4, r4, #1
   2bbcc:	subne	r5, r5, #1
   2bbd0:	b	2ba5c <_obstack_memory_used@@Base+0x74b0>
   2bbd4:	mvns	ip, r4, asr #21
   2bbd8:	mvnsne	ip, r5, asr #21
   2bbdc:	beq	2bc44 <_obstack_memory_used@@Base+0x7698>
   2bbe0:	teq	r4, r5
   2bbe4:	teqeq	r0, r2
   2bbe8:	beq	2bbfc <_obstack_memory_used@@Base+0x7650>
   2bbec:	orrs	ip, r4, r0
   2bbf0:	moveq	r1, r3
   2bbf4:	moveq	r0, r2
   2bbf8:	pop	{r4, r5, pc}
   2bbfc:	teq	r1, r3
   2bc00:	movne	r1, #0
   2bc04:	movne	r0, #0
   2bc08:	popne	{r4, r5, pc}
   2bc0c:	lsrs	ip, r4, #21
   2bc10:	bne	2bc24 <_obstack_memory_used@@Base+0x7678>
   2bc14:	lsls	r0, r0, #1
   2bc18:	adcs	r1, r1, r1
   2bc1c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   2bc20:	pop	{r4, r5, pc}
   2bc24:	adds	r4, r4, #4194304	; 0x400000
   2bc28:	addcc	r1, r1, #1048576	; 0x100000
   2bc2c:	popcc	{r4, r5, pc}
   2bc30:	and	r5, r1, #-2147483648	; 0x80000000
   2bc34:	orr	r1, r5, #2130706432	; 0x7f000000
   2bc38:	orr	r1, r1, #15728640	; 0xf00000
   2bc3c:	mov	r0, #0
   2bc40:	pop	{r4, r5, pc}
   2bc44:	mvns	ip, r4, asr #21
   2bc48:	movne	r1, r3
   2bc4c:	movne	r0, r2
   2bc50:	mvnseq	ip, r5, asr #21
   2bc54:	movne	r3, r1
   2bc58:	movne	r2, r0
   2bc5c:	orrs	r4, r0, r1, lsl #12
   2bc60:	orrseq	r5, r2, r3, lsl #12
   2bc64:	teqeq	r1, r3
   2bc68:	orrne	r1, r1, #524288	; 0x80000
   2bc6c:	pop	{r4, r5, pc}
   2bc70:	teq	r0, #0
   2bc74:	moveq	r1, #0
   2bc78:	bxeq	lr
   2bc7c:	push	{r4, r5, lr}
   2bc80:	mov	r4, #1024	; 0x400
   2bc84:	add	r4, r4, #50	; 0x32
   2bc88:	mov	r5, #0
   2bc8c:	mov	r1, #0
   2bc90:	b	2bb0c <_obstack_memory_used@@Base+0x7560>
   2bc94:	teq	r0, #0
   2bc98:	moveq	r1, #0
   2bc9c:	bxeq	lr
   2bca0:	push	{r4, r5, lr}
   2bca4:	mov	r4, #1024	; 0x400
   2bca8:	add	r4, r4, #50	; 0x32
   2bcac:	ands	r5, r0, #-2147483648	; 0x80000000
   2bcb0:	rsbmi	r0, r0, #0
   2bcb4:	mov	r1, #0
   2bcb8:	b	2bb0c <_obstack_memory_used@@Base+0x7560>
   2bcbc:	lsls	r2, r0, #1
   2bcc0:	asr	r1, r2, #3
   2bcc4:	rrx	r1, r1
   2bcc8:	lsl	r0, r2, #28
   2bccc:	andsne	r3, r2, #-16777216	; 0xff000000
   2bcd0:	teqne	r3, #-16777216	; 0xff000000
   2bcd4:	eorne	r1, r1, #939524096	; 0x38000000
   2bcd8:	bxne	lr
   2bcdc:	teq	r2, #0
   2bce0:	teqne	r3, #-16777216	; 0xff000000
   2bce4:	bxeq	lr
   2bce8:	push	{r4, r5, lr}
   2bcec:	mov	r4, #896	; 0x380
   2bcf0:	and	r5, r1, #-2147483648	; 0x80000000
   2bcf4:	bic	r1, r1, #-2147483648	; 0x80000000
   2bcf8:	b	2bb0c <_obstack_memory_used@@Base+0x7560>
   2bcfc:	orrs	r2, r0, r1
   2bd00:	bxeq	lr
   2bd04:	push	{r4, r5, lr}
   2bd08:	mov	r5, #0
   2bd0c:	b	2bd2c <_obstack_memory_used@@Base+0x7780>
   2bd10:	orrs	r2, r0, r1
   2bd14:	bxeq	lr
   2bd18:	push	{r4, r5, lr}
   2bd1c:	ands	r5, r1, #-2147483648	; 0x80000000
   2bd20:	bpl	2bd2c <_obstack_memory_used@@Base+0x7780>
   2bd24:	rsbs	r0, r0, #0
   2bd28:	rsc	r1, r1, #0
   2bd2c:	mov	r4, #1024	; 0x400
   2bd30:	add	r4, r4, #50	; 0x32
   2bd34:	lsrs	ip, r1, #22
   2bd38:	beq	2bab0 <_obstack_memory_used@@Base+0x7504>
   2bd3c:	mov	r2, #3
   2bd40:	lsrs	ip, ip, #3
   2bd44:	addne	r2, r2, #3
   2bd48:	lsrs	ip, ip, #3
   2bd4c:	addne	r2, r2, #3
   2bd50:	add	r2, r2, ip, lsr #3
   2bd54:	rsb	r3, r2, #32
   2bd58:	lsl	ip, r0, r3
   2bd5c:	lsr	r0, r0, r2
   2bd60:	orr	r0, r0, r1, lsl r3
   2bd64:	lsr	r1, r1, r2
   2bd68:	add	r4, r4, r2
   2bd6c:	b	2bab0 <_obstack_memory_used@@Base+0x7504>
   2bd70:	cmp	r3, #0
   2bd74:	cmpeq	r2, #0
   2bd78:	bne	2bd9c <_obstack_memory_used@@Base+0x77f0>
   2bd7c:	cmp	r1, #0
   2bd80:	movlt	r1, #-2147483648	; 0x80000000
   2bd84:	movlt	r0, #0
   2bd88:	blt	2bd98 <_obstack_memory_used@@Base+0x77ec>
   2bd8c:	cmpeq	r0, #0
   2bd90:	mvnne	r1, #-2147483648	; 0x80000000
   2bd94:	mvnne	r0, #0
   2bd98:	b	2be80 <_obstack_memory_used@@Base+0x78d4>
   2bd9c:	sub	sp, sp, #8
   2bda0:	push	{sp, lr}
   2bda4:	cmp	r1, #0
   2bda8:	blt	2bdc8 <_obstack_memory_used@@Base+0x781c>
   2bdac:	cmp	r3, #0
   2bdb0:	blt	2bdfc <_obstack_memory_used@@Base+0x7850>
   2bdb4:	bl	2bed8 <_obstack_memory_used@@Base+0x792c>
   2bdb8:	ldr	lr, [sp, #4]
   2bdbc:	add	sp, sp, #8
   2bdc0:	pop	{r2, r3}
   2bdc4:	bx	lr
   2bdc8:	rsbs	r0, r0, #0
   2bdcc:	sbc	r1, r1, r1, lsl #1
   2bdd0:	cmp	r3, #0
   2bdd4:	blt	2be20 <_obstack_memory_used@@Base+0x7874>
   2bdd8:	bl	2bed8 <_obstack_memory_used@@Base+0x792c>
   2bddc:	ldr	lr, [sp, #4]
   2bde0:	add	sp, sp, #8
   2bde4:	pop	{r2, r3}
   2bde8:	rsbs	r0, r0, #0
   2bdec:	sbc	r1, r1, r1, lsl #1
   2bdf0:	rsbs	r2, r2, #0
   2bdf4:	sbc	r3, r3, r3, lsl #1
   2bdf8:	bx	lr
   2bdfc:	rsbs	r2, r2, #0
   2be00:	sbc	r3, r3, r3, lsl #1
   2be04:	bl	2bed8 <_obstack_memory_used@@Base+0x792c>
   2be08:	ldr	lr, [sp, #4]
   2be0c:	add	sp, sp, #8
   2be10:	pop	{r2, r3}
   2be14:	rsbs	r0, r0, #0
   2be18:	sbc	r1, r1, r1, lsl #1
   2be1c:	bx	lr
   2be20:	rsbs	r2, r2, #0
   2be24:	sbc	r3, r3, r3, lsl #1
   2be28:	bl	2bed8 <_obstack_memory_used@@Base+0x792c>
   2be2c:	ldr	lr, [sp, #4]
   2be30:	add	sp, sp, #8
   2be34:	pop	{r2, r3}
   2be38:	rsbs	r2, r2, #0
   2be3c:	sbc	r3, r3, r3, lsl #1
   2be40:	bx	lr
   2be44:	cmp	r3, #0
   2be48:	cmpeq	r2, #0
   2be4c:	bne	2be64 <_obstack_memory_used@@Base+0x78b8>
   2be50:	cmp	r1, #0
   2be54:	cmpeq	r0, #0
   2be58:	mvnne	r1, #0
   2be5c:	mvnne	r0, #0
   2be60:	b	2be80 <_obstack_memory_used@@Base+0x78d4>
   2be64:	sub	sp, sp, #8
   2be68:	push	{sp, lr}
   2be6c:	bl	2bed8 <_obstack_memory_used@@Base+0x792c>
   2be70:	ldr	lr, [sp, #4]
   2be74:	add	sp, sp, #8
   2be78:	pop	{r2, r3}
   2be7c:	bx	lr
   2be80:	push	{r1, lr}
   2be84:	mov	r0, #8
   2be88:	bl	1187c <raise@plt>
   2be8c:	pop	{r1, pc}
   2be90:	vmov	d7, r0, r1
   2be94:	vldr	d6, [pc, #44]	; 2bec8 <_obstack_memory_used@@Base+0x791c>
   2be98:	vldr	d5, [pc, #48]	; 2bed0 <_obstack_memory_used@@Base+0x7924>
   2be9c:	mov	r0, #0
   2bea0:	vmul.f64	d6, d7, d6
   2bea4:	vcvt.u32.f64	s12, d6
   2bea8:	vcvt.f64.u32	d4, s12
   2beac:	vmov	r1, s12
   2beb0:	vmls.f64	d7, d4, d5
   2beb4:	vcvt.u32.f64	s14, d7
   2beb8:	vmov	r3, s14
   2bebc:	orr	r0, r0, r3
   2bec0:	bx	lr
   2bec4:	nop			; (mov r0, r0)
   2bec8:	andeq	r0, r0, r0
   2becc:	ldclcc	0, cr0, [r0]
   2bed0:	andeq	r0, r0, r0
   2bed4:	mvnsmi	r0, r0
   2bed8:	cmp	r1, r3
   2bedc:	push	{r4, r5, r6, r7, r8, r9, lr}
   2bee0:	cmpeq	r0, r2
   2bee4:	mov	r4, r0
   2bee8:	mov	r5, r1
   2beec:	ldr	r9, [sp, #28]
   2bef0:	movcc	r0, #0
   2bef4:	movcc	r1, #0
   2bef8:	bcc	2bff0 <_obstack_memory_used@@Base+0x7a44>
   2befc:	cmp	r3, #0
   2bf00:	clzeq	ip, r2
   2bf04:	clzne	ip, r3
   2bf08:	addeq	ip, ip, #32
   2bf0c:	cmp	r5, #0
   2bf10:	clzeq	r1, r4
   2bf14:	addeq	r1, r1, #32
   2bf18:	clzne	r1, r5
   2bf1c:	sub	ip, ip, r1
   2bf20:	sub	lr, ip, #32
   2bf24:	lsl	r7, r3, ip
   2bf28:	rsb	r8, ip, #32
   2bf2c:	orr	r7, r7, r2, lsl lr
   2bf30:	orr	r7, r7, r2, lsr r8
   2bf34:	lsl	r6, r2, ip
   2bf38:	cmp	r5, r7
   2bf3c:	cmpeq	r4, r6
   2bf40:	movcc	r0, #0
   2bf44:	movcc	r1, #0
   2bf48:	bcc	2bf64 <_obstack_memory_used@@Base+0x79b8>
   2bf4c:	mov	r3, #1
   2bf50:	subs	r4, r4, r6
   2bf54:	lsl	r1, r3, lr
   2bf58:	lsl	r0, r3, ip
   2bf5c:	orr	r1, r1, r3, lsr r8
   2bf60:	sbc	r5, r5, r7
   2bf64:	cmp	ip, #0
   2bf68:	beq	2bff0 <_obstack_memory_used@@Base+0x7a44>
   2bf6c:	lsrs	r3, r7, #1
   2bf70:	rrx	r2, r6
   2bf74:	mov	r6, ip
   2bf78:	b	2bf9c <_obstack_memory_used@@Base+0x79f0>
   2bf7c:	subs	r4, r4, r2
   2bf80:	sbc	r5, r5, r3
   2bf84:	adds	r4, r4, r4
   2bf88:	adc	r5, r5, r5
   2bf8c:	adds	r4, r4, #1
   2bf90:	adc	r5, r5, #0
   2bf94:	subs	r6, r6, #1
   2bf98:	beq	2bfb8 <_obstack_memory_used@@Base+0x7a0c>
   2bf9c:	cmp	r5, r3
   2bfa0:	cmpeq	r4, r2
   2bfa4:	bcs	2bf7c <_obstack_memory_used@@Base+0x79d0>
   2bfa8:	adds	r4, r4, r4
   2bfac:	adc	r5, r5, r5
   2bfb0:	subs	r6, r6, #1
   2bfb4:	bne	2bf9c <_obstack_memory_used@@Base+0x79f0>
   2bfb8:	lsr	r6, r4, ip
   2bfbc:	lsr	r7, r5, ip
   2bfc0:	orr	r6, r6, r5, lsl r8
   2bfc4:	adds	r2, r0, r4
   2bfc8:	orr	r6, r6, r5, lsr lr
   2bfcc:	adc	r3, r1, r5
   2bfd0:	lsl	r1, r7, ip
   2bfd4:	orr	r1, r1, r6, lsl lr
   2bfd8:	lsl	r0, r6, ip
   2bfdc:	orr	r1, r1, r6, lsr r8
   2bfe0:	subs	r0, r2, r0
   2bfe4:	mov	r4, r6
   2bfe8:	mov	r5, r7
   2bfec:	sbc	r1, r3, r1
   2bff0:	cmp	r9, #0
   2bff4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   2bff8:	strd	r4, [r9]
   2bffc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2c000:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c004:	mov	r7, r0
   2c008:	ldr	r6, [pc, #72]	; 2c058 <_obstack_memory_used@@Base+0x7aac>
   2c00c:	ldr	r5, [pc, #72]	; 2c05c <_obstack_memory_used@@Base+0x7ab0>
   2c010:	add	r6, pc, r6
   2c014:	add	r5, pc, r5
   2c018:	sub	r6, r6, r5
   2c01c:	mov	r8, r1
   2c020:	mov	r9, r2
   2c024:	bl	11838 <calloc@plt-0x20>
   2c028:	asrs	r6, r6, #2
   2c02c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c030:	mov	r4, #0
   2c034:	add	r4, r4, #1
   2c038:	ldr	r3, [r5], #4
   2c03c:	mov	r2, r9
   2c040:	mov	r1, r8
   2c044:	mov	r0, r7
   2c048:	blx	r3
   2c04c:	cmp	r6, r4
   2c050:	bne	2c034 <_obstack_memory_used@@Base+0x7a88>
   2c054:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c058:	andeq	r4, r1, r8, ror #29
   2c05c:	andeq	r4, r1, r0, ror #29
   2c060:	bx	lr
   2c064:	ldr	r3, [pc, #12]	; 2c078 <_obstack_memory_used@@Base+0x7acc>
   2c068:	mov	r1, #0
   2c06c:	add	r3, pc, r3
   2c070:	ldr	r2, [r3]
   2c074:	b	11bdc <__cxa_atexit@plt>
   2c078:	andeq	r5, r1, r8, asr r1

Disassembly of section .fini:

0002c07c <.fini>:
   2c07c:	push	{r3, lr}
   2c080:	pop	{r3, pc}
