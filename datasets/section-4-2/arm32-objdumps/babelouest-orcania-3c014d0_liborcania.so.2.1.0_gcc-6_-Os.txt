
../repos/babelouest-orcania-3c014d0/liborcania.so.2.1.0:     file format elf32-littlearm


Disassembly of section .init:

00000e78 <.init>:
 e78:	push	{r3, lr}
 e7c:	bl	1078 <o_strchr@plt+0xc>
 e80:	pop	{r3, pc}

Disassembly of section .plt:

00000e84 <strstr@plt-0x14>:
     e84:	push	{lr}		; (str lr, [sp, #-4]!)
     e88:	ldr	lr, [pc, #4]	; e94 <strstr@plt-0x4>
     e8c:	add	lr, pc, lr
     e90:	ldr	pc, [lr, #8]!
     e94:	andeq	r2, r1, ip, ror #2

00000e98 <strstr@plt>:
     e98:	add	ip, pc, #0, 12
     e9c:	add	ip, ip, #73728	; 0x12000
     ea0:	ldr	pc, [ip, #364]!	; 0x16c

00000ea4 <raise@plt>:
     ea4:	add	ip, pc, #0, 12
     ea8:	add	ip, ip, #73728	; 0x12000
     eac:	ldr	pc, [ip, #356]!	; 0x164

00000eb0 <pointer_list_get_at@plt>:
     eb0:	add	ip, pc, #0, 12
     eb4:	add	ip, ip, #73728	; 0x12000
     eb8:	ldr	pc, [ip, #348]!	; 0x15c

00000ebc <o_strncasecmp@plt>:
     ebc:	add	ip, pc, #0, 12
     ec0:	add	ip, ip, #73728	; 0x12000
     ec4:	ldr	pc, [ip, #340]!	; 0x154

00000ec8 <strcasestr@plt>:
     ec8:	add	ip, pc, #0, 12
     ecc:	add	ip, ip, #73728	; 0x12000
     ed0:	ldr	pc, [ip, #332]!	; 0x14c

00000ed4 <strcmp@plt>:
     ed4:	add	ip, pc, #0, 12
     ed8:	add	ip, ip, #73728	; 0x12000
     edc:	ldr	pc, [ip, #324]!	; 0x144

00000ee0 <__cxa_finalize@plt>:
     ee0:	add	ip, pc, #0, 12
     ee4:	add	ip, ip, #73728	; 0x12000
     ee8:	ldr	pc, [ip, #316]!	; 0x13c

00000eec <o_strndup@plt>:
     eec:	add	ip, pc, #0, 12
     ef0:	add	ip, ip, #73728	; 0x12000
     ef4:	ldr	pc, [ip, #308]!	; 0x134

00000ef8 <trunc@plt>:
     ef8:	add	ip, pc, #0, 12
     efc:	add	ip, ip, #73728	; 0x12000
     f00:	ldr	pc, [ip, #300]!	; 0x12c

00000f04 <o_free@plt>:
     f04:	add	ip, pc, #0, 12
     f08:	add	ip, ip, #73728	; 0x12000
     f0c:	ldr	pc, [ip, #292]!	; 0x124

00000f10 <pointer_list_remove_at@plt>:
     f10:	add	ip, pc, #0, 12
     f14:	add	ip, ip, #73728	; 0x12000
     f18:	ldr	pc, [ip, #284]!	; 0x11c

00000f1c <memcpy@plt>:
     f1c:	add	ip, pc, #0, 12
     f20:	add	ip, ip, #73728	; 0x12000
     f24:	ldr	pc, [ip, #276]!	; 0x114

00000f28 <o_strdup@plt>:
     f28:	add	ip, pc, #0, 12
     f2c:	add	ip, ip, #73728	; 0x12000
     f30:	ldr	pc, [ip, #268]!	; 0x10c

00000f34 <o_base64_encode@plt>:
     f34:	add	ip, pc, #0, 12
     f38:	add	ip, ip, #73728	; 0x12000
     f3c:	ldr	pc, [ip, #260]!	; 0x104

00000f40 <strcasecmp@plt>:
     f40:	add	ip, pc, #0, 12
     f44:	add	ip, ip, #73728	; 0x12000
     f48:	ldr	pc, [ip, #252]!	; 0xfc

00000f4c <o_strcmp@plt>:
     f4c:	add	ip, pc, #0, 12
     f50:	add	ip, ip, #73728	; 0x12000
     f54:	ldr	pc, [ip, #244]!	; 0xf4

00000f58 <trimwhitespace@plt>:
     f58:	add	ip, pc, #0, 12
     f5c:	add	ip, ip, #73728	; 0x12000
     f60:	ldr	pc, [ip, #236]!	; 0xec

00000f64 <strcpy@plt>:
     f64:	add	ip, pc, #0, 12
     f68:	add	ip, ip, #73728	; 0x12000
     f6c:	ldr	pc, [ip, #228]!	; 0xe4

00000f70 <o_strlen@plt>:
     f70:	add	ip, pc, #0, 12
     f74:	add	ip, ip, #73728	; 0x12000
     f78:	ldr	pc, [ip, #220]!	; 0xdc

00000f7c <o_strcasecmp@plt>:
     f7c:	add	ip, pc, #0, 12
     f80:	add	ip, ip, #73728	; 0x12000
     f84:	ldr	pc, [ip, #212]!	; 0xd4

00000f88 <o_realloc@plt>:
     f88:	add	ip, pc, #0, 12
     f8c:	add	ip, ip, #73728	; 0x12000
     f90:	ldr	pc, [ip, #204]!	; 0xcc

00000f94 <str_replace@plt>:
     f94:	add	ip, pc, #0, 12
     f98:	add	ip, ip, #73728	; 0x12000
     f9c:	ldr	pc, [ip, #196]!	; 0xc4

00000fa0 <__gmon_start__@plt>:
     fa0:	add	ip, pc, #0, 12
     fa4:	add	ip, ip, #73728	; 0x12000
     fa8:	ldr	pc, [ip, #188]!	; 0xbc

00000fac <__ctype_b_loc@plt>:
     fac:	add	ip, pc, #0, 12
     fb0:	add	ip, ip, #73728	; 0x12000
     fb4:	ldr	pc, [ip, #180]!	; 0xb4

00000fb8 <strlen@plt>:
     fb8:	add	ip, pc, #0, 12
     fbc:	add	ip, ip, #73728	; 0x12000
     fc0:	ldr	pc, [ip, #172]!	; 0xac

00000fc4 <strchr@plt>:
     fc4:	add	ip, pc, #0, 12
     fc8:	add	ip, ip, #73728	; 0x12000
     fcc:	ldr	pc, [ip, #164]!	; 0xa4

00000fd0 <strncasecmp@plt>:
     fd0:	add	ip, pc, #0, 12
     fd4:	add	ip, ip, #73728	; 0x12000
     fd8:	ldr	pc, [ip, #156]!	; 0x9c

00000fdc <snprintf@plt>:
     fdc:	add	ip, pc, #0, 12
     fe0:	add	ip, ip, #73728	; 0x12000
     fe4:	ldr	pc, [ip, #148]!	; 0x94

00000fe8 <o_malloc@plt>:
     fe8:	add	ip, pc, #0, 12
     fec:	add	ip, ip, #73728	; 0x12000
     ff0:	ldr	pc, [ip, #140]!	; 0x8c

00000ff4 <memset@plt>:
     ff4:	add	ip, pc, #0, 12
     ff8:	add	ip, ip, #73728	; 0x12000
     ffc:	ldr	pc, [ip, #132]!	; 0x84

00001000 <strncpy@plt>:
    1000:	add	ip, pc, #0, 12
    1004:	add	ip, ip, #73728	; 0x12000
    1008:	ldr	pc, [ip, #124]!	; 0x7c

0000100c <pointer_list_size@plt>:
    100c:	add	ip, pc, #0, 12
    1010:	add	ip, ip, #73728	; 0x12000
    1014:	ldr	pc, [ip, #116]!	; 0x74

00001018 <msprintf@plt>:
    1018:	add	ip, pc, #0, 12
    101c:	add	ip, ip, #73728	; 0x12000
    1020:	ldr	pc, [ip, #108]!	; 0x6c

00001024 <o_base64url_2_base64@plt>:
    1024:	add	ip, pc, #0, 12
    1028:	add	ip, ip, #73728	; 0x12000
    102c:	ldr	pc, [ip, #100]!	; 0x64

00001030 <strrchr@plt>:
    1030:	add	ip, pc, #0, 12
    1034:	add	ip, ip, #73728	; 0x12000
    1038:	ldr	pc, [ip, #92]!	; 0x5c

0000103c <o_base64_decode@plt>:
    103c:	add	ip, pc, #0, 12
    1040:	add	ip, ip, #73728	; 0x12000
    1044:	ldr	pc, [ip, #84]!	; 0x54

00001048 <vsnprintf@plt>:
    1048:	add	ip, pc, #0, 12
    104c:	add	ip, ip, #73728	; 0x12000
    1050:	ldr	pc, [ip, #76]!	; 0x4c

00001054 <o_strncmp@plt>:
    1054:	add	ip, pc, #0, 12
    1058:	add	ip, ip, #73728	; 0x12000
    105c:	ldr	pc, [ip, #68]!	; 0x44

00001060 <strncmp@plt>:
    1060:	add	ip, pc, #0, 12
    1064:	add	ip, ip, #73728	; 0x12000
    1068:	ldr	pc, [ip, #60]!	; 0x3c

0000106c <o_strchr@plt>:
    106c:	add	ip, pc, #0, 12
    1070:	add	ip, ip, #73728	; 0x12000
    1074:	ldr	pc, [ip, #52]!	; 0x34

Disassembly of section .text:

00001078 <o_base64_encode@@Base-0x338>:
    1078:	ldr	r3, [pc, #20]	; 1094 <o_strchr@plt+0x28>
    107c:	ldr	r2, [pc, #20]	; 1098 <o_strchr@plt+0x2c>
    1080:	add	r3, pc, r3
    1084:	ldr	r2, [r3, r2]
    1088:	cmp	r2, #0
    108c:	bxeq	lr
    1090:	b	fa0 <__gmon_start__@plt>
    1094:	andeq	r1, r1, r8, ror pc
    1098:	strheq	r0, [r0], -r4
    109c:	ldr	r3, [pc, #52]	; 10d8 <o_strchr@plt+0x6c>
    10a0:	ldr	r0, [pc, #52]	; 10dc <o_strchr@plt+0x70>
    10a4:	add	r3, pc, r3
    10a8:	add	r0, pc, r0
    10ac:	add	r3, r3, #3
    10b0:	sub	r3, r3, r0
    10b4:	cmp	r3, #6
    10b8:	ldr	r3, [pc, #32]	; 10e0 <o_strchr@plt+0x74>
    10bc:	add	r3, pc, r3
    10c0:	bxls	lr
    10c4:	ldr	r2, [pc, #24]	; 10e4 <o_strchr@plt+0x78>
    10c8:	ldr	r3, [r3, r2]
    10cc:	cmp	r3, #0
    10d0:	bxeq	lr
    10d4:	bx	r3
    10d8:	andeq	r2, r1, r4, lsr #32
    10dc:	andeq	r2, r1, r0, lsr #32
    10e0:	andeq	r1, r1, ip, lsr pc
    10e4:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    10e8:	ldr	r1, [pc, #56]	; 1128 <o_strchr@plt+0xbc>
    10ec:	ldr	r0, [pc, #56]	; 112c <o_strchr@plt+0xc0>
    10f0:	add	r1, pc, r1
    10f4:	add	r0, pc, r0
    10f8:	sub	r1, r1, r0
    10fc:	ldr	r3, [pc, #44]	; 1130 <o_strchr@plt+0xc4>
    1100:	asr	r1, r1, #2
    1104:	add	r3, pc, r3
    1108:	add	r1, r1, r1, lsr #31
    110c:	asrs	r1, r1, #1
    1110:	bxeq	lr
    1114:	ldr	r2, [pc, #24]	; 1134 <o_strchr@plt+0xc8>
    1118:	ldr	r3, [r3, r2]
    111c:	cmp	r3, #0
    1120:	bxeq	lr
    1124:	bx	r3
    1128:	ldrdeq	r1, [r1], -r8
    112c:	ldrdeq	r1, [r1], -r4
    1130:	strdeq	r1, [r1], -r4
    1134:	strheq	r0, [r0], -ip
    1138:	ldr	r3, [pc, #76]	; 118c <o_strchr@plt+0x120>
    113c:	ldr	r2, [pc, #76]	; 1190 <o_strchr@plt+0x124>
    1140:	add	r3, pc, r3
    1144:	add	r2, pc, r2
    1148:	ldrb	r3, [r3]
    114c:	cmp	r3, #0
    1150:	bxne	lr
    1154:	ldr	r3, [pc, #56]	; 1194 <o_strchr@plt+0x128>
    1158:	push	{r4, lr}
    115c:	ldr	r3, [r2, r3]
    1160:	cmp	r3, #0
    1164:	beq	1174 <o_strchr@plt+0x108>
    1168:	ldr	r3, [pc, #40]	; 1198 <o_strchr@plt+0x12c>
    116c:	ldr	r0, [pc, r3]
    1170:	bl	ee0 <__cxa_finalize@plt>
    1174:	bl	109c <o_strchr@plt+0x30>
    1178:	ldr	r3, [pc, #28]	; 119c <o_strchr@plt+0x130>
    117c:	mov	r2, #1
    1180:	add	r3, pc, r3
    1184:	strb	r2, [r3]
    1188:	pop	{r4, pc}
    118c:	andeq	r1, r1, r8, lsl #31
    1190:			; <UNDEFINED> instruction: 0x00011eb4
    1194:	andeq	r0, r0, ip, lsr #1
    1198:	andeq	r1, r1, ip, asr #30
    119c:	andeq	r1, r1, r8, asr #30
    11a0:	ldr	r0, [pc, #56]	; 11e0 <o_strchr@plt+0x174>
    11a4:	ldr	r3, [pc, #56]	; 11e4 <o_strchr@plt+0x178>
    11a8:	add	r0, pc, r0
    11ac:	ldr	r2, [r0]
    11b0:	add	r3, pc, r3
    11b4:	cmp	r2, #0
    11b8:	bne	11c0 <o_strchr@plt+0x154>
    11bc:	b	10e8 <o_strchr@plt+0x7c>
    11c0:	ldr	r2, [pc, #32]	; 11e8 <o_strchr@plt+0x17c>
    11c4:	ldr	r3, [r3, r2]
    11c8:	cmp	r3, #0
    11cc:	beq	11bc <o_strchr@plt+0x150>
    11d0:	push	{r4, lr}
    11d4:	blx	r3
    11d8:	pop	{r4, lr}
    11dc:	b	10e8 <o_strchr@plt+0x7c>
    11e0:	andeq	r1, r1, ip, asr sp
    11e4:	andeq	r1, r1, r8, asr #28
    11e8:	strheq	r0, [r0], -r8
    11ec:	andeq	r0, r0, r0
    11f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11f4:	sub	sp, sp, #268	; 0x10c
    11f8:	mov	r6, r0
    11fc:	mov	r4, r1
    1200:	mov	r8, r2
    1204:	mov	r1, #128	; 0x80
    1208:	mov	r2, #256	; 0x100
    120c:	add	r0, sp, #8
    1210:	mov	r7, r3
    1214:	bl	ff4 <memset@plt>
    1218:	ldr	r1, [pc, #392]	; 13a8 <o_strchr@plt+0x33c>
    121c:	mov	r3, #0
    1220:	add	r1, pc, r1
    1224:	ldrb	r2, [r3, r1]
    1228:	add	r0, sp, #264	; 0x108
    122c:	add	r2, r0, r2
    1230:	strb	r3, [r2, #-256]	; 0xffffff00
    1234:	add	r3, r3, #1
    1238:	cmp	r3, #64	; 0x40
    123c:	bne	1224 <o_strchr@plt+0x1b8>
    1240:	add	r4, r6, r4
    1244:	mov	sl, r6
    1248:	mov	r2, #0
    124c:	strb	r2, [sp, #69]	; 0x45
    1250:	cmp	r4, sl
    1254:	bne	1270 <o_strchr@plt+0x204>
    1258:	cmp	r2, #0
    125c:	bne	128c <o_strchr@plt+0x220>
    1260:	mov	r5, #0
    1264:	mov	r0, r5
    1268:	add	sp, sp, #268	; 0x10c
    126c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1270:	ldrb	r3, [sl], #1
    1274:	add	r1, sp, #264	; 0x108
    1278:	add	r3, r1, r3
    127c:	ldrb	r3, [r3, #-256]	; 0xffffff00
    1280:	cmp	r3, #128	; 0x80
    1284:	addne	r2, r2, #1
    1288:	b	1250 <o_strchr@plt+0x1e4>
    128c:	ands	r4, r2, #3
    1290:	bne	1260 <o_strchr@plt+0x1f4>
    1294:	ldr	fp, [pc, #272]	; 13ac <o_strchr@plt+0x340>
    1298:	mov	r9, r4
    129c:	mov	r5, r4
    12a0:	add	fp, pc, fp
    12a4:	str	r4, [r7]
    12a8:	cmp	sl, r6
    12ac:	beq	1398 <o_strchr@plt+0x32c>
    12b0:	ldrb	r1, [r6], #1
    12b4:	mov	r0, fp
    12b8:	bl	106c <o_strchr@plt>
    12bc:	cmp	r0, #0
    12c0:	bne	12f0 <o_strchr@plt+0x284>
    12c4:	ldrb	r3, [r6, #-1]
    12c8:	cmp	r3, #61	; 0x3d
    12cc:	cmpne	r3, #32
    12d0:	movne	r2, #1
    12d4:	moveq	r2, #0
    12d8:	sub	r3, r3, #9
    12dc:	cmp	r3, #1
    12e0:	movls	r3, #0
    12e4:	andhi	r3, r2, #1
    12e8:	cmp	r3, #0
    12ec:	bne	1260 <o_strchr@plt+0x1f4>
    12f0:	ldrb	r2, [r6, #-1]
    12f4:	add	r3, sp, #264	; 0x108
    12f8:	add	r3, r3, r2
    12fc:	ldrb	r3, [r3, #-256]	; 0xffffff00
    1300:	cmp	r3, #128	; 0x80
    1304:	beq	12a8 <o_strchr@plt+0x23c>
    1308:	cmp	r2, #61	; 0x3d
    130c:	add	r2, sp, #264	; 0x108
    1310:	add	r2, r2, r9
    1314:	add	r9, r9, #1
    1318:	addeq	r5, r5, #1
    131c:	cmp	r9, #4
    1320:	strb	r3, [r2, #-260]	; 0xfffffefc
    1324:	bne	12a8 <o_strchr@plt+0x23c>
    1328:	cmp	r8, #0
    132c:	beq	1364 <o_strchr@plt+0x2f8>
    1330:	ldrb	r0, [sp, #5]
    1334:	ldrb	r2, [sp, #4]
    1338:	ldrb	r1, [sp, #6]
    133c:	add	r8, r8, #3
    1340:	lsr	r3, r0, #4
    1344:	orr	r3, r3, r2, lsl #2
    1348:	strb	r3, [r8, #-3]
    134c:	ldrb	r3, [sp, #7]
    1350:	lsr	r2, r1, #2
    1354:	orr	r2, r2, r0, lsl #4
    1358:	orr	r3, r3, r1, lsl #6
    135c:	strb	r2, [r8, #-2]
    1360:	strb	r3, [r8, #-1]
    1364:	ldr	r2, [r7]
    1368:	cmp	r5, #0
    136c:	add	r3, r2, #3
    1370:	str	r3, [r7]
    1374:	beq	13a0 <o_strchr@plt+0x334>
    1378:	cmp	r5, #1
    137c:	addeq	r2, r2, #2
    1380:	streq	r2, [r7]
    1384:	beq	1264 <o_strchr@plt+0x1f8>
    1388:	cmp	r5, #2
    138c:	addeq	r2, r2, #1
    1390:	streq	r2, [r7]
    1394:	bne	1260 <o_strchr@plt+0x1f4>
    1398:	mov	r5, #1
    139c:	b	1264 <o_strchr@plt+0x1f8>
    13a0:	mov	r9, r4
    13a4:	b	12a8 <o_strchr@plt+0x23c>
    13a8:	andeq	r1, r0, r0, lsr #15
    13ac:	andeq	r1, r0, r0, lsr #14

000013b0 <o_base64_encode@@Base>:
    13b0:	push	{r4, r5, r6, r7, r8, lr}
    13b4:	mov	r7, r1
    13b8:	mov	r5, r0
    13bc:	mov	r1, #3
    13c0:	lsl	r0, r7, #2
    13c4:	mov	r6, r3
    13c8:	mov	r4, r2
    13cc:	bl	27a4 <pointer_list_remove_pointer_free@@Base+0x58>
    13d0:	mov	r1, #72	; 0x48
    13d4:	mov	r8, r0
    13d8:	add	r0, r0, #4
    13dc:	bl	27a4 <pointer_list_remove_pointer_free@@Base+0x58>
    13e0:	add	r8, r8, #5
    13e4:	cmp	r6, #0
    13e8:	cmpne	r5, #0
    13ec:	add	r8, r8, r0
    13f0:	moveq	r0, #1
    13f4:	movne	r0, #0
    13f8:	cmp	r7, r8
    13fc:	movls	r8, r0
    1400:	orrhi	r8, r0, #1
    1404:	cmp	r8, #0
    1408:	bne	1594 <o_base64_encode@@Base+0x1e4>
    140c:	ldr	r2, [pc, #392]	; 159c <o_base64_encode@@Base+0x1ec>
    1410:	add	r7, r5, r7
    1414:	add	r2, pc, r2
    1418:	str	r8, [r6]
    141c:	sub	r1, r7, r5
    1420:	cmp	r1, #2
    1424:	bgt	14d4 <o_base64_encode@@Base+0x124>
    1428:	cmp	r7, r5
    142c:	beq	14c0 <o_base64_encode@@Base+0x110>
    1430:	cmp	r4, #0
    1434:	beq	1450 <o_base64_encode@@Base+0xa0>
    1438:	ldrb	r2, [r5]
    143c:	ldr	r3, [pc, #348]	; 15a0 <o_base64_encode@@Base+0x1f0>
    1440:	add	r4, r4, #1
    1444:	add	r3, pc, r3
    1448:	ldrb	r3, [r3, r2, lsr #2]
    144c:	strb	r3, [r4, #-1]
    1450:	ldr	r3, [r6]
    1454:	cmp	r1, #1
    1458:	add	r3, r3, #1
    145c:	str	r3, [r6]
    1460:	bne	1548 <o_base64_encode@@Base+0x198>
    1464:	cmp	r4, #0
    1468:	beq	1498 <o_base64_encode@@Base+0xe8>
    146c:	ldrb	r3, [r5]
    1470:	ldr	r2, [pc, #300]	; 15a4 <o_base64_encode@@Base+0x1f4>
    1474:	add	r2, pc, r2
    1478:	lsl	r3, r3, #4
    147c:	and	r3, r3, #48	; 0x30
    1480:	ldrb	r2, [r2, r3]
    1484:	mov	r3, r4
    1488:	strb	r2, [r3], #2
    148c:	mov	r2, #61	; 0x3d
    1490:	strb	r2, [r4, #1]
    1494:	mov	r4, r3
    1498:	ldr	r3, [r6]
    149c:	cmp	r4, #0
    14a0:	add	r3, r3, #2
    14a4:	str	r3, [r6]
    14a8:	movne	r3, #61	; 0x3d
    14ac:	strbne	r3, [r4]
    14b0:	ldr	r3, [r6]
    14b4:	addne	r4, r4, #1
    14b8:	add	r3, r3, #1
    14bc:	str	r3, [r6]
    14c0:	cmp	r4, #0
    14c4:	movne	r3, #0
    14c8:	strbne	r3, [r4]
    14cc:	mov	r0, #1
    14d0:	pop	{r4, r5, r6, r7, r8, pc}
    14d4:	cmp	r4, #0
    14d8:	beq	1534 <o_base64_encode@@Base+0x184>
    14dc:	ldrb	r3, [r5]
    14e0:	add	r4, r4, #4
    14e4:	ldrb	r3, [r2, r3, lsr #2]
    14e8:	strb	r3, [r4, #-4]
    14ec:	ldrb	r3, [r5]
    14f0:	ldrb	r1, [r5, #1]
    14f4:	lsl	r3, r3, #4
    14f8:	and	r3, r3, #48	; 0x30
    14fc:	orr	r3, r3, r1, lsr #4
    1500:	ldrb	r3, [r2, r3]
    1504:	strb	r3, [r4, #-3]
    1508:	ldrb	r3, [r5, #1]
    150c:	ldrb	r1, [r5, #2]
    1510:	lsl	r3, r3, #2
    1514:	and	r3, r3, #60	; 0x3c
    1518:	orr	r3, r3, r1, lsr #6
    151c:	ldrb	r3, [r2, r3]
    1520:	strb	r3, [r4, #-2]
    1524:	ldrb	r3, [r5, #2]
    1528:	and	r3, r3, #63	; 0x3f
    152c:	ldrb	r3, [r2, r3]
    1530:	strb	r3, [r4, #-1]
    1534:	ldr	r3, [r6]
    1538:	add	r5, r5, #3
    153c:	add	r3, r3, #4
    1540:	str	r3, [r6]
    1544:	b	141c <o_base64_encode@@Base+0x6c>
    1548:	cmp	r4, #0
    154c:	beq	1498 <o_base64_encode@@Base+0xe8>
    1550:	ldrb	r3, [r5]
    1554:	ldrb	r1, [r5, #1]
    1558:	ldr	r2, [pc, #72]	; 15a8 <o_base64_encode@@Base+0x1f8>
    155c:	lsl	r3, r3, #4
    1560:	and	r3, r3, #48	; 0x30
    1564:	add	r2, pc, r2
    1568:	orr	r3, r3, r1, lsr #4
    156c:	mov	r1, r4
    1570:	ldrb	r3, [r2, r3]
    1574:	strb	r3, [r1], #2
    1578:	ldrb	r3, [r5, #1]
    157c:	lsl	r3, r3, #2
    1580:	and	r3, r3, #60	; 0x3c
    1584:	ldrb	r3, [r2, r3]
    1588:	strb	r3, [r4, #1]
    158c:	mov	r4, r1
    1590:	b	1498 <o_base64_encode@@Base+0xe8>
    1594:	mov	r0, #0
    1598:	pop	{r4, r5, r6, r7, r8, pc}
    159c:	andeq	r1, r0, ip, lsr #11
    15a0:	andeq	r1, r0, ip, ror r5
    15a4:	andeq	r1, r0, ip, asr #10
    15a8:	andeq	r1, r0, ip, asr r4

000015ac <o_base64_decode@@Base>:
    15ac:	cmp	r3, #0
    15b0:	cmpne	r1, #0
    15b4:	moveq	ip, #1
    15b8:	movne	ip, #0
    15bc:	cmp	r0, #0
    15c0:	orreq	ip, ip, #1
    15c4:	cmp	ip, #0
    15c8:	bne	15d0 <o_base64_decode@@Base+0x24>
    15cc:	b	11f0 <o_strchr@plt+0x184>
    15d0:	mov	r0, #0
    15d4:	bx	lr

000015d8 <o_base64url_encode@@Base>:
    15d8:	push	{r4, r5, r6, lr}
    15dc:	subs	r5, r2, #0
    15e0:	vpush	{d8}
    15e4:	mov	r4, r3
    15e8:	beq	1698 <o_base64url_encode@@Base+0xc0>
    15ec:	bl	f34 <o_base64_encode@plt>
    15f0:	cmp	r0, #0
    15f4:	bne	1604 <o_base64url_encode@@Base+0x2c>
    15f8:	mov	r0, #0
    15fc:	vpop	{d8}
    1600:	pop	{r4, r5, r6, pc}
    1604:	ldr	r3, [r4]
    1608:	cmp	r3, #1
    160c:	bls	166c <o_base64url_encode@@Base+0x94>
    1610:	sub	r2, r3, #2
    1614:	ldrb	r1, [r5, r2]
    1618:	cmp	r1, #61	; 0x3d
    161c:	bne	1674 <o_base64url_encode@@Base+0x9c>
    1620:	mov	r3, #0
    1624:	strb	r3, [r5, r2]
    1628:	ldr	r3, [r4]
    162c:	sub	r3, r3, #2
    1630:	str	r3, [r4]
    1634:	mov	r3, r5
    1638:	mov	ip, #95	; 0x5f
    163c:	mov	lr, #45	; 0x2d
    1640:	ldr	r1, [r4]
    1644:	sub	r2, r3, r5
    1648:	cmp	r2, r1
    164c:	bcs	15fc <o_base64url_encode@@Base+0x24>
    1650:	ldrb	r2, [r3], #1
    1654:	cmp	r2, #43	; 0x2b
    1658:	strbeq	lr, [r3, #-1]
    165c:	beq	1640 <o_base64url_encode@@Base+0x68>
    1660:	cmp	r2, #47	; 0x2f
    1664:	strbeq	ip, [r3, #-1]
    1668:	b	1640 <o_base64url_encode@@Base+0x68>
    166c:	cmp	r3, #0
    1670:	beq	15fc <o_base64url_encode@@Base+0x24>
    1674:	sub	r3, r3, #1
    1678:	ldrb	r2, [r5, r3]
    167c:	cmp	r2, #61	; 0x3d
    1680:	bne	1634 <o_base64url_encode@@Base+0x5c>
    1684:	mov	r2, #0
    1688:	strb	r2, [r5, r3]
    168c:	ldr	r3, [r4]
    1690:	sub	r3, r3, #1
    1694:	b	1630 <o_base64url_encode@@Base+0x58>
    1698:	cmp	r1, #0
    169c:	cmpne	r3, #0
    16a0:	beq	15f8 <o_base64url_encode@@Base+0x20>
    16a4:	vmov	s15, r1
    16a8:	vldr	d6, [pc, #56]	; 16e8 <o_base64url_encode@@Base+0x110>
    16ac:	vcvt.f64.u32	d7, s15
    16b0:	vmul.f64	d7, d7, d6
    16b4:	vldr	d6, [pc, #52]	; 16f0 <o_base64url_encode@@Base+0x118>
    16b8:	vdiv.f64	d8, d7, d6
    16bc:	vmov.f64	d0, d8
    16c0:	bl	ef8 <trunc@plt>
    16c4:	mov	r0, #1
    16c8:	vcmp.f64	d8, d0
    16cc:	vmrs	APSR_nzcv, fpscr
    16d0:	vldrne	d8, [pc, #32]	; 16f8 <o_base64url_encode@@Base+0x120>
    16d4:	vaddne.f64	d8, d0, d8
    16d8:	vcvt.u32.f64	s16, d8
    16dc:	vstr	s16, [r4]
    16e0:	b	15fc <o_base64url_encode@@Base+0x24>
    16e4:	nop			; (mov r0, r0)
    16e8:	andeq	r0, r0, r0
    16ec:	andsmi	r0, r0, r0
    16f0:	andeq	r0, r0, r0
    16f4:	andmi	r0, r8, r0
    16f8:	andeq	r0, r0, r0
    16fc:	svccc	0x00f00000	; IMB

00001700 <o_base64url_2_base64@@Base>:
    1700:	cmp	r0, #0
    1704:	bxeq	lr
    1708:	push	{r4, r5, r6, lr}
    170c:	mov	r5, r3
    1710:	mov	r3, r2
    1714:	mov	r4, r1
    1718:	mov	r2, r1
    171c:	mov	r1, r0
    1720:	mov	r0, r3
    1724:	bl	f1c <memcpy@plt>
    1728:	mov	ip, #47	; 0x2f
    172c:	mov	lr, #43	; 0x2b
    1730:	str	r4, [r5]
    1734:	mov	r3, r0
    1738:	mov	r2, r0
    173c:	add	r1, r0, r4
    1740:	cmp	r1, r2
    1744:	bne	1774 <o_base64url_2_base64@@Base+0x74>
    1748:	and	r2, r4, #3
    174c:	cmp	r2, #2
    1750:	bne	1790 <o_base64url_2_base64@@Base+0x90>
    1754:	mov	r2, #61	; 0x3d
    1758:	strb	r2, [r3, r4]
    175c:	strb	r2, [r1, #1]
    1760:	ldr	r3, [r5]
    1764:	add	r3, r3, #2
    1768:	str	r3, [r5]
    176c:	mov	r0, #1
    1770:	pop	{r4, r5, r6, pc}
    1774:	ldrb	r0, [r2], #1
    1778:	cmp	r0, #45	; 0x2d
    177c:	strbeq	lr, [r2, #-1]
    1780:	beq	1740 <o_base64url_2_base64@@Base+0x40>
    1784:	cmp	r0, #95	; 0x5f
    1788:	strbeq	ip, [r2, #-1]
    178c:	b	1740 <o_base64url_2_base64@@Base+0x40>
    1790:	cmp	r2, #3
    1794:	bne	176c <o_base64url_2_base64@@Base+0x6c>
    1798:	mov	r2, #61	; 0x3d
    179c:	strb	r2, [r3, r4]
    17a0:	ldr	r3, [r5]
    17a4:	add	r3, r3, #1
    17a8:	b	1768 <o_base64url_2_base64@@Base+0x68>

000017ac <o_base64url_decode@@Base>:
    17ac:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
    17b0:	subs	r8, r0, #0
    17b4:	bne	17c8 <o_base64url_decode@@Base+0x1c>
    17b8:	mov	r4, #0
    17bc:	mov	r0, r4
    17c0:	add	sp, sp, #8
    17c4:	pop	{r4, r5, r6, r7, r8, pc}
    17c8:	add	r0, r1, #3
    17cc:	mov	r7, r3
    17d0:	mov	r6, r2
    17d4:	mov	r4, r1
    17d8:	bl	fe8 <o_malloc@plt>
    17dc:	subs	r5, r0, #0
    17e0:	beq	17b8 <o_base64url_decode@@Base+0xc>
    17e4:	mov	r1, r4
    17e8:	add	r3, sp, #4
    17ec:	mov	r2, r5
    17f0:	mov	r0, r8
    17f4:	bl	1024 <o_base64url_2_base64@plt>
    17f8:	cmp	r0, #0
    17fc:	moveq	r4, #1
    1800:	beq	181c <o_base64url_decode@@Base+0x70>
    1804:	mov	r3, r7
    1808:	mov	r2, r6
    180c:	ldr	r1, [sp, #4]
    1810:	mov	r0, r5
    1814:	bl	103c <o_base64_decode@plt>
    1818:	mov	r4, r0
    181c:	mov	r0, r5
    1820:	bl	f04 <o_free@plt>
    1824:	b	17bc <o_base64url_decode@@Base+0x10>

00001828 <o_base64_2_base64url@@Base>:
    1828:	cmp	r0, #0
    182c:	bxeq	lr
    1830:	push	{r4, r5, r6, lr}
    1834:	mov	r5, r2
    1838:	mov	r6, r3
    183c:	mov	r4, r1
    1840:	mov	r2, r1
    1844:	mov	r1, r0
    1848:	mov	r0, r5
    184c:	bl	f1c <memcpy@plt>
    1850:	str	r4, [r6]
    1854:	mov	r3, r5
    1858:	add	r4, r5, r4
    185c:	mov	r1, #95	; 0x5f
    1860:	mov	r0, #45	; 0x2d
    1864:	cmp	r4, r3
    1868:	bne	1888 <o_base64_2_base64url@@Base+0x60>
    186c:	ldr	r3, [r6]
    1870:	sub	r3, r3, #1
    1874:	ldrb	r2, [r5, r3]
    1878:	cmp	r2, #61	; 0x3d
    187c:	beq	18a4 <o_base64_2_base64url@@Base+0x7c>
    1880:	mov	r0, #1
    1884:	pop	{r4, r5, r6, pc}
    1888:	ldrb	r2, [r3], #1
    188c:	cmp	r2, #43	; 0x2b
    1890:	strbeq	r0, [r3, #-1]
    1894:	beq	1864 <o_base64_2_base64url@@Base+0x3c>
    1898:	cmp	r2, #47	; 0x2f
    189c:	strbeq	r1, [r3, #-1]
    18a0:	b	1864 <o_base64_2_base64url@@Base+0x3c>
    18a4:	str	r3, [r6]
    18a8:	b	186c <o_base64_2_base64url@@Base+0x44>

000018ac <o_malloc@@Base>:
    18ac:	cmp	r0, #0
    18b0:	bxeq	lr
    18b4:	ldr	r3, [pc, #8]	; 18c4 <o_malloc@@Base+0x18>
    18b8:	add	r3, pc, r3
    18bc:	ldr	r3, [r3]
    18c0:	bx	r3
    18c4:	andeq	r1, r1, r4, lsl #16

000018c8 <o_realloc@@Base>:
    18c8:	subs	r3, r1, #0
    18cc:	beq	18e0 <o_realloc@@Base+0x18>
    18d0:	ldr	r3, [pc, #16]	; 18e8 <o_realloc@@Base+0x20>
    18d4:	add	r3, pc, r3
    18d8:	ldr	r3, [r3, #4]
    18dc:	bx	r3
    18e0:	mov	r0, r3
    18e4:	bx	lr
    18e8:	andeq	r1, r1, r8, ror #15

000018ec <o_free@@Base>:
    18ec:	cmp	r0, #0
    18f0:	bxeq	lr
    18f4:	ldr	r3, [pc, #8]	; 1904 <o_free@@Base+0x18>
    18f8:	add	r3, pc, r3
    18fc:	ldr	r3, [r3, #8]
    1900:	bx	r3
    1904:	andeq	r1, r1, r4, asr #15

00001908 <o_set_alloc_funcs@@Base>:
    1908:	ldr	r3, [pc, #8]	; 1918 <o_set_alloc_funcs@@Base+0x10>
    190c:	add	r3, pc, r3
    1910:	stm	r3, {r0, r1, r2}
    1914:	bx	lr
    1918:			; <UNDEFINED> instruction: 0x000117b0

0000191c <o_get_alloc_funcs@@Base>:
    191c:	cmp	r0, #0
    1920:	ldrne	r3, [pc, #52]	; 195c <o_get_alloc_funcs@@Base+0x40>
    1924:	addne	r3, pc, r3
    1928:	ldrne	r3, [r3]
    192c:	strne	r3, [r0]
    1930:	cmp	r1, #0
    1934:	ldrne	r3, [pc, #36]	; 1960 <o_get_alloc_funcs@@Base+0x44>
    1938:	addne	r3, pc, r3
    193c:	ldrne	r3, [r3, #4]
    1940:	strne	r3, [r1]
    1944:	cmp	r2, #0
    1948:	ldrne	r3, [pc, #20]	; 1964 <o_get_alloc_funcs@@Base+0x48>
    194c:	addne	r3, pc, r3
    1950:	ldrne	r3, [r3, #8]
    1954:	strne	r3, [r2]
    1958:	bx	lr
    195c:	muleq	r1, r8, r7
    1960:	andeq	r1, r1, r4, lsl #15
    1964:	andeq	r1, r1, r0, ror r7

00001968 <msprintf@@Base>:
    1968:	push	{r0, r1, r2, r3}
    196c:	push	{r0, r1, r4, r5, r6, lr}
    1970:	ldr	r4, [sp, #24]
    1974:	cmp	r4, #0
    1978:	moveq	r5, r4
    197c:	beq	19c0 <msprintf@@Base+0x58>
    1980:	mov	r1, #0
    1984:	add	r3, sp, #28
    1988:	mov	r2, r4
    198c:	mov	r0, r1
    1990:	str	r3, [sp]
    1994:	str	r3, [sp, #4]
    1998:	bl	1048 <vsnprintf@plt>
    199c:	add	r6, r0, #1
    19a0:	mov	r0, r6
    19a4:	bl	fe8 <o_malloc@plt>
    19a8:	subs	r5, r0, #0
    19ac:	beq	19c0 <msprintf@@Base+0x58>
    19b0:	ldr	r3, [sp, #4]
    19b4:	mov	r2, r4
    19b8:	mov	r1, r6
    19bc:	bl	1048 <vsnprintf@plt>
    19c0:	mov	r0, r5
    19c4:	add	sp, sp, #8
    19c8:	pop	{r4, r5, r6, lr}
    19cc:	add	sp, sp, #16
    19d0:	bx	lr

000019d4 <mstrcatf@@Base>:
    19d4:	push	{r1, r2, r3}
    19d8:	push	{r0, r1, r4, r5, r6, r7, lr}
    19dc:	ldr	r5, [sp, #28]
    19e0:	cmp	r5, #0
    19e4:	beq	1a5c <mstrcatf@@Base+0x88>
    19e8:	add	r3, sp, #32
    19ec:	cmp	r0, #0
    19f0:	mov	r6, r0
    19f4:	str	r3, [sp]
    19f8:	str	r3, [sp, #4]
    19fc:	mov	r2, r5
    1a00:	beq	1a64 <mstrcatf@@Base+0x90>
    1a04:	mov	r1, #0
    1a08:	mov	r0, r1
    1a0c:	bl	1048 <vsnprintf@plt>
    1a10:	add	r7, r0, #1
    1a14:	mov	r0, r7
    1a18:	bl	fe8 <o_malloc@plt>
    1a1c:	subs	r4, r0, #0
    1a20:	beq	1a90 <mstrcatf@@Base+0xbc>
    1a24:	ldr	r3, [sp, #4]
    1a28:	mov	r2, r5
    1a2c:	mov	r1, r7
    1a30:	bl	1048 <vsnprintf@plt>
    1a34:	ldr	r0, [pc, #104]	; 1aa4 <mstrcatf@@Base+0xd0>
    1a38:	mov	r2, r4
    1a3c:	mov	r1, r6
    1a40:	add	r0, pc, r0
    1a44:	bl	1018 <msprintf@plt>
    1a48:	mov	r5, r0
    1a4c:	mov	r0, r4
    1a50:	bl	f04 <o_free@plt>
    1a54:	mov	r0, r6
    1a58:	bl	f04 <o_free@plt>
    1a5c:	mov	r4, r5
    1a60:	b	1a90 <mstrcatf@@Base+0xbc>
    1a64:	mov	r1, r0
    1a68:	bl	1048 <vsnprintf@plt>
    1a6c:	add	r6, r0, #1
    1a70:	mov	r0, r6
    1a74:	bl	fe8 <o_malloc@plt>
    1a78:	subs	r4, r0, #0
    1a7c:	beq	1a90 <mstrcatf@@Base+0xbc>
    1a80:	ldr	r3, [sp, #4]
    1a84:	mov	r2, r5
    1a88:	mov	r1, r6
    1a8c:	bl	1048 <vsnprintf@plt>
    1a90:	mov	r0, r4
    1a94:	add	sp, sp, #8
    1a98:	pop	{r4, r5, r6, r7, lr}
    1a9c:	add	sp, sp, #12
    1aa0:	bx	lr
    1aa4:	andeq	r0, r0, r3, asr #31

00001aa8 <o_strndup@@Base>:
    1aa8:	push	{r4, r5, r6, lr}
    1aac:	subs	r4, r0, #0
    1ab0:	beq	1ae0 <o_strndup@@Base+0x38>
    1ab4:	add	r0, r1, #1
    1ab8:	mov	r5, r1
    1abc:	bl	fe8 <o_malloc@plt>
    1ac0:	mov	r6, r4
    1ac4:	subs	r4, r0, #0
    1ac8:	beq	1ae0 <o_strndup@@Base+0x38>
    1acc:	mov	r2, r5
    1ad0:	mov	r1, r6
    1ad4:	bl	f1c <memcpy@plt>
    1ad8:	mov	r3, #0
    1adc:	strb	r3, [r4, r5]
    1ae0:	mov	r0, r4
    1ae4:	pop	{r4, r5, r6, pc}

00001ae8 <o_strdup@@Base>:
    1ae8:	push	{r4, lr}
    1aec:	subs	r4, r0, #0
    1af0:	popeq	{r4, pc}
    1af4:	bl	fb8 <strlen@plt>
    1af8:	mov	r1, r0
    1afc:	mov	r0, r4
    1b00:	pop	{r4, lr}
    1b04:	b	eec <o_strndup@plt>

00001b08 <str_replace@@Base>:
    1b08:	cmp	r2, #0
    1b0c:	cmpne	r1, #0
    1b10:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    1b14:	moveq	r8, #1
    1b18:	movne	r8, #0
    1b1c:	cmp	r0, #0
    1b20:	orreq	r8, r8, #1
    1b24:	cmp	r8, #0
    1b28:	beq	1b3c <str_replace@@Base+0x34>
    1b2c:	mov	r9, #0
    1b30:	mov	r0, r9
    1b34:	add	sp, sp, #8
    1b38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    1b3c:	mov	sl, r1
    1b40:	mov	r5, r0
    1b44:	mov	r7, r2
    1b48:	bl	e98 <strstr@plt>
    1b4c:	cmp	r0, #0
    1b50:	bne	1b64 <str_replace@@Base+0x5c>
    1b54:	mov	r0, r5
    1b58:	add	sp, sp, #8
    1b5c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
    1b60:	b	f28 <o_strdup@plt>
    1b64:	sub	r6, r0, r5
    1b68:	add	r9, r6, #1
    1b6c:	mov	r0, r9
    1b70:	bl	fe8 <o_malloc@plt>
    1b74:	subs	r4, r0, #0
    1b78:	beq	1b2c <str_replace@@Base+0x24>
    1b7c:	mov	r2, r6
    1b80:	mov	r1, r5
    1b84:	bl	f1c <memcpy@plt>
    1b88:	strb	r8, [r4, r6]
    1b8c:	mov	r0, r4
    1b90:	bl	fb8 <strlen@plt>
    1b94:	mov	r6, r0
    1b98:	mov	r0, sl
    1b9c:	bl	fb8 <strlen@plt>
    1ba0:	mov	r2, r7
    1ba4:	mov	r1, sl
    1ba8:	add	r0, r6, r0
    1bac:	add	r0, r5, r0
    1bb0:	bl	f94 <str_replace@plt>
    1bb4:	subs	r5, r0, #0
    1bb8:	moveq	r0, r4
    1bbc:	beq	1c28 <str_replace@@Base+0x120>
    1bc0:	mov	r0, r7
    1bc4:	bl	fb8 <strlen@plt>
    1bc8:	mov	r6, r0
    1bcc:	mov	r0, r5
    1bd0:	bl	fb8 <strlen@plt>
    1bd4:	add	r6, r6, r0
    1bd8:	add	r6, r6, r9
    1bdc:	mov	r0, r6
    1be0:	bl	fe8 <o_malloc@plt>
    1be4:	subs	r9, r0, #0
    1be8:	moveq	r0, r4
    1bec:	beq	1c30 <str_replace@@Base+0x128>
    1bf0:	ldr	r2, [pc, #72]	; 1c40 <str_replace@@Base+0x138>
    1bf4:	str	r5, [sp, #4]
    1bf8:	str	r7, [sp]
    1bfc:	mov	r3, r4
    1c00:	add	r2, pc, r2
    1c04:	mov	r1, r6
    1c08:	bl	fdc <snprintf@plt>
    1c0c:	cmp	r0, #0
    1c10:	mov	r0, r4
    1c14:	bge	1c30 <str_replace@@Base+0x128>
    1c18:	bl	f04 <o_free@plt>
    1c1c:	mov	r0, r5
    1c20:	bl	f04 <o_free@plt>
    1c24:	mov	r0, r9
    1c28:	bl	f04 <o_free@plt>
    1c2c:	b	1b2c <str_replace@@Base+0x24>
    1c30:	bl	f04 <o_free@plt>
    1c34:	mov	r0, r5
    1c38:	bl	f04 <o_free@plt>
    1c3c:	b	1b30 <str_replace@@Base+0x28>
    1c40:	andeq	r0, r0, r1, lsl #28

00001c44 <o_strcmp@@Base>:
    1c44:	cmp	r0, #0
    1c48:	cmpeq	r1, #0
    1c4c:	clz	r3, r1
    1c50:	lsr	r3, r3, #5
    1c54:	beq	1c78 <o_strcmp@@Base+0x34>
    1c58:	cmp	r0, #0
    1c5c:	moveq	r3, #0
    1c60:	andne	r3, r3, #1
    1c64:	cmp	r3, #0
    1c68:	bne	1c80 <o_strcmp@@Base+0x3c>
    1c6c:	cmp	r0, #0
    1c70:	beq	1c88 <o_strcmp@@Base+0x44>
    1c74:	b	ed4 <strcmp@plt>
    1c78:	mov	r0, #0
    1c7c:	bx	lr
    1c80:	mvn	r0, #0
    1c84:	bx	lr
    1c88:	mov	r0, #1
    1c8c:	bx	lr

00001c90 <o_strncmp@@Base>:
    1c90:	clz	r3, r1
    1c94:	lsr	r3, r3, #5
    1c98:	cmp	r0, #0
    1c9c:	movne	ip, #0
    1ca0:	andeq	ip, r3, #1
    1ca4:	cmp	r2, #0
    1ca8:	orreq	ip, ip, #1
    1cac:	cmp	ip, #0
    1cb0:	bne	1ce0 <o_strncmp@@Base+0x50>
    1cb4:	cmp	r0, #0
    1cb8:	moveq	r3, #0
    1cbc:	andne	r3, r3, #1
    1cc0:	cmp	r3, #0
    1cc4:	push	{lr}		; (str lr, [sp, #-4]!)
    1cc8:	mov	lr, r0
    1ccc:	bne	1ce8 <o_strncmp@@Base+0x58>
    1cd0:	cmp	r0, #0
    1cd4:	beq	1cf0 <o_strncmp@@Base+0x60>
    1cd8:	pop	{lr}		; (ldr lr, [sp], #4)
    1cdc:	b	1060 <strncmp@plt>
    1ce0:	mov	r0, #0
    1ce4:	bx	lr
    1ce8:	mvn	r0, #0
    1cec:	pop	{pc}		; (ldr pc, [sp], #4)
    1cf0:	mov	r0, #1
    1cf4:	pop	{pc}		; (ldr pc, [sp], #4)

00001cf8 <o_strcpy@@Base>:
    1cf8:	cmp	r1, #0
    1cfc:	cmpne	r0, #0
    1d00:	beq	1d08 <o_strcpy@@Base+0x10>
    1d04:	b	f64 <strcpy@plt>
    1d08:	mov	r0, #0
    1d0c:	bx	lr

00001d10 <o_strncpy@@Base>:
    1d10:	cmp	r1, #0
    1d14:	cmpne	r0, #0
    1d18:	beq	1d20 <o_strncpy@@Base+0x10>
    1d1c:	b	1000 <strncpy@plt>
    1d20:	mov	r0, #0
    1d24:	bx	lr

00001d28 <o_strcasecmp@@Base>:
    1d28:	clz	r3, r0
    1d2c:	clz	r2, r1
    1d30:	lsr	r3, r3, #5
    1d34:	lsr	r2, r2, #5
    1d38:	tst	r3, r2
    1d3c:	bne	1d78 <o_strcasecmp@@Base+0x50>
    1d40:	cmp	r0, #0
    1d44:	moveq	r2, #0
    1d48:	andne	r2, r2, #1
    1d4c:	cmp	r2, #0
    1d50:	push	{lr}		; (str lr, [sp, #-4]!)
    1d54:	mov	lr, r0
    1d58:	bne	1d80 <o_strcasecmp@@Base+0x58>
    1d5c:	cmp	r1, #0
    1d60:	moveq	r3, #0
    1d64:	andne	r3, r3, #1
    1d68:	cmp	r3, #0
    1d6c:	bne	1d88 <o_strcasecmp@@Base+0x60>
    1d70:	pop	{lr}		; (ldr lr, [sp], #4)
    1d74:	b	f40 <strcasecmp@plt>
    1d78:	mov	r0, #0
    1d7c:	bx	lr
    1d80:	mvn	r0, #0
    1d84:	pop	{pc}		; (ldr pc, [sp], #4)
    1d88:	mov	r0, #1
    1d8c:	pop	{pc}		; (ldr pc, [sp], #4)

00001d90 <o_strncasecmp@@Base>:
    1d90:	clz	r3, r0
    1d94:	clz	ip, r1
    1d98:	lsr	r3, r3, #5
    1d9c:	lsr	ip, ip, #5
    1da0:	push	{r4, r5, lr}
    1da4:	and	lr, r3, ip
    1da8:	cmp	r2, #0
    1dac:	orreq	lr, lr, #1
    1db0:	cmp	lr, #0
    1db4:	bne	1df0 <o_strncasecmp@@Base+0x60>
    1db8:	cmp	r0, #0
    1dbc:	moveq	ip, #0
    1dc0:	andne	ip, ip, #1
    1dc4:	cmp	ip, #0
    1dc8:	mov	r5, r0
    1dcc:	bne	1df8 <o_strncasecmp@@Base+0x68>
    1dd0:	cmp	r1, #0
    1dd4:	moveq	r3, #0
    1dd8:	andne	r3, r3, #1
    1ddc:	cmp	r3, #0
    1de0:	mov	r4, r1
    1de4:	bne	1e00 <o_strncasecmp@@Base+0x70>
    1de8:	pop	{r4, r5, lr}
    1dec:	b	fd0 <strncasecmp@plt>
    1df0:	mov	r0, #0
    1df4:	pop	{r4, r5, pc}
    1df8:	mvn	r0, #0
    1dfc:	pop	{r4, r5, pc}
    1e00:	mov	r0, #1
    1e04:	pop	{r4, r5, pc}

00001e08 <o_strstr@@Base>:
    1e08:	cmp	r1, #0
    1e0c:	cmpne	r0, #0
    1e10:	beq	1e18 <o_strstr@@Base+0x10>
    1e14:	b	e98 <strstr@plt>
    1e18:	mov	r0, #0
    1e1c:	bx	lr

00001e20 <o_strchr@@Base>:
    1e20:	cmp	r0, #0
    1e24:	bxeq	lr
    1e28:	b	fc4 <strchr@plt>

00001e2c <o_strrchr@@Base>:
    1e2c:	cmp	r0, #0
    1e30:	bxeq	lr
    1e34:	b	1030 <strrchr@plt>

00001e38 <o_strnstr@@Base>:
    1e38:	cmp	r1, #0
    1e3c:	cmpne	r0, #0
    1e40:	beq	1eb8 <o_strnstr@@Base+0x80>
    1e44:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    1e48:	mov	r5, r0
    1e4c:	mov	r0, r1
    1e50:	mov	r6, r2
    1e54:	mov	r9, r1
    1e58:	bl	fb8 <strlen@plt>
    1e5c:	subs	r8, r0, #0
    1e60:	movne	r7, r5
    1e64:	subne	r6, r6, r8
    1e68:	bne	1ea0 <o_strnstr@@Base+0x68>
    1e6c:	mov	r0, r5
    1e70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    1e74:	ldrb	r2, [r4]
    1e78:	ldrb	r3, [r9]
    1e7c:	add	r7, r7, #1
    1e80:	cmp	r2, r3
    1e84:	bne	1ea0 <o_strnstr@@Base+0x68>
    1e88:	mov	r2, r8
    1e8c:	mov	r1, r9
    1e90:	mov	r0, r4
    1e94:	bl	1060 <strncmp@plt>
    1e98:	cmp	r0, #0
    1e9c:	beq	1ec0 <o_strnstr@@Base+0x88>
    1ea0:	sub	r3, r7, r5
    1ea4:	cmp	r3, r6
    1ea8:	mov	r4, r7
    1eac:	ble	1e74 <o_strnstr@@Base+0x3c>
    1eb0:	mov	r0, #0
    1eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    1eb8:	mov	r0, #0
    1ebc:	bx	lr
    1ec0:	mov	r0, r4
    1ec4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00001ec8 <o_strcasestr@@Base>:
    1ec8:	cmp	r1, #0
    1ecc:	cmpne	r0, #0
    1ed0:	beq	1ed8 <o_strcasestr@@Base+0x10>
    1ed4:	b	ec8 <strcasestr@plt>
    1ed8:	mov	r0, #0
    1edc:	bx	lr

00001ee0 <o_strlen@@Base>:
    1ee0:	cmp	r0, #0
    1ee4:	bxeq	lr
    1ee8:	b	fb8 <strlen@plt>

00001eec <o_strnchr@@Base>:
    1eec:	cmp	r0, #0
    1ef0:	cmpne	r1, #0
    1ef4:	bne	1f00 <o_strnchr@@Base+0x14>
    1ef8:	mov	r0, #0
    1efc:	bx	lr
    1f00:	push	{r4, r5, r6, r7, r8, lr}
    1f04:	mov	r4, r0
    1f08:	mov	r7, r2
    1f0c:	add	r5, r0, r1
    1f10:	mov	r6, r0
    1f14:	cmp	r6, r5
    1f18:	sub	r8, r6, r4
    1f1c:	beq	1f30 <o_strnchr@@Base+0x44>
    1f20:	mov	r0, r4
    1f24:	bl	f70 <o_strlen@plt>
    1f28:	cmp	r0, r8
    1f2c:	bhi	1f38 <o_strnchr@@Base+0x4c>
    1f30:	mov	r0, #0
    1f34:	pop	{r4, r5, r6, r7, r8, pc}
    1f38:	mov	r0, r6
    1f3c:	add	r6, r6, #1
    1f40:	ldrb	r3, [r0]
    1f44:	cmp	r3, r7
    1f48:	bne	1f14 <o_strnchr@@Base+0x28>
    1f4c:	pop	{r4, r5, r6, r7, r8, pc}

00001f50 <o_strrnchr@@Base>:
    1f50:	cmp	r0, #0
    1f54:	cmpne	r1, #0
    1f58:	bne	1f64 <o_strrnchr@@Base+0x14>
    1f5c:	mov	r0, #0
    1f60:	bx	lr
    1f64:	push	{r4, r5, r6, r7, r8, lr}
    1f68:	mov	r6, r0
    1f6c:	mov	r7, r1
    1f70:	mov	r8, r2
    1f74:	bl	f70 <o_strlen@plt>
    1f78:	sub	r5, r0, #1
    1f7c:	add	r5, r6, r5
    1f80:	rsb	r4, r0, #0
    1f84:	sub	r3, r5, r6
    1f88:	cmp	r3, #0
    1f8c:	blt	1fa4 <o_strrnchr@@Base+0x54>
    1f90:	mov	r0, r6
    1f94:	bl	f70 <o_strlen@plt>
    1f98:	add	r0, r0, r4
    1f9c:	cmp	r7, r0
    1fa0:	bhi	1fac <o_strrnchr@@Base+0x5c>
    1fa4:	mov	r0, #0
    1fa8:	pop	{r4, r5, r6, r7, r8, pc}
    1fac:	mov	r0, r5
    1fb0:	add	r4, r4, #1
    1fb4:	ldrb	r3, [r0]
    1fb8:	sub	r5, r5, #1
    1fbc:	cmp	r3, r8
    1fc0:	bne	1f84 <o_strrnchr@@Base+0x34>
    1fc4:	pop	{r4, r5, r6, r7, r8, pc}

00001fc8 <split_string@@Base>:
    1fc8:	cmp	r0, #0
    1fcc:	cmpne	r1, #0
    1fd0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1fd4:	movne	r4, #1
    1fd8:	moveq	r4, #0
    1fdc:	beq	2058 <split_string@@Base+0x90>
    1fe0:	cmp	r2, #0
    1fe4:	movne	r3, #0
    1fe8:	strne	r3, [r2]
    1fec:	mov	r5, r2
    1ff0:	mov	r6, r0
    1ff4:	mov	r8, r1
    1ff8:	bl	e98 <strstr@plt>
    1ffc:	mov	r4, #1
    2000:	mov	r9, #0
    2004:	mov	r7, r0
    2008:	cmp	r7, #0
    200c:	bne	2064 <split_string@@Base+0x9c>
    2010:	cmp	r5, #0
    2014:	beq	2058 <split_string@@Base+0x90>
    2018:	add	r8, r4, #1
    201c:	ldr	r0, [r5]
    2020:	lsl	r8, r8, #2
    2024:	mov	r1, r8
    2028:	bl	f88 <o_realloc@plt>
    202c:	cmp	r0, #0
    2030:	mov	r9, r0
    2034:	str	r0, [r5]
    2038:	beq	2058 <split_string@@Base+0x90>
    203c:	mov	r0, r6
    2040:	bl	f28 <o_strdup@plt>
    2044:	ldr	r3, [r5]
    2048:	sub	sl, r8, #8
    204c:	add	r8, r3, r8
    2050:	str	r0, [r9, sl]
    2054:	str	r7, [r8, #-4]
    2058:	mov	r0, r4
    205c:	add	sp, sp, #12
    2060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2064:	cmp	r5, #0
    2068:	add	r4, r4, #1
    206c:	beq	20b8 <split_string@@Base+0xf0>
    2070:	lsl	sl, r4, #2
    2074:	mov	r1, sl
    2078:	ldr	r0, [r5]
    207c:	bl	f88 <o_realloc@plt>
    2080:	cmp	r0, #0
    2084:	mov	fp, r0
    2088:	str	r0, [r5]
    208c:	beq	20b8 <split_string@@Base+0xf0>
    2090:	sub	r3, sl, #8
    2094:	sub	r1, r7, r6
    2098:	mov	r0, r6
    209c:	str	r3, [sp, #4]
    20a0:	bl	eec <o_strndup@plt>
    20a4:	ldr	r1, [r5]
    20a8:	ldr	r3, [sp, #4]
    20ac:	add	r1, r1, sl
    20b0:	str	r0, [fp, r3]
    20b4:	str	r9, [r1, #-4]
    20b8:	mov	r0, r8
    20bc:	bl	fb8 <strlen@plt>
    20c0:	mov	r1, r8
    20c4:	add	r6, r7, r0
    20c8:	mov	r0, r6
    20cc:	bl	e98 <strstr@plt>
    20d0:	mov	r7, r0
    20d4:	b	2008 <split_string@@Base+0x40>

000020d8 <free_string_array@@Base>:
    20d8:	push	{r4, r5, r6, lr}
    20dc:	subs	r4, r0, #0
    20e0:	subne	r5, r4, #4
    20e4:	movne	r6, #0
    20e8:	bne	20f8 <free_string_array@@Base+0x20>
    20ec:	pop	{r4, r5, r6, pc}
    20f0:	bl	f04 <o_free@plt>
    20f4:	str	r6, [r5, #4]!
    20f8:	ldr	r0, [r5, #4]
    20fc:	cmp	r0, #0
    2100:	bne	20f0 <free_string_array@@Base+0x18>
    2104:	mov	r0, r4
    2108:	pop	{r4, r5, r6, lr}
    210c:	b	f04 <o_free@plt>

00002110 <string_array_size@@Base>:
    2110:	subs	r3, r0, #0
    2114:	movne	r0, #0
    2118:	bne	2128 <string_array_size@@Base+0x18>
    211c:	mov	r0, r3
    2120:	bx	lr
    2124:	add	r0, r0, #1
    2128:	ldr	r2, [r3, r0, lsl #2]
    212c:	cmp	r2, #0
    2130:	bne	2124 <string_array_size@@Base+0x14>
    2134:	bx	lr

00002138 <string_array_join@@Base>:
    2138:	cmp	r0, #0
    213c:	cmpne	r1, #0
    2140:	push	{r4, r5, r6, r7, r8, lr}
    2144:	movne	r4, #1
    2148:	moveq	r4, #0
    214c:	beq	2170 <string_array_join@@Base+0x38>
    2150:	ldr	r7, [pc, #92]	; 21b4 <string_array_join@@Base+0x7c>
    2154:	mov	r6, r1
    2158:	sub	r5, r0, #4
    215c:	mov	r4, #0
    2160:	add	r7, pc, r7
    2164:	ldr	r3, [r5, #4]!
    2168:	cmp	r3, #0
    216c:	bne	2178 <string_array_join@@Base+0x40>
    2170:	mov	r0, r4
    2174:	pop	{r4, r5, r6, r7, r8, pc}
    2178:	cmp	r4, #0
    217c:	bne	2190 <string_array_join@@Base+0x58>
    2180:	mov	r0, r3
    2184:	bl	f28 <o_strdup@plt>
    2188:	mov	r4, r0
    218c:	b	2164 <string_array_join@@Base+0x2c>
    2190:	mov	r1, r4
    2194:	mov	r2, r6
    2198:	mov	r0, r7
    219c:	bl	1018 <msprintf@plt>
    21a0:	mov	r8, r0
    21a4:	mov	r0, r4
    21a8:	bl	f04 <o_free@plt>
    21ac:	mov	r4, r8
    21b0:	b	2164 <string_array_join@@Base+0x2c>
    21b4:	andeq	r0, r0, r1, lsr #17

000021b8 <trimwhitespace@@Base>:
    21b8:	push	{r4, r5, r6, lr}
    21bc:	subs	r4, r0, #0
    21c0:	beq	2220 <trimwhitespace@@Base+0x68>
    21c4:	ldrb	r3, [r4]
    21c8:	cmp	r3, #0
    21cc:	beq	2220 <trimwhitespace@@Base+0x68>
    21d0:	bl	fac <__ctype_b_loc@plt>
    21d4:	mov	r2, r4
    21d8:	ldr	r1, [r0]
    21dc:	mov	r5, r0
    21e0:	mov	r4, r2
    21e4:	add	r2, r2, #1
    21e8:	ldrb	r3, [r4]
    21ec:	lsl	r3, r3, #1
    21f0:	ldrh	r3, [r1, r3]
    21f4:	tst	r3, #8192	; 0x2000
    21f8:	bne	21e0 <trimwhitespace@@Base+0x28>
    21fc:	mov	r0, r4
    2200:	bl	f70 <o_strlen@plt>
    2204:	sub	r0, r0, #1
    2208:	add	r0, r4, r0
    220c:	cmp	r4, r0
    2210:	mov	r2, r0
    2214:	bcc	2228 <trimwhitespace@@Base+0x70>
    2218:	mov	r3, #0
    221c:	strb	r3, [r2, #1]
    2220:	mov	r0, r4
    2224:	pop	{r4, r5, r6, pc}
    2228:	ldrb	r3, [r2]
    222c:	ldr	r1, [r5]
    2230:	sub	r0, r0, #1
    2234:	lsl	r3, r3, #1
    2238:	ldrh	r3, [r1, r3]
    223c:	tst	r3, #8192	; 0x2000
    2240:	bne	220c <trimwhitespace@@Base+0x54>
    2244:	b	2218 <trimwhitespace@@Base+0x60>

00002248 <trimcharacter@@Base>:
    2248:	push	{r4, r5, r6, lr}
    224c:	subs	r4, r0, #0
    2250:	beq	22a0 <trimcharacter@@Base+0x58>
    2254:	ldrb	r3, [r4]
    2258:	cmp	r3, #0
    225c:	beq	22a0 <trimcharacter@@Base+0x58>
    2260:	mov	r5, r1
    2264:	mov	r3, r4
    2268:	mov	r4, r3
    226c:	add	r3, r3, #1
    2270:	ldrb	r2, [r4]
    2274:	cmp	r2, r5
    2278:	beq	2268 <trimcharacter@@Base+0x20>
    227c:	mov	r0, r4
    2280:	bl	f70 <o_strlen@plt>
    2284:	sub	r0, r0, #1
    2288:	add	r0, r4, r0
    228c:	cmp	r4, r0
    2290:	mov	r3, r0
    2294:	bcc	22a8 <trimcharacter@@Base+0x60>
    2298:	mov	r2, #0
    229c:	strb	r2, [r3, #1]
    22a0:	mov	r0, r4
    22a4:	pop	{r4, r5, r6, pc}
    22a8:	ldrb	r2, [r3]
    22ac:	sub	r0, r0, #1
    22b0:	cmp	r2, r5
    22b4:	beq	228c <trimcharacter@@Base+0x44>
    22b8:	b	2298 <trimcharacter@@Base+0x50>

000022bc <string_array_has_value@@Base>:
    22bc:	cmp	r0, #0
    22c0:	cmpne	r1, #0
    22c4:	bne	22d0 <string_array_has_value@@Base+0x14>
    22c8:	mov	r0, #0
    22cc:	bx	lr
    22d0:	push	{r4, r5, r6, lr}
    22d4:	mov	r5, r1
    22d8:	sub	r4, r0, #4
    22dc:	ldr	r0, [r4, #4]!
    22e0:	cmp	r0, #0
    22e4:	bne	22f0 <string_array_has_value@@Base+0x34>
    22e8:	mov	r0, #0
    22ec:	pop	{r4, r5, r6, pc}
    22f0:	mov	r1, r5
    22f4:	bl	f4c <o_strcmp@plt>
    22f8:	cmp	r0, #0
    22fc:	bne	22dc <string_array_has_value@@Base+0x20>
    2300:	mov	r0, #1
    2304:	pop	{r4, r5, r6, pc}

00002308 <string_array_has_value_case@@Base>:
    2308:	cmp	r0, #0
    230c:	cmpne	r1, #0
    2310:	bne	231c <string_array_has_value_case@@Base+0x14>
    2314:	mov	r0, #0
    2318:	bx	lr
    231c:	push	{r4, r5, r6, lr}
    2320:	mov	r5, r1
    2324:	sub	r4, r0, #4
    2328:	ldr	r0, [r4, #4]!
    232c:	cmp	r0, #0
    2330:	bne	233c <string_array_has_value_case@@Base+0x34>
    2334:	mov	r0, #0
    2338:	pop	{r4, r5, r6, pc}
    233c:	mov	r1, r5
    2340:	bl	f7c <o_strcasecmp@plt>
    2344:	cmp	r0, #0
    2348:	bne	2328 <string_array_has_value_case@@Base+0x20>
    234c:	mov	r0, #1
    2350:	pop	{r4, r5, r6, pc}

00002354 <string_array_has_value_n@@Base>:
    2354:	cmp	r0, #0
    2358:	cmpne	r1, #0
    235c:	bne	2368 <string_array_has_value_n@@Base+0x14>
    2360:	mov	r0, #0
    2364:	bx	lr
    2368:	push	{r4, r5, r6, lr}
    236c:	mov	r5, r1
    2370:	mov	r6, r2
    2374:	sub	r4, r0, #4
    2378:	ldr	r0, [r4, #4]!
    237c:	cmp	r0, #0
    2380:	bne	238c <string_array_has_value_n@@Base+0x38>
    2384:	mov	r0, #0
    2388:	pop	{r4, r5, r6, pc}
    238c:	mov	r2, r6
    2390:	mov	r1, r5
    2394:	bl	1054 <o_strncmp@plt>
    2398:	cmp	r0, #0
    239c:	bne	2378 <string_array_has_value_n@@Base+0x24>
    23a0:	mov	r0, #1
    23a4:	pop	{r4, r5, r6, pc}

000023a8 <string_array_has_value_ncase@@Base>:
    23a8:	cmp	r0, #0
    23ac:	cmpne	r1, #0
    23b0:	bne	23bc <string_array_has_value_ncase@@Base+0x14>
    23b4:	mov	r0, #0
    23b8:	bx	lr
    23bc:	push	{r4, r5, r6, lr}
    23c0:	mov	r5, r1
    23c4:	mov	r6, r2
    23c8:	sub	r4, r0, #4
    23cc:	ldr	r0, [r4, #4]!
    23d0:	cmp	r0, #0
    23d4:	bne	23e0 <string_array_has_value_ncase@@Base+0x38>
    23d8:	mov	r0, #0
    23dc:	pop	{r4, r5, r6, pc}
    23e0:	mov	r2, r6
    23e4:	mov	r1, r5
    23e8:	bl	ebc <o_strncasecmp@plt>
    23ec:	cmp	r0, #0
    23f0:	bne	23cc <string_array_has_value_ncase@@Base+0x24>
    23f4:	mov	r0, #1
    23f8:	pop	{r4, r5, r6, pc}

000023fc <string_array_has_trimmed_value@@Base>:
    23fc:	cmp	r0, #0
    2400:	cmpne	r1, #0
    2404:	push	{r4, r5, r6, r7, r8, lr}
    2408:	movne	r4, #1
    240c:	moveq	r4, #0
    2410:	beq	2434 <string_array_has_trimmed_value@@Base+0x38>
    2414:	mov	r5, r0
    2418:	mov	r0, r1
    241c:	bl	f28 <o_strdup@plt>
    2420:	subs	r6, r0, #0
    2424:	bne	243c <string_array_has_trimmed_value@@Base+0x40>
    2428:	mov	r4, #0
    242c:	mov	r0, r6
    2430:	bl	f04 <o_free@plt>
    2434:	mov	r0, r4
    2438:	pop	{r4, r5, r6, r7, r8, pc}
    243c:	bl	f58 <trimwhitespace@plt>
    2440:	sub	r5, r5, #4
    2444:	mov	r4, #0
    2448:	mov	r7, r0
    244c:	ldr	r0, [r5, #4]!
    2450:	cmp	r0, #0
    2454:	beq	242c <string_array_has_trimmed_value@@Base+0x30>
    2458:	cmp	r4, #0
    245c:	bne	242c <string_array_has_trimmed_value@@Base+0x30>
    2460:	bl	f28 <o_strdup@plt>
    2464:	subs	r8, r0, #0
    2468:	beq	2428 <string_array_has_trimmed_value@@Base+0x2c>
    246c:	bl	f58 <trimwhitespace@plt>
    2470:	mov	r1, r7
    2474:	bl	f4c <o_strcmp@plt>
    2478:	mov	r4, r0
    247c:	mov	r0, r8
    2480:	clz	r4, r4
    2484:	bl	f04 <o_free@plt>
    2488:	lsr	r4, r4, #5
    248c:	b	244c <string_array_has_trimmed_value@@Base+0x50>

00002490 <pointer_list_init@@Base>:
    2490:	cmp	r0, #0
    2494:	movne	r3, #0
    2498:	strne	r3, [r0]
    249c:	strne	r3, [r0, #4]
    24a0:	bx	lr

000024a4 <pointer_list_size@@Base>:
    24a4:	cmp	r0, #0
    24a8:	ldrne	r0, [r0]
    24ac:	bx	lr

000024b0 <pointer_list_append@@Base>:
    24b0:	cmp	r0, #0
    24b4:	bxeq	lr
    24b8:	push	{r4, r5, r6, lr}
    24bc:	mov	r6, r1
    24c0:	ldr	r1, [r0]
    24c4:	mov	r5, r0
    24c8:	add	r1, r1, #1
    24cc:	ldr	r0, [r0, #4]
    24d0:	lsl	r1, r1, #2
    24d4:	bl	f88 <o_realloc@plt>
    24d8:	cmp	r0, #0
    24dc:	mov	r4, r0
    24e0:	str	r0, [r5, #4]
    24e4:	beq	2500 <pointer_list_append@@Base+0x50>
    24e8:	ldr	r3, [r5]
    24ec:	str	r6, [r0, r3, lsl #2]
    24f0:	add	r3, r3, #1
    24f4:	str	r3, [r5]
    24f8:	mov	r0, #1
    24fc:	pop	{r4, r5, r6, pc}
    2500:	bl	f04 <o_free@plt>
    2504:	str	r4, [r5, #4]
    2508:	mov	r0, r4
    250c:	pop	{r4, r5, r6, pc}

00002510 <pointer_list_get_at@@Base>:
    2510:	cmp	r0, #0
    2514:	bxeq	lr
    2518:	ldr	r3, [r0]
    251c:	cmp	r3, r1
    2520:	ldrhi	r3, [r0, #4]
    2524:	ldrhi	r0, [r3, r1, lsl #2]
    2528:	movls	r0, #0
    252c:	bx	lr

00002530 <pointer_list_remove_at@@Base>:
    2530:	push	{r4, r5, r6, lr}
    2534:	subs	r4, r0, #0
    2538:	beq	2550 <pointer_list_remove_at@@Base+0x20>
    253c:	ldr	r3, [r4]
    2540:	cmp	r3, r1
    2544:	lslhi	r2, r1, #2
    2548:	subhi	lr, r3, #1
    254c:	bhi	256c <pointer_list_remove_at@@Base+0x3c>
    2550:	mov	r0, #0
    2554:	pop	{r4, r5, r6, pc}
    2558:	ldr	ip, [r4, #4]
    255c:	add	r1, r1, #1
    2560:	ldr	r5, [ip, r0]
    2564:	str	r5, [ip, r2]
    2568:	mov	r2, r0
    256c:	cmp	r1, lr
    2570:	add	r0, r2, #4
    2574:	bcc	2558 <pointer_list_remove_at@@Base+0x28>
    2578:	cmp	r3, #1
    257c:	bls	25a8 <pointer_list_remove_at@@Base+0x78>
    2580:	sub	r1, r3, #-1073741823	; 0xc0000001
    2584:	ldr	r0, [r4, #4]
    2588:	lsl	r1, r1, #2
    258c:	bl	f88 <o_realloc@plt>
    2590:	str	r0, [r4, #4]
    2594:	ldr	r3, [r4]
    2598:	mov	r0, #1
    259c:	sub	r3, r3, #1
    25a0:	str	r3, [r4]
    25a4:	pop	{r4, r5, r6, pc}
    25a8:	ldr	r0, [r4, #4]
    25ac:	bl	f04 <o_free@plt>
    25b0:	mov	r3, #0
    25b4:	str	r3, [r4, #4]
    25b8:	b	2594 <pointer_list_remove_at@@Base+0x64>

000025bc <pointer_list_clean@@Base>:
    25bc:	push	{r4, r5, r6, lr}
    25c0:	subs	r5, r0, #0
    25c4:	popeq	{r4, r5, r6, pc}
    25c8:	bl	100c <pointer_list_size@plt>
    25cc:	mov	r4, r0
    25d0:	cmp	r4, #0
    25d4:	bne	25dc <pointer_list_clean@@Base+0x20>
    25d8:	pop	{r4, r5, r6, pc}
    25dc:	sub	r4, r4, #1
    25e0:	mov	r1, r4
    25e4:	mov	r0, r5
    25e8:	bl	f10 <pointer_list_remove_at@plt>
    25ec:	b	25d0 <pointer_list_clean@@Base+0x14>

000025f0 <pointer_list_clean_free@@Base>:
    25f0:	push	{r4, r5, r6, lr}
    25f4:	subs	r5, r0, #0
    25f8:	popeq	{r4, r5, r6, pc}
    25fc:	mov	r6, r1
    2600:	bl	100c <pointer_list_size@plt>
    2604:	mov	r4, r0
    2608:	cmp	r4, #0
    260c:	bne	2614 <pointer_list_clean_free@@Base+0x24>
    2610:	pop	{r4, r5, r6, pc}
    2614:	sub	r4, r4, #1
    2618:	mov	r1, r4
    261c:	mov	r0, r5
    2620:	bl	eb0 <pointer_list_get_at@plt>
    2624:	blx	r6
    2628:	mov	r1, r4
    262c:	mov	r0, r5
    2630:	bl	f10 <pointer_list_remove_at@plt>
    2634:	b	2608 <pointer_list_clean_free@@Base+0x18>

00002638 <pointer_list_remove_at_free@@Base>:
    2638:	subs	r3, r0, #0
    263c:	beq	2674 <pointer_list_remove_at_free@@Base+0x3c>
    2640:	push	{r4, r5, r6, lr}
    2644:	mov	r5, r1
    2648:	ldr	lr, [r3]
    264c:	cmp	lr, r1
    2650:	bls	267c <pointer_list_remove_at_free@@Base+0x44>
    2654:	mov	r4, r3
    2658:	mov	r6, r2
    265c:	bl	eb0 <pointer_list_get_at@plt>
    2660:	blx	r6
    2664:	mov	r1, r5
    2668:	mov	r0, r4
    266c:	pop	{r4, r5, r6, lr}
    2670:	b	f10 <pointer_list_remove_at@plt>
    2674:	mov	r0, r3
    2678:	bx	lr
    267c:	mov	r0, #0
    2680:	pop	{r4, r5, r6, pc}

00002684 <pointer_list_insert_at@@Base>:
    2684:	push	{r4, r5, r6, lr}
    2688:	subs	r4, r0, #0
    268c:	bne	2698 <pointer_list_insert_at@@Base+0x14>
    2690:	mov	r0, #0
    2694:	pop	{r4, r5, r6, pc}
    2698:	ldr	r3, [r4]
    269c:	cmp	r3, r2
    26a0:	bcc	2690 <pointer_list_insert_at@@Base+0xc>
    26a4:	add	r3, r3, #1
    26a8:	mov	r6, r1
    26ac:	ldr	r0, [r4, #4]
    26b0:	lsl	r1, r3, #2
    26b4:	mov	r5, r2
    26b8:	bl	f88 <o_realloc@plt>
    26bc:	cmp	r0, #0
    26c0:	str	r0, [r4, #4]
    26c4:	ldrne	r3, [r4]
    26c8:	movne	r1, r3
    26cc:	lslne	r2, r3, #2
    26d0:	beq	2690 <pointer_list_insert_at@@Base+0xc>
    26d4:	cmp	r1, r5
    26d8:	ldr	r0, [r4, #4]
    26dc:	bhi	26f4 <pointer_list_insert_at@@Base+0x70>
    26e0:	add	r3, r3, #1
    26e4:	str	r6, [r0, r5, lsl #2]
    26e8:	str	r3, [r4]
    26ec:	mov	r0, #1
    26f0:	pop	{r4, r5, r6, pc}
    26f4:	add	ip, r0, r2
    26f8:	sub	r1, r1, #1
    26fc:	ldr	ip, [ip, #-4]
    2700:	str	ip, [r0, r2]
    2704:	sub	r2, r2, #4
    2708:	b	26d4 <pointer_list_insert_at@@Base+0x50>

0000270c <pointer_list_remove_pointer@@Base>:
    270c:	cmp	r0, #0
    2710:	movne	r3, #0
    2714:	ldrne	r2, [r0]
    2718:	bne	273c <pointer_list_remove_pointer@@Base+0x30>
    271c:	bx	lr
    2720:	ldr	ip, [r0, #4]
    2724:	ldr	ip, [ip, r3, lsl #2]
    2728:	cmp	ip, r1
    272c:	bne	2738 <pointer_list_remove_pointer@@Base+0x2c>
    2730:	mov	r1, r3
    2734:	b	f10 <pointer_list_remove_at@plt>
    2738:	add	r3, r3, #1
    273c:	cmp	r3, r2
    2740:	bne	2720 <pointer_list_remove_pointer@@Base+0x14>
    2744:	mov	r0, #0
    2748:	bx	lr

0000274c <pointer_list_remove_pointer_free@@Base>:
    274c:	cmp	r0, #0
    2750:	bxeq	lr
    2754:	ldr	r3, [r0]
    2758:	push	{r4, r5, r6, lr}
    275c:	mov	r5, #0
    2760:	cmp	r5, r3
    2764:	bne	2770 <pointer_list_remove_pointer_free@@Base+0x24>
    2768:	mov	r0, #0
    276c:	pop	{r4, r5, r6, pc}
    2770:	ldr	ip, [r0, #4]
    2774:	ldr	ip, [ip, r5, lsl #2]
    2778:	cmp	ip, r1
    277c:	bne	279c <pointer_list_remove_pointer_free@@Base+0x50>
    2780:	mov	r4, r0
    2784:	mov	r0, r1
    2788:	blx	r2
    278c:	mov	r1, r5
    2790:	mov	r0, r4
    2794:	pop	{r4, r5, r6, lr}
    2798:	b	f10 <pointer_list_remove_at@plt>
    279c:	add	r5, r5, #1
    27a0:	b	2760 <pointer_list_remove_pointer_free@@Base+0x14>
    27a4:	subs	r2, r1, #1
    27a8:	bxeq	lr
    27ac:	bcc	2984 <pointer_list_remove_pointer_free@@Base+0x238>
    27b0:	cmp	r0, r1
    27b4:	bls	2968 <pointer_list_remove_pointer_free@@Base+0x21c>
    27b8:	tst	r1, r2
    27bc:	beq	2974 <pointer_list_remove_pointer_free@@Base+0x228>
    27c0:	clz	r3, r0
    27c4:	clz	r2, r1
    27c8:	sub	r3, r2, r3
    27cc:	rsbs	r3, r3, #31
    27d0:	addne	r3, r3, r3, lsl #1
    27d4:	mov	r2, #0
    27d8:	addne	pc, pc, r3, lsl #2
    27dc:	nop			; (mov r0, r0)
    27e0:	cmp	r0, r1, lsl #31
    27e4:	adc	r2, r2, r2
    27e8:	subcs	r0, r0, r1, lsl #31
    27ec:	cmp	r0, r1, lsl #30
    27f0:	adc	r2, r2, r2
    27f4:	subcs	r0, r0, r1, lsl #30
    27f8:	cmp	r0, r1, lsl #29
    27fc:	adc	r2, r2, r2
    2800:	subcs	r0, r0, r1, lsl #29
    2804:	cmp	r0, r1, lsl #28
    2808:	adc	r2, r2, r2
    280c:	subcs	r0, r0, r1, lsl #28
    2810:	cmp	r0, r1, lsl #27
    2814:	adc	r2, r2, r2
    2818:	subcs	r0, r0, r1, lsl #27
    281c:	cmp	r0, r1, lsl #26
    2820:	adc	r2, r2, r2
    2824:	subcs	r0, r0, r1, lsl #26
    2828:	cmp	r0, r1, lsl #25
    282c:	adc	r2, r2, r2
    2830:	subcs	r0, r0, r1, lsl #25
    2834:	cmp	r0, r1, lsl #24
    2838:	adc	r2, r2, r2
    283c:	subcs	r0, r0, r1, lsl #24
    2840:	cmp	r0, r1, lsl #23
    2844:	adc	r2, r2, r2
    2848:	subcs	r0, r0, r1, lsl #23
    284c:	cmp	r0, r1, lsl #22
    2850:	adc	r2, r2, r2
    2854:	subcs	r0, r0, r1, lsl #22
    2858:	cmp	r0, r1, lsl #21
    285c:	adc	r2, r2, r2
    2860:	subcs	r0, r0, r1, lsl #21
    2864:	cmp	r0, r1, lsl #20
    2868:	adc	r2, r2, r2
    286c:	subcs	r0, r0, r1, lsl #20
    2870:	cmp	r0, r1, lsl #19
    2874:	adc	r2, r2, r2
    2878:	subcs	r0, r0, r1, lsl #19
    287c:	cmp	r0, r1, lsl #18
    2880:	adc	r2, r2, r2
    2884:	subcs	r0, r0, r1, lsl #18
    2888:	cmp	r0, r1, lsl #17
    288c:	adc	r2, r2, r2
    2890:	subcs	r0, r0, r1, lsl #17
    2894:	cmp	r0, r1, lsl #16
    2898:	adc	r2, r2, r2
    289c:	subcs	r0, r0, r1, lsl #16
    28a0:	cmp	r0, r1, lsl #15
    28a4:	adc	r2, r2, r2
    28a8:	subcs	r0, r0, r1, lsl #15
    28ac:	cmp	r0, r1, lsl #14
    28b0:	adc	r2, r2, r2
    28b4:	subcs	r0, r0, r1, lsl #14
    28b8:	cmp	r0, r1, lsl #13
    28bc:	adc	r2, r2, r2
    28c0:	subcs	r0, r0, r1, lsl #13
    28c4:	cmp	r0, r1, lsl #12
    28c8:	adc	r2, r2, r2
    28cc:	subcs	r0, r0, r1, lsl #12
    28d0:	cmp	r0, r1, lsl #11
    28d4:	adc	r2, r2, r2
    28d8:	subcs	r0, r0, r1, lsl #11
    28dc:	cmp	r0, r1, lsl #10
    28e0:	adc	r2, r2, r2
    28e4:	subcs	r0, r0, r1, lsl #10
    28e8:	cmp	r0, r1, lsl #9
    28ec:	adc	r2, r2, r2
    28f0:	subcs	r0, r0, r1, lsl #9
    28f4:	cmp	r0, r1, lsl #8
    28f8:	adc	r2, r2, r2
    28fc:	subcs	r0, r0, r1, lsl #8
    2900:	cmp	r0, r1, lsl #7
    2904:	adc	r2, r2, r2
    2908:	subcs	r0, r0, r1, lsl #7
    290c:	cmp	r0, r1, lsl #6
    2910:	adc	r2, r2, r2
    2914:	subcs	r0, r0, r1, lsl #6
    2918:	cmp	r0, r1, lsl #5
    291c:	adc	r2, r2, r2
    2920:	subcs	r0, r0, r1, lsl #5
    2924:	cmp	r0, r1, lsl #4
    2928:	adc	r2, r2, r2
    292c:	subcs	r0, r0, r1, lsl #4
    2930:	cmp	r0, r1, lsl #3
    2934:	adc	r2, r2, r2
    2938:	subcs	r0, r0, r1, lsl #3
    293c:	cmp	r0, r1, lsl #2
    2940:	adc	r2, r2, r2
    2944:	subcs	r0, r0, r1, lsl #2
    2948:	cmp	r0, r1, lsl #1
    294c:	adc	r2, r2, r2
    2950:	subcs	r0, r0, r1, lsl #1
    2954:	cmp	r0, r1
    2958:	adc	r2, r2, r2
    295c:	subcs	r0, r0, r1
    2960:	mov	r0, r2
    2964:	bx	lr
    2968:	moveq	r0, #1
    296c:	movne	r0, #0
    2970:	bx	lr
    2974:	clz	r2, r1
    2978:	rsb	r2, r2, #31
    297c:	lsr	r0, r0, r2
    2980:	bx	lr
    2984:	cmp	r0, #0
    2988:	mvnne	r0, #0
    298c:	b	29b0 <pointer_list_remove_pointer_free@@Base+0x264>
    2990:	cmp	r1, #0
    2994:	beq	2984 <pointer_list_remove_pointer_free@@Base+0x238>
    2998:	push	{r0, r1, lr}
    299c:	bl	27a4 <pointer_list_remove_pointer_free@@Base+0x58>
    29a0:	pop	{r1, r2, lr}
    29a4:	mul	r3, r2, r0
    29a8:	sub	r1, r1, r3
    29ac:	bx	lr
    29b0:	push	{r1, lr}
    29b4:	mov	r0, #8
    29b8:	bl	ea4 <raise@plt>
    29bc:	pop	{r1, pc}

Disassembly of section .fini:

000029c0 <.fini>:
    29c0:	push	{r3, lr}
    29c4:	pop	{r3, pc}
