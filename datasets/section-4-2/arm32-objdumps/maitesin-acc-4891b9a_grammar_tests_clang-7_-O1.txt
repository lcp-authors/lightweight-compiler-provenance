
../repos/maitesin-acc-4891b9a/bin/grammar_tests:     file format elf32-littlearm


Disassembly of section .init:

00011e20 <.init>:
   11e20:	push	{r3, lr}
   11e24:	bl	12068 <_start@@Base+0x3c>
   11e28:	pop	{r3, pc}

Disassembly of section .plt:

00011e2c <fdopen@plt-0x14>:
   11e2c:	push	{lr}		; (str lr, [sp, #-4]!)
   11e30:	ldr	lr, [pc, #4]	; 11e3c <fdopen@plt-0x4>
   11e34:	add	lr, pc, lr
   11e38:	ldr	pc, [lr, #8]!
   11e3c:	andeq	sl, r1, r4, asr #3

00011e40 <fdopen@plt>:
   11e40:	add	ip, pc, #0, 12
   11e44:	add	ip, ip, #106496	; 0x1a000
   11e48:	ldr	pc, [ip, #452]!	; 0x1c4

00011e4c <setbuf@plt>:
   11e4c:	add	ip, pc, #0, 12
   11e50:	add	ip, ip, #106496	; 0x1a000
   11e54:	ldr	pc, [ip, #444]!	; 0x1bc

00011e58 <strtol@plt>:
   11e58:	add	ip, pc, #0, 12
   11e5c:	add	ip, ip, #106496	; 0x1a000
   11e60:	ldr	pc, [ip, #436]!	; 0x1b4

00011e64 <printf@plt>:
   11e64:	add	ip, pc, #0, 12
   11e68:	add	ip, ip, #106496	; 0x1a000
   11e6c:	ldr	pc, [ip, #428]!	; 0x1ac

00011e70 <fflush@plt>:
   11e70:	add	ip, pc, #0, 12
   11e74:	add	ip, ip, #106496	; 0x1a000
   11e78:	ldr	pc, [ip, #420]!	; 0x1a4

00011e7c <free@plt>:
   11e7c:	add	ip, pc, #0, 12
   11e80:	add	ip, ip, #106496	; 0x1a000
   11e84:	ldr	pc, [ip, #412]!	; 0x19c

00011e88 <memcpy@plt>:
   11e88:	add	ip, pc, #0, 12
   11e8c:	add	ip, ip, #106496	; 0x1a000
   11e90:	ldr	pc, [ip, #404]!	; 0x194

00011e94 <mmap64@plt>:
   11e94:	add	ip, pc, #0, 12
   11e98:	add	ip, ip, #106496	; 0x1a000
   11e9c:	ldr	pc, [ip, #396]!	; 0x18c

00011ea0 <ftell@plt>:
   11ea0:	add	ip, pc, #0, 12
   11ea4:	add	ip, ip, #106496	; 0x1a000
   11ea8:	ldr	pc, [ip, #388]!	; 0x184

00011eac <uname@plt>:
   11eac:	add	ip, pc, #0, 12
   11eb0:	add	ip, ip, #106496	; 0x1a000
   11eb4:	ldr	pc, [ip, #380]!	; 0x17c

00011eb8 <strdup@plt>:
   11eb8:	add	ip, pc, #0, 12
   11ebc:	add	ip, ip, #106496	; 0x1a000
   11ec0:	ldr	pc, [ip, #372]!	; 0x174

00011ec4 <realloc@plt>:
   11ec4:	add	ip, pc, #0, 12
   11ec8:	add	ip, ip, #106496	; 0x1a000
   11ecc:	ldr	pc, [ip, #364]!	; 0x16c

00011ed0 <fwrite@plt>:
   11ed0:	add	ip, pc, #0, 12
   11ed4:	add	ip, ip, #106496	; 0x1a000
   11ed8:	ldr	pc, [ip, #356]!	; 0x164

00011edc <open64@plt>:
   11edc:	add	ip, pc, #0, 12
   11ee0:	add	ip, ip, #106496	; 0x1a000
   11ee4:	ldr	pc, [ip, #348]!	; 0x15c

00011ee8 <getenv@plt>:
   11ee8:	add	ip, pc, #0, 12
   11eec:	add	ip, ip, #106496	; 0x1a000
   11ef0:	ldr	pc, [ip, #340]!	; 0x154

00011ef4 <puts@plt>:
   11ef4:	add	ip, pc, #0, 12
   11ef8:	add	ip, ip, #106496	; 0x1a000
   11efc:	ldr	pc, [ip, #332]!	; 0x14c

00011f00 <malloc@plt>:
   11f00:	add	ip, pc, #0, 12
   11f04:	add	ip, ip, #106496	; 0x1a000
   11f08:	ldr	pc, [ip, #324]!	; 0x144

00011f0c <__libc_start_main@plt>:
   11f0c:	add	ip, pc, #0, 12
   11f10:	add	ip, ip, #106496	; 0x1a000
   11f14:	ldr	pc, [ip, #316]!	; 0x13c

00011f18 <strerror@plt>:
   11f18:	add	ip, pc, #0, 12
   11f1c:	add	ip, ip, #106496	; 0x1a000
   11f20:	ldr	pc, [ip, #308]!	; 0x134

00011f24 <__gmon_start__@plt>:
   11f24:	add	ip, pc, #0, 12
   11f28:	add	ip, ip, #106496	; 0x1a000
   11f2c:	ldr	pc, [ip, #300]!	; 0x12c

00011f30 <getpid@plt>:
   11f30:	add	ip, pc, #0, 12
   11f34:	add	ip, ip, #106496	; 0x1a000
   11f38:	ldr	pc, [ip, #292]!	; 0x124

00011f3c <exit@plt>:
   11f3c:	add	ip, pc, #0, 12
   11f40:	add	ip, ip, #106496	; 0x1a000
   11f44:	ldr	pc, [ip, #284]!	; 0x11c

00011f48 <strlen@plt>:
   11f48:	add	ip, pc, #0, 12
   11f4c:	add	ip, ip, #106496	; 0x1a000
   11f50:	ldr	pc, [ip, #276]!	; 0x114

00011f54 <strchr@plt>:
   11f54:	add	ip, pc, #0, 12
   11f58:	add	ip, ip, #106496	; 0x1a000
   11f5c:	ldr	pc, [ip, #268]!	; 0x10c

00011f60 <fprintf@plt>:
   11f60:	add	ip, pc, #0, 12
   11f64:	add	ip, ip, #106496	; 0x1a000
   11f68:	ldr	pc, [ip, #260]!	; 0x104

00011f6c <__errno_location@plt>:
   11f6c:	add	ip, pc, #0, 12
   11f70:	add	ip, ip, #106496	; 0x1a000
   11f74:	ldr	pc, [ip, #252]!	; 0xfc

00011f78 <__cxa_atexit@plt>:
   11f78:	add	ip, pc, #0, 12
   11f7c:	add	ip, ip, #106496	; 0x1a000
   11f80:	ldr	pc, [ip, #244]!	; 0xf4

00011f84 <mkdir@plt>:
   11f84:	add	ip, pc, #0, 12
   11f88:	add	ip, ip, #106496	; 0x1a000
   11f8c:	ldr	pc, [ip, #236]!	; 0xec

00011f90 <memset@plt>:
   11f90:	add	ip, pc, #0, 12
   11f94:	add	ip, ip, #106496	; 0x1a000
   11f98:	ldr	pc, [ip, #228]!	; 0xe4

00011f9c <strncpy@plt>:
   11f9c:	add	ip, pc, #0, 12
   11fa0:	add	ip, ip, #106496	; 0x1a000
   11fa4:	ldr	pc, [ip, #220]!	; 0xdc

00011fa8 <prctl@plt>:
   11fa8:	add	ip, pc, #0, 12
   11fac:	add	ip, ip, #106496	; 0x1a000
   11fb0:	ldr	pc, [ip, #212]!	; 0xd4

00011fb4 <fclose@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #106496	; 0x1a000
   11fbc:	ldr	pc, [ip, #204]!	; 0xcc

00011fc0 <strnlen@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #106496	; 0x1a000
   11fc8:	ldr	pc, [ip, #196]!	; 0xc4

00011fcc <munmap@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #106496	; 0x1a000
   11fd4:	ldr	pc, [ip, #188]!	; 0xbc

00011fd8 <fcntl64@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #106496	; 0x1a000
   11fe0:	ldr	pc, [ip, #180]!	; 0xb4

00011fe4 <strrchr@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #106496	; 0x1a000
   11fec:	ldr	pc, [ip, #172]!	; 0xac

00011ff0 <msync@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #106496	; 0x1a000
   11ff8:	ldr	pc, [ip, #164]!	; 0xa4

00011ffc <fseek@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #106496	; 0x1a000
   12004:	ldr	pc, [ip, #156]!	; 0x9c

00012008 <strncmp@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #106496	; 0x1a000
   12010:	ldr	pc, [ip, #148]!	; 0x94

00012014 <abort@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #106496	; 0x1a000
   1201c:	ldr	pc, [ip, #140]!	; 0x8c

00012020 <__assert_fail@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #106496	; 0x1a000
   12028:	ldr	pc, [ip, #132]!	; 0x84

Disassembly of section .text:

0001202c <_start@@Base>:
   1202c:	mov	fp, #0
   12030:	mov	lr, #0
   12034:	pop	{r1}		; (ldr r1, [sp], #4)
   12038:	mov	r2, sp
   1203c:	push	{r2}		; (str r2, [sp, #-4]!)
   12040:	push	{r0}		; (str r0, [sp, #-4]!)
   12044:	ldr	ip, [pc, #16]	; 1205c <_start@@Base+0x30>
   12048:	push	{ip}		; (str ip, [sp, #-4]!)
   1204c:	ldr	r0, [pc, #12]	; 12060 <_start@@Base+0x34>
   12050:	ldr	r3, [pc, #12]	; 12064 <_start@@Base+0x38>
   12054:	bl	11f0c <__libc_start_main@plt>
   12058:	bl	12014 <abort@plt>
   1205c:	andeq	r9, r1, r4, asr #20
   12060:	strdeq	r3, [r1], -r0
   12064:	andeq	r9, r1, r4, ror #19
   12068:	ldr	r3, [pc, #20]	; 12084 <_start@@Base+0x58>
   1206c:	ldr	r2, [pc, #20]	; 12088 <_start@@Base+0x5c>
   12070:	add	r3, pc, r3
   12074:	ldr	r2, [r3, r2]
   12078:	cmp	r2, #0
   1207c:	bxeq	lr
   12080:	b	11f24 <__gmon_start__@plt>
   12084:	andeq	r9, r1, r8, lsl #31
   12088:	andeq	r0, r0, r0, asr #1
   1208c:	ldr	r0, [pc, #24]	; 120ac <_start@@Base+0x80>
   12090:	ldr	r3, [pc, #24]	; 120b0 <_start@@Base+0x84>
   12094:	cmp	r3, r0
   12098:	bxeq	lr
   1209c:	ldr	r3, [pc, #16]	; 120b4 <_start@@Base+0x88>
   120a0:	cmp	r3, #0
   120a4:	bxeq	lr
   120a8:	bx	r3
   120ac:	andeq	ip, r2, r4, ror #1
   120b0:	andeq	ip, r2, r4, ror #1
   120b4:	andeq	r0, r0, r0
   120b8:	ldr	r0, [pc, #36]	; 120e4 <_start@@Base+0xb8>
   120bc:	ldr	r1, [pc, #36]	; 120e8 <_start@@Base+0xbc>
   120c0:	sub	r1, r1, r0
   120c4:	asr	r1, r1, #2
   120c8:	add	r1, r1, r1, lsr #31
   120cc:	asrs	r1, r1, #1
   120d0:	bxeq	lr
   120d4:	ldr	r3, [pc, #16]	; 120ec <_start@@Base+0xc0>
   120d8:	cmp	r3, #0
   120dc:	bxeq	lr
   120e0:	bx	r3
   120e4:	andeq	ip, r2, r4, ror #1
   120e8:	andeq	ip, r2, r4, ror #1
   120ec:	andeq	r0, r0, r0
   120f0:	push	{r4, lr}
   120f4:	ldr	r4, [pc, #24]	; 12114 <_start@@Base+0xe8>
   120f8:	ldrb	r3, [r4]
   120fc:	cmp	r3, #0
   12100:	popne	{r4, pc}
   12104:	bl	1208c <_start@@Base+0x60>
   12108:	mov	r3, #1
   1210c:	strb	r3, [r4]
   12110:	pop	{r4, pc}
   12114:	strdeq	ip, [r2], -r8
   12118:	b	120b8 <_start@@Base+0x8c>

0001211c <next@@Base>:
   1211c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12120:	add	fp, sp, #24
   12124:	movw	r1, #53144	; 0xcf98
   12128:	movt	r1, #2
   1212c:	str	r0, [r1]
   12130:	movw	r8, #49408	; 0xc100
   12134:	movt	r8, #2
   12138:	ldrd	r2, [r8]
   1213c:	adds	r2, r2, #1
   12140:	adc	r3, r3, #0
   12144:	strd	r2, [r8]
   12148:	ldr	r2, [r1, #204]	; 0xcc
   1214c:	mov	r3, #16
   12150:	cmp	r2, #50	; 0x32
   12154:	movwcc	r3, #8
   12158:	mov	r4, r8
   1215c:	ldr	r3, [r4, r3]!
   12160:	adds	r3, r3, #1
   12164:	str	r3, [r4]
   12168:	ldr	r3, [r4, #4]
   1216c:	adc	r3, r3, #0
   12170:	str	r3, [r4, #4]
   12174:	cmp	r2, #49	; 0x31
   12178:	bhi	121a0 <next@@Base+0x84>
   1217c:	ldr	r4, [r8, #24]
   12180:	ldr	r3, [r8, #28]
   12184:	adds	r4, r4, #1
   12188:	adc	r3, r3, #0
   1218c:	str	r4, [r8, #24]
   12190:	str	r3, [r8, #28]
   12194:	add	r2, r1, r2, lsl #2
   12198:	str	r0, [r2, #4]
   1219c:	b	121bc <next@@Base+0xa0>
   121a0:	ldrd	r2, [r8, #32]
   121a4:	adds	r2, r2, #1
   121a8:	ldr	r4, [r1, #212]	; 0xd4
   121ac:	add	r4, r4, #1
   121b0:	str	r4, [r1, #212]	; 0xd4
   121b4:	adc	r3, r3, #0
   121b8:	strd	r2, [r8, #32]
   121bc:	ldr	r2, [r1, #204]	; 0xcc
   121c0:	add	r2, r2, #1
   121c4:	str	r2, [r1, #204]	; 0xcc
   121c8:	movw	r2, #53380	; 0xd084
   121cc:	movt	r2, #2
   121d0:	ldr	r3, [r2, #200]	; 0xc8
   121d4:	mov	r4, #48	; 0x30
   121d8:	cmp	r3, #50	; 0x32
   121dc:	movwcc	r4, #40	; 0x28
   121e0:	mov	r5, r8
   121e4:	ldr	r4, [r5, r4]!
   121e8:	adds	r4, r4, #1
   121ec:	str	r4, [r5]
   121f0:	ldr	r4, [r5, #4]
   121f4:	adc	r4, r4, #0
   121f8:	str	r4, [r5, #4]
   121fc:	cmp	r3, #49	; 0x31
   12200:	bhi	12228 <next@@Base+0x10c>
   12204:	add	r5, r3, #1
   12208:	str	r5, [r2, #200]	; 0xc8
   1220c:	ldrd	r4, [r8, #56]	; 0x38
   12210:	adds	r4, r4, #1
   12214:	adc	r5, r5, #0
   12218:	strd	r4, [r8, #56]	; 0x38
   1221c:	movw	r5, #8476	; 0x211c
   12220:	movt	r5, #1
   12224:	str	r5, [r2, r3, lsl #2]
   12228:	ldr	r2, [r1, #232]	; 0xe8
   1222c:	mov	r3, #72	; 0x48
   12230:	cmp	r2, #0
   12234:	movwne	r3, #64	; 0x40
   12238:	mov	r6, r8
   1223c:	ldr	r3, [r6, r3]!
   12240:	adds	r3, r3, #1
   12244:	str	r3, [r6]
   12248:	ldr	r3, [r6, #4]
   1224c:	adc	r3, r3, #0
   12250:	str	r3, [r6, #4]
   12254:	cmp	r2, #0
   12258:	beq	12284 <next@@Base+0x168>
   1225c:	ldrd	r4, [r8, #80]	; 0x50
   12260:	adds	r4, r4, #1
   12264:	adc	r5, r5, #0
   12268:	strd	r4, [r8, #80]	; 0x50
   1226c:	blx	r2
   12270:	ldrd	r2, [r8, #144]	; 0x90
   12274:	adds	r2, r2, #1
   12278:	adc	r3, r3, #0
   1227c:	strd	r2, [r8, #144]	; 0x90
   12280:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12284:	ldr	r0, [r1, #220]	; 0xdc
   12288:	mov	r2, #96	; 0x60
   1228c:	cmp	r0, #0
   12290:	movwne	r2, #88	; 0x58
   12294:	mov	r3, r8
   12298:	ldr	r2, [r3, r2]!
   1229c:	adds	r2, r2, #1
   122a0:	str	r2, [r3]
   122a4:	ldr	r2, [r3, #4]
   122a8:	adc	r2, r2, #0
   122ac:	str	r2, [r3, #4]
   122b0:	cmp	r0, #0
   122b4:	beq	12310 <next@@Base+0x1f4>
   122b8:	ldr	r3, [r1, #224]	; 0xe0
   122bc:	ldr	r2, [r1, #228]	; 0xe4
   122c0:	mov	r6, #112	; 0x70
   122c4:	cmp	r3, r0
   122c8:	movwlt	r6, #104	; 0x68
   122cc:	mov	r7, r8
   122d0:	ldr	r6, [r7, r6]!
   122d4:	adds	r6, r6, #1
   122d8:	str	r6, [r7]
   122dc:	ldr	r6, [r7, #4]
   122e0:	adc	r6, r6, #0
   122e4:	str	r6, [r7, #4]
   122e8:	cmp	r3, r0
   122ec:	bge	12330 <next@@Base+0x214>
   122f0:	add	r0, r3, #1
   122f4:	str	r0, [r1, #224]	; 0xe0
   122f8:	ldrd	r0, [r8, #120]	; 0x78
   122fc:	adds	r0, r0, #1
   12300:	adc	r1, r1, #0
   12304:	strd	r0, [r8, #120]	; 0x78
   12308:	ldr	r0, [r2, r3, lsl #2]
   1230c:	b	12270 <next@@Base+0x154>
   12310:	ldr	r0, [r8, #136]	; 0x88
   12314:	ldr	r3, [r8, #140]	; 0x8c
   12318:	adds	r0, r0, #1
   1231c:	adc	r3, r3, #0
   12320:	str	r0, [r8, #136]	; 0x88
   12324:	str	r3, [r8, #140]	; 0x8c
   12328:	ldr	r0, [r1, #216]	; 0xd8
   1232c:	b	12270 <next@@Base+0x154>
   12330:	ldrd	r4, [r8, #128]	; 0x80
   12334:	adds	r4, r4, #1
   12338:	adc	r5, r5, #0
   1233c:	strd	r4, [r8, #128]	; 0x80
   12340:	add	r0, r2, r0, lsl #2
   12344:	ldr	r0, [r0, #-4]
   12348:	b	12270 <next@@Base+0x154>

0001234c <next_reset@@Base>:
   1234c:	push	{r4, sl, fp, lr}
   12350:	add	fp, sp, #8
   12354:	movw	r0, #49560	; 0xc198
   12358:	movt	r0, #2
   1235c:	ldm	r0, {r1, r2, r3, r4}
   12360:	adds	r1, r1, #1
   12364:	adc	r2, r2, #0
   12368:	adds	r3, r3, #1
   1236c:	adc	r4, r4, #0
   12370:	stm	r0, {r1, r2, r3, r4}
   12374:	movw	r4, #53144	; 0xcf98
   12378:	movt	r4, #2
   1237c:	mov	r0, r4
   12380:	mov	r1, #0
   12384:	mov	r2, #236	; 0xec
   12388:	bl	11f90 <memset@plt>
   1238c:	mov	r0, #50	; 0x32
   12390:	str	r0, [r4, #208]	; 0xd0
   12394:	pop	{r4, sl, fp, pc}

00012398 <push_back@@Base>:
   12398:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1239c:	add	fp, sp, #24
   123a0:	movw	r2, #52720	; 0xcdf0
   123a4:	movt	r2, #2
   123a8:	str	r0, [r2]
   123ac:	str	r1, [r2, #204]	; 0xcc
   123b0:	movw	r8, #49584	; 0xc1b0
   123b4:	movt	r8, #2
   123b8:	ldrd	r6, [r8]
   123bc:	adds	r6, r6, #1
   123c0:	adc	r7, r7, #0
   123c4:	strd	r6, [r8]
   123c8:	ldr	r3, [r2, #408]	; 0x198
   123cc:	mov	r7, #16
   123d0:	cmp	r3, #50	; 0x32
   123d4:	movwcc	r7, #8
   123d8:	mov	r4, r8
   123dc:	ldr	r7, [r4, r7]!
   123e0:	adds	r7, r7, #1
   123e4:	str	r7, [r4]
   123e8:	ldr	r7, [r4, #4]
   123ec:	adc	r7, r7, #0
   123f0:	str	r7, [r4, #4]
   123f4:	cmp	r3, #49	; 0x31
   123f8:	bhi	1242c <push_back@@Base+0x94>
   123fc:	ldr	r4, [r8, #24]
   12400:	ldr	r7, [r8, #28]
   12404:	adds	r4, r4, #1
   12408:	adc	r7, r7, #0
   1240c:	str	r4, [r8, #24]
   12410:	str	r7, [r8, #28]
   12414:	add	r3, r2, r3, lsl #2
   12418:	str	r0, [r3, #4]
   1241c:	ldr	r3, [r2, #408]	; 0x198
   12420:	add	r3, r2, r3, lsl #2
   12424:	str	r1, [r3, #208]	; 0xd0
   12428:	b	12450 <push_back@@Base+0xb8>
   1242c:	ldr	r4, [r8, #32]
   12430:	ldr	r3, [r8, #36]	; 0x24
   12434:	adds	r4, r4, #1
   12438:	ldr	r7, [r2, #416]	; 0x1a0
   1243c:	add	r7, r7, #1
   12440:	str	r7, [r2, #416]	; 0x1a0
   12444:	adc	r3, r3, #0
   12448:	str	r4, [r8, #32]
   1244c:	str	r3, [r8, #36]	; 0x24
   12450:	ldr	r3, [r2, #408]	; 0x198
   12454:	add	r3, r3, #1
   12458:	str	r3, [r2, #408]	; 0x198
   1245c:	movw	ip, #53380	; 0xd084
   12460:	movt	ip, #2
   12464:	ldr	r3, [ip, #200]	; 0xc8
   12468:	mov	r7, #48	; 0x30
   1246c:	cmp	r3, #50	; 0x32
   12470:	movwcc	r7, #40	; 0x28
   12474:	mov	r5, r8
   12478:	ldr	r7, [r5, r7]!
   1247c:	adds	r7, r7, #1
   12480:	str	r7, [r5]
   12484:	ldr	r7, [r5, #4]
   12488:	adc	r7, r7, #0
   1248c:	str	r7, [r5, #4]
   12490:	cmp	r3, #49	; 0x31
   12494:	bhi	124bc <push_back@@Base+0x124>
   12498:	add	r7, r3, #1
   1249c:	str	r7, [ip, #200]	; 0xc8
   124a0:	ldrd	r4, [r8, #56]	; 0x38
   124a4:	adds	r4, r4, #1
   124a8:	adc	r5, r5, #0
   124ac:	strd	r4, [r8, #56]	; 0x38
   124b0:	movw	r7, #9112	; 0x2398
   124b4:	movt	r7, #1
   124b8:	str	r7, [ip, r3, lsl #2]
   124bc:	ldr	r2, [r2, #420]	; 0x1a4
   124c0:	mov	r3, #72	; 0x48
   124c4:	cmp	r2, #0
   124c8:	movwne	r3, #64	; 0x40
   124cc:	mov	r7, r8
   124d0:	ldr	r3, [r7, r3]!
   124d4:	adds	r3, r3, #1
   124d8:	str	r3, [r7]
   124dc:	ldr	r3, [r7, #4]
   124e0:	adc	r3, r3, #0
   124e4:	str	r3, [r7, #4]
   124e8:	cmp	r2, #0
   124ec:	beq	12504 <push_back@@Base+0x16c>
   124f0:	ldrd	r4, [r8, #80]	; 0x50
   124f4:	adds	r4, r4, #1
   124f8:	adc	r5, r5, #0
   124fc:	strd	r4, [r8, #80]	; 0x50
   12500:	blx	r2
   12504:	ldrd	r0, [r8, #88]	; 0x58
   12508:	adds	r0, r0, #1
   1250c:	adc	r1, r1, #0
   12510:	strd	r0, [r8, #88]	; 0x58
   12514:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00012518 <push_back_reset@@Base>:
   12518:	push	{r4, sl, fp, lr}
   1251c:	add	fp, sp, #8
   12520:	movw	r0, #49680	; 0xc210
   12524:	movt	r0, #2
   12528:	ldm	r0, {r1, r2, r3, r4}
   1252c:	adds	r1, r1, #1
   12530:	adc	r2, r2, #0
   12534:	adds	r3, r3, #1
   12538:	adc	r4, r4, #0
   1253c:	stm	r0, {r1, r2, r3, r4}
   12540:	movw	r4, #52720	; 0xcdf0
   12544:	movt	r4, #2
   12548:	mov	r0, r4
   1254c:	mov	r1, #0
   12550:	mov	r2, #424	; 0x1a8
   12554:	bl	11f90 <memset@plt>
   12558:	mov	r0, #50	; 0x32
   1255c:	str	r0, [r4, #412]	; 0x19c
   12560:	pop	{r4, sl, fp, pc}

00012564 <setup@@Base>:
   12564:	push	{fp, lr}
   12568:	mov	fp, sp
   1256c:	movw	r0, #49696	; 0xc220
   12570:	movt	r0, #2
   12574:	ldm	r0, {r1, r2, r3, ip}
   12578:	adds	r1, r1, #1
   1257c:	adc	r2, r2, #0
   12580:	adds	r3, r3, #1
   12584:	adc	ip, ip, #0
   12588:	stm	r0, {r1, r2, r3, ip}
   1258c:	bl	1234c <next_reset@@Base>
   12590:	pop	{fp, lr}
   12594:	b	12518 <push_back_reset@@Base>

00012598 <no_int_as_first_stuff@@Base>:
   12598:	push	{r4, r5, r6, r7, fp, lr}
   1259c:	add	fp, sp, #16
   125a0:	sub	sp, sp, #16
   125a4:	movw	r6, #49712	; 0xc230
   125a8:	movt	r6, #2
   125ac:	ldrd	r0, [r6]
   125b0:	adds	r0, r0, #1
   125b4:	adc	r1, r1, #0
   125b8:	strd	r0, [r6]
   125bc:	mov	r4, sp
   125c0:	add	r1, sp, #4
   125c4:	mov	r0, r4
   125c8:	bl	15a38 <init_grammar@@Base>
   125cc:	mov	r0, #4
   125d0:	bl	11f00 <malloc@plt>
   125d4:	mov	r5, r0
   125d8:	bl	14614 <init_token_opar@@Base>
   125dc:	movw	r7, #53144	; 0xcf98
   125e0:	movt	r7, #2
   125e4:	str	r5, [r7, #216]	; 0xd8
   125e8:	mov	r0, r4
   125ec:	bl	15ac4 <read_function_ast_node@@Base>
   125f0:	ldr	r1, [r7, #204]	; 0xcc
   125f4:	mov	r2, #16
   125f8:	cmp	r1, #1
   125fc:	movweq	r2, #8
   12600:	mov	r3, r6
   12604:	ldr	r2, [r3, r2]!
   12608:	adds	r2, r2, #1
   1260c:	str	r2, [r3]
   12610:	ldr	r2, [r3, #4]
   12614:	adc	r2, r2, #0
   12618:	str	r2, [r3, #4]
   1261c:	cmp	r1, #1
   12620:	bne	1266c <no_int_as_first_stuff@@Base+0xd4>
   12624:	mov	r1, #32
   12628:	cmp	r0, #0
   1262c:	movweq	r1, #24
   12630:	mov	r2, r6
   12634:	ldr	r1, [r2, r1]!
   12638:	adds	r1, r1, #1
   1263c:	str	r1, [r2]
   12640:	ldr	r1, [r2, #4]
   12644:	adc	r1, r1, #0
   12648:	str	r1, [r2, #4]
   1264c:	cmp	r0, #0
   12650:	bne	1268c <no_int_as_first_stuff@@Base+0xf4>
   12654:	ldrd	r0, [r6, #40]	; 0x28
   12658:	adds	r0, r0, #1
   1265c:	adc	r1, r1, #0
   12660:	strd	r0, [r6, #40]	; 0x28
   12664:	sub	sp, fp, #16
   12668:	pop	{r4, r5, r6, r7, fp, pc}
   1266c:	movw	r0, #39540	; 0x9a74
   12670:	movt	r0, #1
   12674:	movw	r1, #39566	; 0x9a8e
   12678:	movt	r1, #1
   1267c:	movw	r3, #39634	; 0x9ad2
   12680:	movt	r3, #1
   12684:	mov	r2, #41	; 0x29
   12688:	bl	12020 <__assert_fail@plt>
   1268c:	movw	r0, #39663	; 0x9aef
   12690:	movt	r0, #1
   12694:	movw	r1, #39566	; 0x9a8e
   12698:	movt	r1, #1
   1269c:	movw	r3, #39634	; 0x9ad2
   126a0:	movt	r3, #1
   126a4:	mov	r2, #42	; 0x2a
   126a8:	bl	12020 <__assert_fail@plt>

000126ac <int_but_not_followed_by_function@@Base>:
   126ac:	push	{r4, r5, r6, r7, fp, lr}
   126b0:	add	fp, sp, #16
   126b4:	sub	sp, sp, #16
   126b8:	movw	r6, #49760	; 0xc260
   126bc:	movt	r6, #2
   126c0:	ldrd	r0, [r6]
   126c4:	adds	r0, r0, #1
   126c8:	adc	r1, r1, #0
   126cc:	strd	r0, [r6]
   126d0:	mov	r4, sp
   126d4:	add	r1, sp, #4
   126d8:	mov	r0, r4
   126dc:	bl	15a38 <init_grammar@@Base>
   126e0:	mov	r0, #8
   126e4:	bl	11f00 <malloc@plt>
   126e8:	mov	r5, r0
   126ec:	mov	r0, #4
   126f0:	bl	11f00 <malloc@plt>
   126f4:	str	r0, [r5]
   126f8:	bl	14560 <init_token_int_type@@Base>
   126fc:	mov	r0, #4
   12700:	bl	11f00 <malloc@plt>
   12704:	str	r0, [r5, #4]
   12708:	bl	14614 <init_token_opar@@Base>
   1270c:	movw	r7, #53144	; 0xcf98
   12710:	movt	r7, #2
   12714:	mov	r0, #2
   12718:	str	r0, [r7, #220]	; 0xdc
   1271c:	str	r5, [r7, #228]	; 0xe4
   12720:	mov	r0, r4
   12724:	bl	15ac4 <read_function_ast_node@@Base>
   12728:	ldr	r1, [r7, #204]	; 0xcc
   1272c:	mov	r2, #16
   12730:	cmp	r1, #2
   12734:	movweq	r2, #8
   12738:	mov	r3, r6
   1273c:	ldr	r2, [r3, r2]!
   12740:	adds	r2, r2, #1
   12744:	str	r2, [r3]
   12748:	ldr	r2, [r3, #4]
   1274c:	adc	r2, r2, #0
   12750:	str	r2, [r3, #4]
   12754:	cmp	r1, #2
   12758:	bne	127a4 <int_but_not_followed_by_function@@Base+0xf8>
   1275c:	mov	r1, #32
   12760:	cmp	r0, #0
   12764:	movweq	r1, #24
   12768:	mov	r2, r6
   1276c:	ldr	r1, [r2, r1]!
   12770:	adds	r1, r1, #1
   12774:	str	r1, [r2]
   12778:	ldr	r1, [r2, #4]
   1277c:	adc	r1, r1, #0
   12780:	str	r1, [r2, #4]
   12784:	cmp	r0, #0
   12788:	bne	127c4 <int_but_not_followed_by_function@@Base+0x118>
   1278c:	ldrd	r0, [r6, #40]	; 0x28
   12790:	adds	r0, r0, #1
   12794:	adc	r1, r1, #0
   12798:	strd	r0, [r6, #40]	; 0x28
   1279c:	sub	sp, fp, #16
   127a0:	pop	{r4, r5, r6, r7, fp, pc}
   127a4:	movw	r0, #39675	; 0x9afb
   127a8:	movt	r0, #1
   127ac:	movw	r1, #39566	; 0x9a8e
   127b0:	movt	r1, #1
   127b4:	movw	r3, #39701	; 0x9b15
   127b8:	movt	r3, #1
   127bc:	mov	r2, #67	; 0x43
   127c0:	bl	12020 <__assert_fail@plt>
   127c4:	movw	r0, #39663	; 0x9aef
   127c8:	movt	r0, #1
   127cc:	movw	r1, #39566	; 0x9a8e
   127d0:	movt	r1, #1
   127d4:	movw	r3, #39701	; 0x9b15
   127d8:	movt	r3, #1
   127dc:	mov	r2, #68	; 0x44
   127e0:	bl	12020 <__assert_fail@plt>

000127e4 <boolean_expression_is_read_properly@@Base>:
   127e4:	push	{r4, r5, r6, r7, fp, lr}
   127e8:	add	fp, sp, #16
   127ec:	sub	sp, sp, #16
   127f0:	movw	r7, #49808	; 0xc290
   127f4:	movt	r7, #2
   127f8:	ldrd	r0, [r7]
   127fc:	adds	r0, r0, #1
   12800:	adc	r1, r1, #0
   12804:	strd	r0, [r7]
   12808:	mov	r0, #3
   1280c:	bl	11f00 <malloc@plt>
   12810:	mov	r6, r0
   12814:	movw	r0, #15649	; 0x3d21
   12818:	strh	r0, [r6]
   1281c:	mov	r0, #0
   12820:	strb	r0, [r6, #2]
   12824:	mov	r4, sp
   12828:	add	r1, sp, #4
   1282c:	mov	r0, r4
   12830:	bl	15a38 <init_grammar@@Base>
   12834:	mov	r0, #20
   12838:	bl	11f00 <malloc@plt>
   1283c:	mov	r5, r0
   12840:	mov	r0, #8
   12844:	bl	11f00 <malloc@plt>
   12848:	str	r0, [r5]
   1284c:	mov	r1, #2
   12850:	bl	14594 <init_token_int_value@@Base>
   12854:	mov	r0, #8
   12858:	bl	11f00 <malloc@plt>
   1285c:	str	r0, [r5, #4]
   12860:	mov	r1, #2
   12864:	bl	14594 <init_token_int_value@@Base>
   12868:	mov	r0, #8
   1286c:	bl	11f00 <malloc@plt>
   12870:	str	r0, [r5, #8]
   12874:	mov	r1, r6
   12878:	bl	147e8 <init_token_boolean_op@@Base>
   1287c:	mov	r0, #8
   12880:	bl	11f00 <malloc@plt>
   12884:	str	r0, [r5, #12]
   12888:	mov	r1, #1
   1288c:	bl	14594 <init_token_int_value@@Base>
   12890:	mov	r0, #4
   12894:	bl	11f00 <malloc@plt>
   12898:	str	r0, [r5, #16]
   1289c:	bl	14648 <init_token_cpar@@Base>
   128a0:	movw	r6, #53144	; 0xcf98
   128a4:	movt	r6, #2
   128a8:	mov	r0, #5
   128ac:	str	r0, [r6, #220]	; 0xdc
   128b0:	str	r5, [r6, #228]	; 0xe4
   128b4:	mov	r0, r4
   128b8:	bl	161c0 <read_boolean_expression@@Base>
   128bc:	ldr	r1, [r6, #204]	; 0xcc
   128c0:	mov	r2, #16
   128c4:	cmp	r1, #5
   128c8:	movweq	r2, #8
   128cc:	mov	r3, r7
   128d0:	ldr	r2, [r3, r2]!
   128d4:	adds	r2, r2, #1
   128d8:	str	r2, [r3]
   128dc:	ldr	r2, [r3, #4]
   128e0:	adc	r2, r2, #0
   128e4:	str	r2, [r3, #4]
   128e8:	cmp	r1, #5
   128ec:	bne	12978 <boolean_expression_is_read_properly@@Base+0x194>
   128f0:	movw	r1, #52720	; 0xcdf0
   128f4:	movt	r1, #2
   128f8:	ldr	r1, [r1, #408]	; 0x198
   128fc:	mov	r2, #32
   12900:	cmp	r1, #1
   12904:	movweq	r2, #24
   12908:	mov	r3, r7
   1290c:	ldr	r2, [r3, r2]!
   12910:	adds	r2, r2, #1
   12914:	str	r2, [r3]
   12918:	ldr	r2, [r3, #4]
   1291c:	adc	r2, r2, #0
   12920:	str	r2, [r3, #4]
   12924:	cmp	r1, #1
   12928:	bne	12998 <boolean_expression_is_read_properly@@Base+0x1b4>
   1292c:	ldr	r0, [r0]
   12930:	mov	r1, #48	; 0x30
   12934:	cmp	r0, #5
   12938:	movweq	r1, #40	; 0x28
   1293c:	mov	r2, r7
   12940:	ldr	r1, [r2, r1]!
   12944:	adds	r1, r1, #1
   12948:	str	r1, [r2]
   1294c:	ldr	r1, [r2, #4]
   12950:	adc	r1, r1, #0
   12954:	str	r1, [r2, #4]
   12958:	cmp	r0, #5
   1295c:	bne	129b8 <boolean_expression_is_read_properly@@Base+0x1d4>
   12960:	ldrd	r0, [r7, #56]	; 0x38
   12964:	adds	r0, r0, #1
   12968:	adc	r1, r1, #0
   1296c:	strd	r0, [r7, #56]	; 0x38
   12970:	sub	sp, fp, #16
   12974:	pop	{r4, r5, r6, r7, fp, pc}
   12978:	movw	r0, #39741	; 0x9b3d
   1297c:	movt	r0, #1
   12980:	movw	r1, #39566	; 0x9a8e
   12984:	movt	r1, #1
   12988:	movw	r3, #39767	; 0x9b57
   1298c:	movt	r3, #1
   12990:	mov	r2, #105	; 0x69
   12994:	bl	12020 <__assert_fail@plt>
   12998:	movw	r0, #39810	; 0x9b82
   1299c:	movt	r0, #1
   129a0:	movw	r1, #39566	; 0x9a8e
   129a4:	movt	r1, #1
   129a8:	movw	r3, #39767	; 0x9b57
   129ac:	movt	r3, #1
   129b0:	mov	r2, #106	; 0x6a
   129b4:	bl	12020 <__assert_fail@plt>
   129b8:	movw	r0, #39841	; 0x9ba1
   129bc:	movt	r0, #1
   129c0:	movw	r1, #39566	; 0x9a8e
   129c4:	movt	r1, #1
   129c8:	movw	r3, #39767	; 0x9b57
   129cc:	movt	r3, #1
   129d0:	mov	r2, #107	; 0x6b
   129d4:	bl	12020 <__assert_fail@plt>

000129d8 <boolean_expression_complex@@Base>:
   129d8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   129dc:	add	fp, sp, #24
   129e0:	sub	sp, sp, #16
   129e4:	movw	r9, #49872	; 0xc2d0
   129e8:	movt	r9, #2
   129ec:	ldrd	r0, [r9]
   129f0:	adds	r0, r0, #1
   129f4:	adc	r1, r1, #0
   129f8:	strd	r0, [r9]
   129fc:	mov	r0, #3
   12a00:	bl	11f00 <malloc@plt>
   12a04:	mov	r4, r0
   12a08:	mov	r0, #3
   12a0c:	bl	11f00 <malloc@plt>
   12a10:	mov	r7, r0
   12a14:	mov	r0, #3
   12a18:	bl	11f00 <malloc@plt>
   12a1c:	mov	r6, r0
   12a20:	movw	r0, #15676	; 0x3d3c
   12a24:	strh	r0, [r4]
   12a28:	mov	r0, #0
   12a2c:	strb	r0, [r4, #2]
   12a30:	strb	r0, [r7, #2]
   12a34:	movw	r1, #9766	; 0x2626
   12a38:	strh	r1, [r7]
   12a3c:	strb	r0, [r6, #2]
   12a40:	movw	r0, #15677	; 0x3d3d
   12a44:	strh	r0, [r6]
   12a48:	mov	r8, sp
   12a4c:	add	r1, sp, #4
   12a50:	mov	r0, r8
   12a54:	bl	15a38 <init_grammar@@Base>
   12a58:	mov	r0, #40	; 0x28
   12a5c:	bl	11f00 <malloc@plt>
   12a60:	mov	r5, r0
   12a64:	mov	r0, #8
   12a68:	bl	11f00 <malloc@plt>
   12a6c:	str	r0, [r5]
   12a70:	mov	r1, #2
   12a74:	bl	14594 <init_token_int_value@@Base>
   12a78:	mov	r0, #8
   12a7c:	bl	11f00 <malloc@plt>
   12a80:	str	r0, [r5, #4]
   12a84:	mov	r1, #2
   12a88:	bl	14594 <init_token_int_value@@Base>
   12a8c:	mov	r0, #8
   12a90:	bl	11f00 <malloc@plt>
   12a94:	str	r0, [r5, #8]
   12a98:	mov	r1, r4
   12a9c:	bl	147e8 <init_token_boolean_op@@Base>
   12aa0:	mov	r0, #8
   12aa4:	bl	11f00 <malloc@plt>
   12aa8:	str	r0, [r5, #12]
   12aac:	mov	r1, #1
   12ab0:	bl	14594 <init_token_int_value@@Base>
   12ab4:	mov	r0, #8
   12ab8:	bl	11f00 <malloc@plt>
   12abc:	str	r0, [r5, #16]
   12ac0:	mov	r1, r7
   12ac4:	bl	147e8 <init_token_boolean_op@@Base>
   12ac8:	mov	r0, #8
   12acc:	bl	11f00 <malloc@plt>
   12ad0:	str	r0, [r5, #20]
   12ad4:	mov	r1, #4
   12ad8:	bl	14594 <init_token_int_value@@Base>
   12adc:	mov	r0, #8
   12ae0:	bl	11f00 <malloc@plt>
   12ae4:	str	r0, [r5, #24]
   12ae8:	mov	r1, #4
   12aec:	bl	14594 <init_token_int_value@@Base>
   12af0:	mov	r0, #8
   12af4:	bl	11f00 <malloc@plt>
   12af8:	str	r0, [r5, #28]
   12afc:	mov	r1, r6
   12b00:	bl	147e8 <init_token_boolean_op@@Base>
   12b04:	mov	r0, #8
   12b08:	bl	11f00 <malloc@plt>
   12b0c:	str	r0, [r5, #32]
   12b10:	mov	r1, #4
   12b14:	bl	14594 <init_token_int_value@@Base>
   12b18:	mov	r0, #4
   12b1c:	bl	11f00 <malloc@plt>
   12b20:	str	r0, [r5, #36]	; 0x24
   12b24:	bl	14648 <init_token_cpar@@Base>
   12b28:	movw	r4, #53144	; 0xcf98
   12b2c:	movt	r4, #2
   12b30:	mov	r0, #10
   12b34:	str	r0, [r4, #220]	; 0xdc
   12b38:	str	r5, [r4, #228]	; 0xe4
   12b3c:	mov	r0, r8
   12b40:	bl	161c0 <read_boolean_expression@@Base>
   12b44:	ldr	r1, [r4, #204]	; 0xcc
   12b48:	mov	r2, #16
   12b4c:	cmp	r1, #10
   12b50:	movweq	r2, #8
   12b54:	mov	r3, r9
   12b58:	ldr	r2, [r3, r2]!
   12b5c:	adds	r2, r2, #1
   12b60:	str	r2, [r3]
   12b64:	ldr	r2, [r3, #4]
   12b68:	adc	r2, r2, #0
   12b6c:	str	r2, [r3, #4]
   12b70:	cmp	r1, #10
   12b74:	bne	12bc4 <boolean_expression_complex@@Base+0x1ec>
   12b78:	ldr	r0, [r0]
   12b7c:	mov	r1, #32
   12b80:	cmp	r0, #5
   12b84:	movweq	r1, #24
   12b88:	mov	r2, r9
   12b8c:	ldr	r1, [r2, r1]!
   12b90:	adds	r1, r1, #1
   12b94:	str	r1, [r2]
   12b98:	ldr	r1, [r2, #4]
   12b9c:	adc	r1, r1, #0
   12ba0:	str	r1, [r2, #4]
   12ba4:	cmp	r0, #5
   12ba8:	bne	12be4 <boolean_expression_complex@@Base+0x20c>
   12bac:	ldrd	r0, [r9, #40]	; 0x28
   12bb0:	adds	r0, r0, #1
   12bb4:	adc	r1, r1, #0
   12bb8:	strd	r0, [r9, #40]	; 0x28
   12bbc:	sub	sp, fp, #24
   12bc0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12bc4:	movw	r0, #39873	; 0x9bc1
   12bc8:	movt	r0, #1
   12bcc:	movw	r1, #39566	; 0x9a8e
   12bd0:	movt	r1, #1
   12bd4:	movw	r3, #39900	; 0x9bdc
   12bd8:	movt	r3, #1
   12bdc:	mov	r2, #166	; 0xa6
   12be0:	bl	12020 <__assert_fail@plt>
   12be4:	movw	r0, #39841	; 0x9ba1
   12be8:	movt	r0, #1
   12bec:	movw	r1, #39566	; 0x9a8e
   12bf0:	movt	r1, #1
   12bf4:	movw	r3, #39900	; 0x9bdc
   12bf8:	movt	r3, #1
   12bfc:	mov	r2, #167	; 0xa7
   12c00:	bl	12020 <__assert_fail@plt>

00012c04 <boolean_binary_operator_is_read_properly@@Base>:
   12c04:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12c08:	add	fp, sp, #24
   12c0c:	sub	sp, sp, #16
   12c10:	movw	r7, #49920	; 0xc300
   12c14:	movt	r7, #2
   12c18:	ldrd	r0, [r7]
   12c1c:	adds	r0, r0, #1
   12c20:	adc	r1, r1, #0
   12c24:	strd	r0, [r7]
   12c28:	mov	r8, #3
   12c2c:	mov	r0, #3
   12c30:	bl	11f00 <malloc@plt>
   12c34:	mov	r5, r0
   12c38:	movw	r0, #15649	; 0x3d21
   12c3c:	strh	r0, [r5]
   12c40:	mov	r0, #0
   12c44:	strb	r0, [r5, #2]
   12c48:	mov	r4, sp
   12c4c:	add	r1, sp, #4
   12c50:	mov	r0, r4
   12c54:	bl	15a38 <init_grammar@@Base>
   12c58:	mov	r0, #12
   12c5c:	bl	11f00 <malloc@plt>
   12c60:	mov	r6, r0
   12c64:	mov	r0, #8
   12c68:	bl	11f00 <malloc@plt>
   12c6c:	str	r0, [r6]
   12c70:	mov	r1, #2
   12c74:	bl	14594 <init_token_int_value@@Base>
   12c78:	mov	r0, #8
   12c7c:	bl	11f00 <malloc@plt>
   12c80:	str	r0, [r6, #4]
   12c84:	mov	r1, r5
   12c88:	bl	147e8 <init_token_boolean_op@@Base>
   12c8c:	mov	r0, #8
   12c90:	bl	11f00 <malloc@plt>
   12c94:	str	r0, [r6, #8]
   12c98:	mov	r1, #1
   12c9c:	bl	14594 <init_token_int_value@@Base>
   12ca0:	movw	r5, #53144	; 0xcf98
   12ca4:	movt	r5, #2
   12ca8:	str	r8, [r5, #220]	; 0xdc
   12cac:	str	r6, [r5, #228]	; 0xe4
   12cb0:	mov	r0, r4
   12cb4:	bl	164ec <read_boolean_binary_expression@@Base>
   12cb8:	ldr	r1, [r5, #204]	; 0xcc
   12cbc:	mov	r2, #16
   12cc0:	cmp	r1, #3
   12cc4:	movweq	r2, #8
   12cc8:	mov	r3, r7
   12ccc:	ldr	r2, [r3, r2]!
   12cd0:	adds	r2, r2, #1
   12cd4:	str	r2, [r3]
   12cd8:	ldr	r2, [r3, #4]
   12cdc:	adc	r2, r2, #0
   12ce0:	str	r2, [r3, #4]
   12ce4:	cmp	r1, #3
   12ce8:	bne	12ddc <boolean_binary_operator_is_read_properly@@Base+0x1d8>
   12cec:	ldr	r1, [r0]
   12cf0:	mov	r2, #32
   12cf4:	cmp	r1, #5
   12cf8:	movweq	r2, #24
   12cfc:	mov	r3, r7
   12d00:	ldr	r2, [r3, r2]!
   12d04:	adds	r2, r2, #1
   12d08:	str	r2, [r3]
   12d0c:	ldr	r2, [r3, #4]
   12d10:	adc	r2, r2, #0
   12d14:	str	r2, [r3, #4]
   12d18:	cmp	r1, #5
   12d1c:	bne	12dfc <boolean_binary_operator_is_read_properly@@Base+0x1f8>
   12d20:	ldr	r1, [r0, #8]
   12d24:	ldr	r1, [r1]
   12d28:	mov	r2, #48	; 0x30
   12d2c:	cmp	r1, #1
   12d30:	movweq	r2, #40	; 0x28
   12d34:	mov	r3, r7
   12d38:	ldr	r2, [r3, r2]!
   12d3c:	adds	r2, r2, #1
   12d40:	str	r2, [r3]
   12d44:	ldr	r2, [r3, #4]
   12d48:	adc	r2, r2, #0
   12d4c:	str	r2, [r3, #4]
   12d50:	cmp	r1, #1
   12d54:	bne	12e1c <boolean_binary_operator_is_read_properly@@Base+0x218>
   12d58:	ldr	r1, [r0, #16]
   12d5c:	mov	r2, #64	; 0x40
   12d60:	cmp	r1, #1
   12d64:	movweq	r2, #56	; 0x38
   12d68:	mov	r3, r7
   12d6c:	ldr	r2, [r3, r2]!
   12d70:	adds	r2, r2, #1
   12d74:	str	r2, [r3]
   12d78:	ldr	r2, [r3, #4]
   12d7c:	adc	r2, r2, #0
   12d80:	str	r2, [r3, #4]
   12d84:	cmp	r1, #1
   12d88:	bne	12e3c <boolean_binary_operator_is_read_properly@@Base+0x238>
   12d8c:	ldr	r0, [r0, #12]
   12d90:	ldr	r0, [r0]
   12d94:	mov	r1, #80	; 0x50
   12d98:	cmp	r0, #1
   12d9c:	movweq	r1, #72	; 0x48
   12da0:	mov	r2, r7
   12da4:	ldr	r1, [r2, r1]!
   12da8:	adds	r1, r1, #1
   12dac:	str	r1, [r2]
   12db0:	ldr	r1, [r2, #4]
   12db4:	adc	r1, r1, #0
   12db8:	str	r1, [r2, #4]
   12dbc:	cmp	r0, #1
   12dc0:	bne	12e5c <boolean_binary_operator_is_read_properly@@Base+0x258>
   12dc4:	ldrd	r0, [r7, #88]	; 0x58
   12dc8:	adds	r0, r0, #1
   12dcc:	adc	r1, r1, #0
   12dd0:	strd	r0, [r7, #88]	; 0x58
   12dd4:	sub	sp, fp, #24
   12dd8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12ddc:	movw	r0, #39934	; 0x9bfe
   12de0:	movt	r0, #1
   12de4:	movw	r1, #39566	; 0x9a8e
   12de8:	movt	r1, #1
   12dec:	movw	r3, #39960	; 0x9c18
   12df0:	movt	r3, #1
   12df4:	mov	r2, #200	; 0xc8
   12df8:	bl	12020 <__assert_fail@plt>
   12dfc:	movw	r0, #39841	; 0x9ba1
   12e00:	movt	r0, #1
   12e04:	movw	r1, #39566	; 0x9a8e
   12e08:	movt	r1, #1
   12e0c:	movw	r3, #39960	; 0x9c18
   12e10:	movt	r3, #1
   12e14:	mov	r2, #201	; 0xc9
   12e18:	bl	12020 <__assert_fail@plt>
   12e1c:	movw	r0, #40008	; 0x9c48
   12e20:	movt	r0, #1
   12e24:	movw	r1, #39566	; 0x9a8e
   12e28:	movt	r1, #1
   12e2c:	movw	r3, #39960	; 0x9c18
   12e30:	movt	r3, #1
   12e34:	mov	r2, #203	; 0xcb
   12e38:	bl	12020 <__assert_fail@plt>
   12e3c:	movw	r0, #40035	; 0x9c63
   12e40:	movt	r0, #1
   12e44:	movw	r1, #39566	; 0x9a8e
   12e48:	movt	r1, #1
   12e4c:	movw	r3, #39960	; 0x9c18
   12e50:	movt	r3, #1
   12e54:	mov	r2, #204	; 0xcc
   12e58:	bl	12020 <__assert_fail@plt>
   12e5c:	movw	r0, #40060	; 0x9c7c
   12e60:	movt	r0, #1
   12e64:	movw	r1, #39566	; 0x9a8e
   12e68:	movt	r1, #1
   12e6c:	movw	r3, #39960	; 0x9c18
   12e70:	movt	r3, #1
   12e74:	mov	r2, #205	; 0xcd
   12e78:	bl	12020 <__assert_fail@plt>

00012e7c <boolean_unary_operator_is_read_properly@@Base>:
   12e7c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12e80:	add	fp, sp, #24
   12e84:	sub	sp, sp, #16
   12e88:	movw	r7, #50016	; 0xc360
   12e8c:	movt	r7, #2
   12e90:	ldrd	r0, [r7]
   12e94:	adds	r0, r0, #1
   12e98:	adc	r1, r1, #0
   12e9c:	strd	r0, [r7]
   12ea0:	mov	r8, #2
   12ea4:	mov	r0, #2
   12ea8:	bl	11f00 <malloc@plt>
   12eac:	mov	r5, r0
   12eb0:	mov	r0, #33	; 0x21
   12eb4:	strh	r0, [r5]
   12eb8:	mov	r4, sp
   12ebc:	add	r1, sp, #4
   12ec0:	mov	r0, r4
   12ec4:	bl	15a38 <init_grammar@@Base>
   12ec8:	mov	r0, #8
   12ecc:	bl	11f00 <malloc@plt>
   12ed0:	mov	r6, r0
   12ed4:	mov	r0, #8
   12ed8:	bl	11f00 <malloc@plt>
   12edc:	str	r0, [r6]
   12ee0:	mov	r1, r5
   12ee4:	bl	147e8 <init_token_boolean_op@@Base>
   12ee8:	mov	r0, #8
   12eec:	bl	11f00 <malloc@plt>
   12ef0:	str	r0, [r6, #4]
   12ef4:	mov	r1, #1
   12ef8:	bl	14594 <init_token_int_value@@Base>
   12efc:	movw	r5, #53144	; 0xcf98
   12f00:	movt	r5, #2
   12f04:	str	r8, [r5, #220]	; 0xdc
   12f08:	str	r6, [r5, #228]	; 0xe4
   12f0c:	mov	r0, r4
   12f10:	bl	16708 <read_boolean_unary_expression@@Base>
   12f14:	ldr	r1, [r5, #204]	; 0xcc
   12f18:	mov	r2, #16
   12f1c:	cmp	r1, #2
   12f20:	movweq	r2, #8
   12f24:	mov	r3, r7
   12f28:	ldr	r2, [r3, r2]!
   12f2c:	adds	r2, r2, #1
   12f30:	str	r2, [r3]
   12f34:	ldr	r2, [r3, #4]
   12f38:	adc	r2, r2, #0
   12f3c:	str	r2, [r3, #4]
   12f40:	cmp	r1, #2
   12f44:	bne	13034 <boolean_unary_operator_is_read_properly@@Base+0x1b8>
   12f48:	ldr	r1, [r0]
   12f4c:	mov	r2, #32
   12f50:	cmp	r1, #5
   12f54:	movweq	r2, #24
   12f58:	mov	r3, r7
   12f5c:	ldr	r2, [r3, r2]!
   12f60:	adds	r2, r2, #1
   12f64:	str	r2, [r3]
   12f68:	ldr	r2, [r3, #4]
   12f6c:	adc	r2, r2, #0
   12f70:	str	r2, [r3, #4]
   12f74:	cmp	r1, #5
   12f78:	bne	13054 <boolean_unary_operator_is_read_properly@@Base+0x1d8>
   12f7c:	ldr	r1, [r0, #8]
   12f80:	ldr	r1, [r1]
   12f84:	mov	r2, #48	; 0x30
   12f88:	cmp	r1, #1
   12f8c:	movweq	r2, #40	; 0x28
   12f90:	mov	r3, r7
   12f94:	ldr	r2, [r3, r2]!
   12f98:	adds	r2, r2, #1
   12f9c:	str	r2, [r3]
   12fa0:	ldr	r2, [r3, #4]
   12fa4:	adc	r2, r2, #0
   12fa8:	str	r2, [r3, #4]
   12fac:	cmp	r1, #1
   12fb0:	bne	13074 <boolean_unary_operator_is_read_properly@@Base+0x1f8>
   12fb4:	ldr	r1, [r0, #16]
   12fb8:	mov	r2, #64	; 0x40
   12fbc:	cmp	r1, #8
   12fc0:	movweq	r2, #56	; 0x38
   12fc4:	mov	r3, r7
   12fc8:	ldr	r2, [r3, r2]!
   12fcc:	adds	r2, r2, #1
   12fd0:	str	r2, [r3]
   12fd4:	ldr	r2, [r3, #4]
   12fd8:	adc	r2, r2, #0
   12fdc:	str	r2, [r3, #4]
   12fe0:	cmp	r1, #8
   12fe4:	bne	13094 <boolean_unary_operator_is_read_properly@@Base+0x218>
   12fe8:	ldr	r0, [r0, #12]
   12fec:	mov	r1, #80	; 0x50
   12ff0:	cmp	r0, #0
   12ff4:	movweq	r1, #72	; 0x48
   12ff8:	mov	r2, r7
   12ffc:	ldr	r1, [r2, r1]!
   13000:	adds	r1, r1, #1
   13004:	str	r1, [r2]
   13008:	ldr	r1, [r2, #4]
   1300c:	adc	r1, r1, #0
   13010:	str	r1, [r2, #4]
   13014:	cmp	r0, #0
   13018:	bne	130b4 <boolean_unary_operator_is_read_properly@@Base+0x238>
   1301c:	ldrd	r0, [r7, #88]	; 0x58
   13020:	adds	r0, r0, #1
   13024:	adc	r1, r1, #0
   13028:	strd	r0, [r7, #88]	; 0x58
   1302c:	sub	sp, fp, #24
   13030:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13034:	movw	r0, #39675	; 0x9afb
   13038:	movt	r0, #1
   1303c:	movw	r1, #39566	; 0x9a8e
   13040:	movt	r1, #1
   13044:	movw	r3, #40088	; 0x9c98
   13048:	movt	r3, #1
   1304c:	mov	r2, #235	; 0xeb
   13050:	bl	12020 <__assert_fail@plt>
   13054:	movw	r0, #39841	; 0x9ba1
   13058:	movt	r0, #1
   1305c:	movw	r1, #39566	; 0x9a8e
   13060:	movt	r1, #1
   13064:	movw	r3, #40088	; 0x9c98
   13068:	movt	r3, #1
   1306c:	mov	r2, #236	; 0xec
   13070:	bl	12020 <__assert_fail@plt>
   13074:	movw	r0, #40008	; 0x9c48
   13078:	movt	r0, #1
   1307c:	movw	r1, #39566	; 0x9a8e
   13080:	movt	r1, #1
   13084:	movw	r3, #40088	; 0x9c98
   13088:	movt	r3, #1
   1308c:	mov	r2, #238	; 0xee
   13090:	bl	12020 <__assert_fail@plt>
   13094:	movw	r0, #40135	; 0x9cc7
   13098:	movt	r0, #1
   1309c:	movw	r1, #39566	; 0x9a8e
   130a0:	movt	r1, #1
   130a4:	movw	r3, #40088	; 0x9c98
   130a8:	movt	r3, #1
   130ac:	mov	r2, #239	; 0xef
   130b0:	bl	12020 <__assert_fail@plt>
   130b4:	movw	r0, #40155	; 0x9cdb
   130b8:	movt	r0, #1
   130bc:	movw	r1, #39566	; 0x9a8e
   130c0:	movt	r1, #1
   130c4:	movw	r3, #40088	; 0x9c98
   130c8:	movt	r3, #1
   130cc:	mov	r2, #240	; 0xf0
   130d0:	bl	12020 <__assert_fail@plt>

000130d4 <if_statement_only@@Base>:
   130d4:	push	{r4, r5, r6, r7, fp, lr}
   130d8:	add	fp, sp, #16
   130dc:	sub	sp, sp, #16
   130e0:	movw	r7, #50112	; 0xc3c0
   130e4:	movt	r7, #2
   130e8:	ldrd	r0, [r7]
   130ec:	adds	r0, r0, #1
   130f0:	adc	r1, r1, #0
   130f4:	strd	r0, [r7]
   130f8:	mov	r4, sp
   130fc:	add	r1, sp, #4
   13100:	mov	r0, r4
   13104:	bl	15a38 <init_grammar@@Base>
   13108:	mov	r0, #3
   1310c:	bl	11f00 <malloc@plt>
   13110:	mov	r6, r0
   13114:	movw	r0, #15649	; 0x3d21
   13118:	strh	r0, [r6]
   1311c:	mov	r0, #0
   13120:	strb	r0, [r6, #2]
   13124:	mov	r0, #36	; 0x24
   13128:	bl	11f00 <malloc@plt>
   1312c:	mov	r5, r0
   13130:	mov	r0, #4
   13134:	bl	11f00 <malloc@plt>
   13138:	str	r0, [r5]
   1313c:	bl	14614 <init_token_opar@@Base>
   13140:	mov	r0, #8
   13144:	bl	11f00 <malloc@plt>
   13148:	str	r0, [r5, #4]
   1314c:	mov	r1, #1
   13150:	bl	14594 <init_token_int_value@@Base>
   13154:	mov	r0, #8
   13158:	bl	11f00 <malloc@plt>
   1315c:	str	r0, [r5, #8]
   13160:	mov	r1, #1
   13164:	bl	14594 <init_token_int_value@@Base>
   13168:	mov	r0, #8
   1316c:	bl	11f00 <malloc@plt>
   13170:	str	r0, [r5, #12]
   13174:	mov	r1, r6
   13178:	bl	147e8 <init_token_boolean_op@@Base>
   1317c:	mov	r0, #8
   13180:	bl	11f00 <malloc@plt>
   13184:	str	r0, [r5, #16]
   13188:	mov	r1, #1
   1318c:	bl	14594 <init_token_int_value@@Base>
   13190:	mov	r0, #4
   13194:	bl	11f00 <malloc@plt>
   13198:	str	r0, [r5, #20]
   1319c:	bl	14648 <init_token_cpar@@Base>
   131a0:	mov	r0, #4
   131a4:	bl	11f00 <malloc@plt>
   131a8:	str	r0, [r5, #24]
   131ac:	bl	1467c <init_token_obra@@Base>
   131b0:	mov	r0, #4
   131b4:	bl	11f00 <malloc@plt>
   131b8:	str	r0, [r5, #28]
   131bc:	bl	146b0 <init_token_cbra@@Base>
   131c0:	mov	r0, #4
   131c4:	bl	11f00 <malloc@plt>
   131c8:	str	r0, [r5, #32]
   131cc:	bl	1474c <init_token_eof@@Base>
   131d0:	movw	r6, #53144	; 0xcf98
   131d4:	movt	r6, #2
   131d8:	mov	r0, #9
   131dc:	str	r0, [r6, #220]	; 0xdc
   131e0:	str	r5, [r6, #228]	; 0xe4
   131e4:	mov	r0, r4
   131e8:	bl	16054 <read_if_statement@@Base>
   131ec:	ldr	r1, [r6, #204]	; 0xcc
   131f0:	mov	r2, #16
   131f4:	cmp	r1, #9
   131f8:	movweq	r2, #8
   131fc:	mov	r3, r7
   13200:	ldr	r2, [r3, r2]!
   13204:	adds	r2, r2, #1
   13208:	str	r2, [r3]
   1320c:	ldr	r2, [r3, #4]
   13210:	adc	r2, r2, #0
   13214:	str	r2, [r3, #4]
   13218:	cmp	r1, #9
   1321c:	bne	1329c <if_statement_only@@Base+0x1c8>
   13220:	mov	r1, #32
   13224:	cmp	r0, #0
   13228:	movwne	r1, #24
   1322c:	mov	r2, r7
   13230:	ldr	r1, [r2, r1]!
   13234:	adds	r1, r1, #1
   13238:	str	r1, [r2]
   1323c:	ldr	r1, [r2, #4]
   13240:	adc	r1, r1, #0
   13244:	str	r1, [r2, #4]
   13248:	cmp	r0, #0
   1324c:	beq	132bc <if_statement_only@@Base+0x1e8>
   13250:	ldr	r0, [r0]
   13254:	mov	r1, #48	; 0x30
   13258:	cmp	r0, #4
   1325c:	movweq	r1, #40	; 0x28
   13260:	mov	r2, r7
   13264:	ldr	r1, [r2, r1]!
   13268:	adds	r1, r1, #1
   1326c:	str	r1, [r2]
   13270:	ldr	r1, [r2, #4]
   13274:	adc	r1, r1, #0
   13278:	str	r1, [r2, #4]
   1327c:	cmp	r0, #4
   13280:	bne	132dc <if_statement_only@@Base+0x208>
   13284:	ldrd	r0, [r7, #56]	; 0x38
   13288:	adds	r0, r0, #1
   1328c:	adc	r1, r1, #0
   13290:	strd	r0, [r7, #56]	; 0x38
   13294:	sub	sp, fp, #16
   13298:	pop	{r4, r5, r6, r7, fp, pc}
   1329c:	movw	r0, #40176	; 0x9cf0
   132a0:	movt	r0, #1
   132a4:	movw	r1, #39566	; 0x9a8e
   132a8:	movt	r1, #1
   132ac:	movw	r3, #40202	; 0x9d0a
   132b0:	movt	r3, #1
   132b4:	movw	r2, #283	; 0x11b
   132b8:	bl	12020 <__assert_fail@plt>
   132bc:	movw	r0, #40227	; 0x9d23
   132c0:	movt	r0, #1
   132c4:	movw	r1, #39566	; 0x9a8e
   132c8:	movt	r1, #1
   132cc:	movw	r3, #40202	; 0x9d0a
   132d0:	movt	r3, #1
   132d4:	mov	r2, #284	; 0x11c
   132d8:	bl	12020 <__assert_fail@plt>
   132dc:	movw	r0, #40239	; 0x9d2f
   132e0:	movt	r0, #1
   132e4:	movw	r1, #39566	; 0x9a8e
   132e8:	movt	r1, #1
   132ec:	movw	r3, #40202	; 0x9d0a
   132f0:	movt	r3, #1
   132f4:	movw	r2, #285	; 0x11d
   132f8:	bl	12020 <__assert_fail@plt>

000132fc <if_else_statements@@Base>:
   132fc:	push	{r4, r5, r6, r7, fp, lr}
   13300:	add	fp, sp, #16
   13304:	sub	sp, sp, #16
   13308:	movw	r7, #50176	; 0xc400
   1330c:	movt	r7, #2
   13310:	ldrd	r0, [r7]
   13314:	adds	r0, r0, #1
   13318:	adc	r1, r1, #0
   1331c:	strd	r0, [r7]
   13320:	mov	r4, sp
   13324:	add	r1, sp, #4
   13328:	mov	r0, r4
   1332c:	bl	15a38 <init_grammar@@Base>
   13330:	mov	r0, #3
   13334:	bl	11f00 <malloc@plt>
   13338:	mov	r6, r0
   1333c:	movw	r0, #15649	; 0x3d21
   13340:	strh	r0, [r6]
   13344:	mov	r0, #0
   13348:	strb	r0, [r6, #2]
   1334c:	mov	r0, #44	; 0x2c
   13350:	bl	11f00 <malloc@plt>
   13354:	mov	r5, r0
   13358:	mov	r0, #4
   1335c:	bl	11f00 <malloc@plt>
   13360:	str	r0, [r5]
   13364:	bl	14614 <init_token_opar@@Base>
   13368:	mov	r0, #8
   1336c:	bl	11f00 <malloc@plt>
   13370:	str	r0, [r5, #4]
   13374:	mov	r1, #1
   13378:	bl	14594 <init_token_int_value@@Base>
   1337c:	mov	r0, #8
   13380:	bl	11f00 <malloc@plt>
   13384:	str	r0, [r5, #8]
   13388:	mov	r1, #1
   1338c:	bl	14594 <init_token_int_value@@Base>
   13390:	mov	r0, #8
   13394:	bl	11f00 <malloc@plt>
   13398:	str	r0, [r5, #12]
   1339c:	mov	r1, r6
   133a0:	bl	147e8 <init_token_boolean_op@@Base>
   133a4:	mov	r0, #8
   133a8:	bl	11f00 <malloc@plt>
   133ac:	str	r0, [r5, #16]
   133b0:	mov	r1, #1
   133b4:	bl	14594 <init_token_int_value@@Base>
   133b8:	mov	r0, #4
   133bc:	bl	11f00 <malloc@plt>
   133c0:	str	r0, [r5, #20]
   133c4:	bl	14648 <init_token_cpar@@Base>
   133c8:	mov	r0, #4
   133cc:	bl	11f00 <malloc@plt>
   133d0:	str	r0, [r5, #24]
   133d4:	bl	1467c <init_token_obra@@Base>
   133d8:	mov	r0, #4
   133dc:	bl	11f00 <malloc@plt>
   133e0:	str	r0, [r5, #28]
   133e4:	bl	146b0 <init_token_cbra@@Base>
   133e8:	mov	r0, #4
   133ec:	bl	11f00 <malloc@plt>
   133f0:	str	r0, [r5, #32]
   133f4:	bl	147b4 <init_token_else@@Base>
   133f8:	mov	r0, #4
   133fc:	bl	11f00 <malloc@plt>
   13400:	str	r0, [r5, #36]	; 0x24
   13404:	bl	1467c <init_token_obra@@Base>
   13408:	mov	r0, #4
   1340c:	bl	11f00 <malloc@plt>
   13410:	str	r0, [r5, #40]	; 0x28
   13414:	bl	146b0 <init_token_cbra@@Base>
   13418:	movw	r6, #53144	; 0xcf98
   1341c:	movt	r6, #2
   13420:	mov	r0, #11
   13424:	str	r0, [r6, #220]	; 0xdc
   13428:	str	r5, [r6, #228]	; 0xe4
   1342c:	mov	r0, r4
   13430:	bl	16054 <read_if_statement@@Base>
   13434:	ldr	r1, [r6, #204]	; 0xcc
   13438:	mov	r2, #16
   1343c:	cmp	r1, #11
   13440:	movweq	r2, #8
   13444:	mov	r3, r7
   13448:	ldr	r2, [r3, r2]!
   1344c:	adds	r2, r2, #1
   13450:	str	r2, [r3]
   13454:	ldr	r2, [r3, #4]
   13458:	adc	r2, r2, #0
   1345c:	str	r2, [r3, #4]
   13460:	cmp	r1, #11
   13464:	bne	134e4 <if_else_statements@@Base+0x1e8>
   13468:	mov	r1, #32
   1346c:	cmp	r0, #0
   13470:	movwne	r1, #24
   13474:	mov	r2, r7
   13478:	ldr	r1, [r2, r1]!
   1347c:	adds	r1, r1, #1
   13480:	str	r1, [r2]
   13484:	ldr	r1, [r2, #4]
   13488:	adc	r1, r1, #0
   1348c:	str	r1, [r2, #4]
   13490:	cmp	r0, #0
   13494:	beq	13504 <if_else_statements@@Base+0x208>
   13498:	ldr	r0, [r0]
   1349c:	mov	r1, #48	; 0x30
   134a0:	cmp	r0, #4
   134a4:	movweq	r1, #40	; 0x28
   134a8:	mov	r2, r7
   134ac:	ldr	r1, [r2, r1]!
   134b0:	adds	r1, r1, #1
   134b4:	str	r1, [r2]
   134b8:	ldr	r1, [r2, #4]
   134bc:	adc	r1, r1, #0
   134c0:	str	r1, [r2, #4]
   134c4:	cmp	r0, #4
   134c8:	bne	13524 <if_else_statements@@Base+0x228>
   134cc:	ldrd	r0, [r7, #56]	; 0x38
   134d0:	adds	r0, r0, #1
   134d4:	adc	r1, r1, #0
   134d8:	strd	r0, [r7, #56]	; 0x38
   134dc:	sub	sp, fp, #16
   134e0:	pop	{r4, r5, r6, r7, fp, pc}
   134e4:	movw	r0, #40257	; 0x9d41
   134e8:	movt	r0, #1
   134ec:	movw	r1, #39566	; 0x9a8e
   134f0:	movt	r1, #1
   134f4:	movw	r3, #40284	; 0x9d5c
   134f8:	movt	r3, #1
   134fc:	mov	r2, #332	; 0x14c
   13500:	bl	12020 <__assert_fail@plt>
   13504:	movw	r0, #40227	; 0x9d23
   13508:	movt	r0, #1
   1350c:	movw	r1, #39566	; 0x9a8e
   13510:	movt	r1, #1
   13514:	movw	r3, #40284	; 0x9d5c
   13518:	movt	r3, #1
   1351c:	movw	r2, #333	; 0x14d
   13520:	bl	12020 <__assert_fail@plt>
   13524:	movw	r0, #40239	; 0x9d2f
   13528:	movt	r0, #1
   1352c:	movw	r1, #39566	; 0x9a8e
   13530:	movt	r1, #1
   13534:	movw	r3, #40284	; 0x9d5c
   13538:	movt	r3, #1
   1353c:	movw	r2, #334	; 0x14e
   13540:	bl	12020 <__assert_fail@plt>

00013544 <body_with_two_returns@@Base>:
   13544:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13548:	add	fp, sp, #24
   1354c:	sub	sp, sp, #16
   13550:	movw	r6, #50240	; 0xc440
   13554:	movt	r6, #2
   13558:	ldrd	r0, [r6]
   1355c:	adds	r0, r0, #1
   13560:	adc	r1, r1, #0
   13564:	strd	r0, [r6]
   13568:	mov	r9, sp
   1356c:	add	r1, sp, #4
   13570:	mov	r0, r9
   13574:	bl	15a38 <init_grammar@@Base>
   13578:	mov	r7, #32
   1357c:	mov	r0, #32
   13580:	bl	11f00 <malloc@plt>
   13584:	mov	r5, r0
   13588:	mov	r0, #4
   1358c:	bl	11f00 <malloc@plt>
   13590:	str	r0, [r5]
   13594:	bl	1467c <init_token_obra@@Base>
   13598:	mov	r0, #4
   1359c:	bl	11f00 <malloc@plt>
   135a0:	str	r0, [r5, #4]
   135a4:	bl	146e4 <init_token_return@@Base>
   135a8:	mov	r8, #8
   135ac:	mov	r0, #8
   135b0:	bl	11f00 <malloc@plt>
   135b4:	str	r0, [r5, #8]
   135b8:	mov	r1, #1
   135bc:	bl	14594 <init_token_int_value@@Base>
   135c0:	mov	r0, #4
   135c4:	bl	11f00 <malloc@plt>
   135c8:	str	r0, [r5, #12]
   135cc:	bl	14718 <init_token_semicolon@@Base>
   135d0:	mov	r0, #4
   135d4:	bl	11f00 <malloc@plt>
   135d8:	str	r0, [r5, #16]
   135dc:	bl	146e4 <init_token_return@@Base>
   135e0:	mov	r0, #8
   135e4:	bl	11f00 <malloc@plt>
   135e8:	str	r0, [r5, #20]
   135ec:	mov	r1, #1
   135f0:	bl	14594 <init_token_int_value@@Base>
   135f4:	mov	r0, #4
   135f8:	bl	11f00 <malloc@plt>
   135fc:	str	r0, [r5, #24]
   13600:	bl	14718 <init_token_semicolon@@Base>
   13604:	mov	r0, #4
   13608:	bl	11f00 <malloc@plt>
   1360c:	str	r0, [r5, #28]
   13610:	bl	146b0 <init_token_cbra@@Base>
   13614:	movw	r4, #53144	; 0xcf98
   13618:	movt	r4, #2
   1361c:	str	r8, [r4, #220]	; 0xdc
   13620:	str	r5, [r4, #228]	; 0xe4
   13624:	mov	r0, r9
   13628:	bl	15c9c <read_body@@Base>
   1362c:	ldr	r1, [r4, #204]	; 0xcc
   13630:	cmp	r1, #8
   13634:	mov	r2, r1
   13638:	movwne	r2, #16
   1363c:	mov	r3, r6
   13640:	ldr	r2, [r3, r2]!
   13644:	adds	r2, r2, #1
   13648:	str	r2, [r3]
   1364c:	ldr	r2, [r3, #4]
   13650:	adc	r2, r2, #0
   13654:	str	r2, [r3, #4]
   13658:	cmp	r1, #8
   1365c:	bne	13744 <body_with_two_returns@@Base+0x200>
   13660:	cmp	r0, #0
   13664:	movwne	r7, #24
   13668:	mov	r1, r6
   1366c:	ldr	r2, [r1, r7]!
   13670:	adds	r2, r2, #1
   13674:	str	r2, [r1]
   13678:	ldr	r2, [r1, #4]
   1367c:	adc	r2, r2, #0
   13680:	str	r2, [r1, #4]
   13684:	cmp	r0, #0
   13688:	beq	13764 <body_with_two_returns@@Base+0x220>
   1368c:	ldr	r1, [r0]
   13690:	mov	r2, #48	; 0x30
   13694:	cmp	r1, #3
   13698:	movweq	r2, #40	; 0x28
   1369c:	mov	r3, r6
   136a0:	ldr	r2, [r3, r2]!
   136a4:	adds	r2, r2, #1
   136a8:	str	r2, [r3]
   136ac:	ldr	r2, [r3, #4]
   136b0:	adc	r2, r2, #0
   136b4:	str	r2, [r3, #4]
   136b8:	cmp	r1, #3
   136bc:	bne	13784 <body_with_two_returns@@Base+0x240>
   136c0:	ldr	r0, [r0, #4]
   136c4:	ldr	r1, [r0]
   136c8:	mov	r2, #64	; 0x40
   136cc:	cmp	r1, #3
   136d0:	movweq	r2, #56	; 0x38
   136d4:	mov	r3, r6
   136d8:	ldr	r2, [r3, r2]!
   136dc:	adds	r2, r2, #1
   136e0:	str	r2, [r3]
   136e4:	ldr	r2, [r3, #4]
   136e8:	adc	r2, r2, #0
   136ec:	str	r2, [r3, #4]
   136f0:	cmp	r1, #3
   136f4:	bne	137a4 <body_with_two_returns@@Base+0x260>
   136f8:	ldr	r0, [r0, #4]
   136fc:	mov	r1, #80	; 0x50
   13700:	cmp	r0, #0
   13704:	movweq	r1, #72	; 0x48
   13708:	mov	r2, r6
   1370c:	ldr	r1, [r2, r1]!
   13710:	adds	r1, r1, #1
   13714:	str	r1, [r2]
   13718:	ldr	r1, [r2, #4]
   1371c:	adc	r1, r1, #0
   13720:	str	r1, [r2, #4]
   13724:	cmp	r0, #0
   13728:	bne	137c4 <body_with_two_returns@@Base+0x280>
   1372c:	ldrd	r0, [r6, #88]	; 0x58
   13730:	adds	r0, r0, #1
   13734:	adc	r1, r1, #0
   13738:	strd	r0, [r6, #88]	; 0x58
   1373c:	sub	sp, fp, #24
   13740:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13744:	movw	r0, #40310	; 0x9d76
   13748:	movt	r0, #1
   1374c:	movw	r1, #39566	; 0x9a8e
   13750:	movt	r1, #1
   13754:	movw	r3, #40336	; 0x9d90
   13758:	movt	r3, #1
   1375c:	movw	r2, #371	; 0x173
   13760:	bl	12020 <__assert_fail@plt>
   13764:	movw	r0, #40227	; 0x9d23
   13768:	movt	r0, #1
   1376c:	movw	r1, #39566	; 0x9a8e
   13770:	movt	r1, #1
   13774:	movw	r3, #40336	; 0x9d90
   13778:	movt	r3, #1
   1377c:	mov	r2, #372	; 0x174
   13780:	bl	12020 <__assert_fail@plt>
   13784:	movw	r0, #40365	; 0x9dad
   13788:	movt	r0, #1
   1378c:	movw	r1, #39566	; 0x9a8e
   13790:	movt	r1, #1
   13794:	movw	r3, #40336	; 0x9d90
   13798:	movt	r3, #1
   1379c:	movw	r2, #373	; 0x175
   137a0:	bl	12020 <__assert_fail@plt>
   137a4:	movw	r0, #40387	; 0x9dc3
   137a8:	movt	r0, #1
   137ac:	movw	r1, #39566	; 0x9a8e
   137b0:	movt	r1, #1
   137b4:	movw	r3, #40336	; 0x9d90
   137b8:	movt	r3, #1
   137bc:	movw	r2, #374	; 0x176
   137c0:	bl	12020 <__assert_fail@plt>
   137c4:	movw	r0, #40415	; 0x9ddf
   137c8:	movt	r0, #1
   137cc:	movw	r1, #39566	; 0x9a8e
   137d0:	movt	r1, #1
   137d4:	movw	r3, #40336	; 0x9d90
   137d8:	movt	r3, #1
   137dc:	movw	r2, #375	; 0x177
   137e0:	bl	12020 <__assert_fail@plt>

000137e4 <body_with_one_return@@Base>:
   137e4:	push	{r4, r5, r6, r7, fp, lr}
   137e8:	add	fp, sp, #16
   137ec:	sub	sp, sp, #16
   137f0:	movw	r6, #50336	; 0xc4a0
   137f4:	movt	r6, #2
   137f8:	ldrd	r0, [r6]
   137fc:	adds	r0, r0, #1
   13800:	adc	r1, r1, #0
   13804:	strd	r0, [r6]
   13808:	mov	r4, sp
   1380c:	add	r1, sp, #4
   13810:	mov	r0, r4
   13814:	bl	15a38 <init_grammar@@Base>
   13818:	mov	r0, #20
   1381c:	bl	11f00 <malloc@plt>
   13820:	mov	r5, r0
   13824:	mov	r0, #4
   13828:	bl	11f00 <malloc@plt>
   1382c:	str	r0, [r5]
   13830:	bl	1467c <init_token_obra@@Base>
   13834:	mov	r0, #4
   13838:	bl	11f00 <malloc@plt>
   1383c:	str	r0, [r5, #4]
   13840:	bl	146e4 <init_token_return@@Base>
   13844:	mov	r0, #8
   13848:	bl	11f00 <malloc@plt>
   1384c:	str	r0, [r5, #8]
   13850:	mov	r1, #1
   13854:	bl	14594 <init_token_int_value@@Base>
   13858:	mov	r0, #4
   1385c:	bl	11f00 <malloc@plt>
   13860:	str	r0, [r5, #12]
   13864:	bl	14718 <init_token_semicolon@@Base>
   13868:	mov	r0, #4
   1386c:	bl	11f00 <malloc@plt>
   13870:	str	r0, [r5, #16]
   13874:	bl	146b0 <init_token_cbra@@Base>
   13878:	movw	r7, #53144	; 0xcf98
   1387c:	movt	r7, #2
   13880:	mov	r0, #5
   13884:	str	r0, [r7, #220]	; 0xdc
   13888:	str	r5, [r7, #228]	; 0xe4
   1388c:	mov	r0, r4
   13890:	bl	15c9c <read_body@@Base>
   13894:	ldr	r1, [r7, #204]	; 0xcc
   13898:	mov	r2, #16
   1389c:	cmp	r1, #5
   138a0:	movweq	r2, #8
   138a4:	mov	r3, r6
   138a8:	ldr	r2, [r3, r2]!
   138ac:	adds	r2, r2, #1
   138b0:	str	r2, [r3]
   138b4:	ldr	r2, [r3, #4]
   138b8:	adc	r2, r2, #0
   138bc:	str	r2, [r3, #4]
   138c0:	cmp	r1, #5
   138c4:	bne	13978 <body_with_one_return@@Base+0x194>
   138c8:	mov	r1, #32
   138cc:	cmp	r0, #0
   138d0:	movwne	r1, #24
   138d4:	mov	r2, r6
   138d8:	ldr	r1, [r2, r1]!
   138dc:	adds	r1, r1, #1
   138e0:	str	r1, [r2]
   138e4:	ldr	r1, [r2, #4]
   138e8:	adc	r1, r1, #0
   138ec:	str	r1, [r2, #4]
   138f0:	cmp	r0, #0
   138f4:	beq	13998 <body_with_one_return@@Base+0x1b4>
   138f8:	ldr	r1, [r0]
   138fc:	mov	r2, #48	; 0x30
   13900:	cmp	r1, #3
   13904:	movweq	r2, #40	; 0x28
   13908:	mov	r3, r6
   1390c:	ldr	r2, [r3, r2]!
   13910:	adds	r2, r2, #1
   13914:	str	r2, [r3]
   13918:	ldr	r2, [r3, #4]
   1391c:	adc	r2, r2, #0
   13920:	str	r2, [r3, #4]
   13924:	cmp	r1, #3
   13928:	bne	139b8 <body_with_one_return@@Base+0x1d4>
   1392c:	ldr	r0, [r0, #4]
   13930:	mov	r1, #64	; 0x40
   13934:	cmp	r0, #0
   13938:	movweq	r1, #56	; 0x38
   1393c:	mov	r2, r6
   13940:	ldr	r1, [r2, r1]!
   13944:	adds	r1, r1, #1
   13948:	str	r1, [r2]
   1394c:	ldr	r1, [r2, #4]
   13950:	adc	r1, r1, #0
   13954:	str	r1, [r2, #4]
   13958:	cmp	r0, #0
   1395c:	bne	139d8 <body_with_one_return@@Base+0x1f4>
   13960:	ldrd	r0, [r6, #72]	; 0x48
   13964:	adds	r0, r0, #1
   13968:	adc	r1, r1, #0
   1396c:	strd	r0, [r6, #72]	; 0x48
   13970:	sub	sp, fp, #16
   13974:	pop	{r4, r5, r6, r7, fp, pc}
   13978:	movw	r0, #39741	; 0x9b3d
   1397c:	movt	r0, #1
   13980:	movw	r1, #39566	; 0x9a8e
   13984:	movt	r1, #1
   13988:	movw	r3, #40439	; 0x9df7
   1398c:	movt	r3, #1
   13990:	movw	r2, #406	; 0x196
   13994:	bl	12020 <__assert_fail@plt>
   13998:	movw	r0, #40227	; 0x9d23
   1399c:	movt	r0, #1
   139a0:	movw	r1, #39566	; 0x9a8e
   139a4:	movt	r1, #1
   139a8:	movw	r3, #40439	; 0x9df7
   139ac:	movt	r3, #1
   139b0:	movw	r2, #407	; 0x197
   139b4:	bl	12020 <__assert_fail@plt>
   139b8:	movw	r0, #40365	; 0x9dad
   139bc:	movt	r0, #1
   139c0:	movw	r1, #39566	; 0x9a8e
   139c4:	movt	r1, #1
   139c8:	movw	r3, #40439	; 0x9df7
   139cc:	movt	r3, #1
   139d0:	mov	r2, #408	; 0x198
   139d4:	bl	12020 <__assert_fail@plt>
   139d8:	movw	r0, #40467	; 0x9e13
   139dc:	movt	r0, #1
   139e0:	movw	r1, #39566	; 0x9a8e
   139e4:	movt	r1, #1
   139e8:	movw	r3, #40439	; 0x9df7
   139ec:	movt	r3, #1
   139f0:	movw	r2, #409	; 0x199
   139f4:	bl	12020 <__assert_fail@plt>

000139f8 <if_statement_inside_if_statement@@Base>:
   139f8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   139fc:	add	fp, sp, #24
   13a00:	sub	sp, sp, #16
   13a04:	movw	r4, #50416	; 0xc4f0
   13a08:	movt	r4, #2
   13a0c:	ldrd	r0, [r4]
   13a10:	adds	r0, r0, #1
   13a14:	adc	r1, r1, #0
   13a18:	strd	r0, [r4]
   13a1c:	mov	r8, sp
   13a20:	add	r1, sp, #4
   13a24:	mov	r0, r8
   13a28:	bl	15a38 <init_grammar@@Base>
   13a2c:	mov	r0, #3
   13a30:	bl	11f00 <malloc@plt>
   13a34:	mov	r7, r0
   13a38:	mov	r0, #3
   13a3c:	bl	11f00 <malloc@plt>
   13a40:	mov	r6, r0
   13a44:	movw	r0, #15649	; 0x3d21
   13a48:	strh	r0, [r7]
   13a4c:	mov	r1, #0
   13a50:	strb	r1, [r7, #2]
   13a54:	strb	r1, [r6, #2]
   13a58:	strh	r0, [r6]
   13a5c:	mov	r0, #76	; 0x4c
   13a60:	bl	11f00 <malloc@plt>
   13a64:	mov	r5, r0
   13a68:	mov	r0, #4
   13a6c:	bl	11f00 <malloc@plt>
   13a70:	str	r0, [r5]
   13a74:	bl	14614 <init_token_opar@@Base>
   13a78:	mov	r0, #8
   13a7c:	bl	11f00 <malloc@plt>
   13a80:	str	r0, [r5, #4]
   13a84:	mov	r1, #1
   13a88:	bl	14594 <init_token_int_value@@Base>
   13a8c:	mov	r0, #8
   13a90:	bl	11f00 <malloc@plt>
   13a94:	str	r0, [r5, #8]
   13a98:	mov	r1, #1
   13a9c:	bl	14594 <init_token_int_value@@Base>
   13aa0:	mov	r0, #8
   13aa4:	bl	11f00 <malloc@plt>
   13aa8:	str	r0, [r5, #12]
   13aac:	mov	r1, r7
   13ab0:	bl	147e8 <init_token_boolean_op@@Base>
   13ab4:	mov	r0, #8
   13ab8:	bl	11f00 <malloc@plt>
   13abc:	str	r0, [r5, #16]
   13ac0:	mov	r1, #1
   13ac4:	bl	14594 <init_token_int_value@@Base>
   13ac8:	mov	r0, #4
   13acc:	bl	11f00 <malloc@plt>
   13ad0:	str	r0, [r5, #20]
   13ad4:	bl	14648 <init_token_cpar@@Base>
   13ad8:	mov	r0, #4
   13adc:	bl	11f00 <malloc@plt>
   13ae0:	str	r0, [r5, #24]
   13ae4:	bl	1467c <init_token_obra@@Base>
   13ae8:	mov	r0, #4
   13aec:	bl	11f00 <malloc@plt>
   13af0:	str	r0, [r5, #28]
   13af4:	bl	14780 <init_token_if@@Base>
   13af8:	mov	r0, #4
   13afc:	bl	11f00 <malloc@plt>
   13b00:	str	r0, [r5, #32]
   13b04:	bl	14614 <init_token_opar@@Base>
   13b08:	mov	r0, #8
   13b0c:	bl	11f00 <malloc@plt>
   13b10:	str	r0, [r5, #36]	; 0x24
   13b14:	mov	r1, #1
   13b18:	bl	14594 <init_token_int_value@@Base>
   13b1c:	mov	r0, #8
   13b20:	bl	11f00 <malloc@plt>
   13b24:	str	r0, [r5, #40]	; 0x28
   13b28:	mov	r1, #1
   13b2c:	bl	14594 <init_token_int_value@@Base>
   13b30:	mov	r0, #8
   13b34:	bl	11f00 <malloc@plt>
   13b38:	str	r0, [r5, #44]	; 0x2c
   13b3c:	mov	r1, r6
   13b40:	bl	147e8 <init_token_boolean_op@@Base>
   13b44:	mov	r0, #8
   13b48:	bl	11f00 <malloc@plt>
   13b4c:	str	r0, [r5, #48]	; 0x30
   13b50:	mov	r1, #1
   13b54:	bl	14594 <init_token_int_value@@Base>
   13b58:	mov	r0, #4
   13b5c:	bl	11f00 <malloc@plt>
   13b60:	str	r0, [r5, #52]	; 0x34
   13b64:	bl	14648 <init_token_cpar@@Base>
   13b68:	mov	r0, #4
   13b6c:	bl	11f00 <malloc@plt>
   13b70:	str	r0, [r5, #56]	; 0x38
   13b74:	bl	1467c <init_token_obra@@Base>
   13b78:	mov	r0, #4
   13b7c:	bl	11f00 <malloc@plt>
   13b80:	str	r0, [r5, #60]	; 0x3c
   13b84:	bl	146b0 <init_token_cbra@@Base>
   13b88:	mov	r0, #4
   13b8c:	bl	11f00 <malloc@plt>
   13b90:	str	r0, [r5, #64]	; 0x40
   13b94:	bl	146b0 <init_token_cbra@@Base>
   13b98:	mov	r0, #4
   13b9c:	bl	11f00 <malloc@plt>
   13ba0:	str	r0, [r5, #68]	; 0x44
   13ba4:	bl	146b0 <init_token_cbra@@Base>
   13ba8:	mov	r0, #4
   13bac:	bl	11f00 <malloc@plt>
   13bb0:	str	r0, [r5, #72]	; 0x48
   13bb4:	bl	1474c <init_token_eof@@Base>
   13bb8:	movw	r6, #53144	; 0xcf98
   13bbc:	movt	r6, #2
   13bc0:	mov	r0, #19
   13bc4:	str	r0, [r6, #220]	; 0xdc
   13bc8:	str	r5, [r6, #228]	; 0xe4
   13bcc:	mov	r0, r8
   13bd0:	bl	16054 <read_if_statement@@Base>
   13bd4:	ldr	r1, [r6, #204]	; 0xcc
   13bd8:	mov	r2, #16
   13bdc:	cmp	r1, #19
   13be0:	movweq	r2, #8
   13be4:	mov	r3, r4
   13be8:	ldr	r2, [r3, r2]!
   13bec:	adds	r2, r2, #1
   13bf0:	str	r2, [r3]
   13bf4:	ldr	r2, [r3, #4]
   13bf8:	adc	r2, r2, #0
   13bfc:	str	r2, [r3, #4]
   13c00:	cmp	r1, #19
   13c04:	bne	13c84 <if_statement_inside_if_statement@@Base+0x28c>
   13c08:	mov	r1, #32
   13c0c:	cmp	r0, #0
   13c10:	movwne	r1, #24
   13c14:	mov	r2, r4
   13c18:	ldr	r1, [r2, r1]!
   13c1c:	adds	r1, r1, #1
   13c20:	str	r1, [r2]
   13c24:	ldr	r1, [r2, #4]
   13c28:	adc	r1, r1, #0
   13c2c:	str	r1, [r2, #4]
   13c30:	cmp	r0, #0
   13c34:	beq	13ca4 <if_statement_inside_if_statement@@Base+0x2ac>
   13c38:	ldr	r0, [r0]
   13c3c:	mov	r1, #48	; 0x30
   13c40:	cmp	r0, #4
   13c44:	movweq	r1, #40	; 0x28
   13c48:	mov	r2, r4
   13c4c:	ldr	r1, [r2, r1]!
   13c50:	adds	r1, r1, #1
   13c54:	str	r1, [r2]
   13c58:	ldr	r1, [r2, #4]
   13c5c:	adc	r1, r1, #0
   13c60:	str	r1, [r2, #4]
   13c64:	cmp	r0, #4
   13c68:	bne	13cc4 <if_statement_inside_if_statement@@Base+0x2cc>
   13c6c:	ldrd	r0, [r4, #56]	; 0x38
   13c70:	adds	r0, r0, #1
   13c74:	adc	r1, r1, #0
   13c78:	strd	r0, [r4, #56]	; 0x38
   13c7c:	sub	sp, fp, #24
   13c80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c84:	movw	r0, #40485	; 0x9e25
   13c88:	movt	r0, #1
   13c8c:	movw	r1, #39566	; 0x9a8e
   13c90:	movt	r1, #1
   13c94:	movw	r3, #40512	; 0x9e40
   13c98:	movt	r3, #1
   13c9c:	mov	r2, #480	; 0x1e0
   13ca0:	bl	12020 <__assert_fail@plt>
   13ca4:	movw	r0, #40227	; 0x9d23
   13ca8:	movt	r0, #1
   13cac:	movw	r1, #39566	; 0x9a8e
   13cb0:	movt	r1, #1
   13cb4:	movw	r3, #40512	; 0x9e40
   13cb8:	movt	r3, #1
   13cbc:	movw	r2, #481	; 0x1e1
   13cc0:	bl	12020 <__assert_fail@plt>
   13cc4:	movw	r0, #40239	; 0x9d2f
   13cc8:	movt	r0, #1
   13ccc:	movw	r1, #39566	; 0x9a8e
   13cd0:	movt	r1, #1
   13cd4:	movw	r3, #40512	; 0x9e40
   13cd8:	movt	r3, #1
   13cdc:	movw	r2, #482	; 0x1e2
   13ce0:	bl	12020 <__assert_fail@plt>

00013ce4 <if_statement_inside_else_statement@@Base>:
   13ce4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13ce8:	add	fp, sp, #24
   13cec:	sub	sp, sp, #16
   13cf0:	movw	r4, #50480	; 0xc530
   13cf4:	movt	r4, #2
   13cf8:	ldrd	r0, [r4]
   13cfc:	adds	r0, r0, #1
   13d00:	adc	r1, r1, #0
   13d04:	strd	r0, [r4]
   13d08:	mov	r8, sp
   13d0c:	add	r1, sp, #4
   13d10:	mov	r0, r8
   13d14:	bl	15a38 <init_grammar@@Base>
   13d18:	mov	r0, #3
   13d1c:	bl	11f00 <malloc@plt>
   13d20:	mov	r7, r0
   13d24:	mov	r0, #3
   13d28:	bl	11f00 <malloc@plt>
   13d2c:	mov	r6, r0
   13d30:	movw	r0, #15649	; 0x3d21
   13d34:	strh	r0, [r7]
   13d38:	mov	r1, #0
   13d3c:	strb	r1, [r7, #2]
   13d40:	strb	r1, [r6, #2]
   13d44:	strh	r0, [r6]
   13d48:	mov	r0, #84	; 0x54
   13d4c:	bl	11f00 <malloc@plt>
   13d50:	mov	r5, r0
   13d54:	mov	r0, #4
   13d58:	bl	11f00 <malloc@plt>
   13d5c:	str	r0, [r5]
   13d60:	bl	14614 <init_token_opar@@Base>
   13d64:	mov	r0, #8
   13d68:	bl	11f00 <malloc@plt>
   13d6c:	str	r0, [r5, #4]
   13d70:	mov	r1, #1
   13d74:	bl	14594 <init_token_int_value@@Base>
   13d78:	mov	r0, #8
   13d7c:	bl	11f00 <malloc@plt>
   13d80:	str	r0, [r5, #8]
   13d84:	mov	r1, #1
   13d88:	bl	14594 <init_token_int_value@@Base>
   13d8c:	mov	r0, #8
   13d90:	bl	11f00 <malloc@plt>
   13d94:	str	r0, [r5, #12]
   13d98:	mov	r1, r7
   13d9c:	bl	147e8 <init_token_boolean_op@@Base>
   13da0:	mov	r0, #8
   13da4:	bl	11f00 <malloc@plt>
   13da8:	str	r0, [r5, #16]
   13dac:	mov	r1, #1
   13db0:	bl	14594 <init_token_int_value@@Base>
   13db4:	mov	r0, #4
   13db8:	bl	11f00 <malloc@plt>
   13dbc:	str	r0, [r5, #20]
   13dc0:	bl	14648 <init_token_cpar@@Base>
   13dc4:	mov	r0, #4
   13dc8:	bl	11f00 <malloc@plt>
   13dcc:	str	r0, [r5, #24]
   13dd0:	bl	1467c <init_token_obra@@Base>
   13dd4:	mov	r0, #4
   13dd8:	bl	11f00 <malloc@plt>
   13ddc:	str	r0, [r5, #28]
   13de0:	bl	146b0 <init_token_cbra@@Base>
   13de4:	mov	r0, #4
   13de8:	bl	11f00 <malloc@plt>
   13dec:	str	r0, [r5, #32]
   13df0:	bl	147b4 <init_token_else@@Base>
   13df4:	mov	r0, #4
   13df8:	bl	11f00 <malloc@plt>
   13dfc:	str	r0, [r5, #36]	; 0x24
   13e00:	bl	1467c <init_token_obra@@Base>
   13e04:	mov	r0, #4
   13e08:	bl	11f00 <malloc@plt>
   13e0c:	str	r0, [r5, #40]	; 0x28
   13e10:	bl	14780 <init_token_if@@Base>
   13e14:	mov	r0, #4
   13e18:	bl	11f00 <malloc@plt>
   13e1c:	str	r0, [r5, #44]	; 0x2c
   13e20:	bl	14614 <init_token_opar@@Base>
   13e24:	mov	r0, #8
   13e28:	bl	11f00 <malloc@plt>
   13e2c:	str	r0, [r5, #48]	; 0x30
   13e30:	mov	r1, #1
   13e34:	bl	14594 <init_token_int_value@@Base>
   13e38:	mov	r0, #8
   13e3c:	bl	11f00 <malloc@plt>
   13e40:	str	r0, [r5, #52]	; 0x34
   13e44:	mov	r1, #1
   13e48:	bl	14594 <init_token_int_value@@Base>
   13e4c:	mov	r0, #8
   13e50:	bl	11f00 <malloc@plt>
   13e54:	str	r0, [r5, #56]	; 0x38
   13e58:	mov	r1, r6
   13e5c:	bl	147e8 <init_token_boolean_op@@Base>
   13e60:	mov	r0, #8
   13e64:	bl	11f00 <malloc@plt>
   13e68:	str	r0, [r5, #60]	; 0x3c
   13e6c:	mov	r1, #1
   13e70:	bl	14594 <init_token_int_value@@Base>
   13e74:	mov	r0, #4
   13e78:	bl	11f00 <malloc@plt>
   13e7c:	str	r0, [r5, #64]	; 0x40
   13e80:	bl	14648 <init_token_cpar@@Base>
   13e84:	mov	r0, #4
   13e88:	bl	11f00 <malloc@plt>
   13e8c:	str	r0, [r5, #68]	; 0x44
   13e90:	bl	1467c <init_token_obra@@Base>
   13e94:	mov	r0, #4
   13e98:	bl	11f00 <malloc@plt>
   13e9c:	str	r0, [r5, #72]	; 0x48
   13ea0:	bl	146b0 <init_token_cbra@@Base>
   13ea4:	mov	r0, #4
   13ea8:	bl	11f00 <malloc@plt>
   13eac:	str	r0, [r5, #76]	; 0x4c
   13eb0:	bl	146b0 <init_token_cbra@@Base>
   13eb4:	mov	r0, #4
   13eb8:	bl	11f00 <malloc@plt>
   13ebc:	str	r0, [r5, #80]	; 0x50
   13ec0:	bl	146b0 <init_token_cbra@@Base>
   13ec4:	movw	r6, #53144	; 0xcf98
   13ec8:	movt	r6, #2
   13ecc:	mov	r0, #21
   13ed0:	str	r0, [r6, #220]	; 0xdc
   13ed4:	str	r5, [r6, #228]	; 0xe4
   13ed8:	mov	r0, r8
   13edc:	bl	16054 <read_if_statement@@Base>
   13ee0:	ldr	r1, [r6, #204]	; 0xcc
   13ee4:	mov	r2, #16
   13ee8:	cmp	r1, #21
   13eec:	movweq	r2, #8
   13ef0:	mov	r3, r4
   13ef4:	ldr	r2, [r3, r2]!
   13ef8:	adds	r2, r2, #1
   13efc:	str	r2, [r3]
   13f00:	ldr	r2, [r3, #4]
   13f04:	adc	r2, r2, #0
   13f08:	str	r2, [r3, #4]
   13f0c:	cmp	r1, #21
   13f10:	bne	13f90 <if_statement_inside_else_statement@@Base+0x2ac>
   13f14:	mov	r1, #32
   13f18:	cmp	r0, #0
   13f1c:	movwne	r1, #24
   13f20:	mov	r2, r4
   13f24:	ldr	r1, [r2, r1]!
   13f28:	adds	r1, r1, #1
   13f2c:	str	r1, [r2]
   13f30:	ldr	r1, [r2, #4]
   13f34:	adc	r1, r1, #0
   13f38:	str	r1, [r2, #4]
   13f3c:	cmp	r0, #0
   13f40:	beq	13fb0 <if_statement_inside_else_statement@@Base+0x2cc>
   13f44:	ldr	r0, [r0]
   13f48:	mov	r1, #48	; 0x30
   13f4c:	cmp	r0, #4
   13f50:	movweq	r1, #40	; 0x28
   13f54:	mov	r2, r4
   13f58:	ldr	r1, [r2, r1]!
   13f5c:	adds	r1, r1, #1
   13f60:	str	r1, [r2]
   13f64:	ldr	r1, [r2, #4]
   13f68:	adc	r1, r1, #0
   13f6c:	str	r1, [r2, #4]
   13f70:	cmp	r0, #4
   13f74:	bne	13fd0 <if_statement_inside_else_statement@@Base+0x2ec>
   13f78:	ldrd	r0, [r4, #56]	; 0x38
   13f7c:	adds	r0, r0, #1
   13f80:	adc	r1, r1, #0
   13f84:	strd	r0, [r4, #56]	; 0x38
   13f88:	sub	sp, fp, #24
   13f8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13f90:	movw	r0, #40552	; 0x9e68
   13f94:	movt	r0, #1
   13f98:	movw	r1, #39566	; 0x9a8e
   13f9c:	movt	r1, #1
   13fa0:	movw	r3, #40579	; 0x9e83
   13fa4:	movt	r3, #1
   13fa8:	movw	r2, #558	; 0x22e
   13fac:	bl	12020 <__assert_fail@plt>
   13fb0:	movw	r0, #40227	; 0x9d23
   13fb4:	movt	r0, #1
   13fb8:	movw	r1, #39566	; 0x9a8e
   13fbc:	movt	r1, #1
   13fc0:	movw	r3, #40579	; 0x9e83
   13fc4:	movt	r3, #1
   13fc8:	movw	r2, #559	; 0x22f
   13fcc:	bl	12020 <__assert_fail@plt>
   13fd0:	movw	r0, #40239	; 0x9d2f
   13fd4:	movt	r0, #1
   13fd8:	movw	r1, #39566	; 0x9a8e
   13fdc:	movt	r1, #1
   13fe0:	movw	r3, #40579	; 0x9e83
   13fe4:	movt	r3, #1
   13fe8:	mov	r2, #560	; 0x230
   13fec:	bl	12020 <__assert_fail@plt>

00013ff0 <main@@Base>:
   13ff0:	push	{r4, r5, fp, lr}
   13ff4:	add	fp, sp, #8
   13ff8:	movw	r0, #50544	; 0xc570
   13ffc:	movt	r0, #2
   14000:	ldm	r0, {r1, r2, r3, r5}
   14004:	adds	r1, r1, #1
   14008:	adc	r2, r2, #0
   1400c:	adds	r3, r3, #1
   14010:	adc	r5, r5, #0
   14014:	stm	r0, {r1, r2, r3, r5}
   14018:	movw	r4, #49396	; 0xc0f4
   1401c:	movt	r4, #2
   14020:	ldr	r0, [r4]
   14024:	mov	r1, #0
   14028:	bl	11e4c <setbuf@plt>
   1402c:	ldr	r3, [r4]
   14030:	movw	r0, #40621	; 0x9ead
   14034:	movt	r0, #1
   14038:	mov	r1, #14
   1403c:	mov	r2, #1
   14040:	bl	11ed0 <fwrite@plt>
   14044:	ldr	r3, [r4]
   14048:	movw	r0, #40636	; 0x9ebc
   1404c:	movt	r0, #1
   14050:	mov	r1, #14
   14054:	mov	r2, #1
   14058:	bl	11ed0 <fwrite@plt>
   1405c:	ldr	r3, [r4]
   14060:	movw	r0, #40651	; 0x9ecb
   14064:	movt	r0, #1
   14068:	mov	r1, #15
   1406c:	mov	r2, #1
   14070:	bl	11ed0 <fwrite@plt>
   14074:	mov	r0, #0
   14078:	bl	11e70 <fflush@plt>
   1407c:	movw	r4, #40667	; 0x9edb
   14080:	movt	r4, #1
   14084:	movw	r5, #40685	; 0x9eed
   14088:	movt	r5, #1
   1408c:	movw	r2, #40697	; 0x9ef9
   14090:	movt	r2, #1
   14094:	mov	r0, r4
   14098:	mov	r1, r5
   1409c:	bl	11e64 <printf@plt>
   140a0:	bl	12564 <setup@@Base>
   140a4:	bl	12598 <no_int_as_first_stuff@@Base>
   140a8:	movw	r0, #41102	; 0xa08e
   140ac:	movt	r0, #1
   140b0:	bl	11ef4 <puts@plt>
   140b4:	movw	r2, #40719	; 0x9f0f
   140b8:	movt	r2, #1
   140bc:	mov	r0, r4
   140c0:	mov	r1, r5
   140c4:	bl	11e64 <printf@plt>
   140c8:	bl	12564 <setup@@Base>
   140cc:	bl	126ac <int_but_not_followed_by_function@@Base>
   140d0:	movw	r0, #41102	; 0xa08e
   140d4:	movt	r0, #1
   140d8:	bl	11ef4 <puts@plt>
   140dc:	movw	r2, #40752	; 0x9f30
   140e0:	movt	r2, #1
   140e4:	mov	r0, r4
   140e8:	mov	r1, r5
   140ec:	bl	11e64 <printf@plt>
   140f0:	bl	12564 <setup@@Base>
   140f4:	bl	12e7c <boolean_unary_operator_is_read_properly@@Base>
   140f8:	movw	r0, #41102	; 0xa08e
   140fc:	movt	r0, #1
   14100:	bl	11ef4 <puts@plt>
   14104:	movw	r2, #40792	; 0x9f58
   14108:	movt	r2, #1
   1410c:	mov	r0, r4
   14110:	mov	r1, r5
   14114:	bl	11e64 <printf@plt>
   14118:	bl	12564 <setup@@Base>
   1411c:	bl	12c04 <boolean_binary_operator_is_read_properly@@Base>
   14120:	movw	r0, #41102	; 0xa08e
   14124:	movt	r0, #1
   14128:	bl	11ef4 <puts@plt>
   1412c:	movw	r2, #40833	; 0x9f81
   14130:	movt	r2, #1
   14134:	mov	r0, r4
   14138:	mov	r1, r5
   1413c:	bl	11e64 <printf@plt>
   14140:	bl	12564 <setup@@Base>
   14144:	bl	127e4 <boolean_expression_is_read_properly@@Base>
   14148:	movw	r0, #41102	; 0xa08e
   1414c:	movt	r0, #1
   14150:	bl	11ef4 <puts@plt>
   14154:	movw	r2, #40869	; 0x9fa5
   14158:	movt	r2, #1
   1415c:	mov	r0, r4
   14160:	mov	r1, r5
   14164:	bl	11e64 <printf@plt>
   14168:	bl	12564 <setup@@Base>
   1416c:	bl	129d8 <boolean_expression_complex@@Base>
   14170:	movw	r0, #41102	; 0xa08e
   14174:	movt	r0, #1
   14178:	bl	11ef4 <puts@plt>
   1417c:	movw	r2, #40896	; 0x9fc0
   14180:	movt	r2, #1
   14184:	mov	r0, r4
   14188:	mov	r1, r5
   1418c:	bl	11e64 <printf@plt>
   14190:	bl	12564 <setup@@Base>
   14194:	bl	130d4 <if_statement_only@@Base>
   14198:	movw	r0, #41102	; 0xa08e
   1419c:	movt	r0, #1
   141a0:	bl	11ef4 <puts@plt>
   141a4:	movw	r2, #40914	; 0x9fd2
   141a8:	movt	r2, #1
   141ac:	mov	r0, r4
   141b0:	mov	r1, r5
   141b4:	bl	11e64 <printf@plt>
   141b8:	bl	12564 <setup@@Base>
   141bc:	bl	132fc <if_else_statements@@Base>
   141c0:	movw	r0, #41102	; 0xa08e
   141c4:	movt	r0, #1
   141c8:	bl	11ef4 <puts@plt>
   141cc:	movw	r2, #40933	; 0x9fe5
   141d0:	movt	r2, #1
   141d4:	mov	r0, r4
   141d8:	mov	r1, r5
   141dc:	bl	11e64 <printf@plt>
   141e0:	bl	12564 <setup@@Base>
   141e4:	bl	139f8 <if_statement_inside_if_statement@@Base>
   141e8:	movw	r0, #41102	; 0xa08e
   141ec:	movt	r0, #1
   141f0:	bl	11ef4 <puts@plt>
   141f4:	movw	r2, #40966	; 0xa006
   141f8:	movt	r2, #1
   141fc:	mov	r0, r4
   14200:	mov	r1, r5
   14204:	bl	11e64 <printf@plt>
   14208:	bl	12564 <setup@@Base>
   1420c:	bl	13ce4 <if_statement_inside_else_statement@@Base>
   14210:	movw	r0, #41102	; 0xa08e
   14214:	movt	r0, #1
   14218:	bl	11ef4 <puts@plt>
   1421c:	movw	r2, #41001	; 0xa029
   14220:	movt	r2, #1
   14224:	mov	r0, r4
   14228:	mov	r1, r5
   1422c:	bl	11e64 <printf@plt>
   14230:	bl	12564 <setup@@Base>
   14234:	bl	137e4 <body_with_one_return@@Base>
   14238:	movw	r0, #41102	; 0xa08e
   1423c:	movt	r0, #1
   14240:	bl	11ef4 <puts@plt>
   14244:	movw	r2, #41022	; 0xa03e
   14248:	movt	r2, #1
   1424c:	mov	r0, r4
   14250:	mov	r1, r5
   14254:	bl	11e64 <printf@plt>
   14258:	bl	12564 <setup@@Base>
   1425c:	bl	13544 <body_with_two_returns@@Base>
   14260:	movw	r0, #41102	; 0xa08e
   14264:	movt	r0, #1
   14268:	bl	11ef4 <puts@plt>
   1426c:	movw	r0, #41111	; 0xa097
   14270:	movt	r0, #1
   14274:	bl	11ef4 <puts@plt>
   14278:	movw	r0, #41126	; 0xa0a6
   1427c:	movt	r0, #1
   14280:	bl	11ef4 <puts@plt>
   14284:	movw	r0, #40621	; 0x9ead
   14288:	movt	r0, #1
   1428c:	bl	11ef4 <puts@plt>
   14290:	mov	r0, #0
   14294:	pop	{r4, r5, fp, pc}
   14298:	push	{r4, r5, r6, lr}
   1429c:	sub	sp, sp, #8
   142a0:	movw	r0, #41136	; 0xa0b0
   142a4:	movt	r0, #1
   142a8:	movw	r1, #41044	; 0xa054
   142ac:	movt	r1, #1
   142b0:	movw	r2, #18131	; 0x46d3
   142b4:	movt	r2, #24865	; 0x6121
   142b8:	bl	16ae4 <read_boolean_unary_expression@@Base+0x3dc>
   142bc:	movw	r0, #42096	; 0xa470
   142c0:	movt	r0, #1
   142c4:	add	r4, r0, #4
   142c8:	mov	r5, #0
   142cc:	movw	r6, #41728	; 0xa300
   142d0:	movt	r6, #1
   142d4:	mov	r3, r6
   142d8:	ldr	r0, [r3, r5]!
   142dc:	ldr	r1, [r3, #16]
   142e0:	str	r1, [sp]
   142e4:	ldmib	r3, {r1, r2}
   142e8:	ldrb	r3, [r3, #12]
   142ec:	bl	17248 <read_boolean_unary_expression@@Base+0xb40>
   142f0:	ldrd	r0, [r4, #-4]
   142f4:	bl	17afc <read_boolean_unary_expression@@Base+0x13f4>
   142f8:	add	r5, r5, #20
   142fc:	add	r4, r4, #8
   14300:	cmp	r5, #360	; 0x168
   14304:	bne	142d4 <main@@Base+0x2e4>
   14308:	bl	18278 <read_boolean_unary_expression@@Base+0x1b70>
   1430c:	add	sp, sp, #8
   14310:	pop	{r4, r5, r6, lr}
   14314:	b	18fe4 <read_boolean_unary_expression@@Base+0x28dc>
   14318:	push	{fp, lr}
   1431c:	bl	14298 <main@@Base+0x2a8>
   14320:	movw	r0, #49408	; 0xc100
   14324:	movt	r0, #2
   14328:	mov	r1, #0
   1432c:	mov	r2, #152	; 0x98
   14330:	bl	11f90 <memset@plt>
   14334:	movw	r0, #49760	; 0xc260
   14338:	movt	r0, #2
   1433c:	vmov.i32	q8, #0	; 0x00000000
   14340:	add	r1, r0, #16
   14344:	vst1.64	{d16-d17}, [r1 :128]
   14348:	movw	r1, #49712	; 0xc230
   1434c:	movt	r1, #2
   14350:	add	r2, r1, #16
   14354:	vst1.64	{d16-d17}, [r2 :128]
   14358:	movw	r2, #49584	; 0xc1b0
   1435c:	movt	r2, #2
   14360:	add	r3, r2, #64	; 0x40
   14364:	vst1.64	{d16-d17}, [r3 :128]
   14368:	add	r3, r2, #48	; 0x30
   1436c:	vst1.64	{d16-d17}, [r3 :128]
   14370:	add	r3, r2, #32
   14374:	vst1.64	{d16-d17}, [r3 :128]
   14378:	add	r3, r2, #16
   1437c:	vst1.64	{d16-d17}, [r3 :128]
   14380:	movw	r3, #49560	; 0xc198
   14384:	movt	r3, #2
   14388:	vst1.64	{d16-d17}, [r3]
   1438c:	movw	r3, #49680	; 0xc210
   14390:	movt	r3, #2
   14394:	vst1.64	{d16-d17}, [r3]
   14398:	movw	r3, #49696	; 0xc220
   1439c:	movt	r3, #2
   143a0:	vst1.64	{d16-d17}, [r3]
   143a4:	mov	r3, #32
   143a8:	vst1.64	{d16-d17}, [r0 :128], r3
   143ac:	vst1.64	{d16-d17}, [r0 :128]
   143b0:	vst1.64	{d16-d17}, [r1 :128], r3
   143b4:	vst1.64	{d16-d17}, [r1 :128]
   143b8:	mov	ip, #80	; 0x50
   143bc:	vst1.64	{d16-d17}, [r2 :128], ip
   143c0:	vst1.64	{d16-d17}, [r2 :128]
   143c4:	movw	r2, #49808	; 0xc290
   143c8:	movt	r2, #2
   143cc:	add	r0, r2, #32
   143d0:	vst1.64	{d16-d17}, [r0 :128]
   143d4:	add	r0, r2, #16
   143d8:	vst1.64	{d16-d17}, [r0 :128]
   143dc:	mov	r0, #48	; 0x30
   143e0:	vst1.64	{d16-d17}, [r2 :128], r0
   143e4:	vst1.64	{d16-d17}, [r2 :128]
   143e8:	movw	r2, #49872	; 0xc2d0
   143ec:	movt	r2, #2
   143f0:	add	r1, r2, #16
   143f4:	vst1.64	{d16-d17}, [r1 :128]
   143f8:	vst1.64	{d16-d17}, [r2 :128], r3
   143fc:	vst1.64	{d16-d17}, [r2 :128]
   14400:	movw	r1, #49920	; 0xc300
   14404:	movt	r1, #2
   14408:	add	r2, r1, #64	; 0x40
   1440c:	vst1.64	{d16-d17}, [r2 :128]
   14410:	add	r2, r1, #48	; 0x30
   14414:	vst1.64	{d16-d17}, [r2 :128]
   14418:	add	r2, r1, #32
   1441c:	vst1.64	{d16-d17}, [r2 :128]
   14420:	add	r2, r1, #16
   14424:	vst1.64	{d16-d17}, [r2 :128]
   14428:	vst1.64	{d16-d17}, [r1 :128], ip
   1442c:	vst1.64	{d16-d17}, [r1 :128]
   14430:	movw	r1, #50016	; 0xc360
   14434:	movt	r1, #2
   14438:	add	r2, r1, #64	; 0x40
   1443c:	vst1.64	{d16-d17}, [r2 :128]
   14440:	add	r2, r1, #48	; 0x30
   14444:	vst1.64	{d16-d17}, [r2 :128]
   14448:	add	r2, r1, #32
   1444c:	vst1.64	{d16-d17}, [r2 :128]
   14450:	add	r2, r1, #16
   14454:	vst1.64	{d16-d17}, [r2 :128]
   14458:	vst1.64	{d16-d17}, [r1 :128], ip
   1445c:	vst1.64	{d16-d17}, [r1 :128]
   14460:	movw	r1, #50112	; 0xc3c0
   14464:	movt	r1, #2
   14468:	add	r2, r1, #32
   1446c:	vst1.64	{d16-d17}, [r2 :128]
   14470:	add	r2, r1, #16
   14474:	vst1.64	{d16-d17}, [r2 :128]
   14478:	vst1.64	{d16-d17}, [r1 :128], r0
   1447c:	vst1.64	{d16-d17}, [r1 :128]
   14480:	movw	r1, #50176	; 0xc400
   14484:	movt	r1, #2
   14488:	add	r2, r1, #32
   1448c:	vst1.64	{d16-d17}, [r2 :128]
   14490:	add	r2, r1, #16
   14494:	vst1.64	{d16-d17}, [r2 :128]
   14498:	vst1.64	{d16-d17}, [r1 :128], r0
   1449c:	vst1.64	{d16-d17}, [r1 :128]
   144a0:	movw	r1, #50240	; 0xc440
   144a4:	movt	r1, #2
   144a8:	add	r2, r1, #64	; 0x40
   144ac:	vst1.64	{d16-d17}, [r2 :128]
   144b0:	add	r2, r1, #48	; 0x30
   144b4:	vst1.64	{d16-d17}, [r2 :128]
   144b8:	add	r2, r1, #32
   144bc:	vst1.64	{d16-d17}, [r2 :128]
   144c0:	add	r2, r1, #16
   144c4:	vst1.64	{d16-d17}, [r2 :128]
   144c8:	vst1.64	{d16-d17}, [r1 :128], ip
   144cc:	vst1.64	{d16-d17}, [r1 :128]
   144d0:	movw	r1, #50336	; 0xc4a0
   144d4:	movt	r1, #2
   144d8:	add	r2, r1, #48	; 0x30
   144dc:	vst1.64	{d16-d17}, [r2 :128]
   144e0:	add	r2, r1, #32
   144e4:	vst1.64	{d16-d17}, [r2 :128]
   144e8:	add	r2, r1, #16
   144ec:	vst1.64	{d16-d17}, [r2 :128]
   144f0:	mov	r2, #64	; 0x40
   144f4:	vst1.64	{d16-d17}, [r1 :128], r2
   144f8:	vst1.64	{d16-d17}, [r1 :128]
   144fc:	movw	r1, #50416	; 0xc4f0
   14500:	movt	r1, #2
   14504:	add	r2, r1, #32
   14508:	vst1.64	{d16-d17}, [r2 :128]
   1450c:	add	r2, r1, #16
   14510:	vst1.64	{d16-d17}, [r2 :128]
   14514:	vst1.64	{d16-d17}, [r1 :128], r0
   14518:	vst1.64	{d16-d17}, [r1 :128]
   1451c:	movw	r1, #50480	; 0xc530
   14520:	movt	r1, #2
   14524:	add	r2, r1, #32
   14528:	vst1.64	{d16-d17}, [r2 :128]
   1452c:	add	r2, r1, #16
   14530:	vst1.64	{d16-d17}, [r2 :128]
   14534:	vst1.64	{d16-d17}, [r1 :128], r0
   14538:	vst1.64	{d16-d17}, [r1 :128]
   1453c:	movw	r0, #50544	; 0xc570
   14540:	movt	r0, #2
   14544:	vst1.64	{d16-d17}, [r0]
   14548:	pop	{fp, pc}
   1454c:	movw	r0, #17048	; 0x4298
   14550:	movt	r0, #1
   14554:	movw	r1, #17176	; 0x4318
   14558:	movt	r1, #1
   1455c:	b	19494 <__gcov_flush@@Base+0xb4>

00014560 <init_token_int_type@@Base>:
   14560:	push	{fp, lr}
   14564:	mov	fp, sp
   14568:	movw	r1, #50560	; 0xc580
   1456c:	movt	r1, #2
   14570:	ldm	r1, {r2, r3, ip, lr}
   14574:	adds	r2, r2, #1
   14578:	adc	r3, r3, #0
   1457c:	adds	ip, ip, #1
   14580:	adc	lr, lr, #0
   14584:	stm	r1, {r2, r3, ip, lr}
   14588:	mov	r1, #0
   1458c:	str	r1, [r0]
   14590:	pop	{fp, pc}

00014594 <init_token_int_value@@Base>:
   14594:	push	{r4, sl, fp, lr}
   14598:	add	fp, sp, #8
   1459c:	movw	r2, #50576	; 0xc590
   145a0:	movt	r2, #2
   145a4:	ldm	r2, {r3, ip, lr}
   145a8:	ldr	r4, [r2, #12]
   145ac:	adds	r3, r3, #1
   145b0:	adc	ip, ip, #0
   145b4:	adds	lr, lr, #1
   145b8:	adc	r4, r4, #0
   145bc:	stm	r2, {r3, ip, lr}
   145c0:	str	r4, [r2, #12]
   145c4:	mov	r2, #1
   145c8:	str	r2, [r0]
   145cc:	str	r1, [r0, #4]
   145d0:	pop	{r4, sl, fp, pc}

000145d4 <init_token_function@@Base>:
   145d4:	push	{r4, sl, fp, lr}
   145d8:	add	fp, sp, #8
   145dc:	movw	r2, #50592	; 0xc5a0
   145e0:	movt	r2, #2
   145e4:	ldm	r2, {r3, ip, lr}
   145e8:	ldr	r4, [r2, #12]
   145ec:	adds	r3, r3, #1
   145f0:	adc	ip, ip, #0
   145f4:	adds	lr, lr, #1
   145f8:	adc	r4, r4, #0
   145fc:	stm	r2, {r3, ip, lr}
   14600:	str	r4, [r2, #12]
   14604:	mov	r2, #2
   14608:	str	r2, [r0]
   1460c:	str	r1, [r0, #4]
   14610:	pop	{r4, sl, fp, pc}

00014614 <init_token_opar@@Base>:
   14614:	push	{fp, lr}
   14618:	mov	fp, sp
   1461c:	movw	r1, #50608	; 0xc5b0
   14620:	movt	r1, #2
   14624:	ldm	r1, {r2, r3, ip, lr}
   14628:	adds	r2, r2, #1
   1462c:	adc	r3, r3, #0
   14630:	adds	ip, ip, #1
   14634:	adc	lr, lr, #0
   14638:	stm	r1, {r2, r3, ip, lr}
   1463c:	mov	r1, #3
   14640:	str	r1, [r0]
   14644:	pop	{fp, pc}

00014648 <init_token_cpar@@Base>:
   14648:	push	{fp, lr}
   1464c:	mov	fp, sp
   14650:	movw	r1, #50624	; 0xc5c0
   14654:	movt	r1, #2
   14658:	ldm	r1, {r2, r3, ip, lr}
   1465c:	adds	r2, r2, #1
   14660:	adc	r3, r3, #0
   14664:	adds	ip, ip, #1
   14668:	adc	lr, lr, #0
   1466c:	stm	r1, {r2, r3, ip, lr}
   14670:	mov	r1, #4
   14674:	str	r1, [r0]
   14678:	pop	{fp, pc}

0001467c <init_token_obra@@Base>:
   1467c:	push	{fp, lr}
   14680:	mov	fp, sp
   14684:	movw	r1, #50640	; 0xc5d0
   14688:	movt	r1, #2
   1468c:	ldm	r1, {r2, r3, ip, lr}
   14690:	adds	r2, r2, #1
   14694:	adc	r3, r3, #0
   14698:	adds	ip, ip, #1
   1469c:	adc	lr, lr, #0
   146a0:	stm	r1, {r2, r3, ip, lr}
   146a4:	mov	r1, #5
   146a8:	str	r1, [r0]
   146ac:	pop	{fp, pc}

000146b0 <init_token_cbra@@Base>:
   146b0:	push	{fp, lr}
   146b4:	mov	fp, sp
   146b8:	movw	r1, #50656	; 0xc5e0
   146bc:	movt	r1, #2
   146c0:	ldm	r1, {r2, r3, ip, lr}
   146c4:	adds	r2, r2, #1
   146c8:	adc	r3, r3, #0
   146cc:	adds	ip, ip, #1
   146d0:	adc	lr, lr, #0
   146d4:	stm	r1, {r2, r3, ip, lr}
   146d8:	mov	r1, #6
   146dc:	str	r1, [r0]
   146e0:	pop	{fp, pc}

000146e4 <init_token_return@@Base>:
   146e4:	push	{fp, lr}
   146e8:	mov	fp, sp
   146ec:	movw	r1, #50672	; 0xc5f0
   146f0:	movt	r1, #2
   146f4:	ldm	r1, {r2, r3, ip, lr}
   146f8:	adds	r2, r2, #1
   146fc:	adc	r3, r3, #0
   14700:	adds	ip, ip, #1
   14704:	adc	lr, lr, #0
   14708:	stm	r1, {r2, r3, ip, lr}
   1470c:	mov	r1, #7
   14710:	str	r1, [r0]
   14714:	pop	{fp, pc}

00014718 <init_token_semicolon@@Base>:
   14718:	push	{fp, lr}
   1471c:	mov	fp, sp
   14720:	movw	r1, #50688	; 0xc600
   14724:	movt	r1, #2
   14728:	ldm	r1, {r2, r3, ip, lr}
   1472c:	adds	r2, r2, #1
   14730:	adc	r3, r3, #0
   14734:	adds	ip, ip, #1
   14738:	adc	lr, lr, #0
   1473c:	stm	r1, {r2, r3, ip, lr}
   14740:	mov	r1, #8
   14744:	str	r1, [r0]
   14748:	pop	{fp, pc}

0001474c <init_token_eof@@Base>:
   1474c:	push	{fp, lr}
   14750:	mov	fp, sp
   14754:	movw	r1, #50704	; 0xc610
   14758:	movt	r1, #2
   1475c:	ldm	r1, {r2, r3, ip, lr}
   14760:	adds	r2, r2, #1
   14764:	adc	r3, r3, #0
   14768:	adds	ip, ip, #1
   1476c:	adc	lr, lr, #0
   14770:	stm	r1, {r2, r3, ip, lr}
   14774:	mov	r1, #9
   14778:	str	r1, [r0]
   1477c:	pop	{fp, pc}

00014780 <init_token_if@@Base>:
   14780:	push	{fp, lr}
   14784:	mov	fp, sp
   14788:	movw	r1, #50720	; 0xc620
   1478c:	movt	r1, #2
   14790:	ldm	r1, {r2, r3, ip, lr}
   14794:	adds	r2, r2, #1
   14798:	adc	r3, r3, #0
   1479c:	adds	ip, ip, #1
   147a0:	adc	lr, lr, #0
   147a4:	stm	r1, {r2, r3, ip, lr}
   147a8:	mov	r1, #10
   147ac:	str	r1, [r0]
   147b0:	pop	{fp, pc}

000147b4 <init_token_else@@Base>:
   147b4:	push	{fp, lr}
   147b8:	mov	fp, sp
   147bc:	movw	r1, #50736	; 0xc630
   147c0:	movt	r1, #2
   147c4:	ldm	r1, {r2, r3, ip, lr}
   147c8:	adds	r2, r2, #1
   147cc:	adc	r3, r3, #0
   147d0:	adds	ip, ip, #1
   147d4:	adc	lr, lr, #0
   147d8:	stm	r1, {r2, r3, ip, lr}
   147dc:	mov	r1, #11
   147e0:	str	r1, [r0]
   147e4:	pop	{fp, pc}

000147e8 <init_token_boolean_op@@Base>:
   147e8:	push	{r4, sl, fp, lr}
   147ec:	add	fp, sp, #8
   147f0:	movw	r2, #50752	; 0xc640
   147f4:	movt	r2, #2
   147f8:	ldm	r2, {r3, ip, lr}
   147fc:	ldr	r4, [r2, #12]
   14800:	adds	r3, r3, #1
   14804:	adc	ip, ip, #0
   14808:	adds	lr, lr, #1
   1480c:	adc	r4, r4, #0
   14810:	stm	r2, {r3, ip, lr}
   14814:	str	r4, [r2, #12]
   14818:	mov	r2, #12
   1481c:	str	r2, [r0]
   14820:	str	r1, [r0, #4]
   14824:	pop	{r4, sl, fp, pc}

00014828 <free_token_int_type@@Base>:
   14828:	push	{fp, lr}
   1482c:	mov	fp, sp
   14830:	movw	r1, #50768	; 0xc650
   14834:	movt	r1, #2
   14838:	ldm	r1, {r2, r3, ip, lr}
   1483c:	adds	r2, r2, #1
   14840:	adc	r3, r3, #0
   14844:	adds	ip, ip, #1
   14848:	adc	lr, lr, #0
   1484c:	stm	r1, {r2, r3, ip, lr}
   14850:	pop	{fp, lr}
   14854:	b	11e7c <free@plt>

00014858 <free_token_int_value@@Base>:
   14858:	push	{fp, lr}
   1485c:	mov	fp, sp
   14860:	movw	r1, #50784	; 0xc660
   14864:	movt	r1, #2
   14868:	ldm	r1, {r2, r3, ip, lr}
   1486c:	adds	r2, r2, #1
   14870:	adc	r3, r3, #0
   14874:	adds	ip, ip, #1
   14878:	adc	lr, lr, #0
   1487c:	stm	r1, {r2, r3, ip, lr}
   14880:	pop	{fp, lr}
   14884:	b	11e7c <free@plt>

00014888 <free_token_function@@Base>:
   14888:	push	{fp, lr}
   1488c:	mov	fp, sp
   14890:	movw	r1, #50800	; 0xc670
   14894:	movt	r1, #2
   14898:	ldm	r1, {r2, r3, ip, lr}
   1489c:	adds	r2, r2, #1
   148a0:	adc	r3, r3, #0
   148a4:	adds	ip, ip, #1
   148a8:	adc	lr, lr, #0
   148ac:	stm	r1, {r2, r3, ip, lr}
   148b0:	pop	{fp, lr}
   148b4:	b	11e7c <free@plt>

000148b8 <free_token_opar@@Base>:
   148b8:	push	{fp, lr}
   148bc:	mov	fp, sp
   148c0:	movw	r1, #50816	; 0xc680
   148c4:	movt	r1, #2
   148c8:	ldm	r1, {r2, r3, ip, lr}
   148cc:	adds	r2, r2, #1
   148d0:	adc	r3, r3, #0
   148d4:	adds	ip, ip, #1
   148d8:	adc	lr, lr, #0
   148dc:	stm	r1, {r2, r3, ip, lr}
   148e0:	pop	{fp, lr}
   148e4:	b	11e7c <free@plt>

000148e8 <free_token_cpar@@Base>:
   148e8:	push	{fp, lr}
   148ec:	mov	fp, sp
   148f0:	movw	r1, #50832	; 0xc690
   148f4:	movt	r1, #2
   148f8:	ldm	r1, {r2, r3, ip, lr}
   148fc:	adds	r2, r2, #1
   14900:	adc	r3, r3, #0
   14904:	adds	ip, ip, #1
   14908:	adc	lr, lr, #0
   1490c:	stm	r1, {r2, r3, ip, lr}
   14910:	pop	{fp, lr}
   14914:	b	11e7c <free@plt>

00014918 <free_token_obra@@Base>:
   14918:	push	{fp, lr}
   1491c:	mov	fp, sp
   14920:	movw	r1, #50848	; 0xc6a0
   14924:	movt	r1, #2
   14928:	ldm	r1, {r2, r3, ip, lr}
   1492c:	adds	r2, r2, #1
   14930:	adc	r3, r3, #0
   14934:	adds	ip, ip, #1
   14938:	adc	lr, lr, #0
   1493c:	stm	r1, {r2, r3, ip, lr}
   14940:	pop	{fp, lr}
   14944:	b	11e7c <free@plt>

00014948 <free_token_cbra@@Base>:
   14948:	push	{fp, lr}
   1494c:	mov	fp, sp
   14950:	movw	r1, #50864	; 0xc6b0
   14954:	movt	r1, #2
   14958:	ldm	r1, {r2, r3, ip, lr}
   1495c:	adds	r2, r2, #1
   14960:	adc	r3, r3, #0
   14964:	adds	ip, ip, #1
   14968:	adc	lr, lr, #0
   1496c:	stm	r1, {r2, r3, ip, lr}
   14970:	pop	{fp, lr}
   14974:	b	11e7c <free@plt>

00014978 <free_token_return@@Base>:
   14978:	push	{fp, lr}
   1497c:	mov	fp, sp
   14980:	movw	r1, #50880	; 0xc6c0
   14984:	movt	r1, #2
   14988:	ldm	r1, {r2, r3, ip, lr}
   1498c:	adds	r2, r2, #1
   14990:	adc	r3, r3, #0
   14994:	adds	ip, ip, #1
   14998:	adc	lr, lr, #0
   1499c:	stm	r1, {r2, r3, ip, lr}
   149a0:	pop	{fp, lr}
   149a4:	b	11e7c <free@plt>

000149a8 <free_token_semicolon@@Base>:
   149a8:	push	{fp, lr}
   149ac:	mov	fp, sp
   149b0:	movw	r1, #50896	; 0xc6d0
   149b4:	movt	r1, #2
   149b8:	ldm	r1, {r2, r3, ip, lr}
   149bc:	adds	r2, r2, #1
   149c0:	adc	r3, r3, #0
   149c4:	adds	ip, ip, #1
   149c8:	adc	lr, lr, #0
   149cc:	stm	r1, {r2, r3, ip, lr}
   149d0:	pop	{fp, lr}
   149d4:	b	11e7c <free@plt>

000149d8 <free_token_eof@@Base>:
   149d8:	push	{fp, lr}
   149dc:	mov	fp, sp
   149e0:	movw	r1, #50912	; 0xc6e0
   149e4:	movt	r1, #2
   149e8:	ldm	r1, {r2, r3, ip, lr}
   149ec:	adds	r2, r2, #1
   149f0:	adc	r3, r3, #0
   149f4:	adds	ip, ip, #1
   149f8:	adc	lr, lr, #0
   149fc:	stm	r1, {r2, r3, ip, lr}
   14a00:	pop	{fp, lr}
   14a04:	b	11e7c <free@plt>

00014a08 <free_token_if@@Base>:
   14a08:	push	{fp, lr}
   14a0c:	mov	fp, sp
   14a10:	movw	r1, #50928	; 0xc6f0
   14a14:	movt	r1, #2
   14a18:	ldm	r1, {r2, r3, ip, lr}
   14a1c:	adds	r2, r2, #1
   14a20:	adc	r3, r3, #0
   14a24:	adds	ip, ip, #1
   14a28:	adc	lr, lr, #0
   14a2c:	stm	r1, {r2, r3, ip, lr}
   14a30:	pop	{fp, lr}
   14a34:	b	11e7c <free@plt>

00014a38 <free_token_else@@Base>:
   14a38:	push	{fp, lr}
   14a3c:	mov	fp, sp
   14a40:	movw	r1, #50944	; 0xc700
   14a44:	movt	r1, #2
   14a48:	ldm	r1, {r2, r3, ip, lr}
   14a4c:	adds	r2, r2, #1
   14a50:	adc	r3, r3, #0
   14a54:	adds	ip, ip, #1
   14a58:	adc	lr, lr, #0
   14a5c:	stm	r1, {r2, r3, ip, lr}
   14a60:	pop	{fp, lr}
   14a64:	b	11e7c <free@plt>

00014a68 <free_token_boolean_op@@Base>:
   14a68:	push	{r4, r5, fp, lr}
   14a6c:	add	fp, sp, #8
   14a70:	mov	r4, r0
   14a74:	movw	r5, #50960	; 0xc710
   14a78:	movt	r5, #2
   14a7c:	ldrd	r0, [r5]
   14a80:	adds	r0, r0, #1
   14a84:	adc	r1, r1, #0
   14a88:	strd	r0, [r5]
   14a8c:	ldr	r0, [r4, #4]
   14a90:	mov	r1, #16
   14a94:	cmp	r0, #0
   14a98:	movwne	r1, #8
   14a9c:	mov	r2, r5
   14aa0:	ldr	r1, [r2, r1]!
   14aa4:	adds	r1, r1, #1
   14aa8:	str	r1, [r2]
   14aac:	ldr	r1, [r2, #4]
   14ab0:	adc	r1, r1, #0
   14ab4:	str	r1, [r2, #4]
   14ab8:	cmp	r0, #0
   14abc:	beq	14ad4 <free_token_boolean_op@@Base+0x6c>
   14ac0:	ldrd	r2, [r5, #24]
   14ac4:	adds	r2, r2, #1
   14ac8:	adc	r3, r3, #0
   14acc:	strd	r2, [r5, #24]
   14ad0:	bl	11e7c <free@plt>
   14ad4:	ldrd	r0, [r5, #32]
   14ad8:	adds	r0, r0, #1
   14adc:	adc	r1, r1, #0
   14ae0:	strd	r0, [r5, #32]
   14ae4:	mov	r0, r4
   14ae8:	pop	{r4, r5, fp, lr}
   14aec:	b	11e7c <free@plt>
   14af0:	push	{r4, r5, r6, lr}
   14af4:	sub	sp, sp, #8
   14af8:	movw	r0, #42240	; 0xa500
   14afc:	movt	r0, #1
   14b00:	movw	r1, #41044	; 0xa054
   14b04:	movt	r1, #1
   14b08:	movw	r2, #10327	; 0x2857
   14b0c:	movt	r2, #23326	; 0x5b1e
   14b10:	bl	16ae4 <read_boolean_unary_expression@@Base+0x3dc>
   14b14:	movw	r0, #43456	; 0xa9c0
   14b18:	movt	r0, #1
   14b1c:	add	r4, r0, #4
   14b20:	mov	r5, #0
   14b24:	movw	r6, #42928	; 0xa7b0
   14b28:	movt	r6, #1
   14b2c:	mov	r3, r6
   14b30:	ldr	r0, [r3, r5]!
   14b34:	ldr	r1, [r3, #16]
   14b38:	str	r1, [sp]
   14b3c:	ldmib	r3, {r1, r2}
   14b40:	ldrb	r3, [r3, #12]
   14b44:	bl	17248 <read_boolean_unary_expression@@Base+0xb40>
   14b48:	ldrd	r0, [r4, #-4]
   14b4c:	bl	17afc <read_boolean_unary_expression@@Base+0x13f4>
   14b50:	add	r5, r5, #20
   14b54:	add	r4, r4, #8
   14b58:	cmp	r5, #520	; 0x208
   14b5c:	bne	14b2c <free_token_boolean_op@@Base+0xc4>
   14b60:	bl	18278 <read_boolean_unary_expression@@Base+0x1b70>
   14b64:	add	sp, sp, #8
   14b68:	pop	{r4, r5, r6, lr}
   14b6c:	b	18fe4 <read_boolean_unary_expression@@Base+0x28dc>
   14b70:	push	{fp, lr}
   14b74:	bl	14af0 <free_token_boolean_op@@Base+0x88>
   14b78:	vmov.i32	q8, #0	; 0x00000000
   14b7c:	movw	r0, #50576	; 0xc590
   14b80:	movt	r0, #2
   14b84:	vst1.64	{d16-d17}, [r0]
   14b88:	movw	r0, #50560	; 0xc580
   14b8c:	movt	r0, #2
   14b90:	vst1.64	{d16-d17}, [r0]
   14b94:	movw	r0, #50592	; 0xc5a0
   14b98:	movt	r0, #2
   14b9c:	vst1.64	{d16-d17}, [r0]
   14ba0:	movw	r0, #50608	; 0xc5b0
   14ba4:	movt	r0, #2
   14ba8:	vst1.64	{d16-d17}, [r0]
   14bac:	movw	r0, #50624	; 0xc5c0
   14bb0:	movt	r0, #2
   14bb4:	vst1.64	{d16-d17}, [r0]
   14bb8:	movw	r0, #50640	; 0xc5d0
   14bbc:	movt	r0, #2
   14bc0:	vst1.64	{d16-d17}, [r0]
   14bc4:	movw	r0, #50656	; 0xc5e0
   14bc8:	movt	r0, #2
   14bcc:	vst1.64	{d16-d17}, [r0]
   14bd0:	movw	r0, #50672	; 0xc5f0
   14bd4:	movt	r0, #2
   14bd8:	vst1.64	{d16-d17}, [r0]
   14bdc:	movw	r0, #50688	; 0xc600
   14be0:	movt	r0, #2
   14be4:	vst1.64	{d16-d17}, [r0]
   14be8:	movw	r0, #50704	; 0xc610
   14bec:	movt	r0, #2
   14bf0:	vst1.64	{d16-d17}, [r0]
   14bf4:	movw	r0, #50720	; 0xc620
   14bf8:	movt	r0, #2
   14bfc:	vst1.64	{d16-d17}, [r0]
   14c00:	movw	r0, #50736	; 0xc630
   14c04:	movt	r0, #2
   14c08:	vst1.64	{d16-d17}, [r0]
   14c0c:	movw	r0, #50752	; 0xc640
   14c10:	movt	r0, #2
   14c14:	vst1.64	{d16-d17}, [r0]
   14c18:	movw	r0, #50768	; 0xc650
   14c1c:	movt	r0, #2
   14c20:	vst1.64	{d16-d17}, [r0]
   14c24:	movw	r0, #50784	; 0xc660
   14c28:	movt	r0, #2
   14c2c:	vst1.64	{d16-d17}, [r0]
   14c30:	movw	r0, #50800	; 0xc670
   14c34:	movt	r0, #2
   14c38:	vst1.64	{d16-d17}, [r0]
   14c3c:	movw	r0, #50816	; 0xc680
   14c40:	movt	r0, #2
   14c44:	vst1.64	{d16-d17}, [r0]
   14c48:	movw	r0, #50832	; 0xc690
   14c4c:	movt	r0, #2
   14c50:	vst1.64	{d16-d17}, [r0]
   14c54:	movw	r0, #50848	; 0xc6a0
   14c58:	movt	r0, #2
   14c5c:	vst1.64	{d16-d17}, [r0]
   14c60:	movw	r0, #50864	; 0xc6b0
   14c64:	movt	r0, #2
   14c68:	vst1.64	{d16-d17}, [r0]
   14c6c:	movw	r0, #50880	; 0xc6c0
   14c70:	movt	r0, #2
   14c74:	vst1.64	{d16-d17}, [r0]
   14c78:	movw	r0, #50896	; 0xc6d0
   14c7c:	movt	r0, #2
   14c80:	vst1.64	{d16-d17}, [r0]
   14c84:	movw	r0, #50912	; 0xc6e0
   14c88:	movt	r0, #2
   14c8c:	vst1.64	{d16-d17}, [r0]
   14c90:	movw	r0, #50928	; 0xc6f0
   14c94:	movt	r0, #2
   14c98:	vst1.64	{d16-d17}, [r0]
   14c9c:	movw	r0, #50944	; 0xc700
   14ca0:	movt	r0, #2
   14ca4:	vst1.64	{d16-d17}, [r0]
   14ca8:	movw	r0, #50960	; 0xc710
   14cac:	movt	r0, #2
   14cb0:	mov	r1, #0
   14cb4:	str	r1, [r0, #32]
   14cb8:	add	r2, r0, #16
   14cbc:	vst1.64	{d16-d17}, [r2 :128]
   14cc0:	mov	r2, #36	; 0x24
   14cc4:	vst1.64	{d16-d17}, [r0 :128], r2
   14cc8:	str	r1, [r0]
   14ccc:	pop	{fp, pc}
   14cd0:	movw	r0, #19184	; 0x4af0
   14cd4:	movt	r0, #1
   14cd8:	movw	r1, #19312	; 0x4b70
   14cdc:	movt	r1, #1
   14ce0:	b	19494 <__gcov_flush@@Base+0xb4>

00014ce4 <init_ast_base@@Base>:
   14ce4:	push	{r4, r5, fp, lr}
   14ce8:	add	fp, sp, #8
   14cec:	movw	r3, #51008	; 0xc740
   14cf0:	movt	r3, #2
   14cf4:	ldm	r3, {ip, lr}
   14cf8:	ldr	r4, [r3, #8]
   14cfc:	ldr	r5, [r3, #12]
   14d00:	adds	ip, ip, #1
   14d04:	adc	lr, lr, #0
   14d08:	adds	r4, r4, #1
   14d0c:	adc	r5, r5, #0
   14d10:	stm	r3, {ip, lr}
   14d14:	str	r4, [r3, #8]
   14d18:	str	r5, [r3, #12]
   14d1c:	stm	r0, {r1, r2}
   14d20:	pop	{r4, r5, fp, pc}

00014d24 <init_ast_base_single@@Base>:
   14d24:	push	{r4, sl, fp, lr}
   14d28:	add	fp, sp, #8
   14d2c:	movw	r2, #51024	; 0xc750
   14d30:	movt	r2, #2
   14d34:	ldm	r2, {r3, ip, lr}
   14d38:	ldr	r4, [r2, #12]
   14d3c:	adds	r3, r3, #1
   14d40:	adc	ip, ip, #0
   14d44:	adds	lr, lr, #1
   14d48:	adc	r4, r4, #0
   14d4c:	stm	r2, {r3, ip, lr}
   14d50:	str	r4, [r2, #12]
   14d54:	mov	r2, #0
   14d58:	pop	{r4, sl, fp, lr}
   14d5c:	b	14ce4 <init_ast_base@@Base>

00014d60 <init_node_id@@Base>:
   14d60:	push	{r4, r5, r6, sl, fp, lr}
   14d64:	add	fp, sp, #16
   14d68:	mov	r6, r1
   14d6c:	mov	r5, r0
   14d70:	movw	r0, #51040	; 0xc760
   14d74:	movt	r0, #2
   14d78:	ldm	r0, {r1, r2, r3, r4}
   14d7c:	adds	r1, r1, #1
   14d80:	adc	r2, r2, #0
   14d84:	adds	r3, r3, #1
   14d88:	adc	r4, r4, #0
   14d8c:	stm	r0, {r1, r2, r3, r4}
   14d90:	mov	r0, r5
   14d94:	mov	r1, #0
   14d98:	bl	14d24 <init_ast_base_single@@Base>
   14d9c:	str	r6, [r5, #8]
   14da0:	pop	{r4, r5, r6, sl, fp, pc}

00014da4 <init_node_int@@Base>:
   14da4:	push	{r4, r5, r6, sl, fp, lr}
   14da8:	add	fp, sp, #16
   14dac:	mov	r6, r1
   14db0:	mov	r5, r0
   14db4:	movw	r0, #51056	; 0xc770
   14db8:	movt	r0, #2
   14dbc:	ldm	r0, {r1, r2, r3, r4}
   14dc0:	adds	r1, r1, #1
   14dc4:	adc	r2, r2, #0
   14dc8:	adds	r3, r3, #1
   14dcc:	adc	r4, r4, #0
   14dd0:	stm	r0, {r1, r2, r3, r4}
   14dd4:	mov	r0, r5
   14dd8:	mov	r1, #1
   14ddc:	bl	14d24 <init_ast_base_single@@Base>
   14de0:	str	r6, [r5, #8]
   14de4:	pop	{r4, r5, r6, sl, fp, pc}

00014de8 <init_node_function@@Base>:
   14de8:	push	{r4, r5, r6, r7, fp, lr}
   14dec:	add	fp, sp, #16
   14df0:	mov	r7, r2
   14df4:	mov	r5, r1
   14df8:	mov	r6, r0
   14dfc:	movw	r0, #51072	; 0xc780
   14e00:	movt	r0, #2
   14e04:	ldm	r0, {r1, r2, r3, r4}
   14e08:	adds	r1, r1, #1
   14e0c:	adc	r2, r2, #0
   14e10:	adds	r3, r3, #1
   14e14:	adc	r4, r4, #0
   14e18:	stm	r0, {r1, r2, r3, r4}
   14e1c:	mov	r0, r6
   14e20:	mov	r1, #2
   14e24:	bl	14d24 <init_ast_base_single@@Base>
   14e28:	str	r5, [r6, #8]
   14e2c:	str	r7, [r6, #12]
   14e30:	pop	{r4, r5, r6, r7, fp, pc}

00014e34 <init_node_return@@Base>:
   14e34:	push	{r4, r5, r6, sl, fp, lr}
   14e38:	add	fp, sp, #16
   14e3c:	mov	r6, r1
   14e40:	mov	r5, r0
   14e44:	movw	r0, #51088	; 0xc790
   14e48:	movt	r0, #2
   14e4c:	ldm	r0, {r1, r2, r3, r4}
   14e50:	adds	r1, r1, #1
   14e54:	adc	r2, r2, #0
   14e58:	adds	r3, r3, #1
   14e5c:	adc	r4, r4, #0
   14e60:	stm	r0, {r1, r2, r3, r4}
   14e64:	mov	r0, r5
   14e68:	mov	r1, #3
   14e6c:	bl	14d24 <init_ast_base_single@@Base>
   14e70:	str	r6, [r5, #8]
   14e74:	pop	{r4, r5, r6, sl, fp, pc}

00014e78 <init_node_if@@Base>:
   14e78:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e7c:	add	fp, sp, #24
   14e80:	mov	r8, r3
   14e84:	mov	r5, r2
   14e88:	mov	r6, r1
   14e8c:	mov	r7, r0
   14e90:	movw	r0, #51104	; 0xc7a0
   14e94:	movt	r0, #2
   14e98:	ldm	r0, {r1, r2, r3, r4}
   14e9c:	adds	r1, r1, #1
   14ea0:	adc	r2, r2, #0
   14ea4:	adds	r3, r3, #1
   14ea8:	adc	r4, r4, #0
   14eac:	stm	r0, {r1, r2, r3, r4}
   14eb0:	mov	r0, r7
   14eb4:	mov	r1, #4
   14eb8:	bl	14d24 <init_ast_base_single@@Base>
   14ebc:	str	r6, [r7, #8]
   14ec0:	str	r5, [r7, #12]
   14ec4:	str	r8, [r7, #16]
   14ec8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00014ecc <init_node_boolean_operator@@Base>:
   14ecc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14ed0:	add	fp, sp, #24
   14ed4:	mov	r8, r3
   14ed8:	mov	r5, r2
   14edc:	mov	r6, r1
   14ee0:	mov	r7, r0
   14ee4:	movw	r0, #51120	; 0xc7b0
   14ee8:	movt	r0, #2
   14eec:	ldm	r0, {r1, r2, r3, r4}
   14ef0:	adds	r1, r1, #1
   14ef4:	adc	r2, r2, #0
   14ef8:	adds	r3, r3, #1
   14efc:	adc	r4, r4, #0
   14f00:	stm	r0, {r1, r2, r3, r4}
   14f04:	mov	r0, r7
   14f08:	mov	r1, #0
   14f0c:	bl	14d24 <init_ast_base_single@@Base>
   14f10:	mov	r0, #5
   14f14:	str	r0, [r7]
   14f18:	str	r5, [r7, #8]
   14f1c:	str	r8, [r7, #12]
   14f20:	str	r6, [r7, #16]
   14f24:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00014f28 <free_node@@Base>:
   14f28:	push	{r4, r5, fp, lr}
   14f2c:	add	fp, sp, #8
   14f30:	mov	r4, r0
   14f34:	movw	r0, #49356	; 0xc0cc
   14f38:	movt	r0, #2
   14f3c:	mov	r1, #0
   14f40:	str	r1, [r0]
   14f44:	movw	r5, #51136	; 0xc7c0
   14f48:	movt	r5, #2
   14f4c:	ldrd	r0, [r5]
   14f50:	adds	r0, r0, #1
   14f54:	adc	r1, r1, #0
   14f58:	strd	r0, [r5]
   14f5c:	ldr	r0, [r4]
   14f60:	cmp	r0, #5
   14f64:	bhi	150d0 <free_node@@Base+0x1a8>
   14f68:	add	r1, pc, #0
   14f6c:	ldr	pc, [r1, r0, lsl #2]
   14f70:	andeq	r4, r1, r8, lsl #31
   14f74:	andeq	r5, r1, r4, lsr #32
   14f78:	strdeq	r4, [r1], -r0
   14f7c:	andeq	r5, r1, r8, asr r0
   14f80:			; <UNDEFINED> instruction: 0x00014fbc
   14f84:	andeq	r5, r1, ip, lsl #1
   14f88:	movw	r0, #43872	; 0xab60
   14f8c:	movt	r0, #1
   14f90:	add	r1, r0, #4
   14f94:	movw	r0, #49356	; 0xc0cc
   14f98:	movt	r0, #2
   14f9c:	bl	157fc <get_boolean_op_value@@Base+0x390>
   14fa0:	ldrd	r0, [r5, #64]	; 0x40
   14fa4:	adds	r0, r0, #1
   14fa8:	adc	r1, r1, #0
   14fac:	strd	r0, [r5, #64]	; 0x40
   14fb0:	mov	r0, r4
   14fb4:	bl	1510c <free_node_id@@Base>
   14fb8:	b	150bc <free_node@@Base+0x194>
   14fbc:	movw	r0, #43872	; 0xab60
   14fc0:	movt	r0, #1
   14fc4:	add	r1, r0, #20
   14fc8:	movw	r0, #49356	; 0xc0cc
   14fcc:	movt	r0, #2
   14fd0:	bl	157fc <get_boolean_op_value@@Base+0x390>
   14fd4:	ldrd	r0, [r5, #96]	; 0x60
   14fd8:	adds	r0, r0, #1
   14fdc:	adc	r1, r1, #0
   14fe0:	strd	r0, [r5, #96]	; 0x60
   14fe4:	mov	r0, r4
   14fe8:	bl	15334 <free_node_if@@Base>
   14fec:	b	150bc <free_node@@Base+0x194>
   14ff0:	movw	r0, #43872	; 0xab60
   14ff4:	movt	r0, #1
   14ff8:	add	r1, r0, #12
   14ffc:	movw	r0, #49356	; 0xc0cc
   15000:	movt	r0, #2
   15004:	bl	157fc <get_boolean_op_value@@Base+0x390>
   15008:	ldrd	r0, [r5, #80]	; 0x50
   1500c:	adds	r0, r0, #1
   15010:	adc	r1, r1, #0
   15014:	strd	r0, [r5, #80]	; 0x50
   15018:	mov	r0, r4
   1501c:	bl	1521c <free_node_function@@Base>
   15020:	b	150bc <free_node@@Base+0x194>
   15024:	movw	r0, #43872	; 0xab60
   15028:	movt	r0, #1
   1502c:	add	r1, r0, #8
   15030:	movw	r0, #49356	; 0xc0cc
   15034:	movt	r0, #2
   15038:	bl	157fc <get_boolean_op_value@@Base+0x390>
   1503c:	ldrd	r0, [r5, #72]	; 0x48
   15040:	adds	r0, r0, #1
   15044:	adc	r1, r1, #0
   15048:	strd	r0, [r5, #72]	; 0x48
   1504c:	mov	r0, r4
   15050:	bl	15194 <free_node_int@@Base>
   15054:	b	150bc <free_node@@Base+0x194>
   15058:	movw	r0, #43872	; 0xab60
   1505c:	movt	r0, #1
   15060:	add	r1, r0, #16
   15064:	movw	r0, #49356	; 0xc0cc
   15068:	movt	r0, #2
   1506c:	bl	157fc <get_boolean_op_value@@Base+0x390>
   15070:	ldrd	r0, [r5, #88]	; 0x58
   15074:	adds	r0, r0, #1
   15078:	adc	r1, r1, #0
   1507c:	strd	r0, [r5, #88]	; 0x58
   15080:	mov	r0, r4
   15084:	bl	152ac <free_node_return@@Base>
   15088:	b	150bc <free_node@@Base+0x194>
   1508c:	movw	r0, #43872	; 0xab60
   15090:	movt	r0, #1
   15094:	add	r1, r0, #24
   15098:	movw	r0, #49356	; 0xc0cc
   1509c:	movt	r0, #2
   150a0:	bl	157fc <get_boolean_op_value@@Base+0x390>
   150a4:	ldrd	r0, [r5, #104]	; 0x68
   150a8:	adds	r0, r0, #1
   150ac:	adc	r1, r1, #0
   150b0:	strd	r0, [r5, #104]	; 0x68
   150b4:	mov	r0, r4
   150b8:	bl	153d4 <free_node_boolean_operator@@Base>
   150bc:	ldrd	r0, [r5, #112]	; 0x70
   150c0:	adds	r0, r0, #1
   150c4:	adc	r1, r1, #0
   150c8:	strd	r0, [r5, #112]	; 0x70
   150cc:	pop	{r4, r5, fp, pc}
   150d0:	movw	r0, #49356	; 0xc0cc
   150d4:	movt	r0, #2
   150d8:	movw	r1, #43872	; 0xab60
   150dc:	movt	r1, #1
   150e0:	bl	157fc <get_boolean_op_value@@Base+0x390>
   150e4:	movw	r0, #49392	; 0xc0f0
   150e8:	movt	r0, #2
   150ec:	ldr	r3, [r0]
   150f0:	movw	r0, #43664	; 0xaa90
   150f4:	movt	r0, #1
   150f8:	mov	r1, #31
   150fc:	mov	r2, #1
   15100:	bl	11ed0 <fwrite@plt>
   15104:	mov	r0, #1
   15108:	bl	11f3c <exit@plt>

0001510c <free_node_id@@Base>:
   1510c:	push	{r4, r5, fp, lr}
   15110:	add	fp, sp, #8
   15114:	mov	r4, r0
   15118:	movw	r5, #51264	; 0xc840
   1511c:	movt	r5, #2
   15120:	ldrd	r0, [r5]
   15124:	adds	r0, r0, #1
   15128:	adc	r1, r1, #0
   1512c:	strd	r0, [r5]
   15130:	ldr	r0, [r4, #4]
   15134:	mov	r1, #16
   15138:	cmp	r0, #0
   1513c:	movwne	r1, #8
   15140:	mov	r2, r5
   15144:	ldr	r1, [r2, r1]!
   15148:	adds	r1, r1, #1
   1514c:	str	r1, [r2]
   15150:	ldr	r1, [r2, #4]
   15154:	adc	r1, r1, #0
   15158:	str	r1, [r2, #4]
   1515c:	cmp	r0, #0
   15160:	beq	15178 <free_node_id@@Base+0x6c>
   15164:	ldrd	r2, [r5, #24]
   15168:	adds	r2, r2, #1
   1516c:	adc	r3, r3, #0
   15170:	strd	r2, [r5, #24]
   15174:	bl	14f28 <free_node@@Base>
   15178:	ldrd	r0, [r5, #32]
   1517c:	adds	r0, r0, #1
   15180:	adc	r1, r1, #0
   15184:	strd	r0, [r5, #32]
   15188:	mov	r0, r4
   1518c:	pop	{r4, r5, fp, lr}
   15190:	b	11e7c <free@plt>

00015194 <free_node_int@@Base>:
   15194:	push	{r4, r5, fp, lr}
   15198:	add	fp, sp, #8
   1519c:	mov	r4, r0
   151a0:	movw	r5, #51312	; 0xc870
   151a4:	movt	r5, #2
   151a8:	ldrd	r0, [r5]
   151ac:	adds	r0, r0, #1
   151b0:	adc	r1, r1, #0
   151b4:	strd	r0, [r5]
   151b8:	ldr	r0, [r4, #4]
   151bc:	mov	r1, #16
   151c0:	cmp	r0, #0
   151c4:	movwne	r1, #8
   151c8:	mov	r2, r5
   151cc:	ldr	r1, [r2, r1]!
   151d0:	adds	r1, r1, #1
   151d4:	str	r1, [r2]
   151d8:	ldr	r1, [r2, #4]
   151dc:	adc	r1, r1, #0
   151e0:	str	r1, [r2, #4]
   151e4:	cmp	r0, #0
   151e8:	beq	15200 <free_node_int@@Base+0x6c>
   151ec:	ldrd	r2, [r5, #24]
   151f0:	adds	r2, r2, #1
   151f4:	adc	r3, r3, #0
   151f8:	strd	r2, [r5, #24]
   151fc:	bl	14f28 <free_node@@Base>
   15200:	ldrd	r0, [r5, #32]
   15204:	adds	r0, r0, #1
   15208:	adc	r1, r1, #0
   1520c:	strd	r0, [r5, #32]
   15210:	mov	r0, r4
   15214:	pop	{r4, r5, fp, lr}
   15218:	b	11e7c <free@plt>

0001521c <free_node_function@@Base>:
   1521c:	push	{r4, r5, fp, lr}
   15220:	add	fp, sp, #8
   15224:	mov	r4, r0
   15228:	movw	r5, #51360	; 0xc8a0
   1522c:	movt	r5, #2
   15230:	ldrd	r0, [r5]
   15234:	adds	r0, r0, #1
   15238:	adc	r1, r1, #0
   1523c:	strd	r0, [r5]
   15240:	ldr	r0, [r4, #4]
   15244:	mov	r1, #16
   15248:	cmp	r0, #0
   1524c:	movwne	r1, #8
   15250:	mov	r2, r5
   15254:	ldr	r1, [r2, r1]!
   15258:	adds	r1, r1, #1
   1525c:	str	r1, [r2]
   15260:	ldr	r1, [r2, #4]
   15264:	adc	r1, r1, #0
   15268:	str	r1, [r2, #4]
   1526c:	cmp	r0, #0
   15270:	beq	15288 <free_node_function@@Base+0x6c>
   15274:	ldrd	r2, [r5, #24]
   15278:	adds	r2, r2, #1
   1527c:	adc	r3, r3, #0
   15280:	strd	r2, [r5, #24]
   15284:	bl	14f28 <free_node@@Base>
   15288:	ldrd	r0, [r5, #32]
   1528c:	adds	r0, r0, #1
   15290:	adc	r1, r1, #0
   15294:	strd	r0, [r5, #32]
   15298:	ldr	r0, [r4, #8]
   1529c:	bl	11e7c <free@plt>
   152a0:	mov	r0, r4
   152a4:	pop	{r4, r5, fp, lr}
   152a8:	b	11e7c <free@plt>

000152ac <free_node_return@@Base>:
   152ac:	push	{r4, r5, fp, lr}
   152b0:	add	fp, sp, #8
   152b4:	mov	r4, r0
   152b8:	movw	r5, #51408	; 0xc8d0
   152bc:	movt	r5, #2
   152c0:	ldrd	r0, [r5]
   152c4:	adds	r0, r0, #1
   152c8:	adc	r1, r1, #0
   152cc:	strd	r0, [r5]
   152d0:	ldr	r0, [r4, #4]
   152d4:	mov	r1, #16
   152d8:	cmp	r0, #0
   152dc:	movwne	r1, #8
   152e0:	mov	r2, r5
   152e4:	ldr	r1, [r2, r1]!
   152e8:	adds	r1, r1, #1
   152ec:	str	r1, [r2]
   152f0:	ldr	r1, [r2, #4]
   152f4:	adc	r1, r1, #0
   152f8:	str	r1, [r2, #4]
   152fc:	cmp	r0, #0
   15300:	beq	15318 <free_node_return@@Base+0x6c>
   15304:	ldrd	r2, [r5, #24]
   15308:	adds	r2, r2, #1
   1530c:	adc	r3, r3, #0
   15310:	strd	r2, [r5, #24]
   15314:	bl	14f28 <free_node@@Base>
   15318:	ldrd	r0, [r5, #32]
   1531c:	adds	r0, r0, #1
   15320:	adc	r1, r1, #0
   15324:	strd	r0, [r5, #32]
   15328:	mov	r0, r4
   1532c:	pop	{r4, r5, fp, lr}
   15330:	b	11e7c <free@plt>

00015334 <free_node_if@@Base>:
   15334:	push	{r4, r5, fp, lr}
   15338:	add	fp, sp, #8
   1533c:	mov	r4, r0
   15340:	movw	r5, #51456	; 0xc900
   15344:	movt	r5, #2
   15348:	ldrd	r0, [r5]
   1534c:	adds	r0, r0, #1
   15350:	adc	r1, r1, #0
   15354:	strd	r0, [r5]
   15358:	ldr	r0, [r4, #4]
   1535c:	mov	r1, #16
   15360:	cmp	r0, #0
   15364:	movwne	r1, #8
   15368:	mov	r2, r5
   1536c:	ldr	r1, [r2, r1]!
   15370:	adds	r1, r1, #1
   15374:	str	r1, [r2]
   15378:	ldr	r1, [r2, #4]
   1537c:	adc	r1, r1, #0
   15380:	str	r1, [r2, #4]
   15384:	cmp	r0, #0
   15388:	beq	153a0 <free_node_if@@Base+0x6c>
   1538c:	ldrd	r2, [r5, #24]
   15390:	adds	r2, r2, #1
   15394:	adc	r3, r3, #0
   15398:	strd	r2, [r5, #24]
   1539c:	bl	14f28 <free_node@@Base>
   153a0:	ldrd	r0, [r5, #32]
   153a4:	adds	r0, r0, #1
   153a8:	adc	r1, r1, #0
   153ac:	strd	r0, [r5, #32]
   153b0:	ldr	r0, [r4, #8]
   153b4:	bl	14f28 <free_node@@Base>
   153b8:	ldr	r0, [r4, #12]
   153bc:	bl	14f28 <free_node@@Base>
   153c0:	ldr	r0, [r4, #16]
   153c4:	bl	14f28 <free_node@@Base>
   153c8:	mov	r0, r4
   153cc:	pop	{r4, r5, fp, lr}
   153d0:	b	11e7c <free@plt>

000153d4 <free_node_boolean_operator@@Base>:
   153d4:	push	{r4, r5, fp, lr}
   153d8:	add	fp, sp, #8
   153dc:	mov	r4, r0
   153e0:	movw	r5, #51504	; 0xc930
   153e4:	movt	r5, #2
   153e8:	ldrd	r0, [r5]
   153ec:	adds	r0, r0, #1
   153f0:	adc	r1, r1, #0
   153f4:	strd	r0, [r5]
   153f8:	ldr	r0, [r4, #4]
   153fc:	mov	r1, #16
   15400:	cmp	r0, #0
   15404:	movwne	r1, #8
   15408:	mov	r2, r5
   1540c:	ldr	r1, [r2, r1]!
   15410:	adds	r1, r1, #1
   15414:	str	r1, [r2]
   15418:	ldr	r1, [r2, #4]
   1541c:	adc	r1, r1, #0
   15420:	str	r1, [r2, #4]
   15424:	cmp	r0, #0
   15428:	beq	15440 <free_node_boolean_operator@@Base+0x6c>
   1542c:	ldrd	r2, [r5, #24]
   15430:	adds	r2, r2, #1
   15434:	adc	r3, r3, #0
   15438:	strd	r2, [r5, #24]
   1543c:	bl	14f28 <free_node@@Base>
   15440:	ldrd	r0, [r5, #32]
   15444:	adds	r0, r0, #1
   15448:	adc	r1, r1, #0
   1544c:	strd	r0, [r5, #32]
   15450:	ldr	r0, [r4, #8]
   15454:	bl	14f28 <free_node@@Base>
   15458:	ldr	r0, [r4, #12]
   1545c:	bl	14f28 <free_node@@Base>
   15460:	mov	r0, r4
   15464:	pop	{r4, r5, fp, lr}
   15468:	b	11e7c <free@plt>

0001546c <get_boolean_op_value@@Base>:
   1546c:	push	{r4, r5, r6, sl, fp, lr}
   15470:	add	fp, sp, #16
   15474:	movw	r6, #51552	; 0xc960
   15478:	movt	r6, #2
   1547c:	ldrd	r2, [r6]
   15480:	adds	r2, r2, #1
   15484:	adc	r3, r3, #0
   15488:	strd	r2, [r6]
   1548c:	ldr	r4, [r0, #4]
   15490:	mov	r0, r4
   15494:	mov	r1, #2
   15498:	bl	11fc0 <strnlen@plt>
   1549c:	mov	r1, #16
   154a0:	cmp	r0, #2
   154a4:	movweq	r1, #8
   154a8:	mov	r2, r6
   154ac:	ldr	r1, [r2, r1]!
   154b0:	adds	r1, r1, #1
   154b4:	str	r1, [r2]
   154b8:	ldr	r1, [r2, #4]
   154bc:	adc	r1, r1, #0
   154c0:	str	r1, [r2, #4]
   154c4:	cmp	r0, #2
   154c8:	bne	15680 <get_boolean_op_value@@Base+0x214>
   154cc:	movw	r1, #43696	; 0xaab0
   154d0:	movt	r1, #1
   154d4:	mov	r0, r4
   154d8:	mov	r2, #2
   154dc:	bl	12008 <strncmp@plt>
   154e0:	mov	r1, #32
   154e4:	cmp	r0, #0
   154e8:	movweq	r1, #24
   154ec:	mov	r2, r6
   154f0:	ldr	r1, [r2, r1]!
   154f4:	adds	r1, r1, #1
   154f8:	str	r1, [r2]
   154fc:	ldr	r1, [r2, #4]
   15500:	adc	r1, r1, #0
   15504:	str	r1, [r2, #4]
   15508:	cmp	r0, #0
   1550c:	beq	156dc <get_boolean_op_value@@Base+0x270>
   15510:	movw	r1, #43699	; 0xaab3
   15514:	movt	r1, #1
   15518:	mov	r0, r4
   1551c:	mov	r2, #2
   15520:	bl	12008 <strncmp@plt>
   15524:	mov	r1, #56	; 0x38
   15528:	cmp	r0, #0
   1552c:	movweq	r1, #48	; 0x30
   15530:	mov	r2, r6
   15534:	ldr	r1, [r2, r1]!
   15538:	adds	r1, r1, #1
   1553c:	str	r1, [r2]
   15540:	ldr	r1, [r2, #4]
   15544:	adc	r1, r1, #0
   15548:	str	r1, [r2, #4]
   1554c:	cmp	r0, #0
   15550:	beq	15754 <get_boolean_op_value@@Base+0x2e8>
   15554:	movw	r1, #43702	; 0xaab6
   15558:	movt	r1, #1
   1555c:	mov	r5, #2
   15560:	mov	r0, r4
   15564:	mov	r2, #2
   15568:	bl	12008 <strncmp@plt>
   1556c:	mov	r1, #80	; 0x50
   15570:	cmp	r0, #0
   15574:	movweq	r1, #72	; 0x48
   15578:	mov	r2, r6
   1557c:	ldr	r1, [r2, r1]!
   15580:	adds	r1, r1, #1
   15584:	str	r1, [r2]
   15588:	ldr	r1, [r2, #4]
   1558c:	adc	r1, r1, #0
   15590:	str	r1, [r2, #4]
   15594:	cmp	r0, #0
   15598:	beq	1576c <get_boolean_op_value@@Base+0x300>
   1559c:	movw	r1, #43705	; 0xaab9
   155a0:	movt	r1, #1
   155a4:	mov	r0, r4
   155a8:	mov	r2, #2
   155ac:	bl	12008 <strncmp@plt>
   155b0:	mov	r1, #104	; 0x68
   155b4:	cmp	r0, #0
   155b8:	movweq	r1, #96	; 0x60
   155bc:	mov	r2, r6
   155c0:	ldr	r1, [r2, r1]!
   155c4:	adds	r1, r1, #1
   155c8:	str	r1, [r2]
   155cc:	ldr	r1, [r2, #4]
   155d0:	adc	r1, r1, #0
   155d4:	str	r1, [r2, #4]
   155d8:	cmp	r0, #0
   155dc:	beq	15780 <get_boolean_op_value@@Base+0x314>
   155e0:	movw	r1, #43708	; 0xaabc
   155e4:	movt	r1, #1
   155e8:	mov	r0, r4
   155ec:	mov	r2, #2
   155f0:	bl	12008 <strncmp@plt>
   155f4:	mov	r1, #128	; 0x80
   155f8:	cmp	r0, #0
   155fc:	movweq	r1, #120	; 0x78
   15600:	mov	r2, r6
   15604:	ldr	r1, [r2, r1]!
   15608:	adds	r1, r1, #1
   1560c:	str	r1, [r2]
   15610:	ldr	r1, [r2, #4]
   15614:	adc	r1, r1, #0
   15618:	str	r1, [r2, #4]
   1561c:	cmp	r0, #0
   15620:	beq	15798 <get_boolean_op_value@@Base+0x32c>
   15624:	movw	r1, #43711	; 0xaabf
   15628:	movt	r1, #1
   1562c:	mov	r0, r4
   15630:	mov	r2, #2
   15634:	bl	12008 <strncmp@plt>
   15638:	mov	r1, #152	; 0x98
   1563c:	cmp	r0, #0
   15640:	movweq	r1, #144	; 0x90
   15644:	mov	r2, r6
   15648:	ldr	r1, [r2, r1]!
   1564c:	adds	r1, r1, #1
   15650:	str	r1, [r2]
   15654:	ldr	r1, [r2, #4]
   15658:	adc	r1, r1, #0
   1565c:	str	r1, [r2, #4]
   15660:	cmp	r0, #0
   15664:	bne	157d8 <get_boolean_op_value@@Base+0x36c>
   15668:	ldrd	r0, [r6, #160]	; 0xa0
   1566c:	adds	r0, r0, #1
   15670:	adc	r1, r1, #0
   15674:	strd	r0, [r6, #160]	; 0xa0
   15678:	mov	r5, #5
   1567c:	b	157ac <get_boolean_op_value@@Base+0x340>
   15680:	movw	r0, #49360	; 0xc0d0
   15684:	movt	r0, #2
   15688:	mov	r1, #0
   1568c:	str	r1, [r0]
   15690:	ldrb	r0, [r4]
   15694:	cmp	r0, #62	; 0x3e
   15698:	beq	15724 <get_boolean_op_value@@Base+0x2b8>
   1569c:	cmp	r0, #60	; 0x3c
   156a0:	beq	156f4 <get_boolean_op_value@@Base+0x288>
   156a4:	cmp	r0, #33	; 0x21
   156a8:	bne	157c4 <get_boolean_op_value@@Base+0x358>
   156ac:	movw	r0, #43900	; 0xab7c
   156b0:	movt	r0, #1
   156b4:	add	r1, r0, #4
   156b8:	movw	r0, #49360	; 0xc0d0
   156bc:	movt	r0, #2
   156c0:	bl	157fc <get_boolean_op_value@@Base+0x390>
   156c4:	ldrd	r0, [r6, #200]	; 0xc8
   156c8:	adds	r0, r0, #1
   156cc:	adc	r1, r1, #0
   156d0:	strd	r0, [r6, #200]	; 0xc8
   156d4:	mov	r5, #8
   156d8:	b	157ac <get_boolean_op_value@@Base+0x340>
   156dc:	ldrd	r0, [r6, #40]	; 0x28
   156e0:	adds	r0, r0, #1
   156e4:	adc	r1, r1, #0
   156e8:	strd	r0, [r6, #40]	; 0x28
   156ec:	mov	r5, #0
   156f0:	b	157ac <get_boolean_op_value@@Base+0x340>
   156f4:	movw	r0, #43900	; 0xab7c
   156f8:	movt	r0, #1
   156fc:	add	r1, r0, #8
   15700:	movw	r0, #49360	; 0xc0d0
   15704:	movt	r0, #2
   15708:	bl	157fc <get_boolean_op_value@@Base+0x390>
   1570c:	ldrd	r0, [r6, #208]	; 0xd0
   15710:	adds	r0, r0, #1
   15714:	adc	r1, r1, #0
   15718:	strd	r0, [r6, #208]	; 0xd0
   1571c:	mov	r5, #6
   15720:	b	157ac <get_boolean_op_value@@Base+0x340>
   15724:	movw	r0, #43900	; 0xab7c
   15728:	movt	r0, #1
   1572c:	add	r1, r0, #12
   15730:	movw	r0, #49360	; 0xc0d0
   15734:	movt	r0, #2
   15738:	bl	157fc <get_boolean_op_value@@Base+0x390>
   1573c:	ldrd	r0, [r6, #216]	; 0xd8
   15740:	adds	r0, r0, #1
   15744:	adc	r1, r1, #0
   15748:	strd	r0, [r6, #216]	; 0xd8
   1574c:	mov	r5, #7
   15750:	b	157ac <get_boolean_op_value@@Base+0x340>
   15754:	ldrd	r0, [r6, #64]	; 0x40
   15758:	adds	r0, r0, #1
   1575c:	adc	r1, r1, #0
   15760:	strd	r0, [r6, #64]	; 0x40
   15764:	mov	r5, #1
   15768:	b	157ac <get_boolean_op_value@@Base+0x340>
   1576c:	ldrd	r0, [r6, #88]	; 0x58
   15770:	adds	r0, r0, #1
   15774:	adc	r1, r1, #0
   15778:	strd	r0, [r6, #88]	; 0x58
   1577c:	b	157ac <get_boolean_op_value@@Base+0x340>
   15780:	ldrd	r0, [r6, #112]	; 0x70
   15784:	adds	r0, r0, #1
   15788:	adc	r1, r1, #0
   1578c:	strd	r0, [r6, #112]	; 0x70
   15790:	mov	r5, #3
   15794:	b	157ac <get_boolean_op_value@@Base+0x340>
   15798:	ldrd	r0, [r6, #136]	; 0x88
   1579c:	adds	r0, r0, #1
   157a0:	adc	r1, r1, #0
   157a4:	strd	r0, [r6, #136]	; 0x88
   157a8:	mov	r5, #4
   157ac:	ldrd	r0, [r6, #224]	; 0xe0
   157b0:	adds	r0, r0, #1
   157b4:	adc	r1, r1, #0
   157b8:	strd	r0, [r6, #224]	; 0xe0
   157bc:	mov	r0, r5
   157c0:	pop	{r4, r5, r6, sl, fp, pc}
   157c4:	movw	r0, #49360	; 0xc0d0
   157c8:	movt	r0, #2
   157cc:	movw	r1, #43900	; 0xab7c
   157d0:	movt	r1, #1
   157d4:	bl	157fc <get_boolean_op_value@@Base+0x390>
   157d8:	movw	r0, #49392	; 0xc0f0
   157dc:	movt	r0, #2
   157e0:	ldr	r0, [r0]
   157e4:	movw	r1, #43714	; 0xaac2
   157e8:	movt	r1, #1
   157ec:	mov	r2, r4
   157f0:	bl	11f60 <fprintf@plt>
   157f4:	mov	r0, #1
   157f8:	bl	11f3c <exit@plt>
   157fc:	ldr	r0, [r0]
   15800:	cmn	r0, #1
   15804:	ldrne	r0, [r1, r0, lsl #2]
   15808:	cmpne	r0, #0
   1580c:	bne	15814 <get_boolean_op_value@@Base+0x3a8>
   15810:	bx	lr
   15814:	ldrd	r2, [r0]
   15818:	adds	r2, r2, #1
   1581c:	adc	r3, r3, #0
   15820:	strd	r2, [r0]
   15824:	bx	lr
   15828:	push	{r4, r5, r6, lr}
   1582c:	sub	sp, sp, #8
   15830:	movw	r0, #44368	; 0xad50
   15834:	movt	r0, #1
   15838:	movw	r1, #41044	; 0xa054
   1583c:	movt	r1, #1
   15840:	movw	r2, #23410	; 0x5b72
   15844:	movt	r2, #13184	; 0x3380
   15848:	bl	16ae4 <read_boolean_unary_expression@@Base+0x3dc>
   1584c:	movw	r0, #44240	; 0xacd0
   15850:	movt	r0, #1
   15854:	add	r4, r0, #4
   15858:	mov	r5, #0
   1585c:	movw	r6, #43920	; 0xab90
   15860:	movt	r6, #1
   15864:	mov	r3, r6
   15868:	ldr	r0, [r3, r5]!
   1586c:	ldr	r1, [r3, #16]
   15870:	str	r1, [sp]
   15874:	ldmib	r3, {r1, r2}
   15878:	ldrb	r3, [r3, #12]
   1587c:	bl	17248 <read_boolean_unary_expression@@Base+0xb40>
   15880:	ldrd	r0, [r4, #-4]
   15884:	bl	17afc <read_boolean_unary_expression@@Base+0x13f4>
   15888:	add	r5, r5, #20
   1588c:	add	r4, r4, #8
   15890:	cmp	r5, #320	; 0x140
   15894:	bne	15864 <get_boolean_op_value@@Base+0x3f8>
   15898:	bl	18278 <read_boolean_unary_expression@@Base+0x1b70>
   1589c:	add	sp, sp, #8
   158a0:	pop	{r4, r5, r6, lr}
   158a4:	b	18fe4 <read_boolean_unary_expression@@Base+0x28dc>
   158a8:	push	{fp, lr}
   158ac:	bl	15828 <get_boolean_op_value@@Base+0x3bc>
   158b0:	movw	r2, #51264	; 0xc840
   158b4:	movt	r2, #2
   158b8:	mov	r0, #0
   158bc:	vmov.i32	q8, #0	; 0x00000000
   158c0:	str	r0, [r2, #32]
   158c4:	add	r1, r2, #16
   158c8:	vst1.64	{d16-d17}, [r1 :128]
   158cc:	movw	r3, #51136	; 0xc7c0
   158d0:	movt	r3, #2
   158d4:	str	r0, [r3, #112]	; 0x70
   158d8:	add	r1, r3, #96	; 0x60
   158dc:	vst1.64	{d16-d17}, [r1 :128]
   158e0:	add	r1, r3, #80	; 0x50
   158e4:	vst1.64	{d16-d17}, [r1 :128]
   158e8:	add	r1, r3, #64	; 0x40
   158ec:	vst1.64	{d16-d17}, [r1 :128]
   158f0:	add	r1, r3, #48	; 0x30
   158f4:	vst1.64	{d16-d17}, [r1 :128]
   158f8:	add	r1, r3, #32
   158fc:	vst1.64	{d16-d17}, [r1 :128]
   15900:	add	r1, r3, #16
   15904:	vst1.64	{d16-d17}, [r1 :128]
   15908:	movw	r1, #51024	; 0xc750
   1590c:	movt	r1, #2
   15910:	vst1.64	{d16-d17}, [r1]
   15914:	movw	r1, #51008	; 0xc740
   15918:	movt	r1, #2
   1591c:	vst1.64	{d16-d17}, [r1]
   15920:	movw	r1, #51040	; 0xc760
   15924:	movt	r1, #2
   15928:	vst1.64	{d16-d17}, [r1]
   1592c:	movw	r1, #51056	; 0xc770
   15930:	movt	r1, #2
   15934:	vst1.64	{d16-d17}, [r1]
   15938:	movw	r1, #51072	; 0xc780
   1593c:	movt	r1, #2
   15940:	vst1.64	{d16-d17}, [r1]
   15944:	movw	r1, #51088	; 0xc790
   15948:	movt	r1, #2
   1594c:	vst1.64	{d16-d17}, [r1]
   15950:	movw	r1, #51104	; 0xc7a0
   15954:	movt	r1, #2
   15958:	vst1.64	{d16-d17}, [r1]
   1595c:	movw	r1, #51120	; 0xc7b0
   15960:	movt	r1, #2
   15964:	vst1.64	{d16-d17}, [r1]
   15968:	mov	r1, #36	; 0x24
   1596c:	vst1.64	{d16-d17}, [r2 :128], r1
   15970:	str	r0, [r2]
   15974:	mov	r2, #116	; 0x74
   15978:	vst1.64	{d16-d17}, [r3 :128], r2
   1597c:	str	r0, [r3]
   15980:	movw	r2, #51312	; 0xc870
   15984:	movt	r2, #2
   15988:	str	r0, [r2, #32]
   1598c:	add	r3, r2, #16
   15990:	vst1.64	{d16-d17}, [r3 :128]
   15994:	vst1.64	{d16-d17}, [r2 :128], r1
   15998:	str	r0, [r2]
   1599c:	movw	r2, #51360	; 0xc8a0
   159a0:	movt	r2, #2
   159a4:	str	r0, [r2, #32]
   159a8:	add	r3, r2, #16
   159ac:	vst1.64	{d16-d17}, [r3 :128]
   159b0:	vst1.64	{d16-d17}, [r2 :128], r1
   159b4:	str	r0, [r2]
   159b8:	movw	r2, #51408	; 0xc8d0
   159bc:	movt	r2, #2
   159c0:	str	r0, [r2, #32]
   159c4:	add	r3, r2, #16
   159c8:	vst1.64	{d16-d17}, [r3 :128]
   159cc:	vst1.64	{d16-d17}, [r2 :128], r1
   159d0:	str	r0, [r2]
   159d4:	movw	r2, #51456	; 0xc900
   159d8:	movt	r2, #2
   159dc:	str	r0, [r2, #32]
   159e0:	add	r3, r2, #16
   159e4:	vst1.64	{d16-d17}, [r3 :128]
   159e8:	vst1.64	{d16-d17}, [r2 :128], r1
   159ec:	str	r0, [r2]
   159f0:	movw	r2, #51504	; 0xc930
   159f4:	movt	r2, #2
   159f8:	str	r0, [r2, #32]
   159fc:	add	r3, r2, #16
   15a00:	vst1.64	{d16-d17}, [r3 :128]
   15a04:	vst1.64	{d16-d17}, [r2 :128], r1
   15a08:	str	r0, [r2]
   15a0c:	movw	r0, #51552	; 0xc960
   15a10:	movt	r0, #2
   15a14:	mov	r1, #0
   15a18:	mov	r2, #232	; 0xe8
   15a1c:	bl	11f90 <memset@plt>
   15a20:	pop	{fp, pc}
   15a24:	movw	r0, #22568	; 0x5828
   15a28:	movt	r0, #1
   15a2c:	movw	r1, #22696	; 0x58a8
   15a30:	movt	r1, #1
   15a34:	b	19494 <__gcov_flush@@Base+0xb4>

00015a38 <init_grammar@@Base>:
   15a38:	push	{r4, sl, fp, lr}
   15a3c:	add	fp, sp, #8
   15a40:	movw	r2, #51792	; 0xca50
   15a44:	movt	r2, #2
   15a48:	ldm	r2, {r3, ip, lr}
   15a4c:	ldr	r4, [r2, #12]
   15a50:	adds	r3, r3, #1
   15a54:	adc	ip, ip, #0
   15a58:	adds	lr, lr, #1
   15a5c:	adc	r4, r4, #0
   15a60:	stm	r2, {r3, ip, lr}
   15a64:	str	r4, [r2, #12]
   15a68:	str	r1, [r0]
   15a6c:	pop	{r4, sl, fp, pc}

00015a70 <destroy_grammar@@Base>:
   15a70:	movw	r0, #51808	; 0xca60
   15a74:	movt	r0, #2
   15a78:	ldm	r0, {r1, r2, r3, ip}
   15a7c:	adds	r1, r1, #1
   15a80:	adc	r2, r2, #0
   15a84:	adds	r3, r3, #1
   15a88:	adc	ip, ip, #0
   15a8c:	stm	r0, {r1, r2, r3, ip}
   15a90:	bx	lr

00015a94 <build_ast@@Base>:
   15a94:	push	{fp, lr}
   15a98:	mov	fp, sp
   15a9c:	movw	r1, #51824	; 0xca70
   15aa0:	movt	r1, #2
   15aa4:	ldm	r1, {r2, r3, ip, lr}
   15aa8:	adds	r2, r2, #1
   15aac:	adc	r3, r3, #0
   15ab0:	adds	ip, ip, #1
   15ab4:	adc	lr, lr, #0
   15ab8:	stm	r1, {r2, r3, ip, lr}
   15abc:	pop	{fp, lr}
   15ac0:	b	15ac4 <read_function_ast_node@@Base>

00015ac4 <read_function_ast_node@@Base>:
   15ac4:	push	{r4, r5, r6, r7, fp, lr}
   15ac8:	add	fp, sp, #16
   15acc:	mov	r4, r0
   15ad0:	movw	r7, #51840	; 0xca80
   15ad4:	movt	r7, #2
   15ad8:	ldrd	r0, [r7]
   15adc:	adds	r0, r0, #1
   15ae0:	adc	r1, r1, #0
   15ae4:	strd	r0, [r7]
   15ae8:	ldr	r0, [r4]
   15aec:	bl	1211c <next@@Base>
   15af0:	ldr	r1, [r0]
   15af4:	mov	r2, #16
   15af8:	cmp	r1, #0
   15afc:	movwne	r2, #8
   15b00:	mov	r3, r7
   15b04:	ldr	r2, [r3, r2]!
   15b08:	adds	r2, r2, #1
   15b0c:	str	r2, [r3]
   15b10:	ldr	r2, [r3, #4]
   15b14:	adc	r2, r2, #0
   15b18:	str	r2, [r3, #4]
   15b1c:	cmp	r1, #0
   15b20:	beq	15b3c <read_function_ast_node@@Base+0x78>
   15b24:	ldrd	r0, [r7, #24]
   15b28:	adds	r0, r0, #1
   15b2c:	adc	r1, r1, #0
   15b30:	strd	r0, [r7, #24]
   15b34:	mov	r4, #0
   15b38:	b	15c84 <read_function_ast_node@@Base+0x1c0>
   15b3c:	bl	14828 <free_token_int_type@@Base>
   15b40:	ldr	r0, [r4]
   15b44:	bl	1211c <next@@Base>
   15b48:	mov	r5, r0
   15b4c:	ldr	r0, [r0]
   15b50:	mov	r1, #40	; 0x28
   15b54:	cmp	r0, #2
   15b58:	movwne	r1, #32
   15b5c:	mov	r2, r7
   15b60:	ldr	r1, [r2, r1]!
   15b64:	adds	r1, r1, #1
   15b68:	str	r1, [r2]
   15b6c:	ldr	r1, [r2, #4]
   15b70:	adc	r1, r1, #0
   15b74:	str	r1, [r2, #4]
   15b78:	cmp	r0, #2
   15b7c:	beq	15b98 <read_function_ast_node@@Base+0xd4>
   15b80:	ldrd	r0, [r7, #48]	; 0x30
   15b84:	adds	r0, r0, #1
   15b88:	adc	r1, r1, #0
   15b8c:	strd	r0, [r7, #48]	; 0x30
   15b90:	mov	r4, #0
   15b94:	b	15c84 <read_function_ast_node@@Base+0x1c0>
   15b98:	ldr	r0, [r4]
   15b9c:	bl	1211c <next@@Base>
   15ba0:	ldr	r1, [r0]
   15ba4:	mov	r2, #64	; 0x40
   15ba8:	cmp	r1, #3
   15bac:	movwne	r2, #56	; 0x38
   15bb0:	mov	r3, r7
   15bb4:	ldr	r2, [r3, r2]!
   15bb8:	adds	r2, r2, #1
   15bbc:	str	r2, [r3]
   15bc0:	ldr	r2, [r3, #4]
   15bc4:	adc	r2, r2, #0
   15bc8:	str	r2, [r3, #4]
   15bcc:	cmp	r1, #3
   15bd0:	beq	15bec <read_function_ast_node@@Base+0x128>
   15bd4:	ldrd	r0, [r7, #72]	; 0x48
   15bd8:	adds	r0, r0, #1
   15bdc:	adc	r1, r1, #0
   15be0:	strd	r0, [r7, #72]	; 0x48
   15be4:	mov	r4, #0
   15be8:	b	15c84 <read_function_ast_node@@Base+0x1c0>
   15bec:	bl	148b8 <free_token_opar@@Base>
   15bf0:	ldr	r0, [r4]
   15bf4:	bl	1211c <next@@Base>
   15bf8:	ldr	r1, [r0]
   15bfc:	mov	r2, #88	; 0x58
   15c00:	cmp	r1, #4
   15c04:	movwne	r2, #80	; 0x50
   15c08:	mov	r3, r7
   15c0c:	ldr	r2, [r3, r2]!
   15c10:	adds	r2, r2, #1
   15c14:	str	r2, [r3]
   15c18:	ldr	r2, [r3, #4]
   15c1c:	adc	r2, r2, #0
   15c20:	str	r2, [r3, #4]
   15c24:	cmp	r1, #4
   15c28:	beq	15c44 <read_function_ast_node@@Base+0x180>
   15c2c:	ldrd	r0, [r7, #96]	; 0x60
   15c30:	adds	r0, r0, #1
   15c34:	adc	r1, r1, #0
   15c38:	strd	r0, [r7, #96]	; 0x60
   15c3c:	mov	r4, #0
   15c40:	b	15c84 <read_function_ast_node@@Base+0x1c0>
   15c44:	ldrd	r2, [r7, #104]	; 0x68
   15c48:	adds	r2, r2, #1
   15c4c:	adc	r3, r3, #0
   15c50:	strd	r2, [r7, #104]	; 0x68
   15c54:	bl	148e8 <free_token_cpar@@Base>
   15c58:	mov	r0, r4
   15c5c:	bl	15c9c <read_body@@Base>
   15c60:	mov	r6, r0
   15c64:	mov	r0, #16
   15c68:	bl	11f00 <malloc@plt>
   15c6c:	mov	r4, r0
   15c70:	ldr	r1, [r5, #4]
   15c74:	mov	r2, r6
   15c78:	bl	14de8 <init_node_function@@Base>
   15c7c:	mov	r0, r5
   15c80:	bl	14888 <free_token_function@@Base>
   15c84:	ldrd	r0, [r7, #112]	; 0x70
   15c88:	adds	r0, r0, #1
   15c8c:	adc	r1, r1, #0
   15c90:	strd	r0, [r7, #112]	; 0x70
   15c94:	mov	r0, r4
   15c98:	pop	{r4, r5, r6, r7, fp, pc}

00015c9c <read_body@@Base>:
   15c9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ca0:	add	fp, sp, #28
   15ca4:	sub	sp, sp, #4
   15ca8:	mov	sl, r0
   15cac:	movw	r4, #51968	; 0xcb00
   15cb0:	movt	r4, #2
   15cb4:	ldrd	r0, [r4]
   15cb8:	adds	r0, r0, #1
   15cbc:	adc	r1, r1, #0
   15cc0:	strd	r0, [r4]
   15cc4:	ldr	r0, [sl]
   15cc8:	bl	1211c <next@@Base>
   15ccc:	ldr	r1, [r0]
   15cd0:	mov	r2, #16
   15cd4:	cmp	r1, #5
   15cd8:	movwne	r2, #8
   15cdc:	mov	r3, r4
   15ce0:	ldr	r2, [r3, r2]!
   15ce4:	adds	r2, r2, #1
   15ce8:	str	r2, [r3]
   15cec:	ldr	r2, [r3, #4]
   15cf0:	adc	r2, r2, #0
   15cf4:	str	r2, [r3, #4]
   15cf8:	cmp	r1, #5
   15cfc:	beq	15d18 <read_body@@Base+0x7c>
   15d00:	ldrd	r0, [r4, #24]
   15d04:	adds	r0, r0, #1
   15d08:	adc	r1, r1, #0
   15d0c:	strd	r0, [r4, #24]
   15d10:	mov	r6, #0
   15d14:	b	15f0c <read_body@@Base+0x270>
   15d18:	ldrd	r2, [r4, #32]
   15d1c:	adds	r2, r2, #1
   15d20:	adc	r3, r3, #0
   15d24:	strd	r2, [r4, #32]
   15d28:	bl	14918 <free_token_obra@@Base>
   15d2c:	ldr	r0, [sl]
   15d30:	bl	1211c <next@@Base>
   15d34:	mov	r7, r0
   15d38:	ldr	r0, [r0]
   15d3c:	mov	r1, #48	; 0x30
   15d40:	cmp	r0, #6
   15d44:	movwne	r1, #40	; 0x28
   15d48:	mov	r2, r4
   15d4c:	ldr	r1, [r2, r1]!
   15d50:	adds	r1, r1, #1
   15d54:	str	r1, [r2]
   15d58:	ldr	r1, [r2, #4]
   15d5c:	adc	r1, r1, #0
   15d60:	str	r1, [r2, #4]
   15d64:	mov	r6, #0
   15d68:	cmp	r0, #6
   15d6c:	beq	15ec0 <read_body@@Base+0x224>
   15d70:	movw	r9, #49364	; 0xc0d4
   15d74:	movt	r9, #2
   15d78:	movw	r1, #44848	; 0xaf30
   15d7c:	movt	r1, #1
   15d80:	add	r1, r1, #8
   15d84:	str	r1, [sp]
   15d88:	mov	r8, #0
   15d8c:	mov	r6, #0
   15d90:	mov	r1, #0
   15d94:	str	r1, [r9]
   15d98:	cmp	r0, #10
   15d9c:	beq	15de0 <read_body@@Base+0x144>
   15da0:	cmp	r0, #7
   15da4:	bne	15edc <read_body@@Base+0x240>
   15da8:	movw	r0, #44848	; 0xaf30
   15dac:	movt	r0, #1
   15db0:	add	r1, r0, #4
   15db4:	mov	r0, r9
   15db8:	bl	16858 <read_boolean_unary_expression@@Base+0x150>
   15dbc:	ldrd	r0, [r4, #80]	; 0x50
   15dc0:	adds	r0, r0, #1
   15dc4:	adc	r1, r1, #0
   15dc8:	strd	r0, [r4, #80]	; 0x50
   15dcc:	mov	r0, r7
   15dd0:	bl	14978 <free_token_return@@Base>
   15dd4:	mov	r0, sl
   15dd8:	bl	15f28 <read_return_expression@@Base>
   15ddc:	b	15e0c <read_body@@Base+0x170>
   15de0:	mov	r0, r9
   15de4:	ldr	r1, [sp]
   15de8:	bl	16858 <read_boolean_unary_expression@@Base+0x150>
   15dec:	ldrd	r0, [r4, #88]	; 0x58
   15df0:	adds	r0, r0, #1
   15df4:	adc	r1, r1, #0
   15df8:	strd	r0, [r4, #88]	; 0x58
   15dfc:	mov	r0, r7
   15e00:	bl	14a08 <free_token_if@@Base>
   15e04:	mov	r0, sl
   15e08:	bl	16054 <read_if_statement@@Base>
   15e0c:	mov	r5, r0
   15e10:	cmp	r6, #0
   15e14:	mov	r0, #112	; 0x70
   15e18:	movwne	r0, #104	; 0x68
   15e1c:	mov	r1, r4
   15e20:	ldr	r0, [r1, r0]!
   15e24:	adds	r0, r0, #1
   15e28:	str	r0, [r1]
   15e2c:	ldr	r0, [r1, #4]
   15e30:	adc	r0, r0, #0
   15e34:	str	r0, [r1, #4]
   15e38:	cmp	r6, #0
   15e3c:	beq	15e58 <read_body@@Base+0x1bc>
   15e40:	ldrd	r0, [r4, #120]	; 0x78
   15e44:	adds	r0, r0, #1
   15e48:	adc	r1, r1, #0
   15e4c:	strd	r0, [r4, #120]	; 0x78
   15e50:	str	r5, [r8, #4]
   15e54:	b	15e6c <read_body@@Base+0x1d0>
   15e58:	ldrd	r0, [r4, #128]	; 0x80
   15e5c:	adds	r0, r0, #1
   15e60:	adc	r1, r1, #0
   15e64:	strd	r0, [r4, #128]	; 0x80
   15e68:	mov	r6, r5
   15e6c:	ldrd	r0, [r4, #136]	; 0x88
   15e70:	adds	r0, r0, #1
   15e74:	adc	r1, r1, #0
   15e78:	strd	r0, [r4, #136]	; 0x88
   15e7c:	ldr	r0, [sl]
   15e80:	bl	1211c <next@@Base>
   15e84:	mov	r7, r0
   15e88:	ldr	r0, [r0]
   15e8c:	cmp	r0, #6
   15e90:	mov	r1, #48	; 0x30
   15e94:	movwne	r1, #40	; 0x28
   15e98:	mov	r2, r4
   15e9c:	ldr	r1, [r2, r1]!
   15ea0:	adds	r1, r1, #1
   15ea4:	str	r1, [r2]
   15ea8:	ldr	r1, [r2, #4]
   15eac:	adc	r1, r1, #0
   15eb0:	str	r1, [r2, #4]
   15eb4:	cmp	r0, #6
   15eb8:	mov	r8, r5
   15ebc:	bne	15d90 <read_body@@Base+0xf4>
   15ec0:	ldrd	r0, [r4, #144]	; 0x90
   15ec4:	adds	r0, r0, #1
   15ec8:	adc	r1, r1, #0
   15ecc:	strd	r0, [r4, #144]	; 0x90
   15ed0:	mov	r0, r7
   15ed4:	bl	14948 <free_token_cbra@@Base>
   15ed8:	b	15f0c <read_body@@Base+0x270>
   15edc:	movw	r0, #49364	; 0xc0d4
   15ee0:	movt	r0, #2
   15ee4:	movw	r1, #44848	; 0xaf30
   15ee8:	movt	r1, #1
   15eec:	bl	16858 <read_boolean_unary_expression@@Base+0x150>
   15ef0:	ldrd	r0, [r4, #96]	; 0x60
   15ef4:	adds	r0, r0, #1
   15ef8:	adc	r1, r1, #0
   15efc:	strd	r0, [r4, #96]	; 0x60
   15f00:	ldr	r0, [sl]
   15f04:	mov	r1, r7
   15f08:	bl	12398 <push_back@@Base>
   15f0c:	ldrd	r0, [r4, #152]	; 0x98
   15f10:	adds	r0, r0, #1
   15f14:	adc	r1, r1, #0
   15f18:	strd	r0, [r4, #152]	; 0x98
   15f1c:	mov	r0, r6
   15f20:	sub	sp, fp, #28
   15f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015f28 <read_return_expression@@Base>:
   15f28:	push	{r4, r5, r6, r7, fp, lr}
   15f2c:	add	fp, sp, #16
   15f30:	mov	r4, r0
   15f34:	movw	r7, #52128	; 0xcba0
   15f38:	movt	r7, #2
   15f3c:	ldrd	r0, [r7]
   15f40:	adds	r0, r0, #1
   15f44:	adc	r1, r1, #0
   15f48:	strd	r0, [r7]
   15f4c:	ldr	r0, [r4]
   15f50:	bl	1211c <next@@Base>
   15f54:	mov	r5, r0
   15f58:	ldr	r0, [r0]
   15f5c:	mov	r1, #16
   15f60:	cmp	r0, #1
   15f64:	movwne	r1, #8
   15f68:	mov	r2, r7
   15f6c:	ldr	r1, [r2, r1]!
   15f70:	adds	r1, r1, #1
   15f74:	str	r1, [r2]
   15f78:	ldr	r1, [r2, #4]
   15f7c:	adc	r1, r1, #0
   15f80:	str	r1, [r2, #4]
   15f84:	cmp	r0, #1
   15f88:	beq	15fa4 <read_return_expression@@Base+0x7c>
   15f8c:	ldrd	r0, [r7, #24]
   15f90:	adds	r0, r0, #1
   15f94:	adc	r1, r1, #0
   15f98:	strd	r0, [r7, #24]
   15f9c:	mov	r5, #0
   15fa0:	b	1603c <read_return_expression@@Base+0x114>
   15fa4:	mov	r0, #12
   15fa8:	bl	11f00 <malloc@plt>
   15fac:	mov	r6, r0
   15fb0:	ldr	r1, [r5, #4]
   15fb4:	bl	14da4 <init_node_int@@Base>
   15fb8:	mov	r0, r5
   15fbc:	bl	14858 <free_token_int_value@@Base>
   15fc0:	mov	r0, #12
   15fc4:	bl	11f00 <malloc@plt>
   15fc8:	mov	r5, r0
   15fcc:	mov	r1, r6
   15fd0:	bl	14e34 <init_node_return@@Base>
   15fd4:	ldr	r0, [r4]
   15fd8:	bl	1211c <next@@Base>
   15fdc:	ldr	r1, [r0]
   15fe0:	mov	r2, #40	; 0x28
   15fe4:	cmp	r1, #8
   15fe8:	movwne	r2, #32
   15fec:	mov	r3, r7
   15ff0:	ldr	r2, [r3, r2]!
   15ff4:	adds	r2, r2, #1
   15ff8:	str	r2, [r3]
   15ffc:	ldr	r2, [r3, #4]
   16000:	adc	r2, r2, #0
   16004:	str	r2, [r3, #4]
   16008:	cmp	r1, #8
   1600c:	beq	16028 <read_return_expression@@Base+0x100>
   16010:	ldrd	r0, [r7, #48]	; 0x30
   16014:	adds	r0, r0, #1
   16018:	adc	r1, r1, #0
   1601c:	strd	r0, [r7, #48]	; 0x30
   16020:	mov	r5, #0
   16024:	b	1603c <read_return_expression@@Base+0x114>
   16028:	ldrd	r2, [r7, #56]	; 0x38
   1602c:	adds	r2, r2, #1
   16030:	adc	r3, r3, #0
   16034:	strd	r2, [r7, #56]	; 0x38
   16038:	bl	149a8 <free_token_semicolon@@Base>
   1603c:	ldrd	r0, [r7, #64]	; 0x40
   16040:	adds	r0, r0, #1
   16044:	adc	r1, r1, #0
   16048:	strd	r0, [r7, #64]	; 0x40
   1604c:	mov	r0, r5
   16050:	pop	{r4, r5, r6, r7, fp, pc}

00016054 <read_if_statement@@Base>:
   16054:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16058:	add	fp, sp, #24
   1605c:	mov	r4, r0
   16060:	movw	r5, #52208	; 0xcbf0
   16064:	movt	r5, #2
   16068:	ldrd	r0, [r5]
   1606c:	adds	r0, r0, #1
   16070:	adc	r1, r1, #0
   16074:	strd	r0, [r5]
   16078:	ldr	r0, [r4]
   1607c:	bl	1211c <next@@Base>
   16080:	ldr	r1, [r0]
   16084:	mov	r2, #16
   16088:	cmp	r1, #3
   1608c:	movwne	r2, #8
   16090:	mov	r3, r5
   16094:	ldr	r2, [r3, r2]!
   16098:	adds	r2, r2, #1
   1609c:	str	r2, [r3]
   160a0:	ldr	r2, [r3, #4]
   160a4:	adc	r2, r2, #0
   160a8:	str	r2, [r3, #4]
   160ac:	cmp	r1, #3
   160b0:	beq	160cc <read_if_statement@@Base+0x78>
   160b4:	ldrd	r0, [r5, #24]
   160b8:	adds	r0, r0, #1
   160bc:	adc	r1, r1, #0
   160c0:	strd	r0, [r5, #24]
   160c4:	mov	r7, #0
   160c8:	b	161a8 <read_if_statement@@Base+0x154>
   160cc:	bl	148b8 <free_token_opar@@Base>
   160d0:	mov	r0, r4
   160d4:	bl	161c0 <read_boolean_expression@@Base>
   160d8:	mov	r8, r0
   160dc:	mov	r0, r4
   160e0:	bl	15c9c <read_body@@Base>
   160e4:	mov	r6, r0
   160e8:	ldr	r0, [r4]
   160ec:	bl	1211c <next@@Base>
   160f0:	mov	r1, r0
   160f4:	ldr	r0, [r0]
   160f8:	mov	r2, #40	; 0x28
   160fc:	cmp	r0, #11
   16100:	movweq	r2, #32
   16104:	mov	r3, r5
   16108:	ldr	r2, [r3, r2]!
   1610c:	adds	r2, r2, #1
   16110:	str	r2, [r3]
   16114:	ldr	r2, [r3, #4]
   16118:	adc	r2, r2, #0
   1611c:	str	r2, [r3, #4]
   16120:	cmp	r0, #11
   16124:	bne	16158 <read_if_statement@@Base+0x104>
   16128:	ldr	r0, [r5, #48]	; 0x30
   1612c:	ldr	r3, [r5, #52]	; 0x34
   16130:	adds	r0, r0, #1
   16134:	adc	r3, r3, #0
   16138:	str	r0, [r5, #48]	; 0x30
   1613c:	str	r3, [r5, #52]	; 0x34
   16140:	mov	r0, r1
   16144:	bl	14a38 <free_token_else@@Base>
   16148:	mov	r0, r4
   1614c:	bl	15c9c <read_body@@Base>
   16150:	mov	r4, r0
   16154:	b	1617c <read_if_statement@@Base+0x128>
   16158:	ldr	r0, [r5, #56]	; 0x38
   1615c:	ldr	r3, [r5, #60]	; 0x3c
   16160:	adds	r0, r0, #1
   16164:	adc	r3, r3, #0
   16168:	str	r0, [r5, #56]	; 0x38
   1616c:	str	r3, [r5, #60]	; 0x3c
   16170:	ldr	r0, [r4]
   16174:	bl	12398 <push_back@@Base>
   16178:	mov	r4, #0
   1617c:	ldrd	r0, [r5, #64]	; 0x40
   16180:	adds	r0, r0, #1
   16184:	adc	r1, r1, #0
   16188:	strd	r0, [r5, #64]	; 0x40
   1618c:	mov	r0, #20
   16190:	bl	11f00 <malloc@plt>
   16194:	mov	r7, r0
   16198:	mov	r1, r8
   1619c:	mov	r2, r6
   161a0:	mov	r3, r4
   161a4:	bl	14e78 <init_node_if@@Base>
   161a8:	ldrd	r0, [r5, #72]	; 0x48
   161ac:	adds	r0, r0, #1
   161b0:	adc	r1, r1, #0
   161b4:	strd	r0, [r5, #72]	; 0x48
   161b8:	mov	r0, r7
   161bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

000161c0 <read_boolean_expression@@Base>:
   161c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161c4:	add	fp, sp, #28
   161c8:	sub	sp, sp, #12
   161cc:	mov	r4, r0
   161d0:	movw	r8, #52288	; 0xcc40
   161d4:	movt	r8, #2
   161d8:	ldm	r8, {r0, r1, r2, r3}
   161dc:	adds	r0, r0, #1
   161e0:	adc	r1, r1, #0
   161e4:	adds	r2, r2, #1
   161e8:	adc	r3, r3, #0
   161ec:	stm	r8, {r0, r1, r2, r3}
   161f0:	mov	r5, #0
   161f4:	str	r5, [sp, #8]
   161f8:	ldr	r0, [r4]
   161fc:	bl	1211c <next@@Base>
   16200:	mov	r6, r0
   16204:	ldr	r0, [r0]
   16208:	mov	r1, #24
   1620c:	cmp	r0, #4
   16210:	movwne	r1, #16
   16214:	mov	r2, r8
   16218:	ldr	r1, [r2, r1]!
   1621c:	adds	r1, r1, #1
   16220:	str	r1, [r2]
   16224:	ldr	r1, [r2, #4]
   16228:	adc	r1, r1, #0
   1622c:	str	r1, [r2, #4]
   16230:	cmp	r0, #4
   16234:	beq	16368 <read_boolean_expression@@Base+0x1a8>
   16238:	mov	r9, #0
   1623c:	movw	sl, #49368	; 0xc0d8
   16240:	movt	sl, #2
   16244:	movw	r1, #44860	; 0xaf3c
   16248:	movt	r1, #1
   1624c:	add	r1, r1, #8
   16250:	str	r1, [sp, #4]
   16254:	mov	r5, #0
   16258:	str	r9, [sl]
   1625c:	cmp	r0, #12
   16260:	beq	162e8 <read_boolean_expression@@Base+0x128>
   16264:	cmp	r0, #3
   16268:	beq	162a8 <read_boolean_expression@@Base+0xe8>
   1626c:	cmp	r0, #1
   16270:	bne	1638c <read_boolean_expression@@Base+0x1cc>
   16274:	movw	r0, #44860	; 0xaf3c
   16278:	movt	r0, #1
   1627c:	add	r1, r0, #4
   16280:	mov	r0, sl
   16284:	bl	16858 <read_boolean_unary_expression@@Base+0x150>
   16288:	ldrd	r0, [r8, #64]	; 0x40
   1628c:	adds	r0, r0, #1
   16290:	adc	r1, r1, #0
   16294:	strd	r0, [r8, #64]	; 0x40
   16298:	ldr	r0, [r4]
   1629c:	mov	r1, r6
   162a0:	bl	12398 <push_back@@Base>
   162a4:	b	162cc <read_boolean_expression@@Base+0x10c>
   162a8:	movw	r0, #44860	; 0xaf3c
   162ac:	movt	r0, #1
   162b0:	add	r1, r0, #12
   162b4:	mov	r0, sl
   162b8:	bl	16858 <read_boolean_unary_expression@@Base+0x150>
   162bc:	ldrd	r0, [r8, #80]	; 0x50
   162c0:	adds	r0, r0, #1
   162c4:	adc	r1, r1, #0
   162c8:	strd	r0, [r8, #80]	; 0x50
   162cc:	mov	r0, r4
   162d0:	mov	r1, r5
   162d4:	add	r2, sp, #8
   162d8:	mov	r3, r7
   162dc:	bl	163c8 <read_single_boolean_expression@@Base>
   162e0:	mov	r5, r0
   162e4:	b	16318 <read_boolean_expression@@Base+0x158>
   162e8:	mov	r0, sl
   162ec:	ldr	r1, [sp, #4]
   162f0:	bl	16858 <read_boolean_unary_expression@@Base+0x150>
   162f4:	ldrd	r0, [r8, #72]	; 0x48
   162f8:	adds	r0, r0, #1
   162fc:	adc	r1, r1, #0
   16300:	strd	r0, [r8, #72]	; 0x48
   16304:	mov	r0, r6
   16308:	bl	1546c <get_boolean_op_value@@Base>
   1630c:	mov	r7, r0
   16310:	mov	r0, #1
   16314:	str	r0, [sp, #8]
   16318:	ldrd	r0, [r8, #88]	; 0x58
   1631c:	adds	r0, r0, #1
   16320:	adc	r1, r1, #0
   16324:	strd	r0, [r8, #88]	; 0x58
   16328:	ldr	r0, [r4]
   1632c:	bl	1211c <next@@Base>
   16330:	mov	r6, r0
   16334:	ldr	r0, [r0]
   16338:	cmp	r0, #4
   1633c:	mov	r1, #24
   16340:	movwne	r1, #16
   16344:	mov	r2, r8
   16348:	ldr	r1, [r2, r1]!
   1634c:	adds	r1, r1, #1
   16350:	str	r1, [r2]
   16354:	ldr	r1, [r2, #4]
   16358:	adc	r1, r1, #0
   1635c:	str	r1, [r2, #4]
   16360:	cmp	r0, #4
   16364:	bne	16258 <read_boolean_expression@@Base+0x98>
   16368:	ldrd	r0, [r8, #96]	; 0x60
   1636c:	adds	r0, r0, #1
   16370:	adc	r1, r1, #0
   16374:	strd	r0, [r8, #96]	; 0x60
   16378:	mov	r0, r6
   1637c:	bl	148e8 <free_token_cpar@@Base>
   16380:	mov	r0, r5
   16384:	sub	sp, fp, #28
   16388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1638c:	movw	r0, #49368	; 0xc0d8
   16390:	movt	r0, #2
   16394:	movw	r1, #44860	; 0xaf3c
   16398:	movt	r1, #1
   1639c:	bl	16858 <read_boolean_unary_expression@@Base+0x150>
   163a0:	movw	r0, #49392	; 0xc0f0
   163a4:	movt	r0, #2
   163a8:	ldr	r3, [r0]
   163ac:	movw	r0, #44709	; 0xaea5
   163b0:	movt	r0, #1
   163b4:	mov	r1, #33	; 0x21
   163b8:	mov	r2, #1
   163bc:	bl	11ed0 <fwrite@plt>
   163c0:	mov	r0, #1
   163c4:	bl	11f3c <exit@plt>

000163c8 <read_single_boolean_expression@@Base>:
   163c8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   163cc:	add	fp, sp, #24
   163d0:	mov	r8, r3
   163d4:	mov	r4, r2
   163d8:	movw	r5, #52400	; 0xccb0
   163dc:	movt	r5, #2
   163e0:	ldrd	r2, [r5]
   163e4:	adds	r2, r2, #1
   163e8:	adc	r3, r3, #0
   163ec:	strd	r2, [r5]
   163f0:	mov	r2, #16
   163f4:	cmp	r1, #0
   163f8:	movweq	r2, #8
   163fc:	mov	r3, r5
   16400:	ldr	r2, [r3, r2]!
   16404:	adds	r2, r2, #1
   16408:	str	r2, [r3]
   1640c:	ldr	r2, [r3, #4]
   16410:	adc	r2, r2, #0
   16414:	str	r2, [r3, #4]
   16418:	cmp	r1, #0
   1641c:	beq	16494 <read_single_boolean_expression@@Base+0xcc>
   16420:	ldr	r1, [r4]
   16424:	mov	r2, #40	; 0x28
   16428:	cmp	r1, #0
   1642c:	movwne	r2, #32
   16430:	mov	r3, r5
   16434:	ldr	r2, [r3, r2]!
   16438:	adds	r2, r2, #1
   1643c:	str	r2, [r3]
   16440:	ldr	r2, [r3, #4]
   16444:	adc	r2, r2, #0
   16448:	str	r2, [r3, #4]
   1644c:	cmp	r1, #0
   16450:	beq	164c4 <read_single_boolean_expression@@Base+0xfc>
   16454:	ldrd	r2, [r5, #48]	; 0x30
   16458:	adds	r2, r2, #1
   1645c:	adc	r3, r3, #0
   16460:	strd	r2, [r5, #48]	; 0x30
   16464:	bl	164ec <read_boolean_binary_expression@@Base>
   16468:	mov	r7, r0
   1646c:	mov	r0, #20
   16470:	bl	11f00 <malloc@plt>
   16474:	mov	r6, r0
   16478:	mov	r9, #0
   1647c:	mov	r1, r8
   16480:	mov	r2, #0
   16484:	mov	r3, r7
   16488:	bl	14ecc <init_node_boolean_operator@@Base>
   1648c:	str	r9, [r4]
   16490:	b	164ac <read_single_boolean_expression@@Base+0xe4>
   16494:	ldrd	r2, [r5, #24]
   16498:	adds	r2, r2, #1
   1649c:	adc	r3, r3, #0
   164a0:	strd	r2, [r5, #24]
   164a4:	bl	164ec <read_boolean_binary_expression@@Base>
   164a8:	mov	r6, r0
   164ac:	ldrd	r0, [r5, #56]	; 0x38
   164b0:	adds	r0, r0, #1
   164b4:	adc	r1, r1, #0
   164b8:	strd	r0, [r5, #56]	; 0x38
   164bc:	mov	r0, r6
   164c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   164c4:	mov	r0, #4
   164c8:	ldr	r2, [r0]
   164cc:	movw	r0, #49392	; 0xc0f0
   164d0:	movt	r0, #2
   164d4:	ldr	r0, [r0]
   164d8:	movw	r1, #44743	; 0xaec7
   164dc:	movt	r1, #1
   164e0:	bl	11f60 <fprintf@plt>
   164e4:	mov	r0, #1
   164e8:	bl	11f3c <exit@plt>

000164ec <read_boolean_binary_expression@@Base>:
   164ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   164f0:	add	fp, sp, #24
   164f4:	mov	r5, r0
   164f8:	movw	r4, #52464	; 0xccf0
   164fc:	movt	r4, #2
   16500:	ldrd	r0, [r4]
   16504:	adds	r0, r0, #1
   16508:	adc	r1, r1, #0
   1650c:	strd	r0, [r4]
   16510:	ldr	r0, [r5]
   16514:	bl	1211c <next@@Base>
   16518:	mov	r6, r0
   1651c:	ldr	r0, [r0]
   16520:	mov	r1, #16
   16524:	cmp	r0, #1
   16528:	movwne	r1, #8
   1652c:	mov	r2, r4
   16530:	ldr	r1, [r2, r1]!
   16534:	adds	r1, r1, #1
   16538:	str	r1, [r2]
   1653c:	ldr	r1, [r2, #4]
   16540:	adc	r1, r1, #0
   16544:	str	r1, [r2, #4]
   16548:	cmp	r0, #1
   1654c:	beq	165ac <read_boolean_binary_expression@@Base+0xc0>
   16550:	mov	r1, #32
   16554:	cmp	r0, #12
   16558:	movweq	r1, #24
   1655c:	mov	r2, r4
   16560:	ldr	r1, [r2, r1]!
   16564:	adds	r1, r1, #1
   16568:	str	r1, [r2]
   1656c:	ldr	r1, [r2, #4]
   16570:	adc	r1, r1, #0
   16574:	str	r1, [r2, #4]
   16578:	cmp	r0, #12
   1657c:	bne	1661c <read_boolean_binary_expression@@Base+0x130>
   16580:	ldrd	r0, [r4, #40]	; 0x28
   16584:	adds	r0, r0, #1
   16588:	adc	r1, r1, #0
   1658c:	strd	r0, [r4, #40]	; 0x28
   16590:	ldr	r0, [r5]
   16594:	mov	r1, r6
   16598:	bl	12398 <push_back@@Base>
   1659c:	mov	r0, r5
   165a0:	bl	16708 <read_boolean_unary_expression@@Base>
   165a4:	mov	r5, r0
   165a8:	b	166f0 <read_boolean_binary_expression@@Base+0x204>
   165ac:	mov	r0, #12
   165b0:	bl	11f00 <malloc@plt>
   165b4:	mov	r8, r0
   165b8:	ldr	r1, [r6, #4]
   165bc:	bl	14da4 <init_node_int@@Base>
   165c0:	mov	r0, r6
   165c4:	bl	14858 <free_token_int_value@@Base>
   165c8:	ldr	r0, [r5]
   165cc:	bl	1211c <next@@Base>
   165d0:	mov	r7, r0
   165d4:	ldr	r0, [r0]
   165d8:	mov	r1, #64	; 0x40
   165dc:	cmp	r0, #12
   165e0:	movwne	r1, #56	; 0x38
   165e4:	mov	r2, r4
   165e8:	ldr	r1, [r2, r1]!
   165ec:	adds	r1, r1, #1
   165f0:	str	r1, [r2]
   165f4:	ldr	r1, [r2, #4]
   165f8:	adc	r1, r1, #0
   165fc:	str	r1, [r2, #4]
   16600:	cmp	r0, #12
   16604:	beq	16634 <read_boolean_binary_expression@@Base+0x148>
   16608:	ldrd	r0, [r4, #72]	; 0x48
   1660c:	adds	r0, r0, #1
   16610:	adc	r1, r1, #0
   16614:	strd	r0, [r4, #72]	; 0x48
   16618:	b	16698 <read_boolean_binary_expression@@Base+0x1ac>
   1661c:	ldrd	r0, [r4, #48]	; 0x30
   16620:	adds	r0, r0, #1
   16624:	adc	r1, r1, #0
   16628:	strd	r0, [r4, #48]	; 0x30
   1662c:	mov	r5, #0
   16630:	b	166f0 <read_boolean_binary_expression@@Base+0x204>
   16634:	mov	r0, r7
   16638:	bl	1546c <get_boolean_op_value@@Base>
   1663c:	mov	r6, r0
   16640:	mov	r0, r7
   16644:	bl	14a68 <free_token_boolean_op@@Base>
   16648:	ldr	r0, [r5]
   1664c:	bl	1211c <next@@Base>
   16650:	mov	r5, r0
   16654:	ldr	r0, [r0]
   16658:	mov	r1, #88	; 0x58
   1665c:	cmp	r0, #1
   16660:	movwne	r1, #80	; 0x50
   16664:	mov	r2, r4
   16668:	ldr	r1, [r2, r1]!
   1666c:	adds	r1, r1, #1
   16670:	str	r1, [r2]
   16674:	ldr	r1, [r2, #4]
   16678:	adc	r1, r1, #0
   1667c:	str	r1, [r2, #4]
   16680:	cmp	r0, #1
   16684:	beq	166a8 <read_boolean_binary_expression@@Base+0x1bc>
   16688:	ldrd	r0, [r4, #96]	; 0x60
   1668c:	adds	r0, r0, #1
   16690:	adc	r1, r1, #0
   16694:	strd	r0, [r4, #96]	; 0x60
   16698:	mov	r0, r8
   1669c:	bl	14f28 <free_node@@Base>
   166a0:	mov	r5, #0
   166a4:	b	166f0 <read_boolean_binary_expression@@Base+0x204>
   166a8:	ldrd	r0, [r4, #104]	; 0x68
   166ac:	adds	r0, r0, #1
   166b0:	adc	r1, r1, #0
   166b4:	strd	r0, [r4, #104]	; 0x68
   166b8:	mov	r0, #12
   166bc:	bl	11f00 <malloc@plt>
   166c0:	mov	r7, r0
   166c4:	ldr	r1, [r5, #4]
   166c8:	bl	14da4 <init_node_int@@Base>
   166cc:	mov	r0, r5
   166d0:	bl	14858 <free_token_int_value@@Base>
   166d4:	mov	r0, #20
   166d8:	bl	11f00 <malloc@plt>
   166dc:	mov	r5, r0
   166e0:	mov	r1, r6
   166e4:	mov	r2, r8
   166e8:	mov	r3, r7
   166ec:	bl	14ecc <init_node_boolean_operator@@Base>
   166f0:	ldrd	r0, [r4, #112]	; 0x70
   166f4:	adds	r0, r0, #1
   166f8:	adc	r1, r1, #0
   166fc:	strd	r0, [r4, #112]	; 0x70
   16700:	mov	r0, r5
   16704:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00016708 <read_boolean_unary_expression@@Base>:
   16708:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1670c:	add	fp, sp, #24
   16710:	mov	r6, r0
   16714:	movw	r5, #52592	; 0xcd70
   16718:	movt	r5, #2
   1671c:	ldrd	r0, [r5]
   16720:	adds	r0, r0, #1
   16724:	adc	r1, r1, #0
   16728:	strd	r0, [r5]
   1672c:	mov	r0, #20
   16730:	bl	11f00 <malloc@plt>
   16734:	mov	r4, r0
   16738:	ldr	r0, [r6]
   1673c:	bl	1211c <next@@Base>
   16740:	mov	r7, r0
   16744:	ldr	r0, [r0]
   16748:	mov	r1, #16
   1674c:	cmp	r0, #12
   16750:	movwne	r1, #8
   16754:	mov	r2, r5
   16758:	ldr	r1, [r2, r1]!
   1675c:	adds	r1, r1, #1
   16760:	str	r1, [r2]
   16764:	ldr	r1, [r2, #4]
   16768:	adc	r1, r1, #0
   1676c:	str	r1, [r2, #4]
   16770:	cmp	r0, #12
   16774:	beq	1678c <read_boolean_unary_expression@@Base+0x84>
   16778:	ldrd	r0, [r5, #24]
   1677c:	adds	r0, r0, #1
   16780:	adc	r1, r1, #0
   16784:	strd	r0, [r5, #24]
   16788:	b	167f0 <read_boolean_unary_expression@@Base+0xe8>
   1678c:	mov	r0, r7
   16790:	bl	1546c <get_boolean_op_value@@Base>
   16794:	mov	r8, r0
   16798:	mov	r0, r7
   1679c:	bl	14a68 <free_token_boolean_op@@Base>
   167a0:	ldr	r0, [r6]
   167a4:	bl	1211c <next@@Base>
   167a8:	mov	r6, r0
   167ac:	ldr	r0, [r0]
   167b0:	mov	r1, #40	; 0x28
   167b4:	cmp	r0, #1
   167b8:	movwne	r1, #32
   167bc:	mov	r2, r5
   167c0:	ldr	r1, [r2, r1]!
   167c4:	adds	r1, r1, #1
   167c8:	str	r1, [r2]
   167cc:	ldr	r1, [r2, #4]
   167d0:	adc	r1, r1, #0
   167d4:	str	r1, [r2, #4]
   167d8:	cmp	r0, #1
   167dc:	beq	16800 <read_boolean_unary_expression@@Base+0xf8>
   167e0:	ldrd	r0, [r5, #48]	; 0x30
   167e4:	adds	r0, r0, #1
   167e8:	adc	r1, r1, #0
   167ec:	strd	r0, [r5, #48]	; 0x30
   167f0:	mov	r0, r4
   167f4:	bl	153d4 <free_node_boolean_operator@@Base>
   167f8:	mov	r4, #0
   167fc:	b	16840 <read_boolean_unary_expression@@Base+0x138>
   16800:	ldrd	r0, [r5, #56]	; 0x38
   16804:	adds	r0, r0, #1
   16808:	adc	r1, r1, #0
   1680c:	strd	r0, [r5, #56]	; 0x38
   16810:	mov	r0, #12
   16814:	bl	11f00 <malloc@plt>
   16818:	mov	r7, r0
   1681c:	ldr	r1, [r6, #4]
   16820:	bl	14da4 <init_node_int@@Base>
   16824:	mov	r0, r6
   16828:	bl	14858 <free_token_int_value@@Base>
   1682c:	mov	r0, r4
   16830:	mov	r1, r8
   16834:	mov	r2, r7
   16838:	mov	r3, #0
   1683c:	bl	14ecc <init_node_boolean_operator@@Base>
   16840:	ldrd	r0, [r5, #64]	; 0x40
   16844:	adds	r0, r0, #1
   16848:	adc	r1, r1, #0
   1684c:	strd	r0, [r5, #64]	; 0x40
   16850:	mov	r0, r4
   16854:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16858:	ldr	r0, [r0]
   1685c:	cmn	r0, #1
   16860:	ldrne	r0, [r1, r0, lsl #2]
   16864:	cmpne	r0, #0
   16868:	bne	16870 <read_boolean_unary_expression@@Base+0x168>
   1686c:	bx	lr
   16870:	ldrd	r2, [r0]
   16874:	adds	r2, r2, #1
   16878:	adc	r3, r3, #0
   1687c:	strd	r2, [r0]
   16880:	bx	lr
   16884:	push	{r4, r5, r6, lr}
   16888:	sub	sp, sp, #8
   1688c:	movw	r0, #45200	; 0xb090
   16890:	movt	r0, #1
   16894:	movw	r1, #41044	; 0xa054
   16898:	movt	r1, #1
   1689c:	movw	r2, #27576	; 0x6bb8
   168a0:	movt	r2, #51930	; 0xcada
   168a4:	bl	16ae4 <read_boolean_unary_expression@@Base+0x3dc>
   168a8:	movw	r0, #45104	; 0xb030
   168ac:	movt	r0, #1
   168b0:	add	r4, r0, #4
   168b4:	mov	r5, #0
   168b8:	movw	r6, #44880	; 0xaf50
   168bc:	movt	r6, #1
   168c0:	mov	r3, r6
   168c4:	ldr	r0, [r3, r5]!
   168c8:	ldr	r1, [r3, #16]
   168cc:	str	r1, [sp]
   168d0:	ldmib	r3, {r1, r2}
   168d4:	ldrb	r3, [r3, #12]
   168d8:	bl	17248 <read_boolean_unary_expression@@Base+0xb40>
   168dc:	ldrd	r0, [r4, #-4]
   168e0:	bl	17afc <read_boolean_unary_expression@@Base+0x13f4>
   168e4:	add	r5, r5, #20
   168e8:	add	r4, r4, #8
   168ec:	cmp	r5, #220	; 0xdc
   168f0:	bne	168c0 <read_boolean_unary_expression@@Base+0x1b8>
   168f4:	bl	18278 <read_boolean_unary_expression@@Base+0x1b70>
   168f8:	add	sp, sp, #8
   168fc:	pop	{r4, r5, r6, lr}
   16900:	b	18fe4 <read_boolean_unary_expression@@Base+0x28dc>
   16904:	push	{r4, r5, fp, lr}
   16908:	vpush	{d8-d9}
   1690c:	bl	16884 <read_boolean_unary_expression@@Base+0x17c>
   16910:	vmov.i32	q4, #0	; 0x00000000
   16914:	movw	r0, #51808	; 0xca60
   16918:	movt	r0, #2
   1691c:	vst1.64	{d8-d9}, [r0]
   16920:	movw	r0, #51792	; 0xca50
   16924:	movt	r0, #2
   16928:	vst1.64	{d8-d9}, [r0]
   1692c:	movw	r0, #51824	; 0xca70
   16930:	movt	r0, #2
   16934:	vst1.64	{d8-d9}, [r0]
   16938:	movw	r0, #51840	; 0xca80
   1693c:	movt	r0, #2
   16940:	add	r1, r0, #96	; 0x60
   16944:	vst1.64	{d8-d9}, [r1 :128]
   16948:	add	r1, r0, #80	; 0x50
   1694c:	vst1.64	{d8-d9}, [r1 :128]
   16950:	add	r1, r0, #64	; 0x40
   16954:	vst1.64	{d8-d9}, [r1 :128]
   16958:	add	r1, r0, #48	; 0x30
   1695c:	vst1.64	{d8-d9}, [r1 :128]
   16960:	add	r1, r0, #32
   16964:	vst1.64	{d8-d9}, [r1 :128]
   16968:	add	r1, r0, #16
   1696c:	vst1.64	{d8-d9}, [r1 :128]
   16970:	mov	r4, #0
   16974:	str	r4, [r0, #112]	; 0x70
   16978:	mov	r5, #116	; 0x74
   1697c:	vst1.64	{d8-d9}, [r0 :128], r5
   16980:	str	r4, [r0]
   16984:	movw	r0, #51968	; 0xcb00
   16988:	movt	r0, #2
   1698c:	mov	r1, #0
   16990:	mov	r2, #160	; 0xa0
   16994:	bl	11f90 <memset@plt>
   16998:	movw	r1, #52288	; 0xcc40
   1699c:	movt	r1, #2
   169a0:	add	r0, r1, #80	; 0x50
   169a4:	vst1.64	{d8-d9}, [r0 :128]
   169a8:	add	r0, r1, #64	; 0x40
   169ac:	vst1.64	{d8-d9}, [r0 :128]
   169b0:	add	r0, r1, #48	; 0x30
   169b4:	vst1.64	{d8-d9}, [r0 :128]
   169b8:	add	r0, r1, #32
   169bc:	vst1.64	{d8-d9}, [r0 :128]
   169c0:	add	r0, r1, #16
   169c4:	vst1.64	{d8-d9}, [r0 :128]
   169c8:	movw	r0, #52208	; 0xcbf0
   169cc:	movt	r0, #2
   169d0:	add	r2, r0, #48	; 0x30
   169d4:	vst1.64	{d8-d9}, [r2 :128]
   169d8:	add	r2, r0, #32
   169dc:	vst1.64	{d8-d9}, [r2 :128]
   169e0:	add	r2, r0, #16
   169e4:	vst1.64	{d8-d9}, [r2 :128]
   169e8:	movw	r2, #52128	; 0xcba0
   169ec:	movt	r2, #2
   169f0:	str	r4, [r2, #64]	; 0x40
   169f4:	add	r3, r2, #48	; 0x30
   169f8:	vst1.64	{d8-d9}, [r3 :128]
   169fc:	add	r3, r2, #32
   16a00:	vst1.64	{d8-d9}, [r3 :128]
   16a04:	add	r3, r2, #16
   16a08:	vst1.64	{d8-d9}, [r3 :128]
   16a0c:	str	r4, [r1, #96]	; 0x60
   16a10:	mov	r3, #64	; 0x40
   16a14:	vst1.64	{d8-d9}, [r0 :128], r3
   16a18:	vst1.64	{d8-d9}, [r0 :128]
   16a1c:	mov	r0, #68	; 0x44
   16a20:	vst1.64	{d8-d9}, [r2 :128], r0
   16a24:	str	r4, [r2]
   16a28:	mov	r2, #100	; 0x64
   16a2c:	vst1.64	{d8-d9}, [r1 :128], r2
   16a30:	str	r4, [r1]
   16a34:	movw	r1, #52400	; 0xccb0
   16a38:	movt	r1, #2
   16a3c:	add	r2, r1, #32
   16a40:	vst1.64	{d8-d9}, [r2 :128]
   16a44:	add	r2, r1, #16
   16a48:	vst1.64	{d8-d9}, [r2 :128]
   16a4c:	mov	r2, #48	; 0x30
   16a50:	vst1.64	{d8-d9}, [r1 :128], r2
   16a54:	vst1.64	{d8-d9}, [r1 :128]
   16a58:	movw	r1, #52464	; 0xccf0
   16a5c:	movt	r1, #2
   16a60:	str	r4, [r1, #112]	; 0x70
   16a64:	add	r2, r1, #96	; 0x60
   16a68:	vst1.64	{d8-d9}, [r2 :128]
   16a6c:	add	r2, r1, #80	; 0x50
   16a70:	vst1.64	{d8-d9}, [r2 :128]
   16a74:	add	r2, r1, #64	; 0x40
   16a78:	vst1.64	{d8-d9}, [r2 :128]
   16a7c:	add	r2, r1, #48	; 0x30
   16a80:	vst1.64	{d8-d9}, [r2 :128]
   16a84:	add	r2, r1, #32
   16a88:	vst1.64	{d8-d9}, [r2 :128]
   16a8c:	add	r2, r1, #16
   16a90:	vst1.64	{d8-d9}, [r2 :128]
   16a94:	vst1.64	{d8-d9}, [r1 :128], r5
   16a98:	str	r4, [r1]
   16a9c:	movw	r1, #52592	; 0xcd70
   16aa0:	movt	r1, #2
   16aa4:	str	r4, [r1, #64]	; 0x40
   16aa8:	add	r2, r1, #48	; 0x30
   16aac:	vst1.64	{d8-d9}, [r2 :128]
   16ab0:	add	r2, r1, #32
   16ab4:	vst1.64	{d8-d9}, [r2 :128]
   16ab8:	add	r2, r1, #16
   16abc:	vst1.64	{d8-d9}, [r2 :128]
   16ac0:	vst1.64	{d8-d9}, [r1 :128], r0
   16ac4:	str	r4, [r1]
   16ac8:	vpop	{d8-d9}
   16acc:	pop	{r4, r5, fp, pc}
   16ad0:	movw	r0, #26756	; 0x6884
   16ad4:	movt	r0, #1
   16ad8:	movw	r1, #26884	; 0x6904
   16adc:	movt	r1, #1
   16ae0:	b	19494 <__gcov_flush@@Base+0xb4>
   16ae4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ae8:	add	fp, sp, #28
   16aec:	sub	sp, sp, #36	; 0x24
   16af0:	mov	r9, r1
   16af4:	mov	r6, r0
   16af8:	add	r0, sp, #28
   16afc:	add	r1, sp, #32
   16b00:	mov	r8, r2
   16b04:	bl	19840 <__gcov_flush@@Base+0x460>
   16b08:	cmp	r0, #0
   16b0c:	beq	16b50 <read_boolean_unary_expression@@Base+0x448>
   16b10:	mov	r4, r0
   16b14:	mov	r0, r6
   16b18:	ldr	r5, [sp, #32]
   16b1c:	bl	11f48 <strlen@plt>
   16b20:	add	r0, r5, r0
   16b24:	add	r0, r0, #2
   16b28:	bl	11f00 <malloc@plt>
   16b2c:	mov	r7, r0
   16b30:	ldr	r0, [sp, #28]
   16b34:	mov	r1, r6
   16b38:	mov	r2, r4
   16b3c:	str	r0, [sp]
   16b40:	mov	r0, r7
   16b44:	mov	r3, r5
   16b48:	bl	198d4 <__gcov_flush@@Base+0x4f4>
   16b4c:	b	16b5c <read_boolean_unary_expression@@Base+0x454>
   16b50:	mov	r0, r6
   16b54:	bl	11eb8 <strdup@plt>
   16b58:	mov	r7, r0
   16b5c:	ldr	r0, [pc, #1548]	; 17170 <read_boolean_unary_expression@@Base+0xa68>
   16b60:	ldr	r6, [pc, #1548]	; 17174 <read_boolean_unary_expression@@Base+0xa6c>
   16b64:	mov	r1, #2
   16b68:	add	r0, pc, r0
   16b6c:	add	r6, pc, r6
   16b70:	str	r7, [r0]
   16b74:	mov	r0, r7
   16b78:	mov	r4, #0
   16b7c:	strb	r4, [r6]
   16b80:	bl	11edc <open64@plt>
   16b84:	ldr	r5, [pc, #1516]	; 17178 <read_boolean_unary_expression@@Base+0xa70>
   16b88:	cmn	r0, #1
   16b8c:	add	r5, pc, r5
   16b90:	str	r0, [r5]
   16b94:	beq	16ba4 <read_boolean_unary_expression@@Base+0x49c>
   16b98:	ldr	r6, [pc, #1500]	; 1717c <read_boolean_unary_expression@@Base+0xa74>
   16b9c:	add	r6, pc, r6
   16ba0:	b	16c00 <read_boolean_unary_expression@@Base+0x4f8>
   16ba4:	mov	r0, #1
   16ba8:	strb	r0, [r6]
   16bac:	ldr	r0, [pc, #1508]	; 17198 <read_boolean_unary_expression@@Base+0xa90>
   16bb0:	mov	r1, #66	; 0x42
   16bb4:	mov	r2, #420	; 0x1a4
   16bb8:	ldr	r0, [pc, r0]
   16bbc:	bl	11edc <open64@plt>
   16bc0:	ldr	r6, [pc, #1492]	; 1719c <read_boolean_unary_expression@@Base+0xa94>
   16bc4:	cmn	r0, #1
   16bc8:	str	r0, [r5]
   16bcc:	add	r6, pc, r6
   16bd0:	bne	16c00 <read_boolean_unary_expression@@Base+0x4f8>
   16bd4:	ldr	r0, [pc, #1476]	; 171a0 <read_boolean_unary_expression@@Base+0xa98>
   16bd8:	ldr	r0, [pc, r0]
   16bdc:	bl	195a8 <__gcov_flush@@Base+0x1c8>
   16be0:	ldr	r0, [pc, #1468]	; 171a4 <read_boolean_unary_expression@@Base+0xa9c>
   16be4:	mov	r1, #66	; 0x42
   16be8:	mov	r2, #420	; 0x1a4
   16bec:	ldr	r0, [pc, r0]
   16bf0:	bl	11edc <open64@plt>
   16bf4:	cmn	r0, #1
   16bf8:	str	r0, [r5]
   16bfc:	beq	17128 <read_boolean_unary_expression@@Base+0xa20>
   16c00:	str	r9, [sp, #20]
   16c04:	bl	19674 <__gcov_flush@@Base+0x294>
   16c08:	ldr	r0, [pc, #1392]	; 17180 <read_boolean_unary_expression@@Base+0xa78>
   16c0c:	mov	r1, r6
   16c10:	ldr	r0, [pc, r0]
   16c14:	bl	11e40 <fdopen@plt>
   16c18:	ldr	r5, [pc, #1380]	; 17184 <read_boolean_unary_expression@@Base+0xa7c>
   16c1c:	ldr	r9, [pc, #1380]	; 17188 <read_boolean_unary_expression@@Base+0xa80>
   16c20:	ldr	r1, [pc, #1380]	; 1718c <read_boolean_unary_expression@@Base+0xa84>
   16c24:	ldr	sl, [pc, #1380]	; 17190 <read_boolean_unary_expression@@Base+0xa88>
   16c28:	add	r5, pc, r5
   16c2c:	add	r9, pc, r9
   16c30:	add	r1, pc, r1
   16c34:	add	sl, pc, sl
   16c38:	str	r4, [r5]
   16c3c:	str	r4, [r5, #4]
   16c40:	str	r4, [r9]
   16c44:	str	r4, [r9, #4]
   16c48:	str	r0, [r1]
   16c4c:	str	r4, [sl]
   16c50:	ldr	r6, [pc, #1340]	; 17194 <read_boolean_unary_expression@@Base+0xa8c>
   16c54:	ldr	r2, [pc, #1292]	; 17168 <read_boolean_unary_expression@@Base+0xa60>
   16c58:	str	r8, [sp, #24]
   16c5c:	add	r6, pc, r6
   16c60:	ldrb	r1, [r6]
   16c64:	mov	r6, r2
   16c68:	cmp	r1, #1
   16c6c:	bne	16c94 <read_boolean_unary_expression@@Base+0x58c>
   16c70:	mov	r0, #131072	; 0x20000
   16c74:	mov	r4, #131072	; 0x20000
   16c78:	bl	11f00 <malloc@plt>
   16c7c:	mov	r1, #0
   16c80:	str	r4, [r5]
   16c84:	str	r1, [r5, #4]
   16c88:	mov	r8, r0
   16c8c:	str	r0, [sl]
   16c90:	b	16e24 <read_boolean_unary_expression@@Base+0x71c>
   16c94:	mov	r1, #0
   16c98:	mov	r2, #2
   16c9c:	mov	r8, #0
   16ca0:	bl	11ffc <fseek@plt>
   16ca4:	ldr	r0, [pc, #1288]	; 171b4 <read_boolean_unary_expression@@Base+0xaac>
   16ca8:	ldr	r0, [pc, r0]
   16cac:	bl	11ea0 <ftell@plt>
   16cb0:	mov	r2, r0
   16cb4:	ldr	r0, [pc, #1276]	; 171b8 <read_boolean_unary_expression@@Base+0xab0>
   16cb8:	asr	r3, r2, #31
   16cbc:	add	r0, pc, r0
   16cc0:	cmp	r2, #0
   16cc4:	strd	r2, [r0]
   16cc8:	beq	16d98 <read_boolean_unary_expression@@Base+0x690>
   16ccc:	ldr	r0, [pc, #1256]	; 171bc <read_boolean_unary_expression@@Base+0xab4>
   16cd0:	mov	r1, r2
   16cd4:	mov	r2, #3
   16cd8:	mov	r3, #1
   16cdc:	ldr	r0, [pc, r0]
   16ce0:	str	r8, [sp, #8]
   16ce4:	str	r8, [sp, #12]
   16ce8:	str	r0, [sp]
   16cec:	mov	r0, #0
   16cf0:	bl	11e94 <mmap64@plt>
   16cf4:	ldr	r1, [pc, #1220]	; 171c0 <read_boolean_unary_expression@@Base+0xab8>
   16cf8:	cmn	r0, #1
   16cfc:	add	r1, pc, r1
   16d00:	str	r0, [r1]
   16d04:	beq	16d60 <read_boolean_unary_expression@@Base+0x658>
   16d08:	ldr	r1, [pc, #1232]	; 171e0 <read_boolean_unary_expression@@Base+0xad8>
   16d0c:	add	r1, pc, r1
   16d10:	ldrb	r1, [r1]
   16d14:	cmp	r1, #0
   16d18:	beq	16d24 <read_boolean_unary_expression@@Base+0x61c>
   16d1c:	mov	r8, r0
   16d20:	b	16e30 <read_boolean_unary_expression@@Base+0x728>
   16d24:	ldr	ip, [r9, #4]
   16d28:	ldr	r5, [pc, #1236]	; 17204 <read_boolean_unary_expression@@Base+0xafc>
   16d2c:	mov	r4, r0
   16d30:	lsr	r2, r6, #16
   16d34:	ldr	r5, [pc, r5]
   16d38:	lsr	r1, r6, #24
   16d3c:	lsr	r3, r6, #8
   16d40:	strb	r6, [r4, r5]!
   16d44:	strb	r2, [r4, #2]
   16d48:	adds	r2, r5, #4
   16d4c:	adc	ip, ip, #0
   16d50:	strb	r1, [r4, #3]
   16d54:	strb	r3, [r4, #1]
   16d58:	stm	r9, {r2, ip}
   16d5c:	b	16ef8 <read_boolean_unary_expression@@Base+0x7f0>
   16d60:	bl	11f6c <__errno_location@plt>
   16d64:	ldr	r1, [pc, #1112]	; 171c4 <read_boolean_unary_expression@@Base+0xabc>
   16d68:	ldr	r1, [pc, r1]
   16d6c:	ldr	r0, [r0]
   16d70:	ldr	r4, [r1]
   16d74:	ldr	r7, [pc, #1100]	; 171c8 <read_boolean_unary_expression@@Base+0xac0>
   16d78:	ldr	r7, [pc, r7]
   16d7c:	bl	11f18 <strerror@plt>
   16d80:	ldr	r1, [pc, #1092]	; 171cc <read_boolean_unary_expression@@Base+0xac4>
   16d84:	mov	r3, r0
   16d88:	mov	r0, r4
   16d8c:	add	r1, pc, r1
   16d90:	mov	r2, r7
   16d94:	bl	11f60 <fprintf@plt>
   16d98:	str	r8, [r5]
   16d9c:	str	r8, [r5, #4]
   16da0:	ldr	r0, [pc, #1064]	; 171d0 <read_boolean_unary_expression@@Base+0xac8>
   16da4:	mov	r2, #16646144	; 0xfe0000
   16da8:	orr	r2, r2, #-16777216	; 0xff000000
   16dac:	add	r0, pc, r0
   16db0:	mvn	r3, #0
   16db4:	str	r8, [r0]
   16db8:	ldr	r1, [pc, #1044]	; 171d4 <read_boolean_unary_expression@@Base+0xacc>
   16dbc:	mov	r0, #1
   16dc0:	add	r1, pc, r1
   16dc4:	strb	r0, [r1]
   16dc8:	ldr	r0, [r9, #4]
   16dcc:	ldr	r1, [pc, #1028]	; 171d8 <read_boolean_unary_expression@@Base+0xad0>
   16dd0:	eor	r3, r0, r3
   16dd4:	ldr	r1, [pc, r1]
   16dd8:	eor	r2, r1, r2
   16ddc:	orrs	r2, r2, r3
   16de0:	beq	16e20 <read_boolean_unary_expression@@Base+0x718>
   16de4:	ldr	r2, [pc, #896]	; 1716c <read_boolean_unary_expression@@Base+0xa64>
   16de8:	adds	r1, r1, r2
   16dec:	adc	r0, r0, #0
   16df0:	mvn	r2, #0
   16df4:	and	r7, r0, r2
   16df8:	mov	r0, #16646144	; 0xfe0000
   16dfc:	orr	r0, r0, #-16777216	; 0xff000000
   16e00:	and	r4, r1, r0
   16e04:	mov	r0, r4
   16e08:	bl	11f00 <malloc@plt>
   16e0c:	stm	r5, {r4, r7}
   16e10:	mov	r8, r0
   16e14:	ldr	r0, [pc, #960]	; 171dc <read_boolean_unary_expression@@Base+0xad4>
   16e18:	add	r0, pc, r0
   16e1c:	str	r8, [r0]
   16e20:	mov	r0, r8
   16e24:	mov	r1, #0
   16e28:	mov	r2, #131072	; 0x20000
   16e2c:	bl	11f90 <memset@plt>
   16e30:	ldr	r0, [r9, #4]
   16e34:	ldr	r1, [pc, #936]	; 171e4 <read_boolean_unary_expression@@Base+0xadc>
   16e38:	mov	sl, r5
   16e3c:	mov	r7, #7
   16e40:	orr	r7, r7, #131072	; 0x20000
   16e44:	ldr	r1, [pc, r1]
   16e48:	ldr	r4, [r5, #4]
   16e4c:	ldr	r5, [pc, #916]	; 171e8 <read_boolean_unary_expression@@Base+0xae0>
   16e50:	adds	r2, r1, #4
   16e54:	adc	r3, r0, #0
   16e58:	ldr	r5, [pc, r5]
   16e5c:	subs	r2, r5, r2
   16e60:	sbcs	r2, r4, r3
   16e64:	bcs	16f3c <read_boolean_unary_expression@@Base+0x834>
   16e68:	adds	r1, r1, r7
   16e6c:	adc	r0, r0, #0
   16e70:	subs	r1, r1, #4
   16e74:	sbc	r0, r0, #0
   16e78:	mvn	r2, #0
   16e7c:	and	r5, r0, r2
   16e80:	mov	r0, #16646144	; 0xfe0000
   16e84:	orr	r0, r0, #-16777216	; 0xff000000
   16e88:	and	r4, r1, r0
   16e8c:	mov	r0, r8
   16e90:	mov	r1, r4
   16e94:	bl	11ec4 <realloc@plt>
   16e98:	strd	r4, [sl]
   16e9c:	ldr	r1, [pc, #844]	; 171f0 <read_boolean_unary_expression@@Base+0xae8>
   16ea0:	mov	r7, r6
   16ea4:	lsr	r2, r6, #24
   16ea8:	add	r1, pc, r1
   16eac:	mov	r3, r0
   16eb0:	str	r0, [r1]
   16eb4:	ldr	r6, [pc, #824]	; 171f4 <read_boolean_unary_expression@@Base+0xaec>
   16eb8:	ldr	r1, [r9, #4]
   16ebc:	lsr	r5, r7, #16
   16ec0:	add	r6, pc, r6
   16ec4:	ldrb	r6, [r6]
   16ec8:	ldr	r4, [pc, #808]	; 171f8 <read_boolean_unary_expression@@Base+0xaf0>
   16ecc:	ldr	r4, [pc, r4]
   16ed0:	strb	r7, [r3, r4]!
   16ed4:	strb	r2, [r3, #3]
   16ed8:	lsr	r2, r7, #8
   16edc:	strb	r2, [r3, #1]
   16ee0:	adds	r2, r4, #4
   16ee4:	adc	ip, r1, #0
   16ee8:	cmp	r6, #1
   16eec:	strb	r5, [r3, #2]
   16ef0:	stm	r9, {r2, ip}
   16ef4:	beq	16f7c <read_boolean_unary_expression@@Base+0x874>
   16ef8:	ldr	r4, [sp, #20]
   16efc:	mov	r5, r0
   16f00:	mov	lr, r9
   16f04:	ldrb	r1, [r4]
   16f08:	ldrb	r3, [r4, #1]
   16f0c:	ldrb	r7, [r4, #2]
   16f10:	ldrb	r6, [r4, #3]
   16f14:	strb	r1, [r5, r2]!
   16f18:	adds	r4, r2, #4
   16f1c:	adc	r1, ip, #0
   16f20:	strb	r6, [r5, #3]
   16f24:	strb	r7, [r5, #2]
   16f28:	strb	r3, [r5, #1]
   16f2c:	str	r4, [lr]
   16f30:	str	r1, [lr, #4]
   16f34:	ldr	r6, [sp, #24]
   16f38:	b	170f8 <read_boolean_unary_expression@@Base+0x9f0>
   16f3c:	ldr	r1, [r9, #4]
   16f40:	ldr	r4, [pc, #676]	; 171ec <read_boolean_unary_expression@@Base+0xae4>
   16f44:	mov	r5, r6
   16f48:	lsr	r0, r6, #24
   16f4c:	ldr	r4, [pc, r4]
   16f50:	lsr	r2, r6, #16
   16f54:	lsr	r3, r6, #8
   16f58:	mov	r6, r8
   16f5c:	strb	r5, [r6, r4]!
   16f60:	strb	r2, [r6, #2]
   16f64:	adds	r2, r4, #4
   16f68:	adc	ip, r1, #0
   16f6c:	strb	r0, [r6, #3]
   16f70:	strb	r3, [r6, #1]
   16f74:	stm	r9, {r2, ip}
   16f78:	mov	r0, r8
   16f7c:	ldr	r7, [sl, #4]
   16f80:	ldr	r3, [pc, #628]	; 171fc <read_boolean_unary_expression@@Base+0xaf4>
   16f84:	adds	r6, r4, #8
   16f88:	mov	r8, r9
   16f8c:	adc	r5, r1, #0
   16f90:	ldr	r3, [pc, r3]
   16f94:	mov	r9, sl
   16f98:	subs	r3, r3, r6
   16f9c:	sbcs	r3, r7, r5
   16fa0:	bcs	17044 <read_boolean_unary_expression@@Base+0x93c>
   16fa4:	mov	r2, #7
   16fa8:	orr	r2, r2, #131072	; 0x20000
   16fac:	adds	r2, r4, r2
   16fb0:	adc	r4, r1, #0
   16fb4:	mov	r1, #16646144	; 0xfe0000
   16fb8:	orr	r1, r1, #-16777216	; 0xff000000
   16fbc:	and	r6, r2, r1
   16fc0:	mov	r1, r6
   16fc4:	bl	11ec4 <realloc@plt>
   16fc8:	ldr	sl, [pc, #568]	; 17208 <read_boolean_unary_expression@@Base+0xb00>
   16fcc:	mvn	r1, #0
   16fd0:	and	r7, r4, r1
   16fd4:	add	sl, pc, sl
   16fd8:	strd	r6, [r9]
   16fdc:	str	r0, [sl]
   16fe0:	ldr	r1, [pc, #548]	; 1720c <read_boolean_unary_expression@@Base+0xb04>
   16fe4:	ldr	r2, [sp, #20]
   16fe8:	ldr	ip, [r8, #4]
   16fec:	add	r1, pc, r1
   16ff0:	mov	lr, r8
   16ff4:	ldrb	r3, [r1]
   16ff8:	ldrb	r1, [r2]
   16ffc:	ldrb	r7, [r2, #1]
   17000:	ldrb	r6, [r2, #2]
   17004:	ldrb	r5, [r2, #3]
   17008:	ldr	r2, [pc, #512]	; 17210 <read_boolean_unary_expression@@Base+0xb08>
   1700c:	ldr	r2, [pc, r2]
   17010:	adds	r4, r2, #4
   17014:	strb	r1, [r0, r2]
   17018:	add	r1, r0, r2
   1701c:	strb	r5, [r1, #3]
   17020:	strb	r6, [r1, #2]
   17024:	strb	r7, [r1, #1]
   17028:	adc	r1, ip, #0
   1702c:	str	r4, [lr]
   17030:	str	r1, [lr, #4]
   17034:	ldr	r6, [sp, #24]
   17038:	cmp	r3, #1
   1703c:	beq	1708c <read_boolean_unary_expression@@Base+0x984>
   17040:	b	170f8 <read_boolean_unary_expression@@Base+0x9f0>
   17044:	ldr	r6, [sp, #20]
   17048:	mov	r5, r0
   1704c:	adds	r4, r2, #4
   17050:	ldrb	r1, [r6]
   17054:	ldrb	r3, [r6, #1]
   17058:	ldrb	r7, [r6, #2]
   1705c:	ldrb	r6, [r6, #3]
   17060:	strb	r1, [r5, r2]!
   17064:	adc	r1, ip, #0
   17068:	strb	r3, [r5, #1]
   1706c:	mov	r3, r8
   17070:	strb	r6, [r5, #3]
   17074:	strb	r7, [r5, #2]
   17078:	str	r4, [r3]
   1707c:	str	r1, [r3, #4]
   17080:	ldr	r6, [sp, #24]
   17084:	ldr	sl, [pc, #372]	; 17200 <read_boolean_unary_expression@@Base+0xaf8>
   17088:	add	sl, pc, sl
   1708c:	ldr	r7, [r9, #4]
   17090:	ldr	r5, [pc, #380]	; 17214 <read_boolean_unary_expression@@Base+0xb0c>
   17094:	adds	r3, r2, #8
   17098:	adc	lr, ip, #0
   1709c:	ldr	r5, [pc, r5]
   170a0:	subs	r3, r5, r3
   170a4:	sbcs	r3, r7, lr
   170a8:	bcs	170f4 <read_boolean_unary_expression@@Base+0x9ec>
   170ac:	mov	r1, #7
   170b0:	orr	r1, r1, #131072	; 0x20000
   170b4:	adds	r1, r2, r1
   170b8:	adc	r2, ip, #0
   170bc:	mvn	r3, #0
   170c0:	and	r5, r2, r3
   170c4:	mov	r2, #16646144	; 0xfe0000
   170c8:	orr	r2, r2, #-16777216	; 0xff000000
   170cc:	and	r4, r1, r2
   170d0:	mov	r1, r4
   170d4:	bl	11ec4 <realloc@plt>
   170d8:	strd	r4, [r9]
   170dc:	str	r0, [sl]
   170e0:	ldr	r1, [r8, #4]
   170e4:	ldr	r4, [pc, #300]	; 17218 <read_boolean_unary_expression@@Base+0xb10>
   170e8:	mov	lr, r8
   170ec:	ldr	r4, [pc, r4]
   170f0:	b	170f8 <read_boolean_unary_expression@@Base+0x9f0>
   170f4:	mov	lr, r8
   170f8:	lsr	r2, r6, #24
   170fc:	strb	r6, [r0, r4]!
   17100:	lsr	r3, r6, #16
   17104:	lsr	r7, r6, #8
   17108:	strb	r2, [r0, #3]
   1710c:	strb	r3, [r0, #2]
   17110:	strb	r7, [r0, #1]
   17114:	adds	r0, r4, #4
   17118:	adc	r1, r1, #0
   1711c:	strd	r0, [lr]
   17120:	sub	sp, fp, #28
   17124:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17128:	bl	11f6c <__errno_location@plt>
   1712c:	ldr	r1, [pc, #116]	; 171a8 <read_boolean_unary_expression@@Base+0xaa0>
   17130:	ldr	r1, [pc, r1]
   17134:	ldr	r0, [r0]
   17138:	ldr	r4, [r1]
   1713c:	ldr	r5, [pc, #104]	; 171ac <read_boolean_unary_expression@@Base+0xaa4>
   17140:	ldr	r5, [pc, r5]
   17144:	bl	11f18 <strerror@plt>
   17148:	ldr	r1, [pc, #96]	; 171b0 <read_boolean_unary_expression@@Base+0xaa8>
   1714c:	mov	r3, r0
   17150:	mov	r0, r4
   17154:	add	r1, pc, r1
   17158:	mov	r2, r5
   1715c:	bl	11f60 <fprintf@plt>
   17160:	sub	sp, fp, #28
   17164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17168:	strbvs	r6, [r3, -r1, ror #8]!
   1716c:	strdeq	pc, [r3], -pc	; <UNPREDICTABLE>
   17170:	andeq	r6, r1, r8, asr #4
   17174:	andeq	r6, r1, r8, asr #4
   17178:	andeq	r5, r1, r8, asr #10
   1717c:	andeq	r4, r0, ip, lsr #12
   17180:	andeq	r5, r1, r4, asr #9
   17184:	muleq	r1, r8, r1
   17188:	muleq	r1, ip, r1
   1718c:	andeq	r6, r1, r8, lsl #3
   17190:	andeq	r6, r1, r8, lsl #3
   17194:	andeq	r6, r1, r8, asr r1
   17198:	strdeq	r6, [r1], -r8
   1719c:	andeq	r4, r0, r0, lsl #12
   171a0:	ldrdeq	r6, [r1], -r8
   171a4:	andeq	r6, r1, r4, asr #3
   171a8:	andeq	r4, r1, r4, lsl #31
   171ac:	andeq	r5, r1, r0, ror ip
   171b0:	andeq	r4, r0, ip, ror r0
   171b4:	andeq	r6, r1, r0, lsl r1
   171b8:	andeq	r6, r1, r4, lsr #2
   171bc:	strdeq	r5, [r1], -r8
   171c0:	andeq	r6, r1, r0, asr #1
   171c4:	andeq	r5, r1, ip, asr #6
   171c8:	andeq	r6, r1, r8, lsr r0
   171cc:	muleq	r0, lr, r5
   171d0:	andeq	r6, r1, r0, lsl r0
   171d4:	strdeq	r5, [r1], -r4
   171d8:	strdeq	r5, [r1], -r4
   171dc:	andeq	r5, r1, r4, lsr #31
   171e0:	andeq	r6, r1, r8, lsr #1
   171e4:	andeq	r5, r1, r4, lsl #31
   171e8:	andeq	r5, r1, r8, ror #30
   171ec:	andeq	r5, r1, ip, ror lr
   171f0:	andeq	r5, r1, r4, lsl pc
   171f4:	strdeq	r5, [r1], -r4
   171f8:	strdeq	r5, [r1], -ip
   171fc:	andeq	r5, r1, r0, lsr lr
   17200:	andeq	r5, r1, r4, lsr sp
   17204:	muleq	r1, r4, r0
   17208:	andeq	r5, r1, r8, ror #27
   1720c:	andeq	r5, r1, r8, asr #27
   17210:			; <UNDEFINED> instruction: 0x00015dbc
   17214:	andeq	r5, r1, r4, lsr #26
   17218:	ldrdeq	r5, [r1], -ip
   1721c:	ldr	r0, [r0]
   17220:	cmn	r0, #1
   17224:	beq	17244 <read_boolean_unary_expression@@Base+0xb3c>
   17228:	ldr	r0, [r1, r0, lsl #2]
   1722c:	cmp	r0, #0
   17230:	bxeq	lr
   17234:	ldrd	r2, [r0]
   17238:	adds	r2, r2, #1
   1723c:	adc	r3, r3, #0
   17240:	strd	r2, [r0]
   17244:	bx	lr
   17248:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1724c:	add	fp, sp, #28
   17250:	sub	sp, sp, #12
   17254:	mov	r9, r0
   17258:	ldr	r0, [pc, #2000]	; 17a30 <read_boolean_unary_expression@@Base+0x1328>
   1725c:	mov	sl, #2
   17260:	cmp	r3, #0
   17264:	movne	sl, #3
   17268:	ldr	r0, [pc, r0]
   1726c:	cmp	r0, #0
   17270:	beq	17a28 <read_boolean_unary_expression@@Base+0x1320>
   17274:	stm	sp, {r2, r3}
   17278:	ldr	r0, [pc, #1972]	; 17a34 <read_boolean_unary_expression@@Base+0x132c>
   1727c:	str	r1, [sp, #8]
   17280:	add	r0, pc, r0
   17284:	ldrb	r0, [r0]
   17288:	cmp	r0, #1
   1728c:	bne	1731c <read_boolean_unary_expression@@Base+0xc14>
   17290:	ldr	r0, [pc, #1952]	; 17a38 <read_boolean_unary_expression@@Base+0x1330>
   17294:	ldr	r4, [pc, #1952]	; 17a3c <read_boolean_unary_expression@@Base+0x1334>
   17298:	add	r0, pc, r0
   1729c:	add	r4, pc, r4
   172a0:	ldr	r0, [r0, #4]
   172a4:	ldr	r5, [pc, #1940]	; 17a40 <read_boolean_unary_expression@@Base+0x1338>
   172a8:	ldr	r5, [pc, r5]
   172ac:	ldr	r7, [r4, #4]
   172b0:	ldr	r6, [pc, #1932]	; 17a44 <read_boolean_unary_expression@@Base+0x133c>
   172b4:	adds	r2, r5, #4
   172b8:	adc	r3, r0, #0
   172bc:	ldr	r6, [pc, r6]
   172c0:	subs	r2, r6, r2
   172c4:	sbcs	r2, r7, r3
   172c8:	bcs	1731c <read_boolean_unary_expression@@Base+0xc14>
   172cc:	mov	r2, #7
   172d0:	orr	r2, r2, #131072	; 0x20000
   172d4:	adds	r1, r5, r2
   172d8:	adc	r0, r0, #0
   172dc:	subs	r1, r1, #4
   172e0:	sbc	r0, r0, #0
   172e4:	mvn	r2, #0
   172e8:	and	r7, r0, r2
   172ec:	mov	r0, #16646144	; 0xfe0000
   172f0:	orr	r0, r0, #-16777216	; 0xff000000
   172f4:	ldr	r8, [pc, #1868]	; 17a48 <read_boolean_unary_expression@@Base+0x1340>
   172f8:	and	r6, r1, r0
   172fc:	ldr	r0, [pc, #1864]	; 17a4c <read_boolean_unary_expression@@Base+0x1344>
   17300:	mov	r1, r6
   17304:	add	r8, pc, r8
   17308:	ldr	r0, [pc, r0]
   1730c:	bl	11ec4 <realloc@plt>
   17310:	ldr	r1, [sp, #8]
   17314:	strd	r6, [r4]
   17318:	str	r0, [r8]
   1731c:	ldr	r3, [pc, #1836]	; 17a50 <read_boolean_unary_expression@@Base+0x1348>
   17320:	ldr	r7, [pc, #1836]	; 17a54 <read_boolean_unary_expression@@Base+0x134c>
   17324:	mov	r0, #0
   17328:	add	r3, pc, r3
   1732c:	mov	r2, #1
   17330:	ldr	r7, [pc, r7]
   17334:	ldr	r8, [pc, #1820]	; 17a58 <read_boolean_unary_expression@@Base+0x1350>
   17338:	adds	r4, r7, #4
   1733c:	ldr	r8, [pc, r8]
   17340:	ldr	r6, [r3, #4]
   17344:	mov	r5, r8
   17348:	strb	r0, [r5, r7]!
   1734c:	strb	r2, [r5, #3]
   17350:	strb	r0, [r5, #2]
   17354:	strb	r0, [r5, #1]
   17358:	adc	r5, r6, #0
   1735c:	cmp	r1, #0
   17360:	strd	r4, [r3]
   17364:	beq	17378 <read_boolean_unary_expression@@Base+0xc70>
   17368:	mov	r0, r1
   1736c:	bl	11f48 <strlen@plt>
   17370:	add	r0, sl, r0, lsr #2
   17374:	add	sl, r0, #2
   17378:	ldr	r0, [pc, #1756]	; 17a5c <read_boolean_unary_expression@@Base+0x1354>
   1737c:	add	r0, pc, r0
   17380:	ldrb	r0, [r0]
   17384:	cmp	r0, #0
   17388:	beq	17468 <read_boolean_unary_expression@@Base+0xd60>
   1738c:	ldr	lr, [pc, #1744]	; 17a64 <read_boolean_unary_expression@@Base+0x135c>
   17390:	adds	r0, r7, #8
   17394:	adc	r1, r6, #0
   17398:	add	lr, pc, lr
   1739c:	ldr	r2, [lr, #4]
   173a0:	ldr	r3, [pc, #1728]	; 17a68 <read_boolean_unary_expression@@Base+0x1360>
   173a4:	ldr	r3, [pc, r3]
   173a8:	subs	r0, r3, r0
   173ac:	sbcs	r0, r2, r1
   173b0:	bcs	176b8 <read_boolean_unary_expression@@Base+0xfb0>
   173b4:	mov	r0, #7
   173b8:	orr	r0, r0, #131072	; 0x20000
   173bc:	adds	r0, r7, r0
   173c0:	adc	r1, r6, #0
   173c4:	mvn	r2, #0
   173c8:	and	r5, r1, r2
   173cc:	mov	r1, #16646144	; 0xfe0000
   173d0:	orr	r1, r1, #-16777216	; 0xff000000
   173d4:	and	r6, r0, r1
   173d8:	ldr	r4, [pc, #1680]	; 17a70 <read_boolean_unary_expression@@Base+0x1368>
   173dc:	mov	r0, r8
   173e0:	mov	r1, r6
   173e4:	add	r4, pc, r4
   173e8:	mov	r7, lr
   173ec:	bl	11ec4 <realloc@plt>
   173f0:	mov	lr, r7
   173f4:	mov	r8, r0
   173f8:	str	r6, [lr]
   173fc:	str	r5, [lr, #4]
   17400:	str	r8, [r4]
   17404:	ldr	r1, [pc, #1640]	; 17a74 <read_boolean_unary_expression@@Base+0x136c>
   17408:	lsr	r0, sl, #24
   1740c:	add	r1, pc, r1
   17410:	lsr	r3, sl, #16
   17414:	ldrb	r2, [r1]
   17418:	ldr	r1, [pc, #1624]	; 17a78 <read_boolean_unary_expression@@Base+0x1370>
   1741c:	add	r1, pc, r1
   17420:	mov	r7, r1
   17424:	ldr	r5, [r1, #4]
   17428:	ldr	r4, [pc, #1612]	; 17a7c <read_boolean_unary_expression@@Base+0x1374>
   1742c:	mov	r1, r8
   17430:	ldr	r4, [pc, r4]
   17434:	strb	sl, [r1, r4]!
   17438:	ldr	ip, [sp, #8]
   1743c:	strb	r0, [r1, #3]
   17440:	lsr	r0, sl, #8
   17444:	strb	r0, [r1, #1]
   17448:	adds	r0, r4, #4
   1744c:	strb	r3, [r1, #2]
   17450:	adc	r1, r5, #0
   17454:	mov	sl, r7
   17458:	cmp	r2, #1
   1745c:	strd	r0, [sl]
   17460:	bne	174a0 <read_boolean_unary_expression@@Base+0xd98>
   17464:	b	176f0 <read_boolean_unary_expression@@Base+0xfe8>
   17468:	mov	r3, r8
   1746c:	lsr	r0, sl, #24
   17470:	strb	sl, [r3, r4]!
   17474:	lsr	r1, sl, #16
   17478:	lsr	r2, sl, #8
   1747c:	strb	r0, [r3, #3]
   17480:	strb	r1, [r3, #2]
   17484:	strb	r2, [r3, #1]
   17488:	ldr	sl, [pc, #1488]	; 17a60 <read_boolean_unary_expression@@Base+0x1358>
   1748c:	ldr	ip, [sp, #8]
   17490:	adds	r0, r7, #8
   17494:	adc	r1, r6, #0
   17498:	add	sl, pc, sl
   1749c:	strd	r0, [sl]
   174a0:	mov	r6, r8
   174a4:	lsr	r2, r9, #24
   174a8:	strb	r9, [r6, r0]!
   174ac:	lsr	r3, r9, #16
   174b0:	strb	r2, [r6, #3]
   174b4:	adds	r2, r0, #4
   174b8:	lsr	r7, r9, #8
   174bc:	strb	r3, [r6, #2]
   174c0:	adc	r3, r1, #0
   174c4:	strb	r7, [r6, #1]
   174c8:	strd	r2, [sl]
   174cc:	ldr	r5, [sp]
   174d0:	mov	r6, r8
   174d4:	adds	r4, r2, #4
   174d8:	lsr	r7, r5, #8
   174dc:	strb	r5, [r6, r2]!
   174e0:	lsr	r0, r5, #24
   174e4:	lsr	r1, r5, #16
   174e8:	strb	r7, [r6, #1]
   174ec:	adc	r7, r3, #0
   174f0:	strb	r0, [r6, #3]
   174f4:	strb	r1, [r6, #2]
   174f8:	stm	sl, {r4, r7}
   174fc:	ldr	r0, [sp, #4]
   17500:	cmp	r0, #0
   17504:	beq	175dc <read_boolean_unary_expression@@Base+0xed4>
   17508:	ldr	r0, [pc, #1420]	; 17a9c <read_boolean_unary_expression@@Base+0x1394>
   1750c:	ldr	sl, [fp, #8]
   17510:	add	r0, pc, r0
   17514:	ldrb	r0, [r0]
   17518:	cmp	r0, #1
   1751c:	bne	175a8 <read_boolean_unary_expression@@Base+0xea0>
   17520:	ldr	r9, [pc, #1400]	; 17aa0 <read_boolean_unary_expression@@Base+0x1398>
   17524:	adds	r0, r2, #8
   17528:	adc	r1, r3, #0
   1752c:	add	r9, pc, r9
   17530:	ldr	r6, [r9, #4]
   17534:	ldr	r5, [pc, #1384]	; 17aa4 <read_boolean_unary_expression@@Base+0x139c>
   17538:	ldr	r5, [pc, r5]
   1753c:	subs	r0, r5, r0
   17540:	sbcs	r0, r6, r1
   17544:	bcs	175a8 <read_boolean_unary_expression@@Base+0xea0>
   17548:	mov	r0, #7
   1754c:	orr	r0, r0, #131072	; 0x20000
   17550:	adds	r0, r2, r0
   17554:	adc	r1, r3, #0
   17558:	mvn	r2, #0
   1755c:	and	r5, r1, r2
   17560:	mov	r1, #16646144	; 0xfe0000
   17564:	orr	r1, r1, #-16777216	; 0xff000000
   17568:	and	r6, r0, r1
   1756c:	ldr	r4, [pc, #1332]	; 17aa8 <read_boolean_unary_expression@@Base+0x13a0>
   17570:	mov	r0, r8
   17574:	mov	r1, r6
   17578:	add	r4, pc, r4
   1757c:	bl	11ec4 <realloc@plt>
   17580:	ldr	ip, [sp, #8]
   17584:	str	r6, [r9]
   17588:	str	r5, [r9, #4]
   1758c:	mov	r8, r0
   17590:	ldr	r0, [pc, #1300]	; 17aac <read_boolean_unary_expression@@Base+0x13a4>
   17594:	str	r8, [r4]
   17598:	add	r0, pc, r0
   1759c:	ldr	r7, [r0, #4]
   175a0:	ldr	r4, [pc, #1288]	; 17ab0 <read_boolean_unary_expression@@Base+0x13a8>
   175a4:	ldr	r4, [pc, r4]
   175a8:	mov	r3, r8
   175ac:	lsr	r0, sl, #24
   175b0:	strb	sl, [r3, r4]!
   175b4:	lsr	r1, sl, #16
   175b8:	lsr	r2, sl, #8
   175bc:	strb	r0, [r3, #3]
   175c0:	strb	r1, [r3, #2]
   175c4:	strb	r2, [r3, #1]
   175c8:	ldr	sl, [pc, #1252]	; 17ab4 <read_boolean_unary_expression@@Base+0x13ac>
   175cc:	adds	r4, r4, #4
   175d0:	adc	r7, r7, #0
   175d4:	add	sl, pc, sl
   175d8:	stm	sl, {r4, r7}
   175dc:	cmp	ip, #0
   175e0:	beq	17a28 <read_boolean_unary_expression@@Base+0x1320>
   175e4:	mov	r0, ip
   175e8:	bl	11f48 <strlen@plt>
   175ec:	mov	r9, #1
   175f0:	add	r5, r9, r0, lsr #2
   175f4:	ldr	r0, [pc, #1212]	; 17ab8 <read_boolean_unary_expression@@Base+0x13b0>
   175f8:	add	r0, pc, r0
   175fc:	ldrb	r0, [r0]
   17600:	cmp	r0, #1
   17604:	bne	176a8 <read_boolean_unary_expression@@Base+0xfa0>
   17608:	ldr	sl, [pc, #1196]	; 17abc <read_boolean_unary_expression@@Base+0x13b4>
   1760c:	adds	r0, r4, #4
   17610:	adc	r1, r7, #0
   17614:	add	sl, pc, sl
   17618:	ldr	r2, [sl, #4]
   1761c:	ldr	r3, [pc, #1180]	; 17ac0 <read_boolean_unary_expression@@Base+0x13b8>
   17620:	ldr	r3, [pc, r3]
   17624:	subs	r0, r3, r0
   17628:	sbcs	r0, r2, r1
   1762c:	bcs	1785c <read_boolean_unary_expression@@Base+0x1154>
   17630:	mov	r0, #0
   17634:	str	r0, [sp, #4]
   17638:	mov	r0, #7
   1763c:	orr	r0, r0, #131072	; 0x20000
   17640:	adds	r0, r4, r0
   17644:	adc	r1, r7, #0
   17648:	subs	r0, r0, #4
   1764c:	sbc	r1, r1, #0
   17650:	mvn	r2, #0
   17654:	and	r7, r1, r2
   17658:	mov	r1, #16646144	; 0xfe0000
   1765c:	orr	r1, r1, #-16777216	; 0xff000000
   17660:	and	r4, r0, r1
   17664:	ldr	r6, [pc, #1116]	; 17ac8 <read_boolean_unary_expression@@Base+0x13c0>
   17668:	mov	r0, r8
   1766c:	mov	r1, r4
   17670:	add	r6, pc, r6
   17674:	bl	11ec4 <realloc@plt>
   17678:	stm	sl, {r4, r7}
   1767c:	str	r0, [r6]
   17680:	ldr	sl, [pc, #1092]	; 17acc <read_boolean_unary_expression@@Base+0x13c4>
   17684:	mov	r8, r0
   17688:	add	sl, pc, sl
   1768c:	ldr	r7, [sl, #4]
   17690:	ldr	r0, [pc, #1080]	; 17ad0 <read_boolean_unary_expression@@Base+0x13c8>
   17694:	add	r0, pc, r0
   17698:	ldrb	r9, [r0]
   1769c:	ldr	r4, [pc, #1072]	; 17ad4 <read_boolean_unary_expression@@Base+0x13cc>
   176a0:	ldr	r4, [pc, r4]
   176a4:	b	1786c <read_boolean_unary_expression@@Base+0x1164>
   176a8:	mov	r0, #0
   176ac:	str	r0, [sp, #4]
   176b0:	mov	r9, #0
   176b4:	b	1786c <read_boolean_unary_expression@@Base+0x1164>
   176b8:	mov	r3, r8
   176bc:	lsr	r0, sl, #24
   176c0:	strb	sl, [r3, r4]!
   176c4:	lsr	r1, sl, #16
   176c8:	lsr	r2, sl, #8
   176cc:	strb	r0, [r3, #3]
   176d0:	strb	r1, [r3, #2]
   176d4:	strb	r2, [r3, #1]
   176d8:	ldr	sl, [pc, #908]	; 17a6c <read_boolean_unary_expression@@Base+0x1364>
   176dc:	adds	r0, r7, #8
   176e0:	adc	r1, r6, #0
   176e4:	add	sl, pc, sl
   176e8:	ldr	ip, [sp, #8]
   176ec:	strd	r0, [sl]
   176f0:	ldr	r7, [lr, #4]
   176f4:	ldr	r6, [pc, #900]	; 17a80 <read_boolean_unary_expression@@Base+0x1378>
   176f8:	adds	r2, r4, #8
   176fc:	adc	r3, r5, #0
   17700:	ldr	r6, [pc, r6]
   17704:	subs	r2, r6, r2
   17708:	sbcs	r2, r7, r3
   1770c:	bcs	177b0 <read_boolean_unary_expression@@Base+0x10a8>
   17710:	mov	r0, #7
   17714:	orr	r0, r0, #131072	; 0x20000
   17718:	adds	r0, r4, r0
   1771c:	adc	r1, r5, #0
   17720:	mvn	r2, #0
   17724:	and	r5, r1, r2
   17728:	mov	r1, #16646144	; 0xfe0000
   1772c:	orr	r1, r1, #-16777216	; 0xff000000
   17730:	and	r4, r0, r1
   17734:	ldr	r6, [pc, #840]	; 17a84 <read_boolean_unary_expression@@Base+0x137c>
   17738:	mov	r0, r8
   1773c:	mov	r1, r4
   17740:	add	r6, pc, r6
   17744:	mov	r7, lr
   17748:	bl	11ec4 <realloc@plt>
   1774c:	mov	lr, r7
   17750:	str	r0, [r6]
   17754:	strd	r4, [lr]
   17758:	mov	r8, r0
   1775c:	ldr	ip, [sp, #8]
   17760:	ldr	r0, [pc, #800]	; 17a88 <read_boolean_unary_expression@@Base+0x1380>
   17764:	ldr	r1, [sl, #4]
   17768:	mov	r3, r8
   1776c:	add	r0, pc, r0
   17770:	lsr	r2, r9, #24
   17774:	ldrb	r7, [r0]
   17778:	ldr	r0, [pc, #780]	; 17a8c <read_boolean_unary_expression@@Base+0x1384>
   1777c:	lsr	r6, r9, #16
   17780:	ldr	r0, [pc, r0]
   17784:	strb	r9, [r3, r0]!
   17788:	strb	r2, [r3, #3]
   1778c:	lsr	r2, r9, #8
   17790:	strb	r2, [r3, #1]
   17794:	adds	r2, r0, #4
   17798:	strb	r6, [r3, #2]
   1779c:	adc	r3, r1, #0
   177a0:	cmp	r7, #1
   177a4:	strd	r2, [sl]
   177a8:	bne	174cc <read_boolean_unary_expression@@Base+0xdc4>
   177ac:	b	177dc <read_boolean_unary_expression@@Base+0x10d4>
   177b0:	mov	r6, r8
   177b4:	lsr	r2, r9, #24
   177b8:	strb	r9, [r6, r0]!
   177bc:	lsr	r3, r9, #16
   177c0:	strb	r2, [r6, #3]
   177c4:	adds	r2, r0, #4
   177c8:	lsr	r7, r9, #8
   177cc:	strb	r3, [r6, #2]
   177d0:	adc	r3, r1, #0
   177d4:	strb	r7, [r6, #1]
   177d8:	strd	r2, [sl]
   177dc:	ldr	r5, [lr, #4]
   177e0:	ldr	r4, [pc, #680]	; 17a90 <read_boolean_unary_expression@@Base+0x1388>
   177e4:	adds	r7, r0, #8
   177e8:	adc	r6, r1, #0
   177ec:	ldr	r4, [pc, r4]
   177f0:	subs	r7, r4, r7
   177f4:	sbcs	r7, r5, r6
   177f8:	bcs	174cc <read_boolean_unary_expression@@Base+0xdc4>
   177fc:	mov	r2, #7
   17800:	orr	r2, r2, #131072	; 0x20000
   17804:	adds	r0, r0, r2
   17808:	adc	r1, r1, #0
   1780c:	mvn	r2, #0
   17810:	and	r5, r1, r2
   17814:	mov	r1, #16646144	; 0xfe0000
   17818:	orr	r1, r1, #-16777216	; 0xff000000
   1781c:	and	r6, r0, r1
   17820:	ldr	r4, [pc, #620]	; 17a94 <read_boolean_unary_expression@@Base+0x138c>
   17824:	mov	r0, r8
   17828:	mov	r1, r6
   1782c:	add	r4, pc, r4
   17830:	mov	r7, lr
   17834:	bl	11ec4 <realloc@plt>
   17838:	ldr	ip, [sp, #8]
   1783c:	str	r6, [r7]
   17840:	str	r5, [r7, #4]
   17844:	str	r0, [r4]
   17848:	ldr	r3, [sl, #4]
   1784c:	ldr	r2, [pc, #580]	; 17a98 <read_boolean_unary_expression@@Base+0x1390>
   17850:	mov	r8, r0
   17854:	ldr	r2, [pc, r2]
   17858:	b	174cc <read_boolean_unary_expression@@Base+0xdc4>
   1785c:	mov	r0, #0
   17860:	str	r0, [sp, #4]
   17864:	ldr	sl, [pc, #600]	; 17ac4 <read_boolean_unary_expression@@Base+0x13bc>
   17868:	add	sl, pc, sl
   1786c:	mov	r3, r8
   17870:	ldr	r0, [sp, #8]
   17874:	strb	r5, [r3, r4]!
   17878:	adds	r4, r4, #4
   1787c:	lsr	r6, r5, #24
   17880:	lsr	r1, r5, #16
   17884:	lsr	r2, r5, #8
   17888:	adc	r5, r7, #0
   1788c:	strb	r6, [r3, #3]
   17890:	strb	r1, [r3, #2]
   17894:	strb	r2, [r3, #1]
   17898:	strd	r4, [sl]
   1789c:	bl	11f48 <strlen@plt>
   178a0:	mov	r7, r0
   178a4:	cmp	r9, #0
   178a8:	beq	17948 <read_boolean_unary_expression@@Base+0x1240>
   178ac:	ldr	r6, [pc, #548]	; 17ad8 <read_boolean_unary_expression@@Base+0x13d0>
   178b0:	adds	r0, r4, r7
   178b4:	adc	r1, r5, #0
   178b8:	add	r6, pc, r6
   178bc:	ldr	r2, [r6, #4]
   178c0:	ldr	r3, [pc, #532]	; 17adc <read_boolean_unary_expression@@Base+0x13d4>
   178c4:	ldr	r3, [pc, r3]
   178c8:	subs	r3, r3, r0
   178cc:	sbcs	r2, r2, r1
   178d0:	bcs	17940 <read_boolean_unary_expression@@Base+0x1238>
   178d4:	mov	r2, #7
   178d8:	orr	r2, r2, #131072	; 0x20000
   178dc:	adds	r0, r0, r2
   178e0:	adc	r1, r1, #0
   178e4:	subs	r0, r0, #8
   178e8:	sbc	r1, r1, #0
   178ec:	mvn	r2, #0
   178f0:	and	r5, r1, r2
   178f4:	mov	r1, #16646144	; 0xfe0000
   178f8:	orr	r1, r1, #-16777216	; 0xff000000
   178fc:	and	r4, r0, r1
   17900:	ldr	r9, [pc, #472]	; 17ae0 <read_boolean_unary_expression@@Base+0x13d8>
   17904:	mov	r0, r8
   17908:	mov	r1, r4
   1790c:	add	r9, pc, r9
   17910:	bl	11ec4 <realloc@plt>
   17914:	strd	r4, [r6]
   17918:	str	r0, [r9]
   1791c:	mov	r8, r0
   17920:	ldr	r5, [sl, #4]
   17924:	ldr	r0, [pc, #440]	; 17ae4 <read_boolean_unary_expression@@Base+0x13dc>
   17928:	add	r0, pc, r0
   1792c:	ldrb	r0, [r0]
   17930:	str	r0, [sp, #4]
   17934:	ldr	r4, [pc, #428]	; 17ae8 <read_boolean_unary_expression@@Base+0x13e0>
   17938:	ldr	r4, [pc, r4]
   1793c:	b	17948 <read_boolean_unary_expression@@Base+0x1240>
   17940:	mov	r0, #1
   17944:	str	r0, [sp, #4]
   17948:	ldr	r9, [sp, #8]
   1794c:	add	r0, r8, r4
   17950:	mov	r2, r7
   17954:	mov	r1, r9
   17958:	bl	11e88 <memcpy@plt>
   1795c:	adds	r6, r4, r7
   17960:	mov	r0, r9
   17964:	adc	r5, r5, #0
   17968:	str	r6, [sl]
   1796c:	str	r5, [sl, #4]
   17970:	bl	11f48 <strlen@plt>
   17974:	and	r0, r0, #3
   17978:	rsb	r4, r0, #4
   1797c:	ldr	r0, [sp, #4]
   17980:	cmp	r0, #0
   17984:	beq	17a0c <read_boolean_unary_expression@@Base+0x1304>
   17988:	ldr	r7, [pc, #348]	; 17aec <read_boolean_unary_expression@@Base+0x13e4>
   1798c:	adds	r0, r6, r4
   17990:	adc	r1, r5, #0
   17994:	add	r7, pc, r7
   17998:	ldr	r2, [r7, #4]
   1799c:	ldr	r3, [pc, #332]	; 17af0 <read_boolean_unary_expression@@Base+0x13e8>
   179a0:	ldr	r3, [pc, r3]
   179a4:	subs	r3, r3, r0
   179a8:	sbcs	r2, r2, r1
   179ac:	bcs	17a0c <read_boolean_unary_expression@@Base+0x1304>
   179b0:	mov	r2, #7
   179b4:	orr	r2, r2, #131072	; 0x20000
   179b8:	adds	r0, r0, r2
   179bc:	adc	r1, r1, #0
   179c0:	subs	r0, r0, #8
   179c4:	sbc	r1, r1, #0
   179c8:	mvn	r2, #0
   179cc:	and	r5, r1, r2
   179d0:	mov	r1, #16646144	; 0xfe0000
   179d4:	orr	r1, r1, #-16777216	; 0xff000000
   179d8:	and	r6, r0, r1
   179dc:	ldr	r9, [pc, #272]	; 17af4 <read_boolean_unary_expression@@Base+0x13ec>
   179e0:	mov	r0, r8
   179e4:	mov	r1, r6
   179e8:	add	r9, pc, r9
   179ec:	bl	11ec4 <realloc@plt>
   179f0:	str	r6, [r7]
   179f4:	str	r5, [r7, #4]
   179f8:	str	r0, [r9]
   179fc:	ldr	r5, [sl, #4]
   17a00:	ldr	r6, [pc, #240]	; 17af8 <read_boolean_unary_expression@@Base+0x13f0>
   17a04:	mov	r8, r0
   17a08:	ldr	r6, [pc, r6]
   17a0c:	add	r0, r8, r6
   17a10:	mov	r1, #0
   17a14:	mov	r2, r4
   17a18:	bl	11f90 <memset@plt>
   17a1c:	adds	r0, r6, r4
   17a20:	adc	r1, r5, #0
   17a24:	strd	r0, [sl]
   17a28:	sub	sp, fp, #28
   17a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17a30:	andeq	r5, r1, r0, asr fp
   17a34:	andeq	r5, r1, r4, lsr fp
   17a38:	andeq	r5, r1, r0, lsr fp
   17a3c:	andeq	r5, r1, r4, lsr #22
   17a40:	andeq	r5, r1, r0, lsr #22
   17a44:	andeq	r5, r1, r4, lsl #22
   17a48:			; <UNDEFINED> instruction: 0x00015ab8
   17a4c:			; <UNDEFINED> instruction: 0x00015ab4
   17a50:	andeq	r5, r1, r0, lsr #21
   17a54:	muleq	r1, r8, sl
   17a58:	andeq	r5, r1, r0, lsl #21
   17a5c:	andeq	r5, r1, r8, lsr sl
   17a60:	andeq	r5, r1, r0, lsr r9
   17a64:	andeq	r5, r1, r8, lsr #20
   17a68:	andeq	r5, r1, ip, lsl sl
   17a6c:	andeq	r5, r1, r4, ror #13
   17a70:	ldrdeq	r5, [r1], -r8
   17a74:	andeq	r5, r1, r8, lsr #19
   17a78:	andeq	r5, r1, ip, lsr #19
   17a7c:	muleq	r1, r8, r9
   17a80:	andeq	r5, r1, r0, asr #13
   17a84:	andeq	r5, r1, ip, ror r6
   17a88:	andeq	r5, r1, r8, asr #12
   17a8c:	andeq	r5, r1, r8, asr #12
   17a90:	ldrdeq	r5, [r1], -r4
   17a94:	muleq	r1, r0, r5
   17a98:	andeq	r5, r1, r4, ror r5
   17a9c:	andeq	r5, r1, r4, lsr #17
   17aa0:	muleq	r1, r4, r8
   17aa4:	andeq	r5, r1, r8, lsl #17
   17aa8:	andeq	r5, r1, r4, asr #16
   17aac:	andeq	r5, r1, r0, lsr r8
   17ab0:	andeq	r5, r1, r4, lsr #16
   17ab4:	strdeq	r5, [r1], -r4
   17ab8:			; <UNDEFINED> instruction: 0x000157bc
   17abc:	andeq	r5, r1, ip, lsr #15
   17ac0:	andeq	r5, r1, r0, lsr #15
   17ac4:	andeq	r5, r1, r0, ror #10
   17ac8:	andeq	r5, r1, ip, asr #14
   17acc:	andeq	r5, r1, r0, asr #14
   17ad0:	andeq	r5, r1, r0, lsr #14
   17ad4:	andeq	r5, r1, r8, lsr #14
   17ad8:	andeq	r5, r1, r8, lsl #10
   17adc:	strdeq	r5, [r1], -ip
   17ae0:			; <UNDEFINED> instruction: 0x000154b0
   17ae4:	andeq	r5, r1, ip, lsl #9
   17ae8:	muleq	r1, r0, r4
   17aec:	andeq	r5, r1, ip, lsr #8
   17af0:	andeq	r5, r1, r0, lsr #8
   17af4:	ldrdeq	r5, [r1], -r4
   17af8:	andeq	r5, r1, r0, asr #7
   17afc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b00:	add	fp, sp, #28
   17b04:	sub	sp, sp, #28
   17b08:	mov	ip, r0
   17b0c:	ldr	r0, [pc, #1728]	; 181d4 <read_boolean_unary_expression@@Base+0x1acc>
   17b10:	ldr	r0, [pc, r0]
   17b14:	cmp	r0, #0
   17b18:	beq	17c34 <read_boolean_unary_expression@@Base+0x152c>
   17b1c:	ldr	r2, [pc, #1716]	; 181d8 <read_boolean_unary_expression@@Base+0x1ad0>
   17b20:	mov	sl, r1
   17b24:	add	r2, pc, r2
   17b28:	ldr	r3, [r2, #4]
   17b2c:	ldr	r4, [pc, #1704]	; 181dc <read_boolean_unary_expression@@Base+0x1ad4>
   17b30:	ldr	r4, [pc, r4]
   17b34:	ldr	r6, [pc, #1700]	; 181e0 <read_boolean_unary_expression@@Base+0x1ad8>
   17b38:	add	r6, pc, r6
   17b3c:	ldrb	r0, [r6]
   17b40:	cmp	r0, #0
   17b44:	beq	17c3c <read_boolean_unary_expression@@Base+0x1534>
   17b48:	ldr	r8, [pc, #1720]	; 18208 <read_boolean_unary_expression@@Base+0x1b00>
   17b4c:	mov	r5, #10551296	; 0xa10000
   17b50:	adds	r9, r4, #4
   17b54:	add	r8, pc, r8
   17b58:	adc	r2, r3, #0
   17b5c:	ldr	r0, [r8, #4]
   17b60:	ldr	r1, [pc, #1700]	; 1820c <read_boolean_unary_expression@@Base+0x1b04>
   17b64:	orr	r5, r5, #16777216	; 0x1000000
   17b68:	ldr	r1, [pc, r1]
   17b6c:	subs	r1, r1, r9
   17b70:	sbcs	r0, r0, r2
   17b74:	bcs	17d4c <read_boolean_unary_expression@@Base+0x1644>
   17b78:	mov	r0, #3
   17b7c:	orr	r0, r0, #131072	; 0x20000
   17b80:	adds	r0, r4, r0
   17b84:	adc	r1, r3, #0
   17b88:	mvn	r2, #0
   17b8c:	and	r9, r1, r2
   17b90:	mov	r1, #16646144	; 0xfe0000
   17b94:	orr	r1, r1, #-16777216	; 0xff000000
   17b98:	and	r4, r0, r1
   17b9c:	ldr	r0, [pc, #1652]	; 18218 <read_boolean_unary_expression@@Base+0x1b10>
   17ba0:	mov	r1, r4
   17ba4:	mov	r7, ip
   17ba8:	ldr	r0, [pc, r0]
   17bac:	bl	11ec4 <realloc@plt>
   17bb0:	ldr	ip, [pc, #1636]	; 1821c <read_boolean_unary_expression@@Base+0x1b14>
   17bb4:	ldr	lr, [pc, #1636]	; 18220 <read_boolean_unary_expression@@Base+0x1b18>
   17bb8:	stm	r8, {r4, r9}
   17bbc:	ldr	r1, [pc, #1632]	; 18224 <read_boolean_unary_expression@@Base+0x1b1c>
   17bc0:	add	ip, pc, ip
   17bc4:	add	lr, pc, lr
   17bc8:	add	r1, pc, r1
   17bcc:	mov	r2, r0
   17bd0:	str	r2, [r1]
   17bd4:	mov	r6, ip
   17bd8:	ldrb	ip, [ip]
   17bdc:	ldr	r3, [lr, #4]
   17be0:	ldr	r4, [pc, #1600]	; 18228 <read_boolean_unary_expression@@Base+0x1b20>
   17be4:	lsr	r0, r5, #24
   17be8:	mov	r1, r8
   17bec:	ldr	r4, [pc, r4]
   17bf0:	str	r2, [sp, #20]
   17bf4:	lsl	r8, r7, #1
   17bf8:	strb	r5, [r2, r4]!
   17bfc:	adds	r9, r4, #4
   17c00:	strb	r0, [r2, #3]
   17c04:	lsr	r0, r5, #16
   17c08:	strb	r0, [r2, #2]
   17c0c:	lsr	r0, r5, #8
   17c10:	strb	r0, [r2, #1]
   17c14:	adc	r5, r3, #0
   17c18:	mov	r0, #0
   17c1c:	cmp	ip, #1
   17c20:	str	r3, [sp, #16]
   17c24:	str	r9, [lr]
   17c28:	str	r5, [lr, #4]
   17c2c:	beq	17da0 <read_boolean_unary_expression@@Base+0x1698>
   17c30:	b	17ef0 <read_boolean_unary_expression@@Base+0x17e8>
   17c34:	sub	sp, fp, #28
   17c38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c3c:	ldr	r0, [pc, #1440]	; 181e4 <read_boolean_unary_expression@@Base+0x1adc>
   17c40:	mov	r7, r3
   17c44:	adds	r9, r4, #4
   17c48:	mov	lr, r2
   17c4c:	ldr	r0, [pc, r0]
   17c50:	str	r0, [sp, #20]
   17c54:	ldrb	r1, [r0, r4]!
   17c58:	str	r7, [sp, #16]
   17c5c:	ldrb	r5, [r0, #1]
   17c60:	ldrb	r3, [r0, #2]
   17c64:	ldrb	r0, [r0, #3]
   17c68:	orr	r1, r1, r5, lsl #8
   17c6c:	orr	r1, r1, r3, lsl #16
   17c70:	orr	r3, r1, r0, lsl #24
   17c74:	adc	r5, r7, #0
   17c78:	mov	r7, #0
   17c7c:	cmn	r3, #1
   17c80:	str	r9, [r2]
   17c84:	str	r5, [r2, #4]
   17c88:	beq	17e4c <read_boolean_unary_expression@@Base+0x1744>
   17c8c:	mov	r0, #10551296	; 0xa10000
   17c90:	orr	r0, r0, #16777216	; 0x1000000
   17c94:	cmp	r3, r0
   17c98:	bne	17e58 <read_boolean_unary_expression@@Base+0x1750>
   17c9c:	str	r5, [sp, #8]
   17ca0:	ldr	r0, [sp, #20]
   17ca4:	str	r4, [sp, #4]
   17ca8:	adds	r5, r4, #8
   17cac:	ldr	r3, [r0, r9]
   17cb0:	ldr	r0, [sp, #16]
   17cb4:	mov	r1, r9
   17cb8:	adc	r9, r0, #0
   17cbc:	cmn	r3, #1
   17cc0:	stm	lr, {r5, r9}
   17cc4:	beq	17e64 <read_boolean_unary_expression@@Base+0x175c>
   17cc8:	lsr	r0, r3, #1
   17ccc:	mov	r7, ip
   17cd0:	cmp	r0, ip
   17cd4:	bne	17e64 <read_boolean_unary_expression@@Base+0x175c>
   17cd8:	lsl	r0, r7, #3
   17cdc:	mov	r4, r1
   17ce0:	bl	11f00 <malloc@plt>
   17ce4:	mov	r1, r0
   17ce8:	cmp	r7, #0
   17cec:	beq	17e8c <read_boolean_unary_expression@@Base+0x1784>
   17cf0:	mov	r0, r7
   17cf4:	str	r7, [sp, #24]
   17cf8:	str	r1, [sp, #12]
   17cfc:	ldr	r2, [sp, #20]
   17d00:	ldr	r3, [r2, r5]!
   17d04:	adds	r5, r5, #8
   17d08:	ldr	r2, [r2, #4]
   17d0c:	str	r3, [r1]
   17d10:	adc	r9, r9, #0
   17d14:	str	r2, [r1, #4]
   17d18:	subs	r0, r0, #1
   17d1c:	add	r1, r1, #8
   17d20:	bne	17cfc <read_boolean_unary_expression@@Base+0x15f4>
   17d24:	ldr	lr, [pc, #1236]	; 18200 <read_boolean_unary_expression@@Base+0x1af8>
   17d28:	add	lr, pc, lr
   17d2c:	mov	r0, lr
   17d30:	stm	r0, {r5, r9}
   17d34:	ldr	ip, [pc, #1224]	; 18204 <read_boolean_unary_expression@@Base+0x1afc>
   17d38:	ldr	r0, [sp, #12]
   17d3c:	add	ip, pc, ip
   17d40:	mov	r6, ip
   17d44:	ldr	ip, [sp, #24]
   17d48:	b	17ea8 <read_boolean_unary_expression@@Base+0x17a0>
   17d4c:	str	r3, [sp, #16]
   17d50:	ldr	r3, [pc, #1208]	; 18210 <read_boolean_unary_expression@@Base+0x1b08>
   17d54:	mov	lr, r5
   17d58:	mov	r7, ip
   17d5c:	lsr	ip, r5, #16
   17d60:	ldr	r3, [pc, r3]
   17d64:	lsr	r1, r5, #8
   17d68:	str	r3, [sp, #20]
   17d6c:	strb	lr, [r3, r4]!
   17d70:	lsr	r0, lr, #24
   17d74:	strb	r1, [r3, #1]
   17d78:	strb	r0, [r3, #3]
   17d7c:	strb	ip, [r3, #2]
   17d80:	ldr	lr, [pc, #1164]	; 18214 <read_boolean_unary_expression@@Base+0x1b0c>
   17d84:	lsl	r5, r7, #1
   17d88:	add	lr, pc, lr
   17d8c:	mov	r1, r8
   17d90:	mov	r8, r5
   17d94:	str	r9, [lr]
   17d98:	str	r2, [lr, #4]
   17d9c:	mov	r5, r2
   17da0:	str	r8, [sp, #24]
   17da4:	mov	r8, r1
   17da8:	ldr	r0, [sp, #16]
   17dac:	ldr	r2, [r8, #4]
   17db0:	ldr	r3, [pc, #1140]	; 1822c <read_boolean_unary_expression@@Base+0x1b24>
   17db4:	adds	ip, r4, #8
   17db8:	adc	r1, r0, #0
   17dbc:	mov	r0, #0
   17dc0:	ldr	r3, [pc, r3]
   17dc4:	subs	r3, r3, ip
   17dc8:	sbcs	r1, r2, r1
   17dcc:	bcs	17e44 <read_boolean_unary_expression@@Base+0x173c>
   17dd0:	ldr	r5, [pc, #1112]	; 18230 <read_boolean_unary_expression@@Base+0x1b28>
   17dd4:	mov	r0, #3
   17dd8:	ldr	r1, [sp, #16]
   17ddc:	orr	r0, r0, #131072	; 0x20000
   17de0:	adds	r0, r4, r0
   17de4:	adc	r1, r1, #0
   17de8:	adds	r0, r0, #4
   17dec:	adc	r1, r1, #0
   17df0:	mvn	r2, #0
   17df4:	and	r9, r1, r2
   17df8:	mov	r1, #16646144	; 0xfe0000
   17dfc:	orr	r1, r1, #-16777216	; 0xff000000
   17e00:	and	r4, r0, r1
   17e04:	ldr	r0, [sp, #20]
   17e08:	mov	r1, r4
   17e0c:	add	r5, pc, r5
   17e10:	bl	11ec4 <realloc@plt>
   17e14:	ldr	ip, [pc, #1048]	; 18234 <read_boolean_unary_expression@@Base+0x1b2c>
   17e18:	ldr	lr, [pc, #1048]	; 18238 <read_boolean_unary_expression@@Base+0x1b30>
   17e1c:	stm	r8, {r4, r9}
   17e20:	add	lr, pc, lr
   17e24:	str	r0, [r5]
   17e28:	str	r0, [sp, #20]
   17e2c:	ldr	r5, [lr, #4]
   17e30:	ldr	r9, [pc, #1028]	; 1823c <read_boolean_unary_expression@@Base+0x1b34>
   17e34:	add	ip, pc, ip
   17e38:	mov	r6, ip
   17e3c:	mov	r0, #0
   17e40:	ldr	r9, [pc, r9]
   17e44:	ldr	r8, [sp, #24]
   17e48:	b	17ef0 <read_boolean_unary_expression@@Base+0x17e8>
   17e4c:	ldr	r1, [sp, #16]
   17e50:	mov	r0, #0
   17e54:	b	17ebc <read_boolean_unary_expression@@Base+0x17b4>
   17e58:	ldr	r1, [pc, #904]	; 181e8 <read_boolean_unary_expression@@Base+0x1ae0>
   17e5c:	add	r1, pc, r1
   17e60:	b	17e6c <read_boolean_unary_expression@@Base+0x1764>
   17e64:	ldr	r1, [pc, #904]	; 181f4 <read_boolean_unary_expression@@Base+0x1aec>
   17e68:	add	r1, pc, r1
   17e6c:	ldr	r0, [pc, #888]	; 181ec <read_boolean_unary_expression@@Base+0x1ae4>
   17e70:	ldr	r0, [pc, r0]
   17e74:	ldr	r0, [r0]
   17e78:	ldr	r2, [pc, #880]	; 181f0 <read_boolean_unary_expression@@Base+0x1ae8>
   17e7c:	ldr	r2, [pc, r2]
   17e80:	sub	sp, fp, #28
   17e84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e88:	b	11f60 <fprintf@plt>
   17e8c:	ldr	lr, [pc, #868]	; 181f8 <read_boolean_unary_expression@@Base+0x1af0>
   17e90:	ldr	ip, [pc, #868]	; 181fc <read_boolean_unary_expression@@Base+0x1af4>
   17e94:	mov	r0, r1
   17e98:	add	lr, pc, lr
   17e9c:	add	ip, pc, ip
   17ea0:	mov	r6, ip
   17ea4:	mov	ip, r7
   17ea8:	mov	r9, r4
   17eac:	ldr	r5, [sp, #8]
   17eb0:	ldr	r4, [sp, #4]
   17eb4:	ldr	r1, [sp, #16]
   17eb8:	mov	r7, #0
   17ebc:	str	r4, [lr]
   17ec0:	str	r1, [lr, #4]
   17ec4:	ldr	r2, [sp, #20]
   17ec8:	mov	r1, #1
   17ecc:	lsl	r8, ip, #1
   17ed0:	strb	r7, [r2, r4]!
   17ed4:	strb	r1, [r2, #3]
   17ed8:	mov	r1, #161	; 0xa1
   17edc:	strb	r7, [r2, #1]
   17ee0:	strb	r1, [r2, #2]
   17ee4:	str	r9, [lr]
   17ee8:	str	r5, [lr, #4]
   17eec:	mov	r7, ip
   17ef0:	ldr	r3, [sp, #20]
   17ef4:	lsr	r1, r8, #16
   17ef8:	mov	ip, r3
   17efc:	strb	r8, [r3, r9]!
   17f00:	lsr	r4, r8, #24
   17f04:	lsr	r2, r8, #8
   17f08:	adds	r8, r9, #4
   17f0c:	strb	r1, [r3, #2]
   17f10:	adc	r1, r5, #0
   17f14:	cmp	r7, #0
   17f18:	strb	r4, [r3, #3]
   17f1c:	strb	r2, [r3, #1]
   17f20:	str	r8, [lr]
   17f24:	str	r1, [lr, #4]
   17f28:	str	r7, [sp, #24]
   17f2c:	beq	181c8 <read_boolean_unary_expression@@Base+0x1ac0>
   17f30:	ldr	r7, [pc, #776]	; 18240 <read_boolean_unary_expression@@Base+0x1b38>
   17f34:	mov	r4, lr
   17f38:	mov	r2, r0
   17f3c:	add	r7, pc, r7
   17f40:	str	r0, [sp, #12]
   17f44:	cmp	r0, #0
   17f48:	mov	r0, r4
   17f4c:	str	r2, [sp, #16]
   17f50:	beq	17f5c <read_boolean_unary_expression@@Base+0x1854>
   17f54:	ldrd	r2, [r2]
   17f58:	b	17f64 <read_boolean_unary_expression@@Base+0x185c>
   17f5c:	mov	r2, #0
   17f60:	mov	r3, #0
   17f64:	ldrd	r4, [sl]
   17f68:	adds	r4, r4, r2
   17f6c:	adc	r5, r5, r3
   17f70:	strd	r4, [sl]
   17f74:	ldrb	r2, [r6]
   17f78:	str	sl, [sp, #20]
   17f7c:	cmp	r2, #0
   17f80:	beq	1804c <read_boolean_unary_expression@@Base+0x1944>
   17f84:	ldr	r3, [r7, #4]
   17f88:	ldr	r6, [pc, #692]	; 18244 <read_boolean_unary_expression@@Base+0x1b3c>
   17f8c:	adds	r2, r8, #4
   17f90:	adc	r9, r1, #0
   17f94:	ldr	r6, [pc, r6]
   17f98:	subs	r2, r6, r2
   17f9c:	sbcs	r2, r3, r9
   17fa0:	bcs	18088 <read_boolean_unary_expression@@Base+0x1980>
   17fa4:	mov	r2, #3
   17fa8:	orr	r2, r2, #131072	; 0x20000
   17fac:	adds	r0, r8, r2
   17fb0:	adc	r1, r1, #0
   17fb4:	mvn	r2, #0
   17fb8:	and	r8, r1, r2
   17fbc:	mov	r1, #16646144	; 0xfe0000
   17fc0:	orr	r1, r1, #-16777216	; 0xff000000
   17fc4:	and	r6, r0, r1
   17fc8:	mov	r0, ip
   17fcc:	mov	r1, r6
   17fd0:	bl	11ec4 <realloc@plt>
   17fd4:	ldr	ip, [pc, #620]	; 18248 <read_boolean_unary_expression@@Base+0x1b40>
   17fd8:	ldr	lr, [pc, #620]	; 1824c <read_boolean_unary_expression@@Base+0x1b44>
   17fdc:	stm	r7, {r6, r8}
   17fe0:	mov	r3, r0
   17fe4:	ldr	r0, [pc, #612]	; 18250 <read_boolean_unary_expression@@Base+0x1b48>
   17fe8:	add	lr, pc, lr
   17fec:	mov	r9, lr
   17ff0:	add	r0, pc, r0
   17ff4:	add	ip, pc, ip
   17ff8:	str	r3, [r0]
   17ffc:	mov	lr, ip
   18000:	ldrb	ip, [ip]
   18004:	ldr	r1, [r9, #4]
   18008:	ldr	r8, [pc, #580]	; 18254 <read_boolean_unary_expression@@Base+0x1b4c>
   1800c:	mov	r7, r3
   18010:	lsr	r2, r4, #24
   18014:	ldr	r8, [pc, r8]
   18018:	lsr	r6, r4, #16
   1801c:	strb	r4, [r7, r8]!
   18020:	strb	r2, [r7, #3]
   18024:	lsr	r2, r4, #8
   18028:	strb	r2, [r7, #1]
   1802c:	adds	r2, r8, #4
   18030:	mov	r4, r9
   18034:	adc	r9, r1, #0
   18038:	cmp	ip, #1
   1803c:	strb	r6, [r7, #2]
   18040:	stm	r4, {r2, r9}
   18044:	beq	180bc <read_boolean_unary_expression@@Base+0x19b4>
   18048:	b	18168 <read_boolean_unary_expression@@Base+0x1a60>
   1804c:	mov	r7, ip
   18050:	lsr	r2, r4, #24
   18054:	strb	r4, [r7, r8]!
   18058:	lsr	r9, r4, #16
   1805c:	strb	r2, [r7, #3]
   18060:	adds	r2, r8, #4
   18064:	mov	lr, r6
   18068:	lsr	r6, r4, #8
   1806c:	strb	r9, [r7, #2]
   18070:	adc	r9, r1, #0
   18074:	mov	r4, r0
   18078:	strb	r6, [r7, #1]
   1807c:	mov	r3, ip
   18080:	stm	r4, {r2, r9}
   18084:	b	18168 <read_boolean_unary_expression@@Base+0x1a60>
   18088:	mov	r6, ip
   1808c:	lsr	r2, r4, #24
   18090:	strb	r4, [r6, r8]!
   18094:	lsr	r9, r4, #16
   18098:	strb	r2, [r6, #3]
   1809c:	adds	r2, r8, #4
   180a0:	lsr	r7, r4, #8
   180a4:	strb	r9, [r6, #2]
   180a8:	adc	r9, r1, #0
   180ac:	mov	r4, r0
   180b0:	strb	r7, [r6, #1]
   180b4:	mov	r3, ip
   180b8:	stm	r4, {r2, r9}
   180bc:	ldr	lr, [pc, #404]	; 18258 <read_boolean_unary_expression@@Base+0x1b50>
   180c0:	mov	r0, r4
   180c4:	adds	r7, r8, #8
   180c8:	add	lr, pc, lr
   180cc:	adc	ip, r1, #0
   180d0:	ldr	r4, [lr, #4]
   180d4:	ldr	r6, [pc, #384]	; 1825c <read_boolean_unary_expression@@Base+0x1b54>
   180d8:	ldr	r6, [pc, r6]
   180dc:	subs	r7, r6, r7
   180e0:	sbcs	r7, r4, ip
   180e4:	bcs	1815c <read_boolean_unary_expression@@Base+0x1a54>
   180e8:	mov	r2, #3
   180ec:	orr	r2, r2, #131072	; 0x20000
   180f0:	adds	r0, r8, r2
   180f4:	adc	r1, r1, #0
   180f8:	adds	r0, r0, #4
   180fc:	adc	r1, r1, #0
   18100:	mvn	r2, #0
   18104:	and	r7, r1, r2
   18108:	mov	r1, #16646144	; 0xfe0000
   1810c:	orr	r1, r1, #-16777216	; 0xff000000
   18110:	and	r6, r0, r1
   18114:	mov	r0, r3
   18118:	mov	r1, r6
   1811c:	mov	r8, lr
   18120:	bl	11ec4 <realloc@plt>
   18124:	ldr	lr, [pc, #312]	; 18264 <read_boolean_unary_expression@@Base+0x1b5c>
   18128:	strd	r6, [r8]
   1812c:	mov	r3, r0
   18130:	add	lr, pc, lr
   18134:	mov	r4, lr
   18138:	ldr	r9, [lr, #4]
   1813c:	ldr	r0, [pc, #292]	; 18268 <read_boolean_unary_expression@@Base+0x1b60>
   18140:	add	r0, pc, r0
   18144:	str	r3, [r0]
   18148:	ldr	r2, [pc, #284]	; 1826c <read_boolean_unary_expression@@Base+0x1b64>
   1814c:	ldr	r2, [pc, r2]
   18150:	ldr	lr, [pc, #280]	; 18270 <read_boolean_unary_expression@@Base+0x1b68>
   18154:	add	lr, pc, lr
   18158:	b	18168 <read_boolean_unary_expression@@Base+0x1a60>
   1815c:	ldr	lr, [pc, #252]	; 18260 <read_boolean_unary_expression@@Base+0x1b58>
   18160:	mov	r4, r0
   18164:	add	lr, pc, lr
   18168:	mov	ip, r3
   1816c:	lsr	r1, r5, #16
   18170:	strb	r5, [r3, r2]!
   18174:	lsr	r0, r5, #24
   18178:	lsr	r7, r5, #8
   1817c:	adds	r8, r2, #4
   18180:	strb	r1, [r3, #2]
   18184:	adc	r1, r9, #0
   18188:	strb	r0, [r3, #3]
   1818c:	strb	r7, [r3, #1]
   18190:	str	r8, [r4]
   18194:	str	r1, [r4, #4]
   18198:	ldr	r0, [sp, #24]
   1819c:	mov	r6, lr
   181a0:	subs	r0, r0, #1
   181a4:	str	r0, [sp, #24]
   181a8:	ldr	sl, [sp, #20]
   181ac:	ldr	r2, [sp, #16]
   181b0:	ldr	r0, [sp, #12]
   181b4:	ldr	r7, [pc, #184]	; 18274 <read_boolean_unary_expression@@Base+0x1b6c>
   181b8:	add	sl, sl, #8
   181bc:	add	r2, r2, #8
   181c0:	add	r7, pc, r7
   181c4:	bne	17f44 <read_boolean_unary_expression@@Base+0x183c>
   181c8:	sub	sp, fp, #28
   181cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   181d0:	b	11e7c <free@plt>
   181d4:	andeq	r5, r1, r8, lsr #5
   181d8:	andeq	r5, r1, r4, lsr #5
   181dc:	muleq	r1, r8, r2
   181e0:	andeq	r5, r1, ip, ror r2
   181e4:	andeq	r5, r1, r0, ror r1
   181e8:	muleq	r0, r4, r3
   181ec:	andeq	r4, r1, r4, asr #4
   181f0:	andeq	r4, r1, r4, lsr pc
   181f4:	ldrdeq	r3, [r0], -r2
   181f8:	andeq	r4, r1, r0, lsr pc
   181fc:	andeq	r4, r1, r8, lsl pc
   18200:	andeq	r5, r1, r0, lsr #1
   18204:	andeq	r5, r1, r8, ror r0
   18208:	andeq	r5, r1, ip, ror #4
   1820c:	andeq	r5, r1, r8, asr r2
   18210:	andeq	r5, r1, ip, asr r0
   18214:	andeq	r5, r1, r0, asr #32
   18218:	andeq	r5, r1, r4, lsl r2
   1821c:	strdeq	r5, [r1], -r4
   18220:	andeq	r5, r1, r4, lsl #4
   18224:	strdeq	r5, [r1], -r4
   18228:	ldrdeq	r5, [r1], -ip
   1822c:	andeq	r5, r1, r0
   18230:			; <UNDEFINED> instruction: 0x00014fb0
   18234:	andeq	r4, r1, r0, lsl #31
   18238:	andeq	r4, r1, r8, lsr #31
   1823c:	andeq	r4, r1, r8, lsl #31
   18240:	andeq	r4, r1, r4, lsl #29
   18244:	andeq	r4, r1, ip, lsr #28
   18248:	andeq	r4, r1, r0, asr #27
   1824c:	andeq	r4, r1, r0, ror #27
   18250:	andeq	r4, r1, ip, asr #27
   18254:			; <UNDEFINED> instruction: 0x00014db4
   18258:	strdeq	r4, [r1], -r8
   1825c:	andeq	r4, r1, r8, ror #25
   18260:	andeq	r4, r1, r0, asr ip
   18264:	muleq	r1, r8, ip
   18268:	andeq	r4, r1, ip, ror ip
   1826c:	andeq	r4, r1, ip, ror ip
   18270:	andeq	r4, r1, r0, ror #24
   18274:	andeq	r4, r1, r0, lsl #24
   18278:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1827c:	add	fp, sp, #28
   18280:	sub	sp, sp, #4
   18284:	ldr	r0, [pc, #3180]	; 18ef8 <read_boolean_unary_expression@@Base+0x27f0>
   18288:	ldr	r0, [pc, r0]
   1828c:	cmp	r0, #0
   18290:	beq	188ec <read_boolean_unary_expression@@Base+0x21e4>
   18294:	ldr	sl, [pc, #3168]	; 18efc <read_boolean_unary_expression@@Base+0x27f4>
   18298:	add	sl, pc, sl
   1829c:	ldr	r6, [sl, #4]
   182a0:	ldr	r5, [pc, #3160]	; 18f00 <read_boolean_unary_expression@@Base+0x27f8>
   182a4:	ldr	r5, [pc, r5]
   182a8:	ldr	r8, [pc, #3156]	; 18f04 <read_boolean_unary_expression@@Base+0x27fc>
   182ac:	add	r8, pc, r8
   182b0:	ldrb	r0, [r8]
   182b4:	cmp	r0, #0
   182b8:	beq	1837c <read_boolean_unary_expression@@Base+0x1c74>
   182bc:	ldr	r9, [pc, #3164]	; 18f20 <read_boolean_unary_expression@@Base+0x2818>
   182c0:	adds	r2, r5, #4
   182c4:	adc	ip, r6, #0
   182c8:	add	r9, pc, r9
   182cc:	ldr	r0, [r9, #4]
   182d0:	ldr	r3, [pc, #3148]	; 18f24 <read_boolean_unary_expression@@Base+0x281c>
   182d4:	ldr	r3, [pc, r3]
   182d8:	subs	r3, r3, r2
   182dc:	sbcs	r0, r0, ip
   182e0:	bcs	183d0 <read_boolean_unary_expression@@Base+0x1cc8>
   182e4:	mov	r0, #7
   182e8:	orr	r0, r0, #131072	; 0x20000
   182ec:	adds	r0, r5, r0
   182f0:	adc	r1, r6, #0
   182f4:	subs	r0, r0, #4
   182f8:	sbc	r1, r1, #0
   182fc:	mvn	r2, #0
   18300:	and	r5, r1, r2
   18304:	mov	r1, #16646144	; 0xfe0000
   18308:	orr	r1, r1, #-16777216	; 0xff000000
   1830c:	ldr	r4, [pc, #3096]	; 18f2c <read_boolean_unary_expression@@Base+0x2824>
   18310:	and	r6, r0, r1
   18314:	ldr	r0, [pc, #3092]	; 18f30 <read_boolean_unary_expression@@Base+0x2828>
   18318:	mov	r1, r6
   1831c:	add	r4, pc, r4
   18320:	ldr	r0, [pc, r0]
   18324:	bl	11ec4 <realloc@plt>
   18328:	str	r6, [r9]
   1832c:	str	r5, [r9, #4]
   18330:	str	r0, [r4]
   18334:	ldrb	r3, [r8]
   18338:	ldr	r6, [sl, #4]
   1833c:	ldr	r5, [pc, #3056]	; 18f34 <read_boolean_unary_expression@@Base+0x282c>
   18340:	mov	r2, r0
   18344:	mov	r1, #0
   18348:	mov	r7, #161	; 0xa1
   1834c:	ldr	r5, [pc, r5]
   18350:	strb	r1, [r2, r5]!
   18354:	strb	r7, [r2, #3]
   18358:	strb	r1, [r2, #2]
   1835c:	strb	r1, [r2, #1]
   18360:	adds	r2, r5, #4
   18364:	adc	ip, r6, #0
   18368:	mov	r7, #1
   1836c:	cmp	r3, #1
   18370:	stm	sl, {r2, ip}
   18374:	beq	183f8 <read_boolean_unary_expression@@Base+0x1cf0>
   18378:	b	185d0 <read_boolean_unary_expression@@Base+0x1ec8>
   1837c:	ldr	r0, [pc, #2948]	; 18f08 <read_boolean_unary_expression@@Base+0x2800>
   18380:	ldr	r0, [pc, r0]
   18384:	mov	r1, r0
   18388:	ldrb	r2, [r1, r5]!
   1838c:	ldrb	r3, [r1, #1]
   18390:	ldrb	r7, [r1, #2]
   18394:	ldrb	r1, [r1, #3]
   18398:	orr	r2, r2, r3, lsl #8
   1839c:	orr	r2, r2, r7, lsl #16
   183a0:	orr	r3, r2, r1, lsl #24
   183a4:	adds	r2, r5, #4
   183a8:	adc	ip, r6, #0
   183ac:	cmp	r3, #-1593835520	; 0xa1000000
   183b0:	stm	sl, {r2, ip}
   183b4:	beq	18570 <read_boolean_unary_expression@@Base+0x1e68>
   183b8:	mov	r7, #1
   183bc:	cmn	r3, #1
   183c0:	beq	185b0 <read_boolean_unary_expression@@Base+0x1ea8>
   183c4:	ldr	r1, [pc, #2880]	; 18f0c <read_boolean_unary_expression@@Base+0x2804>
   183c8:	add	r1, pc, r1
   183cc:	b	18cb0 <read_boolean_unary_expression@@Base+0x25a8>
   183d0:	ldr	r0, [pc, #2896]	; 18f28 <read_boolean_unary_expression@@Base+0x2820>
   183d4:	mov	r3, #0
   183d8:	mov	r4, #161	; 0xa1
   183dc:	ldr	r0, [pc, r0]
   183e0:	mov	r7, r0
   183e4:	strb	r3, [r7, r5]!
   183e8:	strb	r4, [r7, #3]
   183ec:	strb	r3, [r7, #2]
   183f0:	strb	r3, [r7, #1]
   183f4:	stm	sl, {r2, ip}
   183f8:	ldr	r4, [r9, #4]
   183fc:	ldr	r1, [pc, #2868]	; 18f38 <read_boolean_unary_expression@@Base+0x2830>
   18400:	adds	r3, r5, #8
   18404:	adc	r7, r6, #0
   18408:	ldr	r1, [pc, r1]
   1840c:	subs	r1, r1, r3
   18410:	sbcs	r1, r4, r7
   18414:	bcs	184a0 <read_boolean_unary_expression@@Base+0x1d98>
   18418:	mov	r1, #7
   1841c:	orr	r1, r1, #131072	; 0x20000
   18420:	adds	r1, r5, r1
   18424:	adc	r2, r6, #0
   18428:	mvn	r3, #0
   1842c:	and	r5, r2, r3
   18430:	mov	r2, #16646144	; 0xfe0000
   18434:	orr	r2, r2, #-16777216	; 0xff000000
   18438:	ldr	r4, [pc, #2812]	; 18f3c <read_boolean_unary_expression@@Base+0x2834>
   1843c:	and	r6, r1, r2
   18440:	mov	r1, r6
   18444:	add	r4, pc, r4
   18448:	bl	11ec4 <realloc@plt>
   1844c:	str	r6, [r9]
   18450:	str	r5, [r9, #4]
   18454:	str	r0, [r4]
   18458:	ldrb	r1, [r8]
   1845c:	ldr	ip, [sl, #4]
   18460:	ldr	r2, [pc, #2776]	; 18f40 <read_boolean_unary_expression@@Base+0x2838>
   18464:	mov	r7, r0
   18468:	mov	r3, #9
   1846c:	ldr	r2, [pc, r2]
   18470:	strb	r3, [r7, r2]!
   18474:	mov	r3, #0
   18478:	strb	r3, [r7, #3]
   1847c:	strb	r3, [r7, #2]
   18480:	strb	r3, [r7, #1]
   18484:	adds	r3, r2, #4
   18488:	adc	r5, ip, #0
   1848c:	mov	r7, #1
   18490:	cmp	r1, #1
   18494:	stm	sl, {r3, r5}
   18498:	beq	184c8 <read_boolean_unary_expression@@Base+0x1dc0>
   1849c:	b	185f8 <read_boolean_unary_expression@@Base+0x1ef0>
   184a0:	mov	r3, r0
   184a4:	mov	r1, #9
   184a8:	strb	r1, [r3, r2]!
   184ac:	mov	r1, #0
   184b0:	strb	r1, [r3, #3]
   184b4:	strb	r1, [r3, #2]
   184b8:	strb	r1, [r3, #1]
   184bc:	adds	r3, r2, #4
   184c0:	adc	r5, ip, #0
   184c4:	stm	sl, {r3, r5}
   184c8:	ldr	r6, [r9, #4]
   184cc:	ldr	r4, [pc, #2672]	; 18f44 <read_boolean_unary_expression@@Base+0x283c>
   184d0:	adds	r1, r2, #8
   184d4:	adc	r7, ip, #0
   184d8:	ldr	r4, [pc, r4]
   184dc:	subs	r1, r4, r1
   184e0:	sbcs	r1, r6, r7
   184e4:	bcs	189bc <read_boolean_unary_expression@@Base+0x22b4>
   184e8:	mov	r1, #7
   184ec:	orr	r1, r1, #131072	; 0x20000
   184f0:	adds	r1, r2, r1
   184f4:	adc	r2, ip, #0
   184f8:	mvn	r3, #0
   184fc:	and	r5, r2, r3
   18500:	mov	r2, #16646144	; 0xfe0000
   18504:	orr	r2, r2, #-16777216	; 0xff000000
   18508:	ldr	r4, [pc, #2616]	; 18f48 <read_boolean_unary_expression@@Base+0x2840>
   1850c:	and	r6, r1, r2
   18510:	mov	r1, r6
   18514:	add	r4, pc, r4
   18518:	bl	11ec4 <realloc@plt>
   1851c:	str	r6, [r9]
   18520:	str	r5, [r9, #4]
   18524:	str	r0, [r4]
   18528:	ldrb	r2, [r8]
   1852c:	ldr	r5, [sl, #4]
   18530:	ldr	r3, [pc, #2580]	; 18f4c <read_boolean_unary_expression@@Base+0x2844>
   18534:	mov	r7, r0
   18538:	mov	r1, #0
   1853c:	ldr	r3, [pc, r3]
   18540:	adds	r6, r3, #4
   18544:	strb	r1, [r7, r3]!
   18548:	strb	r1, [r7, #3]
   1854c:	strb	r1, [r7, #2]
   18550:	strb	r1, [r7, #1]
   18554:	adc	r1, r5, #0
   18558:	mov	r7, #1
   1855c:	cmp	r2, #1
   18560:	str	r6, [sl]
   18564:	str	r1, [sl, #4]
   18568:	bne	18620 <read_boolean_unary_expression@@Base+0x1f18>
   1856c:	b	189e4 <read_boolean_unary_expression@@Base+0x22dc>
   18570:	ldr	r3, [r0, r2]
   18574:	adds	r4, r5, #8
   18578:	adc	r7, r6, #0
   1857c:	cmp	r3, #9
   18580:	stm	sl, {r4, r7}
   18584:	bne	18ca8 <read_boolean_unary_expression@@Base+0x25a0>
   18588:	ldr	r3, [pc, #2444]	; 18f1c <read_boolean_unary_expression@@Base+0x2814>
   1858c:	adds	r4, r5, #20
   18590:	adc	r7, r6, #0
   18594:	add	r3, pc, r3
   18598:	add	r6, r0, r5
   1859c:	ldrb	r3, [r3]
   185a0:	ldr	r6, [r6, #16]
   185a4:	stm	sl, {r4, r7}
   185a8:	eor	r3, r3, #1
   185ac:	add	r7, r6, r3
   185b0:	mov	r6, r0
   185b4:	mov	r3, #0
   185b8:	strb	r3, [r6, r5]!
   185bc:	mov	r5, #161	; 0xa1
   185c0:	strb	r5, [r6, #3]
   185c4:	strb	r3, [r6, #2]
   185c8:	strb	r3, [r6, #1]
   185cc:	stm	sl, {r2, ip}
   185d0:	mov	r3, r0
   185d4:	mov	r1, #9
   185d8:	strb	r1, [r3, r2]!
   185dc:	mov	r1, #0
   185e0:	strb	r1, [r3, #3]
   185e4:	strb	r1, [r3, #2]
   185e8:	strb	r1, [r3, #1]
   185ec:	adds	r3, r2, #4
   185f0:	adc	r5, ip, #0
   185f4:	stm	sl, {r3, r5}
   185f8:	mov	r2, r0
   185fc:	mov	r1, #0
   18600:	strb	r1, [r2, r3]!
   18604:	adds	r6, r3, #4
   18608:	strb	r1, [r2, #3]
   1860c:	strb	r1, [r2, #2]
   18610:	strb	r1, [r2, #1]
   18614:	adc	r1, r5, #0
   18618:	str	r6, [sl]
   1861c:	str	r1, [sl, #4]
   18620:	mov	r3, r0
   18624:	mov	r2, #0
   18628:	strb	r2, [r3, r6]!
   1862c:	strb	r2, [r3, #3]
   18630:	strb	r2, [r3, #2]
   18634:	strb	r2, [r3, #1]
   18638:	adds	r2, r6, #4
   1863c:	adc	r3, r1, #0
   18640:	strd	r2, [sl]
   18644:	lsr	r1, r7, #24
   18648:	strb	r7, [r0, r2]!
   1864c:	lsr	r6, r7, #16
   18650:	lsr	r5, r7, #8
   18654:	strb	r1, [r0, #3]
   18658:	strb	r6, [r0, #2]
   1865c:	strb	r5, [r0, #1]
   18660:	ldrb	r0, [r8]
   18664:	adds	r4, r2, #4
   18668:	adc	r5, r3, #0
   1866c:	cmp	r0, #0
   18670:	strd	r4, [sl]
   18674:	beq	18728 <read_boolean_unary_expression@@Base+0x2020>
   18678:	ldr	r9, [pc, #2284]	; 18f6c <read_boolean_unary_expression@@Base+0x2864>
   1867c:	adds	r0, r2, #8
   18680:	adc	r1, r3, #0
   18684:	add	r9, pc, r9
   18688:	ldr	r7, [r9, #4]
   1868c:	ldr	r6, [pc, #2268]	; 18f70 <read_boolean_unary_expression@@Base+0x2868>
   18690:	ldr	r6, [pc, r6]
   18694:	subs	r0, r6, r0
   18698:	sbcs	r0, r7, r1
   1869c:	bcs	188f4 <read_boolean_unary_expression@@Base+0x21ec>
   186a0:	mov	r0, #7
   186a4:	orr	r0, r0, #131072	; 0x20000
   186a8:	adds	r0, r2, r0
   186ac:	adc	r1, r3, #0
   186b0:	mvn	r2, #0
   186b4:	and	r5, r1, r2
   186b8:	mov	r1, #16646144	; 0xfe0000
   186bc:	orr	r1, r1, #-16777216	; 0xff000000
   186c0:	ldr	r4, [pc, #2268]	; 18fa4 <read_boolean_unary_expression@@Base+0x289c>
   186c4:	and	r6, r0, r1
   186c8:	ldr	r0, [pc, #2264]	; 18fa8 <read_boolean_unary_expression@@Base+0x28a0>
   186cc:	mov	r1, r6
   186d0:	add	r4, pc, r4
   186d4:	ldr	r0, [pc, r0]
   186d8:	bl	11ec4 <realloc@plt>
   186dc:	str	r6, [r9]
   186e0:	str	r5, [r9, #4]
   186e4:	str	r0, [r4]
   186e8:	ldrb	r1, [r8]
   186ec:	ldr	r5, [sl, #4]
   186f0:	ldr	r4, [pc, #2228]	; 18fac <read_boolean_unary_expression@@Base+0x28a4>
   186f4:	mov	r3, r0
   186f8:	mov	r2, #0
   186fc:	ldr	r4, [pc, r4]
   18700:	strb	r2, [r3, r4]!
   18704:	strb	r2, [r3, #3]
   18708:	strb	r2, [r3, #2]
   1870c:	strb	r2, [r3, #1]
   18710:	adds	r2, r4, #4
   18714:	adc	r3, r5, #0
   18718:	cmp	r1, #0
   1871c:	strd	r2, [sl]
   18720:	beq	18754 <read_boolean_unary_expression@@Base+0x204c>
   18724:	b	18920 <read_boolean_unary_expression@@Base+0x2218>
   18728:	ldr	r0, [pc, #2104]	; 18f68 <read_boolean_unary_expression@@Base+0x2860>
   1872c:	adds	r2, r2, #8
   18730:	mov	r1, #0
   18734:	adc	r3, r3, #0
   18738:	ldr	r0, [pc, r0]
   1873c:	mov	r7, r0
   18740:	strb	r1, [r7, r4]!
   18744:	strb	r1, [r7, #3]
   18748:	strb	r1, [r7, #2]
   1874c:	strb	r1, [r7, #1]
   18750:	strd	r2, [sl]
   18754:	mov	r7, r0
   18758:	mov	r1, #0
   1875c:	strb	r1, [r7, r2]!
   18760:	strb	r1, [r7, #3]
   18764:	strb	r1, [r7, #2]
   18768:	strb	r1, [r7, #1]
   1876c:	adds	r1, r2, #4
   18770:	adc	r5, r3, #0
   18774:	stm	sl, {r1, r5}
   18778:	mov	r3, r0
   1877c:	mov	r2, #0
   18780:	strb	r2, [r3, r1]!
   18784:	strb	r2, [r3, #3]
   18788:	strb	r2, [r3, #2]
   1878c:	strb	r2, [r3, #1]
   18790:	adds	r2, r1, #4
   18794:	adc	r3, r5, #0
   18798:	strd	r2, [sl]
   1879c:	mov	r7, r0
   187a0:	mov	r1, #0
   187a4:	strb	r1, [r7, r2]!
   187a8:	strb	r1, [r7, #3]
   187ac:	strb	r1, [r7, #2]
   187b0:	strb	r1, [r7, #1]
   187b4:	adds	r1, r2, #4
   187b8:	adc	r5, r3, #0
   187bc:	stm	sl, {r1, r5}
   187c0:	mov	r3, r0
   187c4:	mov	r2, #0
   187c8:	strb	r2, [r3, r1]!
   187cc:	adds	r4, r1, #4
   187d0:	strb	r2, [r3, #3]
   187d4:	strb	r2, [r3, #2]
   187d8:	strb	r2, [r3, #1]
   187dc:	adc	r3, r5, #0
   187e0:	str	r4, [sl]
   187e4:	str	r3, [sl, #4]
   187e8:	mov	r2, r0
   187ec:	mov	r1, #0
   187f0:	strb	r1, [r2, r4]!
   187f4:	strb	r1, [r2, #3]
   187f8:	strb	r1, [r2, #2]
   187fc:	strb	r1, [r2, #1]
   18800:	adds	r2, r4, #4
   18804:	adc	r1, r3, #0
   18808:	str	r2, [sl]
   1880c:	str	r1, [sl, #4]
   18810:	mov	r3, r0
   18814:	mov	r4, #0
   18818:	strb	r4, [r3, r2]!
   1881c:	mov	r7, #163	; 0xa3
   18820:	strb	r7, [r3, #3]
   18824:	strb	r4, [r3, #2]
   18828:	strb	r4, [r3, #1]
   1882c:	ldrb	r7, [r8]
   18830:	adds	r6, r2, #4
   18834:	adc	r3, r1, #0
   18838:	cmp	r7, #1
   1883c:	str	r6, [sl]
   18840:	str	r3, [sl, #4]
   18844:	bne	188b8 <read_boolean_unary_expression@@Base+0x21b0>
   18848:	ldr	r8, [pc, #1852]	; 18f8c <read_boolean_unary_expression@@Base+0x2884>
   1884c:	adds	lr, r2, #8
   18850:	adc	ip, r1, #0
   18854:	add	r8, pc, r8
   18858:	ldr	r5, [r8, #4]
   1885c:	ldr	r7, [pc, #1836]	; 18f90 <read_boolean_unary_expression@@Base+0x2888>
   18860:	ldr	r7, [pc, r7]
   18864:	subs	r7, r7, lr
   18868:	sbcs	r7, r5, ip
   1886c:	bcs	188b8 <read_boolean_unary_expression@@Base+0x21b0>
   18870:	mov	r3, #7
   18874:	orr	r3, r3, #131072	; 0x20000
   18878:	adds	r2, r2, r3
   1887c:	adc	r1, r1, #0
   18880:	mvn	r3, #0
   18884:	and	r7, r1, r3
   18888:	mov	r1, #16646144	; 0xfe0000
   1888c:	orr	r1, r1, #-16777216	; 0xff000000
   18890:	ldr	r5, [pc, #1788]	; 18f94 <read_boolean_unary_expression@@Base+0x288c>
   18894:	and	r6, r2, r1
   18898:	mov	r1, r6
   1889c:	add	r5, pc, r5
   188a0:	bl	11ec4 <realloc@plt>
   188a4:	strd	r6, [r8]
   188a8:	str	r0, [r5]
   188ac:	ldr	r3, [sl, #4]
   188b0:	ldr	r6, [pc, #1760]	; 18f98 <read_boolean_unary_expression@@Base+0x2890>
   188b4:	ldr	r6, [pc, r6]
   188b8:	ldr	r0, [pc, #1756]	; 18f9c <read_boolean_unary_expression@@Base+0x2894>
   188bc:	ldr	r1, [pc, #1756]	; 18fa0 <read_boolean_unary_expression@@Base+0x2898>
   188c0:	adds	r2, r6, #4
   188c4:	add	r0, pc, r0
   188c8:	adc	r3, r3, #0
   188cc:	ldr	r1, [pc, r1]
   188d0:	strb	r4, [r1, r6]!
   188d4:	strb	r4, [r1, #3]
   188d8:	strb	r4, [r1, #2]
   188dc:	strb	r4, [r1, #1]
   188e0:	mov	r1, #1
   188e4:	strd	r2, [sl]
   188e8:	strb	r1, [r0]
   188ec:	sub	sp, fp, #28
   188f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188f4:	ldr	r0, [pc, #1656]	; 18f74 <read_boolean_unary_expression@@Base+0x286c>
   188f8:	adds	r2, r2, #8
   188fc:	mov	r1, #0
   18900:	adc	r3, r3, #0
   18904:	ldr	r0, [pc, r0]
   18908:	mov	r7, r0
   1890c:	strb	r1, [r7, r4]!
   18910:	strb	r1, [r7, #3]
   18914:	strb	r1, [r7, #2]
   18918:	strb	r1, [r7, #1]
   1891c:	strd	r2, [sl]
   18920:	ldr	r6, [r9, #4]
   18924:	ldr	r1, [pc, #1668]	; 18fb0 <read_boolean_unary_expression@@Base+0x28a8>
   18928:	adds	ip, r4, #8
   1892c:	adc	r7, r5, #0
   18930:	ldr	r1, [pc, r1]
   18934:	subs	r1, r1, ip
   18938:	sbcs	r1, r6, r7
   1893c:	bcs	18a88 <read_boolean_unary_expression@@Base+0x2380>
   18940:	mov	r1, #7
   18944:	orr	r1, r1, #131072	; 0x20000
   18948:	adds	r1, r4, r1
   1894c:	adc	r2, r5, #0
   18950:	mvn	r3, #0
   18954:	and	r5, r2, r3
   18958:	mov	r2, #16646144	; 0xfe0000
   1895c:	orr	r2, r2, #-16777216	; 0xff000000
   18960:	ldr	r6, [pc, #1612]	; 18fb4 <read_boolean_unary_expression@@Base+0x28ac>
   18964:	and	r4, r1, r2
   18968:	mov	r1, r4
   1896c:	add	r6, pc, r6
   18970:	bl	11ec4 <realloc@plt>
   18974:	str	r0, [r6]
   18978:	strd	r4, [r9]
   1897c:	ldrb	r7, [r8]
   18980:	ldr	r3, [sl, #4]
   18984:	ldr	r2, [pc, #1580]	; 18fb8 <read_boolean_unary_expression@@Base+0x28b0>
   18988:	mov	r6, r0
   1898c:	mov	r1, #0
   18990:	ldr	r2, [pc, r2]
   18994:	strb	r1, [r6, r2]!
   18998:	strb	r1, [r6, #3]
   1899c:	strb	r1, [r6, #2]
   189a0:	strb	r1, [r6, #1]
   189a4:	adds	r1, r2, #4
   189a8:	adc	r5, r3, #0
   189ac:	cmp	r7, #1
   189b0:	stm	sl, {r1, r5}
   189b4:	bne	18778 <read_boolean_unary_expression@@Base+0x2070>
   189b8:	b	18aac <read_boolean_unary_expression@@Base+0x23a4>
   189bc:	mov	r2, r0
   189c0:	mov	r1, #0
   189c4:	strb	r1, [r2, r3]!
   189c8:	adds	r6, r3, #4
   189cc:	strb	r1, [r2, #3]
   189d0:	strb	r1, [r2, #2]
   189d4:	strb	r1, [r2, #1]
   189d8:	adc	r1, r5, #0
   189dc:	str	r6, [sl]
   189e0:	str	r1, [sl, #4]
   189e4:	ldr	r4, [r9, #4]
   189e8:	ldr	r2, [pc, #1376]	; 18f50 <read_boolean_unary_expression@@Base+0x2848>
   189ec:	adds	ip, r3, #8
   189f0:	adc	r7, r5, #0
   189f4:	ldr	r2, [pc, r2]
   189f8:	subs	r2, r2, ip
   189fc:	sbcs	r2, r4, r7
   18a00:	bcs	18b4c <read_boolean_unary_expression@@Base+0x2444>
   18a04:	mov	r1, #7
   18a08:	orr	r1, r1, #131072	; 0x20000
   18a0c:	adds	r1, r3, r1
   18a10:	adc	r2, r5, #0
   18a14:	mvn	r3, #0
   18a18:	and	r5, r2, r3
   18a1c:	mov	r2, #16646144	; 0xfe0000
   18a20:	orr	r2, r2, #-16777216	; 0xff000000
   18a24:	ldr	r4, [pc, #1320]	; 18f54 <read_boolean_unary_expression@@Base+0x284c>
   18a28:	and	r6, r1, r2
   18a2c:	mov	r1, r6
   18a30:	add	r4, pc, r4
   18a34:	bl	11ec4 <realloc@plt>
   18a38:	str	r6, [r9]
   18a3c:	str	r5, [r9, #4]
   18a40:	str	r0, [r4]
   18a44:	ldrb	r5, [r8]
   18a48:	ldr	r1, [sl, #4]
   18a4c:	ldr	r6, [pc, #1284]	; 18f58 <read_boolean_unary_expression@@Base+0x2850>
   18a50:	mov	r3, r0
   18a54:	mov	r2, #0
   18a58:	mov	r7, #1
   18a5c:	ldr	r6, [pc, r6]
   18a60:	strb	r2, [r3, r6]!
   18a64:	strb	r2, [r3, #3]
   18a68:	strb	r2, [r3, #2]
   18a6c:	strb	r2, [r3, #1]
   18a70:	adds	r2, r6, #4
   18a74:	adc	r3, r1, #0
   18a78:	cmp	r5, #1
   18a7c:	strd	r2, [sl]
   18a80:	bne	18644 <read_boolean_unary_expression@@Base+0x1f3c>
   18a84:	b	18b70 <read_boolean_unary_expression@@Base+0x2468>
   18a88:	mov	r7, r0
   18a8c:	mov	r1, #0
   18a90:	strb	r1, [r7, r2]!
   18a94:	strb	r1, [r7, #3]
   18a98:	strb	r1, [r7, #2]
   18a9c:	strb	r1, [r7, #1]
   18aa0:	adds	r1, r2, #4
   18aa4:	adc	r5, r3, #0
   18aa8:	stm	sl, {r1, r5}
   18aac:	ldr	r4, [r9, #4]
   18ab0:	ldr	r6, [pc, #1284]	; 18fbc <read_boolean_unary_expression@@Base+0x28b4>
   18ab4:	adds	r7, r2, #8
   18ab8:	adc	ip, r3, #0
   18abc:	ldr	r6, [pc, r6]
   18ac0:	subs	r7, r6, r7
   18ac4:	sbcs	r7, r4, ip
   18ac8:	bcs	18be4 <read_boolean_unary_expression@@Base+0x24dc>
   18acc:	mov	r1, #7
   18ad0:	orr	r1, r1, #131072	; 0x20000
   18ad4:	adds	r1, r2, r1
   18ad8:	adc	r2, r3, #0
   18adc:	mvn	r3, #0
   18ae0:	and	r5, r2, r3
   18ae4:	mov	r2, #16646144	; 0xfe0000
   18ae8:	orr	r2, r2, #-16777216	; 0xff000000
   18aec:	ldr	r4, [pc, #1228]	; 18fc0 <read_boolean_unary_expression@@Base+0x28b8>
   18af0:	and	r6, r1, r2
   18af4:	mov	r1, r6
   18af8:	add	r4, pc, r4
   18afc:	bl	11ec4 <realloc@plt>
   18b00:	str	r6, [r9]
   18b04:	str	r5, [r9, #4]
   18b08:	str	r0, [r4]
   18b0c:	ldrb	r7, [r8]
   18b10:	ldr	r5, [sl, #4]
   18b14:	ldr	r1, [pc, #1192]	; 18fc4 <read_boolean_unary_expression@@Base+0x28bc>
   18b18:	mov	r3, r0
   18b1c:	mov	r2, #0
   18b20:	ldr	r1, [pc, r1]
   18b24:	strb	r2, [r3, r1]!
   18b28:	strb	r2, [r3, #3]
   18b2c:	strb	r2, [r3, #2]
   18b30:	strb	r2, [r3, #1]
   18b34:	adds	r2, r1, #4
   18b38:	adc	r3, r5, #0
   18b3c:	cmp	r7, #1
   18b40:	strd	r2, [sl]
   18b44:	bne	1879c <read_boolean_unary_expression@@Base+0x2094>
   18b48:	b	18c08 <read_boolean_unary_expression@@Base+0x2500>
   18b4c:	mov	r3, r0
   18b50:	mov	r2, #0
   18b54:	strb	r2, [r3, r6]!
   18b58:	strb	r2, [r3, #3]
   18b5c:	strb	r2, [r3, #2]
   18b60:	strb	r2, [r3, #1]
   18b64:	adds	r2, r6, #4
   18b68:	adc	r3, r1, #0
   18b6c:	strd	r2, [sl]
   18b70:	ldr	r4, [r9, #4]
   18b74:	ldr	r5, [pc, #992]	; 18f5c <read_boolean_unary_expression@@Base+0x2854>
   18b78:	adds	lr, r6, #8
   18b7c:	adc	ip, r1, #0
   18b80:	mov	r7, #1
   18b84:	ldr	r5, [pc, r5]
   18b88:	subs	r5, r5, lr
   18b8c:	sbcs	r5, r4, ip
   18b90:	bcs	18644 <read_boolean_unary_expression@@Base+0x1f3c>
   18b94:	mov	r2, #7
   18b98:	orr	r2, r2, #131072	; 0x20000
   18b9c:	adds	r2, r6, r2
   18ba0:	adc	r1, r1, #0
   18ba4:	mvn	r3, #0
   18ba8:	and	r5, r1, r3
   18bac:	mov	r1, #16646144	; 0xfe0000
   18bb0:	orr	r1, r1, #-16777216	; 0xff000000
   18bb4:	ldr	r4, [pc, #932]	; 18f60 <read_boolean_unary_expression@@Base+0x2858>
   18bb8:	and	r6, r2, r1
   18bbc:	mov	r1, r6
   18bc0:	add	r4, pc, r4
   18bc4:	bl	11ec4 <realloc@plt>
   18bc8:	str	r6, [r9]
   18bcc:	str	r5, [r9, #4]
   18bd0:	str	r0, [r4]
   18bd4:	ldr	r3, [sl, #4]
   18bd8:	ldr	r2, [pc, #900]	; 18f64 <read_boolean_unary_expression@@Base+0x285c>
   18bdc:	ldr	r2, [pc, r2]
   18be0:	b	18644 <read_boolean_unary_expression@@Base+0x1f3c>
   18be4:	mov	r3, r0
   18be8:	mov	r2, #0
   18bec:	strb	r2, [r3, r1]!
   18bf0:	strb	r2, [r3, #3]
   18bf4:	strb	r2, [r3, #2]
   18bf8:	strb	r2, [r3, #1]
   18bfc:	adds	r2, r1, #4
   18c00:	adc	r3, r5, #0
   18c04:	strd	r2, [sl]
   18c08:	ldr	r4, [r9, #4]
   18c0c:	ldr	r6, [pc, #948]	; 18fc8 <read_boolean_unary_expression@@Base+0x28c0>
   18c10:	adds	r7, r1, #8
   18c14:	adc	ip, r5, #0
   18c18:	ldr	r6, [pc, r6]
   18c1c:	subs	r7, r6, r7
   18c20:	sbcs	r7, r4, ip
   18c24:	bcs	18cd0 <read_boolean_unary_expression@@Base+0x25c8>
   18c28:	mov	r2, #7
   18c2c:	orr	r2, r2, #131072	; 0x20000
   18c30:	adds	r1, r1, r2
   18c34:	adc	r2, r5, #0
   18c38:	mvn	r3, #0
   18c3c:	and	r5, r2, r3
   18c40:	mov	r2, #16646144	; 0xfe0000
   18c44:	orr	r2, r2, #-16777216	; 0xff000000
   18c48:	ldr	r4, [pc, #892]	; 18fcc <read_boolean_unary_expression@@Base+0x28c4>
   18c4c:	and	r6, r1, r2
   18c50:	mov	r1, r6
   18c54:	add	r4, pc, r4
   18c58:	bl	11ec4 <realloc@plt>
   18c5c:	str	r6, [r9]
   18c60:	str	r5, [r9, #4]
   18c64:	str	r0, [r4]
   18c68:	ldrb	r7, [r8]
   18c6c:	ldr	r3, [sl, #4]
   18c70:	ldr	r2, [pc, #856]	; 18fd0 <read_boolean_unary_expression@@Base+0x28c8>
   18c74:	mov	r6, r0
   18c78:	mov	r1, #0
   18c7c:	ldr	r2, [pc, r2]
   18c80:	strb	r1, [r6, r2]!
   18c84:	strb	r1, [r6, #3]
   18c88:	strb	r1, [r6, #2]
   18c8c:	strb	r1, [r6, #1]
   18c90:	adds	r1, r2, #4
   18c94:	adc	r5, r3, #0
   18c98:	cmp	r7, #1
   18c9c:	stm	sl, {r1, r5}
   18ca0:	bne	187c0 <read_boolean_unary_expression@@Base+0x20b8>
   18ca4:	b	18cf4 <read_boolean_unary_expression@@Base+0x25ec>
   18ca8:	ldr	r1, [pc, #616]	; 18f18 <read_boolean_unary_expression@@Base+0x2810>
   18cac:	add	r1, pc, r1
   18cb0:	ldr	r0, [pc, #600]	; 18f10 <read_boolean_unary_expression@@Base+0x2808>
   18cb4:	ldr	r0, [pc, r0]
   18cb8:	ldr	r0, [r0]
   18cbc:	ldr	r2, [pc, #592]	; 18f14 <read_boolean_unary_expression@@Base+0x280c>
   18cc0:	ldr	r2, [pc, r2]
   18cc4:	sub	sp, fp, #28
   18cc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ccc:	b	11f60 <fprintf@plt>
   18cd0:	mov	r7, r0
   18cd4:	mov	r1, #0
   18cd8:	strb	r1, [r7, r2]!
   18cdc:	strb	r1, [r7, #3]
   18ce0:	strb	r1, [r7, #2]
   18ce4:	strb	r1, [r7, #1]
   18ce8:	adds	r1, r2, #4
   18cec:	adc	r5, r3, #0
   18cf0:	stm	sl, {r1, r5}
   18cf4:	ldr	r4, [r9, #4]
   18cf8:	ldr	r6, [pc, #724]	; 18fd4 <read_boolean_unary_expression@@Base+0x28cc>
   18cfc:	adds	r7, r2, #8
   18d00:	adc	ip, r3, #0
   18d04:	ldr	r6, [pc, r6]
   18d08:	subs	r7, r6, r7
   18d0c:	sbcs	r7, r4, ip
   18d10:	bcs	18d98 <read_boolean_unary_expression@@Base+0x2690>
   18d14:	mov	r1, #7
   18d18:	orr	r1, r1, #131072	; 0x20000
   18d1c:	adds	r1, r2, r1
   18d20:	adc	r2, r3, #0
   18d24:	mvn	r3, #0
   18d28:	and	r5, r2, r3
   18d2c:	mov	r2, #16646144	; 0xfe0000
   18d30:	orr	r2, r2, #-16777216	; 0xff000000
   18d34:	ldr	r4, [pc, #668]	; 18fd8 <read_boolean_unary_expression@@Base+0x28d0>
   18d38:	and	r6, r1, r2
   18d3c:	mov	r1, r6
   18d40:	add	r4, pc, r4
   18d44:	bl	11ec4 <realloc@plt>
   18d48:	str	r6, [r9]
   18d4c:	str	r5, [r9, #4]
   18d50:	str	r0, [r4]
   18d54:	ldrb	r2, [r8]
   18d58:	ldr	r5, [sl, #4]
   18d5c:	ldr	r1, [pc, #632]	; 18fdc <read_boolean_unary_expression@@Base+0x28d4>
   18d60:	mov	r7, r0
   18d64:	mov	r3, #0
   18d68:	ldr	r1, [pc, r1]
   18d6c:	adds	r4, r1, #4
   18d70:	strb	r3, [r7, r1]!
   18d74:	strb	r3, [r7, #3]
   18d78:	strb	r3, [r7, #2]
   18d7c:	strb	r3, [r7, #1]
   18d80:	adc	r3, r5, #0
   18d84:	cmp	r2, #1
   18d88:	str	r4, [sl]
   18d8c:	str	r3, [sl, #4]
   18d90:	bne	187e8 <read_boolean_unary_expression@@Base+0x20e0>
   18d94:	b	18dc0 <read_boolean_unary_expression@@Base+0x26b8>
   18d98:	mov	r3, r0
   18d9c:	mov	r2, #0
   18da0:	strb	r2, [r3, r1]!
   18da4:	adds	r4, r1, #4
   18da8:	strb	r2, [r3, #3]
   18dac:	strb	r2, [r3, #2]
   18db0:	strb	r2, [r3, #1]
   18db4:	adc	r3, r5, #0
   18db8:	str	r4, [sl]
   18dbc:	str	r3, [sl, #4]
   18dc0:	ldr	r6, [r9, #4]
   18dc4:	ldr	r2, [pc, #532]	; 18fe0 <read_boolean_unary_expression@@Base+0x28d8>
   18dc8:	adds	ip, r1, #8
   18dcc:	adc	r7, r5, #0
   18dd0:	ldr	r2, [pc, r2]
   18dd4:	subs	r2, r2, ip
   18dd8:	sbcs	r2, r6, r7
   18ddc:	bcs	18e64 <read_boolean_unary_expression@@Base+0x275c>
   18de0:	mov	r2, #7
   18de4:	orr	r2, r2, #131072	; 0x20000
   18de8:	adds	r1, r1, r2
   18dec:	adc	r2, r5, #0
   18df0:	mvn	r3, #0
   18df4:	and	r5, r2, r3
   18df8:	mov	r2, #16646144	; 0xfe0000
   18dfc:	orr	r2, r2, #-16777216	; 0xff000000
   18e00:	ldr	r4, [pc, #368]	; 18f78 <read_boolean_unary_expression@@Base+0x2870>
   18e04:	and	r6, r1, r2
   18e08:	mov	r1, r6
   18e0c:	add	r4, pc, r4
   18e10:	bl	11ec4 <realloc@plt>
   18e14:	str	r6, [r9]
   18e18:	str	r5, [r9, #4]
   18e1c:	str	r0, [r4]
   18e20:	ldrb	r7, [r8]
   18e24:	ldr	r3, [sl, #4]
   18e28:	ldr	r4, [pc, #332]	; 18f7c <read_boolean_unary_expression@@Base+0x2874>
   18e2c:	mov	r2, r0
   18e30:	mov	r1, #0
   18e34:	ldr	r4, [pc, r4]
   18e38:	strb	r1, [r2, r4]!
   18e3c:	strb	r1, [r2, #3]
   18e40:	strb	r1, [r2, #2]
   18e44:	strb	r1, [r2, #1]
   18e48:	adds	r2, r4, #4
   18e4c:	adc	r1, r3, #0
   18e50:	cmp	r7, #0
   18e54:	str	r2, [sl]
   18e58:	str	r1, [sl, #4]
   18e5c:	beq	18810 <read_boolean_unary_expression@@Base+0x2108>
   18e60:	b	18e8c <read_boolean_unary_expression@@Base+0x2784>
   18e64:	mov	r2, r0
   18e68:	mov	r1, #0
   18e6c:	strb	r1, [r2, r4]!
   18e70:	strb	r1, [r2, #3]
   18e74:	strb	r1, [r2, #2]
   18e78:	strb	r1, [r2, #1]
   18e7c:	adds	r2, r4, #4
   18e80:	adc	r1, r3, #0
   18e84:	str	r2, [sl]
   18e88:	str	r1, [sl, #4]
   18e8c:	ldr	r5, [r9, #4]
   18e90:	ldr	r6, [pc, #232]	; 18f80 <read_boolean_unary_expression@@Base+0x2878>
   18e94:	adds	r7, r4, #8
   18e98:	adc	ip, r3, #0
   18e9c:	ldr	r6, [pc, r6]
   18ea0:	subs	r7, r6, r7
   18ea4:	sbcs	r7, r5, ip
   18ea8:	bcs	18810 <read_boolean_unary_expression@@Base+0x2108>
   18eac:	mov	r1, #7
   18eb0:	orr	r1, r1, #131072	; 0x20000
   18eb4:	adds	r1, r4, r1
   18eb8:	adc	r2, r3, #0
   18ebc:	mvn	r3, #0
   18ec0:	and	r7, r2, r3
   18ec4:	mov	r2, #16646144	; 0xfe0000
   18ec8:	orr	r2, r2, #-16777216	; 0xff000000
   18ecc:	ldr	r5, [pc, #176]	; 18f84 <read_boolean_unary_expression@@Base+0x287c>
   18ed0:	and	r6, r1, r2
   18ed4:	mov	r1, r6
   18ed8:	add	r5, pc, r5
   18edc:	bl	11ec4 <realloc@plt>
   18ee0:	strd	r6, [r9]
   18ee4:	str	r0, [r5]
   18ee8:	ldr	r1, [sl, #4]
   18eec:	ldr	r2, [pc, #148]	; 18f88 <read_boolean_unary_expression@@Base+0x2880>
   18ef0:	ldr	r2, [pc, r2]
   18ef4:	b	18810 <read_boolean_unary_expression@@Base+0x2108>
   18ef8:	andeq	r4, r1, r0, lsr fp
   18efc:	andeq	r4, r1, r0, lsr fp
   18f00:	andeq	r4, r1, r4, lsr #22
   18f04:	andeq	r4, r1, r8, lsl #22
   18f08:	andeq	r4, r1, ip, lsr sl
   18f0c:	andeq	r2, r0, r6, asr #29
   18f10:	andeq	r3, r1, r0, lsl #8
   18f14:	strdeq	r4, [r1], -r0
   18f18:	andeq	r2, r0, pc, lsr #12
   18f1c:	andeq	r4, r1, ip, lsr r8
   18f20:	strdeq	r4, [r1], -r8
   18f24:	andeq	r4, r1, ip, ror #21
   18f28:	andeq	r4, r1, r0, ror #19
   18f2c:	andeq	r4, r1, r0, lsr #21
   18f30:	muleq	r1, ip, sl
   18f34:	andeq	r4, r1, ip, ror sl
   18f38:			; <UNDEFINED> instruction: 0x000149b8
   18f3c:	andeq	r4, r1, r8, ror r9
   18f40:	andeq	r4, r1, ip, asr r9
   18f44:	andeq	r4, r1, r8, ror #17
   18f48:	andeq	r4, r1, r8, lsr #17
   18f4c:	andeq	r4, r1, ip, lsl #17
   18f50:	andeq	r4, r1, ip, asr #7
   18f54:	andeq	r4, r1, ip, lsl #7
   18f58:	andeq	r4, r1, ip, ror #6
   18f5c:	andeq	r4, r1, ip, lsr r2
   18f60:	strdeq	r4, [r1], -ip
   18f64:	andeq	r4, r1, ip, ror #3
   18f68:	andeq	r4, r1, r4, lsl #13
   18f6c:	andeq	r4, r1, ip, lsr r7
   18f70:	andeq	r4, r1, r0, lsr r7
   18f74:			; <UNDEFINED> instruction: 0x000144b8
   18f78:			; <UNDEFINED> instruction: 0x00013fb0
   18f7c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   18f80:	andeq	r3, r1, r4, lsr #30
   18f84:	andeq	r3, r1, r4, ror #29
   18f88:	ldrdeq	r3, [r1], -r8
   18f8c:	andeq	r4, r1, ip, ror #10
   18f90:	andeq	r4, r1, r0, ror #10
   18f94:	andeq	r4, r1, r0, lsr #10
   18f98:	andeq	r4, r1, r4, lsl r5
   18f9c:	andeq	r4, r1, ip, lsl #10
   18fa0:	strdeq	r4, [r1], -r0
   18fa4:	andeq	r4, r1, ip, ror #13
   18fa8:	andeq	r4, r1, r8, ror #13
   18fac:	andeq	r4, r1, ip, asr #13
   18fb0:	muleq	r1, r0, r4
   18fb4:	andeq	r4, r1, r0, asr r4
   18fb8:	andeq	r4, r1, r8, lsr r4
   18fbc:	andeq	r4, r1, r4, lsl #6
   18fc0:	andeq	r4, r1, r4, asr #5
   18fc4:	andeq	r4, r1, r8, lsr #5
   18fc8:	andeq	r4, r1, r8, lsr #3
   18fcc:	andeq	r4, r1, r8, ror #2
   18fd0:	andeq	r4, r1, ip, asr #2
   18fd4:	strheq	r4, [r1], -ip
   18fd8:	andeq	r4, r1, ip, ror r0
   18fdc:	andeq	r4, r1, r0, rrx
   18fe0:	strdeq	r3, [r1], -r0
   18fe4:	ldr	r0, [pc, #508]	; 191e8 <read_boolean_unary_expression@@Base+0x2ae0>
   18fe8:	ldr	r0, [pc, r0]
   18fec:	cmp	r0, #0
   18ff0:	beq	191a0 <read_boolean_unary_expression@@Base+0x2a98>
   18ff4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18ff8:	add	fp, sp, #24
   18ffc:	ldr	r9, [pc, #488]	; 191ec <read_boolean_unary_expression@@Base+0x2ae4>
   19000:	mov	r4, #0
   19004:	mov	r1, #0
   19008:	add	r9, pc, r9
   1900c:	ldrb	r0, [r9]
   19010:	cmp	r0, #1
   19014:	bne	19098 <read_boolean_unary_expression@@Base+0x2990>
   19018:	ldr	r0, [pc, #464]	; 191f0 <read_boolean_unary_expression@@Base+0x2ae8>
   1901c:	ldr	r8, [pc, #464]	; 191f4 <read_boolean_unary_expression@@Base+0x2aec>
   19020:	mov	r1, #1
   19024:	add	r0, pc, r0
   19028:	add	r8, pc, r8
   1902c:	ldr	r0, [r0, #4]
   19030:	ldr	r2, [pc, #448]	; 191f8 <read_boolean_unary_expression@@Base+0x2af0>
   19034:	ldr	r2, [pc, r2]
   19038:	ldr	r7, [r8, #4]
   1903c:	ldr	r5, [pc, #440]	; 191fc <read_boolean_unary_expression@@Base+0x2af4>
   19040:	adds	r3, r2, #8
   19044:	adc	r6, r0, #0
   19048:	ldr	r5, [pc, r5]
   1904c:	subs	r3, r5, r3
   19050:	sbcs	r3, r7, r6
   19054:	bcs	19098 <read_boolean_unary_expression@@Base+0x2990>
   19058:	mov	r1, #7
   1905c:	orr	r1, r1, #131072	; 0x20000
   19060:	adds	r1, r2, r1
   19064:	adc	r7, r0, #0
   19068:	mov	r0, #16646144	; 0xfe0000
   1906c:	orr	r0, r0, #-16777216	; 0xff000000
   19070:	ldr	r5, [pc, #392]	; 19200 <read_boolean_unary_expression@@Base+0x2af8>
   19074:	and	r6, r1, r0
   19078:	ldr	r0, [pc, #388]	; 19204 <read_boolean_unary_expression@@Base+0x2afc>
   1907c:	mov	r1, r6
   19080:	add	r5, pc, r5
   19084:	ldr	r0, [pc, r0]
   19088:	bl	11ec4 <realloc@plt>
   1908c:	ldrb	r1, [r9]
   19090:	strd	r6, [r8]
   19094:	str	r0, [r5]
   19098:	ldr	r3, [pc, #360]	; 19208 <read_boolean_unary_expression@@Base+0x2b00>
   1909c:	ldr	r2, [pc, #360]	; 1920c <read_boolean_unary_expression@@Base+0x2b04>
   190a0:	add	r3, pc, r3
   190a4:	ldr	r2, [pc, r2]
   190a8:	ldr	r0, [pc, #352]	; 19210 <read_boolean_unary_expression@@Base+0x2b08>
   190ac:	ldr	r0, [pc, r0]
   190b0:	ldr	r7, [r3, #4]
   190b4:	mov	r6, r0
   190b8:	strb	r4, [r6, r2]!
   190bc:	adds	r2, r2, #8
   190c0:	adc	r5, r7, #0
   190c4:	strb	r4, [r6, #5]
   190c8:	strb	r4, [r6, #3]
   190cc:	strb	r4, [r6, #2]
   190d0:	strb	r4, [r6, #1]
   190d4:	strb	r4, [r6, #4]!
   190d8:	cmp	r1, #0
   190dc:	strb	r4, [r6, #3]
   190e0:	strb	r4, [r6, #2]
   190e4:	stm	r3, {r2, r5}
   190e8:	beq	19110 <read_boolean_unary_expression@@Base+0x2a08>
   190ec:	ldr	r3, [pc, #288]	; 19214 <read_boolean_unary_expression@@Base+0x2b0c>
   190f0:	mov	r1, r2
   190f4:	mov	r2, #1
   190f8:	ldr	r3, [pc, r3]
   190fc:	bl	11ed0 <fwrite@plt>
   19100:	ldr	r0, [pc, #272]	; 19218 <read_boolean_unary_expression@@Base+0x2b10>
   19104:	ldr	r0, [pc, r0]
   19108:	bl	11e7c <free@plt>
   1910c:	b	1915c <read_boolean_unary_expression@@Base+0x2a54>
   19110:	ldr	r1, [pc, #260]	; 1921c <read_boolean_unary_expression@@Base+0x2b14>
   19114:	mov	r2, #4
   19118:	ldr	r1, [pc, r1]
   1911c:	bl	11ff0 <msync@plt>
   19120:	cmn	r0, #1
   19124:	beq	191ac <read_boolean_unary_expression@@Base+0x2aa4>
   19128:	ldr	r1, [pc, #252]	; 1922c <read_boolean_unary_expression@@Base+0x2b24>
   1912c:	ldr	r1, [pc, r1]
   19130:	ldr	r0, [pc, #248]	; 19230 <read_boolean_unary_expression@@Base+0x2b28>
   19134:	ldr	r0, [pc, r0]
   19138:	bl	11fcc <munmap@plt>
   1913c:	ldr	r0, [pc, #240]	; 19234 <read_boolean_unary_expression@@Base+0x2b2c>
   19140:	ldr	r1, [pc, #240]	; 19238 <read_boolean_unary_expression@@Base+0x2b30>
   19144:	mov	r2, #0
   19148:	add	r0, pc, r0
   1914c:	add	r1, pc, r1
   19150:	str	r2, [r0]
   19154:	str	r2, [r0, #4]
   19158:	str	r2, [r1]
   1915c:	ldr	r0, [pc, #216]	; 1923c <read_boolean_unary_expression@@Base+0x2b34>
   19160:	ldr	r0, [pc, r0]
   19164:	bl	11e70 <fflush@plt>
   19168:	ldr	r0, [pc, #208]	; 19240 <read_boolean_unary_expression@@Base+0x2b38>
   1916c:	ldr	r0, [pc, r0]
   19170:	bl	196ec <__gcov_flush@@Base+0x30c>
   19174:	ldr	r0, [pc, #200]	; 19244 <read_boolean_unary_expression@@Base+0x2b3c>
   19178:	ldr	r0, [pc, r0]
   1917c:	bl	11fb4 <fclose@plt>
   19180:	ldr	r0, [pc, #192]	; 19248 <read_boolean_unary_expression@@Base+0x2b40>
   19184:	ldr	r1, [pc, #192]	; 1924c <read_boolean_unary_expression@@Base+0x2b44>
   19188:	mov	r2, #0
   1918c:	add	r0, pc, r0
   19190:	add	r1, pc, r1
   19194:	str	r2, [r0]
   19198:	str	r2, [r1]
   1919c:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   191a0:	ldr	r0, [pc, #168]	; 19250 <read_boolean_unary_expression@@Base+0x2b48>
   191a4:	ldr	r0, [pc, r0]
   191a8:	b	11e7c <free@plt>
   191ac:	bl	11f6c <__errno_location@plt>
   191b0:	ldr	r1, [pc, #104]	; 19220 <read_boolean_unary_expression@@Base+0x2b18>
   191b4:	ldr	r1, [pc, r1]
   191b8:	ldr	r0, [r0]
   191bc:	ldr	r4, [r1]
   191c0:	ldr	r5, [pc, #92]	; 19224 <read_boolean_unary_expression@@Base+0x2b1c>
   191c4:	ldr	r5, [pc, r5]
   191c8:	bl	11f18 <strerror@plt>
   191cc:	ldr	r1, [pc, #84]	; 19228 <read_boolean_unary_expression@@Base+0x2b20>
   191d0:	mov	r3, r0
   191d4:	mov	r0, r4
   191d8:	add	r1, pc, r1
   191dc:	mov	r2, r5
   191e0:	bl	11f60 <fprintf@plt>
   191e4:	b	19128 <read_boolean_unary_expression@@Base+0x2a20>
   191e8:	ldrdeq	r3, [r1], -r0
   191ec:	andeq	r3, r1, ip, lsr #27
   191f0:	andeq	r3, r1, r4, lsr #27
   191f4:	muleq	r1, r8, sp
   191f8:	muleq	r1, r4, sp
   191fc:	andeq	r3, r1, r8, ror sp
   19200:	andeq	r3, r1, ip, lsr sp
   19204:	andeq	r3, r1, r8, lsr sp
   19208:	andeq	r3, r1, r8, lsr #26
   1920c:	andeq	r3, r1, r4, lsr #26
   19210:	andeq	r3, r1, r0, lsl sp
   19214:	andeq	r3, r1, r0, asr #25
   19218:			; <UNDEFINED> instruction: 0x00013cb8
   1921c:	andeq	r3, r1, r8, asr #25
   19220:	andeq	r2, r1, r0, lsl #30
   19224:	andeq	r3, r1, ip, ror #23
   19228:	andeq	r2, r0, r1, ror r1
   1922c:			; <UNDEFINED> instruction: 0x00013cb4
   19230:	andeq	r3, r1, r8, lsl #25
   19234:	muleq	r1, r8, ip
   19238:	andeq	r3, r1, r0, ror ip
   1923c:	andeq	r3, r1, r8, asr ip
   19240:	andeq	r2, r1, r8, ror #30
   19244:	andeq	r3, r1, r0, asr #24
   19248:	andeq	r3, r1, ip, lsr #24
   1924c:	andeq	r3, r1, ip, lsr #24
   19250:	andeq	r3, r1, ip, lsl #24
   19254:	push	{r4, sl, fp, lr}
   19258:	add	fp, sp, #8
   1925c:	mov	r4, r0
   19260:	mov	r0, #12
   19264:	bl	11f00 <malloc@plt>
   19268:	ldr	r1, [pc, #60]	; 192ac <read_boolean_unary_expression@@Base+0x2ba4>
   1926c:	mov	r2, #0
   19270:	add	r1, pc, r1
   19274:	stm	r0, {r1, r4}
   19278:	str	r2, [r0, #8]
   1927c:	ldr	r1, [pc, #44]	; 192b0 <read_boolean_unary_expression@@Base+0x2ba8>
   19280:	ldr	r1, [pc, r1]
   19284:	mov	r2, r1
   19288:	ldr	r3, [r2], #4
   1928c:	ldr	r4, [r2]
   19290:	cmp	r3, #0
   19294:	mov	r3, r2
   19298:	addne	r3, r4, #8
   1929c:	moveq	r2, r1
   192a0:	str	r0, [r3]
   192a4:	str	r0, [r2]
   192a8:	pop	{r4, sl, fp, pc}
   192ac:	andeq	r3, r1, r4, ror #22
   192b0:	andeq	r2, r1, r0, lsr lr
   192b4:	push	{r4, r5, fp, lr}
   192b8:	add	fp, sp, #8
   192bc:	ldr	r0, [pc, #56]	; 192fc <read_boolean_unary_expression@@Base+0x2bf4>
   192c0:	ldr	r0, [pc, r0]
   192c4:	ldr	r4, [r0]
   192c8:	cmp	r4, #0
   192cc:	beq	192f8 <read_boolean_unary_expression@@Base+0x2bf0>
   192d0:	ldr	r5, [pc, #40]	; 19300 <read_boolean_unary_expression@@Base+0x2bf8>
   192d4:	add	r5, pc, r5
   192d8:	ldr	r0, [r4]
   192dc:	cmp	r0, r5
   192e0:	bne	192ec <read_boolean_unary_expression@@Base+0x2be4>
   192e4:	ldr	r0, [r4, #4]
   192e8:	blx	r0
   192ec:	ldr	r4, [r4, #8]
   192f0:	cmp	r4, #0
   192f4:	bne	192d8 <read_boolean_unary_expression@@Base+0x2bd0>
   192f8:	pop	{r4, r5, fp, pc}
   192fc:	strdeq	r2, [r1], -r0
   19300:	andeq	r3, r1, r0, lsl #22
   19304:	push	{r4, r5, r6, r7, fp, lr}
   19308:	add	fp, sp, #16
   1930c:	ldr	r4, [pc, #100]	; 19378 <read_boolean_unary_expression@@Base+0x2c70>
   19310:	ldr	r4, [pc, r4]
   19314:	ldr	r0, [r4]
   19318:	cmp	r0, #0
   1931c:	beq	19374 <read_boolean_unary_expression@@Base+0x2c6c>
   19320:	ldr	r5, [pc, #84]	; 1937c <read_boolean_unary_expression@@Base+0x2c74>
   19324:	mov	r6, #0
   19328:	add	r5, pc, r5
   1932c:	ldr	r1, [r0]
   19330:	ldr	r7, [r0, #8]
   19334:	cmp	r1, r5
   19338:	beq	19344 <read_boolean_unary_expression@@Base+0x2c3c>
   1933c:	mov	r6, r0
   19340:	b	19368 <read_boolean_unary_expression@@Base+0x2c60>
   19344:	ldr	r1, [r4]
   19348:	cmp	r0, r1
   1934c:	streq	r7, [r4]
   19350:	ldr	r1, [r4, #4]
   19354:	cmp	r0, r1
   19358:	streq	r6, [r4, #4]
   1935c:	cmp	r6, #0
   19360:	strne	r7, [r6, #8]
   19364:	bl	11e7c <free@plt>
   19368:	mov	r0, r7
   1936c:	cmp	r7, #0
   19370:	bne	1932c <read_boolean_unary_expression@@Base+0x2c24>
   19374:	pop	{r4, r5, r6, r7, fp, pc}
   19378:	andeq	r2, r1, r0, lsr #27
   1937c:	andeq	r3, r1, ip, lsr #21
   19380:	push	{r4, sl, fp, lr}
   19384:	add	fp, sp, #8
   19388:	mov	r4, r0
   1938c:	mov	r0, #12
   19390:	bl	11f00 <malloc@plt>
   19394:	ldr	r1, [pc, #60]	; 193d8 <read_boolean_unary_expression@@Base+0x2cd0>
   19398:	mov	r2, #0
   1939c:	add	r1, pc, r1
   193a0:	stm	r0, {r1, r4}
   193a4:	str	r2, [r0, #8]
   193a8:	ldr	r1, [pc, #44]	; 193dc <read_boolean_unary_expression@@Base+0x2cd4>
   193ac:	ldr	r1, [pc, r1]
   193b0:	mov	r2, r1
   193b4:	ldr	r3, [r2], #4
   193b8:	ldr	r4, [r2]
   193bc:	cmp	r3, #0
   193c0:	mov	r3, r2
   193c4:	addne	r3, r4, #8
   193c8:	moveq	r2, r1
   193cc:	str	r0, [r3]
   193d0:	str	r0, [r2]
   193d4:	pop	{r4, sl, fp, pc}
   193d8:	andeq	r3, r1, r8, lsr sl
   193dc:	andeq	r2, r1, r0, lsl #26

000193e0 <__gcov_flush@@Base>:
   193e0:	push	{r4, sl, fp, lr}
   193e4:	add	fp, sp, #8
   193e8:	ldr	r0, [pc, #36]	; 19414 <__gcov_flush@@Base+0x34>
   193ec:	ldr	r0, [pc, r0]
   193f0:	ldr	r4, [r0]
   193f4:	cmp	r4, #0
   193f8:	beq	19410 <__gcov_flush@@Base+0x30>
   193fc:	ldr	r0, [r4, #4]
   19400:	blx	r0
   19404:	ldr	r4, [r4, #8]
   19408:	cmp	r4, #0
   1940c:	bne	193fc <__gcov_flush@@Base+0x1c>
   19410:	pop	{r4, sl, fp, pc}
   19414:	andeq	r2, r1, r0, asr #25
   19418:	push	{r4, r5, r6, r7, fp, lr}
   1941c:	add	fp, sp, #16
   19420:	ldr	r4, [pc, #100]	; 1948c <__gcov_flush@@Base+0xac>
   19424:	ldr	r4, [pc, r4]
   19428:	ldr	r0, [r4]
   1942c:	cmp	r0, #0
   19430:	beq	19488 <__gcov_flush@@Base+0xa8>
   19434:	ldr	r5, [pc, #84]	; 19490 <__gcov_flush@@Base+0xb0>
   19438:	mov	r6, #0
   1943c:	add	r5, pc, r5
   19440:	ldr	r1, [r0]
   19444:	ldr	r7, [r0, #8]
   19448:	cmp	r1, r5
   1944c:	beq	19458 <__gcov_flush@@Base+0x78>
   19450:	mov	r6, r0
   19454:	b	1947c <__gcov_flush@@Base+0x9c>
   19458:	ldr	r1, [r4]
   1945c:	cmp	r0, r1
   19460:	streq	r7, [r4]
   19464:	ldr	r1, [r4, #4]
   19468:	cmp	r0, r1
   1946c:	streq	r6, [r4, #4]
   19470:	cmp	r6, #0
   19474:	strne	r7, [r6, #8]
   19478:	bl	11e7c <free@plt>
   1947c:	mov	r0, r7
   19480:	cmp	r7, #0
   19484:	bne	19440 <__gcov_flush@@Base+0x60>
   19488:	pop	{r4, r5, r6, r7, fp, pc}
   1948c:	andeq	r2, r1, r8, lsl #25
   19490:	muleq	r1, r8, r9
   19494:	push	{r4, r5, fp, lr}
   19498:	add	fp, sp, #8
   1949c:	mov	r4, r1
   194a0:	cmp	r0, #0
   194a4:	beq	194f4 <__gcov_flush@@Base+0x114>
   194a8:	mov	r5, r0
   194ac:	mov	r0, #12
   194b0:	bl	11f00 <malloc@plt>
   194b4:	ldr	r1, [pc, #204]	; 19588 <__gcov_flush@@Base+0x1a8>
   194b8:	mov	r2, #0
   194bc:	add	r1, pc, r1
   194c0:	stm	r0, {r1, r5}
   194c4:	str	r2, [r0, #8]
   194c8:	ldr	r1, [pc, #188]	; 1958c <__gcov_flush@@Base+0x1ac>
   194cc:	ldr	r1, [pc, r1]
   194d0:	mov	r2, r1
   194d4:	ldr	r3, [r2], #4
   194d8:	ldr	r5, [r2]
   194dc:	cmp	r3, #0
   194e0:	mov	r3, r2
   194e4:	addne	r3, r5, #8
   194e8:	moveq	r2, r1
   194ec:	str	r0, [r3]
   194f0:	str	r0, [r2]
   194f4:	cmp	r4, #0
   194f8:	beq	19544 <__gcov_flush@@Base+0x164>
   194fc:	mov	r0, #12
   19500:	bl	11f00 <malloc@plt>
   19504:	ldr	r1, [pc, #132]	; 19590 <__gcov_flush@@Base+0x1b0>
   19508:	mov	r2, #0
   1950c:	add	r1, pc, r1
   19510:	stm	r0, {r1, r4}
   19514:	str	r2, [r0, #8]
   19518:	ldr	r1, [pc, #116]	; 19594 <__gcov_flush@@Base+0x1b4>
   1951c:	ldr	r1, [pc, r1]
   19520:	mov	r2, r1
   19524:	ldr	r3, [r2], #4
   19528:	ldr	r5, [r2]
   1952c:	cmp	r3, #0
   19530:	mov	r3, r2
   19534:	addne	r3, r5, #8
   19538:	moveq	r2, r1
   1953c:	str	r0, [r3]
   19540:	str	r0, [r2]
   19544:	ldr	r1, [pc, #76]	; 19598 <__gcov_flush@@Base+0x1b8>
   19548:	add	r1, pc, r1
   1954c:	ldrb	r0, [r1]
   19550:	cmp	r0, #0
   19554:	popne	{r4, r5, fp, pc}
   19558:	ldr	r0, [pc, #60]	; 1959c <__gcov_flush@@Base+0x1bc>
   1955c:	mov	r2, #1
   19560:	strb	r2, [r1]
   19564:	add	r0, pc, r0
   19568:	bl	19a48 <__libc_csu_fini@@Base+0x4>
   1956c:	ldr	r0, [pc, #44]	; 195a0 <__gcov_flush@@Base+0x1c0>
   19570:	add	r0, pc, r0
   19574:	bl	19a48 <__libc_csu_fini@@Base+0x4>
   19578:	ldr	r0, [pc, #36]	; 195a4 <__gcov_flush@@Base+0x1c4>
   1957c:	add	r0, pc, r0
   19580:	pop	{r4, r5, fp, lr}
   19584:	b	19a48 <__libc_csu_fini@@Base+0x4>
   19588:	andeq	r3, r1, r8, lsl r9
   1958c:	andeq	r2, r1, r4, ror #23
   19590:	andeq	r3, r1, r8, asr #17
   19594:	muleq	r1, r0, fp
   19598:	muleq	r1, r0, r8
   1959c:			; <UNDEFINED> instruction: 0xfffffeac
   195a0:			; <UNDEFINED> instruction: 0xfffffd8c
   195a4:			; <UNDEFINED> instruction: 0xfffffd30
   195a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   195ac:	add	fp, sp, #24
   195b0:	ldr	r7, [pc, #76]	; 19604 <__gcov_flush@@Base+0x224>
   195b4:	mov	r4, r0
   195b8:	mov	r5, #1
   195bc:	mov	r8, #0
   195c0:	ldr	r7, [pc, r7]
   195c4:	mov	r6, #47	; 0x2f
   195c8:	b	195d0 <__gcov_flush@@Base+0x1f0>
   195cc:	add	r5, r5, #1
   195d0:	ldrb	r0, [r4, r5]
   195d4:	cmp	r0, #47	; 0x2f
   195d8:	beq	195e8 <__gcov_flush@@Base+0x208>
   195dc:	cmp	r0, #0
   195e0:	bne	195cc <__gcov_flush@@Base+0x1ec>
   195e4:	b	19600 <__gcov_flush@@Base+0x220>
   195e8:	strb	r8, [r4, r5]
   195ec:	ldr	r1, [r7]
   195f0:	mov	r0, r4
   195f4:	bl	11f84 <mkdir@plt>
   195f8:	strb	r6, [r4, r5]
   195fc:	b	195cc <__gcov_flush@@Base+0x1ec>
   19600:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19604:	andeq	r2, r1, r8, ror #21
   19608:	ldr	r0, [pc, #8]	; 19618 <__gcov_flush@@Base+0x238>
   1960c:	ldr	r0, [pc, r0]
   19610:	ldr	r0, [r0]
   19614:	bx	lr
   19618:	muleq	r1, ip, sl
   1961c:	ldr	r1, [pc, #8]	; 1962c <__gcov_flush@@Base+0x24c>
   19620:	ldr	r1, [pc, r1]
   19624:	str	r0, [r1]
   19628:	bx	lr
   1962c:	andeq	r2, r1, r8, lsl #21
   19630:	push	{r4, r5, r6, sl, fp, lr}
   19634:	add	fp, sp, #16
   19638:	sub	sp, sp, #392	; 0x188
   1963c:	mov	r6, sp
   19640:	mov	r5, r0
   19644:	mov	r0, r6
   19648:	mov	r4, r1
   1964c:	bl	11eac <uname@plt>
   19650:	cmp	r0, #0
   19654:	blt	1966c <__gcov_flush@@Base+0x28c>
   19658:	add	r1, r6, #65	; 0x41
   1965c:	mov	r0, r5
   19660:	mov	r2, r4
   19664:	bl	11f9c <strncpy@plt>
   19668:	mov	r0, #0
   1966c:	sub	sp, fp, #16
   19670:	pop	{r4, r5, r6, sl, fp, pc}
   19674:	push	{r4, r5, r6, sl, fp, lr}
   19678:	add	fp, sp, #16
   1967c:	sub	sp, sp, #32
   19680:	mov	r4, #0
   19684:	mov	r5, r0
   19688:	str	r4, [sp, #20]
   1968c:	str	r4, [sp, #16]
   19690:	str	r4, [sp, #12]
   19694:	str	r4, [sp, #8]
   19698:	strh	r4, [sp, #2]
   1969c:	bl	11f30 <getpid@plt>
   196a0:	mov	r6, sp
   196a4:	str	r0, [sp, #24]
   196a8:	mov	r0, #1
   196ac:	strh	r0, [sp]
   196b0:	mov	r0, r5
   196b4:	mov	r1, #14
   196b8:	mov	r2, r6
   196bc:	bl	11fd8 <fcntl64@plt>
   196c0:	cmn	r0, #1
   196c4:	bne	196e0 <__gcov_flush@@Base+0x300>
   196c8:	bl	11f6c <__errno_location@plt>
   196cc:	ldr	r0, [r0]
   196d0:	cmp	r0, #4
   196d4:	beq	196b0 <__gcov_flush@@Base+0x2d0>
   196d8:	cmp	r0, #37	; 0x25
   196dc:	mvneq	r4, #0
   196e0:	mov	r0, r4
   196e4:	sub	sp, fp, #16
   196e8:	pop	{r4, r5, r6, sl, fp, pc}
   196ec:	push	{r4, r5, r6, sl, fp, lr}
   196f0:	add	fp, sp, #16
   196f4:	sub	sp, sp, #32
   196f8:	mov	r4, #0
   196fc:	mov	r5, r0
   19700:	str	r4, [sp, #20]
   19704:	str	r4, [sp, #16]
   19708:	str	r4, [sp, #12]
   1970c:	str	r4, [sp, #8]
   19710:	strh	r4, [sp, #2]
   19714:	bl	11f30 <getpid@plt>
   19718:	mov	r6, sp
   1971c:	str	r0, [sp, #24]
   19720:	mov	r0, #2
   19724:	strh	r0, [sp]
   19728:	mov	r0, r5
   1972c:	mov	r1, #14
   19730:	mov	r2, r6
   19734:	bl	11fd8 <fcntl64@plt>
   19738:	cmn	r0, #1
   1973c:	bne	19758 <__gcov_flush@@Base+0x378>
   19740:	bl	11f6c <__errno_location@plt>
   19744:	ldr	r0, [r0]
   19748:	cmp	r0, #4
   1974c:	beq	19728 <__gcov_flush@@Base+0x348>
   19750:	cmp	r0, #37	; 0x25
   19754:	mvneq	r4, #0
   19758:	mov	r0, r4
   1975c:	sub	sp, fp, #16
   19760:	pop	{r4, r5, r6, sl, fp, pc}
   19764:	push	{r4, r5, fp, lr}
   19768:	add	fp, sp, #8
   1976c:	sub	sp, sp, #32
   19770:	mov	r2, #182	; 0xb6
   19774:	orr	r2, r2, #256	; 0x100
   19778:	mov	r1, #66	; 0x42
   1977c:	bl	11edc <open64@plt>
   19780:	cmp	r0, #0
   19784:	blt	19800 <__gcov_flush@@Base+0x420>
   19788:	mov	r4, r0
   1978c:	mov	r0, #0
   19790:	str	r0, [sp, #20]
   19794:	str	r0, [sp, #16]
   19798:	str	r0, [sp, #12]
   1979c:	str	r0, [sp, #8]
   197a0:	strh	r0, [sp, #2]
   197a4:	bl	11f30 <getpid@plt>
   197a8:	mov	r5, sp
   197ac:	str	r0, [sp, #24]
   197b0:	mov	r0, #1
   197b4:	strh	r0, [sp]
   197b8:	mov	r0, r4
   197bc:	mov	r1, #14
   197c0:	mov	r2, r5
   197c4:	bl	11fd8 <fcntl64@plt>
   197c8:	cmn	r0, #1
   197cc:	bne	197e8 <__gcov_flush@@Base+0x408>
   197d0:	bl	11f6c <__errno_location@plt>
   197d4:	ldr	r0, [r0]
   197d8:	cmp	r0, #4
   197dc:	beq	197b8 <__gcov_flush@@Base+0x3d8>
   197e0:	cmp	r0, #37	; 0x25
   197e4:	beq	1980c <__gcov_flush@@Base+0x42c>
   197e8:	ldr	r1, [pc, #76]	; 1983c <__gcov_flush@@Base+0x45c>
   197ec:	mov	r0, r4
   197f0:	add	r1, pc, r1
   197f4:	bl	11e40 <fdopen@plt>
   197f8:	sub	sp, fp, #8
   197fc:	pop	{r4, r5, fp, pc}
   19800:	mov	r0, #0
   19804:	sub	sp, fp, #8
   19808:	pop	{r4, r5, fp, pc}
   1980c:	ldr	r1, [pc, #28]	; 19830 <__gcov_flush@@Base+0x450>
   19810:	ldr	r2, [pc, #28]	; 19834 <__gcov_flush@@Base+0x454>
   19814:	ldr	r0, [pc, #28]	; 19838 <__gcov_flush@@Base+0x458>
   19818:	add	r1, pc, r1
   1981c:	add	r2, pc, r2
   19820:	ldr	r0, [pc, r0]
   19824:	ldr	r0, [r0]
   19828:	bl	11f60 <fprintf@plt>
   1982c:	b	197e8 <__gcov_flush@@Base+0x408>
   19830:	andeq	r1, r0, r2, asr fp
   19834:	muleq	r0, r7, fp
   19838:	muleq	r1, r4, r8
   1983c:	ldrdeq	r1, [r0], -r8
   19840:	push	{r4, r5, r6, sl, fp, lr}
   19844:	add	fp, sp, #16
   19848:	mov	r6, r0
   1984c:	ldr	r0, [pc, #120]	; 198cc <__gcov_flush@@Base+0x4ec>
   19850:	mov	r4, r1
   19854:	add	r0, pc, r0
   19858:	bl	11ee8 <getenv@plt>
   1985c:	mov	r5, r0
   19860:	ldr	r0, [pc, #104]	; 198d0 <__gcov_flush@@Base+0x4f0>
   19864:	add	r0, pc, r0
   19868:	bl	11ee8 <getenv@plt>
   1986c:	mov	r1, #0
   19870:	str	r1, [r4]
   19874:	str	r1, [r6]
   19878:	cmp	r5, #0
   1987c:	ldrbne	r2, [r5]
   19880:	cmpne	r2, #0
   19884:	bne	19890 <__gcov_flush@@Base+0x4b0>
   19888:	mov	r0, r1
   1988c:	pop	{r4, r5, r6, sl, fp, pc}
   19890:	cmp	r0, #0
   19894:	beq	198ac <__gcov_flush@@Base+0x4cc>
   19898:	mov	r1, #0
   1989c:	mov	r2, #10
   198a0:	bl	11e58 <strtol@plt>
   198a4:	bic	r0, r0, r0, asr #31
   198a8:	b	198b0 <__gcov_flush@@Base+0x4d0>
   198ac:	mov	r0, #0
   198b0:	str	r0, [r6]
   198b4:	mov	r0, r5
   198b8:	bl	11f48 <strlen@plt>
   198bc:	mov	r1, r5
   198c0:	str	r0, [r4]
   198c4:	mov	r0, r1
   198c8:	pop	{r4, r5, r6, sl, fp, pc}
   198cc:	andeq	r1, r0, sp, lsl #23
   198d0:	andeq	r1, r0, r9, lsl #23
   198d4:	push	{r4, r5, r6, r7, fp, lr}
   198d8:	add	fp, sp, #16
   198dc:	mov	r6, r0
   198e0:	ldr	r0, [fp, #8]
   198e4:	mov	r5, r3
   198e8:	mov	r7, r2
   198ec:	mov	r4, r1
   198f0:	cmp	r0, #1
   198f4:	blt	1992c <__gcov_flush@@Base+0x54c>
   198f8:	add	r1, r4, #1
   198fc:	mov	r2, #0
   19900:	ldrb	r3, [r1]
   19904:	cmp	r3, #47	; 0x2f
   19908:	beq	19918 <__gcov_flush@@Base+0x538>
   1990c:	cmp	r3, #0
   19910:	bne	19920 <__gcov_flush@@Base+0x540>
   19914:	b	1992c <__gcov_flush@@Base+0x54c>
   19918:	add	r2, r2, #1
   1991c:	mov	r4, r1
   19920:	add	r1, r1, #1
   19924:	cmp	r2, r0
   19928:	blt	19900 <__gcov_flush@@Base+0x520>
   1992c:	mov	r0, r6
   19930:	mov	r1, r7
   19934:	mov	r2, r5
   19938:	bl	11e88 <memcpy@plt>
   1993c:	add	r0, r7, r5
   19940:	ldrb	r0, [r0, #-1]
   19944:	cmp	r0, #47	; 0x2f
   19948:	movne	r0, #47	; 0x2f
   1994c:	strbne	r0, [r6, r5]
   19950:	mov	r0, r4
   19954:	addne	r5, r5, #1
   19958:	add	r5, r6, r5
   1995c:	bl	11f48 <strlen@plt>
   19960:	add	r2, r0, #1
   19964:	mov	r0, r5
   19968:	mov	r1, r4
   1996c:	pop	{r4, r5, r6, r7, fp, lr}
   19970:	b	11e88 <memcpy@plt>
   19974:	mov	r1, #47	; 0x2f
   19978:	b	11f54 <strchr@plt>
   1997c:	mov	r1, #47	; 0x2f
   19980:	b	11fe4 <strrchr@plt>
   19984:	push	{fp, lr}
   19988:	mov	fp, sp
   1998c:	sub	sp, sp, #8
   19990:	mov	r0, #0
   19994:	str	r0, [sp, #4]
   19998:	add	r1, sp, #4
   1999c:	mov	r0, #2
   199a0:	bl	11fa8 <prctl@plt>
   199a4:	ldr	r1, [sp, #4]
   199a8:	cmp	r0, #0
   199ac:	cmpeq	r1, #9
   199b0:	bne	199c4 <__gcov_flush@@Base+0x5e4>
   199b4:	mov	r0, #1
   199b8:	mov	r1, #0
   199bc:	bl	11fa8 <prctl@plt>
   199c0:	ldr	r1, [sp, #4]
   199c4:	sub	r0, r1, #9
   199c8:	clz	r0, r0
   199cc:	lsr	r0, r0, #5
   199d0:	mov	sp, fp
   199d4:	pop	{fp, pc}
   199d8:	mov	r0, #1
   199dc:	mov	r1, #9
   199e0:	b	11fa8 <prctl@plt>

000199e4 <__libc_csu_init@@Base>:
   199e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   199e8:	mov	r7, r0
   199ec:	ldr	r6, [pc, #72]	; 19a3c <__libc_csu_init@@Base+0x58>
   199f0:	ldr	r5, [pc, #72]	; 19a40 <__libc_csu_init@@Base+0x5c>
   199f4:	add	r6, pc, r6
   199f8:	add	r5, pc, r5
   199fc:	sub	r6, r6, r5
   19a00:	mov	r8, r1
   19a04:	mov	r9, r2
   19a08:	bl	11e20 <fdopen@plt-0x20>
   19a0c:	asrs	r6, r6, #2
   19a10:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19a14:	mov	r4, #0
   19a18:	add	r4, r4, #1
   19a1c:	ldr	r3, [r5], #4
   19a20:	mov	r2, r9
   19a24:	mov	r1, r8
   19a28:	mov	r0, r7
   19a2c:	blx	r3
   19a30:	cmp	r6, r4
   19a34:	bne	19a18 <__libc_csu_init@@Base+0x34>
   19a38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19a3c:	andeq	r2, r1, r8, lsl #10
   19a40:	strdeq	r2, [r1], -r0

00019a44 <__libc_csu_fini@@Base>:
   19a44:	bx	lr
   19a48:	ldr	r3, [pc, #12]	; 19a5c <__libc_csu_fini@@Base+0x18>
   19a4c:	mov	r1, #0
   19a50:	add	r3, pc, r3
   19a54:	ldr	r2, [r3]
   19a58:	b	11f78 <__cxa_atexit@plt>
   19a5c:	andeq	r2, r1, r0, ror r6

Disassembly of section .fini:

00019a60 <.fini>:
   19a60:	push	{r3, lr}
   19a64:	pop	{r3, pc}
