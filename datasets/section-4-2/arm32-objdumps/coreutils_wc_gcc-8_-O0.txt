
../repos/coreutils/src/wc:     file format elf32-littlearm


Disassembly of section .init:

00011060 <.init>:
   11060:	push	{r3, lr}
   11064:	bl	113fc <__assert_fail@plt+0x4c>
   11068:	pop	{r3, pc}

Disassembly of section .plt:

0001106c <calloc@plt-0x14>:
   1106c:	push	{lr}		; (str lr, [sp, #-4]!)
   11070:	ldr	lr, [pc, #4]	; 1107c <calloc@plt-0x4>
   11074:	add	lr, pc, lr
   11078:	ldr	pc, [lr, #8]!
   1107c:	andeq	sl, r1, r4, lsl #31

00011080 <calloc@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #106496	; 0x1a000
   11088:	ldr	pc, [ip, #3972]!	; 0xf84

0001108c <fputs_unlocked@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #106496	; 0x1a000
   11094:	ldr	pc, [ip, #3964]!	; 0xf7c

00011098 <raise@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #106496	; 0x1a000
   110a0:	ldr	pc, [ip, #3956]!	; 0xf74

000110a4 <strcmp@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #106496	; 0x1a000
   110ac:	ldr	pc, [ip, #3948]!	; 0xf6c

000110b0 <posix_fadvise64@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #106496	; 0x1a000
   110b8:	ldr	pc, [ip, #3940]!	; 0xf64

000110bc <printf@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #106496	; 0x1a000
   110c4:	ldr	pc, [ip, #3932]!	; 0xf5c

000110c8 <read@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #106496	; 0x1a000
   110d0:	ldr	pc, [ip, #3924]!	; 0xf54

000110d4 <fflush@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #106496	; 0x1a000
   110dc:	ldr	pc, [ip, #3916]!	; 0xf4c

000110e0 <wcwidth@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #106496	; 0x1a000
   110e8:	ldr	pc, [ip, #3908]!	; 0xf44

000110ec <memmove@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #106496	; 0x1a000
   110f4:	ldr	pc, [ip, #3900]!	; 0xf3c

000110f8 <free@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #106496	; 0x1a000
   11100:	ldr	pc, [ip, #3892]!	; 0xf34

00011104 <ferror@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #106496	; 0x1a000
   1110c:	ldr	pc, [ip, #3884]!	; 0xf2c

00011110 <_exit@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #106496	; 0x1a000
   11118:	ldr	pc, [ip, #3876]!	; 0xf24

0001111c <memcpy@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #106496	; 0x1a000
   11124:	ldr	pc, [ip, #3868]!	; 0xf1c

00011128 <mbsinit@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #106496	; 0x1a000
   11130:	ldr	pc, [ip, #3860]!	; 0xf14

00011134 <memcmp@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #106496	; 0x1a000
   1113c:	ldr	pc, [ip, #3852]!	; 0xf0c

00011140 <fputc_unlocked@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #106496	; 0x1a000
   11148:	ldr	pc, [ip, #3844]!	; 0xf04

0001114c <sysconf@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #106496	; 0x1a000
   11154:	ldr	pc, [ip, #3836]!	; 0xefc

00011158 <realloc@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #106496	; 0x1a000
   11160:	ldr	pc, [ip, #3828]!	; 0xef4

00011164 <textdomain@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #106496	; 0x1a000
   1116c:	ldr	pc, [ip, #3820]!	; 0xeec

00011170 <iswcntrl@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #106496	; 0x1a000
   11178:	ldr	pc, [ip, #3812]!	; 0xee4

0001117c <rawmemchr@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #106496	; 0x1a000
   11184:	ldr	pc, [ip, #3804]!	; 0xedc

00011188 <iswprint@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #106496	; 0x1a000
   11190:	ldr	pc, [ip, #3796]!	; 0xed4

00011194 <__fxstat64@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #106496	; 0x1a000
   1119c:	ldr	pc, [ip, #3788]!	; 0xecc

000111a0 <fwrite@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #106496	; 0x1a000
   111a8:	ldr	pc, [ip, #3780]!	; 0xec4

000111ac <lseek64@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #106496	; 0x1a000
   111b4:	ldr	pc, [ip, #3772]!	; 0xebc

000111b8 <__ctype_get_mb_cur_max@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #106496	; 0x1a000
   111c0:	ldr	pc, [ip, #3764]!	; 0xeb4

000111c4 <__fpending@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #106496	; 0x1a000
   111cc:	ldr	pc, [ip, #3756]!	; 0xeac

000111d0 <ferror_unlocked@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #106496	; 0x1a000
   111d8:	ldr	pc, [ip, #3748]!	; 0xea4

000111dc <mbrtowc@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #106496	; 0x1a000
   111e4:	ldr	pc, [ip, #3740]!	; 0xe9c

000111e8 <error@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #106496	; 0x1a000
   111f0:	ldr	pc, [ip, #3732]!	; 0xe94

000111f4 <open64@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #106496	; 0x1a000
   111fc:	ldr	pc, [ip, #3724]!	; 0xe8c

00011200 <getenv@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #106496	; 0x1a000
   11208:	ldr	pc, [ip, #3716]!	; 0xe84

0001120c <sysinfo@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #106496	; 0x1a000
   11214:	ldr	pc, [ip, #3708]!	; 0xe7c

00011218 <malloc@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #106496	; 0x1a000
   11220:	ldr	pc, [ip, #3700]!	; 0xe74

00011224 <__libc_start_main@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #106496	; 0x1a000
   1122c:	ldr	pc, [ip, #3692]!	; 0xe6c

00011230 <__freading@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #106496	; 0x1a000
   11238:	ldr	pc, [ip, #3684]!	; 0xe64

0001123c <__gmon_start__@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #106496	; 0x1a000
   11244:	ldr	pc, [ip, #3676]!	; 0xe5c

00011248 <getopt_long@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #106496	; 0x1a000
   11250:	ldr	pc, [ip, #3668]!	; 0xe54

00011254 <__ctype_b_loc@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #106496	; 0x1a000
   1125c:	ldr	pc, [ip, #3660]!	; 0xe4c

00011260 <exit@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #106496	; 0x1a000
   11268:	ldr	pc, [ip, #3652]!	; 0xe44

0001126c <feof@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #106496	; 0x1a000
   11274:	ldr	pc, [ip, #3644]!	; 0xe3c

00011278 <iswspace@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #106496	; 0x1a000
   11280:	ldr	pc, [ip, #3636]!	; 0xe34

00011284 <gettext@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #106496	; 0x1a000
   1128c:	ldr	pc, [ip, #3628]!	; 0xe2c

00011290 <strlen@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #106496	; 0x1a000
   11298:	ldr	pc, [ip, #3620]!	; 0xe24

0001129c <strchr@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #106496	; 0x1a000
   112a4:	ldr	pc, [ip, #3612]!	; 0xe1c

000112a8 <fprintf@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #106496	; 0x1a000
   112b0:	ldr	pc, [ip, #3604]!	; 0xe14

000112b4 <getpagesize@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #106496	; 0x1a000
   112bc:	ldr	pc, [ip, #3596]!	; 0xe0c

000112c0 <__errno_location@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #106496	; 0x1a000
   112c8:	ldr	pc, [ip, #3588]!	; 0xe04

000112cc <__cxa_atexit@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #106496	; 0x1a000
   112d4:	ldr	pc, [ip, #3580]!	; 0xdfc

000112d8 <setvbuf@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #106496	; 0x1a000
   112e0:	ldr	pc, [ip, #3572]!	; 0xdf4

000112e4 <memset@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #106496	; 0x1a000
   112ec:	ldr	pc, [ip, #3564]!	; 0xdec

000112f0 <btowc@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #106496	; 0x1a000
   112f8:	ldr	pc, [ip, #3556]!	; 0xde4

000112fc <fgetc@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #106496	; 0x1a000
   11304:	ldr	pc, [ip, #3548]!	; 0xddc

00011308 <fileno@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #106496	; 0x1a000
   11310:	ldr	pc, [ip, #3540]!	; 0xdd4

00011314 <fclose@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #106496	; 0x1a000
   1131c:	ldr	pc, [ip, #3532]!	; 0xdcc

00011320 <fseeko64@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #106496	; 0x1a000
   11328:	ldr	pc, [ip, #3524]!	; 0xdc4

0001132c <setlocale@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #106496	; 0x1a000
   11334:	ldr	pc, [ip, #3516]!	; 0xdbc

00011338 <strrchr@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #106496	; 0x1a000
   11340:	ldr	pc, [ip, #3508]!	; 0xdb4

00011344 <nl_langinfo@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #106496	; 0x1a000
   1134c:	ldr	pc, [ip, #3500]!	; 0xdac

00011350 <fopen64@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #106496	; 0x1a000
   11358:	ldr	pc, [ip, #3492]!	; 0xda4

0001135c <bindtextdomain@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #106496	; 0x1a000
   11364:	ldr	pc, [ip, #3484]!	; 0xd9c

00011368 <getdelim@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #106496	; 0x1a000
   11370:	ldr	pc, [ip, #3476]!	; 0xd94

00011374 <__xstat64@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #106496	; 0x1a000
   1137c:	ldr	pc, [ip, #3468]!	; 0xd8c

00011380 <strncmp@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #106496	; 0x1a000
   11388:	ldr	pc, [ip, #3460]!	; 0xd84

0001138c <abort@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #106496	; 0x1a000
   11394:	ldr	pc, [ip, #3452]!	; 0xd7c

00011398 <close@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #106496	; 0x1a000
   113a0:	ldr	pc, [ip, #3444]!	; 0xd74

000113a4 <putchar_unlocked@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #106496	; 0x1a000
   113ac:	ldr	pc, [ip, #3436]!	; 0xd6c

000113b0 <__assert_fail@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #106496	; 0x1a000
   113b8:	ldr	pc, [ip, #3428]!	; 0xd64

Disassembly of section .text:

000113c0 <_obstack_begin@@Base-0x889c>:
   113c0:	mov	fp, #0
   113c4:	mov	lr, #0
   113c8:	pop	{r1}		; (ldr r1, [sp], #4)
   113cc:	mov	r2, sp
   113d0:	push	{r2}		; (str r2, [sp, #-4]!)
   113d4:	push	{r0}		; (str r0, [sp, #-4]!)
   113d8:	ldr	ip, [pc, #16]	; 113f0 <__assert_fail@plt+0x40>
   113dc:	push	{ip}		; (str ip, [sp, #-4]!)
   113e0:	ldr	r0, [pc, #12]	; 113f4 <__assert_fail@plt+0x44>
   113e4:	ldr	r3, [pc, #12]	; 113f8 <__assert_fail@plt+0x48>
   113e8:	bl	11224 <__libc_start_main@plt>
   113ec:	bl	1138c <abort@plt>
   113f0:	andeq	sl, r1, r0, asr #29
   113f4:	andeq	r3, r1, ip, lsr r7
   113f8:	andeq	sl, r1, r0, ror #28
   113fc:	ldr	r3, [pc, #20]	; 11418 <__assert_fail@plt+0x68>
   11400:	ldr	r2, [pc, #20]	; 1141c <__assert_fail@plt+0x6c>
   11404:	add	r3, pc, r3
   11408:	ldr	r2, [r3, r2]
   1140c:	cmp	r2, #0
   11410:	bxeq	lr
   11414:	b	1123c <__gmon_start__@plt>
   11418:	strdeq	sl, [r1], -r4
   1141c:	andeq	r0, r0, r0, lsr #2
   11420:	ldr	r0, [pc, #24]	; 11440 <__assert_fail@plt+0x90>
   11424:	ldr	r3, [pc, #24]	; 11444 <__assert_fail@plt+0x94>
   11428:	cmp	r3, r0
   1142c:	bxeq	lr
   11430:	ldr	r3, [pc, #16]	; 11448 <__assert_fail@plt+0x98>
   11434:	cmp	r3, #0
   11438:	bxeq	lr
   1143c:	bx	r3
   11440:	andeq	ip, r2, ip, ror r1
   11444:	andeq	ip, r2, ip, ror r1
   11448:	andeq	r0, r0, r0
   1144c:	ldr	r0, [pc, #36]	; 11478 <__assert_fail@plt+0xc8>
   11450:	ldr	r1, [pc, #36]	; 1147c <__assert_fail@plt+0xcc>
   11454:	sub	r1, r1, r0
   11458:	asr	r1, r1, #2
   1145c:	add	r1, r1, r1, lsr #31
   11460:	asrs	r1, r1, #1
   11464:	bxeq	lr
   11468:	ldr	r3, [pc, #16]	; 11480 <__assert_fail@plt+0xd0>
   1146c:	cmp	r3, #0
   11470:	bxeq	lr
   11474:	bx	r3
   11478:	andeq	ip, r2, ip, ror r1
   1147c:	andeq	ip, r2, ip, ror r1
   11480:	andeq	r0, r0, r0
   11484:	push	{r4, lr}
   11488:	ldr	r4, [pc, #24]	; 114a8 <__assert_fail@plt+0xf8>
   1148c:	ldrb	r3, [r4]
   11490:	cmp	r3, #0
   11494:	popne	{r4, pc}
   11498:	bl	11420 <__assert_fail@plt+0x70>
   1149c:	mov	r3, #1
   114a0:	strb	r3, [r4]
   114a4:	pop	{r4, pc}
   114a8:	andeq	ip, r2, r4, lsr #3
   114ac:	b	1144c <__assert_fail@plt+0x9c>
   114b0:	push	{fp}		; (str fp, [sp, #-4]!)
   114b4:	add	fp, sp, #0
   114b8:	sub	sp, sp, #12
   114bc:	mov	r3, r0
   114c0:	strb	r3, [fp, #-5]
   114c4:	ldrb	r3, [fp, #-5]
   114c8:	mov	r0, r3
   114cc:	add	sp, fp, #0
   114d0:	pop	{fp}		; (ldr fp, [sp], #4)
   114d4:	bx	lr
   114d8:	str	fp, [sp, #-8]!
   114dc:	str	lr, [sp, #4]
   114e0:	add	fp, sp, #4
   114e4:	movw	r0, #44808	; 0xaf08
   114e8:	movt	r0, #1
   114ec:	bl	11284 <gettext@plt>
   114f0:	mov	r2, r0
   114f4:	movw	r3, #49564	; 0xc19c
   114f8:	movt	r3, #2
   114fc:	ldr	r3, [r3]
   11500:	mov	r1, r3
   11504:	mov	r0, r2
   11508:	bl	1108c <fputs_unlocked@plt>
   1150c:	nop	{0}
   11510:	sub	sp, fp, #4
   11514:	ldr	fp, [sp]
   11518:	add	sp, sp, #4
   1151c:	pop	{pc}		; (ldr pc, [sp], #4)
   11520:	str	fp, [sp, #-8]!
   11524:	str	lr, [sp, #4]
   11528:	add	fp, sp, #4
   1152c:	sub	sp, sp, #80	; 0x50
   11530:	str	r0, [fp, #-80]	; 0xffffffb0
   11534:	movw	r2, #45236	; 0xb0b4
   11538:	movt	r2, #1
   1153c:	sub	r3, fp, #72	; 0x48
   11540:	ldrd	r0, [r2]
   11544:	strd	r0, [r3]
   11548:	ldrd	r0, [r2, #8]
   1154c:	strd	r0, [r3, #8]
   11550:	ldrd	r0, [r2, #16]
   11554:	strd	r0, [r3, #16]
   11558:	ldrd	r0, [r2, #24]
   1155c:	strd	r0, [r3, #24]
   11560:	ldrd	r0, [r2, #32]
   11564:	strd	r0, [r3, #32]
   11568:	ldrd	r0, [r2, #40]	; 0x28
   1156c:	strd	r0, [r3, #40]	; 0x28
   11570:	ldrd	r0, [r2, #48]	; 0x30
   11574:	strd	r0, [r3, #48]	; 0x30
   11578:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1157c:	str	r3, [fp, #-8]
   11580:	sub	r3, fp, #72	; 0x48
   11584:	str	r3, [fp, #-12]
   11588:	b	11598 <__assert_fail@plt+0x1e8>
   1158c:	ldr	r3, [fp, #-12]
   11590:	add	r3, r3, #8
   11594:	str	r3, [fp, #-12]
   11598:	ldr	r3, [fp, #-12]
   1159c:	ldr	r3, [r3]
   115a0:	cmp	r3, #0
   115a4:	beq	115c8 <__assert_fail@plt+0x218>
   115a8:	ldr	r3, [fp, #-12]
   115ac:	ldr	r3, [r3]
   115b0:	mov	r1, r3
   115b4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   115b8:	bl	110a4 <strcmp@plt>
   115bc:	mov	r3, r0
   115c0:	cmp	r3, #0
   115c4:	bne	1158c <__assert_fail@plt+0x1dc>
   115c8:	ldr	r3, [fp, #-12]
   115cc:	ldr	r3, [r3, #4]
   115d0:	cmp	r3, #0
   115d4:	beq	115e4 <__assert_fail@plt+0x234>
   115d8:	ldr	r3, [fp, #-12]
   115dc:	ldr	r3, [r3, #4]
   115e0:	str	r3, [fp, #-8]
   115e4:	movw	r0, #44864	; 0xaf40
   115e8:	movt	r0, #1
   115ec:	bl	11284 <gettext@plt>
   115f0:	mov	r3, r0
   115f4:	movw	r2, #44888	; 0xaf58
   115f8:	movt	r2, #1
   115fc:	movw	r1, #44928	; 0xaf80
   11600:	movt	r1, #1
   11604:	mov	r0, r3
   11608:	bl	110bc <printf@plt>
   1160c:	mov	r1, #0
   11610:	mov	r0, #5
   11614:	bl	1132c <setlocale@plt>
   11618:	str	r0, [fp, #-16]
   1161c:	ldr	r3, [fp, #-16]
   11620:	cmp	r3, #0
   11624:	beq	11670 <__assert_fail@plt+0x2c0>
   11628:	mov	r2, #3
   1162c:	movw	r1, #44944	; 0xaf90
   11630:	movt	r1, #1
   11634:	ldr	r0, [fp, #-16]
   11638:	bl	11380 <strncmp@plt>
   1163c:	mov	r3, r0
   11640:	cmp	r3, #0
   11644:	beq	11670 <__assert_fail@plt+0x2c0>
   11648:	movw	r0, #44948	; 0xaf94
   1164c:	movt	r0, #1
   11650:	bl	11284 <gettext@plt>
   11654:	mov	r2, r0
   11658:	movw	r3, #49564	; 0xc19c
   1165c:	movt	r3, #2
   11660:	ldr	r3, [r3]
   11664:	mov	r1, r3
   11668:	mov	r0, r2
   1166c:	bl	1108c <fputs_unlocked@plt>
   11670:	movw	r0, #45020	; 0xafdc
   11674:	movt	r0, #1
   11678:	bl	11284 <gettext@plt>
   1167c:	mov	r3, r0
   11680:	ldr	r2, [fp, #-80]	; 0xffffffb0
   11684:	movw	r1, #44888	; 0xaf58
   11688:	movt	r1, #1
   1168c:	mov	r0, r3
   11690:	bl	110bc <printf@plt>
   11694:	movw	r0, #45048	; 0xaff8
   11698:	movt	r0, #1
   1169c:	bl	11284 <gettext@plt>
   116a0:	ldr	r2, [fp, #-8]
   116a4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   116a8:	cmp	r2, r3
   116ac:	bne	116bc <__assert_fail@plt+0x30c>
   116b0:	movw	r3, #45100	; 0xb02c
   116b4:	movt	r3, #1
   116b8:	b	116c4 <__assert_fail@plt+0x314>
   116bc:	movw	r3, #45112	; 0xb038
   116c0:	movt	r3, #1
   116c4:	mov	r2, r3
   116c8:	ldr	r1, [fp, #-8]
   116cc:	bl	110bc <printf@plt>
   116d0:	nop	{0}
   116d4:	sub	sp, fp, #4
   116d8:	ldr	fp, [sp]
   116dc:	add	sp, sp, #4
   116e0:	pop	{pc}		; (ldr pc, [sp], #4)
   116e4:	push	{fp}		; (str fp, [sp, #-4]!)
   116e8:	add	fp, sp, #0
   116ec:	sub	sp, sp, #12
   116f0:	str	r0, [fp, #-8]
   116f4:	ldr	r3, [fp, #-8]
   116f8:	ldr	r3, [r3, #16]
   116fc:	and	r3, r3, #61440	; 0xf000
   11700:	cmp	r3, #32768	; 0x8000
   11704:	beq	1171c <__assert_fail@plt+0x36c>
   11708:	ldr	r3, [fp, #-8]
   1170c:	ldr	r3, [r3, #16]
   11710:	and	r3, r3, #61440	; 0xf000
   11714:	cmp	r3, #40960	; 0xa000
   11718:	bne	11724 <__assert_fail@plt+0x374>
   1171c:	mov	r3, #1
   11720:	b	11728 <__assert_fail@plt+0x378>
   11724:	mov	r3, #0
   11728:	and	r3, r3, #1
   1172c:	uxtb	r3, r3
   11730:	mov	r0, r3
   11734:	add	sp, fp, #0
   11738:	pop	{fp}		; (ldr fp, [sp], #4)
   1173c:	bx	lr
   11740:	str	r4, [sp, #-12]!
   11744:	str	fp, [sp, #4]
   11748:	str	lr, [sp, #8]
   1174c:	add	fp, sp, #8
   11750:	sub	sp, sp, #12
   11754:	str	r0, [fp, #-16]
   11758:	ldr	r3, [fp, #-16]
   1175c:	cmp	r3, #0
   11760:	beq	1179c <__assert_fail@plt+0x3ec>
   11764:	movw	r3, #49552	; 0xc190
   11768:	movt	r3, #2
   1176c:	ldr	r4, [r3]
   11770:	movw	r0, #45536	; 0xb1e0
   11774:	movt	r0, #1
   11778:	bl	11284 <gettext@plt>
   1177c:	mov	r1, r0
   11780:	movw	r3, #49660	; 0xc1fc
   11784:	movt	r3, #2
   11788:	ldr	r3, [r3]
   1178c:	mov	r2, r3
   11790:	mov	r0, r4
   11794:	bl	112a8 <fprintf@plt>
   11798:	b	118a0 <__assert_fail@plt+0x4f0>
   1179c:	movw	r0, #45576	; 0xb208
   117a0:	movt	r0, #1
   117a4:	bl	11284 <gettext@plt>
   117a8:	movw	r3, #49660	; 0xc1fc
   117ac:	movt	r3, #2
   117b0:	ldr	r1, [r3]
   117b4:	movw	r3, #49660	; 0xc1fc
   117b8:	movt	r3, #2
   117bc:	ldr	r3, [r3]
   117c0:	mov	r2, r3
   117c4:	bl	110bc <printf@plt>
   117c8:	movw	r0, #45648	; 0xb250
   117cc:	movt	r0, #1
   117d0:	bl	11284 <gettext@plt>
   117d4:	mov	r2, r0
   117d8:	movw	r3, #49564	; 0xc19c
   117dc:	movt	r3, #2
   117e0:	ldr	r3, [r3]
   117e4:	mov	r1, r3
   117e8:	mov	r0, r2
   117ec:	bl	1108c <fputs_unlocked@plt>
   117f0:	bl	114d8 <__assert_fail@plt+0x128>
   117f4:	movw	r0, #45844	; 0xb314
   117f8:	movt	r0, #1
   117fc:	bl	11284 <gettext@plt>
   11800:	mov	r2, r0
   11804:	movw	r3, #49564	; 0xc19c
   11808:	movt	r3, #2
   1180c:	ldr	r3, [r3]
   11810:	mov	r1, r3
   11814:	mov	r0, r2
   11818:	bl	1108c <fputs_unlocked@plt>
   1181c:	movw	r0, #46148	; 0xb444
   11820:	movt	r0, #1
   11824:	bl	11284 <gettext@plt>
   11828:	mov	r2, r0
   1182c:	movw	r3, #49564	; 0xc19c
   11830:	movt	r3, #2
   11834:	ldr	r3, [r3]
   11838:	mov	r1, r3
   1183c:	mov	r0, r2
   11840:	bl	1108c <fputs_unlocked@plt>
   11844:	movw	r0, #46452	; 0xb574
   11848:	movt	r0, #1
   1184c:	bl	11284 <gettext@plt>
   11850:	mov	r2, r0
   11854:	movw	r3, #49564	; 0xc19c
   11858:	movt	r3, #2
   1185c:	ldr	r3, [r3]
   11860:	mov	r1, r3
   11864:	mov	r0, r2
   11868:	bl	1108c <fputs_unlocked@plt>
   1186c:	movw	r0, #46500	; 0xb5a4
   11870:	movt	r0, #1
   11874:	bl	11284 <gettext@plt>
   11878:	mov	r2, r0
   1187c:	movw	r3, #49564	; 0xc19c
   11880:	movt	r3, #2
   11884:	ldr	r3, [r3]
   11888:	mov	r1, r3
   1188c:	mov	r0, r2
   11890:	bl	1108c <fputs_unlocked@plt>
   11894:	movw	r0, #46556	; 0xb5dc
   11898:	movt	r0, #1
   1189c:	bl	11520 <__assert_fail@plt+0x170>
   118a0:	ldr	r0, [fp, #-16]
   118a4:	bl	11260 <exit@plt>
   118a8:	push	{fp}		; (str fp, [sp, #-4]!)
   118ac:	add	fp, sp, #0
   118b0:	sub	sp, sp, #12
   118b4:	str	r0, [fp, #-8]
   118b8:	movw	r3, #49644	; 0xc1ec
   118bc:	movt	r3, #2
   118c0:	ldrb	r3, [r3]
   118c4:	eor	r3, r3, #1
   118c8:	uxtb	r3, r3
   118cc:	cmp	r3, #0
   118d0:	beq	11918 <__assert_fail@plt+0x568>
   118d4:	ldr	r3, [fp, #-8]
   118d8:	cmp	r3, #160	; 0xa0
   118dc:	beq	11910 <__assert_fail@plt+0x560>
   118e0:	ldr	r3, [fp, #-8]
   118e4:	movw	r2, #8199	; 0x2007
   118e8:	cmp	r3, r2
   118ec:	beq	11910 <__assert_fail@plt+0x560>
   118f0:	ldr	r3, [fp, #-8]
   118f4:	movw	r2, #8239	; 0x202f
   118f8:	cmp	r3, r2
   118fc:	beq	11910 <__assert_fail@plt+0x560>
   11900:	ldr	r3, [fp, #-8]
   11904:	movw	r2, #8288	; 0x2060
   11908:	cmp	r3, r2
   1190c:	bne	11918 <__assert_fail@plt+0x568>
   11910:	mov	r3, #1
   11914:	b	1191c <__assert_fail@plt+0x56c>
   11918:	mov	r3, #0
   1191c:	mov	r0, r3
   11920:	add	sp, fp, #0
   11924:	pop	{fp}		; (ldr fp, [sp], #4)
   11928:	bx	lr
   1192c:	str	fp, [sp, #-8]!
   11930:	str	lr, [sp, #4]
   11934:	add	fp, sp, #4
   11938:	sub	sp, sp, #8
   1193c:	str	r0, [fp, #-8]
   11940:	ldr	r0, [fp, #-8]
   11944:	bl	112f0 <btowc@plt>
   11948:	mov	r3, r0
   1194c:	mov	r0, r3
   11950:	bl	118a8 <__assert_fail@plt+0x4f8>
   11954:	mov	r3, r0
   11958:	mov	r0, r3
   1195c:	sub	sp, fp, #4
   11960:	ldr	fp, [sp]
   11964:	add	sp, sp, #4
   11968:	pop	{pc}		; (ldr pc, [sp], #4)
   1196c:	str	r4, [sp, #-12]!
   11970:	str	fp, [sp, #4]
   11974:	str	lr, [sp, #8]
   11978:	add	fp, sp, #8
   1197c:	sub	sp, sp, #52	; 0x34
   11980:	strd	r0, [fp, #-52]	; 0xffffffcc
   11984:	strd	r2, [fp, #-60]	; 0xffffffc4
   11988:	ldr	r3, [pc, #500]	; 11b84 <__assert_fail@plt+0x7d4>
   1198c:	str	r3, [fp, #-16]
   11990:	movw	r3, #49624	; 0xc1d8
   11994:	movt	r3, #2
   11998:	ldrb	r3, [r3]
   1199c:	cmp	r3, #0
   119a0:	beq	119e0 <__assert_fail@plt+0x630>
   119a4:	movw	r3, #49632	; 0xc1e0
   119a8:	movt	r3, #2
   119ac:	ldr	r4, [r3]
   119b0:	sub	r3, fp, #40	; 0x28
   119b4:	mov	r2, r3
   119b8:	ldrd	r0, [fp, #-52]	; 0xffffffcc
   119bc:	bl	14b84 <__assert_fail@plt+0x37d4>
   119c0:	mov	r3, r0
   119c4:	mov	r2, r3
   119c8:	mov	r1, r4
   119cc:	ldr	r0, [fp, #-16]
   119d0:	bl	110bc <printf@plt>
   119d4:	movw	r3, #46988	; 0xb78c
   119d8:	movt	r3, #1
   119dc:	str	r3, [fp, #-16]
   119e0:	movw	r3, #49625	; 0xc1d9
   119e4:	movt	r3, #2
   119e8:	ldrb	r3, [r3]
   119ec:	cmp	r3, #0
   119f0:	beq	11a30 <__assert_fail@plt+0x680>
   119f4:	movw	r3, #49632	; 0xc1e0
   119f8:	movt	r3, #2
   119fc:	ldr	r4, [r3]
   11a00:	sub	r3, fp, #40	; 0x28
   11a04:	mov	r2, r3
   11a08:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   11a0c:	bl	14b84 <__assert_fail@plt+0x37d4>
   11a10:	mov	r3, r0
   11a14:	mov	r2, r3
   11a18:	mov	r1, r4
   11a1c:	ldr	r0, [fp, #-16]
   11a20:	bl	110bc <printf@plt>
   11a24:	movw	r3, #46988	; 0xb78c
   11a28:	movt	r3, #1
   11a2c:	str	r3, [fp, #-16]
   11a30:	movw	r3, #49626	; 0xc1da
   11a34:	movt	r3, #2
   11a38:	ldrb	r3, [r3]
   11a3c:	cmp	r3, #0
   11a40:	beq	11a80 <__assert_fail@plt+0x6d0>
   11a44:	movw	r3, #49632	; 0xc1e0
   11a48:	movt	r3, #2
   11a4c:	ldr	r4, [r3]
   11a50:	sub	r3, fp, #40	; 0x28
   11a54:	mov	r2, r3
   11a58:	ldrd	r0, [fp, #4]
   11a5c:	bl	14b84 <__assert_fail@plt+0x37d4>
   11a60:	mov	r3, r0
   11a64:	mov	r2, r3
   11a68:	mov	r1, r4
   11a6c:	ldr	r0, [fp, #-16]
   11a70:	bl	110bc <printf@plt>
   11a74:	movw	r3, #46988	; 0xb78c
   11a78:	movt	r3, #1
   11a7c:	str	r3, [fp, #-16]
   11a80:	movw	r3, #49627	; 0xc1db
   11a84:	movt	r3, #2
   11a88:	ldrb	r3, [r3]
   11a8c:	cmp	r3, #0
   11a90:	beq	11ad0 <__assert_fail@plt+0x720>
   11a94:	movw	r3, #49632	; 0xc1e0
   11a98:	movt	r3, #2
   11a9c:	ldr	r4, [r3]
   11aa0:	sub	r3, fp, #40	; 0x28
   11aa4:	mov	r2, r3
   11aa8:	ldrd	r0, [fp, #12]
   11aac:	bl	14b84 <__assert_fail@plt+0x37d4>
   11ab0:	mov	r3, r0
   11ab4:	mov	r2, r3
   11ab8:	mov	r1, r4
   11abc:	ldr	r0, [fp, #-16]
   11ac0:	bl	110bc <printf@plt>
   11ac4:	movw	r3, #46988	; 0xb78c
   11ac8:	movt	r3, #1
   11acc:	str	r3, [fp, #-16]
   11ad0:	movw	r3, #49628	; 0xc1dc
   11ad4:	movt	r3, #2
   11ad8:	ldrb	r3, [r3]
   11adc:	cmp	r3, #0
   11ae0:	beq	11b14 <__assert_fail@plt+0x764>
   11ae4:	movw	r3, #49632	; 0xc1e0
   11ae8:	movt	r3, #2
   11aec:	ldr	r4, [r3]
   11af0:	sub	r3, fp, #40	; 0x28
   11af4:	mov	r2, r3
   11af8:	ldrd	r0, [fp, #20]
   11afc:	bl	14b84 <__assert_fail@plt+0x37d4>
   11b00:	mov	r3, r0
   11b04:	mov	r2, r3
   11b08:	mov	r1, r4
   11b0c:	ldr	r0, [fp, #-16]
   11b10:	bl	110bc <printf@plt>
   11b14:	ldr	r3, [fp, #28]
   11b18:	cmp	r3, #0
   11b1c:	beq	11b64 <__assert_fail@plt+0x7b4>
   11b20:	mov	r1, #10
   11b24:	ldr	r0, [fp, #28]
   11b28:	bl	1129c <strchr@plt>
   11b2c:	mov	r3, r0
   11b30:	cmp	r3, #0
   11b34:	beq	11b50 <__assert_fail@plt+0x7a0>
   11b38:	ldr	r2, [fp, #28]
   11b3c:	mov	r1, #3
   11b40:	mov	r0, #0
   11b44:	bl	1766c <__assert_fail@plt+0x62bc>
   11b48:	mov	r3, r0
   11b4c:	b	11b54 <__assert_fail@plt+0x7a4>
   11b50:	ldr	r3, [fp, #28]
   11b54:	mov	r1, r3
   11b58:	movw	r0, #46560	; 0xb5e0
   11b5c:	movt	r0, #1
   11b60:	bl	110bc <printf@plt>
   11b64:	mov	r0, #10
   11b68:	bl	113a4 <putchar_unlocked@plt>
   11b6c:	nop	{0}
   11b70:	sub	sp, fp, #8
   11b74:	ldr	r4, [sp]
   11b78:	ldr	fp, [sp, #4]
   11b7c:	add	sp, sp, #8
   11b80:	pop	{pc}		; (ldr pc, [sp], #4)
   11b84:	andeq	fp, r1, sp, lsl #15
   11b88:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11b8c:	strd	r6, [sp, #8]
   11b90:	strd	r8, [sp, #16]
   11b94:	str	fp, [sp, #24]
   11b98:	str	lr, [sp, #28]
   11b9c:	add	fp, sp, #28
   11ba0:	sub	sp, sp, #16384	; 0x4000
   11ba4:	sub	sp, sp, #72	; 0x48
   11ba8:	sub	ip, fp, #16384	; 0x4000
   11bac:	sub	ip, ip, #28
   11bb0:	str	r0, [ip, #-52]	; 0xffffffcc
   11bb4:	sub	r0, fp, #16384	; 0x4000
   11bb8:	sub	r0, r0, #28
   11bbc:	str	r1, [r0, #-56]	; 0xffffffc8
   11bc0:	sub	r1, fp, #16384	; 0x4000
   11bc4:	sub	r1, r1, #28
   11bc8:	str	r2, [r1, #-60]	; 0xffffffc4
   11bcc:	sub	r2, fp, #16384	; 0x4000
   11bd0:	sub	r2, r2, #28
   11bd4:	str	r3, [r2, #-64]	; 0xffffffc0
   11bd8:	mov	r3, #0
   11bdc:	strb	r3, [fp, #-45]	; 0xffffffd3
   11be0:	sub	r3, fp, #16384	; 0x4000
   11be4:	sub	r3, r3, #28
   11be8:	ldr	r3, [r3, #-60]	; 0xffffffc4
   11bec:	cmp	r3, #0
   11bf0:	beq	11c08 <__assert_fail@plt+0x858>
   11bf4:	sub	r3, fp, #16384	; 0x4000
   11bf8:	sub	r3, r3, #28
   11bfc:	ldr	r3, [r3, #-64]	; 0xffffffc0
   11c00:	cmp	r3, #0
   11c04:	bne	11c10 <__assert_fail@plt+0x860>
   11c08:	mov	r3, #0
   11c0c:	b	11e48 <__assert_fail@plt+0xa98>
   11c10:	mov	r2, #0
   11c14:	mov	r3, #0
   11c18:	strd	r2, [fp, #-44]	; 0xffffffd4
   11c1c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11c20:	strd	r2, [fp, #-36]	; 0xffffffdc
   11c24:	b	11de4 <__assert_fail@plt+0xa34>
   11c28:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11c2c:	cmn	r3, #1
   11c30:	bne	11c78 <__assert_fail@plt+0x8c8>
   11c34:	bl	112c0 <__errno_location@plt>
   11c38:	mov	r3, r0
   11c3c:	ldr	r4, [r3]
   11c40:	sub	r3, fp, #16384	; 0x4000
   11c44:	sub	r3, r3, #28
   11c48:	ldr	r2, [r3, #-52]	; 0xffffffcc
   11c4c:	mov	r1, #3
   11c50:	mov	r0, #0
   11c54:	bl	1766c <__assert_fail@plt+0x62bc>
   11c58:	mov	r3, r0
   11c5c:	movw	r2, #46564	; 0xb5e4
   11c60:	movt	r2, #1
   11c64:	mov	r1, r4
   11c68:	mov	r0, #0
   11c6c:	bl	111e8 <error@plt>
   11c70:	mov	r3, #0
   11c74:	b	11e48 <__assert_fail@plt+0xa98>
   11c78:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11c7c:	mov	r2, r3
   11c80:	mov	r3, #0
   11c84:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   11c88:	adds	r6, r0, r2
   11c8c:	adc	r7, r1, r3
   11c90:	strd	r6, [fp, #-44]	; 0xffffffd4
   11c94:	sub	r3, fp, #16384	; 0x4000
   11c98:	sub	r3, r3, #28
   11c9c:	sub	r3, r3, #44	; 0x2c
   11ca0:	str	r3, [fp, #-52]	; 0xffffffcc
   11ca4:	sub	r3, fp, #16384	; 0x4000
   11ca8:	sub	r3, r3, #28
   11cac:	sub	r3, r3, #44	; 0x2c
   11cb0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   11cb4:	add	r3, r3, r2
   11cb8:	str	r3, [fp, #-60]	; 0xffffffc4
   11cbc:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   11cc0:	strd	r2, [fp, #-68]	; 0xffffffbc
   11cc4:	ldrb	r3, [fp, #-45]	; 0xffffffd3
   11cc8:	eor	r3, r3, #1
   11ccc:	uxtb	r3, r3
   11cd0:	cmp	r3, #0
   11cd4:	beq	11d28 <__assert_fail@plt+0x978>
   11cd8:	b	11d14 <__assert_fail@plt+0x964>
   11cdc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11ce0:	add	r2, r3, #1
   11ce4:	str	r2, [fp, #-52]	; 0xffffffcc
   11ce8:	ldrb	r3, [r3]
   11cec:	cmp	r3, #10
   11cf0:	moveq	r3, #1
   11cf4:	movne	r3, #0
   11cf8:	uxtb	r3, r3
   11cfc:	mov	r2, r3
   11d00:	asr	r3, r2, #31
   11d04:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   11d08:	adds	r8, r0, r2
   11d0c:	adc	r9, r1, r3
   11d10:	strd	r8, [fp, #-36]	; 0xffffffdc
   11d14:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11d18:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11d1c:	cmp	r2, r3
   11d20:	bne	11cdc <__assert_fail@plt+0x92c>
   11d24:	b	11d98 <__assert_fail@plt+0x9e8>
   11d28:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11d2c:	mov	r2, #10
   11d30:	strb	r2, [r3]
   11d34:	b	11d78 <__assert_fail@plt+0x9c8>
   11d38:	ldr	r3, [fp, #-52]	; 0xffffffcc
   11d3c:	add	r3, r3, #1
   11d40:	str	r3, [fp, #-52]	; 0xffffffcc
   11d44:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   11d48:	adds	r1, r2, #1
   11d4c:	sub	r0, fp, #16384	; 0x4000
   11d50:	sub	r0, r0, #100	; 0x64
   11d54:	str	r1, [r0]
   11d58:	adc	r3, r3, #0
   11d5c:	sub	r2, fp, #16384	; 0x4000
   11d60:	sub	r2, r2, #96	; 0x60
   11d64:	str	r3, [r2]
   11d68:	sub	r3, fp, #16384	; 0x4000
   11d6c:	sub	r3, r3, #100	; 0x64
   11d70:	ldrd	r2, [r3]
   11d74:	strd	r2, [fp, #-36]	; 0xffffffdc
   11d78:	mov	r1, #10
   11d7c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   11d80:	bl	1117c <rawmemchr@plt>
   11d84:	str	r0, [fp, #-52]	; 0xffffffcc
   11d88:	ldr	r2, [fp, #-52]	; 0xffffffcc
   11d8c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11d90:	cmp	r2, r3
   11d94:	bcc	11d38 <__assert_fail@plt+0x988>
   11d98:	ldrd	r0, [fp, #-36]	; 0xffffffdc
   11d9c:	ldrd	r2, [fp, #-68]	; 0xffffffbc
   11da0:	subs	r4, r0, r2
   11da4:	sbc	r5, r1, r3
   11da8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   11dac:	movw	r3, #34953	; 0x8889
   11db0:	movt	r3, #34952	; 0x8888
   11db4:	umull	r2, r3, r3, r2
   11db8:	lsr	r3, r3, #3
   11dbc:	mov	r2, r3
   11dc0:	mov	r3, #0
   11dc4:	cmp	r5, r3
   11dc8:	cmpeq	r4, r2
   11dcc:	bhi	11ddc <__assert_fail@plt+0xa2c>
   11dd0:	mov	r3, #1
   11dd4:	strb	r3, [fp, #-45]	; 0xffffffd3
   11dd8:	b	11de4 <__assert_fail@plt+0xa34>
   11ddc:	mov	r3, #0
   11de0:	strb	r3, [fp, #-45]	; 0xffffffd3
   11de4:	sub	r3, fp, #16384	; 0x4000
   11de8:	sub	r3, r3, #28
   11dec:	sub	r3, r3, #44	; 0x2c
   11df0:	sub	r2, fp, #16384	; 0x4000
   11df4:	sub	r2, r2, #28
   11df8:	mov	r0, r2
   11dfc:	mov	r2, #16384	; 0x4000
   11e00:	mov	r1, r3
   11e04:	ldr	r0, [r0, #-56]	; 0xffffffc8
   11e08:	bl	1815c <__assert_fail@plt+0x6dac>
   11e0c:	str	r0, [fp, #-56]	; 0xffffffc8
   11e10:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11e14:	cmp	r3, #0
   11e18:	bne	11c28 <__assert_fail@plt+0x878>
   11e1c:	sub	r3, fp, #16384	; 0x4000
   11e20:	sub	r3, r3, #28
   11e24:	ldr	r1, [r3, #-64]	; 0xffffffc0
   11e28:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11e2c:	strd	r2, [r1]
   11e30:	sub	r3, fp, #16384	; 0x4000
   11e34:	sub	r3, r3, #28
   11e38:	ldr	r1, [r3, #-60]	; 0xffffffc4
   11e3c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   11e40:	strd	r2, [r1]
   11e44:	mov	r3, #1
   11e48:	mov	r0, r3
   11e4c:	sub	sp, fp, #28
   11e50:	ldrd	r4, [sp]
   11e54:	ldrd	r6, [sp, #8]
   11e58:	ldrd	r8, [sp, #16]
   11e5c:	ldr	fp, [sp, #24]
   11e60:	add	sp, sp, #28
   11e64:	pop	{pc}		; (ldr pc, [sp], #4)
   11e68:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11e6c:	strd	r6, [sp, #8]
   11e70:	strd	r8, [sp, #16]
   11e74:	str	fp, [sp, #24]
   11e78:	str	lr, [sp, #28]
   11e7c:	add	fp, sp, #28
   11e80:	sub	sp, sp, #16640	; 0x4100
   11e84:	sub	sp, sp, #120	; 0x78
   11e88:	sub	r3, fp, #16384	; 0x4000
   11e8c:	sub	r3, r3, #28
   11e90:	str	r0, [r3, #-156]	; 0xffffff64
   11e94:	sub	r3, fp, #16384	; 0x4000
   11e98:	sub	r3, r3, #28
   11e9c:	str	r1, [r3, #-160]	; 0xffffff60
   11ea0:	sub	r3, fp, #16384	; 0x4000
   11ea4:	sub	r3, r3, #28
   11ea8:	str	r2, [r3, #-164]	; 0xffffff5c
   11eac:	mov	r3, #1
   11eb0:	strb	r3, [fp, #-29]	; 0xffffffe3
   11eb4:	sub	r3, fp, #16384	; 0x4000
   11eb8:	sub	r3, r3, #28
   11ebc:	ldr	r3, [r3, #-160]	; 0xffffff60
   11ec0:	cmp	r3, #0
   11ec4:	bne	11edc <__assert_fail@plt+0xb2c>
   11ec8:	movw	r0, #46568	; 0xb5e8
   11ecc:	movt	r0, #1
   11ed0:	bl	11284 <gettext@plt>
   11ed4:	mov	r3, r0
   11ed8:	b	11ee8 <__assert_fail@plt+0xb38>
   11edc:	sub	r3, fp, #16384	; 0x4000
   11ee0:	sub	r3, r3, #28
   11ee4:	ldr	r3, [r3, #-160]	; 0xffffff60
   11ee8:	str	r3, [fp, #-116]	; 0xffffff8c
   11eec:	mov	r2, #0
   11ef0:	mov	r3, #0
   11ef4:	strd	r2, [fp, #-60]	; 0xffffffc4
   11ef8:	sub	r3, fp, #16384	; 0x4000
   11efc:	sub	r3, r3, #28
   11f00:	sub	r3, r3, #128	; 0x80
   11f04:	mov	r1, r3
   11f08:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   11f0c:	strd	r2, [r1]
   11f10:	sub	r3, fp, #16384	; 0x4000
   11f14:	sub	r3, r3, #28
   11f18:	sub	r3, r3, #128	; 0x80
   11f1c:	ldrd	r2, [r3]
   11f20:	strd	r2, [fp, #-52]	; 0xffffffcc
   11f24:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   11f28:	strd	r2, [fp, #-44]	; 0xffffffd4
   11f2c:	sub	r3, fp, #16384	; 0x4000
   11f30:	sub	r3, r3, #28
   11f34:	sub	r3, r3, #112	; 0x70
   11f38:	mov	r1, r3
   11f3c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   11f40:	strd	r2, [r1, #-8]
   11f44:	bl	111b8 <__ctype_get_mb_cur_max@plt>
   11f48:	mov	r3, r0
   11f4c:	cmp	r3, #1
   11f50:	bls	11f78 <__assert_fail@plt+0xbc8>
   11f54:	movw	r3, #49627	; 0xc1db
   11f58:	movt	r3, #2
   11f5c:	ldrb	r3, [r3]
   11f60:	strb	r3, [fp, #-61]	; 0xffffffc3
   11f64:	movw	r3, #49626	; 0xc1da
   11f68:	movt	r3, #2
   11f6c:	ldrb	r3, [r3]
   11f70:	strb	r3, [fp, #-62]	; 0xffffffc2
   11f74:	b	11fc4 <__assert_fail@plt+0xc14>
   11f78:	movw	r3, #49627	; 0xc1db
   11f7c:	movt	r3, #2
   11f80:	ldrb	r3, [r3]
   11f84:	cmp	r3, #0
   11f88:	bne	11fa0 <__assert_fail@plt+0xbf0>
   11f8c:	movw	r3, #49626	; 0xc1da
   11f90:	movt	r3, #2
   11f94:	ldrb	r3, [r3]
   11f98:	cmp	r3, #0
   11f9c:	beq	11fa8 <__assert_fail@plt+0xbf8>
   11fa0:	mov	r3, #1
   11fa4:	b	11fac <__assert_fail@plt+0xbfc>
   11fa8:	mov	r3, #0
   11fac:	strb	r3, [fp, #-61]	; 0xffffffc3
   11fb0:	ldrb	r3, [fp, #-61]	; 0xffffffc3
   11fb4:	and	r3, r3, #1
   11fb8:	strb	r3, [fp, #-61]	; 0xffffffc3
   11fbc:	mov	r3, #0
   11fc0:	strb	r3, [fp, #-62]	; 0xffffffc2
   11fc4:	movw	r3, #49625	; 0xc1d9
   11fc8:	movt	r3, #2
   11fcc:	ldrb	r3, [r3]
   11fd0:	cmp	r3, #0
   11fd4:	bne	11fec <__assert_fail@plt+0xc3c>
   11fd8:	movw	r3, #49628	; 0xc1dc
   11fdc:	movt	r3, #2
   11fe0:	ldrb	r3, [r3]
   11fe4:	cmp	r3, #0
   11fe8:	beq	11ff4 <__assert_fail@plt+0xc44>
   11fec:	mov	r3, #1
   11ff0:	b	11ff8 <__assert_fail@plt+0xc48>
   11ff4:	mov	r3, #0
   11ff8:	strb	r3, [fp, #-117]	; 0xffffff8b
   11ffc:	ldrb	r3, [fp, #-117]	; 0xffffff8b
   12000:	and	r3, r3, #1
   12004:	strb	r3, [fp, #-117]	; 0xffffff8b
   12008:	ldrb	r3, [fp, #-61]	; 0xffffffc3
   1200c:	eor	r3, r3, #1
   12010:	uxtb	r3, r3
   12014:	cmp	r3, #0
   12018:	bne	12048 <__assert_fail@plt+0xc98>
   1201c:	ldrb	r3, [fp, #-62]	; 0xffffffc2
   12020:	cmp	r3, #0
   12024:	bne	12048 <__assert_fail@plt+0xc98>
   12028:	movw	r3, #49624	; 0xc1d8
   1202c:	movt	r3, #2
   12030:	ldrb	r3, [r3]
   12034:	cmp	r3, #0
   12038:	bne	12048 <__assert_fail@plt+0xc98>
   1203c:	ldrb	r3, [fp, #-117]	; 0xffffff8b
   12040:	cmp	r3, #0
   12044:	beq	12078 <__assert_fail@plt+0xcc8>
   12048:	sub	r3, fp, #16384	; 0x4000
   1204c:	sub	r3, r3, #28
   12050:	mov	r1, r3
   12054:	mov	r3, #2
   12058:	str	r3, [sp, #8]
   1205c:	mov	r2, #0
   12060:	mov	r3, #0
   12064:	strd	r2, [sp]
   12068:	mov	r2, #0
   1206c:	mov	r3, #0
   12070:	ldr	r0, [r1, #-156]	; 0xffffff64
   12074:	bl	14778 <__assert_fail@plt+0x33c8>
   12078:	ldrb	r3, [fp, #-61]	; 0xffffffc3
   1207c:	cmp	r3, #0
   12080:	beq	12484 <__assert_fail@plt+0x10d4>
   12084:	ldrb	r3, [fp, #-62]	; 0xffffffc2
   12088:	eor	r3, r3, #1
   1208c:	uxtb	r3, r3
   12090:	cmp	r3, #0
   12094:	beq	12484 <__assert_fail@plt+0x10d4>
   12098:	movw	r3, #49624	; 0xc1d8
   1209c:	movt	r3, #2
   120a0:	ldrb	r3, [r3]
   120a4:	eor	r3, r3, #1
   120a8:	uxtb	r3, r3
   120ac:	cmp	r3, #0
   120b0:	beq	12484 <__assert_fail@plt+0x10d4>
   120b4:	ldrb	r3, [fp, #-117]	; 0xffffff8b
   120b8:	eor	r3, r3, #1
   120bc:	uxtb	r3, r3
   120c0:	cmp	r3, #0
   120c4:	beq	12484 <__assert_fail@plt+0x10d4>
   120c8:	mov	r3, #0
   120cc:	strb	r3, [fp, #-63]	; 0xffffffc1
   120d0:	sub	r3, fp, #16384	; 0x4000
   120d4:	sub	r3, r3, #28
   120d8:	ldr	r3, [r3, #-164]	; 0xffffff5c
   120dc:	ldr	r3, [r3]
   120e0:	cmp	r3, #0
   120e4:	ble	12120 <__assert_fail@plt+0xd70>
   120e8:	sub	r3, fp, #16384	; 0x4000
   120ec:	sub	r3, r3, #28
   120f0:	ldr	r3, [r3, #-164]	; 0xffffff5c
   120f4:	add	r2, r3, #8
   120f8:	sub	r3, fp, #16384	; 0x4000
   120fc:	sub	r3, r3, #28
   12100:	mov	r1, r2
   12104:	ldr	r0, [r3, #-156]	; 0xffffff64
   12108:	bl	1aeec <_obstack_memory_used@@Base+0xdec>
   1210c:	mov	r2, r0
   12110:	sub	r3, fp, #16384	; 0x4000
   12114:	sub	r3, r3, #28
   12118:	ldr	r3, [r3, #-164]	; 0xffffff5c
   1211c:	str	r2, [r3]
   12120:	sub	r3, fp, #16384	; 0x4000
   12124:	sub	r3, r3, #28
   12128:	ldr	r3, [r3, #-164]	; 0xffffff5c
   1212c:	ldr	r3, [r3]
   12130:	cmp	r3, #0
   12134:	bne	1237c <__assert_fail@plt+0xfcc>
   12138:	sub	r3, fp, #16384	; 0x4000
   1213c:	sub	r3, r3, #28
   12140:	ldr	r3, [r3, #-164]	; 0xffffff5c
   12144:	add	r3, r3, #8
   12148:	mov	r0, r3
   1214c:	bl	116e4 <__assert_fail@plt+0x334>
   12150:	mov	r3, r0
   12154:	cmp	r3, #0
   12158:	beq	1237c <__assert_fail@plt+0xfcc>
   1215c:	sub	r3, fp, #16384	; 0x4000
   12160:	sub	r3, r3, #28
   12164:	ldr	r3, [r3, #-164]	; 0xffffff5c
   12168:	ldrd	r2, [r3, #56]	; 0x38
   1216c:	cmp	r2, #0
   12170:	sbcs	r3, r3, #0
   12174:	blt	1237c <__assert_fail@plt+0xfcc>
   12178:	sub	r3, fp, #16384	; 0x4000
   1217c:	sub	r3, r3, #28
   12180:	ldr	r3, [r3, #-164]	; 0xffffff5c
   12184:	ldrd	r2, [r3, #56]	; 0x38
   12188:	mov	r3, r2
   1218c:	str	r3, [fp, #-124]	; 0xffffff84
   12190:	ldrd	r2, [fp, #4]
   12194:	cmp	r2, #0
   12198:	sbcs	r3, r3, #0
   1219c:	bge	121c8 <__assert_fail@plt+0xe18>
   121a0:	sub	r3, fp, #16384	; 0x4000
   121a4:	sub	r3, r3, #28
   121a8:	mov	r1, r3
   121ac:	mov	r3, #1
   121b0:	str	r3, [sp]
   121b4:	mov	r2, #0
   121b8:	mov	r3, #0
   121bc:	ldr	r0, [r1, #-156]	; 0xffffff64
   121c0:	bl	111ac <lseek64@plt>
   121c4:	strd	r0, [fp, #4]
   121c8:	movw	r3, #49640	; 0xc1e8
   121cc:	movt	r3, #2
   121d0:	ldr	r1, [r3]
   121d4:	ldr	r2, [fp, #-124]	; 0xffffff84
   121d8:	udiv	r3, r2, r1
   121dc:	mul	r3, r1, r3
   121e0:	sub	r3, r2, r3
   121e4:	cmp	r3, #0
   121e8:	beq	1226c <__assert_fail@plt+0xebc>
   121ec:	ldr	r3, [fp, #-124]	; 0xffffff84
   121f0:	mov	r0, r3
   121f4:	mov	r1, #0
   121f8:	ldrd	r2, [fp, #4]
   121fc:	cmp	r0, r2
   12200:	sbcs	r3, r1, r3
   12204:	blt	12248 <__assert_fail@plt+0xe98>
   12208:	ldr	r3, [fp, #-124]	; 0xffffff84
   1220c:	mov	r0, r3
   12210:	mov	r1, #0
   12214:	ldrd	r2, [fp, #4]
   12218:	subs	ip, r0, r2
   1221c:	sub	lr, fp, #16384	; 0x4000
   12220:	sub	lr, lr, #204	; 0xcc
   12224:	str	ip, [lr]
   12228:	sbc	r3, r1, r3
   1222c:	sub	r2, fp, #16384	; 0x4000
   12230:	sub	r2, r2, #200	; 0xc8
   12234:	str	r3, [r2]
   12238:	sub	r3, fp, #16384	; 0x4000
   1223c:	sub	r3, r3, #204	; 0xcc
   12240:	ldrd	r0, [r3]
   12244:	b	12250 <__assert_fail@plt+0xea0>
   12248:	mov	r0, #0
   1224c:	mov	r1, #0
   12250:	sub	r3, fp, #16384	; 0x4000
   12254:	sub	r3, r3, #28
   12258:	sub	r3, r3, #128	; 0x80
   1225c:	strd	r0, [r3]
   12260:	mov	r3, #1
   12264:	strb	r3, [fp, #-63]	; 0xffffffc1
   12268:	b	1237c <__assert_fail@plt+0xfcc>
   1226c:	sub	r3, fp, #16384	; 0x4000
   12270:	sub	r3, r3, #28
   12274:	ldr	r3, [r3, #-164]	; 0xffffff5c
   12278:	ldr	r3, [r3, #64]	; 0x40
   1227c:	cmp	r3, #0
   12280:	ble	122b8 <__assert_fail@plt+0xf08>
   12284:	sub	r3, fp, #16384	; 0x4000
   12288:	sub	r3, r3, #28
   1228c:	ldr	r3, [r3, #-164]	; 0xffffff5c
   12290:	ldr	r3, [r3, #64]	; 0x40
   12294:	cmp	r3, #536870912	; 0x20000000
   12298:	bhi	122b8 <__assert_fail@plt+0xf08>
   1229c:	sub	r3, fp, #16384	; 0x4000
   122a0:	sub	r3, r3, #28
   122a4:	ldr	r3, [r3, #-164]	; 0xffffff5c
   122a8:	ldr	r3, [r3, #64]	; 0x40
   122ac:	add	r3, r3, #1
   122b0:	mov	r2, r3
   122b4:	b	122bc <__assert_fail@plt+0xf0c>
   122b8:	movw	r2, #513	; 0x201
   122bc:	ldr	r1, [fp, #-124]	; 0xffffff84
   122c0:	udiv	r3, r1, r2
   122c4:	mul	r3, r2, r3
   122c8:	sub	r3, r1, r3
   122cc:	ldr	r2, [fp, #-124]	; 0xffffff84
   122d0:	sub	r3, r2, r3
   122d4:	mov	r2, r3
   122d8:	mov	r3, #0
   122dc:	strd	r2, [fp, #-132]	; 0xffffff7c
   122e0:	ldrd	r2, [fp, #4]
   122e4:	cmp	r2, #0
   122e8:	sbcs	r3, r3, #0
   122ec:	blt	1237c <__assert_fail@plt+0xfcc>
   122f0:	ldrd	r0, [fp, #4]
   122f4:	ldrd	r2, [fp, #-132]	; 0xffffff7c
   122f8:	cmp	r0, r2
   122fc:	sbcs	r3, r1, r3
   12300:	bge	1237c <__assert_fail@plt+0xfcc>
   12304:	sub	r3, fp, #16384	; 0x4000
   12308:	sub	r3, r3, #28
   1230c:	mov	r1, r3
   12310:	mov	r3, #1
   12314:	str	r3, [sp]
   12318:	ldrd	r2, [fp, #-132]	; 0xffffff7c
   1231c:	ldr	r0, [r1, #-156]	; 0xffffff64
   12320:	bl	111ac <lseek64@plt>
   12324:	mov	r2, r0
   12328:	mov	r3, r1
   1232c:	cmp	r2, #0
   12330:	sbcs	r3, r3, #0
   12334:	blt	1237c <__assert_fail@plt+0xfcc>
   12338:	ldrd	r0, [fp, #-132]	; 0xffffff7c
   1233c:	ldrd	r2, [fp, #4]
   12340:	subs	ip, r0, r2
   12344:	sub	lr, fp, #16384	; 0x4000
   12348:	sub	lr, lr, #212	; 0xd4
   1234c:	str	ip, [lr]
   12350:	sbc	r3, r1, r3
   12354:	sub	r2, fp, #16384	; 0x4000
   12358:	sub	r2, r2, #208	; 0xd0
   1235c:	str	r3, [r2]
   12360:	sub	r3, fp, #16384	; 0x4000
   12364:	sub	r3, r3, #212	; 0xd4
   12368:	ldrd	r0, [r3]
   1236c:	sub	r3, fp, #16384	; 0x4000
   12370:	sub	r3, r3, #28
   12374:	sub	r3, r3, #128	; 0x80
   12378:	strd	r0, [r3]
   1237c:	ldrb	r3, [fp, #-63]	; 0xffffffc1
   12380:	eor	r3, r3, #1
   12384:	uxtb	r3, r3
   12388:	cmp	r3, #0
   1238c:	beq	13048 <__assert_fail@plt+0x1c98>
   12390:	sub	r3, fp, #16384	; 0x4000
   12394:	sub	r3, r3, #28
   12398:	mov	r1, r3
   1239c:	mov	r3, #2
   123a0:	str	r3, [sp, #8]
   123a4:	mov	r2, #0
   123a8:	mov	r3, #0
   123ac:	strd	r2, [sp]
   123b0:	mov	r2, #0
   123b4:	mov	r3, #0
   123b8:	ldr	r0, [r1, #-156]	; 0xffffff64
   123bc:	bl	14778 <__assert_fail@plt+0x33c8>
   123c0:	b	12448 <__assert_fail@plt+0x1098>
   123c4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   123c8:	cmn	r3, #1
   123cc:	bne	12414 <__assert_fail@plt+0x1064>
   123d0:	bl	112c0 <__errno_location@plt>
   123d4:	mov	r3, r0
   123d8:	ldr	r4, [r3]
   123dc:	ldr	r2, [fp, #-116]	; 0xffffff8c
   123e0:	mov	r1, #3
   123e4:	mov	r0, #0
   123e8:	bl	1766c <__assert_fail@plt+0x62bc>
   123ec:	mov	r3, r0
   123f0:	movw	r2, #46564	; 0xb5e4
   123f4:	movt	r2, #1
   123f8:	mov	r1, r4
   123fc:	mov	r0, #0
   12400:	bl	111e8 <error@plt>
   12404:	mov	r3, #0
   12408:	strb	r3, [fp, #-29]	; 0xffffffe3
   1240c:	nop	{0}
   12410:	b	13048 <__assert_fail@plt+0x1c98>
   12414:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12418:	mov	r0, r3
   1241c:	mov	r1, #0
   12420:	sub	r3, fp, #16384	; 0x4000
   12424:	sub	r3, r3, #28
   12428:	sub	r3, r3, #128	; 0x80
   1242c:	ldrd	r2, [r3]
   12430:	adds	r4, r0, r2
   12434:	adc	r5, r1, r3
   12438:	sub	r3, fp, #16384	; 0x4000
   1243c:	sub	r3, r3, #28
   12440:	sub	r3, r3, #128	; 0x80
   12444:	strd	r4, [r3]
   12448:	sub	r3, fp, #16384	; 0x4000
   1244c:	sub	r3, r3, #28
   12450:	sub	r3, r3, #112	; 0x70
   12454:	sub	r2, fp, #16384	; 0x4000
   12458:	sub	r2, r2, #28
   1245c:	mov	r0, r2
   12460:	mov	r2, #16384	; 0x4000
   12464:	mov	r1, r3
   12468:	ldr	r0, [r0, #-156]	; 0xffffff64
   1246c:	bl	1815c <__assert_fail@plt+0x6dac>
   12470:	str	r0, [fp, #-36]	; 0xffffffdc
   12474:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12478:	cmp	r3, #0
   1247c:	bne	123c4 <__assert_fail@plt+0x1014>
   12480:	b	13048 <__assert_fail@plt+0x1c98>
   12484:	ldrb	r3, [fp, #-62]	; 0xffffffc2
   12488:	eor	r3, r3, #1
   1248c:	uxtb	r3, r3
   12490:	cmp	r3, #0
   12494:	beq	124f0 <__assert_fail@plt+0x1140>
   12498:	ldrb	r3, [fp, #-117]	; 0xffffff8b
   1249c:	eor	r3, r3, #1
   124a0:	uxtb	r3, r3
   124a4:	cmp	r3, #0
   124a8:	beq	124f0 <__assert_fail@plt+0x1140>
   124ac:	movw	r3, #49452	; 0xc12c
   124b0:	movt	r3, #2
   124b4:	ldr	r4, [r3]
   124b8:	sub	r3, fp, #16384	; 0x4000
   124bc:	sub	r3, r3, #28
   124c0:	sub	r3, r3, #128	; 0x80
   124c4:	sub	r2, fp, #16384	; 0x4000
   124c8:	sub	r2, r2, #28
   124cc:	sub	r2, r2, #120	; 0x78
   124d0:	sub	r1, fp, #16384	; 0x4000
   124d4:	sub	r1, r1, #28
   124d8:	ldr	r1, [r1, #-156]	; 0xffffff64
   124dc:	ldr	r0, [fp, #-116]	; 0xffffff8c
   124e0:	blx	r4
   124e4:	mov	r3, r0
   124e8:	strb	r3, [fp, #-29]	; 0xffffffe3
   124ec:	b	1304c <__assert_fail@plt+0x1c9c>
   124f0:	bl	111b8 <__ctype_get_mb_cur_max@plt>
   124f4:	mov	r3, r0
   124f8:	cmp	r3, #1
   124fc:	bls	12c30 <__assert_fail@plt+0x1880>
   12500:	mov	r3, #0
   12504:	strb	r3, [fp, #-64]	; 0xffffffc0
   12508:	mov	r2, #0
   1250c:	mov	r3, #0
   12510:	strd	r2, [fp, #-76]	; 0xffffffb4
   12514:	sub	r3, fp, #16384	; 0x4000
   12518:	sub	r3, r3, #28
   1251c:	sub	r1, r3, #136	; 0x88
   12520:	mov	r2, #0
   12524:	mov	r3, #0
   12528:	strd	r2, [r1]
   1252c:	mov	r3, #0
   12530:	strb	r3, [fp, #-77]	; 0xffffffb3
   12534:	mov	r3, #0
   12538:	str	r3, [fp, #-84]	; 0xffffffac
   1253c:	b	12b98 <__assert_fail@plt+0x17e8>
   12540:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12544:	cmn	r3, #1
   12548:	bne	1258c <__assert_fail@plt+0x11dc>
   1254c:	bl	112c0 <__errno_location@plt>
   12550:	mov	r3, r0
   12554:	ldr	r4, [r3]
   12558:	ldr	r2, [fp, #-116]	; 0xffffff8c
   1255c:	mov	r1, #3
   12560:	mov	r0, #0
   12564:	bl	1766c <__assert_fail@plt+0x62bc>
   12568:	mov	r3, r0
   1256c:	movw	r2, #46564	; 0xb5e4
   12570:	movt	r2, #1
   12574:	mov	r1, r4
   12578:	mov	r0, #0
   1257c:	bl	111e8 <error@plt>
   12580:	mov	r3, #0
   12584:	strb	r3, [fp, #-29]	; 0xffffffe3
   12588:	b	12bd4 <__assert_fail@plt+0x1824>
   1258c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12590:	mov	r0, r3
   12594:	mov	r1, #0
   12598:	sub	r3, fp, #16384	; 0x4000
   1259c:	sub	r3, r3, #28
   125a0:	sub	r3, r3, #128	; 0x80
   125a4:	ldrd	r2, [r3]
   125a8:	adds	ip, r0, r2
   125ac:	sub	lr, fp, #16384	; 0x4000
   125b0:	sub	lr, lr, #220	; 0xdc
   125b4:	str	ip, [lr]
   125b8:	adc	r3, r1, r3
   125bc:	sub	r2, fp, #16384	; 0x4000
   125c0:	sub	r2, r2, #216	; 0xd8
   125c4:	str	r3, [r2]
   125c8:	sub	r3, fp, #16384	; 0x4000
   125cc:	sub	r3, r3, #28
   125d0:	sub	r3, r3, #128	; 0x80
   125d4:	sub	r2, fp, #16384	; 0x4000
   125d8:	sub	r2, r2, #220	; 0xdc
   125dc:	ldrd	r0, [r2]
   125e0:	strd	r0, [r3]
   125e4:	sub	r3, fp, #16384	; 0x4000
   125e8:	sub	r3, r3, #28
   125ec:	sub	r3, r3, #112	; 0x70
   125f0:	str	r3, [fp, #-88]	; 0xffffffa8
   125f4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   125f8:	ldr	r3, [fp, #-84]	; 0xffffffac
   125fc:	add	r3, r2, r3
   12600:	str	r3, [fp, #-36]	; 0xffffffdc
   12604:	mov	r3, #1
   12608:	strb	r3, [fp, #-93]	; 0xffffffa3
   1260c:	ldrb	r3, [fp, #-77]	; 0xffffffb3
   12610:	eor	r3, r3, #1
   12614:	uxtb	r3, r3
   12618:	cmp	r3, #0
   1261c:	beq	12668 <__assert_fail@plt+0x12b8>
   12620:	ldr	r3, [fp, #-88]	; 0xffffffa8
   12624:	ldrb	r3, [r3]
   12628:	mov	r0, r3
   1262c:	bl	14d50 <__assert_fail@plt+0x39a0>
   12630:	mov	r3, r0
   12634:	cmp	r3, #0
   12638:	beq	12668 <__assert_fail@plt+0x12b8>
   1263c:	mov	r3, #1
   12640:	str	r3, [fp, #-92]	; 0xffffffa4
   12644:	ldr	r3, [fp, #-88]	; 0xffffffa8
   12648:	ldrb	r3, [r3]
   1264c:	mov	r2, r3
   12650:	sub	r3, fp, #16384	; 0x4000
   12654:	sub	r3, r3, #28
   12658:	str	r2, [r3, #-148]	; 0xffffff6c
   1265c:	mov	r3, #0
   12660:	strb	r3, [fp, #-93]	; 0xffffffa3
   12664:	b	12768 <__assert_fail@plt+0x13b8>
   12668:	mov	r3, #1
   1266c:	strb	r3, [fp, #-77]	; 0xffffffb3
   12670:	sub	r3, fp, #16384	; 0x4000
   12674:	sub	r3, r3, #28
   12678:	mov	r2, r3
   1267c:	sub	r3, fp, #16384	; 0x4000
   12680:	sub	r3, r3, #28
   12684:	sub	r1, r2, #144	; 0x90
   12688:	sub	r3, r3, #136	; 0x88
   1268c:	ldrd	r2, [r3]
   12690:	strd	r2, [r1]
   12694:	sub	r3, fp, #16384	; 0x4000
   12698:	sub	r3, r3, #28
   1269c:	sub	r3, r3, #136	; 0x88
   126a0:	sub	r0, fp, #16384	; 0x4000
   126a4:	sub	r0, r0, #28
   126a8:	sub	r0, r0, #148	; 0x94
   126ac:	ldr	r2, [fp, #-36]	; 0xffffffdc
   126b0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   126b4:	bl	14db0 <__assert_fail@plt+0x3a00>
   126b8:	str	r0, [fp, #-92]	; 0xffffffa4
   126bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   126c0:	cmn	r3, #2
   126c4:	bne	126f0 <__assert_fail@plt+0x1340>
   126c8:	sub	r3, fp, #16384	; 0x4000
   126cc:	sub	r3, r3, #28
   126d0:	mov	r2, r3
   126d4:	sub	r3, fp, #16384	; 0x4000
   126d8:	sub	r3, r3, #28
   126dc:	sub	r1, r2, #136	; 0x88
   126e0:	sub	r3, r3, #144	; 0x90
   126e4:	ldrd	r2, [r3]
   126e8:	strd	r2, [r1]
   126ec:	b	12b44 <__assert_fail@plt+0x1794>
   126f0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   126f4:	cmn	r3, #1
   126f8:	bne	12718 <__assert_fail@plt+0x1368>
   126fc:	ldr	r3, [fp, #-88]	; 0xffffffa8
   12700:	add	r3, r3, #1
   12704:	str	r3, [fp, #-88]	; 0xffffffa8
   12708:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1270c:	sub	r3, r3, #1
   12710:	str	r3, [fp, #-36]	; 0xffffffdc
   12714:	b	12b38 <__assert_fail@plt+0x1788>
   12718:	sub	r3, fp, #16384	; 0x4000
   1271c:	sub	r3, r3, #28
   12720:	sub	r3, r3, #136	; 0x88
   12724:	mov	r0, r3
   12728:	bl	11128 <mbsinit@plt>
   1272c:	mov	r3, r0
   12730:	cmp	r3, #0
   12734:	beq	12740 <__assert_fail@plt+0x1390>
   12738:	mov	r3, #0
   1273c:	strb	r3, [fp, #-77]	; 0xffffffb3
   12740:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12744:	cmp	r3, #0
   12748:	bne	12768 <__assert_fail@plt+0x13b8>
   1274c:	sub	r3, fp, #16384	; 0x4000
   12750:	sub	r3, r3, #28
   12754:	mov	r2, r3
   12758:	mov	r3, #0
   1275c:	str	r3, [r2, #-148]	; 0xffffff6c
   12760:	mov	r3, #1
   12764:	str	r3, [fp, #-92]	; 0xffffffa4
   12768:	sub	r3, fp, #16384	; 0x4000
   1276c:	sub	r3, r3, #28
   12770:	ldr	r3, [r3, #-148]	; 0xffffff6c
   12774:	sub	r3, r3, #9
   12778:	cmp	r3, #23
   1277c:	ldrls	pc, [pc, r3, lsl #2]
   12780:	b	12930 <__assert_fail@plt+0x1580>
   12784:	andeq	r2, r1, ip, asr r8
   12788:	andeq	r2, r1, r4, ror #15
   1278c:	andeq	r2, r1, r8, ror #17
   12790:	andeq	r2, r1, r0, lsr r8
   12794:	andeq	r2, r1, r0, lsr r8
   12798:	andeq	r2, r1, r0, lsr r9
   1279c:	andeq	r2, r1, r0, lsr r9
   127a0:	andeq	r2, r1, r0, lsr r9
   127a4:	andeq	r2, r1, r0, lsr r9
   127a8:	andeq	r2, r1, r0, lsr r9
   127ac:	andeq	r2, r1, r0, lsr r9
   127b0:	andeq	r2, r1, r0, lsr r9
   127b4:	andeq	r2, r1, r0, lsr r9
   127b8:	andeq	r2, r1, r0, lsr r9
   127bc:	andeq	r2, r1, r0, lsr r9
   127c0:	andeq	r2, r1, r0, lsr r9
   127c4:	andeq	r2, r1, r0, lsr r9
   127c8:	andeq	r2, r1, r0, lsr r9
   127cc:	andeq	r2, r1, r0, lsr r9
   127d0:	andeq	r2, r1, r0, lsr r9
   127d4:	andeq	r2, r1, r0, lsr r9
   127d8:	andeq	r2, r1, r0, lsr r9
   127dc:	andeq	r2, r1, r0, lsr r9
   127e0:	andeq	r2, r1, r4, lsr #17
   127e4:	sub	r3, fp, #16384	; 0x4000
   127e8:	sub	r3, r3, #28
   127ec:	sub	r3, r3, #112	; 0x70
   127f0:	ldrd	r2, [r3, #-8]
   127f4:	adds	r1, r2, #1
   127f8:	sub	r0, fp, #16384	; 0x4000
   127fc:	sub	r0, r0, #228	; 0xe4
   12800:	str	r1, [r0]
   12804:	adc	r3, r3, #0
   12808:	sub	r2, fp, #16384	; 0x4000
   1280c:	sub	r2, r2, #224	; 0xe0
   12810:	str	r3, [r2]
   12814:	sub	r3, fp, #16384	; 0x4000
   12818:	sub	r3, r3, #28
   1281c:	sub	r3, r3, #112	; 0x70
   12820:	sub	r2, fp, #16384	; 0x4000
   12824:	sub	r2, r2, #228	; 0xe4
   12828:	ldrd	r0, [r2]
   1282c:	strd	r0, [r3, #-8]
   12830:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   12834:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   12838:	cmp	r1, r3
   1283c:	cmpeq	r0, r2
   12840:	bls	1284c <__assert_fail@plt+0x149c>
   12844:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   12848:	strd	r2, [fp, #-60]	; 0xffffffc4
   1284c:	mov	r2, #0
   12850:	mov	r3, #0
   12854:	strd	r2, [fp, #-76]	; 0xffffffb4
   12858:	b	128e8 <__assert_fail@plt+0x1538>
   1285c:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   12860:	mvn	r2, #7
   12864:	mvn	r3, #0
   12868:	and	r8, r0, r2
   1286c:	and	r9, r1, r3
   12870:	adds	r3, r8, #8
   12874:	sub	r2, fp, #16640	; 0x4100
   12878:	sub	r2, r2, #28
   1287c:	str	r3, [r2]
   12880:	adc	r3, r9, #0
   12884:	sub	r2, fp, #16640	; 0x4100
   12888:	sub	r2, r2, #24
   1288c:	str	r3, [r2]
   12890:	sub	r3, fp, #16640	; 0x4100
   12894:	sub	r3, r3, #28
   12898:	ldrd	r2, [r3]
   1289c:	strd	r2, [fp, #-76]	; 0xffffffb4
   128a0:	b	128e8 <__assert_fail@plt+0x1538>
   128a4:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   128a8:	adds	r1, r2, #1
   128ac:	sub	r0, fp, #16640	; 0x4100
   128b0:	sub	r0, r0, #36	; 0x24
   128b4:	str	r1, [r0]
   128b8:	adc	r3, r3, #0
   128bc:	sub	r2, fp, #16640	; 0x4100
   128c0:	sub	r2, r2, #32
   128c4:	str	r3, [r2]
   128c8:	sub	r3, fp, #16640	; 0x4100
   128cc:	sub	r3, r3, #36	; 0x24
   128d0:	ldrd	r2, [r3]
   128d4:	strd	r2, [fp, #-76]	; 0xffffffb4
   128d8:	b	128e8 <__assert_fail@plt+0x1538>
   128dc:	nop	{0}
   128e0:	b	128e8 <__assert_fail@plt+0x1538>
   128e4:	nop	{0}
   128e8:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   128ec:	mov	r1, #0
   128f0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   128f4:	adds	ip, r2, r0
   128f8:	sub	lr, fp, #16640	; 0x4100
   128fc:	sub	lr, lr, #44	; 0x2c
   12900:	str	ip, [lr]
   12904:	adc	r3, r3, r1
   12908:	sub	r2, fp, #16640	; 0x4100
   1290c:	sub	r2, r2, #40	; 0x28
   12910:	str	r3, [r2]
   12914:	sub	r3, fp, #16640	; 0x4100
   12918:	sub	r3, r3, #44	; 0x2c
   1291c:	ldrd	r2, [r3]
   12920:	strd	r2, [fp, #-44]	; 0xffffffd4
   12924:	mov	r3, #0
   12928:	strb	r3, [fp, #-64]	; 0xffffffc0
   1292c:	b	12ae4 <__assert_fail@plt+0x1734>
   12930:	ldrb	r3, [fp, #-93]	; 0xffffffa3
   12934:	cmp	r3, #0
   12938:	beq	12a20 <__assert_fail@plt+0x1670>
   1293c:	sub	r3, fp, #16384	; 0x4000
   12940:	sub	r3, r3, #28
   12944:	ldr	r3, [r3, #-148]	; 0xffffff6c
   12948:	mov	r0, r3
   1294c:	bl	11188 <iswprint@plt>
   12950:	mov	r3, r0
   12954:	cmp	r3, #0
   12958:	beq	12a20 <__assert_fail@plt+0x1670>
   1295c:	movw	r3, #49628	; 0xc1dc
   12960:	movt	r3, #2
   12964:	ldrb	r3, [r3]
   12968:	cmp	r3, #0
   1296c:	beq	129d4 <__assert_fail@plt+0x1624>
   12970:	sub	r3, fp, #16384	; 0x4000
   12974:	sub	r3, r3, #28
   12978:	ldr	r3, [r3, #-148]	; 0xffffff6c
   1297c:	mov	r0, r3
   12980:	bl	110e0 <wcwidth@plt>
   12984:	str	r0, [fp, #-136]	; 0xffffff78
   12988:	ldr	r3, [fp, #-136]	; 0xffffff78
   1298c:	cmp	r3, #0
   12990:	ble	129d4 <__assert_fail@plt+0x1624>
   12994:	ldr	r3, [fp, #-136]	; 0xffffff78
   12998:	mov	r0, r3
   1299c:	asr	r1, r0, #31
   129a0:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   129a4:	adds	ip, r2, r0
   129a8:	sub	lr, fp, #16640	; 0x4100
   129ac:	sub	lr, lr, #52	; 0x34
   129b0:	str	ip, [lr]
   129b4:	adc	r3, r3, r1
   129b8:	sub	r2, fp, #16640	; 0x4100
   129bc:	sub	r2, r2, #48	; 0x30
   129c0:	str	r3, [r2]
   129c4:	sub	r3, fp, #16640	; 0x4100
   129c8:	sub	r3, r3, #52	; 0x34
   129cc:	ldrd	r2, [r3]
   129d0:	strd	r2, [fp, #-76]	; 0xffffffb4
   129d4:	sub	r3, fp, #16384	; 0x4000
   129d8:	sub	r3, r3, #28
   129dc:	ldr	r3, [r3, #-148]	; 0xffffff6c
   129e0:	mov	r0, r3
   129e4:	bl	11278 <iswspace@plt>
   129e8:	mov	r3, r0
   129ec:	cmp	r3, #0
   129f0:	bne	128dc <__assert_fail@plt+0x152c>
   129f4:	sub	r3, fp, #16384	; 0x4000
   129f8:	sub	r3, r3, #28
   129fc:	ldr	r3, [r3, #-148]	; 0xffffff6c
   12a00:	mov	r0, r3
   12a04:	bl	118a8 <__assert_fail@plt+0x4f8>
   12a08:	mov	r3, r0
   12a0c:	cmp	r3, #0
   12a10:	bne	128dc <__assert_fail@plt+0x152c>
   12a14:	mov	r3, #1
   12a18:	strb	r3, [fp, #-64]	; 0xffffffc0
   12a1c:	b	12ae0 <__assert_fail@plt+0x1730>
   12a20:	ldrb	r3, [fp, #-93]	; 0xffffffa3
   12a24:	eor	r3, r3, #1
   12a28:	uxtb	r3, r3
   12a2c:	cmp	r3, #0
   12a30:	beq	12ae0 <__assert_fail@plt+0x1730>
   12a34:	bl	11254 <__ctype_b_loc@plt>
   12a38:	mov	r3, r0
   12a3c:	ldr	r4, [r3]
   12a40:	ldr	r3, [fp, #-88]	; 0xffffffa8
   12a44:	ldrb	r3, [r3]
   12a48:	mov	r0, r3
   12a4c:	bl	114b0 <__assert_fail@plt+0x100>
   12a50:	mov	r3, r0
   12a54:	lsl	r3, r3, #1
   12a58:	add	r3, r4, r3
   12a5c:	ldrh	r3, [r3]
   12a60:	and	r3, r3, #16384	; 0x4000
   12a64:	cmp	r3, #0
   12a68:	beq	12ae0 <__assert_fail@plt+0x1730>
   12a6c:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   12a70:	adds	r1, r2, #1
   12a74:	sub	r0, fp, #16640	; 0x4100
   12a78:	sub	r0, r0, #60	; 0x3c
   12a7c:	str	r1, [r0]
   12a80:	adc	r3, r3, #0
   12a84:	sub	r2, fp, #16640	; 0x4100
   12a88:	sub	r2, r2, #56	; 0x38
   12a8c:	str	r3, [r2]
   12a90:	sub	r3, fp, #16640	; 0x4100
   12a94:	sub	r3, r3, #60	; 0x3c
   12a98:	ldrd	r2, [r3]
   12a9c:	strd	r2, [fp, #-76]	; 0xffffffb4
   12aa0:	bl	11254 <__ctype_b_loc@plt>
   12aa4:	mov	r3, r0
   12aa8:	ldr	r4, [r3]
   12aac:	ldr	r3, [fp, #-88]	; 0xffffffa8
   12ab0:	ldrb	r3, [r3]
   12ab4:	mov	r0, r3
   12ab8:	bl	114b0 <__assert_fail@plt+0x100>
   12abc:	mov	r3, r0
   12ac0:	lsl	r3, r3, #1
   12ac4:	add	r3, r4, r3
   12ac8:	ldrh	r3, [r3]
   12acc:	and	r3, r3, #8192	; 0x2000
   12ad0:	cmp	r3, #0
   12ad4:	bne	128e4 <__assert_fail@plt+0x1534>
   12ad8:	mov	r3, #1
   12adc:	strb	r3, [fp, #-64]	; 0xffffffc0
   12ae0:	nop	{0}
   12ae4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12ae8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12aec:	add	r3, r2, r3
   12af0:	str	r3, [fp, #-88]	; 0xffffffa8
   12af4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   12af8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12afc:	sub	r3, r2, r3
   12b00:	str	r3, [fp, #-36]	; 0xffffffdc
   12b04:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   12b08:	adds	r1, r2, #1
   12b0c:	sub	r0, fp, #16640	; 0x4100
   12b10:	sub	r0, r0, #68	; 0x44
   12b14:	str	r1, [r0]
   12b18:	adc	r3, r3, #0
   12b1c:	sub	r2, fp, #16640	; 0x4100
   12b20:	sub	r2, r2, #64	; 0x40
   12b24:	str	r3, [r2]
   12b28:	sub	r3, fp, #16640	; 0x4100
   12b2c:	sub	r3, r3, #68	; 0x44
   12b30:	ldrd	r2, [r3]
   12b34:	strd	r2, [fp, #-52]	; 0xffffffcc
   12b38:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12b3c:	cmp	r3, #0
   12b40:	bne	12604 <__assert_fail@plt+0x1254>
   12b44:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12b48:	cmp	r3, #0
   12b4c:	beq	12b90 <__assert_fail@plt+0x17e0>
   12b50:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12b54:	cmp	r3, #16384	; 0x4000
   12b58:	bne	12b74 <__assert_fail@plt+0x17c4>
   12b5c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   12b60:	add	r3, r3, #1
   12b64:	str	r3, [fp, #-88]	; 0xffffffa8
   12b68:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12b6c:	sub	r3, r3, #1
   12b70:	str	r3, [fp, #-36]	; 0xffffffdc
   12b74:	sub	r3, fp, #16384	; 0x4000
   12b78:	sub	r3, r3, #28
   12b7c:	sub	r3, r3, #112	; 0x70
   12b80:	ldr	r2, [fp, #-36]	; 0xffffffdc
   12b84:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12b88:	mov	r0, r3
   12b8c:	bl	110ec <memmove@plt>
   12b90:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12b94:	str	r3, [fp, #-84]	; 0xffffffac
   12b98:	sub	r2, fp, #16384	; 0x4000
   12b9c:	sub	r2, r2, #28
   12ba0:	sub	r2, r2, #112	; 0x70
   12ba4:	ldr	r3, [fp, #-84]	; 0xffffffac
   12ba8:	add	r1, r2, r3
   12bac:	ldr	r3, [fp, #-84]	; 0xffffffac
   12bb0:	rsb	r2, r3, #16384	; 0x4000
   12bb4:	sub	r3, fp, #16384	; 0x4000
   12bb8:	sub	r3, r3, #28
   12bbc:	ldr	r0, [r3, #-156]	; 0xffffff64
   12bc0:	bl	1815c <__assert_fail@plt+0x6dac>
   12bc4:	str	r0, [fp, #-36]	; 0xffffffdc
   12bc8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12bcc:	cmp	r3, #0
   12bd0:	bne	12540 <__assert_fail@plt+0x1190>
   12bd4:	ldrd	r0, [fp, #-76]	; 0xffffffb4
   12bd8:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   12bdc:	cmp	r1, r3
   12be0:	cmpeq	r0, r2
   12be4:	bls	12bf0 <__assert_fail@plt+0x1840>
   12be8:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   12bec:	strd	r2, [fp, #-60]	; 0xffffffc4
   12bf0:	ldrb	r2, [fp, #-64]	; 0xffffffc0
   12bf4:	mov	r3, #0
   12bf8:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   12bfc:	adds	ip, r0, r2
   12c00:	sub	lr, fp, #16640	; 0x4100
   12c04:	sub	lr, lr, #76	; 0x4c
   12c08:	str	ip, [lr]
   12c0c:	adc	r3, r1, r3
   12c10:	sub	r2, fp, #16640	; 0x4100
   12c14:	sub	r2, r2, #72	; 0x48
   12c18:	str	r3, [r2]
   12c1c:	sub	r3, fp, #16640	; 0x4100
   12c20:	sub	r3, r3, #76	; 0x4c
   12c24:	ldrd	r2, [r3]
   12c28:	strd	r2, [fp, #-44]	; 0xffffffd4
   12c2c:	b	1304c <__assert_fail@plt+0x1c9c>
   12c30:	mov	r3, #0
   12c34:	strb	r3, [fp, #-94]	; 0xffffffa2
   12c38:	mov	r2, #0
   12c3c:	mov	r3, #0
   12c40:	strd	r2, [fp, #-108]	; 0xffffff94
   12c44:	b	12fbc <__assert_fail@plt+0x1c0c>
   12c48:	sub	r3, fp, #16384	; 0x4000
   12c4c:	sub	r3, r3, #28
   12c50:	sub	r3, r3, #112	; 0x70
   12c54:	str	r3, [fp, #-112]	; 0xffffff90
   12c58:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12c5c:	cmn	r3, #1
   12c60:	bne	12ca4 <__assert_fail@plt+0x18f4>
   12c64:	bl	112c0 <__errno_location@plt>
   12c68:	mov	r3, r0
   12c6c:	ldr	r4, [r3]
   12c70:	ldr	r2, [fp, #-116]	; 0xffffff8c
   12c74:	mov	r1, #3
   12c78:	mov	r0, #0
   12c7c:	bl	1766c <__assert_fail@plt+0x62bc>
   12c80:	mov	r3, r0
   12c84:	movw	r2, #46564	; 0xb5e4
   12c88:	movt	r2, #1
   12c8c:	mov	r1, r4
   12c90:	mov	r0, #0
   12c94:	bl	111e8 <error@plt>
   12c98:	mov	r3, #0
   12c9c:	strb	r3, [fp, #-29]	; 0xffffffe3
   12ca0:	b	12fec <__assert_fail@plt+0x1c3c>
   12ca4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12ca8:	mov	r0, r3
   12cac:	mov	r1, #0
   12cb0:	sub	r3, fp, #16384	; 0x4000
   12cb4:	sub	r3, r3, #28
   12cb8:	sub	r3, r3, #128	; 0x80
   12cbc:	ldrd	r2, [r3]
   12cc0:	adds	ip, r0, r2
   12cc4:	sub	lr, fp, #16384	; 0x4000
   12cc8:	sub	lr, lr, #236	; 0xec
   12ccc:	str	ip, [lr]
   12cd0:	adc	r3, r1, r3
   12cd4:	sub	r2, fp, #16384	; 0x4000
   12cd8:	sub	r2, r2, #232	; 0xe8
   12cdc:	str	r3, [r2]
   12ce0:	sub	r3, fp, #16384	; 0x4000
   12ce4:	sub	r3, r3, #28
   12ce8:	sub	r3, r3, #128	; 0x80
   12cec:	sub	r2, fp, #16384	; 0x4000
   12cf0:	sub	r2, r2, #236	; 0xec
   12cf4:	ldrd	r0, [r2]
   12cf8:	strd	r0, [r3]
   12cfc:	ldr	r2, [fp, #-112]	; 0xffffff90
   12d00:	add	r3, r2, #1
   12d04:	str	r3, [fp, #-112]	; 0xffffff90
   12d08:	ldrb	r3, [r2]
   12d0c:	sub	r3, r3, #9
   12d10:	cmp	r3, #23
   12d14:	ldrls	pc, [pc, r3, lsl #2]
   12d18:	b	12ec0 <__assert_fail@plt+0x1b10>
   12d1c:	strdeq	r2, [r1], -r4
   12d20:	andeq	r2, r1, ip, ror sp
   12d24:	andeq	r2, r1, r8, ror lr
   12d28:	andeq	r2, r1, r8, asr #27
   12d2c:	andeq	r2, r1, r8, asr #27
   12d30:	andeq	r2, r1, r0, asr #29
   12d34:	andeq	r2, r1, r0, asr #29
   12d38:	andeq	r2, r1, r0, asr #29
   12d3c:	andeq	r2, r1, r0, asr #29
   12d40:	andeq	r2, r1, r0, asr #29
   12d44:	andeq	r2, r1, r0, asr #29
   12d48:	andeq	r2, r1, r0, asr #29
   12d4c:	andeq	r2, r1, r0, asr #29
   12d50:	andeq	r2, r1, r0, asr #29
   12d54:	andeq	r2, r1, r0, asr #29
   12d58:	andeq	r2, r1, r0, asr #29
   12d5c:	andeq	r2, r1, r0, asr #29
   12d60:	andeq	r2, r1, r0, asr #29
   12d64:	andeq	r2, r1, r0, asr #29
   12d68:	andeq	r2, r1, r0, asr #29
   12d6c:	andeq	r2, r1, r0, asr #29
   12d70:	andeq	r2, r1, r0, asr #29
   12d74:	andeq	r2, r1, r0, asr #29
   12d78:	andeq	r2, r1, ip, lsr lr
   12d7c:	sub	r3, fp, #16384	; 0x4000
   12d80:	sub	r3, r3, #28
   12d84:	sub	r3, r3, #112	; 0x70
   12d88:	ldrd	r2, [r3, #-8]
   12d8c:	adds	r1, r2, #1
   12d90:	sub	r0, fp, #16384	; 0x4000
   12d94:	sub	r0, r0, #244	; 0xf4
   12d98:	str	r1, [r0]
   12d9c:	adc	r3, r3, #0
   12da0:	sub	r2, fp, #16384	; 0x4000
   12da4:	sub	r2, r2, #240	; 0xf0
   12da8:	str	r3, [r2]
   12dac:	sub	r3, fp, #16384	; 0x4000
   12db0:	sub	r3, r3, #28
   12db4:	sub	r3, r3, #112	; 0x70
   12db8:	sub	r2, fp, #16384	; 0x4000
   12dbc:	sub	r2, r2, #244	; 0xf4
   12dc0:	ldrd	r0, [r2]
   12dc4:	strd	r0, [r3, #-8]
   12dc8:	ldrd	r0, [fp, #-108]	; 0xffffff94
   12dcc:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   12dd0:	cmp	r1, r3
   12dd4:	cmpeq	r0, r2
   12dd8:	bls	12de4 <__assert_fail@plt+0x1a34>
   12ddc:	ldrd	r2, [fp, #-108]	; 0xffffff94
   12de0:	strd	r2, [fp, #-60]	; 0xffffffc4
   12de4:	mov	r2, #0
   12de8:	mov	r3, #0
   12dec:	strd	r2, [fp, #-108]	; 0xffffff94
   12df0:	b	12e78 <__assert_fail@plt+0x1ac8>
   12df4:	ldrd	r0, [fp, #-108]	; 0xffffff94
   12df8:	mvn	r2, #7
   12dfc:	mvn	r3, #0
   12e00:	and	r6, r0, r2
   12e04:	and	r7, r1, r3
   12e08:	adds	r3, r6, #8
   12e0c:	sub	r2, fp, #16640	; 0x4100
   12e10:	sub	r2, r2, #84	; 0x54
   12e14:	str	r3, [r2]
   12e18:	adc	r3, r7, #0
   12e1c:	sub	r2, fp, #16640	; 0x4100
   12e20:	sub	r2, r2, #80	; 0x50
   12e24:	str	r3, [r2]
   12e28:	sub	r3, fp, #16640	; 0x4100
   12e2c:	sub	r3, r3, #84	; 0x54
   12e30:	ldrd	r2, [r3]
   12e34:	strd	r2, [fp, #-108]	; 0xffffff94
   12e38:	b	12e78 <__assert_fail@plt+0x1ac8>
   12e3c:	ldrd	r2, [fp, #-108]	; 0xffffff94
   12e40:	adds	r1, r2, #1
   12e44:	sub	r0, fp, #16640	; 0x4100
   12e48:	sub	r0, r0, #92	; 0x5c
   12e4c:	str	r1, [r0]
   12e50:	adc	r3, r3, #0
   12e54:	sub	r2, fp, #16640	; 0x4100
   12e58:	sub	r2, r2, #88	; 0x58
   12e5c:	str	r3, [r2]
   12e60:	sub	r3, fp, #16640	; 0x4100
   12e64:	sub	r3, r3, #92	; 0x5c
   12e68:	ldrd	r2, [r3]
   12e6c:	strd	r2, [fp, #-108]	; 0xffffff94
   12e70:	b	12e78 <__assert_fail@plt+0x1ac8>
   12e74:	nop	{0}
   12e78:	ldrb	r0, [fp, #-94]	; 0xffffffa2
   12e7c:	mov	r1, #0
   12e80:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   12e84:	adds	ip, r2, r0
   12e88:	sub	lr, fp, #16640	; 0x4100
   12e8c:	sub	lr, lr, #100	; 0x64
   12e90:	str	ip, [lr]
   12e94:	adc	r3, r3, r1
   12e98:	sub	r2, fp, #16640	; 0x4100
   12e9c:	sub	r2, r2, #96	; 0x60
   12ea0:	str	r3, [r2]
   12ea4:	sub	r3, fp, #16640	; 0x4100
   12ea8:	sub	r3, r3, #100	; 0x64
   12eac:	ldrd	r2, [r3]
   12eb0:	strd	r2, [fp, #-44]	; 0xffffffd4
   12eb4:	mov	r3, #0
   12eb8:	strb	r3, [fp, #-94]	; 0xffffffa2
   12ebc:	b	12fa4 <__assert_fail@plt+0x1bf4>
   12ec0:	bl	11254 <__ctype_b_loc@plt>
   12ec4:	mov	r3, r0
   12ec8:	ldr	r4, [r3]
   12ecc:	ldr	r3, [fp, #-112]	; 0xffffff90
   12ed0:	sub	r3, r3, #1
   12ed4:	ldrb	r3, [r3]
   12ed8:	mov	r0, r3
   12edc:	bl	114b0 <__assert_fail@plt+0x100>
   12ee0:	mov	r3, r0
   12ee4:	lsl	r3, r3, #1
   12ee8:	add	r3, r4, r3
   12eec:	ldrh	r3, [r3]
   12ef0:	and	r3, r3, #16384	; 0x4000
   12ef4:	cmp	r3, #0
   12ef8:	beq	12fa0 <__assert_fail@plt+0x1bf0>
   12efc:	ldrd	r2, [fp, #-108]	; 0xffffff94
   12f00:	adds	r1, r2, #1
   12f04:	sub	r0, fp, #16640	; 0x4100
   12f08:	sub	r0, r0, #108	; 0x6c
   12f0c:	str	r1, [r0]
   12f10:	adc	r3, r3, #0
   12f14:	sub	r2, fp, #16640	; 0x4100
   12f18:	sub	r2, r2, #104	; 0x68
   12f1c:	str	r3, [r2]
   12f20:	sub	r3, fp, #16640	; 0x4100
   12f24:	sub	r3, r3, #108	; 0x6c
   12f28:	ldrd	r2, [r3]
   12f2c:	strd	r2, [fp, #-108]	; 0xffffff94
   12f30:	bl	11254 <__ctype_b_loc@plt>
   12f34:	mov	r3, r0
   12f38:	ldr	r4, [r3]
   12f3c:	ldr	r3, [fp, #-112]	; 0xffffff90
   12f40:	sub	r3, r3, #1
   12f44:	ldrb	r3, [r3]
   12f48:	mov	r0, r3
   12f4c:	bl	114b0 <__assert_fail@plt+0x100>
   12f50:	mov	r3, r0
   12f54:	lsl	r3, r3, #1
   12f58:	add	r3, r4, r3
   12f5c:	ldrh	r3, [r3]
   12f60:	and	r3, r3, #8192	; 0x2000
   12f64:	cmp	r3, #0
   12f68:	bne	12e74 <__assert_fail@plt+0x1ac4>
   12f6c:	ldr	r3, [fp, #-112]	; 0xffffff90
   12f70:	sub	r3, r3, #1
   12f74:	ldrb	r3, [r3]
   12f78:	mov	r0, r3
   12f7c:	bl	114b0 <__assert_fail@plt+0x100>
   12f80:	mov	r3, r0
   12f84:	mov	r0, r3
   12f88:	bl	1192c <__assert_fail@plt+0x57c>
   12f8c:	mov	r3, r0
   12f90:	cmp	r3, #0
   12f94:	bne	12e74 <__assert_fail@plt+0x1ac4>
   12f98:	mov	r3, #1
   12f9c:	strb	r3, [fp, #-94]	; 0xffffffa2
   12fa0:	nop	{0}
   12fa4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12fa8:	sub	r3, r3, #1
   12fac:	str	r3, [fp, #-36]	; 0xffffffdc
   12fb0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12fb4:	cmp	r3, #0
   12fb8:	bne	12cfc <__assert_fail@plt+0x194c>
   12fbc:	sub	r1, fp, #16384	; 0x4000
   12fc0:	sub	r1, r1, #28
   12fc4:	sub	r1, r1, #112	; 0x70
   12fc8:	sub	r3, fp, #16384	; 0x4000
   12fcc:	sub	r3, r3, #28
   12fd0:	mov	r2, #16384	; 0x4000
   12fd4:	ldr	r0, [r3, #-156]	; 0xffffff64
   12fd8:	bl	1815c <__assert_fail@plt+0x6dac>
   12fdc:	str	r0, [fp, #-36]	; 0xffffffdc
   12fe0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   12fe4:	cmp	r3, #0
   12fe8:	bne	12c48 <__assert_fail@plt+0x1898>
   12fec:	ldrd	r0, [fp, #-108]	; 0xffffff94
   12ff0:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   12ff4:	cmp	r1, r3
   12ff8:	cmpeq	r0, r2
   12ffc:	bls	13008 <__assert_fail@plt+0x1c58>
   13000:	ldrd	r2, [fp, #-108]	; 0xffffff94
   13004:	strd	r2, [fp, #-60]	; 0xffffffc4
   13008:	ldrb	r2, [fp, #-94]	; 0xffffffa2
   1300c:	mov	r3, #0
   13010:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   13014:	adds	ip, r0, r2
   13018:	sub	lr, fp, #16640	; 0x4100
   1301c:	sub	lr, lr, #116	; 0x74
   13020:	str	ip, [lr]
   13024:	adc	r3, r1, r3
   13028:	sub	r2, fp, #16640	; 0x4100
   1302c:	sub	r2, r2, #112	; 0x70
   13030:	str	r3, [r2]
   13034:	sub	r3, fp, #16640	; 0x4100
   13038:	sub	r3, r3, #116	; 0x74
   1303c:	ldrd	r2, [r3]
   13040:	strd	r2, [fp, #-44]	; 0xffffffd4
   13044:	b	1304c <__assert_fail@plt+0x1c9c>
   13048:	nop	{0}
   1304c:	movw	r3, #49626	; 0xc1da
   13050:	movt	r3, #2
   13054:	ldrb	r3, [r3]
   13058:	ldrb	r2, [fp, #-62]	; 0xffffffc2
   1305c:	cmp	r2, r3
   13060:	bcs	13078 <__assert_fail@plt+0x1cc8>
   13064:	sub	r3, fp, #16384	; 0x4000
   13068:	sub	r3, r3, #28
   1306c:	sub	r3, r3, #128	; 0x80
   13070:	ldrd	r2, [r3]
   13074:	strd	r2, [fp, #-52]	; 0xffffffcc
   13078:	sub	r3, fp, #16384	; 0x4000
   1307c:	sub	r3, r3, #28
   13080:	sub	r3, r3, #112	; 0x70
   13084:	ldrd	r4, [r3, #-8]
   13088:	sub	r3, fp, #16384	; 0x4000
   1308c:	sub	r3, r3, #28
   13090:	sub	r3, r3, #128	; 0x80
   13094:	ldrd	r2, [r3]
   13098:	sub	r1, fp, #16384	; 0x4000
   1309c:	sub	r1, r1, #28
   130a0:	ldr	r1, [r1, #-160]	; 0xffffff60
   130a4:	str	r1, [sp, #24]
   130a8:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   130ac:	strd	r0, [sp, #16]
   130b0:	strd	r2, [sp, #8]
   130b4:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   130b8:	strd	r2, [sp]
   130bc:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   130c0:	mov	r0, r4
   130c4:	mov	r1, r5
   130c8:	bl	1196c <__assert_fail@plt+0x5bc>
   130cc:	movw	r3, #49584	; 0xc1b0
   130d0:	movt	r3, #2
   130d4:	ldrd	r0, [r3]
   130d8:	sub	r3, fp, #16384	; 0x4000
   130dc:	sub	r3, r3, #28
   130e0:	sub	r3, r3, #112	; 0x70
   130e4:	ldrd	r2, [r3, #-8]
   130e8:	adds	ip, r0, r2
   130ec:	sub	lr, fp, #16384	; 0x4000
   130f0:	sub	lr, lr, #252	; 0xfc
   130f4:	str	ip, [lr]
   130f8:	adc	r3, r1, r3
   130fc:	sub	r2, fp, #16384	; 0x4000
   13100:	sub	r2, r2, #248	; 0xf8
   13104:	str	r3, [r2]
   13108:	movw	r3, #49584	; 0xc1b0
   1310c:	movt	r3, #2
   13110:	sub	r2, fp, #16384	; 0x4000
   13114:	sub	r2, r2, #252	; 0xfc
   13118:	ldrd	r0, [r2]
   1311c:	strd	r0, [r3]
   13120:	movw	r3, #49592	; 0xc1b8
   13124:	movt	r3, #2
   13128:	ldrd	r0, [r3]
   1312c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   13130:	adds	ip, r0, r2
   13134:	sub	lr, fp, #16640	; 0x4100
   13138:	sub	lr, lr, #4
   1313c:	str	ip, [lr]
   13140:	adc	r3, r1, r3
   13144:	sub	r2, fp, #16640	; 0x4100
   13148:	str	r3, [r2]
   1314c:	movw	r3, #49592	; 0xc1b8
   13150:	movt	r3, #2
   13154:	sub	r2, fp, #16640	; 0x4100
   13158:	sub	r2, r2, #4
   1315c:	ldrd	r0, [r2]
   13160:	strd	r0, [r3]
   13164:	movw	r3, #49600	; 0xc1c0
   13168:	movt	r3, #2
   1316c:	ldrd	r0, [r3]
   13170:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   13174:	adds	ip, r0, r2
   13178:	sub	lr, fp, #16640	; 0x4100
   1317c:	sub	lr, lr, #12
   13180:	str	ip, [lr]
   13184:	adc	r3, r1, r3
   13188:	sub	r2, fp, #16640	; 0x4100
   1318c:	sub	r2, r2, #8
   13190:	str	r3, [r2]
   13194:	movw	r3, #49600	; 0xc1c0
   13198:	movt	r3, #2
   1319c:	sub	r2, fp, #16640	; 0x4100
   131a0:	sub	r2, r2, #12
   131a4:	ldrd	r0, [r2]
   131a8:	strd	r0, [r3]
   131ac:	movw	r3, #49608	; 0xc1c8
   131b0:	movt	r3, #2
   131b4:	ldrd	r0, [r3]
   131b8:	sub	r3, fp, #16384	; 0x4000
   131bc:	sub	r3, r3, #28
   131c0:	sub	r3, r3, #128	; 0x80
   131c4:	ldrd	r2, [r3]
   131c8:	adds	ip, r0, r2
   131cc:	sub	lr, fp, #16640	; 0x4100
   131d0:	sub	lr, lr, #20
   131d4:	str	ip, [lr]
   131d8:	adc	r3, r1, r3
   131dc:	sub	r2, fp, #16640	; 0x4100
   131e0:	sub	r2, r2, #16
   131e4:	str	r3, [r2]
   131e8:	movw	r3, #49608	; 0xc1c8
   131ec:	movt	r3, #2
   131f0:	sub	r2, fp, #16640	; 0x4100
   131f4:	sub	r2, r2, #20
   131f8:	ldrd	r0, [r2]
   131fc:	strd	r0, [r3]
   13200:	movw	r3, #49616	; 0xc1d0
   13204:	movt	r3, #2
   13208:	ldrd	r2, [r3]
   1320c:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   13210:	cmp	r1, r3
   13214:	cmpeq	r0, r2
   13218:	bls	1322c <__assert_fail@plt+0x1e7c>
   1321c:	movw	r3, #49616	; 0xc1d0
   13220:	movt	r3, #2
   13224:	ldrd	r0, [fp, #-60]	; 0xffffffc4
   13228:	strd	r0, [r3]
   1322c:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   13230:	mov	r0, r3
   13234:	sub	sp, fp, #28
   13238:	ldrd	r4, [sp]
   1323c:	ldrd	r6, [sp, #8]
   13240:	ldrd	r8, [sp, #16]
   13244:	ldr	fp, [sp, #24]
   13248:	add	sp, sp, #28
   1324c:	pop	{pc}		; (ldr pc, [sp], #4)
   13250:	str	r4, [sp, #-12]!
   13254:	str	fp, [sp, #4]
   13258:	str	lr, [sp, #8]
   1325c:	add	fp, sp, #8
   13260:	sub	sp, sp, #28
   13264:	str	r0, [fp, #-24]	; 0xffffffe8
   13268:	str	r1, [fp, #-28]	; 0xffffffe4
   1326c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13270:	cmp	r3, #0
   13274:	beq	13294 <__assert_fail@plt+0x1ee4>
   13278:	movw	r1, #46584	; 0xb5f8
   1327c:	movt	r1, #1
   13280:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13284:	bl	110a4 <strcmp@plt>
   13288:	mov	r3, r0
   1328c:	cmp	r3, #0
   13290:	bne	132d4 <__assert_fail@plt+0x1f24>
   13294:	movw	r3, #49636	; 0xc1e4
   13298:	movt	r3, #2
   1329c:	mov	r2, #1
   132a0:	strb	r2, [r3]
   132a4:	mov	r1, #0
   132a8:	mov	r0, #0
   132ac:	bl	19330 <__assert_fail@plt+0x7f80>
   132b0:	mvn	r2, #0
   132b4:	mvn	r3, #0
   132b8:	strd	r2, [sp]
   132bc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   132c0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   132c4:	mov	r0, #0
   132c8:	bl	11e68 <__assert_fail@plt+0xab8>
   132cc:	mov	r3, r0
   132d0:	b	133a4 <__assert_fail@plt+0x1ff4>
   132d4:	mov	r1, #0
   132d8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   132dc:	bl	111f4 <open64@plt>
   132e0:	str	r0, [fp, #-16]
   132e4:	ldr	r3, [fp, #-16]
   132e8:	cmn	r3, #1
   132ec:	bne	1332c <__assert_fail@plt+0x1f7c>
   132f0:	bl	112c0 <__errno_location@plt>
   132f4:	mov	r3, r0
   132f8:	ldr	r4, [r3]
   132fc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13300:	mov	r1, #3
   13304:	mov	r0, #0
   13308:	bl	1766c <__assert_fail@plt+0x62bc>
   1330c:	mov	r3, r0
   13310:	movw	r2, #46564	; 0xb5e4
   13314:	movt	r2, #1
   13318:	mov	r1, r4
   1331c:	mov	r0, #0
   13320:	bl	111e8 <error@plt>
   13324:	mov	r3, #0
   13328:	b	133a4 <__assert_fail@plt+0x1ff4>
   1332c:	mov	r2, #0
   13330:	mov	r3, #0
   13334:	strd	r2, [sp]
   13338:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1333c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13340:	ldr	r0, [fp, #-16]
   13344:	bl	11e68 <__assert_fail@plt+0xab8>
   13348:	mov	r3, r0
   1334c:	strb	r3, [fp, #-17]	; 0xffffffef
   13350:	ldr	r0, [fp, #-16]
   13354:	bl	11398 <close@plt>
   13358:	mov	r3, r0
   1335c:	cmp	r3, #0
   13360:	beq	133a0 <__assert_fail@plt+0x1ff0>
   13364:	bl	112c0 <__errno_location@plt>
   13368:	mov	r3, r0
   1336c:	ldr	r4, [r3]
   13370:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13374:	mov	r1, #3
   13378:	mov	r0, #0
   1337c:	bl	1766c <__assert_fail@plt+0x62bc>
   13380:	mov	r3, r0
   13384:	movw	r2, #46564	; 0xb5e4
   13388:	movt	r2, #1
   1338c:	mov	r1, r4
   13390:	mov	r0, #0
   13394:	bl	111e8 <error@plt>
   13398:	mov	r3, #0
   1339c:	b	133a4 <__assert_fail@plt+0x1ff4>
   133a0:	ldrb	r3, [fp, #-17]	; 0xffffffef
   133a4:	mov	r0, r3
   133a8:	sub	sp, fp, #8
   133ac:	ldr	r4, [sp]
   133b0:	ldr	fp, [sp, #4]
   133b4:	add	sp, sp, #8
   133b8:	pop	{pc}		; (ldr pc, [sp], #4)
   133bc:	str	fp, [sp, #-8]!
   133c0:	str	lr, [sp, #4]
   133c4:	add	fp, sp, #4
   133c8:	sub	sp, sp, #16
   133cc:	str	r0, [fp, #-16]
   133d0:	str	r1, [fp, #-20]	; 0xffffffec
   133d4:	ldr	r3, [fp, #-16]
   133d8:	cmp	r3, #0
   133dc:	beq	133e8 <__assert_fail@plt+0x2038>
   133e0:	ldr	r3, [fp, #-16]
   133e4:	b	133ec <__assert_fail@plt+0x203c>
   133e8:	mov	r3, #1
   133ec:	mov	r1, #112	; 0x70
   133f0:	mov	r0, r3
   133f4:	bl	18c90 <__assert_fail@plt+0x78e0>
   133f8:	mov	r3, r0
   133fc:	str	r3, [fp, #-12]
   13400:	ldr	r3, [fp, #-16]
   13404:	cmp	r3, #0
   13408:	beq	13470 <__assert_fail@plt+0x20c0>
   1340c:	ldr	r3, [fp, #-16]
   13410:	cmp	r3, #1
   13414:	bne	13480 <__assert_fail@plt+0x20d0>
   13418:	movw	r3, #49624	; 0xc1d8
   1341c:	movt	r3, #2
   13420:	ldrb	r3, [r3]
   13424:	mov	r2, r3
   13428:	movw	r3, #49625	; 0xc1d9
   1342c:	movt	r3, #2
   13430:	ldrb	r3, [r3]
   13434:	add	r2, r2, r3
   13438:	movw	r3, #49626	; 0xc1da
   1343c:	movt	r3, #2
   13440:	ldrb	r3, [r3]
   13444:	add	r2, r2, r3
   13448:	movw	r3, #49627	; 0xc1db
   1344c:	movt	r3, #2
   13450:	ldrb	r3, [r3]
   13454:	add	r2, r2, r3
   13458:	movw	r3, #49628	; 0xc1dc
   1345c:	movt	r3, #2
   13460:	ldrb	r3, [r3]
   13464:	add	r3, r2, r3
   13468:	cmp	r3, #1
   1346c:	bne	13480 <__assert_fail@plt+0x20d0>
   13470:	ldr	r3, [fp, #-12]
   13474:	mov	r2, #1
   13478:	str	r2, [r3]
   1347c:	b	13594 <__assert_fail@plt+0x21e4>
   13480:	mov	r3, #0
   13484:	str	r3, [fp, #-8]
   13488:	b	13584 <__assert_fail@plt+0x21d4>
   1348c:	ldr	r3, [fp, #-8]
   13490:	lsl	r3, r3, #2
   13494:	ldr	r2, [fp, #-20]	; 0xffffffec
   13498:	add	r3, r2, r3
   1349c:	ldr	r3, [r3]
   134a0:	cmp	r3, #0
   134a4:	beq	134d8 <__assert_fail@plt+0x2128>
   134a8:	ldr	r3, [fp, #-8]
   134ac:	lsl	r3, r3, #2
   134b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   134b4:	add	r3, r2, r3
   134b8:	ldr	r3, [r3]
   134bc:	movw	r1, #46584	; 0xb5f8
   134c0:	movt	r1, #1
   134c4:	mov	r0, r3
   134c8:	bl	110a4 <strcmp@plt>
   134cc:	mov	r3, r0
   134d0:	cmp	r3, #0
   134d4:	bne	13510 <__assert_fail@plt+0x2160>
   134d8:	ldr	r2, [fp, #-8]
   134dc:	mov	r3, r2
   134e0:	lsl	r3, r3, #3
   134e4:	sub	r3, r3, r2
   134e8:	lsl	r3, r3, #4
   134ec:	mov	r2, r3
   134f0:	ldr	r3, [fp, #-12]
   134f4:	add	r3, r3, r2
   134f8:	add	r3, r3, #8
   134fc:	mov	r1, r3
   13500:	mov	r0, #0
   13504:	bl	1aeec <_obstack_memory_used@@Base+0xdec>
   13508:	mov	r1, r0
   1350c:	b	13554 <__assert_fail@plt+0x21a4>
   13510:	ldr	r3, [fp, #-8]
   13514:	lsl	r3, r3, #2
   13518:	ldr	r2, [fp, #-20]	; 0xffffffec
   1351c:	add	r3, r2, r3
   13520:	ldr	r0, [r3]
   13524:	ldr	r2, [fp, #-8]
   13528:	mov	r3, r2
   1352c:	lsl	r3, r3, #3
   13530:	sub	r3, r3, r2
   13534:	lsl	r3, r3, #4
   13538:	mov	r2, r3
   1353c:	ldr	r3, [fp, #-12]
   13540:	add	r3, r3, r2
   13544:	add	r3, r3, #8
   13548:	mov	r1, r3
   1354c:	bl	1aedc <_obstack_memory_used@@Base+0xddc>
   13550:	mov	r1, r0
   13554:	ldr	r2, [fp, #-8]
   13558:	mov	r3, r2
   1355c:	lsl	r3, r3, #3
   13560:	sub	r3, r3, r2
   13564:	lsl	r3, r3, #4
   13568:	mov	r2, r3
   1356c:	ldr	r3, [fp, #-12]
   13570:	add	r3, r3, r2
   13574:	str	r1, [r3]
   13578:	ldr	r3, [fp, #-8]
   1357c:	add	r3, r3, #1
   13580:	str	r3, [fp, #-8]
   13584:	ldr	r2, [fp, #-8]
   13588:	ldr	r3, [fp, #-16]
   1358c:	cmp	r2, r3
   13590:	bcc	1348c <__assert_fail@plt+0x20dc>
   13594:	ldr	r3, [fp, #-12]
   13598:	mov	r0, r3
   1359c:	sub	sp, fp, #4
   135a0:	ldr	fp, [sp]
   135a4:	add	sp, sp, #4
   135a8:	pop	{pc}		; (ldr pc, [sp], #4)
   135ac:	strd	r4, [sp, #-16]!
   135b0:	str	fp, [sp, #8]
   135b4:	str	lr, [sp, #12]
   135b8:	add	fp, sp, #12
   135bc:	sub	sp, sp, #32
   135c0:	str	r0, [fp, #-40]	; 0xffffffd8
   135c4:	str	r1, [fp, #-44]	; 0xffffffd4
   135c8:	mov	r3, #1
   135cc:	str	r3, [fp, #-16]
   135d0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   135d4:	cmp	r3, #0
   135d8:	beq	13720 <__assert_fail@plt+0x2370>
   135dc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   135e0:	ldr	r3, [r3]
   135e4:	cmp	r3, #0
   135e8:	bgt	13720 <__assert_fail@plt+0x2370>
   135ec:	mov	r3, #1
   135f0:	str	r3, [fp, #-20]	; 0xffffffec
   135f4:	mov	r2, #0
   135f8:	mov	r3, #0
   135fc:	strd	r2, [fp, #-28]	; 0xffffffe4
   13600:	mov	r3, #0
   13604:	str	r3, [fp, #-32]	; 0xffffffe0
   13608:	b	136bc <__assert_fail@plt+0x230c>
   1360c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13610:	mov	r3, r2
   13614:	lsl	r3, r3, #3
   13618:	sub	r3, r3, r2
   1361c:	lsl	r3, r3, #4
   13620:	mov	r2, r3
   13624:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13628:	add	r3, r3, r2
   1362c:	ldr	r3, [r3]
   13630:	cmp	r3, #0
   13634:	bne	136b0 <__assert_fail@plt+0x2300>
   13638:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1363c:	mov	r3, r2
   13640:	lsl	r3, r3, #3
   13644:	sub	r3, r3, r2
   13648:	lsl	r3, r3, #4
   1364c:	mov	r2, r3
   13650:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13654:	add	r3, r3, r2
   13658:	ldr	r3, [r3, #24]
   1365c:	and	r3, r3, #61440	; 0xf000
   13660:	cmp	r3, #32768	; 0x8000
   13664:	bne	136a8 <__assert_fail@plt+0x22f8>
   13668:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1366c:	mov	r3, r2
   13670:	lsl	r3, r3, #3
   13674:	sub	r3, r3, r2
   13678:	lsl	r3, r3, #4
   1367c:	mov	r2, r3
   13680:	ldr	r3, [fp, #-44]	; 0xffffffd4
   13684:	add	r3, r3, r2
   13688:	ldrd	r2, [r3, #56]	; 0x38
   1368c:	mov	r0, r2
   13690:	mov	r1, r3
   13694:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   13698:	adds	r4, r2, r0
   1369c:	adc	r5, r3, r1
   136a0:	strd	r4, [fp, #-28]	; 0xffffffe4
   136a4:	b	136b0 <__assert_fail@plt+0x2300>
   136a8:	mov	r3, #7
   136ac:	str	r3, [fp, #-20]	; 0xffffffec
   136b0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   136b4:	add	r3, r3, #1
   136b8:	str	r3, [fp, #-32]	; 0xffffffe0
   136bc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   136c0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   136c4:	cmp	r2, r3
   136c8:	bcc	1360c <__assert_fail@plt+0x225c>
   136cc:	b	136f8 <__assert_fail@plt+0x2348>
   136d0:	ldr	r3, [fp, #-16]
   136d4:	add	r3, r3, #1
   136d8:	str	r3, [fp, #-16]
   136dc:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   136e0:	mov	r2, #10
   136e4:	mov	r3, #0
   136e8:	bl	1acec <_obstack_memory_used@@Base+0xbec>
   136ec:	mov	r2, r0
   136f0:	mov	r3, r1
   136f4:	strd	r2, [fp, #-28]	; 0xffffffe4
   136f8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   136fc:	cmp	r3, #0
   13700:	cmpeq	r2, #9
   13704:	bhi	136d0 <__assert_fail@plt+0x2320>
   13708:	ldr	r2, [fp, #-16]
   1370c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13710:	cmp	r2, r3
   13714:	bge	13720 <__assert_fail@plt+0x2370>
   13718:	ldr	r3, [fp, #-20]	; 0xffffffec
   1371c:	str	r3, [fp, #-16]
   13720:	ldr	r3, [fp, #-16]
   13724:	mov	r0, r3
   13728:	sub	sp, fp, #12
   1372c:	ldrd	r4, [sp]
   13730:	ldr	fp, [sp, #8]
   13734:	add	sp, sp, #12
   13738:	pop	{pc}		; (ldr pc, [sp], #4)
   1373c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13740:	strd	r6, [sp, #8]
   13744:	strd	r8, [sp, #16]
   13748:	str	fp, [sp, #24]
   1374c:	str	lr, [sp, #28]
   13750:	vpush	{d8}
   13754:	add	fp, sp, #36	; 0x24
   13758:	sub	sp, sp, #360	; 0x168
   1375c:	str	r0, [fp, #-344]	; 0xfffffea8
   13760:	str	r1, [fp, #-348]	; 0xfffffea4
   13764:	mov	r3, #0
   13768:	str	r3, [fp, #-52]	; 0xffffffcc
   1376c:	ldr	r3, [fp, #-348]	; 0xfffffea4
   13770:	ldr	r3, [r3]
   13774:	mov	r0, r3
   13778:	bl	15008 <__assert_fail@plt+0x3c58>
   1377c:	movw	r1, #45112	; 0xb038
   13780:	movt	r1, #1
   13784:	mov	r0, #6
   13788:	bl	1132c <setlocale@plt>
   1378c:	movw	r1, #46588	; 0xb5fc
   13790:	movt	r1, #1
   13794:	movw	r0, #45136	; 0xb050
   13798:	movt	r0, #1
   1379c:	bl	1135c <bindtextdomain@plt>
   137a0:	movw	r0, #45136	; 0xb050
   137a4:	movt	r0, #1
   137a8:	bl	11164 <textdomain@plt>
   137ac:	movw	r0, #17960	; 0x4628
   137b0:	movt	r0, #1
   137b4:	bl	1aec4 <_obstack_memory_used@@Base+0xdc4>
   137b8:	bl	112b4 <getpagesize@plt>
   137bc:	mov	r3, r0
   137c0:	mov	r2, r3
   137c4:	movw	r3, #49640	; 0xc1e8
   137c8:	movt	r3, #2
   137cc:	str	r2, [r3]
   137d0:	movw	r3, #49564	; 0xc19c
   137d4:	movt	r3, #2
   137d8:	ldr	r0, [r3]
   137dc:	mov	r3, #0
   137e0:	mov	r2, #1
   137e4:	mov	r1, #0
   137e8:	bl	112d8 <setvbuf@plt>
   137ec:	movw	r0, #46612	; 0xb614
   137f0:	movt	r0, #1
   137f4:	bl	11200 <getenv@plt>
   137f8:	mov	r3, r0
   137fc:	cmp	r3, #0
   13800:	movne	r3, #1
   13804:	moveq	r3, #0
   13808:	uxtb	r2, r3
   1380c:	movw	r3, #49644	; 0xc1ec
   13810:	movt	r3, #2
   13814:	strb	r2, [r3]
   13818:	movw	r3, #49627	; 0xc1db
   1381c:	movt	r3, #2
   13820:	mov	r2, #0
   13824:	strb	r2, [r3]
   13828:	movw	r3, #49627	; 0xc1db
   1382c:	movt	r3, #2
   13830:	ldrb	r2, [r3]
   13834:	movw	r3, #49626	; 0xc1da
   13838:	movt	r3, #2
   1383c:	strb	r2, [r3]
   13840:	movw	r3, #49626	; 0xc1da
   13844:	movt	r3, #2
   13848:	ldrb	r2, [r3]
   1384c:	movw	r3, #49625	; 0xc1d9
   13850:	movt	r3, #2
   13854:	strb	r2, [r3]
   13858:	movw	r3, #49625	; 0xc1d9
   1385c:	movt	r3, #2
   13860:	ldrb	r2, [r3]
   13864:	movw	r3, #49624	; 0xc1d8
   13868:	movt	r3, #2
   1386c:	strb	r2, [r3]
   13870:	movw	r3, #49628	; 0xc1dc
   13874:	movt	r3, #2
   13878:	mov	r2, #0
   1387c:	strb	r2, [r3]
   13880:	movw	r3, #49616	; 0xc1d0
   13884:	movt	r3, #2
   13888:	mov	r0, #0
   1388c:	mov	r1, #0
   13890:	strd	r0, [r3]
   13894:	movw	r3, #49616	; 0xc1d0
   13898:	movt	r3, #2
   1389c:	ldrd	r0, [r3]
   138a0:	movw	r3, #49608	; 0xc1c8
   138a4:	movt	r3, #2
   138a8:	strd	r0, [r3]
   138ac:	movw	r3, #49608	; 0xc1c8
   138b0:	movt	r3, #2
   138b4:	ldrd	r0, [r3]
   138b8:	movw	r3, #49600	; 0xc1c0
   138bc:	movt	r3, #2
   138c0:	strd	r0, [r3]
   138c4:	movw	r3, #49600	; 0xc1c0
   138c8:	movt	r3, #2
   138cc:	ldrd	r0, [r3]
   138d0:	movw	r3, #49592	; 0xc1b8
   138d4:	movt	r3, #2
   138d8:	strd	r0, [r3]
   138dc:	movw	r3, #49592	; 0xc1b8
   138e0:	movt	r3, #2
   138e4:	ldrd	r0, [r3]
   138e8:	movw	r3, #49584	; 0xc1b0
   138ec:	movt	r3, #2
   138f0:	strd	r0, [r3]
   138f4:	b	13a90 <__assert_fail@plt+0x26e0>
   138f8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   138fc:	cmp	r3, #108	; 0x6c
   13900:	beq	139c4 <__assert_fail@plt+0x2614>
   13904:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13908:	cmp	r3, #108	; 0x6c
   1390c:	bgt	13954 <__assert_fail@plt+0x25a4>
   13910:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13914:	cmn	r3, #2
   13918:	beq	13a28 <__assert_fail@plt+0x2678>
   1391c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13920:	cmn	r3, #2
   13924:	bgt	13938 <__assert_fail@plt+0x2588>
   13928:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1392c:	cmn	r3, #3
   13930:	beq	13a30 <__assert_fail@plt+0x2680>
   13934:	b	13a88 <__assert_fail@plt+0x26d8>
   13938:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1393c:	cmp	r3, #76	; 0x4c
   13940:	beq	139ec <__assert_fail@plt+0x263c>
   13944:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13948:	cmp	r3, #99	; 0x63
   1394c:	beq	1399c <__assert_fail@plt+0x25ec>
   13950:	b	13a88 <__assert_fail@plt+0x26d8>
   13954:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13958:	cmp	r3, #119	; 0x77
   1395c:	beq	139d8 <__assert_fail@plt+0x2628>
   13960:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13964:	cmp	r3, #119	; 0x77
   13968:	bgt	1397c <__assert_fail@plt+0x25cc>
   1396c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13970:	cmp	r3, #109	; 0x6d
   13974:	beq	139b0 <__assert_fail@plt+0x2600>
   13978:	b	13a88 <__assert_fail@plt+0x26d8>
   1397c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13980:	cmp	r3, #256	; 0x100
   13984:	beq	13a00 <__assert_fail@plt+0x2650>
   13988:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1398c:	movw	r2, #257	; 0x101
   13990:	cmp	r3, r2
   13994:	beq	13a14 <__assert_fail@plt+0x2664>
   13998:	b	13a88 <__assert_fail@plt+0x26d8>
   1399c:	movw	r3, #49627	; 0xc1db
   139a0:	movt	r3, #2
   139a4:	mov	r2, #1
   139a8:	strb	r2, [r3]
   139ac:	b	13a90 <__assert_fail@plt+0x26e0>
   139b0:	movw	r3, #49626	; 0xc1da
   139b4:	movt	r3, #2
   139b8:	mov	r2, #1
   139bc:	strb	r2, [r3]
   139c0:	b	13a90 <__assert_fail@plt+0x26e0>
   139c4:	movw	r3, #49624	; 0xc1d8
   139c8:	movt	r3, #2
   139cc:	mov	r2, #1
   139d0:	strb	r2, [r3]
   139d4:	b	13a90 <__assert_fail@plt+0x26e0>
   139d8:	movw	r3, #49625	; 0xc1d9
   139dc:	movt	r3, #2
   139e0:	mov	r2, #1
   139e4:	strb	r2, [r3]
   139e8:	b	13a90 <__assert_fail@plt+0x26e0>
   139ec:	movw	r3, #49628	; 0xc1dc
   139f0:	movt	r3, #2
   139f4:	mov	r2, #1
   139f8:	strb	r2, [r3]
   139fc:	b	13a90 <__assert_fail@plt+0x26e0>
   13a00:	movw	r3, #49576	; 0xc1a8
   13a04:	movt	r3, #2
   13a08:	mov	r2, #1
   13a0c:	strb	r2, [r3]
   13a10:	b	13a90 <__assert_fail@plt+0x26e0>
   13a14:	movw	r3, #49568	; 0xc1a0
   13a18:	movt	r3, #2
   13a1c:	ldr	r3, [r3]
   13a20:	str	r3, [fp, #-52]	; 0xffffffcc
   13a24:	b	13a90 <__assert_fail@plt+0x26e0>
   13a28:	mov	r0, #0
   13a2c:	bl	11740 <__assert_fail@plt+0x390>
   13a30:	movw	r3, #49564	; 0xc19c
   13a34:	movt	r3, #2
   13a38:	ldr	r0, [r3]
   13a3c:	movw	r3, #49456	; 0xc130
   13a40:	movt	r3, #2
   13a44:	ldr	r2, [r3]
   13a48:	mov	r3, #0
   13a4c:	str	r3, [sp, #8]
   13a50:	movw	r3, #46628	; 0xb624
   13a54:	movt	r3, #1
   13a58:	str	r3, [sp, #4]
   13a5c:	movw	r3, #46644	; 0xb634
   13a60:	movt	r3, #1
   13a64:	str	r3, [sp]
   13a68:	mov	r3, r2
   13a6c:	movw	r2, #44928	; 0xaf80
   13a70:	movt	r2, #1
   13a74:	movw	r1, #46556	; 0xb5dc
   13a78:	movt	r1, #1
   13a7c:	bl	188e0 <__assert_fail@plt+0x7530>
   13a80:	mov	r0, #0
   13a84:	bl	11260 <exit@plt>
   13a88:	mov	r0, #1
   13a8c:	bl	11740 <__assert_fail@plt+0x390>
   13a90:	mov	r3, #0
   13a94:	str	r3, [sp]
   13a98:	movw	r3, #45376	; 0xb140
   13a9c:	movt	r3, #1
   13aa0:	movw	r2, #46656	; 0xb640
   13aa4:	movt	r2, #1
   13aa8:	ldr	r1, [fp, #-348]	; 0xfffffea4
   13aac:	ldr	r0, [fp, #-344]	; 0xfffffea8
   13ab0:	bl	11248 <getopt_long@plt>
   13ab4:	str	r0, [fp, #-76]	; 0xffffffb4
   13ab8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   13abc:	cmn	r3, #1
   13ac0:	bne	138f8 <__assert_fail@plt+0x2548>
   13ac4:	movw	r3, #49624	; 0xc1d8
   13ac8:	movt	r3, #2
   13acc:	ldrb	r3, [r3]
   13ad0:	eor	r3, r3, #1
   13ad4:	uxtb	r3, r3
   13ad8:	cmp	r3, #0
   13adc:	beq	13b90 <__assert_fail@plt+0x27e0>
   13ae0:	movw	r3, #49625	; 0xc1d9
   13ae4:	movt	r3, #2
   13ae8:	ldrb	r3, [r3]
   13aec:	eor	r3, r3, #1
   13af0:	uxtb	r3, r3
   13af4:	cmp	r3, #0
   13af8:	beq	13b90 <__assert_fail@plt+0x27e0>
   13afc:	movw	r3, #49626	; 0xc1da
   13b00:	movt	r3, #2
   13b04:	ldrb	r3, [r3]
   13b08:	eor	r3, r3, #1
   13b0c:	uxtb	r3, r3
   13b10:	cmp	r3, #0
   13b14:	beq	13b90 <__assert_fail@plt+0x27e0>
   13b18:	movw	r3, #49627	; 0xc1db
   13b1c:	movt	r3, #2
   13b20:	ldrb	r3, [r3]
   13b24:	eor	r3, r3, #1
   13b28:	uxtb	r3, r3
   13b2c:	cmp	r3, #0
   13b30:	beq	13b90 <__assert_fail@plt+0x27e0>
   13b34:	movw	r3, #49628	; 0xc1dc
   13b38:	movt	r3, #2
   13b3c:	ldrb	r3, [r3]
   13b40:	eor	r3, r3, #1
   13b44:	uxtb	r3, r3
   13b48:	cmp	r3, #0
   13b4c:	beq	13b90 <__assert_fail@plt+0x27e0>
   13b50:	movw	r3, #49627	; 0xc1db
   13b54:	movt	r3, #2
   13b58:	mov	r2, #1
   13b5c:	strb	r2, [r3]
   13b60:	movw	r3, #49627	; 0xc1db
   13b64:	movt	r3, #2
   13b68:	ldrb	r2, [r3]
   13b6c:	movw	r3, #49625	; 0xc1d9
   13b70:	movt	r3, #2
   13b74:	strb	r2, [r3]
   13b78:	movw	r3, #49625	; 0xc1d9
   13b7c:	movt	r3, #2
   13b80:	ldrb	r2, [r3]
   13b84:	movw	r3, #49624	; 0xc1d8
   13b88:	movt	r3, #2
   13b8c:	strb	r2, [r3]
   13b90:	mov	r3, #0
   13b94:	strb	r3, [fp, #-53]	; 0xffffffcb
   13b98:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13b9c:	cmp	r3, #0
   13ba0:	beq	13e1c <__assert_fail@plt+0x2a6c>
   13ba4:	movw	r3, #49544	; 0xc188
   13ba8:	movt	r3, #2
   13bac:	ldr	r3, [r3]
   13bb0:	ldr	r2, [fp, #-344]	; 0xfffffea8
   13bb4:	cmp	r2, r3
   13bb8:	ble	13c40 <__assert_fail@plt+0x2890>
   13bbc:	movw	r0, #46664	; 0xb648
   13bc0:	movt	r0, #1
   13bc4:	bl	11284 <gettext@plt>
   13bc8:	mov	r4, r0
   13bcc:	movw	r3, #49544	; 0xc188
   13bd0:	movt	r3, #2
   13bd4:	ldr	r3, [r3]
   13bd8:	lsl	r3, r3, #2
   13bdc:	ldr	r2, [fp, #-348]	; 0xfffffea4
   13be0:	add	r3, r2, r3
   13be4:	ldr	r3, [r3]
   13be8:	mov	r1, r3
   13bec:	mov	r0, #4
   13bf0:	bl	17488 <__assert_fail@plt+0x60d8>
   13bf4:	mov	r3, r0
   13bf8:	mov	r2, r4
   13bfc:	mov	r1, #0
   13c00:	mov	r0, #0
   13c04:	bl	111e8 <error@plt>
   13c08:	movw	r3, #49552	; 0xc190
   13c0c:	movt	r3, #2
   13c10:	ldr	r4, [r3]
   13c14:	movw	r0, #46684	; 0xb65c
   13c18:	movt	r0, #1
   13c1c:	bl	11284 <gettext@plt>
   13c20:	mov	r3, r0
   13c24:	mov	r2, r3
   13c28:	movw	r1, #46736	; 0xb690
   13c2c:	movt	r1, #1
   13c30:	mov	r0, r4
   13c34:	bl	112a8 <fprintf@plt>
   13c38:	mov	r0, #1
   13c3c:	bl	11740 <__assert_fail@plt+0x390>
   13c40:	movw	r1, #46584	; 0xb5f8
   13c44:	movt	r1, #1
   13c48:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13c4c:	bl	110a4 <strcmp@plt>
   13c50:	mov	r3, r0
   13c54:	cmp	r3, #0
   13c58:	bne	13c70 <__assert_fail@plt+0x28c0>
   13c5c:	movw	r3, #49560	; 0xc198
   13c60:	movt	r3, #2
   13c64:	ldr	r3, [r3]
   13c68:	str	r3, [fp, #-64]	; 0xffffffc0
   13c6c:	b	13ccc <__assert_fail@plt+0x291c>
   13c70:	movw	r1, #46740	; 0xb694
   13c74:	movt	r1, #1
   13c78:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13c7c:	bl	11350 <fopen64@plt>
   13c80:	str	r0, [fp, #-64]	; 0xffffffc0
   13c84:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13c88:	cmp	r3, #0
   13c8c:	bne	13ccc <__assert_fail@plt+0x291c>
   13c90:	bl	112c0 <__errno_location@plt>
   13c94:	mov	r3, r0
   13c98:	ldr	r4, [r3]
   13c9c:	movw	r0, #46744	; 0xb698
   13ca0:	movt	r0, #1
   13ca4:	bl	11284 <gettext@plt>
   13ca8:	mov	r5, r0
   13cac:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13cb0:	mov	r0, #4
   13cb4:	bl	17488 <__assert_fail@plt+0x60d8>
   13cb8:	mov	r3, r0
   13cbc:	mov	r2, r5
   13cc0:	mov	r1, r4
   13cc4:	mov	r0, #1
   13cc8:	bl	111e8 <error@plt>
   13ccc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13cd0:	bl	11308 <fileno@plt>
   13cd4:	mov	r2, r0
   13cd8:	sub	r3, fp, #340	; 0x154
   13cdc:	mov	r1, r3
   13ce0:	mov	r0, r2
   13ce4:	bl	1aeec <_obstack_memory_used@@Base+0xdec>
   13ce8:	mov	r3, r0
   13cec:	cmp	r3, #0
   13cf0:	bne	13dfc <__assert_fail@plt+0x2a4c>
   13cf4:	ldr	r3, [fp, #-324]	; 0xfffffebc
   13cf8:	and	r3, r3, #61440	; 0xf000
   13cfc:	cmp	r3, #32768	; 0x8000
   13d00:	bne	13dfc <__assert_fail@plt+0x2a4c>
   13d04:	sub	r3, fp, #340	; 0x154
   13d08:	ldrd	r2, [r3, #48]	; 0x30
   13d0c:	mov	r0, r2
   13d10:	mov	r1, r3
   13d14:	bl	1ac8c <_obstack_memory_used@@Base+0xb8c>
   13d18:	vmov	d8, r0, r1
   13d1c:	bl	14f28 <__assert_fail@plt+0x3b78>
   13d20:	vmov.f64	d5, d0
   13d24:	vldr	d6, [pc, #988]	; 14108 <__assert_fail@plt+0x2d58>
   13d28:	vdiv.f64	d7, d5, d6
   13d2c:	vldr	d6, [pc, #988]	; 14110 <__assert_fail@plt+0x2d60>
   13d30:	vcmpe.f64	d7, d6
   13d34:	vmrs	APSR_nzcv, fpscr
   13d38:	ble	13d44 <__assert_fail@plt+0x2994>
   13d3c:	vldr	d7, [pc, #972]	; 14110 <__assert_fail@plt+0x2d60>
   13d40:	b	13d54 <__assert_fail@plt+0x29a4>
   13d44:	bl	14f28 <__assert_fail@plt+0x3b78>
   13d48:	vmov.f64	d5, d0
   13d4c:	vldr	d6, [pc, #948]	; 14108 <__assert_fail@plt+0x2d58>
   13d50:	vdiv.f64	d7, d5, d6
   13d54:	vcmpe.f64	d7, d8
   13d58:	vmrs	APSR_nzcv, fpscr
   13d5c:	blt	13dfc <__assert_fail@plt+0x2a4c>
   13d60:	mov	r3, #1
   13d64:	strb	r3, [fp, #-53]	; 0xffffffcb
   13d68:	sub	r3, fp, #232	; 0xe8
   13d6c:	mov	r0, r3
   13d70:	bl	179a0 <__assert_fail@plt+0x65f0>
   13d74:	sub	r3, fp, #232	; 0xe8
   13d78:	mov	r1, r3
   13d7c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13d80:	bl	17de0 <__assert_fail@plt+0x6a30>
   13d84:	mov	r3, r0
   13d88:	eor	r3, r3, #1
   13d8c:	uxtb	r3, r3
   13d90:	cmp	r3, #0
   13d94:	bne	13dac <__assert_fail@plt+0x29fc>
   13d98:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13d9c:	bl	1482c <__assert_fail@plt+0x347c>
   13da0:	mov	r3, r0
   13da4:	cmp	r3, #0
   13da8:	beq	13ddc <__assert_fail@plt+0x2a2c>
   13dac:	movw	r0, #46772	; 0xb6b4
   13db0:	movt	r0, #1
   13db4:	bl	11284 <gettext@plt>
   13db8:	mov	r4, r0
   13dbc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13dc0:	mov	r0, #4
   13dc4:	bl	17488 <__assert_fail@plt+0x60d8>
   13dc8:	mov	r3, r0
   13dcc:	mov	r2, r4
   13dd0:	mov	r1, #0
   13dd4:	mov	r0, #1
   13dd8:	bl	111e8 <error@plt>
   13ddc:	ldr	r3, [fp, #-228]	; 0xffffff1c
   13de0:	str	r3, [fp, #-48]	; 0xffffffd0
   13de4:	ldr	r3, [fp, #-232]	; 0xffffff18
   13de8:	str	r3, [fp, #-44]	; 0xffffffd4
   13dec:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13df0:	bl	14304 <__assert_fail@plt+0x2f54>
   13df4:	str	r0, [fp, #-60]	; 0xffffffc4
   13df8:	b	13ea0 <__assert_fail@plt+0x2af0>
   13dfc:	mov	r3, #0
   13e00:	str	r3, [fp, #-48]	; 0xffffffd0
   13e04:	mov	r3, #0
   13e08:	str	r3, [fp, #-44]	; 0xffffffd4
   13e0c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13e10:	bl	14378 <__assert_fail@plt+0x2fc8>
   13e14:	str	r0, [fp, #-60]	; 0xffffffc4
   13e18:	b	13ea0 <__assert_fail@plt+0x2af0>
   13e1c:	movw	r3, #49544	; 0xc188
   13e20:	movt	r3, #2
   13e24:	ldr	r3, [r3]
   13e28:	ldr	r2, [fp, #-344]	; 0xfffffea8
   13e2c:	cmp	r2, r3
   13e30:	ble	13e50 <__assert_fail@plt+0x2aa0>
   13e34:	movw	r3, #49544	; 0xc188
   13e38:	movt	r3, #2
   13e3c:	ldr	r3, [r3]
   13e40:	lsl	r3, r3, #2
   13e44:	ldr	r2, [fp, #-348]	; 0xfffffea4
   13e48:	add	r3, r2, r3
   13e4c:	b	13e58 <__assert_fail@plt+0x2aa8>
   13e50:	movw	r3, #49648	; 0xc1f0
   13e54:	movt	r3, #2
   13e58:	str	r3, [fp, #-48]	; 0xffffffd0
   13e5c:	movw	r3, #49544	; 0xc188
   13e60:	movt	r3, #2
   13e64:	ldr	r3, [r3]
   13e68:	ldr	r2, [fp, #-344]	; 0xfffffea8
   13e6c:	cmp	r2, r3
   13e70:	ble	13e8c <__assert_fail@plt+0x2adc>
   13e74:	movw	r3, #49544	; 0xc188
   13e78:	movt	r3, #2
   13e7c:	ldr	r3, [r3]
   13e80:	ldr	r2, [fp, #-344]	; 0xfffffea8
   13e84:	sub	r3, r2, r3
   13e88:	b	13e90 <__assert_fail@plt+0x2ae0>
   13e8c:	mov	r3, #1
   13e90:	str	r3, [fp, #-44]	; 0xffffffd4
   13e94:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13e98:	bl	14304 <__assert_fail@plt+0x2f54>
   13e9c:	str	r0, [fp, #-60]	; 0xffffffc4
   13ea0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13ea4:	cmp	r3, #0
   13ea8:	bne	13eb0 <__assert_fail@plt+0x2b00>
   13eac:	bl	192d4 <__assert_fail@plt+0x7f24>
   13eb0:	ldr	r1, [fp, #-48]	; 0xffffffd0
   13eb4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13eb8:	bl	133bc <__assert_fail@plt+0x200c>
   13ebc:	str	r0, [fp, #-80]	; 0xffffffb0
   13ec0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13ec4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13ec8:	bl	135ac <__assert_fail@plt+0x21fc>
   13ecc:	mov	r2, r0
   13ed0:	movw	r3, #49632	; 0xc1e0
   13ed4:	movt	r3, #2
   13ed8:	str	r2, [r3]
   13edc:	mov	r3, #1
   13ee0:	strb	r3, [fp, #-37]	; 0xffffffdb
   13ee4:	mov	r3, #0
   13ee8:	str	r3, [fp, #-68]	; 0xffffffbc
   13eec:	mov	r3, #0
   13ef0:	strb	r3, [fp, #-69]	; 0xffffffbb
   13ef4:	sub	r3, fp, #236	; 0xec
   13ef8:	mov	r1, r3
   13efc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13f00:	bl	14404 <__assert_fail@plt+0x3054>
   13f04:	str	r0, [fp, #-84]	; 0xffffffac
   13f08:	ldr	r3, [fp, #-84]	; 0xffffffac
   13f0c:	cmp	r3, #0
   13f10:	bne	13fa4 <__assert_fail@plt+0x2bf4>
   13f14:	ldr	r3, [fp, #-236]	; 0xffffff14
   13f18:	cmp	r3, #3
   13f1c:	beq	13f80 <__assert_fail@plt+0x2bd0>
   13f20:	cmp	r3, #4
   13f24:	beq	13f34 <__assert_fail@plt+0x2b84>
   13f28:	cmp	r3, #2
   13f2c:	bne	13f84 <__assert_fail@plt+0x2bd4>
   13f30:	b	14178 <__assert_fail@plt+0x2dc8>
   13f34:	bl	112c0 <__errno_location@plt>
   13f38:	mov	r3, r0
   13f3c:	ldr	r4, [r3]
   13f40:	movw	r0, #46804	; 0xb6d4
   13f44:	movt	r0, #1
   13f48:	bl	11284 <gettext@plt>
   13f4c:	mov	r5, r0
   13f50:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13f54:	mov	r1, #3
   13f58:	mov	r0, #0
   13f5c:	bl	1766c <__assert_fail@plt+0x62bc>
   13f60:	mov	r3, r0
   13f64:	mov	r2, r5
   13f68:	mov	r1, r4
   13f6c:	mov	r0, #0
   13f70:	bl	111e8 <error@plt>
   13f74:	mov	r3, #0
   13f78:	strb	r3, [fp, #-37]	; 0xffffffdb
   13f7c:	b	14178 <__assert_fail@plt+0x2dc8>
   13f80:	bl	192d4 <__assert_fail@plt+0x7f24>
   13f84:	movw	r3, #46996	; 0xb794
   13f88:	movt	r3, #1
   13f8c:	movw	r2, #938	; 0x3aa
   13f90:	movw	r1, #46820	; 0xb6e4
   13f94:	movt	r1, #1
   13f98:	movw	r0, #46832	; 0xb6f0
   13f9c:	movt	r0, #1
   13fa0:	bl	113b0 <__assert_fail@plt>
   13fa4:	nop	{0}
   13fa8:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13fac:	cmp	r3, #0
   13fb0:	beq	14024 <__assert_fail@plt+0x2c74>
   13fb4:	movw	r1, #46584	; 0xb5f8
   13fb8:	movt	r1, #1
   13fbc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13fc0:	bl	110a4 <strcmp@plt>
   13fc4:	mov	r3, r0
   13fc8:	cmp	r3, #0
   13fcc:	bne	14024 <__assert_fail@plt+0x2c74>
   13fd0:	movw	r1, #46584	; 0xb5f8
   13fd4:	movt	r1, #1
   13fd8:	ldr	r0, [fp, #-84]	; 0xffffffac
   13fdc:	bl	110a4 <strcmp@plt>
   13fe0:	mov	r3, r0
   13fe4:	cmp	r3, #0
   13fe8:	bne	14024 <__assert_fail@plt+0x2c74>
   13fec:	movw	r0, #46872	; 0xb718
   13ff0:	movt	r0, #1
   13ff4:	bl	11284 <gettext@plt>
   13ff8:	mov	r4, r0
   13ffc:	ldr	r1, [fp, #-84]	; 0xffffffac
   14000:	mov	r0, #4
   14004:	bl	17488 <__assert_fail@plt+0x60d8>
   14008:	mov	r3, r0
   1400c:	mov	r2, r4
   14010:	mov	r1, #0
   14014:	mov	r0, #0
   14018:	bl	111e8 <error@plt>
   1401c:	mov	r3, #1
   14020:	strb	r3, [fp, #-69]	; 0xffffffbb
   14024:	ldr	r3, [fp, #-84]	; 0xffffffac
   14028:	ldrb	r3, [r3]
   1402c:	cmp	r3, #0
   14030:	bne	140c4 <__assert_fail@plt+0x2d14>
   14034:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14038:	cmp	r3, #0
   1403c:	bne	14068 <__assert_fail@plt+0x2cb8>
   14040:	movw	r0, #46936	; 0xb758
   14044:	movt	r0, #1
   14048:	bl	11284 <gettext@plt>
   1404c:	mov	r3, r0
   14050:	movw	r2, #46564	; 0xb5e4
   14054:	movt	r2, #1
   14058:	mov	r1, #0
   1405c:	mov	r0, #0
   14060:	bl	111e8 <error@plt>
   14064:	b	140bc <__assert_fail@plt+0x2d0c>
   14068:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1406c:	bl	14520 <__assert_fail@plt+0x3170>
   14070:	str	r0, [fp, #-88]	; 0xffffffa8
   14074:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14078:	mov	r1, #3
   1407c:	mov	r0, #0
   14080:	bl	1766c <__assert_fail@plt+0x62bc>
   14084:	mov	r4, r0
   14088:	movw	r0, #46936	; 0xb758
   1408c:	movt	r0, #1
   14090:	bl	11284 <gettext@plt>
   14094:	mov	r3, r0
   14098:	str	r3, [sp, #4]
   1409c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   140a0:	str	r3, [sp]
   140a4:	mov	r3, r4
   140a8:	movw	r2, #46968	; 0xb778
   140ac:	movt	r2, #1
   140b0:	mov	r1, #0
   140b4:	mov	r0, #0
   140b8:	bl	111e8 <error@plt>
   140bc:	mov	r3, #1
   140c0:	strb	r3, [fp, #-69]	; 0xffffffbb
   140c4:	ldrb	r3, [fp, #-69]	; 0xffffffbb
   140c8:	cmp	r3, #0
   140cc:	beq	140dc <__assert_fail@plt+0x2d2c>
   140d0:	mov	r3, #0
   140d4:	strb	r3, [fp, #-37]	; 0xffffffdb
   140d8:	b	14150 <__assert_fail@plt+0x2da0>
   140dc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   140e0:	cmp	r3, #0
   140e4:	beq	14118 <__assert_fail@plt+0x2d68>
   140e8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   140ec:	mov	r3, r2
   140f0:	lsl	r3, r3, #3
   140f4:	sub	r3, r3, r2
   140f8:	lsl	r3, r3, #4
   140fc:	mov	r2, r3
   14100:	b	1411c <__assert_fail@plt+0x2d6c>
   14104:	nop	{0}
   14108:	andeq	r0, r0, r0
   1410c:	andmi	r0, r0, r0
   14110:	andeq	r0, r0, r0
   14114:	cmnmi	r4, r0
   14118:	mov	r2, #0
   1411c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14120:	add	r3, r3, r2
   14124:	mov	r1, r3
   14128:	ldr	r0, [fp, #-84]	; 0xffffffac
   1412c:	bl	13250 <__assert_fail@plt+0x1ea0>
   14130:	mov	r3, r0
   14134:	mov	r2, r3
   14138:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   1413c:	and	r3, r3, r2
   14140:	cmp	r3, #0
   14144:	movne	r3, #1
   14148:	moveq	r3, #0
   1414c:	strb	r3, [fp, #-37]	; 0xffffffdb
   14150:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14154:	cmp	r3, #0
   14158:	bne	14168 <__assert_fail@plt+0x2db8>
   1415c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14160:	mov	r2, #1
   14164:	str	r2, [r3]
   14168:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1416c:	add	r3, r3, #1
   14170:	str	r3, [fp, #-68]	; 0xffffffbc
   14174:	b	13eec <__assert_fail@plt+0x2b3c>
   14178:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   1417c:	cmp	r3, #0
   14180:	beq	141d0 <__assert_fail@plt+0x2e20>
   14184:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14188:	cmp	r3, #0
   1418c:	bne	141d0 <__assert_fail@plt+0x2e20>
   14190:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14194:	bl	14520 <__assert_fail@plt+0x3170>
   14198:	mov	r3, r0
   1419c:	cmp	r3, #0
   141a0:	bne	141d0 <__assert_fail@plt+0x2e20>
   141a4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   141a8:	mov	r0, #0
   141ac:	bl	13250 <__assert_fail@plt+0x1ea0>
   141b0:	mov	r3, r0
   141b4:	mov	r2, r3
   141b8:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   141bc:	and	r3, r3, r2
   141c0:	cmp	r3, #0
   141c4:	movne	r3, #1
   141c8:	moveq	r3, #0
   141cc:	strb	r3, [fp, #-37]	; 0xffffffdb
   141d0:	ldrb	r3, [fp, #-53]	; 0xffffffcb
   141d4:	cmp	r3, #0
   141d8:	beq	141e8 <__assert_fail@plt+0x2e38>
   141dc:	sub	r3, fp, #232	; 0xe8
   141e0:	mov	r0, r3
   141e4:	bl	17a64 <__assert_fail@plt+0x66b4>
   141e8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   141ec:	bl	14520 <__assert_fail@plt+0x3170>
   141f0:	mov	r3, r0
   141f4:	cmp	r3, #1
   141f8:	bls	1427c <__assert_fail@plt+0x2ecc>
   141fc:	movw	r3, #49584	; 0xc1b0
   14200:	movt	r3, #2
   14204:	ldrd	r2, [r3]
   14208:	sub	r1, fp, #356	; 0x164
   1420c:	strd	r2, [r1]
   14210:	movw	r3, #49592	; 0xc1b8
   14214:	movt	r3, #2
   14218:	ldrd	r4, [r3]
   1421c:	sub	r3, fp, #364	; 0x16c
   14220:	strd	r4, [r3]
   14224:	movw	r3, #49600	; 0xc1c0
   14228:	movt	r3, #2
   1422c:	ldrd	r4, [r3]
   14230:	movw	r3, #49608	; 0xc1c8
   14234:	movt	r3, #2
   14238:	ldrd	r6, [r3]
   1423c:	movw	r3, #49616	; 0xc1d0
   14240:	movt	r3, #2
   14244:	ldrd	r8, [r3]
   14248:	movw	r0, #46980	; 0xb784
   1424c:	movt	r0, #1
   14250:	bl	11284 <gettext@plt>
   14254:	mov	r3, r0
   14258:	str	r3, [sp, #24]
   1425c:	strd	r8, [sp, #16]
   14260:	strd	r6, [sp, #8]
   14264:	strd	r4, [sp]
   14268:	sub	r3, fp, #364	; 0x16c
   1426c:	ldrd	r2, [r3]
   14270:	sub	r1, fp, #356	; 0x164
   14274:	ldrd	r0, [r1]
   14278:	bl	1196c <__assert_fail@plt+0x5bc>
   1427c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14280:	bl	14574 <__assert_fail@plt+0x31c4>
   14284:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14288:	bl	149f0 <__assert_fail@plt+0x3640>
   1428c:	movw	r3, #49636	; 0xc1e4
   14290:	movt	r3, #2
   14294:	ldrb	r3, [r3]
   14298:	cmp	r3, #0
   1429c:	beq	142d4 <__assert_fail@plt+0x2f24>
   142a0:	mov	r0, #0
   142a4:	bl	11398 <close@plt>
   142a8:	mov	r3, r0
   142ac:	cmp	r3, #0
   142b0:	beq	142d4 <__assert_fail@plt+0x2f24>
   142b4:	bl	112c0 <__errno_location@plt>
   142b8:	mov	r3, r0
   142bc:	ldr	r3, [r3]
   142c0:	movw	r2, #46584	; 0xb5f8
   142c4:	movt	r2, #1
   142c8:	mov	r1, r3
   142cc:	mov	r0, #1
   142d0:	bl	111e8 <error@plt>
   142d4:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   142d8:	eor	r3, r3, #1
   142dc:	uxtb	r3, r3
   142e0:	mov	r0, r3
   142e4:	sub	sp, fp, #36	; 0x24
   142e8:	vpop	{d8}
   142ec:	ldrd	r4, [sp]
   142f0:	ldrd	r6, [sp, #8]
   142f4:	ldrd	r8, [sp, #16]
   142f8:	ldr	fp, [sp, #24]
   142fc:	add	sp, sp, #28
   14300:	pop	{pc}		; (ldr pc, [sp], #4)
   14304:	str	fp, [sp, #-8]!
   14308:	str	lr, [sp, #4]
   1430c:	add	fp, sp, #4
   14310:	sub	sp, sp, #16
   14314:	str	r0, [fp, #-16]
   14318:	mov	r0, #24
   1431c:	bl	19448 <__assert_fail@plt+0x8098>
   14320:	mov	r3, r0
   14324:	str	r3, [fp, #-8]
   14328:	ldr	r3, [fp, #-8]
   1432c:	cmp	r3, #0
   14330:	bne	1433c <__assert_fail@plt+0x2f8c>
   14334:	mov	r3, #0
   14338:	b	14364 <__assert_fail@plt+0x2fb4>
   1433c:	ldr	r3, [fp, #-8]
   14340:	mov	r2, #0
   14344:	str	r2, [r3]
   14348:	ldr	r3, [fp, #-8]
   1434c:	ldr	r2, [fp, #-16]
   14350:	str	r2, [r3, #16]
   14354:	ldr	r3, [fp, #-8]
   14358:	ldr	r2, [fp, #-16]
   1435c:	str	r2, [r3, #20]
   14360:	ldr	r3, [fp, #-8]
   14364:	mov	r0, r3
   14368:	sub	sp, fp, #4
   1436c:	ldr	fp, [sp]
   14370:	add	sp, sp, #4
   14374:	pop	{pc}		; (ldr pc, [sp], #4)
   14378:	str	fp, [sp, #-8]!
   1437c:	str	lr, [sp, #4]
   14380:	add	fp, sp, #4
   14384:	sub	sp, sp, #16
   14388:	str	r0, [fp, #-16]
   1438c:	mov	r0, #24
   14390:	bl	19448 <__assert_fail@plt+0x8098>
   14394:	mov	r3, r0
   14398:	str	r3, [fp, #-8]
   1439c:	ldr	r3, [fp, #-8]
   143a0:	cmp	r3, #0
   143a4:	bne	143b0 <__assert_fail@plt+0x3000>
   143a8:	mov	r3, #0
   143ac:	b	143f0 <__assert_fail@plt+0x3040>
   143b0:	ldr	r3, [fp, #-8]
   143b4:	ldr	r2, [fp, #-16]
   143b8:	str	r2, [r3]
   143bc:	ldr	r3, [fp, #-8]
   143c0:	mov	r2, #0
   143c4:	str	r2, [r3, #8]
   143c8:	ldr	r3, [fp, #-8]
   143cc:	mov	r2, #0
   143d0:	str	r2, [r3, #12]
   143d4:	ldr	r3, [fp, #-8]
   143d8:	mov	r2, #0
   143dc:	str	r2, [r3, #4]
   143e0:	ldr	r3, [fp, #-8]
   143e4:	mov	r2, #0
   143e8:	str	r2, [r3, #16]
   143ec:	ldr	r3, [fp, #-8]
   143f0:	mov	r0, r3
   143f4:	sub	sp, fp, #4
   143f8:	ldr	fp, [sp]
   143fc:	add	sp, sp, #4
   14400:	pop	{pc}		; (ldr pc, [sp], #4)
   14404:	str	fp, [sp, #-8]!
   14408:	str	lr, [sp, #4]
   1440c:	add	fp, sp, #4
   14410:	sub	sp, sp, #16
   14414:	str	r0, [fp, #-16]
   14418:	str	r1, [fp, #-20]	; 0xffffffec
   1441c:	ldr	r3, [fp, #-16]
   14420:	ldr	r3, [r3]
   14424:	cmp	r3, #0
   14428:	beq	144c0 <__assert_fail@plt+0x3110>
   1442c:	ldr	r3, [fp, #-16]
   14430:	add	r0, r3, #8
   14434:	ldr	r3, [fp, #-16]
   14438:	add	r1, r3, #12
   1443c:	ldr	r3, [fp, #-16]
   14440:	ldr	r3, [r3]
   14444:	mov	r2, #0
   14448:	bl	11368 <getdelim@plt>
   1444c:	str	r0, [fp, #-8]
   14450:	ldr	r3, [fp, #-8]
   14454:	cmp	r3, #0
   14458:	bge	14494 <__assert_fail@plt+0x30e4>
   1445c:	ldr	r3, [fp, #-16]
   14460:	ldr	r3, [r3]
   14464:	mov	r0, r3
   14468:	bl	1126c <feof@plt>
   1446c:	mov	r3, r0
   14470:	cmp	r3, #0
   14474:	beq	14480 <__assert_fail@plt+0x30d0>
   14478:	mov	r2, #2
   1447c:	b	14484 <__assert_fail@plt+0x30d4>
   14480:	mov	r2, #4
   14484:	ldr	r3, [fp, #-20]	; 0xffffffec
   14488:	str	r2, [r3]
   1448c:	mov	r3, #0
   14490:	b	1450c <__assert_fail@plt+0x315c>
   14494:	ldr	r3, [fp, #-20]	; 0xffffffec
   14498:	mov	r2, #1
   1449c:	str	r2, [r3]
   144a0:	ldr	r3, [fp, #-16]
   144a4:	ldr	r3, [r3, #4]
   144a8:	add	r2, r3, #1
   144ac:	ldr	r3, [fp, #-16]
   144b0:	str	r2, [r3, #4]
   144b4:	ldr	r3, [fp, #-16]
   144b8:	ldr	r3, [r3, #8]
   144bc:	b	1450c <__assert_fail@plt+0x315c>
   144c0:	ldr	r3, [fp, #-16]
   144c4:	ldr	r3, [r3, #20]
   144c8:	ldr	r3, [r3]
   144cc:	cmp	r3, #0
   144d0:	bne	144e8 <__assert_fail@plt+0x3138>
   144d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   144d8:	mov	r2, #2
   144dc:	str	r2, [r3]
   144e0:	mov	r3, #0
   144e4:	b	1450c <__assert_fail@plt+0x315c>
   144e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   144ec:	mov	r2, #1
   144f0:	str	r2, [r3]
   144f4:	ldr	r3, [fp, #-16]
   144f8:	ldr	r3, [r3, #20]
   144fc:	add	r1, r3, #4
   14500:	ldr	r2, [fp, #-16]
   14504:	str	r1, [r2, #20]
   14508:	ldr	r3, [r3]
   1450c:	mov	r0, r3
   14510:	sub	sp, fp, #4
   14514:	ldr	fp, [sp]
   14518:	add	sp, sp, #4
   1451c:	pop	{pc}		; (ldr pc, [sp], #4)
   14520:	push	{fp}		; (str fp, [sp, #-4]!)
   14524:	add	fp, sp, #0
   14528:	sub	sp, sp, #12
   1452c:	str	r0, [fp, #-8]
   14530:	ldr	r3, [fp, #-8]
   14534:	ldr	r3, [r3]
   14538:	cmp	r3, #0
   1453c:	beq	1454c <__assert_fail@plt+0x319c>
   14540:	ldr	r3, [fp, #-8]
   14544:	ldr	r3, [r3, #4]
   14548:	b	14564 <__assert_fail@plt+0x31b4>
   1454c:	ldr	r3, [fp, #-8]
   14550:	ldr	r2, [r3, #20]
   14554:	ldr	r3, [fp, #-8]
   14558:	ldr	r3, [r3, #16]
   1455c:	sub	r3, r2, r3
   14560:	asr	r3, r3, #2
   14564:	mov	r0, r3
   14568:	add	sp, fp, #0
   1456c:	pop	{fp}		; (ldr fp, [sp], #4)
   14570:	bx	lr
   14574:	str	fp, [sp, #-8]!
   14578:	str	lr, [sp, #4]
   1457c:	add	fp, sp, #4
   14580:	sub	sp, sp, #8
   14584:	str	r0, [fp, #-8]
   14588:	ldr	r3, [fp, #-8]
   1458c:	ldr	r3, [r3]
   14590:	cmp	r3, #0
   14594:	beq	145a8 <__assert_fail@plt+0x31f8>
   14598:	ldr	r3, [fp, #-8]
   1459c:	ldr	r3, [r3, #8]
   145a0:	mov	r0, r3
   145a4:	bl	149f0 <__assert_fail@plt+0x3640>
   145a8:	ldr	r0, [fp, #-8]
   145ac:	bl	149f0 <__assert_fail@plt+0x3640>
   145b0:	nop	{0}
   145b4:	sub	sp, fp, #4
   145b8:	ldr	fp, [sp]
   145bc:	add	sp, sp, #4
   145c0:	pop	{pc}		; (ldr pc, [sp], #4)
   145c4:	push	{fp}		; (str fp, [sp, #-4]!)
   145c8:	add	fp, sp, #0
   145cc:	sub	sp, sp, #12
   145d0:	str	r0, [fp, #-8]
   145d4:	movw	r3, #49652	; 0xc1f4
   145d8:	movt	r3, #2
   145dc:	ldr	r2, [fp, #-8]
   145e0:	str	r2, [r3]
   145e4:	nop	{0}
   145e8:	add	sp, fp, #0
   145ec:	pop	{fp}		; (ldr fp, [sp], #4)
   145f0:	bx	lr
   145f4:	push	{fp}		; (str fp, [sp, #-4]!)
   145f8:	add	fp, sp, #0
   145fc:	sub	sp, sp, #12
   14600:	mov	r3, r0
   14604:	strb	r3, [fp, #-5]
   14608:	movw	r3, #49656	; 0xc1f8
   1460c:	movt	r3, #2
   14610:	ldrb	r2, [fp, #-5]
   14614:	strb	r2, [r3]
   14618:	nop	{0}
   1461c:	add	sp, fp, #0
   14620:	pop	{fp}		; (ldr fp, [sp], #4)
   14624:	bx	lr
   14628:	str	r4, [sp, #-12]!
   1462c:	str	fp, [sp, #4]
   14630:	str	lr, [sp, #8]
   14634:	add	fp, sp, #8
   14638:	sub	sp, sp, #20
   1463c:	movw	r3, #49564	; 0xc19c
   14640:	movt	r3, #2
   14644:	ldr	r3, [r3]
   14648:	mov	r0, r3
   1464c:	bl	196a0 <__assert_fail@plt+0x82f0>
   14650:	mov	r3, r0
   14654:	cmp	r3, #0
   14658:	beq	1472c <__assert_fail@plt+0x337c>
   1465c:	movw	r3, #49656	; 0xc1f8
   14660:	movt	r3, #2
   14664:	ldrb	r3, [r3]
   14668:	eor	r3, r3, #1
   1466c:	uxtb	r3, r3
   14670:	cmp	r3, #0
   14674:	bne	1468c <__assert_fail@plt+0x32dc>
   14678:	bl	112c0 <__errno_location@plt>
   1467c:	mov	r3, r0
   14680:	ldr	r3, [r3]
   14684:	cmp	r3, #32
   14688:	beq	1472c <__assert_fail@plt+0x337c>
   1468c:	movw	r0, #47020	; 0xb7ac
   14690:	movt	r0, #1
   14694:	bl	11284 <gettext@plt>
   14698:	str	r0, [fp, #-16]
   1469c:	movw	r3, #49652	; 0xc1f4
   146a0:	movt	r3, #2
   146a4:	ldr	r3, [r3]
   146a8:	cmp	r3, #0
   146ac:	beq	146f8 <__assert_fail@plt+0x3348>
   146b0:	bl	112c0 <__errno_location@plt>
   146b4:	mov	r3, r0
   146b8:	ldr	r4, [r3]
   146bc:	movw	r3, #49652	; 0xc1f4
   146c0:	movt	r3, #2
   146c4:	ldr	r3, [r3]
   146c8:	mov	r0, r3
   146cc:	bl	175f4 <__assert_fail@plt+0x6244>
   146d0:	mov	r2, r0
   146d4:	ldr	r3, [fp, #-16]
   146d8:	str	r3, [sp]
   146dc:	mov	r3, r2
   146e0:	movw	r2, #47032	; 0xb7b8
   146e4:	movt	r2, #1
   146e8:	mov	r1, r4
   146ec:	mov	r0, #0
   146f0:	bl	111e8 <error@plt>
   146f4:	b	14718 <__assert_fail@plt+0x3368>
   146f8:	bl	112c0 <__errno_location@plt>
   146fc:	mov	r3, r0
   14700:	ldr	r1, [r3]
   14704:	ldr	r3, [fp, #-16]
   14708:	movw	r2, #47040	; 0xb7c0
   1470c:	movt	r2, #1
   14710:	mov	r0, #0
   14714:	bl	111e8 <error@plt>
   14718:	movw	r3, #49460	; 0xc134
   1471c:	movt	r3, #2
   14720:	ldr	r3, [r3]
   14724:	mov	r0, r3
   14728:	bl	11110 <_exit@plt>
   1472c:	movw	r3, #49552	; 0xc190
   14730:	movt	r3, #2
   14734:	ldr	r3, [r3]
   14738:	mov	r0, r3
   1473c:	bl	196a0 <__assert_fail@plt+0x82f0>
   14740:	mov	r3, r0
   14744:	cmp	r3, #0
   14748:	beq	14760 <__assert_fail@plt+0x33b0>
   1474c:	movw	r3, #49460	; 0xc134
   14750:	movt	r3, #2
   14754:	ldr	r3, [r3]
   14758:	mov	r0, r3
   1475c:	bl	11110 <_exit@plt>
   14760:	nop	{0}
   14764:	sub	sp, fp, #8
   14768:	ldr	r4, [sp]
   1476c:	ldr	fp, [sp, #4]
   14770:	add	sp, sp, #8
   14774:	pop	{pc}		; (ldr pc, [sp], #4)
   14778:	str	fp, [sp, #-8]!
   1477c:	str	lr, [sp, #4]
   14780:	add	fp, sp, #4
   14784:	sub	sp, sp, #40	; 0x28
   14788:	str	r0, [fp, #-16]
   1478c:	strd	r2, [fp, #-28]	; 0xffffffe4
   14790:	ldr	r3, [fp, #12]
   14794:	str	r3, [sp, #8]
   14798:	ldrd	r2, [fp, #4]
   1479c:	strd	r2, [sp]
   147a0:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   147a4:	ldr	r0, [fp, #-16]
   147a8:	bl	110b0 <posix_fadvise64@plt>
   147ac:	str	r0, [fp, #-8]
   147b0:	nop	{0}
   147b4:	sub	sp, fp, #4
   147b8:	ldr	fp, [sp]
   147bc:	add	sp, sp, #4
   147c0:	pop	{pc}		; (ldr pc, [sp], #4)
   147c4:	str	fp, [sp, #-8]!
   147c8:	str	lr, [sp, #4]
   147cc:	add	fp, sp, #4
   147d0:	sub	sp, sp, #24
   147d4:	str	r0, [fp, #-8]
   147d8:	str	r1, [fp, #-12]
   147dc:	ldr	r3, [fp, #-8]
   147e0:	cmp	r3, #0
   147e4:	beq	14818 <__assert_fail@plt+0x3468>
   147e8:	ldr	r0, [fp, #-8]
   147ec:	bl	11308 <fileno@plt>
   147f0:	mov	r1, r0
   147f4:	ldr	r3, [fp, #-12]
   147f8:	str	r3, [sp, #8]
   147fc:	mov	r2, #0
   14800:	mov	r3, #0
   14804:	strd	r2, [sp]
   14808:	mov	r2, #0
   1480c:	mov	r3, #0
   14810:	mov	r0, r1
   14814:	bl	14778 <__assert_fail@plt+0x33c8>
   14818:	nop	{0}
   1481c:	sub	sp, fp, #4
   14820:	ldr	fp, [sp]
   14824:	add	sp, sp, #4
   14828:	pop	{pc}		; (ldr pc, [sp], #4)
   1482c:	str	fp, [sp, #-8]!
   14830:	str	lr, [sp, #4]
   14834:	add	fp, sp, #4
   14838:	sub	sp, sp, #32
   1483c:	str	r0, [fp, #-24]	; 0xffffffe8
   14840:	mov	r3, #0
   14844:	str	r3, [fp, #-8]
   14848:	mov	r3, #0
   1484c:	str	r3, [fp, #-12]
   14850:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14854:	bl	11308 <fileno@plt>
   14858:	str	r0, [fp, #-16]
   1485c:	ldr	r3, [fp, #-16]
   14860:	cmp	r3, #0
   14864:	bge	14878 <__assert_fail@plt+0x34c8>
   14868:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1486c:	bl	11314 <fclose@plt>
   14870:	mov	r3, r0
   14874:	b	1491c <__assert_fail@plt+0x356c>
   14878:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1487c:	bl	11230 <__freading@plt>
   14880:	mov	r3, r0
   14884:	cmp	r3, #0
   14888:	beq	148c4 <__assert_fail@plt+0x3514>
   1488c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14890:	bl	11308 <fileno@plt>
   14894:	mov	r1, r0
   14898:	mov	r3, #1
   1489c:	str	r3, [sp]
   148a0:	mov	r2, #0
   148a4:	mov	r3, #0
   148a8:	mov	r0, r1
   148ac:	bl	111ac <lseek64@plt>
   148b0:	mvn	r2, #0
   148b4:	mvn	r3, #0
   148b8:	cmp	r1, r3
   148bc:	cmpeq	r0, r2
   148c0:	beq	148e8 <__assert_fail@plt+0x3538>
   148c4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   148c8:	bl	14984 <__assert_fail@plt+0x35d4>
   148cc:	mov	r3, r0
   148d0:	cmp	r3, #0
   148d4:	beq	148e8 <__assert_fail@plt+0x3538>
   148d8:	bl	112c0 <__errno_location@plt>
   148dc:	mov	r3, r0
   148e0:	ldr	r3, [r3]
   148e4:	str	r3, [fp, #-8]
   148e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   148ec:	bl	11314 <fclose@plt>
   148f0:	str	r0, [fp, #-12]
   148f4:	ldr	r3, [fp, #-8]
   148f8:	cmp	r3, #0
   148fc:	beq	14918 <__assert_fail@plt+0x3568>
   14900:	bl	112c0 <__errno_location@plt>
   14904:	mov	r2, r0
   14908:	ldr	r3, [fp, #-8]
   1490c:	str	r3, [r2]
   14910:	mvn	r3, #0
   14914:	str	r3, [fp, #-12]
   14918:	ldr	r3, [fp, #-12]
   1491c:	mov	r0, r3
   14920:	sub	sp, fp, #4
   14924:	ldr	fp, [sp]
   14928:	add	sp, sp, #4
   1492c:	pop	{pc}		; (ldr pc, [sp], #4)
   14930:	str	fp, [sp, #-8]!
   14934:	str	lr, [sp, #4]
   14938:	add	fp, sp, #4
   1493c:	sub	sp, sp, #16
   14940:	str	r0, [fp, #-8]
   14944:	ldr	r3, [fp, #-8]
   14948:	ldr	r3, [r3]
   1494c:	and	r3, r3, #256	; 0x100
   14950:	cmp	r3, #0
   14954:	beq	14970 <__assert_fail@plt+0x35c0>
   14958:	mov	r3, #1
   1495c:	str	r3, [sp]
   14960:	mov	r2, #0
   14964:	mov	r3, #0
   14968:	ldr	r0, [fp, #-8]
   1496c:	bl	14a94 <__assert_fail@plt+0x36e4>
   14970:	nop	{0}
   14974:	sub	sp, fp, #4
   14978:	ldr	fp, [sp]
   1497c:	add	sp, sp, #4
   14980:	pop	{pc}		; (ldr pc, [sp], #4)
   14984:	str	fp, [sp, #-8]!
   14988:	str	lr, [sp, #4]
   1498c:	add	fp, sp, #4
   14990:	sub	sp, sp, #8
   14994:	str	r0, [fp, #-8]
   14998:	ldr	r3, [fp, #-8]
   1499c:	cmp	r3, #0
   149a0:	beq	149b8 <__assert_fail@plt+0x3608>
   149a4:	ldr	r0, [fp, #-8]
   149a8:	bl	11230 <__freading@plt>
   149ac:	mov	r3, r0
   149b0:	cmp	r3, #0
   149b4:	bne	149c8 <__assert_fail@plt+0x3618>
   149b8:	ldr	r0, [fp, #-8]
   149bc:	bl	110d4 <fflush@plt>
   149c0:	mov	r3, r0
   149c4:	b	149dc <__assert_fail@plt+0x362c>
   149c8:	ldr	r0, [fp, #-8]
   149cc:	bl	14930 <__assert_fail@plt+0x3580>
   149d0:	ldr	r0, [fp, #-8]
   149d4:	bl	110d4 <fflush@plt>
   149d8:	mov	r3, r0
   149dc:	mov	r0, r3
   149e0:	sub	sp, fp, #4
   149e4:	ldr	fp, [sp]
   149e8:	add	sp, sp, #4
   149ec:	pop	{pc}		; (ldr pc, [sp], #4)
   149f0:	str	r4, [sp, #-12]!
   149f4:	str	fp, [sp, #4]
   149f8:	str	lr, [sp, #8]
   149fc:	add	fp, sp, #8
   14a00:	sub	sp, sp, #20
   14a04:	str	r0, [fp, #-24]	; 0xffffffe8
   14a08:	bl	112c0 <__errno_location@plt>
   14a0c:	mov	r3, r0
   14a10:	ldr	r3, [r3]
   14a14:	str	r3, [fp, #-20]	; 0xffffffec
   14a18:	bl	112c0 <__errno_location@plt>
   14a1c:	mov	r3, r0
   14a20:	ldr	r3, [r3]
   14a24:	str	r3, [fp, #-16]
   14a28:	bl	112c0 <__errno_location@plt>
   14a2c:	mov	r2, r0
   14a30:	mov	r3, #0
   14a34:	str	r3, [r2]
   14a38:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14a3c:	bl	110f8 <free@plt>
   14a40:	bl	112c0 <__errno_location@plt>
   14a44:	mov	r3, r0
   14a48:	ldr	r3, [r3]
   14a4c:	cmp	r3, #0
   14a50:	moveq	r3, #1
   14a54:	movne	r3, #0
   14a58:	uxtb	r3, r3
   14a5c:	mov	r4, r3
   14a60:	bl	112c0 <__errno_location@plt>
   14a64:	mov	r2, r0
   14a68:	lsl	r3, r4, #2
   14a6c:	sub	r1, fp, #12
   14a70:	add	r3, r1, r3
   14a74:	ldr	r3, [r3, #-8]
   14a78:	str	r3, [r2]
   14a7c:	nop	{0}
   14a80:	sub	sp, fp, #8
   14a84:	ldr	r4, [sp]
   14a88:	ldr	fp, [sp, #4]
   14a8c:	add	sp, sp, #8
   14a90:	pop	{pc}		; (ldr pc, [sp], #4)
   14a94:	str	fp, [sp, #-8]!
   14a98:	str	lr, [sp, #4]
   14a9c:	add	fp, sp, #4
   14aa0:	sub	sp, sp, #32
   14aa4:	str	r0, [fp, #-16]
   14aa8:	strd	r2, [fp, #-28]	; 0xffffffe4
   14aac:	ldr	r3, [fp, #-16]
   14ab0:	ldr	r2, [r3, #8]
   14ab4:	ldr	r3, [fp, #-16]
   14ab8:	ldr	r3, [r3, #4]
   14abc:	cmp	r2, r3
   14ac0:	bne	14b58 <__assert_fail@plt+0x37a8>
   14ac4:	ldr	r3, [fp, #-16]
   14ac8:	ldr	r2, [r3, #20]
   14acc:	ldr	r3, [fp, #-16]
   14ad0:	ldr	r3, [r3, #16]
   14ad4:	cmp	r2, r3
   14ad8:	bne	14b58 <__assert_fail@plt+0x37a8>
   14adc:	ldr	r3, [fp, #-16]
   14ae0:	ldr	r3, [r3, #36]	; 0x24
   14ae4:	cmp	r3, #0
   14ae8:	bne	14b58 <__assert_fail@plt+0x37a8>
   14aec:	ldr	r0, [fp, #-16]
   14af0:	bl	11308 <fileno@plt>
   14af4:	mov	r1, r0
   14af8:	ldr	r3, [fp, #4]
   14afc:	str	r3, [sp]
   14b00:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   14b04:	mov	r0, r1
   14b08:	bl	111ac <lseek64@plt>
   14b0c:	strd	r0, [fp, #-12]
   14b10:	ldrd	r2, [fp, #-12]
   14b14:	mvn	r0, #0
   14b18:	mvn	r1, #0
   14b1c:	cmp	r3, r1
   14b20:	cmpeq	r2, r0
   14b24:	bne	14b30 <__assert_fail@plt+0x3780>
   14b28:	mvn	r3, #0
   14b2c:	b	14b70 <__assert_fail@plt+0x37c0>
   14b30:	ldr	r3, [fp, #-16]
   14b34:	ldr	r3, [r3]
   14b38:	bic	r2, r3, #16
   14b3c:	ldr	r3, [fp, #-16]
   14b40:	str	r2, [r3]
   14b44:	ldr	r1, [fp, #-16]
   14b48:	ldrd	r2, [fp, #-12]
   14b4c:	strd	r2, [r1, #80]	; 0x50
   14b50:	mov	r3, #0
   14b54:	b	14b70 <__assert_fail@plt+0x37c0>
   14b58:	ldr	r3, [fp, #4]
   14b5c:	str	r3, [sp]
   14b60:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   14b64:	ldr	r0, [fp, #-16]
   14b68:	bl	11320 <fseeko64@plt>
   14b6c:	mov	r3, r0
   14b70:	mov	r0, r3
   14b74:	sub	sp, fp, #4
   14b78:	ldr	fp, [sp]
   14b7c:	add	sp, sp, #4
   14b80:	pop	{pc}		; (ldr pc, [sp], #4)
   14b84:	str	fp, [sp, #-8]!
   14b88:	str	lr, [sp, #4]
   14b8c:	add	fp, sp, #4
   14b90:	sub	sp, sp, #24
   14b94:	strd	r0, [fp, #-20]	; 0xffffffec
   14b98:	str	r2, [fp, #-24]	; 0xffffffe8
   14b9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14ba0:	add	r3, r3, #20
   14ba4:	str	r3, [fp, #-8]
   14ba8:	ldr	r3, [fp, #-8]
   14bac:	mov	r2, #0
   14bb0:	strb	r2, [r3]
   14bb4:	ldrd	r0, [fp, #-20]	; 0xffffffec
   14bb8:	mov	r2, #10
   14bbc:	mov	r3, #0
   14bc0:	bl	1acec <_obstack_memory_used@@Base+0xbec>
   14bc4:	uxtb	r3, r2
   14bc8:	ldr	r2, [fp, #-8]
   14bcc:	sub	r2, r2, #1
   14bd0:	str	r2, [fp, #-8]
   14bd4:	add	r3, r3, #48	; 0x30
   14bd8:	uxtb	r2, r3
   14bdc:	ldr	r3, [fp, #-8]
   14be0:	strb	r2, [r3]
   14be4:	ldrd	r0, [fp, #-20]	; 0xffffffec
   14be8:	mov	r2, #10
   14bec:	mov	r3, #0
   14bf0:	bl	1acec <_obstack_memory_used@@Base+0xbec>
   14bf4:	mov	r2, r0
   14bf8:	mov	r3, r1
   14bfc:	strd	r2, [fp, #-20]	; 0xffffffec
   14c00:	ldrd	r2, [fp, #-20]	; 0xffffffec
   14c04:	orrs	r3, r2, r3
   14c08:	bne	14bb4 <__assert_fail@plt+0x3804>
   14c0c:	ldr	r3, [fp, #-8]
   14c10:	mov	r0, r3
   14c14:	sub	sp, fp, #4
   14c18:	ldr	fp, [sp]
   14c1c:	add	sp, sp, #4
   14c20:	pop	{pc}		; (ldr pc, [sp], #4)
   14c24:	str	fp, [sp, #-8]!
   14c28:	str	lr, [sp, #4]
   14c2c:	add	fp, sp, #4
   14c30:	sub	sp, sp, #16
   14c34:	str	r0, [fp, #-16]
   14c38:	ldr	r0, [fp, #-16]
   14c3c:	bl	110e0 <wcwidth@plt>
   14c40:	str	r0, [fp, #-8]
   14c44:	ldr	r3, [fp, #-8]
   14c48:	cmp	r3, #0
   14c4c:	bge	14c70 <__assert_fail@plt+0x38c0>
   14c50:	ldr	r0, [fp, #-16]
   14c54:	bl	11170 <iswcntrl@plt>
   14c58:	mov	r3, r0
   14c5c:	cmp	r3, #0
   14c60:	moveq	r3, #1
   14c64:	movne	r3, #0
   14c68:	uxtb	r3, r3
   14c6c:	b	14c74 <__assert_fail@plt+0x38c4>
   14c70:	ldr	r3, [fp, #-8]
   14c74:	mov	r0, r3
   14c78:	sub	sp, fp, #4
   14c7c:	ldr	fp, [sp]
   14c80:	add	sp, sp, #4
   14c84:	pop	{pc}		; (ldr pc, [sp], #4)
   14c88:	str	fp, [sp, #-8]!
   14c8c:	str	lr, [sp, #4]
   14c90:	add	fp, sp, #4
   14c94:	sub	sp, sp, #8
   14c98:	str	r0, [fp, #-8]
   14c9c:	str	r1, [fp, #-12]
   14ca0:	ldr	r3, [fp, #-12]
   14ca4:	ldr	r2, [r3]
   14ca8:	ldr	r3, [fp, #-12]
   14cac:	add	r3, r3, #16
   14cb0:	cmp	r2, r3
   14cb4:	bne	14cec <__assert_fail@plt+0x393c>
   14cb8:	ldr	r3, [fp, #-8]
   14cbc:	add	r0, r3, #16
   14cc0:	ldr	r3, [fp, #-12]
   14cc4:	add	r1, r3, #16
   14cc8:	ldr	r3, [fp, #-12]
   14ccc:	ldr	r3, [r3, #4]
   14cd0:	mov	r2, r3
   14cd4:	bl	1111c <memcpy@plt>
   14cd8:	ldr	r3, [fp, #-8]
   14cdc:	add	r2, r3, #16
   14ce0:	ldr	r3, [fp, #-8]
   14ce4:	str	r2, [r3]
   14ce8:	b	14cfc <__assert_fail@plt+0x394c>
   14cec:	ldr	r3, [fp, #-12]
   14cf0:	ldr	r2, [r3]
   14cf4:	ldr	r3, [fp, #-8]
   14cf8:	str	r2, [r3]
   14cfc:	ldr	r3, [fp, #-12]
   14d00:	ldr	r2, [r3, #4]
   14d04:	ldr	r3, [fp, #-8]
   14d08:	str	r2, [r3, #4]
   14d0c:	ldr	r3, [fp, #-12]
   14d10:	ldrb	r2, [r3, #8]
   14d14:	ldr	r3, [fp, #-8]
   14d18:	strb	r2, [r3, #8]
   14d1c:	ldr	r3, [fp, #-8]
   14d20:	ldrb	r3, [r3, #8]
   14d24:	cmp	r3, #0
   14d28:	beq	14d3c <__assert_fail@plt+0x398c>
   14d2c:	ldr	r3, [fp, #-12]
   14d30:	ldr	r2, [r3, #12]
   14d34:	ldr	r3, [fp, #-8]
   14d38:	str	r2, [r3, #12]
   14d3c:	nop	{0}
   14d40:	sub	sp, fp, #4
   14d44:	ldr	fp, [sp]
   14d48:	add	sp, sp, #4
   14d4c:	pop	{pc}		; (ldr pc, [sp], #4)
   14d50:	push	{fp}		; (str fp, [sp, #-4]!)
   14d54:	add	fp, sp, #0
   14d58:	sub	sp, sp, #12
   14d5c:	mov	r3, r0
   14d60:	strb	r3, [fp, #-5]
   14d64:	ldrb	r3, [fp, #-5]
   14d68:	lsr	r3, r3, #5
   14d6c:	uxtb	r3, r3
   14d70:	mov	r2, r3
   14d74:	movw	r3, #47044	; 0xb7c4
   14d78:	movt	r3, #1
   14d7c:	ldr	r2, [r3, r2, lsl #2]
   14d80:	ldrb	r3, [fp, #-5]
   14d84:	and	r3, r3, #31
   14d88:	lsr	r3, r2, r3
   14d8c:	and	r3, r3, #1
   14d90:	cmp	r3, #0
   14d94:	movne	r3, #1
   14d98:	moveq	r3, #0
   14d9c:	uxtb	r3, r3
   14da0:	mov	r0, r3
   14da4:	add	sp, fp, #0
   14da8:	pop	{fp}		; (ldr fp, [sp], #4)
   14dac:	bx	lr
   14db0:	str	fp, [sp, #-8]!
   14db4:	str	lr, [sp, #4]
   14db8:	add	fp, sp, #4
   14dbc:	sub	sp, sp, #32
   14dc0:	str	r0, [fp, #-24]	; 0xffffffe8
   14dc4:	str	r1, [fp, #-28]	; 0xffffffe4
   14dc8:	str	r2, [fp, #-32]	; 0xffffffe0
   14dcc:	str	r3, [fp, #-36]	; 0xffffffdc
   14dd0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14dd4:	cmp	r3, #0
   14dd8:	bne	14de4 <__assert_fail@plt+0x3a34>
   14ddc:	sub	r3, fp, #16
   14de0:	str	r3, [fp, #-24]	; 0xffffffe8
   14de4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14de8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14dec:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14df0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14df4:	bl	111dc <mbrtowc@plt>
   14df8:	str	r0, [fp, #-8]
   14dfc:	ldr	r3, [fp, #-8]
   14e00:	cmn	r3, #3
   14e04:	bls	14e50 <__assert_fail@plt+0x3aa0>
   14e08:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14e0c:	cmp	r3, #0
   14e10:	beq	14e50 <__assert_fail@plt+0x3aa0>
   14e14:	mov	r0, #0
   14e18:	bl	19784 <__assert_fail@plt+0x83d4>
   14e1c:	mov	r3, r0
   14e20:	eor	r3, r3, #1
   14e24:	uxtb	r3, r3
   14e28:	cmp	r3, #0
   14e2c:	beq	14e50 <__assert_fail@plt+0x3aa0>
   14e30:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14e34:	ldrb	r3, [r3]
   14e38:	strb	r3, [fp, #-9]
   14e3c:	ldrb	r2, [fp, #-9]
   14e40:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14e44:	str	r2, [r3]
   14e48:	mov	r3, #1
   14e4c:	b	14e54 <__assert_fail@plt+0x3aa4>
   14e50:	ldr	r3, [fp, #-8]
   14e54:	mov	r0, r3
   14e58:	sub	sp, fp, #4
   14e5c:	ldr	fp, [sp]
   14e60:	add	sp, sp, #4
   14e64:	pop	{pc}		; (ldr pc, [sp], #4)
   14e68:	str	fp, [sp, #-8]!
   14e6c:	str	lr, [sp, #4]
   14e70:	add	fp, sp, #4
   14e74:	sub	sp, sp, #80	; 0x50
   14e78:	mov	r0, #85	; 0x55
   14e7c:	bl	1114c <sysconf@plt>
   14e80:	vmov	s15, r0
   14e84:	vcvt.f64.s32	d7, s15
   14e88:	vstr	d7, [fp, #-12]
   14e8c:	mov	r0, #30
   14e90:	bl	1114c <sysconf@plt>
   14e94:	vmov	s15, r0
   14e98:	vcvt.f64.s32	d7, s15
   14e9c:	vstr	d7, [fp, #-20]	; 0xffffffec
   14ea0:	vldr	d7, [fp, #-12]
   14ea4:	vcmpe.f64	d7, #0.0
   14ea8:	vmrs	APSR_nzcv, fpscr
   14eac:	blt	14ed0 <__assert_fail@plt+0x3b20>
   14eb0:	vldr	d7, [fp, #-20]	; 0xffffffec
   14eb4:	vcmpe.f64	d7, #0.0
   14eb8:	vmrs	APSR_nzcv, fpscr
   14ebc:	blt	14ed0 <__assert_fail@plt+0x3b20>
   14ec0:	vldr	d6, [fp, #-12]
   14ec4:	vldr	d7, [fp, #-20]	; 0xffffffec
   14ec8:	vmul.f64	d7, d6, d7
   14ecc:	b	14f0c <__assert_fail@plt+0x3b5c>
   14ed0:	sub	r3, fp, #84	; 0x54
   14ed4:	mov	r0, r3
   14ed8:	bl	1120c <sysinfo@plt>
   14edc:	mov	r3, r0
   14ee0:	cmp	r3, #0
   14ee4:	bne	14f08 <__assert_fail@plt+0x3b58>
   14ee8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14eec:	vmov	s15, r3
   14ef0:	vcvt.f64.u32	d6, s15
   14ef4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14ef8:	vmov	s15, r3
   14efc:	vcvt.f64.u32	d7, s15
   14f00:	vmul.f64	d7, d6, d7
   14f04:	b	14f0c <__assert_fail@plt+0x3b5c>
   14f08:	vldr	d7, [pc, #16]	; 14f20 <__assert_fail@plt+0x3b70>
   14f0c:	vmov.f64	d0, d7
   14f10:	sub	sp, fp, #4
   14f14:	ldr	fp, [sp]
   14f18:	add	sp, sp, #4
   14f1c:	pop	{pc}		; (ldr pc, [sp], #4)
   14f20:	andeq	r0, r0, r0
   14f24:	orrsmi	r0, r0, r0
   14f28:	str	fp, [sp, #-8]!
   14f2c:	str	lr, [sp, #4]
   14f30:	add	fp, sp, #4
   14f34:	sub	sp, sp, #80	; 0x50
   14f38:	mov	r0, #86	; 0x56
   14f3c:	bl	1114c <sysconf@plt>
   14f40:	vmov	s15, r0
   14f44:	vcvt.f64.s32	d7, s15
   14f48:	vstr	d7, [fp, #-12]
   14f4c:	mov	r0, #30
   14f50:	bl	1114c <sysconf@plt>
   14f54:	vmov	s15, r0
   14f58:	vcvt.f64.s32	d7, s15
   14f5c:	vstr	d7, [fp, #-20]	; 0xffffffec
   14f60:	vldr	d7, [fp, #-12]
   14f64:	vcmpe.f64	d7, #0.0
   14f68:	vmrs	APSR_nzcv, fpscr
   14f6c:	blt	14f90 <__assert_fail@plt+0x3be0>
   14f70:	vldr	d7, [fp, #-20]	; 0xffffffec
   14f74:	vcmpe.f64	d7, #0.0
   14f78:	vmrs	APSR_nzcv, fpscr
   14f7c:	blt	14f90 <__assert_fail@plt+0x3be0>
   14f80:	vldr	d6, [fp, #-12]
   14f84:	vldr	d7, [fp, #-20]	; 0xffffffec
   14f88:	vmul.f64	d7, d6, d7
   14f8c:	b	14fe8 <__assert_fail@plt+0x3c38>
   14f90:	sub	r3, fp, #84	; 0x54
   14f94:	mov	r0, r3
   14f98:	bl	1120c <sysinfo@plt>
   14f9c:	mov	r3, r0
   14fa0:	cmp	r3, #0
   14fa4:	bne	14fd8 <__assert_fail@plt+0x3c28>
   14fa8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14fac:	vmov	s15, r3
   14fb0:	vcvt.f64.u32	d6, s15
   14fb4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14fb8:	vmov	s15, r3
   14fbc:	vcvt.f64.u32	d7, s15
   14fc0:	vadd.f64	d6, d6, d7
   14fc4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14fc8:	vmov	s15, r3
   14fcc:	vcvt.f64.u32	d7, s15
   14fd0:	vmul.f64	d7, d6, d7
   14fd4:	b	14fe8 <__assert_fail@plt+0x3c38>
   14fd8:	bl	14e68 <__assert_fail@plt+0x3ab8>
   14fdc:	vmov.f64	d5, d0
   14fe0:	vldr	d6, [pc, #24]	; 15000 <__assert_fail@plt+0x3c50>
   14fe4:	vdiv.f64	d7, d5, d6
   14fe8:	vmov.f64	d0, d7
   14fec:	sub	sp, fp, #4
   14ff0:	ldr	fp, [sp]
   14ff4:	add	sp, sp, #4
   14ff8:	pop	{pc}		; (ldr pc, [sp], #4)
   14ffc:	nop	{0}
   15000:	andeq	r0, r0, r0
   15004:	andsmi	r0, r0, r0
   15008:	str	fp, [sp, #-8]!
   1500c:	str	lr, [sp, #4]
   15010:	add	fp, sp, #4
   15014:	sub	sp, sp, #16
   15018:	str	r0, [fp, #-16]
   1501c:	ldr	r3, [fp, #-16]
   15020:	cmp	r3, #0
   15024:	bne	1504c <__assert_fail@plt+0x3c9c>
   15028:	movw	r3, #49552	; 0xc190
   1502c:	movt	r3, #2
   15030:	ldr	r3, [r3]
   15034:	mov	r2, #55	; 0x37
   15038:	mov	r1, #1
   1503c:	movw	r0, #47076	; 0xb7e4
   15040:	movt	r0, #1
   15044:	bl	111a0 <fwrite@plt>
   15048:	bl	1138c <abort@plt>
   1504c:	mov	r1, #47	; 0x2f
   15050:	ldr	r0, [fp, #-16]
   15054:	bl	11338 <strrchr@plt>
   15058:	str	r0, [fp, #-8]
   1505c:	ldr	r3, [fp, #-8]
   15060:	cmp	r3, #0
   15064:	beq	15074 <__assert_fail@plt+0x3cc4>
   15068:	ldr	r3, [fp, #-8]
   1506c:	add	r3, r3, #1
   15070:	b	15078 <__assert_fail@plt+0x3cc8>
   15074:	ldr	r3, [fp, #-16]
   15078:	str	r3, [fp, #-12]
   1507c:	ldr	r2, [fp, #-12]
   15080:	ldr	r3, [fp, #-16]
   15084:	sub	r3, r2, r3
   15088:	cmp	r3, #6
   1508c:	ble	150fc <__assert_fail@plt+0x3d4c>
   15090:	ldr	r3, [fp, #-12]
   15094:	sub	r3, r3, #7
   15098:	mov	r2, #7
   1509c:	movw	r1, #47132	; 0xb81c
   150a0:	movt	r1, #1
   150a4:	mov	r0, r3
   150a8:	bl	11380 <strncmp@plt>
   150ac:	mov	r3, r0
   150b0:	cmp	r3, #0
   150b4:	bne	150fc <__assert_fail@plt+0x3d4c>
   150b8:	ldr	r3, [fp, #-12]
   150bc:	str	r3, [fp, #-16]
   150c0:	mov	r2, #3
   150c4:	movw	r1, #47140	; 0xb824
   150c8:	movt	r1, #1
   150cc:	ldr	r0, [fp, #-12]
   150d0:	bl	11380 <strncmp@plt>
   150d4:	mov	r3, r0
   150d8:	cmp	r3, #0
   150dc:	bne	150fc <__assert_fail@plt+0x3d4c>
   150e0:	ldr	r3, [fp, #-12]
   150e4:	add	r3, r3, #3
   150e8:	str	r3, [fp, #-16]
   150ec:	movw	r3, #49536	; 0xc180
   150f0:	movt	r3, #2
   150f4:	ldr	r2, [fp, #-16]
   150f8:	str	r2, [r3]
   150fc:	movw	r3, #49660	; 0xc1fc
   15100:	movt	r3, #2
   15104:	ldr	r2, [fp, #-16]
   15108:	str	r2, [r3]
   1510c:	movw	r3, #49540	; 0xc184
   15110:	movt	r3, #2
   15114:	ldr	r2, [fp, #-16]
   15118:	str	r2, [r3]
   1511c:	nop	{0}
   15120:	sub	sp, fp, #4
   15124:	ldr	fp, [sp]
   15128:	add	sp, sp, #4
   1512c:	pop	{pc}		; (ldr pc, [sp], #4)
   15130:	str	fp, [sp, #-8]!
   15134:	str	lr, [sp, #4]
   15138:	add	fp, sp, #4
   1513c:	sub	sp, sp, #16
   15140:	str	r0, [fp, #-16]
   15144:	bl	112c0 <__errno_location@plt>
   15148:	mov	r3, r0
   1514c:	ldr	r3, [r3]
   15150:	str	r3, [fp, #-8]
   15154:	ldr	r3, [fp, #-16]
   15158:	cmp	r3, #0
   1515c:	beq	15168 <__assert_fail@plt+0x3db8>
   15160:	ldr	r3, [fp, #-16]
   15164:	b	15170 <__assert_fail@plt+0x3dc0>
   15168:	movw	r3, #49664	; 0xc200
   1516c:	movt	r3, #2
   15170:	mov	r1, #48	; 0x30
   15174:	mov	r0, r3
   15178:	bl	19180 <__assert_fail@plt+0x7dd0>
   1517c:	mov	r3, r0
   15180:	str	r3, [fp, #-12]
   15184:	bl	112c0 <__errno_location@plt>
   15188:	mov	r2, r0
   1518c:	ldr	r3, [fp, #-8]
   15190:	str	r3, [r2]
   15194:	ldr	r3, [fp, #-12]
   15198:	mov	r0, r3
   1519c:	sub	sp, fp, #4
   151a0:	ldr	fp, [sp]
   151a4:	add	sp, sp, #4
   151a8:	pop	{pc}		; (ldr pc, [sp], #4)
   151ac:	push	{fp}		; (str fp, [sp, #-4]!)
   151b0:	add	fp, sp, #0
   151b4:	sub	sp, sp, #12
   151b8:	str	r0, [fp, #-8]
   151bc:	ldr	r3, [fp, #-8]
   151c0:	cmp	r3, #0
   151c4:	beq	151d0 <__assert_fail@plt+0x3e20>
   151c8:	ldr	r3, [fp, #-8]
   151cc:	b	151d8 <__assert_fail@plt+0x3e28>
   151d0:	movw	r3, #49664	; 0xc200
   151d4:	movt	r3, #2
   151d8:	ldr	r3, [r3]
   151dc:	mov	r0, r3
   151e0:	add	sp, fp, #0
   151e4:	pop	{fp}		; (ldr fp, [sp], #4)
   151e8:	bx	lr
   151ec:	push	{fp}		; (str fp, [sp, #-4]!)
   151f0:	add	fp, sp, #0
   151f4:	sub	sp, sp, #12
   151f8:	str	r0, [fp, #-8]
   151fc:	str	r1, [fp, #-12]
   15200:	ldr	r3, [fp, #-8]
   15204:	cmp	r3, #0
   15208:	beq	15214 <__assert_fail@plt+0x3e64>
   1520c:	ldr	r3, [fp, #-8]
   15210:	b	1521c <__assert_fail@plt+0x3e6c>
   15214:	movw	r3, #49664	; 0xc200
   15218:	movt	r3, #2
   1521c:	ldr	r2, [fp, #-12]
   15220:	str	r2, [r3]
   15224:	nop	{0}
   15228:	add	sp, fp, #0
   1522c:	pop	{fp}		; (ldr fp, [sp], #4)
   15230:	bx	lr
   15234:	push	{fp}		; (str fp, [sp, #-4]!)
   15238:	add	fp, sp, #0
   1523c:	sub	sp, sp, #36	; 0x24
   15240:	str	r0, [fp, #-24]	; 0xffffffe8
   15244:	mov	r3, r1
   15248:	str	r2, [fp, #-32]	; 0xffffffe0
   1524c:	strb	r3, [fp, #-25]	; 0xffffffe7
   15250:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   15254:	strb	r3, [fp, #-5]
   15258:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1525c:	cmp	r3, #0
   15260:	beq	1526c <__assert_fail@plt+0x3ebc>
   15264:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15268:	b	15274 <__assert_fail@plt+0x3ec4>
   1526c:	movw	r3, #49664	; 0xc200
   15270:	movt	r3, #2
   15274:	add	r2, r3, #8
   15278:	ldrb	r3, [fp, #-5]
   1527c:	lsr	r3, r3, #5
   15280:	uxtb	r3, r3
   15284:	lsl	r3, r3, #2
   15288:	add	r3, r2, r3
   1528c:	str	r3, [fp, #-12]
   15290:	ldrb	r3, [fp, #-5]
   15294:	and	r3, r3, #31
   15298:	str	r3, [fp, #-16]
   1529c:	ldr	r3, [fp, #-12]
   152a0:	ldr	r2, [r3]
   152a4:	ldr	r3, [fp, #-16]
   152a8:	lsr	r3, r2, r3
   152ac:	and	r3, r3, #1
   152b0:	str	r3, [fp, #-20]	; 0xffffffec
   152b4:	ldr	r3, [fp, #-12]
   152b8:	ldr	r3, [r3]
   152bc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   152c0:	and	r1, r2, #1
   152c4:	ldr	r2, [fp, #-20]	; 0xffffffec
   152c8:	eor	r1, r1, r2
   152cc:	ldr	r2, [fp, #-16]
   152d0:	lsl	r2, r1, r2
   152d4:	eor	r2, r2, r3
   152d8:	ldr	r3, [fp, #-12]
   152dc:	str	r2, [r3]
   152e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   152e4:	mov	r0, r3
   152e8:	add	sp, fp, #0
   152ec:	pop	{fp}		; (ldr fp, [sp], #4)
   152f0:	bx	lr
   152f4:	push	{fp}		; (str fp, [sp, #-4]!)
   152f8:	add	fp, sp, #0
   152fc:	sub	sp, sp, #20
   15300:	str	r0, [fp, #-16]
   15304:	str	r1, [fp, #-20]	; 0xffffffec
   15308:	ldr	r3, [fp, #-16]
   1530c:	cmp	r3, #0
   15310:	bne	15320 <__assert_fail@plt+0x3f70>
   15314:	movw	r3, #49664	; 0xc200
   15318:	movt	r3, #2
   1531c:	str	r3, [fp, #-16]
   15320:	ldr	r3, [fp, #-16]
   15324:	ldr	r3, [r3, #4]
   15328:	str	r3, [fp, #-8]
   1532c:	ldr	r3, [fp, #-16]
   15330:	ldr	r2, [fp, #-20]	; 0xffffffec
   15334:	str	r2, [r3, #4]
   15338:	ldr	r3, [fp, #-8]
   1533c:	mov	r0, r3
   15340:	add	sp, fp, #0
   15344:	pop	{fp}		; (ldr fp, [sp], #4)
   15348:	bx	lr
   1534c:	str	fp, [sp, #-8]!
   15350:	str	lr, [sp, #4]
   15354:	add	fp, sp, #4
   15358:	sub	sp, sp, #16
   1535c:	str	r0, [fp, #-8]
   15360:	str	r1, [fp, #-12]
   15364:	str	r2, [fp, #-16]
   15368:	ldr	r3, [fp, #-8]
   1536c:	cmp	r3, #0
   15370:	bne	15380 <__assert_fail@plt+0x3fd0>
   15374:	movw	r3, #49664	; 0xc200
   15378:	movt	r3, #2
   1537c:	str	r3, [fp, #-8]
   15380:	ldr	r3, [fp, #-8]
   15384:	mov	r2, #10
   15388:	str	r2, [r3]
   1538c:	ldr	r3, [fp, #-12]
   15390:	cmp	r3, #0
   15394:	beq	153a4 <__assert_fail@plt+0x3ff4>
   15398:	ldr	r3, [fp, #-16]
   1539c:	cmp	r3, #0
   153a0:	bne	153a8 <__assert_fail@plt+0x3ff8>
   153a4:	bl	1138c <abort@plt>
   153a8:	ldr	r3, [fp, #-8]
   153ac:	ldr	r2, [fp, #-12]
   153b0:	str	r2, [r3, #40]	; 0x28
   153b4:	ldr	r3, [fp, #-8]
   153b8:	ldr	r2, [fp, #-16]
   153bc:	str	r2, [r3, #44]	; 0x2c
   153c0:	nop	{0}
   153c4:	sub	sp, fp, #4
   153c8:	ldr	fp, [sp]
   153cc:	add	sp, sp, #4
   153d0:	pop	{pc}		; (ldr pc, [sp], #4)
   153d4:	str	fp, [sp, #-8]!
   153d8:	str	lr, [sp, #4]
   153dc:	add	fp, sp, #4
   153e0:	sub	sp, sp, #56	; 0x38
   153e4:	str	r0, [fp, #-56]	; 0xffffffc8
   153e8:	str	r1, [fp, #-60]	; 0xffffffc4
   153ec:	sub	r1, fp, #52	; 0x34
   153f0:	mov	r2, #0
   153f4:	mov	r3, #0
   153f8:	strd	r2, [r1]
   153fc:	strd	r2, [r1, #8]
   15400:	strd	r2, [r1, #16]
   15404:	strd	r2, [r1, #24]
   15408:	strd	r2, [r1, #32]
   1540c:	strd	r2, [r1, #40]	; 0x28
   15410:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15414:	cmp	r3, #10
   15418:	bne	15420 <__assert_fail@plt+0x4070>
   1541c:	bl	1138c <abort@plt>
   15420:	ldr	r3, [fp, #-60]	; 0xffffffc4
   15424:	str	r3, [fp, #-52]	; 0xffffffcc
   15428:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1542c:	mov	r2, r3
   15430:	sub	r3, fp, #52	; 0x34
   15434:	ldrd	r0, [r3]
   15438:	strd	r0, [r2]
   1543c:	ldrd	r0, [r3, #8]
   15440:	strd	r0, [r2, #8]
   15444:	ldrd	r0, [r3, #16]
   15448:	strd	r0, [r2, #16]
   1544c:	ldrd	r0, [r3, #24]
   15450:	strd	r0, [r2, #24]
   15454:	ldrd	r0, [r3, #32]
   15458:	strd	r0, [r2, #32]
   1545c:	ldrd	r0, [r3, #40]	; 0x28
   15460:	strd	r0, [r2, #40]	; 0x28
   15464:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15468:	sub	sp, fp, #4
   1546c:	ldr	fp, [sp]
   15470:	add	sp, sp, #4
   15474:	pop	{pc}		; (ldr pc, [sp], #4)
   15478:	str	fp, [sp, #-8]!
   1547c:	str	lr, [sp, #4]
   15480:	add	fp, sp, #4
   15484:	sub	sp, sp, #16
   15488:	str	r0, [fp, #-16]
   1548c:	str	r1, [fp, #-20]	; 0xffffffec
   15490:	ldr	r0, [fp, #-16]
   15494:	bl	11284 <gettext@plt>
   15498:	str	r0, [fp, #-8]
   1549c:	ldr	r2, [fp, #-8]
   154a0:	ldr	r3, [fp, #-16]
   154a4:	cmp	r2, r3
   154a8:	beq	154b4 <__assert_fail@plt+0x4104>
   154ac:	ldr	r3, [fp, #-8]
   154b0:	b	15564 <__assert_fail@plt+0x41b4>
   154b4:	bl	199a4 <__assert_fail@plt+0x85f4>
   154b8:	str	r0, [fp, #-12]
   154bc:	movw	r1, #47332	; 0xb8e4
   154c0:	movt	r1, #1
   154c4:	ldr	r0, [fp, #-12]
   154c8:	bl	195f4 <__assert_fail@plt+0x8244>
   154cc:	mov	r3, r0
   154d0:	cmp	r3, #0
   154d4:	bne	15500 <__assert_fail@plt+0x4150>
   154d8:	ldr	r3, [fp, #-16]
   154dc:	ldrb	r3, [r3]
   154e0:	cmp	r3, #96	; 0x60
   154e4:	bne	154f4 <__assert_fail@plt+0x4144>
   154e8:	movw	r3, #47340	; 0xb8ec
   154ec:	movt	r3, #1
   154f0:	b	15564 <__assert_fail@plt+0x41b4>
   154f4:	movw	r3, #47344	; 0xb8f0
   154f8:	movt	r3, #1
   154fc:	b	15564 <__assert_fail@plt+0x41b4>
   15500:	movw	r1, #47348	; 0xb8f4
   15504:	movt	r1, #1
   15508:	ldr	r0, [fp, #-12]
   1550c:	bl	195f4 <__assert_fail@plt+0x8244>
   15510:	mov	r3, r0
   15514:	cmp	r3, #0
   15518:	bne	15544 <__assert_fail@plt+0x4194>
   1551c:	ldr	r3, [fp, #-16]
   15520:	ldrb	r3, [r3]
   15524:	cmp	r3, #96	; 0x60
   15528:	bne	15538 <__assert_fail@plt+0x4188>
   1552c:	movw	r3, #47356	; 0xb8fc
   15530:	movt	r3, #1
   15534:	b	15564 <__assert_fail@plt+0x41b4>
   15538:	movw	r3, #47360	; 0xb900
   1553c:	movt	r3, #1
   15540:	b	15564 <__assert_fail@plt+0x41b4>
   15544:	ldr	r3, [fp, #-20]	; 0xffffffec
   15548:	cmp	r3, #9
   1554c:	bne	1555c <__assert_fail@plt+0x41ac>
   15550:	movw	r3, #47364	; 0xb904
   15554:	movt	r3, #1
   15558:	b	15564 <__assert_fail@plt+0x41b4>
   1555c:	movw	r3, #47368	; 0xb908
   15560:	movt	r3, #1
   15564:	mov	r0, r3
   15568:	sub	sp, fp, #4
   1556c:	ldr	fp, [sp]
   15570:	add	sp, sp, #4
   15574:	pop	{pc}		; (ldr pc, [sp], #4)
   15578:	str	r4, [sp, #-12]!
   1557c:	str	fp, [sp, #4]
   15580:	str	lr, [sp, #8]
   15584:	add	fp, sp, #8
   15588:	sub	sp, sp, #116	; 0x74
   1558c:	str	r0, [fp, #-88]	; 0xffffffa8
   15590:	str	r1, [fp, #-92]	; 0xffffffa4
   15594:	str	r2, [fp, #-96]	; 0xffffffa0
   15598:	str	r3, [fp, #-100]	; 0xffffff9c
   1559c:	mov	r3, #0
   155a0:	str	r3, [fp, #-20]	; 0xffffffec
   155a4:	mov	r3, #0
   155a8:	str	r3, [fp, #-24]	; 0xffffffe8
   155ac:	mov	r3, #0
   155b0:	str	r3, [fp, #-28]	; 0xffffffe4
   155b4:	mov	r3, #0
   155b8:	str	r3, [fp, #-32]	; 0xffffffe0
   155bc:	mov	r3, #0
   155c0:	strb	r3, [fp, #-33]	; 0xffffffdf
   155c4:	bl	111b8 <__ctype_get_mb_cur_max@plt>
   155c8:	mov	r3, r0
   155cc:	cmp	r3, #1
   155d0:	moveq	r3, #1
   155d4:	movne	r3, #0
   155d8:	strb	r3, [fp, #-57]	; 0xffffffc7
   155dc:	ldr	r3, [fp, #8]
   155e0:	and	r3, r3, #2
   155e4:	cmp	r3, #0
   155e8:	movne	r3, #1
   155ec:	moveq	r3, #0
   155f0:	strb	r3, [fp, #-34]	; 0xffffffde
   155f4:	mov	r3, #0
   155f8:	strb	r3, [fp, #-35]	; 0xffffffdd
   155fc:	mov	r3, #0
   15600:	strb	r3, [fp, #-36]	; 0xffffffdc
   15604:	mov	r3, #1
   15608:	strb	r3, [fp, #-37]	; 0xffffffdb
   1560c:	ldr	r3, [fp, #4]
   15610:	cmp	r3, #10
   15614:	ldrls	pc, [pc, r3, lsl #2]
   15618:	b	15830 <__assert_fail@plt+0x4480>
   1561c:	andeq	r5, r1, r4, lsr #16
   15620:	muleq	r1, ip, r7
   15624:	andeq	r5, r1, r0, asr #15
   15628:	muleq	r1, r4, r7
   1562c:	andeq	r5, r1, r4, lsr #15
   15630:	andeq	r5, r1, r8, asr r6
   15634:	andeq	r5, r1, r8, asr #12
   15638:			; <UNDEFINED> instruction: 0x000156bc
   1563c:	ldrdeq	r5, [r1], -r0
   15640:	ldrdeq	r5, [r1], -r0
   15644:	ldrdeq	r5, [r1], -r0
   15648:	mov	r3, #5
   1564c:	str	r3, [fp, #4]
   15650:	mov	r3, #1
   15654:	strb	r3, [fp, #-34]	; 0xffffffde
   15658:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1565c:	eor	r3, r3, #1
   15660:	uxtb	r3, r3
   15664:	cmp	r3, #0
   15668:	beq	1569c <__assert_fail@plt+0x42ec>
   1566c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15670:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15674:	cmp	r2, r3
   15678:	bcs	15690 <__assert_fail@plt+0x42e0>
   1567c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15680:	ldr	r3, [fp, #-20]	; 0xffffffec
   15684:	add	r3, r2, r3
   15688:	mov	r2, #34	; 0x22
   1568c:	strb	r2, [r3]
   15690:	ldr	r3, [fp, #-20]	; 0xffffffec
   15694:	add	r3, r3, #1
   15698:	str	r3, [fp, #-20]	; 0xffffffec
   1569c:	mov	r3, #1
   156a0:	strb	r3, [fp, #-33]	; 0xffffffdf
   156a4:	movw	r3, #47364	; 0xb904
   156a8:	movt	r3, #1
   156ac:	str	r3, [fp, #-28]	; 0xffffffe4
   156b0:	mov	r3, #1
   156b4:	str	r3, [fp, #-32]	; 0xffffffe0
   156b8:	b	15834 <__assert_fail@plt+0x4484>
   156bc:	mov	r3, #1
   156c0:	strb	r3, [fp, #-33]	; 0xffffffdf
   156c4:	mov	r3, #0
   156c8:	strb	r3, [fp, #-34]	; 0xffffffde
   156cc:	b	15834 <__assert_fail@plt+0x4484>
   156d0:	ldr	r3, [fp, #4]
   156d4:	cmp	r3, #10
   156d8:	beq	15704 <__assert_fail@plt+0x4354>
   156dc:	ldr	r1, [fp, #4]
   156e0:	movw	r0, #47372	; 0xb90c
   156e4:	movt	r0, #1
   156e8:	bl	15478 <__assert_fail@plt+0x40c8>
   156ec:	str	r0, [fp, #16]
   156f0:	ldr	r1, [fp, #4]
   156f4:	movw	r0, #47368	; 0xb908
   156f8:	movt	r0, #1
   156fc:	bl	15478 <__assert_fail@plt+0x40c8>
   15700:	str	r0, [fp, #20]
   15704:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15708:	eor	r3, r3, #1
   1570c:	uxtb	r3, r3
   15710:	cmp	r3, #0
   15714:	beq	15774 <__assert_fail@plt+0x43c4>
   15718:	ldr	r3, [fp, #16]
   1571c:	str	r3, [fp, #-28]	; 0xffffffe4
   15720:	b	15764 <__assert_fail@plt+0x43b4>
   15724:	ldr	r2, [fp, #-20]	; 0xffffffec
   15728:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1572c:	cmp	r2, r3
   15730:	bcs	1574c <__assert_fail@plt+0x439c>
   15734:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15738:	ldr	r3, [fp, #-20]	; 0xffffffec
   1573c:	add	r3, r2, r3
   15740:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15744:	ldrb	r2, [r2]
   15748:	strb	r2, [r3]
   1574c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15750:	add	r3, r3, #1
   15754:	str	r3, [fp, #-20]	; 0xffffffec
   15758:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1575c:	add	r3, r3, #1
   15760:	str	r3, [fp, #-28]	; 0xffffffe4
   15764:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15768:	ldrb	r3, [r3]
   1576c:	cmp	r3, #0
   15770:	bne	15724 <__assert_fail@plt+0x4374>
   15774:	mov	r3, #1
   15778:	strb	r3, [fp, #-33]	; 0xffffffdf
   1577c:	ldr	r3, [fp, #20]
   15780:	str	r3, [fp, #-28]	; 0xffffffe4
   15784:	ldr	r0, [fp, #-28]	; 0xffffffe4
   15788:	bl	11290 <strlen@plt>
   1578c:	str	r0, [fp, #-32]	; 0xffffffe0
   15790:	b	15834 <__assert_fail@plt+0x4484>
   15794:	mov	r3, #1
   15798:	strb	r3, [fp, #-33]	; 0xffffffdf
   1579c:	mov	r3, #1
   157a0:	strb	r3, [fp, #-34]	; 0xffffffde
   157a4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   157a8:	eor	r3, r3, #1
   157ac:	uxtb	r3, r3
   157b0:	cmp	r3, #0
   157b4:	beq	157c0 <__assert_fail@plt+0x4410>
   157b8:	mov	r3, #1
   157bc:	strb	r3, [fp, #-33]	; 0xffffffdf
   157c0:	mov	r3, #2
   157c4:	str	r3, [fp, #4]
   157c8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   157cc:	eor	r3, r3, #1
   157d0:	uxtb	r3, r3
   157d4:	cmp	r3, #0
   157d8:	beq	1580c <__assert_fail@plt+0x445c>
   157dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   157e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   157e4:	cmp	r2, r3
   157e8:	bcs	15800 <__assert_fail@plt+0x4450>
   157ec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   157f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   157f4:	add	r3, r2, r3
   157f8:	mov	r2, #39	; 0x27
   157fc:	strb	r2, [r3]
   15800:	ldr	r3, [fp, #-20]	; 0xffffffec
   15804:	add	r3, r3, #1
   15808:	str	r3, [fp, #-20]	; 0xffffffec
   1580c:	movw	r3, #47368	; 0xb908
   15810:	movt	r3, #1
   15814:	str	r3, [fp, #-28]	; 0xffffffe4
   15818:	mov	r3, #1
   1581c:	str	r3, [fp, #-32]	; 0xffffffe0
   15820:	b	15834 <__assert_fail@plt+0x4484>
   15824:	mov	r3, #0
   15828:	strb	r3, [fp, #-34]	; 0xffffffde
   1582c:	b	15834 <__assert_fail@plt+0x4484>
   15830:	bl	1138c <abort@plt>
   15834:	mov	r3, #0
   15838:	str	r3, [fp, #-16]
   1583c:	b	169d8 <__assert_fail@plt+0x5628>
   15840:	mov	r3, #0
   15844:	strb	r3, [fp, #-40]	; 0xffffffd8
   15848:	mov	r3, #0
   1584c:	strb	r3, [fp, #-41]	; 0xffffffd7
   15850:	mov	r3, #0
   15854:	strb	r3, [fp, #-42]	; 0xffffffd6
   15858:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1585c:	cmp	r3, #0
   15860:	beq	158fc <__assert_fail@plt+0x454c>
   15864:	ldr	r3, [fp, #4]
   15868:	cmp	r3, #2
   1586c:	beq	158fc <__assert_fail@plt+0x454c>
   15870:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15874:	cmp	r3, #0
   15878:	beq	158fc <__assert_fail@plt+0x454c>
   1587c:	ldr	r2, [fp, #-16]
   15880:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15884:	add	r4, r2, r3
   15888:	ldr	r3, [fp, #-100]	; 0xffffff9c
   1588c:	cmn	r3, #1
   15890:	bne	158b4 <__assert_fail@plt+0x4504>
   15894:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15898:	cmp	r3, #1
   1589c:	bls	158b4 <__assert_fail@plt+0x4504>
   158a0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   158a4:	bl	11290 <strlen@plt>
   158a8:	str	r0, [fp, #-100]	; 0xffffff9c
   158ac:	ldr	r3, [fp, #-100]	; 0xffffff9c
   158b0:	b	158b8 <__assert_fail@plt+0x4508>
   158b4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   158b8:	cmp	r3, r4
   158bc:	bcc	158fc <__assert_fail@plt+0x454c>
   158c0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   158c4:	ldr	r3, [fp, #-16]
   158c8:	add	r3, r2, r3
   158cc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   158d0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   158d4:	mov	r0, r3
   158d8:	bl	11134 <memcmp@plt>
   158dc:	mov	r3, r0
   158e0:	cmp	r3, #0
   158e4:	bne	158fc <__assert_fail@plt+0x454c>
   158e8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   158ec:	cmp	r3, #0
   158f0:	bne	16b94 <__assert_fail@plt+0x57e4>
   158f4:	mov	r3, #1
   158f8:	strb	r3, [fp, #-40]	; 0xffffffd8
   158fc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15900:	ldr	r3, [fp, #-16]
   15904:	add	r3, r2, r3
   15908:	ldrb	r3, [r3]
   1590c:	strb	r3, [fp, #-38]	; 0xffffffda
   15910:	ldrb	r3, [fp, #-38]	; 0xffffffda
   15914:	cmp	r3, #126	; 0x7e
   15918:	ldrls	pc, [pc, r3, lsl #2]
   1591c:	b	16154 <__assert_fail@plt+0x4da4>
   15920:	andeq	r5, r1, ip, lsl fp
   15924:	andeq	r6, r1, r4, asr r1
   15928:	andeq	r6, r1, r4, asr r1
   1592c:	andeq	r6, r1, r4, asr r1
   15930:	andeq	r6, r1, r4, asr r1
   15934:	andeq	r6, r1, r4, asr r1
   15938:	andeq	r6, r1, r4, asr r1
   1593c:	andeq	r5, r1, r0, lsl pc
   15940:	andeq	r5, r1, ip, lsl pc
   15944:	andeq	r5, r1, ip, asr #30
   15948:	andeq	r5, r1, r4, lsr pc
   1594c:	andeq	r5, r1, r8, asr pc
   15950:	andeq	r5, r1, r8, lsr #30
   15954:	andeq	r5, r1, r0, asr #30
   15958:	andeq	r6, r1, r4, asr r1
   1595c:	andeq	r6, r1, r4, asr r1
   15960:	andeq	r6, r1, r4, asr r1
   15964:	andeq	r6, r1, r4, asr r1
   15968:	andeq	r6, r1, r4, asr r1
   1596c:	andeq	r6, r1, r4, asr r1
   15970:	andeq	r6, r1, r4, asr r1
   15974:	andeq	r6, r1, r4, asr r1
   15978:	andeq	r6, r1, r4, asr r1
   1597c:	andeq	r6, r1, r4, asr r1
   15980:	andeq	r6, r1, r4, asr r1
   15984:	andeq	r6, r1, r4, asr r1
   15988:	andeq	r6, r1, r4, asr r1
   1598c:	andeq	r6, r1, r4, asr r1
   15990:	andeq	r6, r1, r4, asr r1
   15994:	andeq	r6, r1, r4, asr r1
   15998:	andeq	r6, r1, r4, asr r1
   1599c:	andeq	r6, r1, r4, asr r1
   159a0:	andeq	r6, r1, r8, lsr r0
   159a4:	andeq	r6, r1, r0, asr #32
   159a8:	andeq	r6, r1, r0, asr #32
   159ac:	andeq	r6, r1, ip, lsr #32
   159b0:	andeq	r6, r1, r0, asr #32
   159b4:	andeq	r6, r1, r8, asr #2
   159b8:	andeq	r6, r1, r0, asr #32
   159bc:	andeq	r6, r1, ip, asr r0
   159c0:	andeq	r6, r1, r0, asr #32
   159c4:	andeq	r6, r1, r0, asr #32
   159c8:	andeq	r6, r1, r0, asr #32
   159cc:	andeq	r6, r1, r8, asr #2
   159d0:	andeq	r6, r1, r8, asr #2
   159d4:	andeq	r6, r1, r8, asr #2
   159d8:	andeq	r6, r1, r8, asr #2
   159dc:	andeq	r6, r1, r8, asr #2
   159e0:	andeq	r6, r1, r8, asr #2
   159e4:	andeq	r6, r1, r8, asr #2
   159e8:	andeq	r6, r1, r8, asr #2
   159ec:	andeq	r6, r1, r8, asr #2
   159f0:	andeq	r6, r1, r8, asr #2
   159f4:	andeq	r6, r1, r8, asr #2
   159f8:	andeq	r6, r1, r8, asr #2
   159fc:	andeq	r6, r1, r8, asr #2
   15a00:	andeq	r6, r1, r8, asr #2
   15a04:	andeq	r6, r1, r8, asr #2
   15a08:	andeq	r6, r1, r8, asr #2
   15a0c:	andeq	r6, r1, r0, asr #32
   15a10:	andeq	r6, r1, r0, asr #32
   15a14:	andeq	r6, r1, r0, asr #32
   15a18:	andeq	r6, r1, r0, asr #32
   15a1c:	strdeq	r5, [r1], -ip
   15a20:	andeq	r6, r1, r4, asr r1
   15a24:	andeq	r6, r1, r8, asr #2
   15a28:	andeq	r6, r1, r8, asr #2
   15a2c:	andeq	r6, r1, r8, asr #2
   15a30:	andeq	r6, r1, r8, asr #2
   15a34:	andeq	r6, r1, r8, asr #2
   15a38:	andeq	r6, r1, r8, asr #2
   15a3c:	andeq	r6, r1, r8, asr #2
   15a40:	andeq	r6, r1, r8, asr #2
   15a44:	andeq	r6, r1, r8, asr #2
   15a48:	andeq	r6, r1, r8, asr #2
   15a4c:	andeq	r6, r1, r8, asr #2
   15a50:	andeq	r6, r1, r8, asr #2
   15a54:	andeq	r6, r1, r8, asr #2
   15a58:	andeq	r6, r1, r8, asr #2
   15a5c:	andeq	r6, r1, r8, asr #2
   15a60:	andeq	r6, r1, r8, asr #2
   15a64:	andeq	r6, r1, r8, asr #2
   15a68:	andeq	r6, r1, r8, asr #2
   15a6c:	andeq	r6, r1, r8, asr #2
   15a70:	andeq	r6, r1, r8, asr #2
   15a74:	andeq	r6, r1, r8, asr #2
   15a78:	andeq	r6, r1, r8, asr #2
   15a7c:	andeq	r6, r1, r8, asr #2
   15a80:	andeq	r6, r1, r8, asr #2
   15a84:	andeq	r6, r1, r8, asr #2
   15a88:	andeq	r6, r1, r8, asr #2
   15a8c:	andeq	r6, r1, r0, asr #32
   15a90:	andeq	r5, r1, r4, ror #30
   15a94:	andeq	r6, r1, r8, asr #2
   15a98:	andeq	r6, r1, r0, asr #32
   15a9c:	andeq	r6, r1, r8, asr #2
   15aa0:	andeq	r6, r1, r0, asr #32
   15aa4:	andeq	r6, r1, r8, asr #2
   15aa8:	andeq	r6, r1, r8, asr #2
   15aac:	andeq	r6, r1, r8, asr #2
   15ab0:	andeq	r6, r1, r8, asr #2
   15ab4:	andeq	r6, r1, r8, asr #2
   15ab8:	andeq	r6, r1, r8, asr #2
   15abc:	andeq	r6, r1, r8, asr #2
   15ac0:	andeq	r6, r1, r8, asr #2
   15ac4:	andeq	r6, r1, r8, asr #2
   15ac8:	andeq	r6, r1, r8, asr #2
   15acc:	andeq	r6, r1, r8, asr #2
   15ad0:	andeq	r6, r1, r8, asr #2
   15ad4:	andeq	r6, r1, r8, asr #2
   15ad8:	andeq	r6, r1, r8, asr #2
   15adc:	andeq	r6, r1, r8, asr #2
   15ae0:	andeq	r6, r1, r8, asr #2
   15ae4:	andeq	r6, r1, r8, asr #2
   15ae8:	andeq	r6, r1, r8, asr #2
   15aec:	andeq	r6, r1, r8, asr #2
   15af0:	andeq	r6, r1, r8, asr #2
   15af4:	andeq	r6, r1, r8, asr #2
   15af8:	andeq	r6, r1, r8, asr #2
   15afc:	andeq	r6, r1, r8, asr #2
   15b00:	andeq	r6, r1, r8, asr #2
   15b04:	andeq	r6, r1, r8, asr #2
   15b08:	andeq	r6, r1, r8, asr #2
   15b0c:	andeq	r5, r1, r4, ror #31
   15b10:	andeq	r6, r1, r0, asr #32
   15b14:	andeq	r5, r1, r4, ror #31
   15b18:	andeq	r6, r1, ip, lsr #32
   15b1c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   15b20:	cmp	r3, #0
   15b24:	beq	15ce8 <__assert_fail@plt+0x4938>
   15b28:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15b2c:	cmp	r3, #0
   15b30:	bne	16b9c <__assert_fail@plt+0x57ec>
   15b34:	mov	r3, #1
   15b38:	strb	r3, [fp, #-41]	; 0xffffffd7
   15b3c:	ldr	r3, [fp, #4]
   15b40:	cmp	r3, #2
   15b44:	bne	15bf4 <__assert_fail@plt+0x4844>
   15b48:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   15b4c:	eor	r3, r3, #1
   15b50:	uxtb	r3, r3
   15b54:	cmp	r3, #0
   15b58:	beq	15bf4 <__assert_fail@plt+0x4844>
   15b5c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15b60:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15b64:	cmp	r2, r3
   15b68:	bcs	15b80 <__assert_fail@plt+0x47d0>
   15b6c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15b70:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b74:	add	r3, r2, r3
   15b78:	mov	r2, #39	; 0x27
   15b7c:	strb	r2, [r3]
   15b80:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b84:	add	r3, r3, #1
   15b88:	str	r3, [fp, #-20]	; 0xffffffec
   15b8c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15b90:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15b94:	cmp	r2, r3
   15b98:	bcs	15bb0 <__assert_fail@plt+0x4800>
   15b9c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15ba0:	ldr	r3, [fp, #-20]	; 0xffffffec
   15ba4:	add	r3, r2, r3
   15ba8:	mov	r2, #36	; 0x24
   15bac:	strb	r2, [r3]
   15bb0:	ldr	r3, [fp, #-20]	; 0xffffffec
   15bb4:	add	r3, r3, #1
   15bb8:	str	r3, [fp, #-20]	; 0xffffffec
   15bbc:	ldr	r2, [fp, #-20]	; 0xffffffec
   15bc0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15bc4:	cmp	r2, r3
   15bc8:	bcs	15be0 <__assert_fail@plt+0x4830>
   15bcc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15bd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   15bd4:	add	r3, r2, r3
   15bd8:	mov	r2, #39	; 0x27
   15bdc:	strb	r2, [r3]
   15be0:	ldr	r3, [fp, #-20]	; 0xffffffec
   15be4:	add	r3, r3, #1
   15be8:	str	r3, [fp, #-20]	; 0xffffffec
   15bec:	mov	r3, #1
   15bf0:	strb	r3, [fp, #-35]	; 0xffffffdd
   15bf4:	ldr	r2, [fp, #-20]	; 0xffffffec
   15bf8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15bfc:	cmp	r2, r3
   15c00:	bcs	15c18 <__assert_fail@plt+0x4868>
   15c04:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15c08:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c0c:	add	r3, r2, r3
   15c10:	mov	r2, #92	; 0x5c
   15c14:	strb	r2, [r3]
   15c18:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c1c:	add	r3, r3, #1
   15c20:	str	r3, [fp, #-20]	; 0xffffffec
   15c24:	ldr	r3, [fp, #4]
   15c28:	cmp	r3, #2
   15c2c:	beq	15cdc <__assert_fail@plt+0x492c>
   15c30:	ldr	r3, [fp, #-16]
   15c34:	add	r3, r3, #1
   15c38:	ldr	r2, [fp, #-100]	; 0xffffff9c
   15c3c:	cmp	r2, r3
   15c40:	bls	15cdc <__assert_fail@plt+0x492c>
   15c44:	ldr	r3, [fp, #-16]
   15c48:	add	r3, r3, #1
   15c4c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15c50:	add	r3, r2, r3
   15c54:	ldrb	r3, [r3]
   15c58:	cmp	r3, #47	; 0x2f
   15c5c:	bls	15cdc <__assert_fail@plt+0x492c>
   15c60:	ldr	r3, [fp, #-16]
   15c64:	add	r3, r3, #1
   15c68:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15c6c:	add	r3, r2, r3
   15c70:	ldrb	r3, [r3]
   15c74:	cmp	r3, #57	; 0x39
   15c78:	bhi	15cdc <__assert_fail@plt+0x492c>
   15c7c:	ldr	r2, [fp, #-20]	; 0xffffffec
   15c80:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15c84:	cmp	r2, r3
   15c88:	bcs	15ca0 <__assert_fail@plt+0x48f0>
   15c8c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15c90:	ldr	r3, [fp, #-20]	; 0xffffffec
   15c94:	add	r3, r2, r3
   15c98:	mov	r2, #48	; 0x30
   15c9c:	strb	r2, [r3]
   15ca0:	ldr	r3, [fp, #-20]	; 0xffffffec
   15ca4:	add	r3, r3, #1
   15ca8:	str	r3, [fp, #-20]	; 0xffffffec
   15cac:	ldr	r2, [fp, #-20]	; 0xffffffec
   15cb0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15cb4:	cmp	r2, r3
   15cb8:	bcs	15cd0 <__assert_fail@plt+0x4920>
   15cbc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15cc0:	ldr	r3, [fp, #-20]	; 0xffffffec
   15cc4:	add	r3, r2, r3
   15cc8:	mov	r2, #48	; 0x30
   15ccc:	strb	r2, [r3]
   15cd0:	ldr	r3, [fp, #-20]	; 0xffffffec
   15cd4:	add	r3, r3, #1
   15cd8:	str	r3, [fp, #-20]	; 0xffffffec
   15cdc:	mov	r3, #48	; 0x30
   15ce0:	strb	r3, [fp, #-38]	; 0xffffffda
   15ce4:	b	16724 <__assert_fail@plt+0x5374>
   15ce8:	ldr	r3, [fp, #8]
   15cec:	and	r3, r3, #1
   15cf0:	cmp	r3, #0
   15cf4:	beq	16724 <__assert_fail@plt+0x5374>
   15cf8:	b	169cc <__assert_fail@plt+0x561c>
   15cfc:	ldr	r3, [fp, #4]
   15d00:	cmp	r3, #2
   15d04:	beq	15d18 <__assert_fail@plt+0x4968>
   15d08:	ldr	r3, [fp, #4]
   15d0c:	cmp	r3, #5
   15d10:	beq	15d28 <__assert_fail@plt+0x4978>
   15d14:	b	15f0c <__assert_fail@plt+0x4b5c>
   15d18:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15d1c:	cmp	r3, #0
   15d20:	beq	15f00 <__assert_fail@plt+0x4b50>
   15d24:	b	16bd0 <__assert_fail@plt+0x5820>
   15d28:	ldr	r3, [fp, #8]
   15d2c:	and	r3, r3, #4
   15d30:	cmp	r3, #0
   15d34:	beq	15f08 <__assert_fail@plt+0x4b58>
   15d38:	ldr	r3, [fp, #-16]
   15d3c:	add	r3, r3, #2
   15d40:	ldr	r2, [fp, #-100]	; 0xffffff9c
   15d44:	cmp	r2, r3
   15d48:	bls	15f08 <__assert_fail@plt+0x4b58>
   15d4c:	ldr	r3, [fp, #-16]
   15d50:	add	r3, r3, #1
   15d54:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15d58:	add	r3, r2, r3
   15d5c:	ldrb	r3, [r3]
   15d60:	cmp	r3, #63	; 0x3f
   15d64:	bne	15f08 <__assert_fail@plt+0x4b58>
   15d68:	ldr	r3, [fp, #-16]
   15d6c:	add	r3, r3, #2
   15d70:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15d74:	add	r3, r2, r3
   15d78:	ldrb	r3, [r3]
   15d7c:	sub	r3, r3, #33	; 0x21
   15d80:	cmp	r3, #29
   15d84:	ldrls	pc, [pc, r3, lsl #2]
   15d88:	b	15ef8 <__assert_fail@plt+0x4b48>
   15d8c:	andeq	r5, r1, r4, lsl #28
   15d90:	strdeq	r5, [r1], -r8
   15d94:	strdeq	r5, [r1], -r8
   15d98:	strdeq	r5, [r1], -r8
   15d9c:	strdeq	r5, [r1], -r8
   15da0:	strdeq	r5, [r1], -r8
   15da4:	andeq	r5, r1, r4, lsl #28
   15da8:	andeq	r5, r1, r4, lsl #28
   15dac:	andeq	r5, r1, r4, lsl #28
   15db0:	strdeq	r5, [r1], -r8
   15db4:	strdeq	r5, [r1], -r8
   15db8:	strdeq	r5, [r1], -r8
   15dbc:	andeq	r5, r1, r4, lsl #28
   15dc0:	strdeq	r5, [r1], -r8
   15dc4:	andeq	r5, r1, r4, lsl #28
   15dc8:	strdeq	r5, [r1], -r8
   15dcc:	strdeq	r5, [r1], -r8
   15dd0:	strdeq	r5, [r1], -r8
   15dd4:	strdeq	r5, [r1], -r8
   15dd8:	strdeq	r5, [r1], -r8
   15ddc:	strdeq	r5, [r1], -r8
   15de0:	strdeq	r5, [r1], -r8
   15de4:	strdeq	r5, [r1], -r8
   15de8:	strdeq	r5, [r1], -r8
   15dec:	strdeq	r5, [r1], -r8
   15df0:	strdeq	r5, [r1], -r8
   15df4:	strdeq	r5, [r1], -r8
   15df8:	andeq	r5, r1, r4, lsl #28
   15dfc:	andeq	r5, r1, r4, lsl #28
   15e00:	andeq	r5, r1, r4, lsl #28
   15e04:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15e08:	cmp	r3, #0
   15e0c:	bne	16ba4 <__assert_fail@plt+0x57f4>
   15e10:	ldr	r3, [fp, #-16]
   15e14:	add	r3, r3, #2
   15e18:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15e1c:	add	r3, r2, r3
   15e20:	ldrb	r3, [r3]
   15e24:	strb	r3, [fp, #-38]	; 0xffffffda
   15e28:	ldr	r3, [fp, #-16]
   15e2c:	add	r3, r3, #2
   15e30:	str	r3, [fp, #-16]
   15e34:	ldr	r2, [fp, #-20]	; 0xffffffec
   15e38:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15e3c:	cmp	r2, r3
   15e40:	bcs	15e58 <__assert_fail@plt+0x4aa8>
   15e44:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15e48:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e4c:	add	r3, r2, r3
   15e50:	mov	r2, #63	; 0x3f
   15e54:	strb	r2, [r3]
   15e58:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e5c:	add	r3, r3, #1
   15e60:	str	r3, [fp, #-20]	; 0xffffffec
   15e64:	ldr	r2, [fp, #-20]	; 0xffffffec
   15e68:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15e6c:	cmp	r2, r3
   15e70:	bcs	15e88 <__assert_fail@plt+0x4ad8>
   15e74:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15e78:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e7c:	add	r3, r2, r3
   15e80:	mov	r2, #34	; 0x22
   15e84:	strb	r2, [r3]
   15e88:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e8c:	add	r3, r3, #1
   15e90:	str	r3, [fp, #-20]	; 0xffffffec
   15e94:	ldr	r2, [fp, #-20]	; 0xffffffec
   15e98:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15e9c:	cmp	r2, r3
   15ea0:	bcs	15eb8 <__assert_fail@plt+0x4b08>
   15ea4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15ea8:	ldr	r3, [fp, #-20]	; 0xffffffec
   15eac:	add	r3, r2, r3
   15eb0:	mov	r2, #34	; 0x22
   15eb4:	strb	r2, [r3]
   15eb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   15ebc:	add	r3, r3, #1
   15ec0:	str	r3, [fp, #-20]	; 0xffffffec
   15ec4:	ldr	r2, [fp, #-20]	; 0xffffffec
   15ec8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15ecc:	cmp	r2, r3
   15ed0:	bcs	15ee8 <__assert_fail@plt+0x4b38>
   15ed4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15ed8:	ldr	r3, [fp, #-20]	; 0xffffffec
   15edc:	add	r3, r2, r3
   15ee0:	mov	r2, #63	; 0x3f
   15ee4:	strb	r2, [r3]
   15ee8:	ldr	r3, [fp, #-20]	; 0xffffffec
   15eec:	add	r3, r3, #1
   15ef0:	str	r3, [fp, #-20]	; 0xffffffec
   15ef4:	b	15efc <__assert_fail@plt+0x4b4c>
   15ef8:	nop	{0}
   15efc:	b	15f08 <__assert_fail@plt+0x4b58>
   15f00:	nop	{0}
   15f04:	b	16758 <__assert_fail@plt+0x53a8>
   15f08:	nop	{0}
   15f0c:	b	16758 <__assert_fail@plt+0x53a8>
   15f10:	mov	r3, #97	; 0x61
   15f14:	strb	r3, [fp, #-39]	; 0xffffffd9
   15f18:	b	15fcc <__assert_fail@plt+0x4c1c>
   15f1c:	mov	r3, #98	; 0x62
   15f20:	strb	r3, [fp, #-39]	; 0xffffffd9
   15f24:	b	15fcc <__assert_fail@plt+0x4c1c>
   15f28:	mov	r3, #102	; 0x66
   15f2c:	strb	r3, [fp, #-39]	; 0xffffffd9
   15f30:	b	15fcc <__assert_fail@plt+0x4c1c>
   15f34:	mov	r3, #110	; 0x6e
   15f38:	strb	r3, [fp, #-39]	; 0xffffffd9
   15f3c:	b	15fb0 <__assert_fail@plt+0x4c00>
   15f40:	mov	r3, #114	; 0x72
   15f44:	strb	r3, [fp, #-39]	; 0xffffffd9
   15f48:	b	15fb0 <__assert_fail@plt+0x4c00>
   15f4c:	mov	r3, #116	; 0x74
   15f50:	strb	r3, [fp, #-39]	; 0xffffffd9
   15f54:	b	15fb0 <__assert_fail@plt+0x4c00>
   15f58:	mov	r3, #118	; 0x76
   15f5c:	strb	r3, [fp, #-39]	; 0xffffffd9
   15f60:	b	15fcc <__assert_fail@plt+0x4c1c>
   15f64:	ldrb	r3, [fp, #-38]	; 0xffffffda
   15f68:	strb	r3, [fp, #-39]	; 0xffffffd9
   15f6c:	ldr	r3, [fp, #4]
   15f70:	cmp	r3, #2
   15f74:	bne	15f88 <__assert_fail@plt+0x4bd8>
   15f78:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15f7c:	cmp	r3, #0
   15f80:	beq	168e4 <__assert_fail@plt+0x5534>
   15f84:	b	16bd0 <__assert_fail@plt+0x5820>
   15f88:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   15f8c:	cmp	r3, #0
   15f90:	beq	15fac <__assert_fail@plt+0x4bfc>
   15f94:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15f98:	cmp	r3, #0
   15f9c:	beq	15fac <__assert_fail@plt+0x4bfc>
   15fa0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15fa4:	cmp	r3, #0
   15fa8:	bne	168ec <__assert_fail@plt+0x553c>
   15fac:	nop	{0}
   15fb0:	ldr	r3, [fp, #4]
   15fb4:	cmp	r3, #2
   15fb8:	bne	15fc8 <__assert_fail@plt+0x4c18>
   15fbc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   15fc0:	cmp	r3, #0
   15fc4:	bne	16bac <__assert_fail@plt+0x57fc>
   15fc8:	nop	{0}
   15fcc:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   15fd0:	cmp	r3, #0
   15fd4:	beq	1672c <__assert_fail@plt+0x537c>
   15fd8:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   15fdc:	strb	r3, [fp, #-38]	; 0xffffffda
   15fe0:	b	167e4 <__assert_fail@plt+0x5434>
   15fe4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   15fe8:	cmn	r3, #1
   15fec:	bne	16010 <__assert_fail@plt+0x4c60>
   15ff0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15ff4:	add	r3, r3, #1
   15ff8:	ldrb	r3, [r3]
   15ffc:	cmp	r3, #0
   16000:	movne	r3, #1
   16004:	moveq	r3, #0
   16008:	uxtb	r3, r3
   1600c:	b	16024 <__assert_fail@plt+0x4c74>
   16010:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16014:	cmp	r3, #1
   16018:	movne	r3, #1
   1601c:	moveq	r3, #0
   16020:	uxtb	r3, r3
   16024:	cmp	r3, #0
   16028:	bne	16734 <__assert_fail@plt+0x5384>
   1602c:	ldr	r3, [fp, #-16]
   16030:	cmp	r3, #0
   16034:	bne	1673c <__assert_fail@plt+0x538c>
   16038:	mov	r3, #1
   1603c:	strb	r3, [fp, #-42]	; 0xffffffd6
   16040:	ldr	r3, [fp, #4]
   16044:	cmp	r3, #2
   16048:	bne	16744 <__assert_fail@plt+0x5394>
   1604c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   16050:	cmp	r3, #0
   16054:	beq	16744 <__assert_fail@plt+0x5394>
   16058:	b	16bd0 <__assert_fail@plt+0x5820>
   1605c:	mov	r3, #1
   16060:	strb	r3, [fp, #-36]	; 0xffffffdc
   16064:	mov	r3, #1
   16068:	strb	r3, [fp, #-42]	; 0xffffffd6
   1606c:	ldr	r3, [fp, #4]
   16070:	cmp	r3, #2
   16074:	bne	1674c <__assert_fail@plt+0x539c>
   16078:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1607c:	cmp	r3, #0
   16080:	bne	16bb4 <__assert_fail@plt+0x5804>
   16084:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16088:	cmp	r3, #0
   1608c:	beq	160ac <__assert_fail@plt+0x4cfc>
   16090:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16094:	cmp	r3, #0
   16098:	bne	160ac <__assert_fail@plt+0x4cfc>
   1609c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   160a0:	str	r3, [fp, #-24]	; 0xffffffe8
   160a4:	mov	r3, #0
   160a8:	str	r3, [fp, #-92]	; 0xffffffa4
   160ac:	ldr	r2, [fp, #-20]	; 0xffffffec
   160b0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   160b4:	cmp	r2, r3
   160b8:	bcs	160d0 <__assert_fail@plt+0x4d20>
   160bc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   160c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   160c4:	add	r3, r2, r3
   160c8:	mov	r2, #39	; 0x27
   160cc:	strb	r2, [r3]
   160d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   160d4:	add	r3, r3, #1
   160d8:	str	r3, [fp, #-20]	; 0xffffffec
   160dc:	ldr	r2, [fp, #-20]	; 0xffffffec
   160e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   160e4:	cmp	r2, r3
   160e8:	bcs	16100 <__assert_fail@plt+0x4d50>
   160ec:	ldr	r2, [fp, #-88]	; 0xffffffa8
   160f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   160f4:	add	r3, r2, r3
   160f8:	mov	r2, #92	; 0x5c
   160fc:	strb	r2, [r3]
   16100:	ldr	r3, [fp, #-20]	; 0xffffffec
   16104:	add	r3, r3, #1
   16108:	str	r3, [fp, #-20]	; 0xffffffec
   1610c:	ldr	r2, [fp, #-20]	; 0xffffffec
   16110:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16114:	cmp	r2, r3
   16118:	bcs	16130 <__assert_fail@plt+0x4d80>
   1611c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16120:	ldr	r3, [fp, #-20]	; 0xffffffec
   16124:	add	r3, r2, r3
   16128:	mov	r2, #39	; 0x27
   1612c:	strb	r2, [r3]
   16130:	ldr	r3, [fp, #-20]	; 0xffffffec
   16134:	add	r3, r3, #1
   16138:	str	r3, [fp, #-20]	; 0xffffffec
   1613c:	mov	r3, #0
   16140:	strb	r3, [fp, #-35]	; 0xffffffdd
   16144:	b	1674c <__assert_fail@plt+0x539c>
   16148:	mov	r3, #1
   1614c:	strb	r3, [fp, #-42]	; 0xffffffd6
   16150:	b	16758 <__assert_fail@plt+0x53a8>
   16154:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   16158:	cmp	r3, #0
   1615c:	beq	1619c <__assert_fail@plt+0x4dec>
   16160:	mov	r3, #1
   16164:	str	r3, [fp, #-48]	; 0xffffffd0
   16168:	bl	11254 <__ctype_b_loc@plt>
   1616c:	mov	r3, r0
   16170:	ldr	r2, [r3]
   16174:	ldrb	r3, [fp, #-38]	; 0xffffffda
   16178:	lsl	r3, r3, #1
   1617c:	add	r3, r2, r3
   16180:	ldrh	r3, [r3]
   16184:	and	r3, r3, #16384	; 0x4000
   16188:	cmp	r3, #0
   1618c:	movne	r3, #1
   16190:	moveq	r3, #0
   16194:	strb	r3, [fp, #-49]	; 0xffffffcf
   16198:	b	163e8 <__assert_fail@plt+0x5038>
   1619c:	sub	r3, fp, #76	; 0x4c
   161a0:	mov	r2, #8
   161a4:	mov	r1, #0
   161a8:	mov	r0, r3
   161ac:	bl	112e4 <memset@plt>
   161b0:	mov	r3, #0
   161b4:	str	r3, [fp, #-48]	; 0xffffffd0
   161b8:	mov	r3, #1
   161bc:	strb	r3, [fp, #-49]	; 0xffffffcf
   161c0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   161c4:	cmn	r3, #1
   161c8:	bne	161d8 <__assert_fail@plt+0x4e28>
   161cc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   161d0:	bl	11290 <strlen@plt>
   161d4:	str	r0, [fp, #-100]	; 0xffffff9c
   161d8:	ldr	r2, [fp, #-16]
   161dc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   161e0:	add	r3, r2, r3
   161e4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   161e8:	add	r1, r2, r3
   161ec:	ldr	r2, [fp, #-16]
   161f0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   161f4:	add	r3, r2, r3
   161f8:	ldr	r2, [fp, #-100]	; 0xffffff9c
   161fc:	sub	r2, r2, r3
   16200:	sub	r3, fp, #76	; 0x4c
   16204:	sub	r0, fp, #80	; 0x50
   16208:	bl	14db0 <__assert_fail@plt+0x3a00>
   1620c:	str	r0, [fp, #-64]	; 0xffffffc0
   16210:	ldr	r3, [fp, #-64]	; 0xffffffc0
   16214:	cmp	r3, #0
   16218:	beq	163dc <__assert_fail@plt+0x502c>
   1621c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   16220:	cmn	r3, #1
   16224:	bne	16234 <__assert_fail@plt+0x4e84>
   16228:	mov	r3, #0
   1622c:	strb	r3, [fp, #-49]	; 0xffffffcf
   16230:	b	163e8 <__assert_fail@plt+0x5038>
   16234:	ldr	r3, [fp, #-64]	; 0xffffffc0
   16238:	cmn	r3, #2
   1623c:	bne	16294 <__assert_fail@plt+0x4ee4>
   16240:	mov	r3, #0
   16244:	strb	r3, [fp, #-49]	; 0xffffffcf
   16248:	b	16258 <__assert_fail@plt+0x4ea8>
   1624c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16250:	add	r3, r3, #1
   16254:	str	r3, [fp, #-48]	; 0xffffffd0
   16258:	ldr	r2, [fp, #-16]
   1625c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16260:	add	r3, r2, r3
   16264:	ldr	r2, [fp, #-100]	; 0xffffff9c
   16268:	cmp	r2, r3
   1626c:	bls	163e4 <__assert_fail@plt+0x5034>
   16270:	ldr	r2, [fp, #-16]
   16274:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16278:	add	r3, r2, r3
   1627c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   16280:	add	r3, r2, r3
   16284:	ldrb	r3, [r3]
   16288:	cmp	r3, #0
   1628c:	bne	1624c <__assert_fail@plt+0x4e9c>
   16290:	b	163e4 <__assert_fail@plt+0x5034>
   16294:	ldrb	r3, [fp, #-34]	; 0xffffffde
   16298:	cmp	r3, #0
   1629c:	beq	16390 <__assert_fail@plt+0x4fe0>
   162a0:	ldr	r3, [fp, #4]
   162a4:	cmp	r3, #2
   162a8:	bne	16390 <__assert_fail@plt+0x4fe0>
   162ac:	mov	r3, #1
   162b0:	str	r3, [fp, #-56]	; 0xffffffc8
   162b4:	b	16380 <__assert_fail@plt+0x4fd0>
   162b8:	ldr	r2, [fp, #-16]
   162bc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   162c0:	add	r2, r2, r3
   162c4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   162c8:	add	r3, r2, r3
   162cc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   162d0:	add	r3, r2, r3
   162d4:	ldrb	r3, [r3]
   162d8:	sub	r3, r3, #91	; 0x5b
   162dc:	cmp	r3, #33	; 0x21
   162e0:	ldrls	pc, [pc, r3, lsl #2]
   162e4:	b	16370 <__assert_fail@plt+0x4fc0>
   162e8:	ldrdeq	r6, [r1], -r0
   162ec:	ldrdeq	r6, [r1], -r0
   162f0:	andeq	r6, r1, r0, ror r3
   162f4:	ldrdeq	r6, [r1], -r0
   162f8:	andeq	r6, r1, r0, ror r3
   162fc:	ldrdeq	r6, [r1], -r0
   16300:	andeq	r6, r1, r0, ror r3
   16304:	andeq	r6, r1, r0, ror r3
   16308:	andeq	r6, r1, r0, ror r3
   1630c:	andeq	r6, r1, r0, ror r3
   16310:	andeq	r6, r1, r0, ror r3
   16314:	andeq	r6, r1, r0, ror r3
   16318:	andeq	r6, r1, r0, ror r3
   1631c:	andeq	r6, r1, r0, ror r3
   16320:	andeq	r6, r1, r0, ror r3
   16324:	andeq	r6, r1, r0, ror r3
   16328:	andeq	r6, r1, r0, ror r3
   1632c:	andeq	r6, r1, r0, ror r3
   16330:	andeq	r6, r1, r0, ror r3
   16334:	andeq	r6, r1, r0, ror r3
   16338:	andeq	r6, r1, r0, ror r3
   1633c:	andeq	r6, r1, r0, ror r3
   16340:	andeq	r6, r1, r0, ror r3
   16344:	andeq	r6, r1, r0, ror r3
   16348:	andeq	r6, r1, r0, ror r3
   1634c:	andeq	r6, r1, r0, ror r3
   16350:	andeq	r6, r1, r0, ror r3
   16354:	andeq	r6, r1, r0, ror r3
   16358:	andeq	r6, r1, r0, ror r3
   1635c:	andeq	r6, r1, r0, ror r3
   16360:	andeq	r6, r1, r0, ror r3
   16364:	andeq	r6, r1, r0, ror r3
   16368:	andeq	r6, r1, r0, ror r3
   1636c:	ldrdeq	r6, [r1], -r0
   16370:	nop	{0}
   16374:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16378:	add	r3, r3, #1
   1637c:	str	r3, [fp, #-56]	; 0xffffffc8
   16380:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16384:	ldr	r3, [fp, #-64]	; 0xffffffc0
   16388:	cmp	r2, r3
   1638c:	bcc	162b8 <__assert_fail@plt+0x4f08>
   16390:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16394:	mov	r0, r3
   16398:	bl	11188 <iswprint@plt>
   1639c:	mov	r3, r0
   163a0:	cmp	r3, #0
   163a4:	bne	163b0 <__assert_fail@plt+0x5000>
   163a8:	mov	r3, #0
   163ac:	strb	r3, [fp, #-49]	; 0xffffffcf
   163b0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   163b4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   163b8:	add	r3, r2, r3
   163bc:	str	r3, [fp, #-48]	; 0xffffffd0
   163c0:	sub	r3, fp, #76	; 0x4c
   163c4:	mov	r0, r3
   163c8:	bl	11128 <mbsinit@plt>
   163cc:	mov	r3, r0
   163d0:	cmp	r3, #0
   163d4:	beq	161d8 <__assert_fail@plt+0x4e28>
   163d8:	b	163e8 <__assert_fail@plt+0x5038>
   163dc:	nop	{0}
   163e0:	b	163e8 <__assert_fail@plt+0x5038>
   163e4:	nop	{0}
   163e8:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   163ec:	strb	r3, [fp, #-42]	; 0xffffffd6
   163f0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   163f4:	cmp	r3, #1
   163f8:	bhi	1641c <__assert_fail@plt+0x506c>
   163fc:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   16400:	cmp	r3, #0
   16404:	beq	16754 <__assert_fail@plt+0x53a4>
   16408:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   1640c:	eor	r3, r3, #1
   16410:	uxtb	r3, r3
   16414:	cmp	r3, #0
   16418:	beq	16754 <__assert_fail@plt+0x53a4>
   1641c:	ldr	r2, [fp, #-16]
   16420:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16424:	add	r3, r2, r3
   16428:	str	r3, [fp, #-68]	; 0xffffffbc
   1642c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   16430:	cmp	r3, #0
   16434:	beq	165e8 <__assert_fail@plt+0x5238>
   16438:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   1643c:	eor	r3, r3, #1
   16440:	uxtb	r3, r3
   16444:	cmp	r3, #0
   16448:	beq	165e8 <__assert_fail@plt+0x5238>
   1644c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   16450:	cmp	r3, #0
   16454:	bne	16bbc <__assert_fail@plt+0x580c>
   16458:	mov	r3, #1
   1645c:	strb	r3, [fp, #-41]	; 0xffffffd7
   16460:	ldr	r3, [fp, #4]
   16464:	cmp	r3, #2
   16468:	bne	16518 <__assert_fail@plt+0x5168>
   1646c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   16470:	eor	r3, r3, #1
   16474:	uxtb	r3, r3
   16478:	cmp	r3, #0
   1647c:	beq	16518 <__assert_fail@plt+0x5168>
   16480:	ldr	r2, [fp, #-20]	; 0xffffffec
   16484:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16488:	cmp	r2, r3
   1648c:	bcs	164a4 <__assert_fail@plt+0x50f4>
   16490:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16494:	ldr	r3, [fp, #-20]	; 0xffffffec
   16498:	add	r3, r2, r3
   1649c:	mov	r2, #39	; 0x27
   164a0:	strb	r2, [r3]
   164a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   164a8:	add	r3, r3, #1
   164ac:	str	r3, [fp, #-20]	; 0xffffffec
   164b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   164b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   164b8:	cmp	r2, r3
   164bc:	bcs	164d4 <__assert_fail@plt+0x5124>
   164c0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   164c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   164c8:	add	r3, r2, r3
   164cc:	mov	r2, #36	; 0x24
   164d0:	strb	r2, [r3]
   164d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   164d8:	add	r3, r3, #1
   164dc:	str	r3, [fp, #-20]	; 0xffffffec
   164e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   164e4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   164e8:	cmp	r2, r3
   164ec:	bcs	16504 <__assert_fail@plt+0x5154>
   164f0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   164f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   164f8:	add	r3, r2, r3
   164fc:	mov	r2, #39	; 0x27
   16500:	strb	r2, [r3]
   16504:	ldr	r3, [fp, #-20]	; 0xffffffec
   16508:	add	r3, r3, #1
   1650c:	str	r3, [fp, #-20]	; 0xffffffec
   16510:	mov	r3, #1
   16514:	strb	r3, [fp, #-35]	; 0xffffffdd
   16518:	ldr	r2, [fp, #-20]	; 0xffffffec
   1651c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16520:	cmp	r2, r3
   16524:	bcs	1653c <__assert_fail@plt+0x518c>
   16528:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1652c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16530:	add	r3, r2, r3
   16534:	mov	r2, #92	; 0x5c
   16538:	strb	r2, [r3]
   1653c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16540:	add	r3, r3, #1
   16544:	str	r3, [fp, #-20]	; 0xffffffec
   16548:	ldr	r2, [fp, #-20]	; 0xffffffec
   1654c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16550:	cmp	r2, r3
   16554:	bcs	1657c <__assert_fail@plt+0x51cc>
   16558:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1655c:	lsr	r3, r3, #6
   16560:	uxtb	r2, r3
   16564:	ldr	r1, [fp, #-88]	; 0xffffffa8
   16568:	ldr	r3, [fp, #-20]	; 0xffffffec
   1656c:	add	r3, r1, r3
   16570:	add	r2, r2, #48	; 0x30
   16574:	uxtb	r2, r2
   16578:	strb	r2, [r3]
   1657c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16580:	add	r3, r3, #1
   16584:	str	r3, [fp, #-20]	; 0xffffffec
   16588:	ldr	r2, [fp, #-20]	; 0xffffffec
   1658c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16590:	cmp	r2, r3
   16594:	bcs	165c4 <__assert_fail@plt+0x5214>
   16598:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1659c:	lsr	r3, r3, #3
   165a0:	uxtb	r3, r3
   165a4:	and	r3, r3, #7
   165a8:	uxtb	r2, r3
   165ac:	ldr	r1, [fp, #-88]	; 0xffffffa8
   165b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   165b4:	add	r3, r1, r3
   165b8:	add	r2, r2, #48	; 0x30
   165bc:	uxtb	r2, r2
   165c0:	strb	r2, [r3]
   165c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   165c8:	add	r3, r3, #1
   165cc:	str	r3, [fp, #-20]	; 0xffffffec
   165d0:	ldrb	r3, [fp, #-38]	; 0xffffffda
   165d4:	and	r3, r3, #7
   165d8:	uxtb	r3, r3
   165dc:	add	r3, r3, #48	; 0x30
   165e0:	strb	r3, [fp, #-38]	; 0xffffffda
   165e4:	b	1662c <__assert_fail@plt+0x527c>
   165e8:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   165ec:	cmp	r3, #0
   165f0:	beq	1662c <__assert_fail@plt+0x527c>
   165f4:	ldr	r2, [fp, #-20]	; 0xffffffec
   165f8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   165fc:	cmp	r2, r3
   16600:	bcs	16618 <__assert_fail@plt+0x5268>
   16604:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16608:	ldr	r3, [fp, #-20]	; 0xffffffec
   1660c:	add	r3, r2, r3
   16610:	mov	r2, #92	; 0x5c
   16614:	strb	r2, [r3]
   16618:	ldr	r3, [fp, #-20]	; 0xffffffec
   1661c:	add	r3, r3, #1
   16620:	str	r3, [fp, #-20]	; 0xffffffec
   16624:	mov	r3, #0
   16628:	strb	r3, [fp, #-40]	; 0xffffffd8
   1662c:	ldr	r3, [fp, #-16]
   16630:	add	r3, r3, #1
   16634:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16638:	cmp	r2, r3
   1663c:	bls	1671c <__assert_fail@plt+0x536c>
   16640:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   16644:	cmp	r3, #0
   16648:	beq	166c8 <__assert_fail@plt+0x5318>
   1664c:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   16650:	eor	r3, r3, #1
   16654:	uxtb	r3, r3
   16658:	cmp	r3, #0
   1665c:	beq	166c8 <__assert_fail@plt+0x5318>
   16660:	ldr	r2, [fp, #-20]	; 0xffffffec
   16664:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16668:	cmp	r2, r3
   1666c:	bcs	16684 <__assert_fail@plt+0x52d4>
   16670:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16674:	ldr	r3, [fp, #-20]	; 0xffffffec
   16678:	add	r3, r2, r3
   1667c:	mov	r2, #39	; 0x27
   16680:	strb	r2, [r3]
   16684:	ldr	r3, [fp, #-20]	; 0xffffffec
   16688:	add	r3, r3, #1
   1668c:	str	r3, [fp, #-20]	; 0xffffffec
   16690:	ldr	r2, [fp, #-20]	; 0xffffffec
   16694:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16698:	cmp	r2, r3
   1669c:	bcs	166b4 <__assert_fail@plt+0x5304>
   166a0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   166a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   166a8:	add	r3, r2, r3
   166ac:	mov	r2, #39	; 0x27
   166b0:	strb	r2, [r3]
   166b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   166b8:	add	r3, r3, #1
   166bc:	str	r3, [fp, #-20]	; 0xffffffec
   166c0:	mov	r3, #0
   166c4:	strb	r3, [fp, #-35]	; 0xffffffdd
   166c8:	ldr	r2, [fp, #-20]	; 0xffffffec
   166cc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   166d0:	cmp	r2, r3
   166d4:	bcs	166ec <__assert_fail@plt+0x533c>
   166d8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   166dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   166e0:	add	r3, r2, r3
   166e4:	ldrb	r2, [fp, #-38]	; 0xffffffda
   166e8:	strb	r2, [r3]
   166ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   166f0:	add	r3, r3, #1
   166f4:	str	r3, [fp, #-20]	; 0xffffffec
   166f8:	ldr	r3, [fp, #-16]
   166fc:	add	r3, r3, #1
   16700:	str	r3, [fp, #-16]
   16704:	ldr	r2, [fp, #-96]	; 0xffffffa0
   16708:	ldr	r3, [fp, #-16]
   1670c:	add	r3, r2, r3
   16710:	ldrb	r3, [r3]
   16714:	strb	r3, [fp, #-38]	; 0xffffffda
   16718:	b	1642c <__assert_fail@plt+0x507c>
   1671c:	nop	{0}
   16720:	b	168f8 <__assert_fail@plt+0x5548>
   16724:	nop	{0}
   16728:	b	16758 <__assert_fail@plt+0x53a8>
   1672c:	nop	{0}
   16730:	b	16758 <__assert_fail@plt+0x53a8>
   16734:	nop	{0}
   16738:	b	16758 <__assert_fail@plt+0x53a8>
   1673c:	nop	{0}
   16740:	b	16758 <__assert_fail@plt+0x53a8>
   16744:	nop	{0}
   16748:	b	16758 <__assert_fail@plt+0x53a8>
   1674c:	nop	{0}
   16750:	b	16758 <__assert_fail@plt+0x53a8>
   16754:	nop	{0}
   16758:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   1675c:	eor	r3, r3, #1
   16760:	uxtb	r3, r3
   16764:	cmp	r3, #0
   16768:	bne	16778 <__assert_fail@plt+0x53c8>
   1676c:	ldr	r3, [fp, #4]
   16770:	cmp	r3, #2
   16774:	bne	1678c <__assert_fail@plt+0x53dc>
   16778:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1677c:	eor	r3, r3, #1
   16780:	uxtb	r3, r3
   16784:	cmp	r3, #0
   16788:	bne	167cc <__assert_fail@plt+0x541c>
   1678c:	ldr	r3, [fp, #12]
   16790:	cmp	r3, #0
   16794:	beq	167cc <__assert_fail@plt+0x541c>
   16798:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1679c:	lsr	r3, r3, #5
   167a0:	uxtb	r3, r3
   167a4:	lsl	r3, r3, #2
   167a8:	ldr	r2, [fp, #12]
   167ac:	add	r3, r2, r3
   167b0:	ldr	r2, [r3]
   167b4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   167b8:	and	r3, r3, #31
   167bc:	lsr	r3, r2, r3
   167c0:	and	r3, r3, #1
   167c4:	cmp	r3, #0
   167c8:	bne	167e0 <__assert_fail@plt+0x5430>
   167cc:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   167d0:	eor	r3, r3, #1
   167d4:	uxtb	r3, r3
   167d8:	cmp	r3, #0
   167dc:	bne	168f4 <__assert_fail@plt+0x5544>
   167e0:	nop	{0}
   167e4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   167e8:	cmp	r3, #0
   167ec:	bne	16bc4 <__assert_fail@plt+0x5814>
   167f0:	mov	r3, #1
   167f4:	strb	r3, [fp, #-41]	; 0xffffffd7
   167f8:	ldr	r3, [fp, #4]
   167fc:	cmp	r3, #2
   16800:	bne	168b0 <__assert_fail@plt+0x5500>
   16804:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   16808:	eor	r3, r3, #1
   1680c:	uxtb	r3, r3
   16810:	cmp	r3, #0
   16814:	beq	168b0 <__assert_fail@plt+0x5500>
   16818:	ldr	r2, [fp, #-20]	; 0xffffffec
   1681c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16820:	cmp	r2, r3
   16824:	bcs	1683c <__assert_fail@plt+0x548c>
   16828:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1682c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16830:	add	r3, r2, r3
   16834:	mov	r2, #39	; 0x27
   16838:	strb	r2, [r3]
   1683c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16840:	add	r3, r3, #1
   16844:	str	r3, [fp, #-20]	; 0xffffffec
   16848:	ldr	r2, [fp, #-20]	; 0xffffffec
   1684c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16850:	cmp	r2, r3
   16854:	bcs	1686c <__assert_fail@plt+0x54bc>
   16858:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1685c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16860:	add	r3, r2, r3
   16864:	mov	r2, #36	; 0x24
   16868:	strb	r2, [r3]
   1686c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16870:	add	r3, r3, #1
   16874:	str	r3, [fp, #-20]	; 0xffffffec
   16878:	ldr	r2, [fp, #-20]	; 0xffffffec
   1687c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16880:	cmp	r2, r3
   16884:	bcs	1689c <__assert_fail@plt+0x54ec>
   16888:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1688c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16890:	add	r3, r2, r3
   16894:	mov	r2, #39	; 0x27
   16898:	strb	r2, [r3]
   1689c:	ldr	r3, [fp, #-20]	; 0xffffffec
   168a0:	add	r3, r3, #1
   168a4:	str	r3, [fp, #-20]	; 0xffffffec
   168a8:	mov	r3, #1
   168ac:	strb	r3, [fp, #-35]	; 0xffffffdd
   168b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   168b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   168b8:	cmp	r2, r3
   168bc:	bcs	168d4 <__assert_fail@plt+0x5524>
   168c0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   168c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   168c8:	add	r3, r2, r3
   168cc:	mov	r2, #92	; 0x5c
   168d0:	strb	r2, [r3]
   168d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   168d8:	add	r3, r3, #1
   168dc:	str	r3, [fp, #-20]	; 0xffffffec
   168e0:	b	168f8 <__assert_fail@plt+0x5548>
   168e4:	nop	{0}
   168e8:	b	168f8 <__assert_fail@plt+0x5548>
   168ec:	nop	{0}
   168f0:	b	168f8 <__assert_fail@plt+0x5548>
   168f4:	nop	{0}
   168f8:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   168fc:	cmp	r3, #0
   16900:	beq	16980 <__assert_fail@plt+0x55d0>
   16904:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   16908:	eor	r3, r3, #1
   1690c:	uxtb	r3, r3
   16910:	cmp	r3, #0
   16914:	beq	16980 <__assert_fail@plt+0x55d0>
   16918:	ldr	r2, [fp, #-20]	; 0xffffffec
   1691c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16920:	cmp	r2, r3
   16924:	bcs	1693c <__assert_fail@plt+0x558c>
   16928:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1692c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16930:	add	r3, r2, r3
   16934:	mov	r2, #39	; 0x27
   16938:	strb	r2, [r3]
   1693c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16940:	add	r3, r3, #1
   16944:	str	r3, [fp, #-20]	; 0xffffffec
   16948:	ldr	r2, [fp, #-20]	; 0xffffffec
   1694c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16950:	cmp	r2, r3
   16954:	bcs	1696c <__assert_fail@plt+0x55bc>
   16958:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1695c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16960:	add	r3, r2, r3
   16964:	mov	r2, #39	; 0x27
   16968:	strb	r2, [r3]
   1696c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16970:	add	r3, r3, #1
   16974:	str	r3, [fp, #-20]	; 0xffffffec
   16978:	mov	r3, #0
   1697c:	strb	r3, [fp, #-35]	; 0xffffffdd
   16980:	ldr	r2, [fp, #-20]	; 0xffffffec
   16984:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16988:	cmp	r2, r3
   1698c:	bcs	169a4 <__assert_fail@plt+0x55f4>
   16990:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16994:	ldr	r3, [fp, #-20]	; 0xffffffec
   16998:	add	r3, r2, r3
   1699c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   169a0:	strb	r2, [r3]
   169a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   169a8:	add	r3, r3, #1
   169ac:	str	r3, [fp, #-20]	; 0xffffffec
   169b0:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   169b4:	eor	r3, r3, #1
   169b8:	uxtb	r3, r3
   169bc:	cmp	r3, #0
   169c0:	beq	169cc <__assert_fail@plt+0x561c>
   169c4:	mov	r3, #0
   169c8:	strb	r3, [fp, #-37]	; 0xffffffdb
   169cc:	ldr	r3, [fp, #-16]
   169d0:	add	r3, r3, #1
   169d4:	str	r3, [fp, #-16]
   169d8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   169dc:	cmn	r3, #1
   169e0:	bne	16a08 <__assert_fail@plt+0x5658>
   169e4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   169e8:	ldr	r3, [fp, #-16]
   169ec:	add	r3, r2, r3
   169f0:	ldrb	r3, [r3]
   169f4:	cmp	r3, #0
   169f8:	movne	r3, #1
   169fc:	moveq	r3, #0
   16a00:	uxtb	r3, r3
   16a04:	b	16a20 <__assert_fail@plt+0x5670>
   16a08:	ldr	r2, [fp, #-16]
   16a0c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16a10:	cmp	r2, r3
   16a14:	movne	r3, #1
   16a18:	moveq	r3, #0
   16a1c:	uxtb	r3, r3
   16a20:	cmp	r3, #0
   16a24:	bne	15840 <__assert_fail@plt+0x4490>
   16a28:	ldr	r3, [fp, #-20]	; 0xffffffec
   16a2c:	cmp	r3, #0
   16a30:	bne	16a4c <__assert_fail@plt+0x569c>
   16a34:	ldr	r3, [fp, #4]
   16a38:	cmp	r3, #2
   16a3c:	bne	16a4c <__assert_fail@plt+0x569c>
   16a40:	ldrb	r3, [fp, #-34]	; 0xffffffde
   16a44:	cmp	r3, #0
   16a48:	bne	16bcc <__assert_fail@plt+0x581c>
   16a4c:	ldr	r3, [fp, #4]
   16a50:	cmp	r3, #2
   16a54:	bne	16af4 <__assert_fail@plt+0x5744>
   16a58:	ldrb	r3, [fp, #-34]	; 0xffffffde
   16a5c:	eor	r3, r3, #1
   16a60:	uxtb	r3, r3
   16a64:	cmp	r3, #0
   16a68:	beq	16af4 <__assert_fail@plt+0x5744>
   16a6c:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   16a70:	cmp	r3, #0
   16a74:	beq	16af4 <__assert_fail@plt+0x5744>
   16a78:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   16a7c:	cmp	r3, #0
   16a80:	beq	16ac8 <__assert_fail@plt+0x5718>
   16a84:	ldr	r3, [fp, #20]
   16a88:	str	r3, [sp, #16]
   16a8c:	ldr	r3, [fp, #16]
   16a90:	str	r3, [sp, #12]
   16a94:	ldr	r3, [fp, #12]
   16a98:	str	r3, [sp, #8]
   16a9c:	ldr	r3, [fp, #8]
   16aa0:	str	r3, [sp, #4]
   16aa4:	mov	r3, #5
   16aa8:	str	r3, [sp]
   16aac:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16ab0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   16ab4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16ab8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   16abc:	bl	15578 <__assert_fail@plt+0x41c8>
   16ac0:	mov	r3, r0
   16ac4:	b	16c34 <__assert_fail@plt+0x5884>
   16ac8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16acc:	cmp	r3, #0
   16ad0:	bne	16af4 <__assert_fail@plt+0x5744>
   16ad4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16ad8:	cmp	r3, #0
   16adc:	beq	16af4 <__assert_fail@plt+0x5744>
   16ae0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16ae4:	str	r3, [fp, #-92]	; 0xffffffa4
   16ae8:	mov	r3, #0
   16aec:	str	r3, [fp, #-20]	; 0xffffffec
   16af0:	b	1560c <__assert_fail@plt+0x425c>
   16af4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16af8:	cmp	r3, #0
   16afc:	beq	16b68 <__assert_fail@plt+0x57b8>
   16b00:	ldrb	r3, [fp, #-34]	; 0xffffffde
   16b04:	eor	r3, r3, #1
   16b08:	uxtb	r3, r3
   16b0c:	cmp	r3, #0
   16b10:	beq	16b68 <__assert_fail@plt+0x57b8>
   16b14:	b	16b58 <__assert_fail@plt+0x57a8>
   16b18:	ldr	r2, [fp, #-20]	; 0xffffffec
   16b1c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16b20:	cmp	r2, r3
   16b24:	bcs	16b40 <__assert_fail@plt+0x5790>
   16b28:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16b2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16b30:	add	r3, r2, r3
   16b34:	ldr	r2, [fp, #-28]	; 0xffffffe4
   16b38:	ldrb	r2, [r2]
   16b3c:	strb	r2, [r3]
   16b40:	ldr	r3, [fp, #-20]	; 0xffffffec
   16b44:	add	r3, r3, #1
   16b48:	str	r3, [fp, #-20]	; 0xffffffec
   16b4c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16b50:	add	r3, r3, #1
   16b54:	str	r3, [fp, #-28]	; 0xffffffe4
   16b58:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16b5c:	ldrb	r3, [r3]
   16b60:	cmp	r3, #0
   16b64:	bne	16b18 <__assert_fail@plt+0x5768>
   16b68:	ldr	r2, [fp, #-20]	; 0xffffffec
   16b6c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   16b70:	cmp	r2, r3
   16b74:	bcs	16b8c <__assert_fail@plt+0x57dc>
   16b78:	ldr	r2, [fp, #-88]	; 0xffffffa8
   16b7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16b80:	add	r3, r2, r3
   16b84:	mov	r2, #0
   16b88:	strb	r2, [r3]
   16b8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16b90:	b	16c34 <__assert_fail@plt+0x5884>
   16b94:	nop	{0}
   16b98:	b	16bd0 <__assert_fail@plt+0x5820>
   16b9c:	nop	{0}
   16ba0:	b	16bd0 <__assert_fail@plt+0x5820>
   16ba4:	nop	{0}
   16ba8:	b	16bd0 <__assert_fail@plt+0x5820>
   16bac:	nop	{0}
   16bb0:	b	16bd0 <__assert_fail@plt+0x5820>
   16bb4:	nop	{0}
   16bb8:	b	16bd0 <__assert_fail@plt+0x5820>
   16bbc:	nop	{0}
   16bc0:	b	16bd0 <__assert_fail@plt+0x5820>
   16bc4:	nop	{0}
   16bc8:	b	16bd0 <__assert_fail@plt+0x5820>
   16bcc:	nop	{0}
   16bd0:	ldr	r3, [fp, #4]
   16bd4:	cmp	r3, #2
   16bd8:	bne	16bf0 <__assert_fail@plt+0x5840>
   16bdc:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   16be0:	cmp	r3, #0
   16be4:	beq	16bf0 <__assert_fail@plt+0x5840>
   16be8:	mov	r3, #4
   16bec:	str	r3, [fp, #4]
   16bf0:	ldr	r3, [fp, #8]
   16bf4:	bic	r3, r3, #2
   16bf8:	ldr	r2, [fp, #20]
   16bfc:	str	r2, [sp, #16]
   16c00:	ldr	r2, [fp, #16]
   16c04:	str	r2, [sp, #12]
   16c08:	mov	r2, #0
   16c0c:	str	r2, [sp, #8]
   16c10:	str	r3, [sp, #4]
   16c14:	ldr	r3, [fp, #4]
   16c18:	str	r3, [sp]
   16c1c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   16c20:	ldr	r2, [fp, #-96]	; 0xffffffa0
   16c24:	ldr	r1, [fp, #-92]	; 0xffffffa4
   16c28:	ldr	r0, [fp, #-88]	; 0xffffffa8
   16c2c:	bl	15578 <__assert_fail@plt+0x41c8>
   16c30:	mov	r3, r0
   16c34:	mov	r0, r3
   16c38:	sub	sp, fp, #8
   16c3c:	ldr	r4, [sp]
   16c40:	ldr	fp, [sp, #4]
   16c44:	add	sp, sp, #8
   16c48:	pop	{pc}		; (ldr pc, [sp], #4)
   16c4c:	str	fp, [sp, #-8]!
   16c50:	str	lr, [sp, #4]
   16c54:	add	fp, sp, #4
   16c58:	sub	sp, sp, #56	; 0x38
   16c5c:	str	r0, [fp, #-24]	; 0xffffffe8
   16c60:	str	r1, [fp, #-28]	; 0xffffffe4
   16c64:	str	r2, [fp, #-32]	; 0xffffffe0
   16c68:	str	r3, [fp, #-36]	; 0xffffffdc
   16c6c:	ldr	r3, [fp, #4]
   16c70:	cmp	r3, #0
   16c74:	beq	16c80 <__assert_fail@plt+0x58d0>
   16c78:	ldr	r3, [fp, #4]
   16c7c:	b	16c88 <__assert_fail@plt+0x58d8>
   16c80:	movw	r3, #49664	; 0xc200
   16c84:	movt	r3, #2
   16c88:	str	r3, [fp, #-8]
   16c8c:	bl	112c0 <__errno_location@plt>
   16c90:	mov	r3, r0
   16c94:	ldr	r3, [r3]
   16c98:	str	r3, [fp, #-12]
   16c9c:	ldr	r3, [fp, #-8]
   16ca0:	ldr	r3, [r3]
   16ca4:	ldr	r2, [fp, #-8]
   16ca8:	ldr	r2, [r2, #4]
   16cac:	ldr	r1, [fp, #-8]
   16cb0:	add	r1, r1, #8
   16cb4:	ldr	r0, [fp, #-8]
   16cb8:	ldr	r0, [r0, #40]	; 0x28
   16cbc:	ldr	ip, [fp, #-8]
   16cc0:	ldr	ip, [ip, #44]	; 0x2c
   16cc4:	str	ip, [sp, #16]
   16cc8:	str	r0, [sp, #12]
   16ccc:	str	r1, [sp, #8]
   16cd0:	str	r2, [sp, #4]
   16cd4:	str	r3, [sp]
   16cd8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16cdc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16ce0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16ce4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16ce8:	bl	15578 <__assert_fail@plt+0x41c8>
   16cec:	str	r0, [fp, #-16]
   16cf0:	bl	112c0 <__errno_location@plt>
   16cf4:	mov	r2, r0
   16cf8:	ldr	r3, [fp, #-12]
   16cfc:	str	r3, [r2]
   16d00:	ldr	r3, [fp, #-16]
   16d04:	mov	r0, r3
   16d08:	sub	sp, fp, #4
   16d0c:	ldr	fp, [sp]
   16d10:	add	sp, sp, #4
   16d14:	pop	{pc}		; (ldr pc, [sp], #4)
   16d18:	str	fp, [sp, #-8]!
   16d1c:	str	lr, [sp, #4]
   16d20:	add	fp, sp, #4
   16d24:	sub	sp, sp, #16
   16d28:	str	r0, [fp, #-8]
   16d2c:	str	r1, [fp, #-12]
   16d30:	str	r2, [fp, #-16]
   16d34:	ldr	r3, [fp, #-16]
   16d38:	mov	r2, #0
   16d3c:	ldr	r1, [fp, #-12]
   16d40:	ldr	r0, [fp, #-8]
   16d44:	bl	16d60 <__assert_fail@plt+0x59b0>
   16d48:	mov	r3, r0
   16d4c:	mov	r0, r3
   16d50:	sub	sp, fp, #4
   16d54:	ldr	fp, [sp]
   16d58:	add	sp, sp, #4
   16d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d60:	str	fp, [sp, #-8]!
   16d64:	str	lr, [sp, #4]
   16d68:	add	fp, sp, #4
   16d6c:	sub	sp, sp, #64	; 0x40
   16d70:	str	r0, [fp, #-32]	; 0xffffffe0
   16d74:	str	r1, [fp, #-36]	; 0xffffffdc
   16d78:	str	r2, [fp, #-40]	; 0xffffffd8
   16d7c:	str	r3, [fp, #-44]	; 0xffffffd4
   16d80:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16d84:	cmp	r3, #0
   16d88:	beq	16d94 <__assert_fail@plt+0x59e4>
   16d8c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16d90:	b	16d9c <__assert_fail@plt+0x59ec>
   16d94:	movw	r3, #49664	; 0xc200
   16d98:	movt	r3, #2
   16d9c:	str	r3, [fp, #-8]
   16da0:	bl	112c0 <__errno_location@plt>
   16da4:	mov	r3, r0
   16da8:	ldr	r3, [r3]
   16dac:	str	r3, [fp, #-12]
   16db0:	ldr	r3, [fp, #-8]
   16db4:	ldr	r3, [r3, #4]
   16db8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   16dbc:	cmp	r2, #0
   16dc0:	moveq	r2, #1
   16dc4:	movne	r2, #0
   16dc8:	uxtb	r2, r2
   16dcc:	orr	r3, r3, r2
   16dd0:	str	r3, [fp, #-16]
   16dd4:	ldr	r3, [fp, #-8]
   16dd8:	ldr	r3, [r3]
   16ddc:	ldr	r2, [fp, #-8]
   16de0:	add	r2, r2, #8
   16de4:	ldr	r1, [fp, #-8]
   16de8:	ldr	r1, [r1, #40]	; 0x28
   16dec:	ldr	r0, [fp, #-8]
   16df0:	ldr	r0, [r0, #44]	; 0x2c
   16df4:	str	r0, [sp, #16]
   16df8:	str	r1, [sp, #12]
   16dfc:	str	r2, [sp, #8]
   16e00:	ldr	r2, [fp, #-16]
   16e04:	str	r2, [sp, #4]
   16e08:	str	r3, [sp]
   16e0c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16e10:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16e14:	mov	r1, #0
   16e18:	mov	r0, #0
   16e1c:	bl	15578 <__assert_fail@plt+0x41c8>
   16e20:	mov	r3, r0
   16e24:	add	r3, r3, #1
   16e28:	str	r3, [fp, #-20]	; 0xffffffec
   16e2c:	ldr	r0, [fp, #-20]	; 0xffffffec
   16e30:	bl	18ae0 <__assert_fail@plt+0x7730>
   16e34:	mov	r3, r0
   16e38:	str	r3, [fp, #-24]	; 0xffffffe8
   16e3c:	ldr	r3, [fp, #-8]
   16e40:	ldr	r3, [r3]
   16e44:	ldr	r2, [fp, #-8]
   16e48:	add	r2, r2, #8
   16e4c:	ldr	r1, [fp, #-8]
   16e50:	ldr	r1, [r1, #40]	; 0x28
   16e54:	ldr	r0, [fp, #-8]
   16e58:	ldr	r0, [r0, #44]	; 0x2c
   16e5c:	str	r0, [sp, #16]
   16e60:	str	r1, [sp, #12]
   16e64:	str	r2, [sp, #8]
   16e68:	ldr	r2, [fp, #-16]
   16e6c:	str	r2, [sp, #4]
   16e70:	str	r3, [sp]
   16e74:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16e78:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16e7c:	ldr	r1, [fp, #-20]	; 0xffffffec
   16e80:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16e84:	bl	15578 <__assert_fail@plt+0x41c8>
   16e88:	bl	112c0 <__errno_location@plt>
   16e8c:	mov	r2, r0
   16e90:	ldr	r3, [fp, #-12]
   16e94:	str	r3, [r2]
   16e98:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16e9c:	cmp	r3, #0
   16ea0:	beq	16eb4 <__assert_fail@plt+0x5b04>
   16ea4:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ea8:	sub	r2, r3, #1
   16eac:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16eb0:	str	r2, [r3]
   16eb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16eb8:	mov	r0, r3
   16ebc:	sub	sp, fp, #4
   16ec0:	ldr	fp, [sp]
   16ec4:	add	sp, sp, #4
   16ec8:	pop	{pc}		; (ldr pc, [sp], #4)
   16ecc:	str	fp, [sp, #-8]!
   16ed0:	str	lr, [sp, #4]
   16ed4:	add	fp, sp, #4
   16ed8:	sub	sp, sp, #8
   16edc:	movw	r3, #49476	; 0xc144
   16ee0:	movt	r3, #2
   16ee4:	ldr	r3, [r3]
   16ee8:	str	r3, [fp, #-12]
   16eec:	mov	r3, #1
   16ef0:	str	r3, [fp, #-8]
   16ef4:	b	16f20 <__assert_fail@plt+0x5b70>
   16ef8:	ldr	r3, [fp, #-8]
   16efc:	lsl	r3, r3, #3
   16f00:	ldr	r2, [fp, #-12]
   16f04:	add	r3, r2, r3
   16f08:	ldr	r3, [r3, #4]
   16f0c:	mov	r0, r3
   16f10:	bl	149f0 <__assert_fail@plt+0x3640>
   16f14:	ldr	r3, [fp, #-8]
   16f18:	add	r3, r3, #1
   16f1c:	str	r3, [fp, #-8]
   16f20:	movw	r3, #49464	; 0xc138
   16f24:	movt	r3, #2
   16f28:	ldr	r3, [r3]
   16f2c:	ldr	r2, [fp, #-8]
   16f30:	cmp	r2, r3
   16f34:	blt	16ef8 <__assert_fail@plt+0x5b48>
   16f38:	ldr	r3, [fp, #-12]
   16f3c:	ldr	r2, [r3, #4]
   16f40:	movw	r3, #49712	; 0xc230
   16f44:	movt	r3, #2
   16f48:	cmp	r2, r3
   16f4c:	beq	16f84 <__assert_fail@plt+0x5bd4>
   16f50:	ldr	r3, [fp, #-12]
   16f54:	ldr	r3, [r3, #4]
   16f58:	mov	r0, r3
   16f5c:	bl	149f0 <__assert_fail@plt+0x3640>
   16f60:	movw	r3, #49468	; 0xc13c
   16f64:	movt	r3, #2
   16f68:	mov	r2, #256	; 0x100
   16f6c:	str	r2, [r3]
   16f70:	movw	r3, #49468	; 0xc13c
   16f74:	movt	r3, #2
   16f78:	movw	r2, #49712	; 0xc230
   16f7c:	movt	r2, #2
   16f80:	str	r2, [r3, #4]
   16f84:	ldr	r2, [fp, #-12]
   16f88:	movw	r3, #49468	; 0xc13c
   16f8c:	movt	r3, #2
   16f90:	cmp	r2, r3
   16f94:	beq	16fb4 <__assert_fail@plt+0x5c04>
   16f98:	ldr	r0, [fp, #-12]
   16f9c:	bl	149f0 <__assert_fail@plt+0x3640>
   16fa0:	movw	r3, #49476	; 0xc144
   16fa4:	movt	r3, #2
   16fa8:	movw	r2, #49468	; 0xc13c
   16fac:	movt	r2, #2
   16fb0:	str	r2, [r3]
   16fb4:	movw	r3, #49464	; 0xc138
   16fb8:	movt	r3, #2
   16fbc:	mov	r2, #1
   16fc0:	str	r2, [r3]
   16fc4:	nop	{0}
   16fc8:	sub	sp, fp, #4
   16fcc:	ldr	fp, [sp]
   16fd0:	add	sp, sp, #4
   16fd4:	pop	{pc}		; (ldr pc, [sp], #4)
   16fd8:	str	fp, [sp, #-8]!
   16fdc:	str	lr, [sp, #4]
   16fe0:	add	fp, sp, #4
   16fe4:	sub	sp, sp, #80	; 0x50
   16fe8:	str	r0, [fp, #-48]	; 0xffffffd0
   16fec:	str	r1, [fp, #-52]	; 0xffffffcc
   16ff0:	str	r2, [fp, #-56]	; 0xffffffc8
   16ff4:	str	r3, [fp, #-60]	; 0xffffffc4
   16ff8:	bl	112c0 <__errno_location@plt>
   16ffc:	mov	r3, r0
   17000:	ldr	r3, [r3]
   17004:	str	r3, [fp, #-16]
   17008:	movw	r3, #49476	; 0xc144
   1700c:	movt	r3, #2
   17010:	ldr	r3, [r3]
   17014:	str	r3, [fp, #-8]
   17018:	mvn	r3, #-2147483648	; 0x80000000
   1701c:	str	r3, [fp, #-20]	; 0xffffffec
   17020:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17024:	cmp	r3, #0
   17028:	blt	1703c <__assert_fail@plt+0x5c8c>
   1702c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17030:	ldr	r3, [fp, #-20]	; 0xffffffec
   17034:	cmp	r2, r3
   17038:	blt	17040 <__assert_fail@plt+0x5c90>
   1703c:	bl	1138c <abort@plt>
   17040:	movw	r3, #49464	; 0xc138
   17044:	movt	r3, #2
   17048:	ldr	r3, [r3]
   1704c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17050:	cmp	r2, r3
   17054:	blt	1714c <__assert_fail@plt+0x5d9c>
   17058:	ldr	r2, [fp, #-8]
   1705c:	movw	r3, #49468	; 0xc13c
   17060:	movt	r3, #2
   17064:	cmp	r2, r3
   17068:	moveq	r3, #1
   1706c:	movne	r3, #0
   17070:	strb	r3, [fp, #-21]	; 0xffffffeb
   17074:	movw	r3, #49464	; 0xc138
   17078:	movt	r3, #2
   1707c:	ldr	r3, [r3]
   17080:	str	r3, [fp, #-40]	; 0xffffffd8
   17084:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   17088:	cmp	r3, #0
   1708c:	beq	17098 <__assert_fail@plt+0x5ce8>
   17090:	mov	r0, #0
   17094:	b	1709c <__assert_fail@plt+0x5cec>
   17098:	ldr	r0, [fp, #-8]
   1709c:	movw	r3, #49464	; 0xc138
   170a0:	movt	r3, #2
   170a4:	ldr	r3, [r3]
   170a8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   170ac:	sub	r3, r2, r3
   170b0:	add	r2, r3, #1
   170b4:	sub	r1, fp, #40	; 0x28
   170b8:	mov	r3, #8
   170bc:	str	r3, [sp]
   170c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   170c4:	bl	18e40 <__assert_fail@plt+0x7a90>
   170c8:	str	r0, [fp, #-8]
   170cc:	movw	r3, #49476	; 0xc144
   170d0:	movt	r3, #2
   170d4:	ldr	r2, [fp, #-8]
   170d8:	str	r2, [r3]
   170dc:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   170e0:	cmp	r3, #0
   170e4:	beq	17100 <__assert_fail@plt+0x5d50>
   170e8:	ldr	r2, [fp, #-8]
   170ec:	movw	r3, #49468	; 0xc13c
   170f0:	movt	r3, #2
   170f4:	mov	r1, r2
   170f8:	ldrd	r2, [r3]
   170fc:	strd	r2, [r1]
   17100:	movw	r3, #49464	; 0xc138
   17104:	movt	r3, #2
   17108:	ldr	r3, [r3]
   1710c:	lsl	r3, r3, #3
   17110:	ldr	r2, [fp, #-8]
   17114:	add	r0, r2, r3
   17118:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1711c:	movw	r3, #49464	; 0xc138
   17120:	movt	r3, #2
   17124:	ldr	r3, [r3]
   17128:	sub	r3, r2, r3
   1712c:	lsl	r3, r3, #3
   17130:	mov	r2, r3
   17134:	mov	r1, #0
   17138:	bl	112e4 <memset@plt>
   1713c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   17140:	movw	r3, #49464	; 0xc138
   17144:	movt	r3, #2
   17148:	str	r2, [r3]
   1714c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17150:	lsl	r3, r3, #3
   17154:	ldr	r2, [fp, #-8]
   17158:	add	r3, r2, r3
   1715c:	ldr	r3, [r3]
   17160:	str	r3, [fp, #-28]	; 0xffffffe4
   17164:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17168:	lsl	r3, r3, #3
   1716c:	ldr	r2, [fp, #-8]
   17170:	add	r3, r2, r3
   17174:	ldr	r3, [r3, #4]
   17178:	str	r3, [fp, #-12]
   1717c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17180:	ldr	r3, [r3, #4]
   17184:	orr	r3, r3, #1
   17188:	str	r3, [fp, #-32]	; 0xffffffe0
   1718c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17190:	ldr	r3, [r3]
   17194:	ldr	r2, [fp, #-60]	; 0xffffffc4
   17198:	add	r2, r2, #8
   1719c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   171a0:	ldr	r1, [r1, #40]	; 0x28
   171a4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   171a8:	ldr	r0, [r0, #44]	; 0x2c
   171ac:	str	r0, [sp, #16]
   171b0:	str	r1, [sp, #12]
   171b4:	str	r2, [sp, #8]
   171b8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   171bc:	str	r2, [sp, #4]
   171c0:	str	r3, [sp]
   171c4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   171c8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   171cc:	ldr	r1, [fp, #-28]	; 0xffffffe4
   171d0:	ldr	r0, [fp, #-12]
   171d4:	bl	15578 <__assert_fail@plt+0x41c8>
   171d8:	str	r0, [fp, #-36]	; 0xffffffdc
   171dc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   171e0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   171e4:	cmp	r2, r3
   171e8:	bhi	172a0 <__assert_fail@plt+0x5ef0>
   171ec:	ldr	r3, [fp, #-36]	; 0xffffffdc
   171f0:	add	r3, r3, #1
   171f4:	str	r3, [fp, #-28]	; 0xffffffe4
   171f8:	ldr	r3, [fp, #-48]	; 0xffffffd0
   171fc:	lsl	r3, r3, #3
   17200:	ldr	r2, [fp, #-8]
   17204:	add	r3, r2, r3
   17208:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1720c:	str	r2, [r3]
   17210:	ldr	r2, [fp, #-12]
   17214:	movw	r3, #49712	; 0xc230
   17218:	movt	r3, #2
   1721c:	cmp	r2, r3
   17220:	beq	1722c <__assert_fail@plt+0x5e7c>
   17224:	ldr	r0, [fp, #-12]
   17228:	bl	149f0 <__assert_fail@plt+0x3640>
   1722c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17230:	bl	18ae0 <__assert_fail@plt+0x7730>
   17234:	mov	r3, r0
   17238:	str	r3, [fp, #-12]
   1723c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17240:	lsl	r3, r3, #3
   17244:	ldr	r2, [fp, #-8]
   17248:	add	r3, r2, r3
   1724c:	ldr	r2, [fp, #-12]
   17250:	str	r2, [r3, #4]
   17254:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17258:	ldr	r3, [r3]
   1725c:	ldr	r2, [fp, #-60]	; 0xffffffc4
   17260:	add	r2, r2, #8
   17264:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17268:	ldr	r1, [r1, #40]	; 0x28
   1726c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17270:	ldr	r0, [r0, #44]	; 0x2c
   17274:	str	r0, [sp, #16]
   17278:	str	r1, [sp, #12]
   1727c:	str	r2, [sp, #8]
   17280:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17284:	str	r2, [sp, #4]
   17288:	str	r3, [sp]
   1728c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17290:	ldr	r2, [fp, #-52]	; 0xffffffcc
   17294:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17298:	ldr	r0, [fp, #-12]
   1729c:	bl	15578 <__assert_fail@plt+0x41c8>
   172a0:	bl	112c0 <__errno_location@plt>
   172a4:	mov	r2, r0
   172a8:	ldr	r3, [fp, #-16]
   172ac:	str	r3, [r2]
   172b0:	ldr	r3, [fp, #-12]
   172b4:	mov	r0, r3
   172b8:	sub	sp, fp, #4
   172bc:	ldr	fp, [sp]
   172c0:	add	sp, sp, #4
   172c4:	pop	{pc}		; (ldr pc, [sp], #4)
   172c8:	str	fp, [sp, #-8]!
   172cc:	str	lr, [sp, #4]
   172d0:	add	fp, sp, #4
   172d4:	sub	sp, sp, #8
   172d8:	str	r0, [fp, #-8]
   172dc:	str	r1, [fp, #-12]
   172e0:	movw	r3, #49664	; 0xc200
   172e4:	movt	r3, #2
   172e8:	mvn	r2, #0
   172ec:	ldr	r1, [fp, #-12]
   172f0:	ldr	r0, [fp, #-8]
   172f4:	bl	16fd8 <__assert_fail@plt+0x5c28>
   172f8:	mov	r3, r0
   172fc:	mov	r0, r3
   17300:	sub	sp, fp, #4
   17304:	ldr	fp, [sp]
   17308:	add	sp, sp, #4
   1730c:	pop	{pc}		; (ldr pc, [sp], #4)
   17310:	str	fp, [sp, #-8]!
   17314:	str	lr, [sp, #4]
   17318:	add	fp, sp, #4
   1731c:	sub	sp, sp, #16
   17320:	str	r0, [fp, #-8]
   17324:	str	r1, [fp, #-12]
   17328:	str	r2, [fp, #-16]
   1732c:	movw	r3, #49664	; 0xc200
   17330:	movt	r3, #2
   17334:	ldr	r2, [fp, #-16]
   17338:	ldr	r1, [fp, #-12]
   1733c:	ldr	r0, [fp, #-8]
   17340:	bl	16fd8 <__assert_fail@plt+0x5c28>
   17344:	mov	r3, r0
   17348:	mov	r0, r3
   1734c:	sub	sp, fp, #4
   17350:	ldr	fp, [sp]
   17354:	add	sp, sp, #4
   17358:	pop	{pc}		; (ldr pc, [sp], #4)
   1735c:	str	fp, [sp, #-8]!
   17360:	str	lr, [sp, #4]
   17364:	add	fp, sp, #4
   17368:	sub	sp, sp, #8
   1736c:	str	r0, [fp, #-8]
   17370:	ldr	r1, [fp, #-8]
   17374:	mov	r0, #0
   17378:	bl	172c8 <__assert_fail@plt+0x5f18>
   1737c:	mov	r3, r0
   17380:	mov	r0, r3
   17384:	sub	sp, fp, #4
   17388:	ldr	fp, [sp]
   1738c:	add	sp, sp, #4
   17390:	pop	{pc}		; (ldr pc, [sp], #4)
   17394:	str	fp, [sp, #-8]!
   17398:	str	lr, [sp, #4]
   1739c:	add	fp, sp, #4
   173a0:	sub	sp, sp, #8
   173a4:	str	r0, [fp, #-8]
   173a8:	str	r1, [fp, #-12]
   173ac:	ldr	r2, [fp, #-12]
   173b0:	ldr	r1, [fp, #-8]
   173b4:	mov	r0, #0
   173b8:	bl	17310 <__assert_fail@plt+0x5f60>
   173bc:	mov	r3, r0
   173c0:	mov	r0, r3
   173c4:	sub	sp, fp, #4
   173c8:	ldr	fp, [sp]
   173cc:	add	sp, sp, #4
   173d0:	pop	{pc}		; (ldr pc, [sp], #4)
   173d4:	str	fp, [sp, #-8]!
   173d8:	str	lr, [sp, #4]
   173dc:	add	fp, sp, #4
   173e0:	sub	sp, sp, #64	; 0x40
   173e4:	str	r0, [fp, #-56]	; 0xffffffc8
   173e8:	str	r1, [fp, #-60]	; 0xffffffc4
   173ec:	str	r2, [fp, #-64]	; 0xffffffc0
   173f0:	sub	r3, fp, #52	; 0x34
   173f4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   173f8:	mov	r0, r3
   173fc:	bl	153d4 <__assert_fail@plt+0x4024>
   17400:	sub	r3, fp, #52	; 0x34
   17404:	mvn	r2, #0
   17408:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1740c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17410:	bl	16fd8 <__assert_fail@plt+0x5c28>
   17414:	mov	r3, r0
   17418:	mov	r0, r3
   1741c:	sub	sp, fp, #4
   17420:	ldr	fp, [sp]
   17424:	add	sp, sp, #4
   17428:	pop	{pc}		; (ldr pc, [sp], #4)
   1742c:	str	fp, [sp, #-8]!
   17430:	str	lr, [sp, #4]
   17434:	add	fp, sp, #4
   17438:	sub	sp, sp, #64	; 0x40
   1743c:	str	r0, [fp, #-56]	; 0xffffffc8
   17440:	str	r1, [fp, #-60]	; 0xffffffc4
   17444:	str	r2, [fp, #-64]	; 0xffffffc0
   17448:	str	r3, [fp, #-68]	; 0xffffffbc
   1744c:	sub	r3, fp, #52	; 0x34
   17450:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17454:	mov	r0, r3
   17458:	bl	153d4 <__assert_fail@plt+0x4024>
   1745c:	sub	r3, fp, #52	; 0x34
   17460:	ldr	r2, [fp, #-68]	; 0xffffffbc
   17464:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17468:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1746c:	bl	16fd8 <__assert_fail@plt+0x5c28>
   17470:	mov	r3, r0
   17474:	mov	r0, r3
   17478:	sub	sp, fp, #4
   1747c:	ldr	fp, [sp]
   17480:	add	sp, sp, #4
   17484:	pop	{pc}		; (ldr pc, [sp], #4)
   17488:	str	fp, [sp, #-8]!
   1748c:	str	lr, [sp, #4]
   17490:	add	fp, sp, #4
   17494:	sub	sp, sp, #8
   17498:	str	r0, [fp, #-8]
   1749c:	str	r1, [fp, #-12]
   174a0:	ldr	r2, [fp, #-12]
   174a4:	ldr	r1, [fp, #-8]
   174a8:	mov	r0, #0
   174ac:	bl	173d4 <__assert_fail@plt+0x6024>
   174b0:	mov	r3, r0
   174b4:	mov	r0, r3
   174b8:	sub	sp, fp, #4
   174bc:	ldr	fp, [sp]
   174c0:	add	sp, sp, #4
   174c4:	pop	{pc}		; (ldr pc, [sp], #4)
   174c8:	str	fp, [sp, #-8]!
   174cc:	str	lr, [sp, #4]
   174d0:	add	fp, sp, #4
   174d4:	sub	sp, sp, #16
   174d8:	str	r0, [fp, #-8]
   174dc:	str	r1, [fp, #-12]
   174e0:	str	r2, [fp, #-16]
   174e4:	ldr	r3, [fp, #-16]
   174e8:	ldr	r2, [fp, #-12]
   174ec:	ldr	r1, [fp, #-8]
   174f0:	mov	r0, #0
   174f4:	bl	1742c <__assert_fail@plt+0x607c>
   174f8:	mov	r3, r0
   174fc:	mov	r0, r3
   17500:	sub	sp, fp, #4
   17504:	ldr	fp, [sp]
   17508:	add	sp, sp, #4
   1750c:	pop	{pc}		; (ldr pc, [sp], #4)
   17510:	str	fp, [sp, #-8]!
   17514:	str	lr, [sp, #4]
   17518:	add	fp, sp, #4
   1751c:	sub	sp, sp, #64	; 0x40
   17520:	str	r0, [fp, #-56]	; 0xffffffc8
   17524:	str	r1, [fp, #-60]	; 0xffffffc4
   17528:	mov	r3, r2
   1752c:	strb	r3, [fp, #-61]	; 0xffffffc3
   17530:	movw	r2, #49664	; 0xc200
   17534:	movt	r2, #2
   17538:	sub	r3, fp, #52	; 0x34
   1753c:	ldrd	r0, [r2]
   17540:	strd	r0, [r3]
   17544:	ldrd	r0, [r2, #8]
   17548:	strd	r0, [r3, #8]
   1754c:	ldrd	r0, [r2, #16]
   17550:	strd	r0, [r3, #16]
   17554:	ldrd	r0, [r2, #24]
   17558:	strd	r0, [r3, #24]
   1755c:	ldrd	r0, [r2, #32]
   17560:	strd	r0, [r3, #32]
   17564:	ldrd	r0, [r2, #40]	; 0x28
   17568:	strd	r0, [r3, #40]	; 0x28
   1756c:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   17570:	sub	r3, fp, #52	; 0x34
   17574:	mov	r2, #1
   17578:	mov	r0, r3
   1757c:	bl	15234 <__assert_fail@plt+0x3e84>
   17580:	sub	r3, fp, #52	; 0x34
   17584:	ldr	r2, [fp, #-60]	; 0xffffffc4
   17588:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1758c:	mov	r0, #0
   17590:	bl	16fd8 <__assert_fail@plt+0x5c28>
   17594:	mov	r3, r0
   17598:	mov	r0, r3
   1759c:	sub	sp, fp, #4
   175a0:	ldr	fp, [sp]
   175a4:	add	sp, sp, #4
   175a8:	pop	{pc}		; (ldr pc, [sp], #4)
   175ac:	str	fp, [sp, #-8]!
   175b0:	str	lr, [sp, #4]
   175b4:	add	fp, sp, #4
   175b8:	sub	sp, sp, #8
   175bc:	str	r0, [fp, #-8]
   175c0:	mov	r3, r1
   175c4:	strb	r3, [fp, #-9]
   175c8:	ldrb	r3, [fp, #-9]
   175cc:	mov	r2, r3
   175d0:	mvn	r1, #0
   175d4:	ldr	r0, [fp, #-8]
   175d8:	bl	17510 <__assert_fail@plt+0x6160>
   175dc:	mov	r3, r0
   175e0:	mov	r0, r3
   175e4:	sub	sp, fp, #4
   175e8:	ldr	fp, [sp]
   175ec:	add	sp, sp, #4
   175f0:	pop	{pc}		; (ldr pc, [sp], #4)
   175f4:	str	fp, [sp, #-8]!
   175f8:	str	lr, [sp, #4]
   175fc:	add	fp, sp, #4
   17600:	sub	sp, sp, #8
   17604:	str	r0, [fp, #-8]
   17608:	mov	r1, #58	; 0x3a
   1760c:	ldr	r0, [fp, #-8]
   17610:	bl	175ac <__assert_fail@plt+0x61fc>
   17614:	mov	r3, r0
   17618:	mov	r0, r3
   1761c:	sub	sp, fp, #4
   17620:	ldr	fp, [sp]
   17624:	add	sp, sp, #4
   17628:	pop	{pc}		; (ldr pc, [sp], #4)
   1762c:	str	fp, [sp, #-8]!
   17630:	str	lr, [sp, #4]
   17634:	add	fp, sp, #4
   17638:	sub	sp, sp, #8
   1763c:	str	r0, [fp, #-8]
   17640:	str	r1, [fp, #-12]
   17644:	mov	r2, #58	; 0x3a
   17648:	ldr	r1, [fp, #-12]
   1764c:	ldr	r0, [fp, #-8]
   17650:	bl	17510 <__assert_fail@plt+0x6160>
   17654:	mov	r3, r0
   17658:	mov	r0, r3
   1765c:	sub	sp, fp, #4
   17660:	ldr	fp, [sp]
   17664:	add	sp, sp, #4
   17668:	pop	{pc}		; (ldr pc, [sp], #4)
   1766c:	str	fp, [sp, #-8]!
   17670:	str	lr, [sp, #4]
   17674:	add	fp, sp, #4
   17678:	sub	sp, sp, #112	; 0x70
   1767c:	str	r0, [fp, #-56]	; 0xffffffc8
   17680:	str	r1, [fp, #-60]	; 0xffffffc4
   17684:	str	r2, [fp, #-64]	; 0xffffffc0
   17688:	sub	r3, fp, #116	; 0x74
   1768c:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17690:	mov	r0, r3
   17694:	bl	153d4 <__assert_fail@plt+0x4024>
   17698:	sub	r3, fp, #52	; 0x34
   1769c:	sub	r2, fp, #116	; 0x74
   176a0:	ldrd	r0, [r2]
   176a4:	strd	r0, [r3]
   176a8:	ldrd	r0, [r2, #8]
   176ac:	strd	r0, [r3, #8]
   176b0:	ldrd	r0, [r2, #16]
   176b4:	strd	r0, [r3, #16]
   176b8:	ldrd	r0, [r2, #24]
   176bc:	strd	r0, [r3, #24]
   176c0:	ldrd	r0, [r2, #32]
   176c4:	strd	r0, [r3, #32]
   176c8:	ldrd	r0, [r2, #40]	; 0x28
   176cc:	strd	r0, [r3, #40]	; 0x28
   176d0:	sub	r3, fp, #52	; 0x34
   176d4:	mov	r2, #1
   176d8:	mov	r1, #58	; 0x3a
   176dc:	mov	r0, r3
   176e0:	bl	15234 <__assert_fail@plt+0x3e84>
   176e4:	sub	r3, fp, #52	; 0x34
   176e8:	mvn	r2, #0
   176ec:	ldr	r1, [fp, #-64]	; 0xffffffc0
   176f0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   176f4:	bl	16fd8 <__assert_fail@plt+0x5c28>
   176f8:	mov	r3, r0
   176fc:	mov	r0, r3
   17700:	sub	sp, fp, #4
   17704:	ldr	fp, [sp]
   17708:	add	sp, sp, #4
   1770c:	pop	{pc}		; (ldr pc, [sp], #4)
   17710:	str	fp, [sp, #-8]!
   17714:	str	lr, [sp, #4]
   17718:	add	fp, sp, #4
   1771c:	sub	sp, sp, #24
   17720:	str	r0, [fp, #-8]
   17724:	str	r1, [fp, #-12]
   17728:	str	r2, [fp, #-16]
   1772c:	str	r3, [fp, #-20]	; 0xffffffec
   17730:	mvn	r3, #0
   17734:	str	r3, [sp]
   17738:	ldr	r3, [fp, #-20]	; 0xffffffec
   1773c:	ldr	r2, [fp, #-16]
   17740:	ldr	r1, [fp, #-12]
   17744:	ldr	r0, [fp, #-8]
   17748:	bl	17764 <__assert_fail@plt+0x63b4>
   1774c:	mov	r3, r0
   17750:	mov	r0, r3
   17754:	sub	sp, fp, #4
   17758:	ldr	fp, [sp]
   1775c:	add	sp, sp, #4
   17760:	pop	{pc}		; (ldr pc, [sp], #4)
   17764:	str	fp, [sp, #-8]!
   17768:	str	lr, [sp, #4]
   1776c:	add	fp, sp, #4
   17770:	sub	sp, sp, #64	; 0x40
   17774:	str	r0, [fp, #-56]	; 0xffffffc8
   17778:	str	r1, [fp, #-60]	; 0xffffffc4
   1777c:	str	r2, [fp, #-64]	; 0xffffffc0
   17780:	str	r3, [fp, #-68]	; 0xffffffbc
   17784:	movw	r2, #49664	; 0xc200
   17788:	movt	r2, #2
   1778c:	sub	r3, fp, #52	; 0x34
   17790:	ldrd	r0, [r2]
   17794:	strd	r0, [r3]
   17798:	ldrd	r0, [r2, #8]
   1779c:	strd	r0, [r3, #8]
   177a0:	ldrd	r0, [r2, #16]
   177a4:	strd	r0, [r3, #16]
   177a8:	ldrd	r0, [r2, #24]
   177ac:	strd	r0, [r3, #24]
   177b0:	ldrd	r0, [r2, #32]
   177b4:	strd	r0, [r3, #32]
   177b8:	ldrd	r0, [r2, #40]	; 0x28
   177bc:	strd	r0, [r3, #40]	; 0x28
   177c0:	sub	r3, fp, #52	; 0x34
   177c4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   177c8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   177cc:	mov	r0, r3
   177d0:	bl	1534c <__assert_fail@plt+0x3f9c>
   177d4:	sub	r3, fp, #52	; 0x34
   177d8:	ldr	r2, [fp, #4]
   177dc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   177e0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   177e4:	bl	16fd8 <__assert_fail@plt+0x5c28>
   177e8:	mov	r3, r0
   177ec:	mov	r0, r3
   177f0:	sub	sp, fp, #4
   177f4:	ldr	fp, [sp]
   177f8:	add	sp, sp, #4
   177fc:	pop	{pc}		; (ldr pc, [sp], #4)
   17800:	str	fp, [sp, #-8]!
   17804:	str	lr, [sp, #4]
   17808:	add	fp, sp, #4
   1780c:	sub	sp, sp, #16
   17810:	str	r0, [fp, #-8]
   17814:	str	r1, [fp, #-12]
   17818:	str	r2, [fp, #-16]
   1781c:	ldr	r3, [fp, #-16]
   17820:	ldr	r2, [fp, #-12]
   17824:	ldr	r1, [fp, #-8]
   17828:	mov	r0, #0
   1782c:	bl	17710 <__assert_fail@plt+0x6360>
   17830:	mov	r3, r0
   17834:	mov	r0, r3
   17838:	sub	sp, fp, #4
   1783c:	ldr	fp, [sp]
   17840:	add	sp, sp, #4
   17844:	pop	{pc}		; (ldr pc, [sp], #4)
   17848:	str	fp, [sp, #-8]!
   1784c:	str	lr, [sp, #4]
   17850:	add	fp, sp, #4
   17854:	sub	sp, sp, #24
   17858:	str	r0, [fp, #-8]
   1785c:	str	r1, [fp, #-12]
   17860:	str	r2, [fp, #-16]
   17864:	str	r3, [fp, #-20]	; 0xffffffec
   17868:	ldr	r3, [fp, #-20]	; 0xffffffec
   1786c:	str	r3, [sp]
   17870:	ldr	r3, [fp, #-16]
   17874:	ldr	r2, [fp, #-12]
   17878:	ldr	r1, [fp, #-8]
   1787c:	mov	r0, #0
   17880:	bl	17764 <__assert_fail@plt+0x63b4>
   17884:	mov	r3, r0
   17888:	mov	r0, r3
   1788c:	sub	sp, fp, #4
   17890:	ldr	fp, [sp]
   17894:	add	sp, sp, #4
   17898:	pop	{pc}		; (ldr pc, [sp], #4)
   1789c:	str	fp, [sp, #-8]!
   178a0:	str	lr, [sp, #4]
   178a4:	add	fp, sp, #4
   178a8:	sub	sp, sp, #16
   178ac:	str	r0, [fp, #-8]
   178b0:	str	r1, [fp, #-12]
   178b4:	str	r2, [fp, #-16]
   178b8:	movw	r3, #49480	; 0xc148
   178bc:	movt	r3, #2
   178c0:	ldr	r2, [fp, #-16]
   178c4:	ldr	r1, [fp, #-12]
   178c8:	ldr	r0, [fp, #-8]
   178cc:	bl	16fd8 <__assert_fail@plt+0x5c28>
   178d0:	mov	r3, r0
   178d4:	mov	r0, r3
   178d8:	sub	sp, fp, #4
   178dc:	ldr	fp, [sp]
   178e0:	add	sp, sp, #4
   178e4:	pop	{pc}		; (ldr pc, [sp], #4)
   178e8:	str	fp, [sp, #-8]!
   178ec:	str	lr, [sp, #4]
   178f0:	add	fp, sp, #4
   178f4:	sub	sp, sp, #8
   178f8:	str	r0, [fp, #-8]
   178fc:	str	r1, [fp, #-12]
   17900:	ldr	r2, [fp, #-12]
   17904:	ldr	r1, [fp, #-8]
   17908:	mov	r0, #0
   1790c:	bl	1789c <__assert_fail@plt+0x64ec>
   17910:	mov	r3, r0
   17914:	mov	r0, r3
   17918:	sub	sp, fp, #4
   1791c:	ldr	fp, [sp]
   17920:	add	sp, sp, #4
   17924:	pop	{pc}		; (ldr pc, [sp], #4)
   17928:	str	fp, [sp, #-8]!
   1792c:	str	lr, [sp, #4]
   17930:	add	fp, sp, #4
   17934:	sub	sp, sp, #8
   17938:	str	r0, [fp, #-8]
   1793c:	str	r1, [fp, #-12]
   17940:	mvn	r2, #0
   17944:	ldr	r1, [fp, #-12]
   17948:	ldr	r0, [fp, #-8]
   1794c:	bl	1789c <__assert_fail@plt+0x64ec>
   17950:	mov	r3, r0
   17954:	mov	r0, r3
   17958:	sub	sp, fp, #4
   1795c:	ldr	fp, [sp]
   17960:	add	sp, sp, #4
   17964:	pop	{pc}		; (ldr pc, [sp], #4)
   17968:	str	fp, [sp, #-8]!
   1796c:	str	lr, [sp, #4]
   17970:	add	fp, sp, #4
   17974:	sub	sp, sp, #8
   17978:	str	r0, [fp, #-8]
   1797c:	ldr	r1, [fp, #-8]
   17980:	mov	r0, #0
   17984:	bl	17928 <__assert_fail@plt+0x6578>
   17988:	mov	r3, r0
   1798c:	mov	r0, r3
   17990:	sub	sp, fp, #4
   17994:	ldr	fp, [sp]
   17998:	add	sp, sp, #4
   1799c:	pop	{pc}		; (ldr pc, [sp], #4)
   179a0:	str	fp, [sp, #-8]!
   179a4:	str	lr, [sp, #4]
   179a8:	add	fp, sp, #4
   179ac:	sub	sp, sp, #16
   179b0:	str	r0, [fp, #-8]
   179b4:	ldr	r3, [fp, #-8]
   179b8:	mov	r2, #0
   179bc:	str	r2, [r3]
   179c0:	ldr	r3, [fp, #-8]
   179c4:	mov	r2, #0
   179c8:	str	r2, [r3, #4]
   179cc:	ldr	r3, [fp, #-8]
   179d0:	mov	r2, #0
   179d4:	str	r2, [r3, #8]
   179d8:	ldr	r3, [fp, #-8]
   179dc:	add	r0, r3, #12
   179e0:	movw	r3, #18928	; 0x49f0
   179e4:	movt	r3, #1
   179e8:	str	r3, [sp]
   179ec:	movw	r3, #37960	; 0x9448
   179f0:	movt	r3, #1
   179f4:	mov	r2, #0
   179f8:	mov	r1, #0
   179fc:	bl	19c5c <_obstack_begin@@Base>
   17a00:	ldr	r3, [fp, #-8]
   17a04:	add	r0, r3, #56	; 0x38
   17a08:	movw	r3, #18928	; 0x49f0
   17a0c:	movt	r3, #1
   17a10:	str	r3, [sp]
   17a14:	movw	r3, #37960	; 0x9448
   17a18:	movt	r3, #1
   17a1c:	mov	r2, #0
   17a20:	mov	r1, #0
   17a24:	bl	19c5c <_obstack_begin@@Base>
   17a28:	ldr	r3, [fp, #-8]
   17a2c:	add	r0, r3, #100	; 0x64
   17a30:	movw	r3, #18928	; 0x49f0
   17a34:	movt	r3, #1
   17a38:	str	r3, [sp]
   17a3c:	movw	r3, #37960	; 0x9448
   17a40:	movt	r3, #1
   17a44:	mov	r2, #0
   17a48:	mov	r1, #0
   17a4c:	bl	19c5c <_obstack_begin@@Base>
   17a50:	nop	{0}
   17a54:	sub	sp, fp, #4
   17a58:	ldr	fp, [sp]
   17a5c:	add	sp, sp, #4
   17a60:	pop	{pc}		; (ldr pc, [sp], #4)
   17a64:	str	fp, [sp, #-8]!
   17a68:	str	lr, [sp, #4]
   17a6c:	add	fp, sp, #4
   17a70:	sub	sp, sp, #32
   17a74:	str	r0, [fp, #-32]	; 0xffffffe0
   17a78:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a7c:	add	r3, r3, #12
   17a80:	str	r3, [fp, #-8]
   17a84:	mov	r3, #0
   17a88:	str	r3, [fp, #-12]
   17a8c:	ldr	r3, [fp, #-8]
   17a90:	ldr	r3, [r3, #4]
   17a94:	ldr	r2, [fp, #-12]
   17a98:	cmp	r2, r3
   17a9c:	bls	17ad4 <__assert_fail@plt+0x6724>
   17aa0:	ldr	r3, [fp, #-8]
   17aa4:	ldr	r3, [r3, #16]
   17aa8:	ldr	r2, [fp, #-12]
   17aac:	cmp	r2, r3
   17ab0:	bcs	17ad4 <__assert_fail@plt+0x6724>
   17ab4:	ldr	r3, [fp, #-8]
   17ab8:	ldr	r2, [fp, #-12]
   17abc:	str	r2, [r3, #8]
   17ac0:	ldr	r3, [fp, #-8]
   17ac4:	ldr	r2, [r3, #8]
   17ac8:	ldr	r3, [fp, #-8]
   17acc:	str	r2, [r3, #12]
   17ad0:	b	17ae0 <__assert_fail@plt+0x6730>
   17ad4:	ldr	r1, [fp, #-12]
   17ad8:	ldr	r0, [fp, #-8]
   17adc:	bl	1a00c <_obstack_free@@Base>
   17ae0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ae4:	add	r3, r3, #56	; 0x38
   17ae8:	str	r3, [fp, #-16]
   17aec:	mov	r3, #0
   17af0:	str	r3, [fp, #-20]	; 0xffffffec
   17af4:	ldr	r3, [fp, #-16]
   17af8:	ldr	r3, [r3, #4]
   17afc:	ldr	r2, [fp, #-20]	; 0xffffffec
   17b00:	cmp	r2, r3
   17b04:	bls	17b3c <__assert_fail@plt+0x678c>
   17b08:	ldr	r3, [fp, #-16]
   17b0c:	ldr	r3, [r3, #16]
   17b10:	ldr	r2, [fp, #-20]	; 0xffffffec
   17b14:	cmp	r2, r3
   17b18:	bcs	17b3c <__assert_fail@plt+0x678c>
   17b1c:	ldr	r3, [fp, #-16]
   17b20:	ldr	r2, [fp, #-20]	; 0xffffffec
   17b24:	str	r2, [r3, #8]
   17b28:	ldr	r3, [fp, #-16]
   17b2c:	ldr	r2, [r3, #8]
   17b30:	ldr	r3, [fp, #-16]
   17b34:	str	r2, [r3, #12]
   17b38:	b	17b48 <__assert_fail@plt+0x6798>
   17b3c:	ldr	r1, [fp, #-20]	; 0xffffffec
   17b40:	ldr	r0, [fp, #-16]
   17b44:	bl	1a00c <_obstack_free@@Base>
   17b48:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b4c:	add	r3, r3, #100	; 0x64
   17b50:	str	r3, [fp, #-24]	; 0xffffffe8
   17b54:	mov	r3, #0
   17b58:	str	r3, [fp, #-28]	; 0xffffffe4
   17b5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17b60:	ldr	r3, [r3, #4]
   17b64:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17b68:	cmp	r2, r3
   17b6c:	bls	17ba4 <__assert_fail@plt+0x67f4>
   17b70:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17b74:	ldr	r3, [r3, #16]
   17b78:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17b7c:	cmp	r2, r3
   17b80:	bcs	17ba4 <__assert_fail@plt+0x67f4>
   17b84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17b88:	ldr	r2, [fp, #-28]	; 0xffffffe4
   17b8c:	str	r2, [r3, #8]
   17b90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17b94:	ldr	r2, [r3, #8]
   17b98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17b9c:	str	r2, [r3, #12]
   17ba0:	b	17bb0 <__assert_fail@plt+0x6800>
   17ba4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17ba8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17bac:	bl	1a00c <_obstack_free@@Base>
   17bb0:	nop	{0}
   17bb4:	sub	sp, fp, #4
   17bb8:	ldr	fp, [sp]
   17bbc:	add	sp, sp, #4
   17bc0:	pop	{pc}		; (ldr pc, [sp], #4)
   17bc4:	str	fp, [sp, #-8]!
   17bc8:	str	lr, [sp, #4]
   17bcc:	add	fp, sp, #4
   17bd0:	sub	sp, sp, #56	; 0x38
   17bd4:	str	r0, [fp, #-56]	; 0xffffffc8
   17bd8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17bdc:	add	r3, r3, #12
   17be0:	str	r3, [fp, #-8]
   17be4:	ldr	r3, [fp, #-8]
   17be8:	ldr	r2, [r3, #12]
   17bec:	ldr	r3, [fp, #-8]
   17bf0:	ldr	r3, [r3, #8]
   17bf4:	sub	r3, r2, r3
   17bf8:	sub	r3, r3, #1
   17bfc:	str	r3, [fp, #-52]	; 0xffffffcc
   17c00:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17c04:	add	r3, r3, #12
   17c08:	str	r3, [fp, #-12]
   17c0c:	ldr	r3, [fp, #-12]
   17c10:	ldr	r3, [r3, #8]
   17c14:	str	r3, [fp, #-16]
   17c18:	ldr	r3, [fp, #-12]
   17c1c:	ldr	r3, [r3, #12]
   17c20:	ldr	r2, [fp, #-16]
   17c24:	cmp	r2, r3
   17c28:	bne	17c3c <__assert_fail@plt+0x688c>
   17c2c:	ldr	r2, [fp, #-12]
   17c30:	ldrb	r3, [r2, #40]	; 0x28
   17c34:	orr	r3, r3, #2
   17c38:	strb	r3, [r2, #40]	; 0x28
   17c3c:	ldr	r3, [fp, #-12]
   17c40:	ldr	r3, [r3, #12]
   17c44:	mov	r2, r3
   17c48:	ldr	r3, [fp, #-12]
   17c4c:	ldr	r3, [r3, #24]
   17c50:	add	r2, r2, r3
   17c54:	ldr	r3, [fp, #-12]
   17c58:	ldr	r3, [r3, #24]
   17c5c:	mvn	r3, r3
   17c60:	and	r3, r3, r2
   17c64:	mov	r2, r3
   17c68:	ldr	r3, [fp, #-12]
   17c6c:	str	r2, [r3, #12]
   17c70:	ldr	r3, [fp, #-12]
   17c74:	ldr	r2, [r3, #12]
   17c78:	ldr	r3, [fp, #-12]
   17c7c:	ldr	r3, [r3, #4]
   17c80:	sub	r3, r2, r3
   17c84:	mov	r1, r3
   17c88:	ldr	r3, [fp, #-12]
   17c8c:	ldr	r2, [r3, #16]
   17c90:	ldr	r3, [fp, #-12]
   17c94:	ldr	r3, [r3, #4]
   17c98:	sub	r3, r2, r3
   17c9c:	cmp	r1, r3
   17ca0:	bls	17cb4 <__assert_fail@plt+0x6904>
   17ca4:	ldr	r3, [fp, #-12]
   17ca8:	ldr	r2, [r3, #16]
   17cac:	ldr	r3, [fp, #-12]
   17cb0:	str	r2, [r3, #12]
   17cb4:	ldr	r3, [fp, #-12]
   17cb8:	ldr	r2, [r3, #12]
   17cbc:	ldr	r3, [fp, #-12]
   17cc0:	str	r2, [r3, #8]
   17cc4:	ldr	r3, [fp, #-16]
   17cc8:	str	r3, [fp, #-20]	; 0xffffffec
   17ccc:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17cd0:	add	r3, r3, #56	; 0x38
   17cd4:	str	r3, [fp, #-24]	; 0xffffffe8
   17cd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17cdc:	str	r3, [fp, #-28]	; 0xffffffe4
   17ce0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17ce4:	ldr	r2, [r3, #16]
   17ce8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17cec:	ldr	r3, [r3, #12]
   17cf0:	sub	r3, r2, r3
   17cf4:	cmp	r3, #3
   17cf8:	bhi	17d08 <__assert_fail@plt+0x6958>
   17cfc:	mov	r1, #4
   17d00:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17d04:	bl	19d48 <_obstack_newchunk@@Base>
   17d08:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17d0c:	str	r3, [fp, #-32]	; 0xffffffe0
   17d10:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d14:	ldr	r3, [r3, #12]
   17d18:	str	r3, [fp, #-36]	; 0xffffffdc
   17d1c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17d20:	ldr	r2, [fp, #-20]	; 0xffffffec
   17d24:	str	r2, [r3]
   17d28:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d2c:	ldr	r3, [r3, #12]
   17d30:	add	r2, r3, #4
   17d34:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17d38:	str	r2, [r3, #12]
   17d3c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17d40:	add	r3, r3, #100	; 0x64
   17d44:	str	r3, [fp, #-40]	; 0xffffffd8
   17d48:	mov	r3, #4
   17d4c:	str	r3, [fp, #-44]	; 0xffffffd4
   17d50:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17d54:	str	r3, [fp, #-48]	; 0xffffffd0
   17d58:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17d5c:	ldr	r2, [r3, #16]
   17d60:	ldr	r3, [fp, #-48]	; 0xffffffd0
   17d64:	ldr	r3, [r3, #12]
   17d68:	sub	r3, r2, r3
   17d6c:	mov	r2, r3
   17d70:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17d74:	cmp	r2, r3
   17d78:	bcs	17d88 <__assert_fail@plt+0x69d8>
   17d7c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   17d80:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17d84:	bl	19d48 <_obstack_newchunk@@Base>
   17d88:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17d8c:	ldr	r3, [r3, #12]
   17d90:	sub	r1, fp, #52	; 0x34
   17d94:	ldr	r2, [fp, #-44]	; 0xffffffd4
   17d98:	mov	r0, r3
   17d9c:	bl	1111c <memcpy@plt>
   17da0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17da4:	ldr	r2, [r3, #12]
   17da8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17dac:	add	r2, r2, r3
   17db0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17db4:	str	r2, [r3, #12]
   17db8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17dbc:	ldr	r3, [r3]
   17dc0:	add	r2, r3, #1
   17dc4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17dc8:	str	r2, [r3]
   17dcc:	nop	{0}
   17dd0:	sub	sp, fp, #4
   17dd4:	ldr	fp, [sp]
   17dd8:	add	sp, sp, #4
   17ddc:	pop	{pc}		; (ldr pc, [sp], #4)
   17de0:	str	fp, [sp, #-8]!
   17de4:	str	lr, [sp, #4]
   17de8:	add	fp, sp, #4
   17dec:	sub	sp, sp, #72	; 0x48
   17df0:	str	r0, [fp, #-72]	; 0xffffffb8
   17df4:	str	r1, [fp, #-76]	; 0xffffffb4
   17df8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17dfc:	bl	112fc <fgetc@plt>
   17e00:	str	r0, [fp, #-8]
   17e04:	ldr	r3, [fp, #-8]
   17e08:	cmn	r3, #1
   17e0c:	bne	17ea4 <__assert_fail@plt+0x6af4>
   17e10:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17e14:	add	r3, r3, #12
   17e18:	str	r3, [fp, #-12]
   17e1c:	ldr	r3, [fp, #-12]
   17e20:	ldr	r2, [r3, #12]
   17e24:	ldr	r3, [fp, #-12]
   17e28:	ldr	r3, [r3, #8]
   17e2c:	sub	r3, r2, r3
   17e30:	str	r3, [fp, #-16]
   17e34:	ldr	r3, [fp, #-16]
   17e38:	cmp	r3, #0
   17e3c:	beq	17f18 <__assert_fail@plt+0x6b68>
   17e40:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17e44:	add	r3, r3, #12
   17e48:	str	r3, [fp, #-20]	; 0xffffffec
   17e4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17e50:	str	r3, [fp, #-24]	; 0xffffffe8
   17e54:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17e58:	ldr	r2, [r3, #16]
   17e5c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17e60:	ldr	r3, [r3, #12]
   17e64:	sub	r3, r2, r3
   17e68:	cmp	r3, #0
   17e6c:	bne	17e7c <__assert_fail@plt+0x6acc>
   17e70:	mov	r1, #1
   17e74:	ldr	r0, [fp, #-20]	; 0xffffffec
   17e78:	bl	19d48 <_obstack_newchunk@@Base>
   17e7c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17e80:	ldr	r3, [r3, #12]
   17e84:	add	r1, r3, #1
   17e88:	ldr	r2, [fp, #-20]	; 0xffffffec
   17e8c:	str	r1, [r2, #12]
   17e90:	mov	r2, #0
   17e94:	strb	r2, [r3]
   17e98:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17e9c:	bl	17bc4 <__assert_fail@plt+0x6814>
   17ea0:	b	17f18 <__assert_fail@plt+0x6b68>
   17ea4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17ea8:	add	r3, r3, #12
   17eac:	str	r3, [fp, #-60]	; 0xffffffc4
   17eb0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17eb4:	str	r3, [fp, #-64]	; 0xffffffc0
   17eb8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17ebc:	ldr	r2, [r3, #16]
   17ec0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17ec4:	ldr	r3, [r3, #12]
   17ec8:	sub	r3, r2, r3
   17ecc:	cmp	r3, #0
   17ed0:	bne	17ee0 <__assert_fail@plt+0x6b30>
   17ed4:	mov	r1, #1
   17ed8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17edc:	bl	19d48 <_obstack_newchunk@@Base>
   17ee0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17ee4:	ldr	r3, [r3, #12]
   17ee8:	add	r1, r3, #1
   17eec:	ldr	r2, [fp, #-60]	; 0xffffffc4
   17ef0:	str	r1, [r2, #12]
   17ef4:	ldr	r2, [fp, #-8]
   17ef8:	uxtb	r2, r2
   17efc:	strb	r2, [r3]
   17f00:	ldr	r3, [fp, #-8]
   17f04:	cmp	r3, #0
   17f08:	bne	17df8 <__assert_fail@plt+0x6a48>
   17f0c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17f10:	bl	17bc4 <__assert_fail@plt+0x6814>
   17f14:	b	17df8 <__assert_fail@plt+0x6a48>
   17f18:	nop	{0}
   17f1c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17f20:	add	r3, r3, #56	; 0x38
   17f24:	str	r3, [fp, #-28]	; 0xffffffe4
   17f28:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17f2c:	str	r3, [fp, #-32]	; 0xffffffe0
   17f30:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17f34:	ldr	r2, [r3, #16]
   17f38:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17f3c:	ldr	r3, [r3, #12]
   17f40:	sub	r3, r2, r3
   17f44:	cmp	r3, #3
   17f48:	bhi	17f58 <__assert_fail@plt+0x6ba8>
   17f4c:	mov	r1, #4
   17f50:	ldr	r0, [fp, #-28]	; 0xffffffe4
   17f54:	bl	19d48 <_obstack_newchunk@@Base>
   17f58:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17f5c:	str	r3, [fp, #-36]	; 0xffffffdc
   17f60:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17f64:	ldr	r3, [r3, #12]
   17f68:	str	r3, [fp, #-40]	; 0xffffffd8
   17f6c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   17f70:	mov	r2, #0
   17f74:	str	r2, [r3]
   17f78:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17f7c:	ldr	r3, [r3, #12]
   17f80:	add	r2, r3, #4
   17f84:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17f88:	str	r2, [r3, #12]
   17f8c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17f90:	add	r3, r3, #56	; 0x38
   17f94:	str	r3, [fp, #-44]	; 0xffffffd4
   17f98:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17f9c:	ldr	r3, [r3, #8]
   17fa0:	str	r3, [fp, #-48]	; 0xffffffd0
   17fa4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17fa8:	ldr	r3, [r3, #12]
   17fac:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17fb0:	cmp	r2, r3
   17fb4:	bne	17fc8 <__assert_fail@plt+0x6c18>
   17fb8:	ldr	r2, [fp, #-44]	; 0xffffffd4
   17fbc:	ldrb	r3, [r2, #40]	; 0x28
   17fc0:	orr	r3, r3, #2
   17fc4:	strb	r3, [r2, #40]	; 0x28
   17fc8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17fcc:	ldr	r3, [r3, #12]
   17fd0:	mov	r2, r3
   17fd4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17fd8:	ldr	r3, [r3, #24]
   17fdc:	add	r2, r2, r3
   17fe0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17fe4:	ldr	r3, [r3, #24]
   17fe8:	mvn	r3, r3
   17fec:	and	r3, r3, r2
   17ff0:	mov	r2, r3
   17ff4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   17ff8:	str	r2, [r3, #12]
   17ffc:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18000:	ldr	r2, [r3, #12]
   18004:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18008:	ldr	r3, [r3, #4]
   1800c:	sub	r3, r2, r3
   18010:	mov	r1, r3
   18014:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18018:	ldr	r2, [r3, #16]
   1801c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18020:	ldr	r3, [r3, #4]
   18024:	sub	r3, r2, r3
   18028:	cmp	r1, r3
   1802c:	bls	18040 <__assert_fail@plt+0x6c90>
   18030:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18034:	ldr	r2, [r3, #16]
   18038:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1803c:	str	r2, [r3, #12]
   18040:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18044:	ldr	r2, [r3, #12]
   18048:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1804c:	str	r2, [r3, #8]
   18050:	ldr	r2, [fp, #-48]	; 0xffffffd0
   18054:	ldr	r3, [fp, #-76]	; 0xffffffb4
   18058:	str	r2, [r3, #4]
   1805c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   18060:	add	r3, r3, #100	; 0x64
   18064:	str	r3, [fp, #-52]	; 0xffffffcc
   18068:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1806c:	ldr	r3, [r3, #8]
   18070:	str	r3, [fp, #-56]	; 0xffffffc8
   18074:	ldr	r3, [fp, #-52]	; 0xffffffcc
   18078:	ldr	r3, [r3, #12]
   1807c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18080:	cmp	r2, r3
   18084:	bne	18098 <__assert_fail@plt+0x6ce8>
   18088:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1808c:	ldrb	r3, [r2, #40]	; 0x28
   18090:	orr	r3, r3, #2
   18094:	strb	r3, [r2, #40]	; 0x28
   18098:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1809c:	ldr	r3, [r3, #12]
   180a0:	mov	r2, r3
   180a4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   180a8:	ldr	r3, [r3, #24]
   180ac:	add	r2, r2, r3
   180b0:	ldr	r3, [fp, #-52]	; 0xffffffcc
   180b4:	ldr	r3, [r3, #24]
   180b8:	mvn	r3, r3
   180bc:	and	r3, r3, r2
   180c0:	mov	r2, r3
   180c4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   180c8:	str	r2, [r3, #12]
   180cc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   180d0:	ldr	r2, [r3, #12]
   180d4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   180d8:	ldr	r3, [r3, #4]
   180dc:	sub	r3, r2, r3
   180e0:	mov	r1, r3
   180e4:	ldr	r3, [fp, #-52]	; 0xffffffcc
   180e8:	ldr	r2, [r3, #16]
   180ec:	ldr	r3, [fp, #-52]	; 0xffffffcc
   180f0:	ldr	r3, [r3, #4]
   180f4:	sub	r3, r2, r3
   180f8:	cmp	r1, r3
   180fc:	bls	18110 <__assert_fail@plt+0x6d60>
   18100:	ldr	r3, [fp, #-52]	; 0xffffffcc
   18104:	ldr	r2, [r3, #16]
   18108:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1810c:	str	r2, [r3, #12]
   18110:	ldr	r3, [fp, #-52]	; 0xffffffcc
   18114:	ldr	r2, [r3, #12]
   18118:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1811c:	str	r2, [r3, #8]
   18120:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18124:	ldr	r3, [fp, #-76]	; 0xffffffb4
   18128:	str	r2, [r3, #8]
   1812c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   18130:	bl	11104 <ferror@plt>
   18134:	mov	r3, r0
   18138:	cmp	r3, #0
   1813c:	moveq	r3, #1
   18140:	movne	r3, #0
   18144:	uxtb	r3, r3
   18148:	mov	r0, r3
   1814c:	sub	sp, fp, #4
   18150:	ldr	fp, [sp]
   18154:	add	sp, sp, #4
   18158:	pop	{pc}		; (ldr pc, [sp], #4)
   1815c:	str	fp, [sp, #-8]!
   18160:	str	lr, [sp, #4]
   18164:	add	fp, sp, #4
   18168:	sub	sp, sp, #24
   1816c:	str	r0, [fp, #-16]
   18170:	str	r1, [fp, #-20]	; 0xffffffec
   18174:	str	r2, [fp, #-24]	; 0xffffffe8
   18178:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1817c:	ldr	r1, [fp, #-20]	; 0xffffffec
   18180:	ldr	r0, [fp, #-16]
   18184:	bl	110c8 <read@plt>
   18188:	str	r0, [fp, #-8]
   1818c:	ldr	r3, [fp, #-8]
   18190:	cmp	r3, #0
   18194:	blt	181a0 <__assert_fail@plt+0x6df0>
   18198:	ldr	r3, [fp, #-8]
   1819c:	b	181fc <__assert_fail@plt+0x6e4c>
   181a0:	bl	112c0 <__errno_location@plt>
   181a4:	mov	r3, r0
   181a8:	ldr	r3, [r3]
   181ac:	cmp	r3, #4
   181b0:	beq	181f4 <__assert_fail@plt+0x6e44>
   181b4:	bl	112c0 <__errno_location@plt>
   181b8:	mov	r3, r0
   181bc:	ldr	r3, [r3]
   181c0:	cmp	r3, #22
   181c4:	bne	181ec <__assert_fail@plt+0x6e3c>
   181c8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   181cc:	mov	r3, #0
   181d0:	movt	r3, #32752	; 0x7ff0
   181d4:	cmp	r2, r3
   181d8:	bls	181ec <__assert_fail@plt+0x6e3c>
   181dc:	mov	r3, #0
   181e0:	movt	r3, #32752	; 0x7ff0
   181e4:	str	r3, [fp, #-24]	; 0xffffffe8
   181e8:	b	181f8 <__assert_fail@plt+0x6e48>
   181ec:	ldr	r3, [fp, #-8]
   181f0:	b	181fc <__assert_fail@plt+0x6e4c>
   181f4:	nop	{0}
   181f8:	b	18178 <__assert_fail@plt+0x6dc8>
   181fc:	mov	r0, r3
   18200:	sub	sp, fp, #4
   18204:	ldr	fp, [sp]
   18208:	add	sp, sp, #4
   1820c:	pop	{pc}		; (ldr pc, [sp], #4)
   18210:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18214:	strd	r6, [sp, #8]
   18218:	str	fp, [sp, #16]
   1821c:	str	lr, [sp, #20]
   18220:	add	fp, sp, #20
   18224:	sub	sp, sp, #48	; 0x30
   18228:	str	r0, [fp, #-24]	; 0xffffffe8
   1822c:	str	r1, [fp, #-28]	; 0xffffffe4
   18230:	str	r2, [fp, #-32]	; 0xffffffe0
   18234:	str	r3, [fp, #-36]	; 0xffffffdc
   18238:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1823c:	cmp	r3, #0
   18240:	beq	18268 <__assert_fail@plt+0x6eb8>
   18244:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18248:	str	r3, [sp]
   1824c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18250:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18254:	movw	r1, #47376	; 0xb910
   18258:	movt	r1, #1
   1825c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18260:	bl	112a8 <fprintf@plt>
   18264:	b	18280 <__assert_fail@plt+0x6ed0>
   18268:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1826c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18270:	movw	r1, #47388	; 0xb91c
   18274:	movt	r1, #1
   18278:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1827c:	bl	112a8 <fprintf@plt>
   18280:	movw	r0, #47396	; 0xb924
   18284:	movt	r0, #1
   18288:	bl	11284 <gettext@plt>
   1828c:	mov	r2, r0
   18290:	movw	r3, #2022	; 0x7e6
   18294:	movw	r1, #48180	; 0xbc34
   18298:	movt	r1, #1
   1829c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   182a0:	bl	112a8 <fprintf@plt>
   182a4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   182a8:	mov	r0, #10
   182ac:	bl	11140 <fputc_unlocked@plt>
   182b0:	movw	r0, #47400	; 0xb928
   182b4:	movt	r0, #1
   182b8:	bl	11284 <gettext@plt>
   182bc:	mov	r3, r0
   182c0:	movw	r2, #47572	; 0xb9d4
   182c4:	movt	r2, #1
   182c8:	mov	r1, r3
   182cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   182d0:	bl	112a8 <fprintf@plt>
   182d4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   182d8:	mov	r0, #10
   182dc:	bl	11140 <fputc_unlocked@plt>
   182e0:	ldr	r3, [fp, #8]
   182e4:	cmp	r3, #9
   182e8:	ldrls	pc, [pc, r3, lsl #2]
   182ec:	b	186cc <__assert_fail@plt+0x731c>
   182f0:	andeq	r8, r1, r8, ror r7
   182f4:	andeq	r8, r1, r8, lsl r3
   182f8:	andeq	r8, r1, r0, asr #6
   182fc:	andeq	r8, r1, r0, ror r3
   18300:			; <UNDEFINED> instruction: 0x000183b4
   18304:	andeq	r8, r1, r0, lsl r4
   18308:	andeq	r8, r1, ip, ror r4
   1830c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18310:	andeq	r8, r1, r4, lsl #11
   18314:	andeq	r8, r1, r0, lsr #12
   18318:	movw	r0, #47608	; 0xb9f8
   1831c:	movt	r0, #1
   18320:	bl	11284 <gettext@plt>
   18324:	mov	r1, r0
   18328:	ldr	r3, [fp, #4]
   1832c:	ldr	r3, [r3]
   18330:	mov	r2, r3
   18334:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18338:	bl	112a8 <fprintf@plt>
   1833c:	b	1877c <__assert_fail@plt+0x73cc>
   18340:	movw	r0, #47624	; 0xba08
   18344:	movt	r0, #1
   18348:	bl	11284 <gettext@plt>
   1834c:	mov	r1, r0
   18350:	ldr	r3, [fp, #4]
   18354:	ldr	r2, [r3]
   18358:	ldr	r3, [fp, #4]
   1835c:	add	r3, r3, #4
   18360:	ldr	r3, [r3]
   18364:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18368:	bl	112a8 <fprintf@plt>
   1836c:	b	1877c <__assert_fail@plt+0x73cc>
   18370:	movw	r0, #47648	; 0xba20
   18374:	movt	r0, #1
   18378:	bl	11284 <gettext@plt>
   1837c:	ldr	r3, [fp, #4]
   18380:	ldr	r2, [r3]
   18384:	ldr	r3, [fp, #4]
   18388:	add	r3, r3, #4
   1838c:	ldr	r1, [r3]
   18390:	ldr	r3, [fp, #4]
   18394:	add	r3, r3, #8
   18398:	ldr	r3, [r3]
   1839c:	str	r3, [sp]
   183a0:	mov	r3, r1
   183a4:	mov	r1, r0
   183a8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   183ac:	bl	112a8 <fprintf@plt>
   183b0:	b	1877c <__assert_fail@plt+0x73cc>
   183b4:	movw	r0, #47676	; 0xba3c
   183b8:	movt	r0, #1
   183bc:	bl	11284 <gettext@plt>
   183c0:	mov	ip, r0
   183c4:	ldr	r3, [fp, #4]
   183c8:	ldr	r1, [r3]
   183cc:	ldr	r3, [fp, #4]
   183d0:	add	r3, r3, #4
   183d4:	ldr	r0, [r3]
   183d8:	ldr	r3, [fp, #4]
   183dc:	add	r3, r3, #8
   183e0:	ldr	r3, [r3]
   183e4:	ldr	r2, [fp, #4]
   183e8:	add	r2, r2, #12
   183ec:	ldr	r2, [r2]
   183f0:	str	r2, [sp, #4]
   183f4:	str	r3, [sp]
   183f8:	mov	r3, r0
   183fc:	mov	r2, r1
   18400:	mov	r1, ip
   18404:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18408:	bl	112a8 <fprintf@plt>
   1840c:	b	1877c <__assert_fail@plt+0x73cc>
   18410:	movw	r0, #47708	; 0xba5c
   18414:	movt	r0, #1
   18418:	bl	11284 <gettext@plt>
   1841c:	mov	lr, r0
   18420:	ldr	r3, [fp, #4]
   18424:	ldr	r0, [r3]
   18428:	ldr	r3, [fp, #4]
   1842c:	add	r3, r3, #4
   18430:	ldr	ip, [r3]
   18434:	ldr	r3, [fp, #4]
   18438:	add	r3, r3, #8
   1843c:	ldr	r3, [r3]
   18440:	ldr	r2, [fp, #4]
   18444:	add	r2, r2, #12
   18448:	ldr	r2, [r2]
   1844c:	ldr	r1, [fp, #4]
   18450:	add	r1, r1, #16
   18454:	ldr	r1, [r1]
   18458:	str	r1, [sp, #8]
   1845c:	str	r2, [sp, #4]
   18460:	str	r3, [sp]
   18464:	mov	r3, ip
   18468:	mov	r2, r0
   1846c:	mov	r1, lr
   18470:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18474:	bl	112a8 <fprintf@plt>
   18478:	b	1877c <__assert_fail@plt+0x73cc>
   1847c:	movw	r0, #47744	; 0xba80
   18480:	movt	r0, #1
   18484:	bl	11284 <gettext@plt>
   18488:	mov	r4, r0
   1848c:	ldr	r3, [fp, #4]
   18490:	ldr	ip, [r3]
   18494:	ldr	r3, [fp, #4]
   18498:	add	r3, r3, #4
   1849c:	ldr	lr, [r3]
   184a0:	ldr	r3, [fp, #4]
   184a4:	add	r3, r3, #8
   184a8:	ldr	r3, [r3]
   184ac:	ldr	r2, [fp, #4]
   184b0:	add	r2, r2, #12
   184b4:	ldr	r2, [r2]
   184b8:	ldr	r1, [fp, #4]
   184bc:	add	r1, r1, #16
   184c0:	ldr	r1, [r1]
   184c4:	ldr	r0, [fp, #4]
   184c8:	add	r0, r0, #20
   184cc:	ldr	r0, [r0]
   184d0:	str	r0, [sp, #12]
   184d4:	str	r1, [sp, #8]
   184d8:	str	r2, [sp, #4]
   184dc:	str	r3, [sp]
   184e0:	mov	r3, lr
   184e4:	mov	r2, ip
   184e8:	mov	r1, r4
   184ec:	ldr	r0, [fp, #-24]	; 0xffffffe8
   184f0:	bl	112a8 <fprintf@plt>
   184f4:	b	1877c <__assert_fail@plt+0x73cc>
   184f8:	movw	r0, #47784	; 0xbaa8
   184fc:	movt	r0, #1
   18500:	bl	11284 <gettext@plt>
   18504:	mov	r5, r0
   18508:	ldr	r3, [fp, #4]
   1850c:	ldr	lr, [r3]
   18510:	ldr	r3, [fp, #4]
   18514:	add	r3, r3, #4
   18518:	ldr	r4, [r3]
   1851c:	ldr	r3, [fp, #4]
   18520:	add	r3, r3, #8
   18524:	ldr	r3, [r3]
   18528:	ldr	r2, [fp, #4]
   1852c:	add	r2, r2, #12
   18530:	ldr	r2, [r2]
   18534:	ldr	r1, [fp, #4]
   18538:	add	r1, r1, #16
   1853c:	ldr	r1, [r1]
   18540:	ldr	r0, [fp, #4]
   18544:	add	r0, r0, #20
   18548:	ldr	r0, [r0]
   1854c:	ldr	ip, [fp, #4]
   18550:	add	ip, ip, #24
   18554:	ldr	ip, [ip]
   18558:	str	ip, [sp, #16]
   1855c:	str	r0, [sp, #12]
   18560:	str	r1, [sp, #8]
   18564:	str	r2, [sp, #4]
   18568:	str	r3, [sp]
   1856c:	mov	r3, r4
   18570:	mov	r2, lr
   18574:	mov	r1, r5
   18578:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1857c:	bl	112a8 <fprintf@plt>
   18580:	b	1877c <__assert_fail@plt+0x73cc>
   18584:	movw	r0, #47828	; 0xbad4
   18588:	movt	r0, #1
   1858c:	bl	11284 <gettext@plt>
   18590:	mov	r6, r0
   18594:	ldr	r3, [fp, #4]
   18598:	ldr	r4, [r3]
   1859c:	ldr	r3, [fp, #4]
   185a0:	add	r3, r3, #4
   185a4:	ldr	r5, [r3]
   185a8:	ldr	r3, [fp, #4]
   185ac:	add	r3, r3, #8
   185b0:	ldr	r3, [r3]
   185b4:	ldr	r2, [fp, #4]
   185b8:	add	r2, r2, #12
   185bc:	ldr	r2, [r2]
   185c0:	ldr	r1, [fp, #4]
   185c4:	add	r1, r1, #16
   185c8:	ldr	r1, [r1]
   185cc:	ldr	r0, [fp, #4]
   185d0:	add	r0, r0, #20
   185d4:	ldr	r0, [r0]
   185d8:	ldr	ip, [fp, #4]
   185dc:	add	ip, ip, #24
   185e0:	ldr	ip, [ip]
   185e4:	ldr	lr, [fp, #4]
   185e8:	add	lr, lr, #28
   185ec:	ldr	lr, [lr]
   185f0:	str	lr, [sp, #20]
   185f4:	str	ip, [sp, #16]
   185f8:	str	r0, [sp, #12]
   185fc:	str	r1, [sp, #8]
   18600:	str	r2, [sp, #4]
   18604:	str	r3, [sp]
   18608:	mov	r3, r5
   1860c:	mov	r2, r4
   18610:	mov	r1, r6
   18614:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18618:	bl	112a8 <fprintf@plt>
   1861c:	b	1877c <__assert_fail@plt+0x73cc>
   18620:	movw	r0, #47876	; 0xbb04
   18624:	movt	r0, #1
   18628:	bl	11284 <gettext@plt>
   1862c:	mov	r7, r0
   18630:	ldr	r3, [fp, #4]
   18634:	ldr	r5, [r3]
   18638:	ldr	r3, [fp, #4]
   1863c:	add	r3, r3, #4
   18640:	ldr	r6, [r3]
   18644:	ldr	r3, [fp, #4]
   18648:	add	r3, r3, #8
   1864c:	ldr	r3, [r3]
   18650:	ldr	r2, [fp, #4]
   18654:	add	r2, r2, #12
   18658:	ldr	r2, [r2]
   1865c:	ldr	r1, [fp, #4]
   18660:	add	r1, r1, #16
   18664:	ldr	r1, [r1]
   18668:	ldr	r0, [fp, #4]
   1866c:	add	r0, r0, #20
   18670:	ldr	r0, [r0]
   18674:	ldr	ip, [fp, #4]
   18678:	add	ip, ip, #24
   1867c:	ldr	ip, [ip]
   18680:	ldr	lr, [fp, #4]
   18684:	add	lr, lr, #28
   18688:	ldr	lr, [lr]
   1868c:	ldr	r4, [fp, #4]
   18690:	add	r4, r4, #32
   18694:	ldr	r4, [r4]
   18698:	str	r4, [sp, #24]
   1869c:	str	lr, [sp, #20]
   186a0:	str	ip, [sp, #16]
   186a4:	str	r0, [sp, #12]
   186a8:	str	r1, [sp, #8]
   186ac:	str	r2, [sp, #4]
   186b0:	str	r3, [sp]
   186b4:	mov	r3, r6
   186b8:	mov	r2, r5
   186bc:	mov	r1, r7
   186c0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   186c4:	bl	112a8 <fprintf@plt>
   186c8:	b	1877c <__assert_fail@plt+0x73cc>
   186cc:	movw	r0, #47928	; 0xbb38
   186d0:	movt	r0, #1
   186d4:	bl	11284 <gettext@plt>
   186d8:	mov	r7, r0
   186dc:	ldr	r3, [fp, #4]
   186e0:	ldr	r5, [r3]
   186e4:	ldr	r3, [fp, #4]
   186e8:	add	r3, r3, #4
   186ec:	ldr	r6, [r3]
   186f0:	ldr	r3, [fp, #4]
   186f4:	add	r3, r3, #8
   186f8:	ldr	r3, [r3]
   186fc:	ldr	r2, [fp, #4]
   18700:	add	r2, r2, #12
   18704:	ldr	r2, [r2]
   18708:	ldr	r1, [fp, #4]
   1870c:	add	r1, r1, #16
   18710:	ldr	r1, [r1]
   18714:	ldr	r0, [fp, #4]
   18718:	add	r0, r0, #20
   1871c:	ldr	r0, [r0]
   18720:	ldr	ip, [fp, #4]
   18724:	add	ip, ip, #24
   18728:	ldr	ip, [ip]
   1872c:	ldr	lr, [fp, #4]
   18730:	add	lr, lr, #28
   18734:	ldr	lr, [lr]
   18738:	ldr	r4, [fp, #4]
   1873c:	add	r4, r4, #32
   18740:	ldr	r4, [r4]
   18744:	str	r4, [sp, #24]
   18748:	str	lr, [sp, #20]
   1874c:	str	ip, [sp, #16]
   18750:	str	r0, [sp, #12]
   18754:	str	r1, [sp, #8]
   18758:	str	r2, [sp, #4]
   1875c:	str	r3, [sp]
   18760:	mov	r3, r6
   18764:	mov	r2, r5
   18768:	mov	r1, r7
   1876c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   18770:	bl	112a8 <fprintf@plt>
   18774:	b	1877c <__assert_fail@plt+0x73cc>
   18778:	nop	{0}
   1877c:	nop	{0}
   18780:	sub	sp, fp, #20
   18784:	ldrd	r4, [sp]
   18788:	ldrd	r6, [sp, #8]
   1878c:	ldr	fp, [sp, #16]
   18790:	add	sp, sp, #20
   18794:	pop	{pc}		; (ldr pc, [sp], #4)
   18798:	str	fp, [sp, #-8]!
   1879c:	str	lr, [sp, #4]
   187a0:	add	fp, sp, #4
   187a4:	sub	sp, sp, #32
   187a8:	str	r0, [fp, #-16]
   187ac:	str	r1, [fp, #-20]	; 0xffffffec
   187b0:	str	r2, [fp, #-24]	; 0xffffffe8
   187b4:	str	r3, [fp, #-28]	; 0xffffffe4
   187b8:	mov	r3, #0
   187bc:	str	r3, [fp, #-8]
   187c0:	b	187d0 <__assert_fail@plt+0x7420>
   187c4:	ldr	r3, [fp, #-8]
   187c8:	add	r3, r3, #1
   187cc:	str	r3, [fp, #-8]
   187d0:	ldr	r3, [fp, #-8]
   187d4:	lsl	r3, r3, #2
   187d8:	ldr	r2, [fp, #4]
   187dc:	add	r3, r2, r3
   187e0:	ldr	r3, [r3]
   187e4:	cmp	r3, #0
   187e8:	bne	187c4 <__assert_fail@plt+0x7414>
   187ec:	ldr	r3, [fp, #-8]
   187f0:	str	r3, [sp, #4]
   187f4:	ldr	r3, [fp, #4]
   187f8:	str	r3, [sp]
   187fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18800:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18804:	ldr	r1, [fp, #-20]	; 0xffffffec
   18808:	ldr	r0, [fp, #-16]
   1880c:	bl	18210 <__assert_fail@plt+0x6e60>
   18810:	nop	{0}
   18814:	sub	sp, fp, #4
   18818:	ldr	fp, [sp]
   1881c:	add	sp, sp, #4
   18820:	pop	{pc}		; (ldr pc, [sp], #4)
   18824:	str	fp, [sp, #-8]!
   18828:	str	lr, [sp, #4]
   1882c:	add	fp, sp, #4
   18830:	sub	sp, sp, #72	; 0x48
   18834:	str	r0, [fp, #-56]	; 0xffffffc8
   18838:	str	r1, [fp, #-60]	; 0xffffffc4
   1883c:	str	r2, [fp, #-64]	; 0xffffffc0
   18840:	str	r3, [fp, #-68]	; 0xffffffbc
   18844:	mov	r3, #0
   18848:	str	r3, [fp, #-8]
   1884c:	b	1885c <__assert_fail@plt+0x74ac>
   18850:	ldr	r3, [fp, #-8]
   18854:	add	r3, r3, #1
   18858:	str	r3, [fp, #-8]
   1885c:	ldr	r3, [fp, #-8]
   18860:	cmp	r3, #9
   18864:	bhi	188a8 <__assert_fail@plt+0x74f8>
   18868:	ldr	r3, [fp, #4]
   1886c:	add	r2, r3, #4
   18870:	str	r2, [fp, #4]
   18874:	ldr	r2, [r3]
   18878:	ldr	r3, [fp, #-8]
   1887c:	lsl	r3, r3, #2
   18880:	sub	r1, fp, #4
   18884:	add	r3, r1, r3
   18888:	str	r2, [r3, #-44]	; 0xffffffd4
   1888c:	ldr	r3, [fp, #-8]
   18890:	lsl	r3, r3, #2
   18894:	sub	r2, fp, #4
   18898:	add	r3, r2, r3
   1889c:	ldr	r3, [r3, #-44]	; 0xffffffd4
   188a0:	cmp	r3, #0
   188a4:	bne	18850 <__assert_fail@plt+0x74a0>
   188a8:	ldr	r3, [fp, #-8]
   188ac:	str	r3, [sp, #4]
   188b0:	sub	r3, fp, #48	; 0x30
   188b4:	str	r3, [sp]
   188b8:	ldr	r3, [fp, #-68]	; 0xffffffbc
   188bc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   188c0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   188c4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   188c8:	bl	18210 <__assert_fail@plt+0x6e60>
   188cc:	nop	{0}
   188d0:	sub	sp, fp, #4
   188d4:	ldr	fp, [sp]
   188d8:	add	sp, sp, #4
   188dc:	pop	{pc}		; (ldr pc, [sp], #4)
   188e0:	push	{r3}		; (str r3, [sp, #-4]!)
   188e4:	str	fp, [sp, #-8]!
   188e8:	str	lr, [sp, #4]
   188ec:	add	fp, sp, #4
   188f0:	sub	sp, sp, #36	; 0x24
   188f4:	str	r0, [fp, #-20]	; 0xffffffec
   188f8:	str	r1, [fp, #-24]	; 0xffffffe8
   188fc:	str	r2, [fp, #-28]	; 0xffffffe4
   18900:	add	r3, fp, #8
   18904:	str	r3, [fp, #-12]
   18908:	ldr	r3, [fp, #-12]
   1890c:	str	r3, [sp]
   18910:	ldr	r3, [fp, #4]
   18914:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18918:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1891c:	ldr	r0, [fp, #-20]	; 0xffffffec
   18920:	bl	18824 <__assert_fail@plt+0x7474>
   18924:	nop	{0}
   18928:	sub	sp, fp, #4
   1892c:	ldr	fp, [sp]
   18930:	ldr	lr, [sp, #4]
   18934:	add	sp, sp, #8
   18938:	add	sp, sp, #4
   1893c:	bx	lr
   18940:	str	fp, [sp, #-8]!
   18944:	str	lr, [sp, #4]
   18948:	add	fp, sp, #4
   1894c:	movw	r3, #49564	; 0xc19c
   18950:	movt	r3, #2
   18954:	ldr	r3, [r3]
   18958:	mov	r1, r3
   1895c:	mov	r0, #10
   18960:	bl	11140 <fputc_unlocked@plt>
   18964:	movw	r0, #47988	; 0xbb74
   18968:	movt	r0, #1
   1896c:	bl	11284 <gettext@plt>
   18970:	mov	r3, r0
   18974:	movw	r1, #48008	; 0xbb88
   18978:	movt	r1, #1
   1897c:	mov	r0, r3
   18980:	bl	110bc <printf@plt>
   18984:	movw	r0, #48032	; 0xbba0
   18988:	movt	r0, #1
   1898c:	bl	11284 <gettext@plt>
   18990:	mov	r3, r0
   18994:	movw	r2, #48052	; 0xbbb4
   18998:	movt	r2, #1
   1899c:	movw	r1, #48092	; 0xbbdc
   189a0:	movt	r1, #1
   189a4:	mov	r0, r3
   189a8:	bl	110bc <printf@plt>
   189ac:	movw	r0, #48108	; 0xbbec
   189b0:	movt	r0, #1
   189b4:	bl	11284 <gettext@plt>
   189b8:	mov	r3, r0
   189bc:	movw	r1, #48148	; 0xbc14
   189c0:	movt	r1, #1
   189c4:	mov	r0, r3
   189c8:	bl	110bc <printf@plt>
   189cc:	nop	{0}
   189d0:	sub	sp, fp, #4
   189d4:	ldr	fp, [sp]
   189d8:	add	sp, sp, #4
   189dc:	pop	{pc}		; (ldr pc, [sp], #4)
   189e0:	str	fp, [sp, #-8]!
   189e4:	str	lr, [sp, #4]
   189e8:	add	fp, sp, #4
   189ec:	sub	sp, sp, #16
   189f0:	str	r0, [fp, #-8]
   189f4:	str	r1, [fp, #-12]
   189f8:	str	r2, [fp, #-16]
   189fc:	ldr	r2, [fp, #-16]
   18a00:	ldr	r1, [fp, #-12]
   18a04:	ldr	r0, [fp, #-8]
   18a08:	bl	18bc4 <__assert_fail@plt+0x7814>
   18a0c:	mov	r3, r0
   18a10:	mov	r0, r3
   18a14:	sub	sp, fp, #4
   18a18:	ldr	fp, [sp]
   18a1c:	add	sp, sp, #4
   18a20:	pop	{pc}		; (ldr pc, [sp], #4)
   18a24:	str	fp, [sp, #-8]!
   18a28:	str	lr, [sp, #4]
   18a2c:	add	fp, sp, #4
   18a30:	sub	sp, sp, #8
   18a34:	str	r0, [fp, #-8]
   18a38:	ldr	r3, [fp, #-8]
   18a3c:	cmp	r3, #0
   18a40:	bne	18a48 <__assert_fail@plt+0x7698>
   18a44:	bl	192d4 <__assert_fail@plt+0x7f24>
   18a48:	ldr	r3, [fp, #-8]
   18a4c:	mov	r0, r3
   18a50:	sub	sp, fp, #4
   18a54:	ldr	fp, [sp]
   18a58:	add	sp, sp, #4
   18a5c:	pop	{pc}		; (ldr pc, [sp], #4)
   18a60:	str	fp, [sp, #-8]!
   18a64:	str	lr, [sp, #4]
   18a68:	add	fp, sp, #4
   18a6c:	sub	sp, sp, #8
   18a70:	str	r0, [fp, #-8]
   18a74:	ldr	r0, [fp, #-8]
   18a78:	bl	19448 <__assert_fail@plt+0x8098>
   18a7c:	mov	r3, r0
   18a80:	mov	r0, r3
   18a84:	bl	18a24 <__assert_fail@plt+0x7674>
   18a88:	mov	r3, r0
   18a8c:	mov	r0, r3
   18a90:	sub	sp, fp, #4
   18a94:	ldr	fp, [sp]
   18a98:	add	sp, sp, #4
   18a9c:	pop	{pc}		; (ldr pc, [sp], #4)
   18aa0:	str	fp, [sp, #-8]!
   18aa4:	str	lr, [sp, #4]
   18aa8:	add	fp, sp, #4
   18aac:	sub	sp, sp, #8
   18ab0:	str	r0, [fp, #-8]
   18ab4:	ldr	r0, [fp, #-8]
   18ab8:	bl	1985c <__assert_fail@plt+0x84ac>
   18abc:	mov	r3, r0
   18ac0:	mov	r0, r3
   18ac4:	bl	18a24 <__assert_fail@plt+0x7674>
   18ac8:	mov	r3, r0
   18acc:	mov	r0, r3
   18ad0:	sub	sp, fp, #4
   18ad4:	ldr	fp, [sp]
   18ad8:	add	sp, sp, #4
   18adc:	pop	{pc}		; (ldr pc, [sp], #4)
   18ae0:	str	fp, [sp, #-8]!
   18ae4:	str	lr, [sp, #4]
   18ae8:	add	fp, sp, #4
   18aec:	sub	sp, sp, #8
   18af0:	str	r0, [fp, #-8]
   18af4:	ldr	r0, [fp, #-8]
   18af8:	bl	18a60 <__assert_fail@plt+0x76b0>
   18afc:	mov	r3, r0
   18b00:	mov	r0, r3
   18b04:	sub	sp, fp, #4
   18b08:	ldr	fp, [sp]
   18b0c:	add	sp, sp, #4
   18b10:	pop	{pc}		; (ldr pc, [sp], #4)
   18b14:	str	fp, [sp, #-8]!
   18b18:	str	lr, [sp, #4]
   18b1c:	add	fp, sp, #4
   18b20:	sub	sp, sp, #16
   18b24:	str	r0, [fp, #-16]
   18b28:	str	r1, [fp, #-20]	; 0xffffffec
   18b2c:	ldr	r1, [fp, #-20]	; 0xffffffec
   18b30:	ldr	r0, [fp, #-16]
   18b34:	bl	194d8 <__assert_fail@plt+0x8128>
   18b38:	str	r0, [fp, #-8]
   18b3c:	ldr	r3, [fp, #-8]
   18b40:	cmp	r3, #0
   18b44:	bne	18b64 <__assert_fail@plt+0x77b4>
   18b48:	ldr	r3, [fp, #-16]
   18b4c:	cmp	r3, #0
   18b50:	beq	18b60 <__assert_fail@plt+0x77b0>
   18b54:	ldr	r3, [fp, #-20]	; 0xffffffec
   18b58:	cmp	r3, #0
   18b5c:	beq	18b64 <__assert_fail@plt+0x77b4>
   18b60:	bl	192d4 <__assert_fail@plt+0x7f24>
   18b64:	ldr	r3, [fp, #-8]
   18b68:	mov	r0, r3
   18b6c:	sub	sp, fp, #4
   18b70:	ldr	fp, [sp]
   18b74:	add	sp, sp, #4
   18b78:	pop	{pc}		; (ldr pc, [sp], #4)
   18b7c:	str	fp, [sp, #-8]!
   18b80:	str	lr, [sp, #4]
   18b84:	add	fp, sp, #4
   18b88:	sub	sp, sp, #8
   18b8c:	str	r0, [fp, #-8]
   18b90:	str	r1, [fp, #-12]
   18b94:	ldr	r1, [fp, #-12]
   18b98:	ldr	r0, [fp, #-8]
   18b9c:	bl	19894 <__assert_fail@plt+0x84e4>
   18ba0:	mov	r3, r0
   18ba4:	mov	r0, r3
   18ba8:	bl	18a24 <__assert_fail@plt+0x7674>
   18bac:	mov	r3, r0
   18bb0:	mov	r0, r3
   18bb4:	sub	sp, fp, #4
   18bb8:	ldr	fp, [sp]
   18bbc:	add	sp, sp, #4
   18bc0:	pop	{pc}		; (ldr pc, [sp], #4)
   18bc4:	str	fp, [sp, #-8]!
   18bc8:	str	lr, [sp, #4]
   18bcc:	add	fp, sp, #4
   18bd0:	sub	sp, sp, #24
   18bd4:	str	r0, [fp, #-16]
   18bd8:	str	r1, [fp, #-20]	; 0xffffffec
   18bdc:	str	r2, [fp, #-24]	; 0xffffffe8
   18be0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18be4:	ldr	r1, [fp, #-20]	; 0xffffffec
   18be8:	ldr	r0, [fp, #-16]
   18bec:	bl	1a1c8 <_obstack_memory_used@@Base+0xc8>
   18bf0:	str	r0, [fp, #-8]
   18bf4:	ldr	r3, [fp, #-8]
   18bf8:	cmp	r3, #0
   18bfc:	bne	18c28 <__assert_fail@plt+0x7878>
   18c00:	ldr	r3, [fp, #-16]
   18c04:	cmp	r3, #0
   18c08:	beq	18c24 <__assert_fail@plt+0x7874>
   18c0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18c10:	cmp	r3, #0
   18c14:	beq	18c28 <__assert_fail@plt+0x7878>
   18c18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18c1c:	cmp	r3, #0
   18c20:	beq	18c28 <__assert_fail@plt+0x7878>
   18c24:	bl	192d4 <__assert_fail@plt+0x7f24>
   18c28:	ldr	r3, [fp, #-8]
   18c2c:	mov	r0, r3
   18c30:	sub	sp, fp, #4
   18c34:	ldr	fp, [sp]
   18c38:	add	sp, sp, #4
   18c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   18c40:	str	fp, [sp, #-8]!
   18c44:	str	lr, [sp, #4]
   18c48:	add	fp, sp, #4
   18c4c:	sub	sp, sp, #16
   18c50:	str	r0, [fp, #-8]
   18c54:	str	r1, [fp, #-12]
   18c58:	str	r2, [fp, #-16]
   18c5c:	ldr	r2, [fp, #-16]
   18c60:	ldr	r1, [fp, #-12]
   18c64:	ldr	r0, [fp, #-8]
   18c68:	bl	19934 <__assert_fail@plt+0x8584>
   18c6c:	mov	r3, r0
   18c70:	mov	r0, r3
   18c74:	bl	18a24 <__assert_fail@plt+0x7674>
   18c78:	mov	r3, r0
   18c7c:	mov	r0, r3
   18c80:	sub	sp, fp, #4
   18c84:	ldr	fp, [sp]
   18c88:	add	sp, sp, #4
   18c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   18c90:	str	fp, [sp, #-8]!
   18c94:	str	lr, [sp, #4]
   18c98:	add	fp, sp, #4
   18c9c:	sub	sp, sp, #8
   18ca0:	str	r0, [fp, #-8]
   18ca4:	str	r1, [fp, #-12]
   18ca8:	ldr	r2, [fp, #-12]
   18cac:	ldr	r1, [fp, #-8]
   18cb0:	mov	r0, #0
   18cb4:	bl	18bc4 <__assert_fail@plt+0x7814>
   18cb8:	mov	r3, r0
   18cbc:	mov	r0, r3
   18cc0:	sub	sp, fp, #4
   18cc4:	ldr	fp, [sp]
   18cc8:	add	sp, sp, #4
   18ccc:	pop	{pc}		; (ldr pc, [sp], #4)
   18cd0:	str	fp, [sp, #-8]!
   18cd4:	str	lr, [sp, #4]
   18cd8:	add	fp, sp, #4
   18cdc:	sub	sp, sp, #8
   18ce0:	str	r0, [fp, #-8]
   18ce4:	str	r1, [fp, #-12]
   18ce8:	ldr	r2, [fp, #-12]
   18cec:	ldr	r1, [fp, #-8]
   18cf0:	mov	r0, #0
   18cf4:	bl	18c40 <__assert_fail@plt+0x7890>
   18cf8:	mov	r3, r0
   18cfc:	mov	r0, r3
   18d00:	sub	sp, fp, #4
   18d04:	ldr	fp, [sp]
   18d08:	add	sp, sp, #4
   18d0c:	pop	{pc}		; (ldr pc, [sp], #4)
   18d10:	str	fp, [sp, #-8]!
   18d14:	str	lr, [sp, #4]
   18d18:	add	fp, sp, #4
   18d1c:	sub	sp, sp, #8
   18d20:	str	r0, [fp, #-8]
   18d24:	str	r1, [fp, #-12]
   18d28:	mov	r2, #1
   18d2c:	ldr	r1, [fp, #-12]
   18d30:	ldr	r0, [fp, #-8]
   18d34:	bl	18d50 <__assert_fail@plt+0x79a0>
   18d38:	mov	r3, r0
   18d3c:	mov	r0, r3
   18d40:	sub	sp, fp, #4
   18d44:	ldr	fp, [sp]
   18d48:	add	sp, sp, #4
   18d4c:	pop	{pc}		; (ldr pc, [sp], #4)
   18d50:	str	fp, [sp, #-8]!
   18d54:	str	lr, [sp, #4]
   18d58:	add	fp, sp, #4
   18d5c:	sub	sp, sp, #24
   18d60:	str	r0, [fp, #-16]
   18d64:	str	r1, [fp, #-20]	; 0xffffffec
   18d68:	str	r2, [fp, #-24]	; 0xffffffe8
   18d6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18d70:	ldr	r3, [r3]
   18d74:	str	r3, [fp, #-8]
   18d78:	ldr	r3, [fp, #-16]
   18d7c:	cmp	r3, #0
   18d80:	bne	18dc8 <__assert_fail@plt+0x7a18>
   18d84:	ldr	r3, [fp, #-8]
   18d88:	cmp	r3, #0
   18d8c:	bne	18e04 <__assert_fail@plt+0x7a54>
   18d90:	mov	r2, #64	; 0x40
   18d94:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18d98:	udiv	r3, r2, r3
   18d9c:	str	r3, [fp, #-8]
   18da0:	ldr	r3, [fp, #-8]
   18da4:	cmp	r3, #0
   18da8:	moveq	r3, #1
   18dac:	movne	r3, #0
   18db0:	uxtb	r3, r3
   18db4:	mov	r2, r3
   18db8:	ldr	r3, [fp, #-8]
   18dbc:	add	r3, r2, r3
   18dc0:	str	r3, [fp, #-8]
   18dc4:	b	18e04 <__assert_fail@plt+0x7a54>
   18dc8:	ldr	r2, [fp, #-8]
   18dcc:	ldr	r3, [fp, #-8]
   18dd0:	lsr	r3, r3, #1
   18dd4:	add	r3, r3, #1
   18dd8:	mov	r1, #0
   18ddc:	adds	r3, r2, r3
   18de0:	bcc	18de8 <__assert_fail@plt+0x7a38>
   18de4:	mov	r1, #1
   18de8:	str	r3, [fp, #-8]
   18dec:	mov	r3, r1
   18df0:	and	r3, r3, #1
   18df4:	uxtb	r3, r3
   18df8:	cmp	r3, #0
   18dfc:	beq	18e04 <__assert_fail@plt+0x7a54>
   18e00:	bl	192d4 <__assert_fail@plt+0x7f24>
   18e04:	ldr	r3, [fp, #-8]
   18e08:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18e0c:	mov	r1, r3
   18e10:	ldr	r0, [fp, #-16]
   18e14:	bl	18bc4 <__assert_fail@plt+0x7814>
   18e18:	str	r0, [fp, #-16]
   18e1c:	ldr	r2, [fp, #-8]
   18e20:	ldr	r3, [fp, #-20]	; 0xffffffec
   18e24:	str	r2, [r3]
   18e28:	ldr	r3, [fp, #-16]
   18e2c:	mov	r0, r3
   18e30:	sub	sp, fp, #4
   18e34:	ldr	fp, [sp]
   18e38:	add	sp, sp, #4
   18e3c:	pop	{pc}		; (ldr pc, [sp], #4)
   18e40:	str	fp, [sp, #-8]!
   18e44:	str	lr, [sp, #4]
   18e48:	add	fp, sp, #4
   18e4c:	sub	sp, sp, #32
   18e50:	str	r0, [fp, #-24]	; 0xffffffe8
   18e54:	str	r1, [fp, #-28]	; 0xffffffe4
   18e58:	str	r2, [fp, #-32]	; 0xffffffe0
   18e5c:	str	r3, [fp, #-36]	; 0xffffffdc
   18e60:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18e64:	ldr	r3, [r3]
   18e68:	str	r3, [fp, #-8]
   18e6c:	ldr	r3, [fp, #-8]
   18e70:	asr	r3, r3, #1
   18e74:	mov	r1, #0
   18e78:	ldr	r2, [fp, #-8]
   18e7c:	adds	r3, r2, r3
   18e80:	bvc	18e88 <__assert_fail@plt+0x7ad8>
   18e84:	mov	r1, #1
   18e88:	str	r3, [fp, #-16]
   18e8c:	mov	r3, r1
   18e90:	and	r3, r3, #1
   18e94:	uxtb	r3, r3
   18e98:	cmp	r3, #0
   18e9c:	beq	18ea8 <__assert_fail@plt+0x7af8>
   18ea0:	mvn	r3, #-2147483648	; 0x80000000
   18ea4:	str	r3, [fp, #-16]
   18ea8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18eac:	cmp	r3, #0
   18eb0:	blt	18ecc <__assert_fail@plt+0x7b1c>
   18eb4:	ldr	r3, [fp, #-16]
   18eb8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   18ebc:	cmp	r2, r3
   18ec0:	bge	18ecc <__assert_fail@plt+0x7b1c>
   18ec4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18ec8:	str	r3, [fp, #-16]
   18ecc:	ldr	r2, [fp, #-16]
   18ed0:	mov	lr, #0
   18ed4:	ldr	r3, [fp, #4]
   18ed8:	smull	r2, r3, r2, r3
   18edc:	mov	r0, #0
   18ee0:	mov	r1, #0
   18ee4:	mov	r0, r3
   18ee8:	asr	r1, r3, #31
   18eec:	asr	ip, r2, #31
   18ef0:	cmp	ip, r0
   18ef4:	beq	18efc <__assert_fail@plt+0x7b4c>
   18ef8:	mov	lr, #1
   18efc:	mov	r3, r2
   18f00:	str	r3, [fp, #-20]	; 0xffffffec
   18f04:	mov	r3, lr
   18f08:	and	r3, r3, #1
   18f0c:	uxtb	r3, r3
   18f10:	cmp	r3, #0
   18f14:	beq	18f20 <__assert_fail@plt+0x7b70>
   18f18:	mvn	r3, #-2147483648	; 0x80000000
   18f1c:	b	18f38 <__assert_fail@plt+0x7b88>
   18f20:	ldr	r3, [fp, #-20]	; 0xffffffec
   18f24:	cmp	r3, #63	; 0x3f
   18f28:	bgt	18f34 <__assert_fail@plt+0x7b84>
   18f2c:	mov	r3, #64	; 0x40
   18f30:	b	18f38 <__assert_fail@plt+0x7b88>
   18f34:	mov	r3, #0
   18f38:	str	r3, [fp, #-12]
   18f3c:	ldr	r3, [fp, #-12]
   18f40:	cmp	r3, #0
   18f44:	beq	18f7c <__assert_fail@plt+0x7bcc>
   18f48:	ldr	r2, [fp, #-12]
   18f4c:	ldr	r3, [fp, #4]
   18f50:	sdiv	r3, r2, r3
   18f54:	str	r3, [fp, #-16]
   18f58:	ldr	r3, [fp, #-12]
   18f5c:	ldr	r2, [fp, #4]
   18f60:	sdiv	r2, r3, r2
   18f64:	ldr	r1, [fp, #4]
   18f68:	mul	r2, r1, r2
   18f6c:	sub	r3, r3, r2
   18f70:	ldr	r2, [fp, #-12]
   18f74:	sub	r3, r2, r3
   18f78:	str	r3, [fp, #-20]	; 0xffffffec
   18f7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18f80:	cmp	r3, #0
   18f84:	bne	18f94 <__assert_fail@plt+0x7be4>
   18f88:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18f8c:	mov	r2, #0
   18f90:	str	r2, [r3]
   18f94:	ldr	r2, [fp, #-16]
   18f98:	ldr	r3, [fp, #-8]
   18f9c:	sub	r3, r2, r3
   18fa0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18fa4:	cmp	r2, r3
   18fa8:	ble	19048 <__assert_fail@plt+0x7c98>
   18fac:	mov	r1, #0
   18fb0:	ldr	r2, [fp, #-8]
   18fb4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18fb8:	adds	r3, r2, r3
   18fbc:	bvc	18fc4 <__assert_fail@plt+0x7c14>
   18fc0:	mov	r1, #1
   18fc4:	str	r3, [fp, #-16]
   18fc8:	mov	r3, r1
   18fcc:	and	r3, r3, #1
   18fd0:	uxtb	r3, r3
   18fd4:	cmp	r3, #0
   18fd8:	bne	19044 <__assert_fail@plt+0x7c94>
   18fdc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   18fe0:	cmp	r3, #0
   18fe4:	blt	18ff8 <__assert_fail@plt+0x7c48>
   18fe8:	ldr	r3, [fp, #-16]
   18fec:	ldr	r2, [fp, #-36]	; 0xffffffdc
   18ff0:	cmp	r2, r3
   18ff4:	blt	19044 <__assert_fail@plt+0x7c94>
   18ff8:	ldr	r2, [fp, #-16]
   18ffc:	mov	lr, #0
   19000:	ldr	r3, [fp, #4]
   19004:	smull	r2, r3, r2, r3
   19008:	mov	r0, #0
   1900c:	mov	r1, #0
   19010:	mov	r0, r3
   19014:	asr	r1, r3, #31
   19018:	asr	ip, r2, #31
   1901c:	cmp	ip, r0
   19020:	beq	19028 <__assert_fail@plt+0x7c78>
   19024:	mov	lr, #1
   19028:	mov	r3, r2
   1902c:	str	r3, [fp, #-20]	; 0xffffffec
   19030:	mov	r3, lr
   19034:	and	r3, r3, #1
   19038:	uxtb	r3, r3
   1903c:	cmp	r3, #0
   19040:	beq	19048 <__assert_fail@plt+0x7c98>
   19044:	bl	192d4 <__assert_fail@plt+0x7f24>
   19048:	ldr	r3, [fp, #-20]	; 0xffffffec
   1904c:	mov	r1, r3
   19050:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19054:	bl	18b14 <__assert_fail@plt+0x7764>
   19058:	str	r0, [fp, #-24]	; 0xffffffe8
   1905c:	ldr	r2, [fp, #-16]
   19060:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19064:	str	r2, [r3]
   19068:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1906c:	mov	r0, r3
   19070:	sub	sp, fp, #4
   19074:	ldr	fp, [sp]
   19078:	add	sp, sp, #4
   1907c:	pop	{pc}		; (ldr pc, [sp], #4)
   19080:	str	fp, [sp, #-8]!
   19084:	str	lr, [sp, #4]
   19088:	add	fp, sp, #4
   1908c:	sub	sp, sp, #8
   19090:	str	r0, [fp, #-8]
   19094:	mov	r1, #1
   19098:	ldr	r0, [fp, #-8]
   1909c:	bl	190f0 <__assert_fail@plt+0x7d40>
   190a0:	mov	r3, r0
   190a4:	mov	r0, r3
   190a8:	sub	sp, fp, #4
   190ac:	ldr	fp, [sp]
   190b0:	add	sp, sp, #4
   190b4:	pop	{pc}		; (ldr pc, [sp], #4)
   190b8:	str	fp, [sp, #-8]!
   190bc:	str	lr, [sp, #4]
   190c0:	add	fp, sp, #4
   190c4:	sub	sp, sp, #8
   190c8:	str	r0, [fp, #-8]
   190cc:	mov	r1, #1
   190d0:	ldr	r0, [fp, #-8]
   190d4:	bl	19138 <__assert_fail@plt+0x7d88>
   190d8:	mov	r3, r0
   190dc:	mov	r0, r3
   190e0:	sub	sp, fp, #4
   190e4:	ldr	fp, [sp]
   190e8:	add	sp, sp, #4
   190ec:	pop	{pc}		; (ldr pc, [sp], #4)
   190f0:	str	fp, [sp, #-8]!
   190f4:	str	lr, [sp, #4]
   190f8:	add	fp, sp, #4
   190fc:	sub	sp, sp, #8
   19100:	str	r0, [fp, #-8]
   19104:	str	r1, [fp, #-12]
   19108:	ldr	r1, [fp, #-12]
   1910c:	ldr	r0, [fp, #-8]
   19110:	bl	19378 <__assert_fail@plt+0x7fc8>
   19114:	mov	r3, r0
   19118:	mov	r0, r3
   1911c:	bl	18a24 <__assert_fail@plt+0x7674>
   19120:	mov	r3, r0
   19124:	mov	r0, r3
   19128:	sub	sp, fp, #4
   1912c:	ldr	fp, [sp]
   19130:	add	sp, sp, #4
   19134:	pop	{pc}		; (ldr pc, [sp], #4)
   19138:	str	fp, [sp, #-8]!
   1913c:	str	lr, [sp, #4]
   19140:	add	fp, sp, #4
   19144:	sub	sp, sp, #8
   19148:	str	r0, [fp, #-8]
   1914c:	str	r1, [fp, #-12]
   19150:	ldr	r1, [fp, #-12]
   19154:	ldr	r0, [fp, #-8]
   19158:	bl	198f0 <__assert_fail@plt+0x8540>
   1915c:	mov	r3, r0
   19160:	mov	r0, r3
   19164:	bl	18a24 <__assert_fail@plt+0x7674>
   19168:	mov	r3, r0
   1916c:	mov	r0, r3
   19170:	sub	sp, fp, #4
   19174:	ldr	fp, [sp]
   19178:	add	sp, sp, #4
   1917c:	pop	{pc}		; (ldr pc, [sp], #4)
   19180:	str	fp, [sp, #-8]!
   19184:	str	lr, [sp, #4]
   19188:	add	fp, sp, #4
   1918c:	sub	sp, sp, #8
   19190:	str	r0, [fp, #-8]
   19194:	str	r1, [fp, #-12]
   19198:	ldr	r0, [fp, #-12]
   1919c:	bl	18a60 <__assert_fail@plt+0x76b0>
   191a0:	mov	r3, r0
   191a4:	ldr	r2, [fp, #-12]
   191a8:	ldr	r1, [fp, #-8]
   191ac:	mov	r0, r3
   191b0:	bl	1111c <memcpy@plt>
   191b4:	mov	r3, r0
   191b8:	mov	r0, r3
   191bc:	sub	sp, fp, #4
   191c0:	ldr	fp, [sp]
   191c4:	add	sp, sp, #4
   191c8:	pop	{pc}		; (ldr pc, [sp], #4)
   191cc:	str	fp, [sp, #-8]!
   191d0:	str	lr, [sp, #4]
   191d4:	add	fp, sp, #4
   191d8:	sub	sp, sp, #8
   191dc:	str	r0, [fp, #-8]
   191e0:	str	r1, [fp, #-12]
   191e4:	ldr	r0, [fp, #-12]
   191e8:	bl	18aa0 <__assert_fail@plt+0x76f0>
   191ec:	mov	r3, r0
   191f0:	mov	r0, r3
   191f4:	ldr	r3, [fp, #-12]
   191f8:	mov	r2, r3
   191fc:	ldr	r1, [fp, #-8]
   19200:	bl	1111c <memcpy@plt>
   19204:	mov	r3, r0
   19208:	mov	r0, r3
   1920c:	sub	sp, fp, #4
   19210:	ldr	fp, [sp]
   19214:	add	sp, sp, #4
   19218:	pop	{pc}		; (ldr pc, [sp], #4)
   1921c:	str	fp, [sp, #-8]!
   19220:	str	lr, [sp, #4]
   19224:	add	fp, sp, #4
   19228:	sub	sp, sp, #16
   1922c:	str	r0, [fp, #-16]
   19230:	str	r1, [fp, #-20]	; 0xffffffec
   19234:	ldr	r3, [fp, #-20]	; 0xffffffec
   19238:	add	r3, r3, #1
   1923c:	mov	r0, r3
   19240:	bl	18aa0 <__assert_fail@plt+0x76f0>
   19244:	mov	r3, r0
   19248:	str	r3, [fp, #-8]
   1924c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19250:	ldr	r2, [fp, #-8]
   19254:	add	r3, r2, r3
   19258:	mov	r2, #0
   1925c:	strb	r2, [r3]
   19260:	ldr	r3, [fp, #-20]	; 0xffffffec
   19264:	mov	r2, r3
   19268:	ldr	r1, [fp, #-16]
   1926c:	ldr	r0, [fp, #-8]
   19270:	bl	1111c <memcpy@plt>
   19274:	mov	r3, r0
   19278:	mov	r0, r3
   1927c:	sub	sp, fp, #4
   19280:	ldr	fp, [sp]
   19284:	add	sp, sp, #4
   19288:	pop	{pc}		; (ldr pc, [sp], #4)
   1928c:	str	fp, [sp, #-8]!
   19290:	str	lr, [sp, #4]
   19294:	add	fp, sp, #4
   19298:	sub	sp, sp, #8
   1929c:	str	r0, [fp, #-8]
   192a0:	ldr	r0, [fp, #-8]
   192a4:	bl	11290 <strlen@plt>
   192a8:	mov	r3, r0
   192ac:	add	r3, r3, #1
   192b0:	mov	r1, r3
   192b4:	ldr	r0, [fp, #-8]
   192b8:	bl	19180 <__assert_fail@plt+0x7dd0>
   192bc:	mov	r3, r0
   192c0:	mov	r0, r3
   192c4:	sub	sp, fp, #4
   192c8:	ldr	fp, [sp]
   192cc:	add	sp, sp, #4
   192d0:	pop	{pc}		; (ldr pc, [sp], #4)
   192d4:	strd	r4, [sp, #-16]!
   192d8:	str	fp, [sp, #8]
   192dc:	str	lr, [sp, #12]
   192e0:	add	fp, sp, #12
   192e4:	movw	r3, #49460	; 0xc134
   192e8:	movt	r3, #2
   192ec:	ldr	r4, [r3]
   192f0:	movw	r0, #48228	; 0xbc64
   192f4:	movt	r0, #1
   192f8:	bl	11284 <gettext@plt>
   192fc:	mov	r3, r0
   19300:	movw	r2, #48248	; 0xbc78
   19304:	movt	r2, #1
   19308:	mov	r1, #0
   1930c:	mov	r0, r4
   19310:	bl	111e8 <error@plt>
   19314:	bl	1138c <abort@plt>
   19318:	push	{fp}		; (str fp, [sp, #-4]!)
   1931c:	add	fp, sp, #0
   19320:	nop	{0}
   19324:	add	sp, fp, #0
   19328:	pop	{fp}		; (ldr fp, [sp], #4)
   1932c:	bx	lr
   19330:	str	fp, [sp, #-8]!
   19334:	str	lr, [sp, #4]
   19338:	add	fp, sp, #4
   1933c:	sub	sp, sp, #8
   19340:	str	r0, [fp, #-8]
   19344:	str	r1, [fp, #-12]
   19348:	ldr	r1, [fp, #-12]
   1934c:	ldr	r0, [fp, #-8]
   19350:	bl	195b8 <__assert_fail@plt+0x8208>
   19354:	mov	r3, r0
   19358:	cmp	r3, #0
   1935c:	bge	19364 <__assert_fail@plt+0x7fb4>
   19360:	bl	19318 <__assert_fail@plt+0x7f68>
   19364:	nop	{0}
   19368:	sub	sp, fp, #4
   1936c:	ldr	fp, [sp]
   19370:	add	sp, sp, #4
   19374:	pop	{pc}		; (ldr pc, [sp], #4)
   19378:	str	fp, [sp, #-8]!
   1937c:	str	lr, [sp, #4]
   19380:	add	fp, sp, #4
   19384:	sub	sp, sp, #16
   19388:	str	r0, [fp, #-16]
   1938c:	str	r1, [fp, #-20]	; 0xffffffec
   19390:	ldr	r3, [fp, #-16]
   19394:	cmp	r3, #0
   19398:	beq	193a8 <__assert_fail@plt+0x7ff8>
   1939c:	ldr	r3, [fp, #-20]	; 0xffffffec
   193a0:	cmp	r3, #0
   193a4:	bne	193b8 <__assert_fail@plt+0x8008>
   193a8:	mov	r3, #1
   193ac:	str	r3, [fp, #-20]	; 0xffffffec
   193b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   193b4:	str	r3, [fp, #-16]
   193b8:	mov	ip, #0
   193bc:	ldr	r2, [fp, #-16]
   193c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   193c4:	umull	r0, r1, r2, r3
   193c8:	mov	r2, #0
   193cc:	mov	r3, #0
   193d0:	mov	r2, r1
   193d4:	mov	r3, #0
   193d8:	cmp	r2, #0
   193dc:	beq	193e4 <__assert_fail@plt+0x8034>
   193e0:	mov	ip, #1
   193e4:	cmp	r0, #0
   193e8:	bge	193f0 <__assert_fail@plt+0x8040>
   193ec:	mov	ip, #1
   193f0:	mov	r3, ip
   193f4:	and	r3, r3, #1
   193f8:	uxtb	r3, r3
   193fc:	cmp	r3, #0
   19400:	beq	1941c <__assert_fail@plt+0x806c>
   19404:	bl	112c0 <__errno_location@plt>
   19408:	mov	r2, r0
   1940c:	mov	r3, #12
   19410:	str	r3, [r2]
   19414:	mov	r3, #0
   19418:	b	19434 <__assert_fail@plt+0x8084>
   1941c:	ldr	r1, [fp, #-20]	; 0xffffffec
   19420:	ldr	r0, [fp, #-16]
   19424:	bl	11080 <calloc@plt>
   19428:	mov	r3, r0
   1942c:	str	r3, [fp, #-8]
   19430:	ldr	r3, [fp, #-8]
   19434:	mov	r0, r3
   19438:	sub	sp, fp, #4
   1943c:	ldr	fp, [sp]
   19440:	add	sp, sp, #4
   19444:	pop	{pc}		; (ldr pc, [sp], #4)
   19448:	str	fp, [sp, #-8]!
   1944c:	str	lr, [sp, #4]
   19450:	add	fp, sp, #4
   19454:	sub	sp, sp, #16
   19458:	str	r0, [fp, #-16]
   1945c:	ldr	r3, [fp, #-16]
   19460:	cmp	r3, #0
   19464:	bne	19470 <__assert_fail@plt+0x80c0>
   19468:	mov	r3, #1
   1946c:	str	r3, [fp, #-16]
   19470:	mov	r2, #0
   19474:	ldr	r3, [fp, #-16]
   19478:	cmp	r3, #0
   1947c:	bge	19484 <__assert_fail@plt+0x80d4>
   19480:	mov	r2, #1
   19484:	mov	r3, r2
   19488:	and	r3, r3, #1
   1948c:	uxtb	r3, r3
   19490:	cmp	r3, #0
   19494:	beq	194b0 <__assert_fail@plt+0x8100>
   19498:	bl	112c0 <__errno_location@plt>
   1949c:	mov	r2, r0
   194a0:	mov	r3, #12
   194a4:	str	r3, [r2]
   194a8:	mov	r3, #0
   194ac:	b	194c4 <__assert_fail@plt+0x8114>
   194b0:	ldr	r0, [fp, #-16]
   194b4:	bl	11218 <malloc@plt>
   194b8:	mov	r3, r0
   194bc:	str	r3, [fp, #-8]
   194c0:	ldr	r3, [fp, #-8]
   194c4:	mov	r0, r3
   194c8:	sub	sp, fp, #4
   194cc:	ldr	fp, [sp]
   194d0:	add	sp, sp, #4
   194d4:	pop	{pc}		; (ldr pc, [sp], #4)
   194d8:	str	fp, [sp, #-8]!
   194dc:	str	lr, [sp, #4]
   194e0:	add	fp, sp, #4
   194e4:	sub	sp, sp, #16
   194e8:	str	r0, [fp, #-16]
   194ec:	str	r1, [fp, #-20]	; 0xffffffec
   194f0:	ldr	r3, [fp, #-16]
   194f4:	cmp	r3, #0
   194f8:	bne	1950c <__assert_fail@plt+0x815c>
   194fc:	ldr	r0, [fp, #-20]	; 0xffffffec
   19500:	bl	19448 <__assert_fail@plt+0x8098>
   19504:	mov	r3, r0
   19508:	b	1957c <__assert_fail@plt+0x81cc>
   1950c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19510:	cmp	r3, #0
   19514:	bne	19528 <__assert_fail@plt+0x8178>
   19518:	ldr	r0, [fp, #-16]
   1951c:	bl	149f0 <__assert_fail@plt+0x3640>
   19520:	mov	r3, #0
   19524:	b	1957c <__assert_fail@plt+0x81cc>
   19528:	mov	r2, #0
   1952c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19530:	cmp	r3, #0
   19534:	bge	1953c <__assert_fail@plt+0x818c>
   19538:	mov	r2, #1
   1953c:	mov	r3, r2
   19540:	and	r3, r3, #1
   19544:	uxtb	r3, r3
   19548:	cmp	r3, #0
   1954c:	beq	19568 <__assert_fail@plt+0x81b8>
   19550:	bl	112c0 <__errno_location@plt>
   19554:	mov	r2, r0
   19558:	mov	r3, #12
   1955c:	str	r3, [r2]
   19560:	mov	r3, #0
   19564:	b	1957c <__assert_fail@plt+0x81cc>
   19568:	ldr	r1, [fp, #-20]	; 0xffffffec
   1956c:	ldr	r0, [fp, #-16]
   19570:	bl	11158 <realloc@plt>
   19574:	str	r0, [fp, #-8]
   19578:	ldr	r3, [fp, #-8]
   1957c:	mov	r0, r3
   19580:	sub	sp, fp, #4
   19584:	ldr	fp, [sp]
   19588:	add	sp, sp, #4
   1958c:	pop	{pc}		; (ldr pc, [sp], #4)
   19590:	push	{fp}		; (str fp, [sp, #-4]!)
   19594:	add	fp, sp, #0
   19598:	sub	sp, sp, #12
   1959c:	str	r0, [fp, #-8]
   195a0:	str	r1, [fp, #-12]
   195a4:	mov	r3, #0
   195a8:	mov	r0, r3
   195ac:	add	sp, fp, #0
   195b0:	pop	{fp}		; (ldr fp, [sp], #4)
   195b4:	bx	lr
   195b8:	str	fp, [sp, #-8]!
   195bc:	str	lr, [sp, #4]
   195c0:	add	fp, sp, #4
   195c4:	sub	sp, sp, #8
   195c8:	str	r0, [fp, #-8]
   195cc:	str	r1, [fp, #-12]
   195d0:	ldr	r1, [fp, #-12]
   195d4:	ldr	r0, [fp, #-8]
   195d8:	bl	19590 <__assert_fail@plt+0x81e0>
   195dc:	mov	r3, r0
   195e0:	mov	r0, r3
   195e4:	sub	sp, fp, #4
   195e8:	ldr	fp, [sp]
   195ec:	add	sp, sp, #4
   195f0:	pop	{pc}		; (ldr pc, [sp], #4)
   195f4:	strd	r4, [sp, #-16]!
   195f8:	str	fp, [sp, #8]
   195fc:	str	lr, [sp, #12]
   19600:	add	fp, sp, #12
   19604:	sub	sp, sp, #16
   19608:	str	r0, [fp, #-24]	; 0xffffffe8
   1960c:	str	r1, [fp, #-28]	; 0xffffffe4
   19610:	ldr	r5, [fp, #-24]	; 0xffffffe8
   19614:	ldr	r4, [fp, #-28]	; 0xffffffe4
   19618:	cmp	r5, r4
   1961c:	bne	19628 <__assert_fail@plt+0x8278>
   19620:	mov	r3, #0
   19624:	b	19688 <__assert_fail@plt+0x82d8>
   19628:	ldrb	r3, [r5]
   1962c:	mov	r0, r3
   19630:	bl	1a8ac <_obstack_memory_used@@Base+0x7ac>
   19634:	mov	r3, r0
   19638:	strb	r3, [fp, #-13]
   1963c:	ldrb	r3, [r4]
   19640:	mov	r0, r3
   19644:	bl	1a8ac <_obstack_memory_used@@Base+0x7ac>
   19648:	mov	r3, r0
   1964c:	strb	r3, [fp, #-14]
   19650:	ldrb	r3, [fp, #-13]
   19654:	cmp	r3, #0
   19658:	beq	19678 <__assert_fail@plt+0x82c8>
   1965c:	add	r5, r5, #1
   19660:	add	r4, r4, #1
   19664:	ldrb	r2, [fp, #-13]
   19668:	ldrb	r3, [fp, #-14]
   1966c:	cmp	r2, r3
   19670:	beq	19628 <__assert_fail@plt+0x8278>
   19674:	b	1967c <__assert_fail@plt+0x82cc>
   19678:	nop	{0}
   1967c:	ldrb	r2, [fp, #-13]
   19680:	ldrb	r3, [fp, #-14]
   19684:	sub	r3, r2, r3
   19688:	mov	r0, r3
   1968c:	sub	sp, fp, #12
   19690:	ldrd	r4, [sp]
   19694:	ldr	fp, [sp, #8]
   19698:	add	sp, sp, #12
   1969c:	pop	{pc}		; (ldr pc, [sp], #4)
   196a0:	str	fp, [sp, #-8]!
   196a4:	str	lr, [sp, #4]
   196a8:	add	fp, sp, #4
   196ac:	sub	sp, sp, #16
   196b0:	str	r0, [fp, #-16]
   196b4:	ldr	r0, [fp, #-16]
   196b8:	bl	111c4 <__fpending@plt>
   196bc:	mov	r3, r0
   196c0:	cmp	r3, #0
   196c4:	movne	r3, #1
   196c8:	moveq	r3, #0
   196cc:	strb	r3, [fp, #-5]
   196d0:	ldr	r0, [fp, #-16]
   196d4:	bl	111d0 <ferror_unlocked@plt>
   196d8:	mov	r3, r0
   196dc:	cmp	r3, #0
   196e0:	movne	r3, #1
   196e4:	moveq	r3, #0
   196e8:	strb	r3, [fp, #-6]
   196ec:	ldr	r0, [fp, #-16]
   196f0:	bl	1482c <__assert_fail@plt+0x347c>
   196f4:	mov	r3, r0
   196f8:	cmp	r3, #0
   196fc:	movne	r3, #1
   19700:	moveq	r3, #0
   19704:	strb	r3, [fp, #-7]
   19708:	ldrb	r3, [fp, #-6]
   1970c:	cmp	r3, #0
   19710:	bne	19740 <__assert_fail@plt+0x8390>
   19714:	ldrb	r3, [fp, #-7]
   19718:	cmp	r3, #0
   1971c:	beq	1976c <__assert_fail@plt+0x83bc>
   19720:	ldrb	r3, [fp, #-5]
   19724:	cmp	r3, #0
   19728:	bne	19740 <__assert_fail@plt+0x8390>
   1972c:	bl	112c0 <__errno_location@plt>
   19730:	mov	r3, r0
   19734:	ldr	r3, [r3]
   19738:	cmp	r3, #9
   1973c:	beq	1976c <__assert_fail@plt+0x83bc>
   19740:	ldrb	r3, [fp, #-7]
   19744:	eor	r3, r3, #1
   19748:	uxtb	r3, r3
   1974c:	cmp	r3, #0
   19750:	beq	19764 <__assert_fail@plt+0x83b4>
   19754:	bl	112c0 <__errno_location@plt>
   19758:	mov	r2, r0
   1975c:	mov	r3, #0
   19760:	str	r3, [r2]
   19764:	mvn	r3, #0
   19768:	b	19770 <__assert_fail@plt+0x83c0>
   1976c:	mov	r3, #0
   19770:	mov	r0, r3
   19774:	sub	sp, fp, #4
   19778:	ldr	fp, [sp]
   1977c:	add	sp, sp, #4
   19780:	pop	{pc}		; (ldr pc, [sp], #4)
   19784:	str	fp, [sp, #-8]!
   19788:	str	lr, [sp, #4]
   1978c:	add	fp, sp, #4
   19790:	sub	sp, sp, #272	; 0x110
   19794:	str	r0, [fp, #-272]	; 0xfffffef0
   19798:	sub	r3, fp, #264	; 0x108
   1979c:	movw	r2, #257	; 0x101
   197a0:	mov	r1, r3
   197a4:	ldr	r0, [fp, #-272]	; 0xfffffef0
   197a8:	bl	1a38c <_obstack_memory_used@@Base+0x28c>
   197ac:	mov	r3, r0
   197b0:	cmp	r3, #0
   197b4:	beq	197c0 <__assert_fail@plt+0x8410>
   197b8:	mov	r3, #0
   197bc:	b	19814 <__assert_fail@plt+0x8464>
   197c0:	sub	r3, fp, #264	; 0x108
   197c4:	movw	r1, #48252	; 0xbc7c
   197c8:	movt	r1, #1
   197cc:	mov	r0, r3
   197d0:	bl	110a4 <strcmp@plt>
   197d4:	mov	r3, r0
   197d8:	cmp	r3, #0
   197dc:	beq	19808 <__assert_fail@plt+0x8458>
   197e0:	sub	r3, fp, #264	; 0x108
   197e4:	movw	r1, #48256	; 0xbc80
   197e8:	movt	r1, #1
   197ec:	mov	r0, r3
   197f0:	bl	110a4 <strcmp@plt>
   197f4:	mov	r3, r0
   197f8:	cmp	r3, #0
   197fc:	beq	19808 <__assert_fail@plt+0x8458>
   19800:	mov	r3, #1
   19804:	b	1980c <__assert_fail@plt+0x845c>
   19808:	mov	r3, #0
   1980c:	and	r3, r3, #1
   19810:	uxtb	r3, r3
   19814:	mov	r0, r3
   19818:	sub	sp, fp, #4
   1981c:	ldr	fp, [sp]
   19820:	add	sp, sp, #4
   19824:	pop	{pc}		; (ldr pc, [sp], #4)
   19828:	str	fp, [sp, #-8]!
   1982c:	str	lr, [sp, #4]
   19830:	add	fp, sp, #4
   19834:	bl	112c0 <__errno_location@plt>
   19838:	mov	r2, r0
   1983c:	mov	r3, #12
   19840:	str	r3, [r2]
   19844:	mov	r3, #0
   19848:	mov	r0, r3
   1984c:	sub	sp, fp, #4
   19850:	ldr	fp, [sp]
   19854:	add	sp, sp, #4
   19858:	pop	{pc}		; (ldr pc, [sp], #4)
   1985c:	str	fp, [sp, #-8]!
   19860:	str	lr, [sp, #4]
   19864:	add	fp, sp, #4
   19868:	sub	sp, sp, #8
   1986c:	str	r0, [fp, #-8]
   19870:	ldr	r3, [fp, #-8]
   19874:	mov	r0, r3
   19878:	bl	19448 <__assert_fail@plt+0x8098>
   1987c:	mov	r3, r0
   19880:	mov	r0, r3
   19884:	sub	sp, fp, #4
   19888:	ldr	fp, [sp]
   1988c:	add	sp, sp, #4
   19890:	pop	{pc}		; (ldr pc, [sp], #4)
   19894:	str	fp, [sp, #-8]!
   19898:	str	lr, [sp, #4]
   1989c:	add	fp, sp, #4
   198a0:	sub	sp, sp, #8
   198a4:	str	r0, [fp, #-8]
   198a8:	str	r1, [fp, #-12]
   198ac:	ldr	r3, [fp, #-12]
   198b0:	cmp	r3, #0
   198b4:	moveq	r3, #1
   198b8:	movne	r3, #0
   198bc:	uxtb	r3, r3
   198c0:	mov	r2, r3
   198c4:	ldr	r3, [fp, #-12]
   198c8:	orr	r3, r2, r3
   198cc:	mov	r1, r3
   198d0:	ldr	r0, [fp, #-8]
   198d4:	bl	194d8 <__assert_fail@plt+0x8128>
   198d8:	mov	r3, r0
   198dc:	mov	r0, r3
   198e0:	sub	sp, fp, #4
   198e4:	ldr	fp, [sp]
   198e8:	add	sp, sp, #4
   198ec:	pop	{pc}		; (ldr pc, [sp], #4)
   198f0:	str	fp, [sp, #-8]!
   198f4:	str	lr, [sp, #4]
   198f8:	add	fp, sp, #4
   198fc:	sub	sp, sp, #8
   19900:	str	r0, [fp, #-8]
   19904:	str	r1, [fp, #-12]
   19908:	ldr	r3, [fp, #-8]
   1990c:	ldr	r2, [fp, #-12]
   19910:	mov	r1, r2
   19914:	mov	r0, r3
   19918:	bl	19378 <__assert_fail@plt+0x7fc8>
   1991c:	mov	r3, r0
   19920:	mov	r0, r3
   19924:	sub	sp, fp, #4
   19928:	ldr	fp, [sp]
   1992c:	add	sp, sp, #4
   19930:	pop	{pc}		; (ldr pc, [sp], #4)
   19934:	str	fp, [sp, #-8]!
   19938:	str	lr, [sp, #4]
   1993c:	add	fp, sp, #4
   19940:	sub	sp, sp, #16
   19944:	str	r0, [fp, #-8]
   19948:	str	r1, [fp, #-12]
   1994c:	str	r2, [fp, #-16]
   19950:	ldr	r3, [fp, #-12]
   19954:	cmp	r3, #0
   19958:	beq	19968 <__assert_fail@plt+0x85b8>
   1995c:	ldr	r3, [fp, #-16]
   19960:	cmp	r3, #0
   19964:	bne	19978 <__assert_fail@plt+0x85c8>
   19968:	mov	r3, #1
   1996c:	str	r3, [fp, #-16]
   19970:	ldr	r3, [fp, #-16]
   19974:	str	r3, [fp, #-12]
   19978:	ldr	r3, [fp, #-12]
   1997c:	ldr	r2, [fp, #-16]
   19980:	mov	r1, r3
   19984:	ldr	r0, [fp, #-8]
   19988:	bl	1a1c8 <_obstack_memory_used@@Base+0xc8>
   1998c:	mov	r3, r0
   19990:	mov	r0, r3
   19994:	sub	sp, fp, #4
   19998:	ldr	fp, [sp]
   1999c:	add	sp, sp, #4
   199a0:	pop	{pc}		; (ldr pc, [sp], #4)
   199a4:	str	fp, [sp, #-8]!
   199a8:	str	lr, [sp, #4]
   199ac:	add	fp, sp, #4
   199b0:	sub	sp, sp, #8
   199b4:	mov	r0, #14
   199b8:	bl	11344 <nl_langinfo@plt>
   199bc:	str	r0, [fp, #-8]
   199c0:	ldr	r3, [fp, #-8]
   199c4:	cmp	r3, #0
   199c8:	bne	199d8 <__assert_fail@plt+0x8628>
   199cc:	movw	r3, #48264	; 0xbc88
   199d0:	movt	r3, #1
   199d4:	str	r3, [fp, #-8]
   199d8:	ldr	r3, [fp, #-8]
   199dc:	ldrb	r3, [r3]
   199e0:	cmp	r3, #0
   199e4:	bne	199f4 <__assert_fail@plt+0x8644>
   199e8:	movw	r3, #48268	; 0xbc8c
   199ec:	movt	r3, #1
   199f0:	str	r3, [fp, #-8]
   199f4:	ldr	r3, [fp, #-8]
   199f8:	mov	r0, r3
   199fc:	sub	sp, fp, #4
   19a00:	ldr	fp, [sp]
   19a04:	add	sp, sp, #4
   19a08:	pop	{pc}		; (ldr pc, [sp], #4)
   19a0c:	str	fp, [sp, #-8]!
   19a10:	str	lr, [sp, #4]
   19a14:	add	fp, sp, #4
   19a18:	sub	sp, sp, #8
   19a1c:	str	r0, [fp, #-8]
   19a20:	str	r1, [fp, #-12]
   19a24:	ldr	r3, [fp, #-8]
   19a28:	ldrb	r3, [r3, #40]	; 0x28
   19a2c:	and	r3, r3, #1
   19a30:	uxtb	r3, r3
   19a34:	cmp	r3, #0
   19a38:	beq	19a60 <__assert_fail@plt+0x86b0>
   19a3c:	ldr	r3, [fp, #-8]
   19a40:	ldr	r3, [r3, #28]
   19a44:	ldr	r2, [fp, #-8]
   19a48:	ldr	r2, [r2, #36]	; 0x24
   19a4c:	ldr	r1, [fp, #-12]
   19a50:	mov	r0, r2
   19a54:	blx	r3
   19a58:	mov	r3, r0
   19a5c:	b	19a74 <__assert_fail@plt+0x86c4>
   19a60:	ldr	r3, [fp, #-8]
   19a64:	ldr	r3, [r3, #28]
   19a68:	ldr	r0, [fp, #-12]
   19a6c:	blx	r3
   19a70:	mov	r3, r0
   19a74:	mov	r0, r3
   19a78:	sub	sp, fp, #4
   19a7c:	ldr	fp, [sp]
   19a80:	add	sp, sp, #4
   19a84:	pop	{pc}		; (ldr pc, [sp], #4)
   19a88:	str	fp, [sp, #-8]!
   19a8c:	str	lr, [sp, #4]
   19a90:	add	fp, sp, #4
   19a94:	sub	sp, sp, #8
   19a98:	str	r0, [fp, #-8]
   19a9c:	str	r1, [fp, #-12]
   19aa0:	ldr	r3, [fp, #-8]
   19aa4:	ldrb	r3, [r3, #40]	; 0x28
   19aa8:	and	r3, r3, #1
   19aac:	uxtb	r3, r3
   19ab0:	cmp	r3, #0
   19ab4:	beq	19ad8 <__assert_fail@plt+0x8728>
   19ab8:	ldr	r3, [fp, #-8]
   19abc:	ldr	r3, [r3, #32]
   19ac0:	ldr	r2, [fp, #-8]
   19ac4:	ldr	r2, [r2, #36]	; 0x24
   19ac8:	ldr	r1, [fp, #-12]
   19acc:	mov	r0, r2
   19ad0:	blx	r3
   19ad4:	b	19ae8 <__assert_fail@plt+0x8738>
   19ad8:	ldr	r3, [fp, #-8]
   19adc:	ldr	r3, [r3, #32]
   19ae0:	ldr	r0, [fp, #-12]
   19ae4:	blx	r3
   19ae8:	nop	{0}
   19aec:	sub	sp, fp, #4
   19af0:	ldr	fp, [sp]
   19af4:	add	sp, sp, #4
   19af8:	pop	{pc}		; (ldr pc, [sp], #4)
   19afc:	str	fp, [sp, #-8]!
   19b00:	str	lr, [sp, #4]
   19b04:	add	fp, sp, #4
   19b08:	sub	sp, sp, #24
   19b0c:	str	r0, [fp, #-16]
   19b10:	str	r1, [fp, #-20]	; 0xffffffec
   19b14:	str	r2, [fp, #-24]	; 0xffffffe8
   19b18:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19b1c:	cmp	r3, #0
   19b20:	bne	19b2c <__assert_fail@plt+0x877c>
   19b24:	mov	r3, #8
   19b28:	str	r3, [fp, #-24]	; 0xffffffe8
   19b2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19b30:	cmp	r3, #0
   19b34:	bne	19b4c <__assert_fail@plt+0x879c>
   19b38:	mov	r3, #24
   19b3c:	str	r3, [fp, #-8]
   19b40:	ldr	r3, [fp, #-8]
   19b44:	rsb	r3, r3, #4096	; 0x1000
   19b48:	str	r3, [fp, #-20]	; 0xffffffec
   19b4c:	ldr	r3, [fp, #-16]
   19b50:	ldr	r2, [fp, #-20]	; 0xffffffec
   19b54:	str	r2, [r3]
   19b58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19b5c:	sub	r2, r3, #1
   19b60:	ldr	r3, [fp, #-16]
   19b64:	str	r2, [r3, #24]
   19b68:	ldr	r3, [fp, #-16]
   19b6c:	ldr	r3, [r3]
   19b70:	mov	r1, r3
   19b74:	ldr	r0, [fp, #-16]
   19b78:	bl	19a0c <__assert_fail@plt+0x865c>
   19b7c:	mov	r2, r0
   19b80:	ldr	r3, [fp, #-16]
   19b84:	str	r2, [r3, #4]
   19b88:	ldr	r3, [fp, #-16]
   19b8c:	ldr	r3, [r3, #4]
   19b90:	str	r3, [fp, #-12]
   19b94:	ldr	r3, [fp, #-12]
   19b98:	cmp	r3, #0
   19b9c:	bne	19bb0 <__assert_fail@plt+0x8800>
   19ba0:	movw	r3, #49528	; 0xc178
   19ba4:	movt	r3, #2
   19ba8:	ldr	r3, [r3]
   19bac:	blx	r3
   19bb0:	ldr	r3, [fp, #-12]
   19bb4:	add	r3, r3, #8
   19bb8:	mov	r2, r3
   19bbc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19bc0:	add	r3, r2, r3
   19bc4:	sub	r2, r3, #1
   19bc8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19bcc:	rsb	r3, r3, #0
   19bd0:	and	r3, r3, r2
   19bd4:	mov	r2, r3
   19bd8:	ldr	r3, [fp, #-16]
   19bdc:	str	r2, [r3, #8]
   19be0:	ldr	r3, [fp, #-16]
   19be4:	ldr	r2, [r3, #8]
   19be8:	ldr	r3, [fp, #-16]
   19bec:	str	r2, [r3, #12]
   19bf0:	ldr	r3, [fp, #-16]
   19bf4:	ldr	r3, [r3]
   19bf8:	ldr	r2, [fp, #-12]
   19bfc:	add	r2, r2, r3
   19c00:	ldr	r3, [fp, #-12]
   19c04:	str	r2, [r3]
   19c08:	ldr	r3, [fp, #-12]
   19c0c:	ldr	r2, [r3]
   19c10:	ldr	r3, [fp, #-16]
   19c14:	str	r2, [r3, #16]
   19c18:	ldr	r3, [fp, #-12]
   19c1c:	mov	r2, #0
   19c20:	str	r2, [r3, #4]
   19c24:	ldr	r2, [fp, #-16]
   19c28:	ldrb	r3, [r2, #40]	; 0x28
   19c2c:	bfc	r3, #1, #1
   19c30:	strb	r3, [r2, #40]	; 0x28
   19c34:	ldr	r2, [fp, #-16]
   19c38:	ldrb	r3, [r2, #40]	; 0x28
   19c3c:	bfc	r3, #2, #1
   19c40:	strb	r3, [r2, #40]	; 0x28
   19c44:	mov	r3, #1
   19c48:	mov	r0, r3
   19c4c:	sub	sp, fp, #4
   19c50:	ldr	fp, [sp]
   19c54:	add	sp, sp, #4
   19c58:	pop	{pc}		; (ldr pc, [sp], #4)

00019c5c <_obstack_begin@@Base>:
   19c5c:	str	fp, [sp, #-8]!
   19c60:	str	lr, [sp, #4]
   19c64:	add	fp, sp, #4
   19c68:	sub	sp, sp, #16
   19c6c:	str	r0, [fp, #-8]
   19c70:	str	r1, [fp, #-12]
   19c74:	str	r2, [fp, #-16]
   19c78:	str	r3, [fp, #-20]	; 0xffffffec
   19c7c:	ldr	r3, [fp, #-8]
   19c80:	ldr	r2, [fp, #-20]	; 0xffffffec
   19c84:	str	r2, [r3, #28]
   19c88:	ldr	r3, [fp, #-8]
   19c8c:	ldr	r2, [fp, #4]
   19c90:	str	r2, [r3, #32]
   19c94:	ldr	r2, [fp, #-8]
   19c98:	ldrb	r3, [r2, #40]	; 0x28
   19c9c:	bfc	r3, #0, #1
   19ca0:	strb	r3, [r2, #40]	; 0x28
   19ca4:	ldr	r2, [fp, #-16]
   19ca8:	ldr	r1, [fp, #-12]
   19cac:	ldr	r0, [fp, #-8]
   19cb0:	bl	19afc <__assert_fail@plt+0x874c>
   19cb4:	mov	r3, r0
   19cb8:	mov	r0, r3
   19cbc:	sub	sp, fp, #4
   19cc0:	ldr	fp, [sp]
   19cc4:	add	sp, sp, #4
   19cc8:	pop	{pc}		; (ldr pc, [sp], #4)

00019ccc <_obstack_begin_1@@Base>:
   19ccc:	str	fp, [sp, #-8]!
   19cd0:	str	lr, [sp, #4]
   19cd4:	add	fp, sp, #4
   19cd8:	sub	sp, sp, #16
   19cdc:	str	r0, [fp, #-8]
   19ce0:	str	r1, [fp, #-12]
   19ce4:	str	r2, [fp, #-16]
   19ce8:	str	r3, [fp, #-20]	; 0xffffffec
   19cec:	ldr	r3, [fp, #-8]
   19cf0:	ldr	r2, [fp, #-20]	; 0xffffffec
   19cf4:	str	r2, [r3, #28]
   19cf8:	ldr	r3, [fp, #-8]
   19cfc:	ldr	r2, [fp, #4]
   19d00:	str	r2, [r3, #32]
   19d04:	ldr	r3, [fp, #-8]
   19d08:	ldr	r2, [fp, #8]
   19d0c:	str	r2, [r3, #36]	; 0x24
   19d10:	ldr	r2, [fp, #-8]
   19d14:	ldrb	r3, [r2, #40]	; 0x28
   19d18:	orr	r3, r3, #1
   19d1c:	strb	r3, [r2, #40]	; 0x28
   19d20:	ldr	r2, [fp, #-16]
   19d24:	ldr	r1, [fp, #-12]
   19d28:	ldr	r0, [fp, #-8]
   19d2c:	bl	19afc <__assert_fail@plt+0x874c>
   19d30:	mov	r3, r0
   19d34:	mov	r0, r3
   19d38:	sub	sp, fp, #4
   19d3c:	ldr	fp, [sp]
   19d40:	add	sp, sp, #4
   19d44:	pop	{pc}		; (ldr pc, [sp], #4)

00019d48 <_obstack_newchunk@@Base>:
   19d48:	str	fp, [sp, #-8]!
   19d4c:	str	lr, [sp, #4]
   19d50:	add	fp, sp, #4
   19d54:	sub	sp, sp, #40	; 0x28
   19d58:	str	r0, [fp, #-40]	; 0xffffffd8
   19d5c:	str	r1, [fp, #-44]	; 0xffffffd4
   19d60:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19d64:	ldr	r3, [r3, #4]
   19d68:	str	r3, [fp, #-16]
   19d6c:	mov	r3, #0
   19d70:	str	r3, [fp, #-8]
   19d74:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19d78:	ldr	r2, [r3, #12]
   19d7c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19d80:	ldr	r3, [r3, #8]
   19d84:	sub	r3, r2, r3
   19d88:	str	r3, [fp, #-20]	; 0xffffffec
   19d8c:	ldr	r2, [fp, #-20]	; 0xffffffec
   19d90:	ldr	r3, [fp, #-44]	; 0xffffffd4
   19d94:	add	r3, r2, r3
   19d98:	str	r3, [fp, #-24]	; 0xffffffe8
   19d9c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19da0:	ldr	r3, [r3, #24]
   19da4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19da8:	add	r3, r2, r3
   19dac:	str	r3, [fp, #-28]	; 0xffffffe4
   19db0:	ldr	r3, [fp, #-20]	; 0xffffffec
   19db4:	lsr	r2, r3, #3
   19db8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19dbc:	add	r3, r2, r3
   19dc0:	add	r3, r3, #100	; 0x64
   19dc4:	str	r3, [fp, #-12]
   19dc8:	ldr	r2, [fp, #-12]
   19dcc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19dd0:	cmp	r2, r3
   19dd4:	bcs	19de0 <_obstack_newchunk@@Base+0x98>
   19dd8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19ddc:	str	r3, [fp, #-12]
   19de0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19de4:	ldr	r3, [r3]
   19de8:	ldr	r2, [fp, #-12]
   19dec:	cmp	r2, r3
   19df0:	bcs	19e00 <_obstack_newchunk@@Base+0xb8>
   19df4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19df8:	ldr	r3, [r3]
   19dfc:	str	r3, [fp, #-12]
   19e00:	ldr	r2, [fp, #-20]	; 0xffffffec
   19e04:	ldr	r3, [fp, #-24]	; 0xffffffe8
   19e08:	cmp	r2, r3
   19e0c:	bhi	19e30 <_obstack_newchunk@@Base+0xe8>
   19e10:	ldr	r2, [fp, #-24]	; 0xffffffe8
   19e14:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19e18:	cmp	r2, r3
   19e1c:	bhi	19e30 <_obstack_newchunk@@Base+0xe8>
   19e20:	ldr	r1, [fp, #-12]
   19e24:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19e28:	bl	19a0c <__assert_fail@plt+0x865c>
   19e2c:	str	r0, [fp, #-8]
   19e30:	ldr	r3, [fp, #-8]
   19e34:	cmp	r3, #0
   19e38:	bne	19e4c <_obstack_newchunk@@Base+0x104>
   19e3c:	movw	r3, #49528	; 0xc178
   19e40:	movt	r3, #2
   19e44:	ldr	r3, [r3]
   19e48:	blx	r3
   19e4c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19e50:	ldr	r2, [fp, #-8]
   19e54:	str	r2, [r3, #4]
   19e58:	ldr	r3, [fp, #-8]
   19e5c:	ldr	r2, [fp, #-16]
   19e60:	str	r2, [r3, #4]
   19e64:	ldr	r2, [fp, #-8]
   19e68:	ldr	r3, [fp, #-12]
   19e6c:	add	r2, r2, r3
   19e70:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19e74:	str	r2, [r3, #16]
   19e78:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19e7c:	ldr	r2, [r3, #16]
   19e80:	ldr	r3, [fp, #-8]
   19e84:	str	r2, [r3]
   19e88:	ldr	r3, [fp, #-8]
   19e8c:	add	r3, r3, #8
   19e90:	mov	r2, r3
   19e94:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19e98:	ldr	r3, [r3, #24]
   19e9c:	add	r2, r2, r3
   19ea0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19ea4:	ldr	r3, [r3, #24]
   19ea8:	mvn	r3, r3
   19eac:	and	r3, r3, r2
   19eb0:	str	r3, [fp, #-32]	; 0xffffffe0
   19eb4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19eb8:	ldr	r3, [r3, #8]
   19ebc:	ldr	r2, [fp, #-20]	; 0xffffffec
   19ec0:	mov	r1, r3
   19ec4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19ec8:	bl	1111c <memcpy@plt>
   19ecc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19ed0:	ldrb	r3, [r3, #40]	; 0x28
   19ed4:	and	r3, r3, #2
   19ed8:	uxtb	r3, r3
   19edc:	cmp	r3, #0
   19ee0:	bne	19f38 <_obstack_newchunk@@Base+0x1f0>
   19ee4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19ee8:	ldr	r3, [r3, #8]
   19eec:	ldr	r2, [fp, #-16]
   19ef0:	add	r2, r2, #8
   19ef4:	mov	r1, r2
   19ef8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   19efc:	ldr	r2, [r2, #24]
   19f00:	add	r1, r1, r2
   19f04:	ldr	r2, [fp, #-40]	; 0xffffffd8
   19f08:	ldr	r2, [r2, #24]
   19f0c:	mvn	r2, r2
   19f10:	and	r2, r2, r1
   19f14:	cmp	r3, r2
   19f18:	bne	19f38 <_obstack_newchunk@@Base+0x1f0>
   19f1c:	ldr	r3, [fp, #-16]
   19f20:	ldr	r2, [r3, #4]
   19f24:	ldr	r3, [fp, #-8]
   19f28:	str	r2, [r3, #4]
   19f2c:	ldr	r1, [fp, #-16]
   19f30:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19f34:	bl	19a88 <__assert_fail@plt+0x86d8>
   19f38:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19f3c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19f40:	str	r2, [r3, #8]
   19f44:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19f48:	ldr	r2, [r3, #8]
   19f4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19f50:	add	r2, r2, r3
   19f54:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19f58:	str	r2, [r3, #12]
   19f5c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   19f60:	ldrb	r3, [r2, #40]	; 0x28
   19f64:	bfc	r3, #1, #1
   19f68:	strb	r3, [r2, #40]	; 0x28
   19f6c:	nop	{0}
   19f70:	sub	sp, fp, #4
   19f74:	ldr	fp, [sp]
   19f78:	add	sp, sp, #4
   19f7c:	pop	{pc}		; (ldr pc, [sp], #4)

00019f80 <_obstack_allocated_p@@Base>:
   19f80:	push	{fp}		; (str fp, [sp, #-4]!)
   19f84:	add	fp, sp, #0
   19f88:	sub	sp, sp, #20
   19f8c:	str	r0, [fp, #-16]
   19f90:	str	r1, [fp, #-20]	; 0xffffffec
   19f94:	ldr	r3, [fp, #-16]
   19f98:	ldr	r3, [r3, #4]
   19f9c:	str	r3, [fp, #-8]
   19fa0:	b	19fb8 <_obstack_allocated_p@@Base+0x38>
   19fa4:	ldr	r3, [fp, #-8]
   19fa8:	ldr	r3, [r3, #4]
   19fac:	str	r3, [fp, #-12]
   19fb0:	ldr	r3, [fp, #-12]
   19fb4:	str	r3, [fp, #-8]
   19fb8:	ldr	r3, [fp, #-8]
   19fbc:	cmp	r3, #0
   19fc0:	beq	19fe8 <_obstack_allocated_p@@Base+0x68>
   19fc4:	ldr	r2, [fp, #-8]
   19fc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19fcc:	cmp	r2, r3
   19fd0:	bcs	19fa4 <_obstack_allocated_p@@Base+0x24>
   19fd4:	ldr	r3, [fp, #-8]
   19fd8:	ldr	r3, [r3]
   19fdc:	ldr	r2, [fp, #-20]	; 0xffffffec
   19fe0:	cmp	r2, r3
   19fe4:	bhi	19fa4 <_obstack_allocated_p@@Base+0x24>
   19fe8:	ldr	r3, [fp, #-8]
   19fec:	cmp	r3, #0
   19ff0:	movne	r3, #1
   19ff4:	moveq	r3, #0
   19ff8:	uxtb	r3, r3
   19ffc:	mov	r0, r3
   1a000:	add	sp, fp, #0
   1a004:	pop	{fp}		; (ldr fp, [sp], #4)
   1a008:	bx	lr

0001a00c <_obstack_free@@Base>:
   1a00c:	str	fp, [sp, #-8]!
   1a010:	str	lr, [sp, #4]
   1a014:	add	fp, sp, #4
   1a018:	sub	sp, sp, #16
   1a01c:	str	r0, [fp, #-16]
   1a020:	str	r1, [fp, #-20]	; 0xffffffec
   1a024:	ldr	r3, [fp, #-16]
   1a028:	ldr	r3, [r3, #4]
   1a02c:	str	r3, [fp, #-8]
   1a030:	b	1a064 <_obstack_free@@Base+0x58>
   1a034:	ldr	r3, [fp, #-8]
   1a038:	ldr	r3, [r3, #4]
   1a03c:	str	r3, [fp, #-12]
   1a040:	ldr	r1, [fp, #-8]
   1a044:	ldr	r0, [fp, #-16]
   1a048:	bl	19a88 <__assert_fail@plt+0x86d8>
   1a04c:	ldr	r3, [fp, #-12]
   1a050:	str	r3, [fp, #-8]
   1a054:	ldr	r2, [fp, #-16]
   1a058:	ldrb	r3, [r2, #40]	; 0x28
   1a05c:	orr	r3, r3, #2
   1a060:	strb	r3, [r2, #40]	; 0x28
   1a064:	ldr	r3, [fp, #-8]
   1a068:	cmp	r3, #0
   1a06c:	beq	1a094 <_obstack_free@@Base+0x88>
   1a070:	ldr	r2, [fp, #-8]
   1a074:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a078:	cmp	r2, r3
   1a07c:	bcs	1a034 <_obstack_free@@Base+0x28>
   1a080:	ldr	r3, [fp, #-8]
   1a084:	ldr	r3, [r3]
   1a088:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a08c:	cmp	r2, r3
   1a090:	bhi	1a034 <_obstack_free@@Base+0x28>
   1a094:	ldr	r3, [fp, #-8]
   1a098:	cmp	r3, #0
   1a09c:	beq	1a0dc <_obstack_free@@Base+0xd0>
   1a0a0:	ldr	r3, [fp, #-16]
   1a0a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a0a8:	str	r2, [r3, #12]
   1a0ac:	ldr	r3, [fp, #-16]
   1a0b0:	ldr	r2, [r3, #12]
   1a0b4:	ldr	r3, [fp, #-16]
   1a0b8:	str	r2, [r3, #8]
   1a0bc:	ldr	r3, [fp, #-8]
   1a0c0:	ldr	r2, [r3]
   1a0c4:	ldr	r3, [fp, #-16]
   1a0c8:	str	r2, [r3, #16]
   1a0cc:	ldr	r3, [fp, #-16]
   1a0d0:	ldr	r2, [fp, #-8]
   1a0d4:	str	r2, [r3, #4]
   1a0d8:	b	1a0ec <_obstack_free@@Base+0xe0>
   1a0dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a0e0:	cmp	r3, #0
   1a0e4:	beq	1a0ec <_obstack_free@@Base+0xe0>
   1a0e8:	bl	1138c <abort@plt>
   1a0ec:	nop	{0}
   1a0f0:	sub	sp, fp, #4
   1a0f4:	ldr	fp, [sp]
   1a0f8:	add	sp, sp, #4
   1a0fc:	pop	{pc}		; (ldr pc, [sp], #4)

0001a100 <_obstack_memory_used@@Base>:
   1a100:	push	{fp}		; (str fp, [sp, #-4]!)
   1a104:	add	fp, sp, #0
   1a108:	sub	sp, sp, #20
   1a10c:	str	r0, [fp, #-16]
   1a110:	mov	r3, #0
   1a114:	str	r3, [fp, #-12]
   1a118:	ldr	r3, [fp, #-16]
   1a11c:	ldr	r3, [r3, #4]
   1a120:	str	r3, [fp, #-8]
   1a124:	b	1a154 <_obstack_memory_used@@Base+0x54>
   1a128:	ldr	r3, [fp, #-8]
   1a12c:	ldr	r2, [r3]
   1a130:	ldr	r3, [fp, #-8]
   1a134:	sub	r3, r2, r3
   1a138:	mov	r2, r3
   1a13c:	ldr	r3, [fp, #-12]
   1a140:	add	r3, r3, r2
   1a144:	str	r3, [fp, #-12]
   1a148:	ldr	r3, [fp, #-8]
   1a14c:	ldr	r3, [r3, #4]
   1a150:	str	r3, [fp, #-8]
   1a154:	ldr	r3, [fp, #-8]
   1a158:	cmp	r3, #0
   1a15c:	bne	1a128 <_obstack_memory_used@@Base+0x28>
   1a160:	ldr	r3, [fp, #-12]
   1a164:	mov	r0, r3
   1a168:	add	sp, fp, #0
   1a16c:	pop	{fp}		; (ldr fp, [sp], #4)
   1a170:	bx	lr
   1a174:	strd	r4, [sp, #-16]!
   1a178:	str	fp, [sp, #8]
   1a17c:	str	lr, [sp, #12]
   1a180:	add	fp, sp, #12
   1a184:	movw	r3, #49552	; 0xc190
   1a188:	movt	r3, #2
   1a18c:	ldr	r4, [r3]
   1a190:	movw	r0, #48276	; 0xbc94
   1a194:	movt	r0, #1
   1a198:	bl	11284 <gettext@plt>
   1a19c:	mov	r3, r0
   1a1a0:	mov	r2, r3
   1a1a4:	movw	r1, #48296	; 0xbca8
   1a1a8:	movt	r1, #1
   1a1ac:	mov	r0, r4
   1a1b0:	bl	112a8 <fprintf@plt>
   1a1b4:	movw	r3, #49460	; 0xc134
   1a1b8:	movt	r3, #2
   1a1bc:	ldr	r3, [r3]
   1a1c0:	mov	r0, r3
   1a1c4:	bl	11260 <exit@plt>
   1a1c8:	str	fp, [sp, #-8]!
   1a1cc:	str	lr, [sp, #4]
   1a1d0:	add	fp, sp, #4
   1a1d4:	sub	sp, sp, #24
   1a1d8:	str	r0, [fp, #-16]
   1a1dc:	str	r1, [fp, #-20]	; 0xffffffec
   1a1e0:	str	r2, [fp, #-24]	; 0xffffffe8
   1a1e4:	mov	ip, #0
   1a1e8:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a1ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a1f0:	umull	r0, r1, r2, r3
   1a1f4:	mov	r2, #0
   1a1f8:	mov	r3, #0
   1a1fc:	mov	r2, r1
   1a200:	mov	r3, #0
   1a204:	cmp	r2, #0
   1a208:	beq	1a210 <_obstack_memory_used@@Base+0x110>
   1a20c:	mov	ip, #1
   1a210:	mov	r3, r0
   1a214:	str	r3, [fp, #-8]
   1a218:	mov	r3, ip
   1a21c:	and	r3, r3, #1
   1a220:	uxtb	r3, r3
   1a224:	cmp	r3, #0
   1a228:	beq	1a244 <_obstack_memory_used@@Base+0x144>
   1a22c:	bl	112c0 <__errno_location@plt>
   1a230:	mov	r2, r0
   1a234:	mov	r3, #12
   1a238:	str	r3, [r2]
   1a23c:	mov	r3, #0
   1a240:	b	1a258 <_obstack_memory_used@@Base+0x158>
   1a244:	ldr	r3, [fp, #-8]
   1a248:	mov	r1, r3
   1a24c:	ldr	r0, [fp, #-16]
   1a250:	bl	194d8 <__assert_fail@plt+0x8128>
   1a254:	mov	r3, r0
   1a258:	mov	r0, r3
   1a25c:	sub	sp, fp, #4
   1a260:	ldr	fp, [sp]
   1a264:	add	sp, sp, #4
   1a268:	pop	{pc}		; (ldr pc, [sp], #4)
   1a26c:	str	fp, [sp, #-8]!
   1a270:	str	lr, [sp, #4]
   1a274:	add	fp, sp, #4
   1a278:	sub	sp, sp, #16
   1a27c:	str	r0, [fp, #-16]
   1a280:	mov	r1, #0
   1a284:	ldr	r0, [fp, #-16]
   1a288:	bl	1132c <setlocale@plt>
   1a28c:	str	r0, [fp, #-8]
   1a290:	ldr	r3, [fp, #-8]
   1a294:	mov	r0, r3
   1a298:	sub	sp, fp, #4
   1a29c:	ldr	fp, [sp]
   1a2a0:	add	sp, sp, #4
   1a2a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2a8:	str	fp, [sp, #-8]!
   1a2ac:	str	lr, [sp, #4]
   1a2b0:	add	fp, sp, #4
   1a2b4:	sub	sp, sp, #24
   1a2b8:	str	r0, [fp, #-16]
   1a2bc:	str	r1, [fp, #-20]	; 0xffffffec
   1a2c0:	str	r2, [fp, #-24]	; 0xffffffe8
   1a2c4:	ldr	r0, [fp, #-16]
   1a2c8:	bl	1a26c <_obstack_memory_used@@Base+0x16c>
   1a2cc:	str	r0, [fp, #-8]
   1a2d0:	ldr	r3, [fp, #-8]
   1a2d4:	cmp	r3, #0
   1a2d8:	bne	1a2fc <_obstack_memory_used@@Base+0x1fc>
   1a2dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a2e0:	cmp	r3, #0
   1a2e4:	beq	1a2f4 <_obstack_memory_used@@Base+0x1f4>
   1a2e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a2ec:	mov	r2, #0
   1a2f0:	strb	r2, [r3]
   1a2f4:	mov	r3, #22
   1a2f8:	b	1a378 <_obstack_memory_used@@Base+0x278>
   1a2fc:	ldr	r0, [fp, #-8]
   1a300:	bl	11290 <strlen@plt>
   1a304:	str	r0, [fp, #-12]
   1a308:	ldr	r2, [fp, #-12]
   1a30c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a310:	cmp	r2, r3
   1a314:	bcs	1a338 <_obstack_memory_used@@Base+0x238>
   1a318:	ldr	r3, [fp, #-12]
   1a31c:	add	r3, r3, #1
   1a320:	mov	r2, r3
   1a324:	ldr	r1, [fp, #-8]
   1a328:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a32c:	bl	1111c <memcpy@plt>
   1a330:	mov	r3, #0
   1a334:	b	1a378 <_obstack_memory_used@@Base+0x278>
   1a338:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a33c:	cmp	r3, #0
   1a340:	beq	1a374 <_obstack_memory_used@@Base+0x274>
   1a344:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a348:	sub	r3, r3, #1
   1a34c:	mov	r2, r3
   1a350:	ldr	r1, [fp, #-8]
   1a354:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a358:	bl	1111c <memcpy@plt>
   1a35c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a360:	sub	r3, r3, #1
   1a364:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a368:	add	r3, r2, r3
   1a36c:	mov	r2, #0
   1a370:	strb	r2, [r3]
   1a374:	mov	r3, #34	; 0x22
   1a378:	mov	r0, r3
   1a37c:	sub	sp, fp, #4
   1a380:	ldr	fp, [sp]
   1a384:	add	sp, sp, #4
   1a388:	pop	{pc}		; (ldr pc, [sp], #4)
   1a38c:	str	fp, [sp, #-8]!
   1a390:	str	lr, [sp, #4]
   1a394:	add	fp, sp, #4
   1a398:	sub	sp, sp, #16
   1a39c:	str	r0, [fp, #-8]
   1a3a0:	str	r1, [fp, #-12]
   1a3a4:	str	r2, [fp, #-16]
   1a3a8:	ldr	r2, [fp, #-16]
   1a3ac:	ldr	r1, [fp, #-12]
   1a3b0:	ldr	r0, [fp, #-8]
   1a3b4:	bl	1a2a8 <_obstack_memory_used@@Base+0x1a8>
   1a3b8:	mov	r3, r0
   1a3bc:	mov	r0, r3
   1a3c0:	sub	sp, fp, #4
   1a3c4:	ldr	fp, [sp]
   1a3c8:	add	sp, sp, #4
   1a3cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3d0:	str	fp, [sp, #-8]!
   1a3d4:	str	lr, [sp, #4]
   1a3d8:	add	fp, sp, #4
   1a3dc:	sub	sp, sp, #8
   1a3e0:	str	r0, [fp, #-8]
   1a3e4:	ldr	r0, [fp, #-8]
   1a3e8:	bl	1a26c <_obstack_memory_used@@Base+0x16c>
   1a3ec:	mov	r3, r0
   1a3f0:	mov	r0, r3
   1a3f4:	sub	sp, fp, #4
   1a3f8:	ldr	fp, [sp]
   1a3fc:	add	sp, sp, #4
   1a400:	pop	{pc}		; (ldr pc, [sp], #4)
   1a404:	push	{fp}		; (str fp, [sp, #-4]!)
   1a408:	add	fp, sp, #0
   1a40c:	sub	sp, sp, #12
   1a410:	str	r0, [fp, #-8]
   1a414:	ldr	r3, [fp, #-8]
   1a418:	cmp	r3, #90	; 0x5a
   1a41c:	bgt	1a440 <_obstack_memory_used@@Base+0x340>
   1a420:	ldr	r3, [fp, #-8]
   1a424:	cmp	r3, #65	; 0x41
   1a428:	bge	1a450 <_obstack_memory_used@@Base+0x350>
   1a42c:	ldr	r3, [fp, #-8]
   1a430:	sub	r3, r3, #48	; 0x30
   1a434:	cmp	r3, #9
   1a438:	bhi	1a458 <_obstack_memory_used@@Base+0x358>
   1a43c:	b	1a450 <_obstack_memory_used@@Base+0x350>
   1a440:	ldr	r3, [fp, #-8]
   1a444:	sub	r3, r3, #97	; 0x61
   1a448:	cmp	r3, #25
   1a44c:	bhi	1a458 <_obstack_memory_used@@Base+0x358>
   1a450:	mov	r3, #1
   1a454:	b	1a45c <_obstack_memory_used@@Base+0x35c>
   1a458:	mov	r3, #0
   1a45c:	mov	r0, r3
   1a460:	add	sp, fp, #0
   1a464:	pop	{fp}		; (ldr fp, [sp], #4)
   1a468:	bx	lr
   1a46c:	push	{fp}		; (str fp, [sp, #-4]!)
   1a470:	add	fp, sp, #0
   1a474:	sub	sp, sp, #12
   1a478:	str	r0, [fp, #-8]
   1a47c:	ldr	r3, [fp, #-8]
   1a480:	cmp	r3, #65	; 0x41
   1a484:	blt	1a4ac <_obstack_memory_used@@Base+0x3ac>
   1a488:	ldr	r3, [fp, #-8]
   1a48c:	cmp	r3, #90	; 0x5a
   1a490:	ble	1a4a4 <_obstack_memory_used@@Base+0x3a4>
   1a494:	ldr	r3, [fp, #-8]
   1a498:	sub	r3, r3, #97	; 0x61
   1a49c:	cmp	r3, #25
   1a4a0:	bhi	1a4ac <_obstack_memory_used@@Base+0x3ac>
   1a4a4:	mov	r3, #1
   1a4a8:	b	1a4b0 <_obstack_memory_used@@Base+0x3b0>
   1a4ac:	mov	r3, #0
   1a4b0:	mov	r0, r3
   1a4b4:	add	sp, fp, #0
   1a4b8:	pop	{fp}		; (ldr fp, [sp], #4)
   1a4bc:	bx	lr
   1a4c0:	push	{fp}		; (str fp, [sp, #-4]!)
   1a4c4:	add	fp, sp, #0
   1a4c8:	sub	sp, sp, #12
   1a4cc:	str	r0, [fp, #-8]
   1a4d0:	ldr	r3, [fp, #-8]
   1a4d4:	cmp	r3, #127	; 0x7f
   1a4d8:	bhi	1a4e4 <_obstack_memory_used@@Base+0x3e4>
   1a4dc:	mov	r3, #1
   1a4e0:	b	1a4e8 <_obstack_memory_used@@Base+0x3e8>
   1a4e4:	mov	r3, #0
   1a4e8:	mov	r0, r3
   1a4ec:	add	sp, fp, #0
   1a4f0:	pop	{fp}		; (ldr fp, [sp], #4)
   1a4f4:	bx	lr
   1a4f8:	push	{fp}		; (str fp, [sp, #-4]!)
   1a4fc:	add	fp, sp, #0
   1a500:	sub	sp, sp, #12
   1a504:	str	r0, [fp, #-8]
   1a508:	ldr	r3, [fp, #-8]
   1a50c:	cmp	r3, #32
   1a510:	beq	1a520 <_obstack_memory_used@@Base+0x420>
   1a514:	ldr	r3, [fp, #-8]
   1a518:	cmp	r3, #9
   1a51c:	bne	1a528 <_obstack_memory_used@@Base+0x428>
   1a520:	mov	r3, #1
   1a524:	b	1a52c <_obstack_memory_used@@Base+0x42c>
   1a528:	mov	r3, #0
   1a52c:	and	r3, r3, #1
   1a530:	uxtb	r3, r3
   1a534:	mov	r0, r3
   1a538:	add	sp, fp, #0
   1a53c:	pop	{fp}		; (ldr fp, [sp], #4)
   1a540:	bx	lr
   1a544:	push	{fp}		; (str fp, [sp, #-4]!)
   1a548:	add	fp, sp, #0
   1a54c:	sub	sp, sp, #12
   1a550:	str	r0, [fp, #-8]
   1a554:	ldr	r3, [fp, #-8]
   1a558:	cmp	r3, #0
   1a55c:	blt	1a580 <_obstack_memory_used@@Base+0x480>
   1a560:	ldr	r3, [fp, #-8]
   1a564:	cmp	r3, #31
   1a568:	ble	1a578 <_obstack_memory_used@@Base+0x478>
   1a56c:	ldr	r3, [fp, #-8]
   1a570:	cmp	r3, #127	; 0x7f
   1a574:	bne	1a580 <_obstack_memory_used@@Base+0x480>
   1a578:	mov	r3, #1
   1a57c:	b	1a584 <_obstack_memory_used@@Base+0x484>
   1a580:	mov	r3, #0
   1a584:	mov	r0, r3
   1a588:	add	sp, fp, #0
   1a58c:	pop	{fp}		; (ldr fp, [sp], #4)
   1a590:	bx	lr
   1a594:	push	{fp}		; (str fp, [sp, #-4]!)
   1a598:	add	fp, sp, #0
   1a59c:	sub	sp, sp, #12
   1a5a0:	str	r0, [fp, #-8]
   1a5a4:	ldr	r3, [fp, #-8]
   1a5a8:	sub	r3, r3, #48	; 0x30
   1a5ac:	cmp	r3, #9
   1a5b0:	bhi	1a5bc <_obstack_memory_used@@Base+0x4bc>
   1a5b4:	mov	r3, #1
   1a5b8:	b	1a5c0 <_obstack_memory_used@@Base+0x4c0>
   1a5bc:	mov	r3, #0
   1a5c0:	mov	r0, r3
   1a5c4:	add	sp, fp, #0
   1a5c8:	pop	{fp}		; (ldr fp, [sp], #4)
   1a5cc:	bx	lr
   1a5d0:	push	{fp}		; (str fp, [sp, #-4]!)
   1a5d4:	add	fp, sp, #0
   1a5d8:	sub	sp, sp, #12
   1a5dc:	str	r0, [fp, #-8]
   1a5e0:	ldr	r3, [fp, #-8]
   1a5e4:	sub	r3, r3, #33	; 0x21
   1a5e8:	cmp	r3, #93	; 0x5d
   1a5ec:	bhi	1a5f8 <_obstack_memory_used@@Base+0x4f8>
   1a5f0:	mov	r3, #1
   1a5f4:	b	1a5fc <_obstack_memory_used@@Base+0x4fc>
   1a5f8:	mov	r3, #0
   1a5fc:	mov	r0, r3
   1a600:	add	sp, fp, #0
   1a604:	pop	{fp}		; (ldr fp, [sp], #4)
   1a608:	bx	lr
   1a60c:	push	{fp}		; (str fp, [sp, #-4]!)
   1a610:	add	fp, sp, #0
   1a614:	sub	sp, sp, #12
   1a618:	str	r0, [fp, #-8]
   1a61c:	ldr	r3, [fp, #-8]
   1a620:	sub	r3, r3, #97	; 0x61
   1a624:	cmp	r3, #25
   1a628:	bhi	1a634 <_obstack_memory_used@@Base+0x534>
   1a62c:	mov	r3, #1
   1a630:	b	1a638 <_obstack_memory_used@@Base+0x538>
   1a634:	mov	r3, #0
   1a638:	mov	r0, r3
   1a63c:	add	sp, fp, #0
   1a640:	pop	{fp}		; (ldr fp, [sp], #4)
   1a644:	bx	lr
   1a648:	push	{fp}		; (str fp, [sp, #-4]!)
   1a64c:	add	fp, sp, #0
   1a650:	sub	sp, sp, #12
   1a654:	str	r0, [fp, #-8]
   1a658:	ldr	r3, [fp, #-8]
   1a65c:	sub	r3, r3, #32
   1a660:	cmp	r3, #94	; 0x5e
   1a664:	bhi	1a670 <_obstack_memory_used@@Base+0x570>
   1a668:	mov	r3, #1
   1a66c:	b	1a674 <_obstack_memory_used@@Base+0x574>
   1a670:	mov	r3, #0
   1a674:	mov	r0, r3
   1a678:	add	sp, fp, #0
   1a67c:	pop	{fp}		; (ldr fp, [sp], #4)
   1a680:	bx	lr
   1a684:	push	{fp}		; (str fp, [sp, #-4]!)
   1a688:	add	fp, sp, #0
   1a68c:	sub	sp, sp, #12
   1a690:	str	r0, [fp, #-8]
   1a694:	ldr	r3, [fp, #-8]
   1a698:	cmp	r3, #64	; 0x40
   1a69c:	bgt	1a6c0 <_obstack_memory_used@@Base+0x5c0>
   1a6a0:	ldr	r3, [fp, #-8]
   1a6a4:	cmp	r3, #58	; 0x3a
   1a6a8:	bge	1a6e8 <_obstack_memory_used@@Base+0x5e8>
   1a6ac:	ldr	r3, [fp, #-8]
   1a6b0:	sub	r3, r3, #33	; 0x21
   1a6b4:	cmp	r3, #14
   1a6b8:	bhi	1a6f0 <_obstack_memory_used@@Base+0x5f0>
   1a6bc:	b	1a6e8 <_obstack_memory_used@@Base+0x5e8>
   1a6c0:	ldr	r3, [fp, #-8]
   1a6c4:	cmp	r3, #91	; 0x5b
   1a6c8:	blt	1a6f0 <_obstack_memory_used@@Base+0x5f0>
   1a6cc:	ldr	r3, [fp, #-8]
   1a6d0:	cmp	r3, #96	; 0x60
   1a6d4:	ble	1a6e8 <_obstack_memory_used@@Base+0x5e8>
   1a6d8:	ldr	r3, [fp, #-8]
   1a6dc:	sub	r3, r3, #123	; 0x7b
   1a6e0:	cmp	r3, #3
   1a6e4:	bhi	1a6f0 <_obstack_memory_used@@Base+0x5f0>
   1a6e8:	mov	r3, #1
   1a6ec:	b	1a6f4 <_obstack_memory_used@@Base+0x5f4>
   1a6f0:	mov	r3, #0
   1a6f4:	mov	r0, r3
   1a6f8:	add	sp, fp, #0
   1a6fc:	pop	{fp}		; (ldr fp, [sp], #4)
   1a700:	bx	lr
   1a704:	push	{fp}		; (str fp, [sp, #-4]!)
   1a708:	add	fp, sp, #0
   1a70c:	sub	sp, sp, #12
   1a710:	str	r0, [fp, #-8]
   1a714:	ldr	r3, [fp, #-8]
   1a718:	cmp	r3, #9
   1a71c:	blt	1a740 <_obstack_memory_used@@Base+0x640>
   1a720:	ldr	r3, [fp, #-8]
   1a724:	cmp	r3, #13
   1a728:	ble	1a738 <_obstack_memory_used@@Base+0x638>
   1a72c:	ldr	r3, [fp, #-8]
   1a730:	cmp	r3, #32
   1a734:	bne	1a740 <_obstack_memory_used@@Base+0x640>
   1a738:	mov	r3, #1
   1a73c:	b	1a744 <_obstack_memory_used@@Base+0x644>
   1a740:	mov	r3, #0
   1a744:	mov	r0, r3
   1a748:	add	sp, fp, #0
   1a74c:	pop	{fp}		; (ldr fp, [sp], #4)
   1a750:	bx	lr
   1a754:	push	{fp}		; (str fp, [sp, #-4]!)
   1a758:	add	fp, sp, #0
   1a75c:	sub	sp, sp, #12
   1a760:	str	r0, [fp, #-8]
   1a764:	ldr	r3, [fp, #-8]
   1a768:	sub	r3, r3, #65	; 0x41
   1a76c:	cmp	r3, #25
   1a770:	bhi	1a77c <_obstack_memory_used@@Base+0x67c>
   1a774:	mov	r3, #1
   1a778:	b	1a780 <_obstack_memory_used@@Base+0x680>
   1a77c:	mov	r3, #0
   1a780:	mov	r0, r3
   1a784:	add	sp, fp, #0
   1a788:	pop	{fp}		; (ldr fp, [sp], #4)
   1a78c:	bx	lr
   1a790:	push	{fp}		; (str fp, [sp, #-4]!)
   1a794:	add	fp, sp, #0
   1a798:	sub	sp, sp, #12
   1a79c:	str	r0, [fp, #-8]
   1a7a0:	ldr	r3, [fp, #-8]
   1a7a4:	sub	r3, r3, #48	; 0x30
   1a7a8:	cmp	r3, #54	; 0x36
   1a7ac:	ldrls	pc, [pc, r3, lsl #2]
   1a7b0:	b	1a898 <_obstack_memory_used@@Base+0x798>
   1a7b4:	muleq	r1, r0, r8
   1a7b8:	muleq	r1, r0, r8
   1a7bc:	muleq	r1, r0, r8
   1a7c0:	muleq	r1, r0, r8
   1a7c4:	muleq	r1, r0, r8
   1a7c8:	muleq	r1, r0, r8
   1a7cc:	muleq	r1, r0, r8
   1a7d0:	muleq	r1, r0, r8
   1a7d4:	muleq	r1, r0, r8
   1a7d8:	muleq	r1, r0, r8
   1a7dc:	muleq	r1, r8, r8
   1a7e0:	muleq	r1, r8, r8
   1a7e4:	muleq	r1, r8, r8
   1a7e8:	muleq	r1, r8, r8
   1a7ec:	muleq	r1, r8, r8
   1a7f0:	muleq	r1, r8, r8
   1a7f4:	muleq	r1, r8, r8
   1a7f8:	muleq	r1, r0, r8
   1a7fc:	muleq	r1, r0, r8
   1a800:	muleq	r1, r0, r8
   1a804:	muleq	r1, r0, r8
   1a808:	muleq	r1, r0, r8
   1a80c:	muleq	r1, r0, r8
   1a810:	muleq	r1, r8, r8
   1a814:	muleq	r1, r8, r8
   1a818:	muleq	r1, r8, r8
   1a81c:	muleq	r1, r8, r8
   1a820:	muleq	r1, r8, r8
   1a824:	muleq	r1, r8, r8
   1a828:	muleq	r1, r8, r8
   1a82c:	muleq	r1, r8, r8
   1a830:	muleq	r1, r8, r8
   1a834:	muleq	r1, r8, r8
   1a838:	muleq	r1, r8, r8
   1a83c:	muleq	r1, r8, r8
   1a840:	muleq	r1, r8, r8
   1a844:	muleq	r1, r8, r8
   1a848:	muleq	r1, r8, r8
   1a84c:	muleq	r1, r8, r8
   1a850:	muleq	r1, r8, r8
   1a854:	muleq	r1, r8, r8
   1a858:	muleq	r1, r8, r8
   1a85c:	muleq	r1, r8, r8
   1a860:	muleq	r1, r8, r8
   1a864:	muleq	r1, r8, r8
   1a868:	muleq	r1, r8, r8
   1a86c:	muleq	r1, r8, r8
   1a870:	muleq	r1, r8, r8
   1a874:	muleq	r1, r8, r8
   1a878:	muleq	r1, r0, r8
   1a87c:	muleq	r1, r0, r8
   1a880:	muleq	r1, r0, r8
   1a884:	muleq	r1, r0, r8
   1a888:	muleq	r1, r0, r8
   1a88c:	muleq	r1, r0, r8
   1a890:	mov	r3, #1
   1a894:	b	1a89c <_obstack_memory_used@@Base+0x79c>
   1a898:	mov	r3, #0
   1a89c:	mov	r0, r3
   1a8a0:	add	sp, fp, #0
   1a8a4:	pop	{fp}		; (ldr fp, [sp], #4)
   1a8a8:	bx	lr
   1a8ac:	push	{fp}		; (str fp, [sp, #-4]!)
   1a8b0:	add	fp, sp, #0
   1a8b4:	sub	sp, sp, #12
   1a8b8:	str	r0, [fp, #-8]
   1a8bc:	ldr	r3, [fp, #-8]
   1a8c0:	sub	r3, r3, #65	; 0x41
   1a8c4:	cmp	r3, #25
   1a8c8:	bhi	1a8d8 <_obstack_memory_used@@Base+0x7d8>
   1a8cc:	ldr	r3, [fp, #-8]
   1a8d0:	add	r3, r3, #32
   1a8d4:	b	1a8dc <_obstack_memory_used@@Base+0x7dc>
   1a8d8:	ldr	r3, [fp, #-8]
   1a8dc:	mov	r0, r3
   1a8e0:	add	sp, fp, #0
   1a8e4:	pop	{fp}		; (ldr fp, [sp], #4)
   1a8e8:	bx	lr
   1a8ec:	push	{fp}		; (str fp, [sp, #-4]!)
   1a8f0:	add	fp, sp, #0
   1a8f4:	sub	sp, sp, #12
   1a8f8:	str	r0, [fp, #-8]
   1a8fc:	ldr	r3, [fp, #-8]
   1a900:	sub	r3, r3, #97	; 0x61
   1a904:	cmp	r3, #25
   1a908:	bhi	1a918 <_obstack_memory_used@@Base+0x818>
   1a90c:	ldr	r3, [fp, #-8]
   1a910:	sub	r3, r3, #32
   1a914:	b	1a91c <_obstack_memory_used@@Base+0x81c>
   1a918:	ldr	r3, [fp, #-8]
   1a91c:	mov	r0, r3
   1a920:	add	sp, fp, #0
   1a924:	pop	{fp}		; (ldr fp, [sp], #4)
   1a928:	bx	lr
   1a92c:	eor	r1, r1, #-2147483648	; 0x80000000
   1a930:	b	1a938 <_obstack_memory_used@@Base+0x838>
   1a934:	eor	r3, r3, #-2147483648	; 0x80000000
   1a938:	push	{r4, r5, lr}
   1a93c:	lsl	r4, r1, #1
   1a940:	lsl	r5, r3, #1
   1a944:	teq	r4, r5
   1a948:	teqeq	r0, r2
   1a94c:	orrsne	ip, r4, r0
   1a950:	orrsne	ip, r5, r2
   1a954:	mvnsne	ip, r4, asr #21
   1a958:	mvnsne	ip, r5, asr #21
   1a95c:	beq	1ab48 <_obstack_memory_used@@Base+0xa48>
   1a960:	lsr	r4, r4, #21
   1a964:	rsbs	r5, r4, r5, lsr #21
   1a968:	rsblt	r5, r5, #0
   1a96c:	ble	1a98c <_obstack_memory_used@@Base+0x88c>
   1a970:	add	r4, r4, r5
   1a974:	eor	r2, r0, r2
   1a978:	eor	r3, r1, r3
   1a97c:	eor	r0, r2, r0
   1a980:	eor	r1, r3, r1
   1a984:	eor	r2, r0, r2
   1a988:	eor	r3, r1, r3
   1a98c:	cmp	r5, #54	; 0x36
   1a990:	pophi	{r4, r5, pc}
   1a994:	tst	r1, #-2147483648	; 0x80000000
   1a998:	lsl	r1, r1, #12
   1a99c:	mov	ip, #1048576	; 0x100000
   1a9a0:	orr	r1, ip, r1, lsr #12
   1a9a4:	beq	1a9b0 <_obstack_memory_used@@Base+0x8b0>
   1a9a8:	rsbs	r0, r0, #0
   1a9ac:	rsc	r1, r1, #0
   1a9b0:	tst	r3, #-2147483648	; 0x80000000
   1a9b4:	lsl	r3, r3, #12
   1a9b8:	orr	r3, ip, r3, lsr #12
   1a9bc:	beq	1a9c8 <_obstack_memory_used@@Base+0x8c8>
   1a9c0:	rsbs	r2, r2, #0
   1a9c4:	rsc	r3, r3, #0
   1a9c8:	teq	r4, r5
   1a9cc:	beq	1ab30 <_obstack_memory_used@@Base+0xa30>
   1a9d0:	sub	r4, r4, #1
   1a9d4:	rsbs	lr, r5, #32
   1a9d8:	blt	1a9f4 <_obstack_memory_used@@Base+0x8f4>
   1a9dc:	lsl	ip, r2, lr
   1a9e0:	adds	r0, r0, r2, lsr r5
   1a9e4:	adc	r1, r1, #0
   1a9e8:	adds	r0, r0, r3, lsl lr
   1a9ec:	adcs	r1, r1, r3, asr r5
   1a9f0:	b	1aa10 <_obstack_memory_used@@Base+0x910>
   1a9f4:	sub	r5, r5, #32
   1a9f8:	add	lr, lr, #32
   1a9fc:	cmp	r2, #1
   1aa00:	lsl	ip, r3, lr
   1aa04:	orrcs	ip, ip, #2
   1aa08:	adds	r0, r0, r3, asr r5
   1aa0c:	adcs	r1, r1, r3, asr #31
   1aa10:	and	r5, r1, #-2147483648	; 0x80000000
   1aa14:	bpl	1aa24 <_obstack_memory_used@@Base+0x924>
   1aa18:	rsbs	ip, ip, #0
   1aa1c:	rscs	r0, r0, #0
   1aa20:	rsc	r1, r1, #0
   1aa24:	cmp	r1, #1048576	; 0x100000
   1aa28:	bcc	1aa68 <_obstack_memory_used@@Base+0x968>
   1aa2c:	cmp	r1, #2097152	; 0x200000
   1aa30:	bcc	1aa50 <_obstack_memory_used@@Base+0x950>
   1aa34:	lsrs	r1, r1, #1
   1aa38:	rrxs	r0, r0
   1aa3c:	rrx	ip, ip
   1aa40:	add	r4, r4, #1
   1aa44:	lsl	r2, r4, #21
   1aa48:	cmn	r2, #4194304	; 0x400000
   1aa4c:	bcs	1aba8 <_obstack_memory_used@@Base+0xaa8>
   1aa50:	cmp	ip, #-2147483648	; 0x80000000
   1aa54:	lsrseq	ip, r0, #1
   1aa58:	adcs	r0, r0, #0
   1aa5c:	adc	r1, r1, r4, lsl #20
   1aa60:	orr	r1, r1, r5
   1aa64:	pop	{r4, r5, pc}
   1aa68:	lsls	ip, ip, #1
   1aa6c:	adcs	r0, r0, r0
   1aa70:	adc	r1, r1, r1
   1aa74:	tst	r1, #1048576	; 0x100000
   1aa78:	sub	r4, r4, #1
   1aa7c:	bne	1aa50 <_obstack_memory_used@@Base+0x950>
   1aa80:	teq	r1, #0
   1aa84:	moveq	r1, r0
   1aa88:	moveq	r0, #0
   1aa8c:	clz	r3, r1
   1aa90:	addeq	r3, r3, #32
   1aa94:	sub	r3, r3, #11
   1aa98:	subs	r2, r3, #32
   1aa9c:	bge	1aac0 <_obstack_memory_used@@Base+0x9c0>
   1aaa0:	adds	r2, r2, #12
   1aaa4:	ble	1aabc <_obstack_memory_used@@Base+0x9bc>
   1aaa8:	add	ip, r2, #20
   1aaac:	rsb	r2, r2, #12
   1aab0:	lsl	r0, r1, ip
   1aab4:	lsr	r1, r1, r2
   1aab8:	b	1aad0 <_obstack_memory_used@@Base+0x9d0>
   1aabc:	add	r2, r2, #20
   1aac0:	rsble	ip, r2, #32
   1aac4:	lsl	r1, r1, r2
   1aac8:	orrle	r1, r1, r0, lsr ip
   1aacc:	lslle	r0, r0, r2
   1aad0:	subs	r4, r4, r3
   1aad4:	addge	r1, r1, r4, lsl #20
   1aad8:	orrge	r1, r1, r5
   1aadc:	popge	{r4, r5, pc}
   1aae0:	mvn	r4, r4
   1aae4:	subs	r4, r4, #31
   1aae8:	bge	1ab24 <_obstack_memory_used@@Base+0xa24>
   1aaec:	adds	r4, r4, #12
   1aaf0:	bgt	1ab0c <_obstack_memory_used@@Base+0xa0c>
   1aaf4:	add	r4, r4, #20
   1aaf8:	rsb	r2, r4, #32
   1aafc:	lsr	r0, r0, r4
   1ab00:	orr	r0, r0, r1, lsl r2
   1ab04:	orr	r1, r5, r1, lsr r4
   1ab08:	pop	{r4, r5, pc}
   1ab0c:	rsb	r4, r4, #12
   1ab10:	rsb	r2, r4, #32
   1ab14:	lsr	r0, r0, r2
   1ab18:	orr	r0, r0, r1, lsl r4
   1ab1c:	mov	r1, r5
   1ab20:	pop	{r4, r5, pc}
   1ab24:	lsr	r0, r1, r4
   1ab28:	mov	r1, r5
   1ab2c:	pop	{r4, r5, pc}
   1ab30:	teq	r4, #0
   1ab34:	eor	r3, r3, #1048576	; 0x100000
   1ab38:	eoreq	r1, r1, #1048576	; 0x100000
   1ab3c:	addeq	r4, r4, #1
   1ab40:	subne	r5, r5, #1
   1ab44:	b	1a9d0 <_obstack_memory_used@@Base+0x8d0>
   1ab48:	mvns	ip, r4, asr #21
   1ab4c:	mvnsne	ip, r5, asr #21
   1ab50:	beq	1abb8 <_obstack_memory_used@@Base+0xab8>
   1ab54:	teq	r4, r5
   1ab58:	teqeq	r0, r2
   1ab5c:	beq	1ab70 <_obstack_memory_used@@Base+0xa70>
   1ab60:	orrs	ip, r4, r0
   1ab64:	moveq	r1, r3
   1ab68:	moveq	r0, r2
   1ab6c:	pop	{r4, r5, pc}
   1ab70:	teq	r1, r3
   1ab74:	movne	r1, #0
   1ab78:	movne	r0, #0
   1ab7c:	popne	{r4, r5, pc}
   1ab80:	lsrs	ip, r4, #21
   1ab84:	bne	1ab98 <_obstack_memory_used@@Base+0xa98>
   1ab88:	lsls	r0, r0, #1
   1ab8c:	adcs	r1, r1, r1
   1ab90:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1ab94:	pop	{r4, r5, pc}
   1ab98:	adds	r4, r4, #4194304	; 0x400000
   1ab9c:	addcc	r1, r1, #1048576	; 0x100000
   1aba0:	popcc	{r4, r5, pc}
   1aba4:	and	r5, r1, #-2147483648	; 0x80000000
   1aba8:	orr	r1, r5, #2130706432	; 0x7f000000
   1abac:	orr	r1, r1, #15728640	; 0xf00000
   1abb0:	mov	r0, #0
   1abb4:	pop	{r4, r5, pc}
   1abb8:	mvns	ip, r4, asr #21
   1abbc:	movne	r1, r3
   1abc0:	movne	r0, r2
   1abc4:	mvnseq	ip, r5, asr #21
   1abc8:	movne	r3, r1
   1abcc:	movne	r2, r0
   1abd0:	orrs	r4, r0, r1, lsl #12
   1abd4:	orrseq	r5, r2, r3, lsl #12
   1abd8:	teqeq	r1, r3
   1abdc:	orrne	r1, r1, #524288	; 0x80000
   1abe0:	pop	{r4, r5, pc}
   1abe4:	teq	r0, #0
   1abe8:	moveq	r1, #0
   1abec:	bxeq	lr
   1abf0:	push	{r4, r5, lr}
   1abf4:	mov	r4, #1024	; 0x400
   1abf8:	add	r4, r4, #50	; 0x32
   1abfc:	mov	r5, #0
   1ac00:	mov	r1, #0
   1ac04:	b	1aa80 <_obstack_memory_used@@Base+0x980>
   1ac08:	teq	r0, #0
   1ac0c:	moveq	r1, #0
   1ac10:	bxeq	lr
   1ac14:	push	{r4, r5, lr}
   1ac18:	mov	r4, #1024	; 0x400
   1ac1c:	add	r4, r4, #50	; 0x32
   1ac20:	ands	r5, r0, #-2147483648	; 0x80000000
   1ac24:	rsbmi	r0, r0, #0
   1ac28:	mov	r1, #0
   1ac2c:	b	1aa80 <_obstack_memory_used@@Base+0x980>
   1ac30:	lsls	r2, r0, #1
   1ac34:	asr	r1, r2, #3
   1ac38:	rrx	r1, r1
   1ac3c:	lsl	r0, r2, #28
   1ac40:	andsne	r3, r2, #-16777216	; 0xff000000
   1ac44:	teqne	r3, #-16777216	; 0xff000000
   1ac48:	eorne	r1, r1, #939524096	; 0x38000000
   1ac4c:	bxne	lr
   1ac50:	bics	r2, r2, #-16777216	; 0xff000000
   1ac54:	bxeq	lr
   1ac58:	teq	r3, #-16777216	; 0xff000000
   1ac5c:	orreq	r1, r1, #524288	; 0x80000
   1ac60:	bxeq	lr
   1ac64:	push	{r4, r5, lr}
   1ac68:	mov	r4, #896	; 0x380
   1ac6c:	and	r5, r1, #-2147483648	; 0x80000000
   1ac70:	bic	r1, r1, #-2147483648	; 0x80000000
   1ac74:	b	1aa80 <_obstack_memory_used@@Base+0x980>
   1ac78:	orrs	r2, r0, r1
   1ac7c:	bxeq	lr
   1ac80:	push	{r4, r5, lr}
   1ac84:	mov	r5, #0
   1ac88:	b	1aca8 <_obstack_memory_used@@Base+0xba8>
   1ac8c:	orrs	r2, r0, r1
   1ac90:	bxeq	lr
   1ac94:	push	{r4, r5, lr}
   1ac98:	ands	r5, r1, #-2147483648	; 0x80000000
   1ac9c:	bpl	1aca8 <_obstack_memory_used@@Base+0xba8>
   1aca0:	rsbs	r0, r0, #0
   1aca4:	rsc	r1, r1, #0
   1aca8:	mov	r4, #1024	; 0x400
   1acac:	add	r4, r4, #50	; 0x32
   1acb0:	lsrs	ip, r1, #22
   1acb4:	beq	1aa24 <_obstack_memory_used@@Base+0x924>
   1acb8:	mov	r2, #3
   1acbc:	lsrs	ip, ip, #3
   1acc0:	addne	r2, r2, #3
   1acc4:	lsrs	ip, ip, #3
   1acc8:	addne	r2, r2, #3
   1accc:	add	r2, r2, ip, lsr #3
   1acd0:	rsb	r3, r2, #32
   1acd4:	lsl	ip, r0, r3
   1acd8:	lsr	r0, r0, r2
   1acdc:	orr	r0, r0, r1, lsl r3
   1ace0:	lsr	r1, r1, r2
   1ace4:	add	r4, r4, r2
   1ace8:	b	1aa24 <_obstack_memory_used@@Base+0x924>
   1acec:	cmp	r3, #0
   1acf0:	cmpeq	r2, #0
   1acf4:	bne	1ad0c <_obstack_memory_used@@Base+0xc0c>
   1acf8:	cmp	r1, #0
   1acfc:	cmpeq	r0, #0
   1ad00:	mvnne	r1, #0
   1ad04:	mvnne	r0, #0
   1ad08:	b	1ad28 <_obstack_memory_used@@Base+0xc28>
   1ad0c:	sub	sp, sp, #8
   1ad10:	push	{sp, lr}
   1ad14:	bl	1ad38 <_obstack_memory_used@@Base+0xc38>
   1ad18:	ldr	lr, [sp, #4]
   1ad1c:	add	sp, sp, #8
   1ad20:	pop	{r2, r3}
   1ad24:	bx	lr
   1ad28:	push	{r1, lr}
   1ad2c:	mov	r0, #8
   1ad30:	bl	11098 <raise@plt>
   1ad34:	pop	{r1, pc}
   1ad38:	cmp	r1, r3
   1ad3c:	cmpeq	r0, r2
   1ad40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad44:	mov	r4, r0
   1ad48:	movcc	r0, #0
   1ad4c:	mov	r5, r1
   1ad50:	ldr	lr, [sp, #36]	; 0x24
   1ad54:	movcc	r1, r0
   1ad58:	bcc	1ae54 <_obstack_memory_used@@Base+0xd54>
   1ad5c:	cmp	r3, #0
   1ad60:	clzeq	ip, r2
   1ad64:	clzne	ip, r3
   1ad68:	addeq	ip, ip, #32
   1ad6c:	cmp	r5, #0
   1ad70:	clzeq	r1, r4
   1ad74:	addeq	r1, r1, #32
   1ad78:	clzne	r1, r5
   1ad7c:	sub	ip, ip, r1
   1ad80:	sub	sl, ip, #32
   1ad84:	lsl	r9, r3, ip
   1ad88:	rsb	fp, ip, #32
   1ad8c:	orr	r9, r9, r2, lsl sl
   1ad90:	orr	r9, r9, r2, lsr fp
   1ad94:	lsl	r8, r2, ip
   1ad98:	cmp	r5, r9
   1ad9c:	cmpeq	r4, r8
   1ada0:	movcc	r0, #0
   1ada4:	movcc	r1, r0
   1ada8:	bcc	1adc4 <_obstack_memory_used@@Base+0xcc4>
   1adac:	mov	r0, #1
   1adb0:	subs	r4, r4, r8
   1adb4:	lsl	r1, r0, sl
   1adb8:	orr	r1, r1, r0, lsr fp
   1adbc:	lsl	r0, r0, ip
   1adc0:	sbc	r5, r5, r9
   1adc4:	cmp	ip, #0
   1adc8:	beq	1ae54 <_obstack_memory_used@@Base+0xd54>
   1adcc:	lsr	r6, r8, #1
   1add0:	orr	r6, r6, r9, lsl #31
   1add4:	lsr	r7, r9, #1
   1add8:	mov	r2, ip
   1addc:	b	1ae00 <_obstack_memory_used@@Base+0xd00>
   1ade0:	subs	r3, r4, r6
   1ade4:	sbc	r8, r5, r7
   1ade8:	adds	r3, r3, r3
   1adec:	adc	r8, r8, r8
   1adf0:	adds	r4, r3, #1
   1adf4:	adc	r5, r8, #0
   1adf8:	subs	r2, r2, #1
   1adfc:	beq	1ae1c <_obstack_memory_used@@Base+0xd1c>
   1ae00:	cmp	r5, r7
   1ae04:	cmpeq	r4, r6
   1ae08:	bcs	1ade0 <_obstack_memory_used@@Base+0xce0>
   1ae0c:	adds	r4, r4, r4
   1ae10:	adc	r5, r5, r5
   1ae14:	subs	r2, r2, #1
   1ae18:	bne	1ae00 <_obstack_memory_used@@Base+0xd00>
   1ae1c:	lsr	r3, r4, ip
   1ae20:	orr	r3, r3, r5, lsl fp
   1ae24:	lsr	r2, r5, ip
   1ae28:	orr	r3, r3, r5, lsr sl
   1ae2c:	adds	r0, r0, r4
   1ae30:	mov	r4, r3
   1ae34:	lsl	r3, r2, ip
   1ae38:	orr	r3, r3, r4, lsl sl
   1ae3c:	lsl	ip, r4, ip
   1ae40:	orr	r3, r3, r4, lsr fp
   1ae44:	adc	r1, r1, r5
   1ae48:	subs	r0, r0, ip
   1ae4c:	mov	r5, r2
   1ae50:	sbc	r1, r1, r3
   1ae54:	cmp	lr, #0
   1ae58:	strdne	r4, [lr]
   1ae5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae60:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ae64:	mov	r7, r0
   1ae68:	ldr	r6, [pc, #72]	; 1aeb8 <_obstack_memory_used@@Base+0xdb8>
   1ae6c:	ldr	r5, [pc, #72]	; 1aebc <_obstack_memory_used@@Base+0xdbc>
   1ae70:	add	r6, pc, r6
   1ae74:	add	r5, pc, r5
   1ae78:	sub	r6, r6, r5
   1ae7c:	mov	r8, r1
   1ae80:	mov	r9, r2
   1ae84:	bl	11060 <calloc@plt-0x20>
   1ae88:	asrs	r6, r6, #2
   1ae8c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ae90:	mov	r4, #0
   1ae94:	add	r4, r4, #1
   1ae98:	ldr	r3, [r5], #4
   1ae9c:	mov	r2, r9
   1aea0:	mov	r1, r8
   1aea4:	mov	r0, r7
   1aea8:	blx	r3
   1aeac:	cmp	r6, r4
   1aeb0:	bne	1ae94 <_obstack_memory_used@@Base+0xd94>
   1aeb4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aeb8:	muleq	r1, ip, r0
   1aebc:	muleq	r1, r4, r0
   1aec0:	bx	lr
   1aec4:	ldr	r3, [pc, #12]	; 1aed8 <_obstack_memory_used@@Base+0xdd8>
   1aec8:	mov	r1, #0
   1aecc:	add	r3, pc, r3
   1aed0:	ldr	r2, [r3]
   1aed4:	b	112cc <__cxa_atexit@plt>
   1aed8:	andeq	r1, r1, r4, asr r2
   1aedc:	mov	r2, r1
   1aee0:	mov	r1, r0
   1aee4:	mov	r0, #3
   1aee8:	b	11374 <__xstat64@plt>
   1aeec:	mov	r2, r1
   1aef0:	mov	r1, r0
   1aef4:	mov	r0, #3
   1aef8:	b	11194 <__fxstat64@plt>

Disassembly of section .fini:

0001aefc <.fini>:
   1aefc:	push	{r3, lr}
   1af00:	pop	{r3, pc}
