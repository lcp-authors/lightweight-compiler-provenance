
../repos/coreutils/src/truncate:     file format elf32-littlearm


Disassembly of section .init:

00010c14 <.init>:
   10c14:	push	{r3, lr}
   10c18:	bl	1193c <__assert_fail@plt+0xab0>
   10c1c:	pop	{r3, pc}

Disassembly of section .plt:

00010c20 <calloc@plt-0x14>:
   10c20:	push	{lr}		; (str lr, [sp, #-4]!)
   10c24:	ldr	lr, [pc, #4]	; 10c30 <calloc@plt-0x4>
   10c28:	add	lr, pc, lr
   10c2c:	ldr	pc, [lr, #8]!
   10c30:	ldrdeq	r6, [r1], -r0

00010c34 <calloc@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #90112	; 0x16000
   10c3c:	ldr	pc, [ip, #976]!	; 0x3d0

00010c40 <fputs_unlocked@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #90112	; 0x16000
   10c48:	ldr	pc, [ip, #968]!	; 0x3c8

00010c4c <raise@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #90112	; 0x16000
   10c54:	ldr	pc, [ip, #960]!	; 0x3c0

00010c58 <strcmp@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #90112	; 0x16000
   10c60:	ldr	pc, [ip, #952]!	; 0x3b8

00010c64 <fflush@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #90112	; 0x16000
   10c6c:	ldr	pc, [ip, #944]!	; 0x3b0

00010c70 <free@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #90112	; 0x16000
   10c78:	ldr	pc, [ip, #936]!	; 0x3a8

00010c7c <_exit@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #90112	; 0x16000
   10c84:	ldr	pc, [ip, #928]!	; 0x3a0

00010c88 <memcpy@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #90112	; 0x16000
   10c90:	ldr	pc, [ip, #920]!	; 0x398

00010c94 <mbsinit@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #90112	; 0x16000
   10c9c:	ldr	pc, [ip, #912]!	; 0x390

00010ca0 <ftruncate64@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #90112	; 0x16000
   10ca8:	ldr	pc, [ip, #904]!	; 0x388

00010cac <memcmp@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #90112	; 0x16000
   10cb4:	ldr	pc, [ip, #896]!	; 0x380

00010cb8 <fputc_unlocked@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #90112	; 0x16000
   10cc0:	ldr	pc, [ip, #888]!	; 0x378

00010cc4 <dcgettext@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #90112	; 0x16000
   10ccc:	ldr	pc, [ip, #880]!	; 0x370

00010cd0 <realloc@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #90112	; 0x16000
   10cd8:	ldr	pc, [ip, #872]!	; 0x368

00010cdc <textdomain@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #90112	; 0x16000
   10ce4:	ldr	pc, [ip, #864]!	; 0x360

00010ce8 <iswprint@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #90112	; 0x16000
   10cf0:	ldr	pc, [ip, #856]!	; 0x358

00010cf4 <__fxstat64@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #90112	; 0x16000
   10cfc:	ldr	pc, [ip, #848]!	; 0x350

00010d00 <fwrite@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #90112	; 0x16000
   10d08:	ldr	pc, [ip, #840]!	; 0x348

00010d0c <lseek64@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #90112	; 0x16000
   10d14:	ldr	pc, [ip, #832]!	; 0x340

00010d18 <__ctype_get_mb_cur_max@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #90112	; 0x16000
   10d20:	ldr	pc, [ip, #824]!	; 0x338

00010d24 <__fpending@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #90112	; 0x16000
   10d2c:	ldr	pc, [ip, #816]!	; 0x330

00010d30 <mbrtowc@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #90112	; 0x16000
   10d38:	ldr	pc, [ip, #808]!	; 0x328

00010d3c <error@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #90112	; 0x16000
   10d44:	ldr	pc, [ip, #800]!	; 0x320

00010d48 <open64@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #90112	; 0x16000
   10d50:	ldr	pc, [ip, #792]!	; 0x318

00010d54 <malloc@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #90112	; 0x16000
   10d5c:	ldr	pc, [ip, #784]!	; 0x310

00010d60 <__libc_start_main@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #90112	; 0x16000
   10d68:	ldr	pc, [ip, #776]!	; 0x308

00010d6c <__freading@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #90112	; 0x16000
   10d74:	ldr	pc, [ip, #768]!	; 0x300

00010d78 <__gmon_start__@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #90112	; 0x16000
   10d80:	ldr	pc, [ip, #760]!	; 0x2f8

00010d84 <getopt_long@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #90112	; 0x16000
   10d8c:	ldr	pc, [ip, #752]!	; 0x2f0

00010d90 <__ctype_b_loc@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #90112	; 0x16000
   10d98:	ldr	pc, [ip, #744]!	; 0x2e8

00010d9c <exit@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #90112	; 0x16000
   10da4:	ldr	pc, [ip, #736]!	; 0x2e0

00010da8 <strlen@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #90112	; 0x16000
   10db0:	ldr	pc, [ip, #728]!	; 0x2d8

00010db4 <strchr@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #90112	; 0x16000
   10dbc:	ldr	pc, [ip, #720]!	; 0x2d0

00010dc0 <__errno_location@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #90112	; 0x16000
   10dc8:	ldr	pc, [ip, #712]!	; 0x2c8

00010dcc <__cxa_atexit@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #90112	; 0x16000
   10dd4:	ldr	pc, [ip, #704]!	; 0x2c0

00010dd8 <memset@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #90112	; 0x16000
   10de0:	ldr	pc, [ip, #696]!	; 0x2b8

00010de4 <__printf_chk@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #90112	; 0x16000
   10dec:	ldr	pc, [ip, #688]!	; 0x2b0

00010df0 <fileno@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #90112	; 0x16000
   10df8:	ldr	pc, [ip, #680]!	; 0x2a8

00010dfc <__fprintf_chk@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #90112	; 0x16000
   10e04:	ldr	pc, [ip, #672]!	; 0x2a0

00010e08 <fclose@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #90112	; 0x16000
   10e10:	ldr	pc, [ip, #664]!	; 0x298

00010e14 <fseeko64@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #90112	; 0x16000
   10e1c:	ldr	pc, [ip, #656]!	; 0x290

00010e20 <setlocale@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #90112	; 0x16000
   10e28:	ldr	pc, [ip, #648]!	; 0x288

00010e2c <strrchr@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #90112	; 0x16000
   10e34:	ldr	pc, [ip, #640]!	; 0x280

00010e38 <nl_langinfo@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #90112	; 0x16000
   10e40:	ldr	pc, [ip, #632]!	; 0x278

00010e44 <__strtoll_internal@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #90112	; 0x16000
   10e4c:	ldr	pc, [ip, #624]!	; 0x270

00010e50 <bindtextdomain@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #90112	; 0x16000
   10e58:	ldr	pc, [ip, #616]!	; 0x268

00010e5c <__xstat64@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #90112	; 0x16000
   10e64:	ldr	pc, [ip, #608]!	; 0x260

00010e68 <strncmp@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #90112	; 0x16000
   10e70:	ldr	pc, [ip, #600]!	; 0x258

00010e74 <abort@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #90112	; 0x16000
   10e7c:	ldr	pc, [ip, #592]!	; 0x250

00010e80 <close@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #90112	; 0x16000
   10e88:	ldr	pc, [ip, #584]!	; 0x248

00010e8c <__assert_fail@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #90112	; 0x16000
   10e94:	ldr	pc, [ip, #576]!	; 0x240

Disassembly of section .text:

00010e98 <.text>:
   10e98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e9c:	mov	r7, r0
   10ea0:	sub	sp, sp, #164	; 0xa4
   10ea4:	ldr	r0, [r1]
   10ea8:	mov	r6, r1
   10eac:	bl	11e9c <__assert_fail@plt+0x1010>
   10eb0:	ldr	r1, [pc, #2484]	; 1186c <__assert_fail@plt+0x9e0>
   10eb4:	mov	r0, #6
   10eb8:	bl	10e20 <setlocale@plt>
   10ebc:	ldr	r1, [pc, #2476]	; 11870 <__assert_fail@plt+0x9e4>
   10ec0:	ldr	r0, [pc, #2476]	; 11874 <__assert_fail@plt+0x9e8>
   10ec4:	bl	10e50 <bindtextdomain@plt>
   10ec8:	ldr	r0, [pc, #2468]	; 11874 <__assert_fail@plt+0x9e8>
   10ecc:	bl	10cdc <textdomain@plt>
   10ed0:	ldr	r9, [pc, #2464]	; 11878 <__assert_fail@plt+0x9ec>
   10ed4:	ldr	r0, [pc, #2464]	; 1187c <__assert_fail@plt+0x9f0>
   10ed8:	ldr	r8, [pc, #2464]	; 11880 <__assert_fail@plt+0x9f4>
   10edc:	ldr	sl, [pc, #2464]	; 11884 <__assert_fail@plt+0x9f8>
   10ee0:	ldr	r5, [pc, #2464]	; 11888 <__assert_fail@plt+0x9fc>
   10ee4:	bl	15b6c <__assert_fail@plt+0x4ce0>
   10ee8:	mov	r2, #0
   10eec:	mov	r3, #0
   10ef0:	mov	fp, #0
   10ef4:	str	fp, [sp, #32]
   10ef8:	strd	r2, [sp, #24]
   10efc:	mov	r4, #0
   10f00:	str	r4, [sp]
   10f04:	mov	r3, r9
   10f08:	mov	r2, r8
   10f0c:	mov	r1, r6
   10f10:	mov	r0, r7
   10f14:	bl	10d84 <getopt_long@plt>
   10f18:	cmn	r0, #1
   10f1c:	beq	11128 <__assert_fail@plt+0x29c>
   10f20:	cmp	r0, #99	; 0x63
   10f24:	beq	11080 <__assert_fail@plt+0x1f4>
   10f28:	ble	10f4c <__assert_fail@plt+0xc0>
   10f2c:	cmp	r0, #114	; 0x72
   10f30:	beq	11074 <__assert_fail@plt+0x1e8>
   10f34:	cmp	r0, #115	; 0x73
   10f38:	beq	10f94 <__assert_fail@plt+0x108>
   10f3c:	cmp	r0, #111	; 0x6f
   10f40:	beq	11068 <__assert_fail@plt+0x1dc>
   10f44:	mov	r0, #1
   10f48:	bl	11a28 <__assert_fail@plt+0xb9c>
   10f4c:	cmn	r0, #3
   10f50:	beq	10f64 <__assert_fail@plt+0xd8>
   10f54:	cmn	r0, #2
   10f58:	bne	10f44 <__assert_fail@plt+0xb8>
   10f5c:	mov	r0, r4
   10f60:	bl	11a28 <__assert_fail@plt+0xb9c>
   10f64:	ldr	r1, [pc, #2336]	; 1188c <__assert_fail@plt+0xa00>
   10f68:	ldr	r3, [pc, #2336]	; 11890 <__assert_fail@plt+0xa04>
   10f6c:	ldr	r2, [pc, #2336]	; 11894 <__assert_fail@plt+0xa08>
   10f70:	str	r4, [sp, #4]
   10f74:	ldr	r0, [r1]
   10f78:	ldr	r3, [r3]
   10f7c:	ldr	r1, [pc, #2324]	; 11898 <__assert_fail@plt+0xa0c>
   10f80:	str	r2, [sp]
   10f84:	ldr	r2, [pc, #2320]	; 1189c <__assert_fail@plt+0xa10>
   10f88:	bl	14198 <__assert_fail@plt+0x330c>
   10f8c:	mov	r0, r4
   10f90:	bl	10d9c <exit@plt>
   10f94:	bl	10d90 <__ctype_b_loc@plt>
   10f98:	ldr	r3, [r5]
   10f9c:	ldr	r1, [r0]
   10fa0:	b	10fa8 <__assert_fail@plt+0x11c>
   10fa4:	str	r3, [r5]
   10fa8:	mov	ip, r3
   10fac:	ldrb	r2, [r3], #1
   10fb0:	lsl	r0, r2, #1
   10fb4:	ldrh	r0, [r1, r0]
   10fb8:	tst	r0, #8192	; 0x2000
   10fbc:	bne	10fa4 <__assert_fail@plt+0x118>
   10fc0:	cmp	r2, #47	; 0x2f
   10fc4:	beq	11118 <__assert_fail@plt+0x28c>
   10fc8:	bls	1108c <__assert_fail@plt+0x200>
   10fcc:	cmp	r2, #60	; 0x3c
   10fd0:	beq	11108 <__assert_fail@plt+0x27c>
   10fd4:	cmp	r2, #62	; 0x3e
   10fd8:	moveq	fp, #2
   10fdc:	addeq	ip, ip, #1
   10fe0:	streq	ip, [r5]
   10fe4:	ldr	r4, [r5]
   10fe8:	b	10ff4 <__assert_fail@plt+0x168>
   10fec:	add	r4, r4, #1
   10ff0:	str	r4, [r5]
   10ff4:	ldrb	r3, [r4]
   10ff8:	lsl	r2, r3, #1
   10ffc:	ldrh	r2, [r1, r2]
   11000:	tst	r2, #8192	; 0x2000
   11004:	bne	10fec <__assert_fail@plt+0x160>
   11008:	sub	r3, r3, #43	; 0x2b
   1100c:	ands	r3, r3, #253	; 0xfd
   11010:	mov	r2, #5
   11014:	bne	110a0 <__assert_fail@plt+0x214>
   11018:	cmp	fp, #0
   1101c:	bne	117e8 <__assert_fail@plt+0x95c>
   11020:	ldr	r1, [pc, #2168]	; 118a0 <__assert_fail@plt+0xa14>
   11024:	mov	r0, fp
   11028:	bl	10cc4 <dcgettext@plt>
   1102c:	ldr	r3, [pc, #2160]	; 118a4 <__assert_fail@plt+0xa18>
   11030:	mvn	r2, #0
   11034:	str	r3, [sp, #8]
   11038:	mvn	r3, #-2147483648	; 0x80000000
   1103c:	str	fp, [sp, #16]
   11040:	strd	r2, [sp]
   11044:	mov	fp, #1
   11048:	mov	r2, #0
   1104c:	mov	r3, #-2147483648	; 0x80000000
   11050:	str	fp, [sp, #32]
   11054:	str	r0, [sp, #12]
   11058:	mov	r0, r4
   1105c:	bl	14964 <__assert_fail@plt+0x3ad8>
   11060:	strd	r0, [sp, #24]
   11064:	b	10efc <__assert_fail@plt+0x70>
   11068:	mov	r3, #1
   1106c:	strb	r3, [sl, #1]
   11070:	b	10efc <__assert_fail@plt+0x70>
   11074:	ldr	r3, [r5]
   11078:	str	r3, [sl, #4]
   1107c:	b	10efc <__assert_fail@plt+0x70>
   11080:	mov	r3, #1
   11084:	strb	r3, [sl]
   11088:	b	10efc <__assert_fail@plt+0x70>
   1108c:	cmp	r2, #37	; 0x25
   11090:	addeq	ip, ip, #1
   11094:	streq	ip, [r5]
   11098:	moveq	fp, #5
   1109c:	b	10fe4 <__assert_fail@plt+0x158>
   110a0:	ldr	r1, [pc, #2040]	; 118a0 <__assert_fail@plt+0xa14>
   110a4:	mov	r0, #0
   110a8:	bl	10cc4 <dcgettext@plt>
   110ac:	ldr	r3, [pc, #2032]	; 118a4 <__assert_fail@plt+0xa18>
   110b0:	mvn	r2, #0
   110b4:	str	r3, [sp, #8]
   110b8:	mvn	r3, #-2147483648	; 0x80000000
   110bc:	strd	r2, [sp]
   110c0:	mov	r3, #0
   110c4:	str	r3, [sp, #16]
   110c8:	mov	r2, #0
   110cc:	mov	r3, #-2147483648	; 0x80000000
   110d0:	str	r0, [sp, #12]
   110d4:	mov	r0, r4
   110d8:	bl	14964 <__assert_fail@plt+0x3ad8>
   110dc:	mov	r2, r0
   110e0:	mov	r3, r1
   110e4:	strd	r2, [sp, #24]
   110e8:	orr	r3, r0, r3
   110ec:	sub	r2, fp, #4
   110f0:	cmp	r2, #1
   110f4:	cmpls	r3, #0
   110f8:	beq	117c8 <__assert_fail@plt+0x93c>
   110fc:	mov	r3, #1
   11100:	str	r3, [sp, #32]
   11104:	b	10efc <__assert_fail@plt+0x70>
   11108:	add	ip, ip, #1
   1110c:	str	ip, [r5]
   11110:	mov	fp, #3
   11114:	b	10fe4 <__assert_fail@plt+0x158>
   11118:	add	ip, ip, #1
   1111c:	str	ip, [r5]
   11120:	mov	fp, #4
   11124:	b	10fe4 <__assert_fail@plt+0x158>
   11128:	ldr	r3, [pc, #1912]	; 118a8 <__assert_fail@plt+0xa1c>
   1112c:	ldr	r5, [r3]
   11130:	ldr	r3, [pc, #1868]	; 11884 <__assert_fail@plt+0x9f8>
   11134:	sub	r7, r7, r5
   11138:	lsl	r5, r5, #2
   1113c:	ldr	r8, [r3, #4]
   11140:	cmp	r8, r4
   11144:	beq	116cc <__assert_fail@plt+0x840>
   11148:	ldr	r9, [sp, #32]
   1114c:	cmp	fp, #0
   11150:	movne	r9, #0
   11154:	andeq	r9, r9, #1
   11158:	cmp	r9, #0
   1115c:	bne	11800 <__assert_fail@plt+0x974>
   11160:	ldr	r3, [pc, #1820]	; 11884 <__assert_fail@plt+0x9f8>
   11164:	ldrb	r4, [r3, #1]
   11168:	ldr	r3, [sp, #32]
   1116c:	eor	r4, r4, #1
   11170:	orrs	r4, r3, r4
   11174:	beq	11840 <__assert_fail@plt+0x9b4>
   11178:	cmp	r7, #0
   1117c:	ble	116e0 <__assert_fail@plt+0x854>
   11180:	mov	r1, r8
   11184:	add	r2, sp, #56	; 0x38
   11188:	mov	r0, #3
   1118c:	bl	10e5c <__xstat64@plt>
   11190:	subs	r1, r0, #0
   11194:	bne	117a4 <__assert_fail@plt+0x918>
   11198:	ldr	r3, [sp, #72]	; 0x48
   1119c:	and	r3, r3, #53248	; 0xd000
   111a0:	cmp	r3, #32768	; 0x8000
   111a4:	bne	11640 <__assert_fail@plt+0x7b4>
   111a8:	ldrd	r2, [sp, #104]	; 0x68
   111ac:	cmp	r2, #0
   111b0:	strd	r2, [sp, #40]	; 0x28
   111b4:	sbcs	r3, r3, #0
   111b8:	blt	11650 <__assert_fail@plt+0x7c4>
   111bc:	ldr	r3, [sp, #32]
   111c0:	cmp	r3, #0
   111c4:	bne	111dc <__assert_fail@plt+0x350>
   111c8:	ldrd	r2, [sp, #40]	; 0x28
   111cc:	strd	r2, [sp, #24]
   111d0:	mvn	r2, #0
   111d4:	mvn	r3, #0
   111d8:	strd	r2, [sp, #40]	; 0x28
   111dc:	ldr	r3, [pc, #1696]	; 11884 <__assert_fail@plt+0x9f8>
   111e0:	sub	r5, r5, #4
   111e4:	ldr	r2, [pc, #1728]	; 118ac <__assert_fail@plt+0xa20>
   111e8:	ldrb	r1, [r3]
   111ec:	ldr	r3, [pc, #1724]	; 118b0 <__assert_fail@plt+0xa24>
   111f0:	add	r7, r6, r5
   111f4:	cmp	r1, #0
   111f8:	mov	sl, #0
   111fc:	movne	r2, r3
   11200:	str	r2, [sp, #48]	; 0x30
   11204:	ldr	r4, [r7, #4]!
   11208:	cmp	r4, #0
   1120c:	beq	112fc <__assert_fail@plt+0x470>
   11210:	ldr	r2, [pc, #1692]	; 118b4 <__assert_fail@plt+0xa28>
   11214:	ldr	r1, [sp, #48]	; 0x30
   11218:	mov	r0, r4
   1121c:	bl	10d48 <open64@plt>
   11220:	ldr	r3, [pc, #1628]	; 11884 <__assert_fail@plt+0x9f8>
   11224:	subs	r5, r0, #0
   11228:	blt	11308 <__assert_fail@plt+0x47c>
   1122c:	ldrb	r3, [r3, #1]
   11230:	cmp	r3, #0
   11234:	bne	11470 <__assert_fail@plt+0x5e4>
   11238:	ldr	r3, [sp, #44]	; 0x2c
   1123c:	lsr	r3, r3, #31
   11240:	cmp	fp, #0
   11244:	moveq	r3, #0
   11248:	andne	r3, r3, #1
   1124c:	cmp	r3, #0
   11250:	bne	11414 <__assert_fail@plt+0x588>
   11254:	ldrd	r2, [sp, #24]
   11258:	strd	r2, [sp, #32]
   1125c:	cmp	fp, #0
   11260:	bne	11370 <__assert_fail@plt+0x4e4>
   11264:	ldrd	r8, [sp, #32]
   11268:	cmp	r8, #0
   1126c:	sbcs	r3, r9, #0
   11270:	movlt	r8, #0
   11274:	movlt	r9, r8
   11278:	mov	r2, r8
   1127c:	mov	r3, r9
   11280:	mov	r0, r5
   11284:	bl	10ca0 <ftruncate64@plt>
   11288:	cmp	r0, #0
   1128c:	moveq	r6, #1
   11290:	beq	112e0 <__assert_fail@plt+0x454>
   11294:	bl	10dc0 <__errno_location@plt>
   11298:	mov	r6, #0
   1129c:	mov	r2, #5
   112a0:	ldr	r1, [pc, #1552]	; 118b8 <__assert_fail@plt+0xa2c>
   112a4:	ldr	r3, [r0]
   112a8:	mov	r0, r6
   112ac:	str	r3, [sp, #52]	; 0x34
   112b0:	bl	10cc4 <dcgettext@plt>
   112b4:	mov	r1, r4
   112b8:	str	r0, [sp, #32]
   112bc:	mov	r0, #4
   112c0:	bl	13b1c <__assert_fail@plt+0x2c90>
   112c4:	ldr	r3, [sp, #52]	; 0x34
   112c8:	ldr	r2, [sp, #32]
   112cc:	mov	r1, r3
   112d0:	strd	r8, [sp]
   112d4:	mov	r3, r0
   112d8:	mov	r0, r6
   112dc:	bl	10d3c <error@plt>
   112e0:	mov	r0, r5
   112e4:	bl	10e80 <close@plt>
   112e8:	cmp	r0, #0
   112ec:	bne	11500 <__assert_fail@plt+0x674>
   112f0:	eor	r6, r6, #1
   112f4:	orr	sl, sl, r6
   112f8:	b	11204 <__assert_fail@plt+0x378>
   112fc:	mov	r0, sl
   11300:	add	sp, sp, #164	; 0xa4
   11304:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11308:	ldrb	r3, [r3]
   1130c:	cmp	r3, #0
   11310:	beq	11324 <__assert_fail@plt+0x498>
   11314:	bl	10dc0 <__errno_location@plt>
   11318:	ldr	r3, [r0]
   1131c:	cmp	r3, #2
   11320:	beq	11204 <__assert_fail@plt+0x378>
   11324:	bl	10dc0 <__errno_location@plt>
   11328:	ldr	r1, [pc, #1420]	; 118bc <__assert_fail@plt+0xa30>
   1132c:	mov	r2, #5
   11330:	ldr	r5, [r0]
   11334:	mov	r0, #0
   11338:	bl	10cc4 <dcgettext@plt>
   1133c:	mov	r1, r4
   11340:	mov	sl, #1
   11344:	mov	r6, r0
   11348:	mov	r0, #4
   1134c:	bl	13b1c <__assert_fail@plt+0x2c90>
   11350:	mov	r2, r6
   11354:	mov	r1, r5
   11358:	mov	r3, r0
   1135c:	mov	r0, #0
   11360:	bl	10d3c <error@plt>
   11364:	b	11204 <__assert_fail@plt+0x378>
   11368:	ldrd	r2, [sp, #24]
   1136c:	strd	r2, [sp, #32]
   11370:	ldrd	r2, [sp, #40]	; 0x28
   11374:	mvn	r1, #0
   11378:	mvn	r0, #0
   1137c:	cmp	r3, r1
   11380:	cmpeq	r2, r0
   11384:	beq	1156c <__assert_fail@plt+0x6e0>
   11388:	ldrd	r8, [sp, #40]	; 0x28
   1138c:	cmp	fp, #2
   11390:	ldrd	r2, [sp, #32]
   11394:	beq	11558 <__assert_fail@plt+0x6cc>
   11398:	cmp	fp, #3
   1139c:	beq	11598 <__assert_fail@plt+0x70c>
   113a0:	cmp	fp, #4
   113a4:	beq	115bc <__assert_fail@plt+0x730>
   113a8:	cmp	fp, #5
   113ac:	beq	11614 <__assert_fail@plt+0x788>
   113b0:	cmp	r2, #0
   113b4:	sbcs	r1, r3, #0
   113b8:	blt	115ac <__assert_fail@plt+0x720>
   113bc:	mvn	r0, #0
   113c0:	subs	r0, r0, r2
   113c4:	mvn	r1, #-2147483648	; 0x80000000
   113c8:	sbc	r1, r1, r3
   113cc:	cmp	r0, r8
   113d0:	sbcs	r1, r1, r9
   113d4:	bge	115ac <__assert_fail@plt+0x720>
   113d8:	ldr	r1, [pc, #1248]	; 118c0 <__assert_fail@plt+0xa34>
   113dc:	mov	r2, #5
   113e0:	mov	r0, #0
   113e4:	bl	10cc4 <dcgettext@plt>
   113e8:	mov	r1, r4
   113ec:	mov	r6, r0
   113f0:	mov	r0, #4
   113f4:	bl	13b1c <__assert_fail@plt+0x2c90>
   113f8:	mov	r1, #0
   113fc:	mov	r2, r6
   11400:	mov	r6, #0
   11404:	mov	r3, r0
   11408:	mov	r0, r1
   1140c:	bl	10d3c <error@plt>
   11410:	b	112e0 <__assert_fail@plt+0x454>
   11414:	add	r2, sp, #56	; 0x38
   11418:	mov	r1, r5
   1141c:	mov	r0, #3
   11420:	bl	10cf4 <__fxstat64@plt>
   11424:	cmp	r0, #0
   11428:	beq	11368 <__assert_fail@plt+0x4dc>
   1142c:	bl	10dc0 <__errno_location@plt>
   11430:	ldr	r1, [pc, #1164]	; 118c4 <__assert_fail@plt+0xa38>
   11434:	mov	r2, #5
   11438:	mov	r6, #0
   1143c:	ldr	r8, [r0]
   11440:	mov	r0, r6
   11444:	bl	10cc4 <dcgettext@plt>
   11448:	mov	r1, r4
   1144c:	mov	r9, r0
   11450:	mov	r0, #4
   11454:	bl	13b1c <__assert_fail@plt+0x2c90>
   11458:	mov	r2, r9
   1145c:	mov	r1, r8
   11460:	mov	r3, r0
   11464:	mov	r0, r6
   11468:	bl	10d3c <error@plt>
   1146c:	b	112e0 <__assert_fail@plt+0x454>
   11470:	add	r2, sp, #56	; 0x38
   11474:	mov	r1, r5
   11478:	mov	r0, #3
   1147c:	bl	10cf4 <__fxstat64@plt>
   11480:	cmp	r0, #0
   11484:	bne	1142c <__assert_fail@plt+0x5a0>
   11488:	ldr	r6, [sp, #112]	; 0x70
   1148c:	sub	r3, r6, #1
   11490:	cmn	r3, #-536870911	; 0xe0000001
   11494:	ldrd	r2, [sp, #24]
   11498:	movhi	r6, #512	; 0x200
   1149c:	cmp	r2, #0
   114a0:	sbcs	r3, r3, #0
   114a4:	blt	115d4 <__assert_fail@plt+0x748>
   114a8:	mov	r2, r6
   114ac:	asr	r3, r6, #31
   114b0:	mvn	r0, #0
   114b4:	mvn	r1, #-2147483648	; 0x80000000
   114b8:	bl	158fc <__assert_fail@plt+0x4a70>
   114bc:	ldrd	r2, [sp, #24]
   114c0:	cmp	r0, r2
   114c4:	sbcs	r3, r1, r3
   114c8:	movlt	r3, #1
   114cc:	movge	r3, #0
   114d0:	cmp	r3, #0
   114d4:	bne	11510 <__assert_fail@plt+0x684>
   114d8:	ldrd	r8, [sp, #24]
   114dc:	asr	r1, r6, #31
   114e0:	umull	r2, r3, r6, r8
   114e4:	mul	ip, r6, r9
   114e8:	strd	r2, [sp, #32]
   114ec:	mla	r3, r8, r1, ip
   114f0:	ldr	r2, [sp, #36]	; 0x24
   114f4:	add	r3, r3, r2
   114f8:	str	r3, [sp, #36]	; 0x24
   114fc:	b	1125c <__assert_fail@plt+0x3d0>
   11500:	bl	10dc0 <__errno_location@plt>
   11504:	mov	r2, #5
   11508:	ldr	r1, [pc, #952]	; 118c8 <__assert_fail@plt+0xa3c>
   1150c:	b	11330 <__assert_fail@plt+0x4a4>
   11510:	mov	r2, #5
   11514:	ldr	r1, [pc, #944]	; 118cc <__assert_fail@plt+0xa40>
   11518:	mov	r0, #0
   1151c:	bl	10cc4 <dcgettext@plt>
   11520:	mov	r1, r4
   11524:	mov	r8, r0
   11528:	mov	r0, #4
   1152c:	bl	13b1c <__assert_fail@plt+0x2c90>
   11530:	mov	r2, r8
   11534:	ldrd	r8, [sp, #24]
   11538:	mov	r1, #0
   1153c:	str	r6, [sp, #8]
   11540:	strd	r8, [sp]
   11544:	mov	r6, r1
   11548:	str	r0, [sp, #12]
   1154c:	mov	r0, r1
   11550:	bl	10d3c <error@plt>
   11554:	b	112e0 <__assert_fail@plt+0x454>
   11558:	cmp	r8, r2
   1155c:	sbcs	r1, r9, r3
   11560:	movlt	r8, r2
   11564:	movlt	r9, r3
   11568:	b	11278 <__assert_fail@plt+0x3ec>
   1156c:	ldr	r3, [sp, #72]	; 0x48
   11570:	and	r3, r3, #53248	; 0xd000
   11574:	cmp	r3, #32768	; 0x8000
   11578:	bne	11690 <__assert_fail@plt+0x804>
   1157c:	ldrd	r8, [sp, #104]	; 0x68
   11580:	cmp	r8, #0
   11584:	sbcs	r3, r9, #0
   11588:	movlt	r2, #5
   1158c:	ldrlt	r1, [pc, #828]	; 118d0 <__assert_fail@plt+0xa44>
   11590:	bge	1138c <__assert_fail@plt+0x500>
   11594:	b	113e0 <__assert_fail@plt+0x554>
   11598:	cmp	r8, r2
   1159c:	sbcs	r3, r9, r3
   115a0:	bge	11264 <__assert_fail@plt+0x3d8>
   115a4:	strd	r8, [sp, #32]
   115a8:	b	11264 <__assert_fail@plt+0x3d8>
   115ac:	adds	r0, r8, r2
   115b0:	adc	r1, r9, r3
   115b4:	strd	r0, [sp, #32]
   115b8:	b	11264 <__assert_fail@plt+0x3d8>
   115bc:	mov	r0, r8
   115c0:	mov	r1, r9
   115c4:	bl	158fc <__assert_fail@plt+0x4a70>
   115c8:	subs	r8, r8, r2
   115cc:	sbc	r9, r9, r3
   115d0:	b	115a4 <__assert_fail@plt+0x718>
   115d4:	ldrd	r2, [sp, #24]
   115d8:	mvn	r9, #0
   115dc:	mvn	r8, #0
   115e0:	cmp	r3, r9
   115e4:	cmpeq	r2, r8
   115e8:	moveq	r3, r0
   115ec:	beq	114d0 <__assert_fail@plt+0x644>
   115f0:	mov	r0, #0
   115f4:	mov	r1, #-2147483648	; 0x80000000
   115f8:	bl	158fc <__assert_fail@plt+0x4a70>
   115fc:	asr	r3, r6, #31
   11600:	cmp	r0, r6
   11604:	sbcs	r3, r1, r3
   11608:	movlt	r3, #1
   1160c:	movge	r3, #0
   11610:	b	114d0 <__assert_fail@plt+0x644>
   11614:	mov	r0, r8
   11618:	mov	r1, r9
   1161c:	bl	158fc <__assert_fail@plt+0x4a70>
   11620:	orrs	r1, r2, r3
   11624:	beq	115ac <__assert_fail@plt+0x720>
   11628:	ldrd	r0, [sp, #32]
   1162c:	subs	r0, r0, r2
   11630:	sbc	r1, r1, r3
   11634:	mov	r2, r0
   11638:	mov	r3, r1
   1163c:	b	113b0 <__assert_fail@plt+0x524>
   11640:	mov	r0, r8
   11644:	bl	10d48 <open64@plt>
   11648:	subs	r4, r0, #0
   1164c:	bge	11708 <__assert_fail@plt+0x87c>
   11650:	bl	10dc0 <__errno_location@plt>
   11654:	ldr	r1, [pc, #632]	; 118d4 <__assert_fail@plt+0xa48>
   11658:	mov	r2, #5
   1165c:	ldr	r4, [r0]
   11660:	mov	r0, #0
   11664:	bl	10cc4 <dcgettext@plt>
   11668:	ldr	r3, [pc, #532]	; 11884 <__assert_fail@plt+0x9f8>
   1166c:	ldr	r1, [r3, #4]
   11670:	mov	r5, r0
   11674:	mov	r0, #4
   11678:	bl	13b1c <__assert_fail@plt+0x2c90>
   1167c:	mov	r2, r5
   11680:	mov	r1, r4
   11684:	mov	r3, r0
   11688:	mov	r0, #1
   1168c:	bl	10d3c <error@plt>
   11690:	mov	r3, #2
   11694:	mov	r2, #0
   11698:	str	r3, [sp]
   1169c:	mov	r0, r5
   116a0:	mov	r3, r2
   116a4:	bl	10d0c <lseek64@plt>
   116a8:	cmp	r0, #0
   116ac:	sbcs	r3, r1, #0
   116b0:	mov	r8, r0
   116b4:	mov	r9, r1
   116b8:	bge	1138c <__assert_fail@plt+0x500>
   116bc:	bl	10dc0 <__errno_location@plt>
   116c0:	mov	r2, #5
   116c4:	ldr	r1, [pc, #520]	; 118d4 <__assert_fail@plt+0xa48>
   116c8:	b	11438 <__assert_fail@plt+0x5ac>
   116cc:	ldr	r3, [sp, #32]
   116d0:	cmp	r3, r4
   116d4:	beq	11754 <__assert_fail@plt+0x8c8>
   116d8:	cmp	r7, #0
   116dc:	bgt	111d0 <__assert_fail@plt+0x344>
   116e0:	mov	r2, #5
   116e4:	ldr	r1, [pc, #492]	; 118d8 <__assert_fail@plt+0xa4c>
   116e8:	mov	r0, #0
   116ec:	bl	10cc4 <dcgettext@plt>
   116f0:	mov	r2, r0
   116f4:	mov	r1, #0
   116f8:	mov	r0, r1
   116fc:	bl	10d3c <error@plt>
   11700:	mov	r0, #1
   11704:	bl	11a28 <__assert_fail@plt+0xb9c>
   11708:	mov	r3, #2
   1170c:	mov	r2, #0
   11710:	str	r3, [sp]
   11714:	mov	r3, #0
   11718:	bl	10d0c <lseek64@plt>
   1171c:	mov	r9, r1
   11720:	mov	r8, r0
   11724:	strd	r8, [sp, #40]	; 0x28
   11728:	bl	10dc0 <__errno_location@plt>
   1172c:	mov	r7, r0
   11730:	mov	r0, r4
   11734:	ldr	r4, [r7]
   11738:	bl	10e80 <close@plt>
   1173c:	mov	r3, r9
   11740:	cmp	r8, #0
   11744:	sbcs	r3, r3, #0
   11748:	bge	111bc <__assert_fail@plt+0x330>
   1174c:	str	r4, [r7]
   11750:	b	11650 <__assert_fail@plt+0x7c4>
   11754:	mov	r2, #5
   11758:	mov	r0, r3
   1175c:	ldr	r1, [pc, #376]	; 118dc <__assert_fail@plt+0xa50>
   11760:	mov	r6, r3
   11764:	bl	10cc4 <dcgettext@plt>
   11768:	ldr	r1, [pc, #368]	; 118e0 <__assert_fail@plt+0xa54>
   1176c:	mov	r4, r0
   11770:	mov	r0, r6
   11774:	bl	13d4c <__assert_fail@plt+0x2ec0>
   11778:	ldr	r1, [pc, #356]	; 118e4 <__assert_fail@plt+0xa58>
   1177c:	mov	r5, r0
   11780:	mov	r0, #1
   11784:	bl	13d4c <__assert_fail@plt+0x2ec0>
   11788:	mov	r3, r5
   1178c:	mov	r2, r4
   11790:	mov	r1, r6
   11794:	str	r0, [sp]
   11798:	mov	r0, r1
   1179c:	bl	10d3c <error@plt>
   117a0:	b	10f44 <__assert_fail@plt+0xb8>
   117a4:	bl	10dc0 <__errno_location@plt>
   117a8:	ldr	r1, [pc, #312]	; 118e8 <__assert_fail@plt+0xa5c>
   117ac:	mov	r2, #5
   117b0:	ldr	r4, [r0]
   117b4:	mov	r0, r9
   117b8:	bl	10cc4 <dcgettext@plt>
   117bc:	mov	r1, r8
   117c0:	mov	r5, r0
   117c4:	b	11674 <__assert_fail@plt+0x7e8>
   117c8:	mov	r2, #5
   117cc:	ldr	r1, [pc, #280]	; 118ec <__assert_fail@plt+0xa60>
   117d0:	mov	r0, #0
   117d4:	bl	10cc4 <dcgettext@plt>
   117d8:	mov	r1, #0
   117dc:	mov	r2, r0
   117e0:	mov	r0, #1
   117e4:	bl	10d3c <error@plt>
   117e8:	ldr	r1, [pc, #256]	; 118f0 <__assert_fail@plt+0xa64>
   117ec:	mov	r0, r3
   117f0:	str	r3, [sp, #24]
   117f4:	bl	10cc4 <dcgettext@plt>
   117f8:	mov	r2, r0
   117fc:	b	116f4 <__assert_fail@plt+0x868>
   11800:	mov	r2, #5
   11804:	ldr	r1, [pc, #232]	; 118f4 <__assert_fail@plt+0xa68>
   11808:	mov	r0, r4
   1180c:	bl	10cc4 <dcgettext@plt>
   11810:	ldr	r1, [pc, #200]	; 118e0 <__assert_fail@plt+0xa54>
   11814:	mov	r5, r0
   11818:	mov	r0, r4
   1181c:	bl	13d4c <__assert_fail@plt+0x2ec0>
   11820:	ldr	r1, [pc, #188]	; 118e4 <__assert_fail@plt+0xa58>
   11824:	mov	r6, r0
   11828:	mov	r0, #1
   1182c:	bl	13d4c <__assert_fail@plt+0x2ec0>
   11830:	mov	r3, r6
   11834:	mov	r2, r5
   11838:	mov	r1, r4
   1183c:	b	11794 <__assert_fail@plt+0x908>
   11840:	mov	r2, #5
   11844:	ldr	r1, [pc, #172]	; 118f8 <__assert_fail@plt+0xa6c>
   11848:	mov	r0, r4
   1184c:	bl	10cc4 <dcgettext@plt>
   11850:	ldr	r1, [pc, #164]	; 118fc <__assert_fail@plt+0xa70>
   11854:	mov	r5, r0
   11858:	mov	r0, r4
   1185c:	bl	13d4c <__assert_fail@plt+0x2ec0>
   11860:	ldr	r1, [pc, #120]	; 118e0 <__assert_fail@plt+0xa54>
   11864:	mov	r6, r0
   11868:	b	11828 <__assert_fail@plt+0x99c>
   1186c:	andeq	r5, r1, r8, lsl #25
   11870:	andeq	r6, r1, r8, asr #3
   11874:	andeq	r6, r1, r0, lsr #2
   11878:	andeq	r5, r1, r8, asr #23
   1187c:			; <UNDEFINED> instruction: 0x00011db8
   11880:	andeq	r6, r1, ip, asr #4
   11884:	andeq	r7, r2, r0, asr r1
   11888:	andeq	r7, r2, r8, asr #2
   1188c:	andeq	r7, r2, r4, asr #2
   11890:	andeq	r7, r2, r4, ror #1
   11894:	andeq	r6, r1, ip, lsr r2
   11898:	andeq	r5, r1, r8, lsr ip
   1189c:	andeq	r6, r1, ip, lsl r1
   118a0:	andeq	r6, r1, r8, lsl #4
   118a4:	andeq	r6, r1, r8, lsl r2
   118a8:	andeq	r7, r2, r8, lsr r1
   118ac:	andeq	r0, r0, r1, asr #16
   118b0:	andeq	r0, r0, r1, lsl #16
   118b4:			; <UNDEFINED> instruction: 0x000001b6
   118b8:	andeq	r6, r1, ip, ror r3
   118bc:	andeq	r6, r1, r4, lsr #6
   118c0:	andeq	r6, r1, r4, ror #7
   118c4:	andeq	r6, r1, r0, asr #6
   118c8:	andeq	r6, r1, r0, lsr #7
   118cc:			; <UNDEFINED> instruction: 0x000163b4
   118d0:	andeq	r6, r1, r0, asr r3
   118d4:	andeq	r6, r1, r8, lsl #6
   118d8:	andeq	r6, r1, r0, ror #5
   118dc:	andeq	r6, r1, r4, asr r2
   118e0:	andeq	r6, r1, r8, ror r2
   118e4:	andeq	r6, r1, r0, lsl #5
   118e8:	strdeq	r6, [r1], -r8
   118ec:	andeq	r6, r1, r8, lsr #4
   118f0:	andeq	r6, r1, r0, ror #3
   118f4:	andeq	r6, r1, ip, lsl #5
   118f8:			; <UNDEFINED> instruction: 0x000162b4
   118fc:	ldrdeq	r6, [r1], -r4
   11900:	mov	fp, #0
   11904:	mov	lr, #0
   11908:	pop	{r1}		; (ldr r1, [sp], #4)
   1190c:	mov	r2, sp
   11910:	push	{r2}		; (str r2, [sp, #-4]!)
   11914:	push	{r0}		; (str r0, [sp, #-4]!)
   11918:	ldr	ip, [pc, #16]	; 11930 <__assert_fail@plt+0xaa4>
   1191c:	push	{ip}		; (str ip, [sp, #-4]!)
   11920:	ldr	r0, [pc, #12]	; 11934 <__assert_fail@plt+0xaa8>
   11924:	ldr	r3, [pc, #12]	; 11938 <__assert_fail@plt+0xaac>
   11928:	bl	10d60 <__libc_start_main@plt>
   1192c:	bl	10e74 <abort@plt>
   11930:	andeq	r5, r1, r8, ror #22
   11934:	muleq	r1, r8, lr
   11938:	andeq	r5, r1, r8, lsl #22
   1193c:	ldr	r3, [pc, #20]	; 11958 <__assert_fail@plt+0xacc>
   11940:	ldr	r2, [pc, #20]	; 1195c <__assert_fail@plt+0xad0>
   11944:	add	r3, pc, r3
   11948:	ldr	r2, [r3, r2]
   1194c:	cmp	r2, #0
   11950:	bxeq	lr
   11954:	b	10d78 <__gmon_start__@plt>
   11958:			; <UNDEFINED> instruction: 0x000156b4
   1195c:	ldrdeq	r0, [r0], -r8
   11960:	ldr	r3, [pc, #28]	; 11984 <__assert_fail@plt+0xaf8>
   11964:	ldr	r0, [pc, #28]	; 11988 <__assert_fail@plt+0xafc>
   11968:	sub	r3, r3, r0
   1196c:	cmp	r3, #6
   11970:	bxls	lr
   11974:	ldr	r3, [pc, #16]	; 1198c <__assert_fail@plt+0xb00>
   11978:	cmp	r3, #0
   1197c:	bxeq	lr
   11980:	bx	r3
   11984:	andeq	r7, r2, pc, lsr #2
   11988:	andeq	r7, r2, ip, lsr #2
   1198c:	andeq	r0, r0, r0
   11990:	ldr	r1, [pc, #36]	; 119bc <__assert_fail@plt+0xb30>
   11994:	ldr	r0, [pc, #36]	; 119c0 <__assert_fail@plt+0xb34>
   11998:	sub	r1, r1, r0
   1199c:	asr	r1, r1, #2
   119a0:	add	r1, r1, r1, lsr #31
   119a4:	asrs	r1, r1, #1
   119a8:	bxeq	lr
   119ac:	ldr	r3, [pc, #16]	; 119c4 <__assert_fail@plt+0xb38>
   119b0:	cmp	r3, #0
   119b4:	bxeq	lr
   119b8:	bx	r3
   119bc:	andeq	r7, r2, ip, lsr #2
   119c0:	andeq	r7, r2, ip, lsr #2
   119c4:	andeq	r0, r0, r0
   119c8:	push	{r4, lr}
   119cc:	ldr	r4, [pc, #24]	; 119ec <__assert_fail@plt+0xb60>
   119d0:	ldrb	r3, [r4]
   119d4:	cmp	r3, #0
   119d8:	popne	{r4, pc}
   119dc:	bl	11960 <__assert_fail@plt+0xad4>
   119e0:	mov	r3, #1
   119e4:	strb	r3, [r4]
   119e8:	pop	{r4, pc}
   119ec:	andeq	r7, r2, ip, asr #2
   119f0:	ldr	r0, [pc, #40]	; 11a20 <__assert_fail@plt+0xb94>
   119f4:	ldr	r3, [r0]
   119f8:	cmp	r3, #0
   119fc:	bne	11a04 <__assert_fail@plt+0xb78>
   11a00:	b	11990 <__assert_fail@plt+0xb04>
   11a04:	ldr	r3, [pc, #24]	; 11a24 <__assert_fail@plt+0xb98>
   11a08:	cmp	r3, #0
   11a0c:	beq	11a00 <__assert_fail@plt+0xb74>
   11a10:	push	{r4, lr}
   11a14:	blx	r3
   11a18:	pop	{r4, lr}
   11a1c:	b	11990 <__assert_fail@plt+0xb04>
   11a20:	andeq	r6, r2, r4, lsl pc
   11a24:	andeq	r0, r0, r0
   11a28:	subs	r5, r0, #0
   11a2c:	push	{r7, lr}
   11a30:	sub	sp, sp, #56	; 0x38
   11a34:	beq	11a70 <__assert_fail@plt+0xbe4>
   11a38:	ldr	r3, [pc, #756]	; 11d34 <__assert_fail@plt+0xea8>
   11a3c:	mov	r2, #5
   11a40:	ldr	r1, [pc, #752]	; 11d38 <__assert_fail@plt+0xeac>
   11a44:	mov	r0, #0
   11a48:	ldr	r4, [r3]
   11a4c:	bl	10cc4 <dcgettext@plt>
   11a50:	ldr	r3, [pc, #740]	; 11d3c <__assert_fail@plt+0xeb0>
   11a54:	mov	r1, #1
   11a58:	ldr	r3, [r3]
   11a5c:	mov	r2, r0
   11a60:	mov	r0, r4
   11a64:	bl	10dfc <__fprintf_chk@plt>
   11a68:	mov	r0, r5
   11a6c:	bl	10d9c <exit@plt>
   11a70:	mov	r2, #5
   11a74:	ldr	r1, [pc, #708]	; 11d40 <__assert_fail@plt+0xeb4>
   11a78:	bl	10cc4 <dcgettext@plt>
   11a7c:	ldr	r3, [pc, #696]	; 11d3c <__assert_fail@plt+0xeb0>
   11a80:	ldr	r7, [pc, #700]	; 11d44 <__assert_fail@plt+0xeb8>
   11a84:	ldr	r4, [pc, #700]	; 11d48 <__assert_fail@plt+0xebc>
   11a88:	ldr	r2, [r3]
   11a8c:	mov	r1, r0
   11a90:	mov	r0, #1
   11a94:	bl	10de4 <__printf_chk@plt>
   11a98:	mov	r2, #5
   11a9c:	ldr	r1, [pc, #680]	; 11d4c <__assert_fail@plt+0xec0>
   11aa0:	mov	r0, r5
   11aa4:	bl	10cc4 <dcgettext@plt>
   11aa8:	ldr	r1, [r7]
   11aac:	bl	10c40 <fputs_unlocked@plt>
   11ab0:	mov	r2, #5
   11ab4:	ldr	r1, [pc, #660]	; 11d50 <__assert_fail@plt+0xec4>
   11ab8:	mov	r0, r5
   11abc:	bl	10cc4 <dcgettext@plt>
   11ac0:	ldr	r1, [r7]
   11ac4:	bl	10c40 <fputs_unlocked@plt>
   11ac8:	mov	r2, #5
   11acc:	ldr	r1, [pc, #640]	; 11d54 <__assert_fail@plt+0xec8>
   11ad0:	mov	r0, r5
   11ad4:	bl	10cc4 <dcgettext@plt>
   11ad8:	ldr	r1, [r7]
   11adc:	bl	10c40 <fputs_unlocked@plt>
   11ae0:	mov	r2, #5
   11ae4:	ldr	r1, [pc, #620]	; 11d58 <__assert_fail@plt+0xecc>
   11ae8:	mov	r0, r5
   11aec:	bl	10cc4 <dcgettext@plt>
   11af0:	ldr	r1, [r7]
   11af4:	bl	10c40 <fputs_unlocked@plt>
   11af8:	mov	r2, #5
   11afc:	ldr	r1, [pc, #600]	; 11d5c <__assert_fail@plt+0xed0>
   11b00:	mov	r0, r5
   11b04:	bl	10cc4 <dcgettext@plt>
   11b08:	ldr	r1, [r7]
   11b0c:	bl	10c40 <fputs_unlocked@plt>
   11b10:	mov	r2, #5
   11b14:	ldr	r1, [pc, #580]	; 11d60 <__assert_fail@plt+0xed4>
   11b18:	mov	r0, r5
   11b1c:	bl	10cc4 <dcgettext@plt>
   11b20:	ldr	r1, [r7]
   11b24:	bl	10c40 <fputs_unlocked@plt>
   11b28:	mov	r2, #5
   11b2c:	ldr	r1, [pc, #560]	; 11d64 <__assert_fail@plt+0xed8>
   11b30:	mov	r0, r5
   11b34:	bl	10cc4 <dcgettext@plt>
   11b38:	ldr	r1, [r7]
   11b3c:	bl	10c40 <fputs_unlocked@plt>
   11b40:	mov	r2, #5
   11b44:	ldr	r1, [pc, #540]	; 11d68 <__assert_fail@plt+0xedc>
   11b48:	mov	r0, r5
   11b4c:	bl	10cc4 <dcgettext@plt>
   11b50:	ldr	r1, [r7]
   11b54:	bl	10c40 <fputs_unlocked@plt>
   11b58:	mov	r2, #5
   11b5c:	ldr	r1, [pc, #520]	; 11d6c <__assert_fail@plt+0xee0>
   11b60:	mov	r0, r5
   11b64:	bl	10cc4 <dcgettext@plt>
   11b68:	ldr	r1, [r7]
   11b6c:	bl	10c40 <fputs_unlocked@plt>
   11b70:	ldm	r4!, {r0, r1, r2, r3}
   11b74:	mov	lr, sp
   11b78:	stmia	lr!, {r0, r1, r2, r3}
   11b7c:	ldm	r4!, {r0, r1, r2, r3}
   11b80:	ldr	ip, [sp]
   11b84:	stmia	lr!, {r0, r1, r2, r3}
   11b88:	cmp	ip, #0
   11b8c:	ldm	r4!, {r0, r1, r2, r3}
   11b90:	stmia	lr!, {r0, r1, r2, r3}
   11b94:	ldm	r4, {r0, r1}
   11b98:	moveq	r4, sp
   11b9c:	stm	lr, {r0, r1}
   11ba0:	beq	11bd0 <__assert_fail@plt+0xd44>
   11ba4:	ldr	r6, [pc, #452]	; 11d70 <__assert_fail@plt+0xee4>
   11ba8:	mov	r4, sp
   11bac:	b	11bbc <__assert_fail@plt+0xd30>
   11bb0:	ldr	ip, [r4, #8]!
   11bb4:	cmp	ip, #0
   11bb8:	beq	11bd0 <__assert_fail@plt+0xd44>
   11bbc:	mov	r1, ip
   11bc0:	mov	r0, r6
   11bc4:	bl	10c58 <strcmp@plt>
   11bc8:	cmp	r0, #0
   11bcc:	bne	11bb0 <__assert_fail@plt+0xd24>
   11bd0:	ldr	r4, [r4, #4]
   11bd4:	mov	r2, #5
   11bd8:	cmp	r4, #0
   11bdc:	ldr	r1, [pc, #400]	; 11d74 <__assert_fail@plt+0xee8>
   11be0:	beq	11c88 <__assert_fail@plt+0xdfc>
   11be4:	mov	r0, #0
   11be8:	bl	10cc4 <dcgettext@plt>
   11bec:	ldr	r3, [pc, #388]	; 11d78 <__assert_fail@plt+0xeec>
   11bf0:	ldr	r2, [pc, #388]	; 11d7c <__assert_fail@plt+0xef0>
   11bf4:	mov	r1, r0
   11bf8:	mov	r0, #1
   11bfc:	bl	10de4 <__printf_chk@plt>
   11c00:	mov	r1, #0
   11c04:	mov	r0, #5
   11c08:	bl	10e20 <setlocale@plt>
   11c0c:	cmp	r0, #0
   11c10:	ldreq	r6, [pc, #344]	; 11d70 <__assert_fail@plt+0xee4>
   11c14:	beq	11c30 <__assert_fail@plt+0xda4>
   11c18:	mov	r2, #3
   11c1c:	ldr	r1, [pc, #348]	; 11d80 <__assert_fail@plt+0xef4>
   11c20:	bl	10e68 <strncmp@plt>
   11c24:	ldr	r6, [pc, #324]	; 11d70 <__assert_fail@plt+0xee4>
   11c28:	cmp	r0, #0
   11c2c:	bne	11d18 <__assert_fail@plt+0xe8c>
   11c30:	mov	r2, #5
   11c34:	ldr	r1, [pc, #328]	; 11d84 <__assert_fail@plt+0xef8>
   11c38:	mov	r0, #0
   11c3c:	bl	10cc4 <dcgettext@plt>
   11c40:	ldr	r3, [pc, #296]	; 11d70 <__assert_fail@plt+0xee4>
   11c44:	ldr	r2, [pc, #300]	; 11d78 <__assert_fail@plt+0xeec>
   11c48:	mov	r1, r0
   11c4c:	mov	r0, #1
   11c50:	bl	10de4 <__printf_chk@plt>
   11c54:	mov	r2, #5
   11c58:	ldr	r1, [pc, #296]	; 11d88 <__assert_fail@plt+0xefc>
   11c5c:	mov	r0, #0
   11c60:	bl	10cc4 <dcgettext@plt>
   11c64:	ldr	r2, [pc, #288]	; 11d8c <__assert_fail@plt+0xf00>
   11c68:	cmp	r4, r6
   11c6c:	ldr	r3, [pc, #284]	; 11d90 <__assert_fail@plt+0xf04>
   11c70:	movne	r3, r2
   11c74:	mov	r1, r0
   11c78:	mov	r2, r4
   11c7c:	mov	r0, #1
   11c80:	bl	10de4 <__printf_chk@plt>
   11c84:	b	11a68 <__assert_fail@plt+0xbdc>
   11c88:	mov	r0, r4
   11c8c:	bl	10cc4 <dcgettext@plt>
   11c90:	ldr	r3, [pc, #224]	; 11d78 <__assert_fail@plt+0xeec>
   11c94:	ldr	r2, [pc, #224]	; 11d7c <__assert_fail@plt+0xef0>
   11c98:	mov	r1, r0
   11c9c:	mov	r0, #1
   11ca0:	bl	10de4 <__printf_chk@plt>
   11ca4:	mov	r1, r4
   11ca8:	mov	r0, #5
   11cac:	bl	10e20 <setlocale@plt>
   11cb0:	cmp	r0, #0
   11cb4:	beq	11ccc <__assert_fail@plt+0xe40>
   11cb8:	mov	r2, #3
   11cbc:	ldr	r1, [pc, #188]	; 11d80 <__assert_fail@plt+0xef4>
   11cc0:	bl	10e68 <strncmp@plt>
   11cc4:	cmp	r0, #0
   11cc8:	bne	11d10 <__assert_fail@plt+0xe84>
   11ccc:	mov	r2, #5
   11cd0:	ldr	r1, [pc, #172]	; 11d84 <__assert_fail@plt+0xef8>
   11cd4:	mov	r0, #0
   11cd8:	bl	10cc4 <dcgettext@plt>
   11cdc:	ldr	r3, [pc, #140]	; 11d70 <__assert_fail@plt+0xee4>
   11ce0:	ldr	r2, [pc, #144]	; 11d78 <__assert_fail@plt+0xeec>
   11ce4:	mov	r4, r3
   11ce8:	mov	r1, r0
   11cec:	mov	r0, #1
   11cf0:	bl	10de4 <__printf_chk@plt>
   11cf4:	ldr	r1, [pc, #140]	; 11d88 <__assert_fail@plt+0xefc>
   11cf8:	mov	r2, #5
   11cfc:	mov	r0, #0
   11d00:	bl	10cc4 <dcgettext@plt>
   11d04:	ldr	r3, [pc, #132]	; 11d90 <__assert_fail@plt+0xf04>
   11d08:	mov	r1, r0
   11d0c:	b	11c78 <__assert_fail@plt+0xdec>
   11d10:	ldr	r6, [pc, #88]	; 11d70 <__assert_fail@plt+0xee4>
   11d14:	mov	r4, r6
   11d18:	mov	r2, #5
   11d1c:	ldr	r1, [pc, #112]	; 11d94 <__assert_fail@plt+0xf08>
   11d20:	mov	r0, #0
   11d24:	bl	10cc4 <dcgettext@plt>
   11d28:	ldr	r1, [r7]
   11d2c:	bl	10c40 <fputs_unlocked@plt>
   11d30:	b	11c30 <__assert_fail@plt+0xda4>
   11d34:	andeq	r7, r2, r0, asr #2
   11d38:	andeq	r5, r1, r4, asr #24
   11d3c:	andeq	r7, r2, r0, ror #2
   11d40:	andeq	r5, r1, ip, ror #24
   11d44:	andeq	r7, r2, r4, asr #2
   11d48:	muleq	r1, r0, fp
   11d4c:	andeq	r5, r1, ip, lsl #25
   11d50:	andeq	r5, r1, r0, lsr #27
   11d54:	andeq	r5, r1, ip, ror #27
   11d58:	andeq	r5, r1, r0, lsr #28
   11d5c:	andeq	r5, r1, r0, ror lr
   11d60:	andeq	r5, r1, r0, ror #29
   11d64:	andeq	r5, r1, r0, lsl pc
   11d68:	andeq	r5, r1, r8, asr #30
   11d6c:	andeq	r6, r1, ip, lsl r0
   11d70:	andeq	r5, r1, r8, lsr ip
   11d74:	ldrdeq	r6, [r1], -ip
   11d78:	strdeq	r6, [r1], -r4
   11d7c:	andeq	r6, r1, ip, lsl r1
   11d80:	andeq	r6, r1, ip, lsr #2
   11d84:	andeq	r6, r1, r8, ror r1
   11d88:	muleq	r1, r4, r1
   11d8c:	andeq	r5, r1, r8, lsl #25
   11d90:	andeq	r6, r1, r0, lsl r4
   11d94:	andeq	r6, r1, r0, lsr r1
   11d98:	ldr	r3, [pc, #4]	; 11da4 <__assert_fail@plt+0xf18>
   11d9c:	str	r0, [r3]
   11da0:	bx	lr
   11da4:	andeq	r7, r2, r8, asr r1
   11da8:	ldr	r3, [pc, #4]	; 11db4 <__assert_fail@plt+0xf28>
   11dac:	strb	r0, [r3, #4]
   11db0:	bx	lr
   11db4:	andeq	r7, r2, r8, asr r1
   11db8:	ldr	r3, [pc, #192]	; 11e80 <__assert_fail@plt+0xff4>
   11dbc:	push	{r4, r5, r6, lr}
   11dc0:	sub	sp, sp, #8
   11dc4:	ldr	r0, [r3]
   11dc8:	bl	15074 <__assert_fail@plt+0x41e8>
   11dcc:	cmp	r0, #0
   11dd0:	beq	11df4 <__assert_fail@plt+0xf68>
   11dd4:	ldr	r4, [pc, #168]	; 11e84 <__assert_fail@plt+0xff8>
   11dd8:	ldrb	r3, [r4, #4]
   11ddc:	cmp	r3, #0
   11de0:	beq	11e10 <__assert_fail@plt+0xf84>
   11de4:	bl	10dc0 <__errno_location@plt>
   11de8:	ldr	r3, [r0]
   11dec:	cmp	r3, #32
   11df0:	bne	11e10 <__assert_fail@plt+0xf84>
   11df4:	ldr	r3, [pc, #140]	; 11e88 <__assert_fail@plt+0xffc>
   11df8:	ldr	r0, [r3]
   11dfc:	bl	15074 <__assert_fail@plt+0x41e8>
   11e00:	cmp	r0, #0
   11e04:	bne	11e58 <__assert_fail@plt+0xfcc>
   11e08:	add	sp, sp, #8
   11e0c:	pop	{r4, r5, r6, pc}
   11e10:	mov	r2, #5
   11e14:	ldr	r1, [pc, #112]	; 11e8c <__assert_fail@plt+0x1000>
   11e18:	mov	r0, #0
   11e1c:	bl	10cc4 <dcgettext@plt>
   11e20:	ldr	r4, [r4]
   11e24:	cmp	r4, #0
   11e28:	mov	r5, r0
   11e2c:	beq	11e64 <__assert_fail@plt+0xfd8>
   11e30:	bl	10dc0 <__errno_location@plt>
   11e34:	ldr	r6, [r0]
   11e38:	mov	r0, r4
   11e3c:	bl	13bc4 <__assert_fail@plt+0x2d38>
   11e40:	mov	r1, r6
   11e44:	str	r5, [sp]
   11e48:	ldr	r2, [pc, #64]	; 11e90 <__assert_fail@plt+0x1004>
   11e4c:	mov	r3, r0
   11e50:	mov	r0, #0
   11e54:	bl	10d3c <error@plt>
   11e58:	ldr	r3, [pc, #52]	; 11e94 <__assert_fail@plt+0x1008>
   11e5c:	ldr	r0, [r3]
   11e60:	bl	10c7c <_exit@plt>
   11e64:	bl	10dc0 <__errno_location@plt>
   11e68:	mov	r3, r5
   11e6c:	ldr	r2, [pc, #36]	; 11e98 <__assert_fail@plt+0x100c>
   11e70:	ldr	r1, [r0]
   11e74:	mov	r0, r4
   11e78:	bl	10d3c <error@plt>
   11e7c:	b	11e58 <__assert_fail@plt+0xfcc>
   11e80:	andeq	r7, r2, r4, asr #2
   11e84:	andeq	r7, r2, r8, asr r1
   11e88:	andeq	r7, r2, r0, asr #2
   11e8c:	andeq	r6, r1, r0, asr #9
   11e90:	andeq	r6, r1, ip, asr #9
   11e94:	andeq	r7, r2, r8, ror #1
   11e98:	ldrdeq	r6, [r1], -r0
   11e9c:	push	{r4, r5, r6, lr}
   11ea0:	subs	r4, r0, #0
   11ea4:	beq	11f18 <__assert_fail@plt+0x108c>
   11ea8:	mov	r1, #47	; 0x2f
   11eac:	bl	10e2c <strrchr@plt>
   11eb0:	subs	r5, r0, #0
   11eb4:	beq	11f04 <__assert_fail@plt+0x1078>
   11eb8:	add	r6, r5, #1
   11ebc:	sub	r3, r6, r4
   11ec0:	cmp	r3, #6
   11ec4:	ble	11f04 <__assert_fail@plt+0x1078>
   11ec8:	mov	r2, #7
   11ecc:	ldr	r1, [pc, #96]	; 11f34 <__assert_fail@plt+0x10a8>
   11ed0:	sub	r0, r5, #6
   11ed4:	bl	10e68 <strncmp@plt>
   11ed8:	cmp	r0, #0
   11edc:	bne	11f04 <__assert_fail@plt+0x1078>
   11ee0:	mov	r2, #3
   11ee4:	ldr	r1, [pc, #76]	; 11f38 <__assert_fail@plt+0x10ac>
   11ee8:	mov	r0, r6
   11eec:	bl	10e68 <strncmp@plt>
   11ef0:	cmp	r0, #0
   11ef4:	movne	r4, r6
   11ef8:	ldreq	r3, [pc, #60]	; 11f3c <__assert_fail@plt+0x10b0>
   11efc:	addeq	r4, r5, #4
   11f00:	streq	r4, [r3]
   11f04:	ldr	r2, [pc, #52]	; 11f40 <__assert_fail@plt+0x10b4>
   11f08:	ldr	r3, [pc, #52]	; 11f44 <__assert_fail@plt+0x10b8>
   11f0c:	str	r4, [r2]
   11f10:	str	r4, [r3]
   11f14:	pop	{r4, r5, r6, pc}
   11f18:	ldr	r3, [pc, #40]	; 11f48 <__assert_fail@plt+0x10bc>
   11f1c:	mov	r2, #55	; 0x37
   11f20:	mov	r1, #1
   11f24:	ldr	r3, [r3]
   11f28:	ldr	r0, [pc, #28]	; 11f4c <__assert_fail@plt+0x10c0>
   11f2c:	bl	10d00 <fwrite@plt>
   11f30:	bl	10e74 <abort@plt>
   11f34:	andeq	r6, r1, ip, lsl #10
   11f38:	andeq	r6, r1, r4, lsl r5
   11f3c:	andeq	r7, r2, r0, lsr r1
   11f40:	andeq	r7, r2, r0, ror #2
   11f44:	andeq	r7, r2, r4, lsr r1
   11f48:	andeq	r7, r2, r0, asr #2
   11f4c:	ldrdeq	r6, [r1], -r4
   11f50:	push	{r4, r5, r6, lr}
   11f54:	mov	r2, #48	; 0x30
   11f58:	mov	r4, r1
   11f5c:	mov	r1, #0
   11f60:	mov	r5, r0
   11f64:	bl	10dd8 <memset@plt>
   11f68:	cmp	r4, #10
   11f6c:	beq	11f7c <__assert_fail@plt+0x10f0>
   11f70:	str	r4, [r5]
   11f74:	mov	r0, r5
   11f78:	pop	{r4, r5, r6, pc}
   11f7c:	bl	10e74 <abort@plt>
   11f80:	push	{r4, r5, r6, lr}
   11f84:	mov	r4, r0
   11f88:	mov	r5, r1
   11f8c:	bl	152e8 <__assert_fail@plt+0x445c>
   11f90:	ldrb	r3, [r0]
   11f94:	bic	r3, r3, #32
   11f98:	cmp	r3, #85	; 0x55
   11f9c:	bne	11ffc <__assert_fail@plt+0x1170>
   11fa0:	ldrb	r3, [r0, #1]
   11fa4:	bic	r3, r3, #32
   11fa8:	cmp	r3, #84	; 0x54
   11fac:	bne	12038 <__assert_fail@plt+0x11ac>
   11fb0:	ldrb	r3, [r0, #2]
   11fb4:	bic	r3, r3, #32
   11fb8:	cmp	r3, #70	; 0x46
   11fbc:	bne	12038 <__assert_fail@plt+0x11ac>
   11fc0:	ldrb	r3, [r0, #3]
   11fc4:	cmp	r3, #45	; 0x2d
   11fc8:	bne	12038 <__assert_fail@plt+0x11ac>
   11fcc:	ldrb	r3, [r0, #4]
   11fd0:	cmp	r3, #56	; 0x38
   11fd4:	bne	12038 <__assert_fail@plt+0x11ac>
   11fd8:	ldrb	r3, [r0, #5]
   11fdc:	cmp	r3, #0
   11fe0:	bne	12038 <__assert_fail@plt+0x11ac>
   11fe4:	ldrb	r2, [r4]
   11fe8:	ldr	r3, [pc, #152]	; 12088 <__assert_fail@plt+0x11fc>
   11fec:	ldr	r0, [pc, #152]	; 1208c <__assert_fail@plt+0x1200>
   11ff0:	cmp	r2, #96	; 0x60
   11ff4:	movne	r0, r3
   11ff8:	pop	{r4, r5, r6, pc}
   11ffc:	cmp	r3, #71	; 0x47
   12000:	bne	12038 <__assert_fail@plt+0x11ac>
   12004:	ldrb	r3, [r0, #1]
   12008:	bic	r3, r3, #32
   1200c:	cmp	r3, #66	; 0x42
   12010:	bne	12038 <__assert_fail@plt+0x11ac>
   12014:	ldrb	r3, [r0, #2]
   12018:	cmp	r3, #49	; 0x31
   1201c:	bne	12038 <__assert_fail@plt+0x11ac>
   12020:	ldrb	r3, [r0, #3]
   12024:	cmp	r3, #56	; 0x38
   12028:	bne	12038 <__assert_fail@plt+0x11ac>
   1202c:	ldrb	r3, [r0, #4]
   12030:	cmp	r3, #48	; 0x30
   12034:	beq	1204c <__assert_fail@plt+0x11c0>
   12038:	ldr	r3, [pc, #80]	; 12090 <__assert_fail@plt+0x1204>
   1203c:	cmp	r5, #9
   12040:	ldr	r0, [pc, #76]	; 12094 <__assert_fail@plt+0x1208>
   12044:	movne	r0, r3
   12048:	pop	{r4, r5, r6, pc}
   1204c:	ldrb	r3, [r0, #5]
   12050:	cmp	r3, #51	; 0x33
   12054:	bne	12038 <__assert_fail@plt+0x11ac>
   12058:	ldrb	r3, [r0, #6]
   1205c:	cmp	r3, #48	; 0x30
   12060:	bne	12038 <__assert_fail@plt+0x11ac>
   12064:	ldrb	r3, [r0, #7]
   12068:	cmp	r3, #0
   1206c:	bne	12038 <__assert_fail@plt+0x11ac>
   12070:	ldrb	r2, [r4]
   12074:	ldr	r3, [pc, #28]	; 12098 <__assert_fail@plt+0x120c>
   12078:	ldr	r0, [pc, #28]	; 1209c <__assert_fail@plt+0x1210>
   1207c:	cmp	r2, #96	; 0x60
   12080:	movne	r0, r3
   12084:	pop	{r4, r5, r6, pc}
   12088:	andeq	r6, r1, r0, ror r5
   1208c:	andeq	r6, r1, ip, ror #10
   12090:	andeq	r6, r1, r0, lsl #11
   12094:	andeq	r6, r1, ip, ror r5
   12098:	andeq	r6, r1, r8, ror r5
   1209c:	andeq	r6, r1, r4, ror r5
   120a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120a4:	sub	sp, sp, #116	; 0x74
   120a8:	mov	sl, r0
   120ac:	str	r3, [sp, #24]
   120b0:	mov	r3, #1
   120b4:	mov	r8, r1
   120b8:	str	r2, [sp, #56]	; 0x38
   120bc:	str	r3, [sp, #36]	; 0x24
   120c0:	bl	10d18 <__ctype_get_mb_cur_max@plt>
   120c4:	ldr	r3, [sp, #156]	; 0x9c
   120c8:	mov	fp, r8
   120cc:	mov	r2, #0
   120d0:	lsr	r3, r3, #1
   120d4:	and	r3, r3, #1
   120d8:	str	r2, [sp, #68]	; 0x44
   120dc:	str	r3, [sp, #28]
   120e0:	str	r2, [sp, #40]	; 0x28
   120e4:	str	r2, [sp, #44]	; 0x2c
   120e8:	str	r2, [sp, #52]	; 0x34
   120ec:	str	r2, [sp, #64]	; 0x40
   120f0:	str	r2, [sp, #72]	; 0x48
   120f4:	str	sl, [sp, #32]
   120f8:	str	r0, [sp, #76]	; 0x4c
   120fc:	ldr	r3, [sp, #152]	; 0x98
   12100:	cmp	r3, #10
   12104:	ldrls	pc, [pc, r3, lsl #2]
   12108:	b	132c8 <__assert_fail@plt+0x243c>
   1210c:	andeq	r2, r1, r8, lsr r1
   12110:	andeq	r2, r1, r0, lsr #8
   12114:	andeq	r2, r1, r4, asr #8
   12118:	andeq	r2, r1, r8, ror #8
   1211c:	muleq	r1, r4, r5
   12120:	andeq	r2, r1, r8, ror #10
   12124:	andeq	r2, r1, r0, asr #10
   12128:	andeq	r2, r1, ip, ror r4
   1212c:	muleq	r1, r4, r4
   12130:	muleq	r1, r4, r4
   12134:	muleq	r1, r4, r4
   12138:	mov	r3, #0
   1213c:	mov	r7, r3
   12140:	str	r3, [sp, #28]
   12144:	ldr	r3, [sp, #44]	; 0x2c
   12148:	mov	sl, #0
   1214c:	eor	r3, r3, #1
   12150:	str	r3, [sp, #60]	; 0x3c
   12154:	ldr	r3, [sp, #24]
   12158:	cmn	r3, #1
   1215c:	beq	126c0 <__assert_fail@plt+0x1834>
   12160:	ldr	r3, [sp, #24]
   12164:	subs	r5, r3, sl
   12168:	movne	r5, #1
   1216c:	cmp	r5, #0
   12170:	beq	126d8 <__assert_fail@plt+0x184c>
   12174:	ldr	r3, [sp, #152]	; 0x98
   12178:	ldr	r8, [sp, #44]	; 0x2c
   1217c:	cmp	r3, #2
   12180:	moveq	r8, #0
   12184:	andne	r8, r8, #1
   12188:	ldr	r3, [sp, #52]	; 0x34
   1218c:	adds	r9, r3, #0
   12190:	movne	r9, #1
   12194:	ands	r6, r9, r8
   12198:	beq	12b40 <__assert_fail@plt+0x1cb4>
   1219c:	ldr	r2, [sp, #52]	; 0x34
   121a0:	ldr	r1, [sp, #24]
   121a4:	cmp	r2, #1
   121a8:	mov	r3, r2
   121ac:	movls	r3, #0
   121b0:	movhi	r3, #1
   121b4:	cmn	r1, #1
   121b8:	movne	r3, #0
   121bc:	cmp	r3, #0
   121c0:	add	r4, sl, r2
   121c4:	beq	121d4 <__assert_fail@plt+0x1348>
   121c8:	ldr	r0, [sp, #56]	; 0x38
   121cc:	bl	10da8 <strlen@plt>
   121d0:	str	r0, [sp, #24]
   121d4:	ldr	r3, [sp, #24]
   121d8:	cmp	r3, r4
   121dc:	ldr	r3, [sp, #56]	; 0x38
   121e0:	add	r3, r3, sl
   121e4:	str	r3, [sp, #48]	; 0x30
   121e8:	bcc	12b4c <__assert_fail@plt+0x1cc0>
   121ec:	mov	r0, r3
   121f0:	ldr	r2, [sp, #52]	; 0x34
   121f4:	ldr	r1, [sp, #64]	; 0x40
   121f8:	bl	10cac <memcmp@plt>
   121fc:	cmp	r0, #0
   12200:	bne	12b4c <__assert_fail@plt+0x1cc0>
   12204:	ldr	r3, [sp, #28]
   12208:	cmp	r3, #0
   1220c:	bne	133c8 <__assert_fail@plt+0x253c>
   12210:	ldr	r3, [sp, #48]	; 0x30
   12214:	ldrb	r4, [r3]
   12218:	cmp	r4, #126	; 0x7e
   1221c:	ldrls	pc, [pc, r4, lsl #2]
   12220:	b	12ae0 <__assert_fail@plt+0x1c54>
   12224:	andeq	r2, r1, r4, lsl #18
   12228:	andeq	r2, r1, r0, ror #21
   1222c:	andeq	r2, r1, r0, ror #21
   12230:	andeq	r2, r1, r0, ror #21
   12234:	andeq	r2, r1, r0, ror #21
   12238:	andeq	r2, r1, r0, ror #21
   1223c:	andeq	r2, r1, r0, ror #21
   12240:	andeq	r2, r1, r8, ror #17
   12244:	andeq	r2, r1, ip, asr #17
   12248:	andeq	r2, r1, r8, asr #21
   1224c:	andeq	r2, r1, ip, lsr #16
   12250:	andeq	r2, r1, r0, lsl r8
   12254:	andeq	r2, r1, r4, lsr #21
   12258:	andeq	r2, r1, r0, lsl #21
   1225c:	andeq	r2, r1, r0, ror #21
   12260:	andeq	r2, r1, r0, ror #21
   12264:	andeq	r2, r1, r0, ror #21
   12268:	andeq	r2, r1, r0, ror #21
   1226c:	andeq	r2, r1, r0, ror #21
   12270:	andeq	r2, r1, r0, ror #21
   12274:	andeq	r2, r1, r0, ror #21
   12278:	andeq	r2, r1, r0, ror #21
   1227c:	andeq	r2, r1, r0, ror #21
   12280:	andeq	r2, r1, r0, ror #21
   12284:	andeq	r2, r1, r0, ror #21
   12288:	andeq	r2, r1, r0, ror #21
   1228c:	andeq	r2, r1, r0, ror #21
   12290:	andeq	r2, r1, r0, ror #21
   12294:	andeq	r2, r1, r0, ror #21
   12298:	andeq	r2, r1, r0, ror #21
   1229c:	andeq	r2, r1, r0, ror #21
   122a0:	andeq	r2, r1, r0, ror #21
   122a4:	andeq	r2, r1, r0, asr #21
   122a8:	strdeq	r2, [r1], -r4
   122ac:	strdeq	r2, [r1], -r4
   122b0:	andeq	r2, r1, r4, lsl #12
   122b4:	strdeq	r2, [r1], -r4
   122b8:	andeq	r2, r1, ip, lsl #21
   122bc:	strdeq	r2, [r1], -r4
   122c0:	andeq	r2, r1, r0, ror #20
   122c4:	strdeq	r2, [r1], -r4
   122c8:	strdeq	r2, [r1], -r4
   122cc:	strdeq	r2, [r1], -r4
   122d0:	andeq	r2, r1, ip, lsl #21
   122d4:	andeq	r2, r1, ip, lsl #21
   122d8:	andeq	r2, r1, ip, lsl #21
   122dc:	andeq	r2, r1, ip, lsl #21
   122e0:	andeq	r2, r1, ip, lsl #21
   122e4:	andeq	r2, r1, ip, lsl #21
   122e8:	andeq	r2, r1, ip, lsl #21
   122ec:	andeq	r2, r1, ip, lsl #21
   122f0:	andeq	r2, r1, ip, lsl #21
   122f4:	andeq	r2, r1, ip, lsl #21
   122f8:	andeq	r2, r1, ip, lsl #21
   122fc:	andeq	r2, r1, ip, lsl #21
   12300:	andeq	r2, r1, ip, lsl #21
   12304:	andeq	r2, r1, ip, lsl #21
   12308:	andeq	r2, r1, ip, lsl #21
   1230c:	andeq	r2, r1, ip, lsl #21
   12310:	strdeq	r2, [r1], -r4
   12314:	strdeq	r2, [r1], -r4
   12318:	strdeq	r2, [r1], -r4
   1231c:	strdeq	r2, [r1], -r4
   12320:	andeq	r2, r1, r0, lsr sl
   12324:	andeq	r2, r1, r0, ror #21
   12328:	andeq	r2, r1, ip, lsl #21
   1232c:	andeq	r2, r1, ip, lsl #21
   12330:	andeq	r2, r1, ip, lsl #21
   12334:	andeq	r2, r1, ip, lsl #21
   12338:	andeq	r2, r1, ip, lsl #21
   1233c:	andeq	r2, r1, ip, lsl #21
   12340:	andeq	r2, r1, ip, lsl #21
   12344:	andeq	r2, r1, ip, lsl #21
   12348:	andeq	r2, r1, ip, lsl #21
   1234c:	andeq	r2, r1, ip, lsl #21
   12350:	andeq	r2, r1, ip, lsl #21
   12354:	andeq	r2, r1, ip, lsl #21
   12358:	andeq	r2, r1, ip, lsl #21
   1235c:	andeq	r2, r1, ip, lsl #21
   12360:	andeq	r2, r1, ip, lsl #21
   12364:	andeq	r2, r1, ip, lsl #21
   12368:	andeq	r2, r1, ip, lsl #21
   1236c:	andeq	r2, r1, ip, lsl #21
   12370:	andeq	r2, r1, ip, lsl #21
   12374:	andeq	r2, r1, ip, lsl #21
   12378:	andeq	r2, r1, ip, lsl #21
   1237c:	andeq	r2, r1, ip, lsl #21
   12380:	andeq	r2, r1, ip, lsl #21
   12384:	andeq	r2, r1, ip, lsl #21
   12388:	andeq	r2, r1, ip, lsl #21
   1238c:	andeq	r2, r1, ip, lsl #21
   12390:	strdeq	r2, [r1], -r4
   12394:	andeq	r2, r1, r0, asr r7
   12398:	andeq	r2, r1, ip, lsl #21
   1239c:	strdeq	r2, [r1], -r4
   123a0:	andeq	r2, r1, ip, lsl #21
   123a4:	strdeq	r2, [r1], -r4
   123a8:	andeq	r2, r1, ip, lsl #21
   123ac:	andeq	r2, r1, ip, lsl #21
   123b0:	andeq	r2, r1, ip, lsl #21
   123b4:	andeq	r2, r1, ip, lsl #21
   123b8:	andeq	r2, r1, ip, lsl #21
   123bc:	andeq	r2, r1, ip, lsl #21
   123c0:	andeq	r2, r1, ip, lsl #21
   123c4:	andeq	r2, r1, ip, lsl #21
   123c8:	andeq	r2, r1, ip, lsl #21
   123cc:	andeq	r2, r1, ip, lsl #21
   123d0:	andeq	r2, r1, ip, lsl #21
   123d4:	andeq	r2, r1, ip, lsl #21
   123d8:	andeq	r2, r1, ip, lsl #21
   123dc:	andeq	r2, r1, ip, lsl #21
   123e0:	andeq	r2, r1, ip, lsl #21
   123e4:	andeq	r2, r1, ip, lsl #21
   123e8:	andeq	r2, r1, ip, lsl #21
   123ec:	andeq	r2, r1, ip, lsl #21
   123f0:	andeq	r2, r1, ip, lsl #21
   123f4:	andeq	r2, r1, ip, lsl #21
   123f8:	andeq	r2, r1, ip, lsl #21
   123fc:	andeq	r2, r1, ip, lsl #21
   12400:	andeq	r2, r1, ip, lsl #21
   12404:	andeq	r2, r1, ip, lsl #21
   12408:	andeq	r2, r1, ip, lsl #21
   1240c:	andeq	r2, r1, ip, lsl #21
   12410:	andeq	r2, r1, r4, ror #11
   12414:	strdeq	r2, [r1], -r4
   12418:	andeq	r2, r1, r4, ror #11
   1241c:	andeq	r2, r1, r4, lsl #12
   12420:	mov	r3, #1
   12424:	str	r3, [sp, #28]
   12428:	str	r3, [sp, #52]	; 0x34
   1242c:	ldr	r3, [pc, #4000]	; 133d4 <__assert_fail@plt+0x2548>
   12430:	mov	r7, #0
   12434:	str	r3, [sp, #64]	; 0x40
   12438:	mov	r3, #2
   1243c:	str	r3, [sp, #152]	; 0x98
   12440:	b	12144 <__assert_fail@plt+0x12b8>
   12444:	ldr	r3, [sp, #28]
   12448:	cmp	r3, #0
   1244c:	beq	125a8 <__assert_fail@plt+0x171c>
   12450:	mov	r3, #1
   12454:	str	r3, [sp, #52]	; 0x34
   12458:	ldr	r3, [pc, #3956]	; 133d4 <__assert_fail@plt+0x2548>
   1245c:	mov	r7, #0
   12460:	str	r3, [sp, #64]	; 0x40
   12464:	b	12144 <__assert_fail@plt+0x12b8>
   12468:	mov	r3, #1
   1246c:	str	r3, [sp, #44]	; 0x2c
   12470:	str	r3, [sp, #52]	; 0x34
   12474:	str	r3, [sp, #28]
   12478:	b	1242c <__assert_fail@plt+0x15a0>
   1247c:	mov	r3, #0
   12480:	str	r3, [sp, #28]
   12484:	mov	r3, #1
   12488:	str	r3, [sp, #44]	; 0x2c
   1248c:	mov	r7, #0
   12490:	b	12144 <__assert_fail@plt+0x12b8>
   12494:	ldr	r3, [sp, #152]	; 0x98
   12498:	cmp	r3, #10
   1249c:	beq	124e0 <__assert_fail@plt+0x1654>
   124a0:	mov	r2, #5
   124a4:	ldr	r1, [pc, #3884]	; 133d8 <__assert_fail@plt+0x254c>
   124a8:	mov	r0, #0
   124ac:	bl	10cc4 <dcgettext@plt>
   124b0:	ldr	r2, [pc, #3872]	; 133d8 <__assert_fail@plt+0x254c>
   124b4:	cmp	r0, r2
   124b8:	str	r0, [sp, #164]	; 0xa4
   124bc:	beq	134c4 <__assert_fail@plt+0x2638>
   124c0:	mov	r2, #5
   124c4:	ldr	r1, [pc, #3848]	; 133d4 <__assert_fail@plt+0x2548>
   124c8:	mov	r0, #0
   124cc:	bl	10cc4 <dcgettext@plt>
   124d0:	ldr	r2, [pc, #3836]	; 133d4 <__assert_fail@plt+0x2548>
   124d4:	cmp	r0, r2
   124d8:	str	r0, [sp, #168]	; 0xa8
   124dc:	beq	134b4 <__assert_fail@plt+0x2628>
   124e0:	ldr	r7, [sp, #28]
   124e4:	cmp	r7, #0
   124e8:	movne	r7, #0
   124ec:	bne	12520 <__assert_fail@plt+0x1694>
   124f0:	ldr	r3, [sp, #164]	; 0xa4
   124f4:	ldrb	r3, [r3]
   124f8:	cmp	r3, #0
   124fc:	beq	134d4 <__assert_fail@plt+0x2648>
   12500:	ldr	r2, [sp, #164]	; 0xa4
   12504:	ldr	r1, [sp, #32]
   12508:	cmp	fp, r7
   1250c:	strbhi	r3, [r1, r7]
   12510:	ldrb	r3, [r2, #1]!
   12514:	add	r7, r7, #1
   12518:	cmp	r3, #0
   1251c:	bne	12508 <__assert_fail@plt+0x167c>
   12520:	ldr	r0, [sp, #168]	; 0xa8
   12524:	bl	10da8 <strlen@plt>
   12528:	ldr	r3, [sp, #168]	; 0xa8
   1252c:	str	r3, [sp, #64]	; 0x40
   12530:	mov	r3, #1
   12534:	str	r3, [sp, #44]	; 0x2c
   12538:	str	r0, [sp, #52]	; 0x34
   1253c:	b	12144 <__assert_fail@plt+0x12b8>
   12540:	mov	r3, #1
   12544:	str	r3, [sp, #44]	; 0x2c
   12548:	str	r3, [sp, #52]	; 0x34
   1254c:	str	r3, [sp, #28]
   12550:	ldr	r3, [pc, #3716]	; 133dc <__assert_fail@plt+0x2550>
   12554:	mov	r7, #0
   12558:	str	r3, [sp, #64]	; 0x40
   1255c:	mov	r3, #5
   12560:	str	r3, [sp, #152]	; 0x98
   12564:	b	12144 <__assert_fail@plt+0x12b8>
   12568:	ldr	r3, [sp, #28]
   1256c:	cmp	r3, #0
   12570:	beq	13270 <__assert_fail@plt+0x23e4>
   12574:	ldr	r3, [sp, #28]
   12578:	mov	r7, #0
   1257c:	str	r3, [sp, #44]	; 0x2c
   12580:	mov	r3, #1
   12584:	str	r3, [sp, #52]	; 0x34
   12588:	ldr	r3, [pc, #3660]	; 133dc <__assert_fail@plt+0x2550>
   1258c:	str	r3, [sp, #64]	; 0x40
   12590:	b	12144 <__assert_fail@plt+0x12b8>
   12594:	ldr	r3, [sp, #28]
   12598:	cmp	r3, #0
   1259c:	mov	r3, #1
   125a0:	streq	r3, [sp, #44]	; 0x2c
   125a4:	bne	12428 <__assert_fail@plt+0x159c>
   125a8:	cmp	fp, #0
   125ac:	beq	132a0 <__assert_fail@plt+0x2414>
   125b0:	ldr	r3, [sp, #32]
   125b4:	mov	r2, #39	; 0x27
   125b8:	mov	r7, #1
   125bc:	strb	r2, [r3]
   125c0:	mov	r3, #0
   125c4:	str	r3, [sp, #28]
   125c8:	mov	r3, #1
   125cc:	str	r3, [sp, #52]	; 0x34
   125d0:	ldr	r3, [pc, #3580]	; 133d4 <__assert_fail@plt+0x2548>
   125d4:	str	r3, [sp, #64]	; 0x40
   125d8:	mov	r3, #2
   125dc:	str	r3, [sp, #152]	; 0x98
   125e0:	b	12144 <__assert_fail@plt+0x12b8>
   125e4:	ldr	r3, [sp, #24]
   125e8:	cmn	r3, #1
   125ec:	beq	13204 <__assert_fail@plt+0x2378>
   125f0:	ldr	r3, [sp, #24]
   125f4:	subs	r3, r3, #1
   125f8:	movne	r3, #1
   125fc:	cmp	r3, #0
   12600:	bne	1260c <__assert_fail@plt+0x1780>
   12604:	cmp	sl, #0
   12608:	beq	129f8 <__assert_fail@plt+0x1b6c>
   1260c:	ldr	r3, [sp, #152]	; 0x98
   12610:	mov	r5, #0
   12614:	sub	r2, r3, #2
   12618:	mov	r8, r5
   1261c:	clz	r2, r2
   12620:	lsr	r2, r2, #5
   12624:	ldr	r3, [sp, #60]	; 0x3c
   12628:	ldr	r1, [sp, #28]
   1262c:	orr	r3, r2, r3
   12630:	eor	r3, r3, #1
   12634:	orr	r3, r1, r3
   12638:	tst	r3, #255	; 0xff
   1263c:	bne	12d68 <__assert_fail@plt+0x1edc>
   12640:	cmp	r6, #0
   12644:	bne	12794 <__assert_fail@plt+0x1908>
   12648:	ldr	r3, [sp, #40]	; 0x28
   1264c:	eor	r8, r8, #1
   12650:	and	r8, r8, r3
   12654:	add	sl, sl, #1
   12658:	uxtb	r6, r8
   1265c:	cmp	r6, #0
   12660:	beq	12694 <__assert_fail@plt+0x1808>
   12664:	cmp	fp, r7
   12668:	movhi	r2, #39	; 0x27
   1266c:	ldrhi	r3, [sp, #32]
   12670:	strbhi	r2, [r3, r7]
   12674:	add	r3, r7, #1
   12678:	cmp	fp, r3
   1267c:	movhi	r1, #39	; 0x27
   12680:	ldrhi	r2, [sp, #32]
   12684:	add	r7, r7, #2
   12688:	strbhi	r1, [r2, r3]
   1268c:	mov	r3, #0
   12690:	str	r3, [sp, #40]	; 0x28
   12694:	cmp	r7, fp
   12698:	ldrcc	r3, [sp, #32]
   1269c:	strbcc	r4, [r3, r7]
   126a0:	ldr	r3, [sp, #36]	; 0x24
   126a4:	cmp	r5, #0
   126a8:	moveq	r3, #0
   126ac:	str	r3, [sp, #36]	; 0x24
   126b0:	ldr	r3, [sp, #24]
   126b4:	add	r7, r7, #1
   126b8:	cmn	r3, #1
   126bc:	bne	12160 <__assert_fail@plt+0x12d4>
   126c0:	ldr	r3, [sp, #56]	; 0x38
   126c4:	ldrb	r5, [r3, sl]
   126c8:	adds	r5, r5, #0
   126cc:	movne	r5, #1
   126d0:	cmp	r5, #0
   126d4:	bne	12174 <__assert_fail@plt+0x12e8>
   126d8:	ldr	r3, [sp, #152]	; 0x98
   126dc:	ldr	r1, [sp, #28]
   126e0:	sub	r3, r3, #2
   126e4:	clz	r3, r3
   126e8:	lsr	r3, r3, #5
   126ec:	and	r9, r1, r3
   126f0:	cmp	r7, #0
   126f4:	movne	r2, #0
   126f8:	andeq	r2, r9, #1
   126fc:	cmp	r2, #0
   12700:	bne	130dc <__assert_fail@plt+0x2250>
   12704:	eor	r2, r1, #1
   12708:	ands	r3, r3, r2
   1270c:	beq	13598 <__assert_fail@plt+0x270c>
   12710:	ldr	r2, [sp, #68]	; 0x44
   12714:	cmp	r2, #0
   12718:	beq	13584 <__assert_fail@plt+0x26f8>
   1271c:	ldr	r3, [sp, #36]	; 0x24
   12720:	cmp	r3, #0
   12724:	bne	1353c <__assert_fail@plt+0x26b0>
   12728:	ldr	r2, [sp, #72]	; 0x48
   1272c:	clz	r3, fp
   12730:	cmp	r2, #0
   12734:	lsr	r3, r3, #5
   12738:	moveq	r3, #0
   1273c:	cmp	r3, #0
   12740:	beq	134dc <__assert_fail@plt+0x2650>
   12744:	str	r3, [sp, #68]	; 0x44
   12748:	ldr	fp, [sp, #72]	; 0x48
   1274c:	b	120fc <__assert_fail@plt+0x1270>
   12750:	ldr	r3, [sp, #152]	; 0x98
   12754:	cmp	r3, #2
   12758:	beq	12dac <__assert_fail@plt+0x1f20>
   1275c:	ldr	r3, [sp, #44]	; 0x2c
   12760:	ldr	r2, [sp, #28]
   12764:	and	r2, r3, r2
   12768:	ands	r2, r9, r2
   1276c:	bne	12db8 <__assert_fail@plt+0x1f2c>
   12770:	mov	r4, #92	; 0x5c
   12774:	mov	r3, r4
   12778:	ldr	r1, [sp, #44]	; 0x2c
   1277c:	cmp	r1, #0
   12780:	moveq	r5, #0
   12784:	moveq	r8, r1
   12788:	beq	12624 <__assert_fail@plt+0x1798>
   1278c:	mov	r4, r3
   12790:	mov	r5, #0
   12794:	ldr	r3, [sp, #28]
   12798:	cmp	r3, #0
   1279c:	bne	12da0 <__assert_fail@plt+0x1f14>
   127a0:	ldr	r3, [sp, #40]	; 0x28
   127a4:	eor	r9, r3, #1
   127a8:	and	r9, r9, r2
   127ac:	ands	r9, r9, #255	; 0xff
   127b0:	beq	127f4 <__assert_fail@plt+0x1968>
   127b4:	cmp	fp, r7
   127b8:	movhi	r2, #39	; 0x27
   127bc:	ldrhi	r3, [sp, #32]
   127c0:	str	r9, [sp, #40]	; 0x28
   127c4:	strbhi	r2, [r3, r7]
   127c8:	add	r3, r7, #1
   127cc:	cmp	fp, r3
   127d0:	movhi	r1, #36	; 0x24
   127d4:	ldrhi	r2, [sp, #32]
   127d8:	strbhi	r1, [r2, r3]
   127dc:	add	r3, r7, #2
   127e0:	cmp	fp, r3
   127e4:	add	r7, r7, #3
   127e8:	ldrhi	r2, [sp, #32]
   127ec:	movhi	r1, #39	; 0x27
   127f0:	strbhi	r1, [r2, r3]
   127f4:	cmp	fp, r7
   127f8:	movhi	r2, #92	; 0x5c
   127fc:	ldrhi	r3, [sp, #32]
   12800:	add	sl, sl, #1
   12804:	strbhi	r2, [r3, r7]
   12808:	add	r7, r7, #1
   1280c:	b	12694 <__assert_fail@plt+0x1808>
   12810:	ldr	r3, [sp, #152]	; 0x98
   12814:	mov	r4, #11
   12818:	sub	r2, r3, #2
   1281c:	mov	r3, #118	; 0x76
   12820:	clz	r2, r2
   12824:	lsr	r2, r2, #5
   12828:	b	12778 <__assert_fail@plt+0x18ec>
   1282c:	mov	r4, #10
   12830:	mov	r3, #110	; 0x6e
   12834:	ldr	r2, [sp, #152]	; 0x98
   12838:	ldr	r1, [sp, #28]
   1283c:	sub	r2, r2, #2
   12840:	clz	r2, r2
   12844:	lsr	r2, r2, #5
   12848:	ands	r1, r1, r2
   1284c:	beq	12778 <__assert_fail@plt+0x18ec>
   12850:	ldr	sl, [sp, #32]
   12854:	mov	r8, fp
   12858:	mov	r2, r1
   1285c:	mov	r3, #2
   12860:	str	r3, [sp, #152]	; 0x98
   12864:	ldr	r9, [sp, #44]	; 0x2c
   12868:	ldr	r3, [sp, #152]	; 0x98
   1286c:	and	r9, r9, r2
   12870:	tst	r9, #255	; 0xff
   12874:	movne	r3, #4
   12878:	str	r3, [sp, #152]	; 0x98
   1287c:	ldr	r3, [sp, #156]	; 0x9c
   12880:	mov	ip, #0
   12884:	bic	r3, r3, #2
   12888:	str	r3, [sp, #4]
   1288c:	ldr	r3, [sp, #168]	; 0xa8
   12890:	ldr	r2, [sp, #56]	; 0x38
   12894:	str	r3, [sp, #16]
   12898:	ldr	r3, [sp, #164]	; 0xa4
   1289c:	mov	r1, r8
   128a0:	str	r3, [sp, #12]
   128a4:	ldr	r3, [sp, #152]	; 0x98
   128a8:	mov	r0, sl
   128ac:	str	r3, [sp]
   128b0:	str	ip, [sp, #8]
   128b4:	ldr	r3, [sp, #24]
   128b8:	bl	120a0 <__assert_fail@plt+0x1214>
   128bc:	mov	fp, r0
   128c0:	mov	r0, fp
   128c4:	add	sp, sp, #116	; 0x74
   128c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128cc:	ldr	r3, [sp, #152]	; 0x98
   128d0:	mov	r4, #8
   128d4:	sub	r2, r3, #2
   128d8:	mov	r3, #98	; 0x62
   128dc:	clz	r2, r2
   128e0:	lsr	r2, r2, #5
   128e4:	b	12778 <__assert_fail@plt+0x18ec>
   128e8:	ldr	r3, [sp, #152]	; 0x98
   128ec:	mov	r4, #7
   128f0:	sub	r2, r3, #2
   128f4:	mov	r3, #97	; 0x61
   128f8:	clz	r2, r2
   128fc:	lsr	r2, r2, #5
   12900:	b	12778 <__assert_fail@plt+0x18ec>
   12904:	ldr	r3, [sp, #44]	; 0x2c
   12908:	cmp	r3, #0
   1290c:	beq	130f0 <__assert_fail@plt+0x2264>
   12910:	ldr	r3, [sp, #28]
   12914:	cmp	r3, #0
   12918:	bne	133c8 <__assert_fail@plt+0x253c>
   1291c:	ldr	r3, [sp, #152]	; 0x98
   12920:	sub	r2, r3, #2
   12924:	ldr	r3, [sp, #40]	; 0x28
   12928:	clz	r2, r2
   1292c:	eor	r3, r3, #1
   12930:	lsr	r2, r2, #5
   12934:	ands	r3, r2, r3
   12938:	moveq	r1, r7
   1293c:	beq	12980 <__assert_fail@plt+0x1af4>
   12940:	cmp	fp, r7
   12944:	movhi	r0, #39	; 0x27
   12948:	ldrhi	r1, [sp, #32]
   1294c:	str	r3, [sp, #40]	; 0x28
   12950:	strbhi	r0, [r1, r7]
   12954:	add	r1, r7, #1
   12958:	cmp	fp, r1
   1295c:	movhi	ip, #36	; 0x24
   12960:	ldrhi	r0, [sp, #32]
   12964:	strbhi	ip, [r0, r1]
   12968:	add	r1, r7, #2
   1296c:	cmp	fp, r1
   12970:	movhi	ip, #39	; 0x27
   12974:	ldrhi	r0, [sp, #32]
   12978:	strbhi	ip, [r0, r1]
   1297c:	add	r1, r7, #3
   12980:	cmp	fp, r1
   12984:	movhi	r0, #92	; 0x5c
   12988:	ldrhi	r3, [sp, #32]
   1298c:	add	r7, r1, #1
   12990:	strbhi	r0, [r3, r1]
   12994:	cmp	r8, #0
   12998:	beq	132dc <__assert_fail@plt+0x2450>
   1299c:	ldr	r0, [sp, #24]
   129a0:	add	r3, sl, #1
   129a4:	cmp	r3, r0
   129a8:	bcs	13218 <__assert_fail@plt+0x238c>
   129ac:	ldr	r0, [sp, #56]	; 0x38
   129b0:	ldrb	r3, [r0, r3]
   129b4:	sub	r3, r3, #48	; 0x30
   129b8:	cmp	r3, #9
   129bc:	bhi	13218 <__assert_fail@plt+0x238c>
   129c0:	cmp	fp, r7
   129c4:	movhi	r3, #48	; 0x30
   129c8:	ldrhi	r0, [sp, #32]
   129cc:	ldr	r5, [sp, #28]
   129d0:	mov	r4, #48	; 0x30
   129d4:	strbhi	r3, [r0, r7]
   129d8:	add	r3, r1, #2
   129dc:	cmp	fp, r3
   129e0:	movhi	r0, #48	; 0x30
   129e4:	ldrhi	ip, [sp, #32]
   129e8:	add	r7, r1, #3
   129ec:	strbhi	r0, [ip, r3]
   129f0:	b	12624 <__assert_fail@plt+0x1798>
   129f4:	mov	r5, #0
   129f8:	ldr	r3, [sp, #152]	; 0x98
   129fc:	sub	r2, r3, #2
   12a00:	ldr	r3, [sp, #28]
   12a04:	clz	r2, r2
   12a08:	lsr	r2, r2, #5
   12a0c:	ands	r8, r3, r2
   12a10:	beq	12624 <__assert_fail@plt+0x1798>
   12a14:	mov	r3, r8
   12a18:	mov	r2, r3
   12a1c:	mov	r3, #2
   12a20:	ldr	sl, [sp, #32]
   12a24:	mov	r8, fp
   12a28:	str	r3, [sp, #152]	; 0x98
   12a2c:	b	12864 <__assert_fail@plt+0x19d8>
   12a30:	ldr	r3, [sp, #152]	; 0x98
   12a34:	cmp	r3, #2
   12a38:	beq	1315c <__assert_fail@plt+0x22d0>
   12a3c:	cmp	r3, #5
   12a40:	beq	1311c <__assert_fail@plt+0x2290>
   12a44:	mov	r5, #0
   12a48:	sub	r2, r3, #2
   12a4c:	mov	r8, r5
   12a50:	clz	r2, r2
   12a54:	mov	r4, #63	; 0x3f
   12a58:	lsr	r2, r2, #5
   12a5c:	b	12624 <__assert_fail@plt+0x1798>
   12a60:	ldr	r3, [sp, #152]	; 0x98
   12a64:	cmp	r3, #2
   12a68:	beq	1317c <__assert_fail@plt+0x22f0>
   12a6c:	mov	r2, #0
   12a70:	str	r5, [sp, #68]	; 0x44
   12a74:	mov	r8, r2
   12a78:	mov	r4, #39	; 0x27
   12a7c:	b	12624 <__assert_fail@plt+0x1798>
   12a80:	mov	r4, #13
   12a84:	mov	r3, #114	; 0x72
   12a88:	b	12834 <__assert_fail@plt+0x19a8>
   12a8c:	ldr	r3, [sp, #152]	; 0x98
   12a90:	mov	r8, #0
   12a94:	sub	r2, r3, #2
   12a98:	clz	r2, r2
   12a9c:	lsr	r2, r2, #5
   12aa0:	b	12624 <__assert_fail@plt+0x1798>
   12aa4:	ldr	r3, [sp, #152]	; 0x98
   12aa8:	mov	r4, #12
   12aac:	sub	r2, r3, #2
   12ab0:	mov	r3, #102	; 0x66
   12ab4:	clz	r2, r2
   12ab8:	lsr	r2, r2, #5
   12abc:	b	12778 <__assert_fail@plt+0x18ec>
   12ac0:	mov	r5, r6
   12ac4:	b	129f8 <__assert_fail@plt+0x1b6c>
   12ac8:	ldr	r3, [sp, #152]	; 0x98
   12acc:	sub	r2, r3, #2
   12ad0:	mov	r3, #116	; 0x74
   12ad4:	clz	r2, r2
   12ad8:	lsr	r2, r2, #5
   12adc:	b	12778 <__assert_fail@plt+0x18ec>
   12ae0:	ldr	r8, [sp, #76]	; 0x4c
   12ae4:	cmp	r8, #1
   12ae8:	bne	12f98 <__assert_fail@plt+0x210c>
   12aec:	bl	10d90 <__ctype_b_loc@plt>
   12af0:	sxth	r3, r4
   12af4:	mov	ip, r8
   12af8:	lsl	r3, r3, #1
   12afc:	ldr	r2, [r0]
   12b00:	ldrh	r3, [r2, r3]
   12b04:	and	r3, r3, #16384	; 0x4000
   12b08:	cmp	r3, #0
   12b0c:	movne	r5, #1
   12b10:	moveq	r5, #0
   12b14:	moveq	r3, #1
   12b18:	movne	r3, #0
   12b1c:	ldr	r2, [sp, #44]	; 0x2c
   12b20:	and	r3, r3, r2
   12b24:	ands	r8, r3, #255	; 0xff
   12b28:	bne	12e2c <__assert_fail@plt+0x1fa0>
   12b2c:	ldr	r3, [sp, #152]	; 0x98
   12b30:	sub	r2, r3, #2
   12b34:	clz	r2, r2
   12b38:	lsr	r2, r2, #5
   12b3c:	b	12624 <__assert_fail@plt+0x1798>
   12b40:	ldr	r3, [sp, #56]	; 0x38
   12b44:	add	r3, r3, sl
   12b48:	str	r3, [sp, #48]	; 0x30
   12b4c:	ldr	r3, [sp, #48]	; 0x30
   12b50:	mov	r6, #0
   12b54:	ldrb	r4, [r3]
   12b58:	cmp	r4, #126	; 0x7e
   12b5c:	ldrls	pc, [pc, r4, lsl #2]
   12b60:	b	12ae0 <__assert_fail@plt+0x1c54>
   12b64:	andeq	r2, r1, r4, lsl #18
   12b68:	andeq	r2, r1, r0, ror #21
   12b6c:	andeq	r2, r1, r0, ror #21
   12b70:	andeq	r2, r1, r0, ror #21
   12b74:	andeq	r2, r1, r0, ror #21
   12b78:	andeq	r2, r1, r0, ror #21
   12b7c:	andeq	r2, r1, r0, ror #21
   12b80:	andeq	r2, r1, r8, ror #17
   12b84:	andeq	r2, r1, ip, asr #17
   12b88:	andeq	r2, r1, r0, ror #26
   12b8c:	andeq	r2, r1, ip, lsr #16
   12b90:	andeq	r2, r1, r0, lsl r8
   12b94:	andeq	r2, r1, r4, lsr #21
   12b98:	andeq	r2, r1, r0, lsl #21
   12b9c:	andeq	r2, r1, r0, ror #21
   12ba0:	andeq	r2, r1, r0, ror #21
   12ba4:	andeq	r2, r1, r0, ror #21
   12ba8:	andeq	r2, r1, r0, ror #21
   12bac:	andeq	r2, r1, r0, ror #21
   12bb0:	andeq	r2, r1, r0, ror #21
   12bb4:	andeq	r2, r1, r0, ror #21
   12bb8:	andeq	r2, r1, r0, ror #21
   12bbc:	andeq	r2, r1, r0, ror #21
   12bc0:	andeq	r2, r1, r0, ror #21
   12bc4:	andeq	r2, r1, r0, ror #21
   12bc8:	andeq	r2, r1, r0, ror #21
   12bcc:	andeq	r2, r1, r0, ror #21
   12bd0:	andeq	r2, r1, r0, ror #21
   12bd4:	andeq	r2, r1, r0, ror #21
   12bd8:	andeq	r2, r1, r0, ror #21
   12bdc:	andeq	r2, r1, r0, ror #21
   12be0:	andeq	r2, r1, r0, ror #21
   12be4:	strdeq	r2, [r1], -r8
   12be8:	strdeq	r2, [r1], -r4
   12bec:	strdeq	r2, [r1], -r4
   12bf0:	andeq	r2, r1, r4, lsl #12
   12bf4:	strdeq	r2, [r1], -r4
   12bf8:	andeq	r2, r1, ip, lsl #21
   12bfc:	strdeq	r2, [r1], -r4
   12c00:	andeq	r2, r1, r0, ror #20
   12c04:	strdeq	r2, [r1], -r4
   12c08:	strdeq	r2, [r1], -r4
   12c0c:	strdeq	r2, [r1], -r4
   12c10:	andeq	r2, r1, ip, lsl #21
   12c14:	andeq	r2, r1, ip, lsl #21
   12c18:	andeq	r2, r1, ip, lsl #21
   12c1c:	andeq	r2, r1, ip, lsl #21
   12c20:	andeq	r2, r1, ip, lsl #21
   12c24:	andeq	r2, r1, ip, lsl #21
   12c28:	andeq	r2, r1, ip, lsl #21
   12c2c:	andeq	r2, r1, ip, lsl #21
   12c30:	andeq	r2, r1, ip, lsl #21
   12c34:	andeq	r2, r1, ip, lsl #21
   12c38:	andeq	r2, r1, ip, lsl #21
   12c3c:	andeq	r2, r1, ip, lsl #21
   12c40:	andeq	r2, r1, ip, lsl #21
   12c44:	andeq	r2, r1, ip, lsl #21
   12c48:	andeq	r2, r1, ip, lsl #21
   12c4c:	andeq	r2, r1, ip, lsl #21
   12c50:	strdeq	r2, [r1], -r4
   12c54:	strdeq	r2, [r1], -r4
   12c58:	strdeq	r2, [r1], -r4
   12c5c:	strdeq	r2, [r1], -r4
   12c60:	andeq	r2, r1, r0, lsr sl
   12c64:	andeq	r2, r1, r0, ror #21
   12c68:	andeq	r2, r1, ip, lsl #21
   12c6c:	andeq	r2, r1, ip, lsl #21
   12c70:	andeq	r2, r1, ip, lsl #21
   12c74:	andeq	r2, r1, ip, lsl #21
   12c78:	andeq	r2, r1, ip, lsl #21
   12c7c:	andeq	r2, r1, ip, lsl #21
   12c80:	andeq	r2, r1, ip, lsl #21
   12c84:	andeq	r2, r1, ip, lsl #21
   12c88:	andeq	r2, r1, ip, lsl #21
   12c8c:	andeq	r2, r1, ip, lsl #21
   12c90:	andeq	r2, r1, ip, lsl #21
   12c94:	andeq	r2, r1, ip, lsl #21
   12c98:	andeq	r2, r1, ip, lsl #21
   12c9c:	andeq	r2, r1, ip, lsl #21
   12ca0:	andeq	r2, r1, ip, lsl #21
   12ca4:	andeq	r2, r1, ip, lsl #21
   12ca8:	andeq	r2, r1, ip, lsl #21
   12cac:	andeq	r2, r1, ip, lsl #21
   12cb0:	andeq	r2, r1, ip, lsl #21
   12cb4:	andeq	r2, r1, ip, lsl #21
   12cb8:	andeq	r2, r1, ip, lsl #21
   12cbc:	andeq	r2, r1, ip, lsl #21
   12cc0:	andeq	r2, r1, ip, lsl #21
   12cc4:	andeq	r2, r1, ip, lsl #21
   12cc8:	andeq	r2, r1, ip, lsl #21
   12ccc:	andeq	r2, r1, ip, lsl #21
   12cd0:	strdeq	r2, [r1], -r4
   12cd4:	andeq	r2, r1, r0, asr r7
   12cd8:	andeq	r2, r1, ip, lsl #21
   12cdc:	strdeq	r2, [r1], -r4
   12ce0:	andeq	r2, r1, ip, lsl #21
   12ce4:	strdeq	r2, [r1], -r4
   12ce8:	andeq	r2, r1, ip, lsl #21
   12cec:	andeq	r2, r1, ip, lsl #21
   12cf0:	andeq	r2, r1, ip, lsl #21
   12cf4:	andeq	r2, r1, ip, lsl #21
   12cf8:	andeq	r2, r1, ip, lsl #21
   12cfc:	andeq	r2, r1, ip, lsl #21
   12d00:	andeq	r2, r1, ip, lsl #21
   12d04:	andeq	r2, r1, ip, lsl #21
   12d08:	andeq	r2, r1, ip, lsl #21
   12d0c:	andeq	r2, r1, ip, lsl #21
   12d10:	andeq	r2, r1, ip, lsl #21
   12d14:	andeq	r2, r1, ip, lsl #21
   12d18:	andeq	r2, r1, ip, lsl #21
   12d1c:	andeq	r2, r1, ip, lsl #21
   12d20:	andeq	r2, r1, ip, lsl #21
   12d24:	andeq	r2, r1, ip, lsl #21
   12d28:	andeq	r2, r1, ip, lsl #21
   12d2c:	andeq	r2, r1, ip, lsl #21
   12d30:	andeq	r2, r1, ip, lsl #21
   12d34:	andeq	r2, r1, ip, lsl #21
   12d38:	andeq	r2, r1, ip, lsl #21
   12d3c:	andeq	r2, r1, ip, lsl #21
   12d40:	andeq	r2, r1, ip, lsl #21
   12d44:	andeq	r2, r1, ip, lsl #21
   12d48:	andeq	r2, r1, ip, lsl #21
   12d4c:	andeq	r2, r1, ip, lsl #21
   12d50:	andeq	r2, r1, r4, ror #11
   12d54:	strdeq	r2, [r1], -r4
   12d58:	andeq	r2, r1, r4, ror #11
   12d5c:	andeq	r2, r1, r4, lsl #12
   12d60:	mov	r3, #116	; 0x74
   12d64:	b	12834 <__assert_fail@plt+0x19a8>
   12d68:	ldr	r3, [sp, #160]	; 0xa0
   12d6c:	cmp	r3, #0
   12d70:	beq	12640 <__assert_fail@plt+0x17b4>
   12d74:	lsr	r3, r4, #5
   12d78:	ldr	r0, [sp, #160]	; 0xa0
   12d7c:	uxtb	r3, r3
   12d80:	and	r1, r4, #31
   12d84:	ldr	r0, [r0, r3, lsl #2]
   12d88:	lsr	r3, r0, r1
   12d8c:	tst	r3, #1
   12d90:	beq	12640 <__assert_fail@plt+0x17b4>
   12d94:	ldr	r3, [sp, #28]
   12d98:	cmp	r3, #0
   12d9c:	beq	127a0 <__assert_fail@plt+0x1914>
   12da0:	ldr	sl, [sp, #32]
   12da4:	mov	r8, fp
   12da8:	b	12864 <__assert_fail@plt+0x19d8>
   12dac:	ldr	r3, [sp, #28]
   12db0:	cmp	r3, #0
   12db4:	bne	13308 <__assert_fail@plt+0x247c>
   12db8:	add	sl, sl, #1
   12dbc:	ldr	r6, [sp, #40]	; 0x28
   12dc0:	mov	r5, #0
   12dc4:	mov	r4, #92	; 0x5c
   12dc8:	b	1265c <__assert_fail@plt+0x17d0>
   12dcc:	cmp	r9, r8
   12dd0:	bne	13040 <__assert_fail@plt+0x21b4>
   12dd4:	ldr	r0, [sp, #100]	; 0x64
   12dd8:	bl	10ce8 <iswprint@plt>
   12ddc:	add	r5, r5, r4
   12de0:	cmp	r0, #0
   12de4:	add	r0, sp, #104	; 0x68
   12de8:	moveq	r6, #0
   12dec:	bl	10c94 <mbsinit@plt>
   12df0:	cmp	r0, #0
   12df4:	beq	12fd4 <__assert_fail@plt+0x2148>
   12df8:	mov	r2, r6
   12dfc:	mov	ip, r5
   12e00:	eor	r5, r2, #1
   12e04:	ldr	r4, [sp, #80]	; 0x50
   12e08:	ldr	r6, [sp, #84]	; 0x54
   12e0c:	ldr	r7, [sp, #88]	; 0x58
   12e10:	uxtb	r5, r5
   12e14:	cmp	ip, #1
   12e18:	bls	13318 <__assert_fail@plt+0x248c>
   12e1c:	ldr	r3, [sp, #44]	; 0x2c
   12e20:	and	r8, r3, r5
   12e24:	mov	r5, r2
   12e28:	uxtb	r8, r8
   12e2c:	add	r2, sl, ip
   12e30:	ldr	r0, [sp, #48]	; 0x30
   12e34:	mov	r1, #0
   12e38:	str	r5, [sp, #48]	; 0x30
   12e3c:	ldr	r9, [sp, #28]
   12e40:	ldr	ip, [sp, #40]	; 0x28
   12e44:	ldr	r3, [sp, #32]
   12e48:	ldr	r5, [sp, #152]	; 0x98
   12e4c:	b	12f08 <__assert_fail@plt+0x207c>
   12e50:	cmp	r9, #0
   12e54:	bne	1322c <__assert_fail@plt+0x23a0>
   12e58:	eor	r1, ip, #1
   12e5c:	cmp	r5, #2
   12e60:	movne	r1, #0
   12e64:	andeq	r1, r1, #1
   12e68:	cmp	r1, #0
   12e6c:	beq	12ea4 <__assert_fail@plt+0x2018>
   12e70:	cmp	fp, r7
   12e74:	movhi	ip, #39	; 0x27
   12e78:	strbhi	ip, [r3, r7]
   12e7c:	add	ip, r7, #1
   12e80:	cmp	fp, ip
   12e84:	movhi	lr, #36	; 0x24
   12e88:	strbhi	lr, [r3, ip]
   12e8c:	add	ip, r7, #2
   12e90:	cmp	fp, ip
   12e94:	movhi	lr, #39	; 0x27
   12e98:	strbhi	lr, [r3, ip]
   12e9c:	add	r7, r7, #3
   12ea0:	mov	ip, r1
   12ea4:	cmp	fp, r7
   12ea8:	movhi	r1, #92	; 0x5c
   12eac:	strbhi	r1, [r3, r7]
   12eb0:	add	r1, r7, #1
   12eb4:	cmp	fp, r1
   12eb8:	lsrhi	lr, r4, #6
   12ebc:	addhi	lr, lr, #48	; 0x30
   12ec0:	strbhi	lr, [r3, r1]
   12ec4:	add	lr, r7, #2
   12ec8:	cmp	fp, lr
   12ecc:	lsrhi	r1, r4, #3
   12ed0:	andhi	r1, r1, #7
   12ed4:	addhi	r1, r1, #48	; 0x30
   12ed8:	add	sl, sl, #1
   12edc:	strbhi	r1, [r3, lr]
   12ee0:	and	r4, r4, #7
   12ee4:	cmp	r2, sl
   12ee8:	add	r4, r4, #48	; 0x30
   12eec:	add	r7, r7, #3
   12ef0:	bls	13250 <__assert_fail@plt+0x23c4>
   12ef4:	mov	r1, r8
   12ef8:	cmp	fp, r7
   12efc:	strbhi	r4, [r3, r7]
   12f00:	ldrb	r4, [r0, #1]!
   12f04:	add	r7, r7, #1
   12f08:	cmp	r8, #0
   12f0c:	bne	12e50 <__assert_fail@plt+0x1fc4>
   12f10:	cmp	r6, #0
   12f14:	bne	12f64 <__assert_fail@plt+0x20d8>
   12f18:	eor	r6, r1, #1
   12f1c:	and	r6, r6, ip
   12f20:	add	sl, sl, #1
   12f24:	cmp	r2, sl
   12f28:	uxtb	r6, r6
   12f2c:	bls	12f8c <__assert_fail@plt+0x2100>
   12f30:	cmp	r6, #0
   12f34:	beq	12ef8 <__assert_fail@plt+0x206c>
   12f38:	cmp	fp, r7
   12f3c:	movhi	ip, #39	; 0x27
   12f40:	strbhi	ip, [r3, r7]
   12f44:	add	ip, r7, #1
   12f48:	cmp	fp, ip
   12f4c:	movhi	lr, #39	; 0x27
   12f50:	strbhi	lr, [r3, ip]
   12f54:	add	r7, r7, #2
   12f58:	mov	r6, r8
   12f5c:	mov	ip, r8
   12f60:	b	12ef8 <__assert_fail@plt+0x206c>
   12f64:	cmp	fp, r7
   12f68:	eor	r6, r1, #1
   12f6c:	movhi	lr, #92	; 0x5c
   12f70:	and	r6, r6, ip
   12f74:	add	sl, sl, #1
   12f78:	strbhi	lr, [r3, r7]
   12f7c:	cmp	r2, sl
   12f80:	add	r7, r7, #1
   12f84:	uxtb	r6, r6
   12f88:	bhi	12f30 <__assert_fail@plt+0x20a4>
   12f8c:	str	ip, [sp, #40]	; 0x28
   12f90:	ldr	r5, [sp, #48]	; 0x30
   12f94:	b	1265c <__assert_fail@plt+0x17d0>
   12f98:	ldr	r3, [sp, #24]
   12f9c:	cmn	r3, #1
   12fa0:	mov	r3, #0
   12fa4:	str	r3, [sp, #104]	; 0x68
   12fa8:	str	r3, [sp, #108]	; 0x6c
   12fac:	beq	132cc <__assert_fail@plt+0x2440>
   12fb0:	mov	r2, r5
   12fb4:	mov	r3, #0
   12fb8:	str	r7, [sp, #88]	; 0x58
   12fbc:	ldr	r7, [sp, #152]	; 0x98
   12fc0:	str	r5, [sp, #92]	; 0x5c
   12fc4:	str	r6, [sp, #84]	; 0x54
   12fc8:	mov	r5, r3
   12fcc:	mov	r6, r2
   12fd0:	str	r4, [sp, #80]	; 0x50
   12fd4:	ldr	r3, [sp, #56]	; 0x38
   12fd8:	add	r9, sl, r5
   12fdc:	add	r8, r3, r9
   12fe0:	ldr	r3, [sp, #24]
   12fe4:	mov	r1, r8
   12fe8:	sub	r2, r3, r9
   12fec:	add	r0, sp, #100	; 0x64
   12ff0:	add	r3, sp, #104	; 0x68
   12ff4:	bl	1531c <__assert_fail@plt+0x4490>
   12ff8:	subs	r4, r0, #0
   12ffc:	beq	133a4 <__assert_fail@plt+0x2518>
   13000:	cmn	r4, #1
   13004:	beq	13384 <__assert_fail@plt+0x24f8>
   13008:	cmn	r4, #2
   1300c:	beq	13324 <__assert_fail@plt+0x2498>
   13010:	ldr	r2, [sp, #28]
   13014:	cmp	r7, #2
   13018:	movne	r2, #0
   1301c:	andeq	r2, r2, #1
   13020:	cmp	r2, #0
   13024:	beq	12dd4 <__assert_fail@plt+0x1f48>
   13028:	cmp	r4, #1
   1302c:	beq	12dd4 <__assert_fail@plt+0x1f48>
   13030:	sub	r3, r4, #1
   13034:	add	r9, r3, r9
   13038:	ldr	r3, [sp, #56]	; 0x38
   1303c:	add	r9, r3, r9
   13040:	ldrb	r3, [r8, #1]!
   13044:	sub	r3, r3, #91	; 0x5b
   13048:	cmp	r3, #33	; 0x21
   1304c:	ldrls	pc, [pc, r3, lsl #2]
   13050:	b	12dcc <__assert_fail@plt+0x1f40>
   13054:	ldrdeq	r3, [r1], -ip
   13058:	ldrdeq	r3, [r1], -ip
   1305c:	andeq	r2, r1, ip, asr #27
   13060:	ldrdeq	r3, [r1], -ip
   13064:	andeq	r2, r1, ip, asr #27
   13068:	ldrdeq	r3, [r1], -ip
   1306c:	andeq	r2, r1, ip, asr #27
   13070:	andeq	r2, r1, ip, asr #27
   13074:	andeq	r2, r1, ip, asr #27
   13078:	andeq	r2, r1, ip, asr #27
   1307c:	andeq	r2, r1, ip, asr #27
   13080:	andeq	r2, r1, ip, asr #27
   13084:	andeq	r2, r1, ip, asr #27
   13088:	andeq	r2, r1, ip, asr #27
   1308c:	andeq	r2, r1, ip, asr #27
   13090:	andeq	r2, r1, ip, asr #27
   13094:	andeq	r2, r1, ip, asr #27
   13098:	andeq	r2, r1, ip, asr #27
   1309c:	andeq	r2, r1, ip, asr #27
   130a0:	andeq	r2, r1, ip, asr #27
   130a4:	andeq	r2, r1, ip, asr #27
   130a8:	andeq	r2, r1, ip, asr #27
   130ac:	andeq	r2, r1, ip, asr #27
   130b0:	andeq	r2, r1, ip, asr #27
   130b4:	andeq	r2, r1, ip, asr #27
   130b8:	andeq	r2, r1, ip, asr #27
   130bc:	andeq	r2, r1, ip, asr #27
   130c0:	andeq	r2, r1, ip, asr #27
   130c4:	andeq	r2, r1, ip, asr #27
   130c8:	andeq	r2, r1, ip, asr #27
   130cc:	andeq	r2, r1, ip, asr #27
   130d0:	andeq	r2, r1, ip, asr #27
   130d4:	andeq	r2, r1, ip, asr #27
   130d8:	ldrdeq	r3, [r1], -ip
   130dc:	mov	r3, #2
   130e0:	ldr	sl, [sp, #32]
   130e4:	mov	r8, fp
   130e8:	str	r3, [sp, #152]	; 0x98
   130ec:	b	12864 <__assert_fail@plt+0x19d8>
   130f0:	ldr	r3, [sp, #156]	; 0x9c
   130f4:	tst	r3, #1
   130f8:	bne	13224 <__assert_fail@plt+0x2398>
   130fc:	ldr	r3, [sp, #152]	; 0x98
   13100:	ldr	r4, [sp, #44]	; 0x2c
   13104:	sub	r2, r3, #2
   13108:	mov	r5, #0
   1310c:	clz	r2, r2
   13110:	mov	r8, r4
   13114:	lsr	r2, r2, #5
   13118:	b	12624 <__assert_fail@plt+0x1798>
   1311c:	ldr	r3, [sp, #156]	; 0x9c
   13120:	ands	r9, r3, #4
   13124:	beq	1325c <__assert_fail@plt+0x23d0>
   13128:	ldr	r2, [sp, #24]
   1312c:	add	r3, sl, #2
   13130:	cmp	r3, r2
   13134:	bcs	13148 <__assert_fail@plt+0x22bc>
   13138:	ldr	r2, [sp, #48]	; 0x30
   1313c:	ldrb	r4, [r2, #1]
   13140:	cmp	r4, #63	; 0x3f
   13144:	beq	133e4 <__assert_fail@plt+0x2558>
   13148:	mov	r2, #0
   1314c:	mov	r8, r2
   13150:	mov	r5, r2
   13154:	mov	r4, #63	; 0x3f
   13158:	b	12624 <__assert_fail@plt+0x1798>
   1315c:	ldr	r3, [sp, #28]
   13160:	cmp	r3, #0
   13164:	bne	13488 <__assert_fail@plt+0x25fc>
   13168:	mov	r2, r5
   1316c:	mov	r8, r3
   13170:	mov	r5, #0
   13174:	mov	r4, #63	; 0x3f
   13178:	b	12624 <__assert_fail@plt+0x1798>
   1317c:	ldr	r3, [sp, #28]
   13180:	cmp	r3, #0
   13184:	bne	13488 <__assert_fail@plt+0x25fc>
   13188:	ldr	r2, [sp, #72]	; 0x48
   1318c:	adds	r3, fp, #0
   13190:	movne	r3, #1
   13194:	cmp	r2, #0
   13198:	movne	r3, #0
   1319c:	cmp	r3, #0
   131a0:	strne	fp, [sp, #72]	; 0x48
   131a4:	movne	fp, #0
   131a8:	bne	131e4 <__assert_fail@plt+0x2358>
   131ac:	cmp	fp, r7
   131b0:	movhi	r2, #39	; 0x27
   131b4:	ldrhi	r3, [sp, #32]
   131b8:	strbhi	r2, [r3, r7]
   131bc:	add	r3, r7, #1
   131c0:	cmp	fp, r3
   131c4:	movhi	r1, #92	; 0x5c
   131c8:	ldrhi	r2, [sp, #32]
   131cc:	strbhi	r1, [r2, r3]
   131d0:	add	r3, r7, #2
   131d4:	cmp	fp, r3
   131d8:	movhi	r1, #39	; 0x27
   131dc:	ldrhi	r2, [sp, #32]
   131e0:	strbhi	r1, [r2, r3]
   131e4:	ldr	r3, [sp, #28]
   131e8:	add	r7, r7, #3
   131ec:	mov	r2, r5
   131f0:	mov	r8, r3
   131f4:	str	r5, [sp, #68]	; 0x44
   131f8:	str	r3, [sp, #40]	; 0x28
   131fc:	mov	r4, #39	; 0x27
   13200:	b	12624 <__assert_fail@plt+0x1798>
   13204:	ldr	r3, [sp, #56]	; 0x38
   13208:	ldrb	r3, [r3, #1]
   1320c:	adds	r3, r3, #0
   13210:	movne	r3, #1
   13214:	b	125fc <__assert_fail@plt+0x1770>
   13218:	ldr	r5, [sp, #28]
   1321c:	mov	r4, #48	; 0x30
   13220:	b	12624 <__assert_fail@plt+0x1798>
   13224:	add	sl, sl, #1
   13228:	b	12154 <__assert_fail@plt+0x12c8>
   1322c:	mov	sl, r3
   13230:	ldr	r3, [sp, #28]
   13234:	mov	r8, fp
   13238:	str	r3, [sp, #44]	; 0x2c
   1323c:	ldr	r3, [sp, #152]	; 0x98
   13240:	sub	r2, r3, #2
   13244:	clz	r2, r2
   13248:	lsr	r2, r2, #5
   1324c:	b	12864 <__assert_fail@plt+0x19d8>
   13250:	str	ip, [sp, #40]	; 0x28
   13254:	ldr	r5, [sp, #48]	; 0x30
   13258:	b	12694 <__assert_fail@plt+0x1808>
   1325c:	mov	r2, r9
   13260:	mov	r8, r9
   13264:	mov	r5, #0
   13268:	mov	r4, #63	; 0x3f
   1326c:	b	12624 <__assert_fail@plt+0x1798>
   13270:	cmp	fp, #0
   13274:	beq	132ec <__assert_fail@plt+0x2460>
   13278:	ldr	r1, [sp, #32]
   1327c:	mov	r3, #34	; 0x22
   13280:	mov	r2, #1
   13284:	strb	r3, [r1]
   13288:	ldr	r3, [pc, #332]	; 133dc <__assert_fail@plt+0x2550>
   1328c:	str	r2, [sp, #52]	; 0x34
   13290:	mov	r7, r2
   13294:	str	r2, [sp, #44]	; 0x2c
   13298:	str	r3, [sp, #64]	; 0x40
   1329c:	b	12144 <__assert_fail@plt+0x12b8>
   132a0:	ldr	r3, [pc, #300]	; 133d4 <__assert_fail@plt+0x2548>
   132a4:	str	r3, [sp, #64]	; 0x40
   132a8:	mov	r3, #0
   132ac:	str	r3, [sp, #28]
   132b0:	mov	r3, #1
   132b4:	str	r3, [sp, #52]	; 0x34
   132b8:	mov	r7, r3
   132bc:	mov	r3, #2
   132c0:	str	r3, [sp, #152]	; 0x98
   132c4:	b	12144 <__assert_fail@plt+0x12b8>
   132c8:	bl	10e74 <abort@plt>
   132cc:	ldr	r0, [sp, #56]	; 0x38
   132d0:	bl	10da8 <strlen@plt>
   132d4:	str	r0, [sp, #24]
   132d8:	b	12fb0 <__assert_fail@plt+0x2124>
   132dc:	mov	r5, r8
   132e0:	mov	r4, #48	; 0x30
   132e4:	ldr	r8, [sp, #44]	; 0x2c
   132e8:	b	12624 <__assert_fail@plt+0x1798>
   132ec:	mov	r3, #1
   132f0:	str	r3, [sp, #52]	; 0x34
   132f4:	mov	r7, r3
   132f8:	str	r3, [sp, #44]	; 0x2c
   132fc:	ldr	r3, [pc, #216]	; 133dc <__assert_fail@plt+0x2550>
   13300:	str	r3, [sp, #64]	; 0x40
   13304:	b	12144 <__assert_fail@plt+0x12b8>
   13308:	ldr	sl, [sp, #32]
   1330c:	mov	r8, fp
   13310:	mov	r2, r3
   13314:	b	12864 <__assert_fail@plt+0x19d8>
   13318:	mov	r3, r5
   1331c:	mov	r5, r2
   13320:	b	12b1c <__assert_fail@plt+0x1c90>
   13324:	ldr	r1, [sp, #24]
   13328:	mov	r2, r5
   1332c:	cmp	r1, r9
   13330:	mov	ip, r5
   13334:	ldr	r4, [sp, #80]	; 0x50
   13338:	ldr	r5, [sp, #92]	; 0x5c
   1333c:	ldr	r6, [sp, #84]	; 0x54
   13340:	ldr	r7, [sp, #88]	; 0x58
   13344:	bls	13378 <__assert_fail@plt+0x24ec>
   13348:	ldrb	r3, [r8]
   1334c:	cmp	r3, #0
   13350:	bne	13364 <__assert_fail@plt+0x24d8>
   13354:	b	1337c <__assert_fail@plt+0x24f0>
   13358:	ldrb	r3, [r8, #1]!
   1335c:	cmp	r3, #0
   13360:	beq	1347c <__assert_fail@plt+0x25f0>
   13364:	add	r2, r2, #1
   13368:	add	r3, sl, r2
   1336c:	cmp	r1, r3
   13370:	bhi	13358 <__assert_fail@plt+0x24cc>
   13374:	mov	ip, r2
   13378:	mov	r3, #0
   1337c:	mov	r2, r3
   13380:	b	12e14 <__assert_fail@plt+0x1f88>
   13384:	mov	r3, #0
   13388:	mov	ip, r5
   1338c:	ldr	r4, [sp, #80]	; 0x50
   13390:	ldr	r5, [sp, #92]	; 0x5c
   13394:	ldr	r6, [sp, #84]	; 0x54
   13398:	ldr	r7, [sp, #88]	; 0x58
   1339c:	mov	r2, r3
   133a0:	b	12e14 <__assert_fail@plt+0x1f88>
   133a4:	mov	r3, r6
   133a8:	mov	ip, r5
   133ac:	eor	r5, r3, #1
   133b0:	mov	r2, r6
   133b4:	ldr	r4, [sp, #80]	; 0x50
   133b8:	ldr	r6, [sp, #84]	; 0x54
   133bc:	ldr	r7, [sp, #88]	; 0x58
   133c0:	uxtb	r5, r5
   133c4:	b	12e14 <__assert_fail@plt+0x1f88>
   133c8:	ldr	sl, [sp, #32]
   133cc:	mov	r8, fp
   133d0:	b	13238 <__assert_fail@plt+0x23ac>
   133d4:	andeq	r6, r1, r0, lsl #11
   133d8:	andeq	r6, r1, r4, lsl #11
   133dc:	andeq	r6, r1, ip, ror r5
   133e0:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   133e4:	ldr	r2, [sp, #56]	; 0x38
   133e8:	ldrb	r1, [r2, r3]
   133ec:	sub	r2, r1, #33	; 0x21
   133f0:	uxtb	r2, r2
   133f4:	cmp	r2, #29
   133f8:	bhi	13498 <__assert_fail@plt+0x260c>
   133fc:	ldr	r0, [pc, #-36]	; 133e0 <__assert_fail@plt+0x2554>
   13400:	mov	ip, #1
   13404:	ands	r2, r0, ip, lsl r2
   13408:	beq	134a8 <__assert_fail@plt+0x261c>
   1340c:	ldr	r2, [sp, #28]
   13410:	cmp	r2, #0
   13414:	bne	135a8 <__assert_fail@plt+0x271c>
   13418:	cmp	fp, r7
   1341c:	ldr	r8, [sp, #28]
   13420:	ldrhi	r2, [sp, #32]
   13424:	mov	sl, r3
   13428:	mov	r5, r8
   1342c:	strbhi	r4, [r2, r7]
   13430:	add	r2, r7, #1
   13434:	cmp	fp, r2
   13438:	movhi	r0, #34	; 0x22
   1343c:	ldrhi	ip, [sp, #32]
   13440:	mov	r4, r1
   13444:	strbhi	r0, [ip, r2]
   13448:	add	r2, r7, #2
   1344c:	cmp	fp, r2
   13450:	movhi	r0, #34	; 0x22
   13454:	ldrhi	ip, [sp, #32]
   13458:	strbhi	r0, [ip, r2]
   1345c:	add	r2, r7, #3
   13460:	cmp	fp, r2
   13464:	movhi	r0, #63	; 0x3f
   13468:	ldrhi	ip, [sp, #32]
   1346c:	add	r7, r7, #4
   13470:	strbhi	r0, [ip, r2]
   13474:	mov	r2, r8
   13478:	b	12624 <__assert_fail@plt+0x1798>
   1347c:	mov	ip, r2
   13480:	mov	r2, r3
   13484:	b	12e14 <__assert_fail@plt+0x1f88>
   13488:	ldr	sl, [sp, #32]
   1348c:	mov	r8, fp
   13490:	ldr	r2, [sp, #28]
   13494:	b	12864 <__assert_fail@plt+0x19d8>
   13498:	mov	r2, #0
   1349c:	mov	r8, r2
   134a0:	mov	r5, r2
   134a4:	b	12624 <__assert_fail@plt+0x1798>
   134a8:	mov	r8, r2
   134ac:	mov	r5, #0
   134b0:	b	12624 <__assert_fail@plt+0x1798>
   134b4:	ldr	r1, [sp, #152]	; 0x98
   134b8:	bl	11f80 <__assert_fail@plt+0x10f4>
   134bc:	str	r0, [sp, #168]	; 0xa8
   134c0:	b	124e0 <__assert_fail@plt+0x1654>
   134c4:	ldr	r1, [sp, #152]	; 0x98
   134c8:	bl	11f80 <__assert_fail@plt+0x10f4>
   134cc:	str	r0, [sp, #164]	; 0xa4
   134d0:	b	124c0 <__assert_fail@plt+0x1634>
   134d4:	ldr	r7, [sp, #28]
   134d8:	b	12520 <__assert_fail@plt+0x1694>
   134dc:	ldr	sl, [sp, #32]
   134e0:	ldr	r2, [sp, #68]	; 0x44
   134e4:	mov	r8, fp
   134e8:	mov	fp, r7
   134ec:	ldr	r3, [sp, #64]	; 0x40
   134f0:	cmp	r3, #0
   134f4:	moveq	r2, #0
   134f8:	andne	r2, r2, #1
   134fc:	cmp	r2, #0
   13500:	beq	1352c <__assert_fail@plt+0x26a0>
   13504:	mov	r2, r3
   13508:	ldrb	r3, [r3]
   1350c:	cmp	r3, #0
   13510:	beq	1352c <__assert_fail@plt+0x26a0>
   13514:	cmp	r8, fp
   13518:	strbhi	r3, [sl, fp]
   1351c:	ldrb	r3, [r2, #1]!
   13520:	add	fp, fp, #1
   13524:	cmp	r3, #0
   13528:	bne	13514 <__assert_fail@plt+0x2688>
   1352c:	cmp	r8, fp
   13530:	movhi	r3, #0
   13534:	strbhi	r3, [sl, fp]
   13538:	b	128c0 <__assert_fail@plt+0x1a34>
   1353c:	ldr	r3, [sp, #168]	; 0xa8
   13540:	ldr	sl, [sp, #32]
   13544:	str	r3, [sp, #16]
   13548:	ldr	r3, [sp, #164]	; 0xa4
   1354c:	mov	ip, #5
   13550:	str	r3, [sp, #12]
   13554:	ldr	r3, [sp, #160]	; 0xa0
   13558:	ldr	r2, [sp, #56]	; 0x38
   1355c:	str	r3, [sp, #8]
   13560:	ldr	r3, [sp, #156]	; 0x9c
   13564:	ldr	r1, [sp, #72]	; 0x48
   13568:	str	r3, [sp, #4]
   1356c:	mov	r0, sl
   13570:	ldr	r3, [sp, #24]
   13574:	str	ip, [sp]
   13578:	bl	120a0 <__assert_fail@plt+0x1214>
   1357c:	mov	fp, r0
   13580:	b	128c0 <__assert_fail@plt+0x1a34>
   13584:	mov	r8, fp
   13588:	ldr	sl, [sp, #32]
   1358c:	mov	fp, r7
   13590:	mov	r2, r3
   13594:	b	134ec <__assert_fail@plt+0x2660>
   13598:	mov	r8, fp
   1359c:	ldr	sl, [sp, #32]
   135a0:	mov	fp, r7
   135a4:	b	134ec <__assert_fail@plt+0x2660>
   135a8:	ldr	sl, [sp, #32]
   135ac:	mov	r8, fp
   135b0:	b	1287c <__assert_fail@plt+0x19f0>
   135b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135b8:	sub	sp, sp, #52	; 0x34
   135bc:	mov	r4, r0
   135c0:	mov	r5, r3
   135c4:	mov	sl, r1
   135c8:	mov	fp, r2
   135cc:	bl	10dc0 <__errno_location@plt>
   135d0:	ldr	r7, [pc, #412]	; 13774 <__assert_fail@plt+0x28e8>
   135d4:	cmn	r4, #-2147483647	; 0x80000001
   135d8:	ldr	r6, [r7]
   135dc:	mov	r8, r0
   135e0:	movne	r0, #0
   135e4:	moveq	r0, #1
   135e8:	ldr	r3, [r8]
   135ec:	orrs	r0, r0, r4, lsr #31
   135f0:	str	r3, [sp, #24]
   135f4:	bne	13770 <__assert_fail@plt+0x28e4>
   135f8:	ldr	r2, [r7, #4]
   135fc:	cmp	r4, r2
   13600:	blt	13660 <__assert_fail@plt+0x27d4>
   13604:	add	r9, r7, #8
   13608:	cmp	r6, r9
   1360c:	str	r2, [sp, #44]	; 0x2c
   13610:	beq	13740 <__assert_fail@plt+0x28b4>
   13614:	mov	r3, #8
   13618:	sub	r2, r4, r2
   1361c:	mov	r0, r6
   13620:	str	r3, [sp]
   13624:	add	r2, r2, #1
   13628:	mvn	r3, #-2147483648	; 0x80000000
   1362c:	add	r1, sp, #44	; 0x2c
   13630:	bl	14420 <__assert_fail@plt+0x3594>
   13634:	mov	r6, r0
   13638:	str	r0, [r7]
   1363c:	ldr	r0, [r7, #4]
   13640:	ldr	r2, [sp, #44]	; 0x2c
   13644:	mov	r1, #0
   13648:	sub	r2, r2, r0
   1364c:	add	r0, r6, r0, lsl #3
   13650:	lsl	r2, r2, #3
   13654:	bl	10dd8 <memset@plt>
   13658:	ldr	r3, [sp, #44]	; 0x2c
   1365c:	str	r3, [r7, #4]
   13660:	add	r3, r6, r4, lsl #3
   13664:	ldr	r1, [r5, #4]
   13668:	ldr	r7, [r3, #4]
   1366c:	ldr	r9, [r6, r4, lsl #3]
   13670:	ldr	r2, [r5, #40]	; 0x28
   13674:	ldr	ip, [r5, #44]	; 0x2c
   13678:	add	r0, r5, #8
   1367c:	str	r3, [sp, #28]
   13680:	ldr	r3, [r5]
   13684:	orr	r1, r1, #1
   13688:	mov	lr, r0
   1368c:	str	r1, [sp, #32]
   13690:	str	r0, [sp, #36]	; 0x24
   13694:	str	r1, [sp, #4]
   13698:	str	r2, [sp, #12]
   1369c:	str	r3, [sp]
   136a0:	mov	r0, r7
   136a4:	mov	r1, r9
   136a8:	str	ip, [sp, #16]
   136ac:	str	lr, [sp, #8]
   136b0:	mov	r3, fp
   136b4:	mov	r2, sl
   136b8:	bl	120a0 <__assert_fail@plt+0x1214>
   136bc:	cmp	r9, r0
   136c0:	bhi	1372c <__assert_fail@plt+0x28a0>
   136c4:	ldr	r3, [pc, #172]	; 13778 <__assert_fail@plt+0x28ec>
   136c8:	add	r9, r0, #1
   136cc:	cmp	r7, r3
   136d0:	str	r9, [r6, r4, lsl #3]
   136d4:	beq	136e0 <__assert_fail@plt+0x2854>
   136d8:	mov	r0, r7
   136dc:	bl	151f0 <__assert_fail@plt+0x4364>
   136e0:	mov	r0, r9
   136e4:	bl	142bc <__assert_fail@plt+0x3430>
   136e8:	ldr	lr, [sp, #28]
   136ec:	ldr	ip, [r5, #44]	; 0x2c
   136f0:	ldr	r4, [r5, #40]	; 0x28
   136f4:	mov	r3, fp
   136f8:	mov	r2, sl
   136fc:	mov	r1, r9
   13700:	str	r0, [lr, #4]
   13704:	ldr	lr, [r5]
   13708:	ldr	r5, [sp, #36]	; 0x24
   1370c:	str	ip, [sp, #16]
   13710:	str	r5, [sp, #8]
   13714:	ldr	r5, [sp, #32]
   13718:	str	r4, [sp, #12]
   1371c:	str	r5, [sp, #4]
   13720:	str	lr, [sp]
   13724:	mov	r7, r0
   13728:	bl	120a0 <__assert_fail@plt+0x1214>
   1372c:	ldr	r3, [sp, #24]
   13730:	mov	r0, r7
   13734:	str	r3, [r8]
   13738:	add	sp, sp, #52	; 0x34
   1373c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13740:	mov	r3, #8
   13744:	sub	r2, r4, r2
   13748:	str	r3, [sp]
   1374c:	add	r1, sp, #44	; 0x2c
   13750:	add	r2, r2, #1
   13754:	mvn	r3, #-2147483648	; 0x80000000
   13758:	bl	14420 <__assert_fail@plt+0x3594>
   1375c:	mov	r6, r0
   13760:	ldm	r9, {r0, r1}
   13764:	str	r6, [r7]
   13768:	stm	r6, {r0, r1}
   1376c:	b	1363c <__assert_fail@plt+0x27b0>
   13770:	bl	10e74 <abort@plt>
   13774:	andeq	r7, r2, ip, ror #1
   13778:	andeq	r7, r2, r4, ror #2
   1377c:	push	{r4, r5, r6, lr}
   13780:	mov	r5, r0
   13784:	bl	10dc0 <__errno_location@plt>
   13788:	cmp	r5, #0
   1378c:	mov	r1, #48	; 0x30
   13790:	mov	r4, r0
   13794:	ldr	r0, [pc, #16]	; 137ac <__assert_fail@plt+0x2920>
   13798:	ldr	r6, [r4]
   1379c:	movne	r0, r5
   137a0:	bl	1471c <__assert_fail@plt+0x3890>
   137a4:	str	r6, [r4]
   137a8:	pop	{r4, r5, r6, pc}
   137ac:	andeq	r7, r2, r4, ror #4
   137b0:	ldr	r3, [pc, #12]	; 137c4 <__assert_fail@plt+0x2938>
   137b4:	cmp	r0, #0
   137b8:	moveq	r0, r3
   137bc:	ldr	r0, [r0]
   137c0:	bx	lr
   137c4:	andeq	r7, r2, r4, ror #4
   137c8:	ldr	r3, [pc, #12]	; 137dc <__assert_fail@plt+0x2950>
   137cc:	cmp	r0, #0
   137d0:	moveq	r0, r3
   137d4:	str	r1, [r0]
   137d8:	bx	lr
   137dc:	andeq	r7, r2, r4, ror #4
   137e0:	ldr	r3, [pc, #52]	; 1381c <__assert_fail@plt+0x2990>
   137e4:	cmp	r0, #0
   137e8:	moveq	r0, r3
   137ec:	add	r3, r0, #8
   137f0:	push	{lr}		; (str lr, [sp, #-4]!)
   137f4:	lsr	lr, r1, #5
   137f8:	and	r1, r1, #31
   137fc:	ldr	ip, [r3, lr, lsl #2]
   13800:	lsr	r0, ip, r1
   13804:	eor	r2, r2, r0
   13808:	and	r2, r2, #1
   1380c:	and	r0, r0, #1
   13810:	eor	r1, ip, r2, lsl r1
   13814:	str	r1, [r3, lr, lsl #2]
   13818:	pop	{pc}		; (ldr pc, [sp], #4)
   1381c:	andeq	r7, r2, r4, ror #4
   13820:	ldr	r3, [pc, #16]	; 13838 <__assert_fail@plt+0x29ac>
   13824:	cmp	r0, #0
   13828:	movne	r3, r0
   1382c:	ldr	r0, [r3, #4]
   13830:	str	r1, [r3, #4]
   13834:	bx	lr
   13838:	andeq	r7, r2, r4, ror #4
   1383c:	ldr	r3, [pc, #44]	; 13870 <__assert_fail@plt+0x29e4>
   13840:	cmp	r0, #0
   13844:	moveq	r0, r3
   13848:	mov	ip, #10
   1384c:	cmp	r2, #0
   13850:	cmpne	r1, #0
   13854:	str	ip, [r0]
   13858:	beq	13868 <__assert_fail@plt+0x29dc>
   1385c:	str	r1, [r0, #40]	; 0x28
   13860:	str	r2, [r0, #44]	; 0x2c
   13864:	bx	lr
   13868:	push	{r4, lr}
   1386c:	bl	10e74 <abort@plt>
   13870:	andeq	r7, r2, r4, ror #4
   13874:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13878:	sub	sp, sp, #24
   1387c:	ldr	ip, [pc, #108]	; 138f0 <__assert_fail@plt+0x2a64>
   13880:	ldr	r4, [sp, #56]	; 0x38
   13884:	mov	r9, r2
   13888:	cmp	r4, #0
   1388c:	moveq	r4, ip
   13890:	mov	sl, r3
   13894:	mov	r7, r0
   13898:	mov	r8, r1
   1389c:	bl	10dc0 <__errno_location@plt>
   138a0:	ldr	r3, [r4, #44]	; 0x2c
   138a4:	mov	r1, r8
   138a8:	ldr	r6, [r0]
   138ac:	str	r3, [sp, #16]
   138b0:	ldr	r2, [r4, #40]	; 0x28
   138b4:	add	r3, r4, #8
   138b8:	str	r3, [sp, #8]
   138bc:	str	r2, [sp, #12]
   138c0:	ldr	r2, [r4, #4]
   138c4:	mov	r5, r0
   138c8:	str	r2, [sp, #4]
   138cc:	ldr	ip, [r4]
   138d0:	mov	r3, sl
   138d4:	mov	r2, r9
   138d8:	mov	r0, r7
   138dc:	str	ip, [sp]
   138e0:	bl	120a0 <__assert_fail@plt+0x1214>
   138e4:	str	r6, [r5]
   138e8:	add	sp, sp, #24
   138ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   138f0:	andeq	r7, r2, r4, ror #4
   138f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138f8:	cmp	r3, #0
   138fc:	sub	sp, sp, #44	; 0x2c
   13900:	ldr	r4, [pc, #192]	; 139c8 <__assert_fail@plt+0x2b3c>
   13904:	mov	r6, r2
   13908:	movne	r4, r3
   1390c:	mov	r9, r1
   13910:	mov	r8, r0
   13914:	bl	10dc0 <__errno_location@plt>
   13918:	ldr	r3, [r4, #44]	; 0x2c
   1391c:	ldr	r5, [r4, #4]
   13920:	add	sl, r4, #8
   13924:	cmp	r6, #0
   13928:	orreq	r5, r5, #1
   1392c:	mov	r1, #0
   13930:	ldr	r2, [r0]
   13934:	str	r3, [sp, #16]
   13938:	ldr	r3, [r4, #40]	; 0x28
   1393c:	stmib	sp, {r5, sl}
   13940:	str	r3, [sp, #12]
   13944:	ldr	r3, [r4]
   13948:	mov	r7, r0
   1394c:	str	r2, [sp, #28]
   13950:	str	r3, [sp]
   13954:	mov	r2, r8
   13958:	mov	r3, r9
   1395c:	mov	r0, r1
   13960:	bl	120a0 <__assert_fail@plt+0x1214>
   13964:	add	r1, r0, #1
   13968:	mov	fp, r0
   1396c:	mov	r0, r1
   13970:	str	r1, [sp, #36]	; 0x24
   13974:	bl	142bc <__assert_fail@plt+0x3430>
   13978:	ldr	r3, [r4, #44]	; 0x2c
   1397c:	mov	r2, r8
   13980:	str	r3, [sp, #16]
   13984:	ldr	r3, [r4, #40]	; 0x28
   13988:	str	r5, [sp, #4]
   1398c:	str	r3, [sp, #12]
   13990:	str	sl, [sp, #8]
   13994:	ldr	ip, [r4]
   13998:	ldr	r1, [sp, #36]	; 0x24
   1399c:	mov	r3, r9
   139a0:	str	ip, [sp]
   139a4:	str	r0, [sp, #32]
   139a8:	bl	120a0 <__assert_fail@plt+0x1214>
   139ac:	ldr	r2, [sp, #28]
   139b0:	cmp	r6, #0
   139b4:	str	r2, [r7]
   139b8:	ldr	r0, [sp, #32]
   139bc:	strne	fp, [r6]
   139c0:	add	sp, sp, #44	; 0x2c
   139c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139c8:	andeq	r7, r2, r4, ror #4
   139cc:	mov	r3, r2
   139d0:	mov	r2, #0
   139d4:	b	138f4 <__assert_fail@plt+0x2a68>
   139d8:	push	{r4, r5, r6, r7, r8, lr}
   139dc:	ldr	r6, [pc, #116]	; 13a58 <__assert_fail@plt+0x2bcc>
   139e0:	ldr	r3, [r6, #4]
   139e4:	ldr	r7, [r6]
   139e8:	cmp	r3, #1
   139ec:	movgt	r5, r7
   139f0:	movgt	r4, #1
   139f4:	ble	13a14 <__assert_fail@plt+0x2b88>
   139f8:	ldr	r0, [r5, #12]
   139fc:	bl	151f0 <__assert_fail@plt+0x4364>
   13a00:	ldr	r3, [r6, #4]
   13a04:	add	r4, r4, #1
   13a08:	cmp	r3, r4
   13a0c:	add	r5, r5, #8
   13a10:	bgt	139f8 <__assert_fail@plt+0x2b6c>
   13a14:	ldr	r0, [r7, #4]
   13a18:	ldr	r4, [pc, #60]	; 13a5c <__assert_fail@plt+0x2bd0>
   13a1c:	cmp	r0, r4
   13a20:	beq	13a34 <__assert_fail@plt+0x2ba8>
   13a24:	bl	151f0 <__assert_fail@plt+0x4364>
   13a28:	mov	r3, #256	; 0x100
   13a2c:	str	r4, [r6, #12]
   13a30:	str	r3, [r6, #8]
   13a34:	ldr	r4, [pc, #36]	; 13a60 <__assert_fail@plt+0x2bd4>
   13a38:	cmp	r7, r4
   13a3c:	beq	13a4c <__assert_fail@plt+0x2bc0>
   13a40:	mov	r0, r7
   13a44:	bl	151f0 <__assert_fail@plt+0x4364>
   13a48:	str	r4, [r6]
   13a4c:	mov	r3, #1
   13a50:	str	r3, [r6, #4]
   13a54:	pop	{r4, r5, r6, r7, r8, pc}
   13a58:	andeq	r7, r2, ip, ror #1
   13a5c:	andeq	r7, r2, r4, ror #2
   13a60:	strdeq	r7, [r2], -r4
   13a64:	ldr	r3, [pc, #4]	; 13a70 <__assert_fail@plt+0x2be4>
   13a68:	mvn	r2, #0
   13a6c:	b	135b4 <__assert_fail@plt+0x2728>
   13a70:	andeq	r7, r2, r4, ror #4
   13a74:	ldr	r3, [pc]	; 13a7c <__assert_fail@plt+0x2bf0>
   13a78:	b	135b4 <__assert_fail@plt+0x2728>
   13a7c:	andeq	r7, r2, r4, ror #4
   13a80:	mov	r1, r0
   13a84:	ldr	r3, [pc, #8]	; 13a94 <__assert_fail@plt+0x2c08>
   13a88:	mvn	r2, #0
   13a8c:	mov	r0, #0
   13a90:	b	135b4 <__assert_fail@plt+0x2728>
   13a94:	andeq	r7, r2, r4, ror #4
   13a98:	mov	r2, r1
   13a9c:	ldr	r3, [pc, #8]	; 13aac <__assert_fail@plt+0x2c20>
   13aa0:	mov	r1, r0
   13aa4:	mov	r0, #0
   13aa8:	b	135b4 <__assert_fail@plt+0x2728>
   13aac:	andeq	r7, r2, r4, ror #4
   13ab0:	push	{r4, r5, lr}
   13ab4:	sub	sp, sp, #52	; 0x34
   13ab8:	mov	r5, r2
   13abc:	mov	r4, r0
   13ac0:	mov	r0, sp
   13ac4:	bl	11f50 <__assert_fail@plt+0x10c4>
   13ac8:	mov	r3, sp
   13acc:	mov	r1, r5
   13ad0:	mov	r0, r4
   13ad4:	mvn	r2, #0
   13ad8:	bl	135b4 <__assert_fail@plt+0x2728>
   13adc:	add	sp, sp, #52	; 0x34
   13ae0:	pop	{r4, r5, pc}
   13ae4:	push	{r4, r5, r6, lr}
   13ae8:	sub	sp, sp, #48	; 0x30
   13aec:	mov	r5, r2
   13af0:	mov	r6, r3
   13af4:	mov	r4, r0
   13af8:	mov	r0, sp
   13afc:	bl	11f50 <__assert_fail@plt+0x10c4>
   13b00:	mov	r3, sp
   13b04:	mov	r2, r6
   13b08:	mov	r1, r5
   13b0c:	mov	r0, r4
   13b10:	bl	135b4 <__assert_fail@plt+0x2728>
   13b14:	add	sp, sp, #48	; 0x30
   13b18:	pop	{r4, r5, r6, pc}
   13b1c:	mov	r2, r1
   13b20:	mov	r1, r0
   13b24:	mov	r0, #0
   13b28:	b	13ab0 <__assert_fail@plt+0x2c24>
   13b2c:	mov	r3, r2
   13b30:	mov	r2, r1
   13b34:	mov	r1, r0
   13b38:	mov	r0, #0
   13b3c:	b	13ae4 <__assert_fail@plt+0x2c58>
   13b40:	push	{r4, r5, r6, r7, r8, lr}
   13b44:	mov	r7, r0
   13b48:	ldr	lr, [pc, #100]	; 13bb4 <__assert_fail@plt+0x2d28>
   13b4c:	mov	r8, r1
   13b50:	mov	r4, r2
   13b54:	ldm	lr!, {r0, r1, r2, r3}
   13b58:	sub	sp, sp, #48	; 0x30
   13b5c:	mov	ip, sp
   13b60:	lsr	r5, r4, #5
   13b64:	stmia	ip!, {r0, r1, r2, r3}
   13b68:	add	r6, sp, #8
   13b6c:	ldm	lr!, {r0, r1, r2, r3}
   13b70:	and	r4, r4, #31
   13b74:	stmia	ip!, {r0, r1, r2, r3}
   13b78:	ldm	lr, {r0, r1, r2, r3}
   13b7c:	stm	ip, {r0, r1, r2, r3}
   13b80:	mov	r2, r8
   13b84:	ldr	lr, [r6, r5, lsl #2]
   13b88:	mov	r1, r7
   13b8c:	mov	r3, sp
   13b90:	lsr	ip, lr, r4
   13b94:	eor	ip, ip, #1
   13b98:	and	ip, ip, #1
   13b9c:	mov	r0, #0
   13ba0:	eor	r4, lr, ip, lsl r4
   13ba4:	str	r4, [r6, r5, lsl #2]
   13ba8:	bl	135b4 <__assert_fail@plt+0x2728>
   13bac:	add	sp, sp, #48	; 0x30
   13bb0:	pop	{r4, r5, r6, r7, r8, pc}
   13bb4:	andeq	r7, r2, r4, ror #4
   13bb8:	mov	r2, r1
   13bbc:	mvn	r1, #0
   13bc0:	b	13b40 <__assert_fail@plt+0x2cb4>
   13bc4:	mov	r2, #58	; 0x3a
   13bc8:	mvn	r1, #0
   13bcc:	b	13b40 <__assert_fail@plt+0x2cb4>
   13bd0:	mov	r2, #58	; 0x3a
   13bd4:	b	13b40 <__assert_fail@plt+0x2cb4>
   13bd8:	push	{r4, r5, r6, r7, lr}
   13bdc:	sub	sp, sp, #100	; 0x64
   13be0:	mov	r6, r0
   13be4:	mov	r0, sp
   13be8:	mov	r7, r2
   13bec:	bl	11f50 <__assert_fail@plt+0x10c4>
   13bf0:	mov	ip, sp
   13bf4:	add	lr, sp, #48	; 0x30
   13bf8:	ldm	ip!, {r0, r1, r2, r3}
   13bfc:	stmia	lr!, {r0, r1, r2, r3}
   13c00:	ldm	ip!, {r0, r1, r2, r3}
   13c04:	ldr	r5, [sp, #60]	; 0x3c
   13c08:	stmia	lr!, {r0, r1, r2, r3}
   13c0c:	mvn	r4, r5
   13c10:	ldm	ip, {r0, r1, r2, r3}
   13c14:	and	ip, r4, #67108864	; 0x4000000
   13c18:	eor	ip, ip, r5
   13c1c:	str	ip, [sp, #60]	; 0x3c
   13c20:	stm	lr, {r0, r1, r2, r3}
   13c24:	mov	r1, r7
   13c28:	mov	r0, r6
   13c2c:	add	r3, sp, #48	; 0x30
   13c30:	mvn	r2, #0
   13c34:	bl	135b4 <__assert_fail@plt+0x2728>
   13c38:	add	sp, sp, #100	; 0x64
   13c3c:	pop	{r4, r5, r6, r7, pc}
   13c40:	push	{r4, r5, r6, r7, r8, lr}
   13c44:	mov	r5, r1
   13c48:	ldr	lr, [pc, #100]	; 13cb4 <__assert_fail@plt+0x2e28>
   13c4c:	mov	r4, r2
   13c50:	mov	r7, r0
   13c54:	mov	r8, r3
   13c58:	ldm	lr!, {r0, r1, r2, r3}
   13c5c:	sub	sp, sp, #48	; 0x30
   13c60:	mov	ip, sp
   13c64:	mov	r6, #10
   13c68:	stmia	ip!, {r0, r1, r2, r3}
   13c6c:	cmp	r4, #0
   13c70:	cmpne	r5, #0
   13c74:	ldm	lr!, {r0, r1, r2, r3}
   13c78:	str	r6, [sp]
   13c7c:	stmia	ip!, {r0, r1, r2, r3}
   13c80:	ldm	lr, {r0, r1, r2, r3}
   13c84:	stm	ip, {r0, r1, r2, r3}
   13c88:	beq	13cb0 <__assert_fail@plt+0x2e24>
   13c8c:	mov	r3, sp
   13c90:	mov	r1, r8
   13c94:	mov	r0, r7
   13c98:	ldr	r2, [sp, #72]	; 0x48
   13c9c:	str	r5, [sp, #40]	; 0x28
   13ca0:	str	r4, [sp, #44]	; 0x2c
   13ca4:	bl	135b4 <__assert_fail@plt+0x2728>
   13ca8:	add	sp, sp, #48	; 0x30
   13cac:	pop	{r4, r5, r6, r7, r8, pc}
   13cb0:	bl	10e74 <abort@plt>
   13cb4:	andeq	r7, r2, r4, ror #4
   13cb8:	push	{lr}		; (str lr, [sp, #-4]!)
   13cbc:	sub	sp, sp, #12
   13cc0:	mvn	ip, #0
   13cc4:	str	ip, [sp]
   13cc8:	bl	13c40 <__assert_fail@plt+0x2db4>
   13ccc:	add	sp, sp, #12
   13cd0:	pop	{pc}		; (ldr pc, [sp], #4)
   13cd4:	push	{lr}		; (str lr, [sp, #-4]!)
   13cd8:	sub	sp, sp, #12
   13cdc:	mvn	ip, #0
   13ce0:	mov	r3, r2
   13ce4:	str	ip, [sp]
   13ce8:	mov	r2, r1
   13cec:	mov	r1, r0
   13cf0:	mov	r0, #0
   13cf4:	bl	13c40 <__assert_fail@plt+0x2db4>
   13cf8:	add	sp, sp, #12
   13cfc:	pop	{pc}		; (ldr pc, [sp], #4)
   13d00:	push	{lr}		; (str lr, [sp, #-4]!)
   13d04:	sub	sp, sp, #12
   13d08:	str	r3, [sp]
   13d0c:	mov	r3, r2
   13d10:	mov	r2, r1
   13d14:	mov	r1, r0
   13d18:	mov	r0, #0
   13d1c:	bl	13c40 <__assert_fail@plt+0x2db4>
   13d20:	add	sp, sp, #12
   13d24:	pop	{pc}		; (ldr pc, [sp], #4)
   13d28:	ldr	r3, [pc]	; 13d30 <__assert_fail@plt+0x2ea4>
   13d2c:	b	135b4 <__assert_fail@plt+0x2728>
   13d30:	strdeq	r7, [r2], -ip
   13d34:	mov	r2, r1
   13d38:	ldr	r3, [pc, #8]	; 13d48 <__assert_fail@plt+0x2ebc>
   13d3c:	mov	r1, r0
   13d40:	mov	r0, #0
   13d44:	b	135b4 <__assert_fail@plt+0x2728>
   13d48:	strdeq	r7, [r2], -ip
   13d4c:	ldr	r3, [pc, #4]	; 13d58 <__assert_fail@plt+0x2ecc>
   13d50:	mvn	r2, #0
   13d54:	b	135b4 <__assert_fail@plt+0x2728>
   13d58:	strdeq	r7, [r2], -ip
   13d5c:	mov	r1, r0
   13d60:	ldr	r3, [pc, #8]	; 13d70 <__assert_fail@plt+0x2ee4>
   13d64:	mvn	r2, #0
   13d68:	mov	r0, #0
   13d6c:	b	135b4 <__assert_fail@plt+0x2728>
   13d70:	strdeq	r7, [r2], -ip
   13d74:	push	{r4, r5, r6, lr}
   13d78:	sub	sp, sp, #32
   13d7c:	cmp	r1, #0
   13d80:	mov	r4, r0
   13d84:	ldr	r5, [sp, #48]	; 0x30
   13d88:	ldr	r6, [sp, #52]	; 0x34
   13d8c:	beq	140a4 <__assert_fail@plt+0x3218>
   13d90:	stm	sp, {r2, r3}
   13d94:	mov	r3, r1
   13d98:	ldr	r2, [pc, #808]	; 140c8 <__assert_fail@plt+0x323c>
   13d9c:	mov	r1, #1
   13da0:	bl	10dfc <__fprintf_chk@plt>
   13da4:	mov	r2, #5
   13da8:	ldr	r1, [pc, #796]	; 140cc <__assert_fail@plt+0x3240>
   13dac:	mov	r0, #0
   13db0:	bl	10cc4 <dcgettext@plt>
   13db4:	ldr	r3, [pc, #788]	; 140d0 <__assert_fail@plt+0x3244>
   13db8:	ldr	r2, [pc, #788]	; 140d4 <__assert_fail@plt+0x3248>
   13dbc:	str	r3, [sp]
   13dc0:	mov	r1, #1
   13dc4:	mov	r3, r0
   13dc8:	mov	r0, r4
   13dcc:	bl	10dfc <__fprintf_chk@plt>
   13dd0:	mov	r1, r4
   13dd4:	mov	r0, #10
   13dd8:	bl	10cb8 <fputc_unlocked@plt>
   13ddc:	mov	r2, #5
   13de0:	ldr	r1, [pc, #752]	; 140d8 <__assert_fail@plt+0x324c>
   13de4:	mov	r0, #0
   13de8:	bl	10cc4 <dcgettext@plt>
   13dec:	mov	r1, #1
   13df0:	ldr	r3, [pc, #740]	; 140dc <__assert_fail@plt+0x3250>
   13df4:	mov	r2, r0
   13df8:	mov	r0, r4
   13dfc:	bl	10dfc <__fprintf_chk@plt>
   13e00:	mov	r1, r4
   13e04:	mov	r0, #10
   13e08:	bl	10cb8 <fputc_unlocked@plt>
   13e0c:	cmp	r6, #9
   13e10:	ldrls	pc, [pc, r6, lsl #2]
   13e14:	b	140bc <__assert_fail@plt+0x3230>
   13e18:	muleq	r1, ip, lr
   13e1c:	andeq	r3, r1, r4, lsr #29
   13e20:	ldrdeq	r3, [r1], -r0
   13e24:	andeq	r3, r1, r4, lsl #30
   13e28:	andeq	r3, r1, r0, asr #30
   13e2c:	andeq	r3, r1, ip, ror pc
   13e30:			; <UNDEFINED> instruction: 0x00013fb8
   13e34:	strdeq	r3, [r1], -ip
   13e38:	andeq	r4, r1, ip, asr #32
   13e3c:	andeq	r3, r1, r0, asr #28
   13e40:	ldr	r1, [pc, #664]	; 140e0 <__assert_fail@plt+0x3254>
   13e44:	mov	r2, #5
   13e48:	mov	r0, #0
   13e4c:	bl	10cc4 <dcgettext@plt>
   13e50:	ldr	ip, [r5, #32]
   13e54:	ldr	r1, [r5, #28]
   13e58:	ldr	r2, [r5, #24]
   13e5c:	ldr	r3, [r5]
   13e60:	ldr	r6, [r5, #20]
   13e64:	str	ip, [sp, #28]
   13e68:	ldr	lr, [r5, #16]
   13e6c:	str	r1, [sp, #24]
   13e70:	ldr	ip, [r5, #12]
   13e74:	str	r2, [sp, #20]
   13e78:	ldr	r1, [r5, #8]
   13e7c:	ldr	r2, [r5, #4]
   13e80:	str	r6, [sp, #16]
   13e84:	stmib	sp, {r1, ip, lr}
   13e88:	mov	r1, #1
   13e8c:	str	r2, [sp]
   13e90:	mov	r2, r0
   13e94:	mov	r0, r4
   13e98:	bl	10dfc <__fprintf_chk@plt>
   13e9c:	add	sp, sp, #32
   13ea0:	pop	{r4, r5, r6, pc}
   13ea4:	mov	r2, #5
   13ea8:	ldr	r1, [pc, #564]	; 140e4 <__assert_fail@plt+0x3258>
   13eac:	mov	r0, #0
   13eb0:	bl	10cc4 <dcgettext@plt>
   13eb4:	ldr	r3, [r5]
   13eb8:	mov	r1, #1
   13ebc:	mov	r2, r0
   13ec0:	mov	r0, r4
   13ec4:	add	sp, sp, #32
   13ec8:	pop	{r4, r5, r6, lr}
   13ecc:	b	10dfc <__fprintf_chk@plt>
   13ed0:	mov	r2, #5
   13ed4:	ldr	r1, [pc, #524]	; 140e8 <__assert_fail@plt+0x325c>
   13ed8:	mov	r0, #0
   13edc:	bl	10cc4 <dcgettext@plt>
   13ee0:	ldr	r2, [r5, #4]
   13ee4:	ldr	r3, [r5]
   13ee8:	mov	r1, #1
   13eec:	str	r2, [sp, #48]	; 0x30
   13ef0:	mov	r2, r0
   13ef4:	mov	r0, r4
   13ef8:	add	sp, sp, #32
   13efc:	pop	{r4, r5, r6, lr}
   13f00:	b	10dfc <__fprintf_chk@plt>
   13f04:	mov	r2, #5
   13f08:	ldr	r1, [pc, #476]	; 140ec <__assert_fail@plt+0x3260>
   13f0c:	mov	r0, #0
   13f10:	bl	10cc4 <dcgettext@plt>
   13f14:	ldr	r1, [r5, #8]
   13f18:	ldr	r2, [r5, #4]
   13f1c:	ldr	r3, [r5]
   13f20:	str	r1, [sp, #52]	; 0x34
   13f24:	str	r2, [sp, #48]	; 0x30
   13f28:	mov	r1, #1
   13f2c:	mov	r2, r0
   13f30:	mov	r0, r4
   13f34:	add	sp, sp, #32
   13f38:	pop	{r4, r5, r6, lr}
   13f3c:	b	10dfc <__fprintf_chk@plt>
   13f40:	mov	r2, #5
   13f44:	ldr	r1, [pc, #420]	; 140f0 <__assert_fail@plt+0x3264>
   13f48:	mov	r0, #0
   13f4c:	bl	10cc4 <dcgettext@plt>
   13f50:	ldr	r1, [r5, #8]
   13f54:	ldr	ip, [r5, #12]
   13f58:	ldr	r2, [r5, #4]
   13f5c:	ldr	r3, [r5]
   13f60:	stmib	sp, {r1, ip}
   13f64:	str	r2, [sp]
   13f68:	mov	r1, #1
   13f6c:	mov	r2, r0
   13f70:	mov	r0, r4
   13f74:	bl	10dfc <__fprintf_chk@plt>
   13f78:	b	13e9c <__assert_fail@plt+0x3010>
   13f7c:	mov	r2, #5
   13f80:	ldr	r1, [pc, #364]	; 140f4 <__assert_fail@plt+0x3268>
   13f84:	mov	r0, #0
   13f88:	bl	10cc4 <dcgettext@plt>
   13f8c:	add	r1, r5, #8
   13f90:	ldr	r2, [r5, #4]
   13f94:	ldm	r1, {r1, ip, lr}
   13f98:	ldr	r3, [r5]
   13f9c:	str	r2, [sp]
   13fa0:	stmib	sp, {r1, ip, lr}
   13fa4:	mov	r1, #1
   13fa8:	mov	r2, r0
   13fac:	mov	r0, r4
   13fb0:	bl	10dfc <__fprintf_chk@plt>
   13fb4:	b	13e9c <__assert_fail@plt+0x3010>
   13fb8:	mov	r2, #5
   13fbc:	ldr	r1, [pc, #308]	; 140f8 <__assert_fail@plt+0x326c>
   13fc0:	mov	r0, #0
   13fc4:	bl	10cc4 <dcgettext@plt>
   13fc8:	add	r1, r5, #8
   13fcc:	ldr	r2, [r5, #4]
   13fd0:	ldm	r1, {r1, ip, lr}
   13fd4:	ldr	r6, [r5, #20]
   13fd8:	ldr	r3, [r5]
   13fdc:	stmib	sp, {r1, ip, lr}
   13fe0:	mov	r1, #1
   13fe4:	str	r2, [sp]
   13fe8:	str	r6, [sp, #16]
   13fec:	mov	r2, r0
   13ff0:	mov	r0, r4
   13ff4:	bl	10dfc <__fprintf_chk@plt>
   13ff8:	b	13e9c <__assert_fail@plt+0x3010>
   13ffc:	mov	r2, #5
   14000:	ldr	r1, [pc, #244]	; 140fc <__assert_fail@plt+0x3270>
   14004:	mov	r0, #0
   14008:	bl	10cc4 <dcgettext@plt>
   1400c:	ldr	r2, [r5, #24]
   14010:	ldr	r3, [r5]
   14014:	ldr	r6, [r5, #20]
   14018:	ldr	lr, [r5, #16]
   1401c:	ldr	ip, [r5, #12]
   14020:	str	r2, [sp, #20]
   14024:	ldr	r1, [r5, #8]
   14028:	ldr	r2, [r5, #4]
   1402c:	str	r6, [sp, #16]
   14030:	stmib	sp, {r1, ip, lr}
   14034:	mov	r1, #1
   14038:	str	r2, [sp]
   1403c:	mov	r2, r0
   14040:	mov	r0, r4
   14044:	bl	10dfc <__fprintf_chk@plt>
   14048:	b	13e9c <__assert_fail@plt+0x3010>
   1404c:	mov	r2, #5
   14050:	ldr	r1, [pc, #168]	; 14100 <__assert_fail@plt+0x3274>
   14054:	mov	r0, #0
   14058:	bl	10cc4 <dcgettext@plt>
   1405c:	ldr	r1, [r5, #28]
   14060:	ldr	r2, [r5, #24]
   14064:	ldr	r3, [r5]
   14068:	ldr	r6, [r5, #20]
   1406c:	ldr	lr, [r5, #16]
   14070:	str	r1, [sp, #24]
   14074:	ldr	ip, [r5, #12]
   14078:	str	r2, [sp, #20]
   1407c:	ldr	r1, [r5, #8]
   14080:	ldr	r2, [r5, #4]
   14084:	str	r6, [sp, #16]
   14088:	stmib	sp, {r1, ip, lr}
   1408c:	mov	r1, #1
   14090:	str	r2, [sp]
   14094:	mov	r2, r0
   14098:	mov	r0, r4
   1409c:	bl	10dfc <__fprintf_chk@plt>
   140a0:	b	13e9c <__assert_fail@plt+0x3010>
   140a4:	str	r3, [sp]
   140a8:	mov	r1, #1
   140ac:	mov	r3, r2
   140b0:	ldr	r2, [pc, #76]	; 14104 <__assert_fail@plt+0x3278>
   140b4:	bl	10dfc <__fprintf_chk@plt>
   140b8:	b	13da4 <__assert_fail@plt+0x2f18>
   140bc:	mov	r2, #5
   140c0:	ldr	r1, [pc, #64]	; 14108 <__assert_fail@plt+0x327c>
   140c4:	b	13e48 <__assert_fail@plt+0x2fbc>
   140c8:	andeq	r6, r1, ip, ror #11
   140cc:	andeq	r6, r1, r0, lsl #12
   140d0:	andeq	r0, r0, r6, ror #15
   140d4:	ldrdeq	r6, [r1], -r8
   140d8:	andeq	r6, r1, r4, lsl #12
   140dc:			; <UNDEFINED> instruction: 0x000166b0
   140e0:	andeq	r6, r1, r0, ror #15
   140e4:	ldrdeq	r6, [r1], -r4
   140e8:	andeq	r6, r1, r4, ror #13
   140ec:	strdeq	r6, [r1], -ip
   140f0:	andeq	r6, r1, r8, lsl r7
   140f4:	andeq	r6, r1, r8, lsr r7
   140f8:	andeq	r6, r1, ip, asr r7
   140fc:	andeq	r6, r1, r4, lsl #15
   14100:			; <UNDEFINED> instruction: 0x000167b0
   14104:	strdeq	r6, [r1], -r8
   14108:	andeq	r6, r1, r4, lsl r8
   1410c:	push	{r4, r5, lr}
   14110:	sub	sp, sp, #12
   14114:	ldr	r5, [sp, #24]
   14118:	ldr	ip, [r5]
   1411c:	cmp	ip, #0
   14120:	beq	1413c <__assert_fail@plt+0x32b0>
   14124:	mov	lr, r5
   14128:	mov	ip, #0
   1412c:	ldr	r4, [lr, #4]!
   14130:	add	ip, ip, #1
   14134:	cmp	r4, #0
   14138:	bne	1412c <__assert_fail@plt+0x32a0>
   1413c:	stm	sp, {r5, ip}
   14140:	bl	13d74 <__assert_fail@plt+0x2ee8>
   14144:	add	sp, sp, #12
   14148:	pop	{r4, r5, pc}
   1414c:	push	{r4, r5, lr}
   14150:	sub	sp, sp, #52	; 0x34
   14154:	add	r5, sp, #4
   14158:	ldr	r4, [sp, #64]	; 0x40
   1415c:	mov	ip, #0
   14160:	sub	r4, r4, #4
   14164:	ldr	lr, [r4, #4]!
   14168:	cmp	lr, #0
   1416c:	str	lr, [r5, #4]!
   14170:	beq	14180 <__assert_fail@plt+0x32f4>
   14174:	add	ip, ip, #1
   14178:	cmp	ip, #10
   1417c:	bne	14164 <__assert_fail@plt+0x32d8>
   14180:	add	lr, sp, #8
   14184:	str	ip, [sp, #4]
   14188:	str	lr, [sp]
   1418c:	bl	13d74 <__assert_fail@plt+0x2ee8>
   14190:	add	sp, sp, #52	; 0x34
   14194:	pop	{r4, r5, pc}
   14198:	push	{r3}		; (str r3, [sp, #-4]!)
   1419c:	push	{r4, lr}
   141a0:	sub	sp, sp, #60	; 0x3c
   141a4:	add	lr, sp, #56	; 0x38
   141a8:	add	r3, sp, #72	; 0x48
   141ac:	str	r3, [lr, #-44]!	; 0xffffffd4
   141b0:	add	r4, sp, #68	; 0x44
   141b4:	mov	r3, #0
   141b8:	ldr	ip, [r4, #4]!
   141bc:	cmp	ip, #0
   141c0:	str	ip, [lr, #4]!
   141c4:	beq	141d4 <__assert_fail@plt+0x3348>
   141c8:	add	r3, r3, #1
   141cc:	cmp	r3, #10
   141d0:	bne	141b8 <__assert_fail@plt+0x332c>
   141d4:	add	ip, sp, #16
   141d8:	str	r3, [sp, #4]
   141dc:	str	ip, [sp]
   141e0:	ldr	r3, [sp, #68]	; 0x44
   141e4:	bl	13d74 <__assert_fail@plt+0x2ee8>
   141e8:	add	sp, sp, #60	; 0x3c
   141ec:	pop	{r4, lr}
   141f0:	add	sp, sp, #4
   141f4:	bx	lr
   141f8:	ldr	r3, [pc, #116]	; 14274 <__assert_fail@plt+0x33e8>
   141fc:	push	{r4, lr}
   14200:	mov	r0, #10
   14204:	ldr	r1, [r3]
   14208:	bl	10cb8 <fputc_unlocked@plt>
   1420c:	mov	r2, #5
   14210:	ldr	r1, [pc, #96]	; 14278 <__assert_fail@plt+0x33ec>
   14214:	mov	r0, #0
   14218:	bl	10cc4 <dcgettext@plt>
   1421c:	ldr	r2, [pc, #88]	; 1427c <__assert_fail@plt+0x33f0>
   14220:	mov	r1, r0
   14224:	mov	r0, #1
   14228:	bl	10de4 <__printf_chk@plt>
   1422c:	mov	r2, #5
   14230:	ldr	r1, [pc, #72]	; 14280 <__assert_fail@plt+0x33f4>
   14234:	mov	r0, #0
   14238:	bl	10cc4 <dcgettext@plt>
   1423c:	ldr	r3, [pc, #64]	; 14284 <__assert_fail@plt+0x33f8>
   14240:	ldr	r2, [pc, #64]	; 14288 <__assert_fail@plt+0x33fc>
   14244:	mov	r1, r0
   14248:	mov	r0, #1
   1424c:	bl	10de4 <__printf_chk@plt>
   14250:	mov	r2, #5
   14254:	ldr	r1, [pc, #48]	; 1428c <__assert_fail@plt+0x3400>
   14258:	mov	r0, #0
   1425c:	bl	10cc4 <dcgettext@plt>
   14260:	ldr	r2, [pc, #40]	; 14290 <__assert_fail@plt+0x3404>
   14264:	pop	{r4, lr}
   14268:	mov	r1, r0
   1426c:	mov	r0, #1
   14270:	b	10de4 <__printf_chk@plt>
   14274:	andeq	r7, r2, r4, asr #2
   14278:	andeq	r6, r1, r0, asr r8
   1427c:	andeq	r6, r1, r4, ror #16
   14280:	andeq	r6, r1, ip, ror r8
   14284:	strdeq	r6, [r1], -r4
   14288:	andeq	r6, r1, ip, lsl r1
   1428c:	muleq	r1, r0, r8
   14290:			; <UNDEFINED> instruction: 0x000168b8
   14294:	push	{r4, lr}
   14298:	bl	14fec <__assert_fail@plt+0x4160>
   1429c:	cmp	r0, #0
   142a0:	popne	{r4, pc}
   142a4:	bl	147dc <__assert_fail@plt+0x3950>
   142a8:	push	{r4, lr}
   142ac:	bl	14fec <__assert_fail@plt+0x4160>
   142b0:	cmp	r0, #0
   142b4:	popne	{r4, pc}
   142b8:	bl	147dc <__assert_fail@plt+0x3950>
   142bc:	push	{r4, lr}
   142c0:	bl	14fec <__assert_fail@plt+0x4160>
   142c4:	cmp	r0, #0
   142c8:	popne	{r4, pc}
   142cc:	bl	147dc <__assert_fail@plt+0x3950>
   142d0:	push	{r4, r5, r6, lr}
   142d4:	mov	r5, r0
   142d8:	mov	r4, r1
   142dc:	bl	15018 <__assert_fail@plt+0x418c>
   142e0:	cmp	r0, #0
   142e4:	popne	{r4, r5, r6, pc}
   142e8:	adds	r4, r4, #0
   142ec:	movne	r4, #1
   142f0:	cmp	r5, #0
   142f4:	orreq	r4, r4, #1
   142f8:	cmp	r4, #0
   142fc:	popeq	{r4, r5, r6, pc}
   14300:	bl	147dc <__assert_fail@plt+0x3950>
   14304:	push	{r4, lr}
   14308:	cmp	r1, #0
   1430c:	orreq	r1, r1, #1
   14310:	bl	15018 <__assert_fail@plt+0x418c>
   14314:	cmp	r0, #0
   14318:	popne	{r4, pc}
   1431c:	bl	147dc <__assert_fail@plt+0x3950>
   14320:	push	{r4, r5, r6, lr}
   14324:	mov	r6, r0
   14328:	mov	r5, r1
   1432c:	mov	r4, r2
   14330:	bl	15370 <__assert_fail@plt+0x44e4>
   14334:	cmp	r0, #0
   14338:	popne	{r4, r5, r6, pc}
   1433c:	cmp	r6, #0
   14340:	beq	14350 <__assert_fail@plt+0x34c4>
   14344:	cmp	r5, #0
   14348:	cmpne	r4, #0
   1434c:	popeq	{r4, r5, r6, pc}
   14350:	bl	147dc <__assert_fail@plt+0x3950>
   14354:	b	14320 <__assert_fail@plt+0x3494>
   14358:	cmp	r2, #0
   1435c:	cmpne	r1, #0
   14360:	moveq	r2, #1
   14364:	moveq	r1, r2
   14368:	push	{r4, lr}
   1436c:	bl	15370 <__assert_fail@plt+0x44e4>
   14370:	cmp	r0, #0
   14374:	popne	{r4, pc}
   14378:	bl	147dc <__assert_fail@plt+0x3950>
   1437c:	mov	r2, r1
   14380:	mov	r1, r0
   14384:	mov	r0, #0
   14388:	b	14320 <__assert_fail@plt+0x3494>
   1438c:	mov	r2, r1
   14390:	mov	r1, r0
   14394:	mov	r0, #0
   14398:	b	14358 <__assert_fail@plt+0x34cc>
   1439c:	push	{r4, r5, r6, lr}
   143a0:	subs	r6, r0, #0
   143a4:	sub	sp, sp, #8
   143a8:	mov	r5, r1
   143ac:	ldr	r4, [r1]
   143b0:	beq	143ec <__assert_fail@plt+0x3560>
   143b4:	lsr	r1, r4, #1
   143b8:	add	r3, r1, #1
   143bc:	mvn	r3, r3
   143c0:	cmp	r4, r3
   143c4:	bhi	143e8 <__assert_fail@plt+0x355c>
   143c8:	add	r4, r4, #1
   143cc:	add	r4, r4, r1
   143d0:	mov	r0, r6
   143d4:	mov	r1, r4
   143d8:	bl	14320 <__assert_fail@plt+0x3494>
   143dc:	str	r4, [r5]
   143e0:	add	sp, sp, #8
   143e4:	pop	{r4, r5, r6, pc}
   143e8:	bl	147dc <__assert_fail@plt+0x3950>
   143ec:	cmp	r4, #0
   143f0:	bne	143d0 <__assert_fail@plt+0x3544>
   143f4:	mov	r1, r2
   143f8:	mov	r0, #64	; 0x40
   143fc:	str	r2, [sp, #4]
   14400:	bl	154b0 <__assert_fail@plt+0x4624>
   14404:	ldr	r2, [sp, #4]
   14408:	cmp	r0, #0
   1440c:	movne	r4, r0
   14410:	addeq	r4, r0, #1
   14414:	b	143d0 <__assert_fail@plt+0x3544>
   14418:	mov	r2, #1
   1441c:	b	1439c <__assert_fail@plt+0x3510>
   14420:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14424:	sub	sp, sp, #12
   14428:	ldr	r6, [r1]
   1442c:	mov	sl, r1
   14430:	mov	r9, r0
   14434:	asrs	r4, r6, #1
   14438:	mov	r5, r2
   1443c:	mov	fp, r3
   14440:	ldr	r7, [sp, #48]	; 0x30
   14444:	bmi	145b0 <__assert_fail@plt+0x3724>
   14448:	mvn	r3, #-2147483648	; 0x80000000
   1444c:	sub	r3, r3, r4
   14450:	cmp	r6, r3
   14454:	movle	r3, #0
   14458:	movgt	r3, #1
   1445c:	mvn	r8, fp
   14460:	cmp	r3, #0
   14464:	addeq	r4, r4, r6
   14468:	mvnne	r4, #-2147483648	; 0x80000000
   1446c:	lsr	r8, r8, #31
   14470:	cmp	fp, r4
   14474:	movge	r3, #0
   14478:	andlt	r3, r8, #1
   1447c:	cmp	r3, #0
   14480:	beq	14568 <__assert_fail@plt+0x36dc>
   14484:	cmp	r7, #0
   14488:	blt	14638 <__assert_fail@plt+0x37ac>
   1448c:	bne	14630 <__assert_fail@plt+0x37a4>
   14490:	mov	r2, #64	; 0x40
   14494:	mov	r1, r7
   14498:	mov	r0, r2
   1449c:	str	r2, [sp, #4]
   144a0:	bl	156bc <__assert_fail@plt+0x4830>
   144a4:	ldr	r2, [sp, #4]
   144a8:	mov	r1, r7
   144ac:	mov	r4, r0
   144b0:	mov	r0, r2
   144b4:	bl	158dc <__assert_fail@plt+0x4a50>
   144b8:	ldr	r2, [sp, #4]
   144bc:	sub	r1, r2, r1
   144c0:	cmp	r9, #0
   144c4:	sub	r3, r4, r6
   144c8:	streq	r9, [sl]
   144cc:	cmp	r3, r5
   144d0:	bge	14554 <__assert_fail@plt+0x36c8>
   144d4:	cmp	r5, #0
   144d8:	blt	145c4 <__assert_fail@plt+0x3738>
   144dc:	cmp	r6, #0
   144e0:	blt	14500 <__assert_fail@plt+0x3674>
   144e4:	mvn	r3, #-2147483648	; 0x80000000
   144e8:	sub	r3, r3, r5
   144ec:	cmp	r6, r3
   144f0:	movle	r3, #0
   144f4:	movgt	r3, #1
   144f8:	cmp	r3, #0
   144fc:	bne	146c0 <__assert_fail@plt+0x3834>
   14500:	add	r5, r6, r5
   14504:	cmp	fp, r5
   14508:	movge	r8, #0
   1450c:	andlt	r8, r8, #1
   14510:	cmp	r8, #0
   14514:	mov	r4, r5
   14518:	bne	146c0 <__assert_fail@plt+0x3834>
   1451c:	cmp	r7, #0
   14520:	blt	145d8 <__assert_fail@plt+0x374c>
   14524:	beq	14550 <__assert_fail@plt+0x36c4>
   14528:	cmp	r5, #0
   1452c:	blt	14680 <__assert_fail@plt+0x37f4>
   14530:	mov	r1, r7
   14534:	mvn	r0, #-2147483648	; 0x80000000
   14538:	bl	156bc <__assert_fail@plt+0x4830>
   1453c:	cmp	r5, r0
   14540:	movle	r0, #0
   14544:	movgt	r0, #1
   14548:	cmp	r0, #0
   1454c:	bne	146c0 <__assert_fail@plt+0x3834>
   14550:	mul	r1, r5, r7
   14554:	mov	r0, r9
   14558:	bl	142d0 <__assert_fail@plt+0x3444>
   1455c:	str	r4, [sl]
   14560:	add	sp, sp, #12
   14564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14568:	cmp	r7, #0
   1456c:	blt	14604 <__assert_fail@plt+0x3778>
   14570:	beq	14490 <__assert_fail@plt+0x3604>
   14574:	cmp	r4, #0
   14578:	blt	14640 <__assert_fail@plt+0x37b4>
   1457c:	mov	r1, r7
   14580:	mvn	r0, #-2147483648	; 0x80000000
   14584:	bl	156bc <__assert_fail@plt+0x4830>
   14588:	cmp	r0, r4
   1458c:	movge	r0, #0
   14590:	movlt	r0, #1
   14594:	cmp	r0, #0
   14598:	mvnne	r2, #-2147483648	; 0x80000000
   1459c:	bne	14494 <__assert_fail@plt+0x3608>
   145a0:	mul	r1, r7, r4
   145a4:	cmp	r1, #63	; 0x3f
   145a8:	bgt	144c0 <__assert_fail@plt+0x3634>
   145ac:	b	14490 <__assert_fail@plt+0x3604>
   145b0:	rsb	r3, r4, #-2147483648	; 0x80000000
   145b4:	cmp	r6, r3
   145b8:	movge	r3, #0
   145bc:	movlt	r3, #1
   145c0:	b	1445c <__assert_fail@plt+0x35d0>
   145c4:	rsb	r3, r5, #-2147483648	; 0x80000000
   145c8:	cmp	r6, r3
   145cc:	movge	r3, #0
   145d0:	movlt	r3, #1
   145d4:	b	144f8 <__assert_fail@plt+0x366c>
   145d8:	cmp	r5, #0
   145dc:	blt	14664 <__assert_fail@plt+0x37d8>
   145e0:	cmn	r7, #1
   145e4:	beq	14550 <__assert_fail@plt+0x36c4>
   145e8:	mov	r1, r7
   145ec:	mov	r0, #-2147483648	; 0x80000000
   145f0:	bl	156bc <__assert_fail@plt+0x4830>
   145f4:	cmp	r5, r0
   145f8:	movle	r0, #0
   145fc:	movgt	r0, #1
   14600:	b	14548 <__assert_fail@plt+0x36bc>
   14604:	cmp	r4, #0
   14608:	blt	146a4 <__assert_fail@plt+0x3818>
   1460c:	cmn	r7, #1
   14610:	beq	145a0 <__assert_fail@plt+0x3714>
   14614:	mov	r1, r7
   14618:	mov	r0, #-2147483648	; 0x80000000
   1461c:	bl	156bc <__assert_fail@plt+0x4830>
   14620:	cmp	r0, r4
   14624:	movge	r0, #0
   14628:	movlt	r0, #1
   1462c:	b	14594 <__assert_fail@plt+0x3708>
   14630:	mov	r4, fp
   14634:	b	1457c <__assert_fail@plt+0x36f0>
   14638:	mov	r4, fp
   1463c:	b	1460c <__assert_fail@plt+0x3780>
   14640:	cmn	r4, #1
   14644:	beq	145a0 <__assert_fail@plt+0x3714>
   14648:	mov	r1, r4
   1464c:	mov	r0, #-2147483648	; 0x80000000
   14650:	bl	156bc <__assert_fail@plt+0x4830>
   14654:	cmp	r7, r0
   14658:	movle	r0, #0
   1465c:	movgt	r0, #1
   14660:	b	14594 <__assert_fail@plt+0x3708>
   14664:	mov	r1, r7
   14668:	mvn	r0, #-2147483648	; 0x80000000
   1466c:	bl	156bc <__assert_fail@plt+0x4830>
   14670:	cmp	r5, r0
   14674:	movge	r0, #0
   14678:	movlt	r0, #1
   1467c:	b	14548 <__assert_fail@plt+0x36bc>
   14680:	cmn	r5, #1
   14684:	beq	14550 <__assert_fail@plt+0x36c4>
   14688:	mov	r1, r5
   1468c:	mov	r0, #-2147483648	; 0x80000000
   14690:	bl	156bc <__assert_fail@plt+0x4830>
   14694:	cmp	r7, r0
   14698:	movle	r0, #0
   1469c:	movgt	r0, #1
   146a0:	b	14548 <__assert_fail@plt+0x36bc>
   146a4:	mov	r1, r7
   146a8:	mvn	r0, #-2147483648	; 0x80000000
   146ac:	bl	156bc <__assert_fail@plt+0x4830>
   146b0:	cmp	r0, r4
   146b4:	movle	r0, #0
   146b8:	movgt	r0, #1
   146bc:	b	14594 <__assert_fail@plt+0x3708>
   146c0:	bl	147dc <__assert_fail@plt+0x3950>
   146c4:	push	{r4, lr}
   146c8:	mov	r1, #1
   146cc:	bl	14fa4 <__assert_fail@plt+0x4118>
   146d0:	cmp	r0, #0
   146d4:	popne	{r4, pc}
   146d8:	bl	147dc <__assert_fail@plt+0x3950>
   146dc:	push	{r4, lr}
   146e0:	mov	r1, #1
   146e4:	bl	14fa4 <__assert_fail@plt+0x4118>
   146e8:	cmp	r0, #0
   146ec:	popne	{r4, pc}
   146f0:	bl	147dc <__assert_fail@plt+0x3950>
   146f4:	push	{r4, lr}
   146f8:	bl	14fa4 <__assert_fail@plt+0x4118>
   146fc:	cmp	r0, #0
   14700:	popne	{r4, pc}
   14704:	bl	147dc <__assert_fail@plt+0x3950>
   14708:	push	{r4, lr}
   1470c:	bl	14fa4 <__assert_fail@plt+0x4118>
   14710:	cmp	r0, #0
   14714:	popne	{r4, pc}
   14718:	bl	147dc <__assert_fail@plt+0x3950>
   1471c:	push	{r4, r5, r6, lr}
   14720:	mov	r6, r0
   14724:	mov	r0, r1
   14728:	mov	r4, r1
   1472c:	bl	14fec <__assert_fail@plt+0x4160>
   14730:	subs	r5, r0, #0
   14734:	beq	1474c <__assert_fail@plt+0x38c0>
   14738:	mov	r2, r4
   1473c:	mov	r1, r6
   14740:	bl	10c88 <memcpy@plt>
   14744:	mov	r0, r5
   14748:	pop	{r4, r5, r6, pc}
   1474c:	bl	147dc <__assert_fail@plt+0x3950>
   14750:	push	{r4, r5, r6, lr}
   14754:	mov	r6, r0
   14758:	mov	r0, r1
   1475c:	mov	r4, r1
   14760:	bl	14fec <__assert_fail@plt+0x4160>
   14764:	subs	r5, r0, #0
   14768:	beq	14780 <__assert_fail@plt+0x38f4>
   1476c:	mov	r2, r4
   14770:	mov	r1, r6
   14774:	bl	10c88 <memcpy@plt>
   14778:	mov	r0, r5
   1477c:	pop	{r4, r5, r6, pc}
   14780:	bl	147dc <__assert_fail@plt+0x3950>
   14784:	push	{r4, r5, r6, lr}
   14788:	mov	r6, r0
   1478c:	add	r0, r1, #1
   14790:	mov	r4, r1
   14794:	bl	14fec <__assert_fail@plt+0x4160>
   14798:	subs	r5, r0, #0
   1479c:	beq	147bc <__assert_fail@plt+0x3930>
   147a0:	mov	r3, #0
   147a4:	mov	r1, r6
   147a8:	strb	r3, [r5, r4]
   147ac:	mov	r2, r4
   147b0:	bl	10c88 <memcpy@plt>
   147b4:	mov	r0, r5
   147b8:	pop	{r4, r5, r6, pc}
   147bc:	bl	147dc <__assert_fail@plt+0x3950>
   147c0:	push	{r4, lr}
   147c4:	mov	r4, r0
   147c8:	bl	10da8 <strlen@plt>
   147cc:	add	r1, r0, #1
   147d0:	mov	r0, r4
   147d4:	pop	{r4, lr}
   147d8:	b	1471c <__assert_fail@plt+0x3890>
   147dc:	ldr	r3, [pc, #44]	; 14810 <__assert_fail@plt+0x3984>
   147e0:	push	{r4, lr}
   147e4:	mov	r2, #5
   147e8:	ldr	r1, [pc, #36]	; 14814 <__assert_fail@plt+0x3988>
   147ec:	mov	r0, #0
   147f0:	ldr	r4, [r3]
   147f4:	bl	10cc4 <dcgettext@plt>
   147f8:	ldr	r2, [pc, #24]	; 14818 <__assert_fail@plt+0x398c>
   147fc:	mov	r1, #0
   14800:	mov	r3, r0
   14804:	mov	r0, r4
   14808:	bl	10d3c <error@plt>
   1480c:	bl	10e74 <abort@plt>
   14810:	andeq	r7, r2, r8, ror #1
   14814:	andeq	r6, r1, r8, lsl #18
   14818:	ldrdeq	r6, [r1], -r0
   1481c:	push	{r4, r5, r6, r7, lr}
   14820:	sub	sp, sp, #20
   14824:	mov	r6, r2
   14828:	ldr	ip, [sp, #48]	; 0x30
   1482c:	mov	r2, r1
   14830:	mov	r7, r3
   14834:	str	ip, [sp]
   14838:	add	r3, sp, #8
   1483c:	mov	r1, #0
   14840:	mov	r5, r0
   14844:	ldr	r4, [sp, #56]	; 0x38
   14848:	bl	14ac4 <__assert_fail@plt+0x3c38>
   1484c:	cmp	r0, #0
   14850:	bne	148cc <__assert_fail@plt+0x3a40>
   14854:	ldrd	r0, [sp, #8]
   14858:	cmp	r0, r6
   1485c:	sbcs	r3, r1, r7
   14860:	ldrd	r6, [sp, #40]	; 0x28
   14864:	movlt	r3, #1
   14868:	movge	r3, #0
   1486c:	cmp	r6, r0
   14870:	sbcs	r2, r7, r1
   14874:	orrlt	r3, r3, #1
   14878:	cmp	r3, #0
   1487c:	beq	148c4 <__assert_fail@plt+0x3a38>
   14880:	cmp	r0, #1073741824	; 0x40000000
   14884:	sbcs	r3, r1, #0
   14888:	blt	148f8 <__assert_fail@plt+0x3a6c>
   1488c:	bl	10dc0 <__errno_location@plt>
   14890:	mov	r3, #75	; 0x4b
   14894:	mov	r6, r3
   14898:	str	r3, [r0]
   1489c:	cmp	r4, #0
   148a0:	moveq	r4, #1
   148a4:	mov	r0, r5
   148a8:	bl	13d5c <__assert_fail@plt+0x2ed0>
   148ac:	mov	r1, r6
   148b0:	ldr	r3, [sp, #52]	; 0x34
   148b4:	ldr	r2, [pc, #164]	; 14960 <__assert_fail@plt+0x3ad4>
   148b8:	str	r0, [sp]
   148bc:	mov	r0, r4
   148c0:	bl	10d3c <error@plt>
   148c4:	add	sp, sp, #20
   148c8:	pop	{r4, r5, r6, r7, pc}
   148cc:	cmp	r0, #1
   148d0:	beq	14920 <__assert_fail@plt+0x3a94>
   148d4:	cmp	r0, #3
   148d8:	beq	14950 <__assert_fail@plt+0x3ac4>
   148dc:	cmp	r4, #0
   148e0:	beq	14940 <__assert_fail@plt+0x3ab4>
   148e4:	bl	10dc0 <__errno_location@plt>
   148e8:	ldr	r6, [r0]
   148ec:	cmp	r6, #22
   148f0:	moveq	r6, #0
   148f4:	b	148a4 <__assert_fail@plt+0x3a18>
   148f8:	mov	r2, #-1073741824	; 0xc0000000
   148fc:	mvn	r3, #0
   14900:	cmp	r0, r2
   14904:	sbcs	r3, r1, r3
   14908:	blt	1488c <__assert_fail@plt+0x3a00>
   1490c:	bl	10dc0 <__errno_location@plt>
   14910:	mov	r3, #34	; 0x22
   14914:	mov	r6, r3
   14918:	str	r3, [r0]
   1491c:	b	1489c <__assert_fail@plt+0x3a10>
   14920:	bl	10dc0 <__errno_location@plt>
   14924:	mov	r3, #75	; 0x4b
   14928:	mov	r6, r3
   1492c:	str	r3, [r0]
   14930:	cmp	r4, #0
   14934:	moveq	r4, #1
   14938:	bne	148ec <__assert_fail@plt+0x3a60>
   1493c:	b	148a4 <__assert_fail@plt+0x3a18>
   14940:	bl	10dc0 <__errno_location@plt>
   14944:	mov	r4, #1
   14948:	ldr	r6, [r0]
   1494c:	b	148ec <__assert_fail@plt+0x3a60>
   14950:	bl	10dc0 <__errno_location@plt>
   14954:	mov	r6, #0
   14958:	str	r6, [r0]
   1495c:	b	14930 <__assert_fail@plt+0x3aa4>
   14960:	andeq	r6, r1, ip, asr #9
   14964:	push	{r4, r5}
   14968:	mov	r1, #10
   1496c:	pop	{r4, r5}
   14970:	b	1481c <__assert_fail@plt+0x3990>
   14974:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14978:	subs	r5, r1, #0
   1497c:	mov	r4, r0
   14980:	blt	149dc <__assert_fail@plt+0x3b50>
   14984:	moveq	r6, #0
   14988:	moveq	r7, #0
   1498c:	beq	14a24 <__assert_fail@plt+0x3b98>
   14990:	ldrd	r8, [r0]
   14994:	cmp	r8, #0
   14998:	sbcs	r3, r9, #0
   1499c:	blt	14a7c <__assert_fail@plt+0x3bf0>
   149a0:	asr	r7, r5, #31
   149a4:	mov	r3, r7
   149a8:	mov	r2, r5
   149ac:	mvn	r0, #0
   149b0:	mvn	r1, #-2147483648	; 0x80000000
   149b4:	bl	158fc <__assert_fail@plt+0x4a70>
   149b8:	mov	r6, r5
   149bc:	cmp	r0, r8
   149c0:	sbcs	r3, r1, r9
   149c4:	bge	14a24 <__assert_fail@plt+0x3b98>
   149c8:	mvn	r2, #0
   149cc:	mvn	r3, #-2147483648	; 0x80000000
   149d0:	mov	r0, #1
   149d4:	strd	r2, [r4]
   149d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   149dc:	ldrd	r8, [r0]
   149e0:	cmp	r8, #0
   149e4:	sbcs	r3, r9, #0
   149e8:	blt	14a48 <__assert_fail@plt+0x3bbc>
   149ec:	cmn	r5, #1
   149f0:	mvneq	r6, #0
   149f4:	mvneq	r7, #0
   149f8:	beq	14a24 <__assert_fail@plt+0x3b98>
   149fc:	asr	r7, r5, #31
   14a00:	mov	r3, r7
   14a04:	mov	r2, r5
   14a08:	mov	r0, #0
   14a0c:	mov	r1, #-2147483648	; 0x80000000
   14a10:	bl	158fc <__assert_fail@plt+0x4a70>
   14a14:	mov	r6, r5
   14a18:	cmp	r0, r8
   14a1c:	sbcs	r3, r1, r9
   14a20:	blt	149c8 <__assert_fail@plt+0x3b3c>
   14a24:	ldr	r2, [r4]
   14a28:	ldr	r1, [r4, #4]
   14a2c:	mov	r0, #0
   14a30:	mul	ip, r2, r7
   14a34:	umull	r2, r3, r2, r5
   14a38:	mla	r5, r5, r1, ip
   14a3c:	add	r3, r5, r3
   14a40:	strd	r2, [r4]
   14a44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14a48:	asr	r7, r5, #31
   14a4c:	mov	r3, r7
   14a50:	mov	r2, r5
   14a54:	mvn	r0, #0
   14a58:	mvn	r1, #-2147483648	; 0x80000000
   14a5c:	bl	158fc <__assert_fail@plt+0x4a70>
   14a60:	mov	r6, r5
   14a64:	cmp	r8, r0
   14a68:	sbcs	r3, r9, r1
   14a6c:	bge	14a24 <__assert_fail@plt+0x3b98>
   14a70:	mov	r2, #0
   14a74:	mov	r3, #-2147483648	; 0x80000000
   14a78:	b	149d0 <__assert_fail@plt+0x3b44>
   14a7c:	mvn	r3, #0
   14a80:	cmp	r9, r3
   14a84:	mvn	r2, #0
   14a88:	cmpeq	r8, r2
   14a8c:	moveq	r6, r5
   14a90:	asreq	r7, r6, #31
   14a94:	beq	14a24 <__assert_fail@plt+0x3b98>
   14a98:	mov	r3, r9
   14a9c:	mov	r2, r8
   14aa0:	mov	r0, #0
   14aa4:	mov	r1, #-2147483648	; 0x80000000
   14aa8:	bl	158fc <__assert_fail@plt+0x4a70>
   14aac:	asr	r7, r5, #31
   14ab0:	mov	r6, r5
   14ab4:	cmp	r0, r5
   14ab8:	sbcs	r3, r1, r7
   14abc:	blt	14a70 <__assert_fail@plt+0x3be4>
   14ac0:	b	14a24 <__assert_fail@plt+0x3b98>
   14ac4:	cmp	r2, #36	; 0x24
   14ac8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14acc:	sub	sp, sp, #20
   14ad0:	bhi	14f84 <__assert_fail@plt+0x40f8>
   14ad4:	cmp	r1, #0
   14ad8:	mov	r6, r1
   14adc:	mov	r5, r2
   14ae0:	addeq	r6, sp, #4
   14ae4:	mov	r8, r0
   14ae8:	mov	r7, r3
   14aec:	bl	10dc0 <__errno_location@plt>
   14af0:	mov	r4, #0
   14af4:	mov	r2, r5
   14af8:	mov	r3, r4
   14afc:	mov	r1, r6
   14b00:	str	r4, [r0]
   14b04:	mov	r9, r0
   14b08:	mov	r0, r8
   14b0c:	bl	10e44 <__strtoll_internal@plt>
   14b10:	ldr	r5, [r6]
   14b14:	cmp	r8, r5
   14b18:	strd	r0, [sp, #8]
   14b1c:	beq	14b6c <__assert_fail@plt+0x3ce0>
   14b20:	ldr	r4, [r9]
   14b24:	cmp	r4, #0
   14b28:	bne	14b54 <__assert_fail@plt+0x3cc8>
   14b2c:	ldr	r3, [sp, #56]	; 0x38
   14b30:	cmp	r3, #0
   14b34:	beq	14b44 <__assert_fail@plt+0x3cb8>
   14b38:	ldrb	r8, [r5]
   14b3c:	cmp	r8, #0
   14b40:	bne	14ba4 <__assert_fail@plt+0x3d18>
   14b44:	strd	r0, [r7]
   14b48:	mov	r0, r4
   14b4c:	add	sp, sp, #20
   14b50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b54:	cmp	r4, #34	; 0x22
   14b58:	beq	14db4 <__assert_fail@plt+0x3f28>
   14b5c:	mov	r4, #4
   14b60:	mov	r0, r4
   14b64:	add	sp, sp, #20
   14b68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b6c:	ldr	r3, [sp, #56]	; 0x38
   14b70:	cmp	r3, r4
   14b74:	beq	14b5c <__assert_fail@plt+0x3cd0>
   14b78:	ldrb	r1, [r5]
   14b7c:	cmp	r1, r4
   14b80:	beq	14b5c <__assert_fail@plt+0x3cd0>
   14b84:	mov	r0, r3
   14b88:	bl	10db4 <strchr@plt>
   14b8c:	cmp	r0, r4
   14b90:	beq	14b5c <__assert_fail@plt+0x3cd0>
   14b94:	ldrb	r8, [r5]
   14b98:	mov	r2, #1
   14b9c:	mov	r3, #0
   14ba0:	strd	r2, [sp, #8]
   14ba4:	mov	r1, r8
   14ba8:	ldr	r0, [sp, #56]	; 0x38
   14bac:	bl	10db4 <strchr@plt>
   14bb0:	cmp	r0, #0
   14bb4:	beq	14f74 <__assert_fail@plt+0x40e8>
   14bb8:	sub	r3, r8, #69	; 0x45
   14bbc:	cmp	r3, #47	; 0x2f
   14bc0:	ldrls	pc, [pc, r3, lsl #2]
   14bc4:	b	14c88 <__assert_fail@plt+0x3dfc>
   14bc8:	andeq	r4, r1, r8, ror sp
   14bcc:	andeq	r4, r1, r8, lsl #25
   14bd0:	andeq	r4, r1, r8, ror sp
   14bd4:	andeq	r4, r1, r8, lsl #25
   14bd8:	andeq	r4, r1, r8, lsl #25
   14bdc:	andeq	r4, r1, r8, lsl #25
   14be0:	andeq	r4, r1, r8, ror sp
   14be4:	andeq	r4, r1, r8, lsl #25
   14be8:	andeq	r4, r1, r8, ror sp
   14bec:	andeq	r4, r1, r8, lsl #25
   14bf0:	andeq	r4, r1, r8, lsl #25
   14bf4:	andeq	r4, r1, r8, ror sp
   14bf8:	andeq	r4, r1, r8, lsl #25
   14bfc:	andeq	r4, r1, r8, lsl #25
   14c00:	andeq	r4, r1, r8, lsl #25
   14c04:	andeq	r4, r1, r8, ror sp
   14c08:	andeq	r4, r1, r8, lsl #25
   14c0c:	andeq	r4, r1, r8, lsl #25
   14c10:	andeq	r4, r1, r8, lsl #25
   14c14:	andeq	r4, r1, r8, lsl #25
   14c18:	andeq	r4, r1, r8, ror sp
   14c1c:	andeq	r4, r1, r8, ror sp
   14c20:	andeq	r4, r1, r8, lsl #25
   14c24:	andeq	r4, r1, r8, lsl #25
   14c28:	andeq	r4, r1, r8, lsl #25
   14c2c:	andeq	r4, r1, r8, lsl #25
   14c30:	andeq	r4, r1, r8, lsl #25
   14c34:	andeq	r4, r1, r8, lsl #25
   14c38:	andeq	r4, r1, r8, lsl #25
   14c3c:	andeq	r4, r1, r8, lsl #25
   14c40:	andeq	r4, r1, r8, lsl #25
   14c44:	andeq	r4, r1, r8, lsl #25
   14c48:	andeq	r4, r1, r8, lsl #25
   14c4c:	andeq	r4, r1, r8, lsl #25
   14c50:	andeq	r4, r1, r8, ror sp
   14c54:	andeq	r4, r1, r8, lsl #25
   14c58:	andeq	r4, r1, r8, lsl #25
   14c5c:	andeq	r4, r1, r8, lsl #25
   14c60:	andeq	r4, r1, r8, ror sp
   14c64:	andeq	r4, r1, r8, lsl #25
   14c68:	andeq	r4, r1, r8, ror sp
   14c6c:	andeq	r4, r1, r8, lsl #25
   14c70:	andeq	r4, r1, r8, lsl #25
   14c74:	andeq	r4, r1, r8, lsl #25
   14c78:	andeq	r4, r1, r8, lsl #25
   14c7c:	andeq	r4, r1, r8, lsl #25
   14c80:	andeq	r4, r1, r8, lsl #25
   14c84:	andeq	r4, r1, r8, ror sp
   14c88:	mov	sl, #1
   14c8c:	mov	r9, #1024	; 0x400
   14c90:	sub	r8, r8, #66	; 0x42
   14c94:	cmp	r8, #53	; 0x35
   14c98:	ldrls	pc, [pc, r8, lsl #2]
   14c9c:	b	14f74 <__assert_fail@plt+0x40e8>
   14ca0:	andeq	r4, r1, ip, lsl #29
   14ca4:	andeq	r4, r1, r4, ror pc
   14ca8:	andeq	r4, r1, r4, ror pc
   14cac:	andeq	r4, r1, r4, ror #28
   14cb0:	andeq	r4, r1, r4, ror pc
   14cb4:	andeq	r4, r1, r8, lsr lr
   14cb8:	andeq	r4, r1, r4, ror pc
   14cbc:	andeq	r4, r1, r4, ror pc
   14cc0:	andeq	r4, r1, r4, ror pc
   14cc4:	andeq	r4, r1, r0, lsr #28
   14cc8:	andeq	r4, r1, r4, ror pc
   14ccc:	strdeq	r4, [r1], -r8
   14cd0:	andeq	r4, r1, r4, ror pc
   14cd4:	andeq	r4, r1, r4, ror pc
   14cd8:	andeq	r4, r1, ip, asr #30
   14cdc:	andeq	r4, r1, r4, ror pc
   14ce0:	andeq	r4, r1, r4, ror pc
   14ce4:	andeq	r4, r1, r4, ror pc
   14ce8:	andeq	r4, r1, r4, lsr #30
   14cec:	andeq	r4, r1, r4, ror pc
   14cf0:	andeq	r4, r1, r4, ror pc
   14cf4:	andeq	r4, r1, r4, ror pc
   14cf8:	andeq	r4, r1, r4, ror pc
   14cfc:	strdeq	r4, [r1], -ip
   14d00:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d04:	andeq	r4, r1, r4, ror pc
   14d08:	andeq	r4, r1, r4, ror pc
   14d0c:	andeq	r4, r1, r4, ror pc
   14d10:	andeq	r4, r1, r4, ror pc
   14d14:	andeq	r4, r1, r4, ror pc
   14d18:	andeq	r4, r1, r4, ror pc
   14d1c:	andeq	r4, r1, r4, ror pc
   14d20:			; <UNDEFINED> instruction: 0x00014ebc
   14d24:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14d28:	andeq	r4, r1, r4, ror pc
   14d2c:	andeq	r4, r1, r4, ror pc
   14d30:	andeq	r4, r1, r4, ror pc
   14d34:	andeq	r4, r1, r8, lsr lr
   14d38:	andeq	r4, r1, r4, ror pc
   14d3c:	andeq	r4, r1, r4, ror pc
   14d40:	andeq	r4, r1, r4, ror pc
   14d44:	andeq	r4, r1, r0, lsr #28
   14d48:	andeq	r4, r1, r4, ror pc
   14d4c:	strdeq	r4, [r1], -r8
   14d50:	andeq	r4, r1, r4, ror pc
   14d54:	andeq	r4, r1, r4, ror pc
   14d58:	andeq	r4, r1, r4, ror pc
   14d5c:	andeq	r4, r1, r4, ror pc
   14d60:	andeq	r4, r1, r4, ror pc
   14d64:	andeq	r4, r1, r4, ror pc
   14d68:	andeq	r4, r1, r4, lsr #30
   14d6c:	andeq	r4, r1, r4, ror pc
   14d70:	andeq	r4, r1, r4, ror pc
   14d74:	andeq	r4, r1, r4, lsr #29
   14d78:	mov	r1, #48	; 0x30
   14d7c:	ldr	r0, [sp, #56]	; 0x38
   14d80:	bl	10db4 <strchr@plt>
   14d84:	cmp	r0, #0
   14d88:	beq	14c88 <__assert_fail@plt+0x3dfc>
   14d8c:	ldrb	r3, [r5, #1]
   14d90:	cmp	r3, #68	; 0x44
   14d94:	beq	14da8 <__assert_fail@plt+0x3f1c>
   14d98:	cmp	r3, #105	; 0x69
   14d9c:	beq	14dbc <__assert_fail@plt+0x3f30>
   14da0:	cmp	r3, #66	; 0x42
   14da4:	bne	14c88 <__assert_fail@plt+0x3dfc>
   14da8:	mov	sl, #2
   14dac:	mov	r9, #1000	; 0x3e8
   14db0:	b	14c90 <__assert_fail@plt+0x3e04>
   14db4:	mov	r4, #1
   14db8:	b	14b2c <__assert_fail@plt+0x3ca0>
   14dbc:	ldrb	sl, [r5, #2]
   14dc0:	mov	r9, #1024	; 0x400
   14dc4:	cmp	sl, #66	; 0x42
   14dc8:	movne	sl, #1
   14dcc:	moveq	sl, #3
   14dd0:	b	14c90 <__assert_fail@plt+0x3e04>
   14dd4:	mov	r8, #0
   14dd8:	add	r3, r5, sl
   14ddc:	str	r3, [r6]
   14de0:	ldrb	r3, [r5, sl]
   14de4:	orr	r4, r4, r8
   14de8:	ldrd	r0, [sp, #8]
   14dec:	cmp	r3, #0
   14df0:	orrne	r4, r4, #2
   14df4:	b	14b44 <__assert_fail@plt+0x3cb8>
   14df8:	mov	r1, r9
   14dfc:	add	r0, sp, #8
   14e00:	bl	14974 <__assert_fail@plt+0x3ae8>
   14e04:	mov	r1, r9
   14e08:	mov	r8, r0
   14e0c:	add	r0, sp, #8
   14e10:	bl	14974 <__assert_fail@plt+0x3ae8>
   14e14:	ldr	r5, [r6]
   14e18:	orr	r8, r8, r0
   14e1c:	b	14dd8 <__assert_fail@plt+0x3f4c>
   14e20:	mov	r1, r9
   14e24:	add	r0, sp, #8
   14e28:	bl	14974 <__assert_fail@plt+0x3ae8>
   14e2c:	ldr	r5, [r6]
   14e30:	mov	r8, r0
   14e34:	b	14dd8 <__assert_fail@plt+0x3f4c>
   14e38:	mov	fp, #3
   14e3c:	mov	r8, #0
   14e40:	add	r5, sp, #8
   14e44:	mov	r1, r9
   14e48:	mov	r0, r5
   14e4c:	bl	14974 <__assert_fail@plt+0x3ae8>
   14e50:	subs	fp, fp, #1
   14e54:	orr	r8, r8, r0
   14e58:	bne	14e44 <__assert_fail@plt+0x3fb8>
   14e5c:	ldr	r5, [r6]
   14e60:	b	14dd8 <__assert_fail@plt+0x3f4c>
   14e64:	mov	fp, #6
   14e68:	mov	r8, #0
   14e6c:	add	r5, sp, #8
   14e70:	mov	r1, r9
   14e74:	mov	r0, r5
   14e78:	bl	14974 <__assert_fail@plt+0x3ae8>
   14e7c:	subs	fp, fp, #1
   14e80:	orr	r8, r8, r0
   14e84:	bne	14e70 <__assert_fail@plt+0x3fe4>
   14e88:	b	14e5c <__assert_fail@plt+0x3fd0>
   14e8c:	mov	r1, #1024	; 0x400
   14e90:	add	r0, sp, #8
   14e94:	bl	14974 <__assert_fail@plt+0x3ae8>
   14e98:	ldr	r5, [r6]
   14e9c:	mov	r8, r0
   14ea0:	b	14dd8 <__assert_fail@plt+0x3f4c>
   14ea4:	mov	r1, #2
   14ea8:	add	r0, sp, #8
   14eac:	bl	14974 <__assert_fail@plt+0x3ae8>
   14eb0:	ldr	r5, [r6]
   14eb4:	mov	r8, r0
   14eb8:	b	14dd8 <__assert_fail@plt+0x3f4c>
   14ebc:	mov	r1, #512	; 0x200
   14ec0:	add	r0, sp, #8
   14ec4:	bl	14974 <__assert_fail@plt+0x3ae8>
   14ec8:	ldr	r5, [r6]
   14ecc:	mov	r8, r0
   14ed0:	b	14dd8 <__assert_fail@plt+0x3f4c>
   14ed4:	mov	fp, #7
   14ed8:	mov	r8, #0
   14edc:	add	r5, sp, #8
   14ee0:	mov	r1, r9
   14ee4:	mov	r0, r5
   14ee8:	bl	14974 <__assert_fail@plt+0x3ae8>
   14eec:	subs	fp, fp, #1
   14ef0:	orr	r8, r8, r0
   14ef4:	bne	14ee0 <__assert_fail@plt+0x4054>
   14ef8:	b	14e5c <__assert_fail@plt+0x3fd0>
   14efc:	mov	fp, #8
   14f00:	mov	r8, #0
   14f04:	add	r5, sp, fp
   14f08:	mov	r1, r9
   14f0c:	mov	r0, r5
   14f10:	bl	14974 <__assert_fail@plt+0x3ae8>
   14f14:	subs	fp, fp, #1
   14f18:	orr	r8, r8, r0
   14f1c:	bne	14f08 <__assert_fail@plt+0x407c>
   14f20:	b	14e5c <__assert_fail@plt+0x3fd0>
   14f24:	mov	fp, #4
   14f28:	mov	r8, #0
   14f2c:	add	r5, sp, #8
   14f30:	mov	r1, r9
   14f34:	mov	r0, r5
   14f38:	bl	14974 <__assert_fail@plt+0x3ae8>
   14f3c:	subs	fp, fp, #1
   14f40:	orr	r8, r8, r0
   14f44:	bne	14f30 <__assert_fail@plt+0x40a4>
   14f48:	b	14e5c <__assert_fail@plt+0x3fd0>
   14f4c:	mov	fp, #5
   14f50:	mov	r8, #0
   14f54:	add	r5, sp, #8
   14f58:	mov	r1, r9
   14f5c:	mov	r0, r5
   14f60:	bl	14974 <__assert_fail@plt+0x3ae8>
   14f64:	subs	fp, fp, #1
   14f68:	orr	r8, r8, r0
   14f6c:	bne	14f58 <__assert_fail@plt+0x40cc>
   14f70:	b	14e5c <__assert_fail@plt+0x3fd0>
   14f74:	ldrd	r2, [sp, #8]
   14f78:	orr	r4, r4, #2
   14f7c:	strd	r2, [r7]
   14f80:	b	14b48 <__assert_fail@plt+0x3cbc>
   14f84:	ldr	r3, [pc, #12]	; 14f98 <__assert_fail@plt+0x410c>
   14f88:	mov	r2, #85	; 0x55
   14f8c:	ldr	r1, [pc, #8]	; 14f9c <__assert_fail@plt+0x4110>
   14f90:	ldr	r0, [pc, #8]	; 14fa0 <__assert_fail@plt+0x4114>
   14f94:	bl	10e8c <__assert_fail@plt>
   14f98:	andeq	r6, r1, ip, lsl r9
   14f9c:	andeq	r6, r1, r8, lsr #18
   14fa0:	andeq	r6, r1, r8, lsr r9
   14fa4:	cmp	r1, #0
   14fa8:	cmpne	r0, #0
   14fac:	moveq	r1, #1
   14fb0:	moveq	r0, r1
   14fb4:	umull	r2, r3, r0, r1
   14fb8:	adds	r3, r3, #0
   14fbc:	movne	r3, #1
   14fc0:	cmp	r2, #0
   14fc4:	blt	14fd4 <__assert_fail@plt+0x4148>
   14fc8:	cmp	r3, #0
   14fcc:	bne	14fd4 <__assert_fail@plt+0x4148>
   14fd0:	b	10c34 <calloc@plt>
   14fd4:	push	{r4, lr}
   14fd8:	bl	10dc0 <__errno_location@plt>
   14fdc:	mov	r3, #12
   14fe0:	str	r3, [r0]
   14fe4:	mov	r0, #0
   14fe8:	pop	{r4, pc}
   14fec:	cmp	r0, #0
   14ff0:	moveq	r0, #1
   14ff4:	cmp	r0, #0
   14ff8:	blt	15000 <__assert_fail@plt+0x4174>
   14ffc:	b	10d54 <malloc@plt>
   15000:	push	{r4, lr}
   15004:	bl	10dc0 <__errno_location@plt>
   15008:	mov	r3, #12
   1500c:	str	r3, [r0]
   15010:	mov	r0, #0
   15014:	pop	{r4, pc}
   15018:	cmp	r0, #0
   1501c:	beq	15040 <__assert_fail@plt+0x41b4>
   15020:	cmp	r1, #0
   15024:	push	{lr}		; (str lr, [sp, #-4]!)
   15028:	sub	sp, sp, #12
   1502c:	beq	15048 <__assert_fail@plt+0x41bc>
   15030:	blt	15060 <__assert_fail@plt+0x41d4>
   15034:	add	sp, sp, #12
   15038:	pop	{lr}		; (ldr lr, [sp], #4)
   1503c:	b	10cd0 <realloc@plt>
   15040:	mov	r0, r1
   15044:	b	14fec <__assert_fail@plt+0x4160>
   15048:	str	r1, [sp, #4]
   1504c:	bl	151f0 <__assert_fail@plt+0x4364>
   15050:	ldr	r3, [sp, #4]
   15054:	mov	r0, r3
   15058:	add	sp, sp, #12
   1505c:	pop	{pc}		; (ldr pc, [sp], #4)
   15060:	bl	10dc0 <__errno_location@plt>
   15064:	mov	r2, #12
   15068:	mov	r3, #0
   1506c:	str	r2, [r0]
   15070:	b	15054 <__assert_fail@plt+0x41c8>
   15074:	push	{r4, r5, r6, lr}
   15078:	mov	r4, r0
   1507c:	bl	10d24 <__fpending@plt>
   15080:	ldr	r5, [r4]
   15084:	and	r5, r5, #32
   15088:	mov	r6, r0
   1508c:	mov	r0, r4
   15090:	bl	150f0 <__assert_fail@plt+0x4264>
   15094:	cmp	r5, #0
   15098:	mov	r4, r0
   1509c:	bne	150bc <__assert_fail@plt+0x4230>
   150a0:	cmp	r0, #0
   150a4:	beq	150b4 <__assert_fail@plt+0x4228>
   150a8:	cmp	r6, #0
   150ac:	beq	150d8 <__assert_fail@plt+0x424c>
   150b0:	mvn	r4, #0
   150b4:	mov	r0, r4
   150b8:	pop	{r4, r5, r6, pc}
   150bc:	cmp	r0, #0
   150c0:	bne	150b0 <__assert_fail@plt+0x4224>
   150c4:	bl	10dc0 <__errno_location@plt>
   150c8:	str	r4, [r0]
   150cc:	mvn	r4, #0
   150d0:	mov	r0, r4
   150d4:	pop	{r4, r5, r6, pc}
   150d8:	bl	10dc0 <__errno_location@plt>
   150dc:	ldr	r4, [r0]
   150e0:	subs	r4, r4, #9
   150e4:	mvnne	r4, #0
   150e8:	mov	r0, r4
   150ec:	pop	{r4, r5, r6, pc}
   150f0:	push	{r4, r5, lr}
   150f4:	sub	sp, sp, #12
   150f8:	mov	r4, r0
   150fc:	bl	10df0 <fileno@plt>
   15100:	cmp	r0, #0
   15104:	mov	r0, r4
   15108:	blt	15184 <__assert_fail@plt+0x42f8>
   1510c:	bl	10d6c <__freading@plt>
   15110:	cmp	r0, #0
   15114:	bne	15150 <__assert_fail@plt+0x42c4>
   15118:	mov	r0, r4
   1511c:	bl	15190 <__assert_fail@plt+0x4304>
   15120:	cmp	r0, #0
   15124:	beq	15180 <__assert_fail@plt+0x42f4>
   15128:	bl	10dc0 <__errno_location@plt>
   1512c:	mov	r5, r0
   15130:	mov	r0, r4
   15134:	ldr	r4, [r5]
   15138:	bl	10e08 <fclose@plt>
   1513c:	cmp	r4, #0
   15140:	mvnne	r0, #0
   15144:	strne	r4, [r5]
   15148:	add	sp, sp, #12
   1514c:	pop	{r4, r5, pc}
   15150:	mov	r0, r4
   15154:	bl	10df0 <fileno@plt>
   15158:	mov	r3, #1
   1515c:	str	r3, [sp]
   15160:	mov	r2, #0
   15164:	mov	r3, #0
   15168:	bl	10d0c <lseek64@plt>
   1516c:	mvn	r3, #0
   15170:	mvn	r2, #0
   15174:	cmp	r1, r3
   15178:	cmpeq	r0, r2
   1517c:	bne	15118 <__assert_fail@plt+0x428c>
   15180:	mov	r0, r4
   15184:	add	sp, sp, #12
   15188:	pop	{r4, r5, lr}
   1518c:	b	10e08 <fclose@plt>
   15190:	push	{r4, lr}
   15194:	subs	r4, r0, #0
   15198:	sub	sp, sp, #8
   1519c:	beq	151b8 <__assert_fail@plt+0x432c>
   151a0:	bl	10d6c <__freading@plt>
   151a4:	cmp	r0, #0
   151a8:	beq	151b8 <__assert_fail@plt+0x432c>
   151ac:	ldr	r3, [r4]
   151b0:	tst	r3, #256	; 0x100
   151b4:	bne	151c8 <__assert_fail@plt+0x433c>
   151b8:	mov	r0, r4
   151bc:	add	sp, sp, #8
   151c0:	pop	{r4, lr}
   151c4:	b	10c64 <fflush@plt>
   151c8:	mov	r3, #1
   151cc:	str	r3, [sp]
   151d0:	mov	r2, #0
   151d4:	mov	r3, #0
   151d8:	mov	r0, r4
   151dc:	bl	15248 <__assert_fail@plt+0x43bc>
   151e0:	mov	r0, r4
   151e4:	add	sp, sp, #8
   151e8:	pop	{r4, lr}
   151ec:	b	10c64 <fflush@plt>
   151f0:	push	{r4, r5, lr}
   151f4:	sub	sp, sp, #12
   151f8:	mov	r5, r0
   151fc:	bl	10dc0 <__errno_location@plt>
   15200:	mov	r2, #0
   15204:	mov	r4, r0
   15208:	ldr	r3, [r0]
   1520c:	str	r2, [r4]
   15210:	mov	r0, r5
   15214:	str	r3, [sp]
   15218:	str	r3, [sp, #4]
   1521c:	bl	10c70 <free@plt>
   15220:	ldr	r3, [r4]
   15224:	add	r2, sp, #8
   15228:	cmp	r3, #0
   1522c:	moveq	r3, #4
   15230:	movne	r3, #0
   15234:	add	r3, r2, r3
   15238:	ldr	r3, [r3, #-8]
   1523c:	str	r3, [r4]
   15240:	add	sp, sp, #12
   15244:	pop	{r4, r5, pc}
   15248:	push	{r4, r5, r6, r7, r8, lr}
   1524c:	sub	sp, sp, #8
   15250:	ldmib	r0, {ip, lr}
   15254:	mov	r4, r0
   15258:	ldr	r5, [sp, #32]
   1525c:	cmp	lr, ip
   15260:	beq	15278 <__assert_fail@plt+0x43ec>
   15264:	str	r5, [sp, #32]
   15268:	mov	r0, r4
   1526c:	add	sp, sp, #8
   15270:	pop	{r4, r5, r6, r7, r8, lr}
   15274:	b	10e14 <fseeko64@plt>
   15278:	ldr	lr, [r0, #20]
   1527c:	ldr	ip, [r0, #16]
   15280:	cmp	lr, ip
   15284:	bne	15264 <__assert_fail@plt+0x43d8>
   15288:	ldr	r8, [r0, #36]	; 0x24
   1528c:	cmp	r8, #0
   15290:	bne	15264 <__assert_fail@plt+0x43d8>
   15294:	mov	r6, r2
   15298:	mov	r7, r3
   1529c:	bl	10df0 <fileno@plt>
   152a0:	mov	r2, r6
   152a4:	mov	r3, r7
   152a8:	str	r5, [sp]
   152ac:	bl	10d0c <lseek64@plt>
   152b0:	mvn	r3, #0
   152b4:	mvn	r2, #0
   152b8:	cmp	r1, r3
   152bc:	cmpeq	r0, r2
   152c0:	beq	152e0 <__assert_fail@plt+0x4454>
   152c4:	ldr	r3, [r4]
   152c8:	strd	r0, [r4, #80]	; 0x50
   152cc:	mov	r0, r8
   152d0:	bic	r3, r3, #16
   152d4:	str	r3, [r4]
   152d8:	add	sp, sp, #8
   152dc:	pop	{r4, r5, r6, r7, r8, pc}
   152e0:	mvn	r0, #0
   152e4:	b	152d8 <__assert_fail@plt+0x444c>
   152e8:	push	{r4, lr}
   152ec:	mov	r0, #14
   152f0:	bl	10e38 <nl_langinfo@plt>
   152f4:	cmp	r0, #0
   152f8:	beq	15310 <__assert_fail@plt+0x4484>
   152fc:	ldrb	r2, [r0]
   15300:	ldr	r3, [pc, #16]	; 15318 <__assert_fail@plt+0x448c>
   15304:	cmp	r2, #0
   15308:	moveq	r0, r3
   1530c:	pop	{r4, pc}
   15310:	ldr	r0, [pc]	; 15318 <__assert_fail@plt+0x448c>
   15314:	pop	{r4, pc}
   15318:	andeq	r6, r1, r0, ror #18
   1531c:	push	{r4, r5, r6, r7, lr}
   15320:	subs	r6, r0, #0
   15324:	sub	sp, sp, #12
   15328:	addeq	r6, sp, #4
   1532c:	mov	r0, r6
   15330:	mov	r5, r2
   15334:	mov	r7, r1
   15338:	bl	10d30 <mbrtowc@plt>
   1533c:	cmp	r5, #0
   15340:	cmnne	r0, #3
   15344:	mov	r4, r0
   15348:	bls	15364 <__assert_fail@plt+0x44d8>
   1534c:	mov	r0, #0
   15350:	bl	153bc <__assert_fail@plt+0x4530>
   15354:	cmp	r0, #0
   15358:	moveq	r4, #1
   1535c:	ldrbeq	r3, [r7]
   15360:	streq	r3, [r6]
   15364:	mov	r0, r4
   15368:	add	sp, sp, #12
   1536c:	pop	{r4, r5, r6, r7, pc}
   15370:	push	{r4, r5, r6, lr}
   15374:	subs	r4, r2, #0
   15378:	mov	r6, r0
   1537c:	mov	r5, r1
   15380:	beq	153ac <__assert_fail@plt+0x4520>
   15384:	mov	r1, r4
   15388:	mvn	r0, #0
   1538c:	bl	154b0 <__assert_fail@plt+0x4624>
   15390:	cmp	r0, r5
   15394:	bcs	153ac <__assert_fail@plt+0x4520>
   15398:	bl	10dc0 <__errno_location@plt>
   1539c:	mov	r3, #12
   153a0:	str	r3, [r0]
   153a4:	mov	r0, #0
   153a8:	pop	{r4, r5, r6, pc}
   153ac:	mul	r1, r5, r4
   153b0:	mov	r0, r6
   153b4:	pop	{r4, r5, r6, lr}
   153b8:	b	15018 <__assert_fail@plt+0x418c>
   153bc:	push	{lr}		; (str lr, [sp, #-4]!)
   153c0:	sub	sp, sp, #268	; 0x10c
   153c4:	add	r1, sp, #4
   153c8:	ldr	r2, [pc, #60]	; 1540c <__assert_fail@plt+0x4580>
   153cc:	bl	15418 <__assert_fail@plt+0x458c>
   153d0:	cmp	r0, #0
   153d4:	movne	r0, #0
   153d8:	bne	15404 <__assert_fail@plt+0x4578>
   153dc:	ldr	r1, [pc, #44]	; 15410 <__assert_fail@plt+0x4584>
   153e0:	add	r0, sp, #4
   153e4:	bl	10c58 <strcmp@plt>
   153e8:	cmp	r0, #0
   153ec:	beq	15404 <__assert_fail@plt+0x4578>
   153f0:	add	r0, sp, #4
   153f4:	ldr	r1, [pc, #24]	; 15414 <__assert_fail@plt+0x4588>
   153f8:	bl	10c58 <strcmp@plt>
   153fc:	adds	r0, r0, #0
   15400:	movne	r0, #1
   15404:	add	sp, sp, #268	; 0x10c
   15408:	pop	{pc}		; (ldr pc, [sp], #4)
   1540c:	andeq	r0, r0, r1, lsl #2
   15410:	andeq	r6, r1, r8, ror #18
   15414:	andeq	r6, r1, ip, ror #18
   15418:	push	{r4, r5, r6, lr}
   1541c:	mov	r5, r1
   15420:	mov	r1, #0
   15424:	mov	r4, r2
   15428:	bl	10e20 <setlocale@plt>
   1542c:	subs	r6, r0, #0
   15430:	beq	1548c <__assert_fail@plt+0x4600>
   15434:	bl	10da8 <strlen@plt>
   15438:	cmp	r4, r0
   1543c:	bhi	15474 <__assert_fail@plt+0x45e8>
   15440:	cmp	r4, #0
   15444:	bne	15450 <__assert_fail@plt+0x45c4>
   15448:	mov	r0, #34	; 0x22
   1544c:	pop	{r4, r5, r6, pc}
   15450:	sub	r4, r4, #1
   15454:	mov	r1, r6
   15458:	mov	r2, r4
   1545c:	mov	r0, r5
   15460:	bl	10c88 <memcpy@plt>
   15464:	mov	r3, #0
   15468:	strb	r3, [r5, r4]
   1546c:	mov	r0, #34	; 0x22
   15470:	pop	{r4, r5, r6, pc}
   15474:	add	r2, r0, #1
   15478:	mov	r1, r6
   1547c:	mov	r0, r5
   15480:	bl	10c88 <memcpy@plt>
   15484:	mov	r0, #0
   15488:	pop	{r4, r5, r6, pc}
   1548c:	cmp	r4, #0
   15490:	beq	154a0 <__assert_fail@plt+0x4614>
   15494:	strb	r6, [r5]
   15498:	mov	r0, #22
   1549c:	pop	{r4, r5, r6, pc}
   154a0:	mov	r0, #22
   154a4:	pop	{r4, r5, r6, pc}
   154a8:	mov	r1, #0
   154ac:	b	10e20 <setlocale@plt>
   154b0:	subs	r2, r1, #1
   154b4:	bxeq	lr
   154b8:	bcc	15690 <__assert_fail@plt+0x4804>
   154bc:	cmp	r0, r1
   154c0:	bls	15674 <__assert_fail@plt+0x47e8>
   154c4:	tst	r1, r2
   154c8:	beq	15680 <__assert_fail@plt+0x47f4>
   154cc:	clz	r3, r0
   154d0:	clz	r2, r1
   154d4:	sub	r3, r2, r3
   154d8:	rsbs	r3, r3, #31
   154dc:	addne	r3, r3, r3, lsl #1
   154e0:	mov	r2, #0
   154e4:	addne	pc, pc, r3, lsl #2
   154e8:	nop			; (mov r0, r0)
   154ec:	cmp	r0, r1, lsl #31
   154f0:	adc	r2, r2, r2
   154f4:	subcs	r0, r0, r1, lsl #31
   154f8:	cmp	r0, r1, lsl #30
   154fc:	adc	r2, r2, r2
   15500:	subcs	r0, r0, r1, lsl #30
   15504:	cmp	r0, r1, lsl #29
   15508:	adc	r2, r2, r2
   1550c:	subcs	r0, r0, r1, lsl #29
   15510:	cmp	r0, r1, lsl #28
   15514:	adc	r2, r2, r2
   15518:	subcs	r0, r0, r1, lsl #28
   1551c:	cmp	r0, r1, lsl #27
   15520:	adc	r2, r2, r2
   15524:	subcs	r0, r0, r1, lsl #27
   15528:	cmp	r0, r1, lsl #26
   1552c:	adc	r2, r2, r2
   15530:	subcs	r0, r0, r1, lsl #26
   15534:	cmp	r0, r1, lsl #25
   15538:	adc	r2, r2, r2
   1553c:	subcs	r0, r0, r1, lsl #25
   15540:	cmp	r0, r1, lsl #24
   15544:	adc	r2, r2, r2
   15548:	subcs	r0, r0, r1, lsl #24
   1554c:	cmp	r0, r1, lsl #23
   15550:	adc	r2, r2, r2
   15554:	subcs	r0, r0, r1, lsl #23
   15558:	cmp	r0, r1, lsl #22
   1555c:	adc	r2, r2, r2
   15560:	subcs	r0, r0, r1, lsl #22
   15564:	cmp	r0, r1, lsl #21
   15568:	adc	r2, r2, r2
   1556c:	subcs	r0, r0, r1, lsl #21
   15570:	cmp	r0, r1, lsl #20
   15574:	adc	r2, r2, r2
   15578:	subcs	r0, r0, r1, lsl #20
   1557c:	cmp	r0, r1, lsl #19
   15580:	adc	r2, r2, r2
   15584:	subcs	r0, r0, r1, lsl #19
   15588:	cmp	r0, r1, lsl #18
   1558c:	adc	r2, r2, r2
   15590:	subcs	r0, r0, r1, lsl #18
   15594:	cmp	r0, r1, lsl #17
   15598:	adc	r2, r2, r2
   1559c:	subcs	r0, r0, r1, lsl #17
   155a0:	cmp	r0, r1, lsl #16
   155a4:	adc	r2, r2, r2
   155a8:	subcs	r0, r0, r1, lsl #16
   155ac:	cmp	r0, r1, lsl #15
   155b0:	adc	r2, r2, r2
   155b4:	subcs	r0, r0, r1, lsl #15
   155b8:	cmp	r0, r1, lsl #14
   155bc:	adc	r2, r2, r2
   155c0:	subcs	r0, r0, r1, lsl #14
   155c4:	cmp	r0, r1, lsl #13
   155c8:	adc	r2, r2, r2
   155cc:	subcs	r0, r0, r1, lsl #13
   155d0:	cmp	r0, r1, lsl #12
   155d4:	adc	r2, r2, r2
   155d8:	subcs	r0, r0, r1, lsl #12
   155dc:	cmp	r0, r1, lsl #11
   155e0:	adc	r2, r2, r2
   155e4:	subcs	r0, r0, r1, lsl #11
   155e8:	cmp	r0, r1, lsl #10
   155ec:	adc	r2, r2, r2
   155f0:	subcs	r0, r0, r1, lsl #10
   155f4:	cmp	r0, r1, lsl #9
   155f8:	adc	r2, r2, r2
   155fc:	subcs	r0, r0, r1, lsl #9
   15600:	cmp	r0, r1, lsl #8
   15604:	adc	r2, r2, r2
   15608:	subcs	r0, r0, r1, lsl #8
   1560c:	cmp	r0, r1, lsl #7
   15610:	adc	r2, r2, r2
   15614:	subcs	r0, r0, r1, lsl #7
   15618:	cmp	r0, r1, lsl #6
   1561c:	adc	r2, r2, r2
   15620:	subcs	r0, r0, r1, lsl #6
   15624:	cmp	r0, r1, lsl #5
   15628:	adc	r2, r2, r2
   1562c:	subcs	r0, r0, r1, lsl #5
   15630:	cmp	r0, r1, lsl #4
   15634:	adc	r2, r2, r2
   15638:	subcs	r0, r0, r1, lsl #4
   1563c:	cmp	r0, r1, lsl #3
   15640:	adc	r2, r2, r2
   15644:	subcs	r0, r0, r1, lsl #3
   15648:	cmp	r0, r1, lsl #2
   1564c:	adc	r2, r2, r2
   15650:	subcs	r0, r0, r1, lsl #2
   15654:	cmp	r0, r1, lsl #1
   15658:	adc	r2, r2, r2
   1565c:	subcs	r0, r0, r1, lsl #1
   15660:	cmp	r0, r1
   15664:	adc	r2, r2, r2
   15668:	subcs	r0, r0, r1
   1566c:	mov	r0, r2
   15670:	bx	lr
   15674:	moveq	r0, #1
   15678:	movne	r0, #0
   1567c:	bx	lr
   15680:	clz	r2, r1
   15684:	rsb	r2, r2, #31
   15688:	lsr	r0, r0, r2
   1568c:	bx	lr
   15690:	cmp	r0, #0
   15694:	mvnne	r0, #0
   15698:	b	159d0 <__assert_fail@plt+0x4b44>
   1569c:	cmp	r1, #0
   156a0:	beq	15690 <__assert_fail@plt+0x4804>
   156a4:	push	{r0, r1, lr}
   156a8:	bl	154b0 <__assert_fail@plt+0x4624>
   156ac:	pop	{r1, r2, lr}
   156b0:	mul	r3, r2, r0
   156b4:	sub	r1, r1, r3
   156b8:	bx	lr
   156bc:	cmp	r1, #0
   156c0:	beq	158cc <__assert_fail@plt+0x4a40>
   156c4:	eor	ip, r0, r1
   156c8:	rsbmi	r1, r1, #0
   156cc:	subs	r2, r1, #1
   156d0:	beq	15898 <__assert_fail@plt+0x4a0c>
   156d4:	movs	r3, r0
   156d8:	rsbmi	r3, r0, #0
   156dc:	cmp	r3, r1
   156e0:	bls	158a4 <__assert_fail@plt+0x4a18>
   156e4:	tst	r1, r2
   156e8:	beq	158b4 <__assert_fail@plt+0x4a28>
   156ec:	clz	r2, r3
   156f0:	clz	r0, r1
   156f4:	sub	r2, r0, r2
   156f8:	rsbs	r2, r2, #31
   156fc:	addne	r2, r2, r2, lsl #1
   15700:	mov	r0, #0
   15704:	addne	pc, pc, r2, lsl #2
   15708:	nop			; (mov r0, r0)
   1570c:	cmp	r3, r1, lsl #31
   15710:	adc	r0, r0, r0
   15714:	subcs	r3, r3, r1, lsl #31
   15718:	cmp	r3, r1, lsl #30
   1571c:	adc	r0, r0, r0
   15720:	subcs	r3, r3, r1, lsl #30
   15724:	cmp	r3, r1, lsl #29
   15728:	adc	r0, r0, r0
   1572c:	subcs	r3, r3, r1, lsl #29
   15730:	cmp	r3, r1, lsl #28
   15734:	adc	r0, r0, r0
   15738:	subcs	r3, r3, r1, lsl #28
   1573c:	cmp	r3, r1, lsl #27
   15740:	adc	r0, r0, r0
   15744:	subcs	r3, r3, r1, lsl #27
   15748:	cmp	r3, r1, lsl #26
   1574c:	adc	r0, r0, r0
   15750:	subcs	r3, r3, r1, lsl #26
   15754:	cmp	r3, r1, lsl #25
   15758:	adc	r0, r0, r0
   1575c:	subcs	r3, r3, r1, lsl #25
   15760:	cmp	r3, r1, lsl #24
   15764:	adc	r0, r0, r0
   15768:	subcs	r3, r3, r1, lsl #24
   1576c:	cmp	r3, r1, lsl #23
   15770:	adc	r0, r0, r0
   15774:	subcs	r3, r3, r1, lsl #23
   15778:	cmp	r3, r1, lsl #22
   1577c:	adc	r0, r0, r0
   15780:	subcs	r3, r3, r1, lsl #22
   15784:	cmp	r3, r1, lsl #21
   15788:	adc	r0, r0, r0
   1578c:	subcs	r3, r3, r1, lsl #21
   15790:	cmp	r3, r1, lsl #20
   15794:	adc	r0, r0, r0
   15798:	subcs	r3, r3, r1, lsl #20
   1579c:	cmp	r3, r1, lsl #19
   157a0:	adc	r0, r0, r0
   157a4:	subcs	r3, r3, r1, lsl #19
   157a8:	cmp	r3, r1, lsl #18
   157ac:	adc	r0, r0, r0
   157b0:	subcs	r3, r3, r1, lsl #18
   157b4:	cmp	r3, r1, lsl #17
   157b8:	adc	r0, r0, r0
   157bc:	subcs	r3, r3, r1, lsl #17
   157c0:	cmp	r3, r1, lsl #16
   157c4:	adc	r0, r0, r0
   157c8:	subcs	r3, r3, r1, lsl #16
   157cc:	cmp	r3, r1, lsl #15
   157d0:	adc	r0, r0, r0
   157d4:	subcs	r3, r3, r1, lsl #15
   157d8:	cmp	r3, r1, lsl #14
   157dc:	adc	r0, r0, r0
   157e0:	subcs	r3, r3, r1, lsl #14
   157e4:	cmp	r3, r1, lsl #13
   157e8:	adc	r0, r0, r0
   157ec:	subcs	r3, r3, r1, lsl #13
   157f0:	cmp	r3, r1, lsl #12
   157f4:	adc	r0, r0, r0
   157f8:	subcs	r3, r3, r1, lsl #12
   157fc:	cmp	r3, r1, lsl #11
   15800:	adc	r0, r0, r0
   15804:	subcs	r3, r3, r1, lsl #11
   15808:	cmp	r3, r1, lsl #10
   1580c:	adc	r0, r0, r0
   15810:	subcs	r3, r3, r1, lsl #10
   15814:	cmp	r3, r1, lsl #9
   15818:	adc	r0, r0, r0
   1581c:	subcs	r3, r3, r1, lsl #9
   15820:	cmp	r3, r1, lsl #8
   15824:	adc	r0, r0, r0
   15828:	subcs	r3, r3, r1, lsl #8
   1582c:	cmp	r3, r1, lsl #7
   15830:	adc	r0, r0, r0
   15834:	subcs	r3, r3, r1, lsl #7
   15838:	cmp	r3, r1, lsl #6
   1583c:	adc	r0, r0, r0
   15840:	subcs	r3, r3, r1, lsl #6
   15844:	cmp	r3, r1, lsl #5
   15848:	adc	r0, r0, r0
   1584c:	subcs	r3, r3, r1, lsl #5
   15850:	cmp	r3, r1, lsl #4
   15854:	adc	r0, r0, r0
   15858:	subcs	r3, r3, r1, lsl #4
   1585c:	cmp	r3, r1, lsl #3
   15860:	adc	r0, r0, r0
   15864:	subcs	r3, r3, r1, lsl #3
   15868:	cmp	r3, r1, lsl #2
   1586c:	adc	r0, r0, r0
   15870:	subcs	r3, r3, r1, lsl #2
   15874:	cmp	r3, r1, lsl #1
   15878:	adc	r0, r0, r0
   1587c:	subcs	r3, r3, r1, lsl #1
   15880:	cmp	r3, r1
   15884:	adc	r0, r0, r0
   15888:	subcs	r3, r3, r1
   1588c:	cmp	ip, #0
   15890:	rsbmi	r0, r0, #0
   15894:	bx	lr
   15898:	teq	ip, r0
   1589c:	rsbmi	r0, r0, #0
   158a0:	bx	lr
   158a4:	movcc	r0, #0
   158a8:	asreq	r0, ip, #31
   158ac:	orreq	r0, r0, #1
   158b0:	bx	lr
   158b4:	clz	r2, r1
   158b8:	rsb	r2, r2, #31
   158bc:	cmp	ip, #0
   158c0:	lsr	r0, r3, r2
   158c4:	rsbmi	r0, r0, #0
   158c8:	bx	lr
   158cc:	cmp	r0, #0
   158d0:	mvngt	r0, #-2147483648	; 0x80000000
   158d4:	movlt	r0, #-2147483648	; 0x80000000
   158d8:	b	159d0 <__assert_fail@plt+0x4b44>
   158dc:	cmp	r1, #0
   158e0:	beq	158cc <__assert_fail@plt+0x4a40>
   158e4:	push	{r0, r1, lr}
   158e8:	bl	156c4 <__assert_fail@plt+0x4838>
   158ec:	pop	{r1, r2, lr}
   158f0:	mul	r3, r2, r0
   158f4:	sub	r1, r1, r3
   158f8:	bx	lr
   158fc:	cmp	r3, #0
   15900:	cmpeq	r2, #0
   15904:	bne	15928 <__assert_fail@plt+0x4a9c>
   15908:	cmp	r1, #0
   1590c:	movlt	r1, #-2147483648	; 0x80000000
   15910:	movlt	r0, #0
   15914:	blt	15924 <__assert_fail@plt+0x4a98>
   15918:	cmpeq	r0, #0
   1591c:	mvnne	r1, #-2147483648	; 0x80000000
   15920:	mvnne	r0, #0
   15924:	b	159d0 <__assert_fail@plt+0x4b44>
   15928:	sub	sp, sp, #8
   1592c:	push	{sp, lr}
   15930:	cmp	r1, #0
   15934:	blt	15954 <__assert_fail@plt+0x4ac8>
   15938:	cmp	r3, #0
   1593c:	blt	15988 <__assert_fail@plt+0x4afc>
   15940:	bl	159e0 <__assert_fail@plt+0x4b54>
   15944:	ldr	lr, [sp, #4]
   15948:	add	sp, sp, #8
   1594c:	pop	{r2, r3}
   15950:	bx	lr
   15954:	rsbs	r0, r0, #0
   15958:	sbc	r1, r1, r1, lsl #1
   1595c:	cmp	r3, #0
   15960:	blt	159ac <__assert_fail@plt+0x4b20>
   15964:	bl	159e0 <__assert_fail@plt+0x4b54>
   15968:	ldr	lr, [sp, #4]
   1596c:	add	sp, sp, #8
   15970:	pop	{r2, r3}
   15974:	rsbs	r0, r0, #0
   15978:	sbc	r1, r1, r1, lsl #1
   1597c:	rsbs	r2, r2, #0
   15980:	sbc	r3, r3, r3, lsl #1
   15984:	bx	lr
   15988:	rsbs	r2, r2, #0
   1598c:	sbc	r3, r3, r3, lsl #1
   15990:	bl	159e0 <__assert_fail@plt+0x4b54>
   15994:	ldr	lr, [sp, #4]
   15998:	add	sp, sp, #8
   1599c:	pop	{r2, r3}
   159a0:	rsbs	r0, r0, #0
   159a4:	sbc	r1, r1, r1, lsl #1
   159a8:	bx	lr
   159ac:	rsbs	r2, r2, #0
   159b0:	sbc	r3, r3, r3, lsl #1
   159b4:	bl	159e0 <__assert_fail@plt+0x4b54>
   159b8:	ldr	lr, [sp, #4]
   159bc:	add	sp, sp, #8
   159c0:	pop	{r2, r3}
   159c4:	rsbs	r2, r2, #0
   159c8:	sbc	r3, r3, r3, lsl #1
   159cc:	bx	lr
   159d0:	push	{r1, lr}
   159d4:	mov	r0, #8
   159d8:	bl	10c4c <raise@plt>
   159dc:	pop	{r1, pc}
   159e0:	cmp	r1, r3
   159e4:	push	{r4, r5, r6, r7, r8, r9, lr}
   159e8:	cmpeq	r0, r2
   159ec:	mov	r4, r0
   159f0:	mov	r5, r1
   159f4:	ldr	r9, [sp, #28]
   159f8:	movcc	r0, #0
   159fc:	movcc	r1, #0
   15a00:	bcc	15af8 <__assert_fail@plt+0x4c6c>
   15a04:	cmp	r3, #0
   15a08:	clzeq	ip, r2
   15a0c:	clzne	ip, r3
   15a10:	addeq	ip, ip, #32
   15a14:	cmp	r5, #0
   15a18:	clzeq	r1, r4
   15a1c:	addeq	r1, r1, #32
   15a20:	clzne	r1, r5
   15a24:	sub	ip, ip, r1
   15a28:	sub	lr, ip, #32
   15a2c:	lsl	r7, r3, ip
   15a30:	rsb	r8, ip, #32
   15a34:	orr	r7, r7, r2, lsl lr
   15a38:	orr	r7, r7, r2, lsr r8
   15a3c:	lsl	r6, r2, ip
   15a40:	cmp	r5, r7
   15a44:	cmpeq	r4, r6
   15a48:	movcc	r0, #0
   15a4c:	movcc	r1, #0
   15a50:	bcc	15a6c <__assert_fail@plt+0x4be0>
   15a54:	mov	r3, #1
   15a58:	subs	r4, r4, r6
   15a5c:	lsl	r1, r3, lr
   15a60:	lsl	r0, r3, ip
   15a64:	orr	r1, r1, r3, lsr r8
   15a68:	sbc	r5, r5, r7
   15a6c:	cmp	ip, #0
   15a70:	beq	15af8 <__assert_fail@plt+0x4c6c>
   15a74:	lsrs	r3, r7, #1
   15a78:	rrx	r2, r6
   15a7c:	mov	r6, ip
   15a80:	b	15aa4 <__assert_fail@plt+0x4c18>
   15a84:	subs	r4, r4, r2
   15a88:	sbc	r5, r5, r3
   15a8c:	adds	r4, r4, r4
   15a90:	adc	r5, r5, r5
   15a94:	adds	r4, r4, #1
   15a98:	adc	r5, r5, #0
   15a9c:	subs	r6, r6, #1
   15aa0:	beq	15ac0 <__assert_fail@plt+0x4c34>
   15aa4:	cmp	r5, r3
   15aa8:	cmpeq	r4, r2
   15aac:	bcs	15a84 <__assert_fail@plt+0x4bf8>
   15ab0:	adds	r4, r4, r4
   15ab4:	adc	r5, r5, r5
   15ab8:	subs	r6, r6, #1
   15abc:	bne	15aa4 <__assert_fail@plt+0x4c18>
   15ac0:	lsr	r6, r4, ip
   15ac4:	lsr	r7, r5, ip
   15ac8:	orr	r6, r6, r5, lsl r8
   15acc:	adds	r2, r0, r4
   15ad0:	orr	r6, r6, r5, lsr lr
   15ad4:	adc	r3, r1, r5
   15ad8:	lsl	r1, r7, ip
   15adc:	orr	r1, r1, r6, lsl lr
   15ae0:	lsl	r0, r6, ip
   15ae4:	orr	r1, r1, r6, lsr r8
   15ae8:	subs	r0, r2, r0
   15aec:	mov	r4, r6
   15af0:	mov	r5, r7
   15af4:	sbc	r1, r3, r1
   15af8:	cmp	r9, #0
   15afc:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   15b00:	strd	r4, [r9]
   15b04:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15b08:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15b0c:	mov	r7, r0
   15b10:	ldr	r6, [pc, #72]	; 15b60 <__assert_fail@plt+0x4cd4>
   15b14:	ldr	r5, [pc, #72]	; 15b64 <__assert_fail@plt+0x4cd8>
   15b18:	add	r6, pc, r6
   15b1c:	add	r5, pc, r5
   15b20:	sub	r6, r6, r5
   15b24:	mov	r8, r1
   15b28:	mov	r9, r2
   15b2c:	bl	10c14 <calloc@plt-0x20>
   15b30:	asrs	r6, r6, #2
   15b34:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15b38:	mov	r4, #0
   15b3c:	add	r4, r4, #1
   15b40:	ldr	r3, [r5], #4
   15b44:	mov	r2, r9
   15b48:	mov	r1, r8
   15b4c:	mov	r0, r7
   15b50:	blx	r3
   15b54:	cmp	r6, r4
   15b58:	bne	15b3c <__assert_fail@plt+0x4cb0>
   15b5c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15b60:	strdeq	r1, [r1], -r0
   15b64:	andeq	r1, r1, r8, ror #7
   15b68:	bx	lr
   15b6c:	ldr	r3, [pc, #12]	; 15b80 <__assert_fail@plt+0x4cf4>
   15b70:	mov	r1, #0
   15b74:	add	r3, pc, r3
   15b78:	ldr	r2, [r3]
   15b7c:	b	10dcc <__cxa_atexit@plt>
   15b80:	andeq	r1, r1, r4, ror #10

Disassembly of section .fini:

00015b84 <.fini>:
   15b84:	push	{r3, lr}
   15b88:	pop	{r3, pc}
