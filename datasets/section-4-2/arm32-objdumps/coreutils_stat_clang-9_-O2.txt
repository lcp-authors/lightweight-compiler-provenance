
../repos/coreutils/src/stat:     file format elf32-littlearm


Disassembly of section .init:

0001164c <.init>:
   1164c:	push	{r3, lr}
   11650:	bl	11adc <__assert_fail@plt+0x50>
   11654:	pop	{r3, pc}

Disassembly of section .plt:

00011658 <calloc@plt-0x14>:
   11658:	push	{lr}		; (str lr, [sp, #-4]!)
   1165c:	ldr	lr, [pc, #4]	; 11668 <calloc@plt-0x4>
   11660:	add	lr, pc, lr
   11664:	ldr	pc, [lr, #8]!
   11668:	muleq	r2, r8, r9

0001166c <calloc@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #139264	; 0x22000
   11674:	ldr	pc, [ip, #2456]!	; 0x998

00011678 <fputs_unlocked@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #139264	; 0x22000
   11680:	ldr	pc, [ip, #2448]!	; 0x990

00011684 <raise@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #139264	; 0x22000
   1168c:	ldr	pc, [ip, #2440]!	; 0x988

00011690 <gmtime_r@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #139264	; 0x22000
   11698:	ldr	pc, [ip, #2432]!	; 0x980

0001169c <__getdelim@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #139264	; 0x22000
   116a4:	ldr	pc, [ip, #2424]!	; 0x978

000116a8 <is_selinux_enabled@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #139264	; 0x22000
   116b0:	ldr	pc, [ip, #2416]!	; 0x970

000116b4 <strcmp@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #139264	; 0x22000
   116bc:	ldr	pc, [ip, #2408]!	; 0x968

000116c0 <strtol@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #139264	; 0x22000
   116c8:	ldr	pc, [ip, #2400]!	; 0x960

000116cc <getpwuid@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #139264	; 0x22000
   116d4:	ldr	pc, [ip, #2392]!	; 0x958

000116d8 <mktime@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #139264	; 0x22000
   116e0:	ldr	pc, [ip, #2384]!	; 0x950

000116e4 <fflush@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #139264	; 0x22000
   116ec:	ldr	pc, [ip, #2376]!	; 0x948

000116f0 <free@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #139264	; 0x22000
   116f8:	ldr	pc, [ip, #2368]!	; 0x940

000116fc <_exit@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #139264	; 0x22000
   11704:	ldr	pc, [ip, #2360]!	; 0x938

00011708 <memcpy@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #139264	; 0x22000
   11710:	ldr	pc, [ip, #2352]!	; 0x930

00011714 <mbsinit@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #139264	; 0x22000
   1171c:	ldr	pc, [ip, #2344]!	; 0x928

00011720 <dcgettext@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #139264	; 0x22000
   11728:	ldr	pc, [ip, #2336]!	; 0x920

0001172c <realloc@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #139264	; 0x22000
   11734:	ldr	pc, [ip, #2328]!	; 0x918

00011738 <fgetfilecon@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #139264	; 0x22000
   11740:	ldr	pc, [ip, #2320]!	; 0x910

00011744 <localtime_r@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #139264	; 0x22000
   1174c:	ldr	pc, [ip, #2312]!	; 0x908

00011750 <textdomain@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #139264	; 0x22000
   11758:	ldr	pc, [ip, #2304]!	; 0x900

0001175c <chdir@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #139264	; 0x22000
   11764:	ldr	pc, [ip, #2296]!	; 0x8f8

00011768 <iswprint@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #139264	; 0x22000
   11770:	ldr	pc, [ip, #2288]!	; 0x8f0

00011774 <tzset@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #139264	; 0x22000
   1177c:	ldr	pc, [ip, #2280]!	; 0x8e8

00011780 <readlink@plt>:
   11780:	add	ip, pc, #0, 12
   11784:	add	ip, ip, #139264	; 0x22000
   11788:	ldr	pc, [ip, #2272]!	; 0x8e0

0001178c <fwrite@plt>:
   1178c:	add	ip, pc, #0, 12
   11790:	add	ip, ip, #139264	; 0x22000
   11794:	ldr	pc, [ip, #2264]!	; 0x8d8

00011798 <lseek64@plt>:
   11798:	add	ip, pc, #0, 12
   1179c:	add	ip, ip, #139264	; 0x22000
   117a0:	ldr	pc, [ip, #2256]!	; 0x8d0

000117a4 <__ctype_get_mb_cur_max@plt>:
   117a4:	add	ip, pc, #0, 12
   117a8:	add	ip, ip, #139264	; 0x22000
   117ac:	ldr	pc, [ip, #2248]!	; 0x8c8

000117b0 <hasmntopt@plt>:
   117b0:	add	ip, pc, #0, 12
   117b4:	add	ip, ip, #139264	; 0x22000
   117b8:	ldr	pc, [ip, #2240]!	; 0x8c0

000117bc <__fpending@plt>:
   117bc:	add	ip, pc, #0, 12
   117c0:	add	ip, ip, #139264	; 0x22000
   117c4:	ldr	pc, [ip, #2232]!	; 0x8b8

000117c8 <mbrtowc@plt>:
   117c8:	add	ip, pc, #0, 12
   117cc:	add	ip, ip, #139264	; 0x22000
   117d0:	ldr	pc, [ip, #2224]!	; 0x8b0

000117d4 <error@plt>:
   117d4:	add	ip, pc, #0, 12
   117d8:	add	ip, ip, #139264	; 0x22000
   117dc:	ldr	pc, [ip, #2216]!	; 0x8a8

000117e0 <getmntent@plt>:
   117e0:	add	ip, pc, #0, 12
   117e4:	add	ip, ip, #139264	; 0x22000
   117e8:	ldr	pc, [ip, #2208]!	; 0x8a0

000117ec <open64@plt>:
   117ec:	add	ip, pc, #0, 12
   117f0:	add	ip, ip, #139264	; 0x22000
   117f4:	ldr	pc, [ip, #2200]!	; 0x898

000117f8 <getenv@plt>:
   117f8:	add	ip, pc, #0, 12
   117fc:	add	ip, ip, #139264	; 0x22000
   11800:	ldr	pc, [ip, #2192]!	; 0x890

00011804 <lgetfilecon@plt>:
   11804:	add	ip, pc, #0, 12
   11808:	add	ip, ip, #139264	; 0x22000
   1180c:	ldr	pc, [ip, #2184]!	; 0x888

00011810 <malloc@plt>:
   11810:	add	ip, pc, #0, 12
   11814:	add	ip, ip, #139264	; 0x22000
   11818:	ldr	pc, [ip, #2176]!	; 0x880

0001181c <__libc_start_main@plt>:
   1181c:	add	ip, pc, #0, 12
   11820:	add	ip, ip, #139264	; 0x22000
   11824:	ldr	pc, [ip, #2168]!	; 0x878

00011828 <strftime@plt>:
   11828:	add	ip, pc, #0, 12
   1182c:	add	ip, ip, #139264	; 0x22000
   11830:	ldr	pc, [ip, #2160]!	; 0x870

00011834 <__freading@plt>:
   11834:	add	ip, pc, #0, 12
   11838:	add	ip, ip, #139264	; 0x22000
   1183c:	ldr	pc, [ip, #2152]!	; 0x868

00011840 <__ctype_tolower_loc@plt>:
   11840:	add	ip, pc, #0, 12
   11844:	add	ip, ip, #139264	; 0x22000
   11848:	ldr	pc, [ip, #2144]!	; 0x860

0001184c <__ctype_toupper_loc@plt>:
   1184c:	add	ip, pc, #0, 12
   11850:	add	ip, ip, #139264	; 0x22000
   11854:	ldr	pc, [ip, #2136]!	; 0x858

00011858 <__gmon_start__@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #139264	; 0x22000
   11860:	ldr	pc, [ip, #2128]!	; 0x850

00011864 <getopt_long@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #139264	; 0x22000
   1186c:	ldr	pc, [ip, #2120]!	; 0x848

00011870 <__ctype_b_loc@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #139264	; 0x22000
   11878:	ldr	pc, [ip, #2112]!	; 0x840

0001187c <getcwd@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #139264	; 0x22000
   11884:	ldr	pc, [ip, #2104]!	; 0x838

00011888 <exit@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #139264	; 0x22000
   11890:	ldr	pc, [ip, #2096]!	; 0x830

00011894 <getfilecon@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #139264	; 0x22000
   1189c:	ldr	pc, [ip, #2088]!	; 0x828

000118a0 <bcmp@plt>:
   118a0:	add	ip, pc, #0, 12
   118a4:	add	ip, ip, #139264	; 0x22000
   118a8:	ldr	pc, [ip, #2080]!	; 0x820

000118ac <strlen@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #139264	; 0x22000
   118b4:	ldr	pc, [ip, #2072]!	; 0x818

000118b8 <strchr@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #139264	; 0x22000
   118c0:	ldr	pc, [ip, #2064]!	; 0x810

000118c4 <setenv@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #139264	; 0x22000
   118cc:	ldr	pc, [ip, #2056]!	; 0x808

000118d0 <openat64@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #139264	; 0x22000
   118d8:	ldr	pc, [ip, #2048]!	; 0x800

000118dc <memrchr@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #139264	; 0x22000
   118e4:	ldr	pc, [ip, #2040]!	; 0x7f8

000118e8 <__errno_location@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #139264	; 0x22000
   118f0:	ldr	pc, [ip, #2032]!	; 0x7f0

000118f4 <__sprintf_chk@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #139264	; 0x22000
   118fc:	ldr	pc, [ip, #2024]!	; 0x7e8

00011900 <__cxa_atexit@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #139264	; 0x22000
   11908:	ldr	pc, [ip, #2016]!	; 0x7e0

0001190c <__vasprintf_chk@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #139264	; 0x22000
   11914:	ldr	pc, [ip, #2008]!	; 0x7d8

00011918 <memset@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #139264	; 0x22000
   11920:	ldr	pc, [ip, #2000]!	; 0x7d0

00011924 <__printf_chk@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #139264	; 0x22000
   1192c:	ldr	pc, [ip, #1992]!	; 0x7c8

00011930 <fileno@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #139264	; 0x22000
   11938:	ldr	pc, [ip, #1984]!	; 0x7c0

0001193c <__fprintf_chk@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #139264	; 0x22000
   11944:	ldr	pc, [ip, #1976]!	; 0x7b8

00011948 <memchr@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #139264	; 0x22000
   11950:	ldr	pc, [ip, #1968]!	; 0x7b0

00011954 <fclose@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #139264	; 0x22000
   1195c:	ldr	pc, [ip, #1960]!	; 0x7a8

00011960 <fseeko64@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #139264	; 0x22000
   11968:	ldr	pc, [ip, #1952]!	; 0x7a0

0001196c <statx@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #139264	; 0x22000
   11974:	ldr	pc, [ip, #1944]!	; 0x798

00011978 <endmntent@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #139264	; 0x22000
   11980:	ldr	pc, [ip, #1936]!	; 0x790

00011984 <fcntl64@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #139264	; 0x22000
   1198c:	ldr	pc, [ip, #1928]!	; 0x788

00011990 <__overflow@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #139264	; 0x22000
   11998:	ldr	pc, [ip, #1920]!	; 0x780

0001199c <setlocale@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #139264	; 0x22000
   119a4:	ldr	pc, [ip, #1912]!	; 0x778

000119a8 <strrchr@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #139264	; 0x22000
   119b0:	ldr	pc, [ip, #1904]!	; 0x770

000119b4 <statfs64@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #139264	; 0x22000
   119bc:	ldr	pc, [ip, #1896]!	; 0x768

000119c0 <nl_langinfo@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #139264	; 0x22000
   119c8:	ldr	pc, [ip, #1888]!	; 0x760

000119cc <sscanf@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #139264	; 0x22000
   119d4:	ldr	pc, [ip, #1880]!	; 0x758

000119d8 <localeconv@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #139264	; 0x22000
   119e0:	ldr	pc, [ip, #1872]!	; 0x750

000119e4 <timegm@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #139264	; 0x22000
   119ec:	ldr	pc, [ip, #1864]!	; 0x748

000119f0 <fchdir@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #139264	; 0x22000
   119f8:	ldr	pc, [ip, #1856]!	; 0x740

000119fc <canonicalize_file_name@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #139264	; 0x22000
   11a04:	ldr	pc, [ip, #1848]!	; 0x738

00011a08 <fopen64@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #139264	; 0x22000
   11a10:	ldr	pc, [ip, #1840]!	; 0x730

00011a14 <freecon@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #139264	; 0x22000
   11a1c:	ldr	pc, [ip, #1832]!	; 0x728

00011a20 <setmntent@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #139264	; 0x22000
   11a28:	ldr	pc, [ip, #1824]!	; 0x720

00011a2c <bindtextdomain@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #139264	; 0x22000
   11a34:	ldr	pc, [ip, #1816]!	; 0x718

00011a38 <__xstat64@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #139264	; 0x22000
   11a40:	ldr	pc, [ip, #1808]!	; 0x710

00011a44 <unsetenv@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #139264	; 0x22000
   11a4c:	ldr	pc, [ip, #1800]!	; 0x708

00011a50 <strncmp@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #139264	; 0x22000
   11a58:	ldr	pc, [ip, #1792]!	; 0x700

00011a5c <abort@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #139264	; 0x22000
   11a64:	ldr	pc, [ip, #1784]!	; 0x6f8

00011a68 <close@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #139264	; 0x22000
   11a70:	ldr	pc, [ip, #1776]!	; 0x6f0

00011a74 <getgrgid@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #139264	; 0x22000
   11a7c:	ldr	pc, [ip, #1768]!	; 0x6e8

00011a80 <strspn@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #139264	; 0x22000
   11a88:	ldr	pc, [ip, #1760]!	; 0x6e0

00011a8c <__assert_fail@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #139264	; 0x22000
   11a94:	ldr	pc, [ip, #1752]!	; 0x6d8

Disassembly of section .text:

00011aa0 <.text>:
   11aa0:	mov	fp, #0
   11aa4:	mov	lr, #0
   11aa8:	pop	{r1}		; (ldr r1, [sp], #4)
   11aac:	mov	r2, sp
   11ab0:	push	{r2}		; (str r2, [sp, #-4]!)
   11ab4:	push	{r0}		; (str r0, [sp, #-4]!)
   11ab8:	ldr	ip, [pc, #16]	; 11ad0 <__assert_fail@plt+0x44>
   11abc:	push	{ip}		; (str ip, [sp, #-4]!)
   11ac0:	ldr	r0, [pc, #12]	; 11ad4 <__assert_fail@plt+0x48>
   11ac4:	ldr	r3, [pc, #12]	; 11ad8 <__assert_fail@plt+0x4c>
   11ac8:	bl	1181c <__libc_start_main@plt>
   11acc:	bl	11a5c <abort@plt>
   11ad0:	ldrdeq	r1, [r2], -r4
   11ad4:	andeq	r1, r1, ip, ror pc
   11ad8:	andeq	r1, r2, r4, ror lr
   11adc:	ldr	r3, [pc, #20]	; 11af8 <__assert_fail@plt+0x6c>
   11ae0:	ldr	r2, [pc, #20]	; 11afc <__assert_fail@plt+0x70>
   11ae4:	add	r3, pc, r3
   11ae8:	ldr	r2, [r3, r2]
   11aec:	cmp	r2, #0
   11af0:	bxeq	lr
   11af4:	b	11858 <__gmon_start__@plt>
   11af8:	andeq	r2, r2, r4, lsl r5
   11afc:	andeq	r0, r0, r0, ror r1
   11b00:	ldr	r0, [pc, #24]	; 11b20 <__assert_fail@plt+0x94>
   11b04:	ldr	r3, [pc, #24]	; 11b24 <__assert_fail@plt+0x98>
   11b08:	cmp	r3, r0
   11b0c:	bxeq	lr
   11b10:	ldr	r3, [pc, #16]	; 11b28 <__assert_fail@plt+0x9c>
   11b14:	cmp	r3, #0
   11b18:	bxeq	lr
   11b1c:	bx	r3
   11b20:	ldrdeq	r4, [r3], -r0
   11b24:	ldrdeq	r4, [r3], -r0
   11b28:	andeq	r0, r0, r0
   11b2c:	ldr	r0, [pc, #36]	; 11b58 <__assert_fail@plt+0xcc>
   11b30:	ldr	r1, [pc, #36]	; 11b5c <__assert_fail@plt+0xd0>
   11b34:	sub	r1, r1, r0
   11b38:	asr	r1, r1, #2
   11b3c:	add	r1, r1, r1, lsr #31
   11b40:	asrs	r1, r1, #1
   11b44:	bxeq	lr
   11b48:	ldr	r3, [pc, #16]	; 11b60 <__assert_fail@plt+0xd4>
   11b4c:	cmp	r3, #0
   11b50:	bxeq	lr
   11b54:	bx	r3
   11b58:	ldrdeq	r4, [r3], -r0
   11b5c:	ldrdeq	r4, [r3], -r0
   11b60:	andeq	r0, r0, r0
   11b64:	push	{r4, lr}
   11b68:	ldr	r4, [pc, #24]	; 11b88 <__assert_fail@plt+0xfc>
   11b6c:	ldrb	r3, [r4]
   11b70:	cmp	r3, #0
   11b74:	popne	{r4, pc}
   11b78:	bl	11b00 <__assert_fail@plt+0x74>
   11b7c:	mov	r3, #1
   11b80:	strb	r3, [r4]
   11b84:	pop	{r4, pc}
   11b88:	andeq	r4, r3, ip, ror #3
   11b8c:	b	11b2c <__assert_fail@plt+0xa0>
   11b90:	push	{fp, lr}
   11b94:	mov	fp, sp
   11b98:	sub	sp, sp, #56	; 0x38
   11b9c:	mov	r4, r0
   11ba0:	cmp	r0, #0
   11ba4:	bne	11f38 <__assert_fail@plt+0x4ac>
   11ba8:	movw	r1, #7971	; 0x1f23
   11bac:	mov	r0, #0
   11bb0:	mov	r2, #5
   11bb4:	movt	r1, #2
   11bb8:	bl	11720 <dcgettext@plt>
   11bbc:	mov	r1, r0
   11bc0:	movw	r0, #17008	; 0x4270
   11bc4:	movt	r0, #3
   11bc8:	ldr	r2, [r0]
   11bcc:	mov	r0, #1
   11bd0:	bl	11924 <__printf_chk@plt>
   11bd4:	movw	r1, #8002	; 0x1f42
   11bd8:	mov	r0, #0
   11bdc:	mov	r2, #5
   11be0:	movt	r1, #2
   11be4:	bl	11720 <dcgettext@plt>
   11be8:	movw	r7, #16868	; 0x41e4
   11bec:	movt	r7, #3
   11bf0:	ldr	r1, [r7]
   11bf4:	bl	11678 <fputs_unlocked@plt>
   11bf8:	movw	r1, #11583	; 0x2d3f
   11bfc:	mov	r0, #0
   11c00:	mov	r2, #5
   11c04:	movt	r1, #2
   11c08:	bl	11720 <dcgettext@plt>
   11c0c:	ldr	r1, [r7]
   11c10:	bl	11678 <fputs_unlocked@plt>
   11c14:	movw	r1, #8039	; 0x1f67
   11c18:	mov	r0, #0
   11c1c:	mov	r2, #5
   11c20:	movt	r1, #2
   11c24:	bl	11720 <dcgettext@plt>
   11c28:	ldr	r1, [r7]
   11c2c:	bl	11678 <fputs_unlocked@plt>
   11c30:	movw	r1, #8151	; 0x1fd7
   11c34:	mov	r0, #0
   11c38:	mov	r2, #5
   11c3c:	movt	r1, #2
   11c40:	bl	11720 <dcgettext@plt>
   11c44:	ldr	r1, [r7]
   11c48:	bl	11678 <fputs_unlocked@plt>
   11c4c:	movw	r1, #8286	; 0x205e
   11c50:	mov	r0, #0
   11c54:	mov	r2, #5
   11c58:	movt	r1, #2
   11c5c:	bl	11720 <dcgettext@plt>
   11c60:	ldr	r1, [r7]
   11c64:	bl	11678 <fputs_unlocked@plt>
   11c68:	movw	r1, #8704	; 0x2200
   11c6c:	mov	r0, #0
   11c70:	mov	r2, #5
   11c74:	movt	r1, #2
   11c78:	bl	11720 <dcgettext@plt>
   11c7c:	ldr	r1, [r7]
   11c80:	bl	11678 <fputs_unlocked@plt>
   11c84:	movw	r1, #8749	; 0x222d
   11c88:	mov	r0, #0
   11c8c:	mov	r2, #5
   11c90:	movt	r1, #2
   11c94:	bl	11720 <dcgettext@plt>
   11c98:	ldr	r1, [r7]
   11c9c:	bl	11678 <fputs_unlocked@plt>
   11ca0:	movw	r1, #8803	; 0x2263
   11ca4:	mov	r0, #0
   11ca8:	mov	r2, #5
   11cac:	movt	r1, #2
   11cb0:	bl	11720 <dcgettext@plt>
   11cb4:	ldr	r1, [r7]
   11cb8:	bl	11678 <fputs_unlocked@plt>
   11cbc:	movw	r1, #9048	; 0x2358
   11cc0:	mov	r0, #0
   11cc4:	mov	r2, #5
   11cc8:	movt	r1, #2
   11ccc:	bl	11720 <dcgettext@plt>
   11cd0:	ldr	r1, [r7]
   11cd4:	bl	11678 <fputs_unlocked@plt>
   11cd8:	movw	r1, #9373	; 0x249d
   11cdc:	mov	r0, #0
   11ce0:	mov	r2, #5
   11ce4:	movt	r1, #2
   11ce8:	bl	11720 <dcgettext@plt>
   11cec:	ldr	r1, [r7]
   11cf0:	bl	11678 <fputs_unlocked@plt>
   11cf4:	movw	r1, #9620	; 0x2594
   11cf8:	mov	r0, #0
   11cfc:	mov	r2, #5
   11d00:	movt	r1, #2
   11d04:	bl	11720 <dcgettext@plt>
   11d08:	ldr	r1, [r7]
   11d0c:	bl	11678 <fputs_unlocked@plt>
   11d10:	movw	r1, #10209	; 0x27e1
   11d14:	mov	r0, #0
   11d18:	mov	r2, #5
   11d1c:	movt	r1, #2
   11d20:	bl	11720 <dcgettext@plt>
   11d24:	ldr	r1, [r7]
   11d28:	bl	11678 <fputs_unlocked@plt>
   11d2c:	movw	r1, #10687	; 0x29bf
   11d30:	mov	r0, #0
   11d34:	mov	r2, #5
   11d38:	movt	r1, #2
   11d3c:	bl	11720 <dcgettext@plt>
   11d40:	ldr	r1, [r7]
   11d44:	bl	11678 <fputs_unlocked@plt>
   11d48:	movw	r1, #10927	; 0x2aaf
   11d4c:	mov	r0, #0
   11d50:	mov	r2, #5
   11d54:	movt	r1, #2
   11d58:	bl	11720 <dcgettext@plt>
   11d5c:	ldr	r1, [r7]
   11d60:	bl	11678 <fputs_unlocked@plt>
   11d64:	movw	r1, #11177	; 0x2ba9
   11d68:	mov	r0, #0
   11d6c:	mov	r2, #5
   11d70:	movt	r1, #2
   11d74:	bl	11720 <dcgettext@plt>
   11d78:	movw	r2, #13888	; 0x3640
   11d7c:	mov	r1, r0
   11d80:	mov	r0, #1
   11d84:	movt	r2, #2
   11d88:	bl	11924 <__printf_chk@plt>
   11d8c:	movw	r1, #11232	; 0x2be0
   11d90:	mov	r0, #0
   11d94:	mov	r2, #5
   11d98:	movt	r1, #2
   11d9c:	bl	11720 <dcgettext@plt>
   11da0:	movw	r2, #13940	; 0x3674
   11da4:	mov	r1, r0
   11da8:	mov	r0, #1
   11dac:	movt	r2, #2
   11db0:	bl	11924 <__printf_chk@plt>
   11db4:	movw	r1, #11300	; 0x2c24
   11db8:	mov	r0, #0
   11dbc:	mov	r2, #5
   11dc0:	movt	r1, #2
   11dc4:	bl	11720 <dcgettext@plt>
   11dc8:	movw	r5, #11491	; 0x2ce3
   11dcc:	mov	r1, r0
   11dd0:	mov	r0, #1
   11dd4:	movt	r5, #2
   11dd8:	mov	r2, r5
   11ddc:	bl	11924 <__printf_chk@plt>
   11de0:	movw	r0, #14152	; 0x3748
   11de4:	mov	r2, #48	; 0x30
   11de8:	mov	r6, sp
   11dec:	movt	r0, #2
   11df0:	add	r1, r0, #32
   11df4:	add	r3, r0, #16
   11df8:	vld1.64	{d18-d19}, [r0], r2
   11dfc:	vld1.64	{d16-d17}, [r1]
   11e00:	vld1.64	{d20-d21}, [r3]
   11e04:	vldr	d22, [r0]
   11e08:	add	r1, r6, #32
   11e0c:	add	r0, r6, #16
   11e10:	vst1.64	{d16-d17}, [r1]
   11e14:	movw	r1, #11658	; 0x2d8a
   11e18:	vst1.64	{d20-d21}, [r0]
   11e1c:	mov	r0, r6
   11e20:	movt	r1, #2
   11e24:	vst1.64	{d18-d19}, [r0], r2
   11e28:	vstr	d22, [r0]
   11e2c:	mov	r0, r5
   11e30:	bl	116b4 <strcmp@plt>
   11e34:	cmp	r0, #0
   11e38:	ldrne	r1, [r6, #8]!
   11e3c:	cmpne	r1, #0
   11e40:	bne	11e2c <__assert_fail@plt+0x3a0>
   11e44:	movw	r1, #11753	; 0x2de9
   11e48:	ldr	r6, [r6, #4]
   11e4c:	mov	r0, #0
   11e50:	mov	r2, #5
   11e54:	movt	r1, #2
   11e58:	bl	11720 <dcgettext@plt>
   11e5c:	movw	r2, #11535	; 0x2d0f
   11e60:	movw	r3, #11776	; 0x2e00
   11e64:	mov	r1, r0
   11e68:	mov	r0, #1
   11e6c:	movt	r2, #2
   11e70:	movt	r3, #2
   11e74:	bl	11924 <__printf_chk@plt>
   11e78:	cmp	r6, #0
   11e7c:	mov	r0, #5
   11e80:	mov	r1, #0
   11e84:	moveq	r6, r5
   11e88:	bl	1199c <setlocale@plt>
   11e8c:	cmp	r0, #0
   11e90:	beq	11ec8 <__assert_fail@plt+0x43c>
   11e94:	movw	r1, #11816	; 0x2e28
   11e98:	mov	r2, #3
   11e9c:	movt	r1, #2
   11ea0:	bl	11a50 <strncmp@plt>
   11ea4:	cmp	r0, #0
   11ea8:	beq	11ec8 <__assert_fail@plt+0x43c>
   11eac:	movw	r1, #11820	; 0x2e2c
   11eb0:	mov	r0, #0
   11eb4:	mov	r2, #5
   11eb8:	movt	r1, #2
   11ebc:	bl	11720 <dcgettext@plt>
   11ec0:	ldr	r1, [r7]
   11ec4:	bl	11678 <fputs_unlocked@plt>
   11ec8:	movw	r1, #11891	; 0x2e73
   11ecc:	mov	r0, #0
   11ed0:	mov	r2, #5
   11ed4:	movt	r1, #2
   11ed8:	bl	11720 <dcgettext@plt>
   11edc:	movw	r2, #11776	; 0x2e00
   11ee0:	mov	r1, r0
   11ee4:	mov	r0, #1
   11ee8:	mov	r3, r5
   11eec:	movt	r2, #2
   11ef0:	bl	11924 <__printf_chk@plt>
   11ef4:	movw	r1, #11918	; 0x2e8e
   11ef8:	mov	r0, #0
   11efc:	mov	r2, #5
   11f00:	movt	r1, #2
   11f04:	bl	11720 <dcgettext@plt>
   11f08:	mov	r1, r0
   11f0c:	movw	r0, #11686	; 0x2da6
   11f10:	movw	r3, #10686	; 0x29be
   11f14:	cmp	r6, r5
   11f18:	mov	r2, r6
   11f1c:	movt	r0, #2
   11f20:	movt	r3, #2
   11f24:	moveq	r3, r0
   11f28:	mov	r0, #1
   11f2c:	bl	11924 <__printf_chk@plt>
   11f30:	mov	r0, r4
   11f34:	bl	11888 <exit@plt>
   11f38:	movw	r0, #16864	; 0x41e0
   11f3c:	movw	r1, #7932	; 0x1efc
   11f40:	mov	r2, #5
   11f44:	movt	r0, #3
   11f48:	movt	r1, #2
   11f4c:	ldr	r5, [r0]
   11f50:	mov	r0, #0
   11f54:	bl	11720 <dcgettext@plt>
   11f58:	mov	r2, r0
   11f5c:	movw	r0, #17008	; 0x4270
   11f60:	mov	r1, #1
   11f64:	movt	r0, #3
   11f68:	ldr	r3, [r0]
   11f6c:	mov	r0, r5
   11f70:	bl	1193c <__fprintf_chk@plt>
   11f74:	mov	r0, r4
   11f78:	bl	11888 <exit@plt>
   11f7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f80:	add	fp, sp, #28
   11f84:	sub	sp, sp, #492	; 0x1ec
   11f88:	str	r0, [sp, #112]	; 0x70
   11f8c:	ldr	r0, [r1]
   11f90:	str	r1, [sp, #108]	; 0x6c
   11f94:	bl	1d2d0 <__assert_fail@plt+0xb844>
   11f98:	movw	r1, #10686	; 0x29be
   11f9c:	mov	r0, #6
   11fa0:	movt	r1, #2
   11fa4:	bl	1199c <setlocale@plt>
   11fa8:	movw	r4, #11539	; 0x2d13
   11fac:	movw	r1, #11496	; 0x2ce8
   11fb0:	movt	r4, #2
   11fb4:	movt	r1, #2
   11fb8:	mov	r0, r4
   11fbc:	bl	11a2c <bindtextdomain@plt>
   11fc0:	mov	r0, r4
   11fc4:	bl	11750 <textdomain@plt>
   11fc8:	bl	119d8 <localeconv@plt>
   11fcc:	ldr	r1, [r0]
   11fd0:	movw	r0, #14375	; 0x3827
   11fd4:	movt	r0, #2
   11fd8:	ldrb	r2, [r1]
   11fdc:	cmp	r2, #0
   11fe0:	movne	r0, r1
   11fe4:	movw	r1, #16880	; 0x41f0
   11fe8:	movt	r1, #3
   11fec:	str	r0, [r1]
   11ff0:	bl	118ac <strlen@plt>
   11ff4:	movw	r1, #16884	; 0x41f4
   11ff8:	movt	r1, #3
   11ffc:	str	r0, [r1]
   12000:	movw	r0, #42216	; 0xa4e8
   12004:	movt	r0, #1
   12008:	bl	21ed8 <__assert_fail@plt+0x1044c>
   1200c:	add	r0, sp, #128	; 0x80
   12010:	movw	r5, #11520	; 0x2d00
   12014:	movw	r6, #13976	; 0x3698
   12018:	movw	r9, #16872	; 0x41e8
   1201c:	movw	r7, #16888	; 0x41f8
   12020:	mov	r4, #0
   12024:	mov	r8, #1
   12028:	mov	sl, #0
   1202c:	add	r1, r0, #32
   12030:	movt	r5, #2
   12034:	movt	r6, #2
   12038:	movt	r9, #3
   1203c:	movt	r7, #3
   12040:	str	r1, [sp, #76]	; 0x4c
   12044:	add	r1, r0, #40	; 0x28
   12048:	str	r1, [sp, #72]	; 0x48
   1204c:	add	r1, r0, #48	; 0x30
   12050:	str	r1, [sp, #68]	; 0x44
   12054:	add	r1, r0, #64	; 0x40
   12058:	str	r1, [sp, #88]	; 0x58
   1205c:	add	r1, r0, #80	; 0x50
   12060:	str	r1, [sp, #20]
   12064:	add	r1, r0, #96	; 0x60
   12068:	add	r0, r0, #112	; 0x70
   1206c:	str	r0, [sp, #80]	; 0x50
   12070:	sub	r0, fp, #136	; 0x88
   12074:	str	r1, [sp, #84]	; 0x54
   12078:	add	r1, r0, #32
   1207c:	str	r1, [sp, #64]	; 0x40
   12080:	add	r1, r0, #48	; 0x30
   12084:	str	r1, [sp, #60]	; 0x3c
   12088:	add	r1, r0, #64	; 0x40
   1208c:	str	r1, [sp, #56]	; 0x38
   12090:	add	r1, r0, #72	; 0x48
   12094:	str	r1, [sp, #52]	; 0x34
   12098:	add	r1, r0, #80	; 0x50
   1209c:	str	r1, [sp, #48]	; 0x30
   120a0:	add	r1, r0, #88	; 0x58
   120a4:	add	r0, r0, #96	; 0x60
   120a8:	str	r0, [sp, #40]	; 0x28
   120ac:	mov	r0, #0
   120b0:	str	r1, [sp, #44]	; 0x2c
   120b4:	str	r0, [sp, #100]	; 0x64
   120b8:	mov	r0, #0
   120bc:	str	r0, [sp, #104]	; 0x68
   120c0:	ldr	r0, [sp, #112]	; 0x70
   120c4:	ldr	r1, [sp, #108]	; 0x6c
   120c8:	mov	r2, r5
   120cc:	mov	r3, r6
   120d0:	str	r4, [sp]
   120d4:	bl	11864 <getopt_long@plt>
   120d8:	cmp	r0, #98	; 0x62
   120dc:	ble	12104 <__assert_fail@plt+0x678>
   120e0:	cmp	r0, #115	; 0x73
   120e4:	bgt	121ac <__assert_fail@plt+0x720>
   120e8:	cmp	r0, #99	; 0x63
   120ec:	beq	12254 <__assert_fail@plt+0x7c8>
   120f0:	cmp	r0, #102	; 0x66
   120f4:	mov	r0, #1
   120f8:	str	r0, [sp, #100]	; 0x64
   120fc:	beq	120c0 <__assert_fail@plt+0x634>
   12100:	b	12aa8 <__assert_fail@plt+0x101c>
   12104:	add	r1, r0, #3
   12108:	cmp	r1, #3
   1210c:	bhi	121bc <__assert_fail@plt+0x730>
   12110:	add	r0, pc, #0
   12114:	ldr	pc, [r0, r1, lsl #2]
   12118:	andeq	r2, r1, r8, asr sl
   1211c:	andeq	r2, r1, r0, lsr #21
   12120:	andeq	r2, r1, r4, ror r2
   12124:	andeq	r2, r1, r8, lsr #2
   12128:	movw	r0, #16776	; 0x4188
   1212c:	mov	r2, #4
   12130:	ldr	r1, [r9]
   12134:	mov	r4, r9
   12138:	movt	r0, #3
   1213c:	str	r2, [sp]
   12140:	movw	r2, #14132	; 0x3734
   12144:	movt	r2, #2
   12148:	ldr	r0, [r0]
   1214c:	stmib	sp, {r0, r8}
   12150:	movw	r8, #14120	; 0x3728
   12154:	movw	r0, #11526	; 0x2d06
   12158:	movt	r8, #2
   1215c:	movt	r0, #2
   12160:	mov	r3, r8
   12164:	bl	1a254 <__assert_fail@plt+0x87c8>
   12168:	ldr	r0, [r8, r0, lsl #2]
   1216c:	cmp	r0, #0
   12170:	beq	121d4 <__assert_fail@plt+0x748>
   12174:	cmp	r0, #2
   12178:	beq	12200 <__assert_fail@plt+0x774>
   1217c:	mov	r9, r4
   12180:	cmp	r0, #1
   12184:	mov	r8, #1
   12188:	mov	r4, #0
   1218c:	bne	120c0 <__assert_fail@plt+0x634>
   12190:	movw	r0, #16891	; 0x41fb
   12194:	movt	r0, #3
   12198:	strb	r4, [r0]
   1219c:	movw	r0, #16890	; 0x41fa
   121a0:	movt	r0, #3
   121a4:	strb	r8, [r0]
   121a8:	b	120c0 <__assert_fail@plt+0x634>
   121ac:	cmp	r0, #116	; 0x74
   121b0:	bne	1222c <__assert_fail@plt+0x7a0>
   121b4:	mov	sl, #1
   121b8:	b	120c0 <__assert_fail@plt+0x634>
   121bc:	cmp	r0, #76	; 0x4c
   121c0:	bne	12aa8 <__assert_fail@plt+0x101c>
   121c4:	movw	r0, #16889	; 0x41f9
   121c8:	movt	r0, #3
   121cc:	strb	r8, [r0]
   121d0:	b	120c0 <__assert_fail@plt+0x634>
   121d4:	movw	r0, #16891	; 0x41fb
   121d8:	mov	r1, #0
   121dc:	mov	r9, r4
   121e0:	mov	r8, #1
   121e4:	mov	r4, #0
   121e8:	movt	r0, #3
   121ec:	strb	r1, [r0]
   121f0:	movw	r0, #16890	; 0x41fa
   121f4:	movt	r0, #3
   121f8:	strb	r1, [r0]
   121fc:	b	120c0 <__assert_fail@plt+0x634>
   12200:	movw	r0, #16891	; 0x41fb
   12204:	mov	r8, #1
   12208:	mov	r1, #0
   1220c:	mov	r9, r4
   12210:	mov	r4, #0
   12214:	movt	r0, #3
   12218:	strb	r8, [r0]
   1221c:	movw	r0, #16890	; 0x41fa
   12220:	movt	r0, #3
   12224:	strb	r1, [r0]
   12228:	b	120c0 <__assert_fail@plt+0x634>
   1222c:	cmp	r0, #256	; 0x100
   12230:	bne	12aa8 <__assert_fail@plt+0x101c>
   12234:	movw	r0, #10686	; 0x29be
   12238:	movw	r1, #16768	; 0x4180
   1223c:	strb	r8, [r7]
   12240:	movt	r0, #2
   12244:	movt	r1, #3
   12248:	str	r0, [r1]
   1224c:	ldr	r0, [r9]
   12250:	b	120bc <__assert_fail@plt+0x630>
   12254:	movw	r0, #16768	; 0x4180
   12258:	movw	r1, #10685	; 0x29bd
   1225c:	strb	r4, [r7]
   12260:	movt	r0, #3
   12264:	movt	r1, #2
   12268:	str	r1, [r0]
   1226c:	ldr	r0, [r9]
   12270:	b	120bc <__assert_fail@plt+0x630>
   12274:	movw	r6, #16856	; 0x41d8
   12278:	ldr	r1, [sp, #112]	; 0x70
   1227c:	movt	r6, #3
   12280:	ldr	r0, [r6]
   12284:	cmp	r0, r1
   12288:	beq	12ab0 <__assert_fail@plt+0x1024>
   1228c:	ldr	r7, [sp, #104]	; 0x68
   12290:	add	r8, sp, #128	; 0x80
   12294:	cmp	r7, #0
   12298:	beq	122fc <__assert_fail@plt+0x870>
   1229c:	movw	r1, #11580	; 0x2d3c
   122a0:	mov	r0, r7
   122a4:	movt	r1, #2
   122a8:	bl	20600 <__assert_fail@plt+0xeb74>
   122ac:	cmp	r0, #0
   122b0:	beq	12384 <__assert_fail@plt+0x8f8>
   122b4:	movw	r0, #12033	; 0x2f01
   122b8:	movt	r0, #2
   122bc:	bl	117f8 <getenv@plt>
   122c0:	cmp	r0, #0
   122c4:	beq	12334 <__assert_fail@plt+0x8a8>
   122c8:	movw	r5, #15036	; 0x3abc
   122cc:	movw	r1, #14992	; 0x3a90
   122d0:	mov	r3, #4
   122d4:	mov	r4, r0
   122d8:	movt	r5, #2
   122dc:	movt	r1, #2
   122e0:	mov	r2, r5
   122e4:	bl	19f48 <__assert_fail@plt+0x84bc>
   122e8:	cmp	r0, #0
   122ec:	bmi	12344 <__assert_fail@plt+0x8b8>
   122f0:	ldr	r1, [r5, r0, lsl #2]
   122f4:	mov	r0, #0
   122f8:	b	1233c <__assert_fail@plt+0x8b0>
   122fc:	ldr	r0, [sp, #100]	; 0x64
   12300:	and	r5, sl, #1
   12304:	mov	r2, #0
   12308:	mov	r1, r5
   1230c:	and	r4, r0, #1
   12310:	mov	r0, r4
   12314:	bl	12adc <__assert_fail@plt+0x1050>
   12318:	mov	r7, r0
   1231c:	mov	r0, r4
   12320:	mov	r1, r5
   12324:	mov	r2, #1
   12328:	bl	12adc <__assert_fail@plt+0x1050>
   1232c:	str	r0, [sp, #24]
   12330:	b	12388 <__assert_fail@plt+0x8fc>
   12334:	mov	r0, #0
   12338:	mov	r1, #4
   1233c:	bl	1d3e8 <__assert_fail@plt+0xb95c>
   12340:	b	12384 <__assert_fail@plt+0x8f8>
   12344:	mov	r0, #0
   12348:	mov	r1, #4
   1234c:	bl	1d3e8 <__assert_fail@plt+0xb95c>
   12350:	movw	r1, #12047	; 0x2f0f
   12354:	mov	r0, #0
   12358:	mov	r2, #5
   1235c:	movt	r1, #2
   12360:	bl	11720 <dcgettext@plt>
   12364:	mov	r5, r0
   12368:	mov	r0, r4
   1236c:	bl	1ef24 <__assert_fail@plt+0xd498>
   12370:	mov	r3, r0
   12374:	mov	r0, #0
   12378:	mov	r1, #0
   1237c:	mov	r2, r5
   12380:	bl	117d4 <error@plt>
   12384:	str	r7, [sp, #24]
   12388:	ldr	r9, [r6]
   1238c:	ldr	r1, [sp, #112]	; 0x70
   12390:	mov	r0, #0
   12394:	cmp	r9, r1
   12398:	bge	12a50 <__assert_fail@plt+0xfc4>
   1239c:	ldr	r0, [sp, #20]
   123a0:	mov	sl, #1
   123a4:	str	r7, [sp, #104]	; 0x68
   123a8:	add	r0, r0, #8
   123ac:	str	r0, [sp, #16]
   123b0:	add	r0, sp, #116	; 0x74
   123b4:	add	r0, r0, #4
   123b8:	str	r0, [sp, #12]
   123bc:	ldr	r0, [sp, #84]	; 0x54
   123c0:	add	r0, r0, #8
   123c4:	str	r0, [sp, #36]	; 0x24
   123c8:	ldr	r0, [sp, #80]	; 0x50
   123cc:	add	r0, r0, #8
   123d0:	str	r0, [sp, #32]
   123d4:	ldr	r0, [sp, #88]	; 0x58
   123d8:	add	r0, r0, #8
   123dc:	str	r0, [sp, #28]
   123e0:	b	12434 <__assert_fail@plt+0x9a8>
   123e4:	movw	r1, #12567	; 0x3117
   123e8:	mov	r0, #0
   123ec:	mov	r2, #5
   123f0:	mov	r7, #0
   123f4:	movt	r1, #2
   123f8:	bl	11720 <dcgettext@plt>
   123fc:	mov	r5, r0
   12400:	mov	r0, #4
   12404:	mov	r1, r4
   12408:	bl	1e9fc <__assert_fail@plt+0xcf70>
   1240c:	mov	r3, r0
   12410:	mov	r0, #0
   12414:	mov	r1, #0
   12418:	mov	r2, r5
   1241c:	bl	117d4 <error@plt>
   12420:	ldr	r0, [sp, #112]	; 0x70
   12424:	add	r9, r9, #1
   12428:	and	sl, sl, r7
   1242c:	cmp	r9, r0
   12430:	beq	12a4c <__assert_fail@plt+0xfc0>
   12434:	ldr	r0, [sp, #108]	; 0x6c
   12438:	ldr	r4, [r0, r9, lsl #2]
   1243c:	ldr	r0, [sp, #100]	; 0x64
   12440:	tst	r0, #1
   12444:	beq	124b8 <__assert_fail@plt+0xa2c>
   12448:	movw	r1, #14895	; 0x3a2f
   1244c:	mov	r0, r4
   12450:	movt	r1, #2
   12454:	bl	116b4 <strcmp@plt>
   12458:	cmp	r0, #0
   1245c:	beq	123e4 <__assert_fail@plt+0x958>
   12460:	mov	r0, r4
   12464:	mov	r1, r8
   12468:	bl	119b4 <statfs64@plt>
   1246c:	cmp	r0, #0
   12470:	beq	129fc <__assert_fail@plt+0xf70>
   12474:	bl	118e8 <__errno_location@plt>
   12478:	movw	r1, #12635	; 0x315b
   1247c:	ldr	r5, [r0]
   12480:	mov	r0, #0
   12484:	mov	r2, #5
   12488:	mov	r7, #0
   1248c:	movt	r1, #2
   12490:	bl	11720 <dcgettext@plt>
   12494:	mov	r6, r0
   12498:	mov	r0, #4
   1249c:	mov	r1, r4
   124a0:	bl	1e9fc <__assert_fail@plt+0xcf70>
   124a4:	mov	r3, r0
   124a8:	mov	r0, #0
   124ac:	mov	r1, r5
   124b0:	mov	r2, r6
   124b4:	b	1241c <__assert_fail@plt+0x990>
   124b8:	movw	r1, #14895	; 0x3a2f
   124bc:	mov	r0, r4
   124c0:	movt	r1, #2
   124c4:	bl	116b4 <strcmp@plt>
   124c8:	mov	r6, r0
   124cc:	mov	r0, r8
   124d0:	mov	r1, #0
   124d4:	mov	r2, #256	; 0x100
   124d8:	bl	11918 <memset@plt>
   124dc:	mvn	r0, #0
   124e0:	mov	r7, #256	; 0x100
   124e4:	mov	r1, r4
   124e8:	str	r4, [sp, #92]	; 0x5c
   124ec:	str	r0, [sp, #124]	; 0x7c
   124f0:	str	r0, [sp, #120]	; 0x78
   124f4:	sub	r0, fp, #136	; 0x88
   124f8:	str	r0, [sp, #116]	; 0x74
   124fc:	movw	r0, #16889	; 0x41f9
   12500:	movt	r0, #3
   12504:	ldrb	r0, [r0]
   12508:	cmp	r0, #0
   1250c:	movw	r0, #10686	; 0x29be
   12510:	movt	r0, #2
   12514:	movwne	r7, #0
   12518:	cmp	r6, #0
   1251c:	movweq	r7, #4096	; 0x1000
   12520:	mvnne	r6, #99	; 0x63
   12524:	moveq	r1, r0
   12528:	movw	r0, #16891	; 0x41fb
   1252c:	movt	r0, #3
   12530:	str	r1, [sp, #96]	; 0x60
   12534:	ldrb	r0, [r0]
   12538:	cmp	r0, #1
   1253c:	bne	12548 <__assert_fail@plt+0xabc>
   12540:	orr	r7, r7, #16384	; 0x4000
   12544:	b	12558 <__assert_fail@plt+0xacc>
   12548:	movw	r0, #16890	; 0x41fa
   1254c:	movt	r0, #3
   12550:	ldrb	r0, [r0]
   12554:	bfi	r7, r0, #13, #1
   12558:	ldr	r8, [sp, #104]	; 0x68
   1255c:	mov	r5, #0
   12560:	b	12570 <__assert_fail@plt+0xae4>
   12564:	cmp	r0, #0
   12568:	beq	1283c <__assert_fail@plt+0xdb0>
   1256c:	add	r8, r8, #1
   12570:	ldrb	r0, [r8]
   12574:	cmp	r0, #37	; 0x25
   12578:	bne	12564 <__assert_fail@plt+0xad8>
   1257c:	movw	r1, #14257	; 0x37b1
   12580:	add	r4, r8, #1
   12584:	movt	r1, #2
   12588:	mov	r0, r4
   1258c:	bl	11a80 <strspn@plt>
   12590:	add	r8, r4, r0
   12594:	movw	r4, #14265	; 0x37b9
   12598:	movt	r4, #2
   1259c:	mov	r0, r8
   125a0:	mov	r1, r4
   125a4:	bl	11a80 <strspn@plt>
   125a8:	ldrb	r1, [r8, r0]!
   125ac:	cmp	r1, #46	; 0x2e
   125b0:	bne	125c8 <__assert_fail@plt+0xb3c>
   125b4:	add	r0, r8, #1
   125b8:	mov	r1, r4
   125bc:	bl	11a80 <strspn@plt>
   125c0:	add	r8, r0, r8
   125c4:	ldrb	r1, [r8, #1]!
   125c8:	cmp	r1, #122	; 0x7a
   125cc:	bhi	12830 <__assert_fail@plt+0xda4>
   125d0:	add	r2, pc, #4
   125d4:	mov	r0, #2
   125d8:	ldr	pc, [r2, r1, lsl #2]
   125dc:	andeq	r2, r1, ip, lsr r8
   125e0:	andeq	r2, r1, r0, lsr r8
   125e4:	andeq	r2, r1, r0, lsr r8
   125e8:	andeq	r2, r1, r0, lsr r8
   125ec:	andeq	r2, r1, r0, lsr r8
   125f0:	andeq	r2, r1, r0, lsr r8
   125f4:	andeq	r2, r1, r0, lsr r8
   125f8:	andeq	r2, r1, r0, lsr r8
   125fc:	andeq	r2, r1, r0, lsr r8
   12600:	andeq	r2, r1, r0, lsr r8
   12604:	andeq	r2, r1, r0, lsr r8
   12608:	andeq	r2, r1, r0, lsr r8
   1260c:	andeq	r2, r1, r0, lsr r8
   12610:	andeq	r2, r1, r0, lsr r8
   12614:	andeq	r2, r1, r0, lsr r8
   12618:	andeq	r2, r1, r0, lsr r8
   1261c:	andeq	r2, r1, r0, lsr r8
   12620:	andeq	r2, r1, r0, lsr r8
   12624:	andeq	r2, r1, r0, lsr r8
   12628:	andeq	r2, r1, r0, lsr r8
   1262c:	andeq	r2, r1, r0, lsr r8
   12630:	andeq	r2, r1, r0, lsr r8
   12634:	andeq	r2, r1, r0, lsr r8
   12638:	andeq	r2, r1, r0, lsr r8
   1263c:	andeq	r2, r1, r0, lsr r8
   12640:	andeq	r2, r1, r0, lsr r8
   12644:	andeq	r2, r1, r0, lsr r8
   12648:	andeq	r2, r1, r0, lsr r8
   1264c:	andeq	r2, r1, r0, lsr r8
   12650:	andeq	r2, r1, r0, lsr r8
   12654:	andeq	r2, r1, r0, lsr r8
   12658:	andeq	r2, r1, r0, lsr r8
   1265c:	andeq	r2, r1, r0, lsr r8
   12660:	andeq	r2, r1, r0, lsr r8
   12664:	andeq	r2, r1, r0, lsr r8
   12668:	andeq	r2, r1, r0, lsr r8
   1266c:	andeq	r2, r1, r0, lsr r8
   12670:	andeq	r2, r1, r0, lsr r8
   12674:	andeq	r2, r1, r0, lsr r8
   12678:	andeq	r2, r1, r0, lsr r8
   1267c:	andeq	r2, r1, r0, lsr r8
   12680:	andeq	r2, r1, r0, lsr r8
   12684:	andeq	r2, r1, r0, lsr r8
   12688:	andeq	r2, r1, r0, lsr r8
   1268c:	andeq	r2, r1, r0, lsr r8
   12690:	andeq	r2, r1, r0, lsr r8
   12694:	andeq	r2, r1, r0, lsr r8
   12698:	andeq	r2, r1, r0, lsr r8
   1269c:	andeq	r2, r1, r0, lsr r8
   126a0:	andeq	r2, r1, r0, lsr r8
   126a4:	andeq	r2, r1, r0, lsr r8
   126a8:	andeq	r2, r1, r0, lsr r8
   126ac:	andeq	r2, r1, r0, lsr r8
   126b0:	andeq	r2, r1, r0, lsr r8
   126b4:	andeq	r2, r1, r0, lsr r8
   126b8:	andeq	r2, r1, r0, lsr r8
   126bc:	andeq	r2, r1, r0, lsr r8
   126c0:	andeq	r2, r1, r0, lsr r8
   126c4:	andeq	r2, r1, r0, lsr r8
   126c8:	andeq	r2, r1, r0, lsr r8
   126cc:	andeq	r2, r1, r0, lsr r8
   126d0:	andeq	r2, r1, r0, lsr r8
   126d4:	andeq	r2, r1, r0, lsr r8
   126d8:	andeq	r2, r1, r0, lsr r8
   126dc:	andeq	r2, r1, r0, lsr r8
   126e0:	andeq	r2, r1, r4, lsr r8
   126e4:	andeq	r2, r1, r0, lsr r8
   126e8:	andeq	r2, r1, r0, lsr r8
   126ec:	andeq	r2, r1, r4, lsr r8
   126f0:	andeq	r2, r1, r0, lsr r8
   126f4:	andeq	r2, r1, r8, lsl #16
   126f8:	andeq	r2, r1, r8, asr #15
   126fc:	andeq	r2, r1, r0, lsr r8
   12700:	andeq	r2, r1, r0, lsr r8
   12704:	andeq	r2, r1, r0, lsr r8
   12708:	andeq	r2, r1, r0, lsr r8
   1270c:	andeq	r2, r1, r0, lsr r8
   12710:	andeq	r2, r1, r0, lsr r8
   12714:	andeq	r2, r1, r4, lsr r8
   12718:	andeq	r2, r1, r0, lsr r8
   1271c:	andeq	r2, r1, r0, lsr r8
   12720:	andeq	r2, r1, r0, lsr r8
   12724:	andeq	r2, r1, r0, lsr r8
   12728:	andeq	r2, r1, r0, lsr r8
   1272c:	andeq	r2, r1, r4, lsr r8
   12730:	andeq	r2, r1, r8, ror #15
   12734:	andeq	r2, r1, r0, lsr r8
   12738:	andeq	r2, r1, r0, ror #15
   1273c:	strdeq	r2, [r1], -r0
   12740:	ldrdeq	r2, [r1], -r0
   12744:	ldrdeq	r2, [r1], -r8
   12748:	andeq	r2, r1, r0, lsr r8
   1274c:	andeq	r2, r1, r0, lsr r8
   12750:	andeq	r2, r1, r0, lsr r8
   12754:	andeq	r2, r1, r0, lsr r8
   12758:	andeq	r2, r1, r0, lsr r8
   1275c:	andeq	r2, r1, r0, lsr r8
   12760:	andeq	r2, r1, r4, lsr r8
   12764:	andeq	r2, r1, r8, lsr #16
   12768:	andeq	r2, r1, r0, lsr r8
   1276c:	andeq	r2, r1, r4, lsr r8
   12770:	andeq	r2, r1, r0, lsr r8
   12774:	andeq	r2, r1, r8, lsl r8
   12778:	andeq	r2, r1, r8, asr #15
   1277c:	andeq	r2, r1, r0, lsr #16
   12780:	andeq	r2, r1, r0, lsl #16
   12784:	andeq	r2, r1, r0, lsr r8
   12788:	andeq	r2, r1, r0, lsr r8
   1278c:	andeq	r2, r1, r0, lsr r8
   12790:	strdeq	r2, [r1], -r8
   12794:	andeq	r2, r1, r0, lsr r8
   12798:	andeq	r2, r1, r0, lsr r8
   1279c:	andeq	r2, r1, r0, lsr r8
   127a0:	andeq	r2, r1, r0, lsr r8
   127a4:	andeq	r2, r1, r0, lsr r8
   127a8:	andeq	r2, r1, r0, lsl r8
   127ac:	andeq	r2, r1, r4, lsr r8
   127b0:	andeq	r2, r1, r8, ror #15
   127b4:	andeq	r2, r1, r0, lsr r8
   127b8:	andeq	r2, r1, r0, ror #15
   127bc:	strdeq	r2, [r1], -r0
   127c0:	ldrdeq	r2, [r1], -r0
   127c4:	ldrdeq	r2, [r1], -r8
   127c8:	mov	r0, #16
   127cc:	b	12834 <__assert_fail@plt+0xda8>
   127d0:	mov	r0, #64	; 0x40
   127d4:	b	12834 <__assert_fail@plt+0xda8>
   127d8:	mov	r0, #128	; 0x80
   127dc:	b	12834 <__assert_fail@plt+0xda8>
   127e0:	mov	r0, #2048	; 0x800
   127e4:	b	12834 <__assert_fail@plt+0xda8>
   127e8:	mov	r0, #8
   127ec:	b	12834 <__assert_fail@plt+0xda8>
   127f0:	mov	r0, #32
   127f4:	b	12834 <__assert_fail@plt+0xda8>
   127f8:	movw	r0, #258	; 0x102
   127fc:	b	12834 <__assert_fail@plt+0xda8>
   12800:	mov	r0, #256	; 0x100
   12804:	b	12834 <__assert_fail@plt+0xda8>
   12808:	mov	r0, #1
   1280c:	b	12834 <__assert_fail@plt+0xda8>
   12810:	mov	r0, #512	; 0x200
   12814:	b	12834 <__assert_fail@plt+0xda8>
   12818:	mov	r0, #3
   1281c:	b	12834 <__assert_fail@plt+0xda8>
   12820:	mov	r0, #4
   12824:	b	12834 <__assert_fail@plt+0xda8>
   12828:	mov	r0, #1024	; 0x400
   1282c:	b	12834 <__assert_fail@plt+0xda8>
   12830:	mov	r0, #0
   12834:	orr	r5, r0, r5
   12838:	b	1256c <__assert_fail@plt+0xae0>
   1283c:	ldr	r1, [sp, #96]	; 0x60
   12840:	add	r8, sp, #128	; 0x80
   12844:	mov	r0, r6
   12848:	mov	r2, r7
   1284c:	mov	r3, r5
   12850:	str	r8, [sp]
   12854:	bl	1196c <statx@plt>
   12858:	cmn	r0, #1
   1285c:	ble	129b0 <__assert_fail@plt+0xf24>
   12860:	ldr	r3, [sp, #264]	; 0x108
   12864:	movw	r5, #65280	; 0xff00
   12868:	ldr	r7, [sp, #268]	; 0x10c
   1286c:	ldrh	r2, [sp, #156]	; 0x9c
   12870:	mov	r1, r0
   12874:	sub	lr, fp, #116	; 0x74
   12878:	movt	r5, #15
   1287c:	mov	ip, r5
   12880:	and	r5, r5, r3, lsl #8
   12884:	bfc	r3, #0, #12
   12888:	bic	r6, r7, #255	; 0xff
   1288c:	and	r0, r2, #45056	; 0xb000
   12890:	orr	r0, r0, #16384	; 0x4000
   12894:	orr	r3, r3, r6, lsr #20
   12898:	cmp	r0, #24576	; 0x6000
   1289c:	ldr	r0, [sp, #104]	; 0x68
   128a0:	ldreq	r0, [sp, #24]
   128a4:	str	r3, [fp, #-132]	; 0xffffff7c
   128a8:	uxtb	r3, r7
   128ac:	add	r7, sp, #144	; 0x90
   128b0:	orr	r3, r5, r3
   128b4:	orr	r3, r3, r6, lsl #12
   128b8:	ldr	r6, [sp, #256]	; 0x100
   128bc:	str	r3, [fp, #-136]	; 0xffffff78
   128c0:	ldr	r3, [sp, #76]	; 0x4c
   128c4:	ldrd	r4, [r3]
   128c8:	ldr	r3, [sp, #40]	; 0x28
   128cc:	strd	r4, [r3]
   128d0:	str	r2, [fp, #-120]	; 0xffffff88
   128d4:	ldm	r7, {r2, r3, r7}
   128d8:	stm	lr, {r2, r3, r7}
   128dc:	ldr	r2, [sp, #260]	; 0x104
   128e0:	and	r7, ip, r6, lsl #8
   128e4:	bfc	r6, #0, #12
   128e8:	bic	r3, r2, #255	; 0xff
   128ec:	uxtb	r2, r2
   128f0:	orr	r5, r6, r3, lsr #20
   128f4:	orr	r2, r7, r2
   128f8:	ldr	r7, [sp, #60]	; 0x3c
   128fc:	orr	r4, r2, r3, lsl #12
   12900:	ldr	r2, [sp, #64]	; 0x40
   12904:	strd	r4, [r2]
   12908:	ldr	r2, [sp, #72]	; 0x48
   1290c:	ldrd	r2, [r2]
   12910:	strd	r2, [r7]
   12914:	ldr	r2, [sp, #132]	; 0x84
   12918:	ldr	r7, [sp, #56]	; 0x38
   1291c:	str	r2, [fp, #-80]	; 0xffffffb0
   12920:	ldr	r2, [sp, #68]	; 0x44
   12924:	ldrd	r2, [r2]
   12928:	strd	r2, [r7]
   1292c:	ldr	r2, [sp, #88]	; 0x58
   12930:	ldr	r3, [sp, #28]
   12934:	ldr	r7, [sp, #52]	; 0x34
   12938:	ldr	r2, [r2]
   1293c:	ldr	r3, [r3]
   12940:	strd	r2, [r7]
   12944:	ldr	r2, [sp, #80]	; 0x50
   12948:	ldr	r3, [sp, #32]
   1294c:	ldr	r7, [sp, #48]	; 0x30
   12950:	ldr	r2, [r2]
   12954:	ldr	r3, [r3]
   12958:	strd	r2, [r7]
   1295c:	ldr	r2, [sp, #84]	; 0x54
   12960:	ldr	r3, [sp, #36]	; 0x24
   12964:	ldr	r7, [sp, #44]	; 0x2c
   12968:	ldr	r2, [r2]
   1296c:	ldr	r3, [r3]
   12970:	strd	r2, [r7]
   12974:	ldrb	r2, [sp, #129]	; 0x81
   12978:	tst	r2, #8
   1297c:	beq	12998 <__assert_fail@plt+0xf0c>
   12980:	ldr	r2, [sp, #20]
   12984:	ldr	r3, [sp, #16]
   12988:	ldr	r7, [sp, #12]
   1298c:	ldr	r2, [r2]
   12990:	ldr	r3, [r3]
   12994:	stm	r7, {r2, r3}
   12998:	add	r2, sp, #116	; 0x74
   1299c:	movw	r3, #22676	; 0x5894
   129a0:	str	r2, [sp]
   129a4:	ldr	r2, [sp, #92]	; 0x5c
   129a8:	movt	r3, #1
   129ac:	b	12a14 <__assert_fail@plt+0xf88>
   129b0:	bl	118e8 <__errno_location@plt>
   129b4:	ldr	r5, [r0]
   129b8:	tst	r7, #4096	; 0x1000
   129bc:	bne	12a20 <__assert_fail@plt+0xf94>
   129c0:	movw	r1, #13872	; 0x3630
   129c4:	mov	r0, #0
   129c8:	mov	r2, #5
   129cc:	mov	r7, #0
   129d0:	movt	r1, #2
   129d4:	bl	11720 <dcgettext@plt>
   129d8:	ldr	r1, [sp, #92]	; 0x5c
   129dc:	mov	r4, r0
   129e0:	mov	r0, #4
   129e4:	bl	1e9fc <__assert_fail@plt+0xcf70>
   129e8:	mov	r3, r0
   129ec:	mov	r0, #0
   129f0:	mov	r1, r5
   129f4:	mov	r2, r4
   129f8:	b	1241c <__assert_fail@plt+0x990>
   129fc:	ldr	r0, [sp, #104]	; 0x68
   12a00:	movw	r3, #12984	; 0x32b8
   12a04:	str	r8, [sp]
   12a08:	mvn	r1, #0
   12a0c:	mov	r2, r4
   12a10:	movt	r3, #1
   12a14:	bl	12c70 <__assert_fail@plt+0x11e4>
   12a18:	eor	r7, r0, #1
   12a1c:	b	12420 <__assert_fail@plt+0x994>
   12a20:	movw	r1, #13845	; 0x3615
   12a24:	mov	r0, #0
   12a28:	mov	r2, #5
   12a2c:	mov	r7, #0
   12a30:	movt	r1, #2
   12a34:	bl	11720 <dcgettext@plt>
   12a38:	mov	r2, r0
   12a3c:	mov	r0, #0
   12a40:	mov	r1, r5
   12a44:	bl	117d4 <error@plt>
   12a48:	b	12420 <__assert_fail@plt+0x994>
   12a4c:	eor	r0, sl, #1
   12a50:	sub	sp, fp, #28
   12a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a58:	movw	r0, #16772	; 0x4184
   12a5c:	movw	r2, #11549	; 0x2d1d
   12a60:	mov	r1, #0
   12a64:	movt	r0, #3
   12a68:	movt	r2, #2
   12a6c:	str	r1, [sp, #4]
   12a70:	movw	r1, #11491	; 0x2ce3
   12a74:	movt	r1, #2
   12a78:	ldr	r3, [r0]
   12a7c:	movw	r0, #16868	; 0x41e4
   12a80:	str	r2, [sp]
   12a84:	movw	r2, #11535	; 0x2d0f
   12a88:	movt	r0, #3
   12a8c:	movt	r2, #2
   12a90:	ldr	r0, [r0]
   12a94:	bl	1fd04 <__assert_fail@plt+0xe278>
   12a98:	mov	r0, #0
   12a9c:	bl	11888 <exit@plt>
   12aa0:	mov	r0, #0
   12aa4:	bl	11b90 <__assert_fail@plt+0x104>
   12aa8:	mov	r0, #1
   12aac:	bl	11b90 <__assert_fail@plt+0x104>
   12ab0:	movw	r1, #11564	; 0x2d2c
   12ab4:	mov	r0, #0
   12ab8:	mov	r2, #5
   12abc:	movt	r1, #2
   12ac0:	bl	11720 <dcgettext@plt>
   12ac4:	mov	r2, r0
   12ac8:	mov	r0, #0
   12acc:	mov	r1, #0
   12ad0:	bl	117d4 <error@plt>
   12ad4:	mov	r0, #1
   12ad8:	bl	11b90 <__assert_fail@plt+0x104>
   12adc:	push	{r4, r5, r6, sl, fp, lr}
   12ae0:	add	fp, sp, #16
   12ae4:	cmp	r0, #0
   12ae8:	beq	12b04 <__assert_fail@plt+0x1078>
   12aec:	cmp	r1, #0
   12af0:	beq	12b28 <__assert_fail@plt+0x109c>
   12af4:	movw	r0, #13940	; 0x3674
   12af8:	movt	r0, #2
   12afc:	pop	{r4, r5, r6, sl, fp, lr}
   12b00:	b	2043c <__assert_fail@plt+0xe9b0>
   12b04:	cmp	r1, #0
   12b08:	beq	12b44 <__assert_fail@plt+0x10b8>
   12b0c:	bl	116a8 <is_selinux_enabled@plt>
   12b10:	cmp	r0, #1
   12b14:	blt	12c20 <__assert_fail@plt+0x1194>
   12b18:	movw	r0, #13888	; 0x3640
   12b1c:	movt	r0, #2
   12b20:	pop	{r4, r5, r6, sl, fp, lr}
   12b24:	b	2043c <__assert_fail@plt+0xe9b0>
   12b28:	movw	r1, #12112	; 0x2f50
   12b2c:	mov	r0, #0
   12b30:	mov	r2, #5
   12b34:	movt	r1, #2
   12b38:	bl	11720 <dcgettext@plt>
   12b3c:	pop	{r4, r5, r6, sl, fp, lr}
   12b40:	b	2043c <__assert_fail@plt+0xe9b0>
   12b44:	movw	r1, #12284	; 0x2ffc
   12b48:	mov	r4, r2
   12b4c:	mov	r0, #0
   12b50:	mov	r2, #5
   12b54:	movt	r1, #2
   12b58:	bl	11720 <dcgettext@plt>
   12b5c:	bl	2043c <__assert_fail@plt+0xe9b0>
   12b60:	mov	r5, r0
   12b64:	movw	r0, #12347	; 0x303b
   12b68:	movw	r1, #12411	; 0x307b
   12b6c:	cmp	r4, #0
   12b70:	mov	r2, #5
   12b74:	movt	r0, #2
   12b78:	movt	r1, #2
   12b7c:	movne	r1, r0
   12b80:	mov	r0, #0
   12b84:	bl	11720 <dcgettext@plt>
   12b88:	movw	r4, #12342	; 0x3036
   12b8c:	mov	r2, r0
   12b90:	mov	r1, r5
   12b94:	movt	r4, #2
   12b98:	mov	r0, r4
   12b9c:	bl	204f4 <__assert_fail@plt+0xea68>
   12ba0:	mov	r6, r0
   12ba4:	mov	r0, r5
   12ba8:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   12bac:	movw	r1, #12452	; 0x30a4
   12bb0:	mov	r0, #0
   12bb4:	mov	r2, #5
   12bb8:	movt	r1, #2
   12bbc:	bl	11720 <dcgettext@plt>
   12bc0:	mov	r2, r0
   12bc4:	mov	r0, r4
   12bc8:	mov	r1, r6
   12bcc:	bl	204f4 <__assert_fail@plt+0xea68>
   12bd0:	mov	r4, r0
   12bd4:	mov	r0, r6
   12bd8:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   12bdc:	bl	116a8 <is_selinux_enabled@plt>
   12be0:	cmp	r0, #1
   12be4:	blt	12c30 <__assert_fail@plt+0x11a4>
   12be8:	movw	r1, #12509	; 0x30dd
   12bec:	mov	r0, #0
   12bf0:	mov	r2, #5
   12bf4:	movt	r1, #2
   12bf8:	bl	11720 <dcgettext@plt>
   12bfc:	mov	r2, r0
   12c00:	movw	r0, #12342	; 0x3036
   12c04:	mov	r1, r4
   12c08:	movt	r0, #2
   12c0c:	bl	204f4 <__assert_fail@plt+0xea68>
   12c10:	mov	r5, r0
   12c14:	mov	r0, r4
   12c18:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   12c1c:	b	12c34 <__assert_fail@plt+0x11a8>
   12c20:	movw	r0, #14208	; 0x3780
   12c24:	movt	r0, #2
   12c28:	pop	{r4, r5, r6, sl, fp, lr}
   12c2c:	b	2043c <__assert_fail@plt+0xe9b0>
   12c30:	mov	r5, r4
   12c34:	movw	r1, #12522	; 0x30ea
   12c38:	mov	r0, #0
   12c3c:	mov	r2, #5
   12c40:	movt	r1, #2
   12c44:	bl	11720 <dcgettext@plt>
   12c48:	mov	r2, r0
   12c4c:	movw	r0, #12342	; 0x3036
   12c50:	mov	r1, r5
   12c54:	movt	r0, #2
   12c58:	bl	204f4 <__assert_fail@plt+0xea68>
   12c5c:	mov	r4, r0
   12c60:	mov	r0, r5
   12c64:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   12c68:	mov	r0, r4
   12c6c:	pop	{r4, r5, r6, sl, fp, pc}
   12c70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c74:	add	fp, sp, #28
   12c78:	sub	sp, sp, #28
   12c7c:	add	ip, sp, #16
   12c80:	mov	sl, r0
   12c84:	stm	ip, {r1, r2, r3}
   12c88:	bl	118ac <strlen@plt>
   12c8c:	add	r0, r0, #4
   12c90:	bl	1ff38 <__assert_fail@plt+0xe4ac>
   12c94:	movw	r5, #14265	; 0x37b9
   12c98:	movw	r6, #16868	; 0x41e4
   12c9c:	mov	r4, r0
   12ca0:	mov	r9, #0
   12ca4:	movt	r5, #2
   12ca8:	movt	r6, #3
   12cac:	b	12cec <__assert_fail@plt+0x1260>
   12cb0:	mov	r3, r5
   12cb4:	ldr	r0, [sp, #16]
   12cb8:	mov	r1, r7
   12cbc:	ldr	r7, [sp, #24]
   12cc0:	str	r0, [sp]
   12cc4:	ldr	r0, [sp, #20]
   12cc8:	str	r0, [sp, #4]
   12ccc:	ldr	r0, [fp, #8]
   12cd0:	str	r0, [sp, #8]
   12cd4:	mov	r0, r4
   12cd8:	blx	r7
   12cdc:	orr	r9, r9, r0
   12ce0:	add	sl, r8, #1
   12ce4:	movw	r5, #14265	; 0x37b9
   12ce8:	movt	r5, #2
   12cec:	ldrb	r1, [sl]
   12cf0:	cmp	r1, #37	; 0x25
   12cf4:	beq	12dc0 <__assert_fail@plt+0x1334>
   12cf8:	cmp	r1, #92	; 0x5c
   12cfc:	beq	12d30 <__assert_fail@plt+0x12a4>
   12d00:	cmp	r1, #0
   12d04:	beq	1324c <__assert_fail@plt+0x17c0>
   12d08:	ldr	r0, [r6]
   12d0c:	ldr	r2, [r0, #20]
   12d10:	ldr	r3, [r0, #24]
   12d14:	cmp	r2, r3
   12d18:	bcs	13208 <__assert_fail@plt+0x177c>
   12d1c:	add	r3, r2, #1
   12d20:	add	sl, sl, #1
   12d24:	str	r3, [r0, #20]
   12d28:	strb	r1, [r2]
   12d2c:	b	12cec <__assert_fail@plt+0x1260>
   12d30:	movw	r0, #16888	; 0x41f8
   12d34:	movt	r0, #3
   12d38:	ldrb	r0, [r0]
   12d3c:	cmp	r0, #0
   12d40:	beq	12e38 <__assert_fail@plt+0x13ac>
   12d44:	mov	r5, sl
   12d48:	ldrb	r7, [r5, #1]!
   12d4c:	and	r0, r7, #248	; 0xf8
   12d50:	cmp	r0, #48	; 0x30
   12d54:	bne	12ea4 <__assert_fail@plt+0x1418>
   12d58:	mov	r5, sl
   12d5c:	sub	r1, r7, #48	; 0x30
   12d60:	ldrb	r0, [r5, #2]!
   12d64:	and	r2, r0, #248	; 0xf8
   12d68:	cmp	r2, #48	; 0x30
   12d6c:	bne	12d94 <__assert_fail@plt+0x1308>
   12d70:	add	r0, r0, r1, lsl #3
   12d74:	mov	r5, sl
   12d78:	sub	r1, r0, #48	; 0x30
   12d7c:	ldrb	r0, [r5, #3]!
   12d80:	and	r2, r0, #248	; 0xf8
   12d84:	cmp	r2, #48	; 0x30
   12d88:	addeq	r0, r0, r1, lsl #3
   12d8c:	addeq	r5, sl, #4
   12d90:	subeq	r1, r0, #48	; 0x30
   12d94:	ldr	r0, [r6]
   12d98:	ldr	r2, [r0, #20]
   12d9c:	ldr	r3, [r0, #24]
   12da0:	cmp	r2, r3
   12da4:	bcs	13220 <__assert_fail@plt+0x1794>
   12da8:	add	r3, r2, #1
   12dac:	str	r3, [r0, #20]
   12db0:	strb	r1, [r2]
   12db4:	sub	r0, r5, #1
   12db8:	add	sl, r0, #1
   12dbc:	b	12ce4 <__assert_fail@plt+0x1258>
   12dc0:	movw	r1, #14257	; 0x37b1
   12dc4:	add	r7, sl, #1
   12dc8:	movt	r1, #2
   12dcc:	mov	r0, r7
   12dd0:	bl	11a80 <strspn@plt>
   12dd4:	add	r8, r7, r0
   12dd8:	mov	r1, r5
   12ddc:	mov	r0, r8
   12de0:	bl	11a80 <strspn@plt>
   12de4:	mov	r1, r5
   12de8:	ldrb	r5, [r8, r0]!
   12dec:	cmp	r5, #46	; 0x2e
   12df0:	bne	12e04 <__assert_fail@plt+0x1378>
   12df4:	add	r0, r8, #1
   12df8:	bl	11a80 <strspn@plt>
   12dfc:	add	r8, r0, r8
   12e00:	ldrb	r5, [r8, #1]!
   12e04:	sub	r7, r8, sl
   12e08:	mov	r0, r4
   12e0c:	mov	r1, sl
   12e10:	mov	r2, r7
   12e14:	bl	11708 <memcpy@plt>
   12e18:	mov	r2, #0
   12e1c:	cmp	r5, #71	; 0x47
   12e20:	bgt	12e64 <__assert_fail@plt+0x13d8>
   12e24:	cmp	r5, #0
   12e28:	beq	1301c <__assert_fail@plt+0x1590>
   12e2c:	cmp	r5, #37	; 0x25
   12e30:	beq	13020 <__assert_fail@plt+0x1594>
   12e34:	b	12cb0 <__assert_fail@plt+0x1224>
   12e38:	ldr	r0, [r6]
   12e3c:	ldr	r1, [r0, #20]
   12e40:	ldr	r2, [r0, #24]
   12e44:	cmp	r1, r2
   12e48:	bcs	13204 <__assert_fail@plt+0x1778>
   12e4c:	add	r2, r1, #1
   12e50:	add	sl, sl, #1
   12e54:	str	r2, [r0, #20]
   12e58:	mov	r0, #92	; 0x5c
   12e5c:	strb	r0, [r1]
   12e60:	b	12cec <__assert_fail@plt+0x1260>
   12e64:	cmp	r5, #72	; 0x48
   12e68:	cmpne	r5, #76	; 0x4c
   12e6c:	bne	12cb0 <__assert_fail@plt+0x1224>
   12e70:	ldr	r0, [sp, #24]
   12e74:	movw	r1, #22676	; 0x5894
   12e78:	movt	r1, #1
   12e7c:	cmp	r0, r1
   12e80:	bne	12cb0 <__assert_fail@plt+0x1224>
   12e84:	mov	r0, r8
   12e88:	ldrb	r3, [r0, #1]!
   12e8c:	cmp	r3, #100	; 0x64
   12e90:	cmpne	r3, #114	; 0x72
   12e94:	bne	12cb0 <__assert_fail@plt+0x1224>
   12e98:	mov	r8, r0
   12e9c:	mov	r2, r5
   12ea0:	b	12cb4 <__assert_fail@plt+0x1228>
   12ea4:	sub	r0, r7, #34	; 0x22
   12ea8:	cmp	r0, #86	; 0x56
   12eac:	bhi	13050 <__assert_fail@plt+0x15c4>
   12eb0:	add	r1, pc, #0
   12eb4:	ldr	pc, [r1, r0, lsl #2]
   12eb8:	andeq	r3, r1, r8, lsr #2
   12ebc:	strdeq	r3, [r1], -r8
   12ec0:	strdeq	r3, [r1], -r8
   12ec4:	strdeq	r3, [r1], -r8
   12ec8:	strdeq	r3, [r1], -r8
   12ecc:	strdeq	r3, [r1], -r8
   12ed0:	strdeq	r3, [r1], -r8
   12ed4:	strdeq	r3, [r1], -r8
   12ed8:	strdeq	r3, [r1], -r8
   12edc:	strdeq	r3, [r1], -r8
   12ee0:	strdeq	r3, [r1], -r8
   12ee4:	strdeq	r3, [r1], -r8
   12ee8:	strdeq	r3, [r1], -r8
   12eec:	strdeq	r3, [r1], -r8
   12ef0:	strdeq	r3, [r1], -r8
   12ef4:	strdeq	r3, [r1], -r8
   12ef8:	strdeq	r3, [r1], -r8
   12efc:	strdeq	r3, [r1], -r8
   12f00:	strdeq	r3, [r1], -r8
   12f04:	strdeq	r3, [r1], -r8
   12f08:	strdeq	r3, [r1], -r8
   12f0c:	strdeq	r3, [r1], -r8
   12f10:	strdeq	r3, [r1], -r8
   12f14:	strdeq	r3, [r1], -r8
   12f18:	strdeq	r3, [r1], -r8
   12f1c:	strdeq	r3, [r1], -r8
   12f20:	strdeq	r3, [r1], -r8
   12f24:	strdeq	r3, [r1], -r8
   12f28:	strdeq	r3, [r1], -r8
   12f2c:	strdeq	r3, [r1], -r8
   12f30:	strdeq	r3, [r1], -r8
   12f34:	strdeq	r3, [r1], -r8
   12f38:	strdeq	r3, [r1], -r8
   12f3c:	strdeq	r3, [r1], -r8
   12f40:	strdeq	r3, [r1], -r8
   12f44:	strdeq	r3, [r1], -r8
   12f48:	strdeq	r3, [r1], -r8
   12f4c:	strdeq	r3, [r1], -r8
   12f50:	strdeq	r3, [r1], -r8
   12f54:	strdeq	r3, [r1], -r8
   12f58:	strdeq	r3, [r1], -r8
   12f5c:	strdeq	r3, [r1], -r8
   12f60:	strdeq	r3, [r1], -r8
   12f64:	strdeq	r3, [r1], -r8
   12f68:	strdeq	r3, [r1], -r8
   12f6c:	strdeq	r3, [r1], -r8
   12f70:	strdeq	r3, [r1], -r8
   12f74:	strdeq	r3, [r1], -r8
   12f78:	strdeq	r3, [r1], -r8
   12f7c:	strdeq	r3, [r1], -r8
   12f80:	strdeq	r3, [r1], -r8
   12f84:	strdeq	r3, [r1], -r8
   12f88:	strdeq	r3, [r1], -r8
   12f8c:	strdeq	r3, [r1], -r8
   12f90:	strdeq	r3, [r1], -r8
   12f94:	strdeq	r3, [r1], -r8
   12f98:	strdeq	r3, [r1], -r8
   12f9c:	strdeq	r3, [r1], -r8
   12fa0:	andeq	r3, r1, r8, lsr #2
   12fa4:	strdeq	r3, [r1], -r8
   12fa8:	strdeq	r3, [r1], -r8
   12fac:	strdeq	r3, [r1], -r8
   12fb0:	strdeq	r3, [r1], -r8
   12fb4:	andeq	r3, r1, r4, lsl r0
   12fb8:	andeq	r3, r1, r8, asr #1
   12fbc:	strdeq	r3, [r1], -r8
   12fc0:	strdeq	r3, [r1], -r8
   12fc4:	strheq	r3, [r1], -r0
   12fc8:	strheq	r3, [r1], -r8
   12fcc:	strdeq	r3, [r1], -r8
   12fd0:	strdeq	r3, [r1], -r8
   12fd4:	strdeq	r3, [r1], -r8
   12fd8:	strdeq	r3, [r1], -r8
   12fdc:	strdeq	r3, [r1], -r8
   12fe0:	strdeq	r3, [r1], -r8
   12fe4:	strdeq	r3, [r1], -r8
   12fe8:	andeq	r3, r1, r0, asr #1
   12fec:	strdeq	r3, [r1], -r8
   12ff0:	strdeq	r3, [r1], -r8
   12ff4:	strdeq	r3, [r1], -r8
   12ff8:	ldrdeq	r3, [r1], -r0
   12ffc:	strdeq	r3, [r1], -r8
   13000:	andeq	r3, r1, r8, lsr #1
   13004:	strdeq	r3, [r1], -r8
   13008:	andeq	r3, r1, r4, lsr #2
   1300c:	strdeq	r3, [r1], -r8
   13010:	ldrdeq	r3, [r1], -r8
   13014:	mov	r7, #7
   13018:	b	13128 <__assert_fail@plt+0x169c>
   1301c:	sub	r8, r8, #1
   13020:	cmp	r7, #2
   13024:	bcs	13274 <__assert_fail@plt+0x17e8>
   13028:	ldr	r0, [r6]
   1302c:	ldr	r1, [r0, #20]
   13030:	ldr	r2, [r0, #24]
   13034:	cmp	r1, r2
   13038:	bcs	13214 <__assert_fail@plt+0x1788>
   1303c:	add	r2, r1, #1
   13040:	str	r2, [r0, #20]
   13044:	mov	r0, #37	; 0x25
   13048:	strb	r0, [r1]
   1304c:	b	12ce0 <__assert_fail@plt+0x1254>
   13050:	cmp	r7, #0
   13054:	bne	130f8 <__assert_fail@plt+0x166c>
   13058:	movw	r1, #12700	; 0x319c
   1305c:	mov	r0, #0
   13060:	mov	r2, #5
   13064:	movt	r1, #2
   13068:	bl	11720 <dcgettext@plt>
   1306c:	mov	r2, r0
   13070:	mov	r0, #0
   13074:	mov	r1, #0
   13078:	bl	117d4 <error@plt>
   1307c:	ldr	r0, [r6]
   13080:	ldr	r1, [r0, #20]
   13084:	ldr	r2, [r0, #24]
   13088:	cmp	r1, r2
   1308c:	bcs	13238 <__assert_fail@plt+0x17ac>
   13090:	add	r2, r1, #1
   13094:	str	r2, [r0, #20]
   13098:	mov	r0, #92	; 0x5c
   1309c:	strb	r0, [r1]
   130a0:	add	sl, sl, #1
   130a4:	b	12ce4 <__assert_fail@plt+0x1258>
   130a8:	mov	r7, #9
   130ac:	b	13128 <__assert_fail@plt+0x169c>
   130b0:	mov	r7, #27
   130b4:	b	13128 <__assert_fail@plt+0x169c>
   130b8:	mov	r7, #12
   130bc:	b	13128 <__assert_fail@plt+0x169c>
   130c0:	mov	r7, #10
   130c4:	b	13128 <__assert_fail@plt+0x169c>
   130c8:	mov	r7, #8
   130cc:	b	13128 <__assert_fail@plt+0x169c>
   130d0:	mov	r7, #13
   130d4:	b	13128 <__assert_fail@plt+0x169c>
   130d8:	bl	11870 <__ctype_b_loc@plt>
   130dc:	mov	r1, sl
   130e0:	ldr	r0, [r0]
   130e4:	ldrb	r2, [r1, #2]!
   130e8:	add	r3, r0, r2, lsl #1
   130ec:	ldrb	r3, [r3, #1]
   130f0:	tst	r3, #16
   130f4:	bne	13150 <__assert_fail@plt+0x16c4>
   130f8:	movw	r1, #12967	; 0x32a7
   130fc:	mov	r0, #0
   13100:	mov	r2, #5
   13104:	movt	r1, #2
   13108:	bl	11720 <dcgettext@plt>
   1310c:	mov	r2, r0
   13110:	mov	r0, #0
   13114:	mov	r1, #0
   13118:	mov	r3, r7
   1311c:	bl	117d4 <error@plt>
   13120:	b	13128 <__assert_fail@plt+0x169c>
   13124:	mov	r7, #11
   13128:	ldr	r0, [r6]
   1312c:	ldr	r1, [r0, #20]
   13130:	ldr	r2, [r0, #24]
   13134:	cmp	r1, r2
   13138:	bcs	1322c <__assert_fail@plt+0x17a0>
   1313c:	add	r2, r1, #1
   13140:	str	r2, [r0, #20]
   13144:	strb	r7, [r1]
   13148:	add	sl, r5, #1
   1314c:	b	12ce4 <__assert_fail@plt+0x1258>
   13150:	sub	r3, r2, #97	; 0x61
   13154:	uxtb	r7, r3
   13158:	mvn	r3, #86	; 0x56
   1315c:	cmp	r7, #6
   13160:	bcc	13178 <__assert_fail@plt+0x16ec>
   13164:	sub	r3, r2, #65	; 0x41
   13168:	uxtb	r3, r3
   1316c:	cmp	r3, #6
   13170:	mvn	r3, #47	; 0x2f
   13174:	mvncc	r3, #54	; 0x36
   13178:	add	r2, r3, r2
   1317c:	ldrb	r3, [sl, #3]!
   13180:	add	r0, r0, r3, lsl #1
   13184:	ldrb	r0, [r0, #1]
   13188:	tst	r0, #16
   1318c:	bne	131a0 <__assert_fail@plt+0x1714>
   13190:	movw	r5, #14265	; 0x37b9
   13194:	mov	sl, r1
   13198:	movt	r5, #2
   1319c:	b	131dc <__assert_fail@plt+0x1750>
   131a0:	sub	r1, r3, #97	; 0x61
   131a4:	movw	r5, #14265	; 0x37b9
   131a8:	lsl	r0, r2, #4
   131ac:	uxtb	r2, r1
   131b0:	movt	r5, #2
   131b4:	mvn	r1, #86	; 0x56
   131b8:	cmp	r2, #6
   131bc:	bcc	131d4 <__assert_fail@plt+0x1748>
   131c0:	sub	r1, r3, #65	; 0x41
   131c4:	uxtb	r1, r1
   131c8:	cmp	r1, #6
   131cc:	mvn	r1, #47	; 0x2f
   131d0:	mvncc	r1, #54	; 0x36
   131d4:	add	r1, r1, r3
   131d8:	add	r2, r1, r0
   131dc:	ldr	r0, [r6]
   131e0:	ldr	r1, [r0, #20]
   131e4:	ldr	r3, [r0, #24]
   131e8:	cmp	r1, r3
   131ec:	bcs	13244 <__assert_fail@plt+0x17b8>
   131f0:	add	r3, r1, #1
   131f4:	add	sl, sl, #1
   131f8:	str	r3, [r0, #20]
   131fc:	strb	r2, [r1]
   13200:	b	12cec <__assert_fail@plt+0x1260>
   13204:	mov	r1, #92	; 0x5c
   13208:	bl	11990 <__overflow@plt>
   1320c:	add	sl, sl, #1
   13210:	b	12cec <__assert_fail@plt+0x1260>
   13214:	mov	r1, #37	; 0x25
   13218:	bl	11990 <__overflow@plt>
   1321c:	b	12ce0 <__assert_fail@plt+0x1254>
   13220:	uxtb	r1, r1
   13224:	bl	11990 <__overflow@plt>
   13228:	b	12db4 <__assert_fail@plt+0x1328>
   1322c:	mov	r1, r7
   13230:	bl	11990 <__overflow@plt>
   13234:	b	13148 <__assert_fail@plt+0x16bc>
   13238:	mov	r1, #92	; 0x5c
   1323c:	bl	11990 <__overflow@plt>
   13240:	b	130a0 <__assert_fail@plt+0x1614>
   13244:	uxtb	r1, r2
   13248:	b	13208 <__assert_fail@plt+0x177c>
   1324c:	mov	r0, r4
   13250:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   13254:	movw	r0, #16768	; 0x4180
   13258:	ldr	r1, [r6]
   1325c:	movt	r0, #3
   13260:	ldr	r0, [r0]
   13264:	bl	11678 <fputs_unlocked@plt>
   13268:	and	r0, r9, #1
   1326c:	sub	sp, fp, #28
   13270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13274:	mov	r0, r4
   13278:	mov	r1, #0
   1327c:	mov	r2, #5
   13280:	strb	r5, [r0, r7]!
   13284:	strb	r1, [r0, #1]
   13288:	movw	r1, #12678	; 0x3186
   1328c:	mov	r0, #0
   13290:	movt	r1, #2
   13294:	bl	11720 <dcgettext@plt>
   13298:	mov	r5, r0
   1329c:	mov	r0, r4
   132a0:	bl	1ef24 <__assert_fail@plt+0xd498>
   132a4:	mov	r3, r0
   132a8:	mov	r0, #1
   132ac:	mov	r1, #0
   132b0:	mov	r2, r5
   132b4:	bl	117d4 <error@plt>
   132b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132bc:	add	fp, sp, #28
   132c0:	sub	sp, sp, #28
   132c4:	sub	r3, r3, #83	; 0x53
   132c8:	cmp	r3, #33	; 0x21
   132cc:	bhi	1348c <__assert_fail@plt+0x1a00>
   132d0:	mov	sl, r0
   132d4:	ldr	r0, [fp, #16]
   132d8:	add	r7, pc, #12
   132dc:	mov	r6, r1
   132e0:	add	r1, r0, #8
   132e4:	add	r2, r0, #24
   132e8:	ldr	pc, [r7, r3, lsl #2]
   132ec:	andeq	r3, r1, r4, ror r3
   132f0:	strdeq	r3, [r1], -r0
   132f4:	andeq	r3, r1, ip, lsl #9
   132f8:	andeq	r3, r1, ip, lsl #9
   132fc:	andeq	r3, r1, ip, lsl #9
   13300:	andeq	r3, r1, ip, lsl #9
   13304:	andeq	r3, r1, ip, lsl #9
   13308:	andeq	r3, r1, ip, lsl #9
   1330c:	andeq	r3, r1, ip, lsl #9
   13310:	andeq	r3, r1, ip, lsl #9
   13314:	andeq	r3, r1, ip, lsl #9
   13318:	andeq	r3, r1, ip, lsl #9
   1331c:	andeq	r3, r1, ip, lsl #9
   13320:	andeq	r3, r1, ip, lsl #9
   13324:			; <UNDEFINED> instruction: 0x000134bc
   13328:	andeq	r3, r1, r8, lsr r5
   1332c:			; <UNDEFINED> instruction: 0x000135b4
   13330:	andeq	r3, r1, r0, lsr r6
   13334:	andeq	r3, r1, ip, lsl #9
   13338:	andeq	r3, r1, ip, lsr #13
   1333c:	andeq	r3, r1, ip, lsl #9
   13340:	andeq	r3, r1, ip, lsl #9
   13344:	andeq	r3, r1, r8, lsr #14
   13348:	andeq	r3, r1, ip, lsl #9
   1334c:	andeq	r3, r1, ip, lsl #9
   13350:	andeq	r3, r1, ip, lsr #15
   13354:	andeq	r3, r1, ip, lsl #9
   13358:	andeq	r3, r1, r0, lsr #16
   1335c:	andeq	r3, r1, ip, lsl #9
   13360:	andeq	r3, r1, ip, lsl #9
   13364:	andeq	r3, r1, ip, lsl #9
   13368:	andeq	r3, r1, ip, lsl #9
   1336c:	muleq	r1, r8, r8
   13370:	andeq	r3, r1, ip, lsl #18
   13374:	ldr	r8, [r0, #60]	; 0x3c
   13378:	add	r9, sl, r6
   1337c:	str	sl, [sp, #20]
   13380:	add	sl, sl, #1
   13384:	str	r6, [sp, #24]
   13388:	cmp	r8, #0
   1338c:	ldreq	r8, [r0, #4]
   13390:	cmp	r6, #2
   13394:	blt	13980 <__assert_fail@plt+0x1ef4>
   13398:	movw	r7, #14257	; 0x37b1
   1339c:	movw	r4, #12778	; 0x31ea
   133a0:	mov	r6, sl
   133a4:	movt	r7, #2
   133a8:	movt	r4, #2
   133ac:	ldrb	r5, [r6]
   133b0:	mov	r0, r7
   133b4:	mov	r2, #8
   133b8:	mov	r1, r5
   133bc:	bl	11948 <memchr@plt>
   133c0:	cmp	r0, #0
   133c4:	beq	13984 <__assert_fail@plt+0x1ef8>
   133c8:	mov	r0, r4
   133cc:	mov	r1, r5
   133d0:	mov	r2, #4
   133d4:	bl	11948 <memchr@plt>
   133d8:	cmp	r0, #0
   133dc:	add	r6, r6, #1
   133e0:	strbne	r5, [sl], #1
   133e4:	cmp	r6, r9
   133e8:	bcc	133ac <__assert_fail@plt+0x1920>
   133ec:	b	13984 <__assert_fail@plt+0x1ef8>
   133f0:	ldr	r0, [r0]
   133f4:	movw	r1, #4519	; 0x11a7
   133f8:	movt	r1, #305	; 0x131
   133fc:	cmp	r0, r1
   13400:	bgt	13aa8 <__assert_fail@plt+0x201c>
   13404:	movw	r1, #16963	; 0x4243
   13408:	cmp	r0, r1
   1340c:	bgt	14550 <__assert_fail@plt+0x2ac4>
   13410:	movw	r1, #19777	; 0x4d41
   13414:	movt	r1, #65363	; 0xff53
   13418:	cmp	r0, r1
   1341c:	bgt	1462c <__assert_fail@plt+0x2ba0>
   13420:	movw	r1, #5519	; 0x158f
   13424:	movt	r1, #51031	; 0xc757
   13428:	cmp	r0, r1
   1342c:	ble	148b8 <__assert_fail@plt+0x2e2c>
   13430:	movw	r1, #57825	; 0xe1e1
   13434:	movt	r1, #57589	; 0xe0f5
   13438:	cmp	r0, r1
   1343c:	ble	14aec <__assert_fail@plt+0x3060>
   13440:	movw	r1, #65419	; 0xff8b
   13444:	movt	r1, #63868	; 0xf97c
   13448:	cmp	r0, r1
   1344c:	ble	14ee0 <__assert_fail@plt+0x3454>
   13450:	movw	r1, #65420	; 0xff8c
   13454:	movt	r1, #63868	; 0xf97c
   13458:	cmp	r0, r1
   1345c:	beq	153a8 <__assert_fail@plt+0x391c>
   13460:	movw	r1, #59465	; 0xe849
   13464:	movt	r1, #63893	; 0xf995
   13468:	cmp	r0, r1
   1346c:	beq	153b4 <__assert_fail@plt+0x3928>
   13470:	movw	r1, #19778	; 0x4d42
   13474:	movt	r1, #65107	; 0xfe53
   13478:	cmp	r0, r1
   1347c:	bne	1567c <__assert_fail@plt+0x3bf0>
   13480:	movw	r0, #13676	; 0x356c
   13484:	movt	r0, #2
   13488:	b	156f4 <__assert_fail@plt+0x3c68>
   1348c:	movw	r0, #16868	; 0x41e4
   13490:	movt	r0, #3
   13494:	ldr	r0, [r0]
   13498:	ldr	r1, [r0, #20]
   1349c:	ldr	r2, [r0, #24]
   134a0:	cmp	r1, r2
   134a4:	bcs	15888 <__assert_fail@plt+0x3dfc>
   134a8:	add	r2, r1, #1
   134ac:	str	r2, [r0, #20]
   134b0:	mov	r0, #63	; 0x3f
   134b4:	strb	r0, [r1]
   134b8:	b	148ac <__assert_fail@plt+0x2e20>
   134bc:	ldr	r1, [r2]
   134c0:	ldr	r0, [r2, #4]
   134c4:	add	r8, sl, r6
   134c8:	add	r4, sl, #1
   134cc:	cmp	r6, #2
   134d0:	str	r6, [sp, #24]
   134d4:	str	r1, [sp, #12]
   134d8:	str	r0, [sp, #16]
   134dc:	blt	13b34 <__assert_fail@plt+0x20a8>
   134e0:	movw	r6, #14257	; 0x37b1
   134e4:	movw	r9, #12868	; 0x3244
   134e8:	mov	r7, r4
   134ec:	movt	r6, #2
   134f0:	movt	r9, #2
   134f4:	ldrb	r5, [r7]
   134f8:	mov	r0, r6
   134fc:	mov	r2, #8
   13500:	mov	r1, r5
   13504:	bl	11948 <memchr@plt>
   13508:	cmp	r0, #0
   1350c:	beq	13b38 <__assert_fail@plt+0x20ac>
   13510:	mov	r0, r9
   13514:	mov	r1, r5
   13518:	mov	r2, #6
   1351c:	bl	11948 <memchr@plt>
   13520:	cmp	r0, #0
   13524:	add	r7, r7, #1
   13528:	strbne	r5, [r4], #1
   1352c:	cmp	r7, r8
   13530:	bcc	134f4 <__assert_fail@plt+0x1a68>
   13534:	b	13b38 <__assert_fail@plt+0x20ac>
   13538:	ldr	r0, [r1, #4]
   1353c:	ldr	r1, [r1]
   13540:	add	r8, sl, r6
   13544:	add	r4, sl, #1
   13548:	cmp	r6, #2
   1354c:	str	r6, [sp, #24]
   13550:	str	r1, [sp, #12]
   13554:	str	r0, [sp, #16]
   13558:	blt	13c48 <__assert_fail@plt+0x21bc>
   1355c:	movw	r6, #14257	; 0x37b1
   13560:	movw	r9, #12868	; 0x3244
   13564:	mov	r7, r4
   13568:	movt	r6, #2
   1356c:	movt	r9, #2
   13570:	ldrb	r5, [r7]
   13574:	mov	r0, r6
   13578:	mov	r2, #8
   1357c:	mov	r1, r5
   13580:	bl	11948 <memchr@plt>
   13584:	cmp	r0, #0
   13588:	beq	13c4c <__assert_fail@plt+0x21c0>
   1358c:	mov	r0, r9
   13590:	mov	r1, r5
   13594:	mov	r2, #6
   13598:	bl	11948 <memchr@plt>
   1359c:	cmp	r0, #0
   135a0:	add	r7, r7, #1
   135a4:	strbne	r5, [r4], #1
   135a8:	cmp	r7, r8
   135ac:	bcc	13570 <__assert_fail@plt+0x1ae4>
   135b0:	b	13c4c <__assert_fail@plt+0x21c0>
   135b4:	ldr	r1, [r2, #8]
   135b8:	ldr	r0, [r2, #12]
   135bc:	add	r8, sl, r6
   135c0:	add	r7, sl, #1
   135c4:	cmp	r6, #2
   135c8:	str	r6, [sp, #24]
   135cc:	str	r1, [sp, #12]
   135d0:	str	r0, [sp, #16]
   135d4:	blt	13d5c <__assert_fail@plt+0x22d0>
   135d8:	movw	r6, #14257	; 0x37b1
   135dc:	movw	r9, #12778	; 0x31ea
   135e0:	mov	r5, r7
   135e4:	movt	r6, #2
   135e8:	movt	r9, #2
   135ec:	ldrb	r4, [r5]
   135f0:	mov	r0, r6
   135f4:	mov	r2, #8
   135f8:	mov	r1, r4
   135fc:	bl	11948 <memchr@plt>
   13600:	cmp	r0, #0
   13604:	beq	13d60 <__assert_fail@plt+0x22d4>
   13608:	mov	r0, r9
   1360c:	mov	r1, r4
   13610:	mov	r2, #4
   13614:	bl	11948 <memchr@plt>
   13618:	cmp	r0, #0
   1361c:	add	r5, r5, #1
   13620:	strbne	r4, [r7], #1
   13624:	cmp	r5, r8
   13628:	bcc	135ec <__assert_fail@plt+0x1b60>
   1362c:	b	13d60 <__assert_fail@plt+0x22d4>
   13630:	ldr	r1, [r0, #40]	; 0x28
   13634:	ldr	r0, [r0, #44]	; 0x2c
   13638:	add	r8, sl, r6
   1363c:	add	r7, sl, #1
   13640:	cmp	r6, #2
   13644:	str	r6, [sp, #24]
   13648:	str	r1, [sp, #12]
   1364c:	str	r0, [sp, #16]
   13650:	blt	13e5c <__assert_fail@plt+0x23d0>
   13654:	movw	r6, #14257	; 0x37b1
   13658:	movw	r9, #12868	; 0x3244
   1365c:	mov	r5, r7
   13660:	movt	r6, #2
   13664:	movt	r9, #2
   13668:	ldrb	r4, [r5]
   1366c:	mov	r0, r6
   13670:	mov	r2, #8
   13674:	mov	r1, r4
   13678:	bl	11948 <memchr@plt>
   1367c:	cmp	r0, #0
   13680:	beq	13e60 <__assert_fail@plt+0x23d4>
   13684:	mov	r0, r9
   13688:	mov	r1, r4
   1368c:	mov	r2, #6
   13690:	bl	11948 <memchr@plt>
   13694:	cmp	r0, #0
   13698:	add	r5, r5, #1
   1369c:	strbne	r4, [r7], #1
   136a0:	cmp	r5, r8
   136a4:	bcc	13668 <__assert_fail@plt+0x1bdc>
   136a8:	b	13e60 <__assert_fail@plt+0x23d4>
   136ac:	ldr	r0, [r1, #12]
   136b0:	ldr	r1, [r1, #8]
   136b4:	add	r8, sl, r6
   136b8:	add	r4, sl, #1
   136bc:	cmp	r6, #2
   136c0:	str	r6, [sp, #24]
   136c4:	str	r1, [sp, #12]
   136c8:	str	r0, [sp, #16]
   136cc:	blt	13f5c <__assert_fail@plt+0x24d0>
   136d0:	movw	r6, #14257	; 0x37b1
   136d4:	movw	r9, #12868	; 0x3244
   136d8:	mov	r7, r4
   136dc:	movt	r6, #2
   136e0:	movt	r9, #2
   136e4:	ldrb	r5, [r7]
   136e8:	mov	r0, r6
   136ec:	mov	r2, #8
   136f0:	mov	r1, r5
   136f4:	bl	11948 <memchr@plt>
   136f8:	cmp	r0, #0
   136fc:	beq	13f60 <__assert_fail@plt+0x24d4>
   13700:	mov	r0, r9
   13704:	mov	r1, r5
   13708:	mov	r2, #6
   1370c:	bl	11948 <memchr@plt>
   13710:	cmp	r0, #0
   13714:	add	r7, r7, #1
   13718:	strbne	r5, [r4], #1
   1371c:	cmp	r7, r8
   13720:	bcc	136e4 <__assert_fail@plt+0x1c58>
   13724:	b	13f60 <__assert_fail@plt+0x24d4>
   13728:	mov	r1, sl
   1372c:	add	sl, sl, r6
   13730:	mov	r7, r6
   13734:	cmp	r6, #2
   13738:	add	r8, r1, #1
   1373c:	str	r1, [sp, #20]
   13740:	ldr	r1, [r0, #48]	; 0x30
   13744:	ldr	r0, [r0, #52]	; 0x34
   13748:	str	r1, [sp, #24]
   1374c:	str	r0, [sp, #16]
   13750:	blt	1405c <__assert_fail@plt+0x25d0>
   13754:	movw	r6, #14257	; 0x37b1
   13758:	movw	r9, #12786	; 0x31f2
   1375c:	mov	r4, r8
   13760:	movt	r6, #2
   13764:	movt	r9, #2
   13768:	ldrb	r5, [r4]
   1376c:	mov	r0, r6
   13770:	mov	r2, #8
   13774:	mov	r1, r5
   13778:	bl	11948 <memchr@plt>
   1377c:	cmp	r0, #0
   13780:	beq	14060 <__assert_fail@plt+0x25d4>
   13784:	mov	r0, r9
   13788:	mov	r1, r5
   1378c:	mov	r2, #4
   13790:	bl	11948 <memchr@plt>
   13794:	cmp	r0, #0
   13798:	add	r4, r4, #1
   1379c:	strbne	r5, [r8], #1
   137a0:	cmp	r4, sl
   137a4:	bcc	13768 <__assert_fail@plt+0x1cdc>
   137a8:	b	14060 <__assert_fail@plt+0x25d4>
   137ac:	ldr	r0, [r0, #56]	; 0x38
   137b0:	add	r8, sl, r6
   137b4:	add	r4, sl, #1
   137b8:	cmp	r6, #2
   137bc:	str	r6, [sp, #24]
   137c0:	str	r0, [sp, #16]
   137c4:	blt	14154 <__assert_fail@plt+0x26c8>
   137c8:	movw	r7, #14257	; 0x37b1
   137cc:	movw	r9, #12778	; 0x31ea
   137d0:	mov	r6, r4
   137d4:	movt	r7, #2
   137d8:	movt	r9, #2
   137dc:	ldrb	r5, [r6]
   137e0:	mov	r0, r7
   137e4:	mov	r2, #8
   137e8:	mov	r1, r5
   137ec:	bl	11948 <memchr@plt>
   137f0:	cmp	r0, #0
   137f4:	beq	14158 <__assert_fail@plt+0x26cc>
   137f8:	mov	r0, r9
   137fc:	mov	r1, r5
   13800:	mov	r2, #4
   13804:	bl	11948 <memchr@plt>
   13808:	cmp	r0, #0
   1380c:	add	r6, r6, #1
   13810:	strbne	r5, [r4], #1
   13814:	cmp	r6, r8
   13818:	bcc	137dc <__assert_fail@plt+0x1d50>
   1381c:	b	14158 <__assert_fail@plt+0x26cc>
   13820:	mov	r0, sl
   13824:	mov	r1, r6
   13828:	add	sl, sl, r6
   1382c:	add	r6, r0, #1
   13830:	mov	r4, r1
   13834:	cmp	r1, #2
   13838:	str	r0, [sp, #20]
   1383c:	blt	14264 <__assert_fail@plt+0x27d8>
   13840:	movw	r9, #14257	; 0x37b1
   13844:	movw	r8, #14895	; 0x3a2f
   13848:	mov	r7, r6
   1384c:	movt	r9, #2
   13850:	movt	r8, #2
   13854:	ldrb	r5, [r7]
   13858:	mov	r0, r9
   1385c:	mov	r2, #8
   13860:	mov	r1, r5
   13864:	bl	11948 <memchr@plt>
   13868:	cmp	r0, #0
   1386c:	beq	14268 <__assert_fail@plt+0x27dc>
   13870:	mov	r0, r8
   13874:	mov	r1, r5
   13878:	mov	r2, #2
   1387c:	bl	11948 <memchr@plt>
   13880:	cmp	r0, #0
   13884:	add	r7, r7, #1
   13888:	strbne	r5, [r6], #1
   1388c:	cmp	r7, sl
   13890:	bcc	13854 <__assert_fail@plt+0x1dc8>
   13894:	b	14268 <__assert_fail@plt+0x27dc>
   13898:	ldr	r0, [r0, #4]
   1389c:	add	r8, sl, r6
   138a0:	add	r4, sl, #1
   138a4:	cmp	r6, #2
   138a8:	str	r6, [sp, #24]
   138ac:	str	r0, [sp, #16]
   138b0:	blt	14358 <__assert_fail@plt+0x28cc>
   138b4:	movw	r7, #14257	; 0x37b1
   138b8:	movw	r9, #12778	; 0x31ea
   138bc:	mov	r6, r4
   138c0:	movt	r7, #2
   138c4:	movt	r9, #2
   138c8:	ldrb	r5, [r6]
   138cc:	mov	r0, r7
   138d0:	mov	r2, #8
   138d4:	mov	r1, r5
   138d8:	bl	11948 <memchr@plt>
   138dc:	cmp	r0, #0
   138e0:	beq	1435c <__assert_fail@plt+0x28d0>
   138e4:	mov	r0, r9
   138e8:	mov	r1, r5
   138ec:	mov	r2, #4
   138f0:	bl	11948 <memchr@plt>
   138f4:	cmp	r0, #0
   138f8:	add	r6, r6, #1
   138fc:	strbne	r5, [r4], #1
   13900:	cmp	r6, r8
   13904:	bcc	138c8 <__assert_fail@plt+0x1e3c>
   13908:	b	1435c <__assert_fail@plt+0x28d0>
   1390c:	ldr	r0, [r0]
   13910:	add	r8, sl, r6
   13914:	add	r4, sl, #1
   13918:	cmp	r6, #2
   1391c:	str	r6, [sp, #24]
   13920:	str	r0, [sp, #16]
   13924:	blt	14454 <__assert_fail@plt+0x29c8>
   13928:	movw	r7, #14257	; 0x37b1
   1392c:	movw	r9, #12786	; 0x31f2
   13930:	mov	r6, r4
   13934:	movt	r7, #2
   13938:	movt	r9, #2
   1393c:	ldrb	r5, [r6]
   13940:	mov	r0, r7
   13944:	mov	r2, #8
   13948:	mov	r1, r5
   1394c:	bl	11948 <memchr@plt>
   13950:	cmp	r0, #0
   13954:	beq	14458 <__assert_fail@plt+0x29cc>
   13958:	mov	r0, r9
   1395c:	mov	r1, r5
   13960:	mov	r2, #4
   13964:	bl	11948 <memchr@plt>
   13968:	cmp	r0, #0
   1396c:	add	r6, r6, #1
   13970:	strbne	r5, [r4], #1
   13974:	cmp	r6, r8
   13978:	bcc	1393c <__assert_fail@plt+0x1eb0>
   1397c:	b	14458 <__assert_fail@plt+0x29cc>
   13980:	mov	r6, sl
   13984:	cmp	r6, r9
   13988:	bcs	13a8c <__assert_fail@plt+0x2000>
   1398c:	ldr	r0, [sp, #24]
   13990:	ldr	r1, [sp, #20]
   13994:	sub	r0, r0, r6
   13998:	add	r0, r1, r0
   1399c:	cmp	r0, #16
   139a0:	bcc	13a7c <__assert_fail@plt+0x1ff0>
   139a4:	cmp	sl, r9
   139a8:	addcc	r1, sl, r0
   139ac:	cmpcc	r6, r1
   139b0:	bcc	13a7c <__assert_fail@plt+0x1ff0>
   139b4:	str	r0, [sp, #16]
   139b8:	bic	r0, r0, #15
   139bc:	mov	r2, #1
   139c0:	mov	r3, #0
   139c4:	sub	r5, r0, #16
   139c8:	str	r0, [sp, #12]
   139cc:	add	r7, r2, r5, lsr #4
   139d0:	cmp	r5, #48	; 0x30
   139d4:	and	r0, r7, #3
   139d8:	str	r0, [sp, #24]
   139dc:	bcc	13a3c <__assert_fail@plt+0x1fb0>
   139e0:	ldr	r0, [sp, #24]
   139e4:	mov	r3, #0
   139e8:	mov	r5, #48	; 0x30
   139ec:	sub	r7, r7, r0
   139f0:	add	r4, r6, r3
   139f4:	add	r1, sl, r3
   139f8:	subs	r7, r7, #4
   139fc:	add	r3, r3, #64	; 0x40
   13a00:	mov	r2, r4
   13a04:	mov	ip, r1
   13a08:	add	lr, r4, #16
   13a0c:	add	r0, r1, #16
   13a10:	vld1.8	{d16-d17}, [r2], r5
   13a14:	vst1.8	{d16-d17}, [ip], r5
   13a18:	vld1.8	{d16-d17}, [lr]
   13a1c:	vst1.8	{d16-d17}, [r0]
   13a20:	add	r0, r4, #32
   13a24:	vld1.8	{d16-d17}, [r0]
   13a28:	add	r0, r1, #32
   13a2c:	vst1.8	{d16-d17}, [r0]
   13a30:	vld1.8	{d16-d17}, [r2]
   13a34:	vst1.8	{d16-d17}, [ip]
   13a38:	bne	139f0 <__assert_fail@plt+0x1f64>
   13a3c:	ldr	r0, [sp, #24]
   13a40:	cmp	r0, #0
   13a44:	beq	13a64 <__assert_fail@plt+0x1fd8>
   13a48:	add	r7, sl, r3
   13a4c:	add	r3, r6, r3
   13a50:	rsb	r2, r0, #0
   13a54:	vld1.8	{d16-d17}, [r3]!
   13a58:	adds	r2, r2, #1
   13a5c:	vst1.8	{d16-d17}, [r7]!
   13a60:	bcc	13a54 <__assert_fail@plt+0x1fc8>
   13a64:	ldr	r1, [sp, #12]
   13a68:	ldr	r0, [sp, #16]
   13a6c:	add	sl, sl, r1
   13a70:	cmp	r1, r0
   13a74:	beq	13a8c <__assert_fail@plt+0x2000>
   13a78:	add	r6, r6, r1
   13a7c:	ldrb	r0, [r6], #1
   13a80:	cmp	r9, r6
   13a84:	strb	r0, [sl], #1
   13a88:	bne	13a7c <__assert_fail@plt+0x1ff0>
   13a8c:	movw	r0, #27756	; 0x6c6c
   13a90:	ldr	r1, [sp, #20]
   13a94:	asr	r3, r8, #31
   13a98:	mov	r2, r8
   13a9c:	movt	r0, #117	; 0x75
   13aa0:	str	r0, [sl]
   13aa4:	b	14824 <__assert_fail@plt+0x2d98>
   13aa8:	movw	r1, #255	; 0xff
   13aac:	movt	r1, #21529	; 0x5419
   13ab0:	cmp	r0, r1
   13ab4:	bgt	145b0 <__assert_fail@plt+0x2b24>
   13ab8:	movw	r1, #17993	; 0x4649
   13abc:	movt	r1, #12627	; 0x3153
   13ac0:	cmp	r0, r1
   13ac4:	ble	14670 <__assert_fail@plt+0x2be4>
   13ac8:	movw	r1, #18002	; 0x4652
   13acc:	movt	r1, #18256	; 0x4750
   13ad0:	cmp	r0, r1
   13ad4:	ble	14904 <__assert_fail@plt+0x2e78>
   13ad8:	movw	r1, #12620	; 0x314c
   13adc:	movt	r1, #21318	; 0x5346
   13ae0:	cmp	r0, r1
   13ae4:	ble	14b28 <__assert_fail@plt+0x309c>
   13ae8:	movw	r1, #18501	; 0x4845
   13aec:	movt	r1, #21318	; 0x5346
   13af0:	cmp	r0, r1
   13af4:	ble	14f0c <__assert_fail@plt+0x3480>
   13af8:	movw	r1, #18502	; 0x4846
   13afc:	movt	r1, #21318	; 0x5346
   13b00:	cmp	r0, r1
   13b04:	beq	153c0 <__assert_fail@plt+0x3934>
   13b08:	movw	r1, #21582	; 0x544e
   13b0c:	movt	r1, #21318	; 0x5346
   13b10:	cmp	r0, r1
   13b14:	beq	153cc <__assert_fail@plt+0x3940>
   13b18:	movw	r1, #17227	; 0x434b
   13b1c:	movt	r1, #21327	; 0x534f
   13b20:	cmp	r0, r1
   13b24:	bne	1567c <__assert_fail@plt+0x3bf0>
   13b28:	movw	r0, #13686	; 0x3576
   13b2c:	movt	r0, #2
   13b30:	b	156f4 <__assert_fail@plt+0x3c68>
   13b34:	mov	r7, r4
   13b38:	cmp	r7, r8
   13b3c:	bcs	14050 <__assert_fail@plt+0x25c4>
   13b40:	ldr	r0, [sp, #24]
   13b44:	sub	r0, r0, r7
   13b48:	add	r9, sl, r0
   13b4c:	cmp	r9, #16
   13b50:	bcc	13c2c <__assert_fail@plt+0x21a0>
   13b54:	cmp	r4, r8
   13b58:	addcc	r1, r4, r9
   13b5c:	cmpcc	r7, r1
   13b60:	bcc	13c2c <__assert_fail@plt+0x21a0>
   13b64:	bic	r0, r9, #15
   13b68:	mov	r2, #1
   13b6c:	mov	r3, #0
   13b70:	str	sl, [sp, #20]
   13b74:	sub	r5, r0, #16
   13b78:	str	r0, [sp, #8]
   13b7c:	add	r6, r2, r5, lsr #4
   13b80:	cmp	r5, #48	; 0x30
   13b84:	and	r0, r6, #3
   13b88:	str	r0, [sp, #24]
   13b8c:	bcc	13bec <__assert_fail@plt+0x2160>
   13b90:	ldr	r0, [sp, #24]
   13b94:	mov	r3, #0
   13b98:	mov	sl, #48	; 0x30
   13b9c:	sub	r6, r6, r0
   13ba0:	add	r2, r7, r3
   13ba4:	add	r0, r4, r3
   13ba8:	subs	r6, r6, #4
   13bac:	add	r3, r3, #64	; 0x40
   13bb0:	mov	lr, r2
   13bb4:	mov	r5, r0
   13bb8:	add	ip, r2, #16
   13bbc:	add	r1, r0, #16
   13bc0:	add	r0, r0, #32
   13bc4:	vld1.8	{d16-d17}, [lr], sl
   13bc8:	vst1.8	{d16-d17}, [r5], sl
   13bcc:	vld1.8	{d16-d17}, [ip]
   13bd0:	vst1.8	{d16-d17}, [r1]
   13bd4:	add	r1, r2, #32
   13bd8:	vld1.8	{d16-d17}, [r1]
   13bdc:	vst1.8	{d16-d17}, [r0]
   13be0:	vld1.8	{d16-d17}, [lr]
   13be4:	vst1.8	{d16-d17}, [r5]
   13be8:	bne	13ba0 <__assert_fail@plt+0x2114>
   13bec:	ldr	r0, [sp, #24]
   13bf0:	cmp	r0, #0
   13bf4:	beq	13c14 <__assert_fail@plt+0x2188>
   13bf8:	add	r6, r4, r3
   13bfc:	add	r3, r7, r3
   13c00:	rsb	r2, r0, #0
   13c04:	vld1.8	{d16-d17}, [r3]!
   13c08:	adds	r2, r2, #1
   13c0c:	vst1.8	{d16-d17}, [r6]!
   13c10:	bcc	13c04 <__assert_fail@plt+0x2178>
   13c14:	ldr	r0, [sp, #8]
   13c18:	ldr	sl, [sp, #20]
   13c1c:	add	r4, r4, r0
   13c20:	cmp	r0, r9
   13c24:	beq	14050 <__assert_fail@plt+0x25c4>
   13c28:	add	r7, r7, r0
   13c2c:	ldr	r3, [sp, #16]
   13c30:	ldr	r2, [sp, #12]
   13c34:	ldrb	r0, [r7], #1
   13c38:	cmp	r8, r7
   13c3c:	strb	r0, [r4], #1
   13c40:	bne	13c34 <__assert_fail@plt+0x21a8>
   13c44:	b	147e8 <__assert_fail@plt+0x2d5c>
   13c48:	mov	r7, r4
   13c4c:	cmp	r7, r8
   13c50:	bcs	14050 <__assert_fail@plt+0x25c4>
   13c54:	ldr	r0, [sp, #24]
   13c58:	sub	r0, r0, r7
   13c5c:	add	r9, sl, r0
   13c60:	cmp	r9, #16
   13c64:	bcc	13d40 <__assert_fail@plt+0x22b4>
   13c68:	cmp	r4, r8
   13c6c:	addcc	r1, r4, r9
   13c70:	cmpcc	r7, r1
   13c74:	bcc	13d40 <__assert_fail@plt+0x22b4>
   13c78:	bic	r0, r9, #15
   13c7c:	mov	r2, #1
   13c80:	mov	r3, #0
   13c84:	str	sl, [sp, #20]
   13c88:	sub	r5, r0, #16
   13c8c:	str	r0, [sp, #8]
   13c90:	add	r6, r2, r5, lsr #4
   13c94:	cmp	r5, #48	; 0x30
   13c98:	and	r0, r6, #3
   13c9c:	str	r0, [sp, #24]
   13ca0:	bcc	13d00 <__assert_fail@plt+0x2274>
   13ca4:	ldr	r0, [sp, #24]
   13ca8:	mov	r3, #0
   13cac:	mov	sl, #48	; 0x30
   13cb0:	sub	r6, r6, r0
   13cb4:	add	r2, r7, r3
   13cb8:	add	r0, r4, r3
   13cbc:	subs	r6, r6, #4
   13cc0:	add	r3, r3, #64	; 0x40
   13cc4:	mov	lr, r2
   13cc8:	mov	r5, r0
   13ccc:	add	ip, r2, #16
   13cd0:	add	r1, r0, #16
   13cd4:	add	r0, r0, #32
   13cd8:	vld1.8	{d16-d17}, [lr], sl
   13cdc:	vst1.8	{d16-d17}, [r5], sl
   13ce0:	vld1.8	{d16-d17}, [ip]
   13ce4:	vst1.8	{d16-d17}, [r1]
   13ce8:	add	r1, r2, #32
   13cec:	vld1.8	{d16-d17}, [r1]
   13cf0:	vst1.8	{d16-d17}, [r0]
   13cf4:	vld1.8	{d16-d17}, [lr]
   13cf8:	vst1.8	{d16-d17}, [r5]
   13cfc:	bne	13cb4 <__assert_fail@plt+0x2228>
   13d00:	ldr	r0, [sp, #24]
   13d04:	cmp	r0, #0
   13d08:	beq	13d28 <__assert_fail@plt+0x229c>
   13d0c:	add	r6, r4, r3
   13d10:	add	r3, r7, r3
   13d14:	rsb	r2, r0, #0
   13d18:	vld1.8	{d16-d17}, [r3]!
   13d1c:	adds	r2, r2, #1
   13d20:	vst1.8	{d16-d17}, [r6]!
   13d24:	bcc	13d18 <__assert_fail@plt+0x228c>
   13d28:	ldr	r0, [sp, #8]
   13d2c:	ldr	sl, [sp, #20]
   13d30:	add	r4, r4, r0
   13d34:	cmp	r0, r9
   13d38:	beq	14050 <__assert_fail@plt+0x25c4>
   13d3c:	add	r7, r7, r0
   13d40:	ldr	r3, [sp, #16]
   13d44:	ldr	r2, [sp, #12]
   13d48:	ldrb	r0, [r7], #1
   13d4c:	cmp	r8, r7
   13d50:	strb	r0, [r4], #1
   13d54:	bne	13d48 <__assert_fail@plt+0x22bc>
   13d58:	b	147e8 <__assert_fail@plt+0x2d5c>
   13d5c:	mov	r5, r7
   13d60:	cmp	r5, r8
   13d64:	bcs	13e50 <__assert_fail@plt+0x23c4>
   13d68:	ldr	r0, [sp, #24]
   13d6c:	sub	r0, r0, r5
   13d70:	add	r9, sl, r0
   13d74:	cmp	r9, #16
   13d78:	bcc	1477c <__assert_fail@plt+0x2cf0>
   13d7c:	cmp	r7, r8
   13d80:	addcc	r1, r7, r9
   13d84:	cmpcc	r5, r1
   13d88:	bcc	1477c <__assert_fail@plt+0x2cf0>
   13d8c:	bic	r0, r9, #15
   13d90:	mov	r2, #1
   13d94:	mov	r3, #0
   13d98:	str	sl, [sp, #20]
   13d9c:	sub	r4, r0, #16
   13da0:	str	r0, [sp, #8]
   13da4:	add	r6, r2, r4, lsr #4
   13da8:	cmp	r4, #48	; 0x30
   13dac:	and	r0, r6, #3
   13db0:	str	r0, [sp, #24]
   13db4:	bcc	13e14 <__assert_fail@plt+0x2388>
   13db8:	ldr	r0, [sp, #24]
   13dbc:	mov	r3, #0
   13dc0:	mov	sl, #48	; 0x30
   13dc4:	sub	r6, r6, r0
   13dc8:	add	r2, r5, r3
   13dcc:	add	r0, r7, r3
   13dd0:	subs	r6, r6, #4
   13dd4:	add	r3, r3, #64	; 0x40
   13dd8:	mov	lr, r2
   13ddc:	mov	r4, r0
   13de0:	add	ip, r2, #16
   13de4:	add	r1, r0, #16
   13de8:	add	r0, r0, #32
   13dec:	vld1.8	{d16-d17}, [lr], sl
   13df0:	vst1.8	{d16-d17}, [r4], sl
   13df4:	vld1.8	{d16-d17}, [ip]
   13df8:	vst1.8	{d16-d17}, [r1]
   13dfc:	add	r1, r2, #32
   13e00:	vld1.8	{d16-d17}, [r1]
   13e04:	vst1.8	{d16-d17}, [r0]
   13e08:	vld1.8	{d16-d17}, [lr]
   13e0c:	vst1.8	{d16-d17}, [r4]
   13e10:	bne	13dc8 <__assert_fail@plt+0x233c>
   13e14:	ldr	r0, [sp, #24]
   13e18:	cmp	r0, #0
   13e1c:	beq	13e3c <__assert_fail@plt+0x23b0>
   13e20:	add	r6, r7, r3
   13e24:	add	r3, r5, r3
   13e28:	rsb	r2, r0, #0
   13e2c:	vld1.8	{d16-d17}, [r3]!
   13e30:	adds	r2, r2, #1
   13e34:	vst1.8	{d16-d17}, [r6]!
   13e38:	bcc	13e2c <__assert_fail@plt+0x23a0>
   13e3c:	ldr	r0, [sp, #8]
   13e40:	ldr	sl, [sp, #20]
   13e44:	add	r7, r7, r0
   13e48:	cmp	r0, r9
   13e4c:	bne	14778 <__assert_fail@plt+0x2cec>
   13e50:	ldr	r3, [sp, #16]
   13e54:	ldr	r2, [sp, #12]
   13e58:	b	14794 <__assert_fail@plt+0x2d08>
   13e5c:	mov	r5, r7
   13e60:	cmp	r5, r8
   13e64:	bcs	13f50 <__assert_fail@plt+0x24c4>
   13e68:	ldr	r0, [sp, #24]
   13e6c:	sub	r0, r0, r5
   13e70:	add	r9, sl, r0
   13e74:	cmp	r9, #16
   13e78:	bcc	147a4 <__assert_fail@plt+0x2d18>
   13e7c:	cmp	r7, r8
   13e80:	addcc	r1, r7, r9
   13e84:	cmpcc	r5, r1
   13e88:	bcc	147a4 <__assert_fail@plt+0x2d18>
   13e8c:	bic	r0, r9, #15
   13e90:	mov	r2, #1
   13e94:	mov	r3, #0
   13e98:	str	sl, [sp, #20]
   13e9c:	sub	r4, r0, #16
   13ea0:	str	r0, [sp, #8]
   13ea4:	add	r6, r2, r4, lsr #4
   13ea8:	cmp	r4, #48	; 0x30
   13eac:	and	r0, r6, #3
   13eb0:	str	r0, [sp, #24]
   13eb4:	bcc	13f14 <__assert_fail@plt+0x2488>
   13eb8:	ldr	r0, [sp, #24]
   13ebc:	mov	r3, #0
   13ec0:	mov	sl, #48	; 0x30
   13ec4:	sub	r6, r6, r0
   13ec8:	add	r2, r5, r3
   13ecc:	add	r0, r7, r3
   13ed0:	subs	r6, r6, #4
   13ed4:	add	r3, r3, #64	; 0x40
   13ed8:	mov	lr, r2
   13edc:	mov	r4, r0
   13ee0:	add	ip, r2, #16
   13ee4:	add	r1, r0, #16
   13ee8:	add	r0, r0, #32
   13eec:	vld1.8	{d16-d17}, [lr], sl
   13ef0:	vst1.8	{d16-d17}, [r4], sl
   13ef4:	vld1.8	{d16-d17}, [ip]
   13ef8:	vst1.8	{d16-d17}, [r1]
   13efc:	add	r1, r2, #32
   13f00:	vld1.8	{d16-d17}, [r1]
   13f04:	vst1.8	{d16-d17}, [r0]
   13f08:	vld1.8	{d16-d17}, [lr]
   13f0c:	vst1.8	{d16-d17}, [r4]
   13f10:	bne	13ec8 <__assert_fail@plt+0x243c>
   13f14:	ldr	r0, [sp, #24]
   13f18:	cmp	r0, #0
   13f1c:	beq	13f3c <__assert_fail@plt+0x24b0>
   13f20:	add	r6, r7, r3
   13f24:	add	r3, r5, r3
   13f28:	rsb	r2, r0, #0
   13f2c:	vld1.8	{d16-d17}, [r3]!
   13f30:	adds	r2, r2, #1
   13f34:	vst1.8	{d16-d17}, [r6]!
   13f38:	bcc	13f2c <__assert_fail@plt+0x24a0>
   13f3c:	ldr	r0, [sp, #8]
   13f40:	ldr	sl, [sp, #20]
   13f44:	add	r7, r7, r0
   13f48:	cmp	r0, r9
   13f4c:	bne	147a0 <__assert_fail@plt+0x2d14>
   13f50:	ldr	r3, [sp, #16]
   13f54:	ldr	r2, [sp, #12]
   13f58:	b	147bc <__assert_fail@plt+0x2d30>
   13f5c:	mov	r7, r4
   13f60:	cmp	r7, r8
   13f64:	bcs	14050 <__assert_fail@plt+0x25c4>
   13f68:	ldr	r0, [sp, #24]
   13f6c:	sub	r0, r0, r7
   13f70:	add	r9, sl, r0
   13f74:	cmp	r9, #16
   13f78:	bcc	147d0 <__assert_fail@plt+0x2d44>
   13f7c:	cmp	r4, r8
   13f80:	addcc	r1, r4, r9
   13f84:	cmpcc	r7, r1
   13f88:	bcc	147d0 <__assert_fail@plt+0x2d44>
   13f8c:	bic	r0, r9, #15
   13f90:	mov	r2, #1
   13f94:	mov	r3, #0
   13f98:	str	sl, [sp, #20]
   13f9c:	sub	r5, r0, #16
   13fa0:	str	r0, [sp, #8]
   13fa4:	add	r6, r2, r5, lsr #4
   13fa8:	cmp	r5, #48	; 0x30
   13fac:	and	r0, r6, #3
   13fb0:	str	r0, [sp, #24]
   13fb4:	bcc	14014 <__assert_fail@plt+0x2588>
   13fb8:	ldr	r0, [sp, #24]
   13fbc:	mov	r3, #0
   13fc0:	mov	sl, #48	; 0x30
   13fc4:	sub	r6, r6, r0
   13fc8:	add	r2, r7, r3
   13fcc:	add	r0, r4, r3
   13fd0:	subs	r6, r6, #4
   13fd4:	add	r3, r3, #64	; 0x40
   13fd8:	mov	lr, r2
   13fdc:	mov	r5, r0
   13fe0:	add	ip, r2, #16
   13fe4:	add	r1, r0, #16
   13fe8:	add	r0, r0, #32
   13fec:	vld1.8	{d16-d17}, [lr], sl
   13ff0:	vst1.8	{d16-d17}, [r5], sl
   13ff4:	vld1.8	{d16-d17}, [ip]
   13ff8:	vst1.8	{d16-d17}, [r1]
   13ffc:	add	r1, r2, #32
   14000:	vld1.8	{d16-d17}, [r1]
   14004:	vst1.8	{d16-d17}, [r0]
   14008:	vld1.8	{d16-d17}, [lr]
   1400c:	vst1.8	{d16-d17}, [r5]
   14010:	bne	13fc8 <__assert_fail@plt+0x253c>
   14014:	ldr	r0, [sp, #24]
   14018:	cmp	r0, #0
   1401c:	beq	1403c <__assert_fail@plt+0x25b0>
   14020:	add	r6, r4, r3
   14024:	add	r3, r7, r3
   14028:	rsb	r2, r0, #0
   1402c:	vld1.8	{d16-d17}, [r3]!
   14030:	adds	r2, r2, #1
   14034:	vst1.8	{d16-d17}, [r6]!
   14038:	bcc	1402c <__assert_fail@plt+0x25a0>
   1403c:	ldr	r0, [sp, #8]
   14040:	ldr	sl, [sp, #20]
   14044:	add	r4, r4, r0
   14048:	cmp	r0, r9
   1404c:	bne	147cc <__assert_fail@plt+0x2d40>
   14050:	ldr	r3, [sp, #16]
   14054:	ldr	r2, [sp, #12]
   14058:	b	147e8 <__assert_fail@plt+0x2d5c>
   1405c:	mov	r4, r8
   14060:	cmp	r4, sl
   14064:	bcs	14148 <__assert_fail@plt+0x26bc>
   14068:	ldr	r1, [sp, #20]
   1406c:	sub	r0, r7, r4
   14070:	add	r9, r1, r0
   14074:	cmp	r9, #16
   14078:	bcc	147fc <__assert_fail@plt+0x2d70>
   1407c:	cmp	r8, sl
   14080:	addcc	r1, r8, r9
   14084:	cmpcc	r4, r1
   14088:	bcc	147fc <__assert_fail@plt+0x2d70>
   1408c:	bic	r0, r9, #15
   14090:	mov	r2, #1
   14094:	mov	r3, #0
   14098:	sub	r5, r0, #16
   1409c:	str	r0, [sp, #8]
   140a0:	add	r6, r2, r5, lsr #4
   140a4:	cmp	r5, #48	; 0x30
   140a8:	and	r0, r6, #3
   140ac:	str	r0, [sp, #12]
   140b0:	bcc	14110 <__assert_fail@plt+0x2684>
   140b4:	ldr	r0, [sp, #12]
   140b8:	mov	r3, #0
   140bc:	mov	lr, #48	; 0x30
   140c0:	sub	r6, r6, r0
   140c4:	add	r2, r4, r3
   140c8:	add	r0, r8, r3
   140cc:	subs	r6, r6, #4
   140d0:	add	r3, r3, #64	; 0x40
   140d4:	mov	r1, r2
   140d8:	mov	r5, r0
   140dc:	add	ip, r2, #16
   140e0:	add	r7, r0, #16
   140e4:	add	r2, r2, #32
   140e8:	add	r0, r0, #32
   140ec:	vld1.8	{d16-d17}, [r1], lr
   140f0:	vst1.8	{d16-d17}, [r5], lr
   140f4:	vld1.8	{d16-d17}, [ip]
   140f8:	vst1.8	{d16-d17}, [r7]
   140fc:	vld1.8	{d16-d17}, [r2]
   14100:	vst1.8	{d16-d17}, [r0]
   14104:	vld1.8	{d16-d17}, [r1]
   14108:	vst1.8	{d16-d17}, [r5]
   1410c:	bne	140c4 <__assert_fail@plt+0x2638>
   14110:	ldr	r0, [sp, #12]
   14114:	cmp	r0, #0
   14118:	beq	14138 <__assert_fail@plt+0x26ac>
   1411c:	add	r6, r8, r3
   14120:	add	r3, r4, r3
   14124:	rsb	r2, r0, #0
   14128:	vld1.8	{d16-d17}, [r3]!
   1412c:	adds	r2, r2, #1
   14130:	vst1.8	{d16-d17}, [r6]!
   14134:	bcc	14128 <__assert_fail@plt+0x269c>
   14138:	ldr	r0, [sp, #8]
   1413c:	add	r8, r8, r0
   14140:	cmp	r0, r9
   14144:	bne	147f8 <__assert_fail@plt+0x2d6c>
   14148:	ldr	r3, [sp, #24]
   1414c:	ldr	r2, [sp, #16]
   14150:	b	14814 <__assert_fail@plt+0x2d88>
   14154:	mov	r6, r4
   14158:	cmp	r6, r8
   1415c:	bcs	1444c <__assert_fail@plt+0x29c0>
   14160:	ldr	r0, [sp, #24]
   14164:	sub	r0, r0, r6
   14168:	add	r9, sl, r0
   1416c:	cmp	r9, #16
   14170:	bcc	1424c <__assert_fail@plt+0x27c0>
   14174:	cmp	r4, r8
   14178:	addcc	r1, r4, r9
   1417c:	cmpcc	r6, r1
   14180:	bcc	1424c <__assert_fail@plt+0x27c0>
   14184:	bic	r0, r9, #15
   14188:	mov	r2, #1
   1418c:	mov	r3, #0
   14190:	str	sl, [sp, #20]
   14194:	sub	r5, r0, #16
   14198:	str	r0, [sp, #12]
   1419c:	add	r7, r2, r5, lsr #4
   141a0:	cmp	r5, #48	; 0x30
   141a4:	and	r0, r7, #3
   141a8:	str	r0, [sp, #24]
   141ac:	bcc	1420c <__assert_fail@plt+0x2780>
   141b0:	ldr	r0, [sp, #24]
   141b4:	mov	r3, #0
   141b8:	mov	sl, #48	; 0x30
   141bc:	sub	r7, r7, r0
   141c0:	add	r2, r6, r3
   141c4:	add	r0, r4, r3
   141c8:	subs	r7, r7, #4
   141cc:	add	r3, r3, #64	; 0x40
   141d0:	mov	lr, r2
   141d4:	mov	r5, r0
   141d8:	add	ip, r2, #16
   141dc:	add	r1, r0, #16
   141e0:	add	r0, r0, #32
   141e4:	vld1.8	{d16-d17}, [lr], sl
   141e8:	vst1.8	{d16-d17}, [r5], sl
   141ec:	vld1.8	{d16-d17}, [ip]
   141f0:	vst1.8	{d16-d17}, [r1]
   141f4:	add	r1, r2, #32
   141f8:	vld1.8	{d16-d17}, [r1]
   141fc:	vst1.8	{d16-d17}, [r0]
   14200:	vld1.8	{d16-d17}, [lr]
   14204:	vst1.8	{d16-d17}, [r5]
   14208:	bne	141c0 <__assert_fail@plt+0x2734>
   1420c:	ldr	r0, [sp, #24]
   14210:	cmp	r0, #0
   14214:	beq	14234 <__assert_fail@plt+0x27a8>
   14218:	add	r7, r4, r3
   1421c:	add	r3, r6, r3
   14220:	rsb	r2, r0, #0
   14224:	vld1.8	{d16-d17}, [r3]!
   14228:	adds	r2, r2, #1
   1422c:	vst1.8	{d16-d17}, [r7]!
   14230:	bcc	14224 <__assert_fail@plt+0x2798>
   14234:	ldr	r0, [sp, #12]
   14238:	ldr	sl, [sp, #20]
   1423c:	add	r4, r4, r0
   14240:	cmp	r0, r9
   14244:	beq	1444c <__assert_fail@plt+0x29c0>
   14248:	add	r6, r6, r0
   1424c:	ldr	r2, [sp, #16]
   14250:	ldrb	r0, [r6], #1
   14254:	cmp	r8, r6
   14258:	strb	r0, [r4], #1
   1425c:	bne	14250 <__assert_fail@plt+0x27c4>
   14260:	b	1486c <__assert_fail@plt+0x2de0>
   14264:	mov	r7, r6
   14268:	ldr	r2, [fp, #12]
   1426c:	cmp	r7, sl
   14270:	bcs	14844 <__assert_fail@plt+0x2db8>
   14274:	ldr	r1, [sp, #20]
   14278:	sub	r0, r4, r7
   1427c:	add	r0, r1, r0
   14280:	cmp	r0, #16
   14284:	bcc	14834 <__assert_fail@plt+0x2da8>
   14288:	cmp	r6, sl
   1428c:	addcc	r1, r6, r0
   14290:	cmpcc	r7, r1
   14294:	bcc	14834 <__assert_fail@plt+0x2da8>
   14298:	str	r0, [sp, #24]
   1429c:	bic	r0, r0, #15
   142a0:	mov	r1, #1
   142a4:	mov	r5, #0
   142a8:	sub	r3, r0, #16
   142ac:	str	r0, [sp, #16]
   142b0:	add	r1, r1, r3, lsr #4
   142b4:	cmp	r3, #48	; 0x30
   142b8:	and	r2, r1, #3
   142bc:	bcc	14318 <__assert_fail@plt+0x288c>
   142c0:	sub	r3, r1, r2
   142c4:	mov	r5, #0
   142c8:	mov	r9, #48	; 0x30
   142cc:	add	r0, r7, r5
   142d0:	add	r4, r6, r5
   142d4:	subs	r3, r3, #4
   142d8:	add	r5, r5, #64	; 0x40
   142dc:	mov	r8, r0
   142e0:	mov	ip, r4
   142e4:	add	lr, r0, #16
   142e8:	add	r1, r4, #16
   142ec:	add	r0, r0, #32
   142f0:	vld1.8	{d16-d17}, [r8], r9
   142f4:	vst1.8	{d16-d17}, [ip], r9
   142f8:	vld1.8	{d16-d17}, [lr]
   142fc:	vst1.8	{d16-d17}, [r1]
   14300:	vld1.8	{d16-d17}, [r0]
   14304:	add	r0, r4, #32
   14308:	vst1.8	{d16-d17}, [r0]
   1430c:	vld1.8	{d16-d17}, [r8]
   14310:	vst1.8	{d16-d17}, [ip]
   14314:	bne	142cc <__assert_fail@plt+0x2840>
   14318:	cmp	r2, #0
   1431c:	beq	1433c <__assert_fail@plt+0x28b0>
   14320:	add	r1, r6, r5
   14324:	add	r3, r7, r5
   14328:	rsb	r5, r2, #0
   1432c:	vld1.8	{d16-d17}, [r3]!
   14330:	adds	r5, r5, #1
   14334:	vst1.8	{d16-d17}, [r1]!
   14338:	bcc	1432c <__assert_fail@plt+0x28a0>
   1433c:	ldr	r2, [sp, #16]
   14340:	ldr	r0, [sp, #24]
   14344:	add	r6, r6, r2
   14348:	cmp	r2, r0
   1434c:	bne	1482c <__assert_fail@plt+0x2da0>
   14350:	ldr	r2, [fp, #12]
   14354:	b	14844 <__assert_fail@plt+0x2db8>
   14358:	mov	r6, r4
   1435c:	cmp	r6, r8
   14360:	bcs	1444c <__assert_fail@plt+0x29c0>
   14364:	ldr	r0, [sp, #24]
   14368:	sub	r0, r0, r6
   1436c:	add	r9, sl, r0
   14370:	cmp	r9, #16
   14374:	bcc	14858 <__assert_fail@plt+0x2dcc>
   14378:	cmp	r4, r8
   1437c:	addcc	r1, r4, r9
   14380:	cmpcc	r6, r1
   14384:	bcc	14858 <__assert_fail@plt+0x2dcc>
   14388:	bic	r0, r9, #15
   1438c:	mov	r2, #1
   14390:	mov	r3, #0
   14394:	str	sl, [sp, #20]
   14398:	sub	r5, r0, #16
   1439c:	str	r0, [sp, #12]
   143a0:	add	r7, r2, r5, lsr #4
   143a4:	cmp	r5, #48	; 0x30
   143a8:	and	r0, r7, #3
   143ac:	str	r0, [sp, #24]
   143b0:	bcc	14410 <__assert_fail@plt+0x2984>
   143b4:	ldr	r0, [sp, #24]
   143b8:	mov	r3, #0
   143bc:	mov	sl, #48	; 0x30
   143c0:	sub	r7, r7, r0
   143c4:	add	r2, r6, r3
   143c8:	add	r0, r4, r3
   143cc:	subs	r7, r7, #4
   143d0:	add	r3, r3, #64	; 0x40
   143d4:	mov	lr, r2
   143d8:	mov	r5, r0
   143dc:	add	ip, r2, #16
   143e0:	add	r1, r0, #16
   143e4:	add	r0, r0, #32
   143e8:	vld1.8	{d16-d17}, [lr], sl
   143ec:	vst1.8	{d16-d17}, [r5], sl
   143f0:	vld1.8	{d16-d17}, [ip]
   143f4:	vst1.8	{d16-d17}, [r1]
   143f8:	add	r1, r2, #32
   143fc:	vld1.8	{d16-d17}, [r1]
   14400:	vst1.8	{d16-d17}, [r0]
   14404:	vld1.8	{d16-d17}, [lr]
   14408:	vst1.8	{d16-d17}, [r5]
   1440c:	bne	143c4 <__assert_fail@plt+0x2938>
   14410:	ldr	r0, [sp, #24]
   14414:	cmp	r0, #0
   14418:	beq	14438 <__assert_fail@plt+0x29ac>
   1441c:	add	r7, r4, r3
   14420:	add	r3, r6, r3
   14424:	rsb	r2, r0, #0
   14428:	vld1.8	{d16-d17}, [r3]!
   1442c:	adds	r2, r2, #1
   14430:	vst1.8	{d16-d17}, [r7]!
   14434:	bcc	14428 <__assert_fail@plt+0x299c>
   14438:	ldr	r0, [sp, #12]
   1443c:	ldr	sl, [sp, #20]
   14440:	add	r4, r4, r0
   14444:	cmp	r0, r9
   14448:	bne	14854 <__assert_fail@plt+0x2dc8>
   1444c:	ldr	r2, [sp, #16]
   14450:	b	1486c <__assert_fail@plt+0x2de0>
   14454:	mov	r6, r4
   14458:	cmp	r6, r8
   1445c:	bcs	14548 <__assert_fail@plt+0x2abc>
   14460:	ldr	r0, [sp, #24]
   14464:	sub	r0, r0, r6
   14468:	add	r9, sl, r0
   1446c:	cmp	r9, #16
   14470:	bcc	1487c <__assert_fail@plt+0x2df0>
   14474:	cmp	r4, r8
   14478:	addcc	r1, r4, r9
   1447c:	cmpcc	r6, r1
   14480:	bcc	1487c <__assert_fail@plt+0x2df0>
   14484:	bic	r0, r9, #15
   14488:	mov	r2, #1
   1448c:	mov	r3, #0
   14490:	str	sl, [sp, #20]
   14494:	sub	r5, r0, #16
   14498:	str	r0, [sp, #12]
   1449c:	add	r7, r2, r5, lsr #4
   144a0:	cmp	r5, #48	; 0x30
   144a4:	and	r0, r7, #3
   144a8:	str	r0, [sp, #24]
   144ac:	bcc	1450c <__assert_fail@plt+0x2a80>
   144b0:	ldr	r0, [sp, #24]
   144b4:	mov	r3, #0
   144b8:	mov	sl, #48	; 0x30
   144bc:	sub	r7, r7, r0
   144c0:	add	r2, r6, r3
   144c4:	add	r0, r4, r3
   144c8:	subs	r7, r7, #4
   144cc:	add	r3, r3, #64	; 0x40
   144d0:	mov	lr, r2
   144d4:	mov	r5, r0
   144d8:	add	ip, r2, #16
   144dc:	add	r1, r0, #16
   144e0:	add	r0, r0, #32
   144e4:	vld1.8	{d16-d17}, [lr], sl
   144e8:	vst1.8	{d16-d17}, [r5], sl
   144ec:	vld1.8	{d16-d17}, [ip]
   144f0:	vst1.8	{d16-d17}, [r1]
   144f4:	add	r1, r2, #32
   144f8:	vld1.8	{d16-d17}, [r1]
   144fc:	vst1.8	{d16-d17}, [r0]
   14500:	vld1.8	{d16-d17}, [lr]
   14504:	vst1.8	{d16-d17}, [r5]
   14508:	bne	144c0 <__assert_fail@plt+0x2a34>
   1450c:	ldr	r0, [sp, #24]
   14510:	cmp	r0, #0
   14514:	beq	14534 <__assert_fail@plt+0x2aa8>
   14518:	add	r7, r4, r3
   1451c:	add	r3, r6, r3
   14520:	rsb	r2, r0, #0
   14524:	vld1.8	{d16-d17}, [r3]!
   14528:	adds	r2, r2, #1
   1452c:	vst1.8	{d16-d17}, [r7]!
   14530:	bcc	14524 <__assert_fail@plt+0x2a98>
   14534:	ldr	r0, [sp, #12]
   14538:	ldr	sl, [sp, #20]
   1453c:	add	r4, r4, r0
   14540:	cmp	r0, r9
   14544:	bne	14878 <__assert_fail@plt+0x2dec>
   14548:	ldr	r2, [sp, #16]
   1454c:	b	14890 <__assert_fail@plt+0x2e04>
   14550:	movw	r1, #61264	; 0xef50
   14554:	cmp	r0, r1
   14558:	bgt	146cc <__assert_fail@plt+0x2c40>
   1455c:	movw	r1, #26984	; 0x6968
   14560:	cmp	r0, r1
   14564:	ble	14950 <__assert_fail@plt+0x2ec4>
   14568:	movw	r1, #40863	; 0x9f9f
   1456c:	cmp	r0, r1
   14570:	ble	14b64 <__assert_fail@plt+0x30d8>
   14574:	movw	r1, #40865	; 0x9fa1
   14578:	cmp	r0, r1
   1457c:	ble	14f38 <__assert_fail@plt+0x34ac>
   14580:	movw	r1, #40866	; 0x9fa2
   14584:	cmp	r0, r1
   14588:	beq	153d8 <__assert_fail@plt+0x394c>
   1458c:	movw	r1, #44533	; 0xadf5
   14590:	cmp	r0, r1
   14594:	beq	153e4 <__assert_fail@plt+0x3958>
   14598:	movw	r1, #44543	; 0xadff
   1459c:	cmp	r0, r1
   145a0:	bne	1567c <__assert_fail@plt+0x3bf0>
   145a4:	movw	r0, #13017	; 0x32d9
   145a8:	movt	r0, #2
   145ac:	b	156f4 <__assert_fail@plt+0x3c68>
   145b0:	movw	r1, #21826	; 0x5542
   145b4:	movt	r1, #25971	; 0x6573
   145b8:	cmp	r0, r1
   145bc:	ble	1471c <__assert_fail@plt+0x2c90>
   145c0:	movw	r1, #26226	; 0x6672
   145c4:	movt	r1, #29539	; 0x7363
   145c8:	cmp	r0, r1
   145cc:	ble	1498c <__assert_fail@plt+0x2f00>
   145d0:	movw	r1, #25454	; 0x636e
   145d4:	movt	r1, #29793	; 0x7461
   145d8:	cmp	r0, r1
   145dc:	ble	14b94 <__assert_fail@plt+0x3108>
   145e0:	movw	r1, #16981	; 0x4255
   145e4:	movt	r1, #30831	; 0x786f
   145e8:	cmp	r0, r1
   145ec:	ble	14f5c <__assert_fail@plt+0x34d0>
   145f0:	movw	r1, #16982	; 0x4256
   145f4:	movt	r1, #30831	; 0x786f
   145f8:	cmp	r0, r1
   145fc:	beq	153f0 <__assert_fail@plt+0x3964>
   14600:	movw	r1, #30256	; 0x7630
   14604:	movt	r1, #31052	; 0x794c
   14608:	cmp	r0, r1
   1460c:	beq	153fc <__assert_fail@plt+0x3970>
   14610:	movw	r1, #26227	; 0x6673
   14614:	movt	r1, #31868	; 0x7c7c
   14618:	cmp	r0, r1
   1461c:	bne	1567c <__assert_fail@plt+0x3bf0>
   14620:	movw	r0, #13565	; 0x34fd
   14624:	movt	r0, #2
   14628:	b	156f4 <__assert_fail@plt+0x3c68>
   1462c:	movw	r1, #7376	; 0x1cd0
   14630:	cmp	r0, r1
   14634:	bgt	14abc <__assert_fail@plt+0x3030>
   14638:	movw	r1, #390	; 0x186
   1463c:	cmp	r0, r1
   14640:	bgt	14bd0 <__assert_fail@plt+0x3144>
   14644:	movw	r1, #19778	; 0x4d42
   14648:	movt	r1, #65363	; 0xff53
   1464c:	cmp	r0, r1
   14650:	beq	15358 <__assert_fail@plt+0x38cc>
   14654:	cmp	r0, #47	; 0x2f
   14658:	beq	15364 <__assert_fail@plt+0x38d8>
   1465c:	cmp	r0, #51	; 0x33
   14660:	bne	1567c <__assert_fail@plt+0x3bf0>
   14664:	movw	r0, #13804	; 0x35ec
   14668:	movt	r0, #2
   1466c:	b	156f4 <__assert_fail@plt+0x3c68>
   14670:	movw	r1, #513	; 0x201
   14674:	movt	r1, #6528	; 0x1980
   14678:	cmp	r0, r1
   1467c:	bgt	149d8 <__assert_fail@plt+0x2f4c>
   14680:	movw	r1, #3023	; 0xbcf
   14684:	movt	r1, #3024	; 0xbd0
   14688:	cmp	r0, r1
   1468c:	bgt	14c68 <__assert_fail@plt+0x31dc>
   14690:	movw	r1, #6451	; 0x1933
   14694:	movt	r1, #2308	; 0x904
   14698:	cmp	r0, r1
   1469c:	bgt	14f88 <__assert_fail@plt+0x34fc>
   146a0:	movw	r1, #4520	; 0x11a8
   146a4:	movt	r1, #305	; 0x131
   146a8:	cmp	r0, r1
   146ac:	beq	15408 <__assert_fail@plt+0x397c>
   146b0:	movw	r1, #22561	; 0x5821
   146b4:	movt	r1, #1893	; 0x765
   146b8:	cmp	r0, r1
   146bc:	bne	1567c <__assert_fail@plt+0x3bf0>
   146c0:	movw	r0, #13596	; 0x351c
   146c4:	movt	r0, #2
   146c8:	b	156f4 <__assert_fail@plt+0x3c68>
   146cc:	movw	r1, #6547	; 0x1993
   146d0:	movt	r1, #258	; 0x102
   146d4:	cmp	r0, r1
   146d8:	bgt	14a24 <__assert_fail@plt+0x2f98>
   146dc:	movw	r1, #57578	; 0xe0ea
   146e0:	movt	r1, #39	; 0x27
   146e4:	cmp	r0, r1
   146e8:	bgt	14ca4 <__assert_fail@plt+0x3218>
   146ec:	movw	r1, #61790	; 0xf15e
   146f0:	cmp	r0, r1
   146f4:	bgt	14fb4 <__assert_fail@plt+0x3528>
   146f8:	movw	r1, #61265	; 0xef51
   146fc:	cmp	r0, r1
   14700:	beq	15414 <__assert_fail@plt+0x3988>
   14704:	movw	r1, #61267	; 0xef53
   14708:	cmp	r0, r1
   1470c:	bne	1567c <__assert_fail@plt+0x3bf0>
   14710:	movw	r0, #13258	; 0x33ca
   14714:	movt	r0, #2
   14718:	b	156f4 <__assert_fail@plt+0x3c68>
   1471c:	movw	r1, #26475	; 0x676b
   14720:	movt	r1, #24933	; 0x6165
   14724:	cmp	r0, r1
   14728:	bgt	14a70 <__assert_fail@plt+0x2fe4>
   1472c:	movw	r1, #27119	; 0x69ef
   14730:	movt	r1, #23100	; 0x5a3c
   14734:	cmp	r0, r1
   14738:	bgt	14ce0 <__assert_fail@plt+0x3254>
   1473c:	movw	r1, #22568	; 0x5828
   14740:	movt	r1, #22569	; 0x5829
   14744:	cmp	r0, r1
   14748:	bgt	14fdc <__assert_fail@plt+0x3550>
   1474c:	movw	r1, #256	; 0x100
   14750:	movt	r1, #21529	; 0x5419
   14754:	cmp	r0, r1
   14758:	beq	14fd0 <__assert_fail@plt+0x3544>
   1475c:	movw	r1, #18003	; 0x4653
   14760:	movt	r1, #22106	; 0x565a
   14764:	cmp	r0, r1
   14768:	bne	1567c <__assert_fail@plt+0x3bf0>
   1476c:	movw	r0, #13777	; 0x35d1
   14770:	movt	r0, #2
   14774:	b	156f4 <__assert_fail@plt+0x3c68>
   14778:	add	r5, r5, r0
   1477c:	ldr	r3, [sp, #16]
   14780:	ldr	r2, [sp, #12]
   14784:	ldrb	r0, [r5], #1
   14788:	cmp	r8, r5
   1478c:	strb	r0, [r7], #1
   14790:	bne	14784 <__assert_fail@plt+0x2cf8>
   14794:	movw	r0, #27756	; 0x6c6c
   14798:	movt	r0, #117	; 0x75
   1479c:	b	147c4 <__assert_fail@plt+0x2d38>
   147a0:	add	r5, r5, r0
   147a4:	ldr	r3, [sp, #16]
   147a8:	ldr	r2, [sp, #12]
   147ac:	ldrb	r0, [r5], #1
   147b0:	cmp	r8, r5
   147b4:	strb	r0, [r7], #1
   147b8:	bne	147ac <__assert_fail@plt+0x2d20>
   147bc:	movw	r0, #27756	; 0x6c6c
   147c0:	movt	r0, #100	; 0x64
   147c4:	str	r0, [r7]
   147c8:	b	148a0 <__assert_fail@plt+0x2e14>
   147cc:	add	r7, r7, r0
   147d0:	ldr	r3, [sp, #16]
   147d4:	ldr	r2, [sp, #12]
   147d8:	ldrb	r0, [r7], #1
   147dc:	cmp	r8, r7
   147e0:	strb	r0, [r4], #1
   147e4:	bne	147d8 <__assert_fail@plt+0x2d4c>
   147e8:	movw	r0, #27756	; 0x6c6c
   147ec:	movt	r0, #100	; 0x64
   147f0:	str	r0, [r4]
   147f4:	b	148a0 <__assert_fail@plt+0x2e14>
   147f8:	add	r4, r4, r0
   147fc:	ldr	r3, [sp, #24]
   14800:	ldr	r2, [sp, #16]
   14804:	ldrb	r0, [r4], #1
   14808:	cmp	sl, r4
   1480c:	strb	r0, [r8], #1
   14810:	bne	14804 <__assert_fail@plt+0x2d78>
   14814:	movw	r0, #27756	; 0x6c6c
   14818:	ldr	r1, [sp, #20]
   1481c:	movt	r0, #120	; 0x78
   14820:	str	r0, [r8]
   14824:	mov	r0, #1
   14828:	b	148a8 <__assert_fail@plt+0x2e1c>
   1482c:	add	r7, r7, r2
   14830:	ldr	r2, [fp, #12]
   14834:	ldrb	r0, [r7], #1
   14838:	cmp	sl, r7
   1483c:	strb	r0, [r6], #1
   14840:	bne	14834 <__assert_fail@plt+0x2da8>
   14844:	ldr	r1, [sp, #20]
   14848:	mov	r0, #115	; 0x73
   1484c:	strh	r0, [r6]
   14850:	b	1587c <__assert_fail@plt+0x3df0>
   14854:	add	r6, r6, r0
   14858:	ldr	r2, [sp, #16]
   1485c:	ldrb	r0, [r6], #1
   14860:	cmp	r8, r6
   14864:	strb	r0, [r4], #1
   14868:	bne	1485c <__assert_fail@plt+0x2dd0>
   1486c:	movw	r0, #27756	; 0x6c6c
   14870:	movt	r0, #117	; 0x75
   14874:	b	14898 <__assert_fail@plt+0x2e0c>
   14878:	add	r6, r6, r0
   1487c:	ldr	r2, [sp, #16]
   14880:	ldrb	r0, [r6], #1
   14884:	cmp	r8, r6
   14888:	strb	r0, [r4], #1
   1488c:	bne	14880 <__assert_fail@plt+0x2df4>
   14890:	movw	r0, #27756	; 0x6c6c
   14894:	movt	r0, #120	; 0x78
   14898:	str	r0, [r4]
   1489c:	asr	r3, r2, #31
   148a0:	mov	r0, #1
   148a4:	mov	r1, sl
   148a8:	bl	11924 <__printf_chk@plt>
   148ac:	mov	r0, #0
   148b0:	sub	sp, fp, #28
   148b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148b8:	movw	r1, #43753	; 0xaae9
   148bc:	movt	r1, #43735	; 0xaad7
   148c0:	cmp	r0, r1
   148c4:	bgt	14d1c <__assert_fail@plt+0x3290>
   148c8:	movw	r1, #22773	; 0x58f5
   148cc:	movt	r1, #38276	; 0x9584
   148d0:	cmp	r0, r1
   148d4:	bgt	15008 <__assert_fail@plt+0x357c>
   148d8:	movw	r1, #22774	; 0x58f6
   148dc:	movt	r1, #34180	; 0x8584
   148e0:	cmp	r0, r1
   148e4:	beq	15420 <__assert_fail@plt+0x3994>
   148e8:	movw	r1, #26686	; 0x683e
   148ec:	movt	r1, #37155	; 0x9123
   148f0:	cmp	r0, r1
   148f4:	bne	1567c <__assert_fail@plt+0x3bf0>
   148f8:	movw	r0, #13096	; 0x3328
   148fc:	movt	r0, #2
   14900:	b	156f4 <__assert_fail@plt+0x3c68>
   14904:	movw	r1, #16705	; 0x4141
   14908:	movt	r1, #17485	; 0x444d
   1490c:	cmp	r0, r1
   14910:	bgt	14d58 <__assert_fail@plt+0x32cc>
   14914:	movw	r1, #20044	; 0x4e4c
   14918:	movt	r1, #16969	; 0x4249
   1491c:	cmp	r0, r1
   14920:	bgt	15034 <__assert_fail@plt+0x35a8>
   14924:	movw	r1, #17994	; 0x464a
   14928:	movt	r1, #12627	; 0x3153
   1492c:	cmp	r0, r1
   14930:	beq	1542c <__assert_fail@plt+0x39a0>
   14934:	movw	r1, #21297	; 0x5331
   14938:	movt	r1, #16966	; 0x4246
   1493c:	cmp	r0, r1
   14940:	bne	1567c <__assert_fail@plt+0x3bf0>
   14944:	movw	r0, #13063	; 0x3307
   14948:	movt	r0, #2
   1494c:	b	156f4 <__assert_fail@plt+0x3c68>
   14950:	movw	r1, #19801	; 0x4d59
   14954:	cmp	r0, r1
   14958:	bgt	14d94 <__assert_fail@plt+0x3308>
   1495c:	movw	r1, #18519	; 0x4857
   14960:	cmp	r0, r1
   14964:	bgt	15060 <__assert_fail@plt+0x35d4>
   14968:	movw	r1, #16964	; 0x4244
   1496c:	cmp	r0, r1
   14970:	beq	15438 <__assert_fail@plt+0x39ac>
   14974:	movw	r1, #18475	; 0x482b
   14978:	cmp	r0, r1
   1497c:	bne	1567c <__assert_fail@plt+0x3bf0>
   14980:	movw	r0, #13322	; 0x340a
   14984:	movt	r0, #2
   14988:	b	156f4 <__assert_fail@plt+0x3c68>
   1498c:	movw	r1, #18002	; 0x4652
   14990:	movt	r1, #27457	; 0x6b41
   14994:	cmp	r0, r1
   14998:	bgt	14dc4 <__assert_fail@plt+0x3338>
   1499c:	movw	r1, #26984	; 0x6968
   149a0:	movt	r1, #26457	; 0x6759
   149a4:	cmp	r0, r1
   149a8:	bgt	15084 <__assert_fail@plt+0x35f8>
   149ac:	movw	r1, #21827	; 0x5543
   149b0:	movt	r1, #25971	; 0x6573
   149b4:	cmp	r0, r1
   149b8:	beq	15444 <__assert_fail@plt+0x39b8>
   149bc:	movw	r1, #21830	; 0x5546
   149c0:	movt	r1, #25971	; 0x6573
   149c4:	cmp	r0, r1
   149c8:	bne	1567c <__assert_fail@plt+0x3bf0>
   149cc:	movw	r0, #13284	; 0x33e4
   149d0:	movt	r0, #2
   149d4:	b	156f4 <__assert_fail@plt+0x3c68>
   149d8:	movw	r1, #6404	; 0x1904
   149dc:	movt	r1, #9221	; 0x2405
   149e0:	cmp	r0, r1
   149e4:	bgt	14e00 <__assert_fail@plt+0x3374>
   149e8:	movw	r1, #64205	; 0xfacd
   149ec:	movt	r1, #7085	; 0x1bad
   149f0:	cmp	r0, r1
   149f4:	bgt	150b0 <__assert_fail@plt+0x3624>
   149f8:	movw	r1, #514	; 0x202
   149fc:	movt	r1, #6528	; 0x1980
   14a00:	cmp	r0, r1
   14a04:	beq	15450 <__assert_fail@plt+0x39c4>
   14a08:	movw	r1, #806	; 0x326
   14a0c:	movt	r1, #6531	; 0x1983
   14a10:	cmp	r0, r1
   14a14:	bne	1567c <__assert_fail@plt+0x3bf0>
   14a18:	movw	r0, #13278	; 0x33de
   14a1c:	movt	r0, #2
   14a20:	b	156f4 <__assert_fail@plt+0x3c68>
   14a24:	movw	r1, #53612	; 0xd16c
   14a28:	movt	r1, #303	; 0x12f
   14a2c:	cmp	r0, r1
   14a30:	bgt	14e3c <__assert_fail@plt+0x33b0>
   14a34:	movw	r1, #6548	; 0x1994
   14a38:	movt	r1, #258	; 0x102
   14a3c:	cmp	r0, r1
   14a40:	beq	15390 <__assert_fail@plt+0x3904>
   14a44:	movw	r1, #6551	; 0x1997
   14a48:	movt	r1, #258	; 0x102
   14a4c:	cmp	r0, r1
   14a50:	beq	1539c <__assert_fail@plt+0x3910>
   14a54:	movw	r1, #6512	; 0x1970
   14a58:	movt	r1, #278	; 0x116
   14a5c:	cmp	r0, r1
   14a60:	bne	1567c <__assert_fail@plt+0x3bf0>
   14a64:	movw	r0, #13308	; 0x33fc
   14a68:	movt	r0, #2
   14a6c:	b	156f4 <__assert_fail@plt+0x3c68>
   14a70:	movw	r1, #25969	; 0x6571
   14a74:	movt	r1, #25189	; 0x6265
   14a78:	cmp	r0, r1
   14a7c:	bgt	14e74 <__assert_fail@plt+0x33e8>
   14a80:	movw	r1, #25973	; 0x6575
   14a84:	movt	r1, #25188	; 0x6264
   14a88:	cmp	r0, r1
   14a8c:	bgt	150dc <__assert_fail@plt+0x3650>
   14a90:	movw	r1, #26476	; 0x676c
   14a94:	movt	r1, #24933	; 0x6165
   14a98:	cmp	r0, r1
   14a9c:	beq	1545c <__assert_fail@plt+0x39d0>
   14aa0:	movw	r1, #26227	; 0x6673
   14aa4:	movt	r1, #24949	; 0x6175
   14aa8:	cmp	r0, r1
   14aac:	bne	1567c <__assert_fail@plt+0x3bf0>
   14ab0:	movw	r0, #13036	; 0x32ec
   14ab4:	movt	r0, #2
   14ab8:	b	156f4 <__assert_fail@plt+0x3c68>
   14abc:	movw	r1, #13363	; 0x3433
   14ac0:	cmp	r0, r1
   14ac4:	ble	14eb0 <__assert_fail@plt+0x3424>
   14ac8:	movw	r1, #16387	; 0x4003
   14acc:	cmp	r0, r1
   14ad0:	bgt	15108 <__assert_fail@plt+0x367c>
   14ad4:	movw	r1, #13364	; 0x3434
   14ad8:	cmp	r0, r1
   14adc:	beq	15468 <__assert_fail@plt+0x39dc>
   14ae0:	cmp	r0, #16384	; 0x4000
   14ae4:	beq	1519c <__assert_fail@plt+0x3710>
   14ae8:	b	1567c <__assert_fail@plt+0x3bf0>
   14aec:	movw	r1, #18960	; 0x4a10
   14af0:	movt	r1, #51966	; 0xcafe
   14af4:	cmp	r0, r1
   14af8:	bgt	1512c <__assert_fail@plt+0x36a0>
   14afc:	movw	r1, #5520	; 0x1590
   14b00:	movt	r1, #51031	; 0xc757
   14b04:	cmp	r0, r1
   14b08:	beq	15474 <__assert_fail@plt+0x39e8>
   14b0c:	movw	r1, #33128	; 0x8168
   14b10:	movt	r1, #51582	; 0xc97e
   14b14:	cmp	r0, r1
   14b18:	bne	1567c <__assert_fail@plt+0x3bf0>
   14b1c:	movw	r0, #13405	; 0x345d
   14b20:	movt	r0, #2
   14b24:	b	156f4 <__assert_fail@plt+0x3c68>
   14b28:	movw	r1, #18802	; 0x4972
   14b2c:	movt	r1, #21093	; 0x5265
   14b30:	cmp	r0, r1
   14b34:	bgt	15158 <__assert_fail@plt+0x36cc>
   14b38:	movw	r1, #18003	; 0x4653
   14b3c:	movt	r1, #18256	; 0x4750
   14b40:	cmp	r0, r1
   14b44:	beq	15480 <__assert_fail@plt+0x39f4>
   14b48:	movw	r1, #20549	; 0x5045
   14b4c:	movt	r1, #20553	; 0x5049
   14b50:	cmp	r0, r1
   14b54:	bne	1567c <__assert_fail@plt+0x3bf0>
   14b58:	movw	r0, #13619	; 0x3533
   14b5c:	movt	r0, #2
   14b60:	b	156f4 <__assert_fail@plt+0x3c68>
   14b64:	movw	r1, #29365	; 0x72b5
   14b68:	cmp	r0, r1
   14b6c:	bgt	15184 <__assert_fail@plt+0x36f8>
   14b70:	movw	r1, #26985	; 0x6969
   14b74:	cmp	r0, r1
   14b78:	beq	1548c <__assert_fail@plt+0x3a00>
   14b7c:	movw	r1, #29301	; 0x7275
   14b80:	cmp	r0, r1
   14b84:	bne	1567c <__assert_fail@plt+0x3bf0>
   14b88:	movw	r0, #13609	; 0x3529
   14b8c:	movt	r0, #2
   14b90:	b	156f4 <__assert_fail@plt+0x3c68>
   14b94:	movw	r1, #29304	; 0x7278
   14b98:	movt	r1, #29554	; 0x7372
   14b9c:	cmp	r0, r1
   14ba0:	bgt	151a8 <__assert_fail@plt+0x371c>
   14ba4:	movw	r1, #26227	; 0x6673
   14ba8:	movt	r1, #29539	; 0x7363
   14bac:	cmp	r0, r1
   14bb0:	beq	15498 <__assert_fail@plt+0x3a0c>
   14bb4:	movw	r1, #29544	; 0x7368
   14bb8:	movt	r1, #29553	; 0x7371
   14bbc:	cmp	r0, r1
   14bc0:	bne	1567c <__assert_fail@plt+0x3bf0>
   14bc4:	movw	r0, #13693	; 0x357d
   14bc8:	movt	r0, #2
   14bcc:	b	156f4 <__assert_fail@plt+0x3c68>
   14bd0:	movw	r1, #4979	; 0x1373
   14bd4:	sub	r1, r0, r1
   14bd8:	cmp	r1, #28
   14bdc:	bhi	15370 <__assert_fail@plt+0x38e4>
   14be0:	add	r2, pc, #0
   14be4:	ldr	pc, [r2, r1, lsl #2]
   14be8:	andeq	r4, r1, ip, asr ip
   14bec:	andeq	r5, r1, ip, ror r6
   14bf0:	andeq	r5, r1, ip, ror r6
   14bf4:	andeq	r5, r1, ip, ror r6
   14bf8:	andeq	r5, r1, ip, ror r6
   14bfc:	andeq	r5, r1, ip, ror r6
   14c00:	andeq	r5, r1, ip, ror r6
   14c04:	andeq	r5, r1, ip, ror r6
   14c08:	andeq	r5, r1, ip, ror r6
   14c0c:	andeq	r5, r1, ip, ror r6
   14c10:	andeq	r5, r1, r8, asr #13
   14c14:	andeq	r5, r1, ip, ror r6
   14c18:	ldrdeq	r5, [r1], -r4
   14c1c:	andeq	r5, r1, ip, ror r6
   14c20:	andeq	r5, r1, ip, ror r6
   14c24:	andeq	r5, r1, ip, ror r6
   14c28:	andeq	r5, r1, ip, ror r6
   14c2c:	andeq	r5, r1, ip, ror r6
   14c30:	andeq	r5, r1, ip, ror r6
   14c34:	andeq	r5, r1, ip, ror r6
   14c38:	andeq	r5, r1, ip, ror r6
   14c3c:	andeq	r5, r1, ip, ror r6
   14c40:	andeq	r5, r1, ip, ror r6
   14c44:	andeq	r5, r1, ip, ror r6
   14c48:	andeq	r5, r1, ip, ror r6
   14c4c:	andeq	r5, r1, ip, ror r6
   14c50:	andeq	r5, r1, ip, ror r6
   14c54:	andeq	r5, r1, ip, ror r6
   14c58:	andeq	r5, r1, r0, ror #13
   14c5c:	movw	r0, #13747	; 0x35b3
   14c60:	movt	r0, #2
   14c64:	b	156f4 <__assert_fail@plt+0x3c68>
   14c68:	movw	r1, #4965	; 0x1365
   14c6c:	movt	r1, #4966	; 0x1366
   14c70:	cmp	r0, r1
   14c74:	bgt	151d4 <__assert_fail@plt+0x3748>
   14c78:	movw	r1, #3024	; 0xbd0
   14c7c:	movt	r1, #3024	; 0xbd0
   14c80:	cmp	r0, r1
   14c84:	beq	154a4 <__assert_fail@plt+0x3a18>
   14c88:	movw	r1, #30804	; 0x7854
   14c8c:	movt	r1, #4400	; 0x1130
   14c90:	cmp	r0, r1
   14c94:	bne	1567c <__assert_fail@plt+0x3bf0>
   14c98:	movw	r0, #13354	; 0x342a
   14c9c:	movt	r0, #2
   14ca0:	b	156f4 <__assert_fail@plt+0x3c68>
   14ca4:	movw	r1, #65517	; 0xffed
   14ca8:	movt	r1, #192	; 0xc0
   14cac:	cmp	r0, r1
   14cb0:	bgt	15200 <__assert_fail@plt+0x3774>
   14cb4:	movw	r1, #57579	; 0xe0eb
   14cb8:	movt	r1, #39	; 0x27
   14cbc:	cmp	r0, r1
   14cc0:	beq	154b0 <__assert_fail@plt+0x3a24>
   14cc4:	movw	r1, #19027	; 0x4a53
   14cc8:	movt	r1, #65	; 0x41
   14ccc:	cmp	r0, r1
   14cd0:	bne	1567c <__assert_fail@plt+0x3bf0>
   14cd4:	movw	r0, #13064	; 0x3308
   14cd8:	movt	r0, #2
   14cdc:	b	156f4 <__assert_fail@plt+0x3c68>
   14ce0:	movw	r1, #11764	; 0x2df4
   14ce4:	movt	r1, #24010	; 0x5dca
   14ce8:	cmp	r0, r1
   14cec:	bgt	1522c <__assert_fail@plt+0x37a0>
   14cf0:	movw	r1, #27120	; 0x69f0
   14cf4:	movt	r1, #23100	; 0x5a3c
   14cf8:	cmp	r0, r1
   14cfc:	beq	154bc <__assert_fail@plt+0x3a30>
   14d00:	movw	r1, #18003	; 0x4653
   14d04:	movt	r1, #23119	; 0x5a4f
   14d08:	cmp	r0, r1
   14d0c:	bne	1567c <__assert_fail@plt+0x3bf0>
   14d10:	movw	r0, #13811	; 0x35f3
   14d14:	movt	r0, #2
   14d18:	b	156f4 <__assert_fail@plt+0x3c68>
   14d1c:	movw	r1, #44219	; 0xacbb
   14d20:	movt	r1, #47819	; 0xbacb
   14d24:	cmp	r0, r1
   14d28:	bgt	15258 <__assert_fail@plt+0x37cc>
   14d2c:	movw	r1, #43754	; 0xaaea
   14d30:	movt	r1, #43735	; 0xaad7
   14d34:	cmp	r0, r1
   14d38:	beq	154c8 <__assert_fail@plt+0x3a3c>
   14d3c:	movw	r1, #6516	; 0x1974
   14d40:	movt	r1, #43962	; 0xabba
   14d44:	cmp	r0, r1
   14d48:	bne	1567c <__assert_fail@plt+0x3bf0>
   14d4c:	movw	r0, #13788	; 0x35dc
   14d50:	movt	r0, #2
   14d54:	b	156f4 <__assert_fail@plt+0x3c68>
   14d58:	movw	r1, #17484	; 0x444c
   14d5c:	movt	r1, #17741	; 0x454d
   14d60:	cmp	r0, r1
   14d64:	bgt	15284 <__assert_fail@plt+0x37f8>
   14d68:	movw	r1, #16706	; 0x4142
   14d6c:	movt	r1, #17485	; 0x444d
   14d70:	cmp	r0, r1
   14d74:	beq	154d4 <__assert_fail@plt+0x3a48>
   14d78:	movw	r1, #52520	; 0xcd28
   14d7c:	movt	r1, #17725	; 0x453d
   14d80:	cmp	r0, r1
   14d84:	bne	1567c <__assert_fail@plt+0x3bf0>
   14d88:	movw	r0, #13167	; 0x336f
   14d8c:	movt	r0, #2
   14d90:	b	156f4 <__assert_fail@plt+0x3c68>
   14d94:	movw	r1, #22091	; 0x564b
   14d98:	cmp	r0, r1
   14d9c:	bgt	152b0 <__assert_fail@plt+0x3824>
   14da0:	movw	r1, #19802	; 0x4d5a
   14da4:	cmp	r0, r1
   14da8:	beq	154e0 <__assert_fail@plt+0x3a54>
   14dac:	movw	r1, #20859	; 0x517b
   14db0:	cmp	r0, r1
   14db4:	bne	1567c <__assert_fail@plt+0x3bf0>
   14db8:	movw	r0, #13672	; 0x3568
   14dbc:	movt	r0, #2
   14dc0:	b	156f4 <__assert_fail@plt+0x3c68>
   14dc4:	movw	r1, #29539	; 0x7363
   14dc8:	movt	r1, #28262	; 0x6e66
   14dcc:	cmp	r0, r1
   14dd0:	bgt	152d4 <__assert_fail@plt+0x3848>
   14dd4:	movw	r1, #18003	; 0x4653
   14dd8:	movt	r1, #27457	; 0x6b41
   14ddc:	cmp	r0, r1
   14de0:	beq	154ec <__assert_fail@plt+0x3a60>
   14de4:	movw	r1, #28528	; 0x6f70
   14de8:	movt	r1, #27759	; 0x6c6f
   14dec:	cmp	r0, r1
   14df0:	bne	1567c <__assert_fail@plt+0x3bf0>
   14df4:	movw	r0, #13068	; 0x330c
   14df8:	movt	r0, #2
   14dfc:	b	156f4 <__assert_fail@plt+0x3c68>
   14e00:	movw	r1, #7657	; 0x1de9
   14e04:	movt	r1, #11181	; 0x2bad
   14e08:	cmp	r0, r1
   14e0c:	bgt	15300 <__assert_fail@plt+0x3874>
   14e10:	movw	r1, #6405	; 0x1905
   14e14:	movt	r1, #9221	; 0x2405
   14e18:	cmp	r0, r1
   14e1c:	beq	154f8 <__assert_fail@plt+0x3a6c>
   14e20:	movw	r1, #15685	; 0x3d45
   14e24:	movt	r1, #10445	; 0x28cd
   14e28:	cmp	r0, r1
   14e2c:	bne	1567c <__assert_fail@plt+0x3bf0>
   14e30:	movw	r0, #13160	; 0x3368
   14e34:	movt	r0, #2
   14e38:	b	156f4 <__assert_fail@plt+0x3c68>
   14e3c:	movw	r1, #2124	; 0x84c
   14e40:	movt	r1, #65232	; 0xfed0
   14e44:	add	r1, r0, r1
   14e48:	cmp	r1, #3
   14e4c:	bhi	15660 <__assert_fail@plt+0x3bd4>
   14e50:	add	r0, pc, #0
   14e54:	ldr	pc, [r0, r1, lsl #2]
   14e58:	andeq	r4, r1, r8, ror #28
   14e5c:	andeq	r5, r1, r4, lsr #13
   14e60:			; <UNDEFINED> instruction: 0x000156b0
   14e64:			; <UNDEFINED> instruction: 0x000156bc
   14e68:	movw	r0, #13794	; 0x35e2
   14e6c:	movt	r0, #2
   14e70:	b	156f4 <__assert_fail@plt+0x3c68>
   14e74:	movw	r1, #26399	; 0x671f
   14e78:	movt	r1, #25698	; 0x6462
   14e7c:	cmp	r0, r1
   14e80:	bgt	1532c <__assert_fail@plt+0x38a0>
   14e84:	movw	r1, #25970	; 0x6572
   14e88:	movt	r1, #25189	; 0x6265
   14e8c:	cmp	r0, r1
   14e90:	beq	15504 <__assert_fail@plt+0x3a78>
   14e94:	movw	r1, #29296	; 0x7270
   14e98:	movt	r1, #25447	; 0x6367
   14e9c:	cmp	r0, r1
   14ea0:	bne	1567c <__assert_fail@plt+0x3bf0>
   14ea4:	movw	r0, #13127	; 0x3347
   14ea8:	movt	r0, #2
   14eac:	b	156f4 <__assert_fail@plt+0x3c68>
   14eb0:	movw	r1, #7377	; 0x1cd1
   14eb4:	cmp	r0, r1
   14eb8:	beq	15510 <__assert_fail@plt+0x3a84>
   14ebc:	movw	r1, #9320	; 0x2468
   14ec0:	cmp	r0, r1
   14ec4:	beq	1551c <__assert_fail@plt+0x3a90>
   14ec8:	movw	r1, #9336	; 0x2478
   14ecc:	cmp	r0, r1
   14ed0:	bne	1567c <__assert_fail@plt+0x3bf0>
   14ed4:	movw	r0, #13455	; 0x348f
   14ed8:	movt	r0, #2
   14edc:	b	156f4 <__assert_fail@plt+0x3c68>
   14ee0:	movw	r1, #57826	; 0xe1e2
   14ee4:	movt	r1, #57589	; 0xe0f5
   14ee8:	cmp	r0, r1
   14eec:	beq	15528 <__assert_fail@plt+0x3a9c>
   14ef0:	movw	r1, #8208	; 0x2010
   14ef4:	movt	r1, #62197	; 0xf2f5
   14ef8:	cmp	r0, r1
   14efc:	bne	1567c <__assert_fail@plt+0x3bf0>
   14f00:	movw	r0, #13273	; 0x33d9
   14f04:	movt	r0, #2
   14f08:	b	156f4 <__assert_fail@plt+0x3c68>
   14f0c:	movw	r1, #12621	; 0x314d
   14f10:	movt	r1, #21318	; 0x5346
   14f14:	cmp	r0, r1
   14f18:	beq	15534 <__assert_fail@plt+0x3aa8>
   14f1c:	movw	r1, #16719	; 0x414f
   14f20:	movt	r1, #21318	; 0x5346
   14f24:	cmp	r0, r1
   14f28:	bne	1567c <__assert_fail@plt+0x3bf0>
   14f2c:	movw	r0, #13401	; 0x3459
   14f30:	movt	r0, #2
   14f34:	b	156f4 <__assert_fail@plt+0x3c68>
   14f38:	movw	r1, #40864	; 0x9fa0
   14f3c:	cmp	r0, r1
   14f40:	beq	15540 <__assert_fail@plt+0x3ab4>
   14f44:	movw	r1, #40865	; 0x9fa1
   14f48:	cmp	r0, r1
   14f4c:	bne	1567c <__assert_fail@plt+0x3bf0>
   14f50:	movw	r0, #13523	; 0x34d3
   14f54:	movt	r0, #2
   14f58:	b	156f4 <__assert_fail@plt+0x3c68>
   14f5c:	movw	r1, #25455	; 0x636f
   14f60:	movt	r1, #29793	; 0x7461
   14f64:	cmp	r0, r1
   14f68:	beq	1554c <__assert_fail@plt+0x3ac0>
   14f6c:	movw	r1, #24931	; 0x6163
   14f70:	movt	r1, #29810	; 0x7472
   14f74:	cmp	r0, r1
   14f78:	bne	1567c <__assert_fail@plt+0x3bf0>
   14f7c:	movw	r0, #13726	; 0x359e
   14f80:	movt	r0, #2
   14f84:	b	156f4 <__assert_fail@plt+0x3c68>
   14f88:	movw	r1, #6452	; 0x1934
   14f8c:	movt	r1, #2308	; 0x904
   14f90:	cmp	r0, r1
   14f94:	beq	15558 <__assert_fail@plt+0x3acc>
   14f98:	movw	r1, #7658	; 0x1dea
   14f9c:	movt	r1, #2989	; 0xbad
   14fa0:	cmp	r0, r1
   14fa4:	bne	1567c <__assert_fail@plt+0x3bf0>
   14fa8:	movw	r0, #13300	; 0x33f4
   14fac:	movt	r0, #2
   14fb0:	b	156f4 <__assert_fail@plt+0x3c68>
   14fb4:	movw	r1, #61791	; 0xf15f
   14fb8:	cmp	r0, r1
   14fbc:	beq	15564 <__assert_fail@plt+0x3ad8>
   14fc0:	movw	r1, #6484	; 0x1954
   14fc4:	movt	r1, #1
   14fc8:	cmp	r0, r1
   14fcc:	bne	1567c <__assert_fail@plt+0x3bf0>
   14fd0:	movw	r0, #13037	; 0x32ed
   14fd4:	movt	r0, #2
   14fd8:	b	156f4 <__assert_fail@plt+0x3c68>
   14fdc:	movw	r1, #22569	; 0x5829
   14fe0:	movt	r1, #22569	; 0x5829
   14fe4:	cmp	r0, r1
   14fe8:	beq	15570 <__assert_fail@plt+0x3ae4>
   14fec:	movw	r1, #21314	; 0x5342
   14ff0:	movt	r1, #22598	; 0x5846
   14ff4:	cmp	r0, r1
   14ff8:	bne	1567c <__assert_fail@plt+0x3bf0>
   14ffc:	movw	r0, #13181	; 0x337d
   15000:	movt	r0, #2
   15004:	b	156f4 <__assert_fail@plt+0x3c68>
   15008:	movw	r1, #22774	; 0x58f6
   1500c:	movt	r1, #38276	; 0x9584
   15010:	cmp	r0, r1
   15014:	beq	1557c <__assert_fail@plt+0x3af0>
   15018:	movw	r1, #64757	; 0xfcf5
   1501c:	movt	r1, #42241	; 0xa501
   15020:	cmp	r0, r1
   15024:	bne	1567c <__assert_fail@plt+0x3bf0>
   15028:	movw	r0, #13772	; 0x35cc
   1502c:	movt	r0, #2
   15030:	b	156f4 <__assert_fail@plt+0x3c68>
   15034:	movw	r1, #20045	; 0x4e4d
   15038:	movt	r1, #16969	; 0x4249
   1503c:	cmp	r0, r1
   15040:	beq	15588 <__assert_fail@plt+0x3afc>
   15044:	movw	r1, #23891	; 0x5d53
   15048:	movt	r1, #17217	; 0x4341
   1504c:	cmp	r0, r1
   15050:	bne	1567c <__assert_fail@plt+0x3bf0>
   15054:	movw	r0, #13664	; 0x3560
   15058:	movt	r0, #2
   1505c:	b	156f4 <__assert_fail@plt+0x3c68>
   15060:	movw	r1, #18520	; 0x4858
   15064:	cmp	r0, r1
   15068:	beq	15594 <__assert_fail@plt+0x3b08>
   1506c:	movw	r1, #19780	; 0x4d44
   15070:	cmp	r0, r1
   15074:	bne	1567c <__assert_fail@plt+0x3bf0>
   15078:	movw	r0, #13489	; 0x34b1
   1507c:	movt	r0, #2
   15080:	b	156f4 <__assert_fail@plt+0x3c68>
   15084:	movw	r1, #26985	; 0x6969
   15088:	movt	r1, #26457	; 0x6759
   1508c:	cmp	r0, r1
   15090:	beq	155a0 <__assert_fail@plt+0x3b14>
   15094:	movw	r1, #4386	; 0x1122
   15098:	movt	r1, #26649	; 0x6819
   1509c:	cmp	r0, r1
   150a0:	bne	1567c <__assert_fail@plt+0x3bf0>
   150a4:	movw	r0, #13591	; 0x3517
   150a8:	movt	r0, #2
   150ac:	b	156f4 <__assert_fail@plt+0x3c68>
   150b0:	movw	r1, #64206	; 0xface
   150b4:	movt	r1, #7085	; 0x1bad
   150b8:	cmp	r0, r1
   150bc:	beq	155ac <__assert_fail@plt+0x3b20>
   150c0:	movw	r1, #47792	; 0xbab0
   150c4:	movt	r1, #8209	; 0x2011
   150c8:	cmp	r0, r1
   150cc:	bne	1567c <__assert_fail@plt+0x3bf0>
   150d0:	movw	r0, #13242	; 0x33ba
   150d4:	movt	r0, #2
   150d8:	b	156f4 <__assert_fail@plt+0x3c68>
   150dc:	movw	r1, #25974	; 0x6576
   150e0:	movt	r1, #25188	; 0x6264
   150e4:	cmp	r0, r1
   150e8:	beq	155b8 <__assert_fail@plt+0x3b2c>
   150ec:	movw	r1, #25968	; 0x6570
   150f0:	movt	r1, #25189	; 0x6265
   150f4:	cmp	r0, r1
   150f8:	bne	1567c <__assert_fail@plt+0x3bf0>
   150fc:	movw	r0, #13151	; 0x335f
   15100:	movt	r0, #2
   15104:	b	156f4 <__assert_fail@plt+0x3c68>
   15108:	movw	r1, #16388	; 0x4004
   1510c:	cmp	r0, r1
   15110:	beq	1519c <__assert_fail@plt+0x3710>
   15114:	movw	r1, #16390	; 0x4006
   15118:	cmp	r0, r1
   1511c:	bne	1567c <__assert_fail@plt+0x3bf0>
   15120:	movw	r0, #13244	; 0x33bc
   15124:	movt	r0, #2
   15128:	b	156f4 <__assert_fail@plt+0x3c68>
   1512c:	movw	r1, #18961	; 0x4a11
   15130:	movt	r1, #51966	; 0xcafe
   15134:	cmp	r0, r1
   15138:	beq	155c4 <__assert_fail@plt+0x3b38>
   1513c:	movw	r1, #33252	; 0x81e4
   15140:	movt	r1, #56926	; 0xde5e
   15144:	cmp	r0, r1
   15148:	bne	1567c <__assert_fail@plt+0x3bf0>
   1514c:	movw	r0, #13227	; 0x33ab
   15150:	movt	r0, #2
   15154:	b	156f4 <__assert_fail@plt+0x3c68>
   15158:	movw	r1, #18803	; 0x4973
   1515c:	movt	r1, #21093	; 0x5265
   15160:	cmp	r0, r1
   15164:	beq	155d0 <__assert_fail@plt+0x3b44>
   15168:	movw	r1, #17229	; 0x434d
   1516c:	movt	r1, #21317	; 0x5345
   15170:	cmp	r0, r1
   15174:	bne	1567c <__assert_fail@plt+0x3bf0>
   15178:	movw	r0, #13635	; 0x3543
   1517c:	movt	r0, #2
   15180:	b	156f4 <__assert_fail@plt+0x3c68>
   15184:	movw	r1, #29366	; 0x72b6
   15188:	cmp	r0, r1
   1518c:	beq	155dc <__assert_fail@plt+0x3b50>
   15190:	movw	r1, #38496	; 0x9660
   15194:	cmp	r0, r1
   15198:	bne	1567c <__assert_fail@plt+0x3bf0>
   1519c:	movw	r0, #13378	; 0x3442
   151a0:	movt	r0, #2
   151a4:	b	156f4 <__assert_fail@plt+0x3c68>
   151a8:	movw	r1, #29305	; 0x7279
   151ac:	movt	r1, #29554	; 0x7372
   151b0:	cmp	r0, r1
   151b4:	beq	155e8 <__assert_fail@plt+0x3b5c>
   151b8:	movw	r1, #29253	; 0x7245
   151bc:	movt	r1, #29557	; 0x7375
   151c0:	cmp	r0, r1
   151c4:	bne	1567c <__assert_fail@plt+0x3bf0>
   151c8:	movw	r0, #13142	; 0x3356
   151cc:	movt	r0, #2
   151d0:	b	156f4 <__assert_fail@plt+0x3c68>
   151d4:	movw	r1, #4966	; 0x1366
   151d8:	movt	r1, #4966	; 0x1366
   151dc:	cmp	r0, r1
   151e0:	beq	155f4 <__assert_fail@plt+0x3b68>
   151e4:	movw	r1, #13126	; 0x3346
   151e8:	movt	r1, #5377	; 0x1501
   151ec:	cmp	r0, r1
   151f0:	bne	1567c <__assert_fail@plt+0x3bf0>
   151f4:	movw	r0, #13740	; 0x35ac
   151f8:	movt	r0, #2
   151fc:	b	156f4 <__assert_fail@plt+0x3c68>
   15200:	movw	r1, #65518	; 0xffee
   15204:	movt	r1, #192	; 0xc0
   15208:	cmp	r0, r1
   1520c:	beq	15600 <__assert_fail@plt+0x3b74>
   15210:	movw	r1, #25600	; 0x6400
   15214:	movt	r1, #195	; 0xc3
   15218:	cmp	r0, r1
   1521c:	bne	1567c <__assert_fail@plt+0x3bf0>
   15220:	movw	r0, #13113	; 0x3339
   15224:	movt	r0, #2
   15228:	b	156f4 <__assert_fail@plt+0x3c68>
   1522c:	movw	r1, #11765	; 0x2df5
   15230:	movt	r1, #24010	; 0x5dca
   15234:	cmp	r0, r1
   15238:	beq	1560c <__assert_fail@plt+0x3b80>
   1523c:	movw	r1, #26227	; 0x6673
   15240:	movt	r1, #24931	; 0x6163
   15244:	cmp	r0, r1
   15248:	bne	1567c <__assert_fail@plt+0x3bf0>
   1524c:	movw	r0, #13007	; 0x32cf
   15250:	movt	r0, #2
   15254:	b	156f4 <__assert_fail@plt+0x3c68>
   15258:	movw	r1, #44220	; 0xacbc
   1525c:	movt	r1, #47819	; 0xbacb
   15260:	cmp	r0, r1
   15264:	beq	15618 <__assert_fail@plt+0x3b8c>
   15268:	movw	r1, #57005	; 0xdead
   1526c:	movt	r1, #48879	; 0xbeef
   15270:	cmp	r0, r1
   15274:	bne	1567c <__assert_fail@plt+0x3bf0>
   15278:	movw	r0, #13681	; 0x3571
   1527c:	movt	r0, #2
   15280:	b	156f4 <__assert_fail@plt+0x3c68>
   15284:	movw	r1, #17485	; 0x444d
   15288:	movt	r1, #17741	; 0x454d
   1528c:	cmp	r0, r1
   15290:	beq	15624 <__assert_fail@plt+0x3b98>
   15294:	movw	r1, #18003	; 0x4653
   15298:	movt	r1, #17752	; 0x4558
   1529c:	cmp	r0, r1
   152a0:	bne	1567c <__assert_fail@plt+0x3bf0>
   152a4:	movw	r0, #13303	; 0x33f7
   152a8:	movt	r0, #2
   152ac:	b	156f4 <__assert_fail@plt+0x3c68>
   152b0:	movw	r1, #22092	; 0x564c
   152b4:	cmp	r0, r1
   152b8:	beq	15630 <__assert_fail@plt+0x3ba4>
   152bc:	movw	r1, #24053	; 0x5df5
   152c0:	cmp	r0, r1
   152c4:	bne	1567c <__assert_fail@plt+0x3bf0>
   152c8:	movw	r0, #13248	; 0x33c0
   152cc:	movt	r0, #2
   152d0:	b	156f4 <__assert_fail@plt+0x3c68>
   152d4:	movw	r1, #29540	; 0x7364
   152d8:	movt	r1, #28262	; 0x6e66
   152dc:	cmp	r0, r1
   152e0:	beq	1563c <__assert_fail@plt+0x3bb0>
   152e4:	movw	r1, #26227	; 0x6673
   152e8:	movt	r1, #28275	; 0x6e73
   152ec:	cmp	r0, r1
   152f0:	bne	1567c <__assert_fail@plt+0x3bf0>
   152f4:	movw	r0, #13513	; 0x34c9
   152f8:	movt	r0, #2
   152fc:	b	156f4 <__assert_fail@plt+0x3c68>
   15300:	movw	r1, #7658	; 0x1dea
   15304:	movt	r1, #11181	; 0x2bad
   15308:	cmp	r0, r1
   1530c:	beq	15648 <__assert_fail@plt+0x3bbc>
   15310:	movw	r1, #12225	; 0x2fc1
   15314:	movt	r1, #12225	; 0x2fc1
   15318:	cmp	r0, r1
   1531c:	bne	1567c <__assert_fail@plt+0x3bf0>
   15320:	movw	r0, #13778	; 0x35d2
   15324:	movt	r0, #2
   15328:	b	156f4 <__assert_fail@plt+0x3c68>
   1532c:	movw	r1, #26400	; 0x6720
   15330:	movt	r1, #25698	; 0x6462
   15334:	cmp	r0, r1
   15338:	beq	15654 <__assert_fail@plt+0x3bc8>
   1533c:	movw	r1, #24952	; 0x6178
   15340:	movt	r1, #25700	; 0x6464
   15344:	cmp	r0, r1
   15348:	bne	1567c <__assert_fail@plt+0x3bf0>
   1534c:	movw	r0, #13179	; 0x337b
   15350:	movt	r0, #2
   15354:	b	156f4 <__assert_fail@plt+0x3c68>
   15358:	movw	r0, #13137	; 0x3351
   1535c:	movt	r0, #2
   15360:	b	156f4 <__assert_fail@plt+0x3c68>
   15364:	movw	r0, #13586	; 0x3512
   15368:	movt	r0, #2
   1536c:	b	156f4 <__assert_fail@plt+0x3c68>
   15370:	movw	r1, #391	; 0x187
   15374:	cmp	r0, r1
   15378:	beq	156ec <__assert_fail@plt+0x3c60>
   1537c:	cmp	r0, #1984	; 0x7c0
   15380:	bne	1567c <__assert_fail@plt+0x3bf0>
   15384:	movw	r0, #13384	; 0x3448
   15388:	movt	r0, #2
   1538c:	b	156f4 <__assert_fail@plt+0x3c68>
   15390:	movw	r0, #13720	; 0x3598
   15394:	movt	r0, #2
   15398:	b	156f4 <__assert_fail@plt+0x3c68>
   1539c:	movw	r0, #13753	; 0x35b9
   153a0:	movt	r0, #2
   153a4:	b	156f4 <__assert_fail@plt+0x3c68>
   153a8:	movw	r0, #13656	; 0x3558
   153ac:	movt	r0, #2
   153b0:	b	156f4 <__assert_fail@plt+0x3c68>
   153b4:	movw	r0, #13339	; 0x341b
   153b8:	movt	r0, #2
   153bc:	b	156f4 <__assert_fail@plt+0x3c68>
   153c0:	movw	r0, #13782	; 0x35d6
   153c4:	movt	r0, #2
   153c8:	b	156f4 <__assert_fail@plt+0x3c68>
   153cc:	movw	r0, #13518	; 0x34ce
   153d0:	movt	r0, #2
   153d4:	b	156f4 <__assert_fail@plt+0x3c68>
   153d8:	movw	r0, #13744	; 0x35b0
   153dc:	movt	r0, #2
   153e0:	b	156f4 <__assert_fail@plt+0x3c68>
   153e4:	movw	r0, #13012	; 0x32d4
   153e8:	movt	r0, #2
   153ec:	b	156f4 <__assert_fail@plt+0x3c68>
   153f0:	movw	r0, #13758	; 0x35be
   153f4:	movt	r0, #2
   153f8:	b	156f4 <__assert_fail@plt+0x3c68>
   153fc:	movw	r0, #13538	; 0x34e2
   15400:	movt	r0, #2
   15404:	b	156f4 <__assert_fail@plt+0x3c68>
   15408:	movw	r0, #13362	; 0x3432
   1540c:	movt	r0, #2
   15410:	b	156f4 <__assert_fail@plt+0x3c68>
   15414:	movw	r0, #13268	; 0x33d4
   15418:	movt	r0, #2
   1541c:	b	156f4 <__assert_fail@plt+0x3c68>
   15420:	movw	r0, #13161	; 0x3369
   15424:	movt	r0, #2
   15428:	b	156f4 <__assert_fail@plt+0x3c68>
   1542c:	movw	r0, #13395	; 0x3453
   15430:	movt	r0, #2
   15434:	b	156f4 <__assert_fail@plt+0x3c68>
   15438:	movw	r0, #13698	; 0x3582
   1543c:	movt	r0, #2
   15440:	b	156f4 <__assert_fail@plt+0x3c68>
   15444:	movw	r0, #13292	; 0x33ec
   15448:	movt	r0, #2
   1544c:	b	156f4 <__assert_fail@plt+0x3c68>
   15450:	movw	r0, #13482	; 0x34aa
   15454:	movt	r0, #2
   15458:	b	156f4 <__assert_fail@plt+0x3c68>
   1545c:	movw	r0, #13577	; 0x3509
   15460:	movt	r0, #2
   15464:	b	156f4 <__assert_fail@plt+0x3c68>
   15468:	movw	r0, #13507	; 0x34c3
   1546c:	movt	r0, #2
   15470:	b	156f4 <__assert_fail@plt+0x3c68>
   15474:	movw	r0, #13554	; 0x34f2
   15478:	movt	r0, #2
   1547c:	b	156f4 <__assert_fail@plt+0x3c68>
   15480:	movw	r0, #13317	; 0x3405
   15484:	movt	r0, #2
   15488:	b	156f4 <__assert_fail@plt+0x3c68>
   1548c:	movw	r0, #13550	; 0x34ee
   15490:	movt	r0, #2
   15494:	b	156f4 <__assert_fail@plt+0x3c68>
   15498:	movw	r0, #13645	; 0x354d
   1549c:	movt	r0, #2
   154a0:	b	156f4 <__assert_fail@plt+0x3c68>
   154a4:	movw	r0, #13411	; 0x3463
   154a8:	movt	r0, #2
   154ac:	b	156f4 <__assert_fail@plt+0x3c68>
   154b0:	movw	r0, #13118	; 0x333e
   154b4:	movt	r0, #2
   154b8:	b	156f4 <__assert_fail@plt+0x3c68>
   154bc:	movw	r0, #13002	; 0x32ca
   154c0:	movt	r0, #2
   154c4:	b	156f4 <__assert_fail@plt+0x3c68>
   154c8:	movw	r0, #13548	; 0x34ec
   154cc:	movt	r0, #2
   154d0:	b	156f4 <__assert_fail@plt+0x3c68>
   154d4:	movw	r0, #13207	; 0x3397
   154d8:	movt	r0, #2
   154dc:	b	156f4 <__assert_fail@plt+0x3c68>
   154e0:	movw	r0, #13475	; 0x34a3
   154e4:	movt	r0, #2
   154e8:	b	156f4 <__assert_fail@plt+0x3c68>
   154ec:	movw	r0, #13399	; 0x3457
   154f0:	movt	r0, #2
   154f4:	b	156f4 <__assert_fail@plt+0x3c68>
   154f8:	movw	r0, #13734	; 0x35a6
   154fc:	movt	r0, #2
   15500:	b	156f4 <__assert_fail@plt+0x3c68>
   15504:	movw	r0, #13702	; 0x3586
   15508:	movt	r0, #2
   1550c:	b	156f4 <__assert_fail@plt+0x3c68>
   15510:	movw	r0, #13200	; 0x3390
   15514:	movt	r0, #2
   15518:	b	156f4 <__assert_fail@plt+0x3c68>
   1551c:	movw	r0, #13446	; 0x3486
   15520:	movt	r0, #2
   15524:	b	156f4 <__assert_fail@plt+0x3c68>
   15528:	movw	r0, #13236	; 0x33b4
   1552c:	movt	r0, #2
   15530:	b	156f4 <__assert_fail@plt+0x3c68>
   15534:	movw	r0, #13418	; 0x346a
   15538:	movt	r0, #2
   1553c:	b	156f4 <__assert_fail@plt+0x3c68>
   15540:	movw	r0, #13572	; 0x3504
   15544:	movt	r0, #2
   15548:	b	156f4 <__assert_fail@plt+0x3c68>
   1554c:	movw	r0, #13532	; 0x34dc
   15550:	movt	r0, #2
   15554:	b	156f4 <__assert_fail@plt+0x3c68>
   15558:	movw	r0, #13022	; 0x32de
   1555c:	movt	r0, #2
   15560:	b	156f4 <__assert_fail@plt+0x3c68>
   15564:	movw	r0, #13218	; 0x33a2
   15568:	movt	r0, #2
   1556c:	b	156f4 <__assert_fail@plt+0x3c68>
   15570:	movw	r0, #13818	; 0x35fa
   15574:	movt	r0, #2
   15578:	b	156f4 <__assert_fail@plt+0x3c68>
   1557c:	movw	r0, #13344	; 0x3420
   15580:	movt	r0, #2
   15584:	b	156f4 <__assert_fail@plt+0x3c68>
   15588:	movw	r0, #13084	; 0x331c
   1558c:	movt	r0, #2
   15590:	b	156f4 <__assert_fail@plt+0x3c68>
   15594:	movw	r0, #13327	; 0x340f
   15598:	movt	r0, #2
   1559c:	b	156f4 <__assert_fail@plt+0x3c68>
   155a0:	movw	r0, #13615	; 0x352f
   155a4:	movt	r0, #2
   155a8:	b	156f4 <__assert_fail@plt+0x3c68>
   155ac:	movw	r0, #13350	; 0x3426
   155b0:	movt	r0, #2
   155b4:	b	156f4 <__assert_fail@plt+0x3c68>
   155b8:	movw	r0, #13746	; 0x35b2
   155bc:	movt	r0, #2
   155c0:	b	156f4 <__assert_fail@plt+0x3c68>
   155c4:	movw	r0, #13077	; 0x3315
   155c8:	movt	r0, #2
   155cc:	b	156f4 <__assert_fail@plt+0x3c68>
   155d0:	movw	r0, #13600	; 0x3520
   155d4:	movt	r0, #2
   155d8:	b	156f4 <__assert_fail@plt+0x3c68>
   155dc:	movw	r0, #13389	; 0x344d
   155e0:	movt	r0, #2
   155e4:	b	156f4 <__assert_fail@plt+0x3c68>
   155e8:	movw	r0, #13102	; 0x332e
   155ec:	movt	r0, #2
   155f0:	b	156f4 <__assert_fail@plt+0x3c68>
   155f4:	movw	r0, #13048	; 0x32f8
   155f8:	movt	r0, #2
   155fc:	b	156f4 <__assert_fail@plt+0x3c68>
   15600:	movw	r0, #13332	; 0x3414
   15604:	movt	r0, #2
   15608:	b	156f4 <__assert_fail@plt+0x3c68>
   1560c:	movw	r0, #13626	; 0x353a
   15610:	movt	r0, #2
   15614:	b	156f4 <__assert_fail@plt+0x3c68>
   15618:	movw	r0, #13765	; 0x35c5
   1561c:	movt	r0, #2
   15620:	b	156f4 <__assert_fail@plt+0x3c68>
   15624:	movw	r0, #13193	; 0x3389
   15628:	movt	r0, #2
   1562c:	b	156f4 <__assert_fail@plt+0x3c68>
   15630:	movw	r0, #13495	; 0x34b7
   15634:	movt	r0, #2
   15638:	b	156f4 <__assert_fail@plt+0x3c68>
   1563c:	movw	r0, #13502	; 0x34be
   15640:	movt	r0, #2
   15644:	b	156f4 <__assert_fail@plt+0x3c68>
   15648:	movw	r0, #13368	; 0x3438
   1564c:	movt	r0, #2
   15650:	b	156f4 <__assert_fail@plt+0x3c68>
   15654:	movw	r0, #13185	; 0x3381
   15658:	movt	r0, #2
   1565c:	b	156f4 <__assert_fail@plt+0x3c68>
   15660:	movw	r1, #53613	; 0xd16d
   15664:	movt	r1, #303	; 0x12f
   15668:	cmp	r0, r1
   1566c:	bne	1567c <__assert_fail@plt+0x3bf0>
   15670:	movw	r0, #13800	; 0x35e8
   15674:	movt	r0, #2
   15678:	b	156f4 <__assert_fail@plt+0x3c68>
   1567c:	movw	r3, #13829	; 0x3605
   15680:	str	r0, [sp]
   15684:	movw	r0, #16976	; 0x4250
   15688:	mov	r1, #1
   1568c:	mov	r2, #21
   15690:	movt	r0, #3
   15694:	movt	r3, #2
   15698:	str	r0, [sp, #16]
   1569c:	bl	118f4 <__sprintf_chk@plt>
   156a0:	b	156f8 <__assert_fail@plt+0x3c6c>
   156a4:	movw	r0, #13714	; 0x3592
   156a8:	movt	r0, #2
   156ac:	b	156f4 <__assert_fail@plt+0x3c68>
   156b0:	movw	r0, #13708	; 0x358c
   156b4:	movt	r0, #2
   156b8:	b	156f4 <__assert_fail@plt+0x3c68>
   156bc:	movw	r0, #13147	; 0x335b
   156c0:	movt	r0, #2
   156c4:	b	156f4 <__assert_fail@plt+0x3c68>
   156c8:	movw	r0, #13254	; 0x33c6
   156cc:	movt	r0, #2
   156d0:	b	156f4 <__assert_fail@plt+0x3c68>
   156d4:	movw	r0, #13423	; 0x346f
   156d8:	movt	r0, #2
   156dc:	b	156f4 <__assert_fail@plt+0x3c68>
   156e0:	movw	r0, #13429	; 0x3475
   156e4:	movt	r0, #2
   156e8:	b	156f4 <__assert_fail@plt+0x3c68>
   156ec:	movw	r0, #13041	; 0x32f1
   156f0:	movt	r0, #2
   156f4:	str	r0, [sp, #16]
   156f8:	add	r8, sl, r6
   156fc:	add	r4, sl, #1
   15700:	cmp	r6, #2
   15704:	str	r6, [sp, #24]
   15708:	blt	15764 <__assert_fail@plt+0x3cd8>
   1570c:	movw	r7, #14257	; 0x37b1
   15710:	movw	r9, #14895	; 0x3a2f
   15714:	mov	r6, r4
   15718:	movt	r7, #2
   1571c:	movt	r9, #2
   15720:	ldrb	r5, [r6]
   15724:	mov	r0, r7
   15728:	mov	r2, #8
   1572c:	mov	r1, r5
   15730:	bl	11948 <memchr@plt>
   15734:	cmp	r0, #0
   15738:	beq	15768 <__assert_fail@plt+0x3cdc>
   1573c:	mov	r0, r9
   15740:	mov	r1, r5
   15744:	mov	r2, #2
   15748:	bl	11948 <memchr@plt>
   1574c:	cmp	r0, #0
   15750:	add	r6, r6, #1
   15754:	strbne	r5, [r4], #1
   15758:	cmp	r6, r8
   1575c:	bcc	15720 <__assert_fail@plt+0x3c94>
   15760:	b	15768 <__assert_fail@plt+0x3cdc>
   15764:	mov	r6, r4
   15768:	cmp	r6, r8
   1576c:	bcs	1586c <__assert_fail@plt+0x3de0>
   15770:	ldr	r0, [sp, #24]
   15774:	sub	r0, r0, r6
   15778:	add	r9, sl, r0
   1577c:	cmp	r9, #16
   15780:	bcc	1585c <__assert_fail@plt+0x3dd0>
   15784:	cmp	r4, r8
   15788:	addcc	r1, r4, r9
   1578c:	cmpcc	r6, r1
   15790:	bcc	1585c <__assert_fail@plt+0x3dd0>
   15794:	bic	r0, r9, #15
   15798:	mov	r2, #1
   1579c:	mov	r3, #0
   157a0:	str	sl, [sp, #20]
   157a4:	sub	r5, r0, #16
   157a8:	str	r0, [sp, #12]
   157ac:	add	r7, r2, r5, lsr #4
   157b0:	cmp	r5, #48	; 0x30
   157b4:	and	r0, r7, #3
   157b8:	str	r0, [sp, #24]
   157bc:	bcc	1581c <__assert_fail@plt+0x3d90>
   157c0:	ldr	r0, [sp, #24]
   157c4:	mov	r3, #0
   157c8:	mov	sl, #48	; 0x30
   157cc:	sub	r7, r7, r0
   157d0:	add	r2, r6, r3
   157d4:	add	r0, r4, r3
   157d8:	subs	r7, r7, #4
   157dc:	add	r3, r3, #64	; 0x40
   157e0:	mov	lr, r2
   157e4:	mov	r5, r0
   157e8:	add	ip, r2, #16
   157ec:	add	r1, r0, #16
   157f0:	add	r0, r0, #32
   157f4:	vld1.8	{d16-d17}, [lr], sl
   157f8:	vst1.8	{d16-d17}, [r5], sl
   157fc:	vld1.8	{d16-d17}, [ip]
   15800:	vst1.8	{d16-d17}, [r1]
   15804:	add	r1, r2, #32
   15808:	vld1.8	{d16-d17}, [r1]
   1580c:	vst1.8	{d16-d17}, [r0]
   15810:	vld1.8	{d16-d17}, [lr]
   15814:	vst1.8	{d16-d17}, [r5]
   15818:	bne	157d0 <__assert_fail@plt+0x3d44>
   1581c:	ldr	r0, [sp, #24]
   15820:	cmp	r0, #0
   15824:	beq	15844 <__assert_fail@plt+0x3db8>
   15828:	add	r7, r4, r3
   1582c:	add	r3, r6, r3
   15830:	rsb	r2, r0, #0
   15834:	vld1.8	{d16-d17}, [r3]!
   15838:	adds	r2, r2, #1
   1583c:	vst1.8	{d16-d17}, [r7]!
   15840:	bcc	15834 <__assert_fail@plt+0x3da8>
   15844:	ldr	r0, [sp, #12]
   15848:	ldr	sl, [sp, #20]
   1584c:	add	r4, r4, r0
   15850:	cmp	r0, r9
   15854:	beq	1586c <__assert_fail@plt+0x3de0>
   15858:	add	r6, r6, r0
   1585c:	ldrb	r0, [r6], #1
   15860:	cmp	r8, r6
   15864:	strb	r0, [r4], #1
   15868:	bne	1585c <__assert_fail@plt+0x3dd0>
   1586c:	ldr	r2, [sp, #16]
   15870:	mov	r0, #115	; 0x73
   15874:	mov	r1, sl
   15878:	strh	r0, [r4]
   1587c:	mov	r0, #1
   15880:	bl	11924 <__printf_chk@plt>
   15884:	b	148ac <__assert_fail@plt+0x2e20>
   15888:	mov	r1, #63	; 0x3f
   1588c:	bl	11990 <__overflow@plt>
   15890:	b	148ac <__assert_fail@plt+0x2e20>
   15894:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15898:	add	fp, sp, #28
   1589c:	sub	sp, sp, #36	; 0x24
   158a0:	mov	r8, r1
   158a4:	sub	r1, r3, #65	; 0x41
   158a8:	cmp	r1, #57	; 0x39
   158ac:	bhi	15bb8 <__assert_fail@plt+0x412c>
   158b0:	mov	r9, r0
   158b4:	ldr	r0, [fp, #16]
   158b8:	ldr	ip, [fp, #12]
   158bc:	ldm	r0, {sl, lr}
   158c0:	ldr	r3, [r0, #8]
   158c4:	add	r7, pc, #16
   158c8:	add	r6, sl, #48	; 0x30
   158cc:	add	r0, sl, #32
   158d0:	add	r5, sl, #72	; 0x48
   158d4:	add	r4, sl, #80	; 0x50
   158d8:	ldr	pc, [r7, r1, lsl #2]
   158dc:	andeq	r5, r1, r4, asr #19
   158e0:	andeq	r5, r1, r0, asr sl
   158e4:	andeq	r5, r1, r0, asr #21
   158e8:	andeq	r5, r1, ip, lsr fp
   158ec:			; <UNDEFINED> instruction: 0x00015bb8
   158f0:	andeq	r5, r1, r8, ror #23
   158f4:	andeq	r5, r1, r8, ror #24
   158f8:			; <UNDEFINED> instruction: 0x00015bb8
   158fc:			; <UNDEFINED> instruction: 0x00015bb8
   15900:			; <UNDEFINED> instruction: 0x00015bb8
   15904:			; <UNDEFINED> instruction: 0x00015bb8
   15908:			; <UNDEFINED> instruction: 0x00015bb8
   1590c:			; <UNDEFINED> instruction: 0x00015bb8
   15910:	andeq	r5, r1, r0, lsl #25
   15914:			; <UNDEFINED> instruction: 0x00015bb8
   15918:			; <UNDEFINED> instruction: 0x00015bb8
   1591c:			; <UNDEFINED> instruction: 0x00015bb8
   15920:	andeq	r5, r1, r4, lsl sp
   15924:			; <UNDEFINED> instruction: 0x00015bb8
   15928:	muleq	r1, r0, sp
   1592c:	andeq	r5, r1, r8, lsl lr
   15930:			; <UNDEFINED> instruction: 0x00015bb8
   15934:	andeq	r5, r1, r0, lsr lr
   15938:	andeq	r5, r1, r4, asr lr
   1593c:	andeq	r5, r1, ip, asr lr
   15940:	andeq	r5, r1, r4, ror #28
   15944:			; <UNDEFINED> instruction: 0x00015bb8
   15948:			; <UNDEFINED> instruction: 0x00015bb8
   1594c:			; <UNDEFINED> instruction: 0x00015bb8
   15950:			; <UNDEFINED> instruction: 0x00015bb8
   15954:			; <UNDEFINED> instruction: 0x00015bb8
   15958:			; <UNDEFINED> instruction: 0x00015bb8
   1595c:	andeq	r5, r1, r8, ror lr
   15960:	strdeq	r5, [r1], -r0
   15964:			; <UNDEFINED> instruction: 0x00015bb8
   15968:	andeq	r5, r1, r0, ror pc
   1596c:			; <UNDEFINED> instruction: 0x00015bb8
   15970:	andeq	r6, r1, r0
   15974:	andeq	r6, r1, ip, ror r0
   15978:	strdeq	r6, [r1], -r8
   1597c:	andeq	r6, r1, r4, ror r1
   15980:			; <UNDEFINED> instruction: 0x00015bb8
   15984:			; <UNDEFINED> instruction: 0x00015bb8
   15988:			; <UNDEFINED> instruction: 0x00015bb8
   1598c:	strdeq	r6, [r1], -r4
   15990:	andeq	r6, r1, r4, asr r2
   15994:	andeq	r6, r1, r4, asr #5
   15998:			; <UNDEFINED> instruction: 0x00015bb8
   1599c:			; <UNDEFINED> instruction: 0x00015bb8
   159a0:	andeq	r6, r1, r0, ror r3
   159a4:	andeq	r6, r1, r0, lsl #8
   159a8:	andeq	r6, r1, ip, ror r4
   159ac:	andeq	r6, r1, r4, lsl #10
   159b0:			; <UNDEFINED> instruction: 0x00015bb8
   159b4:	andeq	r6, r1, r0, lsl #11
   159b8:	andeq	r6, r1, r4, lsl #12
   159bc:	andeq	r6, r1, ip, ror r6
   159c0:	strdeq	r6, [r1], -r4
   159c4:	movw	r4, #16892	; 0x41fc
   159c8:	mov	r0, sl
   159cc:	movt	r4, #3
   159d0:	mov	r1, r4
   159d4:	bl	1a8e8 <__assert_fail@plt+0x8e5c>
   159d8:	mov	r0, #0
   159dc:	add	sl, r9, r8
   159e0:	mov	r6, r8
   159e4:	cmp	r8, #2
   159e8:	str	r9, [sp, #28]
   159ec:	strb	r0, [r4, #10]
   159f0:	add	r4, r9, #1
   159f4:	blt	16770 <__assert_fail@plt+0x4ce4>
   159f8:	movw	r9, #14257	; 0x37b1
   159fc:	movw	r8, #14895	; 0x3a2f
   15a00:	mov	r5, r4
   15a04:	movt	r9, #2
   15a08:	movt	r8, #2
   15a0c:	ldrb	r7, [r5]
   15a10:	mov	r0, r9
   15a14:	mov	r2, #8
   15a18:	mov	r1, r7
   15a1c:	bl	11948 <memchr@plt>
   15a20:	cmp	r0, #0
   15a24:	beq	16774 <__assert_fail@plt+0x4ce8>
   15a28:	mov	r0, r8
   15a2c:	mov	r1, r7
   15a30:	mov	r2, #2
   15a34:	bl	11948 <memchr@plt>
   15a38:	cmp	r0, #0
   15a3c:	add	r5, r5, #1
   15a40:	strbne	r7, [r4], #1
   15a44:	cmp	r5, sl
   15a48:	bcc	15a0c <__assert_fail@plt+0x3f80>
   15a4c:	b	16774 <__assert_fail@plt+0x4ce8>
   15a50:	add	sl, r9, r8
   15a54:	add	r4, r9, #1
   15a58:	mov	r6, r8
   15a5c:	cmp	r8, #2
   15a60:	str	r9, [sp, #28]
   15a64:	blt	16878 <__assert_fail@plt+0x4dec>
   15a68:	movw	r9, #14257	; 0x37b1
   15a6c:	movw	r8, #12778	; 0x31ea
   15a70:	mov	r5, r4
   15a74:	movt	r9, #2
   15a78:	movt	r8, #2
   15a7c:	ldrb	r7, [r5]
   15a80:	mov	r0, r9
   15a84:	mov	r2, #8
   15a88:	mov	r1, r7
   15a8c:	bl	11948 <memchr@plt>
   15a90:	cmp	r0, #0
   15a94:	beq	1687c <__assert_fail@plt+0x4df0>
   15a98:	mov	r0, r8
   15a9c:	mov	r1, r7
   15aa0:	mov	r2, #4
   15aa4:	bl	11948 <memchr@plt>
   15aa8:	cmp	r0, #0
   15aac:	add	r5, r5, #1
   15ab0:	strbne	r7, [r4], #1
   15ab4:	cmp	r5, sl
   15ab8:	bcc	15a7c <__assert_fail@plt+0x3ff0>
   15abc:	b	1687c <__assert_fail@plt+0x4df0>
   15ac0:	movw	r0, #16889	; 0x41f9
   15ac4:	add	r1, sp, #32
   15ac8:	mov	r7, ip
   15acc:	movt	r0, #3
   15ad0:	ldrb	r0, [r0]
   15ad4:	cmp	r0, #1
   15ad8:	bne	16980 <__assert_fail@plt+0x4ef4>
   15adc:	mov	r0, ip
   15ae0:	bl	1f110 <__assert_fail@plt+0xd684>
   15ae4:	cmp	r0, #0
   15ae8:	bpl	16990 <__assert_fail@plt+0x4f04>
   15aec:	bl	118e8 <__errno_location@plt>
   15af0:	movw	r1, #12930	; 0x3282
   15af4:	ldr	r4, [r0]
   15af8:	mov	r0, #0
   15afc:	mov	r2, #5
   15b00:	mov	r5, #0
   15b04:	movt	r1, #2
   15b08:	bl	11720 <dcgettext@plt>
   15b0c:	mov	r6, r0
   15b10:	mov	r0, #4
   15b14:	mov	r1, r7
   15b18:	bl	1e9fc <__assert_fail@plt+0xcf70>
   15b1c:	mov	r3, r0
   15b20:	mov	r0, #0
   15b24:	mov	r1, r4
   15b28:	mov	r2, r6
   15b2c:	bl	117d4 <error@plt>
   15b30:	mov	r7, #1
   15b34:	str	r5, [sp, #32]
   15b38:	b	16998 <__assert_fail@plt+0x4f0c>
   15b3c:	str	r9, [sp, #28]
   15b40:	add	r6, r9, r8
   15b44:	add	r9, r9, #1
   15b48:	cmp	r8, #2
   15b4c:	ldr	r1, [sl]
   15b50:	ldr	r0, [sl, #4]
   15b54:	str	r1, [sp, #16]
   15b58:	str	r0, [sp, #20]
   15b5c:	blt	169d4 <__assert_fail@plt+0x4f48>
   15b60:	movw	r4, #14257	; 0x37b1
   15b64:	movw	sl, #12786	; 0x31f2
   15b68:	mov	r5, r9
   15b6c:	movt	r4, #2
   15b70:	movt	sl, #2
   15b74:	ldrb	r7, [r5]
   15b78:	mov	r0, r4
   15b7c:	mov	r2, #8
   15b80:	mov	r1, r7
   15b84:	bl	11948 <memchr@plt>
   15b88:	cmp	r0, #0
   15b8c:	beq	169d8 <__assert_fail@plt+0x4f4c>
   15b90:	mov	r0, sl
   15b94:	mov	r1, r7
   15b98:	mov	r2, #4
   15b9c:	bl	11948 <memchr@plt>
   15ba0:	cmp	r0, #0
   15ba4:	add	r5, r5, #1
   15ba8:	strbne	r7, [r9], #1
   15bac:	cmp	r5, r6
   15bb0:	bcc	15b74 <__assert_fail@plt+0x40e8>
   15bb4:	b	169d8 <__assert_fail@plt+0x4f4c>
   15bb8:	movw	r0, #16868	; 0x41e4
   15bbc:	movt	r0, #3
   15bc0:	ldr	r0, [r0]
   15bc4:	ldr	r1, [r0, #20]
   15bc8:	ldr	r2, [r0, #24]
   15bcc:	cmp	r1, r2
   15bd0:	bcs	19230 <__assert_fail@plt+0x77a4>
   15bd4:	add	r2, r1, #1
   15bd8:	str	r2, [r0, #20]
   15bdc:	mov	r0, #63	; 0x3f
   15be0:	strb	r0, [r1]
   15be4:	b	191e4 <__assert_fail@plt+0x7758>
   15be8:	mov	r0, sl
   15bec:	mov	r5, r8
   15bf0:	add	r8, r9, r8
   15bf4:	bl	1a6c4 <__assert_fail@plt+0x8c38>
   15bf8:	add	r7, r9, #1
   15bfc:	mov	r4, r5
   15c00:	cmp	r5, #2
   15c04:	str	r0, [sp, #20]
   15c08:	str	r9, [sp, #28]
   15c0c:	blt	16ae0 <__assert_fail@plt+0x5054>
   15c10:	movw	sl, #14257	; 0x37b1
   15c14:	movw	r9, #14895	; 0x3a2f
   15c18:	mov	r5, r7
   15c1c:	movt	sl, #2
   15c20:	movt	r9, #2
   15c24:	ldrb	r6, [r5]
   15c28:	mov	r0, sl
   15c2c:	mov	r2, #8
   15c30:	mov	r1, r6
   15c34:	bl	11948 <memchr@plt>
   15c38:	cmp	r0, #0
   15c3c:	beq	16ae4 <__assert_fail@plt+0x5058>
   15c40:	mov	r0, r9
   15c44:	mov	r1, r6
   15c48:	mov	r2, #2
   15c4c:	bl	11948 <memchr@plt>
   15c50:	cmp	r0, #0
   15c54:	add	r5, r5, #1
   15c58:	strbne	r6, [r7], #1
   15c5c:	cmp	r5, r8
   15c60:	bcc	15c24 <__assert_fail@plt+0x4198>
   15c64:	b	16ae4 <__assert_fail@plt+0x5058>
   15c68:	ldr	r0, [sl, #28]
   15c6c:	bl	11a74 <getgrgid@plt>
   15c70:	cmp	r0, #0
   15c74:	beq	17df4 <__assert_fail@plt+0x6368>
   15c78:	ldr	r0, [r0]
   15c7c:	b	17dfc <__assert_fail@plt+0x6370>
   15c80:	mov	r0, #0
   15c84:	str	r6, [sp, #12]
   15c88:	mov	r4, ip
   15c8c:	bl	1d3d0 <__assert_fail@plt+0xb944>
   15c90:	mov	r1, r4
   15c94:	bl	1e9fc <__assert_fail@plt+0xcf70>
   15c98:	add	r5, r9, #1
   15c9c:	add	r7, r9, r8
   15ca0:	str	r9, [sp, #28]
   15ca4:	cmp	r8, #2
   15ca8:	str	r0, [sp, #16]
   15cac:	mov	r6, r5
   15cb0:	mov	r9, r5
   15cb4:	blt	182d4 <__assert_fail@plt+0x6848>
   15cb8:	mov	r9, r5
   15cbc:	mov	r6, r5
   15cc0:	mov	r4, r8
   15cc4:	ldrb	r8, [r6]
   15cc8:	movw	r0, #14257	; 0x37b1
   15ccc:	mov	r2, #8
   15cd0:	movt	r0, #2
   15cd4:	mov	r1, r8
   15cd8:	bl	11948 <memchr@plt>
   15cdc:	cmp	r0, #0
   15ce0:	beq	182d0 <__assert_fail@plt+0x6844>
   15ce4:	movw	r0, #14895	; 0x3a2f
   15ce8:	mov	r1, r8
   15cec:	mov	r2, #2
   15cf0:	movt	r0, #2
   15cf4:	bl	11948 <memchr@plt>
   15cf8:	cmp	r0, #0
   15cfc:	add	r6, r6, #1
   15d00:	strbne	r8, [r9], #1
   15d04:	mov	r8, r4
   15d08:	cmp	r6, r7
   15d0c:	bcc	15cc0 <__assert_fail@plt+0x4234>
   15d10:	b	182d4 <__assert_fail@plt+0x6848>
   15d14:	str	r9, [sp, #28]
   15d18:	add	r6, r9, r8
   15d1c:	add	r9, r9, #1
   15d20:	cmp	r8, #2
   15d24:	ldr	r1, [r0]
   15d28:	ldr	r0, [r0, #4]
   15d2c:	str	r1, [sp, #16]
   15d30:	str	r0, [sp, #20]
   15d34:	blt	16bd8 <__assert_fail@plt+0x514c>
   15d38:	movw	r4, #14257	; 0x37b1
   15d3c:	movw	sl, #12786	; 0x31f2
   15d40:	mov	r5, r9
   15d44:	movt	r4, #2
   15d48:	movt	sl, #2
   15d4c:	ldrb	r7, [r5]
   15d50:	mov	r0, r4
   15d54:	mov	r2, #8
   15d58:	mov	r1, r7
   15d5c:	bl	11948 <memchr@plt>
   15d60:	cmp	r0, #0
   15d64:	beq	16bdc <__assert_fail@plt+0x5150>
   15d68:	mov	r0, sl
   15d6c:	mov	r1, r7
   15d70:	mov	r2, #4
   15d74:	bl	11948 <memchr@plt>
   15d78:	cmp	r0, #0
   15d7c:	add	r5, r5, #1
   15d80:	strbne	r7, [r9], #1
   15d84:	cmp	r5, r6
   15d88:	bcc	15d4c <__assert_fail@plt+0x42c0>
   15d8c:	b	16bdc <__assert_fail@plt+0x5150>
   15d90:	ldrd	r0, [r0]
   15d94:	mov	r3, r8
   15d98:	add	r8, r9, r8
   15d9c:	add	r4, r9, #1
   15da0:	str	r9, [sp, #28]
   15da4:	mov	r7, r3
   15da8:	cmp	r3, #2
   15dac:	lsr	r2, r0, #12
   15db0:	orr	r1, r2, r1, lsl #20
   15db4:	bfi	r1, r0, #0, #8
   15db8:	str	r1, [sp, #20]
   15dbc:	blt	16cd0 <__assert_fail@plt+0x5244>
   15dc0:	movw	sl, #14257	; 0x37b1
   15dc4:	movw	r9, #12786	; 0x31f2
   15dc8:	mov	r5, r4
   15dcc:	movt	sl, #2
   15dd0:	movt	r9, #2
   15dd4:	ldrb	r6, [r5]
   15dd8:	mov	r0, sl
   15ddc:	mov	r2, #8
   15de0:	mov	r1, r6
   15de4:	bl	11948 <memchr@plt>
   15de8:	cmp	r0, #0
   15dec:	beq	16cd4 <__assert_fail@plt+0x5248>
   15df0:	mov	r0, r9
   15df4:	mov	r1, r6
   15df8:	mov	r2, #4
   15dfc:	bl	11948 <memchr@plt>
   15e00:	cmp	r0, #0
   15e04:	add	r5, r5, #1
   15e08:	strbne	r6, [r4], #1
   15e0c:	cmp	r5, r8
   15e10:	bcc	15dd4 <__assert_fail@plt+0x4348>
   15e14:	b	16cd4 <__assert_fail@plt+0x5248>
   15e18:	ldr	r0, [sl, #24]
   15e1c:	bl	116cc <getpwuid@plt>
   15e20:	cmp	r0, #0
   15e24:	beq	17f80 <__assert_fail@plt+0x64f4>
   15e28:	ldr	r0, [r0]
   15e2c:	b	17f88 <__assert_fail@plt+0x64fc>
   15e30:	mov	r7, #0
   15e34:	cmn	r3, #1
   15e38:	mov	r0, r9
   15e3c:	mov	r1, r8
   15e40:	movle	lr, r7
   15e44:	movle	r3, r7
   15e48:	mov	r2, lr
   15e4c:	bl	19300 <__assert_fail@plt+0x7874>
   15e50:	b	191e8 <__assert_fail@plt+0x775c>
   15e54:	ldrd	r2, [r5]
   15e58:	b	15e68 <__assert_fail@plt+0x43dc>
   15e5c:	ldrd	r2, [r4]
   15e60:	b	15e68 <__assert_fail@plt+0x43dc>
   15e64:	ldrd	r2, [sl, #88]	; 0x58
   15e68:	mov	r0, r9
   15e6c:	mov	r1, r8
   15e70:	bl	19300 <__assert_fail@plt+0x7874>
   15e74:	b	191e4 <__assert_fail@plt+0x7758>
   15e78:	ldr	sl, [sl, #16]
   15e7c:	mov	r0, r8
   15e80:	add	r8, r9, r8
   15e84:	add	r4, r9, #1
   15e88:	str	r9, [sp, #28]
   15e8c:	cmp	r0, #2
   15e90:	str	r0, [sp, #24]
   15e94:	blt	16ddc <__assert_fail@plt+0x5350>
   15e98:	movw	r7, #14257	; 0x37b1
   15e9c:	movw	r9, #12786	; 0x31f2
   15ea0:	mov	r5, r4
   15ea4:	movt	r7, #2
   15ea8:	movt	r9, #2
   15eac:	ldrb	r6, [r5]
   15eb0:	mov	r0, r7
   15eb4:	mov	r2, #8
   15eb8:	mov	r1, r6
   15ebc:	bl	11948 <memchr@plt>
   15ec0:	cmp	r0, #0
   15ec4:	beq	16de0 <__assert_fail@plt+0x5354>
   15ec8:	mov	r0, r9
   15ecc:	mov	r1, r6
   15ed0:	mov	r2, #4
   15ed4:	bl	11948 <memchr@plt>
   15ed8:	cmp	r0, #0
   15edc:	add	r5, r5, #1
   15ee0:	strbne	r6, [r4], #1
   15ee4:	cmp	r5, r8
   15ee8:	bcc	15eac <__assert_fail@plt+0x4420>
   15eec:	b	16de0 <__assert_fail@plt+0x5354>
   15ef0:	add	r0, sl, #64	; 0x40
   15ef4:	str	r9, [sp, #28]
   15ef8:	add	r6, r9, r8
   15efc:	add	r9, r9, #1
   15f00:	cmp	r8, #2
   15f04:	ldr	r1, [r0]
   15f08:	ldr	r0, [r0, #4]
   15f0c:	str	r1, [sp, #16]
   15f10:	str	r0, [sp, #20]
   15f14:	blt	16ef4 <__assert_fail@plt+0x5468>
   15f18:	movw	r4, #14257	; 0x37b1
   15f1c:	movw	sl, #12778	; 0x31ea
   15f20:	mov	r5, r9
   15f24:	movt	r4, #2
   15f28:	movt	sl, #2
   15f2c:	ldrb	r7, [r5]
   15f30:	mov	r0, r4
   15f34:	mov	r2, #8
   15f38:	mov	r1, r7
   15f3c:	bl	11948 <memchr@plt>
   15f40:	cmp	r0, #0
   15f44:	beq	16ef8 <__assert_fail@plt+0x546c>
   15f48:	mov	r0, sl
   15f4c:	mov	r1, r7
   15f50:	mov	r2, #4
   15f54:	bl	11948 <memchr@plt>
   15f58:	cmp	r0, #0
   15f5c:	add	r5, r5, #1
   15f60:	strbne	r7, [r9], #1
   15f64:	cmp	r5, r6
   15f68:	bcc	15f2c <__assert_fail@plt+0x44a0>
   15f6c:	b	16ef8 <__assert_fail@plt+0x546c>
   15f70:	cmp	r2, #72	; 0x48
   15f74:	str	r9, [sp, #28]
   15f78:	bne	17000 <__assert_fail@plt+0x5574>
   15f7c:	ldrd	r0, [sl]
   15f80:	mov	r2, r8
   15f84:	add	r8, r9, r8
   15f88:	add	r7, r9, #1
   15f8c:	mov	r4, r2
   15f90:	cmp	r2, #2
   15f94:	lsr	r1, r1, #12
   15f98:	lsr	r0, r0, #8
   15f9c:	bfi	r0, r1, #12, #20
   15fa0:	str	r0, [sp, #20]
   15fa4:	blt	184c0 <__assert_fail@plt+0x6a34>
   15fa8:	movw	sl, #14257	; 0x37b1
   15fac:	movw	r9, #12778	; 0x31ea
   15fb0:	mov	r5, r7
   15fb4:	movt	sl, #2
   15fb8:	movt	r9, #2
   15fbc:	ldrb	r6, [r5]
   15fc0:	mov	r0, sl
   15fc4:	mov	r2, #8
   15fc8:	mov	r1, r6
   15fcc:	bl	11948 <memchr@plt>
   15fd0:	cmp	r0, #0
   15fd4:	beq	184c4 <__assert_fail@plt+0x6a38>
   15fd8:	mov	r0, r9
   15fdc:	mov	r1, r6
   15fe0:	mov	r2, #4
   15fe4:	bl	11948 <memchr@plt>
   15fe8:	cmp	r0, #0
   15fec:	add	r5, r5, #1
   15ff0:	strbne	r6, [r7], #1
   15ff4:	cmp	r5, r8
   15ff8:	bcc	15fbc <__assert_fail@plt+0x4530>
   15ffc:	b	184c4 <__assert_fail@plt+0x6a38>
   16000:	ldr	r1, [sl, #16]
   16004:	mov	r0, r8
   16008:	add	r8, r9, r8
   1600c:	add	r4, r9, #1
   16010:	str	r9, [sp, #28]
   16014:	mov	sl, r0
   16018:	cmp	r0, #2
   1601c:	str	r1, [sp, #20]
   16020:	blt	17090 <__assert_fail@plt+0x5604>
   16024:	movw	r7, #14257	; 0x37b1
   16028:	movw	r9, #12786	; 0x31f2
   1602c:	mov	r5, r4
   16030:	movt	r7, #2
   16034:	movt	r9, #2
   16038:	ldrb	r6, [r5]
   1603c:	mov	r0, r7
   16040:	mov	r2, #8
   16044:	mov	r1, r6
   16048:	bl	11948 <memchr@plt>
   1604c:	cmp	r0, #0
   16050:	beq	17094 <__assert_fail@plt+0x5608>
   16054:	mov	r0, r9
   16058:	mov	r1, r6
   1605c:	mov	r2, #4
   16060:	bl	11948 <memchr@plt>
   16064:	cmp	r0, #0
   16068:	add	r5, r5, #1
   1606c:	strbne	r6, [r4], #1
   16070:	cmp	r5, r8
   16074:	bcc	16038 <__assert_fail@plt+0x45ac>
   16078:	b	17094 <__assert_fail@plt+0x5608>
   1607c:	ldr	r1, [sl, #28]
   16080:	mov	r0, r8
   16084:	add	r8, r9, r8
   16088:	add	r4, r9, #1
   1608c:	str	r9, [sp, #28]
   16090:	mov	sl, r0
   16094:	cmp	r0, #2
   16098:	str	r1, [sp, #20]
   1609c:	blt	1719c <__assert_fail@plt+0x5710>
   160a0:	movw	r7, #14257	; 0x37b1
   160a4:	movw	r9, #12778	; 0x31ea
   160a8:	mov	r5, r4
   160ac:	movt	r7, #2
   160b0:	movt	r9, #2
   160b4:	ldrb	r6, [r5]
   160b8:	mov	r0, r7
   160bc:	mov	r2, #8
   160c0:	mov	r1, r6
   160c4:	bl	11948 <memchr@plt>
   160c8:	cmp	r0, #0
   160cc:	beq	171a0 <__assert_fail@plt+0x5714>
   160d0:	mov	r0, r9
   160d4:	mov	r1, r6
   160d8:	mov	r2, #4
   160dc:	bl	11948 <memchr@plt>
   160e0:	cmp	r0, #0
   160e4:	add	r5, r5, #1
   160e8:	strbne	r6, [r4], #1
   160ec:	cmp	r5, r8
   160f0:	bcc	160b4 <__assert_fail@plt+0x4628>
   160f4:	b	171a0 <__assert_fail@plt+0x5714>
   160f8:	ldr	r1, [sl, #20]
   160fc:	mov	r0, r8
   16100:	add	r8, r9, r8
   16104:	add	r4, r9, #1
   16108:	str	r9, [sp, #28]
   1610c:	mov	sl, r0
   16110:	cmp	r0, #2
   16114:	str	r1, [sp, #20]
   16118:	blt	172a8 <__assert_fail@plt+0x581c>
   1611c:	movw	r7, #14257	; 0x37b1
   16120:	movw	r9, #12778	; 0x31ea
   16124:	mov	r5, r4
   16128:	movt	r7, #2
   1612c:	movt	r9, #2
   16130:	ldrb	r6, [r5]
   16134:	mov	r0, r7
   16138:	mov	r2, #8
   1613c:	mov	r1, r6
   16140:	bl	11948 <memchr@plt>
   16144:	cmp	r0, #0
   16148:	beq	172ac <__assert_fail@plt+0x5820>
   1614c:	mov	r0, r9
   16150:	mov	r1, r6
   16154:	mov	r2, #4
   16158:	bl	11948 <memchr@plt>
   1615c:	cmp	r0, #0
   16160:	add	r5, r5, #1
   16164:	strbne	r6, [r4], #1
   16168:	cmp	r5, r8
   1616c:	bcc	16130 <__assert_fail@plt+0x46a4>
   16170:	b	172ac <__assert_fail@plt+0x5820>
   16174:	add	r0, sl, #96	; 0x60
   16178:	str	r9, [sp, #28]
   1617c:	add	r6, r9, r8
   16180:	add	r9, r9, #1
   16184:	cmp	r8, #2
   16188:	ldr	r1, [r0]
   1618c:	ldr	r0, [r0, #4]
   16190:	str	r1, [sp, #16]
   16194:	str	r0, [sp, #20]
   16198:	blt	173b4 <__assert_fail@plt+0x5928>
   1619c:	movw	r4, #14257	; 0x37b1
   161a0:	movw	sl, #12778	; 0x31ea
   161a4:	mov	r5, r9
   161a8:	movt	r4, #2
   161ac:	movt	sl, #2
   161b0:	ldrb	r7, [r5]
   161b4:	mov	r0, r4
   161b8:	mov	r2, #8
   161bc:	mov	r1, r7
   161c0:	bl	11948 <memchr@plt>
   161c4:	cmp	r0, #0
   161c8:	beq	173b8 <__assert_fail@plt+0x592c>
   161cc:	mov	r0, sl
   161d0:	mov	r1, r7
   161d4:	mov	r2, #4
   161d8:	bl	11948 <memchr@plt>
   161dc:	cmp	r0, #0
   161e0:	add	r5, r5, #1
   161e4:	strbne	r7, [r9], #1
   161e8:	cmp	r5, r6
   161ec:	bcc	161b0 <__assert_fail@plt+0x4724>
   161f0:	b	173b8 <__assert_fail@plt+0x592c>
   161f4:	movw	r0, #16889	; 0x41f9
   161f8:	movt	r0, #3
   161fc:	ldrb	r0, [r0]
   16200:	cmp	r0, #0
   16204:	bne	16218 <__assert_fail@plt+0x478c>
   16208:	ldr	r0, [sl, #16]
   1620c:	and	r0, r0, #61440	; 0xf000
   16210:	cmp	r0, #40960	; 0xa000
   16214:	beq	17dcc <__assert_fail@plt+0x6340>
   16218:	mov	r0, ip
   1621c:	mov	r5, ip
   16220:	bl	119fc <canonicalize_file_name@plt>
   16224:	cmp	r0, #0
   16228:	beq	18284 <__assert_fail@plt+0x67f8>
   1622c:	mov	r6, r0
   16230:	bl	199c0 <__assert_fail@plt+0x7f34>
   16234:	mov	r4, r0
   16238:	mov	r0, r6
   1623c:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   16240:	cmp	r4, #0
   16244:	mov	ip, r5
   16248:	beq	17dcc <__assert_fail@plt+0x6340>
   1624c:	mov	r5, #0
   16250:	b	17dec <__assert_fail@plt+0x6360>
   16254:	add	sl, r9, r8
   16258:	add	r4, r9, #1
   1625c:	mov	r6, r8
   16260:	cmp	r8, #2
   16264:	str	r9, [sp, #28]
   16268:	blt	174ac <__assert_fail@plt+0x5a20>
   1626c:	movw	r9, #14257	; 0x37b1
   16270:	movw	r8, #14895	; 0x3a2f
   16274:	mov	r5, r4
   16278:	movt	r9, #2
   1627c:	movt	r8, #2
   16280:	ldrb	r7, [r5]
   16284:	mov	r0, r9
   16288:	mov	r2, #8
   1628c:	mov	r1, r7
   16290:	bl	11948 <memchr@plt>
   16294:	cmp	r0, #0
   16298:	beq	174b0 <__assert_fail@plt+0x5a24>
   1629c:	mov	r0, r8
   162a0:	mov	r1, r7
   162a4:	mov	r2, #2
   162a8:	bl	11948 <memchr@plt>
   162ac:	cmp	r0, #0
   162b0:	add	r5, r5, #1
   162b4:	strbne	r7, [r4], #1
   162b8:	cmp	r5, sl
   162bc:	bcc	16280 <__assert_fail@plt+0x47f4>
   162c0:	b	174b0 <__assert_fail@plt+0x5a24>
   162c4:	ldr	r0, [sl, #56]	; 0x38
   162c8:	mov	r1, #0
   162cc:	add	r6, r9, r8
   162d0:	str	r9, [sp, #28]
   162d4:	subs	r2, r0, #536870913	; 0x20000001
   162d8:	mov	sl, r0
   162dc:	rscs	r2, r1, r0, asr #31
   162e0:	mov	r2, #0
   162e4:	movwcc	r2, #1
   162e8:	rsbs	r3, r0, #0
   162ec:	sbcs	r3, r1, r0, asr #31
   162f0:	movwlt	r1, #1
   162f4:	ands	r1, r1, r2
   162f8:	asrne	r1, r0, #31
   162fc:	mov	r0, r8
   16300:	moveq	sl, #512	; 0x200
   16304:	add	r8, r9, #1
   16308:	cmp	r0, #2
   1630c:	str	r1, [sp, #20]
   16310:	str	r0, [sp, #24]
   16314:	blt	175bc <__assert_fail@plt+0x5b30>
   16318:	movw	r4, #14257	; 0x37b1
   1631c:	movw	r9, #12778	; 0x31ea
   16320:	mov	r5, r8
   16324:	movt	r4, #2
   16328:	movt	r9, #2
   1632c:	ldrb	r7, [r5]
   16330:	mov	r0, r4
   16334:	mov	r2, #8
   16338:	mov	r1, r7
   1633c:	bl	11948 <memchr@plt>
   16340:	cmp	r0, #0
   16344:	beq	175c0 <__assert_fail@plt+0x5b34>
   16348:	mov	r0, r9
   1634c:	mov	r1, r7
   16350:	mov	r2, #4
   16354:	bl	11948 <memchr@plt>
   16358:	cmp	r0, #0
   1635c:	add	r5, r5, #1
   16360:	strbne	r7, [r8], #1
   16364:	cmp	r5, r6
   16368:	bcc	1632c <__assert_fail@plt+0x48a0>
   1636c:	b	175c0 <__assert_fail@plt+0x5b34>
   16370:	cmp	r2, #72	; 0x48
   16374:	str	r9, [sp, #28]
   16378:	bne	176d0 <__assert_fail@plt+0x5c44>
   1637c:	ldrd	r0, [r0]
   16380:	mov	r2, r8
   16384:	add	r8, r9, r8
   16388:	add	r4, r9, #1
   1638c:	mov	r7, r2
   16390:	cmp	r2, #2
   16394:	lsr	r1, r1, #12
   16398:	lsr	r0, r0, #8
   1639c:	bfi	r0, r1, #12, #20
   163a0:	str	r0, [sp, #20]
   163a4:	blt	185b8 <__assert_fail@plt+0x6b2c>
   163a8:	movw	sl, #14257	; 0x37b1
   163ac:	movw	r9, #12778	; 0x31ea
   163b0:	mov	r5, r4
   163b4:	movt	sl, #2
   163b8:	movt	r9, #2
   163bc:	ldrb	r6, [r5]
   163c0:	mov	r0, sl
   163c4:	mov	r2, #8
   163c8:	mov	r1, r6
   163cc:	bl	11948 <memchr@plt>
   163d0:	cmp	r0, #0
   163d4:	beq	185bc <__assert_fail@plt+0x6b30>
   163d8:	mov	r0, r9
   163dc:	mov	r1, r6
   163e0:	mov	r2, #4
   163e4:	bl	11948 <memchr@plt>
   163e8:	cmp	r0, #0
   163ec:	add	r5, r5, #1
   163f0:	strbne	r6, [r4], #1
   163f4:	cmp	r5, r8
   163f8:	bcc	163bc <__assert_fail@plt+0x4930>
   163fc:	b	185bc <__assert_fail@plt+0x6b30>
   16400:	str	r9, [sp, #28]
   16404:	add	r4, r9, r8
   16408:	add	r9, r9, #1
   1640c:	cmp	r8, #2
   16410:	ldr	r1, [r6]
   16414:	ldr	r0, [r6, #4]
   16418:	str	r1, [sp, #16]
   1641c:	str	r0, [sp, #20]
   16420:	blt	17760 <__assert_fail@plt+0x5cd4>
   16424:	movw	r5, #14257	; 0x37b1
   16428:	movw	sl, #12868	; 0x3244
   1642c:	mov	r6, r9
   16430:	movt	r5, #2
   16434:	movt	sl, #2
   16438:	ldrb	r7, [r6]
   1643c:	mov	r0, r5
   16440:	mov	r2, #8
   16444:	mov	r1, r7
   16448:	bl	11948 <memchr@plt>
   1644c:	cmp	r0, #0
   16450:	beq	17764 <__assert_fail@plt+0x5cd8>
   16454:	mov	r0, sl
   16458:	mov	r1, r7
   1645c:	mov	r2, #6
   16460:	bl	11948 <memchr@plt>
   16464:	cmp	r0, #0
   16468:	add	r6, r6, #1
   1646c:	strbne	r7, [r9], #1
   16470:	cmp	r6, r4
   16474:	bcc	16438 <__assert_fail@plt+0x49ac>
   16478:	b	17764 <__assert_fail@plt+0x5cd8>
   1647c:	ldrd	r0, [r0]
   16480:	mov	r2, r8
   16484:	add	r8, r9, r8
   16488:	add	r4, r9, #1
   1648c:	str	r9, [sp, #28]
   16490:	mov	r7, r2
   16494:	cmp	r2, #2
   16498:	lsr	r1, r1, #12
   1649c:	lsr	r0, r0, #8
   164a0:	bfi	r0, r1, #12, #20
   164a4:	str	r0, [sp, #20]
   164a8:	blt	17858 <__assert_fail@plt+0x5dcc>
   164ac:	movw	sl, #14257	; 0x37b1
   164b0:	movw	r9, #12786	; 0x31f2
   164b4:	mov	r5, r4
   164b8:	movt	sl, #2
   164bc:	movt	r9, #2
   164c0:	ldrb	r6, [r5]
   164c4:	mov	r0, sl
   164c8:	mov	r2, #8
   164cc:	mov	r1, r6
   164d0:	bl	11948 <memchr@plt>
   164d4:	cmp	r0, #0
   164d8:	beq	1785c <__assert_fail@plt+0x5dd0>
   164dc:	mov	r0, r9
   164e0:	mov	r1, r6
   164e4:	mov	r2, #4
   164e8:	bl	11948 <memchr@plt>
   164ec:	cmp	r0, #0
   164f0:	add	r5, r5, #1
   164f4:	strbne	r6, [r4], #1
   164f8:	cmp	r5, r8
   164fc:	bcc	164c0 <__assert_fail@plt+0x4a34>
   16500:	b	1785c <__assert_fail@plt+0x5dd0>
   16504:	ldr	r1, [sl, #24]
   16508:	mov	r0, r8
   1650c:	add	r8, r9, r8
   16510:	add	r4, r9, #1
   16514:	str	r9, [sp, #28]
   16518:	mov	sl, r0
   1651c:	cmp	r0, #2
   16520:	str	r1, [sp, #20]
   16524:	blt	17950 <__assert_fail@plt+0x5ec4>
   16528:	movw	r7, #14257	; 0x37b1
   1652c:	movw	r9, #12778	; 0x31ea
   16530:	mov	r5, r4
   16534:	movt	r7, #2
   16538:	movt	r9, #2
   1653c:	ldrb	r6, [r5]
   16540:	mov	r0, r7
   16544:	mov	r2, #8
   16548:	mov	r1, r6
   1654c:	bl	11948 <memchr@plt>
   16550:	cmp	r0, #0
   16554:	beq	17954 <__assert_fail@plt+0x5ec8>
   16558:	mov	r0, r9
   1655c:	mov	r1, r6
   16560:	mov	r2, #4
   16564:	bl	11948 <memchr@plt>
   16568:	cmp	r0, #0
   1656c:	add	r5, r5, #1
   16570:	strbne	r6, [r4], #1
   16574:	cmp	r5, r8
   16578:	bcc	1653c <__assert_fail@plt+0x4ab0>
   1657c:	b	17954 <__assert_fail@plt+0x5ec8>
   16580:	cmn	r3, #1
   16584:	str	r9, [sp, #28]
   16588:	ble	180f8 <__assert_fail@plt+0x666c>
   1658c:	mov	r0, lr
   16590:	mov	r1, r3
   16594:	bl	1923c <__assert_fail@plt+0x77b0>
   16598:	add	sl, r9, r8
   1659c:	add	r4, r9, #1
   165a0:	mov	r6, r8
   165a4:	cmp	r8, #2
   165a8:	blt	18164 <__assert_fail@plt+0x66d8>
   165ac:	movw	r9, #14257	; 0x37b1
   165b0:	movw	r8, #14895	; 0x3a2f
   165b4:	mov	r5, r4
   165b8:	movt	r9, #2
   165bc:	movt	r8, #2
   165c0:	ldrb	r7, [r5]
   165c4:	mov	r0, r9
   165c8:	mov	r2, #8
   165cc:	mov	r1, r7
   165d0:	bl	11948 <memchr@plt>
   165d4:	cmp	r0, #0
   165d8:	beq	18168 <__assert_fail@plt+0x66dc>
   165dc:	mov	r0, r8
   165e0:	mov	r1, r7
   165e4:	mov	r2, #2
   165e8:	bl	11948 <memchr@plt>
   165ec:	cmp	r0, #0
   165f0:	add	r5, r5, #1
   165f4:	strbne	r7, [r4], #1
   165f8:	cmp	r5, sl
   165fc:	bcc	165c0 <__assert_fail@plt+0x4b34>
   16600:	b	18168 <__assert_fail@plt+0x66dc>
   16604:	ldrd	r0, [r5]
   16608:	bl	1923c <__assert_fail@plt+0x77b0>
   1660c:	add	sl, r9, r8
   16610:	add	r4, r9, #1
   16614:	mov	r6, r8
   16618:	cmp	r8, #2
   1661c:	str	r9, [sp, #28]
   16620:	blt	17a5c <__assert_fail@plt+0x5fd0>
   16624:	movw	r9, #14257	; 0x37b1
   16628:	movw	r8, #14895	; 0x3a2f
   1662c:	mov	r5, r4
   16630:	movt	r9, #2
   16634:	movt	r8, #2
   16638:	ldrb	r7, [r5]
   1663c:	mov	r0, r9
   16640:	mov	r2, #8
   16644:	mov	r1, r7
   16648:	bl	11948 <memchr@plt>
   1664c:	cmp	r0, #0
   16650:	beq	17a60 <__assert_fail@plt+0x5fd4>
   16654:	mov	r0, r8
   16658:	mov	r1, r7
   1665c:	mov	r2, #2
   16660:	bl	11948 <memchr@plt>
   16664:	cmp	r0, #0
   16668:	add	r5, r5, #1
   1666c:	strbne	r7, [r4], #1
   16670:	cmp	r5, sl
   16674:	bcc	16638 <__assert_fail@plt+0x4bac>
   16678:	b	17a60 <__assert_fail@plt+0x5fd4>
   1667c:	ldrd	r0, [r4]
   16680:	bl	1923c <__assert_fail@plt+0x77b0>
   16684:	add	sl, r9, r8
   16688:	add	r4, r9, #1
   1668c:	mov	r6, r8
   16690:	cmp	r8, #2
   16694:	str	r9, [sp, #28]
   16698:	blt	17b64 <__assert_fail@plt+0x60d8>
   1669c:	movw	r9, #14257	; 0x37b1
   166a0:	movw	r8, #14895	; 0x3a2f
   166a4:	mov	r5, r4
   166a8:	movt	r9, #2
   166ac:	movt	r8, #2
   166b0:	ldrb	r7, [r5]
   166b4:	mov	r0, r9
   166b8:	mov	r2, #8
   166bc:	mov	r1, r7
   166c0:	bl	11948 <memchr@plt>
   166c4:	cmp	r0, #0
   166c8:	beq	17b68 <__assert_fail@plt+0x60dc>
   166cc:	mov	r0, r8
   166d0:	mov	r1, r7
   166d4:	mov	r2, #2
   166d8:	bl	11948 <memchr@plt>
   166dc:	cmp	r0, #0
   166e0:	add	r5, r5, #1
   166e4:	strbne	r7, [r4], #1
   166e8:	cmp	r5, sl
   166ec:	bcc	166b0 <__assert_fail@plt+0x4c24>
   166f0:	b	17b68 <__assert_fail@plt+0x60dc>
   166f4:	add	r0, sl, #88	; 0x58
   166f8:	ldrd	r0, [r0]
   166fc:	bl	1923c <__assert_fail@plt+0x77b0>
   16700:	add	sl, r9, r8
   16704:	add	r4, r9, #1
   16708:	mov	r6, r8
   1670c:	cmp	r8, #2
   16710:	str	r9, [sp, #28]
   16714:	blt	17c6c <__assert_fail@plt+0x61e0>
   16718:	movw	r9, #14257	; 0x37b1
   1671c:	movw	r8, #14895	; 0x3a2f
   16720:	mov	r5, r4
   16724:	movt	r9, #2
   16728:	movt	r8, #2
   1672c:	ldrb	r7, [r5]
   16730:	mov	r0, r9
   16734:	mov	r2, #8
   16738:	mov	r1, r7
   1673c:	bl	11948 <memchr@plt>
   16740:	cmp	r0, #0
   16744:	beq	17c70 <__assert_fail@plt+0x61e4>
   16748:	mov	r0, r8
   1674c:	mov	r1, r7
   16750:	mov	r2, #2
   16754:	bl	11948 <memchr@plt>
   16758:	cmp	r0, #0
   1675c:	add	r5, r5, #1
   16760:	strbne	r7, [r4], #1
   16764:	cmp	r5, sl
   16768:	bcc	1672c <__assert_fail@plt+0x4ca0>
   1676c:	b	17c70 <__assert_fail@plt+0x61e4>
   16770:	mov	r5, r4
   16774:	cmp	r5, sl
   16778:	bcs	17d74 <__assert_fail@plt+0x62e8>
   1677c:	ldr	r1, [sp, #28]
   16780:	sub	r0, r6, r5
   16784:	add	r8, r1, r0
   16788:	cmp	r8, #16
   1678c:	bcc	16864 <__assert_fail@plt+0x4dd8>
   16790:	cmp	r4, sl
   16794:	addcc	r0, r4, r8
   16798:	cmpcc	r5, r0
   1679c:	bcc	16864 <__assert_fail@plt+0x4dd8>
   167a0:	bic	r0, r8, #15
   167a4:	mov	r2, #1
   167a8:	mov	r3, #0
   167ac:	sub	r7, r0, #16
   167b0:	str	r0, [sp, #20]
   167b4:	add	r2, r2, r7, lsr #4
   167b8:	cmp	r7, #48	; 0x30
   167bc:	and	r0, r2, #3
   167c0:	str	r0, [sp, #24]
   167c4:	bcc	16824 <__assert_fail@plt+0x4d98>
   167c8:	ldr	r0, [sp, #24]
   167cc:	mov	r3, #0
   167d0:	mov	r9, #48	; 0x30
   167d4:	sub	r7, r2, r0
   167d8:	add	r1, r5, r3
   167dc:	add	r2, r4, r3
   167e0:	subs	r7, r7, #4
   167e4:	add	r3, r3, #64	; 0x40
   167e8:	mov	lr, r1
   167ec:	mov	r6, r2
   167f0:	add	ip, r1, #16
   167f4:	add	r0, r2, #16
   167f8:	vld1.8	{d16-d17}, [lr], r9
   167fc:	vst1.8	{d16-d17}, [r6], r9
   16800:	vld1.8	{d16-d17}, [ip]
   16804:	vst1.8	{d16-d17}, [r0]
   16808:	add	r0, r1, #32
   1680c:	vld1.8	{d16-d17}, [r0]
   16810:	add	r0, r2, #32
   16814:	vst1.8	{d16-d17}, [r0]
   16818:	vld1.8	{d16-d17}, [lr]
   1681c:	vst1.8	{d16-d17}, [r6]
   16820:	bne	167d8 <__assert_fail@plt+0x4d4c>
   16824:	ldr	r0, [sp, #24]
   16828:	cmp	r0, #0
   1682c:	beq	1684c <__assert_fail@plt+0x4dc0>
   16830:	add	r2, r4, r3
   16834:	add	r3, r5, r3
   16838:	rsb	r7, r0, #0
   1683c:	vld1.8	{d16-d17}, [r3]!
   16840:	adds	r7, r7, #1
   16844:	vst1.8	{d16-d17}, [r2]!
   16848:	bcc	1683c <__assert_fail@plt+0x4db0>
   1684c:	ldr	r0, [sp, #20]
   16850:	ldr	r1, [sp, #28]
   16854:	add	r4, r4, r0
   16858:	cmp	r0, r8
   1685c:	beq	17d78 <__assert_fail@plt+0x62ec>
   16860:	add	r5, r5, r0
   16864:	ldrb	r0, [r5], #1
   16868:	cmp	sl, r5
   1686c:	strb	r0, [r4], #1
   16870:	bne	16864 <__assert_fail@plt+0x4dd8>
   16874:	b	17d78 <__assert_fail@plt+0x62ec>
   16878:	mov	r5, r4
   1687c:	cmp	r5, sl
   16880:	bcs	17d8c <__assert_fail@plt+0x6300>
   16884:	ldr	r1, [sp, #28]
   16888:	sub	r0, r6, r5
   1688c:	add	r8, r1, r0
   16890:	cmp	r8, #16
   16894:	bcc	1696c <__assert_fail@plt+0x4ee0>
   16898:	cmp	r4, sl
   1689c:	addcc	r0, r4, r8
   168a0:	cmpcc	r5, r0
   168a4:	bcc	1696c <__assert_fail@plt+0x4ee0>
   168a8:	bic	r0, r8, #15
   168ac:	mov	r2, #1
   168b0:	mov	r3, #0
   168b4:	sub	r7, r0, #16
   168b8:	str	r0, [sp, #20]
   168bc:	add	r2, r2, r7, lsr #4
   168c0:	cmp	r7, #48	; 0x30
   168c4:	and	r0, r2, #3
   168c8:	str	r0, [sp, #24]
   168cc:	bcc	1692c <__assert_fail@plt+0x4ea0>
   168d0:	ldr	r0, [sp, #24]
   168d4:	mov	r3, #0
   168d8:	mov	r9, #48	; 0x30
   168dc:	sub	r7, r2, r0
   168e0:	add	r1, r5, r3
   168e4:	add	r2, r4, r3
   168e8:	subs	r7, r7, #4
   168ec:	add	r3, r3, #64	; 0x40
   168f0:	mov	lr, r1
   168f4:	mov	r6, r2
   168f8:	add	ip, r1, #16
   168fc:	add	r0, r2, #16
   16900:	vld1.8	{d16-d17}, [lr], r9
   16904:	vst1.8	{d16-d17}, [r6], r9
   16908:	vld1.8	{d16-d17}, [ip]
   1690c:	vst1.8	{d16-d17}, [r0]
   16910:	add	r0, r1, #32
   16914:	vld1.8	{d16-d17}, [r0]
   16918:	add	r0, r2, #32
   1691c:	vst1.8	{d16-d17}, [r0]
   16920:	vld1.8	{d16-d17}, [lr]
   16924:	vst1.8	{d16-d17}, [r6]
   16928:	bne	168e0 <__assert_fail@plt+0x4e54>
   1692c:	ldr	r0, [sp, #24]
   16930:	cmp	r0, #0
   16934:	beq	16954 <__assert_fail@plt+0x4ec8>
   16938:	add	r2, r4, r3
   1693c:	add	r3, r5, r3
   16940:	rsb	r7, r0, #0
   16944:	vld1.8	{d16-d17}, [r3]!
   16948:	adds	r7, r7, #1
   1694c:	vst1.8	{d16-d17}, [r2]!
   16950:	bcc	16944 <__assert_fail@plt+0x4eb8>
   16954:	ldr	r0, [sp, #20]
   16958:	ldr	r1, [sp, #28]
   1695c:	add	r4, r4, r0
   16960:	cmp	r0, r8
   16964:	beq	17d90 <__assert_fail@plt+0x6304>
   16968:	add	r5, r5, r0
   1696c:	ldrb	r0, [r5], #1
   16970:	cmp	sl, r5
   16974:	strb	r0, [r4], #1
   16978:	bne	1696c <__assert_fail@plt+0x4ee0>
   1697c:	b	17d90 <__assert_fail@plt+0x6304>
   16980:	mov	r0, ip
   16984:	bl	1f184 <__assert_fail@plt+0xd6f8>
   16988:	cmp	r0, #0
   1698c:	bmi	15aec <__assert_fail@plt+0x4060>
   16990:	ldr	r5, [sp, #32]
   16994:	mov	r7, #0
   16998:	movw	r2, #12798	; 0x31fe
   1699c:	add	r0, r9, r8
   169a0:	mov	r1, #115	; 0x73
   169a4:	cmp	r5, #0
   169a8:	strh	r1, [r0]
   169ac:	movt	r2, #2
   169b0:	movne	r2, r5
   169b4:	mov	r0, #1
   169b8:	mov	r1, r9
   169bc:	bl	11924 <__printf_chk@plt>
   169c0:	ldr	r0, [sp, #32]
   169c4:	cmp	r0, #0
   169c8:	beq	191e8 <__assert_fail@plt+0x775c>
   169cc:	bl	11a14 <freecon@plt>
   169d0:	b	191e8 <__assert_fail@plt+0x775c>
   169d4:	mov	r5, r9
   169d8:	cmp	r5, r6
   169dc:	bcs	16cc4 <__assert_fail@plt+0x5238>
   169e0:	ldr	r1, [sp, #28]
   169e4:	sub	r0, r8, r5
   169e8:	add	sl, r1, r0
   169ec:	cmp	sl, #16
   169f0:	bcc	16ac4 <__assert_fail@plt+0x5038>
   169f4:	cmp	r9, r6
   169f8:	addcc	r1, r9, sl
   169fc:	cmpcc	r5, r1
   16a00:	bcc	16ac4 <__assert_fail@plt+0x5038>
   16a04:	bic	r0, sl, #15
   16a08:	mov	r2, #1
   16a0c:	mov	r3, #0
   16a10:	sub	r4, r0, #16
   16a14:	str	r0, [sp, #12]
   16a18:	add	r7, r2, r4, lsr #4
   16a1c:	cmp	r4, #48	; 0x30
   16a20:	and	r0, r7, #3
   16a24:	str	r0, [sp, #24]
   16a28:	bcc	16a88 <__assert_fail@plt+0x4ffc>
   16a2c:	ldr	r0, [sp, #24]
   16a30:	mov	r3, #0
   16a34:	mov	r8, #48	; 0x30
   16a38:	sub	r7, r7, r0
   16a3c:	add	r2, r5, r3
   16a40:	add	r0, r9, r3
   16a44:	subs	r7, r7, #4
   16a48:	add	r3, r3, #64	; 0x40
   16a4c:	mov	r1, r2
   16a50:	mov	ip, r0
   16a54:	add	lr, r2, #16
   16a58:	add	r4, r0, #16
   16a5c:	add	r2, r2, #32
   16a60:	add	r0, r0, #32
   16a64:	vld1.8	{d16-d17}, [r1], r8
   16a68:	vst1.8	{d16-d17}, [ip], r8
   16a6c:	vld1.8	{d16-d17}, [lr]
   16a70:	vst1.8	{d16-d17}, [r4]
   16a74:	vld1.8	{d16-d17}, [r2]
   16a78:	vst1.8	{d16-d17}, [r0]
   16a7c:	vld1.8	{d16-d17}, [r1]
   16a80:	vst1.8	{d16-d17}, [ip]
   16a84:	bne	16a3c <__assert_fail@plt+0x4fb0>
   16a88:	ldr	r0, [sp, #24]
   16a8c:	cmp	r0, #0
   16a90:	beq	16ab0 <__assert_fail@plt+0x5024>
   16a94:	add	r7, r9, r3
   16a98:	add	r3, r5, r3
   16a9c:	rsb	r2, r0, #0
   16aa0:	vld1.8	{d16-d17}, [r3]!
   16aa4:	adds	r2, r2, #1
   16aa8:	vst1.8	{d16-d17}, [r7]!
   16aac:	bcc	16aa0 <__assert_fail@plt+0x5014>
   16ab0:	ldr	r0, [sp, #12]
   16ab4:	add	r9, r9, r0
   16ab8:	cmp	r0, sl
   16abc:	beq	16cc4 <__assert_fail@plt+0x5238>
   16ac0:	add	r5, r5, r0
   16ac4:	ldr	r3, [sp, #20]
   16ac8:	ldr	r2, [sp, #16]
   16acc:	ldrb	r0, [r5], #1
   16ad0:	cmp	r6, r5
   16ad4:	strb	r0, [r9], #1
   16ad8:	bne	16acc <__assert_fail@plt+0x5040>
   16adc:	b	19110 <__assert_fail@plt+0x7684>
   16ae0:	mov	r5, r7
   16ae4:	cmp	r5, r8
   16ae8:	bcs	16bcc <__assert_fail@plt+0x5140>
   16aec:	ldr	r1, [sp, #28]
   16af0:	sub	r0, r4, r5
   16af4:	add	r9, r1, r0
   16af8:	cmp	r9, #16
   16afc:	bcc	190d0 <__assert_fail@plt+0x7644>
   16b00:	cmp	r7, r8
   16b04:	addcc	r1, r7, r9
   16b08:	cmpcc	r5, r1
   16b0c:	bcc	190d0 <__assert_fail@plt+0x7644>
   16b10:	bic	r0, r9, #15
   16b14:	mov	r2, #1
   16b18:	mov	r3, #0
   16b1c:	sub	r6, r0, #16
   16b20:	str	r0, [sp, #16]
   16b24:	add	r2, r2, r6, lsr #4
   16b28:	cmp	r6, #48	; 0x30
   16b2c:	and	r0, r2, #3
   16b30:	str	r0, [sp, #24]
   16b34:	bcc	16b94 <__assert_fail@plt+0x5108>
   16b38:	ldr	r0, [sp, #24]
   16b3c:	mov	r3, #0
   16b40:	mov	sl, #48	; 0x30
   16b44:	sub	r6, r2, r0
   16b48:	add	r1, r5, r3
   16b4c:	add	r2, r7, r3
   16b50:	subs	r6, r6, #4
   16b54:	add	r3, r3, #64	; 0x40
   16b58:	mov	r0, r1
   16b5c:	mov	ip, r2
   16b60:	add	lr, r1, #16
   16b64:	add	r4, r2, #16
   16b68:	add	r1, r1, #32
   16b6c:	vld1.8	{d16-d17}, [r0], sl
   16b70:	vst1.8	{d16-d17}, [ip], sl
   16b74:	vld1.8	{d16-d17}, [lr]
   16b78:	vst1.8	{d16-d17}, [r4]
   16b7c:	vld1.8	{d16-d17}, [r1]
   16b80:	add	r1, r2, #32
   16b84:	vst1.8	{d16-d17}, [r1]
   16b88:	vld1.8	{d16-d17}, [r0]
   16b8c:	vst1.8	{d16-d17}, [ip]
   16b90:	bne	16b48 <__assert_fail@plt+0x50bc>
   16b94:	ldr	r0, [sp, #24]
   16b98:	cmp	r0, #0
   16b9c:	beq	16bbc <__assert_fail@plt+0x5130>
   16ba0:	add	r2, r7, r3
   16ba4:	add	r3, r5, r3
   16ba8:	rsb	r6, r0, #0
   16bac:	vld1.8	{d16-d17}, [r3]!
   16bb0:	adds	r6, r6, #1
   16bb4:	vst1.8	{d16-d17}, [r2]!
   16bb8:	bcc	16bac <__assert_fail@plt+0x5120>
   16bbc:	ldr	r0, [sp, #16]
   16bc0:	add	r7, r7, r0
   16bc4:	cmp	r0, r9
   16bc8:	bne	190cc <__assert_fail@plt+0x7640>
   16bcc:	ldr	r1, [sp, #28]
   16bd0:	ldr	r2, [sp, #20]
   16bd4:	b	190e8 <__assert_fail@plt+0x765c>
   16bd8:	mov	r5, r9
   16bdc:	cmp	r5, r6
   16be0:	bcs	16cc4 <__assert_fail@plt+0x5238>
   16be4:	ldr	r1, [sp, #28]
   16be8:	sub	r0, r8, r5
   16bec:	add	sl, r1, r0
   16bf0:	cmp	sl, #16
   16bf4:	bcc	190f8 <__assert_fail@plt+0x766c>
   16bf8:	cmp	r9, r6
   16bfc:	addcc	r1, r9, sl
   16c00:	cmpcc	r5, r1
   16c04:	bcc	190f8 <__assert_fail@plt+0x766c>
   16c08:	bic	r0, sl, #15
   16c0c:	mov	r2, #1
   16c10:	mov	r3, #0
   16c14:	sub	r4, r0, #16
   16c18:	str	r0, [sp, #12]
   16c1c:	add	r7, r2, r4, lsr #4
   16c20:	cmp	r4, #48	; 0x30
   16c24:	and	r0, r7, #3
   16c28:	str	r0, [sp, #24]
   16c2c:	bcc	16c8c <__assert_fail@plt+0x5200>
   16c30:	ldr	r0, [sp, #24]
   16c34:	mov	r3, #0
   16c38:	mov	r8, #48	; 0x30
   16c3c:	sub	r7, r7, r0
   16c40:	add	r2, r5, r3
   16c44:	add	r0, r9, r3
   16c48:	subs	r7, r7, #4
   16c4c:	add	r3, r3, #64	; 0x40
   16c50:	mov	r1, r2
   16c54:	mov	ip, r0
   16c58:	add	lr, r2, #16
   16c5c:	add	r4, r0, #16
   16c60:	add	r2, r2, #32
   16c64:	add	r0, r0, #32
   16c68:	vld1.8	{d16-d17}, [r1], r8
   16c6c:	vst1.8	{d16-d17}, [ip], r8
   16c70:	vld1.8	{d16-d17}, [lr]
   16c74:	vst1.8	{d16-d17}, [r4]
   16c78:	vld1.8	{d16-d17}, [r2]
   16c7c:	vst1.8	{d16-d17}, [r0]
   16c80:	vld1.8	{d16-d17}, [r1]
   16c84:	vst1.8	{d16-d17}, [ip]
   16c88:	bne	16c40 <__assert_fail@plt+0x51b4>
   16c8c:	ldr	r0, [sp, #24]
   16c90:	cmp	r0, #0
   16c94:	beq	16cb4 <__assert_fail@plt+0x5228>
   16c98:	add	r7, r9, r3
   16c9c:	add	r3, r5, r3
   16ca0:	rsb	r2, r0, #0
   16ca4:	vld1.8	{d16-d17}, [r3]!
   16ca8:	adds	r2, r2, #1
   16cac:	vst1.8	{d16-d17}, [r7]!
   16cb0:	bcc	16ca4 <__assert_fail@plt+0x5218>
   16cb4:	ldr	r0, [sp, #12]
   16cb8:	add	r9, r9, r0
   16cbc:	cmp	r0, sl
   16cc0:	bne	190f4 <__assert_fail@plt+0x7668>
   16cc4:	ldr	r3, [sp, #20]
   16cc8:	ldr	r2, [sp, #16]
   16ccc:	b	19110 <__assert_fail@plt+0x7684>
   16cd0:	mov	r5, r4
   16cd4:	cmp	r5, r8
   16cd8:	bcs	17944 <__assert_fail@plt+0x5eb8>
   16cdc:	ldr	r1, [sp, #28]
   16ce0:	sub	r0, r7, r5
   16ce4:	add	r9, r1, r0
   16ce8:	cmp	r9, #16
   16cec:	bcc	16dc0 <__assert_fail@plt+0x5334>
   16cf0:	cmp	r4, r8
   16cf4:	addcc	r1, r4, r9
   16cf8:	cmpcc	r5, r1
   16cfc:	bcc	16dc0 <__assert_fail@plt+0x5334>
   16d00:	bic	r0, r9, #15
   16d04:	mov	r2, #1
   16d08:	mov	r3, #0
   16d0c:	sub	r6, r0, #16
   16d10:	str	r0, [sp, #16]
   16d14:	add	r2, r2, r6, lsr #4
   16d18:	cmp	r6, #48	; 0x30
   16d1c:	and	r0, r2, #3
   16d20:	str	r0, [sp, #24]
   16d24:	bcc	16d84 <__assert_fail@plt+0x52f8>
   16d28:	ldr	r0, [sp, #24]
   16d2c:	mov	r3, #0
   16d30:	mov	sl, #48	; 0x30
   16d34:	sub	r6, r2, r0
   16d38:	add	r1, r5, r3
   16d3c:	add	r2, r4, r3
   16d40:	subs	r6, r6, #4
   16d44:	add	r3, r3, #64	; 0x40
   16d48:	mov	r0, r1
   16d4c:	mov	ip, r2
   16d50:	add	lr, r1, #16
   16d54:	add	r7, r2, #16
   16d58:	add	r1, r1, #32
   16d5c:	vld1.8	{d16-d17}, [r0], sl
   16d60:	vst1.8	{d16-d17}, [ip], sl
   16d64:	vld1.8	{d16-d17}, [lr]
   16d68:	vst1.8	{d16-d17}, [r7]
   16d6c:	vld1.8	{d16-d17}, [r1]
   16d70:	add	r1, r2, #32
   16d74:	vst1.8	{d16-d17}, [r1]
   16d78:	vld1.8	{d16-d17}, [r0]
   16d7c:	vst1.8	{d16-d17}, [ip]
   16d80:	bne	16d38 <__assert_fail@plt+0x52ac>
   16d84:	ldr	r0, [sp, #24]
   16d88:	cmp	r0, #0
   16d8c:	beq	16dac <__assert_fail@plt+0x5320>
   16d90:	add	r2, r4, r3
   16d94:	add	r3, r5, r3
   16d98:	rsb	r6, r0, #0
   16d9c:	vld1.8	{d16-d17}, [r3]!
   16da0:	adds	r6, r6, #1
   16da4:	vst1.8	{d16-d17}, [r2]!
   16da8:	bcc	16d9c <__assert_fail@plt+0x5310>
   16dac:	ldr	r0, [sp, #16]
   16db0:	add	r4, r4, r0
   16db4:	cmp	r0, r9
   16db8:	beq	17944 <__assert_fail@plt+0x5eb8>
   16dbc:	add	r5, r5, r0
   16dc0:	ldr	r1, [sp, #28]
   16dc4:	ldr	r2, [sp, #20]
   16dc8:	ldrb	r0, [r5], #1
   16dcc:	cmp	r8, r5
   16dd0:	strb	r0, [r4], #1
   16dd4:	bne	16dc8 <__assert_fail@plt+0x533c>
   16dd8:	b	19198 <__assert_fail@plt+0x770c>
   16ddc:	mov	r5, r4
   16de0:	bfc	sl, #12, #20
   16de4:	cmp	r5, r8
   16de8:	bcs	17da4 <__assert_fail@plt+0x6318>
   16dec:	ldr	r0, [sp, #24]
   16df0:	ldr	r1, [sp, #28]
   16df4:	sub	r0, r0, r5
   16df8:	add	r2, r1, r0
   16dfc:	cmp	r2, #16
   16e00:	bcc	16ee0 <__assert_fail@plt+0x5454>
   16e04:	cmp	r4, r8
   16e08:	addcc	r0, r4, r2
   16e0c:	cmpcc	r5, r0
   16e10:	bcc	16ee0 <__assert_fail@plt+0x5454>
   16e14:	bic	r0, r2, #15
   16e18:	str	r2, [sp, #20]
   16e1c:	mov	r2, #1
   16e20:	mov	r3, #0
   16e24:	sub	r6, r0, #16
   16e28:	str	r0, [sp, #16]
   16e2c:	add	r7, r2, r6, lsr #4
   16e30:	cmp	r6, #48	; 0x30
   16e34:	and	r0, r7, #3
   16e38:	str	r0, [sp, #24]
   16e3c:	bcc	16e9c <__assert_fail@plt+0x5410>
   16e40:	ldr	r0, [sp, #24]
   16e44:	mov	r3, #0
   16e48:	mov	r9, #48	; 0x30
   16e4c:	sub	r7, r7, r0
   16e50:	add	r2, r5, r3
   16e54:	add	r0, r4, r3
   16e58:	subs	r7, r7, #4
   16e5c:	add	r3, r3, #64	; 0x40
   16e60:	mov	r1, r2
   16e64:	mov	ip, r0
   16e68:	add	lr, r2, #16
   16e6c:	add	r6, r0, #16
   16e70:	add	r2, r2, #32
   16e74:	add	r0, r0, #32
   16e78:	vld1.8	{d16-d17}, [r1], r9
   16e7c:	vst1.8	{d16-d17}, [ip], r9
   16e80:	vld1.8	{d16-d17}, [lr]
   16e84:	vst1.8	{d16-d17}, [r6]
   16e88:	vld1.8	{d16-d17}, [r2]
   16e8c:	vst1.8	{d16-d17}, [r0]
   16e90:	vld1.8	{d16-d17}, [r1]
   16e94:	vst1.8	{d16-d17}, [ip]
   16e98:	bne	16e50 <__assert_fail@plt+0x53c4>
   16e9c:	ldr	r0, [sp, #24]
   16ea0:	cmp	r0, #0
   16ea4:	beq	16ec4 <__assert_fail@plt+0x5438>
   16ea8:	add	r7, r4, r3
   16eac:	add	r3, r5, r3
   16eb0:	rsb	r2, r0, #0
   16eb4:	vld1.8	{d16-d17}, [r3]!
   16eb8:	adds	r2, r2, #1
   16ebc:	vst1.8	{d16-d17}, [r7]!
   16ec0:	bcc	16eb4 <__assert_fail@plt+0x5428>
   16ec4:	ldr	r2, [sp, #16]
   16ec8:	ldr	r0, [sp, #20]
   16ecc:	ldr	r1, [sp, #28]
   16ed0:	add	r4, r4, r2
   16ed4:	cmp	r2, r0
   16ed8:	beq	17da8 <__assert_fail@plt+0x631c>
   16edc:	add	r5, r5, r2
   16ee0:	ldrb	r0, [r5], #1
   16ee4:	cmp	r8, r5
   16ee8:	strb	r0, [r4], #1
   16eec:	bne	16ee0 <__assert_fail@plt+0x5454>
   16ef0:	b	17da8 <__assert_fail@plt+0x631c>
   16ef4:	mov	r5, r9
   16ef8:	cmp	r5, r6
   16efc:	bcs	174a0 <__assert_fail@plt+0x5a14>
   16f00:	ldr	r1, [sp, #28]
   16f04:	sub	r0, r8, r5
   16f08:	add	sl, r1, r0
   16f0c:	cmp	sl, #16
   16f10:	bcc	16fe4 <__assert_fail@plt+0x5558>
   16f14:	cmp	r9, r6
   16f18:	addcc	r1, r9, sl
   16f1c:	cmpcc	r5, r1
   16f20:	bcc	16fe4 <__assert_fail@plt+0x5558>
   16f24:	bic	r0, sl, #15
   16f28:	mov	r2, #1
   16f2c:	mov	r3, #0
   16f30:	sub	r4, r0, #16
   16f34:	str	r0, [sp, #12]
   16f38:	add	r7, r2, r4, lsr #4
   16f3c:	cmp	r4, #48	; 0x30
   16f40:	and	r0, r7, #3
   16f44:	str	r0, [sp, #24]
   16f48:	bcc	16fa8 <__assert_fail@plt+0x551c>
   16f4c:	ldr	r0, [sp, #24]
   16f50:	mov	r3, #0
   16f54:	mov	r8, #48	; 0x30
   16f58:	sub	r7, r7, r0
   16f5c:	add	r2, r5, r3
   16f60:	add	r0, r9, r3
   16f64:	subs	r7, r7, #4
   16f68:	add	r3, r3, #64	; 0x40
   16f6c:	mov	r1, r2
   16f70:	mov	ip, r0
   16f74:	add	lr, r2, #16
   16f78:	add	r4, r0, #16
   16f7c:	add	r2, r2, #32
   16f80:	add	r0, r0, #32
   16f84:	vld1.8	{d16-d17}, [r1], r8
   16f88:	vst1.8	{d16-d17}, [ip], r8
   16f8c:	vld1.8	{d16-d17}, [lr]
   16f90:	vst1.8	{d16-d17}, [r4]
   16f94:	vld1.8	{d16-d17}, [r2]
   16f98:	vst1.8	{d16-d17}, [r0]
   16f9c:	vld1.8	{d16-d17}, [r1]
   16fa0:	vst1.8	{d16-d17}, [ip]
   16fa4:	bne	16f5c <__assert_fail@plt+0x54d0>
   16fa8:	ldr	r0, [sp, #24]
   16fac:	cmp	r0, #0
   16fb0:	beq	16fd0 <__assert_fail@plt+0x5544>
   16fb4:	add	r7, r9, r3
   16fb8:	add	r3, r5, r3
   16fbc:	rsb	r2, r0, #0
   16fc0:	vld1.8	{d16-d17}, [r3]!
   16fc4:	adds	r2, r2, #1
   16fc8:	vst1.8	{d16-d17}, [r7]!
   16fcc:	bcc	16fc0 <__assert_fail@plt+0x5534>
   16fd0:	ldr	r0, [sp, #12]
   16fd4:	add	r9, r9, r0
   16fd8:	cmp	r0, sl
   16fdc:	beq	174a0 <__assert_fail@plt+0x5a14>
   16fe0:	add	r5, r5, r0
   16fe4:	ldr	r3, [sp, #20]
   16fe8:	ldr	r2, [sp, #16]
   16fec:	ldrb	r0, [r5], #1
   16ff0:	cmp	r6, r5
   16ff4:	strb	r0, [r9], #1
   16ff8:	bne	16fec <__assert_fail@plt+0x5560>
   16ffc:	b	19138 <__assert_fail@plt+0x76ac>
   17000:	ldr	r3, [sl, #4]
   17004:	ldr	sl, [sl]
   17008:	cmp	r2, #76	; 0x4c
   1700c:	str	r8, [sp, #24]
   17010:	bne	186b8 <__assert_fail@plt+0x6c2c>
   17014:	lsr	r0, sl, #12
   17018:	mov	r1, r9
   1701c:	mov	r2, r8
   17020:	add	r9, r9, r8
   17024:	orr	r8, r0, r3, lsl #20
   17028:	add	r7, r1, #1
   1702c:	cmp	r2, #2
   17030:	bfi	r8, sl, #0, #8
   17034:	blt	18b18 <__assert_fail@plt+0x708c>
   17038:	movw	r4, #14257	; 0x37b1
   1703c:	movw	sl, #12778	; 0x31ea
   17040:	mov	r5, r7
   17044:	movt	r4, #2
   17048:	movt	sl, #2
   1704c:	ldrb	r6, [r5]
   17050:	mov	r0, r4
   17054:	mov	r2, #8
   17058:	mov	r1, r6
   1705c:	bl	11948 <memchr@plt>
   17060:	cmp	r0, #0
   17064:	beq	18b1c <__assert_fail@plt+0x7090>
   17068:	mov	r0, sl
   1706c:	mov	r1, r6
   17070:	mov	r2, #4
   17074:	bl	11948 <memchr@plt>
   17078:	cmp	r0, #0
   1707c:	add	r5, r5, #1
   17080:	strbne	r6, [r7], #1
   17084:	cmp	r5, r9
   17088:	bcc	1704c <__assert_fail@plt+0x55c0>
   1708c:	b	18b1c <__assert_fail@plt+0x7090>
   17090:	mov	r5, r4
   17094:	cmp	r5, r8
   17098:	bcs	17944 <__assert_fail@plt+0x5eb8>
   1709c:	ldr	r1, [sp, #28]
   170a0:	sub	r0, sl, r5
   170a4:	add	r9, r1, r0
   170a8:	cmp	r9, #16
   170ac:	bcc	17180 <__assert_fail@plt+0x56f4>
   170b0:	cmp	r4, r8
   170b4:	addcc	r1, r4, r9
   170b8:	cmpcc	r5, r1
   170bc:	bcc	17180 <__assert_fail@plt+0x56f4>
   170c0:	bic	r0, r9, #15
   170c4:	mov	r2, #1
   170c8:	mov	r3, #0
   170cc:	sub	r6, r0, #16
   170d0:	str	r0, [sp, #16]
   170d4:	add	r7, r2, r6, lsr #4
   170d8:	cmp	r6, #48	; 0x30
   170dc:	and	r0, r7, #3
   170e0:	str	r0, [sp, #24]
   170e4:	bcc	17144 <__assert_fail@plt+0x56b8>
   170e8:	ldr	r0, [sp, #24]
   170ec:	mov	r3, #0
   170f0:	mov	sl, #48	; 0x30
   170f4:	sub	r7, r7, r0
   170f8:	add	r2, r5, r3
   170fc:	add	r0, r4, r3
   17100:	subs	r7, r7, #4
   17104:	add	r3, r3, #64	; 0x40
   17108:	mov	r1, r2
   1710c:	mov	ip, r0
   17110:	add	lr, r2, #16
   17114:	add	r6, r0, #16
   17118:	add	r2, r2, #32
   1711c:	add	r0, r0, #32
   17120:	vld1.8	{d16-d17}, [r1], sl
   17124:	vst1.8	{d16-d17}, [ip], sl
   17128:	vld1.8	{d16-d17}, [lr]
   1712c:	vst1.8	{d16-d17}, [r6]
   17130:	vld1.8	{d16-d17}, [r2]
   17134:	vst1.8	{d16-d17}, [r0]
   17138:	vld1.8	{d16-d17}, [r1]
   1713c:	vst1.8	{d16-d17}, [ip]
   17140:	bne	170f8 <__assert_fail@plt+0x566c>
   17144:	ldr	r0, [sp, #24]
   17148:	cmp	r0, #0
   1714c:	beq	1716c <__assert_fail@plt+0x56e0>
   17150:	add	r7, r4, r3
   17154:	add	r3, r5, r3
   17158:	rsb	r2, r0, #0
   1715c:	vld1.8	{d16-d17}, [r3]!
   17160:	adds	r2, r2, #1
   17164:	vst1.8	{d16-d17}, [r7]!
   17168:	bcc	1715c <__assert_fail@plt+0x56d0>
   1716c:	ldr	r0, [sp, #16]
   17170:	add	r4, r4, r0
   17174:	cmp	r0, r9
   17178:	beq	17944 <__assert_fail@plt+0x5eb8>
   1717c:	add	r5, r5, r0
   17180:	ldr	r1, [sp, #28]
   17184:	ldr	r2, [sp, #20]
   17188:	ldrb	r0, [r5], #1
   1718c:	cmp	r8, r5
   17190:	strb	r0, [r4], #1
   17194:	bne	17188 <__assert_fail@plt+0x56fc>
   17198:	b	19198 <__assert_fail@plt+0x770c>
   1719c:	mov	r5, r4
   171a0:	cmp	r5, r8
   171a4:	bcs	186a4 <__assert_fail@plt+0x6c18>
   171a8:	ldr	r1, [sp, #28]
   171ac:	sub	r0, sl, r5
   171b0:	add	r9, r1, r0
   171b4:	cmp	r9, #16
   171b8:	bcc	1728c <__assert_fail@plt+0x5800>
   171bc:	cmp	r4, r8
   171c0:	addcc	r1, r4, r9
   171c4:	cmpcc	r5, r1
   171c8:	bcc	1728c <__assert_fail@plt+0x5800>
   171cc:	bic	r0, r9, #15
   171d0:	mov	r2, #1
   171d4:	mov	r3, #0
   171d8:	sub	r6, r0, #16
   171dc:	str	r0, [sp, #16]
   171e0:	add	r7, r2, r6, lsr #4
   171e4:	cmp	r6, #48	; 0x30
   171e8:	and	r0, r7, #3
   171ec:	str	r0, [sp, #24]
   171f0:	bcc	17250 <__assert_fail@plt+0x57c4>
   171f4:	ldr	r0, [sp, #24]
   171f8:	mov	r3, #0
   171fc:	mov	sl, #48	; 0x30
   17200:	sub	r7, r7, r0
   17204:	add	r2, r5, r3
   17208:	add	r0, r4, r3
   1720c:	subs	r7, r7, #4
   17210:	add	r3, r3, #64	; 0x40
   17214:	mov	r1, r2
   17218:	mov	ip, r0
   1721c:	add	lr, r2, #16
   17220:	add	r6, r0, #16
   17224:	add	r2, r2, #32
   17228:	add	r0, r0, #32
   1722c:	vld1.8	{d16-d17}, [r1], sl
   17230:	vst1.8	{d16-d17}, [ip], sl
   17234:	vld1.8	{d16-d17}, [lr]
   17238:	vst1.8	{d16-d17}, [r6]
   1723c:	vld1.8	{d16-d17}, [r2]
   17240:	vst1.8	{d16-d17}, [r0]
   17244:	vld1.8	{d16-d17}, [r1]
   17248:	vst1.8	{d16-d17}, [ip]
   1724c:	bne	17204 <__assert_fail@plt+0x5778>
   17250:	ldr	r0, [sp, #24]
   17254:	cmp	r0, #0
   17258:	beq	17278 <__assert_fail@plt+0x57ec>
   1725c:	add	r7, r4, r3
   17260:	add	r3, r5, r3
   17264:	rsb	r2, r0, #0
   17268:	vld1.8	{d16-d17}, [r3]!
   1726c:	adds	r2, r2, #1
   17270:	vst1.8	{d16-d17}, [r7]!
   17274:	bcc	17268 <__assert_fail@plt+0x57dc>
   17278:	ldr	r0, [sp, #16]
   1727c:	add	r4, r4, r0
   17280:	cmp	r0, r9
   17284:	beq	186a4 <__assert_fail@plt+0x6c18>
   17288:	add	r5, r5, r0
   1728c:	ldr	r1, [sp, #28]
   17290:	ldr	r2, [sp, #20]
   17294:	ldrb	r0, [r5], #1
   17298:	cmp	r8, r5
   1729c:	strb	r0, [r4], #1
   172a0:	bne	17294 <__assert_fail@plt+0x5808>
   172a4:	b	186ac <__assert_fail@plt+0x6c20>
   172a8:	mov	r5, r4
   172ac:	cmp	r5, r8
   172b0:	bcs	186a4 <__assert_fail@plt+0x6c18>
   172b4:	ldr	r1, [sp, #28]
   172b8:	sub	r0, sl, r5
   172bc:	add	r9, r1, r0
   172c0:	cmp	r9, #16
   172c4:	bcc	17398 <__assert_fail@plt+0x590c>
   172c8:	cmp	r4, r8
   172cc:	addcc	r1, r4, r9
   172d0:	cmpcc	r5, r1
   172d4:	bcc	17398 <__assert_fail@plt+0x590c>
   172d8:	bic	r0, r9, #15
   172dc:	mov	r2, #1
   172e0:	mov	r3, #0
   172e4:	sub	r6, r0, #16
   172e8:	str	r0, [sp, #16]
   172ec:	add	r7, r2, r6, lsr #4
   172f0:	cmp	r6, #48	; 0x30
   172f4:	and	r0, r7, #3
   172f8:	str	r0, [sp, #24]
   172fc:	bcc	1735c <__assert_fail@plt+0x58d0>
   17300:	ldr	r0, [sp, #24]
   17304:	mov	r3, #0
   17308:	mov	sl, #48	; 0x30
   1730c:	sub	r7, r7, r0
   17310:	add	r2, r5, r3
   17314:	add	r0, r4, r3
   17318:	subs	r7, r7, #4
   1731c:	add	r3, r3, #64	; 0x40
   17320:	mov	r1, r2
   17324:	mov	ip, r0
   17328:	add	lr, r2, #16
   1732c:	add	r6, r0, #16
   17330:	add	r2, r2, #32
   17334:	add	r0, r0, #32
   17338:	vld1.8	{d16-d17}, [r1], sl
   1733c:	vst1.8	{d16-d17}, [ip], sl
   17340:	vld1.8	{d16-d17}, [lr]
   17344:	vst1.8	{d16-d17}, [r6]
   17348:	vld1.8	{d16-d17}, [r2]
   1734c:	vst1.8	{d16-d17}, [r0]
   17350:	vld1.8	{d16-d17}, [r1]
   17354:	vst1.8	{d16-d17}, [ip]
   17358:	bne	17310 <__assert_fail@plt+0x5884>
   1735c:	ldr	r0, [sp, #24]
   17360:	cmp	r0, #0
   17364:	beq	17384 <__assert_fail@plt+0x58f8>
   17368:	add	r7, r4, r3
   1736c:	add	r3, r5, r3
   17370:	rsb	r2, r0, #0
   17374:	vld1.8	{d16-d17}, [r3]!
   17378:	adds	r2, r2, #1
   1737c:	vst1.8	{d16-d17}, [r7]!
   17380:	bcc	17374 <__assert_fail@plt+0x58e8>
   17384:	ldr	r0, [sp, #16]
   17388:	add	r4, r4, r0
   1738c:	cmp	r0, r9
   17390:	beq	186a4 <__assert_fail@plt+0x6c18>
   17394:	add	r5, r5, r0
   17398:	ldr	r1, [sp, #28]
   1739c:	ldr	r2, [sp, #20]
   173a0:	ldrb	r0, [r5], #1
   173a4:	cmp	r8, r5
   173a8:	strb	r0, [r4], #1
   173ac:	bne	173a0 <__assert_fail@plt+0x5914>
   173b0:	b	186ac <__assert_fail@plt+0x6c20>
   173b4:	mov	r5, r9
   173b8:	cmp	r5, r6
   173bc:	bcs	174a0 <__assert_fail@plt+0x5a14>
   173c0:	ldr	r1, [sp, #28]
   173c4:	sub	r0, r8, r5
   173c8:	add	sl, r1, r0
   173cc:	cmp	sl, #16
   173d0:	bcc	19120 <__assert_fail@plt+0x7694>
   173d4:	cmp	r9, r6
   173d8:	addcc	r1, r9, sl
   173dc:	cmpcc	r5, r1
   173e0:	bcc	19120 <__assert_fail@plt+0x7694>
   173e4:	bic	r0, sl, #15
   173e8:	mov	r2, #1
   173ec:	mov	r3, #0
   173f0:	sub	r4, r0, #16
   173f4:	str	r0, [sp, #12]
   173f8:	add	r7, r2, r4, lsr #4
   173fc:	cmp	r4, #48	; 0x30
   17400:	and	r0, r7, #3
   17404:	str	r0, [sp, #24]
   17408:	bcc	17468 <__assert_fail@plt+0x59dc>
   1740c:	ldr	r0, [sp, #24]
   17410:	mov	r3, #0
   17414:	mov	r8, #48	; 0x30
   17418:	sub	r7, r7, r0
   1741c:	add	r2, r5, r3
   17420:	add	r0, r9, r3
   17424:	subs	r7, r7, #4
   17428:	add	r3, r3, #64	; 0x40
   1742c:	mov	r1, r2
   17430:	mov	ip, r0
   17434:	add	lr, r2, #16
   17438:	add	r4, r0, #16
   1743c:	add	r2, r2, #32
   17440:	add	r0, r0, #32
   17444:	vld1.8	{d16-d17}, [r1], r8
   17448:	vst1.8	{d16-d17}, [ip], r8
   1744c:	vld1.8	{d16-d17}, [lr]
   17450:	vst1.8	{d16-d17}, [r4]
   17454:	vld1.8	{d16-d17}, [r2]
   17458:	vst1.8	{d16-d17}, [r0]
   1745c:	vld1.8	{d16-d17}, [r1]
   17460:	vst1.8	{d16-d17}, [ip]
   17464:	bne	1741c <__assert_fail@plt+0x5990>
   17468:	ldr	r0, [sp, #24]
   1746c:	cmp	r0, #0
   17470:	beq	17490 <__assert_fail@plt+0x5a04>
   17474:	add	r7, r9, r3
   17478:	add	r3, r5, r3
   1747c:	rsb	r2, r0, #0
   17480:	vld1.8	{d16-d17}, [r3]!
   17484:	adds	r2, r2, #1
   17488:	vst1.8	{d16-d17}, [r7]!
   1748c:	bcc	17480 <__assert_fail@plt+0x59f4>
   17490:	ldr	r0, [sp, #12]
   17494:	add	r9, r9, r0
   17498:	cmp	r0, sl
   1749c:	bne	1911c <__assert_fail@plt+0x7690>
   174a0:	ldr	r3, [sp, #20]
   174a4:	ldr	r2, [sp, #16]
   174a8:	b	19138 <__assert_fail@plt+0x76ac>
   174ac:	mov	r5, r4
   174b0:	cmp	r5, sl
   174b4:	bcs	17dc0 <__assert_fail@plt+0x6334>
   174b8:	ldr	r1, [sp, #28]
   174bc:	ldr	r2, [fp, #12]
   174c0:	sub	r0, r6, r5
   174c4:	add	r8, r1, r0
   174c8:	cmp	r8, #16
   174cc:	bcc	175a8 <__assert_fail@plt+0x5b1c>
   174d0:	cmp	r4, sl
   174d4:	addcc	r0, r4, r8
   174d8:	cmpcc	r5, r0
   174dc:	bcc	175a8 <__assert_fail@plt+0x5b1c>
   174e0:	bic	r0, r8, #15
   174e4:	mov	r2, #1
   174e8:	mov	r3, #0
   174ec:	sub	r7, r0, #16
   174f0:	str	r0, [sp, #20]
   174f4:	add	r2, r2, r7, lsr #4
   174f8:	cmp	r7, #48	; 0x30
   174fc:	and	r0, r2, #3
   17500:	str	r0, [sp, #24]
   17504:	bcc	17564 <__assert_fail@plt+0x5ad8>
   17508:	ldr	r0, [sp, #24]
   1750c:	mov	r3, #0
   17510:	mov	r9, #48	; 0x30
   17514:	sub	r7, r2, r0
   17518:	add	r1, r5, r3
   1751c:	add	r2, r4, r3
   17520:	subs	r7, r7, #4
   17524:	add	r3, r3, #64	; 0x40
   17528:	mov	lr, r1
   1752c:	mov	r6, r2
   17530:	add	ip, r1, #16
   17534:	add	r0, r2, #16
   17538:	vld1.8	{d16-d17}, [lr], r9
   1753c:	vst1.8	{d16-d17}, [r6], r9
   17540:	vld1.8	{d16-d17}, [ip]
   17544:	vst1.8	{d16-d17}, [r0]
   17548:	add	r0, r1, #32
   1754c:	vld1.8	{d16-d17}, [r0]
   17550:	add	r0, r2, #32
   17554:	vst1.8	{d16-d17}, [r0]
   17558:	vld1.8	{d16-d17}, [lr]
   1755c:	vst1.8	{d16-d17}, [r6]
   17560:	bne	17518 <__assert_fail@plt+0x5a8c>
   17564:	ldr	r0, [sp, #24]
   17568:	cmp	r0, #0
   1756c:	beq	1758c <__assert_fail@plt+0x5b00>
   17570:	add	r2, r4, r3
   17574:	add	r3, r5, r3
   17578:	rsb	r7, r0, #0
   1757c:	vld1.8	{d16-d17}, [r3]!
   17580:	adds	r7, r7, #1
   17584:	vst1.8	{d16-d17}, [r2]!
   17588:	bcc	1757c <__assert_fail@plt+0x5af0>
   1758c:	ldr	r0, [sp, #20]
   17590:	ldr	r1, [sp, #28]
   17594:	ldr	r2, [fp, #12]
   17598:	add	r4, r4, r0
   1759c:	cmp	r0, r8
   175a0:	beq	191d4 <__assert_fail@plt+0x7748>
   175a4:	add	r5, r5, r0
   175a8:	ldrb	r0, [r5], #1
   175ac:	cmp	sl, r5
   175b0:	strb	r0, [r4], #1
   175b4:	bne	175a8 <__assert_fail@plt+0x5b1c>
   175b8:	b	191d4 <__assert_fail@plt+0x7748>
   175bc:	mov	r5, r8
   175c0:	cmp	r5, r6
   175c4:	bcs	18f7c <__assert_fail@plt+0x74f0>
   175c8:	ldr	r0, [sp, #24]
   175cc:	ldr	r1, [sp, #28]
   175d0:	sub	r0, r0, r5
   175d4:	add	r2, r1, r0
   175d8:	cmp	r2, #16
   175dc:	bcc	176bc <__assert_fail@plt+0x5c30>
   175e0:	cmp	r8, r6
   175e4:	addcc	r0, r8, r2
   175e8:	cmpcc	r5, r0
   175ec:	bcc	176bc <__assert_fail@plt+0x5c30>
   175f0:	bic	r0, r2, #15
   175f4:	str	r2, [sp, #16]
   175f8:	mov	r2, #1
   175fc:	mov	r3, #0
   17600:	sub	r4, r0, #16
   17604:	str	r0, [sp, #12]
   17608:	add	r7, r2, r4, lsr #4
   1760c:	cmp	r4, #48	; 0x30
   17610:	and	r0, r7, #3
   17614:	str	r0, [sp, #24]
   17618:	bcc	17678 <__assert_fail@plt+0x5bec>
   1761c:	ldr	r0, [sp, #24]
   17620:	mov	r3, #0
   17624:	mov	r9, #48	; 0x30
   17628:	sub	r7, r7, r0
   1762c:	add	r2, r5, r3
   17630:	add	r0, r8, r3
   17634:	subs	r7, r7, #4
   17638:	add	r3, r3, #64	; 0x40
   1763c:	mov	r1, r2
   17640:	mov	ip, r0
   17644:	add	lr, r2, #16
   17648:	add	r4, r0, #16
   1764c:	add	r2, r2, #32
   17650:	add	r0, r0, #32
   17654:	vld1.8	{d16-d17}, [r1], r9
   17658:	vst1.8	{d16-d17}, [ip], r9
   1765c:	vld1.8	{d16-d17}, [lr]
   17660:	vst1.8	{d16-d17}, [r4]
   17664:	vld1.8	{d16-d17}, [r2]
   17668:	vst1.8	{d16-d17}, [r0]
   1766c:	vld1.8	{d16-d17}, [r1]
   17670:	vst1.8	{d16-d17}, [ip]
   17674:	bne	1762c <__assert_fail@plt+0x5ba0>
   17678:	ldr	r0, [sp, #24]
   1767c:	cmp	r0, #0
   17680:	beq	176a0 <__assert_fail@plt+0x5c14>
   17684:	add	r7, r8, r3
   17688:	add	r3, r5, r3
   1768c:	rsb	r2, r0, #0
   17690:	vld1.8	{d16-d17}, [r3]!
   17694:	adds	r2, r2, #1
   17698:	vst1.8	{d16-d17}, [r7]!
   1769c:	bcc	17690 <__assert_fail@plt+0x5c04>
   176a0:	ldr	r2, [sp, #12]
   176a4:	ldr	r0, [sp, #16]
   176a8:	ldr	r1, [sp, #28]
   176ac:	add	r8, r8, r2
   176b0:	cmp	r2, r0
   176b4:	beq	18f80 <__assert_fail@plt+0x74f4>
   176b8:	add	r5, r5, r2
   176bc:	ldrb	r0, [r5], #1
   176c0:	cmp	r6, r5
   176c4:	strb	r0, [r8], #1
   176c8:	bne	176bc <__assert_fail@plt+0x5c30>
   176cc:	b	18f80 <__assert_fail@plt+0x74f4>
   176d0:	ldr	sl, [r0]
   176d4:	ldr	r3, [r0, #4]
   176d8:	cmp	r2, #76	; 0x4c
   176dc:	str	r8, [sp, #24]
   176e0:	bne	18728 <__assert_fail@plt+0x6c9c>
   176e4:	lsr	r0, sl, #12
   176e8:	mov	r1, r9
   176ec:	mov	r2, r8
   176f0:	add	r9, r9, r8
   176f4:	orr	r8, r0, r3, lsl #20
   176f8:	add	r7, r1, #1
   176fc:	cmp	r2, #2
   17700:	bfi	r8, sl, #0, #8
   17704:	blt	18c28 <__assert_fail@plt+0x719c>
   17708:	movw	r4, #14257	; 0x37b1
   1770c:	movw	sl, #12778	; 0x31ea
   17710:	mov	r5, r7
   17714:	movt	r4, #2
   17718:	movt	sl, #2
   1771c:	ldrb	r6, [r5]
   17720:	mov	r0, r4
   17724:	mov	r2, #8
   17728:	mov	r1, r6
   1772c:	bl	11948 <memchr@plt>
   17730:	cmp	r0, #0
   17734:	beq	18c2c <__assert_fail@plt+0x71a0>
   17738:	mov	r0, sl
   1773c:	mov	r1, r6
   17740:	mov	r2, #4
   17744:	bl	11948 <memchr@plt>
   17748:	cmp	r0, #0
   1774c:	add	r5, r5, #1
   17750:	strbne	r6, [r7], #1
   17754:	cmp	r5, r9
   17758:	bcc	1771c <__assert_fail@plt+0x5c90>
   1775c:	b	18c2c <__assert_fail@plt+0x71a0>
   17760:	mov	r6, r9
   17764:	cmp	r6, r4
   17768:	bcs	1784c <__assert_fail@plt+0x5dc0>
   1776c:	ldr	r1, [sp, #28]
   17770:	sub	r0, r8, r6
   17774:	add	sl, r1, r0
   17778:	cmp	sl, #16
   1777c:	bcc	19148 <__assert_fail@plt+0x76bc>
   17780:	cmp	r9, r4
   17784:	addcc	r1, r9, sl
   17788:	cmpcc	r6, r1
   1778c:	bcc	19148 <__assert_fail@plt+0x76bc>
   17790:	bic	r0, sl, #15
   17794:	mov	r2, #1
   17798:	mov	r3, #0
   1779c:	sub	r5, r0, #16
   177a0:	str	r0, [sp, #12]
   177a4:	add	r7, r2, r5, lsr #4
   177a8:	cmp	r5, #48	; 0x30
   177ac:	and	r0, r7, #3
   177b0:	str	r0, [sp, #24]
   177b4:	bcc	17814 <__assert_fail@plt+0x5d88>
   177b8:	ldr	r0, [sp, #24]
   177bc:	mov	r3, #0
   177c0:	mov	r8, #48	; 0x30
   177c4:	sub	r7, r7, r0
   177c8:	add	r2, r6, r3
   177cc:	add	r0, r9, r3
   177d0:	subs	r7, r7, #4
   177d4:	add	r3, r3, #64	; 0x40
   177d8:	mov	r1, r2
   177dc:	mov	ip, r0
   177e0:	add	lr, r2, #16
   177e4:	add	r5, r0, #16
   177e8:	add	r2, r2, #32
   177ec:	add	r0, r0, #32
   177f0:	vld1.8	{d16-d17}, [r1], r8
   177f4:	vst1.8	{d16-d17}, [ip], r8
   177f8:	vld1.8	{d16-d17}, [lr]
   177fc:	vst1.8	{d16-d17}, [r5]
   17800:	vld1.8	{d16-d17}, [r2]
   17804:	vst1.8	{d16-d17}, [r0]
   17808:	vld1.8	{d16-d17}, [r1]
   1780c:	vst1.8	{d16-d17}, [ip]
   17810:	bne	177c8 <__assert_fail@plt+0x5d3c>
   17814:	ldr	r0, [sp, #24]
   17818:	cmp	r0, #0
   1781c:	beq	1783c <__assert_fail@plt+0x5db0>
   17820:	add	r7, r9, r3
   17824:	add	r3, r6, r3
   17828:	rsb	r2, r0, #0
   1782c:	vld1.8	{d16-d17}, [r3]!
   17830:	adds	r2, r2, #1
   17834:	vst1.8	{d16-d17}, [r7]!
   17838:	bcc	1782c <__assert_fail@plt+0x5da0>
   1783c:	ldr	r0, [sp, #12]
   17840:	add	r9, r9, r0
   17844:	cmp	r0, sl
   17848:	bne	19144 <__assert_fail@plt+0x76b8>
   1784c:	ldr	r3, [sp, #20]
   17850:	ldr	r2, [sp, #16]
   17854:	b	19160 <__assert_fail@plt+0x76d4>
   17858:	mov	r5, r4
   1785c:	cmp	r5, r8
   17860:	bcs	17944 <__assert_fail@plt+0x5eb8>
   17864:	ldr	r1, [sp, #28]
   17868:	sub	r0, r7, r5
   1786c:	add	r9, r1, r0
   17870:	cmp	r9, #16
   17874:	bcc	19180 <__assert_fail@plt+0x76f4>
   17878:	cmp	r4, r8
   1787c:	addcc	r1, r4, r9
   17880:	cmpcc	r5, r1
   17884:	bcc	19180 <__assert_fail@plt+0x76f4>
   17888:	bic	r0, r9, #15
   1788c:	mov	r2, #1
   17890:	mov	r3, #0
   17894:	sub	r6, r0, #16
   17898:	str	r0, [sp, #16]
   1789c:	add	r2, r2, r6, lsr #4
   178a0:	cmp	r6, #48	; 0x30
   178a4:	and	r0, r2, #3
   178a8:	str	r0, [sp, #24]
   178ac:	bcc	1790c <__assert_fail@plt+0x5e80>
   178b0:	ldr	r0, [sp, #24]
   178b4:	mov	r3, #0
   178b8:	mov	sl, #48	; 0x30
   178bc:	sub	r6, r2, r0
   178c0:	add	r1, r5, r3
   178c4:	add	r2, r4, r3
   178c8:	subs	r6, r6, #4
   178cc:	add	r3, r3, #64	; 0x40
   178d0:	mov	r0, r1
   178d4:	mov	ip, r2
   178d8:	add	lr, r1, #16
   178dc:	add	r7, r2, #16
   178e0:	add	r1, r1, #32
   178e4:	vld1.8	{d16-d17}, [r0], sl
   178e8:	vst1.8	{d16-d17}, [ip], sl
   178ec:	vld1.8	{d16-d17}, [lr]
   178f0:	vst1.8	{d16-d17}, [r7]
   178f4:	vld1.8	{d16-d17}, [r1]
   178f8:	add	r1, r2, #32
   178fc:	vst1.8	{d16-d17}, [r1]
   17900:	vld1.8	{d16-d17}, [r0]
   17904:	vst1.8	{d16-d17}, [ip]
   17908:	bne	178c0 <__assert_fail@plt+0x5e34>
   1790c:	ldr	r0, [sp, #24]
   17910:	cmp	r0, #0
   17914:	beq	17934 <__assert_fail@plt+0x5ea8>
   17918:	add	r2, r4, r3
   1791c:	add	r3, r5, r3
   17920:	rsb	r6, r0, #0
   17924:	vld1.8	{d16-d17}, [r3]!
   17928:	adds	r6, r6, #1
   1792c:	vst1.8	{d16-d17}, [r2]!
   17930:	bcc	17924 <__assert_fail@plt+0x5e98>
   17934:	ldr	r0, [sp, #16]
   17938:	add	r4, r4, r0
   1793c:	cmp	r0, r9
   17940:	bne	1917c <__assert_fail@plt+0x76f0>
   17944:	ldr	r1, [sp, #28]
   17948:	ldr	r2, [sp, #20]
   1794c:	b	19198 <__assert_fail@plt+0x770c>
   17950:	mov	r5, r4
   17954:	cmp	r5, r8
   17958:	bcs	186a4 <__assert_fail@plt+0x6c18>
   1795c:	ldr	r1, [sp, #28]
   17960:	sub	r0, sl, r5
   17964:	add	r9, r1, r0
   17968:	cmp	r9, #16
   1796c:	bcc	17a40 <__assert_fail@plt+0x5fb4>
   17970:	cmp	r4, r8
   17974:	addcc	r1, r4, r9
   17978:	cmpcc	r5, r1
   1797c:	bcc	17a40 <__assert_fail@plt+0x5fb4>
   17980:	bic	r0, r9, #15
   17984:	mov	r2, #1
   17988:	mov	r3, #0
   1798c:	sub	r6, r0, #16
   17990:	str	r0, [sp, #16]
   17994:	add	r7, r2, r6, lsr #4
   17998:	cmp	r6, #48	; 0x30
   1799c:	and	r0, r7, #3
   179a0:	str	r0, [sp, #24]
   179a4:	bcc	17a04 <__assert_fail@plt+0x5f78>
   179a8:	ldr	r0, [sp, #24]
   179ac:	mov	r3, #0
   179b0:	mov	sl, #48	; 0x30
   179b4:	sub	r7, r7, r0
   179b8:	add	r2, r5, r3
   179bc:	add	r0, r4, r3
   179c0:	subs	r7, r7, #4
   179c4:	add	r3, r3, #64	; 0x40
   179c8:	mov	r1, r2
   179cc:	mov	ip, r0
   179d0:	add	lr, r2, #16
   179d4:	add	r6, r0, #16
   179d8:	add	r2, r2, #32
   179dc:	add	r0, r0, #32
   179e0:	vld1.8	{d16-d17}, [r1], sl
   179e4:	vst1.8	{d16-d17}, [ip], sl
   179e8:	vld1.8	{d16-d17}, [lr]
   179ec:	vst1.8	{d16-d17}, [r6]
   179f0:	vld1.8	{d16-d17}, [r2]
   179f4:	vst1.8	{d16-d17}, [r0]
   179f8:	vld1.8	{d16-d17}, [r1]
   179fc:	vst1.8	{d16-d17}, [ip]
   17a00:	bne	179b8 <__assert_fail@plt+0x5f2c>
   17a04:	ldr	r0, [sp, #24]
   17a08:	cmp	r0, #0
   17a0c:	beq	17a2c <__assert_fail@plt+0x5fa0>
   17a10:	add	r7, r4, r3
   17a14:	add	r3, r5, r3
   17a18:	rsb	r2, r0, #0
   17a1c:	vld1.8	{d16-d17}, [r3]!
   17a20:	adds	r2, r2, #1
   17a24:	vst1.8	{d16-d17}, [r7]!
   17a28:	bcc	17a1c <__assert_fail@plt+0x5f90>
   17a2c:	ldr	r0, [sp, #16]
   17a30:	add	r4, r4, r0
   17a34:	cmp	r0, r9
   17a38:	beq	186a4 <__assert_fail@plt+0x6c18>
   17a3c:	add	r5, r5, r0
   17a40:	ldr	r1, [sp, #28]
   17a44:	ldr	r2, [sp, #20]
   17a48:	ldrb	r0, [r5], #1
   17a4c:	cmp	r8, r5
   17a50:	strb	r0, [r4], #1
   17a54:	bne	17a48 <__assert_fail@plt+0x5fbc>
   17a58:	b	186ac <__assert_fail@plt+0x6c20>
   17a5c:	mov	r5, r4
   17a60:	cmp	r5, sl
   17a64:	bcs	1826c <__assert_fail@plt+0x67e0>
   17a68:	ldr	r1, [sp, #28]
   17a6c:	sub	r0, r6, r5
   17a70:	add	r8, r1, r0
   17a74:	cmp	r8, #16
   17a78:	bcc	17b50 <__assert_fail@plt+0x60c4>
   17a7c:	cmp	r4, sl
   17a80:	addcc	r0, r4, r8
   17a84:	cmpcc	r5, r0
   17a88:	bcc	17b50 <__assert_fail@plt+0x60c4>
   17a8c:	bic	r0, r8, #15
   17a90:	mov	r2, #1
   17a94:	mov	r3, #0
   17a98:	sub	r7, r0, #16
   17a9c:	str	r0, [sp, #20]
   17aa0:	add	r2, r2, r7, lsr #4
   17aa4:	cmp	r7, #48	; 0x30
   17aa8:	and	r0, r2, #3
   17aac:	str	r0, [sp, #24]
   17ab0:	bcc	17b10 <__assert_fail@plt+0x6084>
   17ab4:	ldr	r0, [sp, #24]
   17ab8:	mov	r3, #0
   17abc:	mov	r9, #48	; 0x30
   17ac0:	sub	r7, r2, r0
   17ac4:	add	r1, r5, r3
   17ac8:	add	r2, r4, r3
   17acc:	subs	r7, r7, #4
   17ad0:	add	r3, r3, #64	; 0x40
   17ad4:	mov	lr, r1
   17ad8:	mov	r6, r2
   17adc:	add	ip, r1, #16
   17ae0:	add	r0, r2, #16
   17ae4:	vld1.8	{d16-d17}, [lr], r9
   17ae8:	vst1.8	{d16-d17}, [r6], r9
   17aec:	vld1.8	{d16-d17}, [ip]
   17af0:	vst1.8	{d16-d17}, [r0]
   17af4:	add	r0, r1, #32
   17af8:	vld1.8	{d16-d17}, [r0]
   17afc:	add	r0, r2, #32
   17b00:	vst1.8	{d16-d17}, [r0]
   17b04:	vld1.8	{d16-d17}, [lr]
   17b08:	vst1.8	{d16-d17}, [r6]
   17b0c:	bne	17ac4 <__assert_fail@plt+0x6038>
   17b10:	ldr	r0, [sp, #24]
   17b14:	cmp	r0, #0
   17b18:	beq	17b38 <__assert_fail@plt+0x60ac>
   17b1c:	add	r2, r4, r3
   17b20:	add	r3, r5, r3
   17b24:	rsb	r7, r0, #0
   17b28:	vld1.8	{d16-d17}, [r3]!
   17b2c:	adds	r7, r7, #1
   17b30:	vst1.8	{d16-d17}, [r2]!
   17b34:	bcc	17b28 <__assert_fail@plt+0x609c>
   17b38:	ldr	r0, [sp, #20]
   17b3c:	ldr	r1, [sp, #28]
   17b40:	add	r4, r4, r0
   17b44:	cmp	r0, r8
   17b48:	beq	18270 <__assert_fail@plt+0x67e4>
   17b4c:	add	r5, r5, r0
   17b50:	ldrb	r0, [r5], #1
   17b54:	cmp	sl, r5
   17b58:	strb	r0, [r4], #1
   17b5c:	bne	17b50 <__assert_fail@plt+0x60c4>
   17b60:	b	18270 <__assert_fail@plt+0x67e4>
   17b64:	mov	r5, r4
   17b68:	cmp	r5, sl
   17b6c:	bcs	1826c <__assert_fail@plt+0x67e0>
   17b70:	ldr	r1, [sp, #28]
   17b74:	sub	r0, r6, r5
   17b78:	add	r8, r1, r0
   17b7c:	cmp	r8, #16
   17b80:	bcc	17c58 <__assert_fail@plt+0x61cc>
   17b84:	cmp	r4, sl
   17b88:	addcc	r0, r4, r8
   17b8c:	cmpcc	r5, r0
   17b90:	bcc	17c58 <__assert_fail@plt+0x61cc>
   17b94:	bic	r0, r8, #15
   17b98:	mov	r2, #1
   17b9c:	mov	r3, #0
   17ba0:	sub	r7, r0, #16
   17ba4:	str	r0, [sp, #20]
   17ba8:	add	r2, r2, r7, lsr #4
   17bac:	cmp	r7, #48	; 0x30
   17bb0:	and	r0, r2, #3
   17bb4:	str	r0, [sp, #24]
   17bb8:	bcc	17c18 <__assert_fail@plt+0x618c>
   17bbc:	ldr	r0, [sp, #24]
   17bc0:	mov	r3, #0
   17bc4:	mov	r9, #48	; 0x30
   17bc8:	sub	r7, r2, r0
   17bcc:	add	r1, r5, r3
   17bd0:	add	r2, r4, r3
   17bd4:	subs	r7, r7, #4
   17bd8:	add	r3, r3, #64	; 0x40
   17bdc:	mov	lr, r1
   17be0:	mov	r6, r2
   17be4:	add	ip, r1, #16
   17be8:	add	r0, r2, #16
   17bec:	vld1.8	{d16-d17}, [lr], r9
   17bf0:	vst1.8	{d16-d17}, [r6], r9
   17bf4:	vld1.8	{d16-d17}, [ip]
   17bf8:	vst1.8	{d16-d17}, [r0]
   17bfc:	add	r0, r1, #32
   17c00:	vld1.8	{d16-d17}, [r0]
   17c04:	add	r0, r2, #32
   17c08:	vst1.8	{d16-d17}, [r0]
   17c0c:	vld1.8	{d16-d17}, [lr]
   17c10:	vst1.8	{d16-d17}, [r6]
   17c14:	bne	17bcc <__assert_fail@plt+0x6140>
   17c18:	ldr	r0, [sp, #24]
   17c1c:	cmp	r0, #0
   17c20:	beq	17c40 <__assert_fail@plt+0x61b4>
   17c24:	add	r2, r4, r3
   17c28:	add	r3, r5, r3
   17c2c:	rsb	r7, r0, #0
   17c30:	vld1.8	{d16-d17}, [r3]!
   17c34:	adds	r7, r7, #1
   17c38:	vst1.8	{d16-d17}, [r2]!
   17c3c:	bcc	17c30 <__assert_fail@plt+0x61a4>
   17c40:	ldr	r0, [sp, #20]
   17c44:	ldr	r1, [sp, #28]
   17c48:	add	r4, r4, r0
   17c4c:	cmp	r0, r8
   17c50:	beq	18270 <__assert_fail@plt+0x67e4>
   17c54:	add	r5, r5, r0
   17c58:	ldrb	r0, [r5], #1
   17c5c:	cmp	sl, r5
   17c60:	strb	r0, [r4], #1
   17c64:	bne	17c58 <__assert_fail@plt+0x61cc>
   17c68:	b	18270 <__assert_fail@plt+0x67e4>
   17c6c:	mov	r5, r4
   17c70:	cmp	r5, sl
   17c74:	bcs	1826c <__assert_fail@plt+0x67e0>
   17c78:	ldr	r1, [sp, #28]
   17c7c:	sub	r0, r6, r5
   17c80:	add	r8, r1, r0
   17c84:	cmp	r8, #16
   17c88:	bcc	17d60 <__assert_fail@plt+0x62d4>
   17c8c:	cmp	r4, sl
   17c90:	addcc	r0, r4, r8
   17c94:	cmpcc	r5, r0
   17c98:	bcc	17d60 <__assert_fail@plt+0x62d4>
   17c9c:	bic	r0, r8, #15
   17ca0:	mov	r2, #1
   17ca4:	mov	r3, #0
   17ca8:	sub	r7, r0, #16
   17cac:	str	r0, [sp, #20]
   17cb0:	add	r2, r2, r7, lsr #4
   17cb4:	cmp	r7, #48	; 0x30
   17cb8:	and	r0, r2, #3
   17cbc:	str	r0, [sp, #24]
   17cc0:	bcc	17d20 <__assert_fail@plt+0x6294>
   17cc4:	ldr	r0, [sp, #24]
   17cc8:	mov	r3, #0
   17ccc:	mov	r9, #48	; 0x30
   17cd0:	sub	r7, r2, r0
   17cd4:	add	r1, r5, r3
   17cd8:	add	r2, r4, r3
   17cdc:	subs	r7, r7, #4
   17ce0:	add	r3, r3, #64	; 0x40
   17ce4:	mov	lr, r1
   17ce8:	mov	r6, r2
   17cec:	add	ip, r1, #16
   17cf0:	add	r0, r2, #16
   17cf4:	vld1.8	{d16-d17}, [lr], r9
   17cf8:	vst1.8	{d16-d17}, [r6], r9
   17cfc:	vld1.8	{d16-d17}, [ip]
   17d00:	vst1.8	{d16-d17}, [r0]
   17d04:	add	r0, r1, #32
   17d08:	vld1.8	{d16-d17}, [r0]
   17d0c:	add	r0, r2, #32
   17d10:	vst1.8	{d16-d17}, [r0]
   17d14:	vld1.8	{d16-d17}, [lr]
   17d18:	vst1.8	{d16-d17}, [r6]
   17d1c:	bne	17cd4 <__assert_fail@plt+0x6248>
   17d20:	ldr	r0, [sp, #24]
   17d24:	cmp	r0, #0
   17d28:	beq	17d48 <__assert_fail@plt+0x62bc>
   17d2c:	add	r2, r4, r3
   17d30:	add	r3, r5, r3
   17d34:	rsb	r7, r0, #0
   17d38:	vld1.8	{d16-d17}, [r3]!
   17d3c:	adds	r7, r7, #1
   17d40:	vst1.8	{d16-d17}, [r2]!
   17d44:	bcc	17d38 <__assert_fail@plt+0x62ac>
   17d48:	ldr	r0, [sp, #20]
   17d4c:	ldr	r1, [sp, #28]
   17d50:	add	r4, r4, r0
   17d54:	cmp	r0, r8
   17d58:	beq	18270 <__assert_fail@plt+0x67e4>
   17d5c:	add	r5, r5, r0
   17d60:	ldrb	r0, [r5], #1
   17d64:	cmp	sl, r5
   17d68:	strb	r0, [r4], #1
   17d6c:	bne	17d60 <__assert_fail@plt+0x62d4>
   17d70:	b	18270 <__assert_fail@plt+0x67e4>
   17d74:	ldr	r1, [sp, #28]
   17d78:	movw	r2, #16892	; 0x41fc
   17d7c:	mov	r0, #115	; 0x73
   17d80:	strh	r0, [r4]
   17d84:	movt	r2, #3
   17d88:	b	191dc <__assert_fail@plt+0x7750>
   17d8c:	ldr	r1, [sp, #28]
   17d90:	movw	r0, #27756	; 0x6c6c
   17d94:	mov	r7, #0
   17d98:	mov	r2, #512	; 0x200
   17d9c:	movt	r0, #117	; 0x75
   17da0:	b	17db8 <__assert_fail@plt+0x632c>
   17da4:	ldr	r1, [sp, #28]
   17da8:	movw	r0, #27756	; 0x6c6c
   17dac:	mov	r7, #0
   17db0:	mov	r2, sl
   17db4:	movt	r0, #111	; 0x6f
   17db8:	str	r0, [r4]
   17dbc:	b	191a8 <__assert_fail@plt+0x771c>
   17dc0:	ldr	r1, [sp, #28]
   17dc4:	ldr	r2, [fp, #12]
   17dc8:	b	191d4 <__assert_fail@plt+0x7748>
   17dcc:	mov	r0, ip
   17dd0:	mov	r1, sl
   17dd4:	bl	19b18 <__assert_fail@plt+0x808c>
   17dd8:	cmp	r0, #0
   17ddc:	beq	18934 <__assert_fail@plt+0x6ea8>
   17de0:	mov	r5, r0
   17de4:	bl	199c0 <__assert_fail@plt+0x7f34>
   17de8:	mov	r4, r0
   17dec:	mov	r7, #0
   17df0:	b	18940 <__assert_fail@plt+0x6eb4>
   17df4:	movw	r0, #12770	; 0x31e2
   17df8:	movt	r0, #2
   17dfc:	str	r0, [sp, #20]
   17e00:	mov	r0, r8
   17e04:	add	r8, r9, r8
   17e08:	add	r4, r9, #1
   17e0c:	str	r9, [sp, #28]
   17e10:	mov	r7, r0
   17e14:	cmp	r0, #2
   17e18:	blt	17e74 <__assert_fail@plt+0x63e8>
   17e1c:	movw	sl, #14257	; 0x37b1
   17e20:	movw	r9, #14895	; 0x3a2f
   17e24:	mov	r5, r4
   17e28:	movt	sl, #2
   17e2c:	movt	r9, #2
   17e30:	ldrb	r6, [r5]
   17e34:	mov	r0, sl
   17e38:	mov	r2, #8
   17e3c:	mov	r1, r6
   17e40:	bl	11948 <memchr@plt>
   17e44:	cmp	r0, #0
   17e48:	beq	17e78 <__assert_fail@plt+0x63ec>
   17e4c:	mov	r0, r9
   17e50:	mov	r1, r6
   17e54:	mov	r2, #2
   17e58:	bl	11948 <memchr@plt>
   17e5c:	cmp	r0, #0
   17e60:	add	r5, r5, #1
   17e64:	strbne	r6, [r4], #1
   17e68:	cmp	r5, r8
   17e6c:	bcc	17e30 <__assert_fail@plt+0x63a4>
   17e70:	b	17e78 <__assert_fail@plt+0x63ec>
   17e74:	mov	r5, r4
   17e78:	cmp	r5, r8
   17e7c:	bcs	180ec <__assert_fail@plt+0x6660>
   17e80:	ldr	r1, [sp, #28]
   17e84:	sub	r0, r7, r5
   17e88:	add	r9, r1, r0
   17e8c:	cmp	r9, #16
   17e90:	bcc	17f64 <__assert_fail@plt+0x64d8>
   17e94:	cmp	r4, r8
   17e98:	addcc	r1, r4, r9
   17e9c:	cmpcc	r5, r1
   17ea0:	bcc	17f64 <__assert_fail@plt+0x64d8>
   17ea4:	bic	r0, r9, #15
   17ea8:	mov	r2, #1
   17eac:	mov	r3, #0
   17eb0:	sub	r6, r0, #16
   17eb4:	str	r0, [sp, #16]
   17eb8:	add	r2, r2, r6, lsr #4
   17ebc:	cmp	r6, #48	; 0x30
   17ec0:	and	r0, r2, #3
   17ec4:	str	r0, [sp, #24]
   17ec8:	bcc	17f28 <__assert_fail@plt+0x649c>
   17ecc:	ldr	r0, [sp, #24]
   17ed0:	mov	r3, #0
   17ed4:	mov	sl, #48	; 0x30
   17ed8:	sub	r6, r2, r0
   17edc:	add	r1, r5, r3
   17ee0:	add	r2, r4, r3
   17ee4:	subs	r6, r6, #4
   17ee8:	add	r3, r3, #64	; 0x40
   17eec:	mov	r0, r1
   17ef0:	mov	ip, r2
   17ef4:	add	lr, r1, #16
   17ef8:	add	r7, r2, #16
   17efc:	add	r1, r1, #32
   17f00:	vld1.8	{d16-d17}, [r0], sl
   17f04:	vst1.8	{d16-d17}, [ip], sl
   17f08:	vld1.8	{d16-d17}, [lr]
   17f0c:	vst1.8	{d16-d17}, [r7]
   17f10:	vld1.8	{d16-d17}, [r1]
   17f14:	add	r1, r2, #32
   17f18:	vst1.8	{d16-d17}, [r1]
   17f1c:	vld1.8	{d16-d17}, [r0]
   17f20:	vst1.8	{d16-d17}, [ip]
   17f24:	bne	17edc <__assert_fail@plt+0x6450>
   17f28:	ldr	r0, [sp, #24]
   17f2c:	cmp	r0, #0
   17f30:	beq	17f50 <__assert_fail@plt+0x64c4>
   17f34:	add	r2, r4, r3
   17f38:	add	r3, r5, r3
   17f3c:	rsb	r6, r0, #0
   17f40:	vld1.8	{d16-d17}, [r3]!
   17f44:	adds	r6, r6, #1
   17f48:	vst1.8	{d16-d17}, [r2]!
   17f4c:	bcc	17f40 <__assert_fail@plt+0x64b4>
   17f50:	ldr	r0, [sp, #16]
   17f54:	add	r4, r4, r0
   17f58:	cmp	r0, r9
   17f5c:	beq	180ec <__assert_fail@plt+0x6660>
   17f60:	add	r5, r5, r0
   17f64:	ldr	r1, [sp, #28]
   17f68:	ldr	r2, [sp, #20]
   17f6c:	ldrb	r0, [r5], #1
   17f70:	cmp	r8, r5
   17f74:	strb	r0, [r4], #1
   17f78:	bne	17f6c <__assert_fail@plt+0x64e0>
   17f7c:	b	191d4 <__assert_fail@plt+0x7748>
   17f80:	movw	r0, #12770	; 0x31e2
   17f84:	movt	r0, #2
   17f88:	str	r0, [sp, #20]
   17f8c:	mov	r0, r8
   17f90:	add	r8, r9, r8
   17f94:	add	r4, r9, #1
   17f98:	str	r9, [sp, #28]
   17f9c:	mov	r7, r0
   17fa0:	cmp	r0, #2
   17fa4:	blt	18000 <__assert_fail@plt+0x6574>
   17fa8:	movw	sl, #14257	; 0x37b1
   17fac:	movw	r9, #14895	; 0x3a2f
   17fb0:	mov	r5, r4
   17fb4:	movt	sl, #2
   17fb8:	movt	r9, #2
   17fbc:	ldrb	r6, [r5]
   17fc0:	mov	r0, sl
   17fc4:	mov	r2, #8
   17fc8:	mov	r1, r6
   17fcc:	bl	11948 <memchr@plt>
   17fd0:	cmp	r0, #0
   17fd4:	beq	18004 <__assert_fail@plt+0x6578>
   17fd8:	mov	r0, r9
   17fdc:	mov	r1, r6
   17fe0:	mov	r2, #2
   17fe4:	bl	11948 <memchr@plt>
   17fe8:	cmp	r0, #0
   17fec:	add	r5, r5, #1
   17ff0:	strbne	r6, [r4], #1
   17ff4:	cmp	r5, r8
   17ff8:	bcc	17fbc <__assert_fail@plt+0x6530>
   17ffc:	b	18004 <__assert_fail@plt+0x6578>
   18000:	mov	r5, r4
   18004:	cmp	r5, r8
   18008:	bcs	180ec <__assert_fail@plt+0x6660>
   1800c:	ldr	r1, [sp, #28]
   18010:	sub	r0, r7, r5
   18014:	add	r9, r1, r0
   18018:	cmp	r9, #16
   1801c:	bcc	191bc <__assert_fail@plt+0x7730>
   18020:	cmp	r4, r8
   18024:	addcc	r1, r4, r9
   18028:	cmpcc	r5, r1
   1802c:	bcc	191bc <__assert_fail@plt+0x7730>
   18030:	bic	r0, r9, #15
   18034:	mov	r2, #1
   18038:	mov	r3, #0
   1803c:	sub	r6, r0, #16
   18040:	str	r0, [sp, #16]
   18044:	add	r2, r2, r6, lsr #4
   18048:	cmp	r6, #48	; 0x30
   1804c:	and	r0, r2, #3
   18050:	str	r0, [sp, #24]
   18054:	bcc	180b4 <__assert_fail@plt+0x6628>
   18058:	ldr	r0, [sp, #24]
   1805c:	mov	r3, #0
   18060:	mov	sl, #48	; 0x30
   18064:	sub	r6, r2, r0
   18068:	add	r1, r5, r3
   1806c:	add	r2, r4, r3
   18070:	subs	r6, r6, #4
   18074:	add	r3, r3, #64	; 0x40
   18078:	mov	r0, r1
   1807c:	mov	ip, r2
   18080:	add	lr, r1, #16
   18084:	add	r7, r2, #16
   18088:	add	r1, r1, #32
   1808c:	vld1.8	{d16-d17}, [r0], sl
   18090:	vst1.8	{d16-d17}, [ip], sl
   18094:	vld1.8	{d16-d17}, [lr]
   18098:	vst1.8	{d16-d17}, [r7]
   1809c:	vld1.8	{d16-d17}, [r1]
   180a0:	add	r1, r2, #32
   180a4:	vst1.8	{d16-d17}, [r1]
   180a8:	vld1.8	{d16-d17}, [r0]
   180ac:	vst1.8	{d16-d17}, [ip]
   180b0:	bne	18068 <__assert_fail@plt+0x65dc>
   180b4:	ldr	r0, [sp, #24]
   180b8:	cmp	r0, #0
   180bc:	beq	180dc <__assert_fail@plt+0x6650>
   180c0:	add	r2, r4, r3
   180c4:	add	r3, r5, r3
   180c8:	rsb	r6, r0, #0
   180cc:	vld1.8	{d16-d17}, [r3]!
   180d0:	adds	r6, r6, #1
   180d4:	vst1.8	{d16-d17}, [r2]!
   180d8:	bcc	180cc <__assert_fail@plt+0x6640>
   180dc:	ldr	r0, [sp, #16]
   180e0:	add	r4, r4, r0
   180e4:	cmp	r0, r9
   180e8:	bne	191b8 <__assert_fail@plt+0x772c>
   180ec:	ldr	r1, [sp, #28]
   180f0:	ldr	r2, [sp, #20]
   180f4:	b	191d4 <__assert_fail@plt+0x7748>
   180f8:	add	sl, r9, r8
   180fc:	add	r4, r9, #1
   18100:	mov	r6, r8
   18104:	cmp	r8, #2
   18108:	blt	187a4 <__assert_fail@plt+0x6d18>
   1810c:	movw	r9, #14257	; 0x37b1
   18110:	movw	r8, #14895	; 0x3a2f
   18114:	mov	r5, r4
   18118:	movt	r9, #2
   1811c:	movt	r8, #2
   18120:	ldrb	r7, [r5]
   18124:	mov	r0, r9
   18128:	mov	r2, #8
   1812c:	mov	r1, r7
   18130:	bl	11948 <memchr@plt>
   18134:	cmp	r0, #0
   18138:	beq	187a8 <__assert_fail@plt+0x6d1c>
   1813c:	mov	r0, r8
   18140:	mov	r1, r7
   18144:	mov	r2, #2
   18148:	bl	11948 <memchr@plt>
   1814c:	cmp	r0, #0
   18150:	add	r5, r5, #1
   18154:	strbne	r7, [r4], #1
   18158:	cmp	r5, sl
   1815c:	bcc	18120 <__assert_fail@plt+0x6694>
   18160:	b	187a8 <__assert_fail@plt+0x6d1c>
   18164:	mov	r5, r4
   18168:	cmp	r5, sl
   1816c:	bcs	1826c <__assert_fail@plt+0x67e0>
   18170:	ldr	r1, [sp, #28]
   18174:	sub	r0, r6, r5
   18178:	add	r8, r1, r0
   1817c:	cmp	r8, #16
   18180:	bcc	18258 <__assert_fail@plt+0x67cc>
   18184:	cmp	r4, sl
   18188:	addcc	r0, r4, r8
   1818c:	cmpcc	r5, r0
   18190:	bcc	18258 <__assert_fail@plt+0x67cc>
   18194:	bic	r0, r8, #15
   18198:	mov	r2, #1
   1819c:	mov	r3, #0
   181a0:	sub	r7, r0, #16
   181a4:	str	r0, [sp, #20]
   181a8:	add	r2, r2, r7, lsr #4
   181ac:	cmp	r7, #48	; 0x30
   181b0:	and	r0, r2, #3
   181b4:	str	r0, [sp, #24]
   181b8:	bcc	18218 <__assert_fail@plt+0x678c>
   181bc:	ldr	r0, [sp, #24]
   181c0:	mov	r3, #0
   181c4:	mov	r9, #48	; 0x30
   181c8:	sub	r7, r2, r0
   181cc:	add	r1, r5, r3
   181d0:	add	r2, r4, r3
   181d4:	subs	r7, r7, #4
   181d8:	add	r3, r3, #64	; 0x40
   181dc:	mov	lr, r1
   181e0:	mov	r6, r2
   181e4:	add	ip, r1, #16
   181e8:	add	r0, r2, #16
   181ec:	vld1.8	{d16-d17}, [lr], r9
   181f0:	vst1.8	{d16-d17}, [r6], r9
   181f4:	vld1.8	{d16-d17}, [ip]
   181f8:	vst1.8	{d16-d17}, [r0]
   181fc:	add	r0, r1, #32
   18200:	vld1.8	{d16-d17}, [r0]
   18204:	add	r0, r2, #32
   18208:	vst1.8	{d16-d17}, [r0]
   1820c:	vld1.8	{d16-d17}, [lr]
   18210:	vst1.8	{d16-d17}, [r6]
   18214:	bne	181cc <__assert_fail@plt+0x6740>
   18218:	ldr	r0, [sp, #24]
   1821c:	cmp	r0, #0
   18220:	beq	18240 <__assert_fail@plt+0x67b4>
   18224:	add	r2, r4, r3
   18228:	add	r3, r5, r3
   1822c:	rsb	r7, r0, #0
   18230:	vld1.8	{d16-d17}, [r3]!
   18234:	adds	r7, r7, #1
   18238:	vst1.8	{d16-d17}, [r2]!
   1823c:	bcc	18230 <__assert_fail@plt+0x67a4>
   18240:	ldr	r0, [sp, #20]
   18244:	ldr	r1, [sp, #28]
   18248:	add	r4, r4, r0
   1824c:	cmp	r0, r8
   18250:	beq	18270 <__assert_fail@plt+0x67e4>
   18254:	add	r5, r5, r0
   18258:	ldrb	r0, [r5], #1
   1825c:	cmp	sl, r5
   18260:	strb	r0, [r4], #1
   18264:	bne	18258 <__assert_fail@plt+0x67cc>
   18268:	b	18270 <__assert_fail@plt+0x67e4>
   1826c:	ldr	r1, [sp, #28]
   18270:	movw	r2, #16909	; 0x420d
   18274:	mov	r0, #115	; 0x73
   18278:	strh	r0, [r4]
   1827c:	movt	r2, #3
   18280:	b	191dc <__assert_fail@plt+0x7750>
   18284:	bl	118e8 <__errno_location@plt>
   18288:	movw	r1, #12800	; 0x3200
   1828c:	ldr	r6, [r0]
   18290:	mov	r0, #0
   18294:	mov	r2, #5
   18298:	mov	r4, #0
   1829c:	movt	r1, #2
   182a0:	bl	11720 <dcgettext@plt>
   182a4:	mov	r7, r0
   182a8:	mov	r0, #4
   182ac:	mov	r1, r5
   182b0:	bl	1e9fc <__assert_fail@plt+0xcf70>
   182b4:	mov	r3, r0
   182b8:	mov	r0, #0
   182bc:	mov	r1, r6
   182c0:	mov	r2, r7
   182c4:	bl	117d4 <error@plt>
   182c8:	mov	r7, #1
   182cc:	b	1893c <__assert_fail@plt+0x6eb0>
   182d0:	mov	r8, r4
   182d4:	cmp	r6, r7
   182d8:	str	r7, [sp, #20]
   182dc:	bcs	183e8 <__assert_fail@plt+0x695c>
   182e0:	ldr	r1, [sp, #28]
   182e4:	sub	r0, r8, r6
   182e8:	add	r0, r1, r0
   182ec:	cmp	r0, #16
   182f0:	bcc	183d8 <__assert_fail@plt+0x694c>
   182f4:	cmp	r9, r7
   182f8:	addcc	r1, r9, r0
   182fc:	cmpcc	r6, r1
   18300:	bcc	183d8 <__assert_fail@plt+0x694c>
   18304:	str	r0, [sp, #4]
   18308:	bic	r0, r0, #15
   1830c:	mov	r2, #1
   18310:	mov	r3, #0
   18314:	str	r8, [sp, #24]
   18318:	sub	r7, r0, #16
   1831c:	str	r0, [sp]
   18320:	add	r2, r2, r7, lsr #4
   18324:	cmp	r7, #48	; 0x30
   18328:	and	r0, r2, #3
   1832c:	str	r0, [sp, #8]
   18330:	bcc	18390 <__assert_fail@plt+0x6904>
   18334:	ldr	r0, [sp, #8]
   18338:	mov	r3, #0
   1833c:	mov	r8, #48	; 0x30
   18340:	sub	r4, r2, r0
   18344:	add	r7, r6, r3
   18348:	add	r0, r9, r3
   1834c:	subs	r4, r4, #4
   18350:	add	r3, r3, #64	; 0x40
   18354:	mov	r1, r7
   18358:	mov	ip, r0
   1835c:	add	lr, r7, #16
   18360:	add	r2, r0, #16
   18364:	add	r0, r0, #32
   18368:	vld1.8	{d16-d17}, [r1], r8
   1836c:	vst1.8	{d16-d17}, [ip], r8
   18370:	vld1.8	{d16-d17}, [lr]
   18374:	vst1.8	{d16-d17}, [r2]
   18378:	add	r2, r7, #32
   1837c:	vld1.8	{d16-d17}, [r2]
   18380:	vst1.8	{d16-d17}, [r0]
   18384:	vld1.8	{d16-d17}, [r1]
   18388:	vst1.8	{d16-d17}, [ip]
   1838c:	bne	18344 <__assert_fail@plt+0x68b8>
   18390:	ldr	r0, [sp, #8]
   18394:	cmp	r0, #0
   18398:	beq	183b8 <__assert_fail@plt+0x692c>
   1839c:	add	r2, r9, r3
   183a0:	add	r3, r6, r3
   183a4:	rsb	r4, r0, #0
   183a8:	vld1.8	{d16-d17}, [r3]!
   183ac:	adds	r4, r4, #1
   183b0:	vst1.8	{d16-d17}, [r2]!
   183b4:	bcc	183a8 <__assert_fail@plt+0x691c>
   183b8:	ldr	r1, [sp]
   183bc:	ldr	r0, [sp, #4]
   183c0:	ldr	r8, [sp, #24]
   183c4:	ldr	r7, [sp, #20]
   183c8:	add	r9, r9, r1
   183cc:	cmp	r1, r0
   183d0:	beq	183e8 <__assert_fail@plt+0x695c>
   183d4:	add	r6, r6, r1
   183d8:	ldrb	r0, [r6], #1
   183dc:	cmp	r7, r6
   183e0:	strb	r0, [r9], #1
   183e4:	bne	183d8 <__assert_fail@plt+0x694c>
   183e8:	ldr	r1, [sp, #28]
   183ec:	ldr	r2, [sp, #16]
   183f0:	mov	r0, #115	; 0x73
   183f4:	strh	r0, [r9]
   183f8:	mov	r0, #1
   183fc:	bl	11924 <__printf_chk@plt>
   18400:	ldr	r0, [sl, #16]
   18404:	mov	r7, #0
   18408:	and	r0, r0, #61440	; 0xf000
   1840c:	cmp	r0, #40960	; 0xa000
   18410:	bne	191e8 <__assert_fail@plt+0x775c>
   18414:	ldr	r0, [sp, #12]
   18418:	ldr	r6, [fp, #12]
   1841c:	mov	sl, r8
   18420:	ldr	r1, [r0]
   18424:	mov	r0, r6
   18428:	bl	19dfc <__assert_fail@plt+0x8370>
   1842c:	cmp	r0, #0
   18430:	beq	188ac <__assert_fail@plt+0x6e20>
   18434:	movw	r1, #12765	; 0x31dd
   18438:	mov	r8, r0
   1843c:	mov	r0, #1
   18440:	movt	r1, #2
   18444:	bl	11924 <__printf_chk@plt>
   18448:	mov	r0, #0
   1844c:	bl	1d3d0 <__assert_fail@plt+0xb944>
   18450:	mov	r1, r8
   18454:	bl	1e9fc <__assert_fail@plt+0xcf70>
   18458:	cmp	sl, #2
   1845c:	str	r0, [sp, #16]
   18460:	blt	18b04 <__assert_fail@plt+0x7078>
   18464:	movw	r6, #14257	; 0x37b1
   18468:	movw	r9, #14895	; 0x3a2f
   1846c:	mov	r4, r5
   18470:	movt	r6, #2
   18474:	movt	r9, #2
   18478:	ldrb	r7, [r4]
   1847c:	mov	r0, r6
   18480:	mov	r2, #8
   18484:	mov	r1, r7
   18488:	bl	11948 <memchr@plt>
   1848c:	cmp	r0, #0
   18490:	beq	18fa0 <__assert_fail@plt+0x7514>
   18494:	mov	r0, r9
   18498:	mov	r1, r7
   1849c:	mov	r2, #2
   184a0:	bl	11948 <memchr@plt>
   184a4:	ldr	r3, [sp, #20]
   184a8:	cmp	r0, #0
   184ac:	add	r4, r4, #1
   184b0:	strbne	r7, [r5], #1
   184b4:	cmp	r4, r3
   184b8:	bcc	18478 <__assert_fail@plt+0x69ec>
   184bc:	b	18fa4 <__assert_fail@plt+0x7518>
   184c0:	mov	r5, r7
   184c4:	cmp	r5, r8
   184c8:	bcs	18798 <__assert_fail@plt+0x6d0c>
   184cc:	ldr	r1, [sp, #28]
   184d0:	sub	r0, r4, r5
   184d4:	add	r9, r1, r0
   184d8:	cmp	r9, #16
   184dc:	bcc	188f4 <__assert_fail@plt+0x6e68>
   184e0:	cmp	r7, r8
   184e4:	addcc	r1, r7, r9
   184e8:	cmpcc	r5, r1
   184ec:	bcc	188f4 <__assert_fail@plt+0x6e68>
   184f0:	bic	r0, r9, #15
   184f4:	mov	r2, #1
   184f8:	mov	r3, #0
   184fc:	sub	r6, r0, #16
   18500:	str	r0, [sp, #16]
   18504:	add	r2, r2, r6, lsr #4
   18508:	cmp	r6, #48	; 0x30
   1850c:	and	r0, r2, #3
   18510:	str	r0, [sp, #24]
   18514:	bcc	18574 <__assert_fail@plt+0x6ae8>
   18518:	ldr	r0, [sp, #24]
   1851c:	mov	r3, #0
   18520:	mov	sl, #48	; 0x30
   18524:	sub	r6, r2, r0
   18528:	add	r1, r5, r3
   1852c:	add	r2, r7, r3
   18530:	subs	r6, r6, #4
   18534:	add	r3, r3, #64	; 0x40
   18538:	mov	r0, r1
   1853c:	mov	ip, r2
   18540:	add	lr, r1, #16
   18544:	add	r4, r2, #16
   18548:	add	r1, r1, #32
   1854c:	vld1.8	{d16-d17}, [r0], sl
   18550:	vst1.8	{d16-d17}, [ip], sl
   18554:	vld1.8	{d16-d17}, [lr]
   18558:	vst1.8	{d16-d17}, [r4]
   1855c:	vld1.8	{d16-d17}, [r1]
   18560:	add	r1, r2, #32
   18564:	vst1.8	{d16-d17}, [r1]
   18568:	vld1.8	{d16-d17}, [r0]
   1856c:	vst1.8	{d16-d17}, [ip]
   18570:	bne	18528 <__assert_fail@plt+0x6a9c>
   18574:	ldr	r0, [sp, #24]
   18578:	cmp	r0, #0
   1857c:	beq	1859c <__assert_fail@plt+0x6b10>
   18580:	add	r2, r7, r3
   18584:	add	r3, r5, r3
   18588:	rsb	r6, r0, #0
   1858c:	vld1.8	{d16-d17}, [r3]!
   18590:	adds	r6, r6, #1
   18594:	vst1.8	{d16-d17}, [r2]!
   18598:	bcc	1858c <__assert_fail@plt+0x6b00>
   1859c:	ldr	r0, [sp, #16]
   185a0:	ldr	r2, [sp, #20]
   185a4:	add	r7, r7, r0
   185a8:	cmp	r0, r9
   185ac:	bne	191f4 <__assert_fail@plt+0x7768>
   185b0:	ldr	r1, [sp, #28]
   185b4:	b	1890c <__assert_fail@plt+0x6e80>
   185b8:	mov	r5, r4
   185bc:	cmp	r5, r8
   185c0:	bcs	186a4 <__assert_fail@plt+0x6c18>
   185c4:	ldr	r1, [sp, #28]
   185c8:	sub	r0, r7, r5
   185cc:	add	r9, r1, r0
   185d0:	cmp	r9, #16
   185d4:	bcc	19204 <__assert_fail@plt+0x7778>
   185d8:	cmp	r4, r8
   185dc:	addcc	r1, r4, r9
   185e0:	cmpcc	r5, r1
   185e4:	bcc	19204 <__assert_fail@plt+0x7778>
   185e8:	bic	r0, r9, #15
   185ec:	mov	r2, #1
   185f0:	mov	r3, #0
   185f4:	sub	r6, r0, #16
   185f8:	str	r0, [sp, #16]
   185fc:	add	r2, r2, r6, lsr #4
   18600:	cmp	r6, #48	; 0x30
   18604:	and	r0, r2, #3
   18608:	str	r0, [sp, #24]
   1860c:	bcc	1866c <__assert_fail@plt+0x6be0>
   18610:	ldr	r0, [sp, #24]
   18614:	mov	r3, #0
   18618:	mov	sl, #48	; 0x30
   1861c:	sub	r6, r2, r0
   18620:	add	r1, r5, r3
   18624:	add	r2, r4, r3
   18628:	subs	r6, r6, #4
   1862c:	add	r3, r3, #64	; 0x40
   18630:	mov	r0, r1
   18634:	mov	ip, r2
   18638:	add	lr, r1, #16
   1863c:	add	r7, r2, #16
   18640:	add	r1, r1, #32
   18644:	vld1.8	{d16-d17}, [r0], sl
   18648:	vst1.8	{d16-d17}, [ip], sl
   1864c:	vld1.8	{d16-d17}, [lr]
   18650:	vst1.8	{d16-d17}, [r7]
   18654:	vld1.8	{d16-d17}, [r1]
   18658:	add	r1, r2, #32
   1865c:	vst1.8	{d16-d17}, [r1]
   18660:	vld1.8	{d16-d17}, [r0]
   18664:	vst1.8	{d16-d17}, [ip]
   18668:	bne	18620 <__assert_fail@plt+0x6b94>
   1866c:	ldr	r0, [sp, #24]
   18670:	cmp	r0, #0
   18674:	beq	18694 <__assert_fail@plt+0x6c08>
   18678:	add	r2, r4, r3
   1867c:	add	r3, r5, r3
   18680:	rsb	r6, r0, #0
   18684:	vld1.8	{d16-d17}, [r3]!
   18688:	adds	r6, r6, #1
   1868c:	vst1.8	{d16-d17}, [r2]!
   18690:	bcc	18684 <__assert_fail@plt+0x6bf8>
   18694:	ldr	r0, [sp, #16]
   18698:	add	r4, r4, r0
   1869c:	cmp	r0, r9
   186a0:	bne	19200 <__assert_fail@plt+0x7774>
   186a4:	ldr	r1, [sp, #28]
   186a8:	ldr	r2, [sp, #20]
   186ac:	movw	r0, #27756	; 0x6c6c
   186b0:	movt	r0, #117	; 0x75
   186b4:	b	191a0 <__assert_fail@plt+0x7714>
   186b8:	mov	r0, r8
   186bc:	add	r6, r9, r8
   186c0:	add	r8, r9, #1
   186c4:	str	r3, [sp, #20]
   186c8:	cmp	r0, #2
   186cc:	blt	18d54 <__assert_fail@plt+0x72c8>
   186d0:	movw	r4, #14257	; 0x37b1
   186d4:	movw	r9, #12778	; 0x31ea
   186d8:	mov	r5, r8
   186dc:	movt	r4, #2
   186e0:	movt	r9, #2
   186e4:	ldrb	r7, [r5]
   186e8:	mov	r0, r4
   186ec:	mov	r2, #8
   186f0:	mov	r1, r7
   186f4:	bl	11948 <memchr@plt>
   186f8:	cmp	r0, #0
   186fc:	beq	18d58 <__assert_fail@plt+0x72cc>
   18700:	mov	r0, r9
   18704:	mov	r1, r7
   18708:	mov	r2, #4
   1870c:	bl	11948 <memchr@plt>
   18710:	cmp	r0, #0
   18714:	add	r5, r5, #1
   18718:	strbne	r7, [r8], #1
   1871c:	cmp	r5, r6
   18720:	bcc	186e4 <__assert_fail@plt+0x6c58>
   18724:	b	18d58 <__assert_fail@plt+0x72cc>
   18728:	mov	r0, r8
   1872c:	add	r6, r9, r8
   18730:	add	r8, r9, #1
   18734:	str	r3, [sp, #20]
   18738:	cmp	r0, #2
   1873c:	blt	18e68 <__assert_fail@plt+0x73dc>
   18740:	movw	r4, #14257	; 0x37b1
   18744:	movw	r9, #12778	; 0x31ea
   18748:	mov	r5, r8
   1874c:	movt	r4, #2
   18750:	movt	r9, #2
   18754:	ldrb	r7, [r5]
   18758:	mov	r0, r4
   1875c:	mov	r2, #8
   18760:	mov	r1, r7
   18764:	bl	11948 <memchr@plt>
   18768:	cmp	r0, #0
   1876c:	beq	18e6c <__assert_fail@plt+0x73e0>
   18770:	mov	r0, r9
   18774:	mov	r1, r7
   18778:	mov	r2, #4
   1877c:	bl	11948 <memchr@plt>
   18780:	cmp	r0, #0
   18784:	add	r5, r5, #1
   18788:	strbne	r7, [r8], #1
   1878c:	cmp	r5, r6
   18790:	bcc	18754 <__assert_fail@plt+0x6cc8>
   18794:	b	18e6c <__assert_fail@plt+0x73e0>
   18798:	ldr	r1, [sp, #28]
   1879c:	ldr	r2, [sp, #20]
   187a0:	b	1890c <__assert_fail@plt+0x6e80>
   187a4:	mov	r5, r4
   187a8:	cmp	r5, sl
   187ac:	bcs	1891c <__assert_fail@plt+0x6e90>
   187b0:	ldr	r1, [sp, #28]
   187b4:	sub	r0, r6, r5
   187b8:	add	r8, r1, r0
   187bc:	cmp	r8, #16
   187c0:	bcc	18898 <__assert_fail@plt+0x6e0c>
   187c4:	cmp	r4, sl
   187c8:	addcc	r0, r4, r8
   187cc:	cmpcc	r5, r0
   187d0:	bcc	18898 <__assert_fail@plt+0x6e0c>
   187d4:	bic	r0, r8, #15
   187d8:	mov	r2, #1
   187dc:	mov	r3, #0
   187e0:	sub	r7, r0, #16
   187e4:	str	r0, [sp, #20]
   187e8:	add	r2, r2, r7, lsr #4
   187ec:	cmp	r7, #48	; 0x30
   187f0:	and	r0, r2, #3
   187f4:	str	r0, [sp, #24]
   187f8:	bcc	18858 <__assert_fail@plt+0x6dcc>
   187fc:	ldr	r0, [sp, #24]
   18800:	mov	r3, #0
   18804:	mov	r9, #48	; 0x30
   18808:	sub	r7, r2, r0
   1880c:	add	r1, r5, r3
   18810:	add	r2, r4, r3
   18814:	subs	r7, r7, #4
   18818:	add	r3, r3, #64	; 0x40
   1881c:	mov	lr, r1
   18820:	mov	r6, r2
   18824:	add	ip, r1, #16
   18828:	add	r0, r2, #16
   1882c:	vld1.8	{d16-d17}, [lr], r9
   18830:	vst1.8	{d16-d17}, [r6], r9
   18834:	vld1.8	{d16-d17}, [ip]
   18838:	vst1.8	{d16-d17}, [r0]
   1883c:	add	r0, r1, #32
   18840:	vld1.8	{d16-d17}, [r0]
   18844:	add	r0, r2, #32
   18848:	vst1.8	{d16-d17}, [r0]
   1884c:	vld1.8	{d16-d17}, [lr]
   18850:	vst1.8	{d16-d17}, [r6]
   18854:	bne	1880c <__assert_fail@plt+0x6d80>
   18858:	ldr	r0, [sp, #24]
   1885c:	cmp	r0, #0
   18860:	beq	18880 <__assert_fail@plt+0x6df4>
   18864:	add	r2, r4, r3
   18868:	add	r3, r5, r3
   1886c:	rsb	r7, r0, #0
   18870:	vld1.8	{d16-d17}, [r3]!
   18874:	adds	r7, r7, #1
   18878:	vst1.8	{d16-d17}, [r2]!
   1887c:	bcc	18870 <__assert_fail@plt+0x6de4>
   18880:	ldr	r0, [sp, #20]
   18884:	ldr	r1, [sp, #28]
   18888:	add	r4, r4, r0
   1888c:	cmp	r0, r8
   18890:	beq	18920 <__assert_fail@plt+0x6e94>
   18894:	add	r5, r5, r0
   18898:	ldrb	r0, [r5], #1
   1889c:	cmp	sl, r5
   188a0:	strb	r0, [r4], #1
   188a4:	bne	18898 <__assert_fail@plt+0x6e0c>
   188a8:	b	18920 <__assert_fail@plt+0x6e94>
   188ac:	bl	118e8 <__errno_location@plt>
   188b0:	movw	r1, #12736	; 0x31c0
   188b4:	ldr	r4, [r0]
   188b8:	mov	r0, #0
   188bc:	mov	r2, #5
   188c0:	movt	r1, #2
   188c4:	bl	11720 <dcgettext@plt>
   188c8:	mov	r5, r0
   188cc:	mov	r0, #4
   188d0:	mov	r1, r6
   188d4:	bl	1e9fc <__assert_fail@plt+0xcf70>
   188d8:	mov	r3, r0
   188dc:	mov	r0, #0
   188e0:	mov	r1, r4
   188e4:	mov	r2, r5
   188e8:	bl	117d4 <error@plt>
   188ec:	mov	r7, #1
   188f0:	b	191e8 <__assert_fail@plt+0x775c>
   188f4:	ldr	r1, [sp, #28]
   188f8:	ldr	r2, [sp, #20]
   188fc:	ldrb	r0, [r5], #1
   18900:	cmp	r8, r5
   18904:	strb	r0, [r7], #1
   18908:	bne	188fc <__assert_fail@plt+0x6e70>
   1890c:	movw	r0, #27756	; 0x6c6c
   18910:	movt	r0, #117	; 0x75
   18914:	str	r0, [r7]
   18918:	b	191a4 <__assert_fail@plt+0x7718>
   1891c:	ldr	r1, [sp, #28]
   18920:	movw	r2, #14895	; 0x3a2f
   18924:	mov	r0, #115	; 0x73
   18928:	strh	r0, [r4]
   1892c:	movt	r2, #2
   18930:	b	191dc <__assert_fail@plt+0x7750>
   18934:	mov	r7, #1
   18938:	mov	r4, #0
   1893c:	mov	r5, #0
   18940:	movw	r1, #12798	; 0x31fe
   18944:	cmp	r5, #0
   18948:	mov	r0, r9
   1894c:	add	r9, r9, r8
   18950:	str	r5, [sp, #20]
   18954:	str	r8, [sp, #24]
   18958:	movt	r1, #2
   1895c:	movne	r1, r5
   18960:	cmp	r4, #0
   18964:	add	sl, r0, #1
   18968:	str	r0, [sp, #28]
   1896c:	movne	r1, r4
   18970:	cmp	r8, #2
   18974:	str	r1, [sp, #16]
   18978:	blt	189d4 <__assert_fail@plt+0x6f48>
   1897c:	movw	r4, #14257	; 0x37b1
   18980:	movw	r6, #14895	; 0x3a2f
   18984:	mov	r5, sl
   18988:	movt	r4, #2
   1898c:	movt	r6, #2
   18990:	ldrb	r8, [r5]
   18994:	mov	r0, r4
   18998:	mov	r2, #8
   1899c:	mov	r1, r8
   189a0:	bl	11948 <memchr@plt>
   189a4:	cmp	r0, #0
   189a8:	beq	189d8 <__assert_fail@plt+0x6f4c>
   189ac:	mov	r0, r6
   189b0:	mov	r1, r8
   189b4:	mov	r2, #2
   189b8:	bl	11948 <memchr@plt>
   189bc:	cmp	r0, #0
   189c0:	add	r5, r5, #1
   189c4:	strbne	r8, [sl], #1
   189c8:	cmp	r5, r9
   189cc:	bcc	18990 <__assert_fail@plt+0x6f04>
   189d0:	b	189d8 <__assert_fail@plt+0x6f4c>
   189d4:	mov	r5, sl
   189d8:	cmp	r5, r9
   189dc:	bcs	18ae0 <__assert_fail@plt+0x7054>
   189e0:	ldr	r0, [sp, #24]
   189e4:	ldr	r1, [sp, #28]
   189e8:	sub	r0, r0, r5
   189ec:	add	r0, r1, r0
   189f0:	cmp	r0, #16
   189f4:	bcc	18ad0 <__assert_fail@plt+0x7044>
   189f8:	cmp	sl, r9
   189fc:	addcc	r1, sl, r0
   18a00:	cmpcc	r5, r1
   18a04:	bcc	18ad0 <__assert_fail@plt+0x7044>
   18a08:	str	r0, [sp, #12]
   18a0c:	bic	r0, r0, #15
   18a10:	mov	r2, #1
   18a14:	mov	r3, #0
   18a18:	sub	r4, r0, #16
   18a1c:	str	r0, [sp, #8]
   18a20:	add	r2, r2, r4, lsr #4
   18a24:	cmp	r4, #48	; 0x30
   18a28:	and	r0, r2, #3
   18a2c:	str	r0, [sp, #24]
   18a30:	bcc	18a90 <__assert_fail@plt+0x7004>
   18a34:	ldr	r0, [sp, #24]
   18a38:	mov	r3, #0
   18a3c:	mov	r8, #48	; 0x30
   18a40:	sub	r4, r2, r0
   18a44:	add	r1, r5, r3
   18a48:	add	r2, sl, r3
   18a4c:	subs	r4, r4, #4
   18a50:	add	r3, r3, #64	; 0x40
   18a54:	mov	r0, r1
   18a58:	mov	ip, r2
   18a5c:	add	lr, r1, #16
   18a60:	add	r6, r2, #16
   18a64:	add	r1, r1, #32
   18a68:	vld1.8	{d16-d17}, [r0], r8
   18a6c:	vst1.8	{d16-d17}, [ip], r8
   18a70:	vld1.8	{d16-d17}, [lr]
   18a74:	vst1.8	{d16-d17}, [r6]
   18a78:	vld1.8	{d16-d17}, [r1]
   18a7c:	add	r1, r2, #32
   18a80:	vst1.8	{d16-d17}, [r1]
   18a84:	vld1.8	{d16-d17}, [r0]
   18a88:	vst1.8	{d16-d17}, [ip]
   18a8c:	bne	18a44 <__assert_fail@plt+0x6fb8>
   18a90:	ldr	r0, [sp, #24]
   18a94:	cmp	r0, #0
   18a98:	beq	18ab8 <__assert_fail@plt+0x702c>
   18a9c:	add	r2, sl, r3
   18aa0:	add	r3, r5, r3
   18aa4:	rsb	r4, r0, #0
   18aa8:	vld1.8	{d16-d17}, [r3]!
   18aac:	adds	r4, r4, #1
   18ab0:	vst1.8	{d16-d17}, [r2]!
   18ab4:	bcc	18aa8 <__assert_fail@plt+0x701c>
   18ab8:	ldr	r1, [sp, #8]
   18abc:	ldr	r0, [sp, #12]
   18ac0:	add	sl, sl, r1
   18ac4:	cmp	r1, r0
   18ac8:	beq	18ae0 <__assert_fail@plt+0x7054>
   18acc:	add	r5, r5, r1
   18ad0:	ldrb	r0, [r5], #1
   18ad4:	cmp	r9, r5
   18ad8:	strb	r0, [sl], #1
   18adc:	bne	18ad0 <__assert_fail@plt+0x7044>
   18ae0:	ldr	r1, [sp, #28]
   18ae4:	ldr	r2, [sp, #16]
   18ae8:	mov	r0, #115	; 0x73
   18aec:	strh	r0, [sl]
   18af0:	mov	r0, #1
   18af4:	bl	11924 <__printf_chk@plt>
   18af8:	ldr	r0, [sp, #20]
   18afc:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   18b00:	b	191e8 <__assert_fail@plt+0x775c>
   18b04:	ldr	r3, [sp, #20]
   18b08:	mov	r4, r5
   18b0c:	cmp	r4, r3
   18b10:	bcc	18fac <__assert_fail@plt+0x7520>
   18b14:	b	1908c <__assert_fail@plt+0x7600>
   18b18:	mov	r5, r7
   18b1c:	cmp	r5, r9
   18b20:	bcs	18d34 <__assert_fail@plt+0x72a8>
   18b24:	ldr	r0, [sp, #24]
   18b28:	ldr	r1, [sp, #28]
   18b2c:	sub	r0, r0, r5
   18b30:	add	r0, r1, r0
   18b34:	cmp	r0, #16
   18b38:	bcc	18c14 <__assert_fail@plt+0x7188>
   18b3c:	cmp	r7, r9
   18b40:	addcc	r1, r7, r0
   18b44:	cmpcc	r5, r1
   18b48:	bcc	18c14 <__assert_fail@plt+0x7188>
   18b4c:	str	r0, [sp, #20]
   18b50:	bic	r0, r0, #15
   18b54:	mov	r2, #1
   18b58:	mov	r3, #0
   18b5c:	sub	r4, r0, #16
   18b60:	str	r0, [sp, #16]
   18b64:	add	r6, r2, r4, lsr #4
   18b68:	cmp	r4, #48	; 0x30
   18b6c:	and	r0, r6, #3
   18b70:	str	r0, [sp, #24]
   18b74:	bcc	18bd4 <__assert_fail@plt+0x7148>
   18b78:	ldr	r0, [sp, #24]
   18b7c:	mov	r3, #0
   18b80:	mov	sl, #48	; 0x30
   18b84:	sub	r6, r6, r0
   18b88:	add	r2, r5, r3
   18b8c:	add	r0, r7, r3
   18b90:	subs	r6, r6, #4
   18b94:	add	r3, r3, #64	; 0x40
   18b98:	mov	r1, r2
   18b9c:	mov	ip, r0
   18ba0:	add	lr, r2, #16
   18ba4:	add	r4, r0, #16
   18ba8:	add	r2, r2, #32
   18bac:	add	r0, r0, #32
   18bb0:	vld1.8	{d16-d17}, [r1], sl
   18bb4:	vst1.8	{d16-d17}, [ip], sl
   18bb8:	vld1.8	{d16-d17}, [lr]
   18bbc:	vst1.8	{d16-d17}, [r4]
   18bc0:	vld1.8	{d16-d17}, [r2]
   18bc4:	vst1.8	{d16-d17}, [r0]
   18bc8:	vld1.8	{d16-d17}, [r1]
   18bcc:	vst1.8	{d16-d17}, [ip]
   18bd0:	bne	18b88 <__assert_fail@plt+0x70fc>
   18bd4:	ldr	r0, [sp, #24]
   18bd8:	cmp	r0, #0
   18bdc:	beq	18bfc <__assert_fail@plt+0x7170>
   18be0:	add	r6, r7, r3
   18be4:	add	r3, r5, r3
   18be8:	rsb	r2, r0, #0
   18bec:	vld1.8	{d16-d17}, [r3]!
   18bf0:	adds	r2, r2, #1
   18bf4:	vst1.8	{d16-d17}, [r6]!
   18bf8:	bcc	18bec <__assert_fail@plt+0x7160>
   18bfc:	ldr	r1, [sp, #16]
   18c00:	ldr	r0, [sp, #20]
   18c04:	add	r7, r7, r1
   18c08:	cmp	r1, r0
   18c0c:	beq	18d34 <__assert_fail@plt+0x72a8>
   18c10:	add	r5, r5, r1
   18c14:	ldrb	r0, [r5], #1
   18c18:	cmp	r9, r5
   18c1c:	strb	r0, [r7], #1
   18c20:	bne	18c14 <__assert_fail@plt+0x7188>
   18c24:	b	18d34 <__assert_fail@plt+0x72a8>
   18c28:	mov	r5, r7
   18c2c:	cmp	r5, r9
   18c30:	bcs	18d34 <__assert_fail@plt+0x72a8>
   18c34:	ldr	r0, [sp, #24]
   18c38:	ldr	r1, [sp, #28]
   18c3c:	sub	r0, r0, r5
   18c40:	add	r0, r1, r0
   18c44:	cmp	r0, #16
   18c48:	bcc	18d24 <__assert_fail@plt+0x7298>
   18c4c:	cmp	r7, r9
   18c50:	addcc	r1, r7, r0
   18c54:	cmpcc	r5, r1
   18c58:	bcc	18d24 <__assert_fail@plt+0x7298>
   18c5c:	str	r0, [sp, #20]
   18c60:	bic	r0, r0, #15
   18c64:	mov	r2, #1
   18c68:	mov	r3, #0
   18c6c:	sub	r4, r0, #16
   18c70:	str	r0, [sp, #16]
   18c74:	add	r6, r2, r4, lsr #4
   18c78:	cmp	r4, #48	; 0x30
   18c7c:	and	r0, r6, #3
   18c80:	str	r0, [sp, #24]
   18c84:	bcc	18ce4 <__assert_fail@plt+0x7258>
   18c88:	ldr	r0, [sp, #24]
   18c8c:	mov	r3, #0
   18c90:	mov	sl, #48	; 0x30
   18c94:	sub	r6, r6, r0
   18c98:	add	r2, r5, r3
   18c9c:	add	r0, r7, r3
   18ca0:	subs	r6, r6, #4
   18ca4:	add	r3, r3, #64	; 0x40
   18ca8:	mov	r1, r2
   18cac:	mov	ip, r0
   18cb0:	add	lr, r2, #16
   18cb4:	add	r4, r0, #16
   18cb8:	add	r2, r2, #32
   18cbc:	add	r0, r0, #32
   18cc0:	vld1.8	{d16-d17}, [r1], sl
   18cc4:	vst1.8	{d16-d17}, [ip], sl
   18cc8:	vld1.8	{d16-d17}, [lr]
   18ccc:	vst1.8	{d16-d17}, [r4]
   18cd0:	vld1.8	{d16-d17}, [r2]
   18cd4:	vst1.8	{d16-d17}, [r0]
   18cd8:	vld1.8	{d16-d17}, [r1]
   18cdc:	vst1.8	{d16-d17}, [ip]
   18ce0:	bne	18c98 <__assert_fail@plt+0x720c>
   18ce4:	ldr	r0, [sp, #24]
   18ce8:	cmp	r0, #0
   18cec:	beq	18d0c <__assert_fail@plt+0x7280>
   18cf0:	add	r6, r7, r3
   18cf4:	add	r3, r5, r3
   18cf8:	rsb	r2, r0, #0
   18cfc:	vld1.8	{d16-d17}, [r3]!
   18d00:	adds	r2, r2, #1
   18d04:	vst1.8	{d16-d17}, [r6]!
   18d08:	bcc	18cfc <__assert_fail@plt+0x7270>
   18d0c:	ldr	r1, [sp, #16]
   18d10:	ldr	r0, [sp, #20]
   18d14:	add	r7, r7, r1
   18d18:	cmp	r1, r0
   18d1c:	beq	18d34 <__assert_fail@plt+0x72a8>
   18d20:	add	r5, r5, r1
   18d24:	ldrb	r0, [r5], #1
   18d28:	cmp	r9, r5
   18d2c:	strb	r0, [r7], #1
   18d30:	bne	18d24 <__assert_fail@plt+0x7298>
   18d34:	movw	r0, #27756	; 0x6c6c
   18d38:	mov	r2, r8
   18d3c:	movt	r0, #117	; 0x75
   18d40:	str	r0, [r7]
   18d44:	mov	r7, #0
   18d48:	mov	r0, #1
   18d4c:	ldr	r1, [sp, #28]
   18d50:	b	191ac <__assert_fail@plt+0x7720>
   18d54:	mov	r5, r8
   18d58:	cmp	r5, r6
   18d5c:	bcs	18f7c <__assert_fail@plt+0x74f0>
   18d60:	ldr	r0, [sp, #24]
   18d64:	ldr	r1, [sp, #28]
   18d68:	sub	r0, r0, r5
   18d6c:	add	r2, r1, r0
   18d70:	cmp	r2, #16
   18d74:	bcc	18e54 <__assert_fail@plt+0x73c8>
   18d78:	cmp	r8, r6
   18d7c:	addcc	r0, r8, r2
   18d80:	cmpcc	r5, r0
   18d84:	bcc	18e54 <__assert_fail@plt+0x73c8>
   18d88:	bic	r0, r2, #15
   18d8c:	str	r2, [sp, #16]
   18d90:	mov	r2, #1
   18d94:	mov	r3, #0
   18d98:	sub	r4, r0, #16
   18d9c:	str	r0, [sp, #12]
   18da0:	add	r7, r2, r4, lsr #4
   18da4:	cmp	r4, #48	; 0x30
   18da8:	and	r0, r7, #3
   18dac:	str	r0, [sp, #24]
   18db0:	bcc	18e10 <__assert_fail@plt+0x7384>
   18db4:	ldr	r0, [sp, #24]
   18db8:	mov	r3, #0
   18dbc:	mov	r9, #48	; 0x30
   18dc0:	sub	r7, r7, r0
   18dc4:	add	r2, r5, r3
   18dc8:	add	r0, r8, r3
   18dcc:	subs	r7, r7, #4
   18dd0:	add	r3, r3, #64	; 0x40
   18dd4:	mov	r1, r2
   18dd8:	mov	ip, r0
   18ddc:	add	lr, r2, #16
   18de0:	add	r4, r0, #16
   18de4:	add	r2, r2, #32
   18de8:	add	r0, r0, #32
   18dec:	vld1.8	{d16-d17}, [r1], r9
   18df0:	vst1.8	{d16-d17}, [ip], r9
   18df4:	vld1.8	{d16-d17}, [lr]
   18df8:	vst1.8	{d16-d17}, [r4]
   18dfc:	vld1.8	{d16-d17}, [r2]
   18e00:	vst1.8	{d16-d17}, [r0]
   18e04:	vld1.8	{d16-d17}, [r1]
   18e08:	vst1.8	{d16-d17}, [ip]
   18e0c:	bne	18dc4 <__assert_fail@plt+0x7338>
   18e10:	ldr	r0, [sp, #24]
   18e14:	cmp	r0, #0
   18e18:	beq	18e38 <__assert_fail@plt+0x73ac>
   18e1c:	add	r7, r8, r3
   18e20:	add	r3, r5, r3
   18e24:	rsb	r2, r0, #0
   18e28:	vld1.8	{d16-d17}, [r3]!
   18e2c:	adds	r2, r2, #1
   18e30:	vst1.8	{d16-d17}, [r7]!
   18e34:	bcc	18e28 <__assert_fail@plt+0x739c>
   18e38:	ldr	r2, [sp, #12]
   18e3c:	ldr	r0, [sp, #16]
   18e40:	ldr	r1, [sp, #28]
   18e44:	add	r8, r8, r2
   18e48:	cmp	r2, r0
   18e4c:	beq	18f80 <__assert_fail@plt+0x74f4>
   18e50:	add	r5, r5, r2
   18e54:	ldrb	r0, [r5], #1
   18e58:	cmp	r6, r5
   18e5c:	strb	r0, [r8], #1
   18e60:	bne	18e54 <__assert_fail@plt+0x73c8>
   18e64:	b	18f80 <__assert_fail@plt+0x74f4>
   18e68:	mov	r5, r8
   18e6c:	cmp	r5, r6
   18e70:	bcs	18f7c <__assert_fail@plt+0x74f0>
   18e74:	ldr	r0, [sp, #24]
   18e78:	ldr	r1, [sp, #28]
   18e7c:	sub	r0, r0, r5
   18e80:	add	r2, r1, r0
   18e84:	cmp	r2, #16
   18e88:	bcc	18f68 <__assert_fail@plt+0x74dc>
   18e8c:	cmp	r8, r6
   18e90:	addcc	r0, r8, r2
   18e94:	cmpcc	r5, r0
   18e98:	bcc	18f68 <__assert_fail@plt+0x74dc>
   18e9c:	bic	r0, r2, #15
   18ea0:	str	r2, [sp, #16]
   18ea4:	mov	r2, #1
   18ea8:	mov	r3, #0
   18eac:	sub	r4, r0, #16
   18eb0:	str	r0, [sp, #12]
   18eb4:	add	r7, r2, r4, lsr #4
   18eb8:	cmp	r4, #48	; 0x30
   18ebc:	and	r0, r7, #3
   18ec0:	str	r0, [sp, #24]
   18ec4:	bcc	18f24 <__assert_fail@plt+0x7498>
   18ec8:	ldr	r0, [sp, #24]
   18ecc:	mov	r3, #0
   18ed0:	mov	r9, #48	; 0x30
   18ed4:	sub	r7, r7, r0
   18ed8:	add	r2, r5, r3
   18edc:	add	r0, r8, r3
   18ee0:	subs	r7, r7, #4
   18ee4:	add	r3, r3, #64	; 0x40
   18ee8:	mov	r1, r2
   18eec:	mov	ip, r0
   18ef0:	add	lr, r2, #16
   18ef4:	add	r4, r0, #16
   18ef8:	add	r2, r2, #32
   18efc:	add	r0, r0, #32
   18f00:	vld1.8	{d16-d17}, [r1], r9
   18f04:	vst1.8	{d16-d17}, [ip], r9
   18f08:	vld1.8	{d16-d17}, [lr]
   18f0c:	vst1.8	{d16-d17}, [r4]
   18f10:	vld1.8	{d16-d17}, [r2]
   18f14:	vst1.8	{d16-d17}, [r0]
   18f18:	vld1.8	{d16-d17}, [r1]
   18f1c:	vst1.8	{d16-d17}, [ip]
   18f20:	bne	18ed8 <__assert_fail@plt+0x744c>
   18f24:	ldr	r0, [sp, #24]
   18f28:	cmp	r0, #0
   18f2c:	beq	18f4c <__assert_fail@plt+0x74c0>
   18f30:	add	r7, r8, r3
   18f34:	add	r3, r5, r3
   18f38:	rsb	r2, r0, #0
   18f3c:	vld1.8	{d16-d17}, [r3]!
   18f40:	adds	r2, r2, #1
   18f44:	vst1.8	{d16-d17}, [r7]!
   18f48:	bcc	18f3c <__assert_fail@plt+0x74b0>
   18f4c:	ldr	r2, [sp, #12]
   18f50:	ldr	r0, [sp, #16]
   18f54:	ldr	r1, [sp, #28]
   18f58:	add	r8, r8, r2
   18f5c:	cmp	r2, r0
   18f60:	beq	18f80 <__assert_fail@plt+0x74f4>
   18f64:	add	r5, r5, r2
   18f68:	ldrb	r0, [r5], #1
   18f6c:	cmp	r6, r5
   18f70:	strb	r0, [r8], #1
   18f74:	bne	18f68 <__assert_fail@plt+0x74dc>
   18f78:	b	18f80 <__assert_fail@plt+0x74f4>
   18f7c:	ldr	r1, [sp, #28]
   18f80:	movw	r0, #27756	; 0x6c6c
   18f84:	mov	r2, sl
   18f88:	movt	r0, #117	; 0x75
   18f8c:	str	r0, [r8]
   18f90:	mov	r0, #1
   18f94:	ldr	r3, [sp, #20]
   18f98:	bl	11924 <__printf_chk@plt>
   18f9c:	b	191e4 <__assert_fail@plt+0x7758>
   18fa0:	ldr	r3, [sp, #20]
   18fa4:	cmp	r4, r3
   18fa8:	bcs	1908c <__assert_fail@plt+0x7600>
   18fac:	ldr	r1, [sp, #28]
   18fb0:	sub	r0, sl, r4
   18fb4:	add	r9, r1, r0
   18fb8:	cmp	r9, #16
   18fbc:	bcc	19098 <__assert_fail@plt+0x760c>
   18fc0:	cmp	r5, r3
   18fc4:	addcc	r1, r5, r9
   18fc8:	cmpcc	r4, r1
   18fcc:	bcc	19098 <__assert_fail@plt+0x760c>
   18fd0:	bic	r0, r9, #15
   18fd4:	mov	r2, #1
   18fd8:	mov	r3, #0
   18fdc:	sub	r6, r0, #16
   18fe0:	str	r0, [sp, #12]
   18fe4:	add	r7, r2, r6, lsr #4
   18fe8:	cmp	r6, #48	; 0x30
   18fec:	and	r0, r7, #3
   18ff0:	str	r0, [sp, #24]
   18ff4:	bcc	19054 <__assert_fail@plt+0x75c8>
   18ff8:	ldr	r0, [sp, #24]
   18ffc:	mov	r3, #0
   19000:	mov	sl, #48	; 0x30
   19004:	sub	r7, r7, r0
   19008:	add	r2, r4, r3
   1900c:	add	r0, r5, r3
   19010:	subs	r7, r7, #4
   19014:	add	r3, r3, #64	; 0x40
   19018:	mov	lr, r2
   1901c:	mov	r6, r0
   19020:	add	ip, r2, #16
   19024:	add	r1, r0, #16
   19028:	add	r0, r0, #32
   1902c:	vld1.8	{d16-d17}, [lr], sl
   19030:	vst1.8	{d16-d17}, [r6], sl
   19034:	vld1.8	{d16-d17}, [ip]
   19038:	vst1.8	{d16-d17}, [r1]
   1903c:	add	r1, r2, #32
   19040:	vld1.8	{d16-d17}, [r1]
   19044:	vst1.8	{d16-d17}, [r0]
   19048:	vld1.8	{d16-d17}, [lr]
   1904c:	vst1.8	{d16-d17}, [r6]
   19050:	bne	19008 <__assert_fail@plt+0x757c>
   19054:	ldr	r0, [sp, #24]
   19058:	cmp	r0, #0
   1905c:	beq	1907c <__assert_fail@plt+0x75f0>
   19060:	add	r7, r5, r3
   19064:	add	r3, r4, r3
   19068:	rsb	r2, r0, #0
   1906c:	vld1.8	{d16-d17}, [r3]!
   19070:	adds	r2, r2, #1
   19074:	vst1.8	{d16-d17}, [r7]!
   19078:	bcc	1906c <__assert_fail@plt+0x75e0>
   1907c:	ldr	r0, [sp, #12]
   19080:	add	r5, r5, r0
   19084:	cmp	r0, r9
   19088:	bne	19220 <__assert_fail@plt+0x7794>
   1908c:	ldr	r1, [sp, #28]
   19090:	ldr	r2, [sp, #16]
   19094:	b	190b0 <__assert_fail@plt+0x7624>
   19098:	ldr	r1, [sp, #28]
   1909c:	ldr	r2, [sp, #16]
   190a0:	ldrb	r0, [r4], #1
   190a4:	cmp	r3, r4
   190a8:	strb	r0, [r5], #1
   190ac:	bne	190a0 <__assert_fail@plt+0x7614>
   190b0:	mov	r0, #115	; 0x73
   190b4:	strh	r0, [r5]
   190b8:	mov	r0, #1
   190bc:	bl	11924 <__printf_chk@plt>
   190c0:	mov	r0, r8
   190c4:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   190c8:	b	191e4 <__assert_fail@plt+0x7758>
   190cc:	add	r5, r5, r0
   190d0:	ldr	r1, [sp, #28]
   190d4:	ldr	r2, [sp, #20]
   190d8:	ldrb	r0, [r5], #1
   190dc:	cmp	r8, r5
   190e0:	strb	r0, [r7], #1
   190e4:	bne	190d8 <__assert_fail@plt+0x764c>
   190e8:	mov	r0, #115	; 0x73
   190ec:	strh	r0, [r7]
   190f0:	b	191dc <__assert_fail@plt+0x7750>
   190f4:	add	r5, r5, r0
   190f8:	ldr	r3, [sp, #20]
   190fc:	ldr	r2, [sp, #16]
   19100:	ldrb	r0, [r5], #1
   19104:	cmp	r6, r5
   19108:	strb	r0, [r9], #1
   1910c:	bne	19100 <__assert_fail@plt+0x7674>
   19110:	movw	r0, #27756	; 0x6c6c
   19114:	movt	r0, #120	; 0x78
   19118:	b	19168 <__assert_fail@plt+0x76dc>
   1911c:	add	r5, r5, r0
   19120:	ldr	r3, [sp, #20]
   19124:	ldr	r2, [sp, #16]
   19128:	ldrb	r0, [r5], #1
   1912c:	cmp	r6, r5
   19130:	strb	r0, [r9], #1
   19134:	bne	19128 <__assert_fail@plt+0x769c>
   19138:	movw	r0, #27756	; 0x6c6c
   1913c:	movt	r0, #117	; 0x75
   19140:	b	19168 <__assert_fail@plt+0x76dc>
   19144:	add	r6, r6, r0
   19148:	ldr	r3, [sp, #20]
   1914c:	ldr	r2, [sp, #16]
   19150:	ldrb	r0, [r6], #1
   19154:	cmp	r4, r6
   19158:	strb	r0, [r9], #1
   1915c:	bne	19150 <__assert_fail@plt+0x76c4>
   19160:	movw	r0, #27756	; 0x6c6c
   19164:	movt	r0, #100	; 0x64
   19168:	str	r0, [r9]
   1916c:	mov	r0, #1
   19170:	ldr	r1, [sp, #28]
   19174:	bl	11924 <__printf_chk@plt>
   19178:	b	191e4 <__assert_fail@plt+0x7758>
   1917c:	add	r5, r5, r0
   19180:	ldr	r1, [sp, #28]
   19184:	ldr	r2, [sp, #20]
   19188:	ldrb	r0, [r5], #1
   1918c:	cmp	r8, r5
   19190:	strb	r0, [r4], #1
   19194:	bne	19188 <__assert_fail@plt+0x76fc>
   19198:	movw	r0, #27756	; 0x6c6c
   1919c:	movt	r0, #120	; 0x78
   191a0:	str	r0, [r4]
   191a4:	mov	r7, #0
   191a8:	mov	r0, #1
   191ac:	mov	r3, #0
   191b0:	bl	11924 <__printf_chk@plt>
   191b4:	b	191e8 <__assert_fail@plt+0x775c>
   191b8:	add	r5, r5, r0
   191bc:	ldr	r1, [sp, #28]
   191c0:	ldr	r2, [sp, #20]
   191c4:	ldrb	r0, [r5], #1
   191c8:	cmp	r8, r5
   191cc:	strb	r0, [r4], #1
   191d0:	bne	191c4 <__assert_fail@plt+0x7738>
   191d4:	mov	r0, #115	; 0x73
   191d8:	strh	r0, [r4]
   191dc:	mov	r0, #1
   191e0:	bl	11924 <__printf_chk@plt>
   191e4:	mov	r7, #0
   191e8:	mov	r0, r7
   191ec:	sub	sp, fp, #28
   191f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   191f4:	ldr	r1, [sp, #28]
   191f8:	add	r5, r5, r0
   191fc:	b	188fc <__assert_fail@plt+0x6e70>
   19200:	add	r5, r5, r0
   19204:	ldr	r1, [sp, #28]
   19208:	ldr	r2, [sp, #20]
   1920c:	ldrb	r0, [r5], #1
   19210:	cmp	r8, r5
   19214:	strb	r0, [r4], #1
   19218:	bne	1920c <__assert_fail@plt+0x7780>
   1921c:	b	186ac <__assert_fail@plt+0x6c20>
   19220:	ldr	r1, [sp, #28]
   19224:	ldr	r3, [sp, #20]
   19228:	add	r4, r4, r0
   1922c:	b	1909c <__assert_fail@plt+0x7610>
   19230:	mov	r1, #63	; 0x3f
   19234:	bl	11990 <__overflow@plt>
   19238:	b	191e4 <__assert_fail@plt+0x7758>
   1923c:	push	{r4, r5, fp, lr}
   19240:	add	fp, sp, #8
   19244:	sub	sp, sp, #88	; 0x58
   19248:	movw	r5, #16972	; 0x424c
   1924c:	str	r1, [fp, #-12]
   19250:	str	r0, [fp, #-16]
   19254:	mov	r4, r1
   19258:	movt	r5, #3
   1925c:	ldr	r0, [r5]
   19260:	cmp	r0, #0
   19264:	bne	1927c <__assert_fail@plt+0x77f0>
   19268:	movw	r0, #12878	; 0x324e
   1926c:	movt	r0, #2
   19270:	bl	117f8 <getenv@plt>
   19274:	bl	1f26c <__assert_fail@plt+0xd7e0>
   19278:	str	r0, [r5]
   1927c:	sub	r1, fp, #16
   19280:	add	r2, sp, #36	; 0x24
   19284:	bl	1f320 <__assert_fail@plt+0xd894>
   19288:	cmp	r0, #0
   1928c:	beq	192bc <__assert_fail@plt+0x7830>
   19290:	ldr	r0, [r5]
   19294:	movw	r2, #12881	; 0x3251
   19298:	add	r3, sp, #36	; 0x24
   1929c:	mov	r1, #61	; 0x3d
   192a0:	movt	r2, #2
   192a4:	stm	sp, {r0, r4}
   192a8:	movw	r0, #16909	; 0x420d
   192ac:	movt	r0, #3
   192b0:	bl	1b698 <__assert_fail@plt+0x9c0c>
   192b4:	sub	sp, fp, #8
   192b8:	pop	{r4, r5, fp, pc}
   192bc:	ldr	r0, [fp, #-16]
   192c0:	add	r2, sp, #15
   192c4:	asr	r1, r0, #31
   192c8:	bl	1a918 <__assert_fail@plt+0x8e8c>
   192cc:	movw	r3, #12905	; 0x3269
   192d0:	stm	sp, {r0, r4}
   192d4:	movw	r0, #16909	; 0x420d
   192d8:	mov	r1, #1
   192dc:	mov	r2, #61	; 0x3d
   192e0:	movt	r0, #3
   192e4:	movt	r3, #2
   192e8:	bl	118f4 <__sprintf_chk@plt>
   192ec:	sub	sp, fp, #8
   192f0:	pop	{r4, r5, fp, pc}
   192f4:	nop	{0}
   192f8:	nop	{0}
   192fc:	nop	{0}
   19300:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19304:	add	fp, sp, #28
   19308:	sub	sp, sp, #52	; 0x34
   1930c:	mov	r5, r1
   19310:	mov	sl, r2
   19314:	mov	r1, #46	; 0x2e
   19318:	mov	r8, r3
   1931c:	mov	r9, r0
   19320:	mov	r2, r5
   19324:	bl	11948 <memchr@plt>
   19328:	cmp	r0, #0
   1932c:	beq	19420 <__assert_fail@plt+0x7994>
   19330:	mov	r7, r0
   19334:	mov	r4, #0
   19338:	sub	r0, r0, r9
   1933c:	strb	r4, [r9, r5]
   19340:	str	r0, [fp, #-32]	; 0xffffffe0
   19344:	mov	r0, r7
   19348:	mov	r5, #9
   1934c:	ldrb	r1, [r0, #1]!
   19350:	sub	r1, r1, #48	; 0x30
   19354:	cmp	r1, #9
   19358:	bhi	19378 <__assert_fail@plt+0x78ec>
   1935c:	mov	r1, #0
   19360:	mov	r2, #10
   19364:	mov	r6, #0
   19368:	bl	116c0 <strtol@plt>
   1936c:	mov	r5, r0
   19370:	cmp	r0, #0
   19374:	beq	19428 <__assert_fail@plt+0x799c>
   19378:	ldrb	r0, [r7, #-1]
   1937c:	sub	r0, r0, #48	; 0x30
   19380:	cmp	r0, #9
   19384:	bhi	19410 <__assert_fail@plt+0x7984>
   19388:	mov	r6, r9
   1938c:	mov	r0, #0
   19390:	strb	r0, [r7]
   19394:	ldrb	r0, [r7, #-2]
   19398:	sub	r9, r7, #1
   1939c:	mov	r7, r9
   193a0:	sub	r0, r0, #48	; 0x30
   193a4:	cmp	r0, #10
   193a8:	bcc	19394 <__assert_fail@plt+0x7908>
   193ac:	mov	r0, r9
   193b0:	mov	r1, #0
   193b4:	mov	r2, #10
   193b8:	mov	r7, #0
   193bc:	bl	116c0 <strtol@plt>
   193c0:	mov	r4, r0
   193c4:	cmp	r0, #2
   193c8:	blt	194d0 <__assert_fail@plt+0x7a44>
   193cc:	movw	r0, #16884	; 0x41f4
   193d0:	movt	r0, #3
   193d4:	ldr	r0, [r0]
   193d8:	subs	r0, r4, r0
   193dc:	movcs	r7, r0
   193e0:	ldrb	r0, [r9]
   193e4:	cmp	r7, #2
   193e8:	subge	r2, r7, r5
   193ec:	cmpge	r2, #2
   193f0:	sub	r0, r0, #48	; 0x30
   193f4:	clz	r0, r0
   193f8:	lsr	r0, r0, #5
   193fc:	add	r1, r9, r0
   19400:	mov	r9, r6
   19404:	sub	r0, r1, r6
   19408:	str	r0, [fp, #-32]	; 0xffffffe0
   1940c:	bge	19900 <__assert_fail@plt+0x7e74>
   19410:	cmp	r5, #8
   19414:	bgt	194dc <__assert_fail@plt+0x7a50>
   19418:	mov	r6, r4
   1941c:	b	1942c <__assert_fail@plt+0x79a0>
   19420:	str	r5, [fp, #-32]	; 0xffffffe0
   19424:	mov	r6, #0
   19428:	mov	r5, #0
   1942c:	rsb	r0, r5, #9
   19430:	mov	r2, #1
   19434:	mov	r1, r5
   19438:	cmp	r0, #3
   1943c:	bls	194b0 <__assert_fail@plt+0x7a24>
   19440:	bic	r1, r0, #3
   19444:	mov	r2, #1
   19448:	vmov.i32	q8, #1	; 0x00000001
   1944c:	sub	r7, r1, #4
   19450:	add	r3, r2, r7, lsr #2
   19454:	cmp	r7, #12
   19458:	and	r2, r3, #3
   1945c:	bcc	19478 <__assert_fail@plt+0x79ec>
   19460:	sub	r3, r2, r3
   19464:	add	r7, pc, #932	; 0x3a4
   19468:	adds	r3, r3, #4
   1946c:	vld1.64	{d18-d19}, [r7 :128]
   19470:	vmul.i32	q8, q8, q9
   19474:	bne	19464 <__assert_fail@plt+0x79d8>
   19478:	cmp	r2, #0
   1947c:	beq	19494 <__assert_fail@plt+0x7a08>
   19480:	vmov.i32	q9, #10	; 0x0000000a
   19484:	rsb	r2, r2, #0
   19488:	vmul.i32	q8, q8, q9
   1948c:	adds	r2, r2, #1
   19490:	bcc	19488 <__assert_fail@plt+0x79fc>
   19494:	vext.8	q9, q8, q8, #8
   19498:	cmp	r0, r1
   1949c:	vmul.i32	q0, q8, q9
   194a0:	vmul.i32	q8, q0, d0[1]
   194a4:	vmov.32	r2, d16[0]
   194a8:	beq	194c4 <__assert_fail@plt+0x7a38>
   194ac:	add	r1, r5, r1
   194b0:	sub	r0, r1, #9
   194b4:	add	r1, r2, r2, lsl #2
   194b8:	adds	r0, r0, #1
   194bc:	lsl	r2, r1, #1
   194c0:	bcc	194b4 <__assert_fail@plt+0x7a28>
   194c4:	str	r5, [sp, #36]	; 0x24
   194c8:	mov	r4, r6
   194cc:	b	194e8 <__assert_fail@plt+0x7a5c>
   194d0:	mov	r9, r6
   194d4:	cmp	r5, #8
   194d8:	ble	19418 <__assert_fail@plt+0x798c>
   194dc:	mov	r2, #1
   194e0:	mov	r0, #9
   194e4:	str	r0, [sp, #36]	; 0x24
   194e8:	sdiv	r3, r8, r2
   194ec:	cmn	sl, #1
   194f0:	str	r5, [fp, #-36]	; 0xffffffdc
   194f4:	str	r4, [sp, #40]	; 0x28
   194f8:	bgt	195c0 <__assert_fail@plt+0x7b34>
   194fc:	cmp	r8, #0
   19500:	beq	195c0 <__assert_fail@plt+0x7b34>
   19504:	movw	r1, #51712	; 0xca00
   19508:	mls	r0, r3, r2, r8
   1950c:	movt	r1, #15258	; 0x3b9a
   19510:	udiv	r1, r1, r2
   19514:	cmp	r0, #0
   19518:	sub	r3, r1, r3
   1951c:	subne	r3, r3, #1
   19520:	cmp	r3, #0
   19524:	str	r3, [sp, #32]
   19528:	addne	sl, sl, #1
   1952c:	cmp	sl, #0
   19530:	bne	195c4 <__assert_fail@plt+0x7b38>
   19534:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19538:	add	r7, r9, #1
   1953c:	add	sl, r9, r0
   19540:	cmp	r0, #2
   19544:	blt	1973c <__assert_fail@plt+0x7cb0>
   19548:	movw	r5, #14257	; 0x37b1
   1954c:	movw	r8, #12868	; 0x3244
   19550:	mov	r6, r7
   19554:	movt	r5, #2
   19558:	movt	r8, #2
   1955c:	ldrb	r4, [r6]
   19560:	mov	r0, r5
   19564:	mov	r2, #8
   19568:	mov	r1, r4
   1956c:	bl	11948 <memchr@plt>
   19570:	cmp	r0, #0
   19574:	beq	1959c <__assert_fail@plt+0x7b10>
   19578:	mov	r0, r8
   1957c:	mov	r1, r4
   19580:	mov	r2, #6
   19584:	bl	11948 <memchr@plt>
   19588:	cmp	r0, #0
   1958c:	add	r6, r6, #1
   19590:	strbne	r4, [r7], #1
   19594:	cmp	r6, sl
   19598:	bcc	1955c <__assert_fail@plt+0x7ad0>
   1959c:	cmp	r6, sl
   195a0:	bcs	19748 <__assert_fail@plt+0x7cbc>
   195a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   195a8:	sub	r0, r0, r6
   195ac:	add	r0, r9, r0
   195b0:	cmp	r0, #16
   195b4:	bcs	19820 <__assert_fail@plt+0x7d94>
   195b8:	ldr	r4, [fp, #-36]	; 0xffffffdc
   195bc:	b	19980 <__assert_fail@plt+0x7ef4>
   195c0:	str	r3, [sp, #32]
   195c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   195c8:	add	r8, r9, #1
   195cc:	str	sl, [sp, #28]
   195d0:	add	r6, r9, r0
   195d4:	cmp	r0, #2
   195d8:	blt	1963c <__assert_fail@plt+0x7bb0>
   195dc:	movw	r5, #14257	; 0x37b1
   195e0:	movw	sl, #12868	; 0x3244
   195e4:	mov	r7, r8
   195e8:	movt	r5, #2
   195ec:	movt	sl, #2
   195f0:	ldrb	r4, [r7]
   195f4:	mov	r0, r5
   195f8:	mov	r2, #8
   195fc:	mov	r1, r4
   19600:	bl	11948 <memchr@plt>
   19604:	cmp	r0, #0
   19608:	beq	19630 <__assert_fail@plt+0x7ba4>
   1960c:	mov	r0, sl
   19610:	mov	r1, r4
   19614:	mov	r2, #6
   19618:	bl	11948 <memchr@plt>
   1961c:	cmp	r0, #0
   19620:	add	r7, r7, #1
   19624:	strbne	r4, [r8], #1
   19628:	cmp	r7, r6
   1962c:	bcc	195f0 <__assert_fail@plt+0x7b64>
   19630:	cmp	r7, r6
   19634:	bcc	19648 <__assert_fail@plt+0x7bbc>
   19638:	b	19730 <__assert_fail@plt+0x7ca4>
   1963c:	mov	r7, r8
   19640:	cmp	r7, r6
   19644:	bcs	19730 <__assert_fail@plt+0x7ca4>
   19648:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1964c:	sub	r0, r0, r7
   19650:	add	sl, r9, r0
   19654:	cmp	sl, #16
   19658:	bcc	19754 <__assert_fail@plt+0x7cc8>
   1965c:	cmp	r8, r6
   19660:	addcc	r1, r8, sl
   19664:	cmpcc	r7, r1
   19668:	bcc	19754 <__assert_fail@plt+0x7cc8>
   1966c:	bic	r0, sl, #15
   19670:	mov	r2, #1
   19674:	mov	r3, #0
   19678:	str	r9, [sp, #24]
   1967c:	sub	r4, r0, #16
   19680:	str	r0, [sp, #20]
   19684:	add	r5, r2, r4, lsr #4
   19688:	cmp	r4, #48	; 0x30
   1968c:	and	r0, r5, #3
   19690:	str	r0, [fp, #-32]	; 0xffffffe0
   19694:	bcc	196f4 <__assert_fail@plt+0x7c68>
   19698:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1969c:	mov	r3, #0
   196a0:	mov	r9, #48	; 0x30
   196a4:	sub	r5, r5, r0
   196a8:	add	r2, r7, r3
   196ac:	add	r0, r8, r3
   196b0:	subs	r5, r5, #4
   196b4:	add	r3, r3, #64	; 0x40
   196b8:	mov	r1, r2
   196bc:	mov	ip, r0
   196c0:	add	lr, r2, #16
   196c4:	add	r4, r0, #16
   196c8:	add	r2, r2, #32
   196cc:	add	r0, r0, #32
   196d0:	vld1.8	{d16-d17}, [r1], r9
   196d4:	vst1.8	{d16-d17}, [ip], r9
   196d8:	vld1.8	{d16-d17}, [lr]
   196dc:	vst1.8	{d16-d17}, [r4]
   196e0:	vld1.8	{d16-d17}, [r2]
   196e4:	vst1.8	{d16-d17}, [r0]
   196e8:	vld1.8	{d16-d17}, [r1]
   196ec:	vst1.8	{d16-d17}, [ip]
   196f0:	bne	196a8 <__assert_fail@plt+0x7c1c>
   196f4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   196f8:	cmp	r0, #0
   196fc:	beq	1971c <__assert_fail@plt+0x7c90>
   19700:	add	r5, r8, r3
   19704:	add	r3, r7, r3
   19708:	rsb	r2, r0, #0
   1970c:	vld1.8	{d16-d17}, [r3]!
   19710:	adds	r2, r2, #1
   19714:	vst1.8	{d16-d17}, [r5]!
   19718:	bcc	1970c <__assert_fail@plt+0x7c80>
   1971c:	ldr	r0, [sp, #20]
   19720:	ldr	r9, [sp, #24]
   19724:	add	r8, r8, r0
   19728:	cmp	r0, sl
   1972c:	bne	19750 <__assert_fail@plt+0x7cc4>
   19730:	ldr	r5, [sp, #40]	; 0x28
   19734:	ldr	r2, [sp, #28]
   19738:	b	1976c <__assert_fail@plt+0x7ce0>
   1973c:	mov	r6, r7
   19740:	cmp	r6, sl
   19744:	bcc	195a4 <__assert_fail@plt+0x7b18>
   19748:	ldr	r4, [fp, #-36]	; 0xffffffdc
   1974c:	b	19990 <__assert_fail@plt+0x7f04>
   19750:	add	r7, r7, r0
   19754:	ldr	r5, [sp, #40]	; 0x28
   19758:	ldr	r2, [sp, #28]
   1975c:	ldrb	r0, [r7], #1
   19760:	cmp	r6, r7
   19764:	strb	r0, [r8], #1
   19768:	bne	1975c <__assert_fail@plt+0x7cd0>
   1976c:	movw	r0, #27756	; 0x6c6c
   19770:	asr	r3, r2, #31
   19774:	mov	r1, r9
   19778:	movt	r0, #100	; 0x64
   1977c:	str	r0, [r8]
   19780:	mov	r0, #1
   19784:	bl	11924 <__printf_chk@plt>
   19788:	ldr	r4, [fp, #-36]	; 0xffffffdc
   1978c:	cmp	r4, #0
   19790:	beq	19800 <__assert_fail@plt+0x7d74>
   19794:	ldr	r3, [sp, #36]	; 0x24
   19798:	bic	r2, r0, r0, asr #31
   1979c:	mov	r0, #0
   197a0:	mov	r6, #0
   197a4:	cmp	r5, r2
   197a8:	sub	r1, r4, r3
   197ac:	ble	197d0 <__assert_fail@plt+0x7d44>
   197b0:	movw	r7, #16884	; 0x41f4
   197b4:	sub	r2, r5, r2
   197b8:	mov	r6, #0
   197bc:	movt	r7, #3
   197c0:	ldr	r7, [r7]
   197c4:	cmp	r2, r7
   197c8:	subhi	r2, r2, r3
   197cc:	subhi	r6, r2, r7
   197d0:	movw	r2, #16880	; 0x41f0
   197d4:	ldr	r7, [sp, #32]
   197d8:	str	r1, [sp, #8]
   197dc:	movw	r1, #12913	; 0x3271
   197e0:	str	r0, [sp, #12]
   197e4:	mov	r0, #1
   197e8:	str	r6, [sp, #4]
   197ec:	movt	r2, #3
   197f0:	movt	r1, #2
   197f4:	ldr	r2, [r2]
   197f8:	str	r7, [sp]
   197fc:	bl	11924 <__printf_chk@plt>
   19800:	sub	sp, fp, #28
   19804:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19808:	nop	{0}
   1980c:	nop	{0}
   19810:	andeq	r2, r0, r0, lsl r7
   19814:	andeq	r2, r0, r0, lsl r7
   19818:	andeq	r2, r0, r0, lsl r7
   1981c:	andeq	r2, r0, r0, lsl r7
   19820:	cmp	r7, sl
   19824:	addcc	r1, r7, r0
   19828:	cmpcc	r6, r1
   1982c:	bcc	1997c <__assert_fail@plt+0x7ef0>
   19830:	str	r0, [sp, #28]
   19834:	bic	r0, r0, #15
   19838:	mov	r2, #1
   1983c:	mov	r3, #0
   19840:	sub	r4, r0, #16
   19844:	str	r0, [sp, #24]
   19848:	add	r5, r2, r4, lsr #4
   1984c:	cmp	r4, #48	; 0x30
   19850:	and	r0, r5, #3
   19854:	str	r0, [fp, #-32]	; 0xffffffe0
   19858:	bcc	198b8 <__assert_fail@plt+0x7e2c>
   1985c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19860:	mov	r3, #0
   19864:	mov	r8, #48	; 0x30
   19868:	sub	r5, r5, r0
   1986c:	add	r2, r6, r3
   19870:	add	r0, r7, r3
   19874:	subs	r5, r5, #4
   19878:	add	r3, r3, #64	; 0x40
   1987c:	mov	r1, r2
   19880:	mov	ip, r0
   19884:	add	lr, r2, #16
   19888:	add	r4, r0, #16
   1988c:	add	r2, r2, #32
   19890:	add	r0, r0, #32
   19894:	vld1.8	{d16-d17}, [r1], r8
   19898:	vst1.8	{d16-d17}, [ip], r8
   1989c:	vld1.8	{d16-d17}, [lr]
   198a0:	vst1.8	{d16-d17}, [r4]
   198a4:	vld1.8	{d16-d17}, [r2]
   198a8:	vst1.8	{d16-d17}, [r0]
   198ac:	vld1.8	{d16-d17}, [r1]
   198b0:	vst1.8	{d16-d17}, [ip]
   198b4:	bne	1986c <__assert_fail@plt+0x7de0>
   198b8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   198bc:	cmp	r0, #0
   198c0:	beq	198e0 <__assert_fail@plt+0x7e54>
   198c4:	add	r5, r7, r3
   198c8:	add	r3, r6, r3
   198cc:	rsb	r2, r0, #0
   198d0:	vld1.8	{d16-d17}, [r3]!
   198d4:	adds	r2, r2, #1
   198d8:	vst1.8	{d16-d17}, [r5]!
   198dc:	bcc	198d0 <__assert_fail@plt+0x7e44>
   198e0:	ldr	r1, [sp, #24]
   198e4:	ldr	r0, [sp, #28]
   198e8:	ldr	r4, [fp, #-36]	; 0xffffffdc
   198ec:	add	r7, r7, r1
   198f0:	cmp	r1, r0
   198f4:	beq	19990 <__assert_fail@plt+0x7f04>
   198f8:	add	r6, r6, r1
   198fc:	b	19980 <__assert_fail@plt+0x7ef4>
   19900:	mov	r6, #0
   19904:	cmp	r1, r9
   19908:	mov	r0, r9
   1990c:	bls	1994c <__assert_fail@plt+0x7ec0>
   19910:	add	r1, r1, #1
   19914:	add	r3, r9, #1
   19918:	mov	r7, #0
   1991c:	mov	r0, r9
   19920:	ldrb	r6, [r3, #-1]
   19924:	add	r3, r3, #1
   19928:	cmp	r6, #45	; 0x2d
   1992c:	strbne	r6, [r0], #1
   19930:	moveq	r7, #1
   19934:	cmp	r1, r3
   19938:	bne	19920 <__assert_fail@plt+0x7e94>
   1993c:	sub	r6, r0, r9
   19940:	mov	r1, #0
   19944:	tst	r7, #1
   19948:	bne	19968 <__assert_fail@plt+0x7edc>
   1994c:	movw	r3, #14811	; 0x39db
   19950:	str	r2, [sp]
   19954:	mov	r1, #1
   19958:	mvn	r2, #0
   1995c:	movt	r3, #2
   19960:	bl	118f4 <__sprintf_chk@plt>
   19964:	mov	r1, r0
   19968:	add	r0, r6, r1
   1996c:	str	r0, [fp, #-32]	; 0xffffffe0
   19970:	cmp	r5, #8
   19974:	ble	19418 <__assert_fail@plt+0x798c>
   19978:	b	194dc <__assert_fail@plt+0x7a50>
   1997c:	ldr	r4, [fp, #-36]	; 0xffffffdc
   19980:	ldrb	r0, [r6], #1
   19984:	cmp	sl, r6
   19988:	strb	r0, [r7], #1
   1998c:	bne	19980 <__assert_fail@plt+0x7ef4>
   19990:	vmov.f64	d16, #208	; 0xbe800000 -0.250
   19994:	movw	r0, #12334	; 0x302e
   19998:	mov	r1, r9
   1999c:	movt	r0, #102	; 0x66
   199a0:	vmov	r2, r3, d16
   199a4:	str	r0, [r7]
   199a8:	mov	r0, #1
   199ac:	bl	11924 <__printf_chk@plt>
   199b0:	ldr	r5, [sp, #40]	; 0x28
   199b4:	cmp	r4, #0
   199b8:	bne	19794 <__assert_fail@plt+0x7d08>
   199bc:	b	19800 <__assert_fail@plt+0x7d74>
   199c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   199c4:	add	fp, sp, #28
   199c8:	sub	sp, sp, #212	; 0xd4
   199cc:	movw	r6, #16908	; 0x420c
   199d0:	mov	r4, r0
   199d4:	movt	r6, #3
   199d8:	ldrb	r0, [r6]
   199dc:	cmp	r0, #0
   199e0:	bne	19a3c <__assert_fail@plt+0x7fb0>
   199e4:	mov	r0, #0
   199e8:	bl	1a9d8 <__assert_fail@plt+0x8f4c>
   199ec:	movw	r1, #16904	; 0x4208
   199f0:	cmp	r0, #0
   199f4:	movt	r1, #3
   199f8:	str	r0, [r1]
   199fc:	bne	19a34 <__assert_fail@plt+0x7fa8>
   19a00:	bl	118e8 <__errno_location@plt>
   19a04:	movw	r1, #12826	; 0x321a
   19a08:	ldr	r5, [r0]
   19a0c:	mov	r0, #0
   19a10:	mov	r2, #5
   19a14:	movt	r1, #2
   19a18:	bl	11720 <dcgettext@plt>
   19a1c:	movw	r2, #11229	; 0x2bdd
   19a20:	mov	r3, r0
   19a24:	mov	r0, #0
   19a28:	mov	r1, r5
   19a2c:	movt	r2, #2
   19a30:	bl	117d4 <error@plt>
   19a34:	mov	r0, #1
   19a38:	strb	r0, [r6]
   19a3c:	add	r7, sp, #104	; 0x68
   19a40:	mov	r0, #3
   19a44:	mov	r1, r4
   19a48:	mov	r2, r7
   19a4c:	bl	11a38 <__xstat64@plt>
   19a50:	mov	r5, #0
   19a54:	cmp	r0, #0
   19a58:	bne	19b0c <__assert_fail@plt+0x8080>
   19a5c:	movw	r0, #16904	; 0x4208
   19a60:	movt	r0, #3
   19a64:	ldr	r6, [r0]
   19a68:	cmp	r6, #0
   19a6c:	beq	19b0c <__assert_fail@plt+0x8080>
   19a70:	mov	r8, sp
   19a74:	add	sl, r7, #96	; 0x60
   19a78:	add	r9, r8, #96	; 0x60
   19a7c:	b	19a8c <__assert_fail@plt+0x8000>
   19a80:	ldr	r6, [r6, #28]
   19a84:	cmp	r6, #0
   19a88:	beq	19b0c <__assert_fail@plt+0x8080>
   19a8c:	ldrb	r0, [r6, #24]
   19a90:	tst	r0, #1
   19a94:	beq	19a80 <__assert_fail@plt+0x7ff4>
   19a98:	ldr	r7, [r6]
   19a9c:	ldrb	r0, [r7]
   19aa0:	cmp	r0, #47	; 0x2f
   19aa4:	bne	19a80 <__assert_fail@plt+0x7ff4>
   19aa8:	ldr	r0, [r6, #4]
   19aac:	mov	r1, r4
   19ab0:	bl	116b4 <strcmp@plt>
   19ab4:	cmp	r0, #0
   19ab8:	bne	19a80 <__assert_fail@plt+0x7ff4>
   19abc:	mov	r0, #3
   19ac0:	mov	r1, r7
   19ac4:	mov	r2, r8
   19ac8:	bl	11a38 <__xstat64@plt>
   19acc:	cmp	r0, #0
   19ad0:	bne	19a80 <__assert_fail@plt+0x7ff4>
   19ad4:	ldrd	r0, [r9]
   19ad8:	ldrd	r2, [sl]
   19adc:	eor	r1, r3, r1
   19ae0:	eor	r0, r2, r0
   19ae4:	orrs	r0, r0, r1
   19ae8:	bne	19a80 <__assert_fail@plt+0x7ff4>
   19aec:	ldr	r2, [sp, #104]	; 0x68
   19af0:	ldr	r3, [sp, #108]	; 0x6c
   19af4:	ldm	sp, {r0, r1}
   19af8:	eor	r1, r3, r1
   19afc:	eor	r0, r2, r0
   19b00:	orrs	r0, r0, r1
   19b04:	bne	19a80 <__assert_fail@plt+0x7ff4>
   19b08:	ldr	r5, [r6]
   19b0c:	mov	r0, r5
   19b10:	sub	sp, fp, #28
   19b14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b1c:	add	fp, sp, #28
   19b20:	sub	sp, sp, #220	; 0xdc
   19b24:	mov	r5, r0
   19b28:	sub	r0, fp, #40	; 0x28
   19b2c:	mov	r4, r1
   19b30:	bl	1f070 <__assert_fail@plt+0xd5e4>
   19b34:	cmp	r0, #0
   19b38:	beq	19b70 <__assert_fail@plt+0x80e4>
   19b3c:	bl	118e8 <__errno_location@plt>
   19b40:	movw	r1, #14276	; 0x37c4
   19b44:	ldr	r5, [r0]
   19b48:	mov	r0, #0
   19b4c:	mov	r2, #5
   19b50:	mov	r4, #0
   19b54:	movt	r1, #2
   19b58:	bl	11720 <dcgettext@plt>
   19b5c:	mov	r2, r0
   19b60:	mov	r0, #0
   19b64:	mov	r1, r5
   19b68:	bl	117d4 <error@plt>
   19b6c:	b	19dc8 <__assert_fail@plt+0x833c>
   19b70:	ldr	r0, [r4, #16]
   19b74:	and	r0, r0, #61440	; 0xf000
   19b78:	cmp	r0, #16384	; 0x4000
   19b7c:	bne	19ba4 <__assert_fail@plt+0x8118>
   19b80:	sub	r0, fp, #144	; 0x90
   19b84:	mov	r1, r4
   19b88:	mov	r2, #104	; 0x68
   19b8c:	bl	11708 <memcpy@plt>
   19b90:	mov	r0, r5
   19b94:	bl	1175c <chdir@plt>
   19b98:	cmn	r0, #1
   19b9c:	bgt	19c08 <__assert_fail@plt+0x817c>
   19ba0:	b	19cc0 <__assert_fail@plt+0x8234>
   19ba4:	mov	r0, r5
   19ba8:	bl	1a5d0 <__assert_fail@plt+0x8b44>
   19bac:	mov	r4, r0
   19bb0:	bl	118ac <strlen@plt>
   19bb4:	add	r1, r0, #8
   19bb8:	bic	r1, r1, #7
   19bbc:	sub	r5, sp, r1
   19bc0:	mov	sp, r5
   19bc4:	add	r2, r0, #1
   19bc8:	mov	r0, r5
   19bcc:	mov	r1, r4
   19bd0:	bl	11708 <memcpy@plt>
   19bd4:	mov	r0, r4
   19bd8:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   19bdc:	mov	r0, r5
   19be0:	bl	1175c <chdir@plt>
   19be4:	cmn	r0, #1
   19be8:	ble	19cc0 <__assert_fail@plt+0x8234>
   19bec:	movw	r1, #14375	; 0x3827
   19bf0:	sub	r2, fp, #144	; 0x90
   19bf4:	mov	r0, #3
   19bf8:	movt	r1, #2
   19bfc:	bl	11a38 <__xstat64@plt>
   19c00:	cmn	r0, #1
   19c04:	ble	19d14 <__assert_fail@plt+0x8288>
   19c08:	movw	r1, #14374	; 0x3826
   19c0c:	sub	r4, fp, #248	; 0xf8
   19c10:	mov	r0, #3
   19c14:	movt	r1, #2
   19c18:	mov	r2, r4
   19c1c:	bl	11a38 <__xstat64@plt>
   19c20:	movw	r8, #14377	; 0x3829
   19c24:	cmp	r0, #0
   19c28:	movt	r8, #2
   19c2c:	bmi	19d5c <__assert_fail@plt+0x82d0>
   19c30:	movw	r7, #14374	; 0x3826
   19c34:	movw	sl, #14305	; 0x37e1
   19c38:	sub	r9, fp, #144	; 0x90
   19c3c:	add	r6, r4, #96	; 0x60
   19c40:	movt	r7, #2
   19c44:	movt	sl, #2
   19c48:	add	r5, r9, #96	; 0x60
   19c4c:	ldr	r0, [fp, #-144]	; 0xffffff70
   19c50:	ldr	r2, [fp, #-248]	; 0xffffff08
   19c54:	ldr	r1, [fp, #-140]	; 0xffffff74
   19c58:	ldr	r3, [fp, #-244]	; 0xffffff0c
   19c5c:	eor	r1, r3, r1
   19c60:	eor	r0, r2, r0
   19c64:	orrs	r0, r0, r1
   19c68:	bne	19d08 <__assert_fail@plt+0x827c>
   19c6c:	ldrd	r0, [r5]
   19c70:	ldrd	r2, [r6]
   19c74:	eor	r1, r3, r1
   19c78:	eor	r0, r2, r0
   19c7c:	orrs	r0, r0, r1
   19c80:	beq	19d08 <__assert_fail@plt+0x827c>
   19c84:	mov	r0, r7
   19c88:	bl	1175c <chdir@plt>
   19c8c:	cmn	r0, #1
   19c90:	ble	19d58 <__assert_fail@plt+0x82cc>
   19c94:	mov	r0, r9
   19c98:	mov	r1, r4
   19c9c:	mov	r2, #104	; 0x68
   19ca0:	bl	11708 <memcpy@plt>
   19ca4:	mov	r0, #3
   19ca8:	mov	r1, r7
   19cac:	mov	r2, r4
   19cb0:	bl	11a38 <__xstat64@plt>
   19cb4:	cmp	r0, #0
   19cb8:	bpl	19c4c <__assert_fail@plt+0x81c0>
   19cbc:	b	19d5c <__assert_fail@plt+0x82d0>
   19cc0:	bl	118e8 <__errno_location@plt>
   19cc4:	movw	r1, #14305	; 0x37e1
   19cc8:	ldr	r6, [r0]
   19ccc:	mov	r0, #0
   19cd0:	mov	r2, #5
   19cd4:	mov	r4, #0
   19cd8:	movt	r1, #2
   19cdc:	bl	11720 <dcgettext@plt>
   19ce0:	mov	r7, r0
   19ce4:	mov	r0, #4
   19ce8:	mov	r1, r5
   19cec:	bl	1e9fc <__assert_fail@plt+0xcf70>
   19cf0:	mov	r3, r0
   19cf4:	mov	r0, #0
   19cf8:	mov	r1, r6
   19cfc:	mov	r2, r7
   19d00:	bl	117d4 <error@plt>
   19d04:	b	19dc8 <__assert_fail@plt+0x833c>
   19d08:	bl	204b8 <__assert_fail@plt+0xea2c>
   19d0c:	mov	r4, r0
   19d10:	b	19da0 <__assert_fail@plt+0x8314>
   19d14:	bl	118e8 <__errno_location@plt>
   19d18:	movw	r1, #14335	; 0x37ff
   19d1c:	ldr	r6, [r0]
   19d20:	mov	r0, #0
   19d24:	mov	r2, #5
   19d28:	mov	r4, #0
   19d2c:	movt	r1, #2
   19d30:	bl	11720 <dcgettext@plt>
   19d34:	mov	r7, r0
   19d38:	mov	r0, #4
   19d3c:	mov	r1, r5
   19d40:	bl	1e9fc <__assert_fail@plt+0xcf70>
   19d44:	mov	r3, r0
   19d48:	mov	r0, #0
   19d4c:	mov	r1, r6
   19d50:	mov	r2, r7
   19d54:	b	19d9c <__assert_fail@plt+0x8310>
   19d58:	mov	r8, sl
   19d5c:	bl	118e8 <__errno_location@plt>
   19d60:	ldr	r6, [r0]
   19d64:	mov	r0, #0
   19d68:	mov	r1, r8
   19d6c:	mov	r2, #5
   19d70:	mov	r4, #0
   19d74:	bl	11720 <dcgettext@plt>
   19d78:	movw	r1, #14374	; 0x3826
   19d7c:	mov	r5, r0
   19d80:	mov	r0, #4
   19d84:	movt	r1, #2
   19d88:	bl	1e9fc <__assert_fail@plt+0xcf70>
   19d8c:	mov	r3, r0
   19d90:	mov	r0, #0
   19d94:	mov	r1, r6
   19d98:	mov	r2, r5
   19d9c:	bl	117d4 <error@plt>
   19da0:	bl	118e8 <__errno_location@plt>
   19da4:	ldr	r6, [r0]
   19da8:	mov	r5, r0
   19dac:	sub	r0, fp, #40	; 0x28
   19db0:	bl	1f0cc <__assert_fail@plt+0xd640>
   19db4:	cmp	r0, #0
   19db8:	bne	19dd4 <__assert_fail@plt+0x8348>
   19dbc:	sub	r0, fp, #40	; 0x28
   19dc0:	bl	1f0e8 <__assert_fail@plt+0xd65c>
   19dc4:	str	r6, [r5]
   19dc8:	mov	r0, r4
   19dcc:	sub	sp, fp, #28
   19dd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19dd4:	movw	r1, #14392	; 0x3838
   19dd8:	ldr	r4, [r5]
   19ddc:	mov	r0, #0
   19de0:	mov	r2, #5
   19de4:	movt	r1, #2
   19de8:	bl	11720 <dcgettext@plt>
   19dec:	mov	r2, r0
   19df0:	mov	r0, #1
   19df4:	mov	r1, r4
   19df8:	bl	117d4 <error@plt>
   19dfc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19e00:	add	fp, sp, #24
   19e04:	sub	sp, sp, #128	; 0x80
   19e08:	mov	r4, r1
   19e0c:	mov	r8, r0
   19e10:	cmp	r1, #0
   19e14:	beq	19e28 <__assert_fail@plt+0x839c>
   19e18:	cmp	r4, #1024	; 0x400
   19e1c:	movw	r6, #1025	; 0x401
   19e20:	addls	r6, r4, #1
   19e24:	b	19e2c <__assert_fail@plt+0x83a0>
   19e28:	mov	r6, #128	; 0x80
   19e2c:	mov	r9, sp
   19e30:	cmp	r4, #0
   19e34:	bne	19e48 <__assert_fail@plt+0x83bc>
   19e38:	mov	r5, #0
   19e3c:	cmp	r6, #128	; 0x80
   19e40:	mov	r7, r9
   19e44:	beq	19e60 <__assert_fail@plt+0x83d4>
   19e48:	mov	r0, r6
   19e4c:	bl	2057c <__assert_fail@plt+0xeaf0>
   19e50:	mov	r7, r0
   19e54:	cmp	r0, #0
   19e58:	mov	r5, r0
   19e5c:	beq	19efc <__assert_fail@plt+0x8470>
   19e60:	mov	r0, r8
   19e64:	mov	r1, r7
   19e68:	mov	r2, r6
   19e6c:	bl	11780 <readlink@plt>
   19e70:	cmn	r0, #1
   19e74:	ble	19eb4 <__assert_fail@plt+0x8428>
   19e78:	cmp	r0, r6
   19e7c:	bcc	19ec4 <__assert_fail@plt+0x8438>
   19e80:	mov	r0, r5
   19e84:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   19e88:	cmn	r6, #-1073741823	; 0xc0000001
   19e8c:	bhi	19e98 <__assert_fail@plt+0x840c>
   19e90:	lsl	r0, r6, #1
   19e94:	b	19ea4 <__assert_fail@plt+0x8418>
   19e98:	mvn	r0, #-2147483648	; 0x80000000
   19e9c:	cmn	r6, #-2147483647	; 0x80000001
   19ea0:	bcs	19efc <__assert_fail@plt+0x8470>
   19ea4:	mov	r6, r0
   19ea8:	cmp	r4, #0
   19eac:	beq	19e38 <__assert_fail@plt+0x83ac>
   19eb0:	b	19e48 <__assert_fail@plt+0x83bc>
   19eb4:	mov	r0, r5
   19eb8:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   19ebc:	mov	r4, #0
   19ec0:	b	19f34 <__assert_fail@plt+0x84a8>
   19ec4:	mov	r4, #0
   19ec8:	add	r8, r0, #1
   19ecc:	cmp	r5, #0
   19ed0:	strb	r4, [r7, r0]
   19ed4:	beq	19f10 <__assert_fail@plt+0x8484>
   19ed8:	cmp	r8, r6
   19edc:	bcs	19f30 <__assert_fail@plt+0x84a4>
   19ee0:	mov	r0, r5
   19ee4:	mov	r1, r8
   19ee8:	bl	205ac <__assert_fail@plt+0xeb20>
   19eec:	cmp	r0, #0
   19ef0:	mov	r4, r0
   19ef4:	moveq	r4, r5
   19ef8:	b	19f34 <__assert_fail@plt+0x84a8>
   19efc:	bl	118e8 <__errno_location@plt>
   19f00:	mov	r1, #12
   19f04:	mov	r4, #0
   19f08:	str	r1, [r0]
   19f0c:	b	19f34 <__assert_fail@plt+0x84a8>
   19f10:	mov	r0, r8
   19f14:	bl	2057c <__assert_fail@plt+0xeaf0>
   19f18:	cmp	r0, #0
   19f1c:	beq	19f34 <__assert_fail@plt+0x84a8>
   19f20:	mov	r1, r7
   19f24:	mov	r2, r8
   19f28:	mov	r5, r0
   19f2c:	bl	11708 <memcpy@plt>
   19f30:	mov	r4, r5
   19f34:	mov	r0, r4
   19f38:	sub	sp, fp, #24
   19f3c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19f40:	mov	r0, #1
   19f44:	b	11b90 <__assert_fail@plt+0x104>
   19f48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f4c:	add	fp, sp, #28
   19f50:	sub	sp, sp, #12
   19f54:	mov	r4, r3
   19f58:	mov	r6, r2
   19f5c:	mov	r5, r1
   19f60:	mov	sl, r0
   19f64:	bl	118ac <strlen@plt>
   19f68:	ldr	r8, [r5]
   19f6c:	cmp	r8, #0
   19f70:	beq	1a030 <__assert_fail@plt+0x85a4>
   19f74:	mov	r7, r0
   19f78:	mov	r0, #0
   19f7c:	add	r9, r5, #4
   19f80:	mov	r5, #0
   19f84:	str	r6, [sp, #4]
   19f88:	str	r0, [sp]
   19f8c:	mvn	r0, #0
   19f90:	str	r0, [sp, #8]
   19f94:	b	19fb0 <__assert_fail@plt+0x8524>
   19f98:	str	r5, [sp, #8]
   19f9c:	ldr	r8, [r9, r5, lsl #2]
   19fa0:	add	r6, r6, r4
   19fa4:	add	r5, r5, #1
   19fa8:	cmp	r8, #0
   19fac:	beq	1a018 <__assert_fail@plt+0x858c>
   19fb0:	mov	r0, r8
   19fb4:	mov	r1, sl
   19fb8:	mov	r2, r7
   19fbc:	bl	11a50 <strncmp@plt>
   19fc0:	cmp	r0, #0
   19fc4:	bne	19f9c <__assert_fail@plt+0x8510>
   19fc8:	mov	r0, r8
   19fcc:	bl	118ac <strlen@plt>
   19fd0:	cmp	r0, r7
   19fd4:	beq	1a034 <__assert_fail@plt+0x85a8>
   19fd8:	ldr	r0, [sp, #8]
   19fdc:	cmn	r0, #1
   19fe0:	beq	19f98 <__assert_fail@plt+0x850c>
   19fe4:	ldr	r0, [sp, #4]
   19fe8:	cmp	r0, #0
   19fec:	beq	1a00c <__assert_fail@plt+0x8580>
   19ff0:	ldr	r1, [sp, #8]
   19ff4:	mov	r2, r4
   19ff8:	mla	r0, r1, r4, r0
   19ffc:	mov	r1, r6
   1a000:	bl	118a0 <bcmp@plt>
   1a004:	cmp	r0, #0
   1a008:	beq	19f9c <__assert_fail@plt+0x8510>
   1a00c:	mov	r0, #1
   1a010:	str	r0, [sp]
   1a014:	b	19f9c <__assert_fail@plt+0x8510>
   1a018:	ldr	r0, [sp]
   1a01c:	tst	r0, #1
   1a020:	ldr	r0, [sp, #8]
   1a024:	mvnne	r0, #1
   1a028:	sub	sp, fp, #28
   1a02c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a030:	mvn	r5, #0
   1a034:	mov	r0, r5
   1a038:	sub	sp, fp, #28
   1a03c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a040:	push	{r4, r5, r6, r7, fp, lr}
   1a044:	add	fp, sp, #16
   1a048:	mov	r5, r0
   1a04c:	ldr	r0, [r1]
   1a050:	mvn	r4, #0
   1a054:	cmp	r0, #0
   1a058:	beq	1a084 <__assert_fail@plt+0x85f8>
   1a05c:	add	r7, r1, #4
   1a060:	mov	r6, #0
   1a064:	mov	r1, r5
   1a068:	bl	116b4 <strcmp@plt>
   1a06c:	cmp	r0, #0
   1a070:	beq	1a08c <__assert_fail@plt+0x8600>
   1a074:	ldr	r0, [r7, r6, lsl #2]
   1a078:	add	r6, r6, #1
   1a07c:	cmp	r0, #0
   1a080:	bne	1a064 <__assert_fail@plt+0x85d8>
   1a084:	mov	r0, r4
   1a088:	pop	{r4, r5, r6, r7, fp, pc}
   1a08c:	mov	r0, r6
   1a090:	pop	{r4, r5, r6, r7, fp, pc}
   1a094:	push	{r4, r5, r6, sl, fp, lr}
   1a098:	add	fp, sp, #16
   1a09c:	sub	sp, sp, #8
   1a0a0:	mov	r5, r0
   1a0a4:	movw	r0, #14453	; 0x3875
   1a0a8:	mov	r4, r1
   1a0ac:	movw	r1, #14480	; 0x3890
   1a0b0:	cmn	r2, #1
   1a0b4:	mov	r2, #5
   1a0b8:	movt	r0, #2
   1a0bc:	movt	r1, #2
   1a0c0:	moveq	r1, r0
   1a0c4:	mov	r0, #0
   1a0c8:	bl	11720 <dcgettext@plt>
   1a0cc:	mov	r6, r0
   1a0d0:	mov	r0, #0
   1a0d4:	mov	r1, #8
   1a0d8:	mov	r2, r4
   1a0dc:	bl	1e954 <__assert_fail@plt+0xcec8>
   1a0e0:	mov	r4, r0
   1a0e4:	mov	r0, #1
   1a0e8:	mov	r1, r5
   1a0ec:	bl	1ef14 <__assert_fail@plt+0xd488>
   1a0f0:	str	r0, [sp]
   1a0f4:	mov	r0, #0
   1a0f8:	mov	r1, #0
   1a0fc:	mov	r2, r6
   1a100:	mov	r3, r4
   1a104:	bl	117d4 <error@plt>
   1a108:	sub	sp, fp, #16
   1a10c:	pop	{r4, r5, r6, sl, fp, pc}
   1a110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a114:	add	fp, sp, #28
   1a118:	sub	sp, sp, #4
   1a11c:	mov	sl, r1
   1a120:	movw	r1, #14509	; 0x38ad
   1a124:	mov	r4, r2
   1a128:	mov	r6, r0
   1a12c:	mov	r0, #0
   1a130:	mov	r2, #5
   1a134:	mov	r8, #0
   1a138:	movt	r1, #2
   1a13c:	bl	11720 <dcgettext@plt>
   1a140:	movw	r1, #16864	; 0x41e0
   1a144:	movt	r1, #3
   1a148:	ldr	r1, [r1]
   1a14c:	bl	11678 <fputs_unlocked@plt>
   1a150:	ldr	r7, [r6]
   1a154:	cmp	r7, #0
   1a158:	beq	1a214 <__assert_fail@plt+0x8788>
   1a15c:	add	r0, r6, #4
   1a160:	mov	r9, #0
   1a164:	mov	r6, #0
   1a168:	str	r0, [sp]
   1a16c:	cmp	r9, #0
   1a170:	bne	1a1c8 <__assert_fail@plt+0x873c>
   1a174:	mov	r5, #0
   1a178:	movw	r0, #16864	; 0x41e0
   1a17c:	movt	r0, #3
   1a180:	ldr	r6, [r0]
   1a184:	mov	r0, r7
   1a188:	bl	1ef24 <__assert_fail@plt+0xd498>
   1a18c:	movw	r2, #14530	; 0x38c2
   1a190:	mov	r3, r0
   1a194:	mov	r0, r6
   1a198:	mov	r1, #1
   1a19c:	movt	r2, #2
   1a1a0:	bl	1193c <__fprintf_chk@plt>
   1a1a4:	add	r6, sl, r5
   1a1a8:	ldr	r0, [sp]
   1a1ac:	add	r8, r8, r4
   1a1b0:	ldr	r7, [r0, -r9, lsl #2]
   1a1b4:	sub	r9, r9, #1
   1a1b8:	cmp	r7, #0
   1a1bc:	beq	1a214 <__assert_fail@plt+0x8788>
   1a1c0:	cmp	r9, #0
   1a1c4:	beq	1a174 <__assert_fail@plt+0x86e8>
   1a1c8:	add	r1, sl, r8
   1a1cc:	mov	r0, r6
   1a1d0:	mov	r2, r4
   1a1d4:	bl	118a0 <bcmp@plt>
   1a1d8:	cmp	r0, #0
   1a1dc:	mov	r5, r8
   1a1e0:	bne	1a178 <__assert_fail@plt+0x86ec>
   1a1e4:	movw	r0, #16864	; 0x41e0
   1a1e8:	movt	r0, #3
   1a1ec:	ldr	r5, [r0]
   1a1f0:	mov	r0, r7
   1a1f4:	bl	1ef24 <__assert_fail@plt+0xd498>
   1a1f8:	movw	r2, #14538	; 0x38ca
   1a1fc:	mov	r3, r0
   1a200:	mov	r0, r5
   1a204:	mov	r1, #1
   1a208:	movt	r2, #2
   1a20c:	bl	1193c <__fprintf_chk@plt>
   1a210:	b	1a1a8 <__assert_fail@plt+0x871c>
   1a214:	movw	r0, #16864	; 0x41e0
   1a218:	movt	r0, #3
   1a21c:	ldr	r0, [r0]
   1a220:	ldr	r1, [r0, #20]
   1a224:	ldr	r2, [r0, #24]
   1a228:	cmp	r1, r2
   1a22c:	addcc	r2, r1, #1
   1a230:	strcc	r2, [r0, #20]
   1a234:	movcc	r0, #10
   1a238:	strbcc	r0, [r1]
   1a23c:	subcc	sp, fp, #28
   1a240:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a244:	mov	r1, #10
   1a248:	sub	sp, fp, #28
   1a24c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a250:	b	11990 <__overflow@plt>
   1a254:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a258:	add	fp, sp, #28
   1a25c:	sub	sp, sp, #20
   1a260:	mov	r9, r0
   1a264:	ldr	r0, [fp, #16]
   1a268:	mov	r8, r3
   1a26c:	mov	sl, r2
   1a270:	mov	r7, r1
   1a274:	cmp	r0, #0
   1a278:	beq	1a338 <__assert_fail@plt+0x88ac>
   1a27c:	mov	r0, r7
   1a280:	str	r9, [sp, #8]
   1a284:	str	r8, [sp, #16]
   1a288:	bl	118ac <strlen@plt>
   1a28c:	ldr	r9, [sl]
   1a290:	cmp	r9, #0
   1a294:	beq	1a3a8 <__assert_fail@plt+0x891c>
   1a298:	str	sl, [sp, #4]
   1a29c:	add	r8, sl, #4
   1a2a0:	ldr	sl, [sp, #16]
   1a2a4:	mov	r4, r0
   1a2a8:	mov	r0, #0
   1a2ac:	mvn	r6, #0
   1a2b0:	mov	r5, #0
   1a2b4:	str	r0, [sp, #12]
   1a2b8:	b	1a2d8 <__assert_fail@plt+0x884c>
   1a2bc:	mov	r6, r5
   1a2c0:	ldr	r9, [r8, r5, lsl #2]
   1a2c4:	ldr	r0, [fp, #8]
   1a2c8:	add	r5, r5, #1
   1a2cc:	add	sl, sl, r0
   1a2d0:	cmp	r9, #0
   1a2d4:	beq	1a378 <__assert_fail@plt+0x88ec>
   1a2d8:	mov	r0, r9
   1a2dc:	mov	r1, r7
   1a2e0:	mov	r2, r4
   1a2e4:	bl	11a50 <strncmp@plt>
   1a2e8:	cmp	r0, #0
   1a2ec:	bne	1a2c0 <__assert_fail@plt+0x8834>
   1a2f0:	mov	r0, r9
   1a2f4:	bl	118ac <strlen@plt>
   1a2f8:	cmp	r0, r4
   1a2fc:	beq	1a42c <__assert_fail@plt+0x89a0>
   1a300:	cmn	r6, #1
   1a304:	beq	1a2bc <__assert_fail@plt+0x8830>
   1a308:	ldr	r0, [sp, #16]
   1a30c:	cmp	r0, #0
   1a310:	beq	1a32c <__assert_fail@plt+0x88a0>
   1a314:	ldr	r2, [fp, #8]
   1a318:	mov	r1, sl
   1a31c:	mla	r0, r6, r2, r0
   1a320:	bl	118a0 <bcmp@plt>
   1a324:	cmp	r0, #0
   1a328:	beq	1a2c0 <__assert_fail@plt+0x8834>
   1a32c:	mov	r0, #1
   1a330:	str	r0, [sp, #12]
   1a334:	b	1a2c0 <__assert_fail@plt+0x8834>
   1a338:	ldr	r0, [sl]
   1a33c:	movw	r4, #14453	; 0x3875
   1a340:	movt	r4, #2
   1a344:	cmp	r0, #0
   1a348:	beq	1a3b8 <__assert_fail@plt+0x892c>
   1a34c:	add	r5, sl, #4
   1a350:	mov	r6, #0
   1a354:	mov	r1, r7
   1a358:	bl	116b4 <strcmp@plt>
   1a35c:	cmp	r0, #0
   1a360:	beq	1a390 <__assert_fail@plt+0x8904>
   1a364:	ldr	r0, [r5, r6, lsl #2]
   1a368:	add	r6, r6, #1
   1a36c:	cmp	r0, #0
   1a370:	bne	1a354 <__assert_fail@plt+0x88c8>
   1a374:	b	1a3b8 <__assert_fail@plt+0x892c>
   1a378:	ldr	r0, [sp, #12]
   1a37c:	ldr	r8, [sp, #16]
   1a380:	ldr	sl, [sp, #4]
   1a384:	ldr	r9, [sp, #8]
   1a388:	tst	r0, #1
   1a38c:	bne	1a39c <__assert_fail@plt+0x8910>
   1a390:	cmn	r6, #1
   1a394:	bgt	1a420 <__assert_fail@plt+0x8994>
   1a398:	beq	1a3b0 <__assert_fail@plt+0x8924>
   1a39c:	movw	r4, #14480	; 0x3890
   1a3a0:	movt	r4, #2
   1a3a4:	b	1a3b8 <__assert_fail@plt+0x892c>
   1a3a8:	ldr	r8, [sp, #16]
   1a3ac:	ldr	r9, [sp, #8]
   1a3b0:	movw	r4, #14453	; 0x3875
   1a3b4:	movt	r4, #2
   1a3b8:	ldr	r6, [fp, #12]
   1a3bc:	mov	r0, #0
   1a3c0:	mov	r1, r4
   1a3c4:	mov	r2, #5
   1a3c8:	bl	11720 <dcgettext@plt>
   1a3cc:	mov	r4, r0
   1a3d0:	mov	r0, #0
   1a3d4:	mov	r1, #8
   1a3d8:	mov	r2, r7
   1a3dc:	bl	1e954 <__assert_fail@plt+0xcec8>
   1a3e0:	mov	r5, r0
   1a3e4:	mov	r0, #1
   1a3e8:	mov	r1, r9
   1a3ec:	bl	1ef14 <__assert_fail@plt+0xd488>
   1a3f0:	str	r0, [sp]
   1a3f4:	mov	r0, #0
   1a3f8:	mov	r1, #0
   1a3fc:	mov	r2, r4
   1a400:	mov	r3, r5
   1a404:	bl	117d4 <error@plt>
   1a408:	ldr	r2, [fp, #8]
   1a40c:	mov	r0, sl
   1a410:	mov	r1, r8
   1a414:	bl	1a110 <__assert_fail@plt+0x8684>
   1a418:	blx	r6
   1a41c:	mvn	r6, #0
   1a420:	mov	r0, r6
   1a424:	sub	sp, fp, #28
   1a428:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a42c:	ldr	r8, [sp, #16]
   1a430:	ldr	sl, [sp, #4]
   1a434:	ldr	r9, [sp, #8]
   1a438:	mov	r6, r5
   1a43c:	cmn	r6, #1
   1a440:	bgt	1a420 <__assert_fail@plt+0x8994>
   1a444:	b	1a398 <__assert_fail@plt+0x890c>
   1a448:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a44c:	add	fp, sp, #24
   1a450:	ldr	r6, [r1]
   1a454:	cmp	r6, #0
   1a458:	beq	1a4bc <__assert_fail@plt+0x8a30>
   1a45c:	mov	r8, r1
   1a460:	mov	r7, r2
   1a464:	mov	r1, r2
   1a468:	mov	r2, r3
   1a46c:	mov	r4, r3
   1a470:	mov	r9, r0
   1a474:	bl	118a0 <bcmp@plt>
   1a478:	cmp	r0, #0
   1a47c:	beq	1a4b4 <__assert_fail@plt+0x8a28>
   1a480:	add	r7, r7, r4
   1a484:	add	r5, r8, #4
   1a488:	ldr	r6, [r5]
   1a48c:	cmp	r6, #0
   1a490:	beq	1a4bc <__assert_fail@plt+0x8a30>
   1a494:	mov	r0, r9
   1a498:	mov	r1, r7
   1a49c:	mov	r2, r4
   1a4a0:	bl	118a0 <bcmp@plt>
   1a4a4:	add	r7, r7, r4
   1a4a8:	add	r5, r5, #4
   1a4ac:	cmp	r0, #0
   1a4b0:	bne	1a488 <__assert_fail@plt+0x89fc>
   1a4b4:	mov	r0, r6
   1a4b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a4bc:	mov	r6, #0
   1a4c0:	mov	r0, r6
   1a4c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a4c8:	movw	r1, #17000	; 0x4268
   1a4cc:	movt	r1, #3
   1a4d0:	str	r0, [r1]
   1a4d4:	bx	lr
   1a4d8:	movw	r1, #17004	; 0x426c
   1a4dc:	movt	r1, #3
   1a4e0:	strb	r0, [r1]
   1a4e4:	bx	lr
   1a4e8:	push	{r4, r5, r6, sl, fp, lr}
   1a4ec:	add	fp, sp, #16
   1a4f0:	sub	sp, sp, #8
   1a4f4:	movw	r0, #16868	; 0x41e4
   1a4f8:	movt	r0, #3
   1a4fc:	ldr	r0, [r0]
   1a500:	bl	214ac <__assert_fail@plt+0xfa20>
   1a504:	cmp	r0, #0
   1a508:	beq	1a530 <__assert_fail@plt+0x8aa4>
   1a50c:	movw	r0, #17004	; 0x426c
   1a510:	movt	r0, #3
   1a514:	ldrb	r0, [r0]
   1a518:	cmp	r0, #0
   1a51c:	beq	1a550 <__assert_fail@plt+0x8ac4>
   1a520:	bl	118e8 <__errno_location@plt>
   1a524:	ldr	r0, [r0]
   1a528:	cmp	r0, #32
   1a52c:	bne	1a550 <__assert_fail@plt+0x8ac4>
   1a530:	movw	r0, #16864	; 0x41e0
   1a534:	movt	r0, #3
   1a538:	ldr	r0, [r0]
   1a53c:	bl	214ac <__assert_fail@plt+0xfa20>
   1a540:	cmp	r0, #0
   1a544:	subeq	sp, fp, #16
   1a548:	popeq	{r4, r5, r6, sl, fp, pc}
   1a54c:	b	1a5c0 <__assert_fail@plt+0x8b34>
   1a550:	movw	r1, #14543	; 0x38cf
   1a554:	mov	r0, #0
   1a558:	mov	r2, #5
   1a55c:	movt	r1, #2
   1a560:	bl	11720 <dcgettext@plt>
   1a564:	mov	r4, r0
   1a568:	movw	r0, #17000	; 0x4268
   1a56c:	movt	r0, #3
   1a570:	ldr	r6, [r0]
   1a574:	bl	118e8 <__errno_location@plt>
   1a578:	ldr	r5, [r0]
   1a57c:	cmp	r6, #0
   1a580:	bne	1a59c <__assert_fail@plt+0x8b10>
   1a584:	movw	r2, #11229	; 0x2bdd
   1a588:	mov	r0, #0
   1a58c:	mov	r1, r5
   1a590:	mov	r3, r4
   1a594:	movt	r2, #2
   1a598:	b	1a5bc <__assert_fail@plt+0x8b30>
   1a59c:	mov	r0, r6
   1a5a0:	bl	1eb9c <__assert_fail@plt+0xd110>
   1a5a4:	movw	r2, #14555	; 0x38db
   1a5a8:	mov	r3, r0
   1a5ac:	str	r4, [sp]
   1a5b0:	mov	r0, #0
   1a5b4:	mov	r1, r5
   1a5b8:	movt	r2, #2
   1a5bc:	bl	117d4 <error@plt>
   1a5c0:	movw	r0, #16780	; 0x418c
   1a5c4:	movt	r0, #3
   1a5c8:	ldr	r0, [r0]
   1a5cc:	bl	116fc <_exit@plt>
   1a5d0:	push	{fp, lr}
   1a5d4:	mov	fp, sp
   1a5d8:	bl	1a630 <__assert_fail@plt+0x8ba4>
   1a5dc:	cmp	r0, #0
   1a5e0:	popne	{fp, pc}
   1a5e4:	bl	20474 <__assert_fail@plt+0xe9e8>
   1a5e8:	push	{r4, r5, r6, sl, fp, lr}
   1a5ec:	add	fp, sp, #16
   1a5f0:	mov	r5, r0
   1a5f4:	mov	r4, r0
   1a5f8:	ldrb	r6, [r5], #-1
   1a5fc:	bl	210d0 <__assert_fail@plt+0xf644>
   1a600:	sub	r2, r0, r4
   1a604:	sub	r0, r6, #47	; 0x2f
   1a608:	clz	r0, r0
   1a60c:	lsr	r1, r0, #5
   1a610:	mov	r0, r2
   1a614:	cmp	r2, r1
   1a618:	bls	1a62c <__assert_fail@plt+0x8ba0>
   1a61c:	ldrb	r3, [r5, r0]
   1a620:	sub	r2, r0, #1
   1a624:	cmp	r3, #47	; 0x2f
   1a628:	beq	1a610 <__assert_fail@plt+0x8b84>
   1a62c:	pop	{r4, r5, r6, sl, fp, pc}
   1a630:	push	{r4, r5, r6, sl, fp, lr}
   1a634:	add	fp, sp, #16
   1a638:	mov	r6, r0
   1a63c:	mov	r4, r0
   1a640:	ldrb	r5, [r6], #-1
   1a644:	bl	210d0 <__assert_fail@plt+0xf644>
   1a648:	sub	r1, r0, r4
   1a64c:	sub	r0, r5, #47	; 0x2f
   1a650:	clz	r0, r0
   1a654:	lsr	r0, r0, #5
   1a658:	mov	r5, r1
   1a65c:	cmp	r1, r0
   1a660:	bls	1a674 <__assert_fail@plt+0x8be8>
   1a664:	ldrb	r2, [r6, r5]
   1a668:	sub	r1, r5, #1
   1a66c:	cmp	r2, #47	; 0x2f
   1a670:	beq	1a658 <__assert_fail@plt+0x8bcc>
   1a674:	cmp	r5, #0
   1a678:	mov	r0, r5
   1a67c:	addeq	r0, r0, #1
   1a680:	add	r0, r0, #1
   1a684:	bl	2057c <__assert_fail@plt+0xeaf0>
   1a688:	mov	r6, r0
   1a68c:	cmp	r0, #0
   1a690:	beq	1a6bc <__assert_fail@plt+0x8c30>
   1a694:	mov	r0, r6
   1a698:	mov	r1, r4
   1a69c:	mov	r2, r5
   1a6a0:	bl	11708 <memcpy@plt>
   1a6a4:	cmp	r5, #0
   1a6a8:	moveq	r0, #46	; 0x2e
   1a6ac:	moveq	r5, #1
   1a6b0:	strbeq	r0, [r6]
   1a6b4:	mov	r0, #0
   1a6b8:	strb	r0, [r6, r5]
   1a6bc:	mov	r0, r6
   1a6c0:	pop	{r4, r5, r6, sl, fp, pc}
   1a6c4:	ldr	r1, [r0, #16]
   1a6c8:	and	r1, r1, #61440	; 0xf000
   1a6cc:	sub	r1, r1, #4096	; 0x1000
   1a6d0:	lsr	r2, r1, #12
   1a6d4:	cmp	r2, #11
   1a6d8:	bhi	1a734 <__assert_fail@plt+0x8ca8>
   1a6dc:	movw	r1, #14428	; 0x385c
   1a6e0:	add	r3, pc, #4
   1a6e4:	movt	r1, #2
   1a6e8:	ldr	pc, [r3, r2, lsl #2]
   1a6ec:	andeq	sl, r1, ip, lsl r7
   1a6f0:	andeq	sl, r1, r8, lsr #14
   1a6f4:	andeq	sl, r1, r4, lsr r7
   1a6f8:	andeq	sl, r1, r0, lsl #15
   1a6fc:	andeq	sl, r1, r4, lsr r7
   1a700:	andeq	sl, r1, r0, asr #14
   1a704:	andeq	sl, r1, r4, lsr r7
   1a708:	andeq	sl, r1, r4, ror #14
   1a70c:	andeq	sl, r1, r4, lsr r7
   1a710:	andeq	sl, r1, ip, asr #14
   1a714:	andeq	sl, r1, r4, lsr r7
   1a718:	andeq	sl, r1, r8, asr r7
   1a71c:	movw	r1, #14650	; 0x393a
   1a720:	movt	r1, #2
   1a724:	b	1a780 <__assert_fail@plt+0x8cf4>
   1a728:	movw	r1, #14627	; 0x3923
   1a72c:	movt	r1, #2
   1a730:	b	1a780 <__assert_fail@plt+0x8cf4>
   1a734:	movw	r1, #14662	; 0x3946
   1a738:	movt	r1, #2
   1a73c:	b	1a780 <__assert_fail@plt+0x8cf4>
   1a740:	movw	r1, #14608	; 0x3910
   1a744:	movt	r1, #2
   1a748:	b	1a780 <__assert_fail@plt+0x8cf4>
   1a74c:	movw	r1, #14594	; 0x3902
   1a750:	movt	r1, #2
   1a754:	b	1a780 <__assert_fail@plt+0x8cf4>
   1a758:	movw	r1, #14655	; 0x393f
   1a75c:	movt	r1, #2
   1a760:	b	1a780 <__assert_fail@plt+0x8cf4>
   1a764:	ldrd	r0, [r0, #48]	; 0x30
   1a768:	orrs	r0, r0, r1
   1a76c:	movw	r0, #14562	; 0x38e2
   1a770:	movw	r1, #14581	; 0x38f5
   1a774:	movt	r0, #2
   1a778:	movt	r1, #2
   1a77c:	moveq	r1, r0
   1a780:	mov	r0, #0
   1a784:	mov	r2, #5
   1a788:	b	11720 <dcgettext@plt>
   1a78c:	push	{fp, lr}
   1a790:	mov	fp, sp
   1a794:	and	r2, r0, #61440	; 0xf000
   1a798:	sub	r2, r2, #4096	; 0x1000
   1a79c:	lsr	r3, r2, #12
   1a7a0:	cmp	r3, #11
   1a7a4:	bhi	1a7f4 <__assert_fail@plt+0x8d68>
   1a7a8:	add	r2, pc, #4
   1a7ac:	mov	ip, #45	; 0x2d
   1a7b0:	ldr	pc, [r2, r3, lsl #2]
   1a7b4:	andeq	sl, r1, r4, ror #15
   1a7b8:	andeq	sl, r1, ip, ror #15
   1a7bc:	strdeq	sl, [r1], -r4
   1a7c0:	strdeq	sl, [r1], -ip
   1a7c4:	strdeq	sl, [r1], -r4
   1a7c8:	andeq	sl, r1, r4, lsl r8
   1a7cc:	strdeq	sl, [r1], -r4
   1a7d0:	andeq	sl, r1, r8, lsl r8
   1a7d4:	strdeq	sl, [r1], -r4
   1a7d8:	andeq	sl, r1, r4, lsl #16
   1a7dc:	strdeq	sl, [r1], -r4
   1a7e0:	andeq	sl, r1, ip, lsl #16
   1a7e4:	mov	ip, #112	; 0x70
   1a7e8:	b	1a818 <__assert_fail@plt+0x8d8c>
   1a7ec:	mov	ip, #99	; 0x63
   1a7f0:	b	1a818 <__assert_fail@plt+0x8d8c>
   1a7f4:	mov	ip, #63	; 0x3f
   1a7f8:	b	1a818 <__assert_fail@plt+0x8d8c>
   1a7fc:	mov	ip, #100	; 0x64
   1a800:	b	1a818 <__assert_fail@plt+0x8d8c>
   1a804:	mov	ip, #108	; 0x6c
   1a808:	b	1a818 <__assert_fail@plt+0x8d8c>
   1a80c:	mov	ip, #115	; 0x73
   1a810:	b	1a818 <__assert_fail@plt+0x8d8c>
   1a814:	mov	ip, #98	; 0x62
   1a818:	tst	r0, #2
   1a81c:	mov	r3, #119	; 0x77
   1a820:	mov	r2, #32
   1a824:	mov	lr, #45	; 0x2d
   1a828:	movweq	r3, #45	; 0x2d
   1a82c:	tst	r0, #4
   1a830:	strh	r2, [r1, #10]
   1a834:	mov	r2, #114	; 0x72
   1a838:	strb	ip, [r1]
   1a83c:	mov	ip, #119	; 0x77
   1a840:	movweq	r2, #45	; 0x2d
   1a844:	tst	r0, #16
   1a848:	strb	r3, [r1, #8]
   1a84c:	mov	r3, #114	; 0x72
   1a850:	strb	r2, [r1, #7]
   1a854:	mov	r2, #119	; 0x77
   1a858:	movweq	r2, #45	; 0x2d
   1a85c:	tst	r0, #32
   1a860:	strb	r2, [r1, #5]
   1a864:	mov	r2, #114	; 0x72
   1a868:	movweq	r2, #45	; 0x2d
   1a86c:	tst	r0, #128	; 0x80
   1a870:	movweq	ip, #45	; 0x2d
   1a874:	tst	r0, #256	; 0x100
   1a878:	strb	r2, [r1, #4]
   1a87c:	movweq	r3, #45	; 0x2d
   1a880:	ands	r2, r0, #1
   1a884:	strb	ip, [r1, #2]
   1a888:	mov	r2, #84	; 0x54
   1a88c:	mov	ip, #45	; 0x2d
   1a890:	strb	r3, [r1, #1]
   1a894:	mov	r3, #45	; 0x2d
   1a898:	movwne	r3, #120	; 0x78
   1a89c:	movwne	r2, #116	; 0x74
   1a8a0:	tst	r0, #512	; 0x200
   1a8a4:	moveq	r2, r3
   1a8a8:	mov	r3, #83	; 0x53
   1a8ac:	strb	r2, [r1, #9]
   1a8b0:	ands	r2, r0, #8
   1a8b4:	mov	r2, #83	; 0x53
   1a8b8:	movwne	lr, #120	; 0x78
   1a8bc:	movwne	r2, #115	; 0x73
   1a8c0:	tst	r0, #1024	; 0x400
   1a8c4:	moveq	r2, lr
   1a8c8:	strb	r2, [r1, #6]
   1a8cc:	ands	r2, r0, #64	; 0x40
   1a8d0:	movwne	ip, #120	; 0x78
   1a8d4:	movwne	r3, #115	; 0x73
   1a8d8:	tst	r0, #2048	; 0x800
   1a8dc:	moveq	r3, ip
   1a8e0:	strb	r3, [r1, #3]
   1a8e4:	pop	{fp, pc}
   1a8e8:	ldr	r0, [r0, #16]
   1a8ec:	b	1a78c <__assert_fail@plt+0x8d00>
   1a8f0:	push	{r4, r5, r6, sl, fp, lr}
   1a8f4:	add	fp, sp, #16
   1a8f8:	mov	r4, r0
   1a8fc:	bl	118e8 <__errno_location@plt>
   1a900:	ldr	r6, [r0]
   1a904:	mov	r5, r0
   1a908:	mov	r0, r4
   1a90c:	bl	116f0 <free@plt>
   1a910:	str	r6, [r5]
   1a914:	pop	{r4, r5, r6, sl, fp, pc}
   1a918:	push	{r4, r5, r6, sl, fp, lr}
   1a91c:	add	fp, sp, #16
   1a920:	mov	r5, r0
   1a924:	mov	r0, #0
   1a928:	mov	r4, r1
   1a92c:	add	r6, r2, #19
   1a930:	cmp	r1, #0
   1a934:	strb	r0, [r2, #20]
   1a938:	bmi	1a988 <__assert_fail@plt+0x8efc>
   1a93c:	mov	r0, r5
   1a940:	mov	r1, r4
   1a944:	mov	r2, #10
   1a948:	mov	r3, #0
   1a94c:	bl	21c68 <__assert_fail@plt+0x101dc>
   1a950:	add	r2, r0, r0, lsl #2
   1a954:	sub	r2, r5, r2, lsl #1
   1a958:	add	r2, r2, #48	; 0x30
   1a95c:	strb	r2, [r6], #-1
   1a960:	adds	r2, r5, #9
   1a964:	mov	r5, r0
   1a968:	adc	r3, r4, #0
   1a96c:	rsbs	r2, r2, #18
   1a970:	mov	r4, r1
   1a974:	rscs	r2, r3, #0
   1a978:	bcc	1a93c <__assert_fail@plt+0x8eb0>
   1a97c:	add	r6, r6, #1
   1a980:	mov	r0, r6
   1a984:	pop	{r4, r5, r6, sl, fp, pc}
   1a988:	mov	r0, r5
   1a98c:	mov	r1, r4
   1a990:	mov	r2, #10
   1a994:	mov	r3, #0
   1a998:	bl	21c68 <__assert_fail@plt+0x101dc>
   1a99c:	add	r2, r0, r0, lsl #2
   1a9a0:	rsb	r2, r5, r2, lsl #1
   1a9a4:	add	r2, r2, #48	; 0x30
   1a9a8:	strb	r2, [r6], #-1
   1a9ac:	adds	r2, r5, #9
   1a9b0:	mov	r5, r0
   1a9b4:	adc	r3, r4, #0
   1a9b8:	rsbs	r2, r2, #18
   1a9bc:	mov	r4, r1
   1a9c0:	rscs	r2, r3, #0
   1a9c4:	bcc	1a988 <__assert_fail@plt+0x8efc>
   1a9c8:	mov	r0, #45	; 0x2d
   1a9cc:	strb	r0, [r6]
   1a9d0:	mov	r0, r6
   1a9d4:	pop	{r4, r5, r6, sl, fp, pc}
   1a9d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a9dc:	add	fp, sp, #28
   1a9e0:	sub	sp, sp, #36	; 0x24
   1a9e4:	movw	r0, #14673	; 0x3951
   1a9e8:	movw	r1, #14744	; 0x3998
   1a9ec:	movt	r0, #2
   1a9f0:	movt	r1, #2
   1a9f4:	bl	11a08 <fopen64@plt>
   1a9f8:	cmp	r0, #0
   1a9fc:	beq	1b180 <__assert_fail@plt+0x96f4>
   1aa00:	mov	r3, r0
   1aa04:	mov	r0, #0
   1aa08:	add	r1, sp, #24
   1aa0c:	mov	r2, #10
   1aa10:	str	r0, [sp, #28]
   1aa14:	str	r0, [sp, #24]
   1aa18:	add	r0, sp, #28
   1aa1c:	mov	r9, r3
   1aa20:	bl	1169c <__getdelim@plt>
   1aa24:	cmn	r0, #1
   1aa28:	beq	1b554 <__assert_fail@plt+0x9ac8>
   1aa2c:	movw	r8, #14694	; 0x3966
   1aa30:	add	r0, sp, #32
   1aa34:	add	sl, sp, #12
   1aa38:	add	r6, sp, #20
   1aa3c:	add	r7, sp, #16
   1aa40:	add	r5, sp, #28
   1aa44:	add	r4, sp, #24
   1aa48:	str	r9, [sp, #4]
   1aa4c:	movt	r8, #2
   1aa50:	str	r0, [sp, #8]
   1aa54:	b	1aa88 <__assert_fail@plt+0x8ffc>
   1aa58:	add	r6, sp, #20
   1aa5c:	add	r7, sp, #16
   1aa60:	add	r5, sp, #28
   1aa64:	add	r4, sp, #24
   1aa68:	mov	r3, r9
   1aa6c:	mov	r0, r5
   1aa70:	mov	r1, r4
   1aa74:	mov	r2, #10
   1aa78:	mov	r9, r3
   1aa7c:	bl	1169c <__getdelim@plt>
   1aa80:	cmn	r0, #1
   1aa84:	beq	1b55c <__assert_fail@plt+0x9ad0>
   1aa88:	ldr	r0, [sp, #28]
   1aa8c:	mov	r1, r8
   1aa90:	mov	r2, r6
   1aa94:	mov	r3, r7
   1aa98:	str	sl, [sp]
   1aa9c:	bl	119cc <sscanf@plt>
   1aaa0:	orr	r0, r0, #1
   1aaa4:	cmp	r0, #3
   1aaa8:	bne	1aa68 <__assert_fail@plt+0x8fdc>
   1aaac:	ldr	r0, [sp, #12]
   1aab0:	ldr	r1, [sp, #28]
   1aab4:	add	r0, r1, r0
   1aab8:	mov	r1, #32
   1aabc:	mov	r5, r0
   1aac0:	bl	118b8 <strchr@plt>
   1aac4:	cmp	r0, #0
   1aac8:	beq	1aa58 <__assert_fail@plt+0x8fcc>
   1aacc:	mov	r6, r0
   1aad0:	mov	r4, #0
   1aad4:	mov	r1, #32
   1aad8:	strb	r4, [r6], #1
   1aadc:	mov	r0, r6
   1aae0:	bl	118b8 <strchr@plt>
   1aae4:	cmp	r0, #0
   1aae8:	beq	1aa58 <__assert_fail@plt+0x8fcc>
   1aaec:	movw	r1, #14711	; 0x3977
   1aaf0:	strb	r4, [r0], #1
   1aaf4:	movt	r1, #2
   1aaf8:	bl	20600 <__assert_fail@plt+0xeb74>
   1aafc:	cmp	r0, #0
   1ab00:	beq	1aa58 <__assert_fail@plt+0x8fcc>
   1ab04:	add	sl, r0, #3
   1ab08:	mov	r1, #32
   1ab0c:	mov	r0, sl
   1ab10:	bl	118b8 <strchr@plt>
   1ab14:	cmp	r0, #0
   1ab18:	beq	1abd8 <__assert_fail@plt+0x914c>
   1ab1c:	mov	r9, r0
   1ab20:	mov	r4, #0
   1ab24:	mov	r1, #32
   1ab28:	strb	r4, [r9], #1
   1ab2c:	mov	r0, r9
   1ab30:	bl	118b8 <strchr@plt>
   1ab34:	cmp	r0, #0
   1ab38:	beq	1abd8 <__assert_fail@plt+0x914c>
   1ab3c:	strb	r4, [r0]
   1ab40:	mov	r0, r9
   1ab44:	bl	118ac <strlen@plt>
   1ab48:	adds	r0, r0, #1
   1ab4c:	mov	r8, r5
   1ab50:	bcs	1abf0 <__assert_fail@plt+0x9164>
   1ab54:	mov	r2, #0
   1ab58:	mov	r1, r9
   1ab5c:	b	1ab70 <__assert_fail@plt+0x90e4>
   1ab60:	add	r2, r2, #1
   1ab64:	strb	r3, [r1], #1
   1ab68:	cmp	r2, r0
   1ab6c:	bcs	1abf0 <__assert_fail@plt+0x9164>
   1ab70:	ldrb	r3, [r9, r2]
   1ab74:	add	r7, r2, #4
   1ab78:	cmp	r7, r0
   1ab7c:	bcs	1ab60 <__assert_fail@plt+0x90d4>
   1ab80:	cmp	r3, #92	; 0x5c
   1ab84:	bne	1ab60 <__assert_fail@plt+0x90d4>
   1ab88:	add	r7, r2, r9
   1ab8c:	ldrb	r5, [r7, #1]
   1ab90:	and	r4, r5, #252	; 0xfc
   1ab94:	cmp	r4, #48	; 0x30
   1ab98:	bne	1ab60 <__assert_fail@plt+0x90d4>
   1ab9c:	ldrb	r4, [r7, #2]
   1aba0:	and	r7, r4, #248	; 0xf8
   1aba4:	cmp	r7, #48	; 0x30
   1aba8:	bne	1ab60 <__assert_fail@plt+0x90d4>
   1abac:	add	ip, r2, #3
   1abb0:	ldrb	lr, [r9, ip]
   1abb4:	and	r7, lr, #248	; 0xf8
   1abb8:	cmp	r7, #48	; 0x30
   1abbc:	bne	1ab60 <__assert_fail@plt+0x90d4>
   1abc0:	lsl	r2, r5, #6
   1abc4:	add	r2, r2, r4, lsl #3
   1abc8:	add	r2, r2, lr
   1abcc:	add	r3, r2, #80	; 0x50
   1abd0:	mov	r2, ip
   1abd4:	b	1ab60 <__assert_fail@plt+0x90d4>
   1abd8:	ldr	r3, [sp, #4]
   1abdc:	movw	r8, #14694	; 0x3966
   1abe0:	add	sl, sp, #12
   1abe4:	add	r6, sp, #20
   1abe8:	movt	r8, #2
   1abec:	b	1b170 <__assert_fail@plt+0x96e4>
   1abf0:	mov	r0, r6
   1abf4:	bl	118ac <strlen@plt>
   1abf8:	adds	r0, r0, #1
   1abfc:	bcs	1ac84 <__assert_fail@plt+0x91f8>
   1ac00:	mov	r2, #0
   1ac04:	mov	r1, r6
   1ac08:	b	1ac1c <__assert_fail@plt+0x9190>
   1ac0c:	add	r2, r2, #1
   1ac10:	strb	r3, [r1], #1
   1ac14:	cmp	r2, r0
   1ac18:	bcs	1ac84 <__assert_fail@plt+0x91f8>
   1ac1c:	ldrb	r3, [r6, r2]
   1ac20:	add	r7, r2, #4
   1ac24:	cmp	r7, r0
   1ac28:	bcs	1ac0c <__assert_fail@plt+0x9180>
   1ac2c:	cmp	r3, #92	; 0x5c
   1ac30:	bne	1ac0c <__assert_fail@plt+0x9180>
   1ac34:	add	r7, r2, r6
   1ac38:	ldrb	r5, [r7, #1]
   1ac3c:	and	r4, r5, #252	; 0xfc
   1ac40:	cmp	r4, #48	; 0x30
   1ac44:	bne	1ac0c <__assert_fail@plt+0x9180>
   1ac48:	ldrb	r4, [r7, #2]
   1ac4c:	and	r7, r4, #248	; 0xf8
   1ac50:	cmp	r7, #48	; 0x30
   1ac54:	bne	1ac0c <__assert_fail@plt+0x9180>
   1ac58:	add	ip, r2, #3
   1ac5c:	ldrb	lr, [r6, ip]
   1ac60:	and	r7, lr, #248	; 0xf8
   1ac64:	cmp	r7, #48	; 0x30
   1ac68:	bne	1ac0c <__assert_fail@plt+0x9180>
   1ac6c:	lsl	r2, r5, #6
   1ac70:	add	r2, r2, r4, lsl #3
   1ac74:	add	r2, r2, lr
   1ac78:	add	r3, r2, #80	; 0x50
   1ac7c:	mov	r2, ip
   1ac80:	b	1ac0c <__assert_fail@plt+0x9180>
   1ac84:	mov	r0, r8
   1ac88:	bl	118ac <strlen@plt>
   1ac8c:	adds	r0, r0, #1
   1ac90:	bcs	1ad18 <__assert_fail@plt+0x928c>
   1ac94:	mov	r2, #0
   1ac98:	mov	r1, r8
   1ac9c:	b	1acb0 <__assert_fail@plt+0x9224>
   1aca0:	add	r2, r2, #1
   1aca4:	strb	r3, [r1], #1
   1aca8:	cmp	r2, r0
   1acac:	bcs	1ad18 <__assert_fail@plt+0x928c>
   1acb0:	ldrb	r3, [r8, r2]
   1acb4:	add	r7, r2, #4
   1acb8:	cmp	r7, r0
   1acbc:	bcs	1aca0 <__assert_fail@plt+0x9214>
   1acc0:	cmp	r3, #92	; 0x5c
   1acc4:	bne	1aca0 <__assert_fail@plt+0x9214>
   1acc8:	add	r7, r2, r8
   1accc:	ldrb	r5, [r7, #1]
   1acd0:	and	r4, r5, #252	; 0xfc
   1acd4:	cmp	r4, #48	; 0x30
   1acd8:	bne	1aca0 <__assert_fail@plt+0x9214>
   1acdc:	ldrb	r4, [r7, #2]
   1ace0:	and	r7, r4, #248	; 0xf8
   1ace4:	cmp	r7, #48	; 0x30
   1ace8:	bne	1aca0 <__assert_fail@plt+0x9214>
   1acec:	add	ip, r2, #3
   1acf0:	ldrb	lr, [r8, ip]
   1acf4:	and	r7, lr, #248	; 0xf8
   1acf8:	cmp	r7, #48	; 0x30
   1acfc:	bne	1aca0 <__assert_fail@plt+0x9214>
   1ad00:	lsl	r2, r5, #6
   1ad04:	add	r2, r2, r4, lsl #3
   1ad08:	add	r2, r2, lr
   1ad0c:	add	r3, r2, #80	; 0x50
   1ad10:	mov	r2, ip
   1ad14:	b	1aca0 <__assert_fail@plt+0x9214>
   1ad18:	mov	r0, sl
   1ad1c:	bl	118ac <strlen@plt>
   1ad20:	adds	r0, r0, #1
   1ad24:	bcs	1adac <__assert_fail@plt+0x9320>
   1ad28:	mov	r2, #0
   1ad2c:	mov	r1, sl
   1ad30:	b	1ad44 <__assert_fail@plt+0x92b8>
   1ad34:	add	r2, r2, #1
   1ad38:	strb	r3, [r1], #1
   1ad3c:	cmp	r2, r0
   1ad40:	bcs	1adac <__assert_fail@plt+0x9320>
   1ad44:	ldrb	r3, [sl, r2]
   1ad48:	add	r7, r2, #4
   1ad4c:	cmp	r7, r0
   1ad50:	bcs	1ad34 <__assert_fail@plt+0x92a8>
   1ad54:	cmp	r3, #92	; 0x5c
   1ad58:	bne	1ad34 <__assert_fail@plt+0x92a8>
   1ad5c:	add	r7, r2, sl
   1ad60:	ldrb	r5, [r7, #1]
   1ad64:	and	r4, r5, #252	; 0xfc
   1ad68:	cmp	r4, #48	; 0x30
   1ad6c:	bne	1ad34 <__assert_fail@plt+0x92a8>
   1ad70:	ldrb	r4, [r7, #2]
   1ad74:	and	r7, r4, #248	; 0xf8
   1ad78:	cmp	r7, #48	; 0x30
   1ad7c:	bne	1ad34 <__assert_fail@plt+0x92a8>
   1ad80:	add	ip, r2, #3
   1ad84:	ldrb	lr, [sl, ip]
   1ad88:	and	r7, lr, #248	; 0xf8
   1ad8c:	cmp	r7, #48	; 0x30
   1ad90:	bne	1ad34 <__assert_fail@plt+0x92a8>
   1ad94:	lsl	r2, r5, #6
   1ad98:	add	r2, r2, r4, lsl #3
   1ad9c:	add	r2, r2, lr
   1ada0:	add	r3, r2, #80	; 0x50
   1ada4:	mov	r2, ip
   1ada8:	b	1ad34 <__assert_fail@plt+0x92a8>
   1adac:	mov	r0, #32
   1adb0:	bl	1ff38 <__assert_fail@plt+0xe4ac>
   1adb4:	mov	r7, r0
   1adb8:	mov	r0, r9
   1adbc:	bl	2043c <__assert_fail@plt+0xe9b0>
   1adc0:	str	r0, [r7]
   1adc4:	mov	r0, r6
   1adc8:	bl	2043c <__assert_fail@plt+0xe9b0>
   1adcc:	str	r0, [r7, #4]
   1add0:	mov	r0, r8
   1add4:	bl	2043c <__assert_fail@plt+0xe9b0>
   1add8:	str	r0, [r7, #8]
   1addc:	mov	r0, sl
   1ade0:	bl	2043c <__assert_fail@plt+0xe9b0>
   1ade4:	str	r0, [r7, #12]
   1ade8:	mov	r6, r0
   1adec:	ldr	r2, [sp, #20]
   1adf0:	ldrb	r0, [r7, #24]
   1adf4:	mov	r3, r2
   1adf8:	orr	r4, r0, #4
   1adfc:	ldr	r0, [sp, #16]
   1ae00:	bfc	r3, #0, #12
   1ae04:	strb	r4, [r7, #24]
   1ae08:	bic	r1, r0, #255	; 0xff
   1ae0c:	uxtb	r0, r0
   1ae10:	orr	r3, r3, r1, lsr #20
   1ae14:	bfi	r0, r2, #8, #12
   1ae18:	str	r3, [r7, #20]
   1ae1c:	orr	r0, r0, r1, lsl #12
   1ae20:	movw	r1, #13041	; 0x32f1
   1ae24:	movt	r1, #2
   1ae28:	str	r0, [r7, #16]
   1ae2c:	mov	r0, r6
   1ae30:	bl	116b4 <strcmp@plt>
   1ae34:	cmp	r0, #0
   1ae38:	mov	r8, #1
   1ae3c:	mov	r0, #1
   1ae40:	beq	1afac <__assert_fail@plt+0x9520>
   1ae44:	movw	r1, #13572	; 0x3504
   1ae48:	mov	r0, r6
   1ae4c:	movt	r1, #2
   1ae50:	bl	116b4 <strcmp@plt>
   1ae54:	cmp	r0, #0
   1ae58:	mov	r0, #1
   1ae5c:	beq	1afac <__assert_fail@plt+0x9520>
   1ae60:	movw	r1, #14715	; 0x397b
   1ae64:	mov	r0, r6
   1ae68:	movt	r1, #2
   1ae6c:	bl	116b4 <strcmp@plt>
   1ae70:	cmp	r0, #0
   1ae74:	mov	r0, #1
   1ae78:	beq	1afac <__assert_fail@plt+0x9520>
   1ae7c:	movw	r1, #13185	; 0x3381
   1ae80:	mov	r0, r6
   1ae84:	movt	r1, #2
   1ae88:	bl	116b4 <strcmp@plt>
   1ae8c:	cmp	r0, #0
   1ae90:	mov	r0, #1
   1ae94:	beq	1afac <__assert_fail@plt+0x9520>
   1ae98:	movw	r1, #13200	; 0x3390
   1ae9c:	mov	r0, r6
   1aea0:	movt	r1, #2
   1aea4:	bl	116b4 <strcmp@plt>
   1aea8:	cmp	r0, #0
   1aeac:	mov	r0, #1
   1aeb0:	beq	1afac <__assert_fail@plt+0x9520>
   1aeb4:	movw	r1, #13292	; 0x33ec
   1aeb8:	mov	r0, r6
   1aebc:	movt	r1, #2
   1aec0:	bl	116b4 <strcmp@plt>
   1aec4:	cmp	r0, #0
   1aec8:	mov	r0, #1
   1aecc:	beq	1afac <__assert_fail@plt+0x9520>
   1aed0:	movw	r1, #14721	; 0x3981
   1aed4:	mov	r0, r6
   1aed8:	movt	r1, #2
   1aedc:	bl	116b4 <strcmp@plt>
   1aee0:	cmp	r0, #0
   1aee4:	mov	r0, #1
   1aee8:	beq	1afac <__assert_fail@plt+0x9520>
   1aeec:	movw	r1, #13482	; 0x34aa
   1aef0:	mov	r0, r6
   1aef4:	movt	r1, #2
   1aef8:	bl	116b4 <strcmp@plt>
   1aefc:	cmp	r0, #0
   1af00:	mov	r0, #1
   1af04:	beq	1afac <__assert_fail@plt+0x9520>
   1af08:	movw	r1, #13615	; 0x352f
   1af0c:	mov	r0, r6
   1af10:	movt	r1, #2
   1af14:	bl	116b4 <strcmp@plt>
   1af18:	cmp	r0, #0
   1af1c:	mov	r0, #1
   1af20:	beq	1afac <__assert_fail@plt+0x9520>
   1af24:	movw	r1, #13702	; 0x3586
   1af28:	mov	r0, r6
   1af2c:	movt	r1, #2
   1af30:	bl	116b4 <strcmp@plt>
   1af34:	cmp	r0, #0
   1af38:	mov	r0, #1
   1af3c:	beq	1afac <__assert_fail@plt+0x9520>
   1af40:	movw	r1, #13747	; 0x35b3
   1af44:	mov	r0, r6
   1af48:	movt	r1, #2
   1af4c:	bl	116b4 <strcmp@plt>
   1af50:	cmp	r0, #0
   1af54:	mov	r0, #1
   1af58:	beq	1afac <__assert_fail@plt+0x9520>
   1af5c:	movw	r1, #14733	; 0x398d
   1af60:	mov	r0, r6
   1af64:	movt	r1, #2
   1af68:	bl	116b4 <strcmp@plt>
   1af6c:	cmp	r0, #0
   1af70:	mov	r0, #1
   1af74:	beq	1afac <__assert_fail@plt+0x9520>
   1af78:	movw	r1, #14740	; 0x3994
   1af7c:	mov	r0, r6
   1af80:	movt	r1, #2
   1af84:	bl	116b4 <strcmp@plt>
   1af88:	cmp	r0, #0
   1af8c:	mov	r0, #1
   1af90:	beq	1afac <__assert_fail@plt+0x9520>
   1af94:	movw	r1, #14747	; 0x399b
   1af98:	mov	r0, r6
   1af9c:	movt	r1, #2
   1afa0:	bl	116b4 <strcmp@plt>
   1afa4:	clz	r0, r0
   1afa8:	lsr	r0, r0, #5
   1afac:	bic	r1, r4, #1
   1afb0:	orr	r5, r1, r0
   1afb4:	mov	r1, #58	; 0x3a
   1afb8:	strb	r5, [r7, #24]
   1afbc:	ldr	r4, [r7]
   1afc0:	mov	r0, r4
   1afc4:	bl	118b8 <strchr@plt>
   1afc8:	ldr	r3, [sp, #4]
   1afcc:	cmp	r0, #0
   1afd0:	beq	1afdc <__assert_fail@plt+0x9550>
   1afd4:	add	r6, sp, #20
   1afd8:	b	1b148 <__assert_fail@plt+0x96bc>
   1afdc:	ldrb	r0, [r4]
   1afe0:	mov	r9, r3
   1afe4:	cmp	r0, #47	; 0x2f
   1afe8:	bne	1b040 <__assert_fail@plt+0x95b4>
   1afec:	ldrb	r0, [r4, #1]
   1aff0:	cmp	r0, #47	; 0x2f
   1aff4:	bne	1b040 <__assert_fail@plt+0x95b4>
   1aff8:	movw	r1, #14752	; 0x39a0
   1affc:	mov	r0, r6
   1b000:	movt	r1, #2
   1b004:	bl	116b4 <strcmp@plt>
   1b008:	cmp	r0, #0
   1b00c:	beq	1b140 <__assert_fail@plt+0x96b4>
   1b010:	movw	r1, #14758	; 0x39a6
   1b014:	mov	r0, r6
   1b018:	movt	r1, #2
   1b01c:	bl	116b4 <strcmp@plt>
   1b020:	cmp	r0, #0
   1b024:	beq	1b140 <__assert_fail@plt+0x96b4>
   1b028:	movw	r1, #13137	; 0x3351
   1b02c:	mov	r0, r6
   1b030:	movt	r1, #2
   1b034:	bl	116b4 <strcmp@plt>
   1b038:	cmp	r0, #0
   1b03c:	beq	1b140 <__assert_fail@plt+0x96b4>
   1b040:	movw	r1, #13007	; 0x32cf
   1b044:	mov	r0, r6
   1b048:	movt	r1, #2
   1b04c:	bl	116b4 <strcmp@plt>
   1b050:	cmp	r0, #0
   1b054:	beq	1b140 <__assert_fail@plt+0x96b4>
   1b058:	movw	r1, #13401	; 0x3459
   1b05c:	mov	r0, r6
   1b060:	movt	r1, #2
   1b064:	bl	116b4 <strcmp@plt>
   1b068:	cmp	r0, #0
   1b06c:	beq	1b140 <__assert_fail@plt+0x96b4>
   1b070:	movw	r1, #13142	; 0x3356
   1b074:	mov	r0, r6
   1b078:	movt	r1, #2
   1b07c:	bl	116b4 <strcmp@plt>
   1b080:	cmp	r0, #0
   1b084:	beq	1b140 <__assert_fail@plt+0x96b4>
   1b088:	movw	r1, #14763	; 0x39ab
   1b08c:	mov	r0, r6
   1b090:	movt	r1, #2
   1b094:	bl	116b4 <strcmp@plt>
   1b098:	cmp	r0, #0
   1b09c:	beq	1b140 <__assert_fail@plt+0x96b4>
   1b0a0:	movw	r1, #13278	; 0x33de
   1b0a4:	mov	r0, r6
   1b0a8:	movt	r1, #2
   1b0ac:	bl	116b4 <strcmp@plt>
   1b0b0:	cmp	r0, #0
   1b0b4:	beq	1b140 <__assert_fail@plt+0x96b4>
   1b0b8:	movw	r1, #13317	; 0x3405
   1b0bc:	mov	r0, r6
   1b0c0:	movt	r1, #2
   1b0c4:	bl	116b4 <strcmp@plt>
   1b0c8:	cmp	r0, #0
   1b0cc:	beq	1b140 <__assert_fail@plt+0x96b4>
   1b0d0:	movw	r1, #13362	; 0x3432
   1b0d4:	mov	r0, r6
   1b0d8:	movt	r1, #2
   1b0dc:	bl	116b4 <strcmp@plt>
   1b0e0:	cmp	r0, #0
   1b0e4:	beq	1b140 <__assert_fail@plt+0x96b4>
   1b0e8:	movw	r1, #13532	; 0x34dc
   1b0ec:	mov	r0, r6
   1b0f0:	movt	r1, #2
   1b0f4:	bl	116b4 <strcmp@plt>
   1b0f8:	cmp	r0, #0
   1b0fc:	beq	1b140 <__assert_fail@plt+0x96b4>
   1b100:	movw	r1, #13772	; 0x35cc
   1b104:	mov	r0, r6
   1b108:	movt	r1, #2
   1b10c:	bl	116b4 <strcmp@plt>
   1b110:	cmp	r0, #0
   1b114:	add	r6, sp, #20
   1b118:	mov	r3, r9
   1b11c:	beq	1b148 <__assert_fail@plt+0x96bc>
   1b120:	movw	r0, #14774	; 0x39b6
   1b124:	mov	r1, r4
   1b128:	movt	r0, #2
   1b12c:	bl	116b4 <strcmp@plt>
   1b130:	clz	r0, r0
   1b134:	mov	r3, r9
   1b138:	lsr	r8, r0, #5
   1b13c:	b	1b148 <__assert_fail@plt+0x96bc>
   1b140:	add	r6, sp, #20
   1b144:	mov	r3, r9
   1b148:	and	r0, r5, #253	; 0xfd
   1b14c:	add	sl, sp, #12
   1b150:	orr	r0, r0, r8, lsl #1
   1b154:	movw	r8, #14694	; 0x3966
   1b158:	movt	r8, #2
   1b15c:	strb	r0, [r7, #24]
   1b160:	ldr	r0, [sp, #8]
   1b164:	str	r7, [r0]
   1b168:	add	r0, r7, #28
   1b16c:	str	r0, [sp, #8]
   1b170:	add	r7, sp, #16
   1b174:	add	r5, sp, #28
   1b178:	add	r4, sp, #24
   1b17c:	b	1aa6c <__assert_fail@plt+0x8fe0>
   1b180:	movw	r0, #14781	; 0x39bd
   1b184:	movw	r1, #12031	; 0x2eff
   1b188:	movt	r0, #2
   1b18c:	movt	r1, #2
   1b190:	bl	11a20 <setmntent@plt>
   1b194:	cmp	r0, #0
   1b198:	beq	1b5a8 <__assert_fail@plt+0x9b1c>
   1b19c:	mov	r8, r0
   1b1a0:	bl	117e0 <getmntent@plt>
   1b1a4:	cmp	r0, #0
   1b1a8:	beq	1b5b0 <__assert_fail@plt+0x9b24>
   1b1ac:	mov	r5, r0
   1b1b0:	add	sl, sp, #32
   1b1b4:	b	1b210 <__assert_fail@plt+0x9784>
   1b1b8:	bic	r1, r4, #1
   1b1bc:	orr	r4, r1, r0
   1b1c0:	mov	r1, #58	; 0x3a
   1b1c4:	strb	r4, [r9, #24]
   1b1c8:	ldr	r5, [r9]
   1b1cc:	mov	r0, r5
   1b1d0:	bl	118b8 <strchr@plt>
   1b1d4:	cmp	r0, #0
   1b1d8:	beq	1b400 <__assert_fail@plt+0x9974>
   1b1dc:	mvn	r0, #0
   1b1e0:	str	r0, [r9, #16]
   1b1e4:	str	r0, [r9, #20]
   1b1e8:	and	r0, r4, #253	; 0xfd
   1b1ec:	orr	r0, r0, r6, lsl #1
   1b1f0:	strb	r0, [r9, #24]
   1b1f4:	mov	r0, r8
   1b1f8:	str	r9, [sl]
   1b1fc:	add	sl, r9, #28
   1b200:	bl	117e0 <getmntent@plt>
   1b204:	mov	r5, r0
   1b208:	cmp	r0, #0
   1b20c:	beq	1b5b4 <__assert_fail@plt+0x9b28>
   1b210:	movw	r1, #14791	; 0x39c7
   1b214:	mov	r0, r5
   1b218:	movt	r1, #2
   1b21c:	bl	117b0 <hasmntopt@plt>
   1b220:	str	r0, [sp, #8]
   1b224:	mov	r0, #32
   1b228:	bl	1ff38 <__assert_fail@plt+0xe4ac>
   1b22c:	mov	r9, r0
   1b230:	ldr	r0, [r5]
   1b234:	bl	2043c <__assert_fail@plt+0xe9b0>
   1b238:	str	r0, [r9]
   1b23c:	ldr	r0, [r5, #4]
   1b240:	bl	2043c <__assert_fail@plt+0xe9b0>
   1b244:	str	r0, [r9, #4]
   1b248:	mov	r0, #0
   1b24c:	str	r0, [r9, #8]
   1b250:	ldr	r0, [r5, #8]
   1b254:	bl	2043c <__assert_fail@plt+0xe9b0>
   1b258:	str	r0, [r9, #12]
   1b25c:	mov	r7, r0
   1b260:	movw	r1, #13041	; 0x32f1
   1b264:	ldrb	r0, [r9, #24]
   1b268:	movt	r1, #2
   1b26c:	orr	r4, r0, #4
   1b270:	mov	r0, r7
   1b274:	strb	r4, [r9, #24]
   1b278:	bl	116b4 <strcmp@plt>
   1b27c:	cmp	r0, #0
   1b280:	mov	r6, #1
   1b284:	mov	r0, #1
   1b288:	beq	1b1b8 <__assert_fail@plt+0x972c>
   1b28c:	movw	r1, #13572	; 0x3504
   1b290:	mov	r0, r7
   1b294:	movt	r1, #2
   1b298:	bl	116b4 <strcmp@plt>
   1b29c:	cmp	r0, #0
   1b2a0:	mov	r0, #1
   1b2a4:	beq	1b1b8 <__assert_fail@plt+0x972c>
   1b2a8:	movw	r1, #14715	; 0x397b
   1b2ac:	mov	r0, r7
   1b2b0:	movt	r1, #2
   1b2b4:	bl	116b4 <strcmp@plt>
   1b2b8:	cmp	r0, #0
   1b2bc:	mov	r0, #1
   1b2c0:	beq	1b1b8 <__assert_fail@plt+0x972c>
   1b2c4:	movw	r1, #13185	; 0x3381
   1b2c8:	mov	r0, r7
   1b2cc:	movt	r1, #2
   1b2d0:	bl	116b4 <strcmp@plt>
   1b2d4:	cmp	r0, #0
   1b2d8:	mov	r0, #1
   1b2dc:	beq	1b1b8 <__assert_fail@plt+0x972c>
   1b2e0:	movw	r1, #13200	; 0x3390
   1b2e4:	mov	r0, r7
   1b2e8:	movt	r1, #2
   1b2ec:	bl	116b4 <strcmp@plt>
   1b2f0:	cmp	r0, #0
   1b2f4:	mov	r0, #1
   1b2f8:	beq	1b1b8 <__assert_fail@plt+0x972c>
   1b2fc:	movw	r1, #13292	; 0x33ec
   1b300:	mov	r0, r7
   1b304:	movt	r1, #2
   1b308:	bl	116b4 <strcmp@plt>
   1b30c:	cmp	r0, #0
   1b310:	mov	r0, #1
   1b314:	beq	1b1b8 <__assert_fail@plt+0x972c>
   1b318:	movw	r1, #14721	; 0x3981
   1b31c:	mov	r0, r7
   1b320:	movt	r1, #2
   1b324:	bl	116b4 <strcmp@plt>
   1b328:	cmp	r0, #0
   1b32c:	mov	r0, #1
   1b330:	beq	1b1b8 <__assert_fail@plt+0x972c>
   1b334:	movw	r1, #13482	; 0x34aa
   1b338:	mov	r0, r7
   1b33c:	movt	r1, #2
   1b340:	bl	116b4 <strcmp@plt>
   1b344:	cmp	r0, #0
   1b348:	mov	r0, #1
   1b34c:	beq	1b1b8 <__assert_fail@plt+0x972c>
   1b350:	movw	r1, #13615	; 0x352f
   1b354:	mov	r0, r7
   1b358:	movt	r1, #2
   1b35c:	bl	116b4 <strcmp@plt>
   1b360:	cmp	r0, #0
   1b364:	mov	r0, #1
   1b368:	beq	1b1b8 <__assert_fail@plt+0x972c>
   1b36c:	movw	r1, #13702	; 0x3586
   1b370:	mov	r0, r7
   1b374:	movt	r1, #2
   1b378:	bl	116b4 <strcmp@plt>
   1b37c:	cmp	r0, #0
   1b380:	mov	r0, #1
   1b384:	beq	1b1b8 <__assert_fail@plt+0x972c>
   1b388:	movw	r1, #13747	; 0x35b3
   1b38c:	mov	r0, r7
   1b390:	movt	r1, #2
   1b394:	bl	116b4 <strcmp@plt>
   1b398:	cmp	r0, #0
   1b39c:	mov	r0, #1
   1b3a0:	beq	1b1b8 <__assert_fail@plt+0x972c>
   1b3a4:	movw	r1, #14733	; 0x398d
   1b3a8:	mov	r0, r7
   1b3ac:	movt	r1, #2
   1b3b0:	bl	116b4 <strcmp@plt>
   1b3b4:	cmp	r0, #0
   1b3b8:	mov	r0, #1
   1b3bc:	beq	1b1b8 <__assert_fail@plt+0x972c>
   1b3c0:	movw	r1, #14740	; 0x3994
   1b3c4:	mov	r0, r7
   1b3c8:	movt	r1, #2
   1b3cc:	bl	116b4 <strcmp@plt>
   1b3d0:	cmp	r0, #0
   1b3d4:	mov	r0, #1
   1b3d8:	beq	1b1b8 <__assert_fail@plt+0x972c>
   1b3dc:	movw	r1, #14747	; 0x399b
   1b3e0:	mov	r0, r7
   1b3e4:	movt	r1, #2
   1b3e8:	bl	116b4 <strcmp@plt>
   1b3ec:	ldr	r1, [sp, #8]
   1b3f0:	orr	r0, r1, r0
   1b3f4:	clz	r0, r0
   1b3f8:	lsr	r0, r0, #5
   1b3fc:	b	1b1b8 <__assert_fail@plt+0x972c>
   1b400:	ldrb	r0, [r5]
   1b404:	cmp	r0, #47	; 0x2f
   1b408:	bne	1b460 <__assert_fail@plt+0x99d4>
   1b40c:	ldrb	r0, [r5, #1]
   1b410:	cmp	r0, #47	; 0x2f
   1b414:	bne	1b460 <__assert_fail@plt+0x99d4>
   1b418:	movw	r1, #14752	; 0x39a0
   1b41c:	mov	r0, r7
   1b420:	movt	r1, #2
   1b424:	bl	116b4 <strcmp@plt>
   1b428:	cmp	r0, #0
   1b42c:	beq	1b1dc <__assert_fail@plt+0x9750>
   1b430:	movw	r1, #14758	; 0x39a6
   1b434:	mov	r0, r7
   1b438:	movt	r1, #2
   1b43c:	bl	116b4 <strcmp@plt>
   1b440:	cmp	r0, #0
   1b444:	beq	1b1dc <__assert_fail@plt+0x9750>
   1b448:	movw	r1, #13137	; 0x3351
   1b44c:	mov	r0, r7
   1b450:	movt	r1, #2
   1b454:	bl	116b4 <strcmp@plt>
   1b458:	cmp	r0, #0
   1b45c:	beq	1b1dc <__assert_fail@plt+0x9750>
   1b460:	movw	r1, #13007	; 0x32cf
   1b464:	mov	r0, r7
   1b468:	movt	r1, #2
   1b46c:	bl	116b4 <strcmp@plt>
   1b470:	cmp	r0, #0
   1b474:	beq	1b1dc <__assert_fail@plt+0x9750>
   1b478:	movw	r1, #13401	; 0x3459
   1b47c:	mov	r0, r7
   1b480:	movt	r1, #2
   1b484:	bl	116b4 <strcmp@plt>
   1b488:	cmp	r0, #0
   1b48c:	beq	1b1dc <__assert_fail@plt+0x9750>
   1b490:	movw	r1, #13142	; 0x3356
   1b494:	mov	r0, r7
   1b498:	movt	r1, #2
   1b49c:	bl	116b4 <strcmp@plt>
   1b4a0:	cmp	r0, #0
   1b4a4:	beq	1b1dc <__assert_fail@plt+0x9750>
   1b4a8:	movw	r1, #14763	; 0x39ab
   1b4ac:	mov	r0, r7
   1b4b0:	movt	r1, #2
   1b4b4:	bl	116b4 <strcmp@plt>
   1b4b8:	cmp	r0, #0
   1b4bc:	beq	1b1dc <__assert_fail@plt+0x9750>
   1b4c0:	movw	r1, #13278	; 0x33de
   1b4c4:	mov	r0, r7
   1b4c8:	movt	r1, #2
   1b4cc:	bl	116b4 <strcmp@plt>
   1b4d0:	cmp	r0, #0
   1b4d4:	beq	1b1dc <__assert_fail@plt+0x9750>
   1b4d8:	movw	r1, #13317	; 0x3405
   1b4dc:	mov	r0, r7
   1b4e0:	movt	r1, #2
   1b4e4:	bl	116b4 <strcmp@plt>
   1b4e8:	cmp	r0, #0
   1b4ec:	beq	1b1dc <__assert_fail@plt+0x9750>
   1b4f0:	movw	r1, #13362	; 0x3432
   1b4f4:	mov	r0, r7
   1b4f8:	movt	r1, #2
   1b4fc:	bl	116b4 <strcmp@plt>
   1b500:	cmp	r0, #0
   1b504:	beq	1b1dc <__assert_fail@plt+0x9750>
   1b508:	movw	r1, #13532	; 0x34dc
   1b50c:	mov	r0, r7
   1b510:	movt	r1, #2
   1b514:	bl	116b4 <strcmp@plt>
   1b518:	cmp	r0, #0
   1b51c:	beq	1b1dc <__assert_fail@plt+0x9750>
   1b520:	movw	r1, #13772	; 0x35cc
   1b524:	mov	r0, r7
   1b528:	movt	r1, #2
   1b52c:	bl	116b4 <strcmp@plt>
   1b530:	cmp	r0, #0
   1b534:	beq	1b1dc <__assert_fail@plt+0x9750>
   1b538:	movw	r0, #14774	; 0x39b6
   1b53c:	mov	r1, r5
   1b540:	movt	r0, #2
   1b544:	bl	116b4 <strcmp@plt>
   1b548:	clz	r0, r0
   1b54c:	lsr	r6, r0, #5
   1b550:	b	1b1dc <__assert_fail@plt+0x9750>
   1b554:	add	r0, sp, #32
   1b558:	str	r0, [sp, #8]
   1b55c:	ldr	r0, [sp, #28]
   1b560:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   1b564:	ldrb	r1, [r9]
   1b568:	tst	r1, #32
   1b56c:	bne	1b588 <__assert_fail@plt+0x9afc>
   1b570:	mov	r0, r9
   1b574:	bl	21530 <__assert_fail@plt+0xfaa4>
   1b578:	ldr	sl, [sp, #8]
   1b57c:	cmn	r0, #1
   1b580:	bne	1b5c4 <__assert_fail@plt+0x9b38>
   1b584:	b	1b5d4 <__assert_fail@plt+0x9b48>
   1b588:	bl	118e8 <__errno_location@plt>
   1b58c:	ldr	r6, [r0]
   1b590:	mov	r5, r0
   1b594:	mov	r0, r9
   1b598:	bl	21530 <__assert_fail@plt+0xfaa4>
   1b59c:	ldr	sl, [sp, #8]
   1b5a0:	str	r6, [r5]
   1b5a4:	b	1b5d4 <__assert_fail@plt+0x9b48>
   1b5a8:	mov	r4, #0
   1b5ac:	b	1b648 <__assert_fail@plt+0x9bbc>
   1b5b0:	add	sl, sp, #32
   1b5b4:	mov	r0, r8
   1b5b8:	bl	11978 <endmntent@plt>
   1b5bc:	cmp	r0, #0
   1b5c0:	beq	1b5d4 <__assert_fail@plt+0x9b48>
   1b5c4:	mov	r0, #0
   1b5c8:	str	r0, [sl]
   1b5cc:	ldr	r4, [sp, #32]
   1b5d0:	b	1b648 <__assert_fail@plt+0x9bbc>
   1b5d4:	bl	118e8 <__errno_location@plt>
   1b5d8:	mov	r4, #0
   1b5dc:	ldr	r8, [r0]
   1b5e0:	mov	r5, r0
   1b5e4:	str	r4, [sl]
   1b5e8:	ldr	r6, [sp, #32]
   1b5ec:	cmp	r6, #0
   1b5f0:	bne	1b610 <__assert_fail@plt+0x9b84>
   1b5f4:	b	1b644 <__assert_fail@plt+0x9bb8>
   1b5f8:	mov	r0, r6
   1b5fc:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   1b600:	cmp	r7, #0
   1b604:	mov	r6, r7
   1b608:	str	r7, [sp, #32]
   1b60c:	beq	1b644 <__assert_fail@plt+0x9bb8>
   1b610:	ldr	r0, [r6]
   1b614:	ldr	r7, [r6, #28]
   1b618:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   1b61c:	ldr	r0, [r6, #4]
   1b620:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   1b624:	ldr	r0, [r6, #8]
   1b628:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   1b62c:	ldrb	r0, [r6, #24]
   1b630:	tst	r0, #4
   1b634:	beq	1b5f8 <__assert_fail@plt+0x9b6c>
   1b638:	ldr	r0, [r6, #12]
   1b63c:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   1b640:	b	1b5f8 <__assert_fail@plt+0x9b6c>
   1b644:	str	r8, [r5]
   1b648:	mov	r0, r4
   1b64c:	sub	sp, fp, #28
   1b650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b654:	push	{r4, sl, fp, lr}
   1b658:	add	fp, sp, #8
   1b65c:	mov	r4, r0
   1b660:	ldr	r0, [r0]
   1b664:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   1b668:	ldr	r0, [r4, #4]
   1b66c:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   1b670:	ldr	r0, [r4, #8]
   1b674:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   1b678:	ldrb	r0, [r4, #24]
   1b67c:	tst	r0, #4
   1b680:	beq	1b68c <__assert_fail@plt+0x9c00>
   1b684:	ldr	r0, [r4, #12]
   1b688:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   1b68c:	mov	r0, r4
   1b690:	pop	{r4, sl, fp, lr}
   1b694:	b	1a8f0 <__assert_fail@plt+0x8e64>
   1b698:	push	{fp, lr}
   1b69c:	mov	fp, sp
   1b6a0:	sub	sp, sp, #24
   1b6a4:	mvn	ip, #0
   1b6a8:	str	ip, [sp, #8]
   1b6ac:	mov	ip, #0
   1b6b0:	str	ip, [sp, #4]
   1b6b4:	str	ip, [sp]
   1b6b8:	ldr	ip, [fp, #12]
   1b6bc:	str	ip, [sp, #16]
   1b6c0:	ldr	ip, [fp, #8]
   1b6c4:	str	ip, [sp, #12]
   1b6c8:	bl	1b6d4 <__assert_fail@plt+0x9c48>
   1b6cc:	mov	sp, fp
   1b6d0:	pop	{fp, pc}
   1b6d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b6d8:	add	fp, sp, #28
   1b6dc:	sub	sp, sp, #140	; 0x8c
   1b6e0:	sub	sp, sp, #1024	; 0x400
   1b6e4:	mov	r4, r3
   1b6e8:	mov	r6, r2
   1b6ec:	str	r1, [sp, #104]	; 0x68
   1b6f0:	mov	r8, r0
   1b6f4:	bl	118e8 <__errno_location@plt>
   1b6f8:	mov	r2, r4
   1b6fc:	ldrb	r3, [r6]
   1b700:	str	r0, [sp, #76]	; 0x4c
   1b704:	ldr	r0, [r0]
   1b708:	movw	r5, #10686	; 0x29be
   1b70c:	ldr	r1, [r2, #8]!
   1b710:	movt	r5, #2
   1b714:	str	r0, [sp, #72]	; 0x48
   1b718:	cmp	r1, #0
   1b71c:	mov	r7, r1
   1b720:	movweq	r7, #12
   1b724:	cmp	r1, #12
   1b728:	subgt	r7, r1, #12
   1b72c:	ldr	r1, [r2, #32]
   1b730:	cmp	r1, #0
   1b734:	movne	r5, r1
   1b738:	cmp	r3, #0
   1b73c:	beq	1d284 <__assert_fail@plt+0xb7f8>
   1b740:	sub	r0, fp, #48	; 0x30
   1b744:	mvn	r1, #13
   1b748:	str	r2, [sp, #60]	; 0x3c
   1b74c:	str	r7, [sp, #56]	; 0x38
   1b750:	ldr	r7, [fp, #16]
   1b754:	movw	ip, #52428	; 0xcccc
   1b758:	sub	r9, r5, #2
   1b75c:	str	r4, [sp, #88]	; 0x58
   1b760:	mov	lr, #0
   1b764:	str	r5, [sp, #64]	; 0x40
   1b768:	sub	r1, r1, r0
   1b76c:	movt	ip, #3276	; 0xccc
   1b770:	str	r9, [sp, #32]
   1b774:	str	r1, [sp, #44]	; 0x2c
   1b778:	add	r1, sp, #112	; 0x70
   1b77c:	add	r1, r1, #1
   1b780:	str	r1, [sp, #48]	; 0x30
   1b784:	sub	r1, fp, #53	; 0x35
   1b788:	add	r2, r1, #3
   1b78c:	add	r1, r1, #2
   1b790:	str	r1, [sp, #84]	; 0x54
   1b794:	add	r1, r4, #12
   1b798:	mov	r4, #-2147483648	; 0x80000000
   1b79c:	str	r2, [sp, #68]	; 0x44
   1b7a0:	str	r1, [sp, #52]	; 0x34
   1b7a4:	sub	r1, r0, #2
   1b7a8:	str	r1, [sp, #28]
   1b7ac:	add	r1, r0, #8
   1b7b0:	str	r1, [sp, #24]
   1b7b4:	add	r1, r0, #13
   1b7b8:	add	r0, r0, #14
   1b7bc:	str	r0, [sp, #80]	; 0x50
   1b7c0:	mvn	r0, r0
   1b7c4:	str	r1, [sp, #40]	; 0x28
   1b7c8:	str	r0, [sp, #36]	; 0x24
   1b7cc:	b	1b7e8 <__assert_fail@plt+0x9d5c>
   1b7d0:	mov	r8, #0
   1b7d4:	add	lr, r5, lr
   1b7d8:	ldrb	r3, [r6, #1]!
   1b7dc:	mvn	r7, #0
   1b7e0:	cmp	r3, #0
   1b7e4:	beq	1d288 <__assert_fail@plt+0xb7fc>
   1b7e8:	uxtb	r1, r3
   1b7ec:	str	r8, [sp, #108]	; 0x6c
   1b7f0:	cmp	r1, #37	; 0x25
   1b7f4:	bne	1b89c <__assert_fail@plt+0x9e10>
   1b7f8:	mov	r0, #0
   1b7fc:	mov	r9, #0
   1b800:	mov	sl, r6
   1b804:	str	r0, [sp, #100]	; 0x64
   1b808:	ldr	r0, [fp, #8]
   1b80c:	mov	r5, r0
   1b810:	add	r1, sl, #2
   1b814:	add	sl, sl, #1
   1b818:	b	1b830 <__assert_fail@plt+0x9da4>
   1b81c:	cmp	r0, #95	; 0x5f
   1b820:	bne	1b88c <__assert_fail@plt+0x9e00>
   1b824:	add	r1, r1, #1
   1b828:	add	sl, sl, #1
   1b82c:	mov	r9, r0
   1b830:	ldrb	r0, [sl]
   1b834:	sub	r2, r0, #35	; 0x23
   1b838:	cmp	r2, #13
   1b83c:	bhi	1b81c <__assert_fail@plt+0x9d90>
   1b840:	add	r3, pc, #0
   1b844:	ldr	pc, [r3, r2, lsl #2]
   1b848:	andeq	fp, r1, r0, lsl #17
   1b84c:	andeq	fp, r1, ip, lsl #18
   1b850:	andeq	fp, r1, ip, lsl #18
   1b854:	andeq	fp, r1, ip, lsl #18
   1b858:	andeq	fp, r1, ip, lsl #18
   1b85c:	andeq	fp, r1, ip, lsl #18
   1b860:	andeq	fp, r1, ip, lsl #18
   1b864:	andeq	fp, r1, ip, lsl #18
   1b868:	andeq	fp, r1, r4, lsr #16
   1b86c:	andeq	fp, r1, ip, lsl #18
   1b870:	andeq	fp, r1, r4, lsr #16
   1b874:	andeq	fp, r1, ip, lsl #18
   1b878:	andeq	fp, r1, ip, lsl #18
   1b87c:	andeq	fp, r1, r4, lsr #16
   1b880:	mov	r0, #1
   1b884:	str	r0, [sp, #100]	; 0x64
   1b888:	b	1b810 <__assert_fail@plt+0x9d84>
   1b88c:	cmp	r0, #94	; 0x5e
   1b890:	bne	1b90c <__assert_fail@plt+0x9e80>
   1b894:	mov	r5, #1
   1b898:	b	1b810 <__assert_fail@plt+0x9d84>
   1b89c:	ldr	r0, [sp, #104]	; 0x68
   1b8a0:	bic	r1, r7, r7, asr #31
   1b8a4:	cmp	r1, #1
   1b8a8:	mov	r5, r1
   1b8ac:	movls	r5, #1
   1b8b0:	sub	r2, r0, lr
   1b8b4:	cmp	r5, r2
   1b8b8:	bcs	1d2ac <__assert_fail@plt+0xb820>
   1b8bc:	ldr	r8, [sp, #108]	; 0x6c
   1b8c0:	cmp	r8, #0
   1b8c4:	beq	1b7d0 <__assert_fail@plt+0x9d44>
   1b8c8:	cmp	r1, #2
   1b8cc:	bcc	1b904 <__assert_fail@plt+0x9e78>
   1b8d0:	sub	r4, r1, #1
   1b8d4:	mov	r0, r8
   1b8d8:	mov	r1, #32
   1b8dc:	mov	r7, lr
   1b8e0:	mov	r2, r4
   1b8e4:	bl	11918 <memset@plt>
   1b8e8:	ldr	r8, [sp, #108]	; 0x6c
   1b8ec:	ldrb	r3, [r6]
   1b8f0:	movw	ip, #52428	; 0xcccc
   1b8f4:	mov	lr, r7
   1b8f8:	movt	ip, #3276	; 0xccc
   1b8fc:	add	r8, r8, r4
   1b900:	mov	r4, #-2147483648	; 0x80000000
   1b904:	strb	r3, [r8], #1
   1b908:	b	1b7d4 <__assert_fail@plt+0x9d48>
   1b90c:	sub	r2, r0, #48	; 0x30
   1b910:	cmp	r2, #9
   1b914:	bhi	1b980 <__assert_fail@plt+0x9ef4>
   1b918:	mov	r7, #0
   1b91c:	cmn	r7, #1
   1b920:	bgt	1b958 <__assert_fail@plt+0x9ecc>
   1b924:	b	1b964 <__assert_fail@plt+0x9ed8>
   1b928:	add	r2, r7, r7, lsl #2
   1b92c:	lsl	r3, r2, #1
   1b930:	uxtab	r0, r3, r0
   1b934:	sub	r7, r0, #48	; 0x30
   1b938:	cmp	r7, r2, lsl #1
   1b93c:	mvnvs	r7, #-2147483648	; 0x80000000
   1b940:	ldrb	r0, [r1], #1
   1b944:	sub	r2, r0, #48	; 0x30
   1b948:	cmp	r2, #10
   1b94c:	bcs	1b97c <__assert_fail@plt+0x9ef0>
   1b950:	cmn	r7, #1
   1b954:	ble	1b964 <__assert_fail@plt+0x9ed8>
   1b958:	cmp	r7, ip
   1b95c:	ble	1b928 <__assert_fail@plt+0x9e9c>
   1b960:	b	1b974 <__assert_fail@plt+0x9ee8>
   1b964:	beq	1b928 <__assert_fail@plt+0x9e9c>
   1b968:	sdiv	r2, r4, r7
   1b96c:	cmp	r2, #10
   1b970:	bge	1b928 <__assert_fail@plt+0x9e9c>
   1b974:	mvn	r7, #-2147483648	; 0x80000000
   1b978:	b	1b940 <__assert_fail@plt+0x9eb4>
   1b97c:	sub	sl, r1, #1
   1b980:	cmp	r0, #79	; 0x4f
   1b984:	cmpne	r0, #69	; 0x45
   1b988:	bne	1b994 <__assert_fail@plt+0x9f08>
   1b98c:	ldrb	r1, [sl, #1]!
   1b990:	b	1b99c <__assert_fail@plt+0x9f10>
   1b994:	mov	r1, r0
   1b998:	mov	r0, #0
   1b99c:	cmp	r1, #122	; 0x7a
   1b9a0:	str	r5, [sp, #96]	; 0x60
   1b9a4:	bhi	1c3fc <__assert_fail@plt+0xa970>
   1b9a8:	movw	r8, #26215	; 0x6667
   1b9ac:	movw	r3, #14814	; 0x39de
   1b9b0:	add	r2, pc, #16
   1b9b4:	mov	r5, #0
   1b9b8:	mvn	r4, #0
   1b9bc:	movt	r8, #26214	; 0x6666
   1b9c0:	movt	r3, #2
   1b9c4:	ldr	pc, [r2, r1, lsl #2]
   1b9c8:	andeq	fp, r1, ip, lsr sp
   1b9cc:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1b9d0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1b9d4:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1b9d8:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1b9dc:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1b9e0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1b9e4:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1b9e8:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1b9ec:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1b9f0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1b9f4:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1b9f8:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1b9fc:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba00:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba04:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba08:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba0c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba10:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba14:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba18:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba1c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba20:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba24:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba28:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba2c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba30:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba34:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba38:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba3c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba40:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba44:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba48:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba4c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba50:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba54:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba58:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba5c:	andeq	fp, r1, r0, lsr sp
   1ba60:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba64:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba68:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba6c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba70:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba74:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba78:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba7c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba80:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba84:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba88:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba8c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba90:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba94:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba98:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ba9c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1baa0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1baa4:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1baa8:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1baac:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1bab0:	andeq	fp, r1, r4, asr #26
   1bab4:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1bab8:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1babc:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1bac0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1bac4:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1bac8:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1bacc:	andeq	fp, r1, ip, asr sp
   1bad0:	andeq	fp, r1, r0, lsl #27
   1bad4:	andeq	fp, r1, r4, lsr #27
   1bad8:			; <UNDEFINED> instruction: 0x0001bdb8
   1badc:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1bae0:	andeq	fp, r1, ip, asr #27
   1bae4:			; <UNDEFINED> instruction: 0x0001bbb4
   1bae8:	strdeq	fp, [r1], -r8
   1baec:	andeq	fp, r1, ip, lsl #28
   1baf0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1baf4:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1baf8:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1bafc:	andeq	fp, r1, ip, lsl lr
   1bb00:	andeq	fp, r1, r0, lsr lr
   1bb04:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1bb08:	muleq	r1, ip, lr
   1bb0c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1bb10:	ldrdeq	fp, [r1], -ip
   1bb14:	andeq	fp, r1, r0, asr #29
   1bb18:	ldrdeq	fp, [r1], -r4
   1bb1c:	andeq	fp, r1, r4, lsl #31
   1bb20:			; <UNDEFINED> instruction: 0x0001bbb4
   1bb24:			; <UNDEFINED> instruction: 0x0001bfb0
   1bb28:	strdeq	fp, [r1], -ip
   1bb2c:	andeq	ip, r1, r0, lsl r0
   1bb30:	andeq	ip, r1, ip, asr #32
   1bb34:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1bb38:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1bb3c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1bb40:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1bb44:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1bb48:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1bb4c:	andeq	ip, r1, r0, asr #1
   1bb50:	andeq	fp, r1, r0, lsl sp
   1bb54:	andeq	ip, r1, r4, ror #1
   1bb58:	strdeq	ip, [r1], -r8
   1bb5c:	andeq	ip, r1, ip, lsl #2
   1bb60:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1bb64:			; <UNDEFINED> instruction: 0x0001bbb4
   1bb68:	andeq	fp, r1, r0, lsl sp
   1bb6c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1bb70:	andeq	ip, r1, ip, lsl r1
   1bb74:	andeq	ip, r1, r8, lsr r1
   1bb78:	andeq	ip, r1, ip, asr #2
   1bb7c:	andeq	ip, r1, r4, ror #2
   1bb80:	muleq	r1, r0, r1
   1bb84:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1bb88:	andeq	fp, r1, r0, lsr #29
   1bb8c:	andeq	ip, r1, ip, ror #3
   1bb90:	ldrdeq	ip, [r1], -r8
   1bb94:	andeq	ip, r1, r4, lsl r2
   1bb98:	ldrdeq	ip, [r1], -r8
   1bb9c:	andeq	ip, r1, r4, lsr r3
   1bba0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1bba4:	andeq	ip, r1, r8, ror #6
   1bba8:	andeq	ip, r1, r0, lsl #7
   1bbac:	muleq	r1, r4, r3
   1bbb0:			; <UNDEFINED> instruction: 0x0001c3b4
   1bbb4:	cmp	r0, #69	; 0x45
   1bbb8:	beq	1c3fc <__assert_fail@plt+0xa970>
   1bbbc:	ldr	r2, [sp, #88]	; 0x58
   1bbc0:	movw	r3, #9363	; 0x2493
   1bbc4:	str	lr, [sp, #92]	; 0x5c
   1bbc8:	movw	r6, #382	; 0x17e
   1bbcc:	movt	r3, #37449	; 0x9249
   1bbd0:	ldr	r8, [r2, #24]
   1bbd4:	ldr	r5, [r2, #28]
   1bbd8:	ldr	lr, [r2, #20]
   1bbdc:	sub	r2, r5, r8
   1bbe0:	cmp	lr, #0
   1bbe4:	add	r2, r2, r6
   1bbe8:	smmla	r4, r2, r3, r2
   1bbec:	asr	r6, r4, #2
   1bbf0:	add	r4, r6, r4, lsr #31
   1bbf4:	rsb	r4, r4, r4, lsl #3
   1bbf8:	sub	r2, r4, r2
   1bbfc:	add	r2, r5, r2
   1bc00:	add	r4, r2, #3
   1bc04:	mvn	r2, #99	; 0x63
   1bc08:	movwmi	r2, #300	; 0x12c
   1bc0c:	add	r2, r2, lr
   1bc10:	cmn	r4, #1
   1bc14:	ble	1c594 <__assert_fail@plt+0xab08>
   1bc18:	movw	r6, #365	; 0x16d
   1bc1c:	tst	r2, #3
   1bc20:	bne	1bc6c <__assert_fail@plt+0xa1e0>
   1bc24:	movw	r6, #34079	; 0x851f
   1bc28:	mov	ip, #100	; 0x64
   1bc2c:	movt	r6, #20971	; 0x51eb
   1bc30:	smmul	r6, r2, r6
   1bc34:	asr	r3, r6, #5
   1bc38:	add	r3, r3, r6, lsr #31
   1bc3c:	mls	ip, r3, ip, r2
   1bc40:	asr	r3, r6, #7
   1bc44:	add	r3, r3, r6, lsr #31
   1bc48:	mov	r6, #400	; 0x190
   1bc4c:	mls	r2, r3, r6, r2
   1bc50:	movw	r6, #365	; 0x16d
   1bc54:	cmp	r2, #0
   1bc58:	movweq	r6, #366	; 0x16e
   1bc5c:	cmp	ip, #0
   1bc60:	movw	ip, #52428	; 0xcccc
   1bc64:	movt	ip, #3276	; 0xccc
   1bc68:	movwne	r6, #366	; 0x16e
   1bc6c:	add	r2, r8, r6
   1bc70:	movw	r3, #382	; 0x17e
   1bc74:	sub	r2, r5, r2
   1bc78:	movw	r5, #9363	; 0x2493
   1bc7c:	movt	r5, #37449	; 0x9249
   1bc80:	add	r2, r2, r3
   1bc84:	smmla	r2, r2, r5, r2
   1bc88:	asr	r3, r2, #2
   1bc8c:	add	r2, r3, r2, lsr #31
   1bc90:	movw	r3, #379	; 0x17b
   1bc94:	rsb	r2, r2, r2, lsl #3
   1bc98:	add	r2, r8, r2
   1bc9c:	sub	r2, r2, r3
   1bca0:	cmn	r2, #1
   1bca4:	movgt	r4, r2
   1bca8:	mvn	r2, r2
   1bcac:	lsr	r3, r2, #31
   1bcb0:	cmp	r1, #71	; 0x47
   1bcb4:	beq	1c620 <__assert_fail@plt+0xab94>
   1bcb8:	cmp	r1, #103	; 0x67
   1bcbc:	bne	1c664 <__assert_fail@plt+0xabd8>
   1bcc0:	movw	r2, #34079	; 0x851f
   1bcc4:	movt	r2, #20971	; 0x51eb
   1bcc8:	smmul	r6, lr, r2
   1bccc:	asr	r5, r6, #5
   1bcd0:	add	r6, r5, r6, lsr #31
   1bcd4:	mov	r5, #100	; 0x64
   1bcd8:	mls	r6, r6, r5, lr
   1bcdc:	add	r6, r3, r6
   1bce0:	smmul	r2, r6, r2
   1bce4:	asr	r4, r2, #5
   1bce8:	add	r2, r4, r2, lsr #31
   1bcec:	mls	r6, r2, r5, r6
   1bcf0:	mov	r2, #2
   1bcf4:	str	r2, [sp, #100]	; 0x64
   1bcf8:	mov	r2, #0
   1bcfc:	cmn	r6, #1
   1bd00:	ble	1cf4c <__assert_fail@plt+0xb4c0>
   1bd04:	ldr	lr, [sp, #92]	; 0x5c
   1bd08:	mov	r3, r6
   1bd0c:	b	1cf98 <__assert_fail@plt+0xb50c>
   1bd10:	ldr	r2, [sp, #96]	; 0x60
   1bd14:	ldr	r3, [sp, #100]	; 0x64
   1bd18:	mov	r5, #0
   1bd1c:	cmp	r0, #69	; 0x45
   1bd20:	orr	r2, r3, r2
   1bd24:	str	r2, [sp, #96]	; 0x60
   1bd28:	beq	1c3fc <__assert_fail@plt+0xa970>
   1bd2c:	b	1cbd8 <__assert_fail@plt+0xb14c>
   1bd30:	sub	r0, sl, #1
   1bd34:	cmp	r0, r6
   1bd38:	beq	1cad8 <__assert_fail@plt+0xb04c>
   1bd3c:	sub	sl, sl, #1
   1bd40:	b	1c3fc <__assert_fail@plt+0xa970>
   1bd44:	mov	r5, #1
   1bd48:	ldrb	r2, [sl, r5]
   1bd4c:	cmp	r2, #58	; 0x3a
   1bd50:	bne	1c3a8 <__assert_fail@plt+0xa91c>
   1bd54:	add	r5, r5, #1
   1bd58:	b	1bd48 <__assert_fail@plt+0xa2bc>
   1bd5c:	cmp	r0, #0
   1bd60:	bne	1c3fc <__assert_fail@plt+0xa970>
   1bd64:	ldr	r1, [sp, #96]	; 0x60
   1bd68:	ldr	r2, [sp, #100]	; 0x64
   1bd6c:	mov	r5, #0
   1bd70:	orr	r1, r2, r1
   1bd74:	str	r1, [sp, #96]	; 0x60
   1bd78:	mov	r1, #65	; 0x41
   1bd7c:	b	1cbd8 <__assert_fail@plt+0xb14c>
   1bd80:	cmp	r0, #69	; 0x45
   1bd84:	beq	1c3fc <__assert_fail@plt+0xa970>
   1bd88:	ldr	r1, [sp, #96]	; 0x60
   1bd8c:	ldr	r2, [sp, #100]	; 0x64
   1bd90:	mov	r5, #0
   1bd94:	orr	r1, r2, r1
   1bd98:	str	r1, [sp, #96]	; 0x60
   1bd9c:	mov	r1, #66	; 0x42
   1bda0:	b	1cbd8 <__assert_fail@plt+0xb14c>
   1bda4:	cmp	r0, #69	; 0x45
   1bda8:	bne	1c93c <__assert_fail@plt+0xaeb0>
   1bdac:	mov	r5, #0
   1bdb0:	mov	r1, #67	; 0x43
   1bdb4:	b	1cbd8 <__assert_fail@plt+0xb14c>
   1bdb8:	cmp	r0, #0
   1bdbc:	bne	1c3fc <__assert_fail@plt+0xa970>
   1bdc0:	movw	r3, #14796	; 0x39cc
   1bdc4:	movt	r3, #2
   1bdc8:	b	1bedc <__assert_fail@plt+0xa450>
   1bdcc:	cmp	r0, #0
   1bdd0:	bne	1c3fc <__assert_fail@plt+0xa970>
   1bdd4:	movw	r3, #14805	; 0x39d5
   1bdd8:	cmp	r9, #0
   1bddc:	movt	r3, #2
   1bde0:	bne	1cf6c <__assert_fail@plt+0xb4e0>
   1bde4:	cmp	r7, #0
   1bde8:	bpl	1cf6c <__assert_fail@plt+0xb4e0>
   1bdec:	mov	r9, #43	; 0x2b
   1bdf0:	mov	r4, #4
   1bdf4:	b	1bedc <__assert_fail@plt+0xa450>
   1bdf8:	cmp	r0, #69	; 0x45
   1bdfc:	beq	1c3fc <__assert_fail@plt+0xa970>
   1be00:	ldr	r2, [sp, #60]	; 0x3c
   1be04:	ldr	r3, [r2]
   1be08:	b	1c678 <__assert_fail@plt+0xabec>
   1be0c:	cmp	r0, #69	; 0x45
   1be10:	beq	1c3fc <__assert_fail@plt+0xa970>
   1be14:	ldr	r3, [sp, #56]	; 0x38
   1be18:	b	1c678 <__assert_fail@plt+0xabec>
   1be1c:	cmp	r0, #69	; 0x45
   1be20:	beq	1c3fc <__assert_fail@plt+0xa970>
   1be24:	ldr	r2, [sp, #88]	; 0x58
   1be28:	ldr	r3, [r2, #4]
   1be2c:	b	1c678 <__assert_fail@plt+0xabec>
   1be30:	cmp	r0, #69	; 0x45
   1be34:	beq	1c3fc <__assert_fail@plt+0xa970>
   1be38:	ldr	r1, [fp, #24]
   1be3c:	cmp	r7, #1
   1be40:	mov	r4, #9
   1be44:	mov	r0, #8
   1be48:	sub	r6, fp, #48	; 0x30
   1be4c:	movwlt	r7, #9
   1be50:	cmp	r7, r4
   1be54:	blt	1be7c <__assert_fail@plt+0xa3f0>
   1be58:	cmp	r4, #2
   1be5c:	blt	1c994 <__assert_fail@plt+0xaf08>
   1be60:	smmul	r2, r1, r8
   1be64:	asr	r3, r2, #2
   1be68:	add	r2, r3, r2, lsr #31
   1be6c:	add	r2, r2, r2, lsl #2
   1be70:	sub	r2, r1, r2, lsl #1
   1be74:	cmp	r2, #0
   1be78:	bne	1c994 <__assert_fail@plt+0xaf08>
   1be7c:	smmul	r1, r1, r8
   1be80:	sub	r0, r0, #1
   1be84:	sub	r4, r4, #1
   1be88:	asr	r2, r1, #2
   1be8c:	add	r1, r2, r1, lsr #31
   1be90:	cmp	r7, r4
   1be94:	blt	1be7c <__assert_fail@plt+0xa3f0>
   1be98:	b	1be58 <__assert_fail@plt+0xa3cc>
   1be9c:	mov	r5, #1
   1bea0:	ldr	r1, [sp, #100]	; 0x64
   1bea4:	ldr	r2, [sp, #96]	; 0x60
   1bea8:	orr	r5, r1, r5
   1beac:	eor	r1, r1, #1
   1beb0:	and	r2, r2, r1
   1beb4:	mov	r1, #112	; 0x70
   1beb8:	str	r2, [sp, #96]	; 0x60
   1bebc:	b	1cbd8 <__assert_fail@plt+0xb14c>
   1bec0:	cmp	r0, #69	; 0x45
   1bec4:	beq	1c3fc <__assert_fail@plt+0xa970>
   1bec8:	ldr	r2, [sp, #88]	; 0x58
   1becc:	ldr	r3, [r2]
   1bed0:	b	1c678 <__assert_fail@plt+0xabec>
   1bed4:	movw	r3, #14820	; 0x39e4
   1bed8:	movt	r3, #2
   1bedc:	ldr	r0, [sp, #96]	; 0x60
   1bee0:	str	r3, [sp, #100]	; 0x64
   1bee4:	mov	r2, r3
   1bee8:	ldr	r3, [sp, #88]	; 0x58
   1beec:	mvn	r1, #0
   1bef0:	str	lr, [sp, #92]	; 0x5c
   1bef4:	and	r6, r0, #1
   1bef8:	ldr	r0, [fp, #20]
   1befc:	stm	sp, {r6, r9}
   1bf00:	str	r4, [sp, #8]
   1bf04:	str	r0, [sp, #12]
   1bf08:	ldr	r0, [fp, #24]
   1bf0c:	str	r0, [sp, #16]
   1bf10:	mov	r0, #0
   1bf14:	bl	1b6d4 <__assert_fail@plt+0x9c48>
   1bf18:	subs	r3, r9, #45	; 0x2d
   1bf1c:	ldr	lr, [sp, #92]	; 0x5c
   1bf20:	ldr	r1, [sp, #104]	; 0x68
   1bf24:	mov	r5, r0
   1bf28:	movne	r3, r7
   1bf2c:	cmp	r7, #0
   1bf30:	movwmi	r3, #0
   1bf34:	cmp	r3, r0
   1bf38:	movhi	r5, r3
   1bf3c:	sub	r7, r1, lr
   1bf40:	cmp	r5, r7
   1bf44:	bcs	1d2ac <__assert_fail@plt+0xb820>
   1bf48:	ldr	r2, [sp, #108]	; 0x6c
   1bf4c:	movw	ip, #52428	; 0xcccc
   1bf50:	movt	ip, #3276	; 0xccc
   1bf54:	cmp	r2, #0
   1bf58:	beq	1c580 <__assert_fail@plt+0xaaf4>
   1bf5c:	cmp	r3, r0
   1bf60:	str	r0, [sp, #96]	; 0x60
   1bf64:	bls	1c58c <__assert_fail@plt+0xab00>
   1bf68:	cmp	r9, #48	; 0x30
   1bf6c:	sub	r8, r3, r0
   1bf70:	cmpne	r9, #43	; 0x2b
   1bf74:	bne	1cee8 <__assert_fail@plt+0xb45c>
   1bf78:	mov	r0, r2
   1bf7c:	mov	r1, #48	; 0x30
   1bf80:	b	1cef0 <__assert_fail@plt+0xb464>
   1bf84:	cmp	r0, #69	; 0x45
   1bf88:	beq	1c3fc <__assert_fail@plt+0xa970>
   1bf8c:	ldr	r3, [sp, #88]	; 0x58
   1bf90:	ldr	r2, [r3, #24]
   1bf94:	ldr	r3, [r3, #28]
   1bf98:	sub	r2, r3, r2
   1bf9c:	movw	r3, #9363	; 0x2493
   1bfa0:	movt	r3, #37449	; 0x9249
   1bfa4:	add	r2, r2, #7
   1bfa8:	smmla	r2, r2, r3, r2
   1bfac:	b	1bff0 <__assert_fail@plt+0xa564>
   1bfb0:	cmp	r0, #69	; 0x45
   1bfb4:	beq	1c3fc <__assert_fail@plt+0xa970>
   1bfb8:	ldr	r3, [sp, #88]	; 0x58
   1bfbc:	movw	r6, #9363	; 0x2493
   1bfc0:	movt	r6, #37449	; 0x9249
   1bfc4:	ldr	r2, [r3, #24]
   1bfc8:	ldr	r3, [r3, #28]
   1bfcc:	add	r2, r2, #6
   1bfd0:	smmla	r5, r2, r6, r2
   1bfd4:	asr	r4, r5, #2
   1bfd8:	add	r5, r4, r5, lsr #31
   1bfdc:	rsb	r5, r5, r5, lsl #3
   1bfe0:	sub	r2, r5, r2
   1bfe4:	add	r2, r3, r2
   1bfe8:	add	r2, r2, #7
   1bfec:	smmla	r2, r2, r6, r2
   1bff0:	asr	r3, r2, #2
   1bff4:	add	r3, r3, r2, lsr #31
   1bff8:	b	1c678 <__assert_fail@plt+0xabec>
   1bffc:	cmp	r0, #79	; 0x4f
   1c000:	beq	1c3fc <__assert_fail@plt+0xa970>
   1c004:	mov	r5, #0
   1c008:	mov	r1, #88	; 0x58
   1c00c:	b	1cbd8 <__assert_fail@plt+0xb14c>
   1c010:	cmp	r0, #69	; 0x45
   1c014:	beq	1cbd0 <__assert_fail@plt+0xb144>
   1c018:	cmp	r0, #79	; 0x4f
   1c01c:	beq	1c3fc <__assert_fail@plt+0xa970>
   1c020:	ldr	r2, [sp, #88]	; 0x58
   1c024:	movw	r6, #63636	; 0xf894
   1c028:	mov	r4, #4
   1c02c:	movt	r6, #65535	; 0xffff
   1c030:	ldr	r3, [r2, #20]
   1c034:	mov	r2, #0
   1c038:	cmp	r3, r6
   1c03c:	movw	r6, #1900	; 0x76c
   1c040:	movwlt	r2, #1
   1c044:	add	r3, r3, r6
   1c048:	b	1c98c <__assert_fail@plt+0xaf00>
   1c04c:	ldr	r0, [sp, #64]	; 0x40
   1c050:	subs	r5, r9, #45	; 0x2d
   1c054:	bicne	r5, r7, r7, asr #31
   1c058:	mov	r7, lr
   1c05c:	bl	118ac <strlen@plt>
   1c060:	mov	r4, r0
   1c064:	cmp	r5, r0
   1c068:	mov	r6, r0
   1c06c:	ldr	r0, [sp, #104]	; 0x68
   1c070:	movhi	r6, r5
   1c074:	sub	r0, r0, r7
   1c078:	cmp	r6, r0
   1c07c:	bcs	1d2ac <__assert_fail@plt+0xb820>
   1c080:	ldr	r8, [sp, #108]	; 0x6c
   1c084:	movw	ip, #52428	; 0xcccc
   1c088:	mov	lr, r7
   1c08c:	movt	ip, #3276	; 0xccc
   1c090:	cmp	r8, #0
   1c094:	beq	1cb40 <__assert_fail@plt+0xb0b4>
   1c098:	cmp	r5, r4
   1c09c:	bls	1ce4c <__assert_fail@plt+0xb3c0>
   1c0a0:	uxtb	r1, r9
   1c0a4:	sub	r5, r5, r4
   1c0a8:	cmp	r1, #48	; 0x30
   1c0ac:	cmpne	r1, #43	; 0x2b
   1c0b0:	bne	1d0a8 <__assert_fail@plt+0xb61c>
   1c0b4:	mov	r0, r8
   1c0b8:	mov	r1, #48	; 0x30
   1c0bc:	b	1d0b0 <__assert_fail@plt+0xb624>
   1c0c0:	cmp	r0, #0
   1c0c4:	bne	1c3fc <__assert_fail@plt+0xa970>
   1c0c8:	ldr	r1, [sp, #96]	; 0x60
   1c0cc:	ldr	r2, [sp, #100]	; 0x64
   1c0d0:	mov	r5, #0
   1c0d4:	orr	r1, r2, r1
   1c0d8:	str	r1, [sp, #96]	; 0x60
   1c0dc:	mov	r1, #97	; 0x61
   1c0e0:	b	1cbd8 <__assert_fail@plt+0xb14c>
   1c0e4:	cmp	r0, #79	; 0x4f
   1c0e8:	beq	1c3fc <__assert_fail@plt+0xa970>
   1c0ec:	mov	r5, #0
   1c0f0:	mov	r1, #99	; 0x63
   1c0f4:	b	1cbd8 <__assert_fail@plt+0xb14c>
   1c0f8:	cmp	r0, #69	; 0x45
   1c0fc:	beq	1c3fc <__assert_fail@plt+0xa970>
   1c100:	ldr	r2, [sp, #52]	; 0x34
   1c104:	ldr	r3, [r2]
   1c108:	b	1c678 <__assert_fail@plt+0xabec>
   1c10c:	ldr	r2, [sp, #52]	; 0x34
   1c110:	cmp	r0, #69	; 0x45
   1c114:	bne	1c144 <__assert_fail@plt+0xa6b8>
   1c118:	b	1c3fc <__assert_fail@plt+0xa970>
   1c11c:	cmp	r0, #69	; 0x45
   1c120:	beq	1c3fc <__assert_fail@plt+0xa970>
   1c124:	ldr	r2, [sp, #88]	; 0x58
   1c128:	mov	r4, #3
   1c12c:	str	r4, [sp, #100]	; 0x64
   1c130:	ldr	r3, [r2, #28]
   1c134:	b	1c17c <__assert_fail@plt+0xa6f0>
   1c138:	ldr	r2, [sp, #60]	; 0x3c
   1c13c:	cmp	r0, #69	; 0x45
   1c140:	beq	1c3fc <__assert_fail@plt+0xa970>
   1c144:	ldr	r3, [r2]
   1c148:	b	1c158 <__assert_fail@plt+0xa6cc>
   1c14c:	ldr	r3, [sp, #56]	; 0x38
   1c150:	cmp	r0, #69	; 0x45
   1c154:	beq	1c3fc <__assert_fail@plt+0xa970>
   1c158:	cmp	r9, #0
   1c15c:	movweq	r9, #95	; 0x5f
   1c160:	b	1c678 <__assert_fail@plt+0xabec>
   1c164:	cmp	r0, #69	; 0x45
   1c168:	beq	1c3fc <__assert_fail@plt+0xa970>
   1c16c:	ldr	r2, [sp, #88]	; 0x58
   1c170:	mov	r4, #2
   1c174:	str	r4, [sp, #100]	; 0x64
   1c178:	ldr	r3, [r2, #16]
   1c17c:	mov	r2, #0
   1c180:	cmn	r3, #1
   1c184:	add	r3, r3, #1
   1c188:	movwlt	r2, #1
   1c18c:	b	1c684 <__assert_fail@plt+0xabf8>
   1c190:	subs	r0, r9, #45	; 0x2d
   1c194:	ldr	r1, [sp, #104]	; 0x68
   1c198:	bicne	r0, r7, r7, asr #31
   1c19c:	cmp	r0, #1
   1c1a0:	mov	r5, r0
   1c1a4:	movls	r5, #1
   1c1a8:	sub	r1, r1, lr
   1c1ac:	cmp	r5, r1
   1c1b0:	bcs	1d2ac <__assert_fail@plt+0xb820>
   1c1b4:	ldr	r8, [sp, #108]	; 0x6c
   1c1b8:	mov	r4, #-2147483648	; 0x80000000
   1c1bc:	cmp	r8, #0
   1c1c0:	beq	1cb38 <__assert_fail@plt+0xb0ac>
   1c1c4:	cmp	r0, #2
   1c1c8:	bcc	1d194 <__assert_fail@plt+0xb708>
   1c1cc:	uxtb	r1, r9
   1c1d0:	sub	r4, r0, #1
   1c1d4:	cmp	r1, #48	; 0x30
   1c1d8:	cmpne	r1, #43	; 0x2b
   1c1dc:	bne	1d168 <__assert_fail@plt+0xb6dc>
   1c1e0:	mov	r0, r8
   1c1e4:	mov	r1, #48	; 0x30
   1c1e8:	b	1d170 <__assert_fail@plt+0xb6e4>
   1c1ec:	ldr	r2, [sp, #88]	; 0x58
   1c1f0:	mov	r3, #11
   1c1f4:	mov	r4, #1
   1c1f8:	ldr	r2, [r2, #16]
   1c1fc:	mul	r2, r2, r3
   1c200:	mov	r3, #1
   1c204:	str	r3, [sp, #100]	; 0x64
   1c208:	add	r3, r4, r2, asr #5
   1c20c:	mov	r2, #0
   1c210:	b	1c684 <__assert_fail@plt+0xabf8>
   1c214:	ldr	r2, [sp, #88]	; 0x58
   1c218:	mov	r0, #28
   1c21c:	add	r1, sp, #112	; 0x70
   1c220:	str	lr, [sp, #92]	; 0x5c
   1c224:	mov	r4, r1
   1c228:	mov	r3, r2
   1c22c:	add	r2, r2, #16
   1c230:	vld1.32	{d16-d17}, [r3], r0
   1c234:	vld1.32	{d18-d19}, [r2]
   1c238:	add	r2, r1, #16
   1c23c:	vld1.32	{d20-d21}, [r3]
   1c240:	vst1.64	{d16-d17}, [r4], r0
   1c244:	mvn	r0, #0
   1c248:	vst1.64	{d18-d19}, [r2]
   1c24c:	vst1.32	{d20-d21}, [r4]
   1c250:	str	r0, [r4]
   1c254:	ldr	r0, [fp, #20]
   1c258:	bl	1f6f4 <__assert_fail@plt+0xdc68>
   1c25c:	ldr	r1, [r4]
   1c260:	cmp	r1, #0
   1c264:	bmi	1d2c8 <__assert_fail@plt+0xb83c>
   1c268:	ldr	r1, [sp, #40]	; 0x28
   1c26c:	lsr	r2, r0, #31
   1c270:	mov	r3, r0
   1c274:	smmul	r6, r3, r8
   1c278:	cmp	r0, #0
   1c27c:	asr	r5, r6, #2
   1c280:	add	r6, r5, r6, lsr #31
   1c284:	add	r5, r6, r6, lsl #2
   1c288:	sub	r5, r3, r5, lsl #1
   1c28c:	add	r3, r3, #9
   1c290:	rsbmi	r5, r5, #0
   1c294:	cmp	r3, #18
   1c298:	mov	r3, r6
   1c29c:	add	r5, r5, #48	; 0x30
   1c2a0:	strb	r5, [r1], #-1
   1c2a4:	bhi	1c274 <__assert_fail@plt+0xa7e8>
   1c2a8:	ldr	lr, [sp, #92]	; 0x5c
   1c2ac:	cmp	r7, #0
   1c2b0:	movw	ip, #52428	; 0xcccc
   1c2b4:	add	r8, r1, #1
   1c2b8:	mov	r4, #0
   1c2bc:	mov	r6, sl
   1c2c0:	movwmi	r7, #1
   1c2c4:	cmp	r9, #0
   1c2c8:	movt	ip, #3276	; 0xccc
   1c2cc:	movweq	r9, #48	; 0x30
   1c2d0:	mov	r3, r7
   1c2d4:	b	1c718 <__assert_fail@plt+0xac8c>
   1c2d8:	subs	r0, r9, #45	; 0x2d
   1c2dc:	ldr	r1, [sp, #104]	; 0x68
   1c2e0:	bicne	r0, r7, r7, asr #31
   1c2e4:	cmp	r0, #1
   1c2e8:	mov	r5, r0
   1c2ec:	movls	r5, #1
   1c2f0:	sub	r1, r1, lr
   1c2f4:	cmp	r5, r1
   1c2f8:	bcs	1d2ac <__assert_fail@plt+0xb820>
   1c2fc:	ldr	r8, [sp, #108]	; 0x6c
   1c300:	mov	r4, #-2147483648	; 0x80000000
   1c304:	cmp	r8, #0
   1c308:	beq	1cb38 <__assert_fail@plt+0xb0ac>
   1c30c:	cmp	r0, #2
   1c310:	bcc	1d1cc <__assert_fail@plt+0xb740>
   1c314:	uxtb	r1, r9
   1c318:	sub	r4, r0, #1
   1c31c:	cmp	r1, #48	; 0x30
   1c320:	cmpne	r1, #43	; 0x2b
   1c324:	bne	1d1a0 <__assert_fail@plt+0xb714>
   1c328:	mov	r0, r8
   1c32c:	mov	r1, #48	; 0x30
   1c330:	b	1d1a8 <__assert_fail@plt+0xb71c>
   1c334:	ldr	r2, [sp, #88]	; 0x58
   1c338:	movw	r3, #9363	; 0x2493
   1c33c:	movt	r3, #37449	; 0x9249
   1c340:	ldr	r2, [r2, #24]
   1c344:	add	r2, r2, #6
   1c348:	smmla	r3, r2, r3, r2
   1c34c:	asr	r6, r3, #2
   1c350:	add	r3, r6, r3, lsr #31
   1c354:	rsb	r3, r3, r3, lsl #3
   1c358:	sub	r2, r2, r3
   1c35c:	add	r3, r2, #1
   1c360:	mov	r2, #1
   1c364:	b	1c67c <__assert_fail@plt+0xabf0>
   1c368:	cmp	r0, #69	; 0x45
   1c36c:	beq	1c3fc <__assert_fail@plt+0xa970>
   1c370:	ldr	r2, [sp, #88]	; 0x58
   1c374:	ldr	r3, [r2, #24]
   1c378:	mov	r2, #1
   1c37c:	b	1c67c <__assert_fail@plt+0xabf0>
   1c380:	cmp	r0, #79	; 0x4f
   1c384:	beq	1c3fc <__assert_fail@plt+0xa970>
   1c388:	mov	r5, #0
   1c38c:	mov	r1, #120	; 0x78
   1c390:	b	1cbd8 <__assert_fail@plt+0xb14c>
   1c394:	cmp	r0, #69	; 0x45
   1c398:	bne	1ca98 <__assert_fail@plt+0xb00c>
   1c39c:	mov	r5, #0
   1c3a0:	mov	r1, #121	; 0x79
   1c3a4:	b	1cbd8 <__assert_fail@plt+0xb14c>
   1c3a8:	cmp	r2, #122	; 0x7a
   1c3ac:	bne	1c3fc <__assert_fail@plt+0xa970>
   1c3b0:	add	sl, sl, r5
   1c3b4:	ldr	r3, [sp, #88]	; 0x58
   1c3b8:	ldr	r2, [r3, #32]
   1c3bc:	cmp	r2, #0
   1c3c0:	bmi	1c654 <__assert_fail@plt+0xabc8>
   1c3c4:	mov	r8, lr
   1c3c8:	ldr	lr, [r3, #36]	; 0x24
   1c3cc:	cmp	lr, #0
   1c3d0:	bmi	1cb48 <__assert_fail@plt+0xb0bc>
   1c3d4:	mov	r2, #0
   1c3d8:	bne	1cb4c <__assert_fail@plt+0xb0c0>
   1c3dc:	ldr	r2, [sp, #64]	; 0x40
   1c3e0:	ldrb	r2, [r2]
   1c3e4:	sub	r2, r2, #45	; 0x2d
   1c3e8:	clz	r2, r2
   1c3ec:	lsr	r2, r2, #5
   1c3f0:	cmp	r5, #3
   1c3f4:	bls	1cb54 <__assert_fail@plt+0xb0c8>
   1c3f8:	mov	lr, r8
   1c3fc:	subs	r5, r9, #45	; 0x2d
   1c400:	ldr	r0, [sp, #104]	; 0x68
   1c404:	sub	r8, sl, r6
   1c408:	ldr	r3, [sp, #108]	; 0x6c
   1c40c:	bicne	r5, r7, r7, asr #31
   1c410:	add	r4, r8, #1
   1c414:	mov	r7, r4
   1c418:	cmp	r5, r4
   1c41c:	movhi	r7, r5
   1c420:	sub	r0, r0, lr
   1c424:	cmp	r7, r0
   1c428:	bcs	1d2ac <__assert_fail@plt+0xb820>
   1c42c:	cmp	r3, #0
   1c430:	beq	1c464 <__assert_fail@plt+0xa9d8>
   1c434:	cmp	r5, r4
   1c438:	mov	r1, r3
   1c43c:	bls	1c490 <__assert_fail@plt+0xaa04>
   1c440:	uxtb	r0, r9
   1c444:	sub	r2, r5, r4
   1c448:	str	lr, [sp, #92]	; 0x5c
   1c44c:	cmp	r0, #48	; 0x30
   1c450:	cmpne	r0, #43	; 0x2b
   1c454:	bne	1c46c <__assert_fail@plt+0xa9e0>
   1c458:	mov	r0, r3
   1c45c:	mov	r1, #48	; 0x30
   1c460:	b	1c474 <__assert_fail@plt+0xa9e8>
   1c464:	mov	r8, #0
   1c468:	b	1c570 <__assert_fail@plt+0xaae4>
   1c46c:	mov	r0, r3
   1c470:	mov	r1, #32
   1c474:	mov	r9, r2
   1c478:	bl	11918 <memset@plt>
   1c47c:	ldr	r0, [sp, #108]	; 0x6c
   1c480:	ldr	lr, [sp, #92]	; 0x5c
   1c484:	movw	ip, #52428	; 0xcccc
   1c488:	movt	ip, #3276	; 0xccc
   1c48c:	add	r1, r0, r9
   1c490:	ldr	r0, [sp, #96]	; 0x60
   1c494:	str	r1, [sp, #100]	; 0x64
   1c498:	tst	r0, #1
   1c49c:	beq	1c548 <__assert_fail@plt+0xaabc>
   1c4a0:	cmp	r4, #0
   1c4a4:	beq	1c568 <__assert_fail@plt+0xaadc>
   1c4a8:	sub	r0, sl, r6
   1c4ac:	str	lr, [sp, #92]	; 0x5c
   1c4b0:	add	r9, r0, #1
   1c4b4:	bl	1184c <__ctype_toupper_loc@plt>
   1c4b8:	tst	r9, #1
   1c4bc:	mov	r1, r4
   1c4c0:	beq	1c4dc <__assert_fail@plt+0xaa50>
   1c4c4:	ldrb	r1, [sl]
   1c4c8:	ldr	r2, [r0]
   1c4cc:	ldr	r1, [r2, r1, lsl #2]
   1c4d0:	ldr	r2, [sp, #100]	; 0x64
   1c4d4:	strb	r1, [r2, r8]
   1c4d8:	mov	r1, r8
   1c4dc:	ldr	lr, [sp, #92]	; 0x5c
   1c4e0:	movw	ip, #52428	; 0xcccc
   1c4e4:	cmp	sl, r6
   1c4e8:	movt	ip, #3276	; 0xccc
   1c4ec:	beq	1c568 <__assert_fail@plt+0xaadc>
   1c4f0:	cmp	r5, r9
   1c4f4:	ldr	r3, [sp, #108]	; 0x6c
   1c4f8:	add	r2, r1, r6
   1c4fc:	movhi	r9, r5
   1c500:	add	r2, r2, r9
   1c504:	sub	r2, r2, sl
   1c508:	add	r2, r3, r2
   1c50c:	sub	r3, r6, #2
   1c510:	sub	r2, r2, #2
   1c514:	add	r6, r3, r1
   1c518:	ldr	r5, [r0]
   1c51c:	ldrb	r6, [r6, #1]
   1c520:	ldr	r6, [r5, r6, lsl #2]
   1c524:	strb	r6, [r2]
   1c528:	ldrb	r6, [r3, r1]
   1c52c:	ldr	r5, [r0]
   1c530:	subs	r1, r1, #2
   1c534:	ldr	r6, [r5, r6, lsl #2]
   1c538:	strb	r6, [r2, #-1]
   1c53c:	sub	r2, r2, #2
   1c540:	bne	1c514 <__assert_fail@plt+0xaa88>
   1c544:	b	1c568 <__assert_fail@plt+0xaadc>
   1c548:	mov	r0, r1
   1c54c:	mov	r1, r6
   1c550:	mov	r2, r4
   1c554:	mov	r5, lr
   1c558:	bl	11708 <memcpy@plt>
   1c55c:	movw	ip, #52428	; 0xcccc
   1c560:	mov	lr, r5
   1c564:	movt	ip, #3276	; 0xccc
   1c568:	ldr	r0, [sp, #100]	; 0x64
   1c56c:	add	r8, r0, r4
   1c570:	add	lr, r7, lr
   1c574:	mov	r6, sl
   1c578:	mov	r4, #-2147483648	; 0x80000000
   1c57c:	b	1b7d8 <__assert_fail@plt+0x9d4c>
   1c580:	mov	r8, #0
   1c584:	mov	r4, #-2147483648	; 0x80000000
   1c588:	b	1d270 <__assert_fail@plt+0xb7e4>
   1c58c:	ldr	r3, [sp, #88]	; 0x58
   1c590:	b	1cf04 <__assert_fail@plt+0xb478>
   1c594:	sub	r2, r2, #1
   1c598:	movw	r4, #365	; 0x16d
   1c59c:	tst	r2, #3
   1c5a0:	bne	1c5e4 <__assert_fail@plt+0xab58>
   1c5a4:	movw	r4, #34079	; 0x851f
   1c5a8:	movt	r4, #20971	; 0x51eb
   1c5ac:	smmul	r4, r2, r4
   1c5b0:	asr	r6, r4, #5
   1c5b4:	add	r3, r6, r4, lsr #31
   1c5b8:	mov	r6, #100	; 0x64
   1c5bc:	mls	r3, r3, r6, r2
   1c5c0:	asr	r6, r4, #7
   1c5c4:	add	r4, r6, r4, lsr #31
   1c5c8:	mov	r6, #400	; 0x190
   1c5cc:	mls	r2, r4, r6, r2
   1c5d0:	movw	r4, #365	; 0x16d
   1c5d4:	cmp	r2, #0
   1c5d8:	movweq	r4, #366	; 0x16e
   1c5dc:	cmp	r3, #0
   1c5e0:	movwne	r4, #366	; 0x16e
   1c5e4:	add	r2, r4, r5
   1c5e8:	movw	r5, #9363	; 0x2493
   1c5ec:	movw	r4, #382	; 0x17e
   1c5f0:	sub	r3, r4, r8
   1c5f4:	movt	r5, #37449	; 0x9249
   1c5f8:	add	r2, r3, r2
   1c5fc:	smmla	r2, r2, r5, r2
   1c600:	asr	r4, r2, #2
   1c604:	add	r2, r4, r2, lsr #31
   1c608:	rsb	r2, r2, r2, lsl #3
   1c60c:	sub	r2, r2, r3
   1c610:	mvn	r3, #0
   1c614:	add	r4, r2, #3
   1c618:	cmp	r1, #71	; 0x47
   1c61c:	bne	1bcb8 <__assert_fail@plt+0xa22c>
   1c620:	movw	r2, #63636	; 0xf894
   1c624:	movt	r2, #65535	; 0xffff
   1c628:	sub	r6, r2, r3
   1c62c:	add	r3, lr, r3
   1c630:	mov	r2, #0
   1c634:	cmp	lr, r6
   1c638:	ldr	lr, [sp, #92]	; 0x5c
   1c63c:	movw	r6, #1900	; 0x76c
   1c640:	add	r3, r3, r6
   1c644:	mov	r6, #4
   1c648:	movwlt	r2, #1
   1c64c:	str	r6, [sp, #100]	; 0x64
   1c650:	b	1cf98 <__assert_fail@plt+0xb50c>
   1c654:	ldr	r8, [sp, #108]	; 0x6c
   1c658:	mov	r6, sl
   1c65c:	mov	r4, #-2147483648	; 0x80000000
   1c660:	b	1b7d8 <__assert_fail@plt+0x9d4c>
   1c664:	smmla	r2, r4, r5, r4
   1c668:	ldr	lr, [sp, #92]	; 0x5c
   1c66c:	asr	r3, r2, #2
   1c670:	add	r2, r3, r2, lsr #31
   1c674:	add	r3, r2, #1
   1c678:	mov	r2, #2
   1c67c:	str	r2, [sp, #100]	; 0x64
   1c680:	lsr	r2, r3, #31
   1c684:	cmp	r2, #0
   1c688:	mov	r6, #0
   1c68c:	mov	r4, #0
   1c690:	movwne	r2, #1
   1c694:	cmp	r0, #79	; 0x4f
   1c698:	moveq	r5, #0
   1c69c:	cmpeq	r2, #0
   1c6a0:	beq	1cbd8 <__assert_fail@plt+0xb14c>
   1c6a4:	ldr	r8, [sp, #80]	; 0x50
   1c6a8:	cmp	r2, #0
   1c6ac:	rsbne	r3, r3, #0
   1c6b0:	tst	r6, #1
   1c6b4:	asr	r6, r6, #1
   1c6b8:	movne	r0, #58	; 0x3a
   1c6bc:	strbne	r0, [r8, #-1]!
   1c6c0:	movw	r0, #52429	; 0xcccd
   1c6c4:	cmp	r3, #9
   1c6c8:	movt	r0, #52428	; 0xcccc
   1c6cc:	umull	r0, r1, r3, r0
   1c6d0:	lsr	r0, r1, #3
   1c6d4:	add	r1, r0, r0, lsl #2
   1c6d8:	sub	r1, r3, r1, lsl #1
   1c6dc:	mov	r3, r0
   1c6e0:	orr	r1, r1, #48	; 0x30
   1c6e4:	strb	r1, [r8, #-1]!
   1c6e8:	bhi	1c6b0 <__assert_fail@plt+0xac24>
   1c6ec:	cmp	r6, #0
   1c6f0:	mov	r3, r0
   1c6f4:	bne	1c6b0 <__assert_fail@plt+0xac24>
   1c6f8:	cmp	r7, #0
   1c6fc:	ldr	r3, [sp, #100]	; 0x64
   1c700:	mov	r6, sl
   1c704:	movpl	r3, r7
   1c708:	cmp	r4, #0
   1c70c:	movwne	r4, #43	; 0x2b
   1c710:	cmp	r9, #0
   1c714:	movweq	r9, #48	; 0x30
   1c718:	ldr	r1, [sp, #80]	; 0x50
   1c71c:	cmp	r2, #0
   1c720:	mov	r0, r3
   1c724:	movwne	r4, #45	; 0x2d
   1c728:	cmp	r4, #0
   1c72c:	subne	r0, r0, #1
   1c730:	sub	sl, r1, r8
   1c734:	sub	r0, r0, sl
   1c738:	cmp	r0, #1
   1c73c:	movwlt	r0, #0
   1c740:	subs	r5, r9, #45	; 0x2d
   1c744:	movne	r5, r0
   1c748:	cmp	r4, #0
   1c74c:	beq	1c798 <__assert_fail@plt+0xad0c>
   1c750:	ldr	r7, [sp, #108]	; 0x6c
   1c754:	cmp	r9, #95	; 0x5f
   1c758:	bne	1c7ac <__assert_fail@plt+0xad20>
   1c75c:	cmp	r7, #0
   1c760:	beq	1c7a0 <__assert_fail@plt+0xad14>
   1c764:	mov	r0, r7
   1c768:	mov	r1, #32
   1c76c:	mov	r2, r5
   1c770:	str	lr, [sp, #92]	; 0x5c
   1c774:	str	r3, [sp, #100]	; 0x64
   1c778:	bl	11918 <memset@plt>
   1c77c:	ldr	r7, [sp, #108]	; 0x6c
   1c780:	ldr	r3, [sp, #100]	; 0x64
   1c784:	ldr	lr, [sp, #92]	; 0x5c
   1c788:	movw	ip, #52428	; 0xcccc
   1c78c:	movt	ip, #3276	; 0xccc
   1c790:	add	r7, r7, r5
   1c794:	b	1c7a4 <__assert_fail@plt+0xad18>
   1c798:	ldr	r7, [sp, #108]	; 0x6c
   1c79c:	b	1c7d0 <__assert_fail@plt+0xad44>
   1c7a0:	mov	r7, #0
   1c7a4:	sub	r3, r3, r5
   1c7a8:	add	lr, r5, lr
   1c7ac:	ldr	r0, [sp, #104]	; 0x68
   1c7b0:	sub	r0, r0, lr
   1c7b4:	cmp	r0, #2
   1c7b8:	bcc	1d2ac <__assert_fail@plt+0xb820>
   1c7bc:	cmp	r7, #0
   1c7c0:	sub	r3, r3, #1
   1c7c4:	add	lr, lr, #1
   1c7c8:	strbne	r4, [r7], #1
   1c7cc:	moveq	r7, #0
   1c7d0:	subs	r5, r9, #45	; 0x2d
   1c7d4:	ldr	r0, [sp, #104]	; 0x68
   1c7d8:	mov	r4, sl
   1c7dc:	bicne	r5, r3, r3, asr #31
   1c7e0:	cmp	r5, sl
   1c7e4:	movhi	r4, r5
   1c7e8:	sub	r0, r0, lr
   1c7ec:	cmp	r4, r0
   1c7f0:	bcs	1d2ac <__assert_fail@plt+0xb820>
   1c7f4:	cmp	r7, #0
   1c7f8:	beq	1c828 <__assert_fail@plt+0xad9c>
   1c7fc:	cmp	r5, sl
   1c800:	mov	r1, r7
   1c804:	bls	1c854 <__assert_fail@plt+0xadc8>
   1c808:	cmp	r9, #48	; 0x30
   1c80c:	sub	r2, r5, sl
   1c810:	str	lr, [sp, #92]	; 0x5c
   1c814:	cmpne	r9, #43	; 0x2b
   1c818:	bne	1c834 <__assert_fail@plt+0xada8>
   1c81c:	mov	r0, r7
   1c820:	mov	r1, #48	; 0x30
   1c824:	b	1c83c <__assert_fail@plt+0xadb0>
   1c828:	mov	r8, #0
   1c82c:	add	lr, r4, lr
   1c830:	b	1c578 <__assert_fail@plt+0xaaec>
   1c834:	mov	r0, r7
   1c838:	mov	r1, #32
   1c83c:	mov	r9, r2
   1c840:	bl	11918 <memset@plt>
   1c844:	ldr	lr, [sp, #92]	; 0x5c
   1c848:	movw	ip, #52428	; 0xcccc
   1c84c:	add	r1, r7, r9
   1c850:	movt	ip, #3276	; 0xccc
   1c854:	ldr	r0, [sp, #96]	; 0x60
   1c858:	tst	r0, #1
   1c85c:	beq	1c90c <__assert_fail@plt+0xae80>
   1c860:	mov	r9, r1
   1c864:	cmp	sl, #0
   1c868:	str	r7, [sp, #108]	; 0x6c
   1c86c:	beq	1c930 <__assert_fail@plt+0xaea4>
   1c870:	str	lr, [sp, #92]	; 0x5c
   1c874:	mvn	r7, r8
   1c878:	bl	1184c <__ctype_toupper_loc@plt>
   1c87c:	tst	sl, #1
   1c880:	mov	r1, sl
   1c884:	beq	1c89c <__assert_fail@plt+0xae10>
   1c888:	sub	r1, sl, #1
   1c88c:	ldr	r3, [r0]
   1c890:	ldrb	r2, [r8, r1]
   1c894:	ldr	r2, [r3, r2, lsl #2]
   1c898:	strb	r2, [r9, r1]
   1c89c:	ldr	r2, [sp, #44]	; 0x2c
   1c8a0:	ldr	lr, [sp, #92]	; 0x5c
   1c8a4:	movw	ip, #52428	; 0xcccc
   1c8a8:	movt	ip, #3276	; 0xccc
   1c8ac:	cmp	r7, r2
   1c8b0:	beq	1c930 <__assert_fail@plt+0xaea4>
   1c8b4:	cmp	r5, sl
   1c8b8:	add	r2, r1, r8
   1c8bc:	ldr	r3, [sp, #36]	; 0x24
   1c8c0:	movls	r5, sl
   1c8c4:	add	r2, r2, r5
   1c8c8:	ldr	r5, [sp, #108]	; 0x6c
   1c8cc:	add	r3, r5, r3
   1c8d0:	add	r2, r3, r2
   1c8d4:	sub	r3, r8, #2
   1c8d8:	add	r5, r3, r1
   1c8dc:	ldr	r7, [r0]
   1c8e0:	ldrb	r5, [r5, #1]
   1c8e4:	ldr	r7, [r7, r5, lsl #2]
   1c8e8:	strb	r7, [r2]
   1c8ec:	ldrb	r7, [r3, r1]
   1c8f0:	ldr	r5, [r0]
   1c8f4:	subs	r1, r1, #2
   1c8f8:	ldr	r7, [r5, r7, lsl #2]
   1c8fc:	strb	r7, [r2, #-1]
   1c900:	sub	r2, r2, #2
   1c904:	bne	1c8d8 <__assert_fail@plt+0xae4c>
   1c908:	b	1c930 <__assert_fail@plt+0xaea4>
   1c90c:	mov	r9, r1
   1c910:	mov	r0, r1
   1c914:	mov	r1, r8
   1c918:	mov	r2, sl
   1c91c:	mov	r5, lr
   1c920:	bl	11708 <memcpy@plt>
   1c924:	movw	ip, #52428	; 0xcccc
   1c928:	mov	lr, r5
   1c92c:	movt	ip, #3276	; 0xccc
   1c930:	add	r8, r9, sl
   1c934:	add	lr, r4, lr
   1c938:	b	1c578 <__assert_fail@plt+0xaaec>
   1c93c:	ldr	r2, [sp, #88]	; 0x58
   1c940:	movw	r5, #63636	; 0xf894
   1c944:	mov	r3, #0
   1c948:	mvn	r4, #98	; 0x62
   1c94c:	movt	r5, #65535	; 0xffff
   1c950:	ldr	r6, [r2, #20]
   1c954:	mov	r2, #0
   1c958:	cmp	r6, r5
   1c95c:	movwge	r3, #1
   1c960:	cmp	r6, r5
   1c964:	and	r3, r3, r6, lsr #31
   1c968:	movwlt	r2, #1
   1c96c:	smlabb	r3, r3, r4, r6
   1c970:	movw	r4, #34079	; 0x851f
   1c974:	movt	r4, #20971	; 0x51eb
   1c978:	smmul	r3, r3, r4
   1c97c:	asr	r4, r3, #5
   1c980:	add	r3, r4, r3, lsr #31
   1c984:	mov	r4, #2
   1c988:	add	r3, r3, #19
   1c98c:	str	r4, [sp, #100]	; 0x64
   1c990:	b	1cf98 <__assert_fail@plt+0xb50c>
   1c994:	cmp	r4, #1
   1c998:	blt	1c9cc <__assert_fail@plt+0xaf40>
   1c99c:	smmul	r2, r1, r8
   1c9a0:	cmp	r0, #0
   1c9a4:	asr	r3, r2, #2
   1c9a8:	add	r2, r3, r2, lsr #31
   1c9ac:	add	r3, r2, r2, lsl #2
   1c9b0:	sub	r1, r1, r3, lsl #1
   1c9b4:	add	r1, r1, #48	; 0x30
   1c9b8:	strb	r1, [r6, r0]
   1c9bc:	sub	r1, r0, #1
   1c9c0:	mov	r0, r1
   1c9c4:	mov	r1, r2
   1c9c8:	bgt	1c99c <__assert_fail@plt+0xaf10>
   1c9cc:	ldr	r0, [sp, #104]	; 0x68
   1c9d0:	cmp	r9, #0
   1c9d4:	movweq	r9, #48	; 0x30
   1c9d8:	sub	r8, r0, lr
   1c9dc:	cmp	r4, r8
   1c9e0:	bcs	1d2ac <__assert_fail@plt+0xb820>
   1c9e4:	ldr	r0, [sp, #108]	; 0x6c
   1c9e8:	mov	r2, #0
   1c9ec:	mov	r5, #0
   1c9f0:	cmp	r0, #0
   1c9f4:	beq	1d03c <__assert_fail@plt+0xb5b0>
   1c9f8:	ldr	r1, [sp, #96]	; 0x60
   1c9fc:	tst	r1, #1
   1ca00:	beq	1d014 <__assert_fail@plt+0xb588>
   1ca04:	cmp	r4, #0
   1ca08:	beq	1d030 <__assert_fail@plt+0xb5a4>
   1ca0c:	mov	r5, lr
   1ca10:	bl	1184c <__ctype_toupper_loc@plt>
   1ca14:	tst	r4, #1
   1ca18:	mov	r1, r4
   1ca1c:	beq	1ca44 <__assert_fail@plt+0xafb8>
   1ca20:	ldr	r1, [sp, #24]
   1ca24:	ldr	r2, [r0]
   1ca28:	add	r1, r1, r4
   1ca2c:	ldrb	r1, [r1, #-9]
   1ca30:	ldr	r1, [r2, r1, lsl #2]
   1ca34:	ldr	r2, [sp, #108]	; 0x6c
   1ca38:	add	r2, r2, r4
   1ca3c:	strb	r1, [r2, #-1]
   1ca40:	sub	r1, r4, #1
   1ca44:	ldr	r6, [sp, #28]
   1ca48:	movw	ip, #52428	; 0xcccc
   1ca4c:	cmp	r4, #1
   1ca50:	mov	lr, r5
   1ca54:	movt	ip, #3276	; 0xccc
   1ca58:	beq	1d030 <__assert_fail@plt+0xb5a4>
   1ca5c:	ldr	r2, [sp, #108]	; 0x6c
   1ca60:	sub	r2, r2, #2
   1ca64:	add	r3, r6, r1
   1ca68:	ldr	r5, [r0]
   1ca6c:	ldrb	r3, [r3, #1]
   1ca70:	ldr	r3, [r5, r3, lsl #2]
   1ca74:	add	r5, r2, r1
   1ca78:	strb	r3, [r5, #1]
   1ca7c:	ldrb	r3, [r6, r1]
   1ca80:	ldr	r5, [r0]
   1ca84:	ldr	r3, [r5, r3, lsl #2]
   1ca88:	strb	r3, [r2, r1]
   1ca8c:	subs	r1, r1, #2
   1ca90:	bne	1ca64 <__assert_fail@plt+0xafd8>
   1ca94:	b	1d030 <__assert_fail@plt+0xb5a4>
   1ca98:	ldr	r2, [sp, #88]	; 0x58
   1ca9c:	ldr	r6, [r2, #20]
   1caa0:	movw	r2, #34079	; 0x851f
   1caa4:	movt	r2, #20971	; 0x51eb
   1caa8:	smmul	r2, r6, r2
   1caac:	asr	r3, r2, #5
   1cab0:	add	r2, r3, r2, lsr #31
   1cab4:	mov	r3, #100	; 0x64
   1cab8:	mls	r5, r2, r3, r6
   1cabc:	mov	r2, #0
   1cac0:	mov	r3, #2
   1cac4:	cmn	r5, #1
   1cac8:	ble	1cf80 <__assert_fail@plt+0xb4f4>
   1cacc:	str	r3, [sp, #100]	; 0x64
   1cad0:	mov	r3, r5
   1cad4:	b	1cf98 <__assert_fail@plt+0xb50c>
   1cad8:	subs	r0, r9, #45	; 0x2d
   1cadc:	ldr	r1, [sp, #104]	; 0x68
   1cae0:	bicne	r0, r7, r7, asr #31
   1cae4:	cmp	r0, #1
   1cae8:	mov	r5, r0
   1caec:	movls	r5, #1
   1caf0:	sub	r1, r1, lr
   1caf4:	cmp	r5, r1
   1caf8:	bcs	1d2ac <__assert_fail@plt+0xb820>
   1cafc:	ldr	r8, [sp, #108]	; 0x6c
   1cb00:	mov	r4, #-2147483648	; 0x80000000
   1cb04:	cmp	r8, #0
   1cb08:	beq	1cb38 <__assert_fail@plt+0xb0ac>
   1cb0c:	mov	r1, #37	; 0x25
   1cb10:	cmp	r0, #2
   1cb14:	bcc	1d26c <__assert_fail@plt+0xb7e0>
   1cb18:	uxtb	r1, r9
   1cb1c:	sub	r4, r0, #1
   1cb20:	cmp	r1, #48	; 0x30
   1cb24:	cmpne	r1, #43	; 0x2b
   1cb28:	bne	1d23c <__assert_fail@plt+0xb7b0>
   1cb2c:	mov	r0, r8
   1cb30:	mov	r1, #48	; 0x30
   1cb34:	b	1d244 <__assert_fail@plt+0xb7b8>
   1cb38:	mov	r8, #0
   1cb3c:	b	1d270 <__assert_fail@plt+0xb7e4>
   1cb40:	mov	r8, #0
   1cb44:	b	1d158 <__assert_fail@plt+0xb6cc>
   1cb48:	mov	r2, #1
   1cb4c:	cmp	r5, #3
   1cb50:	bhi	1c3f8 <__assert_fail@plt+0xa96c>
   1cb54:	movw	ip, #34953	; 0x8889
   1cb58:	movt	ip, #34952	; 0x8888
   1cb5c:	smmla	r6, lr, ip, lr
   1cb60:	asr	r3, r6, #5
   1cb64:	add	r6, r3, r6, lsr #31
   1cb68:	smmla	r3, r6, ip, r6
   1cb6c:	asr	r4, r3, #5
   1cb70:	add	r3, r4, r3, lsr #31
   1cb74:	rsb	r3, r3, r3, lsl #4
   1cb78:	sub	ip, r6, r3, lsl #2
   1cb7c:	movw	r3, #46021	; 0xb3c5
   1cb80:	movt	r3, #37282	; 0x91a2
   1cb84:	smmla	r3, lr, r3, lr
   1cb88:	asr	r4, r3, #11
   1cb8c:	add	r3, r4, r3, lsr #31
   1cb90:	rsb	r4, r6, r6, lsl #4
   1cb94:	add	r6, pc, #4
   1cb98:	sub	r4, lr, r4, lsl #2
   1cb9c:	ldr	pc, [r6, r5, lsl #2]
   1cba0:			; <UNDEFINED> instruction: 0x0001cbb0
   1cba4:	andeq	sp, r1, r4, lsl r2
   1cba8:	andeq	ip, r1, ip, ror #31
   1cbac:	andeq	ip, r1, r4, ror #31
   1cbb0:	mov	r6, #100	; 0x64
   1cbb4:	mla	r3, r3, r6, ip
   1cbb8:	mov	r6, #5
   1cbbc:	str	r6, [sp, #100]	; 0x64
   1cbc0:	mov	r4, #1
   1cbc4:	mov	r6, #0
   1cbc8:	mov	lr, r8
   1cbcc:	b	1d230 <__assert_fail@plt+0xb7a4>
   1cbd0:	mov	r5, #0
   1cbd4:	mov	r1, #89	; 0x59
   1cbd8:	movw	r2, #9504	; 0x2520
   1cbdc:	cmp	r0, #0
   1cbe0:	ldr	r3, [sp, #88]	; 0x58
   1cbe4:	str	lr, [sp, #92]	; 0x5c
   1cbe8:	strh	r2, [fp, #-53]	; 0xffffffcb
   1cbec:	ldr	r2, [sp, #84]	; 0x54
   1cbf0:	ldrne	r2, [sp, #68]	; 0x44
   1cbf4:	strbne	r0, [fp, #-51]	; 0xffffffcd
   1cbf8:	mov	r0, #0
   1cbfc:	strb	r0, [r2, #1]
   1cc00:	strb	r1, [r2]
   1cc04:	add	r0, sp, #112	; 0x70
   1cc08:	sub	r2, fp, #53	; 0x35
   1cc0c:	mov	r1, #1024	; 0x400
   1cc10:	bl	11828 <strftime@plt>
   1cc14:	cmp	r0, #0
   1cc18:	beq	1cc84 <__assert_fail@plt+0xb1f8>
   1cc1c:	subs	r4, r9, #45	; 0x2d
   1cc20:	mov	r6, r0
   1cc24:	sub	r8, r0, #1
   1cc28:	ldr	lr, [sp, #92]	; 0x5c
   1cc2c:	ldr	r0, [sp, #104]	; 0x68
   1cc30:	movne	r4, r7
   1cc34:	cmp	r7, #0
   1cc38:	mov	r7, r8
   1cc3c:	movwmi	r4, #0
   1cc40:	cmp	r4, r8
   1cc44:	movhi	r7, r4
   1cc48:	sub	r0, r0, lr
   1cc4c:	cmp	r7, r0
   1cc50:	bcs	1d2ac <__assert_fail@plt+0xb820>
   1cc54:	ldr	r0, [sp, #108]	; 0x6c
   1cc58:	cmp	r0, #0
   1cc5c:	beq	1cca0 <__assert_fail@plt+0xb214>
   1cc60:	cmp	r4, r8
   1cc64:	mov	r1, r0
   1cc68:	bls	1ccc8 <__assert_fail@plt+0xb23c>
   1cc6c:	cmp	r9, #48	; 0x30
   1cc70:	sub	r2, r4, r8
   1cc74:	cmpne	r9, #43	; 0x2b
   1cc78:	bne	1ccb4 <__assert_fail@plt+0xb228>
   1cc7c:	mov	r1, #48	; 0x30
   1cc80:	b	1ccb8 <__assert_fail@plt+0xb22c>
   1cc84:	ldr	lr, [sp, #92]	; 0x5c
   1cc88:	ldr	r8, [sp, #108]	; 0x6c
   1cc8c:	movw	ip, #52428	; 0xcccc
   1cc90:	mov	r4, #-2147483648	; 0x80000000
   1cc94:	mov	r6, sl
   1cc98:	movt	ip, #3276	; 0xccc
   1cc9c:	b	1b7d8 <__assert_fail@plt+0x9d4c>
   1cca0:	movw	ip, #52428	; 0xcccc
   1cca4:	mov	r8, #0
   1cca8:	mov	r4, #-2147483648	; 0x80000000
   1ccac:	movt	ip, #3276	; 0xccc
   1ccb0:	b	1ce40 <__assert_fail@plt+0xb3b4>
   1ccb4:	mov	r1, #32
   1ccb8:	mov	r9, r2
   1ccbc:	bl	11918 <memset@plt>
   1ccc0:	ldr	r0, [sp, #108]	; 0x6c
   1ccc4:	add	r1, r0, r9
   1ccc8:	tst	r5, #1
   1cccc:	str	r1, [sp, #100]	; 0x64
   1ccd0:	beq	1cd70 <__assert_fail@plt+0xb2e4>
   1ccd4:	movw	ip, #52428	; 0xcccc
   1ccd8:	cmp	r8, #0
   1ccdc:	movt	ip, #3276	; 0xccc
   1cce0:	beq	1ce30 <__assert_fail@plt+0xb3a4>
   1cce4:	bl	11840 <__ctype_tolower_loc@plt>
   1cce8:	tst	r8, #1
   1ccec:	mov	r1, r8
   1ccf0:	beq	1cd10 <__assert_fail@plt+0xb284>
   1ccf4:	add	r1, sp, #112	; 0x70
   1ccf8:	ldr	r2, [r0]
   1ccfc:	ldr	r3, [sp, #100]	; 0x64
   1cd00:	ldrb	r1, [r1, r8]
   1cd04:	ldr	r2, [r2, r1, lsl #2]
   1cd08:	sub	r1, r6, #2
   1cd0c:	strb	r2, [r3, r1]
   1cd10:	ldr	r2, [sp, #108]	; 0x6c
   1cd14:	movw	ip, #52428	; 0xcccc
   1cd18:	cmp	r6, #2
   1cd1c:	add	lr, sp, #112	; 0x70
   1cd20:	movt	ip, #3276	; 0xccc
   1cd24:	beq	1ce30 <__assert_fail@plt+0xb3a4>
   1cd28:	cmp	r4, r8
   1cd2c:	mov	r3, r2
   1cd30:	movls	r4, r8
   1cd34:	sub	r2, r4, r6
   1cd38:	add	r5, r3, r2
   1cd3c:	ldrb	r3, [lr, r1]
   1cd40:	ldr	r6, [r0]
   1cd44:	mov	r2, r5
   1cd48:	ldr	r3, [r6, r3, lsl #2]
   1cd4c:	strb	r3, [r2, r1]!
   1cd50:	add	r3, lr, r1
   1cd54:	subs	r1, r1, #2
   1cd58:	ldrb	r3, [r3, #-1]
   1cd5c:	ldr	r6, [r0]
   1cd60:	ldr	r3, [r6, r3, lsl #2]
   1cd64:	strb	r3, [r2, #-1]
   1cd68:	bne	1cd3c <__assert_fail@plt+0xb2b0>
   1cd6c:	b	1ce30 <__assert_fail@plt+0xb3a4>
   1cd70:	ldr	r0, [sp, #96]	; 0x60
   1cd74:	tst	r0, #1
   1cd78:	beq	1ce18 <__assert_fail@plt+0xb38c>
   1cd7c:	movw	ip, #52428	; 0xcccc
   1cd80:	cmp	r8, #0
   1cd84:	movt	ip, #3276	; 0xccc
   1cd88:	beq	1ce30 <__assert_fail@plt+0xb3a4>
   1cd8c:	bl	1184c <__ctype_toupper_loc@plt>
   1cd90:	tst	r8, #1
   1cd94:	mov	r1, r8
   1cd98:	beq	1cdb8 <__assert_fail@plt+0xb32c>
   1cd9c:	add	r1, sp, #112	; 0x70
   1cda0:	ldr	r2, [r0]
   1cda4:	ldr	r3, [sp, #100]	; 0x64
   1cda8:	ldrb	r1, [r1, r8]
   1cdac:	ldr	r2, [r2, r1, lsl #2]
   1cdb0:	sub	r1, r6, #2
   1cdb4:	strb	r2, [r3, r1]
   1cdb8:	ldr	r2, [sp, #108]	; 0x6c
   1cdbc:	movw	ip, #52428	; 0xcccc
   1cdc0:	cmp	r6, #2
   1cdc4:	add	lr, sp, #112	; 0x70
   1cdc8:	movt	ip, #3276	; 0xccc
   1cdcc:	beq	1ce30 <__assert_fail@plt+0xb3a4>
   1cdd0:	cmp	r4, r8
   1cdd4:	mov	r3, r2
   1cdd8:	movls	r4, r8
   1cddc:	sub	r2, r4, r6
   1cde0:	add	r5, r3, r2
   1cde4:	ldrb	r3, [lr, r1]
   1cde8:	ldr	r6, [r0]
   1cdec:	mov	r2, r5
   1cdf0:	ldr	r3, [r6, r3, lsl #2]
   1cdf4:	strb	r3, [r2, r1]!
   1cdf8:	add	r3, lr, r1
   1cdfc:	subs	r1, r1, #2
   1ce00:	ldrb	r3, [r3, #-1]
   1ce04:	ldr	r6, [r0]
   1ce08:	ldr	r3, [r6, r3, lsl #2]
   1ce0c:	strb	r3, [r2, #-1]
   1ce10:	bne	1cde4 <__assert_fail@plt+0xb358>
   1ce14:	b	1ce30 <__assert_fail@plt+0xb3a4>
   1ce18:	mov	r0, r1
   1ce1c:	ldr	r1, [sp, #48]	; 0x30
   1ce20:	mov	r2, r8
   1ce24:	bl	11708 <memcpy@plt>
   1ce28:	movw	ip, #52428	; 0xcccc
   1ce2c:	movt	ip, #3276	; 0xccc
   1ce30:	ldr	r0, [sp, #100]	; 0x64
   1ce34:	ldr	lr, [sp, #92]	; 0x5c
   1ce38:	mov	r4, #-2147483648	; 0x80000000
   1ce3c:	add	r8, r0, r8
   1ce40:	add	lr, r7, lr
   1ce44:	mov	r6, sl
   1ce48:	b	1b7d8 <__assert_fail@plt+0x9d4c>
   1ce4c:	ldr	r9, [sp, #32]
   1ce50:	ldr	r2, [sp, #96]	; 0x60
   1ce54:	ldr	r1, [sp, #100]	; 0x64
   1ce58:	tst	r1, #1
   1ce5c:	bne	1d0e0 <__assert_fail@plt+0xb654>
   1ce60:	eor	r1, r1, #1
   1ce64:	and	r1, r2, r1
   1ce68:	tst	r1, #1
   1ce6c:	beq	1d088 <__assert_fail@plt+0xb5fc>
   1ce70:	cmp	r4, #0
   1ce74:	beq	1d154 <__assert_fail@plt+0xb6c8>
   1ce78:	bl	1184c <__ctype_toupper_loc@plt>
   1ce7c:	tst	r4, #1
   1ce80:	mov	r1, r4
   1ce84:	beq	1cea0 <__assert_fail@plt+0xb414>
   1ce88:	ldr	r2, [sp, #64]	; 0x40
   1ce8c:	sub	r1, r4, #1
   1ce90:	ldr	r3, [r0]
   1ce94:	ldrb	r2, [r2, r1]
   1ce98:	ldr	r2, [r3, r2, lsl #2]
   1ce9c:	strb	r2, [r8, r1]
   1cea0:	movw	ip, #52428	; 0xcccc
   1cea4:	cmp	r4, #1
   1cea8:	mov	lr, r7
   1ceac:	movt	ip, #3276	; 0xccc
   1ceb0:	beq	1d154 <__assert_fail@plt+0xb6c8>
   1ceb4:	add	r2, r9, r1
   1ceb8:	ldr	r3, [r0]
   1cebc:	ldrb	r2, [r2, #1]
   1cec0:	ldr	r2, [r3, r2, lsl #2]
   1cec4:	add	r3, r8, r1
   1cec8:	strb	r2, [r3, #-1]
   1cecc:	ldrb	r2, [r9, r1]
   1ced0:	ldr	r7, [r0]
   1ced4:	subs	r1, r1, #2
   1ced8:	ldr	r2, [r7, r2, lsl #2]
   1cedc:	strb	r2, [r3, #-2]
   1cee0:	bne	1ceb4 <__assert_fail@plt+0xb428>
   1cee4:	b	1d154 <__assert_fail@plt+0xb6c8>
   1cee8:	mov	r0, r2
   1ceec:	mov	r1, #32
   1cef0:	mov	r2, r8
   1cef4:	bl	11918 <memset@plt>
   1cef8:	ldr	r2, [sp, #108]	; 0x6c
   1cefc:	ldr	r3, [sp, #88]	; 0x58
   1cf00:	add	r2, r2, r8
   1cf04:	ldr	r0, [fp, #20]
   1cf08:	stm	sp, {r6, r9}
   1cf0c:	mov	r8, r2
   1cf10:	mov	r1, r7
   1cf14:	str	r4, [sp, #8]
   1cf18:	str	r0, [sp, #12]
   1cf1c:	ldr	r0, [fp, #24]
   1cf20:	str	r0, [sp, #16]
   1cf24:	mov	r0, r2
   1cf28:	ldr	r2, [sp, #100]	; 0x64
   1cf2c:	bl	1b6d4 <__assert_fail@plt+0x9c48>
   1cf30:	ldr	r0, [sp, #96]	; 0x60
   1cf34:	ldr	lr, [sp, #92]	; 0x5c
   1cf38:	movw	ip, #52428	; 0xcccc
   1cf3c:	mov	r4, #-2147483648	; 0x80000000
   1cf40:	movt	ip, #3276	; 0xccc
   1cf44:	add	r8, r8, r0
   1cf48:	b	1d270 <__assert_fail@plt+0xb7e4>
   1cf4c:	movw	r5, #63636	; 0xf894
   1cf50:	movt	r5, #65535	; 0xffff
   1cf54:	sub	r5, r5, r3
   1cf58:	add	r3, r6, #100	; 0x64
   1cf5c:	cmp	lr, r5
   1cf60:	ldr	lr, [sp, #92]	; 0x5c
   1cf64:	rsblt	r3, r6, #0
   1cf68:	b	1cf98 <__assert_fail@plt+0xb50c>
   1cf6c:	cmp	r7, #6
   1cf70:	mov	r0, r7
   1cf74:	movle	r0, #6
   1cf78:	sub	r4, r0, #6
   1cf7c:	b	1bedc <__assert_fail@plt+0xa450>
   1cf80:	movw	r4, #63636	; 0xf894
   1cf84:	str	r3, [sp, #100]	; 0x64
   1cf88:	add	r3, r5, #100	; 0x64
   1cf8c:	movt	r4, #65535	; 0xffff
   1cf90:	cmp	r6, r4
   1cf94:	rsblt	r3, r5, #0
   1cf98:	ldr	r6, [fp, #12]
   1cf9c:	cmp	r9, #0
   1cfa0:	mov	r4, #0
   1cfa4:	moveq	r9, r6
   1cfa8:	mov	r6, #0
   1cfac:	cmp	r9, #43	; 0x2b
   1cfb0:	bne	1c694 <__assert_fail@plt+0xac08>
   1cfb4:	ldr	r8, [sp, #100]	; 0x64
   1cfb8:	mov	r4, #0
   1cfbc:	movw	r5, #9999	; 0x270f
   1cfc0:	mov	ip, #0
   1cfc4:	cmp	r8, r7
   1cfc8:	movwlt	r4, #1
   1cfcc:	cmp	r8, #2
   1cfd0:	movweq	r5, #99	; 0x63
   1cfd4:	cmp	r5, r3
   1cfd8:	movwcc	ip, #1
   1cfdc:	orr	r4, r4, ip
   1cfe0:	b	1d230 <__assert_fail@plt+0xb7a4>
   1cfe4:	cmp	r4, #0
   1cfe8:	beq	1d20c <__assert_fail@plt+0xb780>
   1cfec:	movw	r6, #10000	; 0x2710
   1cff0:	mov	lr, r8
   1cff4:	mla	r3, r3, r6, r4
   1cff8:	mov	r6, #100	; 0x64
   1cffc:	mov	r4, #1
   1d000:	mla	r3, ip, r6, r3
   1d004:	mov	r6, #9
   1d008:	str	r6, [sp, #100]	; 0x64
   1d00c:	mov	r6, #20
   1d010:	b	1d230 <__assert_fail@plt+0xb7a4>
   1d014:	sub	r1, fp, #48	; 0x30
   1d018:	mov	r2, r4
   1d01c:	mov	r5, lr
   1d020:	bl	11708 <memcpy@plt>
   1d024:	movw	ip, #52428	; 0xcccc
   1d028:	mov	lr, r5
   1d02c:	movt	ip, #3276	; 0xccc
   1d030:	ldr	r0, [sp, #108]	; 0x6c
   1d034:	mov	r2, #0
   1d038:	add	r5, r0, r4
   1d03c:	cmp	r9, #45	; 0x2d
   1d040:	subne	r0, r7, r4
   1d044:	bicne	r2, r0, r0, asr #31
   1d048:	sub	r0, r8, r4
   1d04c:	cmp	r2, r0
   1d050:	bcs	1d2ac <__assert_fail@plt+0xb820>
   1d054:	cmp	r5, #0
   1d058:	beq	1d080 <__assert_fail@plt+0xb5f4>
   1d05c:	cmp	r2, #0
   1d060:	beq	1d080 <__assert_fail@plt+0xb5f4>
   1d064:	uxtb	r0, r9
   1d068:	cmp	r0, #48	; 0x30
   1d06c:	cmpne	r0, #43	; 0x2b
   1d070:	bne	1d1d8 <__assert_fail@plt+0xb74c>
   1d074:	mov	r0, r5
   1d078:	mov	r1, #48	; 0x30
   1d07c:	b	1d1e0 <__assert_fail@plt+0xb754>
   1d080:	mov	r8, r5
   1d084:	b	1d200 <__assert_fail@plt+0xb774>
   1d088:	ldr	r1, [sp, #64]	; 0x40
   1d08c:	mov	r0, r8
   1d090:	mov	r2, r4
   1d094:	bl	11708 <memcpy@plt>
   1d098:	movw	ip, #52428	; 0xcccc
   1d09c:	mov	lr, r7
   1d0a0:	movt	ip, #3276	; 0xccc
   1d0a4:	b	1d154 <__assert_fail@plt+0xb6c8>
   1d0a8:	mov	r0, r8
   1d0ac:	mov	r1, #32
   1d0b0:	mov	r2, r5
   1d0b4:	bl	11918 <memset@plt>
   1d0b8:	ldr	r8, [sp, #108]	; 0x6c
   1d0bc:	ldr	r9, [sp, #32]
   1d0c0:	ldr	r1, [sp, #100]	; 0x64
   1d0c4:	ldr	r2, [sp, #96]	; 0x60
   1d0c8:	movw	ip, #52428	; 0xcccc
   1d0cc:	mov	lr, r7
   1d0d0:	movt	ip, #3276	; 0xccc
   1d0d4:	add	r8, r8, r5
   1d0d8:	tst	r1, #1
   1d0dc:	beq	1ce60 <__assert_fail@plt+0xb3d4>
   1d0e0:	cmp	r4, #0
   1d0e4:	beq	1d154 <__assert_fail@plt+0xb6c8>
   1d0e8:	bl	11840 <__ctype_tolower_loc@plt>
   1d0ec:	tst	r4, #1
   1d0f0:	mov	r1, r4
   1d0f4:	beq	1d110 <__assert_fail@plt+0xb684>
   1d0f8:	ldr	r2, [sp, #64]	; 0x40
   1d0fc:	sub	r1, r4, #1
   1d100:	ldr	r3, [r0]
   1d104:	ldrb	r2, [r2, r1]
   1d108:	ldr	r2, [r3, r2, lsl #2]
   1d10c:	strb	r2, [r8, r1]
   1d110:	movw	ip, #52428	; 0xcccc
   1d114:	cmp	r4, #1
   1d118:	mov	lr, r7
   1d11c:	movt	ip, #3276	; 0xccc
   1d120:	beq	1d154 <__assert_fail@plt+0xb6c8>
   1d124:	add	r2, r9, r1
   1d128:	ldr	r3, [r0]
   1d12c:	ldrb	r2, [r2, #1]
   1d130:	ldr	r2, [r3, r2, lsl #2]
   1d134:	add	r3, r8, r1
   1d138:	strb	r2, [r3, #-1]
   1d13c:	ldrb	r2, [r9, r1]
   1d140:	ldr	r7, [r0]
   1d144:	subs	r1, r1, #2
   1d148:	ldr	r2, [r7, r2, lsl #2]
   1d14c:	strb	r2, [r3, #-2]
   1d150:	bne	1d124 <__assert_fail@plt+0xb698>
   1d154:	add	r8, r8, r4
   1d158:	add	lr, r6, lr
   1d15c:	mov	r4, #-2147483648	; 0x80000000
   1d160:	mov	r6, sl
   1d164:	b	1b7d8 <__assert_fail@plt+0x9d4c>
   1d168:	mov	r0, r8
   1d16c:	mov	r1, #32
   1d170:	mov	r2, r4
   1d174:	mov	r6, lr
   1d178:	bl	11918 <memset@plt>
   1d17c:	ldr	r8, [sp, #108]	; 0x6c
   1d180:	movw	ip, #52428	; 0xcccc
   1d184:	mov	lr, r6
   1d188:	movt	ip, #3276	; 0xccc
   1d18c:	add	r8, r8, r4
   1d190:	mov	r4, #-2147483648	; 0x80000000
   1d194:	mov	r0, #10
   1d198:	strb	r0, [r8], #1
   1d19c:	b	1d270 <__assert_fail@plt+0xb7e4>
   1d1a0:	mov	r0, r8
   1d1a4:	mov	r1, #32
   1d1a8:	mov	r2, r4
   1d1ac:	mov	r6, lr
   1d1b0:	bl	11918 <memset@plt>
   1d1b4:	ldr	r8, [sp, #108]	; 0x6c
   1d1b8:	movw	ip, #52428	; 0xcccc
   1d1bc:	mov	lr, r6
   1d1c0:	movt	ip, #3276	; 0xccc
   1d1c4:	add	r8, r8, r4
   1d1c8:	mov	r4, #-2147483648	; 0x80000000
   1d1cc:	mov	r0, #9
   1d1d0:	strb	r0, [r8], #1
   1d1d4:	b	1d270 <__assert_fail@plt+0xb7e4>
   1d1d8:	mov	r0, r5
   1d1dc:	mov	r1, #32
   1d1e0:	mov	r6, lr
   1d1e4:	mov	r7, r2
   1d1e8:	bl	11918 <memset@plt>
   1d1ec:	movw	ip, #52428	; 0xcccc
   1d1f0:	mov	r2, r7
   1d1f4:	mov	lr, r6
   1d1f8:	add	r8, r5, r7
   1d1fc:	movt	ip, #3276	; 0xccc
   1d200:	add	r0, r2, lr
   1d204:	add	lr, r0, r4
   1d208:	b	1c574 <__assert_fail@plt+0xaae8>
   1d20c:	cmp	ip, #0
   1d210:	beq	1d27c <__assert_fail@plt+0xb7f0>
   1d214:	mov	r6, #100	; 0x64
   1d218:	mov	r4, #1
   1d21c:	mov	lr, r8
   1d220:	mla	r3, r3, r6, ip
   1d224:	mov	r6, #6
   1d228:	str	r6, [sp, #100]	; 0x64
   1d22c:	mov	r6, #4
   1d230:	movw	ip, #52428	; 0xcccc
   1d234:	movt	ip, #3276	; 0xccc
   1d238:	b	1c694 <__assert_fail@plt+0xac08>
   1d23c:	mov	r0, r8
   1d240:	mov	r1, #32
   1d244:	mov	r2, r4
   1d248:	mov	r6, lr
   1d24c:	bl	11918 <memset@plt>
   1d250:	ldr	r8, [sp, #108]	; 0x6c
   1d254:	ldrb	r1, [sl]
   1d258:	movw	ip, #52428	; 0xcccc
   1d25c:	mov	lr, r6
   1d260:	movt	ip, #3276	; 0xccc
   1d264:	add	r8, r8, r4
   1d268:	mov	r4, #-2147483648	; 0x80000000
   1d26c:	strb	r1, [r8], #1
   1d270:	add	lr, r5, lr
   1d274:	mov	r6, sl
   1d278:	b	1b7d8 <__assert_fail@plt+0x9d4c>
   1d27c:	mov	r6, #3
   1d280:	b	1cbbc <__assert_fail@plt+0xb130>
   1d284:	mov	lr, #0
   1d288:	ldr	r0, [sp, #104]	; 0x68
   1d28c:	ldr	r1, [sp, #72]	; 0x48
   1d290:	cmp	r0, #0
   1d294:	cmpne	r8, #0
   1d298:	movne	r0, #0
   1d29c:	strbne	r0, [r8]
   1d2a0:	ldr	r0, [sp, #76]	; 0x4c
   1d2a4:	str	r1, [r0]
   1d2a8:	b	1d2bc <__assert_fail@plt+0xb830>
   1d2ac:	mov	r0, #34	; 0x22
   1d2b0:	ldr	r1, [sp, #76]	; 0x4c
   1d2b4:	mov	lr, #0
   1d2b8:	str	r0, [r1]
   1d2bc:	mov	r0, lr
   1d2c0:	sub	sp, fp, #28
   1d2c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d2c8:	mov	r0, #75	; 0x4b
   1d2cc:	b	1d2b0 <__assert_fail@plt+0xb824>
   1d2d0:	push	{r4, r5, fp, lr}
   1d2d4:	add	fp, sp, #8
   1d2d8:	cmp	r0, #0
   1d2dc:	beq	1d370 <__assert_fail@plt+0xb8e4>
   1d2e0:	mov	r1, #47	; 0x2f
   1d2e4:	mov	r4, r0
   1d2e8:	bl	119a8 <strrchr@plt>
   1d2ec:	cmp	r0, #0
   1d2f0:	mov	r5, r4
   1d2f4:	addne	r5, r0, #1
   1d2f8:	sub	r0, r5, r4
   1d2fc:	cmp	r0, #7
   1d300:	blt	1d354 <__assert_fail@plt+0xb8c8>
   1d304:	movw	r1, #14885	; 0x3a25
   1d308:	sub	r0, r5, #7
   1d30c:	mov	r2, #7
   1d310:	movt	r1, #2
   1d314:	bl	11a50 <strncmp@plt>
   1d318:	cmp	r0, #0
   1d31c:	bne	1d354 <__assert_fail@plt+0xb8c8>
   1d320:	movw	r1, #14893	; 0x3a2d
   1d324:	mov	r0, r5
   1d328:	mov	r2, #3
   1d32c:	movt	r1, #2
   1d330:	bl	11a50 <strncmp@plt>
   1d334:	cmp	r0, #0
   1d338:	beq	1d344 <__assert_fail@plt+0xb8b8>
   1d33c:	mov	r4, r5
   1d340:	b	1d354 <__assert_fail@plt+0xb8c8>
   1d344:	movw	r0, #16848	; 0x41d0
   1d348:	add	r4, r5, #3
   1d34c:	movt	r0, #3
   1d350:	str	r4, [r0]
   1d354:	movw	r0, #16852	; 0x41d4
   1d358:	movt	r0, #3
   1d35c:	str	r4, [r0]
   1d360:	movw	r0, #17008	; 0x4270
   1d364:	movt	r0, #3
   1d368:	str	r4, [r0]
   1d36c:	pop	{r4, r5, fp, pc}
   1d370:	movw	r0, #16864	; 0x41e0
   1d374:	mov	r1, #55	; 0x37
   1d378:	mov	r2, #1
   1d37c:	movt	r0, #3
   1d380:	ldr	r3, [r0]
   1d384:	movw	r0, #14829	; 0x39ed
   1d388:	movt	r0, #2
   1d38c:	bl	1178c <fwrite@plt>
   1d390:	bl	11a5c <abort@plt>
   1d394:	push	{r4, r5, r6, sl, fp, lr}
   1d398:	add	fp, sp, #16
   1d39c:	mov	r4, r0
   1d3a0:	movw	r0, #17016	; 0x4278
   1d3a4:	movt	r0, #3
   1d3a8:	cmp	r4, #0
   1d3ac:	moveq	r4, r0
   1d3b0:	bl	118e8 <__errno_location@plt>
   1d3b4:	ldr	r6, [r0]
   1d3b8:	mov	r5, r0
   1d3bc:	mov	r0, r4
   1d3c0:	mov	r1, #48	; 0x30
   1d3c4:	bl	20398 <__assert_fail@plt+0xe90c>
   1d3c8:	str	r6, [r5]
   1d3cc:	pop	{r4, r5, r6, sl, fp, pc}
   1d3d0:	movw	r1, #17016	; 0x4278
   1d3d4:	cmp	r0, #0
   1d3d8:	movt	r1, #3
   1d3dc:	movne	r1, r0
   1d3e0:	ldr	r0, [r1]
   1d3e4:	bx	lr
   1d3e8:	movw	r2, #17016	; 0x4278
   1d3ec:	cmp	r0, #0
   1d3f0:	movt	r2, #3
   1d3f4:	movne	r2, r0
   1d3f8:	str	r1, [r2]
   1d3fc:	bx	lr
   1d400:	movw	r3, #17016	; 0x4278
   1d404:	cmp	r0, #0
   1d408:	and	r2, r2, #1
   1d40c:	movt	r3, #3
   1d410:	movne	r3, r0
   1d414:	ubfx	r0, r1, #5, #3
   1d418:	and	r1, r1, #31
   1d41c:	add	ip, r3, r0, lsl #2
   1d420:	mov	r0, #1
   1d424:	ldr	r3, [ip, #8]
   1d428:	and	r0, r0, r3, lsr r1
   1d42c:	eor	r2, r0, r2
   1d430:	eor	r1, r3, r2, lsl r1
   1d434:	str	r1, [ip, #8]
   1d438:	bx	lr
   1d43c:	movw	r2, #17016	; 0x4278
   1d440:	cmp	r0, #0
   1d444:	movt	r2, #3
   1d448:	movne	r2, r0
   1d44c:	ldr	r0, [r2, #4]
   1d450:	str	r1, [r2, #4]
   1d454:	bx	lr
   1d458:	push	{fp, lr}
   1d45c:	mov	fp, sp
   1d460:	movw	r3, #17016	; 0x4278
   1d464:	cmp	r0, #0
   1d468:	movt	r3, #3
   1d46c:	movne	r3, r0
   1d470:	cmp	r1, #0
   1d474:	mov	r0, #10
   1d478:	cmpne	r2, #0
   1d47c:	str	r0, [r3]
   1d480:	bne	1d488 <__assert_fail@plt+0xb9fc>
   1d484:	bl	11a5c <abort@plt>
   1d488:	str	r1, [r3, #40]	; 0x28
   1d48c:	str	r2, [r3, #44]	; 0x2c
   1d490:	pop	{fp, pc}
   1d494:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d498:	add	fp, sp, #28
   1d49c:	sub	sp, sp, #20
   1d4a0:	mov	r7, r0
   1d4a4:	ldr	r0, [fp, #8]
   1d4a8:	movw	r5, #17016	; 0x4278
   1d4ac:	mov	r8, r3
   1d4b0:	mov	r9, r2
   1d4b4:	mov	sl, r1
   1d4b8:	movt	r5, #3
   1d4bc:	cmp	r0, #0
   1d4c0:	movne	r5, r0
   1d4c4:	bl	118e8 <__errno_location@plt>
   1d4c8:	ldr	r2, [r5, #40]	; 0x28
   1d4cc:	ldr	r3, [r5, #44]	; 0x2c
   1d4d0:	mov	r4, r0
   1d4d4:	ldm	r5, {r0, r1}
   1d4d8:	add	r5, r5, #8
   1d4dc:	ldr	r6, [r4]
   1d4e0:	stm	sp, {r0, r1, r5}
   1d4e4:	mov	r0, r7
   1d4e8:	mov	r1, sl
   1d4ec:	str	r2, [sp, #12]
   1d4f0:	str	r3, [sp, #16]
   1d4f4:	mov	r2, r9
   1d4f8:	mov	r3, r8
   1d4fc:	bl	1d50c <__assert_fail@plt+0xba80>
   1d500:	str	r6, [r4]
   1d504:	sub	sp, fp, #28
   1d508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d50c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d510:	add	fp, sp, #28
   1d514:	sub	sp, sp, #156	; 0x9c
   1d518:	mov	r5, r0
   1d51c:	add	r0, r2, #1
   1d520:	mov	r6, r1
   1d524:	mov	sl, r3
   1d528:	str	r2, [fp, #-80]	; 0xffffffb0
   1d52c:	str	r0, [sp, #72]	; 0x48
   1d530:	ldr	r0, [fp, #12]
   1d534:	and	r1, r0, #1
   1d538:	str	r1, [sp, #36]	; 0x24
   1d53c:	and	r1, r0, #4
   1d540:	str	r1, [sp, #32]
   1d544:	ubfx	r9, r0, #1, #1
   1d548:	bl	117a4 <__ctype_get_mb_cur_max@plt>
   1d54c:	str	r0, [sp, #40]	; 0x28
   1d550:	ldr	r0, [fp, #24]
   1d554:	ldr	r7, [fp, #8]
   1d558:	mov	r1, #0
   1d55c:	str	r5, [fp, #-84]	; 0xffffffac
   1d560:	str	r1, [fp, #-56]	; 0xffffffc8
   1d564:	mov	r1, #0
   1d568:	str	r1, [sp, #60]	; 0x3c
   1d56c:	mov	r1, #1
   1d570:	str	r1, [fp, #-48]	; 0xffffffd0
   1d574:	str	r0, [sp, #80]	; 0x50
   1d578:	ldr	r0, [fp, #20]
   1d57c:	str	r0, [sp, #76]	; 0x4c
   1d580:	mov	r0, #0
   1d584:	str	r0, [sp, #56]	; 0x38
   1d588:	mov	r0, #0
   1d58c:	str	r0, [fp, #-88]	; 0xffffffa8
   1d590:	mov	r0, #0
   1d594:	str	r0, [fp, #-72]	; 0xffffffb8
   1d598:	mov	r0, #0
   1d59c:	cmp	r7, #10
   1d5a0:	bhi	1e534 <__assert_fail@plt+0xcaa8>
   1d5a4:	add	r1, pc, #24
   1d5a8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1d5ac:	mov	r4, r6
   1d5b0:	mov	r8, #0
   1d5b4:	mov	r2, #1
   1d5b8:	mov	r3, #0
   1d5bc:	mov	lr, sl
   1d5c0:	ldr	pc, [r1, r7, lsl #2]
   1d5c4:	andeq	sp, r1, r8, lsl #13
   1d5c8:	ldrdeq	sp, [r1], -ip
   1d5cc:	muleq	r1, ip, r6
   1d5d0:	andeq	sp, r1, r0, lsl #13
   1d5d4:	ldrdeq	sp, [r1], -r0
   1d5d8:	andeq	sp, r1, r4, lsl #14
   1d5dc:	andeq	sp, r1, ip, lsr #13
   1d5e0:	andeq	sp, r1, r8, lsl #15
   1d5e4:	strdeq	sp, [r1], -r0
   1d5e8:	strdeq	sp, [r1], -r0
   1d5ec:	andeq	sp, r1, r8, lsl r6
   1d5f0:	movw	r0, #14975	; 0x3a7f
   1d5f4:	mov	r1, r7
   1d5f8:	movt	r0, #2
   1d5fc:	bl	1ef3c <__assert_fail@plt+0xd4b0>
   1d600:	str	r0, [sp, #76]	; 0x4c
   1d604:	movw	r0, #15957	; 0x3e55
   1d608:	mov	r1, r7
   1d60c:	movt	r0, #2
   1d610:	bl	1ef3c <__assert_fail@plt+0xd4b0>
   1d614:	str	r0, [sp, #80]	; 0x50
   1d618:	mov	r8, #0
   1d61c:	tst	r9, #1
   1d620:	bne	1d658 <__assert_fail@plt+0xbbcc>
   1d624:	ldr	r0, [sp, #76]	; 0x4c
   1d628:	ldrb	r0, [r0]
   1d62c:	cmp	r0, #0
   1d630:	beq	1d658 <__assert_fail@plt+0xbbcc>
   1d634:	ldr	r1, [sp, #76]	; 0x4c
   1d638:	mov	r8, #0
   1d63c:	add	r1, r1, #1
   1d640:	cmp	r8, r4
   1d644:	strbcc	r0, [r5, r8]
   1d648:	ldrb	r0, [r1, r8]
   1d64c:	add	r8, r8, #1
   1d650:	cmp	r0, #0
   1d654:	bne	1d640 <__assert_fail@plt+0xbbb4>
   1d658:	ldr	r6, [sp, #80]	; 0x50
   1d65c:	mov	r0, r6
   1d660:	bl	118ac <strlen@plt>
   1d664:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1d668:	str	r0, [fp, #-72]	; 0xffffffb8
   1d66c:	str	r6, [fp, #-88]	; 0xffffffa8
   1d670:	mov	r2, #1
   1d674:	mov	r3, r9
   1d678:	mov	lr, sl
   1d67c:	b	1d788 <__assert_fail@plt+0xbcfc>
   1d680:	mov	r0, #1
   1d684:	b	1d6dc <__assert_fail@plt+0xbc50>
   1d688:	mov	r7, #0
   1d68c:	mov	r8, #0
   1d690:	mov	r2, r0
   1d694:	mov	r3, #0
   1d698:	b	1d788 <__assert_fail@plt+0xbcfc>
   1d69c:	tst	r9, #1
   1d6a0:	bne	1d6dc <__assert_fail@plt+0xbc50>
   1d6a4:	mov	r2, r0
   1d6a8:	b	1d734 <__assert_fail@plt+0xbca8>
   1d6ac:	mov	r0, #1
   1d6b0:	mov	r8, #0
   1d6b4:	mov	r7, #5
   1d6b8:	mov	r2, #1
   1d6bc:	str	r0, [fp, #-72]	; 0xffffffb8
   1d6c0:	movw	r0, #14973	; 0x3a7d
   1d6c4:	movt	r0, #2
   1d6c8:	str	r0, [fp, #-88]	; 0xffffffa8
   1d6cc:	b	1d6fc <__assert_fail@plt+0xbc70>
   1d6d0:	mov	r2, #1
   1d6d4:	tst	r9, #1
   1d6d8:	beq	1d734 <__assert_fail@plt+0xbca8>
   1d6dc:	mov	r1, #1
   1d6e0:	mov	r8, #0
   1d6e4:	mov	r7, #2
   1d6e8:	mov	r2, r0
   1d6ec:	str	r1, [fp, #-72]	; 0xffffffb8
   1d6f0:	movw	r1, #15957	; 0x3e55
   1d6f4:	movt	r1, #2
   1d6f8:	str	r1, [fp, #-88]	; 0xffffffa8
   1d6fc:	mov	r3, #1
   1d700:	b	1d788 <__assert_fail@plt+0xbcfc>
   1d704:	tst	r9, #1
   1d708:	beq	1d758 <__assert_fail@plt+0xbccc>
   1d70c:	mov	r0, #1
   1d710:	mov	r8, #0
   1d714:	mov	r2, #1
   1d718:	mov	r3, #1
   1d71c:	mov	r7, #5
   1d720:	str	r0, [fp, #-72]	; 0xffffffb8
   1d724:	movw	r0, #14973	; 0x3a7d
   1d728:	movt	r0, #2
   1d72c:	str	r0, [fp, #-88]	; 0xffffffa8
   1d730:	b	1d788 <__assert_fail@plt+0xbcfc>
   1d734:	cmp	r4, #0
   1d738:	mov	r8, #1
   1d73c:	mov	r3, #0
   1d740:	mov	r7, #2
   1d744:	movne	r0, #39	; 0x27
   1d748:	strbne	r0, [r5]
   1d74c:	movw	r0, #15957	; 0x3e55
   1d750:	movt	r0, #2
   1d754:	b	1d77c <__assert_fail@plt+0xbcf0>
   1d758:	cmp	r4, #0
   1d75c:	mov	r8, #1
   1d760:	mov	r2, #1
   1d764:	mov	r7, #5
   1d768:	mov	r3, #0
   1d76c:	movne	r0, #34	; 0x22
   1d770:	strbne	r0, [r5]
   1d774:	movw	r0, #14973	; 0x3a7d
   1d778:	movt	r0, #2
   1d77c:	str	r0, [fp, #-88]	; 0xffffffa8
   1d780:	mov	r0, #1
   1d784:	str	r0, [fp, #-72]	; 0xffffffb8
   1d788:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1d78c:	eor	r6, r3, #1
   1d790:	str	r7, [fp, #-68]	; 0xffffffbc
   1d794:	str	r3, [fp, #-76]	; 0xffffffb4
   1d798:	str	r2, [sp, #84]	; 0x54
   1d79c:	str	r6, [sp, #92]	; 0x5c
   1d7a0:	cmp	r0, #0
   1d7a4:	movwne	r0, #1
   1d7a8:	and	r1, r0, r3
   1d7ac:	and	r1, r2, r1
   1d7b0:	str	r1, [sp, #48]	; 0x30
   1d7b4:	sub	r1, r7, #2
   1d7b8:	clz	r1, r1
   1d7bc:	lsr	r1, r1, #5
   1d7c0:	and	r1, r1, r3
   1d7c4:	str	r1, [sp, #64]	; 0x40
   1d7c8:	subs	r1, r7, #2
   1d7cc:	mov	r7, #0
   1d7d0:	movwne	r1, #1
   1d7d4:	orr	r6, r1, r6
   1d7d8:	and	r1, r1, r2
   1d7dc:	and	r0, r0, r1
   1d7e0:	str	r6, [sp, #68]	; 0x44
   1d7e4:	str	r0, [fp, #-60]	; 0xffffffc4
   1d7e8:	orr	r0, r1, r3
   1d7ec:	ldr	r1, [fp, #16]
   1d7f0:	eor	r0, r0, #1
   1d7f4:	clz	r1, r1
   1d7f8:	lsr	r1, r1, #5
   1d7fc:	orr	r0, r1, r0
   1d800:	str	r0, [fp, #-64]	; 0xffffffc0
   1d804:	eor	r0, r2, #1
   1d808:	str	r0, [sp, #52]	; 0x34
   1d80c:	cmn	lr, #1
   1d810:	beq	1d820 <__assert_fail@plt+0xbd94>
   1d814:	cmp	r7, lr
   1d818:	bne	1d82c <__assert_fail@plt+0xbda0>
   1d81c:	b	1e374 <__assert_fail@plt+0xc8e8>
   1d820:	ldrb	r0, [ip, r7]
   1d824:	cmp	r0, #0
   1d828:	beq	1e37c <__assert_fail@plt+0xc8f0>
   1d82c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1d830:	mov	sl, #0
   1d834:	cmp	r0, #0
   1d838:	beq	1d870 <__assert_fail@plt+0xbde4>
   1d83c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1d840:	add	r5, r7, r0
   1d844:	cmp	r0, #2
   1d848:	bcc	1d864 <__assert_fail@plt+0xbdd8>
   1d84c:	cmn	lr, #1
   1d850:	bne	1d864 <__assert_fail@plt+0xbdd8>
   1d854:	mov	r0, ip
   1d858:	bl	118ac <strlen@plt>
   1d85c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1d860:	mov	lr, r0
   1d864:	cmp	r5, lr
   1d868:	bls	1d878 <__assert_fail@plt+0xbdec>
   1d86c:	ldr	r5, [fp, #-84]	; 0xffffffac
   1d870:	mov	r0, #0
   1d874:	b	1d8c4 <__assert_fail@plt+0xbe38>
   1d878:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1d87c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1d880:	add	r0, ip, r7
   1d884:	mov	r6, r4
   1d888:	mov	r4, lr
   1d88c:	bl	118a0 <bcmp@plt>
   1d890:	ldr	r2, [sp, #92]	; 0x5c
   1d894:	cmp	r0, #0
   1d898:	ldr	r5, [fp, #-84]	; 0xffffffac
   1d89c:	mov	r1, r0
   1d8a0:	movwne	r1, #1
   1d8a4:	orr	r1, r1, r2
   1d8a8:	tst	r1, #1
   1d8ac:	beq	1e404 <__assert_fail@plt+0xc978>
   1d8b0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1d8b4:	clz	r0, r0
   1d8b8:	mov	lr, r4
   1d8bc:	mov	r4, r6
   1d8c0:	lsr	r0, r0, #5
   1d8c4:	str	r0, [fp, #-52]	; 0xffffffcc
   1d8c8:	ldrb	r6, [ip, r7]
   1d8cc:	cmp	r6, #126	; 0x7e
   1d8d0:	bhi	1de00 <__assert_fail@plt+0xc374>
   1d8d4:	add	r3, pc, #16
   1d8d8:	mov	r9, #1
   1d8dc:	mov	r2, #110	; 0x6e
   1d8e0:	mov	r0, #97	; 0x61
   1d8e4:	mov	r1, #0
   1d8e8:	ldr	pc, [r3, r6, lsl #2]
   1d8ec:	andeq	sp, r1, r0, ror #24
   1d8f0:	andeq	sp, r1, r0, lsl #28
   1d8f4:	andeq	sp, r1, r0, lsl #28
   1d8f8:	andeq	sp, r1, r0, lsl #28
   1d8fc:	andeq	sp, r1, r0, lsl #28
   1d900:	andeq	sp, r1, r0, lsl #28
   1d904:	andeq	sp, r1, r0, lsl #28
   1d908:	ldrdeq	sp, [r1], -ip
   1d90c:	andeq	sp, r1, r0, asr #24
   1d910:	andeq	sp, r1, r8, lsr ip
   1d914:	andeq	sp, r1, ip, asr #24
   1d918:	andeq	sp, r1, r8, ror #26
   1d91c:	andeq	sp, r1, r0, lsr ip
   1d920:	andeq	sp, r1, r8, asr #24
   1d924:	andeq	sp, r1, r0, lsl #28
   1d928:	andeq	sp, r1, r0, lsl #28
   1d92c:	andeq	sp, r1, r0, lsl #28
   1d930:	andeq	sp, r1, r0, lsl #28
   1d934:	andeq	sp, r1, r0, lsl #28
   1d938:	andeq	sp, r1, r0, lsl #28
   1d93c:	andeq	sp, r1, r0, lsl #28
   1d940:	andeq	sp, r1, r0, lsl #28
   1d944:	andeq	sp, r1, r0, lsl #28
   1d948:	andeq	sp, r1, r0, lsl #28
   1d94c:	andeq	sp, r1, r0, lsl #28
   1d950:	andeq	sp, r1, r0, lsl #28
   1d954:	andeq	sp, r1, r0, lsl #28
   1d958:	andeq	sp, r1, r0, lsl #28
   1d95c:	andeq	sp, r1, r0, lsl #28
   1d960:	andeq	sp, r1, r0, lsl #28
   1d964:	andeq	sp, r1, r0, lsl #28
   1d968:	andeq	sp, r1, r0, lsl #28
   1d96c:	andeq	sp, r1, r4, ror #23
   1d970:	andeq	sp, r1, r8, ror #23
   1d974:	andeq	sp, r1, r8, ror #23
   1d978:	ldrdeq	sp, [r1], -r0
   1d97c:	andeq	sp, r1, r8, ror #23
   1d980:	andeq	sp, r1, r8, ror #21
   1d984:	andeq	sp, r1, r8, ror #23
   1d988:	andeq	sp, r1, r0, ror sp
   1d98c:	andeq	sp, r1, r8, ror #23
   1d990:	andeq	sp, r1, r8, ror #23
   1d994:	andeq	sp, r1, r8, ror #23
   1d998:	andeq	sp, r1, r8, ror #21
   1d99c:	andeq	sp, r1, r8, ror #21
   1d9a0:	andeq	sp, r1, r8, ror #21
   1d9a4:	andeq	sp, r1, r8, ror #21
   1d9a8:	andeq	sp, r1, r8, ror #21
   1d9ac:	andeq	sp, r1, r8, ror #21
   1d9b0:	andeq	sp, r1, r8, ror #21
   1d9b4:	andeq	sp, r1, r8, ror #21
   1d9b8:	andeq	sp, r1, r8, ror #21
   1d9bc:	andeq	sp, r1, r8, ror #21
   1d9c0:	andeq	sp, r1, r8, ror #21
   1d9c4:	andeq	sp, r1, r8, ror #21
   1d9c8:	andeq	sp, r1, r8, ror #21
   1d9cc:	andeq	sp, r1, r8, ror #21
   1d9d0:	andeq	sp, r1, r8, ror #21
   1d9d4:	andeq	sp, r1, r8, ror #21
   1d9d8:	andeq	sp, r1, r8, ror #23
   1d9dc:	andeq	sp, r1, r8, ror #23
   1d9e0:	andeq	sp, r1, r8, ror #23
   1d9e4:	andeq	sp, r1, r8, ror #23
   1d9e8:	andeq	sp, r1, r8, lsr sp
   1d9ec:	andeq	sp, r1, r0, lsl #28
   1d9f0:	andeq	sp, r1, r8, ror #21
   1d9f4:	andeq	sp, r1, r8, ror #21
   1d9f8:	andeq	sp, r1, r8, ror #21
   1d9fc:	andeq	sp, r1, r8, ror #21
   1da00:	andeq	sp, r1, r8, ror #21
   1da04:	andeq	sp, r1, r8, ror #21
   1da08:	andeq	sp, r1, r8, ror #21
   1da0c:	andeq	sp, r1, r8, ror #21
   1da10:	andeq	sp, r1, r8, ror #21
   1da14:	andeq	sp, r1, r8, ror #21
   1da18:	andeq	sp, r1, r8, ror #21
   1da1c:	andeq	sp, r1, r8, ror #21
   1da20:	andeq	sp, r1, r8, ror #21
   1da24:	andeq	sp, r1, r8, ror #21
   1da28:	andeq	sp, r1, r8, ror #21
   1da2c:	andeq	sp, r1, r8, ror #21
   1da30:	andeq	sp, r1, r8, ror #21
   1da34:	andeq	sp, r1, r8, ror #21
   1da38:	andeq	sp, r1, r8, ror #21
   1da3c:	andeq	sp, r1, r8, ror #21
   1da40:	andeq	sp, r1, r8, ror #21
   1da44:	andeq	sp, r1, r8, ror #21
   1da48:	andeq	sp, r1, r8, ror #21
   1da4c:	andeq	sp, r1, r8, ror #21
   1da50:	andeq	sp, r1, r8, ror #21
   1da54:	andeq	sp, r1, r8, ror #21
   1da58:	andeq	sp, r1, r8, ror #23
   1da5c:	andeq	sp, r1, r0, lsl ip
   1da60:	andeq	sp, r1, r8, ror #21
   1da64:	andeq	sp, r1, r8, ror #23
   1da68:	andeq	sp, r1, r8, ror #21
   1da6c:	andeq	sp, r1, r8, ror #23
   1da70:	andeq	sp, r1, r8, ror #21
   1da74:	andeq	sp, r1, r8, ror #21
   1da78:	andeq	sp, r1, r8, ror #21
   1da7c:	andeq	sp, r1, r8, ror #21
   1da80:	andeq	sp, r1, r8, ror #21
   1da84:	andeq	sp, r1, r8, ror #21
   1da88:	andeq	sp, r1, r8, ror #21
   1da8c:	andeq	sp, r1, r8, ror #21
   1da90:	andeq	sp, r1, r8, ror #21
   1da94:	andeq	sp, r1, r8, ror #21
   1da98:	andeq	sp, r1, r8, ror #21
   1da9c:	andeq	sp, r1, r8, ror #21
   1daa0:	andeq	sp, r1, r8, ror #21
   1daa4:	andeq	sp, r1, r8, ror #21
   1daa8:	andeq	sp, r1, r8, ror #21
   1daac:	andeq	sp, r1, r8, ror #21
   1dab0:	andeq	sp, r1, r8, ror #21
   1dab4:	andeq	sp, r1, r8, ror #21
   1dab8:	andeq	sp, r1, r8, ror #21
   1dabc:	andeq	sp, r1, r8, ror #21
   1dac0:	andeq	sp, r1, r8, ror #21
   1dac4:	andeq	sp, r1, r8, ror #21
   1dac8:	andeq	sp, r1, r8, ror #21
   1dacc:	andeq	sp, r1, r8, ror #21
   1dad0:	andeq	sp, r1, r8, ror #21
   1dad4:	andeq	sp, r1, r8, ror #21
   1dad8:	andeq	sp, r1, r4, lsr #23
   1dadc:	andeq	sp, r1, r8, ror #23
   1dae0:	andeq	sp, r1, r4, lsr #23
   1dae4:	ldrdeq	sp, [r1], -r0
   1dae8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1daec:	tst	r0, #1
   1daf0:	bne	1db1c <__assert_fail@plt+0xc090>
   1daf4:	ldr	r1, [fp, #16]
   1daf8:	ubfx	r0, r6, #5, #3
   1dafc:	mov	r2, #1
   1db00:	ldr	r0, [r1, r0, lsl #2]
   1db04:	and	r1, r6, #31
   1db08:	tst	r0, r2, lsl r1
   1db0c:	beq	1db1c <__assert_fail@plt+0xc090>
   1db10:	mov	r0, r6
   1db14:	mov	r1, r9
   1db18:	b	1db30 <__assert_fail@plt+0xc0a4>
   1db1c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1db20:	mov	r1, r9
   1db24:	cmp	r0, #0
   1db28:	mov	r0, r6
   1db2c:	beq	1de70 <__assert_fail@plt+0xc3e4>
   1db30:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1db34:	tst	r2, #1
   1db38:	bne	1e440 <__assert_fail@plt+0xc9b4>
   1db3c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1db40:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1db44:	subs	r2, r2, #2
   1db48:	movwne	r2, #1
   1db4c:	orr	r2, r2, r3
   1db50:	tst	r2, #1
   1db54:	bne	1db90 <__assert_fail@plt+0xc104>
   1db58:	cmp	r8, r4
   1db5c:	movcc	r2, #39	; 0x27
   1db60:	strbcc	r2, [r5, r8]
   1db64:	add	r2, r8, #1
   1db68:	cmp	r2, r4
   1db6c:	movcc	r3, #36	; 0x24
   1db70:	strbcc	r3, [r5, r2]
   1db74:	add	r2, r8, #2
   1db78:	add	r8, r8, #3
   1db7c:	cmp	r2, r4
   1db80:	movcc	r3, #39	; 0x27
   1db84:	strbcc	r3, [r5, r2]
   1db88:	mov	r2, #1
   1db8c:	str	r2, [fp, #-56]	; 0xffffffc8
   1db90:	cmp	r8, r4
   1db94:	movcc	r2, #92	; 0x5c
   1db98:	strbcc	r2, [r5, r8]
   1db9c:	add	r8, r8, #1
   1dba0:	b	1deb4 <__assert_fail@plt+0xc428>
   1dba4:	cmp	lr, #1
   1dba8:	beq	1dbd0 <__assert_fail@plt+0xc144>
   1dbac:	mov	r9, #0
   1dbb0:	cmn	lr, #1
   1dbb4:	bne	1dbdc <__assert_fail@plt+0xc150>
   1dbb8:	ldrb	r0, [ip, #1]
   1dbbc:	cmp	r0, #0
   1dbc0:	beq	1dbd0 <__assert_fail@plt+0xc144>
   1dbc4:	mvn	lr, #0
   1dbc8:	mov	sl, #0
   1dbcc:	b	1dae8 <__assert_fail@plt+0xc05c>
   1dbd0:	mov	r9, #0
   1dbd4:	cmp	r7, #0
   1dbd8:	beq	1dbe4 <__assert_fail@plt+0xc158>
   1dbdc:	mov	sl, #0
   1dbe0:	b	1dae8 <__assert_fail@plt+0xc05c>
   1dbe4:	mov	r1, #1
   1dbe8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1dbec:	cmp	r0, #2
   1dbf0:	bne	1dc08 <__assert_fail@plt+0xc17c>
   1dbf4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1dbf8:	mov	r9, r1
   1dbfc:	tst	r0, #1
   1dc00:	beq	1dae8 <__assert_fail@plt+0xc05c>
   1dc04:	b	1e440 <__assert_fail@plt+0xc9b4>
   1dc08:	mov	r9, r1
   1dc0c:	b	1dae8 <__assert_fail@plt+0xc05c>
   1dc10:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1dc14:	cmp	r0, #2
   1dc18:	bne	1de54 <__assert_fail@plt+0xc3c8>
   1dc1c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1dc20:	tst	r0, #1
   1dc24:	bne	1e440 <__assert_fail@plt+0xc9b4>
   1dc28:	mov	sl, #0
   1dc2c:	b	1de68 <__assert_fail@plt+0xc3dc>
   1dc30:	mov	r0, #102	; 0x66
   1dc34:	b	1dedc <__assert_fail@plt+0xc450>
   1dc38:	mov	r2, #116	; 0x74
   1dc3c:	b	1dc4c <__assert_fail@plt+0xc1c0>
   1dc40:	mov	r0, #98	; 0x62
   1dc44:	b	1dedc <__assert_fail@plt+0xc450>
   1dc48:	mov	r2, #114	; 0x72
   1dc4c:	ldr	r0, [sp, #68]	; 0x44
   1dc50:	tst	r0, #1
   1dc54:	mov	r0, r2
   1dc58:	bne	1dedc <__assert_fail@plt+0xc450>
   1dc5c:	b	1e440 <__assert_fail@plt+0xc9b4>
   1dc60:	ldr	r0, [sp, #84]	; 0x54
   1dc64:	tst	r0, #1
   1dc68:	beq	1def8 <__assert_fail@plt+0xc46c>
   1dc6c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1dc70:	tst	r0, #1
   1dc74:	bne	1e52c <__assert_fail@plt+0xcaa0>
   1dc78:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1dc7c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1dc80:	subs	r0, r0, #2
   1dc84:	movwne	r0, #1
   1dc88:	orr	r0, r0, r1
   1dc8c:	tst	r0, #1
   1dc90:	bne	1dccc <__assert_fail@plt+0xc240>
   1dc94:	cmp	r8, r4
   1dc98:	movcc	r0, #39	; 0x27
   1dc9c:	strbcc	r0, [r5, r8]
   1dca0:	add	r0, r8, #1
   1dca4:	cmp	r0, r4
   1dca8:	movcc	r1, #36	; 0x24
   1dcac:	strbcc	r1, [r5, r0]
   1dcb0:	add	r0, r8, #2
   1dcb4:	add	r8, r8, #3
   1dcb8:	cmp	r0, r4
   1dcbc:	movcc	r1, #39	; 0x27
   1dcc0:	strbcc	r1, [r5, r0]
   1dcc4:	mov	r0, #1
   1dcc8:	str	r0, [fp, #-56]	; 0xffffffc8
   1dccc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1dcd0:	cmp	r8, r4
   1dcd4:	mov	r9, #0
   1dcd8:	mov	sl, #1
   1dcdc:	mov	r6, #48	; 0x30
   1dce0:	movcc	r0, #92	; 0x5c
   1dce4:	strbcc	r0, [r5, r8]
   1dce8:	add	r0, r8, #1
   1dcec:	cmp	r1, #2
   1dcf0:	beq	1e0c0 <__assert_fail@plt+0xc634>
   1dcf4:	add	r1, r7, #1
   1dcf8:	cmp	r1, lr
   1dcfc:	bcs	1e0c0 <__assert_fail@plt+0xc634>
   1dd00:	ldrb	r1, [ip, r1]
   1dd04:	sub	r1, r1, #48	; 0x30
   1dd08:	uxtb	r1, r1
   1dd0c:	cmp	r1, #9
   1dd10:	bhi	1e0c0 <__assert_fail@plt+0xc634>
   1dd14:	cmp	r0, r4
   1dd18:	movcc	r1, #48	; 0x30
   1dd1c:	strbcc	r1, [r5, r0]
   1dd20:	add	r0, r8, #2
   1dd24:	add	r8, r8, #3
   1dd28:	cmp	r0, r4
   1dd2c:	movcc	r1, #48	; 0x30
   1dd30:	strbcc	r1, [r5, r0]
   1dd34:	b	1dae8 <__assert_fail@plt+0xc05c>
   1dd38:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1dd3c:	mov	sl, #0
   1dd40:	mov	r6, #63	; 0x3f
   1dd44:	cmp	r0, #5
   1dd48:	beq	1e0c8 <__assert_fail@plt+0xc63c>
   1dd4c:	cmp	r0, #2
   1dd50:	bne	1e170 <__assert_fail@plt+0xc6e4>
   1dd54:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1dd58:	mov	r9, #0
   1dd5c:	tst	r0, #1
   1dd60:	beq	1dae8 <__assert_fail@plt+0xc05c>
   1dd64:	b	1e440 <__assert_fail@plt+0xc9b4>
   1dd68:	mov	r0, #118	; 0x76
   1dd6c:	b	1dedc <__assert_fail@plt+0xc450>
   1dd70:	mov	r0, #1
   1dd74:	mov	r6, #39	; 0x27
   1dd78:	str	r0, [sp, #60]	; 0x3c
   1dd7c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1dd80:	cmp	r0, #2
   1dd84:	bne	1df14 <__assert_fail@plt+0xc488>
   1dd88:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1dd8c:	tst	r0, #1
   1dd90:	bne	1e440 <__assert_fail@plt+0xc9b4>
   1dd94:	ldr	r2, [sp, #56]	; 0x38
   1dd98:	clz	r1, r4
   1dd9c:	mov	sl, #0
   1dda0:	mov	r9, #1
   1dda4:	lsr	r1, r1, #5
   1dda8:	cmp	r2, #0
   1ddac:	mov	r0, r2
   1ddb0:	movwne	r0, #1
   1ddb4:	orrs	r0, r0, r1
   1ddb8:	moveq	r2, r4
   1ddbc:	moveq	r4, r0
   1ddc0:	cmp	r8, r4
   1ddc4:	str	r2, [sp, #56]	; 0x38
   1ddc8:	movcc	r0, #39	; 0x27
   1ddcc:	strbcc	r0, [r5, r8]
   1ddd0:	add	r0, r8, #1
   1ddd4:	cmp	r0, r4
   1ddd8:	movcc	r1, #92	; 0x5c
   1dddc:	strbcc	r1, [r5, r0]
   1dde0:	add	r0, r8, #2
   1dde4:	add	r8, r8, #3
   1dde8:	cmp	r0, r4
   1ddec:	movcc	r1, #39	; 0x27
   1ddf0:	strbcc	r1, [r5, r0]
   1ddf4:	mov	r0, #0
   1ddf8:	str	r0, [fp, #-56]	; 0xffffffc8
   1ddfc:	b	1dae8 <__assert_fail@plt+0xc05c>
   1de00:	ldr	r0, [sp, #40]	; 0x28
   1de04:	str	r4, [sp, #88]	; 0x58
   1de08:	cmp	r0, #1
   1de0c:	bne	1df1c <__assert_fail@plt+0xc490>
   1de10:	str	lr, [sp, #28]
   1de14:	bl	11870 <__ctype_b_loc@plt>
   1de18:	ldr	r0, [r0]
   1de1c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1de20:	mov	r2, #1
   1de24:	add	r0, r0, r6, lsl #1
   1de28:	ldrb	r0, [r0, #1]
   1de2c:	ubfx	r9, r0, #6, #1
   1de30:	ldr	r0, [sp, #52]	; 0x34
   1de34:	cmp	r2, #1
   1de38:	orr	r0, r9, r0
   1de3c:	bhi	1e178 <__assert_fail@plt+0xc6ec>
   1de40:	tst	r0, #1
   1de44:	beq	1e178 <__assert_fail@plt+0xc6ec>
   1de48:	ldr	lr, [sp, #28]
   1de4c:	ldr	r4, [sp, #88]	; 0x58
   1de50:	b	1dae8 <__assert_fail@plt+0xc05c>
   1de54:	ldr	r1, [sp, #48]	; 0x30
   1de58:	mov	sl, #0
   1de5c:	mov	r0, #92	; 0x5c
   1de60:	cmp	r1, #0
   1de64:	beq	1dedc <__assert_fail@plt+0xc450>
   1de68:	mov	r6, #92	; 0x5c
   1de6c:	mov	r9, #0
   1de70:	cmp	sl, #0
   1de74:	bne	1deac <__assert_fail@plt+0xc420>
   1de78:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1de7c:	tst	r0, #1
   1de80:	beq	1deac <__assert_fail@plt+0xc420>
   1de84:	cmp	r8, r4
   1de88:	movcc	r0, #39	; 0x27
   1de8c:	strbcc	r0, [r5, r8]
   1de90:	add	r0, r8, #1
   1de94:	add	r8, r8, #2
   1de98:	cmp	r0, r4
   1de9c:	movcc	r1, #39	; 0x27
   1dea0:	strbcc	r1, [r5, r0]
   1dea4:	mov	r0, #0
   1dea8:	str	r0, [fp, #-56]	; 0xffffffc8
   1deac:	mov	r1, r9
   1deb0:	mov	r0, r6
   1deb4:	cmp	r8, r4
   1deb8:	strbcc	r0, [r5, r8]
   1debc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1dec0:	add	r8, r8, #1
   1dec4:	and	r0, r0, r1
   1dec8:	str	r0, [fp, #-48]	; 0xffffffd0
   1decc:	add	r7, r7, #1
   1ded0:	cmn	lr, #1
   1ded4:	bne	1d814 <__assert_fail@plt+0xbd88>
   1ded8:	b	1d820 <__assert_fail@plt+0xbd94>
   1dedc:	ldr	r1, [sp, #84]	; 0x54
   1dee0:	mov	sl, #0
   1dee4:	mov	r9, #0
   1dee8:	tst	r1, #1
   1deec:	mov	r1, #0
   1def0:	beq	1dae8 <__assert_fail@plt+0xc05c>
   1def4:	b	1db30 <__assert_fail@plt+0xc0a4>
   1def8:	ldr	r0, [sp, #36]	; 0x24
   1defc:	mov	r6, #0
   1df00:	mov	sl, #0
   1df04:	mov	r9, #0
   1df08:	cmp	r0, #0
   1df0c:	beq	1dae8 <__assert_fail@plt+0xc05c>
   1df10:	b	1decc <__assert_fail@plt+0xc440>
   1df14:	mov	r9, #1
   1df18:	b	1dae8 <__assert_fail@plt+0xc05c>
   1df1c:	mov	r0, #0
   1df20:	cmn	lr, #1
   1df24:	sub	r4, fp, #40	; 0x28
   1df28:	str	r0, [fp, #-36]	; 0xffffffdc
   1df2c:	str	r0, [fp, #-40]	; 0xffffffd8
   1df30:	bne	1df44 <__assert_fail@plt+0xc4b8>
   1df34:	mov	r0, ip
   1df38:	bl	118ac <strlen@plt>
   1df3c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1df40:	mov	lr, r0
   1df44:	ldr	r0, [sp, #72]	; 0x48
   1df48:	mov	r9, #1
   1df4c:	mov	r2, #0
   1df50:	str	lr, [sp, #28]
   1df54:	add	r0, r0, r7
   1df58:	str	r0, [sp, #20]
   1df5c:	b	1dfa0 <__assert_fail@plt+0xc514>
   1df60:	ldr	r5, [sp, #44]	; 0x2c
   1df64:	add	r5, r0, r5
   1df68:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1df6c:	bl	11768 <iswprint@plt>
   1df70:	cmp	r0, #0
   1df74:	sub	r4, fp, #40	; 0x28
   1df78:	movwne	r0, #1
   1df7c:	and	r9, r9, r0
   1df80:	mov	r0, r4
   1df84:	bl	11714 <mbsinit@plt>
   1df88:	mov	r2, r5
   1df8c:	ldr	lr, [sp, #28]
   1df90:	ldr	r5, [fp, #-84]	; 0xffffffac
   1df94:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1df98:	cmp	r0, #0
   1df9c:	bne	1de30 <__assert_fail@plt+0xc3a4>
   1dfa0:	add	r0, r2, r7
   1dfa4:	str	r2, [sp, #44]	; 0x2c
   1dfa8:	mov	r3, r4
   1dfac:	add	r1, ip, r0
   1dfb0:	str	r0, [sp, #24]
   1dfb4:	sub	r2, lr, r0
   1dfb8:	sub	r0, fp, #44	; 0x2c
   1dfbc:	bl	21744 <__assert_fail@plt+0xfcb8>
   1dfc0:	cmp	r0, #0
   1dfc4:	beq	1e368 <__assert_fail@plt+0xc8dc>
   1dfc8:	cmn	r0, #1
   1dfcc:	beq	1e324 <__assert_fail@plt+0xc898>
   1dfd0:	ldr	lr, [sp, #28]
   1dfd4:	cmn	r0, #2
   1dfd8:	beq	1e32c <__assert_fail@plt+0xc8a0>
   1dfdc:	ldr	r2, [sp, #64]	; 0x40
   1dfe0:	ldr	r4, [sp, #88]	; 0x58
   1dfe4:	ldr	ip, [sp, #84]	; 0x54
   1dfe8:	cmp	r0, #2
   1dfec:	mov	r1, #0
   1dff0:	movwcc	r1, #1
   1dff4:	eor	r2, r2, #1
   1dff8:	orrs	r1, r2, r1
   1dffc:	bne	1df60 <__assert_fail@plt+0xc4d4>
   1e000:	ldr	r1, [sp, #44]	; 0x2c
   1e004:	ldr	r2, [sp, #20]
   1e008:	add	r1, r2, r1
   1e00c:	sub	r2, r0, #1
   1e010:	b	1e020 <__assert_fail@plt+0xc594>
   1e014:	add	r1, r1, #1
   1e018:	subs	r2, r2, #1
   1e01c:	beq	1df60 <__assert_fail@plt+0xc4d4>
   1e020:	ldrb	r3, [r1]
   1e024:	sub	r3, r3, #91	; 0x5b
   1e028:	cmp	r3, #33	; 0x21
   1e02c:	bhi	1e014 <__assert_fail@plt+0xc588>
   1e030:	add	r5, pc, #0
   1e034:	ldr	pc, [r5, r3, lsl #2]
   1e038:	andeq	lr, r1, ip, lsl r4
   1e03c:	andeq	lr, r1, ip, lsl r4
   1e040:	andeq	lr, r1, r4, lsl r0
   1e044:	andeq	lr, r1, ip, lsl r4
   1e048:	andeq	lr, r1, r4, lsl r0
   1e04c:	andeq	lr, r1, ip, lsl r4
   1e050:	andeq	lr, r1, r4, lsl r0
   1e054:	andeq	lr, r1, r4, lsl r0
   1e058:	andeq	lr, r1, r4, lsl r0
   1e05c:	andeq	lr, r1, r4, lsl r0
   1e060:	andeq	lr, r1, r4, lsl r0
   1e064:	andeq	lr, r1, r4, lsl r0
   1e068:	andeq	lr, r1, r4, lsl r0
   1e06c:	andeq	lr, r1, r4, lsl r0
   1e070:	andeq	lr, r1, r4, lsl r0
   1e074:	andeq	lr, r1, r4, lsl r0
   1e078:	andeq	lr, r1, r4, lsl r0
   1e07c:	andeq	lr, r1, r4, lsl r0
   1e080:	andeq	lr, r1, r4, lsl r0
   1e084:	andeq	lr, r1, r4, lsl r0
   1e088:	andeq	lr, r1, r4, lsl r0
   1e08c:	andeq	lr, r1, r4, lsl r0
   1e090:	andeq	lr, r1, r4, lsl r0
   1e094:	andeq	lr, r1, r4, lsl r0
   1e098:	andeq	lr, r1, r4, lsl r0
   1e09c:	andeq	lr, r1, r4, lsl r0
   1e0a0:	andeq	lr, r1, r4, lsl r0
   1e0a4:	andeq	lr, r1, r4, lsl r0
   1e0a8:	andeq	lr, r1, r4, lsl r0
   1e0ac:	andeq	lr, r1, r4, lsl r0
   1e0b0:	andeq	lr, r1, r4, lsl r0
   1e0b4:	andeq	lr, r1, r4, lsl r0
   1e0b8:	andeq	lr, r1, r4, lsl r0
   1e0bc:	andeq	lr, r1, ip, lsl r4
   1e0c0:	mov	r8, r0
   1e0c4:	b	1dae8 <__assert_fail@plt+0xc05c>
   1e0c8:	ldr	r0, [sp, #32]
   1e0cc:	cmp	r0, #0
   1e0d0:	beq	1e170 <__assert_fail@plt+0xc6e4>
   1e0d4:	add	r0, r7, #2
   1e0d8:	cmp	r0, lr
   1e0dc:	bcs	1e170 <__assert_fail@plt+0xc6e4>
   1e0e0:	add	r1, r7, ip
   1e0e4:	ldrb	r1, [r1, #1]
   1e0e8:	cmp	r1, #63	; 0x3f
   1e0ec:	bne	1e170 <__assert_fail@plt+0xc6e4>
   1e0f0:	ldrb	r9, [ip, r0]
   1e0f4:	sub	r2, r9, #33	; 0x21
   1e0f8:	cmp	r2, #29
   1e0fc:	bhi	1e170 <__assert_fail@plt+0xc6e4>
   1e100:	movw	r1, #20929	; 0x51c1
   1e104:	mov	r3, #1
   1e108:	movt	r1, #14336	; 0x3800
   1e10c:	tst	r1, r3, lsl r2
   1e110:	beq	1e170 <__assert_fail@plt+0xc6e4>
   1e114:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1e118:	tst	r1, #1
   1e11c:	bne	1e440 <__assert_fail@plt+0xc9b4>
   1e120:	cmp	r8, r4
   1e124:	add	r2, r8, #1
   1e128:	mov	r6, r9
   1e12c:	mov	r7, r0
   1e130:	mov	r9, #0
   1e134:	movcc	r1, #63	; 0x3f
   1e138:	strbcc	r1, [r5, r8]
   1e13c:	cmp	r2, r4
   1e140:	movcc	r1, #34	; 0x22
   1e144:	strbcc	r1, [r5, r2]
   1e148:	add	r2, r8, #2
   1e14c:	cmp	r2, r4
   1e150:	movcc	r1, #34	; 0x22
   1e154:	strbcc	r1, [r5, r2]
   1e158:	add	r2, r8, #3
   1e15c:	add	r8, r8, #4
   1e160:	cmp	r2, r4
   1e164:	movcc	r1, #63	; 0x3f
   1e168:	strbcc	r1, [r5, r2]
   1e16c:	b	1dae8 <__assert_fail@plt+0xc05c>
   1e170:	mov	r9, #0
   1e174:	b	1dae8 <__assert_fail@plt+0xc05c>
   1e178:	ldr	lr, [sp, #28]
   1e17c:	ldr	r4, [fp, #-56]	; 0xffffffc8
   1e180:	add	r1, r2, r7
   1e184:	mov	r2, #0
   1e188:	str	r1, [sp, #44]	; 0x2c
   1e18c:	tst	r0, #1
   1e190:	bne	1e2ac <__assert_fail@plt+0xc820>
   1e194:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1e198:	tst	r1, #1
   1e19c:	bne	1e43c <__assert_fail@plt+0xc9b0>
   1e1a0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1e1a4:	subs	r2, r1, #2
   1e1a8:	movwne	r2, #1
   1e1ac:	orr	r2, r2, r4
   1e1b0:	tst	r2, #1
   1e1b4:	bne	1e1f8 <__assert_fail@plt+0xc76c>
   1e1b8:	ldr	r1, [sp, #88]	; 0x58
   1e1bc:	add	r2, r8, #1
   1e1c0:	mov	r4, #1
   1e1c4:	cmp	r8, r1
   1e1c8:	movcc	r1, #39	; 0x27
   1e1cc:	strbcc	r1, [r5, r8]
   1e1d0:	ldr	r1, [sp, #88]	; 0x58
   1e1d4:	cmp	r2, r1
   1e1d8:	movcc	r1, #36	; 0x24
   1e1dc:	strbcc	r1, [r5, r2]
   1e1e0:	ldr	r1, [sp, #88]	; 0x58
   1e1e4:	add	r2, r8, #2
   1e1e8:	add	r8, r8, #3
   1e1ec:	cmp	r2, r1
   1e1f0:	movcc	r1, #39	; 0x27
   1e1f4:	strbcc	r1, [r5, r2]
   1e1f8:	ldr	r1, [sp, #88]	; 0x58
   1e1fc:	add	r2, r8, #1
   1e200:	cmp	r8, r1
   1e204:	movcc	r1, #92	; 0x5c
   1e208:	strbcc	r1, [r5, r8]
   1e20c:	ldr	r1, [sp, #88]	; 0x58
   1e210:	cmp	r2, r1
   1e214:	bcs	1e228 <__assert_fail@plt+0xc79c>
   1e218:	uxtb	r3, r6
   1e21c:	mov	r1, #48	; 0x30
   1e220:	orr	r3, r1, r3, lsr #6
   1e224:	strb	r3, [r5, r2]
   1e228:	ldr	r1, [sp, #88]	; 0x58
   1e22c:	add	r2, r8, #2
   1e230:	add	r8, r8, #3
   1e234:	cmp	r2, r1
   1e238:	lsrcc	r3, r6, #3
   1e23c:	movcc	r1, #6
   1e240:	bficc	r3, r1, #3, #29
   1e244:	mov	r1, #6
   1e248:	bfi	r6, r1, #3, #29
   1e24c:	strbcc	r3, [r5, r2]
   1e250:	mov	r2, #1
   1e254:	b	1e2d4 <__assert_fail@plt+0xc848>
   1e258:	ldr	r1, [sp, #88]	; 0x58
   1e25c:	ldr	r5, [fp, #-84]	; 0xffffffac
   1e260:	ldr	r4, [sp, #88]	; 0x58
   1e264:	cmp	r8, r1
   1e268:	movcc	r1, #39	; 0x27
   1e26c:	strbcc	r1, [r5, r8]
   1e270:	add	r1, r8, #1
   1e274:	add	r8, r8, #2
   1e278:	cmp	r1, r4
   1e27c:	movcc	r4, #39	; 0x27
   1e280:	strbcc	r4, [r5, r1]
   1e284:	mov	r4, #0
   1e288:	ldr	r1, [sp, #88]	; 0x58
   1e28c:	cmp	r8, r1
   1e290:	ldr	r1, [sp, #72]	; 0x48
   1e294:	strbcc	r6, [r5, r8]
   1e298:	add	r8, r8, #1
   1e29c:	ldrb	r6, [r1, r7]
   1e2a0:	mov	r7, r3
   1e2a4:	tst	r0, #1
   1e2a8:	beq	1e194 <__assert_fail@plt+0xc708>
   1e2ac:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1e2b0:	tst	r1, #1
   1e2b4:	beq	1e2cc <__assert_fail@plt+0xc840>
   1e2b8:	ldr	r1, [sp, #88]	; 0x58
   1e2bc:	cmp	r8, r1
   1e2c0:	movcc	r1, #92	; 0x5c
   1e2c4:	strbcc	r1, [r5, r8]
   1e2c8:	add	r8, r8, #1
   1e2cc:	mov	r1, #0
   1e2d0:	str	r1, [fp, #-52]	; 0xffffffcc
   1e2d4:	ldr	r1, [sp, #44]	; 0x2c
   1e2d8:	add	r3, r7, #1
   1e2dc:	and	sl, r2, #1
   1e2e0:	cmp	r1, r3
   1e2e4:	bls	1e308 <__assert_fail@plt+0xc87c>
   1e2e8:	cmp	sl, #0
   1e2ec:	mvn	r5, r4
   1e2f0:	movwne	sl, #1
   1e2f4:	orr	r5, r5, sl
   1e2f8:	tst	r5, #1
   1e2fc:	beq	1e258 <__assert_fail@plt+0xc7cc>
   1e300:	ldr	r5, [fp, #-84]	; 0xffffffac
   1e304:	b	1e288 <__assert_fail@plt+0xc7fc>
   1e308:	str	r4, [fp, #-56]	; 0xffffffc8
   1e30c:	ldr	r4, [sp, #88]	; 0x58
   1e310:	cmp	sl, #0
   1e314:	movwne	sl, #1
   1e318:	cmp	sl, #0
   1e31c:	beq	1de78 <__assert_fail@plt+0xc3ec>
   1e320:	b	1deac <__assert_fail@plt+0xc420>
   1e324:	mov	r9, #0
   1e328:	b	1e368 <__assert_fail@plt+0xc8dc>
   1e32c:	ldr	r0, [sp, #24]
   1e330:	mov	r9, #0
   1e334:	cmp	lr, r0
   1e338:	bls	1e368 <__assert_fail@plt+0xc8dc>
   1e33c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1e340:	ldr	r2, [sp, #44]	; 0x2c
   1e344:	add	r0, ip, r7
   1e348:	ldrb	r1, [r0, r2]
   1e34c:	cmp	r1, #0
   1e350:	beq	1de30 <__assert_fail@plt+0xc3a4>
   1e354:	add	r2, r2, #1
   1e358:	add	r1, r7, r2
   1e35c:	cmp	r1, lr
   1e360:	bcc	1e348 <__assert_fail@plt+0xc8bc>
   1e364:	b	1de30 <__assert_fail@plt+0xc3a4>
   1e368:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1e36c:	ldr	r2, [sp, #44]	; 0x2c
   1e370:	b	1de30 <__assert_fail@plt+0xc3a4>
   1e374:	mov	lr, r7
   1e378:	b	1e380 <__assert_fail@plt+0xc8f4>
   1e37c:	mvn	lr, #0
   1e380:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1e384:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1e388:	eor	r0, r1, #2
   1e38c:	orr	r0, r0, r8
   1e390:	clz	r0, r0
   1e394:	lsr	r0, r0, #5
   1e398:	tst	r2, r0
   1e39c:	bne	1e440 <__assert_fail@plt+0xc9b4>
   1e3a0:	subs	r0, r1, #2
   1e3a4:	movwne	r0, #1
   1e3a8:	orr	r0, r2, r0
   1e3ac:	tst	r0, #1
   1e3b0:	ldreq	r0, [sp, #60]	; 0x3c
   1e3b4:	eoreq	r0, r0, #1
   1e3b8:	tsteq	r0, #1
   1e3bc:	bne	1e4d4 <__assert_fail@plt+0xca48>
   1e3c0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e3c4:	mov	sl, lr
   1e3c8:	tst	r0, #1
   1e3cc:	bne	1e4a0 <__assert_fail@plt+0xca14>
   1e3d0:	ldr	r6, [sp, #56]	; 0x38
   1e3d4:	mov	r9, #0
   1e3d8:	cmp	r6, #0
   1e3dc:	beq	1e4cc <__assert_fail@plt+0xca40>
   1e3e0:	ldr	r0, [sp, #84]	; 0x54
   1e3e4:	mov	r1, #0
   1e3e8:	mov	r7, #2
   1e3ec:	cmp	r4, #0
   1e3f0:	str	r1, [fp, #-48]	; 0xffffffd0
   1e3f4:	mov	r1, #0
   1e3f8:	str	r1, [fp, #-76]	; 0xffffffb4
   1e3fc:	beq	1d59c <__assert_fail@plt+0xbb10>
   1e400:	b	1e4d4 <__assert_fail@plt+0xca48>
   1e404:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1e408:	ldr	r1, [fp, #12]
   1e40c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1e410:	mov	lr, r4
   1e414:	mov	r4, r6
   1e418:	b	1e460 <__assert_fail@plt+0xc9d4>
   1e41c:	tst	ip, #1
   1e420:	ldr	r5, [fp, #-84]	; 0xffffffac
   1e424:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1e428:	ldr	r1, [fp, #12]
   1e42c:	mov	r0, #2
   1e430:	movwne	r0, #4
   1e434:	mov	r2, r0
   1e438:	b	1e460 <__assert_fail@plt+0xc9d4>
   1e43c:	ldr	r4, [sp, #88]	; 0x58
   1e440:	ldr	r1, [sp, #84]	; 0x54
   1e444:	mov	r0, #2
   1e448:	tst	r1, #1
   1e44c:	movwne	r0, #4
   1e450:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1e454:	ldr	r1, [fp, #12]
   1e458:	cmp	r2, #2
   1e45c:	moveq	r2, r0
   1e460:	mov	r0, #0
   1e464:	bic	r1, r1, #2
   1e468:	str	r2, [sp]
   1e46c:	mov	r2, ip
   1e470:	mov	r3, lr
   1e474:	str	r0, [sp, #8]
   1e478:	ldr	r0, [sp, #76]	; 0x4c
   1e47c:	str	r1, [sp, #4]
   1e480:	mov	r1, r4
   1e484:	str	r0, [sp, #12]
   1e488:	ldr	r0, [sp, #80]	; 0x50
   1e48c:	str	r0, [sp, #16]
   1e490:	mov	r0, r5
   1e494:	bl	1d50c <__assert_fail@plt+0xba80>
   1e498:	mov	r8, r0
   1e49c:	b	1e520 <__assert_fail@plt+0xca94>
   1e4a0:	mov	r0, #5
   1e4a4:	ldr	r1, [sp, #56]	; 0x38
   1e4a8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1e4ac:	mov	r3, sl
   1e4b0:	str	r0, [sp]
   1e4b4:	ldr	r0, [fp, #12]
   1e4b8:	str	r0, [sp, #4]
   1e4bc:	ldr	r0, [fp, #16]
   1e4c0:	str	r0, [sp, #8]
   1e4c4:	ldr	r0, [sp, #76]	; 0x4c
   1e4c8:	b	1e484 <__assert_fail@plt+0xc9f8>
   1e4cc:	mov	r0, #0
   1e4d0:	str	r0, [fp, #-76]	; 0xffffffb4
   1e4d4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1e4d8:	cmp	r1, #0
   1e4dc:	beq	1e514 <__assert_fail@plt+0xca88>
   1e4e0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1e4e4:	tst	r0, #1
   1e4e8:	bne	1e514 <__assert_fail@plt+0xca88>
   1e4ec:	ldrb	r0, [r1]
   1e4f0:	cmp	r0, #0
   1e4f4:	beq	1e514 <__assert_fail@plt+0xca88>
   1e4f8:	add	r1, r1, #1
   1e4fc:	cmp	r8, r4
   1e500:	strbcc	r0, [r5, r8]
   1e504:	add	r8, r8, #1
   1e508:	ldrb	r0, [r1], #1
   1e50c:	cmp	r0, #0
   1e510:	bne	1e4fc <__assert_fail@plt+0xca70>
   1e514:	cmp	r8, r4
   1e518:	movcc	r0, #0
   1e51c:	strbcc	r0, [r5, r8]
   1e520:	mov	r0, r8
   1e524:	sub	sp, fp, #28
   1e528:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e52c:	mov	r0, #4
   1e530:	b	1e450 <__assert_fail@plt+0xc9c4>
   1e534:	bl	11a5c <abort@plt>
   1e538:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e53c:	add	fp, sp, #28
   1e540:	sub	sp, sp, #28
   1e544:	movw	r5, #17016	; 0x4278
   1e548:	cmp	r2, #0
   1e54c:	mov	r4, r1
   1e550:	mov	r7, r0
   1e554:	str	r0, [sp, #20]
   1e558:	movt	r5, #3
   1e55c:	movne	r5, r2
   1e560:	bl	118e8 <__errno_location@plt>
   1e564:	mov	sl, r0
   1e568:	ldr	r2, [r5, #40]	; 0x28
   1e56c:	ldr	r3, [r5, #44]	; 0x2c
   1e570:	ldm	r5, {r0, r1}
   1e574:	orr	r8, r1, #1
   1e578:	add	r9, r5, #8
   1e57c:	mov	r1, #0
   1e580:	ldr	r6, [sl]
   1e584:	stm	sp, {r0, r8, r9}
   1e588:	mov	r0, #0
   1e58c:	str	r2, [sp, #12]
   1e590:	str	r3, [sp, #16]
   1e594:	mov	r2, r7
   1e598:	mov	r3, r4
   1e59c:	str	r6, [sp, #24]
   1e5a0:	mov	r6, r4
   1e5a4:	bl	1d50c <__assert_fail@plt+0xba80>
   1e5a8:	add	r7, r0, #1
   1e5ac:	mov	r0, r7
   1e5b0:	bl	1ff68 <__assert_fail@plt+0xe4dc>
   1e5b4:	mov	r4, r0
   1e5b8:	ldr	r0, [r5]
   1e5bc:	ldr	r2, [r5, #44]	; 0x2c
   1e5c0:	ldr	r1, [r5, #40]	; 0x28
   1e5c4:	mov	r3, r6
   1e5c8:	stm	sp, {r0, r8, r9}
   1e5cc:	str	r2, [sp, #16]
   1e5d0:	ldr	r2, [sp, #20]
   1e5d4:	str	r1, [sp, #12]
   1e5d8:	mov	r0, r4
   1e5dc:	mov	r1, r7
   1e5e0:	bl	1d50c <__assert_fail@plt+0xba80>
   1e5e4:	ldr	r0, [sp, #24]
   1e5e8:	str	r0, [sl]
   1e5ec:	mov	r0, r4
   1e5f0:	sub	sp, fp, #28
   1e5f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e5f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e5fc:	add	fp, sp, #28
   1e600:	sub	sp, sp, #36	; 0x24
   1e604:	movw	r8, #17016	; 0x4278
   1e608:	cmp	r3, #0
   1e60c:	mov	r4, r2
   1e610:	str	r2, [sp, #24]
   1e614:	mov	r5, r1
   1e618:	mov	r6, r0
   1e61c:	str	r0, [sp, #20]
   1e620:	movt	r8, #3
   1e624:	movne	r8, r3
   1e628:	bl	118e8 <__errno_location@plt>
   1e62c:	str	r0, [sp, #28]
   1e630:	ldr	r1, [r8, #40]	; 0x28
   1e634:	ldr	r2, [r8, #44]	; 0x2c
   1e638:	ldr	r7, [r0]
   1e63c:	cmp	r4, #0
   1e640:	add	sl, r8, #8
   1e644:	mov	r0, #0
   1e648:	ldm	r8, {r3, r9}
   1e64c:	orreq	r9, r9, #1
   1e650:	stm	sp, {r3, r9, sl}
   1e654:	str	r1, [sp, #12]
   1e658:	str	r2, [sp, #16]
   1e65c:	mov	r1, #0
   1e660:	mov	r2, r6
   1e664:	mov	r3, r5
   1e668:	str	r7, [sp, #32]
   1e66c:	mov	r7, r5
   1e670:	bl	1d50c <__assert_fail@plt+0xba80>
   1e674:	add	r4, r0, #1
   1e678:	mov	r5, r0
   1e67c:	mov	r0, r4
   1e680:	bl	1ff68 <__assert_fail@plt+0xe4dc>
   1e684:	mov	r6, r0
   1e688:	ldr	r0, [r8]
   1e68c:	ldr	r2, [r8, #44]	; 0x2c
   1e690:	ldr	r1, [r8, #40]	; 0x28
   1e694:	mov	r3, r7
   1e698:	stm	sp, {r0, r9, sl}
   1e69c:	str	r2, [sp, #16]
   1e6a0:	ldr	r2, [sp, #20]
   1e6a4:	str	r1, [sp, #12]
   1e6a8:	mov	r0, r6
   1e6ac:	mov	r1, r4
   1e6b0:	bl	1d50c <__assert_fail@plt+0xba80>
   1e6b4:	ldr	r0, [sp, #24]
   1e6b8:	ldr	r1, [sp, #32]
   1e6bc:	ldr	r2, [sp, #28]
   1e6c0:	cmp	r0, #0
   1e6c4:	str	r1, [r2]
   1e6c8:	strne	r5, [r0]
   1e6cc:	mov	r0, r6
   1e6d0:	sub	sp, fp, #28
   1e6d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e6d8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1e6dc:	add	fp, sp, #24
   1e6e0:	movw	r5, #16788	; 0x4194
   1e6e4:	movw	r8, #16784	; 0x4190
   1e6e8:	movt	r5, #3
   1e6ec:	movt	r8, #3
   1e6f0:	ldr	r0, [r5]
   1e6f4:	ldr	r4, [r8]
   1e6f8:	cmp	r0, #2
   1e6fc:	blt	1e728 <__assert_fail@plt+0xcc9c>
   1e700:	add	r7, r4, #12
   1e704:	mov	r6, #0
   1e708:	ldr	r0, [r7, r6, lsl #3]
   1e70c:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   1e710:	ldr	r1, [r5]
   1e714:	add	r2, r6, #2
   1e718:	add	r0, r6, #1
   1e71c:	mov	r6, r0
   1e720:	cmp	r2, r1
   1e724:	blt	1e708 <__assert_fail@plt+0xcc7c>
   1e728:	ldr	r0, [r4, #4]
   1e72c:	movw	r9, #17064	; 0x42a8
   1e730:	movw	r7, #16792	; 0x4198
   1e734:	movt	r9, #3
   1e738:	movt	r7, #3
   1e73c:	cmp	r0, r9
   1e740:	beq	1e750 <__assert_fail@plt+0xccc4>
   1e744:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   1e748:	mov	r0, #256	; 0x100
   1e74c:	stm	r7, {r0, r9}
   1e750:	cmp	r4, r7
   1e754:	beq	1e764 <__assert_fail@plt+0xccd8>
   1e758:	mov	r0, r4
   1e75c:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   1e760:	str	r7, [r8]
   1e764:	mov	r0, #1
   1e768:	str	r0, [r5]
   1e76c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1e770:	movw	r3, #17016	; 0x4278
   1e774:	mvn	r2, #0
   1e778:	movt	r3, #3
   1e77c:	b	1e780 <__assert_fail@plt+0xccf4>
   1e780:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e784:	add	fp, sp, #28
   1e788:	sub	sp, sp, #44	; 0x2c
   1e78c:	mov	r7, r3
   1e790:	str	r2, [sp, #36]	; 0x24
   1e794:	str	r1, [sp, #32]
   1e798:	mov	r5, r0
   1e79c:	bl	118e8 <__errno_location@plt>
   1e7a0:	cmp	r5, #0
   1e7a4:	bmi	1e914 <__assert_fail@plt+0xce88>
   1e7a8:	cmn	r5, #-2147483647	; 0x80000001
   1e7ac:	beq	1e914 <__assert_fail@plt+0xce88>
   1e7b0:	movw	r8, #16788	; 0x4194
   1e7b4:	movw	r4, #16784	; 0x4190
   1e7b8:	str	r0, [sp, #28]
   1e7bc:	ldr	r0, [r0]
   1e7c0:	movt	r8, #3
   1e7c4:	movt	r4, #3
   1e7c8:	ldr	r1, [r8]
   1e7cc:	ldr	r6, [r4]
   1e7d0:	str	r0, [sp, #24]
   1e7d4:	cmp	r1, r5
   1e7d8:	ble	1e7e4 <__assert_fail@plt+0xcd58>
   1e7dc:	mov	sl, r6
   1e7e0:	b	1e850 <__assert_fail@plt+0xcdc4>
   1e7e4:	movw	r9, #16792	; 0x4198
   1e7e8:	mov	r0, #8
   1e7ec:	str	r1, [fp, #-32]	; 0xffffffe0
   1e7f0:	sub	r1, r5, r1
   1e7f4:	mvn	r3, #-2147483648	; 0x80000000
   1e7f8:	movt	r9, #3
   1e7fc:	str	r0, [sp]
   1e800:	add	r2, r1, #1
   1e804:	sub	r1, fp, #32
   1e808:	subs	r0, r6, r9
   1e80c:	movne	r0, r6
   1e810:	bl	20168 <__assert_fail@plt+0xe6dc>
   1e814:	mov	sl, r0
   1e818:	cmp	r6, r9
   1e81c:	str	r0, [r4]
   1e820:	bne	1e82c <__assert_fail@plt+0xcda0>
   1e824:	ldrd	r0, [r9]
   1e828:	stm	sl, {r0, r1}
   1e82c:	ldr	r1, [r8]
   1e830:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1e834:	add	r0, sl, r1, lsl #3
   1e838:	sub	r1, r2, r1
   1e83c:	lsl	r2, r1, #3
   1e840:	mov	r1, #0
   1e844:	bl	11918 <memset@plt>
   1e848:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1e84c:	str	r0, [r8]
   1e850:	mov	r9, sl
   1e854:	ldm	r7, {r0, r1}
   1e858:	orr	r8, r1, #1
   1e85c:	add	r1, r7, #8
   1e860:	ldr	r2, [r7, #40]	; 0x28
   1e864:	ldr	r3, [r7, #44]	; 0x2c
   1e868:	ldr	r6, [r9, r5, lsl #3]!
   1e86c:	str	r1, [sp, #20]
   1e870:	ldr	r4, [r9, #4]!
   1e874:	stm	sp, {r0, r8}
   1e878:	add	r0, sp, #8
   1e87c:	stm	r0, {r1, r2, r3}
   1e880:	ldr	r2, [sp, #32]
   1e884:	ldr	r3, [sp, #36]	; 0x24
   1e888:	mov	r1, r6
   1e88c:	mov	r0, r4
   1e890:	bl	1d50c <__assert_fail@plt+0xba80>
   1e894:	cmp	r6, r0
   1e898:	bhi	1e8fc <__assert_fail@plt+0xce70>
   1e89c:	add	r6, r0, #1
   1e8a0:	movw	r0, #17064	; 0x42a8
   1e8a4:	movt	r0, #3
   1e8a8:	str	r6, [sl, r5, lsl #3]
   1e8ac:	cmp	r4, r0
   1e8b0:	beq	1e8bc <__assert_fail@plt+0xce30>
   1e8b4:	mov	r0, r4
   1e8b8:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   1e8bc:	mov	r0, r6
   1e8c0:	bl	1ff68 <__assert_fail@plt+0xe4dc>
   1e8c4:	str	r0, [r9]
   1e8c8:	mov	r4, r0
   1e8cc:	add	r3, sp, #8
   1e8d0:	ldr	r0, [r7]
   1e8d4:	ldr	r1, [r7, #40]	; 0x28
   1e8d8:	ldr	r2, [r7, #44]	; 0x2c
   1e8dc:	stm	sp, {r0, r8}
   1e8e0:	ldr	r0, [sp, #20]
   1e8e4:	stm	r3, {r0, r1, r2}
   1e8e8:	ldr	r2, [sp, #32]
   1e8ec:	ldr	r3, [sp, #36]	; 0x24
   1e8f0:	mov	r0, r4
   1e8f4:	mov	r1, r6
   1e8f8:	bl	1d50c <__assert_fail@plt+0xba80>
   1e8fc:	ldr	r0, [sp, #28]
   1e900:	ldr	r1, [sp, #24]
   1e904:	str	r1, [r0]
   1e908:	mov	r0, r4
   1e90c:	sub	sp, fp, #28
   1e910:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e914:	bl	11a5c <abort@plt>
   1e918:	movw	r3, #17016	; 0x4278
   1e91c:	movt	r3, #3
   1e920:	b	1e780 <__assert_fail@plt+0xccf4>
   1e924:	movw	r3, #17016	; 0x4278
   1e928:	mov	r1, r0
   1e92c:	mov	r0, #0
   1e930:	mvn	r2, #0
   1e934:	movt	r3, #3
   1e938:	b	1e780 <__assert_fail@plt+0xccf4>
   1e93c:	movw	r3, #17016	; 0x4278
   1e940:	mov	r2, r1
   1e944:	mov	r1, r0
   1e948:	mov	r0, #0
   1e94c:	movt	r3, #3
   1e950:	b	1e780 <__assert_fail@plt+0xccf4>
   1e954:	push	{fp, lr}
   1e958:	mov	fp, sp
   1e95c:	sub	sp, sp, #48	; 0x30
   1e960:	vmov.i32	q8, #0	; 0x00000000
   1e964:	mov	ip, #32
   1e968:	mov	r3, sp
   1e96c:	mov	lr, r2
   1e970:	cmp	r1, #10
   1e974:	add	r2, r3, #16
   1e978:	vst1.64	{d16-d17}, [r3], ip
   1e97c:	vst1.64	{d16-d17}, [r2]
   1e980:	vst1.64	{d16-d17}, [r3]
   1e984:	beq	1e9a4 <__assert_fail@plt+0xcf18>
   1e988:	str	r1, [sp]
   1e98c:	mov	r3, sp
   1e990:	mov	r1, lr
   1e994:	mvn	r2, #0
   1e998:	bl	1e780 <__assert_fail@plt+0xccf4>
   1e99c:	mov	sp, fp
   1e9a0:	pop	{fp, pc}
   1e9a4:	bl	11a5c <abort@plt>
   1e9a8:	push	{r4, sl, fp, lr}
   1e9ac:	add	fp, sp, #8
   1e9b0:	sub	sp, sp, #48	; 0x30
   1e9b4:	vmov.i32	q8, #0	; 0x00000000
   1e9b8:	mov	ip, r3
   1e9bc:	mov	r3, sp
   1e9c0:	mov	lr, #32
   1e9c4:	cmp	r1, #10
   1e9c8:	add	r4, r3, #16
   1e9cc:	vst1.64	{d16-d17}, [r3], lr
   1e9d0:	vst1.64	{d16-d17}, [r4]
   1e9d4:	vst1.64	{d16-d17}, [r3]
   1e9d8:	beq	1e9f8 <__assert_fail@plt+0xcf6c>
   1e9dc:	str	r1, [sp]
   1e9e0:	mov	r1, r2
   1e9e4:	mov	r3, sp
   1e9e8:	mov	r2, ip
   1e9ec:	bl	1e780 <__assert_fail@plt+0xccf4>
   1e9f0:	sub	sp, fp, #8
   1e9f4:	pop	{r4, sl, fp, pc}
   1e9f8:	bl	11a5c <abort@plt>
   1e9fc:	push	{fp, lr}
   1ea00:	mov	fp, sp
   1ea04:	sub	sp, sp, #48	; 0x30
   1ea08:	vmov.i32	q8, #0	; 0x00000000
   1ea0c:	mov	r3, sp
   1ea10:	mov	ip, #32
   1ea14:	cmp	r0, #10
   1ea18:	add	r2, r3, #16
   1ea1c:	vst1.64	{d16-d17}, [r3], ip
   1ea20:	vst1.64	{d16-d17}, [r2]
   1ea24:	vst1.64	{d16-d17}, [r3]
   1ea28:	beq	1ea48 <__assert_fail@plt+0xcfbc>
   1ea2c:	str	r0, [sp]
   1ea30:	mov	r3, sp
   1ea34:	mov	r0, #0
   1ea38:	mvn	r2, #0
   1ea3c:	bl	1e780 <__assert_fail@plt+0xccf4>
   1ea40:	mov	sp, fp
   1ea44:	pop	{fp, pc}
   1ea48:	bl	11a5c <abort@plt>
   1ea4c:	push	{fp, lr}
   1ea50:	mov	fp, sp
   1ea54:	sub	sp, sp, #48	; 0x30
   1ea58:	vmov.i32	q8, #0	; 0x00000000
   1ea5c:	mov	r3, sp
   1ea60:	mov	ip, #32
   1ea64:	cmp	r0, #10
   1ea68:	add	lr, r3, #16
   1ea6c:	vst1.64	{d16-d17}, [r3], ip
   1ea70:	vst1.64	{d16-d17}, [lr]
   1ea74:	vst1.64	{d16-d17}, [r3]
   1ea78:	beq	1ea94 <__assert_fail@plt+0xd008>
   1ea7c:	str	r0, [sp]
   1ea80:	mov	r3, sp
   1ea84:	mov	r0, #0
   1ea88:	bl	1e780 <__assert_fail@plt+0xccf4>
   1ea8c:	mov	sp, fp
   1ea90:	pop	{fp, pc}
   1ea94:	bl	11a5c <abort@plt>
   1ea98:	push	{r4, sl, fp, lr}
   1ea9c:	add	fp, sp, #8
   1eaa0:	sub	sp, sp, #48	; 0x30
   1eaa4:	mov	lr, r0
   1eaa8:	movw	r0, #17016	; 0x4278
   1eaac:	mov	ip, r1
   1eab0:	mov	r1, #32
   1eab4:	mov	r4, #1
   1eab8:	movt	r0, #3
   1eabc:	add	r3, r0, #16
   1eac0:	vld1.64	{d16-d17}, [r0], r1
   1eac4:	vld1.64	{d20-d21}, [r0]
   1eac8:	vld1.64	{d18-d19}, [r3]
   1eacc:	mov	r3, sp
   1ead0:	add	r0, r3, #32
   1ead4:	add	r1, r3, #16
   1ead8:	vst1.64	{d20-d21}, [r0]
   1eadc:	mov	r0, #28
   1eae0:	vst1.64	{d18-d19}, [r1]
   1eae4:	mov	r1, r3
   1eae8:	and	r0, r0, r2, lsr #3
   1eaec:	and	r2, r2, #31
   1eaf0:	vst1.64	{d16-d17}, [r1], r0
   1eaf4:	ldr	r0, [r1, #8]
   1eaf8:	bic	r4, r4, r0, lsr r2
   1eafc:	eor	r0, r0, r4, lsl r2
   1eb00:	mov	r2, ip
   1eb04:	str	r0, [r1, #8]
   1eb08:	mov	r0, #0
   1eb0c:	mov	r1, lr
   1eb10:	bl	1e780 <__assert_fail@plt+0xccf4>
   1eb14:	sub	sp, fp, #8
   1eb18:	pop	{r4, sl, fp, pc}
   1eb1c:	push	{fp, lr}
   1eb20:	mov	fp, sp
   1eb24:	sub	sp, sp, #48	; 0x30
   1eb28:	mov	ip, r0
   1eb2c:	movw	r0, #17016	; 0x4278
   1eb30:	mov	r2, #32
   1eb34:	movt	r0, #3
   1eb38:	add	r3, r0, #16
   1eb3c:	vld1.64	{d16-d17}, [r0], r2
   1eb40:	vld1.64	{d20-d21}, [r0]
   1eb44:	vld1.64	{d18-d19}, [r3]
   1eb48:	mov	r3, sp
   1eb4c:	add	r0, r3, #32
   1eb50:	add	r2, r3, #16
   1eb54:	vst1.64	{d20-d21}, [r0]
   1eb58:	mov	r0, #28
   1eb5c:	vst1.64	{d18-d19}, [r2]
   1eb60:	mov	r2, r3
   1eb64:	and	r0, r0, r1, lsr #3
   1eb68:	and	r1, r1, #31
   1eb6c:	vst1.64	{d16-d17}, [r2], r0
   1eb70:	mov	r0, #1
   1eb74:	ldr	lr, [r2, #8]
   1eb78:	bic	r0, r0, lr, lsr r1
   1eb7c:	eor	r0, lr, r0, lsl r1
   1eb80:	mov	r1, ip
   1eb84:	str	r0, [r2, #8]
   1eb88:	mov	r0, #0
   1eb8c:	mvn	r2, #0
   1eb90:	bl	1e780 <__assert_fail@plt+0xccf4>
   1eb94:	mov	sp, fp
   1eb98:	pop	{fp, pc}
   1eb9c:	push	{fp, lr}
   1eba0:	mov	fp, sp
   1eba4:	sub	sp, sp, #48	; 0x30
   1eba8:	mov	r1, r0
   1ebac:	movw	r0, #17016	; 0x4278
   1ebb0:	mov	r3, #32
   1ebb4:	movt	r0, #3
   1ebb8:	add	r2, r0, #16
   1ebbc:	vld1.64	{d16-d17}, [r0], r3
   1ebc0:	mov	r3, sp
   1ebc4:	vld1.64	{d18-d19}, [r2]
   1ebc8:	vld1.64	{d20-d21}, [r0]
   1ebcc:	add	r2, r3, #16
   1ebd0:	add	r0, r3, #32
   1ebd4:	vst1.64	{d18-d19}, [r2]
   1ebd8:	vst1.64	{d20-d21}, [r0]
   1ebdc:	mov	r0, #12
   1ebe0:	mov	r2, r3
   1ebe4:	vst1.64	{d16-d17}, [r2], r0
   1ebe8:	ldr	r0, [r2]
   1ebec:	orr	r0, r0, #67108864	; 0x4000000
   1ebf0:	str	r0, [r2]
   1ebf4:	mov	r0, #0
   1ebf8:	mvn	r2, #0
   1ebfc:	bl	1e780 <__assert_fail@plt+0xccf4>
   1ec00:	mov	sp, fp
   1ec04:	pop	{fp, pc}
   1ec08:	push	{fp, lr}
   1ec0c:	mov	fp, sp
   1ec10:	sub	sp, sp, #48	; 0x30
   1ec14:	mov	ip, r1
   1ec18:	mov	r1, r0
   1ec1c:	movw	r0, #17016	; 0x4278
   1ec20:	mov	r2, #32
   1ec24:	movt	r0, #3
   1ec28:	add	r3, r0, #16
   1ec2c:	vld1.64	{d16-d17}, [r0], r2
   1ec30:	vld1.64	{d18-d19}, [r3]
   1ec34:	vld1.64	{d20-d21}, [r0]
   1ec38:	mov	r3, sp
   1ec3c:	add	r2, r3, #16
   1ec40:	add	r0, r3, #32
   1ec44:	vst1.64	{d18-d19}, [r2]
   1ec48:	vst1.64	{d20-d21}, [r0]
   1ec4c:	mov	r0, #12
   1ec50:	mov	r2, r3
   1ec54:	vst1.64	{d16-d17}, [r2], r0
   1ec58:	ldr	r0, [r2]
   1ec5c:	orr	r0, r0, #67108864	; 0x4000000
   1ec60:	str	r0, [r2]
   1ec64:	mov	r0, #0
   1ec68:	mov	r2, ip
   1ec6c:	bl	1e780 <__assert_fail@plt+0xccf4>
   1ec70:	mov	sp, fp
   1ec74:	pop	{fp, pc}
   1ec78:	push	{r4, sl, fp, lr}
   1ec7c:	add	fp, sp, #8
   1ec80:	sub	sp, sp, #96	; 0x60
   1ec84:	vmov.i32	q8, #0	; 0x00000000
   1ec88:	mov	ip, r2
   1ec8c:	mov	r2, sp
   1ec90:	mov	r4, #28
   1ec94:	cmp	r1, #10
   1ec98:	mov	r3, r2
   1ec9c:	add	lr, r2, #16
   1eca0:	vst1.64	{d16-d17}, [r3], r4
   1eca4:	vst1.64	{d16-d17}, [lr]
   1eca8:	vst1.32	{d16-d17}, [r3]
   1ecac:	beq	1ecfc <__assert_fail@plt+0xd270>
   1ecb0:	vld1.64	{d16-d17}, [r2], r4
   1ecb4:	vld1.64	{d18-d19}, [lr]
   1ecb8:	add	r3, sp, #48	; 0x30
   1ecbc:	vld1.32	{d20-d21}, [r2]
   1ecc0:	add	r2, r3, #20
   1ecc4:	add	r4, r3, #4
   1ecc8:	vst1.32	{d18-d19}, [r2]
   1eccc:	add	r2, r3, #32
   1ecd0:	vst1.32	{d16-d17}, [r4]
   1ecd4:	vst1.32	{d20-d21}, [r2]
   1ecd8:	str	r1, [sp, #48]	; 0x30
   1ecdc:	mvn	r2, #0
   1ece0:	ldr	r1, [sp, #60]	; 0x3c
   1ece4:	orr	r1, r1, #67108864	; 0x4000000
   1ece8:	str	r1, [sp, #60]	; 0x3c
   1ecec:	mov	r1, ip
   1ecf0:	bl	1e780 <__assert_fail@plt+0xccf4>
   1ecf4:	sub	sp, fp, #8
   1ecf8:	pop	{r4, sl, fp, pc}
   1ecfc:	bl	11a5c <abort@plt>
   1ed00:	push	{r4, r5, r6, sl, fp, lr}
   1ed04:	add	fp, sp, #16
   1ed08:	sub	sp, sp, #48	; 0x30
   1ed0c:	mov	ip, r3
   1ed10:	movw	r3, #17016	; 0x4278
   1ed14:	mov	r6, #32
   1ed18:	cmp	r1, #0
   1ed1c:	mov	r4, sp
   1ed20:	movt	r3, #3
   1ed24:	cmpne	r2, #0
   1ed28:	add	r5, r4, #16
   1ed2c:	add	lr, r3, #16
   1ed30:	vld1.64	{d16-d17}, [r3], r6
   1ed34:	vld1.64	{d18-d19}, [lr]
   1ed38:	vld1.64	{d20-d21}, [r3]
   1ed3c:	mov	r3, #10
   1ed40:	vst1.64	{d16-d17}, [r4], r6
   1ed44:	vst1.64	{d18-d19}, [r5]
   1ed48:	vst1.64	{d20-d21}, [r4]
   1ed4c:	str	r3, [sp]
   1ed50:	bne	1ed58 <__assert_fail@plt+0xd2cc>
   1ed54:	bl	11a5c <abort@plt>
   1ed58:	str	r2, [sp, #44]	; 0x2c
   1ed5c:	str	r1, [sp, #40]	; 0x28
   1ed60:	mov	r3, sp
   1ed64:	mov	r1, ip
   1ed68:	mvn	r2, #0
   1ed6c:	bl	1e780 <__assert_fail@plt+0xccf4>
   1ed70:	sub	sp, fp, #16
   1ed74:	pop	{r4, r5, r6, sl, fp, pc}
   1ed78:	push	{r4, r5, r6, sl, fp, lr}
   1ed7c:	add	fp, sp, #16
   1ed80:	sub	sp, sp, #48	; 0x30
   1ed84:	mov	lr, r3
   1ed88:	movw	r3, #17016	; 0x4278
   1ed8c:	mov	r6, #32
   1ed90:	cmp	r1, #0
   1ed94:	mov	r4, sp
   1ed98:	movt	r3, #3
   1ed9c:	cmpne	r2, #0
   1eda0:	add	r5, r4, #16
   1eda4:	add	ip, r3, #16
   1eda8:	vld1.64	{d16-d17}, [r3], r6
   1edac:	vld1.64	{d18-d19}, [ip]
   1edb0:	vld1.64	{d20-d21}, [r3]
   1edb4:	mov	r3, #10
   1edb8:	vst1.64	{d16-d17}, [r4], r6
   1edbc:	vst1.64	{d18-d19}, [r5]
   1edc0:	vst1.64	{d20-d21}, [r4]
   1edc4:	str	r3, [sp]
   1edc8:	bne	1edd0 <__assert_fail@plt+0xd344>
   1edcc:	bl	11a5c <abort@plt>
   1edd0:	ldr	ip, [fp, #8]
   1edd4:	str	r2, [sp, #44]	; 0x2c
   1edd8:	str	r1, [sp, #40]	; 0x28
   1eddc:	mov	r3, sp
   1ede0:	mov	r1, lr
   1ede4:	mov	r2, ip
   1ede8:	bl	1e780 <__assert_fail@plt+0xccf4>
   1edec:	sub	sp, fp, #16
   1edf0:	pop	{r4, r5, r6, sl, fp, pc}
   1edf4:	push	{r4, sl, fp, lr}
   1edf8:	add	fp, sp, #8
   1edfc:	sub	sp, sp, #48	; 0x30
   1ee00:	movw	r3, #17016	; 0x4278
   1ee04:	mov	lr, #32
   1ee08:	mov	ip, r2
   1ee0c:	cmp	r0, #0
   1ee10:	movt	r3, #3
   1ee14:	cmpne	r1, #0
   1ee18:	add	r2, r3, #16
   1ee1c:	vld1.64	{d16-d17}, [r3], lr
   1ee20:	vld1.64	{d20-d21}, [r3]
   1ee24:	vld1.64	{d18-d19}, [r2]
   1ee28:	mov	r2, sp
   1ee2c:	add	r4, r2, #16
   1ee30:	vst1.64	{d16-d17}, [r2], lr
   1ee34:	vst1.64	{d20-d21}, [r2]
   1ee38:	mov	r2, #10
   1ee3c:	vst1.64	{d18-d19}, [r4]
   1ee40:	str	r2, [sp]
   1ee44:	bne	1ee4c <__assert_fail@plt+0xd3c0>
   1ee48:	bl	11a5c <abort@plt>
   1ee4c:	str	r1, [sp, #44]	; 0x2c
   1ee50:	str	r0, [sp, #40]	; 0x28
   1ee54:	mov	r3, sp
   1ee58:	mov	r0, #0
   1ee5c:	mov	r1, ip
   1ee60:	mvn	r2, #0
   1ee64:	bl	1e780 <__assert_fail@plt+0xccf4>
   1ee68:	sub	sp, fp, #8
   1ee6c:	pop	{r4, sl, fp, pc}
   1ee70:	push	{r4, r5, fp, lr}
   1ee74:	add	fp, sp, #8
   1ee78:	sub	sp, sp, #48	; 0x30
   1ee7c:	mov	ip, r3
   1ee80:	movw	r3, #17016	; 0x4278
   1ee84:	mov	r4, #32
   1ee88:	mov	lr, r2
   1ee8c:	cmp	r0, #0
   1ee90:	movt	r3, #3
   1ee94:	cmpne	r1, #0
   1ee98:	add	r2, r3, #16
   1ee9c:	vld1.64	{d16-d17}, [r3], r4
   1eea0:	vld1.64	{d20-d21}, [r3]
   1eea4:	vld1.64	{d18-d19}, [r2]
   1eea8:	mov	r2, sp
   1eeac:	add	r5, r2, #16
   1eeb0:	vst1.64	{d16-d17}, [r2], r4
   1eeb4:	vst1.64	{d20-d21}, [r2]
   1eeb8:	mov	r2, #10
   1eebc:	vst1.64	{d18-d19}, [r5]
   1eec0:	str	r2, [sp]
   1eec4:	bne	1eecc <__assert_fail@plt+0xd440>
   1eec8:	bl	11a5c <abort@plt>
   1eecc:	str	r1, [sp, #44]	; 0x2c
   1eed0:	str	r0, [sp, #40]	; 0x28
   1eed4:	mov	r3, sp
   1eed8:	mov	r0, #0
   1eedc:	mov	r1, lr
   1eee0:	mov	r2, ip
   1eee4:	bl	1e780 <__assert_fail@plt+0xccf4>
   1eee8:	sub	sp, fp, #8
   1eeec:	pop	{r4, r5, fp, pc}
   1eef0:	movw	r3, #16800	; 0x41a0
   1eef4:	movt	r3, #3
   1eef8:	b	1e780 <__assert_fail@plt+0xccf4>
   1eefc:	movw	r3, #16800	; 0x41a0
   1ef00:	mov	r2, r1
   1ef04:	mov	r1, r0
   1ef08:	mov	r0, #0
   1ef0c:	movt	r3, #3
   1ef10:	b	1e780 <__assert_fail@plt+0xccf4>
   1ef14:	movw	r3, #16800	; 0x41a0
   1ef18:	mvn	r2, #0
   1ef1c:	movt	r3, #3
   1ef20:	b	1e780 <__assert_fail@plt+0xccf4>
   1ef24:	movw	r3, #16800	; 0x41a0
   1ef28:	mov	r1, r0
   1ef2c:	mov	r0, #0
   1ef30:	mvn	r2, #0
   1ef34:	movt	r3, #3
   1ef38:	b	1e780 <__assert_fail@plt+0xccf4>
   1ef3c:	push	{r4, r5, fp, lr}
   1ef40:	add	fp, sp, #8
   1ef44:	mov	r5, r0
   1ef48:	mov	r4, r1
   1ef4c:	mov	r0, #0
   1ef50:	mov	r2, #5
   1ef54:	mov	r1, r5
   1ef58:	bl	11720 <dcgettext@plt>
   1ef5c:	cmp	r0, r5
   1ef60:	popne	{r4, r5, fp, pc}
   1ef64:	bl	2170c <__assert_fail@plt+0xfc80>
   1ef68:	ldrb	r1, [r0]
   1ef6c:	and	r1, r1, #223	; 0xdf
   1ef70:	cmp	r1, #71	; 0x47
   1ef74:	beq	1efdc <__assert_fail@plt+0xd550>
   1ef78:	cmp	r1, #85	; 0x55
   1ef7c:	bne	1f034 <__assert_fail@plt+0xd5a8>
   1ef80:	ldrb	r1, [r0, #1]
   1ef84:	and	r1, r1, #223	; 0xdf
   1ef88:	cmp	r1, #84	; 0x54
   1ef8c:	bne	1f034 <__assert_fail@plt+0xd5a8>
   1ef90:	ldrb	r1, [r0, #2]
   1ef94:	and	r1, r1, #223	; 0xdf
   1ef98:	cmp	r1, #70	; 0x46
   1ef9c:	bne	1f034 <__assert_fail@plt+0xd5a8>
   1efa0:	ldrb	r1, [r0, #3]
   1efa4:	cmp	r1, #45	; 0x2d
   1efa8:	bne	1f034 <__assert_fail@plt+0xd5a8>
   1efac:	ldrb	r1, [r0, #4]
   1efb0:	cmp	r1, #56	; 0x38
   1efb4:	bne	1f034 <__assert_fail@plt+0xd5a8>
   1efb8:	ldrb	r0, [r0, #5]
   1efbc:	cmp	r0, #0
   1efc0:	bne	1f034 <__assert_fail@plt+0xd5a8>
   1efc4:	ldrb	r1, [r5]
   1efc8:	movw	r2, #14977	; 0x3a81
   1efcc:	movw	r0, #14981	; 0x3a85
   1efd0:	movt	r2, #2
   1efd4:	movt	r0, #2
   1efd8:	b	1f064 <__assert_fail@plt+0xd5d8>
   1efdc:	ldrb	r1, [r0, #1]
   1efe0:	and	r1, r1, #223	; 0xdf
   1efe4:	cmp	r1, #66	; 0x42
   1efe8:	bne	1f034 <__assert_fail@plt+0xd5a8>
   1efec:	ldrb	r1, [r0, #2]
   1eff0:	cmp	r1, #49	; 0x31
   1eff4:	bne	1f034 <__assert_fail@plt+0xd5a8>
   1eff8:	ldrb	r1, [r0, #3]
   1effc:	cmp	r1, #56	; 0x38
   1f000:	bne	1f034 <__assert_fail@plt+0xd5a8>
   1f004:	ldrb	r1, [r0, #4]
   1f008:	cmp	r1, #48	; 0x30
   1f00c:	bne	1f034 <__assert_fail@plt+0xd5a8>
   1f010:	ldrb	r1, [r0, #5]
   1f014:	cmp	r1, #51	; 0x33
   1f018:	bne	1f034 <__assert_fail@plt+0xd5a8>
   1f01c:	ldrb	r1, [r0, #6]
   1f020:	cmp	r1, #48	; 0x30
   1f024:	bne	1f034 <__assert_fail@plt+0xd5a8>
   1f028:	ldrb	r0, [r0, #7]
   1f02c:	cmp	r0, #0
   1f030:	beq	1f050 <__assert_fail@plt+0xd5c4>
   1f034:	movw	r1, #14973	; 0x3a7d
   1f038:	movw	r0, #15957	; 0x3e55
   1f03c:	cmp	r4, #9
   1f040:	movt	r1, #2
   1f044:	movt	r0, #2
   1f048:	moveq	r0, r1
   1f04c:	pop	{r4, r5, fp, pc}
   1f050:	ldrb	r1, [r5]
   1f054:	movw	r2, #14985	; 0x3a89
   1f058:	movw	r0, #14989	; 0x3a8d
   1f05c:	movt	r2, #2
   1f060:	movt	r0, #2
   1f064:	cmp	r1, #96	; 0x60
   1f068:	moveq	r0, r2
   1f06c:	pop	{r4, r5, fp, pc}
   1f070:	push	{r4, r5, fp, lr}
   1f074:	add	fp, sp, #8
   1f078:	mov	r4, #0
   1f07c:	mov	r5, r0
   1f080:	mov	r1, #524288	; 0x80000
   1f084:	str	r4, [r0, #4]
   1f088:	movw	r0, #14375	; 0x3827
   1f08c:	movt	r0, #2
   1f090:	bl	215cc <__assert_fail@plt+0xfb40>
   1f094:	cmn	r0, #1
   1f098:	str	r0, [r5]
   1f09c:	ble	1f0a8 <__assert_fail@plt+0xd61c>
   1f0a0:	mov	r0, r4
   1f0a4:	pop	{r4, r5, fp, pc}
   1f0a8:	mov	r0, #0
   1f0ac:	mov	r1, #0
   1f0b0:	mov	r4, #0
   1f0b4:	bl	1187c <getcwd@plt>
   1f0b8:	cmp	r0, #0
   1f0bc:	str	r0, [r5, #4]
   1f0c0:	mvneq	r4, #0
   1f0c4:	mov	r0, r4
   1f0c8:	pop	{r4, r5, fp, pc}
   1f0cc:	ldr	r1, [r0]
   1f0d0:	cmp	r1, #0
   1f0d4:	bmi	1f0e0 <__assert_fail@plt+0xd654>
   1f0d8:	mov	r0, r1
   1f0dc:	b	119f0 <fchdir@plt>
   1f0e0:	ldr	r0, [r0, #4]
   1f0e4:	b	21154 <__assert_fail@plt+0xf6c8>
   1f0e8:	push	{r4, sl, fp, lr}
   1f0ec:	add	fp, sp, #8
   1f0f0:	mov	r4, r0
   1f0f4:	ldr	r0, [r0]
   1f0f8:	cmp	r0, #0
   1f0fc:	bmi	1f104 <__assert_fail@plt+0xd678>
   1f100:	bl	11a68 <close@plt>
   1f104:	ldr	r0, [r4, #4]
   1f108:	pop	{r4, sl, fp, lr}
   1f10c:	b	1a8f0 <__assert_fail@plt+0x8e64>
   1f110:	push	{r4, r5, fp, lr}
   1f114:	add	fp, sp, #8
   1f118:	mov	r4, r1
   1f11c:	bl	11894 <getfilecon@plt>
   1f120:	cmp	r0, #10
   1f124:	beq	1f13c <__assert_fail@plt+0xd6b0>
   1f128:	cmp	r0, #0
   1f12c:	bne	1f180 <__assert_fail@plt+0xd6f4>
   1f130:	bl	118e8 <__errno_location@plt>
   1f134:	mov	r1, #95	; 0x5f
   1f138:	b	1f178 <__assert_fail@plt+0xd6ec>
   1f13c:	ldr	r5, [r4]
   1f140:	movw	r1, #15076	; 0x3ae4
   1f144:	movt	r1, #2
   1f148:	mov	r0, r5
   1f14c:	bl	116b4 <strcmp@plt>
   1f150:	mov	r1, r0
   1f154:	mov	r0, #10
   1f158:	cmp	r1, #0
   1f15c:	popne	{r4, r5, fp, pc}
   1f160:	mov	r0, r5
   1f164:	bl	11a14 <freecon@plt>
   1f168:	mov	r0, #0
   1f16c:	str	r0, [r4]
   1f170:	bl	118e8 <__errno_location@plt>
   1f174:	mov	r1, #61	; 0x3d
   1f178:	str	r1, [r0]
   1f17c:	mvn	r0, #0
   1f180:	pop	{r4, r5, fp, pc}
   1f184:	push	{r4, r5, fp, lr}
   1f188:	add	fp, sp, #8
   1f18c:	mov	r4, r1
   1f190:	bl	11804 <lgetfilecon@plt>
   1f194:	cmp	r0, #10
   1f198:	beq	1f1b0 <__assert_fail@plt+0xd724>
   1f19c:	cmp	r0, #0
   1f1a0:	bne	1f1f4 <__assert_fail@plt+0xd768>
   1f1a4:	bl	118e8 <__errno_location@plt>
   1f1a8:	mov	r1, #95	; 0x5f
   1f1ac:	b	1f1ec <__assert_fail@plt+0xd760>
   1f1b0:	ldr	r5, [r4]
   1f1b4:	movw	r1, #15076	; 0x3ae4
   1f1b8:	movt	r1, #2
   1f1bc:	mov	r0, r5
   1f1c0:	bl	116b4 <strcmp@plt>
   1f1c4:	mov	r1, r0
   1f1c8:	mov	r0, #10
   1f1cc:	cmp	r1, #0
   1f1d0:	popne	{r4, r5, fp, pc}
   1f1d4:	mov	r0, r5
   1f1d8:	bl	11a14 <freecon@plt>
   1f1dc:	mov	r0, #0
   1f1e0:	str	r0, [r4]
   1f1e4:	bl	118e8 <__errno_location@plt>
   1f1e8:	mov	r1, #61	; 0x3d
   1f1ec:	str	r1, [r0]
   1f1f0:	mvn	r0, #0
   1f1f4:	pop	{r4, r5, fp, pc}
   1f1f8:	push	{r4, r5, fp, lr}
   1f1fc:	add	fp, sp, #8
   1f200:	mov	r4, r1
   1f204:	bl	11738 <fgetfilecon@plt>
   1f208:	cmp	r0, #10
   1f20c:	beq	1f224 <__assert_fail@plt+0xd798>
   1f210:	cmp	r0, #0
   1f214:	bne	1f268 <__assert_fail@plt+0xd7dc>
   1f218:	bl	118e8 <__errno_location@plt>
   1f21c:	mov	r1, #95	; 0x5f
   1f220:	b	1f260 <__assert_fail@plt+0xd7d4>
   1f224:	ldr	r5, [r4]
   1f228:	movw	r1, #15076	; 0x3ae4
   1f22c:	movt	r1, #2
   1f230:	mov	r0, r5
   1f234:	bl	116b4 <strcmp@plt>
   1f238:	mov	r1, r0
   1f23c:	mov	r0, #10
   1f240:	cmp	r1, #0
   1f244:	popne	{r4, r5, fp, pc}
   1f248:	mov	r0, r5
   1f24c:	bl	11a14 <freecon@plt>
   1f250:	mov	r0, #0
   1f254:	str	r0, [r4]
   1f258:	bl	118e8 <__errno_location@plt>
   1f25c:	mov	r1, #61	; 0x3d
   1f260:	str	r1, [r0]
   1f264:	mvn	r0, #0
   1f268:	pop	{r4, r5, fp, pc}
   1f26c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f270:	add	fp, sp, #24
   1f274:	mov	r4, r0
   1f278:	cmp	r0, #0
   1f27c:	beq	1f2a0 <__assert_fail@plt+0xd814>
   1f280:	mov	r0, r4
   1f284:	bl	118ac <strlen@plt>
   1f288:	add	r5, r0, #1
   1f28c:	cmp	r5, #58	; 0x3a
   1f290:	bls	1f2a4 <__assert_fail@plt+0xd818>
   1f294:	add	r0, r0, #10
   1f298:	bic	r0, r0, #3
   1f29c:	b	1f2a8 <__assert_fail@plt+0xd81c>
   1f2a0:	mov	r5, #0
   1f2a4:	mov	r0, #64	; 0x40
   1f2a8:	bl	2057c <__assert_fail@plt+0xeaf0>
   1f2ac:	mov	r6, r0
   1f2b0:	cmp	r0, #0
   1f2b4:	beq	1f2f0 <__assert_fail@plt+0xd864>
   1f2b8:	cmp	r4, #0
   1f2bc:	mov	r0, r4
   1f2c0:	mov	r8, #0
   1f2c4:	mov	r7, r6
   1f2c8:	movwne	r0, #1
   1f2cc:	str	r8, [r6]
   1f2d0:	strb	r0, [r6, #4]
   1f2d4:	strb	r8, [r7, #5]!
   1f2d8:	beq	1f2f0 <__assert_fail@plt+0xd864>
   1f2dc:	mov	r0, r7
   1f2e0:	mov	r1, r4
   1f2e4:	mov	r2, r5
   1f2e8:	bl	11708 <memcpy@plt>
   1f2ec:	strb	r8, [r7, r5]
   1f2f0:	mov	r0, r6
   1f2f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f2f8:	push	{r4, sl, fp, lr}
   1f2fc:	add	fp, sp, #8
   1f300:	cmp	r0, #2
   1f304:	popcc	{r4, sl, fp, pc}
   1f308:	ldr	r4, [r0]
   1f30c:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   1f310:	cmp	r4, #0
   1f314:	mov	r0, r4
   1f318:	bne	1f308 <__assert_fail@plt+0xd87c>
   1f31c:	pop	{r4, sl, fp, pc}
   1f320:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f324:	add	fp, sp, #28
   1f328:	sub	sp, sp, #4
   1f32c:	mov	sl, r2
   1f330:	mov	r7, r1
   1f334:	cmp	r0, #0
   1f338:	beq	1f400 <__assert_fail@plt+0xd974>
   1f33c:	mov	r6, r0
   1f340:	bl	1f448 <__assert_fail@plt+0xd9bc>
   1f344:	cmp	r0, #0
   1f348:	beq	1f414 <__assert_fail@plt+0xd988>
   1f34c:	mov	r4, r0
   1f350:	mov	r0, r7
   1f354:	mov	r1, sl
   1f358:	bl	11744 <localtime_r@plt>
   1f35c:	mov	r7, #1
   1f360:	cmp	r0, #0
   1f364:	mov	r9, #1
   1f368:	beq	1f37c <__assert_fail@plt+0xd8f0>
   1f36c:	mov	r0, r6
   1f370:	mov	r1, sl
   1f374:	bl	1f594 <__assert_fail@plt+0xdb08>
   1f378:	eor	r9, r0, #1
   1f37c:	cmp	r4, #1
   1f380:	beq	1f3e4 <__assert_fail@plt+0xd958>
   1f384:	bl	118e8 <__errno_location@plt>
   1f388:	mov	r6, r0
   1f38c:	ldr	r8, [r0]
   1f390:	ldrb	r0, [r4, #4]
   1f394:	cmp	r0, #0
   1f398:	beq	1f420 <__assert_fail@plt+0xd994>
   1f39c:	movw	r0, #12878	; 0x324e
   1f3a0:	add	r1, r4, #5
   1f3a4:	mov	r2, #1
   1f3a8:	movt	r0, #2
   1f3ac:	bl	118c4 <setenv@plt>
   1f3b0:	cmp	r0, #0
   1f3b4:	beq	1f434 <__assert_fail@plt+0xd9a8>
   1f3b8:	ldr	r8, [r6]
   1f3bc:	mov	r7, #0
   1f3c0:	cmp	r4, #2
   1f3c4:	bcc	1f3e0 <__assert_fail@plt+0xd954>
   1f3c8:	ldr	r5, [r4]
   1f3cc:	mov	r0, r4
   1f3d0:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   1f3d4:	cmp	r5, #0
   1f3d8:	mov	r4, r5
   1f3dc:	bne	1f3c8 <__assert_fail@plt+0xd93c>
   1f3e0:	str	r8, [r6]
   1f3e4:	cmp	r7, #0
   1f3e8:	moveq	sl, r7
   1f3ec:	cmp	r9, #0
   1f3f0:	movwne	sl, #0
   1f3f4:	mov	r0, sl
   1f3f8:	sub	sp, fp, #28
   1f3fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f400:	mov	r0, r7
   1f404:	mov	r1, sl
   1f408:	sub	sp, fp, #28
   1f40c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f410:	b	11690 <gmtime_r@plt>
   1f414:	mov	r0, #0
   1f418:	sub	sp, fp, #28
   1f41c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f420:	movw	r0, #12878	; 0x324e
   1f424:	movt	r0, #2
   1f428:	bl	11a44 <unsetenv@plt>
   1f42c:	cmp	r0, #0
   1f430:	bne	1f3b8 <__assert_fail@plt+0xd92c>
   1f434:	bl	11774 <tzset@plt>
   1f438:	mov	r7, #1
   1f43c:	cmp	r4, #2
   1f440:	bcs	1f3c8 <__assert_fail@plt+0xd93c>
   1f444:	b	1f3e0 <__assert_fail@plt+0xd954>
   1f448:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f44c:	add	fp, sp, #28
   1f450:	sub	sp, sp, #4
   1f454:	mov	r4, r0
   1f458:	movw	r0, #12878	; 0x324e
   1f45c:	movt	r0, #2
   1f460:	bl	117f8 <getenv@plt>
   1f464:	mov	r6, r0
   1f468:	ldrb	r0, [r4, #4]
   1f46c:	cmp	r6, #0
   1f470:	beq	1f4b4 <__assert_fail@plt+0xda28>
   1f474:	cmp	r0, #0
   1f478:	beq	1f490 <__assert_fail@plt+0xda04>
   1f47c:	add	r0, r4, #5
   1f480:	mov	r1, r6
   1f484:	bl	116b4 <strcmp@plt>
   1f488:	cmp	r0, #0
   1f48c:	beq	1f568 <__assert_fail@plt+0xdadc>
   1f490:	mov	r0, r6
   1f494:	bl	118ac <strlen@plt>
   1f498:	add	r8, r0, #1
   1f49c:	mov	r9, #1
   1f4a0:	cmp	r8, #58	; 0x3a
   1f4a4:	bls	1f4c4 <__assert_fail@plt+0xda38>
   1f4a8:	add	r0, r0, #10
   1f4ac:	bic	r0, r0, #3
   1f4b0:	b	1f4c8 <__assert_fail@plt+0xda3c>
   1f4b4:	mov	r9, #0
   1f4b8:	cmp	r0, #0
   1f4bc:	mov	r8, #0
   1f4c0:	beq	1f568 <__assert_fail@plt+0xdadc>
   1f4c4:	mov	r0, #64	; 0x40
   1f4c8:	bl	2057c <__assert_fail@plt+0xeaf0>
   1f4cc:	cmp	r0, #0
   1f4d0:	beq	1f560 <__assert_fail@plt+0xdad4>
   1f4d4:	mov	sl, #0
   1f4d8:	mov	r7, r0
   1f4dc:	strb	r9, [r0, #4]
   1f4e0:	mov	r5, r0
   1f4e4:	cmp	r9, #0
   1f4e8:	str	sl, [r0]
   1f4ec:	strb	sl, [r7, #5]!
   1f4f0:	beq	1f508 <__assert_fail@plt+0xda7c>
   1f4f4:	mov	r0, r7
   1f4f8:	mov	r1, r6
   1f4fc:	mov	r2, r8
   1f500:	bl	11708 <memcpy@plt>
   1f504:	strb	sl, [r7, r8]
   1f508:	ldrb	r0, [r4, #4]
   1f50c:	cmp	r0, #0
   1f510:	beq	1f570 <__assert_fail@plt+0xdae4>
   1f514:	movw	r0, #12878	; 0x324e
   1f518:	add	r1, r4, #5
   1f51c:	mov	r2, #1
   1f520:	movt	r0, #2
   1f524:	bl	118c4 <setenv@plt>
   1f528:	cmp	r0, #0
   1f52c:	beq	1f584 <__assert_fail@plt+0xdaf8>
   1f530:	bl	118e8 <__errno_location@plt>
   1f534:	ldr	r6, [r0]
   1f538:	mov	r4, r0
   1f53c:	cmp	r5, #2
   1f540:	bcc	1f55c <__assert_fail@plt+0xdad0>
   1f544:	ldr	r7, [r5]
   1f548:	mov	r0, r5
   1f54c:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   1f550:	cmp	r7, #0
   1f554:	mov	r5, r7
   1f558:	bne	1f544 <__assert_fail@plt+0xdab8>
   1f55c:	str	r6, [r4]
   1f560:	mov	r5, #0
   1f564:	b	1f588 <__assert_fail@plt+0xdafc>
   1f568:	mov	r5, #1
   1f56c:	b	1f588 <__assert_fail@plt+0xdafc>
   1f570:	movw	r0, #12878	; 0x324e
   1f574:	movt	r0, #2
   1f578:	bl	11a44 <unsetenv@plt>
   1f57c:	cmp	r0, #0
   1f580:	bne	1f530 <__assert_fail@plt+0xdaa4>
   1f584:	bl	11774 <tzset@plt>
   1f588:	mov	r0, r5
   1f58c:	sub	sp, fp, #28
   1f590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f594:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f598:	add	fp, sp, #28
   1f59c:	sub	sp, sp, #4
   1f5a0:	ldr	r7, [r1, #40]	; 0x28
   1f5a4:	mov	r8, #1
   1f5a8:	cmp	r7, #0
   1f5ac:	beq	1f64c <__assert_fail@plt+0xdbc0>
   1f5b0:	mov	r5, r1
   1f5b4:	mov	r6, r0
   1f5b8:	cmp	r7, r1
   1f5bc:	bcc	1f5cc <__assert_fail@plt+0xdb40>
   1f5c0:	add	r0, r5, #44	; 0x2c
   1f5c4:	cmp	r7, r0
   1f5c8:	bcc	1f64c <__assert_fail@plt+0xdbc0>
   1f5cc:	ldrb	r0, [r7]
   1f5d0:	cmp	r0, #0
   1f5d4:	beq	1f640 <__assert_fail@plt+0xdbb4>
   1f5d8:	add	r4, r6, #5
   1f5dc:	mov	r0, r4
   1f5e0:	mov	r1, r7
   1f5e4:	bl	116b4 <strcmp@plt>
   1f5e8:	cmp	r0, #0
   1f5ec:	beq	1f648 <__assert_fail@plt+0xdbbc>
   1f5f0:	ldrb	r0, [r4]
   1f5f4:	cmp	r0, #0
   1f5f8:	bne	1f614 <__assert_fail@plt+0xdb88>
   1f5fc:	add	r0, r6, #5
   1f600:	cmp	r4, r0
   1f604:	bne	1f658 <__assert_fail@plt+0xdbcc>
   1f608:	ldrb	r0, [r6, #4]
   1f60c:	cmp	r0, #0
   1f610:	beq	1f658 <__assert_fail@plt+0xdbcc>
   1f614:	mov	r0, r4
   1f618:	bl	118ac <strlen@plt>
   1f61c:	add	r4, r0, r4
   1f620:	ldrb	r0, [r4, #1]!
   1f624:	cmp	r0, #0
   1f628:	bne	1f5dc <__assert_fail@plt+0xdb50>
   1f62c:	ldr	r0, [r6]
   1f630:	cmp	r0, #0
   1f634:	addne	r4, r0, #5
   1f638:	movne	r6, r0
   1f63c:	b	1f5dc <__assert_fail@plt+0xdb50>
   1f640:	movw	r4, #10686	; 0x29be
   1f644:	movt	r4, #2
   1f648:	str	r4, [r5, #40]	; 0x28
   1f64c:	mov	r0, r8
   1f650:	sub	sp, fp, #28
   1f654:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f658:	sub	r0, r6, r4
   1f65c:	add	sl, r0, #64	; 0x40
   1f660:	mov	r0, r7
   1f664:	bl	118ac <strlen@plt>
   1f668:	add	r9, r0, #1
   1f66c:	cmp	r9, sl
   1f670:	bge	1f690 <__assert_fail@plt+0xdc04>
   1f674:	mov	r0, r4
   1f678:	mov	r1, r7
   1f67c:	mov	r2, r9
   1f680:	bl	11708 <memcpy@plt>
   1f684:	mov	r0, #0
   1f688:	strb	r0, [r4, r9]
   1f68c:	b	1f648 <__assert_fail@plt+0xdbbc>
   1f690:	add	r0, r0, #10
   1f694:	cmp	r9, #59	; 0x3b
   1f698:	bic	r0, r0, #3
   1f69c:	movwcc	r0, #64	; 0x40
   1f6a0:	bl	2057c <__assert_fail@plt+0xeaf0>
   1f6a4:	cmp	r0, #0
   1f6a8:	beq	1f6e8 <__assert_fail@plt+0xdc5c>
   1f6ac:	mov	sl, r0
   1f6b0:	mov	r0, #1
   1f6b4:	mov	r1, r7
   1f6b8:	mov	r2, r9
   1f6bc:	strh	r0, [sl, #4]
   1f6c0:	mov	r0, #0
   1f6c4:	add	r4, sl, #5
   1f6c8:	str	r0, [sl]
   1f6cc:	mov	r0, r4
   1f6d0:	bl	11708 <memcpy@plt>
   1f6d4:	mov	r0, #0
   1f6d8:	strb	r0, [r4, r9]
   1f6dc:	str	sl, [r6]
   1f6e0:	strb	r0, [sl, #4]
   1f6e4:	b	1f648 <__assert_fail@plt+0xdbbc>
   1f6e8:	mov	r8, #0
   1f6ec:	str	r8, [r6]
   1f6f0:	b	1f64c <__assert_fail@plt+0xdbc0>
   1f6f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f6f8:	add	fp, sp, #28
   1f6fc:	sub	sp, sp, #52	; 0x34
   1f700:	mov	r4, r1
   1f704:	cmp	r0, #0
   1f708:	beq	1f814 <__assert_fail@plt+0xdd88>
   1f70c:	mov	r6, r0
   1f710:	bl	1f448 <__assert_fail@plt+0xd9bc>
   1f714:	cmp	r0, #0
   1f718:	beq	1f80c <__assert_fail@plt+0xdd80>
   1f71c:	mov	r8, r0
   1f720:	mov	r0, #32
   1f724:	mov	r1, r4
   1f728:	add	r5, sp, #8
   1f72c:	vld1.32	{d16-d17}, [r1], r0
   1f730:	mov	r2, r5
   1f734:	vst1.32	{d16-d17}, [r2], r0
   1f738:	ldr	r0, [r4, #16]
   1f73c:	ldr	r3, [r4, #20]
   1f740:	str	r0, [sp, #24]
   1f744:	mvn	r0, #0
   1f748:	str	r0, [sp, #36]	; 0x24
   1f74c:	str	r3, [sp, #28]
   1f750:	ldr	r0, [r1]
   1f754:	str	r0, [r2]
   1f758:	mov	r0, r5
   1f75c:	bl	116d8 <mktime@plt>
   1f760:	mov	r9, r0
   1f764:	ldr	r0, [sp, #36]	; 0x24
   1f768:	mov	sl, #1
   1f76c:	mov	r1, #1
   1f770:	cmp	r0, #0
   1f774:	bmi	1f788 <__assert_fail@plt+0xdcfc>
   1f778:	add	r1, sp, #8
   1f77c:	mov	r0, r6
   1f780:	bl	1f594 <__assert_fail@plt+0xdb08>
   1f784:	eor	r1, r0, #1
   1f788:	cmp	r8, #1
   1f78c:	beq	1f800 <__assert_fail@plt+0xdd74>
   1f790:	str	r1, [sp, #4]
   1f794:	bl	118e8 <__errno_location@plt>
   1f798:	mov	r6, r0
   1f79c:	ldr	r7, [r0]
   1f7a0:	ldrb	r0, [r8, #4]
   1f7a4:	cmp	r0, #0
   1f7a8:	beq	1f854 <__assert_fail@plt+0xddc8>
   1f7ac:	movw	r0, #12878	; 0x324e
   1f7b0:	add	r1, r8, #5
   1f7b4:	mov	r2, #1
   1f7b8:	movt	r0, #2
   1f7bc:	bl	118c4 <setenv@plt>
   1f7c0:	cmp	r0, #0
   1f7c4:	beq	1f868 <__assert_fail@plt+0xdddc>
   1f7c8:	ldr	r0, [r6]
   1f7cc:	mov	sl, #0
   1f7d0:	str	r0, [sp]
   1f7d4:	cmp	r8, #2
   1f7d8:	bcc	1f7f4 <__assert_fail@plt+0xdd68>
   1f7dc:	ldr	r7, [r8]
   1f7e0:	mov	r0, r8
   1f7e4:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   1f7e8:	cmp	r7, #0
   1f7ec:	mov	r8, r7
   1f7f0:	bne	1f7dc <__assert_fail@plt+0xdd50>
   1f7f4:	ldr	r0, [sp]
   1f7f8:	ldr	r1, [sp, #4]
   1f7fc:	str	r0, [r6]
   1f800:	eor	r0, sl, #1
   1f804:	orrs	r0, r1, r0
   1f808:	beq	1f824 <__assert_fail@plt+0xdd98>
   1f80c:	mvn	r9, #0
   1f810:	b	1f848 <__assert_fail@plt+0xddbc>
   1f814:	mov	r0, r4
   1f818:	sub	sp, fp, #28
   1f81c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f820:	b	119e4 <timegm@plt>
   1f824:	mov	r0, #28
   1f828:	add	r1, r5, #16
   1f82c:	vld1.32	{d16-d17}, [r5], r0
   1f830:	vld1.64	{d18-d19}, [r1]
   1f834:	add	r1, r4, #16
   1f838:	vld1.32	{d20-d21}, [r5]
   1f83c:	vst1.32	{d16-d17}, [r4], r0
   1f840:	vst1.32	{d18-d19}, [r1]
   1f844:	vst1.32	{d20-d21}, [r4]
   1f848:	mov	r0, r9
   1f84c:	sub	sp, fp, #28
   1f850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f854:	movw	r0, #12878	; 0x324e
   1f858:	movt	r0, #2
   1f85c:	bl	11a44 <unsetenv@plt>
   1f860:	cmp	r0, #0
   1f864:	bne	1f7c8 <__assert_fail@plt+0xdd3c>
   1f868:	str	r7, [sp]
   1f86c:	bl	11774 <tzset@plt>
   1f870:	mov	sl, #1
   1f874:	cmp	r8, #2
   1f878:	bcs	1f7dc <__assert_fail@plt+0xdd50>
   1f87c:	b	1f7f4 <__assert_fail@plt+0xdd68>
   1f880:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f884:	add	fp, sp, #24
   1f888:	sub	sp, sp, #32
   1f88c:	ldr	r6, [fp, #12]
   1f890:	ldr	r7, [fp, #8]
   1f894:	mov	r4, r2
   1f898:	mov	r8, r0
   1f89c:	cmp	r1, #0
   1f8a0:	beq	1f8c8 <__assert_fail@plt+0xde3c>
   1f8a4:	movw	r2, #15086	; 0x3aee
   1f8a8:	mov	r5, r1
   1f8ac:	str	r3, [sp, #4]
   1f8b0:	str	r4, [sp]
   1f8b4:	mov	r0, r8
   1f8b8:	mov	r1, #1
   1f8bc:	movt	r2, #2
   1f8c0:	mov	r3, r5
   1f8c4:	b	1f8e0 <__assert_fail@plt+0xde54>
   1f8c8:	movw	r2, #15098	; 0x3afa
   1f8cc:	str	r3, [sp]
   1f8d0:	mov	r0, r8
   1f8d4:	mov	r1, #1
   1f8d8:	mov	r3, r4
   1f8dc:	movt	r2, #2
   1f8e0:	bl	1193c <__fprintf_chk@plt>
   1f8e4:	movw	r1, #15105	; 0x3b01
   1f8e8:	mov	r0, #0
   1f8ec:	mov	r2, #5
   1f8f0:	movt	r1, #2
   1f8f4:	bl	11720 <dcgettext@plt>
   1f8f8:	movw	r2, #15823	; 0x3dcf
   1f8fc:	mov	r3, r0
   1f900:	movw	r0, #2022	; 0x7e6
   1f904:	mov	r1, #1
   1f908:	movt	r2, #2
   1f90c:	str	r0, [sp]
   1f910:	mov	r0, r8
   1f914:	bl	1193c <__fprintf_chk@plt>
   1f918:	movw	r4, #10685	; 0x29bd
   1f91c:	mov	r1, r8
   1f920:	movt	r4, #2
   1f924:	mov	r0, r4
   1f928:	bl	11678 <fputs_unlocked@plt>
   1f92c:	movw	r1, #15109	; 0x3b05
   1f930:	mov	r0, #0
   1f934:	mov	r2, #5
   1f938:	movt	r1, #2
   1f93c:	bl	11720 <dcgettext@plt>
   1f940:	movw	r3, #15280	; 0x3bb0
   1f944:	mov	r2, r0
   1f948:	mov	r0, r8
   1f94c:	mov	r1, #1
   1f950:	movt	r3, #2
   1f954:	bl	1193c <__fprintf_chk@plt>
   1f958:	mov	r0, r4
   1f95c:	mov	r1, r8
   1f960:	bl	11678 <fputs_unlocked@plt>
   1f964:	cmp	r6, #9
   1f968:	bhi	1f9a4 <__assert_fail@plt+0xdf18>
   1f96c:	add	r0, pc, #0
   1f970:	ldr	pc, [r0, r6, lsl #2]
   1f974:	muleq	r1, ip, r9
   1f978:			; <UNDEFINED> instruction: 0x0001f9b0
   1f97c:	andeq	pc, r1, r0, ror #19
   1f980:	andeq	pc, r1, r8, lsl #20
   1f984:	andeq	pc, r1, r0, lsr sl	; <UNPREDICTABLE>
   1f988:	andeq	pc, r1, r8, asr sl	; <UNPREDICTABLE>
   1f98c:	andeq	pc, r1, r0, lsl #21
   1f990:			; <UNDEFINED> instruction: 0x0001fab8
   1f994:	andeq	pc, r1, r8, asr fp	; <UNPREDICTABLE>
   1f998:	andeq	pc, r1, r0, lsl #22
   1f99c:	sub	sp, fp, #24
   1f9a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f9a4:	movw	r1, #15633	; 0x3d11
   1f9a8:	movt	r1, #2
   1f9ac:	b	1fb08 <__assert_fail@plt+0xe07c>
   1f9b0:	movw	r1, #15314	; 0x3bd2
   1f9b4:	mov	r0, #0
   1f9b8:	mov	r2, #5
   1f9bc:	movt	r1, #2
   1f9c0:	bl	11720 <dcgettext@plt>
   1f9c4:	ldr	r3, [r7]
   1f9c8:	mov	r2, r0
   1f9cc:	mov	r0, r8
   1f9d0:	mov	r1, #1
   1f9d4:	sub	sp, fp, #24
   1f9d8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f9dc:	b	1193c <__fprintf_chk@plt>
   1f9e0:	movw	r1, #15330	; 0x3be2
   1f9e4:	mov	r0, #0
   1f9e8:	mov	r2, #5
   1f9ec:	movt	r1, #2
   1f9f0:	bl	11720 <dcgettext@plt>
   1f9f4:	mov	r2, r0
   1f9f8:	ldr	r3, [r7]
   1f9fc:	ldr	r0, [r7, #4]
   1fa00:	str	r0, [sp]
   1fa04:	b	1faf4 <__assert_fail@plt+0xe068>
   1fa08:	movw	r1, #15353	; 0x3bf9
   1fa0c:	mov	r0, #0
   1fa10:	mov	r2, #5
   1fa14:	movt	r1, #2
   1fa18:	bl	11720 <dcgettext@plt>
   1fa1c:	mov	r2, r0
   1fa20:	ldr	r3, [r7]
   1fa24:	ldmib	r7, {r0, r1}
   1fa28:	stm	sp, {r0, r1}
   1fa2c:	b	1faf4 <__assert_fail@plt+0xe068>
   1fa30:	movw	r1, #15381	; 0x3c15
   1fa34:	mov	r0, #0
   1fa38:	mov	r2, #5
   1fa3c:	movt	r1, #2
   1fa40:	bl	11720 <dcgettext@plt>
   1fa44:	ldr	r3, [r7]
   1fa48:	mov	r2, r0
   1fa4c:	ldmib	r7, {r0, r1, r7}
   1fa50:	stm	sp, {r0, r1, r7}
   1fa54:	b	1faf4 <__assert_fail@plt+0xe068>
   1fa58:	movw	r1, #15413	; 0x3c35
   1fa5c:	mov	r0, #0
   1fa60:	mov	r2, #5
   1fa64:	movt	r1, #2
   1fa68:	bl	11720 <dcgettext@plt>
   1fa6c:	ldr	r3, [r7]
   1fa70:	mov	r2, r0
   1fa74:	ldmib	r7, {r0, r1, r6, r7}
   1fa78:	stm	sp, {r0, r1, r6, r7}
   1fa7c:	b	1faf4 <__assert_fail@plt+0xe068>
   1fa80:	movw	r1, #15449	; 0x3c59
   1fa84:	mov	r0, #0
   1fa88:	mov	r2, #5
   1fa8c:	movt	r1, #2
   1fa90:	bl	11720 <dcgettext@plt>
   1fa94:	mov	r2, r0
   1fa98:	ldr	r3, [r7]
   1fa9c:	ldmib	r7, {r0, r1, r6}
   1faa0:	ldr	r5, [r7, #16]
   1faa4:	ldr	r7, [r7, #20]
   1faa8:	stm	sp, {r0, r1, r6}
   1faac:	str	r5, [sp, #12]
   1fab0:	str	r7, [sp, #16]
   1fab4:	b	1faf4 <__assert_fail@plt+0xe068>
   1fab8:	movw	r1, #15489	; 0x3c81
   1fabc:	mov	r0, #0
   1fac0:	mov	r2, #5
   1fac4:	movt	r1, #2
   1fac8:	bl	11720 <dcgettext@plt>
   1facc:	mov	r2, r0
   1fad0:	ldr	r3, [r7]
   1fad4:	ldmib	r7, {r0, r1, r6}
   1fad8:	ldr	r5, [r7, #16]
   1fadc:	ldr	r4, [r7, #20]
   1fae0:	ldr	r7, [r7, #24]
   1fae4:	stm	sp, {r0, r1, r6}
   1fae8:	str	r5, [sp, #12]
   1faec:	str	r4, [sp, #16]
   1faf0:	str	r7, [sp, #20]
   1faf4:	mov	r0, r8
   1faf8:	mov	r1, #1
   1fafc:	b	1fba8 <__assert_fail@plt+0xe11c>
   1fb00:	movw	r1, #15581	; 0x3cdd
   1fb04:	movt	r1, #2
   1fb08:	mov	r0, #0
   1fb0c:	mov	r2, #5
   1fb10:	bl	11720 <dcgettext@plt>
   1fb14:	mov	ip, r0
   1fb18:	ldr	r3, [r7]
   1fb1c:	ldr	r0, [r7, #4]
   1fb20:	ldr	r1, [r7, #8]
   1fb24:	ldr	r6, [r7, #12]
   1fb28:	ldr	r5, [r7, #16]
   1fb2c:	ldr	r4, [r7, #20]
   1fb30:	ldr	r2, [r7, #24]
   1fb34:	ldr	lr, [r7, #28]
   1fb38:	ldr	r7, [r7, #32]
   1fb3c:	stm	sp, {r0, r1, r6}
   1fb40:	str	r5, [sp, #12]
   1fb44:	str	r4, [sp, #16]
   1fb48:	str	r2, [sp, #20]
   1fb4c:	str	lr, [sp, #24]
   1fb50:	str	r7, [sp, #28]
   1fb54:	b	1fb9c <__assert_fail@plt+0xe110>
   1fb58:	movw	r1, #15533	; 0x3cad
   1fb5c:	mov	r0, #0
   1fb60:	mov	r2, #5
   1fb64:	movt	r1, #2
   1fb68:	bl	11720 <dcgettext@plt>
   1fb6c:	mov	ip, r0
   1fb70:	ldr	r3, [r7]
   1fb74:	ldmib	r7, {r0, r1, r6}
   1fb78:	ldr	r5, [r7, #16]
   1fb7c:	ldr	r4, [r7, #20]
   1fb80:	ldr	r2, [r7, #24]
   1fb84:	ldr	r7, [r7, #28]
   1fb88:	stm	sp, {r0, r1, r6}
   1fb8c:	str	r5, [sp, #12]
   1fb90:	str	r4, [sp, #16]
   1fb94:	str	r2, [sp, #20]
   1fb98:	str	r7, [sp, #24]
   1fb9c:	mov	r0, r8
   1fba0:	mov	r1, #1
   1fba4:	mov	r2, ip
   1fba8:	bl	1193c <__fprintf_chk@plt>
   1fbac:	sub	sp, fp, #24
   1fbb0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1fbb4:	push	{r4, sl, fp, lr}
   1fbb8:	add	fp, sp, #8
   1fbbc:	sub	sp, sp, #8
   1fbc0:	ldr	ip, [fp, #8]
   1fbc4:	mov	lr, #0
   1fbc8:	ldr	r4, [ip, lr, lsl #2]
   1fbcc:	add	lr, lr, #1
   1fbd0:	cmp	r4, #0
   1fbd4:	bne	1fbc8 <__assert_fail@plt+0xe13c>
   1fbd8:	sub	r4, lr, #1
   1fbdc:	str	ip, [sp]
   1fbe0:	str	r4, [sp, #4]
   1fbe4:	bl	1f880 <__assert_fail@plt+0xddf4>
   1fbe8:	sub	sp, fp, #8
   1fbec:	pop	{r4, sl, fp, pc}
   1fbf0:	push	{fp, lr}
   1fbf4:	mov	fp, sp
   1fbf8:	sub	sp, sp, #48	; 0x30
   1fbfc:	ldr	ip, [fp, #8]
   1fc00:	ldr	lr, [ip]
   1fc04:	cmp	lr, #0
   1fc08:	str	lr, [sp, #8]
   1fc0c:	beq	1fca8 <__assert_fail@plt+0xe21c>
   1fc10:	ldr	lr, [ip, #4]
   1fc14:	cmp	lr, #0
   1fc18:	str	lr, [sp, #12]
   1fc1c:	beq	1fcb0 <__assert_fail@plt+0xe224>
   1fc20:	ldr	lr, [ip, #8]
   1fc24:	cmp	lr, #0
   1fc28:	str	lr, [sp, #16]
   1fc2c:	beq	1fcb8 <__assert_fail@plt+0xe22c>
   1fc30:	ldr	lr, [ip, #12]
   1fc34:	cmp	lr, #0
   1fc38:	str	lr, [sp, #20]
   1fc3c:	beq	1fcc0 <__assert_fail@plt+0xe234>
   1fc40:	ldr	lr, [ip, #16]
   1fc44:	cmp	lr, #0
   1fc48:	str	lr, [sp, #24]
   1fc4c:	beq	1fcc8 <__assert_fail@plt+0xe23c>
   1fc50:	ldr	lr, [ip, #20]
   1fc54:	cmp	lr, #0
   1fc58:	str	lr, [sp, #28]
   1fc5c:	beq	1fcd0 <__assert_fail@plt+0xe244>
   1fc60:	ldr	lr, [ip, #24]
   1fc64:	cmp	lr, #0
   1fc68:	str	lr, [sp, #32]
   1fc6c:	beq	1fcd8 <__assert_fail@plt+0xe24c>
   1fc70:	ldr	lr, [ip, #28]
   1fc74:	cmp	lr, #0
   1fc78:	str	lr, [sp, #36]	; 0x24
   1fc7c:	beq	1fce0 <__assert_fail@plt+0xe254>
   1fc80:	ldr	lr, [ip, #32]
   1fc84:	cmp	lr, #0
   1fc88:	str	lr, [sp, #40]	; 0x28
   1fc8c:	beq	1fce8 <__assert_fail@plt+0xe25c>
   1fc90:	ldr	lr, [ip, #36]	; 0x24
   1fc94:	mov	ip, #10
   1fc98:	cmp	lr, #0
   1fc9c:	str	lr, [sp, #44]	; 0x2c
   1fca0:	movweq	ip, #9
   1fca4:	b	1fcec <__assert_fail@plt+0xe260>
   1fca8:	mov	ip, #0
   1fcac:	b	1fcec <__assert_fail@plt+0xe260>
   1fcb0:	mov	ip, #1
   1fcb4:	b	1fcec <__assert_fail@plt+0xe260>
   1fcb8:	mov	ip, #2
   1fcbc:	b	1fcec <__assert_fail@plt+0xe260>
   1fcc0:	mov	ip, #3
   1fcc4:	b	1fcec <__assert_fail@plt+0xe260>
   1fcc8:	mov	ip, #4
   1fccc:	b	1fcec <__assert_fail@plt+0xe260>
   1fcd0:	mov	ip, #5
   1fcd4:	b	1fcec <__assert_fail@plt+0xe260>
   1fcd8:	mov	ip, #6
   1fcdc:	b	1fcec <__assert_fail@plt+0xe260>
   1fce0:	mov	ip, #7
   1fce4:	b	1fcec <__assert_fail@plt+0xe260>
   1fce8:	mov	ip, #8
   1fcec:	add	lr, sp, #8
   1fcf0:	str	ip, [sp, #4]
   1fcf4:	str	lr, [sp]
   1fcf8:	bl	1f880 <__assert_fail@plt+0xddf4>
   1fcfc:	mov	sp, fp
   1fd00:	pop	{fp, pc}
   1fd04:	push	{fp, lr}
   1fd08:	mov	fp, sp
   1fd0c:	sub	sp, sp, #56	; 0x38
   1fd10:	add	ip, fp, #8
   1fd14:	str	ip, [sp, #12]
   1fd18:	ldr	lr, [fp, #8]
   1fd1c:	cmp	lr, #0
   1fd20:	str	lr, [sp, #16]
   1fd24:	beq	1fdc0 <__assert_fail@plt+0xe334>
   1fd28:	ldr	lr, [ip, #4]
   1fd2c:	cmp	lr, #0
   1fd30:	str	lr, [sp, #20]
   1fd34:	beq	1fdc8 <__assert_fail@plt+0xe33c>
   1fd38:	ldr	lr, [ip, #8]
   1fd3c:	cmp	lr, #0
   1fd40:	str	lr, [sp, #24]
   1fd44:	beq	1fdd0 <__assert_fail@plt+0xe344>
   1fd48:	ldr	lr, [ip, #12]
   1fd4c:	cmp	lr, #0
   1fd50:	str	lr, [sp, #28]
   1fd54:	beq	1fdd8 <__assert_fail@plt+0xe34c>
   1fd58:	ldr	lr, [ip, #16]
   1fd5c:	cmp	lr, #0
   1fd60:	str	lr, [sp, #32]
   1fd64:	beq	1fde0 <__assert_fail@plt+0xe354>
   1fd68:	ldr	lr, [ip, #20]
   1fd6c:	cmp	lr, #0
   1fd70:	str	lr, [sp, #36]	; 0x24
   1fd74:	beq	1fde8 <__assert_fail@plt+0xe35c>
   1fd78:	ldr	lr, [ip, #24]
   1fd7c:	cmp	lr, #0
   1fd80:	str	lr, [sp, #40]	; 0x28
   1fd84:	beq	1fdf0 <__assert_fail@plt+0xe364>
   1fd88:	ldr	lr, [ip, #28]
   1fd8c:	cmp	lr, #0
   1fd90:	str	lr, [sp, #44]	; 0x2c
   1fd94:	beq	1fdf8 <__assert_fail@plt+0xe36c>
   1fd98:	ldr	lr, [ip, #32]
   1fd9c:	cmp	lr, #0
   1fda0:	str	lr, [sp, #48]	; 0x30
   1fda4:	beq	1fe00 <__assert_fail@plt+0xe374>
   1fda8:	ldr	lr, [ip, #36]	; 0x24
   1fdac:	mov	ip, #10
   1fdb0:	cmp	lr, #0
   1fdb4:	str	lr, [sp, #52]	; 0x34
   1fdb8:	movweq	ip, #9
   1fdbc:	b	1fe04 <__assert_fail@plt+0xe378>
   1fdc0:	mov	ip, #0
   1fdc4:	b	1fe04 <__assert_fail@plt+0xe378>
   1fdc8:	mov	ip, #1
   1fdcc:	b	1fe04 <__assert_fail@plt+0xe378>
   1fdd0:	mov	ip, #2
   1fdd4:	b	1fe04 <__assert_fail@plt+0xe378>
   1fdd8:	mov	ip, #3
   1fddc:	b	1fe04 <__assert_fail@plt+0xe378>
   1fde0:	mov	ip, #4
   1fde4:	b	1fe04 <__assert_fail@plt+0xe378>
   1fde8:	mov	ip, #5
   1fdec:	b	1fe04 <__assert_fail@plt+0xe378>
   1fdf0:	mov	ip, #6
   1fdf4:	b	1fe04 <__assert_fail@plt+0xe378>
   1fdf8:	mov	ip, #7
   1fdfc:	b	1fe04 <__assert_fail@plt+0xe378>
   1fe00:	mov	ip, #8
   1fe04:	add	lr, sp, #16
   1fe08:	str	ip, [sp, #4]
   1fe0c:	str	lr, [sp]
   1fe10:	bl	1f880 <__assert_fail@plt+0xddf4>
   1fe14:	mov	sp, fp
   1fe18:	pop	{fp, pc}
   1fe1c:	push	{fp, lr}
   1fe20:	mov	fp, sp
   1fe24:	movw	r0, #16868	; 0x41e4
   1fe28:	movt	r0, #3
   1fe2c:	ldr	r1, [r0]
   1fe30:	movw	r0, #10685	; 0x29bd
   1fe34:	movt	r0, #2
   1fe38:	bl	11678 <fputs_unlocked@plt>
   1fe3c:	movw	r1, #15693	; 0x3d4d
   1fe40:	mov	r0, #0
   1fe44:	mov	r2, #5
   1fe48:	movt	r1, #2
   1fe4c:	bl	11720 <dcgettext@plt>
   1fe50:	movw	r2, #15713	; 0x3d61
   1fe54:	mov	r1, r0
   1fe58:	mov	r0, #1
   1fe5c:	movt	r2, #2
   1fe60:	bl	11924 <__printf_chk@plt>
   1fe64:	movw	r1, #15735	; 0x3d77
   1fe68:	mov	r0, #0
   1fe6c:	mov	r2, #5
   1fe70:	movt	r1, #2
   1fe74:	bl	11720 <dcgettext@plt>
   1fe78:	movw	r2, #11535	; 0x2d0f
   1fe7c:	movw	r3, #11776	; 0x2e00
   1fe80:	mov	r1, r0
   1fe84:	mov	r0, #1
   1fe88:	movt	r2, #2
   1fe8c:	movt	r3, #2
   1fe90:	bl	11924 <__printf_chk@plt>
   1fe94:	movw	r1, #15755	; 0x3d8b
   1fe98:	mov	r0, #0
   1fe9c:	mov	r2, #5
   1fea0:	movt	r1, #2
   1fea4:	bl	11720 <dcgettext@plt>
   1fea8:	movw	r2, #15794	; 0x3db2
   1feac:	mov	r1, r0
   1feb0:	mov	r0, #1
   1feb4:	movt	r2, #2
   1feb8:	pop	{fp, lr}
   1febc:	b	11924 <__printf_chk@plt>
   1fec0:	push	{r4, r5, r6, sl, fp, lr}
   1fec4:	add	fp, sp, #16
   1fec8:	mov	r4, r2
   1fecc:	mov	r5, r1
   1fed0:	mov	r6, r0
   1fed4:	bl	217a8 <__assert_fail@plt+0xfd1c>
   1fed8:	cmp	r0, #0
   1fedc:	popne	{r4, r5, r6, sl, fp, pc}
   1fee0:	cmp	r6, #0
   1fee4:	beq	1fef8 <__assert_fail@plt+0xe46c>
   1fee8:	cmp	r5, #0
   1feec:	cmpne	r4, #0
   1fef0:	bne	1fef8 <__assert_fail@plt+0xe46c>
   1fef4:	pop	{r4, r5, r6, sl, fp, pc}
   1fef8:	bl	20474 <__assert_fail@plt+0xe9e8>
   1fefc:	push	{r4, r5, r6, sl, fp, lr}
   1ff00:	add	fp, sp, #16
   1ff04:	mov	r4, r2
   1ff08:	mov	r5, r1
   1ff0c:	mov	r6, r0
   1ff10:	bl	217a8 <__assert_fail@plt+0xfd1c>
   1ff14:	cmp	r0, #0
   1ff18:	popne	{r4, r5, r6, sl, fp, pc}
   1ff1c:	cmp	r6, #0
   1ff20:	beq	1ff34 <__assert_fail@plt+0xe4a8>
   1ff24:	cmp	r5, #0
   1ff28:	cmpne	r4, #0
   1ff2c:	bne	1ff34 <__assert_fail@plt+0xe4a8>
   1ff30:	pop	{r4, r5, r6, sl, fp, pc}
   1ff34:	bl	20474 <__assert_fail@plt+0xe9e8>
   1ff38:	push	{fp, lr}
   1ff3c:	mov	fp, sp
   1ff40:	bl	2057c <__assert_fail@plt+0xeaf0>
   1ff44:	cmp	r0, #0
   1ff48:	popne	{fp, pc}
   1ff4c:	bl	20474 <__assert_fail@plt+0xe9e8>
   1ff50:	push	{fp, lr}
   1ff54:	mov	fp, sp
   1ff58:	bl	2057c <__assert_fail@plt+0xeaf0>
   1ff5c:	cmp	r0, #0
   1ff60:	popne	{fp, pc}
   1ff64:	bl	20474 <__assert_fail@plt+0xe9e8>
   1ff68:	push	{fp, lr}
   1ff6c:	mov	fp, sp
   1ff70:	bl	2057c <__assert_fail@plt+0xeaf0>
   1ff74:	cmp	r0, #0
   1ff78:	popne	{fp, pc}
   1ff7c:	bl	20474 <__assert_fail@plt+0xe9e8>
   1ff80:	push	{r4, r5, fp, lr}
   1ff84:	add	fp, sp, #8
   1ff88:	mov	r4, r1
   1ff8c:	mov	r5, r0
   1ff90:	bl	205ac <__assert_fail@plt+0xeb20>
   1ff94:	cmp	r0, #0
   1ff98:	popne	{r4, r5, fp, pc}
   1ff9c:	cmp	r5, #0
   1ffa0:	beq	1ffb0 <__assert_fail@plt+0xe524>
   1ffa4:	cmp	r4, #0
   1ffa8:	bne	1ffb0 <__assert_fail@plt+0xe524>
   1ffac:	pop	{r4, r5, fp, pc}
   1ffb0:	bl	20474 <__assert_fail@plt+0xe9e8>
   1ffb4:	push	{fp, lr}
   1ffb8:	mov	fp, sp
   1ffbc:	cmp	r1, #0
   1ffc0:	orreq	r1, r1, #1
   1ffc4:	bl	205ac <__assert_fail@plt+0xeb20>
   1ffc8:	cmp	r0, #0
   1ffcc:	popne	{fp, pc}
   1ffd0:	bl	20474 <__assert_fail@plt+0xe9e8>
   1ffd4:	push	{fp, lr}
   1ffd8:	mov	fp, sp
   1ffdc:	clz	r3, r2
   1ffe0:	lsr	ip, r3, #5
   1ffe4:	clz	r3, r1
   1ffe8:	lsr	r3, r3, #5
   1ffec:	orrs	r3, r3, ip
   1fff0:	movwne	r1, #1
   1fff4:	movwne	r2, #1
   1fff8:	bl	217a8 <__assert_fail@plt+0xfd1c>
   1fffc:	cmp	r0, #0
   20000:	popne	{fp, pc}
   20004:	bl	20474 <__assert_fail@plt+0xe9e8>
   20008:	push	{fp, lr}
   2000c:	mov	fp, sp
   20010:	mov	r2, r1
   20014:	mov	r1, r0
   20018:	mov	r0, #0
   2001c:	bl	217a8 <__assert_fail@plt+0xfd1c>
   20020:	cmp	r0, #0
   20024:	popne	{fp, pc}
   20028:	bl	20474 <__assert_fail@plt+0xe9e8>
   2002c:	push	{fp, lr}
   20030:	mov	fp, sp
   20034:	mov	r2, r1
   20038:	mov	r1, r0
   2003c:	clz	r0, r2
   20040:	clz	r3, r1
   20044:	lsr	r0, r0, #5
   20048:	lsr	r3, r3, #5
   2004c:	orrs	r0, r3, r0
   20050:	mov	r0, #0
   20054:	movwne	r1, #1
   20058:	movwne	r2, #1
   2005c:	bl	217a8 <__assert_fail@plt+0xfd1c>
   20060:	cmp	r0, #0
   20064:	popne	{fp, pc}
   20068:	bl	20474 <__assert_fail@plt+0xe9e8>
   2006c:	push	{r4, r5, r6, sl, fp, lr}
   20070:	add	fp, sp, #16
   20074:	ldr	r5, [r1]
   20078:	mov	r4, r1
   2007c:	mov	r6, r0
   20080:	cmp	r0, #0
   20084:	beq	2009c <__assert_fail@plt+0xe610>
   20088:	mov	r0, #1
   2008c:	add	r0, r0, r5, lsr #1
   20090:	adds	r5, r5, r0
   20094:	bcc	200a4 <__assert_fail@plt+0xe618>
   20098:	b	200e0 <__assert_fail@plt+0xe654>
   2009c:	cmp	r5, #0
   200a0:	movweq	r5, #64	; 0x40
   200a4:	mov	r0, r6
   200a8:	mov	r1, r5
   200ac:	mov	r2, #1
   200b0:	bl	217a8 <__assert_fail@plt+0xfd1c>
   200b4:	cmp	r5, #0
   200b8:	mov	r1, r5
   200bc:	movwne	r1, #1
   200c0:	cmp	r0, #0
   200c4:	bne	200d8 <__assert_fail@plt+0xe64c>
   200c8:	clz	r2, r6
   200cc:	lsr	r2, r2, #5
   200d0:	orrs	r1, r2, r1
   200d4:	bne	200e0 <__assert_fail@plt+0xe654>
   200d8:	str	r5, [r4]
   200dc:	pop	{r4, r5, r6, sl, fp, pc}
   200e0:	bl	20474 <__assert_fail@plt+0xe9e8>
   200e4:	push	{r4, r5, r6, r7, fp, lr}
   200e8:	add	fp, sp, #16
   200ec:	ldr	r5, [r1]
   200f0:	mov	r6, r2
   200f4:	mov	r4, r1
   200f8:	mov	r7, r0
   200fc:	cmp	r0, #0
   20100:	beq	20118 <__assert_fail@plt+0xe68c>
   20104:	mov	r0, #1
   20108:	add	r0, r0, r5, lsr #1
   2010c:	adds	r5, r5, r0
   20110:	bcc	20130 <__assert_fail@plt+0xe6a4>
   20114:	b	20164 <__assert_fail@plt+0xe6d8>
   20118:	cmp	r5, #0
   2011c:	bne	20130 <__assert_fail@plt+0xe6a4>
   20120:	mov	r0, #64	; 0x40
   20124:	cmp	r6, #64	; 0x40
   20128:	udiv	r5, r0, r6
   2012c:	addhi	r5, r5, #1
   20130:	mov	r0, r7
   20134:	mov	r1, r5
   20138:	mov	r2, r6
   2013c:	bl	217a8 <__assert_fail@plt+0xfd1c>
   20140:	cmp	r0, #0
   20144:	bne	2015c <__assert_fail@plt+0xe6d0>
   20148:	cmp	r7, #0
   2014c:	beq	20164 <__assert_fail@plt+0xe6d8>
   20150:	cmp	r6, #0
   20154:	cmpne	r5, #0
   20158:	bne	20164 <__assert_fail@plt+0xe6d8>
   2015c:	str	r5, [r4]
   20160:	pop	{r4, r5, r6, r7, fp, pc}
   20164:	bl	20474 <__assert_fail@plt+0xe9e8>
   20168:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2016c:	add	fp, sp, #24
   20170:	mov	r8, r1
   20174:	ldr	r1, [r1]
   20178:	mov	r5, r0
   2017c:	add	r0, r1, r1, asr #1
   20180:	cmp	r0, r1
   20184:	mvnvs	r0, #-2147483648	; 0x80000000
   20188:	cmp	r0, r3
   2018c:	mov	r7, r0
   20190:	movgt	r7, r3
   20194:	cmn	r3, #1
   20198:	movle	r7, r0
   2019c:	ldr	r0, [fp, #8]
   201a0:	cmn	r0, #1
   201a4:	ble	201cc <__assert_fail@plt+0xe740>
   201a8:	cmp	r0, #0
   201ac:	beq	20220 <__assert_fail@plt+0xe794>
   201b0:	cmn	r7, #1
   201b4:	ble	201f4 <__assert_fail@plt+0xe768>
   201b8:	mvn	r4, #-2147483648	; 0x80000000
   201bc:	udiv	r6, r4, r0
   201c0:	cmp	r6, r7
   201c4:	bge	20220 <__assert_fail@plt+0xe794>
   201c8:	b	20230 <__assert_fail@plt+0xe7a4>
   201cc:	cmn	r7, #1
   201d0:	ble	20210 <__assert_fail@plt+0xe784>
   201d4:	cmn	r0, #1
   201d8:	beq	20220 <__assert_fail@plt+0xe794>
   201dc:	mov	r6, #-2147483648	; 0x80000000
   201e0:	mvn	r4, #-2147483648	; 0x80000000
   201e4:	sdiv	r6, r6, r0
   201e8:	cmp	r6, r7
   201ec:	bge	20220 <__assert_fail@plt+0xe794>
   201f0:	b	20230 <__assert_fail@plt+0xe7a4>
   201f4:	beq	20220 <__assert_fail@plt+0xe794>
   201f8:	mov	r6, #-2147483648	; 0x80000000
   201fc:	mvn	r4, #-2147483648	; 0x80000000
   20200:	sdiv	r6, r6, r7
   20204:	cmp	r6, r0
   20208:	bge	20220 <__assert_fail@plt+0xe794>
   2020c:	b	20230 <__assert_fail@plt+0xe7a4>
   20210:	mvn	r4, #-2147483648	; 0x80000000
   20214:	sdiv	r6, r4, r0
   20218:	cmp	r7, r6
   2021c:	blt	20230 <__assert_fail@plt+0xe7a4>
   20220:	mul	r6, r7, r0
   20224:	mov	r4, #64	; 0x40
   20228:	cmp	r6, #63	; 0x3f
   2022c:	bgt	20238 <__assert_fail@plt+0xe7ac>
   20230:	sdiv	r7, r4, r0
   20234:	mul	r6, r7, r0
   20238:	cmp	r5, #0
   2023c:	moveq	r4, #0
   20240:	streq	r4, [r8]
   20244:	sub	r4, r7, r1
   20248:	cmp	r4, r2
   2024c:	bge	202f8 <__assert_fail@plt+0xe86c>
   20250:	add	r7, r1, r2
   20254:	mov	r6, #0
   20258:	mov	r2, #0
   2025c:	cmp	r7, r3
   20260:	movwgt	r6, #1
   20264:	cmn	r3, #1
   20268:	movwgt	r2, #1
   2026c:	cmp	r7, r1
   20270:	bvs	2032c <__assert_fail@plt+0xe8a0>
   20274:	ands	r1, r2, r6
   20278:	bne	2032c <__assert_fail@plt+0xe8a0>
   2027c:	cmn	r0, #1
   20280:	ble	202a8 <__assert_fail@plt+0xe81c>
   20284:	cmp	r0, #0
   20288:	beq	202f4 <__assert_fail@plt+0xe868>
   2028c:	cmn	r7, #1
   20290:	ble	202cc <__assert_fail@plt+0xe840>
   20294:	mvn	r1, #-2147483648	; 0x80000000
   20298:	udiv	r1, r1, r0
   2029c:	cmp	r1, r7
   202a0:	bge	202f4 <__assert_fail@plt+0xe868>
   202a4:	b	2032c <__assert_fail@plt+0xe8a0>
   202a8:	cmn	r7, #1
   202ac:	ble	202e4 <__assert_fail@plt+0xe858>
   202b0:	cmn	r0, #1
   202b4:	beq	202f4 <__assert_fail@plt+0xe868>
   202b8:	mov	r1, #-2147483648	; 0x80000000
   202bc:	sdiv	r1, r1, r0
   202c0:	cmp	r1, r7
   202c4:	bge	202f4 <__assert_fail@plt+0xe868>
   202c8:	b	2032c <__assert_fail@plt+0xe8a0>
   202cc:	beq	202f4 <__assert_fail@plt+0xe868>
   202d0:	mov	r1, #-2147483648	; 0x80000000
   202d4:	sdiv	r1, r1, r7
   202d8:	cmp	r1, r0
   202dc:	bge	202f4 <__assert_fail@plt+0xe868>
   202e0:	b	2032c <__assert_fail@plt+0xe8a0>
   202e4:	mvn	r1, #-2147483648	; 0x80000000
   202e8:	sdiv	r1, r1, r0
   202ec:	cmp	r7, r1
   202f0:	blt	2032c <__assert_fail@plt+0xe8a0>
   202f4:	mul	r6, r7, r0
   202f8:	mov	r0, r5
   202fc:	mov	r1, r6
   20300:	bl	205ac <__assert_fail@plt+0xeb20>
   20304:	cmp	r6, #0
   20308:	movwne	r6, #1
   2030c:	cmp	r0, #0
   20310:	bne	20324 <__assert_fail@plt+0xe898>
   20314:	clz	r1, r5
   20318:	lsr	r1, r1, #5
   2031c:	orrs	r1, r1, r6
   20320:	bne	2032c <__assert_fail@plt+0xe8a0>
   20324:	str	r7, [r8]
   20328:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2032c:	bl	20474 <__assert_fail@plt+0xe9e8>
   20330:	push	{fp, lr}
   20334:	mov	fp, sp
   20338:	mov	r1, #1
   2033c:	bl	20528 <__assert_fail@plt+0xea9c>
   20340:	cmp	r0, #0
   20344:	popne	{fp, pc}
   20348:	bl	20474 <__assert_fail@plt+0xe9e8>
   2034c:	push	{fp, lr}
   20350:	mov	fp, sp
   20354:	bl	20528 <__assert_fail@plt+0xea9c>
   20358:	cmp	r0, #0
   2035c:	popne	{fp, pc}
   20360:	bl	20474 <__assert_fail@plt+0xe9e8>
   20364:	push	{fp, lr}
   20368:	mov	fp, sp
   2036c:	mov	r1, #1
   20370:	bl	20528 <__assert_fail@plt+0xea9c>
   20374:	cmp	r0, #0
   20378:	popne	{fp, pc}
   2037c:	bl	20474 <__assert_fail@plt+0xe9e8>
   20380:	push	{fp, lr}
   20384:	mov	fp, sp
   20388:	bl	20528 <__assert_fail@plt+0xea9c>
   2038c:	cmp	r0, #0
   20390:	popne	{fp, pc}
   20394:	bl	20474 <__assert_fail@plt+0xe9e8>
   20398:	push	{r4, r5, fp, lr}
   2039c:	add	fp, sp, #8
   203a0:	mov	r5, r0
   203a4:	mov	r0, r1
   203a8:	mov	r4, r1
   203ac:	bl	2057c <__assert_fail@plt+0xeaf0>
   203b0:	cmp	r0, #0
   203b4:	beq	203c8 <__assert_fail@plt+0xe93c>
   203b8:	mov	r1, r5
   203bc:	mov	r2, r4
   203c0:	pop	{r4, r5, fp, lr}
   203c4:	b	11708 <memcpy@plt>
   203c8:	bl	20474 <__assert_fail@plt+0xe9e8>
   203cc:	push	{r4, r5, fp, lr}
   203d0:	add	fp, sp, #8
   203d4:	mov	r5, r0
   203d8:	mov	r0, r1
   203dc:	mov	r4, r1
   203e0:	bl	2057c <__assert_fail@plt+0xeaf0>
   203e4:	cmp	r0, #0
   203e8:	beq	203fc <__assert_fail@plt+0xe970>
   203ec:	mov	r1, r5
   203f0:	mov	r2, r4
   203f4:	pop	{r4, r5, fp, lr}
   203f8:	b	11708 <memcpy@plt>
   203fc:	bl	20474 <__assert_fail@plt+0xe9e8>
   20400:	push	{r4, r5, fp, lr}
   20404:	add	fp, sp, #8
   20408:	mov	r5, r0
   2040c:	add	r0, r1, #1
   20410:	mov	r4, r1
   20414:	bl	2057c <__assert_fail@plt+0xeaf0>
   20418:	cmp	r0, #0
   2041c:	beq	20438 <__assert_fail@plt+0xe9ac>
   20420:	mov	r1, #0
   20424:	mov	r2, r4
   20428:	strb	r1, [r0, r4]
   2042c:	mov	r1, r5
   20430:	pop	{r4, r5, fp, lr}
   20434:	b	11708 <memcpy@plt>
   20438:	bl	20474 <__assert_fail@plt+0xe9e8>
   2043c:	push	{r4, r5, fp, lr}
   20440:	add	fp, sp, #8
   20444:	mov	r4, r0
   20448:	bl	118ac <strlen@plt>
   2044c:	add	r5, r0, #1
   20450:	mov	r0, r5
   20454:	bl	2057c <__assert_fail@plt+0xeaf0>
   20458:	cmp	r0, #0
   2045c:	beq	20470 <__assert_fail@plt+0xe9e4>
   20460:	mov	r1, r4
   20464:	mov	r2, r5
   20468:	pop	{r4, r5, fp, lr}
   2046c:	b	11708 <memcpy@plt>
   20470:	bl	20474 <__assert_fail@plt+0xe9e8>
   20474:	push	{fp, lr}
   20478:	mov	fp, sp
   2047c:	movw	r0, #16780	; 0x418c
   20480:	movw	r1, #15870	; 0x3dfe
   20484:	mov	r2, #5
   20488:	movt	r0, #3
   2048c:	movt	r1, #2
   20490:	ldr	r4, [r0]
   20494:	mov	r0, #0
   20498:	bl	11720 <dcgettext@plt>
   2049c:	movw	r2, #11229	; 0x2bdd
   204a0:	mov	r3, r0
   204a4:	mov	r0, r4
   204a8:	mov	r1, #0
   204ac:	movt	r2, #2
   204b0:	bl	117d4 <error@plt>
   204b4:	bl	11a5c <abort@plt>
   204b8:	push	{r4, sl, fp, lr}
   204bc:	add	fp, sp, #8
   204c0:	mov	r0, #0
   204c4:	mov	r1, #0
   204c8:	bl	1187c <getcwd@plt>
   204cc:	mov	r4, r0
   204d0:	cmp	r0, #0
   204d4:	bne	204e8 <__assert_fail@plt+0xea5c>
   204d8:	bl	118e8 <__errno_location@plt>
   204dc:	ldr	r0, [r0]
   204e0:	cmp	r0, #12
   204e4:	beq	204f0 <__assert_fail@plt+0xea64>
   204e8:	mov	r0, r4
   204ec:	pop	{r4, sl, fp, pc}
   204f0:	bl	20474 <__assert_fail@plt+0xe9e8>
   204f4:	sub	sp, sp, #12
   204f8:	push	{fp, lr}
   204fc:	mov	fp, sp
   20500:	sub	sp, sp, #4
   20504:	add	ip, fp, #8
   20508:	stm	ip, {r1, r2, r3}
   2050c:	add	r1, fp, #8
   20510:	str	r1, [sp]
   20514:	bl	2182c <__assert_fail@plt+0xfda0>
   20518:	mov	sp, fp
   2051c:	pop	{fp, lr}
   20520:	add	sp, sp, #12
   20524:	bx	lr
   20528:	clz	r2, r1
   2052c:	clz	r3, r0
   20530:	lsr	r2, r2, #5
   20534:	lsr	r3, r3, #5
   20538:	orrs	r2, r3, r2
   2053c:	movwne	r1, #1
   20540:	movwne	r0, #1
   20544:	cmp	r1, #0
   20548:	beq	20578 <__assert_fail@plt+0xeaec>
   2054c:	mvn	r2, #-2147483648	; 0x80000000
   20550:	udiv	r2, r2, r1
   20554:	cmp	r2, r0
   20558:	bcs	20578 <__assert_fail@plt+0xeaec>
   2055c:	push	{fp, lr}
   20560:	mov	fp, sp
   20564:	bl	118e8 <__errno_location@plt>
   20568:	mov	r1, #12
   2056c:	str	r1, [r0]
   20570:	mov	r0, #0
   20574:	pop	{fp, pc}
   20578:	b	1166c <calloc@plt>
   2057c:	cmp	r0, #0
   20580:	movweq	r0, #1
   20584:	cmn	r0, #1
   20588:	ble	20590 <__assert_fail@plt+0xeb04>
   2058c:	b	11810 <malloc@plt>
   20590:	push	{fp, lr}
   20594:	mov	fp, sp
   20598:	bl	118e8 <__errno_location@plt>
   2059c:	mov	r1, #12
   205a0:	str	r1, [r0]
   205a4:	mov	r0, #0
   205a8:	pop	{fp, pc}
   205ac:	push	{fp, lr}
   205b0:	mov	fp, sp
   205b4:	cmp	r0, #0
   205b8:	beq	205d4 <__assert_fail@plt+0xeb48>
   205bc:	cmp	r1, #0
   205c0:	beq	205e0 <__assert_fail@plt+0xeb54>
   205c4:	cmn	r1, #1
   205c8:	ble	205ec <__assert_fail@plt+0xeb60>
   205cc:	pop	{fp, lr}
   205d0:	b	1172c <realloc@plt>
   205d4:	mov	r0, r1
   205d8:	pop	{fp, lr}
   205dc:	b	2057c <__assert_fail@plt+0xeaf0>
   205e0:	bl	1a8f0 <__assert_fail@plt+0x8e64>
   205e4:	mov	r0, #0
   205e8:	pop	{fp, pc}
   205ec:	bl	118e8 <__errno_location@plt>
   205f0:	mov	r1, #12
   205f4:	str	r1, [r0]
   205f8:	mov	r0, #0
   205fc:	pop	{fp, pc}
   20600:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20604:	add	fp, sp, #28
   20608:	sub	sp, sp, #44	; 0x2c
   2060c:	sub	sp, sp, #1024	; 0x400
   20610:	mov	r6, r1
   20614:	ldrb	r1, [r0]
   20618:	mov	r5, r0
   2061c:	cmp	r1, #0
   20620:	beq	206f0 <__assert_fail@plt+0xec64>
   20624:	add	r0, sp, #40	; 0x28
   20628:	mov	r2, #0
   2062c:	add	r8, r0, #16
   20630:	mov	r0, #1
   20634:	ldrb	r3, [r6, r2]
   20638:	cmp	r3, #0
   2063c:	uxtbne	r1, r1
   20640:	subne	r1, r1, r3
   20644:	clzne	r1, r1
   20648:	lsrne	r1, r1, #5
   2064c:	andne	r0, r0, r1
   20650:	addne	r1, r5, r2
   20654:	addne	r2, r2, #1
   20658:	ldrbne	r1, [r1, #1]
   2065c:	cmpne	r1, #0
   20660:	bne	20634 <__assert_fail@plt+0xeba8>
   20664:	add	r2, r6, r2
   20668:	mov	r4, r5
   2066c:	ldrb	r1, [r2]
   20670:	cmp	r1, #0
   20674:	movwne	r4, #0
   20678:	tst	r0, #1
   2067c:	cmpeq	r1, #0
   20680:	bne	20700 <__assert_fail@plt+0xec74>
   20684:	ldrb	r1, [r6]
   20688:	add	r0, r5, #1
   2068c:	str	r2, [sp, #28]
   20690:	sub	r4, r2, r6
   20694:	bl	118b8 <strchr@plt>
   20698:	cmp	r4, #1
   2069c:	str	r4, [sp, #32]
   206a0:	beq	2070c <__assert_fail@plt+0xec80>
   206a4:	ldr	r3, [sp, #28]
   206a8:	cmp	r0, #0
   206ac:	mov	r4, r0
   206b0:	beq	20700 <__assert_fail@plt+0xec74>
   206b4:	ldr	r1, [sp, #32]
   206b8:	str	r0, [sp, #36]	; 0x24
   206bc:	add	r2, r5, r1
   206c0:	mov	r5, r1
   206c4:	subs	r1, r2, r0
   206c8:	sub	sl, r3, r5
   206cc:	movwcc	r1, #1
   206d0:	cmp	r5, #31
   206d4:	bhi	20714 <__assert_fail@plt+0xec88>
   206d8:	mov	r8, r1
   206dc:	cmp	r5, #3
   206e0:	bcs	20810 <__assert_fail@plt+0xed84>
   206e4:	sub	r7, r5, #1
   206e8:	mov	r9, #1
   206ec:	b	20e98 <__assert_fail@plt+0xf40c>
   206f0:	ldrb	r0, [r6]
   206f4:	cmp	r0, #0
   206f8:	movne	r5, #0
   206fc:	mov	r4, r5
   20700:	mov	r0, r4
   20704:	sub	sp, fp, #28
   20708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2070c:	mov	r4, r0
   20710:	b	20700 <__assert_fail@plt+0xec74>
   20714:	rsb	r0, r5, #0
   20718:	str	r1, [sp, #16]
   2071c:	mov	r2, #0
   20720:	mov	r1, #1
   20724:	mov	ip, #1
   20728:	mov	r3, #1
   2072c:	str	r0, [sp, #12]
   20730:	mvn	r0, #0
   20734:	b	20750 <__assert_fail@plt+0xecc4>
   20738:	sub	ip, r1, r0
   2073c:	mov	r3, #1
   20740:	mov	r2, r1
   20744:	add	r1, r3, r2
   20748:	cmp	r1, r5
   2074c:	bcs	20790 <__assert_fail@plt+0xed04>
   20750:	add	r4, r0, r3
   20754:	ldrb	r7, [sl, r1]
   20758:	ldrb	r4, [sl, r4]
   2075c:	cmp	r7, r4
   20760:	bcc	20738 <__assert_fail@plt+0xecac>
   20764:	bne	2077c <__assert_fail@plt+0xecf0>
   20768:	cmp	r3, ip
   2076c:	addne	r3, r3, #1
   20770:	addeq	r2, r2, ip
   20774:	moveq	r3, #1
   20778:	b	20744 <__assert_fail@plt+0xecb8>
   2077c:	add	r1, r2, #1
   20780:	mov	r0, r2
   20784:	mov	r3, #1
   20788:	mov	ip, #1
   2078c:	b	20740 <__assert_fail@plt+0xecb4>
   20790:	cmp	r5, #2
   20794:	bcc	20880 <__assert_fail@plt+0xedf4>
   20798:	mvn	lr, #0
   2079c:	mov	r2, #0
   207a0:	mov	r3, #1
   207a4:	mov	r9, #1
   207a8:	mov	r4, #1
   207ac:	b	207c8 <__assert_fail@plt+0xed3c>
   207b0:	sub	r9, r3, lr
   207b4:	mov	r4, #1
   207b8:	mov	r2, r3
   207bc:	add	r3, r4, r2
   207c0:	cmp	r3, r5
   207c4:	bcs	20888 <__assert_fail@plt+0xedfc>
   207c8:	add	r7, lr, r4
   207cc:	ldrb	r1, [sl, r3]
   207d0:	ldrb	r7, [sl, r7]
   207d4:	cmp	r7, r1
   207d8:	bcc	207b0 <__assert_fail@plt+0xed24>
   207dc:	cmp	r1, r7
   207e0:	bne	207f8 <__assert_fail@plt+0xed6c>
   207e4:	cmp	r4, r9
   207e8:	addne	r4, r4, #1
   207ec:	addeq	r2, r2, r9
   207f0:	moveq	r4, #1
   207f4:	b	207bc <__assert_fail@plt+0xed30>
   207f8:	add	r1, r2, #1
   207fc:	mov	lr, r2
   20800:	mov	r4, #1
   20804:	mov	r9, #1
   20808:	mov	r2, r1
   2080c:	b	207bc <__assert_fail@plt+0xed30>
   20810:	mvn	r1, #0
   20814:	mov	r0, #0
   20818:	mov	r2, #1
   2081c:	mov	ip, #1
   20820:	mov	r3, #1
   20824:	b	20840 <__assert_fail@plt+0xedb4>
   20828:	sub	ip, r2, r1
   2082c:	mov	r3, #1
   20830:	mov	r0, r2
   20834:	add	r2, r3, r0
   20838:	cmp	r2, r5
   2083c:	bcs	20c8c <__assert_fail@plt+0xf200>
   20840:	add	r4, r1, r3
   20844:	ldrb	r7, [sl, r2]
   20848:	ldrb	r4, [sl, r4]
   2084c:	cmp	r7, r4
   20850:	bcc	20828 <__assert_fail@plt+0xed9c>
   20854:	bne	2086c <__assert_fail@plt+0xede0>
   20858:	cmp	r3, ip
   2085c:	addne	r3, r3, #1
   20860:	addeq	r0, r0, ip
   20864:	moveq	r3, #1
   20868:	b	20834 <__assert_fail@plt+0xeda8>
   2086c:	add	r2, r0, #1
   20870:	mov	r1, r0
   20874:	mov	r3, #1
   20878:	mov	ip, #1
   2087c:	b	20830 <__assert_fail@plt+0xeda4>
   20880:	mov	r9, #1
   20884:	mvn	lr, #0
   20888:	vdup.32	q8, r5
   2088c:	add	r2, sp, #40	; 0x28
   20890:	add	r1, r8, #976	; 0x3d0
   20894:	vst1.32	{d16-d17}, [r2]
   20898:	vst1.32	{d16-d17}, [r1]
   2089c:	add	r1, r8, #960	; 0x3c0
   208a0:	vst1.32	{d16-d17}, [r1]
   208a4:	add	r1, r8, #944	; 0x3b0
   208a8:	vst1.32	{d16-d17}, [r1]
   208ac:	add	r1, r8, #928	; 0x3a0
   208b0:	vst1.32	{d16-d17}, [r1]
   208b4:	add	r1, r8, #912	; 0x390
   208b8:	vst1.32	{d16-d17}, [r1]
   208bc:	add	r1, r8, #896	; 0x380
   208c0:	vst1.32	{d16-d17}, [r1]
   208c4:	add	r1, r8, #880	; 0x370
   208c8:	vst1.32	{d16-d17}, [r1]
   208cc:	add	r1, r8, #864	; 0x360
   208d0:	vst1.32	{d16-d17}, [r1]
   208d4:	add	r1, r8, #848	; 0x350
   208d8:	vst1.32	{d16-d17}, [r1]
   208dc:	add	r1, r8, #832	; 0x340
   208e0:	vst1.32	{d16-d17}, [r1]
   208e4:	add	r1, r8, #816	; 0x330
   208e8:	vst1.32	{d16-d17}, [r1]
   208ec:	add	r1, r8, #800	; 0x320
   208f0:	vst1.32	{d16-d17}, [r1]
   208f4:	add	r1, r8, #784	; 0x310
   208f8:	vst1.32	{d16-d17}, [r1]
   208fc:	add	r1, r8, #768	; 0x300
   20900:	vst1.32	{d16-d17}, [r1]
   20904:	add	r1, r8, #752	; 0x2f0
   20908:	vst1.32	{d16-d17}, [r1]
   2090c:	add	r1, r8, #736	; 0x2e0
   20910:	vst1.32	{d16-d17}, [r1]
   20914:	add	r1, r8, #720	; 0x2d0
   20918:	vst1.32	{d16-d17}, [r1]
   2091c:	add	r1, r8, #704	; 0x2c0
   20920:	vst1.32	{d16-d17}, [r1]
   20924:	add	r1, r8, #688	; 0x2b0
   20928:	vst1.32	{d16-d17}, [r1]
   2092c:	add	r1, r8, #672	; 0x2a0
   20930:	vst1.32	{d16-d17}, [r1]
   20934:	add	r1, r8, #656	; 0x290
   20938:	vst1.32	{d16-d17}, [r1]
   2093c:	add	r1, r8, #640	; 0x280
   20940:	vst1.32	{d16-d17}, [r1]
   20944:	add	r1, r8, #624	; 0x270
   20948:	vst1.32	{d16-d17}, [r1]
   2094c:	add	r1, r8, #608	; 0x260
   20950:	vst1.32	{d16-d17}, [r1]
   20954:	add	r1, r8, #592	; 0x250
   20958:	vst1.32	{d16-d17}, [r1]
   2095c:	add	r1, r8, #576	; 0x240
   20960:	vst1.32	{d16-d17}, [r1]
   20964:	add	r1, r8, #560	; 0x230
   20968:	vst1.32	{d16-d17}, [r1]
   2096c:	add	r1, r8, #544	; 0x220
   20970:	vst1.32	{d16-d17}, [r1]
   20974:	add	r1, r8, #528	; 0x210
   20978:	vst1.32	{d16-d17}, [r1]
   2097c:	add	r1, r8, #512	; 0x200
   20980:	vst1.32	{d16-d17}, [r1]
   20984:	add	r1, r8, #496	; 0x1f0
   20988:	vst1.32	{d16-d17}, [r1]
   2098c:	add	r1, r8, #480	; 0x1e0
   20990:	vst1.32	{d16-d17}, [r1]
   20994:	add	r1, r8, #464	; 0x1d0
   20998:	vst1.32	{d16-d17}, [r1]
   2099c:	add	r1, r8, #448	; 0x1c0
   209a0:	vst1.32	{d16-d17}, [r1]
   209a4:	add	r1, r8, #432	; 0x1b0
   209a8:	vst1.32	{d16-d17}, [r1]
   209ac:	add	r1, r8, #416	; 0x1a0
   209b0:	vst1.32	{d16-d17}, [r1]
   209b4:	add	r1, r8, #400	; 0x190
   209b8:	vst1.32	{d16-d17}, [r1]
   209bc:	add	r1, r8, #384	; 0x180
   209c0:	vst1.32	{d16-d17}, [r1]
   209c4:	add	r1, r8, #368	; 0x170
   209c8:	vst1.32	{d16-d17}, [r1]
   209cc:	add	r1, r8, #352	; 0x160
   209d0:	vst1.32	{d16-d17}, [r1]
   209d4:	add	r1, r8, #336	; 0x150
   209d8:	vst1.32	{d16-d17}, [r1]
   209dc:	add	r1, r8, #320	; 0x140
   209e0:	vst1.32	{d16-d17}, [r1]
   209e4:	add	r1, r8, #304	; 0x130
   209e8:	vst1.32	{d16-d17}, [r1]
   209ec:	add	r1, r8, #288	; 0x120
   209f0:	vst1.32	{d16-d17}, [r1]
   209f4:	add	r1, r8, #272	; 0x110
   209f8:	vst1.32	{d16-d17}, [r1]
   209fc:	add	r1, r8, #256	; 0x100
   20a00:	vst1.32	{d16-d17}, [r1]
   20a04:	add	r1, r8, #240	; 0xf0
   20a08:	vst1.32	{d16-d17}, [r1]
   20a0c:	add	r1, r8, #224	; 0xe0
   20a10:	vst1.32	{d16-d17}, [r1]
   20a14:	add	r1, r8, #208	; 0xd0
   20a18:	vst1.32	{d16-d17}, [r1]
   20a1c:	add	r1, r8, #192	; 0xc0
   20a20:	vst1.32	{d16-d17}, [r1]
   20a24:	add	r1, r8, #176	; 0xb0
   20a28:	vst1.32	{d16-d17}, [r1]
   20a2c:	add	r1, r8, #160	; 0xa0
   20a30:	vst1.32	{d16-d17}, [r1]
   20a34:	add	r1, r8, #144	; 0x90
   20a38:	vst1.32	{d16-d17}, [r1]
   20a3c:	add	r1, r8, #128	; 0x80
   20a40:	vst1.32	{d16-d17}, [r1]
   20a44:	add	r1, r8, #112	; 0x70
   20a48:	vst1.32	{d16-d17}, [r1]
   20a4c:	add	r1, r8, #96	; 0x60
   20a50:	vst1.32	{d16-d17}, [r1]
   20a54:	add	r1, r8, #80	; 0x50
   20a58:	vst1.32	{d16-d17}, [r1]
   20a5c:	add	r1, r8, #64	; 0x40
   20a60:	vst1.32	{d16-d17}, [r1]
   20a64:	add	r1, r8, #48	; 0x30
   20a68:	vst1.32	{d16-d17}, [r1]
   20a6c:	add	r1, r8, #32
   20a70:	vst1.32	{d16-d17}, [r1]
   20a74:	add	r1, r8, #16
   20a78:	vst1.32	{d16-d17}, [r1]
   20a7c:	mov	r1, #992	; 0x3e0
   20a80:	vst1.32	{d16-d17}, [r8], r1
   20a84:	add	r1, r0, #1
   20a88:	vst1.32	{d16-d17}, [r8]
   20a8c:	add	r8, lr, #1
   20a90:	cmp	r8, r1
   20a94:	movcc	r9, ip
   20a98:	movcc	r8, r1
   20a9c:	cmp	r5, #0
   20aa0:	str	r9, [sp, #24]
   20aa4:	beq	20b1c <__assert_fail@plt+0xf090>
   20aa8:	ldr	r3, [sp, #28]
   20aac:	mov	r0, r2
   20ab0:	mvn	r2, r6
   20ab4:	and	ip, r5, #1
   20ab8:	mov	r1, #0
   20abc:	cmn	r2, r3
   20ac0:	beq	20afc <__assert_fail@plt+0xf070>
   20ac4:	ldr	r1, [sp, #32]
   20ac8:	sub	r2, r1, ip
   20acc:	sub	r3, r1, #2
   20ad0:	mov	r1, #0
   20ad4:	mov	r5, sl
   20ad8:	add	r4, r3, #1
   20adc:	ldrb	r7, [r5, r1]!
   20ae0:	add	r1, r1, #2
   20ae4:	cmp	r2, r1
   20ae8:	str	r4, [r0, r7, lsl #2]
   20aec:	ldrb	r7, [r5, #1]
   20af0:	str	r3, [r0, r7, lsl #2]
   20af4:	sub	r3, r3, #2
   20af8:	bne	20ad4 <__assert_fail@plt+0xf048>
   20afc:	ldr	r5, [sp, #32]
   20b00:	ldr	r9, [sp, #24]
   20b04:	cmp	ip, #0
   20b08:	beq	20b1c <__assert_fail@plt+0xf090>
   20b0c:	ldrb	r2, [sl, r1]
   20b10:	mvn	r1, r1
   20b14:	add	r1, r5, r1
   20b18:	str	r1, [r0, r2, lsl #2]
   20b1c:	add	r1, sl, r9
   20b20:	mov	r0, sl
   20b24:	mov	r2, r8
   20b28:	bl	118a0 <bcmp@plt>
   20b2c:	cmp	r0, #0
   20b30:	str	r8, [sp, #20]
   20b34:	beq	20d0c <__assert_fail@plt+0xf280>
   20b38:	ldr	r1, [sp, #16]
   20b3c:	ldr	r0, [sp, #36]	; 0x24
   20b40:	mov	r4, #0
   20b44:	add	r0, r0, r1
   20b48:	sub	r2, r5, r1
   20b4c:	mov	r1, #0
   20b50:	bl	11948 <memchr@plt>
   20b54:	sub	r1, r5, r8
   20b58:	cmp	r8, r1
   20b5c:	movcs	r1, r8
   20b60:	cmp	r5, #0
   20b64:	str	r1, [sp, #8]
   20b68:	beq	20700 <__assert_fail@plt+0xec74>
   20b6c:	ldr	r7, [sp, #36]	; 0x24
   20b70:	cmp	r0, #0
   20b74:	bne	20700 <__assert_fail@plt+0xec74>
   20b78:	ldr	r2, [sp, #20]
   20b7c:	ldr	r3, [sp, #28]
   20b80:	mov	r8, #0
   20b84:	mov	ip, r5
   20b88:	add	r0, r7, r2
   20b8c:	str	r0, [sp, #4]
   20b90:	ldr	r0, [sp, #12]
   20b94:	add	r0, r3, r0
   20b98:	add	r1, r0, r2
   20b9c:	sub	r0, r6, r3
   20ba0:	add	r0, r0, r2
   20ba4:	str	r1, [sp, #28]
   20ba8:	add	r6, r0, #1
   20bac:	rsb	r0, r2, #1
   20bb0:	str	r0, [sp, #12]
   20bb4:	sub	r0, r5, #1
   20bb8:	str	r6, [sp, #24]
   20bbc:	str	r0, [sp, #16]
   20bc0:	add	r0, ip, r7
   20bc4:	add	r3, sp, #40	; 0x28
   20bc8:	ldrb	r2, [r0, #-1]
   20bcc:	ldr	r2, [r3, r2, lsl #2]
   20bd0:	cmp	r2, #0
   20bd4:	beq	20be0 <__assert_fail@plt+0xf154>
   20bd8:	add	r8, r2, r8
   20bdc:	b	20c54 <__assert_fail@plt+0xf1c8>
   20be0:	ldr	r2, [sp, #20]
   20be4:	ldr	r3, [sp, #16]
   20be8:	cmp	r2, r3
   20bec:	bcs	20c18 <__assert_fail@plt+0xf18c>
   20bf0:	ldr	r2, [sp, #4]
   20bf4:	add	r3, r2, r8
   20bf8:	mov	r2, #0
   20bfc:	ldrb	r5, [r3, -r2]
   20c00:	ldrb	r4, [r1, -r2]
   20c04:	cmp	r4, r5
   20c08:	bne	20c44 <__assert_fail@plt+0xf1b8>
   20c0c:	sub	r2, r2, #1
   20c10:	cmp	r6, r2
   20c14:	bne	20bfc <__assert_fail@plt+0xf170>
   20c18:	ldr	r2, [sp, #12]
   20c1c:	add	r4, r7, r8
   20c20:	cmp	r2, #1
   20c24:	beq	20700 <__assert_fail@plt+0xec74>
   20c28:	ldrb	r3, [r4, -r2]
   20c2c:	ldrb	r5, [sl, -r2]
   20c30:	add	r2, r2, #1
   20c34:	cmp	r5, r3
   20c38:	beq	20c20 <__assert_fail@plt+0xf194>
   20c3c:	ldr	r2, [sp, #8]
   20c40:	b	20c48 <__assert_fail@plt+0xf1bc>
   20c44:	rsb	r2, r2, #0
   20c48:	ldr	r5, [sp, #32]
   20c4c:	add	r2, r8, r2
   20c50:	add	r8, r2, #1
   20c54:	add	r9, r8, r5
   20c58:	mov	r1, #0
   20c5c:	mov	r4, #0
   20c60:	sub	r2, r9, ip
   20c64:	bl	11948 <memchr@plt>
   20c68:	cmp	r9, #0
   20c6c:	beq	20700 <__assert_fail@plt+0xec74>
   20c70:	ldr	r7, [sp, #36]	; 0x24
   20c74:	ldr	r1, [sp, #28]
   20c78:	ldr	r6, [sp, #24]
   20c7c:	cmp	r0, #0
   20c80:	mov	ip, r9
   20c84:	beq	20bc0 <__assert_fail@plt+0xf134>
   20c88:	b	20700 <__assert_fail@plt+0xec74>
   20c8c:	cmp	r5, #2
   20c90:	bcc	20e7c <__assert_fail@plt+0xf3f0>
   20c94:	mvn	lr, #0
   20c98:	mov	r2, #0
   20c9c:	mov	r3, #1
   20ca0:	mov	r9, #1
   20ca4:	mov	r4, #1
   20ca8:	b	20cc4 <__assert_fail@plt+0xf238>
   20cac:	sub	r9, r3, lr
   20cb0:	mov	r4, #1
   20cb4:	mov	r2, r3
   20cb8:	add	r3, r4, r2
   20cbc:	cmp	r3, r5
   20cc0:	bcs	20e84 <__assert_fail@plt+0xf3f8>
   20cc4:	add	r7, lr, r4
   20cc8:	ldrb	r0, [sl, r3]
   20ccc:	ldrb	r7, [sl, r7]
   20cd0:	cmp	r7, r0
   20cd4:	bcc	20cac <__assert_fail@plt+0xf220>
   20cd8:	cmp	r0, r7
   20cdc:	bne	20cf4 <__assert_fail@plt+0xf268>
   20ce0:	cmp	r4, r9
   20ce4:	addne	r4, r4, #1
   20ce8:	addeq	r2, r2, r9
   20cec:	moveq	r4, #1
   20cf0:	b	20cb8 <__assert_fail@plt+0xf22c>
   20cf4:	add	r0, r2, #1
   20cf8:	mov	lr, r2
   20cfc:	mov	r4, #1
   20d00:	mov	r9, #1
   20d04:	mov	r2, r0
   20d08:	b	20cb8 <__assert_fail@plt+0xf22c>
   20d0c:	ldr	r1, [sp, #16]
   20d10:	ldr	r0, [sp, #36]	; 0x24
   20d14:	mov	r4, #0
   20d18:	add	r0, r0, r1
   20d1c:	sub	r2, r5, r1
   20d20:	mov	r1, #0
   20d24:	bl	11948 <memchr@plt>
   20d28:	cmp	r5, #0
   20d2c:	beq	20700 <__assert_fail@plt+0xec74>
   20d30:	ldr	r8, [sp, #36]	; 0x24
   20d34:	cmp	r0, #0
   20d38:	bne	20700 <__assert_fail@plt+0xec74>
   20d3c:	ldr	r0, [sp, #24]
   20d40:	sub	lr, r5, #1
   20d44:	mov	r9, #0
   20d48:	mov	ip, r5
   20d4c:	sub	r0, r5, r0
   20d50:	str	r0, [sp, #28]
   20d54:	ldr	r0, [sp, #20]
   20d58:	sub	r1, r0, #1
   20d5c:	rsb	r0, r0, #1
   20d60:	str	r1, [sp, #16]
   20d64:	mov	r1, #0
   20d68:	str	r0, [sp, #12]
   20d6c:	add	r0, ip, r8
   20d70:	add	r3, sp, #40	; 0x28
   20d74:	ldrb	r2, [r0, #-1]
   20d78:	ldr	r3, [r3, r2, lsl #2]
   20d7c:	cmp	r3, #0
   20d80:	beq	20da8 <__assert_fail@plt+0xf31c>
   20d84:	ldr	r2, [sp, #24]
   20d88:	ldr	r7, [sp, #28]
   20d8c:	cmp	r3, r2
   20d90:	mov	r2, r3
   20d94:	movcc	r2, r7
   20d98:	cmp	r9, #0
   20d9c:	mov	r9, #0
   20da0:	moveq	r2, r3
   20da4:	b	20e30 <__assert_fail@plt+0xf3a4>
   20da8:	ldr	r2, [sp, #20]
   20dac:	cmp	r2, r9
   20db0:	movcc	r2, r9
   20db4:	cmp	r2, lr
   20db8:	bcs	20ddc <__assert_fail@plt+0xf350>
   20dbc:	add	r3, r8, r1
   20dc0:	ldrb	r5, [r3, r2]
   20dc4:	ldrb	r4, [sl, r2]
   20dc8:	cmp	r4, r5
   20dcc:	bne	20e20 <__assert_fail@plt+0xf394>
   20dd0:	add	r2, r2, #1
   20dd4:	cmp	r2, lr
   20dd8:	bcc	20dc0 <__assert_fail@plt+0xf334>
   20ddc:	ldr	r2, [sp, #16]
   20de0:	add	r4, r8, r1
   20de4:	add	r3, r2, #1
   20de8:	cmp	r9, r3
   20dec:	bcs	20e04 <__assert_fail@plt+0xf378>
   20df0:	ldrb	r5, [r4, r2]
   20df4:	ldrb	r7, [sl, r2]
   20df8:	sub	r2, r2, #1
   20dfc:	cmp	r7, r5
   20e00:	beq	20de4 <__assert_fail@plt+0xf358>
   20e04:	add	r2, r9, #1
   20e08:	ldr	r9, [sp, #28]
   20e0c:	ldr	r5, [sp, #32]
   20e10:	cmp	r3, r2
   20e14:	ldr	r2, [sp, #24]
   20e18:	bcs	20e30 <__assert_fail@plt+0xf3a4>
   20e1c:	b	20700 <__assert_fail@plt+0xec74>
   20e20:	ldr	r3, [sp, #12]
   20e24:	ldr	r5, [sp, #32]
   20e28:	mov	r9, #0
   20e2c:	add	r2, r3, r2
   20e30:	add	r1, r2, r1
   20e34:	mov	r6, sl
   20e38:	mov	sl, lr
   20e3c:	mov	r4, #0
   20e40:	add	r8, r1, r5
   20e44:	mov	r7, r1
   20e48:	mov	r1, #0
   20e4c:	sub	r2, r8, ip
   20e50:	bl	11948 <memchr@plt>
   20e54:	cmp	r8, #0
   20e58:	beq	20700 <__assert_fail@plt+0xec74>
   20e5c:	mov	ip, r8
   20e60:	ldr	r8, [sp, #36]	; 0x24
   20e64:	mov	lr, sl
   20e68:	cmp	r0, #0
   20e6c:	mov	sl, r6
   20e70:	mov	r1, r7
   20e74:	beq	20d6c <__assert_fail@plt+0xf2e0>
   20e78:	b	20700 <__assert_fail@plt+0xec74>
   20e7c:	mov	r9, #1
   20e80:	mvn	lr, #0
   20e84:	add	r0, r1, #1
   20e88:	add	r7, lr, #1
   20e8c:	cmp	r7, r0
   20e90:	movcc	r9, ip
   20e94:	movcc	r7, r0
   20e98:	add	r1, sl, r9
   20e9c:	mov	r0, sl
   20ea0:	mov	r2, r7
   20ea4:	bl	118a0 <bcmp@plt>
   20ea8:	cmp	r0, #0
   20eac:	beq	20fb4 <__assert_fail@plt+0xf528>
   20eb0:	ldr	r0, [sp, #36]	; 0x24
   20eb4:	sub	r2, r5, r8
   20eb8:	mov	r1, #0
   20ebc:	mov	r4, #0
   20ec0:	add	r0, r0, r8
   20ec4:	bl	11948 <memchr@plt>
   20ec8:	sub	r1, r5, r7
   20ecc:	cmp	r7, r1
   20ed0:	movcs	r1, r7
   20ed4:	cmp	r5, #0
   20ed8:	str	r1, [sp, #24]
   20edc:	beq	20700 <__assert_fail@plt+0xec74>
   20ee0:	cmp	r0, #0
   20ee4:	ldr	r5, [sp, #36]	; 0x24
   20ee8:	ldr	r0, [sp, #28]
   20eec:	bne	20700 <__assert_fail@plt+0xec74>
   20ef0:	add	r1, r5, r7
   20ef4:	sub	r0, r0, r7
   20ef8:	add	r9, r7, r6
   20efc:	mov	r8, #0
   20f00:	str	r7, [sp, #12]
   20f04:	str	r1, [sp, #20]
   20f08:	ldr	r1, [sp, #32]
   20f0c:	sub	r6, r0, r6
   20f10:	rsb	r0, r7, #1
   20f14:	str	r0, [sp, #28]
   20f18:	ldr	ip, [sp, #32]
   20f1c:	cmp	ip, r7
   20f20:	bls	20f4c <__assert_fail@plt+0xf4c0>
   20f24:	ldr	r0, [sp, #20]
   20f28:	mov	r2, #0
   20f2c:	add	r0, r0, r8
   20f30:	ldrb	r3, [r0, r2]
   20f34:	ldrb	r7, [r9, r2]
   20f38:	cmp	r7, r3
   20f3c:	bne	20f74 <__assert_fail@plt+0xf4e8>
   20f40:	add	r2, r2, #1
   20f44:	cmp	r6, r2
   20f48:	bne	20f30 <__assert_fail@plt+0xf4a4>
   20f4c:	ldr	r0, [sp, #28]
   20f50:	add	r4, r5, r8
   20f54:	cmp	r0, #1
   20f58:	beq	20700 <__assert_fail@plt+0xec74>
   20f5c:	ldrb	r2, [r4, -r0]
   20f60:	ldrb	r3, [sl, -r0]
   20f64:	add	r0, r0, #1
   20f68:	cmp	r3, r2
   20f6c:	beq	20f54 <__assert_fail@plt+0xf4c8>
   20f70:	ldr	r2, [sp, #24]
   20f74:	add	r2, r8, r2
   20f78:	add	r0, r5, r1
   20f7c:	mov	r4, #0
   20f80:	add	r8, r2, #1
   20f84:	add	r7, r8, ip
   20f88:	sub	r2, r7, r1
   20f8c:	mov	r1, #0
   20f90:	bl	11948 <memchr@plt>
   20f94:	cmp	r0, #0
   20f98:	bne	20700 <__assert_fail@plt+0xec74>
   20f9c:	cmp	r7, #0
   20fa0:	mov	r1, r7
   20fa4:	ldr	r5, [sp, #36]	; 0x24
   20fa8:	ldr	r7, [sp, #12]
   20fac:	bne	20f18 <__assert_fail@plt+0xf48c>
   20fb0:	b	20700 <__assert_fail@plt+0xec74>
   20fb4:	ldr	r0, [sp, #36]	; 0x24
   20fb8:	sub	r2, r5, r8
   20fbc:	mov	r1, #0
   20fc0:	mov	r4, #0
   20fc4:	add	r0, r0, r8
   20fc8:	bl	11948 <memchr@plt>
   20fcc:	cmp	r5, #0
   20fd0:	beq	20700 <__assert_fail@plt+0xec74>
   20fd4:	ldr	ip, [sp, #36]	; 0x24
   20fd8:	cmp	r0, #0
   20fdc:	str	r9, [sp, #28]
   20fe0:	bne	20700 <__assert_fail@plt+0xec74>
   20fe4:	ldr	r1, [sp, #32]
   20fe8:	ldr	r0, [sp, #28]
   20fec:	ldr	r5, [sp, #32]
   20ff0:	mov	r6, #0
   20ff4:	mov	r8, #0
   20ff8:	sub	r0, r1, r0
   20ffc:	str	r0, [sp, #24]
   21000:	sub	r0, r7, #1
   21004:	str	r0, [sp, #20]
   21008:	rsb	r0, r7, #1
   2100c:	str	r0, [sp, #16]
   21010:	cmp	r7, r6
   21014:	mov	r0, r7
   21018:	mov	r9, r7
   2101c:	movcc	r0, r6
   21020:	cmp	r0, r5
   21024:	bcs	21048 <__assert_fail@plt+0xf5bc>
   21028:	add	r2, ip, r8
   2102c:	ldrb	r3, [r2, r0]
   21030:	ldrb	r7, [sl, r0]
   21034:	cmp	r7, r3
   21038:	bne	21088 <__assert_fail@plt+0xf5fc>
   2103c:	add	r0, r0, #1
   21040:	cmp	r0, r5
   21044:	bcc	2102c <__assert_fail@plt+0xf5a0>
   21048:	ldr	r0, [sp, #20]
   2104c:	add	r4, ip, r8
   21050:	add	r2, r0, #1
   21054:	cmp	r6, r2
   21058:	bcs	21070 <__assert_fail@plt+0xf5e4>
   2105c:	ldrb	r3, [r4, r0]
   21060:	ldrb	r7, [sl, r0]
   21064:	sub	r0, r0, #1
   21068:	cmp	r7, r3
   2106c:	beq	21050 <__assert_fail@plt+0xf5c4>
   21070:	add	r0, r6, #1
   21074:	ldr	r6, [sp, #24]
   21078:	cmp	r2, r0
   2107c:	ldr	r2, [sp, #28]
   21080:	bcs	21094 <__assert_fail@plt+0xf608>
   21084:	b	20700 <__assert_fail@plt+0xec74>
   21088:	ldr	r2, [sp, #16]
   2108c:	mov	r6, #0
   21090:	add	r2, r2, r0
   21094:	add	r8, r2, r8
   21098:	add	r0, ip, r1
   2109c:	mov	r4, #0
   210a0:	add	r7, r8, r5
   210a4:	sub	r2, r7, r1
   210a8:	mov	r1, #0
   210ac:	bl	11948 <memchr@plt>
   210b0:	cmp	r7, #0
   210b4:	beq	20700 <__assert_fail@plt+0xec74>
   210b8:	ldr	ip, [sp, #36]	; 0x24
   210bc:	mov	r1, r7
   210c0:	cmp	r0, #0
   210c4:	mov	r7, r9
   210c8:	beq	21010 <__assert_fail@plt+0xf584>
   210cc:	b	20700 <__assert_fail@plt+0xec74>
   210d0:	sub	r0, r0, #1
   210d4:	ldrb	r3, [r0, #1]!
   210d8:	cmp	r3, #47	; 0x2f
   210dc:	beq	210d4 <__assert_fail@plt+0xf648>
   210e0:	mov	r2, #0
   210e4:	mov	r1, r0
   210e8:	b	210f4 <__assert_fail@plt+0xf668>
   210ec:	ldrb	r3, [r1, #1]!
   210f0:	mov	r2, #1
   210f4:	uxtb	r3, r3
   210f8:	cmp	r3, #47	; 0x2f
   210fc:	beq	210ec <__assert_fail@plt+0xf660>
   21100:	cmp	r3, #0
   21104:	bxeq	lr
   21108:	tst	r2, #1
   2110c:	mov	r2, #0
   21110:	movne	r0, r1
   21114:	ldrb	r3, [r1, #1]!
   21118:	b	210f4 <__assert_fail@plt+0xf668>
   2111c:	push	{r4, sl, fp, lr}
   21120:	add	fp, sp, #8
   21124:	mov	r4, r0
   21128:	bl	118ac <strlen@plt>
   2112c:	mov	r1, r0
   21130:	sub	r2, r4, #1
   21134:	mov	r0, r1
   21138:	cmp	r1, #2
   2113c:	bcc	21150 <__assert_fail@plt+0xf6c4>
   21140:	ldrb	r3, [r2, r0]
   21144:	sub	r1, r0, #1
   21148:	cmp	r3, #47	; 0x2f
   2114c:	beq	21134 <__assert_fail@plt+0xf6a8>
   21150:	pop	{r4, sl, fp, pc}
   21154:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21158:	add	fp, sp, #28
   2115c:	sub	sp, sp, #4
   21160:	mov	r4, r0
   21164:	bl	1175c <chdir@plt>
   21168:	cmp	r0, #0
   2116c:	beq	21230 <__assert_fail@plt+0xf7a4>
   21170:	mov	r6, r0
   21174:	bl	118e8 <__errno_location@plt>
   21178:	mov	r9, r0
   2117c:	ldr	r0, [r0]
   21180:	cmp	r0, #36	; 0x24
   21184:	bne	21420 <__assert_fail@plt+0xf994>
   21188:	mov	r0, r4
   2118c:	bl	118ac <strlen@plt>
   21190:	cmp	r0, #0
   21194:	beq	21444 <__assert_fail@plt+0xf9b8>
   21198:	mov	r7, r0
   2119c:	mov	r0, #0
   211a0:	cmp	r0, r7, lsr #12
   211a4:	beq	2145c <__assert_fail@plt+0xf9d0>
   211a8:	movw	r1, #15821	; 0x3dcd
   211ac:	mov	r0, r4
   211b0:	movt	r1, #2
   211b4:	bl	11a80 <strspn@plt>
   211b8:	cmp	r0, #0
   211bc:	beq	21238 <__assert_fail@plt+0xf7ac>
   211c0:	mov	r6, r0
   211c4:	cmp	r0, #2
   211c8:	bne	21244 <__assert_fail@plt+0xf7b8>
   211cc:	add	r0, r4, #3
   211d0:	sub	r2, r7, #3
   211d4:	mov	r1, #47	; 0x2f
   211d8:	mov	r8, #47	; 0x2f
   211dc:	bl	11948 <memchr@plt>
   211e0:	cmp	r0, #0
   211e4:	beq	213cc <__assert_fail@plt+0xf940>
   211e8:	mov	r6, r0
   211ec:	mov	r0, #0
   211f0:	mov	r1, r4
   211f4:	mov	r2, #18688	; 0x4900
   211f8:	strb	r0, [r6]
   211fc:	mvn	r0, #99	; 0x63
   21200:	bl	118d0 <openat64@plt>
   21204:	cmp	r0, #0
   21208:	strb	r8, [r6]
   2120c:	bmi	213c4 <__assert_fail@plt+0xf938>
   21210:	movw	r1, #15821	; 0x3dcd
   21214:	add	r6, r6, #1
   21218:	mov	r5, r0
   2121c:	movt	r1, #2
   21220:	mov	r0, r6
   21224:	bl	11a80 <strspn@plt>
   21228:	add	r6, r6, r0
   2122c:	b	21268 <__assert_fail@plt+0xf7dc>
   21230:	mov	r6, #0
   21234:	b	21420 <__assert_fail@plt+0xf994>
   21238:	mvn	r5, #99	; 0x63
   2123c:	mov	r6, r4
   21240:	b	21268 <__assert_fail@plt+0xf7dc>
   21244:	movw	r1, #15821	; 0x3dcd
   21248:	mvn	r0, #99	; 0x63
   2124c:	mov	r2, #18688	; 0x4900
   21250:	movt	r1, #2
   21254:	bl	118d0 <openat64@plt>
   21258:	cmp	r0, #0
   2125c:	bmi	213c4 <__assert_fail@plt+0xf938>
   21260:	mov	r5, r0
   21264:	add	r6, r4, r6
   21268:	ldrb	r0, [r6]
   2126c:	cmp	r0, #47	; 0x2f
   21270:	beq	21474 <__assert_fail@plt+0xf9e8>
   21274:	add	sl, r4, r7
   21278:	cmp	r6, sl
   2127c:	bhi	2148c <__assert_fail@plt+0xfa00>
   21280:	sub	r0, sl, r6
   21284:	str	r9, [sp]
   21288:	cmp	r0, #4096	; 0x1000
   2128c:	blt	21344 <__assert_fail@plt+0xf8b8>
   21290:	movw	r9, #15821	; 0x3dcd
   21294:	mov	r8, #0
   21298:	movt	r9, #2
   2129c:	b	212c8 <__assert_fail@plt+0xf83c>
   212a0:	mov	r0, #47	; 0x2f
   212a4:	mov	r1, r9
   212a8:	strb	r0, [r4], #1
   212ac:	mov	r0, r4
   212b0:	bl	11a80 <strspn@plt>
   212b4:	add	r6, r4, r0
   212b8:	mov	r5, r7
   212bc:	sub	r0, sl, r6
   212c0:	cmp	r0, #4096	; 0x1000
   212c4:	blt	21348 <__assert_fail@plt+0xf8bc>
   212c8:	mov	r0, r6
   212cc:	mov	r1, #47	; 0x2f
   212d0:	mov	r2, #4096	; 0x1000
   212d4:	bl	118dc <memrchr@plt>
   212d8:	cmp	r0, #0
   212dc:	beq	213d8 <__assert_fail@plt+0xf94c>
   212e0:	mov	r4, r0
   212e4:	strb	r8, [r0], -r6
   212e8:	cmp	r0, #4096	; 0x1000
   212ec:	bge	2142c <__assert_fail@plt+0xf9a0>
   212f0:	mov	r0, r5
   212f4:	mov	r1, r6
   212f8:	mov	r2, #18688	; 0x4900
   212fc:	bl	118d0 <openat64@plt>
   21300:	cmp	r0, #0
   21304:	bmi	213e8 <__assert_fail@plt+0xf95c>
   21308:	mov	r7, r0
   2130c:	cmp	r5, #0
   21310:	bmi	212a0 <__assert_fail@plt+0xf814>
   21314:	mov	r0, r5
   21318:	bl	11a68 <close@plt>
   2131c:	cmp	r0, #0
   21320:	beq	212a0 <__assert_fail@plt+0xf814>
   21324:	movw	r0, #15993	; 0x3e79
   21328:	movw	r1, #15895	; 0x3e17
   2132c:	movw	r3, #16006	; 0x3e86
   21330:	mov	r2, #64	; 0x40
   21334:	movt	r0, #2
   21338:	movt	r1, #2
   2133c:	movt	r3, #2
   21340:	bl	11a8c <__assert_fail@plt>
   21344:	mov	r7, r5
   21348:	cmp	r6, sl
   2134c:	bcs	2138c <__assert_fail@plt+0xf900>
   21350:	mov	r0, r7
   21354:	mov	r1, r6
   21358:	mov	r2, #18688	; 0x4900
   2135c:	bl	118d0 <openat64@plt>
   21360:	ldr	r9, [sp]
   21364:	cmp	r0, #0
   21368:	bmi	213f8 <__assert_fail@plt+0xf96c>
   2136c:	mov	r5, r0
   21370:	cmp	r7, #0
   21374:	bmi	21394 <__assert_fail@plt+0xf908>
   21378:	mov	r0, r7
   2137c:	bl	11a68 <close@plt>
   21380:	cmp	r0, #0
   21384:	beq	21394 <__assert_fail@plt+0xf908>
   21388:	b	21324 <__assert_fail@plt+0xf898>
   2138c:	ldr	r9, [sp]
   21390:	mov	r5, r7
   21394:	mov	r0, r5
   21398:	bl	119f0 <fchdir@plt>
   2139c:	cmp	r0, #0
   213a0:	bne	213fc <__assert_fail@plt+0xf970>
   213a4:	mov	r6, #0
   213a8:	cmp	r5, #0
   213ac:	bmi	21420 <__assert_fail@plt+0xf994>
   213b0:	mov	r0, r5
   213b4:	bl	11a68 <close@plt>
   213b8:	cmp	r0, #0
   213bc:	beq	21420 <__assert_fail@plt+0xf994>
   213c0:	b	21324 <__assert_fail@plt+0xf898>
   213c4:	ldr	r4, [r9]
   213c8:	b	21418 <__assert_fail@plt+0xf98c>
   213cc:	mov	r0, #36	; 0x24
   213d0:	str	r0, [r9]
   213d4:	b	2141c <__assert_fail@plt+0xf990>
   213d8:	ldr	r1, [sp]
   213dc:	mov	r0, #36	; 0x24
   213e0:	str	r0, [r1]
   213e4:	b	2141c <__assert_fail@plt+0xf990>
   213e8:	ldr	r9, [sp]
   213ec:	mov	r0, #47	; 0x2f
   213f0:	strb	r0, [r4]
   213f4:	b	213fc <__assert_fail@plt+0xf970>
   213f8:	mov	r5, r7
   213fc:	ldr	r4, [r9]
   21400:	cmp	r5, #0
   21404:	bmi	21418 <__assert_fail@plt+0xf98c>
   21408:	mov	r0, r5
   2140c:	bl	11a68 <close@plt>
   21410:	cmp	r0, #0
   21414:	bne	21324 <__assert_fail@plt+0xf898>
   21418:	str	r4, [r9]
   2141c:	mvn	r6, #0
   21420:	mov	r0, r6
   21424:	sub	sp, fp, #28
   21428:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2142c:	movw	r0, #15974	; 0x3e66
   21430:	movw	r1, #15895	; 0x3e17
   21434:	movw	r3, #15912	; 0x3e28
   21438:	mov	r2, #179	; 0xb3
   2143c:	movt	r0, #2
   21440:	b	214a0 <__assert_fail@plt+0xfa14>
   21444:	movw	r0, #15887	; 0x3e0f
   21448:	movw	r1, #15895	; 0x3e17
   2144c:	movw	r3, #15912	; 0x3e28
   21450:	mov	r2, #126	; 0x7e
   21454:	movt	r0, #2
   21458:	b	214a0 <__assert_fail@plt+0xfa14>
   2145c:	movw	r0, #15935	; 0x3e3f
   21460:	movw	r1, #15895	; 0x3e17
   21464:	movw	r3, #15912	; 0x3e28
   21468:	mov	r2, #127	; 0x7f
   2146c:	movt	r0, #2
   21470:	b	214a0 <__assert_fail@plt+0xfa14>
   21474:	movw	r0, #15947	; 0x3e4b
   21478:	movw	r1, #15895	; 0x3e17
   2147c:	movw	r3, #15912	; 0x3e28
   21480:	mov	r2, #162	; 0xa2
   21484:	movt	r0, #2
   21488:	b	214a0 <__assert_fail@plt+0xfa14>
   2148c:	movw	r0, #15959	; 0x3e57
   21490:	movw	r1, #15895	; 0x3e17
   21494:	movw	r3, #15912	; 0x3e28
   21498:	mov	r2, #163	; 0xa3
   2149c:	movt	r0, #2
   214a0:	movt	r1, #2
   214a4:	movt	r3, #2
   214a8:	bl	11a8c <__assert_fail@plt>
   214ac:	push	{r4, r5, r6, sl, fp, lr}
   214b0:	add	fp, sp, #16
   214b4:	mov	r4, r0
   214b8:	bl	117bc <__fpending@plt>
   214bc:	ldr	r6, [r4]
   214c0:	mov	r5, r0
   214c4:	mov	r0, r4
   214c8:	bl	21530 <__assert_fail@plt+0xfaa4>
   214cc:	tst	r6, #32
   214d0:	bne	21508 <__assert_fail@plt+0xfa7c>
   214d4:	cmp	r0, #0
   214d8:	mov	r4, r0
   214dc:	mvnne	r4, #0
   214e0:	cmp	r5, #0
   214e4:	bne	21514 <__assert_fail@plt+0xfa88>
   214e8:	cmp	r0, #0
   214ec:	beq	21514 <__assert_fail@plt+0xfa88>
   214f0:	bl	118e8 <__errno_location@plt>
   214f4:	ldr	r0, [r0]
   214f8:	subs	r4, r0, #9
   214fc:	mvnne	r4, #0
   21500:	mov	r0, r4
   21504:	pop	{r4, r5, r6, sl, fp, pc}
   21508:	mvn	r4, #0
   2150c:	cmp	r0, #0
   21510:	beq	2151c <__assert_fail@plt+0xfa90>
   21514:	mov	r0, r4
   21518:	pop	{r4, r5, r6, sl, fp, pc}
   2151c:	bl	118e8 <__errno_location@plt>
   21520:	mov	r1, #0
   21524:	str	r1, [r0]
   21528:	mov	r0, r4
   2152c:	pop	{r4, r5, r6, sl, fp, pc}
   21530:	push	{r4, r5, r6, sl, fp, lr}
   21534:	add	fp, sp, #16
   21538:	sub	sp, sp, #8
   2153c:	mov	r4, r0
   21540:	bl	11930 <fileno@plt>
   21544:	cmn	r0, #1
   21548:	ble	215bc <__assert_fail@plt+0xfb30>
   2154c:	mov	r0, r4
   21550:	bl	11834 <__freading@plt>
   21554:	cmp	r0, #0
   21558:	beq	21584 <__assert_fail@plt+0xfaf8>
   2155c:	mov	r0, r4
   21560:	bl	11930 <fileno@plt>
   21564:	mov	r1, #1
   21568:	mov	r2, #0
   2156c:	mov	r3, #0
   21570:	str	r1, [sp]
   21574:	bl	11798 <lseek64@plt>
   21578:	and	r0, r0, r1
   2157c:	cmn	r0, #1
   21580:	beq	215bc <__assert_fail@plt+0xfb30>
   21584:	mov	r0, r4
   21588:	bl	21608 <__assert_fail@plt+0xfb7c>
   2158c:	cmp	r0, #0
   21590:	beq	215bc <__assert_fail@plt+0xfb30>
   21594:	bl	118e8 <__errno_location@plt>
   21598:	ldr	r6, [r0]
   2159c:	mov	r5, r0
   215a0:	mov	r0, r4
   215a4:	bl	11954 <fclose@plt>
   215a8:	cmp	r6, #0
   215ac:	strne	r6, [r5]
   215b0:	mvnne	r0, #0
   215b4:	sub	sp, fp, #16
   215b8:	pop	{r4, r5, r6, sl, fp, pc}
   215bc:	mov	r0, r4
   215c0:	sub	sp, fp, #16
   215c4:	pop	{r4, r5, r6, sl, fp, lr}
   215c8:	b	11954 <fclose@plt>
   215cc:	sub	sp, sp, #8
   215d0:	push	{fp, lr}
   215d4:	mov	fp, sp
   215d8:	sub	sp, sp, #8
   215dc:	str	r2, [fp, #8]
   215e0:	str	r3, [fp, #12]
   215e4:	tst	r1, #64	; 0x40
   215e8:	mov	r2, #0
   215ec:	ldrne	r2, [fp, #8]
   215f0:	bl	117ec <open64@plt>
   215f4:	bl	217e4 <__assert_fail@plt+0xfd58>
   215f8:	mov	sp, fp
   215fc:	pop	{fp, lr}
   21600:	add	sp, sp, #8
   21604:	bx	lr
   21608:	push	{r4, sl, fp, lr}
   2160c:	add	fp, sp, #8
   21610:	sub	sp, sp, #8
   21614:	mov	r4, r0
   21618:	cmp	r0, #0
   2161c:	beq	21654 <__assert_fail@plt+0xfbc8>
   21620:	mov	r0, r4
   21624:	bl	11834 <__freading@plt>
   21628:	cmp	r0, #0
   2162c:	beq	21654 <__assert_fail@plt+0xfbc8>
   21630:	ldrb	r0, [r4, #1]
   21634:	tst	r0, #1
   21638:	beq	21654 <__assert_fail@plt+0xfbc8>
   2163c:	mov	r0, #1
   21640:	mov	r2, #0
   21644:	mov	r3, #0
   21648:	str	r0, [sp]
   2164c:	mov	r0, r4
   21650:	bl	21664 <__assert_fail@plt+0xfbd8>
   21654:	mov	r0, r4
   21658:	sub	sp, fp, #8
   2165c:	pop	{r4, sl, fp, lr}
   21660:	b	116e4 <fflush@plt>
   21664:	push	{r4, r5, r6, r7, fp, lr}
   21668:	add	fp, sp, #16
   2166c:	sub	sp, sp, #8
   21670:	mov	r4, r0
   21674:	ldr	r0, [r0, #4]
   21678:	mov	r5, r3
   2167c:	mov	r6, r2
   21680:	ldr	r1, [r4, #8]
   21684:	cmp	r1, r0
   21688:	bne	216a4 <__assert_fail@plt+0xfc18>
   2168c:	ldrd	r0, [r4, #16]
   21690:	cmp	r1, r0
   21694:	bne	216a4 <__assert_fail@plt+0xfc18>
   21698:	ldr	r0, [r4, #36]	; 0x24
   2169c:	cmp	r0, #0
   216a0:	beq	216bc <__assert_fail@plt+0xfc30>
   216a4:	mov	r0, r4
   216a8:	mov	r2, r6
   216ac:	mov	r3, r5
   216b0:	sub	sp, fp, #16
   216b4:	pop	{r4, r5, r6, r7, fp, lr}
   216b8:	b	11960 <fseeko64@plt>
   216bc:	ldr	r7, [fp, #8]
   216c0:	mov	r0, r4
   216c4:	bl	11930 <fileno@plt>
   216c8:	mov	r2, r6
   216cc:	mov	r3, r5
   216d0:	str	r7, [sp]
   216d4:	bl	11798 <lseek64@plt>
   216d8:	and	r2, r0, r1
   216dc:	cmn	r2, #1
   216e0:	beq	21700 <__assert_fail@plt+0xfc74>
   216e4:	strd	r0, [r4, #80]	; 0x50
   216e8:	ldr	r0, [r4]
   216ec:	bic	r0, r0, #16
   216f0:	str	r0, [r4]
   216f4:	mov	r0, #0
   216f8:	sub	sp, fp, #16
   216fc:	pop	{r4, r5, r6, r7, fp, pc}
   21700:	mvn	r0, #0
   21704:	sub	sp, fp, #16
   21708:	pop	{r4, r5, r6, r7, fp, pc}
   2170c:	push	{fp, lr}
   21710:	mov	fp, sp
   21714:	mov	r0, #14
   21718:	bl	119c0 <nl_langinfo@plt>
   2171c:	movw	r1, #10686	; 0x29be
   21720:	cmp	r0, #0
   21724:	movt	r1, #2
   21728:	movne	r1, r0
   2172c:	movw	r0, #16043	; 0x3eab
   21730:	ldrb	r2, [r1]
   21734:	movt	r0, #2
   21738:	cmp	r2, #0
   2173c:	movne	r0, r1
   21740:	pop	{fp, pc}
   21744:	push	{r4, r5, r6, r7, fp, lr}
   21748:	add	fp, sp, #16
   2174c:	sub	sp, sp, #8
   21750:	cmp	r0, #0
   21754:	add	r5, sp, #4
   21758:	mov	r7, r2
   2175c:	mov	r4, r1
   21760:	movne	r5, r0
   21764:	mov	r0, r5
   21768:	bl	117c8 <mbrtowc@plt>
   2176c:	mov	r6, r0
   21770:	cmp	r7, #0
   21774:	beq	2179c <__assert_fail@plt+0xfd10>
   21778:	cmn	r6, #2
   2177c:	bcc	2179c <__assert_fail@plt+0xfd10>
   21780:	mov	r0, #0
   21784:	bl	21970 <__assert_fail@plt+0xfee4>
   21788:	cmp	r0, #0
   2178c:	bne	2179c <__assert_fail@plt+0xfd10>
   21790:	ldrb	r0, [r4]
   21794:	mov	r6, #1
   21798:	str	r0, [r5]
   2179c:	mov	r0, r6
   217a0:	sub	sp, fp, #16
   217a4:	pop	{r4, r5, r6, r7, fp, pc}
   217a8:	cmp	r2, #0
   217ac:	beq	217dc <__assert_fail@plt+0xfd50>
   217b0:	mvn	r3, #0
   217b4:	udiv	r3, r3, r2
   217b8:	cmp	r3, r1
   217bc:	bcs	217dc <__assert_fail@plt+0xfd50>
   217c0:	push	{fp, lr}
   217c4:	mov	fp, sp
   217c8:	bl	118e8 <__errno_location@plt>
   217cc:	mov	r1, #12
   217d0:	str	r1, [r0]
   217d4:	mov	r0, #0
   217d8:	pop	{fp, pc}
   217dc:	mul	r1, r2, r1
   217e0:	b	205ac <__assert_fail@plt+0xeb20>
   217e4:	push	{r4, r5, r6, r7, fp, lr}
   217e8:	add	fp, sp, #16
   217ec:	mov	r4, r0
   217f0:	cmp	r0, #2
   217f4:	bhi	21824 <__assert_fail@plt+0xfd98>
   217f8:	mov	r0, r4
   217fc:	bl	21a7c <__assert_fail@plt+0xfff0>
   21800:	mov	r5, r0
   21804:	bl	118e8 <__errno_location@plt>
   21808:	ldr	r7, [r0]
   2180c:	mov	r6, r0
   21810:	mov	r0, r4
   21814:	bl	11a68 <close@plt>
   21818:	mov	r0, r5
   2181c:	str	r7, [r6]
   21820:	pop	{r4, r5, r6, r7, fp, pc}
   21824:	mov	r0, r4
   21828:	pop	{r4, r5, r6, r7, fp, pc}
   2182c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21830:	add	fp, sp, #24
   21834:	sub	sp, sp, #16
   21838:	mov	r3, r1
   2183c:	mov	r2, r0
   21840:	mov	r4, #0
   21844:	mov	r0, r2
   21848:	ldrb	r1, [r0, -r4, lsl #1]!
   2184c:	cmp	r1, #37	; 0x25
   21850:	bne	21868 <__assert_fail@plt+0xfddc>
   21854:	ldrb	r0, [r0, #1]
   21858:	cmp	r0, #115	; 0x73
   2185c:	bne	21904 <__assert_fail@plt+0xfe78>
   21860:	sub	r4, r4, #1
   21864:	b	21844 <__assert_fail@plt+0xfdb8>
   21868:	cmp	r1, #0
   2186c:	bne	21904 <__assert_fail@plt+0xfe78>
   21870:	cmp	r4, #0
   21874:	str	r3, [sp, #12]
   21878:	str	r3, [sp, #8]
   2187c:	beq	21938 <__assert_fail@plt+0xfeac>
   21880:	ldr	r0, [sp, #8]
   21884:	mov	r5, #0
   21888:	mov	r7, r4
   2188c:	add	r6, r0, #4
   21890:	str	r6, [sp, #8]
   21894:	ldr	r0, [r6, #-4]
   21898:	bl	118ac <strlen@plt>
   2189c:	adds	r5, r0, r5
   218a0:	add	r6, r6, #4
   218a4:	mvncs	r5, #0
   218a8:	adds	r7, r7, #1
   218ac:	bcc	21890 <__assert_fail@plt+0xfe04>
   218b0:	cmn	r5, #1
   218b4:	ble	21954 <__assert_fail@plt+0xfec8>
   218b8:	add	r0, r5, #1
   218bc:	bl	1ff38 <__assert_fail@plt+0xe4ac>
   218c0:	mov	r8, r0
   218c4:	mov	r5, r0
   218c8:	ldr	r0, [sp, #12]
   218cc:	add	r1, r0, #4
   218d0:	str	r1, [sp, #12]
   218d4:	ldr	r6, [r0]
   218d8:	mov	r0, r6
   218dc:	bl	118ac <strlen@plt>
   218e0:	mov	r7, r0
   218e4:	mov	r0, r5
   218e8:	mov	r1, r6
   218ec:	mov	r2, r7
   218f0:	bl	11708 <memcpy@plt>
   218f4:	add	r5, r5, r7
   218f8:	adds	r4, r4, #1
   218fc:	bcc	218c8 <__assert_fail@plt+0xfe3c>
   21900:	b	21948 <__assert_fail@plt+0xfebc>
   21904:	add	r0, sp, #4
   21908:	mov	r1, #1
   2190c:	bl	1190c <__vasprintf_chk@plt>
   21910:	cmn	r0, #1
   21914:	ble	21920 <__assert_fail@plt+0xfe94>
   21918:	ldr	r8, [sp, #4]
   2191c:	b	21964 <__assert_fail@plt+0xfed8>
   21920:	bl	118e8 <__errno_location@plt>
   21924:	ldr	r0, [r0]
   21928:	mov	r8, #0
   2192c:	cmp	r0, #12
   21930:	bne	21964 <__assert_fail@plt+0xfed8>
   21934:	bl	20474 <__assert_fail@plt+0xe9e8>
   21938:	mov	r0, #1
   2193c:	bl	1ff38 <__assert_fail@plt+0xe4ac>
   21940:	mov	r8, r0
   21944:	mov	r5, r0
   21948:	mov	r0, #0
   2194c:	strb	r0, [r5]
   21950:	b	21964 <__assert_fail@plt+0xfed8>
   21954:	bl	118e8 <__errno_location@plt>
   21958:	mov	r1, #75	; 0x4b
   2195c:	mov	r8, #0
   21960:	str	r1, [r0]
   21964:	mov	r0, r8
   21968:	sub	sp, fp, #24
   2196c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   21970:	push	{r4, sl, fp, lr}
   21974:	add	fp, sp, #8
   21978:	sub	sp, sp, #264	; 0x108
   2197c:	add	r1, sp, #7
   21980:	movw	r2, #257	; 0x101
   21984:	bl	219dc <__assert_fail@plt+0xff50>
   21988:	mov	r4, #0
   2198c:	cmp	r0, #0
   21990:	bne	219d0 <__assert_fail@plt+0xff44>
   21994:	movw	r1, #16049	; 0x3eb1
   21998:	add	r0, sp, #7
   2199c:	mov	r2, #2
   219a0:	movt	r1, #2
   219a4:	bl	118a0 <bcmp@plt>
   219a8:	cmp	r0, #0
   219ac:	beq	219d0 <__assert_fail@plt+0xff44>
   219b0:	movw	r1, #16051	; 0x3eb3
   219b4:	add	r0, sp, #7
   219b8:	mov	r2, #6
   219bc:	movt	r1, #2
   219c0:	bl	118a0 <bcmp@plt>
   219c4:	cmp	r0, #0
   219c8:	mov	r4, r0
   219cc:	movwne	r4, #1
   219d0:	mov	r0, r4
   219d4:	sub	sp, fp, #8
   219d8:	pop	{r4, sl, fp, pc}
   219dc:	push	{r4, r5, r6, r7, fp, lr}
   219e0:	add	fp, sp, #16
   219e4:	mov	r4, r1
   219e8:	mov	r1, #0
   219ec:	mov	r6, r2
   219f0:	bl	1199c <setlocale@plt>
   219f4:	cmp	r0, #0
   219f8:	beq	21a28 <__assert_fail@plt+0xff9c>
   219fc:	mov	r7, r0
   21a00:	bl	118ac <strlen@plt>
   21a04:	cmp	r0, r6
   21a08:	bcs	21a44 <__assert_fail@plt+0xffb8>
   21a0c:	add	r2, r0, #1
   21a10:	mov	r0, r4
   21a14:	mov	r1, r7
   21a18:	bl	11708 <memcpy@plt>
   21a1c:	mov	r5, #0
   21a20:	mov	r0, r5
   21a24:	pop	{r4, r5, r6, r7, fp, pc}
   21a28:	mov	r5, #22
   21a2c:	cmp	r6, #0
   21a30:	beq	21a6c <__assert_fail@plt+0xffe0>
   21a34:	mov	r0, #0
   21a38:	strb	r0, [r4]
   21a3c:	mov	r0, r5
   21a40:	pop	{r4, r5, r6, r7, fp, pc}
   21a44:	mov	r5, #34	; 0x22
   21a48:	cmp	r6, #0
   21a4c:	beq	21a6c <__assert_fail@plt+0xffe0>
   21a50:	sub	r6, r6, #1
   21a54:	mov	r0, r4
   21a58:	mov	r1, r7
   21a5c:	mov	r2, r6
   21a60:	bl	11708 <memcpy@plt>
   21a64:	mov	r0, #0
   21a68:	strb	r0, [r4, r6]
   21a6c:	mov	r0, r5
   21a70:	pop	{r4, r5, r6, r7, fp, pc}
   21a74:	mov	r1, #0
   21a78:	b	1199c <setlocale@plt>
   21a7c:	mov	r1, #0
   21a80:	mov	r2, #3
   21a84:	b	21a88 <__assert_fail@plt+0xfffc>
   21a88:	sub	sp, sp, #8
   21a8c:	push	{r4, r5, r6, r7, fp, lr}
   21a90:	add	fp, sp, #16
   21a94:	sub	sp, sp, #8
   21a98:	mov	r5, r0
   21a9c:	add	r0, fp, #8
   21aa0:	cmp	r1, #11
   21aa4:	str	r2, [fp, #8]
   21aa8:	str	r3, [fp, #12]
   21aac:	str	r0, [sp, #4]
   21ab0:	bhi	21aec <__assert_fail@plt+0x10060>
   21ab4:	mov	r0, #1
   21ab8:	movw	r2, #1300	; 0x514
   21abc:	tst	r2, r0, lsl r1
   21ac0:	bne	21bac <__assert_fail@plt+0x10120>
   21ac4:	movw	r2, #2570	; 0xa0a
   21ac8:	tst	r2, r0, lsl r1
   21acc:	bne	21b14 <__assert_fail@plt+0x10088>
   21ad0:	cmp	r1, #0
   21ad4:	bne	21aec <__assert_fail@plt+0x10060>
   21ad8:	ldr	r0, [sp, #4]
   21adc:	add	r1, r0, #4
   21ae0:	str	r1, [sp, #4]
   21ae4:	mov	r1, #0
   21ae8:	b	21bb8 <__assert_fail@plt+0x1012c>
   21aec:	sub	r0, r1, #1024	; 0x400
   21af0:	cmp	r0, #10
   21af4:	bhi	21bac <__assert_fail@plt+0x10120>
   21af8:	mov	r2, #1
   21afc:	movw	r3, #645	; 0x285
   21b00:	tst	r3, r2, lsl r0
   21b04:	bne	21bac <__assert_fail@plt+0x10120>
   21b08:	movw	r3, #1282	; 0x502
   21b0c:	tst	r3, r2, lsl r0
   21b10:	beq	21b20 <__assert_fail@plt+0x10094>
   21b14:	mov	r0, r5
   21b18:	bl	11984 <fcntl64@plt>
   21b1c:	b	21bc4 <__assert_fail@plt+0x10138>
   21b20:	cmp	r0, #6
   21b24:	bne	21bac <__assert_fail@plt+0x10120>
   21b28:	ldr	r0, [sp, #4]
   21b2c:	movw	r7, #17320	; 0x43a8
   21b30:	movt	r7, #3
   21b34:	add	r1, r0, #4
   21b38:	str	r1, [sp, #4]
   21b3c:	ldr	r6, [r0]
   21b40:	ldr	r0, [r7]
   21b44:	cmp	r0, #0
   21b48:	bmi	21be8 <__assert_fail@plt+0x1015c>
   21b4c:	mov	r0, r5
   21b50:	movw	r1, #1030	; 0x406
   21b54:	mov	r2, r6
   21b58:	bl	11984 <fcntl64@plt>
   21b5c:	mov	r4, r0
   21b60:	cmn	r0, #1
   21b64:	bgt	21bdc <__assert_fail@plt+0x10150>
   21b68:	bl	118e8 <__errno_location@plt>
   21b6c:	ldr	r0, [r0]
   21b70:	cmp	r0, #22
   21b74:	bne	21bdc <__assert_fail@plt+0x10150>
   21b78:	mov	r0, r5
   21b7c:	mov	r1, #0
   21b80:	mov	r2, r6
   21b84:	bl	11984 <fcntl64@plt>
   21b88:	mov	r4, r0
   21b8c:	cmp	r0, #0
   21b90:	bmi	21bc8 <__assert_fail@plt+0x1013c>
   21b94:	mvn	r0, #0
   21b98:	str	r0, [r7]
   21b9c:	mov	r0, #1
   21ba0:	cmp	r0, #0
   21ba4:	bne	21c14 <__assert_fail@plt+0x10188>
   21ba8:	b	21bc8 <__assert_fail@plt+0x1013c>
   21bac:	ldr	r0, [sp, #4]
   21bb0:	add	r2, r0, #4
   21bb4:	str	r2, [sp, #4]
   21bb8:	ldr	r2, [r0]
   21bbc:	mov	r0, r5
   21bc0:	bl	11984 <fcntl64@plt>
   21bc4:	mov	r4, r0
   21bc8:	mov	r0, r4
   21bcc:	sub	sp, fp, #16
   21bd0:	pop	{r4, r5, r6, r7, fp, lr}
   21bd4:	add	sp, sp, #8
   21bd8:	bx	lr
   21bdc:	mov	r0, #1
   21be0:	str	r0, [r7]
   21be4:	b	21bc8 <__assert_fail@plt+0x1013c>
   21be8:	mov	r0, r5
   21bec:	mov	r1, #0
   21bf0:	mov	r2, r6
   21bf4:	bl	11984 <fcntl64@plt>
   21bf8:	mov	r4, r0
   21bfc:	ldr	r0, [r7]
   21c00:	add	r0, r0, #1
   21c04:	clz	r0, r0
   21c08:	lsr	r0, r0, #5
   21c0c:	cmp	r0, #0
   21c10:	beq	21bc8 <__assert_fail@plt+0x1013c>
   21c14:	cmp	r4, #0
   21c18:	bmi	21bc8 <__assert_fail@plt+0x1013c>
   21c1c:	mov	r0, r4
   21c20:	mov	r1, #1
   21c24:	bl	11984 <fcntl64@plt>
   21c28:	cmp	r0, #0
   21c2c:	bmi	21c48 <__assert_fail@plt+0x101bc>
   21c30:	orr	r2, r0, #1
   21c34:	mov	r0, r4
   21c38:	mov	r1, #2
   21c3c:	bl	11984 <fcntl64@plt>
   21c40:	cmn	r0, #1
   21c44:	bne	21bc8 <__assert_fail@plt+0x1013c>
   21c48:	bl	118e8 <__errno_location@plt>
   21c4c:	ldr	r6, [r0]
   21c50:	mov	r5, r0
   21c54:	mov	r0, r4
   21c58:	bl	11a68 <close@plt>
   21c5c:	str	r6, [r5]
   21c60:	mvn	r4, #0
   21c64:	b	21bc8 <__assert_fail@plt+0x1013c>
   21c68:	cmp	r3, #0
   21c6c:	cmpeq	r2, #0
   21c70:	bne	21c94 <__assert_fail@plt+0x10208>
   21c74:	cmp	r1, #0
   21c78:	movlt	r1, #-2147483648	; 0x80000000
   21c7c:	movlt	r0, #0
   21c80:	blt	21c90 <__assert_fail@plt+0x10204>
   21c84:	cmpeq	r0, #0
   21c88:	mvnne	r1, #-2147483648	; 0x80000000
   21c8c:	mvnne	r0, #0
   21c90:	b	21d3c <__assert_fail@plt+0x102b0>
   21c94:	sub	sp, sp, #8
   21c98:	push	{sp, lr}
   21c9c:	cmp	r1, #0
   21ca0:	blt	21cc0 <__assert_fail@plt+0x10234>
   21ca4:	cmp	r3, #0
   21ca8:	blt	21cf4 <__assert_fail@plt+0x10268>
   21cac:	bl	21d4c <__assert_fail@plt+0x102c0>
   21cb0:	ldr	lr, [sp, #4]
   21cb4:	add	sp, sp, #8
   21cb8:	pop	{r2, r3}
   21cbc:	bx	lr
   21cc0:	rsbs	r0, r0, #0
   21cc4:	sbc	r1, r1, r1, lsl #1
   21cc8:	cmp	r3, #0
   21ccc:	blt	21d18 <__assert_fail@plt+0x1028c>
   21cd0:	bl	21d4c <__assert_fail@plt+0x102c0>
   21cd4:	ldr	lr, [sp, #4]
   21cd8:	add	sp, sp, #8
   21cdc:	pop	{r2, r3}
   21ce0:	rsbs	r0, r0, #0
   21ce4:	sbc	r1, r1, r1, lsl #1
   21ce8:	rsbs	r2, r2, #0
   21cec:	sbc	r3, r3, r3, lsl #1
   21cf0:	bx	lr
   21cf4:	rsbs	r2, r2, #0
   21cf8:	sbc	r3, r3, r3, lsl #1
   21cfc:	bl	21d4c <__assert_fail@plt+0x102c0>
   21d00:	ldr	lr, [sp, #4]
   21d04:	add	sp, sp, #8
   21d08:	pop	{r2, r3}
   21d0c:	rsbs	r0, r0, #0
   21d10:	sbc	r1, r1, r1, lsl #1
   21d14:	bx	lr
   21d18:	rsbs	r2, r2, #0
   21d1c:	sbc	r3, r3, r3, lsl #1
   21d20:	bl	21d4c <__assert_fail@plt+0x102c0>
   21d24:	ldr	lr, [sp, #4]
   21d28:	add	sp, sp, #8
   21d2c:	pop	{r2, r3}
   21d30:	rsbs	r2, r2, #0
   21d34:	sbc	r3, r3, r3, lsl #1
   21d38:	bx	lr
   21d3c:	push	{r1, lr}
   21d40:	mov	r0, #8
   21d44:	bl	11684 <raise@plt>
   21d48:	pop	{r1, pc}
   21d4c:	cmp	r1, r3
   21d50:	cmpeq	r0, r2
   21d54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21d58:	mov	r4, r0
   21d5c:	movcc	r0, #0
   21d60:	mov	r5, r1
   21d64:	ldr	lr, [sp, #36]	; 0x24
   21d68:	movcc	r1, r0
   21d6c:	bcc	21e68 <__assert_fail@plt+0x103dc>
   21d70:	cmp	r3, #0
   21d74:	clzeq	ip, r2
   21d78:	clzne	ip, r3
   21d7c:	addeq	ip, ip, #32
   21d80:	cmp	r5, #0
   21d84:	clzeq	r1, r4
   21d88:	addeq	r1, r1, #32
   21d8c:	clzne	r1, r5
   21d90:	sub	ip, ip, r1
   21d94:	sub	sl, ip, #32
   21d98:	lsl	r9, r3, ip
   21d9c:	rsb	fp, ip, #32
   21da0:	orr	r9, r9, r2, lsl sl
   21da4:	orr	r9, r9, r2, lsr fp
   21da8:	lsl	r8, r2, ip
   21dac:	cmp	r5, r9
   21db0:	cmpeq	r4, r8
   21db4:	movcc	r0, #0
   21db8:	movcc	r1, r0
   21dbc:	bcc	21dd8 <__assert_fail@plt+0x1034c>
   21dc0:	mov	r0, #1
   21dc4:	subs	r4, r4, r8
   21dc8:	lsl	r1, r0, sl
   21dcc:	orr	r1, r1, r0, lsr fp
   21dd0:	lsl	r0, r0, ip
   21dd4:	sbc	r5, r5, r9
   21dd8:	cmp	ip, #0
   21ddc:	beq	21e68 <__assert_fail@plt+0x103dc>
   21de0:	lsr	r6, r8, #1
   21de4:	orr	r6, r6, r9, lsl #31
   21de8:	lsr	r7, r9, #1
   21dec:	mov	r2, ip
   21df0:	b	21e14 <__assert_fail@plt+0x10388>
   21df4:	subs	r3, r4, r6
   21df8:	sbc	r8, r5, r7
   21dfc:	adds	r3, r3, r3
   21e00:	adc	r8, r8, r8
   21e04:	adds	r4, r3, #1
   21e08:	adc	r5, r8, #0
   21e0c:	subs	r2, r2, #1
   21e10:	beq	21e30 <__assert_fail@plt+0x103a4>
   21e14:	cmp	r5, r7
   21e18:	cmpeq	r4, r6
   21e1c:	bcs	21df4 <__assert_fail@plt+0x10368>
   21e20:	adds	r4, r4, r4
   21e24:	adc	r5, r5, r5
   21e28:	subs	r2, r2, #1
   21e2c:	bne	21e14 <__assert_fail@plt+0x10388>
   21e30:	lsr	r3, r4, ip
   21e34:	orr	r3, r3, r5, lsl fp
   21e38:	lsr	r2, r5, ip
   21e3c:	orr	r3, r3, r5, lsr sl
   21e40:	adds	r0, r0, r4
   21e44:	mov	r4, r3
   21e48:	lsl	r3, r2, ip
   21e4c:	orr	r3, r3, r4, lsl sl
   21e50:	lsl	ip, r4, ip
   21e54:	orr	r3, r3, r4, lsr fp
   21e58:	adc	r1, r1, r5
   21e5c:	subs	r0, r0, ip
   21e60:	mov	r5, r2
   21e64:	sbc	r1, r1, r3
   21e68:	cmp	lr, #0
   21e6c:	strdne	r4, [lr]
   21e70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e74:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21e78:	mov	r7, r0
   21e7c:	ldr	r6, [pc, #72]	; 21ecc <__assert_fail@plt+0x10440>
   21e80:	ldr	r5, [pc, #72]	; 21ed0 <__assert_fail@plt+0x10444>
   21e84:	add	r6, pc, r6
   21e88:	add	r5, pc, r5
   21e8c:	sub	r6, r6, r5
   21e90:	mov	r8, r1
   21e94:	mov	r9, r2
   21e98:	bl	1164c <calloc@plt-0x20>
   21e9c:	asrs	r6, r6, #2
   21ea0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   21ea4:	mov	r4, #0
   21ea8:	add	r4, r4, #1
   21eac:	ldr	r3, [r5], #4
   21eb0:	mov	r2, r9
   21eb4:	mov	r1, r8
   21eb8:	mov	r0, r7
   21ebc:	blx	r3
   21ec0:	cmp	r6, r4
   21ec4:	bne	21ea8 <__assert_fail@plt+0x1041c>
   21ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21ecc:	andeq	r2, r1, r8, ror r0
   21ed0:	andeq	r2, r1, r0, ror r0
   21ed4:	bx	lr
   21ed8:	ldr	r3, [pc, #12]	; 21eec <__assert_fail@plt+0x10460>
   21edc:	mov	r1, #0
   21ee0:	add	r3, pc, r3
   21ee4:	ldr	r2, [r3]
   21ee8:	b	11900 <__cxa_atexit@plt>
   21eec:	muleq	r1, r4, r2

Disassembly of section .fini:

00021ef0 <.fini>:
   21ef0:	push	{r3, lr}
   21ef4:	pop	{r3, pc}
