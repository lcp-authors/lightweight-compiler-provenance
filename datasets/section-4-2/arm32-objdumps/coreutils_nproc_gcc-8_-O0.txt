
../repos/coreutils/src/nproc:     file format elf32-littlearm


Disassembly of section .init:

00010c2c <.init>:
   10c2c:	push	{r3, lr}
   10c30:	bl	10eec <__assert_fail@plt+0x48>
   10c34:	pop	{r3, pc}

Disassembly of section .plt:

00010c38 <calloc@plt-0x14>:
   10c38:	push	{lr}		; (str lr, [sp, #-4]!)
   10c3c:	ldr	lr, [pc, #4]	; 10c48 <calloc@plt-0x4>
   10c40:	add	lr, pc, lr
   10c44:	ldr	pc, [lr, #8]!
   10c48:			; <UNDEFINED> instruction: 0x000173b8

00010c4c <calloc@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #94208	; 0x17000
   10c54:	ldr	pc, [ip, #952]!	; 0x3b8

00010c58 <fputs_unlocked@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #94208	; 0x17000
   10c60:	ldr	pc, [ip, #944]!	; 0x3b0

00010c64 <strcmp@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #94208	; 0x17000
   10c6c:	ldr	pc, [ip, #936]!	; 0x3a8

00010c70 <printf@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #94208	; 0x17000
   10c78:	ldr	pc, [ip, #928]!	; 0x3a0

00010c7c <fflush@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #94208	; 0x17000
   10c84:	ldr	pc, [ip, #920]!	; 0x398

00010c88 <free@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #94208	; 0x17000
   10c90:	ldr	pc, [ip, #912]!	; 0x390

00010c94 <_exit@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #94208	; 0x17000
   10c9c:	ldr	pc, [ip, #904]!	; 0x388

00010ca0 <memcpy@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #94208	; 0x17000
   10ca8:	ldr	pc, [ip, #896]!	; 0x380

00010cac <mbsinit@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #94208	; 0x17000
   10cb4:	ldr	pc, [ip, #888]!	; 0x378

00010cb8 <__sched_cpucount@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #94208	; 0x17000
   10cc0:	ldr	pc, [ip, #880]!	; 0x370

00010cc4 <memcmp@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #94208	; 0x17000
   10ccc:	ldr	pc, [ip, #872]!	; 0x368

00010cd0 <fputc_unlocked@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #94208	; 0x17000
   10cd8:	ldr	pc, [ip, #864]!	; 0x360

00010cdc <sysconf@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #94208	; 0x17000
   10ce4:	ldr	pc, [ip, #856]!	; 0x358

00010ce8 <realloc@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #94208	; 0x17000
   10cf0:	ldr	pc, [ip, #848]!	; 0x350

00010cf4 <textdomain@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #94208	; 0x17000
   10cfc:	ldr	pc, [ip, #840]!	; 0x348

00010d00 <iswprint@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #94208	; 0x17000
   10d08:	ldr	pc, [ip, #832]!	; 0x340

00010d0c <fwrite@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #94208	; 0x17000
   10d14:	ldr	pc, [ip, #824]!	; 0x338

00010d18 <lseek64@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #94208	; 0x17000
   10d20:	ldr	pc, [ip, #816]!	; 0x330

00010d24 <__ctype_get_mb_cur_max@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #94208	; 0x17000
   10d2c:	ldr	pc, [ip, #808]!	; 0x328

00010d30 <__fpending@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #94208	; 0x17000
   10d38:	ldr	pc, [ip, #800]!	; 0x320

00010d3c <ferror_unlocked@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #94208	; 0x17000
   10d44:	ldr	pc, [ip, #792]!	; 0x318

00010d48 <mbrtowc@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #94208	; 0x17000
   10d50:	ldr	pc, [ip, #784]!	; 0x310

00010d54 <error@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #94208	; 0x17000
   10d5c:	ldr	pc, [ip, #776]!	; 0x308

00010d60 <getenv@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #94208	; 0x17000
   10d68:	ldr	pc, [ip, #768]!	; 0x300

00010d6c <malloc@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #94208	; 0x17000
   10d74:	ldr	pc, [ip, #760]!	; 0x2f8

00010d78 <__libc_start_main@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #94208	; 0x17000
   10d80:	ldr	pc, [ip, #752]!	; 0x2f0

00010d84 <__freading@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #94208	; 0x17000
   10d8c:	ldr	pc, [ip, #744]!	; 0x2e8

00010d90 <__gmon_start__@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #94208	; 0x17000
   10d98:	ldr	pc, [ip, #736]!	; 0x2e0

00010d9c <getopt_long@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #94208	; 0x17000
   10da4:	ldr	pc, [ip, #728]!	; 0x2d8

00010da8 <__ctype_b_loc@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #94208	; 0x17000
   10db0:	ldr	pc, [ip, #720]!	; 0x2d0

00010db4 <exit@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #94208	; 0x17000
   10dbc:	ldr	pc, [ip, #712]!	; 0x2c8

00010dc0 <gettext@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #94208	; 0x17000
   10dc8:	ldr	pc, [ip, #704]!	; 0x2c0

00010dcc <strtoul@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #94208	; 0x17000
   10dd4:	ldr	pc, [ip, #696]!	; 0x2b8

00010dd8 <strlen@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #94208	; 0x17000
   10de0:	ldr	pc, [ip, #688]!	; 0x2b0

00010de4 <strchr@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #94208	; 0x17000
   10dec:	ldr	pc, [ip, #680]!	; 0x2a8

00010df0 <fprintf@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #94208	; 0x17000
   10df8:	ldr	pc, [ip, #672]!	; 0x2a0

00010dfc <__errno_location@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #94208	; 0x17000
   10e04:	ldr	pc, [ip, #664]!	; 0x298

00010e08 <__cxa_atexit@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #94208	; 0x17000
   10e10:	ldr	pc, [ip, #656]!	; 0x290

00010e14 <memset@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #94208	; 0x17000
   10e1c:	ldr	pc, [ip, #648]!	; 0x288

00010e20 <fileno@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #94208	; 0x17000
   10e28:	ldr	pc, [ip, #640]!	; 0x280

00010e2c <strtoumax@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #94208	; 0x17000
   10e34:	ldr	pc, [ip, #632]!	; 0x278

00010e38 <fclose@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #94208	; 0x17000
   10e40:	ldr	pc, [ip, #624]!	; 0x270

00010e44 <fseeko64@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #94208	; 0x17000
   10e4c:	ldr	pc, [ip, #616]!	; 0x268

00010e50 <setlocale@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #94208	; 0x17000
   10e58:	ldr	pc, [ip, #608]!	; 0x260

00010e5c <strrchr@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #94208	; 0x17000
   10e64:	ldr	pc, [ip, #600]!	; 0x258

00010e68 <nl_langinfo@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #94208	; 0x17000
   10e70:	ldr	pc, [ip, #592]!	; 0x250

00010e74 <sched_getaffinity@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #94208	; 0x17000
   10e7c:	ldr	pc, [ip, #584]!	; 0x248

00010e80 <bindtextdomain@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #94208	; 0x17000
   10e88:	ldr	pc, [ip, #576]!	; 0x240

00010e8c <strncmp@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #94208	; 0x17000
   10e94:	ldr	pc, [ip, #568]!	; 0x238

00010e98 <abort@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #94208	; 0x17000
   10ea0:	ldr	pc, [ip, #560]!	; 0x230

00010ea4 <__assert_fail@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #94208	; 0x17000
   10eac:	ldr	pc, [ip, #552]!	; 0x228

Disassembly of section .text:

00010eb0 <.text>:
   10eb0:	mov	fp, #0
   10eb4:	mov	lr, #0
   10eb8:	pop	{r1}		; (ldr r1, [sp], #4)
   10ebc:	mov	r2, sp
   10ec0:	push	{r2}		; (str r2, [sp, #-4]!)
   10ec4:	push	{r0}		; (str r0, [sp, #-4]!)
   10ec8:	ldr	ip, [pc, #16]	; 10ee0 <__assert_fail@plt+0x3c>
   10ecc:	push	{ip}		; (str ip, [sp, #-4]!)
   10ed0:	ldr	r0, [pc, #12]	; 10ee4 <__assert_fail@plt+0x40>
   10ed4:	ldr	r3, [pc, #12]	; 10ee8 <__assert_fail@plt+0x44>
   10ed8:	bl	10d78 <__libc_start_main@plt>
   10edc:	bl	10e98 <abort@plt>
   10ee0:	andeq	r7, r1, r8, ror #2
   10ee4:	muleq	r1, ip, r2
   10ee8:	andeq	r7, r1, r8, lsl #2
   10eec:	ldr	r3, [pc, #20]	; 10f08 <__assert_fail@plt+0x64>
   10ef0:	ldr	r2, [pc, #20]	; 10f0c <__assert_fail@plt+0x68>
   10ef4:	add	r3, pc, r3
   10ef8:	ldr	r2, [r3, r2]
   10efc:	cmp	r2, #0
   10f00:	bxeq	lr
   10f04:	b	10d90 <__gmon_start__@plt>
   10f08:	andeq	r7, r1, r4, lsl #2
   10f0c:	ldrdeq	r0, [r0], -r8
   10f10:	ldr	r0, [pc, #24]	; 10f30 <__assert_fail@plt+0x8c>
   10f14:	ldr	r3, [pc, #24]	; 10f34 <__assert_fail@plt+0x90>
   10f18:	cmp	r3, r0
   10f1c:	bxeq	lr
   10f20:	ldr	r3, [pc, #16]	; 10f38 <__assert_fail@plt+0x94>
   10f24:	cmp	r3, #0
   10f28:	bxeq	lr
   10f2c:	bx	r3
   10f30:	andeq	r8, r2, ip, lsr #2
   10f34:	andeq	r8, r2, ip, lsr #2
   10f38:	andeq	r0, r0, r0
   10f3c:	ldr	r0, [pc, #36]	; 10f68 <__assert_fail@plt+0xc4>
   10f40:	ldr	r1, [pc, #36]	; 10f6c <__assert_fail@plt+0xc8>
   10f44:	sub	r1, r1, r0
   10f48:	asr	r1, r1, #2
   10f4c:	add	r1, r1, r1, lsr #31
   10f50:	asrs	r1, r1, #1
   10f54:	bxeq	lr
   10f58:	ldr	r3, [pc, #16]	; 10f70 <__assert_fail@plt+0xcc>
   10f5c:	cmp	r3, #0
   10f60:	bxeq	lr
   10f64:	bx	r3
   10f68:	andeq	r8, r2, ip, lsr #2
   10f6c:	andeq	r8, r2, ip, lsr #2
   10f70:	andeq	r0, r0, r0
   10f74:	push	{r4, lr}
   10f78:	ldr	r4, [pc, #24]	; 10f98 <__assert_fail@plt+0xf4>
   10f7c:	ldrb	r3, [r4]
   10f80:	cmp	r3, #0
   10f84:	popne	{r4, pc}
   10f88:	bl	10f10 <__assert_fail@plt+0x6c>
   10f8c:	mov	r3, #1
   10f90:	strb	r3, [r4]
   10f94:	pop	{r4, pc}
   10f98:	andeq	r8, r2, ip, asr #2
   10f9c:	b	10f3c <__assert_fail@plt+0x98>
   10fa0:	str	fp, [sp, #-8]!
   10fa4:	str	lr, [sp, #4]
   10fa8:	add	fp, sp, #4
   10fac:	sub	sp, sp, #80	; 0x50
   10fb0:	str	r0, [fp, #-80]	; 0xffffffb0
   10fb4:	movw	r2, #29444	; 0x7304
   10fb8:	movt	r2, #1
   10fbc:	sub	r3, fp, #72	; 0x48
   10fc0:	ldrd	r0, [r2]
   10fc4:	strd	r0, [r3]
   10fc8:	ldrd	r0, [r2, #8]
   10fcc:	strd	r0, [r3, #8]
   10fd0:	ldrd	r0, [r2, #16]
   10fd4:	strd	r0, [r3, #16]
   10fd8:	ldrd	r0, [r2, #24]
   10fdc:	strd	r0, [r3, #24]
   10fe0:	ldrd	r0, [r2, #32]
   10fe4:	strd	r0, [r3, #32]
   10fe8:	ldrd	r0, [r2, #40]	; 0x28
   10fec:	strd	r0, [r3, #40]	; 0x28
   10ff0:	ldrd	r0, [r2, #48]	; 0x30
   10ff4:	strd	r0, [r3, #48]	; 0x30
   10ff8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   10ffc:	str	r3, [fp, #-8]
   11000:	sub	r3, fp, #72	; 0x48
   11004:	str	r3, [fp, #-12]
   11008:	b	11018 <__assert_fail@plt+0x174>
   1100c:	ldr	r3, [fp, #-12]
   11010:	add	r3, r3, #8
   11014:	str	r3, [fp, #-12]
   11018:	ldr	r3, [fp, #-12]
   1101c:	ldr	r3, [r3]
   11020:	cmp	r3, #0
   11024:	beq	11048 <__assert_fail@plt+0x1a4>
   11028:	ldr	r3, [fp, #-12]
   1102c:	ldr	r3, [r3]
   11030:	mov	r1, r3
   11034:	ldr	r0, [fp, #-80]	; 0xffffffb0
   11038:	bl	10c64 <strcmp@plt>
   1103c:	mov	r3, r0
   11040:	cmp	r3, #0
   11044:	bne	1100c <__assert_fail@plt+0x168>
   11048:	ldr	r3, [fp, #-12]
   1104c:	ldr	r3, [r3, #4]
   11050:	cmp	r3, #0
   11054:	beq	11064 <__assert_fail@plt+0x1c0>
   11058:	ldr	r3, [fp, #-12]
   1105c:	ldr	r3, [r3, #4]
   11060:	str	r3, [fp, #-8]
   11064:	movw	r0, #29072	; 0x7190
   11068:	movt	r0, #1
   1106c:	bl	10dc0 <gettext@plt>
   11070:	mov	r3, r0
   11074:	movw	r2, #29096	; 0x71a8
   11078:	movt	r2, #1
   1107c:	movw	r1, #29136	; 0x71d0
   11080:	movt	r1, #1
   11084:	mov	r0, r3
   11088:	bl	10c70 <printf@plt>
   1108c:	mov	r1, #0
   11090:	mov	r0, #5
   11094:	bl	10e50 <setlocale@plt>
   11098:	str	r0, [fp, #-16]
   1109c:	ldr	r3, [fp, #-16]
   110a0:	cmp	r3, #0
   110a4:	beq	110f0 <__assert_fail@plt+0x24c>
   110a8:	mov	r2, #3
   110ac:	movw	r1, #29152	; 0x71e0
   110b0:	movt	r1, #1
   110b4:	ldr	r0, [fp, #-16]
   110b8:	bl	10e8c <strncmp@plt>
   110bc:	mov	r3, r0
   110c0:	cmp	r3, #0
   110c4:	beq	110f0 <__assert_fail@plt+0x24c>
   110c8:	movw	r0, #29156	; 0x71e4
   110cc:	movt	r0, #1
   110d0:	bl	10dc0 <gettext@plt>
   110d4:	mov	r2, r0
   110d8:	movw	r3, #33092	; 0x8144
   110dc:	movt	r3, #2
   110e0:	ldr	r3, [r3]
   110e4:	mov	r1, r3
   110e8:	mov	r0, r2
   110ec:	bl	10c58 <fputs_unlocked@plt>
   110f0:	movw	r0, #29228	; 0x722c
   110f4:	movt	r0, #1
   110f8:	bl	10dc0 <gettext@plt>
   110fc:	mov	r3, r0
   11100:	ldr	r2, [fp, #-80]	; 0xffffffb0
   11104:	movw	r1, #29096	; 0x71a8
   11108:	movt	r1, #1
   1110c:	mov	r0, r3
   11110:	bl	10c70 <printf@plt>
   11114:	movw	r0, #29256	; 0x7248
   11118:	movt	r0, #1
   1111c:	bl	10dc0 <gettext@plt>
   11120:	ldr	r2, [fp, #-8]
   11124:	ldr	r3, [fp, #-80]	; 0xffffffb0
   11128:	cmp	r2, r3
   1112c:	bne	1113c <__assert_fail@plt+0x298>
   11130:	movw	r3, #29308	; 0x727c
   11134:	movt	r3, #1
   11138:	b	11144 <__assert_fail@plt+0x2a0>
   1113c:	movw	r3, #29320	; 0x7288
   11140:	movt	r3, #1
   11144:	mov	r2, r3
   11148:	ldr	r1, [fp, #-8]
   1114c:	bl	10c70 <printf@plt>
   11150:	nop	{0}
   11154:	sub	sp, fp, #4
   11158:	ldr	fp, [sp]
   1115c:	add	sp, sp, #4
   11160:	pop	{pc}		; (ldr pc, [sp], #4)
   11164:	str	r4, [sp, #-12]!
   11168:	str	fp, [sp, #4]
   1116c:	str	lr, [sp, #8]
   11170:	add	fp, sp, #8
   11174:	sub	sp, sp, #12
   11178:	str	r0, [fp, #-16]
   1117c:	ldr	r3, [fp, #-16]
   11180:	cmp	r3, #0
   11184:	beq	111c0 <__assert_fail@plt+0x31c>
   11188:	movw	r3, #33088	; 0x8140
   1118c:	movt	r3, #2
   11190:	ldr	r4, [r3]
   11194:	movw	r0, #29608	; 0x73a8
   11198:	movt	r0, #1
   1119c:	bl	10dc0 <gettext@plt>
   111a0:	mov	r1, r0
   111a4:	movw	r3, #33112	; 0x8158
   111a8:	movt	r3, #2
   111ac:	ldr	r3, [r3]
   111b0:	mov	r2, r3
   111b4:	mov	r0, r4
   111b8:	bl	10df0 <fprintf@plt>
   111bc:	b	11294 <__assert_fail@plt+0x3f0>
   111c0:	movw	r0, #29648	; 0x73d0
   111c4:	movt	r0, #1
   111c8:	bl	10dc0 <gettext@plt>
   111cc:	mov	r2, r0
   111d0:	movw	r3, #33112	; 0x8158
   111d4:	movt	r3, #2
   111d8:	ldr	r3, [r3]
   111dc:	mov	r1, r3
   111e0:	mov	r0, r2
   111e4:	bl	10c70 <printf@plt>
   111e8:	movw	r0, #29672	; 0x73e8
   111ec:	movt	r0, #1
   111f0:	bl	10dc0 <gettext@plt>
   111f4:	mov	r2, r0
   111f8:	movw	r3, #33092	; 0x8144
   111fc:	movt	r3, #2
   11200:	ldr	r3, [r3]
   11204:	mov	r1, r3
   11208:	mov	r0, r2
   1120c:	bl	10c58 <fputs_unlocked@plt>
   11210:	movw	r0, #29800	; 0x7468
   11214:	movt	r0, #1
   11218:	bl	10dc0 <gettext@plt>
   1121c:	mov	r2, r0
   11220:	movw	r3, #33092	; 0x8144
   11224:	movt	r3, #2
   11228:	ldr	r3, [r3]
   1122c:	mov	r1, r3
   11230:	mov	r0, r2
   11234:	bl	10c58 <fputs_unlocked@plt>
   11238:	movw	r0, #29920	; 0x74e0
   1123c:	movt	r0, #1
   11240:	bl	10dc0 <gettext@plt>
   11244:	mov	r2, r0
   11248:	movw	r3, #33092	; 0x8144
   1124c:	movt	r3, #2
   11250:	ldr	r3, [r3]
   11254:	mov	r1, r3
   11258:	mov	r0, r2
   1125c:	bl	10c58 <fputs_unlocked@plt>
   11260:	movw	r0, #29968	; 0x7510
   11264:	movt	r0, #1
   11268:	bl	10dc0 <gettext@plt>
   1126c:	mov	r2, r0
   11270:	movw	r3, #33092	; 0x8144
   11274:	movt	r3, #2
   11278:	ldr	r3, [r3]
   1127c:	mov	r1, r3
   11280:	mov	r0, r2
   11284:	bl	10c58 <fputs_unlocked@plt>
   11288:	movw	r0, #30024	; 0x7548
   1128c:	movt	r0, #1
   11290:	bl	10fa0 <__assert_fail@plt+0xfc>
   11294:	ldr	r0, [fp, #-16]
   11298:	bl	10db4 <exit@plt>
   1129c:	str	r4, [sp, #-12]!
   112a0:	str	fp, [sp, #4]
   112a4:	str	lr, [sp, #8]
   112a8:	add	fp, sp, #8
   112ac:	sub	sp, sp, #52	; 0x34
   112b0:	str	r0, [fp, #-32]	; 0xffffffe0
   112b4:	str	r1, [fp, #-36]	; 0xffffffdc
   112b8:	mov	r3, #0
   112bc:	str	r3, [fp, #-20]	; 0xffffffec
   112c0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   112c4:	ldr	r3, [r3]
   112c8:	mov	r0, r3
   112cc:	bl	11a2c <__assert_fail@plt+0xb88>
   112d0:	movw	r1, #29320	; 0x7288
   112d4:	movt	r1, #1
   112d8:	mov	r0, #6
   112dc:	bl	10e50 <setlocale@plt>
   112e0:	movw	r1, #30032	; 0x7550
   112e4:	movt	r1, #1
   112e8:	movw	r0, #29344	; 0x72a0
   112ec:	movt	r0, #1
   112f0:	bl	10e80 <bindtextdomain@plt>
   112f4:	movw	r0, #29344	; 0x72a0
   112f8:	movt	r0, #1
   112fc:	bl	10cf4 <textdomain@plt>
   11300:	movw	r0, #5524	; 0x1594
   11304:	movt	r0, #1
   11308:	bl	1716c <__assert_fail@plt+0x62c8>
   1130c:	mov	r3, #2
   11310:	str	r3, [fp, #-24]	; 0xffffffe8
   11314:	mov	r3, #0
   11318:	str	r3, [sp]
   1131c:	movw	r3, #29528	; 0x7358
   11320:	movt	r3, #1
   11324:	movw	r2, #29320	; 0x7288
   11328:	movt	r2, #1
   1132c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   11330:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11334:	bl	10d9c <getopt_long@plt>
   11338:	str	r0, [fp, #-28]	; 0xffffffe4
   1133c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11340:	cmn	r3, #1
   11344:	beq	11460 <__assert_fail@plt+0x5bc>
   11348:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1134c:	cmn	r3, #2
   11350:	beq	11390 <__assert_fail@plt+0x4ec>
   11354:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11358:	cmn	r3, #2
   1135c:	bgt	11370 <__assert_fail@plt+0x4cc>
   11360:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11364:	cmn	r3, #3
   11368:	beq	11398 <__assert_fail@plt+0x4f4>
   1136c:	b	11454 <__assert_fail@plt+0x5b0>
   11370:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11374:	cmp	r3, #256	; 0x100
   11378:	beq	113e4 <__assert_fail@plt+0x540>
   1137c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   11380:	movw	r2, #257	; 0x101
   11384:	cmp	r3, r2
   11388:	beq	113f0 <__assert_fail@plt+0x54c>
   1138c:	b	11454 <__assert_fail@plt+0x5b0>
   11390:	mov	r0, #0
   11394:	bl	11164 <__assert_fail@plt+0x2c0>
   11398:	movw	r3, #33092	; 0x8144
   1139c:	movt	r3, #2
   113a0:	ldr	r0, [r3]
   113a4:	movw	r3, #32996	; 0x80e4
   113a8:	movt	r3, #2
   113ac:	ldr	r2, [r3]
   113b0:	mov	r3, #0
   113b4:	str	r3, [sp, #4]
   113b8:	movw	r3, #30056	; 0x7568
   113bc:	movt	r3, #1
   113c0:	str	r3, [sp]
   113c4:	mov	r3, r2
   113c8:	movw	r2, #29136	; 0x71d0
   113cc:	movt	r2, #1
   113d0:	movw	r1, #30024	; 0x7548
   113d4:	movt	r1, #1
   113d8:	bl	14a94 <__assert_fail@plt+0x3bf0>
   113dc:	mov	r0, #0
   113e0:	bl	10db4 <exit@plt>
   113e4:	mov	r3, #0
   113e8:	str	r3, [fp, #-24]	; 0xffffffe8
   113ec:	b	1145c <__assert_fail@plt+0x5b8>
   113f0:	movw	r3, #33096	; 0x8148
   113f4:	movt	r3, #2
   113f8:	ldr	r4, [r3]
   113fc:	movw	r0, #30076	; 0x757c
   11400:	movt	r0, #1
   11404:	bl	10dc0 <gettext@plt>
   11408:	mov	r2, r0
   1140c:	mov	r3, #0
   11410:	str	r3, [sp, #16]
   11414:	str	r2, [sp, #12]
   11418:	movw	r3, #29320	; 0x7288
   1141c:	movt	r3, #1
   11420:	str	r3, [sp, #8]
   11424:	mvn	r2, #0
   11428:	mov	r3, #0
   1142c:	strd	r2, [sp]
   11430:	mov	r2, #0
   11434:	mov	r3, #0
   11438:	mov	r0, r4
   1143c:	bl	1565c <__assert_fail@plt+0x47b8>
   11440:	mov	r2, r0
   11444:	mov	r3, r1
   11448:	mov	r3, r2
   1144c:	str	r3, [fp, #-20]	; 0xffffffec
   11450:	b	1145c <__assert_fail@plt+0x5b8>
   11454:	mov	r0, #1
   11458:	bl	11164 <__assert_fail@plt+0x2c0>
   1145c:	b	11314 <__assert_fail@plt+0x470>
   11460:	nop	{0}
   11464:	movw	r3, #33080	; 0x8138
   11468:	movt	r3, #2
   1146c:	ldr	r3, [r3]
   11470:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11474:	cmp	r2, r3
   11478:	beq	114cc <__assert_fail@plt+0x628>
   1147c:	movw	r0, #30092	; 0x758c
   11480:	movt	r0, #1
   11484:	bl	10dc0 <gettext@plt>
   11488:	mov	r4, r0
   1148c:	movw	r3, #33080	; 0x8138
   11490:	movt	r3, #2
   11494:	ldr	r3, [r3]
   11498:	lsl	r3, r3, #2
   1149c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   114a0:	add	r3, r2, r3
   114a4:	ldr	r3, [r3]
   114a8:	mov	r0, r3
   114ac:	bl	1438c <__assert_fail@plt+0x34e8>
   114b0:	mov	r3, r0
   114b4:	mov	r2, r4
   114b8:	mov	r1, #0
   114bc:	mov	r0, #0
   114c0:	bl	10d54 <error@plt>
   114c4:	mov	r0, #1
   114c8:	bl	11164 <__assert_fail@plt+0x2c0>
   114cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   114d0:	bl	11958 <__assert_fail@plt+0xab4>
   114d4:	str	r0, [fp, #-16]
   114d8:	ldr	r2, [fp, #-20]	; 0xffffffec
   114dc:	ldr	r3, [fp, #-16]
   114e0:	cmp	r2, r3
   114e4:	bcs	114fc <__assert_fail@plt+0x658>
   114e8:	ldr	r2, [fp, #-16]
   114ec:	ldr	r3, [fp, #-20]	; 0xffffffec
   114f0:	sub	r3, r2, r3
   114f4:	str	r3, [fp, #-16]
   114f8:	b	11504 <__assert_fail@plt+0x660>
   114fc:	mov	r3, #1
   11500:	str	r3, [fp, #-16]
   11504:	ldr	r1, [fp, #-16]
   11508:	movw	r0, #30112	; 0x75a0
   1150c:	movt	r0, #1
   11510:	bl	10c70 <printf@plt>
   11514:	mov	r3, #0
   11518:	mov	r0, r3
   1151c:	sub	sp, fp, #8
   11520:	ldr	r4, [sp]
   11524:	ldr	fp, [sp, #4]
   11528:	add	sp, sp, #8
   1152c:	pop	{pc}		; (ldr pc, [sp], #4)
   11530:	push	{fp}		; (str fp, [sp, #-4]!)
   11534:	add	fp, sp, #0
   11538:	sub	sp, sp, #12
   1153c:	str	r0, [fp, #-8]
   11540:	movw	r3, #33104	; 0x8150
   11544:	movt	r3, #2
   11548:	ldr	r2, [fp, #-8]
   1154c:	str	r2, [r3]
   11550:	nop	{0}
   11554:	add	sp, fp, #0
   11558:	pop	{fp}		; (ldr fp, [sp], #4)
   1155c:	bx	lr
   11560:	push	{fp}		; (str fp, [sp, #-4]!)
   11564:	add	fp, sp, #0
   11568:	sub	sp, sp, #12
   1156c:	mov	r3, r0
   11570:	strb	r3, [fp, #-5]
   11574:	movw	r3, #33108	; 0x8154
   11578:	movt	r3, #2
   1157c:	ldrb	r2, [fp, #-5]
   11580:	strb	r2, [r3]
   11584:	nop	{0}
   11588:	add	sp, fp, #0
   1158c:	pop	{fp}		; (ldr fp, [sp], #4)
   11590:	bx	lr
   11594:	str	r4, [sp, #-12]!
   11598:	str	fp, [sp, #4]
   1159c:	str	lr, [sp, #8]
   115a0:	add	fp, sp, #8
   115a4:	sub	sp, sp, #20
   115a8:	movw	r3, #33092	; 0x8144
   115ac:	movt	r3, #2
   115b0:	ldr	r3, [r3]
   115b4:	mov	r0, r3
   115b8:	bl	16750 <__assert_fail@plt+0x58ac>
   115bc:	mov	r3, r0
   115c0:	cmp	r3, #0
   115c4:	beq	11698 <__assert_fail@plt+0x7f4>
   115c8:	movw	r3, #33108	; 0x8154
   115cc:	movt	r3, #2
   115d0:	ldrb	r3, [r3]
   115d4:	eor	r3, r3, #1
   115d8:	uxtb	r3, r3
   115dc:	cmp	r3, #0
   115e0:	bne	115f8 <__assert_fail@plt+0x754>
   115e4:	bl	10dfc <__errno_location@plt>
   115e8:	mov	r3, r0
   115ec:	ldr	r3, [r3]
   115f0:	cmp	r3, #32
   115f4:	beq	11698 <__assert_fail@plt+0x7f4>
   115f8:	movw	r0, #30136	; 0x75b8
   115fc:	movt	r0, #1
   11600:	bl	10dc0 <gettext@plt>
   11604:	str	r0, [fp, #-16]
   11608:	movw	r3, #33104	; 0x8150
   1160c:	movt	r3, #2
   11610:	ldr	r3, [r3]
   11614:	cmp	r3, #0
   11618:	beq	11664 <__assert_fail@plt+0x7c0>
   1161c:	bl	10dfc <__errno_location@plt>
   11620:	mov	r3, r0
   11624:	ldr	r4, [r3]
   11628:	movw	r3, #33104	; 0x8150
   1162c:	movt	r3, #2
   11630:	ldr	r3, [r3]
   11634:	mov	r0, r3
   11638:	bl	14018 <__assert_fail@plt+0x3174>
   1163c:	mov	r2, r0
   11640:	ldr	r3, [fp, #-16]
   11644:	str	r3, [sp]
   11648:	mov	r3, r2
   1164c:	movw	r2, #30148	; 0x75c4
   11650:	movt	r2, #1
   11654:	mov	r1, r4
   11658:	mov	r0, #0
   1165c:	bl	10d54 <error@plt>
   11660:	b	11684 <__assert_fail@plt+0x7e0>
   11664:	bl	10dfc <__errno_location@plt>
   11668:	mov	r3, r0
   1166c:	ldr	r1, [r3]
   11670:	ldr	r3, [fp, #-16]
   11674:	movw	r2, #30156	; 0x75cc
   11678:	movt	r2, #1
   1167c:	mov	r0, #0
   11680:	bl	10d54 <error@plt>
   11684:	movw	r3, #33000	; 0x80e8
   11688:	movt	r3, #2
   1168c:	ldr	r3, [r3]
   11690:	mov	r0, r3
   11694:	bl	10c94 <_exit@plt>
   11698:	movw	r3, #33088	; 0x8140
   1169c:	movt	r3, #2
   116a0:	ldr	r3, [r3]
   116a4:	mov	r0, r3
   116a8:	bl	16750 <__assert_fail@plt+0x58ac>
   116ac:	mov	r3, r0
   116b0:	cmp	r3, #0
   116b4:	beq	116cc <__assert_fail@plt+0x828>
   116b8:	movw	r3, #33000	; 0x80e8
   116bc:	movt	r3, #2
   116c0:	ldr	r3, [r3]
   116c4:	mov	r0, r3
   116c8:	bl	10c94 <_exit@plt>
   116cc:	nop	{0}
   116d0:	sub	sp, fp, #8
   116d4:	ldr	r4, [sp]
   116d8:	ldr	fp, [sp, #4]
   116dc:	add	sp, sp, #8
   116e0:	pop	{pc}		; (ldr pc, [sp], #4)
   116e4:	str	fp, [sp, #-8]!
   116e8:	str	lr, [sp, #4]
   116ec:	add	fp, sp, #4
   116f0:	sub	sp, sp, #136	; 0x88
   116f4:	sub	r3, fp, #136	; 0x88
   116f8:	mov	r2, r3
   116fc:	mov	r1, #128	; 0x80
   11700:	mov	r0, #0
   11704:	bl	10e74 <sched_getaffinity@plt>
   11708:	mov	r3, r0
   1170c:	cmp	r3, #0
   11710:	bne	11740 <__assert_fail@plt+0x89c>
   11714:	sub	r3, fp, #136	; 0x88
   11718:	mov	r1, r3
   1171c:	mov	r0, #128	; 0x80
   11720:	bl	10cb8 <__sched_cpucount@plt>
   11724:	mov	r3, r0
   11728:	str	r3, [fp, #-8]
   1172c:	ldr	r3, [fp, #-8]
   11730:	cmp	r3, #0
   11734:	beq	11740 <__assert_fail@plt+0x89c>
   11738:	ldr	r3, [fp, #-8]
   1173c:	b	11744 <__assert_fail@plt+0x8a0>
   11740:	mov	r3, #0
   11744:	mov	r0, r3
   11748:	sub	sp, fp, #4
   1174c:	ldr	fp, [sp]
   11750:	add	sp, sp, #4
   11754:	pop	{pc}		; (ldr pc, [sp], #4)
   11758:	str	fp, [sp, #-8]!
   1175c:	str	lr, [sp, #4]
   11760:	add	fp, sp, #4
   11764:	sub	sp, sp, #24
   11768:	str	r0, [fp, #-24]	; 0xffffffe8
   1176c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11770:	cmp	r3, #1
   11774:	bne	117b4 <__assert_fail@plt+0x910>
   11778:	bl	116e4 <__assert_fail@plt+0x840>
   1177c:	str	r0, [fp, #-12]
   11780:	ldr	r3, [fp, #-12]
   11784:	cmp	r3, #0
   11788:	beq	11794 <__assert_fail@plt+0x8f0>
   1178c:	ldr	r3, [fp, #-12]
   11790:	b	11810 <__assert_fail@plt+0x96c>
   11794:	mov	r0, #84	; 0x54
   11798:	bl	10cdc <sysconf@plt>
   1179c:	str	r0, [fp, #-16]
   117a0:	ldr	r3, [fp, #-16]
   117a4:	cmp	r3, #0
   117a8:	ble	1180c <__assert_fail@plt+0x968>
   117ac:	ldr	r3, [fp, #-16]
   117b0:	b	11810 <__assert_fail@plt+0x96c>
   117b4:	mov	r0, #83	; 0x53
   117b8:	bl	10cdc <sysconf@plt>
   117bc:	str	r0, [fp, #-8]
   117c0:	ldr	r3, [fp, #-8]
   117c4:	cmp	r3, #1
   117c8:	beq	117d8 <__assert_fail@plt+0x934>
   117cc:	ldr	r3, [fp, #-8]
   117d0:	cmp	r3, #2
   117d4:	bne	117f8 <__assert_fail@plt+0x954>
   117d8:	bl	116e4 <__assert_fail@plt+0x840>
   117dc:	str	r0, [fp, #-20]	; 0xffffffec
   117e0:	ldr	r3, [fp, #-8]
   117e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   117e8:	cmp	r2, r3
   117ec:	bls	117f8 <__assert_fail@plt+0x954>
   117f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   117f4:	str	r3, [fp, #-8]
   117f8:	ldr	r3, [fp, #-8]
   117fc:	cmp	r3, #0
   11800:	ble	1180c <__assert_fail@plt+0x968>
   11804:	ldr	r3, [fp, #-8]
   11808:	b	11810 <__assert_fail@plt+0x96c>
   1180c:	mov	r3, #1
   11810:	mov	r0, r3
   11814:	sub	sp, fp, #4
   11818:	ldr	fp, [sp]
   1181c:	add	sp, sp, #4
   11820:	pop	{pc}		; (ldr pc, [sp], #4)
   11824:	str	fp, [sp, #-8]!
   11828:	str	lr, [sp, #4]
   1182c:	add	fp, sp, #4
   11830:	sub	sp, sp, #24
   11834:	str	r0, [fp, #-24]	; 0xffffffe8
   11838:	mov	r3, #0
   1183c:	str	r3, [fp, #-8]
   11840:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11844:	cmp	r3, #0
   11848:	bne	11860 <__assert_fail@plt+0x9bc>
   1184c:	ldr	r3, [fp, #-8]
   11850:	b	11944 <__assert_fail@plt+0xaa0>
   11854:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11858:	add	r3, r3, #1
   1185c:	str	r3, [fp, #-24]	; 0xffffffe8
   11860:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11864:	ldrb	r3, [r3]
   11868:	cmp	r3, #0
   1186c:	beq	1188c <__assert_fail@plt+0x9e8>
   11870:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11874:	ldrb	r3, [r3]
   11878:	mov	r0, r3
   1187c:	bl	1647c <__assert_fail@plt+0x55d8>
   11880:	mov	r3, r0
   11884:	cmp	r3, #0
   11888:	bne	11854 <__assert_fail@plt+0x9b0>
   1188c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11890:	ldrb	r3, [r3]
   11894:	mov	r0, r3
   11898:	bl	1630c <__assert_fail@plt+0x5468>
   1189c:	mov	r3, r0
   118a0:	cmp	r3, #0
   118a4:	beq	11940 <__assert_fail@plt+0xa9c>
   118a8:	mov	r3, #0
   118ac:	str	r3, [fp, #-16]
   118b0:	sub	r3, fp, #16
   118b4:	mov	r2, #10
   118b8:	mov	r1, r3
   118bc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   118c0:	bl	10dcc <strtoul@plt>
   118c4:	str	r0, [fp, #-12]
   118c8:	ldr	r3, [fp, #-16]
   118cc:	cmp	r3, #0
   118d0:	beq	11940 <__assert_fail@plt+0xa9c>
   118d4:	b	118e4 <__assert_fail@plt+0xa40>
   118d8:	ldr	r3, [fp, #-16]
   118dc:	add	r3, r3, #1
   118e0:	str	r3, [fp, #-16]
   118e4:	ldr	r3, [fp, #-16]
   118e8:	ldrb	r3, [r3]
   118ec:	cmp	r3, #0
   118f0:	beq	11910 <__assert_fail@plt+0xa6c>
   118f4:	ldr	r3, [fp, #-16]
   118f8:	ldrb	r3, [r3]
   118fc:	mov	r0, r3
   11900:	bl	1647c <__assert_fail@plt+0x55d8>
   11904:	mov	r3, r0
   11908:	cmp	r3, #0
   1190c:	bne	118d8 <__assert_fail@plt+0xa34>
   11910:	ldr	r3, [fp, #-16]
   11914:	ldrb	r3, [r3]
   11918:	cmp	r3, #0
   1191c:	bne	11928 <__assert_fail@plt+0xa84>
   11920:	ldr	r3, [fp, #-12]
   11924:	b	11944 <__assert_fail@plt+0xaa0>
   11928:	ldr	r3, [fp, #-16]
   1192c:	ldrb	r3, [r3]
   11930:	cmp	r3, #44	; 0x2c
   11934:	bne	11940 <__assert_fail@plt+0xa9c>
   11938:	ldr	r3, [fp, #-12]
   1193c:	b	11944 <__assert_fail@plt+0xaa0>
   11940:	ldr	r3, [fp, #-8]
   11944:	mov	r0, r3
   11948:	sub	sp, fp, #4
   1194c:	ldr	fp, [sp]
   11950:	add	sp, sp, #4
   11954:	pop	{pc}		; (ldr pc, [sp], #4)
   11958:	str	fp, [sp, #-8]!
   1195c:	str	lr, [sp, #4]
   11960:	add	fp, sp, #4
   11964:	sub	sp, sp, #24
   11968:	str	r0, [fp, #-24]	; 0xffffffe8
   1196c:	mvn	r3, #0
   11970:	str	r3, [fp, #-8]
   11974:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11978:	cmp	r3, #2
   1197c:	bne	119f8 <__assert_fail@plt+0xb54>
   11980:	movw	r0, #30160	; 0x75d0
   11984:	movt	r0, #1
   11988:	bl	10d60 <getenv@plt>
   1198c:	mov	r3, r0
   11990:	mov	r0, r3
   11994:	bl	11824 <__assert_fail@plt+0x980>
   11998:	str	r0, [fp, #-12]
   1199c:	movw	r0, #30176	; 0x75e0
   119a0:	movt	r0, #1
   119a4:	bl	10d60 <getenv@plt>
   119a8:	mov	r3, r0
   119ac:	mov	r0, r3
   119b0:	bl	11824 <__assert_fail@plt+0x980>
   119b4:	str	r0, [fp, #-8]
   119b8:	ldr	r3, [fp, #-8]
   119bc:	cmp	r3, #0
   119c0:	bne	119cc <__assert_fail@plt+0xb28>
   119c4:	mvn	r3, #0
   119c8:	str	r3, [fp, #-8]
   119cc:	ldr	r3, [fp, #-12]
   119d0:	cmp	r3, #0
   119d4:	beq	119f0 <__assert_fail@plt+0xb4c>
   119d8:	ldr	r2, [fp, #-8]
   119dc:	ldr	r3, [fp, #-12]
   119e0:	cmp	r2, r3
   119e4:	movcc	r3, r2
   119e8:	movcs	r3, r3
   119ec:	b	11a18 <__assert_fail@plt+0xb74>
   119f0:	mov	r3, #1
   119f4:	str	r3, [fp, #-24]	; 0xffffffe8
   119f8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   119fc:	bl	11758 <__assert_fail@plt+0x8b4>
   11a00:	str	r0, [fp, #-16]
   11a04:	ldr	r2, [fp, #-8]
   11a08:	ldr	r3, [fp, #-16]
   11a0c:	cmp	r2, r3
   11a10:	movcc	r3, r2
   11a14:	movcs	r3, r3
   11a18:	mov	r0, r3
   11a1c:	sub	sp, fp, #4
   11a20:	ldr	fp, [sp]
   11a24:	add	sp, sp, #4
   11a28:	pop	{pc}		; (ldr pc, [sp], #4)
   11a2c:	str	fp, [sp, #-8]!
   11a30:	str	lr, [sp, #4]
   11a34:	add	fp, sp, #4
   11a38:	sub	sp, sp, #16
   11a3c:	str	r0, [fp, #-16]
   11a40:	ldr	r3, [fp, #-16]
   11a44:	cmp	r3, #0
   11a48:	bne	11a70 <__assert_fail@plt+0xbcc>
   11a4c:	movw	r3, #33088	; 0x8140
   11a50:	movt	r3, #2
   11a54:	ldr	r3, [r3]
   11a58:	mov	r2, #55	; 0x37
   11a5c:	mov	r1, #1
   11a60:	movw	r0, #30196	; 0x75f4
   11a64:	movt	r0, #1
   11a68:	bl	10d0c <fwrite@plt>
   11a6c:	bl	10e98 <abort@plt>
   11a70:	mov	r1, #47	; 0x2f
   11a74:	ldr	r0, [fp, #-16]
   11a78:	bl	10e5c <strrchr@plt>
   11a7c:	str	r0, [fp, #-8]
   11a80:	ldr	r3, [fp, #-8]
   11a84:	cmp	r3, #0
   11a88:	beq	11a98 <__assert_fail@plt+0xbf4>
   11a8c:	ldr	r3, [fp, #-8]
   11a90:	add	r3, r3, #1
   11a94:	b	11a9c <__assert_fail@plt+0xbf8>
   11a98:	ldr	r3, [fp, #-16]
   11a9c:	str	r3, [fp, #-12]
   11aa0:	ldr	r2, [fp, #-12]
   11aa4:	ldr	r3, [fp, #-16]
   11aa8:	sub	r3, r2, r3
   11aac:	cmp	r3, #6
   11ab0:	ble	11b20 <__assert_fail@plt+0xc7c>
   11ab4:	ldr	r3, [fp, #-12]
   11ab8:	sub	r3, r3, #7
   11abc:	mov	r2, #7
   11ac0:	movw	r1, #30252	; 0x762c
   11ac4:	movt	r1, #1
   11ac8:	mov	r0, r3
   11acc:	bl	10e8c <strncmp@plt>
   11ad0:	mov	r3, r0
   11ad4:	cmp	r3, #0
   11ad8:	bne	11b20 <__assert_fail@plt+0xc7c>
   11adc:	ldr	r3, [fp, #-12]
   11ae0:	str	r3, [fp, #-16]
   11ae4:	mov	r2, #3
   11ae8:	movw	r1, #30260	; 0x7634
   11aec:	movt	r1, #1
   11af0:	ldr	r0, [fp, #-12]
   11af4:	bl	10e8c <strncmp@plt>
   11af8:	mov	r3, r0
   11afc:	cmp	r3, #0
   11b00:	bne	11b20 <__assert_fail@plt+0xc7c>
   11b04:	ldr	r3, [fp, #-12]
   11b08:	add	r3, r3, #3
   11b0c:	str	r3, [fp, #-16]
   11b10:	movw	r3, #33072	; 0x8130
   11b14:	movt	r3, #2
   11b18:	ldr	r2, [fp, #-16]
   11b1c:	str	r2, [r3]
   11b20:	movw	r3, #33112	; 0x8158
   11b24:	movt	r3, #2
   11b28:	ldr	r2, [fp, #-16]
   11b2c:	str	r2, [r3]
   11b30:	movw	r3, #33076	; 0x8134
   11b34:	movt	r3, #2
   11b38:	ldr	r2, [fp, #-16]
   11b3c:	str	r2, [r3]
   11b40:	nop	{0}
   11b44:	sub	sp, fp, #4
   11b48:	ldr	fp, [sp]
   11b4c:	add	sp, sp, #4
   11b50:	pop	{pc}		; (ldr pc, [sp], #4)
   11b54:	str	fp, [sp, #-8]!
   11b58:	str	lr, [sp, #4]
   11b5c:	add	fp, sp, #4
   11b60:	sub	sp, sp, #16
   11b64:	str	r0, [fp, #-16]
   11b68:	bl	10dfc <__errno_location@plt>
   11b6c:	mov	r3, r0
   11b70:	ldr	r3, [r3]
   11b74:	str	r3, [fp, #-8]
   11b78:	ldr	r3, [fp, #-16]
   11b7c:	cmp	r3, #0
   11b80:	beq	11b8c <__assert_fail@plt+0xce8>
   11b84:	ldr	r3, [fp, #-16]
   11b88:	b	11b94 <__assert_fail@plt+0xcf0>
   11b8c:	movw	r3, #33116	; 0x815c
   11b90:	movt	r3, #2
   11b94:	mov	r1, #48	; 0x30
   11b98:	mov	r0, r3
   11b9c:	bl	15334 <__assert_fail@plt+0x4490>
   11ba0:	mov	r3, r0
   11ba4:	str	r3, [fp, #-12]
   11ba8:	bl	10dfc <__errno_location@plt>
   11bac:	mov	r2, r0
   11bb0:	ldr	r3, [fp, #-8]
   11bb4:	str	r3, [r2]
   11bb8:	ldr	r3, [fp, #-12]
   11bbc:	mov	r0, r3
   11bc0:	sub	sp, fp, #4
   11bc4:	ldr	fp, [sp]
   11bc8:	add	sp, sp, #4
   11bcc:	pop	{pc}		; (ldr pc, [sp], #4)
   11bd0:	push	{fp}		; (str fp, [sp, #-4]!)
   11bd4:	add	fp, sp, #0
   11bd8:	sub	sp, sp, #12
   11bdc:	str	r0, [fp, #-8]
   11be0:	ldr	r3, [fp, #-8]
   11be4:	cmp	r3, #0
   11be8:	beq	11bf4 <__assert_fail@plt+0xd50>
   11bec:	ldr	r3, [fp, #-8]
   11bf0:	b	11bfc <__assert_fail@plt+0xd58>
   11bf4:	movw	r3, #33116	; 0x815c
   11bf8:	movt	r3, #2
   11bfc:	ldr	r3, [r3]
   11c00:	mov	r0, r3
   11c04:	add	sp, fp, #0
   11c08:	pop	{fp}		; (ldr fp, [sp], #4)
   11c0c:	bx	lr
   11c10:	push	{fp}		; (str fp, [sp, #-4]!)
   11c14:	add	fp, sp, #0
   11c18:	sub	sp, sp, #12
   11c1c:	str	r0, [fp, #-8]
   11c20:	str	r1, [fp, #-12]
   11c24:	ldr	r3, [fp, #-8]
   11c28:	cmp	r3, #0
   11c2c:	beq	11c38 <__assert_fail@plt+0xd94>
   11c30:	ldr	r3, [fp, #-8]
   11c34:	b	11c40 <__assert_fail@plt+0xd9c>
   11c38:	movw	r3, #33116	; 0x815c
   11c3c:	movt	r3, #2
   11c40:	ldr	r2, [fp, #-12]
   11c44:	str	r2, [r3]
   11c48:	nop	{0}
   11c4c:	add	sp, fp, #0
   11c50:	pop	{fp}		; (ldr fp, [sp], #4)
   11c54:	bx	lr
   11c58:	push	{fp}		; (str fp, [sp, #-4]!)
   11c5c:	add	fp, sp, #0
   11c60:	sub	sp, sp, #36	; 0x24
   11c64:	str	r0, [fp, #-24]	; 0xffffffe8
   11c68:	mov	r3, r1
   11c6c:	str	r2, [fp, #-32]	; 0xffffffe0
   11c70:	strb	r3, [fp, #-25]	; 0xffffffe7
   11c74:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   11c78:	strb	r3, [fp, #-5]
   11c7c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11c80:	cmp	r3, #0
   11c84:	beq	11c90 <__assert_fail@plt+0xdec>
   11c88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11c8c:	b	11c98 <__assert_fail@plt+0xdf4>
   11c90:	movw	r3, #33116	; 0x815c
   11c94:	movt	r3, #2
   11c98:	add	r2, r3, #8
   11c9c:	ldrb	r3, [fp, #-5]
   11ca0:	lsr	r3, r3, #5
   11ca4:	uxtb	r3, r3
   11ca8:	lsl	r3, r3, #2
   11cac:	add	r3, r2, r3
   11cb0:	str	r3, [fp, #-12]
   11cb4:	ldrb	r3, [fp, #-5]
   11cb8:	and	r3, r3, #31
   11cbc:	str	r3, [fp, #-16]
   11cc0:	ldr	r3, [fp, #-12]
   11cc4:	ldr	r2, [r3]
   11cc8:	ldr	r3, [fp, #-16]
   11ccc:	lsr	r3, r2, r3
   11cd0:	and	r3, r3, #1
   11cd4:	str	r3, [fp, #-20]	; 0xffffffec
   11cd8:	ldr	r3, [fp, #-12]
   11cdc:	ldr	r3, [r3]
   11ce0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11ce4:	and	r1, r2, #1
   11ce8:	ldr	r2, [fp, #-20]	; 0xffffffec
   11cec:	eor	r1, r1, r2
   11cf0:	ldr	r2, [fp, #-16]
   11cf4:	lsl	r2, r1, r2
   11cf8:	eor	r2, r2, r3
   11cfc:	ldr	r3, [fp, #-12]
   11d00:	str	r2, [r3]
   11d04:	ldr	r3, [fp, #-20]	; 0xffffffec
   11d08:	mov	r0, r3
   11d0c:	add	sp, fp, #0
   11d10:	pop	{fp}		; (ldr fp, [sp], #4)
   11d14:	bx	lr
   11d18:	push	{fp}		; (str fp, [sp, #-4]!)
   11d1c:	add	fp, sp, #0
   11d20:	sub	sp, sp, #20
   11d24:	str	r0, [fp, #-16]
   11d28:	str	r1, [fp, #-20]	; 0xffffffec
   11d2c:	ldr	r3, [fp, #-16]
   11d30:	cmp	r3, #0
   11d34:	bne	11d44 <__assert_fail@plt+0xea0>
   11d38:	movw	r3, #33116	; 0x815c
   11d3c:	movt	r3, #2
   11d40:	str	r3, [fp, #-16]
   11d44:	ldr	r3, [fp, #-16]
   11d48:	ldr	r3, [r3, #4]
   11d4c:	str	r3, [fp, #-8]
   11d50:	ldr	r3, [fp, #-16]
   11d54:	ldr	r2, [fp, #-20]	; 0xffffffec
   11d58:	str	r2, [r3, #4]
   11d5c:	ldr	r3, [fp, #-8]
   11d60:	mov	r0, r3
   11d64:	add	sp, fp, #0
   11d68:	pop	{fp}		; (ldr fp, [sp], #4)
   11d6c:	bx	lr
   11d70:	str	fp, [sp, #-8]!
   11d74:	str	lr, [sp, #4]
   11d78:	add	fp, sp, #4
   11d7c:	sub	sp, sp, #16
   11d80:	str	r0, [fp, #-8]
   11d84:	str	r1, [fp, #-12]
   11d88:	str	r2, [fp, #-16]
   11d8c:	ldr	r3, [fp, #-8]
   11d90:	cmp	r3, #0
   11d94:	bne	11da4 <__assert_fail@plt+0xf00>
   11d98:	movw	r3, #33116	; 0x815c
   11d9c:	movt	r3, #2
   11da0:	str	r3, [fp, #-8]
   11da4:	ldr	r3, [fp, #-8]
   11da8:	mov	r2, #10
   11dac:	str	r2, [r3]
   11db0:	ldr	r3, [fp, #-12]
   11db4:	cmp	r3, #0
   11db8:	beq	11dc8 <__assert_fail@plt+0xf24>
   11dbc:	ldr	r3, [fp, #-16]
   11dc0:	cmp	r3, #0
   11dc4:	bne	11dcc <__assert_fail@plt+0xf28>
   11dc8:	bl	10e98 <abort@plt>
   11dcc:	ldr	r3, [fp, #-8]
   11dd0:	ldr	r2, [fp, #-12]
   11dd4:	str	r2, [r3, #40]	; 0x28
   11dd8:	ldr	r3, [fp, #-8]
   11ddc:	ldr	r2, [fp, #-16]
   11de0:	str	r2, [r3, #44]	; 0x2c
   11de4:	nop	{0}
   11de8:	sub	sp, fp, #4
   11dec:	ldr	fp, [sp]
   11df0:	add	sp, sp, #4
   11df4:	pop	{pc}		; (ldr pc, [sp], #4)
   11df8:	str	fp, [sp, #-8]!
   11dfc:	str	lr, [sp, #4]
   11e00:	add	fp, sp, #4
   11e04:	sub	sp, sp, #56	; 0x38
   11e08:	str	r0, [fp, #-56]	; 0xffffffc8
   11e0c:	str	r1, [fp, #-60]	; 0xffffffc4
   11e10:	sub	r1, fp, #52	; 0x34
   11e14:	mov	r2, #0
   11e18:	mov	r3, #0
   11e1c:	strd	r2, [r1]
   11e20:	strd	r2, [r1, #8]
   11e24:	strd	r2, [r1, #16]
   11e28:	strd	r2, [r1, #24]
   11e2c:	strd	r2, [r1, #32]
   11e30:	strd	r2, [r1, #40]	; 0x28
   11e34:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11e38:	cmp	r3, #10
   11e3c:	bne	11e44 <__assert_fail@plt+0xfa0>
   11e40:	bl	10e98 <abort@plt>
   11e44:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11e48:	str	r3, [fp, #-52]	; 0xffffffcc
   11e4c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   11e50:	mov	r2, r3
   11e54:	sub	r3, fp, #52	; 0x34
   11e58:	ldrd	r0, [r3]
   11e5c:	strd	r0, [r2]
   11e60:	ldrd	r0, [r3, #8]
   11e64:	strd	r0, [r2, #8]
   11e68:	ldrd	r0, [r3, #16]
   11e6c:	strd	r0, [r2, #16]
   11e70:	ldrd	r0, [r3, #24]
   11e74:	strd	r0, [r2, #24]
   11e78:	ldrd	r0, [r3, #32]
   11e7c:	strd	r0, [r2, #32]
   11e80:	ldrd	r0, [r3, #40]	; 0x28
   11e84:	strd	r0, [r2, #40]	; 0x28
   11e88:	ldr	r0, [fp, #-56]	; 0xffffffc8
   11e8c:	sub	sp, fp, #4
   11e90:	ldr	fp, [sp]
   11e94:	add	sp, sp, #4
   11e98:	pop	{pc}		; (ldr pc, [sp], #4)
   11e9c:	str	fp, [sp, #-8]!
   11ea0:	str	lr, [sp, #4]
   11ea4:	add	fp, sp, #4
   11ea8:	sub	sp, sp, #16
   11eac:	str	r0, [fp, #-16]
   11eb0:	str	r1, [fp, #-20]	; 0xffffffec
   11eb4:	ldr	r0, [fp, #-16]
   11eb8:	bl	10dc0 <gettext@plt>
   11ebc:	str	r0, [fp, #-8]
   11ec0:	ldr	r2, [fp, #-8]
   11ec4:	ldr	r3, [fp, #-16]
   11ec8:	cmp	r2, r3
   11ecc:	beq	11ed8 <__assert_fail@plt+0x1034>
   11ed0:	ldr	r3, [fp, #-8]
   11ed4:	b	11f88 <__assert_fail@plt+0x10e4>
   11ed8:	bl	16d08 <__assert_fail@plt+0x5e64>
   11edc:	str	r0, [fp, #-12]
   11ee0:	movw	r1, #30452	; 0x76f4
   11ee4:	movt	r1, #1
   11ee8:	ldr	r0, [fp, #-12]
   11eec:	bl	166a4 <__assert_fail@plt+0x5800>
   11ef0:	mov	r3, r0
   11ef4:	cmp	r3, #0
   11ef8:	bne	11f24 <__assert_fail@plt+0x1080>
   11efc:	ldr	r3, [fp, #-16]
   11f00:	ldrb	r3, [r3]
   11f04:	cmp	r3, #96	; 0x60
   11f08:	bne	11f18 <__assert_fail@plt+0x1074>
   11f0c:	movw	r3, #30460	; 0x76fc
   11f10:	movt	r3, #1
   11f14:	b	11f88 <__assert_fail@plt+0x10e4>
   11f18:	movw	r3, #30464	; 0x7700
   11f1c:	movt	r3, #1
   11f20:	b	11f88 <__assert_fail@plt+0x10e4>
   11f24:	movw	r1, #30468	; 0x7704
   11f28:	movt	r1, #1
   11f2c:	ldr	r0, [fp, #-12]
   11f30:	bl	166a4 <__assert_fail@plt+0x5800>
   11f34:	mov	r3, r0
   11f38:	cmp	r3, #0
   11f3c:	bne	11f68 <__assert_fail@plt+0x10c4>
   11f40:	ldr	r3, [fp, #-16]
   11f44:	ldrb	r3, [r3]
   11f48:	cmp	r3, #96	; 0x60
   11f4c:	bne	11f5c <__assert_fail@plt+0x10b8>
   11f50:	movw	r3, #30476	; 0x770c
   11f54:	movt	r3, #1
   11f58:	b	11f88 <__assert_fail@plt+0x10e4>
   11f5c:	movw	r3, #30480	; 0x7710
   11f60:	movt	r3, #1
   11f64:	b	11f88 <__assert_fail@plt+0x10e4>
   11f68:	ldr	r3, [fp, #-20]	; 0xffffffec
   11f6c:	cmp	r3, #9
   11f70:	bne	11f80 <__assert_fail@plt+0x10dc>
   11f74:	movw	r3, #30484	; 0x7714
   11f78:	movt	r3, #1
   11f7c:	b	11f88 <__assert_fail@plt+0x10e4>
   11f80:	movw	r3, #30488	; 0x7718
   11f84:	movt	r3, #1
   11f88:	mov	r0, r3
   11f8c:	sub	sp, fp, #4
   11f90:	ldr	fp, [sp]
   11f94:	add	sp, sp, #4
   11f98:	pop	{pc}		; (ldr pc, [sp], #4)
   11f9c:	str	r4, [sp, #-12]!
   11fa0:	str	fp, [sp, #4]
   11fa4:	str	lr, [sp, #8]
   11fa8:	add	fp, sp, #8
   11fac:	sub	sp, sp, #116	; 0x74
   11fb0:	str	r0, [fp, #-88]	; 0xffffffa8
   11fb4:	str	r1, [fp, #-92]	; 0xffffffa4
   11fb8:	str	r2, [fp, #-96]	; 0xffffffa0
   11fbc:	str	r3, [fp, #-100]	; 0xffffff9c
   11fc0:	mov	r3, #0
   11fc4:	str	r3, [fp, #-20]	; 0xffffffec
   11fc8:	mov	r3, #0
   11fcc:	str	r3, [fp, #-24]	; 0xffffffe8
   11fd0:	mov	r3, #0
   11fd4:	str	r3, [fp, #-28]	; 0xffffffe4
   11fd8:	mov	r3, #0
   11fdc:	str	r3, [fp, #-32]	; 0xffffffe0
   11fe0:	mov	r3, #0
   11fe4:	strb	r3, [fp, #-33]	; 0xffffffdf
   11fe8:	bl	10d24 <__ctype_get_mb_cur_max@plt>
   11fec:	mov	r3, r0
   11ff0:	cmp	r3, #1
   11ff4:	moveq	r3, #1
   11ff8:	movne	r3, #0
   11ffc:	strb	r3, [fp, #-57]	; 0xffffffc7
   12000:	ldr	r3, [fp, #8]
   12004:	and	r3, r3, #2
   12008:	cmp	r3, #0
   1200c:	movne	r3, #1
   12010:	moveq	r3, #0
   12014:	strb	r3, [fp, #-34]	; 0xffffffde
   12018:	mov	r3, #0
   1201c:	strb	r3, [fp, #-35]	; 0xffffffdd
   12020:	mov	r3, #0
   12024:	strb	r3, [fp, #-36]	; 0xffffffdc
   12028:	mov	r3, #1
   1202c:	strb	r3, [fp, #-37]	; 0xffffffdb
   12030:	ldr	r3, [fp, #4]
   12034:	cmp	r3, #10
   12038:	ldrls	pc, [pc, r3, lsl #2]
   1203c:	b	12254 <__assert_fail@plt+0x13b0>
   12040:	andeq	r2, r1, r8, asr #4
   12044:	andeq	r2, r1, r0, asr #3
   12048:	andeq	r2, r1, r4, ror #3
   1204c:			; <UNDEFINED> instruction: 0x000121b8
   12050:	andeq	r2, r1, r8, asr #3
   12054:	andeq	r2, r1, ip, ror r0
   12058:	andeq	r2, r1, ip, rrx
   1205c:	andeq	r2, r1, r0, ror #1
   12060:	strdeq	r2, [r1], -r4
   12064:	strdeq	r2, [r1], -r4
   12068:	strdeq	r2, [r1], -r4
   1206c:	mov	r3, #5
   12070:	str	r3, [fp, #4]
   12074:	mov	r3, #1
   12078:	strb	r3, [fp, #-34]	; 0xffffffde
   1207c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12080:	eor	r3, r3, #1
   12084:	uxtb	r3, r3
   12088:	cmp	r3, #0
   1208c:	beq	120c0 <__assert_fail@plt+0x121c>
   12090:	ldr	r2, [fp, #-20]	; 0xffffffec
   12094:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12098:	cmp	r2, r3
   1209c:	bcs	120b4 <__assert_fail@plt+0x1210>
   120a0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   120a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   120a8:	add	r3, r2, r3
   120ac:	mov	r2, #34	; 0x22
   120b0:	strb	r2, [r3]
   120b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   120b8:	add	r3, r3, #1
   120bc:	str	r3, [fp, #-20]	; 0xffffffec
   120c0:	mov	r3, #1
   120c4:	strb	r3, [fp, #-33]	; 0xffffffdf
   120c8:	movw	r3, #30484	; 0x7714
   120cc:	movt	r3, #1
   120d0:	str	r3, [fp, #-28]	; 0xffffffe4
   120d4:	mov	r3, #1
   120d8:	str	r3, [fp, #-32]	; 0xffffffe0
   120dc:	b	12258 <__assert_fail@plt+0x13b4>
   120e0:	mov	r3, #1
   120e4:	strb	r3, [fp, #-33]	; 0xffffffdf
   120e8:	mov	r3, #0
   120ec:	strb	r3, [fp, #-34]	; 0xffffffde
   120f0:	b	12258 <__assert_fail@plt+0x13b4>
   120f4:	ldr	r3, [fp, #4]
   120f8:	cmp	r3, #10
   120fc:	beq	12128 <__assert_fail@plt+0x1284>
   12100:	ldr	r1, [fp, #4]
   12104:	movw	r0, #30492	; 0x771c
   12108:	movt	r0, #1
   1210c:	bl	11e9c <__assert_fail@plt+0xff8>
   12110:	str	r0, [fp, #16]
   12114:	ldr	r1, [fp, #4]
   12118:	movw	r0, #30488	; 0x7718
   1211c:	movt	r0, #1
   12120:	bl	11e9c <__assert_fail@plt+0xff8>
   12124:	str	r0, [fp, #20]
   12128:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1212c:	eor	r3, r3, #1
   12130:	uxtb	r3, r3
   12134:	cmp	r3, #0
   12138:	beq	12198 <__assert_fail@plt+0x12f4>
   1213c:	ldr	r3, [fp, #16]
   12140:	str	r3, [fp, #-28]	; 0xffffffe4
   12144:	b	12188 <__assert_fail@plt+0x12e4>
   12148:	ldr	r2, [fp, #-20]	; 0xffffffec
   1214c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12150:	cmp	r2, r3
   12154:	bcs	12170 <__assert_fail@plt+0x12cc>
   12158:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1215c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12160:	add	r3, r2, r3
   12164:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12168:	ldrb	r2, [r2]
   1216c:	strb	r2, [r3]
   12170:	ldr	r3, [fp, #-20]	; 0xffffffec
   12174:	add	r3, r3, #1
   12178:	str	r3, [fp, #-20]	; 0xffffffec
   1217c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12180:	add	r3, r3, #1
   12184:	str	r3, [fp, #-28]	; 0xffffffe4
   12188:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1218c:	ldrb	r3, [r3]
   12190:	cmp	r3, #0
   12194:	bne	12148 <__assert_fail@plt+0x12a4>
   12198:	mov	r3, #1
   1219c:	strb	r3, [fp, #-33]	; 0xffffffdf
   121a0:	ldr	r3, [fp, #20]
   121a4:	str	r3, [fp, #-28]	; 0xffffffe4
   121a8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   121ac:	bl	10dd8 <strlen@plt>
   121b0:	str	r0, [fp, #-32]	; 0xffffffe0
   121b4:	b	12258 <__assert_fail@plt+0x13b4>
   121b8:	mov	r3, #1
   121bc:	strb	r3, [fp, #-33]	; 0xffffffdf
   121c0:	mov	r3, #1
   121c4:	strb	r3, [fp, #-34]	; 0xffffffde
   121c8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   121cc:	eor	r3, r3, #1
   121d0:	uxtb	r3, r3
   121d4:	cmp	r3, #0
   121d8:	beq	121e4 <__assert_fail@plt+0x1340>
   121dc:	mov	r3, #1
   121e0:	strb	r3, [fp, #-33]	; 0xffffffdf
   121e4:	mov	r3, #2
   121e8:	str	r3, [fp, #4]
   121ec:	ldrb	r3, [fp, #-34]	; 0xffffffde
   121f0:	eor	r3, r3, #1
   121f4:	uxtb	r3, r3
   121f8:	cmp	r3, #0
   121fc:	beq	12230 <__assert_fail@plt+0x138c>
   12200:	ldr	r2, [fp, #-20]	; 0xffffffec
   12204:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12208:	cmp	r2, r3
   1220c:	bcs	12224 <__assert_fail@plt+0x1380>
   12210:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12214:	ldr	r3, [fp, #-20]	; 0xffffffec
   12218:	add	r3, r2, r3
   1221c:	mov	r2, #39	; 0x27
   12220:	strb	r2, [r3]
   12224:	ldr	r3, [fp, #-20]	; 0xffffffec
   12228:	add	r3, r3, #1
   1222c:	str	r3, [fp, #-20]	; 0xffffffec
   12230:	movw	r3, #30488	; 0x7718
   12234:	movt	r3, #1
   12238:	str	r3, [fp, #-28]	; 0xffffffe4
   1223c:	mov	r3, #1
   12240:	str	r3, [fp, #-32]	; 0xffffffe0
   12244:	b	12258 <__assert_fail@plt+0x13b4>
   12248:	mov	r3, #0
   1224c:	strb	r3, [fp, #-34]	; 0xffffffde
   12250:	b	12258 <__assert_fail@plt+0x13b4>
   12254:	bl	10e98 <abort@plt>
   12258:	mov	r3, #0
   1225c:	str	r3, [fp, #-16]
   12260:	b	133fc <__assert_fail@plt+0x2558>
   12264:	mov	r3, #0
   12268:	strb	r3, [fp, #-40]	; 0xffffffd8
   1226c:	mov	r3, #0
   12270:	strb	r3, [fp, #-41]	; 0xffffffd7
   12274:	mov	r3, #0
   12278:	strb	r3, [fp, #-42]	; 0xffffffd6
   1227c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12280:	cmp	r3, #0
   12284:	beq	12320 <__assert_fail@plt+0x147c>
   12288:	ldr	r3, [fp, #4]
   1228c:	cmp	r3, #2
   12290:	beq	12320 <__assert_fail@plt+0x147c>
   12294:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12298:	cmp	r3, #0
   1229c:	beq	12320 <__assert_fail@plt+0x147c>
   122a0:	ldr	r2, [fp, #-16]
   122a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   122a8:	add	r4, r2, r3
   122ac:	ldr	r3, [fp, #-100]	; 0xffffff9c
   122b0:	cmn	r3, #1
   122b4:	bne	122d8 <__assert_fail@plt+0x1434>
   122b8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   122bc:	cmp	r3, #1
   122c0:	bls	122d8 <__assert_fail@plt+0x1434>
   122c4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   122c8:	bl	10dd8 <strlen@plt>
   122cc:	str	r0, [fp, #-100]	; 0xffffff9c
   122d0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   122d4:	b	122dc <__assert_fail@plt+0x1438>
   122d8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   122dc:	cmp	r3, r4
   122e0:	bcc	12320 <__assert_fail@plt+0x147c>
   122e4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   122e8:	ldr	r3, [fp, #-16]
   122ec:	add	r3, r2, r3
   122f0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   122f4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   122f8:	mov	r0, r3
   122fc:	bl	10cc4 <memcmp@plt>
   12300:	mov	r3, r0
   12304:	cmp	r3, #0
   12308:	bne	12320 <__assert_fail@plt+0x147c>
   1230c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12310:	cmp	r3, #0
   12314:	bne	135b8 <__assert_fail@plt+0x2714>
   12318:	mov	r3, #1
   1231c:	strb	r3, [fp, #-40]	; 0xffffffd8
   12320:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12324:	ldr	r3, [fp, #-16]
   12328:	add	r3, r2, r3
   1232c:	ldrb	r3, [r3]
   12330:	strb	r3, [fp, #-38]	; 0xffffffda
   12334:	ldrb	r3, [fp, #-38]	; 0xffffffda
   12338:	cmp	r3, #126	; 0x7e
   1233c:	ldrls	pc, [pc, r3, lsl #2]
   12340:	b	12b78 <__assert_fail@plt+0x1cd4>
   12344:	andeq	r2, r1, r0, asr #10
   12348:	andeq	r2, r1, r8, ror fp
   1234c:	andeq	r2, r1, r8, ror fp
   12350:	andeq	r2, r1, r8, ror fp
   12354:	andeq	r2, r1, r8, ror fp
   12358:	andeq	r2, r1, r8, ror fp
   1235c:	andeq	r2, r1, r8, ror fp
   12360:	andeq	r2, r1, r4, lsr r9
   12364:	andeq	r2, r1, r0, asr #18
   12368:	andeq	r2, r1, r0, ror r9
   1236c:	andeq	r2, r1, r8, asr r9
   12370:	andeq	r2, r1, ip, ror r9
   12374:	andeq	r2, r1, ip, asr #18
   12378:	andeq	r2, r1, r4, ror #18
   1237c:	andeq	r2, r1, r8, ror fp
   12380:	andeq	r2, r1, r8, ror fp
   12384:	andeq	r2, r1, r8, ror fp
   12388:	andeq	r2, r1, r8, ror fp
   1238c:	andeq	r2, r1, r8, ror fp
   12390:	andeq	r2, r1, r8, ror fp
   12394:	andeq	r2, r1, r8, ror fp
   12398:	andeq	r2, r1, r8, ror fp
   1239c:	andeq	r2, r1, r8, ror fp
   123a0:	andeq	r2, r1, r8, ror fp
   123a4:	andeq	r2, r1, r8, ror fp
   123a8:	andeq	r2, r1, r8, ror fp
   123ac:	andeq	r2, r1, r8, ror fp
   123b0:	andeq	r2, r1, r8, ror fp
   123b4:	andeq	r2, r1, r8, ror fp
   123b8:	andeq	r2, r1, r8, ror fp
   123bc:	andeq	r2, r1, r8, ror fp
   123c0:	andeq	r2, r1, r8, ror fp
   123c4:	andeq	r2, r1, ip, asr sl
   123c8:	andeq	r2, r1, r4, ror #20
   123cc:	andeq	r2, r1, r4, ror #20
   123d0:	andeq	r2, r1, r0, asr sl
   123d4:	andeq	r2, r1, r4, ror #20
   123d8:	andeq	r2, r1, ip, ror #22
   123dc:	andeq	r2, r1, r4, ror #20
   123e0:	andeq	r2, r1, r0, lsl #21
   123e4:	andeq	r2, r1, r4, ror #20
   123e8:	andeq	r2, r1, r4, ror #20
   123ec:	andeq	r2, r1, r4, ror #20
   123f0:	andeq	r2, r1, ip, ror #22
   123f4:	andeq	r2, r1, ip, ror #22
   123f8:	andeq	r2, r1, ip, ror #22
   123fc:	andeq	r2, r1, ip, ror #22
   12400:	andeq	r2, r1, ip, ror #22
   12404:	andeq	r2, r1, ip, ror #22
   12408:	andeq	r2, r1, ip, ror #22
   1240c:	andeq	r2, r1, ip, ror #22
   12410:	andeq	r2, r1, ip, ror #22
   12414:	andeq	r2, r1, ip, ror #22
   12418:	andeq	r2, r1, ip, ror #22
   1241c:	andeq	r2, r1, ip, ror #22
   12420:	andeq	r2, r1, ip, ror #22
   12424:	andeq	r2, r1, ip, ror #22
   12428:	andeq	r2, r1, ip, ror #22
   1242c:	andeq	r2, r1, ip, ror #22
   12430:	andeq	r2, r1, r4, ror #20
   12434:	andeq	r2, r1, r4, ror #20
   12438:	andeq	r2, r1, r4, ror #20
   1243c:	andeq	r2, r1, r4, ror #20
   12440:	andeq	r2, r1, r0, lsr #14
   12444:	andeq	r2, r1, r8, ror fp
   12448:	andeq	r2, r1, ip, ror #22
   1244c:	andeq	r2, r1, ip, ror #22
   12450:	andeq	r2, r1, ip, ror #22
   12454:	andeq	r2, r1, ip, ror #22
   12458:	andeq	r2, r1, ip, ror #22
   1245c:	andeq	r2, r1, ip, ror #22
   12460:	andeq	r2, r1, ip, ror #22
   12464:	andeq	r2, r1, ip, ror #22
   12468:	andeq	r2, r1, ip, ror #22
   1246c:	andeq	r2, r1, ip, ror #22
   12470:	andeq	r2, r1, ip, ror #22
   12474:	andeq	r2, r1, ip, ror #22
   12478:	andeq	r2, r1, ip, ror #22
   1247c:	andeq	r2, r1, ip, ror #22
   12480:	andeq	r2, r1, ip, ror #22
   12484:	andeq	r2, r1, ip, ror #22
   12488:	andeq	r2, r1, ip, ror #22
   1248c:	andeq	r2, r1, ip, ror #22
   12490:	andeq	r2, r1, ip, ror #22
   12494:	andeq	r2, r1, ip, ror #22
   12498:	andeq	r2, r1, ip, ror #22
   1249c:	andeq	r2, r1, ip, ror #22
   124a0:	andeq	r2, r1, ip, ror #22
   124a4:	andeq	r2, r1, ip, ror #22
   124a8:	andeq	r2, r1, ip, ror #22
   124ac:	andeq	r2, r1, ip, ror #22
   124b0:	andeq	r2, r1, r4, ror #20
   124b4:	andeq	r2, r1, r8, lsl #19
   124b8:	andeq	r2, r1, ip, ror #22
   124bc:	andeq	r2, r1, r4, ror #20
   124c0:	andeq	r2, r1, ip, ror #22
   124c4:	andeq	r2, r1, r4, ror #20
   124c8:	andeq	r2, r1, ip, ror #22
   124cc:	andeq	r2, r1, ip, ror #22
   124d0:	andeq	r2, r1, ip, ror #22
   124d4:	andeq	r2, r1, ip, ror #22
   124d8:	andeq	r2, r1, ip, ror #22
   124dc:	andeq	r2, r1, ip, ror #22
   124e0:	andeq	r2, r1, ip, ror #22
   124e4:	andeq	r2, r1, ip, ror #22
   124e8:	andeq	r2, r1, ip, ror #22
   124ec:	andeq	r2, r1, ip, ror #22
   124f0:	andeq	r2, r1, ip, ror #22
   124f4:	andeq	r2, r1, ip, ror #22
   124f8:	andeq	r2, r1, ip, ror #22
   124fc:	andeq	r2, r1, ip, ror #22
   12500:	andeq	r2, r1, ip, ror #22
   12504:	andeq	r2, r1, ip, ror #22
   12508:	andeq	r2, r1, ip, ror #22
   1250c:	andeq	r2, r1, ip, ror #22
   12510:	andeq	r2, r1, ip, ror #22
   12514:	andeq	r2, r1, ip, ror #22
   12518:	andeq	r2, r1, ip, ror #22
   1251c:	andeq	r2, r1, ip, ror #22
   12520:	andeq	r2, r1, ip, ror #22
   12524:	andeq	r2, r1, ip, ror #22
   12528:	andeq	r2, r1, ip, ror #22
   1252c:	andeq	r2, r1, ip, ror #22
   12530:	andeq	r2, r1, r8, lsl #20
   12534:	andeq	r2, r1, r4, ror #20
   12538:	andeq	r2, r1, r8, lsl #20
   1253c:	andeq	r2, r1, r0, asr sl
   12540:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12544:	cmp	r3, #0
   12548:	beq	1270c <__assert_fail@plt+0x1868>
   1254c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12550:	cmp	r3, #0
   12554:	bne	135c0 <__assert_fail@plt+0x271c>
   12558:	mov	r3, #1
   1255c:	strb	r3, [fp, #-41]	; 0xffffffd7
   12560:	ldr	r3, [fp, #4]
   12564:	cmp	r3, #2
   12568:	bne	12618 <__assert_fail@plt+0x1774>
   1256c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   12570:	eor	r3, r3, #1
   12574:	uxtb	r3, r3
   12578:	cmp	r3, #0
   1257c:	beq	12618 <__assert_fail@plt+0x1774>
   12580:	ldr	r2, [fp, #-20]	; 0xffffffec
   12584:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12588:	cmp	r2, r3
   1258c:	bcs	125a4 <__assert_fail@plt+0x1700>
   12590:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12594:	ldr	r3, [fp, #-20]	; 0xffffffec
   12598:	add	r3, r2, r3
   1259c:	mov	r2, #39	; 0x27
   125a0:	strb	r2, [r3]
   125a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   125a8:	add	r3, r3, #1
   125ac:	str	r3, [fp, #-20]	; 0xffffffec
   125b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   125b4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   125b8:	cmp	r2, r3
   125bc:	bcs	125d4 <__assert_fail@plt+0x1730>
   125c0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   125c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   125c8:	add	r3, r2, r3
   125cc:	mov	r2, #36	; 0x24
   125d0:	strb	r2, [r3]
   125d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   125d8:	add	r3, r3, #1
   125dc:	str	r3, [fp, #-20]	; 0xffffffec
   125e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   125e4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   125e8:	cmp	r2, r3
   125ec:	bcs	12604 <__assert_fail@plt+0x1760>
   125f0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   125f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   125f8:	add	r3, r2, r3
   125fc:	mov	r2, #39	; 0x27
   12600:	strb	r2, [r3]
   12604:	ldr	r3, [fp, #-20]	; 0xffffffec
   12608:	add	r3, r3, #1
   1260c:	str	r3, [fp, #-20]	; 0xffffffec
   12610:	mov	r3, #1
   12614:	strb	r3, [fp, #-35]	; 0xffffffdd
   12618:	ldr	r2, [fp, #-20]	; 0xffffffec
   1261c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12620:	cmp	r2, r3
   12624:	bcs	1263c <__assert_fail@plt+0x1798>
   12628:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1262c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12630:	add	r3, r2, r3
   12634:	mov	r2, #92	; 0x5c
   12638:	strb	r2, [r3]
   1263c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12640:	add	r3, r3, #1
   12644:	str	r3, [fp, #-20]	; 0xffffffec
   12648:	ldr	r3, [fp, #4]
   1264c:	cmp	r3, #2
   12650:	beq	12700 <__assert_fail@plt+0x185c>
   12654:	ldr	r3, [fp, #-16]
   12658:	add	r3, r3, #1
   1265c:	ldr	r2, [fp, #-100]	; 0xffffff9c
   12660:	cmp	r2, r3
   12664:	bls	12700 <__assert_fail@plt+0x185c>
   12668:	ldr	r3, [fp, #-16]
   1266c:	add	r3, r3, #1
   12670:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12674:	add	r3, r2, r3
   12678:	ldrb	r3, [r3]
   1267c:	cmp	r3, #47	; 0x2f
   12680:	bls	12700 <__assert_fail@plt+0x185c>
   12684:	ldr	r3, [fp, #-16]
   12688:	add	r3, r3, #1
   1268c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12690:	add	r3, r2, r3
   12694:	ldrb	r3, [r3]
   12698:	cmp	r3, #57	; 0x39
   1269c:	bhi	12700 <__assert_fail@plt+0x185c>
   126a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   126a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   126a8:	cmp	r2, r3
   126ac:	bcs	126c4 <__assert_fail@plt+0x1820>
   126b0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   126b4:	ldr	r3, [fp, #-20]	; 0xffffffec
   126b8:	add	r3, r2, r3
   126bc:	mov	r2, #48	; 0x30
   126c0:	strb	r2, [r3]
   126c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   126c8:	add	r3, r3, #1
   126cc:	str	r3, [fp, #-20]	; 0xffffffec
   126d0:	ldr	r2, [fp, #-20]	; 0xffffffec
   126d4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   126d8:	cmp	r2, r3
   126dc:	bcs	126f4 <__assert_fail@plt+0x1850>
   126e0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   126e4:	ldr	r3, [fp, #-20]	; 0xffffffec
   126e8:	add	r3, r2, r3
   126ec:	mov	r2, #48	; 0x30
   126f0:	strb	r2, [r3]
   126f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   126f8:	add	r3, r3, #1
   126fc:	str	r3, [fp, #-20]	; 0xffffffec
   12700:	mov	r3, #48	; 0x30
   12704:	strb	r3, [fp, #-38]	; 0xffffffda
   12708:	b	13148 <__assert_fail@plt+0x22a4>
   1270c:	ldr	r3, [fp, #8]
   12710:	and	r3, r3, #1
   12714:	cmp	r3, #0
   12718:	beq	13148 <__assert_fail@plt+0x22a4>
   1271c:	b	133f0 <__assert_fail@plt+0x254c>
   12720:	ldr	r3, [fp, #4]
   12724:	cmp	r3, #2
   12728:	beq	1273c <__assert_fail@plt+0x1898>
   1272c:	ldr	r3, [fp, #4]
   12730:	cmp	r3, #5
   12734:	beq	1274c <__assert_fail@plt+0x18a8>
   12738:	b	12930 <__assert_fail@plt+0x1a8c>
   1273c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12740:	cmp	r3, #0
   12744:	beq	12924 <__assert_fail@plt+0x1a80>
   12748:	b	135f4 <__assert_fail@plt+0x2750>
   1274c:	ldr	r3, [fp, #8]
   12750:	and	r3, r3, #4
   12754:	cmp	r3, #0
   12758:	beq	1292c <__assert_fail@plt+0x1a88>
   1275c:	ldr	r3, [fp, #-16]
   12760:	add	r3, r3, #2
   12764:	ldr	r2, [fp, #-100]	; 0xffffff9c
   12768:	cmp	r2, r3
   1276c:	bls	1292c <__assert_fail@plt+0x1a88>
   12770:	ldr	r3, [fp, #-16]
   12774:	add	r3, r3, #1
   12778:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1277c:	add	r3, r2, r3
   12780:	ldrb	r3, [r3]
   12784:	cmp	r3, #63	; 0x3f
   12788:	bne	1292c <__assert_fail@plt+0x1a88>
   1278c:	ldr	r3, [fp, #-16]
   12790:	add	r3, r3, #2
   12794:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12798:	add	r3, r2, r3
   1279c:	ldrb	r3, [r3]
   127a0:	sub	r3, r3, #33	; 0x21
   127a4:	cmp	r3, #29
   127a8:	ldrls	pc, [pc, r3, lsl #2]
   127ac:	b	1291c <__assert_fail@plt+0x1a78>
   127b0:	andeq	r2, r1, r8, lsr #16
   127b4:	andeq	r2, r1, ip, lsl r9
   127b8:	andeq	r2, r1, ip, lsl r9
   127bc:	andeq	r2, r1, ip, lsl r9
   127c0:	andeq	r2, r1, ip, lsl r9
   127c4:	andeq	r2, r1, ip, lsl r9
   127c8:	andeq	r2, r1, r8, lsr #16
   127cc:	andeq	r2, r1, r8, lsr #16
   127d0:	andeq	r2, r1, r8, lsr #16
   127d4:	andeq	r2, r1, ip, lsl r9
   127d8:	andeq	r2, r1, ip, lsl r9
   127dc:	andeq	r2, r1, ip, lsl r9
   127e0:	andeq	r2, r1, r8, lsr #16
   127e4:	andeq	r2, r1, ip, lsl r9
   127e8:	andeq	r2, r1, r8, lsr #16
   127ec:	andeq	r2, r1, ip, lsl r9
   127f0:	andeq	r2, r1, ip, lsl r9
   127f4:	andeq	r2, r1, ip, lsl r9
   127f8:	andeq	r2, r1, ip, lsl r9
   127fc:	andeq	r2, r1, ip, lsl r9
   12800:	andeq	r2, r1, ip, lsl r9
   12804:	andeq	r2, r1, ip, lsl r9
   12808:	andeq	r2, r1, ip, lsl r9
   1280c:	andeq	r2, r1, ip, lsl r9
   12810:	andeq	r2, r1, ip, lsl r9
   12814:	andeq	r2, r1, ip, lsl r9
   12818:	andeq	r2, r1, ip, lsl r9
   1281c:	andeq	r2, r1, r8, lsr #16
   12820:	andeq	r2, r1, r8, lsr #16
   12824:	andeq	r2, r1, r8, lsr #16
   12828:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1282c:	cmp	r3, #0
   12830:	bne	135c8 <__assert_fail@plt+0x2724>
   12834:	ldr	r3, [fp, #-16]
   12838:	add	r3, r3, #2
   1283c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12840:	add	r3, r2, r3
   12844:	ldrb	r3, [r3]
   12848:	strb	r3, [fp, #-38]	; 0xffffffda
   1284c:	ldr	r3, [fp, #-16]
   12850:	add	r3, r3, #2
   12854:	str	r3, [fp, #-16]
   12858:	ldr	r2, [fp, #-20]	; 0xffffffec
   1285c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12860:	cmp	r2, r3
   12864:	bcs	1287c <__assert_fail@plt+0x19d8>
   12868:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1286c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12870:	add	r3, r2, r3
   12874:	mov	r2, #63	; 0x3f
   12878:	strb	r2, [r3]
   1287c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12880:	add	r3, r3, #1
   12884:	str	r3, [fp, #-20]	; 0xffffffec
   12888:	ldr	r2, [fp, #-20]	; 0xffffffec
   1288c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12890:	cmp	r2, r3
   12894:	bcs	128ac <__assert_fail@plt+0x1a08>
   12898:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1289c:	ldr	r3, [fp, #-20]	; 0xffffffec
   128a0:	add	r3, r2, r3
   128a4:	mov	r2, #34	; 0x22
   128a8:	strb	r2, [r3]
   128ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   128b0:	add	r3, r3, #1
   128b4:	str	r3, [fp, #-20]	; 0xffffffec
   128b8:	ldr	r2, [fp, #-20]	; 0xffffffec
   128bc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   128c0:	cmp	r2, r3
   128c4:	bcs	128dc <__assert_fail@plt+0x1a38>
   128c8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   128cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   128d0:	add	r3, r2, r3
   128d4:	mov	r2, #34	; 0x22
   128d8:	strb	r2, [r3]
   128dc:	ldr	r3, [fp, #-20]	; 0xffffffec
   128e0:	add	r3, r3, #1
   128e4:	str	r3, [fp, #-20]	; 0xffffffec
   128e8:	ldr	r2, [fp, #-20]	; 0xffffffec
   128ec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   128f0:	cmp	r2, r3
   128f4:	bcs	1290c <__assert_fail@plt+0x1a68>
   128f8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   128fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   12900:	add	r3, r2, r3
   12904:	mov	r2, #63	; 0x3f
   12908:	strb	r2, [r3]
   1290c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12910:	add	r3, r3, #1
   12914:	str	r3, [fp, #-20]	; 0xffffffec
   12918:	b	12920 <__assert_fail@plt+0x1a7c>
   1291c:	nop	{0}
   12920:	b	1292c <__assert_fail@plt+0x1a88>
   12924:	nop	{0}
   12928:	b	1317c <__assert_fail@plt+0x22d8>
   1292c:	nop	{0}
   12930:	b	1317c <__assert_fail@plt+0x22d8>
   12934:	mov	r3, #97	; 0x61
   12938:	strb	r3, [fp, #-39]	; 0xffffffd9
   1293c:	b	129f0 <__assert_fail@plt+0x1b4c>
   12940:	mov	r3, #98	; 0x62
   12944:	strb	r3, [fp, #-39]	; 0xffffffd9
   12948:	b	129f0 <__assert_fail@plt+0x1b4c>
   1294c:	mov	r3, #102	; 0x66
   12950:	strb	r3, [fp, #-39]	; 0xffffffd9
   12954:	b	129f0 <__assert_fail@plt+0x1b4c>
   12958:	mov	r3, #110	; 0x6e
   1295c:	strb	r3, [fp, #-39]	; 0xffffffd9
   12960:	b	129d4 <__assert_fail@plt+0x1b30>
   12964:	mov	r3, #114	; 0x72
   12968:	strb	r3, [fp, #-39]	; 0xffffffd9
   1296c:	b	129d4 <__assert_fail@plt+0x1b30>
   12970:	mov	r3, #116	; 0x74
   12974:	strb	r3, [fp, #-39]	; 0xffffffd9
   12978:	b	129d4 <__assert_fail@plt+0x1b30>
   1297c:	mov	r3, #118	; 0x76
   12980:	strb	r3, [fp, #-39]	; 0xffffffd9
   12984:	b	129f0 <__assert_fail@plt+0x1b4c>
   12988:	ldrb	r3, [fp, #-38]	; 0xffffffda
   1298c:	strb	r3, [fp, #-39]	; 0xffffffd9
   12990:	ldr	r3, [fp, #4]
   12994:	cmp	r3, #2
   12998:	bne	129ac <__assert_fail@plt+0x1b08>
   1299c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   129a0:	cmp	r3, #0
   129a4:	beq	13308 <__assert_fail@plt+0x2464>
   129a8:	b	135f4 <__assert_fail@plt+0x2750>
   129ac:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   129b0:	cmp	r3, #0
   129b4:	beq	129d0 <__assert_fail@plt+0x1b2c>
   129b8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   129bc:	cmp	r3, #0
   129c0:	beq	129d0 <__assert_fail@plt+0x1b2c>
   129c4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   129c8:	cmp	r3, #0
   129cc:	bne	13310 <__assert_fail@plt+0x246c>
   129d0:	nop	{0}
   129d4:	ldr	r3, [fp, #4]
   129d8:	cmp	r3, #2
   129dc:	bne	129ec <__assert_fail@plt+0x1b48>
   129e0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   129e4:	cmp	r3, #0
   129e8:	bne	135d0 <__assert_fail@plt+0x272c>
   129ec:	nop	{0}
   129f0:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   129f4:	cmp	r3, #0
   129f8:	beq	13150 <__assert_fail@plt+0x22ac>
   129fc:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   12a00:	strb	r3, [fp, #-38]	; 0xffffffda
   12a04:	b	13208 <__assert_fail@plt+0x2364>
   12a08:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12a0c:	cmn	r3, #1
   12a10:	bne	12a34 <__assert_fail@plt+0x1b90>
   12a14:	ldr	r3, [fp, #-96]	; 0xffffffa0
   12a18:	add	r3, r3, #1
   12a1c:	ldrb	r3, [r3]
   12a20:	cmp	r3, #0
   12a24:	movne	r3, #1
   12a28:	moveq	r3, #0
   12a2c:	uxtb	r3, r3
   12a30:	b	12a48 <__assert_fail@plt+0x1ba4>
   12a34:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12a38:	cmp	r3, #1
   12a3c:	movne	r3, #1
   12a40:	moveq	r3, #0
   12a44:	uxtb	r3, r3
   12a48:	cmp	r3, #0
   12a4c:	bne	13158 <__assert_fail@plt+0x22b4>
   12a50:	ldr	r3, [fp, #-16]
   12a54:	cmp	r3, #0
   12a58:	bne	13160 <__assert_fail@plt+0x22bc>
   12a5c:	mov	r3, #1
   12a60:	strb	r3, [fp, #-42]	; 0xffffffd6
   12a64:	ldr	r3, [fp, #4]
   12a68:	cmp	r3, #2
   12a6c:	bne	13168 <__assert_fail@plt+0x22c4>
   12a70:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12a74:	cmp	r3, #0
   12a78:	beq	13168 <__assert_fail@plt+0x22c4>
   12a7c:	b	135f4 <__assert_fail@plt+0x2750>
   12a80:	mov	r3, #1
   12a84:	strb	r3, [fp, #-36]	; 0xffffffdc
   12a88:	mov	r3, #1
   12a8c:	strb	r3, [fp, #-42]	; 0xffffffd6
   12a90:	ldr	r3, [fp, #4]
   12a94:	cmp	r3, #2
   12a98:	bne	13170 <__assert_fail@plt+0x22cc>
   12a9c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12aa0:	cmp	r3, #0
   12aa4:	bne	135d8 <__assert_fail@plt+0x2734>
   12aa8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12aac:	cmp	r3, #0
   12ab0:	beq	12ad0 <__assert_fail@plt+0x1c2c>
   12ab4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12ab8:	cmp	r3, #0
   12abc:	bne	12ad0 <__assert_fail@plt+0x1c2c>
   12ac0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12ac4:	str	r3, [fp, #-24]	; 0xffffffe8
   12ac8:	mov	r3, #0
   12acc:	str	r3, [fp, #-92]	; 0xffffffa4
   12ad0:	ldr	r2, [fp, #-20]	; 0xffffffec
   12ad4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12ad8:	cmp	r2, r3
   12adc:	bcs	12af4 <__assert_fail@plt+0x1c50>
   12ae0:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12ae4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ae8:	add	r3, r2, r3
   12aec:	mov	r2, #39	; 0x27
   12af0:	strb	r2, [r3]
   12af4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12af8:	add	r3, r3, #1
   12afc:	str	r3, [fp, #-20]	; 0xffffffec
   12b00:	ldr	r2, [fp, #-20]	; 0xffffffec
   12b04:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12b08:	cmp	r2, r3
   12b0c:	bcs	12b24 <__assert_fail@plt+0x1c80>
   12b10:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12b14:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b18:	add	r3, r2, r3
   12b1c:	mov	r2, #92	; 0x5c
   12b20:	strb	r2, [r3]
   12b24:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b28:	add	r3, r3, #1
   12b2c:	str	r3, [fp, #-20]	; 0xffffffec
   12b30:	ldr	r2, [fp, #-20]	; 0xffffffec
   12b34:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12b38:	cmp	r2, r3
   12b3c:	bcs	12b54 <__assert_fail@plt+0x1cb0>
   12b40:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12b44:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b48:	add	r3, r2, r3
   12b4c:	mov	r2, #39	; 0x27
   12b50:	strb	r2, [r3]
   12b54:	ldr	r3, [fp, #-20]	; 0xffffffec
   12b58:	add	r3, r3, #1
   12b5c:	str	r3, [fp, #-20]	; 0xffffffec
   12b60:	mov	r3, #0
   12b64:	strb	r3, [fp, #-35]	; 0xffffffdd
   12b68:	b	13170 <__assert_fail@plt+0x22cc>
   12b6c:	mov	r3, #1
   12b70:	strb	r3, [fp, #-42]	; 0xffffffd6
   12b74:	b	1317c <__assert_fail@plt+0x22d8>
   12b78:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   12b7c:	cmp	r3, #0
   12b80:	beq	12bc0 <__assert_fail@plt+0x1d1c>
   12b84:	mov	r3, #1
   12b88:	str	r3, [fp, #-48]	; 0xffffffd0
   12b8c:	bl	10da8 <__ctype_b_loc@plt>
   12b90:	mov	r3, r0
   12b94:	ldr	r2, [r3]
   12b98:	ldrb	r3, [fp, #-38]	; 0xffffffda
   12b9c:	lsl	r3, r3, #1
   12ba0:	add	r3, r2, r3
   12ba4:	ldrh	r3, [r3]
   12ba8:	and	r3, r3, #16384	; 0x4000
   12bac:	cmp	r3, #0
   12bb0:	movne	r3, #1
   12bb4:	moveq	r3, #0
   12bb8:	strb	r3, [fp, #-49]	; 0xffffffcf
   12bbc:	b	12e0c <__assert_fail@plt+0x1f68>
   12bc0:	sub	r3, fp, #76	; 0x4c
   12bc4:	mov	r2, #8
   12bc8:	mov	r1, #0
   12bcc:	mov	r0, r3
   12bd0:	bl	10e14 <memset@plt>
   12bd4:	mov	r3, #0
   12bd8:	str	r3, [fp, #-48]	; 0xffffffd0
   12bdc:	mov	r3, #1
   12be0:	strb	r3, [fp, #-49]	; 0xffffffcf
   12be4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12be8:	cmn	r3, #1
   12bec:	bne	12bfc <__assert_fail@plt+0x1d58>
   12bf0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   12bf4:	bl	10dd8 <strlen@plt>
   12bf8:	str	r0, [fp, #-100]	; 0xffffff9c
   12bfc:	ldr	r2, [fp, #-16]
   12c00:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12c04:	add	r3, r2, r3
   12c08:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12c0c:	add	r1, r2, r3
   12c10:	ldr	r2, [fp, #-16]
   12c14:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12c18:	add	r3, r2, r3
   12c1c:	ldr	r2, [fp, #-100]	; 0xffffff9c
   12c20:	sub	r2, r2, r3
   12c24:	sub	r3, fp, #76	; 0x4c
   12c28:	sub	r0, fp, #80	; 0x50
   12c2c:	bl	16d70 <__assert_fail@plt+0x5ecc>
   12c30:	str	r0, [fp, #-64]	; 0xffffffc0
   12c34:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12c38:	cmp	r3, #0
   12c3c:	beq	12e00 <__assert_fail@plt+0x1f5c>
   12c40:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12c44:	cmn	r3, #1
   12c48:	bne	12c58 <__assert_fail@plt+0x1db4>
   12c4c:	mov	r3, #0
   12c50:	strb	r3, [fp, #-49]	; 0xffffffcf
   12c54:	b	12e0c <__assert_fail@plt+0x1f68>
   12c58:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12c5c:	cmn	r3, #2
   12c60:	bne	12cb8 <__assert_fail@plt+0x1e14>
   12c64:	mov	r3, #0
   12c68:	strb	r3, [fp, #-49]	; 0xffffffcf
   12c6c:	b	12c7c <__assert_fail@plt+0x1dd8>
   12c70:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12c74:	add	r3, r3, #1
   12c78:	str	r3, [fp, #-48]	; 0xffffffd0
   12c7c:	ldr	r2, [fp, #-16]
   12c80:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12c84:	add	r3, r2, r3
   12c88:	ldr	r2, [fp, #-100]	; 0xffffff9c
   12c8c:	cmp	r2, r3
   12c90:	bls	12e08 <__assert_fail@plt+0x1f64>
   12c94:	ldr	r2, [fp, #-16]
   12c98:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12c9c:	add	r3, r2, r3
   12ca0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12ca4:	add	r3, r2, r3
   12ca8:	ldrb	r3, [r3]
   12cac:	cmp	r3, #0
   12cb0:	bne	12c70 <__assert_fail@plt+0x1dcc>
   12cb4:	b	12e08 <__assert_fail@plt+0x1f64>
   12cb8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12cbc:	cmp	r3, #0
   12cc0:	beq	12db4 <__assert_fail@plt+0x1f10>
   12cc4:	ldr	r3, [fp, #4]
   12cc8:	cmp	r3, #2
   12ccc:	bne	12db4 <__assert_fail@plt+0x1f10>
   12cd0:	mov	r3, #1
   12cd4:	str	r3, [fp, #-56]	; 0xffffffc8
   12cd8:	b	12da4 <__assert_fail@plt+0x1f00>
   12cdc:	ldr	r2, [fp, #-16]
   12ce0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12ce4:	add	r2, r2, r3
   12ce8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12cec:	add	r3, r2, r3
   12cf0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12cf4:	add	r3, r2, r3
   12cf8:	ldrb	r3, [r3]
   12cfc:	sub	r3, r3, #91	; 0x5b
   12d00:	cmp	r3, #33	; 0x21
   12d04:	ldrls	pc, [pc, r3, lsl #2]
   12d08:	b	12d94 <__assert_fail@plt+0x1ef0>
   12d0c:	strdeq	r3, [r1], -r4
   12d10:	strdeq	r3, [r1], -r4
   12d14:	muleq	r1, r4, sp
   12d18:	strdeq	r3, [r1], -r4
   12d1c:	muleq	r1, r4, sp
   12d20:	strdeq	r3, [r1], -r4
   12d24:	muleq	r1, r4, sp
   12d28:	muleq	r1, r4, sp
   12d2c:	muleq	r1, r4, sp
   12d30:	muleq	r1, r4, sp
   12d34:	muleq	r1, r4, sp
   12d38:	muleq	r1, r4, sp
   12d3c:	muleq	r1, r4, sp
   12d40:	muleq	r1, r4, sp
   12d44:	muleq	r1, r4, sp
   12d48:	muleq	r1, r4, sp
   12d4c:	muleq	r1, r4, sp
   12d50:	muleq	r1, r4, sp
   12d54:	muleq	r1, r4, sp
   12d58:	muleq	r1, r4, sp
   12d5c:	muleq	r1, r4, sp
   12d60:	muleq	r1, r4, sp
   12d64:	muleq	r1, r4, sp
   12d68:	muleq	r1, r4, sp
   12d6c:	muleq	r1, r4, sp
   12d70:	muleq	r1, r4, sp
   12d74:	muleq	r1, r4, sp
   12d78:	muleq	r1, r4, sp
   12d7c:	muleq	r1, r4, sp
   12d80:	muleq	r1, r4, sp
   12d84:	muleq	r1, r4, sp
   12d88:	muleq	r1, r4, sp
   12d8c:	muleq	r1, r4, sp
   12d90:	strdeq	r3, [r1], -r4
   12d94:	nop	{0}
   12d98:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12d9c:	add	r3, r3, #1
   12da0:	str	r3, [fp, #-56]	; 0xffffffc8
   12da4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12da8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12dac:	cmp	r2, r3
   12db0:	bcc	12cdc <__assert_fail@plt+0x1e38>
   12db4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12db8:	mov	r0, r3
   12dbc:	bl	10d00 <iswprint@plt>
   12dc0:	mov	r3, r0
   12dc4:	cmp	r3, #0
   12dc8:	bne	12dd4 <__assert_fail@plt+0x1f30>
   12dcc:	mov	r3, #0
   12dd0:	strb	r3, [fp, #-49]	; 0xffffffcf
   12dd4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   12dd8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12ddc:	add	r3, r2, r3
   12de0:	str	r3, [fp, #-48]	; 0xffffffd0
   12de4:	sub	r3, fp, #76	; 0x4c
   12de8:	mov	r0, r3
   12dec:	bl	10cac <mbsinit@plt>
   12df0:	mov	r3, r0
   12df4:	cmp	r3, #0
   12df8:	beq	12bfc <__assert_fail@plt+0x1d58>
   12dfc:	b	12e0c <__assert_fail@plt+0x1f68>
   12e00:	nop	{0}
   12e04:	b	12e0c <__assert_fail@plt+0x1f68>
   12e08:	nop	{0}
   12e0c:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   12e10:	strb	r3, [fp, #-42]	; 0xffffffd6
   12e14:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12e18:	cmp	r3, #1
   12e1c:	bhi	12e40 <__assert_fail@plt+0x1f9c>
   12e20:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12e24:	cmp	r3, #0
   12e28:	beq	13178 <__assert_fail@plt+0x22d4>
   12e2c:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   12e30:	eor	r3, r3, #1
   12e34:	uxtb	r3, r3
   12e38:	cmp	r3, #0
   12e3c:	beq	13178 <__assert_fail@plt+0x22d4>
   12e40:	ldr	r2, [fp, #-16]
   12e44:	ldr	r3, [fp, #-48]	; 0xffffffd0
   12e48:	add	r3, r2, r3
   12e4c:	str	r3, [fp, #-68]	; 0xffffffbc
   12e50:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12e54:	cmp	r3, #0
   12e58:	beq	1300c <__assert_fail@plt+0x2168>
   12e5c:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   12e60:	eor	r3, r3, #1
   12e64:	uxtb	r3, r3
   12e68:	cmp	r3, #0
   12e6c:	beq	1300c <__assert_fail@plt+0x2168>
   12e70:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12e74:	cmp	r3, #0
   12e78:	bne	135e0 <__assert_fail@plt+0x273c>
   12e7c:	mov	r3, #1
   12e80:	strb	r3, [fp, #-41]	; 0xffffffd7
   12e84:	ldr	r3, [fp, #4]
   12e88:	cmp	r3, #2
   12e8c:	bne	12f3c <__assert_fail@plt+0x2098>
   12e90:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   12e94:	eor	r3, r3, #1
   12e98:	uxtb	r3, r3
   12e9c:	cmp	r3, #0
   12ea0:	beq	12f3c <__assert_fail@plt+0x2098>
   12ea4:	ldr	r2, [fp, #-20]	; 0xffffffec
   12ea8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12eac:	cmp	r2, r3
   12eb0:	bcs	12ec8 <__assert_fail@plt+0x2024>
   12eb4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12eb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ebc:	add	r3, r2, r3
   12ec0:	mov	r2, #39	; 0x27
   12ec4:	strb	r2, [r3]
   12ec8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ecc:	add	r3, r3, #1
   12ed0:	str	r3, [fp, #-20]	; 0xffffffec
   12ed4:	ldr	r2, [fp, #-20]	; 0xffffffec
   12ed8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12edc:	cmp	r2, r3
   12ee0:	bcs	12ef8 <__assert_fail@plt+0x2054>
   12ee4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12ee8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12eec:	add	r3, r2, r3
   12ef0:	mov	r2, #36	; 0x24
   12ef4:	strb	r2, [r3]
   12ef8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12efc:	add	r3, r3, #1
   12f00:	str	r3, [fp, #-20]	; 0xffffffec
   12f04:	ldr	r2, [fp, #-20]	; 0xffffffec
   12f08:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12f0c:	cmp	r2, r3
   12f10:	bcs	12f28 <__assert_fail@plt+0x2084>
   12f14:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12f18:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f1c:	add	r3, r2, r3
   12f20:	mov	r2, #39	; 0x27
   12f24:	strb	r2, [r3]
   12f28:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f2c:	add	r3, r3, #1
   12f30:	str	r3, [fp, #-20]	; 0xffffffec
   12f34:	mov	r3, #1
   12f38:	strb	r3, [fp, #-35]	; 0xffffffdd
   12f3c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12f40:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12f44:	cmp	r2, r3
   12f48:	bcs	12f60 <__assert_fail@plt+0x20bc>
   12f4c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12f50:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f54:	add	r3, r2, r3
   12f58:	mov	r2, #92	; 0x5c
   12f5c:	strb	r2, [r3]
   12f60:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f64:	add	r3, r3, #1
   12f68:	str	r3, [fp, #-20]	; 0xffffffec
   12f6c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12f70:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12f74:	cmp	r2, r3
   12f78:	bcs	12fa0 <__assert_fail@plt+0x20fc>
   12f7c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   12f80:	lsr	r3, r3, #6
   12f84:	uxtb	r2, r3
   12f88:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12f8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12f90:	add	r3, r1, r3
   12f94:	add	r2, r2, #48	; 0x30
   12f98:	uxtb	r2, r2
   12f9c:	strb	r2, [r3]
   12fa0:	ldr	r3, [fp, #-20]	; 0xffffffec
   12fa4:	add	r3, r3, #1
   12fa8:	str	r3, [fp, #-20]	; 0xffffffec
   12fac:	ldr	r2, [fp, #-20]	; 0xffffffec
   12fb0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12fb4:	cmp	r2, r3
   12fb8:	bcs	12fe8 <__assert_fail@plt+0x2144>
   12fbc:	ldrb	r3, [fp, #-38]	; 0xffffffda
   12fc0:	lsr	r3, r3, #3
   12fc4:	uxtb	r3, r3
   12fc8:	and	r3, r3, #7
   12fcc:	uxtb	r2, r3
   12fd0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12fd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   12fd8:	add	r3, r1, r3
   12fdc:	add	r2, r2, #48	; 0x30
   12fe0:	uxtb	r2, r2
   12fe4:	strb	r2, [r3]
   12fe8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12fec:	add	r3, r3, #1
   12ff0:	str	r3, [fp, #-20]	; 0xffffffec
   12ff4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   12ff8:	and	r3, r3, #7
   12ffc:	uxtb	r3, r3
   13000:	add	r3, r3, #48	; 0x30
   13004:	strb	r3, [fp, #-38]	; 0xffffffda
   13008:	b	13050 <__assert_fail@plt+0x21ac>
   1300c:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   13010:	cmp	r3, #0
   13014:	beq	13050 <__assert_fail@plt+0x21ac>
   13018:	ldr	r2, [fp, #-20]	; 0xffffffec
   1301c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13020:	cmp	r2, r3
   13024:	bcs	1303c <__assert_fail@plt+0x2198>
   13028:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1302c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13030:	add	r3, r2, r3
   13034:	mov	r2, #92	; 0x5c
   13038:	strb	r2, [r3]
   1303c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13040:	add	r3, r3, #1
   13044:	str	r3, [fp, #-20]	; 0xffffffec
   13048:	mov	r3, #0
   1304c:	strb	r3, [fp, #-40]	; 0xffffffd8
   13050:	ldr	r3, [fp, #-16]
   13054:	add	r3, r3, #1
   13058:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1305c:	cmp	r2, r3
   13060:	bls	13140 <__assert_fail@plt+0x229c>
   13064:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13068:	cmp	r3, #0
   1306c:	beq	130ec <__assert_fail@plt+0x2248>
   13070:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   13074:	eor	r3, r3, #1
   13078:	uxtb	r3, r3
   1307c:	cmp	r3, #0
   13080:	beq	130ec <__assert_fail@plt+0x2248>
   13084:	ldr	r2, [fp, #-20]	; 0xffffffec
   13088:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1308c:	cmp	r2, r3
   13090:	bcs	130a8 <__assert_fail@plt+0x2204>
   13094:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13098:	ldr	r3, [fp, #-20]	; 0xffffffec
   1309c:	add	r3, r2, r3
   130a0:	mov	r2, #39	; 0x27
   130a4:	strb	r2, [r3]
   130a8:	ldr	r3, [fp, #-20]	; 0xffffffec
   130ac:	add	r3, r3, #1
   130b0:	str	r3, [fp, #-20]	; 0xffffffec
   130b4:	ldr	r2, [fp, #-20]	; 0xffffffec
   130b8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   130bc:	cmp	r2, r3
   130c0:	bcs	130d8 <__assert_fail@plt+0x2234>
   130c4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   130c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   130cc:	add	r3, r2, r3
   130d0:	mov	r2, #39	; 0x27
   130d4:	strb	r2, [r3]
   130d8:	ldr	r3, [fp, #-20]	; 0xffffffec
   130dc:	add	r3, r3, #1
   130e0:	str	r3, [fp, #-20]	; 0xffffffec
   130e4:	mov	r3, #0
   130e8:	strb	r3, [fp, #-35]	; 0xffffffdd
   130ec:	ldr	r2, [fp, #-20]	; 0xffffffec
   130f0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   130f4:	cmp	r2, r3
   130f8:	bcs	13110 <__assert_fail@plt+0x226c>
   130fc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13100:	ldr	r3, [fp, #-20]	; 0xffffffec
   13104:	add	r3, r2, r3
   13108:	ldrb	r2, [fp, #-38]	; 0xffffffda
   1310c:	strb	r2, [r3]
   13110:	ldr	r3, [fp, #-20]	; 0xffffffec
   13114:	add	r3, r3, #1
   13118:	str	r3, [fp, #-20]	; 0xffffffec
   1311c:	ldr	r3, [fp, #-16]
   13120:	add	r3, r3, #1
   13124:	str	r3, [fp, #-16]
   13128:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1312c:	ldr	r3, [fp, #-16]
   13130:	add	r3, r2, r3
   13134:	ldrb	r3, [r3]
   13138:	strb	r3, [fp, #-38]	; 0xffffffda
   1313c:	b	12e50 <__assert_fail@plt+0x1fac>
   13140:	nop	{0}
   13144:	b	1331c <__assert_fail@plt+0x2478>
   13148:	nop	{0}
   1314c:	b	1317c <__assert_fail@plt+0x22d8>
   13150:	nop	{0}
   13154:	b	1317c <__assert_fail@plt+0x22d8>
   13158:	nop	{0}
   1315c:	b	1317c <__assert_fail@plt+0x22d8>
   13160:	nop	{0}
   13164:	b	1317c <__assert_fail@plt+0x22d8>
   13168:	nop	{0}
   1316c:	b	1317c <__assert_fail@plt+0x22d8>
   13170:	nop	{0}
   13174:	b	1317c <__assert_fail@plt+0x22d8>
   13178:	nop	{0}
   1317c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13180:	eor	r3, r3, #1
   13184:	uxtb	r3, r3
   13188:	cmp	r3, #0
   1318c:	bne	1319c <__assert_fail@plt+0x22f8>
   13190:	ldr	r3, [fp, #4]
   13194:	cmp	r3, #2
   13198:	bne	131b0 <__assert_fail@plt+0x230c>
   1319c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   131a0:	eor	r3, r3, #1
   131a4:	uxtb	r3, r3
   131a8:	cmp	r3, #0
   131ac:	bne	131f0 <__assert_fail@plt+0x234c>
   131b0:	ldr	r3, [fp, #12]
   131b4:	cmp	r3, #0
   131b8:	beq	131f0 <__assert_fail@plt+0x234c>
   131bc:	ldrb	r3, [fp, #-38]	; 0xffffffda
   131c0:	lsr	r3, r3, #5
   131c4:	uxtb	r3, r3
   131c8:	lsl	r3, r3, #2
   131cc:	ldr	r2, [fp, #12]
   131d0:	add	r3, r2, r3
   131d4:	ldr	r2, [r3]
   131d8:	ldrb	r3, [fp, #-38]	; 0xffffffda
   131dc:	and	r3, r3, #31
   131e0:	lsr	r3, r2, r3
   131e4:	and	r3, r3, #1
   131e8:	cmp	r3, #0
   131ec:	bne	13204 <__assert_fail@plt+0x2360>
   131f0:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   131f4:	eor	r3, r3, #1
   131f8:	uxtb	r3, r3
   131fc:	cmp	r3, #0
   13200:	bne	13318 <__assert_fail@plt+0x2474>
   13204:	nop	{0}
   13208:	ldrb	r3, [fp, #-34]	; 0xffffffde
   1320c:	cmp	r3, #0
   13210:	bne	135e8 <__assert_fail@plt+0x2744>
   13214:	mov	r3, #1
   13218:	strb	r3, [fp, #-41]	; 0xffffffd7
   1321c:	ldr	r3, [fp, #4]
   13220:	cmp	r3, #2
   13224:	bne	132d4 <__assert_fail@plt+0x2430>
   13228:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   1322c:	eor	r3, r3, #1
   13230:	uxtb	r3, r3
   13234:	cmp	r3, #0
   13238:	beq	132d4 <__assert_fail@plt+0x2430>
   1323c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13240:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13244:	cmp	r2, r3
   13248:	bcs	13260 <__assert_fail@plt+0x23bc>
   1324c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13250:	ldr	r3, [fp, #-20]	; 0xffffffec
   13254:	add	r3, r2, r3
   13258:	mov	r2, #39	; 0x27
   1325c:	strb	r2, [r3]
   13260:	ldr	r3, [fp, #-20]	; 0xffffffec
   13264:	add	r3, r3, #1
   13268:	str	r3, [fp, #-20]	; 0xffffffec
   1326c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13270:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13274:	cmp	r2, r3
   13278:	bcs	13290 <__assert_fail@plt+0x23ec>
   1327c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13280:	ldr	r3, [fp, #-20]	; 0xffffffec
   13284:	add	r3, r2, r3
   13288:	mov	r2, #36	; 0x24
   1328c:	strb	r2, [r3]
   13290:	ldr	r3, [fp, #-20]	; 0xffffffec
   13294:	add	r3, r3, #1
   13298:	str	r3, [fp, #-20]	; 0xffffffec
   1329c:	ldr	r2, [fp, #-20]	; 0xffffffec
   132a0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   132a4:	cmp	r2, r3
   132a8:	bcs	132c0 <__assert_fail@plt+0x241c>
   132ac:	ldr	r2, [fp, #-88]	; 0xffffffa8
   132b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   132b4:	add	r3, r2, r3
   132b8:	mov	r2, #39	; 0x27
   132bc:	strb	r2, [r3]
   132c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   132c4:	add	r3, r3, #1
   132c8:	str	r3, [fp, #-20]	; 0xffffffec
   132cc:	mov	r3, #1
   132d0:	strb	r3, [fp, #-35]	; 0xffffffdd
   132d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   132d8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   132dc:	cmp	r2, r3
   132e0:	bcs	132f8 <__assert_fail@plt+0x2454>
   132e4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   132e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   132ec:	add	r3, r2, r3
   132f0:	mov	r2, #92	; 0x5c
   132f4:	strb	r2, [r3]
   132f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   132fc:	add	r3, r3, #1
   13300:	str	r3, [fp, #-20]	; 0xffffffec
   13304:	b	1331c <__assert_fail@plt+0x2478>
   13308:	nop	{0}
   1330c:	b	1331c <__assert_fail@plt+0x2478>
   13310:	nop	{0}
   13314:	b	1331c <__assert_fail@plt+0x2478>
   13318:	nop	{0}
   1331c:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13320:	cmp	r3, #0
   13324:	beq	133a4 <__assert_fail@plt+0x2500>
   13328:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   1332c:	eor	r3, r3, #1
   13330:	uxtb	r3, r3
   13334:	cmp	r3, #0
   13338:	beq	133a4 <__assert_fail@plt+0x2500>
   1333c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13340:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13344:	cmp	r2, r3
   13348:	bcs	13360 <__assert_fail@plt+0x24bc>
   1334c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13350:	ldr	r3, [fp, #-20]	; 0xffffffec
   13354:	add	r3, r2, r3
   13358:	mov	r2, #39	; 0x27
   1335c:	strb	r2, [r3]
   13360:	ldr	r3, [fp, #-20]	; 0xffffffec
   13364:	add	r3, r3, #1
   13368:	str	r3, [fp, #-20]	; 0xffffffec
   1336c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13370:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13374:	cmp	r2, r3
   13378:	bcs	13390 <__assert_fail@plt+0x24ec>
   1337c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13380:	ldr	r3, [fp, #-20]	; 0xffffffec
   13384:	add	r3, r2, r3
   13388:	mov	r2, #39	; 0x27
   1338c:	strb	r2, [r3]
   13390:	ldr	r3, [fp, #-20]	; 0xffffffec
   13394:	add	r3, r3, #1
   13398:	str	r3, [fp, #-20]	; 0xffffffec
   1339c:	mov	r3, #0
   133a0:	strb	r3, [fp, #-35]	; 0xffffffdd
   133a4:	ldr	r2, [fp, #-20]	; 0xffffffec
   133a8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   133ac:	cmp	r2, r3
   133b0:	bcs	133c8 <__assert_fail@plt+0x2524>
   133b4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   133b8:	ldr	r3, [fp, #-20]	; 0xffffffec
   133bc:	add	r3, r2, r3
   133c0:	ldrb	r2, [fp, #-38]	; 0xffffffda
   133c4:	strb	r2, [r3]
   133c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   133cc:	add	r3, r3, #1
   133d0:	str	r3, [fp, #-20]	; 0xffffffec
   133d4:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   133d8:	eor	r3, r3, #1
   133dc:	uxtb	r3, r3
   133e0:	cmp	r3, #0
   133e4:	beq	133f0 <__assert_fail@plt+0x254c>
   133e8:	mov	r3, #0
   133ec:	strb	r3, [fp, #-37]	; 0xffffffdb
   133f0:	ldr	r3, [fp, #-16]
   133f4:	add	r3, r3, #1
   133f8:	str	r3, [fp, #-16]
   133fc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13400:	cmn	r3, #1
   13404:	bne	1342c <__assert_fail@plt+0x2588>
   13408:	ldr	r2, [fp, #-96]	; 0xffffffa0
   1340c:	ldr	r3, [fp, #-16]
   13410:	add	r3, r2, r3
   13414:	ldrb	r3, [r3]
   13418:	cmp	r3, #0
   1341c:	movne	r3, #1
   13420:	moveq	r3, #0
   13424:	uxtb	r3, r3
   13428:	b	13444 <__assert_fail@plt+0x25a0>
   1342c:	ldr	r2, [fp, #-16]
   13430:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13434:	cmp	r2, r3
   13438:	movne	r3, #1
   1343c:	moveq	r3, #0
   13440:	uxtb	r3, r3
   13444:	cmp	r3, #0
   13448:	bne	12264 <__assert_fail@plt+0x13c0>
   1344c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13450:	cmp	r3, #0
   13454:	bne	13470 <__assert_fail@plt+0x25cc>
   13458:	ldr	r3, [fp, #4]
   1345c:	cmp	r3, #2
   13460:	bne	13470 <__assert_fail@plt+0x25cc>
   13464:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13468:	cmp	r3, #0
   1346c:	bne	135f0 <__assert_fail@plt+0x274c>
   13470:	ldr	r3, [fp, #4]
   13474:	cmp	r3, #2
   13478:	bne	13518 <__assert_fail@plt+0x2674>
   1347c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13480:	eor	r3, r3, #1
   13484:	uxtb	r3, r3
   13488:	cmp	r3, #0
   1348c:	beq	13518 <__assert_fail@plt+0x2674>
   13490:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   13494:	cmp	r3, #0
   13498:	beq	13518 <__assert_fail@plt+0x2674>
   1349c:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   134a0:	cmp	r3, #0
   134a4:	beq	134ec <__assert_fail@plt+0x2648>
   134a8:	ldr	r3, [fp, #20]
   134ac:	str	r3, [sp, #16]
   134b0:	ldr	r3, [fp, #16]
   134b4:	str	r3, [sp, #12]
   134b8:	ldr	r3, [fp, #12]
   134bc:	str	r3, [sp, #8]
   134c0:	ldr	r3, [fp, #8]
   134c4:	str	r3, [sp, #4]
   134c8:	mov	r3, #5
   134cc:	str	r3, [sp]
   134d0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   134d4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   134d8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   134dc:	ldr	r0, [fp, #-88]	; 0xffffffa8
   134e0:	bl	11f9c <__assert_fail@plt+0x10f8>
   134e4:	mov	r3, r0
   134e8:	b	13658 <__assert_fail@plt+0x27b4>
   134ec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   134f0:	cmp	r3, #0
   134f4:	bne	13518 <__assert_fail@plt+0x2674>
   134f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   134fc:	cmp	r3, #0
   13500:	beq	13518 <__assert_fail@plt+0x2674>
   13504:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13508:	str	r3, [fp, #-92]	; 0xffffffa4
   1350c:	mov	r3, #0
   13510:	str	r3, [fp, #-20]	; 0xffffffec
   13514:	b	12030 <__assert_fail@plt+0x118c>
   13518:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1351c:	cmp	r3, #0
   13520:	beq	1358c <__assert_fail@plt+0x26e8>
   13524:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13528:	eor	r3, r3, #1
   1352c:	uxtb	r3, r3
   13530:	cmp	r3, #0
   13534:	beq	1358c <__assert_fail@plt+0x26e8>
   13538:	b	1357c <__assert_fail@plt+0x26d8>
   1353c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13540:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13544:	cmp	r2, r3
   13548:	bcs	13564 <__assert_fail@plt+0x26c0>
   1354c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13550:	ldr	r3, [fp, #-20]	; 0xffffffec
   13554:	add	r3, r2, r3
   13558:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1355c:	ldrb	r2, [r2]
   13560:	strb	r2, [r3]
   13564:	ldr	r3, [fp, #-20]	; 0xffffffec
   13568:	add	r3, r3, #1
   1356c:	str	r3, [fp, #-20]	; 0xffffffec
   13570:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13574:	add	r3, r3, #1
   13578:	str	r3, [fp, #-28]	; 0xffffffe4
   1357c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13580:	ldrb	r3, [r3]
   13584:	cmp	r3, #0
   13588:	bne	1353c <__assert_fail@plt+0x2698>
   1358c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13590:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13594:	cmp	r2, r3
   13598:	bcs	135b0 <__assert_fail@plt+0x270c>
   1359c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   135a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   135a4:	add	r3, r2, r3
   135a8:	mov	r2, #0
   135ac:	strb	r2, [r3]
   135b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   135b4:	b	13658 <__assert_fail@plt+0x27b4>
   135b8:	nop	{0}
   135bc:	b	135f4 <__assert_fail@plt+0x2750>
   135c0:	nop	{0}
   135c4:	b	135f4 <__assert_fail@plt+0x2750>
   135c8:	nop	{0}
   135cc:	b	135f4 <__assert_fail@plt+0x2750>
   135d0:	nop	{0}
   135d4:	b	135f4 <__assert_fail@plt+0x2750>
   135d8:	nop	{0}
   135dc:	b	135f4 <__assert_fail@plt+0x2750>
   135e0:	nop	{0}
   135e4:	b	135f4 <__assert_fail@plt+0x2750>
   135e8:	nop	{0}
   135ec:	b	135f4 <__assert_fail@plt+0x2750>
   135f0:	nop	{0}
   135f4:	ldr	r3, [fp, #4]
   135f8:	cmp	r3, #2
   135fc:	bne	13614 <__assert_fail@plt+0x2770>
   13600:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13604:	cmp	r3, #0
   13608:	beq	13614 <__assert_fail@plt+0x2770>
   1360c:	mov	r3, #4
   13610:	str	r3, [fp, #4]
   13614:	ldr	r3, [fp, #8]
   13618:	bic	r3, r3, #2
   1361c:	ldr	r2, [fp, #20]
   13620:	str	r2, [sp, #16]
   13624:	ldr	r2, [fp, #16]
   13628:	str	r2, [sp, #12]
   1362c:	mov	r2, #0
   13630:	str	r2, [sp, #8]
   13634:	str	r3, [sp, #4]
   13638:	ldr	r3, [fp, #4]
   1363c:	str	r3, [sp]
   13640:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13644:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13648:	ldr	r1, [fp, #-92]	; 0xffffffa4
   1364c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13650:	bl	11f9c <__assert_fail@plt+0x10f8>
   13654:	mov	r3, r0
   13658:	mov	r0, r3
   1365c:	sub	sp, fp, #8
   13660:	ldr	r4, [sp]
   13664:	ldr	fp, [sp, #4]
   13668:	add	sp, sp, #8
   1366c:	pop	{pc}		; (ldr pc, [sp], #4)
   13670:	str	fp, [sp, #-8]!
   13674:	str	lr, [sp, #4]
   13678:	add	fp, sp, #4
   1367c:	sub	sp, sp, #56	; 0x38
   13680:	str	r0, [fp, #-24]	; 0xffffffe8
   13684:	str	r1, [fp, #-28]	; 0xffffffe4
   13688:	str	r2, [fp, #-32]	; 0xffffffe0
   1368c:	str	r3, [fp, #-36]	; 0xffffffdc
   13690:	ldr	r3, [fp, #4]
   13694:	cmp	r3, #0
   13698:	beq	136a4 <__assert_fail@plt+0x2800>
   1369c:	ldr	r3, [fp, #4]
   136a0:	b	136ac <__assert_fail@plt+0x2808>
   136a4:	movw	r3, #33116	; 0x815c
   136a8:	movt	r3, #2
   136ac:	str	r3, [fp, #-8]
   136b0:	bl	10dfc <__errno_location@plt>
   136b4:	mov	r3, r0
   136b8:	ldr	r3, [r3]
   136bc:	str	r3, [fp, #-12]
   136c0:	ldr	r3, [fp, #-8]
   136c4:	ldr	r3, [r3]
   136c8:	ldr	r2, [fp, #-8]
   136cc:	ldr	r2, [r2, #4]
   136d0:	ldr	r1, [fp, #-8]
   136d4:	add	r1, r1, #8
   136d8:	ldr	r0, [fp, #-8]
   136dc:	ldr	r0, [r0, #40]	; 0x28
   136e0:	ldr	ip, [fp, #-8]
   136e4:	ldr	ip, [ip, #44]	; 0x2c
   136e8:	str	ip, [sp, #16]
   136ec:	str	r0, [sp, #12]
   136f0:	str	r1, [sp, #8]
   136f4:	str	r2, [sp, #4]
   136f8:	str	r3, [sp]
   136fc:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13700:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13704:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13708:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1370c:	bl	11f9c <__assert_fail@plt+0x10f8>
   13710:	str	r0, [fp, #-16]
   13714:	bl	10dfc <__errno_location@plt>
   13718:	mov	r2, r0
   1371c:	ldr	r3, [fp, #-12]
   13720:	str	r3, [r2]
   13724:	ldr	r3, [fp, #-16]
   13728:	mov	r0, r3
   1372c:	sub	sp, fp, #4
   13730:	ldr	fp, [sp]
   13734:	add	sp, sp, #4
   13738:	pop	{pc}		; (ldr pc, [sp], #4)
   1373c:	str	fp, [sp, #-8]!
   13740:	str	lr, [sp, #4]
   13744:	add	fp, sp, #4
   13748:	sub	sp, sp, #16
   1374c:	str	r0, [fp, #-8]
   13750:	str	r1, [fp, #-12]
   13754:	str	r2, [fp, #-16]
   13758:	ldr	r3, [fp, #-16]
   1375c:	mov	r2, #0
   13760:	ldr	r1, [fp, #-12]
   13764:	ldr	r0, [fp, #-8]
   13768:	bl	13784 <__assert_fail@plt+0x28e0>
   1376c:	mov	r3, r0
   13770:	mov	r0, r3
   13774:	sub	sp, fp, #4
   13778:	ldr	fp, [sp]
   1377c:	add	sp, sp, #4
   13780:	pop	{pc}		; (ldr pc, [sp], #4)
   13784:	str	fp, [sp, #-8]!
   13788:	str	lr, [sp, #4]
   1378c:	add	fp, sp, #4
   13790:	sub	sp, sp, #64	; 0x40
   13794:	str	r0, [fp, #-32]	; 0xffffffe0
   13798:	str	r1, [fp, #-36]	; 0xffffffdc
   1379c:	str	r2, [fp, #-40]	; 0xffffffd8
   137a0:	str	r3, [fp, #-44]	; 0xffffffd4
   137a4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   137a8:	cmp	r3, #0
   137ac:	beq	137b8 <__assert_fail@plt+0x2914>
   137b0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   137b4:	b	137c0 <__assert_fail@plt+0x291c>
   137b8:	movw	r3, #33116	; 0x815c
   137bc:	movt	r3, #2
   137c0:	str	r3, [fp, #-8]
   137c4:	bl	10dfc <__errno_location@plt>
   137c8:	mov	r3, r0
   137cc:	ldr	r3, [r3]
   137d0:	str	r3, [fp, #-12]
   137d4:	ldr	r3, [fp, #-8]
   137d8:	ldr	r3, [r3, #4]
   137dc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   137e0:	cmp	r2, #0
   137e4:	moveq	r2, #1
   137e8:	movne	r2, #0
   137ec:	uxtb	r2, r2
   137f0:	orr	r3, r3, r2
   137f4:	str	r3, [fp, #-16]
   137f8:	ldr	r3, [fp, #-8]
   137fc:	ldr	r3, [r3]
   13800:	ldr	r2, [fp, #-8]
   13804:	add	r2, r2, #8
   13808:	ldr	r1, [fp, #-8]
   1380c:	ldr	r1, [r1, #40]	; 0x28
   13810:	ldr	r0, [fp, #-8]
   13814:	ldr	r0, [r0, #44]	; 0x2c
   13818:	str	r0, [sp, #16]
   1381c:	str	r1, [sp, #12]
   13820:	str	r2, [sp, #8]
   13824:	ldr	r2, [fp, #-16]
   13828:	str	r2, [sp, #4]
   1382c:	str	r3, [sp]
   13830:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13834:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13838:	mov	r1, #0
   1383c:	mov	r0, #0
   13840:	bl	11f9c <__assert_fail@plt+0x10f8>
   13844:	mov	r3, r0
   13848:	add	r3, r3, #1
   1384c:	str	r3, [fp, #-20]	; 0xffffffec
   13850:	ldr	r0, [fp, #-20]	; 0xffffffec
   13854:	bl	14c94 <__assert_fail@plt+0x3df0>
   13858:	mov	r3, r0
   1385c:	str	r3, [fp, #-24]	; 0xffffffe8
   13860:	ldr	r3, [fp, #-8]
   13864:	ldr	r3, [r3]
   13868:	ldr	r2, [fp, #-8]
   1386c:	add	r2, r2, #8
   13870:	ldr	r1, [fp, #-8]
   13874:	ldr	r1, [r1, #40]	; 0x28
   13878:	ldr	r0, [fp, #-8]
   1387c:	ldr	r0, [r0, #44]	; 0x2c
   13880:	str	r0, [sp, #16]
   13884:	str	r1, [sp, #12]
   13888:	str	r2, [sp, #8]
   1388c:	ldr	r2, [fp, #-16]
   13890:	str	r2, [sp, #4]
   13894:	str	r3, [sp]
   13898:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1389c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   138a0:	ldr	r1, [fp, #-20]	; 0xffffffec
   138a4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   138a8:	bl	11f9c <__assert_fail@plt+0x10f8>
   138ac:	bl	10dfc <__errno_location@plt>
   138b0:	mov	r2, r0
   138b4:	ldr	r3, [fp, #-12]
   138b8:	str	r3, [r2]
   138bc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   138c0:	cmp	r3, #0
   138c4:	beq	138d8 <__assert_fail@plt+0x2a34>
   138c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   138cc:	sub	r2, r3, #1
   138d0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   138d4:	str	r2, [r3]
   138d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   138dc:	mov	r0, r3
   138e0:	sub	sp, fp, #4
   138e4:	ldr	fp, [sp]
   138e8:	add	sp, sp, #4
   138ec:	pop	{pc}		; (ldr pc, [sp], #4)
   138f0:	str	fp, [sp, #-8]!
   138f4:	str	lr, [sp, #4]
   138f8:	add	fp, sp, #4
   138fc:	sub	sp, sp, #8
   13900:	movw	r3, #33016	; 0x80f8
   13904:	movt	r3, #2
   13908:	ldr	r3, [r3]
   1390c:	str	r3, [fp, #-12]
   13910:	mov	r3, #1
   13914:	str	r3, [fp, #-8]
   13918:	b	13944 <__assert_fail@plt+0x2aa0>
   1391c:	ldr	r3, [fp, #-8]
   13920:	lsl	r3, r3, #3
   13924:	ldr	r2, [fp, #-12]
   13928:	add	r3, r2, r3
   1392c:	ldr	r3, [r3, #4]
   13930:	mov	r0, r3
   13934:	bl	169f8 <__assert_fail@plt+0x5b54>
   13938:	ldr	r3, [fp, #-8]
   1393c:	add	r3, r3, #1
   13940:	str	r3, [fp, #-8]
   13944:	movw	r3, #33004	; 0x80ec
   13948:	movt	r3, #2
   1394c:	ldr	r3, [r3]
   13950:	ldr	r2, [fp, #-8]
   13954:	cmp	r2, r3
   13958:	blt	1391c <__assert_fail@plt+0x2a78>
   1395c:	ldr	r3, [fp, #-12]
   13960:	ldr	r2, [r3, #4]
   13964:	movw	r3, #33164	; 0x818c
   13968:	movt	r3, #2
   1396c:	cmp	r2, r3
   13970:	beq	139a8 <__assert_fail@plt+0x2b04>
   13974:	ldr	r3, [fp, #-12]
   13978:	ldr	r3, [r3, #4]
   1397c:	mov	r0, r3
   13980:	bl	169f8 <__assert_fail@plt+0x5b54>
   13984:	movw	r3, #33008	; 0x80f0
   13988:	movt	r3, #2
   1398c:	mov	r2, #256	; 0x100
   13990:	str	r2, [r3]
   13994:	movw	r3, #33008	; 0x80f0
   13998:	movt	r3, #2
   1399c:	movw	r2, #33164	; 0x818c
   139a0:	movt	r2, #2
   139a4:	str	r2, [r3, #4]
   139a8:	ldr	r2, [fp, #-12]
   139ac:	movw	r3, #33008	; 0x80f0
   139b0:	movt	r3, #2
   139b4:	cmp	r2, r3
   139b8:	beq	139d8 <__assert_fail@plt+0x2b34>
   139bc:	ldr	r0, [fp, #-12]
   139c0:	bl	169f8 <__assert_fail@plt+0x5b54>
   139c4:	movw	r3, #33016	; 0x80f8
   139c8:	movt	r3, #2
   139cc:	movw	r2, #33008	; 0x80f0
   139d0:	movt	r2, #2
   139d4:	str	r2, [r3]
   139d8:	movw	r3, #33004	; 0x80ec
   139dc:	movt	r3, #2
   139e0:	mov	r2, #1
   139e4:	str	r2, [r3]
   139e8:	nop	{0}
   139ec:	sub	sp, fp, #4
   139f0:	ldr	fp, [sp]
   139f4:	add	sp, sp, #4
   139f8:	pop	{pc}		; (ldr pc, [sp], #4)
   139fc:	str	fp, [sp, #-8]!
   13a00:	str	lr, [sp, #4]
   13a04:	add	fp, sp, #4
   13a08:	sub	sp, sp, #80	; 0x50
   13a0c:	str	r0, [fp, #-48]	; 0xffffffd0
   13a10:	str	r1, [fp, #-52]	; 0xffffffcc
   13a14:	str	r2, [fp, #-56]	; 0xffffffc8
   13a18:	str	r3, [fp, #-60]	; 0xffffffc4
   13a1c:	bl	10dfc <__errno_location@plt>
   13a20:	mov	r3, r0
   13a24:	ldr	r3, [r3]
   13a28:	str	r3, [fp, #-16]
   13a2c:	movw	r3, #33016	; 0x80f8
   13a30:	movt	r3, #2
   13a34:	ldr	r3, [r3]
   13a38:	str	r3, [fp, #-8]
   13a3c:	mvn	r3, #-2147483648	; 0x80000000
   13a40:	str	r3, [fp, #-20]	; 0xffffffec
   13a44:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13a48:	cmp	r3, #0
   13a4c:	blt	13a60 <__assert_fail@plt+0x2bbc>
   13a50:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13a54:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a58:	cmp	r2, r3
   13a5c:	blt	13a64 <__assert_fail@plt+0x2bc0>
   13a60:	bl	10e98 <abort@plt>
   13a64:	movw	r3, #33004	; 0x80ec
   13a68:	movt	r3, #2
   13a6c:	ldr	r3, [r3]
   13a70:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13a74:	cmp	r2, r3
   13a78:	blt	13b70 <__assert_fail@plt+0x2ccc>
   13a7c:	ldr	r2, [fp, #-8]
   13a80:	movw	r3, #33008	; 0x80f0
   13a84:	movt	r3, #2
   13a88:	cmp	r2, r3
   13a8c:	moveq	r3, #1
   13a90:	movne	r3, #0
   13a94:	strb	r3, [fp, #-21]	; 0xffffffeb
   13a98:	movw	r3, #33004	; 0x80ec
   13a9c:	movt	r3, #2
   13aa0:	ldr	r3, [r3]
   13aa4:	str	r3, [fp, #-40]	; 0xffffffd8
   13aa8:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   13aac:	cmp	r3, #0
   13ab0:	beq	13abc <__assert_fail@plt+0x2c18>
   13ab4:	mov	r0, #0
   13ab8:	b	13ac0 <__assert_fail@plt+0x2c1c>
   13abc:	ldr	r0, [fp, #-8]
   13ac0:	movw	r3, #33004	; 0x80ec
   13ac4:	movt	r3, #2
   13ac8:	ldr	r3, [r3]
   13acc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13ad0:	sub	r3, r2, r3
   13ad4:	add	r2, r3, #1
   13ad8:	sub	r1, fp, #40	; 0x28
   13adc:	mov	r3, #8
   13ae0:	str	r3, [sp]
   13ae4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ae8:	bl	14ff4 <__assert_fail@plt+0x4150>
   13aec:	str	r0, [fp, #-8]
   13af0:	movw	r3, #33016	; 0x80f8
   13af4:	movt	r3, #2
   13af8:	ldr	r2, [fp, #-8]
   13afc:	str	r2, [r3]
   13b00:	ldrb	r3, [fp, #-21]	; 0xffffffeb
   13b04:	cmp	r3, #0
   13b08:	beq	13b24 <__assert_fail@plt+0x2c80>
   13b0c:	ldr	r2, [fp, #-8]
   13b10:	movw	r3, #33008	; 0x80f0
   13b14:	movt	r3, #2
   13b18:	mov	r1, r2
   13b1c:	ldrd	r2, [r3]
   13b20:	strd	r2, [r1]
   13b24:	movw	r3, #33004	; 0x80ec
   13b28:	movt	r3, #2
   13b2c:	ldr	r3, [r3]
   13b30:	lsl	r3, r3, #3
   13b34:	ldr	r2, [fp, #-8]
   13b38:	add	r0, r2, r3
   13b3c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13b40:	movw	r3, #33004	; 0x80ec
   13b44:	movt	r3, #2
   13b48:	ldr	r3, [r3]
   13b4c:	sub	r3, r2, r3
   13b50:	lsl	r3, r3, #3
   13b54:	mov	r2, r3
   13b58:	mov	r1, #0
   13b5c:	bl	10e14 <memset@plt>
   13b60:	ldr	r2, [fp, #-40]	; 0xffffffd8
   13b64:	movw	r3, #33004	; 0x80ec
   13b68:	movt	r3, #2
   13b6c:	str	r2, [r3]
   13b70:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13b74:	lsl	r3, r3, #3
   13b78:	ldr	r2, [fp, #-8]
   13b7c:	add	r3, r2, r3
   13b80:	ldr	r3, [r3]
   13b84:	str	r3, [fp, #-28]	; 0xffffffe4
   13b88:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13b8c:	lsl	r3, r3, #3
   13b90:	ldr	r2, [fp, #-8]
   13b94:	add	r3, r2, r3
   13b98:	ldr	r3, [r3, #4]
   13b9c:	str	r3, [fp, #-12]
   13ba0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13ba4:	ldr	r3, [r3, #4]
   13ba8:	orr	r3, r3, #1
   13bac:	str	r3, [fp, #-32]	; 0xffffffe0
   13bb0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13bb4:	ldr	r3, [r3]
   13bb8:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13bbc:	add	r2, r2, #8
   13bc0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13bc4:	ldr	r1, [r1, #40]	; 0x28
   13bc8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13bcc:	ldr	r0, [r0, #44]	; 0x2c
   13bd0:	str	r0, [sp, #16]
   13bd4:	str	r1, [sp, #12]
   13bd8:	str	r2, [sp, #8]
   13bdc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13be0:	str	r2, [sp, #4]
   13be4:	str	r3, [sp]
   13be8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13bec:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13bf0:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13bf4:	ldr	r0, [fp, #-12]
   13bf8:	bl	11f9c <__assert_fail@plt+0x10f8>
   13bfc:	str	r0, [fp, #-36]	; 0xffffffdc
   13c00:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13c04:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13c08:	cmp	r2, r3
   13c0c:	bhi	13cc4 <__assert_fail@plt+0x2e20>
   13c10:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13c14:	add	r3, r3, #1
   13c18:	str	r3, [fp, #-28]	; 0xffffffe4
   13c1c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13c20:	lsl	r3, r3, #3
   13c24:	ldr	r2, [fp, #-8]
   13c28:	add	r3, r2, r3
   13c2c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13c30:	str	r2, [r3]
   13c34:	ldr	r2, [fp, #-12]
   13c38:	movw	r3, #33164	; 0x818c
   13c3c:	movt	r3, #2
   13c40:	cmp	r2, r3
   13c44:	beq	13c50 <__assert_fail@plt+0x2dac>
   13c48:	ldr	r0, [fp, #-12]
   13c4c:	bl	169f8 <__assert_fail@plt+0x5b54>
   13c50:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13c54:	bl	14c94 <__assert_fail@plt+0x3df0>
   13c58:	mov	r3, r0
   13c5c:	str	r3, [fp, #-12]
   13c60:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13c64:	lsl	r3, r3, #3
   13c68:	ldr	r2, [fp, #-8]
   13c6c:	add	r3, r2, r3
   13c70:	ldr	r2, [fp, #-12]
   13c74:	str	r2, [r3, #4]
   13c78:	ldr	r3, [fp, #-60]	; 0xffffffc4
   13c7c:	ldr	r3, [r3]
   13c80:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13c84:	add	r2, r2, #8
   13c88:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13c8c:	ldr	r1, [r1, #40]	; 0x28
   13c90:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13c94:	ldr	r0, [r0, #44]	; 0x2c
   13c98:	str	r0, [sp, #16]
   13c9c:	str	r1, [sp, #12]
   13ca0:	str	r2, [sp, #8]
   13ca4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13ca8:	str	r2, [sp, #4]
   13cac:	str	r3, [sp]
   13cb0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13cb4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13cb8:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13cbc:	ldr	r0, [fp, #-12]
   13cc0:	bl	11f9c <__assert_fail@plt+0x10f8>
   13cc4:	bl	10dfc <__errno_location@plt>
   13cc8:	mov	r2, r0
   13ccc:	ldr	r3, [fp, #-16]
   13cd0:	str	r3, [r2]
   13cd4:	ldr	r3, [fp, #-12]
   13cd8:	mov	r0, r3
   13cdc:	sub	sp, fp, #4
   13ce0:	ldr	fp, [sp]
   13ce4:	add	sp, sp, #4
   13ce8:	pop	{pc}		; (ldr pc, [sp], #4)
   13cec:	str	fp, [sp, #-8]!
   13cf0:	str	lr, [sp, #4]
   13cf4:	add	fp, sp, #4
   13cf8:	sub	sp, sp, #8
   13cfc:	str	r0, [fp, #-8]
   13d00:	str	r1, [fp, #-12]
   13d04:	movw	r3, #33116	; 0x815c
   13d08:	movt	r3, #2
   13d0c:	mvn	r2, #0
   13d10:	ldr	r1, [fp, #-12]
   13d14:	ldr	r0, [fp, #-8]
   13d18:	bl	139fc <__assert_fail@plt+0x2b58>
   13d1c:	mov	r3, r0
   13d20:	mov	r0, r3
   13d24:	sub	sp, fp, #4
   13d28:	ldr	fp, [sp]
   13d2c:	add	sp, sp, #4
   13d30:	pop	{pc}		; (ldr pc, [sp], #4)
   13d34:	str	fp, [sp, #-8]!
   13d38:	str	lr, [sp, #4]
   13d3c:	add	fp, sp, #4
   13d40:	sub	sp, sp, #16
   13d44:	str	r0, [fp, #-8]
   13d48:	str	r1, [fp, #-12]
   13d4c:	str	r2, [fp, #-16]
   13d50:	movw	r3, #33116	; 0x815c
   13d54:	movt	r3, #2
   13d58:	ldr	r2, [fp, #-16]
   13d5c:	ldr	r1, [fp, #-12]
   13d60:	ldr	r0, [fp, #-8]
   13d64:	bl	139fc <__assert_fail@plt+0x2b58>
   13d68:	mov	r3, r0
   13d6c:	mov	r0, r3
   13d70:	sub	sp, fp, #4
   13d74:	ldr	fp, [sp]
   13d78:	add	sp, sp, #4
   13d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   13d80:	str	fp, [sp, #-8]!
   13d84:	str	lr, [sp, #4]
   13d88:	add	fp, sp, #4
   13d8c:	sub	sp, sp, #8
   13d90:	str	r0, [fp, #-8]
   13d94:	ldr	r1, [fp, #-8]
   13d98:	mov	r0, #0
   13d9c:	bl	13cec <__assert_fail@plt+0x2e48>
   13da0:	mov	r3, r0
   13da4:	mov	r0, r3
   13da8:	sub	sp, fp, #4
   13dac:	ldr	fp, [sp]
   13db0:	add	sp, sp, #4
   13db4:	pop	{pc}		; (ldr pc, [sp], #4)
   13db8:	str	fp, [sp, #-8]!
   13dbc:	str	lr, [sp, #4]
   13dc0:	add	fp, sp, #4
   13dc4:	sub	sp, sp, #8
   13dc8:	str	r0, [fp, #-8]
   13dcc:	str	r1, [fp, #-12]
   13dd0:	ldr	r2, [fp, #-12]
   13dd4:	ldr	r1, [fp, #-8]
   13dd8:	mov	r0, #0
   13ddc:	bl	13d34 <__assert_fail@plt+0x2e90>
   13de0:	mov	r3, r0
   13de4:	mov	r0, r3
   13de8:	sub	sp, fp, #4
   13dec:	ldr	fp, [sp]
   13df0:	add	sp, sp, #4
   13df4:	pop	{pc}		; (ldr pc, [sp], #4)
   13df8:	str	fp, [sp, #-8]!
   13dfc:	str	lr, [sp, #4]
   13e00:	add	fp, sp, #4
   13e04:	sub	sp, sp, #64	; 0x40
   13e08:	str	r0, [fp, #-56]	; 0xffffffc8
   13e0c:	str	r1, [fp, #-60]	; 0xffffffc4
   13e10:	str	r2, [fp, #-64]	; 0xffffffc0
   13e14:	sub	r3, fp, #52	; 0x34
   13e18:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13e1c:	mov	r0, r3
   13e20:	bl	11df8 <__assert_fail@plt+0xf54>
   13e24:	sub	r3, fp, #52	; 0x34
   13e28:	mvn	r2, #0
   13e2c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13e30:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13e34:	bl	139fc <__assert_fail@plt+0x2b58>
   13e38:	mov	r3, r0
   13e3c:	mov	r0, r3
   13e40:	sub	sp, fp, #4
   13e44:	ldr	fp, [sp]
   13e48:	add	sp, sp, #4
   13e4c:	pop	{pc}		; (ldr pc, [sp], #4)
   13e50:	str	fp, [sp, #-8]!
   13e54:	str	lr, [sp, #4]
   13e58:	add	fp, sp, #4
   13e5c:	sub	sp, sp, #64	; 0x40
   13e60:	str	r0, [fp, #-56]	; 0xffffffc8
   13e64:	str	r1, [fp, #-60]	; 0xffffffc4
   13e68:	str	r2, [fp, #-64]	; 0xffffffc0
   13e6c:	str	r3, [fp, #-68]	; 0xffffffbc
   13e70:	sub	r3, fp, #52	; 0x34
   13e74:	ldr	r1, [fp, #-60]	; 0xffffffc4
   13e78:	mov	r0, r3
   13e7c:	bl	11df8 <__assert_fail@plt+0xf54>
   13e80:	sub	r3, fp, #52	; 0x34
   13e84:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13e88:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13e8c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13e90:	bl	139fc <__assert_fail@plt+0x2b58>
   13e94:	mov	r3, r0
   13e98:	mov	r0, r3
   13e9c:	sub	sp, fp, #4
   13ea0:	ldr	fp, [sp]
   13ea4:	add	sp, sp, #4
   13ea8:	pop	{pc}		; (ldr pc, [sp], #4)
   13eac:	str	fp, [sp, #-8]!
   13eb0:	str	lr, [sp, #4]
   13eb4:	add	fp, sp, #4
   13eb8:	sub	sp, sp, #8
   13ebc:	str	r0, [fp, #-8]
   13ec0:	str	r1, [fp, #-12]
   13ec4:	ldr	r2, [fp, #-12]
   13ec8:	ldr	r1, [fp, #-8]
   13ecc:	mov	r0, #0
   13ed0:	bl	13df8 <__assert_fail@plt+0x2f54>
   13ed4:	mov	r3, r0
   13ed8:	mov	r0, r3
   13edc:	sub	sp, fp, #4
   13ee0:	ldr	fp, [sp]
   13ee4:	add	sp, sp, #4
   13ee8:	pop	{pc}		; (ldr pc, [sp], #4)
   13eec:	str	fp, [sp, #-8]!
   13ef0:	str	lr, [sp, #4]
   13ef4:	add	fp, sp, #4
   13ef8:	sub	sp, sp, #16
   13efc:	str	r0, [fp, #-8]
   13f00:	str	r1, [fp, #-12]
   13f04:	str	r2, [fp, #-16]
   13f08:	ldr	r3, [fp, #-16]
   13f0c:	ldr	r2, [fp, #-12]
   13f10:	ldr	r1, [fp, #-8]
   13f14:	mov	r0, #0
   13f18:	bl	13e50 <__assert_fail@plt+0x2fac>
   13f1c:	mov	r3, r0
   13f20:	mov	r0, r3
   13f24:	sub	sp, fp, #4
   13f28:	ldr	fp, [sp]
   13f2c:	add	sp, sp, #4
   13f30:	pop	{pc}		; (ldr pc, [sp], #4)
   13f34:	str	fp, [sp, #-8]!
   13f38:	str	lr, [sp, #4]
   13f3c:	add	fp, sp, #4
   13f40:	sub	sp, sp, #64	; 0x40
   13f44:	str	r0, [fp, #-56]	; 0xffffffc8
   13f48:	str	r1, [fp, #-60]	; 0xffffffc4
   13f4c:	mov	r3, r2
   13f50:	strb	r3, [fp, #-61]	; 0xffffffc3
   13f54:	movw	r2, #33116	; 0x815c
   13f58:	movt	r2, #2
   13f5c:	sub	r3, fp, #52	; 0x34
   13f60:	ldrd	r0, [r2]
   13f64:	strd	r0, [r3]
   13f68:	ldrd	r0, [r2, #8]
   13f6c:	strd	r0, [r3, #8]
   13f70:	ldrd	r0, [r2, #16]
   13f74:	strd	r0, [r3, #16]
   13f78:	ldrd	r0, [r2, #24]
   13f7c:	strd	r0, [r3, #24]
   13f80:	ldrd	r0, [r2, #32]
   13f84:	strd	r0, [r3, #32]
   13f88:	ldrd	r0, [r2, #40]	; 0x28
   13f8c:	strd	r0, [r3, #40]	; 0x28
   13f90:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   13f94:	sub	r3, fp, #52	; 0x34
   13f98:	mov	r2, #1
   13f9c:	mov	r0, r3
   13fa0:	bl	11c58 <__assert_fail@plt+0xdb4>
   13fa4:	sub	r3, fp, #52	; 0x34
   13fa8:	ldr	r2, [fp, #-60]	; 0xffffffc4
   13fac:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13fb0:	mov	r0, #0
   13fb4:	bl	139fc <__assert_fail@plt+0x2b58>
   13fb8:	mov	r3, r0
   13fbc:	mov	r0, r3
   13fc0:	sub	sp, fp, #4
   13fc4:	ldr	fp, [sp]
   13fc8:	add	sp, sp, #4
   13fcc:	pop	{pc}		; (ldr pc, [sp], #4)
   13fd0:	str	fp, [sp, #-8]!
   13fd4:	str	lr, [sp, #4]
   13fd8:	add	fp, sp, #4
   13fdc:	sub	sp, sp, #8
   13fe0:	str	r0, [fp, #-8]
   13fe4:	mov	r3, r1
   13fe8:	strb	r3, [fp, #-9]
   13fec:	ldrb	r3, [fp, #-9]
   13ff0:	mov	r2, r3
   13ff4:	mvn	r1, #0
   13ff8:	ldr	r0, [fp, #-8]
   13ffc:	bl	13f34 <__assert_fail@plt+0x3090>
   14000:	mov	r3, r0
   14004:	mov	r0, r3
   14008:	sub	sp, fp, #4
   1400c:	ldr	fp, [sp]
   14010:	add	sp, sp, #4
   14014:	pop	{pc}		; (ldr pc, [sp], #4)
   14018:	str	fp, [sp, #-8]!
   1401c:	str	lr, [sp, #4]
   14020:	add	fp, sp, #4
   14024:	sub	sp, sp, #8
   14028:	str	r0, [fp, #-8]
   1402c:	mov	r1, #58	; 0x3a
   14030:	ldr	r0, [fp, #-8]
   14034:	bl	13fd0 <__assert_fail@plt+0x312c>
   14038:	mov	r3, r0
   1403c:	mov	r0, r3
   14040:	sub	sp, fp, #4
   14044:	ldr	fp, [sp]
   14048:	add	sp, sp, #4
   1404c:	pop	{pc}		; (ldr pc, [sp], #4)
   14050:	str	fp, [sp, #-8]!
   14054:	str	lr, [sp, #4]
   14058:	add	fp, sp, #4
   1405c:	sub	sp, sp, #8
   14060:	str	r0, [fp, #-8]
   14064:	str	r1, [fp, #-12]
   14068:	mov	r2, #58	; 0x3a
   1406c:	ldr	r1, [fp, #-12]
   14070:	ldr	r0, [fp, #-8]
   14074:	bl	13f34 <__assert_fail@plt+0x3090>
   14078:	mov	r3, r0
   1407c:	mov	r0, r3
   14080:	sub	sp, fp, #4
   14084:	ldr	fp, [sp]
   14088:	add	sp, sp, #4
   1408c:	pop	{pc}		; (ldr pc, [sp], #4)
   14090:	str	fp, [sp, #-8]!
   14094:	str	lr, [sp, #4]
   14098:	add	fp, sp, #4
   1409c:	sub	sp, sp, #112	; 0x70
   140a0:	str	r0, [fp, #-56]	; 0xffffffc8
   140a4:	str	r1, [fp, #-60]	; 0xffffffc4
   140a8:	str	r2, [fp, #-64]	; 0xffffffc0
   140ac:	sub	r3, fp, #116	; 0x74
   140b0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   140b4:	mov	r0, r3
   140b8:	bl	11df8 <__assert_fail@plt+0xf54>
   140bc:	sub	r3, fp, #52	; 0x34
   140c0:	sub	r2, fp, #116	; 0x74
   140c4:	ldrd	r0, [r2]
   140c8:	strd	r0, [r3]
   140cc:	ldrd	r0, [r2, #8]
   140d0:	strd	r0, [r3, #8]
   140d4:	ldrd	r0, [r2, #16]
   140d8:	strd	r0, [r3, #16]
   140dc:	ldrd	r0, [r2, #24]
   140e0:	strd	r0, [r3, #24]
   140e4:	ldrd	r0, [r2, #32]
   140e8:	strd	r0, [r3, #32]
   140ec:	ldrd	r0, [r2, #40]	; 0x28
   140f0:	strd	r0, [r3, #40]	; 0x28
   140f4:	sub	r3, fp, #52	; 0x34
   140f8:	mov	r2, #1
   140fc:	mov	r1, #58	; 0x3a
   14100:	mov	r0, r3
   14104:	bl	11c58 <__assert_fail@plt+0xdb4>
   14108:	sub	r3, fp, #52	; 0x34
   1410c:	mvn	r2, #0
   14110:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14114:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14118:	bl	139fc <__assert_fail@plt+0x2b58>
   1411c:	mov	r3, r0
   14120:	mov	r0, r3
   14124:	sub	sp, fp, #4
   14128:	ldr	fp, [sp]
   1412c:	add	sp, sp, #4
   14130:	pop	{pc}		; (ldr pc, [sp], #4)
   14134:	str	fp, [sp, #-8]!
   14138:	str	lr, [sp, #4]
   1413c:	add	fp, sp, #4
   14140:	sub	sp, sp, #24
   14144:	str	r0, [fp, #-8]
   14148:	str	r1, [fp, #-12]
   1414c:	str	r2, [fp, #-16]
   14150:	str	r3, [fp, #-20]	; 0xffffffec
   14154:	mvn	r3, #0
   14158:	str	r3, [sp]
   1415c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14160:	ldr	r2, [fp, #-16]
   14164:	ldr	r1, [fp, #-12]
   14168:	ldr	r0, [fp, #-8]
   1416c:	bl	14188 <__assert_fail@plt+0x32e4>
   14170:	mov	r3, r0
   14174:	mov	r0, r3
   14178:	sub	sp, fp, #4
   1417c:	ldr	fp, [sp]
   14180:	add	sp, sp, #4
   14184:	pop	{pc}		; (ldr pc, [sp], #4)
   14188:	str	fp, [sp, #-8]!
   1418c:	str	lr, [sp, #4]
   14190:	add	fp, sp, #4
   14194:	sub	sp, sp, #64	; 0x40
   14198:	str	r0, [fp, #-56]	; 0xffffffc8
   1419c:	str	r1, [fp, #-60]	; 0xffffffc4
   141a0:	str	r2, [fp, #-64]	; 0xffffffc0
   141a4:	str	r3, [fp, #-68]	; 0xffffffbc
   141a8:	movw	r2, #33116	; 0x815c
   141ac:	movt	r2, #2
   141b0:	sub	r3, fp, #52	; 0x34
   141b4:	ldrd	r0, [r2]
   141b8:	strd	r0, [r3]
   141bc:	ldrd	r0, [r2, #8]
   141c0:	strd	r0, [r3, #8]
   141c4:	ldrd	r0, [r2, #16]
   141c8:	strd	r0, [r3, #16]
   141cc:	ldrd	r0, [r2, #24]
   141d0:	strd	r0, [r3, #24]
   141d4:	ldrd	r0, [r2, #32]
   141d8:	strd	r0, [r3, #32]
   141dc:	ldrd	r0, [r2, #40]	; 0x28
   141e0:	strd	r0, [r3, #40]	; 0x28
   141e4:	sub	r3, fp, #52	; 0x34
   141e8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   141ec:	ldr	r1, [fp, #-60]	; 0xffffffc4
   141f0:	mov	r0, r3
   141f4:	bl	11d70 <__assert_fail@plt+0xecc>
   141f8:	sub	r3, fp, #52	; 0x34
   141fc:	ldr	r2, [fp, #4]
   14200:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14204:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14208:	bl	139fc <__assert_fail@plt+0x2b58>
   1420c:	mov	r3, r0
   14210:	mov	r0, r3
   14214:	sub	sp, fp, #4
   14218:	ldr	fp, [sp]
   1421c:	add	sp, sp, #4
   14220:	pop	{pc}		; (ldr pc, [sp], #4)
   14224:	str	fp, [sp, #-8]!
   14228:	str	lr, [sp, #4]
   1422c:	add	fp, sp, #4
   14230:	sub	sp, sp, #16
   14234:	str	r0, [fp, #-8]
   14238:	str	r1, [fp, #-12]
   1423c:	str	r2, [fp, #-16]
   14240:	ldr	r3, [fp, #-16]
   14244:	ldr	r2, [fp, #-12]
   14248:	ldr	r1, [fp, #-8]
   1424c:	mov	r0, #0
   14250:	bl	14134 <__assert_fail@plt+0x3290>
   14254:	mov	r3, r0
   14258:	mov	r0, r3
   1425c:	sub	sp, fp, #4
   14260:	ldr	fp, [sp]
   14264:	add	sp, sp, #4
   14268:	pop	{pc}		; (ldr pc, [sp], #4)
   1426c:	str	fp, [sp, #-8]!
   14270:	str	lr, [sp, #4]
   14274:	add	fp, sp, #4
   14278:	sub	sp, sp, #24
   1427c:	str	r0, [fp, #-8]
   14280:	str	r1, [fp, #-12]
   14284:	str	r2, [fp, #-16]
   14288:	str	r3, [fp, #-20]	; 0xffffffec
   1428c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14290:	str	r3, [sp]
   14294:	ldr	r3, [fp, #-16]
   14298:	ldr	r2, [fp, #-12]
   1429c:	ldr	r1, [fp, #-8]
   142a0:	mov	r0, #0
   142a4:	bl	14188 <__assert_fail@plt+0x32e4>
   142a8:	mov	r3, r0
   142ac:	mov	r0, r3
   142b0:	sub	sp, fp, #4
   142b4:	ldr	fp, [sp]
   142b8:	add	sp, sp, #4
   142bc:	pop	{pc}		; (ldr pc, [sp], #4)
   142c0:	str	fp, [sp, #-8]!
   142c4:	str	lr, [sp, #4]
   142c8:	add	fp, sp, #4
   142cc:	sub	sp, sp, #16
   142d0:	str	r0, [fp, #-8]
   142d4:	str	r1, [fp, #-12]
   142d8:	str	r2, [fp, #-16]
   142dc:	movw	r3, #33020	; 0x80fc
   142e0:	movt	r3, #2
   142e4:	ldr	r2, [fp, #-16]
   142e8:	ldr	r1, [fp, #-12]
   142ec:	ldr	r0, [fp, #-8]
   142f0:	bl	139fc <__assert_fail@plt+0x2b58>
   142f4:	mov	r3, r0
   142f8:	mov	r0, r3
   142fc:	sub	sp, fp, #4
   14300:	ldr	fp, [sp]
   14304:	add	sp, sp, #4
   14308:	pop	{pc}		; (ldr pc, [sp], #4)
   1430c:	str	fp, [sp, #-8]!
   14310:	str	lr, [sp, #4]
   14314:	add	fp, sp, #4
   14318:	sub	sp, sp, #8
   1431c:	str	r0, [fp, #-8]
   14320:	str	r1, [fp, #-12]
   14324:	ldr	r2, [fp, #-12]
   14328:	ldr	r1, [fp, #-8]
   1432c:	mov	r0, #0
   14330:	bl	142c0 <__assert_fail@plt+0x341c>
   14334:	mov	r3, r0
   14338:	mov	r0, r3
   1433c:	sub	sp, fp, #4
   14340:	ldr	fp, [sp]
   14344:	add	sp, sp, #4
   14348:	pop	{pc}		; (ldr pc, [sp], #4)
   1434c:	str	fp, [sp, #-8]!
   14350:	str	lr, [sp, #4]
   14354:	add	fp, sp, #4
   14358:	sub	sp, sp, #8
   1435c:	str	r0, [fp, #-8]
   14360:	str	r1, [fp, #-12]
   14364:	mvn	r2, #0
   14368:	ldr	r1, [fp, #-12]
   1436c:	ldr	r0, [fp, #-8]
   14370:	bl	142c0 <__assert_fail@plt+0x341c>
   14374:	mov	r3, r0
   14378:	mov	r0, r3
   1437c:	sub	sp, fp, #4
   14380:	ldr	fp, [sp]
   14384:	add	sp, sp, #4
   14388:	pop	{pc}		; (ldr pc, [sp], #4)
   1438c:	str	fp, [sp, #-8]!
   14390:	str	lr, [sp, #4]
   14394:	add	fp, sp, #4
   14398:	sub	sp, sp, #8
   1439c:	str	r0, [fp, #-8]
   143a0:	ldr	r1, [fp, #-8]
   143a4:	mov	r0, #0
   143a8:	bl	1434c <__assert_fail@plt+0x34a8>
   143ac:	mov	r3, r0
   143b0:	mov	r0, r3
   143b4:	sub	sp, fp, #4
   143b8:	ldr	fp, [sp]
   143bc:	add	sp, sp, #4
   143c0:	pop	{pc}		; (ldr pc, [sp], #4)
   143c4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   143c8:	strd	r6, [sp, #8]
   143cc:	str	fp, [sp, #16]
   143d0:	str	lr, [sp, #20]
   143d4:	add	fp, sp, #20
   143d8:	sub	sp, sp, #48	; 0x30
   143dc:	str	r0, [fp, #-24]	; 0xffffffe8
   143e0:	str	r1, [fp, #-28]	; 0xffffffe4
   143e4:	str	r2, [fp, #-32]	; 0xffffffe0
   143e8:	str	r3, [fp, #-36]	; 0xffffffdc
   143ec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   143f0:	cmp	r3, #0
   143f4:	beq	1441c <__assert_fail@plt+0x3578>
   143f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   143fc:	str	r3, [sp]
   14400:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14404:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14408:	movw	r1, #30496	; 0x7720
   1440c:	movt	r1, #1
   14410:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14414:	bl	10df0 <fprintf@plt>
   14418:	b	14434 <__assert_fail@plt+0x3590>
   1441c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14420:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14424:	movw	r1, #30508	; 0x772c
   14428:	movt	r1, #1
   1442c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14430:	bl	10df0 <fprintf@plt>
   14434:	movw	r0, #30516	; 0x7734
   14438:	movt	r0, #1
   1443c:	bl	10dc0 <gettext@plt>
   14440:	mov	r2, r0
   14444:	movw	r3, #2022	; 0x7e6
   14448:	movw	r1, #31300	; 0x7a44
   1444c:	movt	r1, #1
   14450:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14454:	bl	10df0 <fprintf@plt>
   14458:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1445c:	mov	r0, #10
   14460:	bl	10cd0 <fputc_unlocked@plt>
   14464:	movw	r0, #30520	; 0x7738
   14468:	movt	r0, #1
   1446c:	bl	10dc0 <gettext@plt>
   14470:	mov	r3, r0
   14474:	movw	r2, #30692	; 0x77e4
   14478:	movt	r2, #1
   1447c:	mov	r1, r3
   14480:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14484:	bl	10df0 <fprintf@plt>
   14488:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1448c:	mov	r0, #10
   14490:	bl	10cd0 <fputc_unlocked@plt>
   14494:	ldr	r3, [fp, #8]
   14498:	cmp	r3, #9
   1449c:	ldrls	pc, [pc, r3, lsl #2]
   144a0:	b	14880 <__assert_fail@plt+0x39dc>
   144a4:	andeq	r4, r1, ip, lsr #18
   144a8:	andeq	r4, r1, ip, asr #9
   144ac:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144b0:	andeq	r4, r1, r4, lsr #10
   144b4:	andeq	r4, r1, r8, ror #10
   144b8:	andeq	r4, r1, r4, asr #11
   144bc:	andeq	r4, r1, r0, lsr r6
   144c0:	andeq	r4, r1, ip, lsr #13
   144c4:	andeq	r4, r1, r8, lsr r7
   144c8:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   144cc:	movw	r0, #30728	; 0x7808
   144d0:	movt	r0, #1
   144d4:	bl	10dc0 <gettext@plt>
   144d8:	mov	r1, r0
   144dc:	ldr	r3, [fp, #4]
   144e0:	ldr	r3, [r3]
   144e4:	mov	r2, r3
   144e8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   144ec:	bl	10df0 <fprintf@plt>
   144f0:	b	14930 <__assert_fail@plt+0x3a8c>
   144f4:	movw	r0, #30744	; 0x7818
   144f8:	movt	r0, #1
   144fc:	bl	10dc0 <gettext@plt>
   14500:	mov	r1, r0
   14504:	ldr	r3, [fp, #4]
   14508:	ldr	r2, [r3]
   1450c:	ldr	r3, [fp, #4]
   14510:	add	r3, r3, #4
   14514:	ldr	r3, [r3]
   14518:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1451c:	bl	10df0 <fprintf@plt>
   14520:	b	14930 <__assert_fail@plt+0x3a8c>
   14524:	movw	r0, #30768	; 0x7830
   14528:	movt	r0, #1
   1452c:	bl	10dc0 <gettext@plt>
   14530:	ldr	r3, [fp, #4]
   14534:	ldr	r2, [r3]
   14538:	ldr	r3, [fp, #4]
   1453c:	add	r3, r3, #4
   14540:	ldr	r1, [r3]
   14544:	ldr	r3, [fp, #4]
   14548:	add	r3, r3, #8
   1454c:	ldr	r3, [r3]
   14550:	str	r3, [sp]
   14554:	mov	r3, r1
   14558:	mov	r1, r0
   1455c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14560:	bl	10df0 <fprintf@plt>
   14564:	b	14930 <__assert_fail@plt+0x3a8c>
   14568:	movw	r0, #30796	; 0x784c
   1456c:	movt	r0, #1
   14570:	bl	10dc0 <gettext@plt>
   14574:	mov	ip, r0
   14578:	ldr	r3, [fp, #4]
   1457c:	ldr	r1, [r3]
   14580:	ldr	r3, [fp, #4]
   14584:	add	r3, r3, #4
   14588:	ldr	r0, [r3]
   1458c:	ldr	r3, [fp, #4]
   14590:	add	r3, r3, #8
   14594:	ldr	r3, [r3]
   14598:	ldr	r2, [fp, #4]
   1459c:	add	r2, r2, #12
   145a0:	ldr	r2, [r2]
   145a4:	str	r2, [sp, #4]
   145a8:	str	r3, [sp]
   145ac:	mov	r3, r0
   145b0:	mov	r2, r1
   145b4:	mov	r1, ip
   145b8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   145bc:	bl	10df0 <fprintf@plt>
   145c0:	b	14930 <__assert_fail@plt+0x3a8c>
   145c4:	movw	r0, #30828	; 0x786c
   145c8:	movt	r0, #1
   145cc:	bl	10dc0 <gettext@plt>
   145d0:	mov	lr, r0
   145d4:	ldr	r3, [fp, #4]
   145d8:	ldr	r0, [r3]
   145dc:	ldr	r3, [fp, #4]
   145e0:	add	r3, r3, #4
   145e4:	ldr	ip, [r3]
   145e8:	ldr	r3, [fp, #4]
   145ec:	add	r3, r3, #8
   145f0:	ldr	r3, [r3]
   145f4:	ldr	r2, [fp, #4]
   145f8:	add	r2, r2, #12
   145fc:	ldr	r2, [r2]
   14600:	ldr	r1, [fp, #4]
   14604:	add	r1, r1, #16
   14608:	ldr	r1, [r1]
   1460c:	str	r1, [sp, #8]
   14610:	str	r2, [sp, #4]
   14614:	str	r3, [sp]
   14618:	mov	r3, ip
   1461c:	mov	r2, r0
   14620:	mov	r1, lr
   14624:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14628:	bl	10df0 <fprintf@plt>
   1462c:	b	14930 <__assert_fail@plt+0x3a8c>
   14630:	movw	r0, #30864	; 0x7890
   14634:	movt	r0, #1
   14638:	bl	10dc0 <gettext@plt>
   1463c:	mov	r4, r0
   14640:	ldr	r3, [fp, #4]
   14644:	ldr	ip, [r3]
   14648:	ldr	r3, [fp, #4]
   1464c:	add	r3, r3, #4
   14650:	ldr	lr, [r3]
   14654:	ldr	r3, [fp, #4]
   14658:	add	r3, r3, #8
   1465c:	ldr	r3, [r3]
   14660:	ldr	r2, [fp, #4]
   14664:	add	r2, r2, #12
   14668:	ldr	r2, [r2]
   1466c:	ldr	r1, [fp, #4]
   14670:	add	r1, r1, #16
   14674:	ldr	r1, [r1]
   14678:	ldr	r0, [fp, #4]
   1467c:	add	r0, r0, #20
   14680:	ldr	r0, [r0]
   14684:	str	r0, [sp, #12]
   14688:	str	r1, [sp, #8]
   1468c:	str	r2, [sp, #4]
   14690:	str	r3, [sp]
   14694:	mov	r3, lr
   14698:	mov	r2, ip
   1469c:	mov	r1, r4
   146a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   146a4:	bl	10df0 <fprintf@plt>
   146a8:	b	14930 <__assert_fail@plt+0x3a8c>
   146ac:	movw	r0, #30904	; 0x78b8
   146b0:	movt	r0, #1
   146b4:	bl	10dc0 <gettext@plt>
   146b8:	mov	r5, r0
   146bc:	ldr	r3, [fp, #4]
   146c0:	ldr	lr, [r3]
   146c4:	ldr	r3, [fp, #4]
   146c8:	add	r3, r3, #4
   146cc:	ldr	r4, [r3]
   146d0:	ldr	r3, [fp, #4]
   146d4:	add	r3, r3, #8
   146d8:	ldr	r3, [r3]
   146dc:	ldr	r2, [fp, #4]
   146e0:	add	r2, r2, #12
   146e4:	ldr	r2, [r2]
   146e8:	ldr	r1, [fp, #4]
   146ec:	add	r1, r1, #16
   146f0:	ldr	r1, [r1]
   146f4:	ldr	r0, [fp, #4]
   146f8:	add	r0, r0, #20
   146fc:	ldr	r0, [r0]
   14700:	ldr	ip, [fp, #4]
   14704:	add	ip, ip, #24
   14708:	ldr	ip, [ip]
   1470c:	str	ip, [sp, #16]
   14710:	str	r0, [sp, #12]
   14714:	str	r1, [sp, #8]
   14718:	str	r2, [sp, #4]
   1471c:	str	r3, [sp]
   14720:	mov	r3, r4
   14724:	mov	r2, lr
   14728:	mov	r1, r5
   1472c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14730:	bl	10df0 <fprintf@plt>
   14734:	b	14930 <__assert_fail@plt+0x3a8c>
   14738:	movw	r0, #30948	; 0x78e4
   1473c:	movt	r0, #1
   14740:	bl	10dc0 <gettext@plt>
   14744:	mov	r6, r0
   14748:	ldr	r3, [fp, #4]
   1474c:	ldr	r4, [r3]
   14750:	ldr	r3, [fp, #4]
   14754:	add	r3, r3, #4
   14758:	ldr	r5, [r3]
   1475c:	ldr	r3, [fp, #4]
   14760:	add	r3, r3, #8
   14764:	ldr	r3, [r3]
   14768:	ldr	r2, [fp, #4]
   1476c:	add	r2, r2, #12
   14770:	ldr	r2, [r2]
   14774:	ldr	r1, [fp, #4]
   14778:	add	r1, r1, #16
   1477c:	ldr	r1, [r1]
   14780:	ldr	r0, [fp, #4]
   14784:	add	r0, r0, #20
   14788:	ldr	r0, [r0]
   1478c:	ldr	ip, [fp, #4]
   14790:	add	ip, ip, #24
   14794:	ldr	ip, [ip]
   14798:	ldr	lr, [fp, #4]
   1479c:	add	lr, lr, #28
   147a0:	ldr	lr, [lr]
   147a4:	str	lr, [sp, #20]
   147a8:	str	ip, [sp, #16]
   147ac:	str	r0, [sp, #12]
   147b0:	str	r1, [sp, #8]
   147b4:	str	r2, [sp, #4]
   147b8:	str	r3, [sp]
   147bc:	mov	r3, r5
   147c0:	mov	r2, r4
   147c4:	mov	r1, r6
   147c8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   147cc:	bl	10df0 <fprintf@plt>
   147d0:	b	14930 <__assert_fail@plt+0x3a8c>
   147d4:	movw	r0, #30996	; 0x7914
   147d8:	movt	r0, #1
   147dc:	bl	10dc0 <gettext@plt>
   147e0:	mov	r7, r0
   147e4:	ldr	r3, [fp, #4]
   147e8:	ldr	r5, [r3]
   147ec:	ldr	r3, [fp, #4]
   147f0:	add	r3, r3, #4
   147f4:	ldr	r6, [r3]
   147f8:	ldr	r3, [fp, #4]
   147fc:	add	r3, r3, #8
   14800:	ldr	r3, [r3]
   14804:	ldr	r2, [fp, #4]
   14808:	add	r2, r2, #12
   1480c:	ldr	r2, [r2]
   14810:	ldr	r1, [fp, #4]
   14814:	add	r1, r1, #16
   14818:	ldr	r1, [r1]
   1481c:	ldr	r0, [fp, #4]
   14820:	add	r0, r0, #20
   14824:	ldr	r0, [r0]
   14828:	ldr	ip, [fp, #4]
   1482c:	add	ip, ip, #24
   14830:	ldr	ip, [ip]
   14834:	ldr	lr, [fp, #4]
   14838:	add	lr, lr, #28
   1483c:	ldr	lr, [lr]
   14840:	ldr	r4, [fp, #4]
   14844:	add	r4, r4, #32
   14848:	ldr	r4, [r4]
   1484c:	str	r4, [sp, #24]
   14850:	str	lr, [sp, #20]
   14854:	str	ip, [sp, #16]
   14858:	str	r0, [sp, #12]
   1485c:	str	r1, [sp, #8]
   14860:	str	r2, [sp, #4]
   14864:	str	r3, [sp]
   14868:	mov	r3, r6
   1486c:	mov	r2, r5
   14870:	mov	r1, r7
   14874:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14878:	bl	10df0 <fprintf@plt>
   1487c:	b	14930 <__assert_fail@plt+0x3a8c>
   14880:	movw	r0, #31048	; 0x7948
   14884:	movt	r0, #1
   14888:	bl	10dc0 <gettext@plt>
   1488c:	mov	r7, r0
   14890:	ldr	r3, [fp, #4]
   14894:	ldr	r5, [r3]
   14898:	ldr	r3, [fp, #4]
   1489c:	add	r3, r3, #4
   148a0:	ldr	r6, [r3]
   148a4:	ldr	r3, [fp, #4]
   148a8:	add	r3, r3, #8
   148ac:	ldr	r3, [r3]
   148b0:	ldr	r2, [fp, #4]
   148b4:	add	r2, r2, #12
   148b8:	ldr	r2, [r2]
   148bc:	ldr	r1, [fp, #4]
   148c0:	add	r1, r1, #16
   148c4:	ldr	r1, [r1]
   148c8:	ldr	r0, [fp, #4]
   148cc:	add	r0, r0, #20
   148d0:	ldr	r0, [r0]
   148d4:	ldr	ip, [fp, #4]
   148d8:	add	ip, ip, #24
   148dc:	ldr	ip, [ip]
   148e0:	ldr	lr, [fp, #4]
   148e4:	add	lr, lr, #28
   148e8:	ldr	lr, [lr]
   148ec:	ldr	r4, [fp, #4]
   148f0:	add	r4, r4, #32
   148f4:	ldr	r4, [r4]
   148f8:	str	r4, [sp, #24]
   148fc:	str	lr, [sp, #20]
   14900:	str	ip, [sp, #16]
   14904:	str	r0, [sp, #12]
   14908:	str	r1, [sp, #8]
   1490c:	str	r2, [sp, #4]
   14910:	str	r3, [sp]
   14914:	mov	r3, r6
   14918:	mov	r2, r5
   1491c:	mov	r1, r7
   14920:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14924:	bl	10df0 <fprintf@plt>
   14928:	b	14930 <__assert_fail@plt+0x3a8c>
   1492c:	nop	{0}
   14930:	nop	{0}
   14934:	sub	sp, fp, #20
   14938:	ldrd	r4, [sp]
   1493c:	ldrd	r6, [sp, #8]
   14940:	ldr	fp, [sp, #16]
   14944:	add	sp, sp, #20
   14948:	pop	{pc}		; (ldr pc, [sp], #4)
   1494c:	str	fp, [sp, #-8]!
   14950:	str	lr, [sp, #4]
   14954:	add	fp, sp, #4
   14958:	sub	sp, sp, #32
   1495c:	str	r0, [fp, #-16]
   14960:	str	r1, [fp, #-20]	; 0xffffffec
   14964:	str	r2, [fp, #-24]	; 0xffffffe8
   14968:	str	r3, [fp, #-28]	; 0xffffffe4
   1496c:	mov	r3, #0
   14970:	str	r3, [fp, #-8]
   14974:	b	14984 <__assert_fail@plt+0x3ae0>
   14978:	ldr	r3, [fp, #-8]
   1497c:	add	r3, r3, #1
   14980:	str	r3, [fp, #-8]
   14984:	ldr	r3, [fp, #-8]
   14988:	lsl	r3, r3, #2
   1498c:	ldr	r2, [fp, #4]
   14990:	add	r3, r2, r3
   14994:	ldr	r3, [r3]
   14998:	cmp	r3, #0
   1499c:	bne	14978 <__assert_fail@plt+0x3ad4>
   149a0:	ldr	r3, [fp, #-8]
   149a4:	str	r3, [sp, #4]
   149a8:	ldr	r3, [fp, #4]
   149ac:	str	r3, [sp]
   149b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   149b4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   149b8:	ldr	r1, [fp, #-20]	; 0xffffffec
   149bc:	ldr	r0, [fp, #-16]
   149c0:	bl	143c4 <__assert_fail@plt+0x3520>
   149c4:	nop	{0}
   149c8:	sub	sp, fp, #4
   149cc:	ldr	fp, [sp]
   149d0:	add	sp, sp, #4
   149d4:	pop	{pc}		; (ldr pc, [sp], #4)
   149d8:	str	fp, [sp, #-8]!
   149dc:	str	lr, [sp, #4]
   149e0:	add	fp, sp, #4
   149e4:	sub	sp, sp, #72	; 0x48
   149e8:	str	r0, [fp, #-56]	; 0xffffffc8
   149ec:	str	r1, [fp, #-60]	; 0xffffffc4
   149f0:	str	r2, [fp, #-64]	; 0xffffffc0
   149f4:	str	r3, [fp, #-68]	; 0xffffffbc
   149f8:	mov	r3, #0
   149fc:	str	r3, [fp, #-8]
   14a00:	b	14a10 <__assert_fail@plt+0x3b6c>
   14a04:	ldr	r3, [fp, #-8]
   14a08:	add	r3, r3, #1
   14a0c:	str	r3, [fp, #-8]
   14a10:	ldr	r3, [fp, #-8]
   14a14:	cmp	r3, #9
   14a18:	bhi	14a5c <__assert_fail@plt+0x3bb8>
   14a1c:	ldr	r3, [fp, #4]
   14a20:	add	r2, r3, #4
   14a24:	str	r2, [fp, #4]
   14a28:	ldr	r2, [r3]
   14a2c:	ldr	r3, [fp, #-8]
   14a30:	lsl	r3, r3, #2
   14a34:	sub	r1, fp, #4
   14a38:	add	r3, r1, r3
   14a3c:	str	r2, [r3, #-44]	; 0xffffffd4
   14a40:	ldr	r3, [fp, #-8]
   14a44:	lsl	r3, r3, #2
   14a48:	sub	r2, fp, #4
   14a4c:	add	r3, r2, r3
   14a50:	ldr	r3, [r3, #-44]	; 0xffffffd4
   14a54:	cmp	r3, #0
   14a58:	bne	14a04 <__assert_fail@plt+0x3b60>
   14a5c:	ldr	r3, [fp, #-8]
   14a60:	str	r3, [sp, #4]
   14a64:	sub	r3, fp, #48	; 0x30
   14a68:	str	r3, [sp]
   14a6c:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14a70:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14a74:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14a78:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14a7c:	bl	143c4 <__assert_fail@plt+0x3520>
   14a80:	nop	{0}
   14a84:	sub	sp, fp, #4
   14a88:	ldr	fp, [sp]
   14a8c:	add	sp, sp, #4
   14a90:	pop	{pc}		; (ldr pc, [sp], #4)
   14a94:	push	{r3}		; (str r3, [sp, #-4]!)
   14a98:	str	fp, [sp, #-8]!
   14a9c:	str	lr, [sp, #4]
   14aa0:	add	fp, sp, #4
   14aa4:	sub	sp, sp, #36	; 0x24
   14aa8:	str	r0, [fp, #-20]	; 0xffffffec
   14aac:	str	r1, [fp, #-24]	; 0xffffffe8
   14ab0:	str	r2, [fp, #-28]	; 0xffffffe4
   14ab4:	add	r3, fp, #8
   14ab8:	str	r3, [fp, #-12]
   14abc:	ldr	r3, [fp, #-12]
   14ac0:	str	r3, [sp]
   14ac4:	ldr	r3, [fp, #4]
   14ac8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14acc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14ad0:	ldr	r0, [fp, #-20]	; 0xffffffec
   14ad4:	bl	149d8 <__assert_fail@plt+0x3b34>
   14ad8:	nop	{0}
   14adc:	sub	sp, fp, #4
   14ae0:	ldr	fp, [sp]
   14ae4:	ldr	lr, [sp, #4]
   14ae8:	add	sp, sp, #8
   14aec:	add	sp, sp, #4
   14af0:	bx	lr
   14af4:	str	fp, [sp, #-8]!
   14af8:	str	lr, [sp, #4]
   14afc:	add	fp, sp, #4
   14b00:	movw	r3, #33092	; 0x8144
   14b04:	movt	r3, #2
   14b08:	ldr	r3, [r3]
   14b0c:	mov	r1, r3
   14b10:	mov	r0, #10
   14b14:	bl	10cd0 <fputc_unlocked@plt>
   14b18:	movw	r0, #31108	; 0x7984
   14b1c:	movt	r0, #1
   14b20:	bl	10dc0 <gettext@plt>
   14b24:	mov	r3, r0
   14b28:	movw	r1, #31128	; 0x7998
   14b2c:	movt	r1, #1
   14b30:	mov	r0, r3
   14b34:	bl	10c70 <printf@plt>
   14b38:	movw	r0, #31152	; 0x79b0
   14b3c:	movt	r0, #1
   14b40:	bl	10dc0 <gettext@plt>
   14b44:	mov	r3, r0
   14b48:	movw	r2, #31172	; 0x79c4
   14b4c:	movt	r2, #1
   14b50:	movw	r1, #31212	; 0x79ec
   14b54:	movt	r1, #1
   14b58:	mov	r0, r3
   14b5c:	bl	10c70 <printf@plt>
   14b60:	movw	r0, #31228	; 0x79fc
   14b64:	movt	r0, #1
   14b68:	bl	10dc0 <gettext@plt>
   14b6c:	mov	r3, r0
   14b70:	movw	r1, #31268	; 0x7a24
   14b74:	movt	r1, #1
   14b78:	mov	r0, r3
   14b7c:	bl	10c70 <printf@plt>
   14b80:	nop	{0}
   14b84:	sub	sp, fp, #4
   14b88:	ldr	fp, [sp]
   14b8c:	add	sp, sp, #4
   14b90:	pop	{pc}		; (ldr pc, [sp], #4)
   14b94:	str	fp, [sp, #-8]!
   14b98:	str	lr, [sp, #4]
   14b9c:	add	fp, sp, #4
   14ba0:	sub	sp, sp, #16
   14ba4:	str	r0, [fp, #-8]
   14ba8:	str	r1, [fp, #-12]
   14bac:	str	r2, [fp, #-16]
   14bb0:	ldr	r2, [fp, #-16]
   14bb4:	ldr	r1, [fp, #-12]
   14bb8:	ldr	r0, [fp, #-8]
   14bbc:	bl	14d78 <__assert_fail@plt+0x3ed4>
   14bc0:	mov	r3, r0
   14bc4:	mov	r0, r3
   14bc8:	sub	sp, fp, #4
   14bcc:	ldr	fp, [sp]
   14bd0:	add	sp, sp, #4
   14bd4:	pop	{pc}		; (ldr pc, [sp], #4)
   14bd8:	str	fp, [sp, #-8]!
   14bdc:	str	lr, [sp, #4]
   14be0:	add	fp, sp, #4
   14be4:	sub	sp, sp, #8
   14be8:	str	r0, [fp, #-8]
   14bec:	ldr	r3, [fp, #-8]
   14bf0:	cmp	r3, #0
   14bf4:	bne	14bfc <__assert_fail@plt+0x3d58>
   14bf8:	bl	15488 <__assert_fail@plt+0x45e4>
   14bfc:	ldr	r3, [fp, #-8]
   14c00:	mov	r0, r3
   14c04:	sub	sp, fp, #4
   14c08:	ldr	fp, [sp]
   14c0c:	add	sp, sp, #4
   14c10:	pop	{pc}		; (ldr pc, [sp], #4)
   14c14:	str	fp, [sp, #-8]!
   14c18:	str	lr, [sp, #4]
   14c1c:	add	fp, sp, #4
   14c20:	sub	sp, sp, #8
   14c24:	str	r0, [fp, #-8]
   14c28:	ldr	r0, [fp, #-8]
   14c2c:	bl	16034 <__assert_fail@plt+0x5190>
   14c30:	mov	r3, r0
   14c34:	mov	r0, r3
   14c38:	bl	14bd8 <__assert_fail@plt+0x3d34>
   14c3c:	mov	r3, r0
   14c40:	mov	r0, r3
   14c44:	sub	sp, fp, #4
   14c48:	ldr	fp, [sp]
   14c4c:	add	sp, sp, #4
   14c50:	pop	{pc}		; (ldr pc, [sp], #4)
   14c54:	str	fp, [sp, #-8]!
   14c58:	str	lr, [sp, #4]
   14c5c:	add	fp, sp, #4
   14c60:	sub	sp, sp, #8
   14c64:	str	r0, [fp, #-8]
   14c68:	ldr	r0, [fp, #-8]
   14c6c:	bl	16bc0 <__assert_fail@plt+0x5d1c>
   14c70:	mov	r3, r0
   14c74:	mov	r0, r3
   14c78:	bl	14bd8 <__assert_fail@plt+0x3d34>
   14c7c:	mov	r3, r0
   14c80:	mov	r0, r3
   14c84:	sub	sp, fp, #4
   14c88:	ldr	fp, [sp]
   14c8c:	add	sp, sp, #4
   14c90:	pop	{pc}		; (ldr pc, [sp], #4)
   14c94:	str	fp, [sp, #-8]!
   14c98:	str	lr, [sp, #4]
   14c9c:	add	fp, sp, #4
   14ca0:	sub	sp, sp, #8
   14ca4:	str	r0, [fp, #-8]
   14ca8:	ldr	r0, [fp, #-8]
   14cac:	bl	14c14 <__assert_fail@plt+0x3d70>
   14cb0:	mov	r3, r0
   14cb4:	mov	r0, r3
   14cb8:	sub	sp, fp, #4
   14cbc:	ldr	fp, [sp]
   14cc0:	add	sp, sp, #4
   14cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   14cc8:	str	fp, [sp, #-8]!
   14ccc:	str	lr, [sp, #4]
   14cd0:	add	fp, sp, #4
   14cd4:	sub	sp, sp, #16
   14cd8:	str	r0, [fp, #-16]
   14cdc:	str	r1, [fp, #-20]	; 0xffffffec
   14ce0:	ldr	r1, [fp, #-20]	; 0xffffffec
   14ce4:	ldr	r0, [fp, #-16]
   14ce8:	bl	160c4 <__assert_fail@plt+0x5220>
   14cec:	str	r0, [fp, #-8]
   14cf0:	ldr	r3, [fp, #-8]
   14cf4:	cmp	r3, #0
   14cf8:	bne	14d18 <__assert_fail@plt+0x3e74>
   14cfc:	ldr	r3, [fp, #-16]
   14d00:	cmp	r3, #0
   14d04:	beq	14d14 <__assert_fail@plt+0x3e70>
   14d08:	ldr	r3, [fp, #-20]	; 0xffffffec
   14d0c:	cmp	r3, #0
   14d10:	beq	14d18 <__assert_fail@plt+0x3e74>
   14d14:	bl	15488 <__assert_fail@plt+0x45e4>
   14d18:	ldr	r3, [fp, #-8]
   14d1c:	mov	r0, r3
   14d20:	sub	sp, fp, #4
   14d24:	ldr	fp, [sp]
   14d28:	add	sp, sp, #4
   14d2c:	pop	{pc}		; (ldr pc, [sp], #4)
   14d30:	str	fp, [sp, #-8]!
   14d34:	str	lr, [sp, #4]
   14d38:	add	fp, sp, #4
   14d3c:	sub	sp, sp, #8
   14d40:	str	r0, [fp, #-8]
   14d44:	str	r1, [fp, #-12]
   14d48:	ldr	r1, [fp, #-12]
   14d4c:	ldr	r0, [fp, #-8]
   14d50:	bl	16bf8 <__assert_fail@plt+0x5d54>
   14d54:	mov	r3, r0
   14d58:	mov	r0, r3
   14d5c:	bl	14bd8 <__assert_fail@plt+0x3d34>
   14d60:	mov	r3, r0
   14d64:	mov	r0, r3
   14d68:	sub	sp, fp, #4
   14d6c:	ldr	fp, [sp]
   14d70:	add	sp, sp, #4
   14d74:	pop	{pc}		; (ldr pc, [sp], #4)
   14d78:	str	fp, [sp, #-8]!
   14d7c:	str	lr, [sp, #4]
   14d80:	add	fp, sp, #4
   14d84:	sub	sp, sp, #24
   14d88:	str	r0, [fp, #-16]
   14d8c:	str	r1, [fp, #-20]	; 0xffffffec
   14d90:	str	r2, [fp, #-24]	; 0xffffffe8
   14d94:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14d98:	ldr	r1, [fp, #-20]	; 0xffffffec
   14d9c:	ldr	r0, [fp, #-16]
   14da0:	bl	16e28 <__assert_fail@plt+0x5f84>
   14da4:	str	r0, [fp, #-8]
   14da8:	ldr	r3, [fp, #-8]
   14dac:	cmp	r3, #0
   14db0:	bne	14ddc <__assert_fail@plt+0x3f38>
   14db4:	ldr	r3, [fp, #-16]
   14db8:	cmp	r3, #0
   14dbc:	beq	14dd8 <__assert_fail@plt+0x3f34>
   14dc0:	ldr	r3, [fp, #-20]	; 0xffffffec
   14dc4:	cmp	r3, #0
   14dc8:	beq	14ddc <__assert_fail@plt+0x3f38>
   14dcc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14dd0:	cmp	r3, #0
   14dd4:	beq	14ddc <__assert_fail@plt+0x3f38>
   14dd8:	bl	15488 <__assert_fail@plt+0x45e4>
   14ddc:	ldr	r3, [fp, #-8]
   14de0:	mov	r0, r3
   14de4:	sub	sp, fp, #4
   14de8:	ldr	fp, [sp]
   14dec:	add	sp, sp, #4
   14df0:	pop	{pc}		; (ldr pc, [sp], #4)
   14df4:	str	fp, [sp, #-8]!
   14df8:	str	lr, [sp, #4]
   14dfc:	add	fp, sp, #4
   14e00:	sub	sp, sp, #16
   14e04:	str	r0, [fp, #-8]
   14e08:	str	r1, [fp, #-12]
   14e0c:	str	r2, [fp, #-16]
   14e10:	ldr	r2, [fp, #-16]
   14e14:	ldr	r1, [fp, #-12]
   14e18:	ldr	r0, [fp, #-8]
   14e1c:	bl	16c98 <__assert_fail@plt+0x5df4>
   14e20:	mov	r3, r0
   14e24:	mov	r0, r3
   14e28:	bl	14bd8 <__assert_fail@plt+0x3d34>
   14e2c:	mov	r3, r0
   14e30:	mov	r0, r3
   14e34:	sub	sp, fp, #4
   14e38:	ldr	fp, [sp]
   14e3c:	add	sp, sp, #4
   14e40:	pop	{pc}		; (ldr pc, [sp], #4)
   14e44:	str	fp, [sp, #-8]!
   14e48:	str	lr, [sp, #4]
   14e4c:	add	fp, sp, #4
   14e50:	sub	sp, sp, #8
   14e54:	str	r0, [fp, #-8]
   14e58:	str	r1, [fp, #-12]
   14e5c:	ldr	r2, [fp, #-12]
   14e60:	ldr	r1, [fp, #-8]
   14e64:	mov	r0, #0
   14e68:	bl	14d78 <__assert_fail@plt+0x3ed4>
   14e6c:	mov	r3, r0
   14e70:	mov	r0, r3
   14e74:	sub	sp, fp, #4
   14e78:	ldr	fp, [sp]
   14e7c:	add	sp, sp, #4
   14e80:	pop	{pc}		; (ldr pc, [sp], #4)
   14e84:	str	fp, [sp, #-8]!
   14e88:	str	lr, [sp, #4]
   14e8c:	add	fp, sp, #4
   14e90:	sub	sp, sp, #8
   14e94:	str	r0, [fp, #-8]
   14e98:	str	r1, [fp, #-12]
   14e9c:	ldr	r2, [fp, #-12]
   14ea0:	ldr	r1, [fp, #-8]
   14ea4:	mov	r0, #0
   14ea8:	bl	14df4 <__assert_fail@plt+0x3f50>
   14eac:	mov	r3, r0
   14eb0:	mov	r0, r3
   14eb4:	sub	sp, fp, #4
   14eb8:	ldr	fp, [sp]
   14ebc:	add	sp, sp, #4
   14ec0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ec4:	str	fp, [sp, #-8]!
   14ec8:	str	lr, [sp, #4]
   14ecc:	add	fp, sp, #4
   14ed0:	sub	sp, sp, #8
   14ed4:	str	r0, [fp, #-8]
   14ed8:	str	r1, [fp, #-12]
   14edc:	mov	r2, #1
   14ee0:	ldr	r1, [fp, #-12]
   14ee4:	ldr	r0, [fp, #-8]
   14ee8:	bl	14f04 <__assert_fail@plt+0x4060>
   14eec:	mov	r3, r0
   14ef0:	mov	r0, r3
   14ef4:	sub	sp, fp, #4
   14ef8:	ldr	fp, [sp]
   14efc:	add	sp, sp, #4
   14f00:	pop	{pc}		; (ldr pc, [sp], #4)
   14f04:	str	fp, [sp, #-8]!
   14f08:	str	lr, [sp, #4]
   14f0c:	add	fp, sp, #4
   14f10:	sub	sp, sp, #24
   14f14:	str	r0, [fp, #-16]
   14f18:	str	r1, [fp, #-20]	; 0xffffffec
   14f1c:	str	r2, [fp, #-24]	; 0xffffffe8
   14f20:	ldr	r3, [fp, #-20]	; 0xffffffec
   14f24:	ldr	r3, [r3]
   14f28:	str	r3, [fp, #-8]
   14f2c:	ldr	r3, [fp, #-16]
   14f30:	cmp	r3, #0
   14f34:	bne	14f7c <__assert_fail@plt+0x40d8>
   14f38:	ldr	r3, [fp, #-8]
   14f3c:	cmp	r3, #0
   14f40:	bne	14fb8 <__assert_fail@plt+0x4114>
   14f44:	mov	r2, #64	; 0x40
   14f48:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14f4c:	udiv	r3, r2, r3
   14f50:	str	r3, [fp, #-8]
   14f54:	ldr	r3, [fp, #-8]
   14f58:	cmp	r3, #0
   14f5c:	moveq	r3, #1
   14f60:	movne	r3, #0
   14f64:	uxtb	r3, r3
   14f68:	mov	r2, r3
   14f6c:	ldr	r3, [fp, #-8]
   14f70:	add	r3, r2, r3
   14f74:	str	r3, [fp, #-8]
   14f78:	b	14fb8 <__assert_fail@plt+0x4114>
   14f7c:	ldr	r2, [fp, #-8]
   14f80:	ldr	r3, [fp, #-8]
   14f84:	lsr	r3, r3, #1
   14f88:	add	r3, r3, #1
   14f8c:	mov	r1, #0
   14f90:	adds	r3, r2, r3
   14f94:	bcc	14f9c <__assert_fail@plt+0x40f8>
   14f98:	mov	r1, #1
   14f9c:	str	r3, [fp, #-8]
   14fa0:	mov	r3, r1
   14fa4:	and	r3, r3, #1
   14fa8:	uxtb	r3, r3
   14fac:	cmp	r3, #0
   14fb0:	beq	14fb8 <__assert_fail@plt+0x4114>
   14fb4:	bl	15488 <__assert_fail@plt+0x45e4>
   14fb8:	ldr	r3, [fp, #-8]
   14fbc:	ldr	r2, [fp, #-24]	; 0xffffffe8
   14fc0:	mov	r1, r3
   14fc4:	ldr	r0, [fp, #-16]
   14fc8:	bl	14d78 <__assert_fail@plt+0x3ed4>
   14fcc:	str	r0, [fp, #-16]
   14fd0:	ldr	r2, [fp, #-8]
   14fd4:	ldr	r3, [fp, #-20]	; 0xffffffec
   14fd8:	str	r2, [r3]
   14fdc:	ldr	r3, [fp, #-16]
   14fe0:	mov	r0, r3
   14fe4:	sub	sp, fp, #4
   14fe8:	ldr	fp, [sp]
   14fec:	add	sp, sp, #4
   14ff0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ff4:	str	fp, [sp, #-8]!
   14ff8:	str	lr, [sp, #4]
   14ffc:	add	fp, sp, #4
   15000:	sub	sp, sp, #32
   15004:	str	r0, [fp, #-24]	; 0xffffffe8
   15008:	str	r1, [fp, #-28]	; 0xffffffe4
   1500c:	str	r2, [fp, #-32]	; 0xffffffe0
   15010:	str	r3, [fp, #-36]	; 0xffffffdc
   15014:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15018:	ldr	r3, [r3]
   1501c:	str	r3, [fp, #-8]
   15020:	ldr	r3, [fp, #-8]
   15024:	asr	r3, r3, #1
   15028:	mov	r1, #0
   1502c:	ldr	r2, [fp, #-8]
   15030:	adds	r3, r2, r3
   15034:	bvc	1503c <__assert_fail@plt+0x4198>
   15038:	mov	r1, #1
   1503c:	str	r3, [fp, #-16]
   15040:	mov	r3, r1
   15044:	and	r3, r3, #1
   15048:	uxtb	r3, r3
   1504c:	cmp	r3, #0
   15050:	beq	1505c <__assert_fail@plt+0x41b8>
   15054:	mvn	r3, #-2147483648	; 0x80000000
   15058:	str	r3, [fp, #-16]
   1505c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15060:	cmp	r3, #0
   15064:	blt	15080 <__assert_fail@plt+0x41dc>
   15068:	ldr	r3, [fp, #-16]
   1506c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15070:	cmp	r2, r3
   15074:	bge	15080 <__assert_fail@plt+0x41dc>
   15078:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1507c:	str	r3, [fp, #-16]
   15080:	ldr	r2, [fp, #-16]
   15084:	mov	lr, #0
   15088:	ldr	r3, [fp, #4]
   1508c:	smull	r2, r3, r2, r3
   15090:	mov	r0, #0
   15094:	mov	r1, #0
   15098:	mov	r0, r3
   1509c:	asr	r1, r3, #31
   150a0:	asr	ip, r2, #31
   150a4:	cmp	ip, r0
   150a8:	beq	150b0 <__assert_fail@plt+0x420c>
   150ac:	mov	lr, #1
   150b0:	mov	r3, r2
   150b4:	str	r3, [fp, #-20]	; 0xffffffec
   150b8:	mov	r3, lr
   150bc:	and	r3, r3, #1
   150c0:	uxtb	r3, r3
   150c4:	cmp	r3, #0
   150c8:	beq	150d4 <__assert_fail@plt+0x4230>
   150cc:	mvn	r3, #-2147483648	; 0x80000000
   150d0:	b	150ec <__assert_fail@plt+0x4248>
   150d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   150d8:	cmp	r3, #63	; 0x3f
   150dc:	bgt	150e8 <__assert_fail@plt+0x4244>
   150e0:	mov	r3, #64	; 0x40
   150e4:	b	150ec <__assert_fail@plt+0x4248>
   150e8:	mov	r3, #0
   150ec:	str	r3, [fp, #-12]
   150f0:	ldr	r3, [fp, #-12]
   150f4:	cmp	r3, #0
   150f8:	beq	15130 <__assert_fail@plt+0x428c>
   150fc:	ldr	r2, [fp, #-12]
   15100:	ldr	r3, [fp, #4]
   15104:	sdiv	r3, r2, r3
   15108:	str	r3, [fp, #-16]
   1510c:	ldr	r3, [fp, #-12]
   15110:	ldr	r2, [fp, #4]
   15114:	sdiv	r2, r3, r2
   15118:	ldr	r1, [fp, #4]
   1511c:	mul	r2, r1, r2
   15120:	sub	r3, r3, r2
   15124:	ldr	r2, [fp, #-12]
   15128:	sub	r3, r2, r3
   1512c:	str	r3, [fp, #-20]	; 0xffffffec
   15130:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15134:	cmp	r3, #0
   15138:	bne	15148 <__assert_fail@plt+0x42a4>
   1513c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15140:	mov	r2, #0
   15144:	str	r2, [r3]
   15148:	ldr	r2, [fp, #-16]
   1514c:	ldr	r3, [fp, #-8]
   15150:	sub	r3, r2, r3
   15154:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15158:	cmp	r2, r3
   1515c:	ble	151fc <__assert_fail@plt+0x4358>
   15160:	mov	r1, #0
   15164:	ldr	r2, [fp, #-8]
   15168:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1516c:	adds	r3, r2, r3
   15170:	bvc	15178 <__assert_fail@plt+0x42d4>
   15174:	mov	r1, #1
   15178:	str	r3, [fp, #-16]
   1517c:	mov	r3, r1
   15180:	and	r3, r3, #1
   15184:	uxtb	r3, r3
   15188:	cmp	r3, #0
   1518c:	bne	151f8 <__assert_fail@plt+0x4354>
   15190:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15194:	cmp	r3, #0
   15198:	blt	151ac <__assert_fail@plt+0x4308>
   1519c:	ldr	r3, [fp, #-16]
   151a0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   151a4:	cmp	r2, r3
   151a8:	blt	151f8 <__assert_fail@plt+0x4354>
   151ac:	ldr	r2, [fp, #-16]
   151b0:	mov	lr, #0
   151b4:	ldr	r3, [fp, #4]
   151b8:	smull	r2, r3, r2, r3
   151bc:	mov	r0, #0
   151c0:	mov	r1, #0
   151c4:	mov	r0, r3
   151c8:	asr	r1, r3, #31
   151cc:	asr	ip, r2, #31
   151d0:	cmp	ip, r0
   151d4:	beq	151dc <__assert_fail@plt+0x4338>
   151d8:	mov	lr, #1
   151dc:	mov	r3, r2
   151e0:	str	r3, [fp, #-20]	; 0xffffffec
   151e4:	mov	r3, lr
   151e8:	and	r3, r3, #1
   151ec:	uxtb	r3, r3
   151f0:	cmp	r3, #0
   151f4:	beq	151fc <__assert_fail@plt+0x4358>
   151f8:	bl	15488 <__assert_fail@plt+0x45e4>
   151fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   15200:	mov	r1, r3
   15204:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15208:	bl	14cc8 <__assert_fail@plt+0x3e24>
   1520c:	str	r0, [fp, #-24]	; 0xffffffe8
   15210:	ldr	r2, [fp, #-16]
   15214:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15218:	str	r2, [r3]
   1521c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15220:	mov	r0, r3
   15224:	sub	sp, fp, #4
   15228:	ldr	fp, [sp]
   1522c:	add	sp, sp, #4
   15230:	pop	{pc}		; (ldr pc, [sp], #4)
   15234:	str	fp, [sp, #-8]!
   15238:	str	lr, [sp, #4]
   1523c:	add	fp, sp, #4
   15240:	sub	sp, sp, #8
   15244:	str	r0, [fp, #-8]
   15248:	mov	r1, #1
   1524c:	ldr	r0, [fp, #-8]
   15250:	bl	152a4 <__assert_fail@plt+0x4400>
   15254:	mov	r3, r0
   15258:	mov	r0, r3
   1525c:	sub	sp, fp, #4
   15260:	ldr	fp, [sp]
   15264:	add	sp, sp, #4
   15268:	pop	{pc}		; (ldr pc, [sp], #4)
   1526c:	str	fp, [sp, #-8]!
   15270:	str	lr, [sp, #4]
   15274:	add	fp, sp, #4
   15278:	sub	sp, sp, #8
   1527c:	str	r0, [fp, #-8]
   15280:	mov	r1, #1
   15284:	ldr	r0, [fp, #-8]
   15288:	bl	152ec <__assert_fail@plt+0x4448>
   1528c:	mov	r3, r0
   15290:	mov	r0, r3
   15294:	sub	sp, fp, #4
   15298:	ldr	fp, [sp]
   1529c:	add	sp, sp, #4
   152a0:	pop	{pc}		; (ldr pc, [sp], #4)
   152a4:	str	fp, [sp, #-8]!
   152a8:	str	lr, [sp, #4]
   152ac:	add	fp, sp, #4
   152b0:	sub	sp, sp, #8
   152b4:	str	r0, [fp, #-8]
   152b8:	str	r1, [fp, #-12]
   152bc:	ldr	r1, [fp, #-12]
   152c0:	ldr	r0, [fp, #-8]
   152c4:	bl	15f64 <__assert_fail@plt+0x50c0>
   152c8:	mov	r3, r0
   152cc:	mov	r0, r3
   152d0:	bl	14bd8 <__assert_fail@plt+0x3d34>
   152d4:	mov	r3, r0
   152d8:	mov	r0, r3
   152dc:	sub	sp, fp, #4
   152e0:	ldr	fp, [sp]
   152e4:	add	sp, sp, #4
   152e8:	pop	{pc}		; (ldr pc, [sp], #4)
   152ec:	str	fp, [sp, #-8]!
   152f0:	str	lr, [sp, #4]
   152f4:	add	fp, sp, #4
   152f8:	sub	sp, sp, #8
   152fc:	str	r0, [fp, #-8]
   15300:	str	r1, [fp, #-12]
   15304:	ldr	r1, [fp, #-12]
   15308:	ldr	r0, [fp, #-8]
   1530c:	bl	16c54 <__assert_fail@plt+0x5db0>
   15310:	mov	r3, r0
   15314:	mov	r0, r3
   15318:	bl	14bd8 <__assert_fail@plt+0x3d34>
   1531c:	mov	r3, r0
   15320:	mov	r0, r3
   15324:	sub	sp, fp, #4
   15328:	ldr	fp, [sp]
   1532c:	add	sp, sp, #4
   15330:	pop	{pc}		; (ldr pc, [sp], #4)
   15334:	str	fp, [sp, #-8]!
   15338:	str	lr, [sp, #4]
   1533c:	add	fp, sp, #4
   15340:	sub	sp, sp, #8
   15344:	str	r0, [fp, #-8]
   15348:	str	r1, [fp, #-12]
   1534c:	ldr	r0, [fp, #-12]
   15350:	bl	14c14 <__assert_fail@plt+0x3d70>
   15354:	mov	r3, r0
   15358:	ldr	r2, [fp, #-12]
   1535c:	ldr	r1, [fp, #-8]
   15360:	mov	r0, r3
   15364:	bl	10ca0 <memcpy@plt>
   15368:	mov	r3, r0
   1536c:	mov	r0, r3
   15370:	sub	sp, fp, #4
   15374:	ldr	fp, [sp]
   15378:	add	sp, sp, #4
   1537c:	pop	{pc}		; (ldr pc, [sp], #4)
   15380:	str	fp, [sp, #-8]!
   15384:	str	lr, [sp, #4]
   15388:	add	fp, sp, #4
   1538c:	sub	sp, sp, #8
   15390:	str	r0, [fp, #-8]
   15394:	str	r1, [fp, #-12]
   15398:	ldr	r0, [fp, #-12]
   1539c:	bl	14c54 <__assert_fail@plt+0x3db0>
   153a0:	mov	r3, r0
   153a4:	mov	r0, r3
   153a8:	ldr	r3, [fp, #-12]
   153ac:	mov	r2, r3
   153b0:	ldr	r1, [fp, #-8]
   153b4:	bl	10ca0 <memcpy@plt>
   153b8:	mov	r3, r0
   153bc:	mov	r0, r3
   153c0:	sub	sp, fp, #4
   153c4:	ldr	fp, [sp]
   153c8:	add	sp, sp, #4
   153cc:	pop	{pc}		; (ldr pc, [sp], #4)
   153d0:	str	fp, [sp, #-8]!
   153d4:	str	lr, [sp, #4]
   153d8:	add	fp, sp, #4
   153dc:	sub	sp, sp, #16
   153e0:	str	r0, [fp, #-16]
   153e4:	str	r1, [fp, #-20]	; 0xffffffec
   153e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   153ec:	add	r3, r3, #1
   153f0:	mov	r0, r3
   153f4:	bl	14c54 <__assert_fail@plt+0x3db0>
   153f8:	mov	r3, r0
   153fc:	str	r3, [fp, #-8]
   15400:	ldr	r3, [fp, #-20]	; 0xffffffec
   15404:	ldr	r2, [fp, #-8]
   15408:	add	r3, r2, r3
   1540c:	mov	r2, #0
   15410:	strb	r2, [r3]
   15414:	ldr	r3, [fp, #-20]	; 0xffffffec
   15418:	mov	r2, r3
   1541c:	ldr	r1, [fp, #-16]
   15420:	ldr	r0, [fp, #-8]
   15424:	bl	10ca0 <memcpy@plt>
   15428:	mov	r3, r0
   1542c:	mov	r0, r3
   15430:	sub	sp, fp, #4
   15434:	ldr	fp, [sp]
   15438:	add	sp, sp, #4
   1543c:	pop	{pc}		; (ldr pc, [sp], #4)
   15440:	str	fp, [sp, #-8]!
   15444:	str	lr, [sp, #4]
   15448:	add	fp, sp, #4
   1544c:	sub	sp, sp, #8
   15450:	str	r0, [fp, #-8]
   15454:	ldr	r0, [fp, #-8]
   15458:	bl	10dd8 <strlen@plt>
   1545c:	mov	r3, r0
   15460:	add	r3, r3, #1
   15464:	mov	r1, r3
   15468:	ldr	r0, [fp, #-8]
   1546c:	bl	15334 <__assert_fail@plt+0x4490>
   15470:	mov	r3, r0
   15474:	mov	r0, r3
   15478:	sub	sp, fp, #4
   1547c:	ldr	fp, [sp]
   15480:	add	sp, sp, #4
   15484:	pop	{pc}		; (ldr pc, [sp], #4)
   15488:	strd	r4, [sp, #-16]!
   1548c:	str	fp, [sp, #8]
   15490:	str	lr, [sp, #12]
   15494:	add	fp, sp, #12
   15498:	movw	r3, #33000	; 0x80e8
   1549c:	movt	r3, #2
   154a0:	ldr	r4, [r3]
   154a4:	movw	r0, #31348	; 0x7a74
   154a8:	movt	r0, #1
   154ac:	bl	10dc0 <gettext@plt>
   154b0:	mov	r3, r0
   154b4:	movw	r2, #31368	; 0x7a88
   154b8:	movt	r2, #1
   154bc:	mov	r1, #0
   154c0:	mov	r0, r4
   154c4:	bl	10d54 <error@plt>
   154c8:	bl	10e98 <abort@plt>
   154cc:	strd	r4, [sp, #-16]!
   154d0:	str	fp, [sp, #8]
   154d4:	str	lr, [sp, #12]
   154d8:	add	fp, sp, #12
   154dc:	sub	sp, sp, #40	; 0x28
   154e0:	str	r0, [fp, #-32]	; 0xffffffe0
   154e4:	str	r1, [fp, #-36]	; 0xffffffdc
   154e8:	strd	r2, [fp, #-44]	; 0xffffffd4
   154ec:	sub	r2, fp, #28
   154f0:	ldr	r3, [fp, #12]
   154f4:	str	r3, [sp]
   154f8:	mov	r3, r2
   154fc:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15500:	mov	r1, #0
   15504:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15508:	bl	15910 <__assert_fail@plt+0x4a6c>
   1550c:	str	r0, [fp, #-16]
   15510:	ldr	r3, [fp, #-16]
   15514:	cmp	r3, #0
   15518:	bne	1558c <__assert_fail@plt+0x46e8>
   1551c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   15520:	ldrd	r0, [fp, #-44]	; 0xffffffd4
   15524:	cmp	r1, r3
   15528:	cmpeq	r0, r2
   1552c:	bhi	15544 <__assert_fail@plt+0x46a0>
   15530:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   15534:	ldrd	r0, [fp, #4]
   15538:	cmp	r1, r3
   1553c:	cmpeq	r0, r2
   15540:	bcs	155c8 <__assert_fail@plt+0x4724>
   15544:	mov	r3, #1
   15548:	str	r3, [fp, #-16]
   1554c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   15550:	mvn	r0, #-1073741824	; 0xc0000000
   15554:	mov	r1, #0
   15558:	cmp	r3, r1
   1555c:	cmpeq	r2, r0
   15560:	bls	15578 <__assert_fail@plt+0x46d4>
   15564:	bl	10dfc <__errno_location@plt>
   15568:	mov	r2, r0
   1556c:	mov	r3, #75	; 0x4b
   15570:	str	r3, [r2]
   15574:	b	155c8 <__assert_fail@plt+0x4724>
   15578:	bl	10dfc <__errno_location@plt>
   1557c:	mov	r2, r0
   15580:	mov	r3, #34	; 0x22
   15584:	str	r3, [r2]
   15588:	b	155c8 <__assert_fail@plt+0x4724>
   1558c:	ldr	r3, [fp, #-16]
   15590:	cmp	r3, #1
   15594:	bne	155ac <__assert_fail@plt+0x4708>
   15598:	bl	10dfc <__errno_location@plt>
   1559c:	mov	r2, r0
   155a0:	mov	r3, #75	; 0x4b
   155a4:	str	r3, [r2]
   155a8:	b	155c8 <__assert_fail@plt+0x4724>
   155ac:	ldr	r3, [fp, #-16]
   155b0:	cmp	r3, #3
   155b4:	bne	155c8 <__assert_fail@plt+0x4724>
   155b8:	bl	10dfc <__errno_location@plt>
   155bc:	mov	r2, r0
   155c0:	mov	r3, #0
   155c4:	str	r3, [r2]
   155c8:	ldr	r3, [fp, #-16]
   155cc:	cmp	r3, #0
   155d0:	beq	1563c <__assert_fail@plt+0x4798>
   155d4:	ldr	r3, [fp, #20]
   155d8:	cmp	r3, #0
   155dc:	beq	155e8 <__assert_fail@plt+0x4744>
   155e0:	ldr	r4, [fp, #20]
   155e4:	b	155ec <__assert_fail@plt+0x4748>
   155e8:	mov	r4, #1
   155ec:	bl	10dfc <__errno_location@plt>
   155f0:	mov	r3, r0
   155f4:	ldr	r3, [r3]
   155f8:	cmp	r3, #22
   155fc:	beq	15610 <__assert_fail@plt+0x476c>
   15600:	bl	10dfc <__errno_location@plt>
   15604:	mov	r3, r0
   15608:	ldr	r5, [r3]
   1560c:	b	15614 <__assert_fail@plt+0x4770>
   15610:	mov	r5, #0
   15614:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15618:	bl	1438c <__assert_fail@plt+0x34e8>
   1561c:	mov	r3, r0
   15620:	str	r3, [sp]
   15624:	ldr	r3, [fp, #16]
   15628:	movw	r2, #31372	; 0x7a8c
   1562c:	movt	r2, #1
   15630:	mov	r1, r5
   15634:	mov	r0, r4
   15638:	bl	10d54 <error@plt>
   1563c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   15640:	mov	r0, r2
   15644:	mov	r1, r3
   15648:	sub	sp, fp, #12
   1564c:	ldrd	r4, [sp]
   15650:	ldr	fp, [sp, #8]
   15654:	add	sp, sp, #12
   15658:	pop	{pc}		; (ldr pc, [sp], #4)
   1565c:	str	fp, [sp, #-8]!
   15660:	str	lr, [sp, #4]
   15664:	add	fp, sp, #4
   15668:	sub	sp, sp, #40	; 0x28
   1566c:	str	r0, [fp, #-8]
   15670:	strd	r2, [fp, #-20]	; 0xffffffec
   15674:	ldr	r3, [fp, #20]
   15678:	str	r3, [sp, #16]
   1567c:	ldr	r3, [fp, #16]
   15680:	str	r3, [sp, #12]
   15684:	ldr	r3, [fp, #12]
   15688:	str	r3, [sp, #8]
   1568c:	ldrd	r2, [fp, #4]
   15690:	strd	r2, [sp]
   15694:	ldrd	r2, [fp, #-20]	; 0xffffffec
   15698:	mov	r1, #10
   1569c:	ldr	r0, [fp, #-8]
   156a0:	bl	154cc <__assert_fail@plt+0x4628>
   156a4:	mov	r2, r0
   156a8:	mov	r3, r1
   156ac:	mov	r0, r2
   156b0:	mov	r1, r3
   156b4:	sub	sp, fp, #4
   156b8:	ldr	fp, [sp]
   156bc:	add	sp, sp, #4
   156c0:	pop	{pc}		; (ldr pc, [sp], #4)
   156c4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   156c8:	strd	r6, [sp, #8]
   156cc:	strd	r8, [sp, #16]
   156d0:	str	fp, [sp, #24]
   156d4:	add	fp, sp, #24
   156d8:	sub	sp, sp, #44	; 0x2c
   156dc:	str	r0, [fp, #-40]	; 0xffffffd8
   156e0:	str	r1, [fp, #-44]	; 0xffffffd4
   156e4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   156e8:	ldrd	r4, [r3]
   156ec:	ldr	r3, [fp, #-44]	; 0xffffffd4
   156f0:	mov	r6, r3
   156f4:	asr	r7, r6, #31
   156f8:	mov	r2, #0
   156fc:	mov	r3, #0
   15700:	strd	r2, [fp, #-60]	; 0xffffffc4
   15704:	cmp	r6, #0
   15708:	sbcs	r3, r7, #0
   1570c:	bge	15724 <__assert_fail@plt+0x4880>
   15710:	orrs	r3, r4, r5
   15714:	beq	15724 <__assert_fail@plt+0x4880>
   15718:	mov	r2, #1
   1571c:	mov	r3, #0
   15720:	strd	r2, [fp, #-60]	; 0xffffffc4
   15724:	mov	r0, #0
   15728:	mov	r1, #0
   1572c:	mov	r0, r7
   15730:	mov	r1, #0
   15734:	mov	r2, #0
   15738:	mov	r3, #0
   1573c:	mov	r2, r5
   15740:	mov	r3, #0
   15744:	cmp	r0, #0
   15748:	bne	1576c <__assert_fail@plt+0x48c8>
   1574c:	cmp	r2, #0
   15750:	bne	15760 <__assert_fail@plt+0x48bc>
   15754:	umull	r2, r3, r6, r4
   15758:	strd	r2, [fp, #-52]	; 0xffffffcc
   1575c:	b	15838 <__assert_fail@plt+0x4994>
   15760:	mov	r3, r2
   15764:	mov	r2, r6
   15768:	b	1577c <__assert_fail@plt+0x48d8>
   1576c:	cmp	r2, #0
   15770:	bne	157f4 <__assert_fail@plt+0x4950>
   15774:	mov	r3, r0
   15778:	mov	r2, r4
   1577c:	umull	r8, r9, r6, r4
   15780:	umull	r2, r3, r2, r3
   15784:	mov	r0, r2
   15788:	mov	r1, r3
   1578c:	mov	r2, #0
   15790:	mov	r3, #0
   15794:	mov	r2, r9
   15798:	mov	r3, #0
   1579c:	adds	ip, r0, r2
   157a0:	str	ip, [fp, #-68]	; 0xffffffbc
   157a4:	adc	r3, r1, r3
   157a8:	str	r3, [fp, #-64]	; 0xffffffc0
   157ac:	ldrd	r0, [fp, #-68]	; 0xffffffbc
   157b0:	mov	r2, #0
   157b4:	mov	r3, #0
   157b8:	mov	r2, r1
   157bc:	asr	r3, r1, #31
   157c0:	cmp	r2, #0
   157c4:	bne	15810 <__assert_fail@plt+0x496c>
   157c8:	mov	r2, #0
   157cc:	mov	r3, #0
   157d0:	mov	r3, r0
   157d4:	mov	r2, #0
   157d8:	mov	r0, r8
   157dc:	mov	r1, #0
   157e0:	orr	ip, r2, r0
   157e4:	str	ip, [fp, #-52]	; 0xffffffcc
   157e8:	orr	r3, r3, r1
   157ec:	str	r3, [fp, #-48]	; 0xffffffd0
   157f0:	b	15838 <__assert_fail@plt+0x4994>
   157f4:	mul	r2, r4, r7
   157f8:	mul	r3, r6, r5
   157fc:	add	r1, r2, r3
   15800:	umull	r2, r3, r6, r4
   15804:	add	r1, r1, r3
   15808:	mov	r3, r1
   1580c:	strd	r2, [fp, #-52]	; 0xffffffcc
   15810:	mul	r2, r4, r7
   15814:	mul	r3, r6, r5
   15818:	add	r1, r2, r3
   1581c:	umull	r2, r3, r6, r4
   15820:	add	r1, r1, r3
   15824:	mov	r3, r1
   15828:	strd	r2, [fp, #-52]	; 0xffffffcc
   1582c:	mov	r2, #1
   15830:	mov	r3, #0
   15834:	strd	r2, [fp, #-60]	; 0xffffffc4
   15838:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   1583c:	strd	r2, [fp, #-36]	; 0xffffffdc
   15840:	ldrd	r2, [fp, #-60]	; 0xffffffc4
   15844:	mov	r3, r2
   15848:	and	r3, r3, #1
   1584c:	uxtb	r3, r3
   15850:	cmp	r3, #0
   15854:	beq	15870 <__assert_fail@plt+0x49cc>
   15858:	ldr	r1, [fp, #-40]	; 0xffffffd8
   1585c:	mvn	r2, #0
   15860:	mvn	r3, #0
   15864:	strd	r2, [r1]
   15868:	mov	r3, #1
   1586c:	b	15880 <__assert_fail@plt+0x49dc>
   15870:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   15874:	ldr	r1, [fp, #-40]	; 0xffffffd8
   15878:	strd	r2, [r1]
   1587c:	mov	r3, #0
   15880:	mov	r0, r3
   15884:	sub	sp, fp, #24
   15888:	ldrd	r4, [sp]
   1588c:	ldrd	r6, [sp, #8]
   15890:	ldrd	r8, [sp, #16]
   15894:	ldr	fp, [sp, #24]
   15898:	add	sp, sp, #28
   1589c:	bx	lr
   158a0:	str	fp, [sp, #-8]!
   158a4:	str	lr, [sp, #4]
   158a8:	add	fp, sp, #4
   158ac:	sub	sp, sp, #24
   158b0:	str	r0, [fp, #-16]
   158b4:	str	r1, [fp, #-20]	; 0xffffffec
   158b8:	str	r2, [fp, #-24]	; 0xffffffe8
   158bc:	mov	r3, #0
   158c0:	str	r3, [fp, #-8]
   158c4:	b	158e4 <__assert_fail@plt+0x4a40>
   158c8:	ldr	r1, [fp, #-20]	; 0xffffffec
   158cc:	ldr	r0, [fp, #-16]
   158d0:	bl	156c4 <__assert_fail@plt+0x4820>
   158d4:	mov	r2, r0
   158d8:	ldr	r3, [fp, #-8]
   158dc:	orr	r3, r3, r2
   158e0:	str	r3, [fp, #-8]
   158e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   158e8:	sub	r2, r3, #1
   158ec:	str	r2, [fp, #-24]	; 0xffffffe8
   158f0:	cmp	r3, #0
   158f4:	bne	158c8 <__assert_fail@plt+0x4a24>
   158f8:	ldr	r3, [fp, #-8]
   158fc:	mov	r0, r3
   15900:	sub	sp, fp, #4
   15904:	ldr	fp, [sp]
   15908:	add	sp, sp, #4
   1590c:	pop	{pc}		; (ldr pc, [sp], #4)
   15910:	str	fp, [sp, #-8]!
   15914:	str	lr, [sp, #4]
   15918:	add	fp, sp, #4
   1591c:	sub	sp, sp, #56	; 0x38
   15920:	str	r0, [fp, #-48]	; 0xffffffd0
   15924:	str	r1, [fp, #-52]	; 0xffffffcc
   15928:	str	r2, [fp, #-56]	; 0xffffffc8
   1592c:	str	r3, [fp, #-60]	; 0xffffffc4
   15930:	mov	r3, #0
   15934:	str	r3, [fp, #-8]
   15938:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1593c:	cmp	r3, #0
   15940:	blt	15950 <__assert_fail@plt+0x4aac>
   15944:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15948:	cmp	r3, #36	; 0x24
   1594c:	ble	15970 <__assert_fail@plt+0x4acc>
   15950:	movw	r3, #31436	; 0x7acc
   15954:	movt	r3, #1
   15958:	mov	r2, #85	; 0x55
   1595c:	movw	r1, #31380	; 0x7a94
   15960:	movt	r1, #1
   15964:	movw	r0, #31396	; 0x7aa4
   15968:	movt	r0, #1
   1596c:	bl	10ea4 <__assert_fail@plt>
   15970:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15974:	cmp	r3, #0
   15978:	bne	15984 <__assert_fail@plt+0x4ae0>
   1597c:	sub	r3, fp, #36	; 0x24
   15980:	b	15988 <__assert_fail@plt+0x4ae4>
   15984:	ldr	r3, [fp, #-52]	; 0xffffffcc
   15988:	str	r3, [fp, #-32]	; 0xffffffe0
   1598c:	bl	10dfc <__errno_location@plt>
   15990:	mov	r2, r0
   15994:	mov	r3, #0
   15998:	str	r3, [r2]
   1599c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   159a0:	str	r3, [fp, #-12]
   159a4:	ldr	r3, [fp, #-12]
   159a8:	ldrb	r3, [r3]
   159ac:	strb	r3, [fp, #-13]
   159b0:	b	159cc <__assert_fail@plt+0x4b28>
   159b4:	ldr	r3, [fp, #-12]
   159b8:	add	r3, r3, #1
   159bc:	str	r3, [fp, #-12]
   159c0:	ldr	r3, [fp, #-12]
   159c4:	ldrb	r3, [r3]
   159c8:	strb	r3, [fp, #-13]
   159cc:	bl	10da8 <__ctype_b_loc@plt>
   159d0:	mov	r3, r0
   159d4:	ldr	r2, [r3]
   159d8:	ldrb	r3, [fp, #-13]
   159dc:	lsl	r3, r3, #1
   159e0:	add	r3, r2, r3
   159e4:	ldrh	r3, [r3]
   159e8:	and	r3, r3, #8192	; 0x2000
   159ec:	cmp	r3, #0
   159f0:	bne	159b4 <__assert_fail@plt+0x4b10>
   159f4:	ldrb	r3, [fp, #-13]
   159f8:	cmp	r3, #45	; 0x2d
   159fc:	bne	15a08 <__assert_fail@plt+0x4b64>
   15a00:	mov	r3, #4
   15a04:	b	15f50 <__assert_fail@plt+0x50ac>
   15a08:	ldr	r2, [fp, #-56]	; 0xffffffc8
   15a0c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15a10:	ldr	r0, [fp, #-48]	; 0xffffffd0
   15a14:	bl	10e2c <strtoumax@plt>
   15a18:	mov	r2, r0
   15a1c:	mov	r3, r1
   15a20:	strd	r2, [fp, #-44]	; 0xffffffd4
   15a24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15a28:	ldr	r3, [r3]
   15a2c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   15a30:	cmp	r2, r3
   15a34:	bne	15a94 <__assert_fail@plt+0x4bf0>
   15a38:	ldr	r3, [fp, #4]
   15a3c:	cmp	r3, #0
   15a40:	beq	15a8c <__assert_fail@plt+0x4be8>
   15a44:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15a48:	ldr	r3, [r3]
   15a4c:	ldrb	r3, [r3]
   15a50:	cmp	r3, #0
   15a54:	beq	15a8c <__assert_fail@plt+0x4be8>
   15a58:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15a5c:	ldr	r3, [r3]
   15a60:	ldrb	r3, [r3]
   15a64:	mov	r1, r3
   15a68:	ldr	r0, [fp, #4]
   15a6c:	bl	10de4 <strchr@plt>
   15a70:	mov	r3, r0
   15a74:	cmp	r3, #0
   15a78:	beq	15a8c <__assert_fail@plt+0x4be8>
   15a7c:	mov	r2, #1
   15a80:	mov	r3, #0
   15a84:	strd	r2, [fp, #-44]	; 0xffffffd4
   15a88:	b	15acc <__assert_fail@plt+0x4c28>
   15a8c:	mov	r3, #4
   15a90:	b	15f50 <__assert_fail@plt+0x50ac>
   15a94:	bl	10dfc <__errno_location@plt>
   15a98:	mov	r3, r0
   15a9c:	ldr	r3, [r3]
   15aa0:	cmp	r3, #0
   15aa4:	beq	15acc <__assert_fail@plt+0x4c28>
   15aa8:	bl	10dfc <__errno_location@plt>
   15aac:	mov	r3, r0
   15ab0:	ldr	r3, [r3]
   15ab4:	cmp	r3, #34	; 0x22
   15ab8:	beq	15ac4 <__assert_fail@plt+0x4c20>
   15abc:	mov	r3, #4
   15ac0:	b	15f50 <__assert_fail@plt+0x50ac>
   15ac4:	mov	r3, #1
   15ac8:	str	r3, [fp, #-8]
   15acc:	ldr	r3, [fp, #4]
   15ad0:	cmp	r3, #0
   15ad4:	bne	15aec <__assert_fail@plt+0x4c48>
   15ad8:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   15adc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15ae0:	strd	r2, [r1]
   15ae4:	ldr	r3, [fp, #-8]
   15ae8:	b	15f50 <__assert_fail@plt+0x50ac>
   15aec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15af0:	ldr	r3, [r3]
   15af4:	ldrb	r3, [r3]
   15af8:	cmp	r3, #0
   15afc:	beq	15f40 <__assert_fail@plt+0x509c>
   15b00:	mov	r3, #1024	; 0x400
   15b04:	str	r3, [fp, #-20]	; 0xffffffec
   15b08:	mov	r3, #1
   15b0c:	str	r3, [fp, #-24]	; 0xffffffe8
   15b10:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15b14:	ldr	r3, [r3]
   15b18:	ldrb	r3, [r3]
   15b1c:	mov	r1, r3
   15b20:	ldr	r0, [fp, #4]
   15b24:	bl	10de4 <strchr@plt>
   15b28:	mov	r3, r0
   15b2c:	cmp	r3, #0
   15b30:	bne	15b4c <__assert_fail@plt+0x4ca8>
   15b34:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   15b38:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15b3c:	strd	r2, [r1]
   15b40:	ldr	r3, [fp, #-8]
   15b44:	orr	r3, r3, #2
   15b48:	b	15f50 <__assert_fail@plt+0x50ac>
   15b4c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15b50:	ldr	r3, [r3]
   15b54:	ldrb	r3, [r3]
   15b58:	sub	r3, r3, #69	; 0x45
   15b5c:	cmp	r3, #47	; 0x2f
   15b60:	ldrls	pc, [pc, r3, lsl #2]
   15b64:	b	15cb8 <__assert_fail@plt+0x4e14>
   15b68:	andeq	r5, r1, r8, lsr #24
   15b6c:			; <UNDEFINED> instruction: 0x00015cb8
   15b70:	andeq	r5, r1, r8, lsr #24
   15b74:			; <UNDEFINED> instruction: 0x00015cb8
   15b78:			; <UNDEFINED> instruction: 0x00015cb8
   15b7c:			; <UNDEFINED> instruction: 0x00015cb8
   15b80:	andeq	r5, r1, r8, lsr #24
   15b84:			; <UNDEFINED> instruction: 0x00015cb8
   15b88:	andeq	r5, r1, r8, lsr #24
   15b8c:			; <UNDEFINED> instruction: 0x00015cb8
   15b90:			; <UNDEFINED> instruction: 0x00015cb8
   15b94:	andeq	r5, r1, r8, lsr #24
   15b98:			; <UNDEFINED> instruction: 0x00015cb8
   15b9c:			; <UNDEFINED> instruction: 0x00015cb8
   15ba0:			; <UNDEFINED> instruction: 0x00015cb8
   15ba4:	andeq	r5, r1, r8, lsr #24
   15ba8:			; <UNDEFINED> instruction: 0x00015cb8
   15bac:			; <UNDEFINED> instruction: 0x00015cb8
   15bb0:			; <UNDEFINED> instruction: 0x00015cb8
   15bb4:			; <UNDEFINED> instruction: 0x00015cb8
   15bb8:	andeq	r5, r1, r8, lsr #24
   15bbc:	andeq	r5, r1, r8, lsr #24
   15bc0:			; <UNDEFINED> instruction: 0x00015cb8
   15bc4:			; <UNDEFINED> instruction: 0x00015cb8
   15bc8:			; <UNDEFINED> instruction: 0x00015cb8
   15bcc:			; <UNDEFINED> instruction: 0x00015cb8
   15bd0:			; <UNDEFINED> instruction: 0x00015cb8
   15bd4:			; <UNDEFINED> instruction: 0x00015cb8
   15bd8:			; <UNDEFINED> instruction: 0x00015cb8
   15bdc:			; <UNDEFINED> instruction: 0x00015cb8
   15be0:			; <UNDEFINED> instruction: 0x00015cb8
   15be4:			; <UNDEFINED> instruction: 0x00015cb8
   15be8:			; <UNDEFINED> instruction: 0x00015cb8
   15bec:			; <UNDEFINED> instruction: 0x00015cb8
   15bf0:	andeq	r5, r1, r8, lsr #24
   15bf4:			; <UNDEFINED> instruction: 0x00015cb8
   15bf8:			; <UNDEFINED> instruction: 0x00015cb8
   15bfc:			; <UNDEFINED> instruction: 0x00015cb8
   15c00:	andeq	r5, r1, r8, lsr #24
   15c04:			; <UNDEFINED> instruction: 0x00015cb8
   15c08:	andeq	r5, r1, r8, lsr #24
   15c0c:			; <UNDEFINED> instruction: 0x00015cb8
   15c10:			; <UNDEFINED> instruction: 0x00015cb8
   15c14:			; <UNDEFINED> instruction: 0x00015cb8
   15c18:			; <UNDEFINED> instruction: 0x00015cb8
   15c1c:			; <UNDEFINED> instruction: 0x00015cb8
   15c20:			; <UNDEFINED> instruction: 0x00015cb8
   15c24:	andeq	r5, r1, r8, lsr #24
   15c28:	mov	r1, #48	; 0x30
   15c2c:	ldr	r0, [fp, #4]
   15c30:	bl	10de4 <strchr@plt>
   15c34:	mov	r3, r0
   15c38:	cmp	r3, #0
   15c3c:	beq	15cac <__assert_fail@plt+0x4e08>
   15c40:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15c44:	ldr	r3, [r3]
   15c48:	add	r3, r3, #1
   15c4c:	ldrb	r3, [r3]
   15c50:	cmp	r3, #68	; 0x44
   15c54:	beq	15c94 <__assert_fail@plt+0x4df0>
   15c58:	cmp	r3, #105	; 0x69
   15c5c:	beq	15c6c <__assert_fail@plt+0x4dc8>
   15c60:	cmp	r3, #66	; 0x42
   15c64:	beq	15c94 <__assert_fail@plt+0x4df0>
   15c68:	b	15cb8 <__assert_fail@plt+0x4e14>
   15c6c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15c70:	ldr	r3, [r3]
   15c74:	add	r3, r3, #2
   15c78:	ldrb	r3, [r3]
   15c7c:	cmp	r3, #66	; 0x42
   15c80:	bne	15cb4 <__assert_fail@plt+0x4e10>
   15c84:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15c88:	add	r3, r3, #2
   15c8c:	str	r3, [fp, #-24]	; 0xffffffe8
   15c90:	b	15cb4 <__assert_fail@plt+0x4e10>
   15c94:	mov	r3, #1000	; 0x3e8
   15c98:	str	r3, [fp, #-20]	; 0xffffffec
   15c9c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15ca0:	add	r3, r3, #1
   15ca4:	str	r3, [fp, #-24]	; 0xffffffe8
   15ca8:	b	15cb8 <__assert_fail@plt+0x4e14>
   15cac:	nop	{0}
   15cb0:	b	15cb8 <__assert_fail@plt+0x4e14>
   15cb4:	nop	{0}
   15cb8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15cbc:	ldr	r3, [r3]
   15cc0:	ldrb	r3, [r3]
   15cc4:	sub	r3, r3, #66	; 0x42
   15cc8:	cmp	r3, #53	; 0x35
   15ccc:	ldrls	pc, [pc, r3, lsl #2]
   15cd0:	b	15ee0 <__assert_fail@plt+0x503c>
   15cd4:	andeq	r5, r1, r4, asr #27
   15cd8:	andeq	r5, r1, r0, ror #29
   15cdc:	andeq	r5, r1, r0, ror #29
   15ce0:	andeq	r5, r1, r8, ror #27
   15ce4:	andeq	r5, r1, r0, ror #29
   15ce8:	andeq	r5, r1, r4, lsl #28
   15cec:	andeq	r5, r1, r0, ror #29
   15cf0:	andeq	r5, r1, r0, ror #29
   15cf4:	andeq	r5, r1, r0, ror #29
   15cf8:	andeq	r5, r1, r0, lsr #28
   15cfc:	andeq	r5, r1, r0, ror #29
   15d00:	andeq	r5, r1, ip, lsr lr
   15d04:	andeq	r5, r1, r0, ror #29
   15d08:	andeq	r5, r1, r0, ror #29
   15d0c:	andeq	r5, r1, r8, asr lr
   15d10:	andeq	r5, r1, r0, ror #29
   15d14:	andeq	r5, r1, r0, ror #29
   15d18:	andeq	r5, r1, r0, ror #29
   15d1c:	andeq	r5, r1, r4, ror lr
   15d20:	andeq	r5, r1, r0, ror #29
   15d24:	andeq	r5, r1, r0, ror #29
   15d28:	andeq	r5, r1, r0, ror #29
   15d2c:	andeq	r5, r1, r0, ror #29
   15d30:	andeq	r5, r1, r8, lsr #29
   15d34:	andeq	r5, r1, r4, asr #29
   15d38:	andeq	r5, r1, r0, ror #29
   15d3c:	andeq	r5, r1, r0, ror #29
   15d40:	andeq	r5, r1, r0, ror #29
   15d44:	andeq	r5, r1, r0, ror #29
   15d48:	andeq	r5, r1, r0, ror #29
   15d4c:	andeq	r5, r1, r0, ror #29
   15d50:	andeq	r5, r1, r0, ror #29
   15d54:	andeq	r5, r1, ip, lsr #27
   15d58:	ldrdeq	r5, [r1], -ip
   15d5c:	andeq	r5, r1, r0, ror #29
   15d60:	andeq	r5, r1, r0, ror #29
   15d64:	andeq	r5, r1, r0, ror #29
   15d68:	andeq	r5, r1, r4, lsl #28
   15d6c:	andeq	r5, r1, r0, ror #29
   15d70:	andeq	r5, r1, r0, ror #29
   15d74:	andeq	r5, r1, r0, ror #29
   15d78:	andeq	r5, r1, r0, lsr #28
   15d7c:	andeq	r5, r1, r0, ror #29
   15d80:	andeq	r5, r1, ip, lsr lr
   15d84:	andeq	r5, r1, r0, ror #29
   15d88:	andeq	r5, r1, r0, ror #29
   15d8c:	andeq	r5, r1, r0, ror #29
   15d90:	andeq	r5, r1, r0, ror #29
   15d94:	andeq	r5, r1, r0, ror #29
   15d98:	andeq	r5, r1, r0, ror #29
   15d9c:	andeq	r5, r1, r4, ror lr
   15da0:	andeq	r5, r1, r0, ror #29
   15da4:	andeq	r5, r1, r0, ror #29
   15da8:	muleq	r1, r0, lr
   15dac:	sub	r3, fp, #44	; 0x2c
   15db0:	mov	r1, #512	; 0x200
   15db4:	mov	r0, r3
   15db8:	bl	156c4 <__assert_fail@plt+0x4820>
   15dbc:	str	r0, [fp, #-28]	; 0xffffffe4
   15dc0:	b	15ef8 <__assert_fail@plt+0x5054>
   15dc4:	sub	r3, fp, #44	; 0x2c
   15dc8:	mov	r1, #1024	; 0x400
   15dcc:	mov	r0, r3
   15dd0:	bl	156c4 <__assert_fail@plt+0x4820>
   15dd4:	str	r0, [fp, #-28]	; 0xffffffe4
   15dd8:	b	15ef8 <__assert_fail@plt+0x5054>
   15ddc:	mov	r3, #0
   15de0:	str	r3, [fp, #-28]	; 0xffffffe4
   15de4:	b	15ef8 <__assert_fail@plt+0x5054>
   15de8:	sub	r3, fp, #44	; 0x2c
   15dec:	mov	r2, #6
   15df0:	ldr	r1, [fp, #-20]	; 0xffffffec
   15df4:	mov	r0, r3
   15df8:	bl	158a0 <__assert_fail@plt+0x49fc>
   15dfc:	str	r0, [fp, #-28]	; 0xffffffe4
   15e00:	b	15ef8 <__assert_fail@plt+0x5054>
   15e04:	sub	r3, fp, #44	; 0x2c
   15e08:	mov	r2, #3
   15e0c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15e10:	mov	r0, r3
   15e14:	bl	158a0 <__assert_fail@plt+0x49fc>
   15e18:	str	r0, [fp, #-28]	; 0xffffffe4
   15e1c:	b	15ef8 <__assert_fail@plt+0x5054>
   15e20:	sub	r3, fp, #44	; 0x2c
   15e24:	mov	r2, #1
   15e28:	ldr	r1, [fp, #-20]	; 0xffffffec
   15e2c:	mov	r0, r3
   15e30:	bl	158a0 <__assert_fail@plt+0x49fc>
   15e34:	str	r0, [fp, #-28]	; 0xffffffe4
   15e38:	b	15ef8 <__assert_fail@plt+0x5054>
   15e3c:	sub	r3, fp, #44	; 0x2c
   15e40:	mov	r2, #2
   15e44:	ldr	r1, [fp, #-20]	; 0xffffffec
   15e48:	mov	r0, r3
   15e4c:	bl	158a0 <__assert_fail@plt+0x49fc>
   15e50:	str	r0, [fp, #-28]	; 0xffffffe4
   15e54:	b	15ef8 <__assert_fail@plt+0x5054>
   15e58:	sub	r3, fp, #44	; 0x2c
   15e5c:	mov	r2, #5
   15e60:	ldr	r1, [fp, #-20]	; 0xffffffec
   15e64:	mov	r0, r3
   15e68:	bl	158a0 <__assert_fail@plt+0x49fc>
   15e6c:	str	r0, [fp, #-28]	; 0xffffffe4
   15e70:	b	15ef8 <__assert_fail@plt+0x5054>
   15e74:	sub	r3, fp, #44	; 0x2c
   15e78:	mov	r2, #4
   15e7c:	ldr	r1, [fp, #-20]	; 0xffffffec
   15e80:	mov	r0, r3
   15e84:	bl	158a0 <__assert_fail@plt+0x49fc>
   15e88:	str	r0, [fp, #-28]	; 0xffffffe4
   15e8c:	b	15ef8 <__assert_fail@plt+0x5054>
   15e90:	sub	r3, fp, #44	; 0x2c
   15e94:	mov	r1, #2
   15e98:	mov	r0, r3
   15e9c:	bl	156c4 <__assert_fail@plt+0x4820>
   15ea0:	str	r0, [fp, #-28]	; 0xffffffe4
   15ea4:	b	15ef8 <__assert_fail@plt+0x5054>
   15ea8:	sub	r3, fp, #44	; 0x2c
   15eac:	mov	r2, #8
   15eb0:	ldr	r1, [fp, #-20]	; 0xffffffec
   15eb4:	mov	r0, r3
   15eb8:	bl	158a0 <__assert_fail@plt+0x49fc>
   15ebc:	str	r0, [fp, #-28]	; 0xffffffe4
   15ec0:	b	15ef8 <__assert_fail@plt+0x5054>
   15ec4:	sub	r3, fp, #44	; 0x2c
   15ec8:	mov	r2, #7
   15ecc:	ldr	r1, [fp, #-20]	; 0xffffffec
   15ed0:	mov	r0, r3
   15ed4:	bl	158a0 <__assert_fail@plt+0x49fc>
   15ed8:	str	r0, [fp, #-28]	; 0xffffffe4
   15edc:	b	15ef8 <__assert_fail@plt+0x5054>
   15ee0:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   15ee4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15ee8:	strd	r2, [r1]
   15eec:	ldr	r3, [fp, #-8]
   15ef0:	orr	r3, r3, #2
   15ef4:	b	15f50 <__assert_fail@plt+0x50ac>
   15ef8:	ldr	r2, [fp, #-8]
   15efc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15f00:	orr	r3, r2, r3
   15f04:	str	r3, [fp, #-8]
   15f08:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15f0c:	ldr	r2, [r3]
   15f10:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15f14:	add	r2, r2, r3
   15f18:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15f1c:	str	r2, [r3]
   15f20:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15f24:	ldr	r3, [r3]
   15f28:	ldrb	r3, [r3]
   15f2c:	cmp	r3, #0
   15f30:	beq	15f40 <__assert_fail@plt+0x509c>
   15f34:	ldr	r3, [fp, #-8]
   15f38:	orr	r3, r3, #2
   15f3c:	str	r3, [fp, #-8]
   15f40:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   15f44:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15f48:	strd	r2, [r1]
   15f4c:	ldr	r3, [fp, #-8]
   15f50:	mov	r0, r3
   15f54:	sub	sp, fp, #4
   15f58:	ldr	fp, [sp]
   15f5c:	add	sp, sp, #4
   15f60:	pop	{pc}		; (ldr pc, [sp], #4)
   15f64:	str	fp, [sp, #-8]!
   15f68:	str	lr, [sp, #4]
   15f6c:	add	fp, sp, #4
   15f70:	sub	sp, sp, #16
   15f74:	str	r0, [fp, #-16]
   15f78:	str	r1, [fp, #-20]	; 0xffffffec
   15f7c:	ldr	r3, [fp, #-16]
   15f80:	cmp	r3, #0
   15f84:	beq	15f94 <__assert_fail@plt+0x50f0>
   15f88:	ldr	r3, [fp, #-20]	; 0xffffffec
   15f8c:	cmp	r3, #0
   15f90:	bne	15fa4 <__assert_fail@plt+0x5100>
   15f94:	mov	r3, #1
   15f98:	str	r3, [fp, #-20]	; 0xffffffec
   15f9c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15fa0:	str	r3, [fp, #-16]
   15fa4:	mov	ip, #0
   15fa8:	ldr	r2, [fp, #-16]
   15fac:	ldr	r3, [fp, #-20]	; 0xffffffec
   15fb0:	umull	r0, r1, r2, r3
   15fb4:	mov	r2, #0
   15fb8:	mov	r3, #0
   15fbc:	mov	r2, r1
   15fc0:	mov	r3, #0
   15fc4:	cmp	r2, #0
   15fc8:	beq	15fd0 <__assert_fail@plt+0x512c>
   15fcc:	mov	ip, #1
   15fd0:	cmp	r0, #0
   15fd4:	bge	15fdc <__assert_fail@plt+0x5138>
   15fd8:	mov	ip, #1
   15fdc:	mov	r3, ip
   15fe0:	and	r3, r3, #1
   15fe4:	uxtb	r3, r3
   15fe8:	cmp	r3, #0
   15fec:	beq	16008 <__assert_fail@plt+0x5164>
   15ff0:	bl	10dfc <__errno_location@plt>
   15ff4:	mov	r2, r0
   15ff8:	mov	r3, #12
   15ffc:	str	r3, [r2]
   16000:	mov	r3, #0
   16004:	b	16020 <__assert_fail@plt+0x517c>
   16008:	ldr	r1, [fp, #-20]	; 0xffffffec
   1600c:	ldr	r0, [fp, #-16]
   16010:	bl	10c4c <calloc@plt>
   16014:	mov	r3, r0
   16018:	str	r3, [fp, #-8]
   1601c:	ldr	r3, [fp, #-8]
   16020:	mov	r0, r3
   16024:	sub	sp, fp, #4
   16028:	ldr	fp, [sp]
   1602c:	add	sp, sp, #4
   16030:	pop	{pc}		; (ldr pc, [sp], #4)
   16034:	str	fp, [sp, #-8]!
   16038:	str	lr, [sp, #4]
   1603c:	add	fp, sp, #4
   16040:	sub	sp, sp, #16
   16044:	str	r0, [fp, #-16]
   16048:	ldr	r3, [fp, #-16]
   1604c:	cmp	r3, #0
   16050:	bne	1605c <__assert_fail@plt+0x51b8>
   16054:	mov	r3, #1
   16058:	str	r3, [fp, #-16]
   1605c:	mov	r2, #0
   16060:	ldr	r3, [fp, #-16]
   16064:	cmp	r3, #0
   16068:	bge	16070 <__assert_fail@plt+0x51cc>
   1606c:	mov	r2, #1
   16070:	mov	r3, r2
   16074:	and	r3, r3, #1
   16078:	uxtb	r3, r3
   1607c:	cmp	r3, #0
   16080:	beq	1609c <__assert_fail@plt+0x51f8>
   16084:	bl	10dfc <__errno_location@plt>
   16088:	mov	r2, r0
   1608c:	mov	r3, #12
   16090:	str	r3, [r2]
   16094:	mov	r3, #0
   16098:	b	160b0 <__assert_fail@plt+0x520c>
   1609c:	ldr	r0, [fp, #-16]
   160a0:	bl	10d6c <malloc@plt>
   160a4:	mov	r3, r0
   160a8:	str	r3, [fp, #-8]
   160ac:	ldr	r3, [fp, #-8]
   160b0:	mov	r0, r3
   160b4:	sub	sp, fp, #4
   160b8:	ldr	fp, [sp]
   160bc:	add	sp, sp, #4
   160c0:	pop	{pc}		; (ldr pc, [sp], #4)
   160c4:	str	fp, [sp, #-8]!
   160c8:	str	lr, [sp, #4]
   160cc:	add	fp, sp, #4
   160d0:	sub	sp, sp, #16
   160d4:	str	r0, [fp, #-16]
   160d8:	str	r1, [fp, #-20]	; 0xffffffec
   160dc:	ldr	r3, [fp, #-16]
   160e0:	cmp	r3, #0
   160e4:	bne	160f8 <__assert_fail@plt+0x5254>
   160e8:	ldr	r0, [fp, #-20]	; 0xffffffec
   160ec:	bl	16034 <__assert_fail@plt+0x5190>
   160f0:	mov	r3, r0
   160f4:	b	16168 <__assert_fail@plt+0x52c4>
   160f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   160fc:	cmp	r3, #0
   16100:	bne	16114 <__assert_fail@plt+0x5270>
   16104:	ldr	r0, [fp, #-16]
   16108:	bl	169f8 <__assert_fail@plt+0x5b54>
   1610c:	mov	r3, #0
   16110:	b	16168 <__assert_fail@plt+0x52c4>
   16114:	mov	r2, #0
   16118:	ldr	r3, [fp, #-20]	; 0xffffffec
   1611c:	cmp	r3, #0
   16120:	bge	16128 <__assert_fail@plt+0x5284>
   16124:	mov	r2, #1
   16128:	mov	r3, r2
   1612c:	and	r3, r3, #1
   16130:	uxtb	r3, r3
   16134:	cmp	r3, #0
   16138:	beq	16154 <__assert_fail@plt+0x52b0>
   1613c:	bl	10dfc <__errno_location@plt>
   16140:	mov	r2, r0
   16144:	mov	r3, #12
   16148:	str	r3, [r2]
   1614c:	mov	r3, #0
   16150:	b	16168 <__assert_fail@plt+0x52c4>
   16154:	ldr	r1, [fp, #-20]	; 0xffffffec
   16158:	ldr	r0, [fp, #-16]
   1615c:	bl	10ce8 <realloc@plt>
   16160:	str	r0, [fp, #-8]
   16164:	ldr	r3, [fp, #-8]
   16168:	mov	r0, r3
   1616c:	sub	sp, fp, #4
   16170:	ldr	fp, [sp]
   16174:	add	sp, sp, #4
   16178:	pop	{pc}		; (ldr pc, [sp], #4)
   1617c:	push	{fp}		; (str fp, [sp, #-4]!)
   16180:	add	fp, sp, #0
   16184:	sub	sp, sp, #12
   16188:	str	r0, [fp, #-8]
   1618c:	ldr	r3, [fp, #-8]
   16190:	cmp	r3, #90	; 0x5a
   16194:	bgt	161b8 <__assert_fail@plt+0x5314>
   16198:	ldr	r3, [fp, #-8]
   1619c:	cmp	r3, #65	; 0x41
   161a0:	bge	161c8 <__assert_fail@plt+0x5324>
   161a4:	ldr	r3, [fp, #-8]
   161a8:	sub	r3, r3, #48	; 0x30
   161ac:	cmp	r3, #9
   161b0:	bhi	161d0 <__assert_fail@plt+0x532c>
   161b4:	b	161c8 <__assert_fail@plt+0x5324>
   161b8:	ldr	r3, [fp, #-8]
   161bc:	sub	r3, r3, #97	; 0x61
   161c0:	cmp	r3, #25
   161c4:	bhi	161d0 <__assert_fail@plt+0x532c>
   161c8:	mov	r3, #1
   161cc:	b	161d4 <__assert_fail@plt+0x5330>
   161d0:	mov	r3, #0
   161d4:	mov	r0, r3
   161d8:	add	sp, fp, #0
   161dc:	pop	{fp}		; (ldr fp, [sp], #4)
   161e0:	bx	lr
   161e4:	push	{fp}		; (str fp, [sp, #-4]!)
   161e8:	add	fp, sp, #0
   161ec:	sub	sp, sp, #12
   161f0:	str	r0, [fp, #-8]
   161f4:	ldr	r3, [fp, #-8]
   161f8:	cmp	r3, #65	; 0x41
   161fc:	blt	16224 <__assert_fail@plt+0x5380>
   16200:	ldr	r3, [fp, #-8]
   16204:	cmp	r3, #90	; 0x5a
   16208:	ble	1621c <__assert_fail@plt+0x5378>
   1620c:	ldr	r3, [fp, #-8]
   16210:	sub	r3, r3, #97	; 0x61
   16214:	cmp	r3, #25
   16218:	bhi	16224 <__assert_fail@plt+0x5380>
   1621c:	mov	r3, #1
   16220:	b	16228 <__assert_fail@plt+0x5384>
   16224:	mov	r3, #0
   16228:	mov	r0, r3
   1622c:	add	sp, fp, #0
   16230:	pop	{fp}		; (ldr fp, [sp], #4)
   16234:	bx	lr
   16238:	push	{fp}		; (str fp, [sp, #-4]!)
   1623c:	add	fp, sp, #0
   16240:	sub	sp, sp, #12
   16244:	str	r0, [fp, #-8]
   16248:	ldr	r3, [fp, #-8]
   1624c:	cmp	r3, #127	; 0x7f
   16250:	bhi	1625c <__assert_fail@plt+0x53b8>
   16254:	mov	r3, #1
   16258:	b	16260 <__assert_fail@plt+0x53bc>
   1625c:	mov	r3, #0
   16260:	mov	r0, r3
   16264:	add	sp, fp, #0
   16268:	pop	{fp}		; (ldr fp, [sp], #4)
   1626c:	bx	lr
   16270:	push	{fp}		; (str fp, [sp, #-4]!)
   16274:	add	fp, sp, #0
   16278:	sub	sp, sp, #12
   1627c:	str	r0, [fp, #-8]
   16280:	ldr	r3, [fp, #-8]
   16284:	cmp	r3, #32
   16288:	beq	16298 <__assert_fail@plt+0x53f4>
   1628c:	ldr	r3, [fp, #-8]
   16290:	cmp	r3, #9
   16294:	bne	162a0 <__assert_fail@plt+0x53fc>
   16298:	mov	r3, #1
   1629c:	b	162a4 <__assert_fail@plt+0x5400>
   162a0:	mov	r3, #0
   162a4:	and	r3, r3, #1
   162a8:	uxtb	r3, r3
   162ac:	mov	r0, r3
   162b0:	add	sp, fp, #0
   162b4:	pop	{fp}		; (ldr fp, [sp], #4)
   162b8:	bx	lr
   162bc:	push	{fp}		; (str fp, [sp, #-4]!)
   162c0:	add	fp, sp, #0
   162c4:	sub	sp, sp, #12
   162c8:	str	r0, [fp, #-8]
   162cc:	ldr	r3, [fp, #-8]
   162d0:	cmp	r3, #0
   162d4:	blt	162f8 <__assert_fail@plt+0x5454>
   162d8:	ldr	r3, [fp, #-8]
   162dc:	cmp	r3, #31
   162e0:	ble	162f0 <__assert_fail@plt+0x544c>
   162e4:	ldr	r3, [fp, #-8]
   162e8:	cmp	r3, #127	; 0x7f
   162ec:	bne	162f8 <__assert_fail@plt+0x5454>
   162f0:	mov	r3, #1
   162f4:	b	162fc <__assert_fail@plt+0x5458>
   162f8:	mov	r3, #0
   162fc:	mov	r0, r3
   16300:	add	sp, fp, #0
   16304:	pop	{fp}		; (ldr fp, [sp], #4)
   16308:	bx	lr
   1630c:	push	{fp}		; (str fp, [sp, #-4]!)
   16310:	add	fp, sp, #0
   16314:	sub	sp, sp, #12
   16318:	str	r0, [fp, #-8]
   1631c:	ldr	r3, [fp, #-8]
   16320:	sub	r3, r3, #48	; 0x30
   16324:	cmp	r3, #9
   16328:	bhi	16334 <__assert_fail@plt+0x5490>
   1632c:	mov	r3, #1
   16330:	b	16338 <__assert_fail@plt+0x5494>
   16334:	mov	r3, #0
   16338:	mov	r0, r3
   1633c:	add	sp, fp, #0
   16340:	pop	{fp}		; (ldr fp, [sp], #4)
   16344:	bx	lr
   16348:	push	{fp}		; (str fp, [sp, #-4]!)
   1634c:	add	fp, sp, #0
   16350:	sub	sp, sp, #12
   16354:	str	r0, [fp, #-8]
   16358:	ldr	r3, [fp, #-8]
   1635c:	sub	r3, r3, #33	; 0x21
   16360:	cmp	r3, #93	; 0x5d
   16364:	bhi	16370 <__assert_fail@plt+0x54cc>
   16368:	mov	r3, #1
   1636c:	b	16374 <__assert_fail@plt+0x54d0>
   16370:	mov	r3, #0
   16374:	mov	r0, r3
   16378:	add	sp, fp, #0
   1637c:	pop	{fp}		; (ldr fp, [sp], #4)
   16380:	bx	lr
   16384:	push	{fp}		; (str fp, [sp, #-4]!)
   16388:	add	fp, sp, #0
   1638c:	sub	sp, sp, #12
   16390:	str	r0, [fp, #-8]
   16394:	ldr	r3, [fp, #-8]
   16398:	sub	r3, r3, #97	; 0x61
   1639c:	cmp	r3, #25
   163a0:	bhi	163ac <__assert_fail@plt+0x5508>
   163a4:	mov	r3, #1
   163a8:	b	163b0 <__assert_fail@plt+0x550c>
   163ac:	mov	r3, #0
   163b0:	mov	r0, r3
   163b4:	add	sp, fp, #0
   163b8:	pop	{fp}		; (ldr fp, [sp], #4)
   163bc:	bx	lr
   163c0:	push	{fp}		; (str fp, [sp, #-4]!)
   163c4:	add	fp, sp, #0
   163c8:	sub	sp, sp, #12
   163cc:	str	r0, [fp, #-8]
   163d0:	ldr	r3, [fp, #-8]
   163d4:	sub	r3, r3, #32
   163d8:	cmp	r3, #94	; 0x5e
   163dc:	bhi	163e8 <__assert_fail@plt+0x5544>
   163e0:	mov	r3, #1
   163e4:	b	163ec <__assert_fail@plt+0x5548>
   163e8:	mov	r3, #0
   163ec:	mov	r0, r3
   163f0:	add	sp, fp, #0
   163f4:	pop	{fp}		; (ldr fp, [sp], #4)
   163f8:	bx	lr
   163fc:	push	{fp}		; (str fp, [sp, #-4]!)
   16400:	add	fp, sp, #0
   16404:	sub	sp, sp, #12
   16408:	str	r0, [fp, #-8]
   1640c:	ldr	r3, [fp, #-8]
   16410:	cmp	r3, #64	; 0x40
   16414:	bgt	16438 <__assert_fail@plt+0x5594>
   16418:	ldr	r3, [fp, #-8]
   1641c:	cmp	r3, #58	; 0x3a
   16420:	bge	16460 <__assert_fail@plt+0x55bc>
   16424:	ldr	r3, [fp, #-8]
   16428:	sub	r3, r3, #33	; 0x21
   1642c:	cmp	r3, #14
   16430:	bhi	16468 <__assert_fail@plt+0x55c4>
   16434:	b	16460 <__assert_fail@plt+0x55bc>
   16438:	ldr	r3, [fp, #-8]
   1643c:	cmp	r3, #91	; 0x5b
   16440:	blt	16468 <__assert_fail@plt+0x55c4>
   16444:	ldr	r3, [fp, #-8]
   16448:	cmp	r3, #96	; 0x60
   1644c:	ble	16460 <__assert_fail@plt+0x55bc>
   16450:	ldr	r3, [fp, #-8]
   16454:	sub	r3, r3, #123	; 0x7b
   16458:	cmp	r3, #3
   1645c:	bhi	16468 <__assert_fail@plt+0x55c4>
   16460:	mov	r3, #1
   16464:	b	1646c <__assert_fail@plt+0x55c8>
   16468:	mov	r3, #0
   1646c:	mov	r0, r3
   16470:	add	sp, fp, #0
   16474:	pop	{fp}		; (ldr fp, [sp], #4)
   16478:	bx	lr
   1647c:	push	{fp}		; (str fp, [sp, #-4]!)
   16480:	add	fp, sp, #0
   16484:	sub	sp, sp, #12
   16488:	str	r0, [fp, #-8]
   1648c:	ldr	r3, [fp, #-8]
   16490:	cmp	r3, #9
   16494:	blt	164b8 <__assert_fail@plt+0x5614>
   16498:	ldr	r3, [fp, #-8]
   1649c:	cmp	r3, #13
   164a0:	ble	164b0 <__assert_fail@plt+0x560c>
   164a4:	ldr	r3, [fp, #-8]
   164a8:	cmp	r3, #32
   164ac:	bne	164b8 <__assert_fail@plt+0x5614>
   164b0:	mov	r3, #1
   164b4:	b	164bc <__assert_fail@plt+0x5618>
   164b8:	mov	r3, #0
   164bc:	mov	r0, r3
   164c0:	add	sp, fp, #0
   164c4:	pop	{fp}		; (ldr fp, [sp], #4)
   164c8:	bx	lr
   164cc:	push	{fp}		; (str fp, [sp, #-4]!)
   164d0:	add	fp, sp, #0
   164d4:	sub	sp, sp, #12
   164d8:	str	r0, [fp, #-8]
   164dc:	ldr	r3, [fp, #-8]
   164e0:	sub	r3, r3, #65	; 0x41
   164e4:	cmp	r3, #25
   164e8:	bhi	164f4 <__assert_fail@plt+0x5650>
   164ec:	mov	r3, #1
   164f0:	b	164f8 <__assert_fail@plt+0x5654>
   164f4:	mov	r3, #0
   164f8:	mov	r0, r3
   164fc:	add	sp, fp, #0
   16500:	pop	{fp}		; (ldr fp, [sp], #4)
   16504:	bx	lr
   16508:	push	{fp}		; (str fp, [sp, #-4]!)
   1650c:	add	fp, sp, #0
   16510:	sub	sp, sp, #12
   16514:	str	r0, [fp, #-8]
   16518:	ldr	r3, [fp, #-8]
   1651c:	sub	r3, r3, #48	; 0x30
   16520:	cmp	r3, #54	; 0x36
   16524:	ldrls	pc, [pc, r3, lsl #2]
   16528:	b	16610 <__assert_fail@plt+0x576c>
   1652c:	andeq	r6, r1, r8, lsl #12
   16530:	andeq	r6, r1, r8, lsl #12
   16534:	andeq	r6, r1, r8, lsl #12
   16538:	andeq	r6, r1, r8, lsl #12
   1653c:	andeq	r6, r1, r8, lsl #12
   16540:	andeq	r6, r1, r8, lsl #12
   16544:	andeq	r6, r1, r8, lsl #12
   16548:	andeq	r6, r1, r8, lsl #12
   1654c:	andeq	r6, r1, r8, lsl #12
   16550:	andeq	r6, r1, r8, lsl #12
   16554:	andeq	r6, r1, r0, lsl r6
   16558:	andeq	r6, r1, r0, lsl r6
   1655c:	andeq	r6, r1, r0, lsl r6
   16560:	andeq	r6, r1, r0, lsl r6
   16564:	andeq	r6, r1, r0, lsl r6
   16568:	andeq	r6, r1, r0, lsl r6
   1656c:	andeq	r6, r1, r0, lsl r6
   16570:	andeq	r6, r1, r8, lsl #12
   16574:	andeq	r6, r1, r8, lsl #12
   16578:	andeq	r6, r1, r8, lsl #12
   1657c:	andeq	r6, r1, r8, lsl #12
   16580:	andeq	r6, r1, r8, lsl #12
   16584:	andeq	r6, r1, r8, lsl #12
   16588:	andeq	r6, r1, r0, lsl r6
   1658c:	andeq	r6, r1, r0, lsl r6
   16590:	andeq	r6, r1, r0, lsl r6
   16594:	andeq	r6, r1, r0, lsl r6
   16598:	andeq	r6, r1, r0, lsl r6
   1659c:	andeq	r6, r1, r0, lsl r6
   165a0:	andeq	r6, r1, r0, lsl r6
   165a4:	andeq	r6, r1, r0, lsl r6
   165a8:	andeq	r6, r1, r0, lsl r6
   165ac:	andeq	r6, r1, r0, lsl r6
   165b0:	andeq	r6, r1, r0, lsl r6
   165b4:	andeq	r6, r1, r0, lsl r6
   165b8:	andeq	r6, r1, r0, lsl r6
   165bc:	andeq	r6, r1, r0, lsl r6
   165c0:	andeq	r6, r1, r0, lsl r6
   165c4:	andeq	r6, r1, r0, lsl r6
   165c8:	andeq	r6, r1, r0, lsl r6
   165cc:	andeq	r6, r1, r0, lsl r6
   165d0:	andeq	r6, r1, r0, lsl r6
   165d4:	andeq	r6, r1, r0, lsl r6
   165d8:	andeq	r6, r1, r0, lsl r6
   165dc:	andeq	r6, r1, r0, lsl r6
   165e0:	andeq	r6, r1, r0, lsl r6
   165e4:	andeq	r6, r1, r0, lsl r6
   165e8:	andeq	r6, r1, r0, lsl r6
   165ec:	andeq	r6, r1, r0, lsl r6
   165f0:	andeq	r6, r1, r8, lsl #12
   165f4:	andeq	r6, r1, r8, lsl #12
   165f8:	andeq	r6, r1, r8, lsl #12
   165fc:	andeq	r6, r1, r8, lsl #12
   16600:	andeq	r6, r1, r8, lsl #12
   16604:	andeq	r6, r1, r8, lsl #12
   16608:	mov	r3, #1
   1660c:	b	16614 <__assert_fail@plt+0x5770>
   16610:	mov	r3, #0
   16614:	mov	r0, r3
   16618:	add	sp, fp, #0
   1661c:	pop	{fp}		; (ldr fp, [sp], #4)
   16620:	bx	lr
   16624:	push	{fp}		; (str fp, [sp, #-4]!)
   16628:	add	fp, sp, #0
   1662c:	sub	sp, sp, #12
   16630:	str	r0, [fp, #-8]
   16634:	ldr	r3, [fp, #-8]
   16638:	sub	r3, r3, #65	; 0x41
   1663c:	cmp	r3, #25
   16640:	bhi	16650 <__assert_fail@plt+0x57ac>
   16644:	ldr	r3, [fp, #-8]
   16648:	add	r3, r3, #32
   1664c:	b	16654 <__assert_fail@plt+0x57b0>
   16650:	ldr	r3, [fp, #-8]
   16654:	mov	r0, r3
   16658:	add	sp, fp, #0
   1665c:	pop	{fp}		; (ldr fp, [sp], #4)
   16660:	bx	lr
   16664:	push	{fp}		; (str fp, [sp, #-4]!)
   16668:	add	fp, sp, #0
   1666c:	sub	sp, sp, #12
   16670:	str	r0, [fp, #-8]
   16674:	ldr	r3, [fp, #-8]
   16678:	sub	r3, r3, #97	; 0x61
   1667c:	cmp	r3, #25
   16680:	bhi	16690 <__assert_fail@plt+0x57ec>
   16684:	ldr	r3, [fp, #-8]
   16688:	sub	r3, r3, #32
   1668c:	b	16694 <__assert_fail@plt+0x57f0>
   16690:	ldr	r3, [fp, #-8]
   16694:	mov	r0, r3
   16698:	add	sp, fp, #0
   1669c:	pop	{fp}		; (ldr fp, [sp], #4)
   166a0:	bx	lr
   166a4:	strd	r4, [sp, #-16]!
   166a8:	str	fp, [sp, #8]
   166ac:	str	lr, [sp, #12]
   166b0:	add	fp, sp, #12
   166b4:	sub	sp, sp, #16
   166b8:	str	r0, [fp, #-24]	; 0xffffffe8
   166bc:	str	r1, [fp, #-28]	; 0xffffffe4
   166c0:	ldr	r5, [fp, #-24]	; 0xffffffe8
   166c4:	ldr	r4, [fp, #-28]	; 0xffffffe4
   166c8:	cmp	r5, r4
   166cc:	bne	166d8 <__assert_fail@plt+0x5834>
   166d0:	mov	r3, #0
   166d4:	b	16738 <__assert_fail@plt+0x5894>
   166d8:	ldrb	r3, [r5]
   166dc:	mov	r0, r3
   166e0:	bl	16624 <__assert_fail@plt+0x5780>
   166e4:	mov	r3, r0
   166e8:	strb	r3, [fp, #-13]
   166ec:	ldrb	r3, [r4]
   166f0:	mov	r0, r3
   166f4:	bl	16624 <__assert_fail@plt+0x5780>
   166f8:	mov	r3, r0
   166fc:	strb	r3, [fp, #-14]
   16700:	ldrb	r3, [fp, #-13]
   16704:	cmp	r3, #0
   16708:	beq	16728 <__assert_fail@plt+0x5884>
   1670c:	add	r5, r5, #1
   16710:	add	r4, r4, #1
   16714:	ldrb	r2, [fp, #-13]
   16718:	ldrb	r3, [fp, #-14]
   1671c:	cmp	r2, r3
   16720:	beq	166d8 <__assert_fail@plt+0x5834>
   16724:	b	1672c <__assert_fail@plt+0x5888>
   16728:	nop	{0}
   1672c:	ldrb	r2, [fp, #-13]
   16730:	ldrb	r3, [fp, #-14]
   16734:	sub	r3, r2, r3
   16738:	mov	r0, r3
   1673c:	sub	sp, fp, #12
   16740:	ldrd	r4, [sp]
   16744:	ldr	fp, [sp, #8]
   16748:	add	sp, sp, #12
   1674c:	pop	{pc}		; (ldr pc, [sp], #4)
   16750:	str	fp, [sp, #-8]!
   16754:	str	lr, [sp, #4]
   16758:	add	fp, sp, #4
   1675c:	sub	sp, sp, #16
   16760:	str	r0, [fp, #-16]
   16764:	ldr	r0, [fp, #-16]
   16768:	bl	10d30 <__fpending@plt>
   1676c:	mov	r3, r0
   16770:	cmp	r3, #0
   16774:	movne	r3, #1
   16778:	moveq	r3, #0
   1677c:	strb	r3, [fp, #-5]
   16780:	ldr	r0, [fp, #-16]
   16784:	bl	10d3c <ferror_unlocked@plt>
   16788:	mov	r3, r0
   1678c:	cmp	r3, #0
   16790:	movne	r3, #1
   16794:	moveq	r3, #0
   16798:	strb	r3, [fp, #-6]
   1679c:	ldr	r0, [fp, #-16]
   167a0:	bl	16834 <__assert_fail@plt+0x5990>
   167a4:	mov	r3, r0
   167a8:	cmp	r3, #0
   167ac:	movne	r3, #1
   167b0:	moveq	r3, #0
   167b4:	strb	r3, [fp, #-7]
   167b8:	ldrb	r3, [fp, #-6]
   167bc:	cmp	r3, #0
   167c0:	bne	167f0 <__assert_fail@plt+0x594c>
   167c4:	ldrb	r3, [fp, #-7]
   167c8:	cmp	r3, #0
   167cc:	beq	1681c <__assert_fail@plt+0x5978>
   167d0:	ldrb	r3, [fp, #-5]
   167d4:	cmp	r3, #0
   167d8:	bne	167f0 <__assert_fail@plt+0x594c>
   167dc:	bl	10dfc <__errno_location@plt>
   167e0:	mov	r3, r0
   167e4:	ldr	r3, [r3]
   167e8:	cmp	r3, #9
   167ec:	beq	1681c <__assert_fail@plt+0x5978>
   167f0:	ldrb	r3, [fp, #-7]
   167f4:	eor	r3, r3, #1
   167f8:	uxtb	r3, r3
   167fc:	cmp	r3, #0
   16800:	beq	16814 <__assert_fail@plt+0x5970>
   16804:	bl	10dfc <__errno_location@plt>
   16808:	mov	r2, r0
   1680c:	mov	r3, #0
   16810:	str	r3, [r2]
   16814:	mvn	r3, #0
   16818:	b	16820 <__assert_fail@plt+0x597c>
   1681c:	mov	r3, #0
   16820:	mov	r0, r3
   16824:	sub	sp, fp, #4
   16828:	ldr	fp, [sp]
   1682c:	add	sp, sp, #4
   16830:	pop	{pc}		; (ldr pc, [sp], #4)
   16834:	str	fp, [sp, #-8]!
   16838:	str	lr, [sp, #4]
   1683c:	add	fp, sp, #4
   16840:	sub	sp, sp, #32
   16844:	str	r0, [fp, #-24]	; 0xffffffe8
   16848:	mov	r3, #0
   1684c:	str	r3, [fp, #-8]
   16850:	mov	r3, #0
   16854:	str	r3, [fp, #-12]
   16858:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1685c:	bl	10e20 <fileno@plt>
   16860:	str	r0, [fp, #-16]
   16864:	ldr	r3, [fp, #-16]
   16868:	cmp	r3, #0
   1686c:	bge	16880 <__assert_fail@plt+0x59dc>
   16870:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16874:	bl	10e38 <fclose@plt>
   16878:	mov	r3, r0
   1687c:	b	16924 <__assert_fail@plt+0x5a80>
   16880:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16884:	bl	10d84 <__freading@plt>
   16888:	mov	r3, r0
   1688c:	cmp	r3, #0
   16890:	beq	168cc <__assert_fail@plt+0x5a28>
   16894:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16898:	bl	10e20 <fileno@plt>
   1689c:	mov	r1, r0
   168a0:	mov	r3, #1
   168a4:	str	r3, [sp]
   168a8:	mov	r2, #0
   168ac:	mov	r3, #0
   168b0:	mov	r0, r1
   168b4:	bl	10d18 <lseek64@plt>
   168b8:	mvn	r2, #0
   168bc:	mvn	r3, #0
   168c0:	cmp	r1, r3
   168c4:	cmpeq	r0, r2
   168c8:	beq	168f0 <__assert_fail@plt+0x5a4c>
   168cc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   168d0:	bl	1698c <__assert_fail@plt+0x5ae8>
   168d4:	mov	r3, r0
   168d8:	cmp	r3, #0
   168dc:	beq	168f0 <__assert_fail@plt+0x5a4c>
   168e0:	bl	10dfc <__errno_location@plt>
   168e4:	mov	r3, r0
   168e8:	ldr	r3, [r3]
   168ec:	str	r3, [fp, #-8]
   168f0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   168f4:	bl	10e38 <fclose@plt>
   168f8:	str	r0, [fp, #-12]
   168fc:	ldr	r3, [fp, #-8]
   16900:	cmp	r3, #0
   16904:	beq	16920 <__assert_fail@plt+0x5a7c>
   16908:	bl	10dfc <__errno_location@plt>
   1690c:	mov	r2, r0
   16910:	ldr	r3, [fp, #-8]
   16914:	str	r3, [r2]
   16918:	mvn	r3, #0
   1691c:	str	r3, [fp, #-12]
   16920:	ldr	r3, [fp, #-12]
   16924:	mov	r0, r3
   16928:	sub	sp, fp, #4
   1692c:	ldr	fp, [sp]
   16930:	add	sp, sp, #4
   16934:	pop	{pc}		; (ldr pc, [sp], #4)
   16938:	str	fp, [sp, #-8]!
   1693c:	str	lr, [sp, #4]
   16940:	add	fp, sp, #4
   16944:	sub	sp, sp, #16
   16948:	str	r0, [fp, #-8]
   1694c:	ldr	r3, [fp, #-8]
   16950:	ldr	r3, [r3]
   16954:	and	r3, r3, #256	; 0x100
   16958:	cmp	r3, #0
   1695c:	beq	16978 <__assert_fail@plt+0x5ad4>
   16960:	mov	r3, #1
   16964:	str	r3, [sp]
   16968:	mov	r2, #0
   1696c:	mov	r3, #0
   16970:	ldr	r0, [fp, #-8]
   16974:	bl	16a9c <__assert_fail@plt+0x5bf8>
   16978:	nop	{0}
   1697c:	sub	sp, fp, #4
   16980:	ldr	fp, [sp]
   16984:	add	sp, sp, #4
   16988:	pop	{pc}		; (ldr pc, [sp], #4)
   1698c:	str	fp, [sp, #-8]!
   16990:	str	lr, [sp, #4]
   16994:	add	fp, sp, #4
   16998:	sub	sp, sp, #8
   1699c:	str	r0, [fp, #-8]
   169a0:	ldr	r3, [fp, #-8]
   169a4:	cmp	r3, #0
   169a8:	beq	169c0 <__assert_fail@plt+0x5b1c>
   169ac:	ldr	r0, [fp, #-8]
   169b0:	bl	10d84 <__freading@plt>
   169b4:	mov	r3, r0
   169b8:	cmp	r3, #0
   169bc:	bne	169d0 <__assert_fail@plt+0x5b2c>
   169c0:	ldr	r0, [fp, #-8]
   169c4:	bl	10c7c <fflush@plt>
   169c8:	mov	r3, r0
   169cc:	b	169e4 <__assert_fail@plt+0x5b40>
   169d0:	ldr	r0, [fp, #-8]
   169d4:	bl	16938 <__assert_fail@plt+0x5a94>
   169d8:	ldr	r0, [fp, #-8]
   169dc:	bl	10c7c <fflush@plt>
   169e0:	mov	r3, r0
   169e4:	mov	r0, r3
   169e8:	sub	sp, fp, #4
   169ec:	ldr	fp, [sp]
   169f0:	add	sp, sp, #4
   169f4:	pop	{pc}		; (ldr pc, [sp], #4)
   169f8:	str	r4, [sp, #-12]!
   169fc:	str	fp, [sp, #4]
   16a00:	str	lr, [sp, #8]
   16a04:	add	fp, sp, #8
   16a08:	sub	sp, sp, #20
   16a0c:	str	r0, [fp, #-24]	; 0xffffffe8
   16a10:	bl	10dfc <__errno_location@plt>
   16a14:	mov	r3, r0
   16a18:	ldr	r3, [r3]
   16a1c:	str	r3, [fp, #-20]	; 0xffffffec
   16a20:	bl	10dfc <__errno_location@plt>
   16a24:	mov	r3, r0
   16a28:	ldr	r3, [r3]
   16a2c:	str	r3, [fp, #-16]
   16a30:	bl	10dfc <__errno_location@plt>
   16a34:	mov	r2, r0
   16a38:	mov	r3, #0
   16a3c:	str	r3, [r2]
   16a40:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16a44:	bl	10c88 <free@plt>
   16a48:	bl	10dfc <__errno_location@plt>
   16a4c:	mov	r3, r0
   16a50:	ldr	r3, [r3]
   16a54:	cmp	r3, #0
   16a58:	moveq	r3, #1
   16a5c:	movne	r3, #0
   16a60:	uxtb	r3, r3
   16a64:	mov	r4, r3
   16a68:	bl	10dfc <__errno_location@plt>
   16a6c:	mov	r2, r0
   16a70:	lsl	r3, r4, #2
   16a74:	sub	r1, fp, #12
   16a78:	add	r3, r1, r3
   16a7c:	ldr	r3, [r3, #-8]
   16a80:	str	r3, [r2]
   16a84:	nop	{0}
   16a88:	sub	sp, fp, #8
   16a8c:	ldr	r4, [sp]
   16a90:	ldr	fp, [sp, #4]
   16a94:	add	sp, sp, #8
   16a98:	pop	{pc}		; (ldr pc, [sp], #4)
   16a9c:	str	fp, [sp, #-8]!
   16aa0:	str	lr, [sp, #4]
   16aa4:	add	fp, sp, #4
   16aa8:	sub	sp, sp, #32
   16aac:	str	r0, [fp, #-16]
   16ab0:	strd	r2, [fp, #-28]	; 0xffffffe4
   16ab4:	ldr	r3, [fp, #-16]
   16ab8:	ldr	r2, [r3, #8]
   16abc:	ldr	r3, [fp, #-16]
   16ac0:	ldr	r3, [r3, #4]
   16ac4:	cmp	r2, r3
   16ac8:	bne	16b60 <__assert_fail@plt+0x5cbc>
   16acc:	ldr	r3, [fp, #-16]
   16ad0:	ldr	r2, [r3, #20]
   16ad4:	ldr	r3, [fp, #-16]
   16ad8:	ldr	r3, [r3, #16]
   16adc:	cmp	r2, r3
   16ae0:	bne	16b60 <__assert_fail@plt+0x5cbc>
   16ae4:	ldr	r3, [fp, #-16]
   16ae8:	ldr	r3, [r3, #36]	; 0x24
   16aec:	cmp	r3, #0
   16af0:	bne	16b60 <__assert_fail@plt+0x5cbc>
   16af4:	ldr	r0, [fp, #-16]
   16af8:	bl	10e20 <fileno@plt>
   16afc:	mov	r1, r0
   16b00:	ldr	r3, [fp, #4]
   16b04:	str	r3, [sp]
   16b08:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   16b0c:	mov	r0, r1
   16b10:	bl	10d18 <lseek64@plt>
   16b14:	strd	r0, [fp, #-12]
   16b18:	ldrd	r2, [fp, #-12]
   16b1c:	mvn	r0, #0
   16b20:	mvn	r1, #0
   16b24:	cmp	r3, r1
   16b28:	cmpeq	r2, r0
   16b2c:	bne	16b38 <__assert_fail@plt+0x5c94>
   16b30:	mvn	r3, #0
   16b34:	b	16b78 <__assert_fail@plt+0x5cd4>
   16b38:	ldr	r3, [fp, #-16]
   16b3c:	ldr	r3, [r3]
   16b40:	bic	r2, r3, #16
   16b44:	ldr	r3, [fp, #-16]
   16b48:	str	r2, [r3]
   16b4c:	ldr	r1, [fp, #-16]
   16b50:	ldrd	r2, [fp, #-12]
   16b54:	strd	r2, [r1, #80]	; 0x50
   16b58:	mov	r3, #0
   16b5c:	b	16b78 <__assert_fail@plt+0x5cd4>
   16b60:	ldr	r3, [fp, #4]
   16b64:	str	r3, [sp]
   16b68:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   16b6c:	ldr	r0, [fp, #-16]
   16b70:	bl	10e44 <fseeko64@plt>
   16b74:	mov	r3, r0
   16b78:	mov	r0, r3
   16b7c:	sub	sp, fp, #4
   16b80:	ldr	fp, [sp]
   16b84:	add	sp, sp, #4
   16b88:	pop	{pc}		; (ldr pc, [sp], #4)
   16b8c:	str	fp, [sp, #-8]!
   16b90:	str	lr, [sp, #4]
   16b94:	add	fp, sp, #4
   16b98:	bl	10dfc <__errno_location@plt>
   16b9c:	mov	r2, r0
   16ba0:	mov	r3, #12
   16ba4:	str	r3, [r2]
   16ba8:	mov	r3, #0
   16bac:	mov	r0, r3
   16bb0:	sub	sp, fp, #4
   16bb4:	ldr	fp, [sp]
   16bb8:	add	sp, sp, #4
   16bbc:	pop	{pc}		; (ldr pc, [sp], #4)
   16bc0:	str	fp, [sp, #-8]!
   16bc4:	str	lr, [sp, #4]
   16bc8:	add	fp, sp, #4
   16bcc:	sub	sp, sp, #8
   16bd0:	str	r0, [fp, #-8]
   16bd4:	ldr	r3, [fp, #-8]
   16bd8:	mov	r0, r3
   16bdc:	bl	16034 <__assert_fail@plt+0x5190>
   16be0:	mov	r3, r0
   16be4:	mov	r0, r3
   16be8:	sub	sp, fp, #4
   16bec:	ldr	fp, [sp]
   16bf0:	add	sp, sp, #4
   16bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   16bf8:	str	fp, [sp, #-8]!
   16bfc:	str	lr, [sp, #4]
   16c00:	add	fp, sp, #4
   16c04:	sub	sp, sp, #8
   16c08:	str	r0, [fp, #-8]
   16c0c:	str	r1, [fp, #-12]
   16c10:	ldr	r3, [fp, #-12]
   16c14:	cmp	r3, #0
   16c18:	moveq	r3, #1
   16c1c:	movne	r3, #0
   16c20:	uxtb	r3, r3
   16c24:	mov	r2, r3
   16c28:	ldr	r3, [fp, #-12]
   16c2c:	orr	r3, r2, r3
   16c30:	mov	r1, r3
   16c34:	ldr	r0, [fp, #-8]
   16c38:	bl	160c4 <__assert_fail@plt+0x5220>
   16c3c:	mov	r3, r0
   16c40:	mov	r0, r3
   16c44:	sub	sp, fp, #4
   16c48:	ldr	fp, [sp]
   16c4c:	add	sp, sp, #4
   16c50:	pop	{pc}		; (ldr pc, [sp], #4)
   16c54:	str	fp, [sp, #-8]!
   16c58:	str	lr, [sp, #4]
   16c5c:	add	fp, sp, #4
   16c60:	sub	sp, sp, #8
   16c64:	str	r0, [fp, #-8]
   16c68:	str	r1, [fp, #-12]
   16c6c:	ldr	r3, [fp, #-8]
   16c70:	ldr	r2, [fp, #-12]
   16c74:	mov	r1, r2
   16c78:	mov	r0, r3
   16c7c:	bl	15f64 <__assert_fail@plt+0x50c0>
   16c80:	mov	r3, r0
   16c84:	mov	r0, r3
   16c88:	sub	sp, fp, #4
   16c8c:	ldr	fp, [sp]
   16c90:	add	sp, sp, #4
   16c94:	pop	{pc}		; (ldr pc, [sp], #4)
   16c98:	str	fp, [sp, #-8]!
   16c9c:	str	lr, [sp, #4]
   16ca0:	add	fp, sp, #4
   16ca4:	sub	sp, sp, #16
   16ca8:	str	r0, [fp, #-8]
   16cac:	str	r1, [fp, #-12]
   16cb0:	str	r2, [fp, #-16]
   16cb4:	ldr	r3, [fp, #-12]
   16cb8:	cmp	r3, #0
   16cbc:	beq	16ccc <__assert_fail@plt+0x5e28>
   16cc0:	ldr	r3, [fp, #-16]
   16cc4:	cmp	r3, #0
   16cc8:	bne	16cdc <__assert_fail@plt+0x5e38>
   16ccc:	mov	r3, #1
   16cd0:	str	r3, [fp, #-16]
   16cd4:	ldr	r3, [fp, #-16]
   16cd8:	str	r3, [fp, #-12]
   16cdc:	ldr	r3, [fp, #-12]
   16ce0:	ldr	r2, [fp, #-16]
   16ce4:	mov	r1, r3
   16ce8:	ldr	r0, [fp, #-8]
   16cec:	bl	16e28 <__assert_fail@plt+0x5f84>
   16cf0:	mov	r3, r0
   16cf4:	mov	r0, r3
   16cf8:	sub	sp, fp, #4
   16cfc:	ldr	fp, [sp]
   16d00:	add	sp, sp, #4
   16d04:	pop	{pc}		; (ldr pc, [sp], #4)
   16d08:	str	fp, [sp, #-8]!
   16d0c:	str	lr, [sp, #4]
   16d10:	add	fp, sp, #4
   16d14:	sub	sp, sp, #8
   16d18:	mov	r0, #14
   16d1c:	bl	10e68 <nl_langinfo@plt>
   16d20:	str	r0, [fp, #-8]
   16d24:	ldr	r3, [fp, #-8]
   16d28:	cmp	r3, #0
   16d2c:	bne	16d3c <__assert_fail@plt+0x5e98>
   16d30:	movw	r3, #31448	; 0x7ad8
   16d34:	movt	r3, #1
   16d38:	str	r3, [fp, #-8]
   16d3c:	ldr	r3, [fp, #-8]
   16d40:	ldrb	r3, [r3]
   16d44:	cmp	r3, #0
   16d48:	bne	16d58 <__assert_fail@plt+0x5eb4>
   16d4c:	movw	r3, #31452	; 0x7adc
   16d50:	movt	r3, #1
   16d54:	str	r3, [fp, #-8]
   16d58:	ldr	r3, [fp, #-8]
   16d5c:	mov	r0, r3
   16d60:	sub	sp, fp, #4
   16d64:	ldr	fp, [sp]
   16d68:	add	sp, sp, #4
   16d6c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d70:	str	fp, [sp, #-8]!
   16d74:	str	lr, [sp, #4]
   16d78:	add	fp, sp, #4
   16d7c:	sub	sp, sp, #32
   16d80:	str	r0, [fp, #-24]	; 0xffffffe8
   16d84:	str	r1, [fp, #-28]	; 0xffffffe4
   16d88:	str	r2, [fp, #-32]	; 0xffffffe0
   16d8c:	str	r3, [fp, #-36]	; 0xffffffdc
   16d90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16d94:	cmp	r3, #0
   16d98:	bne	16da4 <__assert_fail@plt+0x5f00>
   16d9c:	sub	r3, fp, #16
   16da0:	str	r3, [fp, #-24]	; 0xffffffe8
   16da4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   16da8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16dac:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16db0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16db4:	bl	10d48 <mbrtowc@plt>
   16db8:	str	r0, [fp, #-8]
   16dbc:	ldr	r3, [fp, #-8]
   16dc0:	cmn	r3, #3
   16dc4:	bls	16e10 <__assert_fail@plt+0x5f6c>
   16dc8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   16dcc:	cmp	r3, #0
   16dd0:	beq	16e10 <__assert_fail@plt+0x5f6c>
   16dd4:	mov	r0, #0
   16dd8:	bl	16ecc <__assert_fail@plt+0x6028>
   16ddc:	mov	r3, r0
   16de0:	eor	r3, r3, #1
   16de4:	uxtb	r3, r3
   16de8:	cmp	r3, #0
   16dec:	beq	16e10 <__assert_fail@plt+0x5f6c>
   16df0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16df4:	ldrb	r3, [r3]
   16df8:	strb	r3, [fp, #-9]
   16dfc:	ldrb	r2, [fp, #-9]
   16e00:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e04:	str	r2, [r3]
   16e08:	mov	r3, #1
   16e0c:	b	16e14 <__assert_fail@plt+0x5f70>
   16e10:	ldr	r3, [fp, #-8]
   16e14:	mov	r0, r3
   16e18:	sub	sp, fp, #4
   16e1c:	ldr	fp, [sp]
   16e20:	add	sp, sp, #4
   16e24:	pop	{pc}		; (ldr pc, [sp], #4)
   16e28:	str	fp, [sp, #-8]!
   16e2c:	str	lr, [sp, #4]
   16e30:	add	fp, sp, #4
   16e34:	sub	sp, sp, #24
   16e38:	str	r0, [fp, #-16]
   16e3c:	str	r1, [fp, #-20]	; 0xffffffec
   16e40:	str	r2, [fp, #-24]	; 0xffffffe8
   16e44:	mov	ip, #0
   16e48:	ldr	r2, [fp, #-20]	; 0xffffffec
   16e4c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16e50:	umull	r0, r1, r2, r3
   16e54:	mov	r2, #0
   16e58:	mov	r3, #0
   16e5c:	mov	r2, r1
   16e60:	mov	r3, #0
   16e64:	cmp	r2, #0
   16e68:	beq	16e70 <__assert_fail@plt+0x5fcc>
   16e6c:	mov	ip, #1
   16e70:	mov	r3, r0
   16e74:	str	r3, [fp, #-8]
   16e78:	mov	r3, ip
   16e7c:	and	r3, r3, #1
   16e80:	uxtb	r3, r3
   16e84:	cmp	r3, #0
   16e88:	beq	16ea4 <__assert_fail@plt+0x6000>
   16e8c:	bl	10dfc <__errno_location@plt>
   16e90:	mov	r2, r0
   16e94:	mov	r3, #12
   16e98:	str	r3, [r2]
   16e9c:	mov	r3, #0
   16ea0:	b	16eb8 <__assert_fail@plt+0x6014>
   16ea4:	ldr	r3, [fp, #-8]
   16ea8:	mov	r1, r3
   16eac:	ldr	r0, [fp, #-16]
   16eb0:	bl	160c4 <__assert_fail@plt+0x5220>
   16eb4:	mov	r3, r0
   16eb8:	mov	r0, r3
   16ebc:	sub	sp, fp, #4
   16ec0:	ldr	fp, [sp]
   16ec4:	add	sp, sp, #4
   16ec8:	pop	{pc}		; (ldr pc, [sp], #4)
   16ecc:	str	fp, [sp, #-8]!
   16ed0:	str	lr, [sp, #4]
   16ed4:	add	fp, sp, #4
   16ed8:	sub	sp, sp, #272	; 0x110
   16edc:	str	r0, [fp, #-272]	; 0xfffffef0
   16ee0:	sub	r3, fp, #264	; 0x108
   16ee4:	movw	r2, #257	; 0x101
   16ee8:	mov	r1, r3
   16eec:	ldr	r0, [fp, #-272]	; 0xfffffef0
   16ef0:	bl	17090 <__assert_fail@plt+0x61ec>
   16ef4:	mov	r3, r0
   16ef8:	cmp	r3, #0
   16efc:	beq	16f08 <__assert_fail@plt+0x6064>
   16f00:	mov	r3, #0
   16f04:	b	16f5c <__assert_fail@plt+0x60b8>
   16f08:	sub	r3, fp, #264	; 0x108
   16f0c:	movw	r1, #31460	; 0x7ae4
   16f10:	movt	r1, #1
   16f14:	mov	r0, r3
   16f18:	bl	10c64 <strcmp@plt>
   16f1c:	mov	r3, r0
   16f20:	cmp	r3, #0
   16f24:	beq	16f50 <__assert_fail@plt+0x60ac>
   16f28:	sub	r3, fp, #264	; 0x108
   16f2c:	movw	r1, #31464	; 0x7ae8
   16f30:	movt	r1, #1
   16f34:	mov	r0, r3
   16f38:	bl	10c64 <strcmp@plt>
   16f3c:	mov	r3, r0
   16f40:	cmp	r3, #0
   16f44:	beq	16f50 <__assert_fail@plt+0x60ac>
   16f48:	mov	r3, #1
   16f4c:	b	16f54 <__assert_fail@plt+0x60b0>
   16f50:	mov	r3, #0
   16f54:	and	r3, r3, #1
   16f58:	uxtb	r3, r3
   16f5c:	mov	r0, r3
   16f60:	sub	sp, fp, #4
   16f64:	ldr	fp, [sp]
   16f68:	add	sp, sp, #4
   16f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   16f70:	str	fp, [sp, #-8]!
   16f74:	str	lr, [sp, #4]
   16f78:	add	fp, sp, #4
   16f7c:	sub	sp, sp, #16
   16f80:	str	r0, [fp, #-16]
   16f84:	mov	r1, #0
   16f88:	ldr	r0, [fp, #-16]
   16f8c:	bl	10e50 <setlocale@plt>
   16f90:	str	r0, [fp, #-8]
   16f94:	ldr	r3, [fp, #-8]
   16f98:	mov	r0, r3
   16f9c:	sub	sp, fp, #4
   16fa0:	ldr	fp, [sp]
   16fa4:	add	sp, sp, #4
   16fa8:	pop	{pc}		; (ldr pc, [sp], #4)
   16fac:	str	fp, [sp, #-8]!
   16fb0:	str	lr, [sp, #4]
   16fb4:	add	fp, sp, #4
   16fb8:	sub	sp, sp, #24
   16fbc:	str	r0, [fp, #-16]
   16fc0:	str	r1, [fp, #-20]	; 0xffffffec
   16fc4:	str	r2, [fp, #-24]	; 0xffffffe8
   16fc8:	ldr	r0, [fp, #-16]
   16fcc:	bl	16f70 <__assert_fail@plt+0x60cc>
   16fd0:	str	r0, [fp, #-8]
   16fd4:	ldr	r3, [fp, #-8]
   16fd8:	cmp	r3, #0
   16fdc:	bne	17000 <__assert_fail@plt+0x615c>
   16fe0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16fe4:	cmp	r3, #0
   16fe8:	beq	16ff8 <__assert_fail@plt+0x6154>
   16fec:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ff0:	mov	r2, #0
   16ff4:	strb	r2, [r3]
   16ff8:	mov	r3, #22
   16ffc:	b	1707c <__assert_fail@plt+0x61d8>
   17000:	ldr	r0, [fp, #-8]
   17004:	bl	10dd8 <strlen@plt>
   17008:	str	r0, [fp, #-12]
   1700c:	ldr	r2, [fp, #-12]
   17010:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17014:	cmp	r2, r3
   17018:	bcs	1703c <__assert_fail@plt+0x6198>
   1701c:	ldr	r3, [fp, #-12]
   17020:	add	r3, r3, #1
   17024:	mov	r2, r3
   17028:	ldr	r1, [fp, #-8]
   1702c:	ldr	r0, [fp, #-20]	; 0xffffffec
   17030:	bl	10ca0 <memcpy@plt>
   17034:	mov	r3, #0
   17038:	b	1707c <__assert_fail@plt+0x61d8>
   1703c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17040:	cmp	r3, #0
   17044:	beq	17078 <__assert_fail@plt+0x61d4>
   17048:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1704c:	sub	r3, r3, #1
   17050:	mov	r2, r3
   17054:	ldr	r1, [fp, #-8]
   17058:	ldr	r0, [fp, #-20]	; 0xffffffec
   1705c:	bl	10ca0 <memcpy@plt>
   17060:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17064:	sub	r3, r3, #1
   17068:	ldr	r2, [fp, #-20]	; 0xffffffec
   1706c:	add	r3, r2, r3
   17070:	mov	r2, #0
   17074:	strb	r2, [r3]
   17078:	mov	r3, #34	; 0x22
   1707c:	mov	r0, r3
   17080:	sub	sp, fp, #4
   17084:	ldr	fp, [sp]
   17088:	add	sp, sp, #4
   1708c:	pop	{pc}		; (ldr pc, [sp], #4)
   17090:	str	fp, [sp, #-8]!
   17094:	str	lr, [sp, #4]
   17098:	add	fp, sp, #4
   1709c:	sub	sp, sp, #16
   170a0:	str	r0, [fp, #-8]
   170a4:	str	r1, [fp, #-12]
   170a8:	str	r2, [fp, #-16]
   170ac:	ldr	r2, [fp, #-16]
   170b0:	ldr	r1, [fp, #-12]
   170b4:	ldr	r0, [fp, #-8]
   170b8:	bl	16fac <__assert_fail@plt+0x6108>
   170bc:	mov	r3, r0
   170c0:	mov	r0, r3
   170c4:	sub	sp, fp, #4
   170c8:	ldr	fp, [sp]
   170cc:	add	sp, sp, #4
   170d0:	pop	{pc}		; (ldr pc, [sp], #4)
   170d4:	str	fp, [sp, #-8]!
   170d8:	str	lr, [sp, #4]
   170dc:	add	fp, sp, #4
   170e0:	sub	sp, sp, #8
   170e4:	str	r0, [fp, #-8]
   170e8:	ldr	r0, [fp, #-8]
   170ec:	bl	16f70 <__assert_fail@plt+0x60cc>
   170f0:	mov	r3, r0
   170f4:	mov	r0, r3
   170f8:	sub	sp, fp, #4
   170fc:	ldr	fp, [sp]
   17100:	add	sp, sp, #4
   17104:	pop	{pc}		; (ldr pc, [sp], #4)
   17108:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1710c:	mov	r7, r0
   17110:	ldr	r6, [pc, #72]	; 17160 <__assert_fail@plt+0x62bc>
   17114:	ldr	r5, [pc, #72]	; 17164 <__assert_fail@plt+0x62c0>
   17118:	add	r6, pc, r6
   1711c:	add	r5, pc, r5
   17120:	sub	r6, r6, r5
   17124:	mov	r8, r1
   17128:	mov	r9, r2
   1712c:	bl	10c2c <calloc@plt-0x20>
   17130:	asrs	r6, r6, #2
   17134:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17138:	mov	r4, #0
   1713c:	add	r4, r4, #1
   17140:	ldr	r3, [r5], #4
   17144:	mov	r2, r9
   17148:	mov	r1, r8
   1714c:	mov	r0, r7
   17150:	blx	r3
   17154:	cmp	r6, r4
   17158:	bne	1713c <__assert_fail@plt+0x6298>
   1715c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17160:	strdeq	r0, [r1], -r4
   17164:	andeq	r0, r1, ip, ror #27
   17168:	bx	lr
   1716c:	ldr	r3, [pc, #12]	; 17180 <__assert_fail@plt+0x62dc>
   17170:	mov	r1, #0
   17174:	add	r3, pc, r3
   17178:	ldr	r2, [r3]
   1717c:	b	10e08 <__cxa_atexit@plt>
   17180:	andeq	r0, r1, r4, ror #30

Disassembly of section .fini:

00017184 <.fini>:
   17184:	push	{r3, lr}
   17188:	pop	{r3, pc}
