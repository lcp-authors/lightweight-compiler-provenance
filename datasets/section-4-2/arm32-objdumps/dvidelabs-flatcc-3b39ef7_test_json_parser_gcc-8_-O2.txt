
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_json_parser:     file format elf32-littlearm


Disassembly of section .init:

00012548 <.init>:
   12548:	push	{r3, lr}
   1254c:	bl	12774 <_start@@Base+0x3c>
   12550:	pop	{r3, pc}

Disassembly of section .plt:

00012554 <fopen@plt-0x14>:
   12554:	push	{lr}		; (str lr, [sp, #-4]!)
   12558:	ldr	lr, [pc, #4]	; 12564 <fopen@plt-0x4>
   1255c:	add	lr, pc, lr
   12560:	ldr	pc, [lr, #8]!
   12564:	muleq	r2, ip, sl

00012568 <fopen@plt>:
   12568:	add	ip, pc, #0, 12
   1256c:	add	ip, ip, #172032	; 0x2a000
   12570:	ldr	pc, [ip, #2716]!	; 0xa9c

00012574 <free@plt>:
   12574:	add	ip, pc, #0, 12
   12578:	add	ip, ip, #172032	; 0x2a000
   1257c:	ldr	pc, [ip, #2708]!	; 0xa94

00012580 <memcpy@plt>:
   12580:	add	ip, pc, #0, 12
   12584:	add	ip, ip, #172032	; 0x2a000
   12588:	ldr	pc, [ip, #2700]!	; 0xa8c

0001258c <ftell@plt>:
   1258c:	add	ip, pc, #0, 12
   12590:	add	ip, ip, #172032	; 0x2a000
   12594:	ldr	pc, [ip, #2692]!	; 0xa84

00012598 <memcmp@plt>:
   12598:	add	ip, pc, #0, 12
   1259c:	add	ip, ip, #172032	; 0x2a000
   125a0:	ldr	pc, [ip, #2684]!	; 0xa7c

000125a4 <rewind@plt>:
   125a4:	add	ip, pc, #0, 12
   125a8:	add	ip, ip, #172032	; 0x2a000
   125ac:	ldr	pc, [ip, #2676]!	; 0xa74

000125b0 <realloc@plt>:
   125b0:	add	ip, pc, #0, 12
   125b4:	add	ip, ip, #172032	; 0x2a000
   125b8:	ldr	pc, [ip, #2668]!	; 0xa6c

000125bc <fwrite@plt>:
   125bc:	add	ip, pc, #0, 12
   125c0:	add	ip, ip, #172032	; 0x2a000
   125c4:	ldr	pc, [ip, #2660]!	; 0xa64

000125c8 <fread@plt>:
   125c8:	add	ip, pc, #0, 12
   125cc:	add	ip, ip, #172032	; 0x2a000
   125d0:	ldr	pc, [ip, #2652]!	; 0xa5c

000125d4 <malloc@plt>:
   125d4:	add	ip, pc, #0, 12
   125d8:	add	ip, ip, #172032	; 0x2a000
   125dc:	ldr	pc, [ip, #2644]!	; 0xa54

000125e0 <__libc_start_main@plt>:
   125e0:	add	ip, pc, #0, 12
   125e4:	add	ip, ip, #172032	; 0x2a000
   125e8:	ldr	pc, [ip, #2636]!	; 0xa4c

000125ec <__gmon_start__@plt>:
   125ec:	add	ip, pc, #0, 12
   125f0:	add	ip, ip, #172032	; 0x2a000
   125f4:	ldr	pc, [ip, #2628]!	; 0xa44

000125f8 <exit@plt>:
   125f8:	add	ip, pc, #0, 12
   125fc:	add	ip, ip, #172032	; 0x2a000
   12600:	ldr	pc, [ip, #2620]!	; 0xa3c

00012604 <strlen@plt>:
   12604:	add	ip, pc, #0, 12
   12608:	add	ip, ip, #172032	; 0x2a000
   1260c:	ldr	pc, [ip, #2612]!	; 0xa34

00012610 <fprintf@plt>:
   12610:	add	ip, pc, #0, 12
   12614:	add	ip, ip, #172032	; 0x2a000
   12618:	ldr	pc, [ip, #2604]!	; 0xa2c

0001261c <posix_memalign@plt>:
   1261c:	add	ip, pc, #0, 12
   12620:	add	ip, ip, #172032	; 0x2a000
   12624:	ldr	pc, [ip, #2596]!	; 0xa24

00012628 <memset@plt>:
   12628:	add	ip, pc, #0, 12
   1262c:	add	ip, ip, #172032	; 0x2a000
   12630:	ldr	pc, [ip, #2588]!	; 0xa1c

00012634 <strtod@plt>:
   12634:	add	ip, pc, #0, 12
   12638:	add	ip, ip, #172032	; 0x2a000
   1263c:	ldr	pc, [ip, #2580]!	; 0xa14

00012640 <memchr@plt>:
   12640:	add	ip, pc, #0, 12
   12644:	add	ip, ip, #172032	; 0x2a000
   12648:	ldr	pc, [ip, #2572]!	; 0xa0c

0001264c <fclose@plt>:
   1264c:	add	ip, pc, #0, 12
   12650:	add	ip, ip, #172032	; 0x2a000
   12654:	ldr	pc, [ip, #2564]!	; 0xa04

00012658 <fputc@plt>:
   12658:	add	ip, pc, #0, 12
   1265c:	add	ip, ip, #172032	; 0x2a000
   12660:	ldr	pc, [ip, #2556]!	; 0x9fc

00012664 <fseek@plt>:
   12664:	add	ip, pc, #0, 12
   12668:	add	ip, ip, #172032	; 0x2a000
   1266c:	ldr	pc, [ip, #2548]!	; 0x9f4

00012670 <abort@plt>:
   12670:	add	ip, pc, #0, 12
   12674:	add	ip, ip, #172032	; 0x2a000
   12678:	ldr	pc, [ip, #2540]!	; 0x9ec

0001267c <__assert_fail@plt>:
   1267c:	add	ip, pc, #0, 12
   12680:	add	ip, ip, #172032	; 0x2a000
   12684:	ldr	pc, [ip, #2532]!	; 0x9e4

Disassembly of section .text:

00012688 <main@@Base>:
   12688:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1268c:	mov	r5, r0
   12690:	mov	r2, #16
   12694:	ldr	r4, [pc, #136]	; 12724 <main@@Base+0x9c>
   12698:	strd	r6, [sp, #8]
   1269c:	mov	r7, r1
   126a0:	mov	r1, #1
   126a4:	ldr	r3, [pc, #124]	; 12728 <main@@Base+0xa0>
   126a8:	str	r8, [sp, #16]
   126ac:	ldr	r0, [pc, #120]	; 1272c <main@@Base+0xa4>
   126b0:	add	r4, pc, r4
   126b4:	str	lr, [sp, #20]
   126b8:	ldr	r6, [r4, r3]
   126bc:	add	r0, pc, r0
   126c0:	ldr	r3, [r6]
   126c4:	bl	125bc <fwrite@plt>
   126c8:	sub	r3, r5, #1
   126cc:	cmp	r3, #1
   126d0:	bhi	12704 <main@@Base+0x7c>
   126d4:	cmp	r5, #2
   126d8:	bne	126ec <main@@Base+0x64>
   126dc:	ldr	r3, [pc, #76]	; 12730 <main@@Base+0xa8>
   126e0:	ldr	r2, [r7, #4]
   126e4:	ldr	r3, [r4, r3]
   126e8:	str	r2, [r3]
   126ec:	ldrd	r4, [sp]
   126f0:	ldrd	r6, [sp, #8]
   126f4:	ldr	r8, [sp, #16]
   126f8:	ldr	lr, [sp, #20]
   126fc:	add	sp, sp, #24
   12700:	b	20b80 <test_parse@@Base>
   12704:	ldr	r0, [pc, #40]	; 12734 <main@@Base+0xac>
   12708:	mov	r2, #63	; 0x3f
   1270c:	mov	r1, #1
   12710:	ldr	r3, [r6]
   12714:	add	r0, pc, r0
   12718:	bl	125bc <fwrite@plt>
   1271c:	mov	r0, #1
   12720:	bl	125f8 <exit@plt>
   12724:	andeq	sl, r2, r8, asr #18
   12728:	andeq	r0, r0, r0, ror r0
   1272c:	andeq	r8, r1, r8, lsr #8
   12730:	andeq	r0, r0, r8, ror r0
   12734:	andeq	r8, r1, r4, ror #7

00012738 <_start@@Base>:
   12738:	mov	fp, #0
   1273c:	mov	lr, #0
   12740:	pop	{r1}		; (ldr r1, [sp], #4)
   12744:	mov	r2, sp
   12748:	push	{r2}		; (str r2, [sp, #-4]!)
   1274c:	push	{r0}		; (str r0, [sp, #-4]!)
   12750:	ldr	ip, [pc, #16]	; 12768 <_start@@Base+0x30>
   12754:	push	{ip}		; (str ip, [sp, #-4]!)
   12758:	ldr	r0, [pc, #12]	; 1276c <_start@@Base+0x34>
   1275c:	ldr	r3, [pc, #12]	; 12770 <_start@@Base+0x38>
   12760:	bl	125e0 <__libc_start_main@plt>
   12764:	bl	12670 <abort@plt>
   12768:	andeq	sl, r2, r0, lsl #17
   1276c:	andeq	r2, r1, r8, lsl #13
   12770:	andeq	sl, r2, r0, lsr #16
   12774:	ldr	r3, [pc, #20]	; 12790 <_start@@Base+0x58>
   12778:	ldr	r2, [pc, #20]	; 12794 <_start@@Base+0x5c>
   1277c:	add	r3, pc, r3
   12780:	ldr	r2, [r3, r2]
   12784:	cmp	r2, #0
   12788:	bxeq	lr
   1278c:	b	125ec <__gmon_start__@plt>
   12790:	andeq	sl, r2, ip, ror r8
   12794:	andeq	r0, r0, r4, ror r0
   12798:	ldr	r0, [pc, #24]	; 127b8 <_start@@Base+0x80>
   1279c:	ldr	r3, [pc, #24]	; 127bc <_start@@Base+0x84>
   127a0:	cmp	r3, r0
   127a4:	bxeq	lr
   127a8:	ldr	r3, [pc, #16]	; 127c0 <_start@@Base+0x88>
   127ac:	cmp	r3, #0
   127b0:	bxeq	lr
   127b4:	bx	r3
   127b8:	ldrdeq	sp, [r3], -r0
   127bc:	ldrdeq	sp, [r3], -r0
   127c0:	andeq	r0, r0, r0
   127c4:	ldr	r0, [pc, #36]	; 127f0 <_start@@Base+0xb8>
   127c8:	ldr	r1, [pc, #36]	; 127f4 <_start@@Base+0xbc>
   127cc:	sub	r1, r1, r0
   127d0:	asr	r1, r1, #2
   127d4:	add	r1, r1, r1, lsr #31
   127d8:	asrs	r1, r1, #1
   127dc:	bxeq	lr
   127e0:	ldr	r3, [pc, #16]	; 127f8 <_start@@Base+0xc0>
   127e4:	cmp	r3, #0
   127e8:	bxeq	lr
   127ec:	bx	r3
   127f0:	ldrdeq	sp, [r3], -r0
   127f4:	ldrdeq	sp, [r3], -r0
   127f8:	andeq	r0, r0, r0
   127fc:	push	{r4, lr}
   12800:	ldr	r4, [pc, #24]	; 12820 <_start@@Base+0xe8>
   12804:	ldrb	r3, [r4]
   12808:	cmp	r3, #0
   1280c:	popne	{r4, pc}
   12810:	bl	12798 <_start@@Base+0x60>
   12814:	mov	r3, #1
   12818:	strb	r3, [r4]
   1281c:	pop	{r4, pc}
   12820:	ldrdeq	sp, [r3], -r0
   12824:	b	127c4 <_start@@Base+0x8c>
   12828:	sub	r1, r1, r0
   1282c:	strd	r4, [sp, #-8]!
   12830:	cmp	r1, #8
   12834:	bhi	12868 <_start@@Base+0x130>
   12838:	sub	r1, r1, #1
   1283c:	cmp	r1, #7
   12840:	addls	pc, pc, r1, lsl #2
   12844:	b	12910 <_start@@Base+0x1d8>
   12848:	b	128c8 <_start@@Base+0x190>
   1284c:	b	128d4 <_start@@Base+0x19c>
   12850:	b	128e0 <_start@@Base+0x1a8>
   12854:	b	128ec <_start@@Base+0x1b4>
   12858:	b	128f8 <_start@@Base+0x1c0>
   1285c:	b	12904 <_start@@Base+0x1cc>
   12860:	b	128bc <_start@@Base+0x184>
   12864:	b	12868 <_start@@Base+0x130>
   12868:	ldrb	r2, [r0, #7]
   1286c:	mov	r3, #0
   12870:	mov	r1, r3
   12874:	ldrb	r4, [r0, #6]
   12878:	orr	r2, r2, r4, lsl #8
   1287c:	ldrb	r4, [r0, #5]
   12880:	orr	r2, r2, r4, lsl #16
   12884:	ldrb	r4, [r0, #4]
   12888:	orr	r2, r2, r4, lsl #24
   1288c:	ldrb	r4, [r0, #3]
   12890:	orr	r1, r1, r4
   12894:	ldrb	r4, [r0, #2]
   12898:	orr	r1, r1, r4, lsl #8
   1289c:	ldrb	r4, [r0, #1]
   128a0:	orr	r1, r1, r4, lsl #16
   128a4:	ldrb	r4, [r0]
   128a8:	mov	r0, r2
   128ac:	orr	r1, r1, r4, lsl #24
   128b0:	ldrd	r4, [sp]
   128b4:	add	sp, sp, #8
   128b8:	bx	lr
   128bc:	mov	r2, #0
   128c0:	mov	r3, #0
   128c4:	b	12870 <_start@@Base+0x138>
   128c8:	mov	r2, #0
   128cc:	mov	r1, r2
   128d0:	b	128a4 <_start@@Base+0x16c>
   128d4:	mov	r2, #0
   128d8:	mov	r1, r2
   128dc:	b	1289c <_start@@Base+0x164>
   128e0:	mov	r2, #0
   128e4:	mov	r1, r2
   128e8:	b	12894 <_start@@Base+0x15c>
   128ec:	mov	r2, #0
   128f0:	mov	r1, r2
   128f4:	b	1288c <_start@@Base+0x154>
   128f8:	mov	r2, #0
   128fc:	mov	r1, r2
   12900:	b	12884 <_start@@Base+0x14c>
   12904:	mov	r2, #0
   12908:	mov	r1, r2
   1290c:	b	1287c <_start@@Base+0x144>
   12910:	mov	r0, #0
   12914:	mov	r1, r0
   12918:	b	128b0 <_start@@Base+0x178>
   1291c:	cmp	r0, #4
   12920:	movhi	r0, #0
   12924:	movls	r0, #1
   12928:	bx	lr
   1292c:	cmp	r0, #11
   12930:	bhi	12954 <_start@@Base+0x21c>
   12934:	cmp	r0, #8
   12938:	bcs	12964 <_start@@Base+0x22c>
   1293c:	cmp	r0, #0
   12940:	beq	12964 <_start@@Base+0x22c>
   12944:	sub	r0, r0, #2
   12948:	clz	r0, r0
   1294c:	lsr	r0, r0, #5
   12950:	bx	lr
   12954:	sub	r0, r0, #255	; 0xff
   12958:	clz	r0, r0
   1295c:	lsr	r0, r0, #5
   12960:	bx	lr
   12964:	mov	r0, #1
   12968:	bx	lr
   1296c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12970:	mov	r4, r1
   12974:	mov	r1, r2
   12978:	strd	r6, [sp, #8]
   1297c:	mov	r5, r2
   12980:	strd	r8, [sp, #16]
   12984:	mov	r8, r0
   12988:	mov	r0, r4
   1298c:	str	sl, [sp, #24]
   12990:	mov	r9, r3
   12994:	str	lr, [sp, #28]
   12998:	sub	sp, sp, #8
   1299c:	bl	12828 <_start@@Base+0xf0>
   129a0:	add	r3, pc, #648	; 0x288
   129a4:	ldrd	r2, [r3]
   129a8:	cmp	r1, r3
   129ac:	cmpeq	r0, r2
   129b0:	bhi	12a74 <_start@@Base+0x33c>
   129b4:	add	r7, pc, #636	; 0x27c
   129b8:	ldrd	r6, [r7]
   129bc:	and	r2, r0, #-16777216	; 0xff000000
   129c0:	mov	r3, r1
   129c4:	cmp	r1, r7
   129c8:	cmpeq	r0, r6
   129cc:	bhi	12a04 <_start@@Base+0x2cc>
   129d0:	add	r1, pc, #616	; 0x268
   129d4:	ldrd	r0, [r1]
   129d8:	cmp	r3, r1
   129dc:	cmpeq	r2, r0
   129e0:	beq	12bac <_start@@Base+0x474>
   129e4:	mov	r0, r4
   129e8:	add	sp, sp, #8
   129ec:	ldrd	r4, [sp]
   129f0:	ldrd	r6, [sp, #8]
   129f4:	ldrd	r8, [sp, #16]
   129f8:	ldr	sl, [sp, #24]
   129fc:	add	sp, sp, #28
   12a00:	pop	{pc}		; (ldr pc, [sp], #4)
   12a04:	add	r7, pc, #572	; 0x23c
   12a08:	ldrd	r6, [r7]
   12a0c:	cmp	r1, r7
   12a10:	cmpeq	r2, r6
   12a14:	beq	12bd8 <_start@@Base+0x4a0>
   12a18:	add	r7, pc, #560	; 0x230
   12a1c:	ldrd	r6, [r7]
   12a20:	bic	r2, r0, #255	; 0xff
   12a24:	cmp	r1, r7
   12a28:	cmpeq	r2, r6
   12a2c:	bne	129e4 <_start@@Base+0x2ac>
   12a30:	ldr	r3, [sp, #44]	; 0x2c
   12a34:	mov	r2, r5
   12a38:	mov	r0, r8
   12a3c:	mov	r1, r4
   12a40:	str	r3, [sp]
   12a44:	mov	r3, #7
   12a48:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   12a4c:	cmp	r4, r0
   12a50:	movne	r6, #10
   12a54:	beq	129e4 <_start@@Base+0x2ac>
   12a58:	ldr	r2, [sp, #40]	; 0x28
   12a5c:	mov	r7, #0
   12a60:	mov	r3, #0
   12a64:	mov	r4, r0
   12a68:	strd	r6, [r2]
   12a6c:	str	r3, [r9]
   12a70:	b	129e4 <_start@@Base+0x2ac>
   12a74:	add	r3, pc, #476	; 0x1dc
   12a78:	ldrd	r2, [r3]
   12a7c:	cmp	r1, r3
   12a80:	cmpeq	r0, r2
   12a84:	bhi	12ae0 <_start@@Base+0x3a8>
   12a88:	add	r7, pc, #464	; 0x1d0
   12a8c:	ldrd	r6, [r7]
   12a90:	mov	sl, #0
   12a94:	cmp	r1, r7
   12a98:	cmpeq	sl, r6
   12a9c:	bne	129e4 <_start@@Base+0x2ac>
   12aa0:	ldr	r3, [sp, #44]	; 0x2c
   12aa4:	mov	r2, r5
   12aa8:	mov	r0, r8
   12aac:	mov	r1, r4
   12ab0:	str	r3, [sp]
   12ab4:	mov	r3, #4
   12ab8:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   12abc:	cmp	r4, r0
   12ac0:	beq	129e4 <_start@@Base+0x2ac>
   12ac4:	ldr	r1, [sp, #40]	; 0x28
   12ac8:	mov	r2, #0
   12acc:	mov	r3, #0
   12ad0:	mov	r4, r0
   12ad4:	strd	r2, [r1]
   12ad8:	str	sl, [r9]
   12adc:	b	129e4 <_start@@Base+0x2ac>
   12ae0:	add	r3, pc, #384	; 0x180
   12ae4:	ldrd	r2, [r3]
   12ae8:	cmp	r1, r3
   12aec:	cmpeq	r0, r2
   12af0:	bls	12b68 <_start@@Base+0x430>
   12af4:	add	r7, pc, #372	; 0x174
   12af8:	ldrd	r6, [r7]
   12afc:	lsr	r2, r0, #16
   12b00:	lsl	r2, r2, #16
   12b04:	cmp	r1, r7
   12b08:	cmpeq	r2, r6
   12b0c:	beq	12c04 <_start@@Base+0x4cc>
   12b10:	add	r3, pc, #352	; 0x160
   12b14:	ldrd	r2, [r3]
   12b18:	cmp	r1, r3
   12b1c:	cmpeq	r0, r2
   12b20:	bne	129e4 <_start@@Base+0x2ac>
   12b24:	ldr	r3, [sp, #44]	; 0x2c
   12b28:	mov	r2, r5
   12b2c:	mov	r0, r8
   12b30:	mov	r1, r4
   12b34:	str	r3, [sp]
   12b38:	mov	r3, #8
   12b3c:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   12b40:	cmp	r4, r0
   12b44:	beq	129e4 <_start@@Base+0x2ac>
   12b48:	ldr	r2, [sp, #40]	; 0x28
   12b4c:	mov	r4, r0
   12b50:	mov	r1, #0
   12b54:	mov	r0, #8
   12b58:	mov	r3, #0
   12b5c:	strd	r0, [r2]
   12b60:	str	r3, [r9]
   12b64:	b	129e4 <_start@@Base+0x2ac>
   12b68:	add	r7, pc, #272	; 0x110
   12b6c:	ldrd	r6, [r7]
   12b70:	and	r2, r0, #-16777216	; 0xff000000
   12b74:	cmp	r1, r7
   12b78:	cmpeq	r2, r6
   12b7c:	bne	129e4 <_start@@Base+0x2ac>
   12b80:	ldr	r3, [sp, #44]	; 0x2c
   12b84:	mov	r2, r5
   12b88:	mov	r0, r8
   12b8c:	mov	r1, r4
   12b90:	str	r3, [sp]
   12b94:	mov	r3, #5
   12b98:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   12b9c:	cmp	r4, r0
   12ba0:	movne	r6, #11
   12ba4:	bne	12a58 <_start@@Base+0x320>
   12ba8:	b	129e4 <_start@@Base+0x2ac>
   12bac:	ldr	r3, [sp, #44]	; 0x2c
   12bb0:	mov	r2, r5
   12bb4:	mov	r0, r8
   12bb8:	mov	r1, r4
   12bbc:	str	r3, [sp]
   12bc0:	mov	r3, #5
   12bc4:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   12bc8:	cmp	r4, r0
   12bcc:	movne	r6, #9
   12bd0:	bne	12a58 <_start@@Base+0x320>
   12bd4:	b	129e4 <_start@@Base+0x2ac>
   12bd8:	ldr	r3, [sp, #44]	; 0x2c
   12bdc:	mov	r2, r5
   12be0:	mov	r0, r8
   12be4:	mov	r1, r4
   12be8:	str	r3, [sp]
   12bec:	mov	r3, #5
   12bf0:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   12bf4:	cmp	r4, r0
   12bf8:	movne	r6, #2
   12bfc:	bne	12a58 <_start@@Base+0x320>
   12c00:	b	129e4 <_start@@Base+0x2ac>
   12c04:	ldr	r3, [sp, #44]	; 0x2c
   12c08:	mov	r2, r5
   12c0c:	mov	r0, r8
   12c10:	mov	r1, r4
   12c14:	str	r3, [sp]
   12c18:	mov	r3, #6
   12c1c:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   12c20:	cmp	r4, r0
   12c24:	beq	129e4 <_start@@Base+0x2ac>
   12c28:	mov	r6, #255	; 0xff
   12c2c:	b	12a58 <_start@@Base+0x320>
   12c30:			; <UNDEFINED> instruction: 0xffffffff
   12c34:	cdpmi	14, 4, cr4, cr15, cr4, {2}
   12c38:			; <UNDEFINED> instruction: 0x46616dff
   12c3c:	rsbmi	r6, pc, #428	; 0x1ac
   12c40:	strvs	r0, [r0, #-0]
   12c44:	rsbmi	r6, r5, #108, 24	; 0x6c00
   12c48:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   12c4c:	ldclmi	12, cr4, [r5, #-388]!	; 0xfffffe7c
   12c50:	strbtmi	r6, [r1], -r0, lsl #28
   12c54:	rsbmi	r6, pc, #428	; 0x1ac
   12c58:	ldrshvc	pc, [pc, #255]	; 12d5f <_start@@Base+0x627>	; <UNPREDICTABLE>
   12c5c:	svcmi	0x00746865
   12c60:	andeq	r0, r0, r0
   12c64:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   12c68:	cdpvs	5, 7, cr6, cr10, cr11, {3}
   12c6c:	rsbpl	r7, r1, #117	; 0x75
   12c70:	strbvs	r0, [r4, #-0]!
   12c74:	strbpl	r7, [lr, #-1395]!	; 0xfffffa8d
   12c78:	cdpvs	5, 7, cr6, cr10, cr12, {3}
   12c7c:	rsbpl	r7, r1, #117	; 0x75
   12c80:	andvc	r0, r0, #0
   12c84:	svcmi	0x00746865
   12c88:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12c8c:	mov	r4, r1
   12c90:	mov	r1, r2
   12c94:	strd	r6, [sp, #8]
   12c98:	mov	r5, r2
   12c9c:	strd	r8, [sp, #16]
   12ca0:	mov	r8, r0
   12ca4:	mov	r0, r4
   12ca8:	strd	sl, [sp, #24]
   12cac:	mov	r9, r3
   12cb0:	str	lr, [sp, #32]
   12cb4:	sub	sp, sp, #12
   12cb8:	bl	12828 <_start@@Base+0xf0>
   12cbc:	add	r3, pc, #524	; 0x20c
   12cc0:	ldrd	r2, [r3]
   12cc4:	cmp	r1, r3
   12cc8:	cmpeq	r0, r2
   12ccc:	bhi	12d0c <_start@@Base+0x5d4>
   12cd0:	add	r7, pc, #512	; 0x200
   12cd4:	ldrd	r6, [r7]
   12cd8:	bic	r3, r1, #255	; 0xff
   12cdc:	mov	sl, #0
   12ce0:	cmp	r3, r7
   12ce4:	cmpeq	sl, r6
   12ce8:	beq	12de8 <_start@@Base+0x6b0>
   12cec:	mov	r0, r4
   12cf0:	add	sp, sp, #12
   12cf4:	ldrd	r4, [sp]
   12cf8:	ldrd	r6, [sp, #8]
   12cfc:	ldrd	r8, [sp, #16]
   12d00:	ldrd	sl, [sp, #24]
   12d04:	add	sp, sp, #32
   12d08:	pop	{pc}		; (ldr pc, [sp], #4)
   12d0c:	add	r3, pc, #460	; 0x1cc
   12d10:	ldrd	r2, [r3]
   12d14:	cmp	r1, r3
   12d18:	cmpeq	r0, r2
   12d1c:	beq	12ea0 <_start@@Base+0x768>
   12d20:	add	r7, pc, #448	; 0x1c0
   12d24:	ldrd	r6, [r7]
   12d28:	bic	r2, r0, #255	; 0xff
   12d2c:	cmp	r1, r7
   12d30:	cmpeq	r2, r6
   12d34:	beq	12e60 <_start@@Base+0x728>
   12d38:	add	r7, pc, #432	; 0x1b0
   12d3c:	ldrd	r6, [r7]
   12d40:	mov	sl, #0
   12d44:	cmp	r1, r7
   12d48:	cmpeq	sl, r6
   12d4c:	beq	12e24 <_start@@Base+0x6ec>
   12d50:	add	r3, pc, #416	; 0x1a0
   12d54:	ldrd	r2, [r3]
   12d58:	cmp	r1, r3
   12d5c:	cmpeq	r0, r2
   12d60:	bne	12cec <_start@@Base+0x5b4>
   12d64:	mov	r1, r5
   12d68:	add	r0, r4, #8
   12d6c:	bl	12828 <_start@@Base+0xf0>
   12d70:	add	r3, pc, #392	; 0x188
   12d74:	ldrd	r2, [r3]
   12d78:	cmp	r1, r3
   12d7c:	cmpeq	r0, r2
   12d80:	bne	12cec <_start@@Base+0x5b4>
   12d84:	add	r7, pc, #380	; 0x17c
   12d88:	ldrd	r6, [r7]
   12d8c:	add	fp, r4, #16
   12d90:	mov	r1, r5
   12d94:	mov	r0, fp
   12d98:	bl	12828 <_start@@Base+0xf0>
   12d9c:	bic	r2, r0, #255	; 0xff
   12da0:	cmp	r1, r7
   12da4:	cmpeq	r2, r6
   12da8:	bne	12cec <_start@@Base+0x5b4>
   12dac:	ldr	r3, [sp, #52]	; 0x34
   12db0:	mov	r2, r5
   12db4:	mov	r0, r8
   12db8:	mov	r1, fp
   12dbc:	str	r3, [sp]
   12dc0:	mov	r3, #7
   12dc4:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   12dc8:	cmp	fp, r0
   12dcc:	beq	12cec <_start@@Base+0x5b4>
   12dd0:	ldr	r1, [sp, #48]	; 0x30
   12dd4:	mov	r2, #2
   12dd8:	mov	r3, #0
   12ddc:	strd	r2, [r1]
   12de0:	str	sl, [r9]
   12de4:	b	12cf0 <_start@@Base+0x5b8>
   12de8:	ldr	r3, [sp, #52]	; 0x34
   12dec:	mov	r2, r5
   12df0:	mov	r0, r8
   12df4:	mov	r1, r4
   12df8:	str	r3, [sp]
   12dfc:	mov	r3, #3
   12e00:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   12e04:	cmp	r4, r0
   12e08:	beq	12cf0 <_start@@Base+0x5b8>
   12e0c:	ldr	r1, [sp, #48]	; 0x30
   12e10:	mov	r2, #4
   12e14:	mov	r3, #0
   12e18:	strd	r2, [r1]
   12e1c:	str	sl, [r9]
   12e20:	b	12cf0 <_start@@Base+0x5b8>
   12e24:	ldr	r3, [sp, #52]	; 0x34
   12e28:	mov	r2, r5
   12e2c:	mov	r0, r8
   12e30:	mov	r1, r4
   12e34:	str	r3, [sp]
   12e38:	mov	r3, #4
   12e3c:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   12e40:	cmp	r4, r0
   12e44:	beq	12cf0 <_start@@Base+0x5b8>
   12e48:	ldr	r1, [sp, #48]	; 0x30
   12e4c:	mov	r2, #0
   12e50:	mov	r3, #0
   12e54:	strd	r2, [r1]
   12e58:	str	sl, [r9]
   12e5c:	b	12cf0 <_start@@Base+0x5b8>
   12e60:	ldr	r3, [sp, #52]	; 0x34
   12e64:	mov	r2, r5
   12e68:	mov	r0, r8
   12e6c:	mov	r1, r4
   12e70:	str	r3, [sp]
   12e74:	mov	r3, #7
   12e78:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   12e7c:	cmp	r4, r0
   12e80:	beq	12cec <_start@@Base+0x5b4>
   12e84:	mov	r4, #1
   12e88:	ldr	r2, [sp, #48]	; 0x30
   12e8c:	mov	r5, #0
   12e90:	mov	r3, #0
   12e94:	strd	r4, [r2]
   12e98:	str	r3, [r9]
   12e9c:	b	12cf0 <_start@@Base+0x5b8>
   12ea0:	ldr	r3, [sp, #52]	; 0x34
   12ea4:	mov	r1, r4
   12ea8:	mov	r2, r5
   12eac:	mov	r0, r8
   12eb0:	str	r3, [sp]
   12eb4:	mov	r3, #8
   12eb8:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   12ebc:	cmp	r4, r0
   12ec0:	movne	r4, #3
   12ec4:	bne	12e88 <_start@@Base+0x750>
   12ec8:	b	12cec <_start@@Base+0x5b4>
   12ecc:	nop	{0}
   12ed0:	strbtvc	r7, [r5], #-511	; 0xfffffe01
   12ed4:	stclmi	14, cr6, [pc, #-460]!	; 12d10 <_start@@Base+0x5d8>
   12ed8:	andeq	r0, r0, r0
   12edc:	cmnmi	ip, r0, lsl #8
   12ee0:	strbtvc	r7, [r5], #-562	; 0xfffffdce
   12ee4:	stclmi	14, cr6, [pc, #-460]!	; 12d20 <_start@@Base+0x5e8>
   12ee8:	strbtvc	r7, [r5], #-512	; 0xfffffe00
   12eec:	stclmi	14, cr6, [pc, #-460]!	; 12d28 <_start@@Base+0x5f0>
   12ef0:	andeq	r0, r0, r0
   12ef4:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   12ef8:	cmnpl	r9, #112, 26	; 0x1c00
   12efc:	strbtpl	r7, [r5], #-884	; 0xfffffc8c
   12f00:	rsbvs	r6, ip, #364904448	; 0x15c00000
   12f04:	cfstrdvs	mvd5, [r5], #-388	; 0xfffffe7c
   12f08:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   12f0c:	ldmdbvs	r4!, {r0, r2, r6, fp, sp, lr}^
   12f10:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12f14:	mov	r4, r1
   12f18:	mov	r1, r2
   12f1c:	strd	r6, [sp, #8]
   12f20:	mov	r5, r2
   12f24:	strd	r8, [sp, #16]
   12f28:	mov	r8, r0
   12f2c:	mov	r0, r4
   12f30:	str	sl, [sp, #24]
   12f34:	mov	r9, r3
   12f38:	str	lr, [sp, #28]
   12f3c:	sub	sp, sp, #8
   12f40:	bl	12828 <_start@@Base+0xf0>
   12f44:	add	r3, pc, #412	; 0x19c
   12f48:	ldrd	r2, [r3]
   12f4c:	cmp	r1, r3
   12f50:	cmpeq	r0, r2
   12f54:	bhi	12f90 <_start@@Base+0x858>
   12f58:	add	r7, pc, #400	; 0x190
   12f5c:	ldrd	r6, [r7]
   12f60:	mov	sl, #0
   12f64:	cmp	r1, r7
   12f68:	cmpeq	sl, r6
   12f6c:	beq	13060 <_start@@Base+0x928>
   12f70:	mov	r0, r4
   12f74:	add	sp, sp, #8
   12f78:	ldrd	r4, [sp]
   12f7c:	ldrd	r6, [sp, #8]
   12f80:	ldrd	r8, [sp, #16]
   12f84:	ldr	sl, [sp, #24]
   12f88:	add	sp, sp, #28
   12f8c:	pop	{pc}		; (ldr pc, [sp], #4)
   12f90:	add	r3, pc, #352	; 0x160
   12f94:	ldrd	r2, [r3]
   12f98:	cmp	r1, r3
   12f9c:	cmpeq	r0, r2
   12fa0:	bhi	12fe8 <_start@@Base+0x8b0>
   12fa4:	add	r7, pc, #340	; 0x154
   12fa8:	ldrd	r6, [r7]
   12fac:	mov	sl, #0
   12fb0:	cmp	r1, r7
   12fb4:	cmpeq	sl, r6
   12fb8:	bne	12f70 <_start@@Base+0x838>
   12fbc:	ldr	r3, [sp, #44]	; 0x2c
   12fc0:	mov	r2, r5
   12fc4:	mov	r0, r8
   12fc8:	mov	r1, r4
   12fcc:	str	r3, [sp]
   12fd0:	mov	r3, #4
   12fd4:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   12fd8:	cmp	r4, r0
   12fdc:	beq	12f70 <_start@@Base+0x838>
   12fe0:	mov	r2, #42	; 0x2a
   12fe4:	b	13088 <_start@@Base+0x950>
   12fe8:	add	r7, pc, #280	; 0x118
   12fec:	ldrd	r6, [r7]
   12ff0:	bic	r2, r0, #255	; 0xff
   12ff4:	cmp	r1, r7
   12ff8:	cmpeq	r2, r6
   12ffc:	beq	130a0 <_start@@Base+0x968>
   13000:	add	r7, pc, #264	; 0x108
   13004:	ldrd	r6, [r7]
   13008:	lsr	r2, r0, #16
   1300c:	lsl	r2, r2, #16
   13010:	cmp	r1, r7
   13014:	cmpeq	r2, r6
   13018:	bne	12f70 <_start@@Base+0x838>
   1301c:	ldr	r3, [sp, #44]	; 0x2c
   13020:	mov	r2, r5
   13024:	mov	r0, r8
   13028:	mov	r1, r4
   1302c:	str	r3, [sp]
   13030:	mov	r3, #6
   13034:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   13038:	cmp	r4, r0
   1303c:	beq	12f70 <_start@@Base+0x838>
   13040:	ldr	r2, [sp, #40]	; 0x28
   13044:	mov	r4, r0
   13048:	mvn	r1, #0
   1304c:	mvn	r0, #1
   13050:	mov	r3, #1
   13054:	strd	r0, [r2]
   13058:	str	r3, [r9]
   1305c:	b	12f70 <_start@@Base+0x838>
   13060:	ldr	r3, [sp, #44]	; 0x2c
   13064:	mov	r2, r5
   13068:	mov	r0, r8
   1306c:	mov	r1, r4
   13070:	str	r3, [sp]
   13074:	mov	r3, #4
   13078:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   1307c:	cmp	r4, r0
   13080:	movne	r2, #2
   13084:	beq	12f70 <_start@@Base+0x838>
   13088:	ldr	r1, [sp, #40]	; 0x28
   1308c:	mov	r3, #0
   13090:	mov	r4, r0
   13094:	strd	r2, [r1]
   13098:	str	sl, [r9]
   1309c:	b	12f70 <_start@@Base+0x838>
   130a0:	ldr	r3, [sp, #44]	; 0x2c
   130a4:	mov	r2, r5
   130a8:	mov	r0, r8
   130ac:	mov	r1, r4
   130b0:	str	r3, [sp]
   130b4:	mov	r3, #7
   130b8:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   130bc:	cmp	r4, r0
   130c0:	beq	12f70 <_start@@Base+0x838>
   130c4:	ldr	r2, [sp, #40]	; 0x28
   130c8:	mvn	r6, #0
   130cc:	mvn	r7, #0
   130d0:	mov	r3, #1
   130d4:	mov	r4, r0
   130d8:	strd	r6, [r2]
   130dc:	str	r3, [r9]
   130e0:	b	12f70 <_start@@Base+0x838>
   130e4:	nop	{0}
   130e8:			; <UNDEFINED> instruction: 0xffffffff
   130ec:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   130f0:	andeq	r0, r0, r0
   130f4:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   130f8:	strbvs	pc, [r6, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   130fc:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   13100:	andeq	r0, r0, r0
   13104:	stmdbvs	lr!, {r1, r4, r5, sl, ip, sp, lr}^
   13108:	strbvs	r3, [r7, #-512]!	; 0xfffffe00
   1310c:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   13110:	strbvs	r0, [r7, #-0]!
   13114:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   13118:	sub	r3, r2, r1
   1311c:	cmp	r3, #1
   13120:	ble	13134 <_start@@Base+0x9fc>
   13124:	ldrb	r3, [r1]
   13128:	cmp	r3, #32
   1312c:	bhi	13138 <_start@@Base+0xa00>
   13130:	beq	13140 <_start@@Base+0xa08>
   13134:	b	271ac <flatcc_json_parser_space_ext@@Base>
   13138:	mov	r0, r1
   1313c:	bx	lr
   13140:	ldrb	r3, [r1, #1]
   13144:	cmp	r3, #32
   13148:	bls	13134 <_start@@Base+0x9fc>
   1314c:	add	r0, r1, #1
   13150:	bx	lr
   13154:	strd	r4, [sp, #-20]!	; 0xffffffec
   13158:	mov	r4, #0
   1315c:	mov	r5, #0
   13160:	strd	r6, [sp, #8]
   13164:	mov	r7, #0
   13168:	cmp	r1, r2
   1316c:	str	lr, [sp, #16]
   13170:	sub	sp, sp, #28
   13174:	moveq	r0, r1
   13178:	strd	r4, [r3]
   1317c:	str	r7, [sp, #12]
   13180:	strd	r4, [sp, #16]
   13184:	beq	131b0 <_start@@Base+0xa78>
   13188:	add	ip, sp, #16
   1318c:	mov	r5, r3
   13190:	add	r3, sp, #12
   13194:	mov	r4, r1
   13198:	str	ip, [sp]
   1319c:	mov	r6, r0
   131a0:	mov	r7, r2
   131a4:	bl	28ea4 <flatcc_json_parser_integer@@Base>
   131a8:	cmp	r4, r0
   131ac:	bne	131c4 <_start@@Base+0xa8c>
   131b0:	add	sp, sp, #28
   131b4:	ldrd	r4, [sp]
   131b8:	ldrd	r6, [sp, #8]
   131bc:	add	sp, sp, #16
   131c0:	pop	{pc}		; (ldr pc, [sp], #4)
   131c4:	ldr	r1, [sp, #12]
   131c8:	ldrd	r2, [sp, #16]
   131cc:	cmp	r1, #0
   131d0:	beq	131f0 <_start@@Base+0xab8>
   131d4:	cmp	r3, #-2147483648	; 0x80000000
   131d8:	cmpeq	r2, #0
   131dc:	bhi	13218 <_start@@Base+0xae0>
   131e0:	rsbs	r2, r2, #0
   131e4:	rsc	r3, r3, #0
   131e8:	strd	r2, [r5]
   131ec:	b	131b0 <_start@@Base+0xa78>
   131f0:	cmp	r2, #0
   131f4:	sbcs	r1, r3, #0
   131f8:	strdge	r2, [r5]
   131fc:	bge	131b0 <_start@@Base+0xa78>
   13200:	mov	r1, r0
   13204:	mov	r2, r7
   13208:	mov	r0, r6
   1320c:	mov	r3, #7
   13210:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   13214:	b	131b0 <_start@@Base+0xa78>
   13218:	mov	r1, r0
   1321c:	mov	r2, r7
   13220:	mov	r0, r6
   13224:	mov	r3, #8
   13228:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1322c:	b	131b0 <_start@@Base+0xa78>
   13230:	strd	r4, [sp, #-20]!	; 0xffffffec
   13234:	mov	r4, #0
   13238:	mov	r5, #0
   1323c:	strd	r6, [sp, #8]
   13240:	mov	r7, #0
   13244:	cmp	r1, r2
   13248:	str	lr, [sp, #16]
   1324c:	sub	sp, sp, #28
   13250:	moveq	r0, r1
   13254:	strd	r4, [r3]
   13258:	str	r7, [sp, #12]
   1325c:	strd	r4, [sp, #16]
   13260:	beq	132a0 <_start@@Base+0xb68>
   13264:	add	ip, sp, #16
   13268:	mov	r5, r3
   1326c:	add	r3, sp, #12
   13270:	mov	r4, r1
   13274:	str	ip, [sp]
   13278:	mov	r6, r0
   1327c:	mov	r7, r2
   13280:	bl	28ea4 <flatcc_json_parser_integer@@Base>
   13284:	cmp	r4, r0
   13288:	beq	132a0 <_start@@Base+0xb68>
   1328c:	ldr	r3, [sp, #12]
   13290:	cmp	r3, #0
   13294:	bne	132b4 <_start@@Base+0xb7c>
   13298:	ldrd	r2, [sp, #16]
   1329c:	strd	r2, [r5]
   132a0:	add	sp, sp, #28
   132a4:	ldrd	r4, [sp]
   132a8:	ldrd	r6, [sp, #8]
   132ac:	add	sp, sp, #16
   132b0:	pop	{pc}		; (ldr pc, [sp], #4)
   132b4:	mov	r1, r0
   132b8:	mov	r2, r7
   132bc:	mov	r0, r6
   132c0:	mov	r3, #8
   132c4:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   132c8:	b	132a0 <_start@@Base+0xb68>
   132cc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   132d0:	cmp	r1, r2
   132d4:	strd	r6, [sp, #8]
   132d8:	moveq	r0, r1
   132dc:	strd	r8, [sp, #16]
   132e0:	mov	r8, #0
   132e4:	mov	r9, #0
   132e8:	str	lr, [sp, #24]
   132ec:	sub	sp, sp, #28
   132f0:	mov	lr, #0
   132f4:	strb	lr, [r3]
   132f8:	str	lr, [sp, #12]
   132fc:	strd	r8, [sp, #16]
   13300:	beq	1332c <_start@@Base+0xbf4>
   13304:	add	ip, sp, #16
   13308:	mov	r5, r3
   1330c:	add	r3, sp, #12
   13310:	mov	r4, r1
   13314:	str	ip, [sp]
   13318:	mov	r7, r2
   1331c:	mov	r6, r0
   13320:	bl	28ea4 <flatcc_json_parser_integer@@Base>
   13324:	cmp	r4, r0
   13328:	bne	13344 <_start@@Base+0xc0c>
   1332c:	add	sp, sp, #28
   13330:	ldrd	r4, [sp]
   13334:	ldrd	r6, [sp, #8]
   13338:	ldrd	r8, [sp, #16]
   1333c:	add	sp, sp, #24
   13340:	pop	{pc}		; (ldr pc, [sp], #4)
   13344:	ldr	r3, [sp, #12]
   13348:	cmp	r3, #0
   1334c:	bne	1337c <_start@@Base+0xc44>
   13350:	ldrd	r2, [sp, #16]
   13354:	cmp	r3, #0
   13358:	cmpeq	r2, #255	; 0xff
   1335c:	strbls	r2, [r5]
   13360:	bls	1332c <_start@@Base+0xbf4>
   13364:	mov	r1, r0
   13368:	mov	r2, r7
   1336c:	mov	r0, r6
   13370:	mov	r3, #7
   13374:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   13378:	b	1332c <_start@@Base+0xbf4>
   1337c:	mov	r1, r0
   13380:	mov	r2, r7
   13384:	mov	r0, r6
   13388:	mov	r3, #8
   1338c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   13390:	b	1332c <_start@@Base+0xbf4>
   13394:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13398:	cmp	r1, r2
   1339c:	strd	r6, [sp, #8]
   133a0:	moveq	r0, r1
   133a4:	strd	r8, [sp, #16]
   133a8:	mov	r8, #0
   133ac:	mov	r9, #0
   133b0:	str	lr, [sp, #24]
   133b4:	sub	sp, sp, #28
   133b8:	mov	lr, #0
   133bc:	str	lr, [r3]
   133c0:	str	lr, [sp, #12]
   133c4:	strd	r8, [sp, #16]
   133c8:	beq	133f4 <_start@@Base+0xcbc>
   133cc:	add	ip, sp, #16
   133d0:	mov	r5, r3
   133d4:	add	r3, sp, #12
   133d8:	mov	r4, r1
   133dc:	str	ip, [sp]
   133e0:	mov	r7, r2
   133e4:	mov	r6, r0
   133e8:	bl	28ea4 <flatcc_json_parser_integer@@Base>
   133ec:	cmp	r4, r0
   133f0:	bne	1340c <_start@@Base+0xcd4>
   133f4:	add	sp, sp, #28
   133f8:	ldrd	r4, [sp]
   133fc:	ldrd	r6, [sp, #8]
   13400:	ldrd	r8, [sp, #16]
   13404:	add	sp, sp, #24
   13408:	pop	{pc}		; (ldr pc, [sp], #4)
   1340c:	ldr	r3, [sp, #12]
   13410:	cmp	r3, #0
   13414:	bne	1344c <_start@@Base+0xd14>
   13418:	ldrd	r2, [sp, #16]
   1341c:	mov	r9, #0
   13420:	mvn	r8, #0
   13424:	cmp	r3, r9
   13428:	cmpeq	r2, r8
   1342c:	strls	r2, [r5]
   13430:	bls	133f4 <_start@@Base+0xcbc>
   13434:	mov	r1, r0
   13438:	mov	r2, r7
   1343c:	mov	r0, r6
   13440:	mov	r3, #7
   13444:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   13448:	b	133f4 <_start@@Base+0xcbc>
   1344c:	mov	r1, r0
   13450:	mov	r2, r7
   13454:	mov	r0, r6
   13458:	mov	r3, #8
   1345c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   13460:	b	133f4 <_start@@Base+0xcbc>
   13464:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13468:	cmp	r1, r2
   1346c:	strd	r6, [sp, #8]
   13470:	moveq	r0, r1
   13474:	strd	r8, [sp, #16]
   13478:	mov	r8, #0
   1347c:	mov	r9, #0
   13480:	str	lr, [sp, #24]
   13484:	sub	sp, sp, #28
   13488:	mov	lr, #0
   1348c:	str	lr, [r3]
   13490:	str	lr, [sp, #12]
   13494:	strd	r8, [sp, #16]
   13498:	beq	134c4 <_start@@Base+0xd8c>
   1349c:	add	ip, sp, #16
   134a0:	mov	r5, r3
   134a4:	add	r3, sp, #12
   134a8:	mov	r4, r1
   134ac:	str	ip, [sp]
   134b0:	mov	r7, r2
   134b4:	mov	r6, r0
   134b8:	bl	28ea4 <flatcc_json_parser_integer@@Base>
   134bc:	cmp	r4, r0
   134c0:	bne	134dc <_start@@Base+0xda4>
   134c4:	add	sp, sp, #28
   134c8:	ldrd	r4, [sp]
   134cc:	ldrd	r6, [sp, #8]
   134d0:	ldrd	r8, [sp, #16]
   134d4:	add	sp, sp, #24
   134d8:	pop	{pc}		; (ldr pc, [sp], #4)
   134dc:	ldr	r1, [sp, #12]
   134e0:	ldrd	r2, [sp, #16]
   134e4:	cmp	r1, #0
   134e8:	beq	13518 <_start@@Base+0xde0>
   134ec:	cmp	r3, #0
   134f0:	cmpeq	r2, #-2147483648	; 0x80000000
   134f4:	rsbls	r2, r2, #0
   134f8:	strls	r2, [r5]
   134fc:	bls	134c4 <_start@@Base+0xd8c>
   13500:	mov	r1, r0
   13504:	mov	r2, r7
   13508:	mov	r0, r6
   1350c:	mov	r3, #8
   13510:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   13514:	b	134c4 <_start@@Base+0xd8c>
   13518:	mov	r9, #0
   1351c:	mvn	r8, #-2147483648	; 0x80000000
   13520:	cmp	r3, r9
   13524:	cmpeq	r2, r8
   13528:	strls	r2, [r5]
   1352c:	bls	134c4 <_start@@Base+0xd8c>
   13530:	mov	r1, r0
   13534:	mov	r2, r7
   13538:	mov	r0, r6
   1353c:	mov	r3, #7
   13540:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   13544:	b	134c4 <_start@@Base+0xd8c>
   13548:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1354c:	cmp	r1, r2
   13550:	strd	r6, [sp, #8]
   13554:	moveq	r0, r1
   13558:	strd	r8, [sp, #16]
   1355c:	mov	r8, #0
   13560:	mov	r9, #0
   13564:	str	lr, [sp, #24]
   13568:	sub	sp, sp, #28
   1356c:	mov	lr, #0
   13570:	strh	lr, [r3]
   13574:	str	lr, [sp, #12]
   13578:	strd	r8, [sp, #16]
   1357c:	beq	135a8 <_start@@Base+0xe70>
   13580:	add	ip, sp, #16
   13584:	mov	r5, r3
   13588:	add	r3, sp, #12
   1358c:	mov	r4, r1
   13590:	str	ip, [sp]
   13594:	mov	r7, r2
   13598:	mov	r6, r0
   1359c:	bl	28ea4 <flatcc_json_parser_integer@@Base>
   135a0:	cmp	r4, r0
   135a4:	bne	135c0 <_start@@Base+0xe88>
   135a8:	add	sp, sp, #28
   135ac:	ldrd	r4, [sp]
   135b0:	ldrd	r6, [sp, #8]
   135b4:	ldrd	r8, [sp, #16]
   135b8:	add	sp, sp, #24
   135bc:	pop	{pc}		; (ldr pc, [sp], #4)
   135c0:	ldr	r1, [sp, #12]
   135c4:	ldrd	r2, [sp, #16]
   135c8:	cmp	r1, #0
   135cc:	beq	135fc <_start@@Base+0xec4>
   135d0:	cmp	r3, #0
   135d4:	cmpeq	r2, #32768	; 0x8000
   135d8:	rsbls	r2, r2, #0
   135dc:	strhls	r2, [r5]
   135e0:	bls	135a8 <_start@@Base+0xe70>
   135e4:	mov	r1, r0
   135e8:	mov	r2, r7
   135ec:	mov	r0, r6
   135f0:	mov	r3, #8
   135f4:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   135f8:	b	135a8 <_start@@Base+0xe70>
   135fc:	mov	r9, #0
   13600:	movw	r8, #32767	; 0x7fff
   13604:	cmp	r3, r9
   13608:	cmpeq	r2, r8
   1360c:	strhls	r2, [r5]
   13610:	bls	135a8 <_start@@Base+0xe70>
   13614:	mov	r1, r0
   13618:	mov	r2, r7
   1361c:	mov	r0, r6
   13620:	mov	r3, #7
   13624:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   13628:	b	135a8 <_start@@Base+0xe70>
   1362c:	cmp	r1, r2
   13630:	beq	13640 <_start@@Base+0xf08>
   13634:	ldrb	ip, [r1]
   13638:	cmp	ip, #123	; 0x7b
   1363c:	beq	13650 <_start@@Base+0xf18>
   13640:	mov	ip, #0
   13644:	str	ip, [r3]
   13648:	mov	r3, #21
   1364c:	b	270b8 <flatcc_json_parser_set_error@@Base>
   13650:	strd	r4, [sp, #-16]!
   13654:	mov	r5, r0
   13658:	add	r0, r1, #1
   1365c:	str	r6, [sp, #8]
   13660:	mov	r6, r3
   13664:	sub	r3, r2, r0
   13668:	cmp	r3, #1
   1366c:	mov	r4, r2
   13670:	str	lr, [sp, #12]
   13674:	ble	13688 <_start@@Base+0xf50>
   13678:	ldrb	r3, [r1, #1]
   1367c:	cmp	r3, #32
   13680:	bhi	13698 <_start@@Base+0xf60>
   13684:	beq	136c4 <_start@@Base+0xf8c>
   13688:	mov	r1, r0
   1368c:	mov	r2, r4
   13690:	mov	r0, r5
   13694:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   13698:	cmp	r4, r0
   1369c:	beq	136ac <_start@@Base+0xf74>
   136a0:	ldrb	r3, [r0]
   136a4:	cmp	r3, #125	; 0x7d
   136a8:	beq	136d8 <_start@@Base+0xfa0>
   136ac:	mov	r3, #1
   136b0:	ldrd	r4, [sp]
   136b4:	str	r3, [r6]
   136b8:	ldr	r6, [sp, #8]
   136bc:	add	sp, sp, #12
   136c0:	pop	{pc}		; (ldr pc, [sp], #4)
   136c4:	ldrb	r3, [r1, #2]
   136c8:	cmp	r3, #32
   136cc:	addhi	r0, r1, #2
   136d0:	bls	13688 <_start@@Base+0xf50>
   136d4:	b	13698 <_start@@Base+0xf60>
   136d8:	mov	r3, #0
   136dc:	mov	r2, r4
   136e0:	ldr	lr, [sp, #12]
   136e4:	add	r1, r0, #1
   136e8:	mov	r0, r5
   136ec:	ldrd	r4, [sp]
   136f0:	str	r3, [r6]
   136f4:	ldr	r6, [sp, #8]
   136f8:	add	sp, sp, #16
   136fc:	b	13118 <_start@@Base+0x9e0>
   13700:	cmp	r1, r2
   13704:	beq	13714 <_start@@Base+0xfdc>
   13708:	ldrb	ip, [r1]
   1370c:	cmp	ip, #91	; 0x5b
   13710:	beq	13724 <_start@@Base+0xfec>
   13714:	mov	ip, #0
   13718:	str	ip, [r3]
   1371c:	mov	r3, #22
   13720:	b	270b8 <flatcc_json_parser_set_error@@Base>
   13724:	strd	r4, [sp, #-16]!
   13728:	mov	r5, r0
   1372c:	add	r0, r1, #1
   13730:	str	r6, [sp, #8]
   13734:	mov	r6, r3
   13738:	sub	r3, r2, r0
   1373c:	cmp	r3, #1
   13740:	mov	r4, r2
   13744:	str	lr, [sp, #12]
   13748:	ble	1375c <_start@@Base+0x1024>
   1374c:	ldrb	r3, [r1, #1]
   13750:	cmp	r3, #32
   13754:	bhi	1376c <_start@@Base+0x1034>
   13758:	beq	13798 <_start@@Base+0x1060>
   1375c:	mov	r1, r0
   13760:	mov	r2, r4
   13764:	mov	r0, r5
   13768:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   1376c:	cmp	r4, r0
   13770:	beq	13780 <_start@@Base+0x1048>
   13774:	ldrb	r3, [r0]
   13778:	cmp	r3, #93	; 0x5d
   1377c:	beq	137ac <_start@@Base+0x1074>
   13780:	mov	r3, #1
   13784:	ldrd	r4, [sp]
   13788:	str	r3, [r6]
   1378c:	ldr	r6, [sp, #8]
   13790:	add	sp, sp, #12
   13794:	pop	{pc}		; (ldr pc, [sp], #4)
   13798:	ldrb	r3, [r1, #2]
   1379c:	cmp	r3, #32
   137a0:	addhi	r0, r1, #2
   137a4:	bls	1375c <_start@@Base+0x1024>
   137a8:	b	1376c <_start@@Base+0x1034>
   137ac:	mov	r3, #0
   137b0:	mov	r2, r4
   137b4:	ldr	lr, [sp, #12]
   137b8:	add	r1, r0, #1
   137bc:	mov	r0, r5
   137c0:	ldrd	r4, [sp]
   137c4:	str	r3, [r6]
   137c8:	ldr	r6, [sp, #8]
   137cc:	add	sp, sp, #16
   137d0:	b	13118 <_start@@Base+0x9e0>
   137d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   137d8:	cmp	r1, r2
   137dc:	mov	r5, r2
   137e0:	strd	r6, [sp, #8]
   137e4:	strd	r8, [sp, #16]
   137e8:	mov	r8, r0
   137ec:	strd	sl, [sp, #24]
   137f0:	str	lr, [sp, #32]
   137f4:	sub	sp, sp, #44	; 0x2c
   137f8:	mov	lr, #0
   137fc:	str	r3, [sp, #16]
   13800:	ldr	r3, [sp, #80]	; 0x50
   13804:	str	lr, [r3]
   13808:	beq	13964 <_start@@Base+0x122c>
   1380c:	ldrb	r3, [r1]
   13810:	cmp	r3, #34	; 0x22
   13814:	moveq	r2, #0
   13818:	addeq	r3, r1, #1
   1381c:	streq	r2, [r0, #12]
   13820:	beq	13978 <_start@@Base+0x1240>
   13824:	cmp	r3, #46	; 0x2e
   13828:	movne	r2, #1
   1382c:	movne	r3, r1
   13830:	strne	r2, [r0, #12]
   13834:	beq	13940 <_start@@Base+0x1208>
   13838:	mov	r2, #0
   1383c:	add	fp, sp, #24
   13840:	add	sl, sp, #28
   13844:	add	r9, sp, #32
   13848:	str	r2, [sp, #12]
   1384c:	ldr	r7, [sp, #16]
   13850:	mov	r6, r3
   13854:	mov	r1, r3
   13858:	ldr	r4, [r7]
   1385c:	b	13878 <_start@@Base+0x1140>
   13860:	cmp	r6, r0
   13864:	mov	r6, r0
   13868:	bne	138bc <_start@@Base+0x1184>
   1386c:	ldr	r4, [r7, #4]!
   13870:	cmp	r4, #0
   13874:	beq	13928 <_start@@Base+0x11f0>
   13878:	mov	r3, fp
   1387c:	mov	r2, r5
   13880:	stm	sp, {r9, sl}
   13884:	mov	r0, r8
   13888:	blx	r4
   1388c:	cmp	r5, r0
   13890:	mov	r1, r0
   13894:	bne	13860 <_start@@Base+0x1128>
   13898:	mov	r3, r0
   1389c:	mov	r0, r3
   138a0:	add	sp, sp, #44	; 0x2c
   138a4:	ldrd	r4, [sp]
   138a8:	ldrd	r6, [sp, #8]
   138ac:	ldrd	r8, [sp, #16]
   138b0:	ldrd	sl, [sp, #24]
   138b4:	add	sp, sp, #32
   138b8:	pop	{pc}		; (ldr pc, [sp], #4)
   138bc:	ldr	r2, [sp, #12]
   138c0:	mov	r3, r0
   138c4:	cmp	r2, #0
   138c8:	beq	138d8 <_start@@Base+0x11a0>
   138cc:	ldr	r2, [r8, #12]
   138d0:	cmp	r2, #0
   138d4:	bne	139bc <_start@@Base+0x1284>
   138d8:	ldrd	r0, [sp, #32]
   138dc:	str	r3, [sp, #20]
   138e0:	bl	2a794 <flatcc_json_parser_struct_as_root@@Base+0x588>
   138e4:	vmov	s14, r0
   138e8:	ldr	r2, [sp, #24]
   138ec:	ldr	r3, [sp, #20]
   138f0:	cmp	r2, #0
   138f4:	ldr	r2, [sp, #80]	; 0x50
   138f8:	vnegne.f32	s14, s14
   138fc:	vldr	s15, [r2]
   13900:	ldr	r2, [sp, #12]
   13904:	vadd.f32	s15, s15, s14
   13908:	add	r2, r2, #1
   1390c:	str	r2, [sp, #12]
   13910:	ldr	r2, [sp, #28]
   13914:	cmp	r2, #0
   13918:	ldr	r2, [sp, #80]	; 0x50
   1391c:	vstr	s15, [r2]
   13920:	bne	1384c <_start@@Base+0x1114>
   13924:	b	1389c <_start@@Base+0x1164>
   13928:	mov	r3, #23
   1392c:	mov	r2, r5
   13930:	mov	r0, r8
   13934:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   13938:	mov	r3, r0
   1393c:	b	1389c <_start@@Base+0x1164>
   13940:	mov	r3, #5
   13944:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   13948:	ldr	r2, [r8, #12]
   1394c:	mov	r3, r0
   13950:	cmp	r2, #0
   13954:	beq	13978 <_start@@Base+0x1240>
   13958:	cmp	r5, r3
   1395c:	bne	13838 <_start@@Base+0x1100>
   13960:	b	1389c <_start@@Base+0x1164>
   13964:	ldr	r3, [r0, #12]
   13968:	cmp	r3, #0
   1396c:	movne	r3, r1
   13970:	bne	1389c <_start@@Base+0x1164>
   13974:	mov	r3, r5
   13978:	sub	r2, r5, r3
   1397c:	cmp	r2, #1
   13980:	ble	139a4 <_start@@Base+0x126c>
   13984:	ldrb	r2, [r3]
   13988:	cmp	r2, #32
   1398c:	bhi	13958 <_start@@Base+0x1220>
   13990:	bne	139a4 <_start@@Base+0x126c>
   13994:	ldrb	r2, [r3, #1]
   13998:	cmp	r2, #32
   1399c:	addhi	r3, r3, #1
   139a0:	bhi	13958 <_start@@Base+0x1220>
   139a4:	mov	r1, r3
   139a8:	mov	r2, r5
   139ac:	mov	r0, r8
   139b0:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   139b4:	mov	r3, r0
   139b8:	b	13958 <_start@@Base+0x1220>
   139bc:	mov	r1, r3
   139c0:	mov	r2, r5
   139c4:	mov	r3, #14
   139c8:	mov	r0, r8
   139cc:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   139d0:	mov	r3, r0
   139d4:	b	1389c <_start@@Base+0x1164>
   139d8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   139dc:	cmp	r1, r2
   139e0:	mov	r5, r2
   139e4:	strd	r6, [sp, #8]
   139e8:	mov	r6, #0
   139ec:	mov	r7, #0
   139f0:	strd	r8, [sp, #16]
   139f4:	mov	r8, r0
   139f8:	strd	sl, [sp, #24]
   139fc:	str	lr, [sp, #32]
   13a00:	sub	sp, sp, #44	; 0x2c
   13a04:	str	r3, [sp, #16]
   13a08:	ldr	r3, [sp, #80]	; 0x50
   13a0c:	strd	r6, [r3]
   13a10:	beq	13b6c <_start@@Base+0x1434>
   13a14:	ldrb	r3, [r1]
   13a18:	cmp	r3, #34	; 0x22
   13a1c:	moveq	r2, #0
   13a20:	addeq	r3, r1, #1
   13a24:	streq	r2, [r0, #12]
   13a28:	beq	13b80 <_start@@Base+0x1448>
   13a2c:	cmp	r3, #46	; 0x2e
   13a30:	movne	r2, #1
   13a34:	movne	r3, r1
   13a38:	strne	r2, [r0, #12]
   13a3c:	beq	13b48 <_start@@Base+0x1410>
   13a40:	mov	r2, #0
   13a44:	add	fp, sp, #24
   13a48:	add	sl, sp, #28
   13a4c:	add	r9, sp, #32
   13a50:	str	r2, [sp, #12]
   13a54:	ldr	r7, [sp, #16]
   13a58:	mov	r6, r3
   13a5c:	mov	r1, r3
   13a60:	ldr	r4, [r7]
   13a64:	b	13a80 <_start@@Base+0x1348>
   13a68:	cmp	r6, r0
   13a6c:	mov	r6, r0
   13a70:	bne	13ac4 <_start@@Base+0x138c>
   13a74:	ldr	r4, [r7, #4]!
   13a78:	cmp	r4, #0
   13a7c:	beq	13b30 <_start@@Base+0x13f8>
   13a80:	mov	r3, fp
   13a84:	mov	r2, r5
   13a88:	stm	sp, {r9, sl}
   13a8c:	mov	r0, r8
   13a90:	blx	r4
   13a94:	cmp	r5, r0
   13a98:	mov	r1, r0
   13a9c:	bne	13a68 <_start@@Base+0x1330>
   13aa0:	mov	r3, r0
   13aa4:	mov	r0, r3
   13aa8:	add	sp, sp, #44	; 0x2c
   13aac:	ldrd	r4, [sp]
   13ab0:	ldrd	r6, [sp, #8]
   13ab4:	ldrd	r8, [sp, #16]
   13ab8:	ldrd	sl, [sp, #24]
   13abc:	add	sp, sp, #32
   13ac0:	pop	{pc}		; (ldr pc, [sp], #4)
   13ac4:	ldr	r2, [sp, #12]
   13ac8:	mov	r3, r0
   13acc:	cmp	r2, #0
   13ad0:	beq	13ae0 <_start@@Base+0x13a8>
   13ad4:	ldr	r2, [r8, #12]
   13ad8:	cmp	r2, #0
   13adc:	bne	13bc4 <_start@@Base+0x148c>
   13ae0:	ldrd	r0, [sp, #32]
   13ae4:	str	r3, [sp, #20]
   13ae8:	bl	2a55c <flatcc_json_parser_struct_as_root@@Base+0x350>
   13aec:	vmov	d6, r0, r1
   13af0:	ldr	r2, [sp, #24]
   13af4:	ldr	r3, [sp, #20]
   13af8:	cmp	r2, #0
   13afc:	ldr	r2, [sp, #80]	; 0x50
   13b00:	vnegne.f64	d6, d6
   13b04:	vldr	d7, [r2]
   13b08:	ldr	r2, [sp, #12]
   13b0c:	vadd.f64	d7, d7, d6
   13b10:	add	r2, r2, #1
   13b14:	str	r2, [sp, #12]
   13b18:	ldr	r2, [sp, #28]
   13b1c:	cmp	r2, #0
   13b20:	ldr	r2, [sp, #80]	; 0x50
   13b24:	vstr	d7, [r2]
   13b28:	bne	13a54 <_start@@Base+0x131c>
   13b2c:	b	13aa4 <_start@@Base+0x136c>
   13b30:	mov	r3, #23
   13b34:	mov	r2, r5
   13b38:	mov	r0, r8
   13b3c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   13b40:	mov	r3, r0
   13b44:	b	13aa4 <_start@@Base+0x136c>
   13b48:	mov	r3, #5
   13b4c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   13b50:	ldr	r2, [r8, #12]
   13b54:	mov	r3, r0
   13b58:	cmp	r2, #0
   13b5c:	beq	13b80 <_start@@Base+0x1448>
   13b60:	cmp	r5, r3
   13b64:	bne	13a40 <_start@@Base+0x1308>
   13b68:	b	13aa4 <_start@@Base+0x136c>
   13b6c:	ldr	r3, [r0, #12]
   13b70:	cmp	r3, #0
   13b74:	movne	r3, r1
   13b78:	bne	13aa4 <_start@@Base+0x136c>
   13b7c:	mov	r3, r5
   13b80:	sub	r2, r5, r3
   13b84:	cmp	r2, #1
   13b88:	ble	13bac <_start@@Base+0x1474>
   13b8c:	ldrb	r2, [r3]
   13b90:	cmp	r2, #32
   13b94:	bhi	13b60 <_start@@Base+0x1428>
   13b98:	bne	13bac <_start@@Base+0x1474>
   13b9c:	ldrb	r2, [r3, #1]
   13ba0:	cmp	r2, #32
   13ba4:	addhi	r3, r3, #1
   13ba8:	bhi	13b60 <_start@@Base+0x1428>
   13bac:	mov	r1, r3
   13bb0:	mov	r2, r5
   13bb4:	mov	r0, r8
   13bb8:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   13bbc:	mov	r3, r0
   13bc0:	b	13b60 <_start@@Base+0x1428>
   13bc4:	mov	r1, r3
   13bc8:	mov	r2, r5
   13bcc:	mov	r3, #14
   13bd0:	mov	r0, r8
   13bd4:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   13bd8:	mov	r3, r0
   13bdc:	b	13aa4 <_start@@Base+0x136c>
   13be0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13be4:	mov	ip, #0
   13be8:	cmp	r1, r2
   13bec:	strd	r6, [sp, #8]
   13bf0:	mov	r4, r1
   13bf4:	mov	r6, r2
   13bf8:	strd	r8, [sp, #16]
   13bfc:	mov	r9, r0
   13c00:	strd	sl, [sp, #24]
   13c04:	str	lr, [sp, #32]
   13c08:	sub	sp, sp, #44	; 0x2c
   13c0c:	str	r3, [sp, #16]
   13c10:	ldr	r3, [sp, #80]	; 0x50
   13c14:	strb	ip, [r3]
   13c18:	beq	13d7c <_start@@Base+0x1644>
   13c1c:	ldrb	r3, [r1]
   13c20:	cmp	r3, #34	; 0x22
   13c24:	addeq	r4, r1, #1
   13c28:	streq	ip, [r0, #12]
   13c2c:	beq	13d8c <_start@@Base+0x1654>
   13c30:	cmp	r3, #46	; 0x2e
   13c34:	movne	r3, #1
   13c38:	strne	r3, [r0, #12]
   13c3c:	beq	13d58 <_start@@Base+0x1620>
   13c40:	mov	r3, #0
   13c44:	add	fp, sp, #24
   13c48:	add	sl, sp, #28
   13c4c:	str	r3, [sp, #8]
   13c50:	str	r3, [sp, #12]
   13c54:	add	r3, sp, #32
   13c58:	str	r3, [sp, #20]
   13c5c:	ldr	r8, [sp, #16]
   13c60:	mov	r7, r4
   13c64:	mov	r1, r4
   13c68:	ldr	r4, [sp, #20]
   13c6c:	ldr	r5, [r8]
   13c70:	b	13c8c <_start@@Base+0x1554>
   13c74:	cmp	r7, r0
   13c78:	mov	r7, r0
   13c7c:	bne	13cd0 <_start@@Base+0x1598>
   13c80:	ldr	r5, [r8, #4]!
   13c84:	cmp	r5, #0
   13c88:	beq	13d40 <_start@@Base+0x1608>
   13c8c:	mov	r3, fp
   13c90:	mov	r2, r6
   13c94:	stm	sp, {r4, sl}
   13c98:	mov	r0, r9
   13c9c:	blx	r5
   13ca0:	cmp	r6, r0
   13ca4:	mov	r1, r0
   13ca8:	bne	13c74 <_start@@Base+0x153c>
   13cac:	mov	r4, r0
   13cb0:	mov	r0, r4
   13cb4:	add	sp, sp, #44	; 0x2c
   13cb8:	ldrd	r4, [sp]
   13cbc:	ldrd	r6, [sp, #8]
   13cc0:	ldrd	r8, [sp, #16]
   13cc4:	ldrd	sl, [sp, #24]
   13cc8:	add	sp, sp, #32
   13ccc:	pop	{pc}		; (ldr pc, [sp], #4)
   13cd0:	ldr	r3, [sp, #8]
   13cd4:	mov	r4, r0
   13cd8:	cmp	r3, #0
   13cdc:	beq	13cec <_start@@Base+0x15b4>
   13ce0:	ldr	r3, [r9, #12]
   13ce4:	cmp	r3, #0
   13ce8:	bne	13df4 <_start@@Base+0x16bc>
   13cec:	ldr	r3, [sp, #24]
   13cf0:	cmp	r3, #0
   13cf4:	bne	13dd0 <_start@@Base+0x1698>
   13cf8:	ldrd	r2, [sp, #32]
   13cfc:	orrs	r3, r2, r3
   13d00:	movne	r3, #1
   13d04:	moveq	r3, #0
   13d08:	str	r3, [sp, #12]
   13d0c:	ldr	r2, [sp, #8]
   13d10:	ldr	r1, [sp, #12]
   13d14:	ldr	r3, [sp, #80]	; 0x50
   13d18:	add	r2, r2, #1
   13d1c:	str	r2, [sp, #8]
   13d20:	ldr	r2, [sp, #28]
   13d24:	ldrb	r3, [r3]
   13d28:	cmp	r2, #0
   13d2c:	ldr	r2, [sp, #80]	; 0x50
   13d30:	add	r3, r1, r3
   13d34:	strb	r3, [r2]
   13d38:	bne	13c5c <_start@@Base+0x1524>
   13d3c:	b	13cb0 <_start@@Base+0x1578>
   13d40:	mov	r2, r6
   13d44:	mov	r0, r9
   13d48:	mov	r3, #23
   13d4c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   13d50:	mov	r4, r0
   13d54:	b	13cb0 <_start@@Base+0x1578>
   13d58:	mov	r3, #5
   13d5c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   13d60:	ldr	r3, [r9, #12]
   13d64:	mov	r4, r0
   13d68:	cmp	r3, #0
   13d6c:	beq	13d8c <_start@@Base+0x1654>
   13d70:	cmp	r6, r4
   13d74:	bne	13c40 <_start@@Base+0x1508>
   13d78:	b	13cb0 <_start@@Base+0x1578>
   13d7c:	ldr	r3, [r0, #12]
   13d80:	cmp	r3, #0
   13d84:	bne	13cb0 <_start@@Base+0x1578>
   13d88:	mov	r4, r6
   13d8c:	sub	r3, r6, r4
   13d90:	cmp	r3, #1
   13d94:	ble	13db8 <_start@@Base+0x1680>
   13d98:	ldrb	r3, [r4]
   13d9c:	cmp	r3, #32
   13da0:	bhi	13d70 <_start@@Base+0x1638>
   13da4:	bne	13db8 <_start@@Base+0x1680>
   13da8:	ldrb	r3, [r4, #1]
   13dac:	cmp	r3, #32
   13db0:	addhi	r4, r4, #1
   13db4:	bhi	13d70 <_start@@Base+0x1638>
   13db8:	mov	r1, r4
   13dbc:	mov	r2, r6
   13dc0:	mov	r0, r9
   13dc4:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   13dc8:	mov	r4, r0
   13dcc:	b	13d70 <_start@@Base+0x1638>
   13dd0:	mov	r3, #8
   13dd4:	mov	r2, r6
   13dd8:	mov	r1, r4
   13ddc:	mov	r0, r9
   13de0:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   13de4:	cmp	r6, r0
   13de8:	bne	13d0c <_start@@Base+0x15d4>
   13dec:	mov	r4, r6
   13df0:	b	13cb0 <_start@@Base+0x1578>
   13df4:	mov	r1, r4
   13df8:	mov	r2, r6
   13dfc:	mov	r0, r9
   13e00:	mov	r3, #14
   13e04:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   13e08:	mov	r4, r0
   13e0c:	b	13cb0 <_start@@Base+0x1578>
   13e10:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13e14:	cmp	r1, r2
   13e18:	mov	r4, r1
   13e1c:	strd	r6, [sp, #8]
   13e20:	mov	r6, r2
   13e24:	strd	r8, [sp, #16]
   13e28:	mov	r9, r0
   13e2c:	strd	sl, [sp, #24]
   13e30:	mov	sl, #0
   13e34:	mov	fp, #0
   13e38:	str	lr, [sp, #32]
   13e3c:	sub	sp, sp, #52	; 0x34
   13e40:	str	r3, [sp, #24]
   13e44:	ldr	r3, [sp, #88]	; 0x58
   13e48:	strd	sl, [r3]
   13e4c:	beq	13fc8 <_start@@Base+0x1890>
   13e50:	ldrb	r3, [r1]
   13e54:	cmp	r3, #34	; 0x22
   13e58:	moveq	r3, #0
   13e5c:	addeq	r4, r1, #1
   13e60:	streq	r3, [r0, #12]
   13e64:	beq	13fd8 <_start@@Base+0x18a0>
   13e68:	cmp	r3, #46	; 0x2e
   13e6c:	movne	r3, #1
   13e70:	strne	r3, [r0, #12]
   13e74:	beq	13fa4 <_start@@Base+0x186c>
   13e78:	mov	r3, #0
   13e7c:	add	fp, sp, #32
   13e80:	add	sl, sp, #36	; 0x24
   13e84:	str	r3, [sp, #12]
   13e88:	str	r3, [sp, #16]
   13e8c:	str	r3, [sp, #20]
   13e90:	add	r3, sp, #40	; 0x28
   13e94:	str	r3, [sp, #28]
   13e98:	ldr	r8, [sp, #24]
   13e9c:	mov	r7, r4
   13ea0:	mov	r1, r4
   13ea4:	ldr	r4, [sp, #28]
   13ea8:	ldr	r5, [r8]
   13eac:	b	13ec8 <_start@@Base+0x1790>
   13eb0:	cmp	r7, r0
   13eb4:	mov	r7, r0
   13eb8:	bne	13f0c <_start@@Base+0x17d4>
   13ebc:	ldr	r5, [r8, #4]!
   13ec0:	cmp	r5, #0
   13ec4:	beq	13f8c <_start@@Base+0x1854>
   13ec8:	mov	r3, fp
   13ecc:	mov	r2, r6
   13ed0:	stm	sp, {r4, sl}
   13ed4:	mov	r0, r9
   13ed8:	blx	r5
   13edc:	cmp	r6, r0
   13ee0:	mov	r1, r0
   13ee4:	bne	13eb0 <_start@@Base+0x1778>
   13ee8:	mov	r4, r0
   13eec:	mov	r0, r4
   13ef0:	add	sp, sp, #52	; 0x34
   13ef4:	ldrd	r4, [sp]
   13ef8:	ldrd	r6, [sp, #8]
   13efc:	ldrd	r8, [sp, #16]
   13f00:	ldrd	sl, [sp, #24]
   13f04:	add	sp, sp, #32
   13f08:	pop	{pc}		; (ldr pc, [sp], #4)
   13f0c:	ldr	r3, [sp, #12]
   13f10:	mov	r4, r0
   13f14:	cmp	r3, #0
   13f18:	beq	13f28 <_start@@Base+0x17f0>
   13f1c:	ldr	r3, [r9, #12]
   13f20:	cmp	r3, #0
   13f24:	bne	14040 <_start@@Base+0x1908>
   13f28:	ldr	r3, [sp, #32]
   13f2c:	cmp	r3, #0
   13f30:	bne	1401c <_start@@Base+0x18e4>
   13f34:	ldr	r3, [sp, #40]	; 0x28
   13f38:	str	r3, [sp, #16]
   13f3c:	ldr	r3, [sp, #44]	; 0x2c
   13f40:	str	r3, [sp, #20]
   13f44:	ldr	r2, [sp, #12]
   13f48:	ldr	r0, [sp, #16]
   13f4c:	ldr	r3, [sp, #88]	; 0x58
   13f50:	add	r2, r2, #1
   13f54:	ldr	r1, [sp, #36]	; 0x24
   13f58:	str	r2, [sp, #12]
   13f5c:	ldr	r2, [sp, #88]	; 0x58
   13f60:	ldr	r3, [r3]
   13f64:	ldr	r2, [r2, #4]
   13f68:	adds	r3, r3, r0
   13f6c:	ldr	r0, [sp, #20]
   13f70:	adc	r2, r2, r0
   13f74:	ldr	r0, [sp, #88]	; 0x58
   13f78:	cmp	r1, #0
   13f7c:	str	r3, [r0]
   13f80:	str	r2, [r0, #4]
   13f84:	bne	13e98 <_start@@Base+0x1760>
   13f88:	b	13eec <_start@@Base+0x17b4>
   13f8c:	mov	r2, r6
   13f90:	mov	r0, r9
   13f94:	mov	r3, #23
   13f98:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   13f9c:	mov	r4, r0
   13fa0:	b	13eec <_start@@Base+0x17b4>
   13fa4:	mov	r3, #5
   13fa8:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   13fac:	ldr	r3, [r9, #12]
   13fb0:	mov	r4, r0
   13fb4:	cmp	r3, #0
   13fb8:	beq	13fd8 <_start@@Base+0x18a0>
   13fbc:	cmp	r6, r4
   13fc0:	bne	13e78 <_start@@Base+0x1740>
   13fc4:	b	13eec <_start@@Base+0x17b4>
   13fc8:	ldr	r3, [r0, #12]
   13fcc:	cmp	r3, #0
   13fd0:	bne	13eec <_start@@Base+0x17b4>
   13fd4:	mov	r4, r6
   13fd8:	sub	r3, r6, r4
   13fdc:	cmp	r3, #1
   13fe0:	ble	14004 <_start@@Base+0x18cc>
   13fe4:	ldrb	r3, [r4]
   13fe8:	cmp	r3, #32
   13fec:	bhi	13fbc <_start@@Base+0x1884>
   13ff0:	bne	14004 <_start@@Base+0x18cc>
   13ff4:	ldrb	r3, [r4, #1]
   13ff8:	cmp	r3, #32
   13ffc:	addhi	r4, r4, #1
   14000:	bhi	13fbc <_start@@Base+0x1884>
   14004:	mov	r1, r4
   14008:	mov	r2, r6
   1400c:	mov	r0, r9
   14010:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   14014:	mov	r4, r0
   14018:	b	13fbc <_start@@Base+0x1884>
   1401c:	mov	r3, #8
   14020:	mov	r2, r6
   14024:	mov	r1, r4
   14028:	mov	r0, r9
   1402c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   14030:	cmp	r6, r0
   14034:	bne	13f44 <_start@@Base+0x180c>
   14038:	mov	r4, r6
   1403c:	b	13eec <_start@@Base+0x17b4>
   14040:	mov	r1, r4
   14044:	mov	r2, r6
   14048:	mov	r0, r9
   1404c:	mov	r3, #14
   14050:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   14054:	mov	r4, r0
   14058:	b	13eec <_start@@Base+0x17b4>
   1405c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14060:	mov	ip, #0
   14064:	cmp	r1, r2
   14068:	strd	r6, [sp, #8]
   1406c:	mov	r4, r1
   14070:	mov	r6, r2
   14074:	strd	r8, [sp, #16]
   14078:	mov	r9, r0
   1407c:	strd	sl, [sp, #24]
   14080:	str	lr, [sp, #32]
   14084:	sub	sp, sp, #44	; 0x2c
   14088:	str	r3, [sp, #12]
   1408c:	ldr	r3, [sp, #80]	; 0x50
   14090:	strb	ip, [r3]
   14094:	beq	141fc <_start@@Base+0x1ac4>
   14098:	ldrb	r3, [r1]
   1409c:	cmp	r3, #34	; 0x22
   140a0:	addeq	r4, r1, #1
   140a4:	streq	ip, [r0, #12]
   140a8:	beq	1420c <_start@@Base+0x1ad4>
   140ac:	cmp	r3, #46	; 0x2e
   140b0:	movne	r3, #1
   140b4:	strne	r3, [r0, #12]
   140b8:	beq	141d8 <_start@@Base+0x1aa0>
   140bc:	mov	r3, #0
   140c0:	add	fp, sp, #24
   140c4:	add	sl, sp, #28
   140c8:	str	r3, [sp, #8]
   140cc:	str	r3, [sp, #16]
   140d0:	add	r3, sp, #32
   140d4:	str	r3, [sp, #20]
   140d8:	ldr	r8, [sp, #12]
   140dc:	mov	r7, r4
   140e0:	mov	r1, r4
   140e4:	ldr	r4, [sp, #20]
   140e8:	ldr	r5, [r8]
   140ec:	b	14108 <_start@@Base+0x19d0>
   140f0:	cmp	r7, r0
   140f4:	mov	r7, r0
   140f8:	bne	1414c <_start@@Base+0x1a14>
   140fc:	ldr	r5, [r8, #4]!
   14100:	cmp	r5, #0
   14104:	beq	141c0 <_start@@Base+0x1a88>
   14108:	mov	r3, fp
   1410c:	mov	r2, r6
   14110:	stm	sp, {r4, sl}
   14114:	mov	r0, r9
   14118:	blx	r5
   1411c:	cmp	r6, r0
   14120:	mov	r1, r0
   14124:	bne	140f0 <_start@@Base+0x19b8>
   14128:	mov	r4, r0
   1412c:	mov	r0, r4
   14130:	add	sp, sp, #44	; 0x2c
   14134:	ldrd	r4, [sp]
   14138:	ldrd	r6, [sp, #8]
   1413c:	ldrd	r8, [sp, #16]
   14140:	ldrd	sl, [sp, #24]
   14144:	add	sp, sp, #32
   14148:	pop	{pc}		; (ldr pc, [sp], #4)
   1414c:	ldr	r3, [sp, #8]
   14150:	mov	r4, r0
   14154:	cmp	r3, #0
   14158:	beq	14168 <_start@@Base+0x1a30>
   1415c:	ldr	r3, [r9, #12]
   14160:	cmp	r3, #0
   14164:	bne	1428c <_start@@Base+0x1b54>
   14168:	ldr	r3, [sp, #24]
   1416c:	cmp	r3, #0
   14170:	bne	14250 <_start@@Base+0x1b18>
   14174:	ldrd	r2, [sp, #32]
   14178:	cmp	r3, #0
   1417c:	cmpeq	r2, #255	; 0xff
   14180:	uxtbls	r3, r2
   14184:	strls	r3, [sp, #16]
   14188:	bhi	14274 <_start@@Base+0x1b3c>
   1418c:	ldr	r2, [sp, #8]
   14190:	ldr	r1, [sp, #16]
   14194:	ldr	r3, [sp, #80]	; 0x50
   14198:	add	r2, r2, #1
   1419c:	str	r2, [sp, #8]
   141a0:	ldr	r2, [sp, #28]
   141a4:	ldrb	r3, [r3]
   141a8:	cmp	r2, #0
   141ac:	ldr	r2, [sp, #80]	; 0x50
   141b0:	add	r3, r1, r3
   141b4:	strb	r3, [r2]
   141b8:	bne	140d8 <_start@@Base+0x19a0>
   141bc:	b	1412c <_start@@Base+0x19f4>
   141c0:	mov	r2, r6
   141c4:	mov	r0, r9
   141c8:	mov	r3, #23
   141cc:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   141d0:	mov	r4, r0
   141d4:	b	1412c <_start@@Base+0x19f4>
   141d8:	mov	r3, #5
   141dc:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   141e0:	ldr	r3, [r9, #12]
   141e4:	mov	r4, r0
   141e8:	cmp	r3, #0
   141ec:	beq	1420c <_start@@Base+0x1ad4>
   141f0:	cmp	r6, r4
   141f4:	bne	140bc <_start@@Base+0x1984>
   141f8:	b	1412c <_start@@Base+0x19f4>
   141fc:	ldr	r3, [r0, #12]
   14200:	cmp	r3, #0
   14204:	bne	1412c <_start@@Base+0x19f4>
   14208:	mov	r4, r6
   1420c:	sub	r3, r6, r4
   14210:	cmp	r3, #1
   14214:	ble	14238 <_start@@Base+0x1b00>
   14218:	ldrb	r3, [r4]
   1421c:	cmp	r3, #32
   14220:	bhi	141f0 <_start@@Base+0x1ab8>
   14224:	bne	14238 <_start@@Base+0x1b00>
   14228:	ldrb	r3, [r4, #1]
   1422c:	cmp	r3, #32
   14230:	addhi	r4, r4, #1
   14234:	bhi	141f0 <_start@@Base+0x1ab8>
   14238:	mov	r1, r4
   1423c:	mov	r2, r6
   14240:	mov	r0, r9
   14244:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   14248:	mov	r4, r0
   1424c:	b	141f0 <_start@@Base+0x1ab8>
   14250:	mov	r3, #8
   14254:	mov	r2, r6
   14258:	mov	r1, r4
   1425c:	mov	r0, r9
   14260:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   14264:	cmp	r6, r0
   14268:	bne	1418c <_start@@Base+0x1a54>
   1426c:	mov	r4, r6
   14270:	b	1412c <_start@@Base+0x19f4>
   14274:	mov	r3, #7
   14278:	mov	r2, r6
   1427c:	mov	r1, r4
   14280:	mov	r0, r9
   14284:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   14288:	b	14264 <_start@@Base+0x1b2c>
   1428c:	mov	r1, r4
   14290:	mov	r2, r6
   14294:	mov	r0, r9
   14298:	mov	r3, #14
   1429c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   142a0:	mov	r4, r0
   142a4:	b	1412c <_start@@Base+0x19f4>
   142a8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   142ac:	mov	ip, #0
   142b0:	cmp	r1, r2
   142b4:	strd	r6, [sp, #8]
   142b8:	mov	r4, r1
   142bc:	mov	r6, r2
   142c0:	strd	r8, [sp, #16]
   142c4:	mov	r9, r0
   142c8:	strd	sl, [sp, #24]
   142cc:	str	lr, [sp, #32]
   142d0:	sub	sp, sp, #44	; 0x2c
   142d4:	str	r3, [sp, #12]
   142d8:	ldr	r3, [sp, #80]	; 0x50
   142dc:	strh	ip, [r3]
   142e0:	beq	14490 <_start@@Base+0x1d58>
   142e4:	ldrb	r3, [r1]
   142e8:	cmp	r3, #34	; 0x22
   142ec:	addeq	r4, r1, #1
   142f0:	streq	ip, [r0, #12]
   142f4:	beq	144a0 <_start@@Base+0x1d68>
   142f8:	cmp	r3, #46	; 0x2e
   142fc:	movne	r3, #1
   14300:	strne	r3, [r0, #12]
   14304:	beq	1446c <_start@@Base+0x1d34>
   14308:	mov	r3, #0
   1430c:	add	fp, sp, #24
   14310:	add	sl, sp, #28
   14314:	str	r3, [sp, #8]
   14318:	str	r3, [sp, #20]
   1431c:	add	r3, sp, #32
   14320:	str	r3, [sp, #16]
   14324:	ldr	r8, [sp, #12]
   14328:	mov	r7, r4
   1432c:	mov	r1, r4
   14330:	ldr	r4, [sp, #16]
   14334:	ldr	r5, [r8]
   14338:	b	14354 <_start@@Base+0x1c1c>
   1433c:	cmp	r7, r0
   14340:	mov	r7, r0
   14344:	bne	14398 <_start@@Base+0x1c60>
   14348:	ldr	r5, [r8, #4]!
   1434c:	cmp	r5, #0
   14350:	beq	14410 <_start@@Base+0x1cd8>
   14354:	mov	r3, fp
   14358:	mov	r2, r6
   1435c:	stm	sp, {r4, sl}
   14360:	mov	r0, r9
   14364:	blx	r5
   14368:	cmp	r6, r0
   1436c:	mov	r1, r0
   14370:	bne	1433c <_start@@Base+0x1c04>
   14374:	mov	r4, r0
   14378:	mov	r0, r4
   1437c:	add	sp, sp, #44	; 0x2c
   14380:	ldrd	r4, [sp]
   14384:	ldrd	r6, [sp, #8]
   14388:	ldrd	r8, [sp, #16]
   1438c:	ldrd	sl, [sp, #24]
   14390:	add	sp, sp, #32
   14394:	pop	{pc}		; (ldr pc, [sp], #4)
   14398:	ldr	r3, [sp, #8]
   1439c:	mov	r4, r0
   143a0:	cmp	r3, #0
   143a4:	beq	143b4 <_start@@Base+0x1c7c>
   143a8:	ldr	r3, [r9, #12]
   143ac:	cmp	r3, #0
   143b0:	bne	14504 <_start@@Base+0x1dcc>
   143b4:	ldr	r1, [sp, #24]
   143b8:	ldrd	r2, [sp, #32]
   143bc:	cmp	r1, #0
   143c0:	beq	14428 <_start@@Base+0x1cf0>
   143c4:	cmp	r3, #0
   143c8:	cmpeq	r2, #32768	; 0x8000
   143cc:	bhi	144e4 <_start@@Base+0x1dac>
   143d0:	rsb	r2, r2, #0
   143d4:	uxth	r2, r2
   143d8:	sxth	r3, r2
   143dc:	str	r3, [sp, #20]
   143e0:	ldr	r3, [sp, #80]	; 0x50
   143e4:	ldrh	r1, [r3]
   143e8:	ldr	r3, [sp, #8]
   143ec:	add	r2, r2, r1
   143f0:	add	r3, r3, #1
   143f4:	str	r3, [sp, #8]
   143f8:	ldr	r3, [sp, #28]
   143fc:	cmp	r3, #0
   14400:	ldr	r3, [sp, #80]	; 0x50
   14404:	strh	r2, [r3]
   14408:	bne	14324 <_start@@Base+0x1bec>
   1440c:	b	14378 <_start@@Base+0x1c40>
   14410:	mov	r2, r6
   14414:	mov	r0, r9
   14418:	mov	r3, #23
   1441c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   14420:	mov	r4, r0
   14424:	b	14378 <_start@@Base+0x1c40>
   14428:	mov	r1, #0
   1442c:	movw	r0, #32767	; 0x7fff
   14430:	cmp	r3, r1
   14434:	cmpeq	r2, r0
   14438:	sxthls	r1, r2
   1443c:	uxthls	r2, r2
   14440:	strls	r1, [sp, #20]
   14444:	bls	143e0 <_start@@Base+0x1ca8>
   14448:	mov	r3, #7
   1444c:	mov	r2, r6
   14450:	mov	r1, r4
   14454:	mov	r0, r9
   14458:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1445c:	cmp	r6, r0
   14460:	beq	144fc <_start@@Base+0x1dc4>
   14464:	ldrh	r2, [sp, #20]
   14468:	b	143e0 <_start@@Base+0x1ca8>
   1446c:	mov	r3, #5
   14470:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   14474:	ldr	r3, [r9, #12]
   14478:	mov	r4, r0
   1447c:	cmp	r3, #0
   14480:	beq	144a0 <_start@@Base+0x1d68>
   14484:	cmp	r6, r4
   14488:	bne	14308 <_start@@Base+0x1bd0>
   1448c:	b	14378 <_start@@Base+0x1c40>
   14490:	ldr	r3, [r0, #12]
   14494:	cmp	r3, #0
   14498:	bne	14378 <_start@@Base+0x1c40>
   1449c:	mov	r4, r6
   144a0:	sub	r3, r6, r4
   144a4:	cmp	r3, #1
   144a8:	ble	144cc <_start@@Base+0x1d94>
   144ac:	ldrb	r3, [r4]
   144b0:	cmp	r3, #32
   144b4:	bhi	14484 <_start@@Base+0x1d4c>
   144b8:	bne	144cc <_start@@Base+0x1d94>
   144bc:	ldrb	r3, [r4, #1]
   144c0:	cmp	r3, #32
   144c4:	addhi	r4, r4, #1
   144c8:	bhi	14484 <_start@@Base+0x1d4c>
   144cc:	mov	r1, r4
   144d0:	mov	r2, r6
   144d4:	mov	r0, r9
   144d8:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   144dc:	mov	r4, r0
   144e0:	b	14484 <_start@@Base+0x1d4c>
   144e4:	mov	r3, #8
   144e8:	mov	r2, r6
   144ec:	mov	r1, r4
   144f0:	mov	r0, r9
   144f4:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   144f8:	b	1445c <_start@@Base+0x1d24>
   144fc:	mov	r4, r6
   14500:	b	14378 <_start@@Base+0x1c40>
   14504:	mov	r1, r4
   14508:	mov	r2, r6
   1450c:	mov	r0, r9
   14510:	mov	r3, #14
   14514:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   14518:	mov	r4, r0
   1451c:	b	14378 <_start@@Base+0x1c40>
   14520:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14524:	mov	ip, #0
   14528:	cmp	r1, r2
   1452c:	strd	r6, [sp, #8]
   14530:	mov	r4, r1
   14534:	mov	r6, r2
   14538:	strd	r8, [sp, #16]
   1453c:	mov	r9, r0
   14540:	strd	sl, [sp, #24]
   14544:	str	lr, [sp, #32]
   14548:	sub	sp, sp, #44	; 0x2c
   1454c:	str	r3, [sp, #16]
   14550:	ldr	r3, [sp, #80]	; 0x50
   14554:	str	ip, [r3]
   14558:	beq	146fc <_start@@Base+0x1fc4>
   1455c:	ldrb	r3, [r1]
   14560:	cmp	r3, #34	; 0x22
   14564:	addeq	r4, r1, #1
   14568:	streq	ip, [r0, #12]
   1456c:	beq	1470c <_start@@Base+0x1fd4>
   14570:	cmp	r3, #46	; 0x2e
   14574:	movne	r3, #1
   14578:	strne	r3, [r0, #12]
   1457c:	beq	146d8 <_start@@Base+0x1fa0>
   14580:	mov	r3, #0
   14584:	add	fp, sp, #24
   14588:	add	sl, sp, #28
   1458c:	str	r3, [sp, #8]
   14590:	str	r3, [sp, #12]
   14594:	add	r3, sp, #32
   14598:	str	r3, [sp, #20]
   1459c:	ldr	r8, [sp, #16]
   145a0:	mov	r7, r4
   145a4:	mov	r1, r4
   145a8:	ldr	r4, [sp, #20]
   145ac:	ldr	r5, [r8]
   145b0:	b	145cc <_start@@Base+0x1e94>
   145b4:	cmp	r7, r0
   145b8:	mov	r7, r0
   145bc:	bne	14610 <_start@@Base+0x1ed8>
   145c0:	ldr	r5, [r8, #4]!
   145c4:	cmp	r5, #0
   145c8:	beq	14684 <_start@@Base+0x1f4c>
   145cc:	mov	r3, fp
   145d0:	mov	r2, r6
   145d4:	stm	sp, {r4, sl}
   145d8:	mov	r0, r9
   145dc:	blx	r5
   145e0:	cmp	r6, r0
   145e4:	mov	r1, r0
   145e8:	bne	145b4 <_start@@Base+0x1e7c>
   145ec:	mov	r4, r0
   145f0:	mov	r0, r4
   145f4:	add	sp, sp, #44	; 0x2c
   145f8:	ldrd	r4, [sp]
   145fc:	ldrd	r6, [sp, #8]
   14600:	ldrd	r8, [sp, #16]
   14604:	ldrd	sl, [sp, #24]
   14608:	add	sp, sp, #32
   1460c:	pop	{pc}		; (ldr pc, [sp], #4)
   14610:	ldr	r3, [sp, #8]
   14614:	mov	r4, r0
   14618:	cmp	r3, #0
   1461c:	beq	1462c <_start@@Base+0x1ef4>
   14620:	ldr	r3, [r9, #12]
   14624:	cmp	r3, #0
   14628:	bne	14768 <_start@@Base+0x2030>
   1462c:	ldr	r1, [sp, #24]
   14630:	ldrd	r2, [sp, #32]
   14634:	cmp	r1, #0
   14638:	beq	1469c <_start@@Base+0x1f64>
   1463c:	cmp	r3, #0
   14640:	cmpeq	r2, #-2147483648	; 0x80000000
   14644:	rsbls	r3, r2, #0
   14648:	strls	r3, [sp, #12]
   1464c:	bhi	14750 <_start@@Base+0x2018>
   14650:	ldr	r2, [sp, #8]
   14654:	ldr	r1, [sp, #12]
   14658:	ldr	r3, [sp, #80]	; 0x50
   1465c:	add	r2, r2, #1
   14660:	str	r2, [sp, #8]
   14664:	ldr	r2, [sp, #28]
   14668:	ldr	r3, [r3]
   1466c:	cmp	r2, #0
   14670:	ldr	r2, [sp, #80]	; 0x50
   14674:	add	r3, r3, r1
   14678:	str	r3, [r2]
   1467c:	bne	1459c <_start@@Base+0x1e64>
   14680:	b	145f0 <_start@@Base+0x1eb8>
   14684:	mov	r2, r6
   14688:	mov	r0, r9
   1468c:	mov	r3, #23
   14690:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   14694:	mov	r4, r0
   14698:	b	145f0 <_start@@Base+0x1eb8>
   1469c:	mov	r1, #0
   146a0:	mvn	r0, #-2147483648	; 0x80000000
   146a4:	cmp	r3, r1
   146a8:	cmpeq	r2, r0
   146ac:	strls	r2, [sp, #12]
   146b0:	bls	14650 <_start@@Base+0x1f18>
   146b4:	mov	r3, #7
   146b8:	mov	r2, r6
   146bc:	mov	r1, r4
   146c0:	mov	r0, r9
   146c4:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   146c8:	cmp	r6, r0
   146cc:	bne	14650 <_start@@Base+0x1f18>
   146d0:	mov	r4, r6
   146d4:	b	145f0 <_start@@Base+0x1eb8>
   146d8:	mov	r3, #5
   146dc:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   146e0:	ldr	r3, [r9, #12]
   146e4:	mov	r4, r0
   146e8:	cmp	r3, #0
   146ec:	beq	1470c <_start@@Base+0x1fd4>
   146f0:	cmp	r6, r4
   146f4:	bne	14580 <_start@@Base+0x1e48>
   146f8:	b	145f0 <_start@@Base+0x1eb8>
   146fc:	ldr	r3, [r0, #12]
   14700:	cmp	r3, #0
   14704:	bne	145f0 <_start@@Base+0x1eb8>
   14708:	mov	r4, r6
   1470c:	sub	r3, r6, r4
   14710:	cmp	r3, #1
   14714:	ble	14738 <_start@@Base+0x2000>
   14718:	ldrb	r3, [r4]
   1471c:	cmp	r3, #32
   14720:	bhi	146f0 <_start@@Base+0x1fb8>
   14724:	bne	14738 <_start@@Base+0x2000>
   14728:	ldrb	r3, [r4, #1]
   1472c:	cmp	r3, #32
   14730:	addhi	r4, r4, #1
   14734:	bhi	146f0 <_start@@Base+0x1fb8>
   14738:	mov	r1, r4
   1473c:	mov	r2, r6
   14740:	mov	r0, r9
   14744:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   14748:	mov	r4, r0
   1474c:	b	146f0 <_start@@Base+0x1fb8>
   14750:	mov	r3, #8
   14754:	mov	r2, r6
   14758:	mov	r1, r4
   1475c:	mov	r0, r9
   14760:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   14764:	b	146c8 <_start@@Base+0x1f90>
   14768:	mov	r1, r4
   1476c:	mov	r2, r6
   14770:	mov	r0, r9
   14774:	mov	r3, #14
   14778:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1477c:	mov	r4, r0
   14780:	b	145f0 <_start@@Base+0x1eb8>
   14784:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14788:	mov	ip, #0
   1478c:	cmp	r1, r2
   14790:	strd	r6, [sp, #8]
   14794:	mov	r4, r1
   14798:	mov	r6, r2
   1479c:	strd	r8, [sp, #16]
   147a0:	mov	r9, r0
   147a4:	strd	sl, [sp, #24]
   147a8:	str	lr, [sp, #32]
   147ac:	sub	sp, sp, #44	; 0x2c
   147b0:	str	r3, [sp, #12]
   147b4:	ldr	r3, [sp, #80]	; 0x50
   147b8:	strb	ip, [r3]
   147bc:	beq	14964 <_start@@Base+0x222c>
   147c0:	ldrb	r3, [r1]
   147c4:	cmp	r3, #34	; 0x22
   147c8:	addeq	r4, r1, #1
   147cc:	streq	ip, [r0, #12]
   147d0:	beq	14974 <_start@@Base+0x223c>
   147d4:	cmp	r3, #46	; 0x2e
   147d8:	movne	r3, #1
   147dc:	strne	r3, [r0, #12]
   147e0:	beq	14940 <_start@@Base+0x2208>
   147e4:	mov	r3, #0
   147e8:	add	fp, sp, #24
   147ec:	add	sl, sp, #28
   147f0:	str	r3, [sp, #8]
   147f4:	str	r3, [sp, #20]
   147f8:	add	r3, sp, #32
   147fc:	str	r3, [sp, #16]
   14800:	ldr	r8, [sp, #12]
   14804:	mov	r7, r4
   14808:	mov	r1, r4
   1480c:	ldr	r4, [sp, #16]
   14810:	ldr	r5, [r8]
   14814:	b	14830 <_start@@Base+0x20f8>
   14818:	cmp	r7, r0
   1481c:	mov	r7, r0
   14820:	bne	14874 <_start@@Base+0x213c>
   14824:	ldr	r5, [r8, #4]!
   14828:	cmp	r5, #0
   1482c:	beq	148ec <_start@@Base+0x21b4>
   14830:	mov	r3, fp
   14834:	mov	r2, r6
   14838:	stm	sp, {r4, sl}
   1483c:	mov	r0, r9
   14840:	blx	r5
   14844:	cmp	r6, r0
   14848:	mov	r1, r0
   1484c:	bne	14818 <_start@@Base+0x20e0>
   14850:	mov	r4, r0
   14854:	mov	r0, r4
   14858:	add	sp, sp, #44	; 0x2c
   1485c:	ldrd	r4, [sp]
   14860:	ldrd	r6, [sp, #8]
   14864:	ldrd	r8, [sp, #16]
   14868:	ldrd	sl, [sp, #24]
   1486c:	add	sp, sp, #32
   14870:	pop	{pc}		; (ldr pc, [sp], #4)
   14874:	ldr	r3, [sp, #8]
   14878:	mov	r4, r0
   1487c:	cmp	r3, #0
   14880:	beq	14890 <_start@@Base+0x2158>
   14884:	ldr	r3, [r9, #12]
   14888:	cmp	r3, #0
   1488c:	bne	149d8 <_start@@Base+0x22a0>
   14890:	ldr	r1, [sp, #24]
   14894:	ldrd	r2, [sp, #32]
   14898:	cmp	r1, #0
   1489c:	beq	14904 <_start@@Base+0x21cc>
   148a0:	cmp	r3, #0
   148a4:	cmpeq	r2, #128	; 0x80
   148a8:	bhi	149b8 <_start@@Base+0x2280>
   148ac:	rsb	r2, r2, #0
   148b0:	uxtb	r2, r2
   148b4:	sxtb	r3, r2
   148b8:	str	r3, [sp, #20]
   148bc:	ldr	r3, [sp, #80]	; 0x50
   148c0:	ldrb	r1, [r3]
   148c4:	ldr	r3, [sp, #8]
   148c8:	add	r2, r2, r1
   148cc:	add	r3, r3, #1
   148d0:	str	r3, [sp, #8]
   148d4:	ldr	r3, [sp, #28]
   148d8:	cmp	r3, #0
   148dc:	ldr	r3, [sp, #80]	; 0x50
   148e0:	strb	r2, [r3]
   148e4:	bne	14800 <_start@@Base+0x20c8>
   148e8:	b	14854 <_start@@Base+0x211c>
   148ec:	mov	r2, r6
   148f0:	mov	r0, r9
   148f4:	mov	r3, #23
   148f8:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   148fc:	mov	r4, r0
   14900:	b	14854 <_start@@Base+0x211c>
   14904:	cmp	r3, #0
   14908:	cmpeq	r2, #127	; 0x7f
   1490c:	sxtbls	r1, r2
   14910:	uxtbls	r2, r2
   14914:	strls	r1, [sp, #20]
   14918:	bls	148bc <_start@@Base+0x2184>
   1491c:	mov	r3, #7
   14920:	mov	r2, r6
   14924:	mov	r1, r4
   14928:	mov	r0, r9
   1492c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   14930:	cmp	r6, r0
   14934:	beq	149d0 <_start@@Base+0x2298>
   14938:	ldrb	r2, [sp, #20]
   1493c:	b	148bc <_start@@Base+0x2184>
   14940:	mov	r3, #5
   14944:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   14948:	ldr	r3, [r9, #12]
   1494c:	mov	r4, r0
   14950:	cmp	r3, #0
   14954:	beq	14974 <_start@@Base+0x223c>
   14958:	cmp	r6, r4
   1495c:	bne	147e4 <_start@@Base+0x20ac>
   14960:	b	14854 <_start@@Base+0x211c>
   14964:	ldr	r3, [r0, #12]
   14968:	cmp	r3, #0
   1496c:	bne	14854 <_start@@Base+0x211c>
   14970:	mov	r4, r6
   14974:	sub	r3, r6, r4
   14978:	cmp	r3, #1
   1497c:	ble	149a0 <_start@@Base+0x2268>
   14980:	ldrb	r3, [r4]
   14984:	cmp	r3, #32
   14988:	bhi	14958 <_start@@Base+0x2220>
   1498c:	bne	149a0 <_start@@Base+0x2268>
   14990:	ldrb	r3, [r4, #1]
   14994:	cmp	r3, #32
   14998:	addhi	r4, r4, #1
   1499c:	bhi	14958 <_start@@Base+0x2220>
   149a0:	mov	r1, r4
   149a4:	mov	r2, r6
   149a8:	mov	r0, r9
   149ac:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   149b0:	mov	r4, r0
   149b4:	b	14958 <_start@@Base+0x2220>
   149b8:	mov	r3, #8
   149bc:	mov	r2, r6
   149c0:	mov	r1, r4
   149c4:	mov	r0, r9
   149c8:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   149cc:	b	14930 <_start@@Base+0x21f8>
   149d0:	mov	r4, r6
   149d4:	b	14854 <_start@@Base+0x211c>
   149d8:	mov	r1, r4
   149dc:	mov	r2, r6
   149e0:	mov	r0, r9
   149e4:	mov	r3, #14
   149e8:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   149ec:	mov	r4, r0
   149f0:	b	14854 <_start@@Base+0x211c>
   149f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   149f8:	mov	ip, #0
   149fc:	cmp	r1, r2
   14a00:	strd	r6, [sp, #8]
   14a04:	mov	r4, r1
   14a08:	mov	r6, r2
   14a0c:	strd	r8, [sp, #16]
   14a10:	mov	r9, r0
   14a14:	strd	sl, [sp, #24]
   14a18:	str	lr, [sp, #32]
   14a1c:	sub	sp, sp, #44	; 0x2c
   14a20:	str	r3, [sp, #12]
   14a24:	ldr	r3, [sp, #80]	; 0x50
   14a28:	strh	ip, [r3]
   14a2c:	beq	14b9c <_start@@Base+0x2464>
   14a30:	ldrb	r3, [r1]
   14a34:	cmp	r3, #34	; 0x22
   14a38:	addeq	r4, r1, #1
   14a3c:	streq	ip, [r0, #12]
   14a40:	beq	14bac <_start@@Base+0x2474>
   14a44:	cmp	r3, #46	; 0x2e
   14a48:	movne	r3, #1
   14a4c:	strne	r3, [r0, #12]
   14a50:	beq	14b78 <_start@@Base+0x2440>
   14a54:	mov	r3, #0
   14a58:	add	fp, sp, #24
   14a5c:	add	sl, sp, #28
   14a60:	str	r3, [sp, #8]
   14a64:	str	r3, [sp, #16]
   14a68:	add	r3, sp, #32
   14a6c:	str	r3, [sp, #20]
   14a70:	ldr	r8, [sp, #12]
   14a74:	mov	r7, r4
   14a78:	mov	r1, r4
   14a7c:	ldr	r4, [sp, #20]
   14a80:	ldr	r5, [r8]
   14a84:	b	14aa0 <_start@@Base+0x2368>
   14a88:	cmp	r7, r0
   14a8c:	mov	r7, r0
   14a90:	bne	14ae4 <_start@@Base+0x23ac>
   14a94:	ldr	r5, [r8, #4]!
   14a98:	cmp	r5, #0
   14a9c:	beq	14b60 <_start@@Base+0x2428>
   14aa0:	mov	r3, fp
   14aa4:	mov	r2, r6
   14aa8:	stm	sp, {r4, sl}
   14aac:	mov	r0, r9
   14ab0:	blx	r5
   14ab4:	cmp	r6, r0
   14ab8:	mov	r1, r0
   14abc:	bne	14a88 <_start@@Base+0x2350>
   14ac0:	mov	r4, r0
   14ac4:	mov	r0, r4
   14ac8:	add	sp, sp, #44	; 0x2c
   14acc:	ldrd	r4, [sp]
   14ad0:	ldrd	r6, [sp, #8]
   14ad4:	ldrd	r8, [sp, #16]
   14ad8:	ldrd	sl, [sp, #24]
   14adc:	add	sp, sp, #32
   14ae0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ae4:	ldr	r3, [sp, #8]
   14ae8:	mov	r4, r0
   14aec:	cmp	r3, #0
   14af0:	beq	14b00 <_start@@Base+0x23c8>
   14af4:	ldr	r3, [r9, #12]
   14af8:	cmp	r3, #0
   14afc:	bne	14c2c <_start@@Base+0x24f4>
   14b00:	ldr	r3, [sp, #24]
   14b04:	cmp	r3, #0
   14b08:	bne	14bf0 <_start@@Base+0x24b8>
   14b0c:	ldrd	r2, [sp, #32]
   14b10:	mov	r1, #0
   14b14:	movw	r0, #65535	; 0xffff
   14b18:	cmp	r3, r1
   14b1c:	cmpeq	r2, r0
   14b20:	uxthls	r3, r2
   14b24:	strls	r3, [sp, #16]
   14b28:	bhi	14c14 <_start@@Base+0x24dc>
   14b2c:	ldr	r2, [sp, #8]
   14b30:	ldr	r1, [sp, #16]
   14b34:	ldr	r3, [sp, #80]	; 0x50
   14b38:	add	r2, r2, #1
   14b3c:	str	r2, [sp, #8]
   14b40:	ldr	r2, [sp, #28]
   14b44:	ldrh	r3, [r3]
   14b48:	cmp	r2, #0
   14b4c:	ldr	r2, [sp, #80]	; 0x50
   14b50:	add	r3, r1, r3
   14b54:	strh	r3, [r2]
   14b58:	bne	14a70 <_start@@Base+0x2338>
   14b5c:	b	14ac4 <_start@@Base+0x238c>
   14b60:	mov	r2, r6
   14b64:	mov	r0, r9
   14b68:	mov	r3, #23
   14b6c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   14b70:	mov	r4, r0
   14b74:	b	14ac4 <_start@@Base+0x238c>
   14b78:	mov	r3, #5
   14b7c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   14b80:	ldr	r3, [r9, #12]
   14b84:	mov	r4, r0
   14b88:	cmp	r3, #0
   14b8c:	beq	14bac <_start@@Base+0x2474>
   14b90:	cmp	r6, r4
   14b94:	bne	14a54 <_start@@Base+0x231c>
   14b98:	b	14ac4 <_start@@Base+0x238c>
   14b9c:	ldr	r3, [r0, #12]
   14ba0:	cmp	r3, #0
   14ba4:	bne	14ac4 <_start@@Base+0x238c>
   14ba8:	mov	r4, r6
   14bac:	sub	r3, r6, r4
   14bb0:	cmp	r3, #1
   14bb4:	ble	14bd8 <_start@@Base+0x24a0>
   14bb8:	ldrb	r3, [r4]
   14bbc:	cmp	r3, #32
   14bc0:	bhi	14b90 <_start@@Base+0x2458>
   14bc4:	bne	14bd8 <_start@@Base+0x24a0>
   14bc8:	ldrb	r3, [r4, #1]
   14bcc:	cmp	r3, #32
   14bd0:	addhi	r4, r4, #1
   14bd4:	bhi	14b90 <_start@@Base+0x2458>
   14bd8:	mov	r1, r4
   14bdc:	mov	r2, r6
   14be0:	mov	r0, r9
   14be4:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   14be8:	mov	r4, r0
   14bec:	b	14b90 <_start@@Base+0x2458>
   14bf0:	mov	r3, #8
   14bf4:	mov	r2, r6
   14bf8:	mov	r1, r4
   14bfc:	mov	r0, r9
   14c00:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   14c04:	cmp	r6, r0
   14c08:	bne	14b2c <_start@@Base+0x23f4>
   14c0c:	mov	r4, r6
   14c10:	b	14ac4 <_start@@Base+0x238c>
   14c14:	mov	r3, #7
   14c18:	mov	r2, r6
   14c1c:	mov	r1, r4
   14c20:	mov	r0, r9
   14c24:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   14c28:	b	14c04 <_start@@Base+0x24cc>
   14c2c:	mov	r1, r4
   14c30:	mov	r2, r6
   14c34:	mov	r0, r9
   14c38:	mov	r3, #14
   14c3c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   14c40:	mov	r4, r0
   14c44:	b	14ac4 <_start@@Base+0x238c>
   14c48:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14c4c:	mov	ip, #0
   14c50:	cmp	r1, r2
   14c54:	strd	r6, [sp, #8]
   14c58:	mov	r4, r1
   14c5c:	mov	r6, r2
   14c60:	strd	r8, [sp, #16]
   14c64:	mov	r9, r0
   14c68:	strd	sl, [sp, #24]
   14c6c:	str	lr, [sp, #32]
   14c70:	sub	sp, sp, #44	; 0x2c
   14c74:	str	r3, [sp, #12]
   14c78:	ldr	r3, [sp, #80]	; 0x50
   14c7c:	str	ip, [r3]
   14c80:	beq	14dec <_start@@Base+0x26b4>
   14c84:	ldrb	r3, [r1]
   14c88:	cmp	r3, #34	; 0x22
   14c8c:	addeq	r4, r1, #1
   14c90:	streq	ip, [r0, #12]
   14c94:	beq	14dfc <_start@@Base+0x26c4>
   14c98:	cmp	r3, #46	; 0x2e
   14c9c:	movne	r3, #1
   14ca0:	strne	r3, [r0, #12]
   14ca4:	beq	14dc8 <_start@@Base+0x2690>
   14ca8:	mov	r3, #0
   14cac:	add	fp, sp, #24
   14cb0:	add	sl, sp, #28
   14cb4:	str	r3, [sp, #8]
   14cb8:	str	r3, [sp, #16]
   14cbc:	add	r3, sp, #32
   14cc0:	str	r3, [sp, #20]
   14cc4:	ldr	r8, [sp, #12]
   14cc8:	mov	r7, r4
   14ccc:	mov	r1, r4
   14cd0:	ldr	r4, [sp, #20]
   14cd4:	ldr	r5, [r8]
   14cd8:	b	14cf4 <_start@@Base+0x25bc>
   14cdc:	cmp	r7, r0
   14ce0:	mov	r7, r0
   14ce4:	bne	14d38 <_start@@Base+0x2600>
   14ce8:	ldr	r5, [r8, #4]!
   14cec:	cmp	r5, #0
   14cf0:	beq	14db0 <_start@@Base+0x2678>
   14cf4:	mov	r3, fp
   14cf8:	mov	r2, r6
   14cfc:	stm	sp, {r4, sl}
   14d00:	mov	r0, r9
   14d04:	blx	r5
   14d08:	cmp	r6, r0
   14d0c:	mov	r1, r0
   14d10:	bne	14cdc <_start@@Base+0x25a4>
   14d14:	mov	r4, r0
   14d18:	mov	r0, r4
   14d1c:	add	sp, sp, #44	; 0x2c
   14d20:	ldrd	r4, [sp]
   14d24:	ldrd	r6, [sp, #8]
   14d28:	ldrd	r8, [sp, #16]
   14d2c:	ldrd	sl, [sp, #24]
   14d30:	add	sp, sp, #32
   14d34:	pop	{pc}		; (ldr pc, [sp], #4)
   14d38:	ldr	r3, [sp, #8]
   14d3c:	mov	r4, r0
   14d40:	cmp	r3, #0
   14d44:	beq	14d54 <_start@@Base+0x261c>
   14d48:	ldr	r3, [r9, #12]
   14d4c:	cmp	r3, #0
   14d50:	bne	14e7c <_start@@Base+0x2744>
   14d54:	ldr	r3, [sp, #24]
   14d58:	cmp	r3, #0
   14d5c:	bne	14e40 <_start@@Base+0x2708>
   14d60:	ldrd	r2, [sp, #32]
   14d64:	mov	r1, #0
   14d68:	mvn	r0, #0
   14d6c:	cmp	r3, r1
   14d70:	cmpeq	r2, r0
   14d74:	strls	r2, [sp, #16]
   14d78:	bhi	14e64 <_start@@Base+0x272c>
   14d7c:	ldr	r2, [sp, #8]
   14d80:	ldr	r1, [sp, #16]
   14d84:	ldr	r3, [sp, #80]	; 0x50
   14d88:	add	r2, r2, #1
   14d8c:	str	r2, [sp, #8]
   14d90:	ldr	r2, [sp, #28]
   14d94:	ldr	r3, [r3]
   14d98:	cmp	r2, #0
   14d9c:	ldr	r2, [sp, #80]	; 0x50
   14da0:	add	r3, r3, r1
   14da4:	str	r3, [r2]
   14da8:	bne	14cc4 <_start@@Base+0x258c>
   14dac:	b	14d18 <_start@@Base+0x25e0>
   14db0:	mov	r2, r6
   14db4:	mov	r0, r9
   14db8:	mov	r3, #23
   14dbc:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   14dc0:	mov	r4, r0
   14dc4:	b	14d18 <_start@@Base+0x25e0>
   14dc8:	mov	r3, #5
   14dcc:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   14dd0:	ldr	r3, [r9, #12]
   14dd4:	mov	r4, r0
   14dd8:	cmp	r3, #0
   14ddc:	beq	14dfc <_start@@Base+0x26c4>
   14de0:	cmp	r6, r4
   14de4:	bne	14ca8 <_start@@Base+0x2570>
   14de8:	b	14d18 <_start@@Base+0x25e0>
   14dec:	ldr	r3, [r0, #12]
   14df0:	cmp	r3, #0
   14df4:	bne	14d18 <_start@@Base+0x25e0>
   14df8:	mov	r4, r6
   14dfc:	sub	r3, r6, r4
   14e00:	cmp	r3, #1
   14e04:	ble	14e28 <_start@@Base+0x26f0>
   14e08:	ldrb	r3, [r4]
   14e0c:	cmp	r3, #32
   14e10:	bhi	14de0 <_start@@Base+0x26a8>
   14e14:	bne	14e28 <_start@@Base+0x26f0>
   14e18:	ldrb	r3, [r4, #1]
   14e1c:	cmp	r3, #32
   14e20:	addhi	r4, r4, #1
   14e24:	bhi	14de0 <_start@@Base+0x26a8>
   14e28:	mov	r1, r4
   14e2c:	mov	r2, r6
   14e30:	mov	r0, r9
   14e34:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   14e38:	mov	r4, r0
   14e3c:	b	14de0 <_start@@Base+0x26a8>
   14e40:	mov	r3, #8
   14e44:	mov	r2, r6
   14e48:	mov	r1, r4
   14e4c:	mov	r0, r9
   14e50:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   14e54:	cmp	r6, r0
   14e58:	bne	14d7c <_start@@Base+0x2644>
   14e5c:	mov	r4, r6
   14e60:	b	14d18 <_start@@Base+0x25e0>
   14e64:	mov	r3, #7
   14e68:	mov	r2, r6
   14e6c:	mov	r1, r4
   14e70:	mov	r0, r9
   14e74:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   14e78:	b	14e54 <_start@@Base+0x271c>
   14e7c:	mov	r1, r4
   14e80:	mov	r2, r6
   14e84:	mov	r0, r9
   14e88:	mov	r3, #14
   14e8c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   14e90:	mov	r4, r0
   14e94:	b	14d18 <_start@@Base+0x25e0>
   14e98:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14e9c:	cmp	r1, r2
   14ea0:	mov	r4, r1
   14ea4:	strd	r6, [sp, #8]
   14ea8:	mov	r6, r2
   14eac:	strd	r8, [sp, #16]
   14eb0:	mov	r9, r0
   14eb4:	strd	sl, [sp, #24]
   14eb8:	mov	sl, #0
   14ebc:	mov	fp, #0
   14ec0:	str	lr, [sp, #32]
   14ec4:	sub	sp, sp, #52	; 0x34
   14ec8:	str	r3, [sp, #24]
   14ecc:	ldr	r3, [sp, #88]	; 0x58
   14ed0:	strd	sl, [r3]
   14ed4:	beq	1508c <_start@@Base+0x2954>
   14ed8:	ldrb	r3, [r1]
   14edc:	cmp	r3, #34	; 0x22
   14ee0:	moveq	r3, #0
   14ee4:	addeq	r4, r1, #1
   14ee8:	streq	r3, [r0, #12]
   14eec:	beq	1509c <_start@@Base+0x2964>
   14ef0:	cmp	r3, #46	; 0x2e
   14ef4:	movne	r3, #1
   14ef8:	strne	r3, [r0, #12]
   14efc:	beq	15068 <_start@@Base+0x2930>
   14f00:	mov	r3, #0
   14f04:	add	fp, sp, #32
   14f08:	add	sl, sp, #36	; 0x24
   14f0c:	str	r3, [sp, #12]
   14f10:	str	r3, [sp, #16]
   14f14:	str	r3, [sp, #20]
   14f18:	add	r3, sp, #40	; 0x28
   14f1c:	str	r3, [sp, #28]
   14f20:	ldr	r8, [sp, #24]
   14f24:	mov	r7, r4
   14f28:	mov	r1, r4
   14f2c:	ldr	r4, [sp, #28]
   14f30:	ldr	r5, [r8]
   14f34:	b	14f50 <_start@@Base+0x2818>
   14f38:	cmp	r7, r0
   14f3c:	mov	r7, r0
   14f40:	bne	14f94 <_start@@Base+0x285c>
   14f44:	ldr	r5, [r8, #4]!
   14f48:	cmp	r5, #0
   14f4c:	beq	15020 <_start@@Base+0x28e8>
   14f50:	mov	r3, fp
   14f54:	mov	r2, r6
   14f58:	stm	sp, {r4, sl}
   14f5c:	mov	r0, r9
   14f60:	blx	r5
   14f64:	cmp	r6, r0
   14f68:	mov	r1, r0
   14f6c:	bne	14f38 <_start@@Base+0x2800>
   14f70:	mov	r4, r0
   14f74:	mov	r0, r4
   14f78:	add	sp, sp, #52	; 0x34
   14f7c:	ldrd	r4, [sp]
   14f80:	ldrd	r6, [sp, #8]
   14f84:	ldrd	r8, [sp, #16]
   14f88:	ldrd	sl, [sp, #24]
   14f8c:	add	sp, sp, #32
   14f90:	pop	{pc}		; (ldr pc, [sp], #4)
   14f94:	ldr	r3, [sp, #12]
   14f98:	mov	r4, r0
   14f9c:	cmp	r3, #0
   14fa0:	beq	14fb0 <_start@@Base+0x2878>
   14fa4:	ldr	r3, [r9, #12]
   14fa8:	cmp	r3, #0
   14fac:	bne	150f8 <_start@@Base+0x29c0>
   14fb0:	ldr	r1, [sp, #32]
   14fb4:	ldrd	r2, [sp, #40]	; 0x28
   14fb8:	cmp	r1, #0
   14fbc:	beq	15038 <_start@@Base+0x2900>
   14fc0:	cmp	r3, #-2147483648	; 0x80000000
   14fc4:	cmpeq	r2, #0
   14fc8:	bhi	150e0 <_start@@Base+0x29a8>
   14fcc:	rsbs	r2, r2, #0
   14fd0:	rsc	r3, r3, #0
   14fd4:	strd	r2, [sp, #16]
   14fd8:	ldr	r2, [sp, #12]
   14fdc:	ldr	r0, [sp, #16]
   14fe0:	ldr	r3, [sp, #88]	; 0x58
   14fe4:	add	r2, r2, #1
   14fe8:	ldr	r1, [sp, #36]	; 0x24
   14fec:	str	r2, [sp, #12]
   14ff0:	ldr	r2, [sp, #88]	; 0x58
   14ff4:	ldr	r3, [r3]
   14ff8:	ldr	r2, [r2, #4]
   14ffc:	adds	r3, r3, r0
   15000:	ldr	r0, [sp, #20]
   15004:	adc	r2, r2, r0
   15008:	ldr	r0, [sp, #88]	; 0x58
   1500c:	cmp	r1, #0
   15010:	str	r3, [r0]
   15014:	str	r2, [r0, #4]
   15018:	bne	14f20 <_start@@Base+0x27e8>
   1501c:	b	14f74 <_start@@Base+0x283c>
   15020:	mov	r2, r6
   15024:	mov	r0, r9
   15028:	mov	r3, #23
   1502c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   15030:	mov	r4, r0
   15034:	b	14f74 <_start@@Base+0x283c>
   15038:	cmp	r2, #0
   1503c:	sbcs	r1, r3, #0
   15040:	bge	14fd4 <_start@@Base+0x289c>
   15044:	mov	r3, #7
   15048:	mov	r2, r6
   1504c:	mov	r1, r4
   15050:	mov	r0, r9
   15054:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   15058:	cmp	r6, r0
   1505c:	bne	14fd8 <_start@@Base+0x28a0>
   15060:	mov	r4, r6
   15064:	b	14f74 <_start@@Base+0x283c>
   15068:	mov	r3, #5
   1506c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   15070:	ldr	r3, [r9, #12]
   15074:	mov	r4, r0
   15078:	cmp	r3, #0
   1507c:	beq	1509c <_start@@Base+0x2964>
   15080:	cmp	r6, r4
   15084:	bne	14f00 <_start@@Base+0x27c8>
   15088:	b	14f74 <_start@@Base+0x283c>
   1508c:	ldr	r3, [r0, #12]
   15090:	cmp	r3, #0
   15094:	bne	14f74 <_start@@Base+0x283c>
   15098:	mov	r4, r6
   1509c:	sub	r3, r6, r4
   150a0:	cmp	r3, #1
   150a4:	ble	150c8 <_start@@Base+0x2990>
   150a8:	ldrb	r3, [r4]
   150ac:	cmp	r3, #32
   150b0:	bhi	15080 <_start@@Base+0x2948>
   150b4:	bne	150c8 <_start@@Base+0x2990>
   150b8:	ldrb	r3, [r4, #1]
   150bc:	cmp	r3, #32
   150c0:	addhi	r4, r4, #1
   150c4:	bhi	15080 <_start@@Base+0x2948>
   150c8:	mov	r1, r4
   150cc:	mov	r2, r6
   150d0:	mov	r0, r9
   150d4:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   150d8:	mov	r4, r0
   150dc:	b	15080 <_start@@Base+0x2948>
   150e0:	mov	r3, #8
   150e4:	mov	r2, r6
   150e8:	mov	r1, r4
   150ec:	mov	r0, r9
   150f0:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   150f4:	b	15058 <_start@@Base+0x2920>
   150f8:	mov	r1, r4
   150fc:	mov	r2, r6
   15100:	mov	r0, r9
   15104:	mov	r3, #14
   15108:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1510c:	mov	r4, r0
   15110:	b	14f74 <_start@@Base+0x283c>
   15114:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15118:	mov	r5, r0
   1511c:	mov	r4, r2
   15120:	ldr	r0, [r0]
   15124:	mov	r2, #4
   15128:	strd	r6, [sp, #8]
   1512c:	mov	r7, r3
   15130:	mov	r3, #0
   15134:	mov	r6, r1
   15138:	mov	r1, r2
   1513c:	strd	r8, [sp, #16]
   15140:	strd	sl, [sp, #24]
   15144:	str	lr, [sp, #32]
   15148:	sub	sp, sp, #52	; 0x34
   1514c:	str	r3, [r7]
   15150:	bl	22464 <flatcc_builder_start_struct@@Base>
   15154:	subs	r3, r0, #0
   15158:	str	r3, [sp, #24]
   1515c:	beq	151ac <_start@@Base+0x2a74>
   15160:	cmp	r6, r4
   15164:	beq	15174 <_start@@Base+0x2a3c>
   15168:	ldrb	r3, [r6]
   1516c:	cmp	r3, #123	; 0x7b
   15170:	beq	151e4 <_start@@Base+0x2aac>
   15174:	mov	r1, r6
   15178:	mov	r3, #21
   1517c:	mov	r2, r4
   15180:	mov	r0, r5
   15184:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   15188:	mov	r8, r0
   1518c:	cmp	r4, r8
   15190:	beq	15824 <_start@@Base+0x30ec>
   15194:	ldr	r0, [r5]
   15198:	bl	22528 <flatcc_builder_end_struct@@Base>
   1519c:	cmp	r0, #0
   151a0:	str	r0, [r7]
   151a4:	moveq	r6, r8
   151a8:	bne	151c4 <_start@@Base+0x2a8c>
   151ac:	mov	r2, r4
   151b0:	mov	r1, r6
   151b4:	mov	r0, r5
   151b8:	mov	r3, #33	; 0x21
   151bc:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   151c0:	mov	r8, r0
   151c4:	mov	r0, r8
   151c8:	add	sp, sp, #52	; 0x34
   151cc:	ldrd	r4, [sp]
   151d0:	ldrd	r6, [sp, #8]
   151d4:	ldrd	r8, [sp, #16]
   151d8:	ldrd	sl, [sp, #24]
   151dc:	add	sp, sp, #32
   151e0:	pop	{pc}		; (ldr pc, [sp], #4)
   151e4:	add	r1, r6, #1
   151e8:	sub	r3, r4, r1
   151ec:	cmp	r3, #1
   151f0:	ble	15204 <_start@@Base+0x2acc>
   151f4:	ldrb	r3, [r6, #1]
   151f8:	cmp	r3, #32
   151fc:	bhi	15214 <_start@@Base+0x2adc>
   15200:	beq	157dc <_start@@Base+0x30a4>
   15204:	mov	r2, r4
   15208:	mov	r0, r5
   1520c:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   15210:	mov	r1, r0
   15214:	cmp	r4, r1
   15218:	beq	15228 <_start@@Base+0x2af0>
   1521c:	ldrb	r3, [r1]
   15220:	cmp	r3, #125	; 0x7d
   15224:	beq	1580c <_start@@Base+0x30d4>
   15228:	mov	r3, #0
   1522c:	movt	r3, #65535	; 0xffff
   15230:	str	r3, [sp, #28]
   15234:	cmp	r4, r1
   15238:	beq	15264 <_start@@Base+0x2b2c>
   1523c:	ldrb	r3, [r1]
   15240:	cmp	r3, #34	; 0x22
   15244:	moveq	r3, #0
   15248:	addeq	r1, r1, #1
   1524c:	streq	r3, [r5, #12]
   15250:	beq	15264 <_start@@Base+0x2b2c>
   15254:	cmp	r3, #46	; 0x2e
   15258:	movne	r3, #1
   1525c:	strne	r3, [r5, #12]
   15260:	beq	1568c <_start@@Base+0x2f54>
   15264:	sub	r3, r4, r1
   15268:	cmp	r3, #8
   1526c:	bhi	152a0 <_start@@Base+0x2b68>
   15270:	sub	r3, r3, #1
   15274:	cmp	r3, #7
   15278:	addls	pc, pc, r3, lsl #2
   1527c:	b	15668 <_start@@Base+0x2f30>
   15280:	b	15568 <_start@@Base+0x2e30>
   15284:	b	1555c <_start@@Base+0x2e24>
   15288:	b	15550 <_start@@Base+0x2e18>
   1528c:	b	15544 <_start@@Base+0x2e0c>
   15290:	b	15538 <_start@@Base+0x2e00>
   15294:	b	1552c <_start@@Base+0x2df4>
   15298:	b	15520 <_start@@Base+0x2de8>
   1529c:	b	152a0 <_start@@Base+0x2b68>
   152a0:	ldrb	sl, [r1, #7]
   152a4:	mov	fp, #0
   152a8:	mov	r3, fp
   152ac:	ldrb	r8, [r1, #6]
   152b0:	orr	r2, sl, r8, lsl #8
   152b4:	ldrb	r8, [r1, #5]
   152b8:	orr	r2, r2, r8, lsl #16
   152bc:	ldrb	r8, [r1, #4]
   152c0:	orr	r2, r2, r8, lsl #24
   152c4:	ldrb	sl, [r1, #3]
   152c8:	orr	r3, r3, sl
   152cc:	ldrb	sl, [r1, #2]
   152d0:	orr	sl, r3, sl, lsl #8
   152d4:	ldrb	r8, [r1, #1]
   152d8:	orr	sl, sl, r8, lsl #16
   152dc:	str	r2, [sp, #8]
   152e0:	ldrb	r2, [r1]
   152e4:	add	r9, pc, #964	; 0x3c4
   152e8:	ldrd	r8, [r9]
   152ec:	orr	r3, sl, r2, lsl #24
   152f0:	str	r3, [sp, #12]
   152f4:	ldrd	r2, [sp, #8]
   152f8:	cmp	r3, r9
   152fc:	cmpeq	r2, r8
   15300:	bne	15668 <_start@@Base+0x2f30>
   15304:	add	r6, r1, #8
   15308:	sub	r3, r4, r6
   1530c:	cmp	r3, #8
   15310:	bhi	15340 <_start@@Base+0x2c08>
   15314:	sub	r2, r3, #2
   15318:	cmp	r2, #6
   1531c:	addls	pc, pc, r2, lsl #2
   15320:	b	1563c <_start@@Base+0x2f04>
   15324:	b	1557c <_start@@Base+0x2e44>
   15328:	b	15574 <_start@@Base+0x2e3c>
   1532c:	b	15584 <_start@@Base+0x2e4c>
   15330:	b	15518 <_start@@Base+0x2de0>
   15334:	b	15518 <_start@@Base+0x2de0>
   15338:	b	15340 <_start@@Base+0x2c08>
   1533c:	b	15340 <_start@@Base+0x2c08>
   15340:	mov	r9, #0
   15344:	mov	sl, r9
   15348:	mov	r8, sl
   1534c:	ldrb	sl, [r1, #11]
   15350:	orr	sl, r8, sl
   15354:	ldrb	r8, [r1, #10]
   15358:	orr	sl, sl, r8, lsl #8
   1535c:	ldrb	r8, [r1, #9]
   15360:	mov	r2, #0
   15364:	mov	fp, #0
   15368:	movt	fp, #24932	; 0x6164
   1536c:	str	r2, [sp, #16]
   15370:	ldr	r2, [sp, #28]
   15374:	orr	sl, sl, r8, lsl #16
   15378:	ldrb	r8, [r1, #8]
   1537c:	orr	r8, sl, r8, lsl #24
   15380:	mov	sl, #0
   15384:	and	r2, r8, r2
   15388:	str	r2, [sp, #20]
   1538c:	ldrd	r8, [sp, #16]
   15390:	cmp	r9, fp
   15394:	cmpeq	r8, sl
   15398:	bne	1563c <_start@@Base+0x2f04>
   1539c:	cmp	r3, #2
   153a0:	ble	1563c <_start@@Base+0x2f04>
   153a4:	ldr	r2, [r5, #12]
   153a8:	ldrb	r3, [r1, #10]
   153ac:	cmp	r2, #0
   153b0:	beq	1567c <_start@@Base+0x2f44>
   153b4:	cmp	r3, #58	; 0x3a
   153b8:	cmpne	r3, #32
   153bc:	movhi	r3, #1
   153c0:	movls	r3, #0
   153c4:	bhi	1563c <_start@@Base+0x2f04>
   153c8:	add	r1, r1, #10
   153cc:	str	r3, [r5, #12]
   153d0:	sub	r3, r4, r1
   153d4:	cmp	r3, #1
   153d8:	ble	153ec <_start@@Base+0x2cb4>
   153dc:	ldrb	r3, [r1]
   153e0:	cmp	r3, #32
   153e4:	bhi	153fc <_start@@Base+0x2cc4>
   153e8:	beq	1577c <_start@@Base+0x3044>
   153ec:	mov	r2, r4
   153f0:	mov	r0, r5
   153f4:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   153f8:	mov	r1, r0
   153fc:	cmp	r4, r1
   15400:	beq	15410 <_start@@Base+0x2cd8>
   15404:	ldrb	r3, [r1]
   15408:	cmp	r3, #58	; 0x3a
   1540c:	beq	15790 <_start@@Base+0x3058>
   15410:	mov	r3, #4
   15414:	mov	r2, r4
   15418:	mov	r0, r5
   1541c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   15420:	mov	r8, r0
   15424:	cmp	r6, r8
   15428:	beq	1563c <_start@@Base+0x2f04>
   1542c:	mov	r3, #0
   15430:	mov	r0, #0
   15434:	mov	r1, #0
   15438:	cmp	r4, r8
   1543c:	str	r3, [sp, #32]
   15440:	str	r3, [sp, #36]	; 0x24
   15444:	strd	r0, [sp, #40]	; 0x28
   15448:	beq	156a4 <_start@@Base+0x2f6c>
   1544c:	add	r0, sp, #40	; 0x28
   15450:	add	r3, sp, #36	; 0x24
   15454:	mov	r2, r4
   15458:	mov	r1, r8
   1545c:	str	r0, [sp]
   15460:	mov	r0, r5
   15464:	bl	28ea4 <flatcc_json_parser_integer@@Base>
   15468:	cmp	r8, r0
   1546c:	mov	r6, r0
   15470:	bne	156bc <_start@@Base+0x2f84>
   15474:	ldr	r3, [pc, #572]	; 156b8 <_start@@Base+0x2f80>
   15478:	add	ip, sp, #32
   1547c:	mov	r2, r4
   15480:	mov	r1, r6
   15484:	mov	r0, r5
   15488:	str	ip, [sp]
   1548c:	add	r3, pc, r3
   15490:	bl	14520 <_start@@Base+0x1de8>
   15494:	cmp	r4, r0
   15498:	cmpne	r0, r6
   1549c:	beq	157f0 <_start@@Base+0x30b8>
   154a0:	ldr	r2, [sp, #32]
   154a4:	mov	r6, r0
   154a8:	ldr	r3, [sp, #24]
   154ac:	str	r2, [r3]
   154b0:	sub	r3, r4, r6
   154b4:	cmp	r3, #1
   154b8:	ble	154cc <_start@@Base+0x2d94>
   154bc:	ldrb	r3, [r6]
   154c0:	cmp	r3, #32
   154c4:	bhi	154e0 <_start@@Base+0x2da8>
   154c8:	beq	15654 <_start@@Base+0x2f1c>
   154cc:	mov	r1, r6
   154d0:	mov	r2, r4
   154d4:	mov	r0, r5
   154d8:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   154dc:	mov	r6, r0
   154e0:	cmp	r4, r6
   154e4:	beq	151ac <_start@@Base+0x2a74>
   154e8:	ldrb	r3, [r6]
   154ec:	cmp	r3, #44	; 0x2c
   154f0:	beq	155c4 <_start@@Base+0x2e8c>
   154f4:	cmp	r3, #125	; 0x7d
   154f8:	beq	1558c <_start@@Base+0x2e54>
   154fc:	mov	r1, r6
   15500:	mov	r3, #10
   15504:	mov	r2, r4
   15508:	mov	r0, r5
   1550c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   15510:	mov	r8, r0
   15514:	b	1518c <_start@@Base+0x2a54>
   15518:	mov	sl, #0
   1551c:	b	15348 <_start@@Base+0x2c10>
   15520:	mov	sl, #0
   15524:	mov	fp, #0
   15528:	b	152a8 <_start@@Base+0x2b70>
   1552c:	mov	r2, #0
   15530:	mov	r3, r2
   15534:	b	152b4 <_start@@Base+0x2b7c>
   15538:	mov	r2, #0
   1553c:	mov	r3, r2
   15540:	b	152bc <_start@@Base+0x2b84>
   15544:	mov	r2, #0
   15548:	mov	r3, r2
   1554c:	b	152c4 <_start@@Base+0x2b8c>
   15550:	mov	r2, #0
   15554:	mov	r3, r2
   15558:	b	152cc <_start@@Base+0x2b94>
   1555c:	mov	r2, #0
   15560:	mov	sl, r2
   15564:	b	152d4 <_start@@Base+0x2b9c>
   15568:	mov	r2, #0
   1556c:	mov	sl, r2
   15570:	b	152dc <_start@@Base+0x2ba4>
   15574:	mov	sl, #0
   15578:	b	15354 <_start@@Base+0x2c1c>
   1557c:	mov	sl, #0
   15580:	b	1535c <_start@@Base+0x2c24>
   15584:	mov	r8, #0
   15588:	b	1534c <_start@@Base+0x2c14>
   1558c:	add	r8, r6, #1
   15590:	sub	r3, r4, r8
   15594:	cmp	r3, #1
   15598:	ble	155ac <_start@@Base+0x2e74>
   1559c:	ldrb	r3, [r6, #1]
   155a0:	cmp	r3, #32
   155a4:	bhi	1518c <_start@@Base+0x2a54>
   155a8:	beq	15704 <_start@@Base+0x2fcc>
   155ac:	mov	r1, r8
   155b0:	mov	r2, r4
   155b4:	mov	r0, r5
   155b8:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   155bc:	mov	r8, r0
   155c0:	b	1518c <_start@@Base+0x2a54>
   155c4:	add	r1, r6, #1
   155c8:	sub	r3, r4, r1
   155cc:	cmp	r3, #1
   155d0:	ble	155e4 <_start@@Base+0x2eac>
   155d4:	ldrb	r3, [r6, #1]
   155d8:	cmp	r3, #32
   155dc:	bhi	155f4 <_start@@Base+0x2ebc>
   155e0:	beq	15718 <_start@@Base+0x2fe0>
   155e4:	mov	r2, r4
   155e8:	mov	r0, r5
   155ec:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   155f0:	mov	r1, r0
   155f4:	cmp	r4, r1
   155f8:	beq	15730 <_start@@Base+0x2ff8>
   155fc:	ldrb	r3, [r1]
   15600:	cmp	r3, #125	; 0x7d
   15604:	bne	15234 <_start@@Base+0x2afc>
   15608:	add	r8, r1, #1
   1560c:	sub	r3, r4, r8
   15610:	cmp	r3, #1
   15614:	ble	155ac <_start@@Base+0x2e74>
   15618:	ldrb	r3, [r1, #1]
   1561c:	cmp	r3, #32
   15620:	bhi	1518c <_start@@Base+0x2a54>
   15624:	bne	155ac <_start@@Base+0x2e74>
   15628:	ldrb	r3, [r1, #2]
   1562c:	cmp	r3, #32
   15630:	addhi	r8, r1, #2
   15634:	bls	155ac <_start@@Base+0x2e74>
   15638:	b	1518c <_start@@Base+0x2a54>
   1563c:	mov	r1, r6
   15640:	mov	r2, r4
   15644:	mov	r0, r5
   15648:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1564c:	mov	r6, r0
   15650:	b	154b0 <_start@@Base+0x2d78>
   15654:	ldrb	r3, [r6, #1]
   15658:	cmp	r3, #32
   1565c:	addhi	r6, r6, #1
   15660:	bls	154cc <_start@@Base+0x2d94>
   15664:	b	154e0 <_start@@Base+0x2da8>
   15668:	mov	r2, r4
   1566c:	mov	r0, r5
   15670:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   15674:	mov	r6, r0
   15678:	b	154b0 <_start@@Base+0x2d78>
   1567c:	cmp	r3, #34	; 0x22
   15680:	bne	1563c <_start@@Base+0x2f04>
   15684:	add	r1, r1, #11
   15688:	b	153d0 <_start@@Base+0x2c98>
   1568c:	mov	r3, #5
   15690:	mov	r2, r4
   15694:	mov	r0, r5
   15698:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1569c:	mov	r1, r0
   156a0:	b	15264 <_start@@Base+0x2b2c>
   156a4:	mov	r6, r4
   156a8:	b	15474 <_start@@Base+0x2d3c>
   156ac:	nop	{0}
   156b0:	cmpvc	pc, #1342177286	; 0x50000006
   156b4:	rsbvs	r6, pc, #428	; 0x1ac
   156b8:	strdeq	r7, [r2], -ip
   156bc:	ldr	r1, [sp, #36]	; 0x24
   156c0:	ldrd	r2, [sp, #40]	; 0x28
   156c4:	cmp	r1, #0
   156c8:	beq	1574c <_start@@Base+0x3014>
   156cc:	cmp	r3, #0
   156d0:	cmpeq	r2, #-2147483648	; 0x80000000
   156d4:	rsbls	r2, r2, #0
   156d8:	bls	154a8 <_start@@Base+0x2d70>
   156dc:	mov	r1, r0
   156e0:	mov	r3, #8
   156e4:	mov	r2, r4
   156e8:	mov	r0, r5
   156ec:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   156f0:	mov	r6, r0
   156f4:	cmp	r8, r6
   156f8:	ldrne	r2, [sp, #32]
   156fc:	bne	154a8 <_start@@Base+0x2d70>
   15700:	b	15474 <_start@@Base+0x2d3c>
   15704:	ldrb	r3, [r6, #2]
   15708:	cmp	r3, #32
   1570c:	addhi	r8, r6, #2
   15710:	bls	155ac <_start@@Base+0x2e74>
   15714:	b	1518c <_start@@Base+0x2a54>
   15718:	ldrb	r3, [r6, #2]
   1571c:	cmp	r3, #32
   15720:	addhi	r1, r6, #2
   15724:	bls	155e4 <_start@@Base+0x2eac>
   15728:	cmp	r4, r1
   1572c:	bne	155fc <_start@@Base+0x2ec4>
   15730:	mov	r3, #10
   15734:	mov	r2, r4
   15738:	mov	r1, r4
   1573c:	mov	r0, r5
   15740:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   15744:	mov	r8, r0
   15748:	b	1518c <_start@@Base+0x2a54>
   1574c:	mov	r1, #0
   15750:	mvn	r0, #-2147483648	; 0x80000000
   15754:	cmp	r3, r1
   15758:	cmpeq	r2, r0
   1575c:	bls	154a8 <_start@@Base+0x2d70>
   15760:	mov	r1, r6
   15764:	mov	r3, #7
   15768:	mov	r2, r4
   1576c:	mov	r0, r5
   15770:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   15774:	mov	r6, r0
   15778:	b	156f4 <_start@@Base+0x2fbc>
   1577c:	ldrb	r3, [r1, #1]
   15780:	cmp	r3, #32
   15784:	addhi	r1, r1, #1
   15788:	bls	153ec <_start@@Base+0x2cb4>
   1578c:	b	153fc <_start@@Base+0x2cc4>
   15790:	add	r8, r1, #1
   15794:	sub	r3, r4, r8
   15798:	cmp	r3, #1
   1579c:	ble	157b0 <_start@@Base+0x3078>
   157a0:	ldrb	r3, [r1, #1]
   157a4:	cmp	r3, #32
   157a8:	bhi	15424 <_start@@Base+0x2cec>
   157ac:	beq	157c8 <_start@@Base+0x3090>
   157b0:	mov	r1, r8
   157b4:	mov	r2, r4
   157b8:	mov	r0, r5
   157bc:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   157c0:	mov	r8, r0
   157c4:	b	15424 <_start@@Base+0x2cec>
   157c8:	ldrb	r3, [r1, #2]
   157cc:	cmp	r3, #32
   157d0:	addhi	r8, r1, #2
   157d4:	bls	157b0 <_start@@Base+0x3078>
   157d8:	b	15424 <_start@@Base+0x2cec>
   157dc:	ldrb	r3, [r6, #2]
   157e0:	cmp	r3, #32
   157e4:	addhi	r1, r6, #2
   157e8:	bls	15204 <_start@@Base+0x2acc>
   157ec:	b	15214 <_start@@Base+0x2adc>
   157f0:	mov	r1, r0
   157f4:	mov	r3, #33	; 0x21
   157f8:	mov	r2, r4
   157fc:	mov	r0, r5
   15800:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   15804:	mov	r8, r0
   15808:	b	1518c <_start@@Base+0x2a54>
   1580c:	add	r1, r1, #1
   15810:	mov	r2, r4
   15814:	mov	r0, r5
   15818:	bl	13118 <_start@@Base+0x9e0>
   1581c:	mov	r8, r0
   15820:	b	1518c <_start@@Base+0x2a54>
   15824:	mov	r6, r4
   15828:	b	151ac <_start@@Base+0x2a74>
   1582c:	strd	r4, [sp, #-16]!
   15830:	mov	r4, r2
   15834:	sub	r2, r2, r1
   15838:	cmp	r2, #1
   1583c:	mov	r5, r0
   15840:	str	r6, [sp, #8]
   15844:	mov	r6, r3
   15848:	str	lr, [sp, #12]
   1584c:	ble	15860 <_start@@Base+0x3128>
   15850:	ldrb	r3, [r1]
   15854:	cmp	r3, #32
   15858:	bhi	15870 <_start@@Base+0x3138>
   1585c:	beq	15960 <_start@@Base+0x3228>
   15860:	mov	r2, r4
   15864:	mov	r0, r5
   15868:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   1586c:	mov	r1, r0
   15870:	cmp	r4, r1
   15874:	moveq	r3, #0
   15878:	moveq	r0, r4
   1587c:	streq	r3, [r6]
   15880:	beq	15950 <_start@@Base+0x3218>
   15884:	ldrb	r3, [r1]
   15888:	cmp	r3, #44	; 0x2c
   1588c:	beq	15904 <_start@@Base+0x31cc>
   15890:	mov	r3, #0
   15894:	str	r3, [r6]
   15898:	ldrb	r3, [r1]
   1589c:	cmp	r3, #125	; 0x7d
   158a0:	beq	158c4 <_start@@Base+0x318c>
   158a4:	mov	r2, r4
   158a8:	mov	r0, r5
   158ac:	mov	r3, #10
   158b0:	ldrd	r4, [sp]
   158b4:	ldr	r6, [sp, #8]
   158b8:	ldr	lr, [sp, #12]
   158bc:	add	sp, sp, #16
   158c0:	b	270b8 <flatcc_json_parser_set_error@@Base>
   158c4:	add	r0, r1, #1
   158c8:	sub	r3, r4, r0
   158cc:	cmp	r3, #1
   158d0:	ble	158e4 <_start@@Base+0x31ac>
   158d4:	ldrb	r3, [r1, #1]
   158d8:	cmp	r3, #32
   158dc:	bhi	15950 <_start@@Base+0x3218>
   158e0:	beq	159ac <_start@@Base+0x3274>
   158e4:	mov	r2, r4
   158e8:	mov	r1, r0
   158ec:	ldr	r6, [sp, #8]
   158f0:	mov	r0, r5
   158f4:	ldrd	r4, [sp]
   158f8:	ldr	lr, [sp, #12]
   158fc:	add	sp, sp, #16
   15900:	b	271ac <flatcc_json_parser_space_ext@@Base>
   15904:	add	r0, r1, #1
   15908:	sub	r3, r4, r0
   1590c:	cmp	r3, #1
   15910:	ble	15924 <_start@@Base+0x31ec>
   15914:	ldrb	r3, [r1, #1]
   15918:	cmp	r3, #32
   1591c:	bhi	15934 <_start@@Base+0x31fc>
   15920:	beq	159c0 <_start@@Base+0x3288>
   15924:	mov	r1, r0
   15928:	mov	r2, r4
   1592c:	mov	r0, r5
   15930:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   15934:	cmp	r4, r0
   15938:	beq	159d4 <_start@@Base+0x329c>
   1593c:	ldrb	r3, [r0]
   15940:	cmp	r3, #125	; 0x7d
   15944:	movne	r3, #1
   15948:	strne	r3, [r6]
   1594c:	beq	15984 <_start@@Base+0x324c>
   15950:	ldrd	r4, [sp]
   15954:	ldr	r6, [sp, #8]
   15958:	add	sp, sp, #12
   1595c:	pop	{pc}		; (ldr pc, [sp], #4)
   15960:	ldrb	r3, [r1, #1]
   15964:	cmp	r3, #32
   15968:	addhi	r1, r1, #1
   1596c:	bhi	15870 <_start@@Base+0x3138>
   15970:	mov	r2, r4
   15974:	mov	r0, r5
   15978:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   1597c:	mov	r1, r0
   15980:	b	15870 <_start@@Base+0x3138>
   15984:	mov	r3, #0
   15988:	mov	r2, r4
   1598c:	ldr	lr, [sp, #12]
   15990:	add	r1, r0, #1
   15994:	mov	r0, r5
   15998:	ldrd	r4, [sp]
   1599c:	str	r3, [r6]
   159a0:	ldr	r6, [sp, #8]
   159a4:	add	sp, sp, #16
   159a8:	b	13118 <_start@@Base+0x9e0>
   159ac:	ldrb	r3, [r1, #2]
   159b0:	cmp	r3, #32
   159b4:	addhi	r0, r1, #2
   159b8:	bls	158e4 <_start@@Base+0x31ac>
   159bc:	b	15950 <_start@@Base+0x3218>
   159c0:	ldrb	r3, [r1, #2]
   159c4:	cmp	r3, #32
   159c8:	addhi	r0, r1, #2
   159cc:	bls	15924 <_start@@Base+0x31ec>
   159d0:	b	15934 <_start@@Base+0x31fc>
   159d4:	mov	ip, #0
   159d8:	mov	r0, r5
   159dc:	mov	r3, #10
   159e0:	mov	r2, r4
   159e4:	mov	r1, r4
   159e8:	str	ip, [r6]
   159ec:	b	158b0 <_start@@Base+0x3178>
   159f0:	strd	r4, [sp, #-16]!
   159f4:	mov	r4, r2
   159f8:	sub	r2, r2, r1
   159fc:	cmp	r2, #1
   15a00:	mov	r5, r0
   15a04:	str	r6, [sp, #8]
   15a08:	mov	r6, r3
   15a0c:	str	lr, [sp, #12]
   15a10:	ble	15a24 <_start@@Base+0x32ec>
   15a14:	ldrb	r3, [r1]
   15a18:	cmp	r3, #32
   15a1c:	bhi	15a34 <_start@@Base+0x32fc>
   15a20:	beq	15b24 <_start@@Base+0x33ec>
   15a24:	mov	r2, r4
   15a28:	mov	r0, r5
   15a2c:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   15a30:	mov	r1, r0
   15a34:	cmp	r4, r1
   15a38:	moveq	r3, #0
   15a3c:	moveq	r0, r4
   15a40:	streq	r3, [r6]
   15a44:	beq	15b14 <_start@@Base+0x33dc>
   15a48:	ldrb	r3, [r1]
   15a4c:	cmp	r3, #44	; 0x2c
   15a50:	beq	15ac8 <_start@@Base+0x3390>
   15a54:	mov	r3, #0
   15a58:	str	r3, [r6]
   15a5c:	ldrb	r3, [r1]
   15a60:	cmp	r3, #93	; 0x5d
   15a64:	beq	15a88 <_start@@Base+0x3350>
   15a68:	mov	r2, r4
   15a6c:	mov	r0, r5
   15a70:	mov	r3, #9
   15a74:	ldrd	r4, [sp]
   15a78:	ldr	r6, [sp, #8]
   15a7c:	ldr	lr, [sp, #12]
   15a80:	add	sp, sp, #16
   15a84:	b	270b8 <flatcc_json_parser_set_error@@Base>
   15a88:	add	r0, r1, #1
   15a8c:	sub	r3, r4, r0
   15a90:	cmp	r3, #1
   15a94:	ble	15aa8 <_start@@Base+0x3370>
   15a98:	ldrb	r3, [r1, #1]
   15a9c:	cmp	r3, #32
   15aa0:	bhi	15b14 <_start@@Base+0x33dc>
   15aa4:	beq	15b70 <_start@@Base+0x3438>
   15aa8:	mov	r2, r4
   15aac:	mov	r1, r0
   15ab0:	ldr	r6, [sp, #8]
   15ab4:	mov	r0, r5
   15ab8:	ldrd	r4, [sp]
   15abc:	ldr	lr, [sp, #12]
   15ac0:	add	sp, sp, #16
   15ac4:	b	271ac <flatcc_json_parser_space_ext@@Base>
   15ac8:	add	r0, r1, #1
   15acc:	sub	r3, r4, r0
   15ad0:	cmp	r3, #1
   15ad4:	ble	15ae8 <_start@@Base+0x33b0>
   15ad8:	ldrb	r3, [r1, #1]
   15adc:	cmp	r3, #32
   15ae0:	bhi	15af8 <_start@@Base+0x33c0>
   15ae4:	beq	15b84 <_start@@Base+0x344c>
   15ae8:	mov	r1, r0
   15aec:	mov	r2, r4
   15af0:	mov	r0, r5
   15af4:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   15af8:	cmp	r4, r0
   15afc:	beq	15b98 <_start@@Base+0x3460>
   15b00:	ldrb	r3, [r0]
   15b04:	cmp	r3, #93	; 0x5d
   15b08:	movne	r3, #1
   15b0c:	strne	r3, [r6]
   15b10:	beq	15b48 <_start@@Base+0x3410>
   15b14:	ldrd	r4, [sp]
   15b18:	ldr	r6, [sp, #8]
   15b1c:	add	sp, sp, #12
   15b20:	pop	{pc}		; (ldr pc, [sp], #4)
   15b24:	ldrb	r3, [r1, #1]
   15b28:	cmp	r3, #32
   15b2c:	addhi	r1, r1, #1
   15b30:	bhi	15a34 <_start@@Base+0x32fc>
   15b34:	mov	r2, r4
   15b38:	mov	r0, r5
   15b3c:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   15b40:	mov	r1, r0
   15b44:	b	15a34 <_start@@Base+0x32fc>
   15b48:	mov	r3, #0
   15b4c:	mov	r2, r4
   15b50:	ldr	lr, [sp, #12]
   15b54:	add	r1, r0, #1
   15b58:	mov	r0, r5
   15b5c:	ldrd	r4, [sp]
   15b60:	str	r3, [r6]
   15b64:	ldr	r6, [sp, #8]
   15b68:	add	sp, sp, #16
   15b6c:	b	13118 <_start@@Base+0x9e0>
   15b70:	ldrb	r3, [r1, #2]
   15b74:	cmp	r3, #32
   15b78:	addhi	r0, r1, #2
   15b7c:	bls	15aa8 <_start@@Base+0x3370>
   15b80:	b	15b14 <_start@@Base+0x33dc>
   15b84:	ldrb	r3, [r1, #2]
   15b88:	cmp	r3, #32
   15b8c:	addhi	r0, r1, #2
   15b90:	bls	15ae8 <_start@@Base+0x33b0>
   15b94:	b	15af8 <_start@@Base+0x33c0>
   15b98:	mov	ip, #0
   15b9c:	mov	r0, r5
   15ba0:	mov	r3, #9
   15ba4:	mov	r2, r4
   15ba8:	mov	r1, r4
   15bac:	str	ip, [r6]
   15bb0:	b	15a74 <_start@@Base+0x333c>
   15bb4:	cmp	r1, r2
   15bb8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15bbc:	strd	r6, [sp, #8]
   15bc0:	mov	r6, r2
   15bc4:	mov	r7, r0
   15bc8:	strd	r8, [sp, #16]
   15bcc:	strd	sl, [sp, #24]
   15bd0:	str	lr, [sp, #32]
   15bd4:	sub	sp, sp, #36	; 0x24
   15bd8:	beq	15bec <_start@@Base+0x34b4>
   15bdc:	mov	fp, r3
   15be0:	ldrb	r3, [r1]
   15be4:	cmp	r3, #123	; 0x7b
   15be8:	beq	15c20 <_start@@Base+0x34e8>
   15bec:	mov	r2, r6
   15bf0:	mov	r0, r7
   15bf4:	mov	r3, #21
   15bf8:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   15bfc:	mov	r5, r0
   15c00:	mov	r0, r5
   15c04:	add	sp, sp, #36	; 0x24
   15c08:	ldrd	r4, [sp]
   15c0c:	ldrd	r6, [sp, #8]
   15c10:	ldrd	r8, [sp, #16]
   15c14:	ldrd	sl, [sp, #24]
   15c18:	add	sp, sp, #32
   15c1c:	pop	{pc}		; (ldr pc, [sp], #4)
   15c20:	add	r4, r1, #1
   15c24:	sub	r3, r2, r4
   15c28:	cmp	r3, #1
   15c2c:	ble	15c40 <_start@@Base+0x3508>
   15c30:	ldrb	r3, [r1, #1]
   15c34:	cmp	r3, #32
   15c38:	bhi	15c54 <_start@@Base+0x351c>
   15c3c:	beq	16334 <_start@@Base+0x3bfc>
   15c40:	mov	r1, r4
   15c44:	mov	r2, r6
   15c48:	mov	r0, r7
   15c4c:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   15c50:	mov	r4, r0
   15c54:	cmp	r6, r4
   15c58:	beq	15c68 <_start@@Base+0x3530>
   15c5c:	ldrb	r3, [r4]
   15c60:	cmp	r3, #125	; 0x7d
   15c64:	beq	16348 <_start@@Base+0x3c10>
   15c68:	ldr	r2, [pc, #1776]	; 16360 <_start@@Base+0x3c28>
   15c6c:	ldr	r3, [pc, #1776]	; 16364 <_start@@Base+0x3c2c>
   15c70:	add	r2, pc, r2
   15c74:	add	r2, r2, #24
   15c78:	add	r3, pc, r3
   15c7c:	add	r3, r3, #12
   15c80:	strd	r2, [sp, #8]
   15c84:	cmp	r6, r4
   15c88:	beq	15e7c <_start@@Base+0x3744>
   15c8c:	ldrb	r3, [r4]
   15c90:	cmp	r3, #34	; 0x22
   15c94:	moveq	r3, #0
   15c98:	addeq	r4, r4, #1
   15c9c:	streq	r3, [r7, #12]
   15ca0:	beq	15cb4 <_start@@Base+0x357c>
   15ca4:	cmp	r3, #46	; 0x2e
   15ca8:	movne	r3, #1
   15cac:	strne	r3, [r7, #12]
   15cb0:	beq	160f0 <_start@@Base+0x39b8>
   15cb4:	sub	r2, r6, r4
   15cb8:	cmp	r2, #8
   15cbc:	bls	15e94 <_start@@Base+0x375c>
   15cc0:	mov	r1, #0
   15cc4:	mov	r3, r1
   15cc8:	ldrb	r0, [r4, #3]
   15ccc:	orr	r3, r3, r0
   15cd0:	ldrb	r0, [r4, #2]
   15cd4:	orr	r3, r3, r0, lsl #8
   15cd8:	ldrb	r0, [r4, #1]
   15cdc:	orr	r3, r3, r0, lsl #16
   15ce0:	ldrb	r0, [r4]
   15ce4:	mov	r8, #0
   15ce8:	orr	r3, r3, r0, lsl #24
   15cec:	and	r9, r3, #-16777216	; 0xff000000
   15cf0:	cmp	r9, #1644167168	; 0x62000000
   15cf4:	cmpeq	r8, #0
   15cf8:	beq	15ee4 <_start@@Base+0x37ac>
   15cfc:	cmp	r9, #1627389952	; 0x61000000
   15d00:	cmpeq	r8, #0
   15d04:	bne	15e7c <_start@@Base+0x3744>
   15d08:	cmp	r2, #1
   15d0c:	ble	15e7c <_start@@Base+0x3744>
   15d10:	ldr	r2, [r7, #12]
   15d14:	ldrb	r3, [r4, #1]
   15d18:	cmp	r2, #0
   15d1c:	beq	160d0 <_start@@Base+0x3998>
   15d20:	cmp	r3, #58	; 0x3a
   15d24:	cmpne	r3, #32
   15d28:	movhi	r3, #1
   15d2c:	movls	r3, #0
   15d30:	bhi	15e7c <_start@@Base+0x3744>
   15d34:	add	r1, r4, #1
   15d38:	str	r3, [r7, #12]
   15d3c:	sub	r3, r6, r1
   15d40:	cmp	r3, #1
   15d44:	ble	15d58 <_start@@Base+0x3620>
   15d48:	ldrb	r3, [r1]
   15d4c:	cmp	r3, #32
   15d50:	bhi	15d68 <_start@@Base+0x3630>
   15d54:	beq	16260 <_start@@Base+0x3b28>
   15d58:	mov	r2, r6
   15d5c:	mov	r0, r7
   15d60:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   15d64:	mov	r1, r0
   15d68:	cmp	r6, r1
   15d6c:	beq	15d7c <_start@@Base+0x3644>
   15d70:	ldrb	r3, [r1]
   15d74:	cmp	r3, #58	; 0x3a
   15d78:	beq	162bc <_start@@Base+0x3b84>
   15d7c:	mov	r3, #4
   15d80:	mov	r2, r6
   15d84:	mov	r0, r7
   15d88:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   15d8c:	mov	sl, r0
   15d90:	cmp	sl, r4
   15d94:	beq	15e7c <_start@@Base+0x3744>
   15d98:	mov	r3, #0
   15d9c:	mov	r0, #0
   15da0:	mov	r1, #0
   15da4:	cmp	r6, sl
   15da8:	strh	r3, [sp, #18]
   15dac:	str	r3, [sp, #20]
   15db0:	strd	r0, [sp, #24]
   15db4:	beq	160e8 <_start@@Base+0x39b0>
   15db8:	add	r0, sp, #24
   15dbc:	add	r3, sp, #20
   15dc0:	mov	r2, r6
   15dc4:	mov	r1, sl
   15dc8:	str	r0, [sp]
   15dcc:	mov	r0, r7
   15dd0:	bl	28ea4 <flatcc_json_parser_integer@@Base>
   15dd4:	cmp	sl, r0
   15dd8:	mov	r5, r0
   15ddc:	bne	1614c <_start@@Base+0x3a14>
   15de0:	add	r0, sp, #18
   15de4:	mov	r2, r6
   15de8:	ldr	r3, [sp, #8]
   15dec:	mov	r1, r5
   15df0:	str	r0, [sp]
   15df4:	mov	r0, r7
   15df8:	bl	142a8 <_start@@Base+0x1b70>
   15dfc:	cmp	r6, r0
   15e00:	cmpne	r0, r5
   15e04:	beq	16318 <_start@@Base+0x3be0>
   15e08:	ldrsh	r2, [sp, #18]
   15e0c:	mov	r5, r0
   15e10:	strh	r2, [fp]
   15e14:	sub	r3, r6, r5
   15e18:	cmp	r3, #1
   15e1c:	ble	15e30 <_start@@Base+0x36f8>
   15e20:	ldrb	r3, [r5]
   15e24:	cmp	r3, #32
   15e28:	bhi	15e44 <_start@@Base+0x370c>
   15e2c:	beq	1602c <_start@@Base+0x38f4>
   15e30:	mov	r1, r5
   15e34:	mov	r2, r6
   15e38:	mov	r0, r7
   15e3c:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   15e40:	mov	r5, r0
   15e44:	cmp	r6, r5
   15e48:	beq	15c00 <_start@@Base+0x34c8>
   15e4c:	ldrb	r3, [r5]
   15e50:	cmp	r3, #44	; 0x2c
   15e54:	beq	16040 <_start@@Base+0x3908>
   15e58:	cmp	r3, #125	; 0x7d
   15e5c:	beq	15ff4 <_start@@Base+0x38bc>
   15e60:	mov	r1, r5
   15e64:	mov	r2, r6
   15e68:	mov	r0, r7
   15e6c:	mov	r3, #10
   15e70:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   15e74:	mov	r5, r0
   15e78:	b	15c00 <_start@@Base+0x34c8>
   15e7c:	mov	r1, r4
   15e80:	mov	r2, r6
   15e84:	mov	r0, r7
   15e88:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   15e8c:	mov	r5, r0
   15e90:	b	15e14 <_start@@Base+0x36dc>
   15e94:	sub	r3, r2, #1
   15e98:	cmp	r3, #7
   15e9c:	addls	pc, pc, r3, lsl #2
   15ea0:	b	15e7c <_start@@Base+0x3744>
   15ea4:	b	15edc <_start@@Base+0x37a4>
   15ea8:	b	15ed4 <_start@@Base+0x379c>
   15eac:	b	15ecc <_start@@Base+0x3794>
   15eb0:	b	15ec4 <_start@@Base+0x378c>
   15eb4:	b	15ec4 <_start@@Base+0x378c>
   15eb8:	b	15ec4 <_start@@Base+0x378c>
   15ebc:	b	15cc0 <_start@@Base+0x3588>
   15ec0:	b	15cc0 <_start@@Base+0x3588>
   15ec4:	mov	r3, #0
   15ec8:	b	15cc8 <_start@@Base+0x3590>
   15ecc:	mov	r3, #0
   15ed0:	b	15cd0 <_start@@Base+0x3598>
   15ed4:	mov	r3, #0
   15ed8:	b	15cd8 <_start@@Base+0x35a0>
   15edc:	mov	r3, #0
   15ee0:	b	15ce0 <_start@@Base+0x35a8>
   15ee4:	cmp	r2, #1
   15ee8:	ble	15e7c <_start@@Base+0x3744>
   15eec:	ldr	r2, [r7, #12]
   15ef0:	ldrb	r3, [r4, #1]
   15ef4:	cmp	r2, r8
   15ef8:	beq	160c0 <_start@@Base+0x3988>
   15efc:	cmp	r3, #58	; 0x3a
   15f00:	cmpne	r3, #32
   15f04:	movhi	r3, #1
   15f08:	movls	r3, #0
   15f0c:	bhi	15e7c <_start@@Base+0x3744>
   15f10:	add	r1, r4, #1
   15f14:	str	r3, [r7, #12]
   15f18:	sub	r3, r6, r1
   15f1c:	cmp	r3, #1
   15f20:	ble	15f34 <_start@@Base+0x37fc>
   15f24:	ldrb	r3, [r1]
   15f28:	cmp	r3, #32
   15f2c:	bhi	15f44 <_start@@Base+0x380c>
   15f30:	beq	1624c <_start@@Base+0x3b14>
   15f34:	mov	r2, r6
   15f38:	mov	r0, r7
   15f3c:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   15f40:	mov	r1, r0
   15f44:	cmp	r6, r1
   15f48:	beq	15f58 <_start@@Base+0x3820>
   15f4c:	ldrb	r3, [r1]
   15f50:	cmp	r3, #58	; 0x3a
   15f54:	beq	16274 <_start@@Base+0x3b3c>
   15f58:	mov	r3, #4
   15f5c:	mov	r2, r6
   15f60:	mov	r0, r7
   15f64:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   15f68:	mov	sl, r0
   15f6c:	cmp	sl, r4
   15f70:	beq	15e7c <_start@@Base+0x3744>
   15f74:	mov	r3, #0
   15f78:	mov	r0, #0
   15f7c:	mov	r1, #0
   15f80:	cmp	r6, sl
   15f84:	strb	r3, [sp, #18]
   15f88:	str	r3, [sp, #20]
   15f8c:	strd	r0, [sp, #24]
   15f90:	beq	160e0 <_start@@Base+0x39a8>
   15f94:	add	r0, sp, #24
   15f98:	add	r3, sp, #20
   15f9c:	mov	r2, r6
   15fa0:	mov	r1, sl
   15fa4:	str	r0, [sp]
   15fa8:	mov	r0, r7
   15fac:	bl	28ea4 <flatcc_json_parser_integer@@Base>
   15fb0:	cmp	sl, r0
   15fb4:	mov	r5, r0
   15fb8:	bne	1610c <_start@@Base+0x39d4>
   15fbc:	add	r0, sp, #18
   15fc0:	mov	r2, r6
   15fc4:	ldr	r3, [sp, #12]
   15fc8:	mov	r1, r5
   15fcc:	str	r0, [sp]
   15fd0:	mov	r0, r7
   15fd4:	bl	14784 <_start@@Base+0x204c>
   15fd8:	cmp	r6, r0
   15fdc:	cmpne	r0, r5
   15fe0:	beq	16318 <_start@@Base+0x3be0>
   15fe4:	ldrsb	r2, [sp, #18]
   15fe8:	mov	r5, r0
   15fec:	strb	r2, [fp, #2]
   15ff0:	b	15e14 <_start@@Base+0x36dc>
   15ff4:	add	r1, r5, #1
   15ff8:	sub	r3, r6, r1
   15ffc:	cmp	r3, #1
   16000:	ble	16018 <_start@@Base+0x38e0>
   16004:	ldrb	r3, [r5, #1]
   16008:	cmp	r3, #32
   1600c:	movhi	r5, r1
   16010:	bhi	15c00 <_start@@Base+0x34c8>
   16014:	beq	16198 <_start@@Base+0x3a60>
   16018:	mov	r2, r6
   1601c:	mov	r0, r7
   16020:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   16024:	mov	r5, r0
   16028:	b	15c00 <_start@@Base+0x34c8>
   1602c:	ldrb	r3, [r5, #1]
   16030:	cmp	r3, #32
   16034:	addhi	r5, r5, #1
   16038:	bls	15e30 <_start@@Base+0x36f8>
   1603c:	b	15e44 <_start@@Base+0x370c>
   16040:	add	r4, r5, #1
   16044:	sub	r3, r6, r4
   16048:	cmp	r3, #1
   1604c:	ble	16060 <_start@@Base+0x3928>
   16050:	ldrb	r3, [r5, #1]
   16054:	cmp	r3, #32
   16058:	bhi	16074 <_start@@Base+0x393c>
   1605c:	beq	16218 <_start@@Base+0x3ae0>
   16060:	mov	r1, r4
   16064:	mov	r2, r6
   16068:	mov	r0, r7
   1606c:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   16070:	mov	r4, r0
   16074:	cmp	r6, r4
   16078:	beq	16230 <_start@@Base+0x3af8>
   1607c:	ldrb	r3, [r4]
   16080:	cmp	r3, #125	; 0x7d
   16084:	bne	15c84 <_start@@Base+0x354c>
   16088:	add	r5, r4, #1
   1608c:	sub	r3, r6, r5
   16090:	cmp	r3, #1
   16094:	ble	160a8 <_start@@Base+0x3970>
   16098:	ldrb	r3, [r4, #1]
   1609c:	cmp	r3, #32
   160a0:	bhi	15c00 <_start@@Base+0x34c8>
   160a4:	beq	16304 <_start@@Base+0x3bcc>
   160a8:	mov	r1, r5
   160ac:	mov	r2, r6
   160b0:	mov	r0, r7
   160b4:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   160b8:	mov	r5, r0
   160bc:	b	15c00 <_start@@Base+0x34c8>
   160c0:	cmp	r3, #34	; 0x22
   160c4:	bne	15e7c <_start@@Base+0x3744>
   160c8:	add	r1, r4, #2
   160cc:	b	15f18 <_start@@Base+0x37e0>
   160d0:	cmp	r3, #34	; 0x22
   160d4:	bne	15e7c <_start@@Base+0x3744>
   160d8:	add	r1, r4, #2
   160dc:	b	15d3c <_start@@Base+0x3604>
   160e0:	mov	r5, r6
   160e4:	b	15fbc <_start@@Base+0x3884>
   160e8:	mov	r5, r6
   160ec:	b	15de0 <_start@@Base+0x36a8>
   160f0:	mov	r1, r4
   160f4:	mov	r3, #5
   160f8:	mov	r2, r6
   160fc:	mov	r0, r7
   16100:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   16104:	mov	r4, r0
   16108:	b	15cb4 <_start@@Base+0x357c>
   1610c:	ldr	r1, [sp, #20]
   16110:	ldrd	r2, [sp, #24]
   16114:	cmp	r1, #0
   16118:	beq	161ac <_start@@Base+0x3a74>
   1611c:	cmp	r3, #0
   16120:	cmpeq	r2, #128	; 0x80
   16124:	rsbls	r2, r2, #0
   16128:	sxtbls	r2, r2
   1612c:	bls	15fec <_start@@Base+0x38b4>
   16130:	mov	r1, r0
   16134:	mov	r3, #8
   16138:	mov	r2, r6
   1613c:	mov	r0, r7
   16140:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   16144:	mov	r5, r0
   16148:	b	161d4 <_start@@Base+0x3a9c>
   1614c:	ldr	r1, [sp, #20]
   16150:	ldrd	r2, [sp, #24]
   16154:	cmp	r1, #0
   16158:	beq	161e4 <_start@@Base+0x3aac>
   1615c:	cmp	r3, #0
   16160:	cmpeq	r2, #32768	; 0x8000
   16164:	rsbls	r2, r2, #0
   16168:	sxthls	r2, r2
   1616c:	bls	15e10 <_start@@Base+0x36d8>
   16170:	mov	r1, r0
   16174:	mov	r3, #8
   16178:	mov	r2, r6
   1617c:	mov	r0, r7
   16180:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   16184:	mov	r5, r0
   16188:	cmp	sl, r5
   1618c:	ldrshne	r2, [sp, #18]
   16190:	bne	15e10 <_start@@Base+0x36d8>
   16194:	b	15de0 <_start@@Base+0x36a8>
   16198:	ldrb	r3, [r5, #2]
   1619c:	cmp	r3, #32
   161a0:	addhi	r5, r5, #2
   161a4:	bls	16018 <_start@@Base+0x38e0>
   161a8:	b	15c00 <_start@@Base+0x34c8>
   161ac:	cmp	r3, #0
   161b0:	cmpeq	r2, #127	; 0x7f
   161b4:	sxtbls	r2, r2
   161b8:	bls	15fec <_start@@Base+0x38b4>
   161bc:	mov	r1, r0
   161c0:	mov	r3, #7
   161c4:	mov	r2, r6
   161c8:	mov	r0, r7
   161cc:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   161d0:	mov	r5, r0
   161d4:	cmp	sl, r5
   161d8:	ldrsbne	r2, [sp, #18]
   161dc:	bne	15fec <_start@@Base+0x38b4>
   161e0:	b	15fbc <_start@@Base+0x3884>
   161e4:	mov	r1, #0
   161e8:	movw	r0, #32767	; 0x7fff
   161ec:	cmp	r3, r1
   161f0:	cmpeq	r2, r0
   161f4:	sxthls	r2, r2
   161f8:	bls	15e10 <_start@@Base+0x36d8>
   161fc:	mov	r1, r5
   16200:	mov	r3, #7
   16204:	mov	r2, r6
   16208:	mov	r0, r7
   1620c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   16210:	mov	r5, r0
   16214:	b	16188 <_start@@Base+0x3a50>
   16218:	ldrb	r3, [r5, #2]
   1621c:	cmp	r3, #32
   16220:	addhi	r4, r5, #2
   16224:	bls	16060 <_start@@Base+0x3928>
   16228:	cmp	r6, r4
   1622c:	bne	1607c <_start@@Base+0x3944>
   16230:	mov	r0, r7
   16234:	mov	r3, #10
   16238:	mov	r2, r6
   1623c:	mov	r1, r6
   16240:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   16244:	mov	r5, r0
   16248:	b	15c00 <_start@@Base+0x34c8>
   1624c:	ldrb	r3, [r1, #1]
   16250:	cmp	r3, #32
   16254:	addhi	r1, r1, #1
   16258:	bls	15f34 <_start@@Base+0x37fc>
   1625c:	b	15f44 <_start@@Base+0x380c>
   16260:	ldrb	r3, [r1, #1]
   16264:	cmp	r3, #32
   16268:	addhi	r1, r1, #1
   1626c:	bls	15d58 <_start@@Base+0x3620>
   16270:	b	15d68 <_start@@Base+0x3630>
   16274:	add	sl, r1, #1
   16278:	sub	r3, r6, sl
   1627c:	cmp	r3, #1
   16280:	ble	162a4 <_start@@Base+0x3b6c>
   16284:	ldrb	r3, [r1, #1]
   16288:	cmp	r3, #32
   1628c:	bhi	15f6c <_start@@Base+0x3834>
   16290:	bne	162a4 <_start@@Base+0x3b6c>
   16294:	ldrb	r3, [r1, #2]
   16298:	cmp	r3, #32
   1629c:	addhi	sl, r1, #2
   162a0:	bhi	15f6c <_start@@Base+0x3834>
   162a4:	mov	r1, sl
   162a8:	mov	r2, r6
   162ac:	mov	r0, r7
   162b0:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   162b4:	mov	sl, r0
   162b8:	b	15f6c <_start@@Base+0x3834>
   162bc:	add	sl, r1, #1
   162c0:	sub	r3, r6, sl
   162c4:	cmp	r3, #1
   162c8:	ble	162ec <_start@@Base+0x3bb4>
   162cc:	ldrb	r3, [r1, #1]
   162d0:	cmp	r3, #32
   162d4:	bhi	15d90 <_start@@Base+0x3658>
   162d8:	bne	162ec <_start@@Base+0x3bb4>
   162dc:	ldrb	r3, [r1, #2]
   162e0:	cmp	r3, #32
   162e4:	addhi	sl, r1, #2
   162e8:	bhi	15d90 <_start@@Base+0x3658>
   162ec:	mov	r1, sl
   162f0:	mov	r2, r6
   162f4:	mov	r0, r7
   162f8:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   162fc:	mov	sl, r0
   16300:	b	15d90 <_start@@Base+0x3658>
   16304:	ldrb	r3, [r4, #2]
   16308:	cmp	r3, #32
   1630c:	addhi	r5, r4, #2
   16310:	bls	160a8 <_start@@Base+0x3970>
   16314:	b	15c00 <_start@@Base+0x34c8>
   16318:	mov	r1, r0
   1631c:	mov	r2, r6
   16320:	mov	r0, r7
   16324:	mov	r3, #33	; 0x21
   16328:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1632c:	mov	r5, r0
   16330:	b	15c00 <_start@@Base+0x34c8>
   16334:	ldrb	r3, [r1, #2]
   16338:	cmp	r3, #32
   1633c:	addhi	r4, r1, #2
   16340:	bls	15c40 <_start@@Base+0x3508>
   16344:	b	15c54 <_start@@Base+0x351c>
   16348:	mov	r2, r6
   1634c:	add	r1, r4, #1
   16350:	mov	r0, r7
   16354:	bl	13118 <_start@@Base+0x9e0>
   16358:	mov	r5, r0
   1635c:	b	15c00 <_start@@Base+0x34c8>
   16360:	andeq	r7, r2, r8, lsl r4
   16364:	andeq	r7, r2, r0, lsl r4
   16368:	sub	ip, r2, r1
   1636c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16370:	cmp	ip, #8
   16374:	strd	r6, [sp, #8]
   16378:	strd	r8, [sp, #16]
   1637c:	strd	sl, [sp, #24]
   16380:	str	lr, [sp, #32]
   16384:	sub	sp, sp, #12
   16388:	bhi	163bc <_start@@Base+0x3c84>
   1638c:	sub	ip, ip, #1
   16390:	cmp	ip, #7
   16394:	addls	pc, pc, ip, lsl #2
   16398:	b	1656c <_start@@Base+0x3e34>
   1639c:	b	16518 <_start@@Base+0x3de0>
   163a0:	b	16524 <_start@@Base+0x3dec>
   163a4:	b	16530 <_start@@Base+0x3df8>
   163a8:	b	1653c <_start@@Base+0x3e04>
   163ac:	b	16548 <_start@@Base+0x3e10>
   163b0:	b	16554 <_start@@Base+0x3e1c>
   163b4:	b	16560 <_start@@Base+0x3e28>
   163b8:	b	163bc <_start@@Base+0x3c84>
   163bc:	ldrb	r6, [r1, #7]
   163c0:	mov	r7, #0
   163c4:	mov	ip, r7
   163c8:	ldrb	r4, [r1, #6]
   163cc:	orr	r6, r6, r4, lsl #8
   163d0:	ldrb	r4, [r1, #5]
   163d4:	orr	r6, r6, r4, lsl #16
   163d8:	ldrb	r4, [r1, #4]
   163dc:	orr	r6, r6, r4, lsl #24
   163e0:	ldrb	r4, [r1, #3]
   163e4:	orr	ip, ip, r4
   163e8:	ldrb	r4, [r1, #2]
   163ec:	orr	ip, ip, r4, lsl #8
   163f0:	ldrb	r4, [r1, #1]
   163f4:	orr	ip, ip, r4, lsl #16
   163f8:	mov	r5, r1
   163fc:	mov	r4, r2
   16400:	mov	r2, r6
   16404:	ldrb	r6, [r5]
   16408:	mov	sl, r0
   1640c:	mov	fp, r3
   16410:	add	r1, pc, #352	; 0x160
   16414:	ldrd	r0, [r1]
   16418:	orr	r3, ip, r6, lsl #24
   1641c:	mov	r6, #0
   16420:	cmp	r3, r1
   16424:	cmpeq	r2, r0
   16428:	beq	1649c <_start@@Base+0x3d64>
   1642c:	add	r9, pc, #332	; 0x14c
   16430:	ldrd	r8, [r9]
   16434:	cmp	r3, r9
   16438:	cmpeq	r6, r8
   1643c:	beq	16460 <_start@@Base+0x3d28>
   16440:	mov	r0, r5
   16444:	add	sp, sp, #12
   16448:	ldrd	r4, [sp]
   1644c:	ldrd	r6, [sp, #8]
   16450:	ldrd	r8, [sp, #16]
   16454:	ldrd	sl, [sp, #24]
   16458:	add	sp, sp, #32
   1645c:	pop	{pc}		; (ldr pc, [sp], #4)
   16460:	ldr	r3, [sp, #52]	; 0x34
   16464:	mov	r2, r4
   16468:	mov	r0, sl
   1646c:	mov	r1, r5
   16470:	str	r3, [sp]
   16474:	mov	r3, #4
   16478:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   1647c:	cmp	r5, r0
   16480:	beq	16444 <_start@@Base+0x3d0c>
   16484:	ldr	r1, [sp, #48]	; 0x30
   16488:	mov	r2, #0
   1648c:	mov	r3, #0
   16490:	strd	r2, [r1]
   16494:	str	r6, [fp]
   16498:	b	16444 <_start@@Base+0x3d0c>
   1649c:	mov	r1, r4
   164a0:	add	r0, r5, #8
   164a4:	bl	12828 <_start@@Base+0xf0>
   164a8:	add	r3, pc, #216	; 0xd8
   164ac:	ldrd	r2, [r3]
   164b0:	cmp	r1, r3
   164b4:	cmpeq	r0, r2
   164b8:	bne	16440 <_start@@Base+0x3d08>
   164bc:	add	r7, r5, #16
   164c0:	mov	r1, r4
   164c4:	mov	r0, r7
   164c8:	bl	12828 <_start@@Base+0xf0>
   164cc:	and	r3, r1, #-16777216	; 0xff000000
   164d0:	cmp	r3, #1694498816	; 0x65000000
   164d4:	cmpeq	r6, #0
   164d8:	bne	16440 <_start@@Base+0x3d08>
   164dc:	ldr	r3, [sp, #52]	; 0x34
   164e0:	mov	r2, r4
   164e4:	mov	r0, sl
   164e8:	mov	r1, r7
   164ec:	str	r3, [sp]
   164f0:	mov	r3, #1
   164f4:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   164f8:	cmp	r7, r0
   164fc:	beq	16440 <_start@@Base+0x3d08>
   16500:	ldr	r1, [sp, #48]	; 0x30
   16504:	mov	r2, #1
   16508:	mov	r3, #0
   1650c:	strd	r2, [r1]
   16510:	str	r6, [fp]
   16514:	b	16444 <_start@@Base+0x3d0c>
   16518:	mov	r6, #0
   1651c:	mov	ip, r6
   16520:	b	163f8 <_start@@Base+0x3cc0>
   16524:	mov	r6, #0
   16528:	mov	ip, r6
   1652c:	b	163f0 <_start@@Base+0x3cb8>
   16530:	mov	r6, #0
   16534:	mov	ip, r6
   16538:	b	163e8 <_start@@Base+0x3cb0>
   1653c:	mov	r6, #0
   16540:	mov	ip, r6
   16544:	b	163e0 <_start@@Base+0x3ca8>
   16548:	mov	r6, #0
   1654c:	mov	ip, r6
   16550:	b	163d8 <_start@@Base+0x3ca0>
   16554:	mov	r6, #0
   16558:	mov	ip, r6
   1655c:	b	163d0 <_start@@Base+0x3c98>
   16560:	mov	r6, #0
   16564:	mov	r7, #0
   16568:	b	163c4 <_start@@Base+0x3c8c>
   1656c:	mov	r0, r1
   16570:	b	16444 <_start@@Base+0x3d0c>
   16574:	nop	{0}
   16578:	rsbvc	r6, r5, #116, 28	; 0x740
   1657c:	stmdbmi	lr!, {r0, r5, r6, ip, lr}^
   16580:	andeq	r0, r0, r0
   16584:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   16588:	cmnvc	r0, #-1073741800	; 0xc0000018
   1658c:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   16590:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16594:	mov	r4, r1
   16598:	sub	r1, r2, r1
   1659c:	cmp	r1, #8
   165a0:	mov	r5, r3
   165a4:	strd	r6, [sp, #8]
   165a8:	strd	r8, [sp, #16]
   165ac:	strd	sl, [sp, #24]
   165b0:	str	lr, [sp, #32]
   165b4:	sub	sp, sp, #12
   165b8:	bhi	165ec <_start@@Base+0x3eb4>
   165bc:	sub	r1, r1, #1
   165c0:	cmp	r1, #7
   165c4:	addls	pc, pc, r1, lsl #2
   165c8:	b	16674 <_start@@Base+0x3f3c>
   165cc:	b	16744 <_start@@Base+0x400c>
   165d0:	b	16768 <_start@@Base+0x4030>
   165d4:	b	16774 <_start@@Base+0x403c>
   165d8:	b	16780 <_start@@Base+0x4048>
   165dc:	b	1678c <_start@@Base+0x4054>
   165e0:	b	16750 <_start@@Base+0x4018>
   165e4:	b	1675c <_start@@Base+0x4024>
   165e8:	b	165ec <_start@@Base+0x3eb4>
   165ec:	ldrb	r6, [r4, #7]
   165f0:	mov	r7, #0
   165f4:	mov	r1, r7
   165f8:	ldrb	r8, [r4, #6]
   165fc:	orr	r3, r6, r8, lsl #8
   16600:	ldrb	r6, [r4, #5]
   16604:	orr	r3, r3, r6, lsl #16
   16608:	ldrb	r6, [r4, #4]
   1660c:	orr	r3, r3, r6, lsl #24
   16610:	ldrb	r6, [r4, #3]
   16614:	orr	r1, r1, r6
   16618:	ldrb	r6, [r4, #2]
   1661c:	orr	r1, r1, r6, lsl #8
   16620:	ldrb	r6, [r4, #1]
   16624:	orr	r1, r1, r6, lsl #16
   16628:	ldrb	r8, [r4]
   1662c:	add	fp, pc, #356	; 0x164
   16630:	ldrd	sl, [fp]
   16634:	orr	r7, r1, r8, lsl #24
   16638:	mov	r8, #0
   1663c:	cmp	r7, fp
   16640:	mov	r9, r7
   16644:	cmpeq	r3, sl
   16648:	bls	16694 <_start@@Base+0x3f5c>
   1664c:	add	r7, pc, #332	; 0x14c
   16650:	ldrd	r6, [r7]
   16654:	cmp	r9, r7
   16658:	cmpeq	r8, r6
   1665c:	beq	16720 <_start@@Base+0x3fe8>
   16660:	add	r7, pc, #320	; 0x140
   16664:	ldrd	r6, [r7]
   16668:	cmp	r9, r7
   1666c:	cmpeq	r8, r6
   16670:	beq	166e4 <_start@@Base+0x3fac>
   16674:	mov	r0, r4
   16678:	add	sp, sp, #12
   1667c:	ldrd	r4, [sp]
   16680:	ldrd	r6, [sp, #8]
   16684:	ldrd	r8, [sp, #16]
   16688:	ldrd	sl, [sp, #24]
   1668c:	add	sp, sp, #32
   16690:	pop	{pc}		; (ldr pc, [sp], #4)
   16694:	add	r7, pc, #276	; 0x114
   16698:	ldrd	r6, [r7]
   1669c:	cmp	r9, r7
   166a0:	cmpeq	r8, r6
   166a4:	bne	16674 <_start@@Base+0x3f3c>
   166a8:	ldr	r3, [sp, #52]	; 0x34
   166ac:	mov	r1, r4
   166b0:	str	r3, [sp]
   166b4:	mov	r3, #4
   166b8:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   166bc:	cmp	r4, r0
   166c0:	mvnne	r6, #11
   166c4:	beq	16674 <_start@@Base+0x3f3c>
   166c8:	ldr	r2, [sp, #48]	; 0x30
   166cc:	mvn	r7, #0
   166d0:	mov	r3, #1
   166d4:	mov	r4, r0
   166d8:	strd	r6, [r2]
   166dc:	str	r3, [r5]
   166e0:	b	16674 <_start@@Base+0x3f3c>
   166e4:	ldr	r3, [sp, #52]	; 0x34
   166e8:	mov	r1, r4
   166ec:	str	r3, [sp]
   166f0:	mov	r3, #4
   166f4:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   166f8:	cmp	r4, r0
   166fc:	beq	16674 <_start@@Base+0x3f3c>
   16700:	ldr	r2, [sp, #48]	; 0x30
   16704:	mov	r4, r0
   16708:	mvn	r1, #0
   1670c:	mvn	r0, #10
   16710:	mov	r3, #1
   16714:	strd	r0, [r2]
   16718:	str	r3, [r5]
   1671c:	b	16674 <_start@@Base+0x3f3c>
   16720:	ldr	r3, [sp, #52]	; 0x34
   16724:	mov	r1, r4
   16728:	str	r3, [sp]
   1672c:	mov	r3, #4
   16730:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   16734:	cmp	r4, r0
   16738:	beq	16674 <_start@@Base+0x3f3c>
   1673c:	mvn	r6, #9
   16740:	b	166c8 <_start@@Base+0x3f90>
   16744:	mov	r3, #0
   16748:	mov	r1, r3
   1674c:	b	16628 <_start@@Base+0x3ef0>
   16750:	mov	r3, #0
   16754:	mov	r1, r3
   16758:	b	16600 <_start@@Base+0x3ec8>
   1675c:	mov	r6, #0
   16760:	mov	r7, #0
   16764:	b	165f4 <_start@@Base+0x3ebc>
   16768:	mov	r3, #0
   1676c:	mov	r1, r3
   16770:	b	16620 <_start@@Base+0x3ee8>
   16774:	mov	r3, #0
   16778:	mov	r1, r3
   1677c:	b	16618 <_start@@Base+0x3ee0>
   16780:	mov	r3, #0
   16784:	mov	r1, r3
   16788:	b	16610 <_start@@Base+0x3ed8>
   1678c:	mov	r3, #0
   16790:	mov	r1, r3
   16794:	b	16608 <_start@@Base+0x3ed0>
   16798:			; <UNDEFINED> instruction: 0xffffffff
   1679c:	mcrvs	7, 3, r6, cr5, cr1, {1}
   167a0:	andeq	r0, r0, r0
   167a4:	mcrvs	7, 3, r6, cr5, cr3, {1}
   167a8:	andeq	r0, r0, r0
   167ac:	mcrvs	7, 3, r6, cr5, cr2, {1}
   167b0:	andeq	r0, r0, r0
   167b4:	mcrvs	7, 3, r6, cr5, cr1, {1}
   167b8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   167bc:	mov	r4, r1
   167c0:	sub	r1, r2, r1
   167c4:	cmp	r1, #8
   167c8:	mov	ip, r0
   167cc:	strd	r6, [sp, #8]
   167d0:	strd	r8, [sp, #16]
   167d4:	str	sl, [sp, #24]
   167d8:	mov	sl, r3
   167dc:	str	lr, [sp, #28]
   167e0:	sub	sp, sp, #8
   167e4:	bhi	16818 <_start@@Base+0x40e0>
   167e8:	sub	r1, r1, #1
   167ec:	cmp	r1, #7
   167f0:	addls	pc, pc, r1, lsl #2
   167f4:	b	168a4 <_start@@Base+0x416c>
   167f8:	b	16990 <_start@@Base+0x4258>
   167fc:	b	169b4 <_start@@Base+0x427c>
   16800:	b	169c0 <_start@@Base+0x4288>
   16804:	b	169cc <_start@@Base+0x4294>
   16808:	b	169d8 <_start@@Base+0x42a0>
   1680c:	b	1699c <_start@@Base+0x4264>
   16810:	b	169a8 <_start@@Base+0x4270>
   16814:	b	16818 <_start@@Base+0x40e0>
   16818:	ldrb	r0, [r4, #7]
   1681c:	mov	r1, #0
   16820:	mov	lr, r1
   16824:	ldrb	r6, [r4, #6]
   16828:	orr	r3, r0, r6, lsl #8
   1682c:	ldrb	r0, [r4, #5]
   16830:	orr	r3, r3, r0, lsl #16
   16834:	ldrb	r0, [r4, #4]
   16838:	orr	r3, r3, r0, lsl #24
   1683c:	ldrb	r0, [r4, #3]
   16840:	orr	lr, lr, r0
   16844:	ldrb	r0, [r4, #2]
   16848:	orr	lr, lr, r0, lsl #8
   1684c:	ldrb	r0, [r4, #1]
   16850:	orr	lr, lr, r0, lsl #16
   16854:	ldrb	r6, [r4]
   16858:	mov	r5, #0
   1685c:	add	r9, pc, #388	; 0x184
   16860:	ldrd	r8, [r9]
   16864:	orr	r1, lr, r6, lsl #24
   16868:	cmp	r1, r9
   1686c:	cmpeq	r3, r8
   16870:	bls	168c4 <_start@@Base+0x418c>
   16874:	add	r9, pc, #372	; 0x174
   16878:	ldrd	r8, [r9]
   1687c:	lsr	r6, r3, #16
   16880:	lsl	r6, r6, #16
   16884:	cmp	r1, r9
   16888:	cmpeq	r6, r8
   1688c:	beq	16950 <_start@@Base+0x4218>
   16890:	add	r9, pc, #352	; 0x160
   16894:	ldrd	r8, [r9]
   16898:	cmp	r1, r9
   1689c:	cmpeq	r5, r8
   168a0:	beq	16914 <_start@@Base+0x41dc>
   168a4:	mov	r0, r4
   168a8:	add	sp, sp, #8
   168ac:	ldrd	r4, [sp]
   168b0:	ldrd	r6, [sp, #8]
   168b4:	ldrd	r8, [sp, #16]
   168b8:	ldr	sl, [sp, #24]
   168bc:	add	sp, sp, #28
   168c0:	pop	{pc}		; (ldr pc, [sp], #4)
   168c4:	add	r9, pc, #308	; 0x134
   168c8:	ldrd	r8, [r9]
   168cc:	cmp	r1, r9
   168d0:	cmpeq	r5, r8
   168d4:	bne	168a4 <_start@@Base+0x416c>
   168d8:	ldr	r3, [sp, #44]	; 0x2c
   168dc:	mov	r0, ip
   168e0:	mov	r1, r4
   168e4:	str	r3, [sp]
   168e8:	mov	r3, #4
   168ec:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   168f0:	cmp	r4, r0
   168f4:	beq	168a4 <_start@@Base+0x416c>
   168f8:	ldr	r1, [sp, #40]	; 0x28
   168fc:	mov	r2, #3
   16900:	mov	r3, #0
   16904:	mov	r4, r0
   16908:	strd	r2, [r1]
   1690c:	str	r5, [sl]
   16910:	b	168a4 <_start@@Base+0x416c>
   16914:	ldr	r3, [sp, #44]	; 0x2c
   16918:	mov	r0, ip
   1691c:	mov	r1, r4
   16920:	str	r3, [sp]
   16924:	mov	r3, #4
   16928:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   1692c:	cmp	r4, r0
   16930:	beq	168a4 <_start@@Base+0x416c>
   16934:	add	r3, pc, #204	; 0xcc
   16938:	ldrd	r2, [r3]
   1693c:	mov	r4, r0
   16940:	ldr	r1, [sp, #40]	; 0x28
   16944:	strd	r2, [r1]
   16948:	str	r5, [sl]
   1694c:	b	168a4 <_start@@Base+0x416c>
   16950:	ldr	r3, [sp, #44]	; 0x2c
   16954:	mov	r0, ip
   16958:	mov	r1, r4
   1695c:	str	r3, [sp]
   16960:	mov	r3, #6
   16964:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   16968:	cmp	r4, r0
   1696c:	beq	168a4 <_start@@Base+0x416c>
   16970:	ldr	r2, [sp, #40]	; 0x28
   16974:	mvn	r6, #1
   16978:	mvn	r7, #0
   1697c:	mov	r3, #1
   16980:	mov	r4, r0
   16984:	strd	r6, [r2]
   16988:	str	r3, [sl]
   1698c:	b	168a4 <_start@@Base+0x416c>
   16990:	mov	r3, #0
   16994:	mov	lr, r3
   16998:	b	16854 <_start@@Base+0x411c>
   1699c:	mov	r3, #0
   169a0:	mov	lr, r3
   169a4:	b	1682c <_start@@Base+0x40f4>
   169a8:	mov	r0, #0
   169ac:	mov	r1, #0
   169b0:	b	16820 <_start@@Base+0x40e8>
   169b4:	mov	r3, #0
   169b8:	mov	lr, r3
   169bc:	b	1684c <_start@@Base+0x4114>
   169c0:	mov	r3, #0
   169c4:	mov	lr, r3
   169c8:	b	16844 <_start@@Base+0x410c>
   169cc:	mov	r3, #0
   169d0:	mov	lr, r3
   169d4:	b	1683c <_start@@Base+0x4104>
   169d8:	mov	r3, #0
   169dc:	mov	lr, r3
   169e0:	b	16834 <_start@@Base+0x40fc>
   169e4:	nop	{0}
   169e8:			; <UNDEFINED> instruction: 0xffffffff
   169ec:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   169f0:	strbvs	r0, [r7, #-0]!
   169f4:	stmdavs	r5!, {r1, r2, r3, r5, r6, fp, ip, sp, lr}^
   169f8:	andeq	r0, r0, r0
   169fc:	stmdavs	r5!, {r1, r4, r5, fp, ip, sp, lr}^
   16a00:	andeq	r0, r0, r0
   16a04:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   16a08:	cdpvc	14, 10, cr11, cr15, cr15, {5}
   16a0c:	andeq	r0, r0, r0
   16a10:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16a14:	mov	r4, r1
   16a18:	sub	r1, r2, r1
   16a1c:	cmp	r1, #8
   16a20:	mov	ip, r0
   16a24:	strd	r6, [sp, #8]
   16a28:	strd	r8, [sp, #16]
   16a2c:	str	sl, [sp, #24]
   16a30:	mov	sl, r3
   16a34:	str	lr, [sp, #28]
   16a38:	sub	sp, sp, #8
   16a3c:	bhi	16a70 <_start@@Base+0x4338>
   16a40:	sub	r1, r1, #1
   16a44:	cmp	r1, #7
   16a48:	addls	pc, pc, r1, lsl #2
   16a4c:	b	16afc <_start@@Base+0x43c4>
   16a50:	b	16bd0 <_start@@Base+0x4498>
   16a54:	b	16bf4 <_start@@Base+0x44bc>
   16a58:	b	16c00 <_start@@Base+0x44c8>
   16a5c:	b	16c0c <_start@@Base+0x44d4>
   16a60:	b	16c18 <_start@@Base+0x44e0>
   16a64:	b	16bdc <_start@@Base+0x44a4>
   16a68:	b	16be8 <_start@@Base+0x44b0>
   16a6c:	b	16a70 <_start@@Base+0x4338>
   16a70:	ldrb	r0, [r4, #7]
   16a74:	mov	r1, #0
   16a78:	mov	lr, r1
   16a7c:	ldrb	r6, [r4, #6]
   16a80:	orr	r3, r0, r6, lsl #8
   16a84:	ldrb	r0, [r4, #5]
   16a88:	orr	r3, r3, r0, lsl #16
   16a8c:	ldrb	r0, [r4, #4]
   16a90:	orr	r3, r3, r0, lsl #24
   16a94:	ldrb	r0, [r4, #3]
   16a98:	orr	lr, lr, r0
   16a9c:	ldrb	r0, [r4, #2]
   16aa0:	orr	lr, lr, r0, lsl #8
   16aa4:	ldrb	r0, [r4, #1]
   16aa8:	orr	lr, lr, r0, lsl #16
   16aac:	ldrb	r6, [r4]
   16ab0:	mov	r5, #0
   16ab4:	add	r9, pc, #364	; 0x16c
   16ab8:	ldrd	r8, [r9]
   16abc:	orr	r1, lr, r6, lsl #24
   16ac0:	cmp	r1, r9
   16ac4:	cmpeq	r3, r8
   16ac8:	bls	16b1c <_start@@Base+0x43e4>
   16acc:	add	r9, pc, #348	; 0x15c
   16ad0:	ldrd	r8, [r9]
   16ad4:	bic	r7, r1, #255	; 0xff
   16ad8:	cmp	r7, r9
   16adc:	cmpeq	r5, r8
   16ae0:	beq	16ba8 <_start@@Base+0x4470>
   16ae4:	add	r9, pc, #332	; 0x14c
   16ae8:	ldrd	r8, [r9]
   16aec:	and	r6, r3, #-16777216	; 0xff000000
   16af0:	cmp	r1, r9
   16af4:	cmpeq	r6, r8
   16af8:	beq	16b6c <_start@@Base+0x4434>
   16afc:	mov	r0, r4
   16b00:	add	sp, sp, #8
   16b04:	ldrd	r4, [sp]
   16b08:	ldrd	r6, [sp, #8]
   16b0c:	ldrd	r8, [sp, #16]
   16b10:	ldr	sl, [sp, #24]
   16b14:	add	sp, sp, #28
   16b18:	pop	{pc}		; (ldr pc, [sp], #4)
   16b1c:	add	r9, pc, #284	; 0x11c
   16b20:	ldrd	r8, [r9]
   16b24:	cmp	r1, r9
   16b28:	cmpeq	r5, r8
   16b2c:	bne	16afc <_start@@Base+0x43c4>
   16b30:	ldr	r3, [sp, #44]	; 0x2c
   16b34:	mov	r0, ip
   16b38:	mov	r1, r4
   16b3c:	str	r3, [sp]
   16b40:	mov	r3, #4
   16b44:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   16b48:	cmp	r4, r0
   16b4c:	movne	r2, #8
   16b50:	beq	16afc <_start@@Base+0x43c4>
   16b54:	ldr	r1, [sp, #40]	; 0x28
   16b58:	mov	r3, #0
   16b5c:	mov	r4, r0
   16b60:	strd	r2, [r1]
   16b64:	str	r5, [sl]
   16b68:	b	16afc <_start@@Base+0x43c4>
   16b6c:	ldr	r3, [sp, #44]	; 0x2c
   16b70:	mov	r0, ip
   16b74:	mov	r1, r4
   16b78:	str	r3, [sp]
   16b7c:	mov	r3, #5
   16b80:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   16b84:	cmp	r4, r0
   16b88:	beq	16afc <_start@@Base+0x43c4>
   16b8c:	ldr	r1, [sp, #40]	; 0x28
   16b90:	mov	r2, #2
   16b94:	mov	r3, #0
   16b98:	mov	r4, r0
   16b9c:	strd	r2, [r1]
   16ba0:	str	r5, [sl]
   16ba4:	b	16afc <_start@@Base+0x43c4>
   16ba8:	ldr	r3, [sp, #44]	; 0x2c
   16bac:	mov	r0, ip
   16bb0:	mov	r1, r4
   16bb4:	str	r3, [sp]
   16bb8:	mov	r3, #3
   16bbc:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   16bc0:	cmp	r4, r0
   16bc4:	beq	16afc <_start@@Base+0x43c4>
   16bc8:	mov	r2, #1
   16bcc:	b	16b54 <_start@@Base+0x441c>
   16bd0:	mov	r3, #0
   16bd4:	mov	lr, r3
   16bd8:	b	16aac <_start@@Base+0x4374>
   16bdc:	mov	r3, #0
   16be0:	mov	lr, r3
   16be4:	b	16a84 <_start@@Base+0x434c>
   16be8:	mov	r0, #0
   16bec:	mov	r1, #0
   16bf0:	b	16a78 <_start@@Base+0x4340>
   16bf4:	mov	r3, #0
   16bf8:	mov	lr, r3
   16bfc:	b	16aa4 <_start@@Base+0x436c>
   16c00:	mov	r3, #0
   16c04:	mov	lr, r3
   16c08:	b	16a9c <_start@@Base+0x4364>
   16c0c:	mov	r3, #0
   16c10:	mov	lr, r3
   16c14:	b	16a94 <_start@@Base+0x435c>
   16c18:	mov	r3, #0
   16c1c:	mov	lr, r3
   16c20:	b	16a8c <_start@@Base+0x4354>
   16c24:	nop	{0}
   16c28:	ldclvs	15, cr15, [pc, #1020]!	; 1702c <_start@@Base+0x48f4>
   16c2c:	ldrbmi	r6, [r2, -r5, ror #10]!
   16c30:	andeq	r0, r0, r0
   16c34:	rsbpl	r6, r5, #0, 8
   16c38:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   16c3c:	ldrbmi	r6, [r2, -r5, ror #10]!
   16c40:	andeq	r0, r0, r0
   16c44:	rsbmi	r7, ip, #423624704	; 0x19400000
   16c48:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16c4c:	mov	r4, r1
   16c50:	mov	r1, r2
   16c54:	strd	r6, [sp, #8]
   16c58:	mov	r5, r2
   16c5c:	strd	r8, [sp, #16]
   16c60:	mov	r8, r0
   16c64:	mov	r0, r4
   16c68:	strd	sl, [sp, #24]
   16c6c:	mov	sl, r3
   16c70:	str	lr, [sp, #32]
   16c74:	sub	sp, sp, #20
   16c78:	bl	12828 <_start@@Base+0xf0>
   16c7c:	add	r3, pc, #924	; 0x39c
   16c80:	ldrd	r2, [r3]
   16c84:	ldr	r7, [sp, #56]	; 0x38
   16c88:	ldr	fp, [sp, #60]	; 0x3c
   16c8c:	cmp	r1, r3
   16c90:	cmpeq	r0, r2
   16c94:	bhi	16d38 <_start@@Base+0x4600>
   16c98:	add	r3, pc, #904	; 0x388
   16c9c:	ldrd	r2, [r3]
   16ca0:	cmp	r1, r3
   16ca4:	cmpeq	r0, r2
   16ca8:	bne	16e78 <_start@@Base+0x4740>
   16cac:	mov	r1, r5
   16cb0:	add	r0, r4, #8
   16cb4:	bl	12828 <_start@@Base+0xf0>
   16cb8:	add	r3, pc, #880	; 0x370
   16cbc:	ldrd	r2, [r3]
   16cc0:	cmp	r1, r3
   16cc4:	cmpeq	r0, r2
   16cc8:	bne	16e78 <_start@@Base+0x4740>
   16ccc:	add	r6, r4, #16
   16cd0:	mov	r1, r5
   16cd4:	mov	r0, r6
   16cd8:	bl	12828 <_start@@Base+0xf0>
   16cdc:	and	r3, r1, #-16777216	; 0xff000000
   16ce0:	mov	r2, #0
   16ce4:	cmp	r3, #1912602624	; 0x72000000
   16ce8:	cmpeq	r2, #0
   16cec:	bne	16e78 <_start@@Base+0x4740>
   16cf0:	sub	r6, r5, r6
   16cf4:	cmp	r6, #1
   16cf8:	ble	16e78 <_start@@Base+0x4740>
   16cfc:	ldrb	r3, [r4, #17]
   16d00:	cmp	r3, #46	; 0x2e
   16d04:	bne	16e78 <_start@@Base+0x4740>
   16d08:	mov	r3, sl
   16d0c:	mov	r2, r5
   16d10:	add	r1, r4, #18
   16d14:	mov	r0, r8
   16d18:	add	sp, sp, #20
   16d1c:	ldrd	r4, [sp]
   16d20:	ldrd	r6, [sp, #8]
   16d24:	ldrd	r8, [sp, #16]
   16d28:	ldrd	sl, [sp, #24]
   16d2c:	ldr	lr, [sp, #32]
   16d30:	add	sp, sp, #36	; 0x24
   16d34:	b	1296c <_start@@Base+0x234>
   16d38:	add	r3, pc, #760	; 0x2f8
   16d3c:	ldrd	r2, [r3]
   16d40:	cmp	r1, r3
   16d44:	cmpeq	r0, r2
   16d48:	beq	16e98 <_start@@Base+0x4760>
   16d4c:	add	r3, pc, #748	; 0x2ec
   16d50:	ldrd	r2, [r3]
   16d54:	cmp	r1, r3
   16d58:	cmpeq	r0, r2
   16d5c:	bne	16e78 <_start@@Base+0x4740>
   16d60:	mov	r1, r5
   16d64:	add	r0, r4, #8
   16d68:	bl	12828 <_start@@Base+0xf0>
   16d6c:	add	r3, pc, #724	; 0x2d4
   16d70:	ldrd	r2, [r3]
   16d74:	cmp	r1, r3
   16d78:	cmpeq	r0, r2
   16d7c:	bne	16e78 <_start@@Base+0x4740>
   16d80:	mov	r1, r5
   16d84:	add	r0, r4, #16
   16d88:	bl	12828 <_start@@Base+0xf0>
   16d8c:	add	r3, pc, #700	; 0x2bc
   16d90:	ldrd	r2, [r3]
   16d94:	cmp	r1, r3
   16d98:	cmpeq	r0, r2
   16d9c:	bne	16e78 <_start@@Base+0x4740>
   16da0:	mov	r1, r5
   16da4:	add	r0, r4, #24
   16da8:	bl	12828 <_start@@Base+0xf0>
   16dac:	add	r3, pc, #676	; 0x2a4
   16db0:	ldrd	r2, [r3]
   16db4:	cmp	r1, r3
   16db8:	cmpeq	r0, r2
   16dbc:	bne	16e78 <_start@@Base+0x4740>
   16dc0:	add	r6, r4, #32
   16dc4:	mov	r1, r5
   16dc8:	mov	r0, r6
   16dcc:	mov	r9, #0
   16dd0:	bl	12828 <_start@@Base+0xf0>
   16dd4:	and	r3, r1, #-16777216	; 0xff000000
   16dd8:	cmp	r3, #1694498816	; 0x65000000
   16ddc:	cmpeq	r9, #0
   16de0:	bne	16e78 <_start@@Base+0x4740>
   16de4:	sub	r6, r5, r6
   16de8:	cmp	r6, #1
   16dec:	ble	16e78 <_start@@Base+0x4740>
   16df0:	ldrb	r3, [r4, #33]	; 0x21
   16df4:	cmp	r3, #46	; 0x2e
   16df8:	bne	16e78 <_start@@Base+0x4740>
   16dfc:	add	r6, r4, #34	; 0x22
   16e00:	mov	r1, r5
   16e04:	mov	r0, r6
   16e08:	bl	12828 <_start@@Base+0xf0>
   16e0c:	bic	r3, r1, #255	; 0xff
   16e10:	strd	r0, [sp, #8]
   16e14:	add	r1, pc, #580	; 0x244
   16e18:	ldrd	r0, [r1]
   16e1c:	cmp	r3, r1
   16e20:	cmpeq	r9, r0
   16e24:	beq	1739c <_start@@Base+0x4c64>
   16e28:	add	r3, pc, #568	; 0x238
   16e2c:	ldrd	r2, [r3]
   16e30:	ldrd	r0, [sp, #8]
   16e34:	cmp	r1, r3
   16e38:	cmpeq	r0, r2
   16e3c:	bne	16e74 <_start@@Base+0x473c>
   16e40:	add	r9, r4, #42	; 0x2a
   16e44:	mov	r1, r5
   16e48:	mov	r0, r9
   16e4c:	bl	12828 <_start@@Base+0xf0>
   16e50:	lsr	r3, r1, #16
   16e54:	mov	r1, #0
   16e58:	movt	r1, #24940	; 0x616c
   16e5c:	mov	r2, #0
   16e60:	mov	r0, #0
   16e64:	lsl	r3, r3, #16
   16e68:	cmp	r3, r1
   16e6c:	cmpeq	r2, r0
   16e70:	beq	173d4 <_start@@Base+0x4c9c>
   16e74:	mov	r4, r6
   16e78:	mov	r0, r4
   16e7c:	add	sp, sp, #20
   16e80:	ldrd	r4, [sp]
   16e84:	ldrd	r6, [sp, #8]
   16e88:	ldrd	r8, [sp, #16]
   16e8c:	ldrd	sl, [sp, #24]
   16e90:	add	sp, sp, #32
   16e94:	pop	{pc}		; (ldr pc, [sp], #4)
   16e98:	mov	r1, r5
   16e9c:	add	r0, r4, #8
   16ea0:	bl	12828 <_start@@Base+0xf0>
   16ea4:	add	r3, pc, #452	; 0x1c4
   16ea8:	ldrd	r2, [r3]
   16eac:	cmp	r1, r3
   16eb0:	cmpeq	r0, r2
   16eb4:	bhi	16f70 <_start@@Base+0x4838>
   16eb8:	add	r3, pc, #440	; 0x1b8
   16ebc:	ldrd	r2, [r3]
   16ec0:	cmp	r1, r3
   16ec4:	cmpeq	r0, r2
   16ec8:	bls	17158 <_start@@Base+0x4a20>
   16ecc:	add	r3, pc, #428	; 0x1ac
   16ed0:	ldrd	r2, [r3]
   16ed4:	cmp	r1, r3
   16ed8:	cmpeq	r0, r2
   16edc:	beq	17274 <_start@@Base+0x4b3c>
   16ee0:	add	r3, pc, #416	; 0x1a0
   16ee4:	ldrd	r2, [r3]
   16ee8:	cmp	r1, r3
   16eec:	cmpeq	r0, r2
   16ef0:	bne	16e78 <_start@@Base+0x4740>
   16ef4:	add	r9, r4, #16
   16ef8:	mov	r1, r5
   16efc:	mov	r0, r9
   16f00:	mov	r7, #0
   16f04:	movt	r7, #28527	; 0x6f6f
   16f08:	mov	r6, #0
   16f0c:	bl	12828 <_start@@Base+0xf0>
   16f10:	lsr	r3, r1, #16
   16f14:	mov	r2, #0
   16f18:	lsl	r3, r3, #16
   16f1c:	cmp	r3, r7
   16f20:	cmpeq	r2, r6
   16f24:	bne	16e78 <_start@@Base+0x4740>
   16f28:	sub	r9, r5, r9
   16f2c:	cmp	r9, #2
   16f30:	ble	16e78 <_start@@Base+0x4740>
   16f34:	ldrb	r3, [r4, #18]
   16f38:	cmp	r3, #46	; 0x2e
   16f3c:	bne	16e78 <_start@@Base+0x4740>
   16f40:	mov	r3, sl
   16f44:	mov	r2, r5
   16f48:	add	r1, r4, #19
   16f4c:	mov	r0, r8
   16f50:	add	sp, sp, #20
   16f54:	ldrd	r4, [sp]
   16f58:	ldrd	r6, [sp, #8]
   16f5c:	ldrd	r8, [sp, #16]
   16f60:	ldrd	sl, [sp, #24]
   16f64:	ldr	lr, [sp, #32]
   16f68:	add	sp, sp, #36	; 0x24
   16f6c:	b	16368 <_start@@Base+0x3c30>
   16f70:	add	r3, pc, #280	; 0x118
   16f74:	ldrd	r2, [r3]
   16f78:	cmp	r1, r3
   16f7c:	cmpeq	r0, r2
   16f80:	beq	170e8 <_start@@Base+0x49b0>
   16f84:	add	r3, pc, #268	; 0x10c
   16f88:	ldrd	r2, [r3]
   16f8c:	cmp	r1, r3
   16f90:	cmpeq	r0, r2
   16f94:	bhi	171e8 <_start@@Base+0x4ab0>
   16f98:	add	r3, pc, #256	; 0x100
   16f9c:	ldrd	r2, [r3]
   16fa0:	cmp	r1, r3
   16fa4:	cmpeq	r0, r2
   16fa8:	bne	16e78 <_start@@Base+0x4740>
   16fac:	add	r7, pc, #244	; 0xf4
   16fb0:	ldrd	r6, [r7]
   16fb4:	add	r9, r4, #16
   16fb8:	mov	r1, r5
   16fbc:	mov	r0, r9
   16fc0:	bl	12828 <_start@@Base+0xf0>
   16fc4:	bic	r2, r0, #255	; 0xff
   16fc8:	cmp	r1, r7
   16fcc:	cmpeq	r2, r6
   16fd0:	bne	16e78 <_start@@Base+0x4740>
   16fd4:	sub	r9, r5, r9
   16fd8:	cmp	r9, #7
   16fdc:	ble	16e78 <_start@@Base+0x4740>
   16fe0:	ldrb	r3, [r4, #23]
   16fe4:	cmp	r3, #46	; 0x2e
   16fe8:	bne	16e78 <_start@@Base+0x4740>
   16fec:	mov	r3, sl
   16ff0:	mov	r2, r5
   16ff4:	add	r1, r4, #24
   16ff8:	mov	r0, r8
   16ffc:	add	sp, sp, #20
   17000:	ldrd	r4, [sp]
   17004:	ldrd	r6, [sp, #8]
   17008:	ldrd	r8, [sp, #16]
   1700c:	ldrd	sl, [sp, #24]
   17010:	ldr	lr, [sp, #32]
   17014:	add	sp, sp, #36	; 0x24
   17018:	b	12f10 <_start@@Base+0x7d8>
   1701c:	nop	{0}
   17020:	stclvs	14, cr2, [r5, #-272]!	; 0xfffffef0
   17024:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   17028:	cmnvs	r3, lr, lsr #18
   1702c:			; <UNDEFINED> instruction: 0x46616e74
   17030:	cmnvs	r3, r5, ror #8
   17034:	cmnmi	r8, #-2147483620	; 0x8000001c
   17038:	stclvs	14, cr2, [r5, #-276]!	; 0xfffffeec
   1703c:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   17040:	stclvs	14, cr2, [r5, #-316]!	; 0xfffffec4
   17044:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   17048:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   1704c:	strbtvc	r6, [r8], #-1394	; 0xfffffa8e
   17050:	strvs	r4, [lr, #-1650]!	; 0xfffff98e
   17054:	cmnpl	r0, #-1073741800	; 0xc0000018
   17058:	cmnvs	ip, #100, 10	; 0x19000000
   1705c:	svcvs	0x006d496e
   17060:	andeq	r0, r0, r0
   17064:	strbtmi	r6, [pc], -r0, lsl #30
   17068:	strbvc	r6, [r4, #-1366]!	; 0xfffffaaa
   1706c:	stmdbmi	lr!, {r2, r3, r5, r6, r8, r9, sp, lr}^
   17070:	stclvs	14, cr2, [r5], #-412	; 0xfffffe64
   17074:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17078:	stclvs	14, cr2, [r5], #-264	; 0xfffffef8
   1707c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17080:	stclvs	14, cr2, [r5], #-268	; 0xfffffef4
   17084:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17088:	stclvs	14, cr2, [r5], #-280	; 0xfffffee8
   1708c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17090:	stclvs	14, cr2, [r5], #-416	; 0xfffffe60
   17094:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   17098:	stclvs	14, cr2, [r5], #-436	; 0xfffffe4c
   1709c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   170a0:	stclvs	14, cr2, [r5], #-420	; 0xfffffe5c
   170a4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   170a8:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   170ac:	cdpvs	15, 7, cr5, cr4, cr5, {3}
   170b0:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   170b4:	ldrbvs	r5, [r8, #-3941]!	; 0xfffff09b
   170b8:	stclvs	14, cr2, [r5], #-260	; 0xfffffefc
   170bc:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   170c0:	stclvs	14, cr2, [r5], #-440	; 0xfffffe48
   170c4:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   170c8:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   170cc:	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
   170d0:	andeq	r0, r0, r0
   170d4:	svcvs	0x006c6f72
   170d8:	rsbsvc	r7, r4, r5, ror #18
   170dc:	svcvs	0x0074656d
   170e0:	andeq	r0, r0, r0
   170e4:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   170e8:	sub	r7, pc, #64	; 0x40
   170ec:	ldrd	r6, [r7]
   170f0:	add	r9, r4, #16
   170f4:	mov	r1, r5
   170f8:	mov	r0, r9
   170fc:	bl	12828 <_start@@Base+0xf0>
   17100:	bic	r2, r0, #255	; 0xff
   17104:	cmp	r1, r7
   17108:	cmpeq	r2, r6
   1710c:	bne	16e78 <_start@@Base+0x4740>
   17110:	sub	r9, r5, r9
   17114:	cmp	r9, #7
   17118:	ble	16e78 <_start@@Base+0x4740>
   1711c:	ldrb	r3, [r4, #23]
   17120:	cmp	r3, #46	; 0x2e
   17124:	bne	16e78 <_start@@Base+0x4740>
   17128:	mov	r3, sl
   1712c:	mov	r2, r5
   17130:	add	r1, r4, #24
   17134:	mov	r0, r8
   17138:	add	sp, sp, #20
   1713c:	ldrd	r4, [sp]
   17140:	ldrd	r6, [sp, #8]
   17144:	ldrd	r8, [sp, #16]
   17148:	ldrd	sl, [sp, #24]
   1714c:	ldr	lr, [sp, #32]
   17150:	add	sp, sp, #36	; 0x24
   17154:	b	167b8 <_start@@Base+0x4080>
   17158:	sub	r3, pc, #168	; 0xa8
   1715c:	ldrd	r2, [r3]
   17160:	cmp	r1, r3
   17164:	cmpeq	r0, r2
   17168:	bne	16e78 <_start@@Base+0x4740>
   1716c:	add	r9, r4, #16
   17170:	mov	r1, r5
   17174:	mov	r0, r9
   17178:	mov	r7, #0
   1717c:	movt	r7, #28281	; 0x6e79
   17180:	mov	r6, #0
   17184:	bl	12828 <_start@@Base+0xf0>
   17188:	lsr	r3, r1, #16
   1718c:	mov	r2, #0
   17190:	lsl	r3, r3, #16
   17194:	cmp	r3, r7
   17198:	cmpeq	r2, r6
   1719c:	bne	16e78 <_start@@Base+0x4740>
   171a0:	sub	r9, r5, r9
   171a4:	cmp	r9, #2
   171a8:	ble	16e78 <_start@@Base+0x4740>
   171ac:	ldrb	r3, [r4, #18]
   171b0:	cmp	r3, #46	; 0x2e
   171b4:	bne	16e78 <_start@@Base+0x4740>
   171b8:	mov	r3, sl
   171bc:	mov	r2, r5
   171c0:	add	r1, r4, #19
   171c4:	mov	r0, r8
   171c8:	add	sp, sp, #20
   171cc:	ldrd	r4, [sp]
   171d0:	ldrd	r6, [sp, #8]
   171d4:	ldrd	r8, [sp, #16]
   171d8:	ldrd	sl, [sp, #24]
   171dc:	ldr	lr, [sp, #32]
   171e0:	add	sp, sp, #36	; 0x24
   171e4:	b	12c88 <_start@@Base+0x550>
   171e8:	sub	r3, pc, #304	; 0x130
   171ec:	ldrd	r2, [r3]
   171f0:	cmp	r1, r3
   171f4:	cmpeq	r0, r2
   171f8:	bne	16e78 <_start@@Base+0x4740>
   171fc:	add	r9, r4, #16
   17200:	mov	r1, r5
   17204:	mov	r0, r9
   17208:	bl	12828 <_start@@Base+0xf0>
   1720c:	bic	r2, r0, #255	; 0xff
   17210:	mov	r3, r1
   17214:	strd	r0, [sp, #8]
   17218:	sub	r1, pc, #344	; 0x158
   1721c:	ldrd	r0, [r1]
   17220:	cmp	r3, r1
   17224:	cmpeq	r2, r0
   17228:	bne	172e4 <_start@@Base+0x4bac>
   1722c:	sub	r9, r5, r9
   17230:	cmp	r9, #7
   17234:	ble	16e78 <_start@@Base+0x4740>
   17238:	ldrb	r3, [r4, #23]
   1723c:	cmp	r3, #46	; 0x2e
   17240:	bne	16e78 <_start@@Base+0x4740>
   17244:	mov	r3, sl
   17248:	mov	r2, r5
   1724c:	add	r1, r4, #24
   17250:	mov	r0, r8
   17254:	add	sp, sp, #20
   17258:	ldrd	r4, [sp]
   1725c:	ldrd	r6, [sp, #8]
   17260:	ldrd	r8, [sp, #16]
   17264:	ldrd	sl, [sp, #24]
   17268:	ldr	lr, [sp, #32]
   1726c:	add	sp, sp, #36	; 0x24
   17270:	b	16590 <_start@@Base+0x3e58>
   17274:	sub	r7, pc, #428	; 0x1ac
   17278:	ldrd	r6, [r7]
   1727c:	add	r9, r4, #16
   17280:	mov	r1, r5
   17284:	mov	r0, r9
   17288:	bl	12828 <_start@@Base+0xf0>
   1728c:	mov	r2, #0
   17290:	cmp	r1, r7
   17294:	cmpeq	r2, r6
   17298:	bne	16e78 <_start@@Base+0x4740>
   1729c:	sub	r9, r5, r9
   172a0:	cmp	r9, #4
   172a4:	ble	16e78 <_start@@Base+0x4740>
   172a8:	ldrb	r3, [r4, #20]
   172ac:	cmp	r3, #46	; 0x2e
   172b0:	bne	16e78 <_start@@Base+0x4740>
   172b4:	mov	r3, sl
   172b8:	mov	r2, r5
   172bc:	add	r1, r4, #21
   172c0:	mov	r0, r8
   172c4:	add	sp, sp, #20
   172c8:	ldrd	r4, [sp]
   172cc:	ldrd	r6, [sp, #8]
   172d0:	ldrd	r8, [sp, #16]
   172d4:	ldrd	sl, [sp, #24]
   172d8:	ldr	lr, [sp, #32]
   172dc:	add	sp, sp, #36	; 0x24
   172e0:	b	16a10 <_start@@Base+0x42d8>
   172e4:	sub	r3, pc, #532	; 0x214
   172e8:	ldrd	r2, [r3]
   172ec:	ldrd	r0, [sp, #8]
   172f0:	cmp	r1, r3
   172f4:	cmpeq	r0, r2
   172f8:	bne	16e78 <_start@@Base+0x4740>
   172fc:	add	r9, r4, #24
   17300:	mov	r1, r5
   17304:	mov	r0, r9
   17308:	bl	12828 <_start@@Base+0xf0>
   1730c:	bic	r3, r1, #255	; 0xff
   17310:	sub	r1, pc, #568	; 0x238
   17314:	ldrd	r0, [r1]
   17318:	mov	r2, #0
   1731c:	cmp	r3, r1
   17320:	cmpeq	r2, r0
   17324:	bne	16e78 <_start@@Base+0x4740>
   17328:	sub	r9, r5, r9
   1732c:	cmp	r9, #3
   17330:	ble	16e78 <_start@@Base+0x4740>
   17334:	ldrb	r3, [r4, #27]
   17338:	cmp	r3, #46	; 0x2e
   1733c:	bne	16e78 <_start@@Base+0x4740>
   17340:	add	r6, r4, #28
   17344:	mov	r1, r5
   17348:	mov	r0, r6
   1734c:	mov	r9, #0
   17350:	bl	12828 <_start@@Base+0xf0>
   17354:	and	r3, r1, #-16777216	; 0xff000000
   17358:	cmp	r3, #2013265920	; 0x78000000
   1735c:	cmpeq	r9, #0
   17360:	bne	16e74 <_start@@Base+0x473c>
   17364:	mov	r2, r5
   17368:	mov	r0, r8
   1736c:	str	fp, [sp]
   17370:	mov	r3, #1
   17374:	mov	r1, r6
   17378:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   1737c:	cmp	r6, r0
   17380:	mov	r4, r0
   17384:	beq	16e78 <_start@@Base+0x4740>
   17388:	mov	r2, #0
   1738c:	mov	r3, #0
   17390:	strd	r2, [r7]
   17394:	str	r9, [sl]
   17398:	b	16e78 <_start@@Base+0x4740>
   1739c:	mov	r2, r5
   173a0:	mov	r0, r8
   173a4:	str	fp, [sp]
   173a8:	mov	r3, #3
   173ac:	mov	r1, r6
   173b0:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   173b4:	cmp	r6, r0
   173b8:	mov	r4, r0
   173bc:	beq	16e78 <_start@@Base+0x4740>
   173c0:	mov	r0, #17
   173c4:	mov	r1, #0
   173c8:	strd	r0, [r7]
   173cc:	str	r9, [sl]
   173d0:	b	16e78 <_start@@Base+0x4740>
   173d4:	mov	r2, r5
   173d8:	mov	r0, r8
   173dc:	str	fp, [sp]
   173e0:	mov	r3, #2
   173e4:	mov	r1, r9
   173e8:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   173ec:	cmp	r9, r0
   173f0:	mov	r4, r0
   173f4:	beq	16e74 <_start@@Base+0x473c>
   173f8:	mov	r3, #0
   173fc:	mov	r2, #0
   17400:	strd	r2, [r7]
   17404:	mov	r3, #0
   17408:	str	r3, [sl]
   1740c:	b	16e78 <_start@@Base+0x4740>
   17410:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17414:	mov	r4, r1
   17418:	mov	r5, r0
   1741c:	mov	r1, r2
   17420:	mov	r0, r4
   17424:	strd	r6, [sp, #8]
   17428:	strd	r8, [sp, #16]
   1742c:	strd	sl, [sp, #24]
   17430:	mov	sl, r2
   17434:	mov	fp, r3
   17438:	str	lr, [sp, #32]
   1743c:	sub	sp, sp, #20
   17440:	bl	12828 <_start@@Base+0xf0>
   17444:	add	r3, pc, #876	; 0x36c
   17448:	ldrd	r2, [r3]
   1744c:	ldr	r9, [sp, #56]	; 0x38
   17450:	ldr	r8, [sp, #60]	; 0x3c
   17454:	cmp	r1, r3
   17458:	cmpeq	r0, r2
   1745c:	bhi	1753c <_start@@Base+0x4e04>
   17460:	add	r3, pc, #856	; 0x358
   17464:	ldrd	r2, [r3]
   17468:	mov	r6, #0
   1746c:	bic	r7, r1, #255	; 0xff
   17470:	cmp	r1, r3
   17474:	cmpeq	r0, r2
   17478:	bhi	174c8 <_start@@Base+0x4d90>
   1747c:	add	r3, pc, #836	; 0x344
   17480:	ldrd	r2, [r3]
   17484:	cmp	r7, r3
   17488:	cmpeq	r6, r2
   1748c:	bne	174a8 <_start@@Base+0x4d70>
   17490:	sub	r3, sl, r4
   17494:	cmp	r3, #3
   17498:	ble	174a8 <_start@@Base+0x4d70>
   1749c:	ldrb	r3, [r4, #3]
   174a0:	cmp	r3, #46	; 0x2e
   174a4:	beq	17704 <_start@@Base+0x4fcc>
   174a8:	mov	r0, r4
   174ac:	add	sp, sp, #20
   174b0:	ldrd	r4, [sp]
   174b4:	ldrd	r6, [sp, #8]
   174b8:	ldrd	r8, [sp, #16]
   174bc:	ldrd	sl, [sp, #24]
   174c0:	add	sp, sp, #32
   174c4:	pop	{pc}		; (ldr pc, [sp], #4)
   174c8:	add	r3, pc, #768	; 0x300
   174cc:	ldrd	r2, [r3]
   174d0:	cmp	r7, r3
   174d4:	cmpeq	r6, r2
   174d8:	beq	176bc <_start@@Base+0x4f84>
   174dc:	add	r9, pc, #756	; 0x2f4
   174e0:	ldrd	r8, [r9]
   174e4:	and	r6, r0, #-16777216	; 0xff000000
   174e8:	cmp	r1, r9
   174ec:	cmpeq	r6, r8
   174f0:	bne	174a8 <_start@@Base+0x4d70>
   174f4:	sub	r3, sl, r4
   174f8:	cmp	r3, #5
   174fc:	ble	174a8 <_start@@Base+0x4d70>
   17500:	ldrb	r3, [r4, #5]
   17504:	cmp	r3, #46	; 0x2e
   17508:	bne	174a8 <_start@@Base+0x4d70>
   1750c:	mov	r3, fp
   17510:	mov	r2, sl
   17514:	add	r1, r4, #6
   17518:	mov	r0, r5
   1751c:	add	sp, sp, #20
   17520:	ldrd	r4, [sp]
   17524:	ldrd	r6, [sp, #8]
   17528:	ldrd	r8, [sp, #16]
   1752c:	ldrd	sl, [sp, #24]
   17530:	ldr	lr, [sp, #32]
   17534:	add	sp, sp, #36	; 0x24
   17538:	b	16a10 <_start@@Base+0x42d8>
   1753c:	add	r3, pc, #668	; 0x29c
   17540:	ldrd	r2, [r3]
   17544:	cmp	r1, r3
   17548:	cmpeq	r0, r2
   1754c:	bhi	175ac <_start@@Base+0x4e74>
   17550:	add	r3, pc, #656	; 0x290
   17554:	ldrd	r2, [r3]
   17558:	cmp	r1, r3
   1755c:	cmpeq	r0, r2
   17560:	bne	174a8 <_start@@Base+0x4d70>
   17564:	sub	r3, sl, r4
   17568:	cmp	r3, #8
   1756c:	ble	174a8 <_start@@Base+0x4d70>
   17570:	ldrb	r3, [r4, #8]
   17574:	cmp	r3, #46	; 0x2e
   17578:	bne	174a8 <_start@@Base+0x4d70>
   1757c:	mov	r3, fp
   17580:	mov	r2, sl
   17584:	add	r1, r4, #9
   17588:	mov	r0, r5
   1758c:	add	sp, sp, #20
   17590:	ldrd	r4, [sp]
   17594:	ldrd	r6, [sp, #8]
   17598:	ldrd	r8, [sp, #16]
   1759c:	ldrd	sl, [sp, #24]
   175a0:	ldr	lr, [sp, #32]
   175a4:	add	sp, sp, #36	; 0x24
   175a8:	b	167b8 <_start@@Base+0x4080>
   175ac:	add	r3, pc, #572	; 0x23c
   175b0:	ldrd	r2, [r3]
   175b4:	cmp	r1, r3
   175b8:	cmpeq	r0, r2
   175bc:	bhi	1761c <_start@@Base+0x4ee4>
   175c0:	add	r3, pc, #560	; 0x230
   175c4:	ldrd	r2, [r3]
   175c8:	cmp	r1, r3
   175cc:	cmpeq	r0, r2
   175d0:	bne	174a8 <_start@@Base+0x4d70>
   175d4:	sub	r3, sl, r4
   175d8:	cmp	r3, #8
   175dc:	ble	174a8 <_start@@Base+0x4d70>
   175e0:	ldrb	r3, [r4, #8]
   175e4:	cmp	r3, #46	; 0x2e
   175e8:	bne	174a8 <_start@@Base+0x4d70>
   175ec:	mov	r3, fp
   175f0:	mov	r2, sl
   175f4:	add	r1, r4, #9
   175f8:	mov	r0, r5
   175fc:	add	sp, sp, #20
   17600:	ldrd	r4, [sp]
   17604:	ldrd	r6, [sp, #8]
   17608:	ldrd	r8, [sp, #16]
   1760c:	ldrd	sl, [sp, #24]
   17610:	ldr	lr, [sp, #32]
   17614:	add	sp, sp, #36	; 0x24
   17618:	b	12f10 <_start@@Base+0x7d8>
   1761c:	add	r3, pc, #476	; 0x1dc
   17620:	ldrd	r2, [r3]
   17624:	cmp	r1, r3
   17628:	cmpeq	r0, r2
   1762c:	beq	17734 <_start@@Base+0x4ffc>
   17630:	add	r3, pc, #464	; 0x1d0
   17634:	ldrd	r2, [r3]
   17638:	cmp	r1, r3
   1763c:	cmpeq	r0, r2
   17640:	bne	174a8 <_start@@Base+0x4d70>
   17644:	add	r6, r4, #8
   17648:	mov	r1, sl
   1764c:	mov	r0, r6
   17650:	mov	r7, #0
   17654:	bl	12828 <_start@@Base+0xf0>
   17658:	mov	r3, r1
   1765c:	add	r1, pc, #428	; 0x1ac
   17660:	ldrd	r0, [r1]
   17664:	cmp	r3, r1
   17668:	cmpeq	r7, r0
   1766c:	bne	174a8 <_start@@Base+0x4d70>
   17670:	sub	r3, sl, r6
   17674:	cmp	r3, #4
   17678:	ble	174a8 <_start@@Base+0x4d70>
   1767c:	ldrb	r3, [r4, #12]
   17680:	cmp	r3, #46	; 0x2e
   17684:	bne	174a8 <_start@@Base+0x4d70>
   17688:	add	r3, r4, #13
   1768c:	cmp	r6, r3
   17690:	str	r3, [sp, #12]
   17694:	beq	174a8 <_start@@Base+0x4d70>
   17698:	mov	r0, r3
   1769c:	mov	r1, sl
   176a0:	bl	12828 <_start@@Base+0xf0>
   176a4:	and	r3, r1, #-16777216	; 0xff000000
   176a8:	cmp	r3, #2013265920	; 0x78000000
   176ac:	cmpeq	r7, #0
   176b0:	beq	1777c <_start@@Base+0x5044>
   176b4:	ldr	r4, [sp, #12]
   176b8:	b	174a8 <_start@@Base+0x4d70>
   176bc:	sub	r3, sl, r4
   176c0:	cmp	r3, #3
   176c4:	ble	174a8 <_start@@Base+0x4d70>
   176c8:	ldrb	r3, [r4, #3]
   176cc:	cmp	r3, #46	; 0x2e
   176d0:	bne	174a8 <_start@@Base+0x4d70>
   176d4:	mov	r3, fp
   176d8:	mov	r2, sl
   176dc:	add	r1, r4, #4
   176e0:	mov	r0, r5
   176e4:	add	sp, sp, #20
   176e8:	ldrd	r4, [sp]
   176ec:	ldrd	r6, [sp, #8]
   176f0:	ldrd	r8, [sp, #16]
   176f4:	ldrd	sl, [sp, #24]
   176f8:	ldr	lr, [sp, #32]
   176fc:	add	sp, sp, #36	; 0x24
   17700:	b	16368 <_start@@Base+0x3c30>
   17704:	mov	r3, fp
   17708:	mov	r2, sl
   1770c:	add	r1, r4, #4
   17710:	mov	r0, r5
   17714:	add	sp, sp, #20
   17718:	ldrd	r4, [sp]
   1771c:	ldrd	r6, [sp, #8]
   17720:	ldrd	r8, [sp, #16]
   17724:	ldrd	sl, [sp, #24]
   17728:	ldr	lr, [sp, #32]
   1772c:	add	sp, sp, #36	; 0x24
   17730:	b	12c88 <_start@@Base+0x550>
   17734:	sub	r3, sl, r4
   17738:	cmp	r3, #8
   1773c:	ble	174a8 <_start@@Base+0x4d70>
   17740:	ldrb	r3, [r4, #8]
   17744:	cmp	r3, #46	; 0x2e
   17748:	bne	174a8 <_start@@Base+0x4d70>
   1774c:	mov	r3, fp
   17750:	mov	r2, sl
   17754:	add	r1, r4, #9
   17758:	mov	r0, r5
   1775c:	add	sp, sp, #20
   17760:	ldrd	r4, [sp]
   17764:	ldrd	r6, [sp, #8]
   17768:	ldrd	r8, [sp, #16]
   1776c:	ldrd	sl, [sp, #24]
   17770:	ldr	lr, [sp, #32]
   17774:	add	sp, sp, #36	; 0x24
   17778:	b	16590 <_start@@Base+0x3e58>
   1777c:	mov	r0, r5
   17780:	ldr	r5, [sp, #12]
   17784:	mov	r2, sl
   17788:	mov	r3, #1
   1778c:	str	r8, [sp]
   17790:	mov	r1, r5
   17794:	bl	27e2c <flatcc_json_parser_match_constant@@Base>
   17798:	cmp	r5, r0
   1779c:	mov	r4, r0
   177a0:	beq	174a8 <_start@@Base+0x4d70>
   177a4:	mov	r0, #0
   177a8:	mov	r1, #0
   177ac:	strd	r0, [r9]
   177b0:	str	r7, [fp]
   177b4:	b	174a8 <_start@@Base+0x4d70>
   177b8:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   177bc:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   177c0:	ldrshvc	pc, [pc, #255]	; 178c7 <_start@@Base+0x518f>	; <UNPREDICTABLE>
   177c4:	cmnmi	pc, #28416	; 0x6f00
   177c8:	andeq	r0, r0, r0
   177cc:	cmnmi	lr, r0, lsl #18
   177d0:	andeq	r0, r0, r0
   177d4:	strbtmi	r6, [pc], -r0, lsl #30
   177d8:	andvc	r0, r0, #0
   177dc:	cmnmi	pc, #28416	; 0x6f00
   177e0:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   177e4:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   177e8:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   177ec:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   177f0:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   177f4:	mcrvs	7, 3, r6, cr5, cr15, {2}
   177f8:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   177fc:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   17800:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   17804:	mcrvs	7, 3, r6, cr5, cr15, {2}
   17808:	cfldrdvs	mvd7, [r0, #-484]!	; 0xfffffe1c
   1780c:	cdpvs	4, 6, cr7, cr15, cr5, {3}
   17810:	andeq	r0, r0, r0
   17814:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   17818:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1781c:	mov	r4, r1
   17820:	mov	r5, r2
   17824:	strd	r6, [sp, #8]
   17828:	mov	r7, r3
   1782c:	mov	r3, #0
   17830:	mov	r6, r0
   17834:	mov	r1, r3
   17838:	strd	r8, [sp, #16]
   1783c:	str	sl, [sp, #24]
   17840:	str	lr, [sp, #28]
   17844:	ldr	r0, [r0]
   17848:	str	r3, [r7]
   1784c:	bl	23210 <flatcc_builder_start_table@@Base>
   17850:	cmp	r0, #0
   17854:	beq	17884 <_start@@Base+0x514c>
   17858:	mov	r2, r5
   1785c:	mov	r1, r4
   17860:	ldrd	r4, [sp]
   17864:	mov	r0, r6
   17868:	mov	r3, #33	; 0x21
   1786c:	ldrd	r6, [sp, #8]
   17870:	ldrd	r8, [sp, #16]
   17874:	ldr	sl, [sp, #24]
   17878:	ldr	lr, [sp, #28]
   1787c:	add	sp, sp, #32
   17880:	b	270b8 <flatcc_json_parser_set_error@@Base>
   17884:	cmp	r4, r5
   17888:	beq	17898 <_start@@Base+0x5160>
   1788c:	ldrb	r3, [r4]
   17890:	cmp	r3, #123	; 0x7b
   17894:	beq	178ec <_start@@Base+0x51b4>
   17898:	mov	r1, r4
   1789c:	mov	r3, #21
   178a0:	mov	r2, r5
   178a4:	mov	r0, r6
   178a8:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   178ac:	mov	r4, r0
   178b0:	ldr	r3, [r6, #24]
   178b4:	cmp	r3, #0
   178b8:	bne	17858 <_start@@Base+0x5120>
   178bc:	ldr	r0, [r6]
   178c0:	bl	23bf4 <flatcc_builder_end_table@@Base>
   178c4:	cmp	r0, #0
   178c8:	str	r0, [r7]
   178cc:	beq	17858 <_start@@Base+0x5120>
   178d0:	mov	r0, r4
   178d4:	ldrd	r4, [sp]
   178d8:	ldrd	r6, [sp, #8]
   178dc:	ldrd	r8, [sp, #16]
   178e0:	ldr	sl, [sp, #24]
   178e4:	add	sp, sp, #28
   178e8:	pop	{pc}		; (ldr pc, [sp], #4)
   178ec:	add	r1, r4, #1
   178f0:	sub	r3, r5, r1
   178f4:	cmp	r3, #1
   178f8:	ble	1790c <_start@@Base+0x51d4>
   178fc:	ldrb	r3, [r4, #1]
   17900:	cmp	r3, #32
   17904:	bhi	1791c <_start@@Base+0x51e4>
   17908:	beq	17aec <_start@@Base+0x53b4>
   1790c:	mov	r2, r5
   17910:	mov	r0, r6
   17914:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   17918:	mov	r1, r0
   1791c:	cmp	r5, r1
   17920:	beq	17930 <_start@@Base+0x51f8>
   17924:	ldrb	r3, [r1]
   17928:	cmp	r3, #125	; 0x7d
   1792c:	beq	17b14 <_start@@Base+0x53dc>
   17930:	mov	r8, #1
   17934:	mov	r9, #0
   17938:	cmp	r5, r1
   1793c:	beq	17960 <_start@@Base+0x5228>
   17940:	ldrb	r3, [r1]
   17944:	cmp	r3, #34	; 0x22
   17948:	addeq	r1, r1, #1
   1794c:	streq	r9, [r6, #12]
   17950:	beq	17960 <_start@@Base+0x5228>
   17954:	cmp	r3, #46	; 0x2e
   17958:	strne	r8, [r6, #12]
   1795c:	beq	17a90 <_start@@Base+0x5358>
   17960:	mov	r2, r5
   17964:	mov	r0, r6
   17968:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1796c:	sub	r3, r5, r0
   17970:	mov	r4, r0
   17974:	cmp	r3, #1
   17978:	ble	1798c <_start@@Base+0x5254>
   1797c:	ldrb	r3, [r0]
   17980:	cmp	r3, #32
   17984:	bhi	179a0 <_start@@Base+0x5268>
   17988:	beq	17a10 <_start@@Base+0x52d8>
   1798c:	mov	r1, r4
   17990:	mov	r2, r5
   17994:	mov	r0, r6
   17998:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   1799c:	mov	r4, r0
   179a0:	cmp	r5, r4
   179a4:	beq	178b0 <_start@@Base+0x5178>
   179a8:	ldrb	r3, [r4]
   179ac:	cmp	r3, #44	; 0x2c
   179b0:	beq	17a24 <_start@@Base+0x52ec>
   179b4:	cmp	r3, #125	; 0x7d
   179b8:	beq	179d8 <_start@@Base+0x52a0>
   179bc:	mov	r1, r4
   179c0:	mov	r3, #10
   179c4:	mov	r2, r5
   179c8:	mov	r0, r6
   179cc:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   179d0:	mov	r4, r0
   179d4:	b	178b0 <_start@@Base+0x5178>
   179d8:	add	r1, r4, #1
   179dc:	sub	r3, r5, r1
   179e0:	cmp	r3, #1
   179e4:	ble	179fc <_start@@Base+0x52c4>
   179e8:	ldrb	r3, [r4, #1]
   179ec:	cmp	r3, #32
   179f0:	movhi	r4, r1
   179f4:	bhi	178b0 <_start@@Base+0x5178>
   179f8:	beq	17aa8 <_start@@Base+0x5370>
   179fc:	mov	r2, r5
   17a00:	mov	r0, r6
   17a04:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   17a08:	mov	r4, r0
   17a0c:	b	178b0 <_start@@Base+0x5178>
   17a10:	ldrb	r3, [r0, #1]
   17a14:	cmp	r3, #32
   17a18:	addhi	r4, r0, #1
   17a1c:	bls	1798c <_start@@Base+0x5254>
   17a20:	b	179a0 <_start@@Base+0x5268>
   17a24:	add	r1, r4, #1
   17a28:	sub	r3, r5, r1
   17a2c:	cmp	r3, #1
   17a30:	ble	17a44 <_start@@Base+0x530c>
   17a34:	ldrb	r3, [r4, #1]
   17a38:	cmp	r3, #32
   17a3c:	bhi	17a54 <_start@@Base+0x531c>
   17a40:	beq	17abc <_start@@Base+0x5384>
   17a44:	mov	r2, r5
   17a48:	mov	r0, r6
   17a4c:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   17a50:	mov	r1, r0
   17a54:	cmp	r5, r1
   17a58:	beq	17ad0 <_start@@Base+0x5398>
   17a5c:	ldrb	r3, [r1]
   17a60:	cmp	r3, #125	; 0x7d
   17a64:	bne	17938 <_start@@Base+0x5200>
   17a68:	add	r4, r1, #1
   17a6c:	sub	r3, r5, r4
   17a70:	cmp	r3, #1
   17a74:	ble	17a88 <_start@@Base+0x5350>
   17a78:	ldrb	r3, [r1, #1]
   17a7c:	cmp	r3, #32
   17a80:	bhi	178b0 <_start@@Base+0x5178>
   17a84:	beq	17b00 <_start@@Base+0x53c8>
   17a88:	mov	r1, r4
   17a8c:	b	179fc <_start@@Base+0x52c4>
   17a90:	mov	r3, #5
   17a94:	mov	r2, r5
   17a98:	mov	r0, r6
   17a9c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   17aa0:	mov	r1, r0
   17aa4:	b	17960 <_start@@Base+0x5228>
   17aa8:	ldrb	r3, [r4, #2]
   17aac:	cmp	r3, #32
   17ab0:	addhi	r4, r4, #2
   17ab4:	bls	179fc <_start@@Base+0x52c4>
   17ab8:	b	178b0 <_start@@Base+0x5178>
   17abc:	ldrb	r3, [r4, #2]
   17ac0:	cmp	r3, #32
   17ac4:	addhi	r1, r4, #2
   17ac8:	bls	17a44 <_start@@Base+0x530c>
   17acc:	b	17a54 <_start@@Base+0x531c>
   17ad0:	mov	r3, #10
   17ad4:	mov	r2, r5
   17ad8:	mov	r1, r5
   17adc:	mov	r0, r6
   17ae0:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   17ae4:	mov	r4, r0
   17ae8:	b	178b0 <_start@@Base+0x5178>
   17aec:	ldrb	r3, [r4, #2]
   17af0:	cmp	r3, #32
   17af4:	addhi	r1, r4, #2
   17af8:	bls	1790c <_start@@Base+0x51d4>
   17afc:	b	1791c <_start@@Base+0x51e4>
   17b00:	ldrb	r3, [r1, #2]
   17b04:	cmp	r3, #32
   17b08:	addhi	r4, r1, #2
   17b0c:	bls	17a88 <_start@@Base+0x5350>
   17b10:	b	178b0 <_start@@Base+0x5178>
   17b14:	add	r1, r1, #1
   17b18:	mov	r2, r5
   17b1c:	mov	r0, r6
   17b20:	bl	13118 <_start@@Base+0x9e0>
   17b24:	mov	r4, r0
   17b28:	b	178b0 <_start@@Base+0x5178>
   17b2c:	strd	r4, [sp, #-16]!
   17b30:	add	ip, r1, r3
   17b34:	ldr	r4, [r0, #12]
   17b38:	str	r6, [sp, #8]
   17b3c:	str	lr, [sp, #12]
   17b40:	ldrb	lr, [r1, r3]
   17b44:	cmp	r4, #0
   17b48:	beq	17be8 <_start@@Base+0x54b0>
   17b4c:	cmp	lr, #58	; 0x3a
   17b50:	cmpne	lr, #32
   17b54:	movls	lr, #0
   17b58:	movhi	lr, #1
   17b5c:	strls	lr, [r0, #12]
   17b60:	bhi	17bd4 <_start@@Base+0x549c>
   17b64:	sub	r3, r2, ip
   17b68:	mov	r5, r2
   17b6c:	cmp	r3, #1
   17b70:	mov	r4, r0
   17b74:	ble	17b88 <_start@@Base+0x5450>
   17b78:	ldrb	r3, [ip]
   17b7c:	cmp	r3, #32
   17b80:	bhi	17b9c <_start@@Base+0x5464>
   17b84:	beq	17bfc <_start@@Base+0x54c4>
   17b88:	mov	r1, ip
   17b8c:	mov	r2, r5
   17b90:	mov	r0, r4
   17b94:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   17b98:	mov	ip, r0
   17b9c:	cmp	r5, ip
   17ba0:	beq	17bb0 <_start@@Base+0x5478>
   17ba4:	ldrb	r3, [ip]
   17ba8:	cmp	r3, #58	; 0x3a
   17bac:	beq	17c10 <_start@@Base+0x54d8>
   17bb0:	mov	r2, r5
   17bb4:	mov	r0, r4
   17bb8:	ldrd	r4, [sp]
   17bbc:	mov	r1, ip
   17bc0:	mov	r3, #4
   17bc4:	ldr	r6, [sp, #8]
   17bc8:	ldr	lr, [sp, #12]
   17bcc:	add	sp, sp, #16
   17bd0:	b	270b8 <flatcc_json_parser_set_error@@Base>
   17bd4:	mov	r0, r1
   17bd8:	ldrd	r4, [sp]
   17bdc:	ldr	r6, [sp, #8]
   17be0:	add	sp, sp, #12
   17be4:	pop	{pc}		; (ldr pc, [sp], #4)
   17be8:	cmp	lr, #34	; 0x22
   17bec:	bne	17bd4 <_start@@Base+0x549c>
   17bf0:	add	r3, r3, #1
   17bf4:	add	ip, r1, r3
   17bf8:	b	17b64 <_start@@Base+0x542c>
   17bfc:	ldrb	r3, [ip, #1]
   17c00:	cmp	r3, #32
   17c04:	addhi	ip, ip, #1
   17c08:	bls	17b88 <_start@@Base+0x5450>
   17c0c:	b	17b9c <_start@@Base+0x5464>
   17c10:	add	r0, ip, #1
   17c14:	sub	r3, r5, r0
   17c18:	cmp	r3, #1
   17c1c:	ble	17c30 <_start@@Base+0x54f8>
   17c20:	ldrb	r3, [ip, #1]
   17c24:	cmp	r3, #32
   17c28:	bhi	17bd8 <_start@@Base+0x54a0>
   17c2c:	beq	17c50 <_start@@Base+0x5518>
   17c30:	mov	r2, r5
   17c34:	mov	r1, r0
   17c38:	ldr	r6, [sp, #8]
   17c3c:	mov	r0, r4
   17c40:	ldrd	r4, [sp]
   17c44:	ldr	lr, [sp, #12]
   17c48:	add	sp, sp, #16
   17c4c:	b	271ac <flatcc_json_parser_space_ext@@Base>
   17c50:	ldrb	r3, [ip, #2]
   17c54:	cmp	r3, #32
   17c58:	addhi	r0, ip, #2
   17c5c:	bls	17c30 <_start@@Base+0x54f8>
   17c60:	b	17bd8 <_start@@Base+0x54a0>
   17c64:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17c68:	mov	ip, r3
   17c6c:	mov	r5, r2
   17c70:	strd	r6, [sp, #8]
   17c74:	mov	r7, r0
   17c78:	mov	r6, r1
   17c7c:	strd	r8, [sp, #16]
   17c80:	mov	r1, #4
   17c84:	strd	sl, [sp, #24]
   17c88:	str	lr, [sp, #32]
   17c8c:	sub	sp, sp, #340	; 0x154
   17c90:	ldr	r0, [r0]
   17c94:	str	r3, [sp, #260]	; 0x104
   17c98:	mov	r3, #0
   17c9c:	str	r3, [ip]
   17ca0:	bl	23210 <flatcc_builder_start_table@@Base>
   17ca4:	cmp	r0, #0
   17ca8:	beq	17ce4 <_start@@Base+0x55ac>
   17cac:	mov	r2, r5
   17cb0:	mov	r1, r6
   17cb4:	mov	r0, r7
   17cb8:	mov	r3, #33	; 0x21
   17cbc:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   17cc0:	mov	sl, r0
   17cc4:	mov	r0, sl
   17cc8:	add	sp, sp, #340	; 0x154
   17ccc:	ldrd	r4, [sp]
   17cd0:	ldrd	r6, [sp, #8]
   17cd4:	ldrd	r8, [sp, #16]
   17cd8:	ldrd	sl, [sp, #24]
   17cdc:	add	sp, sp, #32
   17ce0:	pop	{pc}		; (ldr pc, [sp], #4)
   17ce4:	add	r0, sp, #304	; 0x130
   17ce8:	mov	r3, #1
   17cec:	mov	r2, r5
   17cf0:	mov	r1, r6
   17cf4:	str	r0, [sp]
   17cf8:	mov	r0, r7
   17cfc:	bl	295e4 <flatcc_json_parser_prepare_unions@@Base>
   17d00:	cmp	r5, r0
   17d04:	beq	17cac <_start@@Base+0x5574>
   17d08:	add	r3, sp, #300	; 0x12c
   17d0c:	mov	r1, r6
   17d10:	mov	r2, r5
   17d14:	mov	r0, r7
   17d18:	bl	1362c <_start@@Base+0xef4>
   17d1c:	ldr	r3, [sp, #300]	; 0x12c
   17d20:	mov	r4, r0
   17d24:	mov	r9, r7
   17d28:	mov	r8, r5
   17d2c:	cmp	r3, #0
   17d30:	mov	r7, r9
   17d34:	beq	17ee4 <_start@@Base+0x57ac>
   17d38:	mov	r6, r8
   17d3c:	cmp	r6, r4
   17d40:	beq	17f20 <_start@@Base+0x57e8>
   17d44:	ldrb	r3, [r4]
   17d48:	cmp	r3, #34	; 0x22
   17d4c:	moveq	r3, #0
   17d50:	addeq	r4, r4, #1
   17d54:	streq	r3, [r7, #12]
   17d58:	beq	17d6c <_start@@Base+0x5634>
   17d5c:	cmp	r3, #46	; 0x2e
   17d60:	movne	r3, #1
   17d64:	strne	r3, [r7, #12]
   17d68:	beq	19c64 <_start@@Base+0x752c>
   17d6c:	sub	ip, r6, r4
   17d70:	cmp	ip, #8
   17d74:	bls	17ef0 <_start@@Base+0x57b8>
   17d78:	ldrb	r2, [r4, #7]
   17d7c:	mov	r3, #0
   17d80:	mov	lr, r3
   17d84:	ldrb	r0, [r4, #6]
   17d88:	orr	r2, r2, r0, lsl #8
   17d8c:	ldrb	r8, [r4, #5]
   17d90:	orr	r2, r2, r8, lsl #16
   17d94:	ldrb	r8, [r4, #4]
   17d98:	orr	r2, r2, r8, lsl #24
   17d9c:	ldrb	r8, [r4, #3]
   17da0:	orr	lr, lr, r8
   17da4:	ldrb	r0, [r4]
   17da8:	str	r2, [sp, #40]	; 0x28
   17dac:	ldrb	r8, [r4, #1]
   17db0:	add	r3, pc, #816	; 0x330
   17db4:	ldrd	r2, [r3]
   17db8:	lsl	r0, r0, #24
   17dbc:	orr	r8, r0, r8, lsl #16
   17dc0:	ldrb	r0, [r4, #2]
   17dc4:	orr	r1, lr, r0, lsl #8
   17dc8:	orr	r1, r8, r1
   17dcc:	str	r1, [sp, #44]	; 0x2c
   17dd0:	ldrd	r0, [sp, #40]	; 0x28
   17dd4:	cmp	r1, r3
   17dd8:	cmpeq	r0, r2
   17ddc:	beq	17f98 <_start@@Base+0x5860>
   17de0:	ldrd	r0, [sp, #40]	; 0x28
   17de4:	add	r3, pc, #772	; 0x304
   17de8:	ldrd	r2, [r3]
   17dec:	bic	lr, r0, #255	; 0xff
   17df0:	str	lr, [sp, #104]	; 0x68
   17df4:	str	r1, [sp, #108]	; 0x6c
   17df8:	ldrd	r0, [sp, #104]	; 0x68
   17dfc:	cmp	r1, r3
   17e00:	cmpeq	r0, r2
   17e04:	bne	18110 <_start@@Base+0x59d8>
   17e08:	cmp	ip, #7
   17e0c:	ble	17f24 <_start@@Base+0x57ec>
   17e10:	mov	r3, #7
   17e14:	mov	r2, r6
   17e18:	mov	r1, r4
   17e1c:	mov	r0, r7
   17e20:	bl	17b2c <_start@@Base+0x53f4>
   17e24:	cmp	r0, r4
   17e28:	beq	17f24 <_start@@Base+0x57ec>
   17e2c:	ldr	ip, [pc, #716]	; 18100 <_start@@Base+0x59c8>
   17e30:	mov	r4, #3
   17e34:	mov	r1, r0
   17e38:	mov	r3, #0
   17e3c:	mov	r2, r6
   17e40:	ldr	lr, [sp, #304]	; 0x130
   17e44:	mov	r0, r7
   17e48:	add	ip, pc, ip
   17e4c:	stm	sp, {r4, lr}
   17e50:	str	ip, [sp, #8]
   17e54:	bl	29aa4 <flatcc_json_parser_union_vector@@Base>
   17e58:	mov	r5, r0
   17e5c:	sub	r3, r6, r5
   17e60:	cmp	r3, #1
   17e64:	ble	17e78 <_start@@Base+0x5740>
   17e68:	ldrb	r3, [r5]
   17e6c:	cmp	r3, #32
   17e70:	bhi	17e8c <_start@@Base+0x5754>
   17e74:	beq	19620 <_start@@Base+0x6ee8>
   17e78:	mov	r1, r5
   17e7c:	mov	r2, r6
   17e80:	mov	r0, r7
   17e84:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   17e88:	mov	r5, r0
   17e8c:	cmp	r6, r5
   17e90:	beq	195c8 <_start@@Base+0x6e90>
   17e94:	ldrb	r3, [r5]
   17e98:	cmp	r3, #44	; 0x2c
   17e9c:	beq	19634 <_start@@Base+0x6efc>
   17ea0:	mov	r3, #0
   17ea4:	mov	r9, r7
   17ea8:	mov	r8, r6
   17eac:	str	r3, [sp, #300]	; 0x12c
   17eb0:	ldrb	r3, [r5]
   17eb4:	cmp	r3, #125	; 0x7d
   17eb8:	beq	180b0 <_start@@Base+0x5978>
   17ebc:	mov	r3, #10
   17ec0:	mov	r0, r7
   17ec4:	mov	r1, r5
   17ec8:	mov	r2, r6
   17ecc:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   17ed0:	ldr	r3, [sp, #300]	; 0x12c
   17ed4:	mov	r4, r0
   17ed8:	mov	r7, r9
   17edc:	cmp	r3, #0
   17ee0:	bne	17d38 <_start@@Base+0x5600>
   17ee4:	mov	r5, r8
   17ee8:	mov	r6, r4
   17eec:	b	195dc <_start@@Base+0x6ea4>
   17ef0:	sub	r3, ip, #1
   17ef4:	cmp	r3, #7
   17ef8:	addls	pc, pc, r3, lsl #2
   17efc:	b	17f24 <_start@@Base+0x57ec>
   17f00:	b	17f24 <_start@@Base+0x57ec>
   17f04:	b	17f6c <_start@@Base+0x5834>
   17f08:	b	17f60 <_start@@Base+0x5828>
   17f0c:	b	17f54 <_start@@Base+0x581c>
   17f10:	b	17f48 <_start@@Base+0x5810>
   17f14:	b	17f3c <_start@@Base+0x5804>
   17f18:	b	17f8c <_start@@Base+0x5854>
   17f1c:	b	17d78 <_start@@Base+0x5640>
   17f20:	mov	r4, r6
   17f24:	mov	r1, r4
   17f28:	mov	r2, r6
   17f2c:	mov	r0, r7
   17f30:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   17f34:	mov	r5, r0
   17f38:	b	17e5c <_start@@Base+0x5724>
   17f3c:	mov	r2, #0
   17f40:	mov	lr, r2
   17f44:	b	17d8c <_start@@Base+0x5654>
   17f48:	mov	r2, #0
   17f4c:	mov	lr, r2
   17f50:	b	17d94 <_start@@Base+0x565c>
   17f54:	mov	r2, #0
   17f58:	mov	lr, r2
   17f5c:	b	17d9c <_start@@Base+0x5664>
   17f60:	mov	r2, #0
   17f64:	mov	lr, r2
   17f68:	b	17da4 <_start@@Base+0x566c>
   17f6c:	ldrb	r2, [r4, #1]
   17f70:	mov	r1, #0
   17f74:	ldrb	r0, [r4]
   17f78:	str	r1, [sp, #40]	; 0x28
   17f7c:	lsl	r2, r2, #16
   17f80:	orr	r3, r2, r0, lsl #24
   17f84:	str	r3, [sp, #44]	; 0x2c
   17f88:	b	17de0 <_start@@Base+0x56a8>
   17f8c:	mov	r2, #0
   17f90:	mov	r3, #0
   17f94:	b	17d80 <_start@@Base+0x5648>
   17f98:	add	r5, r4, #8
   17f9c:	sub	ip, r6, r5
   17fa0:	cmp	ip, #8
   17fa4:	bhi	18094 <_start@@Base+0x595c>
   17fa8:	sub	r3, ip, #2
   17fac:	cmp	r3, #6
   17fb0:	addls	pc, pc, r3, lsl #2
   17fb4:	b	18724 <_start@@Base+0x5fec>
   17fb8:	b	180a8 <_start@@Base+0x5970>
   17fbc:	b	180a0 <_start@@Base+0x5968>
   17fc0:	b	17fd4 <_start@@Base+0x589c>
   17fc4:	b	17fd4 <_start@@Base+0x589c>
   17fc8:	b	17fd4 <_start@@Base+0x589c>
   17fcc:	b	18094 <_start@@Base+0x595c>
   17fd0:	b	18094 <_start@@Base+0x595c>
   17fd4:	mov	lr, #0
   17fd8:	ldrb	r2, [r4, #11]
   17fdc:	orr	lr, lr, r2
   17fe0:	ldrb	r2, [r4, #10]
   17fe4:	orr	lr, lr, r2, lsl #8
   17fe8:	ldrb	r0, [r4, #9]
   17fec:	mov	r8, #0
   17ff0:	str	r8, [sp, #160]	; 0xa0
   17ff4:	add	r3, pc, #252	; 0xfc
   17ff8:	ldrd	r2, [r3]
   17ffc:	orr	lr, lr, r0, lsl #16
   18000:	ldrb	r0, [r4, #8]
   18004:	orr	r1, lr, r0, lsl #24
   18008:	str	r1, [sp, #164]	; 0xa4
   1800c:	ldrd	r0, [sp, #160]	; 0xa0
   18010:	cmp	r1, r3
   18014:	cmpeq	r0, r2
   18018:	bne	18724 <_start@@Base+0x5fec>
   1801c:	cmp	ip, #4
   18020:	ble	18724 <_start@@Base+0x5fec>
   18024:	mov	r1, r5
   18028:	mov	r3, #4
   1802c:	mov	r2, r6
   18030:	mov	r0, r7
   18034:	bl	17b2c <_start@@Base+0x53f4>
   18038:	cmp	r5, r0
   1803c:	mov	r1, r0
   18040:	beq	18724 <_start@@Base+0x5fec>
   18044:	mov	ip, #3
   18048:	ldr	r0, [pc, #180]	; 18104 <_start@@Base+0x59cc>
   1804c:	mov	r3, r8
   18050:	mov	r2, r6
   18054:	ldr	lr, [pc, #172]	; 18108 <_start@@Base+0x59d0>
   18058:	str	ip, [sp]
   1805c:	ldr	ip, [pc, #168]	; 1810c <_start@@Base+0x59d4>
   18060:	add	r0, pc, r0
   18064:	ldr	r4, [sp, #304]	; 0x130
   18068:	add	r0, r0, #36	; 0x24
   1806c:	add	lr, pc, lr
   18070:	add	ip, pc, ip
   18074:	str	r4, [sp, #4]
   18078:	str	r0, [sp, #8]
   1807c:	mov	r0, r7
   18080:	str	ip, [sp, #12]
   18084:	str	lr, [sp, #16]
   18088:	bl	29bc0 <flatcc_json_parser_union_type_vector@@Base>
   1808c:	mov	r5, r0
   18090:	b	17e5c <_start@@Base+0x5724>
   18094:	mov	r3, #0
   18098:	mov	lr, r3
   1809c:	b	17fd8 <_start@@Base+0x58a0>
   180a0:	mov	lr, #0
   180a4:	b	17fe0 <_start@@Base+0x58a8>
   180a8:	mov	lr, #0
   180ac:	b	17fe8 <_start@@Base+0x58b0>
   180b0:	add	r1, r5, #1
   180b4:	sub	r3, r6, r1
   180b8:	cmp	r3, #1
   180bc:	ble	180d0 <_start@@Base+0x5998>
   180c0:	ldrb	r3, [r5, #1]
   180c4:	cmp	r3, #32
   180c8:	bhi	1a350 <_start@@Base+0x7c18>
   180cc:	beq	1a418 <_start@@Base+0x7ce0>
   180d0:	mov	r2, r8
   180d4:	mov	r0, r9
   180d8:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   180dc:	mov	r4, r0
   180e0:	ldr	r3, [sp, #300]	; 0x12c
   180e4:	b	17d2c <_start@@Base+0x55f4>
   180e8:	cmnvs	lr, pc, asr r9
   180ec:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   180f0:	cmnvs	lr, r0, lsl #18
   180f4:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   180f8:	andeq	r0, r0, r0
   180fc:	ldrbtvc	r7, [r9], #-101	; 0xffffff9b
   18100:	andeq	r8, r0, r4, lsr r1
   18104:	andeq	r5, r2, r8, lsr #32
   18108:			; <UNDEFINED> instruction: 0xffffa8a8
   1810c:	andeq	r7, r0, ip, lsl #30
   18110:	ldrd	r0, [sp, #40]	; 0x28
   18114:	lsr	r3, r0, #16
   18118:	str	r3, [sp, #144]	; 0x90
   1811c:	ldr	lr, [sp, #144]	; 0x90
   18120:	str	r1, [sp, #148]	; 0x94
   18124:	add	r3, pc, #1004	; 0x3ec
   18128:	ldrd	r2, [r3]
   1812c:	lsl	lr, lr, #16
   18130:	str	lr, [sp, #144]	; 0x90
   18134:	ldrd	r0, [sp, #144]	; 0x90
   18138:	cmp	r1, r3
   1813c:	cmpeq	r0, r2
   18140:	bne	196f8 <_start@@Base+0x6fc0>
   18144:	cmp	ip, #6
   18148:	ble	17f24 <_start@@Base+0x57ec>
   1814c:	mov	r3, #6
   18150:	mov	r2, r6
   18154:	mov	r1, r4
   18158:	mov	r0, r7
   1815c:	bl	17b2c <_start@@Base+0x53f4>
   18160:	cmp	r0, r4
   18164:	mov	r5, r0
   18168:	beq	17f24 <_start@@Base+0x57ec>
   1816c:	mov	r1, #3
   18170:	ldr	r0, [r7]
   18174:	bl	23210 <flatcc_builder_start_table@@Base>
   18178:	cmp	r0, #0
   1817c:	bne	186b0 <_start@@Base+0x5f78>
   18180:	add	r3, sp, #308	; 0x134
   18184:	mov	r1, r5
   18188:	mov	r2, r6
   1818c:	mov	r0, r7
   18190:	bl	1362c <_start@@Base+0xef4>
   18194:	ldr	r3, [sp, #308]	; 0x134
   18198:	cmp	r3, #0
   1819c:	beq	1ac28 <_start@@Base+0x84f0>
   181a0:	cmp	r6, r0
   181a4:	beq	181d0 <_start@@Base+0x5a98>
   181a8:	ldrb	r3, [r0]
   181ac:	cmp	r3, #34	; 0x22
   181b0:	moveq	r3, #0
   181b4:	addeq	r0, r0, #1
   181b8:	streq	r3, [r7, #12]
   181bc:	beq	181d0 <_start@@Base+0x5a98>
   181c0:	cmp	r3, #46	; 0x2e
   181c4:	movne	r3, #1
   181c8:	strne	r3, [r7, #12]
   181cc:	beq	196a0 <_start@@Base+0x6f68>
   181d0:	sub	r3, r6, r0
   181d4:	cmp	r3, #8
   181d8:	bhi	1820c <_start@@Base+0x5ad4>
   181dc:	sub	r3, r3, #1
   181e0:	cmp	r3, #7
   181e4:	addls	pc, pc, r3, lsl #2
   181e8:	b	185ac <_start@@Base+0x5e74>
   181ec:	b	182d4 <_start@@Base+0x5b9c>
   181f0:	b	182c8 <_start@@Base+0x5b90>
   181f4:	b	182bc <_start@@Base+0x5b84>
   181f8:	b	182ec <_start@@Base+0x5bb4>
   181fc:	b	182e0 <_start@@Base+0x5ba8>
   18200:	b	182f8 <_start@@Base+0x5bc0>
   18204:	b	182b0 <_start@@Base+0x5b78>
   18208:	b	1820c <_start@@Base+0x5ad4>
   1820c:	ldrb	r2, [r0, #7]
   18210:	mov	r3, #0
   18214:	mov	r1, r3
   18218:	ldrb	r4, [r0, #6]
   1821c:	orr	r2, r2, r4, lsl #8
   18220:	ldrb	sl, [r0, #5]
   18224:	orr	r2, r2, sl, lsl #16
   18228:	ldrb	sl, [r0, #4]
   1822c:	orr	r2, r2, sl, lsl #24
   18230:	ldrb	r8, [r0, #3]
   18234:	orr	r1, r1, r8
   18238:	ldrb	sl, [r0, #2]
   1823c:	orr	r1, r1, sl, lsl #8
   18240:	ldrb	sl, [r0, #1]
   18244:	orr	r1, r1, sl, lsl #16
   18248:	str	r2, [sp, #48]	; 0x30
   1824c:	ldrb	r2, [r0]
   18250:	add	r5, pc, #712	; 0x2c8
   18254:	ldrd	r4, [r5]
   18258:	orr	r3, r1, r2, lsl #24
   1825c:	str	r3, [sp, #52]	; 0x34
   18260:	ldrd	r2, [sp, #48]	; 0x30
   18264:	cmp	r3, r5
   18268:	cmpeq	r2, r4
   1826c:	bne	185ac <_start@@Base+0x5e74>
   18270:	add	r1, r0, #8
   18274:	sub	r3, r6, r1
   18278:	cmp	r3, #8
   1827c:	bhi	18304 <_start@@Base+0x5bcc>
   18280:	sub	r3, r3, #1
   18284:	cmp	r3, #7
   18288:	addls	pc, pc, r3, lsl #2
   1828c:	b	185b0 <_start@@Base+0x5e78>
   18290:	b	183f4 <_start@@Base+0x5cbc>
   18294:	b	183e8 <_start@@Base+0x5cb0>
   18298:	b	183dc <_start@@Base+0x5ca4>
   1829c:	b	183d0 <_start@@Base+0x5c98>
   182a0:	b	183c4 <_start@@Base+0x5c8c>
   182a4:	b	183b8 <_start@@Base+0x5c80>
   182a8:	b	183ac <_start@@Base+0x5c74>
   182ac:	b	18304 <_start@@Base+0x5bcc>
   182b0:	mov	r2, #0
   182b4:	mov	r3, #0
   182b8:	b	18214 <_start@@Base+0x5adc>
   182bc:	mov	r2, #0
   182c0:	mov	r1, r2
   182c4:	b	18238 <_start@@Base+0x5b00>
   182c8:	mov	r2, #0
   182cc:	mov	r1, r2
   182d0:	b	18240 <_start@@Base+0x5b08>
   182d4:	mov	r2, #0
   182d8:	mov	r1, r2
   182dc:	b	18248 <_start@@Base+0x5b10>
   182e0:	mov	r2, #0
   182e4:	mov	r1, r2
   182e8:	b	18228 <_start@@Base+0x5af0>
   182ec:	mov	r2, #0
   182f0:	mov	r1, r2
   182f4:	b	18230 <_start@@Base+0x5af8>
   182f8:	mov	r2, #0
   182fc:	mov	r1, r2
   18300:	b	18220 <_start@@Base+0x5ae8>
   18304:	ldrb	r2, [r0, #15]
   18308:	mov	r3, #0
   1830c:	mov	sl, r3
   18310:	ldrb	r4, [r0, #14]
   18314:	orr	r2, r2, r4, lsl #8
   18318:	ldrb	r4, [r0, #13]
   1831c:	orr	r2, r2, r4, lsl #16
   18320:	ldrb	r4, [r0, #12]
   18324:	mov	r8, sl
   18328:	orr	r2, r2, r4, lsl #24
   1832c:	ldrb	sl, [r0, #11]
   18330:	orr	sl, r8, sl
   18334:	ldrb	r8, [r0, #10]
   18338:	orr	sl, sl, r8, lsl #8
   1833c:	ldrb	r8, [r0, #9]
   18340:	orr	r8, sl, r8, lsl #16
   18344:	str	r2, [sp, #80]	; 0x50
   18348:	ldrb	r2, [r0, #8]
   1834c:	add	r5, pc, #468	; 0x1d4
   18350:	ldrd	r4, [r5]
   18354:	orr	r3, r8, r2, lsl #24
   18358:	str	r3, [sp, #84]	; 0x54
   1835c:	ldrd	r2, [sp, #80]	; 0x50
   18360:	cmp	r3, r5
   18364:	cmpeq	r2, r4
   18368:	bne	185b0 <_start@@Base+0x5e78>
   1836c:	add	r4, r0, #16
   18370:	sub	r5, r6, r4
   18374:	cmp	r5, #8
   18378:	bhi	18400 <_start@@Base+0x5cc8>
   1837c:	sub	r3, r5, #1
   18380:	cmp	r3, #7
   18384:	addls	pc, pc, r3, lsl #2
   18388:	b	18fb8 <_start@@Base+0x6880>
   1838c:	b	18588 <_start@@Base+0x5e50>
   18390:	b	1854c <_start@@Base+0x5e14>
   18394:	b	1857c <_start@@Base+0x5e44>
   18398:	b	18570 <_start@@Base+0x5e38>
   1839c:	b	18564 <_start@@Base+0x5e2c>
   183a0:	b	18558 <_start@@Base+0x5e20>
   183a4:	b	1850c <_start@@Base+0x5dd4>
   183a8:	b	18400 <_start@@Base+0x5cc8>
   183ac:	mov	r2, #0
   183b0:	mov	r3, #0
   183b4:	b	1830c <_start@@Base+0x5bd4>
   183b8:	mov	r2, #0
   183bc:	mov	sl, r2
   183c0:	b	18318 <_start@@Base+0x5be0>
   183c4:	mov	r2, #0
   183c8:	mov	sl, r2
   183cc:	b	18320 <_start@@Base+0x5be8>
   183d0:	mov	r2, #0
   183d4:	mov	r8, r2
   183d8:	b	1832c <_start@@Base+0x5bf4>
   183dc:	mov	r2, #0
   183e0:	mov	sl, r2
   183e4:	b	18334 <_start@@Base+0x5bfc>
   183e8:	mov	r2, #0
   183ec:	mov	sl, r2
   183f0:	b	1833c <_start@@Base+0x5c04>
   183f4:	mov	r2, #0
   183f8:	mov	r8, r2
   183fc:	b	18344 <_start@@Base+0x5c0c>
   18400:	ldrb	r2, [r0, #23]
   18404:	mov	r3, #0
   18408:	mov	lr, r3
   1840c:	ldrb	r8, [r0, #22]
   18410:	orr	ip, r2, r8, lsl #8
   18414:	ldrb	r8, [r0, #21]
   18418:	orr	ip, ip, r8, lsl #16
   1841c:	ldrb	r8, [r0, #20]
   18420:	orr	ip, ip, r8, lsl #24
   18424:	ldrb	sl, [r0, #19]
   18428:	orr	lr, lr, sl
   1842c:	ldrb	sl, [r0, #18]
   18430:	orr	lr, lr, sl, lsl #8
   18434:	lsr	r1, ip, #16
   18438:	ldrb	r2, [r0, #17]
   1843c:	ldrb	r0, [r0, #16]
   18440:	str	r1, [sp, #96]	; 0x60
   18444:	ldr	r8, [sp, #96]	; 0x60
   18448:	orr	lr, lr, r2, lsl #16
   1844c:	add	r3, pc, #220	; 0xdc
   18450:	ldrd	r2, [r3]
   18454:	orr	r0, lr, r0, lsl #24
   18458:	lsl	r8, r8, #16
   1845c:	str	r8, [sp, #96]	; 0x60
   18460:	str	r0, [sp, #100]	; 0x64
   18464:	ldrd	r8, [sp, #96]	; 0x60
   18468:	cmp	r9, r3
   1846c:	cmpeq	r8, r2
   18470:	beq	18fd0 <_start@@Base+0x6898>
   18474:	and	r1, ip, #-16777216	; 0xff000000
   18478:	add	r3, pc, #184	; 0xb8
   1847c:	ldrd	r2, [r3]
   18480:	str	r1, [sp, #152]	; 0x98
   18484:	str	r0, [sp, #156]	; 0x9c
   18488:	ldrd	r0, [sp, #152]	; 0x98
   1848c:	cmp	r1, r3
   18490:	cmpeq	r0, r2
   18494:	bne	1873c <_start@@Base+0x6004>
   18498:	cmp	r5, #5
   1849c:	ble	1873c <_start@@Base+0x6004>
   184a0:	mov	r3, #5
   184a4:	mov	r2, r6
   184a8:	mov	r1, r4
   184ac:	mov	r0, r7
   184b0:	bl	17b2c <_start@@Base+0x53f4>
   184b4:	cmp	r4, r0
   184b8:	mov	r9, r0
   184bc:	beq	1873c <_start@@Base+0x6004>
   184c0:	mov	r1, #9
   184c4:	ldr	r0, [r7]
   184c8:	bl	23210 <flatcc_builder_start_table@@Base>
   184cc:	cmp	r0, #0
   184d0:	beq	19cb4 <_start@@Base+0x757c>
   184d4:	mov	r5, r6
   184d8:	mov	r1, r9
   184dc:	mov	r3, #33	; 0x21
   184e0:	mov	r2, r5
   184e4:	mov	r0, r7
   184e8:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   184ec:	mov	r6, r0
   184f0:	mov	r1, r6
   184f4:	mov	r3, #33	; 0x21
   184f8:	mov	r2, r5
   184fc:	mov	r0, r7
   18500:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   18504:	mov	r6, r0
   18508:	b	17cac <_start@@Base+0x5574>
   1850c:	mov	r2, #0
   18510:	mov	r3, #0
   18514:	b	18408 <_start@@Base+0x5cd0>
   18518:	ldmdbvs	r8!, {}^	; <UNPREDICTABLE>
   1851c:	rsbsvc	r6, r2, r6, ror #10
   18520:	bvs	1cf42e0 <__bss_end__@@Base+0x1cb6f0c>
   18524:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   18528:	ldmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
   1852c:	rsbsvc	r6, r2, r6, ror #10
   18530:	ldrvs	r0, [r2, -r0]!
   18534:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   18538:	strvs	r0, [r0, -r0]
   1853c:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   18540:	ldrvs	r0, [r3, -r0]!
   18544:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   18548:	ldrdeq	r4, [r2], -r0
   1854c:	mov	ip, #0
   18550:	mov	lr, ip
   18554:	b	18434 <_start@@Base+0x5cfc>
   18558:	mov	ip, #0
   1855c:	mov	lr, ip
   18560:	b	18414 <_start@@Base+0x5cdc>
   18564:	mov	ip, #0
   18568:	mov	lr, ip
   1856c:	b	1841c <_start@@Base+0x5ce4>
   18570:	mov	ip, #0
   18574:	mov	lr, ip
   18578:	b	18424 <_start@@Base+0x5cec>
   1857c:	mov	ip, #0
   18580:	mov	lr, ip
   18584:	b	1842c <_start@@Base+0x5cf4>
   18588:	ldrb	r2, [r0, #16]
   1858c:	lsl	r3, r2, #24
   18590:	str	r3, [sp, #100]	; 0x64
   18594:	mov	r3, #0
   18598:	str	r3, [sp, #96]	; 0x60
   1859c:	ldrd	r2, [sp, #96]	; 0x60
   185a0:	mov	ip, r2
   185a4:	mov	r0, r3
   185a8:	b	18474 <_start@@Base+0x5d3c>
   185ac:	mov	r1, r0
   185b0:	mov	r2, r6
   185b4:	mov	r0, r7
   185b8:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   185bc:	mov	r4, r0
   185c0:	sub	r3, r6, r4
   185c4:	cmp	r3, #1
   185c8:	ble	185dc <_start@@Base+0x5ea4>
   185cc:	ldrb	r3, [r4]
   185d0:	cmp	r3, #32
   185d4:	bhi	185f0 <_start@@Base+0x5eb8>
   185d8:	beq	186c0 <_start@@Base+0x5f88>
   185dc:	mov	r1, r4
   185e0:	mov	r2, r6
   185e4:	mov	r0, r7
   185e8:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   185ec:	mov	r4, r0
   185f0:	cmp	r6, r4
   185f4:	beq	18668 <_start@@Base+0x5f30>
   185f8:	ldrb	r3, [r4]
   185fc:	cmp	r3, #44	; 0x2c
   18600:	beq	186d4 <_start@@Base+0x5f9c>
   18604:	mov	r3, #0
   18608:	str	r3, [sp, #308]	; 0x134
   1860c:	ldrb	r3, [r4]
   18610:	cmp	r3, #125	; 0x7d
   18614:	beq	18634 <_start@@Base+0x5efc>
   18618:	mov	r3, #10
   1861c:	mov	r1, r4
   18620:	mov	r2, r6
   18624:	mov	r0, r7
   18628:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1862c:	ldr	r3, [sp, #308]	; 0x134
   18630:	b	18198 <_start@@Base+0x5a60>
   18634:	add	r1, r4, #1
   18638:	sub	r3, r6, r1
   1863c:	cmp	r3, #1
   18640:	ble	18654 <_start@@Base+0x5f1c>
   18644:	ldrb	r3, [r4, #1]
   18648:	cmp	r3, #32
   1864c:	bhi	196e8 <_start@@Base+0x6fb0>
   18650:	beq	19b6c <_start@@Base+0x7434>
   18654:	mov	r2, r6
   18658:	mov	r0, r7
   1865c:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   18660:	ldr	r3, [sp, #308]	; 0x134
   18664:	b	18198 <_start@@Base+0x5a60>
   18668:	mov	r3, #0
   1866c:	mov	r5, r4
   18670:	str	r3, [sp, #308]	; 0x134
   18674:	ldr	r1, [r7, #24]
   18678:	cmp	r1, #0
   1867c:	bne	186b0 <_start@@Base+0x5f78>
   18680:	ldr	r0, [r7]
   18684:	str	r1, [sp, #136]	; 0x88
   18688:	bl	23bf4 <flatcc_builder_end_table@@Base>
   1868c:	subs	r4, r0, #0
   18690:	ldr	r1, [sp, #136]	; 0x88
   18694:	beq	186b0 <_start@@Base+0x5f78>
   18698:	ldr	r0, [r7]
   1869c:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   186a0:	cmp	r0, #0
   186a4:	beq	1abe4 <_start@@Base+0x84ac>
   186a8:	str	r4, [r0]
   186ac:	b	17e5c <_start@@Base+0x5724>
   186b0:	mov	r3, r6
   186b4:	mov	r6, r5
   186b8:	mov	r5, r3
   186bc:	b	184f0 <_start@@Base+0x5db8>
   186c0:	ldrb	r3, [r4, #1]
   186c4:	cmp	r3, #32
   186c8:	addhi	r4, r4, #1
   186cc:	bls	185dc <_start@@Base+0x5ea4>
   186d0:	b	185f0 <_start@@Base+0x5eb8>
   186d4:	add	r0, r4, #1
   186d8:	sub	r3, r6, r0
   186dc:	cmp	r3, #1
   186e0:	ble	186f4 <_start@@Base+0x5fbc>
   186e4:	ldrb	r3, [r4, #1]
   186e8:	cmp	r3, #32
   186ec:	bhi	18704 <_start@@Base+0x5fcc>
   186f0:	beq	1a314 <_start@@Base+0x7bdc>
   186f4:	mov	r1, r0
   186f8:	mov	r2, r6
   186fc:	mov	r0, r7
   18700:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   18704:	cmp	r6, r0
   18708:	beq	1a32c <_start@@Base+0x7bf4>
   1870c:	ldrb	r3, [r0]
   18710:	cmp	r3, #125	; 0x7d
   18714:	beq	1a474 <_start@@Base+0x7d3c>
   18718:	mov	r3, #1
   1871c:	str	r3, [sp, #308]	; 0x134
   18720:	b	181a0 <_start@@Base+0x5a68>
   18724:	mov	r1, r5
   18728:	mov	r2, r6
   1872c:	mov	r0, r7
   18730:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   18734:	mov	r5, r0
   18738:	b	17e5c <_start@@Base+0x5724>
   1873c:	sub	r3, pc, #516	; 0x204
   18740:	ldrd	r2, [r3]
   18744:	ldrd	r0, [sp, #96]	; 0x60
   18748:	cmp	r1, r3
   1874c:	cmpeq	r0, r2
   18750:	bne	18fb8 <_start@@Base+0x6880>
   18754:	cmp	r5, #6
   18758:	ble	18fb8 <_start@@Base+0x6880>
   1875c:	mov	r3, #6
   18760:	mov	r2, r6
   18764:	mov	r1, r4
   18768:	mov	r0, r7
   1876c:	bl	17b2c <_start@@Base+0x53f4>
   18770:	cmp	r4, r0
   18774:	mov	r5, r0
   18778:	beq	18fb8 <_start@@Base+0x6880>
   1877c:	mov	r1, #2
   18780:	ldr	r0, [r7]
   18784:	bl	23210 <flatcc_builder_start_table@@Base>
   18788:	cmp	r0, #0
   1878c:	bne	196d8 <_start@@Base+0x6fa0>
   18790:	add	r3, sp, #312	; 0x138
   18794:	mov	r1, r5
   18798:	mov	r2, r6
   1879c:	mov	r0, r7
   187a0:	bl	1362c <_start@@Base+0xef4>
   187a4:	ldr	r3, [sp, #312]	; 0x138
   187a8:	cmp	r3, #0
   187ac:	beq	1ac20 <_start@@Base+0x84e8>
   187b0:	ldr	r5, [pc, #-624]	; 18548 <_start@@Base+0x5e10>
   187b4:	mov	r1, r0
   187b8:	add	r5, pc, r5
   187bc:	add	r5, r5, #160	; 0xa0
   187c0:	cmp	r6, r1
   187c4:	beq	187f0 <_start@@Base+0x60b8>
   187c8:	ldrb	r3, [r1]
   187cc:	cmp	r3, #34	; 0x22
   187d0:	moveq	r3, #0
   187d4:	addeq	r1, r1, #1
   187d8:	streq	r3, [r7, #12]
   187dc:	beq	187f0 <_start@@Base+0x60b8>
   187e0:	cmp	r3, #46	; 0x2e
   187e4:	movne	r3, #1
   187e8:	strne	r3, [r7, #12]
   187ec:	beq	196c0 <_start@@Base+0x6f88>
   187f0:	sub	r3, r6, r1
   187f4:	cmp	r3, #8
   187f8:	bhi	1882c <_start@@Base+0x60f4>
   187fc:	sub	r3, r3, #1
   18800:	cmp	r3, #7
   18804:	addls	pc, pc, r3, lsl #2
   18808:	b	18b68 <_start@@Base+0x6430>
   1880c:	b	18914 <_start@@Base+0x61dc>
   18810:	b	18908 <_start@@Base+0x61d0>
   18814:	b	188fc <_start@@Base+0x61c4>
   18818:	b	188f0 <_start@@Base+0x61b8>
   1881c:	b	188e4 <_start@@Base+0x61ac>
   18820:	b	188d8 <_start@@Base+0x61a0>
   18824:	b	188cc <_start@@Base+0x6194>
   18828:	b	1882c <_start@@Base+0x60f4>
   1882c:	ldrb	sl, [r1, #7]
   18830:	mov	fp, #0
   18834:	mov	r3, fp
   18838:	ldrb	r8, [r1, #6]
   1883c:	orr	r2, sl, r8, lsl #8
   18840:	ldrb	r8, [r1, #5]
   18844:	orr	r2, r2, r8, lsl #16
   18848:	ldrb	r8, [r1, #4]
   1884c:	orr	r2, r2, r8, lsl #24
   18850:	ldrb	sl, [r1, #3]
   18854:	orr	r3, r3, sl
   18858:	ldrb	sl, [r1, #2]
   1885c:	orr	r3, r3, sl, lsl #8
   18860:	ldrb	sl, [r1, #1]
   18864:	orr	sl, r3, sl, lsl #16
   18868:	str	r2, [sp, #64]	; 0x40
   1886c:	ldrb	r2, [r1]
   18870:	add	r9, pc, #912	; 0x390
   18874:	ldrd	r8, [r9]
   18878:	orr	r3, sl, r2, lsl #24
   1887c:	str	r3, [sp, #68]	; 0x44
   18880:	ldrd	r2, [sp, #64]	; 0x40
   18884:	cmp	r3, r9
   18888:	cmpeq	r2, r8
   1888c:	bne	18b68 <_start@@Base+0x6430>
   18890:	add	r4, r1, #8
   18894:	sub	r0, r6, r4
   18898:	cmp	r0, #8
   1889c:	bhi	18920 <_start@@Base+0x61e8>
   188a0:	sub	r3, r0, #2
   188a4:	cmp	r3, #6
   188a8:	addls	pc, pc, r3, lsl #2
   188ac:	b	18b7c <_start@@Base+0x6444>
   188b0:	b	18b48 <_start@@Base+0x6410>
   188b4:	b	18b24 <_start@@Base+0x63ec>
   188b8:	b	18b18 <_start@@Base+0x63e0>
   188bc:	b	18b3c <_start@@Base+0x6404>
   188c0:	b	18b0c <_start@@Base+0x63d4>
   188c4:	b	18b30 <_start@@Base+0x63f8>
   188c8:	b	18920 <_start@@Base+0x61e8>
   188cc:	mov	sl, #0
   188d0:	mov	fp, #0
   188d4:	b	18834 <_start@@Base+0x60fc>
   188d8:	mov	r2, #0
   188dc:	mov	r3, r2
   188e0:	b	18840 <_start@@Base+0x6108>
   188e4:	mov	r2, #0
   188e8:	mov	r3, r2
   188ec:	b	18848 <_start@@Base+0x6110>
   188f0:	mov	r2, #0
   188f4:	mov	r3, r2
   188f8:	b	18850 <_start@@Base+0x6118>
   188fc:	mov	r2, #0
   18900:	mov	r3, r2
   18904:	b	18858 <_start@@Base+0x6120>
   18908:	mov	r2, #0
   1890c:	mov	r3, r2
   18910:	b	18860 <_start@@Base+0x6128>
   18914:	mov	r2, #0
   18918:	mov	sl, r2
   1891c:	b	18868 <_start@@Base+0x6130>
   18920:	ldrb	r2, [r1, #15]
   18924:	mov	r3, #0
   18928:	mov	ip, r3
   1892c:	ldrb	sl, [r1, #14]
   18930:	orr	r2, r2, sl, lsl #8
   18934:	ldrb	sl, [r1, #13]
   18938:	orr	r2, r2, sl, lsl #16
   1893c:	ldrb	sl, [r1, #12]
   18940:	orr	sl, r2, sl, lsl #24
   18944:	ldrb	r8, [r1, #11]
   18948:	orr	ip, ip, r8
   1894c:	ldrb	r2, [r1, #8]
   18950:	str	sl, [sp, #72]	; 0x48
   18954:	ldrb	r8, [r1, #10]
   18958:	lsl	lr, r2, #24
   1895c:	ldrb	r2, [r1, #9]
   18960:	orr	r8, ip, r8, lsl #8
   18964:	orr	r2, lr, r2, lsl #16
   18968:	orr	r3, r2, r8
   1896c:	add	r9, pc, #668	; 0x29c
   18970:	ldrd	r8, [r9]
   18974:	str	r3, [sp, #76]	; 0x4c
   18978:	ldrd	r2, [sp, #72]	; 0x48
   1897c:	cmp	r3, r9
   18980:	cmpeq	r2, r8
   18984:	beq	18d80 <_start@@Base+0x6648>
   18988:	ldrd	r2, [sp, #72]	; 0x48
   1898c:	add	r9, pc, #644	; 0x284
   18990:	ldrd	r8, [r9]
   18994:	bic	r1, r2, #255	; 0xff
   18998:	str	r1, [sp, #112]	; 0x70
   1899c:	str	r3, [sp, #116]	; 0x74
   189a0:	ldrd	r2, [sp, #112]	; 0x70
   189a4:	cmp	r3, r9
   189a8:	cmpeq	r2, r8
   189ac:	bne	18b7c <_start@@Base+0x6444>
   189b0:	cmp	r0, #7
   189b4:	ble	18b7c <_start@@Base+0x6444>
   189b8:	mov	r3, #7
   189bc:	mov	r2, r6
   189c0:	mov	r1, r4
   189c4:	mov	r0, r7
   189c8:	bl	17b2c <_start@@Base+0x53f4>
   189cc:	cmp	r4, r0
   189d0:	mov	r8, r0
   189d4:	beq	18b7c <_start@@Base+0x6444>
   189d8:	mov	r1, #0
   189dc:	mov	r2, #0
   189e0:	mov	r3, #0
   189e4:	cmp	r6, r0
   189e8:	str	r1, [sp, #316]	; 0x13c
   189ec:	add	r1, sp, #320	; 0x140
   189f0:	strd	r2, [r1]
   189f4:	add	r1, sp, #328	; 0x148
   189f8:	strd	r2, [r1]
   189fc:	beq	19b80 <_start@@Base+0x7448>
   18a00:	mov	r1, r0
   18a04:	add	r0, sp, #328	; 0x148
   18a08:	add	r3, sp, #316	; 0x13c
   18a0c:	mov	r2, r6
   18a10:	str	r0, [sp]
   18a14:	mov	r0, r7
   18a18:	bl	28ea4 <flatcc_json_parser_integer@@Base>
   18a1c:	cmp	r8, r0
   18a20:	mov	r4, r0
   18a24:	bne	19c80 <_start@@Base+0x7548>
   18a28:	add	r0, sp, #320	; 0x140
   18a2c:	mov	r3, r5
   18a30:	mov	r2, r6
   18a34:	mov	r1, r4
   18a38:	str	r0, [sp]
   18a3c:	mov	r0, r7
   18a40:	bl	14e98 <_start@@Base+0x2760>
   18a44:	cmp	r6, r0
   18a48:	cmpne	r0, r4
   18a4c:	beq	1ac0c <_start@@Base+0x84d4>
   18a50:	add	r3, sp, #320	; 0x140
   18a54:	mov	r4, r0
   18a58:	ldrd	r2, [r3]
   18a5c:	orrs	r3, r2, r3
   18a60:	bne	18a70 <_start@@Base+0x6338>
   18a64:	ldr	r3, [r7, #8]
   18a68:	tst	r3, #2
   18a6c:	beq	18a98 <_start@@Base+0x6360>
   18a70:	mov	r3, #8
   18a74:	mov	r1, #0
   18a78:	ldr	r0, [r7]
   18a7c:	mov	r2, r3
   18a80:	bl	24d44 <flatcc_builder_table_add@@Base>
   18a84:	cmp	r0, #0
   18a88:	beq	18d70 <_start@@Base+0x6638>
   18a8c:	add	r3, sp, #320	; 0x140
   18a90:	ldrd	r2, [r3]
   18a94:	strd	r2, [r0]
   18a98:	sub	r3, r6, r4
   18a9c:	cmp	r3, #1
   18aa0:	ble	18ab4 <_start@@Base+0x637c>
   18aa4:	ldrb	r3, [r4]
   18aa8:	cmp	r3, #32
   18aac:	bhi	18ac8 <_start@@Base+0x6390>
   18ab0:	beq	18f54 <_start@@Base+0x681c>
   18ab4:	mov	r1, r4
   18ab8:	mov	r2, r6
   18abc:	mov	r0, r7
   18ac0:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   18ac4:	mov	r4, r0
   18ac8:	cmp	r6, r4
   18acc:	beq	18bc8 <_start@@Base+0x6490>
   18ad0:	ldrb	r3, [r4]
   18ad4:	cmp	r3, #44	; 0x2c
   18ad8:	beq	18f68 <_start@@Base+0x6830>
   18adc:	mov	r3, #0
   18ae0:	str	r3, [sp, #312]	; 0x138
   18ae4:	ldrb	r3, [r4]
   18ae8:	cmp	r3, #125	; 0x7d
   18aec:	beq	18b94 <_start@@Base+0x645c>
   18af0:	mov	r3, #10
   18af4:	mov	r1, r4
   18af8:	mov	r2, r6
   18afc:	mov	r0, r7
   18b00:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   18b04:	ldr	r3, [sp, #312]	; 0x138
   18b08:	b	187a8 <_start@@Base+0x6070>
   18b0c:	mov	r2, #0
   18b10:	mov	ip, r2
   18b14:	b	18934 <_start@@Base+0x61fc>
   18b18:	mov	sl, #0
   18b1c:	mov	ip, sl
   18b20:	b	18944 <_start@@Base+0x620c>
   18b24:	mov	sl, #0
   18b28:	mov	ip, sl
   18b2c:	b	1894c <_start@@Base+0x6214>
   18b30:	mov	r2, #0
   18b34:	mov	r3, #0
   18b38:	b	18928 <_start@@Base+0x61f0>
   18b3c:	mov	r2, #0
   18b40:	mov	ip, r2
   18b44:	b	1893c <_start@@Base+0x6204>
   18b48:	ldrb	r2, [r1, #8]
   18b4c:	mov	ip, #0
   18b50:	ldrb	r8, [r1, #9]
   18b54:	str	ip, [sp, #72]	; 0x48
   18b58:	lsl	r2, r2, #24
   18b5c:	orr	r3, r2, r8, lsl #16
   18b60:	str	r3, [sp, #76]	; 0x4c
   18b64:	b	18988 <_start@@Base+0x6250>
   18b68:	mov	r2, r6
   18b6c:	mov	r0, r7
   18b70:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   18b74:	mov	r4, r0
   18b78:	b	18a98 <_start@@Base+0x6360>
   18b7c:	mov	r1, r4
   18b80:	mov	r2, r6
   18b84:	mov	r0, r7
   18b88:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   18b8c:	mov	r4, r0
   18b90:	b	18a98 <_start@@Base+0x6360>
   18b94:	add	r1, r4, #1
   18b98:	sub	r3, r6, r1
   18b9c:	cmp	r3, #1
   18ba0:	ble	18bb4 <_start@@Base+0x647c>
   18ba4:	ldrb	r3, [r4, #1]
   18ba8:	cmp	r3, #32
   18bac:	bhi	196f0 <_start@@Base+0x6fb8>
   18bb0:	beq	19b88 <_start@@Base+0x7450>
   18bb4:	mov	r2, r6
   18bb8:	mov	r0, r7
   18bbc:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   18bc0:	ldr	r3, [sp, #312]	; 0x138
   18bc4:	b	187a8 <_start@@Base+0x6070>
   18bc8:	mov	r3, #0
   18bcc:	str	r3, [sp, #312]	; 0x138
   18bd0:	ldr	r3, [r7, #24]
   18bd4:	cmp	r3, #0
   18bd8:	bne	18d70 <_start@@Base+0x6638>
   18bdc:	ldr	r0, [r7]
   18be0:	bl	23bf4 <flatcc_builder_end_table@@Base>
   18be4:	subs	r5, r0, #0
   18be8:	beq	18d70 <_start@@Base+0x6638>
   18bec:	mov	r1, #2
   18bf0:	ldr	r0, [r7]
   18bf4:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   18bf8:	cmp	r0, #0
   18bfc:	beq	1944c <_start@@Base+0x6d14>
   18c00:	str	r5, [r0]
   18c04:	b	185c0 <_start@@Base+0x5e88>
   18c08:	svcpl	0x00626262
   18c0c:	cmnvs	r1, r1, ror #2
   18c10:	cmnvs	r2, pc, asr r4
   18c14:	subsvs	r7, pc, #116, 6	; 0xd0000001
   18c18:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   18c1c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   18c20:	teqcc	r2, r4, lsr r3
   18c24:	cmnvs	r1, r1, ror #2
   18c28:	movwvc	r0, #0
   18c2c:	cmnvc	r4, #112, 10	; 0x1c000000
   18c30:	andeq	r4, r2, r4, asr r0
   18c34:	ldrdeq	r4, [r2], -r8
   18c38:	ldrb	r2, [r4, #7]
   18c3c:	mov	r3, #0
   18c40:	mov	lr, r3
   18c44:	ldrb	r8, [r4, #6]
   18c48:	orr	r2, r2, r8, lsl #8
   18c4c:	ldrb	r8, [r4, #5]
   18c50:	orr	r2, r2, r8, lsl #16
   18c54:	ldrb	r8, [r4, #4]
   18c58:	orr	r8, r2, r8, lsl #24
   18c5c:	ldrb	r0, [r4, #3]
   18c60:	orr	lr, lr, r0
   18c64:	ldrb	r2, [r4]
   18c68:	mov	r5, #0
   18c6c:	str	r8, [sp, #24]
   18c70:	ldrb	r0, [r4, #2]
   18c74:	lsl	r8, r2, #24
   18c78:	ldrb	r2, [r4, #1]
   18c7c:	orr	r0, lr, r0, lsl #8
   18c80:	orr	r2, r8, r2, lsl #16
   18c84:	orr	r3, r2, r0
   18c88:	str	r3, [sp, #28]
   18c8c:	ldrd	r2, [sp, #24]
   18c90:	cmp	r3, fp
   18c94:	cmpeq	r2, sl
   18c98:	bhi	19dd0 <_start@@Base+0x7698>
   18c9c:	sub	r1, pc, #132	; 0x84
   18ca0:	ldrd	r0, [r1]
   18ca4:	cmp	r3, r1
   18ca8:	cmpeq	r2, r0
   18cac:	beq	19e9c <_start@@Base+0x7764>
   18cb0:	ldr	r1, [sp, #28]
   18cb4:	mov	r5, #0
   18cb8:	movw	r3, #24929	; 0x6161
   18cbc:	movt	r3, #24929	; 0x6161
   18cc0:	mov	r2, #0
   18cc4:	str	r5, [sp, #120]	; 0x78
   18cc8:	str	r1, [sp, #124]	; 0x7c
   18ccc:	ldrd	r0, [sp, #120]	; 0x78
   18cd0:	cmp	r1, r3
   18cd4:	cmpeq	r0, r2
   18cd8:	bne	1a094 <_start@@Base+0x795c>
   18cdc:	cmp	ip, #4
   18ce0:	ble	19d50 <_start@@Base+0x7618>
   18ce4:	mov	r1, r4
   18ce8:	mov	r3, #4
   18cec:	mov	r2, r6
   18cf0:	mov	r0, r7
   18cf4:	bl	17b2c <_start@@Base+0x53f4>
   18cf8:	cmp	r0, r4
   18cfc:	mov	r1, r0
   18d00:	beq	19d50 <_start@@Base+0x7618>
   18d04:	add	r3, sp, #320	; 0x140
   18d08:	mov	r2, r6
   18d0c:	mov	r0, r7
   18d10:	bl	29418 <flatcc_json_parser_build_string@@Base>
   18d14:	ldr	r3, [sp, #320]	; 0x140
   18d18:	mov	r4, r0
   18d1c:	cmp	r3, #0
   18d20:	beq	18d70 <_start@@Base+0x6638>
   18d24:	mov	r1, r5
   18d28:	ldr	r0, [r7]
   18d2c:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   18d30:	cmp	r0, #0
   18d34:	beq	18d70 <_start@@Base+0x6638>
   18d38:	ldr	r3, [sp, #320]	; 0x140
   18d3c:	str	r3, [r0]
   18d40:	mov	r1, r4
   18d44:	mov	r2, r6
   18d48:	ldr	r3, [sp, #136]	; 0x88
   18d4c:	mov	r0, r7
   18d50:	bl	1582c <_start@@Base+0x30f4>
   18d54:	ldr	r3, [sp, #316]	; 0x13c
   18d58:	mov	r4, r0
   18d5c:	cmp	r3, #0
   18d60:	bne	19ce4 <_start@@Base+0x75ac>
   18d64:	ldr	r1, [r7, #24]
   18d68:	cmp	r1, #0
   18d6c:	beq	1a748 <_start@@Base+0x8010>
   18d70:	mov	r5, r6
   18d74:	mov	r6, r4
   18d78:	mov	r1, r6
   18d7c:	b	184dc <_start@@Base+0x5da4>
   18d80:	add	r4, r1, #16
   18d84:	sub	r0, r6, r4
   18d88:	cmp	r0, #8
   18d8c:	bhi	18dbc <_start@@Base+0x6684>
   18d90:	sub	r3, r0, #2
   18d94:	cmp	r3, #6
   18d98:	addls	pc, pc, r3, lsl #2
   18d9c:	b	18b7c <_start@@Base+0x6444>
   18da0:	b	18f3c <_start@@Base+0x6804>
   18da4:	b	18f30 <_start@@Base+0x67f8>
   18da8:	b	18f24 <_start@@Base+0x67ec>
   18dac:	b	18f18 <_start@@Base+0x67e0>
   18db0:	b	18f0c <_start@@Base+0x67d4>
   18db4:	b	18f48 <_start@@Base+0x6810>
   18db8:	b	18dbc <_start@@Base+0x6684>
   18dbc:	ldrb	sl, [r1, #23]
   18dc0:	mov	fp, #0
   18dc4:	mov	r3, fp
   18dc8:	ldrb	r8, [r1, #22]
   18dcc:	orr	r2, sl, r8, lsl #8
   18dd0:	ldrb	r8, [r1, #21]
   18dd4:	orr	r2, r2, r8, lsl #16
   18dd8:	ldrb	r8, [r1, #20]
   18ddc:	orr	r8, r2, r8, lsl #24
   18de0:	ldrb	sl, [r1, #19]
   18de4:	orr	r3, r3, sl
   18de8:	ldrb	sl, [r1, #18]
   18dec:	orr	r3, r3, sl, lsl #8
   18df0:	and	r2, r8, #-16777216	; 0xff000000
   18df4:	ldrb	sl, [r1, #17]
   18df8:	mov	r8, #0
   18dfc:	str	r2, [sp, #168]	; 0xa8
   18e00:	ldrb	r2, [r1, #16]
   18e04:	orr	sl, r3, sl, lsl #16
   18e08:	orr	r3, sl, r2, lsl #24
   18e0c:	sub	fp, pc, #492	; 0x1ec
   18e10:	ldrd	sl, [fp]
   18e14:	str	r3, [sp, #172]	; 0xac
   18e18:	ldrd	r2, [sp, #168]	; 0xa8
   18e1c:	cmp	r3, fp
   18e20:	cmpeq	r2, sl
   18e24:	bne	18b7c <_start@@Base+0x6444>
   18e28:	cmp	r0, #5
   18e2c:	ble	18b7c <_start@@Base+0x6444>
   18e30:	mov	r3, #5
   18e34:	mov	r2, r6
   18e38:	mov	r1, r4
   18e3c:	mov	r0, r7
   18e40:	bl	17b2c <_start@@Base+0x53f4>
   18e44:	cmp	r4, r0
   18e48:	mov	r9, r0
   18e4c:	beq	18b7c <_start@@Base+0x6444>
   18e50:	mov	r2, #0
   18e54:	mov	r3, #0
   18e58:	str	r8, [sp, #316]	; 0x13c
   18e5c:	add	r1, sp, #328	; 0x148
   18e60:	cmp	r6, r0
   18e64:	str	r8, [sp, #320]	; 0x140
   18e68:	strd	r2, [r1]
   18e6c:	beq	1a410 <_start@@Base+0x7cd8>
   18e70:	mov	r1, r0
   18e74:	add	r0, sp, #328	; 0x148
   18e78:	add	r3, sp, #320	; 0x140
   18e7c:	mov	r2, r6
   18e80:	str	r0, [sp]
   18e84:	mov	r0, r7
   18e88:	bl	28ea4 <flatcc_json_parser_integer@@Base>
   18e8c:	cmp	r9, r0
   18e90:	mov	r8, r0
   18e94:	bne	1a59c <_start@@Base+0x7e64>
   18e98:	ldr	r3, [pc, #-620]	; 18c34 <_start@@Base+0x64fc>
   18e9c:	add	ip, sp, #316	; 0x13c
   18ea0:	mov	r2, r6
   18ea4:	mov	r1, r8
   18ea8:	mov	r0, r7
   18eac:	str	ip, [sp]
   18eb0:	add	r3, pc, r3
   18eb4:	add	r3, r3, #148	; 0x94
   18eb8:	bl	14c48 <_start@@Base+0x2510>
   18ebc:	cmp	r6, r0
   18ec0:	cmpne	r0, r8
   18ec4:	mov	r4, r0
   18ec8:	beq	18d70 <_start@@Base+0x6638>
   18ecc:	ldr	r2, [sp, #316]	; 0x13c
   18ed0:	cmp	r2, #0
   18ed4:	bne	18ee4 <_start@@Base+0x67ac>
   18ed8:	ldr	r3, [r7, #8]
   18edc:	tst	r3, #2
   18ee0:	beq	18a98 <_start@@Base+0x6360>
   18ee4:	mov	r3, #4
   18ee8:	mov	r1, #1
   18eec:	ldr	r0, [r7]
   18ef0:	mov	r2, r3
   18ef4:	bl	24d44 <flatcc_builder_table_add@@Base>
   18ef8:	cmp	r0, #0
   18efc:	beq	18d70 <_start@@Base+0x6638>
   18f00:	ldr	r3, [sp, #316]	; 0x13c
   18f04:	str	r3, [r0]
   18f08:	b	18a98 <_start@@Base+0x6360>
   18f0c:	mov	r2, #0
   18f10:	mov	r3, r2
   18f14:	b	18dd0 <_start@@Base+0x6698>
   18f18:	mov	r2, #0
   18f1c:	mov	r3, r2
   18f20:	b	18dd8 <_start@@Base+0x66a0>
   18f24:	mov	r8, #0
   18f28:	mov	r3, r8
   18f2c:	b	18de0 <_start@@Base+0x66a8>
   18f30:	mov	r8, #0
   18f34:	mov	r3, r8
   18f38:	b	18de8 <_start@@Base+0x66b0>
   18f3c:	mov	r8, #0
   18f40:	mov	r3, r8
   18f44:	b	18df0 <_start@@Base+0x66b8>
   18f48:	mov	sl, #0
   18f4c:	mov	fp, #0
   18f50:	b	18dc4 <_start@@Base+0x668c>
   18f54:	ldrb	r3, [r4, #1]
   18f58:	cmp	r3, #32
   18f5c:	addhi	r4, r4, #1
   18f60:	bls	18ab4 <_start@@Base+0x637c>
   18f64:	b	18ac8 <_start@@Base+0x6390>
   18f68:	add	r1, r4, #1
   18f6c:	sub	r3, r6, r1
   18f70:	cmp	r3, #1
   18f74:	ble	18f88 <_start@@Base+0x6850>
   18f78:	ldrb	r3, [r4, #1]
   18f7c:	cmp	r3, #32
   18f80:	bhi	18f98 <_start@@Base+0x6860>
   18f84:	beq	1a35c <_start@@Base+0x7c24>
   18f88:	mov	r2, r6
   18f8c:	mov	r0, r7
   18f90:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   18f94:	mov	r1, r0
   18f98:	cmp	r6, r1
   18f9c:	beq	1a374 <_start@@Base+0x7c3c>
   18fa0:	ldrb	r3, [r1]
   18fa4:	cmp	r3, #125	; 0x7d
   18fa8:	beq	1a560 <_start@@Base+0x7e28>
   18fac:	mov	r3, #1
   18fb0:	str	r3, [sp, #312]	; 0x138
   18fb4:	b	187c0 <_start@@Base+0x6088>
   18fb8:	mov	r1, r4
   18fbc:	mov	r2, r6
   18fc0:	mov	r0, r7
   18fc4:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   18fc8:	mov	r4, r0
   18fcc:	b	185c0 <_start@@Base+0x5e88>
   18fd0:	cmp	r5, #6
   18fd4:	ble	18fb8 <_start@@Base+0x6880>
   18fd8:	mov	r3, #6
   18fdc:	mov	r2, r6
   18fe0:	mov	r1, r4
   18fe4:	mov	r0, r7
   18fe8:	bl	17b2c <_start@@Base+0x53f4>
   18fec:	cmp	r4, r0
   18ff0:	mov	r5, r0
   18ff4:	beq	18fb8 <_start@@Base+0x6880>
   18ff8:	mov	r1, #2
   18ffc:	ldr	r0, [r7]
   19000:	bl	23210 <flatcc_builder_start_table@@Base>
   19004:	cmp	r0, #0
   19008:	bne	196d8 <_start@@Base+0x6fa0>
   1900c:	add	r3, sp, #312	; 0x138
   19010:	mov	r1, r5
   19014:	mov	r2, r6
   19018:	mov	r0, r7
   1901c:	bl	1362c <_start@@Base+0xef4>
   19020:	ldr	r3, [sp, #312]	; 0x138
   19024:	cmp	r3, #0
   19028:	beq	1ac18 <_start@@Base+0x84e0>
   1902c:	ldr	r9, [pc, #-1028]	; 18c30 <_start@@Base+0x64f8>
   19030:	mov	r1, r0
   19034:	add	r9, pc, r9
   19038:	add	r9, r9, #64	; 0x40
   1903c:	cmp	r6, r1
   19040:	beq	1906c <_start@@Base+0x6934>
   19044:	ldrb	r3, [r1]
   19048:	cmp	r3, #34	; 0x22
   1904c:	moveq	r3, #0
   19050:	addeq	r1, r1, #1
   19054:	streq	r3, [r7, #12]
   19058:	beq	1906c <_start@@Base+0x6934>
   1905c:	cmp	r3, #46	; 0x2e
   19060:	movne	r3, #1
   19064:	strne	r3, [r7, #12]
   19068:	beq	19688 <_start@@Base+0x6f50>
   1906c:	sub	r3, r6, r1
   19070:	cmp	r3, #8
   19074:	bhi	190a8 <_start@@Base+0x6970>
   19078:	sub	r3, r3, #1
   1907c:	cmp	r3, #7
   19080:	addls	pc, pc, r3, lsl #2
   19084:	b	193b4 <_start@@Base+0x6c7c>
   19088:	b	19180 <_start@@Base+0x6a48>
   1908c:	b	19174 <_start@@Base+0x6a3c>
   19090:	b	19168 <_start@@Base+0x6a30>
   19094:	b	1915c <_start@@Base+0x6a24>
   19098:	b	19150 <_start@@Base+0x6a18>
   1909c:	b	1918c <_start@@Base+0x6a54>
   190a0:	b	19144 <_start@@Base+0x6a0c>
   190a4:	b	190a8 <_start@@Base+0x6970>
   190a8:	ldrb	sl, [r1, #7]
   190ac:	mov	fp, #0
   190b0:	mov	r3, fp
   190b4:	ldrb	r4, [r1, #6]
   190b8:	orr	r2, sl, r4, lsl #8
   190bc:	ldrb	r4, [r1, #5]
   190c0:	orr	r2, r2, r4, lsl #16
   190c4:	ldrb	r4, [r1, #4]
   190c8:	orr	r2, r2, r4, lsl #24
   190cc:	ldrb	sl, [r1, #3]
   190d0:	orr	r3, r3, sl
   190d4:	ldrb	sl, [r1, #2]
   190d8:	orr	sl, r3, sl, lsl #8
   190dc:	ldrb	r4, [r1, #1]
   190e0:	orr	sl, sl, r4, lsl #16
   190e4:	str	r2, [sp, #56]	; 0x38
   190e8:	ldrb	r2, [r1]
   190ec:	add	r5, pc, #868	; 0x364
   190f0:	ldrd	r4, [r5]
   190f4:	orr	r3, sl, r2, lsl #24
   190f8:	str	r3, [sp, #60]	; 0x3c
   190fc:	ldrd	r2, [sp, #56]	; 0x38
   19100:	cmp	r3, r5
   19104:	cmpeq	r2, r4
   19108:	bne	193b4 <_start@@Base+0x6c7c>
   1910c:	add	r8, r1, #8
   19110:	sub	r0, r6, r8
   19114:	cmp	r0, #8
   19118:	bhi	19198 <_start@@Base+0x6a60>
   1911c:	sub	r3, r0, #3
   19120:	cmp	r3, #5
   19124:	addls	pc, pc, r3, lsl #2
   19128:	b	193c8 <_start@@Base+0x6c90>
   1912c:	b	19384 <_start@@Base+0x6c4c>
   19130:	b	19378 <_start@@Base+0x6c40>
   19134:	b	19390 <_start@@Base+0x6c58>
   19138:	b	1939c <_start@@Base+0x6c64>
   1913c:	b	193a8 <_start@@Base+0x6c70>
   19140:	b	19198 <_start@@Base+0x6a60>
   19144:	mov	sl, #0
   19148:	mov	fp, #0
   1914c:	b	190b0 <_start@@Base+0x6978>
   19150:	mov	r2, #0
   19154:	mov	r3, r2
   19158:	b	190c4 <_start@@Base+0x698c>
   1915c:	mov	r2, #0
   19160:	mov	r3, r2
   19164:	b	190cc <_start@@Base+0x6994>
   19168:	mov	r2, #0
   1916c:	mov	r3, r2
   19170:	b	190d4 <_start@@Base+0x699c>
   19174:	mov	r2, #0
   19178:	mov	sl, r2
   1917c:	b	190dc <_start@@Base+0x69a4>
   19180:	mov	r2, #0
   19184:	mov	sl, r2
   19188:	b	190e4 <_start@@Base+0x69ac>
   1918c:	mov	r2, #0
   19190:	mov	r3, r2
   19194:	b	190bc <_start@@Base+0x6984>
   19198:	ldrb	r2, [r1, #15]
   1919c:	mov	r3, #0
   191a0:	mov	ip, r3
   191a4:	ldrb	r4, [r1, #14]
   191a8:	orr	r2, r2, r4, lsl #8
   191ac:	ldrb	r4, [r1, #13]
   191b0:	orr	r2, r2, r4, lsl #16
   191b4:	ldrb	r4, [r1, #12]
   191b8:	orr	r2, r2, r4, lsl #24
   191bc:	ldrb	sl, [r1, #11]
   191c0:	orr	ip, ip, sl
   191c4:	ldrb	r4, [r1, #8]
   191c8:	mov	r5, #0
   191cc:	str	r2, [sp, #32]
   191d0:	ldrb	sl, [r1, #10]
   191d4:	ldrb	r2, [r1, #9]
   191d8:	lsl	r4, r4, #24
   191dc:	orr	sl, ip, sl, lsl #8
   191e0:	orr	r4, r4, r2, lsl #16
   191e4:	orr	r3, r4, sl
   191e8:	add	fp, pc, #624	; 0x270
   191ec:	ldrd	sl, [fp]
   191f0:	str	r3, [sp, #36]	; 0x24
   191f4:	ldrd	r2, [sp, #32]
   191f8:	bic	r1, r2, #255	; 0xff
   191fc:	str	r1, [sp, #88]	; 0x58
   19200:	str	r3, [sp, #92]	; 0x5c
   19204:	ldrd	r2, [sp, #88]	; 0x58
   19208:	cmp	r3, fp
   1920c:	cmpeq	r2, sl
   19210:	beq	19474 <_start@@Base+0x6d3c>
   19214:	add	fp, pc, #588	; 0x24c
   19218:	ldrd	sl, [fp]
   1921c:	ldrd	r2, [sp, #32]
   19220:	cmp	r3, fp
   19224:	cmpeq	r2, sl
   19228:	bne	193c8 <_start@@Base+0x6c90>
   1922c:	cmp	r0, #8
   19230:	ble	193c8 <_start@@Base+0x6c90>
   19234:	mov	r3, #8
   19238:	mov	r2, r6
   1923c:	mov	r1, r8
   19240:	mov	r0, r7
   19244:	bl	17b2c <_start@@Base+0x53f4>
   19248:	cmp	r8, r0
   1924c:	mov	sl, r0
   19250:	beq	193c8 <_start@@Base+0x6c90>
   19254:	mov	r2, #0
   19258:	mov	r3, #0
   1925c:	str	r5, [sp, #316]	; 0x13c
   19260:	add	r1, sp, #328	; 0x148
   19264:	cmp	r6, r0
   19268:	str	r5, [sp, #320]	; 0x140
   1926c:	strd	r2, [r1]
   19270:	beq	19a30 <_start@@Base+0x72f8>
   19274:	mov	r1, r0
   19278:	add	r0, sp, #328	; 0x148
   1927c:	add	r3, sp, #320	; 0x140
   19280:	mov	r2, r6
   19284:	str	r0, [sp]
   19288:	mov	r0, r7
   1928c:	bl	28ea4 <flatcc_json_parser_integer@@Base>
   19290:	cmp	sl, r0
   19294:	mov	r5, r0
   19298:	bne	19bd0 <_start@@Base+0x7498>
   1929c:	add	r0, sp, #316	; 0x13c
   192a0:	mov	r3, r9
   192a4:	mov	r2, r6
   192a8:	mov	r1, r5
   192ac:	str	r0, [sp]
   192b0:	mov	r0, r7
   192b4:	bl	14c48 <_start@@Base+0x2510>
   192b8:	cmp	r6, r0
   192bc:	cmpne	r0, r5
   192c0:	mov	r4, r0
   192c4:	beq	18d70 <_start@@Base+0x6638>
   192c8:	ldr	r2, [sp, #316]	; 0x13c
   192cc:	cmp	r2, #0
   192d0:	bne	192e0 <_start@@Base+0x6ba8>
   192d4:	ldr	r3, [r7, #8]
   192d8:	tst	r3, #2
   192dc:	beq	19304 <_start@@Base+0x6bcc>
   192e0:	mov	r3, #4
   192e4:	mov	r1, #1
   192e8:	ldr	r0, [r7]
   192ec:	mov	r2, r3
   192f0:	bl	24d44 <flatcc_builder_table_add@@Base>
   192f4:	cmp	r0, #0
   192f8:	beq	18d70 <_start@@Base+0x6638>
   192fc:	ldr	r3, [sp, #316]	; 0x13c
   19300:	str	r3, [r0]
   19304:	sub	r3, r6, r4
   19308:	cmp	r3, #1
   1930c:	ble	19320 <_start@@Base+0x6be8>
   19310:	ldrb	r3, [r4]
   19314:	cmp	r3, #32
   19318:	bhi	19334 <_start@@Base+0x6bfc>
   1931c:	beq	19564 <_start@@Base+0x6e2c>
   19320:	mov	r1, r4
   19324:	mov	r2, r6
   19328:	mov	r0, r7
   1932c:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   19330:	mov	r4, r0
   19334:	cmp	r6, r4
   19338:	beq	19414 <_start@@Base+0x6cdc>
   1933c:	ldrb	r3, [r4]
   19340:	cmp	r3, #44	; 0x2c
   19344:	beq	19578 <_start@@Base+0x6e40>
   19348:	mov	r3, #0
   1934c:	str	r3, [sp, #312]	; 0x138
   19350:	ldrb	r3, [r4]
   19354:	cmp	r3, #125	; 0x7d
   19358:	beq	193e0 <_start@@Base+0x6ca8>
   1935c:	mov	r3, #10
   19360:	mov	r1, r4
   19364:	mov	r2, r6
   19368:	mov	r0, r7
   1936c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   19370:	ldr	r3, [sp, #312]	; 0x138
   19374:	b	19024 <_start@@Base+0x68ec>
   19378:	mov	r2, #0
   1937c:	mov	ip, r2
   19380:	b	191bc <_start@@Base+0x6a84>
   19384:	mov	r2, #0
   19388:	mov	ip, r2
   1938c:	b	191c4 <_start@@Base+0x6a8c>
   19390:	mov	r2, #0
   19394:	mov	ip, r2
   19398:	b	191b4 <_start@@Base+0x6a7c>
   1939c:	mov	r2, #0
   193a0:	mov	ip, r2
   193a4:	b	191ac <_start@@Base+0x6a74>
   193a8:	mov	r2, #0
   193ac:	mov	r3, #0
   193b0:	b	191a0 <_start@@Base+0x6a68>
   193b4:	mov	r2, r6
   193b8:	mov	r0, r7
   193bc:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   193c0:	mov	r4, r0
   193c4:	b	19304 <_start@@Base+0x6bcc>
   193c8:	mov	r1, r8
   193cc:	mov	r2, r6
   193d0:	mov	r0, r7
   193d4:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   193d8:	mov	r4, r0
   193dc:	b	19304 <_start@@Base+0x6bcc>
   193e0:	add	r1, r4, #1
   193e4:	sub	r3, r6, r1
   193e8:	cmp	r3, #1
   193ec:	ble	19400 <_start@@Base+0x6cc8>
   193f0:	ldrb	r3, [r4, #1]
   193f4:	cmp	r3, #32
   193f8:	bhi	196b8 <_start@@Base+0x6f80>
   193fc:	beq	19a38 <_start@@Base+0x7300>
   19400:	mov	r2, r6
   19404:	mov	r0, r7
   19408:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   1940c:	ldr	r3, [sp, #312]	; 0x138
   19410:	b	19024 <_start@@Base+0x68ec>
   19414:	mov	r3, #0
   19418:	str	r3, [sp, #312]	; 0x138
   1941c:	ldr	r3, [r7, #24]
   19420:	cmp	r3, #0
   19424:	bne	18d70 <_start@@Base+0x6638>
   19428:	ldr	r0, [r7]
   1942c:	bl	23bf4 <flatcc_builder_end_table@@Base>
   19430:	subs	r5, r0, #0
   19434:	beq	18d70 <_start@@Base+0x6638>
   19438:	mov	r1, #1
   1943c:	ldr	r0, [r7]
   19440:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   19444:	cmp	r0, #0
   19448:	bne	18c00 <_start@@Base+0x64c8>
   1944c:	mov	r5, r6
   19450:	mov	r6, r4
   19454:	b	184f0 <_start@@Base+0x5db8>
   19458:	svcpl	0x00626262
   1945c:	cmnvs	r1, r1, ror #2
   19460:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   19464:	subsvs	r7, pc, #116, 6	; 0xd0000001
   19468:	cmnvs	r2, pc, asr r4
   1946c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   19470:	andeq	r3, r2, r8, lsl #23
   19474:	cmp	r0, #7
   19478:	ble	193c8 <_start@@Base+0x6c90>
   1947c:	mov	r3, #7
   19480:	mov	r2, r6
   19484:	mov	r1, r8
   19488:	mov	r0, r7
   1948c:	bl	17b2c <_start@@Base+0x53f4>
   19490:	cmp	r8, r0
   19494:	mov	sl, r0
   19498:	beq	193c8 <_start@@Base+0x6c90>
   1949c:	mov	r2, #0
   194a0:	mov	r3, #0
   194a4:	str	r5, [sp, #316]	; 0x13c
   194a8:	add	r1, sp, #320	; 0x140
   194ac:	cmp	r6, r0
   194b0:	strd	r2, [r1]
   194b4:	add	r1, sp, #328	; 0x148
   194b8:	strd	r2, [r1]
   194bc:	beq	19a28 <_start@@Base+0x72f0>
   194c0:	mov	r1, r0
   194c4:	add	r0, sp, #328	; 0x148
   194c8:	add	r3, sp, #316	; 0x13c
   194cc:	mov	r2, r6
   194d0:	str	r0, [sp]
   194d4:	mov	r0, r7
   194d8:	bl	28ea4 <flatcc_json_parser_integer@@Base>
   194dc:	cmp	sl, r0
   194e0:	mov	r4, r0
   194e4:	bne	19b9c <_start@@Base+0x7464>
   194e8:	ldr	r3, [pc, #-128]	; 19470 <_start@@Base+0x6d38>
   194ec:	add	ip, sp, #320	; 0x140
   194f0:	mov	r2, r6
   194f4:	mov	r1, r4
   194f8:	mov	r0, r7
   194fc:	str	ip, [sp]
   19500:	add	r3, pc, r3
   19504:	add	r3, r3, #52	; 0x34
   19508:	bl	14e98 <_start@@Base+0x2760>
   1950c:	cmp	r6, r0
   19510:	cmpne	r0, r4
   19514:	beq	1ac0c <_start@@Base+0x84d4>
   19518:	add	r3, sp, #320	; 0x140
   1951c:	mov	r4, r0
   19520:	ldrd	r2, [r3]
   19524:	orrs	r3, r2, r3
   19528:	bne	19538 <_start@@Base+0x6e00>
   1952c:	ldr	r3, [r7, #8]
   19530:	tst	r3, #2
   19534:	beq	19304 <_start@@Base+0x6bcc>
   19538:	mov	r3, #8
   1953c:	mov	r1, #0
   19540:	ldr	r0, [r7]
   19544:	mov	r2, r3
   19548:	bl	24d44 <flatcc_builder_table_add@@Base>
   1954c:	cmp	r0, #0
   19550:	beq	18d70 <_start@@Base+0x6638>
   19554:	add	r3, sp, #320	; 0x140
   19558:	ldrd	r2, [r3]
   1955c:	strd	r2, [r0]
   19560:	b	19304 <_start@@Base+0x6bcc>
   19564:	ldrb	r3, [r4, #1]
   19568:	cmp	r3, #32
   1956c:	addhi	r4, r4, #1
   19570:	bls	19320 <_start@@Base+0x6be8>
   19574:	b	19334 <_start@@Base+0x6bfc>
   19578:	add	r1, r4, #1
   1957c:	sub	r3, r6, r1
   19580:	cmp	r3, #1
   19584:	ble	19598 <_start@@Base+0x6e60>
   19588:	ldrb	r3, [r4, #1]
   1958c:	cmp	r3, #32
   19590:	bhi	195a8 <_start@@Base+0x6e70>
   19594:	beq	19c28 <_start@@Base+0x74f0>
   19598:	mov	r2, r6
   1959c:	mov	r0, r7
   195a0:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   195a4:	mov	r1, r0
   195a8:	cmp	r6, r1
   195ac:	beq	19c40 <_start@@Base+0x7508>
   195b0:	ldrb	r3, [r1]
   195b4:	cmp	r3, #125	; 0x7d
   195b8:	beq	1a398 <_start@@Base+0x7c60>
   195bc:	mov	r3, #1
   195c0:	str	r3, [sp, #312]	; 0x138
   195c4:	b	1903c <_start@@Base+0x6904>
   195c8:	mov	r3, r6
   195cc:	mov	r6, r5
   195d0:	mov	r5, r3
   195d4:	mov	r3, #0
   195d8:	str	r3, [sp, #300]	; 0x12c
   195dc:	ldr	r3, [r7, #24]
   195e0:	cmp	r3, #0
   195e4:	bne	17cac <_start@@Base+0x5574>
   195e8:	mov	r1, r6
   195ec:	mov	r2, r5
   195f0:	ldr	r3, [sp, #304]	; 0x130
   195f4:	mov	r0, r7
   195f8:	bl	29678 <flatcc_json_parser_finalize_unions@@Base>
   195fc:	mov	sl, r0
   19600:	ldr	r0, [r7]
   19604:	bl	23bf4 <flatcc_builder_end_table@@Base>
   19608:	ldr	r3, [sp, #260]	; 0x104
   1960c:	cmp	r0, #0
   19610:	str	r0, [r3]
   19614:	bne	17cc4 <_start@@Base+0x558c>
   19618:	mov	r6, sl
   1961c:	b	17cac <_start@@Base+0x5574>
   19620:	ldrb	r3, [r5, #1]
   19624:	cmp	r3, #32
   19628:	addhi	r5, r5, #1
   1962c:	bls	17e78 <_start@@Base+0x5740>
   19630:	b	17e8c <_start@@Base+0x5754>
   19634:	add	r4, r5, #1
   19638:	sub	r3, r6, r4
   1963c:	cmp	r3, #1
   19640:	ble	19654 <_start@@Base+0x6f1c>
   19644:	ldrb	r3, [r5, #1]
   19648:	cmp	r3, #32
   1964c:	bhi	19668 <_start@@Base+0x6f30>
   19650:	beq	1a624 <_start@@Base+0x7eec>
   19654:	mov	r1, r4
   19658:	mov	r2, r6
   1965c:	mov	r0, r7
   19660:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   19664:	mov	r4, r0
   19668:	cmp	r6, r4
   1966c:	beq	1a9a4 <_start@@Base+0x826c>
   19670:	ldrb	r3, [r4]
   19674:	cmp	r3, #125	; 0x7d
   19678:	beq	1a940 <_start@@Base+0x8208>
   1967c:	mov	r3, #1
   19680:	str	r3, [sp, #300]	; 0x12c
   19684:	b	17d3c <_start@@Base+0x5604>
   19688:	mov	r3, #5
   1968c:	mov	r2, r6
   19690:	mov	r0, r7
   19694:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   19698:	mov	r1, r0
   1969c:	b	1906c <_start@@Base+0x6934>
   196a0:	mov	r1, r0
   196a4:	mov	r3, #5
   196a8:	mov	r2, r6
   196ac:	mov	r0, r7
   196b0:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   196b4:	b	181d0 <_start@@Base+0x5a98>
   196b8:	mov	r4, r1
   196bc:	b	1941c <_start@@Base+0x6ce4>
   196c0:	mov	r3, #5
   196c4:	mov	r2, r6
   196c8:	mov	r0, r7
   196cc:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   196d0:	mov	r1, r0
   196d4:	b	187f0 <_start@@Base+0x60b8>
   196d8:	mov	r3, r6
   196dc:	mov	r6, r5
   196e0:	mov	r5, r3
   196e4:	b	18d78 <_start@@Base+0x6640>
   196e8:	mov	r5, r1
   196ec:	b	18674 <_start@@Base+0x5f3c>
   196f0:	mov	r4, r1
   196f4:	b	18bd0 <_start@@Base+0x6498>
   196f8:	ldrd	r0, [sp, #40]	; 0x28
   196fc:	add	r3, pc, #844	; 0x34c
   19700:	ldrd	r2, [r3]
   19704:	and	lr, r0, #-16777216	; 0xff000000
   19708:	str	lr, [sp, #192]	; 0xc0
   1970c:	str	r1, [sp, #196]	; 0xc4
   19710:	ldrd	r0, [sp, #192]	; 0xc0
   19714:	cmp	r1, r3
   19718:	cmpeq	r0, r2
   1971c:	bne	17f24 <_start@@Base+0x57ec>
   19720:	cmp	ip, #5
   19724:	ble	17f24 <_start@@Base+0x57ec>
   19728:	mov	r3, #5
   1972c:	mov	r2, r6
   19730:	mov	r1, r4
   19734:	mov	r0, r7
   19738:	bl	17b2c <_start@@Base+0x53f4>
   1973c:	cmp	r0, r4
   19740:	mov	r5, r0
   19744:	beq	17f24 <_start@@Base+0x57ec>
   19748:	mov	r1, #10
   1974c:	ldr	r0, [r7]
   19750:	bl	23210 <flatcc_builder_start_table@@Base>
   19754:	cmp	r0, #0
   19758:	bne	186b0 <_start@@Base+0x5f78>
   1975c:	add	r0, sp, #328	; 0x148
   19760:	mov	r3, #5
   19764:	mov	r2, r6
   19768:	mov	r1, r5
   1976c:	str	r0, [sp]
   19770:	mov	r0, r7
   19774:	bl	295e4 <flatcc_json_parser_prepare_unions@@Base>
   19778:	cmp	r6, r0
   1977c:	beq	186b0 <_start@@Base+0x5f78>
   19780:	add	r4, sp, #320	; 0x140
   19784:	mov	r1, r5
   19788:	mov	r3, r4
   1978c:	mov	r2, r6
   19790:	mov	r0, r7
   19794:	bl	1362c <_start@@Base+0xef4>
   19798:	ldr	r3, [sp, #320]	; 0x140
   1979c:	mov	fp, r0
   197a0:	cmp	r3, #0
   197a4:	beq	1a3f8 <_start@@Base+0x7cc0>
   197a8:	add	r9, pc, #680	; 0x2a8
   197ac:	ldrd	r8, [r9]
   197b0:	add	r3, sp, #272	; 0x110
   197b4:	mov	sl, r4
   197b8:	ldrd	r4, [r3]
   197bc:	strd	r8, [sp, #136]	; 0x88
   197c0:	b	19880 <_start@@Base+0x7148>
   197c4:	add	r3, pc, #660	; 0x294
   197c8:	ldrd	r2, [r3]
   197cc:	cmp	r1, r3
   197d0:	cmpeq	r0, r2
   197d4:	beq	199b0 <_start@@Base+0x7278>
   197d8:	add	r3, pc, #648	; 0x288
   197dc:	ldrd	r2, [r3]
   197e0:	cmp	r1, r3
   197e4:	cmpeq	r0, r2
   197e8:	beq	1a4b0 <_start@@Base+0x7d78>
   197ec:	add	r3, pc, #636	; 0x27c
   197f0:	ldrd	r2, [r3]
   197f4:	and	r4, r0, #-16777216	; 0xff000000
   197f8:	mov	r5, r1
   197fc:	cmp	r1, r3
   19800:	cmpeq	r4, r2
   19804:	bne	19a10 <_start@@Base+0x72d8>
   19808:	sub	r3, r6, fp
   1980c:	cmp	r3, #5
   19810:	ble	19a10 <_start@@Base+0x72d8>
   19814:	mov	r1, fp
   19818:	mov	r3, #5
   1981c:	mov	r2, r6
   19820:	mov	r0, r7
   19824:	bl	17b2c <_start@@Base+0x53f4>
   19828:	cmp	r0, fp
   1982c:	mov	r1, r0
   19830:	beq	19a10 <_start@@Base+0x72d8>
   19834:	ldr	ip, [pc, #604]	; 19a98 <_start@@Base+0x7360>
   19838:	mov	fp, #7
   1983c:	mov	r3, #3
   19840:	add	ip, pc, ip
   19844:	ldr	lr, [sp, #328]	; 0x148
   19848:	mov	r2, r6
   1984c:	mov	r0, r7
   19850:	stm	sp, {fp, lr}
   19854:	str	ip, [sp, #8]
   19858:	bl	296f0 <flatcc_json_parser_union@@Base>
   1985c:	mov	r1, r0
   19860:	mov	r3, sl
   19864:	mov	r2, r6
   19868:	mov	r0, r7
   1986c:	bl	1582c <_start@@Base+0x30f4>
   19870:	ldr	r3, [sp, #320]	; 0x140
   19874:	mov	fp, r0
   19878:	cmp	r3, #0
   1987c:	beq	1a3f0 <_start@@Base+0x7cb8>
   19880:	cmp	r6, fp
   19884:	beq	198b0 <_start@@Base+0x7178>
   19888:	ldrb	r3, [fp]
   1988c:	cmp	r3, #34	; 0x22
   19890:	moveq	r3, #0
   19894:	addeq	fp, fp, #1
   19898:	streq	r3, [r7, #12]
   1989c:	beq	198b0 <_start@@Base+0x7178>
   198a0:	cmp	r3, #46	; 0x2e
   198a4:	movne	r3, #1
   198a8:	strne	r3, [r7, #12]
   198ac:	beq	1a868 <_start@@Base+0x8130>
   198b0:	mov	r1, r6
   198b4:	mov	r0, fp
   198b8:	bl	12828 <_start@@Base+0xf0>
   198bc:	add	r3, pc, #436	; 0x1b4
   198c0:	ldrd	r2, [r3]
   198c4:	cmp	r1, r3
   198c8:	cmpeq	r0, r2
   198cc:	bls	197c4 <_start@@Base+0x708c>
   198d0:	add	r3, pc, #424	; 0x1a8
   198d4:	ldrd	r2, [r3]
   198d8:	cmp	r1, r3
   198dc:	cmpeq	r0, r2
   198e0:	bhi	19aa0 <_start@@Base+0x7368>
   198e4:	ldrd	r2, [sp, #136]	; 0x88
   198e8:	cmp	r1, r3
   198ec:	cmpeq	r0, r2
   198f0:	bne	19a10 <_start@@Base+0x72d8>
   198f4:	add	fp, fp, #8
   198f8:	mov	r1, r6
   198fc:	mov	r0, fp
   19900:	bl	12828 <_start@@Base+0xf0>
   19904:	bic	r0, r0, #255	; 0xff
   19908:	add	r3, pc, #376	; 0x178
   1990c:	ldrd	r2, [r3]
   19910:	strd	r0, [sp, #248]	; 0xf8
   19914:	ldrd	r8, [sp, #248]	; 0xf8
   19918:	cmp	r9, r3
   1991c:	cmpeq	r8, r2
   19920:	beq	1aa84 <_start@@Base+0x834c>
   19924:	lsr	r1, r1, #16
   19928:	mov	r3, #0
   1992c:	mov	r2, #0
   19930:	lsl	r1, r1, #16
   19934:	str	r3, [sp, #232]	; 0xe8
   19938:	mov	r3, #0
   1993c:	movt	r3, #29299	; 0x7273
   19940:	str	r1, [sp, #236]	; 0xec
   19944:	ldrd	r0, [sp, #232]	; 0xe8
   19948:	cmp	r1, r3
   1994c:	cmpeq	r0, r2
   19950:	bne	19a10 <_start@@Base+0x72d8>
   19954:	sub	r3, r6, fp
   19958:	cmp	r3, #2
   1995c:	ble	19a10 <_start@@Base+0x72d8>
   19960:	mov	r1, fp
   19964:	mov	r3, #2
   19968:	mov	r2, r6
   1996c:	mov	r0, r7
   19970:	bl	17b2c <_start@@Base+0x53f4>
   19974:	cmp	fp, r0
   19978:	mov	r1, r0
   1997c:	beq	19a10 <_start@@Base+0x72d8>
   19980:	ldr	ip, [pc, #276]	; 19a9c <_start@@Base+0x7364>
   19984:	mov	fp, #9
   19988:	mov	r3, #4
   1998c:	mov	r2, r6
   19990:	mov	r0, r7
   19994:	ldr	lr, [sp, #328]	; 0x148
   19998:	add	ip, pc, ip
   1999c:	stm	sp, {fp, lr}
   199a0:	str	ip, [sp, #8]
   199a4:	bl	29aa4 <flatcc_json_parser_union_vector@@Base>
   199a8:	mov	r1, r0
   199ac:	b	19860 <_start@@Base+0x7128>
   199b0:	add	fp, fp, #8
   199b4:	mov	r1, r6
   199b8:	mov	r0, fp
   199bc:	bl	12828 <_start@@Base+0xf0>
   199c0:	bic	r0, r0, #255	; 0xff
   199c4:	add	r3, pc, #196	; 0xc4
   199c8:	ldrd	r2, [r3]
   199cc:	strd	r0, [sp, #224]	; 0xe0
   199d0:	ldrd	r8, [sp, #224]	; 0xe0
   199d4:	cmp	r9, r3
   199d8:	cmpeq	r8, r2
   199dc:	beq	1a8b4 <_start@@Base+0x817c>
   199e0:	lsr	r1, r1, #16
   199e4:	mov	r3, #0
   199e8:	mov	r2, #0
   199ec:	lsl	r1, r1, #16
   199f0:	str	r3, [sp, #208]	; 0xd0
   199f4:	mov	r3, #0
   199f8:	movt	r3, #29556	; 0x7374
   199fc:	str	r1, [sp, #212]	; 0xd4
   19a00:	ldrd	r0, [sp, #208]	; 0xd0
   19a04:	cmp	r1, r3
   19a08:	cmpeq	r0, r2
   19a0c:	beq	1a708 <_start@@Base+0x7fd0>
   19a10:	mov	r1, fp
   19a14:	mov	r2, r6
   19a18:	mov	r0, r7
   19a1c:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   19a20:	mov	r1, r0
   19a24:	b	19860 <_start@@Base+0x7128>
   19a28:	mov	r4, r6
   19a2c:	b	194e8 <_start@@Base+0x6db0>
   19a30:	mov	r5, r6
   19a34:	b	1929c <_start@@Base+0x6b64>
   19a38:	ldrb	r3, [r4, #2]
   19a3c:	cmp	r3, #32
   19a40:	bls	19400 <_start@@Base+0x6cc8>
   19a44:	add	r4, r4, #2
   19a48:	b	1941c <_start@@Base+0x6ce4>
   19a4c:	nop	{0}
   19a50:	strvs	r0, [r0, #-0]
   19a54:	stclvs	6, cr7, [pc, #-420]!	; 198b8 <_start@@Base+0x7180>
   19a58:	cmnvs	r3, r5, ror #8
   19a5c:	cmnvs	r8, #-2147483620	; 0x8000001c
   19a60:	strbvs	r6, [pc, -r9, ror #28]!
   19a64:	cmnvs	lr, r1, ror #8
   19a68:	svcvs	0x005f7479
   19a6c:	cmnvs	r1, #6464	; 0x1940
   19a70:	svcvs	0x00000000
   19a74:	cmnvs	r1, #6464	; 0x1940
   19a78:	cmnvs	r3, r4, ror #8
   19a7c:	cmnvs	r8, #-2147483620	; 0x8000001c
   19a80:	svcpl	0x00636860
   19a84:			; <UNDEFINED> instruction: 0x6d61696e
   19a88:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   19a8c:	rsbsvc	r5, r3, #116, 30	; 0x1d0
   19a90:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   19a94:	cmnvc	r4, #116, 30	; 0x1d0
   19a98:	andeq	r1, r0, r8, ror #7
   19a9c:	muleq	r0, r0, r2
   19aa0:	add	r3, pc, #968	; 0x3c8
   19aa4:	ldrd	r2, [r3]
   19aa8:	cmp	r1, r3
   19aac:	cmpeq	r0, r2
   19ab0:	beq	1a638 <_start@@Base+0x7f00>
   19ab4:	add	r3, pc, #956	; 0x3bc
   19ab8:	ldrd	r2, [r3]
   19abc:	cmp	r1, r3
   19ac0:	cmpeq	r0, r2
   19ac4:	bne	19a10 <_start@@Base+0x72d8>
   19ac8:	add	fp, fp, #8
   19acc:	mov	r1, r6
   19ad0:	mov	r0, fp
   19ad4:	bl	12828 <_start@@Base+0xf0>
   19ad8:	lsr	r3, r0, #16
   19adc:	str	r3, [sp, #240]	; 0xf0
   19ae0:	ldr	r0, [sp, #240]	; 0xf0
   19ae4:	str	r1, [sp, #244]	; 0xf4
   19ae8:	add	r3, pc, #912	; 0x390
   19aec:	ldrd	r2, [r3]
   19af0:	lsl	r0, r0, #16
   19af4:	str	r0, [sp, #240]	; 0xf0
   19af8:	ldrd	r8, [sp, #240]	; 0xf0
   19afc:	cmp	r9, r3
   19b00:	cmpeq	r8, r2
   19b04:	beq	1a808 <_start@@Base+0x80d0>
   19b08:	mov	r3, #0
   19b0c:	str	r3, [sp, #280]	; 0x118
   19b10:	and	r3, r1, #-16777216	; 0xff000000
   19b14:	str	r3, [sp, #284]	; 0x11c
   19b18:	add	r3, sp, #280	; 0x118
   19b1c:	ldrd	r2, [r3]
   19b20:	cmp	r3, #1795162112	; 0x6b000000
   19b24:	cmpeq	r2, #0
   19b28:	bne	19a10 <_start@@Base+0x72d8>
   19b2c:	sub	r3, r6, fp
   19b30:	cmp	r3, #1
   19b34:	ble	19a10 <_start@@Base+0x72d8>
   19b38:	mov	r1, fp
   19b3c:	mov	r3, #1
   19b40:	mov	r2, r6
   19b44:	mov	r0, r7
   19b48:	bl	17b2c <_start@@Base+0x53f4>
   19b4c:	cmp	fp, r0
   19b50:	mov	r1, r0
   19b54:	beq	19a10 <_start@@Base+0x72d8>
   19b58:	ldr	ip, [pc, #824]	; 19e98 <_start@@Base+0x7760>
   19b5c:	mov	fp, #5
   19b60:	mov	r3, #2
   19b64:	add	ip, pc, ip
   19b68:	b	19844 <_start@@Base+0x710c>
   19b6c:	ldrb	r3, [r4, #2]
   19b70:	cmp	r3, #32
   19b74:	bls	18654 <_start@@Base+0x5f1c>
   19b78:	add	r5, r4, #2
   19b7c:	b	18674 <_start@@Base+0x5f3c>
   19b80:	mov	r4, r6
   19b84:	b	18a28 <_start@@Base+0x62f0>
   19b88:	ldrb	r3, [r4, #2]
   19b8c:	cmp	r3, #32
   19b90:	bls	18bb4 <_start@@Base+0x647c>
   19b94:	add	r4, r4, #2
   19b98:	b	18bd0 <_start@@Base+0x6498>
   19b9c:	ldr	r1, [sp, #316]	; 0x13c
   19ba0:	add	r3, sp, #328	; 0x148
   19ba4:	ldrd	r2, [r3]
   19ba8:	cmp	r1, r5
   19bac:	beq	1a434 <_start@@Base+0x7cfc>
   19bb0:	cmp	r3, #-2147483648	; 0x80000000
   19bb4:	cmpeq	r2, #0
   19bb8:	bhi	1ab4c <_start@@Base+0x8414>
   19bbc:	rsbs	r2, r2, #0
   19bc0:	add	r1, sp, #320	; 0x140
   19bc4:	rsc	r3, r3, #0
   19bc8:	strd	r2, [r1]
   19bcc:	b	19524 <_start@@Base+0x6dec>
   19bd0:	ldr	r3, [sp, #320]	; 0x140
   19bd4:	cmp	r3, #0
   19bd8:	bne	1aa0c <_start@@Base+0x82d4>
   19bdc:	add	r3, sp, #328	; 0x148
   19be0:	mov	r1, #0
   19be4:	ldrd	r2, [r3]
   19be8:	mvn	r0, #0
   19bec:	cmp	r3, r1
   19bf0:	cmpeq	r2, r0
   19bf4:	movls	r4, r5
   19bf8:	strls	r2, [sp, #316]	; 0x13c
   19bfc:	bls	192cc <_start@@Base+0x6b94>
   19c00:	mov	r1, r5
   19c04:	mov	r3, #7
   19c08:	mov	r2, r6
   19c0c:	mov	r0, r7
   19c10:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   19c14:	mov	r4, r0
   19c18:	cmp	sl, r4
   19c1c:	bne	192c8 <_start@@Base+0x6b90>
   19c20:	mov	r5, sl
   19c24:	b	1929c <_start@@Base+0x6b64>
   19c28:	ldrb	r3, [r4, #2]
   19c2c:	cmp	r3, #32
   19c30:	addhi	r1, r4, #2
   19c34:	bls	19598 <_start@@Base+0x6e60>
   19c38:	cmp	r6, r1
   19c3c:	bne	195b0 <_start@@Base+0x6e78>
   19c40:	mov	ip, #0
   19c44:	mov	r3, #10
   19c48:	mov	r2, r6
   19c4c:	mov	r1, r6
   19c50:	mov	r0, r7
   19c54:	str	ip, [sp, #312]	; 0x138
   19c58:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   19c5c:	ldr	r3, [sp, #312]	; 0x138
   19c60:	b	19024 <_start@@Base+0x68ec>
   19c64:	mov	r1, r4
   19c68:	mov	r3, #5
   19c6c:	mov	r2, r6
   19c70:	mov	r0, r7
   19c74:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   19c78:	mov	r4, r0
   19c7c:	b	17d6c <_start@@Base+0x5634>
   19c80:	ldr	r1, [sp, #316]	; 0x13c
   19c84:	add	r3, sp, #328	; 0x148
   19c88:	ldrd	r2, [r3]
   19c8c:	cmp	r1, #0
   19c90:	beq	1a5f4 <_start@@Base+0x7ebc>
   19c94:	cmp	r3, #-2147483648	; 0x80000000
   19c98:	cmpeq	r2, #0
   19c9c:	bhi	1ab84 <_start@@Base+0x844c>
   19ca0:	rsbs	r2, r2, #0
   19ca4:	add	r1, sp, #320	; 0x140
   19ca8:	rsc	r3, r3, #0
   19cac:	strd	r2, [r1]
   19cb0:	b	18a5c <_start@@Base+0x6324>
   19cb4:	add	r3, sp, #316	; 0x13c
   19cb8:	mov	r1, r9
   19cbc:	mov	r2, r6
   19cc0:	mov	r0, r7
   19cc4:	str	r3, [sp, #136]	; 0x88
   19cc8:	bl	1362c <_start@@Base+0xef4>
   19ccc:	ldr	r3, [sp, #316]	; 0x13c
   19cd0:	mov	r4, r0
   19cd4:	cmp	r3, #0
   19cd8:	beq	18d64 <_start@@Base+0x662c>
   19cdc:	add	fp, pc, #420	; 0x1a4
   19ce0:	ldrd	sl, [fp]
   19ce4:	cmp	r6, r4
   19ce8:	beq	19d14 <_start@@Base+0x75dc>
   19cec:	ldrb	r3, [r4]
   19cf0:	cmp	r3, #34	; 0x22
   19cf4:	moveq	r3, #0
   19cf8:	addeq	r4, r4, #1
   19cfc:	streq	r3, [r7, #12]
   19d00:	beq	19d14 <_start@@Base+0x75dc>
   19d04:	cmp	r3, #46	; 0x2e
   19d08:	movne	r3, #1
   19d0c:	strne	r3, [r7, #12]
   19d10:	beq	1a250 <_start@@Base+0x7b18>
   19d14:	sub	ip, r6, r4
   19d18:	cmp	ip, #8
   19d1c:	bhi	18c38 <_start@@Base+0x6500>
   19d20:	sub	r3, ip, #1
   19d24:	cmp	r3, #7
   19d28:	addls	pc, pc, r3, lsl #2
   19d2c:	b	19d50 <_start@@Base+0x7618>
   19d30:	b	19d50 <_start@@Base+0x7618>
   19d34:	b	19da4 <_start@@Base+0x766c>
   19d38:	b	19d80 <_start@@Base+0x7648>
   19d3c:	b	19d98 <_start@@Base+0x7660>
   19d40:	b	19d8c <_start@@Base+0x7654>
   19d44:	b	19d68 <_start@@Base+0x7630>
   19d48:	b	19d74 <_start@@Base+0x763c>
   19d4c:	b	18c38 <_start@@Base+0x6500>
   19d50:	mov	r1, r4
   19d54:	mov	r2, r6
   19d58:	mov	r0, r7
   19d5c:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   19d60:	mov	r4, r0
   19d64:	b	18d40 <_start@@Base+0x6608>
   19d68:	mov	r2, #0
   19d6c:	mov	lr, r2
   19d70:	b	18c4c <_start@@Base+0x6514>
   19d74:	mov	r2, #0
   19d78:	mov	r3, #0
   19d7c:	b	18c40 <_start@@Base+0x6508>
   19d80:	mov	r8, #0
   19d84:	mov	lr, r8
   19d88:	b	18c64 <_start@@Base+0x652c>
   19d8c:	mov	r2, #0
   19d90:	mov	lr, r2
   19d94:	b	18c54 <_start@@Base+0x651c>
   19d98:	mov	r8, #0
   19d9c:	mov	lr, r8
   19da0:	b	18c5c <_start@@Base+0x6524>
   19da4:	ldrb	r2, [r4, #1]
   19da8:	mov	r1, #0
   19dac:	ldrb	r0, [r4]
   19db0:	str	r1, [sp, #24]
   19db4:	lsl	r2, r2, #16
   19db8:	orr	r3, r2, r0, lsl #24
   19dbc:	str	r3, [sp, #28]
   19dc0:	ldrd	r2, [sp, #24]
   19dc4:	cmp	r3, fp
   19dc8:	cmpeq	r2, sl
   19dcc:	bls	18cb0 <_start@@Base+0x6578>
   19dd0:	add	r1, pc, #184	; 0xb8
   19dd4:	ldrd	r0, [r1]
   19dd8:	ldrd	r2, [sp, #24]
   19ddc:	cmp	r3, r1
   19de0:	cmpeq	r2, r0
   19de4:	beq	19f5c <_start@@Base+0x7824>
   19de8:	mov	r1, #0
   19dec:	mov	r0, #0
   19df0:	str	r1, [sp, #128]	; 0x80
   19df4:	movw	r1, #25443	; 0x6363
   19df8:	movt	r1, #25443	; 0x6363
   19dfc:	str	r3, [sp, #132]	; 0x84
   19e00:	ldrd	r2, [sp, #128]	; 0x80
   19e04:	cmp	r3, r1
   19e08:	cmpeq	r2, r0
   19e0c:	bne	19ffc <_start@@Base+0x78c4>
   19e10:	cmp	ip, #4
   19e14:	ble	19d50 <_start@@Base+0x7618>
   19e18:	mov	r1, r4
   19e1c:	mov	r3, #4
   19e20:	mov	r2, r6
   19e24:	mov	r0, r7
   19e28:	bl	17b2c <_start@@Base+0x53f4>
   19e2c:	cmp	r0, r4
   19e30:	mov	r1, r0
   19e34:	beq	19d50 <_start@@Base+0x7618>
   19e38:	add	r3, sp, #320	; 0x140
   19e3c:	mov	r2, r6
   19e40:	mov	r0, r7
   19e44:	bl	29418 <flatcc_json_parser_build_string@@Base>
   19e48:	ldr	r3, [sp, #320]	; 0x140
   19e4c:	mov	r4, r0
   19e50:	cmp	r3, #0
   19e54:	beq	18d70 <_start@@Base+0x6638>
   19e58:	mov	r1, #4
   19e5c:	ldr	r0, [r7]
   19e60:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   19e64:	cmp	r0, #0
   19e68:	bne	18d38 <_start@@Base+0x6600>
   19e6c:	b	18d70 <_start@@Base+0x6638>
   19e70:	svcpl	0x00636861
   19e74:			; <UNDEFINED> instruction: 0x6d61696e
   19e78:	svcpl	0x006b6963
   19e7c:	cmnvc	r9, #1694498816	; 0x65000000
   19e80:	rsbvc	r0, r5, r0
   19e84:	blvs	17f7070 <__bss_end__@@Base+0x17b9c9c>
   19e88:			; <UNDEFINED> instruction: 0xffffffff
   19e8c:	cmnvs	r3, #-2013265919	; 0x88000001
   19e90:	teqcc	r2, r4, lsr r3
   19e94:	cmnvs	r3, #-1946157055	; 0x8c000001
   19e98:	andeq	r1, r0, r4, asr #1
   19e9c:	add	r4, r4, #8
   19ea0:	mov	r1, r6
   19ea4:	str	r5, [sp, #176]	; 0xb0
   19ea8:	mov	r0, r4
   19eac:	bl	12828 <_start@@Base+0xf0>
   19eb0:	and	r3, r1, #-16777216	; 0xff000000
   19eb4:	str	r3, [sp, #180]	; 0xb4
   19eb8:	ldrd	r2, [sp, #176]	; 0xb0
   19ebc:	cmp	r3, #889192448	; 0x35000000
   19ec0:	cmpeq	r2, #0
   19ec4:	bne	19d50 <_start@@Base+0x7618>
   19ec8:	sub	r3, r6, r4
   19ecc:	cmp	r3, #1
   19ed0:	ble	19d50 <_start@@Base+0x7618>
   19ed4:	mov	r3, #1
   19ed8:	mov	r2, r6
   19edc:	mov	r1, r4
   19ee0:	mov	r0, r7
   19ee4:	bl	17b2c <_start@@Base+0x53f4>
   19ee8:	cmp	r4, r0
   19eec:	mov	r8, r0
   19ef0:	beq	19d50 <_start@@Base+0x7618>
   19ef4:	add	r9, sp, #328	; 0x148
   19ef8:	mov	r1, r0
   19efc:	str	r5, [sp, #328]	; 0x148
   19f00:	mov	r2, r6
   19f04:	mov	r3, r9
   19f08:	mov	r0, r7
   19f0c:	bl	13394 <_start@@Base+0xc5c>
   19f10:	cmp	r8, r0
   19f14:	mov	r4, r0
   19f18:	beq	1a90c <_start@@Base+0x81d4>
   19f1c:	ldr	r3, [sp, #328]	; 0x148
   19f20:	cmp	r3, #0
   19f24:	bne	19f34 <_start@@Base+0x77fc>
   19f28:	ldr	r3, [r7, #8]
   19f2c:	tst	r3, #2
   19f30:	beq	18d40 <_start@@Base+0x6608>
   19f34:	mov	r3, #4
   19f38:	mov	r1, #1
   19f3c:	mov	r2, r3
   19f40:	ldr	r0, [r7]
   19f44:	bl	24d44 <flatcc_builder_table_add@@Base>
   19f48:	cmp	r0, #0
   19f4c:	beq	18d70 <_start@@Base+0x6638>
   19f50:	ldr	r3, [sp, #328]	; 0x148
   19f54:	str	r3, [r0]
   19f58:	b	18d40 <_start@@Base+0x6608>
   19f5c:	cmp	ip, #8
   19f60:	ble	1a128 <_start@@Base+0x79f0>
   19f64:	mov	r3, #8
   19f68:	mov	r2, r6
   19f6c:	mov	r1, r4
   19f70:	mov	r0, r7
   19f74:	bl	17b2c <_start@@Base+0x53f4>
   19f78:	cmp	r0, r4
   19f7c:	mov	r5, r0
   19f80:	beq	1a128 <_start@@Base+0x79f0>
   19f84:	add	r3, sp, #328	; 0x148
   19f88:	mov	r8, #0
   19f8c:	mov	r9, #0
   19f90:	mov	r1, r0
   19f94:	mov	r2, r6
   19f98:	mov	r0, r7
   19f9c:	str	r3, [sp, #256]	; 0x100
   19fa0:	strd	r8, [r3]
   19fa4:	bl	13154 <_start@@Base+0xa1c>
   19fa8:	cmp	r5, r0
   19fac:	mov	r4, r0
   19fb0:	beq	1a6d0 <_start@@Base+0x7f98>
   19fb4:	add	r3, sp, #328	; 0x148
   19fb8:	ldrd	r2, [r3]
   19fbc:	orrs	r3, r2, r3
   19fc0:	bne	19fd0 <_start@@Base+0x7898>
   19fc4:	ldr	r3, [r7, #8]
   19fc8:	tst	r3, #2
   19fcc:	beq	18d40 <_start@@Base+0x6608>
   19fd0:	mov	r3, #8
   19fd4:	mov	r1, #5
   19fd8:	mov	r2, r3
   19fdc:	ldr	r0, [r7]
   19fe0:	bl	24d44 <flatcc_builder_table_add@@Base>
   19fe4:	cmp	r0, #0
   19fe8:	beq	18d70 <_start@@Base+0x6638>
   19fec:	add	r3, sp, #328	; 0x148
   19ff0:	ldrd	r2, [r3]
   19ff4:	strd	r2, [r0]
   19ff8:	b	18d40 <_start@@Base+0x6608>
   19ffc:	add	r1, pc, #980	; 0x3d4
   1a000:	ldrd	r0, [r1]
   1a004:	ldrd	r2, [sp, #24]
   1a008:	cmp	r3, r1
   1a00c:	cmpeq	r2, r0
   1a010:	bne	19d50 <_start@@Base+0x7618>
   1a014:	cmp	ip, #8
   1a018:	ble	1a26c <_start@@Base+0x7b34>
   1a01c:	mov	r3, #8
   1a020:	mov	r2, r6
   1a024:	mov	r1, r4
   1a028:	mov	r0, r7
   1a02c:	bl	17b2c <_start@@Base+0x53f4>
   1a030:	cmp	r0, r4
   1a034:	mov	r5, r0
   1a038:	beq	1a26c <_start@@Base+0x7b34>
   1a03c:	add	r3, sp, #328	; 0x148
   1a040:	mov	r8, #0
   1a044:	mov	r9, #0
   1a048:	mov	r1, r0
   1a04c:	mov	r2, r6
   1a050:	mov	r0, r7
   1a054:	str	r3, [sp, #256]	; 0x100
   1a058:	strd	r8, [r3]
   1a05c:	bl	13154 <_start@@Base+0xa1c>
   1a060:	cmp	r5, r0
   1a064:	mov	r4, r0
   1a068:	beq	1a96c <_start@@Base+0x8234>
   1a06c:	add	r3, sp, #328	; 0x148
   1a070:	ldrd	r2, [r3]
   1a074:	orrs	r3, r2, r3
   1a078:	bne	1a088 <_start@@Base+0x7950>
   1a07c:	ldr	r3, [r7, #8]
   1a080:	tst	r3, #2
   1a084:	beq	18d40 <_start@@Base+0x6608>
   1a088:	mov	r3, #8
   1a08c:	mov	r1, #7
   1a090:	b	19fd8 <_start@@Base+0x78a0>
   1a094:	add	r1, pc, #836	; 0x344
   1a098:	ldrd	r0, [r1]
   1a09c:	ldrd	r2, [sp, #24]
   1a0a0:	cmp	r3, r1
   1a0a4:	cmpeq	r2, r0
   1a0a8:	beq	1a1d0 <_start@@Base+0x7a98>
   1a0ac:	ldrd	r0, [sp, #120]	; 0x78
   1a0b0:	movw	r3, #25186	; 0x6262
   1a0b4:	movt	r3, #25186	; 0x6262
   1a0b8:	mov	r2, #0
   1a0bc:	cmp	r1, r3
   1a0c0:	cmpeq	r0, r2
   1a0c4:	bne	19d50 <_start@@Base+0x7618>
   1a0c8:	cmp	ip, #4
   1a0cc:	ble	19d50 <_start@@Base+0x7618>
   1a0d0:	mov	r1, r4
   1a0d4:	mov	r3, #4
   1a0d8:	mov	r2, r6
   1a0dc:	mov	r0, r7
   1a0e0:	bl	17b2c <_start@@Base+0x53f4>
   1a0e4:	cmp	r0, r4
   1a0e8:	mov	r1, r0
   1a0ec:	beq	19d50 <_start@@Base+0x7618>
   1a0f0:	add	r3, sp, #320	; 0x140
   1a0f4:	mov	r2, r6
   1a0f8:	mov	r0, r7
   1a0fc:	bl	29418 <flatcc_json_parser_build_string@@Base>
   1a100:	ldr	r3, [sp, #320]	; 0x140
   1a104:	mov	r4, r0
   1a108:	cmp	r3, #0
   1a10c:	beq	18d70 <_start@@Base+0x6638>
   1a110:	mov	r1, #2
   1a114:	ldr	r0, [r7]
   1a118:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   1a11c:	cmp	r0, #0
   1a120:	bne	18d38 <_start@@Base+0x6600>
   1a124:	b	18d70 <_start@@Base+0x6638>
   1a128:	add	r4, r4, #8
   1a12c:	mov	r1, r6
   1a130:	mov	r0, r4
   1a134:	mov	r9, #0
   1a138:	bl	12828 <_start@@Base+0xf0>
   1a13c:	and	r3, r1, #-16777216	; 0xff000000
   1a140:	str	r9, [sp, #184]	; 0xb8
   1a144:	str	r3, [sp, #188]	; 0xbc
   1a148:	ldrd	r2, [sp, #184]	; 0xb8
   1a14c:	cmp	r3, #889192448	; 0x35000000
   1a150:	cmpeq	r2, #0
   1a154:	bne	19d50 <_start@@Base+0x7618>
   1a158:	sub	r3, r6, r4
   1a15c:	cmp	r3, #1
   1a160:	ble	19d50 <_start@@Base+0x7618>
   1a164:	mov	r3, #1
   1a168:	mov	r2, r6
   1a16c:	mov	r1, r4
   1a170:	mov	r0, r7
   1a174:	bl	17b2c <_start@@Base+0x53f4>
   1a178:	cmp	r4, r0
   1a17c:	mov	r5, r0
   1a180:	beq	19d50 <_start@@Base+0x7618>
   1a184:	add	r8, sp, #328	; 0x148
   1a188:	mov	r1, r0
   1a18c:	str	r9, [sp, #328]	; 0x148
   1a190:	mov	r2, r6
   1a194:	mov	r3, r8
   1a198:	mov	r0, r7
   1a19c:	bl	13394 <_start@@Base+0xc5c>
   1a1a0:	cmp	r5, r0
   1a1a4:	mov	r4, r0
   1a1a8:	beq	1ab18 <_start@@Base+0x83e0>
   1a1ac:	ldr	r3, [sp, #328]	; 0x148
   1a1b0:	cmp	r3, #0
   1a1b4:	bne	1a1c4 <_start@@Base+0x7a8c>
   1a1b8:	ldr	r3, [r7, #8]
   1a1bc:	tst	r3, #2
   1a1c0:	beq	18d40 <_start@@Base+0x6608>
   1a1c4:	mov	r3, #4
   1a1c8:	mov	r1, #6
   1a1cc:	b	19f3c <_start@@Base+0x7804>
   1a1d0:	cmp	ip, #8
   1a1d4:	ble	19d50 <_start@@Base+0x7618>
   1a1d8:	mov	r3, #8
   1a1dc:	mov	r2, r6
   1a1e0:	mov	r1, r4
   1a1e4:	mov	r0, r7
   1a1e8:	bl	17b2c <_start@@Base+0x53f4>
   1a1ec:	cmp	r0, r4
   1a1f0:	mov	r5, r0
   1a1f4:	beq	19d50 <_start@@Base+0x7618>
   1a1f8:	add	r3, sp, #328	; 0x148
   1a1fc:	mov	r8, #0
   1a200:	mov	r9, #0
   1a204:	mov	r1, r0
   1a208:	mov	r2, r6
   1a20c:	mov	r0, r7
   1a210:	str	r3, [sp, #256]	; 0x100
   1a214:	strd	r8, [r3]
   1a218:	bl	13154 <_start@@Base+0xa1c>
   1a21c:	cmp	r5, r0
   1a220:	mov	r4, r0
   1a224:	beq	1a9d4 <_start@@Base+0x829c>
   1a228:	add	r3, sp, #328	; 0x148
   1a22c:	ldrd	r2, [r3]
   1a230:	orrs	r3, r2, r3
   1a234:	bne	1a244 <_start@@Base+0x7b0c>
   1a238:	ldr	r3, [r7, #8]
   1a23c:	tst	r3, #2
   1a240:	beq	18d40 <_start@@Base+0x6608>
   1a244:	mov	r3, #8
   1a248:	mov	r1, #3
   1a24c:	b	19fd8 <_start@@Base+0x78a0>
   1a250:	mov	r1, r4
   1a254:	mov	r3, #5
   1a258:	mov	r2, r6
   1a25c:	mov	r0, r7
   1a260:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1a264:	mov	r4, r0
   1a268:	b	19d14 <_start@@Base+0x75dc>
   1a26c:	add	r4, r4, #8
   1a270:	mov	r1, r6
   1a274:	mov	r0, r4
   1a278:	mov	r9, #0
   1a27c:	bl	12828 <_start@@Base+0xf0>
   1a280:	and	r3, r1, #-16777216	; 0xff000000
   1a284:	str	r9, [sp, #200]	; 0xc8
   1a288:	str	r3, [sp, #204]	; 0xcc
   1a28c:	ldrd	r2, [sp, #200]	; 0xc8
   1a290:	cmp	r3, #889192448	; 0x35000000
   1a294:	cmpeq	r2, #0
   1a298:	bne	19d50 <_start@@Base+0x7618>
   1a29c:	sub	r3, r6, r4
   1a2a0:	cmp	r3, #1
   1a2a4:	ble	19d50 <_start@@Base+0x7618>
   1a2a8:	mov	r3, #1
   1a2ac:	mov	r2, r6
   1a2b0:	mov	r1, r4
   1a2b4:	mov	r0, r7
   1a2b8:	bl	17b2c <_start@@Base+0x53f4>
   1a2bc:	cmp	r4, r0
   1a2c0:	mov	r5, r0
   1a2c4:	beq	19d50 <_start@@Base+0x7618>
   1a2c8:	add	r8, sp, #328	; 0x148
   1a2cc:	mov	r1, r0
   1a2d0:	str	r9, [sp, #328]	; 0x148
   1a2d4:	mov	r2, r6
   1a2d8:	mov	r3, r8
   1a2dc:	mov	r0, r7
   1a2e0:	bl	13394 <_start@@Base+0xc5c>
   1a2e4:	cmp	r5, r0
   1a2e8:	mov	r4, r0
   1a2ec:	beq	1abb0 <_start@@Base+0x8478>
   1a2f0:	ldr	r3, [sp, #328]	; 0x148
   1a2f4:	cmp	r3, #0
   1a2f8:	bne	1a308 <_start@@Base+0x7bd0>
   1a2fc:	ldr	r3, [r7, #8]
   1a300:	tst	r3, #2
   1a304:	beq	18d40 <_start@@Base+0x6608>
   1a308:	mov	r3, #4
   1a30c:	mov	r1, #8
   1a310:	b	19f3c <_start@@Base+0x7804>
   1a314:	ldrb	r3, [r4, #2]
   1a318:	cmp	r3, #32
   1a31c:	addhi	r0, r4, #2
   1a320:	bls	186f4 <_start@@Base+0x5fbc>
   1a324:	cmp	r6, r0
   1a328:	bne	1870c <_start@@Base+0x5fd4>
   1a32c:	mov	ip, #0
   1a330:	mov	r3, #10
   1a334:	mov	r2, r6
   1a338:	mov	r1, r6
   1a33c:	mov	r0, r7
   1a340:	str	ip, [sp, #308]	; 0x134
   1a344:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1a348:	ldr	r3, [sp, #308]	; 0x134
   1a34c:	b	18198 <_start@@Base+0x5a60>
   1a350:	mov	r5, r6
   1a354:	mov	r6, r1
   1a358:	b	195dc <_start@@Base+0x6ea4>
   1a35c:	ldrb	r3, [r4, #2]
   1a360:	cmp	r3, #32
   1a364:	addhi	r1, r4, #2
   1a368:	bls	18f88 <_start@@Base+0x6850>
   1a36c:	cmp	r6, r1
   1a370:	bne	18fa0 <_start@@Base+0x6868>
   1a374:	mov	ip, #0
   1a378:	mov	r3, #10
   1a37c:	mov	r2, r6
   1a380:	mov	r1, r6
   1a384:	mov	r0, r7
   1a388:	str	ip, [sp, #312]	; 0x138
   1a38c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1a390:	ldr	r3, [sp, #312]	; 0x138
   1a394:	b	187a8 <_start@@Base+0x6070>
   1a398:	add	r4, r1, #1
   1a39c:	mov	r3, #0
   1a3a0:	sub	r2, r6, r4
   1a3a4:	cmp	r2, #1
   1a3a8:	str	r3, [sp, #312]	; 0x138
   1a3ac:	ble	1a3cc <_start@@Base+0x7c94>
   1a3b0:	ldrb	r3, [r1, #1]
   1a3b4:	cmp	r3, #32
   1a3b8:	bhi	1941c <_start@@Base+0x6ce4>
   1a3bc:	bne	1a3cc <_start@@Base+0x7c94>
   1a3c0:	ldrb	r3, [r1, #2]
   1a3c4:	cmp	r3, #32
   1a3c8:	bhi	1abf4 <_start@@Base+0x84bc>
   1a3cc:	mov	r1, r4
   1a3d0:	b	19400 <_start@@Base+0x6cc8>
   1a3d4:	nop	{0}
   1a3d8:	teqcc	r2, r4, lsr r3
   1a3dc:	strbtvs	r6, [r4], #-1124	; 0xfffffb9c
   1a3e0:	teqcc	r2, r4, lsr r3
   1a3e4:	rsbvs	r6, r2, #536870918	; 0x20000006
   1a3e8:	andeq	r2, r2, r8, asr #22
   1a3ec:	andeq	r0, r0, r0, ror #13
   1a3f0:	add	r3, sp, #272	; 0x110
   1a3f4:	strd	r4, [r3]
   1a3f8:	ldr	r3, [r7, #24]
   1a3fc:	cmp	r3, #0
   1a400:	beq	1a884 <_start@@Base+0x814c>
   1a404:	mov	r5, r6
   1a408:	mov	r1, fp
   1a40c:	b	184f4 <_start@@Base+0x5dbc>
   1a410:	mov	r8, r6
   1a414:	b	18e98 <_start@@Base+0x6760>
   1a418:	ldrb	r3, [r5, #2]
   1a41c:	cmp	r3, #32
   1a420:	bls	180d0 <_start@@Base+0x5998>
   1a424:	mov	r6, r5
   1a428:	mov	r5, r8
   1a42c:	add	r6, r6, #2
   1a430:	b	195dc <_start@@Base+0x6ea4>
   1a434:	cmp	r2, #0
   1a438:	sbcs	r1, r3, #0
   1a43c:	addge	r1, sp, #320	; 0x140
   1a440:	strdge	r2, [r1]
   1a444:	bge	19524 <_start@@Base+0x6dec>
   1a448:	mov	r1, r0
   1a44c:	mov	r3, #7
   1a450:	mov	r2, r6
   1a454:	mov	r0, r7
   1a458:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1a45c:	mov	r4, r0
   1a460:	cmp	sl, r4
   1a464:	beq	194e8 <_start@@Base+0x6db0>
   1a468:	add	r3, sp, #320	; 0x140
   1a46c:	ldrd	r2, [r3]
   1a470:	b	19524 <_start@@Base+0x6dec>
   1a474:	add	r4, r0, #1
   1a478:	mov	r3, #0
   1a47c:	sub	r2, r6, r4
   1a480:	cmp	r2, #1
   1a484:	str	r3, [sp, #308]	; 0x134
   1a488:	ble	1a4a8 <_start@@Base+0x7d70>
   1a48c:	ldrb	r3, [r0, #1]
   1a490:	cmp	r3, #32
   1a494:	bhi	1a860 <_start@@Base+0x8128>
   1a498:	bne	1a4a8 <_start@@Base+0x7d70>
   1a49c:	ldrb	r3, [r0, #2]
   1a4a0:	cmp	r3, #32
   1a4a4:	bhi	1abfc <_start@@Base+0x84c4>
   1a4a8:	mov	r1, r4
   1a4ac:	b	18654 <_start@@Base+0x5f1c>
   1a4b0:	mov	r3, #0
   1a4b4:	add	fp, fp, #8
   1a4b8:	mov	r1, r6
   1a4bc:	mov	r0, fp
   1a4c0:	str	r3, [sp, #216]	; 0xd8
   1a4c4:	bl	12828 <_start@@Base+0xf0>
   1a4c8:	lsr	r3, r1, #16
   1a4cc:	mov	r2, #0
   1a4d0:	str	r3, [sp, #220]	; 0xdc
   1a4d4:	mov	r3, #0
   1a4d8:	movt	r3, #28773	; 0x7065
   1a4dc:	ldr	r1, [sp, #220]	; 0xdc
   1a4e0:	lsl	r1, r1, #16
   1a4e4:	str	r1, [sp, #220]	; 0xdc
   1a4e8:	ldrd	r0, [sp, #216]	; 0xd8
   1a4ec:	cmp	r1, r3
   1a4f0:	cmpeq	r0, r2
   1a4f4:	bne	19a10 <_start@@Base+0x72d8>
   1a4f8:	sub	r3, r6, fp
   1a4fc:	cmp	r3, #2
   1a500:	ble	19a10 <_start@@Base+0x72d8>
   1a504:	mov	r1, fp
   1a508:	mov	r3, #2
   1a50c:	mov	r2, r6
   1a510:	mov	r0, r7
   1a514:	bl	17b2c <_start@@Base+0x53f4>
   1a518:	cmp	fp, r0
   1a51c:	mov	r1, r0
   1a520:	beq	19a10 <_start@@Base+0x72d8>
   1a524:	ldr	ip, [pc, #-324]	; 1a3e8 <_start@@Base+0x7cb0>
   1a528:	mov	fp, #7
   1a52c:	mov	r3, #3
   1a530:	mov	r2, r6
   1a534:	ldr	lr, [pc, #-336]	; 1a3ec <_start@@Base+0x7cb4>
   1a538:	str	fp, [sp]
   1a53c:	ldr	fp, [sp, #328]	; 0x148
   1a540:	add	ip, pc, ip
   1a544:	add	ip, ip, #188	; 0xbc
   1a548:	add	lr, pc, lr
   1a54c:	mov	r0, r7
   1a550:	stmib	sp, {fp, ip, lr}
   1a554:	bl	2984c <flatcc_json_parser_union_type@@Base>
   1a558:	mov	r1, r0
   1a55c:	b	19860 <_start@@Base+0x7128>
   1a560:	add	r4, r1, #1
   1a564:	mov	r3, #0
   1a568:	sub	r2, r6, r4
   1a56c:	cmp	r2, #1
   1a570:	str	r3, [sp, #312]	; 0x138
   1a574:	ble	1a594 <_start@@Base+0x7e5c>
   1a578:	ldrb	r3, [r1, #1]
   1a57c:	cmp	r3, #32
   1a580:	bhi	18bd0 <_start@@Base+0x6498>
   1a584:	bne	1a594 <_start@@Base+0x7e5c>
   1a588:	ldrb	r3, [r1, #2]
   1a58c:	cmp	r3, #32
   1a590:	bhi	1ac04 <_start@@Base+0x84cc>
   1a594:	mov	r1, r4
   1a598:	b	18bb4 <_start@@Base+0x647c>
   1a59c:	ldr	r3, [sp, #320]	; 0x140
   1a5a0:	cmp	r3, #0
   1a5a4:	bne	1ab68 <_start@@Base+0x8430>
   1a5a8:	add	r3, sp, #328	; 0x148
   1a5ac:	mov	r1, #0
   1a5b0:	ldrd	r2, [r3]
   1a5b4:	mvn	r0, #0
   1a5b8:	cmp	r3, r1
   1a5bc:	cmpeq	r2, r0
   1a5c0:	movls	r4, r8
   1a5c4:	strls	r2, [sp, #316]	; 0x13c
   1a5c8:	bls	18ed0 <_start@@Base+0x6798>
   1a5cc:	mov	r1, r8
   1a5d0:	mov	r3, #7
   1a5d4:	mov	r2, r6
   1a5d8:	mov	r0, r7
   1a5dc:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1a5e0:	mov	r4, r0
   1a5e4:	cmp	r9, r4
   1a5e8:	bne	18ecc <_start@@Base+0x6794>
   1a5ec:	mov	r8, r9
   1a5f0:	b	18e98 <_start@@Base+0x6760>
   1a5f4:	cmp	r2, #0
   1a5f8:	sbcs	r1, r3, #0
   1a5fc:	addge	r1, sp, #320	; 0x140
   1a600:	strdge	r2, [r1]
   1a604:	bge	18a5c <_start@@Base+0x6324>
   1a608:	mov	r1, r0
   1a60c:	mov	r3, #7
   1a610:	mov	r2, r6
   1a614:	mov	r0, r7
   1a618:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1a61c:	mov	r4, r0
   1a620:	b	1ab9c <_start@@Base+0x8464>
   1a624:	ldrb	r3, [r5, #2]
   1a628:	cmp	r3, #32
   1a62c:	addhi	r4, r5, #2
   1a630:	bls	19654 <_start@@Base+0x6f1c>
   1a634:	b	19668 <_start@@Base+0x6f30>
   1a638:	add	r9, fp, #8
   1a63c:	mov	r1, r6
   1a640:	mov	r0, r9
   1a644:	bl	12828 <_start@@Base+0xf0>
   1a648:	add	r3, pc, #984	; 0x3d8
   1a64c:	ldrd	r2, [r3]
   1a650:	cmp	r1, r3
   1a654:	cmpeq	r0, r2
   1a658:	beq	1a774 <_start@@Base+0x803c>
   1a65c:	lsr	r3, r0, #16
   1a660:	str	r3, [sp, #264]	; 0x108
   1a664:	ldr	ip, [sp, #264]	; 0x108
   1a668:	str	r1, [sp, #268]	; 0x10c
   1a66c:	add	r1, sp, #264	; 0x108
   1a670:	add	r3, pc, #952	; 0x3b8
   1a674:	ldrd	r2, [r3]
   1a678:	lsl	ip, ip, #16
   1a67c:	str	ip, [sp, #264]	; 0x108
   1a680:	ldrd	r0, [r1]
   1a684:	cmp	r1, r3
   1a688:	cmpeq	r0, r2
   1a68c:	bne	1ab00 <_start@@Base+0x83c8>
   1a690:	sub	r3, r6, r9
   1a694:	cmp	r3, #6
   1a698:	ble	1ab00 <_start@@Base+0x83c8>
   1a69c:	mov	r1, r9
   1a6a0:	mov	r3, #6
   1a6a4:	mov	r2, r6
   1a6a8:	mov	r0, r7
   1a6ac:	bl	17b2c <_start@@Base+0x53f4>
   1a6b0:	cmp	r9, r0
   1a6b4:	mov	r1, r0
   1a6b8:	beq	1ab00 <_start@@Base+0x83c8>
   1a6bc:	ldr	ip, [pc, #892]	; 1aa40 <_start@@Base+0x8308>
   1a6c0:	mov	fp, #1
   1a6c4:	mov	r3, #0
   1a6c8:	add	ip, pc, ip
   1a6cc:	b	19844 <_start@@Base+0x710c>
   1a6d0:	ldr	r3, [pc, #876]	; 1aa44 <_start@@Base+0x830c>
   1a6d4:	mov	r1, r0
   1a6d8:	mov	r2, r6
   1a6dc:	ldr	r0, [sp, #256]	; 0x100
   1a6e0:	add	r3, pc, r3
   1a6e4:	add	r3, r3, #100	; 0x64
   1a6e8:	str	r0, [sp]
   1a6ec:	mov	r0, r7
   1a6f0:	bl	14e98 <_start@@Base+0x2760>
   1a6f4:	cmp	r6, r0
   1a6f8:	cmpne	r4, r0
   1a6fc:	beq	1ac0c <_start@@Base+0x84d4>
   1a700:	mov	r4, r0
   1a704:	b	19fb4 <_start@@Base+0x787c>
   1a708:	sub	r3, r6, fp
   1a70c:	cmp	r3, #2
   1a710:	ble	19a10 <_start@@Base+0x72d8>
   1a714:	mov	r1, fp
   1a718:	mov	r3, #2
   1a71c:	mov	r2, r6
   1a720:	mov	r0, r7
   1a724:	bl	17b2c <_start@@Base+0x53f4>
   1a728:	cmp	fp, r0
   1a72c:	mov	r1, r0
   1a730:	beq	19a10 <_start@@Base+0x72d8>
   1a734:	ldr	ip, [pc, #780]	; 1aa48 <_start@@Base+0x8310>
   1a738:	mov	fp, #3
   1a73c:	mov	r3, #1
   1a740:	add	ip, pc, ip
   1a744:	b	19844 <_start@@Base+0x710c>
   1a748:	ldr	r0, [r7]
   1a74c:	str	r1, [sp, #136]	; 0x88
   1a750:	bl	23bf4 <flatcc_builder_end_table@@Base>
   1a754:	subs	r5, r0, #0
   1a758:	ldr	r1, [sp, #136]	; 0x88
   1a75c:	beq	18d70 <_start@@Base+0x6638>
   1a760:	ldr	r0, [r7]
   1a764:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   1a768:	cmp	r0, #0
   1a76c:	bne	18c00 <_start@@Base+0x64c8>
   1a770:	b	1944c <_start@@Base+0x6d14>
   1a774:	add	fp, fp, #16
   1a778:	mov	r1, r6
   1a77c:	mov	r0, fp
   1a780:	mov	r9, #0
   1a784:	bl	12828 <_start@@Base+0xf0>
   1a788:	bic	r1, r1, #255	; 0xff
   1a78c:	add	r3, pc, #676	; 0x2a4
   1a790:	ldrd	r2, [r3]
   1a794:	str	r9, [sp, #288]	; 0x120
   1a798:	str	r1, [sp, #292]	; 0x124
   1a79c:	add	r1, sp, #288	; 0x120
   1a7a0:	ldrd	r0, [r1]
   1a7a4:	cmp	r1, r3
   1a7a8:	cmpeq	r0, r2
   1a7ac:	bne	19a10 <_start@@Base+0x72d8>
   1a7b0:	sub	r3, r6, fp
   1a7b4:	cmp	r3, #3
   1a7b8:	ble	19a10 <_start@@Base+0x72d8>
   1a7bc:	mov	r1, fp
   1a7c0:	mov	r3, #3
   1a7c4:	mov	r2, r6
   1a7c8:	mov	r0, r7
   1a7cc:	bl	17b2c <_start@@Base+0x53f4>
   1a7d0:	cmp	fp, r0
   1a7d4:	mov	r1, r0
   1a7d8:	beq	19a10 <_start@@Base+0x72d8>
   1a7dc:	ldr	ip, [pc, #616]	; 1aa4c <_start@@Base+0x8314>
   1a7e0:	mov	fp, #1
   1a7e4:	mov	r3, r9
   1a7e8:	mov	r2, r6
   1a7ec:	ldr	lr, [pc, #604]	; 1aa50 <_start@@Base+0x8318>
   1a7f0:	str	fp, [sp]
   1a7f4:	ldr	fp, [sp, #328]	; 0x148
   1a7f8:	add	ip, pc, ip
   1a7fc:	add	ip, ip, #220	; 0xdc
   1a800:	add	lr, pc, lr
   1a804:	b	1a54c <_start@@Base+0x7e14>
   1a808:	sub	r3, r6, fp
   1a80c:	cmp	r3, #6
   1a810:	ble	19a10 <_start@@Base+0x72d8>
   1a814:	mov	r1, fp
   1a818:	mov	r3, #6
   1a81c:	mov	r2, r6
   1a820:	mov	r0, r7
   1a824:	bl	17b2c <_start@@Base+0x53f4>
   1a828:	cmp	fp, r0
   1a82c:	mov	r1, r0
   1a830:	beq	19a10 <_start@@Base+0x72d8>
   1a834:	ldr	ip, [pc, #536]	; 1aa54 <_start@@Base+0x831c>
   1a838:	mov	fp, #5
   1a83c:	mov	r3, #2
   1a840:	mov	r2, r6
   1a844:	ldr	lr, [pc, #524]	; 1aa58 <_start@@Base+0x8320>
   1a848:	str	fp, [sp]
   1a84c:	ldr	fp, [sp, #328]	; 0x148
   1a850:	add	ip, pc, ip
   1a854:	add	ip, ip, #236	; 0xec
   1a858:	add	lr, pc, lr
   1a85c:	b	1a54c <_start@@Base+0x7e14>
   1a860:	mov	r5, r4
   1a864:	b	18674 <_start@@Base+0x5f3c>
   1a868:	mov	r1, fp
   1a86c:	mov	r3, #5
   1a870:	mov	r2, r6
   1a874:	mov	r0, r7
   1a878:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1a87c:	mov	fp, r0
   1a880:	b	198b0 <_start@@Base+0x7178>
   1a884:	mov	r1, fp
   1a888:	mov	r2, r6
   1a88c:	ldr	r3, [sp, #328]	; 0x148
   1a890:	mov	r0, r7
   1a894:	bl	29678 <flatcc_json_parser_finalize_unions@@Base>
   1a898:	mov	r5, r0
   1a89c:	ldr	r0, [r7]
   1a8a0:	bl	23bf4 <flatcc_builder_end_table@@Base>
   1a8a4:	subs	r4, r0, #0
   1a8a8:	beq	186b0 <_start@@Base+0x5f78>
   1a8ac:	mov	r1, #1
   1a8b0:	b	18698 <_start@@Base+0x5f60>
   1a8b4:	sub	r3, r6, fp
   1a8b8:	cmp	r3, #7
   1a8bc:	ble	19a10 <_start@@Base+0x72d8>
   1a8c0:	mov	r1, fp
   1a8c4:	mov	r3, #7
   1a8c8:	mov	r2, r6
   1a8cc:	mov	r0, r7
   1a8d0:	bl	17b2c <_start@@Base+0x53f4>
   1a8d4:	cmp	fp, r0
   1a8d8:	mov	r1, r0
   1a8dc:	beq	19a10 <_start@@Base+0x72d8>
   1a8e0:	ldr	ip, [pc, #372]	; 1aa5c <_start@@Base+0x8324>
   1a8e4:	mov	fp, #3
   1a8e8:	mov	r3, #1
   1a8ec:	mov	r2, r6
   1a8f0:	ldr	lr, [pc, #360]	; 1aa60 <_start@@Base+0x8328>
   1a8f4:	str	fp, [sp]
   1a8f8:	ldr	fp, [sp, #328]	; 0x148
   1a8fc:	add	ip, pc, ip
   1a900:	add	ip, ip, #172	; 0xac
   1a904:	add	lr, pc, lr
   1a908:	b	1a54c <_start@@Base+0x7e14>
   1a90c:	ldr	r3, [pc, #336]	; 1aa64 <_start@@Base+0x832c>
   1a910:	mov	r1, r0
   1a914:	mov	r2, r6
   1a918:	mov	r0, r7
   1a91c:	str	r9, [sp]
   1a920:	add	r3, pc, r3
   1a924:	add	r3, r3, #76	; 0x4c
   1a928:	bl	14c48 <_start@@Base+0x2510>
   1a92c:	cmp	r6, r0
   1a930:	cmpne	r4, r0
   1a934:	beq	1ac0c <_start@@Base+0x84d4>
   1a938:	mov	r4, r0
   1a93c:	b	19f1c <_start@@Base+0x77e4>
   1a940:	mov	r3, #0
   1a944:	add	r1, r4, #1
   1a948:	mov	r2, r6
   1a94c:	mov	r0, r7
   1a950:	str	r3, [sp, #300]	; 0x12c
   1a954:	mov	r9, r7
   1a958:	mov	r8, r6
   1a95c:	bl	13118 <_start@@Base+0x9e0>
   1a960:	mov	r4, r0
   1a964:	ldr	r3, [sp, #300]	; 0x12c
   1a968:	b	17d2c <_start@@Base+0x55f4>
   1a96c:	ldr	r3, [pc, #244]	; 1aa68 <_start@@Base+0x8330>
   1a970:	mov	r1, r0
   1a974:	mov	r2, r6
   1a978:	ldr	r0, [sp, #256]	; 0x100
   1a97c:	add	r3, pc, r3
   1a980:	add	r3, r3, #124	; 0x7c
   1a984:	str	r0, [sp]
   1a988:	mov	r0, r7
   1a98c:	bl	14e98 <_start@@Base+0x2760>
   1a990:	cmp	r6, r0
   1a994:	cmpne	r4, r0
   1a998:	beq	1ac0c <_start@@Base+0x84d4>
   1a99c:	mov	r4, r0
   1a9a0:	b	1a06c <_start@@Base+0x7934>
   1a9a4:	mov	ip, #0
   1a9a8:	mov	r3, #10
   1a9ac:	mov	r2, r6
   1a9b0:	mov	r1, r6
   1a9b4:	mov	r0, r7
   1a9b8:	str	ip, [sp, #300]	; 0x12c
   1a9bc:	mov	r9, r7
   1a9c0:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1a9c4:	mov	r8, r6
   1a9c8:	mov	r4, r0
   1a9cc:	ldr	r3, [sp, #300]	; 0x12c
   1a9d0:	b	17d2c <_start@@Base+0x55f4>
   1a9d4:	ldr	r3, [pc, #144]	; 1aa6c <_start@@Base+0x8334>
   1a9d8:	mov	r1, r0
   1a9dc:	mov	r2, r6
   1a9e0:	ldr	r0, [sp, #256]	; 0x100
   1a9e4:	add	r3, pc, r3
   1a9e8:	add	r3, r3, #88	; 0x58
   1a9ec:	str	r0, [sp]
   1a9f0:	mov	r0, r7
   1a9f4:	bl	14e98 <_start@@Base+0x2760>
   1a9f8:	cmp	r6, r0
   1a9fc:	cmpne	r4, r0
   1aa00:	beq	1ac0c <_start@@Base+0x84d4>
   1aa04:	mov	r4, r0
   1aa08:	b	1a228 <_start@@Base+0x7af0>
   1aa0c:	mov	r1, r0
   1aa10:	mov	r3, #8
   1aa14:	mov	r2, r6
   1aa18:	mov	r0, r7
   1aa1c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1aa20:	mov	r4, r0
   1aa24:	b	19c18 <_start@@Base+0x74e0>
   1aa28:	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
   1aa2c:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   1aa30:	ldrbvs	r0, [r2, #-0]!
   1aa34:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   1aa38:	andeq	r0, r0, r0
   1aa3c:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   1aa40:	andeq	r0, r0, r0, ror #10
   1aa44:	andeq	r2, r2, r8, lsr #19
   1aa48:	andeq	r0, r0, r8, ror #9
   1aa4c:	muleq	r2, r0, r8
   1aa50:	andeq	r0, r0, r8, lsr #8
   1aa54:	andeq	r2, r2, r8, lsr r8
   1aa58:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1aa5c:	andeq	r2, r2, ip, lsl #15
   1aa60:	andeq	r0, r0, r4, lsr #6
   1aa64:	andeq	r2, r2, r8, ror #14
   1aa68:	andeq	r2, r2, ip, lsl #14
   1aa6c:	andeq	r2, r2, r4, lsr #13
   1aa70:			; <UNDEFINED> instruction: 0x000225bc
   1aa74:			; <UNDEFINED> instruction: 0xffff7e4c
   1aa78:	andeq	r0, r0, ip, asr #2
   1aa7c:	andeq	r2, r2, ip, asr r5
   1aa80:	andeq	r2, r2, r4, asr #9
   1aa84:	sub	r3, r6, fp
   1aa88:	cmp	r3, #7
   1aa8c:	ble	19a10 <_start@@Base+0x72d8>
   1aa90:	mov	r1, fp
   1aa94:	mov	r3, #7
   1aa98:	mov	r2, r6
   1aa9c:	mov	r0, r7
   1aaa0:	bl	17b2c <_start@@Base+0x53f4>
   1aaa4:	cmp	fp, r0
   1aaa8:	mov	r1, r0
   1aaac:	beq	19a10 <_start@@Base+0x72d8>
   1aab0:	mov	ip, #9
   1aab4:	ldr	r0, [pc, #-76]	; 1aa70 <_start@@Base+0x8338>
   1aab8:	mov	r3, #4
   1aabc:	mov	r2, r6
   1aac0:	ldr	lr, [pc, #-84]	; 1aa74 <_start@@Base+0x833c>
   1aac4:	str	ip, [sp]
   1aac8:	ldr	ip, [pc, #-88]	; 1aa78 <_start@@Base+0x8340>
   1aacc:	add	r0, pc, r0
   1aad0:	ldr	fp, [sp, #328]	; 0x148
   1aad4:	add	r0, r0, #204	; 0xcc
   1aad8:	add	lr, pc, lr
   1aadc:	add	ip, pc, ip
   1aae0:	str	fp, [sp, #4]
   1aae4:	str	r0, [sp, #8]
   1aae8:	mov	r0, r7
   1aaec:	str	ip, [sp, #12]
   1aaf0:	str	lr, [sp, #16]
   1aaf4:	bl	29bc0 <flatcc_json_parser_union_type_vector@@Base>
   1aaf8:	mov	r1, r0
   1aafc:	b	19860 <_start@@Base+0x7128>
   1ab00:	mov	r1, r9
   1ab04:	mov	r2, r6
   1ab08:	mov	r0, r7
   1ab0c:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1ab10:	mov	r1, r0
   1ab14:	b	19860 <_start@@Base+0x7128>
   1ab18:	ldr	r3, [pc, #-164]	; 1aa7c <_start@@Base+0x8344>
   1ab1c:	mov	r1, r0
   1ab20:	mov	r2, r6
   1ab24:	mov	r0, r7
   1ab28:	str	r8, [sp]
   1ab2c:	add	r3, pc, r3
   1ab30:	add	r3, r3, #112	; 0x70
   1ab34:	bl	14c48 <_start@@Base+0x2510>
   1ab38:	cmp	r6, r0
   1ab3c:	cmpne	r4, r0
   1ab40:	beq	1ac0c <_start@@Base+0x84d4>
   1ab44:	mov	r4, r0
   1ab48:	b	1a1ac <_start@@Base+0x7a74>
   1ab4c:	mov	r1, r0
   1ab50:	mov	r3, #8
   1ab54:	mov	r2, r6
   1ab58:	mov	r0, r7
   1ab5c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1ab60:	mov	r4, r0
   1ab64:	b	1a460 <_start@@Base+0x7d28>
   1ab68:	mov	r1, r0
   1ab6c:	mov	r3, #8
   1ab70:	mov	r2, r6
   1ab74:	mov	r0, r7
   1ab78:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1ab7c:	mov	r4, r0
   1ab80:	b	1a5e4 <_start@@Base+0x7eac>
   1ab84:	mov	r1, r0
   1ab88:	mov	r3, #8
   1ab8c:	mov	r2, r6
   1ab90:	mov	r0, r7
   1ab94:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1ab98:	mov	r4, r0
   1ab9c:	cmp	r8, r4
   1aba0:	beq	18a28 <_start@@Base+0x62f0>
   1aba4:	add	r3, sp, #320	; 0x140
   1aba8:	ldrd	r2, [r3]
   1abac:	b	18a5c <_start@@Base+0x6324>
   1abb0:	ldr	r3, [pc, #-312]	; 1aa80 <_start@@Base+0x8348>
   1abb4:	mov	r1, r0
   1abb8:	mov	r2, r6
   1abbc:	mov	r0, r7
   1abc0:	str	r8, [sp]
   1abc4:	add	r3, pc, r3
   1abc8:	add	r3, r3, #136	; 0x88
   1abcc:	bl	14c48 <_start@@Base+0x2510>
   1abd0:	cmp	r6, r0
   1abd4:	cmpne	r4, r0
   1abd8:	beq	1ac0c <_start@@Base+0x84d4>
   1abdc:	mov	r4, r0
   1abe0:	b	1a2f0 <_start@@Base+0x7bb8>
   1abe4:	mov	r3, r6
   1abe8:	mov	r6, r5
   1abec:	mov	r5, r3
   1abf0:	b	17cac <_start@@Base+0x5574>
   1abf4:	add	r4, r1, #2
   1abf8:	b	1941c <_start@@Base+0x6ce4>
   1abfc:	add	r5, r0, #2
   1ac00:	b	18674 <_start@@Base+0x5f3c>
   1ac04:	add	r4, r1, #2
   1ac08:	b	18bd0 <_start@@Base+0x6498>
   1ac0c:	mov	r5, r6
   1ac10:	mov	r6, r0
   1ac14:	b	18d78 <_start@@Base+0x6640>
   1ac18:	mov	r4, r0
   1ac1c:	b	1941c <_start@@Base+0x6ce4>
   1ac20:	mov	r4, r0
   1ac24:	b	18bd0 <_start@@Base+0x6498>
   1ac28:	mov	r5, r0
   1ac2c:	b	18674 <_start@@Base+0x5f3c>
   1ac30:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ac34:	mov	r5, r2
   1ac38:	mov	ip, #0
   1ac3c:	strd	r6, [sp, #8]
   1ac40:	cmp	r3, #9
   1ac44:	mov	r4, r1
   1ac48:	strd	r8, [sp, #16]
   1ac4c:	strd	sl, [sp, #24]
   1ac50:	mov	sl, r0
   1ac54:	str	lr, [sp, #32]
   1ac58:	sub	sp, sp, #60	; 0x3c
   1ac5c:	ldr	r2, [sp, #96]	; 0x60
   1ac60:	str	ip, [r2]
   1ac64:	beq	1ad2c <_start@@Base+0x85f4>
   1ac68:	bhi	1acc8 <_start@@Base+0x8590>
   1ac6c:	cmp	r3, #2
   1ac70:	beq	1b068 <_start@@Base+0x8930>
   1ac74:	cmp	r3, #8
   1ac78:	beq	1ad60 <_start@@Base+0x8628>
   1ac7c:	cmp	r3, ip
   1ac80:	beq	1b034 <_start@@Base+0x88fc>
   1ac84:	ldr	r3, [sl, #8]
   1ac88:	mov	r2, r5
   1ac8c:	mov	r1, r4
   1ac90:	mov	r0, sl
   1ac94:	tst	r3, #1
   1ac98:	bne	1ad54 <_start@@Base+0x861c>
   1ac9c:	mov	r3, #15
   1aca0:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1aca4:	mov	r4, r0
   1aca8:	mov	r0, r4
   1acac:	add	sp, sp, #60	; 0x3c
   1acb0:	ldrd	r4, [sp]
   1acb4:	ldrd	r6, [sp, #8]
   1acb8:	ldrd	r8, [sp, #16]
   1acbc:	ldrd	sl, [sp, #24]
   1acc0:	add	sp, sp, #32
   1acc4:	pop	{pc}		; (ldr pc, [sp], #4)
   1acc8:	cmp	r3, #11
   1accc:	beq	1acdc <_start@@Base+0x85a4>
   1acd0:	bcc	1ad2c <_start@@Base+0x85f4>
   1acd4:	cmp	r3, #255	; 0xff
   1acd8:	bne	1ac84 <_start@@Base+0x854c>
   1acdc:	mov	r1, r4
   1ace0:	mov	r2, r5
   1ace4:	ldr	r3, [sp, #96]	; 0x60
   1ace8:	mov	r0, sl
   1acec:	bl	29418 <flatcc_json_parser_build_string@@Base>
   1acf0:	mov	r4, r0
   1acf4:	ldr	r3, [sl, #24]
   1acf8:	cmp	r3, #0
   1acfc:	bne	1aca8 <_start@@Base+0x8570>
   1ad00:	ldr	r3, [sp, #96]	; 0x60
   1ad04:	ldr	r3, [r3]
   1ad08:	cmp	r3, #0
   1ad0c:	bne	1aca8 <_start@@Base+0x8570>
   1ad10:	mov	r1, r4
   1ad14:	mov	r2, r5
   1ad18:	mov	r0, sl
   1ad1c:	mov	r3, #33	; 0x21
   1ad20:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1ad24:	mov	r4, r0
   1ad28:	b	1aca8 <_start@@Base+0x8570>
   1ad2c:	mov	r1, r4
   1ad30:	mov	r2, r5
   1ad34:	ldr	r3, [sp, #96]	; 0x60
   1ad38:	mov	r0, sl
   1ad3c:	bl	15114 <_start@@Base+0x29dc>
   1ad40:	ldr	r3, [sl, #24]
   1ad44:	mov	r4, r0
   1ad48:	cmp	r3, #0
   1ad4c:	beq	1ad00 <_start@@Base+0x85c8>
   1ad50:	b	1aca8 <_start@@Base+0x8570>
   1ad54:	bl	28248 <flatcc_json_parser_generic_json@@Base>
   1ad58:	mov	r4, r0
   1ad5c:	b	1aca8 <_start@@Base+0x8570>
   1ad60:	mov	r2, #2
   1ad64:	ldr	r0, [r0]
   1ad68:	mov	r1, r2
   1ad6c:	bl	22464 <flatcc_builder_start_struct@@Base>
   1ad70:	subs	r3, r0, #0
   1ad74:	str	r3, [sp, #16]
   1ad78:	beq	1afa4 <_start@@Base+0x886c>
   1ad7c:	add	r8, sp, #40	; 0x28
   1ad80:	mov	r1, r4
   1ad84:	mov	r3, r8
   1ad88:	mov	r2, r5
   1ad8c:	mov	r0, sl
   1ad90:	bl	1362c <_start@@Base+0xef4>
   1ad94:	ldr	r3, [sp, #40]	; 0x28
   1ad98:	mov	r4, r0
   1ad9c:	cmp	r3, #0
   1ada0:	beq	1af84 <_start@@Base+0x884c>
   1ada4:	ldr	r3, [pc, #900]	; 1b130 <_start@@Base+0x89f8>
   1ada8:	add	r3, pc, r3
   1adac:	add	r3, r3, #264	; 0x108
   1adb0:	str	r3, [sp, #28]
   1adb4:	cmp	r5, r4
   1adb8:	beq	1ade4 <_start@@Base+0x86ac>
   1adbc:	ldrb	r3, [r4]
   1adc0:	cmp	r3, #34	; 0x22
   1adc4:	moveq	r3, #0
   1adc8:	addeq	r4, r4, #1
   1adcc:	streq	r3, [sl, #12]
   1add0:	beq	1ade4 <_start@@Base+0x86ac>
   1add4:	cmp	r3, #46	; 0x2e
   1add8:	movne	r3, #1
   1addc:	strne	r3, [sl, #12]
   1ade0:	beq	1b3bc <_start@@Base+0x8c84>
   1ade4:	sub	r3, r5, r4
   1ade8:	cmp	r3, #8
   1adec:	bhi	1ae20 <_start@@Base+0x86e8>
   1adf0:	sub	r3, r3, #1
   1adf4:	cmp	r3, #7
   1adf8:	addls	pc, pc, r3, lsl #2
   1adfc:	b	1b020 <_start@@Base+0x88e8>
   1ae00:	b	1b008 <_start@@Base+0x88d0>
   1ae04:	b	1affc <_start@@Base+0x88c4>
   1ae08:	b	1aff0 <_start@@Base+0x88b8>
   1ae0c:	b	1afe4 <_start@@Base+0x88ac>
   1ae10:	b	1afd8 <_start@@Base+0x88a0>
   1ae14:	b	1b014 <_start@@Base+0x88dc>
   1ae18:	b	1afcc <_start@@Base+0x8894>
   1ae1c:	b	1ae20 <_start@@Base+0x86e8>
   1ae20:	ldrb	r2, [r4, #7]
   1ae24:	mov	r3, #0
   1ae28:	mov	ip, r3
   1ae2c:	ldrb	r0, [r4, #6]
   1ae30:	orr	r1, r2, r0, lsl #8
   1ae34:	ldrb	r2, [r4, #5]
   1ae38:	mov	r0, ip
   1ae3c:	orr	r1, r1, r2, lsl #16
   1ae40:	ldrb	r2, [r4, #4]
   1ae44:	mov	ip, r0
   1ae48:	orr	r2, r1, r2, lsl #24
   1ae4c:	ldrb	r0, [r4, #3]
   1ae50:	orr	r3, ip, r0
   1ae54:	ldrb	r0, [r4, #2]
   1ae58:	orr	r3, r3, r0, lsl #8
   1ae5c:	ldrb	r0, [r4, #1]
   1ae60:	orr	r0, r3, r0, lsl #16
   1ae64:	mov	r6, r2
   1ae68:	ldrb	r2, [r4]
   1ae6c:	mov	r9, #0
   1ae70:	orr	r7, r0, r2, lsl #24
   1ae74:	add	r3, pc, #676	; 0x2a4
   1ae78:	ldrd	r2, [r3]
   1ae7c:	cmp	r7, r3
   1ae80:	cmpeq	r6, r2
   1ae84:	bne	1b020 <_start@@Base+0x88e8>
   1ae88:	add	r4, r4, #8
   1ae8c:	mov	r1, r5
   1ae90:	str	r9, [sp, #8]
   1ae94:	mov	r0, r4
   1ae98:	bl	12828 <_start@@Base+0xf0>
   1ae9c:	bic	r3, r1, #255	; 0xff
   1aea0:	add	r1, pc, #640	; 0x280
   1aea4:	ldrd	r0, [r1]
   1aea8:	str	r3, [sp, #12]
   1aeac:	ldrd	r2, [sp, #8]
   1aeb0:	cmp	r3, r1
   1aeb4:	cmpeq	r2, r0
   1aeb8:	bne	1b020 <_start@@Base+0x88e8>
   1aebc:	sub	r3, r5, r4
   1aec0:	cmp	r3, #3
   1aec4:	ble	1b020 <_start@@Base+0x88e8>
   1aec8:	mov	r3, #3
   1aecc:	mov	r2, r5
   1aed0:	mov	r1, r4
   1aed4:	mov	r0, sl
   1aed8:	bl	17b2c <_start@@Base+0x53f4>
   1aedc:	cmp	r4, r0
   1aee0:	mov	fp, r0
   1aee4:	beq	1b020 <_start@@Base+0x88e8>
   1aee8:	mov	r2, #0
   1aeec:	mov	r3, #0
   1aef0:	strh	r9, [sp, #36]	; 0x24
   1aef4:	cmp	r5, r0
   1aef8:	str	r9, [sp, #44]	; 0x2c
   1aefc:	strd	r2, [sp, #48]	; 0x30
   1af00:	beq	1b3d8 <_start@@Base+0x8ca0>
   1af04:	mov	r1, r0
   1af08:	add	r0, sp, #48	; 0x30
   1af0c:	add	r3, sp, #44	; 0x2c
   1af10:	mov	r2, r5
   1af14:	str	r0, [sp]
   1af18:	mov	r0, sl
   1af1c:	bl	28ea4 <flatcc_json_parser_integer@@Base>
   1af20:	cmp	fp, r0
   1af24:	mov	r4, r0
   1af28:	bne	1b3e0 <_start@@Base+0x8ca8>
   1af2c:	add	r0, sp, #36	; 0x24
   1af30:	mov	r2, r5
   1af34:	ldr	r3, [sp, #28]
   1af38:	mov	r1, r4
   1af3c:	str	r0, [sp]
   1af40:	mov	r0, sl
   1af44:	bl	149f4 <_start@@Base+0x22bc>
   1af48:	cmp	r5, r0
   1af4c:	cmpne	r0, r4
   1af50:	beq	1b430 <_start@@Base+0x8cf8>
   1af54:	ldrh	r2, [sp, #36]	; 0x24
   1af58:	ldr	r3, [sp, #16]
   1af5c:	strh	r2, [r3]
   1af60:	mov	r1, r0
   1af64:	mov	r3, r8
   1af68:	mov	r2, r5
   1af6c:	mov	r0, sl
   1af70:	bl	1582c <_start@@Base+0x30f4>
   1af74:	ldr	r3, [sp, #40]	; 0x28
   1af78:	mov	r4, r0
   1af7c:	cmp	r3, #0
   1af80:	bne	1adb4 <_start@@Base+0x867c>
   1af84:	cmp	r5, r4
   1af88:	beq	1afa4 <_start@@Base+0x886c>
   1af8c:	ldr	r0, [sl]
   1af90:	bl	22528 <flatcc_builder_end_struct@@Base>
   1af94:	ldr	r3, [sp, #96]	; 0x60
   1af98:	cmp	r0, #0
   1af9c:	str	r0, [r3]
   1afa0:	bne	1aca8 <_start@@Base+0x8570>
   1afa4:	mov	r1, r4
   1afa8:	mov	r3, #33	; 0x21
   1afac:	mov	r2, r5
   1afb0:	mov	r0, sl
   1afb4:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1afb8:	ldr	r3, [sl, #24]
   1afbc:	mov	r4, r0
   1afc0:	cmp	r3, #0
   1afc4:	beq	1ad00 <_start@@Base+0x85c8>
   1afc8:	b	1aca8 <_start@@Base+0x8570>
   1afcc:	mov	r2, #0
   1afd0:	mov	r3, #0
   1afd4:	b	1ae28 <_start@@Base+0x86f0>
   1afd8:	mov	r1, #0
   1afdc:	mov	r0, r1
   1afe0:	b	1ae40 <_start@@Base+0x8708>
   1afe4:	mov	r2, #0
   1afe8:	mov	ip, r2
   1afec:	b	1ae4c <_start@@Base+0x8714>
   1aff0:	mov	r2, #0
   1aff4:	mov	r3, r2
   1aff8:	b	1ae54 <_start@@Base+0x871c>
   1affc:	mov	r2, #0
   1b000:	mov	r3, r2
   1b004:	b	1ae5c <_start@@Base+0x8724>
   1b008:	mov	r2, #0
   1b00c:	mov	r0, r2
   1b010:	b	1ae64 <_start@@Base+0x872c>
   1b014:	mov	r1, #0
   1b018:	mov	ip, r1
   1b01c:	b	1ae34 <_start@@Base+0x86fc>
   1b020:	mov	r1, r4
   1b024:	mov	r2, r5
   1b028:	mov	r0, sl
   1b02c:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1b030:	b	1af60 <_start@@Base+0x8828>
   1b034:	sub	r3, r5, r1
   1b038:	cmp	r3, #3
   1b03c:	ble	1b04c <_start@@Base+0x8914>
   1b040:	ldrb	r3, [r1]
   1b044:	cmp	r3, #110	; 0x6e
   1b048:	beq	1b4a8 <_start@@Base+0x8d70>
   1b04c:	mov	r1, r4
   1b050:	mov	r2, r5
   1b054:	mov	r0, sl
   1b058:	mov	r3, #26
   1b05c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1b060:	mov	r4, r0
   1b064:	b	1aca8 <_start@@Base+0x8570>
   1b068:	mov	r1, #1
   1b06c:	ldr	r0, [r0]
   1b070:	bl	23210 <flatcc_builder_start_table@@Base>
   1b074:	cmp	r0, #0
   1b078:	bne	1afa4 <_start@@Base+0x886c>
   1b07c:	add	r7, sp, #36	; 0x24
   1b080:	mov	r1, r4
   1b084:	mov	r3, r7
   1b088:	mov	r2, r5
   1b08c:	mov	r0, sl
   1b090:	bl	1362c <_start@@Base+0xef4>
   1b094:	ldr	r3, [sp, #36]	; 0x24
   1b098:	mov	r4, r0
   1b09c:	cmp	r3, #0
   1b0a0:	beq	1b360 <_start@@Base+0x8c28>
   1b0a4:	ldr	r3, [pc, #136]	; 1b134 <_start@@Base+0x89fc>
   1b0a8:	add	r3, pc, r3
   1b0ac:	add	r3, r3, #252	; 0xfc
   1b0b0:	str	r3, [sp, #28]
   1b0b4:	cmp	r5, r4
   1b0b8:	beq	1b0e4 <_start@@Base+0x89ac>
   1b0bc:	ldrb	r3, [r4]
   1b0c0:	cmp	r3, #34	; 0x22
   1b0c4:	moveq	r3, #0
   1b0c8:	addeq	r4, r4, #1
   1b0cc:	streq	r3, [sl, #12]
   1b0d0:	beq	1b0e4 <_start@@Base+0x89ac>
   1b0d4:	cmp	r3, #46	; 0x2e
   1b0d8:	movne	r3, #1
   1b0dc:	strne	r3, [sl, #12]
   1b0e0:	beq	1b3a0 <_start@@Base+0x8c68>
   1b0e4:	sub	r3, r5, r4
   1b0e8:	cmp	r3, #8
   1b0ec:	bhi	1b138 <_start@@Base+0x8a00>
   1b0f0:	sub	r3, r3, #1
   1b0f4:	cmp	r3, #7
   1b0f8:	addls	pc, pc, r3, lsl #2
   1b0fc:	b	1b328 <_start@@Base+0x8bf0>
   1b100:	b	1b2f8 <_start@@Base+0x8bc0>
   1b104:	b	1b2ec <_start@@Base+0x8bb4>
   1b108:	b	1b2e0 <_start@@Base+0x8ba8>
   1b10c:	b	1b310 <_start@@Base+0x8bd8>
   1b110:	b	1b304 <_start@@Base+0x8bcc>
   1b114:	b	1b31c <_start@@Base+0x8be4>
   1b118:	b	1b2d0 <_start@@Base+0x8b98>
   1b11c:	b	1b138 <_start@@Base+0x8a00>
   1b120:	svcpl	0x006c656e
   1b124:	stmdavs	r1!, {r1, r4, r5, r6, r8, fp, sp, lr}^
   1b128:	andeq	r0, r0, r0
   1b12c:	ldrbvs	r6, [r4, -r0, lsl #16]!
   1b130:	andeq	r2, r2, r0, ror #5
   1b134:	andeq	r1, r2, r0, ror #31
   1b138:	ldrb	r2, [r4, #7]
   1b13c:	mov	r3, #0
   1b140:	strd	r2, [sp, #8]
   1b144:	ldrb	r0, [r4, #6]
   1b148:	ldrd	r2, [sp, #8]
   1b14c:	orr	r2, r2, r0, lsl #8
   1b150:	ldrb	r0, [r4, #5]
   1b154:	orr	r2, r2, r0, lsl #16
   1b158:	ldrb	r0, [r4, #4]
   1b15c:	orr	r2, r2, r0, lsl #24
   1b160:	ldrb	r0, [r4, #3]
   1b164:	orr	r3, r3, r0
   1b168:	ldrb	r0, [r4, #2]
   1b16c:	orr	r3, r3, r0, lsl #8
   1b170:	ldrb	r0, [r4, #1]
   1b174:	orr	r3, r3, r0, lsl #16
   1b178:	ldrb	r0, [r4]
   1b17c:	mov	r8, r2
   1b180:	mov	r6, #0
   1b184:	orr	r9, r3, r0, lsl #24
   1b188:	add	r3, pc, #920	; 0x398
   1b18c:	ldrd	r2, [r3]
   1b190:	cmp	r9, r3
   1b194:	cmpeq	r8, r2
   1b198:	bne	1b328 <_start@@Base+0x8bf0>
   1b19c:	add	fp, r4, #8
   1b1a0:	mov	r1, r5
   1b1a4:	mov	r0, fp
   1b1a8:	bl	12828 <_start@@Base+0xf0>
   1b1ac:	add	r3, pc, #892	; 0x37c
   1b1b0:	ldrd	r2, [r3]
   1b1b4:	cmp	r1, r3
   1b1b8:	cmpeq	r0, r2
   1b1bc:	bne	1b388 <_start@@Base+0x8c50>
   1b1c0:	add	r4, r4, #16
   1b1c4:	mov	r1, r5
   1b1c8:	str	r6, [sp, #16]
   1b1cc:	mov	r0, r4
   1b1d0:	bl	12828 <_start@@Base+0xf0>
   1b1d4:	bic	r3, r1, #255	; 0xff
   1b1d8:	add	r1, pc, #856	; 0x358
   1b1dc:	ldrd	r0, [r1]
   1b1e0:	str	r3, [sp, #20]
   1b1e4:	ldrd	r2, [sp, #16]
   1b1e8:	cmp	r3, r1
   1b1ec:	cmpeq	r2, r0
   1b1f0:	bne	1b328 <_start@@Base+0x8bf0>
   1b1f4:	sub	r3, r5, r4
   1b1f8:	cmp	r3, #3
   1b1fc:	ble	1b328 <_start@@Base+0x8bf0>
   1b200:	mov	r3, #3
   1b204:	mov	r2, r5
   1b208:	mov	r1, r4
   1b20c:	mov	r0, sl
   1b210:	bl	17b2c <_start@@Base+0x53f4>
   1b214:	cmp	r4, r0
   1b218:	mov	fp, r0
   1b21c:	beq	1b328 <_start@@Base+0x8bf0>
   1b220:	mov	r2, #0
   1b224:	mov	r3, #0
   1b228:	str	r6, [sp, #40]	; 0x28
   1b22c:	cmp	r5, r0
   1b230:	str	r6, [sp, #44]	; 0x2c
   1b234:	strd	r2, [sp, #48]	; 0x30
   1b238:	beq	1b454 <_start@@Base+0x8d1c>
   1b23c:	mov	r1, r0
   1b240:	add	r0, sp, #48	; 0x30
   1b244:	add	r3, sp, #44	; 0x2c
   1b248:	mov	r2, r5
   1b24c:	str	r0, [sp]
   1b250:	mov	r0, sl
   1b254:	bl	28ea4 <flatcc_json_parser_integer@@Base>
   1b258:	cmp	fp, r0
   1b25c:	mov	r4, r0
   1b260:	bne	1b45c <_start@@Base+0x8d24>
   1b264:	add	r0, sp, #40	; 0x28
   1b268:	mov	r2, r5
   1b26c:	ldr	r3, [sp, #28]
   1b270:	mov	r1, r4
   1b274:	str	r0, [sp]
   1b278:	mov	r0, sl
   1b27c:	bl	14520 <_start@@Base+0x1de8>
   1b280:	cmp	r5, r0
   1b284:	cmpne	r0, r4
   1b288:	beq	1b44c <_start@@Base+0x8d14>
   1b28c:	ldr	r2, [sp, #40]	; 0x28
   1b290:	mov	r4, r0
   1b294:	cmp	r2, #0
   1b298:	bne	1b2a8 <_start@@Base+0x8b70>
   1b29c:	ldr	r3, [sl, #8]
   1b2a0:	tst	r3, #2
   1b2a4:	beq	1b33c <_start@@Base+0x8c04>
   1b2a8:	mov	r3, #4
   1b2ac:	mov	r1, #0
   1b2b0:	ldr	r0, [sl]
   1b2b4:	mov	r2, r3
   1b2b8:	bl	24d44 <flatcc_builder_table_add@@Base>
   1b2bc:	cmp	r0, #0
   1b2c0:	beq	1afa4 <_start@@Base+0x886c>
   1b2c4:	ldr	r3, [sp, #40]	; 0x28
   1b2c8:	str	r3, [r0]
   1b2cc:	b	1b33c <_start@@Base+0x8c04>
   1b2d0:	mov	r2, #0
   1b2d4:	mov	r3, #0
   1b2d8:	strd	r2, [sp, #8]
   1b2dc:	b	1b144 <_start@@Base+0x8a0c>
   1b2e0:	mov	r2, #0
   1b2e4:	mov	r3, r2
   1b2e8:	b	1b168 <_start@@Base+0x8a30>
   1b2ec:	mov	r2, #0
   1b2f0:	mov	r3, r2
   1b2f4:	b	1b170 <_start@@Base+0x8a38>
   1b2f8:	mov	r2, #0
   1b2fc:	mov	r3, r2
   1b300:	b	1b178 <_start@@Base+0x8a40>
   1b304:	mov	r2, #0
   1b308:	mov	r3, r2
   1b30c:	b	1b158 <_start@@Base+0x8a20>
   1b310:	mov	r2, #0
   1b314:	mov	r3, r2
   1b318:	b	1b160 <_start@@Base+0x8a28>
   1b31c:	mov	r2, #0
   1b320:	mov	r3, r2
   1b324:	b	1b150 <_start@@Base+0x8a18>
   1b328:	mov	r1, r4
   1b32c:	mov	r2, r5
   1b330:	mov	r0, sl
   1b334:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1b338:	mov	r4, r0
   1b33c:	mov	r1, r4
   1b340:	mov	r3, r7
   1b344:	mov	r2, r5
   1b348:	mov	r0, sl
   1b34c:	bl	1582c <_start@@Base+0x30f4>
   1b350:	ldr	r3, [sp, #36]	; 0x24
   1b354:	mov	r4, r0
   1b358:	cmp	r3, #0
   1b35c:	bne	1b0b4 <_start@@Base+0x897c>
   1b360:	ldr	r3, [sl, #24]
   1b364:	cmp	r3, #0
   1b368:	bne	1afa4 <_start@@Base+0x886c>
   1b36c:	ldr	r0, [sl]
   1b370:	bl	23bf4 <flatcc_builder_end_table@@Base>
   1b374:	ldr	r3, [sp, #96]	; 0x60
   1b378:	cmp	r0, #0
   1b37c:	str	r0, [r3]
   1b380:	bne	1acf4 <_start@@Base+0x85bc>
   1b384:	b	1afa4 <_start@@Base+0x886c>
   1b388:	mov	r1, fp
   1b38c:	mov	r2, r5
   1b390:	mov	r0, sl
   1b394:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1b398:	mov	r4, r0
   1b39c:	b	1b33c <_start@@Base+0x8c04>
   1b3a0:	mov	r1, r4
   1b3a4:	mov	r3, #5
   1b3a8:	mov	r2, r5
   1b3ac:	mov	r0, sl
   1b3b0:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1b3b4:	mov	r4, r0
   1b3b8:	b	1b0e4 <_start@@Base+0x89ac>
   1b3bc:	mov	r1, r4
   1b3c0:	mov	r3, #5
   1b3c4:	mov	r2, r5
   1b3c8:	mov	r0, sl
   1b3cc:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1b3d0:	mov	r4, r0
   1b3d4:	b	1ade4 <_start@@Base+0x86ac>
   1b3d8:	mov	r4, r5
   1b3dc:	b	1af2c <_start@@Base+0x87f4>
   1b3e0:	ldr	r3, [sp, #44]	; 0x2c
   1b3e4:	cmp	r3, r9
   1b3e8:	bne	1b50c <_start@@Base+0x8dd4>
   1b3ec:	ldrd	r2, [sp, #48]	; 0x30
   1b3f0:	mov	r1, #0
   1b3f4:	movw	r0, #65535	; 0xffff
   1b3f8:	cmp	r3, r1
   1b3fc:	cmpeq	r2, r0
   1b400:	uxthls	r2, r2
   1b404:	movls	r0, r4
   1b408:	bls	1af58 <_start@@Base+0x8820>
   1b40c:	mov	r1, r4
   1b410:	mov	r3, #7
   1b414:	mov	r2, r5
   1b418:	mov	r0, sl
   1b41c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1b420:	cmp	fp, r0
   1b424:	bne	1af54 <_start@@Base+0x881c>
   1b428:	mov	r4, fp
   1b42c:	b	1af2c <_start@@Base+0x87f4>
   1b430:	mov	r1, r0
   1b434:	mov	r3, #33	; 0x21
   1b438:	mov	r2, r5
   1b43c:	mov	r0, sl
   1b440:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1b444:	mov	r4, r0
   1b448:	b	1af84 <_start@@Base+0x884c>
   1b44c:	mov	r4, r0
   1b450:	b	1afa4 <_start@@Base+0x886c>
   1b454:	mov	r4, r5
   1b458:	b	1b264 <_start@@Base+0x8b2c>
   1b45c:	ldr	r1, [sp, #44]	; 0x2c
   1b460:	ldrd	r2, [sp, #48]	; 0x30
   1b464:	cmp	r1, r6
   1b468:	beq	1b4d8 <_start@@Base+0x8da0>
   1b46c:	cmp	r3, #0
   1b470:	cmpeq	r2, #-2147483648	; 0x80000000
   1b474:	rsbls	r2, r2, #0
   1b478:	strls	r2, [sp, #40]	; 0x28
   1b47c:	bls	1b294 <_start@@Base+0x8b5c>
   1b480:	mov	r1, r0
   1b484:	mov	r3, #8
   1b488:	mov	r2, r5
   1b48c:	mov	r0, sl
   1b490:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1b494:	mov	r4, r0
   1b498:	cmp	fp, r4
   1b49c:	beq	1b264 <_start@@Base+0x8b2c>
   1b4a0:	ldr	r2, [sp, #40]	; 0x28
   1b4a4:	b	1b294 <_start@@Base+0x8b5c>
   1b4a8:	ldrb	r3, [r1, #1]
   1b4ac:	add	r2, r1, #1
   1b4b0:	cmp	r3, #117	; 0x75
   1b4b4:	bne	1b04c <_start@@Base+0x8914>
   1b4b8:	ldrb	r3, [r2, #1]!
   1b4bc:	cmp	r3, #108	; 0x6c
   1b4c0:	bne	1b04c <_start@@Base+0x8914>
   1b4c4:	ldrb	r3, [r2, #1]
   1b4c8:	cmp	r3, #108	; 0x6c
   1b4cc:	addeq	r4, r1, #4
   1b4d0:	bne	1b04c <_start@@Base+0x8914>
   1b4d4:	b	1aca8 <_start@@Base+0x8570>
   1b4d8:	mov	r1, #0
   1b4dc:	mvn	r0, #-2147483648	; 0x80000000
   1b4e0:	cmp	r3, r1
   1b4e4:	cmpeq	r2, r0
   1b4e8:	strls	r2, [sp, #40]	; 0x28
   1b4ec:	bls	1b294 <_start@@Base+0x8b5c>
   1b4f0:	mov	r1, r4
   1b4f4:	mov	r3, #7
   1b4f8:	mov	r2, r5
   1b4fc:	mov	r0, sl
   1b500:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1b504:	mov	r4, r0
   1b508:	b	1b498 <_start@@Base+0x8d60>
   1b50c:	mov	r1, r0
   1b510:	mov	r3, #8
   1b514:	mov	r2, r5
   1b518:	mov	r0, sl
   1b51c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1b520:	b	1b420 <_start@@Base+0x8ce8>
   1b524:	nop	{0}
   1b528:	ldrbvs	r6, [pc], #-372	; 1b530 <_start@@Base+0x8df8>
   1b52c:	cmnvc	r7, #456	; 0x1c8
   1b530:	svcpl	0x0064616d
   1b534:	strbtvc	r6, [r1], #-875	; 0xfffffc95
   1b538:	andeq	r0, r0, r0
   1b53c:	cmnvs	r7, r0, lsl #10
   1b540:	sub	ip, r2, r1
   1b544:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b548:	cmp	ip, #8
   1b54c:	strd	r6, [sp, #8]
   1b550:	strd	r8, [sp, #16]
   1b554:	strd	sl, [sp, #24]
   1b558:	str	lr, [sp, #32]
   1b55c:	ldrd	sl, [sp, #36]	; 0x24
   1b560:	bhi	1b594 <_start@@Base+0x8e5c>
   1b564:	sub	ip, ip, #1
   1b568:	cmp	ip, #7
   1b56c:	addls	pc, pc, ip, lsl #2
   1b570:	b	1b654 <_start@@Base+0x8f1c>
   1b574:	b	1b724 <_start@@Base+0x8fec>
   1b578:	b	1b70c <_start@@Base+0x8fd4>
   1b57c:	b	1b718 <_start@@Base+0x8fe0>
   1b580:	b	1b6dc <_start@@Base+0x8fa4>
   1b584:	b	1b6e8 <_start@@Base+0x8fb0>
   1b588:	b	1b6f4 <_start@@Base+0x8fbc>
   1b58c:	b	1b700 <_start@@Base+0x8fc8>
   1b590:	b	1b594 <_start@@Base+0x8e5c>
   1b594:	ldrb	r4, [r1, #7]
   1b598:	mov	r5, #0
   1b59c:	mov	lr, r5
   1b5a0:	ldrb	r6, [r1, #6]
   1b5a4:	orr	ip, r4, r6, lsl #8
   1b5a8:	ldrb	r6, [r1, #5]
   1b5ac:	orr	ip, ip, r6, lsl #16
   1b5b0:	ldrb	r6, [r1, #4]
   1b5b4:	orr	ip, ip, r6, lsl #24
   1b5b8:	ldrb	r8, [r1, #3]
   1b5bc:	orr	lr, lr, r8
   1b5c0:	ldrb	r8, [r1, #2]
   1b5c4:	orr	lr, lr, r8, lsl #8
   1b5c8:	ldrb	r8, [r1, #1]
   1b5cc:	orr	lr, lr, r8, lsl #16
   1b5d0:	ldrb	r8, [r1]
   1b5d4:	add	r7, pc, #380	; 0x17c
   1b5d8:	ldrd	r6, [r7]
   1b5dc:	orr	r5, lr, r8, lsl #24
   1b5e0:	cmp	r5, r7
   1b5e4:	cmpeq	ip, r6
   1b5e8:	bne	1b654 <_start@@Base+0x8f1c>
   1b5ec:	add	lr, r1, #8
   1b5f0:	sub	ip, r2, lr
   1b5f4:	cmp	ip, #8
   1b5f8:	bls	1b670 <_start@@Base+0x8f38>
   1b5fc:	mov	r5, #0
   1b600:	mov	r6, r5
   1b604:	mov	r4, r6
   1b608:	ldrb	r6, [r1, #11]
   1b60c:	orr	r6, r4, r6
   1b610:	ldrb	r4, [r1, #10]
   1b614:	orr	r6, r6, r4, lsl #8
   1b618:	ldrb	r4, [r1, #9]
   1b61c:	orr	r6, r6, r4, lsl #16
   1b620:	ldrb	r4, [r1, #8]
   1b624:	orr	r6, r6, r4, lsl #24
   1b628:	mov	r4, #0
   1b62c:	and	r5, r6, #-16777216	; 0xff000000
   1b630:	cmp	r5, #1912602624	; 0x72000000
   1b634:	cmpeq	r4, #0
   1b638:	movne	r4, #1
   1b63c:	moveq	r4, #0
   1b640:	cmp	ip, #1
   1b644:	movgt	ip, r4
   1b648:	orrle	ip, r4, #1
   1b64c:	cmp	ip, #0
   1b650:	beq	1b6a0 <_start@@Base+0x8f68>
   1b654:	ldrd	r4, [sp]
   1b658:	mov	r0, r1
   1b65c:	ldrd	r6, [sp, #8]
   1b660:	ldrd	r8, [sp, #16]
   1b664:	ldrd	sl, [sp, #24]
   1b668:	add	sp, sp, #32
   1b66c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b670:	sub	r4, ip, #1
   1b674:	cmp	r4, #7
   1b678:	addls	pc, pc, r4, lsl #2
   1b67c:	b	1b654 <_start@@Base+0x8f1c>
   1b680:	b	1b740 <_start@@Base+0x9008>
   1b684:	b	1b748 <_start@@Base+0x9010>
   1b688:	b	1b750 <_start@@Base+0x9018>
   1b68c:	b	1b738 <_start@@Base+0x9000>
   1b690:	b	1b730 <_start@@Base+0x8ff8>
   1b694:	b	1b730 <_start@@Base+0x8ff8>
   1b698:	b	1b5fc <_start@@Base+0x8ec4>
   1b69c:	b	1b5fc <_start@@Base+0x8ec4>
   1b6a0:	ldrb	ip, [r1, #9]
   1b6a4:	cmp	ip, #46	; 0x2e
   1b6a8:	bne	1b654 <_start@@Base+0x8f1c>
   1b6ac:	add	ip, r1, #10
   1b6b0:	cmp	lr, ip
   1b6b4:	beq	1b654 <_start@@Base+0x8f1c>
   1b6b8:	mov	r1, ip
   1b6bc:	strd	sl, [sp, #36]	; 0x24
   1b6c0:	ldrd	r4, [sp]
   1b6c4:	ldrd	r6, [sp, #8]
   1b6c8:	ldrd	r8, [sp, #16]
   1b6cc:	ldrd	sl, [sp, #24]
   1b6d0:	ldr	lr, [sp, #32]
   1b6d4:	add	sp, sp, #36	; 0x24
   1b6d8:	b	1296c <_start@@Base+0x234>
   1b6dc:	mov	ip, #0
   1b6e0:	mov	lr, ip
   1b6e4:	b	1b5b8 <_start@@Base+0x8e80>
   1b6e8:	mov	ip, #0
   1b6ec:	mov	lr, ip
   1b6f0:	b	1b5b0 <_start@@Base+0x8e78>
   1b6f4:	mov	ip, #0
   1b6f8:	mov	lr, ip
   1b6fc:	b	1b5a8 <_start@@Base+0x8e70>
   1b700:	mov	r4, #0
   1b704:	mov	r5, #0
   1b708:	b	1b59c <_start@@Base+0x8e64>
   1b70c:	mov	ip, #0
   1b710:	mov	lr, ip
   1b714:	b	1b5c8 <_start@@Base+0x8e90>
   1b718:	mov	ip, #0
   1b71c:	mov	lr, ip
   1b720:	b	1b5c0 <_start@@Base+0x8e88>
   1b724:	mov	ip, #0
   1b728:	mov	lr, ip
   1b72c:	b	1b5d0 <_start@@Base+0x8e98>
   1b730:	mov	r6, #0
   1b734:	b	1b604 <_start@@Base+0x8ecc>
   1b738:	mov	r4, #0
   1b73c:	b	1b608 <_start@@Base+0x8ed0>
   1b740:	mov	r6, #0
   1b744:	b	1b620 <_start@@Base+0x8ee8>
   1b748:	mov	r6, #0
   1b74c:	b	1b618 <_start@@Base+0x8ee0>
   1b750:	mov	r6, #0
   1b754:	b	1b610 <_start@@Base+0x8ed8>
   1b758:	cmnvs	r3, r5, ror #8
   1b75c:	cmnmi	r8, #-2147483620	; 0x8000001c
   1b760:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1b764:	mov	ip, r3
   1b768:	strd	r6, [sp, #8]
   1b76c:	strd	r8, [sp, #16]
   1b770:	mov	r9, r2
   1b774:	strd	sl, [sp, #24]
   1b778:	mov	fp, r0
   1b77c:	mov	sl, r1
   1b780:	str	lr, [sp, #32]
   1b784:	mov	r1, #36	; 0x24
   1b788:	vpush	{d8-d9}
   1b78c:	sub	sp, sp, #372	; 0x174
   1b790:	ldr	r0, [r0]
   1b794:	str	r3, [sp, #240]	; 0xf0
   1b798:	mov	r3, #0
   1b79c:	str	r3, [ip]
   1b7a0:	bl	23210 <flatcc_builder_start_table@@Base>
   1b7a4:	cmp	r0, #0
   1b7a8:	beq	1b7e8 <_start@@Base+0x90b0>
   1b7ac:	mov	r2, r9
   1b7b0:	mov	r1, sl
   1b7b4:	mov	r0, fp
   1b7b8:	mov	r3, #33	; 0x21
   1b7bc:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1b7c0:	mov	r4, r0
   1b7c4:	mov	r0, r4
   1b7c8:	add	sp, sp, #372	; 0x174
   1b7cc:	vpop	{d8-d9}
   1b7d0:	ldrd	r4, [sp]
   1b7d4:	ldrd	r6, [sp, #8]
   1b7d8:	ldrd	r8, [sp, #16]
   1b7dc:	ldrd	sl, [sp, #24]
   1b7e0:	add	sp, sp, #32
   1b7e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b7e8:	add	r0, sp, #344	; 0x158
   1b7ec:	mov	r3, #1
   1b7f0:	mov	r2, r9
   1b7f4:	mov	r1, sl
   1b7f8:	str	r0, [sp]
   1b7fc:	mov	r0, fp
   1b800:	bl	295e4 <flatcc_json_parser_prepare_unions@@Base>
   1b804:	cmp	r9, r0
   1b808:	beq	1b7ac <_start@@Base+0x9074>
   1b80c:	add	r8, sp, #336	; 0x150
   1b810:	mov	r1, sl
   1b814:	mov	r3, r8
   1b818:	mov	r2, r9
   1b81c:	mov	r0, fp
   1b820:	bl	1362c <_start@@Base+0xef4>
   1b824:	ldr	r3, [sp, #336]	; 0x150
   1b828:	mov	sl, r0
   1b82c:	cmp	r3, #0
   1b830:	beq	1c0b8 <_start@@Base+0x9980>
   1b834:	str	r8, [sp, #28]
   1b838:	mov	r8, r9
   1b83c:	mov	r9, fp
   1b840:	cmp	sl, r8
   1b844:	beq	1b870 <_start@@Base+0x9138>
   1b848:	ldrb	r3, [sl]
   1b84c:	cmp	r3, #34	; 0x22
   1b850:	moveq	r3, #0
   1b854:	addeq	sl, sl, #1
   1b858:	streq	r3, [r9, #12]
   1b85c:	beq	1b870 <_start@@Base+0x9138>
   1b860:	cmp	r3, #46	; 0x2e
   1b864:	movne	r3, #1
   1b868:	strne	r3, [r9, #12]
   1b86c:	beq	1c778 <_start@@Base+0xa040>
   1b870:	mov	r1, r8
   1b874:	mov	r0, sl
   1b878:	bl	12828 <_start@@Base+0xf0>
   1b87c:	add	r3, pc, #828	; 0x33c
   1b880:	ldrd	r2, [r3]
   1b884:	mov	r4, r0
   1b888:	mov	r5, r1
   1b88c:	strd	r4, [sp, #16]
   1b890:	cmp	r1, r3
   1b894:	cmpeq	r0, r2
   1b898:	bhi	1b9f4 <_start@@Base+0x92bc>
   1b89c:	add	r3, pc, #804	; 0x324
   1b8a0:	ldrd	r2, [r3]
   1b8a4:	cmp	r1, r3
   1b8a8:	cmpeq	r0, r2
   1b8ac:	bhi	1bb00 <_start@@Base+0x93c8>
   1b8b0:	add	r3, pc, #792	; 0x318
   1b8b4:	ldrd	r2, [r3]
   1b8b8:	cmp	r1, r3
   1b8bc:	cmpeq	r0, r2
   1b8c0:	bhi	1be68 <_start@@Base+0x9730>
   1b8c4:	and	r1, r0, #-16777216	; 0xff000000
   1b8c8:	add	r3, pc, #776	; 0x308
   1b8cc:	ldrd	r2, [r3]
   1b8d0:	str	r1, [sp, #48]	; 0x30
   1b8d4:	str	r5, [sp, #52]	; 0x34
   1b8d8:	ldrd	r0, [sp, #48]	; 0x30
   1b8dc:	cmp	r1, r3
   1b8e0:	cmpeq	r0, r2
   1b8e4:	beq	1cb04 <_start@@Base+0xa3cc>
   1b8e8:	add	r3, pc, #752	; 0x2f0
   1b8ec:	ldrd	r2, [r3]
   1b8f0:	ldrd	r0, [sp, #48]	; 0x30
   1b8f4:	cmp	r1, r3
   1b8f8:	cmpeq	r0, r2
   1b8fc:	bne	1dc84 <_start@@Base+0xb54c>
   1b900:	sub	r3, r8, sl
   1b904:	cmp	r3, #5
   1b908:	ble	1d7a0 <_start@@Base+0xb068>
   1b90c:	mov	r3, #5
   1b910:	mov	r2, r8
   1b914:	mov	r1, sl
   1b918:	mov	r0, r9
   1b91c:	bl	17b2c <_start@@Base+0x53f4>
   1b920:	cmp	r0, sl
   1b924:	mov	r4, r0
   1b928:	beq	1d7a0 <_start@@Base+0xb068>
   1b92c:	mov	r3, #0
   1b930:	mov	r0, #0
   1b934:	mov	r1, #0
   1b938:	cmp	r8, r4
   1b93c:	strb	r3, [sp, #352]	; 0x160
   1b940:	str	r3, [sp, #356]	; 0x164
   1b944:	add	r3, sp, #360	; 0x168
   1b948:	strd	r0, [r3]
   1b94c:	beq	1ee68 <_start@@Base+0xc730>
   1b950:	add	r0, sp, #360	; 0x168
   1b954:	add	r3, sp, #356	; 0x164
   1b958:	mov	r2, r8
   1b95c:	mov	r1, r4
   1b960:	str	r0, [sp]
   1b964:	mov	r0, r9
   1b968:	bl	28ea4 <flatcc_json_parser_integer@@Base>
   1b96c:	cmp	r4, r0
   1b970:	mov	sl, r0
   1b974:	bne	1eea8 <_start@@Base+0xc770>
   1b978:	ldr	r3, [pc, #680]	; 1bc28 <_start@@Base+0x94f0>
   1b97c:	add	ip, sp, #352	; 0x160
   1b980:	mov	r2, r8
   1b984:	mov	r1, sl
   1b988:	mov	r0, r9
   1b98c:	str	ip, [sp]
   1b990:	add	r3, pc, r3
   1b994:	add	r3, r3, #276	; 0x114
   1b998:	bl	14784 <_start@@Base+0x204c>
   1b99c:	cmp	r8, r0
   1b9a0:	cmpne	r0, sl
   1b9a4:	beq	1cd38 <_start@@Base+0xa600>
   1b9a8:	add	r3, sp, #352	; 0x160
   1b9ac:	mov	sl, r0
   1b9b0:	ldrsb	r2, [r3]
   1b9b4:	cmp	r2, #8
   1b9b8:	bne	1b9c8 <_start@@Base+0x9290>
   1b9bc:	ldr	r3, [r9, #8]
   1b9c0:	tst	r3, #2
   1b9c4:	beq	1c08c <_start@@Base+0x9954>
   1b9c8:	mov	r3, #1
   1b9cc:	mov	r1, #6
   1b9d0:	ldr	r0, [r9]
   1b9d4:	mov	r2, r3
   1b9d8:	bl	24d44 <flatcc_builder_table_add@@Base>
   1b9dc:	cmp	r0, #0
   1b9e0:	beq	1ca5c <_start@@Base+0xa324>
   1b9e4:	add	r3, sp, #352	; 0x160
   1b9e8:	ldrsb	r3, [r3]
   1b9ec:	strb	r3, [r0]
   1b9f0:	b	1c08c <_start@@Base+0x9954>
   1b9f4:	add	r3, pc, #492	; 0x1ec
   1b9f8:	ldrd	r2, [r3]
   1b9fc:	ldrd	r0, [sp, #16]
   1ba00:	cmp	r1, r3
   1ba04:	cmpeq	r0, r2
   1ba08:	bhi	1bc30 <_start@@Base+0x94f8>
   1ba0c:	add	r3, pc, #476	; 0x1dc
   1ba10:	ldrd	r2, [r3]
   1ba14:	cmp	r1, r3
   1ba18:	cmpeq	r0, r2
   1ba1c:	beq	1c110 <_start@@Base+0x99d8>
   1ba20:	add	r3, pc, #464	; 0x1d0
   1ba24:	ldrd	r2, [r3]
   1ba28:	ldrd	r0, [sp, #16]
   1ba2c:	cmp	r1, r3
   1ba30:	cmpeq	r0, r2
   1ba34:	bhi	1c2cc <_start@@Base+0x9b94>
   1ba38:	add	r3, pc, #448	; 0x1c0
   1ba3c:	ldrd	r2, [r3]
   1ba40:	cmp	r1, r3
   1ba44:	cmpeq	r0, r2
   1ba48:	beq	1de0c <_start@@Base+0xb6d4>
   1ba4c:	add	r3, pc, #436	; 0x1b4
   1ba50:	ldrd	r2, [r3]
   1ba54:	ldrd	r0, [sp, #16]
   1ba58:	cmp	r1, r3
   1ba5c:	cmpeq	r0, r2
   1ba60:	bne	1cf28 <_start@@Base+0xa7f0>
   1ba64:	sub	r3, r8, sl
   1ba68:	cmp	r3, #8
   1ba6c:	ble	1ee38 <_start@@Base+0xc700>
   1ba70:	mov	r3, #8
   1ba74:	mov	r2, r8
   1ba78:	mov	r1, sl
   1ba7c:	mov	r0, r9
   1ba80:	bl	17b2c <_start@@Base+0x53f4>
   1ba84:	cmp	r0, sl
   1ba88:	mov	r4, r0
   1ba8c:	beq	1ee38 <_start@@Base+0xc700>
   1ba90:	mov	r2, #0
   1ba94:	sub	r3, r8, r0
   1ba98:	cmp	r3, #3
   1ba9c:	strb	r2, [sp, #352]	; 0x160
   1baa0:	ble	1d854 <_start@@Base+0xb11c>
   1baa4:	ldrb	r2, [r0]
   1baa8:	cmp	r2, #116	; 0x74
   1baac:	beq	1f42c <_start@@Base+0xccf4>
   1bab0:	cmp	r3, #4
   1bab4:	beq	1d854 <_start@@Base+0xb11c>
   1bab8:	ldr	r1, [pc, #364]	; 1bc2c <_start@@Base+0x94f4>
   1babc:	mov	r2, #5
   1bac0:	mov	r0, r4
   1bac4:	add	r1, pc, r1
   1bac8:	bl	12598 <memcmp@plt>
   1bacc:	cmp	r0, #0
   1bad0:	addeq	sl, r4, #5
   1bad4:	bne	1d854 <_start@@Base+0xb11c>
   1bad8:	mov	r3, #1
   1badc:	mov	r1, #15
   1bae0:	ldr	r0, [r9]
   1bae4:	mov	r2, r3
   1bae8:	bl	24d44 <flatcc_builder_table_add@@Base>
   1baec:	cmp	r0, #0
   1baf0:	beq	1ca5c <_start@@Base+0xa324>
   1baf4:	ldrb	r3, [sp, #352]	; 0x160
   1baf8:	strb	r3, [r0]
   1bafc:	b	1c08c <_start@@Base+0x9954>
   1bb00:	add	r3, pc, #264	; 0x108
   1bb04:	ldrd	r2, [r3]
   1bb08:	ldrd	r4, [sp, #16]
   1bb0c:	cmp	r5, r3
   1bb10:	cmpeq	r4, r2
   1bb14:	bhi	1c00c <_start@@Base+0x98d4>
   1bb18:	add	r3, pc, #248	; 0xf8
   1bb1c:	ldrd	r2, [r3]
   1bb20:	cmp	r5, r3
   1bb24:	cmpeq	r4, r2
   1bb28:	bhi	1c648 <_start@@Base+0x9f10>
   1bb2c:	mov	r1, #0
   1bb30:	add	r3, pc, #232	; 0xe8
   1bb34:	ldrd	r2, [r3]
   1bb38:	str	r1, [sp, #128]	; 0x80
   1bb3c:	str	r5, [sp, #132]	; 0x84
   1bb40:	ldrd	r0, [sp, #128]	; 0x80
   1bb44:	cmp	r1, r3
   1bb48:	cmpeq	r0, r2
   1bb4c:	bne	1cef8 <_start@@Base+0xa7c0>
   1bb50:	sub	r3, r8, sl
   1bb54:	cmp	r3, #4
   1bb58:	ble	1e458 <_start@@Base+0xbd20>
   1bb5c:	mov	r1, sl
   1bb60:	mov	r3, #4
   1bb64:	mov	r2, r8
   1bb68:	mov	r0, r9
   1bb6c:	bl	17b2c <_start@@Base+0x53f4>
   1bb70:	cmp	r0, sl
   1bb74:	mov	r1, r0
   1bb78:	beq	1e458 <_start@@Base+0xbd20>
   1bb7c:	add	r3, sp, #340	; 0x154
   1bb80:	mov	r2, r8
   1bb84:	mov	r0, r9
   1bb88:	bl	29418 <flatcc_json_parser_build_string@@Base>
   1bb8c:	ldr	r3, [sp, #340]	; 0x154
   1bb90:	mov	sl, r0
   1bb94:	cmp	r3, #0
   1bb98:	beq	1ca5c <_start@@Base+0xa324>
   1bb9c:	mov	r1, #3
   1bba0:	ldr	r0, [r9]
   1bba4:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   1bba8:	cmp	r0, #0
   1bbac:	beq	1ca5c <_start@@Base+0xa324>
   1bbb0:	ldr	r3, [sp, #340]	; 0x154
   1bbb4:	str	r3, [r0]
   1bbb8:	b	1c08c <_start@@Base+0x9954>
   1bbbc:	nop	{0}
   1bbc0:	cmnvs	r2, r0, ror #4
   1bbc4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bbc8:			; <UNDEFINED> instruction: 0xffffffff
   1bbcc:	cdpvs	13, 6, cr6, cr1, cr4, {3}
   1bbd0:			; <UNDEFINED> instruction: 0xffffffff
   1bbd4:			; <UNDEFINED> instruction: 0x666c6577
   1bbd8:	stmdbvc	r0, {}	; <UNPREDICTABLE>
   1bbdc:	strbvs	r6, [lr, #-1389]!	; 0xfffffa93
   1bbe0:	andvc	r0, r0, #0
   1bbe4:	cmnvs	pc, #28416	; 0x6f00
   1bbe8:	shsub8vs	pc, r2, pc	; <UNPREDICTABLE>
   1bbec:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bbf0:	cmnvs	r2, r1, ror #4
   1bbf4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bbf8:	strbvs	r7, [sp, #-115]!	; 0xffffff8d
   1bbfc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bc00:	rsbvs	r7, r1, #-1811939327	; 0x94000001
   1bc04:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bc08:	rsbvs	r6, pc, #108, 30	; 0x1b0
   1bc0c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bc10:			; <UNDEFINED> instruction: 0xffffffff
   1bc14:	strbtvc	r7, [r5], #-883	; 0xfffffc8d
   1bc18:	cdpvs	15, 7, cr5, cr4, cr13, {3}
   1bc1c:	rsbvc	r7, r1, r5, ror #4
   1bc20:	andeq	r0, r0, r0
   1bc24:	cdpvs	13, 6, cr6, cr1, cr5, {3}
   1bc28:	strdeq	r1, [r2], -r8
   1bc2c:	andeq	lr, r0, r4, lsl #28
   1bc30:	add	r3, pc, #912	; 0x390
   1bc34:	ldrd	r2, [r3]
   1bc38:	ldrd	r4, [sp, #16]
   1bc3c:	cmp	r5, r3
   1bc40:	cmpeq	r4, r2
   1bc44:	bhi	1bd14 <_start@@Base+0x95dc>
   1bc48:	lsr	r3, r4, #16
   1bc4c:	str	r3, [sp, #32]
   1bc50:	ldr	r1, [sp, #32]
   1bc54:	str	r5, [sp, #36]	; 0x24
   1bc58:	add	r3, pc, #880	; 0x370
   1bc5c:	ldrd	r2, [r3]
   1bc60:	lsl	r1, r1, #16
   1bc64:	str	r1, [sp, #32]
   1bc68:	ldrd	r0, [sp, #32]
   1bc6c:	cmp	r1, r3
   1bc70:	cmpeq	r0, r2
   1bc74:	bne	1c8bc <_start@@Base+0xa184>
   1bc78:	sub	r3, r8, sl
   1bc7c:	cmp	r3, #6
   1bc80:	ble	1e1f0 <_start@@Base+0xbab8>
   1bc84:	mov	r3, #6
   1bc88:	mov	r2, r8
   1bc8c:	mov	r1, sl
   1bc90:	mov	r0, r9
   1bc94:	bl	17b2c <_start@@Base+0x53f4>
   1bc98:	cmp	r0, sl
   1bc9c:	mov	r4, r0
   1bca0:	beq	1e1f0 <_start@@Base+0xbab8>
   1bca4:	mov	ip, #0
   1bca8:	add	r5, sp, #360	; 0x168
   1bcac:	mov	r1, r0
   1bcb0:	mov	r2, r8
   1bcb4:	mov	r3, r5
   1bcb8:	mov	r0, r9
   1bcbc:	str	ip, [sp, #360]	; 0x168
   1bcc0:	bl	28130 <flatcc_json_parser_float@@Base>
   1bcc4:	cmp	r0, r4
   1bcc8:	mov	sl, r0
   1bccc:	beq	1e778 <_start@@Base+0xc040>
   1bcd0:	vldr	s15, [sp, #360]	; 0x168
   1bcd4:	vcmp.f32	s15, #0.0
   1bcd8:	vmrs	APSR_nzcv, fpscr
   1bcdc:	bne	1bcec <_start@@Base+0x95b4>
   1bce0:	ldr	r3, [r9, #8]
   1bce4:	tst	r3, #2
   1bce8:	beq	1c08c <_start@@Base+0x9954>
   1bcec:	mov	r3, #4
   1bcf0:	mov	r1, #27
   1bcf4:	ldr	r0, [r9]
   1bcf8:	mov	r2, r3
   1bcfc:	bl	24d44 <flatcc_builder_table_add@@Base>
   1bd00:	cmp	r0, #0
   1bd04:	beq	1ca5c <_start@@Base+0xa324>
   1bd08:	ldr	r3, [sp, #360]	; 0x168
   1bd0c:	str	r3, [r0]
   1bd10:	b	1c08c <_start@@Base+0x9954>
   1bd14:	add	r3, pc, #700	; 0x2bc
   1bd18:	ldrd	r2, [r3]
   1bd1c:	ldrd	r0, [sp, #16]
   1bd20:	cmp	r1, r3
   1bd24:	cmpeq	r0, r2
   1bd28:	beq	1c8d4 <_start@@Base+0xa19c>
   1bd2c:	add	r3, pc, #684	; 0x2ac
   1bd30:	ldrd	r2, [r3]
   1bd34:	ldrd	r0, [sp, #16]
   1bd38:	cmp	r1, r3
   1bd3c:	cmpeq	r0, r2
   1bd40:	bhi	1cbb4 <_start@@Base+0xa47c>
   1bd44:	add	r3, pc, #668	; 0x29c
   1bd48:	ldrd	r2, [r3]
   1bd4c:	cmp	r1, r3
   1bd50:	cmpeq	r0, r2
   1bd54:	bne	1d5f4 <_start@@Base+0xaebc>
   1bd58:	add	r4, sl, #8
   1bd5c:	mov	r1, r8
   1bd60:	mov	r0, r4
   1bd64:	bl	12828 <_start@@Base+0xf0>
   1bd68:	add	r3, pc, #640	; 0x280
   1bd6c:	ldrd	r2, [r3]
   1bd70:	cmp	r1, r3
   1bd74:	cmpeq	r0, r2
   1bd78:	bne	1e718 <_start@@Base+0xbfe0>
   1bd7c:	mov	r3, #0
   1bd80:	add	r4, sl, #16
   1bd84:	mov	r1, r8
   1bd88:	mov	r0, r4
   1bd8c:	str	r3, [sp, #264]	; 0x108
   1bd90:	bl	12828 <_start@@Base+0xf0>
   1bd94:	str	r1, [sp, #268]	; 0x10c
   1bd98:	add	r1, sp, #264	; 0x108
   1bd9c:	add	r3, pc, #596	; 0x254
   1bda0:	ldrd	r2, [r3]
   1bda4:	ldrd	r0, [r1]
   1bda8:	cmp	r1, r3
   1bdac:	cmpeq	r0, r2
   1bdb0:	bne	1e7f4 <_start@@Base+0xc0bc>
   1bdb4:	sub	r3, r8, r4
   1bdb8:	cmp	r3, #4
   1bdbc:	ble	1fabc <_start@@Base+0xd384>
   1bdc0:	mov	r3, #4
   1bdc4:	mov	r2, r8
   1bdc8:	mov	r1, r4
   1bdcc:	mov	r0, r9
   1bdd0:	bl	17b2c <_start@@Base+0x53f4>
   1bdd4:	cmp	r4, r0
   1bdd8:	mov	sl, r0
   1bddc:	beq	1fab8 <_start@@Base+0xd380>
   1bde0:	cmp	r8, r0
   1bde4:	ldr	r0, [r9]
   1bde8:	beq	1bdf8 <_start@@Base+0x96c0>
   1bdec:	ldrb	r3, [sl]
   1bdf0:	cmp	r3, #91	; 0x5b
   1bdf4:	beq	1fd10 <_start@@Base+0xd5d8>
   1bdf8:	mov	r3, #0
   1bdfc:	mov	r2, r3
   1be00:	mov	r1, r3
   1be04:	bl	22238 <flatcc_builder_start_buffer@@Base>
   1be08:	cmp	r0, #0
   1be0c:	bne	1ca5c <_start@@Base+0xa324>
   1be10:	mov	r1, sl
   1be14:	add	r3, sp, #340	; 0x154
   1be18:	mov	r2, r8
   1be1c:	mov	r0, r9
   1be20:	bl	1b760 <_start@@Base+0x9028>
   1be24:	ldr	r1, [sp, #340]	; 0x154
   1be28:	mov	sl, r0
   1be2c:	cmp	r1, #0
   1be30:	beq	1ca5c <_start@@Base+0xa324>
   1be34:	ldr	r0, [r9]
   1be38:	bl	22314 <flatcc_builder_end_buffer@@Base>
   1be3c:	str	r0, [sp, #340]	; 0x154
   1be40:	cmp	r0, #0
   1be44:	beq	1ca5c <_start@@Base+0xa324>
   1be48:	mov	r1, #13
   1be4c:	ldr	r0, [r9]
   1be50:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   1be54:	cmp	r0, #0
   1be58:	beq	1ca5c <_start@@Base+0xa324>
   1be5c:	ldr	r3, [sp, #340]	; 0x154
   1be60:	str	r3, [r0]
   1be64:	b	1c08c <_start@@Base+0x9954>
   1be68:	ldrd	r4, [sp, #16]
   1be6c:	movw	r3, #65535	; 0xffff
   1be70:	movt	r3, #26735	; 0x686f
   1be74:	mvn	r2, #0
   1be78:	cmp	r5, r3
   1be7c:	cmpeq	r4, r2
   1be80:	bhi	1c7d0 <_start@@Base+0xa098>
   1be84:	mov	r1, #0
   1be88:	add	r3, pc, #368	; 0x170
   1be8c:	ldrd	r2, [r3]
   1be90:	str	r1, [sp, #120]	; 0x78
   1be94:	str	r5, [sp, #124]	; 0x7c
   1be98:	ldrd	r0, [sp, #120]	; 0x78
   1be9c:	cmp	r1, r3
   1bea0:	cmpeq	r0, r2
   1bea4:	bne	1cf10 <_start@@Base+0xa7d8>
   1bea8:	sub	r3, r8, sl
   1beac:	cmp	r3, #4
   1beb0:	ble	1e338 <_start@@Base+0xbc00>
   1beb4:	mov	r3, #4
   1beb8:	mov	r2, r8
   1bebc:	mov	r1, sl
   1bec0:	mov	r0, r9
   1bec4:	bl	17b2c <_start@@Base+0x53f4>
   1bec8:	cmp	r0, sl
   1becc:	mov	r4, r0
   1bed0:	beq	1e338 <_start@@Base+0xbc00>
   1bed4:	mov	r2, #1
   1bed8:	mvn	r3, #0
   1bedc:	ldr	r0, [r9]
   1bee0:	mov	r1, r2
   1bee4:	bl	22f60 <flatcc_builder_start_vector@@Base>
   1bee8:	subs	r5, r0, #0
   1beec:	bne	1fb14 <_start@@Base+0xd3dc>
   1bef0:	mov	r1, r4
   1bef4:	ldr	r4, [sp, #28]
   1bef8:	mov	r2, r8
   1befc:	mov	r0, r9
   1bf00:	mov	r3, r4
   1bf04:	bl	13700 <_start@@Base+0xfc8>
   1bf08:	ldr	r3, [sp, #336]	; 0x150
   1bf0c:	mov	sl, r0
   1bf10:	cmp	r3, #0
   1bf14:	beq	1f120 <_start@@Base+0xc9e8>
   1bf18:	ldr	r3, [pc, #232]	; 1c008 <_start@@Base+0x98d0>
   1bf1c:	mov	fp, r5
   1bf20:	strd	r6, [sp, #64]	; 0x40
   1bf24:	mov	r7, r4
   1bf28:	add	r3, pc, r3
   1bf2c:	add	r3, r3, #292	; 0x124
   1bf30:	str	r3, [sp, #16]
   1bf34:	b	1bf64 <_start@@Base+0x982c>
   1bf38:	ldrb	ip, [sp, #360]	; 0x168
   1bf3c:	mov	r1, r0
   1bf40:	mov	r3, r7
   1bf44:	mov	r2, r8
   1bf48:	mov	r0, r9
   1bf4c:	strb	ip, [r5]
   1bf50:	bl	159f0 <_start@@Base+0x32b8>
   1bf54:	ldr	r3, [sp, #336]	; 0x150
   1bf58:	mov	sl, r0
   1bf5c:	cmp	r3, #0
   1bf60:	beq	1f11c <_start@@Base+0xc9e4>
   1bf64:	mov	r1, #1
   1bf68:	ldr	r0, [r9]
   1bf6c:	add	r4, sp, #360	; 0x168
   1bf70:	strb	fp, [sp, #360]	; 0x168
   1bf74:	bl	22618 <flatcc_builder_extend_vector@@Base>
   1bf78:	subs	r5, r0, #0
   1bf7c:	mov	r1, sl
   1bf80:	mov	r3, r4
   1bf84:	mov	r2, r8
   1bf88:	mov	r0, r9
   1bf8c:	beq	1ca5c <_start@@Base+0xa324>
   1bf90:	bl	132cc <_start@@Base+0xb94>
   1bf94:	cmp	r0, sl
   1bf98:	bne	1bf38 <_start@@Base+0x9800>
   1bf9c:	mov	r2, r8
   1bfa0:	mov	r1, sl
   1bfa4:	str	r4, [sp]
   1bfa8:	mov	r0, r9
   1bfac:	ldr	r3, [sp, #16]
   1bfb0:	bl	1405c <_start@@Base+0x1924>
   1bfb4:	cmp	r8, r0
   1bfb8:	cmpne	r0, sl
   1bfbc:	bne	1bf38 <_start@@Base+0x9800>
   1bfc0:	b	1cd38 <_start@@Base+0xa600>
   1bfc4:	nop	{0}
   1bfc8:	stmdavs	r1!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^
   1bfcc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bfd0:	ldrtvs	r0, [r3], -r0
   1bfd4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bfd8:	stmdavs	r1!, {r3, r5, r6, r8, r9, ip, sp, lr}^
   1bfdc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bfe0:	svcvs	0x00725f6e
   1bfe4:			; <UNDEFINED> instruction: 0x76656374
   1bfe8:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1bfec:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1bff0:	cmnvs	r4, r5, ror r2
   1bff4:	strbvs	r6, [r4, #-1644]!	; 0xfffff994
   1bff8:	andeq	r0, r0, r0
   1bffc:			; <UNDEFINED> instruction: 0x66666572
   1c000:	andeq	r0, r0, r0
   1c004:			; <UNDEFINED> instruction: 0x666c6578
   1c008:	andeq	r1, r2, r0, ror #2
   1c00c:	ldrd	r4, [sp, #16]
   1c010:	sub	fp, r8, sl
   1c014:	add	r3, pc, #916	; 0x394
   1c018:	ldrd	r2, [r3]
   1c01c:	and	r1, r4, #-16777216	; 0xff000000
   1c020:	str	r1, [sp, #56]	; 0x38
   1c024:	str	r5, [sp, #60]	; 0x3c
   1c028:	ldrd	r0, [sp, #56]	; 0x38
   1c02c:	cmp	r1, r3
   1c030:	cmpeq	r0, r2
   1c034:	beq	1c9a4 <_start@@Base+0xa26c>
   1c038:	cmp	fp, #4
   1c03c:	ble	1dcac <_start@@Base+0xb574>
   1c040:	mov	r3, #4
   1c044:	mov	r2, r8
   1c048:	mov	r1, sl
   1c04c:	mov	r0, r9
   1c050:	bl	17b2c <_start@@Base+0x53f4>
   1c054:	cmp	r0, sl
   1c058:	beq	1dcac <_start@@Base+0xb574>
   1c05c:	ldr	ip, [pc, #884]	; 1c3d8 <_start@@Base+0x9ca0>
   1c060:	mov	r4, #8
   1c064:	mov	r1, r0
   1c068:	mov	r3, #0
   1c06c:	mov	r2, r8
   1c070:	ldr	lr, [sp, #344]	; 0x158
   1c074:	mov	r0, r9
   1c078:	add	ip, pc, ip
   1c07c:	stm	sp, {r4, lr}
   1c080:	str	ip, [sp, #8]
   1c084:	bl	296f0 <flatcc_json_parser_union@@Base>
   1c088:	mov	sl, r0
   1c08c:	mov	r1, sl
   1c090:	mov	r2, r8
   1c094:	ldr	r3, [sp, #28]
   1c098:	mov	r0, r9
   1c09c:	bl	1582c <_start@@Base+0x30f4>
   1c0a0:	ldr	r3, [sp, #336]	; 0x150
   1c0a4:	mov	sl, r0
   1c0a8:	cmp	r3, #0
   1c0ac:	bne	1b840 <_start@@Base+0x9108>
   1c0b0:	mov	fp, r9
   1c0b4:	mov	r9, r8
   1c0b8:	ldr	r3, [fp, #24]
   1c0bc:	cmp	r3, #0
   1c0c0:	bne	1b7ac <_start@@Base+0x9074>
   1c0c4:	mov	r1, #3
   1c0c8:	ldr	r0, [fp]
   1c0cc:	bl	23a2c <flatcc_builder_check_required_field@@Base>
   1c0d0:	cmp	r0, #0
   1c0d4:	mov	r1, sl
   1c0d8:	beq	1f414 <_start@@Base+0xccdc>
   1c0dc:	mov	r2, r9
   1c0e0:	mov	r0, fp
   1c0e4:	ldr	r3, [sp, #344]	; 0x158
   1c0e8:	bl	29678 <flatcc_json_parser_finalize_unions@@Base>
   1c0ec:	mov	r4, r0
   1c0f0:	ldr	r0, [fp]
   1c0f4:	bl	23bf4 <flatcc_builder_end_table@@Base>
   1c0f8:	ldr	r3, [sp, #240]	; 0xf0
   1c0fc:	cmp	r0, #0
   1c100:	str	r0, [r3]
   1c104:	bne	1b7c4 <_start@@Base+0x908c>
   1c108:	mov	sl, r4
   1c10c:	b	1b7ac <_start@@Base+0x9074>
   1c110:	add	r4, sl, #8
   1c114:	mov	r1, r8
   1c118:	mov	r0, r4
   1c11c:	bl	12828 <_start@@Base+0xf0>
   1c120:	add	r3, pc, #656	; 0x290
   1c124:	ldrd	r2, [r3]
   1c128:	cmp	r1, r3
   1c12c:	cmpeq	r0, r2
   1c130:	bhi	1ca68 <_start@@Base+0xa330>
   1c134:	add	r3, pc, #644	; 0x284
   1c138:	ldrd	r2, [r3]
   1c13c:	cmp	r1, r3
   1c140:	cmpeq	r0, r2
   1c144:	bne	1cf40 <_start@@Base+0xa808>
   1c148:	sub	r3, r8, r4
   1c14c:	cmp	r3, #8
   1c150:	ble	1e354 <_start@@Base+0xbc1c>
   1c154:	mov	r3, #8
   1c158:	mov	r2, r8
   1c15c:	mov	r1, r4
   1c160:	mov	r0, r9
   1c164:	bl	17b2c <_start@@Base+0x53f4>
   1c168:	cmp	r4, r0
   1c16c:	mov	sl, r0
   1c170:	beq	1e350 <_start@@Base+0xbc18>
   1c174:	mov	r2, #1
   1c178:	mvn	r3, #0
   1c17c:	ldr	r0, [r9]
   1c180:	mov	r1, r2
   1c184:	bl	22f60 <flatcc_builder_start_vector@@Base>
   1c188:	cmp	r0, #0
   1c18c:	bne	1ca5c <_start@@Base+0xa324>
   1c190:	ldr	r4, [sp, #28]
   1c194:	mov	r1, sl
   1c198:	mov	r2, r8
   1c19c:	mov	r0, r9
   1c1a0:	mov	r3, r4
   1c1a4:	bl	13700 <_start@@Base+0xfc8>
   1c1a8:	ldr	r3, [sp, #336]	; 0x150
   1c1ac:	mov	sl, r0
   1c1b0:	cmp	r3, #0
   1c1b4:	beq	1f20c <_start@@Base+0xcad4>
   1c1b8:	ldr	r3, [pc, #540]	; 1c3dc <_start@@Base+0x9ca4>
   1c1bc:	strd	r6, [sp, #16]
   1c1c0:	ldr	r2, [pc, #536]	; 1c3e0 <_start@@Base+0x9ca8>
   1c1c4:	add	r3, pc, r3
   1c1c8:	add	fp, r3, #420	; 0x1a4
   1c1cc:	add	r2, pc, r2
   1c1d0:	mov	r6, fp
   1c1d4:	mov	r7, r2
   1c1d8:	mov	fp, r4
   1c1dc:	b	1c20c <_start@@Base+0x9ad4>
   1c1e0:	ldrb	ip, [sp, #356]	; 0x164
   1c1e4:	mov	r3, fp
   1c1e8:	mov	r1, r4
   1c1ec:	mov	r2, r8
   1c1f0:	mov	r0, r9
   1c1f4:	strb	ip, [r5]
   1c1f8:	bl	159f0 <_start@@Base+0x32b8>
   1c1fc:	ldr	r3, [sp, #336]	; 0x150
   1c200:	mov	sl, r0
   1c204:	cmp	r3, #0
   1c208:	beq	1f208 <_start@@Base+0xcad0>
   1c20c:	mov	r3, #0
   1c210:	mov	r1, #1
   1c214:	ldr	r0, [r9]
   1c218:	strb	r3, [sp, #356]	; 0x164
   1c21c:	bl	22618 <flatcc_builder_extend_vector@@Base>
   1c220:	subs	r5, r0, #0
   1c224:	beq	1ca5c <_start@@Base+0xa324>
   1c228:	sub	r3, r8, sl
   1c22c:	cmp	r3, #3
   1c230:	ble	1c268 <_start@@Base+0x9b30>
   1c234:	ldrb	r2, [sl]
   1c238:	cmp	r2, #116	; 0x74
   1c23c:	beq	1ed80 <_start@@Base+0xc648>
   1c240:	cmp	r3, #4
   1c244:	beq	1c268 <_start@@Base+0x9b30>
   1c248:	mov	r2, #5
   1c24c:	mov	r1, r7
   1c250:	mov	r0, sl
   1c254:	bl	12598 <memcmp@plt>
   1c258:	cmp	r0, #0
   1c25c:	addeq	r4, sl, #5
   1c260:	strbeq	r0, [sp, #356]	; 0x164
   1c264:	beq	1c290 <_start@@Base+0x9b58>
   1c268:	add	r3, sp, #360	; 0x168
   1c26c:	mov	r2, r8
   1c270:	mov	r1, sl
   1c274:	mov	r0, r9
   1c278:	bl	132cc <_start@@Base+0xb94>
   1c27c:	ldrb	r3, [sp, #360]	; 0x168
   1c280:	mov	r4, r0
   1c284:	adds	r3, r3, #0
   1c288:	movne	r3, #1
   1c28c:	strb	r3, [sp, #356]	; 0x164
   1c290:	cmp	sl, r4
   1c294:	bne	1c1e0 <_start@@Base+0x9aa8>
   1c298:	add	r0, sp, #356	; 0x164
   1c29c:	mov	r3, r6
   1c2a0:	mov	r2, r8
   1c2a4:	mov	r1, r4
   1c2a8:	str	r0, [sp]
   1c2ac:	mov	r0, r9
   1c2b0:	bl	13be0 <_start@@Base+0x14a8>
   1c2b4:	cmp	r8, r0
   1c2b8:	cmpne	r0, r4
   1c2bc:	mov	sl, r0
   1c2c0:	beq	1ca5c <_start@@Base+0xa324>
   1c2c4:	mov	r4, r0
   1c2c8:	b	1c1e0 <_start@@Base+0x9aa8>
   1c2cc:	add	r3, pc, #244	; 0xf4
   1c2d0:	ldrd	r2, [r3]
   1c2d4:	ldrd	r0, [sp, #16]
   1c2d8:	cmp	r1, r3
   1c2dc:	cmpeq	r0, r2
   1c2e0:	bhi	1cd48 <_start@@Base+0xa610>
   1c2e4:	add	r3, pc, #228	; 0xe4
   1c2e8:	ldrd	r2, [r3]
   1c2ec:	cmp	r1, r3
   1c2f0:	cmpeq	r0, r2
   1c2f4:	bne	1d624 <_start@@Base+0xaeec>
   1c2f8:	add	r4, sl, #8
   1c2fc:	mov	r1, r8
   1c300:	mov	r0, r4
   1c304:	mov	r5, #0
   1c308:	bl	12828 <_start@@Base+0xf0>
   1c30c:	and	r3, r1, #-16777216	; 0xff000000
   1c310:	str	r5, [sp, #208]	; 0xd0
   1c314:	str	r3, [sp, #212]	; 0xd4
   1c318:	ldrd	r2, [sp, #208]	; 0xd0
   1c31c:	cmp	r3, #2030043136	; 0x79000000
   1c320:	cmpeq	r2, #0
   1c324:	bne	1e700 <_start@@Base+0xbfc8>
   1c328:	sub	r3, r8, r4
   1c32c:	cmp	r3, #1
   1c330:	ble	1ea28 <_start@@Base+0xc2f0>
   1c334:	mov	r3, #1
   1c338:	mov	r2, r8
   1c33c:	mov	r1, r4
   1c340:	mov	r0, r9
   1c344:	bl	17b2c <_start@@Base+0x53f4>
   1c348:	cmp	r4, r0
   1c34c:	mov	sl, r0
   1c350:	beq	1ea24 <_start@@Base+0xc2ec>
   1c354:	mov	r1, #3
   1c358:	ldr	r0, [r9]
   1c35c:	str	r5, [sp, #340]	; 0x154
   1c360:	bl	23210 <flatcc_builder_start_table@@Base>
   1c364:	cmp	r0, r5
   1c368:	bne	1f0d8 <_start@@Base+0xc9a0>
   1c36c:	add	r5, sp, #348	; 0x15c
   1c370:	mov	r1, sl
   1c374:	mov	r3, r5
   1c378:	mov	r2, r8
   1c37c:	mov	r0, r9
   1c380:	bl	1362c <_start@@Base+0xef4>
   1c384:	ldr	r3, [sp, #348]	; 0x15c
   1c388:	mov	sl, r0
   1c38c:	cmp	r3, #0
   1c390:	beq	1f628 <_start@@Base+0xcef0>
   1c394:	ldr	r3, [pc, #72]	; 1c3e4 <_start@@Base+0x9cac>
   1c398:	strd	r6, [sp, #16]
   1c39c:	add	r3, pc, r3
   1c3a0:	add	r3, r3, #480	; 0x1e0
   1c3a4:	str	r3, [sp, #64]	; 0x40
   1c3a8:	b	1c534 <_start@@Base+0x9dfc>
   1c3ac:	nop	{0}
   1c3b0:	strcc	r0, [r0], #-0
   1c3b4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c3b8:	ldrbtvc	r6, [r2], #-2413	; 0xfffff693
   1c3bc:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1c3c0:	svcvs	0x006f6c73
   1c3c4:	stmdbvc	pc!, {r1, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1c3c8:	ldrbvs	pc, [pc, #4095]!	; 1d3cf <_start@@Base+0xac97>	; <UNPREDICTABLE>
   1c3cc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c3d0:	strbvs	r7, [sp, #-116]!	; 0xffffff8c
   1c3d4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c3d8:	andeq	r3, r0, r4, lsl #30
   1c3dc:	andeq	r0, r2, r4, asr #29
   1c3e0:	strdeq	lr, [r0], -ip
   1c3e4:	andeq	r0, r2, ip, ror #25
   1c3e8:	and	r3, r0, #-16777216	; 0xff000000
   1c3ec:	str	r3, [sp, #136]	; 0x88
   1c3f0:	str	r1, [sp, #140]	; 0x8c
   1c3f4:	add	r1, pc, #924	; 0x39c
   1c3f8:	ldrd	r0, [r1]
   1c3fc:	ldrd	r2, [sp, #136]	; 0x88
   1c400:	cmp	r3, r1
   1c404:	cmpeq	r2, r0
   1c408:	bne	1eb54 <_start@@Base+0xc41c>
   1c40c:	sub	r3, r8, sl
   1c410:	cmp	r3, #5
   1c414:	ble	1eb54 <_start@@Base+0xc41c>
   1c418:	mov	r3, #5
   1c41c:	mov	r2, r8
   1c420:	mov	r1, sl
   1c424:	mov	r0, r9
   1c428:	bl	17b2c <_start@@Base+0x53f4>
   1c42c:	cmp	r0, sl
   1c430:	mov	r4, r0
   1c434:	beq	1eb54 <_start@@Base+0xc41c>
   1c438:	add	r2, sp, #332	; 0x14c
   1c43c:	mov	r3, #0
   1c440:	add	r2, r2, #2
   1c444:	mov	r0, #0
   1c448:	mov	r1, #0
   1c44c:	strh	r3, [r2]
   1c450:	cmp	r8, r4
   1c454:	str	r3, [sp, #356]	; 0x164
   1c458:	add	r3, sp, #360	; 0x168
   1c45c:	strd	r0, [r3]
   1c460:	beq	1f0c4 <_start@@Base+0xc98c>
   1c464:	add	r0, sp, #360	; 0x168
   1c468:	add	r3, sp, #356	; 0x164
   1c46c:	mov	r2, r8
   1c470:	mov	r1, r4
   1c474:	str	r0, [sp]
   1c478:	mov	r0, r9
   1c47c:	bl	28ea4 <flatcc_json_parser_integer@@Base>
   1c480:	cmp	r4, r0
   1c484:	mov	fp, r0
   1c488:	bne	1f154 <_start@@Base+0xca1c>
   1c48c:	ldr	r3, [pc, #824]	; 1c7cc <_start@@Base+0xa094>
   1c490:	add	ip, sp, #332	; 0x14c
   1c494:	mov	r2, r8
   1c498:	add	ip, ip, #2
   1c49c:	mov	r1, fp
   1c4a0:	mov	r0, r9
   1c4a4:	str	ip, [sp]
   1c4a8:	add	r3, pc, r3
   1c4ac:	add	r3, r3, #468	; 0x1d4
   1c4b0:	bl	149f4 <_start@@Base+0x22bc>
   1c4b4:	cmp	r8, r0
   1c4b8:	cmpne	r0, fp
   1c4bc:	mov	sl, r0
   1c4c0:	beq	1fad4 <_start@@Base+0xd39c>
   1c4c4:	add	r3, sp, #332	; 0x14c
   1c4c8:	add	r3, r3, #2
   1c4cc:	ldrh	r2, [r3]
   1c4d0:	cmp	r2, #0
   1c4d4:	bne	1c4e4 <_start@@Base+0x9dac>
   1c4d8:	ldr	r3, [r9, #8]
   1c4dc:	tst	r3, #2
   1c4e0:	beq	1c510 <_start@@Base+0x9dd8>
   1c4e4:	mov	r3, #2
   1c4e8:	ldr	r0, [r9]
   1c4ec:	mov	r2, r3
   1c4f0:	mov	r1, r3
   1c4f4:	bl	24d44 <flatcc_builder_table_add@@Base>
   1c4f8:	cmp	r0, #0
   1c4fc:	beq	1fad4 <_start@@Base+0xd39c>
   1c500:	add	r3, sp, #332	; 0x14c
   1c504:	add	r3, r3, #2
   1c508:	ldrh	r3, [r3]
   1c50c:	strh	r3, [r0]
   1c510:	mov	r1, sl
   1c514:	mov	r3, r5
   1c518:	mov	r2, r8
   1c51c:	mov	r0, r9
   1c520:	bl	1582c <_start@@Base+0x30f4>
   1c524:	ldr	r3, [sp, #348]	; 0x15c
   1c528:	mov	sl, r0
   1c52c:	cmp	r3, #0
   1c530:	beq	1f624 <_start@@Base+0xceec>
   1c534:	cmp	r8, sl
   1c538:	beq	1c564 <_start@@Base+0x9e2c>
   1c53c:	ldrb	r3, [sl]
   1c540:	cmp	r3, #34	; 0x22
   1c544:	moveq	r3, #0
   1c548:	addeq	sl, sl, #1
   1c54c:	streq	r3, [r9, #12]
   1c550:	beq	1c564 <_start@@Base+0x9e2c>
   1c554:	cmp	r3, #46	; 0x2e
   1c558:	movne	r3, #1
   1c55c:	strne	r3, [r9, #12]
   1c560:	beq	1ee8c <_start@@Base+0xc754>
   1c564:	mov	r1, r8
   1c568:	mov	r0, sl
   1c56c:	bl	12828 <_start@@Base+0xf0>
   1c570:	movw	r3, #65535	; 0xffff
   1c574:	movt	r3, #26979	; 0x6963
   1c578:	mvn	r2, #0
   1c57c:	cmp	r1, r3
   1c580:	cmpeq	r0, r2
   1c584:	bls	1c3e8 <_start@@Base+0x9cb0>
   1c588:	bic	r3, r1, #255	; 0xff
   1c58c:	mov	r4, #0
   1c590:	add	r7, pc, #520	; 0x208
   1c594:	ldrd	r6, [r7]
   1c598:	str	r4, [sp, #144]	; 0x90
   1c59c:	str	r3, [sp, #148]	; 0x94
   1c5a0:	ldrd	r2, [sp, #144]	; 0x90
   1c5a4:	cmp	r3, r7
   1c5a8:	cmpeq	r2, r6
   1c5ac:	beq	1ecdc <_start@@Base+0xc5a4>
   1c5b0:	lsr	r3, r1, #16
   1c5b4:	str	r4, [sp, #112]	; 0x70
   1c5b8:	mov	r1, #0
   1c5bc:	movt	r1, #26980	; 0x6964
   1c5c0:	mov	r0, #0
   1c5c4:	lsl	r3, r3, #16
   1c5c8:	str	r3, [sp, #116]	; 0x74
   1c5cc:	ldrd	r2, [sp, #112]	; 0x70
   1c5d0:	cmp	r3, r1
   1c5d4:	cmpeq	r2, r0
   1c5d8:	bne	1eb54 <_start@@Base+0xc41c>
   1c5dc:	sub	r3, r8, sl
   1c5e0:	cmp	r3, #2
   1c5e4:	ble	1eb54 <_start@@Base+0xc41c>
   1c5e8:	mov	r1, sl
   1c5ec:	mov	r3, #2
   1c5f0:	mov	r2, r8
   1c5f4:	mov	r0, r9
   1c5f8:	bl	17b2c <_start@@Base+0x53f4>
   1c5fc:	cmp	r0, sl
   1c600:	mov	r1, r0
   1c604:	beq	1eb54 <_start@@Base+0xc41c>
   1c608:	add	r3, sp, #352	; 0x160
   1c60c:	mov	r2, r8
   1c610:	mov	r0, r9
   1c614:	bl	29418 <flatcc_json_parser_build_string@@Base>
   1c618:	ldr	r3, [sp, #352]	; 0x160
   1c61c:	mov	sl, r0
   1c620:	cmp	r3, #0
   1c624:	beq	1fad4 <_start@@Base+0xd39c>
   1c628:	mov	r1, r4
   1c62c:	ldr	r0, [r9]
   1c630:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   1c634:	cmp	r0, #0
   1c638:	beq	1fad4 <_start@@Base+0xd39c>
   1c63c:	ldr	r3, [sp, #352]	; 0x160
   1c640:	str	r3, [r0]
   1c644:	b	1c510 <_start@@Base+0x9dd8>
   1c648:	add	r3, pc, #344	; 0x158
   1c64c:	ldrd	r2, [r3]
   1c650:	ldrd	r0, [sp, #16]
   1c654:	cmp	r1, r3
   1c658:	cmpeq	r0, r2
   1c65c:	beq	1e208 <_start@@Base+0xbad0>
   1c660:	ldr	r1, [sp, #20]
   1c664:	mov	r4, #0
   1c668:	str	r4, [sp, #176]	; 0xb0
   1c66c:	add	r3, pc, #316	; 0x13c
   1c670:	ldrd	r2, [r3]
   1c674:	bic	r1, r1, #255	; 0xff
   1c678:	str	r1, [sp, #180]	; 0xb4
   1c67c:	ldrd	r0, [sp, #176]	; 0xb0
   1c680:	cmp	r1, r3
   1c684:	cmpeq	r0, r2
   1c688:	bne	1d5dc <_start@@Base+0xaea4>
   1c68c:	sub	r3, r8, sl
   1c690:	cmp	r3, #3
   1c694:	ble	1f064 <_start@@Base+0xc92c>
   1c698:	mov	r3, #3
   1c69c:	mov	r2, r8
   1c6a0:	mov	r1, sl
   1c6a4:	mov	r0, r9
   1c6a8:	bl	17b2c <_start@@Base+0x53f4>
   1c6ac:	cmp	r0, sl
   1c6b0:	mov	r5, r0
   1c6b4:	beq	1f064 <_start@@Base+0xc92c>
   1c6b8:	mov	r3, #16
   1c6bc:	mov	r1, r4
   1c6c0:	ldr	r0, [r9]
   1c6c4:	mov	r2, #32
   1c6c8:	bl	24d44 <flatcc_builder_table_add@@Base>
   1c6cc:	subs	r3, r0, #0
   1c6d0:	str	r3, [sp, #16]
   1c6d4:	beq	1fe74 <_start@@Base+0xd73c>
   1c6d8:	add	r3, sp, #352	; 0x160
   1c6dc:	mov	r1, r5
   1c6e0:	vldr	s16, [pc, #224]	; 1c7c8 <_start@@Base+0xa090>
   1c6e4:	mov	r2, r8
   1c6e8:	mov	r0, r9
   1c6ec:	vldr	d9, [pc, #196]	; 1c7b8 <_start@@Base+0xa080>
   1c6f0:	bl	1362c <_start@@Base+0xef4>
   1c6f4:	ldr	r3, [sp, #352]	; 0x160
   1c6f8:	mov	fp, r0
   1c6fc:	cmp	r3, #0
   1c700:	beq	1ff74 <_start@@Base+0xd83c>
   1c704:	add	r5, pc, #180	; 0xb4
   1c708:	ldrd	r4, [r5]
   1c70c:	cmp	r8, fp
   1c710:	beq	1c73c <_start@@Base+0xa004>
   1c714:	ldrb	r3, [fp]
   1c718:	cmp	r3, #34	; 0x22
   1c71c:	moveq	r3, #0
   1c720:	addeq	fp, fp, #1
   1c724:	streq	r3, [r9, #12]
   1c728:	beq	1c73c <_start@@Base+0xa004>
   1c72c:	cmp	r3, #46	; 0x2e
   1c730:	movne	r3, #1
   1c734:	strne	r3, [r9, #12]
   1c738:	beq	1dc68 <_start@@Base+0xb530>
   1c73c:	sub	ip, r8, fp
   1c740:	cmp	ip, #8
   1c744:	bhi	1d2b0 <_start@@Base+0xab78>
   1c748:	sub	r3, ip, #1
   1c74c:	cmp	r3, #7
   1c750:	addls	pc, pc, r3, lsl #2
   1c754:	b	1d8f4 <_start@@Base+0xb1bc>
   1c758:	b	1d4e0 <_start@@Base+0xada8>
   1c75c:	b	1d4bc <_start@@Base+0xad84>
   1c760:	b	1d4b0 <_start@@Base+0xad78>
   1c764:	b	1d4d4 <_start@@Base+0xad9c>
   1c768:	b	1d4c8 <_start@@Base+0xad90>
   1c76c:	b	1d470 <_start@@Base+0xad38>
   1c770:	b	1d464 <_start@@Base+0xad2c>
   1c774:	b	1d2b0 <_start@@Base+0xab78>
   1c778:	mov	r1, sl
   1c77c:	mov	r3, #5
   1c780:	mov	r2, r8
   1c784:	mov	r0, r9
   1c788:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1c78c:	mov	sl, r0
   1c790:	b	1b870 <_start@@Base+0x9138>
   1c794:	nop	{0}
   1c798:	strvc	r0, [r0], #-0
   1c79c:	cmnvs	pc, #461373440	; 0x1b800000
   1c7a0:	andeq	r0, r0, r0
   1c7a4:	strbtvc	r6, [r1], -r0, lsl #24
   1c7a8:	cdpvs	15, 7, cr5, cr4, cr14, {3}
   1c7ac:	rsbvc	r7, r1, r5, ror #4
   1c7b0:	andeq	r0, r0, r0
   1c7b4:	rsbvc	r7, pc, r0, lsl #6
	...
   1c7c0:	rscscc	pc, pc, #1020	; 0x3fc
   1c7c4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c7c8:	andeq	r0, r0, r0
   1c7cc:	andeq	r0, r2, r0, ror #23
   1c7d0:	add	r3, pc, #920	; 0x398
   1c7d4:	ldrd	r2, [r3]
   1c7d8:	ldrd	r0, [sp, #16]
   1c7dc:	cmp	r1, r3
   1c7e0:	cmpeq	r0, r2
   1c7e4:	bhi	1ce1c <_start@@Base+0xa6e4>
   1c7e8:	lsr	r3, r1, #16
   1c7ec:	mov	r4, #0
   1c7f0:	mov	r2, #0
   1c7f4:	str	r4, [sp, #152]	; 0x98
   1c7f8:	str	r3, [sp, #156]	; 0x9c
   1c7fc:	mov	r3, #0
   1c800:	movt	r3, #26736	; 0x6870
   1c804:	ldr	r1, [sp, #156]	; 0x9c
   1c808:	lsl	r1, r1, #16
   1c80c:	str	r1, [sp, #156]	; 0x9c
   1c810:	ldrd	r0, [sp, #152]	; 0x98
   1c814:	cmp	r1, r3
   1c818:	cmpeq	r0, r2
   1c81c:	bne	1e36c <_start@@Base+0xbc34>
   1c820:	sub	r3, r8, sl
   1c824:	cmp	r3, #2
   1c828:	ble	1f194 <_start@@Base+0xca5c>
   1c82c:	mov	r3, #2
   1c830:	mov	r2, r8
   1c834:	mov	r1, sl
   1c838:	mov	r0, r9
   1c83c:	bl	17b2c <_start@@Base+0x53f4>
   1c840:	cmp	r0, sl
   1c844:	mov	r5, r0
   1c848:	beq	1f194 <_start@@Base+0xca5c>
   1c84c:	add	fp, sp, #360	; 0x168
   1c850:	mov	r1, r0
   1c854:	mov	r2, r8
   1c858:	mov	r3, fp
   1c85c:	mov	r0, r9
   1c860:	strh	r4, [fp]
   1c864:	bl	13548 <_start@@Base+0xe10>
   1c868:	cmp	r0, r5
   1c86c:	mov	sl, r0
   1c870:	beq	1eaf0 <_start@@Base+0xc3b8>
   1c874:	add	r3, sp, #360	; 0x168
   1c878:	ldrsh	r3, [r3]
   1c87c:	cmp	r3, #100	; 0x64
   1c880:	bne	1c890 <_start@@Base+0xa158>
   1c884:	ldr	r3, [r9, #8]
   1c888:	tst	r3, #2
   1c88c:	beq	1c08c <_start@@Base+0x9954>
   1c890:	mov	r3, #2
   1c894:	ldr	r0, [r9]
   1c898:	mov	r2, r3
   1c89c:	mov	r1, r3
   1c8a0:	bl	24d44 <flatcc_builder_table_add@@Base>
   1c8a4:	cmp	r0, #0
   1c8a8:	beq	1ca5c <_start@@Base+0xa324>
   1c8ac:	add	r3, sp, #360	; 0x168
   1c8b0:	ldrsh	r3, [r3]
   1c8b4:	strh	r3, [r0]
   1c8b8:	b	1c08c <_start@@Base+0x9954>
   1c8bc:	mov	r1, sl
   1c8c0:	mov	r2, r8
   1c8c4:	mov	r0, r9
   1c8c8:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1c8cc:	mov	sl, r0
   1c8d0:	b	1c08c <_start@@Base+0x9954>
   1c8d4:	add	sl, sl, #8
   1c8d8:	mov	r1, r8
   1c8dc:	mov	r0, sl
   1c8e0:	bl	12828 <_start@@Base+0xf0>
   1c8e4:	add	r3, pc, #652	; 0x28c
   1c8e8:	ldrd	r2, [r3]
   1c8ec:	cmp	r1, r3
   1c8f0:	cmpeq	r0, r2
   1c8f4:	bhi	1d1e4 <_start@@Base+0xaaac>
   1c8f8:	add	r3, pc, #640	; 0x280
   1c8fc:	ldrd	r2, [r3]
   1c900:	cmp	r1, r3
   1c904:	cmpeq	r0, r2
   1c908:	bne	1e6d0 <_start@@Base+0xbf98>
   1c90c:	sub	r3, r8, sl
   1c910:	cmp	r3, #8
   1c914:	ble	1e95c <_start@@Base+0xc224>
   1c918:	mov	r3, #8
   1c91c:	mov	r2, r8
   1c920:	mov	r1, sl
   1c924:	mov	r0, r9
   1c928:	bl	17b2c <_start@@Base+0x53f4>
   1c92c:	cmp	sl, r0
   1c930:	mov	r4, r0
   1c934:	beq	1e95c <_start@@Base+0xc224>
   1c938:	mov	ip, #0
   1c93c:	add	r5, sp, #360	; 0x168
   1c940:	mov	r1, r0
   1c944:	mov	r3, r5
   1c948:	mov	r2, r8
   1c94c:	mov	r0, r9
   1c950:	str	ip, [sp, #360]	; 0x168
   1c954:	bl	13464 <_start@@Base+0xd2c>
   1c958:	cmp	r0, r4
   1c95c:	mov	sl, r0
   1c960:	beq	1fa84 <_start@@Base+0xd34c>
   1c964:	ldr	r3, [sp, #360]	; 0x168
   1c968:	cmp	r3, #0
   1c96c:	bne	1c97c <_start@@Base+0xa244>
   1c970:	ldr	r3, [r9, #8]
   1c974:	tst	r3, #2
   1c978:	beq	1c08c <_start@@Base+0x9954>
   1c97c:	mov	r3, #4
   1c980:	mov	r1, #16
   1c984:	ldr	r0, [r9]
   1c988:	mov	r2, r3
   1c98c:	bl	24d44 <flatcc_builder_table_add@@Base>
   1c990:	cmp	r0, #0
   1c994:	beq	1fe64 <_start@@Base+0xd72c>
   1c998:	ldr	r3, [sp, #360]	; 0x168
   1c99c:	str	r3, [r0]
   1c9a0:	b	1c08c <_start@@Base+0x9954>
   1c9a4:	cmp	fp, #5
   1c9a8:	ble	1d63c <_start@@Base+0xaf04>
   1c9ac:	mov	r3, #5
   1c9b0:	mov	r2, r8
   1c9b4:	mov	r1, sl
   1c9b8:	mov	r0, r9
   1c9bc:	bl	17b2c <_start@@Base+0x53f4>
   1c9c0:	cmp	r0, sl
   1c9c4:	mov	r4, r0
   1c9c8:	beq	1d63c <_start@@Base+0xaf04>
   1c9cc:	mvn	r3, #-1073741824	; 0xc0000000
   1c9d0:	mov	r2, #2
   1c9d4:	ldr	r0, [r9]
   1c9d8:	mov	r1, #4
   1c9dc:	bl	22f60 <flatcc_builder_start_vector@@Base>
   1c9e0:	cmp	r0, #0
   1c9e4:	bne	1fb14 <_start@@Base+0xd3dc>
   1c9e8:	mov	r1, r4
   1c9ec:	ldr	r4, [sp, #28]
   1c9f0:	mov	r2, r8
   1c9f4:	mov	r0, r9
   1c9f8:	mov	r3, r4
   1c9fc:	bl	13700 <_start@@Base+0xfc8>
   1ca00:	ldr	r3, [sp, #336]	; 0x150
   1ca04:	mov	sl, r0
   1ca08:	cmp	r3, #0
   1ca0c:	bne	1ca3c <_start@@Base+0xa304>
   1ca10:	b	1ee04 <_start@@Base+0xc6cc>
   1ca14:	bl	15bb4 <_start@@Base+0x347c>
   1ca18:	mov	r1, r0
   1ca1c:	mov	r3, r4
   1ca20:	mov	r2, r8
   1ca24:	mov	r0, r9
   1ca28:	bl	159f0 <_start@@Base+0x32b8>
   1ca2c:	ldr	r3, [sp, #336]	; 0x150
   1ca30:	mov	sl, r0
   1ca34:	cmp	r3, #0
   1ca38:	beq	1ee04 <_start@@Base+0xc6cc>
   1ca3c:	mov	r1, #1
   1ca40:	ldr	r0, [r9]
   1ca44:	bl	22618 <flatcc_builder_extend_vector@@Base>
   1ca48:	subs	r3, r0, #0
   1ca4c:	mov	r1, sl
   1ca50:	mov	r2, r8
   1ca54:	mov	r0, r9
   1ca58:	bne	1ca14 <_start@@Base+0xa2dc>
   1ca5c:	mov	fp, r9
   1ca60:	mov	r9, r8
   1ca64:	b	1b7ac <_start@@Base+0x9074>
   1ca68:	add	r3, pc, #280	; 0x118
   1ca6c:	ldrd	r2, [r3]
   1ca70:	cmp	r1, r3
   1ca74:	cmpeq	r0, r2
   1ca78:	beq	1d66c <_start@@Base+0xaf34>
   1ca7c:	add	r3, pc, #268	; 0x10c
   1ca80:	ldrd	r2, [r3]
   1ca84:	cmp	r1, r3
   1ca88:	cmpeq	r0, r2
   1ca8c:	bne	1e3d0 <_start@@Base+0xbc98>
   1ca90:	mov	r3, #0
   1ca94:	add	r4, sl, #16
   1ca98:	mov	r1, r8
   1ca9c:	mov	r0, r4
   1caa0:	str	r3, [sp, #224]	; 0xe0
   1caa4:	bl	12828 <_start@@Base+0xf0>
   1caa8:	and	r3, r1, #-16777216	; 0xff000000
   1caac:	str	r3, [sp, #228]	; 0xe4
   1cab0:	ldrd	r2, [sp, #224]	; 0xe0
   1cab4:	cmp	r3, #1929379840	; 0x73000000
   1cab8:	cmpeq	r2, #0
   1cabc:	bne	1e7ac <_start@@Base+0xc074>
   1cac0:	sub	r3, r8, r4
   1cac4:	cmp	r3, #1
   1cac8:	ble	1f678 <_start@@Base+0xcf40>
   1cacc:	mov	r3, #1
   1cad0:	mov	r2, r8
   1cad4:	mov	r1, r4
   1cad8:	mov	r0, r9
   1cadc:	bl	17b2c <_start@@Base+0x53f4>
   1cae0:	cmp	r4, r0
   1cae4:	mov	sl, r0
   1cae8:	bne	1f698 <_start@@Base+0xcf60>
   1caec:	mov	r1, sl
   1caf0:	mov	r2, r8
   1caf4:	mov	r0, r9
   1caf8:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1cafc:	mov	sl, r0
   1cb00:	b	1c08c <_start@@Base+0x9954>
   1cb04:	sub	r3, r8, sl
   1cb08:	cmp	r3, #5
   1cb0c:	ble	1d654 <_start@@Base+0xaf1c>
   1cb10:	mov	r1, sl
   1cb14:	mov	r3, #5
   1cb18:	mov	r2, r8
   1cb1c:	mov	r0, r9
   1cb20:	bl	17b2c <_start@@Base+0x53f4>
   1cb24:	cmp	r0, sl
   1cb28:	mov	r1, r0
   1cb2c:	beq	1d654 <_start@@Base+0xaf1c>
   1cb30:	add	r3, sp, #340	; 0x154
   1cb34:	mov	r2, r8
   1cb38:	mov	r0, r9
   1cb3c:	bl	1b760 <_start@@Base+0x9028>
   1cb40:	ldr	r3, [sp, #340]	; 0x154
   1cb44:	mov	sl, r0
   1cb48:	cmp	r3, #0
   1cb4c:	beq	1ca5c <_start@@Base+0xa324>
   1cb50:	mov	r1, #12
   1cb54:	ldr	r0, [r9]
   1cb58:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   1cb5c:	cmp	r0, #0
   1cb60:	beq	1ca5c <_start@@Base+0xa324>
   1cb64:	ldr	r3, [sp, #340]	; 0x154
   1cb68:	str	r3, [r0]
   1cb6c:	b	1c08c <_start@@Base+0x9954>
   1cb70:	mrcvs	15, 3, r6, cr4, cr1, {3}
   1cb74:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1cb78:			; <UNDEFINED> instruction: 0x666e7630
   1cb7c:	teqvc	r6, #1593835520	; 0x5f000000
   1cb80:			; <UNDEFINED> instruction: 0x666e7631
   1cb84:	teqvc	r3, #-268435451	; 0xf0000005
   1cb88:	ldrbtvc	r6, [r2], #-2414	; 0xfffff692
   1cb8c:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1cb90:	cmnvs	r2, r5, ror #24
   1cb94:	stmdbvc	pc!, {r2, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1cb98:	svcvs	0x00725f6f
   1cb9c:			; <UNDEFINED> instruction: 0x76656374
   1cba0:	strbvc	r6, [r2, #-3173]!	; 0xfffff39b
   1cba4:	ldrbvs	r6, [pc], -pc, ror #8
   1cba8:	cdpvs	3, 6, cr7, cr7, cr0, {0}
   1cbac:	ldrbvs	r6, [pc], -pc, ror #24
   1cbb0:	strdeq	r0, [r2], -r4
   1cbb4:	sub	r3, pc, #36	; 0x24
   1cbb8:	ldrd	r2, [r3]
   1cbbc:	ldrd	r0, [sp, #16]
   1cbc0:	cmp	r1, r3
   1cbc4:	cmpeq	r0, r2
   1cbc8:	bne	1d60c <_start@@Base+0xaed4>
   1cbcc:	add	r4, sl, #8
   1cbd0:	mov	r1, r8
   1cbd4:	mov	r0, r4
   1cbd8:	bl	12828 <_start@@Base+0xf0>
   1cbdc:	sub	r3, pc, #68	; 0x44
   1cbe0:	ldrd	r2, [r3]
   1cbe4:	cmp	r1, r3
   1cbe8:	cmpeq	r0, r2
   1cbec:	beq	1ef14 <_start@@Base+0xc7dc>
   1cbf0:	bic	ip, r0, #255	; 0xff
   1cbf4:	sub	r3, pc, #84	; 0x54
   1cbf8:	ldrd	r2, [r3]
   1cbfc:	str	ip, [sp, #232]	; 0xe8
   1cc00:	str	r1, [sp, #236]	; 0xec
   1cc04:	ldrd	r0, [sp, #232]	; 0xe8
   1cc08:	cmp	r1, r3
   1cc0c:	cmpeq	r0, r2
   1cc10:	bne	1e7c4 <_start@@Base+0xc08c>
   1cc14:	sub	r3, r8, r4
   1cc18:	cmp	r3, #7
   1cc1c:	ble	1f2bc <_start@@Base+0xcb84>
   1cc20:	mov	r3, #7
   1cc24:	mov	r2, r8
   1cc28:	mov	r1, r4
   1cc2c:	mov	r0, r9
   1cc30:	bl	17b2c <_start@@Base+0x53f4>
   1cc34:	cmp	r4, r0
   1cc38:	mov	sl, r0
   1cc3c:	beq	1f2b8 <_start@@Base+0xcb80>
   1cc40:	mov	r2, #8
   1cc44:	mvn	r3, #-536870912	; 0xe0000000
   1cc48:	ldr	r0, [r9]
   1cc4c:	mov	r1, r2
   1cc50:	bl	22f60 <flatcc_builder_start_vector@@Base>
   1cc54:	cmp	r0, #0
   1cc58:	bne	1ca5c <_start@@Base+0xa324>
   1cc5c:	ldr	r5, [sp, #28]
   1cc60:	mov	r1, sl
   1cc64:	mov	r2, r8
   1cc68:	mov	r0, r9
   1cc6c:	mov	r3, r5
   1cc70:	bl	13700 <_start@@Base+0xfc8>
   1cc74:	ldr	r3, [sp, #336]	; 0x150
   1cc78:	mov	sl, r0
   1cc7c:	cmp	r3, #0
   1cc80:	beq	1f9a4 <_start@@Base+0xd26c>
   1cc84:	ldr	fp, [pc, #-220]	; 1cbb0 <_start@@Base+0xa478>
   1cc88:	mov	r4, r0
   1cc8c:	mov	sl, r5
   1cc90:	strd	r6, [sp, #16]
   1cc94:	add	fp, pc, fp
   1cc98:	add	fp, fp, #648	; 0x288
   1cc9c:	mov	r7, fp
   1cca0:	b	1ccd4 <_start@@Base+0xa59c>
   1cca4:	add	r3, sp, #360	; 0x168
   1cca8:	mov	r1, r0
   1ccac:	ldrd	r4, [r3]
   1ccb0:	mov	r2, r8
   1ccb4:	mov	r3, sl
   1ccb8:	mov	r0, r9
   1ccbc:	strd	r4, [fp]
   1ccc0:	bl	159f0 <_start@@Base+0x32b8>
   1ccc4:	ldr	r3, [sp, #336]	; 0x150
   1ccc8:	mov	r4, r0
   1cccc:	cmp	r3, #0
   1ccd0:	beq	1f99c <_start@@Base+0xd264>
   1ccd4:	mov	r2, #0
   1ccd8:	mov	r3, #0
   1ccdc:	ldr	r0, [r9]
   1cce0:	add	r5, sp, #360	; 0x168
   1cce4:	mov	r1, #1
   1cce8:	strd	r2, [r5]
   1ccec:	bl	22618 <flatcc_builder_extend_vector@@Base>
   1ccf0:	subs	fp, r0, #0
   1ccf4:	mov	r1, r4
   1ccf8:	mov	r3, r5
   1ccfc:	mov	r2, r8
   1cd00:	mov	r0, r9
   1cd04:	beq	1f98c <_start@@Base+0xd254>
   1cd08:	bl	13154 <_start@@Base+0xa1c>
   1cd0c:	cmp	r0, r4
   1cd10:	bne	1cca4 <_start@@Base+0xa56c>
   1cd14:	mov	r3, r7
   1cd18:	mov	r2, r8
   1cd1c:	str	r5, [sp]
   1cd20:	mov	r1, r4
   1cd24:	mov	r0, r9
   1cd28:	bl	14e98 <_start@@Base+0x2760>
   1cd2c:	cmp	r8, r0
   1cd30:	cmpne	r0, r4
   1cd34:	bne	1cca4 <_start@@Base+0xa56c>
   1cd38:	mov	fp, r9
   1cd3c:	mov	sl, r0
   1cd40:	mov	r9, r8
   1cd44:	b	1b7ac <_start@@Base+0x9074>
   1cd48:	ldrd	r4, [sp, #16]
   1cd4c:	lsr	r3, r4, #16
   1cd50:	str	r3, [sp, #88]	; 0x58
   1cd54:	ldr	r1, [sp, #88]	; 0x58
   1cd58:	str	r5, [sp, #92]	; 0x5c
   1cd5c:	add	r3, pc, #764	; 0x2fc
   1cd60:	ldrd	r2, [r3]
   1cd64:	lsl	r1, r1, #16
   1cd68:	str	r1, [sp, #88]	; 0x58
   1cd6c:	sub	r1, r8, sl
   1cd70:	ldrd	r4, [sp, #88]	; 0x58
   1cd74:	cmp	r5, r3
   1cd78:	cmpeq	r4, r2
   1cd7c:	beq	1d7b8 <_start@@Base+0xb080>
   1cd80:	cmp	r1, #5
   1cd84:	ble	1ee50 <_start@@Base+0xc718>
   1cd88:	mov	r3, #5
   1cd8c:	mov	r2, r8
   1cd90:	mov	r1, sl
   1cd94:	mov	r0, r9
   1cd98:	bl	17b2c <_start@@Base+0x53f4>
   1cd9c:	cmp	r0, sl
   1cda0:	mov	r4, r0
   1cda4:	beq	1ee50 <_start@@Base+0xc718>
   1cda8:	mov	ip, #0
   1cdac:	add	r5, sp, #360	; 0x168
   1cdb0:	mov	r1, r0
   1cdb4:	mov	r2, r8
   1cdb8:	mov	r3, r5
   1cdbc:	mov	r0, r9
   1cdc0:	str	ip, [sp, #360]	; 0x168
   1cdc4:	bl	28130 <flatcc_json_parser_float@@Base>
   1cdc8:	cmp	r0, r4
   1cdcc:	mov	sl, r0
   1cdd0:	beq	1f368 <_start@@Base+0xcc30>
   1cdd4:	vldr	s15, [pc, #684]	; 1d088 <_start@@Base+0xa950>
   1cdd8:	vldr	s14, [sp, #360]	; 0x168
   1cddc:	vcmp.f32	s14, s15
   1cde0:	vmrs	APSR_nzcv, fpscr
   1cde4:	bne	1cdf4 <_start@@Base+0xa6bc>
   1cde8:	ldr	r3, [r9, #8]
   1cdec:	tst	r3, #2
   1cdf0:	beq	1c08c <_start@@Base+0x9954>
   1cdf4:	mov	r3, #4
   1cdf8:	mov	r1, #25
   1cdfc:	ldr	r0, [r9]
   1ce00:	mov	r2, r3
   1ce04:	bl	24d44 <flatcc_builder_table_add@@Base>
   1ce08:	cmp	r0, #0
   1ce0c:	beq	1ca5c <_start@@Base+0xa324>
   1ce10:	ldr	r3, [sp, #360]	; 0x168
   1ce14:	str	r3, [r0]
   1ce18:	b	1c08c <_start@@Base+0x9954>
   1ce1c:	add	r3, pc, #580	; 0x244
   1ce20:	ldrd	r2, [r3]
   1ce24:	ldrd	r0, [sp, #16]
   1ce28:	cmp	r1, r3
   1ce2c:	cmpeq	r0, r2
   1ce30:	beq	1e53c <_start@@Base+0xbe04>
   1ce34:	ldr	r1, [sp, #20]
   1ce38:	mov	fp, #0
   1ce3c:	str	fp, [sp, #200]	; 0xc8
   1ce40:	add	r3, pc, #552	; 0x228
   1ce44:	ldrd	r2, [r3]
   1ce48:	str	r1, [sp, #204]	; 0xcc
   1ce4c:	ldrd	r0, [sp, #200]	; 0xc8
   1ce50:	cmp	r1, r3
   1ce54:	cmpeq	r0, r2
   1ce58:	bne	1edec <_start@@Base+0xc6b4>
   1ce5c:	sub	r3, r8, sl
   1ce60:	cmp	r3, #4
   1ce64:	ble	1ead8 <_start@@Base+0xc3a0>
   1ce68:	mov	r3, #4
   1ce6c:	mov	r2, r8
   1ce70:	mov	r1, sl
   1ce74:	mov	r0, r9
   1ce78:	bl	17b2c <_start@@Base+0x53f4>
   1ce7c:	cmp	r0, sl
   1ce80:	mov	r4, r0
   1ce84:	beq	1ead8 <_start@@Base+0xc3a0>
   1ce88:	add	r5, sp, #360	; 0x168
   1ce8c:	mov	r1, r0
   1ce90:	mov	r2, r8
   1ce94:	mov	r3, r5
   1ce98:	mov	r0, r9
   1ce9c:	strh	fp, [r5]
   1cea0:	bl	13548 <_start@@Base+0xe10>
   1cea4:	cmp	r4, r0
   1cea8:	mov	sl, r0
   1ceac:	beq	1f9d8 <_start@@Base+0xd2a0>
   1ceb0:	add	r3, sp, #360	; 0x168
   1ceb4:	ldrsh	r3, [r3]
   1ceb8:	cmp	r3, #150	; 0x96
   1cebc:	bne	1cecc <_start@@Base+0xa794>
   1cec0:	ldr	r3, [r9, #8]
   1cec4:	tst	r3, #2
   1cec8:	beq	1c08c <_start@@Base+0x9954>
   1cecc:	mov	r3, #2
   1ced0:	mov	r1, #1
   1ced4:	ldr	r0, [r9]
   1ced8:	mov	r2, r3
   1cedc:	bl	24d44 <flatcc_builder_table_add@@Base>
   1cee0:	cmp	r0, #0
   1cee4:	beq	1ca5c <_start@@Base+0xa324>
   1cee8:	add	r3, sp, #360	; 0x168
   1ceec:	ldrsh	r3, [r3]
   1cef0:	strh	r3, [r0]
   1cef4:	b	1c08c <_start@@Base+0x9954>
   1cef8:	mov	r1, sl
   1cefc:	mov	r2, r8
   1cf00:	mov	r0, r9
   1cf04:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1cf08:	mov	sl, r0
   1cf0c:	b	1c08c <_start@@Base+0x9954>
   1cf10:	mov	r1, sl
   1cf14:	mov	r2, r8
   1cf18:	mov	r0, r9
   1cf1c:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1cf20:	mov	sl, r0
   1cf24:	b	1c08c <_start@@Base+0x9954>
   1cf28:	mov	r1, sl
   1cf2c:	mov	r2, r8
   1cf30:	mov	r0, r9
   1cf34:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1cf38:	mov	sl, r0
   1cf3c:	b	1c08c <_start@@Base+0x9954>
   1cf40:	add	r3, pc, #304	; 0x130
   1cf44:	ldrd	r2, [r3]
   1cf48:	cmp	r1, r3
   1cf4c:	cmpeq	r0, r2
   1cf50:	bne	1e354 <_start@@Base+0xbc1c>
   1cf54:	add	r4, sl, #16
   1cf58:	mov	r1, r8
   1cf5c:	mov	r0, r4
   1cf60:	bl	12828 <_start@@Base+0xf0>
   1cf64:	bic	r0, r0, #255	; 0xff
   1cf68:	add	r3, pc, #272	; 0x110
   1cf6c:	ldrd	r2, [r3]
   1cf70:	strd	r0, [sp, #216]	; 0xd8
   1cf74:	ldrd	r0, [sp, #216]	; 0xd8
   1cf78:	cmp	r1, r3
   1cf7c:	cmpeq	r0, r2
   1cf80:	bne	1e760 <_start@@Base+0xc028>
   1cf84:	sub	r3, r8, r4
   1cf88:	cmp	r3, #7
   1cf8c:	ble	1f1f0 <_start@@Base+0xcab8>
   1cf90:	mov	r3, #7
   1cf94:	mov	r2, r8
   1cf98:	mov	r1, r4
   1cf9c:	mov	r0, r9
   1cfa0:	bl	17b2c <_start@@Base+0x53f4>
   1cfa4:	cmp	r4, r0
   1cfa8:	mov	sl, r0
   1cfac:	beq	1f1ec <_start@@Base+0xcab4>
   1cfb0:	mvn	r3, #-536870912	; 0xe0000000
   1cfb4:	mov	r2, #4
   1cfb8:	ldr	r0, [r9]
   1cfbc:	mov	r1, #8
   1cfc0:	bl	22f60 <flatcc_builder_start_vector@@Base>
   1cfc4:	cmp	r0, #0
   1cfc8:	bne	1ca5c <_start@@Base+0xa324>
   1cfcc:	mov	r1, sl
   1cfd0:	mov	r2, r8
   1cfd4:	ldr	r3, [sp, #28]
   1cfd8:	mov	r0, r9
   1cfdc:	bl	13700 <_start@@Base+0xfc8>
   1cfe0:	ldr	r3, [sp, #336]	; 0x150
   1cfe4:	mov	sl, r0
   1cfe8:	cmp	r3, #0
   1cfec:	beq	1ec38 <_start@@Base+0xc500>
   1cff0:	ldr	r3, [pc, #148]	; 1d08c <_start@@Base+0xa954>
   1cff4:	add	r3, pc, r3
   1cff8:	add	r3, r3, #444	; 0x1bc
   1cffc:	str	r3, [sp, #244]	; 0xf4
   1d000:	add	r3, sp, #304	; 0x130
   1d004:	strd	r6, [r3]
   1d008:	mov	r1, #1
   1d00c:	ldr	r0, [r9]
   1d010:	bl	22618 <flatcc_builder_extend_vector@@Base>
   1d014:	subs	r3, r0, #0
   1d018:	str	r3, [sp, #64]	; 0x40
   1d01c:	beq	1ca5c <_start@@Base+0xa324>
   1d020:	add	r7, sp, #356	; 0x164
   1d024:	mov	r1, sl
   1d028:	mov	r3, r7
   1d02c:	mov	r2, r8
   1d030:	mov	r0, r9
   1d034:	bl	1362c <_start@@Base+0xef4>
   1d038:	ldr	r3, [sp, #356]	; 0x164
   1d03c:	mov	r4, r0
   1d040:	cmp	r3, #0
   1d044:	beq	1ec0c <_start@@Base+0xc4d4>
   1d048:	mov	sl, #0
   1d04c:	movt	sl, #65535	; 0xffff
   1d050:	str	r7, [sp, #16]
   1d054:	mov	r5, #0
   1d058:	mov	r7, sl
   1d05c:	b	1d128 <_start@@Base+0xa9f0>
   1d060:	ldrtvs	r0, [r2], -r0
   1d064:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d068:	mrcvs	15, 3, r6, cr4, cr2, {3}
   1d06c:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1d070:	andeq	r0, r0, r0
   1d074:	stclvs	14, cr6, [r1, #-388]!	; 0xfffffe7c
   1d078:	svcvs	0x00727465
   1d07c:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1d080:	strbvc	r7, [r3, #-1024]!	; 0xfffffc00
   1d084:	ldrbtvs	r7, [r3], #-1138	; 0xfffffb8e
   1d088:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   1d08c:	muleq	r2, r4, r0
   1d090:	add	r3, pc, #1000	; 0x3e8
   1d094:	ldrd	r2, [r3]
   1d098:	cmp	r1, r3
   1d09c:	cmpeq	r0, r2
   1d0a0:	bne	1eb24 <_start@@Base+0xc3ec>
   1d0a4:	sub	r3, r8, r4
   1d0a8:	cmp	r3, #8
   1d0ac:	ble	1eb24 <_start@@Base+0xc3ec>
   1d0b0:	mov	r3, #8
   1d0b4:	mov	r2, r8
   1d0b8:	mov	r1, r4
   1d0bc:	mov	r0, r9
   1d0c0:	bl	17b2c <_start@@Base+0x53f4>
   1d0c4:	cmp	r0, r4
   1d0c8:	mov	r6, r0
   1d0cc:	beq	1eb24 <_start@@Base+0xc3ec>
   1d0d0:	add	r3, sp, #360	; 0x168
   1d0d4:	mov	r1, r0
   1d0d8:	mov	r2, r8
   1d0dc:	mov	r0, r9
   1d0e0:	str	r3, [sp, #80]	; 0x50
   1d0e4:	str	r5, [sp, #360]	; 0x168
   1d0e8:	bl	13394 <_start@@Base+0xc5c>
   1d0ec:	cmp	r6, r0
   1d0f0:	mov	r4, r0
   1d0f4:	beq	1ebc0 <_start@@Base+0xc488>
   1d0f8:	ldr	r2, [sp, #64]	; 0x40
   1d0fc:	ldr	r3, [sp, #360]	; 0x168
   1d100:	str	r3, [r2, #4]
   1d104:	mov	r1, r4
   1d108:	mov	r2, r8
   1d10c:	ldr	r3, [sp, #16]
   1d110:	mov	r0, r9
   1d114:	bl	1582c <_start@@Base+0x30f4>
   1d118:	ldr	r3, [sp, #356]	; 0x164
   1d11c:	mov	r4, r0
   1d120:	cmp	r3, #0
   1d124:	beq	1ec6c <_start@@Base+0xc534>
   1d128:	cmp	r8, r4
   1d12c:	beq	1d154 <_start@@Base+0xaa1c>
   1d130:	ldrb	r3, [r4]
   1d134:	cmp	r3, #34	; 0x22
   1d138:	addeq	r4, r4, #1
   1d13c:	streq	r5, [r9, #12]
   1d140:	beq	1d154 <_start@@Base+0xaa1c>
   1d144:	cmp	r3, #46	; 0x2e
   1d148:	movne	r3, #1
   1d14c:	strne	r3, [r9, #12]
   1d150:	beq	1eb6c <_start@@Base+0xc434>
   1d154:	mov	r1, r8
   1d158:	mov	r0, r4
   1d15c:	bl	12828 <_start@@Base+0xf0>
   1d160:	and	fp, r1, r7
   1d164:	mov	r3, #0
   1d168:	movt	r3, #26980	; 0x6964
   1d16c:	mov	r2, #0
   1d170:	cmp	fp, r3
   1d174:	mov	sl, r5
   1d178:	cmpeq	r5, r2
   1d17c:	bne	1d090 <_start@@Base+0xa958>
   1d180:	sub	r3, r8, r4
   1d184:	cmp	r3, #2
   1d188:	ble	1eb24 <_start@@Base+0xc3ec>
   1d18c:	mov	r3, #2
   1d190:	mov	r2, r8
   1d194:	mov	r1, r4
   1d198:	mov	r0, r9
   1d19c:	bl	17b2c <_start@@Base+0x53f4>
   1d1a0:	cmp	r0, r4
   1d1a4:	mov	r6, r0
   1d1a8:	beq	1eb24 <_start@@Base+0xc3ec>
   1d1ac:	add	r3, sp, #360	; 0x168
   1d1b0:	mov	r1, r0
   1d1b4:	mov	r2, r8
   1d1b8:	mov	r0, r9
   1d1bc:	str	r3, [sp, #80]	; 0x50
   1d1c0:	str	r5, [sp, #360]	; 0x168
   1d1c4:	bl	13394 <_start@@Base+0xc5c>
   1d1c8:	cmp	r6, r0
   1d1cc:	mov	r4, r0
   1d1d0:	beq	1eb88 <_start@@Base+0xc450>
   1d1d4:	ldr	r2, [sp, #64]	; 0x40
   1d1d8:	ldr	r3, [sp, #360]	; 0x168
   1d1dc:	str	r3, [r2]
   1d1e0:	b	1d104 <_start@@Base+0xa9cc>
   1d1e4:	add	r3, pc, #668	; 0x29c
   1d1e8:	ldrd	r2, [r3]
   1d1ec:	cmp	r1, r3
   1d1f0:	cmpeq	r0, r2
   1d1f4:	bhi	1e470 <_start@@Base+0xbd38>
   1d1f8:	add	r3, pc, #656	; 0x290
   1d1fc:	ldrd	r2, [r3]
   1d200:	cmp	r1, r3
   1d204:	cmpeq	r0, r2
   1d208:	bne	1e824 <_start@@Base+0xc0ec>
   1d20c:	sub	r3, r8, sl
   1d210:	cmp	r3, #8
   1d214:	ble	1f54c <_start@@Base+0xce14>
   1d218:	mov	r3, #8
   1d21c:	mov	r2, r8
   1d220:	mov	r1, sl
   1d224:	mov	r0, r9
   1d228:	bl	17b2c <_start@@Base+0x53f4>
   1d22c:	cmp	sl, r0
   1d230:	mov	r4, r0
   1d234:	beq	1f54c <_start@@Base+0xce14>
   1d238:	mov	sl, #0
   1d23c:	add	r5, sp, #360	; 0x168
   1d240:	mov	fp, #0
   1d244:	mov	r1, r0
   1d248:	mov	r3, r5
   1d24c:	mov	r2, r8
   1d250:	mov	r0, r9
   1d254:	strd	sl, [r5]
   1d258:	bl	13154 <_start@@Base+0xa1c>
   1d25c:	cmp	r0, r4
   1d260:	mov	sl, r0
   1d264:	beq	1fc64 <_start@@Base+0xd52c>
   1d268:	add	r3, sp, #360	; 0x168
   1d26c:	ldrd	r2, [r3]
   1d270:	orrs	r3, r2, r3
   1d274:	bne	1d284 <_start@@Base+0xab4c>
   1d278:	ldr	r3, [r9, #8]
   1d27c:	tst	r3, #2
   1d280:	beq	1c08c <_start@@Base+0x9954>
   1d284:	mov	r3, #8
   1d288:	mov	r1, #18
   1d28c:	ldr	r0, [r9]
   1d290:	mov	r2, r3
   1d294:	bl	24d44 <flatcc_builder_table_add@@Base>
   1d298:	cmp	r0, #0
   1d29c:	beq	1fe64 <_start@@Base+0xd72c>
   1d2a0:	add	r3, sp, #360	; 0x168
   1d2a4:	ldrd	r2, [r3]
   1d2a8:	strd	r2, [r0]
   1d2ac:	b	1c08c <_start@@Base+0x9954>
   1d2b0:	ldrb	r2, [fp, #7]
   1d2b4:	mov	r3, #0
   1d2b8:	mov	lr, r3
   1d2bc:	ldrb	r0, [fp, #6]
   1d2c0:	orr	r1, r2, r0, lsl #8
   1d2c4:	ldrb	r2, [fp, #5]
   1d2c8:	mov	r0, lr
   1d2cc:	orr	r1, r1, r2, lsl #16
   1d2d0:	ldrb	r2, [fp, #4]
   1d2d4:	mov	lr, r0
   1d2d8:	orr	r2, r1, r2, lsl #24
   1d2dc:	ldrb	r0, [fp, #3]
   1d2e0:	orr	r3, lr, r0
   1d2e4:	ldrb	r0, [fp, #2]
   1d2e8:	orr	r3, r3, r0, lsl #8
   1d2ec:	ldrb	r0, [fp, #1]
   1d2f0:	mov	r6, r2
   1d2f4:	ldrb	r2, [fp]
   1d2f8:	orr	r0, r3, r0, lsl #16
   1d2fc:	orr	r7, r0, r2, lsl #24
   1d300:	cmp	r7, r5
   1d304:	cmpeq	r6, r4
   1d308:	bls	1d90c <_start@@Base+0xb1d4>
   1d30c:	mvn	r3, #-2013265920	; 0x88000000
   1d310:	mvn	r2, #0
   1d314:	cmp	r7, r3
   1d318:	cmpeq	r6, r2
   1d31c:	bhi	1da54 <_start@@Base+0xb31c>
   1d320:	and	r3, r6, #-16777216	; 0xff000000
   1d324:	add	r1, pc, #364	; 0x16c
   1d328:	ldrd	r0, [r1]
   1d32c:	str	r3, [sp, #40]	; 0x28
   1d330:	str	r7, [sp, #44]	; 0x2c
   1d334:	ldrd	r2, [sp, #40]	; 0x28
   1d338:	cmp	r3, r1
   1d33c:	cmpeq	r2, r0
   1d340:	bne	1d8f4 <_start@@Base+0xb1bc>
   1d344:	cmp	ip, #5
   1d348:	ble	1d8f4 <_start@@Base+0xb1bc>
   1d34c:	ldr	r2, [r9, #12]
   1d350:	ldrb	r3, [fp, #5]
   1d354:	cmp	r2, #0
   1d358:	beq	1e104 <_start@@Base+0xb9cc>
   1d35c:	cmp	r3, #58	; 0x3a
   1d360:	cmpne	r3, #32
   1d364:	movhi	r3, #1
   1d368:	movls	r3, #0
   1d36c:	bhi	1d8f4 <_start@@Base+0xb1bc>
   1d370:	add	r1, fp, #5
   1d374:	str	r3, [r9, #12]
   1d378:	sub	r3, r8, r1
   1d37c:	cmp	r3, #1
   1d380:	ble	1d394 <_start@@Base+0xac5c>
   1d384:	ldrb	r3, [r1]
   1d388:	cmp	r3, #32
   1d38c:	bhi	1d3a4 <_start@@Base+0xac6c>
   1d390:	beq	1f1ac <_start@@Base+0xca74>
   1d394:	mov	r2, r8
   1d398:	mov	r0, r9
   1d39c:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   1d3a0:	mov	r1, r0
   1d3a4:	cmp	r8, r1
   1d3a8:	beq	1d3b8 <_start@@Base+0xac80>
   1d3ac:	ldrb	r3, [r1]
   1d3b0:	cmp	r3, #58	; 0x3a
   1d3b4:	beq	1f4b8 <_start@@Base+0xcd80>
   1d3b8:	mov	r3, #4
   1d3bc:	mov	r2, r8
   1d3c0:	mov	r0, r9
   1d3c4:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1d3c8:	mov	r1, r0
   1d3cc:	cmp	r1, fp
   1d3d0:	beq	1d8f4 <_start@@Base+0xb1bc>
   1d3d4:	ldr	r3, [sp, #16]
   1d3d8:	mov	r2, r8
   1d3dc:	mov	r0, r9
   1d3e0:	add	r3, r3, #26
   1d3e4:	bl	15bb4 <_start@@Base+0x347c>
   1d3e8:	mov	sl, r0
   1d3ec:	sub	r3, r8, sl
   1d3f0:	cmp	r3, #1
   1d3f4:	ble	1d408 <_start@@Base+0xacd0>
   1d3f8:	ldrb	r3, [sl]
   1d3fc:	cmp	r3, #32
   1d400:	bhi	1d41c <_start@@Base+0xace4>
   1d404:	beq	1db6c <_start@@Base+0xb434>
   1d408:	mov	r1, sl
   1d40c:	mov	r2, r8
   1d410:	mov	r0, r9
   1d414:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   1d418:	mov	sl, r0
   1d41c:	cmp	r8, sl
   1d420:	beq	1c08c <_start@@Base+0x9954>
   1d424:	ldrb	r3, [sl]
   1d428:	cmp	r3, #44	; 0x2c
   1d42c:	beq	1db80 <_start@@Base+0xb448>
   1d430:	mov	r3, #0
   1d434:	str	r3, [sp, #352]	; 0x160
   1d438:	ldrb	r3, [sl]
   1d43c:	cmp	r3, #125	; 0x7d
   1d440:	beq	1db34 <_start@@Base+0xb3fc>
   1d444:	mov	r3, #10
   1d448:	mov	r1, sl
   1d44c:	mov	r2, r8
   1d450:	mov	r0, r9
   1d454:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1d458:	mov	fp, r0
   1d45c:	ldr	r3, [sp, #352]	; 0x160
   1d460:	b	1c6fc <_start@@Base+0x9fc4>
   1d464:	mov	r2, #0
   1d468:	mov	r3, #0
   1d46c:	b	1d2b8 <_start@@Base+0xab80>
   1d470:	mov	r1, #0
   1d474:	mov	lr, r1
   1d478:	b	1d2c4 <_start@@Base+0xab8c>
   1d47c:	nop	{0}
   1d480:	cmnvs	lr, r5, ror #6
   1d484:	strbtvs	r7, [r9], #-884	; 0xfffffc8c
   1d488:			; <UNDEFINED> instruction: 0x666e7630
   1d48c:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1d490:			; <UNDEFINED> instruction: 0x666e7631
   1d494:	teqvc	r6, #1593835520	; 0x5f000000
   1d498:	movwcc	r0, #0
   1d49c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d4a0:	mrscc	r0, (UNDEF: 0)
   1d4a4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d4a8:	andeq	pc, r1, ip, asr #15
   1d4ac:	submi	r0, r0, r0
   1d4b0:	mov	r2, #0
   1d4b4:	mov	r3, r2
   1d4b8:	b	1d2e4 <_start@@Base+0xabac>
   1d4bc:	mov	r2, #0
   1d4c0:	mov	r3, r2
   1d4c4:	b	1d2ec <_start@@Base+0xabb4>
   1d4c8:	mov	r1, #0
   1d4cc:	mov	r0, r1
   1d4d0:	b	1d2d0 <_start@@Base+0xab98>
   1d4d4:	mov	r2, #0
   1d4d8:	mov	lr, r2
   1d4dc:	b	1d2dc <_start@@Base+0xaba4>
   1d4e0:	ldrb	r2, [fp]
   1d4e4:	mov	r6, #0
   1d4e8:	lsl	r7, r2, #24
   1d4ec:	cmp	r7, r5
   1d4f0:	cmpeq	r6, r4
   1d4f4:	bhi	1d30c <_start@@Base+0xabd4>
   1d4f8:	sub	r3, pc, #96	; 0x60
   1d4fc:	ldrd	r2, [r3]
   1d500:	cmp	r7, r3
   1d504:	cmpeq	r6, r2
   1d508:	bne	1d8f4 <_start@@Base+0xb1bc>
   1d50c:	cmp	ip, #5
   1d510:	ble	1d8f4 <_start@@Base+0xb1bc>
   1d514:	ldr	r2, [r9, #12]
   1d518:	ldrb	r3, [fp, #5]
   1d51c:	cmp	r2, #0
   1d520:	beq	1dd98 <_start@@Base+0xb660>
   1d524:	cmp	r3, #58	; 0x3a
   1d528:	cmpne	r3, #32
   1d52c:	movhi	r3, #1
   1d530:	movls	r3, #0
   1d534:	bhi	1d8f4 <_start@@Base+0xb1bc>
   1d538:	add	r1, fp, #5
   1d53c:	str	r3, [r9, #12]
   1d540:	sub	r3, r8, r1
   1d544:	cmp	r3, #1
   1d548:	ble	1d55c <_start@@Base+0xae24>
   1d54c:	ldrb	r3, [r1]
   1d550:	cmp	r3, #32
   1d554:	bhi	1d56c <_start@@Base+0xae34>
   1d558:	beq	1f07c <_start@@Base+0xc944>
   1d55c:	mov	r2, r8
   1d560:	mov	r0, r9
   1d564:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   1d568:	mov	r1, r0
   1d56c:	cmp	r8, r1
   1d570:	beq	1d580 <_start@@Base+0xae48>
   1d574:	ldrb	r3, [r1]
   1d578:	cmp	r3, #58	; 0x3a
   1d57c:	beq	1f27c <_start@@Base+0xcb44>
   1d580:	mov	r3, #4
   1d584:	mov	r2, r8
   1d588:	mov	r0, r9
   1d58c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1d590:	str	r0, [sp, #64]	; 0x40
   1d594:	ldr	r1, [sp, #64]	; 0x40
   1d598:	cmp	r1, fp
   1d59c:	beq	1d8f4 <_start@@Base+0xb1bc>
   1d5a0:	add	fp, sp, #360	; 0x168
   1d5a4:	mov	r2, r8
   1d5a8:	vstr	d9, [sp, #360]	; 0x168
   1d5ac:	mov	r3, fp
   1d5b0:	mov	r0, r9
   1d5b4:	bl	28034 <flatcc_json_parser_double@@Base>
   1d5b8:	ldr	r1, [sp, #64]	; 0x40
   1d5bc:	mov	sl, r0
   1d5c0:	cmp	r1, r0
   1d5c4:	beq	1e384 <_start@@Base+0xbc4c>
   1d5c8:	ldr	r1, [sp, #16]
   1d5cc:	add	r3, sp, #360	; 0x168
   1d5d0:	ldrd	r2, [r3]
   1d5d4:	strd	r2, [r1, #16]
   1d5d8:	b	1d3ec <_start@@Base+0xacb4>
   1d5dc:	mov	r1, sl
   1d5e0:	mov	r2, r8
   1d5e4:	mov	r0, r9
   1d5e8:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1d5ec:	mov	sl, r0
   1d5f0:	b	1c08c <_start@@Base+0x9954>
   1d5f4:	mov	r1, sl
   1d5f8:	mov	r2, r8
   1d5fc:	mov	r0, r9
   1d600:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1d604:	mov	sl, r0
   1d608:	b	1c08c <_start@@Base+0x9954>
   1d60c:	mov	r1, sl
   1d610:	mov	r2, r8
   1d614:	mov	r0, r9
   1d618:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1d61c:	mov	sl, r0
   1d620:	b	1c08c <_start@@Base+0x9954>
   1d624:	mov	r1, sl
   1d628:	mov	r2, r8
   1d62c:	mov	r0, r9
   1d630:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1d634:	mov	sl, r0
   1d638:	b	1c08c <_start@@Base+0x9954>
   1d63c:	mov	r1, sl
   1d640:	mov	r2, r8
   1d644:	mov	r0, r9
   1d648:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1d64c:	mov	sl, r0
   1d650:	b	1c08c <_start@@Base+0x9954>
   1d654:	mov	r1, sl
   1d658:	mov	r2, r8
   1d65c:	mov	r0, r9
   1d660:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1d664:	mov	sl, r0
   1d668:	b	1c08c <_start@@Base+0x9954>
   1d66c:	add	r4, sl, #16
   1d670:	mov	r1, r8
   1d674:	mov	r0, r4
   1d678:	bl	12828 <_start@@Base+0xf0>
   1d67c:	lsr	ip, r1, #16
   1d680:	mov	r0, #0
   1d684:	mov	r3, #0
   1d688:	movt	r3, #26418	; 0x6732
   1d68c:	mov	r2, #0
   1d690:	lsl	ip, ip, #16
   1d694:	str	r0, [sp, #184]	; 0xb8
   1d698:	str	ip, [sp, #188]	; 0xbc
   1d69c:	ldrd	sl, [sp, #184]	; 0xb8
   1d6a0:	cmp	fp, r3
   1d6a4:	cmpeq	sl, r2
   1d6a8:	beq	1e83c <_start@@Base+0xc104>
   1d6ac:	and	r3, r1, #-16777216	; 0xff000000
   1d6b0:	str	r0, [sp, #272]	; 0x110
   1d6b4:	str	r3, [sp, #276]	; 0x114
   1d6b8:	add	r3, sp, #272	; 0x110
   1d6bc:	ldrd	r2, [r3]
   1d6c0:	cmp	r3, #1728053248	; 0x67000000
   1d6c4:	cmpeq	r2, #0
   1d6c8:	bne	1f1d4 <_start@@Base+0xca9c>
   1d6cc:	sub	r3, r8, r4
   1d6d0:	cmp	r3, #1
   1d6d4:	ble	1f534 <_start@@Base+0xcdfc>
   1d6d8:	mov	r3, #1
   1d6dc:	mov	r2, r8
   1d6e0:	mov	r1, r4
   1d6e4:	mov	r0, r9
   1d6e8:	bl	17b2c <_start@@Base+0x53f4>
   1d6ec:	cmp	r4, r0
   1d6f0:	mov	sl, r0
   1d6f4:	beq	1f530 <_start@@Base+0xcdf8>
   1d6f8:	ldr	r0, [r9]
   1d6fc:	bl	22ff0 <flatcc_builder_start_offset_vector@@Base>
   1d700:	cmp	r0, #0
   1d704:	bne	1ca5c <_start@@Base+0xa324>
   1d708:	ldr	r5, [sp, #28]
   1d70c:	mov	r1, sl
   1d710:	mov	r2, r8
   1d714:	mov	r0, r9
   1d718:	mov	r3, r5
   1d71c:	bl	13700 <_start@@Base+0xfc8>
   1d720:	ldr	r3, [sp, #336]	; 0x150
   1d724:	mov	sl, r0
   1d728:	cmp	r3, #0
   1d72c:	beq	1fb9c <_start@@Base+0xd464>
   1d730:	add	r4, sp, #340	; 0x154
   1d734:	b	1d774 <_start@@Base+0xb03c>
   1d738:	ldr	r0, [r9]
   1d73c:	bl	228b4 <flatcc_builder_extend_offset_vector@@Base>
   1d740:	subs	ip, r0, #0
   1d744:	mov	r3, r5
   1d748:	mov	r2, r8
   1d74c:	mov	r1, sl
   1d750:	mov	r0, r9
   1d754:	beq	1ca5c <_start@@Base+0xa324>
   1d758:	ldr	lr, [sp, #340]	; 0x154
   1d75c:	str	lr, [ip]
   1d760:	bl	159f0 <_start@@Base+0x32b8>
   1d764:	ldr	r3, [sp, #336]	; 0x150
   1d768:	mov	sl, r0
   1d76c:	cmp	r3, #0
   1d770:	beq	1fb9c <_start@@Base+0xd464>
   1d774:	mov	r1, sl
   1d778:	mov	r3, r4
   1d77c:	mov	r2, r8
   1d780:	mov	r0, r9
   1d784:	bl	29418 <flatcc_json_parser_build_string@@Base>
   1d788:	ldr	r3, [sp, #340]	; 0x154
   1d78c:	mov	sl, r0
   1d790:	mov	r1, #1
   1d794:	cmp	r3, #0
   1d798:	bne	1d738 <_start@@Base+0xb000>
   1d79c:	b	1ca5c <_start@@Base+0xa324>
   1d7a0:	mov	r1, sl
   1d7a4:	mov	r2, r8
   1d7a8:	mov	r0, r9
   1d7ac:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1d7b0:	mov	sl, r0
   1d7b4:	b	1c08c <_start@@Base+0x9954>
   1d7b8:	cmp	r1, #6
   1d7bc:	ble	1e92c <_start@@Base+0xc1f4>
   1d7c0:	mov	r3, #6
   1d7c4:	mov	r2, r8
   1d7c8:	mov	r1, sl
   1d7cc:	mov	r0, r9
   1d7d0:	bl	17b2c <_start@@Base+0x53f4>
   1d7d4:	cmp	r0, sl
   1d7d8:	mov	r4, r0
   1d7dc:	beq	1e92c <_start@@Base+0xc1f4>
   1d7e0:	mov	ip, #0
   1d7e4:	add	r5, sp, #360	; 0x168
   1d7e8:	mov	r1, r0
   1d7ec:	mov	r2, r8
   1d7f0:	mov	r3, r5
   1d7f4:	mov	r0, r9
   1d7f8:	str	ip, [sp, #360]	; 0x168
   1d7fc:	bl	28130 <flatcc_json_parser_float@@Base>
   1d800:	cmp	r0, r4
   1d804:	mov	sl, r0
   1d808:	beq	1f79c <_start@@Base+0xd064>
   1d80c:	vldr	s15, [pc, #-872]	; 1d4ac <_start@@Base+0xad74>
   1d810:	vldr	s14, [sp, #360]	; 0x168
   1d814:	vcmp.f32	s14, s15
   1d818:	vmrs	APSR_nzcv, fpscr
   1d81c:	bne	1d82c <_start@@Base+0xb0f4>
   1d820:	ldr	r3, [r9, #8]
   1d824:	tst	r3, #2
   1d828:	beq	1c08c <_start@@Base+0x9954>
   1d82c:	mov	r3, #4
   1d830:	mov	r1, #26
   1d834:	ldr	r0, [r9]
   1d838:	mov	r2, r3
   1d83c:	bl	24d44 <flatcc_builder_table_add@@Base>
   1d840:	cmp	r0, #0
   1d844:	beq	1fe64 <_start@@Base+0xd72c>
   1d848:	ldr	r3, [sp, #360]	; 0x168
   1d84c:	str	r3, [r0]
   1d850:	b	1c08c <_start@@Base+0x9954>
   1d854:	mov	r2, #0
   1d858:	mov	r3, #0
   1d85c:	mov	fp, #0
   1d860:	add	r1, sp, #360	; 0x168
   1d864:	cmp	r8, r4
   1d868:	moveq	r5, r8
   1d86c:	strd	r2, [r1]
   1d870:	str	fp, [sp, #356]	; 0x164
   1d874:	beq	1d8a4 <_start@@Base+0xb16c>
   1d878:	add	r0, sp, #360	; 0x168
   1d87c:	add	r3, sp, #356	; 0x164
   1d880:	mov	r2, r8
   1d884:	mov	r1, r4
   1d888:	str	r0, [sp]
   1d88c:	mov	r0, r9
   1d890:	bl	28ea4 <flatcc_json_parser_integer@@Base>
   1d894:	cmp	r4, r0
   1d898:	mov	r5, r0
   1d89c:	strbeq	fp, [sp, #352]	; 0x160
   1d8a0:	bne	1f464 <_start@@Base+0xcd2c>
   1d8a4:	ldr	r3, [pc, #-1028]	; 1d4a8 <_start@@Base+0xad70>
   1d8a8:	add	ip, sp, #352	; 0x160
   1d8ac:	mov	r2, r8
   1d8b0:	mov	r1, r5
   1d8b4:	mov	r0, r9
   1d8b8:	str	ip, [sp]
   1d8bc:	add	r3, pc, r3
   1d8c0:	add	r3, r3, #456	; 0x1c8
   1d8c4:	bl	13be0 <_start@@Base+0x14a8>
   1d8c8:	cmp	r8, r0
   1d8cc:	cmpne	r0, r5
   1d8d0:	mov	sl, r0
   1d8d4:	beq	1ca5c <_start@@Base+0xa324>
   1d8d8:	ldrb	r3, [sp, #352]	; 0x160
   1d8dc:	cmp	r3, #1
   1d8e0:	bne	1bad8 <_start@@Base+0x93a0>
   1d8e4:	ldr	r3, [r9, #8]
   1d8e8:	tst	r3, #2
   1d8ec:	beq	1c08c <_start@@Base+0x9954>
   1d8f0:	b	1bad8 <_start@@Base+0x93a0>
   1d8f4:	mov	r1, fp
   1d8f8:	mov	r2, r8
   1d8fc:	mov	r0, r9
   1d900:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1d904:	mov	sl, r0
   1d908:	b	1d3ec <_start@@Base+0xacb4>
   1d90c:	and	r2, r6, #-16777216	; 0xff000000
   1d910:	mov	r6, r2
   1d914:	add	r3, pc, #900	; 0x384
   1d918:	ldrd	r2, [r3]
   1d91c:	cmp	r7, r3
   1d920:	cmpeq	r6, r2
   1d924:	bne	1d4f8 <_start@@Base+0xadc0>
   1d928:	cmp	ip, #5
   1d92c:	ble	1d8f4 <_start@@Base+0xb1bc>
   1d930:	ldr	r2, [r9, #12]
   1d934:	ldrb	r3, [fp, #5]
   1d938:	cmp	r2, #0
   1d93c:	beq	1dd88 <_start@@Base+0xb650>
   1d940:	cmp	r3, #58	; 0x3a
   1d944:	cmpne	r3, #32
   1d948:	movhi	r3, #1
   1d94c:	movls	r3, #0
   1d950:	bhi	1d8f4 <_start@@Base+0xb1bc>
   1d954:	add	r1, fp, #5
   1d958:	str	r3, [r9, #12]
   1d95c:	sub	r3, r8, r1
   1d960:	cmp	r3, #1
   1d964:	ble	1d978 <_start@@Base+0xb240>
   1d968:	ldrb	r3, [r1]
   1d96c:	cmp	r3, #32
   1d970:	bhi	1d988 <_start@@Base+0xb250>
   1d974:	beq	1ef00 <_start@@Base+0xc7c8>
   1d978:	mov	r2, r8
   1d97c:	mov	r0, r9
   1d980:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   1d984:	mov	r1, r0
   1d988:	cmp	r8, r1
   1d98c:	beq	1d99c <_start@@Base+0xb264>
   1d990:	ldrb	r3, [r1]
   1d994:	cmp	r3, #58	; 0x3a
   1d998:	beq	1f240 <_start@@Base+0xcb08>
   1d99c:	mov	r3, #4
   1d9a0:	mov	r2, r8
   1d9a4:	mov	r0, r9
   1d9a8:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1d9ac:	str	r0, [sp, #64]	; 0x40
   1d9b0:	ldr	r2, [sp, #64]	; 0x40
   1d9b4:	cmp	r2, fp
   1d9b8:	beq	1d8f4 <_start@@Base+0xb1bc>
   1d9bc:	mov	r3, #0
   1d9c0:	mov	r0, #0
   1d9c4:	mov	r1, #0
   1d9c8:	cmp	r8, r2
   1d9cc:	strb	r3, [sp, #348]	; 0x15c
   1d9d0:	mov	fp, r2
   1d9d4:	str	r3, [sp, #356]	; 0x164
   1d9d8:	add	r3, sp, #360	; 0x168
   1d9dc:	strd	r0, [r3]
   1d9e0:	beq	1e1e8 <_start@@Base+0xbab0>
   1d9e4:	add	r0, sp, #360	; 0x168
   1d9e8:	add	r3, sp, #356	; 0x164
   1d9ec:	mov	r2, r8
   1d9f0:	mov	r1, fp
   1d9f4:	str	r0, [sp]
   1d9f8:	mov	r0, r9
   1d9fc:	bl	28ea4 <flatcc_json_parser_integer@@Base>
   1da00:	cmp	fp, r0
   1da04:	mov	sl, r0
   1da08:	bne	1e2d0 <_start@@Base+0xbb98>
   1da0c:	ldr	r3, [pc, #660]	; 1dca8 <_start@@Base+0xb570>
   1da10:	add	ip, sp, #348	; 0x15c
   1da14:	mov	r2, r8
   1da18:	mov	r1, sl
   1da1c:	mov	r0, r9
   1da20:	str	ip, [sp]
   1da24:	add	r3, pc, r3
   1da28:	add	r3, r3, #340	; 0x154
   1da2c:	bl	14784 <_start@@Base+0x204c>
   1da30:	cmp	r8, r0
   1da34:	cmpne	r0, sl
   1da38:	beq	1faf8 <_start@@Base+0xd3c0>
   1da3c:	add	r3, sp, #348	; 0x15c
   1da40:	mov	sl, r0
   1da44:	ldrsb	r2, [r3]
   1da48:	ldr	r3, [sp, #16]
   1da4c:	strb	r2, [r3, #24]
   1da50:	b	1d3ec <_start@@Base+0xacb4>
   1da54:	mvn	r3, #-2030043136	; 0x87000000
   1da58:	mvn	r2, #0
   1da5c:	cmp	r7, r3
   1da60:	cmpeq	r6, r2
   1da64:	bhi	1dbd4 <_start@@Base+0xb49c>
   1da68:	cmp	ip, #1
   1da6c:	ble	1d8f4 <_start@@Base+0xb1bc>
   1da70:	ldr	r2, [r9, #12]
   1da74:	ldrb	r3, [fp, #1]
   1da78:	cmp	r2, #0
   1da7c:	beq	1e114 <_start@@Base+0xb9dc>
   1da80:	cmp	r3, #58	; 0x3a
   1da84:	cmpne	r3, #32
   1da88:	movhi	r3, #1
   1da8c:	movls	r3, #0
   1da90:	bhi	1d8f4 <_start@@Base+0xb1bc>
   1da94:	add	r1, fp, #1
   1da98:	str	r3, [r9, #12]
   1da9c:	sub	r3, r8, r1
   1daa0:	cmp	r3, #1
   1daa4:	ble	1dab8 <_start@@Base+0xb380>
   1daa8:	ldrb	r3, [r1]
   1daac:	cmp	r3, #32
   1dab0:	bhi	1dac8 <_start@@Base+0xb390>
   1dab4:	beq	1f1c0 <_start@@Base+0xca88>
   1dab8:	mov	r2, r8
   1dabc:	mov	r0, r9
   1dac0:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   1dac4:	mov	r1, r0
   1dac8:	cmp	r8, r1
   1dacc:	beq	1dadc <_start@@Base+0xb3a4>
   1dad0:	ldrb	r3, [r1]
   1dad4:	cmp	r3, #58	; 0x3a
   1dad8:	beq	1f4a0 <_start@@Base+0xcd68>
   1dadc:	mov	r3, #4
   1dae0:	mov	r2, r8
   1dae4:	mov	r0, r9
   1dae8:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1daec:	str	r0, [sp, #64]	; 0x40
   1daf0:	ldr	r1, [sp, #64]	; 0x40
   1daf4:	cmp	r1, fp
   1daf8:	beq	1d8f4 <_start@@Base+0xb1bc>
   1dafc:	add	fp, sp, #360	; 0x168
   1db00:	mov	r2, r8
   1db04:	vstr	s16, [sp, #360]	; 0x168
   1db08:	mov	r3, fp
   1db0c:	mov	r0, r9
   1db10:	bl	28130 <flatcc_json_parser_float@@Base>
   1db14:	ldr	r1, [sp, #64]	; 0x40
   1db18:	mov	sl, r0
   1db1c:	cmp	r1, r0
   1db20:	beq	1edb8 <_start@@Base+0xc680>
   1db24:	ldr	r2, [sp, #16]
   1db28:	ldr	r3, [sp, #360]	; 0x168
   1db2c:	str	r3, [r2]
   1db30:	b	1d3ec <_start@@Base+0xacb4>
   1db34:	add	r1, sl, #1
   1db38:	sub	r3, r8, r1
   1db3c:	cmp	r3, #1
   1db40:	ble	1db54 <_start@@Base+0xb41c>
   1db44:	ldrb	r3, [sl, #1]
   1db48:	cmp	r3, #32
   1db4c:	bhi	1dd80 <_start@@Base+0xb648>
   1db50:	beq	1e124 <_start@@Base+0xb9ec>
   1db54:	mov	r2, r8
   1db58:	mov	r0, r9
   1db5c:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   1db60:	mov	fp, r0
   1db64:	ldr	r3, [sp, #352]	; 0x160
   1db68:	b	1c6fc <_start@@Base+0x9fc4>
   1db6c:	ldrb	r3, [sl, #1]
   1db70:	cmp	r3, #32
   1db74:	addhi	sl, sl, #1
   1db78:	bls	1d408 <_start@@Base+0xacd0>
   1db7c:	b	1d41c <_start@@Base+0xace4>
   1db80:	add	fp, sl, #1
   1db84:	sub	r3, r8, fp
   1db88:	cmp	r3, #1
   1db8c:	ble	1dba0 <_start@@Base+0xb468>
   1db90:	ldrb	r3, [sl, #1]
   1db94:	cmp	r3, #32
   1db98:	bhi	1dbb4 <_start@@Base+0xb47c>
   1db9c:	beq	1e324 <_start@@Base+0xbbec>
   1dba0:	mov	r1, fp
   1dba4:	mov	r2, r8
   1dba8:	mov	r0, r9
   1dbac:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   1dbb0:	mov	fp, r0
   1dbb4:	cmp	r8, fp
   1dbb8:	beq	1e430 <_start@@Base+0xbcf8>
   1dbbc:	ldrb	r3, [fp]
   1dbc0:	cmp	r3, #125	; 0x7d
   1dbc4:	beq	1e400 <_start@@Base+0xbcc8>
   1dbc8:	mov	r3, #1
   1dbcc:	str	r3, [sp, #352]	; 0x160
   1dbd0:	b	1c70c <_start@@Base+0x9fd4>
   1dbd4:	mov	r3, #0
   1dbd8:	str	r3, [sp, #72]	; 0x48
   1dbdc:	and	r3, r7, #-16777216	; 0xff000000
   1dbe0:	str	r3, [sp, #76]	; 0x4c
   1dbe4:	ldrd	r2, [sp, #72]	; 0x48
   1dbe8:	cmp	r3, #2046820352	; 0x7a000000
   1dbec:	cmpeq	r2, #0
   1dbf0:	beq	1dda8 <_start@@Base+0xb670>
   1dbf4:	ldrd	r2, [sp, #72]	; 0x48
   1dbf8:	cmp	r3, #2030043136	; 0x79000000
   1dbfc:	cmpeq	r2, #0
   1dc00:	bne	1d8f4 <_start@@Base+0xb1bc>
   1dc04:	cmp	ip, #1
   1dc08:	ble	1d8f4 <_start@@Base+0xb1bc>
   1dc0c:	mov	r1, fp
   1dc10:	mov	r3, #1
   1dc14:	mov	r2, r8
   1dc18:	mov	r0, r9
   1dc1c:	bl	17b2c <_start@@Base+0x53f4>
   1dc20:	cmp	r0, fp
   1dc24:	mov	r1, r0
   1dc28:	beq	1d8f4 <_start@@Base+0xb1bc>
   1dc2c:	add	fp, sp, #360	; 0x168
   1dc30:	mov	r2, r8
   1dc34:	str	r1, [sp, #64]	; 0x40
   1dc38:	mov	r3, fp
   1dc3c:	mov	r0, r9
   1dc40:	vstr	s16, [sp, #360]	; 0x168
   1dc44:	bl	28130 <flatcc_json_parser_float@@Base>
   1dc48:	ldr	r1, [sp, #64]	; 0x40
   1dc4c:	mov	sl, r0
   1dc50:	cmp	r1, r0
   1dc54:	beq	1f3e0 <_start@@Base+0xcca8>
   1dc58:	ldr	r2, [sp, #16]
   1dc5c:	ldr	r3, [sp, #360]	; 0x168
   1dc60:	str	r3, [r2, #4]
   1dc64:	b	1d3ec <_start@@Base+0xacb4>
   1dc68:	mov	r1, fp
   1dc6c:	mov	r3, #5
   1dc70:	mov	r2, r8
   1dc74:	mov	r0, r9
   1dc78:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1dc7c:	mov	fp, r0
   1dc80:	b	1c73c <_start@@Base+0xa004>
   1dc84:	mov	r1, sl
   1dc88:	mov	r2, r8
   1dc8c:	mov	r0, r9
   1dc90:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1dc94:	mov	sl, r0
   1dc98:	b	1c08c <_start@@Base+0x9954>
   1dc9c:	nop	{0}
   1dca0:	andcc	r0, r0, #0
   1dca4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1dca8:	andeq	pc, r1, r4, ror #12
   1dcac:	add	r3, pc, #540	; 0x21c
   1dcb0:	ldrd	r2, [r3]
   1dcb4:	ldrd	r0, [sp, #56]	; 0x38
   1dcb8:	cmp	r1, r3
   1dcbc:	cmpeq	r0, r2
   1dcc0:	bne	1e138 <_start@@Base+0xba00>
   1dcc4:	cmp	fp, #5
   1dcc8:	ble	1d63c <_start@@Base+0xaf04>
   1dccc:	mov	r3, #5
   1dcd0:	mov	r2, r8
   1dcd4:	mov	r1, sl
   1dcd8:	mov	r0, r9
   1dcdc:	bl	17b2c <_start@@Base+0x53f4>
   1dce0:	cmp	r0, sl
   1dce4:	mov	r4, r0
   1dce8:	beq	1d63c <_start@@Base+0xaf04>
   1dcec:	mvn	r3, #-1073741824	; 0xc0000000
   1dcf0:	mov	r2, #2
   1dcf4:	ldr	r0, [r9]
   1dcf8:	mov	r1, #4
   1dcfc:	bl	22f60 <flatcc_builder_start_vector@@Base>
   1dd00:	cmp	r0, #0
   1dd04:	bne	1fb14 <_start@@Base+0xd3dc>
   1dd08:	mov	r1, r4
   1dd0c:	ldr	r4, [sp, #28]
   1dd10:	mov	r2, r8
   1dd14:	mov	r0, r9
   1dd18:	mov	r3, r4
   1dd1c:	bl	13700 <_start@@Base+0xfc8>
   1dd20:	ldr	r3, [sp, #336]	; 0x150
   1dd24:	mov	sl, r0
   1dd28:	cmp	r3, #0
   1dd2c:	bne	1dd5c <_start@@Base+0xb624>
   1dd30:	b	1f090 <_start@@Base+0xc958>
   1dd34:	bl	15bb4 <_start@@Base+0x347c>
   1dd38:	mov	r1, r0
   1dd3c:	mov	r3, r4
   1dd40:	mov	r2, r8
   1dd44:	mov	r0, r9
   1dd48:	bl	159f0 <_start@@Base+0x32b8>
   1dd4c:	ldr	r3, [sp, #336]	; 0x150
   1dd50:	mov	sl, r0
   1dd54:	cmp	r3, #0
   1dd58:	beq	1f090 <_start@@Base+0xc958>
   1dd5c:	mov	r1, #1
   1dd60:	ldr	r0, [r9]
   1dd64:	bl	22618 <flatcc_builder_extend_vector@@Base>
   1dd68:	subs	r3, r0, #0
   1dd6c:	mov	r1, sl
   1dd70:	mov	r2, r8
   1dd74:	mov	r0, r9
   1dd78:	bne	1dd34 <_start@@Base+0xb5fc>
   1dd7c:	b	1ca5c <_start@@Base+0xa324>
   1dd80:	mov	sl, r1
   1dd84:	b	1c08c <_start@@Base+0x9954>
   1dd88:	cmp	r3, #34	; 0x22
   1dd8c:	bne	1d8f4 <_start@@Base+0xb1bc>
   1dd90:	add	r1, fp, #6
   1dd94:	b	1d95c <_start@@Base+0xb224>
   1dd98:	cmp	r3, #34	; 0x22
   1dd9c:	bne	1d8f4 <_start@@Base+0xb1bc>
   1dda0:	add	r1, fp, #6
   1dda4:	b	1d540 <_start@@Base+0xae08>
   1dda8:	cmp	ip, #1
   1ddac:	ble	1d8f4 <_start@@Base+0xb1bc>
   1ddb0:	mov	r1, fp
   1ddb4:	mov	r3, #1
   1ddb8:	mov	r2, r8
   1ddbc:	mov	r0, r9
   1ddc0:	bl	17b2c <_start@@Base+0x53f4>
   1ddc4:	cmp	r0, fp
   1ddc8:	mov	r1, r0
   1ddcc:	beq	1d8f4 <_start@@Base+0xb1bc>
   1ddd0:	add	fp, sp, #360	; 0x168
   1ddd4:	mov	r2, r8
   1ddd8:	str	r1, [sp, #64]	; 0x40
   1dddc:	mov	r3, fp
   1dde0:	mov	r0, r9
   1dde4:	vstr	s16, [sp, #360]	; 0x168
   1dde8:	bl	28130 <flatcc_json_parser_float@@Base>
   1ddec:	ldr	r1, [sp, #64]	; 0x40
   1ddf0:	mov	sl, r0
   1ddf4:	cmp	r1, r0
   1ddf8:	beq	1f304 <_start@@Base+0xcbcc>
   1ddfc:	ldr	r2, [sp, #16]
   1de00:	ldr	r3, [sp, #360]	; 0x168
   1de04:	str	r3, [r2, #8]
   1de08:	b	1d3ec <_start@@Base+0xacb4>
   1de0c:	add	r4, sl, #8
   1de10:	mov	r1, r8
   1de14:	mov	r0, r4
   1de18:	mov	r5, #0
   1de1c:	bl	12828 <_start@@Base+0xf0>
   1de20:	lsr	r1, r1, #16
   1de24:	str	r5, [sp, #160]	; 0xa0
   1de28:	mov	r3, #0
   1de2c:	movt	r3, #13876	; 0x3634
   1de30:	mov	r2, #0
   1de34:	lsl	r1, r1, #16
   1de38:	str	r1, [sp, #164]	; 0xa4
   1de3c:	ldrd	r0, [sp, #160]	; 0xa0
   1de40:	cmp	r1, r3
   1de44:	cmpeq	r0, r2
   1de48:	bne	1e3b8 <_start@@Base+0xbc80>
   1de4c:	sub	r3, r8, r4
   1de50:	cmp	r3, #2
   1de54:	ble	1e914 <_start@@Base+0xc1dc>
   1de58:	mov	r3, #2
   1de5c:	mov	r2, r8
   1de60:	mov	r1, r4
   1de64:	mov	r0, r9
   1de68:	bl	17b2c <_start@@Base+0x53f4>
   1de6c:	cmp	r4, r0
   1de70:	mov	sl, r0
   1de74:	beq	1e910 <_start@@Base+0xc1d8>
   1de78:	mov	r1, #3
   1de7c:	ldr	r0, [r9]
   1de80:	str	r5, [sp, #340]	; 0x154
   1de84:	bl	23210 <flatcc_builder_start_table@@Base>
   1de88:	cmp	r0, r5
   1de8c:	bne	1e0c0 <_start@@Base+0xb988>
   1de90:	add	r5, sp, #356	; 0x164
   1de94:	mov	r1, sl
   1de98:	mov	r3, r5
   1de9c:	mov	r2, r8
   1dea0:	mov	r0, r9
   1dea4:	bl	1362c <_start@@Base+0xef4>
   1dea8:	ldr	r3, [sp, #356]	; 0x164
   1deac:	mov	sl, r0
   1deb0:	cmp	r3, #0
   1deb4:	beq	1f4f0 <_start@@Base+0xcdb8>
   1deb8:	mov	r3, #0
   1debc:	movt	r3, #65535	; 0xffff
   1dec0:	mov	fp, #1
   1dec4:	str	r3, [sp, #16]
   1dec8:	strd	r6, [sp, #64]	; 0x40
   1decc:	b	1dfbc <_start@@Base+0xb884>
   1ded0:	strcc	r0, [r0, #-0]
   1ded4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1ded8:	andeq	r0, r0, r0
   1dedc:	strbtvs	r7, [r1], #-1121	; 0xfffffb9f
   1dee0:	strbvs	pc, [r3, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   1dee4:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1dee8:	cmnvs	r4, r0, lsl #2
   1deec:	ldrbvc	r6, [r2, #-3172]!	; 0xfffff39c
   1def0:	strbvs	r0, [r4, #-0]!
   1def4:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1def8:	svcpl	0x00747970
   1defc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1df00:	andeq	r1, r0, r8, lsr #27
   1df04:			; <UNDEFINED> instruction: 0x0001eebc
   1df08:	mov	r4, #0
   1df0c:	str	r4, [sp, #96]	; 0x60
   1df10:	str	r1, [sp, #100]	; 0x64
   1df14:	sub	r1, pc, #68	; 0x44
   1df18:	ldrd	r0, [r1]
   1df1c:	ldrd	r2, [sp, #96]	; 0x60
   1df20:	cmp	r3, r1
   1df24:	cmpeq	r2, r0
   1df28:	bne	1eb3c <_start@@Base+0xc404>
   1df2c:	sub	r3, r8, sl
   1df30:	cmp	r3, #4
   1df34:	ble	1eb3c <_start@@Base+0xc404>
   1df38:	mov	r1, sl
   1df3c:	mov	r3, #4
   1df40:	mov	r2, r8
   1df44:	mov	r0, r9
   1df48:	bl	17b2c <_start@@Base+0x53f4>
   1df4c:	cmp	r0, sl
   1df50:	mov	r1, r0
   1df54:	beq	1eb3c <_start@@Base+0xc404>
   1df58:	add	r3, sp, #360	; 0x168
   1df5c:	mov	r2, r8
   1df60:	str	r4, [sp]
   1df64:	mov	r0, r9
   1df68:	bl	28ff4 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1df6c:	ldr	r3, [sp, #360]	; 0x168
   1df70:	mov	sl, r0
   1df74:	cmp	r3, r4
   1df78:	beq	1e0bc <_start@@Base+0xb984>
   1df7c:	mov	r1, r4
   1df80:	ldr	r0, [r9]
   1df84:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   1df88:	cmp	r0, #0
   1df8c:	beq	1e0bc <_start@@Base+0xb984>
   1df90:	ldr	r3, [sp, #360]	; 0x168
   1df94:	str	r3, [r0]
   1df98:	mov	r1, sl
   1df9c:	mov	r3, r5
   1dfa0:	mov	r2, r8
   1dfa4:	mov	r0, r9
   1dfa8:	bl	1582c <_start@@Base+0x30f4>
   1dfac:	ldr	r3, [sp, #356]	; 0x164
   1dfb0:	mov	sl, r0
   1dfb4:	cmp	r3, #0
   1dfb8:	beq	1f4ec <_start@@Base+0xcdb4>
   1dfbc:	cmp	r8, sl
   1dfc0:	beq	1dfe8 <_start@@Base+0xb8b0>
   1dfc4:	ldrb	r3, [sl]
   1dfc8:	cmp	r3, #34	; 0x22
   1dfcc:	moveq	r3, #0
   1dfd0:	addeq	sl, sl, #1
   1dfd4:	streq	r3, [r9, #12]
   1dfd8:	beq	1dfe8 <_start@@Base+0xb8b0>
   1dfdc:	cmp	r3, #46	; 0x2e
   1dfe0:	strne	fp, [r9, #12]
   1dfe4:	beq	1ee70 <_start@@Base+0xc738>
   1dfe8:	mov	r1, r8
   1dfec:	mov	r0, sl
   1dff0:	bl	12828 <_start@@Base+0xf0>
   1dff4:	sub	r3, pc, #284	; 0x11c
   1dff8:	ldrd	r2, [r3]
   1dffc:	cmp	r1, r3
   1e000:	cmpeq	r0, r2
   1e004:	bls	1df08 <_start@@Base+0xb7d0>
   1e008:	bic	r3, r0, #255	; 0xff
   1e00c:	sub	r7, pc, #300	; 0x12c
   1e010:	ldrd	r6, [r7]
   1e014:	str	r3, [sp, #104]	; 0x68
   1e018:	str	r1, [sp, #108]	; 0x6c
   1e01c:	ldrd	r2, [sp, #104]	; 0x68
   1e020:	cmp	r3, r7
   1e024:	cmpeq	r2, r6
   1e028:	beq	1ec74 <_start@@Base+0xc53c>
   1e02c:	ldr	r3, [sp, #16]
   1e030:	str	r1, [sp, #172]	; 0xac
   1e034:	and	r3, r0, r3
   1e038:	sub	r1, pc, #336	; 0x150
   1e03c:	ldrd	r0, [r1]
   1e040:	str	r3, [sp, #168]	; 0xa8
   1e044:	ldrd	r2, [sp, #168]	; 0xa8
   1e048:	cmp	r3, r1
   1e04c:	cmpeq	r2, r0
   1e050:	bne	1eb3c <_start@@Base+0xc404>
   1e054:	sub	r3, r8, sl
   1e058:	cmp	r3, #6
   1e05c:	ble	1eb3c <_start@@Base+0xc404>
   1e060:	mov	r1, sl
   1e064:	mov	r3, #6
   1e068:	mov	r2, r8
   1e06c:	mov	r0, r9
   1e070:	bl	17b2c <_start@@Base+0x53f4>
   1e074:	cmp	r0, sl
   1e078:	mov	r1, r0
   1e07c:	beq	1eb3c <_start@@Base+0xc404>
   1e080:	mov	r0, #0
   1e084:	add	r3, sp, #360	; 0x168
   1e088:	mov	r2, r8
   1e08c:	str	r0, [sp]
   1e090:	mov	r0, r9
   1e094:	bl	28ff4 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1e098:	ldr	r3, [sp, #360]	; 0x168
   1e09c:	mov	sl, r0
   1e0a0:	cmp	r3, #0
   1e0a4:	beq	1e0bc <_start@@Base+0xb984>
   1e0a8:	mov	r1, #2
   1e0ac:	ldr	r0, [r9]
   1e0b0:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   1e0b4:	cmp	r0, #0
   1e0b8:	bne	1df90 <_start@@Base+0xb858>
   1e0bc:	ldrd	r6, [sp, #64]	; 0x40
   1e0c0:	mov	r1, sl
   1e0c4:	mov	r3, #33	; 0x21
   1e0c8:	mov	r2, r8
   1e0cc:	mov	r0, r9
   1e0d0:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1e0d4:	ldr	r3, [sp, #340]	; 0x154
   1e0d8:	mov	sl, r0
   1e0dc:	cmp	r3, #0
   1e0e0:	beq	1ca5c <_start@@Base+0xa324>
   1e0e4:	mov	r1, #35	; 0x23
   1e0e8:	ldr	r0, [r9]
   1e0ec:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   1e0f0:	cmp	r0, #0
   1e0f4:	beq	1ca5c <_start@@Base+0xa324>
   1e0f8:	ldr	r3, [sp, #340]	; 0x154
   1e0fc:	str	r3, [r0]
   1e100:	b	1c08c <_start@@Base+0x9954>
   1e104:	cmp	r3, #34	; 0x22
   1e108:	bne	1d8f4 <_start@@Base+0xb1bc>
   1e10c:	add	r1, fp, #6
   1e110:	b	1d378 <_start@@Base+0xac40>
   1e114:	cmp	r3, #34	; 0x22
   1e118:	bne	1d8f4 <_start@@Base+0xb1bc>
   1e11c:	add	r1, fp, #2
   1e120:	b	1da9c <_start@@Base+0xb364>
   1e124:	ldrb	r3, [sl, #2]
   1e128:	cmp	r3, #32
   1e12c:	bls	1db54 <_start@@Base+0xb41c>
   1e130:	add	sl, sl, #2
   1e134:	b	1c08c <_start@@Base+0x9954>
   1e138:	sub	r3, pc, #584	; 0x248
   1e13c:	ldrd	r2, [r3]
   1e140:	ldrd	r0, [sp, #16]
   1e144:	cmp	r1, r3
   1e148:	cmpeq	r0, r2
   1e14c:	bne	1d63c <_start@@Base+0xaf04>
   1e150:	add	sl, sl, #8
   1e154:	mov	r1, r8
   1e158:	mov	r0, sl
   1e15c:	mov	r4, #0
   1e160:	bl	12828 <_start@@Base+0xf0>
   1e164:	and	r3, r1, #-16777216	; 0xff000000
   1e168:	str	r4, [sp, #192]	; 0xc0
   1e16c:	str	r3, [sp, #196]	; 0xc4
   1e170:	ldrd	r2, [sp, #192]	; 0xc0
   1e174:	cmp	r3, #1694498816	; 0x65000000
   1e178:	cmpeq	r2, #0
   1e17c:	bne	1e3e8 <_start@@Base+0xbcb0>
   1e180:	sub	r3, r8, sl
   1e184:	cmp	r3, #1
   1e188:	ble	1e944 <_start@@Base+0xc20c>
   1e18c:	mov	r1, sl
   1e190:	mov	r3, #1
   1e194:	mov	r2, r8
   1e198:	mov	r0, r9
   1e19c:	bl	17b2c <_start@@Base+0x53f4>
   1e1a0:	cmp	sl, r0
   1e1a4:	mov	r1, r0
   1e1a8:	beq	1e944 <_start@@Base+0xc20c>
   1e1ac:	ldr	ip, [pc, #-688]	; 1df04 <_start@@Base+0xb7cc>
   1e1b0:	mov	r3, r4
   1e1b4:	mov	r5, #8
   1e1b8:	mov	r2, r8
   1e1bc:	mov	r0, r9
   1e1c0:	ldr	lr, [pc, #-712]	; 1df00 <_start@@Base+0xb7c8>
   1e1c4:	str	r5, [sp]
   1e1c8:	ldr	r4, [sp, #344]	; 0x158
   1e1cc:	add	ip, pc, ip
   1e1d0:	add	ip, ip, #404	; 0x194
   1e1d4:	add	lr, pc, lr
   1e1d8:	stmib	sp, {r4, ip, lr}
   1e1dc:	bl	2984c <flatcc_json_parser_union_type@@Base>
   1e1e0:	mov	sl, r0
   1e1e4:	b	1c08c <_start@@Base+0x9954>
   1e1e8:	mov	sl, r8
   1e1ec:	b	1da0c <_start@@Base+0xb2d4>
   1e1f0:	mov	r1, sl
   1e1f4:	mov	r2, r8
   1e1f8:	mov	r0, r9
   1e1fc:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1e200:	mov	sl, r0
   1e204:	b	1c08c <_start@@Base+0x9954>
   1e208:	add	r4, sl, #8
   1e20c:	mov	r1, r8
   1e210:	mov	r0, r4
   1e214:	bl	12828 <_start@@Base+0xf0>
   1e218:	add	r3, pc, #984	; 0x3d8
   1e21c:	ldrd	r2, [r3]
   1e220:	cmp	r1, r3
   1e224:	cmpeq	r0, r2
   1e228:	bne	1e6e8 <_start@@Base+0xbfb0>
   1e22c:	add	sl, sl, #16
   1e230:	mov	r1, r8
   1e234:	mov	r0, sl
   1e238:	bl	12828 <_start@@Base+0xf0>
   1e23c:	and	r0, r0, #-16777216	; 0xff000000
   1e240:	add	r3, pc, #952	; 0x3b8
   1e244:	ldrd	r2, [r3]
   1e248:	str	r1, [sp, #260]	; 0x104
   1e24c:	add	r1, sp, #256	; 0x100
   1e250:	str	r0, [sp, #256]	; 0x100
   1e254:	ldrd	r0, [r1]
   1e258:	cmp	r1, r3
   1e25c:	cmpeq	r0, r2
   1e260:	bne	1e7dc <_start@@Base+0xc0a4>
   1e264:	sub	r3, r8, sl
   1e268:	cmp	r3, #5
   1e26c:	ble	1f974 <_start@@Base+0xd23c>
   1e270:	mov	r1, sl
   1e274:	mov	r3, #5
   1e278:	mov	r2, r8
   1e27c:	mov	r0, r9
   1e280:	bl	17b2c <_start@@Base+0x53f4>
   1e284:	cmp	sl, r0
   1e288:	mov	r1, r0
   1e28c:	beq	1f974 <_start@@Base+0xd23c>
   1e290:	add	r3, sp, #340	; 0x154
   1e294:	mov	r2, r8
   1e298:	mov	r0, r9
   1e29c:	bl	17818 <_start@@Base+0x50e0>
   1e2a0:	ldr	r3, [sp, #340]	; 0x154
   1e2a4:	mov	sl, r0
   1e2a8:	cmp	r3, #0
   1e2ac:	beq	1ca5c <_start@@Base+0xa324>
   1e2b0:	mov	r1, #34	; 0x22
   1e2b4:	ldr	r0, [r9]
   1e2b8:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   1e2bc:	cmp	r0, #0
   1e2c0:	beq	1ca5c <_start@@Base+0xa324>
   1e2c4:	ldr	r3, [sp, #340]	; 0x154
   1e2c8:	str	r3, [r0]
   1e2cc:	b	1c08c <_start@@Base+0x9954>
   1e2d0:	ldr	r1, [sp, #356]	; 0x164
   1e2d4:	add	r3, sp, #360	; 0x168
   1e2d8:	ldrd	r2, [r3]
   1e2dc:	cmp	r1, #0
   1e2e0:	bne	1e730 <_start@@Base+0xbff8>
   1e2e4:	cmp	r3, #0
   1e2e8:	cmpeq	r2, #127	; 0x7f
   1e2ec:	sxtbls	r2, r2
   1e2f0:	bls	1da48 <_start@@Base+0xb310>
   1e2f4:	mov	r1, r0
   1e2f8:	mov	r3, #7
   1e2fc:	mov	r2, r8
   1e300:	mov	r0, r9
   1e304:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1e308:	mov	sl, r0
   1e30c:	ldr	r3, [sp, #64]	; 0x40
   1e310:	cmp	r3, sl
   1e314:	beq	1da0c <_start@@Base+0xb2d4>
   1e318:	add	r3, sp, #348	; 0x15c
   1e31c:	ldrsb	r2, [r3]
   1e320:	b	1da48 <_start@@Base+0xb310>
   1e324:	ldrb	r3, [sl, #2]
   1e328:	cmp	r3, #32
   1e32c:	addhi	fp, sl, #2
   1e330:	bls	1dba0 <_start@@Base+0xb468>
   1e334:	b	1dbb4 <_start@@Base+0xb47c>
   1e338:	mov	r1, sl
   1e33c:	mov	r2, r8
   1e340:	mov	r0, r9
   1e344:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1e348:	mov	sl, r0
   1e34c:	b	1c08c <_start@@Base+0x9954>
   1e350:	mov	r4, r0
   1e354:	mov	r1, r4
   1e358:	mov	r2, r8
   1e35c:	mov	r0, r9
   1e360:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1e364:	mov	sl, r0
   1e368:	b	1c08c <_start@@Base+0x9954>
   1e36c:	mov	r1, sl
   1e370:	mov	r2, r8
   1e374:	mov	r0, r9
   1e378:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1e37c:	mov	sl, r0
   1e380:	b	1c08c <_start@@Base+0x9954>
   1e384:	ldr	r3, [pc, #652]	; 1e618 <_start@@Base+0xbee0>
   1e388:	mov	r1, r0
   1e38c:	mov	r2, r8
   1e390:	mov	r0, r9
   1e394:	str	fp, [sp]
   1e398:	add	r3, pc, r3
   1e39c:	add	r3, r3, #356	; 0x164
   1e3a0:	bl	139d8 <_start@@Base+0x12a0>
   1e3a4:	cmp	r8, r0
   1e3a8:	cmpne	sl, r0
   1e3ac:	beq	1faf8 <_start@@Base+0xd3c0>
   1e3b0:	mov	sl, r0
   1e3b4:	b	1d5c8 <_start@@Base+0xae90>
   1e3b8:	mov	r1, r4
   1e3bc:	mov	r2, r8
   1e3c0:	mov	r0, r9
   1e3c4:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1e3c8:	mov	sl, r0
   1e3cc:	b	1c08c <_start@@Base+0x9954>
   1e3d0:	mov	r1, r4
   1e3d4:	mov	r2, r8
   1e3d8:	mov	r0, r9
   1e3dc:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1e3e0:	mov	sl, r0
   1e3e4:	b	1c08c <_start@@Base+0x9954>
   1e3e8:	mov	r1, sl
   1e3ec:	mov	r2, r8
   1e3f0:	mov	r0, r9
   1e3f4:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1e3f8:	mov	sl, r0
   1e3fc:	b	1c08c <_start@@Base+0x9954>
   1e400:	add	sl, fp, #1
   1e404:	mov	r3, #0
   1e408:	sub	r2, r8, sl
   1e40c:	cmp	r2, #1
   1e410:	str	r3, [sp, #352]	; 0x160
   1e414:	ble	1e428 <_start@@Base+0xbcf0>
   1e418:	ldrb	r3, [fp, #1]
   1e41c:	cmp	r3, #32
   1e420:	bhi	1c08c <_start@@Base+0x9954>
   1e424:	beq	1f76c <_start@@Base+0xd034>
   1e428:	mov	r1, sl
   1e42c:	b	1db54 <_start@@Base+0xb41c>
   1e430:	mov	ip, #0
   1e434:	mov	r3, #10
   1e438:	mov	r2, r8
   1e43c:	mov	r1, r8
   1e440:	mov	r0, r9
   1e444:	str	ip, [sp, #352]	; 0x160
   1e448:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1e44c:	mov	fp, r0
   1e450:	ldr	r3, [sp, #352]	; 0x160
   1e454:	b	1c6fc <_start@@Base+0x9fc4>
   1e458:	mov	r1, sl
   1e45c:	mov	r2, r8
   1e460:	mov	r0, r9
   1e464:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1e468:	mov	sl, r0
   1e46c:	b	1c08c <_start@@Base+0x9954>
   1e470:	add	r3, pc, #400	; 0x190
   1e474:	ldrd	r2, [r3]
   1e478:	cmp	r1, r3
   1e47c:	cmpeq	r0, r2
   1e480:	beq	1ea40 <_start@@Base+0xc308>
   1e484:	add	r3, pc, #388	; 0x184
   1e488:	ldrd	r2, [r3]
   1e48c:	cmp	r1, r3
   1e490:	cmpeq	r0, r2
   1e494:	bne	1f350 <_start@@Base+0xcc18>
   1e498:	sub	r3, r8, sl
   1e49c:	cmp	r3, #8
   1e4a0:	ble	1f7d4 <_start@@Base+0xd09c>
   1e4a4:	mov	r3, #8
   1e4a8:	mov	r2, r8
   1e4ac:	mov	r1, sl
   1e4b0:	mov	r0, r9
   1e4b4:	bl	17b2c <_start@@Base+0x53f4>
   1e4b8:	cmp	sl, r0
   1e4bc:	mov	r4, r0
   1e4c0:	beq	1f7d0 <_start@@Base+0xd098>
   1e4c4:	mov	sl, #0
   1e4c8:	add	r5, sp, #360	; 0x168
   1e4cc:	mov	fp, #0
   1e4d0:	mov	r1, r0
   1e4d4:	mov	r3, r5
   1e4d8:	mov	r2, r8
   1e4dc:	mov	r0, r9
   1e4e0:	strd	sl, [r5]
   1e4e4:	bl	13230 <_start@@Base+0xaf8>
   1e4e8:	cmp	r0, r4
   1e4ec:	mov	sl, r0
   1e4f0:	beq	1fcdc <_start@@Base+0xd5a4>
   1e4f4:	add	r3, sp, #360	; 0x168
   1e4f8:	ldrd	r2, [r3]
   1e4fc:	orrs	r3, r2, r3
   1e500:	bne	1e510 <_start@@Base+0xbdd8>
   1e504:	ldr	r3, [r9, #8]
   1e508:	tst	r3, #2
   1e50c:	beq	1c08c <_start@@Base+0x9954>
   1e510:	mov	r3, #8
   1e514:	mov	r1, #19
   1e518:	ldr	r0, [r9]
   1e51c:	mov	r2, r3
   1e520:	bl	24d44 <flatcc_builder_table_add@@Base>
   1e524:	cmp	r0, #0
   1e528:	beq	1ca5c <_start@@Base+0xa324>
   1e52c:	add	r3, sp, #360	; 0x168
   1e530:	ldrd	r2, [r3]
   1e534:	strd	r2, [r0]
   1e538:	b	1c08c <_start@@Base+0x9954>
   1e53c:	mov	r3, #0
   1e540:	add	r4, sl, #8
   1e544:	mov	r1, r8
   1e548:	mov	r0, r4
   1e54c:	str	r3, [sp, #248]	; 0xf8
   1e550:	bl	12828 <_start@@Base+0xf0>
   1e554:	and	r3, r1, #-16777216	; 0xff000000
   1e558:	str	r3, [sp, #252]	; 0xfc
   1e55c:	ldrd	r2, [sp, #248]	; 0xf8
   1e560:	cmp	r3, #2030043136	; 0x79000000
   1e564:	cmpeq	r2, #0
   1e568:	bne	1e80c <_start@@Base+0xc0d4>
   1e56c:	sub	r3, r8, r4
   1e570:	cmp	r3, #1
   1e574:	ble	1f4d4 <_start@@Base+0xcd9c>
   1e578:	mov	r3, #1
   1e57c:	mov	r2, r8
   1e580:	mov	r1, r4
   1e584:	mov	r0, r9
   1e588:	bl	17b2c <_start@@Base+0x53f4>
   1e58c:	cmp	r4, r0
   1e590:	mov	sl, r0
   1e594:	beq	1f4d0 <_start@@Base+0xcd98>
   1e598:	mov	r2, #1
   1e59c:	mvn	r3, #0
   1e5a0:	ldr	r0, [r9]
   1e5a4:	mov	r1, r2
   1e5a8:	bl	22f60 <flatcc_builder_start_vector@@Base>
   1e5ac:	cmp	r0, #0
   1e5b0:	bne	1ca5c <_start@@Base+0xa324>
   1e5b4:	ldr	r4, [sp, #28]
   1e5b8:	mov	r1, sl
   1e5bc:	mov	r2, r8
   1e5c0:	mov	r0, r9
   1e5c4:	mov	r3, r4
   1e5c8:	bl	13700 <_start@@Base+0xfc8>
   1e5cc:	ldr	r3, [sp, #336]	; 0x150
   1e5d0:	mov	sl, r0
   1e5d4:	cmp	r3, #0
   1e5d8:	beq	1fa50 <_start@@Base+0xd318>
   1e5dc:	ldr	r3, [pc, #56]	; 1e61c <_start@@Base+0xbee4>
   1e5e0:	strd	r6, [sp, #64]	; 0x40
   1e5e4:	mov	r7, r4
   1e5e8:	add	r3, pc, r3
   1e5ec:	add	r3, r3, #316	; 0x13c
   1e5f0:	str	r3, [sp, #16]
   1e5f4:	b	1e660 <_start@@Base+0xbf28>
   1e5f8:	rsbvc	r6, r1, r5, ror #6
   1e5fc:	smcvs	54867	; 0xd653
   1e600:	strvc	r0, [r0], #-0
   1e604:	svcpl	0x00746573
   1e608:			; <UNDEFINED> instruction: 0x666e7631
   1e60c:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1e610:			; <UNDEFINED> instruction: 0x666e7631
   1e614:	ldrvc	r3, [r6, #-1119]!	; 0xfffffba1
   1e618:	strdeq	lr, [r1], -r0
   1e61c:	andeq	lr, r1, r0, lsr #21
   1e620:	strdeq	lr, [r1], -ip
   1e624:	andeq	lr, r1, r4, lsl #11
   1e628:	strdeq	lr, [r1], -r0
   1e62c:			; <UNDEFINED> instruction: 0x0001e2bc
   1e630:	andeq	lr, r1, r4, asr #1
   1e634:	ldrb	ip, [sp, #360]	; 0x168
   1e638:	mov	r3, r7
   1e63c:	mov	r1, r4
   1e640:	mov	r2, r8
   1e644:	mov	r0, r9
   1e648:	strb	ip, [fp]
   1e64c:	bl	159f0 <_start@@Base+0x32b8>
   1e650:	ldr	r3, [sp, #336]	; 0x150
   1e654:	mov	sl, r0
   1e658:	cmp	r3, #0
   1e65c:	beq	1fa4c <_start@@Base+0xd314>
   1e660:	mov	r3, #0
   1e664:	mov	r1, #1
   1e668:	ldr	r0, [r9]
   1e66c:	add	r5, sp, #360	; 0x168
   1e670:	strb	r3, [sp, #360]	; 0x168
   1e674:	bl	22618 <flatcc_builder_extend_vector@@Base>
   1e678:	subs	fp, r0, #0
   1e67c:	mov	r1, sl
   1e680:	mov	r3, r5
   1e684:	mov	r2, r8
   1e688:	mov	r0, r9
   1e68c:	beq	1ca5c <_start@@Base+0xa324>
   1e690:	bl	132cc <_start@@Base+0xb94>
   1e694:	cmp	sl, r0
   1e698:	mov	r4, r0
   1e69c:	bne	1e634 <_start@@Base+0xbefc>
   1e6a0:	mov	r1, r0
   1e6a4:	mov	r2, r8
   1e6a8:	str	r5, [sp]
   1e6ac:	mov	r0, r9
   1e6b0:	ldr	r3, [sp, #16]
   1e6b4:	bl	1405c <_start@@Base+0x1924>
   1e6b8:	cmp	r8, r0
   1e6bc:	cmpne	r4, r0
   1e6c0:	mov	sl, r0
   1e6c4:	mov	r4, r0
   1e6c8:	bne	1e634 <_start@@Base+0xbefc>
   1e6cc:	b	1ca5c <_start@@Base+0xa324>
   1e6d0:	mov	r1, sl
   1e6d4:	mov	r2, r8
   1e6d8:	mov	r0, r9
   1e6dc:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1e6e0:	mov	sl, r0
   1e6e4:	b	1c08c <_start@@Base+0x9954>
   1e6e8:	mov	r1, r4
   1e6ec:	mov	r2, r8
   1e6f0:	mov	r0, r9
   1e6f4:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1e6f8:	mov	sl, r0
   1e6fc:	b	1c08c <_start@@Base+0x9954>
   1e700:	mov	r1, r4
   1e704:	mov	r2, r8
   1e708:	mov	r0, r9
   1e70c:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1e710:	mov	sl, r0
   1e714:	b	1c08c <_start@@Base+0x9954>
   1e718:	mov	r1, r4
   1e71c:	mov	r2, r8
   1e720:	mov	r0, r9
   1e724:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1e728:	mov	sl, r0
   1e72c:	b	1c08c <_start@@Base+0x9954>
   1e730:	cmp	r3, #0
   1e734:	cmpeq	r2, #128	; 0x80
   1e738:	rsbls	r2, r2, #0
   1e73c:	sxtbls	r2, r2
   1e740:	bls	1da48 <_start@@Base+0xb310>
   1e744:	mov	r1, r0
   1e748:	mov	r3, #8
   1e74c:	mov	r2, r8
   1e750:	mov	r0, r9
   1e754:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1e758:	mov	sl, r0
   1e75c:	b	1e30c <_start@@Base+0xbbd4>
   1e760:	mov	r1, r4
   1e764:	mov	r2, r8
   1e768:	mov	r0, r9
   1e76c:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1e770:	mov	sl, r0
   1e774:	b	1c08c <_start@@Base+0x9954>
   1e778:	ldr	r3, [pc, #-352]	; 1e620 <_start@@Base+0xbee8>
   1e77c:	mov	r1, r0
   1e780:	mov	r2, r8
   1e784:	mov	r0, r9
   1e788:	str	r5, [sp]
   1e78c:	add	r3, pc, r3
   1e790:	add	r3, r3, #516	; 0x204
   1e794:	bl	137d4 <_start@@Base+0x109c>
   1e798:	cmp	r8, r0
   1e79c:	cmpne	sl, r0
   1e7a0:	beq	1cd38 <_start@@Base+0xa600>
   1e7a4:	mov	sl, r0
   1e7a8:	b	1bcd0 <_start@@Base+0x9598>
   1e7ac:	mov	r1, r4
   1e7b0:	mov	r2, r8
   1e7b4:	mov	r0, r9
   1e7b8:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1e7bc:	mov	sl, r0
   1e7c0:	b	1c08c <_start@@Base+0x9954>
   1e7c4:	mov	r1, r4
   1e7c8:	mov	r2, r8
   1e7cc:	mov	r0, r9
   1e7d0:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1e7d4:	mov	sl, r0
   1e7d8:	b	1c08c <_start@@Base+0x9954>
   1e7dc:	mov	r1, sl
   1e7e0:	mov	r2, r8
   1e7e4:	mov	r0, r9
   1e7e8:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1e7ec:	mov	sl, r0
   1e7f0:	b	1c08c <_start@@Base+0x9954>
   1e7f4:	mov	r1, r4
   1e7f8:	mov	r2, r8
   1e7fc:	mov	r0, r9
   1e800:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1e804:	mov	sl, r0
   1e808:	b	1c08c <_start@@Base+0x9954>
   1e80c:	mov	r1, r4
   1e810:	mov	r2, r8
   1e814:	mov	r0, r9
   1e818:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1e81c:	mov	sl, r0
   1e820:	b	1c08c <_start@@Base+0x9954>
   1e824:	mov	r1, sl
   1e828:	mov	r2, r8
   1e82c:	mov	r0, r9
   1e830:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1e834:	mov	sl, r0
   1e838:	b	1c08c <_start@@Base+0x9954>
   1e83c:	sub	r3, r8, r4
   1e840:	cmp	r3, #2
   1e844:	ble	1f518 <_start@@Base+0xcde0>
   1e848:	mov	r3, #2
   1e84c:	mov	r2, r8
   1e850:	mov	r1, r4
   1e854:	mov	r0, r9
   1e858:	bl	17b2c <_start@@Base+0x53f4>
   1e85c:	cmp	r4, r0
   1e860:	mov	sl, r0
   1e864:	beq	1f514 <_start@@Base+0xcddc>
   1e868:	ldr	r0, [r9]
   1e86c:	bl	22ff0 <flatcc_builder_start_offset_vector@@Base>
   1e870:	cmp	r0, #0
   1e874:	bne	1ca5c <_start@@Base+0xa324>
   1e878:	ldr	r5, [sp, #28]
   1e87c:	mov	r1, sl
   1e880:	mov	r2, r8
   1e884:	mov	r0, r9
   1e888:	mov	r3, r5
   1e88c:	bl	13700 <_start@@Base+0xfc8>
   1e890:	ldr	r3, [sp, #336]	; 0x150
   1e894:	mov	sl, r0
   1e898:	cmp	r3, #0
   1e89c:	beq	1fb50 <_start@@Base+0xd418>
   1e8a0:	add	r4, sp, #340	; 0x154
   1e8a4:	b	1e8e4 <_start@@Base+0xc1ac>
   1e8a8:	ldr	r0, [r9]
   1e8ac:	bl	228b4 <flatcc_builder_extend_offset_vector@@Base>
   1e8b0:	subs	ip, r0, #0
   1e8b4:	mov	r3, r5
   1e8b8:	mov	r2, r8
   1e8bc:	mov	r1, sl
   1e8c0:	mov	r0, r9
   1e8c4:	beq	1ca5c <_start@@Base+0xa324>
   1e8c8:	ldr	lr, [sp, #340]	; 0x154
   1e8cc:	str	lr, [ip]
   1e8d0:	bl	159f0 <_start@@Base+0x32b8>
   1e8d4:	ldr	r3, [sp, #336]	; 0x150
   1e8d8:	mov	sl, r0
   1e8dc:	cmp	r3, #0
   1e8e0:	beq	1fb50 <_start@@Base+0xd418>
   1e8e4:	mov	r1, sl
   1e8e8:	mov	r3, r4
   1e8ec:	mov	r2, r8
   1e8f0:	mov	r0, r9
   1e8f4:	bl	29418 <flatcc_json_parser_build_string@@Base>
   1e8f8:	ldr	r3, [sp, #340]	; 0x154
   1e8fc:	mov	sl, r0
   1e900:	mov	r1, #1
   1e904:	cmp	r3, #0
   1e908:	bne	1e8a8 <_start@@Base+0xc170>
   1e90c:	b	1ca5c <_start@@Base+0xa324>
   1e910:	mov	r4, r0
   1e914:	mov	r1, r4
   1e918:	mov	r2, r8
   1e91c:	mov	r0, r9
   1e920:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1e924:	mov	sl, r0
   1e928:	b	1c08c <_start@@Base+0x9954>
   1e92c:	mov	r1, sl
   1e930:	mov	r2, r8
   1e934:	mov	r0, r9
   1e938:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1e93c:	mov	sl, r0
   1e940:	b	1c08c <_start@@Base+0x9954>
   1e944:	mov	r1, sl
   1e948:	mov	r2, r8
   1e94c:	mov	r0, r9
   1e950:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1e954:	mov	sl, r0
   1e958:	b	1c08c <_start@@Base+0x9954>
   1e95c:	add	sl, sl, #8
   1e960:	mov	r1, r8
   1e964:	mov	r0, sl
   1e968:	mov	r4, #0
   1e96c:	bl	12828 <_start@@Base+0xf0>
   1e970:	and	r3, r1, #-16777216	; 0xff000000
   1e974:	str	r4, [sp, #288]	; 0x120
   1e978:	str	r3, [sp, #292]	; 0x124
   1e97c:	add	r3, sp, #288	; 0x120
   1e980:	ldrd	r2, [r3]
   1e984:	cmp	r3, #1627389952	; 0x61000000
   1e988:	cmpeq	r2, #0
   1e98c:	bne	1f680 <_start@@Base+0xcf48>
   1e990:	sub	r3, r8, sl
   1e994:	cmp	r3, #1
   1e998:	ble	1fb38 <_start@@Base+0xd400>
   1e99c:	mov	r3, #1
   1e9a0:	mov	r2, r8
   1e9a4:	mov	r1, sl
   1e9a8:	mov	r0, r9
   1e9ac:	bl	17b2c <_start@@Base+0x53f4>
   1e9b0:	cmp	sl, r0
   1e9b4:	mov	r5, r0
   1e9b8:	beq	1fb38 <_start@@Base+0xd400>
   1e9bc:	add	fp, sp, #360	; 0x168
   1e9c0:	mov	r1, r0
   1e9c4:	str	r4, [sp, #360]	; 0x168
   1e9c8:	mov	r2, r8
   1e9cc:	mov	r3, fp
   1e9d0:	mov	r0, r9
   1e9d4:	bl	13464 <_start@@Base+0xd2c>
   1e9d8:	cmp	r0, r5
   1e9dc:	mov	sl, r0
   1e9e0:	beq	1fe30 <_start@@Base+0xd6f8>
   1e9e4:	ldr	r3, [sp, #360]	; 0x168
   1e9e8:	cmp	r3, #0
   1e9ec:	bne	1e9fc <_start@@Base+0xc2c4>
   1e9f0:	ldr	r3, [r9, #8]
   1e9f4:	tst	r3, #2
   1e9f8:	beq	1c08c <_start@@Base+0x9954>
   1e9fc:	mov	r3, #4
   1ea00:	mov	r1, #20
   1ea04:	ldr	r0, [r9]
   1ea08:	mov	r2, r3
   1ea0c:	bl	24d44 <flatcc_builder_table_add@@Base>
   1ea10:	cmp	r0, #0
   1ea14:	beq	1fe64 <_start@@Base+0xd72c>
   1ea18:	ldr	r3, [sp, #360]	; 0x168
   1ea1c:	str	r3, [r0]
   1ea20:	b	1c08c <_start@@Base+0x9954>
   1ea24:	mov	r4, r0
   1ea28:	mov	r1, r4
   1ea2c:	mov	r2, r8
   1ea30:	mov	r0, r9
   1ea34:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1ea38:	mov	sl, r0
   1ea3c:	b	1c08c <_start@@Base+0x9954>
   1ea40:	sub	r3, r8, sl
   1ea44:	cmp	r3, #8
   1ea48:	ble	1f8ac <_start@@Base+0xd174>
   1ea4c:	mov	r3, #8
   1ea50:	mov	r2, r8
   1ea54:	mov	r1, sl
   1ea58:	mov	r0, r9
   1ea5c:	bl	17b2c <_start@@Base+0x53f4>
   1ea60:	cmp	sl, r0
   1ea64:	mov	r4, r0
   1ea68:	beq	1f8ac <_start@@Base+0xd174>
   1ea6c:	mov	ip, #0
   1ea70:	add	r5, sp, #360	; 0x168
   1ea74:	mov	r1, r0
   1ea78:	mov	r3, r5
   1ea7c:	mov	r2, r8
   1ea80:	mov	r0, r9
   1ea84:	str	ip, [sp, #360]	; 0x168
   1ea88:	bl	13394 <_start@@Base+0xc5c>
   1ea8c:	cmp	r0, r4
   1ea90:	mov	sl, r0
   1ea94:	beq	1fe84 <_start@@Base+0xd74c>
   1ea98:	ldr	r3, [sp, #360]	; 0x168
   1ea9c:	cmp	r3, #0
   1eaa0:	bne	1eab0 <_start@@Base+0xc378>
   1eaa4:	ldr	r3, [r9, #8]
   1eaa8:	tst	r3, #2
   1eaac:	beq	1c08c <_start@@Base+0x9954>
   1eab0:	mov	r3, #4
   1eab4:	mov	r1, #17
   1eab8:	ldr	r0, [r9]
   1eabc:	mov	r2, r3
   1eac0:	bl	24d44 <flatcc_builder_table_add@@Base>
   1eac4:	cmp	r0, #0
   1eac8:	beq	1fe64 <_start@@Base+0xd72c>
   1eacc:	ldr	r3, [sp, #360]	; 0x168
   1ead0:	str	r3, [r0]
   1ead4:	b	1c08c <_start@@Base+0x9954>
   1ead8:	mov	r1, sl
   1eadc:	mov	r2, r8
   1eae0:	mov	r0, r9
   1eae4:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1eae8:	mov	sl, r0
   1eaec:	b	1c08c <_start@@Base+0x9954>
   1eaf0:	ldr	r3, [pc, #-1236]	; 1e624 <_start@@Base+0xbeec>
   1eaf4:	mov	r1, r0
   1eaf8:	mov	r2, r8
   1eafc:	mov	r0, r9
   1eb00:	str	fp, [sp]
   1eb04:	add	r3, pc, r3
   1eb08:	add	r3, r3, #304	; 0x130
   1eb0c:	bl	142a8 <_start@@Base+0x1b70>
   1eb10:	cmp	r8, r0
   1eb14:	cmpne	sl, r0
   1eb18:	beq	1cd38 <_start@@Base+0xa600>
   1eb1c:	mov	sl, r0
   1eb20:	b	1c874 <_start@@Base+0xa13c>
   1eb24:	mov	r1, r4
   1eb28:	mov	r2, r8
   1eb2c:	mov	r0, r9
   1eb30:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1eb34:	mov	r4, r0
   1eb38:	b	1d104 <_start@@Base+0xa9cc>
   1eb3c:	mov	r1, sl
   1eb40:	mov	r2, r8
   1eb44:	mov	r0, r9
   1eb48:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1eb4c:	mov	sl, r0
   1eb50:	b	1df98 <_start@@Base+0xb860>
   1eb54:	mov	r1, sl
   1eb58:	mov	r2, r8
   1eb5c:	mov	r0, r9
   1eb60:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1eb64:	mov	sl, r0
   1eb68:	b	1c510 <_start@@Base+0x9dd8>
   1eb6c:	mov	r1, r4
   1eb70:	mov	r3, #5
   1eb74:	mov	r2, r8
   1eb78:	mov	r0, r9
   1eb7c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1eb80:	mov	r4, r0
   1eb84:	b	1d154 <_start@@Base+0xaa1c>
   1eb88:	ldr	r3, [pc, #-1384]	; 1e628 <_start@@Base+0xbef0>
   1eb8c:	mov	r1, r0
   1eb90:	mov	r2, r8
   1eb94:	ldr	r0, [sp, #80]	; 0x50
   1eb98:	add	r3, pc, r3
   1eb9c:	add	r3, r3, #432	; 0x1b0
   1eba0:	str	r0, [sp]
   1eba4:	mov	r0, r9
   1eba8:	bl	14c48 <_start@@Base+0x2510>
   1ebac:	cmp	r8, r0
   1ebb0:	cmpne	r4, r0
   1ebb4:	beq	1ebf0 <_start@@Base+0xc4b8>
   1ebb8:	mov	r4, r0
   1ebbc:	b	1d1d4 <_start@@Base+0xaa9c>
   1ebc0:	ldr	r1, [sp, #80]	; 0x50
   1ebc4:	mov	r2, r8
   1ebc8:	mov	r0, r9
   1ebcc:	ldr	r3, [sp, #244]	; 0xf4
   1ebd0:	str	r1, [sp]
   1ebd4:	mov	r1, r4
   1ebd8:	bl	14c48 <_start@@Base+0x2510>
   1ebdc:	cmp	r8, r0
   1ebe0:	cmpne	r4, r0
   1ebe4:	beq	1ebf0 <_start@@Base+0xc4b8>
   1ebe8:	mov	r4, r0
   1ebec:	b	1d0f8 <_start@@Base+0xa9c0>
   1ebf0:	mov	r1, r0
   1ebf4:	mov	r3, #33	; 0x21
   1ebf8:	strd	sl, [sp, #80]	; 0x50
   1ebfc:	mov	r2, r8
   1ec00:	mov	r0, r9
   1ec04:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1ec08:	mov	r4, r0
   1ec0c:	mov	r1, r4
   1ec10:	mov	r2, r8
   1ec14:	ldr	r3, [sp, #28]
   1ec18:	mov	r0, r9
   1ec1c:	bl	159f0 <_start@@Base+0x32b8>
   1ec20:	ldr	r3, [sp, #336]	; 0x150
   1ec24:	mov	sl, r0
   1ec28:	cmp	r3, #0
   1ec2c:	bne	1d008 <_start@@Base+0xa8d0>
   1ec30:	add	r3, sp, #304	; 0x130
   1ec34:	ldrd	r6, [r3]
   1ec38:	ldr	r0, [r9]
   1ec3c:	bl	23f4c <flatcc_builder_end_vector@@Base>
   1ec40:	cmp	r0, #0
   1ec44:	str	r0, [sp, #340]	; 0x154
   1ec48:	beq	1ca5c <_start@@Base+0xa324>
   1ec4c:	mov	r1, #29
   1ec50:	ldr	r0, [r9]
   1ec54:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   1ec58:	cmp	r0, #0
   1ec5c:	beq	1ca5c <_start@@Base+0xa324>
   1ec60:	ldr	r3, [sp, #340]	; 0x154
   1ec64:	str	r3, [r0]
   1ec68:	b	1c08c <_start@@Base+0x9954>
   1ec6c:	strd	sl, [sp, #80]	; 0x50
   1ec70:	b	1ec0c <_start@@Base+0xc4d4>
   1ec74:	sub	r3, r8, sl
   1ec78:	cmp	r3, #7
   1ec7c:	ble	1eb3c <_start@@Base+0xc404>
   1ec80:	mov	r1, sl
   1ec84:	mov	r3, #7
   1ec88:	mov	r2, r8
   1ec8c:	mov	r0, r9
   1ec90:	bl	17b2c <_start@@Base+0x53f4>
   1ec94:	cmp	r0, sl
   1ec98:	mov	r1, r0
   1ec9c:	beq	1eb3c <_start@@Base+0xc404>
   1eca0:	add	r3, sp, #360	; 0x168
   1eca4:	mov	r2, r8
   1eca8:	str	fp, [sp]
   1ecac:	mov	r0, r9
   1ecb0:	bl	28ff4 <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1ecb4:	ldr	r3, [sp, #360]	; 0x168
   1ecb8:	mov	sl, r0
   1ecbc:	cmp	r3, #0
   1ecc0:	beq	1e0bc <_start@@Base+0xb984>
   1ecc4:	mov	r1, #1
   1ecc8:	ldr	r0, [r9]
   1eccc:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   1ecd0:	cmp	r0, #0
   1ecd4:	bne	1df90 <_start@@Base+0xb858>
   1ecd8:	b	1e0bc <_start@@Base+0xb984>
   1ecdc:	sub	r3, r8, sl
   1ece0:	cmp	r3, #3
   1ece4:	ble	1eb54 <_start@@Base+0xc41c>
   1ece8:	mov	r3, #3
   1ecec:	mov	r2, r8
   1ecf0:	mov	r1, sl
   1ecf4:	mov	r0, r9
   1ecf8:	bl	17b2c <_start@@Base+0x53f4>
   1ecfc:	cmp	r0, sl
   1ed00:	mov	r4, r0
   1ed04:	beq	1eb54 <_start@@Base+0xc41c>
   1ed08:	add	fp, sp, #360	; 0x168
   1ed0c:	mov	r6, #0
   1ed10:	mov	r7, #0
   1ed14:	mov	r1, r0
   1ed18:	mov	r3, fp
   1ed1c:	mov	r2, r8
   1ed20:	mov	r0, r9
   1ed24:	strd	r6, [fp]
   1ed28:	bl	13154 <_start@@Base+0xa1c>
   1ed2c:	cmp	r4, r0
   1ed30:	mov	sl, r0
   1ed34:	beq	1f64c <_start@@Base+0xcf14>
   1ed38:	add	r3, sp, #360	; 0x168
   1ed3c:	ldrd	r2, [r3]
   1ed40:	orrs	r3, r2, r3
   1ed44:	bne	1ed54 <_start@@Base+0xc61c>
   1ed48:	ldr	r3, [r9, #8]
   1ed4c:	tst	r3, #2
   1ed50:	beq	1c510 <_start@@Base+0x9dd8>
   1ed54:	mov	r3, #8
   1ed58:	mov	r1, #1
   1ed5c:	ldr	r0, [r9]
   1ed60:	mov	r2, r3
   1ed64:	bl	24d44 <flatcc_builder_table_add@@Base>
   1ed68:	cmp	r0, #0
   1ed6c:	beq	1f0cc <_start@@Base+0xc994>
   1ed70:	add	r3, sp, #360	; 0x168
   1ed74:	ldrd	r2, [r3]
   1ed78:	strd	r2, [r0]
   1ed7c:	b	1c510 <_start@@Base+0x9dd8>
   1ed80:	ldrb	r2, [sl, #1]
   1ed84:	add	r1, sl, #1
   1ed88:	cmp	r2, #114	; 0x72
   1ed8c:	bne	1c240 <_start@@Base+0x9b08>
   1ed90:	ldrb	r2, [r1, #1]!
   1ed94:	cmp	r2, #117	; 0x75
   1ed98:	bne	1c240 <_start@@Base+0x9b08>
   1ed9c:	ldrb	r2, [r1, #1]
   1eda0:	cmp	r2, #101	; 0x65
   1eda4:	moveq	r3, #1
   1eda8:	addeq	r4, sl, #4
   1edac:	strbeq	r3, [sp, #356]	; 0x164
   1edb0:	bne	1c240 <_start@@Base+0x9b08>
   1edb4:	b	1c290 <_start@@Base+0x9b58>
   1edb8:	ldr	r3, [pc, #-1940]	; 1e62c <_start@@Base+0xbef4>
   1edbc:	mov	r1, r0
   1edc0:	mov	r2, r8
   1edc4:	mov	r0, r9
   1edc8:	str	fp, [sp]
   1edcc:	add	r3, pc, r3
   1edd0:	add	r3, r3, #368	; 0x170
   1edd4:	bl	137d4 <_start@@Base+0x109c>
   1edd8:	cmp	r8, r0
   1eddc:	cmpne	sl, r0
   1ede0:	beq	1faf8 <_start@@Base+0xd3c0>
   1ede4:	mov	sl, r0
   1ede8:	b	1db24 <_start@@Base+0xb3ec>
   1edec:	mov	r1, sl
   1edf0:	mov	r2, r8
   1edf4:	mov	r0, r9
   1edf8:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1edfc:	mov	sl, r0
   1ee00:	b	1c08c <_start@@Base+0x9954>
   1ee04:	ldr	r0, [r9]
   1ee08:	bl	23f4c <flatcc_builder_end_vector@@Base>
   1ee0c:	cmp	r0, #0
   1ee10:	str	r0, [sp, #340]	; 0x154
   1ee14:	beq	1ca5c <_start@@Base+0xa324>
   1ee18:	mov	r1, #9
   1ee1c:	ldr	r0, [r9]
   1ee20:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   1ee24:	cmp	r0, #0
   1ee28:	beq	1ca5c <_start@@Base+0xa324>
   1ee2c:	ldr	r3, [sp, #340]	; 0x154
   1ee30:	str	r3, [r0]
   1ee34:	b	1c08c <_start@@Base+0x9954>
   1ee38:	mov	r1, sl
   1ee3c:	mov	r2, r8
   1ee40:	mov	r0, r9
   1ee44:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1ee48:	mov	sl, r0
   1ee4c:	b	1c08c <_start@@Base+0x9954>
   1ee50:	mov	r1, sl
   1ee54:	mov	r2, r8
   1ee58:	mov	r0, r9
   1ee5c:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1ee60:	mov	sl, r0
   1ee64:	b	1c08c <_start@@Base+0x9954>
   1ee68:	mov	sl, r8
   1ee6c:	b	1b978 <_start@@Base+0x9240>
   1ee70:	mov	r1, sl
   1ee74:	mov	r3, #5
   1ee78:	mov	r2, r8
   1ee7c:	mov	r0, r9
   1ee80:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1ee84:	mov	sl, r0
   1ee88:	b	1dfe8 <_start@@Base+0xb8b0>
   1ee8c:	mov	r1, sl
   1ee90:	mov	r3, #5
   1ee94:	mov	r2, r8
   1ee98:	mov	r0, r9
   1ee9c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1eea0:	mov	sl, r0
   1eea4:	b	1c564 <_start@@Base+0x9e2c>
   1eea8:	ldr	r1, [sp, #356]	; 0x164
   1eeac:	add	r3, sp, #360	; 0x168
   1eeb0:	ldrd	r2, [r3]
   1eeb4:	cmp	r1, #0
   1eeb8:	beq	1f2d4 <_start@@Base+0xcb9c>
   1eebc:	cmp	r3, #0
   1eec0:	cmpeq	r2, #128	; 0x80
   1eec4:	rsbls	r2, r2, #0
   1eec8:	sxtbls	r2, r2
   1eecc:	strbls	r2, [sp, #352]	; 0x160
   1eed0:	bls	1b9b4 <_start@@Base+0x927c>
   1eed4:	mov	r1, r0
   1eed8:	mov	r3, #8
   1eedc:	mov	r2, r8
   1eee0:	mov	r0, r9
   1eee4:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1eee8:	mov	sl, r0
   1eeec:	cmp	r4, sl
   1eef0:	beq	1b978 <_start@@Base+0x9240>
   1eef4:	add	r3, sp, #352	; 0x160
   1eef8:	ldrsb	r2, [r3]
   1eefc:	b	1b9b4 <_start@@Base+0x927c>
   1ef00:	ldrb	r3, [r1, #1]
   1ef04:	cmp	r3, #32
   1ef08:	addhi	r1, r1, #1
   1ef0c:	bls	1d978 <_start@@Base+0xb240>
   1ef10:	b	1d988 <_start@@Base+0xb250>
   1ef14:	mov	r3, #0
   1ef18:	add	r4, sl, #16
   1ef1c:	mov	r1, r8
   1ef20:	mov	r0, r4
   1ef24:	str	r3, [sp, #280]	; 0x118
   1ef28:	bl	12828 <_start@@Base+0xf0>
   1ef2c:	and	r3, r1, #-16777216	; 0xff000000
   1ef30:	str	r3, [sp, #284]	; 0x11c
   1ef34:	add	r3, sp, #280	; 0x118
   1ef38:	ldrd	r2, [r3]
   1ef3c:	cmp	r3, #1929379840	; 0x73000000
   1ef40:	cmpeq	r2, #0
   1ef44:	bne	1f338 <_start@@Base+0xcc00>
   1ef48:	sub	r3, r8, r4
   1ef4c:	cmp	r3, #1
   1ef50:	ble	1f784 <_start@@Base+0xd04c>
   1ef54:	mov	r3, #1
   1ef58:	mov	r2, r8
   1ef5c:	mov	r1, r4
   1ef60:	mov	r0, r9
   1ef64:	bl	17b2c <_start@@Base+0x53f4>
   1ef68:	cmp	r4, r0
   1ef6c:	mov	sl, r0
   1ef70:	beq	1f780 <_start@@Base+0xd048>
   1ef74:	mov	r2, #8
   1ef78:	mvn	r3, #-536870912	; 0xe0000000
   1ef7c:	ldr	r0, [r9]
   1ef80:	mov	r1, r2
   1ef84:	bl	22f60 <flatcc_builder_start_vector@@Base>
   1ef88:	cmp	r0, #0
   1ef8c:	bne	1ca5c <_start@@Base+0xa324>
   1ef90:	ldr	r4, [sp, #28]
   1ef94:	mov	r1, sl
   1ef98:	mov	r2, r8
   1ef9c:	mov	r0, r9
   1efa0:	mov	r3, r4
   1efa4:	bl	13700 <_start@@Base+0xfc8>
   1efa8:	ldr	r3, [sp, #336]	; 0x150
   1efac:	mov	sl, r0
   1efb0:	cmp	r3, #0
   1efb4:	beq	1fbd4 <_start@@Base+0xd49c>
   1efb8:	ldr	r3, [pc, #-2448]	; 1e630 <_start@@Base+0xbef8>
   1efbc:	strd	r6, [sp, #16]
   1efc0:	vldr	d8, [pc, #984]	; 1f3a0 <_start@@Base+0xcc68>
   1efc4:	add	r3, pc, r3
   1efc8:	add	fp, r3, #636	; 0x27c
   1efcc:	mov	r7, fp
   1efd0:	mov	fp, r4
   1efd4:	b	1f004 <_start@@Base+0xc8cc>
   1efd8:	vldr	d7, [sp, #360]	; 0x168
   1efdc:	mov	r1, r0
   1efe0:	mov	r3, fp
   1efe4:	mov	r2, r8
   1efe8:	mov	r0, r9
   1efec:	vstr	d7, [r5]
   1eff0:	bl	159f0 <_start@@Base+0x32b8>
   1eff4:	ldr	r3, [sp, #336]	; 0x150
   1eff8:	mov	sl, r0
   1effc:	cmp	r3, #0
   1f000:	beq	1fbd0 <_start@@Base+0xd498>
   1f004:	mov	r1, #1
   1f008:	ldr	r0, [r9]
   1f00c:	add	r4, sp, #360	; 0x168
   1f010:	vstr	d8, [sp, #360]	; 0x168
   1f014:	bl	22618 <flatcc_builder_extend_vector@@Base>
   1f018:	subs	r5, r0, #0
   1f01c:	mov	r1, sl
   1f020:	mov	r3, r4
   1f024:	mov	r2, r8
   1f028:	mov	r0, r9
   1f02c:	beq	1ca5c <_start@@Base+0xa324>
   1f030:	bl	28034 <flatcc_json_parser_double@@Base>
   1f034:	cmp	r0, sl
   1f038:	bne	1efd8 <_start@@Base+0xc8a0>
   1f03c:	mov	r3, r7
   1f040:	mov	r2, r8
   1f044:	str	r4, [sp]
   1f048:	mov	r1, sl
   1f04c:	mov	r0, r9
   1f050:	bl	139d8 <_start@@Base+0x12a0>
   1f054:	cmp	r8, r0
   1f058:	cmpne	r0, sl
   1f05c:	bne	1efd8 <_start@@Base+0xc8a0>
   1f060:	b	1cd38 <_start@@Base+0xa600>
   1f064:	mov	r1, sl
   1f068:	mov	r2, r8
   1f06c:	mov	r0, r9
   1f070:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1f074:	mov	sl, r0
   1f078:	b	1c08c <_start@@Base+0x9954>
   1f07c:	ldrb	r3, [r1, #1]
   1f080:	cmp	r3, #32
   1f084:	addhi	r1, r1, #1
   1f088:	bls	1d55c <_start@@Base+0xae24>
   1f08c:	b	1d56c <_start@@Base+0xae34>
   1f090:	ldr	r0, [r9]
   1f094:	bl	23f4c <flatcc_builder_end_vector@@Base>
   1f098:	cmp	r0, #0
   1f09c:	str	r0, [sp, #340]	; 0x154
   1f0a0:	beq	1ca5c <_start@@Base+0xa324>
   1f0a4:	mov	r1, #31
   1f0a8:	ldr	r0, [r9]
   1f0ac:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   1f0b0:	cmp	r0, #0
   1f0b4:	beq	1ca5c <_start@@Base+0xa324>
   1f0b8:	ldr	r3, [sp, #340]	; 0x154
   1f0bc:	str	r3, [r0]
   1f0c0:	b	1c08c <_start@@Base+0x9954>
   1f0c4:	mov	fp, r8
   1f0c8:	b	1c48c <_start@@Base+0x9d54>
   1f0cc:	ldrd	r6, [sp, #16]
   1f0d0:	mov	r0, sl
   1f0d4:	mov	sl, r0
   1f0d8:	mov	r1, sl
   1f0dc:	mov	r3, #33	; 0x21
   1f0e0:	mov	r2, r8
   1f0e4:	mov	r0, r9
   1f0e8:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1f0ec:	ldr	r3, [sp, #340]	; 0x154
   1f0f0:	mov	sl, r0
   1f0f4:	cmp	r3, #0
   1f0f8:	beq	1ca5c <_start@@Base+0xa324>
   1f0fc:	mov	r1, #14
   1f100:	ldr	r0, [r9]
   1f104:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   1f108:	cmp	r0, #0
   1f10c:	beq	1ca5c <_start@@Base+0xa324>
   1f110:	ldr	r3, [sp, #340]	; 0x154
   1f114:	str	r3, [r0]
   1f118:	b	1c08c <_start@@Base+0x9954>
   1f11c:	ldrd	r6, [sp, #64]	; 0x40
   1f120:	ldr	r0, [r9]
   1f124:	bl	23f4c <flatcc_builder_end_vector@@Base>
   1f128:	cmp	r0, #0
   1f12c:	str	r0, [sp, #340]	; 0x154
   1f130:	beq	1ca5c <_start@@Base+0xa324>
   1f134:	mov	r1, #30
   1f138:	ldr	r0, [r9]
   1f13c:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   1f140:	cmp	r0, #0
   1f144:	beq	1ca5c <_start@@Base+0xa324>
   1f148:	ldr	r3, [sp, #340]	; 0x154
   1f14c:	str	r3, [r0]
   1f150:	b	1c08c <_start@@Base+0x9954>
   1f154:	ldr	r3, [sp, #356]	; 0x164
   1f158:	cmp	r3, #0
   1f15c:	bne	1fa24 <_start@@Base+0xd2ec>
   1f160:	add	r3, sp, #360	; 0x168
   1f164:	mov	r1, #0
   1f168:	ldrd	r2, [r3]
   1f16c:	movw	r0, #65535	; 0xffff
   1f170:	cmp	r3, r1
   1f174:	cmpeq	r2, r0
   1f178:	bhi	1fadc <_start@@Base+0xd3a4>
   1f17c:	add	r3, sp, #332	; 0x14c
   1f180:	uxth	r2, r2
   1f184:	add	r3, r3, #2
   1f188:	mov	sl, fp
   1f18c:	strh	r2, [r3]
   1f190:	b	1c4d0 <_start@@Base+0x9d98>
   1f194:	mov	r1, sl
   1f198:	mov	r2, r8
   1f19c:	mov	r0, r9
   1f1a0:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1f1a4:	mov	sl, r0
   1f1a8:	b	1c08c <_start@@Base+0x9954>
   1f1ac:	ldrb	r3, [r1, #1]
   1f1b0:	cmp	r3, #32
   1f1b4:	addhi	r1, r1, #1
   1f1b8:	bls	1d394 <_start@@Base+0xac5c>
   1f1bc:	b	1d3a4 <_start@@Base+0xac6c>
   1f1c0:	ldrb	r3, [r1, #1]
   1f1c4:	cmp	r3, #32
   1f1c8:	addhi	r1, r1, #1
   1f1cc:	bls	1dab8 <_start@@Base+0xb380>
   1f1d0:	b	1dac8 <_start@@Base+0xb390>
   1f1d4:	mov	r1, r4
   1f1d8:	mov	r2, r8
   1f1dc:	mov	r0, r9
   1f1e0:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1f1e4:	mov	sl, r0
   1f1e8:	b	1c08c <_start@@Base+0x9954>
   1f1ec:	mov	r4, r0
   1f1f0:	mov	r1, r4
   1f1f4:	mov	r2, r8
   1f1f8:	mov	r0, r9
   1f1fc:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1f200:	mov	sl, r0
   1f204:	b	1c08c <_start@@Base+0x9954>
   1f208:	ldrd	r6, [sp, #16]
   1f20c:	ldr	r0, [r9]
   1f210:	bl	23f4c <flatcc_builder_end_vector@@Base>
   1f214:	cmp	r0, #0
   1f218:	str	r0, [sp, #340]	; 0x154
   1f21c:	beq	1ca5c <_start@@Base+0xa324>
   1f220:	mov	r1, #24
   1f224:	ldr	r0, [r9]
   1f228:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   1f22c:	cmp	r0, #0
   1f230:	beq	1ca5c <_start@@Base+0xa324>
   1f234:	ldr	r3, [sp, #340]	; 0x154
   1f238:	str	r3, [r0]
   1f23c:	b	1c08c <_start@@Base+0x9954>
   1f240:	add	r3, r1, #1
   1f244:	str	r3, [sp, #64]	; 0x40
   1f248:	sub	r3, r8, r3
   1f24c:	cmp	r3, #1
   1f250:	ble	1f264 <_start@@Base+0xcb2c>
   1f254:	ldrb	r3, [r1, #1]
   1f258:	cmp	r3, #32
   1f25c:	bhi	1d9b0 <_start@@Base+0xb278>
   1f260:	beq	1fc20 <_start@@Base+0xd4e8>
   1f264:	mov	r2, r8
   1f268:	mov	r0, r9
   1f26c:	ldr	r1, [sp, #64]	; 0x40
   1f270:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   1f274:	str	r0, [sp, #64]	; 0x40
   1f278:	b	1d9b0 <_start@@Base+0xb278>
   1f27c:	add	r3, r1, #1
   1f280:	str	r3, [sp, #64]	; 0x40
   1f284:	sub	r3, r8, r3
   1f288:	cmp	r3, #1
   1f28c:	ble	1f2a0 <_start@@Base+0xcb68>
   1f290:	ldrb	r3, [r1, #1]
   1f294:	cmp	r3, #32
   1f298:	bhi	1d594 <_start@@Base+0xae5c>
   1f29c:	beq	1fc08 <_start@@Base+0xd4d0>
   1f2a0:	mov	r2, r8
   1f2a4:	mov	r0, r9
   1f2a8:	ldr	r1, [sp, #64]	; 0x40
   1f2ac:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   1f2b0:	str	r0, [sp, #64]	; 0x40
   1f2b4:	b	1d594 <_start@@Base+0xae5c>
   1f2b8:	mov	r4, r0
   1f2bc:	mov	r1, r4
   1f2c0:	mov	r2, r8
   1f2c4:	mov	r0, r9
   1f2c8:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1f2cc:	mov	sl, r0
   1f2d0:	b	1c08c <_start@@Base+0x9954>
   1f2d4:	cmp	r3, #0
   1f2d8:	cmpeq	r2, #127	; 0x7f
   1f2dc:	sxtbls	r2, r2
   1f2e0:	strbls	r2, [sp, #352]	; 0x160
   1f2e4:	bls	1b9b4 <_start@@Base+0x927c>
   1f2e8:	mov	r1, r0
   1f2ec:	mov	r3, #7
   1f2f0:	mov	r2, r8
   1f2f4:	mov	r0, r9
   1f2f8:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1f2fc:	mov	sl, r0
   1f300:	b	1eeec <_start@@Base+0xc7b4>
   1f304:	ldr	r3, [pc, #156]	; 1f3a8 <_start@@Base+0xcc70>
   1f308:	mov	r1, r0
   1f30c:	mov	r2, r8
   1f310:	mov	r0, r9
   1f314:	str	fp, [sp]
   1f318:	add	r3, pc, r3
   1f31c:	add	r3, r3, #380	; 0x17c
   1f320:	bl	137d4 <_start@@Base+0x109c>
   1f324:	cmp	r8, r0
   1f328:	cmpne	sl, r0
   1f32c:	beq	1faf8 <_start@@Base+0xd3c0>
   1f330:	mov	sl, r0
   1f334:	b	1ddfc <_start@@Base+0xb6c4>
   1f338:	mov	r1, r4
   1f33c:	mov	r2, r8
   1f340:	mov	r0, r9
   1f344:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1f348:	mov	sl, r0
   1f34c:	b	1c08c <_start@@Base+0x9954>
   1f350:	mov	r1, sl
   1f354:	mov	r2, r8
   1f358:	mov	r0, r9
   1f35c:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1f360:	mov	sl, r0
   1f364:	b	1c08c <_start@@Base+0x9954>
   1f368:	ldr	r3, [pc, #60]	; 1f3ac <_start@@Base+0xcc74>
   1f36c:	mov	r1, r0
   1f370:	mov	r2, r8
   1f374:	mov	r0, r9
   1f378:	str	r5, [sp]
   1f37c:	add	r3, pc, r3
   1f380:	add	r3, r3, #504	; 0x1f8
   1f384:	bl	137d4 <_start@@Base+0x109c>
   1f388:	cmp	r8, r0
   1f38c:	cmpne	sl, r0
   1f390:	beq	1cd38 <_start@@Base+0xa600>
   1f394:	mov	sl, r0
   1f398:	b	1cdd4 <_start@@Base+0xa69c>
   1f39c:	nop	{0}
	...
   1f3a8:	andeq	sp, r1, r0, ror sp
   1f3ac:	andeq	sp, r1, ip, lsl #26
   1f3b0:	muleq	r1, r4, ip
   1f3b4:	ldrdeq	sp, [r1], -r8
   1f3b8:	muleq	r1, ip, r6
   1f3bc:	strdeq	sp, [r1], -r0
   1f3c0:	andeq	sp, r1, r0, lsl r4
   1f3c4:	muleq	r1, r8, r3
   1f3c8:	andeq	sp, r1, ip, lsr #6
   1f3cc:	andeq	sp, r1, r4, asr #4
   1f3d0:	strdeq	sp, [r1], -r0
   1f3d4:			; <UNDEFINED> instruction: 0x0001d1bc
   1f3d8:	andeq	sp, r1, r4, ror r1
   1f3dc:	andeq	sp, r1, r0, asr #2
   1f3e0:	ldr	r3, [pc, #-56]	; 1f3b0 <_start@@Base+0xcc78>
   1f3e4:	mov	r1, r0
   1f3e8:	mov	r2, r8
   1f3ec:	mov	r0, r9
   1f3f0:	str	fp, [sp]
   1f3f4:	add	r3, pc, r3
   1f3f8:	add	r3, r3, #392	; 0x188
   1f3fc:	bl	137d4 <_start@@Base+0x109c>
   1f400:	cmp	r8, r0
   1f404:	cmpne	sl, r0
   1f408:	beq	1faf8 <_start@@Base+0xd3c0>
   1f40c:	mov	sl, r0
   1f410:	b	1dc58 <_start@@Base+0xb520>
   1f414:	mov	r3, #29
   1f418:	mov	r2, r9
   1f41c:	mov	r0, fp
   1f420:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1f424:	mov	sl, r0
   1f428:	b	1b7ac <_start@@Base+0x9074>
   1f42c:	ldrb	r1, [r0, #1]
   1f430:	add	r2, r0, #1
   1f434:	cmp	r1, #114	; 0x72
   1f438:	bne	1bab0 <_start@@Base+0x9378>
   1f43c:	ldrb	r1, [r2, #1]!
   1f440:	cmp	r1, #117	; 0x75
   1f444:	bne	1bab0 <_start@@Base+0x9378>
   1f448:	ldrb	r2, [r2, #1]
   1f44c:	cmp	r2, #101	; 0x65
   1f450:	moveq	r3, #1
   1f454:	addeq	sl, r0, #4
   1f458:	strbeq	r3, [sp, #352]	; 0x160
   1f45c:	bne	1bab0 <_start@@Base+0x9378>
   1f460:	b	1d8e4 <_start@@Base+0xb1ac>
   1f464:	ldr	r3, [sp, #356]	; 0x164
   1f468:	cmp	r3, #0
   1f46c:	str	r3, [sp, #16]
   1f470:	bne	1fc38 <_start@@Base+0xd500>
   1f474:	add	r3, sp, #360	; 0x168
   1f478:	ldrd	r2, [r3]
   1f47c:	cmp	r3, #0
   1f480:	cmpeq	r2, #255	; 0xff
   1f484:	bhi	1fc98 <_start@@Base+0xd560>
   1f488:	uxtb	r3, r2
   1f48c:	mov	sl, r0
   1f490:	adds	r3, r3, #0
   1f494:	movne	r3, #1
   1f498:	strb	r3, [sp, #352]	; 0x160
   1f49c:	b	1d8dc <_start@@Base+0xb1a4>
   1f4a0:	add	r1, r1, #1
   1f4a4:	mov	r2, r8
   1f4a8:	mov	r0, r9
   1f4ac:	bl	13118 <_start@@Base+0x9e0>
   1f4b0:	str	r0, [sp, #64]	; 0x40
   1f4b4:	b	1daf0 <_start@@Base+0xb3b8>
   1f4b8:	add	r1, r1, #1
   1f4bc:	mov	r2, r8
   1f4c0:	mov	r0, r9
   1f4c4:	bl	13118 <_start@@Base+0x9e0>
   1f4c8:	mov	r1, r0
   1f4cc:	b	1d3cc <_start@@Base+0xac94>
   1f4d0:	mov	r4, r0
   1f4d4:	mov	r1, r4
   1f4d8:	mov	r2, r8
   1f4dc:	mov	r0, r9
   1f4e0:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1f4e4:	mov	sl, r0
   1f4e8:	b	1c08c <_start@@Base+0x9954>
   1f4ec:	ldrd	r6, [sp, #64]	; 0x40
   1f4f0:	ldr	r3, [r9, #24]
   1f4f4:	cmp	r3, #0
   1f4f8:	bne	1e0c0 <_start@@Base+0xb988>
   1f4fc:	ldr	r0, [r9]
   1f500:	bl	23bf4 <flatcc_builder_end_table@@Base>
   1f504:	cmp	r0, #0
   1f508:	str	r0, [sp, #340]	; 0x154
   1f50c:	bne	1e0e4 <_start@@Base+0xb9ac>
   1f510:	b	1e0c0 <_start@@Base+0xb988>
   1f514:	mov	r4, r0
   1f518:	mov	r1, r4
   1f51c:	mov	r2, r8
   1f520:	mov	r0, r9
   1f524:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1f528:	mov	sl, r0
   1f52c:	b	1c08c <_start@@Base+0x9954>
   1f530:	mov	r4, r0
   1f534:	mov	r1, r4
   1f538:	mov	r2, r8
   1f53c:	mov	r0, r9
   1f540:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1f544:	mov	sl, r0
   1f548:	b	1c08c <_start@@Base+0x9954>
   1f54c:	mov	r3, #0
   1f550:	add	sl, sl, #8
   1f554:	mov	r1, r8
   1f558:	mov	r0, sl
   1f55c:	str	r3, [sp, #296]	; 0x128
   1f560:	bl	12828 <_start@@Base+0xf0>
   1f564:	and	r3, r1, #-16777216	; 0xff000000
   1f568:	str	r3, [sp, #300]	; 0x12c
   1f56c:	add	r3, sp, #296	; 0x128
   1f570:	ldrd	r2, [r3]
   1f574:	cmp	r3, #1627389952	; 0x61000000
   1f578:	cmpeq	r2, #0
   1f57c:	bne	1fa0c <_start@@Base+0xd2d4>
   1f580:	sub	r3, r8, sl
   1f584:	cmp	r3, #1
   1f588:	ble	1fcc4 <_start@@Base+0xd58c>
   1f58c:	mov	r3, #1
   1f590:	mov	r2, r8
   1f594:	mov	r1, sl
   1f598:	mov	r0, r9
   1f59c:	bl	17b2c <_start@@Base+0x53f4>
   1f5a0:	cmp	sl, r0
   1f5a4:	mov	r4, r0
   1f5a8:	beq	1fcc4 <_start@@Base+0xd58c>
   1f5ac:	mov	sl, #0
   1f5b0:	add	r5, sp, #360	; 0x168
   1f5b4:	mov	fp, #0
   1f5b8:	mov	r1, r0
   1f5bc:	mov	r3, r5
   1f5c0:	mov	r2, r8
   1f5c4:	mov	r0, r9
   1f5c8:	strd	sl, [r5]
   1f5cc:	bl	13154 <_start@@Base+0xa1c>
   1f5d0:	cmp	r0, r4
   1f5d4:	mov	sl, r0
   1f5d8:	beq	1feb8 <_start@@Base+0xd780>
   1f5dc:	add	r3, sp, #360	; 0x168
   1f5e0:	ldrd	r2, [r3]
   1f5e4:	orrs	r3, r2, r3
   1f5e8:	bne	1f5f8 <_start@@Base+0xcec0>
   1f5ec:	ldr	r3, [r9, #8]
   1f5f0:	tst	r3, #2
   1f5f4:	beq	1c08c <_start@@Base+0x9954>
   1f5f8:	mov	r3, #8
   1f5fc:	mov	r1, #22
   1f600:	ldr	r0, [r9]
   1f604:	mov	r2, r3
   1f608:	bl	24d44 <flatcc_builder_table_add@@Base>
   1f60c:	cmp	r0, #0
   1f610:	beq	1fe64 <_start@@Base+0xd72c>
   1f614:	add	r3, sp, #360	; 0x168
   1f618:	ldrd	r2, [r3]
   1f61c:	strd	r2, [r0]
   1f620:	b	1c08c <_start@@Base+0x9954>
   1f624:	ldrd	r6, [sp, #16]
   1f628:	ldr	r3, [r9, #24]
   1f62c:	cmp	r3, #0
   1f630:	bne	1f0d8 <_start@@Base+0xc9a0>
   1f634:	ldr	r0, [r9]
   1f638:	bl	23bf4 <flatcc_builder_end_table@@Base>
   1f63c:	cmp	r0, #0
   1f640:	str	r0, [sp, #340]	; 0x154
   1f644:	bne	1f0fc <_start@@Base+0xc9c4>
   1f648:	b	1f0d8 <_start@@Base+0xc9a0>
   1f64c:	mov	r1, r0
   1f650:	mov	r2, r8
   1f654:	str	fp, [sp]
   1f658:	mov	r0, r9
   1f65c:	ldr	r3, [sp, #64]	; 0x40
   1f660:	bl	14e98 <_start@@Base+0x2760>
   1f664:	cmp	r8, r0
   1f668:	cmpne	sl, r0
   1f66c:	beq	1ff7c <_start@@Base+0xd844>
   1f670:	mov	sl, r0
   1f674:	b	1ed38 <_start@@Base+0xc600>
   1f678:	mov	sl, r4
   1f67c:	b	1caec <_start@@Base+0xa3b4>
   1f680:	mov	r1, sl
   1f684:	mov	r2, r8
   1f688:	mov	r0, r9
   1f68c:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1f690:	mov	sl, r0
   1f694:	b	1c08c <_start@@Base+0x9954>
   1f698:	ldr	r0, [r9]
   1f69c:	bl	22ff0 <flatcc_builder_start_offset_vector@@Base>
   1f6a0:	cmp	r0, #0
   1f6a4:	bne	1ca5c <_start@@Base+0xa324>
   1f6a8:	ldr	r5, [sp, #28]
   1f6ac:	mov	r1, sl
   1f6b0:	mov	r2, r8
   1f6b4:	mov	r0, r9
   1f6b8:	mov	r3, r5
   1f6bc:	bl	13700 <_start@@Base+0xfc8>
   1f6c0:	ldr	r3, [sp, #336]	; 0x150
   1f6c4:	mov	sl, r0
   1f6c8:	cmp	r3, #0
   1f6cc:	beq	1f738 <_start@@Base+0xd000>
   1f6d0:	add	r4, sp, #340	; 0x154
   1f6d4:	mov	r1, sl
   1f6d8:	mov	r3, r4
   1f6dc:	mov	r2, r8
   1f6e0:	mov	r0, r9
   1f6e4:	bl	1b760 <_start@@Base+0x9028>
   1f6e8:	ldr	r3, [sp, #340]	; 0x154
   1f6ec:	mov	sl, r0
   1f6f0:	mov	r1, #1
   1f6f4:	cmp	r3, #0
   1f6f8:	beq	1ca5c <_start@@Base+0xa324>
   1f6fc:	ldr	r0, [r9]
   1f700:	bl	228b4 <flatcc_builder_extend_offset_vector@@Base>
   1f704:	subs	ip, r0, #0
   1f708:	mov	r3, r5
   1f70c:	mov	r2, r8
   1f710:	mov	r1, sl
   1f714:	mov	r0, r9
   1f718:	beq	1ca5c <_start@@Base+0xa324>
   1f71c:	ldr	lr, [sp, #340]	; 0x154
   1f720:	str	lr, [ip]
   1f724:	bl	159f0 <_start@@Base+0x32b8>
   1f728:	ldr	r3, [sp, #336]	; 0x150
   1f72c:	mov	sl, r0
   1f730:	cmp	r3, #0
   1f734:	bne	1f6d4 <_start@@Base+0xcf9c>
   1f738:	ldr	r0, [r9]
   1f73c:	bl	24078 <flatcc_builder_end_offset_vector@@Base>
   1f740:	cmp	r0, #0
   1f744:	str	r0, [sp, #340]	; 0x154
   1f748:	beq	1ca5c <_start@@Base+0xa324>
   1f74c:	mov	r1, #11
   1f750:	ldr	r0, [r9]
   1f754:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   1f758:	cmp	r0, #0
   1f75c:	beq	1ca5c <_start@@Base+0xa324>
   1f760:	ldr	r3, [sp, #340]	; 0x154
   1f764:	str	r3, [r0]
   1f768:	b	1c08c <_start@@Base+0x9954>
   1f76c:	ldrb	r3, [fp, #2]
   1f770:	cmp	r3, #32
   1f774:	bls	1e428 <_start@@Base+0xbcf0>
   1f778:	add	sl, fp, #2
   1f77c:	b	1c08c <_start@@Base+0x9954>
   1f780:	mov	r4, r0
   1f784:	mov	r1, r4
   1f788:	mov	r2, r8
   1f78c:	mov	r0, r9
   1f790:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1f794:	mov	sl, r0
   1f798:	b	1c08c <_start@@Base+0x9954>
   1f79c:	ldr	r3, [pc, #-1008]	; 1f3b4 <_start@@Base+0xcc7c>
   1f7a0:	mov	r1, r0
   1f7a4:	mov	r2, r8
   1f7a8:	mov	r0, r9
   1f7ac:	str	r5, [sp]
   1f7b0:	add	r3, pc, r3
   1f7b4:	add	r3, r3, #492	; 0x1ec
   1f7b8:	bl	137d4 <_start@@Base+0x109c>
   1f7bc:	cmp	r8, r0
   1f7c0:	cmpne	sl, r0
   1f7c4:	beq	1ff68 <_start@@Base+0xd830>
   1f7c8:	mov	sl, r0
   1f7cc:	b	1d80c <_start@@Base+0xb0d4>
   1f7d0:	mov	sl, r0
   1f7d4:	mov	r3, #0
   1f7d8:	add	sl, sl, #8
   1f7dc:	mov	r1, r8
   1f7e0:	mov	r0, sl
   1f7e4:	str	r3, [sp, #320]	; 0x140
   1f7e8:	bl	12828 <_start@@Base+0xf0>
   1f7ec:	and	r3, r1, #-16777216	; 0xff000000
   1f7f0:	str	r3, [sp, #324]	; 0x144
   1f7f4:	add	r3, sp, #320	; 0x140
   1f7f8:	ldrd	r2, [r3]
   1f7fc:	cmp	r3, #1627389952	; 0x61000000
   1f800:	cmpeq	r2, #0
   1f804:	bne	1fb20 <_start@@Base+0xd3e8>
   1f808:	sub	r3, r8, sl
   1f80c:	cmp	r3, #1
   1f810:	ble	1fe00 <_start@@Base+0xd6c8>
   1f814:	mov	r3, #1
   1f818:	mov	r2, r8
   1f81c:	mov	r1, sl
   1f820:	mov	r0, r9
   1f824:	bl	17b2c <_start@@Base+0x53f4>
   1f828:	cmp	sl, r0
   1f82c:	mov	r4, r0
   1f830:	beq	1fe00 <_start@@Base+0xd6c8>
   1f834:	mov	sl, #0
   1f838:	add	r5, sp, #360	; 0x168
   1f83c:	mov	fp, #0
   1f840:	mov	r1, r0
   1f844:	mov	r3, r5
   1f848:	mov	r2, r8
   1f84c:	mov	r0, r9
   1f850:	strd	sl, [r5]
   1f854:	bl	13230 <_start@@Base+0xaf8>
   1f858:	cmp	r0, r4
   1f85c:	mov	sl, r0
   1f860:	beq	1ff00 <_start@@Base+0xd7c8>
   1f864:	add	r3, sp, #360	; 0x168
   1f868:	ldrd	r2, [r3]
   1f86c:	orrs	r3, r2, r3
   1f870:	bne	1f880 <_start@@Base+0xd148>
   1f874:	ldr	r3, [r9, #8]
   1f878:	tst	r3, #2
   1f87c:	beq	1c08c <_start@@Base+0x9954>
   1f880:	mov	r3, #8
   1f884:	mov	r1, #23
   1f888:	ldr	r0, [r9]
   1f88c:	mov	r2, r3
   1f890:	bl	24d44 <flatcc_builder_table_add@@Base>
   1f894:	cmp	r0, #0
   1f898:	beq	1fe64 <_start@@Base+0xd72c>
   1f89c:	add	r3, sp, #360	; 0x168
   1f8a0:	ldrd	r2, [r3]
   1f8a4:	strd	r2, [r0]
   1f8a8:	b	1c08c <_start@@Base+0x9954>
   1f8ac:	add	sl, sl, #8
   1f8b0:	mov	r1, r8
   1f8b4:	mov	r0, sl
   1f8b8:	mov	fp, #0
   1f8bc:	bl	12828 <_start@@Base+0xf0>
   1f8c0:	and	r3, r1, #-16777216	; 0xff000000
   1f8c4:	str	fp, [sp, #312]	; 0x138
   1f8c8:	str	r3, [sp, #316]	; 0x13c
   1f8cc:	add	r3, sp, #312	; 0x138
   1f8d0:	ldrd	r2, [r3]
   1f8d4:	cmp	r3, #1627389952	; 0x61000000
   1f8d8:	cmpeq	r2, #0
   1f8dc:	bne	1fb84 <_start@@Base+0xd44c>
   1f8e0:	sub	r3, r8, sl
   1f8e4:	cmp	r3, #1
   1f8e8:	ble	1fe18 <_start@@Base+0xd6e0>
   1f8ec:	mov	r3, #1
   1f8f0:	mov	r2, r8
   1f8f4:	mov	r1, sl
   1f8f8:	mov	r0, r9
   1f8fc:	bl	17b2c <_start@@Base+0x53f4>
   1f900:	cmp	sl, r0
   1f904:	mov	r4, r0
   1f908:	beq	1fe18 <_start@@Base+0xd6e0>
   1f90c:	add	r5, sp, #360	; 0x168
   1f910:	mov	r1, r0
   1f914:	str	fp, [sp, #360]	; 0x168
   1f918:	mov	r2, r8
   1f91c:	mov	r3, r5
   1f920:	mov	r0, r9
   1f924:	bl	13394 <_start@@Base+0xc5c>
   1f928:	cmp	r0, r4
   1f92c:	mov	sl, r0
   1f930:	beq	1ff34 <_start@@Base+0xd7fc>
   1f934:	ldr	r3, [sp, #360]	; 0x168
   1f938:	cmp	r3, #0
   1f93c:	bne	1f94c <_start@@Base+0xd214>
   1f940:	ldr	r3, [r9, #8]
   1f944:	tst	r3, #2
   1f948:	beq	1c08c <_start@@Base+0x9954>
   1f94c:	mov	r3, #4
   1f950:	mov	r1, #21
   1f954:	ldr	r0, [r9]
   1f958:	mov	r2, r3
   1f95c:	bl	24d44 <flatcc_builder_table_add@@Base>
   1f960:	cmp	r0, #0
   1f964:	beq	1fe64 <_start@@Base+0xd72c>
   1f968:	ldr	r3, [sp, #360]	; 0x168
   1f96c:	str	r3, [r0]
   1f970:	b	1c08c <_start@@Base+0x9954>
   1f974:	mov	r1, sl
   1f978:	mov	r2, r8
   1f97c:	mov	r0, r9
   1f980:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1f984:	mov	sl, r0
   1f988:	b	1c08c <_start@@Base+0x9954>
   1f98c:	mov	fp, r9
   1f990:	mov	sl, r4
   1f994:	mov	r9, r8
   1f998:	b	1b7ac <_start@@Base+0x9074>
   1f99c:	ldrd	r6, [sp, #16]
   1f9a0:	mov	sl, r0
   1f9a4:	ldr	r0, [r9]
   1f9a8:	bl	23f4c <flatcc_builder_end_vector@@Base>
   1f9ac:	cmp	r0, #0
   1f9b0:	str	r0, [sp, #340]	; 0x154
   1f9b4:	beq	1ca5c <_start@@Base+0xa324>
   1f9b8:	mov	r1, #32
   1f9bc:	ldr	r0, [r9]
   1f9c0:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   1f9c4:	cmp	r0, #0
   1f9c8:	beq	1ca5c <_start@@Base+0xa324>
   1f9cc:	ldr	r3, [sp, #340]	; 0x154
   1f9d0:	str	r3, [r0]
   1f9d4:	b	1c08c <_start@@Base+0x9954>
   1f9d8:	ldr	r3, [pc, #-1576]	; 1f3b8 <_start@@Base+0xcc80>
   1f9dc:	mov	r1, r0
   1f9e0:	mov	r2, r8
   1f9e4:	mov	r0, r9
   1f9e8:	str	r5, [sp]
   1f9ec:	add	r3, pc, r3
   1f9f0:	add	r3, r3, #328	; 0x148
   1f9f4:	bl	142a8 <_start@@Base+0x1b70>
   1f9f8:	cmp	r8, r0
   1f9fc:	cmpne	sl, r0
   1fa00:	beq	1cd38 <_start@@Base+0xa600>
   1fa04:	mov	sl, r0
   1fa08:	b	1ceb0 <_start@@Base+0xa778>
   1fa0c:	mov	r1, sl
   1fa10:	mov	r2, r8
   1fa14:	mov	r0, r9
   1fa18:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1fa1c:	mov	sl, r0
   1fa20:	b	1c08c <_start@@Base+0x9954>
   1fa24:	mov	r1, r0
   1fa28:	mov	r3, #8
   1fa2c:	mov	r2, r8
   1fa30:	mov	r0, r9
   1fa34:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1fa38:	mov	sl, r0
   1fa3c:	cmp	r4, sl
   1fa40:	bne	1c4c4 <_start@@Base+0x9d8c>
   1fa44:	mov	fp, r4
   1fa48:	b	1c48c <_start@@Base+0x9d54>
   1fa4c:	ldrd	r6, [sp, #64]	; 0x40
   1fa50:	ldr	r0, [r9]
   1fa54:	bl	23f4c <flatcc_builder_end_vector@@Base>
   1fa58:	cmp	r0, #0
   1fa5c:	str	r0, [sp, #340]	; 0x154
   1fa60:	beq	1ca5c <_start@@Base+0xa324>
   1fa64:	mov	r1, #5
   1fa68:	ldr	r0, [r9]
   1fa6c:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   1fa70:	cmp	r0, #0
   1fa74:	beq	1ca5c <_start@@Base+0xa324>
   1fa78:	ldr	r3, [sp, #340]	; 0x154
   1fa7c:	str	r3, [r0]
   1fa80:	b	1c08c <_start@@Base+0x9954>
   1fa84:	ldr	r3, [pc, #-1744]	; 1f3bc <_start@@Base+0xcc84>
   1fa88:	mov	r1, r0
   1fa8c:	mov	r2, r8
   1fa90:	mov	r0, r9
   1fa94:	str	r5, [sp]
   1fa98:	add	r3, pc, r3
   1fa9c:	add	r3, r3, #528	; 0x210
   1faa0:	bl	14520 <_start@@Base+0x1de8>
   1faa4:	cmp	r8, r0
   1faa8:	cmpne	sl, r0
   1faac:	beq	1ff68 <_start@@Base+0xd830>
   1fab0:	mov	sl, r0
   1fab4:	b	1c964 <_start@@Base+0xa22c>
   1fab8:	mov	r4, r0
   1fabc:	mov	r1, r4
   1fac0:	mov	r2, r8
   1fac4:	mov	r0, r9
   1fac8:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1facc:	mov	sl, r0
   1fad0:	b	1c08c <_start@@Base+0x9954>
   1fad4:	ldrd	r6, [sp, #16]
   1fad8:	b	1f0d8 <_start@@Base+0xc9a0>
   1fadc:	mov	r1, fp
   1fae0:	mov	r3, #7
   1fae4:	mov	r2, r8
   1fae8:	mov	r0, r9
   1faec:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1faf0:	mov	sl, r0
   1faf4:	b	1fa3c <_start@@Base+0xd304>
   1faf8:	mov	r1, r0
   1fafc:	mov	r3, #33	; 0x21
   1fb00:	mov	r2, r8
   1fb04:	mov	r0, r9
   1fb08:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1fb0c:	mov	sl, r0
   1fb10:	b	1c08c <_start@@Base+0x9954>
   1fb14:	mov	fp, r9
   1fb18:	mov	r9, r8
   1fb1c:	b	1c108 <_start@@Base+0x99d0>
   1fb20:	mov	r1, sl
   1fb24:	mov	r2, r8
   1fb28:	mov	r0, r9
   1fb2c:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1fb30:	mov	sl, r0
   1fb34:	b	1c08c <_start@@Base+0x9954>
   1fb38:	mov	r1, sl
   1fb3c:	mov	r2, r8
   1fb40:	mov	r0, r9
   1fb44:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1fb48:	mov	sl, r0
   1fb4c:	b	1c08c <_start@@Base+0x9954>
   1fb50:	ldr	r0, [r9]
   1fb54:	bl	24078 <flatcc_builder_end_offset_vector@@Base>
   1fb58:	cmp	r0, #0
   1fb5c:	str	r0, [sp, #340]	; 0x154
   1fb60:	beq	1ca5c <_start@@Base+0xa324>
   1fb64:	mov	r1, #28
   1fb68:	ldr	r0, [r9]
   1fb6c:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   1fb70:	cmp	r0, #0
   1fb74:	beq	1ca5c <_start@@Base+0xa324>
   1fb78:	ldr	r3, [sp, #340]	; 0x154
   1fb7c:	str	r3, [r0]
   1fb80:	b	1c08c <_start@@Base+0x9954>
   1fb84:	mov	r1, sl
   1fb88:	mov	r2, r8
   1fb8c:	mov	r0, r9
   1fb90:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1fb94:	mov	sl, r0
   1fb98:	b	1c08c <_start@@Base+0x9954>
   1fb9c:	ldr	r0, [r9]
   1fba0:	bl	24078 <flatcc_builder_end_offset_vector@@Base>
   1fba4:	cmp	r0, #0
   1fba8:	str	r0, [sp, #340]	; 0x154
   1fbac:	beq	1ca5c <_start@@Base+0xa324>
   1fbb0:	mov	r1, #10
   1fbb4:	ldr	r0, [r9]
   1fbb8:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   1fbbc:	cmp	r0, #0
   1fbc0:	beq	1ca5c <_start@@Base+0xa324>
   1fbc4:	ldr	r3, [sp, #340]	; 0x154
   1fbc8:	str	r3, [r0]
   1fbcc:	b	1c08c <_start@@Base+0x9954>
   1fbd0:	ldrd	r6, [sp, #16]
   1fbd4:	ldr	r0, [r9]
   1fbd8:	bl	23f4c <flatcc_builder_end_vector@@Base>
   1fbdc:	cmp	r0, #0
   1fbe0:	str	r0, [sp, #340]	; 0x154
   1fbe4:	beq	1ca5c <_start@@Base+0xa324>
   1fbe8:	mov	r1, #33	; 0x21
   1fbec:	ldr	r0, [r9]
   1fbf0:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   1fbf4:	cmp	r0, #0
   1fbf8:	beq	1ca5c <_start@@Base+0xa324>
   1fbfc:	ldr	r3, [sp, #340]	; 0x154
   1fc00:	str	r3, [r0]
   1fc04:	b	1c08c <_start@@Base+0x9954>
   1fc08:	ldrb	r3, [r1, #2]
   1fc0c:	cmp	r3, #32
   1fc10:	addhi	r3, r1, #2
   1fc14:	strhi	r3, [sp, #64]	; 0x40
   1fc18:	bls	1f2a0 <_start@@Base+0xcb68>
   1fc1c:	b	1d594 <_start@@Base+0xae5c>
   1fc20:	ldrb	r3, [r1, #2]
   1fc24:	cmp	r3, #32
   1fc28:	addhi	r3, r1, #2
   1fc2c:	strhi	r3, [sp, #64]	; 0x40
   1fc30:	bls	1f264 <_start@@Base+0xcb2c>
   1fc34:	b	1d9b0 <_start@@Base+0xb278>
   1fc38:	mov	r1, r0
   1fc3c:	mov	r3, #8
   1fc40:	mov	r2, r8
   1fc44:	mov	r0, r9
   1fc48:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1fc4c:	cmp	r4, r0
   1fc50:	mov	sl, r0
   1fc54:	strb	fp, [sp, #352]	; 0x160
   1fc58:	bne	1bad8 <_start@@Base+0x93a0>
   1fc5c:	mov	r5, r4
   1fc60:	b	1d8a4 <_start@@Base+0xb16c>
   1fc64:	ldr	r3, [pc, #-2220]	; 1f3c0 <_start@@Base+0xcc88>
   1fc68:	mov	r1, r0
   1fc6c:	mov	r2, r8
   1fc70:	mov	r0, r9
   1fc74:	str	r5, [sp]
   1fc78:	add	r3, pc, r3
   1fc7c:	add	r3, r3, #552	; 0x228
   1fc80:	bl	14e98 <_start@@Base+0x2760>
   1fc84:	cmp	r8, r0
   1fc88:	cmpne	sl, r0
   1fc8c:	beq	1ff68 <_start@@Base+0xd830>
   1fc90:	mov	sl, r0
   1fc94:	b	1d268 <_start@@Base+0xab30>
   1fc98:	mov	r1, r0
   1fc9c:	mov	r3, #7
   1fca0:	mov	r2, r8
   1fca4:	mov	r0, r9
   1fca8:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   1fcac:	ldr	r3, [sp, #16]
   1fcb0:	cmp	r4, r0
   1fcb4:	mov	sl, r0
   1fcb8:	strb	r3, [sp, #352]	; 0x160
   1fcbc:	bne	1bad8 <_start@@Base+0x93a0>
   1fcc0:	b	1fc5c <_start@@Base+0xd524>
   1fcc4:	mov	r1, sl
   1fcc8:	mov	r2, r8
   1fccc:	mov	r0, r9
   1fcd0:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1fcd4:	mov	sl, r0
   1fcd8:	b	1c08c <_start@@Base+0x9954>
   1fcdc:	ldr	r3, [pc, #-2336]	; 1f3c4 <_start@@Base+0xcc8c>
   1fce0:	mov	r2, r8
   1fce4:	mov	r1, r4
   1fce8:	mov	r0, r9
   1fcec:	str	r5, [sp]
   1fcf0:	add	r3, pc, r3
   1fcf4:	add	r3, r3, #600	; 0x258
   1fcf8:	bl	13e10 <_start@@Base+0x16d8>
   1fcfc:	cmp	r8, r0
   1fd00:	cmpne	r4, r0
   1fd04:	mov	sl, r0
   1fd08:	bne	1e4f4 <_start@@Base+0xbdbc>
   1fd0c:	b	1ca5c <_start@@Base+0xa324>
   1fd10:	mov	r2, #1
   1fd14:	mvn	r3, #0
   1fd18:	mov	r1, r2
   1fd1c:	bl	22f60 <flatcc_builder_start_vector@@Base>
   1fd20:	subs	r4, r0, #0
   1fd24:	bne	1ca5c <_start@@Base+0xa324>
   1fd28:	ldr	r5, [sp, #28]
   1fd2c:	mov	r1, sl
   1fd30:	mov	r2, r8
   1fd34:	mov	r0, r9
   1fd38:	mov	r3, r5
   1fd3c:	bl	13700 <_start@@Base+0xfc8>
   1fd40:	ldr	r3, [sp, #336]	; 0x150
   1fd44:	mov	sl, r0
   1fd48:	cmp	r3, #0
   1fd4c:	beq	1fef0 <_start@@Base+0xd7b8>
   1fd50:	ldr	r3, [pc, #-2448]	; 1f3c8 <_start@@Base+0xcc90>
   1fd54:	str	r4, [sp, #16]
   1fd58:	strd	r6, [sp, #64]	; 0x40
   1fd5c:	add	r3, pc, r3
   1fd60:	add	fp, r3, #624	; 0x270
   1fd64:	mov	r7, fp
   1fd68:	mov	fp, r5
   1fd6c:	b	1fd9c <_start@@Base+0xd664>
   1fd70:	ldrb	ip, [sp, #360]	; 0x168
   1fd74:	mov	r1, r0
   1fd78:	mov	r3, fp
   1fd7c:	mov	r2, r8
   1fd80:	mov	r0, r9
   1fd84:	strb	ip, [r5]
   1fd88:	bl	159f0 <_start@@Base+0x32b8>
   1fd8c:	ldr	r3, [sp, #336]	; 0x150
   1fd90:	mov	sl, r0
   1fd94:	cmp	r3, #0
   1fd98:	beq	1feec <_start@@Base+0xd7b4>
   1fd9c:	ldr	r3, [sp, #16]
   1fda0:	mov	r1, #1
   1fda4:	add	r4, sp, #360	; 0x168
   1fda8:	ldr	r0, [r9]
   1fdac:	strb	r3, [sp, #360]	; 0x168
   1fdb0:	bl	22618 <flatcc_builder_extend_vector@@Base>
   1fdb4:	subs	r5, r0, #0
   1fdb8:	mov	r1, sl
   1fdbc:	mov	r3, r4
   1fdc0:	mov	r2, r8
   1fdc4:	mov	r0, r9
   1fdc8:	beq	1ca5c <_start@@Base+0xa324>
   1fdcc:	bl	132cc <_start@@Base+0xb94>
   1fdd0:	cmp	r0, sl
   1fdd4:	bne	1fd70 <_start@@Base+0xd638>
   1fdd8:	mov	r3, r7
   1fddc:	mov	r2, r8
   1fde0:	str	r4, [sp]
   1fde4:	mov	r1, sl
   1fde8:	mov	r0, r9
   1fdec:	bl	1405c <_start@@Base+0x1924>
   1fdf0:	cmp	r8, r0
   1fdf4:	cmpne	r0, sl
   1fdf8:	bne	1fd70 <_start@@Base+0xd638>
   1fdfc:	b	1cd38 <_start@@Base+0xa600>
   1fe00:	mov	r1, sl
   1fe04:	mov	r2, r8
   1fe08:	mov	r0, r9
   1fe0c:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1fe10:	mov	sl, r0
   1fe14:	b	1c08c <_start@@Base+0x9954>
   1fe18:	mov	r1, sl
   1fe1c:	mov	r2, r8
   1fe20:	mov	r0, r9
   1fe24:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   1fe28:	mov	sl, r0
   1fe2c:	b	1c08c <_start@@Base+0x9954>
   1fe30:	ldr	r3, [pc, #-2668]	; 1f3cc <_start@@Base+0xcc94>
   1fe34:	mov	r1, r0
   1fe38:	mov	r2, r8
   1fe3c:	mov	r0, r9
   1fe40:	str	fp, [sp]
   1fe44:	add	r3, pc, r3
   1fe48:	add	r3, r3, #540	; 0x21c
   1fe4c:	bl	14520 <_start@@Base+0x1de8>
   1fe50:	cmp	r8, r0
   1fe54:	cmpne	sl, r0
   1fe58:	beq	1ff68 <_start@@Base+0xd830>
   1fe5c:	mov	sl, r0
   1fe60:	b	1e9e4 <_start@@Base+0xc2ac>
   1fe64:	mov	fp, r9
   1fe68:	mov	r0, sl
   1fe6c:	mov	r9, r8
   1fe70:	b	1f424 <_start@@Base+0xccec>
   1fe74:	mov	fp, r9
   1fe78:	mov	sl, r5
   1fe7c:	mov	r9, r8
   1fe80:	b	1b7ac <_start@@Base+0x9074>
   1fe84:	ldr	r3, [pc, #-2748]	; 1f3d0 <_start@@Base+0xcc98>
   1fe88:	mov	r1, r0
   1fe8c:	mov	r2, r8
   1fe90:	mov	r0, r9
   1fe94:	str	r5, [sp]
   1fe98:	add	r3, pc, r3
   1fe9c:	add	r3, r3, #576	; 0x240
   1fea0:	bl	14c48 <_start@@Base+0x2510>
   1fea4:	cmp	r8, r0
   1fea8:	cmpne	sl, r0
   1feac:	beq	1ff68 <_start@@Base+0xd830>
   1feb0:	mov	sl, r0
   1feb4:	b	1ea98 <_start@@Base+0xc360>
   1feb8:	ldr	r3, [pc, #-2796]	; 1f3d4 <_start@@Base+0xcc9c>
   1febc:	mov	r1, r0
   1fec0:	mov	r2, r8
   1fec4:	mov	r0, r9
   1fec8:	str	r5, [sp]
   1fecc:	add	r3, pc, r3
   1fed0:	add	r3, r3, #564	; 0x234
   1fed4:	bl	14e98 <_start@@Base+0x2760>
   1fed8:	cmp	r8, r0
   1fedc:	cmpne	sl, r0
   1fee0:	beq	1ff68 <_start@@Base+0xd830>
   1fee4:	mov	sl, r0
   1fee8:	b	1f5dc <_start@@Base+0xcea4>
   1feec:	ldrd	r6, [sp, #64]	; 0x40
   1fef0:	ldr	r0, [r9]
   1fef4:	bl	23f4c <flatcc_builder_end_vector@@Base>
   1fef8:	str	r0, [sp, #340]	; 0x154
   1fefc:	b	1be40 <_start@@Base+0x9708>
   1ff00:	ldr	r3, [pc, #-2864]	; 1f3d8 <_start@@Base+0xcca0>
   1ff04:	mov	r1, r0
   1ff08:	mov	r2, r8
   1ff0c:	mov	r0, r9
   1ff10:	str	r5, [sp]
   1ff14:	add	r3, pc, r3
   1ff18:	add	r3, r3, #612	; 0x264
   1ff1c:	bl	13e10 <_start@@Base+0x16d8>
   1ff20:	cmp	r8, r0
   1ff24:	cmpne	sl, r0
   1ff28:	beq	1ff68 <_start@@Base+0xd830>
   1ff2c:	mov	sl, r0
   1ff30:	b	1f864 <_start@@Base+0xd12c>
   1ff34:	ldr	r3, [pc, #-2912]	; 1f3dc <_start@@Base+0xcca4>
   1ff38:	mov	r1, r0
   1ff3c:	mov	r2, r8
   1ff40:	mov	r0, r9
   1ff44:	str	r5, [sp]
   1ff48:	add	r3, pc, r3
   1ff4c:	add	r3, r3, #588	; 0x24c
   1ff50:	bl	14c48 <_start@@Base+0x2510>
   1ff54:	cmp	r8, r0
   1ff58:	cmpne	sl, r0
   1ff5c:	beq	1ff68 <_start@@Base+0xd830>
   1ff60:	mov	sl, r0
   1ff64:	b	1f934 <_start@@Base+0xd1fc>
   1ff68:	mov	fp, r9
   1ff6c:	mov	r9, r8
   1ff70:	b	1f424 <_start@@Base+0xccec>
   1ff74:	mov	sl, fp
   1ff78:	b	1c08c <_start@@Base+0x9954>
   1ff7c:	ldrd	r6, [sp, #16]
   1ff80:	b	1f0d4 <_start@@Base+0xc99c>
   1ff84:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1ff88:	mov	ip, #0
   1ff8c:	mov	r5, r0
   1ff90:	strd	r6, [sp, #8]
   1ff94:	mov	r6, r2
   1ff98:	mov	r4, r1
   1ff9c:	strd	r8, [sp, #16]
   1ffa0:	strd	sl, [sp, #24]
   1ffa4:	str	lr, [sp, #32]
   1ffa8:	sub	sp, sp, #68	; 0x44
   1ffac:	ldr	r2, [sp, #104]	; 0x68
   1ffb0:	str	ip, [r2]
   1ffb4:	cmp	r3, #4
   1ffb8:	addls	pc, pc, r3, lsl #2
   1ffbc:	b	208bc <_start@@Base+0xe184>
   1ffc0:	b	20018 <_start@@Base+0xd8e0>
   1ffc4:	b	20048 <_start@@Base+0xd910>
   1ffc8:	b	20058 <_start@@Base+0xd920>
   1ffcc:	b	20114 <_start@@Base+0xd9dc>
   1ffd0:	b	1ffd4 <_start@@Base+0xd89c>
   1ffd4:	mov	r2, r6
   1ffd8:	ldr	r3, [sp, #104]	; 0x68
   1ffdc:	bl	17c64 <_start@@Base+0x552c>
   1ffe0:	ldr	r3, [r5, #24]
   1ffe4:	cmp	r3, #0
   1ffe8:	bne	1fffc <_start@@Base+0xd8c4>
   1ffec:	ldr	r3, [sp, #104]	; 0x68
   1fff0:	ldr	r3, [r3]
   1fff4:	cmp	r3, #0
   1fff8:	beq	2071c <_start@@Base+0xdfe4>
   1fffc:	add	sp, sp, #68	; 0x44
   20000:	ldrd	r4, [sp]
   20004:	ldrd	r6, [sp, #8]
   20008:	ldrd	r8, [sp, #16]
   2000c:	ldrd	sl, [sp, #24]
   20010:	add	sp, sp, #32
   20014:	pop	{pc}		; (ldr pc, [sp], #4)
   20018:	sub	r3, r6, r1
   2001c:	cmp	r3, #3
   20020:	ble	20030 <_start@@Base+0xd8f8>
   20024:	ldrb	r3, [r1]
   20028:	cmp	r3, #110	; 0x6e
   2002c:	beq	2084c <_start@@Base+0xe114>
   20030:	mov	r2, r6
   20034:	mov	r1, r4
   20038:	mov	r0, r5
   2003c:	mov	r3, #26
   20040:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   20044:	b	1fffc <_start@@Base+0xd8c4>
   20048:	mov	r2, r6
   2004c:	ldr	r3, [sp, #104]	; 0x68
   20050:	bl	1b760 <_start@@Base+0x9028>
   20054:	b	1ffe0 <_start@@Base+0xd8a8>
   20058:	mov	r1, #4
   2005c:	ldr	r0, [r0]
   20060:	bl	23210 <flatcc_builder_start_table@@Base>
   20064:	cmp	r0, #0
   20068:	bne	202dc <_start@@Base+0xdba4>
   2006c:	add	sl, sp, #48	; 0x30
   20070:	mov	r1, r4
   20074:	mov	r3, sl
   20078:	mov	r2, r6
   2007c:	mov	r0, r5
   20080:	bl	1362c <_start@@Base+0xef4>
   20084:	ldr	r3, [sp, #48]	; 0x30
   20088:	mov	r4, r0
   2008c:	cmp	r3, #0
   20090:	beq	202b4 <_start@@Base+0xdb7c>
   20094:	ldr	r3, [pc, #1220]	; 20560 <_start@@Base+0xde28>
   20098:	str	sl, [sp, #32]
   2009c:	add	r3, pc, r3
   200a0:	add	r3, r3, #704	; 0x2c0
   200a4:	str	r3, [sp, #36]	; 0x24
   200a8:	cmp	r6, r4
   200ac:	beq	200d8 <_start@@Base+0xd9a0>
   200b0:	ldrb	r3, [r4]
   200b4:	cmp	r3, #34	; 0x22
   200b8:	moveq	r3, #0
   200bc:	addeq	r4, r4, #1
   200c0:	streq	r3, [r5, #12]
   200c4:	beq	200d8 <_start@@Base+0xd9a0>
   200c8:	cmp	r3, #46	; 0x2e
   200cc:	movne	r3, #1
   200d0:	strne	r3, [r5, #12]
   200d4:	beq	20668 <_start@@Base+0xdf30>
   200d8:	sub	ip, r6, r4
   200dc:	cmp	ip, #8
   200e0:	bhi	20124 <_start@@Base+0xd9ec>
   200e4:	sub	r3, ip, #1
   200e8:	cmp	r3, #7
   200ec:	addls	pc, pc, r3, lsl #2
   200f0:	b	20424 <_start@@Base+0xdcec>
   200f4:	b	2033c <_start@@Base+0xdc04>
   200f8:	b	20300 <_start@@Base+0xdbc8>
   200fc:	b	20330 <_start@@Base+0xdbf8>
   20100:	b	20324 <_start@@Base+0xdbec>
   20104:	b	20318 <_start@@Base+0xdbe0>
   20108:	b	2030c <_start@@Base+0xdbd4>
   2010c:	b	202f4 <_start@@Base+0xdbbc>
   20110:	b	20124 <_start@@Base+0xd9ec>
   20114:	mov	r2, r6
   20118:	ldr	r3, [sp, #104]	; 0x68
   2011c:	bl	17818 <_start@@Base+0x50e0>
   20120:	b	1ffe0 <_start@@Base+0xd8a8>
   20124:	ldrb	r2, [r4, #7]
   20128:	mov	r3, #0
   2012c:	mov	lr, r3
   20130:	ldrb	r0, [r4, #6]
   20134:	orr	r2, r2, r0, lsl #8
   20138:	ldrb	r0, [r4, #5]
   2013c:	orr	r3, r2, r0, lsl #16
   20140:	ldrb	r0, [r4, #4]
   20144:	orr	r0, r3, r0, lsl #24
   20148:	ldrb	r2, [r4, #3]
   2014c:	orr	r1, lr, r2
   20150:	ldrb	r2, [r4, #2]
   20154:	orr	r1, r1, r2, lsl #8
   20158:	ldrb	r2, [r4, #1]
   2015c:	lsr	r8, r0, #16
   20160:	mov	lr, r0
   20164:	mov	fp, #0
   20168:	lsl	r8, r8, #16
   2016c:	orr	r1, r1, r2, lsl #16
   20170:	ldrb	r2, [r4]
   20174:	orr	r2, r1, r2, lsl #24
   20178:	add	r1, pc, #968	; 0x3c8
   2017c:	ldrd	r0, [r1]
   20180:	cmp	r2, r1
   20184:	cmpeq	r8, r0
   20188:	beq	2034c <_start@@Base+0xdc14>
   2018c:	and	r3, lr, #-16777216	; 0xff000000
   20190:	add	fp, pc, #952	; 0x3b8
   20194:	ldrd	sl, [fp]
   20198:	str	r3, [sp, #8]
   2019c:	str	r2, [sp, #12]
   201a0:	ldrd	r0, [sp, #8]
   201a4:	cmp	r1, fp
   201a8:	cmpeq	r0, sl
   201ac:	bne	2043c <_start@@Base+0xdd04>
   201b0:	cmp	ip, #5
   201b4:	ble	20424 <_start@@Base+0xdcec>
   201b8:	mov	r3, #5
   201bc:	mov	r2, r6
   201c0:	mov	r1, r4
   201c4:	mov	r0, r5
   201c8:	bl	17b2c <_start@@Base+0x53f4>
   201cc:	cmp	r0, r4
   201d0:	mov	r7, r0
   201d4:	beq	20424 <_start@@Base+0xdcec>
   201d8:	mov	r3, #0
   201dc:	mov	r0, #0
   201e0:	mov	r1, #0
   201e4:	cmp	r6, r7
   201e8:	strb	r3, [sp, #47]	; 0x2f
   201ec:	str	r3, [sp, #52]	; 0x34
   201f0:	strd	r0, [sp, #56]	; 0x38
   201f4:	beq	20660 <_start@@Base+0xdf28>
   201f8:	add	r0, sp, #56	; 0x38
   201fc:	add	r3, sp, #52	; 0x34
   20200:	mov	r2, r6
   20204:	mov	r1, r7
   20208:	str	r0, [sp]
   2020c:	mov	r0, r5
   20210:	bl	28ea4 <flatcc_json_parser_integer@@Base>
   20214:	cmp	r7, r0
   20218:	mov	r4, r0
   2021c:	bne	206c8 <_start@@Base+0xdf90>
   20220:	ldr	r3, [pc, #828]	; 20564 <_start@@Base+0xde2c>
   20224:	add	ip, sp, #47	; 0x2f
   20228:	mov	r2, r6
   2022c:	mov	r1, r4
   20230:	mov	r0, r5
   20234:	str	ip, [sp]
   20238:	add	r3, pc, r3
   2023c:	add	r3, r3, #676	; 0x2a4
   20240:	bl	14784 <_start@@Base+0x204c>
   20244:	cmp	r6, r0
   20248:	cmpne	r0, r4
   2024c:	beq	208b4 <_start@@Base+0xe17c>
   20250:	ldrsb	r2, [sp, #47]	; 0x2f
   20254:	mov	r4, r0
   20258:	cmp	r2, #2
   2025c:	bne	2026c <_start@@Base+0xdb34>
   20260:	ldr	r3, [r5, #8]
   20264:	tst	r3, #2
   20268:	beq	20290 <_start@@Base+0xdb58>
   2026c:	mov	r3, #1
   20270:	mov	r1, #0
   20274:	ldr	r0, [r5]
   20278:	mov	r2, r3
   2027c:	bl	24d44 <flatcc_builder_table_add@@Base>
   20280:	cmp	r0, #0
   20284:	beq	202dc <_start@@Base+0xdba4>
   20288:	ldrsb	r3, [sp, #47]	; 0x2f
   2028c:	strb	r3, [r0]
   20290:	mov	r1, r4
   20294:	mov	r2, r6
   20298:	ldr	r3, [sp, #32]
   2029c:	mov	r0, r5
   202a0:	bl	1582c <_start@@Base+0x30f4>
   202a4:	ldr	r3, [sp, #48]	; 0x30
   202a8:	mov	r4, r0
   202ac:	cmp	r3, #0
   202b0:	bne	200a8 <_start@@Base+0xd970>
   202b4:	ldr	r3, [r5, #24]
   202b8:	cmp	r3, #0
   202bc:	bne	202dc <_start@@Base+0xdba4>
   202c0:	ldr	r0, [r5]
   202c4:	bl	23bf4 <flatcc_builder_end_table@@Base>
   202c8:	ldr	r3, [sp, #104]	; 0x68
   202cc:	cmp	r0, #0
   202d0:	str	r0, [r3]
   202d4:	movne	r0, r4
   202d8:	bne	1ffe0 <_start@@Base+0xd8a8>
   202dc:	mov	r1, r4
   202e0:	mov	r3, #33	; 0x21
   202e4:	mov	r2, r6
   202e8:	mov	r0, r5
   202ec:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   202f0:	b	1ffe0 <_start@@Base+0xd8a8>
   202f4:	mov	r2, #0
   202f8:	mov	r3, #0
   202fc:	b	2012c <_start@@Base+0xd9f4>
   20300:	mov	r0, #0
   20304:	mov	r1, r0
   20308:	b	20158 <_start@@Base+0xda20>
   2030c:	mov	r2, #0
   20310:	mov	lr, r2
   20314:	b	20138 <_start@@Base+0xda00>
   20318:	mov	r3, #0
   2031c:	mov	lr, r3
   20320:	b	20140 <_start@@Base+0xda08>
   20324:	mov	r0, #0
   20328:	mov	lr, r0
   2032c:	b	20148 <_start@@Base+0xda10>
   20330:	mov	r0, #0
   20334:	mov	r1, r0
   20338:	b	20150 <_start@@Base+0xda18>
   2033c:	ldrb	r2, [r4]
   20340:	mov	lr, #0
   20344:	lsl	r2, r2, #24
   20348:	b	2018c <_start@@Base+0xda54>
   2034c:	cmp	ip, #6
   20350:	ble	20424 <_start@@Base+0xdcec>
   20354:	mov	r3, #6
   20358:	mov	r2, r6
   2035c:	mov	r1, r4
   20360:	mov	r0, r5
   20364:	bl	17b2c <_start@@Base+0x53f4>
   20368:	cmp	r0, r4
   2036c:	mov	r7, r0
   20370:	beq	20424 <_start@@Base+0xdcec>
   20374:	mov	r2, #0
   20378:	mov	r3, #0
   2037c:	strb	fp, [sp, #47]	; 0x2f
   20380:	cmp	r6, r0
   20384:	str	fp, [sp, #52]	; 0x34
   20388:	strd	r2, [sp, #56]	; 0x38
   2038c:	beq	20658 <_start@@Base+0xdf20>
   20390:	mov	r1, r0
   20394:	add	r0, sp, #56	; 0x38
   20398:	add	r3, sp, #52	; 0x34
   2039c:	mov	r2, r6
   203a0:	str	r0, [sp]
   203a4:	mov	r0, r5
   203a8:	bl	28ea4 <flatcc_json_parser_integer@@Base>
   203ac:	cmp	r7, r0
   203b0:	mov	r4, r0
   203b4:	bne	20684 <_start@@Base+0xdf4c>
   203b8:	ldr	r3, [pc, #424]	; 20568 <_start@@Base+0xde30>
   203bc:	add	ip, sp, #47	; 0x2f
   203c0:	mov	r2, r6
   203c4:	mov	r1, r4
   203c8:	mov	r0, r5
   203cc:	str	ip, [sp]
   203d0:	add	r3, pc, r3
   203d4:	add	r3, r3, #660	; 0x294
   203d8:	bl	14784 <_start@@Base+0x204c>
   203dc:	cmp	r6, r0
   203e0:	cmpne	r0, r4
   203e4:	beq	208b4 <_start@@Base+0xe17c>
   203e8:	ldrsb	r2, [sp, #47]	; 0x2f
   203ec:	mov	r4, r0
   203f0:	cmp	r2, #2
   203f4:	bne	20404 <_start@@Base+0xdccc>
   203f8:	ldr	r3, [r5, #8]
   203fc:	tst	r3, #2
   20400:	beq	20290 <_start@@Base+0xdb58>
   20404:	mov	r3, #1
   20408:	ldr	r0, [r5]
   2040c:	mov	r2, r3
   20410:	mov	r1, r3
   20414:	bl	24d44 <flatcc_builder_table_add@@Base>
   20418:	cmp	r0, #0
   2041c:	bne	20288 <_start@@Base+0xdb50>
   20420:	b	202dc <_start@@Base+0xdba4>
   20424:	mov	r1, r4
   20428:	mov	r2, r6
   2042c:	mov	r0, r5
   20430:	bl	28c74 <flatcc_json_parser_unmatched_symbol@@Base>
   20434:	mov	r4, r0
   20438:	b	20290 <_start@@Base+0xdb58>
   2043c:	mov	r7, #0
   20440:	bic	r3, r2, #255	; 0xff
   20444:	add	fp, pc, #268	; 0x10c
   20448:	ldrd	sl, [fp]
   2044c:	str	r7, [sp, #24]
   20450:	str	r3, [sp, #28]
   20454:	ldrd	r0, [sp, #24]
   20458:	cmp	r1, fp
   2045c:	cmpeq	r0, sl
   20460:	bne	20570 <_start@@Base+0xde38>
   20464:	cmp	ip, #3
   20468:	ble	20424 <_start@@Base+0xdcec>
   2046c:	mov	r3, #3
   20470:	mov	r2, r6
   20474:	mov	r1, r4
   20478:	mov	r0, r5
   2047c:	bl	17b2c <_start@@Base+0x53f4>
   20480:	cmp	r0, r4
   20484:	mov	fp, r0
   20488:	beq	20424 <_start@@Base+0xdcec>
   2048c:	mov	r2, #0
   20490:	mov	r3, #0
   20494:	strb	r7, [sp, #47]	; 0x2f
   20498:	cmp	r6, r0
   2049c:	str	r7, [sp, #52]	; 0x34
   204a0:	strd	r2, [sp, #56]	; 0x38
   204a4:	beq	2070c <_start@@Base+0xdfd4>
   204a8:	mov	r1, r0
   204ac:	add	r0, sp, #56	; 0x38
   204b0:	add	r3, sp, #52	; 0x34
   204b4:	mov	r2, r6
   204b8:	str	r0, [sp]
   204bc:	mov	r0, r5
   204c0:	bl	28ea4 <flatcc_json_parser_integer@@Base>
   204c4:	cmp	fp, r0
   204c8:	mov	r7, r0
   204cc:	bne	20734 <_start@@Base+0xdffc>
   204d0:	ldr	r3, [pc, #148]	; 2056c <_start@@Base+0xde34>
   204d4:	add	ip, sp, #47	; 0x2f
   204d8:	mov	r2, r6
   204dc:	mov	r1, r7
   204e0:	mov	r0, r5
   204e4:	str	ip, [sp]
   204e8:	add	r3, pc, r3
   204ec:	add	r3, r3, #692	; 0x2b4
   204f0:	bl	1405c <_start@@Base+0x1924>
   204f4:	cmp	r6, r0
   204f8:	cmpne	r0, r7
   204fc:	mov	r4, r0
   20500:	beq	202dc <_start@@Base+0xdba4>
   20504:	ldrb	r2, [sp, #47]	; 0x2f
   20508:	cmp	r2, #2
   2050c:	bne	2051c <_start@@Base+0xdde4>
   20510:	ldr	r3, [r5, #8]
   20514:	tst	r3, #2
   20518:	beq	20290 <_start@@Base+0xdb58>
   2051c:	mov	r3, #1
   20520:	mov	r1, #3
   20524:	mov	r2, r3
   20528:	ldr	r0, [r5]
   2052c:	bl	24d44 <flatcc_builder_table_add@@Base>
   20530:	cmp	r0, #0
   20534:	beq	202dc <_start@@Base+0xdba4>
   20538:	ldrb	r3, [sp, #47]	; 0x2f
   2053c:	strb	r3, [r0]
   20540:	b	20290 <_start@@Base+0xdb58>
   20544:	nop	{0}
   20548:	eorsvc	r0, r2, #0
   2054c:	cmnvs	pc, #28416	; 0x6f00
   20550:	andvc	r0, r0, #0
   20554:	cmnvs	pc, #28416	; 0x6f00
   20558:	andeq	r0, r0, r0
   2055c:	strbvc	r3, [r3, #-512]!	; 0xfffffe00
   20560:	andeq	ip, r1, ip, ror #31
   20564:	andeq	ip, r1, r0, asr lr
   20568:			; <UNDEFINED> instruction: 0x0001ccb8
   2056c:	andeq	ip, r1, r0, lsr #23
   20570:	lsr	r3, r2, #16
   20574:	str	r7, [sp, #16]
   20578:	mov	r1, #0
   2057c:	movt	r1, #30051	; 0x7563
   20580:	mov	r0, #0
   20584:	lsl	r3, r3, #16
   20588:	str	r3, [sp, #20]
   2058c:	ldrd	r2, [sp, #16]
   20590:	cmp	r3, r1
   20594:	cmpeq	r2, r0
   20598:	bne	20424 <_start@@Base+0xdcec>
   2059c:	cmp	ip, #2
   205a0:	ble	20424 <_start@@Base+0xdcec>
   205a4:	mov	r3, #2
   205a8:	mov	r2, r6
   205ac:	mov	r1, r4
   205b0:	mov	r0, r5
   205b4:	bl	17b2c <_start@@Base+0x53f4>
   205b8:	cmp	r0, r4
   205bc:	mov	fp, r0
   205c0:	beq	20424 <_start@@Base+0xdcec>
   205c4:	mov	r2, #0
   205c8:	mov	r3, #0
   205cc:	strb	r7, [sp, #47]	; 0x2f
   205d0:	cmp	r6, r0
   205d4:	str	r7, [sp, #52]	; 0x34
   205d8:	strd	r2, [sp, #56]	; 0x38
   205dc:	beq	20714 <_start@@Base+0xdfdc>
   205e0:	mov	r1, r0
   205e4:	add	r0, sp, #56	; 0x38
   205e8:	add	r3, sp, #52	; 0x34
   205ec:	mov	r2, r6
   205f0:	str	r0, [sp]
   205f4:	mov	r0, r5
   205f8:	bl	28ea4 <flatcc_json_parser_integer@@Base>
   205fc:	cmp	fp, r0
   20600:	mov	r7, r0
   20604:	bne	20784 <_start@@Base+0xe04c>
   20608:	add	r0, sp, #47	; 0x2f
   2060c:	mov	r2, r6
   20610:	ldr	r3, [sp, #36]	; 0x24
   20614:	mov	r1, r7
   20618:	str	r0, [sp]
   2061c:	mov	r0, r5
   20620:	bl	1405c <_start@@Base+0x1924>
   20624:	cmp	r6, r0
   20628:	cmpne	r0, r7
   2062c:	mov	r4, r0
   20630:	beq	202dc <_start@@Base+0xdba4>
   20634:	ldrb	r2, [sp, #47]	; 0x2f
   20638:	cmp	r2, #2
   2063c:	bne	2064c <_start@@Base+0xdf14>
   20640:	ldr	r3, [r5, #8]
   20644:	tst	r3, #2
   20648:	beq	20290 <_start@@Base+0xdb58>
   2064c:	mov	r3, #1
   20650:	mov	r1, #2
   20654:	b	20524 <_start@@Base+0xddec>
   20658:	mov	r4, r6
   2065c:	b	203b8 <_start@@Base+0xdc80>
   20660:	mov	r4, r6
   20664:	b	20220 <_start@@Base+0xdae8>
   20668:	mov	r1, r4
   2066c:	mov	r3, #5
   20670:	mov	r2, r6
   20674:	mov	r0, r5
   20678:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   2067c:	mov	r4, r0
   20680:	b	200d8 <_start@@Base+0xd9a0>
   20684:	ldr	r1, [sp, #52]	; 0x34
   20688:	ldrd	r2, [sp, #56]	; 0x38
   2068c:	cmp	r1, #0
   20690:	beq	207d4 <_start@@Base+0xe09c>
   20694:	cmp	r3, #0
   20698:	cmpeq	r2, #128	; 0x80
   2069c:	rsbls	r2, r2, #0
   206a0:	sxtbls	r2, r2
   206a4:	strbls	r2, [sp, #47]	; 0x2f
   206a8:	bls	203f0 <_start@@Base+0xdcb8>
   206ac:	mov	r1, r0
   206b0:	mov	r3, #8
   206b4:	mov	r2, r6
   206b8:	mov	r0, r5
   206bc:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   206c0:	mov	r4, r0
   206c4:	b	20800 <_start@@Base+0xe0c8>
   206c8:	ldr	r1, [sp, #52]	; 0x34
   206cc:	ldrd	r2, [sp, #56]	; 0x38
   206d0:	cmp	r1, #0
   206d4:	beq	20810 <_start@@Base+0xe0d8>
   206d8:	cmp	r3, #0
   206dc:	cmpeq	r2, #128	; 0x80
   206e0:	rsbls	r2, r2, #0
   206e4:	sxtbls	r2, r2
   206e8:	strbls	r2, [sp, #47]	; 0x2f
   206ec:	bls	20258 <_start@@Base+0xdb20>
   206f0:	mov	r1, r0
   206f4:	mov	r3, #8
   206f8:	mov	r2, r6
   206fc:	mov	r0, r5
   20700:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   20704:	mov	r4, r0
   20708:	b	2083c <_start@@Base+0xe104>
   2070c:	mov	r7, r6
   20710:	b	204d0 <_start@@Base+0xdd98>
   20714:	mov	r7, r6
   20718:	b	20608 <_start@@Base+0xded0>
   2071c:	mov	r1, r0
   20720:	mov	r2, r6
   20724:	mov	r0, r5
   20728:	mov	r3, #33	; 0x21
   2072c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   20730:	b	1fffc <_start@@Base+0xd8c4>
   20734:	ldr	r3, [sp, #52]	; 0x34
   20738:	cmp	r3, #0
   2073c:	bne	2087c <_start@@Base+0xe144>
   20740:	ldrd	r2, [sp, #56]	; 0x38
   20744:	cmp	r3, #0
   20748:	cmpeq	r2, #255	; 0xff
   2074c:	uxtbls	r2, r2
   20750:	movls	r4, r0
   20754:	strbls	r2, [sp, #47]	; 0x2f
   20758:	bls	20508 <_start@@Base+0xddd0>
   2075c:	mov	r1, r0
   20760:	mov	r3, #7
   20764:	mov	r2, r6
   20768:	mov	r0, r5
   2076c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   20770:	mov	r4, r0
   20774:	cmp	fp, r4
   20778:	bne	20504 <_start@@Base+0xddcc>
   2077c:	mov	r7, fp
   20780:	b	204d0 <_start@@Base+0xdd98>
   20784:	ldr	r3, [sp, #52]	; 0x34
   20788:	cmp	r3, #0
   2078c:	bne	20898 <_start@@Base+0xe160>
   20790:	ldrd	r2, [sp, #56]	; 0x38
   20794:	cmp	r3, #0
   20798:	cmpeq	r2, #255	; 0xff
   2079c:	uxtbls	r2, r2
   207a0:	movls	r4, r0
   207a4:	strbls	r2, [sp, #47]	; 0x2f
   207a8:	bls	20638 <_start@@Base+0xdf00>
   207ac:	mov	r1, r0
   207b0:	mov	r3, #7
   207b4:	mov	r2, r6
   207b8:	mov	r0, r5
   207bc:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   207c0:	mov	r4, r0
   207c4:	cmp	fp, r4
   207c8:	bne	20634 <_start@@Base+0xdefc>
   207cc:	mov	r7, fp
   207d0:	b	20608 <_start@@Base+0xded0>
   207d4:	cmp	r3, #0
   207d8:	cmpeq	r2, #127	; 0x7f
   207dc:	sxtbls	r2, r2
   207e0:	strbls	r2, [sp, #47]	; 0x2f
   207e4:	bls	203f0 <_start@@Base+0xdcb8>
   207e8:	mov	r1, r0
   207ec:	mov	r3, #7
   207f0:	mov	r2, r6
   207f4:	mov	r0, r5
   207f8:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   207fc:	mov	r4, r0
   20800:	cmp	r7, r4
   20804:	beq	203b8 <_start@@Base+0xdc80>
   20808:	ldrsb	r2, [sp, #47]	; 0x2f
   2080c:	b	203f0 <_start@@Base+0xdcb8>
   20810:	cmp	r3, #0
   20814:	cmpeq	r2, #127	; 0x7f
   20818:	sxtbls	r2, r2
   2081c:	strbls	r2, [sp, #47]	; 0x2f
   20820:	bls	20258 <_start@@Base+0xdb20>
   20824:	mov	r1, r0
   20828:	mov	r3, #7
   2082c:	mov	r2, r6
   20830:	mov	r0, r5
   20834:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   20838:	mov	r4, r0
   2083c:	cmp	r7, r4
   20840:	beq	20220 <_start@@Base+0xdae8>
   20844:	ldrsb	r2, [sp, #47]	; 0x2f
   20848:	b	20258 <_start@@Base+0xdb20>
   2084c:	ldrb	r3, [r1, #1]
   20850:	add	r2, r1, #1
   20854:	cmp	r3, #117	; 0x75
   20858:	bne	20030 <_start@@Base+0xd8f8>
   2085c:	ldrb	r3, [r2, #1]!
   20860:	cmp	r3, #108	; 0x6c
   20864:	bne	20030 <_start@@Base+0xd8f8>
   20868:	ldrb	r3, [r2, #1]
   2086c:	cmp	r3, #108	; 0x6c
   20870:	addeq	r0, r1, #4
   20874:	bne	20030 <_start@@Base+0xd8f8>
   20878:	b	1fffc <_start@@Base+0xd8c4>
   2087c:	mov	r1, r0
   20880:	mov	r3, #8
   20884:	mov	r2, r6
   20888:	mov	r0, r5
   2088c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   20890:	mov	r4, r0
   20894:	b	20774 <_start@@Base+0xe03c>
   20898:	mov	r1, r0
   2089c:	mov	r3, #8
   208a0:	mov	r2, r6
   208a4:	mov	r0, r5
   208a8:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   208ac:	mov	r4, r0
   208b0:	b	207c4 <_start@@Base+0xe08c>
   208b4:	mov	r4, r0
   208b8:	b	202dc <_start@@Base+0xdba4>
   208bc:	ldr	r3, [r0, #8]
   208c0:	mov	r2, r6
   208c4:	tst	r3, #1
   208c8:	bne	208d8 <_start@@Base+0xe1a0>
   208cc:	mov	r3, #15
   208d0:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   208d4:	b	1fffc <_start@@Base+0xd8c4>
   208d8:	bl	28248 <flatcc_json_parser_generic_json@@Base>
   208dc:	b	1fffc <_start@@Base+0xd8c4>

000208e0 <verify_parse@@Base>:
   208e0:	cmp	r0, #0
   208e4:	str	r4, [sp, #-8]!
   208e8:	str	lr, [sp, #4]
   208ec:	beq	20904 <verify_parse@@Base+0x24>
   208f0:	ldr	r2, [r0, #4]
   208f4:	movw	r3, #20301	; 0x4f4d
   208f8:	movt	r3, #21326	; 0x534e
   208fc:	cmp	r2, r3
   20900:	beq	20924 <verify_parse@@Base+0x44>
   20904:	ldr	r3, [pc, #520]	; 20b14 <verify_parse@@Base+0x234>
   20908:	mov	r2, #696	; 0x2b8
   2090c:	ldr	r1, [pc, #516]	; 20b18 <verify_parse@@Base+0x238>
   20910:	ldr	r0, [pc, #516]	; 20b1c <verify_parse@@Base+0x23c>
   20914:	add	r3, pc, r3
   20918:	add	r1, pc, r1
   2091c:	add	r0, pc, r0
   20920:	bl	1267c <__assert_fail@plt>
   20924:	ldr	r2, [r0]
   20928:	adds	r3, r0, r2
   2092c:	beq	20904 <verify_parse@@Base+0x24>
   20930:	ldr	r2, [r0, r2]
   20934:	sub	r2, r3, r2
   20938:	ldrh	r1, [r2]
   2093c:	cmp	r1, #5
   20940:	bls	209dc <verify_parse@@Base+0xfc>
   20944:	ldrh	r2, [r2, #4]
   20948:	cmp	r2, #0
   2094c:	beq	209dc <verify_parse@@Base+0xfc>
   20950:	adds	r3, r3, r2
   20954:	beq	209dc <verify_parse@@Base+0xfc>
   20958:	vldr	s15, [pc, #424]	; 20b08 <verify_parse@@Base+0x228>
   2095c:	vldr	s14, [r3]
   20960:	vcmp.f32	s14, s15
   20964:	vmrs	APSR_nzcv, fpscr
   20968:	bne	20a6c <verify_parse@@Base+0x18c>
   2096c:	vldr	s15, [pc, #408]	; 20b0c <verify_parse@@Base+0x22c>
   20970:	vldr	s14, [r3, #4]
   20974:	vcmp.f32	s14, s15
   20978:	vmrs	APSR_nzcv, fpscr
   2097c:	bne	20a90 <verify_parse@@Base+0x1b0>
   20980:	vldr	s15, [pc, #392]	; 20b10 <verify_parse@@Base+0x230>
   20984:	vldr	s14, [r3, #8]
   20988:	vcmp.f32	s14, s15
   2098c:	vmrs	APSR_nzcv, fpscr
   20990:	bne	20ab4 <verify_parse@@Base+0x1d4>
   20994:	vldr	d7, [pc, #356]	; 20b00 <verify_parse@@Base+0x220>
   20998:	vldr	d6, [r3, #16]
   2099c:	vcmp.f64	d6, d7
   209a0:	vmrs	APSR_nzcv, fpscr
   209a4:	bne	20ad8 <verify_parse@@Base+0x1f8>
   209a8:	ldrsb	r2, [r3, #24]
   209ac:	cmp	r2, #2
   209b0:	bne	20a24 <verify_parse@@Base+0x144>
   209b4:	ldrsh	r2, [r3, #26]
   209b8:	cmp	r2, #5
   209bc:	bne	20a48 <verify_parse@@Base+0x168>
   209c0:	ldrsb	r3, [r3, #28]
   209c4:	cmp	r3, #6
   209c8:	bne	20a00 <verify_parse@@Base+0x120>
   209cc:	ldr	r4, [sp]
   209d0:	add	sp, sp, #4
   209d4:	mov	r0, #0
   209d8:	pop	{pc}		; (ldr pc, [sp], #4)
   209dc:	ldr	r3, [pc, #316]	; 20b20 <verify_parse@@Base+0x240>
   209e0:	mov	r2, #45	; 0x2d
   209e4:	ldr	r1, [pc, #312]	; 20b24 <verify_parse@@Base+0x244>
   209e8:	ldr	r0, [pc, #312]	; 20b28 <verify_parse@@Base+0x248>
   209ec:	add	r3, pc, r3
   209f0:	add	r3, r3, #28
   209f4:	add	r1, pc, r1
   209f8:	add	r0, pc, r0
   209fc:	bl	1267c <__assert_fail@plt>
   20a00:	ldr	r3, [pc, #292]	; 20b2c <verify_parse@@Base+0x24c>
   20a04:	mov	r2, #54	; 0x36
   20a08:	ldr	r1, [pc, #288]	; 20b30 <verify_parse@@Base+0x250>
   20a0c:	ldr	r0, [pc, #288]	; 20b34 <verify_parse@@Base+0x254>
   20a10:	add	r3, pc, r3
   20a14:	add	r3, r3, #28
   20a18:	add	r1, pc, r1
   20a1c:	add	r0, pc, r0
   20a20:	bl	1267c <__assert_fail@plt>
   20a24:	ldr	r3, [pc, #268]	; 20b38 <verify_parse@@Base+0x258>
   20a28:	mov	r2, #50	; 0x32
   20a2c:	ldr	r1, [pc, #264]	; 20b3c <verify_parse@@Base+0x25c>
   20a30:	ldr	r0, [pc, #264]	; 20b40 <verify_parse@@Base+0x260>
   20a34:	add	r3, pc, r3
   20a38:	add	r3, r3, #28
   20a3c:	add	r1, pc, r1
   20a40:	add	r0, pc, r0
   20a44:	bl	1267c <__assert_fail@plt>
   20a48:	ldr	r3, [pc, #244]	; 20b44 <verify_parse@@Base+0x264>
   20a4c:	mov	r2, #53	; 0x35
   20a50:	ldr	r1, [pc, #240]	; 20b48 <verify_parse@@Base+0x268>
   20a54:	ldr	r0, [pc, #240]	; 20b4c <verify_parse@@Base+0x26c>
   20a58:	add	r3, pc, r3
   20a5c:	add	r3, r3, #28
   20a60:	add	r1, pc, r1
   20a64:	add	r0, pc, r0
   20a68:	bl	1267c <__assert_fail@plt>
   20a6c:	ldr	r3, [pc, #220]	; 20b50 <verify_parse@@Base+0x270>
   20a70:	mov	r2, #46	; 0x2e
   20a74:	ldr	r1, [pc, #216]	; 20b54 <verify_parse@@Base+0x274>
   20a78:	ldr	r0, [pc, #216]	; 20b58 <verify_parse@@Base+0x278>
   20a7c:	add	r3, pc, r3
   20a80:	add	r3, r3, #28
   20a84:	add	r1, pc, r1
   20a88:	add	r0, pc, r0
   20a8c:	bl	1267c <__assert_fail@plt>
   20a90:	ldr	r3, [pc, #196]	; 20b5c <verify_parse@@Base+0x27c>
   20a94:	mov	r2, #47	; 0x2f
   20a98:	ldr	r1, [pc, #192]	; 20b60 <verify_parse@@Base+0x280>
   20a9c:	ldr	r0, [pc, #192]	; 20b64 <verify_parse@@Base+0x284>
   20aa0:	add	r3, pc, r3
   20aa4:	add	r3, r3, #28
   20aa8:	add	r1, pc, r1
   20aac:	add	r0, pc, r0
   20ab0:	bl	1267c <__assert_fail@plt>
   20ab4:	ldr	r3, [pc, #172]	; 20b68 <verify_parse@@Base+0x288>
   20ab8:	mov	r2, #48	; 0x30
   20abc:	ldr	r1, [pc, #168]	; 20b6c <verify_parse@@Base+0x28c>
   20ac0:	ldr	r0, [pc, #168]	; 20b70 <verify_parse@@Base+0x290>
   20ac4:	add	r3, pc, r3
   20ac8:	add	r3, r3, #28
   20acc:	add	r1, pc, r1
   20ad0:	add	r0, pc, r0
   20ad4:	bl	1267c <__assert_fail@plt>
   20ad8:	ldr	r3, [pc, #148]	; 20b74 <verify_parse@@Base+0x294>
   20adc:	mov	r2, #49	; 0x31
   20ae0:	ldr	r1, [pc, #144]	; 20b78 <verify_parse@@Base+0x298>
   20ae4:	ldr	r0, [pc, #144]	; 20b7c <verify_parse@@Base+0x29c>
   20ae8:	add	r3, pc, r3
   20aec:	add	r3, r3, #28
   20af0:	add	r1, pc, r1
   20af4:	add	r0, pc, r0
   20af8:	bl	1267c <__assert_fail@plt>
   20afc:	nop	{0}
   20b00:	andeq	r0, r0, r0
   20b04:	andmi	r0, r8, r0
   20b08:	svccc	0x00800000
   20b0c:	andmi	r0, r0, r0
   20b10:	submi	r0, r0, r0
   20b14:	andeq	r9, r0, r8, ror pc
   20b18:			; <UNDEFINED> instruction: 0x00009fb8
   20b1c:	andeq	sl, r0, ip, lsr #32
   20b20:	andeq	r9, r0, r0, lsr #29
   20b24:	andeq	r9, r0, ip, ror pc
   20b28:	andeq	sl, r0, r0, lsr r9
   20b2c:	andeq	r9, r0, ip, ror lr
   20b30:	andeq	r9, r0, r8, asr pc
   20b34:	andeq	sl, r0, ip, lsl #18
   20b38:	andeq	r9, r0, r8, asr lr
   20b3c:	andeq	r9, r0, r4, lsr pc
   20b40:	andeq	sl, r0, r8, ror #17
   20b44:	andeq	r9, r0, r4, lsr lr
   20b48:	andeq	r9, r0, r0, lsl pc
   20b4c:	andeq	sl, r0, r4, asr #17
   20b50:	andeq	r9, r0, r0, lsl lr
   20b54:	andeq	r9, r0, ip, ror #29
   20b58:	andeq	sl, r0, r0, lsr #17
   20b5c:	andeq	r9, r0, ip, ror #27
   20b60:	andeq	r9, r0, r8, asr #29
   20b64:	andeq	sl, r0, ip, ror r8
   20b68:	andeq	r9, r0, r8, asr #27
   20b6c:	andeq	r9, r0, r4, lsr #29
   20b70:	andeq	sl, r0, r8, asr r8
   20b74:	andeq	r9, r0, r4, lsr #27
   20b78:	andeq	r9, r0, r0, lsl #29
   20b7c:	andeq	sl, r0, r4, lsr r8

00020b80 <test_parse@@Base>:
   20b80:	strd	r4, [sp, #-36]!	; 0xffffffdc
   20b84:	strd	r6, [sp, #8]
   20b88:	strd	r8, [sp, #16]
   20b8c:	strd	sl, [sp, #24]
   20b90:	str	lr, [sp, #32]
   20b94:	sub	sp, sp, #348	; 0x15c
   20b98:	add	sl, sp, #112	; 0x70
   20b9c:	ldr	r8, [pc, #1192]	; 2104c <test_parse@@Base+0x4cc>
   20ba0:	mov	r0, sl
   20ba4:	bl	2189c <flatcc_builder_init@@Base>
   20ba8:	ldr	r3, [pc, #1184]	; 21050 <test_parse@@Base+0x4d0>
   20bac:	add	r8, pc, r8
   20bb0:	ldr	r1, [pc, #1180]	; 21054 <test_parse@@Base+0x4d4>
   20bb4:	ldr	r3, [r8, r3]
   20bb8:	add	r1, pc, r1
   20bbc:	ldr	r0, [r3]
   20bc0:	str	r3, [sp, #8]
   20bc4:	bl	12568 <fopen@plt>
   20bc8:	subs	r6, r0, #0
   20bcc:	beq	20ea0 <test_parse@@Base+0x320>
   20bd0:	mov	r2, #2
   20bd4:	mov	r1, #0
   20bd8:	bl	12664 <fseek@plt>
   20bdc:	mov	r0, r6
   20be0:	bl	1258c <ftell@plt>
   20be4:	mov	fp, r0
   20be8:	mov	r0, r6
   20bec:	cmp	fp, #10240	; 0x2800
   20bf0:	bhi	2102c <test_parse@@Base+0x4ac>
   20bf4:	bl	125a4 <rewind@plt>
   20bf8:	cmp	fp, #0
   20bfc:	movne	r0, fp
   20c00:	moveq	r0, #1
   20c04:	bl	125d4 <malloc@plt>
   20c08:	subs	r4, r0, #0
   20c0c:	beq	21034 <test_parse@@Base+0x4b4>
   20c10:	mov	r7, #0
   20c14:	b	20c1c <test_parse@@Base+0x9c>
   20c18:	add	r7, r7, r0
   20c1c:	add	r9, r4, r7
   20c20:	mov	r3, r6
   20c24:	mov	r0, r9
   20c28:	sub	r2, fp, r7
   20c2c:	mov	r1, #1
   20c30:	bl	125c8 <fread@plt>
   20c34:	cmp	r0, #0
   20c38:	bne	20c18 <test_parse@@Base+0x98>
   20c3c:	cmp	fp, r7
   20c40:	mov	r5, r0
   20c44:	mov	r0, r6
   20c48:	bne	20e94 <test_parse@@Base+0x314>
   20c4c:	add	r3, sp, #68	; 0x44
   20c50:	mov	r6, #0
   20c54:	mov	r7, #0
   20c58:	str	r3, [sp, #12]
   20c5c:	bl	1264c <fclose@plt>
   20c60:	ldr	r1, [pc, #1008]	; 21058 <test_parse@@Base+0x4d8>
   20c64:	mov	r2, #1
   20c68:	mov	r3, r5
   20c6c:	mov	r0, sl
   20c70:	str	sl, [sp, #68]	; 0x44
   20c74:	strd	r6, [sp, #80]	; 0x50
   20c78:	strd	r4, [sp, #72]	; 0x48
   20c7c:	str	r2, [sp, #84]	; 0x54
   20c80:	mov	r2, r5
   20c84:	add	r1, pc, r1
   20c88:	strd	r6, [sp, #88]	; 0x58
   20c8c:	str	r4, [sp, #96]	; 0x60
   20c90:	str	r9, [sp, #100]	; 0x64
   20c94:	strd	r6, [sp, #104]	; 0x68
   20c98:	str	r4, [sp, #104]	; 0x68
   20c9c:	bl	22238 <flatcc_builder_start_buffer@@Base>
   20ca0:	cmp	r0, #0
   20ca4:	bne	21040 <test_parse@@Base+0x4c0>
   20ca8:	add	r3, sp, #48	; 0x30
   20cac:	mov	r2, r9
   20cb0:	ldr	r0, [sp, #12]
   20cb4:	mov	r1, r4
   20cb8:	str	r3, [sp, #16]
   20cbc:	bl	1b760 <_start@@Base+0x9028>
   20cc0:	ldr	r3, [sp, #92]	; 0x5c
   20cc4:	cmp	r3, #0
   20cc8:	str	r3, [sp, #12]
   20ccc:	beq	20d58 <test_parse@@Base+0x1d8>
   20cd0:	mvn	r3, #0
   20cd4:	ldr	r1, [sp, #8]
   20cd8:	ldr	r0, [sp, #12]
   20cdc:	str	r3, [sp, #12]
   20ce0:	ldr	r3, [pc, #884]	; 2105c <test_parse@@Base+0x4dc>
   20ce4:	ldr	r2, [sp, #72]	; 0x48
   20ce8:	ldr	r5, [sp, #104]	; 0x68
   20cec:	ldr	r3, [r8, r3]
   20cf0:	ldr	r6, [r1]
   20cf4:	sub	r5, r5, r2
   20cf8:	ldr	r8, [sp, #84]	; 0x54
   20cfc:	add	r5, r5, #1
   20d00:	ldr	r7, [r3]
   20d04:	bl	26de0 <flatcc_json_parser_error_string@@Base>
   20d08:	ldr	r1, [pc, #848]	; 21060 <test_parse@@Base+0x4e0>
   20d0c:	mov	r2, r6
   20d10:	mov	r3, r8
   20d14:	str	r5, [sp]
   20d18:	str	r0, [sp, #4]
   20d1c:	mov	r0, r7
   20d20:	add	r1, pc, r1
   20d24:	bl	12610 <fprintf@plt>
   20d28:	mov	r0, r4
   20d2c:	bl	12574 <free@plt>
   20d30:	mov	r0, sl
   20d34:	bl	21a4c <flatcc_builder_clear@@Base>
   20d38:	ldr	r0, [sp, #12]
   20d3c:	add	sp, sp, #348	; 0x15c
   20d40:	ldrd	r4, [sp]
   20d44:	ldrd	r6, [sp, #8]
   20d48:	ldrd	r8, [sp, #16]
   20d4c:	ldrd	sl, [sp, #24]
   20d50:	add	sp, sp, #32
   20d54:	pop	{pc}		; (ldr pc, [sp], #4)
   20d58:	mov	r0, sl
   20d5c:	ldr	r1, [sp, #48]	; 0x30
   20d60:	bl	22314 <flatcc_builder_end_buffer@@Base>
   20d64:	cmp	r0, #0
   20d68:	beq	21040 <test_parse@@Base+0x4c0>
   20d6c:	ldr	r2, [pc, #744]	; 2105c <test_parse@@Base+0x4dc>
   20d70:	str	r4, [sp, #108]	; 0x6c
   20d74:	ldr	r1, [pc, #744]	; 21064 <test_parse@@Base+0x4e4>
   20d78:	ldr	r3, [sp, #84]	; 0x54
   20d7c:	ldr	r0, [r8, r2]
   20d80:	add	r1, pc, r1
   20d84:	ldr	r2, [sp, #8]
   20d88:	str	r0, [sp, #36]	; 0x24
   20d8c:	ldr	r0, [r0]
   20d90:	ldr	r2, [r2]
   20d94:	bl	12610 <fprintf@plt>
   20d98:	add	r1, sp, #44	; 0x2c
   20d9c:	mov	r0, sl
   20da0:	bl	25670 <flatcc_builder_finalize_aligned_buffer@@Base>
   20da4:	ldr	r3, [pc, #700]	; 21068 <test_parse@@Base+0x4e8>
   20da8:	str	r0, [sp, #8]
   20dac:	ldr	r2, [pc, #696]	; 2106c <test_parse@@Base+0x4ec>
   20db0:	ldr	r1, [pc, #696]	; 21070 <test_parse@@Base+0x4f0>
   20db4:	ldr	r3, [r8, r3]
   20db8:	add	r2, pc, r2
   20dbc:	ldr	r7, [sp, #44]	; 0x2c
   20dc0:	add	r1, pc, r1
   20dc4:	ldr	r6, [r3]
   20dc8:	str	r3, [sp, #32]
   20dcc:	mov	r0, r6
   20dd0:	bl	12610 <fprintf@plt>
   20dd4:	cmp	r7, #0
   20dd8:	beq	20efc <test_parse@@Base+0x37c>
   20ddc:	ldr	r3, [pc, #656]	; 21074 <test_parse@@Base+0x4f4>
   20de0:	add	r3, pc, r3
   20de4:	str	r3, [sp, #24]
   20de8:	ldr	r3, [sp, #8]
   20dec:	sub	r9, r3, #1
   20df0:	ldr	r3, [pc, #640]	; 21078 <test_parse@@Base+0x4f8>
   20df4:	add	r3, pc, r3
   20df8:	str	r3, [sp, #28]
   20dfc:	ldr	r3, [pc, #632]	; 2107c <test_parse@@Base+0x4fc>
   20e00:	add	r3, pc, r3
   20e04:	str	r3, [sp, #20]
   20e08:	b	20e74 <test_parse@@Base+0x2f4>
   20e0c:	cmp	r5, #0
   20e10:	mov	r0, r6
   20e14:	ldr	r2, [sp, #16]
   20e18:	ldr	r1, [sp, #28]
   20e1c:	beq	20e24 <test_parse@@Base+0x2a4>
   20e20:	bl	12610 <fprintf@plt>
   20e24:	mov	r2, r5
   20e28:	mov	r0, r6
   20e2c:	ldr	r1, [sp, #24]
   20e30:	bl	12610 <fprintf@plt>
   20e34:	ldrb	r2, [r9, #1]!
   20e38:	mov	r0, r6
   20e3c:	add	r5, r5, #1
   20e40:	ldr	r1, [sp, #20]
   20e44:	bl	12610 <fprintf@plt>
   20e48:	add	r3, sp, #344	; 0x158
   20e4c:	mov	r2, #0
   20e50:	add	r8, r3, r8
   20e54:	ldrb	r3, [r9]
   20e58:	strb	r2, [r8, #-295]	; 0xfffffed9
   20e5c:	sub	r2, r3, #32
   20e60:	cmp	r2, #94	; 0x5e
   20e64:	movhi	r3, #46	; 0x2e
   20e68:	cmp	r7, r5
   20e6c:	strb	r3, [r8, #-296]	; 0xfffffed8
   20e70:	beq	20ecc <test_parse@@Base+0x34c>
   20e74:	ands	r8, r5, #15
   20e78:	beq	20e0c <test_parse@@Base+0x28c>
   20e7c:	tst	r5, #7
   20e80:	bne	20e34 <test_parse@@Base+0x2b4>
   20e84:	mov	r1, r6
   20e88:	mov	r0, #32
   20e8c:	bl	12658 <fputc@plt>
   20e90:	b	20e34 <test_parse@@Base+0x2b4>
   20e94:	bl	1264c <fclose@plt>
   20e98:	mov	r0, r4
   20e9c:	bl	12574 <free@plt>
   20ea0:	ldr	r3, [pc, #436]	; 2105c <test_parse@@Base+0x4dc>
   20ea4:	mvn	r2, #0
   20ea8:	ldr	r1, [pc, #464]	; 21080 <test_parse@@Base+0x500>
   20eac:	str	r2, [sp, #12]
   20eb0:	ldr	r2, [sp, #8]
   20eb4:	ldr	r3, [r8, r3]
   20eb8:	add	r1, pc, r1
   20ebc:	ldr	r2, [r2]
   20ec0:	ldr	r0, [r3]
   20ec4:	bl	12610 <fprintf@plt>
   20ec8:	b	20d38 <test_parse@@Base+0x1b8>
   20ecc:	tst	r7, #15
   20ed0:	beq	20efc <test_parse@@Base+0x37c>
   20ed4:	ldr	r5, [pc, #424]	; 21084 <test_parse@@Base+0x504>
   20ed8:	add	r5, pc, r5
   20edc:	add	r7, r7, #1
   20ee0:	mov	r3, r6
   20ee4:	mov	r2, #3
   20ee8:	mov	r1, #1
   20eec:	mov	r0, r5
   20ef0:	bl	125bc <fwrite@plt>
   20ef4:	tst	r7, #15
   20ef8:	bne	20edc <test_parse@@Base+0x35c>
   20efc:	ldr	r1, [pc, #388]	; 21088 <test_parse@@Base+0x508>
   20f00:	mov	r0, r6
   20f04:	ldr	r2, [sp, #16]
   20f08:	add	r1, pc, r1
   20f0c:	bl	12610 <fprintf@plt>
   20f10:	ldr	r1, [pc, #372]	; 2108c <test_parse@@Base+0x50c>
   20f14:	mov	r2, fp
   20f18:	ldr	r0, [sp, #36]	; 0x24
   20f1c:	ldr	r3, [sp, #44]	; 0x2c
   20f20:	add	r1, pc, r1
   20f24:	ldr	r0, [r0]
   20f28:	bl	12610 <fprintf@plt>
   20f2c:	ldr	r0, [sp, #8]
   20f30:	bl	208e0 <verify_parse@@Base>
   20f34:	ldr	r3, [sp, #32]
   20f38:	ldr	r2, [pc, #336]	; 21090 <test_parse@@Base+0x510>
   20f3c:	ldr	r1, [pc, #336]	; 21094 <test_parse@@Base+0x514>
   20f40:	ldr	r5, [r3]
   20f44:	add	r2, pc, r2
   20f48:	ldr	r6, [sp, #44]	; 0x2c
   20f4c:	add	r1, pc, r1
   20f50:	mov	r0, r5
   20f54:	bl	12610 <fprintf@plt>
   20f58:	cmp	r6, #0
   20f5c:	beq	20ff4 <test_parse@@Base+0x474>
   20f60:	ldr	r3, [sp, #8]
   20f64:	sub	r6, r6, #1
   20f68:	ldr	fp, [pc, #296]	; 21098 <test_parse@@Base+0x518>
   20f6c:	ldr	r9, [pc, #296]	; 2109c <test_parse@@Base+0x51c>
   20f70:	sub	r7, r3, #1
   20f74:	add	r6, r6, r3
   20f78:	ldr	r8, [pc, #288]	; 210a0 <test_parse@@Base+0x520>
   20f7c:	rsb	r3, r3, #1
   20f80:	add	fp, pc, fp
   20f84:	str	r3, [sp, #16]
   20f88:	add	r9, pc, r9
   20f8c:	add	r8, pc, r8
   20f90:	b	20fb4 <test_parse@@Base+0x434>
   20f94:	tst	r3, #7
   20f98:	beq	20fdc <test_parse@@Base+0x45c>
   20f9c:	ldrb	r2, [r7, #1]!
   20fa0:	mov	r1, r8
   20fa4:	mov	r0, r5
   20fa8:	bl	12610 <fprintf@plt>
   20fac:	cmp	r6, r7
   20fb0:	beq	20ff4 <test_parse@@Base+0x474>
   20fb4:	ldr	r3, [sp, #16]
   20fb8:	add	r3, r3, r7
   20fbc:	tst	r3, #15
   20fc0:	bne	20f94 <test_parse@@Base+0x414>
   20fc4:	mov	r3, r5
   20fc8:	mov	r2, #4
   20fcc:	mov	r1, #1
   20fd0:	mov	r0, r9
   20fd4:	bl	125bc <fwrite@plt>
   20fd8:	b	20f9c <test_parse@@Base+0x41c>
   20fdc:	mov	r3, r5
   20fe0:	mov	r2, #3
   20fe4:	mov	r1, #1
   20fe8:	mov	r0, fp
   20fec:	bl	125bc <fwrite@plt>
   20ff0:	b	20f9c <test_parse@@Base+0x41c>
   20ff4:	ldr	r0, [pc, #168]	; 210a4 <test_parse@@Base+0x524>
   20ff8:	mov	r3, r5
   20ffc:	mov	r2, #4
   21000:	mov	r1, #1
   21004:	add	r0, pc, r0
   21008:	bl	125bc <fwrite@plt>
   2100c:	mov	r0, sl
   21010:	bl	21a40 <flatcc_builder_reset@@Base>
   21014:	ldr	r3, [sp, #8]
   21018:	cmp	r3, #0
   2101c:	beq	20d28 <test_parse@@Base+0x1a8>
   21020:	ldr	r0, [sp, #8]
   21024:	bl	2579c <flatcc_builder_aligned_free@@Base>
   21028:	b	20d28 <test_parse@@Base+0x1a8>
   2102c:	bl	1264c <fclose@plt>
   21030:	b	20ea0 <test_parse@@Base+0x320>
   21034:	mov	r0, r6
   21038:	bl	1264c <fclose@plt>
   2103c:	b	20ea0 <test_parse@@Base+0x320>
   21040:	ldr	r3, [sp, #92]	; 0x5c
   21044:	str	r3, [sp, #12]
   21048:	b	20cd0 <test_parse@@Base+0x150>
   2104c:	andeq	ip, r1, ip, asr #8
   21050:	andeq	r0, r0, r8, ror r0
   21054:	andeq	r9, r0, r4, lsr #28
   21058:	andeq	r9, r0, ip, asr sp
   2105c:	andeq	r0, r0, r0, ror r0
   21060:	andeq	r9, r0, r4, lsl #27
   21064:	andeq	r9, r0, ip, lsl #25
   21068:	andeq	r0, r0, r0, lsl #1
   2106c:	andeq	r9, r0, r8, ror ip
   21070:	muleq	r0, r0, ip
   21074:	ldrdeq	r9, [r0], -r4
   21078:	andeq	r9, r0, r4, ror #24
   2107c:			; <UNDEFINED> instruction: 0x00009cbc
   21080:	andeq	r9, r0, r0, lsr fp
   21084:	andeq	r9, r0, ip, ror #23
   21088:	andeq	r9, r0, r0, asr fp
   2108c:	andeq	r9, r0, r0, asr #22
   21090:	andeq	r9, r0, r4, lsl #22
   21094:	andeq	r9, r0, r8, lsr fp
   21098:	andeq	r9, r0, r4, asr #22
   2109c:	andeq	r9, r0, r8, asr #22
   210a0:	andeq	r9, r0, ip, asr #22
   210a4:	andeq	r9, r0, r4, asr #21
   210a8:	strd	r4, [sp, #-16]!
   210ac:	mov	r4, r0
   210b0:	mov	r0, #1
   210b4:	ldr	ip, [r4, #28]
   210b8:	mov	r3, r0
   210bc:	mov	r5, r2
   210c0:	str	r6, [sp, #8]
   210c4:	str	lr, [sp, #12]
   210c8:	sub	sp, sp, #8
   210cc:	str	r0, [sp]
   210d0:	add	r2, r1, ip
   210d4:	add	r1, r4, #60	; 0x3c
   210d8:	ldr	r0, [r4, #40]	; 0x28
   210dc:	ldr	r6, [r4, #48]	; 0x30
   210e0:	blx	r6
   210e4:	cmp	r0, #0
   210e8:	bne	21128 <test_parse@@Base+0x5a8>
   210ec:	ldr	r1, [r4, #28]
   210f0:	ldr	ip, [r4, #32]
   210f4:	ldrd	r2, [r4, #60]	; 0x3c
   210f8:	sub	r3, r3, r1
   210fc:	add	r2, r2, r1
   21100:	cmp	r3, r5
   21104:	movcs	r3, r5
   21108:	str	r2, [r4, #16]
   2110c:	str	r3, [r4, #24]
   21110:	str	r5, [ip, #4]
   21114:	add	sp, sp, #8
   21118:	ldrd	r4, [sp]
   2111c:	ldr	r6, [sp, #8]
   21120:	add	sp, sp, #12
   21124:	pop	{pc}		; (ldr pc, [sp], #4)
   21128:	mvn	r0, #0
   2112c:	b	21114 <test_parse@@Base+0x594>

00021130 <flatcc_builder_default_alloc@@Base>:
   21130:	strd	r4, [sp, #-24]!	; 0xffffffe8
   21134:	subs	r5, r2, #0
   21138:	strd	r6, [sp, #8]
   2113c:	mov	r6, r1
   21140:	str	r8, [sp, #16]
   21144:	str	lr, [sp, #20]
   21148:	beq	21180 <flatcc_builder_default_alloc@@Base+0x50>
   2114c:	mov	r7, r3
   21150:	ldr	r3, [sp, #24]
   21154:	sub	r2, r3, #1
   21158:	cmp	r2, #6
   2115c:	addls	pc, pc, r2, lsl #2
   21160:	b	21230 <flatcc_builder_default_alloc@@Base+0x100>
   21164:	b	211b0 <flatcc_builder_default_alloc@@Base+0x80>
   21168:	b	21230 <flatcc_builder_default_alloc@@Base+0x100>
   2116c:	b	21230 <flatcc_builder_default_alloc@@Base+0x100>
   21170:	b	21228 <flatcc_builder_default_alloc@@Base+0xf8>
   21174:	b	21218 <flatcc_builder_default_alloc@@Base+0xe8>
   21178:	b	21230 <flatcc_builder_default_alloc@@Base+0x100>
   2117c:	b	21220 <flatcc_builder_default_alloc@@Base+0xf0>
   21180:	ldr	r0, [r1]
   21184:	cmp	r0, #0
   21188:	beq	2119c <flatcc_builder_default_alloc@@Base+0x6c>
   2118c:	bl	12574 <free@plt>
   21190:	mov	r0, r5
   21194:	str	r5, [r6]
   21198:	str	r5, [r6, #4]
   2119c:	ldrd	r4, [sp]
   211a0:	ldrd	r6, [sp, #8]
   211a4:	ldr	r8, [sp, #16]
   211a8:	add	sp, sp, #20
   211ac:	pop	{pc}		; (ldr pc, [sp], #4)
   211b0:	mov	r4, #256	; 0x100
   211b4:	cmp	r4, r5
   211b8:	bcs	211c8 <flatcc_builder_default_alloc@@Base+0x98>
   211bc:	lsl	r4, r4, #1
   211c0:	cmp	r5, r4
   211c4:	bhi	211bc <flatcc_builder_default_alloc@@Base+0x8c>
   211c8:	ldr	r2, [r6, #4]
   211cc:	cmp	r5, r2
   211d0:	bhi	211e0 <flatcc_builder_default_alloc@@Base+0xb0>
   211d4:	cmp	r4, r2, lsr #1
   211d8:	movls	r0, #0
   211dc:	bls	2119c <flatcc_builder_default_alloc@@Base+0x6c>
   211e0:	mov	r1, r4
   211e4:	ldr	r0, [r6]
   211e8:	bl	125b0 <realloc@plt>
   211ec:	subs	r5, r0, #0
   211f0:	beq	2124c <flatcc_builder_default_alloc@@Base+0x11c>
   211f4:	cmp	r7, #0
   211f8:	beq	21208 <flatcc_builder_default_alloc@@Base+0xd8>
   211fc:	ldr	r0, [r6, #4]
   21200:	cmp	r0, r4
   21204:	bcc	21238 <flatcc_builder_default_alloc@@Base+0x108>
   21208:	mov	r0, #0
   2120c:	str	r5, [r6]
   21210:	str	r4, [r6, #4]
   21214:	b	2119c <flatcc_builder_default_alloc@@Base+0x6c>
   21218:	mov	r4, r5
   2121c:	b	211c8 <flatcc_builder_default_alloc@@Base+0x98>
   21220:	mov	r4, #64	; 0x40
   21224:	b	211b4 <flatcc_builder_default_alloc@@Base+0x84>
   21228:	mov	r4, #288	; 0x120
   2122c:	b	211b4 <flatcc_builder_default_alloc@@Base+0x84>
   21230:	mov	r4, #32
   21234:	b	211b4 <flatcc_builder_default_alloc@@Base+0x84>
   21238:	sub	r2, r4, r0
   2123c:	mov	r1, #0
   21240:	add	r0, r5, r0
   21244:	bl	12628 <memset@plt>
   21248:	b	21208 <flatcc_builder_default_alloc@@Base+0xd8>
   2124c:	mvn	r0, #0
   21250:	b	2119c <flatcc_builder_default_alloc@@Base+0x6c>
   21254:	ldr	r3, [pc, #32]	; 2127c <flatcc_builder_default_alloc@@Base+0x14c>
   21258:	mov	r2, #308	; 0x134
   2125c:	str	r4, [sp, #-8]!
   21260:	ldr	r1, [pc, #24]	; 21280 <flatcc_builder_default_alloc@@Base+0x150>
   21264:	str	lr, [sp, #4]
   21268:	ldr	r0, [pc, #20]	; 21284 <flatcc_builder_default_alloc@@Base+0x154>
   2126c:	add	r3, pc, r3
   21270:	add	r1, pc, r1
   21274:	add	r0, pc, r0
   21278:	bl	1267c <__assert_fail@plt>
   2127c:	andeq	r9, r0, r4, ror #17
   21280:	andeq	sl, r0, r0, lsr r0
   21284:	strheq	sl, [r0], -r4
   21288:	ldr	r3, [pc, #36]	; 212b4 <flatcc_builder_default_alloc@@Base+0x184>
   2128c:	movw	r2, #677	; 0x2a5
   21290:	str	r4, [sp, #-8]!
   21294:	ldr	r1, [pc, #28]	; 212b8 <flatcc_builder_default_alloc@@Base+0x188>
   21298:	str	lr, [sp, #4]
   2129c:	ldr	r0, [pc, #24]	; 212bc <flatcc_builder_default_alloc@@Base+0x18c>
   212a0:	add	r3, pc, r3
   212a4:	add	r3, r3, #16
   212a8:	add	r1, pc, r1
   212ac:	add	r0, pc, r0
   212b0:	bl	1267c <__assert_fail@plt>
   212b4:			; <UNDEFINED> instruction: 0x000098b0
   212b8:	strdeq	r9, [r0], -r8
   212bc:	andeq	sl, r0, ip, ror r0
   212c0:	strd	r4, [sp, #-12]!
   212c4:	cmp	r2, #0
   212c8:	mov	ip, r0
   212cc:	str	lr, [sp, #8]
   212d0:	sub	sp, sp, #84	; 0x54
   212d4:	ldr	lr, [pc, #248]	; 213d4 <flatcc_builder_default_alloc@@Base+0x2a4>
   212d8:	add	lr, pc, lr
   212dc:	bne	212ec <flatcc_builder_default_alloc@@Base+0x1bc>
   212e0:	ldrh	r2, [r0, #132]	; 0x84
   212e4:	cmp	r2, #0
   212e8:	moveq	r2, #1
   212ec:	ldrh	r0, [r1]
   212f0:	cmp	r0, #3
   212f4:	bhi	21304 <flatcc_builder_default_alloc@@Base+0x1d4>
   212f8:	mov	r4, #4
   212fc:	mov	r0, r4
   21300:	strh	r4, [r1]
   21304:	cmp	r2, r0
   21308:	strhhi	r2, [r1]
   2130c:	cmp	r3, #0
   21310:	bne	21324 <flatcc_builder_default_alloc@@Base+0x1f4>
   21314:	ldr	r4, [ip, #140]	; 0x8c
   21318:	sub	r2, r2, #1
   2131c:	ands	r1, r2, r4
   21320:	bne	21338 <flatcc_builder_default_alloc@@Base+0x208>
   21324:	mov	r0, #0
   21328:	add	sp, sp, #84	; 0x54
   2132c:	ldrd	r4, [sp]
   21330:	add	sp, sp, #8
   21334:	pop	{pc}		; (ldr pc, [sp], #4)
   21338:	ldr	r3, [pc, #152]	; 213d8 <flatcc_builder_default_alloc@@Base+0x2a8>
   2133c:	add	r0, r4, r1
   21340:	mov	r2, #1
   21344:	str	r1, [sp, #8]
   21348:	cmp	r4, r0
   2134c:	ldr	r3, [lr, r3]
   21350:	str	r0, [ip, #140]	; 0x8c
   21354:	strd	r2, [sp, #12]
   21358:	str	r1, [sp, #20]
   2135c:	bgt	213b0 <flatcc_builder_default_alloc@@Base+0x280>
   21360:	mov	r3, r4
   21364:	str	r1, [sp]
   21368:	add	r1, sp, #16
   2136c:	ldr	r0, [ip, #36]	; 0x24
   21370:	ldr	r5, [ip, #44]	; 0x2c
   21374:	blx	r5
   21378:	cmp	r0, #0
   2137c:	bne	213ac <flatcc_builder_default_alloc@@Base+0x27c>
   21380:	cmn	r4, #1
   21384:	bne	21324 <flatcc_builder_default_alloc@@Base+0x1f4>
   21388:	ldr	r3, [pc, #76]	; 213dc <flatcc_builder_default_alloc@@Base+0x2ac>
   2138c:	movw	r2, #702	; 0x2be
   21390:	ldr	r1, [pc, #72]	; 213e0 <flatcc_builder_default_alloc@@Base+0x2b0>
   21394:	ldr	r0, [pc, #72]	; 213e4 <flatcc_builder_default_alloc@@Base+0x2b4>
   21398:	add	r3, pc, r3
   2139c:	add	r3, r3, #28
   213a0:	add	r1, pc, r1
   213a4:	add	r0, pc, r0
   213a8:	bl	1267c <__assert_fail@plt>
   213ac:	bl	21288 <flatcc_builder_default_alloc@@Base+0x158>
   213b0:	ldr	r3, [pc, #48]	; 213e8 <flatcc_builder_default_alloc@@Base+0x2b8>
   213b4:	movw	r2, #673	; 0x2a1
   213b8:	ldr	r1, [pc, #44]	; 213ec <flatcc_builder_default_alloc@@Base+0x2bc>
   213bc:	ldr	r0, [pc, #44]	; 213f0 <flatcc_builder_default_alloc@@Base+0x2c0>
   213c0:	add	r3, pc, r3
   213c4:	add	r3, r3, #16
   213c8:	add	r1, pc, r1
   213cc:	add	r0, pc, r0
   213d0:	bl	1267c <__assert_fail@plt>
   213d4:	andeq	fp, r1, r0, lsr #26
   213d8:	andeq	r0, r0, ip, rrx
   213dc:			; <UNDEFINED> instruction: 0x000097b8
   213e0:	andeq	r9, r0, r0, lsl #30
   213e4:	andeq	r9, r0, r4, lsl #31
   213e8:	muleq	r0, r0, r7
   213ec:	ldrdeq	r9, [r0], -r8
   213f0:	andeq	r9, r0, ip, asr pc
   213f4:	ldr	r3, [pc, #36]	; 21420 <flatcc_builder_default_alloc@@Base+0x2f0>
   213f8:	movw	r2, #651	; 0x28b
   213fc:	str	r4, [sp, #-8]!
   21400:	ldr	r1, [pc, #28]	; 21424 <flatcc_builder_default_alloc@@Base+0x2f4>
   21404:	str	lr, [sp, #4]
   21408:	ldr	r0, [pc, #24]	; 21428 <flatcc_builder_default_alloc@@Base+0x2f8>
   2140c:	add	r3, pc, r3
   21410:	add	r3, r3, #44	; 0x2c
   21414:	add	r1, pc, r1
   21418:	add	r0, pc, r0
   2141c:	bl	1267c <__assert_fail@plt>
   21420:	andeq	r9, r0, r4, asr #14
   21424:	andeq	r9, r0, ip, lsl #29
   21428:	andeq	r9, r0, r0, lsl pc
   2142c:	ldr	r3, [pc, #36]	; 21458 <flatcc_builder_default_alloc@@Base+0x328>
   21430:	mov	r2, #892	; 0x37c
   21434:	str	r4, [sp, #-8]!
   21438:	ldr	r1, [pc, #28]	; 2145c <flatcc_builder_default_alloc@@Base+0x32c>
   2143c:	str	lr, [sp, #4]
   21440:	ldr	r0, [pc, #24]	; 21460 <flatcc_builder_default_alloc@@Base+0x330>
   21444:	add	r3, pc, r3
   21448:	add	r3, r3, #56	; 0x38
   2144c:	add	r1, pc, r1
   21450:	add	r0, pc, r0
   21454:	bl	1267c <__assert_fail@plt>
   21458:	andeq	r9, r0, ip, lsl #14
   2145c:	andeq	r9, r0, r4, asr lr
   21460:			; <UNDEFINED> instruction: 0x00009eb0
   21464:	ldrd	r2, [r0, #156]	; 0x9c
   21468:	strd	r4, [sp, #-20]!	; 0xffffffec
   2146c:	mov	r5, r1
   21470:	mov	r4, r0
   21474:	strd	r6, [sp, #8]
   21478:	str	lr, [sp, #16]
   2147c:	sub	sp, sp, #12
   21480:	add	r1, r2, #1
   21484:	cmp	r1, r3
   21488:	str	r1, [r0, #156]	; 0x9c
   2148c:	ble	2156c <flatcc_builder_default_alloc@@Base+0x43c>
   21490:	ldr	r3, [r0, #176]	; 0xb0
   21494:	cmp	r1, r3
   21498:	cmpgt	r3, #0
   2149c:	movgt	r3, #1
   214a0:	movle	r3, #0
   214a4:	bgt	2157c <flatcc_builder_default_alloc@@Base+0x44c>
   214a8:	add	r2, r2, r2, lsl #3
   214ac:	ldr	r1, [r0, #88]	; 0x58
   214b0:	lsl	r6, r2, #2
   214b4:	add	r2, r6, #36	; 0x24
   214b8:	cmp	r2, r1
   214bc:	bls	214e0 <flatcc_builder_default_alloc@@Base+0x3b0>
   214c0:	mov	ip, #4
   214c4:	add	r1, r0, #84	; 0x54
   214c8:	ldr	r0, [r0, #40]	; 0x28
   214cc:	str	ip, [sp]
   214d0:	ldr	r7, [r4, #48]	; 0x30
   214d4:	blx	r7
   214d8:	cmp	r0, #0
   214dc:	bne	21584 <flatcc_builder_default_alloc@@Base+0x454>
   214e0:	ldr	r2, [r4, #84]	; 0x54
   214e4:	add	r2, r2, r6
   214e8:	cmp	r2, #0
   214ec:	str	r2, [r4, #32]
   214f0:	beq	2157c <flatcc_builder_default_alloc@@Base+0x44c>
   214f4:	ldr	r3, [r4, #88]	; 0x58
   214f8:	movw	r0, #36409	; 0x8e39
   214fc:	movt	r0, #14563	; 0x38e3
   21500:	ldr	r1, [r4, #176]	; 0xb0
   21504:	umull	r0, r3, r0, r3
   21508:	lsr	r3, r3, #3
   2150c:	cmp	r3, r1
   21510:	cmpgt	r1, #0
   21514:	movgt	r3, r1
   21518:	str	r3, [r4, #160]	; 0xa0
   2151c:	ldr	r3, [r4, #20]
   21520:	mov	r1, #0
   21524:	mvn	lr, #3
   21528:	mov	r0, r1
   2152c:	ldr	ip, [r4, #28]
   21530:	ldrh	r6, [r4, #130]	; 0x82
   21534:	str	r3, [r2, #8]
   21538:	add	r3, r3, ip
   2153c:	add	r3, r3, #7
   21540:	bic	r3, r3, #7
   21544:	strh	r6, [r2, #12]
   21548:	strh	r5, [r4, #130]	; 0x82
   2154c:	stm	r2, {ip, lr}
   21550:	str	r1, [r4, #20]
   21554:	str	r3, [r4, #28]
   21558:	add	sp, sp, #12
   2155c:	ldrd	r4, [sp]
   21560:	ldrd	r6, [sp, #8]
   21564:	add	sp, sp, #16
   21568:	pop	{pc}		; (ldr pc, [sp], #4)
   2156c:	ldr	r2, [r0, #32]
   21570:	add	r2, r2, #36	; 0x24
   21574:	str	r2, [r0, #32]
   21578:	b	2151c <flatcc_builder_default_alloc@@Base+0x3ec>
   2157c:	mvn	r0, #0
   21580:	b	21558 <flatcc_builder_default_alloc@@Base+0x428>
   21584:	bl	21254 <flatcc_builder_default_alloc@@Base+0x124>
   21588:	strd	r4, [sp, #-20]!	; 0xffffffec
   2158c:	mov	r4, r0
   21590:	mov	r5, #4
   21594:	ldrh	r0, [r0, #128]	; 0x80
   21598:	strd	r6, [sp, #8]
   2159c:	str	lr, [sp, #16]
   215a0:	sub	sp, sp, #92	; 0x5c
   215a4:	ldr	lr, [pc, #464]	; 2177c <flatcc_builder_default_alloc@@Base+0x64c>
   215a8:	str	r2, [sp, #12]
   215ac:	cmp	r0, #3
   215b0:	ldr	r6, [r4, #136]	; 0x88
   215b4:	movls	r0, #4
   215b8:	str	r5, [sp, #16]
   215bc:	str	r5, [sp, #28]
   215c0:	strhls	r0, [r4, #128]	; 0x80
   215c4:	mov	r0, #1
   215c8:	lsls	ip, r2, #2
   215cc:	add	lr, pc, lr
   215d0:	str	r0, [sp, #20]
   215d4:	add	r0, sp, #12
   215d8:	str	r0, [sp, #24]
   215dc:	and	r0, r6, #3
   215e0:	beq	215fc <flatcc_builder_default_alloc@@Base+0x4cc>
   215e4:	add	r5, ip, r5
   215e8:	mov	r7, #2
   215ec:	str	r5, [sp, #16]
   215f0:	str	r7, [sp, #20]
   215f4:	str	r1, [sp, #32]
   215f8:	str	ip, [sp, #36]	; 0x24
   215fc:	cmp	r0, #0
   21600:	beq	21630 <flatcc_builder_default_alloc@@Base+0x500>
   21604:	ldr	r7, [pc, #372]	; 21780 <flatcc_builder_default_alloc@@Base+0x650>
   21608:	add	r5, r5, r0
   2160c:	ldr	ip, [sp, #20]
   21610:	str	r5, [sp, #16]
   21614:	ldr	r7, [lr, r7]
   21618:	add	lr, sp, #88	; 0x58
   2161c:	add	ip, ip, #1
   21620:	add	lr, lr, ip, lsl #3
   21624:	str	ip, [sp, #20]
   21628:	str	r7, [lr, #-72]	; 0xffffffb8
   2162c:	str	r0, [lr, #-68]	; 0xffffffbc
   21630:	cmp	r2, #0
   21634:	beq	216c0 <flatcc_builder_default_alloc@@Base+0x590>
   21638:	sub	r6, r1, r6
   2163c:	add	lr, r2, r3
   21640:	add	r6, r6, r5
   21644:	mov	r2, r3
   21648:	b	21678 <flatcc_builder_default_alloc@@Base+0x548>
   2164c:	sub	r0, r6, r1
   21650:	cmp	r3, #0
   21654:	add	r0, r0, ip
   21658:	str	r0, [r1, #-4]
   2165c:	beq	2166c <flatcc_builder_default_alloc@@Base+0x53c>
   21660:	ldrb	r0, [r2]
   21664:	cmp	r0, #0
   21668:	beq	21730 <flatcc_builder_default_alloc@@Base+0x600>
   2166c:	add	r2, r2, #1
   21670:	cmp	lr, r2
   21674:	beq	216bc <flatcc_builder_default_alloc@@Base+0x58c>
   21678:	ldr	ip, [r1], #4
   2167c:	cmp	ip, #0
   21680:	bne	2164c <flatcc_builder_default_alloc@@Base+0x51c>
   21684:	cmp	r3, #0
   21688:	beq	2170c <flatcc_builder_default_alloc@@Base+0x5dc>
   2168c:	ldrb	r0, [r2]
   21690:	cmp	r0, #0
   21694:	beq	2166c <flatcc_builder_default_alloc@@Base+0x53c>
   21698:	ldr	r3, [pc, #228]	; 21784 <flatcc_builder_default_alloc@@Base+0x654>
   2169c:	movw	r2, #1461	; 0x5b5
   216a0:	ldr	r1, [pc, #224]	; 21788 <flatcc_builder_default_alloc@@Base+0x658>
   216a4:	ldr	r0, [pc, #224]	; 2178c <flatcc_builder_default_alloc@@Base+0x65c>
   216a8:	add	r3, pc, r3
   216ac:	add	r3, r3, #76	; 0x4c
   216b0:	add	r1, pc, r1
   216b4:	add	r0, pc, r0
   216b8:	bl	1267c <__assert_fail@plt>
   216bc:	ldr	r6, [r4, #136]	; 0x88
   216c0:	sub	r7, r6, r5
   216c4:	cmp	r7, r6
   216c8:	bge	21758 <flatcc_builder_default_alloc@@Base+0x628>
   216cc:	mov	r3, r7
   216d0:	add	r1, sp, #24
   216d4:	str	r5, [sp]
   216d8:	ldr	r2, [sp, #20]
   216dc:	ldr	r0, [r4, #36]	; 0x24
   216e0:	ldr	r5, [r4, #44]	; 0x2c
   216e4:	blx	r5
   216e8:	cmp	r0, #0
   216ec:	bne	21754 <flatcc_builder_default_alloc@@Base+0x624>
   216f0:	mov	r0, r7
   216f4:	str	r7, [r4, #136]	; 0x88
   216f8:	add	sp, sp, #92	; 0x5c
   216fc:	ldrd	r4, [sp]
   21700:	ldrd	r6, [sp, #8]
   21704:	add	sp, sp, #16
   21708:	pop	{pc}		; (ldr pc, [sp], #4)
   2170c:	ldr	r3, [pc, #124]	; 21790 <flatcc_builder_default_alloc@@Base+0x660>
   21710:	movw	r2, #1463	; 0x5b7
   21714:	ldr	r1, [pc, #120]	; 21794 <flatcc_builder_default_alloc@@Base+0x664>
   21718:	ldr	r0, [pc, #120]	; 21798 <flatcc_builder_default_alloc@@Base+0x668>
   2171c:	add	r3, pc, r3
   21720:	add	r3, r3, #76	; 0x4c
   21724:	add	r1, pc, r1
   21728:	add	r0, pc, r0
   2172c:	bl	1267c <__assert_fail@plt>
   21730:	ldr	r3, [pc, #100]	; 2179c <flatcc_builder_default_alloc@@Base+0x66c>
   21734:	movw	r2, #1457	; 0x5b1
   21738:	ldr	r1, [pc, #96]	; 217a0 <flatcc_builder_default_alloc@@Base+0x670>
   2173c:	ldr	r0, [pc, #96]	; 217a4 <flatcc_builder_default_alloc@@Base+0x674>
   21740:	add	r3, pc, r3
   21744:	add	r3, r3, #76	; 0x4c
   21748:	add	r1, pc, r1
   2174c:	add	r0, pc, r0
   21750:	bl	1267c <__assert_fail@plt>
   21754:	bl	213f4 <flatcc_builder_default_alloc@@Base+0x2c4>
   21758:	ldr	r3, [pc, #72]	; 217a8 <flatcc_builder_default_alloc@@Base+0x678>
   2175c:	movw	r2, #647	; 0x287
   21760:	ldr	r1, [pc, #68]	; 217ac <flatcc_builder_default_alloc@@Base+0x67c>
   21764:	ldr	r0, [pc, #68]	; 217b0 <flatcc_builder_default_alloc@@Base+0x680>
   21768:	add	r3, pc, r3
   2176c:	add	r3, r3, #44	; 0x2c
   21770:	add	r1, pc, r1
   21774:	add	r0, pc, r0
   21778:	bl	1267c <__assert_fail@plt>
   2177c:	andeq	fp, r1, ip, lsr #20
   21780:	andeq	r0, r0, ip, rrx
   21784:	andeq	r9, r0, r8, lsr #9
   21788:	strdeq	r9, [r0], -r0
   2178c:	andeq	r9, r0, r8, ror ip
   21790:	andeq	r9, r0, r4, lsr r4
   21794:	andeq	r9, r0, ip, ror fp
   21798:	andeq	r9, r0, r0, lsl #24
   2179c:	andeq	r9, r0, r0, lsl r4
   217a0:	andeq	r9, r0, r8, asr fp
   217a4:	ldrdeq	r9, [r0], -r0
   217a8:	andeq	r9, r0, r8, ror #7
   217ac:	andeq	r9, r0, r0, lsr fp
   217b0:			; <UNDEFINED> instruction: 0x00009bb4

000217b4 <flatcc_builder_flush_vtable_cache@@Base>:
   217b4:	ldr	r3, [r0, #116]	; 0x74
   217b8:	cmp	r3, #0
   217bc:	bxeq	lr
   217c0:	str	r4, [sp, #-8]!
   217c4:	mov	r4, r0
   217c8:	mov	r1, #0
   217cc:	ldr	r0, [r0, #92]	; 0x5c
   217d0:	ldr	r2, [r4, #96]	; 0x60
   217d4:	str	lr, [sp, #4]
   217d8:	bl	12628 <memset@plt>
   217dc:	mov	r3, #16
   217e0:	mov	r2, #0
   217e4:	strd	r2, [r4, #120]	; 0x78
   217e8:	ldr	r4, [sp]
   217ec:	add	sp, sp, #4
   217f0:	pop	{pc}		; (ldr pc, [sp], #4)

000217f4 <flatcc_builder_custom_init@@Base>:
   217f4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   217f8:	mov	r5, r3
   217fc:	mov	r4, r0
   21800:	strd	r6, [sp, #8]
   21804:	mov	r6, r1
   21808:	mov	r1, #0
   2180c:	ldr	r7, [pc, #124]	; 21890 <flatcc_builder_custom_init@@Base+0x9c>
   21810:	strd	r8, [sp, #16]
   21814:	mov	r8, r2
   21818:	mov	r2, #232	; 0xe8
   2181c:	str	sl, [sp, #24]
   21820:	str	lr, [sp, #28]
   21824:	ldr	r9, [sp, #32]
   21828:	bl	12628 <memset@plt>
   2182c:	cmp	r6, #0
   21830:	add	r7, pc, r7
   21834:	beq	21868 <flatcc_builder_custom_init@@Base+0x74>
   21838:	cmp	r5, #0
   2183c:	beq	21884 <flatcc_builder_custom_init@@Base+0x90>
   21840:	ldr	sl, [sp, #24]
   21844:	mov	r0, #0
   21848:	strd	r8, [r4, #36]	; 0x24
   2184c:	str	r6, [r4, #44]	; 0x2c
   21850:	str	r5, [r4, #48]	; 0x30
   21854:	ldrd	r4, [sp]
   21858:	ldrd	r6, [sp, #8]
   2185c:	ldrd	r8, [sp, #16]
   21860:	add	sp, sp, #28
   21864:	pop	{pc}		; (ldr pc, [sp], #4)
   21868:	ldr	r3, [pc, #36]	; 21894 <flatcc_builder_custom_init@@Base+0xa0>
   2186c:	mov	r2, #1
   21870:	cmp	r5, #0
   21874:	add	r8, r4, #188	; 0xbc
   21878:	str	r2, [r4, #184]	; 0xb8
   2187c:	ldr	r6, [r7, r3]
   21880:	bne	21840 <flatcc_builder_custom_init@@Base+0x4c>
   21884:	ldr	r3, [pc, #12]	; 21898 <flatcc_builder_custom_init@@Base+0xa4>
   21888:	ldr	r5, [r7, r3]
   2188c:	b	21840 <flatcc_builder_custom_init@@Base+0x4c>
   21890:	andeq	fp, r1, r8, asr #15
   21894:	andeq	r0, r0, r4, lsl #1
   21898:	andeq	r0, r0, ip, ror r0

0002189c <flatcc_builder_init@@Base>:
   2189c:	mov	ip, #0
   218a0:	push	{lr}		; (str lr, [sp, #-4]!)
   218a4:	sub	sp, sp, #12
   218a8:	mov	r3, ip
   218ac:	mov	r2, ip
   218b0:	mov	r1, ip
   218b4:	str	ip, [sp]
   218b8:	bl	217f4 <flatcc_builder_custom_init@@Base>
   218bc:	add	sp, sp, #12
   218c0:	pop	{pc}		; (ldr pc, [sp], #4)

000218c4 <flatcc_builder_custom_reset@@Base>:
   218c4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   218c8:	mov	r5, #0
   218cc:	mov	r4, r0
   218d0:	strd	r6, [sp, #8]
   218d4:	mov	r6, r0
   218d8:	strd	r8, [sp, #16]
   218dc:	mov	r8, r1
   218e0:	mov	r9, r2
   218e4:	str	lr, [sp, #24]
   218e8:	sub	sp, sp, #12
   218ec:	b	2193c <flatcc_builder_custom_reset@@Base+0x78>
   218f0:	cmp	r5, #5
   218f4:	cmpne	r9, #0
   218f8:	beq	21920 <flatcc_builder_custom_reset@@Base+0x5c>
   218fc:	mov	r3, #1
   21900:	str	r5, [sp]
   21904:	mov	r2, r3
   21908:	ldr	r0, [r6, #40]	; 0x28
   2190c:	ldr	r7, [r6, #48]	; 0x30
   21910:	blx	r7
   21914:	cmp	r0, #0
   21918:	bne	21a2c <flatcc_builder_custom_reset@@Base+0x168>
   2191c:	ldr	r0, [r4, #52]	; 0x34
   21920:	mov	r1, #0
   21924:	ldr	r2, [r4, #56]	; 0x38
   21928:	bl	12628 <memset@plt>
   2192c:	add	r5, r5, #1
   21930:	add	r4, r4, #8
   21934:	cmp	r5, #8
   21938:	beq	2197c <flatcc_builder_custom_reset@@Base+0xb8>
   2193c:	ldr	r0, [r4, #52]	; 0x34
   21940:	add	r1, r4, #52	; 0x34
   21944:	cmp	r0, #0
   21948:	bne	218f0 <flatcc_builder_custom_reset@@Base+0x2c>
   2194c:	ldr	r3, [r4, #56]	; 0x38
   21950:	cmp	r3, #0
   21954:	beq	2192c <flatcc_builder_custom_reset@@Base+0x68>
   21958:	ldr	r3, [pc, #212]	; 21a34 <flatcc_builder_custom_reset@@Base+0x170>
   2195c:	movw	r2, #434	; 0x1b2
   21960:	ldr	r1, [pc, #208]	; 21a38 <flatcc_builder_custom_reset@@Base+0x174>
   21964:	ldr	r0, [pc, #208]	; 21a3c <flatcc_builder_custom_reset@@Base+0x178>
   21968:	add	r3, pc, r3
   2196c:	add	r3, r3, #108	; 0x6c
   21970:	add	r1, pc, r1
   21974:	add	r0, pc, r0
   21978:	bl	1267c <__assert_fail@plt>
   2197c:	mov	r2, #0
   21980:	ldr	r0, [r6, #52]	; 0x34
   21984:	ldr	r3, [r6, #124]	; 0x7c
   21988:	ldr	r1, [r6, #60]	; 0x3c
   2198c:	str	r0, [r6, #4]
   21990:	str	r2, [r6, #120]	; 0x78
   21994:	cmp	r3, r2
   21998:	ldr	r2, [r6, #76]	; 0x4c
   2199c:	movne	r3, #16
   219a0:	strne	r3, [r6, #124]	; 0x7c
   219a4:	mov	r3, #0
   219a8:	cmp	r8, r3
   219ac:	str	r2, [r6]
   219b0:	str	r1, [r6, #16]
   219b4:	str	r3, [r6, #20]
   219b8:	str	r3, [r6, #24]
   219bc:	str	r3, [r6, #32]
   219c0:	strh	r3, [r6, #128]	; 0x80
   219c4:	str	r3, [r6, #136]	; 0x88
   219c8:	str	r3, [r6, #140]	; 0x8c
   219cc:	str	r3, [r6, #148]	; 0x94
   219d0:	str	r3, [r6, #152]	; 0x98
   219d4:	str	r3, [r6, #156]	; 0x9c
   219d8:	str	r3, [r6, #160]	; 0xa0
   219dc:	bne	21a04 <flatcc_builder_custom_reset@@Base+0x140>
   219e0:	ldr	r0, [r6, #184]	; 0xb8
   219e4:	cmp	r0, #0
   219e8:	bne	21a1c <flatcc_builder_custom_reset@@Base+0x158>
   219ec:	add	sp, sp, #12
   219f0:	ldrd	r4, [sp]
   219f4:	ldrd	r6, [sp, #8]
   219f8:	ldrd	r8, [sp, #16]
   219fc:	add	sp, sp, #24
   21a00:	pop	{pc}		; (ldr pc, [sp], #4)
   21a04:	ldr	r0, [r6, #184]	; 0xb8
   21a08:	str	r3, [r6, #172]	; 0xac
   21a0c:	str	r3, [r6, #176]	; 0xb0
   21a10:	str	r3, [r6, #180]	; 0xb4
   21a14:	cmp	r0, #0
   21a18:	beq	219ec <flatcc_builder_custom_reset@@Base+0x128>
   21a1c:	add	r0, r6, #188	; 0xbc
   21a20:	bl	257fc <flatcc_emitter_reset@@Base>
   21a24:	mov	r0, #0
   21a28:	b	219ec <flatcc_builder_custom_reset@@Base+0x128>
   21a2c:	mvn	r0, #0
   21a30:	b	219ec <flatcc_builder_custom_reset@@Base+0x128>
   21a34:	andeq	r9, r0, r8, ror #3
   21a38:	andeq	r9, r0, r0, lsr r9
   21a3c:	andeq	r9, r0, r8, asr #19

00021a40 <flatcc_builder_reset@@Base>:
   21a40:	mov	r2, #0
   21a44:	mov	r1, r2
   21a48:	b	218c4 <flatcc_builder_custom_reset@@Base>

00021a4c <flatcc_builder_clear@@Base>:
   21a4c:	strd	r4, [sp, #-20]!	; 0xffffffec
   21a50:	mov	r4, #0
   21a54:	add	r5, r0, #52	; 0x34
   21a58:	strd	r6, [sp, #8]
   21a5c:	mov	r6, r0
   21a60:	str	lr, [sp, #16]
   21a64:	sub	sp, sp, #12
   21a68:	mov	r3, #0
   21a6c:	mov	r1, r5
   21a70:	str	r4, [sp]
   21a74:	mov	r2, r3
   21a78:	add	r4, r4, #1
   21a7c:	ldr	r0, [r6, #40]	; 0x28
   21a80:	add	r5, r5, #8
   21a84:	ldr	r7, [r6, #48]	; 0x30
   21a88:	blx	r7
   21a8c:	cmp	r4, #8
   21a90:	bne	21a68 <flatcc_builder_clear@@Base+0x1c>
   21a94:	ldr	r3, [r6, #184]	; 0xb8
   21a98:	cmp	r3, #0
   21a9c:	bne	21ac4 <flatcc_builder_clear@@Base+0x78>
   21aa0:	mov	r0, r6
   21aa4:	mov	r2, #232	; 0xe8
   21aa8:	mov	r1, #0
   21aac:	add	sp, sp, #12
   21ab0:	ldrd	r4, [sp]
   21ab4:	ldrd	r6, [sp, #8]
   21ab8:	ldr	lr, [sp, #16]
   21abc:	add	sp, sp, #20
   21ac0:	b	12628 <memset@plt>
   21ac4:	add	r0, r6, #188	; 0xbc
   21ac8:	bl	258d0 <flatcc_emitter_clear@@Base>
   21acc:	b	21aa0 <flatcc_builder_clear@@Base+0x54>

00021ad0 <flatcc_builder_enter_user_frame_ptr@@Base>:
   21ad0:	strd	r4, [sp, #-20]!	; 0xffffffec
   21ad4:	add	r4, r1, #3
   21ad8:	mov	r5, r0
   21adc:	ldr	r3, [r0, #112]	; 0x70
   21ae0:	bic	r4, r4, #3
   21ae4:	strd	r6, [sp, #8]
   21ae8:	add	r4, r4, #4
   21aec:	ldr	r6, [r0, #228]	; 0xe4
   21af0:	str	lr, [sp, #16]
   21af4:	sub	sp, sp, #12
   21af8:	add	r2, r6, r4
   21afc:	cmp	r2, r3
   21b00:	bls	21b28 <flatcc_builder_enter_user_frame_ptr@@Base+0x58>
   21b04:	mov	ip, #7
   21b08:	add	r1, r0, #108	; 0x6c
   21b0c:	ldr	r0, [r0, #40]	; 0x28
   21b10:	mov	r3, #0
   21b14:	str	ip, [sp]
   21b18:	ldr	r7, [r5, #48]	; 0x30
   21b1c:	blx	r7
   21b20:	cmp	r0, #0
   21b24:	bne	21b7c <flatcc_builder_enter_user_frame_ptr@@Base+0xac>
   21b28:	ldr	r7, [r5, #108]	; 0x6c
   21b2c:	adds	r3, r7, r6
   21b30:	moveq	r0, r3
   21b34:	beq	21b68 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   21b38:	mov	r2, r4
   21b3c:	mov	r0, r3
   21b40:	mov	r1, #0
   21b44:	bl	12628 <memset@plt>
   21b48:	ldr	r2, [r5, #224]	; 0xe0
   21b4c:	add	r0, r0, #4
   21b50:	str	r2, [r7, r6]
   21b54:	ldr	r3, [r5, #228]	; 0xe4
   21b58:	add	r4, r3, r4
   21b5c:	add	r3, r3, #4
   21b60:	str	r3, [r5, #224]	; 0xe0
   21b64:	str	r4, [r5, #228]	; 0xe4
   21b68:	add	sp, sp, #12
   21b6c:	ldrd	r4, [sp]
   21b70:	ldrd	r6, [sp, #8]
   21b74:	add	sp, sp, #16
   21b78:	pop	{pc}		; (ldr pc, [sp], #4)
   21b7c:	bl	21254 <flatcc_builder_default_alloc@@Base+0x124>

00021b80 <flatcc_builder_enter_user_frame@@Base>:
   21b80:	strd	r4, [sp, #-20]!	; 0xffffffec
   21b84:	add	r4, r1, #3
   21b88:	mov	r5, r0
   21b8c:	ldr	r3, [r0, #112]	; 0x70
   21b90:	bic	r4, r4, #3
   21b94:	strd	r6, [sp, #8]
   21b98:	add	r4, r4, #4
   21b9c:	ldr	r6, [r0, #228]	; 0xe4
   21ba0:	str	lr, [sp, #16]
   21ba4:	sub	sp, sp, #12
   21ba8:	add	r2, r6, r4
   21bac:	cmp	r2, r3
   21bb0:	bls	21bd8 <flatcc_builder_enter_user_frame@@Base+0x58>
   21bb4:	mov	ip, #7
   21bb8:	add	r1, r0, #108	; 0x6c
   21bbc:	ldr	r0, [r0, #40]	; 0x28
   21bc0:	mov	r3, #0
   21bc4:	str	ip, [sp]
   21bc8:	ldr	r7, [r5, #48]	; 0x30
   21bcc:	blx	r7
   21bd0:	cmp	r0, #0
   21bd4:	bne	21c20 <flatcc_builder_enter_user_frame@@Base+0xa0>
   21bd8:	ldr	r7, [r5, #108]	; 0x6c
   21bdc:	adds	r0, r7, r6
   21be0:	beq	21c0c <flatcc_builder_enter_user_frame@@Base+0x8c>
   21be4:	mov	r2, r4
   21be8:	mov	r1, #0
   21bec:	bl	12628 <memset@plt>
   21bf0:	ldr	r3, [r5, #224]	; 0xe0
   21bf4:	str	r3, [r7, r6]
   21bf8:	ldr	r0, [r5, #228]	; 0xe4
   21bfc:	add	r4, r0, r4
   21c00:	add	r0, r0, #4
   21c04:	str	r0, [r5, #224]	; 0xe0
   21c08:	str	r4, [r5, #228]	; 0xe4
   21c0c:	add	sp, sp, #12
   21c10:	ldrd	r4, [sp]
   21c14:	ldrd	r6, [sp, #8]
   21c18:	add	sp, sp, #16
   21c1c:	pop	{pc}		; (ldr pc, [sp], #4)
   21c20:	bl	21254 <flatcc_builder_default_alloc@@Base+0x124>

00021c24 <flatcc_builder_exit_user_frame@@Base>:
   21c24:	ldr	r2, [r0, #224]	; 0xe0
   21c28:	cmp	r2, #0
   21c2c:	beq	21c54 <flatcc_builder_exit_user_frame@@Base+0x30>
   21c30:	mov	r3, r0
   21c34:	sub	r0, r2, #4
   21c38:	ldr	r1, [r3, #108]	; 0x6c
   21c3c:	str	r0, [r3, #228]	; 0xe4
   21c40:	add	r2, r1, r2
   21c44:	ldr	r2, [r2, #-4]
   21c48:	mov	r0, r2
   21c4c:	str	r2, [r3, #224]	; 0xe0
   21c50:	bx	lr
   21c54:	ldr	r3, [pc, #36]	; 21c80 <flatcc_builder_exit_user_frame@@Base+0x5c>
   21c58:	movw	r2, #542	; 0x21e
   21c5c:	str	r4, [sp, #-8]!
   21c60:	ldr	r1, [pc, #28]	; 21c84 <flatcc_builder_exit_user_frame@@Base+0x60>
   21c64:	str	lr, [sp, #4]
   21c68:	ldr	r0, [pc, #24]	; 21c88 <flatcc_builder_exit_user_frame@@Base+0x64>
   21c6c:	add	r3, pc, r3
   21c70:	add	r3, r3, #136	; 0x88
   21c74:	add	r1, pc, r1
   21c78:	add	r0, pc, r0
   21c7c:	bl	1267c <__assert_fail@plt>
   21c80:	andeq	r8, r0, r4, ror #29
   21c84:	andeq	r9, r0, ip, lsr #12
   21c88:	ldrdeq	r9, [r0], -r8

00021c8c <flatcc_builder_exit_user_frame_at@@Base>:
   21c8c:	ldr	r2, [r0, #224]	; 0xe0
   21c90:	cmp	r2, r1
   21c94:	bcc	21ca0 <flatcc_builder_exit_user_frame_at@@Base+0x14>
   21c98:	str	r1, [r0, #224]	; 0xe0
   21c9c:	b	21c24 <flatcc_builder_exit_user_frame@@Base>
   21ca0:	ldr	r3, [pc, #36]	; 21ccc <flatcc_builder_exit_user_frame_at@@Base+0x40>
   21ca4:	movw	r2, #551	; 0x227
   21ca8:	str	r4, [sp, #-8]!
   21cac:	ldr	r1, [pc, #28]	; 21cd0 <flatcc_builder_exit_user_frame_at@@Base+0x44>
   21cb0:	str	lr, [sp, #4]
   21cb4:	ldr	r0, [pc, #24]	; 21cd4 <flatcc_builder_exit_user_frame_at@@Base+0x48>
   21cb8:	add	r3, pc, r3
   21cbc:	add	r3, r3, #168	; 0xa8
   21cc0:	add	r1, pc, r1
   21cc4:	add	r0, pc, r0
   21cc8:	bl	1267c <__assert_fail@plt>
   21ccc:	muleq	r0, r8, lr
   21cd0:	andeq	r9, r0, r0, ror #11
   21cd4:	andeq	r9, r0, r8, lsr #13

00021cd8 <flatcc_builder_get_current_user_frame@@Base>:
   21cd8:	ldr	r0, [r0, #224]	; 0xe0
   21cdc:	bx	lr

00021ce0 <flatcc_builder_get_user_frame_ptr@@Base>:
   21ce0:	ldr	r0, [r0, #108]	; 0x6c
   21ce4:	add	r0, r0, r1
   21ce8:	bx	lr

00021cec <flatcc_builder_embed_buffer@@Base>:
   21cec:	strd	r4, [sp, #-20]!	; 0xffffffec
   21cf0:	mov	r5, r3
   21cf4:	mov	r4, r0
   21cf8:	ldr	r3, [r0, #152]	; 0x98
   21cfc:	strd	r6, [sp, #8]
   21d00:	mov	r7, r2
   21d04:	mov	r2, r1
   21d08:	ldr	r6, [pc, #356]	; 21e74 <flatcc_builder_embed_buffer@@Base+0x188>
   21d0c:	str	lr, [sp, #16]
   21d10:	sub	sp, sp, #92	; 0x5c
   21d14:	add	r1, sp, #112	; 0x70
   21d18:	adds	r3, r3, #0
   21d1c:	movne	r3, #1
   21d20:	bl	212c0 <flatcc_builder_default_alloc@@Base+0x190>
   21d24:	cmp	r0, #0
   21d28:	add	r6, pc, r6
   21d2c:	bne	21e44 <flatcc_builder_embed_buffer@@Base+0x158>
   21d30:	ldr	r3, [sp, #116]	; 0x74
   21d34:	str	r0, [sp, #16]
   21d38:	ldr	r1, [r4, #136]	; 0x88
   21d3c:	str	r0, [sp, #20]
   21d40:	ldrh	r2, [sp, #112]	; 0x70
   21d44:	tst	r3, #2
   21d48:	ldr	r0, [r4, #152]	; 0x98
   21d4c:	movne	ip, #4
   21d50:	moveq	ip, #0
   21d54:	sub	r3, r1, r5
   21d58:	sub	r3, r3, ip
   21d5c:	sub	r2, r2, #1
   21d60:	and	r3, r3, r2
   21d64:	add	r2, r5, r3
   21d68:	cmp	r0, #0
   21d6c:	str	r2, [sp, #12]
   21d70:	beq	21d94 <flatcc_builder_embed_buffer@@Base+0xa8>
   21d74:	mov	ip, #1
   21d78:	mov	r2, #4
   21d7c:	mov	r0, r2
   21d80:	str	r2, [sp, #16]
   21d84:	str	ip, [sp, #20]
   21d88:	add	ip, sp, #12
   21d8c:	str	ip, [sp, #24]
   21d90:	str	r2, [sp, #28]
   21d94:	cmp	r5, #0
   21d98:	beq	21dc0 <flatcc_builder_embed_buffer@@Base+0xd4>
   21d9c:	ldr	r2, [sp, #20]
   21da0:	add	ip, sp, #88	; 0x58
   21da4:	add	r0, r0, r5
   21da8:	str	r0, [sp, #16]
   21dac:	add	r2, r2, #1
   21db0:	add	ip, ip, r2, lsl #3
   21db4:	str	r2, [sp, #20]
   21db8:	str	r7, [ip, #-72]	; 0xffffffb8
   21dbc:	str	r5, [ip, #-68]	; 0xffffffbc
   21dc0:	cmp	r3, #0
   21dc4:	bne	21e14 <flatcc_builder_embed_buffer@@Base+0x128>
   21dc8:	sub	r5, r1, r0
   21dcc:	cmp	r1, r5
   21dd0:	ble	21e50 <flatcc_builder_embed_buffer@@Base+0x164>
   21dd4:	mov	r3, r5
   21dd8:	add	r1, sp, #24
   21ddc:	str	r0, [sp]
   21de0:	ldr	r2, [sp, #20]
   21de4:	ldr	r0, [r4, #36]	; 0x24
   21de8:	ldr	r6, [r4, #44]	; 0x2c
   21dec:	blx	r6
   21df0:	cmp	r0, #0
   21df4:	streq	r5, [r4, #136]	; 0x88
   21df8:	bne	21e4c <flatcc_builder_embed_buffer@@Base+0x160>
   21dfc:	mov	r0, r5
   21e00:	add	sp, sp, #92	; 0x5c
   21e04:	ldrd	r4, [sp]
   21e08:	ldrd	r6, [sp, #8]
   21e0c:	add	sp, sp, #16
   21e10:	pop	{pc}		; (ldr pc, [sp], #4)
   21e14:	ldr	ip, [pc, #92]	; 21e78 <flatcc_builder_embed_buffer@@Base+0x18c>
   21e18:	add	r0, r0, r3
   21e1c:	ldr	r2, [sp, #20]
   21e20:	str	r0, [sp, #16]
   21e24:	ldr	lr, [r6, ip]
   21e28:	add	ip, sp, #88	; 0x58
   21e2c:	add	r2, r2, #1
   21e30:	add	ip, ip, r2, lsl #3
   21e34:	str	r2, [sp, #20]
   21e38:	str	lr, [ip, #-72]	; 0xffffffb8
   21e3c:	str	r3, [ip, #-68]	; 0xffffffbc
   21e40:	b	21dc8 <flatcc_builder_embed_buffer@@Base+0xdc>
   21e44:	mov	r5, #0
   21e48:	b	21dfc <flatcc_builder_embed_buffer@@Base+0x110>
   21e4c:	bl	213f4 <flatcc_builder_default_alloc@@Base+0x2c4>
   21e50:	ldr	r3, [pc, #36]	; 21e7c <flatcc_builder_embed_buffer@@Base+0x190>
   21e54:	movw	r2, #647	; 0x287
   21e58:	ldr	r1, [pc, #32]	; 21e80 <flatcc_builder_embed_buffer@@Base+0x194>
   21e5c:	ldr	r0, [pc, #32]	; 21e84 <flatcc_builder_embed_buffer@@Base+0x198>
   21e60:	add	r3, pc, r3
   21e64:	add	r3, r3, #44	; 0x2c
   21e68:	add	r1, pc, r1
   21e6c:	add	r0, pc, r0
   21e70:	bl	1267c <__assert_fail@plt>
   21e74:	ldrdeq	fp, [r1], -r0
   21e78:	andeq	r0, r0, ip, rrx
   21e7c:	strdeq	r8, [r0], -r0
   21e80:	andeq	r9, r0, r8, lsr r4
   21e84:			; <UNDEFINED> instruction: 0x000094bc

00021e88 <flatcc_builder_create_buffer@@Base>:
   21e88:	strd	r4, [sp, #-36]!	; 0xffffffdc
   21e8c:	mov	r4, r0
   21e90:	strd	r6, [sp, #8]
   21e94:	mov	r6, r3
   21e98:	strd	r8, [sp, #16]
   21e9c:	mov	r8, #0
   21ea0:	strd	sl, [sp, #24]
   21ea4:	mov	sl, r1
   21ea8:	str	lr, [sp, #32]
   21eac:	sub	sp, sp, #100	; 0x64
   21eb0:	ldr	r9, [sp, #140]	; 0x8c
   21eb4:	add	r1, sp, #136	; 0x88
   21eb8:	str	r8, [sp, #20]
   21ebc:	ldr	r5, [pc, #496]	; 220b4 <flatcc_builder_create_buffer@@Base+0x22c>
   21ec0:	and	r7, r9, #1
   21ec4:	mov	r3, r7
   21ec8:	bl	212c0 <flatcc_builder_default_alloc@@Base+0x190>
   21ecc:	cmp	r0, r8
   21ed0:	add	r5, pc, r5
   21ed4:	bne	22028 <flatcc_builder_create_buffer@@Base+0x1a0>
   21ed8:	ldrh	r2, [r4, #128]	; 0x80
   21edc:	ldrh	r3, [sp, #136]	; 0x88
   21ee0:	ldr	ip, [r4, #136]	; 0x88
   21ee4:	cmp	r2, r3
   21ee8:	strhcc	r3, [r4, #128]	; 0x80
   21eec:	cmp	sl, #0
   21ef0:	ldrne	r2, [sl]
   21ef4:	ldreq	lr, [sp, #20]
   21ef8:	movne	lr, r2
   21efc:	strne	r2, [sp, #20]
   21f00:	sub	r2, r3, #1
   21f04:	sub	r3, ip, #4
   21f08:	cmp	lr, #0
   21f0c:	movne	lr, #4
   21f10:	tst	r9, #2
   21f14:	movne	r0, #4
   21f18:	moveq	r0, #0
   21f1c:	sub	r3, r3, lr
   21f20:	ands	r1, r9, #3
   21f24:	sub	r3, r3, r0
   21f28:	and	r3, r3, r2
   21f2c:	bne	22048 <flatcc_builder_create_buffer@@Base+0x1c0>
   21f30:	mov	r9, r1
   21f34:	mov	r8, #1
   21f38:	mov	r0, #4
   21f3c:	add	sl, sp, #96	; 0x60
   21f40:	add	r2, r9, #1
   21f44:	str	r0, [sp, #24]
   21f48:	add	r2, sl, r2, lsl #3
   21f4c:	mov	fp, #4
   21f50:	add	sl, sp, #12
   21f54:	cmp	lr, #0
   21f58:	str	r8, [sp, #28]
   21f5c:	strd	sl, [r2, #-72]	; 0xffffffb8
   21f60:	beq	21f8c <flatcc_builder_create_buffer@@Base+0x104>
   21f64:	add	r2, sp, #96	; 0x60
   21f68:	add	r8, r8, #1
   21f6c:	add	r8, r2, r8, lsl #3
   21f70:	add	r0, r0, lr
   21f74:	add	r9, r9, #2
   21f78:	add	r2, sp, #20
   21f7c:	str	r0, [sp, #24]
   21f80:	str	r2, [r8, #-72]	; 0xffffffb8
   21f84:	str	lr, [r8, #-68]	; 0xffffffbc
   21f88:	str	r9, [sp, #28]
   21f8c:	cmp	r3, #0
   21f90:	beq	21fc0 <flatcc_builder_create_buffer@@Base+0x138>
   21f94:	ldr	lr, [pc, #284]	; 220b8 <flatcc_builder_create_buffer@@Base+0x230>
   21f98:	add	r0, r0, r3
   21f9c:	ldr	r2, [sp, #28]
   21fa0:	str	r0, [sp, #24]
   21fa4:	ldr	r5, [r5, lr]
   21fa8:	add	lr, sp, #96	; 0x60
   21fac:	add	r2, r2, #1
   21fb0:	add	lr, lr, r2, lsl #3
   21fb4:	str	r2, [sp, #28]
   21fb8:	str	r5, [lr, #-72]	; 0xffffffb8
   21fbc:	str	r3, [lr, #-68]	; 0xffffffbc
   21fc0:	sub	r5, ip, r0
   21fc4:	cmp	r1, #0
   21fc8:	mov	r2, r5
   21fcc:	addne	r2, r5, #4
   21fd0:	cmp	r7, #0
   21fd4:	sub	r6, r6, r2
   21fd8:	ldrne	r3, [r4, #144]	; 0x90
   21fdc:	mov	r8, r5
   21fe0:	str	r6, [sp, #12]
   21fe4:	ldreq	r3, [r4, #140]	; 0x8c
   21fe8:	cmp	ip, r5
   21fec:	sub	r3, r3, r2
   21ff0:	str	r3, [sp, #16]
   21ff4:	ble	2208c <flatcc_builder_create_buffer@@Base+0x204>
   21ff8:	mov	r3, r5
   21ffc:	add	r1, sp, #32
   22000:	str	r0, [sp]
   22004:	ldr	r2, [sp, #28]
   22008:	ldr	r0, [r4, #36]	; 0x24
   2200c:	ldr	r6, [r4, #44]	; 0x2c
   22010:	blx	r6
   22014:	cmp	r0, #0
   22018:	bne	220b0 <flatcc_builder_create_buffer@@Base+0x228>
   2201c:	cmp	r5, #0
   22020:	str	r5, [r4, #136]	; 0x88
   22024:	beq	22068 <flatcc_builder_create_buffer@@Base+0x1e0>
   22028:	mov	r0, r8
   2202c:	add	sp, sp, #100	; 0x64
   22030:	ldrd	r4, [sp]
   22034:	ldrd	r6, [sp, #8]
   22038:	ldrd	r8, [sp, #16]
   2203c:	ldrd	sl, [sp, #24]
   22040:	add	sp, sp, #32
   22044:	pop	{pc}		; (ldr pc, [sp], #4)
   22048:	mov	sl, #4
   2204c:	add	r2, sp, #16
   22050:	mov	r8, #2
   22054:	mov	r9, #1
   22058:	mov	r0, #8
   2205c:	str	r2, [sp, #32]
   22060:	str	sl, [sp, #36]	; 0x24
   22064:	b	21f3c <flatcc_builder_create_buffer@@Base+0xb4>
   22068:	ldr	r3, [pc, #76]	; 220bc <flatcc_builder_create_buffer@@Base+0x234>
   2206c:	mov	r2, #772	; 0x304
   22070:	ldr	r1, [pc, #72]	; 220c0 <flatcc_builder_create_buffer@@Base+0x238>
   22074:	ldr	r0, [pc, #72]	; 220c4 <flatcc_builder_create_buffer@@Base+0x23c>
   22078:	add	r3, pc, r3
   2207c:	add	r3, r3, #204	; 0xcc
   22080:	add	r1, pc, r1
   22084:	add	r0, pc, r0
   22088:	bl	1267c <__assert_fail@plt>
   2208c:	ldr	r3, [pc, #52]	; 220c8 <flatcc_builder_create_buffer@@Base+0x240>
   22090:	movw	r2, #647	; 0x287
   22094:	ldr	r1, [pc, #48]	; 220cc <flatcc_builder_create_buffer@@Base+0x244>
   22098:	ldr	r0, [pc, #48]	; 220d0 <flatcc_builder_create_buffer@@Base+0x248>
   2209c:	add	r3, pc, r3
   220a0:	add	r3, r3, #44	; 0x2c
   220a4:	add	r1, pc, r1
   220a8:	add	r0, pc, r0
   220ac:	bl	1267c <__assert_fail@plt>
   220b0:	bl	213f4 <flatcc_builder_default_alloc@@Base+0x2c4>
   220b4:	andeq	fp, r1, r8, lsr #2
   220b8:	andeq	r0, r0, ip, rrx
   220bc:	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   220c0:	andeq	r9, r0, r0, lsr #4
   220c4:	andeq	r9, r0, r4, lsr #5
   220c8:			; <UNDEFINED> instruction: 0x00008ab4
   220cc:	strdeq	r9, [r0], -ip
   220d0:	andeq	r9, r0, r0, lsl #5

000220d4 <flatcc_builder_create_struct@@Base>:
   220d4:	ldr	ip, [pc, #316]	; 22218 <flatcc_builder_create_struct@@Base+0x144>
   220d8:	cmp	r3, #0
   220dc:	strd	r4, [sp, #-20]!	; 0xffffffec
   220e0:	strd	r6, [sp, #8]
   220e4:	str	lr, [sp, #16]
   220e8:	sub	sp, sp, #84	; 0x54
   220ec:	add	ip, pc, ip
   220f0:	beq	221f4 <flatcc_builder_create_struct@@Base+0x120>
   220f4:	mov	r4, r0
   220f8:	ldrh	r0, [r0, #128]	; 0x80
   220fc:	ldr	lr, [r4, #136]	; 0x88
   22100:	cmp	r0, r3
   22104:	mov	r0, #0
   22108:	strhcc	r3, [r4, #128]	; 0x80
   2210c:	sub	r5, lr, r2
   22110:	sub	r3, r3, #1
   22114:	cmp	r2, r0
   22118:	and	r3, r3, r5
   2211c:	str	r0, [sp, #8]
   22120:	str	r0, [sp, #12]
   22124:	bne	221a8 <flatcc_builder_create_struct@@Base+0xd4>
   22128:	cmp	r3, #0
   2212c:	movne	r2, r3
   22130:	movne	r6, #1
   22134:	beq	221cc <flatcc_builder_create_struct@@Base+0xf8>
   22138:	ldr	r1, [pc, #220]	; 2221c <flatcc_builder_create_struct@@Base+0x148>
   2213c:	add	r0, r0, #1
   22140:	add	r7, sp, #80	; 0x50
   22144:	str	r2, [sp, #8]
   22148:	add	r0, r7, r0, lsl #3
   2214c:	sub	r5, lr, r2
   22150:	ldr	r1, [ip, r1]
   22154:	str	r6, [sp, #12]
   22158:	str	r1, [r0, #-72]	; 0xffffffb8
   2215c:	str	r3, [r0, #-68]	; 0xffffffbc
   22160:	cmp	lr, r5
   22164:	ble	221cc <flatcc_builder_create_struct@@Base+0xf8>
   22168:	mov	r3, r5
   2216c:	add	r1, sp, #16
   22170:	str	r2, [sp]
   22174:	ldr	r2, [sp, #12]
   22178:	ldr	r0, [r4, #36]	; 0x24
   2217c:	ldr	r6, [r4, #44]	; 0x2c
   22180:	blx	r6
   22184:	cmp	r0, #0
   22188:	bne	221f0 <flatcc_builder_create_struct@@Base+0x11c>
   2218c:	mov	r0, r5
   22190:	str	r5, [r4, #136]	; 0x88
   22194:	add	sp, sp, #84	; 0x54
   22198:	ldrd	r4, [sp]
   2219c:	ldrd	r6, [sp, #8]
   221a0:	add	sp, sp, #16
   221a4:	pop	{pc}		; (ldr pc, [sp], #4)
   221a8:	mov	r0, #1
   221ac:	cmp	r3, #0
   221b0:	str	r2, [sp, #8]
   221b4:	movne	r6, #2
   221b8:	strd	r0, [sp, #12]
   221bc:	str	r2, [sp, #20]
   221c0:	addne	r2, r2, r3
   221c4:	beq	22160 <flatcc_builder_create_struct@@Base+0x8c>
   221c8:	b	22138 <flatcc_builder_create_struct@@Base+0x64>
   221cc:	ldr	r3, [pc, #76]	; 22220 <flatcc_builder_create_struct@@Base+0x14c>
   221d0:	movw	r2, #647	; 0x287
   221d4:	ldr	r1, [pc, #72]	; 22224 <flatcc_builder_create_struct@@Base+0x150>
   221d8:	ldr	r0, [pc, #72]	; 22228 <flatcc_builder_create_struct@@Base+0x154>
   221dc:	add	r3, pc, r3
   221e0:	add	r3, r3, #44	; 0x2c
   221e4:	add	r1, pc, r1
   221e8:	add	r0, pc, r0
   221ec:	bl	1267c <__assert_fail@plt>
   221f0:	bl	213f4 <flatcc_builder_default_alloc@@Base+0x2c4>
   221f4:	ldr	r3, [pc, #48]	; 2222c <flatcc_builder_create_struct@@Base+0x158>
   221f8:	movw	r2, #783	; 0x30f
   221fc:	ldr	r1, [pc, #44]	; 22230 <flatcc_builder_create_struct@@Base+0x15c>
   22200:	ldr	r0, [pc, #44]	; 22234 <flatcc_builder_create_struct@@Base+0x160>
   22204:	add	r3, pc, r3
   22208:	add	r3, r3, #236	; 0xec
   2220c:	add	r1, pc, r1
   22210:	add	r0, pc, r0
   22214:	bl	1267c <__assert_fail@plt>
   22218:	andeq	sl, r1, ip, lsl #30
   2221c:	andeq	r0, r0, ip, rrx
   22220:	andeq	r8, r0, r4, ror r9
   22224:	strheq	r9, [r0], -ip
   22228:	andeq	r9, r0, r0, asr #2
   2222c:	andeq	r8, r0, ip, asr #18
   22230:	muleq	r0, r4, r0
   22234:	andeq	r9, r0, ip, ror r1

00022238 <flatcc_builder_start_buffer@@Base>:
   22238:	strd	r4, [sp, #-32]!	; 0xffffffe0
   2223c:	mov	r5, r1
   22240:	mov	r4, r0
   22244:	ldrh	r1, [r0, #128]	; 0x80
   22248:	strd	r6, [sp, #8]
   2224c:	mov	r7, r3
   22250:	ldr	r6, [pc, #180]	; 2230c <flatcc_builder_start_buffer@@Base+0xd4>
   22254:	strd	r8, [sp, #16]
   22258:	mov	r8, r2
   2225c:	str	sl, [sp, #24]
   22260:	str	lr, [sp, #28]
   22264:	bl	21464 <flatcc_builder_default_alloc@@Base+0x334>
   22268:	cmp	r0, #0
   2226c:	add	r6, pc, r6
   22270:	bne	22304 <flatcc_builder_start_buffer@@Base+0xcc>
   22274:	mov	r3, #1
   22278:	ldrh	r9, [r4, #132]	; 0x84
   2227c:	cmp	r5, #0
   22280:	ldr	ip, [r4, #148]	; 0x94
   22284:	strh	r3, [r4, #128]	; 0x80
   22288:	ldr	r1, [r4, #32]
   2228c:	ldr	lr, [r4, #136]	; 0x88
   22290:	add	r2, ip, r3
   22294:	ldrh	r3, [r4, #164]	; 0xa4
   22298:	strh	r9, [r1, #34]	; 0x22
   2229c:	strh	r8, [r4, #132]	; 0x84
   222a0:	ldr	r9, [r4, #144]	; 0x90
   222a4:	ldr	r8, [r4, #152]	; 0x98
   222a8:	strh	r3, [r1, #32]
   222ac:	ldr	r3, [r4, #168]	; 0xa8
   222b0:	strh	r7, [r4, #164]	; 0xa4
   222b4:	str	r9, [r1, #20]
   222b8:	str	r8, [r1, #28]
   222bc:	str	lr, [r4, #144]	; 0x90
   222c0:	str	r2, [r4, #148]	; 0x94
   222c4:	str	ip, [r4, #152]	; 0x98
   222c8:	str	r3, [r1, #16]
   222cc:	beq	222f8 <flatcc_builder_start_buffer@@Base+0xc0>
   222d0:	ldr	r2, [r5]
   222d4:	mov	r3, #1
   222d8:	str	r2, [r4, #168]	; 0xa8
   222dc:	strh	r3, [r1, #14]
   222e0:	ldrd	r4, [sp]
   222e4:	ldrd	r6, [sp, #8]
   222e8:	ldrd	r8, [sp, #16]
   222ec:	ldr	sl, [sp, #24]
   222f0:	add	sp, sp, #28
   222f4:	pop	{pc}		; (ldr pc, [sp], #4)
   222f8:	ldr	r3, [pc, #16]	; 22310 <flatcc_builder_start_buffer@@Base+0xd8>
   222fc:	ldr	r5, [r6, r3]
   22300:	b	222d0 <flatcc_builder_start_buffer@@Base+0x98>
   22304:	mvn	r0, #0
   22308:	b	222e0 <flatcc_builder_start_buffer@@Base+0xa8>
   2230c:	andeq	sl, r1, ip, lsl #27
   22310:	andeq	r0, r0, ip, rrx

00022314 <flatcc_builder_end_buffer@@Base>:
   22314:	ldr	ip, [r0, #32]
   22318:	strd	r4, [sp, #-16]!
   2231c:	mov	r4, r0
   22320:	ldrh	r2, [r0, #164]	; 0xa4
   22324:	ldr	r0, [r0, #152]	; 0x98
   22328:	ldrh	ip, [ip, #14]
   2232c:	and	r2, r2, #2
   22330:	str	r6, [sp, #8]
   22334:	str	lr, [sp, #12]
   22338:	sub	sp, sp, #8
   2233c:	cmp	r0, #0
   22340:	moveq	r0, r2
   22344:	orrne	r0, r2, #1
   22348:	cmp	ip, #1
   2234c:	bne	22434 <flatcc_builder_end_buffer@@Base+0x120>
   22350:	ldrh	r2, [r4, #132]	; 0x84
   22354:	mov	r3, r1
   22358:	add	r1, r4, #168	; 0xa8
   2235c:	ldrh	ip, [r4, #128]	; 0x80
   22360:	cmp	r2, ip
   22364:	movhi	ip, r2
   22368:	strhhi	r2, [r4, #128]	; 0x80
   2236c:	str	ip, [sp]
   22370:	str	r0, [sp, #4]
   22374:	mov	r0, r4
   22378:	bl	21e88 <flatcc_builder_create_buffer@@Base>
   2237c:	subs	r5, r0, #0
   22380:	beq	2241c <flatcc_builder_end_buffer@@Base+0x108>
   22384:	mov	r1, #0
   22388:	ldr	r0, [r4, #16]
   2238c:	ldr	r3, [r4, #32]
   22390:	ldr	r2, [r4, #20]
   22394:	ldrh	lr, [r3, #32]
   22398:	ldr	ip, [r3, #16]
   2239c:	ldr	r6, [r3, #20]
   223a0:	ldr	r3, [r3, #28]
   223a4:	str	r6, [r4, #144]	; 0x90
   223a8:	strh	lr, [r4, #164]	; 0xa4
   223ac:	str	r3, [r4, #152]	; 0x98
   223b0:	str	ip, [r4, #168]	; 0xa8
   223b4:	bl	12628 <memset@plt>
   223b8:	ldr	r3, [r4, #32]
   223bc:	ldr	r0, [r4, #60]	; 0x3c
   223c0:	ldr	r2, [r4, #64]	; 0x40
   223c4:	ldr	ip, [r3]
   223c8:	ldmib	r3, {r1, lr}
   223cc:	add	r0, r0, ip
   223d0:	sub	r2, r2, ip
   223d4:	str	r0, [r4, #16]
   223d8:	cmp	r2, r1
   223dc:	ldrh	r0, [r4, #128]	; 0x80
   223e0:	movcs	r2, r1
   223e4:	str	lr, [r4, #20]
   223e8:	str	ip, [r4, #28]
   223ec:	ldrh	ip, [r4, #130]	; 0x82
   223f0:	str	r2, [r4, #24]
   223f4:	ldr	r2, [r4, #156]	; 0x9c
   223f8:	str	r1, [r3, #4]
   223fc:	cmp	r0, ip
   22400:	sub	r0, r3, #36	; 0x24
   22404:	strhcc	ip, [r4, #128]	; 0x80
   22408:	ldrh	r1, [r3, #12]
   2240c:	sub	r3, r2, #1
   22410:	str	r0, [r4, #32]
   22414:	strh	r1, [r4, #130]	; 0x82
   22418:	str	r3, [r4, #156]	; 0x9c
   2241c:	mov	r0, r5
   22420:	add	sp, sp, #8
   22424:	ldrd	r4, [sp]
   22428:	ldr	r6, [sp, #8]
   2242c:	add	sp, sp, #12
   22430:	pop	{pc}		; (ldr pc, [sp], #4)
   22434:	ldr	r3, [pc, #28]	; 22458 <flatcc_builder_end_buffer@@Base+0x144>
   22438:	movw	r2, #838	; 0x346
   2243c:	ldr	r1, [pc, #24]	; 2245c <flatcc_builder_end_buffer@@Base+0x148>
   22440:	ldr	r0, [pc, #24]	; 22460 <flatcc_builder_end_buffer@@Base+0x14c>
   22444:	add	r3, pc, r3
   22448:	add	r3, r3, #268	; 0x10c
   2244c:	add	r1, pc, r1
   22450:	add	r0, pc, r0
   22454:	bl	1267c <__assert_fail@plt>
   22458:	andeq	r8, r0, ip, lsl #14
   2245c:	andeq	r8, r0, r4, asr lr
   22460:	andeq	r8, r0, r8, asr #30

00022464 <flatcc_builder_start_struct@@Base>:
   22464:	strd	r4, [sp, #-16]!
   22468:	mov	r5, r1
   2246c:	mov	r1, r2
   22470:	mov	r4, r0
   22474:	str	r6, [sp, #8]
   22478:	str	lr, [sp, #12]
   2247c:	bl	21464 <flatcc_builder_default_alloc@@Base+0x334>
   22480:	cmp	r0, #0
   22484:	bne	2250c <flatcc_builder_start_struct@@Base+0xa8>
   22488:	ldr	r6, [r4, #20]
   2248c:	mov	ip, #2
   22490:	ldr	r2, [r4, #28]
   22494:	ldr	r3, [r4, #64]	; 0x40
   22498:	add	r5, r5, r6
   2249c:	ldr	r0, [r4, #60]	; 0x3c
   224a0:	ldr	r1, [r4, #32]
   224a4:	sub	r3, r3, r2
   224a8:	cmn	r3, #4
   224ac:	add	r0, r0, r2
   224b0:	mvnhi	r2, #3
   224b4:	movhi	r3, r2
   224b8:	strh	ip, [r1, #14]
   224bc:	strhi	r2, [r4, #24]
   224c0:	mvn	r2, #3
   224c4:	strls	r3, [r4, #24]
   224c8:	cmp	r5, r3
   224cc:	str	r0, [r4, #16]
   224d0:	str	r2, [r1, #4]
   224d4:	str	r5, [r4, #20]
   224d8:	bcs	224f0 <flatcc_builder_start_struct@@Base+0x8c>
   224dc:	add	r0, r0, r6
   224e0:	ldrd	r4, [sp]
   224e4:	ldr	r6, [sp, #8]
   224e8:	add	sp, sp, #12
   224ec:	pop	{pc}		; (ldr pc, [sp], #4)
   224f0:	add	r1, r5, #1
   224f4:	mov	r0, r4
   224f8:	bl	210a8 <test_parse@@Base+0x528>
   224fc:	cmp	r0, #0
   22500:	bne	2250c <flatcc_builder_start_struct@@Base+0xa8>
   22504:	ldr	r0, [r4, #16]
   22508:	b	224dc <flatcc_builder_start_struct@@Base+0x78>
   2250c:	ldrd	r4, [sp]
   22510:	mov	r0, #0
   22514:	ldr	r6, [sp, #8]
   22518:	add	sp, sp, #12
   2251c:	pop	{pc}		; (ldr pc, [sp], #4)

00022520 <flatcc_builder_struct_edit@@Base>:
   22520:	ldr	r0, [r0, #16]
   22524:	bx	lr

00022528 <flatcc_builder_end_struct@@Base>:
   22528:	ldr	r3, [r0, #32]
   2252c:	strd	r4, [sp, #-16]!
   22530:	ldrh	r3, [r3, #14]
   22534:	str	r6, [sp, #8]
   22538:	str	lr, [sp, #12]
   2253c:	cmp	r3, #2
   22540:	bne	225e8 <flatcc_builder_end_struct@@Base+0xc0>
   22544:	ldrh	r3, [r0, #130]	; 0x82
   22548:	mov	r4, r0
   2254c:	ldr	r1, [r0, #16]
   22550:	ldr	r2, [r0, #20]
   22554:	bl	220d4 <flatcc_builder_create_struct@@Base>
   22558:	subs	r5, r0, #0
   2255c:	beq	225d4 <flatcc_builder_end_struct@@Base+0xac>
   22560:	mov	r1, #0
   22564:	ldr	r0, [r4, #16]
   22568:	ldr	r2, [r4, #20]
   2256c:	bl	12628 <memset@plt>
   22570:	ldr	r3, [r4, #32]
   22574:	ldr	r0, [r4, #60]	; 0x3c
   22578:	ldr	r2, [r4, #64]	; 0x40
   2257c:	ldr	ip, [r3]
   22580:	ldmib	r3, {r1, lr}
   22584:	add	r0, r0, ip
   22588:	sub	r2, r2, ip
   2258c:	str	r0, [r4, #16]
   22590:	cmp	r2, r1
   22594:	ldrh	r0, [r4, #128]	; 0x80
   22598:	movcs	r2, r1
   2259c:	str	lr, [r4, #20]
   225a0:	str	ip, [r4, #28]
   225a4:	ldrh	ip, [r4, #130]	; 0x82
   225a8:	str	r2, [r4, #24]
   225ac:	ldr	r2, [r4, #156]	; 0x9c
   225b0:	str	r1, [r3, #4]
   225b4:	cmp	r0, ip
   225b8:	sub	r0, r3, #36	; 0x24
   225bc:	strhcc	ip, [r4, #128]	; 0x80
   225c0:	ldrh	r1, [r3, #12]
   225c4:	sub	r3, r2, #1
   225c8:	str	r0, [r4, #32]
   225cc:	strh	r1, [r4, #130]	; 0x82
   225d0:	str	r3, [r4, #156]	; 0x9c
   225d4:	mov	r0, r5
   225d8:	ldrd	r4, [sp]
   225dc:	ldr	r6, [sp, #8]
   225e0:	add	sp, sp, #12
   225e4:	pop	{pc}		; (ldr pc, [sp], #4)
   225e8:	ldr	r3, [pc, #28]	; 2260c <flatcc_builder_end_struct@@Base+0xe4>
   225ec:	mov	r2, #872	; 0x368
   225f0:	ldr	r1, [pc, #24]	; 22610 <flatcc_builder_end_struct@@Base+0xe8>
   225f4:	ldr	r0, [pc, #24]	; 22614 <flatcc_builder_end_struct@@Base+0xec>
   225f8:	add	r3, pc, r3
   225fc:	add	r3, r3, #296	; 0x128
   22600:	add	r1, pc, r1
   22604:	add	r0, pc, r0
   22608:	bl	1267c <__assert_fail@plt>
   2260c:	andeq	r8, r0, r8, asr r5
   22610:	andeq	r8, r0, r0, lsr #25
   22614:	andeq	r8, r0, r0, asr #27

00022618 <flatcc_builder_extend_vector@@Base>:
   22618:	ldr	r2, [r0, #32]
   2261c:	strd	r4, [sp, #-16]!
   22620:	ldr	r3, [r2, #20]
   22624:	ldr	ip, [r2, #24]
   22628:	str	r6, [sp, #8]
   2262c:	str	lr, [sp, #12]
   22630:	adds	r3, r1, r3
   22634:	movcs	r4, #1
   22638:	movcc	r4, #0
   2263c:	cmp	ip, r3
   22640:	orrcc	r4, r4, #1
   22644:	cmp	r4, #0
   22648:	bne	226a4 <flatcc_builder_extend_vector@@Base+0x8c>
   2264c:	ldr	ip, [r2, #16]
   22650:	mov	r5, r0
   22654:	ldr	r6, [r0, #20]
   22658:	str	r3, [r2, #20]
   2265c:	ldr	r3, [r0, #24]
   22660:	mla	r1, ip, r1, r6
   22664:	cmp	r1, r3
   22668:	str	r1, [r0, #20]
   2266c:	bcs	22688 <flatcc_builder_extend_vector@@Base+0x70>
   22670:	ldr	r0, [r5, #16]
   22674:	add	r0, r0, r6
   22678:	ldrd	r4, [sp]
   2267c:	ldr	r6, [sp, #8]
   22680:	add	sp, sp, #12
   22684:	pop	{pc}		; (ldr pc, [sp], #4)
   22688:	add	r1, r1, #1
   2268c:	mvn	r2, #3
   22690:	bl	210a8 <test_parse@@Base+0x528>
   22694:	cmp	r0, #0
   22698:	beq	22670 <flatcc_builder_extend_vector@@Base+0x58>
   2269c:	mov	r0, r4
   226a0:	b	22678 <flatcc_builder_extend_vector@@Base+0x60>
   226a4:	bl	2142c <flatcc_builder_default_alloc@@Base+0x2fc>

000226a8 <flatcc_builder_vector_push@@Base>:
   226a8:	ldr	r3, [r0, #32]
   226ac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   226b0:	ldrh	r2, [r3, #14]
   226b4:	strd	r6, [sp, #8]
   226b8:	str	r8, [sp, #16]
   226bc:	str	lr, [sp, #20]
   226c0:	cmp	r2, #4
   226c4:	bne	22758 <flatcc_builder_vector_push@@Base+0xb0>
   226c8:	mov	r7, r1
   226cc:	ldr	r2, [r3, #20]
   226d0:	ldr	r1, [r3, #24]
   226d4:	cmp	r2, r1
   226d8:	bhi	2277c <flatcc_builder_vector_push@@Base+0xd4>
   226dc:	add	r2, r2, #1
   226e0:	ldr	r6, [r3, #16]
   226e4:	mov	r4, r0
   226e8:	ldr	r5, [r0, #20]
   226ec:	str	r2, [r3, #20]
   226f0:	ldr	r3, [r0, #24]
   226f4:	add	r1, r6, r5
   226f8:	cmp	r1, r3
   226fc:	str	r1, [r0, #20]
   22700:	bcs	2273c <flatcc_builder_vector_push@@Base+0x94>
   22704:	ldr	r3, [r4, #16]
   22708:	adds	r3, r3, r5
   2270c:	beq	22724 <flatcc_builder_vector_push@@Base+0x7c>
   22710:	mov	r0, r3
   22714:	mov	r2, r6
   22718:	mov	r1, r7
   2271c:	bl	12580 <memcpy@plt>
   22720:	mov	r3, r0
   22724:	ldrd	r4, [sp]
   22728:	mov	r0, r3
   2272c:	ldrd	r6, [sp, #8]
   22730:	ldr	r8, [sp, #16]
   22734:	add	sp, sp, #20
   22738:	pop	{pc}		; (ldr pc, [sp], #4)
   2273c:	add	r1, r1, #1
   22740:	mvn	r2, #3
   22744:	bl	210a8 <test_parse@@Base+0x528>
   22748:	cmp	r0, #0
   2274c:	beq	22704 <flatcc_builder_vector_push@@Base+0x5c>
   22750:	mov	r3, #0
   22754:	b	22724 <flatcc_builder_vector_push@@Base+0x7c>
   22758:	ldr	r3, [pc, #64]	; 227a0 <flatcc_builder_vector_push@@Base+0xf8>
   2275c:	movw	r2, #907	; 0x38b
   22760:	ldr	r1, [pc, #60]	; 227a4 <flatcc_builder_vector_push@@Base+0xfc>
   22764:	ldr	r0, [pc, #60]	; 227a8 <flatcc_builder_vector_push@@Base+0x100>
   22768:	add	r3, pc, r3
   2276c:	add	r3, r3, #324	; 0x144
   22770:	add	r1, pc, r1
   22774:	add	r0, pc, r0
   22778:	bl	1267c <__assert_fail@plt>
   2277c:	ldr	r3, [pc, #40]	; 227ac <flatcc_builder_vector_push@@Base+0x104>
   22780:	mov	r2, #908	; 0x38c
   22784:	ldr	r1, [pc, #36]	; 227b0 <flatcc_builder_vector_push@@Base+0x108>
   22788:	ldr	r0, [pc, #36]	; 227b4 <flatcc_builder_vector_push@@Base+0x10c>
   2278c:	add	r3, pc, r3
   22790:	add	r3, r3, #324	; 0x144
   22794:	add	r1, pc, r1
   22798:	add	r0, pc, r0
   2279c:	bl	1267c <__assert_fail@plt>
   227a0:	andeq	r8, r0, r8, ror #7
   227a4:	andeq	r8, r0, r0, lsr fp
   227a8:	andeq	r8, r0, ip, ror ip
   227ac:	andeq	r8, r0, r4, asr #7
   227b0:	andeq	r8, r0, ip, lsl #22
   227b4:	andeq	r8, r0, r4, lsl #25

000227b8 <flatcc_builder_append_vector@@Base>:
   227b8:	ldr	ip, [r0, #32]
   227bc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   227c0:	ldrh	r3, [ip, #14]
   227c4:	strd	r6, [sp, #8]
   227c8:	str	r8, [sp, #16]
   227cc:	str	lr, [sp, #20]
   227d0:	cmp	r3, #4
   227d4:	bne	22880 <flatcc_builder_append_vector@@Base+0xc8>
   227d8:	mov	r6, r1
   227dc:	ldr	r1, [ip, #20]
   227e0:	ldr	r4, [ip, #24]
   227e4:	adds	r1, r2, r1
   227e8:	movcs	r3, #1
   227ec:	movcc	r3, #0
   227f0:	cmp	r4, r1
   227f4:	movcs	r4, r3
   227f8:	orrcc	r4, r3, #1
   227fc:	cmp	r4, #0
   22800:	bne	228a4 <flatcc_builder_append_vector@@Base+0xec>
   22804:	ldr	r7, [ip, #16]
   22808:	mov	r5, r0
   2280c:	ldr	r8, [r0, #20]
   22810:	ldr	r3, [r0, #24]
   22814:	mul	r7, r7, r2
   22818:	str	r1, [ip, #20]
   2281c:	add	r1, r7, r8
   22820:	cmp	r1, r3
   22824:	str	r1, [r0, #20]
   22828:	bcs	22864 <flatcc_builder_append_vector@@Base+0xac>
   2282c:	ldr	r3, [r5, #16]
   22830:	adds	r3, r3, r8
   22834:	beq	2284c <flatcc_builder_append_vector@@Base+0x94>
   22838:	mov	r0, r3
   2283c:	mov	r2, r7
   22840:	mov	r1, r6
   22844:	bl	12580 <memcpy@plt>
   22848:	mov	r3, r0
   2284c:	ldrd	r4, [sp]
   22850:	mov	r0, r3
   22854:	ldrd	r6, [sp, #8]
   22858:	ldr	r8, [sp, #16]
   2285c:	add	sp, sp, #20
   22860:	pop	{pc}		; (ldr pc, [sp], #4)
   22864:	add	r1, r1, #1
   22868:	mvn	r2, #3
   2286c:	bl	210a8 <test_parse@@Base+0x528>
   22870:	cmp	r0, #0
   22874:	beq	2282c <flatcc_builder_append_vector@@Base+0x74>
   22878:	mov	r3, r4
   2287c:	b	2284c <flatcc_builder_append_vector@@Base+0x94>
   22880:	ldr	r3, [pc, #32]	; 228a8 <flatcc_builder_append_vector@@Base+0xf0>
   22884:	movw	r2, #915	; 0x393
   22888:	ldr	r1, [pc, #28]	; 228ac <flatcc_builder_append_vector@@Base+0xf4>
   2288c:	ldr	r0, [pc, #28]	; 228b0 <flatcc_builder_append_vector@@Base+0xf8>
   22890:	add	r3, pc, r3
   22894:	add	r3, r3, #352	; 0x160
   22898:	add	r1, pc, r1
   2289c:	add	r0, pc, r0
   228a0:	bl	1267c <__assert_fail@plt>
   228a4:	bl	2142c <flatcc_builder_default_alloc@@Base+0x2fc>
   228a8:	andeq	r8, r0, r0, asr #5
   228ac:	andeq	r8, r0, r8, lsl #20
   228b0:	andeq	r8, r0, r4, asr fp

000228b4 <flatcc_builder_extend_offset_vector@@Base>:
   228b4:	ldr	ip, [r0, #32]
   228b8:	strd	r4, [sp, #-16]!
   228bc:	ldr	r3, [ip, #20]
   228c0:	str	r6, [sp, #8]
   228c4:	str	lr, [sp, #12]
   228c8:	adds	r2, r1, r3
   228cc:	movcs	r3, #1
   228d0:	movcc	r3, #0
   228d4:	cmn	r2, #-1073741823	; 0xc0000001
   228d8:	movls	r4, #0
   228dc:	movhi	r4, #1
   228e0:	orrs	r4, r3, r4
   228e4:	bne	2293c <flatcc_builder_extend_offset_vector@@Base+0x88>
   228e8:	ldr	r6, [r0, #20]
   228ec:	mov	r5, r0
   228f0:	ldr	r3, [r0, #24]
   228f4:	str	r2, [ip, #20]
   228f8:	add	r1, r6, r1, lsl #2
   228fc:	cmp	r1, r3
   22900:	str	r1, [r0, #20]
   22904:	bcs	22920 <flatcc_builder_extend_offset_vector@@Base+0x6c>
   22908:	ldr	r0, [r5, #16]
   2290c:	add	r0, r0, r6
   22910:	ldrd	r4, [sp]
   22914:	ldr	r6, [sp, #8]
   22918:	add	sp, sp, #12
   2291c:	pop	{pc}		; (ldr pc, [sp], #4)
   22920:	add	r1, r1, #1
   22924:	mvn	r2, #3
   22928:	bl	210a8 <test_parse@@Base+0x528>
   2292c:	cmp	r0, #0
   22930:	beq	22908 <flatcc_builder_extend_offset_vector@@Base+0x54>
   22934:	mov	r0, r4
   22938:	b	22910 <flatcc_builder_extend_offset_vector@@Base+0x5c>
   2293c:	bl	2142c <flatcc_builder_default_alloc@@Base+0x2fc>

00022940 <flatcc_builder_offset_vector_push@@Base>:
   22940:	ldr	r2, [r0, #32]
   22944:	strd	r4, [sp, #-16]!
   22948:	ldrh	r3, [r2, #14]
   2294c:	str	r6, [sp, #8]
   22950:	str	lr, [sp, #12]
   22954:	cmp	r3, #5
   22958:	bne	229d4 <flatcc_builder_offset_vector_push@@Base+0x94>
   2295c:	ldr	r3, [r2, #20]
   22960:	cmn	r3, #-1073741823	; 0xc0000001
   22964:	beq	229c0 <flatcc_builder_offset_vector_push@@Base+0x80>
   22968:	ldr	r5, [r0, #20]
   2296c:	mov	r6, r1
   22970:	add	r3, r3, #1
   22974:	mov	r4, r0
   22978:	ldr	r1, [r0, #24]
   2297c:	str	r3, [r2, #20]
   22980:	add	r3, r5, #4
   22984:	cmp	r3, r1
   22988:	str	r3, [r0, #20]
   2298c:	bcs	229ac <flatcc_builder_offset_vector_push@@Base+0x6c>
   22990:	ldr	r3, [r4, #16]
   22994:	adds	r0, r3, r5
   22998:	strne	r6, [r3, r5]
   2299c:	ldrd	r4, [sp]
   229a0:	ldr	r6, [sp, #8]
   229a4:	add	sp, sp, #12
   229a8:	pop	{pc}		; (ldr pc, [sp], #4)
   229ac:	mvn	r2, #3
   229b0:	add	r1, r5, #5
   229b4:	bl	210a8 <test_parse@@Base+0x528>
   229b8:	cmp	r0, #0
   229bc:	beq	22990 <flatcc_builder_offset_vector_push@@Base+0x50>
   229c0:	ldrd	r4, [sp]
   229c4:	mov	r0, #0
   229c8:	ldr	r6, [sp, #8]
   229cc:	add	sp, sp, #12
   229d0:	pop	{pc}		; (ldr pc, [sp], #4)
   229d4:	ldr	r3, [pc, #28]	; 229f8 <flatcc_builder_offset_vector_push@@Base+0xb8>
   229d8:	movw	r2, #934	; 0x3a6
   229dc:	ldr	r1, [pc, #24]	; 229fc <flatcc_builder_offset_vector_push@@Base+0xbc>
   229e0:	ldr	r0, [pc, #24]	; 22a00 <flatcc_builder_offset_vector_push@@Base+0xc0>
   229e4:	add	r3, pc, r3
   229e8:	add	r3, r3, #384	; 0x180
   229ec:	add	r1, pc, r1
   229f0:	add	r0, pc, r0
   229f4:	bl	1267c <__assert_fail@plt>
   229f8:	andeq	r8, r0, ip, ror #2
   229fc:			; <UNDEFINED> instruction: 0x000088b4
   22a00:	andeq	r8, r0, ip, ror #20

00022a04 <flatcc_builder_append_offset_vector@@Base>:
   22a04:	strd	r4, [sp, #-24]!	; 0xffffffe8
   22a08:	mov	r4, r1
   22a0c:	ldr	r1, [r0, #32]
   22a10:	ldrh	r3, [r1, #14]
   22a14:	strd	r6, [sp, #8]
   22a18:	str	r8, [sp, #16]
   22a1c:	str	lr, [sp, #20]
   22a20:	cmp	r3, #5
   22a24:	bne	22ac4 <flatcc_builder_append_offset_vector@@Base+0xc0>
   22a28:	ldr	r3, [r1, #20]
   22a2c:	adds	r3, r2, r3
   22a30:	movcs	lr, #1
   22a34:	movcc	lr, #0
   22a38:	cmn	r3, #-1073741823	; 0xc0000001
   22a3c:	movls	ip, #0
   22a40:	movhi	ip, #1
   22a44:	orrs	r8, lr, ip
   22a48:	bne	22ae8 <flatcc_builder_append_offset_vector@@Base+0xe4>
   22a4c:	ldr	r7, [r0, #20]
   22a50:	lsl	r6, r2, #2
   22a54:	mov	r5, r0
   22a58:	str	r3, [r1, #20]
   22a5c:	ldr	r3, [r0, #24]
   22a60:	add	r1, r6, r7
   22a64:	cmp	r1, r3
   22a68:	str	r1, [r0, #20]
   22a6c:	bcs	22aa8 <flatcc_builder_append_offset_vector@@Base+0xa4>
   22a70:	ldr	r3, [r5, #16]
   22a74:	adds	r3, r3, r7
   22a78:	beq	22a90 <flatcc_builder_append_offset_vector@@Base+0x8c>
   22a7c:	mov	r0, r3
   22a80:	mov	r2, r6
   22a84:	mov	r1, r4
   22a88:	bl	12580 <memcpy@plt>
   22a8c:	mov	r3, r0
   22a90:	ldrd	r4, [sp]
   22a94:	mov	r0, r3
   22a98:	ldrd	r6, [sp, #8]
   22a9c:	ldr	r8, [sp, #16]
   22aa0:	add	sp, sp, #20
   22aa4:	pop	{pc}		; (ldr pc, [sp], #4)
   22aa8:	add	r1, r1, #1
   22aac:	mvn	r2, #3
   22ab0:	bl	210a8 <test_parse@@Base+0x528>
   22ab4:	cmp	r0, #0
   22ab8:	beq	22a70 <flatcc_builder_append_offset_vector@@Base+0x6c>
   22abc:	mov	r3, r8
   22ac0:	b	22a90 <flatcc_builder_append_offset_vector@@Base+0x8c>
   22ac4:	ldr	r3, [pc, #32]	; 22aec <flatcc_builder_append_offset_vector@@Base+0xe8>
   22ac8:	mov	r2, #948	; 0x3b4
   22acc:	ldr	r1, [pc, #28]	; 22af0 <flatcc_builder_append_offset_vector@@Base+0xec>
   22ad0:	ldr	r0, [pc, #28]	; 22af4 <flatcc_builder_append_offset_vector@@Base+0xf0>
   22ad4:	add	r3, pc, r3
   22ad8:	add	r3, r3, #420	; 0x1a4
   22adc:	add	r1, pc, r1
   22ae0:	add	r0, pc, r0
   22ae4:	bl	1267c <__assert_fail@plt>
   22ae8:	bl	2142c <flatcc_builder_default_alloc@@Base+0x2fc>
   22aec:	andeq	r8, r0, ip, ror r0
   22af0:	andeq	r8, r0, r4, asr #15
   22af4:	andeq	r8, r0, ip, ror r9

00022af8 <flatcc_builder_extend_string@@Base>:
   22af8:	ldr	r2, [r0, #32]
   22afc:	strd	r4, [sp, #-16]!
   22b00:	ldrh	r3, [r2, #14]
   22b04:	str	r6, [sp, #8]
   22b08:	str	lr, [sp, #12]
   22b0c:	cmp	r3, #6
   22b10:	bne	22b78 <flatcc_builder_extend_string@@Base+0x80>
   22b14:	ldr	r3, [r2, #20]
   22b18:	adds	r3, r1, r3
   22b1c:	bcs	22b74 <flatcc_builder_extend_string@@Base+0x7c>
   22b20:	ldr	r5, [r0, #20]
   22b24:	mov	r4, r0
   22b28:	str	r3, [r2, #20]
   22b2c:	ldr	r3, [r0, #24]
   22b30:	add	r1, r1, r5
   22b34:	cmp	r1, r3
   22b38:	str	r1, [r0, #20]
   22b3c:	bcs	22b58 <flatcc_builder_extend_string@@Base+0x60>
   22b40:	ldr	r0, [r4, #16]
   22b44:	add	r0, r0, r5
   22b48:	ldrd	r4, [sp]
   22b4c:	ldr	r6, [sp, #8]
   22b50:	add	sp, sp, #12
   22b54:	pop	{pc}		; (ldr pc, [sp], #4)
   22b58:	add	r1, r1, #1
   22b5c:	mvn	r2, #3
   22b60:	bl	210a8 <test_parse@@Base+0x528>
   22b64:	cmp	r0, #0
   22b68:	beq	22b40 <flatcc_builder_extend_string@@Base+0x48>
   22b6c:	mov	r0, #0
   22b70:	b	22b48 <flatcc_builder_extend_string@@Base+0x50>
   22b74:	bl	2142c <flatcc_builder_default_alloc@@Base+0x2fc>
   22b78:	ldr	r3, [pc, #28]	; 22b9c <flatcc_builder_extend_string@@Base+0xa4>
   22b7c:	movw	r2, #957	; 0x3bd
   22b80:	ldr	r1, [pc, #24]	; 22ba0 <flatcc_builder_extend_string@@Base+0xa8>
   22b84:	ldr	r0, [pc, #24]	; 22ba4 <flatcc_builder_extend_string@@Base+0xac>
   22b88:	add	r3, pc, r3
   22b8c:	add	r3, r3, #456	; 0x1c8
   22b90:	add	r1, pc, r1
   22b94:	add	r0, pc, r0
   22b98:	bl	1267c <__assert_fail@plt>
   22b9c:	andeq	r7, r0, r8, asr #31
   22ba0:	andeq	r8, r0, r0, lsl r7
   22ba4:	strdeq	r8, [r0], -ip

00022ba8 <flatcc_builder_append_string@@Base>:
   22ba8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   22bac:	strd	r6, [sp, #8]
   22bb0:	mov	r7, r1
   22bb4:	ldr	r1, [r0, #32]
   22bb8:	str	r8, [sp, #16]
   22bbc:	str	lr, [sp, #20]
   22bc0:	ldrh	r3, [r1, #14]
   22bc4:	cmp	r3, #6
   22bc8:	bne	22c54 <flatcc_builder_append_string@@Base+0xac>
   22bcc:	ldr	r3, [r1, #20]
   22bd0:	mov	r5, r2
   22bd4:	adds	r3, r2, r3
   22bd8:	bcs	22c50 <flatcc_builder_append_string@@Base+0xa8>
   22bdc:	ldr	r6, [r0, #20]
   22be0:	mov	r4, r0
   22be4:	str	r3, [r1, #20]
   22be8:	ldr	r3, [r0, #24]
   22bec:	add	r1, r2, r6
   22bf0:	cmp	r1, r3
   22bf4:	str	r1, [r0, #20]
   22bf8:	bcs	22c34 <flatcc_builder_append_string@@Base+0x8c>
   22bfc:	ldr	r3, [r4, #16]
   22c00:	adds	r3, r3, r6
   22c04:	beq	22c1c <flatcc_builder_append_string@@Base+0x74>
   22c08:	mov	r0, r3
   22c0c:	mov	r2, r5
   22c10:	mov	r1, r7
   22c14:	bl	12580 <memcpy@plt>
   22c18:	mov	r3, r0
   22c1c:	ldrd	r4, [sp]
   22c20:	mov	r0, r3
   22c24:	ldrd	r6, [sp, #8]
   22c28:	ldr	r8, [sp, #16]
   22c2c:	add	sp, sp, #20
   22c30:	pop	{pc}		; (ldr pc, [sp], #4)
   22c34:	add	r1, r1, #1
   22c38:	mvn	r2, #3
   22c3c:	bl	210a8 <test_parse@@Base+0x528>
   22c40:	cmp	r0, #0
   22c44:	beq	22bfc <flatcc_builder_append_string@@Base+0x54>
   22c48:	mov	r3, #0
   22c4c:	b	22c1c <flatcc_builder_append_string@@Base+0x74>
   22c50:	bl	2142c <flatcc_builder_default_alloc@@Base+0x2fc>
   22c54:	ldr	r3, [pc, #28]	; 22c78 <flatcc_builder_append_string@@Base+0xd0>
   22c58:	movw	r2, #966	; 0x3c6
   22c5c:	ldr	r1, [pc, #24]	; 22c7c <flatcc_builder_append_string@@Base+0xd4>
   22c60:	ldr	r0, [pc, #24]	; 22c80 <flatcc_builder_append_string@@Base+0xd8>
   22c64:	add	r3, pc, r3
   22c68:	add	r3, r3, #488	; 0x1e8
   22c6c:	add	r1, pc, r1
   22c70:	add	r0, pc, r0
   22c74:	bl	1267c <__assert_fail@plt>
   22c78:	andeq	r7, r0, ip, ror #29
   22c7c:	andeq	r8, r0, r4, lsr r6
   22c80:	andeq	r8, r0, r0, lsr #16

00022c84 <flatcc_builder_append_string_str@@Base>:
   22c84:	strd	r4, [sp, #-16]!
   22c88:	mov	r5, r0
   22c8c:	mov	r0, r1
   22c90:	mov	r4, r1
   22c94:	str	r6, [sp, #8]
   22c98:	str	lr, [sp, #12]
   22c9c:	bl	12604 <strlen@plt>
   22ca0:	mov	r2, r0
   22ca4:	mov	r1, r4
   22ca8:	ldr	r6, [sp, #8]
   22cac:	mov	r0, r5
   22cb0:	ldrd	r4, [sp]
   22cb4:	ldr	lr, [sp, #12]
   22cb8:	add	sp, sp, #16
   22cbc:	b	22ba8 <flatcc_builder_append_string@@Base>

00022cc0 <flatcc_builder_append_string_strn@@Base>:
   22cc0:	strd	r4, [sp, #-16]!
   22cc4:	mov	r4, r1
   22cc8:	mov	r1, #0
   22ccc:	str	r6, [sp, #8]
   22cd0:	mov	r6, r0
   22cd4:	mov	r0, r4
   22cd8:	mov	r5, r2
   22cdc:	str	lr, [sp, #12]
   22ce0:	bl	12640 <memchr@plt>
   22ce4:	cmp	r0, #0
   22ce8:	mov	r1, r4
   22cec:	ldr	lr, [sp, #12]
   22cf0:	subne	r5, r0, r4
   22cf4:	mov	r0, r6
   22cf8:	mov	r2, r5
   22cfc:	ldrd	r4, [sp]
   22d00:	ldr	r6, [sp, #8]
   22d04:	add	sp, sp, #16
   22d08:	b	22ba8 <flatcc_builder_append_string@@Base>

00022d0c <flatcc_builder_truncate_vector@@Base>:
   22d0c:	mov	r3, r0
   22d10:	ldr	r0, [r0, #32]
   22d14:	str	r4, [sp, #-8]!
   22d18:	ldrh	r2, [r0, #14]
   22d1c:	str	lr, [sp, #4]
   22d20:	cmp	r2, #4
   22d24:	bne	22d74 <flatcc_builder_truncate_vector@@Base+0x68>
   22d28:	mov	lr, r1
   22d2c:	ldr	r1, [r0, #20]
   22d30:	cmp	r1, lr
   22d34:	bcc	22d98 <flatcc_builder_truncate_vector@@Base+0x8c>
   22d38:	ldr	r2, [r0, #16]
   22d3c:	sub	ip, r1, lr
   22d40:	mov	r1, #0
   22d44:	str	ip, [r0, #20]
   22d48:	ldr	r0, [r3, #16]
   22d4c:	ldr	ip, [r3, #20]
   22d50:	mul	r2, r2, lr
   22d54:	sub	ip, ip, r2
   22d58:	add	r0, r0, ip
   22d5c:	str	ip, [r3, #20]
   22d60:	bl	12628 <memset@plt>
   22d64:	ldr	r4, [sp]
   22d68:	add	sp, sp, #4
   22d6c:	mov	r0, #0
   22d70:	pop	{pc}		; (ldr pc, [sp], #4)
   22d74:	ldr	r3, [pc, #64]	; 22dbc <flatcc_builder_truncate_vector@@Base+0xb0>
   22d78:	movw	r2, #985	; 0x3d9
   22d7c:	ldr	r1, [pc, #60]	; 22dc0 <flatcc_builder_truncate_vector@@Base+0xb4>
   22d80:	ldr	r0, [pc, #60]	; 22dc4 <flatcc_builder_truncate_vector@@Base+0xb8>
   22d84:	add	r3, pc, r3
   22d88:	add	r3, r3, #520	; 0x208
   22d8c:	add	r1, pc, r1
   22d90:	add	r0, pc, r0
   22d94:	bl	1267c <__assert_fail@plt>
   22d98:	ldr	r3, [pc, #40]	; 22dc8 <flatcc_builder_truncate_vector@@Base+0xbc>
   22d9c:	movw	r2, #986	; 0x3da
   22da0:	ldr	r1, [pc, #36]	; 22dcc <flatcc_builder_truncate_vector@@Base+0xc0>
   22da4:	ldr	r0, [pc, #36]	; 22dd0 <flatcc_builder_truncate_vector@@Base+0xc4>
   22da8:	add	r3, pc, r3
   22dac:	add	r3, r3, #520	; 0x208
   22db0:	add	r1, pc, r1
   22db4:	add	r0, pc, r0
   22db8:	bl	1267c <__assert_fail@plt>
   22dbc:	andeq	r7, r0, ip, asr #27
   22dc0:	andeq	r8, r0, r4, lsl r5
   22dc4:	andeq	r8, r0, r0, ror #12
   22dc8:	andeq	r7, r0, r8, lsr #27
   22dcc:	strdeq	r8, [r0], -r0
   22dd0:	andeq	r8, r0, r8, lsl #14

00022dd4 <flatcc_builder_truncate_offset_vector@@Base>:
   22dd4:	mov	r3, r0
   22dd8:	ldr	r0, [r0, #32]
   22ddc:	str	r4, [sp, #-8]!
   22de0:	ldrh	r2, [r0, #14]
   22de4:	str	lr, [sp, #4]
   22de8:	cmp	r2, #5
   22dec:	bne	22e3c <flatcc_builder_truncate_offset_vector@@Base+0x68>
   22df0:	mov	lr, r1
   22df4:	ldr	r1, [r0, #20]
   22df8:	cmp	r1, lr
   22dfc:	bcc	22e60 <flatcc_builder_truncate_offset_vector@@Base+0x8c>
   22e00:	ldr	r2, [r0, #16]
   22e04:	sub	ip, r1, lr
   22e08:	mov	r1, #0
   22e0c:	str	ip, [r0, #20]
   22e10:	ldr	r0, [r3, #16]
   22e14:	ldr	ip, [r3, #20]
   22e18:	mul	r2, r2, lr
   22e1c:	sub	ip, ip, r2
   22e20:	add	r0, r0, ip
   22e24:	str	ip, [r3, #20]
   22e28:	bl	12628 <memset@plt>
   22e2c:	ldr	r4, [sp]
   22e30:	add	sp, sp, #4
   22e34:	mov	r0, #0
   22e38:	pop	{pc}		; (ldr pc, [sp], #4)
   22e3c:	ldr	r3, [pc, #64]	; 22e84 <flatcc_builder_truncate_offset_vector@@Base+0xb0>
   22e40:	movw	r2, #994	; 0x3e2
   22e44:	ldr	r1, [pc, #60]	; 22e88 <flatcc_builder_truncate_offset_vector@@Base+0xb4>
   22e48:	ldr	r0, [pc, #60]	; 22e8c <flatcc_builder_truncate_offset_vector@@Base+0xb8>
   22e4c:	add	r3, pc, r3
   22e50:	add	r3, r3, #552	; 0x228
   22e54:	add	r1, pc, r1
   22e58:	add	r0, pc, r0
   22e5c:	bl	1267c <__assert_fail@plt>
   22e60:	ldr	r3, [pc, #40]	; 22e90 <flatcc_builder_truncate_offset_vector@@Base+0xbc>
   22e64:	movw	r2, #995	; 0x3e3
   22e68:	ldr	r1, [pc, #36]	; 22e94 <flatcc_builder_truncate_offset_vector@@Base+0xc0>
   22e6c:	ldr	r0, [pc, #36]	; 22e98 <flatcc_builder_truncate_offset_vector@@Base+0xc4>
   22e70:	add	r3, pc, r3
   22e74:	add	r3, r3, #552	; 0x228
   22e78:	add	r1, pc, r1
   22e7c:	add	r0, pc, r0
   22e80:	bl	1267c <__assert_fail@plt>
   22e84:	andeq	r7, r0, r4, lsl #26
   22e88:	andeq	r8, r0, ip, asr #8
   22e8c:	andeq	r8, r0, r4, lsl #12
   22e90:	andeq	r7, r0, r0, ror #25
   22e94:	andeq	r8, r0, r8, lsr #8
   22e98:	andeq	r8, r0, r4, ror #12

00022e9c <flatcc_builder_truncate_string@@Base>:
   22e9c:	str	r4, [sp, #-8]!
   22ea0:	str	lr, [sp, #4]
   22ea4:	ldr	lr, [r0, #32]
   22ea8:	ldrh	r2, [lr, #14]
   22eac:	cmp	r2, #6
   22eb0:	bne	22f00 <flatcc_builder_truncate_string@@Base+0x64>
   22eb4:	ldr	r2, [lr, #20]
   22eb8:	mov	ip, r1
   22ebc:	cmp	r2, r1
   22ec0:	bcc	22f24 <flatcc_builder_truncate_string@@Base+0x88>
   22ec4:	sub	r1, r2, r1
   22ec8:	mov	r3, r0
   22ecc:	ldr	r0, [r0, #16]
   22ed0:	mov	r2, ip
   22ed4:	str	r1, [lr, #20]
   22ed8:	mov	r1, #0
   22edc:	ldr	lr, [r3, #20]
   22ee0:	sub	ip, lr, ip
   22ee4:	add	r0, r0, ip
   22ee8:	str	ip, [r3, #20]
   22eec:	bl	12628 <memset@plt>
   22ef0:	ldr	r4, [sp]
   22ef4:	add	sp, sp, #4
   22ef8:	mov	r0, #0
   22efc:	pop	{pc}		; (ldr pc, [sp], #4)
   22f00:	ldr	r3, [pc, #64]	; 22f48 <flatcc_builder_truncate_string@@Base+0xac>
   22f04:	movw	r2, #1003	; 0x3eb
   22f08:	ldr	r1, [pc, #60]	; 22f4c <flatcc_builder_truncate_string@@Base+0xb0>
   22f0c:	ldr	r0, [pc, #60]	; 22f50 <flatcc_builder_truncate_string@@Base+0xb4>
   22f10:	add	r3, pc, r3
   22f14:	add	r3, r3, #592	; 0x250
   22f18:	add	r1, pc, r1
   22f1c:	add	r0, pc, r0
   22f20:	bl	1267c <__assert_fail@plt>
   22f24:	ldr	r3, [pc, #40]	; 22f54 <flatcc_builder_truncate_string@@Base+0xb8>
   22f28:	mov	r2, #1004	; 0x3ec
   22f2c:	ldr	r1, [pc, #36]	; 22f58 <flatcc_builder_truncate_string@@Base+0xbc>
   22f30:	ldr	r0, [pc, #36]	; 22f5c <flatcc_builder_truncate_string@@Base+0xc0>
   22f34:	add	r3, pc, r3
   22f38:	add	r3, r3, #592	; 0x250
   22f3c:	add	r1, pc, r1
   22f40:	add	r0, pc, r0
   22f44:	bl	1267c <__assert_fail@plt>
   22f48:	andeq	r7, r0, r0, asr #24
   22f4c:	andeq	r8, r0, r8, lsl #7
   22f50:	andeq	r8, r0, r4, ror r5
   22f54:	andeq	r7, r0, ip, lsl ip
   22f58:	andeq	r8, r0, r4, ror #6
   22f5c:	ldrdeq	r8, [r0], -ip

00022f60 <flatcc_builder_start_vector@@Base>:
   22f60:	cmp	r2, #4
   22f64:	strd	r4, [sp, #-16]!
   22f68:	mov	r5, r1
   22f6c:	movcs	r1, r2
   22f70:	movcc	r1, #4
   22f74:	str	r6, [sp, #8]
   22f78:	mov	r4, r0
   22f7c:	mov	r6, r3
   22f80:	str	lr, [sp, #12]
   22f84:	bl	21464 <flatcc_builder_default_alloc@@Base+0x334>
   22f88:	cmp	r0, #0
   22f8c:	bne	22fe8 <flatcc_builder_start_vector@@Base+0x88>
   22f90:	ldr	r3, [r4, #28]
   22f94:	mov	lr, #4
   22f98:	ldr	r2, [r4, #32]
   22f9c:	ldr	r1, [r4, #64]	; 0x40
   22fa0:	ldr	ip, [r4, #60]	; 0x3c
   22fa4:	strh	lr, [r2, #14]
   22fa8:	str	r5, [r2, #16]
   22fac:	sub	r1, r1, r3
   22fb0:	str	r0, [r2, #20]
   22fb4:	cmn	r1, #4
   22fb8:	str	r6, [r2, #24]
   22fbc:	add	ip, ip, r3
   22fc0:	mvnhi	r3, #3
   22fc4:	strls	r1, [r4, #24]
   22fc8:	strhi	r3, [r4, #24]
   22fcc:	mvn	r3, #3
   22fd0:	str	ip, [r4, #16]
   22fd4:	str	r3, [r2, #4]
   22fd8:	ldrd	r4, [sp]
   22fdc:	ldr	r6, [sp, #8]
   22fe0:	add	sp, sp, #12
   22fe4:	pop	{pc}		; (ldr pc, [sp], #4)
   22fe8:	mvn	r0, #0
   22fec:	b	22fd8 <flatcc_builder_start_vector@@Base+0x78>

00022ff0 <flatcc_builder_start_offset_vector@@Base>:
   22ff0:	mov	r1, #4
   22ff4:	strd	r4, [sp, #-16]!
   22ff8:	mov	r4, r0
   22ffc:	str	r6, [sp, #8]
   23000:	str	lr, [sp, #12]
   23004:	bl	21464 <flatcc_builder_default_alloc@@Base+0x334>
   23008:	cmp	r0, #0
   2300c:	bne	23064 <flatcc_builder_start_offset_vector@@Base+0x74>
   23010:	ldr	ip, [r4, #28]
   23014:	mov	lr, #4
   23018:	mov	r5, #5
   2301c:	ldr	r3, [r4, #32]
   23020:	ldr	r2, [r4, #64]	; 0x40
   23024:	ldr	r1, [r4, #60]	; 0x3c
   23028:	strh	r5, [r3, #14]
   2302c:	str	lr, [r3, #16]
   23030:	sub	r2, r2, ip
   23034:	str	r0, [r3, #20]
   23038:	cmn	r2, #4
   2303c:	mvnhi	r2, #3
   23040:	add	r1, r1, ip
   23044:	str	r1, [r4, #16]
   23048:	str	r2, [r4, #24]
   2304c:	mvn	r2, #3
   23050:	str	r2, [r3, #4]
   23054:	ldrd	r4, [sp]
   23058:	ldr	r6, [sp, #8]
   2305c:	add	sp, sp, #12
   23060:	pop	{pc}		; (ldr pc, [sp], #4)
   23064:	mvn	r0, #0
   23068:	b	23054 <flatcc_builder_start_offset_vector@@Base+0x64>

0002306c <flatcc_builder_start_string@@Base>:
   2306c:	mov	r1, #1
   23070:	strd	r4, [sp, #-16]!
   23074:	mov	r4, r0
   23078:	str	r6, [sp, #8]
   2307c:	str	lr, [sp, #12]
   23080:	bl	21464 <flatcc_builder_default_alloc@@Base+0x334>
   23084:	cmp	r0, #0
   23088:	bne	230e0 <flatcc_builder_start_string@@Base+0x74>
   2308c:	ldr	ip, [r4, #28]
   23090:	mov	lr, #1
   23094:	mov	r5, #6
   23098:	ldr	r3, [r4, #32]
   2309c:	ldr	r2, [r4, #64]	; 0x40
   230a0:	ldr	r1, [r4, #60]	; 0x3c
   230a4:	strh	r5, [r3, #14]
   230a8:	str	lr, [r3, #16]
   230ac:	sub	r2, r2, ip
   230b0:	str	r0, [r3, #20]
   230b4:	cmn	r2, #4
   230b8:	mvnhi	r2, #3
   230bc:	add	r1, r1, ip
   230c0:	str	r1, [r4, #16]
   230c4:	str	r2, [r4, #24]
   230c8:	mvn	r2, #3
   230cc:	str	r2, [r3, #4]
   230d0:	ldrd	r4, [sp]
   230d4:	ldr	r6, [sp, #8]
   230d8:	add	sp, sp, #12
   230dc:	pop	{pc}		; (ldr pc, [sp], #4)
   230e0:	mvn	r0, #0
   230e4:	b	230d0 <flatcc_builder_start_string@@Base+0x64>

000230e8 <flatcc_builder_reserve_table@@Base>:
   230e8:	cmp	r1, #0
   230ec:	strd	r4, [sp, #-20]!	; 0xffffffec
   230f0:	strd	r6, [sp, #8]
   230f4:	str	lr, [sp, #16]
   230f8:	sub	sp, sp, #12
   230fc:	blt	231e0 <flatcc_builder_reserve_table@@Base+0xf8>
   23100:	ldr	r2, [r0, #32]
   23104:	add	r1, r1, #2
   23108:	mov	r4, r0
   2310c:	lsl	r5, r1, #1
   23110:	ldr	r1, [r0, #56]	; 0x38
   23114:	ldrh	r6, [r2, #28]
   23118:	ldr	r3, [r2, #16]
   2311c:	add	r6, r3, r6, lsl #1
   23120:	add	r2, r6, r5
   23124:	cmp	r2, r1
   23128:	bhi	23190 <flatcc_builder_reserve_table@@Base+0xa8>
   2312c:	ldr	r3, [r4, #52]	; 0x34
   23130:	adds	r3, r3, r6
   23134:	mvneq	r0, #0
   23138:	streq	r3, [r4, #4]
   2313c:	beq	2317c <flatcc_builder_reserve_table@@Base+0x94>
   23140:	ldr	r2, [r4, #32]
   23144:	add	r3, r3, #4
   23148:	ldr	r1, [r4, #80]	; 0x50
   2314c:	ldr	r6, [r2, #20]
   23150:	str	r3, [r4, #4]
   23154:	add	r2, r5, r6
   23158:	sub	r2, r2, #3
   2315c:	cmp	r2, r1
   23160:	bhi	231b8 <flatcc_builder_reserve_table@@Base+0xd0>
   23164:	ldr	r3, [r4, #76]	; 0x4c
   23168:	add	r3, r3, r6
   2316c:	clz	r0, r3
   23170:	lsr	r0, r0, #5
   23174:	str	r3, [r4]
   23178:	rsb	r0, r0, #0
   2317c:	add	sp, sp, #12
   23180:	ldrd	r4, [sp]
   23184:	ldrd	r6, [sp, #8]
   23188:	add	sp, sp, #16
   2318c:	pop	{pc}		; (ldr pc, [sp], #4)
   23190:	mov	ip, #0
   23194:	add	r1, r0, #52	; 0x34
   23198:	ldr	r0, [r0, #40]	; 0x28
   2319c:	mov	r3, #1
   231a0:	str	ip, [sp]
   231a4:	ldr	r7, [r4, #48]	; 0x30
   231a8:	blx	r7
   231ac:	cmp	r0, #0
   231b0:	beq	2312c <flatcc_builder_reserve_table@@Base+0x44>
   231b4:	bl	21254 <flatcc_builder_default_alloc@@Base+0x124>
   231b8:	mov	ip, #3
   231bc:	mov	r3, #0
   231c0:	ldr	r0, [r4, #40]	; 0x28
   231c4:	add	r1, r4, #76	; 0x4c
   231c8:	str	ip, [sp]
   231cc:	ldr	r5, [r4, #48]	; 0x30
   231d0:	blx	r5
   231d4:	cmp	r0, #0
   231d8:	beq	23164 <flatcc_builder_reserve_table@@Base+0x7c>
   231dc:	b	231b4 <flatcc_builder_reserve_table@@Base+0xcc>
   231e0:	ldr	r3, [pc, #28]	; 23204 <flatcc_builder_reserve_table@@Base+0x11c>
   231e4:	movw	r2, #1065	; 0x429
   231e8:	ldr	r1, [pc, #24]	; 23208 <flatcc_builder_reserve_table@@Base+0x120>
   231ec:	ldr	r0, [pc, #24]	; 2320c <flatcc_builder_reserve_table@@Base+0x124>
   231f0:	add	r3, pc, r3
   231f4:	add	r3, r3, #624	; 0x270
   231f8:	add	r1, pc, r1
   231fc:	add	r0, pc, r0
   23200:	bl	1267c <__assert_fail@plt>
   23204:	andeq	r7, r0, r0, ror #18
   23208:	andeq	r8, r0, r8, lsr #1
   2320c:	andeq	r8, r0, r4, asr #6

00023210 <flatcc_builder_start_table@@Base>:
   23210:	strd	r4, [sp, #-32]!	; 0xffffffe0
   23214:	mov	r5, r1
   23218:	mov	r1, #4
   2321c:	strd	r6, [sp, #8]
   23220:	mov	r4, r0
   23224:	strd	r8, [sp, #16]
   23228:	str	sl, [sp, #24]
   2322c:	str	lr, [sp, #28]
   23230:	sub	sp, sp, #8
   23234:	bl	21464 <flatcc_builder_default_alloc@@Base+0x334>
   23238:	subs	r7, r0, #0
   2323c:	bne	23384 <flatcc_builder_start_table@@Base+0x174>
   23240:	ldm	r4, {r0, r2}
   23244:	add	r5, r5, #2
   23248:	movw	ip, #15186	; 0x3b52
   2324c:	movt	ip, #12137	; 0x2f69
   23250:	lsl	r5, r5, #1
   23254:	mov	r8, #3
   23258:	ldrh	lr, [r4, #8]
   2325c:	ldr	r1, [r4, #52]	; 0x34
   23260:	ldr	sl, [r4, #76]	; 0x4c
   23264:	ldr	r3, [r4, #32]
   23268:	sub	r2, r2, r1
   2326c:	ldr	r9, [r4, #56]	; 0x38
   23270:	add	r6, r2, lr, lsl #1
   23274:	sub	r0, r0, sl
   23278:	ldr	sl, [r4, #12]
   2327c:	str	r2, [r3, #16]
   23280:	add	r2, r6, r5
   23284:	str	r0, [r3, #20]
   23288:	cmp	r2, r9
   2328c:	str	sl, [r3, #24]
   23290:	strh	lr, [r3, #28]
   23294:	strh	r7, [r4, #8]
   23298:	str	ip, [r4, #12]
   2329c:	strh	r8, [r3, #14]
   232a0:	bls	232c8 <flatcc_builder_start_table@@Base+0xb8>
   232a4:	mov	r3, #1
   232a8:	add	r1, r4, #52	; 0x34
   232ac:	str	r7, [sp]
   232b0:	ldr	r0, [r4, #40]	; 0x28
   232b4:	ldr	r8, [r4, #48]	; 0x30
   232b8:	blx	r8
   232bc:	cmp	r0, #0
   232c0:	bne	23380 <flatcc_builder_start_table@@Base+0x170>
   232c4:	ldr	r1, [r4, #52]	; 0x34
   232c8:	adds	r6, r6, r1
   232cc:	streq	r6, [r4, #4]
   232d0:	beq	23384 <flatcc_builder_start_table@@Base+0x174>
   232d4:	ldr	r1, [r4, #32]
   232d8:	sub	r2, r5, #3
   232dc:	add	r6, r6, #4
   232e0:	ldr	r3, [r4, #80]	; 0x50
   232e4:	ldr	r5, [r1, #20]
   232e8:	str	r6, [r4, #4]
   232ec:	add	r2, r2, r5
   232f0:	cmp	r2, r3
   232f4:	bhi	2335c <flatcc_builder_start_table@@Base+0x14c>
   232f8:	ldr	r3, [r4, #76]	; 0x4c
   232fc:	add	r3, r3, r5
   23300:	cmp	r3, #0
   23304:	str	r3, [r4]
   23308:	beq	23384 <flatcc_builder_start_table@@Base+0x174>
   2330c:	ldr	r0, [r4, #28]
   23310:	movw	r2, #65532	; 0xfffc
   23314:	ldr	ip, [r4, #32]
   23318:	ldr	r3, [r4, #64]	; 0x40
   2331c:	ldr	r1, [r4, #60]	; 0x3c
   23320:	sub	r3, r3, r0
   23324:	cmp	r3, r2
   23328:	add	r1, r1, r0
   2332c:	movcs	r3, r2
   23330:	str	r1, [r4, #16]
   23334:	str	r3, [r4, #24]
   23338:	str	r2, [ip, #4]
   2333c:	mov	r0, r7
   23340:	add	sp, sp, #8
   23344:	ldrd	r4, [sp]
   23348:	ldrd	r6, [sp, #8]
   2334c:	ldrd	r8, [sp, #16]
   23350:	ldr	sl, [sp, #24]
   23354:	add	sp, sp, #28
   23358:	pop	{pc}		; (ldr pc, [sp], #4)
   2335c:	mov	ip, #3
   23360:	mov	r3, #0
   23364:	ldr	r0, [r4, #40]	; 0x28
   23368:	add	r1, r4, #76	; 0x4c
   2336c:	str	ip, [sp]
   23370:	ldr	r6, [r4, #48]	; 0x30
   23374:	blx	r6
   23378:	cmp	r0, #0
   2337c:	beq	232f8 <flatcc_builder_start_table@@Base+0xe8>
   23380:	bl	21254 <flatcc_builder_default_alloc@@Base+0x124>
   23384:	mvn	r7, #0
   23388:	b	2333c <flatcc_builder_start_table@@Base+0x12c>

0002338c <flatcc_builder_create_vtable@@Base>:
   2338c:	mov	r3, #0
   23390:	strd	r4, [sp, #-16]!
   23394:	mov	r5, r0
   23398:	ldr	r0, [r0, #152]	; 0x98
   2339c:	cmp	r2, #0
   233a0:	str	r6, [sp, #8]
   233a4:	str	lr, [sp, #12]
   233a8:	sub	sp, sp, #80	; 0x50
   233ac:	str	r3, [sp, #8]
   233b0:	str	r3, [sp, #12]
   233b4:	beq	2342c <flatcc_builder_create_vtable@@Base+0xa0>
   233b8:	mov	r3, #1
   233bc:	cmp	r0, #0
   233c0:	strd	r2, [sp, #8]
   233c4:	str	r1, [sp, #16]
   233c8:	str	r2, [sp, #20]
   233cc:	beq	23464 <flatcc_builder_create_vtable@@Base+0xd8>
   233d0:	ldr	r3, [r5, #136]	; 0x88
   233d4:	sub	r4, r3, r2
   233d8:	cmp	r3, r4
   233dc:	ble	23440 <flatcc_builder_create_vtable@@Base+0xb4>
   233e0:	mov	r3, r4
   233e4:	add	r1, sp, #16
   233e8:	str	r2, [sp]
   233ec:	ldr	r2, [sp, #12]
   233f0:	ldr	r0, [r5, #36]	; 0x24
   233f4:	ldr	r6, [r5, #44]	; 0x2c
   233f8:	blx	r6
   233fc:	cmp	r0, #0
   23400:	bne	234b0 <flatcc_builder_create_vtable@@Base+0x124>
   23404:	cmp	r4, #0
   23408:	str	r4, [r5, #136]	; 0x88
   2340c:	beq	23414 <flatcc_builder_create_vtable@@Base+0x88>
   23410:	add	r4, r4, #1
   23414:	mov	r0, r4
   23418:	add	sp, sp, #80	; 0x50
   2341c:	ldrd	r4, [sp]
   23420:	ldr	r6, [sp, #8]
   23424:	add	sp, sp, #12
   23428:	pop	{pc}		; (ldr pc, [sp], #4)
   2342c:	cmp	r0, #0
   23430:	bne	23440 <flatcc_builder_create_vtable@@Base+0xb4>
   23434:	ldr	r3, [r5, #180]	; 0xb4
   23438:	cmp	r3, #0
   2343c:	beq	234a8 <flatcc_builder_create_vtable@@Base+0x11c>
   23440:	ldr	r3, [pc, #108]	; 234b4 <flatcc_builder_create_vtable@@Base+0x128>
   23444:	movw	r2, #647	; 0x287
   23448:	ldr	r1, [pc, #104]	; 234b8 <flatcc_builder_create_vtable@@Base+0x12c>
   2344c:	ldr	r0, [pc, #104]	; 234bc <flatcc_builder_create_vtable@@Base+0x130>
   23450:	add	r3, pc, r3
   23454:	add	r3, r3, #44	; 0x2c
   23458:	add	r1, pc, r1
   2345c:	add	r0, pc, r0
   23460:	bl	1267c <__assert_fail@plt>
   23464:	ldr	r3, [r5, #180]	; 0xb4
   23468:	cmp	r3, #0
   2346c:	bne	233d0 <flatcc_builder_create_vtable@@Base+0x44>
   23470:	ldr	r4, [r5, #140]	; 0x8c
   23474:	mov	r0, r2
   23478:	add	r2, r4, r2
   2347c:	str	r2, [r5, #140]	; 0x8c
   23480:	mov	r3, r4
   23484:	add	r1, sp, #16
   23488:	str	r0, [sp]
   2348c:	ldr	r2, [sp, #12]
   23490:	ldr	r0, [r5, #36]	; 0x24
   23494:	ldr	r5, [r5, #44]	; 0x2c
   23498:	blx	r5
   2349c:	cmp	r0, #0
   234a0:	beq	23410 <flatcc_builder_create_vtable@@Base+0x84>
   234a4:	bl	21288 <flatcc_builder_default_alloc@@Base+0x158>
   234a8:	ldr	r4, [r5, #140]	; 0x8c
   234ac:	b	23480 <flatcc_builder_create_vtable@@Base+0xf4>
   234b0:	bl	213f4 <flatcc_builder_default_alloc@@Base+0x2c4>
   234b4:	andeq	r7, r0, r0, lsl #14
   234b8:	andeq	r7, r0, r8, asr #28
   234bc:	andeq	r7, r0, ip, asr #29

000234c0 <flatcc_builder_create_cached_vtable@@Base>:
   234c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   234c4:	strd	r6, [sp, #8]
   234c8:	mov	r6, r0
   234cc:	strd	r8, [sp, #16]
   234d0:	mov	r9, r2
   234d4:	mov	r8, r3
   234d8:	strd	sl, [sp, #24]
   234dc:	str	lr, [sp, #32]
   234e0:	sub	sp, sp, #28
   234e4:	str	r1, [sp, #8]
   234e8:	ldr	r1, [r0, #116]	; 0x74
   234ec:	cmp	r1, #0
   234f0:	rsbne	r1, r1, #32
   234f4:	beq	2367c <flatcc_builder_create_cached_vtable@@Base+0x1bc>
   234f8:	ldr	sl, [r6, #92]	; 0x5c
   234fc:	lsr	r8, r8, r1
   23500:	adds	fp, sl, r8, lsl #2
   23504:	str	fp, [sp, #12]
   23508:	beq	23718 <flatcc_builder_create_cached_vtable@@Base+0x258>
   2350c:	ldr	r5, [sl, r8, lsl #2]
   23510:	cmp	r5, #0
   23514:	beq	2374c <flatcc_builder_create_cached_vtable@@Base+0x28c>
   23518:	mov	r3, #0
   2351c:	str	r8, [sp, #16]
   23520:	mov	r8, fp
   23524:	mov	fp, r6
   23528:	ldr	r7, [r6, #68]	; 0x44
   2352c:	str	r3, [sp, #20]
   23530:	ldr	r3, [r6, #100]	; 0x64
   23534:	mov	r6, r3
   23538:	add	r4, r6, r5
   2353c:	ldr	r1, [r4, #8]
   23540:	ldrh	r2, [r7, r1]
   23544:	add	r1, r7, r1
   23548:	cmp	r2, r9
   2354c:	bne	23628 <flatcc_builder_create_cached_vtable@@Base+0x168>
   23550:	mov	r2, r9
   23554:	ldr	r0, [sp, #8]
   23558:	bl	12598 <memcmp@plt>
   2355c:	cmp	r0, #0
   23560:	bne	23628 <flatcc_builder_create_cached_vtable@@Base+0x168>
   23564:	ldr	r1, [r4, #4]
   23568:	ldr	r2, [fp, #152]	; 0x98
   2356c:	cmp	r1, r2
   23570:	beq	23634 <flatcc_builder_create_cached_vtable@@Base+0x174>
   23574:	ldr	r5, [r4, #12]
   23578:	add	r8, r4, #12
   2357c:	str	r4, [sp, #20]
   23580:	cmp	r5, #0
   23584:	bne	23538 <flatcc_builder_create_cached_vtable@@Base+0x78>
   23588:	ldr	r8, [sp, #16]
   2358c:	mov	r6, fp
   23590:	ldr	r3, [r6, #104]	; 0x68
   23594:	ldr	r4, [r6, #124]	; 0x7c
   23598:	add	r2, r4, #16
   2359c:	cmp	r2, r3
   235a0:	bls	235c8 <flatcc_builder_create_cached_vtable@@Base+0x108>
   235a4:	mov	ip, #6
   235a8:	mov	r3, #0
   235ac:	ldr	r0, [r6, #40]	; 0x28
   235b0:	add	r1, r6, #100	; 0x64
   235b4:	str	ip, [sp]
   235b8:	ldr	r5, [r6, #48]	; 0x30
   235bc:	blx	r5
   235c0:	cmp	r0, #0
   235c4:	bne	23748 <flatcc_builder_create_cached_vtable@@Base+0x288>
   235c8:	ldr	r5, [r6, #100]	; 0x64
   235cc:	adds	r7, r5, r4
   235d0:	beq	23718 <flatcc_builder_create_cached_vtable@@Base+0x258>
   235d4:	ldr	r3, [r6, #124]	; 0x7c
   235d8:	mov	r2, r9
   235dc:	ldr	r0, [r6, #152]	; 0x98
   235e0:	ldr	r1, [sp, #8]
   235e4:	add	ip, r3, #16
   235e8:	str	ip, [r6, #124]	; 0x7c
   235ec:	str	r0, [r7, #4]
   235f0:	mov	r0, r6
   235f4:	ldr	ip, [sl, r8, lsl #2]
   235f8:	str	ip, [r7, #12]
   235fc:	str	r3, [sl, r8, lsl #2]
   23600:	bl	2338c <flatcc_builder_create_vtable@@Base>
   23604:	cmp	r0, #0
   23608:	str	r0, [r5, r4]
   2360c:	beq	23718 <flatcc_builder_create_cached_vtable@@Base+0x258>
   23610:	ldr	r3, [sp, #20]
   23614:	cmp	r3, #0
   23618:	beq	2375c <flatcc_builder_create_cached_vtable@@Base+0x29c>
   2361c:	ldr	r3, [r3, #8]
   23620:	str	r3, [r7, #8]
   23624:	b	23660 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   23628:	add	r8, r4, #12
   2362c:	ldr	r5, [r4, #12]
   23630:	b	23580 <flatcc_builder_create_cached_vtable@@Base+0xc0>
   23634:	ldr	r3, [sp, #12]
   23638:	mov	fp, r8
   2363c:	ldr	r8, [sp, #16]
   23640:	cmp	r3, fp
   23644:	beq	2365c <flatcc_builder_create_cached_vtable@@Base+0x19c>
   23648:	ldr	r3, [r4, #12]
   2364c:	str	r3, [fp]
   23650:	ldr	r3, [sl, r8, lsl #2]
   23654:	str	r3, [r4, #12]
   23658:	str	r5, [sl, r8, lsl #2]
   2365c:	ldr	r0, [r4]
   23660:	add	sp, sp, #28
   23664:	ldrd	r4, [sp]
   23668:	ldrd	r6, [sp, #8]
   2366c:	ldrd	r8, [sp, #16]
   23670:	ldrd	sl, [sp, #24]
   23674:	add	sp, sp, #32
   23678:	pop	{pc}		; (ldr pc, [sp], #4)
   2367c:	ldr	r4, [r0, #124]	; 0x7c
   23680:	add	r5, r0, #92	; 0x5c
   23684:	cmp	r4, #0
   23688:	bne	237f0 <flatcc_builder_create_cached_vtable@@Base+0x330>
   2368c:	ldr	r3, [r0, #104]	; 0x68
   23690:	cmp	r3, #15
   23694:	bls	23720 <flatcc_builder_create_cached_vtable@@Base+0x260>
   23698:	ldr	r3, [r6, #100]	; 0x64
   2369c:	cmp	r3, #0
   236a0:	beq	23718 <flatcc_builder_create_cached_vtable@@Base+0x258>
   236a4:	mov	ip, #16
   236a8:	mov	r2, #5
   236ac:	ldr	r0, [r6, #40]	; 0x28
   236b0:	mov	r1, r5
   236b4:	mov	r3, #1
   236b8:	str	r2, [sp]
   236bc:	mov	r2, #256	; 0x100
   236c0:	str	ip, [r6, #124]	; 0x7c
   236c4:	ldr	r5, [r6, #48]	; 0x30
   236c8:	blx	r5
   236cc:	cmp	r0, #0
   236d0:	bne	23718 <flatcc_builder_create_cached_vtable@@Base+0x258>
   236d4:	mov	r3, #256	; 0x100
   236d8:	ldr	r1, [r6, #96]	; 0x60
   236dc:	b	236e4 <flatcc_builder_create_cached_vtable@@Base+0x224>
   236e0:	mov	r3, r2
   236e4:	lsl	r2, r3, #1
   236e8:	cmp	r2, r1
   236ec:	bls	236e0 <flatcc_builder_create_cached_vtable@@Base+0x220>
   236f0:	lsr	r3, r3, #2
   236f4:	cmp	r3, #1
   236f8:	bls	23754 <flatcc_builder_create_cached_vtable@@Base+0x294>
   236fc:	mov	r2, #1
   23700:	add	r4, r4, #1
   23704:	cmp	r3, r2, lsl r4
   23708:	bhi	23700 <flatcc_builder_create_cached_vtable@@Base+0x240>
   2370c:	rsb	r1, r4, #32
   23710:	str	r4, [r6, #116]	; 0x74
   23714:	b	234f8 <flatcc_builder_create_cached_vtable@@Base+0x38>
   23718:	mov	r0, #0
   2371c:	b	23660 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   23720:	mov	ip, #6
   23724:	add	r1, r0, #100	; 0x64
   23728:	ldr	r0, [r0, #40]	; 0x28
   2372c:	mov	r3, r4
   23730:	mov	r2, #16
   23734:	str	ip, [sp]
   23738:	ldr	r7, [r6, #48]	; 0x30
   2373c:	blx	r7
   23740:	cmp	r0, #0
   23744:	beq	23698 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   23748:	bl	21254 <flatcc_builder_default_alloc@@Base+0x124>
   2374c:	str	r5, [sp, #20]
   23750:	b	23590 <flatcc_builder_create_cached_vtable@@Base+0xd0>
   23754:	mov	r1, #32
   23758:	b	23710 <flatcc_builder_create_cached_vtable@@Base+0x250>
   2375c:	ldr	r8, [r6, #120]	; 0x78
   23760:	ldr	r3, [r6, #172]	; 0xac
   23764:	add	r2, r9, r8
   23768:	cmp	r3, #0
   2376c:	beq	23778 <flatcc_builder_create_cached_vtable@@Base+0x2b8>
   23770:	cmp	r3, r2
   23774:	bcc	237d8 <flatcc_builder_create_cached_vtable@@Base+0x318>
   23778:	ldr	r3, [r6, #72]	; 0x48
   2377c:	cmp	r3, r2
   23780:	bcs	237a8 <flatcc_builder_create_cached_vtable@@Base+0x2e8>
   23784:	mov	ip, #2
   23788:	mov	r3, #0
   2378c:	ldr	r0, [r6, #40]	; 0x28
   23790:	add	r1, r6, #68	; 0x44
   23794:	str	ip, [sp]
   23798:	ldr	sl, [r6, #48]	; 0x30
   2379c:	blx	sl
   237a0:	cmp	r0, #0
   237a4:	bne	23748 <flatcc_builder_create_cached_vtable@@Base+0x288>
   237a8:	ldr	r3, [r6, #68]	; 0x44
   237ac:	adds	r0, r3, r8
   237b0:	beq	237e8 <flatcc_builder_create_cached_vtable@@Base+0x328>
   237b4:	ldr	r3, [r6, #120]	; 0x78
   237b8:	mov	r2, r9
   237bc:	ldr	r1, [sp, #8]
   237c0:	add	r9, r3, r9
   237c4:	str	r3, [r7, #8]
   237c8:	str	r9, [r6, #120]	; 0x78
   237cc:	bl	12580 <memcpy@plt>
   237d0:	ldr	r0, [r5, r4]
   237d4:	b	23660 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   237d8:	mov	r0, r6
   237dc:	bl	217b4 <flatcc_builder_flush_vtable_cache@@Base>
   237e0:	ldr	r0, [r5, r4]
   237e4:	b	23660 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   237e8:	mvn	r0, #0
   237ec:	b	23660 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   237f0:	ldr	r3, [pc, #28]	; 23814 <flatcc_builder_create_cached_vtable@@Base+0x354>
   237f4:	movw	r2, #342	; 0x156
   237f8:	ldr	r1, [pc, #24]	; 23818 <flatcc_builder_create_cached_vtable@@Base+0x358>
   237fc:	ldr	r0, [pc, #24]	; 2381c <flatcc_builder_create_cached_vtable@@Base+0x35c>
   23800:	add	r3, pc, r3
   23804:	add	r3, r3, #656	; 0x290
   23808:	add	r1, pc, r1
   2380c:	add	r0, pc, r0
   23810:	bl	1267c <__assert_fail@plt>
   23814:	andeq	r7, r0, r0, asr r3
   23818:	muleq	r0, r8, sl
   2381c:	andeq	r7, r0, r0, asr #26

00023820 <flatcc_builder_create_table@@Base>:
   23820:	strd	r4, [sp, #-24]!	; 0xffffffe8
   23824:	mov	r5, r0
   23828:	strd	r6, [sp, #8]
   2382c:	str	r8, [sp, #16]
   23830:	str	lr, [sp, #20]
   23834:	sub	sp, sp, #88	; 0x58
   23838:	ldr	r6, [sp, #116]	; 0x74
   2383c:	ldr	r7, [pc, #444]	; 23a00 <flatcc_builder_create_table@@Base+0x1e0>
   23840:	ldr	r0, [sp, #120]	; 0x78
   23844:	cmp	r6, #0
   23848:	add	r7, pc, r7
   2384c:	blt	239b4 <flatcc_builder_create_table@@Base+0x194>
   23850:	tst	r0, #1
   23854:	beq	23990 <flatcc_builder_create_table@@Base+0x170>
   23858:	ldrh	ip, [r5, #128]	; 0x80
   2385c:	cmp	r3, #4
   23860:	sub	r0, r0, #1
   23864:	movcc	r3, #4
   23868:	cmp	ip, r3
   2386c:	ldr	ip, [r5, #136]	; 0x88
   23870:	strhcc	r3, [r5, #128]	; 0x80
   23874:	sub	r3, r3, #1
   23878:	cmp	r6, #0
   2387c:	sub	r4, ip, r2
   23880:	mov	r8, r4
   23884:	sub	r4, r4, #4
   23888:	and	r8, r8, r3
   2388c:	sub	r0, r4, r0
   23890:	sub	r0, r0, r8
   23894:	str	r0, [sp, #12]
   23898:	beq	238cc <flatcc_builder_create_table@@Base+0xac>
   2389c:	ldr	ip, [sp, #112]	; 0x70
   238a0:	sub	r4, r8, r4
   238a4:	sub	r4, r4, #4
   238a8:	add	r6, ip, r6, lsl #1
   238ac:	ldrh	r3, [ip], #2
   238b0:	ldr	r0, [r1, r3]
   238b4:	sub	lr, r4, r3
   238b8:	cmp	r6, ip
   238bc:	add	r0, r0, lr
   238c0:	str	r0, [r1, r3]
   238c4:	bne	238ac <flatcc_builder_create_table@@Base+0x8c>
   238c8:	ldr	ip, [r5, #136]	; 0x88
   238cc:	mov	r3, #1
   238d0:	mov	r0, #4
   238d4:	cmp	r2, #0
   238d8:	str	r0, [sp, #16]
   238dc:	str	r3, [sp, #20]
   238e0:	add	r3, sp, #12
   238e4:	str	r3, [sp, #24]
   238e8:	str	r0, [sp, #28]
   238ec:	beq	23908 <flatcc_builder_create_table@@Base+0xe8>
   238f0:	add	r0, r2, r0
   238f4:	mov	r3, #2
   238f8:	str	r0, [sp, #16]
   238fc:	str	r3, [sp, #20]
   23900:	str	r1, [sp, #32]
   23904:	str	r2, [sp, #36]	; 0x24
   23908:	cmp	r8, #0
   2390c:	bne	23960 <flatcc_builder_create_table@@Base+0x140>
   23910:	sub	r4, ip, r0
   23914:	cmp	r4, ip
   23918:	bge	239dc <flatcc_builder_create_table@@Base+0x1bc>
   2391c:	mov	r3, r4
   23920:	add	r1, sp, #24
   23924:	str	r0, [sp]
   23928:	ldr	r2, [sp, #20]
   2392c:	ldr	r0, [r5, #36]	; 0x24
   23930:	ldr	r6, [r5, #44]	; 0x2c
   23934:	blx	r6
   23938:	cmp	r0, #0
   2393c:	bne	239d8 <flatcc_builder_create_table@@Base+0x1b8>
   23940:	mov	r0, r4
   23944:	str	r4, [r5, #136]	; 0x88
   23948:	add	sp, sp, #88	; 0x58
   2394c:	ldrd	r4, [sp]
   23950:	ldrd	r6, [sp, #8]
   23954:	ldr	r8, [sp, #16]
   23958:	add	sp, sp, #20
   2395c:	pop	{pc}		; (ldr pc, [sp], #4)
   23960:	ldr	r2, [pc, #156]	; 23a04 <flatcc_builder_create_table@@Base+0x1e4>
   23964:	add	r0, r0, r8
   23968:	ldr	r3, [sp, #20]
   2396c:	str	r0, [sp, #16]
   23970:	ldr	r1, [r7, r2]
   23974:	add	r2, sp, #88	; 0x58
   23978:	add	r3, r3, #1
   2397c:	add	r2, r2, r3, lsl #3
   23980:	str	r3, [sp, #20]
   23984:	str	r1, [r2, #-72]	; 0xffffffb8
   23988:	str	r8, [r2, #-68]	; 0xffffffbc
   2398c:	b	23910 <flatcc_builder_create_table@@Base+0xf0>
   23990:	ldr	r3, [pc, #112]	; 23a08 <flatcc_builder_create_table@@Base+0x1e8>
   23994:	movw	r2, #1243	; 0x4db
   23998:	ldr	r1, [pc, #108]	; 23a0c <flatcc_builder_create_table@@Base+0x1ec>
   2399c:	ldr	r0, [pc, #108]	; 23a10 <flatcc_builder_create_table@@Base+0x1f0>
   239a0:	add	r3, pc, r3
   239a4:	add	r3, r3, #668	; 0x29c
   239a8:	add	r1, pc, r1
   239ac:	add	r0, pc, r0
   239b0:	bl	1267c <__assert_fail@plt>
   239b4:	ldr	r3, [pc, #88]	; 23a14 <flatcc_builder_create_table@@Base+0x1f4>
   239b8:	movw	r2, #1237	; 0x4d5
   239bc:	ldr	r1, [pc, #84]	; 23a18 <flatcc_builder_create_table@@Base+0x1f8>
   239c0:	ldr	r0, [pc, #84]	; 23a1c <flatcc_builder_create_table@@Base+0x1fc>
   239c4:	add	r3, pc, r3
   239c8:	add	r3, r3, #668	; 0x29c
   239cc:	add	r1, pc, r1
   239d0:	add	r0, pc, r0
   239d4:	bl	1267c <__assert_fail@plt>
   239d8:	bl	213f4 <flatcc_builder_default_alloc@@Base+0x2c4>
   239dc:	ldr	r3, [pc, #60]	; 23a20 <flatcc_builder_create_table@@Base+0x200>
   239e0:	movw	r2, #647	; 0x287
   239e4:	ldr	r1, [pc, #56]	; 23a24 <flatcc_builder_create_table@@Base+0x204>
   239e8:	ldr	r0, [pc, #56]	; 23a28 <flatcc_builder_create_table@@Base+0x208>
   239ec:	add	r3, pc, r3
   239f0:	add	r3, r3, #44	; 0x2c
   239f4:	add	r1, pc, r1
   239f8:	add	r0, pc, r0
   239fc:	bl	1267c <__assert_fail@plt>
   23a00:			; <UNDEFINED> instruction: 0x000197b0
   23a04:	andeq	r0, r0, ip, rrx
   23a08:			; <UNDEFINED> instruction: 0x000071b0
   23a0c:	strdeq	r7, [r0], -r8
   23a10:	andeq	r7, r0, r4, asr #23
   23a14:	andeq	r7, r0, ip, lsl #3
   23a18:	ldrdeq	r7, [r0], -r4
   23a1c:	andeq	r7, r0, ip, lsl #23
   23a20:	andeq	r7, r0, r4, ror #2
   23a24:	andeq	r7, r0, ip, lsr #17
   23a28:	andeq	r7, r0, r0, lsr r9

00023a2c <flatcc_builder_check_required_field@@Base>:
   23a2c:	ldr	r3, [r0, #32]
   23a30:	ldrh	r3, [r3, #14]
   23a34:	cmp	r3, #3
   23a38:	bne	23a68 <flatcc_builder_check_required_field@@Base+0x3c>
   23a3c:	ldrh	r3, [r0, #8]
   23a40:	cmp	r3, r1
   23a44:	bls	23a60 <flatcc_builder_check_required_field@@Base+0x34>
   23a48:	ldr	r3, [r0, #4]
   23a4c:	lsl	r1, r1, #1
   23a50:	ldrh	r0, [r3, r1]
   23a54:	adds	r0, r0, #0
   23a58:	movne	r0, #1
   23a5c:	bx	lr
   23a60:	mov	r0, #0
   23a64:	bx	lr
   23a68:	ldr	r3, [pc, #36]	; 23a94 <flatcc_builder_check_required_field@@Base+0x68>
   23a6c:	movw	r2, #1272	; 0x4f8
   23a70:	str	r4, [sp, #-8]!
   23a74:	ldr	r1, [pc, #28]	; 23a98 <flatcc_builder_check_required_field@@Base+0x6c>
   23a78:	str	lr, [sp, #4]
   23a7c:	ldr	r0, [pc, #24]	; 23a9c <flatcc_builder_check_required_field@@Base+0x70>
   23a80:	add	r3, pc, r3
   23a84:	add	r3, r3, #696	; 0x2b8
   23a88:	add	r1, pc, r1
   23a8c:	add	r0, pc, r0
   23a90:	bl	1267c <__assert_fail@plt>
   23a94:	ldrdeq	r7, [r0], -r0
   23a98:	andeq	r7, r0, r8, lsl r8
   23a9c:	strdeq	r7, [r0], -r0

00023aa0 <flatcc_builder_check_union_field@@Base>:
   23aa0:	ldr	r3, [r0, #32]
   23aa4:	ldrh	r3, [r3, #14]
   23aa8:	cmp	r3, #3
   23aac:	bne	23b10 <flatcc_builder_check_union_field@@Base+0x70>
   23ab0:	cmp	r1, #0
   23ab4:	beq	23afc <flatcc_builder_check_union_field@@Base+0x5c>
   23ab8:	ldrh	r3, [r0, #8]
   23abc:	cmp	r3, r1
   23ac0:	bls	23afc <flatcc_builder_check_union_field@@Base+0x5c>
   23ac4:	ldr	r3, [r0, #4]
   23ac8:	sub	r1, r1, #-2147483647	; 0x80000001
   23acc:	lsl	r1, r1, #1
   23ad0:	ldrh	r2, [r3, r1]!
   23ad4:	cmp	r2, #0
   23ad8:	ldrh	r1, [r3, #2]
   23adc:	beq	23af0 <flatcc_builder_check_union_field@@Base+0x50>
   23ae0:	ldr	r3, [r0, #16]
   23ae4:	ldrb	r3, [r3, r2]
   23ae8:	cmp	r3, #0
   23aec:	bne	23b04 <flatcc_builder_check_union_field@@Base+0x64>
   23af0:	clz	r0, r1
   23af4:	lsr	r0, r0, #5
   23af8:	bx	lr
   23afc:	mov	r0, #0
   23b00:	bx	lr
   23b04:	adds	r0, r1, #0
   23b08:	movne	r0, #1
   23b0c:	bx	lr
   23b10:	ldr	r3, [pc, #36]	; 23b3c <flatcc_builder_check_union_field@@Base+0x9c>
   23b14:	movw	r2, #1279	; 0x4ff
   23b18:	str	r4, [sp, #-8]!
   23b1c:	ldr	r1, [pc, #28]	; 23b40 <flatcc_builder_check_union_field@@Base+0xa0>
   23b20:	str	lr, [sp, #4]
   23b24:	ldr	r0, [pc, #24]	; 23b44 <flatcc_builder_check_union_field@@Base+0xa4>
   23b28:	add	r3, pc, r3
   23b2c:	add	r3, r3, #732	; 0x2dc
   23b30:	add	r1, pc, r1
   23b34:	add	r0, pc, r0
   23b38:	bl	1267c <__assert_fail@plt>
   23b3c:	andeq	r7, r0, r8, lsr #32
   23b40:	andeq	r7, r0, r0, ror r7
   23b44:	andeq	r7, r0, r8, asr #20

00023b48 <flatcc_builder_check_required@@Base>:
   23b48:	ldr	r3, [r0, #32]
   23b4c:	ldrh	r3, [r3, #14]
   23b50:	cmp	r3, #3
   23b54:	bne	23bbc <flatcc_builder_check_required@@Base+0x74>
   23b58:	ldrh	r3, [r0, #8]
   23b5c:	cmp	r3, r2
   23b60:	blt	23bb4 <flatcc_builder_check_required@@Base+0x6c>
   23b64:	cmp	r2, #0
   23b68:	ble	23bac <flatcc_builder_check_required@@Base+0x64>
   23b6c:	ldrh	r3, [r1]
   23b70:	ldr	ip, [r0, #4]
   23b74:	lsl	r3, r3, #1
   23b78:	ldrh	r0, [ip, r3]
   23b7c:	cmp	r0, #0
   23b80:	bxeq	lr
   23b84:	add	r2, r1, r2, lsl #1
   23b88:	add	r1, r1, #2
   23b8c:	b	23ba4 <flatcc_builder_check_required@@Base+0x5c>
   23b90:	ldrh	r3, [r1], #2
   23b94:	lsl	r3, r3, #1
   23b98:	ldrh	r0, [ip, r3]
   23b9c:	cmp	r0, #0
   23ba0:	bxeq	lr
   23ba4:	cmp	r1, r2
   23ba8:	bne	23b90 <flatcc_builder_check_required@@Base+0x48>
   23bac:	mov	r0, #1
   23bb0:	bx	lr
   23bb4:	mov	r0, #0
   23bb8:	bx	lr
   23bbc:	ldr	r3, [pc, #36]	; 23be8 <flatcc_builder_check_required@@Base+0xa0>
   23bc0:	movw	r2, #1297	; 0x511
   23bc4:	str	r4, [sp, #-8]!
   23bc8:	ldr	r1, [pc, #28]	; 23bec <flatcc_builder_check_required@@Base+0xa4>
   23bcc:	str	lr, [sp, #4]
   23bd0:	ldr	r0, [pc, #24]	; 23bf0 <flatcc_builder_check_required@@Base+0xa8>
   23bd4:	add	r3, pc, r3
   23bd8:	add	r3, r3, #768	; 0x300
   23bdc:	add	r1, pc, r1
   23be0:	add	r0, pc, r0
   23be4:	bl	1267c <__assert_fail@plt>
   23be8:	andeq	r6, r0, ip, ror pc
   23bec:	andeq	r7, r0, r4, asr #13
   23bf0:	muleq	r0, ip, r9

00023bf4 <flatcc_builder_end_table@@Base>:
   23bf4:	ldr	r3, [r0, #32]
   23bf8:	strd	r4, [sp, #-20]!	; 0xffffffec
   23bfc:	ldrh	r3, [r3, #14]
   23c00:	strd	r6, [sp, #8]
   23c04:	str	lr, [sp, #16]
   23c08:	sub	sp, sp, #20
   23c0c:	cmp	r3, #3
   23c10:	bne	23d94 <flatcc_builder_end_table@@Base+0x1a0>
   23c14:	ldrh	r5, [r0, #8]
   23c18:	movw	ip, #31153	; 0x79b1
   23c1c:	movt	ip, #40503	; 0x9e37
   23c20:	mov	r4, r0
   23c24:	ldr	r1, [r0, #4]
   23c28:	ldr	r3, [r0, #12]
   23c2c:	add	r5, r5, #2
   23c30:	lsl	r5, r5, #1
   23c34:	ldr	lr, [r0, #20]
   23c38:	sub	r6, r1, #4
   23c3c:	uxth	r5, r5
   23c40:	eor	r3, r3, r5
   23c44:	mov	r2, r5
   23c48:	strh	r5, [r1, #-4]
   23c4c:	mul	r3, ip, r3
   23c50:	add	lr, lr, #4
   23c54:	uxth	lr, lr
   23c58:	eor	r3, r3, lr
   23c5c:	strh	lr, [r1, #-2]
   23c60:	mov	r1, r6
   23c64:	mul	r3, ip, r3
   23c68:	str	r3, [r0, #12]
   23c6c:	bl	234c0 <flatcc_builder_create_cached_vtable@@Base>
   23c70:	subs	r7, r0, #0
   23c74:	bne	23c94 <flatcc_builder_end_table@@Base+0xa0>
   23c78:	mov	r5, #0
   23c7c:	mov	r0, r5
   23c80:	add	sp, sp, #20
   23c84:	ldrd	r4, [sp]
   23c88:	ldrd	r6, [sp, #8]
   23c8c:	add	sp, sp, #16
   23c90:	pop	{pc}		; (ldr pc, [sp], #4)
   23c94:	mov	r2, r5
   23c98:	mov	r1, #0
   23c9c:	mov	r0, r6
   23ca0:	bl	12628 <memset@plt>
   23ca4:	ldr	ip, [r4]
   23ca8:	mov	r0, r4
   23cac:	ldr	r3, [r4, #32]
   23cb0:	ldr	r2, [r4, #76]	; 0x4c
   23cb4:	ldr	r1, [r3, #20]
   23cb8:	str	r7, [sp, #8]
   23cbc:	ldrh	r3, [r4, #130]	; 0x82
   23cc0:	add	r2, r2, r1
   23cc4:	ldr	r1, [r4, #16]
   23cc8:	sub	ip, ip, r2
   23ccc:	asr	ip, ip, #1
   23cd0:	str	r2, [sp]
   23cd4:	ldr	r2, [r4, #20]
   23cd8:	str	ip, [sp, #4]
   23cdc:	bl	23820 <flatcc_builder_create_table@@Base>
   23ce0:	subs	r5, r0, #0
   23ce4:	beq	23c78 <flatcc_builder_end_table@@Base+0x84>
   23ce8:	ldr	r3, [r4, #32]
   23cec:	mov	r1, #0
   23cf0:	ldr	r0, [r4, #52]	; 0x34
   23cf4:	ldr	r2, [r4, #76]	; 0x4c
   23cf8:	ldr	ip, [r3, #16]
   23cfc:	ldr	r6, [r3, #20]
   23d00:	ldrh	lr, [r3, #28]
   23d04:	add	r0, r0, ip
   23d08:	ldr	ip, [r3, #24]
   23d0c:	add	r3, r2, r6
   23d10:	ldr	r2, [r4, #20]
   23d14:	str	r3, [r4]
   23d18:	str	r0, [r4, #4]
   23d1c:	strh	lr, [r4, #8]
   23d20:	str	ip, [r4, #12]
   23d24:	ldr	r0, [r4, #16]
   23d28:	bl	12628 <memset@plt>
   23d2c:	ldr	r3, [r4, #32]
   23d30:	ldr	r0, [r4, #60]	; 0x3c
   23d34:	ldr	r2, [r4, #64]	; 0x40
   23d38:	ldr	ip, [r3]
   23d3c:	ldmib	r3, {r1, lr}
   23d40:	add	r0, r0, ip
   23d44:	sub	r2, r2, ip
   23d48:	str	r0, [r4, #16]
   23d4c:	cmp	r2, r1
   23d50:	ldrh	r0, [r4, #128]	; 0x80
   23d54:	movcs	r2, r1
   23d58:	str	lr, [r4, #20]
   23d5c:	str	ip, [r4, #28]
   23d60:	ldrh	ip, [r4, #130]	; 0x82
   23d64:	str	r2, [r4, #24]
   23d68:	ldr	r2, [r4, #156]	; 0x9c
   23d6c:	str	r1, [r3, #4]
   23d70:	cmp	r0, ip
   23d74:	sub	r0, r3, #36	; 0x24
   23d78:	strhcc	ip, [r4, #128]	; 0x80
   23d7c:	ldrh	r1, [r3, #12]
   23d80:	sub	r3, r2, #1
   23d84:	str	r0, [r4, #32]
   23d88:	strh	r1, [r4, #130]	; 0x82
   23d8c:	str	r3, [r4, #156]	; 0x9c
   23d90:	b	23c7c <flatcc_builder_end_table@@Base+0x88>
   23d94:	ldr	r3, [pc, #28]	; 23db8 <flatcc_builder_end_table@@Base+0x1c4>
   23d98:	movw	r2, #1317	; 0x525
   23d9c:	ldr	r1, [pc, #24]	; 23dbc <flatcc_builder_end_table@@Base+0x1c8>
   23da0:	ldr	r0, [pc, #24]	; 23dc0 <flatcc_builder_end_table@@Base+0x1cc>
   23da4:	add	r3, pc, r3
   23da8:	add	r3, r3, #800	; 0x320
   23dac:	add	r1, pc, r1
   23db0:	add	r0, pc, r0
   23db4:	bl	1267c <__assert_fail@plt>
   23db8:	andeq	r6, r0, ip, lsr #27
   23dbc:	strdeq	r7, [r0], -r4
   23dc0:	andeq	r7, r0, ip, asr #15

00023dc4 <flatcc_builder_create_vector@@Base>:
   23dc4:	strd	r4, [sp, #-16]!
   23dc8:	mov	r4, r0
   23dcc:	str	r6, [sp, #8]
   23dd0:	str	lr, [sp, #12]
   23dd4:	sub	sp, sp, #88	; 0x58
   23dd8:	ldr	ip, [sp, #108]	; 0x6c
   23ddc:	ldr	r5, [pc, #328]	; 23f2c <flatcc_builder_create_vector@@Base+0x168>
   23de0:	ldrh	r0, [sp, #104]	; 0x68
   23de4:	cmp	r2, ip
   23de8:	add	r5, pc, r5
   23dec:	bhi	23ee0 <flatcc_builder_create_vector@@Base+0x11c>
   23df0:	ldrh	ip, [r4, #128]	; 0x80
   23df4:	cmp	r0, #4
   23df8:	mul	r3, r3, r2
   23dfc:	movcc	r0, #4
   23e00:	str	r2, [sp, #12]
   23e04:	mov	r2, #1
   23e08:	ldr	r6, [r4, #136]	; 0x88
   23e0c:	mov	lr, #4
   23e10:	str	r2, [sp, #20]
   23e14:	cmp	ip, r0
   23e18:	add	ip, sp, #12
   23e1c:	str	lr, [sp, #16]
   23e20:	strhcc	r0, [r4, #128]	; 0x80
   23e24:	sub	r2, r6, r3
   23e28:	sub	r0, r0, #1
   23e2c:	cmp	r3, #0
   23e30:	and	r0, r0, r2
   23e34:	str	ip, [sp, #24]
   23e38:	moveq	r2, lr
   23e3c:	str	lr, [sp, #28]
   23e40:	beq	23e5c <flatcc_builder_create_vector@@Base+0x98>
   23e44:	add	r2, r3, lr
   23e48:	str	r1, [sp, #32]
   23e4c:	mov	r1, #2
   23e50:	str	r2, [sp, #16]
   23e54:	str	r1, [sp, #20]
   23e58:	str	r3, [sp, #36]	; 0x24
   23e5c:	cmp	r0, #0
   23e60:	bne	23eb0 <flatcc_builder_create_vector@@Base+0xec>
   23e64:	sub	r5, r6, r2
   23e68:	cmp	r6, r5
   23e6c:	ble	23f08 <flatcc_builder_create_vector@@Base+0x144>
   23e70:	mov	r3, r5
   23e74:	add	r1, sp, #24
   23e78:	str	r2, [sp]
   23e7c:	ldr	r2, [sp, #20]
   23e80:	ldr	r0, [r4, #36]	; 0x24
   23e84:	ldr	r6, [r4, #44]	; 0x2c
   23e88:	blx	r6
   23e8c:	cmp	r0, #0
   23e90:	bne	23f04 <flatcc_builder_create_vector@@Base+0x140>
   23e94:	mov	r0, r5
   23e98:	str	r5, [r4, #136]	; 0x88
   23e9c:	add	sp, sp, #88	; 0x58
   23ea0:	ldrd	r4, [sp]
   23ea4:	ldr	r6, [sp, #8]
   23ea8:	add	sp, sp, #12
   23eac:	pop	{pc}		; (ldr pc, [sp], #4)
   23eb0:	ldr	r1, [pc, #120]	; 23f30 <flatcc_builder_create_vector@@Base+0x16c>
   23eb4:	add	r2, r2, r0
   23eb8:	ldr	r3, [sp, #20]
   23ebc:	str	r2, [sp, #16]
   23ec0:	ldr	ip, [r5, r1]
   23ec4:	add	r1, sp, #88	; 0x58
   23ec8:	add	r3, r3, #1
   23ecc:	add	r1, r1, r3, lsl #3
   23ed0:	str	r3, [sp, #20]
   23ed4:	str	ip, [r1, #-72]	; 0xffffffb8
   23ed8:	str	r0, [r1, #-68]	; 0xffffffbc
   23edc:	b	23e64 <flatcc_builder_create_vector@@Base+0xa0>
   23ee0:	ldr	r3, [pc, #76]	; 23f34 <flatcc_builder_create_vector@@Base+0x170>
   23ee4:	movw	r2, #1365	; 0x555
   23ee8:	ldr	r1, [pc, #72]	; 23f38 <flatcc_builder_create_vector@@Base+0x174>
   23eec:	ldr	r0, [pc, #72]	; 23f3c <flatcc_builder_create_vector@@Base+0x178>
   23ef0:	add	r3, pc, r3
   23ef4:	add	r3, r3, #828	; 0x33c
   23ef8:	add	r1, pc, r1
   23efc:	add	r0, pc, r0
   23f00:	bl	1267c <__assert_fail@plt>
   23f04:	bl	213f4 <flatcc_builder_default_alloc@@Base+0x2c4>
   23f08:	ldr	r3, [pc, #48]	; 23f40 <flatcc_builder_create_vector@@Base+0x17c>
   23f0c:	movw	r2, #647	; 0x287
   23f10:	ldr	r1, [pc, #44]	; 23f44 <flatcc_builder_create_vector@@Base+0x180>
   23f14:	ldr	r0, [pc, #44]	; 23f48 <flatcc_builder_create_vector@@Base+0x184>
   23f18:	add	r3, pc, r3
   23f1c:	add	r3, r3, #44	; 0x2c
   23f20:	add	r1, pc, r1
   23f24:	add	r0, pc, r0
   23f28:	bl	1267c <__assert_fail@plt>
   23f2c:	andeq	r9, r1, r0, lsl r2
   23f30:	andeq	r0, r0, ip, rrx
   23f34:	andeq	r6, r0, r0, ror #24
   23f38:	andeq	r7, r0, r8, lsr #7
   23f3c:	andeq	r7, r0, ip, lsr #13
   23f40:	andeq	r6, r0, r8, lsr ip
   23f44:	andeq	r7, r0, r0, lsl #7
   23f48:	andeq	r7, r0, r4, lsl #8

00023f4c <flatcc_builder_end_vector@@Base>:
   23f4c:	ldr	r1, [r0, #32]
   23f50:	strd	r4, [sp, #-12]!
   23f54:	ldrh	r3, [r1, #14]
   23f58:	str	lr, [sp, #8]
   23f5c:	sub	sp, sp, #12
   23f60:	cmp	r3, #4
   23f64:	bne	2401c <flatcc_builder_end_vector@@Base+0xd0>
   23f68:	ldrh	ip, [r0, #130]	; 0x82
   23f6c:	mov	r4, r0
   23f70:	ldr	r3, [r1, #16]
   23f74:	ldr	r2, [r1, #20]
   23f78:	ldr	r1, [r1, #24]
   23f7c:	str	r1, [sp, #4]
   23f80:	ldr	r1, [r0, #16]
   23f84:	str	ip, [sp]
   23f88:	bl	23dc4 <flatcc_builder_create_vector@@Base>
   23f8c:	subs	r5, r0, #0
   23f90:	beq	24008 <flatcc_builder_end_vector@@Base+0xbc>
   23f94:	mov	r1, #0
   23f98:	ldr	r0, [r4, #16]
   23f9c:	ldr	r2, [r4, #20]
   23fa0:	bl	12628 <memset@plt>
   23fa4:	ldr	r3, [r4, #32]
   23fa8:	ldr	r0, [r4, #60]	; 0x3c
   23fac:	ldr	r2, [r4, #64]	; 0x40
   23fb0:	ldr	ip, [r3]
   23fb4:	ldmib	r3, {r1, lr}
   23fb8:	add	r0, r0, ip
   23fbc:	sub	r2, r2, ip
   23fc0:	str	r0, [r4, #16]
   23fc4:	cmp	r2, r1
   23fc8:	ldrh	r0, [r4, #128]	; 0x80
   23fcc:	movcs	r2, r1
   23fd0:	str	lr, [r4, #20]
   23fd4:	str	ip, [r4, #28]
   23fd8:	ldrh	ip, [r4, #130]	; 0x82
   23fdc:	str	r2, [r4, #24]
   23fe0:	ldr	r2, [r4, #156]	; 0x9c
   23fe4:	str	r1, [r3, #4]
   23fe8:	cmp	r0, ip
   23fec:	sub	r0, r3, #36	; 0x24
   23ff0:	strhcc	ip, [r4, #128]	; 0x80
   23ff4:	ldrh	r1, [r3, #12]
   23ff8:	sub	r3, r2, #1
   23ffc:	str	r0, [r4, #32]
   24000:	strh	r1, [r4, #130]	; 0x82
   24004:	str	r3, [r4, #156]	; 0x9c
   24008:	mov	r0, r5
   2400c:	add	sp, sp, #12
   24010:	ldrd	r4, [sp]
   24014:	add	sp, sp, #8
   24018:	pop	{pc}		; (ldr pc, [sp], #4)
   2401c:	ldr	r3, [pc, #28]	; 24040 <flatcc_builder_end_vector@@Base+0xf4>
   24020:	movw	r2, #1400	; 0x578
   24024:	ldr	r1, [pc, #24]	; 24044 <flatcc_builder_end_vector@@Base+0xf8>
   24028:	ldr	r0, [pc, #24]	; 24048 <flatcc_builder_end_vector@@Base+0xfc>
   2402c:	add	r3, pc, r3
   24030:	add	r3, r3, #860	; 0x35c
   24034:	add	r1, pc, r1
   24038:	add	r0, pc, r0
   2403c:	bl	1267c <__assert_fail@plt>
   24040:	andeq	r6, r0, r4, lsr #22
   24044:	andeq	r7, r0, ip, ror #4
   24048:			; <UNDEFINED> instruction: 0x000073b8

0002404c <flatcc_builder_vector_count@@Base>:
   2404c:	ldr	r3, [r0, #32]
   24050:	ldr	r0, [r3, #20]
   24054:	bx	lr

00024058 <flatcc_builder_vector_edit@@Base>:
   24058:	ldr	r0, [r0, #16]
   2405c:	bx	lr

00024060 <flatcc_builder_create_offset_vector_direct@@Base>:
   24060:	cmn	r2, #-1073741823	; 0xc0000001
   24064:	bhi	24070 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   24068:	mov	r3, #0
   2406c:	b	21588 <flatcc_builder_default_alloc@@Base+0x458>
   24070:	mov	r0, #0
   24074:	bx	lr

00024078 <flatcc_builder_end_offset_vector@@Base>:
   24078:	ldr	r3, [r0, #32]
   2407c:	strd	r4, [sp, #-16]!
   24080:	ldrh	r2, [r3, #14]
   24084:	str	r6, [sp, #8]
   24088:	str	lr, [sp, #12]
   2408c:	cmp	r2, #5
   24090:	bne	24134 <flatcc_builder_end_offset_vector@@Base+0xbc>
   24094:	ldr	r1, [r0, #16]
   24098:	mov	r4, r0
   2409c:	ldr	r2, [r3, #20]
   240a0:	bl	24060 <flatcc_builder_create_offset_vector_direct@@Base>
   240a4:	subs	r5, r0, #0
   240a8:	beq	24120 <flatcc_builder_end_offset_vector@@Base+0xa8>
   240ac:	mov	r1, #0
   240b0:	ldr	r0, [r4, #16]
   240b4:	ldr	r2, [r4, #20]
   240b8:	bl	12628 <memset@plt>
   240bc:	ldr	r3, [r4, #32]
   240c0:	ldr	r0, [r4, #60]	; 0x3c
   240c4:	ldr	r2, [r4, #64]	; 0x40
   240c8:	ldr	ip, [r3]
   240cc:	ldmib	r3, {r1, lr}
   240d0:	add	r0, r0, ip
   240d4:	sub	r2, r2, ip
   240d8:	str	r0, [r4, #16]
   240dc:	cmp	r2, r1
   240e0:	ldrh	r0, [r4, #128]	; 0x80
   240e4:	movcs	r2, r1
   240e8:	str	lr, [r4, #20]
   240ec:	str	ip, [r4, #28]
   240f0:	ldrh	ip, [r4, #130]	; 0x82
   240f4:	str	r2, [r4, #24]
   240f8:	ldr	r2, [r4, #156]	; 0x9c
   240fc:	str	r1, [r3, #4]
   24100:	cmp	r0, ip
   24104:	sub	r0, r3, #36	; 0x24
   24108:	strhcc	ip, [r4, #128]	; 0x80
   2410c:	ldrh	r1, [r3, #12]
   24110:	sub	r3, r2, #1
   24114:	str	r0, [r4, #32]
   24118:	strh	r1, [r4, #130]	; 0x82
   2411c:	str	r3, [r4, #156]	; 0x9c
   24120:	mov	r0, r5
   24124:	ldrd	r4, [sp]
   24128:	ldr	r6, [sp, #8]
   2412c:	add	sp, sp, #12
   24130:	pop	{pc}		; (ldr pc, [sp], #4)
   24134:	ldr	r3, [pc, #28]	; 24158 <flatcc_builder_end_offset_vector@@Base+0xe0>
   24138:	movw	r2, #1480	; 0x5c8
   2413c:	ldr	r1, [pc, #24]	; 2415c <flatcc_builder_end_offset_vector@@Base+0xe4>
   24140:	ldr	r0, [pc, #24]	; 24160 <flatcc_builder_end_offset_vector@@Base+0xe8>
   24144:	add	r3, pc, r3
   24148:	add	r3, r3, #888	; 0x378
   2414c:	add	r1, pc, r1
   24150:	add	r0, pc, r0
   24154:	bl	1267c <__assert_fail@plt>
   24158:	andeq	r6, r0, ip, lsl #20
   2415c:	andeq	r7, r0, r4, asr r1
   24160:	andeq	r7, r0, ip, lsl #6

00024164 <flatcc_builder_create_offset_vector@@Base>:
   24164:	strd	r4, [sp, #-16]!
   24168:	mov	r5, r2
   2416c:	mov	r4, r0
   24170:	str	r6, [sp, #8]
   24174:	mov	r6, r1
   24178:	str	lr, [sp, #12]
   2417c:	bl	22ff0 <flatcc_builder_start_offset_vector@@Base>
   24180:	cmp	r0, #0
   24184:	beq	2419c <flatcc_builder_create_offset_vector@@Base+0x38>
   24188:	ldrd	r4, [sp]
   2418c:	mov	r0, #0
   24190:	ldr	r6, [sp, #8]
   24194:	add	sp, sp, #12
   24198:	pop	{pc}		; (ldr pc, [sp], #4)
   2419c:	mov	r1, r5
   241a0:	mov	r0, r4
   241a4:	bl	228b4 <flatcc_builder_extend_offset_vector@@Base>
   241a8:	cmp	r0, #0
   241ac:	beq	24188 <flatcc_builder_create_offset_vector@@Base+0x24>
   241b0:	lsl	r2, r5, #2
   241b4:	mov	r1, r6
   241b8:	bl	12580 <memcpy@plt>
   241bc:	mov	r0, r4
   241c0:	ldrd	r4, [sp]
   241c4:	ldr	r6, [sp, #8]
   241c8:	ldr	lr, [sp, #12]
   241cc:	add	sp, sp, #16
   241d0:	b	24078 <flatcc_builder_end_offset_vector@@Base>

000241d4 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   241d4:	ldr	r2, [r0, #32]
   241d8:	strd	r4, [sp, #-16]!
   241dc:	ldrh	ip, [r2, #14]
   241e0:	str	r6, [sp, #8]
   241e4:	str	lr, [sp, #12]
   241e8:	cmp	ip, #5
   241ec:	bne	242a4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xd0>
   241f0:	ldr	r2, [r2, #20]
   241f4:	cmn	r2, #-1073741823	; 0xc0000001
   241f8:	bhi	24214 <flatcc_builder_end_offset_vector_for_unions@@Base+0x40>
   241fc:	mov	r3, r1
   24200:	ldr	r1, [r0, #16]
   24204:	mov	r4, r0
   24208:	bl	21588 <flatcc_builder_default_alloc@@Base+0x458>
   2420c:	subs	r5, r0, #0
   24210:	bne	2422c <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   24214:	mov	r5, #0
   24218:	mov	r0, r5
   2421c:	ldrd	r4, [sp]
   24220:	ldr	r6, [sp, #8]
   24224:	add	sp, sp, #12
   24228:	pop	{pc}		; (ldr pc, [sp], #4)
   2422c:	mov	r1, #0
   24230:	ldr	r0, [r4, #16]
   24234:	ldr	r2, [r4, #20]
   24238:	bl	12628 <memset@plt>
   2423c:	ldr	r3, [r4, #32]
   24240:	ldr	r0, [r4, #60]	; 0x3c
   24244:	ldr	r2, [r4, #64]	; 0x40
   24248:	ldr	ip, [r3]
   2424c:	ldmib	r3, {r1, lr}
   24250:	add	r0, r0, ip
   24254:	sub	r2, r2, ip
   24258:	str	r0, [r4, #16]
   2425c:	cmp	r2, r1
   24260:	ldrh	r0, [r4, #128]	; 0x80
   24264:	movcs	r2, r1
   24268:	str	lr, [r4, #20]
   2426c:	str	ip, [r4, #28]
   24270:	ldrh	ip, [r4, #130]	; 0x82
   24274:	str	r2, [r4, #24]
   24278:	ldr	r2, [r4, #156]	; 0x9c
   2427c:	str	r1, [r3, #4]
   24280:	cmp	r0, ip
   24284:	sub	r0, r3, #36	; 0x24
   24288:	strhcc	ip, [r4, #128]	; 0x80
   2428c:	ldrh	r1, [r3, #12]
   24290:	sub	r3, r2, #1
   24294:	str	r0, [r4, #32]
   24298:	strh	r1, [r4, #130]	; 0x82
   2429c:	str	r3, [r4, #156]	; 0x9c
   242a0:	b	24218 <flatcc_builder_end_offset_vector_for_unions@@Base+0x44>
   242a4:	ldr	r3, [pc, #28]	; 242c8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xf4>
   242a8:	movw	r2, #1493	; 0x5d5
   242ac:	ldr	r1, [pc, #24]	; 242cc <flatcc_builder_end_offset_vector_for_unions@@Base+0xf8>
   242b0:	ldr	r0, [pc, #24]	; 242d0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xfc>
   242b4:	add	r3, pc, r3
   242b8:	add	r3, r3, #924	; 0x39c
   242bc:	add	r1, pc, r1
   242c0:	add	r0, pc, r0
   242c4:	bl	1267c <__assert_fail@plt>
   242c8:	muleq	r0, ip, r8
   242cc:	andeq	r6, r0, r4, ror #31
   242d0:	muleq	r0, ip, r1

000242d4 <flatcc_builder_offset_vector_edit@@Base>:
   242d4:	ldr	r0, [r0, #16]
   242d8:	bx	lr

000242dc <flatcc_builder_offset_vector_count@@Base>:
   242dc:	ldr	r3, [r0, #32]
   242e0:	ldr	r0, [r3, #20]
   242e4:	bx	lr

000242e8 <flatcc_builder_create_union_vector_direct@@Base>:
   242e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   242ec:	mov	r4, r0
   242f0:	strd	r6, [sp, #8]
   242f4:	str	r8, [sp, #16]
   242f8:	str	lr, [sp, #20]
   242fc:	sub	sp, sp, #8
   24300:	ldr	r5, [sp, #32]
   24304:	cmn	r5, #-1073741823	; 0xc0000001
   24308:	bhi	2436c <flatcc_builder_create_union_vector_direct@@Base+0x84>
   2430c:	mov	r6, r1
   24310:	mov	r7, r2
   24314:	mov	r1, r3
   24318:	mov	r0, r6
   2431c:	mov	r3, r2
   24320:	mov	r2, r5
   24324:	bl	21588 <flatcc_builder_default_alloc@@Base+0x458>
   24328:	subs	r8, r0, #0
   2432c:	beq	2436c <flatcc_builder_create_union_vector_direct@@Base+0x84>
   24330:	mvn	ip, #0
   24334:	mov	r3, #1
   24338:	mov	r2, r5
   2433c:	mov	r1, r7
   24340:	mov	r0, r6
   24344:	stm	sp, {r3, ip}
   24348:	bl	23dc4 <flatcc_builder_create_vector@@Base>
   2434c:	stm	r4, {r0, r8}
   24350:	mov	r0, r4
   24354:	add	sp, sp, #8
   24358:	ldrd	r4, [sp]
   2435c:	ldrd	r6, [sp, #8]
   24360:	ldr	r8, [sp, #16]
   24364:	add	sp, sp, #20
   24368:	pop	{pc}		; (ldr pc, [sp], #4)
   2436c:	mov	r3, #0
   24370:	str	r3, [r4]
   24374:	str	r3, [r4, #4]
   24378:	b	24350 <flatcc_builder_create_union_vector_direct@@Base+0x68>

0002437c <flatcc_builder_create_union_vector@@Base>:
   2437c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   24380:	mov	r5, r1
   24384:	mov	r4, r2
   24388:	strd	r6, [sp, #8]
   2438c:	mov	r6, r0
   24390:	mov	r0, r1
   24394:	str	r8, [sp, #16]
   24398:	mov	r7, r3
   2439c:	str	lr, [sp, #20]
   243a0:	sub	sp, sp, #16
   243a4:	bl	22ff0 <flatcc_builder_start_offset_vector@@Base>
   243a8:	cmp	r0, #0
   243ac:	beq	243d8 <flatcc_builder_create_union_vector@@Base+0x5c>
   243b0:	mov	r3, #0
   243b4:	str	r3, [r6]
   243b8:	str	r3, [r6, #4]
   243bc:	mov	r0, r6
   243c0:	add	sp, sp, #16
   243c4:	ldrd	r4, [sp]
   243c8:	ldrd	r6, [sp, #8]
   243cc:	ldr	r8, [sp, #16]
   243d0:	add	sp, sp, #20
   243d4:	pop	{pc}		; (ldr pc, [sp], #4)
   243d8:	mov	r1, r7
   243dc:	mov	r0, r5
   243e0:	bl	228b4 <flatcc_builder_extend_offset_vector@@Base>
   243e4:	cmp	r0, #0
   243e8:	beq	243b0 <flatcc_builder_create_union_vector@@Base+0x34>
   243ec:	ldr	r8, [r5, #20]
   243f0:	ldr	r3, [r5, #24]
   243f4:	add	r1, r7, r8
   243f8:	cmp	r1, r3
   243fc:	str	r1, [r5, #20]
   24400:	bcs	244ec <flatcc_builder_create_union_vector@@Base+0x170>
   24404:	ldr	r2, [r5, #16]
   24408:	adds	r8, r2, r8
   2440c:	beq	243b0 <flatcc_builder_create_union_vector@@Base+0x34>
   24410:	mov	r0, r5
   24414:	bl	242d4 <flatcc_builder_offset_vector_edit@@Base>
   24418:	cmp	r7, #0
   2441c:	mov	r3, r0
   24420:	beq	24450 <flatcc_builder_create_union_vector@@Base+0xd4>
   24424:	add	r2, r4, r7, lsl #3
   24428:	mov	r1, r4
   2442c:	sub	lr, r8, #1
   24430:	sub	ip, r0, #4
   24434:	ldrb	r4, [r1]
   24438:	add	r1, r1, #8
   2443c:	strb	r4, [lr, #1]!
   24440:	ldr	r4, [r1, #-4]
   24444:	cmp	r1, r2
   24448:	str	r4, [ip, #4]!
   2444c:	bne	24434 <flatcc_builder_create_union_vector@@Base+0xb8>
   24450:	mov	r2, r8
   24454:	mov	r1, r5
   24458:	str	r7, [sp]
   2445c:	add	r0, sp, #8
   24460:	bl	242e8 <flatcc_builder_create_union_vector_direct@@Base>
   24464:	mov	r1, #0
   24468:	ldr	r0, [r5, #16]
   2446c:	ldr	r2, [r5, #20]
   24470:	ldr	r7, [sp, #8]
   24474:	ldr	r4, [sp, #12]
   24478:	bl	12628 <memset@plt>
   2447c:	ldr	r3, [r5, #32]
   24480:	str	r7, [r6]
   24484:	ldr	r0, [r5, #60]	; 0x3c
   24488:	str	r4, [r6, #4]
   2448c:	ldr	r2, [r5, #64]	; 0x40
   24490:	ldr	ip, [r3]
   24494:	ldmib	r3, {r1, lr}
   24498:	add	r0, r0, ip
   2449c:	sub	r2, r2, ip
   244a0:	str	r0, [r5, #16]
   244a4:	cmp	r2, r1
   244a8:	ldrh	r0, [r5, #128]	; 0x80
   244ac:	movcs	r2, r1
   244b0:	str	lr, [r5, #20]
   244b4:	str	ip, [r5, #28]
   244b8:	ldrh	ip, [r5, #130]	; 0x82
   244bc:	str	r2, [r5, #24]
   244c0:	ldr	r2, [r5, #156]	; 0x9c
   244c4:	str	r1, [r3, #4]
   244c8:	cmp	r0, ip
   244cc:	sub	r0, r3, #36	; 0x24
   244d0:	strhcc	ip, [r5, #128]	; 0x80
   244d4:	ldrh	r1, [r3, #12]
   244d8:	sub	r3, r2, #1
   244dc:	str	r0, [r5, #32]
   244e0:	strh	r1, [r5, #130]	; 0x82
   244e4:	str	r3, [r5, #156]	; 0x9c
   244e8:	b	243bc <flatcc_builder_create_union_vector@@Base+0x40>
   244ec:	add	r1, r1, #1
   244f0:	mvn	r2, #3
   244f4:	mov	r0, r5
   244f8:	bl	210a8 <test_parse@@Base+0x528>
   244fc:	cmp	r0, #0
   24500:	beq	24404 <flatcc_builder_create_union_vector@@Base+0x88>
   24504:	b	243b0 <flatcc_builder_create_union_vector@@Base+0x34>

00024508 <flatcc_builder_start_union_vector@@Base>:
   24508:	mov	r1, #4
   2450c:	strd	r4, [sp, #-16]!
   24510:	mov	r4, r0
   24514:	str	r6, [sp, #8]
   24518:	str	lr, [sp, #12]
   2451c:	bl	21464 <flatcc_builder_default_alloc@@Base+0x334>
   24520:	cmp	r0, #0
   24524:	bne	2457c <flatcc_builder_start_union_vector@@Base+0x74>
   24528:	ldr	ip, [r4, #28]
   2452c:	mov	lr, #8
   24530:	mov	r5, #7
   24534:	ldr	r3, [r4, #32]
   24538:	ldr	r2, [r4, #64]	; 0x40
   2453c:	ldr	r1, [r4, #60]	; 0x3c
   24540:	strh	r5, [r3, #14]
   24544:	str	lr, [r3, #16]
   24548:	sub	r2, r2, ip
   2454c:	str	r0, [r3, #20]
   24550:	cmn	r2, #4
   24554:	mvnhi	r2, #3
   24558:	add	r1, r1, ip
   2455c:	str	r1, [r4, #16]
   24560:	str	r2, [r4, #24]
   24564:	mvn	r2, #3
   24568:	str	r2, [r3, #4]
   2456c:	ldrd	r4, [sp]
   24570:	ldr	r6, [sp, #8]
   24574:	add	sp, sp, #12
   24578:	pop	{pc}		; (ldr pc, [sp], #4)
   2457c:	mvn	r0, #0
   24580:	b	2456c <flatcc_builder_start_union_vector@@Base+0x64>

00024584 <flatcc_builder_union_vector_edit@@Base>:
   24584:	ldr	r0, [r0, #16]
   24588:	bx	lr

0002458c <flatcc_builder_union_vector_count@@Base>:
   2458c:	ldr	r3, [r0, #32]
   24590:	ldr	r0, [r3, #20]
   24594:	bx	lr

00024598 <flatcc_builder_end_union_vector@@Base>:
   24598:	ldr	r3, [r1, #32]
   2459c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   245a0:	ldrh	r3, [r3, #14]
   245a4:	strd	r6, [sp, #8]
   245a8:	str	r8, [sp, #16]
   245ac:	str	lr, [sp, #20]
   245b0:	sub	sp, sp, #16
   245b4:	cmp	r3, #7
   245b8:	bne	24718 <flatcc_builder_end_union_vector@@Base+0x180>
   245bc:	mov	r4, r1
   245c0:	mov	r6, r0
   245c4:	mov	r0, r1
   245c8:	bl	2458c <flatcc_builder_union_vector_count@@Base>
   245cc:	ldr	r8, [r4, #20]
   245d0:	lsl	r7, r0, #2
   245d4:	mov	r5, r0
   245d8:	ldr	r3, [r4, #24]
   245dc:	add	r1, r7, r0
   245e0:	add	r1, r1, r8
   245e4:	cmp	r1, r3
   245e8:	str	r1, [r4, #20]
   245ec:	bcs	246f0 <flatcc_builder_end_union_vector@@Base+0x158>
   245f0:	ldr	r3, [r4, #16]
   245f4:	adds	r8, r3, r8
   245f8:	beq	24708 <flatcc_builder_end_union_vector@@Base+0x170>
   245fc:	mov	r0, r4
   24600:	add	r7, r8, r7
   24604:	bl	24584 <flatcc_builder_union_vector_edit@@Base>
   24608:	cmp	r5, #0
   2460c:	beq	24638 <flatcc_builder_end_union_vector@@Base+0xa0>
   24610:	add	r3, r0, r5, lsl #3
   24614:	sub	ip, r7, #1
   24618:	sub	r1, r8, #4
   2461c:	ldrb	lr, [r0]
   24620:	add	r0, r0, #8
   24624:	strb	lr, [ip, #1]!
   24628:	ldr	lr, [r0, #-4]
   2462c:	cmp	r0, r3
   24630:	str	lr, [r1, #4]!
   24634:	bne	2461c <flatcc_builder_end_union_vector@@Base+0x84>
   24638:	mov	r3, r8
   2463c:	mov	r2, r7
   24640:	str	r5, [sp]
   24644:	mov	r1, r4
   24648:	add	r0, sp, #8
   2464c:	bl	242e8 <flatcc_builder_create_union_vector_direct@@Base>
   24650:	mov	r1, #0
   24654:	ldr	r0, [r4, #16]
   24658:	ldr	r2, [r4, #20]
   2465c:	ldr	r7, [sp, #8]
   24660:	ldr	r5, [sp, #12]
   24664:	bl	12628 <memset@plt>
   24668:	ldr	r3, [r4, #32]
   2466c:	str	r7, [r6]
   24670:	ldr	r0, [r4, #60]	; 0x3c
   24674:	str	r5, [r6, #4]
   24678:	ldr	r2, [r4, #64]	; 0x40
   2467c:	ldr	ip, [r3]
   24680:	ldmib	r3, {r1, lr}
   24684:	add	r0, r0, ip
   24688:	sub	r2, r2, ip
   2468c:	str	r0, [r4, #16]
   24690:	cmp	r2, r1
   24694:	ldrh	r0, [r4, #128]	; 0x80
   24698:	movcs	r2, r1
   2469c:	str	lr, [r4, #20]
   246a0:	str	ip, [r4, #28]
   246a4:	ldrh	ip, [r4, #130]	; 0x82
   246a8:	str	r2, [r4, #24]
   246ac:	ldr	r2, [r4, #156]	; 0x9c
   246b0:	str	r1, [r3, #4]
   246b4:	cmp	r0, ip
   246b8:	sub	r0, r3, #36	; 0x24
   246bc:	strhcc	ip, [r4, #128]	; 0x80
   246c0:	ldrh	r1, [r3, #12]
   246c4:	sub	r3, r2, #1
   246c8:	str	r0, [r4, #32]
   246cc:	strh	r1, [r4, #130]	; 0x82
   246d0:	str	r3, [r4, #156]	; 0x9c
   246d4:	mov	r0, r6
   246d8:	add	sp, sp, #16
   246dc:	ldrd	r4, [sp]
   246e0:	ldrd	r6, [sp, #8]
   246e4:	ldr	r8, [sp, #16]
   246e8:	add	sp, sp, #20
   246ec:	pop	{pc}		; (ldr pc, [sp], #4)
   246f0:	add	r1, r1, #1
   246f4:	mvn	r2, #3
   246f8:	mov	r0, r4
   246fc:	bl	210a8 <test_parse@@Base+0x528>
   24700:	cmp	r0, #0
   24704:	beq	245f0 <flatcc_builder_end_union_vector@@Base+0x58>
   24708:	mov	r3, #0
   2470c:	str	r3, [r6]
   24710:	str	r3, [r6, #4]
   24714:	b	246d4 <flatcc_builder_end_union_vector@@Base+0x13c>
   24718:	ldr	r3, [pc, #28]	; 2473c <flatcc_builder_end_union_vector@@Base+0x1a4>
   2471c:	movw	r2, #1617	; 0x651
   24720:	ldr	r1, [pc, #24]	; 24740 <flatcc_builder_end_union_vector@@Base+0x1a8>
   24724:	ldr	r0, [pc, #24]	; 24744 <flatcc_builder_end_union_vector@@Base+0x1ac>
   24728:	add	r3, pc, r3
   2472c:	add	r3, r3, #968	; 0x3c8
   24730:	add	r1, pc, r1
   24734:	add	r0, pc, r0
   24738:	bl	1267c <__assert_fail@plt>
   2473c:	andeq	r6, r0, r8, lsr #8
   24740:	andeq	r6, r0, r0, ror fp
   24744:	andeq	r6, r0, r8, lsl #29

00024748 <flatcc_builder_extend_union_vector@@Base>:
   24748:	ldr	ip, [r0, #32]
   2474c:	strd	r4, [sp, #-16]!
   24750:	ldr	r3, [ip, #20]
   24754:	str	r6, [sp, #8]
   24758:	str	lr, [sp, #12]
   2475c:	adds	r2, r1, r3
   24760:	movcs	r3, #1
   24764:	movcc	r3, #0
   24768:	cmn	r2, #-536870911	; 0xe0000001
   2476c:	movls	r4, #0
   24770:	movhi	r4, #1
   24774:	orrs	r4, r3, r4
   24778:	bne	247d0 <flatcc_builder_extend_union_vector@@Base+0x88>
   2477c:	ldr	r6, [r0, #20]
   24780:	mov	r5, r0
   24784:	ldr	r3, [r0, #24]
   24788:	str	r2, [ip, #20]
   2478c:	add	r1, r6, r1, lsl #3
   24790:	cmp	r1, r3
   24794:	str	r1, [r0, #20]
   24798:	bcs	247b4 <flatcc_builder_extend_union_vector@@Base+0x6c>
   2479c:	ldr	r0, [r5, #16]
   247a0:	add	r0, r0, r6
   247a4:	ldrd	r4, [sp]
   247a8:	ldr	r6, [sp, #8]
   247ac:	add	sp, sp, #12
   247b0:	pop	{pc}		; (ldr pc, [sp], #4)
   247b4:	add	r1, r1, #1
   247b8:	mvn	r2, #3
   247bc:	bl	210a8 <test_parse@@Base+0x528>
   247c0:	cmp	r0, #0
   247c4:	beq	2479c <flatcc_builder_extend_union_vector@@Base+0x54>
   247c8:	mov	r0, r4
   247cc:	b	247a4 <flatcc_builder_extend_union_vector@@Base+0x5c>
   247d0:	bl	2142c <flatcc_builder_default_alloc@@Base+0x2fc>

000247d4 <flatcc_builder_truncate_union_vector@@Base>:
   247d4:	mov	r3, r0
   247d8:	ldr	r0, [r0, #32]
   247dc:	str	r4, [sp, #-8]!
   247e0:	ldrh	r2, [r0, #14]
   247e4:	str	lr, [sp, #4]
   247e8:	cmp	r2, #7
   247ec:	bne	2483c <flatcc_builder_truncate_union_vector@@Base+0x68>
   247f0:	mov	lr, r1
   247f4:	ldr	r1, [r0, #20]
   247f8:	cmp	r1, lr
   247fc:	bcc	24860 <flatcc_builder_truncate_union_vector@@Base+0x8c>
   24800:	ldr	r2, [r0, #16]
   24804:	sub	ip, r1, lr
   24808:	mov	r1, #0
   2480c:	str	ip, [r0, #20]
   24810:	ldr	r0, [r3, #16]
   24814:	ldr	ip, [r3, #20]
   24818:	mul	r2, r2, lr
   2481c:	sub	ip, ip, r2
   24820:	add	r0, r0, ip
   24824:	str	ip, [r3, #20]
   24828:	bl	12628 <memset@plt>
   2482c:	ldr	r4, [sp]
   24830:	add	sp, sp, #4
   24834:	mov	r0, #0
   24838:	pop	{pc}		; (ldr pc, [sp], #4)
   2483c:	ldr	r3, [pc, #64]	; 24884 <flatcc_builder_truncate_union_vector@@Base+0xb0>
   24840:	movw	r2, #1665	; 0x681
   24844:	ldr	r1, [pc, #60]	; 24888 <flatcc_builder_truncate_union_vector@@Base+0xb4>
   24848:	ldr	r0, [pc, #60]	; 2488c <flatcc_builder_truncate_union_vector@@Base+0xb8>
   2484c:	add	r3, pc, r3
   24850:	add	r3, r3, #1000	; 0x3e8
   24854:	add	r1, pc, r1
   24858:	add	r0, pc, r0
   2485c:	bl	1267c <__assert_fail@plt>
   24860:	ldr	r3, [pc, #40]	; 24890 <flatcc_builder_truncate_union_vector@@Base+0xbc>
   24864:	movw	r2, #1666	; 0x682
   24868:	ldr	r1, [pc, #36]	; 24894 <flatcc_builder_truncate_union_vector@@Base+0xc0>
   2486c:	ldr	r0, [pc, #36]	; 24898 <flatcc_builder_truncate_union_vector@@Base+0xc4>
   24870:	add	r3, pc, r3
   24874:	add	r3, r3, #1000	; 0x3e8
   24878:	add	r1, pc, r1
   2487c:	add	r0, pc, r0
   24880:	bl	1267c <__assert_fail@plt>
   24884:	andeq	r6, r0, r4, lsl #6
   24888:	andeq	r6, r0, ip, asr #20
   2488c:	andeq	r6, r0, r4, ror #26
   24890:	andeq	r6, r0, r0, ror #5
   24894:	andeq	r6, r0, r8, lsr #20
   24898:	andeq	r6, r0, r4, ror #24

0002489c <flatcc_builder_union_vector_push@@Base>:
   2489c:	strd	r4, [sp, #-20]!	; 0xffffffec
   248a0:	strd	r6, [sp, #8]
   248a4:	str	lr, [sp, #16]
   248a8:	sub	sp, sp, #12
   248ac:	add	r3, sp, #8
   248b0:	stmdb	r3, {r1, r2}
   248b4:	ldr	r2, [r0, #32]
   248b8:	ldrh	r3, [r2, #14]
   248bc:	cmp	r3, #7
   248c0:	bne	24938 <flatcc_builder_union_vector_push@@Base+0x9c>
   248c4:	ldr	r3, [r2, #20]
   248c8:	cmn	r3, #-536870911	; 0xe0000001
   248cc:	beq	24930 <flatcc_builder_union_vector_push@@Base+0x94>
   248d0:	ldr	r5, [r0, #20]
   248d4:	add	r3, r3, #1
   248d8:	mov	r4, r0
   248dc:	ldr	r1, [r0, #24]
   248e0:	str	r3, [r2, #20]
   248e4:	add	r3, r5, #8
   248e8:	cmp	r3, r1
   248ec:	str	r3, [r0, #20]
   248f0:	bcs	2491c <flatcc_builder_union_vector_push@@Base+0x80>
   248f4:	ldr	r3, [r4, #16]
   248f8:	adds	r0, r3, r5
   248fc:	beq	24908 <flatcc_builder_union_vector_push@@Base+0x6c>
   24900:	ldrd	r6, [sp]
   24904:	strd	r6, [r3, r5]
   24908:	add	sp, sp, #12
   2490c:	ldrd	r4, [sp]
   24910:	ldrd	r6, [sp, #8]
   24914:	add	sp, sp, #16
   24918:	pop	{pc}		; (ldr pc, [sp], #4)
   2491c:	mvn	r2, #3
   24920:	add	r1, r5, #9
   24924:	bl	210a8 <test_parse@@Base+0x528>
   24928:	cmp	r0, #0
   2492c:	beq	248f4 <flatcc_builder_union_vector_push@@Base+0x58>
   24930:	mov	r0, #0
   24934:	b	24908 <flatcc_builder_union_vector_push@@Base+0x6c>
   24938:	ldr	r3, [pc, #28]	; 2495c <flatcc_builder_union_vector_push@@Base+0xc0>
   2493c:	movw	r2, #1677	; 0x68d
   24940:	ldr	r1, [pc, #24]	; 24960 <flatcc_builder_union_vector_push@@Base+0xc4>
   24944:	ldr	r0, [pc, #24]	; 24964 <flatcc_builder_union_vector_push@@Base+0xc8>
   24948:	add	r3, pc, r3
   2494c:	add	r3, r3, #1040	; 0x410
   24950:	add	r1, pc, r1
   24954:	add	r0, pc, r0
   24958:	bl	1267c <__assert_fail@plt>
   2495c:	andeq	r6, r0, r8, lsl #4
   24960:	andeq	r6, r0, r0, asr r9
   24964:	andeq	r6, r0, r8, ror #24

00024968 <flatcc_builder_append_union_vector@@Base>:
   24968:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2496c:	mov	r4, r1
   24970:	ldr	r1, [r0, #32]
   24974:	ldrh	r3, [r1, #14]
   24978:	strd	r6, [sp, #8]
   2497c:	str	r8, [sp, #16]
   24980:	str	lr, [sp, #20]
   24984:	cmp	r3, #7
   24988:	bne	24a28 <flatcc_builder_append_union_vector@@Base+0xc0>
   2498c:	ldr	r3, [r1, #20]
   24990:	adds	r3, r2, r3
   24994:	movcs	lr, #1
   24998:	movcc	lr, #0
   2499c:	cmn	r3, #-536870911	; 0xe0000001
   249a0:	movls	ip, #0
   249a4:	movhi	ip, #1
   249a8:	orrs	r8, lr, ip
   249ac:	bne	24a50 <flatcc_builder_append_union_vector@@Base+0xe8>
   249b0:	ldr	r7, [r0, #20]
   249b4:	lsl	r6, r2, #3
   249b8:	mov	r5, r0
   249bc:	str	r3, [r1, #20]
   249c0:	ldr	r3, [r0, #24]
   249c4:	add	r1, r6, r7
   249c8:	cmp	r1, r3
   249cc:	str	r1, [r0, #20]
   249d0:	bcs	24a0c <flatcc_builder_append_union_vector@@Base+0xa4>
   249d4:	ldr	r3, [r5, #16]
   249d8:	adds	r3, r3, r7
   249dc:	beq	249f4 <flatcc_builder_append_union_vector@@Base+0x8c>
   249e0:	mov	r0, r3
   249e4:	mov	r2, r6
   249e8:	mov	r1, r4
   249ec:	bl	12580 <memcpy@plt>
   249f0:	mov	r3, r0
   249f4:	ldrd	r4, [sp]
   249f8:	mov	r0, r3
   249fc:	ldrd	r6, [sp, #8]
   24a00:	ldr	r8, [sp, #16]
   24a04:	add	sp, sp, #20
   24a08:	pop	{pc}		; (ldr pc, [sp], #4)
   24a0c:	add	r1, r1, #1
   24a10:	mvn	r2, #3
   24a14:	bl	210a8 <test_parse@@Base+0x528>
   24a18:	cmp	r0, #0
   24a1c:	beq	249d4 <flatcc_builder_append_union_vector@@Base+0x6c>
   24a20:	mov	r3, r8
   24a24:	b	249f4 <flatcc_builder_append_union_vector@@Base+0x8c>
   24a28:	ldr	r3, [pc, #36]	; 24a54 <flatcc_builder_append_union_vector@@Base+0xec>
   24a2c:	movw	r2, #1692	; 0x69c
   24a30:	ldr	r1, [pc, #32]	; 24a58 <flatcc_builder_append_union_vector@@Base+0xf0>
   24a34:	ldr	r0, [pc, #32]	; 24a5c <flatcc_builder_append_union_vector@@Base+0xf4>
   24a38:	add	r3, pc, r3
   24a3c:	add	r3, r3, #1072	; 0x430
   24a40:	add	r1, pc, r1
   24a44:	add	r3, r3, #4
   24a48:	add	r0, pc, r0
   24a4c:	bl	1267c <__assert_fail@plt>
   24a50:	bl	2142c <flatcc_builder_default_alloc@@Base+0x2fc>
   24a54:	andeq	r6, r0, r8, lsl r1
   24a58:	andeq	r6, r0, r0, ror #16
   24a5c:	andeq	r6, r0, r4, ror fp

00024a60 <flatcc_builder_create_string@@Base>:
   24a60:	ldr	ip, [r0, #136]	; 0x88
   24a64:	cmp	r2, #0
   24a68:	strd	r4, [sp, #-20]!	; 0xffffffec
   24a6c:	mov	r5, #4
   24a70:	mov	r4, r0
   24a74:	strd	r6, [sp, #8]
   24a78:	mov	r0, #1
   24a7c:	moveq	r7, #2
   24a80:	str	lr, [sp, #16]
   24a84:	sub	sp, sp, #92	; 0x5c
   24a88:	moveq	r1, r0
   24a8c:	add	r3, sp, #12
   24a90:	ldr	lr, [pc, #204]	; 24b64 <flatcc_builder_create_string@@Base+0x104>
   24a94:	str	r2, [sp, #12]
   24a98:	str	r3, [sp, #24]
   24a9c:	sub	r3, ip, r2
   24aa0:	sub	r3, r3, #1
   24aa4:	str	r5, [sp, #28]
   24aa8:	and	r3, r3, #3
   24aac:	add	lr, pc, lr
   24ab0:	add	r3, r3, r0
   24ab4:	beq	24acc <flatcc_builder_create_string@@Base+0x6c>
   24ab8:	add	r5, r2, r5
   24abc:	mov	r7, #3
   24ac0:	str	r1, [sp, #32]
   24ac4:	mov	r1, #2
   24ac8:	str	r2, [sp, #36]	; 0x24
   24acc:	ldr	r6, [pc, #148]	; 24b68 <flatcc_builder_create_string@@Base+0x108>
   24ad0:	add	r0, r3, r5
   24ad4:	add	r2, sp, #88	; 0x58
   24ad8:	add	r1, r1, #1
   24adc:	sub	r5, ip, r0
   24ae0:	add	r1, r2, r1, lsl #3
   24ae4:	str	r0, [sp, #16]
   24ae8:	cmp	ip, r5
   24aec:	ldr	r2, [lr, r6]
   24af0:	str	r7, [sp, #20]
   24af4:	strd	r2, [r1, #-72]	; 0xffffffb8
   24af8:	ble	24b3c <flatcc_builder_create_string@@Base+0xdc>
   24afc:	mov	r2, r7
   24b00:	mov	r3, r5
   24b04:	str	r0, [sp]
   24b08:	add	r1, sp, #24
   24b0c:	ldr	r0, [r4, #36]	; 0x24
   24b10:	ldr	r6, [r4, #44]	; 0x2c
   24b14:	blx	r6
   24b18:	cmp	r0, #0
   24b1c:	bne	24b60 <flatcc_builder_create_string@@Base+0x100>
   24b20:	mov	r0, r5
   24b24:	str	r5, [r4, #136]	; 0x88
   24b28:	add	sp, sp, #92	; 0x5c
   24b2c:	ldrd	r4, [sp]
   24b30:	ldrd	r6, [sp, #8]
   24b34:	add	sp, sp, #16
   24b38:	pop	{pc}		; (ldr pc, [sp], #4)
   24b3c:	ldr	r3, [pc, #40]	; 24b6c <flatcc_builder_create_string@@Base+0x10c>
   24b40:	movw	r2, #647	; 0x287
   24b44:	ldr	r1, [pc, #36]	; 24b70 <flatcc_builder_create_string@@Base+0x110>
   24b48:	ldr	r0, [pc, #36]	; 24b74 <flatcc_builder_create_string@@Base+0x114>
   24b4c:	add	r3, pc, r3
   24b50:	add	r3, r3, #44	; 0x2c
   24b54:	add	r1, pc, r1
   24b58:	add	r0, pc, r0
   24b5c:	bl	1267c <__assert_fail@plt>
   24b60:	bl	213f4 <flatcc_builder_default_alloc@@Base+0x2c4>
   24b64:	andeq	r8, r1, ip, asr #10
   24b68:	andeq	r0, r0, ip, rrx
   24b6c:	andeq	r6, r0, r4
   24b70:	andeq	r6, r0, ip, asr #14
   24b74:	ldrdeq	r6, [r0], -r0

00024b78 <flatcc_builder_create_string_str@@Base>:
   24b78:	strd	r4, [sp, #-16]!
   24b7c:	mov	r5, r0
   24b80:	mov	r0, r1
   24b84:	mov	r4, r1
   24b88:	str	r6, [sp, #8]
   24b8c:	str	lr, [sp, #12]
   24b90:	bl	12604 <strlen@plt>
   24b94:	mov	r2, r0
   24b98:	mov	r1, r4
   24b9c:	ldr	r6, [sp, #8]
   24ba0:	mov	r0, r5
   24ba4:	ldrd	r4, [sp]
   24ba8:	ldr	lr, [sp, #12]
   24bac:	add	sp, sp, #16
   24bb0:	b	24a60 <flatcc_builder_create_string@@Base>

00024bb4 <flatcc_builder_create_string_strn@@Base>:
   24bb4:	strd	r4, [sp, #-16]!
   24bb8:	mov	r4, r1
   24bbc:	mov	r1, #0
   24bc0:	str	r6, [sp, #8]
   24bc4:	mov	r6, r0
   24bc8:	mov	r0, r4
   24bcc:	mov	r5, r2
   24bd0:	str	lr, [sp, #12]
   24bd4:	bl	12640 <memchr@plt>
   24bd8:	cmp	r0, #0
   24bdc:	mov	r1, r4
   24be0:	ldr	lr, [sp, #12]
   24be4:	subne	r5, r0, r4
   24be8:	mov	r0, r6
   24bec:	mov	r2, r5
   24bf0:	ldrd	r4, [sp]
   24bf4:	ldr	r6, [sp, #8]
   24bf8:	add	sp, sp, #16
   24bfc:	b	24a60 <flatcc_builder_create_string@@Base>

00024c00 <flatcc_builder_end_string@@Base>:
   24c00:	ldr	r3, [r0, #32]
   24c04:	strd	r4, [sp, #-16]!
   24c08:	ldrh	r2, [r3, #14]
   24c0c:	str	r6, [sp, #8]
   24c10:	str	lr, [sp, #12]
   24c14:	cmp	r2, #6
   24c18:	bne	24cf0 <flatcc_builder_end_string@@Base+0xf0>
   24c1c:	ldr	r2, [r3, #20]
   24c20:	mov	r4, r0
   24c24:	ldr	r3, [r0, #20]
   24c28:	cmp	r2, r3
   24c2c:	bne	24cc8 <flatcc_builder_end_string@@Base+0xc8>
   24c30:	ldr	r1, [r0, #16]
   24c34:	bl	24a60 <flatcc_builder_create_string@@Base>
   24c38:	subs	r5, r0, #0
   24c3c:	beq	24cb4 <flatcc_builder_end_string@@Base+0xb4>
   24c40:	mov	r1, #0
   24c44:	ldr	r0, [r4, #16]
   24c48:	ldr	r2, [r4, #20]
   24c4c:	bl	12628 <memset@plt>
   24c50:	ldr	r3, [r4, #32]
   24c54:	ldr	r0, [r4, #60]	; 0x3c
   24c58:	ldr	r2, [r4, #64]	; 0x40
   24c5c:	ldr	ip, [r3]
   24c60:	ldmib	r3, {r1, lr}
   24c64:	add	r0, r0, ip
   24c68:	sub	r2, r2, ip
   24c6c:	str	r0, [r4, #16]
   24c70:	cmp	r2, r1
   24c74:	ldrh	r0, [r4, #128]	; 0x80
   24c78:	movcs	r2, r1
   24c7c:	str	lr, [r4, #20]
   24c80:	str	ip, [r4, #28]
   24c84:	ldrh	ip, [r4, #130]	; 0x82
   24c88:	str	r2, [r4, #24]
   24c8c:	ldr	r2, [r4, #156]	; 0x9c
   24c90:	str	r1, [r3, #4]
   24c94:	cmp	r0, ip
   24c98:	sub	r0, r3, #36	; 0x24
   24c9c:	strhcc	ip, [r4, #128]	; 0x80
   24ca0:	ldrh	r1, [r3, #12]
   24ca4:	sub	r3, r2, #1
   24ca8:	str	r0, [r4, #32]
   24cac:	strh	r1, [r4, #130]	; 0x82
   24cb0:	str	r3, [r4, #156]	; 0x9c
   24cb4:	mov	r0, r5
   24cb8:	ldrd	r4, [sp]
   24cbc:	ldr	r6, [sp, #8]
   24cc0:	add	sp, sp, #12
   24cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   24cc8:	ldr	r3, [pc, #72]	; 24d18 <flatcc_builder_end_string@@Base+0x118>
   24ccc:	movw	r2, #1733	; 0x6c5
   24cd0:	ldr	r1, [pc, #68]	; 24d1c <flatcc_builder_end_string@@Base+0x11c>
   24cd4:	ldr	r0, [pc, #68]	; 24d20 <flatcc_builder_end_string@@Base+0x120>
   24cd8:	add	r3, pc, r3
   24cdc:	add	r3, r3, #1104	; 0x450
   24ce0:	add	r1, pc, r1
   24ce4:	add	r3, r3, #8
   24ce8:	add	r0, pc, r0
   24cec:	bl	1267c <__assert_fail@plt>
   24cf0:	ldr	r3, [pc, #44]	; 24d24 <flatcc_builder_end_string@@Base+0x124>
   24cf4:	movw	r2, #1732	; 0x6c4
   24cf8:	ldr	r1, [pc, #40]	; 24d28 <flatcc_builder_end_string@@Base+0x128>
   24cfc:	ldr	r0, [pc, #40]	; 24d2c <flatcc_builder_end_string@@Base+0x12c>
   24d00:	add	r3, pc, r3
   24d04:	add	r3, r3, #1104	; 0x450
   24d08:	add	r1, pc, r1
   24d0c:	add	r3, r3, #8
   24d10:	add	r0, pc, r0
   24d14:	bl	1267c <__assert_fail@plt>
   24d18:	andeq	r5, r0, r8, ror lr
   24d1c:	andeq	r6, r0, r0, asr #11
   24d20:	andeq	r6, r0, r8, lsl #18
   24d24:	andeq	r5, r0, r0, asr lr
   24d28:	muleq	r0, r8, r5
   24d2c:	andeq	r6, r0, r0, lsl #15

00024d30 <flatcc_builder_string_edit@@Base>:
   24d30:	ldr	r0, [r0, #16]
   24d34:	bx	lr

00024d38 <flatcc_builder_string_len@@Base>:
   24d38:	ldr	r3, [r0, #32]
   24d3c:	ldr	r0, [r3, #20]
   24d40:	bx	lr

00024d44 <flatcc_builder_table_add@@Base>:
   24d44:	strd	r4, [sp, #-32]!	; 0xffffffe0
   24d48:	mov	r4, r0
   24d4c:	ldr	r0, [r0, #32]
   24d50:	ldrh	r0, [r0, #14]
   24d54:	strd	r6, [sp, #8]
   24d58:	strd	r8, [sp, #16]
   24d5c:	str	sl, [sp, #24]
   24d60:	str	lr, [sp, #28]
   24d64:	cmp	r0, #3
   24d68:	bne	24e98 <flatcc_builder_table_add@@Base+0x154>
   24d6c:	movw	r0, #32764	; 0x7ffc
   24d70:	cmp	r1, r0
   24d74:	bhi	24e70 <flatcc_builder_table_add@@Base+0x12c>
   24d78:	ldrh	r0, [r4, #130]	; 0x82
   24d7c:	lsl	r8, r1, #1
   24d80:	ldr	lr, [r4, #4]
   24d84:	cmp	r0, r3
   24d88:	strhcc	r3, [r4, #130]	; 0x82
   24d8c:	ldrh	r6, [lr, r8]
   24d90:	add	lr, lr, r8
   24d94:	cmp	r6, #0
   24d98:	bne	24e48 <flatcc_builder_table_add@@Base+0x104>
   24d9c:	ldr	ip, [r4, #12]
   24da0:	movw	r9, #31153	; 0x79b1
   24da4:	movt	r9, #40503	; 0x9e37
   24da8:	uxth	r7, r1
   24dac:	sub	r5, r3, #1
   24db0:	ldr	r0, [r4, #20]
   24db4:	rsb	r3, r3, #0
   24db8:	eor	ip, ip, r1
   24dbc:	ldr	r1, [r4, #24]
   24dc0:	mul	ip, r9, ip
   24dc4:	add	r5, r5, r0
   24dc8:	and	r5, r5, r3
   24dcc:	eor	ip, ip, r2
   24dd0:	add	r2, r2, r5
   24dd4:	cmp	r2, r1
   24dd8:	mul	ip, r9, ip
   24ddc:	str	ip, [r4, #12]
   24de0:	str	r2, [r4, #20]
   24de4:	bcs	24e20 <flatcc_builder_table_add@@Base+0xdc>
   24de8:	add	r3, r5, #4
   24dec:	ldr	r0, [r4, #16]
   24df0:	strh	r3, [lr]
   24df4:	ldrh	r3, [r4, #8]
   24df8:	add	r0, r0, r5
   24dfc:	cmp	r3, r7
   24e00:	addls	r7, r7, #1
   24e04:	strhls	r7, [r4, #8]
   24e08:	ldrd	r4, [sp]
   24e0c:	ldrd	r6, [sp, #8]
   24e10:	ldrd	r8, [sp, #16]
   24e14:	ldr	sl, [sp, #24]
   24e18:	add	sp, sp, #28
   24e1c:	pop	{pc}		; (ldr pc, [sp], #4)
   24e20:	add	r1, r2, #1
   24e24:	mov	r0, r4
   24e28:	movw	r2, #65532	; 0xfffc
   24e2c:	bl	210a8 <test_parse@@Base+0x528>
   24e30:	cmp	r0, #0
   24e34:	movne	r0, r6
   24e38:	bne	24e08 <flatcc_builder_table_add@@Base+0xc4>
   24e3c:	ldr	lr, [r4, #4]
   24e40:	add	lr, lr, r8
   24e44:	b	24de8 <flatcc_builder_table_add@@Base+0xa4>
   24e48:	ldr	r3, [pc, #112]	; 24ec0 <flatcc_builder_table_add@@Base+0x17c>
   24e4c:	movw	r2, #1784	; 0x6f8
   24e50:	ldr	r1, [pc, #108]	; 24ec4 <flatcc_builder_table_add@@Base+0x180>
   24e54:	ldr	r0, [pc, #108]	; 24ec8 <flatcc_builder_table_add@@Base+0x184>
   24e58:	add	r3, pc, r3
   24e5c:	add	r3, r3, #1136	; 0x470
   24e60:	add	r1, pc, r1
   24e64:	add	r3, r3, #4
   24e68:	add	r0, pc, r0
   24e6c:	bl	1267c <__assert_fail@plt>
   24e70:	ldr	r3, [pc, #84]	; 24ecc <flatcc_builder_table_add@@Base+0x188>
   24e74:	movw	r2, #1774	; 0x6ee
   24e78:	ldr	r1, [pc, #80]	; 24ed0 <flatcc_builder_table_add@@Base+0x18c>
   24e7c:	ldr	r0, [pc, #80]	; 24ed4 <flatcc_builder_table_add@@Base+0x190>
   24e80:	add	r3, pc, r3
   24e84:	add	r3, r3, #1136	; 0x470
   24e88:	add	r1, pc, r1
   24e8c:	add	r3, r3, #4
   24e90:	add	r0, pc, r0
   24e94:	bl	1267c <__assert_fail@plt>
   24e98:	ldr	r3, [pc, #56]	; 24ed8 <flatcc_builder_table_add@@Base+0x194>
   24e9c:	movw	r2, #1773	; 0x6ed
   24ea0:	ldr	r1, [pc, #52]	; 24edc <flatcc_builder_table_add@@Base+0x198>
   24ea4:	ldr	r0, [pc, #52]	; 24ee0 <flatcc_builder_table_add@@Base+0x19c>
   24ea8:	add	r3, pc, r3
   24eac:	add	r3, r3, #1136	; 0x470
   24eb0:	add	r1, pc, r1
   24eb4:	add	r3, r3, #4
   24eb8:	add	r0, pc, r0
   24ebc:	bl	1267c <__assert_fail@plt>
   24ec0:	strdeq	r5, [r0], -r8
   24ec4:	andeq	r6, r0, r0, asr #8
   24ec8:	andeq	r6, r0, r0, asr #9
   24ecc:	ldrdeq	r5, [r0], -r0
   24ed0:	andeq	r6, r0, r8, lsl r4
   24ed4:	andeq	r6, r0, r4, lsl #15
   24ed8:	andeq	r5, r0, r8, lsr #25
   24edc:	strdeq	r6, [r0], -r0
   24ee0:	andeq	r6, r0, r4, asr #13

00024ee4 <flatcc_builder_table_edit@@Base>:
   24ee4:	ldr	r2, [r0, #32]
   24ee8:	ldrh	r2, [r2, #14]
   24eec:	cmp	r2, #3
   24ef0:	bne	24f08 <flatcc_builder_table_edit@@Base+0x24>
   24ef4:	ldr	r3, [r0, #20]
   24ef8:	ldr	r0, [r0, #16]
   24efc:	sub	r3, r3, r1
   24f00:	add	r0, r0, r3
   24f04:	bx	lr
   24f08:	ldr	r3, [pc, #36]	; 24f34 <flatcc_builder_table_edit@@Base+0x50>
   24f0c:	movw	r2, #1794	; 0x702
   24f10:	str	r4, [sp, #-8]!
   24f14:	ldr	r1, [pc, #28]	; 24f38 <flatcc_builder_table_edit@@Base+0x54>
   24f18:	str	lr, [sp, #4]
   24f1c:	ldr	r0, [pc, #24]	; 24f3c <flatcc_builder_table_edit@@Base+0x58>
   24f20:	add	r3, pc, r3
   24f24:	add	r3, r3, #1168	; 0x490
   24f28:	add	r1, pc, r1
   24f2c:	add	r0, pc, r0
   24f30:	bl	1267c <__assert_fail@plt>
   24f34:	andeq	r5, r0, r0, lsr ip
   24f38:	andeq	r6, r0, r8, ror r3
   24f3c:	andeq	r6, r0, r0, asr r6

00024f40 <flatcc_builder_table_add_copy@@Base>:
   24f40:	strd	r4, [sp, #-16]!
   24f44:	mov	r4, r3
   24f48:	ldrh	r3, [sp, #16]
   24f4c:	str	r6, [sp, #8]
   24f50:	mov	r6, r2
   24f54:	mov	r2, r4
   24f58:	str	lr, [sp, #12]
   24f5c:	bl	24d44 <flatcc_builder_table_add@@Base>
   24f60:	subs	r5, r0, #0
   24f64:	beq	24f74 <flatcc_builder_table_add_copy@@Base+0x34>
   24f68:	mov	r2, r4
   24f6c:	mov	r1, r6
   24f70:	bl	12580 <memcpy@plt>
   24f74:	mov	r0, r5
   24f78:	ldrd	r4, [sp]
   24f7c:	ldr	r6, [sp, #8]
   24f80:	add	sp, sp, #12
   24f84:	pop	{pc}		; (ldr pc, [sp], #4)

00024f88 <flatcc_builder_table_add_offset@@Base>:
   24f88:	ldr	r3, [r0, #32]
   24f8c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   24f90:	ldrh	r3, [r3, #14]
   24f94:	strd	r6, [sp, #8]
   24f98:	str	r8, [sp, #16]
   24f9c:	str	lr, [sp, #20]
   24fa0:	cmp	r3, #3
   24fa4:	bne	250cc <flatcc_builder_table_add_offset@@Base+0x144>
   24fa8:	movw	r3, #32764	; 0x7ffc
   24fac:	cmp	r1, r3
   24fb0:	bhi	250a4 <flatcc_builder_table_add_offset@@Base+0x11c>
   24fb4:	ldr	ip, [r0, #4]
   24fb8:	lsl	r8, r1, #1
   24fbc:	mov	r4, r0
   24fc0:	ldrh	r6, [ip, r8]
   24fc4:	add	ip, ip, r8
   24fc8:	cmp	r6, #0
   24fcc:	bne	2507c <flatcc_builder_table_add_offset@@Base+0xf4>
   24fd0:	ldr	r3, [r0, #12]
   24fd4:	movw	r2, #31153	; 0x79b1
   24fd8:	movt	r2, #40503	; 0x9e37
   24fdc:	uxth	r7, r1
   24fe0:	ldr	r5, [r0, #20]
   24fe4:	ldr	lr, [r0, #24]
   24fe8:	eor	r3, r3, r1
   24fec:	mul	r3, r2, r3
   24ff0:	add	r5, r5, #3
   24ff4:	bic	r5, r5, #3
   24ff8:	add	r1, r5, #4
   24ffc:	eor	r3, r3, #4
   25000:	cmp	r1, lr
   25004:	str	r1, [r0, #20]
   25008:	mul	r3, r2, r3
   2500c:	str	r3, [r0, #12]
   25010:	bhi	2505c <flatcc_builder_table_add_offset@@Base+0xd4>
   25014:	uxth	r2, r5
   25018:	ldr	r0, [r4, #16]
   2501c:	add	r3, r2, #4
   25020:	strh	r3, [ip]
   25024:	ldrh	r3, [r4, #8]
   25028:	add	r0, r0, r5
   2502c:	cmp	r3, r7
   25030:	ldr	r3, [r4]
   25034:	addls	r7, r7, #1
   25038:	strhls	r7, [r4, #8]
   2503c:	add	r1, r3, #2
   25040:	str	r1, [r4]
   25044:	strh	r2, [r3]
   25048:	ldrd	r4, [sp]
   2504c:	ldrd	r6, [sp, #8]
   25050:	ldr	r8, [sp, #16]
   25054:	add	sp, sp, #20
   25058:	pop	{pc}		; (ldr pc, [sp], #4)
   2505c:	movw	r2, #65532	; 0xfffc
   25060:	bl	210a8 <test_parse@@Base+0x528>
   25064:	cmp	r0, #0
   25068:	movne	r0, r6
   2506c:	bne	25048 <flatcc_builder_table_add_offset@@Base+0xc0>
   25070:	ldr	ip, [r4, #4]
   25074:	add	ip, ip, r8
   25078:	b	25014 <flatcc_builder_table_add_offset@@Base+0x8c>
   2507c:	ldr	r3, [pc, #112]	; 250f4 <flatcc_builder_table_add_offset@@Base+0x16c>
   25080:	movw	r2, #1819	; 0x71b
   25084:	ldr	r1, [pc, #108]	; 250f8 <flatcc_builder_table_add_offset@@Base+0x170>
   25088:	ldr	r0, [pc, #108]	; 250fc <flatcc_builder_table_add_offset@@Base+0x174>
   2508c:	add	r3, pc, r3
   25090:	add	r3, r3, #1184	; 0x4a0
   25094:	add	r1, pc, r1
   25098:	add	r3, r3, #12
   2509c:	add	r0, pc, r0
   250a0:	bl	1267c <__assert_fail@plt>
   250a4:	ldr	r3, [pc, #84]	; 25100 <flatcc_builder_table_add_offset@@Base+0x178>
   250a8:	movw	r2, #1812	; 0x714
   250ac:	ldr	r1, [pc, #80]	; 25104 <flatcc_builder_table_add_offset@@Base+0x17c>
   250b0:	ldr	r0, [pc, #80]	; 25108 <flatcc_builder_table_add_offset@@Base+0x180>
   250b4:	add	r3, pc, r3
   250b8:	add	r3, r3, #1184	; 0x4a0
   250bc:	add	r1, pc, r1
   250c0:	add	r3, r3, #12
   250c4:	add	r0, pc, r0
   250c8:	bl	1267c <__assert_fail@plt>
   250cc:	ldr	r3, [pc, #56]	; 2510c <flatcc_builder_table_add_offset@@Base+0x184>
   250d0:	movw	r2, #1811	; 0x713
   250d4:	ldr	r1, [pc, #52]	; 25110 <flatcc_builder_table_add_offset@@Base+0x188>
   250d8:	ldr	r0, [pc, #52]	; 25114 <flatcc_builder_table_add_offset@@Base+0x18c>
   250dc:	add	r3, pc, r3
   250e0:	add	r3, r3, #1184	; 0x4a0
   250e4:	add	r1, pc, r1
   250e8:	add	r3, r3, #12
   250ec:	add	r0, pc, r0
   250f0:	bl	1267c <__assert_fail@plt>
   250f4:	andeq	r5, r0, r4, asr #21
   250f8:	andeq	r6, r0, ip, lsl #4
   250fc:	andeq	r6, r0, ip, lsl #5
   25100:	muleq	r0, ip, sl
   25104:	andeq	r6, r0, r4, ror #3
   25108:	andeq	r6, r0, r0, asr r5
   2510c:	andeq	r5, r0, r4, ror sl
   25110:			; <UNDEFINED> instruction: 0x000061bc
   25114:	muleq	r0, r0, r4

00025118 <flatcc_builder_table_add_union@@Base>:
   25118:	strd	r4, [sp, #-20]!	; 0xffffffec
   2511c:	strd	r6, [sp, #8]
   25120:	str	lr, [sp, #16]
   25124:	sub	sp, sp, #12
   25128:	add	ip, sp, #8
   2512c:	stmdb	ip, {r2, r3}
   25130:	ldr	r3, [r0, #32]
   25134:	ldrb	r5, [sp]
   25138:	ldr	r6, [sp, #4]
   2513c:	ldrh	r3, [r3, #14]
   25140:	cmp	r3, #3
   25144:	bne	251d8 <flatcc_builder_table_add_union@@Base+0xc0>
   25148:	cmp	r5, #0
   2514c:	mov	r4, r0
   25150:	mov	r7, r1
   25154:	beq	251a8 <flatcc_builder_table_add_union@@Base+0x90>
   25158:	cmp	r6, #0
   2515c:	beq	25170 <flatcc_builder_table_add_union@@Base+0x58>
   25160:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   25164:	cmp	r0, #0
   25168:	strne	r6, [r0]
   2516c:	beq	25228 <flatcc_builder_table_add_union@@Base+0x110>
   25170:	mov	r3, #1
   25174:	sub	r1, r7, #1
   25178:	mov	r2, r3
   2517c:	mov	r0, r4
   25180:	bl	24d44 <flatcc_builder_table_add@@Base>
   25184:	subs	r3, r0, #0
   25188:	beq	25200 <flatcc_builder_table_add_union@@Base+0xe8>
   2518c:	mov	r0, #0
   25190:	strb	r5, [r3]
   25194:	add	sp, sp, #12
   25198:	ldrd	r4, [sp]
   2519c:	ldrd	r6, [sp, #8]
   251a0:	add	sp, sp, #16
   251a4:	pop	{pc}		; (ldr pc, [sp], #4)
   251a8:	cmp	r6, #0
   251ac:	beq	25170 <flatcc_builder_table_add_union@@Base+0x58>
   251b0:	ldr	r3, [pc, #152]	; 25250 <flatcc_builder_table_add_union@@Base+0x138>
   251b4:	movw	r2, #1519	; 0x5ef
   251b8:	ldr	r1, [pc, #148]	; 25254 <flatcc_builder_table_add_union@@Base+0x13c>
   251bc:	ldr	r0, [pc, #148]	; 25258 <flatcc_builder_table_add_union@@Base+0x140>
   251c0:	add	r3, pc, r3
   251c4:	add	r3, r3, #1216	; 0x4c0
   251c8:	add	r1, pc, r1
   251cc:	add	r3, r3, #12
   251d0:	add	r0, pc, r0
   251d4:	bl	1267c <__assert_fail@plt>
   251d8:	ldr	r3, [pc, #124]	; 2525c <flatcc_builder_table_add_union@@Base+0x144>
   251dc:	movw	r2, #1518	; 0x5ee
   251e0:	ldr	r1, [pc, #120]	; 25260 <flatcc_builder_table_add_union@@Base+0x148>
   251e4:	ldr	r0, [pc, #120]	; 25264 <flatcc_builder_table_add_union@@Base+0x14c>
   251e8:	add	r3, pc, r3
   251ec:	add	r3, r3, #1216	; 0x4c0
   251f0:	add	r1, pc, r1
   251f4:	add	r3, r3, #12
   251f8:	add	r0, pc, r0
   251fc:	bl	1267c <__assert_fail@plt>
   25200:	ldr	r3, [pc, #96]	; 25268 <flatcc_builder_table_add_union@@Base+0x150>
   25204:	movw	r2, #1526	; 0x5f6
   25208:	ldr	r1, [pc, #92]	; 2526c <flatcc_builder_table_add_union@@Base+0x154>
   2520c:	ldr	r0, [pc, #92]	; 25270 <flatcc_builder_table_add_union@@Base+0x158>
   25210:	add	r3, pc, r3
   25214:	add	r3, r3, #1216	; 0x4c0
   25218:	add	r1, pc, r1
   2521c:	add	r3, r3, #12
   25220:	add	r0, pc, r0
   25224:	bl	1267c <__assert_fail@plt>
   25228:	ldr	r3, [pc, #68]	; 25274 <flatcc_builder_table_add_union@@Base+0x15c>
   2522c:	movw	r2, #1522	; 0x5f2
   25230:	ldr	r1, [pc, #64]	; 25278 <flatcc_builder_table_add_union@@Base+0x160>
   25234:	ldr	r0, [pc, #64]	; 2527c <flatcc_builder_table_add_union@@Base+0x164>
   25238:	add	r3, pc, r3
   2523c:	add	r3, r3, #1216	; 0x4c0
   25240:	add	r1, pc, r1
   25244:	add	r3, r3, #12
   25248:	add	r0, pc, r0
   2524c:	bl	1267c <__assert_fail@plt>
   25250:	muleq	r0, r0, r9
   25254:	ldrdeq	r6, [r0], -r8
   25258:	andeq	r6, r0, r8, lsl #9
   2525c:	andeq	r5, r0, r8, ror #18
   25260:	strheq	r6, [r0], -r0
   25264:	andeq	r6, r0, r4, lsl #7
   25268:	andeq	r5, r0, r0, asr #18
   2526c:	andeq	r6, r0, r8, lsl #1
   25270:	andeq	r6, r0, r8, ror #8
   25274:	andeq	r5, r0, r8, lsl r9
   25278:	andeq	r6, r0, r0, rrx
   2527c:	andeq	r6, r0, r4, lsr r4

00025280 <flatcc_builder_table_add_union_vector@@Base>:
   25280:	strd	r4, [sp, #-20]!	; 0xffffffec
   25284:	strd	r6, [sp, #8]
   25288:	mov	r7, r1
   2528c:	str	lr, [sp, #16]
   25290:	sub	sp, sp, #12
   25294:	add	r1, sp, #8
   25298:	stmdb	r1, {r2, r3}
   2529c:	ldr	r3, [r0, #32]
   252a0:	ldm	sp, {r4, r6}
   252a4:	ldrh	r3, [r3, #14]
   252a8:	cmp	r3, #3
   252ac:	bne	25358 <flatcc_builder_table_add_union_vector@@Base+0xd8>
   252b0:	clz	r3, r6
   252b4:	clz	r2, r4
   252b8:	lsr	r3, r3, #5
   252bc:	lsr	r2, r2, #5
   252c0:	cmp	r2, r3
   252c4:	beq	252f4 <flatcc_builder_table_add_union_vector@@Base+0x74>
   252c8:	adds	r4, r4, #0
   252cc:	movne	r4, #1
   252d0:	cmp	r4, r3
   252d4:	mvnne	r4, #0
   252d8:	beq	25380 <flatcc_builder_table_add_union_vector@@Base+0x100>
   252dc:	mov	r0, r4
   252e0:	add	sp, sp, #12
   252e4:	ldrd	r4, [sp]
   252e8:	ldrd	r6, [sp, #8]
   252ec:	add	sp, sp, #16
   252f0:	pop	{pc}		; (ldr pc, [sp], #4)
   252f4:	cmp	r4, #0
   252f8:	beq	252dc <flatcc_builder_table_add_union_vector@@Base+0x5c>
   252fc:	sub	r1, r7, #1
   25300:	mov	r5, r0
   25304:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   25308:	subs	r3, r0, #0
   2530c:	beq	253a8 <flatcc_builder_table_add_union_vector@@Base+0x128>
   25310:	mov	r1, r7
   25314:	mov	r0, r5
   25318:	str	r4, [r3]
   2531c:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   25320:	cmp	r0, #0
   25324:	movne	r4, #0
   25328:	strne	r6, [r0]
   2532c:	bne	252dc <flatcc_builder_table_add_union_vector@@Base+0x5c>
   25330:	ldr	r3, [pc, #152]	; 253d0 <flatcc_builder_table_add_union_vector@@Base+0x150>
   25334:	movw	r2, #1544	; 0x608
   25338:	ldr	r1, [pc, #148]	; 253d4 <flatcc_builder_table_add_union_vector@@Base+0x154>
   2533c:	ldr	r0, [pc, #148]	; 253d8 <flatcc_builder_table_add_union_vector@@Base+0x158>
   25340:	add	r3, pc, r3
   25344:	add	r3, r3, #1248	; 0x4e0
   25348:	add	r1, pc, r1
   2534c:	add	r3, r3, #12
   25350:	add	r0, pc, r0
   25354:	bl	1267c <__assert_fail@plt>
   25358:	ldr	r3, [pc, #124]	; 253dc <flatcc_builder_table_add_union_vector@@Base+0x15c>
   2535c:	mov	r2, #1536	; 0x600
   25360:	ldr	r1, [pc, #120]	; 253e0 <flatcc_builder_table_add_union_vector@@Base+0x160>
   25364:	ldr	r0, [pc, #120]	; 253e4 <flatcc_builder_table_add_union_vector@@Base+0x164>
   25368:	add	r3, pc, r3
   2536c:	add	r3, r3, #1248	; 0x4e0
   25370:	add	r1, pc, r1
   25374:	add	r3, r3, #12
   25378:	add	r0, pc, r0
   2537c:	bl	1267c <__assert_fail@plt>
   25380:	ldr	r3, [pc, #96]	; 253e8 <flatcc_builder_table_add_union_vector@@Base+0x168>
   25384:	movw	r2, #1537	; 0x601
   25388:	ldr	r1, [pc, #92]	; 253ec <flatcc_builder_table_add_union_vector@@Base+0x16c>
   2538c:	ldr	r0, [pc, #92]	; 253f0 <flatcc_builder_table_add_union_vector@@Base+0x170>
   25390:	add	r3, pc, r3
   25394:	add	r3, r3, #1248	; 0x4e0
   25398:	add	r1, pc, r1
   2539c:	add	r3, r3, #12
   253a0:	add	r0, pc, r0
   253a4:	bl	1267c <__assert_fail@plt>
   253a8:	ldr	r3, [pc, #68]	; 253f4 <flatcc_builder_table_add_union_vector@@Base+0x174>
   253ac:	movw	r2, #1540	; 0x604
   253b0:	ldr	r1, [pc, #64]	; 253f8 <flatcc_builder_table_add_union_vector@@Base+0x178>
   253b4:	ldr	r0, [pc, #64]	; 253fc <flatcc_builder_table_add_union_vector@@Base+0x17c>
   253b8:	add	r3, pc, r3
   253bc:	add	r3, r3, #1248	; 0x4e0
   253c0:	add	r1, pc, r1
   253c4:	add	r3, r3, #12
   253c8:	add	r0, pc, r0
   253cc:	bl	1267c <__assert_fail@plt>
   253d0:	andeq	r5, r0, r0, lsl r8
   253d4:	andeq	r5, r0, r8, asr pc
   253d8:	andeq	r6, r0, ip, lsr #6
   253dc:	andeq	r5, r0, r8, ror #15
   253e0:	andeq	r5, r0, r0, lsr pc
   253e4:	andeq	r6, r0, r4, lsl #4
   253e8:	andeq	r5, r0, r0, asr #15
   253ec:	andeq	r5, r0, r8, lsl #30
   253f0:	strdeq	r6, [r0], -r4
   253f4:	muleq	r0, r8, r7
   253f8:	andeq	r5, r0, r0, ror #29
   253fc:			; <UNDEFINED> instruction: 0x000062b4

00025400 <flatcc_builder_push_buffer_alignment@@Base>:
   25400:	mov	r3, r0
   25404:	mov	r2, #4
   25408:	ldrh	r0, [r0, #128]	; 0x80
   2540c:	strh	r2, [r3, #128]	; 0x80
   25410:	bx	lr

00025414 <flatcc_builder_pop_buffer_alignment@@Base>:
   25414:	ldrh	r3, [r0, #128]	; 0x80
   25418:	cmp	r3, r1
   2541c:	strhcc	r1, [r0, #128]	; 0x80
   25420:	bx	lr

00025424 <flatcc_builder_get_buffer_alignment@@Base>:
   25424:	ldrh	r0, [r0, #128]	; 0x80
   25428:	bx	lr

0002542c <flatcc_builder_set_vtable_clustering@@Base>:
   2542c:	clz	r1, r1
   25430:	lsr	r1, r1, #5
   25434:	str	r1, [r0, #180]	; 0xb4
   25438:	bx	lr

0002543c <flatcc_builder_set_block_align@@Base>:
   2543c:	strh	r1, [r0, #132]	; 0x84
   25440:	bx	lr

00025444 <flatcc_builder_get_level@@Base>:
   25444:	ldr	r0, [r0, #156]	; 0x9c
   25448:	bx	lr

0002544c <flatcc_builder_set_max_level@@Base>:
   2544c:	ldr	r3, [r0, #160]	; 0xa0
   25450:	str	r1, [r0, #176]	; 0xb0
   25454:	cmp	r3, r1
   25458:	strlt	r1, [r0, #160]	; 0xa0
   2545c:	bx	lr

00025460 <flatcc_builder_get_buffer_size@@Base>:
   25460:	ldr	r3, [r0, #136]	; 0x88
   25464:	ldr	r0, [r0, #140]	; 0x8c
   25468:	sub	r0, r0, r3
   2546c:	bx	lr

00025470 <flatcc_builder_get_buffer_start@@Base>:
   25470:	ldr	r0, [r0, #136]	; 0x88
   25474:	bx	lr

00025478 <flatcc_builder_get_buffer_end@@Base>:
   25478:	ldr	r0, [r0, #140]	; 0x8c
   2547c:	bx	lr

00025480 <flatcc_builder_set_vtable_cache_limit@@Base>:
   25480:	str	r1, [r0, #172]	; 0xac
   25484:	bx	lr

00025488 <flatcc_builder_set_identifier@@Base>:
   25488:	ldr	r3, [pc, #40]	; 254b8 <flatcc_builder_set_identifier@@Base+0x30>
   2548c:	cmp	r1, #0
   25490:	add	r3, pc, r3
   25494:	beq	254a4 <flatcc_builder_set_identifier@@Base+0x1c>
   25498:	ldr	r3, [r1]
   2549c:	str	r3, [r0, #168]	; 0xa8
   254a0:	bx	lr
   254a4:	ldr	r2, [pc, #16]	; 254bc <flatcc_builder_set_identifier@@Base+0x34>
   254a8:	ldr	r1, [r3, r2]
   254ac:	ldr	r3, [r1]
   254b0:	str	r3, [r0, #168]	; 0xa8
   254b4:	bx	lr
   254b8:	andeq	r7, r1, r8, ror #22
   254bc:	andeq	r0, r0, ip, rrx

000254c0 <flatcc_builder_get_type@@Base>:
   254c0:	ldr	r0, [r0, #32]
   254c4:	cmp	r0, #0
   254c8:	ldrhne	r0, [r0, #14]
   254cc:	bx	lr

000254d0 <flatcc_builder_get_type_at@@Base>:
   254d0:	cmp	r1, #0
   254d4:	ble	254fc <flatcc_builder_get_type_at@@Base+0x2c>
   254d8:	ldr	r3, [r0, #156]	; 0x9c
   254dc:	cmp	r3, r1
   254e0:	blt	254fc <flatcc_builder_get_type_at@@Base+0x2c>
   254e4:	ldr	r2, [r0, #32]
   254e8:	sub	r1, r1, r3
   254ec:	add	r1, r1, r1, lsl #3
   254f0:	add	r1, r2, r1, lsl #2
   254f4:	ldrh	r0, [r1, #14]
   254f8:	bx	lr
   254fc:	mov	r0, #0
   25500:	bx	lr

00025504 <flatcc_builder_get_direct_buffer@@Base>:
   25504:	ldr	r3, [r0, #184]	; 0xb8
   25508:	cmp	r3, #0
   2550c:	bne	25528 <flatcc_builder_get_direct_buffer@@Base+0x24>
   25510:	cmp	r1, #0
   25514:	movne	r3, #0
   25518:	movne	r0, r3
   2551c:	moveq	r0, r1
   25520:	strne	r3, [r1]
   25524:	bx	lr
   25528:	ldrd	r2, [r0, #188]	; 0xbc
   2552c:	cmp	r2, r3
   25530:	bne	25510 <flatcc_builder_get_direct_buffer@@Base+0xc>
   25534:	cmp	r1, #0
   25538:	ldrne	r3, [r0, #212]	; 0xd4
   2553c:	ldr	r0, [r0, #196]	; 0xc4
   25540:	strne	r3, [r1]
   25544:	bx	lr

00025548 <flatcc_builder_copy_buffer@@Base>:
   25548:	ldr	r3, [r0, #184]	; 0xb8
   2554c:	cmp	r3, #0
   25550:	beq	25578 <flatcc_builder_copy_buffer@@Base+0x30>
   25554:	add	r0, r0, #188	; 0xbc
   25558:	str	r4, [sp, #-8]!
   2555c:	str	lr, [sp, #4]
   25560:	bl	25cdc <flatcc_emitter_copy_buffer@@Base>
   25564:	cmp	r0, #0
   25568:	beq	25580 <flatcc_builder_copy_buffer@@Base+0x38>
   2556c:	ldr	r4, [sp]
   25570:	add	sp, sp, #4
   25574:	pop	{pc}		; (ldr pc, [sp], #4)
   25578:	mov	r0, r3
   2557c:	bx	lr
   25580:	ldr	r3, [pc, #32]	; 255a8 <flatcc_builder_copy_buffer@@Base+0x60>
   25584:	movw	r2, #1926	; 0x786
   25588:	ldr	r1, [pc, #28]	; 255ac <flatcc_builder_copy_buffer@@Base+0x64>
   2558c:	ldr	r0, [pc, #28]	; 255b0 <flatcc_builder_copy_buffer@@Base+0x68>
   25590:	add	r3, pc, r3
   25594:	add	r3, r3, #1296	; 0x510
   25598:	add	r1, pc, r1
   2559c:	add	r3, r3, #4
   255a0:	add	r0, pc, r0
   255a4:	bl	1267c <__assert_fail@plt>
   255a8:	andeq	r5, r0, r0, asr #11
   255ac:	andeq	r5, r0, r8, lsl #26
   255b0:	andeq	r6, r0, ip, lsl r1

000255b4 <flatcc_builder_finalize_buffer@@Base>:
   255b4:	strd	r4, [sp, #-16]!
   255b8:	mov	r5, r1
   255bc:	str	r6, [sp, #8]
   255c0:	mov	r6, r0
   255c4:	str	lr, [sp, #12]
   255c8:	bl	25460 <flatcc_builder_get_buffer_size@@Base>
   255cc:	cmp	r5, #0
   255d0:	mov	r4, r0
   255d4:	strne	r0, [r5]
   255d8:	bl	125d4 <malloc@plt>
   255dc:	subs	r5, r0, #0
   255e0:	beq	25610 <flatcc_builder_finalize_buffer@@Base+0x5c>
   255e4:	mov	r2, r4
   255e8:	mov	r0, r6
   255ec:	mov	r1, r5
   255f0:	bl	25548 <flatcc_builder_copy_buffer@@Base>
   255f4:	cmp	r0, #0
   255f8:	beq	25634 <flatcc_builder_finalize_buffer@@Base+0x80>
   255fc:	mov	r0, r5
   25600:	ldrd	r4, [sp]
   25604:	ldr	r6, [sp, #8]
   25608:	add	sp, sp, #12
   2560c:	pop	{pc}		; (ldr pc, [sp], #4)
   25610:	ldr	r3, [pc, #64]	; 25658 <flatcc_builder_finalize_buffer@@Base+0xa4>
   25614:	movw	r2, #1944	; 0x798
   25618:	ldr	r1, [pc, #60]	; 2565c <flatcc_builder_finalize_buffer@@Base+0xa8>
   2561c:	ldr	r0, [pc, #60]	; 25660 <flatcc_builder_finalize_buffer@@Base+0xac>
   25620:	add	r3, pc, r3
   25624:	add	r3, r3, #1328	; 0x530
   25628:	add	r1, pc, r1
   2562c:	add	r0, pc, r0
   25630:	bl	1267c <__assert_fail@plt>
   25634:	ldr	r3, [pc, #40]	; 25664 <flatcc_builder_finalize_buffer@@Base+0xb0>
   25638:	movw	r2, #1948	; 0x79c
   2563c:	ldr	r1, [pc, #36]	; 25668 <flatcc_builder_finalize_buffer@@Base+0xb4>
   25640:	ldr	r0, [pc, #36]	; 2566c <flatcc_builder_finalize_buffer@@Base+0xb8>
   25644:	add	r3, pc, r3
   25648:	add	r3, r3, #1328	; 0x530
   2564c:	add	r1, pc, r1
   25650:	add	r0, pc, r0
   25654:	bl	1267c <__assert_fail@plt>
   25658:	andeq	r5, r0, r0, lsr r5
   2565c:	andeq	r5, r0, r8, ror ip
   25660:	strdeq	r5, [r0], -ip
   25664:	andeq	r5, r0, ip, lsl #10
   25668:	andeq	r5, r0, r4, asr ip
   2566c:	ldrdeq	r5, [r0], -r8

00025670 <flatcc_builder_finalize_aligned_buffer@@Base>:
   25670:	strd	r4, [sp, #-20]!	; 0xffffffec
   25674:	mov	r5, r1
   25678:	strd	r6, [sp, #8]
   2567c:	mov	r6, r0
   25680:	str	lr, [sp, #16]
   25684:	sub	sp, sp, #12
   25688:	bl	25460 <flatcc_builder_get_buffer_size@@Base>
   2568c:	cmp	r5, #0
   25690:	mov	r4, r0
   25694:	sub	r4, r4, #1
   25698:	strne	r0, [r5]
   2569c:	mov	r0, r6
   256a0:	bl	25424 <flatcc_builder_get_buffer_alignment@@Base>
   256a4:	rsb	r3, r0, #0
   256a8:	add	r4, r4, r0
   256ac:	cmp	r0, #4
   256b0:	and	r4, r4, r3
   256b4:	mov	r3, #0
   256b8:	movcs	r1, r0
   256bc:	movcc	r1, #4
   256c0:	mov	r2, r4
   256c4:	add	r0, sp, #4
   256c8:	str	r3, [sp, #4]
   256cc:	bl	1261c <posix_memalign@plt>
   256d0:	cmp	r0, #0
   256d4:	beq	25700 <flatcc_builder_finalize_aligned_buffer@@Base+0x90>
   256d8:	ldr	r0, [sp, #4]
   256dc:	cmp	r0, #0
   256e0:	beq	256e8 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   256e4:	bl	12574 <free@plt>
   256e8:	cmp	r5, #0
   256ec:	movne	r3, #0
   256f0:	moveq	r7, r5
   256f4:	movne	r7, r3
   256f8:	strne	r3, [r5]
   256fc:	b	25724 <flatcc_builder_finalize_aligned_buffer@@Base+0xb4>
   25700:	ldr	r7, [sp, #4]
   25704:	cmp	r7, #0
   25708:	beq	256e8 <flatcc_builder_finalize_aligned_buffer@@Base+0x78>
   2570c:	mov	r2, r4
   25710:	mov	r0, r6
   25714:	mov	r1, r7
   25718:	bl	25548 <flatcc_builder_copy_buffer@@Base>
   2571c:	cmp	r0, #0
   25720:	beq	2573c <flatcc_builder_finalize_aligned_buffer@@Base+0xcc>
   25724:	mov	r0, r7
   25728:	add	sp, sp, #12
   2572c:	ldrd	r4, [sp]
   25730:	ldrd	r6, [sp, #8]
   25734:	add	sp, sp, #16
   25738:	pop	{pc}		; (ldr pc, [sp], #4)
   2573c:	mov	r0, r7
   25740:	b	256e4 <flatcc_builder_finalize_aligned_buffer@@Base+0x74>

00025744 <flatcc_builder_aligned_alloc@@Base>:
   25744:	cmp	r0, #4
   25748:	str	r4, [sp, #-8]!
   2574c:	mov	r4, #0
   25750:	str	lr, [sp, #4]
   25754:	sub	sp, sp, #8
   25758:	mov	r2, r1
   2575c:	movcs	r1, r0
   25760:	movcc	r1, #4
   25764:	add	r0, sp, #4
   25768:	str	r4, [sp, #4]
   2576c:	bl	1261c <posix_memalign@plt>
   25770:	cmp	r0, r4
   25774:	ldr	r0, [sp, #4]
   25778:	beq	2578c <flatcc_builder_aligned_alloc@@Base+0x48>
   2577c:	cmp	r0, #0
   25780:	beq	2578c <flatcc_builder_aligned_alloc@@Base+0x48>
   25784:	bl	12574 <free@plt>
   25788:	mov	r0, r4
   2578c:	add	sp, sp, #8
   25790:	ldr	r4, [sp]
   25794:	add	sp, sp, #4
   25798:	pop	{pc}		; (ldr pc, [sp], #4)

0002579c <flatcc_builder_aligned_free@@Base>:
   2579c:	b	12574 <free@plt>

000257a0 <flatcc_builder_get_emit_context@@Base>:
   257a0:	ldr	r0, [r0, #36]	; 0x24
   257a4:	bx	lr

000257a8 <flatcc_emitter_recycle_page@@Base>:
   257a8:	ldr	r3, [r0]
   257ac:	cmp	r3, r1
   257b0:	beq	257f4 <flatcc_emitter_recycle_page@@Base+0x4c>
   257b4:	ldr	r2, [r0, #4]
   257b8:	cmp	r2, r1
   257bc:	beq	257f4 <flatcc_emitter_recycle_page@@Base+0x4c>
   257c0:	push	{lr}		; (str lr, [sp, #-4]!)
   257c4:	mov	r0, #0
   257c8:	ldr	lr, [r1, #2944]	; 0xb80
   257cc:	ldr	ip, [r1, #2948]	; 0xb84
   257d0:	str	ip, [lr, #2948]	; 0xb84
   257d4:	ldr	r2, [r3, #2948]	; 0xb84
   257d8:	str	lr, [ip, #2944]	; 0xb80
   257dc:	str	r3, [r1, #2944]	; 0xb80
   257e0:	str	r2, [r1, #2948]	; 0xb84
   257e4:	str	r1, [r2, #2944]	; 0xb80
   257e8:	ldr	r3, [r1, #2944]	; 0xb80
   257ec:	str	r1, [r3, #2948]	; 0xb84
   257f0:	pop	{pc}		; (ldr pc, [sp], #4)
   257f4:	mvn	r0, #0
   257f8:	bx	lr

000257fc <flatcc_emitter_reset@@Base>:
   257fc:	ldr	r2, [r0]
   25800:	cmp	r2, #0
   25804:	bxeq	lr
   25808:	strd	r4, [sp, #-16]!
   2580c:	movw	ip, #64064	; 0xfa40
   25810:	movt	ip, #65535	; 0xffff
   25814:	ldr	r1, [r0, #24]
   25818:	add	r4, r2, #1472	; 0x5c0
   2581c:	ldr	r3, [r0, #32]
   25820:	ldr	r5, [r0, #28]
   25824:	str	r6, [sp, #8]
   25828:	str	lr, [sp, #12]
   2582c:	mov	lr, #1472	; 0x5c0
   25830:	cmp	r3, #0
   25834:	stmib	r0, {r2, r4}
   25838:	moveq	r3, r1
   2583c:	lsr	r1, r1, #2
   25840:	str	lr, [r0, #12]
   25844:	add	r3, r3, r3, lsl #1
   25848:	str	r4, [r0, #16]
   2584c:	str	lr, [r0, #20]
   25850:	add	r3, r1, r3, lsr #2
   25854:	str	ip, [r2, #2952]	; 0xb88
   25858:	mov	ip, #0
   2585c:	cmp	r5, r3, lsl #1
   25860:	str	ip, [r0, #24]
   25864:	str	r3, [r0, #32]
   25868:	bls	258c0 <flatcc_emitter_reset@@Base+0xc4>
   2586c:	ldr	r3, [r2, #2944]	; 0xb80
   25870:	mov	r4, r0
   25874:	cmp	r2, r3
   25878:	bne	25890 <flatcc_emitter_reset@@Base+0x94>
   2587c:	b	258c0 <flatcc_emitter_reset@@Base+0xc4>
   25880:	ldm	r4, {r1, r2}
   25884:	ldr	r3, [r2, #2944]	; 0xb80
   25888:	cmp	r3, r1
   2588c:	beq	258c0 <flatcc_emitter_reset@@Base+0xc4>
   25890:	ldr	r1, [r3, #2944]	; 0xb80
   25894:	mov	r0, r3
   25898:	str	r1, [r2, #2944]	; 0xb80
   2589c:	ldr	r3, [r3, #2944]	; 0xb80
   258a0:	str	r2, [r3, #2948]	; 0xb84
   258a4:	bl	12574 <free@plt>
   258a8:	ldr	r3, [r4, #28]
   258ac:	ldr	r2, [r4, #32]
   258b0:	sub	r3, r3, #2944	; 0xb80
   258b4:	cmp	r3, r2, lsl #1
   258b8:	str	r3, [r4, #28]
   258bc:	bhi	25880 <flatcc_emitter_reset@@Base+0x84>
   258c0:	ldrd	r4, [sp]
   258c4:	ldr	r6, [sp, #8]
   258c8:	add	sp, sp, #12
   258cc:	pop	{pc}		; (ldr pc, [sp], #4)

000258d0 <flatcc_emitter_clear@@Base>:
   258d0:	ldr	r3, [r0]
   258d4:	cmp	r3, #0
   258d8:	bxeq	lr
   258dc:	mov	r1, #0
   258e0:	strd	r4, [sp, #-16]!
   258e4:	mov	r5, r0
   258e8:	ldr	r2, [r3, #2948]	; 0xb84
   258ec:	str	r6, [sp, #8]
   258f0:	str	lr, [sp, #12]
   258f4:	str	r1, [r2, #2944]	; 0xb80
   258f8:	ldr	r4, [r3, #2944]	; 0xb80
   258fc:	cmp	r4, r1
   25900:	bne	2590c <flatcc_emitter_clear@@Base+0x3c>
   25904:	b	25948 <flatcc_emitter_clear@@Base+0x78>
   25908:	mov	r4, r3
   2590c:	ldr	r0, [r4, #2948]	; 0xb84
   25910:	bl	12574 <free@plt>
   25914:	ldr	r3, [r4, #2944]	; 0xb80
   25918:	cmp	r3, #0
   2591c:	bne	25908 <flatcc_emitter_clear@@Base+0x38>
   25920:	mov	r0, r4
   25924:	bl	12574 <free@plt>
   25928:	mov	r0, r5
   2592c:	mov	r2, #36	; 0x24
   25930:	ldrd	r4, [sp]
   25934:	mov	r1, #0
   25938:	ldr	r6, [sp, #8]
   2593c:	ldr	lr, [sp, #12]
   25940:	add	sp, sp, #16
   25944:	b	12628 <memset@plt>
   25948:	mov	r4, r3
   2594c:	b	25920 <flatcc_emitter_clear@@Base+0x50>

00025950 <flatcc_emitter@@Base>:
   25950:	cmp	r3, #0
   25954:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25958:	mov	r4, r0
   2595c:	ldr	r3, [r0, #24]
   25960:	strd	r6, [sp, #8]
   25964:	strd	r8, [sp, #16]
   25968:	sub	r8, r2, #1
   2596c:	strd	sl, [sp, #24]
   25970:	str	lr, [sp, #32]
   25974:	sub	sp, sp, #12
   25978:	ldr	r0, [sp, #48]	; 0x30
   2597c:	add	r3, r3, r0
   25980:	str	r3, [r4, #24]
   25984:	blt	25b54 <flatcc_emitter@@Base+0x204>
   25988:	ldr	r3, [r4, #20]
   2598c:	cmp	r3, r0
   25990:	bcs	25a30 <flatcc_emitter@@Base+0xe0>
   25994:	cmp	r2, #0
   25998:	beq	25a10 <flatcc_emitter@@Base+0xc0>
   2599c:	mov	r8, r2
   259a0:	add	r5, r1, #8
   259a4:	movw	r2, #64064	; 0xfa40
   259a8:	movt	r2, #65535	; 0xffff
   259ac:	str	r2, [sp, #4]
   259b0:	ldmdb	r5, {r7, fp}
   259b4:	cmp	fp, #0
   259b8:	beq	25a04 <flatcc_emitter@@Base+0xb4>
   259bc:	mov	r9, #1472	; 0x5c0
   259c0:	cmp	fp, r3
   259c4:	mov	r6, r3
   259c8:	bls	25ac0 <flatcc_emitter@@Base+0x170>
   259cc:	cmp	r3, #0
   259d0:	subne	fp, fp, r3
   259d4:	beq	25a78 <flatcc_emitter@@Base+0x128>
   259d8:	mov	r2, r6
   259dc:	mov	r1, r7
   259e0:	ldr	r0, [r4, #16]
   259e4:	bl	12580 <memcpy@plt>
   259e8:	ldrd	r2, [r4, #16]
   259ec:	cmp	fp, #0
   259f0:	add	r7, r7, r6
   259f4:	add	r2, r2, r6
   259f8:	sub	r3, r3, r6
   259fc:	strd	r2, [r4, #16]
   25a00:	bne	259c0 <flatcc_emitter@@Base+0x70>
   25a04:	subs	r8, r8, #1
   25a08:	add	r5, r5, #8
   25a0c:	bne	259b0 <flatcc_emitter@@Base+0x60>
   25a10:	mov	r0, #0
   25a14:	add	sp, sp, #12
   25a18:	ldrd	r4, [sp]
   25a1c:	ldrd	r6, [sp, #8]
   25a20:	ldrd	r8, [sp, #16]
   25a24:	ldrd	sl, [sp, #24]
   25a28:	add	sp, sp, #32
   25a2c:	pop	{pc}		; (ldr pc, [sp], #4)
   25a30:	ldr	r7, [r4, #16]
   25a34:	sub	r3, r3, r0
   25a38:	str	r3, [r4, #20]
   25a3c:	add	r0, r7, r0
   25a40:	str	r0, [r4, #16]
   25a44:	cmp	r2, #0
   25a48:	addne	r4, r1, #8
   25a4c:	beq	25a10 <flatcc_emitter@@Base+0xc0>
   25a50:	mov	r0, r7
   25a54:	ldmdb	r4, {r1, r2}
   25a58:	sub	r8, r8, #1
   25a5c:	bl	12580 <memcpy@plt>
   25a60:	ldr	r3, [r4, #-4]
   25a64:	cmn	r8, #1
   25a68:	add	r4, r4, #8
   25a6c:	add	r7, r7, r3
   25a70:	bne	25a50 <flatcc_emitter@@Base+0x100>
   25a74:	b	25a10 <flatcc_emitter@@Base+0xc0>
   25a78:	ldr	r6, [r4, #4]
   25a7c:	cmp	r6, #0
   25a80:	beq	25b00 <flatcc_emitter@@Base+0x1b0>
   25a84:	ldr	sl, [r4]
   25a88:	ldr	r0, [r6, #2944]	; 0xb80
   25a8c:	cmp	r0, sl
   25a90:	beq	25acc <flatcc_emitter@@Base+0x17c>
   25a94:	str	r0, [r4, #4]
   25a98:	ldr	r2, [r0, #2948]	; 0xb84
   25a9c:	mov	r3, #2944	; 0xb80
   25aa0:	cmp	fp, r3
   25aa4:	mov	r6, r3
   25aa8:	ldr	r2, [r2, #2952]	; 0xb88
   25aac:	str	r0, [r4, #16]
   25ab0:	str	r3, [r4, #20]
   25ab4:	add	r2, r2, r3
   25ab8:	str	r2, [r0, #2952]	; 0xb88
   25abc:	bhi	259cc <flatcc_emitter@@Base+0x7c>
   25ac0:	mov	r6, fp
   25ac4:	mov	fp, #0
   25ac8:	b	259d8 <flatcc_emitter@@Base+0x88>
   25acc:	movw	r0, #2956	; 0xb8c
   25ad0:	bl	125d4 <malloc@plt>
   25ad4:	cmp	r0, #0
   25ad8:	beq	25b4c <flatcc_emitter@@Base+0x1fc>
   25adc:	ldr	r2, [r4, #28]
   25ae0:	str	sl, [r0, #2944]	; 0xb80
   25ae4:	str	r6, [r0, #2948]	; 0xb84
   25ae8:	add	r2, r2, #2944	; 0xb80
   25aec:	str	r2, [r4, #28]
   25af0:	str	r0, [sl, #2948]	; 0xb84
   25af4:	str	r0, [r6, #2944]	; 0xb80
   25af8:	str	r0, [r4, #4]
   25afc:	b	25a98 <flatcc_emitter@@Base+0x148>
   25b00:	movw	r0, #2956	; 0xb8c
   25b04:	bl	125d4 <malloc@plt>
   25b08:	cmp	r0, #0
   25b0c:	beq	25b4c <flatcc_emitter@@Base+0x1fc>
   25b10:	ldr	r2, [r4, #28]
   25b14:	add	r1, r0, #1472	; 0x5c0
   25b18:	mov	r3, #1472	; 0x5c0
   25b1c:	str	r0, [r4]
   25b20:	strd	r0, [r4, #4]
   25b24:	str	r9, [r4, #12]
   25b28:	str	r1, [r4, #16]
   25b2c:	add	r2, r2, #2944	; 0xb80
   25b30:	str	r9, [r4, #20]
   25b34:	str	r0, [r0, #2944]	; 0xb80
   25b38:	str	r2, [r4, #28]
   25b3c:	ldr	r2, [sp, #4]
   25b40:	str	r0, [r0, #2948]	; 0xb84
   25b44:	str	r2, [r0, #2952]	; 0xb88
   25b48:	b	259c0 <flatcc_emitter@@Base+0x70>
   25b4c:	mvn	r0, #0
   25b50:	b	25a14 <flatcc_emitter@@Base+0xc4>
   25b54:	ldr	r3, [r4, #12]
   25b58:	cmp	r3, r0
   25b5c:	bcs	25cc4 <flatcc_emitter@@Base+0x374>
   25b60:	add	r5, r1, r2, lsl #3
   25b64:	movw	r3, #64064	; 0xfa40
   25b68:	movt	r3, #65535	; 0xffff
   25b6c:	str	r3, [sp, #4]
   25b70:	cmn	r8, #1
   25b74:	beq	25a10 <flatcc_emitter@@Base+0xc0>
   25b78:	ldr	r7, [r5, #-8]
   25b7c:	ldr	r6, [r5, #-4]
   25b80:	cmp	r6, #0
   25b84:	add	r7, r7, r6
   25b88:	beq	25bd8 <flatcc_emitter@@Base+0x288>
   25b8c:	mov	r9, #1472	; 0x5c0
   25b90:	ldr	r2, [r4, #12]
   25b94:	cmp	r2, r6
   25b98:	bcs	25c3c <flatcc_emitter@@Base+0x2ec>
   25b9c:	cmp	r2, #0
   25ba0:	beq	25be4 <flatcc_emitter@@Base+0x294>
   25ba4:	sub	r6, r6, r2
   25ba8:	mov	r1, #0
   25bac:	ldr	r3, [r4, #8]
   25bb0:	rsb	r0, r2, #0
   25bb4:	add	r7, r7, r0
   25bb8:	str	r1, [r4, #12]
   25bbc:	mov	r1, r7
   25bc0:	add	r3, r3, r0
   25bc4:	mov	r0, r3
   25bc8:	str	r3, [r4, #8]
   25bcc:	bl	12580 <memcpy@plt>
   25bd0:	cmp	r6, #0
   25bd4:	bne	25b90 <flatcc_emitter@@Base+0x240>
   25bd8:	sub	r5, r5, #8
   25bdc:	sub	r8, r8, #1
   25be0:	b	25b70 <flatcc_emitter@@Base+0x220>
   25be4:	ldr	fp, [r4]
   25be8:	cmp	fp, #0
   25bec:	beq	25c80 <flatcc_emitter@@Base+0x330>
   25bf0:	ldr	sl, [r4, #4]
   25bf4:	ldr	r0, [fp, #2948]	; 0xb84
   25bf8:	cmp	r0, sl
   25bfc:	beq	25c4c <flatcc_emitter@@Base+0x2fc>
   25c00:	ldr	r3, [fp, #2952]	; 0xb88
   25c04:	sub	r3, r3, #2944	; 0xb80
   25c08:	str	r3, [r0, #2952]	; 0xb88
   25c0c:	str	r0, [r4]
   25c10:	ldr	r3, [r0, #2944]	; 0xb80
   25c14:	mov	r2, #2944	; 0xb80
   25c18:	add	r1, r0, #2944	; 0xb80
   25c1c:	ldr	r3, [r3, #2952]	; 0xb88
   25c20:	str	r1, [r4, #8]
   25c24:	str	r2, [r4, #12]
   25c28:	sub	r3, r3, #2944	; 0xb80
   25c2c:	str	r3, [r0, #2952]	; 0xb88
   25c30:	ldr	r2, [r4, #12]
   25c34:	cmp	r2, r6
   25c38:	bcc	25b9c <flatcc_emitter@@Base+0x24c>
   25c3c:	sub	r1, r2, r6
   25c40:	mov	r2, r6
   25c44:	mov	r6, #0
   25c48:	b	25bac <flatcc_emitter@@Base+0x25c>
   25c4c:	movw	r0, #2956	; 0xb8c
   25c50:	bl	125d4 <malloc@plt>
   25c54:	cmp	r0, #0
   25c58:	beq	25b4c <flatcc_emitter@@Base+0x1fc>
   25c5c:	ldr	r2, [r4, #28]
   25c60:	str	fp, [r0, #2944]	; 0xb80
   25c64:	str	sl, [r0, #2948]	; 0xb84
   25c68:	add	r2, r2, #2944	; 0xb80
   25c6c:	str	r2, [r4, #28]
   25c70:	str	r0, [fp, #2948]	; 0xb84
   25c74:	str	r0, [sl, #2944]	; 0xb80
   25c78:	str	r0, [r4]
   25c7c:	b	25c10 <flatcc_emitter@@Base+0x2c0>
   25c80:	movw	r0, #2956	; 0xb8c
   25c84:	bl	125d4 <malloc@plt>
   25c88:	cmp	r0, #0
   25c8c:	beq	25b4c <flatcc_emitter@@Base+0x1fc>
   25c90:	ldr	r3, [r4, #28]
   25c94:	add	r2, r0, #1472	; 0x5c0
   25c98:	str	r0, [r4]
   25c9c:	stmib	r4, {r0, r2, r9}
   25ca0:	add	r3, r3, #2944	; 0xb80
   25ca4:	str	r2, [r4, #16]
   25ca8:	str	r9, [r4, #20]
   25cac:	str	r3, [r4, #28]
   25cb0:	ldr	r3, [sp, #4]
   25cb4:	str	r0, [r0, #2944]	; 0xb80
   25cb8:	str	r0, [r0, #2948]	; 0xb84
   25cbc:	str	r3, [r0, #2952]	; 0xb88
   25cc0:	b	25b90 <flatcc_emitter@@Base+0x240>
   25cc4:	ldr	r7, [r4, #8]
   25cc8:	sub	r3, r3, r0
   25ccc:	str	r3, [r4, #12]
   25cd0:	sub	r7, r7, r0
   25cd4:	str	r7, [r4, #8]
   25cd8:	b	25a44 <flatcc_emitter@@Base+0xf4>

00025cdc <flatcc_emitter_copy_buffer@@Base>:
   25cdc:	ldr	r3, [r0, #24]
   25ce0:	strd	r4, [sp, #-16]!
   25ce4:	str	r6, [sp, #8]
   25ce8:	str	lr, [sp, #12]
   25cec:	cmp	r3, r2
   25cf0:	movhi	r5, #0
   25cf4:	bhi	25d74 <flatcc_emitter_copy_buffer@@Base+0x98>
   25cf8:	ldr	r5, [r0]
   25cfc:	mov	r6, r0
   25d00:	cmp	r5, #0
   25d04:	beq	25d74 <flatcc_emitter_copy_buffer@@Base+0x98>
   25d08:	ldr	r2, [r6, #4]
   25d0c:	mov	r0, r1
   25d10:	ldr	r1, [r6, #8]
   25d14:	cmp	r5, r2
   25d18:	beq	25d88 <flatcc_emitter_copy_buffer@@Base+0xac>
   25d1c:	ldr	r2, [r6, #12]
   25d20:	rsb	r2, r2, #2944	; 0xb80
   25d24:	add	r5, r0, r2
   25d28:	bl	12580 <memcpy@plt>
   25d2c:	ldrd	r2, [r6]
   25d30:	ldr	r4, [r2, #2944]	; 0xb80
   25d34:	cmp	r4, r3
   25d38:	beq	25d60 <flatcc_emitter_copy_buffer@@Base+0x84>
   25d3c:	mov	r2, #2944	; 0xb80
   25d40:	mov	r1, r4
   25d44:	mov	r0, r5
   25d48:	add	r5, r5, r2
   25d4c:	bl	12580 <memcpy@plt>
   25d50:	ldr	r3, [r6, #4]
   25d54:	ldr	r4, [r4, #2944]	; 0xb80
   25d58:	cmp	r3, r4
   25d5c:	bne	25d3c <flatcc_emitter_copy_buffer@@Base+0x60>
   25d60:	ldr	r2, [r6, #20]
   25d64:	mov	r1, r4
   25d68:	mov	r0, r5
   25d6c:	rsb	r2, r2, #2944	; 0xb80
   25d70:	bl	12580 <memcpy@plt>
   25d74:	mov	r0, r5
   25d78:	ldrd	r4, [sp]
   25d7c:	ldr	r6, [sp, #8]
   25d80:	add	sp, sp, #12
   25d84:	pop	{pc}		; (ldr pc, [sp], #4)
   25d88:	mov	r2, r3
   25d8c:	mov	r5, r0
   25d90:	bl	12580 <memcpy@plt>
   25d94:	b	25d74 <flatcc_emitter_copy_buffer@@Base+0x98>
   25d98:	ldr	r3, [pc, #32]	; 25dc0 <flatcc_emitter_copy_buffer@@Base+0xe4>
   25d9c:	mov	r2, #260	; 0x104
   25da0:	str	r4, [sp, #-8]!
   25da4:	ldr	r1, [pc, #24]	; 25dc4 <flatcc_emitter_copy_buffer@@Base+0xe8>
   25da8:	str	lr, [sp, #4]
   25dac:	ldr	r0, [pc, #20]	; 25dc8 <flatcc_emitter_copy_buffer@@Base+0xec>
   25db0:	add	r3, pc, r3
   25db4:	add	r1, pc, r1
   25db8:	add	r0, pc, r0
   25dbc:	bl	1267c <__assert_fail@plt>
   25dc0:	andeq	r5, r0, r8, lsl r9
   25dc4:	andeq	r6, r0, r0, lsr #2
   25dc8:	andeq	r6, r0, ip, lsl #3

00025dcc <grisu3_diy_fp_encode_double@@Base>:
   25dcc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   25dd0:	sub	r2, r2, r3
   25dd4:	strd	r6, [sp, #8]
   25dd8:	strd	r8, [sp, #16]
   25ddc:	strd	sl, [sp, #24]
   25de0:	str	lr, [sp, #32]
   25de4:	sub	sp, sp, #52	; 0x34
   25de8:	ldr	lr, [sp, #88]	; 0x58
   25dec:	strd	r0, [sp]
   25df0:	cmp	lr, #0
   25df4:	movne	lr, #4
   25df8:	orrs	r1, r0, r1
   25dfc:	beq	262a4 <grisu3_diy_fp_encode_double@@Base+0x4d8>
   25e00:	ldr	r1, [sp, #4]
   25e04:	mov	ip, #0
   25e08:	mov	r6, ip
   25e0c:	mov	r4, ip
   25e10:	movt	r6, #65472	; 0xffc0
   25e14:	and	r5, r1, r6
   25e18:	orrs	r1, r4, r5
   25e1c:	bne	25e64 <grisu3_diy_fp_encode_double@@Base+0x98>
   25e20:	ldrd	r0, [sp]
   25e24:	mov	r5, ip
   25e28:	mvn	r7, #9
   25e2c:	str	r6, [sp, #8]
   25e30:	lsl	r4, r1, #10
   25e34:	mov	sl, r5
   25e38:	mov	ip, r7
   25e3c:	lsl	r6, r0, #10
   25e40:	sub	r7, r7, #10
   25e44:	orr	r4, r4, r0, lsr #22
   25e48:	mov	r0, r6
   25e4c:	mov	r1, r4
   25e50:	ldr	r4, [sp, #8]
   25e54:	and	fp, r1, r4
   25e58:	orrs	r4, sl, fp
   25e5c:	beq	25e30 <grisu3_diy_fp_encode_double@@Base+0x64>
   25e60:	strd	r0, [sp]
   25e64:	ldrd	r6, [sp]
   25e68:	cmp	r6, #0
   25e6c:	sbcs	r1, r7, #0
   25e70:	blt	25ea0 <grisu3_diy_fp_encode_double@@Base+0xd4>
   25e74:	sub	r4, ip, #1
   25e78:	mov	r0, r6
   25e7c:	mov	r1, r7
   25e80:	adds	r0, r0, r0
   25e84:	mov	ip, r4
   25e88:	adc	r1, r1, r1
   25e8c:	cmp	r0, #0
   25e90:	sbcs	r5, r1, #0
   25e94:	sub	r4, r4, #1
   25e98:	bge	25e80 <grisu3_diy_fp_encode_double@@Base+0xb4>
   25e9c:	strd	r0, [sp]
   25ea0:	rsb	r4, ip, #0
   25ea4:	cmn	r2, #348	; 0x15c
   25ea8:	lsl	fp, lr, r4
   25eac:	blt	26304 <grisu3_diy_fp_encode_double@@Base+0x538>
   25eb0:	cmp	r2, #348	; 0x15c
   25eb4:	bge	262c4 <grisu3_diy_fp_encode_double@@Base+0x4f8>
   25eb8:	ldr	r4, [pc, #1228]	; 2638c <grisu3_diy_fp_encode_double@@Base+0x5c0>
   25ebc:	add	lr, r2, #348	; 0x15c
   25ec0:	asr	lr, lr, #3
   25ec4:	add	r4, pc, r4
   25ec8:	add	lr, r4, lr, lsl #4
   25ecc:	ldrsh	r1, [lr, #64]	; 0x40
   25ed0:	ldrsh	r5, [lr, #66]	; 0x42
   25ed4:	str	r1, [sp, #32]
   25ed8:	ldr	r1, [lr, #56]	; 0x38
   25edc:	cmp	r2, r5
   25ee0:	str	r1, [sp, #8]
   25ee4:	ldr	r1, [lr, #60]	; 0x3c
   25ee8:	str	r1, [sp, #36]	; 0x24
   25eec:	blt	262e8 <grisu3_diy_fp_encode_double@@Base+0x51c>
   25ef0:	add	lr, r5, #7
   25ef4:	cmp	r2, lr
   25ef8:	bgt	262a8 <grisu3_diy_fp_encode_double@@Base+0x4dc>
   25efc:	cmp	r2, r5
   25f00:	beq	25fa0 <grisu3_diy_fp_encode_double@@Base+0x1d4>
   25f04:	sub	r2, r2, r5
   25f08:	sub	r2, r2, #1
   25f0c:	cmp	r2, #6
   25f10:	bhi	26328 <grisu3_diy_fp_encode_double@@Base+0x55c>
   25f14:	ldr	r4, [pc, #1140]	; 26390 <grisu3_diy_fp_encode_double@@Base+0x5c4>
   25f18:	add	r3, r3, #1
   25f1c:	mov	lr, #0
   25f20:	add	r0, r3, r2
   25f24:	add	r4, pc, r4
   25f28:	add	r3, r4, r2, lsl #4
   25f2c:	ldr	r2, [r4, r2, lsl #4]
   25f30:	ldrd	r4, [sp]
   25f34:	ldmib	r3, {r1, sl}
   25f38:	umull	r6, r7, r5, r2
   25f3c:	umull	r2, r3, r4, r2
   25f40:	ldr	r2, [sp]
   25f44:	add	ip, ip, sl
   25f48:	mov	r5, r7
   25f4c:	add	ip, ip, #64	; 0x40
   25f50:	adds	r4, r3, r6
   25f54:	adc	sl, lr, lr
   25f58:	adds	r4, r4, #-2147483648	; 0x80000000
   25f5c:	umull	r6, r7, r2, r1
   25f60:	adc	sl, sl, lr
   25f64:	adds	r4, r4, r6
   25f68:	mov	r6, lr
   25f6c:	adc	sl, sl, lr
   25f70:	adds	r3, r5, r7
   25f74:	str	r3, [sp, #16]
   25f78:	adc	r3, lr, lr
   25f7c:	ldr	lr, [sp, #4]
   25f80:	str	r3, [sp, #20]
   25f84:	ldrd	r2, [sp, #16]
   25f88:	umlal	r2, r3, r1, lr
   25f8c:	adds	r1, sl, r2
   25f90:	adc	r3, r6, r3
   25f94:	cmp	r0, #19
   25f98:	addgt	fp, fp, #4
   25f9c:	stm	sp, {r1, r3}
   25fa0:	ldrd	r0, [sp]
   25fa4:	mov	lr, #0
   25fa8:	ldr	r2, [sp, #8]
   25fac:	umull	r2, r3, r1, r2
   25fb0:	mov	r1, r0
   25fb4:	strd	r2, [sp, #16]
   25fb8:	mov	r2, r0
   25fbc:	ldr	r0, [sp, #8]
   25fc0:	ldr	r3, [sp, #32]
   25fc4:	umull	r0, r1, r1, r0
   25fc8:	add	ip, ip, r3
   25fcc:	mov	r3, r2
   25fd0:	ldr	r2, [sp, #16]
   25fd4:	strd	r0, [sp, #8]
   25fd8:	add	r5, ip, #64	; 0x40
   25fdc:	ldr	r0, [sp, #12]
   25fe0:	ldr	r1, [sp, #36]	; 0x24
   25fe4:	adds	r2, r0, r2
   25fe8:	adc	r4, lr, lr
   25fec:	adds	r2, r2, #-2147483648	; 0x80000000
   25ff0:	umull	r6, r7, r3, r1
   25ff4:	ldr	r3, [sp, #20]
   25ff8:	adc	r4, r4, lr
   25ffc:	adds	r2, r2, r6
   26000:	ldr	r2, [sp, #4]
   26004:	adc	r4, r4, lr
   26008:	adds	r3, r3, r7
   2600c:	str	r3, [sp, #24]
   26010:	adc	r3, lr, lr
   26014:	str	r3, [sp, #28]
   26018:	ldrd	r6, [sp, #24]
   2601c:	umlal	r6, r7, r1, r2
   26020:	adds	r8, r4, r6
   26024:	adc	r9, lr, r7
   26028:	cmp	fp, lr
   2602c:	movne	r2, #9
   26030:	moveq	r2, #8
   26034:	orrs	r3, r8, r9
   26038:	add	r2, fp, r2
   2603c:	beq	262a4 <grisu3_diy_fp_encode_double@@Base+0x4d8>
   26040:	mov	r3, lr
   26044:	mov	r6, lr
   26048:	movt	r3, #65472	; 0xffc0
   2604c:	and	r7, r9, r3
   26050:	orrs	r1, r6, r7
   26054:	bne	2628c <grisu3_diy_fp_encode_double@@Base+0x4c0>
   26058:	add	ip, ip, #54	; 0x36
   2605c:	mov	r1, r3
   26060:	mov	r7, r5
   26064:	lsl	r0, r9, #10
   26068:	mov	r4, lr
   2606c:	mov	r3, ip
   26070:	lsl	r6, r8, #10
   26074:	sub	ip, ip, #10
   26078:	orr	r0, r0, r8, lsr #22
   2607c:	mov	r8, r6
   26080:	and	r5, r0, r1
   26084:	mov	r9, r0
   26088:	orrs	r0, r4, r5
   2608c:	beq	26064 <grisu3_diy_fp_encode_double@@Base+0x298>
   26090:	mov	r5, r7
   26094:	cmp	r8, #0
   26098:	sbcs	r1, r9, #0
   2609c:	blt	260c0 <grisu3_diy_fp_encode_double@@Base+0x2f4>
   260a0:	sub	r1, r3, #1
   260a4:	adds	r8, r8, r8
   260a8:	mov	r3, r1
   260ac:	adc	r9, r9, r9
   260b0:	cmp	r8, #0
   260b4:	sbcs	r0, r9, #0
   260b8:	sub	r1, r1, #1
   260bc:	bge	260a4 <grisu3_diy_fp_encode_double@@Base+0x2d8>
   260c0:	movw	r1, #64526	; 0xfc0e
   260c4:	movt	r1, #65535	; 0xffff
   260c8:	add	r0, r3, #64	; 0x40
   260cc:	sub	r5, r5, r3
   260d0:	cmp	r0, r1
   260d4:	lsl	r2, r2, r5
   260d8:	blt	26218 <grisu3_diy_fp_encode_double@@Base+0x44c>
   260dc:	add	ip, r2, #4
   260e0:	mov	r1, #4
   260e4:	cmp	ip, #0
   260e8:	mov	r0, #0
   260ec:	bgt	26138 <grisu3_diy_fp_encode_double@@Base+0x36c>
   260f0:	adds	r8, r8, #1
   260f4:	mov	r4, #0
   260f8:	adc	r9, r9, #0
   260fc:	and	r5, r9, #2097152	; 0x200000
   26100:	orrs	lr, r4, r5
   26104:	beq	26120 <grisu3_diy_fp_encode_double@@Base+0x354>
   26108:	lsr	lr, r8, #1
   2610c:	add	r3, r3, #1
   26110:	lsr	r4, r9, #1
   26114:	orr	lr, lr, r9, lsl #31
   26118:	mov	r9, r4
   2611c:	mov	r8, lr
   26120:	movw	r5, #65535	; 0xffff
   26124:	movt	r5, #31
   26128:	mvn	r4, #0
   2612c:	cmp	r9, r5
   26130:	cmpeq	r8, r4
   26134:	bls	26170 <grisu3_diy_fp_encode_double@@Base+0x3a4>
   26138:	movw	r5, #65535	; 0xffff
   2613c:	movt	r5, #31
   26140:	add	r6, r3, #1
   26144:	mvn	r4, #0
   26148:	lsr	lr, r8, #1
   2614c:	mov	r3, r6
   26150:	add	r6, r6, #1
   26154:	lsr	r7, r9, #1
   26158:	orr	lr, lr, r9, lsl #31
   2615c:	cmp	r7, r5
   26160:	mov	r9, r7
   26164:	cmpeq	lr, r4
   26168:	mov	r8, lr
   2616c:	bhi	26148 <grisu3_diy_fp_encode_double@@Base+0x37c>
   26170:	movw	lr, #64462	; 0xfbce
   26174:	movt	lr, #65535	; 0xffff
   26178:	cmp	r3, lr
   2617c:	mov	r6, #0
   26180:	movlt	r7, #0
   26184:	blt	261e0 <grisu3_diy_fp_encode_double@@Base+0x414>
   26188:	mov	r4, r6
   2618c:	and	r5, r9, #1048576	; 0x100000
   26190:	beq	261c8 <grisu3_diy_fp_encode_double@@Base+0x3fc>
   26194:	orrs	r7, r4, r5
   26198:	beq	261ac <grisu3_diy_fp_encode_double@@Base+0x3e0>
   2619c:	b	26294 <grisu3_diy_fp_encode_double@@Base+0x4c8>
   261a0:	orrs	sl, r4, r5
   261a4:	bne	26274 <grisu3_diy_fp_encode_double@@Base+0x4a8>
   261a8:	mov	r3, r7
   261ac:	adds	r8, r8, r8
   261b0:	sub	r7, r3, #1
   261b4:	adc	r9, r9, r9
   261b8:	cmp	r7, lr
   261bc:	mov	r4, r6
   261c0:	and	r5, r9, #1048576	; 0x100000
   261c4:	bne	261a0 <grisu3_diy_fp_encode_double@@Base+0x3d4>
   261c8:	orrs	r3, r4, r5
   261cc:	movne	r4, #0
   261d0:	movne	r5, #1048576	; 0x100000
   261d4:	ubfx	r3, r9, #0, #20
   261d8:	orr	r6, r8, r4
   261dc:	orr	r7, r3, r5
   261e0:	ldr	r3, [sp, #92]	; 0x5c
   261e4:	sub	r2, r1, r2
   261e8:	cmp	r0, ip
   261ec:	cmplt	r2, r0
   261f0:	movge	r0, #1
   261f4:	movlt	r0, #0
   261f8:	strd	r6, [r3]
   261fc:	add	sp, sp, #52	; 0x34
   26200:	ldrd	r4, [sp]
   26204:	ldrd	r6, [sp, #8]
   26208:	ldrd	r8, [sp, #16]
   2620c:	ldrd	sl, [sp, #24]
   26210:	add	sp, sp, #32
   26214:	pop	{pc}		; (ldr pc, [sp], #4)
   26218:	mvn	r1, #1072	; 0x430
   2621c:	cmp	r0, r1
   26220:	blt	26284 <grisu3_diy_fp_encode_double@@Base+0x4b8>
   26224:	add	r0, r3, #1136	; 0x470
   26228:	add	r0, r0, #2
   2622c:	rsb	lr, r0, #64	; 0x40
   26230:	cmp	lr, #60	; 0x3c
   26234:	rsbgt	r0, r0, #2
   26238:	ble	26348 <grisu3_diy_fp_encode_double@@Base+0x57c>
   2623c:	asr	r2, r2, r0
   26240:	add	r3, r3, r0
   26244:	mov	lr, #62	; 0x3e
   26248:	lsr	r1, r9, r0
   2624c:	mov	r9, #0
   26250:	add	r3, r3, #62	; 0x3e
   26254:	add	r2, r2, #9
   26258:	mov	r0, r9
   2625c:	lsr	r8, r1, #30
   26260:	mov	ip, r2
   26264:	mov	r1, r9
   26268:	cmp	lr, ip
   2626c:	blt	26120 <grisu3_diy_fp_encode_double@@Base+0x354>
   26270:	b	260f0 <grisu3_diy_fp_encode_double@@Base+0x324>
   26274:	add	r3, r3, #1072	; 0x430
   26278:	add	r3, r3, #2
   2627c:	lsl	r5, r3, #20
   26280:	b	261d4 <grisu3_diy_fp_encode_double@@Base+0x408>
   26284:	mov	r0, #2
   26288:	b	2623c <grisu3_diy_fp_encode_double@@Base+0x470>
   2628c:	mov	r3, r5
   26290:	b	26094 <grisu3_diy_fp_encode_double@@Base+0x2c8>
   26294:	add	r3, r3, #1072	; 0x430
   26298:	add	r3, r3, #3
   2629c:	lsl	r5, r3, #20
   262a0:	b	261d4 <grisu3_diy_fp_encode_double@@Base+0x408>
   262a4:	bl	25d98 <flatcc_emitter_copy_buffer@@Base+0xbc>
   262a8:	ldr	r1, [pc, #228]	; 26394 <grisu3_diy_fp_encode_double@@Base+0x5c8>
   262ac:	add	r3, r4, #24
   262b0:	mov	r2, #89	; 0x59
   262b4:	ldr	r0, [pc, #220]	; 26398 <grisu3_diy_fp_encode_double@@Base+0x5cc>
   262b8:	add	r1, pc, r1
   262bc:	add	r0, pc, r0
   262c0:	bl	1267c <__assert_fail@plt>
   262c4:	ldr	r3, [pc, #208]	; 2639c <grisu3_diy_fp_encode_double@@Base+0x5d0>
   262c8:	mov	r2, #81	; 0x51
   262cc:	ldr	r1, [pc, #204]	; 263a0 <grisu3_diy_fp_encode_double@@Base+0x5d4>
   262d0:	ldr	r0, [pc, #204]	; 263a4 <grisu3_diy_fp_encode_double@@Base+0x5d8>
   262d4:	add	r3, pc, r3
   262d8:	add	r3, r3, #24
   262dc:	add	r1, pc, r1
   262e0:	add	r0, pc, r0
   262e4:	bl	1267c <__assert_fail@plt>
   262e8:	ldr	r1, [pc, #184]	; 263a8 <grisu3_diy_fp_encode_double@@Base+0x5dc>
   262ec:	add	r3, r4, #24
   262f0:	mov	r2, #88	; 0x58
   262f4:	ldr	r0, [pc, #176]	; 263ac <grisu3_diy_fp_encode_double@@Base+0x5e0>
   262f8:	add	r1, pc, r1
   262fc:	add	r0, pc, r0
   26300:	bl	1267c <__assert_fail@plt>
   26304:	ldr	r3, [pc, #164]	; 263b0 <grisu3_diy_fp_encode_double@@Base+0x5e4>
   26308:	mov	r2, #80	; 0x50
   2630c:	ldr	r1, [pc, #160]	; 263b4 <grisu3_diy_fp_encode_double@@Base+0x5e8>
   26310:	ldr	r0, [pc, #160]	; 263b8 <grisu3_diy_fp_encode_double@@Base+0x5ec>
   26314:	add	r3, pc, r3
   26318:	add	r3, r3, #24
   2631c:	add	r1, pc, r1
   26320:	add	r0, pc, r0
   26324:	bl	1267c <__assert_fail@plt>
   26328:	ldr	r1, [pc, #140]	; 263bc <grisu3_diy_fp_encode_double@@Base+0x5f0>
   2632c:	add	r3, r4, #1440	; 0x5a0
   26330:	mov	r2, #185	; 0xb9
   26334:	add	r3, r3, #8
   26338:	ldr	r0, [pc, #128]	; 263c0 <grisu3_diy_fp_encode_double@@Base+0x5f4>
   2633c:	add	r1, pc, r1
   26340:	add	r0, pc, r0
   26344:	bl	1267c <__assert_fail@plt>
   26348:	lsr	ip, r8, lr
   2634c:	rsb	r1, lr, #32
   26350:	rsb	r0, r0, #63	; 0x3f
   26354:	sub	r5, lr, #32
   26358:	mov	r4, #1
   2635c:	orr	ip, ip, r9, lsl r1
   26360:	mov	r1, #8
   26364:	add	r3, r3, lr
   26368:	and	r4, r8, r4, lsl r0
   2636c:	orr	ip, ip, r9, lsr r5
   26370:	lsl	r1, r1, r0
   26374:	lsr	r5, r9, lr
   26378:	mov	r8, ip
   2637c:	lsl	r0, r4, #3
   26380:	add	ip, r2, r1
   26384:	mov	r9, r5
   26388:	b	26268 <grisu3_diy_fp_encode_double@@Base+0x49c>
   2638c:	andeq	r5, r0, r4, lsl #16
   26390:	andeq	r7, r1, r4, lsr r4
   26394:	muleq	r0, r8, ip
   26398:	andeq	r5, r0, r0, ror #26
   2639c:	strdeq	r5, [r0], -r4
   263a0:	andeq	r5, r0, r4, ror ip
   263a4:	andeq	r5, r0, r0, lsl #26
   263a8:	andeq	r5, r0, r8, asr ip
   263ac:	andeq	r5, r0, r0, lsl sp
   263b0:			; <UNDEFINED> instruction: 0x000053b4
   263b4:	andeq	r5, r0, r4, lsr ip
   263b8:	andeq	r5, r0, r0, lsr #25
   263bc:	andeq	r5, r0, r4, lsl ip
   263c0:	strdeq	r5, [r0], -r8
   263c4:	cmp	r1, #1000	; 0x3e8
   263c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   263cc:	mov	r4, #0
   263d0:	addgt	ip, r0, #1000	; 0x3e8
   263d4:	addle	r1, r1, #1
   263d8:	strd	r6, [sp, #8]
   263dc:	addle	ip, r0, r1
   263e0:	addgt	ip, ip, #1
   263e4:	strd	r8, [sp, #16]
   263e8:	mov	r5, #0
   263ec:	strd	sl, [sp, #24]
   263f0:	cmp	ip, r0
   263f4:	str	lr, [sp, #32]
   263f8:	sub	sp, sp, #52	; 0x34
   263fc:	moveq	r6, ip
   26400:	strd	r4, [r2]
   26404:	str	r2, [sp, #16]
   26408:	beq	265a0 <grisu3_diy_fp_encode_double@@Base+0x7d4>
   2640c:	ldrb	r4, [r0]
   26410:	cmp	r4, #45	; 0x2d
   26414:	beq	26698 <grisu3_diy_fp_encode_double@@Base+0x8cc>
   26418:	cmp	r4, #48	; 0x30
   2641c:	beq	265c0 <grisu3_diy_fp_encode_double@@Base+0x7f4>
   26420:	sub	r3, r4, #49	; 0x31
   26424:	cmp	r3, #8
   26428:	bhi	26748 <grisu3_diy_fp_encode_double@@Base+0x97c>
   2642c:	mov	r2, #0
   26430:	mov	r3, r0
   26434:	str	r2, [sp, #20]
   26438:	add	r7, r3, #1
   2643c:	sub	r4, r4, #48	; 0x30
   26440:	cmp	ip, r7
   26444:	asr	r5, r4, #31
   26448:	beq	26610 <grisu3_diy_fp_encode_double@@Base+0x844>
   2644c:	ldrb	r1, [r3, #1]
   26450:	sub	r3, r1, #48	; 0x30
   26454:	cmp	r3, #9
   26458:	movhi	sl, #0
   2645c:	movhi	lr, sl
   26460:	bhi	26d98 <grisu3_diy_fp_encode_double@@Base+0xfcc>
   26464:	add	fp, pc, #996	; 0x3e4
   26468:	ldrd	sl, [fp]
   2646c:	add	lr, r7, #1
   26470:	b	26480 <grisu3_diy_fp_encode_double@@Base+0x6b4>
   26474:	cmp	r5, fp
   26478:	cmpeq	r4, sl
   2647c:	bhi	26618 <grisu3_diy_fp_encode_double@@Base+0x84c>
   26480:	lsl	r2, r5, #2
   26484:	mov	r6, lr
   26488:	lsl	r3, r4, #2
   2648c:	orr	r2, r2, r4, lsr #30
   26490:	adds	r3, r3, r4
   26494:	adc	r2, r2, r5
   26498:	adds	r8, r3, r3
   2649c:	adc	r9, r2, r2
   264a0:	adds	r2, r8, r1
   264a4:	adc	r3, r9, #0
   264a8:	subs	r4, r2, #48	; 0x30
   264ac:	sbc	r5, r3, #0
   264b0:	cmp	ip, lr
   264b4:	beq	26610 <grisu3_diy_fp_encode_double@@Base+0x844>
   264b8:	ldrb	r1, [lr]
   264bc:	add	lr, lr, #1
   264c0:	sub	r3, r1, #48	; 0x30
   264c4:	cmp	r3, #9
   264c8:	bls	26474 <grisu3_diy_fp_encode_double@@Base+0x6a8>
   264cc:	mov	lr, #0
   264d0:	sub	sl, r6, r7
   264d4:	mov	r7, lr
   264d8:	sub	r3, r1, #49	; 0x31
   264dc:	cmp	r3, #8
   264e0:	bls	266d8 <grisu3_diy_fp_encode_double@@Base+0x90c>
   264e4:	cmp	r1, #46	; 0x2e
   264e8:	beq	26750 <grisu3_diy_fp_encode_double@@Base+0x984>
   264ec:	orr	r1, r1, #32
   264f0:	add	r7, r7, sl
   264f4:	cmp	r1, #101	; 0x65
   264f8:	beq	26908 <grisu3_diy_fp_encode_double@@Base+0xb3c>
   264fc:	orrs	r3, r4, r5
   26500:	mov	r9, r0
   26504:	ldr	r8, [sp, #16]
   26508:	moveq	r2, #1
   2650c:	movne	r2, #0
   26510:	cmn	r7, #324	; 0x144
   26514:	movge	r3, #0
   26518:	movlt	r3, #1
   2651c:	orrs	r3, r2, r3
   26520:	bne	2667c <grisu3_diy_fp_encode_double@@Base+0x8b0>
   26524:	movw	r3, #310	; 0x136
   26528:	cmp	r7, r3
   2652c:	bgt	26728 <grisu3_diy_fp_encode_double@@Base+0x95c>
   26530:	movw	r3, #65535	; 0xffff
   26534:	movt	r3, #31
   26538:	cmp	r5, r3
   2653c:	mvn	r2, #0
   26540:	cmpeq	r4, r2
   26544:	movls	r3, #1
   26548:	movhi	r3, #0
   2654c:	cmp	r7, #22
   26550:	movhi	r3, #0
   26554:	andls	r3, r3, #1
   26558:	cmp	r3, #0
   2655c:	bne	26a24 <grisu3_diy_fp_encode_double@@Base+0xc58>
   26560:	mov	r3, sl
   26564:	mov	r2, r7
   26568:	str	lr, [sp]
   2656c:	mov	r0, r4
   26570:	mov	r1, r5
   26574:	str	r8, [sp, #4]
   26578:	bl	25dcc <grisu3_diy_fp_encode_double@@Base>
   2657c:	cmp	r0, #0
   26580:	bne	2667c <grisu3_diy_fp_encode_double@@Base+0x8b0>
   26584:	mov	r0, r9
   26588:	add	r1, sp, #44	; 0x2c
   2658c:	bl	12634 <strtod@plt>
   26590:	ldr	r3, [sp, #44]	; 0x2c
   26594:	vstr	d0, [r8]
   26598:	cmp	r6, r3
   2659c:	movcs	r6, r3
   265a0:	mov	r0, r6
   265a4:	add	sp, sp, #52	; 0x34
   265a8:	ldrd	r4, [sp]
   265ac:	ldrd	r6, [sp, #8]
   265b0:	ldrd	r8, [sp, #16]
   265b4:	ldrd	sl, [sp, #24]
   265b8:	add	sp, sp, #32
   265bc:	pop	{pc}		; (ldr pc, [sp], #4)
   265c0:	mov	r2, #0
   265c4:	mov	r3, r0
   265c8:	str	r2, [sp, #20]
   265cc:	add	r7, r3, #1
   265d0:	cmp	ip, r7
   265d4:	beq	26610 <grisu3_diy_fp_encode_double@@Base+0x844>
   265d8:	ldrb	r1, [r3, #1]
   265dc:	orr	r2, r1, #32
   265e0:	cmp	r2, #120	; 0x78
   265e4:	beq	26748 <grisu3_diy_fp_encode_double@@Base+0x97c>
   265e8:	cmp	r1, #48	; 0x30
   265ec:	addeq	r3, r3, #2
   265f0:	beq	26604 <grisu3_diy_fp_encode_double@@Base+0x838>
   265f4:	b	269ac <grisu3_diy_fp_encode_double@@Base+0xbe0>
   265f8:	ldrb	r1, [r3], #1
   265fc:	cmp	r1, #48	; 0x30
   26600:	bne	269ac <grisu3_diy_fp_encode_double@@Base+0xbe0>
   26604:	cmp	r3, ip
   26608:	mov	r7, r3
   2660c:	bne	265f8 <grisu3_diy_fp_encode_double@@Base+0x82c>
   26610:	mov	r6, #0
   26614:	b	265a0 <grisu3_diy_fp_encode_double@@Base+0x7d4>
   26618:	cmp	r1, #52	; 0x34
   2661c:	sub	sl, r6, r7
   26620:	movls	r3, #0
   26624:	movhi	r3, #1
   26628:	adds	r4, r4, r3
   2662c:	adc	r5, r5, #0
   26630:	cmp	r1, #48	; 0x30
   26634:	movne	r7, r6
   26638:	movne	lr, #1
   2663c:	bne	26d98 <grisu3_diy_fp_encode_double@@Base+0xfcc>
   26640:	add	r3, r6, #1
   26644:	mov	r7, #0
   26648:	b	2665c <grisu3_diy_fp_encode_double@@Base+0x890>
   2664c:	ldrb	r1, [r3]
   26650:	add	r3, r3, #1
   26654:	cmp	r1, #48	; 0x30
   26658:	bne	266c8 <grisu3_diy_fp_encode_double@@Base+0x8fc>
   2665c:	cmp	ip, r3
   26660:	mov	r6, r3
   26664:	add	r7, r7, #1
   26668:	bne	2664c <grisu3_diy_fp_encode_double@@Base+0x880>
   2666c:	b	26610 <grisu3_diy_fp_encode_double@@Base+0x844>
   26670:	vldr	d6, [pc, #480]	; 26858 <grisu3_diy_fp_encode_double@@Base+0xa8c>
   26674:	vmul.f64	d7, d7, d6
   26678:	vstr	d7, [r8]
   2667c:	ldr	r3, [sp, #20]
   26680:	cmp	r3, #0
   26684:	beq	265a0 <grisu3_diy_fp_encode_double@@Base+0x7d4>
   26688:	vldr	d7, [r8]
   2668c:	vneg.f64	d7, d7
   26690:	vstr	d7, [r8]
   26694:	b	265a0 <grisu3_diy_fp_encode_double@@Base+0x7d4>
   26698:	add	r3, r0, #1
   2669c:	cmp	ip, r3
   266a0:	beq	26610 <grisu3_diy_fp_encode_double@@Base+0x844>
   266a4:	ldrb	r4, [r0, #1]
   266a8:	cmp	r4, #48	; 0x30
   266ac:	beq	2673c <grisu3_diy_fp_encode_double@@Base+0x970>
   266b0:	sub	r2, r4, #49	; 0x31
   266b4:	cmp	r2, #8
   266b8:	bhi	26610 <grisu3_diy_fp_encode_double@@Base+0x844>
   266bc:	mov	r2, #1
   266c0:	str	r2, [sp, #20]
   266c4:	b	26438 <grisu3_diy_fp_encode_double@@Base+0x66c>
   266c8:	sub	r3, r1, #49	; 0x31
   266cc:	mov	lr, #1
   266d0:	cmp	r3, #8
   266d4:	bhi	264e4 <grisu3_diy_fp_encode_double@@Base+0x718>
   266d8:	add	r3, r6, #1
   266dc:	add	lr, r7, #1
   266e0:	cmp	ip, r3
   266e4:	beq	26610 <grisu3_diy_fp_encode_double@@Base+0x844>
   266e8:	ldrb	r1, [r6, #1]
   266ec:	sub	r2, r1, #48	; 0x30
   266f0:	cmp	r2, #9
   266f4:	bhi	26d7c <grisu3_diy_fp_encode_double@@Base+0xfb0>
   266f8:	sub	r8, r7, r6
   266fc:	add	r3, r6, #2
   26700:	cmp	ip, r3
   26704:	add	r7, r8, r3
   26708:	mov	r6, r3
   2670c:	beq	26610 <grisu3_diy_fp_encode_double@@Base+0x844>
   26710:	ldrb	r1, [r3], #1
   26714:	sub	r2, r1, #48	; 0x30
   26718:	cmp	r2, #9
   2671c:	bls	26700 <grisu3_diy_fp_encode_double@@Base+0x934>
   26720:	mov	lr, #1
   26724:	b	264e4 <grisu3_diy_fp_encode_double@@Base+0x718>
   26728:	mov	r2, #0
   2672c:	mov	r3, #0
   26730:	movt	r3, #32752	; 0x7ff0
   26734:	strd	r2, [r8]
   26738:	b	2667c <grisu3_diy_fp_encode_double@@Base+0x8b0>
   2673c:	mov	r2, #1
   26740:	str	r2, [sp, #20]
   26744:	b	265cc <grisu3_diy_fp_encode_double@@Base+0x800>
   26748:	mov	r6, r0
   2674c:	b	265a0 <grisu3_diy_fp_encode_double@@Base+0x7d4>
   26750:	ldrb	r9, [r6, #1]
   26754:	add	fp, r6, #1
   26758:	sub	r3, r9, #48	; 0x30
   2675c:	cmp	r3, #9
   26760:	bhi	26610 <grisu3_diy_fp_encode_double@@Base+0x844>
   26764:	cmp	ip, fp
   26768:	beq	26610 <grisu3_diy_fp_encode_double@@Base+0x844>
   2676c:	add	r3, pc, #220	; 0xdc
   26770:	ldrd	r2, [r3]
   26774:	cmp	r5, r3
   26778:	cmpeq	r4, r2
   2677c:	bhi	26d88 <grisu3_diy_fp_encode_double@@Base+0xfbc>
   26780:	add	r7, r6, r7
   26784:	add	r6, r6, #2
   26788:	strd	r2, [sp, #8]
   2678c:	add	r1, r7, #1
   26790:	str	fp, [sp, #24]
   26794:	mov	fp, r6
   26798:	str	r0, [sp, #28]
   2679c:	b	267b0 <grisu3_diy_fp_encode_double@@Base+0x9e4>
   267a0:	ldrd	r2, [sp, #8]
   267a4:	cmp	r5, r3
   267a8:	cmpeq	r4, r2
   267ac:	bhi	26d3c <grisu3_diy_fp_encode_double@@Base+0xf70>
   267b0:	lsl	r2, r5, #2
   267b4:	mov	r8, fp
   267b8:	sub	r0, r1, fp
   267bc:	lsl	r3, r4, #2
   267c0:	orr	r2, r2, r4, lsr #30
   267c4:	adds	r3, r3, r4
   267c8:	adc	r2, r2, r5
   267cc:	adds	r6, r3, r3
   267d0:	adc	r7, r2, r2
   267d4:	adds	r2, r6, r9
   267d8:	adc	r3, r7, #0
   267dc:	subs	r4, r2, #48	; 0x30
   267e0:	sbc	r5, r3, #0
   267e4:	cmp	ip, fp
   267e8:	beq	26610 <grisu3_diy_fp_encode_double@@Base+0x844>
   267ec:	ldrb	r9, [fp]
   267f0:	add	fp, fp, #1
   267f4:	sub	r3, r9, #48	; 0x30
   267f8:	cmp	r3, #9
   267fc:	bls	267a0 <grisu3_diy_fp_encode_double@@Base+0x9d4>
   26800:	ldr	fp, [sp, #24]
   26804:	mov	r7, r0
   26808:	ldr	r0, [sp, #28]
   2680c:	sub	fp, r8, fp
   26810:	add	sl, sl, fp
   26814:	ldrb	r1, [r8]
   26818:	cmp	r1, #48	; 0x30
   2681c:	bne	269b8 <grisu3_diy_fp_encode_double@@Base+0xbec>
   26820:	sub	r3, r7, r8
   26824:	add	r8, r8, #1
   26828:	b	26838 <grisu3_diy_fp_encode_double@@Base+0xa6c>
   2682c:	ldrb	r1, [r8], #1
   26830:	cmp	r1, #48	; 0x30
   26834:	bne	269bc <grisu3_diy_fp_encode_double@@Base+0xbf0>
   26838:	cmp	ip, r8
   2683c:	add	r7, r3, r8
   26840:	mov	r6, r8
   26844:	bne	2682c <grisu3_diy_fp_encode_double@@Base+0xa60>
   26848:	b	26610 <grisu3_diy_fp_encode_double@@Base+0x844>
   2684c:	nop	{0}
   26850:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   26854:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   26858:	usatle	lr, #2, r0, asr #30
   2685c:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   26860:	ldmvc	r5!, {r6, sl, fp, pc}
   26864:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   26868:	addsvs	r3, r1, r0, lsl #26
   2686c:	mvnmi	r5, #228, 16	; 0xe40000
   26870:	strbvs	ip, [lr, -r0, lsl #16]
   26874:			; <UNDEFINED> instruction: 0x43abc16d
   26878:	ldrbhi	sl, [r8]
   2687c:	cmnmi	r6, #1459617792	; 0x57000000
   26880:	strbcc	r8, [r0, r0]!
   26884:	movtmi	ip, #4985	; 0x1379
   26888:	andeq	r0, r0, r0
   2688c:	sbcmi	r8, r3, r0, lsl #16
   26890:	andeq	r0, r0, r0
   26894:	addmi	r4, pc, r0
   26898:	andeq	r0, r0, r0
   2689c:	smlawbmi	lr, r0, r4, r8
   268a0:	andeq	r0, r0, r0
   268a4:	orrsmi	sp, r7, r4, lsl #15
   268a8:	andcs	r0, r0, r0
   268ac:	andmi	sl, r2, #95	; 0x5f
   268b0:	andge	r0, r0, #0
   268b4:	rsbmi	r1, sp, #148, 20	; 0x94000
   268b8:	cdpne	0, 9, cr0, cr0, cr0, {0}
   268bc:	sbcsmi	fp, r6, #196, 24	; 0xc400
   268c0:	ldrtcs	r0, [r4], -r0
   268c4:	movwmi	r6, #52213	; 0xcbf5
   268c8:	strb	r0, [r0, #-0]
   268cc:	adcmi	r3, r2, #156	; 0x9c
   268d0:	stmda	r0, {}	; <UNPREDICTABLE>
   268d4:	eorsmi	r4, r7, #7733248	; 0x760000
   268d8:	andeq	r0, r0, r0
   268dc:	bicmi	ip, sp, r5, ror #26
   268e0:	andeq	r0, r0, r0
   268e4:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   268e8:	andeq	r0, r0, r0
   268ec:	rscsmi	r6, r8, r0, lsl #20
   268f0:	andeq	r0, r0, r0
   268f4:	subsmi	r0, r9, r0
   268f8:			; <UNDEFINED> instruction: 0x064dd592
   268fc:	strmi	pc, [r0], #207	; 0xcf
   26900:	andeq	r0, r0, r0
   26904:	eormi	r0, r4, r0
   26908:	sub	r3, ip, r6
   2690c:	cmp	r3, #1
   26910:	ble	26610 <grisu3_diy_fp_encode_double@@Base+0x844>
   26914:	ldrb	r8, [r6, #1]
   26918:	cmp	r8, #43	; 0x2b
   2691c:	beq	26d00 <grisu3_diy_fp_encode_double@@Base+0xf34>
   26920:	cmp	r8, #45	; 0x2d
   26924:	beq	26d24 <grisu3_diy_fp_encode_double@@Base+0xf58>
   26928:	add	r2, r6, #1
   2692c:	mov	fp, #0
   26930:	sub	r8, r8, #48	; 0x30
   26934:	uxtb	r3, r8
   26938:	cmp	r3, #9
   2693c:	bhi	26610 <grisu3_diy_fp_encode_double@@Base+0x844>
   26940:	add	r6, r2, #1
   26944:	mov	r3, r8
   26948:	cmp	ip, r6
   2694c:	beq	26610 <grisu3_diy_fp_encode_double@@Base+0x844>
   26950:	ldrb	r1, [r2, #1]
   26954:	sub	r9, r1, #48	; 0x30
   26958:	cmp	r9, #9
   2695c:	bhi	26a10 <grisu3_diy_fp_encode_double@@Base+0xc44>
   26960:	add	r2, r2, #2
   26964:	add	r8, r3, r3, lsl #2
   26968:	cmp	r3, #32768	; 0x8000
   2696c:	mov	r6, r2
   26970:	addlt	r3, r1, r8, lsl #1
   26974:	sublt	r3, r3, #48	; 0x30
   26978:	cmp	ip, r2
   2697c:	beq	26d18 <grisu3_diy_fp_encode_double@@Base+0xf4c>
   26980:	ldrb	r1, [r2]
   26984:	add	r2, r2, #1
   26988:	sub	r8, r1, #48	; 0x30
   2698c:	cmp	r8, #9
   26990:	bls	26964 <grisu3_diy_fp_encode_double@@Base+0xb98>
   26994:	cmp	fp, #0
   26998:	beq	26a1c <grisu3_diy_fp_encode_double@@Base+0xc50>
   2699c:	cmp	ip, r6
   269a0:	sub	r7, r7, r3
   269a4:	bne	264fc <grisu3_diy_fp_encode_double@@Base+0x730>
   269a8:	b	26610 <grisu3_diy_fp_encode_double@@Base+0x844>
   269ac:	mov	r4, #0
   269b0:	mov	r5, #0
   269b4:	b	26450 <grisu3_diy_fp_encode_double@@Base+0x684>
   269b8:	mov	r6, r8
   269bc:	sub	r3, r1, #49	; 0x31
   269c0:	cmp	r3, #8
   269c4:	bhi	264ec <grisu3_diy_fp_encode_double@@Base+0x720>
   269c8:	add	r3, r6, #1
   269cc:	cmp	ip, r3
   269d0:	beq	26610 <grisu3_diy_fp_encode_double@@Base+0x844>
   269d4:	ldrb	r1, [r6, #1]
   269d8:	sub	r2, r1, #48	; 0x30
   269dc:	cmp	r2, #9
   269e0:	bhi	26d90 <grisu3_diy_fp_encode_double@@Base+0xfc4>
   269e4:	add	r3, r6, #2
   269e8:	cmp	r3, ip
   269ec:	mov	r6, r3
   269f0:	beq	26610 <grisu3_diy_fp_encode_double@@Base+0x844>
   269f4:	ldrb	r1, [r3]
   269f8:	add	r3, r3, #1
   269fc:	sub	r2, r1, #48	; 0x30
   26a00:	cmp	r2, #9
   26a04:	bls	269e8 <grisu3_diy_fp_encode_double@@Base+0xc1c>
   26a08:	mov	lr, #1
   26a0c:	b	264ec <grisu3_diy_fp_encode_double@@Base+0x720>
   26a10:	cmp	fp, #0
   26a14:	subne	r7, r7, r8
   26a18:	bne	264fc <grisu3_diy_fp_encode_double@@Base+0x730>
   26a1c:	add	r7, r7, r3
   26a20:	b	264fc <grisu3_diy_fp_encode_double@@Base+0x730>
   26a24:	mov	r0, r4
   26a28:	mov	r1, r5
   26a2c:	bl	2a55c <flatcc_json_parser_struct_as_root@@Base+0x350>
   26a30:	sub	r3, r7, sl
   26a34:	vmov	d7, r0, r1
   26a38:	add	r3, r3, #22
   26a3c:	cmp	r3, #44	; 0x2c
   26a40:	addls	pc, pc, r3, lsl #2
   26a44:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26a48:	b	26cdc <grisu3_diy_fp_encode_double@@Base+0xf10>
   26a4c:	b	26cf4 <grisu3_diy_fp_encode_double@@Base+0xf28>
   26a50:	b	26ce8 <grisu3_diy_fp_encode_double@@Base+0xf1c>
   26a54:	b	26cd0 <grisu3_diy_fp_encode_double@@Base+0xf04>
   26a58:	b	26cc4 <grisu3_diy_fp_encode_double@@Base+0xef8>
   26a5c:	b	26cb8 <grisu3_diy_fp_encode_double@@Base+0xeec>
   26a60:	b	26cac <grisu3_diy_fp_encode_double@@Base+0xee0>
   26a64:	b	26ca0 <grisu3_diy_fp_encode_double@@Base+0xed4>
   26a68:	b	26c94 <grisu3_diy_fp_encode_double@@Base+0xec8>
   26a6c:	b	26c88 <grisu3_diy_fp_encode_double@@Base+0xebc>
   26a70:	b	26c7c <grisu3_diy_fp_encode_double@@Base+0xeb0>
   26a74:	b	26c70 <grisu3_diy_fp_encode_double@@Base+0xea4>
   26a78:	b	26c64 <grisu3_diy_fp_encode_double@@Base+0xe98>
   26a7c:	b	26c58 <grisu3_diy_fp_encode_double@@Base+0xe8c>
   26a80:	b	26c4c <grisu3_diy_fp_encode_double@@Base+0xe80>
   26a84:	b	26c40 <grisu3_diy_fp_encode_double@@Base+0xe74>
   26a88:	b	26c34 <grisu3_diy_fp_encode_double@@Base+0xe68>
   26a8c:	b	26c28 <grisu3_diy_fp_encode_double@@Base+0xe5c>
   26a90:	b	26c1c <grisu3_diy_fp_encode_double@@Base+0xe50>
   26a94:	b	26c10 <grisu3_diy_fp_encode_double@@Base+0xe44>
   26a98:	b	26c04 <grisu3_diy_fp_encode_double@@Base+0xe38>
   26a9c:	b	26bf8 <grisu3_diy_fp_encode_double@@Base+0xe2c>
   26aa0:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26aa4:	b	26be0 <grisu3_diy_fp_encode_double@@Base+0xe14>
   26aa8:	b	26bd4 <grisu3_diy_fp_encode_double@@Base+0xe08>
   26aac:	b	26bc8 <grisu3_diy_fp_encode_double@@Base+0xdfc>
   26ab0:	b	26bbc <grisu3_diy_fp_encode_double@@Base+0xdf0>
   26ab4:	b	26bb0 <grisu3_diy_fp_encode_double@@Base+0xde4>
   26ab8:	b	26ba4 <grisu3_diy_fp_encode_double@@Base+0xdd8>
   26abc:	b	26b98 <grisu3_diy_fp_encode_double@@Base+0xdcc>
   26ac0:	b	26b8c <grisu3_diy_fp_encode_double@@Base+0xdc0>
   26ac4:	b	26b80 <grisu3_diy_fp_encode_double@@Base+0xdb4>
   26ac8:	b	26b74 <grisu3_diy_fp_encode_double@@Base+0xda8>
   26acc:	b	26b68 <grisu3_diy_fp_encode_double@@Base+0xd9c>
   26ad0:	b	26b5c <grisu3_diy_fp_encode_double@@Base+0xd90>
   26ad4:	b	26b50 <grisu3_diy_fp_encode_double@@Base+0xd84>
   26ad8:	b	26b44 <grisu3_diy_fp_encode_double@@Base+0xd78>
   26adc:	b	26b38 <grisu3_diy_fp_encode_double@@Base+0xd6c>
   26ae0:	b	26b2c <grisu3_diy_fp_encode_double@@Base+0xd60>
   26ae4:	b	26b20 <grisu3_diy_fp_encode_double@@Base+0xd54>
   26ae8:	b	26b14 <grisu3_diy_fp_encode_double@@Base+0xd48>
   26aec:	b	26b08 <grisu3_diy_fp_encode_double@@Base+0xd3c>
   26af0:	b	26afc <grisu3_diy_fp_encode_double@@Base+0xd30>
   26af4:	b	26670 <grisu3_diy_fp_encode_double@@Base+0x8a4>
   26af8:	b	26bec <grisu3_diy_fp_encode_double@@Base+0xe20>
   26afc:	vldr	d6, [pc, #-676]	; 26860 <grisu3_diy_fp_encode_double@@Base+0xa94>
   26b00:	vmul.f64	d7, d7, d6
   26b04:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26b08:	vldr	d6, [pc, #-680]	; 26868 <grisu3_diy_fp_encode_double@@Base+0xa9c>
   26b0c:	vmul.f64	d7, d7, d6
   26b10:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26b14:	vldr	d6, [pc, #-684]	; 26870 <grisu3_diy_fp_encode_double@@Base+0xaa4>
   26b18:	vmul.f64	d7, d7, d6
   26b1c:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26b20:	vldr	d6, [pc, #-688]	; 26878 <grisu3_diy_fp_encode_double@@Base+0xaac>
   26b24:	vmul.f64	d7, d7, d6
   26b28:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26b2c:	vldr	d6, [pc, #-692]	; 26880 <grisu3_diy_fp_encode_double@@Base+0xab4>
   26b30:	vmul.f64	d7, d7, d6
   26b34:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26b38:	vldr	d6, [pc, #-640]	; 268c0 <grisu3_diy_fp_encode_double@@Base+0xaf4>
   26b3c:	vmul.f64	d7, d7, d6
   26b40:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26b44:	vldr	d6, [pc, #-660]	; 268b8 <grisu3_diy_fp_encode_double@@Base+0xaec>
   26b48:	vmul.f64	d7, d7, d6
   26b4c:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26b50:	vldr	d6, [pc, #-656]	; 268c8 <grisu3_diy_fp_encode_double@@Base+0xafc>
   26b54:	vmul.f64	d7, d7, d6
   26b58:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26b5c:	vldr	d6, [pc, #-692]	; 268b0 <grisu3_diy_fp_encode_double@@Base+0xae4>
   26b60:	vmul.f64	d7, d7, d6
   26b64:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26b68:	vldr	d6, [pc, #-672]	; 268d0 <grisu3_diy_fp_encode_double@@Base+0xb04>
   26b6c:	vmul.f64	d7, d7, d6
   26b70:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26b74:	vldr	d6, [pc, #-724]	; 268a8 <grisu3_diy_fp_encode_double@@Base+0xadc>
   26b78:	vmul.f64	d7, d7, d6
   26b7c:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26b80:	vldr	d6, [pc, #-688]	; 268d8 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   26b84:	vmul.f64	d7, d7, d6
   26b88:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26b8c:	vldr	d6, [pc, #-756]	; 268a0 <grisu3_diy_fp_encode_double@@Base+0xad4>
   26b90:	vmul.f64	d7, d7, d6
   26b94:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26b98:	vldr	d6, [pc, #-704]	; 268e0 <grisu3_diy_fp_encode_double@@Base+0xb14>
   26b9c:	vmul.f64	d7, d7, d6
   26ba0:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26ba4:	vldr	d6, [pc, #-788]	; 26898 <grisu3_diy_fp_encode_double@@Base+0xacc>
   26ba8:	vmul.f64	d7, d7, d6
   26bac:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26bb0:	vldr	d6, [pc, #-720]	; 268e8 <grisu3_diy_fp_encode_double@@Base+0xb1c>
   26bb4:	vmul.f64	d7, d7, d6
   26bb8:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26bbc:	vldr	d6, [pc, #-828]	; 26888 <grisu3_diy_fp_encode_double@@Base+0xabc>
   26bc0:	vmul.f64	d7, d7, d6
   26bc4:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26bc8:	vldr	d6, [pc, #-832]	; 26890 <grisu3_diy_fp_encode_double@@Base+0xac4>
   26bcc:	vmul.f64	d7, d7, d6
   26bd0:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26bd4:	vldr	d6, [pc, #-748]	; 268f0 <grisu3_diy_fp_encode_double@@Base+0xb24>
   26bd8:	vmul.f64	d7, d7, d6
   26bdc:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26be0:	vldr	d6, [pc, #-744]	; 26900 <grisu3_diy_fp_encode_double@@Base+0xb34>
   26be4:	vmul.f64	d7, d7, d6
   26be8:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26bec:	vldr	d6, [pc, #-764]	; 268f8 <grisu3_diy_fp_encode_double@@Base+0xb2c>
   26bf0:	vmul.f64	d7, d7, d6
   26bf4:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26bf8:	vldr	d6, [pc, #-768]	; 26900 <grisu3_diy_fp_encode_double@@Base+0xb34>
   26bfc:	vdiv.f64	d7, d7, d6
   26c00:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26c04:	vldr	d6, [pc, #-796]	; 268f0 <grisu3_diy_fp_encode_double@@Base+0xb24>
   26c08:	vdiv.f64	d7, d7, d6
   26c0c:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26c10:	vldr	d6, [pc, #-904]	; 26890 <grisu3_diy_fp_encode_double@@Base+0xac4>
   26c14:	vdiv.f64	d7, d7, d6
   26c18:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26c1c:	vldr	d6, [pc, #-924]	; 26888 <grisu3_diy_fp_encode_double@@Base+0xabc>
   26c20:	vdiv.f64	d7, d7, d6
   26c24:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26c28:	vldr	d6, [pc, #-840]	; 268e8 <grisu3_diy_fp_encode_double@@Base+0xb1c>
   26c2c:	vdiv.f64	d7, d7, d6
   26c30:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26c34:	vldr	d6, [pc, #-932]	; 26898 <grisu3_diy_fp_encode_double@@Base+0xacc>
   26c38:	vdiv.f64	d7, d7, d6
   26c3c:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26c40:	vldr	d6, [pc, #-872]	; 268e0 <grisu3_diy_fp_encode_double@@Base+0xb14>
   26c44:	vdiv.f64	d7, d7, d6
   26c48:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26c4c:	vldr	d6, [pc, #-948]	; 268a0 <grisu3_diy_fp_encode_double@@Base+0xad4>
   26c50:	vdiv.f64	d7, d7, d6
   26c54:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26c58:	vldr	d6, [pc, #-904]	; 268d8 <grisu3_diy_fp_encode_double@@Base+0xb0c>
   26c5c:	vdiv.f64	d7, d7, d6
   26c60:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26c64:	vldr	d6, [pc, #-964]	; 268a8 <grisu3_diy_fp_encode_double@@Base+0xadc>
   26c68:	vdiv.f64	d7, d7, d6
   26c6c:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26c70:	vldr	d6, [pc, #-936]	; 268d0 <grisu3_diy_fp_encode_double@@Base+0xb04>
   26c74:	vdiv.f64	d7, d7, d6
   26c78:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26c7c:	vldr	d6, [pc, #-980]	; 268b0 <grisu3_diy_fp_encode_double@@Base+0xae4>
   26c80:	vdiv.f64	d7, d7, d6
   26c84:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26c88:	vldr	d6, [pc, #-968]	; 268c8 <grisu3_diy_fp_encode_double@@Base+0xafc>
   26c8c:	vdiv.f64	d7, d7, d6
   26c90:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26c94:	vldr	d6, [pc, #-996]	; 268b8 <grisu3_diy_fp_encode_double@@Base+0xaec>
   26c98:	vdiv.f64	d7, d7, d6
   26c9c:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26ca0:	vldr	d6, [pc, #-1000]	; 268c0 <grisu3_diy_fp_encode_double@@Base+0xaf4>
   26ca4:	vdiv.f64	d7, d7, d6
   26ca8:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26cac:	vldr	d6, [pc, #244]	; 26da8 <grisu3_diy_fp_encode_double@@Base+0xfdc>
   26cb0:	vdiv.f64	d7, d7, d6
   26cb4:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26cb8:	vldr	d6, [pc, #240]	; 26db0 <grisu3_diy_fp_encode_double@@Base+0xfe4>
   26cbc:	vdiv.f64	d7, d7, d6
   26cc0:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26cc4:	vldr	d6, [pc, #236]	; 26db8 <grisu3_diy_fp_encode_double@@Base+0xfec>
   26cc8:	vdiv.f64	d7, d7, d6
   26ccc:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26cd0:	vldr	d6, [pc, #232]	; 26dc0 <grisu3_diy_fp_encode_double@@Base+0xff4>
   26cd4:	vdiv.f64	d7, d7, d6
   26cd8:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26cdc:	vldr	d6, [pc, #228]	; 26dc8 <grisu3_diy_fp_encode_double@@Base+0xffc>
   26ce0:	vdiv.f64	d7, d7, d6
   26ce4:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26ce8:	vldr	d6, [pc, #224]	; 26dd0 <grisu3_diy_fp_encode_double@@Base+0x1004>
   26cec:	vdiv.f64	d7, d7, d6
   26cf0:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26cf4:	vldr	d6, [pc, #220]	; 26dd8 <grisu3_diy_fp_encode_double@@Base+0x100c>
   26cf8:	vdiv.f64	d7, d7, d6
   26cfc:	b	26678 <grisu3_diy_fp_encode_double@@Base+0x8ac>
   26d00:	add	r2, r6, #2
   26d04:	cmp	ip, r2
   26d08:	beq	26610 <grisu3_diy_fp_encode_double@@Base+0x844>
   26d0c:	ldrb	r8, [r6, #2]
   26d10:	mov	fp, #0
   26d14:	b	26930 <grisu3_diy_fp_encode_double@@Base+0xb64>
   26d18:	cmp	fp, #0
   26d1c:	bne	2699c <grisu3_diy_fp_encode_double@@Base+0xbd0>
   26d20:	b	26610 <grisu3_diy_fp_encode_double@@Base+0x844>
   26d24:	add	r2, r6, #2
   26d28:	cmp	ip, r2
   26d2c:	beq	26610 <grisu3_diy_fp_encode_double@@Base+0x844>
   26d30:	ldrb	r8, [r6, #2]
   26d34:	mov	fp, #1
   26d38:	b	26930 <grisu3_diy_fp_encode_double@@Base+0xb64>
   26d3c:	ldr	fp, [sp, #24]
   26d40:	mov	r7, r0
   26d44:	ldr	r0, [sp, #28]
   26d48:	sub	fp, r8, fp
   26d4c:	add	sl, sl, fp
   26d50:	cmp	lr, #0
   26d54:	bne	26814 <grisu3_diy_fp_encode_double@@Base+0xa48>
   26d58:	cmp	r9, #52	; 0x34
   26d5c:	movls	r9, #0
   26d60:	movhi	r9, #1
   26d64:	adds	r4, r4, r9
   26d68:	adc	r5, r5, #0
   26d6c:	cmp	ip, r8
   26d70:	movne	lr, #1
   26d74:	bne	26814 <grisu3_diy_fp_encode_double@@Base+0xa48>
   26d78:	b	26610 <grisu3_diy_fp_encode_double@@Base+0x844>
   26d7c:	mov	r7, lr
   26d80:	mov	r6, r3
   26d84:	b	26720 <grisu3_diy_fp_encode_double@@Base+0x954>
   26d88:	mov	r8, fp
   26d8c:	b	26d50 <grisu3_diy_fp_encode_double@@Base+0xf84>
   26d90:	mov	r6, r3
   26d94:	b	26a08 <grisu3_diy_fp_encode_double@@Base+0xc3c>
   26d98:	mov	r6, r7
   26d9c:	mov	r7, #0
   26da0:	b	264d8 <grisu3_diy_fp_encode_double@@Base+0x70c>
   26da4:	nop	{0}
   26da8:	strbcc	r8, [r0, r0]!
   26dac:	movtmi	ip, #4985	; 0x1379
   26db0:	ldrbhi	sl, [r8]
   26db4:	cmnmi	r6, #1459617792	; 0x57000000
   26db8:	strbvs	ip, [lr, -r0, lsl #16]
   26dbc:			; <UNDEFINED> instruction: 0x43abc16d
   26dc0:	addsvs	r3, r1, r0, lsl #26
   26dc4:	mvnmi	r5, #228, 16	; 0xe40000
   26dc8:			; <UNDEFINED> instruction: 0x064dd592
   26dcc:	strmi	pc, [r0], #207	; 0xcf
   26dd0:	ldmvc	r5!, {r6, sl, fp, pc}
   26dd4:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   26dd8:	usatle	lr, #2, r0, asr #30
   26ddc:	strbmi	r1, [fp], #-2788	; 0xfffff51c

00026de0 <flatcc_json_parser_error_string@@Base>:
   26de0:	cmp	r0, #34	; 0x22
   26de4:	addls	pc, pc, r0, lsl #2
   26de8:	b	2701c <flatcc_json_parser_error_string@@Base+0x23c>
   26dec:	b	26e78 <flatcc_json_parser_error_string@@Base+0x98>
   26df0:	b	27010 <flatcc_json_parser_error_string@@Base+0x230>
   26df4:	b	27004 <flatcc_json_parser_error_string@@Base+0x224>
   26df8:	b	26ff8 <flatcc_json_parser_error_string@@Base+0x218>
   26dfc:	b	26fec <flatcc_json_parser_error_string@@Base+0x20c>
   26e00:	b	26fe0 <flatcc_json_parser_error_string@@Base+0x200>
   26e04:	b	26fd4 <flatcc_json_parser_error_string@@Base+0x1f4>
   26e08:	b	26fc8 <flatcc_json_parser_error_string@@Base+0x1e8>
   26e0c:	b	26fbc <flatcc_json_parser_error_string@@Base+0x1dc>
   26e10:	b	26fb0 <flatcc_json_parser_error_string@@Base+0x1d0>
   26e14:	b	26fa4 <flatcc_json_parser_error_string@@Base+0x1c4>
   26e18:	b	26f98 <flatcc_json_parser_error_string@@Base+0x1b8>
   26e1c:	b	26f8c <flatcc_json_parser_error_string@@Base+0x1ac>
   26e20:	b	26f80 <flatcc_json_parser_error_string@@Base+0x1a0>
   26e24:	b	26f74 <flatcc_json_parser_error_string@@Base+0x194>
   26e28:	b	26f68 <flatcc_json_parser_error_string@@Base+0x188>
   26e2c:	b	26f5c <flatcc_json_parser_error_string@@Base+0x17c>
   26e30:	b	26f50 <flatcc_json_parser_error_string@@Base+0x170>
   26e34:	b	26f44 <flatcc_json_parser_error_string@@Base+0x164>
   26e38:	b	26f38 <flatcc_json_parser_error_string@@Base+0x158>
   26e3c:	b	26f2c <flatcc_json_parser_error_string@@Base+0x14c>
   26e40:	b	26f20 <flatcc_json_parser_error_string@@Base+0x140>
   26e44:	b	26f14 <flatcc_json_parser_error_string@@Base+0x134>
   26e48:	b	26f08 <flatcc_json_parser_error_string@@Base+0x128>
   26e4c:	b	26efc <flatcc_json_parser_error_string@@Base+0x11c>
   26e50:	b	26ef0 <flatcc_json_parser_error_string@@Base+0x110>
   26e54:	b	26ee4 <flatcc_json_parser_error_string@@Base+0x104>
   26e58:	b	26ed8 <flatcc_json_parser_error_string@@Base+0xf8>
   26e5c:	b	26ecc <flatcc_json_parser_error_string@@Base+0xec>
   26e60:	b	26ec0 <flatcc_json_parser_error_string@@Base+0xe0>
   26e64:	b	26eb4 <flatcc_json_parser_error_string@@Base+0xd4>
   26e68:	b	26ea8 <flatcc_json_parser_error_string@@Base+0xc8>
   26e6c:	b	26e9c <flatcc_json_parser_error_string@@Base+0xbc>
   26e70:	b	26e90 <flatcc_json_parser_error_string@@Base+0xb0>
   26e74:	b	26e84 <flatcc_json_parser_error_string@@Base+0xa4>
   26e78:	ldr	r0, [pc, #424]	; 27028 <flatcc_json_parser_error_string@@Base+0x248>
   26e7c:	add	r0, pc, r0
   26e80:	bx	lr
   26e84:	ldr	r0, [pc, #416]	; 2702c <flatcc_json_parser_error_string@@Base+0x24c>
   26e88:	add	r0, pc, r0
   26e8c:	bx	lr
   26e90:	ldr	r0, [pc, #408]	; 27030 <flatcc_json_parser_error_string@@Base+0x250>
   26e94:	add	r0, pc, r0
   26e98:	bx	lr
   26e9c:	ldr	r0, [pc, #400]	; 27034 <flatcc_json_parser_error_string@@Base+0x254>
   26ea0:	add	r0, pc, r0
   26ea4:	bx	lr
   26ea8:	ldr	r0, [pc, #392]	; 27038 <flatcc_json_parser_error_string@@Base+0x258>
   26eac:	add	r0, pc, r0
   26eb0:	bx	lr
   26eb4:	ldr	r0, [pc, #384]	; 2703c <flatcc_json_parser_error_string@@Base+0x25c>
   26eb8:	add	r0, pc, r0
   26ebc:	bx	lr
   26ec0:	ldr	r0, [pc, #376]	; 27040 <flatcc_json_parser_error_string@@Base+0x260>
   26ec4:	add	r0, pc, r0
   26ec8:	bx	lr
   26ecc:	ldr	r0, [pc, #368]	; 27044 <flatcc_json_parser_error_string@@Base+0x264>
   26ed0:	add	r0, pc, r0
   26ed4:	bx	lr
   26ed8:	ldr	r0, [pc, #360]	; 27048 <flatcc_json_parser_error_string@@Base+0x268>
   26edc:	add	r0, pc, r0
   26ee0:	bx	lr
   26ee4:	ldr	r0, [pc, #352]	; 2704c <flatcc_json_parser_error_string@@Base+0x26c>
   26ee8:	add	r0, pc, r0
   26eec:	bx	lr
   26ef0:	ldr	r0, [pc, #344]	; 27050 <flatcc_json_parser_error_string@@Base+0x270>
   26ef4:	add	r0, pc, r0
   26ef8:	bx	lr
   26efc:	ldr	r0, [pc, #336]	; 27054 <flatcc_json_parser_error_string@@Base+0x274>
   26f00:	add	r0, pc, r0
   26f04:	bx	lr
   26f08:	ldr	r0, [pc, #328]	; 27058 <flatcc_json_parser_error_string@@Base+0x278>
   26f0c:	add	r0, pc, r0
   26f10:	bx	lr
   26f14:	ldr	r0, [pc, #320]	; 2705c <flatcc_json_parser_error_string@@Base+0x27c>
   26f18:	add	r0, pc, r0
   26f1c:	bx	lr
   26f20:	ldr	r0, [pc, #312]	; 27060 <flatcc_json_parser_error_string@@Base+0x280>
   26f24:	add	r0, pc, r0
   26f28:	bx	lr
   26f2c:	ldr	r0, [pc, #304]	; 27064 <flatcc_json_parser_error_string@@Base+0x284>
   26f30:	add	r0, pc, r0
   26f34:	bx	lr
   26f38:	ldr	r0, [pc, #296]	; 27068 <flatcc_json_parser_error_string@@Base+0x288>
   26f3c:	add	r0, pc, r0
   26f40:	bx	lr
   26f44:	ldr	r0, [pc, #288]	; 2706c <flatcc_json_parser_error_string@@Base+0x28c>
   26f48:	add	r0, pc, r0
   26f4c:	bx	lr
   26f50:	ldr	r0, [pc, #280]	; 27070 <flatcc_json_parser_error_string@@Base+0x290>
   26f54:	add	r0, pc, r0
   26f58:	bx	lr
   26f5c:	ldr	r0, [pc, #272]	; 27074 <flatcc_json_parser_error_string@@Base+0x294>
   26f60:	add	r0, pc, r0
   26f64:	bx	lr
   26f68:	ldr	r0, [pc, #264]	; 27078 <flatcc_json_parser_error_string@@Base+0x298>
   26f6c:	add	r0, pc, r0
   26f70:	bx	lr
   26f74:	ldr	r0, [pc, #256]	; 2707c <flatcc_json_parser_error_string@@Base+0x29c>
   26f78:	add	r0, pc, r0
   26f7c:	bx	lr
   26f80:	ldr	r0, [pc, #248]	; 27080 <flatcc_json_parser_error_string@@Base+0x2a0>
   26f84:	add	r0, pc, r0
   26f88:	bx	lr
   26f8c:	ldr	r0, [pc, #240]	; 27084 <flatcc_json_parser_error_string@@Base+0x2a4>
   26f90:	add	r0, pc, r0
   26f94:	bx	lr
   26f98:	ldr	r0, [pc, #232]	; 27088 <flatcc_json_parser_error_string@@Base+0x2a8>
   26f9c:	add	r0, pc, r0
   26fa0:	bx	lr
   26fa4:	ldr	r0, [pc, #224]	; 2708c <flatcc_json_parser_error_string@@Base+0x2ac>
   26fa8:	add	r0, pc, r0
   26fac:	bx	lr
   26fb0:	ldr	r0, [pc, #216]	; 27090 <flatcc_json_parser_error_string@@Base+0x2b0>
   26fb4:	add	r0, pc, r0
   26fb8:	bx	lr
   26fbc:	ldr	r0, [pc, #208]	; 27094 <flatcc_json_parser_error_string@@Base+0x2b4>
   26fc0:	add	r0, pc, r0
   26fc4:	bx	lr
   26fc8:	ldr	r0, [pc, #200]	; 27098 <flatcc_json_parser_error_string@@Base+0x2b8>
   26fcc:	add	r0, pc, r0
   26fd0:	bx	lr
   26fd4:	ldr	r0, [pc, #192]	; 2709c <flatcc_json_parser_error_string@@Base+0x2bc>
   26fd8:	add	r0, pc, r0
   26fdc:	bx	lr
   26fe0:	ldr	r0, [pc, #184]	; 270a0 <flatcc_json_parser_error_string@@Base+0x2c0>
   26fe4:	add	r0, pc, r0
   26fe8:	bx	lr
   26fec:	ldr	r0, [pc, #176]	; 270a4 <flatcc_json_parser_error_string@@Base+0x2c4>
   26ff0:	add	r0, pc, r0
   26ff4:	bx	lr
   26ff8:	ldr	r0, [pc, #168]	; 270a8 <flatcc_json_parser_error_string@@Base+0x2c8>
   26ffc:	add	r0, pc, r0
   27000:	bx	lr
   27004:	ldr	r0, [pc, #160]	; 270ac <flatcc_json_parser_error_string@@Base+0x2cc>
   27008:	add	r0, pc, r0
   2700c:	bx	lr
   27010:	ldr	r0, [pc, #152]	; 270b0 <flatcc_json_parser_error_string@@Base+0x2d0>
   27014:	add	r0, pc, r0
   27018:	bx	lr
   2701c:	ldr	r0, [pc, #144]	; 270b4 <flatcc_json_parser_error_string@@Base+0x2d4>
   27020:	add	r0, pc, r0
   27024:	bx	lr
   27028:	andeq	r5, r0, r0, ror #3
   2702c:	andeq	r5, r0, r8, ror r4
   27030:	andeq	r5, r0, ip, asr r4
   27034:	andeq	r5, r0, r4, lsr r4
   27038:	andeq	r5, r0, r0, lsl r4
   2703c:	andeq	r5, r0, r4, ror #7
   27040:	andeq	r5, r0, r0, asr #7
   27044:	muleq	r0, r8, r3
   27048:	andeq	r5, r0, r0, ror r3
   2704c:	andeq	r5, r0, r4, asr #6
   27050:	andeq	r5, r0, r8, lsl r3
   27054:	strdeq	r5, [r0], -r8
   27058:	andeq	r5, r0, r8, asr #5
   2705c:	andeq	r5, r0, ip, lsr #5
   27060:	muleq	r0, r0, r2
   27064:	andeq	r5, r0, r0, ror r2
   27068:	andeq	r5, r0, r4, asr r2
   2706c:	andeq	r5, r0, r8, lsr r2
   27070:	andeq	r5, r0, r8, lsl r2
   27074:	strdeq	r5, [r0], -ip
   27078:	ldrdeq	r5, [r0], -ip
   2707c:			; <UNDEFINED> instruction: 0x000051b4
   27080:	muleq	r0, r8, r1
   27084:	andeq	r5, r0, r8, ror r1
   27088:	andeq	r5, r0, ip, asr r1
   2708c:	andeq	r5, r0, ip, lsr r1
   27090:	andeq	r5, r0, ip, lsl r1
   27094:	andeq	r5, r0, r4, lsl #2
   27098:	andeq	r5, r0, ip, ror #1
   2709c:	ldrdeq	r5, [r0], -r0
   270a0:	andeq	r5, r0, ip, lsr #1
   270a4:	muleq	r0, r0, r0
   270a8:	andeq	r5, r0, r4, ror r0
   270ac:	andeq	r5, r0, r8, asr r0
   270b0:	strdeq	r5, [r0], -ip
   270b4:	andeq	r5, r0, r4, lsr r0

000270b8 <flatcc_json_parser_set_error@@Base>:
   270b8:	ldr	ip, [r0, #24]
   270bc:	cmp	ip, #0
   270c0:	bne	270dc <flatcc_json_parser_set_error@@Base+0x24>
   270c4:	ldr	ip, [r0, #4]
   270c8:	str	r3, [r0, #24]
   270cc:	str	r1, [r0, #36]	; 0x24
   270d0:	sub	r1, r1, ip
   270d4:	add	r1, r1, #1
   270d8:	str	r1, [r0, #20]
   270dc:	mov	r0, r2
   270e0:	bx	lr

000270e4 <flatcc_json_parser_string_part@@Base>:
   270e4:	cmp	r1, r2
   270e8:	beq	27188 <flatcc_json_parser_string_part@@Base+0xa4>
   270ec:	ldrb	ip, [r1]
   270f0:	cmp	ip, #34	; 0x22
   270f4:	cmpne	ip, #31
   270f8:	movhi	r3, #1
   270fc:	movls	r3, #0
   27100:	cmp	ip, #92	; 0x5c
   27104:	moveq	r3, #0
   27108:	andne	r3, r3, #1
   2710c:	cmp	r3, #0
   27110:	beq	27194 <flatcc_json_parser_string_part@@Base+0xb0>
   27114:	add	r3, r1, #1
   27118:	cmp	r3, r2
   2711c:	mov	r1, r3
   27120:	beq	2718c <flatcc_json_parser_string_part@@Base+0xa8>
   27124:	push	{lr}		; (str lr, [sp, #-4]!)
   27128:	b	27138 <flatcc_json_parser_string_part@@Base+0x54>
   2712c:	cmp	r3, r2
   27130:	mov	r1, r3
   27134:	beq	2717c <flatcc_json_parser_string_part@@Base+0x98>
   27138:	ldrb	ip, [r3], #1
   2713c:	cmp	ip, #34	; 0x22
   27140:	cmpne	ip, #31
   27144:	movhi	lr, #1
   27148:	movls	lr, #0
   2714c:	cmp	ip, #92	; 0x5c
   27150:	moveq	lr, #0
   27154:	andne	lr, lr, #1
   27158:	cmp	lr, #0
   2715c:	bne	2712c <flatcc_json_parser_string_part@@Base+0x48>
   27160:	cmp	ip, #31
   27164:	bls	27170 <flatcc_json_parser_string_part@@Base+0x8c>
   27168:	mov	r0, r1
   2716c:	pop	{pc}		; (ldr pc, [sp], #4)
   27170:	mov	r3, #17
   27174:	pop	{lr}		; (ldr lr, [sp], #4)
   27178:	b	270b8 <flatcc_json_parser_set_error@@Base>
   2717c:	mov	r3, #20
   27180:	pop	{lr}		; (ldr lr, [sp], #4)
   27184:	b	270b8 <flatcc_json_parser_set_error@@Base>
   27188:	mov	r1, r2
   2718c:	mov	r3, #20
   27190:	b	270b8 <flatcc_json_parser_set_error@@Base>
   27194:	cmp	ip, #31
   27198:	bls	271a4 <flatcc_json_parser_string_part@@Base+0xc0>
   2719c:	mov	r0, r1
   271a0:	bx	lr
   271a4:	mov	r3, #17
   271a8:	b	270b8 <flatcc_json_parser_set_error@@Base>

000271ac <flatcc_json_parser_space_ext@@Base>:
   271ac:	cmp	r1, r2
   271b0:	beq	271e0 <flatcc_json_parser_space_ext@@Base+0x34>
   271b4:	ldrb	ip, [r1]
   271b8:	cmp	ip, #32
   271bc:	bne	271e8 <flatcc_json_parser_space_ext@@Base+0x3c>
   271c0:	add	r3, r1, #1
   271c4:	b	271d4 <flatcc_json_parser_space_ext@@Base+0x28>
   271c8:	ldrb	ip, [r3], #1
   271cc:	cmp	ip, #32
   271d0:	bne	271e8 <flatcc_json_parser_space_ext@@Base+0x3c>
   271d4:	cmp	r2, r3
   271d8:	mov	r1, r3
   271dc:	bne	271c8 <flatcc_json_parser_space_ext@@Base+0x1c>
   271e0:	mov	r0, r1
   271e4:	bx	lr
   271e8:	cmp	ip, #32
   271ec:	bhi	271e0 <flatcc_json_parser_space_ext@@Base+0x34>
   271f0:	sub	ip, ip, #9
   271f4:	cmp	ip, #23
   271f8:	addls	pc, pc, ip, lsl #2
   271fc:	b	272b8 <flatcc_json_parser_space_ext@@Base+0x10c>
   27200:	b	272b0 <flatcc_json_parser_space_ext@@Base+0x104>
   27204:	b	272a8 <flatcc_json_parser_space_ext@@Base+0xfc>
   27208:	b	272b8 <flatcc_json_parser_space_ext@@Base+0x10c>
   2720c:	b	272b8 <flatcc_json_parser_space_ext@@Base+0x10c>
   27210:	b	27260 <flatcc_json_parser_space_ext@@Base+0xb4>
   27214:	b	272b8 <flatcc_json_parser_space_ext@@Base+0x10c>
   27218:	b	272b8 <flatcc_json_parser_space_ext@@Base+0x10c>
   2721c:	b	272b8 <flatcc_json_parser_space_ext@@Base+0x10c>
   27220:	b	272b8 <flatcc_json_parser_space_ext@@Base+0x10c>
   27224:	b	272b8 <flatcc_json_parser_space_ext@@Base+0x10c>
   27228:	b	272b8 <flatcc_json_parser_space_ext@@Base+0x10c>
   2722c:	b	272b8 <flatcc_json_parser_space_ext@@Base+0x10c>
   27230:	b	272b8 <flatcc_json_parser_space_ext@@Base+0x10c>
   27234:	b	272b8 <flatcc_json_parser_space_ext@@Base+0x10c>
   27238:	b	272b8 <flatcc_json_parser_space_ext@@Base+0x10c>
   2723c:	b	272b8 <flatcc_json_parser_space_ext@@Base+0x10c>
   27240:	b	272b8 <flatcc_json_parser_space_ext@@Base+0x10c>
   27244:	b	272b8 <flatcc_json_parser_space_ext@@Base+0x10c>
   27248:	b	272b8 <flatcc_json_parser_space_ext@@Base+0x10c>
   2724c:	b	272b8 <flatcc_json_parser_space_ext@@Base+0x10c>
   27250:	b	272b8 <flatcc_json_parser_space_ext@@Base+0x10c>
   27254:	b	272b8 <flatcc_json_parser_space_ext@@Base+0x10c>
   27258:	b	272b8 <flatcc_json_parser_space_ext@@Base+0x10c>
   2725c:	b	271ac <flatcc_json_parser_space_ext@@Base>
   27260:	sub	r3, r2, r1
   27264:	add	ip, r1, #1
   27268:	cmp	r3, #1
   2726c:	ble	2727c <flatcc_json_parser_space_ext@@Base+0xd0>
   27270:	ldrb	r3, [r1, #1]
   27274:	cmp	r3, #10
   27278:	addeq	ip, r1, #2
   2727c:	mov	r1, ip
   27280:	ldr	r3, [r0, #16]
   27284:	str	r1, [r0, #4]
   27288:	add	r3, r3, #1
   2728c:	str	r3, [r0, #16]
   27290:	cmp	r2, r1
   27294:	beq	271e0 <flatcc_json_parser_space_ext@@Base+0x34>
   27298:	ldrb	ip, [r1]
   2729c:	cmp	ip, #32
   272a0:	bls	271f0 <flatcc_json_parser_space_ext@@Base+0x44>
   272a4:	b	271e0 <flatcc_json_parser_space_ext@@Base+0x34>
   272a8:	add	r1, r1, #1
   272ac:	b	27280 <flatcc_json_parser_space_ext@@Base+0xd4>
   272b0:	add	r1, r1, #1
   272b4:	b	27290 <flatcc_json_parser_space_ext@@Base+0xe4>
   272b8:	mov	r3, #5
   272bc:	b	270b8 <flatcc_json_parser_set_error@@Base>
   272c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   272c4:	mov	ip, #0
   272c8:	cmp	r1, r2
   272cc:	strd	r6, [sp, #8]
   272d0:	mov	r4, r1
   272d4:	mov	r6, r2
   272d8:	strd	r8, [sp, #16]
   272dc:	mov	r9, r0
   272e0:	strd	sl, [sp, #24]
   272e4:	str	lr, [sp, #32]
   272e8:	sub	sp, sp, #44	; 0x2c
   272ec:	str	r3, [sp, #12]
   272f0:	ldr	r3, [sp, #80]	; 0x50
   272f4:	strb	ip, [r3]
   272f8:	beq	27460 <flatcc_json_parser_space_ext@@Base+0x2b4>
   272fc:	ldrb	r3, [r1]
   27300:	cmp	r3, #34	; 0x22
   27304:	addeq	r4, r1, #1
   27308:	streq	ip, [r0, #12]
   2730c:	beq	27470 <flatcc_json_parser_space_ext@@Base+0x2c4>
   27310:	cmp	r3, #46	; 0x2e
   27314:	movne	r3, #1
   27318:	strne	r3, [r0, #12]
   2731c:	beq	2743c <flatcc_json_parser_space_ext@@Base+0x290>
   27320:	mov	r3, #0
   27324:	add	fp, sp, #24
   27328:	add	sl, sp, #28
   2732c:	str	r3, [sp, #8]
   27330:	str	r3, [sp, #16]
   27334:	add	r3, sp, #32
   27338:	str	r3, [sp, #20]
   2733c:	ldr	r8, [sp, #12]
   27340:	mov	r7, r4
   27344:	mov	r1, r4
   27348:	ldr	r4, [sp, #20]
   2734c:	ldr	r5, [r8]
   27350:	b	2736c <flatcc_json_parser_space_ext@@Base+0x1c0>
   27354:	cmp	r7, r0
   27358:	mov	r7, r0
   2735c:	bne	273b0 <flatcc_json_parser_space_ext@@Base+0x204>
   27360:	ldr	r5, [r8, #4]!
   27364:	cmp	r5, #0
   27368:	beq	27424 <flatcc_json_parser_space_ext@@Base+0x278>
   2736c:	mov	r3, fp
   27370:	mov	r2, r6
   27374:	stm	sp, {r4, sl}
   27378:	mov	r0, r9
   2737c:	blx	r5
   27380:	cmp	r6, r0
   27384:	mov	r1, r0
   27388:	bne	27354 <flatcc_json_parser_space_ext@@Base+0x1a8>
   2738c:	mov	r4, r0
   27390:	mov	r0, r4
   27394:	add	sp, sp, #44	; 0x2c
   27398:	ldrd	r4, [sp]
   2739c:	ldrd	r6, [sp, #8]
   273a0:	ldrd	r8, [sp, #16]
   273a4:	ldrd	sl, [sp, #24]
   273a8:	add	sp, sp, #32
   273ac:	pop	{pc}		; (ldr pc, [sp], #4)
   273b0:	ldr	r3, [sp, #8]
   273b4:	mov	r4, r0
   273b8:	cmp	r3, #0
   273bc:	beq	273cc <flatcc_json_parser_space_ext@@Base+0x220>
   273c0:	ldr	r3, [r9, #12]
   273c4:	cmp	r3, #0
   273c8:	bne	274f0 <flatcc_json_parser_space_ext@@Base+0x344>
   273cc:	ldr	r3, [sp, #24]
   273d0:	cmp	r3, #0
   273d4:	bne	274b4 <flatcc_json_parser_space_ext@@Base+0x308>
   273d8:	ldrd	r2, [sp, #32]
   273dc:	cmp	r3, #0
   273e0:	cmpeq	r2, #255	; 0xff
   273e4:	uxtbls	r3, r2
   273e8:	strls	r3, [sp, #16]
   273ec:	bhi	274d8 <flatcc_json_parser_space_ext@@Base+0x32c>
   273f0:	ldr	r2, [sp, #8]
   273f4:	ldr	r1, [sp, #16]
   273f8:	ldr	r3, [sp, #80]	; 0x50
   273fc:	add	r2, r2, #1
   27400:	str	r2, [sp, #8]
   27404:	ldr	r2, [sp, #28]
   27408:	ldrb	r3, [r3]
   2740c:	cmp	r2, #0
   27410:	ldr	r2, [sp, #80]	; 0x50
   27414:	add	r3, r1, r3
   27418:	strb	r3, [r2]
   2741c:	bne	2733c <flatcc_json_parser_space_ext@@Base+0x190>
   27420:	b	27390 <flatcc_json_parser_space_ext@@Base+0x1e4>
   27424:	mov	r2, r6
   27428:	mov	r0, r9
   2742c:	mov	r3, #23
   27430:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   27434:	mov	r4, r0
   27438:	b	27390 <flatcc_json_parser_space_ext@@Base+0x1e4>
   2743c:	mov	r3, #5
   27440:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   27444:	ldr	r3, [r9, #12]
   27448:	mov	r4, r0
   2744c:	cmp	r3, #0
   27450:	beq	27470 <flatcc_json_parser_space_ext@@Base+0x2c4>
   27454:	cmp	r6, r4
   27458:	bne	27320 <flatcc_json_parser_space_ext@@Base+0x174>
   2745c:	b	27390 <flatcc_json_parser_space_ext@@Base+0x1e4>
   27460:	ldr	r3, [r0, #12]
   27464:	cmp	r3, #0
   27468:	bne	27390 <flatcc_json_parser_space_ext@@Base+0x1e4>
   2746c:	mov	r4, r6
   27470:	sub	r3, r6, r4
   27474:	cmp	r3, #1
   27478:	ble	2749c <flatcc_json_parser_space_ext@@Base+0x2f0>
   2747c:	ldrb	r3, [r4]
   27480:	cmp	r3, #32
   27484:	bhi	27454 <flatcc_json_parser_space_ext@@Base+0x2a8>
   27488:	bne	2749c <flatcc_json_parser_space_ext@@Base+0x2f0>
   2748c:	ldrb	r3, [r4, #1]
   27490:	cmp	r3, #32
   27494:	addhi	r4, r4, #1
   27498:	bhi	27454 <flatcc_json_parser_space_ext@@Base+0x2a8>
   2749c:	mov	r1, r4
   274a0:	mov	r2, r6
   274a4:	mov	r0, r9
   274a8:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   274ac:	mov	r4, r0
   274b0:	b	27454 <flatcc_json_parser_space_ext@@Base+0x2a8>
   274b4:	mov	r3, #8
   274b8:	mov	r2, r6
   274bc:	mov	r1, r4
   274c0:	mov	r0, r9
   274c4:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   274c8:	cmp	r6, r0
   274cc:	bne	273f0 <flatcc_json_parser_space_ext@@Base+0x244>
   274d0:	mov	r4, r6
   274d4:	b	27390 <flatcc_json_parser_space_ext@@Base+0x1e4>
   274d8:	mov	r3, #7
   274dc:	mov	r2, r6
   274e0:	mov	r1, r4
   274e4:	mov	r0, r9
   274e8:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   274ec:	b	274c8 <flatcc_json_parser_space_ext@@Base+0x31c>
   274f0:	mov	r1, r4
   274f4:	mov	r2, r6
   274f8:	mov	r0, r9
   274fc:	mov	r3, #14
   27500:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   27504:	mov	r4, r0
   27508:	b	27390 <flatcc_json_parser_space_ext@@Base+0x1e4>
   2750c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   27510:	mov	ip, #0
   27514:	mov	r4, r1
   27518:	strd	r6, [sp, #8]
   2751c:	mov	r6, r0
   27520:	mov	r5, r2
   27524:	strd	r8, [sp, #16]
   27528:	mov	r9, r3
   2752c:	strd	sl, [sp, #24]
   27530:	str	lr, [sp, #32]
   27534:	sub	sp, sp, #28
   27538:	ldrh	r0, [sp, #68]	; 0x44
   2753c:	ldr	r8, [sp, #64]	; 0x40
   27540:	str	r0, [sp, #12]
   27544:	ldr	r0, [r6]
   27548:	str	ip, [sp, #20]
   2754c:	bl	22ff0 <flatcc_builder_start_offset_vector@@Base>
   27550:	cmp	r0, #0
   27554:	beq	27590 <flatcc_json_parser_space_ext@@Base+0x3e4>
   27558:	mov	r1, r4
   2755c:	mov	r2, r5
   27560:	mov	r0, r6
   27564:	mov	r3, #33	; 0x21
   27568:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   2756c:	mov	r4, r0
   27570:	mov	r0, r4
   27574:	add	sp, sp, #28
   27578:	ldrd	r4, [sp]
   2757c:	ldrd	r6, [sp, #8]
   27580:	ldrd	r8, [sp, #16]
   27584:	ldrd	sl, [sp, #24]
   27588:	add	sp, sp, #32
   2758c:	pop	{pc}		; (ldr pc, [sp], #4)
   27590:	cmp	r4, r5
   27594:	beq	275a4 <flatcc_json_parser_space_ext@@Base+0x3f8>
   27598:	ldrb	r3, [r4]
   2759c:	cmp	r3, #91	; 0x5b
   275a0:	beq	27628 <flatcc_json_parser_space_ext@@Base+0x47c>
   275a4:	mov	r1, r4
   275a8:	mov	r3, #22
   275ac:	mov	r2, r5
   275b0:	mov	r0, r6
   275b4:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   275b8:	mov	r4, r0
   275bc:	mov	r7, #0
   275c0:	cmp	r8, r7
   275c4:	beq	275e4 <flatcc_json_parser_space_ext@@Base+0x438>
   275c8:	mov	r1, r4
   275cc:	mov	r2, r5
   275d0:	mov	r0, r6
   275d4:	mov	r3, #30
   275d8:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   275dc:	mov	r4, r0
   275e0:	b	27570 <flatcc_json_parser_space_ext@@Base+0x3c4>
   275e4:	mov	r1, r9
   275e8:	ldr	r0, [r6]
   275ec:	bl	21ce0 <flatcc_builder_get_user_frame_ptr@@Base>
   275f0:	mov	r1, r0
   275f4:	ldr	r0, [r6]
   275f8:	bl	241d4 <flatcc_builder_end_offset_vector_for_unions@@Base>
   275fc:	cmp	r0, #0
   27600:	str	r0, [sp, #20]
   27604:	beq	27558 <flatcc_json_parser_space_ext@@Base+0x3ac>
   27608:	ldr	r0, [r6]
   2760c:	ldr	r1, [sp, #12]
   27610:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   27614:	cmp	r0, #0
   27618:	beq	27558 <flatcc_json_parser_space_ext@@Base+0x3ac>
   2761c:	ldr	r3, [sp, #20]
   27620:	str	r3, [r0]
   27624:	b	27570 <flatcc_json_parser_space_ext@@Base+0x3c4>
   27628:	add	sl, r4, #1
   2762c:	sub	r3, r5, sl
   27630:	cmp	r3, #1
   27634:	ble	27648 <flatcc_json_parser_space_ext@@Base+0x49c>
   27638:	ldrb	r3, [r4, #1]
   2763c:	cmp	r3, #32
   27640:	bhi	2765c <flatcc_json_parser_space_ext@@Base+0x4b0>
   27644:	beq	2786c <flatcc_json_parser_space_ext@@Base+0x6c0>
   27648:	mov	r1, sl
   2764c:	mov	r2, r5
   27650:	mov	r0, r6
   27654:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   27658:	mov	sl, r0
   2765c:	cmp	r5, sl
   27660:	beq	27670 <flatcc_json_parser_space_ext@@Base+0x4c4>
   27664:	ldrb	r3, [sl]
   27668:	cmp	r3, #93	; 0x5d
   2766c:	beq	27894 <flatcc_json_parser_space_ext@@Base+0x6e8>
   27670:	cmp	r8, #0
   27674:	beq	277e4 <flatcc_json_parser_space_ext@@Base+0x638>
   27678:	mov	r7, #0
   2767c:	add	fp, sp, #20
   27680:	mov	r1, r9
   27684:	ldr	r0, [r6]
   27688:	bl	21ce0 <flatcc_builder_get_user_frame_ptr@@Base>
   2768c:	ldrb	r3, [r0, r7]
   27690:	mov	r1, sl
   27694:	mov	r2, r5
   27698:	mov	r0, r6
   2769c:	str	fp, [sp]
   276a0:	ldr	ip, [sp, #72]	; 0x48
   276a4:	blx	ip
   276a8:	cmp	r5, r0
   276ac:	mov	r4, r0
   276b0:	beq	27570 <flatcc_json_parser_space_ext@@Base+0x3c4>
   276b4:	mov	r1, #1
   276b8:	ldr	r0, [r6]
   276bc:	bl	228b4 <flatcc_builder_extend_offset_vector@@Base>
   276c0:	cmp	r0, #0
   276c4:	beq	27558 <flatcc_json_parser_space_ext@@Base+0x3ac>
   276c8:	ldr	r3, [sp, #20]
   276cc:	sub	r2, r5, r4
   276d0:	cmp	r2, #1
   276d4:	str	r3, [r0]
   276d8:	ble	276ec <flatcc_json_parser_space_ext@@Base+0x540>
   276dc:	ldrb	r3, [r4]
   276e0:	cmp	r3, #32
   276e4:	bhi	2770c <flatcc_json_parser_space_ext@@Base+0x560>
   276e8:	beq	2777c <flatcc_json_parser_space_ext@@Base+0x5d0>
   276ec:	mov	r1, r4
   276f0:	mov	r2, r5
   276f4:	mov	r0, r6
   276f8:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   276fc:	mov	r4, r0
   27700:	cmp	r5, r4
   27704:	beq	27774 <flatcc_json_parser_space_ext@@Base+0x5c8>
   27708:	ldrb	r3, [r4]
   2770c:	cmp	r3, #44	; 0x2c
   27710:	beq	27790 <flatcc_json_parser_space_ext@@Base+0x5e4>
   27714:	cmp	r3, #93	; 0x5d
   27718:	add	r7, r7, #1
   2771c:	beq	2773c <flatcc_json_parser_space_ext@@Base+0x590>
   27720:	mov	r1, r4
   27724:	mov	r3, #9
   27728:	mov	r2, r5
   2772c:	mov	r0, r6
   27730:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   27734:	mov	r4, r0
   27738:	b	275c0 <flatcc_json_parser_space_ext@@Base+0x414>
   2773c:	add	r1, r4, #1
   27740:	sub	r3, r5, r1
   27744:	cmp	r3, #1
   27748:	ble	27760 <flatcc_json_parser_space_ext@@Base+0x5b4>
   2774c:	ldrb	r3, [r4, #1]
   27750:	cmp	r3, #32
   27754:	movhi	r4, r1
   27758:	bhi	275c0 <flatcc_json_parser_space_ext@@Base+0x414>
   2775c:	beq	27800 <flatcc_json_parser_space_ext@@Base+0x654>
   27760:	mov	r2, r5
   27764:	mov	r0, r6
   27768:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   2776c:	mov	r4, r0
   27770:	b	275c0 <flatcc_json_parser_space_ext@@Base+0x414>
   27774:	add	r7, r7, #1
   27778:	b	275c0 <flatcc_json_parser_space_ext@@Base+0x414>
   2777c:	ldrb	r3, [r4, #1]
   27780:	cmp	r3, #32
   27784:	addhi	r4, r4, #1
   27788:	bls	276ec <flatcc_json_parser_space_ext@@Base+0x540>
   2778c:	b	27700 <flatcc_json_parser_space_ext@@Base+0x554>
   27790:	add	sl, r4, #1
   27794:	sub	r3, r5, sl
   27798:	cmp	r3, #1
   2779c:	ble	277b0 <flatcc_json_parser_space_ext@@Base+0x604>
   277a0:	ldrb	r3, [r4, #1]
   277a4:	cmp	r3, #32
   277a8:	bhi	277c4 <flatcc_json_parser_space_ext@@Base+0x618>
   277ac:	beq	27814 <flatcc_json_parser_space_ext@@Base+0x668>
   277b0:	mov	r1, sl
   277b4:	mov	r2, r5
   277b8:	mov	r0, r6
   277bc:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   277c0:	mov	sl, r0
   277c4:	cmp	r5, sl
   277c8:	add	r7, r7, #1
   277cc:	beq	27850 <flatcc_json_parser_space_ext@@Base+0x6a4>
   277d0:	ldrb	r3, [sl]
   277d4:	cmp	r3, #93	; 0x5d
   277d8:	beq	27828 <flatcc_json_parser_space_ext@@Base+0x67c>
   277dc:	cmp	r8, r7
   277e0:	bne	27680 <flatcc_json_parser_space_ext@@Base+0x4d4>
   277e4:	mov	r2, r5
   277e8:	mov	r1, sl
   277ec:	mov	r0, r6
   277f0:	mov	r3, #30
   277f4:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   277f8:	mov	r4, r0
   277fc:	b	27570 <flatcc_json_parser_space_ext@@Base+0x3c4>
   27800:	ldrb	r3, [r4, #2]
   27804:	cmp	r3, #32
   27808:	addhi	r4, r4, #2
   2780c:	bls	27760 <flatcc_json_parser_space_ext@@Base+0x5b4>
   27810:	b	275c0 <flatcc_json_parser_space_ext@@Base+0x414>
   27814:	ldrb	r3, [r4, #2]
   27818:	cmp	r3, #32
   2781c:	addhi	sl, r4, #2
   27820:	bls	277b0 <flatcc_json_parser_space_ext@@Base+0x604>
   27824:	b	277c4 <flatcc_json_parser_space_ext@@Base+0x618>
   27828:	add	r4, sl, #1
   2782c:	sub	r3, r5, r4
   27830:	cmp	r3, #1
   27834:	ble	27848 <flatcc_json_parser_space_ext@@Base+0x69c>
   27838:	ldrb	r3, [sl, #1]
   2783c:	cmp	r3, #32
   27840:	bhi	275c0 <flatcc_json_parser_space_ext@@Base+0x414>
   27844:	beq	27880 <flatcc_json_parser_space_ext@@Base+0x6d4>
   27848:	mov	r1, r4
   2784c:	b	27760 <flatcc_json_parser_space_ext@@Base+0x5b4>
   27850:	mov	r3, #9
   27854:	mov	r2, r5
   27858:	mov	r1, r5
   2785c:	mov	r0, r6
   27860:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   27864:	mov	r4, r0
   27868:	b	275c0 <flatcc_json_parser_space_ext@@Base+0x414>
   2786c:	ldrb	r3, [r4, #2]
   27870:	cmp	r3, #32
   27874:	addhi	sl, r4, #2
   27878:	bls	27648 <flatcc_json_parser_space_ext@@Base+0x49c>
   2787c:	b	2765c <flatcc_json_parser_space_ext@@Base+0x4b0>
   27880:	ldrb	r3, [sl, #2]
   27884:	cmp	r3, #32
   27888:	addhi	r4, sl, #2
   2788c:	bls	27848 <flatcc_json_parser_space_ext@@Base+0x69c>
   27890:	b	275c0 <flatcc_json_parser_space_ext@@Base+0x414>
   27894:	add	r4, sl, #1
   27898:	sub	r3, r5, r4
   2789c:	cmp	r3, #1
   278a0:	ble	278b8 <flatcc_json_parser_space_ext@@Base+0x70c>
   278a4:	ldrb	r3, [sl, #1]
   278a8:	cmp	r3, #32
   278ac:	movhi	r7, #0
   278b0:	bhi	275c0 <flatcc_json_parser_space_ext@@Base+0x414>
   278b4:	beq	278d4 <flatcc_json_parser_space_ext@@Base+0x728>
   278b8:	mov	r1, r4
   278bc:	mov	r2, r5
   278c0:	mov	r0, r6
   278c4:	mov	r7, #0
   278c8:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   278cc:	mov	r4, r0
   278d0:	b	275c0 <flatcc_json_parser_space_ext@@Base+0x414>
   278d4:	ldrb	r3, [sl, #2]
   278d8:	cmp	r3, #32
   278dc:	addhi	r4, sl, #2
   278e0:	movhi	r7, #0
   278e4:	bls	278b8 <flatcc_json_parser_space_ext@@Base+0x70c>
   278e8:	b	275c0 <flatcc_json_parser_space_ext@@Base+0x414>

000278ec <flatcc_json_parser_string_escape@@Base>:
   278ec:	strd	r4, [sp, #-12]!
   278f0:	str	lr, [sp, #8]
   278f4:	sub	lr, r2, r1
   278f8:	cmp	lr, #1
   278fc:	ble	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27900:	ldrb	ip, [r1]
   27904:	cmp	ip, #92	; 0x5c
   27908:	beq	27928 <flatcc_json_parser_string_escape@@Base+0x3c>
   2790c:	mov	ip, #0
   27910:	strb	ip, [r3]
   27914:	mov	r3, #18
   27918:	ldrd	r4, [sp]
   2791c:	ldr	lr, [sp, #8]
   27920:	add	sp, sp, #12
   27924:	b	270b8 <flatcc_json_parser_set_error@@Base>
   27928:	ldrb	ip, [r1, #1]
   2792c:	sub	ip, ip, #34	; 0x22
   27930:	cmp	ip, #86	; 0x56
   27934:	addls	pc, pc, ip, lsl #2
   27938:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   2793c:	b	27b28 <flatcc_json_parser_string_escape@@Base+0x23c>
   27940:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27944:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27948:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   2794c:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27950:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27954:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27958:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   2795c:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27960:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27964:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27968:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   2796c:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27970:	b	27b40 <flatcc_json_parser_string_escape@@Base+0x254>
   27974:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27978:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   2797c:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27980:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27984:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27988:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   2798c:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27990:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27994:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27998:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   2799c:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   279a0:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   279a4:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   279a8:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   279ac:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   279b0:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   279b4:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   279b8:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   279bc:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   279c0:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   279c4:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   279c8:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   279cc:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   279d0:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   279d4:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   279d8:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   279dc:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   279e0:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   279e4:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   279e8:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   279ec:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   279f0:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   279f4:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   279f8:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   279fc:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a00:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a04:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a08:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a0c:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a10:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a14:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a18:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a1c:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a20:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a24:	b	27b58 <flatcc_json_parser_string_escape@@Base+0x26c>
   27a28:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a2c:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a30:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a34:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a38:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a3c:	b	27b70 <flatcc_json_parser_string_escape@@Base+0x284>
   27a40:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a44:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a48:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a4c:	b	27b88 <flatcc_json_parser_string_escape@@Base+0x29c>
   27a50:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a54:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a58:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a5c:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a60:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a64:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a68:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a6c:	b	27ba0 <flatcc_json_parser_string_escape@@Base+0x2b4>
   27a70:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a74:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a78:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a7c:	b	27bb8 <flatcc_json_parser_string_escape@@Base+0x2cc>
   27a80:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a84:	b	27bd0 <flatcc_json_parser_string_escape@@Base+0x2e4>
   27a88:	b	27be8 <flatcc_json_parser_string_escape@@Base+0x2fc>
   27a8c:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a90:	b	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27a94:	b	27a98 <flatcc_json_parser_string_escape@@Base+0x1ac>
   27a98:	mov	ip, #1
   27a9c:	cmp	lr, #3
   27aa0:	strb	ip, [r3]
   27aa4:	ble	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27aa8:	ldrb	ip, [r1, #2]
   27aac:	sub	lr, ip, #48	; 0x30
   27ab0:	uxtb	r4, lr
   27ab4:	cmp	r4, #9
   27ab8:	lslls	ip, lr, #4
   27abc:	uxtbls	ip, ip
   27ac0:	bls	27ae0 <flatcc_json_parser_string_escape@@Base+0x1f4>
   27ac4:	orr	ip, ip, #32
   27ac8:	sub	lr, ip, #97	; 0x61
   27acc:	cmp	lr, #5
   27ad0:	bhi	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27ad4:	sub	ip, ip, #87	; 0x57
   27ad8:	lsl	ip, ip, #4
   27adc:	uxtb	ip, ip
   27ae0:	ldrb	lr, [r1, #3]
   27ae4:	sub	r4, lr, #48	; 0x30
   27ae8:	uxtb	r4, r4
   27aec:	cmp	r4, #9
   27af0:	orrls	ip, r4, ip
   27af4:	bls	27b14 <flatcc_json_parser_string_escape@@Base+0x228>
   27af8:	orr	lr, lr, #32
   27afc:	sub	r4, lr, #97	; 0x61
   27b00:	cmp	r4, #5
   27b04:	bhi	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27b08:	sub	lr, lr, #87	; 0x57
   27b0c:	orr	ip, lr, ip
   27b10:	uxtb	ip, ip
   27b14:	add	r0, r1, #4
   27b18:	strb	ip, [r3, #1]
   27b1c:	ldrd	r4, [sp]
   27b20:	add	sp, sp, #8
   27b24:	pop	{pc}		; (ldr pc, [sp], #4)
   27b28:	mov	ip, #1
   27b2c:	mov	r2, #34	; 0x22
   27b30:	add	r0, r1, #2
   27b34:	strb	ip, [r3]
   27b38:	strb	r2, [r3, #1]
   27b3c:	b	27b1c <flatcc_json_parser_string_escape@@Base+0x230>
   27b40:	mov	ip, #1
   27b44:	mov	r2, #47	; 0x2f
   27b48:	add	r0, r1, #2
   27b4c:	strb	ip, [r3]
   27b50:	strb	r2, [r3, #1]
   27b54:	b	27b1c <flatcc_json_parser_string_escape@@Base+0x230>
   27b58:	mov	ip, #1
   27b5c:	mov	r2, #92	; 0x5c
   27b60:	add	r0, r1, #2
   27b64:	strb	ip, [r3]
   27b68:	strb	r2, [r3, #1]
   27b6c:	b	27b1c <flatcc_json_parser_string_escape@@Base+0x230>
   27b70:	mov	ip, #1
   27b74:	mov	r2, #8
   27b78:	add	r0, r1, #2
   27b7c:	strb	ip, [r3]
   27b80:	strb	r2, [r3, #1]
   27b84:	b	27b1c <flatcc_json_parser_string_escape@@Base+0x230>
   27b88:	mov	ip, #1
   27b8c:	mov	r2, #12
   27b90:	add	r0, r1, #2
   27b94:	strb	ip, [r3]
   27b98:	strb	r2, [r3, #1]
   27b9c:	b	27b1c <flatcc_json_parser_string_escape@@Base+0x230>
   27ba0:	mov	ip, #1
   27ba4:	mov	r2, #10
   27ba8:	add	r0, r1, #2
   27bac:	strb	ip, [r3]
   27bb0:	strb	r2, [r3, #1]
   27bb4:	b	27b1c <flatcc_json_parser_string_escape@@Base+0x230>
   27bb8:	mov	ip, #1
   27bbc:	mov	r2, #13
   27bc0:	add	r0, r1, #2
   27bc4:	strb	ip, [r3]
   27bc8:	strb	r2, [r3, #1]
   27bcc:	b	27b1c <flatcc_json_parser_string_escape@@Base+0x230>
   27bd0:	mov	ip, #1
   27bd4:	mov	r2, #9
   27bd8:	add	r0, r1, #2
   27bdc:	strb	ip, [r3]
   27be0:	strb	r2, [r3, #1]
   27be4:	b	27b1c <flatcc_json_parser_string_escape@@Base+0x230>
   27be8:	cmp	lr, #5
   27bec:	ble	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27bf0:	ldrb	ip, [r1, #2]
   27bf4:	sub	lr, ip, #48	; 0x30
   27bf8:	uxtb	r4, lr
   27bfc:	cmp	r4, #9
   27c00:	lslls	ip, lr, #12
   27c04:	uxthls	ip, ip
   27c08:	bls	27c28 <flatcc_json_parser_string_escape@@Base+0x33c>
   27c0c:	orr	ip, ip, #32
   27c10:	sub	lr, ip, #97	; 0x61
   27c14:	cmp	lr, #5
   27c18:	bhi	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27c1c:	sub	ip, ip, #87	; 0x57
   27c20:	lsl	ip, ip, #12
   27c24:	and	ip, ip, #61440	; 0xf000
   27c28:	ldrb	lr, [r1, #3]
   27c2c:	sub	r4, lr, #48	; 0x30
   27c30:	uxtb	r5, r4
   27c34:	cmp	r5, #9
   27c38:	bhi	27cbc <flatcc_json_parser_string_escape@@Base+0x3d0>
   27c3c:	uxth	r4, r4
   27c40:	orr	ip, ip, r4, lsl #8
   27c44:	and	ip, ip, #65280	; 0xff00
   27c48:	ldrb	lr, [r1, #4]
   27c4c:	sub	r4, lr, #48	; 0x30
   27c50:	uxtb	r5, r4
   27c54:	cmp	r5, #9
   27c58:	bhi	27ce0 <flatcc_json_parser_string_escape@@Base+0x3f4>
   27c5c:	uxth	r4, r4
   27c60:	orr	ip, ip, r4, lsl #4
   27c64:	uxth	ip, ip
   27c68:	ldrb	lr, [r1, #5]
   27c6c:	sub	r4, lr, #48	; 0x30
   27c70:	uxtb	r5, r4
   27c74:	cmp	r5, #9
   27c78:	orrls	r2, ip, r4
   27c7c:	uxthls	r2, r2
   27c80:	bls	27ca0 <flatcc_json_parser_string_escape@@Base+0x3b4>
   27c84:	orr	lr, lr, #32
   27c88:	sub	r4, lr, #97	; 0x61
   27c8c:	cmp	r4, #5
   27c90:	bhi	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27c94:	sub	r2, lr, #87	; 0x57
   27c98:	orr	r2, ip, r2
   27c9c:	uxth	r2, r2
   27ca0:	cmp	r2, #127	; 0x7f
   27ca4:	bhi	27d04 <flatcc_json_parser_string_escape@@Base+0x418>
   27ca8:	mov	r0, #1
   27cac:	strb	r0, [r3]
   27cb0:	strb	r2, [r3, #1]
   27cb4:	add	r0, r1, #6
   27cb8:	b	27b1c <flatcc_json_parser_string_escape@@Base+0x230>
   27cbc:	orr	lr, lr, #32
   27cc0:	sub	r4, lr, #97	; 0x61
   27cc4:	cmp	r4, #5
   27cc8:	bhi	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27ccc:	sub	lr, lr, #87	; 0x57
   27cd0:	uxth	lr, lr
   27cd4:	orr	ip, ip, lr, lsl #8
   27cd8:	and	ip, ip, #65280	; 0xff00
   27cdc:	b	27c48 <flatcc_json_parser_string_escape@@Base+0x35c>
   27ce0:	orr	lr, lr, #32
   27ce4:	sub	r4, lr, #97	; 0x61
   27ce8:	cmp	r4, #5
   27cec:	bhi	2790c <flatcc_json_parser_string_escape@@Base+0x20>
   27cf0:	sub	lr, lr, #87	; 0x57
   27cf4:	uxth	lr, lr
   27cf8:	orr	ip, ip, lr, lsl #4
   27cfc:	uxth	ip, ip
   27d00:	b	27c68 <flatcc_json_parser_string_escape@@Base+0x37c>
   27d04:	and	r0, r2, #63	; 0x3f
   27d08:	cmp	r2, #2048	; 0x800
   27d0c:	lsr	ip, r2, #6
   27d10:	orr	r0, r0, #128	; 0x80
   27d14:	mvn	lr, #127	; 0x7f
   27d18:	bcs	27d38 <flatcc_json_parser_string_escape@@Base+0x44c>
   27d1c:	mvn	ip, ip, lsl #26
   27d20:	mov	r2, #2
   27d24:	mvn	ip, ip, lsr #26
   27d28:	strb	r2, [r3]
   27d2c:	strb	r0, [r3, #2]
   27d30:	strb	ip, [r3, #1]
   27d34:	b	27cb4 <flatcc_json_parser_string_escape@@Base+0x3c8>
   27d38:	mvn	r4, #31
   27d3c:	and	ip, ip, #63	; 0x3f
   27d40:	strb	r0, [r3, #3]
   27d44:	orr	r2, r4, r2, lsr #12
   27d48:	orr	ip, lr, ip
   27d4c:	mov	r0, #3
   27d50:	strb	r0, [r3]
   27d54:	strb	r2, [r3, #1]
   27d58:	strb	ip, [r3, #2]
   27d5c:	b	27cb4 <flatcc_json_parser_string_escape@@Base+0x3c8>

00027d60 <flatcc_json_parser_skip_constant@@Base>:
   27d60:	cmp	r1, r2
   27d64:	strd	r4, [sp, #-16]!
   27d68:	mov	r4, r1
   27d6c:	str	r6, [sp, #8]
   27d70:	str	lr, [sp, #12]
   27d74:	beq	27e04 <flatcc_json_parser_skip_constant@@Base+0xa4>
   27d78:	mov	r5, r2
   27d7c:	mov	r6, r0
   27d80:	b	27de0 <flatcc_json_parser_skip_constant@@Base+0x80>
   27d84:	sub	r2, r3, #48	; 0x30
   27d88:	cmp	r3, #46	; 0x2e
   27d8c:	cmpne	r2, #9
   27d90:	bls	27df8 <flatcc_json_parser_skip_constant@@Base+0x98>
   27d94:	orr	r2, r3, #32
   27d98:	sub	r2, r2, #97	; 0x61
   27d9c:	cmp	r2, #25
   27da0:	bls	27df8 <flatcc_json_parser_skip_constant@@Base+0x98>
   27da4:	sub	r2, r5, r4
   27da8:	cmp	r2, #1
   27dac:	ble	27dbc <flatcc_json_parser_skip_constant@@Base+0x5c>
   27db0:	cmp	r3, #32
   27db4:	bhi	27e04 <flatcc_json_parser_skip_constant@@Base+0xa4>
   27db8:	beq	27e18 <flatcc_json_parser_skip_constant@@Base+0xb8>
   27dbc:	mov	r2, r5
   27dc0:	mov	r1, r4
   27dc4:	mov	r0, r6
   27dc8:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   27dcc:	cmp	r0, r4
   27dd0:	beq	27e04 <flatcc_json_parser_skip_constant@@Base+0xa4>
   27dd4:	mov	r4, r0
   27dd8:	cmp	r5, r4
   27ddc:	beq	27e04 <flatcc_json_parser_skip_constant@@Base+0xa4>
   27de0:	ldrb	r3, [r4]
   27de4:	sub	r2, r3, #95	; 0x5f
   27de8:	clz	r2, r2
   27dec:	lsr	r2, r2, #5
   27df0:	orrs	r2, r2, r3, lsr #7
   27df4:	beq	27d84 <flatcc_json_parser_skip_constant@@Base+0x24>
   27df8:	add	r4, r4, #1
   27dfc:	cmp	r5, r4
   27e00:	bne	27de0 <flatcc_json_parser_skip_constant@@Base+0x80>
   27e04:	mov	r0, r4
   27e08:	ldrd	r4, [sp]
   27e0c:	ldr	r6, [sp, #8]
   27e10:	add	sp, sp, #12
   27e14:	pop	{pc}		; (ldr pc, [sp], #4)
   27e18:	ldrb	r3, [r4, #1]
   27e1c:	cmp	r3, #32
   27e20:	addhi	r0, r4, #1
   27e24:	bls	27dbc <flatcc_json_parser_skip_constant@@Base+0x5c>
   27e28:	b	27dcc <flatcc_json_parser_skip_constant@@Base+0x6c>

00027e2c <flatcc_json_parser_match_constant@@Base>:
   27e2c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   27e30:	ldr	r5, [sp, #24]
   27e34:	strd	r6, [sp, #8]
   27e38:	str	lr, [sp, #20]
   27e3c:	sub	lr, r2, r1
   27e40:	cmp	lr, r3
   27e44:	str	r8, [sp, #16]
   27e48:	movle	r3, #0
   27e4c:	movle	r0, r1
   27e50:	strle	r3, [r5]
   27e54:	ble	27e98 <flatcc_json_parser_match_constant@@Base+0x6c>
   27e58:	ldr	ip, [r0, #12]
   27e5c:	mov	r6, r2
   27e60:	mov	lr, r0
   27e64:	mov	r7, r1
   27e68:	add	r4, r1, r3
   27e6c:	cmp	ip, #0
   27e70:	bne	27eac <flatcc_json_parser_match_constant@@Base+0x80>
   27e74:	ldrb	r3, [r1, r3]
   27e78:	cmp	r3, #32
   27e7c:	beq	27f68 <flatcc_json_parser_match_constant@@Base+0x13c>
   27e80:	cmp	r3, #34	; 0x22
   27e84:	beq	27fc0 <flatcc_json_parser_match_constant@@Base+0x194>
   27e88:	cmp	r3, #92	; 0x5c
   27e8c:	beq	27f30 <flatcc_json_parser_match_constant@@Base+0x104>
   27e90:	mov	r0, r1
   27e94:	str	ip, [r5]
   27e98:	ldrd	r4, [sp]
   27e9c:	ldrd	r6, [sp, #8]
   27ea0:	ldr	r8, [sp, #16]
   27ea4:	add	sp, sp, #20
   27ea8:	pop	{pc}		; (ldr pc, [sp], #4)
   27eac:	sub	r2, r2, r4
   27eb0:	cmp	r2, #1
   27eb4:	ble	27ec8 <flatcc_json_parser_match_constant@@Base+0x9c>
   27eb8:	ldrb	r3, [r1, r3]
   27ebc:	cmp	r3, #32
   27ec0:	bhi	27ffc <flatcc_json_parser_match_constant@@Base+0x1d0>
   27ec4:	beq	28020 <flatcc_json_parser_match_constant@@Base+0x1f4>
   27ec8:	mov	r0, lr
   27ecc:	mov	r2, r6
   27ed0:	mov	r1, r4
   27ed4:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   27ed8:	cmp	r6, r0
   27edc:	beq	27f5c <flatcc_json_parser_match_constant@@Base+0x130>
   27ee0:	cmp	r4, r0
   27ee4:	beq	27f10 <flatcc_json_parser_match_constant@@Base+0xe4>
   27ee8:	ldrb	r3, [r0]
   27eec:	sub	r2, r3, #95	; 0x5f
   27ef0:	clz	r2, r2
   27ef4:	lsr	r2, r2, #5
   27ef8:	orrs	r2, r2, r3, lsr #7
   27efc:	bne	27ff0 <flatcc_json_parser_match_constant@@Base+0x1c4>
   27f00:	orr	r3, r3, #32
   27f04:	sub	r3, r3, #97	; 0x61
   27f08:	cmp	r3, #25
   27f0c:	bls	27ff0 <flatcc_json_parser_match_constant@@Base+0x1c4>
   27f10:	mov	r3, #0
   27f14:	str	r3, [r5]
   27f18:	ldrb	r3, [r0]
   27f1c:	and	r2, r3, #223	; 0xdf
   27f20:	cmp	r3, #44	; 0x2c
   27f24:	cmpne	r2, #93	; 0x5d
   27f28:	movne	r0, r7
   27f2c:	b	27e98 <flatcc_json_parser_match_constant@@Base+0x6c>
   27f30:	mov	r1, r4
   27f34:	mov	r3, #18
   27f38:	ldrd	r6, [sp, #8]
   27f3c:	ldr	r8, [sp, #16]
   27f40:	ldr	lr, [sp, #20]
   27f44:	str	ip, [r5]
   27f48:	ldrd	r4, [sp]
   27f4c:	add	sp, sp, #24
   27f50:	b	270b8 <flatcc_json_parser_set_error@@Base>
   27f54:	mov	r4, r2
   27f58:	mov	r0, r4
   27f5c:	mov	r3, #0
   27f60:	str	r3, [r5]
   27f64:	b	27e98 <flatcc_json_parser_match_constant@@Base+0x6c>
   27f68:	add	r3, r4, #1
   27f6c:	cmp	r2, r3
   27f70:	beq	27f54 <flatcc_json_parser_match_constant@@Base+0x128>
   27f74:	ldrb	r1, [r4, #1]
   27f78:	cmp	r1, #32
   27f7c:	bne	27fa4 <flatcc_json_parser_match_constant@@Base+0x178>
   27f80:	add	r3, r4, #2
   27f84:	b	27f94 <flatcc_json_parser_match_constant@@Base+0x168>
   27f88:	ldrb	r1, [r3], #1
   27f8c:	cmp	r1, #32
   27f90:	bne	27fa8 <flatcc_json_parser_match_constant@@Base+0x17c>
   27f94:	cmp	r3, r6
   27f98:	mov	r4, r3
   27f9c:	bne	27f88 <flatcc_json_parser_match_constant@@Base+0x15c>
   27fa0:	b	27f58 <flatcc_json_parser_match_constant@@Base+0x12c>
   27fa4:	mov	r4, r3
   27fa8:	cmp	r1, #34	; 0x22
   27fac:	beq	27fc0 <flatcc_json_parser_match_constant@@Base+0x194>
   27fb0:	mov	r3, #1
   27fb4:	mov	r0, r4
   27fb8:	str	r3, [r5]
   27fbc:	b	27e98 <flatcc_json_parser_match_constant@@Base+0x6c>
   27fc0:	add	r0, r4, #1
   27fc4:	cmn	r0, #1
   27fc8:	bge	27fdc <flatcc_json_parser_match_constant@@Base+0x1b0>
   27fcc:	ldrb	r3, [r4, #1]
   27fd0:	cmp	r3, #32
   27fd4:	bhi	27f5c <flatcc_json_parser_match_constant@@Base+0x130>
   27fd8:	beq	2800c <flatcc_json_parser_match_constant@@Base+0x1e0>
   27fdc:	mov	r1, r0
   27fe0:	mov	r2, #0
   27fe4:	mov	r0, lr
   27fe8:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   27fec:	b	27f5c <flatcc_json_parser_match_constant@@Base+0x130>
   27ff0:	mov	r3, #1
   27ff4:	str	r3, [r5]
   27ff8:	b	27e98 <flatcc_json_parser_match_constant@@Base+0x6c>
   27ffc:	cmp	r4, r6
   28000:	mov	r0, r4
   28004:	bne	27f10 <flatcc_json_parser_match_constant@@Base+0xe4>
   28008:	b	27f5c <flatcc_json_parser_match_constant@@Base+0x130>
   2800c:	ldrb	r3, [r4, #2]
   28010:	cmp	r3, #32
   28014:	addhi	r0, r4, #2
   28018:	bls	27fdc <flatcc_json_parser_match_constant@@Base+0x1b0>
   2801c:	b	27f5c <flatcc_json_parser_match_constant@@Base+0x130>
   28020:	ldrb	r3, [r4, #1]
   28024:	cmp	r3, #32
   28028:	addhi	r0, r4, #1
   2802c:	bls	27ec8 <flatcc_json_parser_match_constant@@Base+0x9c>
   28030:	b	27ed8 <flatcc_json_parser_match_constant@@Base+0xac>

00028034 <flatcc_json_parser_double@@Base>:
   28034:	strd	r4, [sp, #-24]!	; 0xffffffe8
   28038:	mov	r4, #0
   2803c:	mov	r5, #0
   28040:	cmp	r1, r2
   28044:	strd	r6, [sp, #8]
   28048:	str	r8, [sp, #16]
   2804c:	str	lr, [sp, #20]
   28050:	strd	r4, [r3]
   28054:	beq	280fc <flatcc_json_parser_double@@Base+0xc8>
   28058:	ldrb	ip, [r1]
   2805c:	cmp	ip, #45	; 0x2d
   28060:	addeq	ip, r1, #1
   28064:	movne	ip, r1
   28068:	sub	lr, r2, ip
   2806c:	cmp	lr, #1
   28070:	ble	28088 <flatcc_json_parser_double@@Base+0x54>
   28074:	ldrb	lr, [ip]
   28078:	cmp	lr, #46	; 0x2e
   2807c:	beq	280e0 <flatcc_json_parser_double@@Base+0xac>
   28080:	cmp	lr, #48	; 0x30
   28084:	beq	28114 <flatcc_json_parser_double@@Base+0xe0>
   28088:	mov	r6, r1
   2808c:	mov	r4, r2
   28090:	sub	r1, r4, r1
   28094:	mov	r7, r0
   28098:	mov	r2, r3
   2809c:	mov	r0, r6
   280a0:	mov	r5, r3
   280a4:	bl	263c4 <grisu3_diy_fp_encode_double@@Base+0x5f8>
   280a8:	cmp	r6, r0
   280ac:	cmpne	r0, #0
   280b0:	mov	r1, r0
   280b4:	bne	280fc <flatcc_json_parser_double@@Base+0xc8>
   280b8:	vldr	d7, [r5]
   280bc:	mov	r2, r4
   280c0:	mov	r1, r6
   280c4:	mov	r0, r7
   280c8:	vldr	d6, [pc, #88]	; 28128 <flatcc_json_parser_double@@Base+0xf4>
   280cc:	vabs.f64	d7, d7
   280d0:	vcmp.f64	d7, d6
   280d4:	vmrs	APSR_nzcv, fpscr
   280d8:	movgt	r3, #7
   280dc:	bgt	280e4 <flatcc_json_parser_double@@Base+0xb0>
   280e0:	mov	r3, #6
   280e4:	ldrd	r4, [sp]
   280e8:	ldrd	r6, [sp, #8]
   280ec:	ldr	r8, [sp, #16]
   280f0:	ldr	lr, [sp, #20]
   280f4:	add	sp, sp, #24
   280f8:	b	270b8 <flatcc_json_parser_set_error@@Base>
   280fc:	ldrd	r4, [sp]
   28100:	mov	r0, r1
   28104:	ldrd	r6, [sp, #8]
   28108:	ldr	r8, [sp, #16]
   2810c:	add	sp, sp, #20
   28110:	pop	{pc}		; (ldr pc, [sp], #4)
   28114:	ldrb	ip, [ip, #1]
   28118:	cmp	ip, #48	; 0x30
   2811c:	bne	28088 <flatcc_json_parser_double@@Base+0x54>
   28120:	b	280e0 <flatcc_json_parser_double@@Base+0xac>
   28124:	nop	{0}
   28128:			; <UNDEFINED> instruction: 0xffffffff
   2812c:	svcvc	0x00efffff

00028130 <flatcc_json_parser_float@@Base>:
   28130:	mov	ip, #0
   28134:	cmp	r1, r2
   28138:	str	ip, [r3]
   2813c:	beq	28234 <flatcc_json_parser_float@@Base+0x104>
   28140:	strd	r4, [sp, #-20]!	; 0xffffffec
   28144:	mov	r5, r2
   28148:	mov	r4, r1
   2814c:	strd	r6, [sp, #8]
   28150:	mov	r6, r3
   28154:	mov	r7, r0
   28158:	str	lr, [sp, #16]
   2815c:	sub	sp, sp, #12
   28160:	ldrb	ip, [r1]
   28164:	cmp	ip, #45	; 0x2d
   28168:	addeq	ip, r1, #1
   2816c:	movne	ip, r1
   28170:	sub	r3, r2, ip
   28174:	cmp	r3, #1
   28178:	ble	28190 <flatcc_json_parser_float@@Base+0x60>
   2817c:	ldrb	r3, [ip]
   28180:	cmp	r3, #46	; 0x2e
   28184:	beq	2821c <flatcc_json_parser_float@@Base+0xec>
   28188:	cmp	r3, #48	; 0x30
   2818c:	beq	28210 <flatcc_json_parser_float@@Base+0xe0>
   28190:	mov	r2, sp
   28194:	sub	r1, r5, r4
   28198:	mov	r0, r4
   2819c:	bl	263c4 <grisu3_diy_fp_encode_double@@Base+0x5f8>
   281a0:	vldr	d6, [sp]
   281a4:	vldr	s14, [pc, #144]	; 2823c <flatcc_json_parser_float@@Base+0x10c>
   281a8:	vcvt.f32.f64	s15, d6
   281ac:	vabs.f32	s11, s15
   281b0:	vstr	s15, [r6]
   281b4:	vcmp.f32	s11, s14
   281b8:	vmrs	APSR_nzcv, fpscr
   281bc:	bgt	281e0 <flatcc_json_parser_float@@Base+0xb0>
   281c0:	cmp	r4, r0
   281c4:	cmpne	r0, #0
   281c8:	beq	2821c <flatcc_json_parser_float@@Base+0xec>
   281cc:	add	sp, sp, #12
   281d0:	ldrd	r4, [sp]
   281d4:	ldrd	r6, [sp, #8]
   281d8:	add	sp, sp, #16
   281dc:	pop	{pc}		; (ldr pc, [sp], #4)
   281e0:	vcmpe.f64	d6, #0.0
   281e4:	vldr	s14, [pc, #84]	; 28240 <flatcc_json_parser_float@@Base+0x110>
   281e8:	mov	r2, r5
   281ec:	mov	r1, r4
   281f0:	mov	r0, r7
   281f4:	vldr	s15, [pc, #72]	; 28244 <flatcc_json_parser_float@@Base+0x114>
   281f8:	mov	r3, #7
   281fc:	vmrs	APSR_nzcv, fpscr
   28200:	vmovpl.f32	s15, s14
   28204:	vstr	s15, [r6]
   28208:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   2820c:	b	281cc <flatcc_json_parser_float@@Base+0x9c>
   28210:	ldrb	r3, [ip, #1]
   28214:	cmp	r3, #48	; 0x30
   28218:	bne	28190 <flatcc_json_parser_float@@Base+0x60>
   2821c:	mov	r2, r5
   28220:	mov	r1, r4
   28224:	mov	r0, r7
   28228:	mov	r3, #6
   2822c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   28230:	b	281cc <flatcc_json_parser_float@@Base+0x9c>
   28234:	mov	r0, r1
   28238:	bx	lr
   2823c:	svcvc	0x007fffff
   28240:	svcvc	0x00800000
   28244:			; <UNDEFINED> instruction: 0xff800000

00028248 <flatcc_json_parser_generic_json@@Base>:
   28248:	cmp	r1, r2
   2824c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   28250:	strd	r6, [sp, #8]
   28254:	strd	r8, [sp, #16]
   28258:	strd	sl, [sp, #24]
   2825c:	mov	fp, r1
   28260:	str	lr, [sp, #32]
   28264:	sub	sp, sp, #524	; 0x20c
   28268:	beq	28b30 <flatcc_json_parser_generic_json@@Base+0x8e8>
   2826c:	ldrb	r3, [r1]
   28270:	add	r7, sp, #8
   28274:	mov	r4, r2
   28278:	mov	r6, r0
   2827c:	mov	r9, #125	; 0x7d
   28280:	mov	r5, r7
   28284:	add	r8, sp, #4
   28288:	cmp	r5, r7
   2828c:	beq	28344 <flatcc_json_parser_generic_json@@Base+0xfc>
   28290:	ldrb	r2, [r5, #-1]
   28294:	cmp	r2, #125	; 0x7d
   28298:	beq	287a8 <flatcc_json_parser_generic_json@@Base+0x560>
   2829c:	cmp	r3, #57	; 0x39
   282a0:	bls	2834c <flatcc_json_parser_generic_json@@Base+0x104>
   282a4:	cmp	r3, #91	; 0x5b
   282a8:	beq	28784 <flatcc_json_parser_generic_json@@Base+0x53c>
   282ac:	cmp	r3, #123	; 0x7b
   282b0:	bne	284b4 <flatcc_json_parser_generic_json@@Base+0x26c>
   282b4:	add	r3, sp, #520	; 0x208
   282b8:	cmp	r5, r3
   282bc:	beq	28790 <flatcc_json_parser_generic_json@@Base+0x548>
   282c0:	add	r1, fp, #1
   282c4:	strb	r9, [r5], #1
   282c8:	sub	r3, r4, r1
   282cc:	cmp	r3, #1
   282d0:	ble	282f8 <flatcc_json_parser_generic_json@@Base+0xb0>
   282d4:	ldrb	r3, [fp, #1]
   282d8:	cmp	r3, #32
   282dc:	movhi	fp, r1
   282e0:	bhi	28308 <flatcc_json_parser_generic_json@@Base+0xc0>
   282e4:	bne	282f8 <flatcc_json_parser_generic_json@@Base+0xb0>
   282e8:	ldrb	r3, [fp, #2]
   282ec:	cmp	r3, #32
   282f0:	addhi	fp, fp, #2
   282f4:	bhi	28308 <flatcc_json_parser_generic_json@@Base+0xc0>
   282f8:	mov	r2, r4
   282fc:	mov	r0, r6
   28300:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   28304:	mov	fp, r0
   28308:	cmp	r4, fp
   2830c:	beq	28b30 <flatcc_json_parser_generic_json@@Base+0x8e8>
   28310:	ldrb	r3, [fp]
   28314:	cmp	r3, #125	; 0x7d
   28318:	bne	28288 <flatcc_json_parser_generic_json@@Base+0x40>
   2831c:	cmp	r5, r7
   28320:	mov	r0, fp
   28324:	bne	2843c <flatcc_json_parser_generic_json@@Base+0x1f4>
   28328:	add	sp, sp, #524	; 0x20c
   2832c:	ldrd	r4, [sp]
   28330:	ldrd	r6, [sp, #8]
   28334:	ldrd	r8, [sp, #16]
   28338:	ldrd	sl, [sp, #24]
   2833c:	add	sp, sp, #32
   28340:	pop	{pc}		; (ldr pc, [sp], #4)
   28344:	cmp	r3, #57	; 0x39
   28348:	bhi	2862c <flatcc_json_parser_generic_json@@Base+0x3e4>
   2834c:	cmp	r3, #48	; 0x30
   28350:	bcs	286c0 <flatcc_json_parser_generic_json@@Base+0x478>
   28354:	cmp	r3, #34	; 0x22
   28358:	bne	284ac <flatcc_json_parser_generic_json@@Base+0x264>
   2835c:	add	fp, fp, #1
   28360:	cmp	r4, fp
   28364:	bne	283b4 <flatcc_json_parser_generic_json@@Base+0x16c>
   28368:	b	288d8 <flatcc_json_parser_generic_json@@Base+0x690>
   2836c:	mov	r1, fp
   28370:	mov	r2, r4
   28374:	mov	r0, r6
   28378:	bl	270e4 <flatcc_json_parser_string_part@@Base>
   2837c:	mov	fp, r0
   28380:	mov	r1, r0
   28384:	cmp	r4, fp
   28388:	mov	r3, r8
   2838c:	mov	r2, r4
   28390:	mov	r0, r6
   28394:	beq	283a4 <flatcc_json_parser_generic_json@@Base+0x15c>
   28398:	ldrb	lr, [fp]
   2839c:	cmp	lr, #34	; 0x22
   283a0:	beq	283c0 <flatcc_json_parser_generic_json@@Base+0x178>
   283a4:	bl	278ec <flatcc_json_parser_string_escape@@Base>
   283a8:	cmp	r4, r0
   283ac:	mov	fp, r0
   283b0:	beq	288d8 <flatcc_json_parser_generic_json@@Base+0x690>
   283b4:	ldrb	r3, [fp]
   283b8:	cmp	r3, #34	; 0x22
   283bc:	bne	2836c <flatcc_json_parser_generic_json@@Base+0x124>
   283c0:	add	r0, fp, #1
   283c4:	cmp	r4, r0
   283c8:	bne	28434 <flatcc_json_parser_generic_json@@Base+0x1ec>
   283cc:	b	28c6c <flatcc_json_parser_generic_json@@Base+0xa24>
   283d0:	cmp	r2, #1
   283d4:	ble	283e8 <flatcc_json_parser_generic_json@@Base+0x1a0>
   283d8:	ldrb	r3, [r0]
   283dc:	cmp	r3, #32
   283e0:	bhi	283f8 <flatcc_json_parser_generic_json@@Base+0x1b0>
   283e4:	beq	28518 <flatcc_json_parser_generic_json@@Base+0x2d0>
   283e8:	mov	r1, r0
   283ec:	mov	r2, r4
   283f0:	mov	r0, r6
   283f4:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   283f8:	cmp	r4, r0
   283fc:	beq	28530 <flatcc_json_parser_generic_json@@Base+0x2e8>
   28400:	ldrb	r3, [r0]
   28404:	cmp	r3, #44	; 0x2c
   28408:	beq	2855c <flatcc_json_parser_generic_json@@Base+0x314>
   2840c:	cmp	r3, #125	; 0x7d
   28410:	beq	284e4 <flatcc_json_parser_generic_json@@Base+0x29c>
   28414:	mov	r1, r0
   28418:	mov	r3, #10
   2841c:	mov	r2, r4
   28420:	mov	r0, r6
   28424:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   28428:	cmp	r4, r0
   2842c:	beq	28530 <flatcc_json_parser_generic_json@@Base+0x2e8>
   28430:	mov	r5, sl
   28434:	cmp	r5, r7
   28438:	beq	28328 <flatcc_json_parser_generic_json@@Base+0xe0>
   2843c:	ldrb	r3, [r5, #-1]
   28440:	sub	sl, r5, #1
   28444:	sub	r2, r4, r0
   28448:	cmp	r3, #93	; 0x5d
   2844c:	bne	283d0 <flatcc_json_parser_generic_json@@Base+0x188>
   28450:	cmp	r2, #1
   28454:	ble	28468 <flatcc_json_parser_generic_json@@Base+0x220>
   28458:	ldrb	r3, [r0]
   2845c:	cmp	r3, #32
   28460:	bhi	28478 <flatcc_json_parser_generic_json@@Base+0x230>
   28464:	beq	285cc <flatcc_json_parser_generic_json@@Base+0x384>
   28468:	mov	r1, r0
   2846c:	mov	r2, r4
   28470:	mov	r0, r6
   28474:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   28478:	cmp	r4, r0
   2847c:	beq	28530 <flatcc_json_parser_generic_json@@Base+0x2e8>
   28480:	ldrb	r3, [r0]
   28484:	cmp	r3, #44	; 0x2c
   28488:	beq	285e0 <flatcc_json_parser_generic_json@@Base+0x398>
   2848c:	cmp	r3, #93	; 0x5d
   28490:	beq	284e4 <flatcc_json_parser_generic_json@@Base+0x29c>
   28494:	mov	r1, r0
   28498:	mov	r3, #9
   2849c:	mov	r2, r4
   284a0:	mov	r0, r6
   284a4:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   284a8:	b	28428 <flatcc_json_parser_generic_json@@Base+0x1e0>
   284ac:	cmp	r3, #45	; 0x2d
   284b0:	beq	286c0 <flatcc_json_parser_generic_json@@Base+0x478>
   284b4:	mov	r2, r4
   284b8:	mov	r1, fp
   284bc:	mov	r0, r6
   284c0:	bl	27d60 <flatcc_json_parser_skip_constant@@Base>
   284c4:	cmp	r0, fp
   284c8:	bne	283c4 <flatcc_json_parser_generic_json@@Base+0x17c>
   284cc:	mov	r2, r4
   284d0:	mov	r1, fp
   284d4:	mov	r0, r6
   284d8:	mov	r3, #5
   284dc:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   284e0:	b	28328 <flatcc_json_parser_generic_json@@Base+0xe0>
   284e4:	add	r1, r0, #1
   284e8:	sub	r3, r4, r1
   284ec:	cmp	r3, #1
   284f0:	ble	28508 <flatcc_json_parser_generic_json@@Base+0x2c0>
   284f4:	ldrb	r3, [r0, #1]
   284f8:	cmp	r3, #32
   284fc:	movhi	r0, r1
   28500:	bhi	28428 <flatcc_json_parser_generic_json@@Base+0x1e0>
   28504:	beq	286ac <flatcc_json_parser_generic_json@@Base+0x464>
   28508:	mov	r2, r4
   2850c:	mov	r0, r6
   28510:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   28514:	b	28428 <flatcc_json_parser_generic_json@@Base+0x1e0>
   28518:	ldrb	r3, [r0, #1]
   2851c:	cmp	r3, #32
   28520:	addhi	r0, r0, #1
   28524:	bls	283e8 <flatcc_json_parser_generic_json@@Base+0x1a0>
   28528:	cmp	r4, r0
   2852c:	bne	28400 <flatcc_json_parser_generic_json@@Base+0x1b8>
   28530:	cmp	sl, r7
   28534:	beq	28328 <flatcc_json_parser_generic_json@@Base+0xe0>
   28538:	ldrb	r3, [sl, #-1]
   2853c:	mov	r1, r0
   28540:	mov	r2, r4
   28544:	mov	r0, r6
   28548:	cmp	r3, #93	; 0x5d
   2854c:	moveq	r3, #9
   28550:	movne	r3, #10
   28554:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   28558:	b	28328 <flatcc_json_parser_generic_json@@Base+0xe0>
   2855c:	add	fp, r0, #1
   28560:	sub	r3, r4, fp
   28564:	cmp	r3, #1
   28568:	ble	2857c <flatcc_json_parser_generic_json@@Base+0x334>
   2856c:	ldrb	r3, [r0, #1]
   28570:	cmp	r3, #32
   28574:	bhi	28590 <flatcc_json_parser_generic_json@@Base+0x348>
   28578:	beq	28698 <flatcc_json_parser_generic_json@@Base+0x450>
   2857c:	mov	r1, fp
   28580:	mov	r2, r4
   28584:	mov	r0, r6
   28588:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   2858c:	mov	fp, r0
   28590:	cmp	r4, fp
   28594:	beq	28a58 <flatcc_json_parser_generic_json@@Base+0x810>
   28598:	ldrb	r3, [fp]
   2859c:	cmp	r3, #125	; 0x7d
   285a0:	bne	28288 <flatcc_json_parser_generic_json@@Base+0x40>
   285a4:	add	r0, fp, #1
   285a8:	sub	r3, r4, r0
   285ac:	cmp	r3, #1
   285b0:	ble	285c4 <flatcc_json_parser_generic_json@@Base+0x37c>
   285b4:	ldrb	r3, [fp, #1]
   285b8:	cmp	r3, #32
   285bc:	bhi	28428 <flatcc_json_parser_generic_json@@Base+0x1e0>
   285c0:	beq	28b88 <flatcc_json_parser_generic_json@@Base+0x940>
   285c4:	mov	r1, r0
   285c8:	b	28508 <flatcc_json_parser_generic_json@@Base+0x2c0>
   285cc:	ldrb	r3, [r0, #1]
   285d0:	cmp	r3, #32
   285d4:	addhi	r0, r0, #1
   285d8:	bls	28468 <flatcc_json_parser_generic_json@@Base+0x220>
   285dc:	b	28478 <flatcc_json_parser_generic_json@@Base+0x230>
   285e0:	add	fp, r0, #1
   285e4:	sub	r3, r4, fp
   285e8:	cmp	r3, #1
   285ec:	ble	28600 <flatcc_json_parser_generic_json@@Base+0x3b8>
   285f0:	ldrb	r3, [r0, #1]
   285f4:	cmp	r3, #32
   285f8:	bhi	28614 <flatcc_json_parser_generic_json@@Base+0x3cc>
   285fc:	beq	28a70 <flatcc_json_parser_generic_json@@Base+0x828>
   28600:	mov	r1, fp
   28604:	mov	r2, r4
   28608:	mov	r0, r6
   2860c:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   28610:	mov	fp, r0
   28614:	cmp	r4, fp
   28618:	beq	28ac8 <flatcc_json_parser_generic_json@@Base+0x880>
   2861c:	ldrb	r3, [fp]
   28620:	cmp	r3, #93	; 0x5d
   28624:	bne	28288 <flatcc_json_parser_generic_json@@Base+0x40>
   28628:	b	285a4 <flatcc_json_parser_generic_json@@Base+0x35c>
   2862c:	cmp	r3, #91	; 0x5b
   28630:	bne	282ac <flatcc_json_parser_generic_json@@Base+0x64>
   28634:	add	r1, fp, #1
   28638:	mov	r3, #93	; 0x5d
   2863c:	sub	r2, r4, r1
   28640:	cmp	r2, #1
   28644:	strb	r3, [r5], #1
   28648:	ble	28670 <flatcc_json_parser_generic_json@@Base+0x428>
   2864c:	ldrb	r3, [fp, #1]
   28650:	cmp	r3, #32
   28654:	movhi	fp, r1
   28658:	bhi	28680 <flatcc_json_parser_generic_json@@Base+0x438>
   2865c:	bne	28670 <flatcc_json_parser_generic_json@@Base+0x428>
   28660:	ldrb	r3, [fp, #2]
   28664:	cmp	r3, #32
   28668:	addhi	fp, fp, #2
   2866c:	bhi	28680 <flatcc_json_parser_generic_json@@Base+0x438>
   28670:	mov	r2, r4
   28674:	mov	r0, r6
   28678:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   2867c:	mov	fp, r0
   28680:	cmp	r4, fp
   28684:	beq	28b30 <flatcc_json_parser_generic_json@@Base+0x8e8>
   28688:	ldrb	r3, [fp]
   2868c:	cmp	r3, #93	; 0x5d
   28690:	bne	28288 <flatcc_json_parser_generic_json@@Base+0x40>
   28694:	b	2831c <flatcc_json_parser_generic_json@@Base+0xd4>
   28698:	ldrb	r3, [r0, #2]
   2869c:	cmp	r3, #32
   286a0:	addhi	fp, r0, #2
   286a4:	bls	2857c <flatcc_json_parser_generic_json@@Base+0x334>
   286a8:	b	28590 <flatcc_json_parser_generic_json@@Base+0x348>
   286ac:	ldrb	r3, [r0, #2]
   286b0:	cmp	r3, #32
   286b4:	addhi	r0, r0, #2
   286b8:	bls	28508 <flatcc_json_parser_generic_json@@Base+0x2c0>
   286bc:	b	28428 <flatcc_json_parser_generic_json@@Base+0x1e0>
   286c0:	cmp	r4, fp
   286c4:	beq	28abc <flatcc_json_parser_generic_json@@Base+0x874>
   286c8:	cmp	r3, #45	; 0x2d
   286cc:	beq	28a84 <flatcc_json_parser_generic_json@@Base+0x83c>
   286d0:	ldrb	r3, [fp]
   286d4:	cmp	r3, #48	; 0x30
   286d8:	beq	28aa8 <flatcc_json_parser_generic_json@@Base+0x860>
   286dc:	sub	r3, r3, #49	; 0x31
   286e0:	cmp	r3, #8
   286e4:	bhi	28b40 <flatcc_json_parser_generic_json@@Base+0x8f8>
   286e8:	add	r0, fp, #1
   286ec:	cmp	r4, r0
   286f0:	beq	28a18 <flatcc_json_parser_generic_json@@Base+0x7d0>
   286f4:	ldrb	r3, [fp, #1]
   286f8:	sub	r2, r3, #48	; 0x30
   286fc:	cmp	r2, #9
   28700:	bhi	28724 <flatcc_json_parser_generic_json@@Base+0x4dc>
   28704:	add	ip, fp, #2
   28708:	cmp	ip, r4
   2870c:	mov	r0, ip
   28710:	beq	28a18 <flatcc_json_parser_generic_json@@Base+0x7d0>
   28714:	ldrb	r3, [ip], #1
   28718:	sub	r2, r3, #48	; 0x30
   2871c:	cmp	r2, #9
   28720:	bls	28708 <flatcc_json_parser_generic_json@@Base+0x4c0>
   28724:	cmp	r3, #46	; 0x2e
   28728:	beq	28ae0 <flatcc_json_parser_generic_json@@Base+0x898>
   2872c:	and	r2, r3, #223	; 0xdf
   28730:	cmp	r2, #69	; 0x45
   28734:	bne	289f0 <flatcc_json_parser_generic_json@@Base+0x7a8>
   28738:	add	r1, r0, #1
   2873c:	cmp	r4, r1
   28740:	beq	28a90 <flatcc_json_parser_generic_json@@Base+0x848>
   28744:	ldrb	r3, [r0, #1]
   28748:	sub	r2, r3, #43	; 0x2b
   2874c:	tst	r2, #253	; 0xfd
   28750:	bne	28764 <flatcc_json_parser_generic_json@@Base+0x51c>
   28754:	add	r1, r0, #2
   28758:	cmp	r4, r1
   2875c:	beq	28770 <flatcc_json_parser_generic_json@@Base+0x528>
   28760:	ldrb	r3, [r0, #2]
   28764:	sub	r3, r3, #48	; 0x30
   28768:	cmp	r3, #9
   2876c:	bls	289b4 <flatcc_json_parser_generic_json@@Base+0x76c>
   28770:	mov	r3, #6
   28774:	mov	r2, r4
   28778:	mov	r0, r6
   2877c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   28780:	b	283c4 <flatcc_json_parser_generic_json@@Base+0x17c>
   28784:	add	r3, sp, #520	; 0x208
   28788:	cmp	r5, r3
   2878c:	bne	28634 <flatcc_json_parser_generic_json@@Base+0x3ec>
   28790:	mov	r2, r4
   28794:	mov	r1, fp
   28798:	mov	r0, r6
   2879c:	mov	r3, #2
   287a0:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   287a4:	b	28328 <flatcc_json_parser_generic_json@@Base+0xe0>
   287a8:	cmp	r3, #34	; 0x22
   287ac:	moveq	r3, #0
   287b0:	addeq	fp, fp, #1
   287b4:	streq	r3, [r6, #12]
   287b8:	beq	28914 <flatcc_json_parser_generic_json@@Base+0x6cc>
   287bc:	cmp	r3, #46	; 0x2e
   287c0:	movne	r3, #1
   287c4:	strne	r3, [r6, #12]
   287c8:	beq	288f0 <flatcc_json_parser_generic_json@@Base+0x6a8>
   287cc:	cmp	r4, fp
   287d0:	beq	28bd8 <flatcc_json_parser_generic_json@@Base+0x990>
   287d4:	ldrb	r3, [fp]
   287d8:	cmp	r3, #32
   287dc:	bls	28bd0 <flatcc_json_parser_generic_json@@Base+0x988>
   287e0:	mov	ip, fp
   287e4:	sub	r2, r3, #48	; 0x30
   287e8:	cmp	r3, #46	; 0x2e
   287ec:	cmpne	r3, #95	; 0x5f
   287f0:	uxtb	lr, r2
   287f4:	add	r1, ip, #1
   287f8:	mov	r0, ip
   287fc:	beq	28990 <flatcc_json_parser_generic_json@@Base+0x748>
   28800:	orr	r2, r3, #32
   28804:	tst	r3, #128	; 0x80
   28808:	sub	r2, r2, #97	; 0x61
   2880c:	bne	28990 <flatcc_json_parser_generic_json@@Base+0x748>
   28810:	cmp	lr, #9
   28814:	uxtb	r2, r2
   28818:	bls	28990 <flatcc_json_parser_generic_json@@Base+0x748>
   2881c:	cmp	r2, #25
   28820:	bls	2898c <flatcc_json_parser_generic_json@@Base+0x744>
   28824:	sub	r3, r4, r0
   28828:	cmp	r3, #1
   2882c:	ble	28840 <flatcc_json_parser_generic_json@@Base+0x5f8>
   28830:	ldrb	r3, [r0]
   28834:	cmp	r3, #32
   28838:	bhi	28850 <flatcc_json_parser_generic_json@@Base+0x608>
   2883c:	beq	28b60 <flatcc_json_parser_generic_json@@Base+0x918>
   28840:	mov	r1, r0
   28844:	mov	r2, r4
   28848:	mov	r0, r6
   2884c:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   28850:	cmp	r4, r0
   28854:	beq	28bf8 <flatcc_json_parser_generic_json@@Base+0x9b0>
   28858:	ldrb	r3, [r0]
   2885c:	cmp	r3, #58	; 0x3a
   28860:	bne	28be0 <flatcc_json_parser_generic_json@@Base+0x998>
   28864:	add	fp, r0, #1
   28868:	sub	r3, r4, fp
   2886c:	cmp	r3, #1
   28870:	ble	28884 <flatcc_json_parser_generic_json@@Base+0x63c>
   28874:	ldrb	r3, [r0, #1]
   28878:	cmp	r3, #32
   2887c:	bhi	2889c <flatcc_json_parser_generic_json@@Base+0x654>
   28880:	beq	28b74 <flatcc_json_parser_generic_json@@Base+0x92c>
   28884:	mov	r1, fp
   28888:	mov	r2, r4
   2888c:	mov	r0, r6
   28890:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   28894:	ldrb	r3, [r0]
   28898:	mov	fp, r0
   2889c:	cmp	r3, #57	; 0x39
   288a0:	bhi	282a4 <flatcc_json_parser_generic_json@@Base+0x5c>
   288a4:	cmp	r3, #48	; 0x30
   288a8:	bcs	286c0 <flatcc_json_parser_generic_json@@Base+0x478>
   288ac:	cmp	r3, #34	; 0x22
   288b0:	bne	284ac <flatcc_json_parser_generic_json@@Base+0x264>
   288b4:	cmp	fp, r4
   288b8:	bne	2835c <flatcc_json_parser_generic_json@@Base+0x114>
   288bc:	mov	r3, #16
   288c0:	mov	r2, r4
   288c4:	mov	r1, r4
   288c8:	mov	r0, r6
   288cc:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   288d0:	mov	fp, r0
   288d4:	b	28360 <flatcc_json_parser_generic_json@@Base+0x118>
   288d8:	mov	r1, fp
   288dc:	mov	r3, #20
   288e0:	mov	r2, r4
   288e4:	mov	r0, r6
   288e8:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   288ec:	b	283c4 <flatcc_json_parser_generic_json@@Base+0x17c>
   288f0:	mov	r1, fp
   288f4:	mov	r3, #5
   288f8:	mov	r2, r4
   288fc:	mov	r0, r6
   28900:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   28904:	ldr	r3, [r6, #12]
   28908:	mov	fp, r0
   2890c:	cmp	r3, #0
   28910:	bne	287cc <flatcc_json_parser_generic_json@@Base+0x584>
   28914:	cmp	r4, fp
   28918:	beq	28974 <flatcc_json_parser_generic_json@@Base+0x72c>
   2891c:	ldrb	r2, [fp]
   28920:	cmp	r2, #34	; 0x22
   28924:	bne	28944 <flatcc_json_parser_generic_json@@Base+0x6fc>
   28928:	b	28b38 <flatcc_json_parser_generic_json@@Base+0x8f0>
   2892c:	add	fp, r3, #1
   28930:	cmp	r4, fp
   28934:	beq	28974 <flatcc_json_parser_generic_json@@Base+0x72c>
   28938:	ldrb	r2, [r3, #1]
   2893c:	cmp	r2, #34	; 0x22
   28940:	beq	28b38 <flatcc_json_parser_generic_json@@Base+0x8f0>
   28944:	cmp	r2, #92	; 0x5c
   28948:	mov	r3, fp
   2894c:	bne	2892c <flatcc_json_parser_generic_json@@Base+0x6e4>
   28950:	sub	r2, r4, fp
   28954:	add	r3, fp, #1
   28958:	cmp	r2, #1
   2895c:	bgt	2892c <flatcc_json_parser_generic_json@@Base+0x6e4>
   28960:	cmp	r4, fp
   28964:	beq	28974 <flatcc_json_parser_generic_json@@Base+0x72c>
   28968:	ldrb	r3, [fp]
   2896c:	cmp	r3, #34	; 0x22
   28970:	beq	28b38 <flatcc_json_parser_generic_json@@Base+0x8f0>
   28974:	mov	r1, fp
   28978:	mov	r3, #20
   2897c:	mov	r2, r4
   28980:	mov	r0, r6
   28984:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   28988:	b	28824 <flatcc_json_parser_generic_json@@Base+0x5dc>
   2898c:	add	r1, ip, #1
   28990:	cmp	r4, r1
   28994:	mov	r0, r1
   28998:	mov	ip, r1
   2899c:	beq	28b9c <flatcc_json_parser_generic_json@@Base+0x954>
   289a0:	ldrb	r2, [r1]
   289a4:	cmp	r2, #32
   289a8:	bls	28b9c <flatcc_json_parser_generic_json@@Base+0x954>
   289ac:	mov	r3, r2
   289b0:	b	287e4 <flatcc_json_parser_generic_json@@Base+0x59c>
   289b4:	add	r0, r1, #1
   289b8:	cmp	r4, r0
   289bc:	beq	28a18 <flatcc_json_parser_generic_json@@Base+0x7d0>
   289c0:	ldrb	r3, [r1, #1]
   289c4:	sub	r2, r3, #48	; 0x30
   289c8:	cmp	r2, #9
   289cc:	bhi	28c10 <flatcc_json_parser_generic_json@@Base+0x9c8>
   289d0:	add	r2, r1, #2
   289d4:	cmp	r4, r2
   289d8:	mov	r0, r2
   289dc:	beq	28a18 <flatcc_json_parser_generic_json@@Base+0x7d0>
   289e0:	ldrb	r3, [r2], #1
   289e4:	sub	r1, r3, #48	; 0x30
   289e8:	cmp	r1, #9
   289ec:	bls	289d4 <flatcc_json_parser_generic_json@@Base+0x78c>
   289f0:	cmp	r3, #32
   289f4:	beq	283c4 <flatcc_json_parser_generic_json@@Base+0x17c>
   289f8:	bls	28a3c <flatcc_json_parser_generic_json@@Base+0x7f4>
   289fc:	cmp	r3, #58	; 0x3a
   28a00:	beq	283c4 <flatcc_json_parser_generic_json@@Base+0x17c>
   28a04:	bls	28a30 <flatcc_json_parser_generic_json@@Base+0x7e8>
   28a08:	cmp	r3, #93	; 0x5d
   28a0c:	beq	283c4 <flatcc_json_parser_generic_json@@Base+0x17c>
   28a10:	cmp	r3, #125	; 0x7d
   28a14:	beq	283c4 <flatcc_json_parser_generic_json@@Base+0x17c>
   28a18:	mov	r1, r0
   28a1c:	mov	r3, #6
   28a20:	mov	r2, r4
   28a24:	mov	r0, r6
   28a28:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   28a2c:	b	283c4 <flatcc_json_parser_generic_json@@Base+0x17c>
   28a30:	cmp	r3, #44	; 0x2c
   28a34:	bne	28a18 <flatcc_json_parser_generic_json@@Base+0x7d0>
   28a38:	b	283c4 <flatcc_json_parser_generic_json@@Base+0x17c>
   28a3c:	cmp	r3, #9
   28a40:	bcc	28a18 <flatcc_json_parser_generic_json@@Base+0x7d0>
   28a44:	cmp	r3, #11
   28a48:	bls	283c4 <flatcc_json_parser_generic_json@@Base+0x17c>
   28a4c:	cmp	r3, #13
   28a50:	bne	28a18 <flatcc_json_parser_generic_json@@Base+0x7d0>
   28a54:	b	283c4 <flatcc_json_parser_generic_json@@Base+0x17c>
   28a58:	mov	r3, #10
   28a5c:	mov	r2, r4
   28a60:	mov	r1, r4
   28a64:	mov	r0, r6
   28a68:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   28a6c:	b	28428 <flatcc_json_parser_generic_json@@Base+0x1e0>
   28a70:	ldrb	r3, [r0, #2]
   28a74:	cmp	r3, #32
   28a78:	addhi	fp, r0, #2
   28a7c:	bls	28600 <flatcc_json_parser_generic_json@@Base+0x3b8>
   28a80:	b	28614 <flatcc_json_parser_generic_json@@Base+0x3cc>
   28a84:	add	fp, fp, #1
   28a88:	cmp	r4, fp
   28a8c:	bne	286d0 <flatcc_json_parser_generic_json@@Base+0x488>
   28a90:	mov	r3, #6
   28a94:	mov	r2, r4
   28a98:	mov	r1, r4
   28a9c:	mov	r0, r6
   28aa0:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   28aa4:	b	283c4 <flatcc_json_parser_generic_json@@Base+0x17c>
   28aa8:	add	r0, fp, #1
   28aac:	cmp	r4, r0
   28ab0:	beq	28a18 <flatcc_json_parser_generic_json@@Base+0x7d0>
   28ab4:	ldrb	r3, [fp, #1]
   28ab8:	b	28724 <flatcc_json_parser_generic_json@@Base+0x4dc>
   28abc:	mov	sl, r5
   28ac0:	mov	r0, r4
   28ac4:	b	28530 <flatcc_json_parser_generic_json@@Base+0x2e8>
   28ac8:	mov	r3, #9
   28acc:	mov	r2, r4
   28ad0:	mov	r1, r4
   28ad4:	mov	r0, r6
   28ad8:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   28adc:	b	28428 <flatcc_json_parser_generic_json@@Base+0x1e0>
   28ae0:	ldrb	r3, [r0, #1]
   28ae4:	sub	r3, r3, #48	; 0x30
   28ae8:	cmp	r3, #9
   28aec:	bhi	28bb8 <flatcc_json_parser_generic_json@@Base+0x970>
   28af0:	add	r2, r0, #2
   28af4:	cmp	r4, r2
   28af8:	beq	28c64 <flatcc_json_parser_generic_json@@Base+0xa1c>
   28afc:	ldrb	r3, [r0, #2]
   28b00:	sub	r1, r3, #48	; 0x30
   28b04:	cmp	r1, #9
   28b08:	bhi	28b58 <flatcc_json_parser_generic_json@@Base+0x910>
   28b0c:	add	r2, r0, #3
   28b10:	cmp	r2, r4
   28b14:	mov	r0, r2
   28b18:	beq	28a18 <flatcc_json_parser_generic_json@@Base+0x7d0>
   28b1c:	ldrb	r3, [r2], #1
   28b20:	sub	r1, r3, #48	; 0x30
   28b24:	cmp	r1, #9
   28b28:	bls	28b10 <flatcc_json_parser_generic_json@@Base+0x8c8>
   28b2c:	b	2872c <flatcc_json_parser_generic_json@@Base+0x4e4>
   28b30:	mov	r0, fp
   28b34:	b	28328 <flatcc_json_parser_generic_json@@Base+0xe0>
   28b38:	add	r0, fp, #1
   28b3c:	b	28824 <flatcc_json_parser_generic_json@@Base+0x5dc>
   28b40:	mov	r1, fp
   28b44:	mov	r3, #6
   28b48:	mov	r2, r4
   28b4c:	mov	r0, r6
   28b50:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   28b54:	b	283c4 <flatcc_json_parser_generic_json@@Base+0x17c>
   28b58:	mov	r0, r2
   28b5c:	b	2872c <flatcc_json_parser_generic_json@@Base+0x4e4>
   28b60:	ldrb	r3, [r0, #1]
   28b64:	cmp	r3, #32
   28b68:	addhi	r0, r0, #1
   28b6c:	bls	28840 <flatcc_json_parser_generic_json@@Base+0x5f8>
   28b70:	b	28850 <flatcc_json_parser_generic_json@@Base+0x608>
   28b74:	ldrb	r3, [r0, #2]
   28b78:	cmp	r3, #32
   28b7c:	addhi	fp, r0, #2
   28b80:	bls	28884 <flatcc_json_parser_generic_json@@Base+0x63c>
   28b84:	b	2889c <flatcc_json_parser_generic_json@@Base+0x654>
   28b88:	ldrb	r3, [fp, #2]
   28b8c:	cmp	r3, #32
   28b90:	addhi	r0, fp, #2
   28b94:	bls	285c4 <flatcc_json_parser_generic_json@@Base+0x37c>
   28b98:	b	28428 <flatcc_json_parser_generic_json@@Base+0x1e0>
   28b9c:	cmp	r3, #46	; 0x2e
   28ba0:	bne	28824 <flatcc_json_parser_generic_json@@Base+0x5dc>
   28ba4:	mov	r3, #5
   28ba8:	mov	r2, r4
   28bac:	mov	r0, r6
   28bb0:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   28bb4:	b	28824 <flatcc_json_parser_generic_json@@Base+0x5dc>
   28bb8:	add	r1, r0, #1
   28bbc:	mov	r3, #6
   28bc0:	mov	r2, r4
   28bc4:	mov	r0, r6
   28bc8:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   28bcc:	b	283c4 <flatcc_json_parser_generic_json@@Base+0x17c>
   28bd0:	mov	r0, fp
   28bd4:	b	28824 <flatcc_json_parser_generic_json@@Base+0x5dc>
   28bd8:	mov	r0, r4
   28bdc:	b	28824 <flatcc_json_parser_generic_json@@Base+0x5dc>
   28be0:	mov	r1, r0
   28be4:	mov	r2, r4
   28be8:	mov	r0, r6
   28bec:	mov	r3, #4
   28bf0:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   28bf4:	b	28328 <flatcc_json_parser_generic_json@@Base+0xe0>
   28bf8:	mov	r0, r6
   28bfc:	mov	r3, #10
   28c00:	mov	r2, r4
   28c04:	mov	r1, r4
   28c08:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   28c0c:	b	28328 <flatcc_json_parser_generic_json@@Base+0xe0>
   28c10:	cmp	r3, #32
   28c14:	beq	28434 <flatcc_json_parser_generic_json@@Base+0x1ec>
   28c18:	bls	28c3c <flatcc_json_parser_generic_json@@Base+0x9f4>
   28c1c:	cmp	r3, #58	; 0x3a
   28c20:	beq	28434 <flatcc_json_parser_generic_json@@Base+0x1ec>
   28c24:	bls	28c58 <flatcc_json_parser_generic_json@@Base+0xa10>
   28c28:	cmp	r3, #93	; 0x5d
   28c2c:	beq	28434 <flatcc_json_parser_generic_json@@Base+0x1ec>
   28c30:	cmp	r3, #125	; 0x7d
   28c34:	bne	28a18 <flatcc_json_parser_generic_json@@Base+0x7d0>
   28c38:	b	28434 <flatcc_json_parser_generic_json@@Base+0x1ec>
   28c3c:	cmp	r3, #9
   28c40:	bcc	28a18 <flatcc_json_parser_generic_json@@Base+0x7d0>
   28c44:	cmp	r3, #11
   28c48:	bls	28434 <flatcc_json_parser_generic_json@@Base+0x1ec>
   28c4c:	cmp	r3, #13
   28c50:	bne	28a18 <flatcc_json_parser_generic_json@@Base+0x7d0>
   28c54:	b	28434 <flatcc_json_parser_generic_json@@Base+0x1ec>
   28c58:	cmp	r3, #44	; 0x2c
   28c5c:	bne	28a18 <flatcc_json_parser_generic_json@@Base+0x7d0>
   28c60:	b	28434 <flatcc_json_parser_generic_json@@Base+0x1ec>
   28c64:	mov	r0, r4
   28c68:	b	28a18 <flatcc_json_parser_generic_json@@Base+0x7d0>
   28c6c:	mov	sl, r5
   28c70:	b	28530 <flatcc_json_parser_generic_json@@Base+0x2e8>

00028c74 <flatcc_json_parser_unmatched_symbol@@Base>:
   28c74:	ldr	ip, [r0, #8]
   28c78:	tst	ip, #1
   28c7c:	beq	28e00 <flatcc_json_parser_unmatched_symbol@@Base+0x18c>
   28c80:	strd	r4, [sp, #-16]!
   28c84:	mov	r4, r2
   28c88:	mov	r5, r0
   28c8c:	ldr	r2, [r0, #12]
   28c90:	mov	r3, r1
   28c94:	str	r6, [sp, #8]
   28c98:	str	lr, [sp, #12]
   28c9c:	cmp	r2, #0
   28ca0:	beq	28d64 <flatcc_json_parser_unmatched_symbol@@Base+0xf0>
   28ca4:	cmp	r1, r4
   28ca8:	beq	28d18 <flatcc_json_parser_unmatched_symbol@@Base+0xa4>
   28cac:	ldrb	r2, [r1]
   28cb0:	cmp	r2, #32
   28cb4:	bls	28cfc <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   28cb8:	mov	ip, r1
   28cbc:	sub	r3, r2, #48	; 0x30
   28cc0:	cmp	r2, #46	; 0x2e
   28cc4:	cmpne	r2, #95	; 0x5f
   28cc8:	uxtb	r0, r3
   28ccc:	add	r1, ip, #1
   28cd0:	mov	r3, ip
   28cd4:	beq	28ddc <flatcc_json_parser_unmatched_symbol@@Base+0x168>
   28cd8:	orr	ip, r2, #32
   28cdc:	tst	r2, #128	; 0x80
   28ce0:	sub	ip, ip, #97	; 0x61
   28ce4:	bne	28ddc <flatcc_json_parser_unmatched_symbol@@Base+0x168>
   28ce8:	cmp	r0, #9
   28cec:	uxtb	ip, ip
   28cf0:	bls	28ddc <flatcc_json_parser_unmatched_symbol@@Base+0x168>
   28cf4:	cmp	ip, #25
   28cf8:	bls	28dd8 <flatcc_json_parser_unmatched_symbol@@Base+0x164>
   28cfc:	sub	r2, r4, r3
   28d00:	cmp	r2, #1
   28d04:	ble	28d18 <flatcc_json_parser_unmatched_symbol@@Base+0xa4>
   28d08:	ldrb	r2, [r3]
   28d0c:	cmp	r2, #32
   28d10:	bhi	28d2c <flatcc_json_parser_unmatched_symbol@@Base+0xb8>
   28d14:	beq	28e5c <flatcc_json_parser_unmatched_symbol@@Base+0x1e8>
   28d18:	mov	r1, r3
   28d1c:	mov	r2, r4
   28d20:	mov	r0, r5
   28d24:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   28d28:	mov	r3, r0
   28d2c:	cmp	r4, r3
   28d30:	beq	28d40 <flatcc_json_parser_unmatched_symbol@@Base+0xcc>
   28d34:	ldrb	r2, [r3]
   28d38:	cmp	r2, #58	; 0x3a
   28d3c:	beq	28e10 <flatcc_json_parser_unmatched_symbol@@Base+0x19c>
   28d40:	mov	r2, r4
   28d44:	mov	r1, r3
   28d48:	ldr	r6, [sp, #8]
   28d4c:	mov	r0, r5
   28d50:	mov	r3, #4
   28d54:	ldrd	r4, [sp]
   28d58:	ldr	lr, [sp, #12]
   28d5c:	add	sp, sp, #16
   28d60:	b	270b8 <flatcc_json_parser_set_error@@Base>
   28d64:	cmp	r1, r4
   28d68:	beq	28dbc <flatcc_json_parser_unmatched_symbol@@Base+0x148>
   28d6c:	ldrb	r1, [r1]
   28d70:	cmp	r1, #34	; 0x22
   28d74:	bne	28d94 <flatcc_json_parser_unmatched_symbol@@Base+0x120>
   28d78:	b	28e08 <flatcc_json_parser_unmatched_symbol@@Base+0x194>
   28d7c:	add	r3, r2, #1
   28d80:	cmp	r4, r3
   28d84:	beq	28dbc <flatcc_json_parser_unmatched_symbol@@Base+0x148>
   28d88:	ldrb	r1, [r2, #1]
   28d8c:	cmp	r1, #34	; 0x22
   28d90:	beq	28e08 <flatcc_json_parser_unmatched_symbol@@Base+0x194>
   28d94:	cmp	r1, #92	; 0x5c
   28d98:	mov	r2, r3
   28d9c:	bne	28d7c <flatcc_json_parser_unmatched_symbol@@Base+0x108>
   28da0:	sub	r1, r4, r3
   28da4:	add	r2, r3, #1
   28da8:	cmp	r1, #1
   28dac:	bgt	28d7c <flatcc_json_parser_unmatched_symbol@@Base+0x108>
   28db0:	ldrb	r2, [r3]
   28db4:	cmp	r2, #34	; 0x22
   28db8:	beq	28e08 <flatcc_json_parser_unmatched_symbol@@Base+0x194>
   28dbc:	mov	r1, r3
   28dc0:	mov	r2, r4
   28dc4:	mov	r3, #20
   28dc8:	mov	r0, r5
   28dcc:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   28dd0:	mov	r3, r0
   28dd4:	b	28cfc <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   28dd8:	add	r1, r3, #1
   28ddc:	cmp	r4, r1
   28de0:	mov	r3, r1
   28de4:	mov	ip, r1
   28de8:	beq	28e70 <flatcc_json_parser_unmatched_symbol@@Base+0x1fc>
   28dec:	ldrb	r0, [r1]
   28df0:	cmp	r0, #32
   28df4:	bls	28e70 <flatcc_json_parser_unmatched_symbol@@Base+0x1fc>
   28df8:	mov	r2, r0
   28dfc:	b	28cbc <flatcc_json_parser_unmatched_symbol@@Base+0x48>
   28e00:	mov	r3, #13
   28e04:	b	270b8 <flatcc_json_parser_set_error@@Base>
   28e08:	add	r3, r3, #1
   28e0c:	b	28cfc <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   28e10:	add	r1, r3, #1
   28e14:	sub	r2, r4, r1
   28e18:	cmp	r2, #1
   28e1c:	ble	28e30 <flatcc_json_parser_unmatched_symbol@@Base+0x1bc>
   28e20:	ldrb	r2, [r3, #1]
   28e24:	cmp	r2, #32
   28e28:	bhi	28e40 <flatcc_json_parser_unmatched_symbol@@Base+0x1cc>
   28e2c:	beq	28e90 <flatcc_json_parser_unmatched_symbol@@Base+0x21c>
   28e30:	mov	r2, r4
   28e34:	mov	r0, r5
   28e38:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   28e3c:	mov	r1, r0
   28e40:	mov	r2, r4
   28e44:	mov	r0, r5
   28e48:	ldrd	r4, [sp]
   28e4c:	ldr	r6, [sp, #8]
   28e50:	ldr	lr, [sp, #12]
   28e54:	add	sp, sp, #16
   28e58:	b	28248 <flatcc_json_parser_generic_json@@Base>
   28e5c:	ldrb	r2, [r3, #1]
   28e60:	cmp	r2, #32
   28e64:	addhi	r3, r3, #1
   28e68:	bls	28d18 <flatcc_json_parser_unmatched_symbol@@Base+0xa4>
   28e6c:	b	28d2c <flatcc_json_parser_unmatched_symbol@@Base+0xb8>
   28e70:	cmp	r2, #46	; 0x2e
   28e74:	bne	28cfc <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   28e78:	mov	r3, #5
   28e7c:	mov	r2, r4
   28e80:	mov	r0, r5
   28e84:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   28e88:	mov	r3, r0
   28e8c:	b	28cfc <flatcc_json_parser_unmatched_symbol@@Base+0x88>
   28e90:	ldrb	r2, [r3, #2]
   28e94:	cmp	r2, #32
   28e98:	addhi	r1, r3, #2
   28e9c:	bls	28e30 <flatcc_json_parser_unmatched_symbol@@Base+0x1bc>
   28ea0:	b	28e40 <flatcc_json_parser_unmatched_symbol@@Base+0x1cc>

00028ea4 <flatcc_json_parser_integer@@Base>:
   28ea4:	cmp	r1, r2
   28ea8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   28eac:	strd	r6, [sp, #8]
   28eb0:	strd	r8, [sp, #16]
   28eb4:	strd	sl, [sp, #24]
   28eb8:	str	lr, [sp, #32]
   28ebc:	ldr	ip, [sp, #36]	; 0x24
   28ec0:	beq	28fc8 <flatcc_json_parser_integer@@Base+0x124>
   28ec4:	ldrb	r8, [r1]
   28ec8:	sub	r8, r8, #45	; 0x2d
   28ecc:	clz	r8, r8
   28ed0:	lsr	r8, r8, #5
   28ed4:	add	lr, r1, r8
   28ed8:	cmp	r2, lr
   28edc:	str	r8, [r3]
   28ee0:	beq	28fe8 <flatcc_json_parser_integer@@Base+0x144>
   28ee4:	ldrb	r8, [r1, r8]
   28ee8:	sub	r3, r8, #48	; 0x30
   28eec:	cmp	r3, #9
   28ef0:	bhi	28fdc <flatcc_json_parser_integer@@Base+0x138>
   28ef4:	uxtb	r8, r8
   28ef8:	mov	r9, #0
   28efc:	subs	r4, r8, #48	; 0x30
   28f00:	add	r3, lr, #1
   28f04:	sbc	r5, r9, #0
   28f08:	b	28f40 <flatcc_json_parser_integer@@Base+0x9c>
   28f0c:	adds	r8, r8, r4
   28f10:	adc	r9, r9, r5
   28f14:	adds	r8, r8, r8
   28f18:	adc	r9, r9, r9
   28f1c:	subs	r6, r8, #48	; 0x30
   28f20:	sbc	r7, r9, #0
   28f24:	adds	r8, r6, sl
   28f28:	adc	r9, r7, #0
   28f2c:	cmp	r9, r5
   28f30:	mov	r5, r9
   28f34:	cmpeq	r8, r4
   28f38:	mov	r4, r8
   28f3c:	bcc	28fa4 <flatcc_json_parser_integer@@Base+0x100>
   28f40:	cmp	r3, r2
   28f44:	lsl	r9, r5, #2
   28f48:	mov	lr, r3
   28f4c:	lsl	r8, r4, #2
   28f50:	beq	28f84 <flatcc_json_parser_integer@@Base+0xe0>
   28f54:	ldrb	sl, [r3], #1
   28f58:	orr	r9, r9, r4, lsr #30
   28f5c:	sub	fp, sl, #48	; 0x30
   28f60:	cmp	fp, #9
   28f64:	bls	28f0c <flatcc_json_parser_integer@@Base+0x68>
   28f68:	cmp	r1, lr
   28f6c:	beq	28f88 <flatcc_json_parser_integer@@Base+0xe4>
   28f70:	ldrb	r3, [lr]
   28f74:	and	r1, r3, #223	; 0xdf
   28f78:	cmp	r3, #46	; 0x2e
   28f7c:	cmpne	r1, #69	; 0x45
   28f80:	beq	28fd0 <flatcc_json_parser_integer@@Base+0x12c>
   28f84:	strd	r4, [ip]
   28f88:	ldrd	r4, [sp]
   28f8c:	mov	r0, lr
   28f90:	ldrd	r6, [sp, #8]
   28f94:	ldrd	r8, [sp, #16]
   28f98:	ldrd	sl, [sp, #24]
   28f9c:	add	sp, sp, #32
   28fa0:	pop	{pc}		; (ldr pc, [sp], #4)
   28fa4:	mov	r1, lr
   28fa8:	mov	r3, #8
   28fac:	ldrd	r4, [sp]
   28fb0:	ldrd	r6, [sp, #8]
   28fb4:	ldrd	r8, [sp, #16]
   28fb8:	ldrd	sl, [sp, #24]
   28fbc:	ldr	lr, [sp, #32]
   28fc0:	add	sp, sp, #36	; 0x24
   28fc4:	b	270b8 <flatcc_json_parser_set_error@@Base>
   28fc8:	mov	lr, r1
   28fcc:	b	28f88 <flatcc_json_parser_integer@@Base+0xe4>
   28fd0:	mov	r1, lr
   28fd4:	mov	r3, #12
   28fd8:	b	28fac <flatcc_json_parser_integer@@Base+0x108>
   28fdc:	mov	r4, #0
   28fe0:	mov	r5, #0
   28fe4:	b	28f68 <flatcc_json_parser_integer@@Base+0xc4>
   28fe8:	mov	r4, #0
   28fec:	mov	r5, #0
   28ff0:	b	28f84 <flatcc_json_parser_integer@@Base+0xe0>

00028ff4 <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   28ff4:	cmp	r1, r2
   28ff8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   28ffc:	mov	r5, r2
   29000:	strd	r6, [sp, #8]
   29004:	mov	r7, r0
   29008:	strd	r8, [sp, #16]
   2900c:	mov	r9, r3
   29010:	strd	sl, [sp, #24]
   29014:	str	lr, [sp, #32]
   29018:	sub	sp, sp, #36	; 0x24
   2901c:	ldr	sl, [sp, #72]	; 0x48
   29020:	beq	291ac <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   29024:	ldrb	r3, [r1]
   29028:	cmp	r3, #34	; 0x22
   2902c:	addeq	r4, r1, #1
   29030:	bne	291ac <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   29034:	mov	r2, r5
   29038:	mov	r1, r4
   2903c:	mov	r0, r7
   29040:	bl	270e4 <flatcc_json_parser_string_part@@Base>
   29044:	cmp	r5, r0
   29048:	mov	r6, r0
   2904c:	beq	2916c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x178>
   29050:	ldrb	r3, [r0]
   29054:	cmp	r3, #34	; 0x22
   29058:	bne	2916c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x178>
   2905c:	sub	fp, r0, r4
   29060:	lsr	r8, fp, #2
   29064:	and	r3, fp, #3
   29068:	cmp	r3, #2
   2906c:	add	r8, r8, r8, lsl #1
   29070:	addeq	r8, r8, #1
   29074:	beq	29080 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x8c>
   29078:	cmp	r3, #3
   2907c:	addeq	r8, r8, #2
   29080:	mov	r2, #1
   29084:	mvn	r3, #0
   29088:	ldr	r0, [r7]
   2908c:	mov	r1, r2
   29090:	bl	22f60 <flatcc_builder_start_vector@@Base>
   29094:	cmp	r0, #0
   29098:	bne	291c4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d0>
   2909c:	mov	r1, r8
   290a0:	ldr	r0, [r7]
   290a4:	bl	22618 <flatcc_builder_extend_vector@@Base>
   290a8:	subs	r3, r0, #0
   290ac:	str	r3, [sp]
   290b0:	beq	291c4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d0>
   290b4:	cmp	sl, #0
   290b8:	bne	291e0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ec>
   290bc:	ldr	r3, [pc, #844]	; 29410 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x41c>
   290c0:	add	r3, pc, r3
   290c4:	add	lr, r3, #1728	; 0x6c0
   290c8:	add	lr, lr, #4
   290cc:	ldr	r2, [sp]
   290d0:	cmp	r8, #0
   290d4:	mov	ip, r4
   290d8:	movne	r3, r8
   290dc:	mvneq	r3, #0
   290e0:	str	fp, [sp, #4]
   290e4:	add	r3, r2, r3
   290e8:	strd	r2, [sp, #8]
   290ec:	ldr	r3, [sp, #4]
   290f0:	ldr	r2, [sp, #8]
   290f4:	cmp	r3, #0
   290f8:	ldr	r3, [sp, #12]
   290fc:	sub	r3, r3, r2
   29100:	str	r3, [sp, #16]
   29104:	beq	29354 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x360>
   29108:	ldr	r1, [sp, #4]
   2910c:	mov	r2, #0
   29110:	ldrb	r3, [ip, r2]
   29114:	ldrb	r0, [lr, r3]
   29118:	add	r3, sp, #32
   2911c:	add	r3, r3, r2
   29120:	cmp	r0, #63	; 0x3f
   29124:	strb	r0, [r3, #-4]
   29128:	bls	291f4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x200>
   2912c:	cmp	r0, #65	; 0x41
   29130:	beq	29210 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x21c>
   29134:	cmp	r0, #66	; 0x42
   29138:	movne	r3, r2
   2913c:	beq	2921c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x228>
   29140:	sub	r3, r1, r3
   29144:	cmp	r2, #2
   29148:	beq	29320 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x32c>
   2914c:	cmp	r2, #3
   29150:	beq	29270 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x27c>
   29154:	cmp	r2, #0
   29158:	subeq	r3, fp, r3
   2915c:	beq	29358 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x364>
   29160:	ldr	r3, [sp, #4]
   29164:	sub	r6, fp, r3
   29168:	add	r6, r4, r6
   2916c:	mov	ip, #0
   29170:	mov	r2, r5
   29174:	cmp	sl, ip
   29178:	mov	r1, r6
   2917c:	mov	r0, r7
   29180:	movne	r3, #32
   29184:	str	ip, [r9]
   29188:	moveq	r3, #31
   2918c:	add	sp, sp, #36	; 0x24
   29190:	ldrd	r4, [sp]
   29194:	ldrd	r6, [sp, #8]
   29198:	ldrd	r8, [sp, #16]
   2919c:	ldrd	sl, [sp, #24]
   291a0:	ldr	lr, [sp, #32]
   291a4:	add	sp, sp, #36	; 0x24
   291a8:	b	270b8 <flatcc_json_parser_set_error@@Base>
   291ac:	mov	r3, #16
   291b0:	mov	r2, r5
   291b4:	mov	r0, r7
   291b8:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   291bc:	mov	r4, r0
   291c0:	b	29034 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x40>
   291c4:	mov	r3, #0
   291c8:	mov	r2, r5
   291cc:	mov	r1, r6
   291d0:	mov	r0, r7
   291d4:	str	r3, [r9]
   291d8:	mov	r3, #33	; 0x21
   291dc:	b	2918c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   291e0:	ldr	r3, [pc, #556]	; 29414 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x420>
   291e4:	add	r3, pc, r3
   291e8:	add	lr, r3, #1472	; 0x5c0
   291ec:	add	lr, lr, #4
   291f0:	b	290cc <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd8>
   291f4:	add	r2, r2, #1
   291f8:	cmp	r2, #3
   291fc:	bhi	29388 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x394>
   29200:	cmp	r1, r2
   29204:	bne	29110 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x11c>
   29208:	mov	r3, #0
   2920c:	b	29144 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x150>
   29210:	add	ip, ip, #1
   29214:	sub	r1, r1, #1
   29218:	b	291f8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x204>
   2921c:	add	r3, r2, #1
   29220:	cmp	r3, #7
   29224:	cmpls	r3, r1
   29228:	bcs	29140 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   2922c:	ldrb	r0, [ip, r3]
   29230:	add	ip, ip, r3
   29234:	ldrb	r0, [lr, r0]
   29238:	sub	r0, r0, #65	; 0x41
   2923c:	cmp	r0, #1
   29240:	bls	2925c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x268>
   29244:	b	29140 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   29248:	ldrb	r0, [ip, #1]!
   2924c:	ldrb	r0, [lr, r0]
   29250:	sub	r0, r0, #65	; 0x41
   29254:	cmp	r0, #1
   29258:	bhi	29140 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   2925c:	add	r3, r3, #1
   29260:	cmp	r3, #7
   29264:	cmpls	r3, r1
   29268:	bcc	29248 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x254>
   2926c:	b	29140 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   29270:	ldrb	r2, [sp, #30]
   29274:	lsl	r1, r2, #6
   29278:	tst	r1, #192	; 0xc0
   2927c:	bne	29160 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16c>
   29280:	ldr	r1, [sp, #16]
   29284:	cmp	r1, #1
   29288:	beq	29160 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16c>
   2928c:	ldrb	r0, [sp, #29]
   29290:	lsr	r2, r2, #2
   29294:	sub	r3, fp, r3
   29298:	ldr	r1, [sp, #8]
   2929c:	ldr	ip, [sp]
   292a0:	orr	r2, r2, r0, lsl #4
   292a4:	ldrb	lr, [sp, #28]
   292a8:	add	r1, r1, #2
   292ac:	sub	r1, r1, ip
   292b0:	lsr	ip, r0, #4
   292b4:	ldr	r0, [sp, #8]
   292b8:	orr	ip, ip, lr, lsl #2
   292bc:	strb	ip, [r0]
   292c0:	strb	r2, [r0, #1]
   292c4:	cmp	fp, r3
   292c8:	addne	r6, r4, r3
   292cc:	bne	2916c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x178>
   292d0:	cmp	r8, r1
   292d4:	ldr	r0, [r7]
   292d8:	bls	292f0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   292dc:	sub	r1, r8, r1
   292e0:	bl	22d0c <flatcc_builder_truncate_vector@@Base>
   292e4:	cmp	r0, #0
   292e8:	bne	291c4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d0>
   292ec:	ldr	r0, [r7]
   292f0:	bl	23f4c <flatcc_builder_end_vector@@Base>
   292f4:	cmp	r0, #0
   292f8:	str	r0, [r9]
   292fc:	beq	291c4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1d0>
   29300:	ldrb	r3, [r6]
   29304:	cmp	r3, #34	; 0x22
   29308:	beq	29368 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x374>
   2930c:	mov	r2, r5
   29310:	mov	r1, r6
   29314:	mov	r0, r7
   29318:	mov	r3, #20
   2931c:	b	2918c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x198>
   29320:	ldrb	r2, [sp, #29]
   29324:	lsl	r1, r2, #4
   29328:	tst	r1, #240	; 0xf0
   2932c:	bne	29160 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16c>
   29330:	ldrb	r0, [sp, #28]
   29334:	lsr	r2, r2, #4
   29338:	sub	r3, fp, r3
   2933c:	ldr	r1, [sp, #8]
   29340:	orr	r2, r2, r0, lsl #2
   29344:	strb	r2, [r1], #1
   29348:	ldr	r2, [sp]
   2934c:	sub	r1, r1, r2
   29350:	b	292c4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d0>
   29354:	mov	r3, fp
   29358:	ldr	r1, [sp]
   2935c:	ldr	r2, [sp, #8]
   29360:	sub	r1, r2, r1
   29364:	b	292c4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d0>
   29368:	add	r0, r6, #1
   2936c:	add	sp, sp, #36	; 0x24
   29370:	ldrd	r4, [sp]
   29374:	ldrd	r6, [sp, #8]
   29378:	ldrd	r8, [sp, #16]
   2937c:	ldrd	sl, [sp, #24]
   29380:	add	sp, sp, #32
   29384:	pop	{pc}		; (ldr pc, [sp], #4)
   29388:	ldr	r3, [sp, #16]
   2938c:	cmp	r3, #2
   29390:	bls	29160 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x16c>
   29394:	ldrb	r2, [sp, #29]
   29398:	sub	r3, r1, #4
   2939c:	add	ip, ip, #4
   293a0:	ldrb	r0, [sp, #28]
   293a4:	str	r3, [sp, #4]
   293a8:	ldrb	r3, [sp, #30]
   293ac:	lsr	r1, r2, #4
   293b0:	str	r2, [sp, #16]
   293b4:	ldrb	r2, [sp, #31]
   293b8:	orr	r1, r1, r0, lsl #2
   293bc:	ldr	r0, [sp, #16]
   293c0:	str	r2, [sp, #20]
   293c4:	lsr	r2, r3, #2
   293c8:	orr	r2, r2, r0, lsl #4
   293cc:	ldr	r0, [sp, #20]
   293d0:	orr	r3, r0, r3, lsl #6
   293d4:	ldr	r0, [sp, #8]
   293d8:	strb	r1, [r0]
   293dc:	strb	r2, [r0, #1]
   293e0:	ldr	r2, [sp, #12]
   293e4:	strb	r3, [r0, #2]
   293e8:	add	r3, r0, #3
   293ec:	str	r3, [sp, #8]
   293f0:	cmp	r3, r2
   293f4:	bne	290ec <flatcc_json_parser_build_uint8_vector_base64@@Base+0xf8>
   293f8:	ldr	r2, [sp]
   293fc:	ldr	r3, [sp, #8]
   29400:	sub	r1, r3, r2
   29404:	ldr	r3, [sp, #4]
   29408:	sub	r3, fp, r3
   2940c:	b	292c4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2d0>
   29410:	andeq	r2, r0, r8, lsl #12
   29414:	andeq	r2, r0, r4, ror #9

00029418 <flatcc_json_parser_build_string@@Base>:
   29418:	cmp	r1, r2
   2941c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   29420:	mov	r5, r0
   29424:	strd	r6, [sp, #8]
   29428:	mov	r6, r2
   2942c:	strd	r8, [sp, #16]
   29430:	mov	r8, r3
   29434:	str	sl, [sp, #24]
   29438:	str	lr, [sp, #28]
   2943c:	sub	sp, sp, #8
   29440:	beq	294b4 <flatcc_json_parser_build_string@@Base+0x9c>
   29444:	ldrb	r3, [r1]
   29448:	cmp	r3, #34	; 0x22
   2944c:	addeq	r7, r1, #1
   29450:	bne	294b4 <flatcc_json_parser_build_string@@Base+0x9c>
   29454:	mov	r2, r6
   29458:	mov	r1, r7
   2945c:	mov	r0, r5
   29460:	bl	270e4 <flatcc_json_parser_string_part@@Base>
   29464:	cmp	r6, r0
   29468:	mov	r4, r0
   2946c:	beq	295a0 <flatcc_json_parser_build_string@@Base+0x188>
   29470:	ldrb	r3, [r0]
   29474:	ldr	r0, [r5]
   29478:	cmp	r3, #34	; 0x22
   2947c:	beq	295a8 <flatcc_json_parser_build_string@@Base+0x190>
   29480:	bl	2306c <flatcc_builder_start_string@@Base>
   29484:	cmp	r0, #0
   29488:	beq	294cc <flatcc_json_parser_build_string@@Base+0xb4>
   2948c:	mov	r3, #0
   29490:	str	r3, [r8]
   29494:	mov	r0, r4
   29498:	add	sp, sp, #8
   2949c:	ldrd	r4, [sp]
   294a0:	ldrd	r6, [sp, #8]
   294a4:	ldrd	r8, [sp, #16]
   294a8:	ldr	sl, [sp, #24]
   294ac:	add	sp, sp, #28
   294b0:	pop	{pc}		; (ldr pc, [sp], #4)
   294b4:	mov	r3, #16
   294b8:	mov	r2, r6
   294bc:	mov	r0, r5
   294c0:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   294c4:	mov	r7, r0
   294c8:	b	29454 <flatcc_json_parser_build_string@@Base+0x3c>
   294cc:	sub	r2, r4, r7
   294d0:	mov	r1, r7
   294d4:	ldr	r0, [r5]
   294d8:	bl	22ba8 <flatcc_builder_append_string@@Base>
   294dc:	cmp	r0, #0
   294e0:	beq	2948c <flatcc_json_parser_build_string@@Base+0x74>
   294e4:	cmp	r6, r4
   294e8:	beq	29574 <flatcc_json_parser_build_string@@Base+0x15c>
   294ec:	ldrb	r3, [r4]
   294f0:	cmp	r3, #34	; 0x22
   294f4:	beq	295cc <flatcc_json_parser_build_string@@Base+0x1b4>
   294f8:	add	sl, sp, #4
   294fc:	add	r9, sp, #5
   29500:	b	29520 <flatcc_json_parser_build_string@@Base+0x108>
   29504:	ldr	r0, [r5]
   29508:	bl	22ba8 <flatcc_builder_append_string@@Base>
   2950c:	cmp	r0, #0
   29510:	beq	2948c <flatcc_json_parser_build_string@@Base+0x74>
   29514:	ldrb	r3, [r4]
   29518:	cmp	r3, #34	; 0x22
   2951c:	beq	295cc <flatcc_json_parser_build_string@@Base+0x1b4>
   29520:	mov	r1, r4
   29524:	mov	r3, sl
   29528:	mov	r2, r6
   2952c:	mov	r0, r5
   29530:	bl	278ec <flatcc_json_parser_string_escape@@Base>
   29534:	mov	r7, r0
   29538:	ldrb	r2, [sp, #4]
   2953c:	mov	r1, r9
   29540:	ldr	r0, [r5]
   29544:	bl	22ba8 <flatcc_builder_append_string@@Base>
   29548:	cmp	r0, #0
   2954c:	mov	r2, r6
   29550:	mov	r1, r7
   29554:	mov	r0, r5
   29558:	beq	295dc <flatcc_json_parser_build_string@@Base+0x1c4>
   2955c:	bl	270e4 <flatcc_json_parser_string_part@@Base>
   29560:	cmp	r6, r0
   29564:	mov	r4, r0
   29568:	mov	r1, r7
   2956c:	sub	r2, r0, r7
   29570:	bne	29504 <flatcc_json_parser_build_string@@Base+0xec>
   29574:	mov	r4, r6
   29578:	ldr	r0, [r5]
   2957c:	bl	24c00 <flatcc_builder_end_string@@Base>
   29580:	str	r0, [r8]
   29584:	mov	r1, r4
   29588:	mov	r2, r6
   2958c:	mov	r0, r5
   29590:	mov	r3, #20
   29594:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   29598:	mov	r4, r0
   2959c:	b	29494 <flatcc_json_parser_build_string@@Base+0x7c>
   295a0:	ldr	r0, [r5]
   295a4:	b	29480 <flatcc_json_parser_build_string@@Base+0x68>
   295a8:	sub	r2, r4, r7
   295ac:	mov	r1, r7
   295b0:	bl	24a60 <flatcc_builder_create_string@@Base>
   295b4:	str	r0, [r8]
   295b8:	ldrb	r3, [r4]
   295bc:	cmp	r3, #34	; 0x22
   295c0:	addeq	r4, r4, #1
   295c4:	beq	29494 <flatcc_json_parser_build_string@@Base+0x7c>
   295c8:	b	29584 <flatcc_json_parser_build_string@@Base+0x16c>
   295cc:	ldr	r0, [r5]
   295d0:	bl	24c00 <flatcc_builder_end_string@@Base>
   295d4:	str	r0, [r8]
   295d8:	b	295b8 <flatcc_json_parser_build_string@@Base+0x1a0>
   295dc:	mov	r4, r7
   295e0:	b	2948c <flatcc_json_parser_build_string@@Base+0x74>

000295e4 <flatcc_json_parser_prepare_unions@@Base>:
   295e4:	add	ip, r3, r3, lsl #1
   295e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   295ec:	mov	r5, r0
   295f0:	ldr	r0, [r0]
   295f4:	mov	r4, r3
   295f8:	strd	r6, [sp, #8]
   295fc:	mov	r6, r1
   29600:	lsl	r1, ip, #3
   29604:	ldr	r7, [sp, #24]
   29608:	add	r1, r1, #8
   2960c:	str	r8, [sp, #16]
   29610:	mov	r8, r2
   29614:	str	lr, [sp, #20]
   29618:	bl	21b80 <flatcc_builder_enter_user_frame@@Base>
   2961c:	cmp	r0, #0
   29620:	str	r0, [r7]
   29624:	beq	29650 <flatcc_json_parser_prepare_unions@@Base+0x6c>
   29628:	mov	r1, r0
   2962c:	ldr	r0, [r5]
   29630:	bl	21ce0 <flatcc_builder_get_user_frame_ptr@@Base>
   29634:	ldr	r8, [sp, #16]
   29638:	str	r4, [r0]
   2963c:	mov	r0, r6
   29640:	ldrd	r4, [sp]
   29644:	ldrd	r6, [sp, #8]
   29648:	add	sp, sp, #20
   2964c:	pop	{pc}		; (ldr pc, [sp], #4)
   29650:	mov	r2, r8
   29654:	mov	r1, r6
   29658:	ldrd	r6, [sp, #8]
   2965c:	mov	r0, r5
   29660:	mov	r3, #33	; 0x21
   29664:	ldrd	r4, [sp]
   29668:	ldr	r8, [sp, #16]
   2966c:	ldr	lr, [sp, #20]
   29670:	add	sp, sp, #24
   29674:	b	270b8 <flatcc_json_parser_set_error@@Base>

00029678 <flatcc_json_parser_finalize_unions@@Base>:
   29678:	strd	r4, [sp, #-24]!	; 0xffffffe8
   2967c:	mov	r4, r0
   29680:	mov	r5, r3
   29684:	ldr	r0, [r0]
   29688:	strd	r6, [sp, #8]
   2968c:	mov	r6, r1
   29690:	mov	r1, r3
   29694:	mov	r7, r2
   29698:	str	r8, [sp, #16]
   2969c:	str	lr, [sp, #20]
   296a0:	bl	21ce0 <flatcc_builder_get_user_frame_ptr@@Base>
   296a4:	ldr	r3, [r0, #4]
   296a8:	cmp	r3, #0
   296ac:	bne	296d4 <flatcc_json_parser_finalize_unions@@Base+0x5c>
   296b0:	mov	r1, r5
   296b4:	ldr	r0, [r4]
   296b8:	bl	21c8c <flatcc_builder_exit_user_frame_at@@Base>
   296bc:	mov	r0, r6
   296c0:	ldrd	r4, [sp]
   296c4:	ldrd	r6, [sp, #8]
   296c8:	ldr	r8, [sp, #16]
   296cc:	add	sp, sp, #20
   296d0:	pop	{pc}		; (ldr pc, [sp], #4)
   296d4:	mov	r1, r6
   296d8:	mov	r2, r7
   296dc:	mov	r3, #27
   296e0:	mov	r0, r4
   296e4:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   296e8:	mov	r6, r0
   296ec:	b	296b0 <flatcc_json_parser_finalize_unions@@Base+0x38>

000296f0 <flatcc_json_parser_union@@Base>:
   296f0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   296f4:	mov	r5, r0
   296f8:	mov	r4, r3
   296fc:	ldr	r0, [r0]
   29700:	strd	r6, [sp, #8]
   29704:	mov	r6, r2
   29708:	str	r8, [sp, #16]
   2970c:	mov	r8, r1
   29710:	str	lr, [sp, #20]
   29714:	sub	sp, sp, #16
   29718:	ldr	r1, [sp, #44]	; 0x2c
   2971c:	ldrh	r7, [sp, #40]	; 0x28
   29720:	bl	21ce0 <flatcc_builder_get_user_frame_ptr@@Base>
   29724:	add	r3, r4, r4, lsl #1
   29728:	add	r3, r0, r3, lsl #3
   2972c:	ldr	r2, [r3, #8]
   29730:	cmp	r2, #0
   29734:	bne	29814 <flatcc_json_parser_union@@Base+0x124>
   29738:	ldrb	r2, [r3, #20]
   2973c:	mov	ip, r0
   29740:	cmp	r2, #0
   29744:	beq	297c4 <flatcc_json_parser_union@@Base+0xd4>
   29748:	ldrb	r3, [r3, #21]
   2974c:	cmp	r3, #0
   29750:	strb	r3, [sp, #8]
   29754:	beq	29830 <flatcc_json_parser_union@@Base+0x140>
   29758:	ldr	lr, [ip, #4]
   2975c:	mov	r1, r8
   29760:	mov	r2, r6
   29764:	mov	r0, r5
   29768:	add	r8, sp, #8
   2976c:	sub	lr, lr, #1
   29770:	str	lr, [ip, #4]
   29774:	add	ip, sp, #12
   29778:	str	ip, [sp]
   2977c:	ldr	ip, [sp, #48]	; 0x30
   29780:	blx	ip
   29784:	cmp	r6, r0
   29788:	mov	r4, r0
   2978c:	beq	297f8 <flatcc_json_parser_union@@Base+0x108>
   29790:	mov	r1, r7
   29794:	ldm	r8, {r2, r3}
   29798:	ldr	r0, [r5]
   2979c:	bl	25118 <flatcc_builder_table_add_union@@Base>
   297a0:	cmp	r0, #0
   297a4:	beq	297f8 <flatcc_json_parser_union@@Base+0x108>
   297a8:	mov	r1, r4
   297ac:	mov	r2, r6
   297b0:	mov	r0, r5
   297b4:	mov	r3, #28
   297b8:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   297bc:	mov	r4, r0
   297c0:	b	297f8 <flatcc_json_parser_union@@Base+0x108>
   297c4:	ldr	lr, [ip, #4]
   297c8:	mov	r2, r6
   297cc:	mov	r1, r8
   297d0:	mov	r0, r5
   297d4:	ldr	r6, [r5, #4]
   297d8:	ldr	r4, [r5, #16]
   297dc:	add	lr, lr, #1
   297e0:	str	lr, [ip, #4]
   297e4:	str	r8, [r3, #8]
   297e8:	str	r6, [r3, #12]
   297ec:	str	r4, [r3, #16]
   297f0:	bl	28248 <flatcc_json_parser_generic_json@@Base>
   297f4:	mov	r4, r0
   297f8:	mov	r0, r4
   297fc:	add	sp, sp, #16
   29800:	ldrd	r4, [sp]
   29804:	ldrd	r6, [sp, #8]
   29808:	ldr	r8, [sp, #16]
   2980c:	add	sp, sp, #20
   29810:	pop	{pc}		; (ldr pc, [sp], #4)
   29814:	mov	r2, r6
   29818:	mov	r1, r8
   2981c:	mov	r0, r5
   29820:	mov	r3, #28
   29824:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   29828:	mov	r4, r0
   2982c:	b	297f8 <flatcc_json_parser_union@@Base+0x108>
   29830:	mov	r2, r6
   29834:	mov	r1, r8
   29838:	mov	r0, r5
   2983c:	mov	r3, #25
   29840:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   29844:	mov	r4, r0
   29848:	b	297f8 <flatcc_json_parser_union@@Base+0x108>

0002984c <flatcc_json_parser_union_type@@Base>:
   2984c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   29850:	mov	r5, r0
   29854:	add	r4, r3, r3, lsl #1
   29858:	ldr	r0, [r0]
   2985c:	strd	r6, [sp, #8]
   29860:	lsl	r4, r4, #3
   29864:	mov	r7, r2
   29868:	strd	r8, [sp, #16]
   2986c:	mov	r9, r1
   29870:	strd	sl, [sp, #24]
   29874:	str	lr, [sp, #32]
   29878:	sub	sp, sp, #36	; 0x24
   2987c:	ldrh	r3, [sp, #72]	; 0x48
   29880:	ldr	r1, [sp, #76]	; 0x4c
   29884:	str	r3, [sp, #12]
   29888:	bl	21ce0 <flatcc_builder_get_user_frame_ptr@@Base>
   2988c:	add	fp, r0, #8
   29890:	add	r6, fp, r4
   29894:	ldrb	r3, [r6, #12]
   29898:	cmp	r3, #0
   2989c:	bne	299b8 <flatcc_json_parser_union_type@@Base+0x16c>
   298a0:	mov	sl, r0
   298a4:	mov	r1, #0
   298a8:	str	r3, [sp, #20]
   298ac:	mov	r0, #0
   298b0:	mov	r3, #1
   298b4:	cmp	r9, r7
   298b8:	strd	r0, [sp, #24]
   298bc:	strh	r3, [r6, #12]
   298c0:	beq	299b0 <flatcc_json_parser_union_type@@Base+0x164>
   298c4:	add	r0, sp, #24
   298c8:	add	r3, sp, #20
   298cc:	mov	r2, r7
   298d0:	mov	r1, r9
   298d4:	str	r0, [sp]
   298d8:	mov	r0, r5
   298dc:	bl	28ea4 <flatcc_json_parser_integer@@Base>
   298e0:	cmp	r9, r0
   298e4:	mov	r8, r0
   298e8:	bne	299d4 <flatcc_json_parser_union_type@@Base+0x188>
   298ec:	add	r0, r6, #13
   298f0:	mov	r1, r8
   298f4:	ldr	r3, [sp, #80]	; 0x50
   298f8:	mov	r2, r7
   298fc:	str	r0, [sp]
   29900:	mov	r0, r5
   29904:	bl	272c0 <flatcc_json_parser_space_ext@@Base+0x114>
   29908:	mov	r8, r0
   2990c:	ldr	r1, [fp, r4]
   29910:	ldr	r3, [sl, #4]
   29914:	cmp	r1, #0
   29918:	beq	29a24 <flatcc_json_parser_union_type@@Base+0x1d8>
   2991c:	cmp	r3, #0
   29920:	beq	29a70 <flatcc_json_parser_union_type@@Base+0x224>
   29924:	ldmib	r6, {ip, lr}
   29928:	sub	r3, r3, #1
   2992c:	mov	r2, r7
   29930:	mov	r0, r5
   29934:	add	r4, sp, #24
   29938:	ldr	r9, [r5, #16]
   2993c:	str	r3, [sl, #4]
   29940:	ldr	sl, [r5, #4]
   29944:	str	ip, [r5, #4]
   29948:	add	ip, sp, #28
   2994c:	str	lr, [r5, #16]
   29950:	ldrb	r3, [r6, #13]
   29954:	str	ip, [sp]
   29958:	ldr	ip, [sp, #84]	; 0x54
   2995c:	strb	r3, [sp, #24]
   29960:	blx	ip
   29964:	cmp	r7, r0
   29968:	moveq	r8, r7
   2996c:	beq	29990 <flatcc_json_parser_union_type@@Base+0x144>
   29970:	ldm	r4, {r2, r3}
   29974:	ldr	r0, [r5]
   29978:	ldr	r1, [sp, #12]
   2997c:	bl	25118 <flatcc_builder_table_add_union@@Base>
   29980:	cmp	r0, #0
   29984:	streq	sl, [r5, #4]
   29988:	streq	r9, [r5, #16]
   2998c:	bne	29a38 <flatcc_json_parser_union_type@@Base+0x1ec>
   29990:	mov	r0, r8
   29994:	add	sp, sp, #36	; 0x24
   29998:	ldrd	r4, [sp]
   2999c:	ldrd	r6, [sp, #8]
   299a0:	ldrd	r8, [sp, #16]
   299a4:	ldrd	sl, [sp, #24]
   299a8:	add	sp, sp, #32
   299ac:	pop	{pc}		; (ldr pc, [sp], #4)
   299b0:	mov	r8, r7
   299b4:	b	298ec <flatcc_json_parser_union_type@@Base+0xa0>
   299b8:	mov	r2, r7
   299bc:	mov	r1, r9
   299c0:	mov	r0, r5
   299c4:	mov	r3, #28
   299c8:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   299cc:	mov	r8, r0
   299d0:	b	29990 <flatcc_json_parser_union_type@@Base+0x144>
   299d4:	ldr	r3, [sp, #20]
   299d8:	cmp	r3, #0
   299dc:	bne	29a54 <flatcc_json_parser_union_type@@Base+0x208>
   299e0:	ldrd	r2, [sp, #24]
   299e4:	cmp	r3, #0
   299e8:	cmpeq	r2, #255	; 0xff
   299ec:	strbls	r2, [r6, #13]
   299f0:	bls	2990c <flatcc_json_parser_union_type@@Base+0xc0>
   299f4:	mov	r1, r0
   299f8:	mov	r3, #7
   299fc:	mov	r2, r7
   29a00:	mov	r0, r5
   29a04:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   29a08:	mov	r8, r0
   29a0c:	cmp	r9, r8
   29a10:	beq	298ec <flatcc_json_parser_union_type@@Base+0xa0>
   29a14:	ldr	r1, [fp, r4]
   29a18:	ldr	r3, [sl, #4]
   29a1c:	cmp	r1, #0
   29a20:	bne	2991c <flatcc_json_parser_union_type@@Base+0xd0>
   29a24:	ldrb	r2, [r6, #13]
   29a28:	cmp	r2, #0
   29a2c:	addne	r3, r3, #1
   29a30:	str	r3, [sl, #4]
   29a34:	b	29990 <flatcc_json_parser_union_type@@Base+0x144>
   29a38:	mov	r1, r8
   29a3c:	mov	r2, r7
   29a40:	mov	r0, r5
   29a44:	mov	r3, #28
   29a48:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   29a4c:	mov	r8, r0
   29a50:	b	29990 <flatcc_json_parser_union_type@@Base+0x144>
   29a54:	mov	r1, r0
   29a58:	mov	r3, #8
   29a5c:	mov	r2, r7
   29a60:	mov	r0, r5
   29a64:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   29a68:	mov	r8, r0
   29a6c:	b	29a0c <flatcc_json_parser_union_type@@Base+0x1c0>
   29a70:	ldr	r3, [pc, #32]	; 29a98 <flatcc_json_parser_union_type@@Base+0x24c>
   29a74:	movw	r2, #965	; 0x3c5
   29a78:	ldr	r1, [pc, #28]	; 29a9c <flatcc_json_parser_union_type@@Base+0x250>
   29a7c:	ldr	r0, [pc, #28]	; 29aa0 <flatcc_json_parser_union_type@@Base+0x254>
   29a80:	add	r3, pc, r3
   29a84:	add	r3, r3, #1984	; 0x7c0
   29a88:	add	r1, pc, r1
   29a8c:	add	r3, r3, #4
   29a90:	add	r0, pc, r0
   29a94:	bl	1267c <__assert_fail@plt>
   29a98:	andeq	r1, r0, r8, asr #24
   29a9c:	andeq	r2, r0, ip, lsl #17
   29aa0:	andeq	r2, r0, r8, ror #17

00029aa4 <flatcc_json_parser_union_vector@@Base>:
   29aa4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   29aa8:	mov	r4, r3
   29aac:	mov	r5, r0
   29ab0:	ldr	r0, [r0]
   29ab4:	strd	r6, [sp, #8]
   29ab8:	mov	r6, r1
   29abc:	ldr	r1, [sp, #36]	; 0x24
   29ac0:	strd	r8, [sp, #16]
   29ac4:	mov	r9, r2
   29ac8:	ldrh	r8, [sp, #32]
   29acc:	str	sl, [sp, #24]
   29ad0:	str	lr, [sp, #28]
   29ad4:	ldr	r7, [sp, #40]	; 0x28
   29ad8:	bl	21ce0 <flatcc_builder_get_user_frame_ptr@@Base>
   29adc:	add	r3, r4, r4, lsl #1
   29ae0:	add	ip, r0, #8
   29ae4:	lsl	r3, r3, #3
   29ae8:	ldr	r2, [ip, r3]
   29aec:	add	r4, ip, r3
   29af0:	cmp	r2, #0
   29af4:	bne	29b94 <flatcc_json_parser_union_vector@@Base+0xf0>
   29af8:	ldrb	r1, [r4, #12]
   29afc:	mov	lr, r0
   29b00:	ldr	r2, [r0, #4]
   29b04:	cmp	r1, #0
   29b08:	bne	29b50 <flatcc_json_parser_union_vector@@Base+0xac>
   29b0c:	ldr	r8, [r5, #4]
   29b10:	add	r1, r2, #1
   29b14:	mov	r0, r5
   29b18:	mov	r2, r9
   29b1c:	ldr	r7, [r5, #16]
   29b20:	ldr	sl, [sp, #24]
   29b24:	str	r1, [lr, #4]
   29b28:	mov	r1, r6
   29b2c:	str	r8, [r4, #4]
   29b30:	str	r7, [r4, #8]
   29b34:	str	r6, [ip, r3]
   29b38:	ldrd	r4, [sp]
   29b3c:	ldrd	r6, [sp, #8]
   29b40:	ldrd	r8, [sp, #16]
   29b44:	ldr	lr, [sp, #28]
   29b48:	add	sp, sp, #32
   29b4c:	b	28248 <flatcc_json_parser_generic_json@@Base>
   29b50:	sub	ip, r2, #1
   29b54:	ldr	r3, [r4, #20]
   29b58:	mov	r2, r9
   29b5c:	mov	r1, r6
   29b60:	mov	r0, r5
   29b64:	ldr	sl, [sp, #24]
   29b68:	str	ip, [lr, #4]
   29b6c:	str	r8, [sp, #36]	; 0x24
   29b70:	str	r7, [sp, #40]	; 0x28
   29b74:	ldr	ip, [r4, #16]
   29b78:	ldrd	r4, [sp]
   29b7c:	ldrd	r6, [sp, #8]
   29b80:	str	ip, [sp, #32]
   29b84:	ldrd	r8, [sp, #16]
   29b88:	ldr	lr, [sp, #28]
   29b8c:	add	sp, sp, #32
   29b90:	b	2750c <flatcc_json_parser_space_ext@@Base+0x360>
   29b94:	mov	r2, r9
   29b98:	mov	r1, r6
   29b9c:	ldrd	r6, [sp, #8]
   29ba0:	mov	r0, r5
   29ba4:	mov	r3, #28
   29ba8:	ldrd	r4, [sp]
   29bac:	ldrd	r8, [sp, #16]
   29bb0:	ldr	sl, [sp, #24]
   29bb4:	ldr	lr, [sp, #28]
   29bb8:	add	sp, sp, #32
   29bbc:	b	270b8 <flatcc_json_parser_set_error@@Base>

00029bc0 <flatcc_json_parser_union_type_vector@@Base>:
   29bc0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   29bc4:	add	r4, r3, r3, lsl #1
   29bc8:	mov	r5, r2
   29bcc:	strd	r6, [sp, #8]
   29bd0:	mov	r6, r0
   29bd4:	mov	r7, r1
   29bd8:	strd	r8, [sp, #16]
   29bdc:	strd	sl, [sp, #24]
   29be0:	str	lr, [sp, #32]
   29be4:	sub	sp, sp, #52	; 0x34
   29be8:	ldrh	r3, [sp, #88]	; 0x58
   29bec:	ldr	r0, [r0]
   29bf0:	ldr	r1, [sp, #92]	; 0x5c
   29bf4:	str	r3, [sp, #24]
   29bf8:	ldr	fp, [sp, #104]	; 0x68
   29bfc:	bl	21ce0 <flatcc_builder_get_user_frame_ptr@@Base>
   29c00:	lsl	r3, r4, #3
   29c04:	add	r0, r0, #8
   29c08:	str	r3, [sp, #28]
   29c0c:	add	r3, r0, r3
   29c10:	str	r3, [sp, #20]
   29c14:	ldrb	r3, [r3, #12]
   29c18:	cmp	r3, #0
   29c1c:	bne	29d10 <flatcc_json_parser_union_type_vector@@Base+0x150>
   29c20:	ldr	ip, [sp, #20]
   29c24:	mov	r0, #1
   29c28:	mvn	r3, #0
   29c2c:	mov	r2, r0
   29c30:	mov	r1, r0
   29c34:	strb	r0, [ip, #12]
   29c38:	ldr	r0, [r6]
   29c3c:	bl	22f60 <flatcc_builder_start_vector@@Base>
   29c40:	cmp	r0, #0
   29c44:	beq	29c80 <flatcc_json_parser_union_type_vector@@Base+0xc0>
   29c48:	mov	r2, r5
   29c4c:	mov	r1, r7
   29c50:	mov	r0, r6
   29c54:	mov	r3, #33	; 0x21
   29c58:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   29c5c:	mov	r4, r0
   29c60:	mov	r0, r4
   29c64:	add	sp, sp, #52	; 0x34
   29c68:	ldrd	r4, [sp]
   29c6c:	ldrd	r6, [sp, #8]
   29c70:	ldrd	r8, [sp, #16]
   29c74:	ldrd	sl, [sp, #24]
   29c78:	add	sp, sp, #32
   29c7c:	pop	{pc}		; (ldr pc, [sp], #4)
   29c80:	cmp	r7, r5
   29c84:	beq	29c94 <flatcc_json_parser_union_type_vector@@Base+0xd4>
   29c88:	ldrb	r3, [r7]
   29c8c:	cmp	r3, #91	; 0x5b
   29c90:	beq	29d2c <flatcc_json_parser_union_type_vector@@Base+0x16c>
   29c94:	mov	r1, r7
   29c98:	mov	r3, #22
   29c9c:	mov	r2, r5
   29ca0:	mov	r0, r6
   29ca4:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   29ca8:	mov	r4, r0
   29cac:	ldr	r0, [r6]
   29cb0:	bl	2404c <flatcc_builder_vector_count@@Base>
   29cb4:	ldr	r3, [sp, #20]
   29cb8:	mov	r7, r0
   29cbc:	mov	r1, r0
   29cc0:	ldr	r0, [r6]
   29cc4:	str	r7, [r3, #16]
   29cc8:	bl	21b80 <flatcc_builder_enter_user_frame@@Base>
   29ccc:	mov	r1, r0
   29cd0:	mov	r8, r0
   29cd4:	ldr	r0, [r6]
   29cd8:	bl	21ce0 <flatcc_builder_get_user_frame_ptr@@Base>
   29cdc:	mov	r9, r0
   29ce0:	ldr	r0, [r6]
   29ce4:	bl	24058 <flatcc_builder_vector_edit@@Base>
   29ce8:	mov	r1, r0
   29cec:	mov	r2, r7
   29cf0:	mov	r0, r9
   29cf4:	bl	12580 <memcpy@plt>
   29cf8:	ldr	r0, [r6]
   29cfc:	bl	23f4c <flatcc_builder_end_vector@@Base>
   29d00:	subs	r9, r0, #0
   29d04:	bne	29e9c <flatcc_json_parser_union_type_vector@@Base+0x2dc>
   29d08:	mov	r7, r4
   29d0c:	b	29c48 <flatcc_json_parser_union_type_vector@@Base+0x88>
   29d10:	mov	r2, r5
   29d14:	mov	r1, r7
   29d18:	mov	r0, r6
   29d1c:	mov	r3, #28
   29d20:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   29d24:	mov	r4, r0
   29d28:	b	29c60 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   29d2c:	add	r1, r7, #1
   29d30:	sub	r3, r5, r1
   29d34:	cmp	r3, #1
   29d38:	ble	29d60 <flatcc_json_parser_union_type_vector@@Base+0x1a0>
   29d3c:	ldrb	r3, [r7, #1]
   29d40:	cmp	r3, #32
   29d44:	movhi	r7, r1
   29d48:	bhi	29d70 <flatcc_json_parser_union_type_vector@@Base+0x1b0>
   29d4c:	bne	29d60 <flatcc_json_parser_union_type_vector@@Base+0x1a0>
   29d50:	ldrb	r3, [r7, #2]
   29d54:	cmp	r3, #32
   29d58:	addhi	r7, r7, #2
   29d5c:	bhi	29d70 <flatcc_json_parser_union_type_vector@@Base+0x1b0>
   29d60:	mov	r2, r5
   29d64:	mov	r0, r6
   29d68:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   29d6c:	mov	r7, r0
   29d70:	cmp	r5, r7
   29d74:	beq	29d84 <flatcc_json_parser_union_type_vector@@Base+0x1c4>
   29d78:	ldrb	r3, [r7]
   29d7c:	cmp	r3, #93	; 0x5d
   29d80:	beq	2a044 <flatcc_json_parser_union_type_vector@@Base+0x484>
   29d84:	mov	r9, #0
   29d88:	mov	r1, #1
   29d8c:	ldr	r0, [r6]
   29d90:	bl	22618 <flatcc_builder_extend_vector@@Base>
   29d94:	subs	r8, r0, #0
   29d98:	beq	29c48 <flatcc_json_parser_union_type_vector@@Base+0x88>
   29d9c:	mov	r2, #0
   29da0:	mov	r3, #0
   29da4:	strb	r9, [sp, #35]	; 0x23
   29da8:	cmp	r5, r7
   29dac:	str	r9, [sp, #36]	; 0x24
   29db0:	strd	r2, [sp, #40]	; 0x28
   29db4:	beq	29f58 <flatcc_json_parser_union_type_vector@@Base+0x398>
   29db8:	add	r0, sp, #40	; 0x28
   29dbc:	add	r3, sp, #36	; 0x24
   29dc0:	mov	r2, r5
   29dc4:	mov	r1, r7
   29dc8:	str	r0, [sp]
   29dcc:	mov	r0, r6
   29dd0:	bl	28ea4 <flatcc_json_parser_integer@@Base>
   29dd4:	cmp	r7, r0
   29dd8:	mov	sl, r0
   29ddc:	bne	29f60 <flatcc_json_parser_union_type_vector@@Base+0x3a0>
   29de0:	add	r0, sp, #35	; 0x23
   29de4:	mov	r2, r5
   29de8:	ldr	r3, [sp, #96]	; 0x60
   29dec:	mov	r1, sl
   29df0:	str	r0, [sp]
   29df4:	mov	r0, r6
   29df8:	bl	272c0 <flatcc_json_parser_space_ext@@Base+0x114>
   29dfc:	cmp	r5, r0
   29e00:	cmpne	r0, sl
   29e04:	mov	r4, r0
   29e08:	beq	29d08 <flatcc_json_parser_union_type_vector@@Base+0x148>
   29e0c:	ldrb	r0, [sp, #35]	; 0x23
   29e10:	blx	fp
   29e14:	cmp	r0, #0
   29e18:	bne	29f50 <flatcc_json_parser_union_type_vector@@Base+0x390>
   29e1c:	ldr	r3, [r6, #8]
   29e20:	tst	r3, #1
   29e24:	beq	2a0c0 <flatcc_json_parser_union_type_vector@@Base+0x500>
   29e28:	mov	r2, r0
   29e2c:	strb	r0, [sp, #35]	; 0x23
   29e30:	sub	r3, r5, r4
   29e34:	strb	r2, [r8]
   29e38:	cmp	r3, #1
   29e3c:	ble	29e50 <flatcc_json_parser_union_type_vector@@Base+0x290>
   29e40:	ldrb	r3, [r4]
   29e44:	cmp	r3, #32
   29e48:	bhi	29e64 <flatcc_json_parser_union_type_vector@@Base+0x2a4>
   29e4c:	beq	29fe8 <flatcc_json_parser_union_type_vector@@Base+0x428>
   29e50:	mov	r1, r4
   29e54:	mov	r2, r5
   29e58:	mov	r0, r6
   29e5c:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   29e60:	mov	r4, r0
   29e64:	cmp	r5, r4
   29e68:	beq	29cac <flatcc_json_parser_union_type_vector@@Base+0xec>
   29e6c:	ldrb	r3, [r4]
   29e70:	cmp	r3, #44	; 0x2c
   29e74:	beq	29ffc <flatcc_json_parser_union_type_vector@@Base+0x43c>
   29e78:	cmp	r3, #93	; 0x5d
   29e7c:	beq	29fb0 <flatcc_json_parser_union_type_vector@@Base+0x3f0>
   29e80:	mov	r1, r4
   29e84:	mov	r3, #9
   29e88:	mov	r2, r5
   29e8c:	mov	r0, r6
   29e90:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   29e94:	mov	r4, r0
   29e98:	b	29cac <flatcc_json_parser_union_type_vector@@Base+0xec>
   29e9c:	ldr	r3, [sp, #24]
   29ea0:	ldr	r0, [r6]
   29ea4:	sub	r1, r3, #1
   29ea8:	bl	24f88 <flatcc_builder_table_add_offset@@Base>
   29eac:	cmp	r0, #0
   29eb0:	beq	29d08 <flatcc_json_parser_union_type_vector@@Base+0x148>
   29eb4:	str	r9, [r0]
   29eb8:	ldr	r0, [r6]
   29ebc:	ldr	r1, [sp, #92]	; 0x5c
   29ec0:	bl	21ce0 <flatcc_builder_get_user_frame_ptr@@Base>
   29ec4:	ldr	r3, [sp, #28]
   29ec8:	add	r2, r0, #8
   29ecc:	ldr	r1, [r2, r3]
   29ed0:	add	r2, r2, r3
   29ed4:	ldr	r3, [r0, #4]
   29ed8:	str	r8, [r2, #20]
   29edc:	cmp	r1, #0
   29ee0:	addeq	r3, r3, #1
   29ee4:	streq	r3, [r0, #4]
   29ee8:	beq	29c60 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   29eec:	cmp	r3, #0
   29ef0:	beq	2a0f8 <flatcc_json_parser_union_type_vector@@Base+0x538>
   29ef4:	sub	lr, r3, #1
   29ef8:	mov	r3, r8
   29efc:	ldr	ip, [r2, #4]
   29f00:	ldr	r8, [r2, #8]
   29f04:	mov	r2, r5
   29f08:	str	lr, [r0, #4]
   29f0c:	mov	r0, r6
   29f10:	ldr	lr, [sp, #24]
   29f14:	str	r7, [sp]
   29f18:	str	lr, [sp, #4]
   29f1c:	ldr	lr, [sp, #100]	; 0x64
   29f20:	str	lr, [sp, #8]
   29f24:	ldr	r7, [r6, #16]
   29f28:	str	r8, [r6, #16]
   29f2c:	ldr	r8, [r6, #4]
   29f30:	str	ip, [r6, #4]
   29f34:	bl	2750c <flatcc_json_parser_space_ext@@Base+0x360>
   29f38:	cmp	r5, r0
   29f3c:	moveq	r4, r5
   29f40:	beq	29c60 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   29f44:	str	r8, [r6, #4]
   29f48:	str	r7, [r6, #16]
   29f4c:	b	29c60 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   29f50:	ldrb	r2, [sp, #35]	; 0x23
   29f54:	b	29e30 <flatcc_json_parser_union_type_vector@@Base+0x270>
   29f58:	mov	sl, r5
   29f5c:	b	29de0 <flatcc_json_parser_union_type_vector@@Base+0x220>
   29f60:	ldr	r3, [sp, #36]	; 0x24
   29f64:	cmp	r3, #0
   29f68:	bne	2a07c <flatcc_json_parser_union_type_vector@@Base+0x4bc>
   29f6c:	ldrd	r0, [sp, #40]	; 0x28
   29f70:	cmp	r1, #0
   29f74:	cmpeq	r0, #255	; 0xff
   29f78:	uxtbls	r0, r0
   29f7c:	movls	r4, sl
   29f80:	strbls	r0, [sp, #35]	; 0x23
   29f84:	bls	29e10 <flatcc_json_parser_union_type_vector@@Base+0x250>
   29f88:	mov	r1, sl
   29f8c:	mov	r3, #7
   29f90:	mov	r2, r5
   29f94:	mov	r0, r6
   29f98:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   29f9c:	mov	r4, r0
   29fa0:	cmp	r7, r4
   29fa4:	bne	29e0c <flatcc_json_parser_union_type_vector@@Base+0x24c>
   29fa8:	mov	sl, r7
   29fac:	b	29de0 <flatcc_json_parser_union_type_vector@@Base+0x220>
   29fb0:	add	r1, r4, #1
   29fb4:	sub	r3, r5, r1
   29fb8:	cmp	r3, #1
   29fbc:	ble	29fd4 <flatcc_json_parser_union_type_vector@@Base+0x414>
   29fc0:	ldrb	r3, [r4, #1]
   29fc4:	cmp	r3, #32
   29fc8:	movhi	r4, r1
   29fcc:	bhi	29cac <flatcc_json_parser_union_type_vector@@Base+0xec>
   29fd0:	beq	2a098 <flatcc_json_parser_union_type_vector@@Base+0x4d8>
   29fd4:	mov	r2, r5
   29fd8:	mov	r0, r6
   29fdc:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   29fe0:	mov	r4, r0
   29fe4:	b	29cac <flatcc_json_parser_union_type_vector@@Base+0xec>
   29fe8:	ldrb	r3, [r4, #1]
   29fec:	cmp	r3, #32
   29ff0:	addhi	r4, r4, #1
   29ff4:	bls	29e50 <flatcc_json_parser_union_type_vector@@Base+0x290>
   29ff8:	b	29e64 <flatcc_json_parser_union_type_vector@@Base+0x2a4>
   29ffc:	add	r7, r4, #1
   2a000:	sub	r3, r5, r7
   2a004:	cmp	r3, #1
   2a008:	ble	2a01c <flatcc_json_parser_union_type_vector@@Base+0x45c>
   2a00c:	ldrb	r3, [r4, #1]
   2a010:	cmp	r3, #32
   2a014:	bhi	2a030 <flatcc_json_parser_union_type_vector@@Base+0x470>
   2a018:	beq	2a0ac <flatcc_json_parser_union_type_vector@@Base+0x4ec>
   2a01c:	mov	r1, r7
   2a020:	mov	r2, r5
   2a024:	mov	r0, r6
   2a028:	bl	271ac <flatcc_json_parser_space_ext@@Base>
   2a02c:	mov	r7, r0
   2a030:	cmp	r5, r7
   2a034:	beq	2a0dc <flatcc_json_parser_union_type_vector@@Base+0x51c>
   2a038:	ldrb	r3, [r7]
   2a03c:	cmp	r3, #93	; 0x5d
   2a040:	bne	29d88 <flatcc_json_parser_union_type_vector@@Base+0x1c8>
   2a044:	add	r4, r7, #1
   2a048:	sub	r3, r5, r4
   2a04c:	cmp	r3, #1
   2a050:	ble	2a074 <flatcc_json_parser_union_type_vector@@Base+0x4b4>
   2a054:	ldrb	r3, [r7, #1]
   2a058:	cmp	r3, #32
   2a05c:	bhi	29cac <flatcc_json_parser_union_type_vector@@Base+0xec>
   2a060:	bne	2a074 <flatcc_json_parser_union_type_vector@@Base+0x4b4>
   2a064:	ldrb	r3, [r7, #2]
   2a068:	cmp	r3, #32
   2a06c:	addhi	r4, r7, #2
   2a070:	bhi	29cac <flatcc_json_parser_union_type_vector@@Base+0xec>
   2a074:	mov	r1, r4
   2a078:	b	29fd4 <flatcc_json_parser_union_type_vector@@Base+0x414>
   2a07c:	mov	r1, r0
   2a080:	mov	r3, #8
   2a084:	mov	r2, r5
   2a088:	mov	r0, r6
   2a08c:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   2a090:	mov	r4, r0
   2a094:	b	29fa0 <flatcc_json_parser_union_type_vector@@Base+0x3e0>
   2a098:	ldrb	r3, [r4, #2]
   2a09c:	cmp	r3, #32
   2a0a0:	addhi	r4, r4, #2
   2a0a4:	bls	29fd4 <flatcc_json_parser_union_type_vector@@Base+0x414>
   2a0a8:	b	29cac <flatcc_json_parser_union_type_vector@@Base+0xec>
   2a0ac:	ldrb	r3, [r4, #2]
   2a0b0:	cmp	r3, #32
   2a0b4:	addhi	r7, r4, #2
   2a0b8:	bls	2a01c <flatcc_json_parser_union_type_vector@@Base+0x45c>
   2a0bc:	b	2a030 <flatcc_json_parser_union_type_vector@@Base+0x470>
   2a0c0:	mov	r1, r4
   2a0c4:	mov	r2, r5
   2a0c8:	mov	r0, r6
   2a0cc:	mov	r3, #15
   2a0d0:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   2a0d4:	mov	r4, r0
   2a0d8:	b	29c60 <flatcc_json_parser_union_type_vector@@Base+0xa0>
   2a0dc:	mov	r3, #9
   2a0e0:	mov	r2, r5
   2a0e4:	mov	r1, r5
   2a0e8:	mov	r0, r6
   2a0ec:	bl	270b8 <flatcc_json_parser_set_error@@Base>
   2a0f0:	mov	r4, r0
   2a0f4:	b	29cac <flatcc_json_parser_union_type_vector@@Base+0xec>
   2a0f8:	ldr	r3, [pc, #32]	; 2a120 <flatcc_json_parser_union_type_vector@@Base+0x560>
   2a0fc:	movw	r2, #1122	; 0x462
   2a100:	ldr	r1, [pc, #28]	; 2a124 <flatcc_json_parser_union_type_vector@@Base+0x564>
   2a104:	ldr	r0, [pc, #28]	; 2a128 <flatcc_json_parser_union_type_vector@@Base+0x568>
   2a108:	add	r3, pc, r3
   2a10c:	add	r3, r3, #2016	; 0x7e0
   2a110:	add	r1, pc, r1
   2a114:	add	r3, r3, #4
   2a118:	add	r0, pc, r0
   2a11c:	bl	1267c <__assert_fail@plt>
   2a120:	andeq	r1, r0, r0, asr #11
   2a124:	andeq	r2, r0, r4, lsl #4
   2a128:	andeq	r2, r0, r0, ror #4

0002a12c <flatcc_json_parser_table_as_root@@Base>:
   2a12c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   2a130:	subs	r4, r1, #0
   2a134:	mov	r5, r2
   2a138:	strd	r6, [sp, #8]
   2a13c:	mov	r2, #32
   2a140:	mov	r1, #0
   2a144:	strd	r8, [sp, #16]
   2a148:	mov	r8, r0
   2a14c:	add	r6, r5, r3
   2a150:	str	lr, [sp, #24]
   2a154:	sub	sp, sp, #52	; 0x34
   2a158:	ldr	r9, [sp, #80]	; 0x50
   2a15c:	addeq	r4, sp, #4
   2a160:	add	r0, r4, #12
   2a164:	bl	12628 <memset@plt>
   2a168:	mov	ip, #1
   2a16c:	mov	r2, #0
   2a170:	str	r8, [r4]
   2a174:	mov	r0, r8
   2a178:	ldr	r1, [sp, #84]	; 0x54
   2a17c:	asr	r7, r9, #1
   2a180:	stmib	r4, {r5, r9}
   2a184:	str	ip, [r4, #16]
   2a188:	and	r7, r7, #2
   2a18c:	str	r5, [r4, #28]
   2a190:	mov	r3, r7
   2a194:	str	r6, [r4, #32]
   2a198:	str	r5, [r4, #36]	; 0x24
   2a19c:	bl	22238 <flatcc_builder_start_buffer@@Base>
   2a1a0:	cmp	r0, #0
   2a1a4:	bne	2a204 <flatcc_json_parser_table_as_root@@Base+0xd8>
   2a1a8:	mov	r2, r6
   2a1ac:	mov	r3, sp
   2a1b0:	ldr	ip, [sp, #88]	; 0x58
   2a1b4:	mov	r1, r5
   2a1b8:	mov	r0, r4
   2a1bc:	blx	ip
   2a1c0:	ldr	r6, [r4, #24]
   2a1c4:	cmp	r6, #0
   2a1c8:	beq	2a1e8 <flatcc_json_parser_table_as_root@@Base+0xbc>
   2a1cc:	mov	r0, r6
   2a1d0:	add	sp, sp, #52	; 0x34
   2a1d4:	ldrd	r4, [sp]
   2a1d8:	ldrd	r6, [sp, #8]
   2a1dc:	ldrd	r8, [sp, #16]
   2a1e0:	add	sp, sp, #24
   2a1e4:	pop	{pc}		; (ldr pc, [sp], #4)
   2a1e8:	mov	r0, r8
   2a1ec:	ldr	r1, [sp]
   2a1f0:	bl	22314 <flatcc_builder_end_buffer@@Base>
   2a1f4:	cmp	r0, #0
   2a1f8:	beq	2a204 <flatcc_json_parser_table_as_root@@Base+0xd8>
   2a1fc:	str	r5, [r4, #40]	; 0x28
   2a200:	b	2a1cc <flatcc_json_parser_table_as_root@@Base+0xa0>
   2a204:	mvn	r6, #0
   2a208:	b	2a1cc <flatcc_json_parser_table_as_root@@Base+0xa0>

0002a20c <flatcc_json_parser_struct_as_root@@Base>:
   2a20c:	b	2a12c <flatcc_json_parser_table_as_root@@Base>
   2a210:	eor	r1, r1, #-2147483648	; 0x80000000
   2a214:	b	2a21c <flatcc_json_parser_struct_as_root@@Base+0x10>
   2a218:	eor	r3, r3, #-2147483648	; 0x80000000
   2a21c:	push	{r4, r5, lr}
   2a220:	lsl	r4, r1, #1
   2a224:	lsl	r5, r3, #1
   2a228:	teq	r4, r5
   2a22c:	teqeq	r0, r2
   2a230:	orrsne	ip, r4, r0
   2a234:	orrsne	ip, r5, r2
   2a238:	mvnsne	ip, r4, asr #21
   2a23c:	mvnsne	ip, r5, asr #21
   2a240:	beq	2a42c <flatcc_json_parser_struct_as_root@@Base+0x220>
   2a244:	lsr	r4, r4, #21
   2a248:	rsbs	r5, r4, r5, lsr #21
   2a24c:	rsblt	r5, r5, #0
   2a250:	ble	2a270 <flatcc_json_parser_struct_as_root@@Base+0x64>
   2a254:	add	r4, r4, r5
   2a258:	eor	r2, r0, r2
   2a25c:	eor	r3, r1, r3
   2a260:	eor	r0, r2, r0
   2a264:	eor	r1, r3, r1
   2a268:	eor	r2, r0, r2
   2a26c:	eor	r3, r1, r3
   2a270:	cmp	r5, #54	; 0x36
   2a274:	pophi	{r4, r5, pc}
   2a278:	tst	r1, #-2147483648	; 0x80000000
   2a27c:	lsl	r1, r1, #12
   2a280:	mov	ip, #1048576	; 0x100000
   2a284:	orr	r1, ip, r1, lsr #12
   2a288:	beq	2a294 <flatcc_json_parser_struct_as_root@@Base+0x88>
   2a28c:	rsbs	r0, r0, #0
   2a290:	rsc	r1, r1, #0
   2a294:	tst	r3, #-2147483648	; 0x80000000
   2a298:	lsl	r3, r3, #12
   2a29c:	orr	r3, ip, r3, lsr #12
   2a2a0:	beq	2a2ac <flatcc_json_parser_struct_as_root@@Base+0xa0>
   2a2a4:	rsbs	r2, r2, #0
   2a2a8:	rsc	r3, r3, #0
   2a2ac:	teq	r4, r5
   2a2b0:	beq	2a414 <flatcc_json_parser_struct_as_root@@Base+0x208>
   2a2b4:	sub	r4, r4, #1
   2a2b8:	rsbs	lr, r5, #32
   2a2bc:	blt	2a2d8 <flatcc_json_parser_struct_as_root@@Base+0xcc>
   2a2c0:	lsl	ip, r2, lr
   2a2c4:	adds	r0, r0, r2, lsr r5
   2a2c8:	adc	r1, r1, #0
   2a2cc:	adds	r0, r0, r3, lsl lr
   2a2d0:	adcs	r1, r1, r3, asr r5
   2a2d4:	b	2a2f4 <flatcc_json_parser_struct_as_root@@Base+0xe8>
   2a2d8:	sub	r5, r5, #32
   2a2dc:	add	lr, lr, #32
   2a2e0:	cmp	r2, #1
   2a2e4:	lsl	ip, r3, lr
   2a2e8:	orrcs	ip, ip, #2
   2a2ec:	adds	r0, r0, r3, asr r5
   2a2f0:	adcs	r1, r1, r3, asr #31
   2a2f4:	and	r5, r1, #-2147483648	; 0x80000000
   2a2f8:	bpl	2a308 <flatcc_json_parser_struct_as_root@@Base+0xfc>
   2a2fc:	rsbs	ip, ip, #0
   2a300:	rscs	r0, r0, #0
   2a304:	rsc	r1, r1, #0
   2a308:	cmp	r1, #1048576	; 0x100000
   2a30c:	bcc	2a34c <flatcc_json_parser_struct_as_root@@Base+0x140>
   2a310:	cmp	r1, #2097152	; 0x200000
   2a314:	bcc	2a334 <flatcc_json_parser_struct_as_root@@Base+0x128>
   2a318:	lsrs	r1, r1, #1
   2a31c:	rrxs	r0, r0
   2a320:	rrx	ip, ip
   2a324:	add	r4, r4, #1
   2a328:	lsl	r2, r4, #21
   2a32c:	cmn	r2, #4194304	; 0x400000
   2a330:	bcs	2a48c <flatcc_json_parser_struct_as_root@@Base+0x280>
   2a334:	cmp	ip, #-2147483648	; 0x80000000
   2a338:	lsrseq	ip, r0, #1
   2a33c:	adcs	r0, r0, #0
   2a340:	adc	r1, r1, r4, lsl #20
   2a344:	orr	r1, r1, r5
   2a348:	pop	{r4, r5, pc}
   2a34c:	lsls	ip, ip, #1
   2a350:	adcs	r0, r0, r0
   2a354:	adc	r1, r1, r1
   2a358:	tst	r1, #1048576	; 0x100000
   2a35c:	sub	r4, r4, #1
   2a360:	bne	2a334 <flatcc_json_parser_struct_as_root@@Base+0x128>
   2a364:	teq	r1, #0
   2a368:	moveq	r1, r0
   2a36c:	moveq	r0, #0
   2a370:	clz	r3, r1
   2a374:	addeq	r3, r3, #32
   2a378:	sub	r3, r3, #11
   2a37c:	subs	r2, r3, #32
   2a380:	bge	2a3a4 <flatcc_json_parser_struct_as_root@@Base+0x198>
   2a384:	adds	r2, r2, #12
   2a388:	ble	2a3a0 <flatcc_json_parser_struct_as_root@@Base+0x194>
   2a38c:	add	ip, r2, #20
   2a390:	rsb	r2, r2, #12
   2a394:	lsl	r0, r1, ip
   2a398:	lsr	r1, r1, r2
   2a39c:	b	2a3b4 <flatcc_json_parser_struct_as_root@@Base+0x1a8>
   2a3a0:	add	r2, r2, #20
   2a3a4:	rsble	ip, r2, #32
   2a3a8:	lsl	r1, r1, r2
   2a3ac:	orrle	r1, r1, r0, lsr ip
   2a3b0:	lslle	r0, r0, r2
   2a3b4:	subs	r4, r4, r3
   2a3b8:	addge	r1, r1, r4, lsl #20
   2a3bc:	orrge	r1, r1, r5
   2a3c0:	popge	{r4, r5, pc}
   2a3c4:	mvn	r4, r4
   2a3c8:	subs	r4, r4, #31
   2a3cc:	bge	2a408 <flatcc_json_parser_struct_as_root@@Base+0x1fc>
   2a3d0:	adds	r4, r4, #12
   2a3d4:	bgt	2a3f0 <flatcc_json_parser_struct_as_root@@Base+0x1e4>
   2a3d8:	add	r4, r4, #20
   2a3dc:	rsb	r2, r4, #32
   2a3e0:	lsr	r0, r0, r4
   2a3e4:	orr	r0, r0, r1, lsl r2
   2a3e8:	orr	r1, r5, r1, lsr r4
   2a3ec:	pop	{r4, r5, pc}
   2a3f0:	rsb	r4, r4, #12
   2a3f4:	rsb	r2, r4, #32
   2a3f8:	lsr	r0, r0, r2
   2a3fc:	orr	r0, r0, r1, lsl r4
   2a400:	mov	r1, r5
   2a404:	pop	{r4, r5, pc}
   2a408:	lsr	r0, r1, r4
   2a40c:	mov	r1, r5
   2a410:	pop	{r4, r5, pc}
   2a414:	teq	r4, #0
   2a418:	eor	r3, r3, #1048576	; 0x100000
   2a41c:	eoreq	r1, r1, #1048576	; 0x100000
   2a420:	addeq	r4, r4, #1
   2a424:	subne	r5, r5, #1
   2a428:	b	2a2b4 <flatcc_json_parser_struct_as_root@@Base+0xa8>
   2a42c:	mvns	ip, r4, asr #21
   2a430:	mvnsne	ip, r5, asr #21
   2a434:	beq	2a49c <flatcc_json_parser_struct_as_root@@Base+0x290>
   2a438:	teq	r4, r5
   2a43c:	teqeq	r0, r2
   2a440:	beq	2a454 <flatcc_json_parser_struct_as_root@@Base+0x248>
   2a444:	orrs	ip, r4, r0
   2a448:	moveq	r1, r3
   2a44c:	moveq	r0, r2
   2a450:	pop	{r4, r5, pc}
   2a454:	teq	r1, r3
   2a458:	movne	r1, #0
   2a45c:	movne	r0, #0
   2a460:	popne	{r4, r5, pc}
   2a464:	lsrs	ip, r4, #21
   2a468:	bne	2a47c <flatcc_json_parser_struct_as_root@@Base+0x270>
   2a46c:	lsls	r0, r0, #1
   2a470:	adcs	r1, r1, r1
   2a474:	orrcs	r1, r1, #-2147483648	; 0x80000000
   2a478:	pop	{r4, r5, pc}
   2a47c:	adds	r4, r4, #4194304	; 0x400000
   2a480:	addcc	r1, r1, #1048576	; 0x100000
   2a484:	popcc	{r4, r5, pc}
   2a488:	and	r5, r1, #-2147483648	; 0x80000000
   2a48c:	orr	r1, r5, #2130706432	; 0x7f000000
   2a490:	orr	r1, r1, #15728640	; 0xf00000
   2a494:	mov	r0, #0
   2a498:	pop	{r4, r5, pc}
   2a49c:	mvns	ip, r4, asr #21
   2a4a0:	movne	r1, r3
   2a4a4:	movne	r0, r2
   2a4a8:	mvnseq	ip, r5, asr #21
   2a4ac:	movne	r3, r1
   2a4b0:	movne	r2, r0
   2a4b4:	orrs	r4, r0, r1, lsl #12
   2a4b8:	orrseq	r5, r2, r3, lsl #12
   2a4bc:	teqeq	r1, r3
   2a4c0:	orrne	r1, r1, #524288	; 0x80000
   2a4c4:	pop	{r4, r5, pc}
   2a4c8:	teq	r0, #0
   2a4cc:	moveq	r1, #0
   2a4d0:	bxeq	lr
   2a4d4:	push	{r4, r5, lr}
   2a4d8:	mov	r4, #1024	; 0x400
   2a4dc:	add	r4, r4, #50	; 0x32
   2a4e0:	mov	r5, #0
   2a4e4:	mov	r1, #0
   2a4e8:	b	2a364 <flatcc_json_parser_struct_as_root@@Base+0x158>
   2a4ec:	teq	r0, #0
   2a4f0:	moveq	r1, #0
   2a4f4:	bxeq	lr
   2a4f8:	push	{r4, r5, lr}
   2a4fc:	mov	r4, #1024	; 0x400
   2a500:	add	r4, r4, #50	; 0x32
   2a504:	ands	r5, r0, #-2147483648	; 0x80000000
   2a508:	rsbmi	r0, r0, #0
   2a50c:	mov	r1, #0
   2a510:	b	2a364 <flatcc_json_parser_struct_as_root@@Base+0x158>
   2a514:	lsls	r2, r0, #1
   2a518:	asr	r1, r2, #3
   2a51c:	rrx	r1, r1
   2a520:	lsl	r0, r2, #28
   2a524:	andsne	r3, r2, #-16777216	; 0xff000000
   2a528:	teqne	r3, #-16777216	; 0xff000000
   2a52c:	eorne	r1, r1, #939524096	; 0x38000000
   2a530:	bxne	lr
   2a534:	bics	r2, r2, #-16777216	; 0xff000000
   2a538:	bxeq	lr
   2a53c:	teq	r3, #-16777216	; 0xff000000
   2a540:	orreq	r1, r1, #524288	; 0x80000
   2a544:	bxeq	lr
   2a548:	push	{r4, r5, lr}
   2a54c:	mov	r4, #896	; 0x380
   2a550:	and	r5, r1, #-2147483648	; 0x80000000
   2a554:	bic	r1, r1, #-2147483648	; 0x80000000
   2a558:	b	2a364 <flatcc_json_parser_struct_as_root@@Base+0x158>
   2a55c:	orrs	r2, r0, r1
   2a560:	bxeq	lr
   2a564:	push	{r4, r5, lr}
   2a568:	mov	r5, #0
   2a56c:	b	2a58c <flatcc_json_parser_struct_as_root@@Base+0x380>
   2a570:	orrs	r2, r0, r1
   2a574:	bxeq	lr
   2a578:	push	{r4, r5, lr}
   2a57c:	ands	r5, r1, #-2147483648	; 0x80000000
   2a580:	bpl	2a58c <flatcc_json_parser_struct_as_root@@Base+0x380>
   2a584:	rsbs	r0, r0, #0
   2a588:	rsc	r1, r1, #0
   2a58c:	mov	r4, #1024	; 0x400
   2a590:	add	r4, r4, #50	; 0x32
   2a594:	lsrs	ip, r1, #22
   2a598:	beq	2a308 <flatcc_json_parser_struct_as_root@@Base+0xfc>
   2a59c:	mov	r2, #3
   2a5a0:	lsrs	ip, ip, #3
   2a5a4:	addne	r2, r2, #3
   2a5a8:	lsrs	ip, ip, #3
   2a5ac:	addne	r2, r2, #3
   2a5b0:	add	r2, r2, ip, lsr #3
   2a5b4:	rsb	r3, r2, #32
   2a5b8:	lsl	ip, r0, r3
   2a5bc:	lsr	r0, r0, r2
   2a5c0:	orr	r0, r0, r1, lsl r3
   2a5c4:	lsr	r1, r1, r2
   2a5c8:	add	r4, r4, r2
   2a5cc:	b	2a308 <flatcc_json_parser_struct_as_root@@Base+0xfc>
   2a5d0:	eor	r0, r0, #-2147483648	; 0x80000000
   2a5d4:	b	2a5dc <flatcc_json_parser_struct_as_root@@Base+0x3d0>
   2a5d8:	eor	r1, r1, #-2147483648	; 0x80000000
   2a5dc:	lsls	r2, r0, #1
   2a5e0:	lslsne	r3, r1, #1
   2a5e4:	teqne	r2, r3
   2a5e8:	mvnsne	ip, r2, asr #24
   2a5ec:	mvnsne	ip, r3, asr #24
   2a5f0:	beq	2a6e8 <flatcc_json_parser_struct_as_root@@Base+0x4dc>
   2a5f4:	lsr	r2, r2, #24
   2a5f8:	rsbs	r3, r2, r3, lsr #24
   2a5fc:	addgt	r2, r2, r3
   2a600:	eorgt	r1, r0, r1
   2a604:	eorgt	r0, r1, r0
   2a608:	eorgt	r1, r0, r1
   2a60c:	rsblt	r3, r3, #0
   2a610:	cmp	r3, #25
   2a614:	bxhi	lr
   2a618:	tst	r0, #-2147483648	; 0x80000000
   2a61c:	orr	r0, r0, #8388608	; 0x800000
   2a620:	bic	r0, r0, #-16777216	; 0xff000000
   2a624:	rsbne	r0, r0, #0
   2a628:	tst	r1, #-2147483648	; 0x80000000
   2a62c:	orr	r1, r1, #8388608	; 0x800000
   2a630:	bic	r1, r1, #-16777216	; 0xff000000
   2a634:	rsbne	r1, r1, #0
   2a638:	teq	r2, r3
   2a63c:	beq	2a6d0 <flatcc_json_parser_struct_as_root@@Base+0x4c4>
   2a640:	sub	r2, r2, #1
   2a644:	adds	r0, r0, r1, asr r3
   2a648:	rsb	r3, r3, #32
   2a64c:	lsl	r1, r1, r3
   2a650:	and	r3, r0, #-2147483648	; 0x80000000
   2a654:	bpl	2a660 <flatcc_json_parser_struct_as_root@@Base+0x454>
   2a658:	rsbs	r1, r1, #0
   2a65c:	rsc	r0, r0, #0
   2a660:	cmp	r0, #8388608	; 0x800000
   2a664:	bcc	2a698 <flatcc_json_parser_struct_as_root@@Base+0x48c>
   2a668:	cmp	r0, #16777216	; 0x1000000
   2a66c:	bcc	2a684 <flatcc_json_parser_struct_as_root@@Base+0x478>
   2a670:	lsrs	r0, r0, #1
   2a674:	rrx	r1, r1
   2a678:	add	r2, r2, #1
   2a67c:	cmp	r2, #254	; 0xfe
   2a680:	bcs	2a73c <flatcc_json_parser_struct_as_root@@Base+0x530>
   2a684:	cmp	r1, #-2147483648	; 0x80000000
   2a688:	adc	r0, r0, r2, lsl #23
   2a68c:	biceq	r0, r0, #1
   2a690:	orr	r0, r0, r3
   2a694:	bx	lr
   2a698:	lsls	r1, r1, #1
   2a69c:	adc	r0, r0, r0
   2a6a0:	tst	r0, #8388608	; 0x800000
   2a6a4:	sub	r2, r2, #1
   2a6a8:	bne	2a684 <flatcc_json_parser_struct_as_root@@Base+0x478>
   2a6ac:	clz	ip, r0
   2a6b0:	sub	ip, ip, #8
   2a6b4:	subs	r2, r2, ip
   2a6b8:	lsl	r0, r0, ip
   2a6bc:	addge	r0, r0, r2, lsl #23
   2a6c0:	rsblt	r2, r2, #0
   2a6c4:	orrge	r0, r0, r3
   2a6c8:	orrlt	r0, r3, r0, lsr r2
   2a6cc:	bx	lr
   2a6d0:	teq	r2, #0
   2a6d4:	eor	r1, r1, #8388608	; 0x800000
   2a6d8:	eoreq	r0, r0, #8388608	; 0x800000
   2a6dc:	addeq	r2, r2, #1
   2a6e0:	subne	r3, r3, #1
   2a6e4:	b	2a640 <flatcc_json_parser_struct_as_root@@Base+0x434>
   2a6e8:	lsl	r3, r1, #1
   2a6ec:	mvns	ip, r2, asr #24
   2a6f0:	mvnsne	ip, r3, asr #24
   2a6f4:	beq	2a748 <flatcc_json_parser_struct_as_root@@Base+0x53c>
   2a6f8:	teq	r2, r3
   2a6fc:	beq	2a70c <flatcc_json_parser_struct_as_root@@Base+0x500>
   2a700:	teq	r2, #0
   2a704:	moveq	r0, r1
   2a708:	bx	lr
   2a70c:	teq	r0, r1
   2a710:	movne	r0, #0
   2a714:	bxne	lr
   2a718:	tst	r2, #-16777216	; 0xff000000
   2a71c:	bne	2a72c <flatcc_json_parser_struct_as_root@@Base+0x520>
   2a720:	lsls	r0, r0, #1
   2a724:	orrcs	r0, r0, #-2147483648	; 0x80000000
   2a728:	bx	lr
   2a72c:	adds	r2, r2, #33554432	; 0x2000000
   2a730:	addcc	r0, r0, #8388608	; 0x800000
   2a734:	bxcc	lr
   2a738:	and	r3, r0, #-2147483648	; 0x80000000
   2a73c:	orr	r0, r3, #2130706432	; 0x7f000000
   2a740:	orr	r0, r0, #8388608	; 0x800000
   2a744:	bx	lr
   2a748:	mvns	r2, r2, asr #24
   2a74c:	movne	r0, r1
   2a750:	mvnseq	r3, r3, asr #24
   2a754:	movne	r1, r0
   2a758:	lsls	r2, r0, #9
   2a75c:	lslseq	r3, r1, #9
   2a760:	teqeq	r0, r1
   2a764:	orrne	r0, r0, #4194304	; 0x400000
   2a768:	bx	lr
   2a76c:	mov	r3, #0
   2a770:	b	2a77c <flatcc_json_parser_struct_as_root@@Base+0x570>
   2a774:	ands	r3, r0, #-2147483648	; 0x80000000
   2a778:	rsbmi	r0, r0, #0
   2a77c:	movs	ip, r0
   2a780:	bxeq	lr
   2a784:	orr	r3, r3, #1258291200	; 0x4b000000
   2a788:	mov	r1, r0
   2a78c:	mov	r0, #0
   2a790:	b	2a7d4 <flatcc_json_parser_struct_as_root@@Base+0x5c8>
   2a794:	orrs	r2, r0, r1
   2a798:	bxeq	lr
   2a79c:	mov	r3, #0
   2a7a0:	b	2a7bc <flatcc_json_parser_struct_as_root@@Base+0x5b0>
   2a7a4:	orrs	r2, r0, r1
   2a7a8:	bxeq	lr
   2a7ac:	ands	r3, r1, #-2147483648	; 0x80000000
   2a7b0:	bpl	2a7bc <flatcc_json_parser_struct_as_root@@Base+0x5b0>
   2a7b4:	rsbs	r0, r0, #0
   2a7b8:	rsc	r1, r1, #0
   2a7bc:	movs	ip, r1
   2a7c0:	moveq	ip, r0
   2a7c4:	moveq	r1, r0
   2a7c8:	moveq	r0, #0
   2a7cc:	orr	r3, r3, #1526726656	; 0x5b000000
   2a7d0:	subeq	r3, r3, #268435456	; 0x10000000
   2a7d4:	sub	r3, r3, #8388608	; 0x800000
   2a7d8:	clz	r2, ip
   2a7dc:	subs	r2, r2, #8
   2a7e0:	sub	r3, r3, r2, lsl #23
   2a7e4:	blt	2a804 <flatcc_json_parser_struct_as_root@@Base+0x5f8>
   2a7e8:	add	r3, r3, r1, lsl r2
   2a7ec:	lsl	ip, r0, r2
   2a7f0:	rsb	r2, r2, #32
   2a7f4:	cmp	ip, #-2147483648	; 0x80000000
   2a7f8:	adc	r0, r3, r0, lsr r2
   2a7fc:	biceq	r0, r0, #1
   2a800:	bx	lr
   2a804:	add	r2, r2, #32
   2a808:	lsl	ip, r1, r2
   2a80c:	rsb	r2, r2, #32
   2a810:	orrs	r0, r0, ip, lsl #1
   2a814:	adc	r0, r3, r1, lsr r2
   2a818:	biceq	r0, r0, ip, lsr #31
   2a81c:	bx	lr

0002a820 <__libc_csu_init@@Base>:
   2a820:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2a824:	mov	r7, r0
   2a828:	ldr	r6, [pc, #72]	; 2a878 <__libc_csu_init@@Base+0x58>
   2a82c:	ldr	r5, [pc, #72]	; 2a87c <__libc_csu_init@@Base+0x5c>
   2a830:	add	r6, pc, r6
   2a834:	add	r5, pc, r5
   2a838:	sub	r6, r6, r5
   2a83c:	mov	r8, r1
   2a840:	mov	r9, r2
   2a844:	bl	12548 <fopen@plt-0x20>
   2a848:	asrs	r6, r6, #2
   2a84c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a850:	mov	r4, #0
   2a854:	add	r4, r4, #1
   2a858:	ldr	r3, [r5], #4
   2a85c:	mov	r2, r9
   2a860:	mov	r1, r8
   2a864:	mov	r0, r7
   2a868:	blx	r3
   2a86c:	cmp	r6, r4
   2a870:	bne	2a854 <__libc_csu_init@@Base+0x34>
   2a874:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2a878:	ldrdeq	r2, [r1], -ip
   2a87c:	ldrdeq	r2, [r1], -r4

0002a880 <__libc_csu_fini@@Base>:
   2a880:	bx	lr

Disassembly of section .fini:

0002a884 <.fini>:
   2a884:	push	{r3, lr}
   2a888:	pop	{r3, pc}
