
../repos/coreutils/src/fmt:     file format elf32-littlearm


Disassembly of section .init:

00010e30 <.init>:
   10e30:	push	{r3, lr}
   10e34:	bl	11108 <__assert_fail@plt+0x48>
   10e38:	pop	{r3, pc}

Disassembly of section .plt:

00010e3c <calloc@plt-0x14>:
   10e3c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e40:	ldr	lr, [pc, #4]	; 10e4c <calloc@plt-0x4>
   10e44:	add	lr, pc, lr
   10e48:	ldr	pc, [lr, #8]!
   10e4c:			; <UNDEFINED> instruction: 0x000171b4

00010e50 <calloc@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #94208	; 0x17000
   10e58:	ldr	pc, [ip, #436]!	; 0x1b4

00010e5c <fputs_unlocked@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #94208	; 0x17000
   10e64:	ldr	pc, [ip, #428]!	; 0x1ac

00010e68 <raise@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #94208	; 0x17000
   10e70:	ldr	pc, [ip, #420]!	; 0x1a4

00010e74 <strcmp@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #94208	; 0x17000
   10e7c:	ldr	pc, [ip, #412]!	; 0x19c

00010e80 <posix_fadvise64@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #94208	; 0x17000
   10e88:	ldr	pc, [ip, #404]!	; 0x194

00010e8c <fflush@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #94208	; 0x17000
   10e94:	ldr	pc, [ip, #396]!	; 0x18c

00010e98 <memmove@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #94208	; 0x17000
   10ea0:	ldr	pc, [ip, #388]!	; 0x184

00010ea4 <free@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #94208	; 0x17000
   10eac:	ldr	pc, [ip, #380]!	; 0x17c

00010eb0 <_exit@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #94208	; 0x17000
   10eb8:	ldr	pc, [ip, #372]!	; 0x174

00010ebc <memcpy@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #94208	; 0x17000
   10ec4:	ldr	pc, [ip, #364]!	; 0x16c

00010ec8 <__strtoull_internal@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #94208	; 0x17000
   10ed0:	ldr	pc, [ip, #356]!	; 0x164

00010ed4 <mbsinit@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #94208	; 0x17000
   10edc:	ldr	pc, [ip, #348]!	; 0x15c

00010ee0 <fwrite_unlocked@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #94208	; 0x17000
   10ee8:	ldr	pc, [ip, #340]!	; 0x154

00010eec <dcgettext@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #94208	; 0x17000
   10ef4:	ldr	pc, [ip, #332]!	; 0x14c

00010ef8 <realloc@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #94208	; 0x17000
   10f00:	ldr	pc, [ip, #324]!	; 0x144

00010f04 <textdomain@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #94208	; 0x17000
   10f0c:	ldr	pc, [ip, #316]!	; 0x13c

00010f10 <iswprint@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #94208	; 0x17000
   10f18:	ldr	pc, [ip, #308]!	; 0x134

00010f1c <fwrite@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #94208	; 0x17000
   10f24:	ldr	pc, [ip, #300]!	; 0x12c

00010f28 <lseek64@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #94208	; 0x17000
   10f30:	ldr	pc, [ip, #292]!	; 0x124

00010f34 <__ctype_get_mb_cur_max@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #94208	; 0x17000
   10f3c:	ldr	pc, [ip, #284]!	; 0x11c

00010f40 <__fpending@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #94208	; 0x17000
   10f48:	ldr	pc, [ip, #276]!	; 0x114

00010f4c <mbrtowc@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #94208	; 0x17000
   10f54:	ldr	pc, [ip, #268]!	; 0x10c

00010f58 <error@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #94208	; 0x17000
   10f60:	ldr	pc, [ip, #260]!	; 0x104

00010f64 <malloc@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #94208	; 0x17000
   10f6c:	ldr	pc, [ip, #252]!	; 0xfc

00010f70 <__libc_start_main@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #94208	; 0x17000
   10f78:	ldr	pc, [ip, #244]!	; 0xf4

00010f7c <__freading@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #94208	; 0x17000
   10f84:	ldr	pc, [ip, #236]!	; 0xec

00010f88 <__gmon_start__@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #94208	; 0x17000
   10f90:	ldr	pc, [ip, #228]!	; 0xe4

00010f94 <getopt_long@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #94208	; 0x17000
   10f9c:	ldr	pc, [ip, #220]!	; 0xdc

00010fa0 <__ctype_b_loc@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #94208	; 0x17000
   10fa8:	ldr	pc, [ip, #212]!	; 0xd4

00010fac <exit@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #94208	; 0x17000
   10fb4:	ldr	pc, [ip, #204]!	; 0xcc

00010fb8 <bcmp@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #94208	; 0x17000
   10fc0:	ldr	pc, [ip, #196]!	; 0xc4

00010fc4 <strlen@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #94208	; 0x17000
   10fcc:	ldr	pc, [ip, #188]!	; 0xbc

00010fd0 <strchr@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #94208	; 0x17000
   10fd8:	ldr	pc, [ip, #180]!	; 0xb4

00010fdc <__errno_location@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #94208	; 0x17000
   10fe4:	ldr	pc, [ip, #172]!	; 0xac

00010fe8 <__cxa_atexit@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #94208	; 0x17000
   10ff0:	ldr	pc, [ip, #164]!	; 0xa4

00010ff4 <memset@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #94208	; 0x17000
   10ffc:	ldr	pc, [ip, #156]!	; 0x9c

00011000 <__printf_chk@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #94208	; 0x17000
   11008:	ldr	pc, [ip, #148]!	; 0x94

0001100c <fileno@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #94208	; 0x17000
   11014:	ldr	pc, [ip, #140]!	; 0x8c

00011018 <__fprintf_chk@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #94208	; 0x17000
   11020:	ldr	pc, [ip, #132]!	; 0x84

00011024 <memchr@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #94208	; 0x17000
   1102c:	ldr	pc, [ip, #124]!	; 0x7c

00011030 <fclose@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #94208	; 0x17000
   11038:	ldr	pc, [ip, #116]!	; 0x74

0001103c <fseeko64@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #94208	; 0x17000
   11044:	ldr	pc, [ip, #108]!	; 0x6c

00011048 <__uflow@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #94208	; 0x17000
   11050:	ldr	pc, [ip, #100]!	; 0x64

00011054 <__overflow@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #94208	; 0x17000
   1105c:	ldr	pc, [ip, #92]!	; 0x5c

00011060 <setlocale@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #94208	; 0x17000
   11068:	ldr	pc, [ip, #84]!	; 0x54

0001106c <strrchr@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #94208	; 0x17000
   11074:	ldr	pc, [ip, #76]!	; 0x4c

00011078 <nl_langinfo@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #94208	; 0x17000
   11080:	ldr	pc, [ip, #68]!	; 0x44

00011084 <clearerr_unlocked@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #94208	; 0x17000
   1108c:	ldr	pc, [ip, #60]!	; 0x3c

00011090 <fopen64@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #94208	; 0x17000
   11098:	ldr	pc, [ip, #52]!	; 0x34

0001109c <bindtextdomain@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #94208	; 0x17000
   110a4:	ldr	pc, [ip, #44]!	; 0x2c

000110a8 <strncmp@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #94208	; 0x17000
   110b0:	ldr	pc, [ip, #36]!	; 0x24

000110b4 <abort@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #94208	; 0x17000
   110bc:	ldr	pc, [ip, #28]!

000110c0 <__assert_fail@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #94208	; 0x17000
   110c8:	ldr	pc, [ip, #20]!

Disassembly of section .text:

000110cc <.text>:
   110cc:	mov	fp, #0
   110d0:	mov	lr, #0
   110d4:	pop	{r1}		; (ldr r1, [sp], #4)
   110d8:	mov	r2, sp
   110dc:	push	{r2}		; (str r2, [sp, #-4]!)
   110e0:	push	{r0}		; (str r0, [sp, #-4]!)
   110e4:	ldr	ip, [pc, #16]	; 110fc <__assert_fail@plt+0x3c>
   110e8:	push	{ip}		; (str ip, [sp, #-4]!)
   110ec:	ldr	r0, [pc, #12]	; 11100 <__assert_fail@plt+0x40>
   110f0:	ldr	r3, [pc, #12]	; 11104 <__assert_fail@plt+0x44>
   110f4:	bl	10f70 <__libc_start_main@plt>
   110f8:	bl	110b4 <abort@plt>
   110fc:	muleq	r1, ip, r1
   11100:	andeq	r1, r1, r0, ror r4
   11104:	andeq	r7, r1, ip, lsr r1
   11108:	ldr	r3, [pc, #20]	; 11124 <__assert_fail@plt+0x64>
   1110c:	ldr	r2, [pc, #20]	; 11128 <__assert_fail@plt+0x68>
   11110:	add	r3, pc, r3
   11114:	ldr	r2, [r3, r2]
   11118:	cmp	r2, #0
   1111c:	bxeq	lr
   11120:	b	10f88 <__gmon_start__@plt>
   11124:	andeq	r6, r1, r8, ror #29
   11128:	andeq	r0, r0, r0, ror #1
   1112c:	ldr	r0, [pc, #24]	; 1114c <__assert_fail@plt+0x8c>
   11130:	ldr	r3, [pc, #24]	; 11150 <__assert_fail@plt+0x90>
   11134:	cmp	r3, r0
   11138:	bxeq	lr
   1113c:	ldr	r3, [pc, #16]	; 11154 <__assert_fail@plt+0x94>
   11140:	cmp	r3, #0
   11144:	bxeq	lr
   11148:	bx	r3
   1114c:	andeq	r8, r2, r8, lsr r1
   11150:	andeq	r8, r2, r8, lsr r1
   11154:	andeq	r0, r0, r0
   11158:	ldr	r0, [pc, #36]	; 11184 <__assert_fail@plt+0xc4>
   1115c:	ldr	r1, [pc, #36]	; 11188 <__assert_fail@plt+0xc8>
   11160:	sub	r1, r1, r0
   11164:	asr	r1, r1, #2
   11168:	add	r1, r1, r1, lsr #31
   1116c:	asrs	r1, r1, #1
   11170:	bxeq	lr
   11174:	ldr	r3, [pc, #16]	; 1118c <__assert_fail@plt+0xcc>
   11178:	cmp	r3, #0
   1117c:	bxeq	lr
   11180:	bx	r3
   11184:	andeq	r8, r2, r8, lsr r1
   11188:	andeq	r8, r2, r8, lsr r1
   1118c:	andeq	r0, r0, r0
   11190:	push	{r4, lr}
   11194:	ldr	r4, [pc, #24]	; 111b4 <__assert_fail@plt+0xf4>
   11198:	ldrb	r3, [r4]
   1119c:	cmp	r3, #0
   111a0:	popne	{r4, pc}
   111a4:	bl	1112c <__assert_fail@plt+0x6c>
   111a8:	mov	r3, #1
   111ac:	strb	r3, [r4]
   111b0:	pop	{r4, pc}
   111b4:	andeq	r8, r2, ip, asr r1
   111b8:	b	11158 <__assert_fail@plt+0x98>
   111bc:	push	{fp, lr}
   111c0:	mov	fp, sp
   111c4:	sub	sp, sp, #56	; 0x38
   111c8:	mov	r4, r0
   111cc:	cmp	r0, #0
   111d0:	bne	1142c <__assert_fail@plt+0x36c>
   111d4:	movw	r1, #29163	; 0x71eb
   111d8:	mov	r0, #0
   111dc:	mov	r2, #5
   111e0:	movt	r1, #1
   111e4:	bl	10eec <dcgettext@plt>
   111e8:	mov	r1, r0
   111ec:	movw	r0, #668	; 0x29c
   111f0:	movt	r0, #3
   111f4:	ldr	r2, [r0]
   111f8:	mov	r0, #1
   111fc:	bl	11000 <__printf_chk@plt>
   11200:	movw	r1, #29205	; 0x7215
   11204:	mov	r0, #0
   11208:	mov	r2, #5
   1120c:	movt	r1, #1
   11210:	bl	10eec <dcgettext@plt>
   11214:	movw	r7, #33108	; 0x8154
   11218:	movt	r7, #2
   1121c:	ldr	r1, [r7]
   11220:	bl	10e5c <fputs_unlocked@plt>
   11224:	movw	r1, #30232	; 0x7618
   11228:	mov	r0, #0
   1122c:	mov	r2, #5
   11230:	movt	r1, #1
   11234:	bl	10eec <dcgettext@plt>
   11238:	ldr	r1, [r7]
   1123c:	bl	10e5c <fputs_unlocked@plt>
   11240:	movw	r1, #30288	; 0x7650
   11244:	mov	r0, #0
   11248:	mov	r2, #5
   1124c:	movt	r1, #1
   11250:	bl	10eec <dcgettext@plt>
   11254:	ldr	r1, [r7]
   11258:	bl	10e5c <fputs_unlocked@plt>
   1125c:	movw	r1, #29334	; 0x7296
   11260:	mov	r0, #0
   11264:	mov	r2, #5
   11268:	movt	r1, #1
   1126c:	bl	10eec <dcgettext@plt>
   11270:	ldr	r1, [r7]
   11274:	bl	10e5c <fputs_unlocked@plt>
   11278:	movw	r1, #29612	; 0x73ac
   1127c:	mov	r0, #0
   11280:	mov	r2, #5
   11284:	movt	r1, #1
   11288:	bl	10eec <dcgettext@plt>
   1128c:	ldr	r1, [r7]
   11290:	bl	10e5c <fputs_unlocked@plt>
   11294:	movw	r1, #29898	; 0x74ca
   11298:	mov	r0, #0
   1129c:	mov	r2, #5
   112a0:	movt	r1, #1
   112a4:	bl	10eec <dcgettext@plt>
   112a8:	ldr	r1, [r7]
   112ac:	bl	10e5c <fputs_unlocked@plt>
   112b0:	movw	r1, #29943	; 0x74f7
   112b4:	mov	r0, #0
   112b8:	mov	r2, #5
   112bc:	movt	r1, #1
   112c0:	bl	10eec <dcgettext@plt>
   112c4:	ldr	r1, [r7]
   112c8:	bl	10e5c <fputs_unlocked@plt>
   112cc:	movw	r0, #31000	; 0x7918
   112d0:	mov	r2, #48	; 0x30
   112d4:	mov	r6, sp
   112d8:	movw	r5, #29997	; 0x752d
   112dc:	movt	r0, #1
   112e0:	movt	r5, #1
   112e4:	add	r1, r0, #32
   112e8:	add	r3, r0, #16
   112ec:	vld1.64	{d18-d19}, [r0], r2
   112f0:	vld1.64	{d16-d17}, [r1]
   112f4:	vld1.64	{d20-d21}, [r3]
   112f8:	vldr	d22, [r0]
   112fc:	add	r1, r6, #32
   11300:	add	r0, r6, #16
   11304:	vst1.64	{d16-d17}, [r1]
   11308:	movw	r1, #30363	; 0x769b
   1130c:	vst1.64	{d20-d21}, [r0]
   11310:	mov	r0, r6
   11314:	movt	r1, #1
   11318:	vst1.64	{d18-d19}, [r0], r2
   1131c:	vstr	d22, [r0]
   11320:	mov	r0, r5
   11324:	bl	10e74 <strcmp@plt>
   11328:	cmp	r0, #0
   1132c:	ldrne	r1, [r6, #8]!
   11330:	cmpne	r1, #0
   11334:	bne	11320 <__assert_fail@plt+0x260>
   11338:	movw	r1, #30458	; 0x76fa
   1133c:	ldr	r6, [r6, #4]
   11340:	mov	r0, #0
   11344:	mov	r2, #5
   11348:	movt	r1, #1
   1134c:	bl	10eec <dcgettext@plt>
   11350:	movw	r2, #30140	; 0x75bc
   11354:	movw	r3, #30481	; 0x7711
   11358:	mov	r1, r0
   1135c:	mov	r0, #1
   11360:	movt	r2, #1
   11364:	movt	r3, #1
   11368:	bl	11000 <__printf_chk@plt>
   1136c:	cmp	r6, #0
   11370:	mov	r0, #5
   11374:	mov	r1, #0
   11378:	moveq	r6, r5
   1137c:	bl	11060 <setlocale@plt>
   11380:	cmp	r0, #0
   11384:	beq	113bc <__assert_fail@plt+0x2fc>
   11388:	movw	r1, #30521	; 0x7739
   1138c:	mov	r2, #3
   11390:	movt	r1, #1
   11394:	bl	110a8 <strncmp@plt>
   11398:	cmp	r0, #0
   1139c:	beq	113bc <__assert_fail@plt+0x2fc>
   113a0:	movw	r1, #30525	; 0x773d
   113a4:	mov	r0, #0
   113a8:	mov	r2, #5
   113ac:	movt	r1, #1
   113b0:	bl	10eec <dcgettext@plt>
   113b4:	ldr	r1, [r7]
   113b8:	bl	10e5c <fputs_unlocked@plt>
   113bc:	movw	r1, #30596	; 0x7784
   113c0:	mov	r0, #0
   113c4:	mov	r2, #5
   113c8:	movt	r1, #1
   113cc:	bl	10eec <dcgettext@plt>
   113d0:	movw	r2, #30481	; 0x7711
   113d4:	mov	r1, r0
   113d8:	mov	r0, #1
   113dc:	mov	r3, r5
   113e0:	movt	r2, #1
   113e4:	bl	11000 <__printf_chk@plt>
   113e8:	movw	r1, #30623	; 0x779f
   113ec:	mov	r0, #0
   113f0:	mov	r2, #5
   113f4:	movt	r1, #1
   113f8:	bl	10eec <dcgettext@plt>
   113fc:	mov	r1, r0
   11400:	movw	r0, #30391	; 0x76b7
   11404:	movw	r3, #30673	; 0x77d1
   11408:	cmp	r6, r5
   1140c:	mov	r2, r6
   11410:	movt	r0, #1
   11414:	movt	r3, #1
   11418:	moveq	r3, r0
   1141c:	mov	r0, #1
   11420:	bl	11000 <__printf_chk@plt>
   11424:	mov	r0, r4
   11428:	bl	10fac <exit@plt>
   1142c:	movw	r0, #33096	; 0x8148
   11430:	movw	r1, #29124	; 0x71c4
   11434:	mov	r2, #5
   11438:	movt	r0, #2
   1143c:	movt	r1, #1
   11440:	ldr	r5, [r0]
   11444:	mov	r0, #0
   11448:	bl	10eec <dcgettext@plt>
   1144c:	mov	r2, r0
   11450:	movw	r0, #668	; 0x29c
   11454:	mov	r1, #1
   11458:	movt	r0, #3
   1145c:	ldr	r3, [r0]
   11460:	mov	r0, r5
   11464:	bl	11018 <__fprintf_chk@plt>
   11468:	mov	r0, r4
   1146c:	bl	10fac <exit@plt>
   11470:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11474:	add	fp, sp, #28
   11478:	sub	sp, sp, #36	; 0x24
   1147c:	mov	r4, r0
   11480:	ldr	r0, [r1]
   11484:	mov	r6, r1
   11488:	bl	134ec <__assert_fail@plt+0x242c>
   1148c:	movw	r8, #30673	; 0x77d1
   11490:	mov	r0, #6
   11494:	movt	r8, #1
   11498:	mov	r1, r8
   1149c:	bl	11060 <setlocale@plt>
   114a0:	movw	r5, #30144	; 0x75c0
   114a4:	movw	r1, #30001	; 0x7531
   114a8:	movt	r5, #1
   114ac:	movt	r1, #1
   114b0:	mov	r0, r5
   114b4:	bl	1109c <bindtextdomain@plt>
   114b8:	mov	r0, r5
   114bc:	mov	r5, r4
   114c0:	bl	10f04 <textdomain@plt>
   114c4:	movw	r0, #12836	; 0x3224
   114c8:	movt	r0, #1
   114cc:	bl	171a0 <__assert_fail@plt+0x60e0>
   114d0:	movw	r0, #33120	; 0x8160
   114d4:	mov	sl, #0
   114d8:	movw	r1, #33124	; 0x8164
   114dc:	cmp	r4, #2
   114e0:	movt	r0, #2
   114e4:	movt	r1, #2
   114e8:	strb	sl, [r0]
   114ec:	movw	r0, #33121	; 0x8161
   114f0:	movt	r0, #2
   114f4:	strb	sl, [r0]
   114f8:	movw	r0, #33122	; 0x8162
   114fc:	movt	r0, #2
   11500:	strb	sl, [r0]
   11504:	movw	r0, #33123	; 0x8163
   11508:	movt	r0, #2
   1150c:	strb	sl, [r0]
   11510:	mov	r0, #75	; 0x4b
   11514:	str	r0, [r1]
   11518:	movw	r0, #33128	; 0x8168
   1151c:	movt	r0, #2
   11520:	str	r8, [r0]
   11524:	movw	r0, #33132	; 0x816c
   11528:	movt	r0, #2
   1152c:	str	sl, [r0]
   11530:	movw	r0, #33136	; 0x8170
   11534:	movt	r0, #2
   11538:	str	sl, [r0]
   1153c:	movw	r0, #33140	; 0x8174
   11540:	movt	r0, #2
   11544:	str	sl, [r0]
   11548:	blt	11584 <__assert_fail@plt+0x4c4>
   1154c:	mov	r4, r6
   11550:	ldr	r1, [r4, #4]!
   11554:	ldrb	r0, [r1]
   11558:	cmp	r0, #45	; 0x2d
   1155c:	bne	11584 <__assert_fail@plt+0x4c4>
   11560:	ldrb	r0, [r1, #1]!
   11564:	str	r1, [sp, #32]
   11568:	sub	r0, r0, #48	; 0x30
   1156c:	cmp	r0, #9
   11570:	bhi	11584 <__assert_fail@plt+0x4c4>
   11574:	ldr	r0, [r6]
   11578:	sub	r5, r5, #1
   1157c:	str	r0, [r6, #4]
   11580:	b	11590 <__assert_fail@plt+0x4d0>
   11584:	mov	r0, #0
   11588:	mov	r4, r6
   1158c:	str	r0, [sp, #32]
   11590:	movw	r9, #30025	; 0x7549
   11594:	movw	r7, #30840	; 0x7878
   11598:	mov	r0, #0
   1159c:	movt	r9, #1
   115a0:	movt	r7, #1
   115a4:	str	r0, [sp, #28]
   115a8:	b	115bc <__assert_fail@plt+0x4fc>
   115ac:	movw	r0, #33121	; 0x8161
   115b0:	movt	r0, #2
   115b4:	mov	r1, #1
   115b8:	strb	r1, [r0]
   115bc:	mov	r0, r5
   115c0:	mov	r1, r4
   115c4:	mov	r2, r9
   115c8:	mov	r3, r7
   115cc:	str	sl, [sp]
   115d0:	bl	10f94 <getopt_long@plt>
   115d4:	mov	r6, r0
   115d8:	cmp	r0, #98	; 0x62
   115dc:	ble	11738 <__assert_fail@plt+0x678>
   115e0:	sub	r0, r6, #99	; 0x63
   115e4:	cmp	r0, #20
   115e8:	bhi	11a18 <__assert_fail@plt+0x958>
   115ec:	add	r1, pc, #0
   115f0:	ldr	pc, [r1, r0, lsl #2]
   115f4:	andeq	r1, r1, r8, asr #12
   115f8:	andeq	r1, r1, r8, lsl sl
   115fc:	andeq	r1, r1, r8, lsl sl
   11600:	andeq	r1, r1, r8, lsl sl
   11604:	andeq	r1, r1, r8, lsr #14
   11608:	andeq	r1, r1, r8, lsl sl
   1160c:	andeq	r1, r1, r8, lsl sl
   11610:	andeq	r1, r1, r8, lsl sl
   11614:	andeq	r1, r1, r8, lsl sl
   11618:	andeq	r1, r1, r8, lsl sl
   1161c:	andeq	r1, r1, r8, lsl sl
   11620:	andeq	r1, r1, r8, lsl sl
   11624:	andeq	r1, r1, r8, lsl sl
   11628:	andeq	r1, r1, r4, asr r6
   1162c:	andeq	r1, r1, r8, lsl sl
   11630:	andeq	r1, r1, r8, lsl sl
   11634:	andeq	r1, r1, ip, lsr #11
   11638:	andeq	r1, r1, ip, lsl r7
   1163c:	strdeq	r1, [r1], -ip
   11640:	andeq	r1, r1, r8, lsl sl
   11644:	andeq	r1, r1, r8, lsl #14
   11648:	movw	r0, #33123	; 0x8163
   1164c:	movt	r0, #2
   11650:	b	115b4 <__assert_fail@plt+0x4f4>
   11654:	movw	r0, #33136	; 0x8170
   11658:	mov	r6, r8
   1165c:	movt	r0, #2
   11660:	str	sl, [r0]
   11664:	movw	r0, #33112	; 0x8158
   11668:	movt	r0, #2
   1166c:	ldr	r8, [r0]
   11670:	ldrb	r0, [r8]
   11674:	cmp	r0, #32
   11678:	bne	116a4 <__assert_fail@plt+0x5e4>
   1167c:	mov	r0, #0
   11680:	add	r1, r8, r0
   11684:	add	r0, r0, #1
   11688:	ldrb	r1, [r1, #1]
   1168c:	cmp	r1, #32
   11690:	beq	11680 <__assert_fail@plt+0x5c0>
   11694:	movw	r1, #33136	; 0x8170
   11698:	add	r8, r8, r0
   1169c:	movt	r1, #2
   116a0:	str	r0, [r1]
   116a4:	movw	r0, #33128	; 0x8168
   116a8:	movt	r0, #2
   116ac:	str	r8, [r0]
   116b0:	mov	r0, r8
   116b4:	bl	10fc4 <strlen@plt>
   116b8:	movw	r1, #33132	; 0x816c
   116bc:	movt	r1, #2
   116c0:	str	r0, [r1]
   116c4:	add	r1, r8, r0
   116c8:	mov	r0, r1
   116cc:	cmp	r1, r8
   116d0:	bls	116e4 <__assert_fail@plt+0x624>
   116d4:	mov	r1, r0
   116d8:	ldrb	r2, [r1, #-1]!
   116dc:	cmp	r2, #32
   116e0:	beq	116c8 <__assert_fail@plt+0x608>
   116e4:	movw	r1, #33140	; 0x8174
   116e8:	strb	sl, [r0], -r8
   116ec:	mov	r8, r6
   116f0:	movt	r1, #2
   116f4:	str	r0, [r1]
   116f8:	b	115bc <__assert_fail@plt+0x4fc>
   116fc:	movw	r0, #33120	; 0x8160
   11700:	movt	r0, #2
   11704:	b	115b4 <__assert_fail@plt+0x4f4>
   11708:	movw	r0, #33112	; 0x8158
   1170c:	movt	r0, #2
   11710:	ldr	r0, [r0]
   11714:	str	r0, [sp, #32]
   11718:	b	115bc <__assert_fail@plt+0x4fc>
   1171c:	movw	r0, #33122	; 0x8162
   11720:	movt	r0, #2
   11724:	b	115b4 <__assert_fail@plt+0x4f4>
   11728:	movw	r0, #33112	; 0x8158
   1172c:	movt	r0, #2
   11730:	ldr	r0, [r0]
   11734:	b	115a4 <__assert_fail@plt+0x4e4>
   11738:	cmn	r6, #1
   1173c:	bne	119b8 <__assert_fail@plt+0x8f8>
   11740:	ldr	sl, [sp, #32]
   11744:	movw	r7, #33124	; 0x8164
   11748:	movt	r7, #2
   1174c:	cmp	sl, #0
   11750:	beq	11798 <__assert_fail@plt+0x6d8>
   11754:	movw	r1, #30168	; 0x75d8
   11758:	mov	r0, #0
   1175c:	mov	r2, #5
   11760:	mov	r6, #0
   11764:	movt	r1, #1
   11768:	bl	10eec <dcgettext@plt>
   1176c:	movw	r1, #2500	; 0x9c4
   11770:	mov	r2, #0
   11774:	mov	r3, #0
   11778:	stm	sp, {r1, r6, r8}
   1177c:	str	r0, [sp, #12]
   11780:	mov	r0, sl
   11784:	str	r6, [sp, #16]
   11788:	bl	15fb8 <__assert_fail@plt+0x4ef8>
   1178c:	mov	r6, r0
   11790:	str	r0, [r7]
   11794:	b	1179c <__assert_fail@plt+0x6dc>
   11798:	ldr	r6, [r7]
   1179c:	ldr	r9, [sp, #28]
   117a0:	mov	r7, r5
   117a4:	cmp	r9, #0
   117a8:	beq	1180c <__assert_fail@plt+0x74c>
   117ac:	movw	r1, #30168	; 0x75d8
   117b0:	mov	r0, #0
   117b4:	mov	r2, #5
   117b8:	mov	r5, #0
   117bc:	movt	r1, #1
   117c0:	bl	10eec <dcgettext@plt>
   117c4:	asr	r1, r6, #31
   117c8:	str	r6, [sp]
   117cc:	mov	r2, #0
   117d0:	mov	r3, #0
   117d4:	stmib	sp, {r1, r8}
   117d8:	str	r0, [sp, #12]
   117dc:	mov	r0, r9
   117e0:	str	r5, [sp, #16]
   117e4:	bl	15fb8 <__assert_fail@plt+0x4ef8>
   117e8:	movw	r1, #33144	; 0x8178
   117ec:	cmp	sl, #0
   117f0:	movt	r1, #2
   117f4:	str	r0, [r1]
   117f8:	bne	11834 <__assert_fail@plt+0x774>
   117fc:	movw	r1, #33124	; 0x8164
   11800:	add	r0, r0, #10
   11804:	movt	r1, #2
   11808:	b	11830 <__assert_fail@plt+0x770>
   1180c:	mov	r0, #187	; 0xbb
   11810:	movw	r1, #34079	; 0x851f
   11814:	mul	r0, r6, r0
   11818:	movt	r1, #20971	; 0x51eb
   1181c:	smmul	r0, r0, r1
   11820:	asr	r1, r0, #6
   11824:	add	r0, r1, r0, lsr #31
   11828:	movw	r1, #33144	; 0x8178
   1182c:	movt	r1, #2
   11830:	str	r0, [r1]
   11834:	movw	r5, #33088	; 0x8140
   11838:	movt	r5, #2
   1183c:	ldr	r0, [r5]
   11840:	cmp	r0, r7
   11844:	bne	118b0 <__assert_fail@plt+0x7f0>
   11848:	movw	r0, #33104	; 0x8150
   1184c:	movw	r1, #31156	; 0x79b4
   11850:	movt	r0, #2
   11854:	movt	r1, #1
   11858:	ldr	r0, [r0]
   1185c:	bl	11a54 <__assert_fail@plt+0x994>
   11860:	mov	r6, r0
   11864:	movw	r0, #33104	; 0x8150
   11868:	movt	r0, #2
   1186c:	ldr	r0, [r0]
   11870:	bl	1334c <__assert_fail@plt+0x228c>
   11874:	cmp	r0, #0
   11878:	beq	119ac <__assert_fail@plt+0x8ec>
   1187c:	bl	10fdc <__errno_location@plt>
   11880:	movw	r1, #30209	; 0x7601
   11884:	ldr	r4, [r0]
   11888:	mov	r0, #0
   1188c:	mov	r2, #5
   11890:	movt	r1, #1
   11894:	bl	10eec <dcgettext@plt>
   11898:	movw	r2, #31087	; 0x796f
   1189c:	mov	r3, r0
   118a0:	mov	r0, #1
   118a4:	mov	r1, r4
   118a8:	movt	r2, #1
   118ac:	bl	10f58 <error@plt>
   118b0:	mov	r6, #1
   118b4:	bge	119ac <__assert_fail@plt+0x8ec>
   118b8:	movw	sl, #30765	; 0x782d
   118bc:	str	r4, [sp, #32]
   118c0:	movw	r4, #31156	; 0x79b4
   118c4:	mov	r1, #0
   118c8:	mov	r6, #1
   118cc:	str	r7, [sp, #28]
   118d0:	movt	r4, #1
   118d4:	movt	sl, #1
   118d8:	str	r1, [sp, #24]
   118dc:	b	11918 <__assert_fail@plt+0x858>
   118e0:	movw	r0, #33104	; 0x8150
   118e4:	mov	r1, r7
   118e8:	movt	r0, #2
   118ec:	ldr	r0, [r0]
   118f0:	bl	11a54 <__assert_fail@plt+0x994>
   118f4:	and	r6, r6, r0
   118f8:	mov	r0, #1
   118fc:	str	r0, [sp, #24]
   11900:	ldr	r0, [r5]
   11904:	ldr	r1, [sp, #28]
   11908:	add	r0, r0, #1
   1190c:	cmp	r0, r1
   11910:	str	r0, [r5]
   11914:	bge	119a0 <__assert_fail@plt+0x8e0>
   11918:	ldr	r1, [sp, #32]
   1191c:	ldr	r7, [r1, r0, lsl #2]
   11920:	mov	r1, r4
   11924:	mov	r0, r7
   11928:	bl	10e74 <strcmp@plt>
   1192c:	cmp	r0, #0
   11930:	beq	118e0 <__assert_fail@plt+0x820>
   11934:	mov	r0, r7
   11938:	mov	r1, sl
   1193c:	bl	11090 <fopen64@plt>
   11940:	cmp	r0, #0
   11944:	beq	11958 <__assert_fail@plt+0x898>
   11948:	mov	r1, r7
   1194c:	bl	11a54 <__assert_fail@plt+0x994>
   11950:	and	r6, r6, r0
   11954:	b	11900 <__assert_fail@plt+0x840>
   11958:	bl	10fdc <__errno_location@plt>
   1195c:	movw	r1, #30182	; 0x75e6
   11960:	ldr	r9, [r0]
   11964:	mov	r0, #0
   11968:	mov	r2, #5
   1196c:	mov	r6, #0
   11970:	movt	r1, #1
   11974:	bl	10eec <dcgettext@plt>
   11978:	mov	r8, r0
   1197c:	mov	r0, #4
   11980:	mov	r1, r7
   11984:	bl	14c18 <__assert_fail@plt+0x3b58>
   11988:	mov	r3, r0
   1198c:	mov	r0, #0
   11990:	mov	r1, r9
   11994:	mov	r2, r8
   11998:	bl	10f58 <error@plt>
   1199c:	b	11900 <__assert_fail@plt+0x840>
   119a0:	ldr	r0, [sp, #24]
   119a4:	tst	r0, #1
   119a8:	bne	11864 <__assert_fail@plt+0x7a4>
   119ac:	eor	r0, r6, #1
   119b0:	sub	sp, fp, #28
   119b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119b8:	cmn	r6, #3
   119bc:	bne	11a08 <__assert_fail@plt+0x948>
   119c0:	movw	r0, #33008	; 0x80f0
   119c4:	movw	r2, #30154	; 0x75ca
   119c8:	mov	r1, #0
   119cc:	movt	r0, #2
   119d0:	movt	r2, #1
   119d4:	str	r1, [sp, #4]
   119d8:	movw	r1, #29997	; 0x752d
   119dc:	movt	r1, #1
   119e0:	ldr	r3, [r0]
   119e4:	movw	r0, #33108	; 0x8154
   119e8:	str	r2, [sp]
   119ec:	movw	r2, #30140	; 0x75bc
   119f0:	movt	r0, #2
   119f4:	movt	r2, #1
   119f8:	ldr	r0, [r0]
   119fc:	bl	15710 <__assert_fail@plt+0x4650>
   11a00:	mov	r0, #0
   11a04:	bl	10fac <exit@plt>
   11a08:	cmn	r6, #2
   11a0c:	bne	11a18 <__assert_fail@plt+0x958>
   11a10:	mov	r0, #0
   11a14:	bl	111bc <__assert_fail@plt+0xfc>
   11a18:	sub	r0, r6, #48	; 0x30
   11a1c:	cmp	r0, #9
   11a20:	bhi	11a4c <__assert_fail@plt+0x98c>
   11a24:	movw	r1, #30046	; 0x755e
   11a28:	mov	r0, #0
   11a2c:	mov	r2, #5
   11a30:	movt	r1, #1
   11a34:	bl	10eec <dcgettext@plt>
   11a38:	mov	r2, r0
   11a3c:	mov	r0, #0
   11a40:	mov	r1, #0
   11a44:	mov	r3, r6
   11a48:	bl	10f58 <error@plt>
   11a4c:	mov	r0, #1
   11a50:	bl	111bc <__assert_fail@plt+0xfc>
   11a54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a58:	add	fp, sp, #28
   11a5c:	push	{r1}		; (str r1, [sp, #-4]!)
   11a60:	mov	r1, #2
   11a64:	mov	r5, r0
   11a68:	bl	13310 <__assert_fail@plt+0x2250>
   11a6c:	movw	r0, #33152	; 0x8180
   11a70:	mov	r9, #0
   11a74:	movt	r0, #2
   11a78:	str	r9, [r0]
   11a7c:	movw	r0, #33148	; 0x817c
   11a80:	movt	r0, #2
   11a84:	strb	r9, [r0]
   11a88:	mov	r0, r5
   11a8c:	bl	123f0 <__assert_fail@plt+0x1330>
   11a90:	mov	r7, r0
   11a94:	movw	r0, #33156	; 0x8184
   11a98:	movw	ip, #33168	; 0x8190
   11a9c:	movw	sl, #656	; 0x290
   11aa0:	movw	lr, #33164	; 0x818c
   11aa4:	movw	r8, #33108	; 0x8154
   11aa8:	movt	r0, #2
   11aac:	movt	ip, #2
   11ab0:	movt	sl, #3
   11ab4:	movt	lr, #2
   11ab8:	movt	r8, #2
   11abc:	str	r7, [r0]
   11ac0:	movw	r0, #33172	; 0x8194
   11ac4:	movt	r0, #2
   11ac8:	str	r9, [r0]
   11acc:	cmn	r7, #1
   11ad0:	cmpne	r7, #10
   11ad4:	bne	11c80 <__assert_fail@plt+0xbc0>
   11ad8:	ldr	r6, [ip]
   11adc:	ldr	r0, [lr]
   11ae0:	str	r9, [sl]
   11ae4:	cmp	r0, r6
   11ae8:	bgt	11af8 <__assert_fail@plt+0xa38>
   11aec:	cmn	r7, #1
   11af0:	cmpne	r7, #10
   11af4:	beq	11e04 <__assert_fail@plt+0xd44>
   11af8:	movw	r0, #33148	; 0x817c
   11afc:	mov	r2, #0
   11b00:	movt	r0, #2
   11b04:	ldrb	r0, [r0]
   11b08:	cmp	r0, #1
   11b0c:	bne	11b8c <__assert_fail@plt+0xacc>
   11b10:	cmp	r6, #8
   11b14:	mov	r9, #9
   11b18:	blt	11b8c <__assert_fail@plt+0xacc>
   11b1c:	asr	r0, r6, #31
   11b20:	mov	r2, #0
   11b24:	add	r0, r6, r0, lsr #29
   11b28:	bic	r4, r0, #7
   11b2c:	ldr	r0, [r8]
   11b30:	ldr	r1, [r0, #20]
   11b34:	ldr	r3, [r0, #24]
   11b38:	cmp	r1, r3
   11b3c:	bcs	11b6c <__assert_fail@plt+0xaac>
   11b40:	add	r3, r1, #1
   11b44:	str	r3, [r0, #20]
   11b48:	strb	r9, [r1]
   11b4c:	asr	r0, r2, #31
   11b50:	add	r0, r2, r0, lsr #29
   11b54:	bic	r0, r0, #7
   11b58:	add	r2, r0, #8
   11b5c:	cmp	r2, r4
   11b60:	str	r2, [sl]
   11b64:	blt	11b2c <__assert_fail@plt+0xa6c>
   11b68:	b	11b8c <__assert_fail@plt+0xacc>
   11b6c:	mov	r1, #9
   11b70:	bl	11054 <__overflow@plt>
   11b74:	ldr	r2, [sl]
   11b78:	movw	lr, #33164	; 0x818c
   11b7c:	movw	ip, #33168	; 0x8190
   11b80:	movt	lr, #2
   11b84:	movt	ip, #2
   11b88:	b	11b4c <__assert_fail@plt+0xa8c>
   11b8c:	cmp	r2, r6
   11b90:	bge	11bec <__assert_fail@plt+0xb2c>
   11b94:	mov	r4, #32
   11b98:	ldr	r0, [r8]
   11b9c:	ldr	r1, [r0, #20]
   11ba0:	ldr	r3, [r0, #24]
   11ba4:	cmp	r1, r3
   11ba8:	bcs	11bcc <__assert_fail@plt+0xb0c>
   11bac:	add	r3, r1, #1
   11bb0:	str	r3, [r0, #20]
   11bb4:	strb	r4, [r1]
   11bb8:	add	r2, r2, #1
   11bbc:	cmp	r2, r6
   11bc0:	str	r2, [sl]
   11bc4:	blt	11b98 <__assert_fail@plt+0xad8>
   11bc8:	b	11bec <__assert_fail@plt+0xb2c>
   11bcc:	mov	r1, #32
   11bd0:	bl	11054 <__overflow@plt>
   11bd4:	ldr	r2, [sl]
   11bd8:	movw	lr, #33164	; 0x818c
   11bdc:	movw	ip, #33168	; 0x8190
   11be0:	movt	lr, #2
   11be4:	movt	ip, #2
   11be8:	b	11bb8 <__assert_fail@plt+0xaf8>
   11bec:	ldr	r6, [lr]
   11bf0:	cmp	r2, r6
   11bf4:	bne	11c0c <__assert_fail@plt+0xb4c>
   11bf8:	mov	r1, r2
   11bfc:	mov	r6, r2
   11c00:	cmn	r7, #1
   11c04:	bne	11cc4 <__assert_fail@plt+0xc04>
   11c08:	b	11d58 <__assert_fail@plt+0xc98>
   11c0c:	movw	r0, #33128	; 0x8168
   11c10:	movt	r0, #2
   11c14:	ldr	r9, [r0]
   11c18:	ldrb	r1, [r9]
   11c1c:	cmp	r1, #0
   11c20:	beq	11cb8 <__assert_fail@plt+0xbf8>
   11c24:	ldr	r0, [r8]
   11c28:	ldr	r3, [r0, #20]
   11c2c:	ldr	r4, [r0, #24]
   11c30:	cmp	r3, r4
   11c34:	bcs	11c60 <__assert_fail@plt+0xba0>
   11c38:	add	r4, r3, #1
   11c3c:	str	r4, [r0, #20]
   11c40:	strb	r1, [r3]
   11c44:	add	r2, r2, #1
   11c48:	add	r9, r9, #1
   11c4c:	mov	r1, r6
   11c50:	cmp	r2, r6
   11c54:	str	r2, [sl]
   11c58:	bne	11c18 <__assert_fail@plt+0xb58>
   11c5c:	b	11cbc <__assert_fail@plt+0xbfc>
   11c60:	bl	11054 <__overflow@plt>
   11c64:	movw	r0, #33164	; 0x818c
   11c68:	ldr	r2, [sl]
   11c6c:	movw	ip, #33168	; 0x8190
   11c70:	movt	r0, #2
   11c74:	movt	ip, #2
   11c78:	ldr	r6, [r0]
   11c7c:	b	11c44 <__assert_fail@plt+0xb84>
   11c80:	movw	r0, #33136	; 0x8170
   11c84:	ldr	r6, [ip]
   11c88:	movt	r0, #2
   11c8c:	ldr	r0, [r0]
   11c90:	cmp	r6, r0
   11c94:	blt	11adc <__assert_fail@plt+0xa1c>
   11c98:	movw	r0, #33132	; 0x816c
   11c9c:	movt	r0, #2
   11ca0:	ldr	r0, [r0]
   11ca4:	add	r1, r0, r6
   11ca8:	ldr	r0, [lr]
   11cac:	cmp	r0, r1
   11cb0:	blt	11ad8 <__assert_fail@plt+0xa18>
   11cb4:	b	11ecc <__assert_fail@plt+0xe0c>
   11cb8:	mov	r1, r2
   11cbc:	cmn	r7, #1
   11cc0:	beq	11d58 <__assert_fail@plt+0xc98>
   11cc4:	cmp	r7, #10
   11cc8:	mov	r9, #0
   11ccc:	beq	11e04 <__assert_fail@plt+0xd44>
   11cd0:	movw	r0, #33148	; 0x817c
   11cd4:	movt	r0, #2
   11cd8:	ldrb	r0, [r0]
   11cdc:	cmp	r0, #1
   11ce0:	bne	11da8 <__assert_fail@plt+0xce8>
   11ce4:	asr	r0, r6, #31
   11ce8:	add	r0, r6, r0, lsr #29
   11cec:	bic	r9, r0, #7
   11cf0:	add	r0, r1, #1
   11cf4:	cmp	r0, r9
   11cf8:	bge	11da8 <__assert_fail@plt+0xce8>
   11cfc:	cmp	r1, r9
   11d00:	bge	11da8 <__assert_fail@plt+0xce8>
   11d04:	ldr	r0, [r8]
   11d08:	ldr	r2, [r0, #20]
   11d0c:	ldr	r3, [r0, #24]
   11d10:	cmp	r2, r3
   11d14:	bcs	11d48 <__assert_fail@plt+0xc88>
   11d18:	add	r3, r2, #1
   11d1c:	str	r3, [r0, #20]
   11d20:	mov	r0, #9
   11d24:	strb	r0, [r2]
   11d28:	asr	r0, r1, #31
   11d2c:	add	r0, r1, r0, lsr #29
   11d30:	bic	r0, r0, #7
   11d34:	add	r1, r0, #8
   11d38:	str	r1, [sl]
   11d3c:	cmp	r1, r9
   11d40:	blt	11d04 <__assert_fail@plt+0xc44>
   11d44:	b	11da8 <__assert_fail@plt+0xce8>
   11d48:	mov	r1, #9
   11d4c:	bl	11054 <__overflow@plt>
   11d50:	ldr	r1, [sl]
   11d54:	b	11d28 <__assert_fail@plt+0xc68>
   11d58:	movw	r1, #33140	; 0x8174
   11d5c:	ldr	r0, [ip]
   11d60:	mov	r9, #0
   11d64:	movt	r1, #2
   11d68:	ldr	r1, [r1]
   11d6c:	add	r0, r1, r0
   11d70:	cmp	r6, r0
   11d74:	blt	11e04 <__assert_fail@plt+0xd44>
   11d78:	ldr	r0, [r8]
   11d7c:	ldr	r1, [r0, #20]
   11d80:	ldr	r2, [r0, #24]
   11d84:	cmp	r1, r2
   11d88:	bcs	11dfc <__assert_fail@plt+0xd3c>
   11d8c:	add	r2, r1, #1
   11d90:	str	r2, [r0, #20]
   11d94:	mov	r0, #10
   11d98:	strb	r0, [r1]
   11d9c:	cmn	r7, #1
   11da0:	bne	11e0c <__assert_fail@plt+0xd4c>
   11da4:	b	12308 <__assert_fail@plt+0x1248>
   11da8:	cmp	r1, r6
   11dac:	mov	r9, #0
   11db0:	bge	11e04 <__assert_fail@plt+0xd44>
   11db4:	ldr	r0, [r8]
   11db8:	ldr	r2, [r0, #20]
   11dbc:	ldr	r3, [r0, #24]
   11dc0:	cmp	r2, r3
   11dc4:	bcs	11dec <__assert_fail@plt+0xd2c>
   11dc8:	add	r3, r2, #1
   11dcc:	str	r3, [r0, #20]
   11dd0:	mov	r0, #32
   11dd4:	strb	r0, [r2]
   11dd8:	add	r1, r1, #1
   11ddc:	cmp	r1, r6
   11de0:	str	r1, [sl]
   11de4:	blt	11db4 <__assert_fail@plt+0xcf4>
   11de8:	b	11e04 <__assert_fail@plt+0xd44>
   11dec:	mov	r1, #32
   11df0:	bl	11054 <__overflow@plt>
   11df4:	ldr	r1, [sl]
   11df8:	b	11dd8 <__assert_fail@plt+0xd18>
   11dfc:	mov	r1, #10
   11e00:	bl	11054 <__overflow@plt>
   11e04:	cmn	r7, #1
   11e08:	beq	12308 <__assert_fail@plt+0x1248>
   11e0c:	cmp	r7, #10
   11e10:	beq	11e7c <__assert_fail@plt+0xdbc>
   11e14:	ldr	r0, [r8]
   11e18:	ldr	r1, [r0, #20]
   11e1c:	ldr	r2, [r0, #24]
   11e20:	cmp	r1, r2
   11e24:	bcs	11e58 <__assert_fail@plt+0xd98>
   11e28:	add	r2, r1, #1
   11e2c:	str	r2, [r0, #20]
   11e30:	strb	r7, [r1]
   11e34:	ldmib	r5, {r0, r1}
   11e38:	cmp	r0, r1
   11e3c:	bcs	11e64 <__assert_fail@plt+0xda4>
   11e40:	add	r1, r0, #1
   11e44:	str	r1, [r5, #4]
   11e48:	ldrb	r7, [r0]
   11e4c:	cmn	r7, #1
   11e50:	bne	11e0c <__assert_fail@plt+0xd4c>
   11e54:	b	12308 <__assert_fail@plt+0x1248>
   11e58:	uxtb	r1, r7
   11e5c:	bl	11054 <__overflow@plt>
   11e60:	b	11e34 <__assert_fail@plt+0xd74>
   11e64:	mov	r0, r5
   11e68:	bl	11048 <__uflow@plt>
   11e6c:	mov	r7, r0
   11e70:	cmn	r7, #1
   11e74:	bne	11e0c <__assert_fail@plt+0xd4c>
   11e78:	b	12308 <__assert_fail@plt+0x1248>
   11e7c:	ldr	r0, [r8]
   11e80:	ldr	r1, [r0, #20]
   11e84:	ldr	r2, [r0, #24]
   11e88:	cmp	r1, r2
   11e8c:	bcs	11ec0 <__assert_fail@plt+0xe00>
   11e90:	add	r2, r1, #1
   11e94:	str	r2, [r0, #20]
   11e98:	mov	r0, #10
   11e9c:	strb	r0, [r1]
   11ea0:	mov	r0, r5
   11ea4:	bl	123f0 <__assert_fail@plt+0x1330>
   11ea8:	movw	ip, #33168	; 0x8190
   11eac:	movw	lr, #33164	; 0x818c
   11eb0:	mov	r7, r0
   11eb4:	movt	ip, #2
   11eb8:	movt	lr, #2
   11ebc:	b	11acc <__assert_fail@plt+0xa0c>
   11ec0:	mov	r1, #10
   11ec4:	bl	11054 <__overflow@plt>
   11ec8:	b	11ea0 <__assert_fail@plt+0xde0>
   11ecc:	movw	r1, #33180	; 0x819c
   11ed0:	movt	r1, #2
   11ed4:	str	r0, [r1]
   11ed8:	movw	r0, #33176	; 0x8198
   11edc:	movw	r1, #33184	; 0x81a0
   11ee0:	movt	r0, #2
   11ee4:	movt	r1, #2
   11ee8:	mov	r4, r0
   11eec:	str	r6, [r0]
   11ef0:	movw	r0, #38184	; 0x9528
   11ef4:	movt	r0, #2
   11ef8:	str	r1, [r0]
   11efc:	movw	r0, #33160	; 0x8188
   11f00:	movw	r1, #38192	; 0x9530
   11f04:	movt	r0, #2
   11f08:	movt	r1, #2
   11f0c:	str	r1, [r0]
   11f10:	mov	r0, r5
   11f14:	mov	r1, r7
   11f18:	bl	12838 <__assert_fail@plt+0x1778>
   11f1c:	mov	ip, r0
   11f20:	movw	r0, #33168	; 0x8190
   11f24:	ldr	r2, [r4]
   11f28:	movw	r1, #33164	; 0x818c
   11f2c:	mov	r3, #0
   11f30:	movt	r0, #2
   11f34:	movt	r1, #2
   11f38:	ldr	r0, [r0]
   11f3c:	cmp	r0, r2
   11f40:	bne	11f80 <__assert_fail@plt+0xec0>
   11f44:	movw	r7, #33132	; 0x816c
   11f48:	ldr	r6, [r1]
   11f4c:	mvn	r3, #0
   11f50:	movt	r7, #2
   11f54:	subs	r3, ip, r3
   11f58:	movwne	r3, #1
   11f5c:	ldr	r7, [r7]
   11f60:	add	r7, r7, r0
   11f64:	cmp	r6, r7
   11f68:	mov	r7, #0
   11f6c:	movwge	r7, #1
   11f70:	subs	r6, ip, #10
   11f74:	movwne	r6, #1
   11f78:	and	r7, r6, r7
   11f7c:	and	r3, r3, r7
   11f80:	movw	r7, #33121	; 0x8161
   11f84:	movt	r7, #2
   11f88:	ldrb	r7, [r7]
   11f8c:	cmp	r7, #0
   11f90:	beq	1204c <__assert_fail@plt+0xf8c>
   11f94:	movw	r0, #33180	; 0x819c
   11f98:	movw	r2, #33152	; 0x8180
   11f9c:	movt	r0, #2
   11fa0:	movt	r2, #2
   11fa4:	ldr	r0, [r0]
   11fa8:	str	r0, [r2]
   11fac:	movw	r6, #38192	; 0x9530
   11fb0:	movt	r6, #2
   11fb4:	movw	r0, #33160	; 0x8188
   11fb8:	movt	r0, #2
   11fbc:	ldr	r4, [r0]
   11fc0:	cmp	r4, r6
   11fc4:	bls	123d0 <__assert_fail@plt+0x1310>
   11fc8:	ldrb	r0, [r4, #-16]
   11fcc:	orr	r0, r0, #10
   11fd0:	strb	r0, [r4, #-16]
   11fd4:	movw	r0, #33156	; 0x8184
   11fd8:	movt	r0, #2
   11fdc:	str	ip, [r0]
   11fe0:	bl	125d4 <__assert_fail@plt+0x1514>
   11fe4:	movw	r0, #33180	; 0x819c
   11fe8:	movt	r0, #2
   11fec:	ldr	r1, [r0]
   11ff0:	mov	r0, r6
   11ff4:	bl	12e00 <__assert_fail@plt+0x1d40>
   11ff8:	ldr	r7, [r6, #24]
   11ffc:	movw	r6, #33152	; 0x8180
   12000:	movt	r6, #2
   12004:	cmp	r7, r4
   12008:	beq	12024 <__assert_fail@plt+0xf64>
   1200c:	ldr	r1, [r6]
   12010:	mov	r0, r7
   12014:	bl	12e00 <__assert_fail@plt+0x1d40>
   12018:	ldr	r7, [r7, #24]
   1201c:	cmp	r7, r4
   12020:	bne	1200c <__assert_fail@plt+0xf4c>
   12024:	movw	r0, #33156	; 0x8184
   12028:	movw	ip, #33168	; 0x8190
   1202c:	movw	lr, #33164	; 0x818c
   12030:	movt	r0, #2
   12034:	movt	ip, #2
   12038:	movt	lr, #2
   1203c:	ldr	r7, [r0]
   12040:	movw	r0, #33172	; 0x8194
   12044:	movt	r0, #2
   12048:	b	11ac8 <__assert_fail@plt+0xa08>
   1204c:	movw	r7, #33123	; 0x8163
   12050:	movt	r7, #2
   12054:	ldrb	r7, [r7]
   12058:	cmp	r7, #0
   1205c:	beq	12130 <__assert_fail@plt+0x1070>
   12060:	ldr	r7, [r1]
   12064:	movw	r1, #33180	; 0x819c
   12068:	cmp	r3, #0
   1206c:	movw	r3, #33152	; 0x8180
   12070:	movt	r1, #2
   12074:	movt	r3, #2
   12078:	ldr	r6, [r1]
   1207c:	movne	r6, r7
   12080:	cmp	r0, r2
   12084:	str	r6, [r3]
   12088:	bne	11fac <__assert_fail@plt+0xeec>
   1208c:	movw	r1, #33132	; 0x816c
   12090:	movt	r1, #2
   12094:	ldr	r2, [r1]
   12098:	add	r0, r2, r0
   1209c:	cmp	r7, r0
   120a0:	blt	11fac <__assert_fail@plt+0xeec>
   120a4:	movw	r4, #33152	; 0x8180
   120a8:	movw	r6, #38192	; 0x9530
   120ac:	cmn	ip, #1
   120b0:	movt	r4, #2
   120b4:	movt	r6, #2
   120b8:	cmpne	ip, #10
   120bc:	beq	11fb4 <__assert_fail@plt+0xef4>
   120c0:	mov	r0, r5
   120c4:	mov	r1, ip
   120c8:	bl	12838 <__assert_fail@plt+0x1778>
   120cc:	movw	r1, #33176	; 0x8198
   120d0:	mov	ip, r0
   120d4:	movw	r0, #33168	; 0x8190
   120d8:	movt	r0, #2
   120dc:	movt	r1, #2
   120e0:	ldr	r0, [r0]
   120e4:	ldr	r2, [r1]
   120e8:	cmp	r0, r2
   120ec:	bne	11fb4 <__assert_fail@plt+0xef4>
   120f0:	movw	r1, #33132	; 0x816c
   120f4:	movt	r1, #2
   120f8:	ldr	r2, [r1]
   120fc:	add	r2, r2, r0
   12100:	movw	r0, #33164	; 0x818c
   12104:	movt	r0, #2
   12108:	ldr	r0, [r0]
   1210c:	cmp	r0, r2
   12110:	blt	11fb4 <__assert_fail@plt+0xef4>
   12114:	cmn	ip, #1
   12118:	cmpne	ip, #10
   1211c:	beq	11fb4 <__assert_fail@plt+0xef4>
   12120:	ldr	r2, [r4]
   12124:	cmp	r0, r2
   12128:	beq	120c0 <__assert_fail@plt+0x1000>
   1212c:	b	11fb4 <__assert_fail@plt+0xef4>
   12130:	movw	r7, #33122	; 0x8162
   12134:	movt	r7, #2
   12138:	ldrb	r7, [r7]
   1213c:	cmp	r7, #1
   12140:	bne	1216c <__assert_fail@plt+0x10ac>
   12144:	cmp	r3, #0
   12148:	beq	12204 <__assert_fail@plt+0x1144>
   1214c:	movw	r3, #33180	; 0x819c
   12150:	movt	r3, #2
   12154:	ldr	r7, [r3]
   12158:	ldr	r3, [r1]
   1215c:	cmp	r3, r7
   12160:	mov	r6, r3
   12164:	beq	12210 <__assert_fail@plt+0x1150>
   12168:	b	12234 <__assert_fail@plt+0x1174>
   1216c:	movw	r3, #33180	; 0x819c
   12170:	movw	r4, #33152	; 0x8180
   12174:	movw	r6, #38192	; 0x9530
   12178:	cmp	r0, r2
   1217c:	movt	r3, #2
   12180:	movt	r4, #2
   12184:	movt	r6, #2
   12188:	ldr	r3, [r3]
   1218c:	str	r3, [r4]
   12190:	bne	11fb4 <__assert_fail@plt+0xef4>
   12194:	movw	r2, #33132	; 0x816c
   12198:	movt	r2, #2
   1219c:	ldr	r2, [r2]
   121a0:	add	r2, r2, r0
   121a4:	ldr	r0, [r1]
   121a8:	cmp	r0, r2
   121ac:	blt	11fb4 <__assert_fail@plt+0xef4>
   121b0:	cmn	ip, #1
   121b4:	cmpne	ip, #10
   121b8:	beq	11fb4 <__assert_fail@plt+0xef4>
   121bc:	ldr	r2, [r4]
   121c0:	cmp	r0, r2
   121c4:	bne	11fb4 <__assert_fail@plt+0xef4>
   121c8:	mov	r0, r5
   121cc:	mov	r1, ip
   121d0:	bl	12838 <__assert_fail@plt+0x1778>
   121d4:	movw	r2, #33176	; 0x8198
   121d8:	mov	ip, r0
   121dc:	movw	r0, #33168	; 0x8190
   121e0:	movw	r1, #33164	; 0x818c
   121e4:	movt	r0, #2
   121e8:	movt	r2, #2
   121ec:	movt	r1, #2
   121f0:	ldr	r0, [r0]
   121f4:	ldr	r2, [r2]
   121f8:	cmp	r0, r2
   121fc:	beq	12194 <__assert_fail@plt+0x10d4>
   12200:	b	11fb4 <__assert_fail@plt+0xef4>
   12204:	movw	r3, #33180	; 0x819c
   12208:	movt	r3, #2
   1220c:	ldr	r3, [r3]
   12210:	movw	r7, #33152	; 0x8180
   12214:	movt	r7, #2
   12218:	ldr	r7, [r7]
   1221c:	cmp	r7, r3
   12220:	bne	1224c <__assert_fail@plt+0x118c>
   12224:	cmp	r3, #0
   12228:	mov	r6, #0
   1222c:	mov	r7, r3
   12230:	movweq	r6, #3
   12234:	movw	r3, #33152	; 0x8180
   12238:	movt	r3, #2
   1223c:	str	r6, [r3]
   12240:	cmp	r0, r2
   12244:	bne	11fac <__assert_fail@plt+0xeec>
   12248:	b	12258 <__assert_fail@plt+0x1198>
   1224c:	mov	r7, r3
   12250:	cmp	r0, r2
   12254:	bne	11fac <__assert_fail@plt+0xeec>
   12258:	movw	r2, #33132	; 0x816c
   1225c:	movt	r2, #2
   12260:	ldr	r2, [r2]
   12264:	add	r2, r2, r0
   12268:	ldr	r0, [r1]
   1226c:	cmp	r0, r2
   12270:	blt	11fac <__assert_fail@plt+0xeec>
   12274:	cmn	ip, #1
   12278:	beq	11fac <__assert_fail@plt+0xeec>
   1227c:	cmp	ip, #10
   12280:	cmpne	r0, r7
   12284:	beq	11fac <__assert_fail@plt+0xeec>
   12288:	movw	r4, #33152	; 0x8180
   1228c:	movw	r6, #38192	; 0x9530
   12290:	movt	r4, #2
   12294:	movt	r6, #2
   12298:	mov	r0, r5
   1229c:	mov	r1, ip
   122a0:	bl	12838 <__assert_fail@plt+0x1778>
   122a4:	movw	r1, #33176	; 0x8198
   122a8:	mov	ip, r0
   122ac:	movw	r0, #33168	; 0x8190
   122b0:	movt	r0, #2
   122b4:	movt	r1, #2
   122b8:	ldr	r0, [r0]
   122bc:	ldr	r2, [r1]
   122c0:	cmp	r0, r2
   122c4:	bne	11fb4 <__assert_fail@plt+0xef4>
   122c8:	movw	r1, #33132	; 0x816c
   122cc:	movt	r1, #2
   122d0:	ldr	r2, [r1]
   122d4:	add	r2, r2, r0
   122d8:	movw	r0, #33164	; 0x818c
   122dc:	movt	r0, #2
   122e0:	ldr	r0, [r0]
   122e4:	cmp	r0, r2
   122e8:	blt	11fb4 <__assert_fail@plt+0xef4>
   122ec:	cmn	ip, #1
   122f0:	cmpne	ip, #10
   122f4:	beq	11fb4 <__assert_fail@plt+0xef4>
   122f8:	ldr	r2, [r4]
   122fc:	cmp	r0, r2
   12300:	beq	12298 <__assert_fail@plt+0x11d8>
   12304:	b	11fb4 <__assert_fail@plt+0xef4>
   12308:	movw	r1, #33156	; 0x8184
   1230c:	mvn	r0, #0
   12310:	mov	r6, #0
   12314:	movt	r1, #2
   12318:	str	r0, [r1]
   1231c:	ldr	r0, [r5]
   12320:	ands	r4, r0, #32
   12324:	movw	r0, #33104	; 0x8150
   12328:	movt	r0, #2
   1232c:	mvneq	r6, #0
   12330:	ldr	r0, [r0]
   12334:	cmp	r0, r5
   12338:	beq	12374 <__assert_fail@plt+0x12b4>
   1233c:	mov	r0, r5
   12340:	bl	1334c <__assert_fail@plt+0x228c>
   12344:	cmp	r4, #0
   12348:	bne	1235c <__assert_fail@plt+0x129c>
   1234c:	cmp	r0, #0
   12350:	beq	1235c <__assert_fail@plt+0x129c>
   12354:	bl	10fdc <__errno_location@plt>
   12358:	ldr	r6, [r0]
   1235c:	cmp	r6, #0
   12360:	bmi	123c4 <__assert_fail@plt+0x1304>
   12364:	beq	12388 <__assert_fail@plt+0x12c8>
   12368:	movw	r5, #31087	; 0x796f
   1236c:	movt	r5, #1
   12370:	b	123a0 <__assert_fail@plt+0x12e0>
   12374:	mov	r0, r5
   12378:	bl	11084 <clearerr_unlocked@plt>
   1237c:	cmp	r6, #0
   12380:	bpl	12364 <__assert_fail@plt+0x12a4>
   12384:	b	123c4 <__assert_fail@plt+0x1304>
   12388:	movw	r1, #30756	; 0x7824
   1238c:	mov	r0, #0
   12390:	mov	r2, #5
   12394:	movt	r1, #1
   12398:	bl	10eec <dcgettext@plt>
   1239c:	mov	r5, r0
   123a0:	ldr	r2, [sp]
   123a4:	mov	r0, #0
   123a8:	mov	r1, #3
   123ac:	bl	14e94 <__assert_fail@plt+0x3dd4>
   123b0:	mov	r3, r0
   123b4:	mov	r0, #0
   123b8:	mov	r1, r6
   123bc:	mov	r2, r5
   123c0:	bl	10f58 <error@plt>
   123c4:	lsr	r0, r6, #31
   123c8:	sub	sp, fp, #28
   123cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123d0:	movw	r0, #30767	; 0x782f
   123d4:	movw	r1, #30785	; 0x7841
   123d8:	movw	r3, #30795	; 0x784b
   123dc:	movw	r2, #623	; 0x26f
   123e0:	movt	r0, #1
   123e4:	movt	r1, #1
   123e8:	movt	r3, #1
   123ec:	bl	110c0 <__assert_fail@plt>
   123f0:	push	{r4, r5, r6, r7, fp, lr}
   123f4:	add	fp, sp, #16
   123f8:	movw	r5, #33164	; 0x818c
   123fc:	mov	r4, r0
   12400:	mov	r0, #0
   12404:	movt	r5, #2
   12408:	str	r0, [r5]
   1240c:	ldmib	r4, {r0, r1}
   12410:	cmp	r0, r1
   12414:	bcs	125c8 <__assert_fail@plt+0x1508>
   12418:	add	r1, r0, #1
   1241c:	str	r1, [r4, #4]
   12420:	ldrb	r0, [r0]
   12424:	movw	r6, #33148	; 0x817c
   12428:	mov	r7, #1
   1242c:	movt	r6, #2
   12430:	cmp	r0, #9
   12434:	beq	1244c <__assert_fail@plt+0x138c>
   12438:	cmp	r0, #32
   1243c:	bne	124a0 <__assert_fail@plt+0x13e0>
   12440:	ldr	r0, [r5]
   12444:	add	r0, r0, #1
   12448:	b	12464 <__assert_fail@plt+0x13a4>
   1244c:	ldr	r0, [r5]
   12450:	strb	r7, [r6]
   12454:	asr	r1, r0, #31
   12458:	add	r0, r0, r1, lsr #29
   1245c:	bic	r0, r0, #7
   12460:	add	r0, r0, #8
   12464:	str	r0, [r5]
   12468:	ldmib	r4, {r0, r1}
   1246c:	cmp	r0, r1
   12470:	bcs	1248c <__assert_fail@plt+0x13cc>
   12474:	add	r1, r0, #1
   12478:	str	r1, [r4, #4]
   1247c:	ldrb	r0, [r0]
   12480:	cmp	r0, #9
   12484:	bne	12438 <__assert_fail@plt+0x1378>
   12488:	b	1244c <__assert_fail@plt+0x138c>
   1248c:	mov	r0, r4
   12490:	bl	11048 <__uflow@plt>
   12494:	cmp	r0, #9
   12498:	bne	12438 <__assert_fail@plt+0x1378>
   1249c:	b	1244c <__assert_fail@plt+0x138c>
   124a0:	movw	r1, #33140	; 0x8174
   124a4:	movt	r1, #2
   124a8:	ldr	r1, [r1]
   124ac:	cmp	r1, #0
   124b0:	beq	125a0 <__assert_fail@plt+0x14e0>
   124b4:	ldr	r1, [r5]
   124b8:	movw	r2, #33168	; 0x8190
   124bc:	movt	r2, #2
   124c0:	str	r1, [r2]
   124c4:	movw	r1, #33128	; 0x8168
   124c8:	movt	r1, #2
   124cc:	ldr	r2, [r1]
   124d0:	ldrb	r1, [r2]
   124d4:	cmp	r1, #0
   124d8:	beq	1252c <__assert_fail@plt+0x146c>
   124dc:	add	r7, r2, #1
   124e0:	uxtb	r1, r1
   124e4:	cmp	r0, r1
   124e8:	bne	125c4 <__assert_fail@plt+0x1504>
   124ec:	ldr	r0, [r5]
   124f0:	add	r0, r0, #1
   124f4:	str	r0, [r5]
   124f8:	ldmib	r4, {r0, r1}
   124fc:	cmp	r0, r1
   12500:	bcs	12520 <__assert_fail@plt+0x1460>
   12504:	add	r1, r0, #1
   12508:	str	r1, [r4, #4]
   1250c:	ldrb	r0, [r0]
   12510:	ldrb	r1, [r7], #1
   12514:	cmp	r1, #0
   12518:	bne	124e0 <__assert_fail@plt+0x1420>
   1251c:	b	1252c <__assert_fail@plt+0x146c>
   12520:	mov	r0, r4
   12524:	bl	11048 <__uflow@plt>
   12528:	b	12510 <__assert_fail@plt+0x1450>
   1252c:	mov	r7, #1
   12530:	cmp	r0, #9
   12534:	beq	1254c <__assert_fail@plt+0x148c>
   12538:	cmp	r0, #32
   1253c:	bne	125c4 <__assert_fail@plt+0x1504>
   12540:	ldr	r0, [r5]
   12544:	add	r0, r0, #1
   12548:	b	12564 <__assert_fail@plt+0x14a4>
   1254c:	ldr	r0, [r5]
   12550:	strb	r7, [r6]
   12554:	asr	r1, r0, #31
   12558:	add	r0, r0, r1, lsr #29
   1255c:	bic	r0, r0, #7
   12560:	add	r0, r0, #8
   12564:	str	r0, [r5]
   12568:	ldmib	r4, {r0, r1}
   1256c:	cmp	r0, r1
   12570:	bcs	1258c <__assert_fail@plt+0x14cc>
   12574:	add	r1, r0, #1
   12578:	str	r1, [r4, #4]
   1257c:	ldrb	r0, [r0]
   12580:	cmp	r0, #9
   12584:	bne	12538 <__assert_fail@plt+0x1478>
   12588:	b	1254c <__assert_fail@plt+0x148c>
   1258c:	mov	r0, r4
   12590:	bl	11048 <__uflow@plt>
   12594:	cmp	r0, #9
   12598:	bne	12538 <__assert_fail@plt+0x1478>
   1259c:	b	1254c <__assert_fail@plt+0x148c>
   125a0:	movw	r1, #33136	; 0x8170
   125a4:	ldr	r2, [r5]
   125a8:	movt	r1, #2
   125ac:	ldr	r1, [r1]
   125b0:	cmp	r1, r2
   125b4:	movlt	r2, r1
   125b8:	movw	r1, #33168	; 0x8190
   125bc:	movt	r1, #2
   125c0:	str	r2, [r1]
   125c4:	pop	{r4, r5, r6, r7, fp, pc}
   125c8:	mov	r0, r4
   125cc:	bl	11048 <__uflow@plt>
   125d0:	b	12424 <__assert_fail@plt+0x1364>
   125d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125d8:	add	fp, sp, #28
   125dc:	sub	sp, sp, #24
   125e0:	movw	r0, #33160	; 0x8188
   125e4:	mov	r5, #0
   125e8:	movw	lr, #38192	; 0x9530
   125ec:	movt	r0, #2
   125f0:	movt	lr, #2
   125f4:	ldr	r0, [r0]
   125f8:	str	r5, [r0, #20]
   125fc:	ldr	r1, [r0, #4]
   12600:	str	r1, [sp]
   12604:	movw	r1, #33124	; 0x8164
   12608:	movt	r1, #2
   1260c:	ldr	r3, [r1]
   12610:	sub	r1, r0, #28
   12614:	cmp	r1, lr
   12618:	str	r3, [r0, #4]
   1261c:	bcc	12828 <__assert_fail@plt+0x1768>
   12620:	movw	r7, #33144	; 0x8178
   12624:	movw	r2, #33172	; 0x8194
   12628:	mov	r9, r0
   1262c:	movt	r7, #2
   12630:	movt	r2, #2
   12634:	ldr	r4, [r7]
   12638:	movw	r7, #33152	; 0x8180
   1263c:	ldr	r8, [r2]
   12640:	movt	r7, #2
   12644:	ldr	r2, [r7]
   12648:	movw	r7, #33180	; 0x819c
   1264c:	movt	r7, #2
   12650:	str	r2, [sp, #8]
   12654:	ldr	r2, [r7]
   12658:	str	r2, [sp, #4]
   1265c:	b	1267c <__assert_fail@plt+0x15bc>
   12660:	sub	r1, r1, #1600	; 0x640
   12664:	add	r1, r1, ip
   12668:	sub	r5, r5, #28
   1266c:	str	r1, [r7, #-8]
   12670:	sub	r1, r9, #28
   12674:	cmp	r1, lr
   12678:	bcc	12828 <__assert_fail@plt+0x1768>
   1267c:	ldr	r2, [sp, #4]
   12680:	cmp	r1, lr
   12684:	mov	r6, r1
   12688:	ldr	r1, [sp, #8]
   1268c:	mov	r7, r9
   12690:	mvn	ip, #-2147483648	; 0x80000000
   12694:	str	r5, [sp, #16]
   12698:	str	r6, [sp, #20]
   1269c:	sub	r6, r6, lr
   126a0:	clz	r6, r6
   126a4:	lsr	r6, r6, #5
   126a8:	moveq	r1, r2
   126ac:	ldr	r2, [r9, #-24]	; 0xffffffe8
   126b0:	cmp	r8, #0
   126b4:	add	sl, r1, r2
   126b8:	mov	r1, #0
   126bc:	movwgt	r1, #1
   126c0:	str	r2, [sp, #12]
   126c4:	and	r6, r6, r1
   126c8:	mov	r1, r5
   126cc:	add	lr, r0, r1
   126d0:	cmp	r1, #0
   126d4:	beq	12710 <__assert_fail@plt+0x1650>
   126d8:	sub	r5, r4, sl
   126dc:	ldr	r2, [lr, #24]
   126e0:	add	r5, r5, r5, lsl #2
   126e4:	lsl	r5, r5, #1
   126e8:	mul	r5, r5, r5
   126ec:	cmp	r2, r0
   126f0:	beq	12714 <__assert_fail@plt+0x1654>
   126f4:	ldr	r2, [lr, #16]
   126f8:	sub	r2, sl, r2
   126fc:	add	r2, r2, r2, lsl #2
   12700:	lsl	r2, r2, #1
   12704:	mul	r2, r2, r2
   12708:	add	r5, r5, r2, lsr #1
   1270c:	b	12714 <__assert_fail@plt+0x1654>
   12710:	mov	r5, #0
   12714:	ldr	r2, [lr, #20]
   12718:	cmp	r6, #0
   1271c:	add	r9, r2, r5
   12720:	beq	12738 <__assert_fail@plt+0x1678>
   12724:	sub	r2, sl, r8
   12728:	add	r2, r2, r2, lsl #2
   1272c:	lsl	r2, r2, #1
   12730:	mul	r2, r2, r2
   12734:	add	r9, r9, r2, lsr #1
   12738:	cmp	r9, ip
   1273c:	strlt	sl, [r7, #-12]
   12740:	strlt	lr, [r7, #-4]
   12744:	movlt	ip, r9
   12748:	cmp	r1, #0
   1274c:	beq	1276c <__assert_fail@plt+0x16ac>
   12750:	ldr	r2, [lr, #-20]	; 0xffffffec
   12754:	ldr	r5, [lr, #4]
   12758:	add	r1, r1, #28
   1275c:	add	r2, r2, sl
   12760:	add	sl, r2, r5
   12764:	cmp	sl, r3
   12768:	blt	126cc <__assert_fail@plt+0x160c>
   1276c:	ldr	r9, [sp, #20]
   12770:	movw	lr, #38192	; 0x9530
   12774:	movt	lr, #2
   12778:	cmp	r9, lr
   1277c:	bls	127d4 <__assert_fail@plt+0x1714>
   12780:	ldrb	r6, [r7, #-44]	; 0xffffffd4
   12784:	tst	r6, #2
   12788:	bne	127e0 <__assert_fail@plt+0x1720>
   1278c:	ldr	r5, [sp, #16]
   12790:	movw	r1, #3300	; 0xce4
   12794:	tst	r6, #4
   12798:	bne	127f4 <__assert_fail@plt+0x1734>
   1279c:	add	r1, lr, #28
   127a0:	cmp	r9, r1
   127a4:	bls	12820 <__assert_fail@plt+0x1760>
   127a8:	ldrb	r1, [r7, #-72]	; 0xffffffb8
   127ac:	tst	r1, #8
   127b0:	movw	r1, #4900	; 0x1324
   127b4:	beq	127f4 <__assert_fail@plt+0x1734>
   127b8:	ldr	r1, [r7, #-52]	; 0xffffffcc
   127bc:	movw	r2, #40000	; 0x9c40
   127c0:	add	r1, r1, #2
   127c4:	sdiv	r1, r2, r1
   127c8:	movw	r2, #4900	; 0x1324
   127cc:	add	r1, r1, r2
   127d0:	b	127f4 <__assert_fail@plt+0x1734>
   127d4:	ldr	r5, [sp, #16]
   127d8:	movw	r1, #4900	; 0x1324
   127dc:	b	127f4 <__assert_fail@plt+0x1734>
   127e0:	ldr	r5, [sp, #16]
   127e4:	tst	r6, #8
   127e8:	mov	r1, #2400	; 0x960
   127ec:	movweq	r1, #37220	; 0x9164
   127f0:	movteq	r1, #5
   127f4:	ldrb	r6, [r7, #-16]
   127f8:	tst	r6, #1
   127fc:	bne	12660 <__assert_fail@plt+0x15a0>
   12800:	tst	r6, #8
   12804:	beq	12664 <__assert_fail@plt+0x15a4>
   12808:	ldr	r2, [sp, #12]
   1280c:	movw	r6, #22500	; 0x57e4
   12810:	add	r2, r2, #2
   12814:	sdiv	r2, r6, r2
   12818:	add	r1, r2, r1
   1281c:	b	12664 <__assert_fail@plt+0x15a4>
   12820:	movw	r1, #4900	; 0x1324
   12824:	b	127f4 <__assert_fail@plt+0x1734>
   12828:	ldr	r1, [sp]
   1282c:	str	r1, [r0, #4]
   12830:	sub	sp, fp, #28
   12834:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12838:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1283c:	add	fp, sp, #28
   12840:	sub	sp, sp, #20
   12844:	movw	r9, #33160	; 0x8188
   12848:	movw	r2, #33184	; 0x81a0
   1284c:	mov	r5, r1
   12850:	movw	r1, #5000	; 0x1388
   12854:	mov	r4, r0
   12858:	movw	r8, #38184	; 0x9528
   1285c:	movw	sl, #33164	; 0x818c
   12860:	movt	r9, #2
   12864:	movt	r2, #2
   12868:	movt	r8, #2
   1286c:	movt	sl, #2
   12870:	add	r6, r2, r1
   12874:	movw	r2, #38192	; 0x9530
   12878:	ldr	r0, [r9]
   1287c:	movw	r1, #27944	; 0x6d28
   12880:	movt	r2, #2
   12884:	add	r1, r2, r1
   12888:	stm	sp, {r1, r6}
   1288c:	b	128c4 <__assert_fail@plt+0x1804>
   12890:	movw	r0, #33180	; 0x819c
   12894:	movt	r0, #2
   12898:	ldr	r0, [r0]
   1289c:	movw	r1, #33152	; 0x8180
   128a0:	movt	r1, #2
   128a4:	str	r0, [r1]
   128a8:	bl	12c84 <__assert_fail@plt+0x1bc4>
   128ac:	ldr	r1, [r9]
   128b0:	cmp	r5, #10
   128b4:	add	r0, r1, #28
   128b8:	cmnne	r5, #1
   128bc:	str	r0, [r9]
   128c0:	beq	12c74 <__assert_fail@plt+0x1bb4>
   128c4:	ldr	r1, [r8]
   128c8:	str	r1, [r0]
   128cc:	cmp	r1, r6
   128d0:	bne	12974 <__assert_fail@plt+0x18b4>
   128d4:	movw	r0, #33121	; 0x8161
   128d8:	movt	r0, #2
   128dc:	ldrb	r0, [r0]
   128e0:	cmp	r0, #1
   128e4:	beq	12954 <__assert_fail@plt+0x1894>
   128e8:	movw	r0, #33123	; 0x8163
   128ec:	movt	r0, #2
   128f0:	ldrb	r0, [r0]
   128f4:	cmp	r0, #1
   128f8:	bne	12904 <__assert_fail@plt+0x1844>
   128fc:	ldr	r0, [sl]
   12900:	b	12960 <__assert_fail@plt+0x18a0>
   12904:	movw	r0, #33122	; 0x8162
   12908:	movt	r0, #2
   1290c:	ldrb	r0, [r0]
   12910:	cmp	r0, #1
   12914:	bne	12954 <__assert_fail@plt+0x1894>
   12918:	movw	r1, #33180	; 0x819c
   1291c:	ldr	r0, [sl]
   12920:	movt	r1, #2
   12924:	ldr	r1, [r1]
   12928:	cmp	r0, r1
   1292c:	bne	12960 <__assert_fail@plt+0x18a0>
   12930:	movw	r1, #33152	; 0x8180
   12934:	movt	r1, #2
   12938:	ldr	r1, [r1]
   1293c:	cmp	r1, r0
   12940:	bne	1296c <__assert_fail@plt+0x18ac>
   12944:	cmp	r0, #0
   12948:	mov	r0, #0
   1294c:	movweq	r0, #3
   12950:	b	12960 <__assert_fail@plt+0x18a0>
   12954:	movw	r0, #33180	; 0x819c
   12958:	movt	r0, #2
   1295c:	ldr	r0, [r0]
   12960:	movw	r1, #33152	; 0x8180
   12964:	movt	r1, #2
   12968:	str	r0, [r1]
   1296c:	bl	12c84 <__assert_fail@plt+0x1bc4>
   12970:	ldr	r1, [r8]
   12974:	add	r0, r1, #1
   12978:	str	r0, [r8]
   1297c:	strb	r5, [r1]
   12980:	ldmib	r4, {r0, r1}
   12984:	cmp	r0, r1
   12988:	bcs	129c4 <__assert_fail@plt+0x1904>
   1298c:	add	r1, r0, #1
   12990:	str	r1, [r4, #4]
   12994:	ldrb	r5, [r0]
   12998:	bl	10fa0 <__ctype_b_loc@plt>
   1299c:	mov	r7, r0
   129a0:	ldr	r0, [r0]
   129a4:	add	r0, r0, r5, lsl #1
   129a8:	ldrb	r0, [r0, #1]
   129ac:	tst	r0, #32
   129b0:	bne	129e4 <__assert_fail@plt+0x1924>
   129b4:	ldr	r1, [r8]
   129b8:	cmp	r1, r6
   129bc:	bne	12974 <__assert_fail@plt+0x18b4>
   129c0:	b	128d4 <__assert_fail@plt+0x1814>
   129c4:	mov	r0, r4
   129c8:	bl	11048 <__uflow@plt>
   129cc:	mov	r5, r0
   129d0:	cmn	r0, #1
   129d4:	bne	12998 <__assert_fail@plt+0x18d8>
   129d8:	mvn	r5, #0
   129dc:	bl	10fa0 <__ctype_b_loc@plt>
   129e0:	mov	r7, r0
   129e4:	ldr	sl, [r9]
   129e8:	ldr	r6, [r8]
   129ec:	movw	r0, #33164	; 0x818c
   129f0:	movt	r0, #2
   129f4:	mov	r1, r0
   129f8:	ldr	r9, [sl]
   129fc:	sub	r2, r6, r9
   12a00:	str	r2, [sl, #4]
   12a04:	str	r2, [sp, #8]
   12a08:	ldr	r0, [r0]
   12a0c:	add	r0, r0, r2
   12a10:	mov	r2, #6
   12a14:	str	r0, [r1]
   12a18:	str	r0, [sp, #16]
   12a1c:	ldrb	r0, [r6, #-1]!
   12a20:	ldrb	r1, [r9]
   12a24:	str	r0, [sp, #12]
   12a28:	movw	r0, #30823	; 0x7867
   12a2c:	movt	r0, #1
   12a30:	bl	11024 <memchr@plt>
   12a34:	ldrb	r1, [sl, #12]
   12a38:	cmp	r0, #0
   12a3c:	ldr	r2, [sp, #12]
   12a40:	str	sl, [sp, #12]
   12a44:	movwne	r0, #1
   12a48:	bic	r1, r1, #1
   12a4c:	orr	r1, r1, r0
   12a50:	strb	r1, [sl, #12]
   12a54:	ldr	r0, [r7]
   12a58:	ldrb	r0, [r0, r2, lsl #1]
   12a5c:	lsr	r0, r0, #2
   12a60:	bfi	r1, r0, #2, #1
   12a64:	ldr	r0, [sp, #8]
   12a68:	strb	r1, [sl, #12]
   12a6c:	movw	sl, #33164	; 0x818c
   12a70:	mov	r7, r1
   12a74:	movt	sl, #2
   12a78:	sub	r0, r0, #1
   12a7c:	cmp	r0, #1
   12a80:	blt	12aa8 <__assert_fail@plt+0x19e8>
   12a84:	ldrb	r1, [r6]
   12a88:	movw	r0, #30829	; 0x786d
   12a8c:	mov	r2, #5
   12a90:	movt	r0, #1
   12a94:	bl	11024 <memchr@plt>
   12a98:	cmp	r0, #0
   12a9c:	subne	r6, r6, #1
   12aa0:	cmpne	r6, r9
   12aa4:	bhi	12a84 <__assert_fail@plt+0x19c4>
   12aa8:	ldrb	r1, [r6]
   12aac:	movw	r0, #30834	; 0x7872
   12ab0:	mov	r2, #4
   12ab4:	movt	r0, #1
   12ab8:	bl	11024 <memchr@plt>
   12abc:	cmp	r0, #0
   12ac0:	and	r1, r7, #253	; 0xfd
   12ac4:	ldr	r6, [sp, #4]
   12ac8:	movw	r9, #33160	; 0x8188
   12acc:	movw	r2, #33148	; 0x817c
   12ad0:	movwne	r0, #1
   12ad4:	movt	r9, #2
   12ad8:	movt	r2, #2
   12adc:	orr	r0, r1, r0, lsl #1
   12ae0:	ldr	r1, [sp, #12]
   12ae4:	strb	r0, [r1, #12]
   12ae8:	cmp	r5, #9
   12aec:	beq	12b04 <__assert_fail@plt+0x1a44>
   12af0:	cmp	r5, #32
   12af4:	bne	12b68 <__assert_fail@plt+0x1aa8>
   12af8:	ldr	r0, [sl]
   12afc:	add	r0, r0, #1
   12b00:	b	12b20 <__assert_fail@plt+0x1a60>
   12b04:	mov	r0, #1
   12b08:	strb	r0, [r2]
   12b0c:	ldr	r0, [sl]
   12b10:	asr	r1, r0, #31
   12b14:	add	r0, r0, r1, lsr #29
   12b18:	bic	r0, r0, #7
   12b1c:	add	r0, r0, #8
   12b20:	str	r0, [sl]
   12b24:	ldmib	r4, {r0, r1}
   12b28:	cmp	r0, r1
   12b2c:	bcs	12b48 <__assert_fail@plt+0x1a88>
   12b30:	add	r1, r0, #1
   12b34:	str	r1, [r4, #4]
   12b38:	ldrb	r5, [r0]
   12b3c:	cmp	r5, #9
   12b40:	bne	12af0 <__assert_fail@plt+0x1a30>
   12b44:	b	12b04 <__assert_fail@plt+0x1a44>
   12b48:	mov	r0, r4
   12b4c:	bl	11048 <__uflow@plt>
   12b50:	movw	r2, #33148	; 0x817c
   12b54:	mov	r5, r0
   12b58:	movt	r2, #2
   12b5c:	cmp	r5, #9
   12b60:	bne	12af0 <__assert_fail@plt+0x1a30>
   12b64:	b	12b04 <__assert_fail@plt+0x1a44>
   12b68:	ldr	r0, [sl]
   12b6c:	ldr	r1, [sp, #16]
   12b70:	cmn	r5, #1
   12b74:	sub	r3, r0, r1
   12b78:	ldr	r1, [r9]
   12b7c:	str	r3, [r1, #8]
   12b80:	ldrb	r2, [r1, #12]
   12b84:	beq	12b9c <__assert_fail@plt+0x1adc>
   12b88:	mov	r7, #0
   12b8c:	tst	r2, #2
   12b90:	beq	12bb4 <__assert_fail@plt+0x1af4>
   12b94:	cmp	r5, #10
   12b98:	bne	12ba8 <__assert_fail@plt+0x1ae8>
   12b9c:	orr	r2, r2, #8
   12ba0:	strb	r2, [r1, #12]
   12ba4:	b	12bdc <__assert_fail@plt+0x1b1c>
   12ba8:	cmp	r3, #1
   12bac:	mov	r7, #0
   12bb0:	movwgt	r7, #1
   12bb4:	and	r2, r2, #247	; 0xf7
   12bb8:	cmp	r5, #10
   12bbc:	orr	r2, r2, r7, lsl #3
   12bc0:	strb	r2, [r1, #12]
   12bc4:	beq	12bdc <__assert_fail@plt+0x1b1c>
   12bc8:	movw	r3, #33120	; 0x8160
   12bcc:	movt	r3, #2
   12bd0:	ldrb	r3, [r3]
   12bd4:	cmp	r3, #1
   12bd8:	bne	12bec <__assert_fail@plt+0x1b2c>
   12bdc:	tst	r2, #8
   12be0:	mov	r2, #2
   12be4:	movweq	r2, #1
   12be8:	str	r2, [r1, #8]
   12bec:	ldr	r2, [sp]
   12bf0:	cmp	r1, r2
   12bf4:	bne	128b0 <__assert_fail@plt+0x17f0>
   12bf8:	movw	r1, #33121	; 0x8161
   12bfc:	movt	r1, #2
   12c00:	ldrb	r1, [r1]
   12c04:	cmp	r1, #1
   12c08:	beq	12890 <__assert_fail@plt+0x17d0>
   12c0c:	movw	r1, #33123	; 0x8163
   12c10:	movt	r1, #2
   12c14:	ldrb	r1, [r1]
   12c18:	cmp	r1, #0
   12c1c:	bne	1289c <__assert_fail@plt+0x17dc>
   12c20:	movw	r2, #33122	; 0x8162
   12c24:	movw	r1, #33180	; 0x819c
   12c28:	movt	r2, #2
   12c2c:	movt	r1, #2
   12c30:	ldrb	r2, [r2]
   12c34:	ldr	r1, [r1]
   12c38:	cmp	r2, #1
   12c3c:	bne	12c6c <__assert_fail@plt+0x1bac>
   12c40:	cmp	r0, r1
   12c44:	bne	1289c <__assert_fail@plt+0x17dc>
   12c48:	movw	r1, #33152	; 0x8180
   12c4c:	movt	r1, #2
   12c50:	ldr	r1, [r1]
   12c54:	cmp	r1, r0
   12c58:	bne	128a8 <__assert_fail@plt+0x17e8>
   12c5c:	cmp	r0, #0
   12c60:	mov	r0, #0
   12c64:	movweq	r0, #3
   12c68:	b	1289c <__assert_fail@plt+0x17dc>
   12c6c:	mov	r0, r1
   12c70:	b	1289c <__assert_fail@plt+0x17dc>
   12c74:	mov	r0, r4
   12c78:	sub	sp, fp, #28
   12c7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c80:	b	123f0 <__assert_fail@plt+0x1330>
   12c84:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12c88:	add	fp, sp, #24
   12c8c:	movw	r9, #33160	; 0x8188
   12c90:	movw	r8, #38192	; 0x9530
   12c94:	movt	r9, #2
   12c98:	movt	r8, #2
   12c9c:	ldr	r6, [r9]
   12ca0:	cmp	r6, r8
   12ca4:	beq	12d04 <__assert_fail@plt+0x1c44>
   12ca8:	bl	125d4 <__assert_fail@plt+0x1514>
   12cac:	ldr	r4, [r8, #24]
   12cb0:	cmp	r4, r6
   12cb4:	beq	12d3c <__assert_fail@plt+0x1c7c>
   12cb8:	ldr	r3, [r4, #20]
   12cbc:	mvn	r2, #-2147483648	; 0x80000000
   12cc0:	mov	r5, r6
   12cc4:	mov	r1, r2
   12cc8:	ldr	r0, [r4, #24]
   12ccc:	ldr	r7, [r0, #20]
   12cd0:	sub	r3, r3, r7
   12cd4:	cmp	r3, r2
   12cd8:	movlt	r1, r3
   12cdc:	cmn	r1, #-2147483639	; 0x80000009
   12ce0:	addlt	r1, r1, #9
   12ce4:	cmp	r3, r2
   12ce8:	mov	r3, r7
   12cec:	movlt	r5, r4
   12cf0:	cmp	r0, r6
   12cf4:	mov	r4, r0
   12cf8:	mov	r2, r1
   12cfc:	bne	12cc8 <__assert_fail@plt+0x1c08>
   12d00:	b	12d40 <__assert_fail@plt+0x1c80>
   12d04:	movw	r5, #38184	; 0x9528
   12d08:	movw	r4, #33184	; 0x81a0
   12d0c:	mov	r1, #1
   12d10:	movt	r5, #2
   12d14:	movt	r4, #2
   12d18:	ldr	r0, [r5]
   12d1c:	sub	r2, r0, r4
   12d20:	movw	r0, #33108	; 0x8154
   12d24:	movt	r0, #2
   12d28:	ldr	r3, [r0]
   12d2c:	mov	r0, r4
   12d30:	bl	10ee0 <fwrite_unlocked@plt>
   12d34:	str	r4, [r5]
   12d38:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12d3c:	mov	r5, r6
   12d40:	movw	r0, #33180	; 0x819c
   12d44:	movt	r0, #2
   12d48:	ldr	r1, [r0]
   12d4c:	mov	r0, r8
   12d50:	bl	12e00 <__assert_fail@plt+0x1d40>
   12d54:	ldr	r6, [r8, #24]
   12d58:	cmp	r6, r5
   12d5c:	beq	12d80 <__assert_fail@plt+0x1cc0>
   12d60:	movw	r4, #33152	; 0x8180
   12d64:	movt	r4, #2
   12d68:	ldr	r1, [r4]
   12d6c:	mov	r0, r6
   12d70:	bl	12e00 <__assert_fail@plt+0x1d40>
   12d74:	ldr	r6, [r6, #24]
   12d78:	cmp	r6, r5
   12d7c:	bne	12d68 <__assert_fail@plt+0x1ca8>
   12d80:	movw	r4, #38184	; 0x9528
   12d84:	ldr	r1, [r5]
   12d88:	movw	r6, #33184	; 0x81a0
   12d8c:	movt	r4, #2
   12d90:	movt	r6, #2
   12d94:	ldr	r7, [r4]
   12d98:	mov	r0, r6
   12d9c:	sub	r2, r7, r1
   12da0:	bl	10e98 <memmove@plt>
   12da4:	ldr	r0, [r5]
   12da8:	sub	r0, r6, r0
   12dac:	ldr	r6, [r9]
   12db0:	add	r1, r7, r0
   12db4:	str	r1, [r4]
   12db8:	cmp	r5, r6
   12dbc:	bhi	12ddc <__assert_fail@plt+0x1d1c>
   12dc0:	mov	r1, r5
   12dc4:	ldr	r2, [r1]
   12dc8:	add	r2, r2, r0
   12dcc:	str	r2, [r1], #28
   12dd0:	ldr	r6, [r9]
   12dd4:	cmp	r1, r6
   12dd8:	bls	12dc4 <__assert_fail@plt+0x1d04>
   12ddc:	sub	r0, r6, r5
   12de0:	mov	r1, r5
   12de4:	add	r2, r0, #28
   12de8:	mov	r0, r8
   12dec:	bl	10e98 <memmove@plt>
   12df0:	sub	r0, r8, r5
   12df4:	add	r0, r6, r0
   12df8:	str	r0, [r9]
   12dfc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12e00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e04:	add	fp, sp, #28
   12e08:	sub	sp, sp, #4
   12e0c:	movw	r2, #33176	; 0x8198
   12e10:	movw	r6, #33148	; 0x817c
   12e14:	movw	sl, #656	; 0x290
   12e18:	movw	r7, #33108	; 0x8154
   12e1c:	mov	r8, r1
   12e20:	mov	r1, #0
   12e24:	str	r0, [sp]
   12e28:	movt	r2, #2
   12e2c:	movt	r6, #2
   12e30:	movt	sl, #3
   12e34:	movt	r7, #2
   12e38:	ldr	r4, [r2]
   12e3c:	ldrb	r2, [r6]
   12e40:	str	r1, [sl]
   12e44:	cmp	r2, #1
   12e48:	bne	12eb8 <__assert_fail@plt+0x1df8>
   12e4c:	cmp	r4, #8
   12e50:	blt	12eb8 <__assert_fail@plt+0x1df8>
   12e54:	asr	r0, r4, #31
   12e58:	mov	r1, #0
   12e5c:	mov	r9, #9
   12e60:	add	r0, r4, r0, lsr #29
   12e64:	bic	r5, r0, #7
   12e68:	ldr	r0, [r7]
   12e6c:	ldr	r2, [r0, #20]
   12e70:	ldr	r3, [r0, #24]
   12e74:	cmp	r2, r3
   12e78:	bcs	12ea8 <__assert_fail@plt+0x1de8>
   12e7c:	add	r3, r2, #1
   12e80:	str	r3, [r0, #20]
   12e84:	strb	r9, [r2]
   12e88:	asr	r0, r1, #31
   12e8c:	add	r0, r1, r0, lsr #29
   12e90:	bic	r0, r0, #7
   12e94:	add	r1, r0, #8
   12e98:	cmp	r1, r5
   12e9c:	str	r1, [sl]
   12ea0:	blt	12e68 <__assert_fail@plt+0x1da8>
   12ea4:	b	12eb8 <__assert_fail@plt+0x1df8>
   12ea8:	mov	r1, #9
   12eac:	bl	11054 <__overflow@plt>
   12eb0:	ldr	r1, [sl]
   12eb4:	b	12e88 <__assert_fail@plt+0x1dc8>
   12eb8:	cmp	r1, r4
   12ebc:	bge	12f08 <__assert_fail@plt+0x1e48>
   12ec0:	mov	r5, #32
   12ec4:	ldr	r0, [r7]
   12ec8:	ldr	r2, [r0, #20]
   12ecc:	ldr	r3, [r0, #24]
   12ed0:	cmp	r2, r3
   12ed4:	bcs	12ef8 <__assert_fail@plt+0x1e38>
   12ed8:	add	r3, r2, #1
   12edc:	str	r3, [r0, #20]
   12ee0:	strb	r5, [r2]
   12ee4:	add	r1, r1, #1
   12ee8:	cmp	r1, r4
   12eec:	str	r1, [sl]
   12ef0:	blt	12ec4 <__assert_fail@plt+0x1e04>
   12ef4:	b	12f08 <__assert_fail@plt+0x1e48>
   12ef8:	mov	r1, #32
   12efc:	bl	11054 <__overflow@plt>
   12f00:	ldr	r1, [sl]
   12f04:	b	12ee4 <__assert_fail@plt+0x1e24>
   12f08:	movw	r0, #33128	; 0x8168
   12f0c:	ldr	r1, [r7]
   12f10:	movt	r0, #2
   12f14:	ldr	r0, [r0]
   12f18:	bl	10e5c <fputs_unlocked@plt>
   12f1c:	movw	r0, #33140	; 0x8174
   12f20:	ldr	r1, [sl]
   12f24:	movw	lr, #33148	; 0x817c
   12f28:	movt	r0, #2
   12f2c:	movt	lr, #2
   12f30:	ldr	r0, [r0]
   12f34:	add	r1, r1, r0
   12f38:	ldrb	r0, [lr]
   12f3c:	str	r1, [sl]
   12f40:	cmp	r0, #1
   12f44:	bne	12fcc <__assert_fail@plt+0x1f0c>
   12f48:	asr	r0, r8, #31
   12f4c:	add	r0, r8, r0, lsr #29
   12f50:	bic	r4, r0, #7
   12f54:	cmp	r1, r4
   12f58:	bge	1302c <__assert_fail@plt+0x1f6c>
   12f5c:	ldr	ip, [sp]
   12f60:	add	r0, r1, #1
   12f64:	cmp	r0, r4
   12f68:	bge	12fd0 <__assert_fail@plt+0x1f10>
   12f6c:	mov	r5, #9
   12f70:	ldr	r0, [r7]
   12f74:	ldr	r2, [r0, #20]
   12f78:	ldr	r3, [r0, #24]
   12f7c:	cmp	r2, r3
   12f80:	bcs	12fb0 <__assert_fail@plt+0x1ef0>
   12f84:	add	r3, r2, #1
   12f88:	str	r3, [r0, #20]
   12f8c:	strb	r5, [r2]
   12f90:	asr	r0, r1, #31
   12f94:	add	r0, r1, r0, lsr #29
   12f98:	bic	r0, r0, #7
   12f9c:	add	r1, r0, #8
   12fa0:	cmp	r1, r4
   12fa4:	str	r1, [sl]
   12fa8:	blt	12f70 <__assert_fail@plt+0x1eb0>
   12fac:	b	12fd0 <__assert_fail@plt+0x1f10>
   12fb0:	mov	r1, #9
   12fb4:	bl	11054 <__overflow@plt>
   12fb8:	ldr	ip, [sp]
   12fbc:	ldr	r1, [sl]
   12fc0:	movw	lr, #33148	; 0x817c
   12fc4:	movt	lr, #2
   12fc8:	b	12f90 <__assert_fail@plt+0x1ed0>
   12fcc:	ldr	ip, [sp]
   12fd0:	cmp	r1, r8
   12fd4:	bge	13038 <__assert_fail@plt+0x1f78>
   12fd8:	mov	r4, #32
   12fdc:	ldr	r0, [r7]
   12fe0:	ldr	r2, [r0, #20]
   12fe4:	ldr	r3, [r0, #24]
   12fe8:	cmp	r2, r3
   12fec:	bcs	13010 <__assert_fail@plt+0x1f50>
   12ff0:	add	r3, r2, #1
   12ff4:	str	r3, [r0, #20]
   12ff8:	strb	r4, [r2]
   12ffc:	add	r1, r1, #1
   13000:	cmp	r1, r8
   13004:	str	r1, [sl]
   13008:	blt	12fdc <__assert_fail@plt+0x1f1c>
   1300c:	b	13038 <__assert_fail@plt+0x1f78>
   13010:	mov	r1, #32
   13014:	bl	11054 <__overflow@plt>
   13018:	ldr	ip, [sp]
   1301c:	ldr	r1, [sl]
   13020:	movw	lr, #33148	; 0x817c
   13024:	movt	lr, #2
   13028:	b	12ffc <__assert_fail@plt+0x1f3c>
   1302c:	ldr	ip, [sp]
   13030:	cmp	r1, r8
   13034:	blt	12fd8 <__assert_fail@plt+0x1f18>
   13038:	ldr	r0, [ip, #24]
   1303c:	mov	r6, #9
   13040:	mov	r4, #32
   13044:	sub	r0, r0, #28
   13048:	str	r0, [sp]
   1304c:	b	13054 <__assert_fail@plt+0x1f94>
   13050:	add	ip, ip, #28
   13054:	ldr	r5, [ip, #4]
   13058:	cmp	r5, #0
   1305c:	beq	130c0 <__assert_fail@plt+0x2000>
   13060:	ldr	r6, [ip]
   13064:	ldr	r0, [r7]
   13068:	ldrb	r1, [r6], #1
   1306c:	ldr	r2, [r0, #20]
   13070:	ldr	r3, [r0, #24]
   13074:	cmp	r2, r3
   13078:	bcs	13094 <__assert_fail@plt+0x1fd4>
   1307c:	add	r3, r2, #1
   13080:	str	r3, [r0, #20]
   13084:	strb	r1, [r2]
   13088:	subs	r5, r5, #1
   1308c:	bne	13064 <__assert_fail@plt+0x1fa4>
   13090:	b	130b0 <__assert_fail@plt+0x1ff0>
   13094:	mov	r8, ip
   13098:	bl	11054 <__overflow@plt>
   1309c:	movw	lr, #33148	; 0x817c
   130a0:	mov	ip, r8
   130a4:	movt	lr, #2
   130a8:	subs	r5, r5, #1
   130ac:	bne	13064 <__assert_fail@plt+0x1fa4>
   130b0:	ldr	r1, [sl]
   130b4:	ldr	r0, [ip, #4]
   130b8:	mov	r6, #9
   130bc:	b	130c4 <__assert_fail@plt+0x2004>
   130c0:	mov	r0, #0
   130c4:	add	r1, r1, r0
   130c8:	ldr	r0, [sp]
   130cc:	str	r1, [sl]
   130d0:	cmp	ip, r0
   130d4:	beq	131c0 <__assert_fail@plt+0x2100>
   130d8:	ldr	r0, [ip, #8]
   130dc:	add	r8, r0, r1
   130e0:	ldrb	r0, [lr]
   130e4:	cmp	r0, #1
   130e8:	bne	1316c <__assert_fail@plt+0x20ac>
   130ec:	asr	r0, r8, #31
   130f0:	add	r0, r8, r0, lsr #29
   130f4:	bic	r9, r0, #7
   130f8:	add	r0, r1, #1
   130fc:	cmp	r0, r9
   13100:	bge	1316c <__assert_fail@plt+0x20ac>
   13104:	cmp	r1, r9
   13108:	bge	1316c <__assert_fail@plt+0x20ac>
   1310c:	ldr	r0, [r7]
   13110:	ldr	r2, [r0, #20]
   13114:	ldr	r3, [r0, #24]
   13118:	cmp	r2, r3
   1311c:	bcs	1314c <__assert_fail@plt+0x208c>
   13120:	add	r3, r2, #1
   13124:	str	r3, [r0, #20]
   13128:	strb	r6, [r2]
   1312c:	asr	r0, r1, #31
   13130:	add	r0, r1, r0, lsr #29
   13134:	bic	r0, r0, #7
   13138:	add	r1, r0, #8
   1313c:	str	r1, [sl]
   13140:	cmp	r1, r9
   13144:	blt	1310c <__assert_fail@plt+0x204c>
   13148:	b	1316c <__assert_fail@plt+0x20ac>
   1314c:	mov	r1, #9
   13150:	mov	r5, ip
   13154:	bl	11054 <__overflow@plt>
   13158:	ldr	r1, [sl]
   1315c:	movw	lr, #33148	; 0x817c
   13160:	mov	ip, r5
   13164:	movt	lr, #2
   13168:	b	1312c <__assert_fail@plt+0x206c>
   1316c:	cmp	r1, r8
   13170:	bge	13050 <__assert_fail@plt+0x1f90>
   13174:	ldr	r0, [r7]
   13178:	ldr	r2, [r0, #20]
   1317c:	ldr	r3, [r0, #24]
   13180:	cmp	r2, r3
   13184:	bcs	131a0 <__assert_fail@plt+0x20e0>
   13188:	add	r3, r2, #1
   1318c:	str	r3, [r0, #20]
   13190:	strb	r4, [r2]
   13194:	add	r1, r1, #1
   13198:	str	r1, [sl]
   1319c:	b	1316c <__assert_fail@plt+0x20ac>
   131a0:	mov	r1, #32
   131a4:	mov	r5, ip
   131a8:	bl	11054 <__overflow@plt>
   131ac:	ldr	r1, [sl]
   131b0:	movw	lr, #33148	; 0x817c
   131b4:	mov	ip, r5
   131b8:	movt	lr, #2
   131bc:	b	13194 <__assert_fail@plt+0x20d4>
   131c0:	movw	r0, #33172	; 0x8194
   131c4:	movt	r0, #2
   131c8:	str	r1, [r0]
   131cc:	ldr	r0, [r7]
   131d0:	ldr	r1, [r0, #20]
   131d4:	ldr	r2, [r0, #24]
   131d8:	cmp	r1, r2
   131dc:	addcc	r2, r1, #1
   131e0:	strcc	r2, [r0, #20]
   131e4:	movcc	r0, #10
   131e8:	strbcc	r0, [r1]
   131ec:	subcc	sp, fp, #28
   131f0:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131f4:	mov	r1, #10
   131f8:	sub	sp, fp, #28
   131fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13200:	b	11054 <__overflow@plt>
   13204:	movw	r1, #660	; 0x294
   13208:	movt	r1, #3
   1320c:	str	r0, [r1]
   13210:	bx	lr
   13214:	movw	r1, #664	; 0x298
   13218:	movt	r1, #3
   1321c:	strb	r0, [r1]
   13220:	bx	lr
   13224:	push	{r4, r5, r6, sl, fp, lr}
   13228:	add	fp, sp, #16
   1322c:	sub	sp, sp, #8
   13230:	movw	r0, #33108	; 0x8154
   13234:	movt	r0, #2
   13238:	ldr	r0, [r0]
   1323c:	bl	16d38 <__assert_fail@plt+0x5c78>
   13240:	cmp	r0, #0
   13244:	beq	1326c <__assert_fail@plt+0x21ac>
   13248:	movw	r0, #664	; 0x298
   1324c:	movt	r0, #3
   13250:	ldrb	r0, [r0]
   13254:	cmp	r0, #0
   13258:	beq	1328c <__assert_fail@plt+0x21cc>
   1325c:	bl	10fdc <__errno_location@plt>
   13260:	ldr	r0, [r0]
   13264:	cmp	r0, #32
   13268:	bne	1328c <__assert_fail@plt+0x21cc>
   1326c:	movw	r0, #33096	; 0x8148
   13270:	movt	r0, #2
   13274:	ldr	r0, [r0]
   13278:	bl	16d38 <__assert_fail@plt+0x5c78>
   1327c:	cmp	r0, #0
   13280:	subeq	sp, fp, #16
   13284:	popeq	{r4, r5, r6, sl, fp, pc}
   13288:	b	132fc <__assert_fail@plt+0x223c>
   1328c:	movw	r1, #31071	; 0x795f
   13290:	mov	r0, #0
   13294:	mov	r2, #5
   13298:	movt	r1, #1
   1329c:	bl	10eec <dcgettext@plt>
   132a0:	mov	r4, r0
   132a4:	movw	r0, #660	; 0x294
   132a8:	movt	r0, #3
   132ac:	ldr	r6, [r0]
   132b0:	bl	10fdc <__errno_location@plt>
   132b4:	ldr	r5, [r0]
   132b8:	cmp	r6, #0
   132bc:	bne	132d8 <__assert_fail@plt+0x2218>
   132c0:	movw	r2, #31087	; 0x796f
   132c4:	mov	r0, #0
   132c8:	mov	r1, r5
   132cc:	mov	r3, r4
   132d0:	movt	r2, #1
   132d4:	b	132f8 <__assert_fail@plt+0x2238>
   132d8:	mov	r0, r6
   132dc:	bl	14db8 <__assert_fail@plt+0x3cf8>
   132e0:	movw	r2, #31083	; 0x796b
   132e4:	mov	r3, r0
   132e8:	str	r4, [sp]
   132ec:	mov	r0, #0
   132f0:	mov	r1, r5
   132f4:	movt	r2, #1
   132f8:	bl	10f58 <error@plt>
   132fc:	movw	r0, #33012	; 0x80f4
   13300:	movt	r0, #2
   13304:	ldr	r0, [r0]
   13308:	bl	10eb0 <_exit@plt>
   1330c:	b	10e80 <posix_fadvise64@plt>
   13310:	cmp	r0, #0
   13314:	bxeq	lr
   13318:	push	{r4, sl, fp, lr}
   1331c:	add	fp, sp, #8
   13320:	sub	sp, sp, #16
   13324:	mov	r4, r1
   13328:	bl	1100c <fileno@plt>
   1332c:	mov	r1, #0
   13330:	mov	r2, #0
   13334:	mov	r3, #0
   13338:	str	r1, [sp]
   1333c:	stmib	sp, {r1, r4}
   13340:	bl	10e80 <posix_fadvise64@plt>
   13344:	sub	sp, fp, #8
   13348:	pop	{r4, sl, fp, pc}
   1334c:	push	{r4, r5, r6, sl, fp, lr}
   13350:	add	fp, sp, #16
   13354:	sub	sp, sp, #8
   13358:	mov	r4, r0
   1335c:	bl	1100c <fileno@plt>
   13360:	cmn	r0, #1
   13364:	ble	133d8 <__assert_fail@plt+0x2318>
   13368:	mov	r0, r4
   1336c:	bl	10f7c <__freading@plt>
   13370:	cmp	r0, #0
   13374:	beq	133a0 <__assert_fail@plt+0x22e0>
   13378:	mov	r0, r4
   1337c:	bl	1100c <fileno@plt>
   13380:	mov	r1, #1
   13384:	mov	r2, #0
   13388:	mov	r3, #0
   1338c:	str	r1, [sp]
   13390:	bl	10f28 <lseek64@plt>
   13394:	and	r0, r0, r1
   13398:	cmn	r0, #1
   1339c:	beq	133d8 <__assert_fail@plt+0x2318>
   133a0:	mov	r0, r4
   133a4:	bl	133e8 <__assert_fail@plt+0x2328>
   133a8:	cmp	r0, #0
   133ac:	beq	133d8 <__assert_fail@plt+0x2318>
   133b0:	bl	10fdc <__errno_location@plt>
   133b4:	ldr	r6, [r0]
   133b8:	mov	r5, r0
   133bc:	mov	r0, r4
   133c0:	bl	11030 <fclose@plt>
   133c4:	cmp	r6, #0
   133c8:	strne	r6, [r5]
   133cc:	mvnne	r0, #0
   133d0:	sub	sp, fp, #16
   133d4:	pop	{r4, r5, r6, sl, fp, pc}
   133d8:	mov	r0, r4
   133dc:	sub	sp, fp, #16
   133e0:	pop	{r4, r5, r6, sl, fp, lr}
   133e4:	b	11030 <fclose@plt>
   133e8:	push	{r4, sl, fp, lr}
   133ec:	add	fp, sp, #8
   133f0:	sub	sp, sp, #8
   133f4:	mov	r4, r0
   133f8:	cmp	r0, #0
   133fc:	beq	13434 <__assert_fail@plt+0x2374>
   13400:	mov	r0, r4
   13404:	bl	10f7c <__freading@plt>
   13408:	cmp	r0, #0
   1340c:	beq	13434 <__assert_fail@plt+0x2374>
   13410:	ldrb	r0, [r4, #1]
   13414:	tst	r0, #1
   13418:	beq	13434 <__assert_fail@plt+0x2374>
   1341c:	mov	r0, #1
   13420:	mov	r2, #0
   13424:	mov	r3, #0
   13428:	str	r0, [sp]
   1342c:	mov	r0, r4
   13430:	bl	13444 <__assert_fail@plt+0x2384>
   13434:	mov	r0, r4
   13438:	sub	sp, fp, #8
   1343c:	pop	{r4, sl, fp, lr}
   13440:	b	10e8c <fflush@plt>
   13444:	push	{r4, r5, r6, r7, fp, lr}
   13448:	add	fp, sp, #16
   1344c:	sub	sp, sp, #8
   13450:	mov	r4, r0
   13454:	ldr	r0, [r0, #4]
   13458:	mov	r5, r3
   1345c:	mov	r6, r2
   13460:	ldr	r1, [r4, #8]
   13464:	cmp	r1, r0
   13468:	bne	13484 <__assert_fail@plt+0x23c4>
   1346c:	ldrd	r0, [r4, #16]
   13470:	cmp	r1, r0
   13474:	bne	13484 <__assert_fail@plt+0x23c4>
   13478:	ldr	r0, [r4, #36]	; 0x24
   1347c:	cmp	r0, #0
   13480:	beq	1349c <__assert_fail@plt+0x23dc>
   13484:	mov	r0, r4
   13488:	mov	r2, r6
   1348c:	mov	r3, r5
   13490:	sub	sp, fp, #16
   13494:	pop	{r4, r5, r6, r7, fp, lr}
   13498:	b	1103c <fseeko64@plt>
   1349c:	ldr	r7, [fp, #8]
   134a0:	mov	r0, r4
   134a4:	bl	1100c <fileno@plt>
   134a8:	mov	r2, r6
   134ac:	mov	r3, r5
   134b0:	str	r7, [sp]
   134b4:	bl	10f28 <lseek64@plt>
   134b8:	and	r2, r0, r1
   134bc:	cmn	r2, #1
   134c0:	beq	134e0 <__assert_fail@plt+0x2420>
   134c4:	strd	r0, [r4, #80]	; 0x50
   134c8:	ldr	r0, [r4]
   134cc:	bic	r0, r0, #16
   134d0:	str	r0, [r4]
   134d4:	mov	r0, #0
   134d8:	sub	sp, fp, #16
   134dc:	pop	{r4, r5, r6, r7, fp, pc}
   134e0:	mvn	r0, #0
   134e4:	sub	sp, fp, #16
   134e8:	pop	{r4, r5, r6, r7, fp, pc}
   134ec:	push	{r4, r5, fp, lr}
   134f0:	add	fp, sp, #8
   134f4:	cmp	r0, #0
   134f8:	beq	1358c <__assert_fail@plt+0x24cc>
   134fc:	mov	r1, #47	; 0x2f
   13500:	mov	r4, r0
   13504:	bl	1106c <strrchr@plt>
   13508:	cmp	r0, #0
   1350c:	mov	r5, r4
   13510:	addne	r5, r0, #1
   13514:	sub	r0, r5, r4
   13518:	cmp	r0, #7
   1351c:	blt	13570 <__assert_fail@plt+0x24b0>
   13520:	movw	r1, #31146	; 0x79aa
   13524:	sub	r0, r5, #7
   13528:	mov	r2, #7
   1352c:	movt	r1, #1
   13530:	bl	110a8 <strncmp@plt>
   13534:	cmp	r0, #0
   13538:	bne	13570 <__assert_fail@plt+0x24b0>
   1353c:	movw	r1, #31154	; 0x79b2
   13540:	mov	r0, r5
   13544:	mov	r2, #3
   13548:	movt	r1, #1
   1354c:	bl	110a8 <strncmp@plt>
   13550:	cmp	r0, #0
   13554:	beq	13560 <__assert_fail@plt+0x24a0>
   13558:	mov	r4, r5
   1355c:	b	13570 <__assert_fail@plt+0x24b0>
   13560:	movw	r0, #33080	; 0x8138
   13564:	add	r4, r5, #3
   13568:	movt	r0, #2
   1356c:	str	r4, [r0]
   13570:	movw	r0, #33084	; 0x813c
   13574:	movt	r0, #2
   13578:	str	r4, [r0]
   1357c:	movw	r0, #668	; 0x29c
   13580:	movt	r0, #3
   13584:	str	r4, [r0]
   13588:	pop	{r4, r5, fp, pc}
   1358c:	movw	r0, #33096	; 0x8148
   13590:	mov	r1, #55	; 0x37
   13594:	mov	r2, #1
   13598:	movt	r0, #2
   1359c:	ldr	r3, [r0]
   135a0:	movw	r0, #31090	; 0x7972
   135a4:	movt	r0, #1
   135a8:	bl	10f1c <fwrite@plt>
   135ac:	bl	110b4 <abort@plt>
   135b0:	push	{r4, r5, r6, sl, fp, lr}
   135b4:	add	fp, sp, #16
   135b8:	mov	r4, r0
   135bc:	movw	r0, #672	; 0x2a0
   135c0:	movt	r0, #3
   135c4:	cmp	r4, #0
   135c8:	moveq	r4, r0
   135cc:	bl	10fdc <__errno_location@plt>
   135d0:	ldr	r6, [r0]
   135d4:	mov	r5, r0
   135d8:	mov	r0, r4
   135dc:	mov	r1, #48	; 0x30
   135e0:	bl	15da4 <__assert_fail@plt+0x4ce4>
   135e4:	str	r6, [r5]
   135e8:	pop	{r4, r5, r6, sl, fp, pc}
   135ec:	movw	r1, #672	; 0x2a0
   135f0:	cmp	r0, #0
   135f4:	movt	r1, #3
   135f8:	movne	r1, r0
   135fc:	ldr	r0, [r1]
   13600:	bx	lr
   13604:	movw	r2, #672	; 0x2a0
   13608:	cmp	r0, #0
   1360c:	movt	r2, #3
   13610:	movne	r2, r0
   13614:	str	r1, [r2]
   13618:	bx	lr
   1361c:	movw	r3, #672	; 0x2a0
   13620:	cmp	r0, #0
   13624:	and	r2, r2, #1
   13628:	movt	r3, #3
   1362c:	movne	r3, r0
   13630:	ubfx	r0, r1, #5, #3
   13634:	and	r1, r1, #31
   13638:	add	ip, r3, r0, lsl #2
   1363c:	mov	r0, #1
   13640:	ldr	r3, [ip, #8]
   13644:	and	r0, r0, r3, lsr r1
   13648:	eor	r2, r0, r2
   1364c:	eor	r1, r3, r2, lsl r1
   13650:	str	r1, [ip, #8]
   13654:	bx	lr
   13658:	movw	r2, #672	; 0x2a0
   1365c:	cmp	r0, #0
   13660:	movt	r2, #3
   13664:	movne	r2, r0
   13668:	ldr	r0, [r2, #4]
   1366c:	str	r1, [r2, #4]
   13670:	bx	lr
   13674:	push	{fp, lr}
   13678:	mov	fp, sp
   1367c:	movw	r3, #672	; 0x2a0
   13680:	cmp	r0, #0
   13684:	movt	r3, #3
   13688:	movne	r3, r0
   1368c:	cmp	r1, #0
   13690:	mov	r0, #10
   13694:	cmpne	r2, #0
   13698:	str	r0, [r3]
   1369c:	bne	136a4 <__assert_fail@plt+0x25e4>
   136a0:	bl	110b4 <abort@plt>
   136a4:	str	r1, [r3, #40]	; 0x28
   136a8:	str	r2, [r3, #44]	; 0x2c
   136ac:	pop	{fp, pc}
   136b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136b4:	add	fp, sp, #28
   136b8:	sub	sp, sp, #20
   136bc:	mov	r7, r0
   136c0:	ldr	r0, [fp, #8]
   136c4:	movw	r5, #672	; 0x2a0
   136c8:	mov	r8, r3
   136cc:	mov	r9, r2
   136d0:	mov	sl, r1
   136d4:	movt	r5, #3
   136d8:	cmp	r0, #0
   136dc:	movne	r5, r0
   136e0:	bl	10fdc <__errno_location@plt>
   136e4:	ldr	r2, [r5, #40]	; 0x28
   136e8:	ldr	r3, [r5, #44]	; 0x2c
   136ec:	mov	r4, r0
   136f0:	ldm	r5, {r0, r1}
   136f4:	add	r5, r5, #8
   136f8:	ldr	r6, [r4]
   136fc:	stm	sp, {r0, r1, r5}
   13700:	mov	r0, r7
   13704:	mov	r1, sl
   13708:	str	r2, [sp, #12]
   1370c:	str	r3, [sp, #16]
   13710:	mov	r2, r9
   13714:	mov	r3, r8
   13718:	bl	13728 <__assert_fail@plt+0x2668>
   1371c:	str	r6, [r4]
   13720:	sub	sp, fp, #28
   13724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13728:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1372c:	add	fp, sp, #28
   13730:	sub	sp, sp, #156	; 0x9c
   13734:	mov	r5, r0
   13738:	add	r0, r2, #1
   1373c:	mov	r6, r1
   13740:	mov	sl, r3
   13744:	str	r2, [fp, #-80]	; 0xffffffb0
   13748:	str	r0, [sp, #72]	; 0x48
   1374c:	ldr	r0, [fp, #12]
   13750:	and	r1, r0, #1
   13754:	str	r1, [sp, #36]	; 0x24
   13758:	and	r1, r0, #4
   1375c:	str	r1, [sp, #32]
   13760:	ubfx	r9, r0, #1, #1
   13764:	bl	10f34 <__ctype_get_mb_cur_max@plt>
   13768:	str	r0, [sp, #40]	; 0x28
   1376c:	ldr	r0, [fp, #24]
   13770:	ldr	r7, [fp, #8]
   13774:	mov	r1, #0
   13778:	str	r5, [fp, #-84]	; 0xffffffac
   1377c:	str	r1, [fp, #-56]	; 0xffffffc8
   13780:	mov	r1, #0
   13784:	str	r1, [sp, #60]	; 0x3c
   13788:	mov	r1, #1
   1378c:	str	r1, [fp, #-48]	; 0xffffffd0
   13790:	str	r0, [sp, #80]	; 0x50
   13794:	ldr	r0, [fp, #20]
   13798:	str	r0, [sp, #76]	; 0x4c
   1379c:	mov	r0, #0
   137a0:	str	r0, [sp, #56]	; 0x38
   137a4:	mov	r0, #0
   137a8:	str	r0, [fp, #-88]	; 0xffffffa8
   137ac:	mov	r0, #0
   137b0:	str	r0, [fp, #-72]	; 0xffffffb8
   137b4:	mov	r0, #0
   137b8:	cmp	r7, #10
   137bc:	bhi	14750 <__assert_fail@plt+0x3690>
   137c0:	add	r1, pc, #24
   137c4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   137c8:	mov	r4, r6
   137cc:	mov	r8, #0
   137d0:	mov	r2, #1
   137d4:	mov	r3, #0
   137d8:	mov	lr, sl
   137dc:	ldr	pc, [r1, r7, lsl #2]
   137e0:	andeq	r3, r1, r4, lsr #17
   137e4:	strdeq	r3, [r1], -r8
   137e8:			; <UNDEFINED> instruction: 0x000138b8
   137ec:	muleq	r1, ip, r8
   137f0:	andeq	r3, r1, ip, ror #17
   137f4:	andeq	r3, r1, r0, lsr #18
   137f8:	andeq	r3, r1, r8, asr #17
   137fc:	andeq	r3, r1, r4, lsr #19
   13800:	andeq	r3, r1, ip, lsl #16
   13804:	andeq	r3, r1, ip, lsl #16
   13808:	andeq	r3, r1, r4, lsr r8
   1380c:	movw	r0, #31234	; 0x7a02
   13810:	mov	r1, r7
   13814:	movt	r0, #1
   13818:	bl	15158 <__assert_fail@plt+0x4098>
   1381c:	str	r0, [sp, #76]	; 0x4c
   13820:	movw	r0, #31236	; 0x7a04
   13824:	mov	r1, r7
   13828:	movt	r0, #1
   1382c:	bl	15158 <__assert_fail@plt+0x4098>
   13830:	str	r0, [sp, #80]	; 0x50
   13834:	mov	r8, #0
   13838:	tst	r9, #1
   1383c:	bne	13874 <__assert_fail@plt+0x27b4>
   13840:	ldr	r0, [sp, #76]	; 0x4c
   13844:	ldrb	r0, [r0]
   13848:	cmp	r0, #0
   1384c:	beq	13874 <__assert_fail@plt+0x27b4>
   13850:	ldr	r1, [sp, #76]	; 0x4c
   13854:	mov	r8, #0
   13858:	add	r1, r1, #1
   1385c:	cmp	r8, r4
   13860:	strbcc	r0, [r5, r8]
   13864:	ldrb	r0, [r1, r8]
   13868:	add	r8, r8, #1
   1386c:	cmp	r0, #0
   13870:	bne	1385c <__assert_fail@plt+0x279c>
   13874:	ldr	r6, [sp, #80]	; 0x50
   13878:	mov	r0, r6
   1387c:	bl	10fc4 <strlen@plt>
   13880:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13884:	str	r0, [fp, #-72]	; 0xffffffb8
   13888:	str	r6, [fp, #-88]	; 0xffffffa8
   1388c:	mov	r2, #1
   13890:	mov	r3, r9
   13894:	mov	lr, sl
   13898:	b	139a4 <__assert_fail@plt+0x28e4>
   1389c:	mov	r0, #1
   138a0:	b	138f8 <__assert_fail@plt+0x2838>
   138a4:	mov	r7, #0
   138a8:	mov	r8, #0
   138ac:	mov	r2, r0
   138b0:	mov	r3, #0
   138b4:	b	139a4 <__assert_fail@plt+0x28e4>
   138b8:	tst	r9, #1
   138bc:	bne	138f8 <__assert_fail@plt+0x2838>
   138c0:	mov	r2, r0
   138c4:	b	13950 <__assert_fail@plt+0x2890>
   138c8:	mov	r0, #1
   138cc:	mov	r8, #0
   138d0:	mov	r7, #5
   138d4:	mov	r2, #1
   138d8:	str	r0, [fp, #-72]	; 0xffffffb8
   138dc:	movw	r0, #30832	; 0x7870
   138e0:	movt	r0, #1
   138e4:	str	r0, [fp, #-88]	; 0xffffffa8
   138e8:	b	13918 <__assert_fail@plt+0x2858>
   138ec:	mov	r2, #1
   138f0:	tst	r9, #1
   138f4:	beq	13950 <__assert_fail@plt+0x2890>
   138f8:	mov	r1, #1
   138fc:	mov	r8, #0
   13900:	mov	r7, #2
   13904:	mov	r2, r0
   13908:	str	r1, [fp, #-72]	; 0xffffffb8
   1390c:	movw	r1, #31236	; 0x7a04
   13910:	movt	r1, #1
   13914:	str	r1, [fp, #-88]	; 0xffffffa8
   13918:	mov	r3, #1
   1391c:	b	139a4 <__assert_fail@plt+0x28e4>
   13920:	tst	r9, #1
   13924:	beq	13974 <__assert_fail@plt+0x28b4>
   13928:	mov	r0, #1
   1392c:	mov	r8, #0
   13930:	mov	r2, #1
   13934:	mov	r3, #1
   13938:	mov	r7, #5
   1393c:	str	r0, [fp, #-72]	; 0xffffffb8
   13940:	movw	r0, #30832	; 0x7870
   13944:	movt	r0, #1
   13948:	str	r0, [fp, #-88]	; 0xffffffa8
   1394c:	b	139a4 <__assert_fail@plt+0x28e4>
   13950:	cmp	r4, #0
   13954:	mov	r8, #1
   13958:	mov	r3, #0
   1395c:	mov	r7, #2
   13960:	movne	r0, #39	; 0x27
   13964:	strbne	r0, [r5]
   13968:	movw	r0, #31236	; 0x7a04
   1396c:	movt	r0, #1
   13970:	b	13998 <__assert_fail@plt+0x28d8>
   13974:	cmp	r4, #0
   13978:	mov	r8, #1
   1397c:	mov	r2, #1
   13980:	mov	r7, #5
   13984:	mov	r3, #0
   13988:	movne	r0, #34	; 0x22
   1398c:	strbne	r0, [r5]
   13990:	movw	r0, #30832	; 0x7870
   13994:	movt	r0, #1
   13998:	str	r0, [fp, #-88]	; 0xffffffa8
   1399c:	mov	r0, #1
   139a0:	str	r0, [fp, #-72]	; 0xffffffb8
   139a4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   139a8:	eor	r6, r3, #1
   139ac:	str	r7, [fp, #-68]	; 0xffffffbc
   139b0:	str	r3, [fp, #-76]	; 0xffffffb4
   139b4:	str	r2, [sp, #84]	; 0x54
   139b8:	str	r6, [sp, #92]	; 0x5c
   139bc:	cmp	r0, #0
   139c0:	movwne	r0, #1
   139c4:	and	r1, r0, r3
   139c8:	and	r1, r2, r1
   139cc:	str	r1, [sp, #48]	; 0x30
   139d0:	sub	r1, r7, #2
   139d4:	clz	r1, r1
   139d8:	lsr	r1, r1, #5
   139dc:	and	r1, r1, r3
   139e0:	str	r1, [sp, #64]	; 0x40
   139e4:	subs	r1, r7, #2
   139e8:	mov	r7, #0
   139ec:	movwne	r1, #1
   139f0:	orr	r6, r1, r6
   139f4:	and	r1, r1, r2
   139f8:	and	r0, r0, r1
   139fc:	str	r6, [sp, #68]	; 0x44
   13a00:	str	r0, [fp, #-60]	; 0xffffffc4
   13a04:	orr	r0, r1, r3
   13a08:	ldr	r1, [fp, #16]
   13a0c:	eor	r0, r0, #1
   13a10:	clz	r1, r1
   13a14:	lsr	r1, r1, #5
   13a18:	orr	r0, r1, r0
   13a1c:	str	r0, [fp, #-64]	; 0xffffffc0
   13a20:	eor	r0, r2, #1
   13a24:	str	r0, [sp, #52]	; 0x34
   13a28:	cmn	lr, #1
   13a2c:	beq	13a3c <__assert_fail@plt+0x297c>
   13a30:	cmp	r7, lr
   13a34:	bne	13a48 <__assert_fail@plt+0x2988>
   13a38:	b	14590 <__assert_fail@plt+0x34d0>
   13a3c:	ldrb	r0, [ip, r7]
   13a40:	cmp	r0, #0
   13a44:	beq	14598 <__assert_fail@plt+0x34d8>
   13a48:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13a4c:	mov	sl, #0
   13a50:	cmp	r0, #0
   13a54:	beq	13a8c <__assert_fail@plt+0x29cc>
   13a58:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13a5c:	add	r5, r7, r0
   13a60:	cmp	r0, #2
   13a64:	bcc	13a80 <__assert_fail@plt+0x29c0>
   13a68:	cmn	lr, #1
   13a6c:	bne	13a80 <__assert_fail@plt+0x29c0>
   13a70:	mov	r0, ip
   13a74:	bl	10fc4 <strlen@plt>
   13a78:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13a7c:	mov	lr, r0
   13a80:	cmp	r5, lr
   13a84:	bls	13a94 <__assert_fail@plt+0x29d4>
   13a88:	ldr	r5, [fp, #-84]	; 0xffffffac
   13a8c:	mov	r0, #0
   13a90:	b	13ae0 <__assert_fail@plt+0x2a20>
   13a94:	ldr	r1, [fp, #-88]	; 0xffffffa8
   13a98:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13a9c:	add	r0, ip, r7
   13aa0:	mov	r6, r4
   13aa4:	mov	r4, lr
   13aa8:	bl	10fb8 <bcmp@plt>
   13aac:	ldr	r2, [sp, #92]	; 0x5c
   13ab0:	cmp	r0, #0
   13ab4:	ldr	r5, [fp, #-84]	; 0xffffffac
   13ab8:	mov	r1, r0
   13abc:	movwne	r1, #1
   13ac0:	orr	r1, r1, r2
   13ac4:	tst	r1, #1
   13ac8:	beq	14620 <__assert_fail@plt+0x3560>
   13acc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13ad0:	clz	r0, r0
   13ad4:	mov	lr, r4
   13ad8:	mov	r4, r6
   13adc:	lsr	r0, r0, #5
   13ae0:	str	r0, [fp, #-52]	; 0xffffffcc
   13ae4:	ldrb	r6, [ip, r7]
   13ae8:	cmp	r6, #126	; 0x7e
   13aec:	bhi	1401c <__assert_fail@plt+0x2f5c>
   13af0:	add	r3, pc, #16
   13af4:	mov	r9, #1
   13af8:	mov	r2, #110	; 0x6e
   13afc:	mov	r0, #97	; 0x61
   13b00:	mov	r1, #0
   13b04:	ldr	pc, [r3, r6, lsl #2]
   13b08:	andeq	r3, r1, ip, ror lr
   13b0c:	andeq	r4, r1, ip, lsl r0
   13b10:	andeq	r4, r1, ip, lsl r0
   13b14:	andeq	r4, r1, ip, lsl r0
   13b18:	andeq	r4, r1, ip, lsl r0
   13b1c:	andeq	r4, r1, ip, lsl r0
   13b20:	andeq	r4, r1, ip, lsl r0
   13b24:	strdeq	r4, [r1], -r8
   13b28:	andeq	r3, r1, ip, asr lr
   13b2c:	andeq	r3, r1, r4, asr lr
   13b30:	andeq	r3, r1, r8, ror #28
   13b34:	andeq	r3, r1, r4, lsl #31
   13b38:	andeq	r3, r1, ip, asr #28
   13b3c:	andeq	r3, r1, r4, ror #28
   13b40:	andeq	r4, r1, ip, lsl r0
   13b44:	andeq	r4, r1, ip, lsl r0
   13b48:	andeq	r4, r1, ip, lsl r0
   13b4c:	andeq	r4, r1, ip, lsl r0
   13b50:	andeq	r4, r1, ip, lsl r0
   13b54:	andeq	r4, r1, ip, lsl r0
   13b58:	andeq	r4, r1, ip, lsl r0
   13b5c:	andeq	r4, r1, ip, lsl r0
   13b60:	andeq	r4, r1, ip, lsl r0
   13b64:	andeq	r4, r1, ip, lsl r0
   13b68:	andeq	r4, r1, ip, lsl r0
   13b6c:	andeq	r4, r1, ip, lsl r0
   13b70:	andeq	r4, r1, ip, lsl r0
   13b74:	andeq	r4, r1, ip, lsl r0
   13b78:	andeq	r4, r1, ip, lsl r0
   13b7c:	andeq	r4, r1, ip, lsl r0
   13b80:	andeq	r4, r1, ip, lsl r0
   13b84:	andeq	r4, r1, ip, lsl r0
   13b88:	andeq	r3, r1, r0, lsl #28
   13b8c:	andeq	r3, r1, r4, lsl #28
   13b90:	andeq	r3, r1, r4, lsl #28
   13b94:	andeq	r3, r1, ip, ror #27
   13b98:	andeq	r3, r1, r4, lsl #28
   13b9c:	andeq	r3, r1, r4, lsl #26
   13ba0:	andeq	r3, r1, r4, lsl #28
   13ba4:	andeq	r3, r1, ip, lsl #31
   13ba8:	andeq	r3, r1, r4, lsl #28
   13bac:	andeq	r3, r1, r4, lsl #28
   13bb0:	andeq	r3, r1, r4, lsl #28
   13bb4:	andeq	r3, r1, r4, lsl #26
   13bb8:	andeq	r3, r1, r4, lsl #26
   13bbc:	andeq	r3, r1, r4, lsl #26
   13bc0:	andeq	r3, r1, r4, lsl #26
   13bc4:	andeq	r3, r1, r4, lsl #26
   13bc8:	andeq	r3, r1, r4, lsl #26
   13bcc:	andeq	r3, r1, r4, lsl #26
   13bd0:	andeq	r3, r1, r4, lsl #26
   13bd4:	andeq	r3, r1, r4, lsl #26
   13bd8:	andeq	r3, r1, r4, lsl #26
   13bdc:	andeq	r3, r1, r4, lsl #26
   13be0:	andeq	r3, r1, r4, lsl #26
   13be4:	andeq	r3, r1, r4, lsl #26
   13be8:	andeq	r3, r1, r4, lsl #26
   13bec:	andeq	r3, r1, r4, lsl #26
   13bf0:	andeq	r3, r1, r4, lsl #26
   13bf4:	andeq	r3, r1, r4, lsl #28
   13bf8:	andeq	r3, r1, r4, lsl #28
   13bfc:	andeq	r3, r1, r4, lsl #28
   13c00:	andeq	r3, r1, r4, lsl #28
   13c04:	andeq	r3, r1, r4, asr pc
   13c08:	andeq	r4, r1, ip, lsl r0
   13c0c:	andeq	r3, r1, r4, lsl #26
   13c10:	andeq	r3, r1, r4, lsl #26
   13c14:	andeq	r3, r1, r4, lsl #26
   13c18:	andeq	r3, r1, r4, lsl #26
   13c1c:	andeq	r3, r1, r4, lsl #26
   13c20:	andeq	r3, r1, r4, lsl #26
   13c24:	andeq	r3, r1, r4, lsl #26
   13c28:	andeq	r3, r1, r4, lsl #26
   13c2c:	andeq	r3, r1, r4, lsl #26
   13c30:	andeq	r3, r1, r4, lsl #26
   13c34:	andeq	r3, r1, r4, lsl #26
   13c38:	andeq	r3, r1, r4, lsl #26
   13c3c:	andeq	r3, r1, r4, lsl #26
   13c40:	andeq	r3, r1, r4, lsl #26
   13c44:	andeq	r3, r1, r4, lsl #26
   13c48:	andeq	r3, r1, r4, lsl #26
   13c4c:	andeq	r3, r1, r4, lsl #26
   13c50:	andeq	r3, r1, r4, lsl #26
   13c54:	andeq	r3, r1, r4, lsl #26
   13c58:	andeq	r3, r1, r4, lsl #26
   13c5c:	andeq	r3, r1, r4, lsl #26
   13c60:	andeq	r3, r1, r4, lsl #26
   13c64:	andeq	r3, r1, r4, lsl #26
   13c68:	andeq	r3, r1, r4, lsl #26
   13c6c:	andeq	r3, r1, r4, lsl #26
   13c70:	andeq	r3, r1, r4, lsl #26
   13c74:	andeq	r3, r1, r4, lsl #28
   13c78:	andeq	r3, r1, ip, lsr #28
   13c7c:	andeq	r3, r1, r4, lsl #26
   13c80:	andeq	r3, r1, r4, lsl #28
   13c84:	andeq	r3, r1, r4, lsl #26
   13c88:	andeq	r3, r1, r4, lsl #28
   13c8c:	andeq	r3, r1, r4, lsl #26
   13c90:	andeq	r3, r1, r4, lsl #26
   13c94:	andeq	r3, r1, r4, lsl #26
   13c98:	andeq	r3, r1, r4, lsl #26
   13c9c:	andeq	r3, r1, r4, lsl #26
   13ca0:	andeq	r3, r1, r4, lsl #26
   13ca4:	andeq	r3, r1, r4, lsl #26
   13ca8:	andeq	r3, r1, r4, lsl #26
   13cac:	andeq	r3, r1, r4, lsl #26
   13cb0:	andeq	r3, r1, r4, lsl #26
   13cb4:	andeq	r3, r1, r4, lsl #26
   13cb8:	andeq	r3, r1, r4, lsl #26
   13cbc:	andeq	r3, r1, r4, lsl #26
   13cc0:	andeq	r3, r1, r4, lsl #26
   13cc4:	andeq	r3, r1, r4, lsl #26
   13cc8:	andeq	r3, r1, r4, lsl #26
   13ccc:	andeq	r3, r1, r4, lsl #26
   13cd0:	andeq	r3, r1, r4, lsl #26
   13cd4:	andeq	r3, r1, r4, lsl #26
   13cd8:	andeq	r3, r1, r4, lsl #26
   13cdc:	andeq	r3, r1, r4, lsl #26
   13ce0:	andeq	r3, r1, r4, lsl #26
   13ce4:	andeq	r3, r1, r4, lsl #26
   13ce8:	andeq	r3, r1, r4, lsl #26
   13cec:	andeq	r3, r1, r4, lsl #26
   13cf0:	andeq	r3, r1, r4, lsl #26
   13cf4:	andeq	r3, r1, r0, asr #27
   13cf8:	andeq	r3, r1, r4, lsl #28
   13cfc:	andeq	r3, r1, r0, asr #27
   13d00:	andeq	r3, r1, ip, ror #27
   13d04:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13d08:	tst	r0, #1
   13d0c:	bne	13d38 <__assert_fail@plt+0x2c78>
   13d10:	ldr	r1, [fp, #16]
   13d14:	ubfx	r0, r6, #5, #3
   13d18:	mov	r2, #1
   13d1c:	ldr	r0, [r1, r0, lsl #2]
   13d20:	and	r1, r6, #31
   13d24:	tst	r0, r2, lsl r1
   13d28:	beq	13d38 <__assert_fail@plt+0x2c78>
   13d2c:	mov	r0, r6
   13d30:	mov	r1, r9
   13d34:	b	13d4c <__assert_fail@plt+0x2c8c>
   13d38:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13d3c:	mov	r1, r9
   13d40:	cmp	r0, #0
   13d44:	mov	r0, r6
   13d48:	beq	1408c <__assert_fail@plt+0x2fcc>
   13d4c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13d50:	tst	r2, #1
   13d54:	bne	1465c <__assert_fail@plt+0x359c>
   13d58:	ldr	r2, [fp, #-68]	; 0xffffffbc
   13d5c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13d60:	subs	r2, r2, #2
   13d64:	movwne	r2, #1
   13d68:	orr	r2, r2, r3
   13d6c:	tst	r2, #1
   13d70:	bne	13dac <__assert_fail@plt+0x2cec>
   13d74:	cmp	r8, r4
   13d78:	movcc	r2, #39	; 0x27
   13d7c:	strbcc	r2, [r5, r8]
   13d80:	add	r2, r8, #1
   13d84:	cmp	r2, r4
   13d88:	movcc	r3, #36	; 0x24
   13d8c:	strbcc	r3, [r5, r2]
   13d90:	add	r2, r8, #2
   13d94:	add	r8, r8, #3
   13d98:	cmp	r2, r4
   13d9c:	movcc	r3, #39	; 0x27
   13da0:	strbcc	r3, [r5, r2]
   13da4:	mov	r2, #1
   13da8:	str	r2, [fp, #-56]	; 0xffffffc8
   13dac:	cmp	r8, r4
   13db0:	movcc	r2, #92	; 0x5c
   13db4:	strbcc	r2, [r5, r8]
   13db8:	add	r8, r8, #1
   13dbc:	b	140d0 <__assert_fail@plt+0x3010>
   13dc0:	cmp	lr, #1
   13dc4:	beq	13dec <__assert_fail@plt+0x2d2c>
   13dc8:	mov	r9, #0
   13dcc:	cmn	lr, #1
   13dd0:	bne	13df8 <__assert_fail@plt+0x2d38>
   13dd4:	ldrb	r0, [ip, #1]
   13dd8:	cmp	r0, #0
   13ddc:	beq	13dec <__assert_fail@plt+0x2d2c>
   13de0:	mvn	lr, #0
   13de4:	mov	sl, #0
   13de8:	b	13d04 <__assert_fail@plt+0x2c44>
   13dec:	mov	r9, #0
   13df0:	cmp	r7, #0
   13df4:	beq	13e00 <__assert_fail@plt+0x2d40>
   13df8:	mov	sl, #0
   13dfc:	b	13d04 <__assert_fail@plt+0x2c44>
   13e00:	mov	r1, #1
   13e04:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13e08:	cmp	r0, #2
   13e0c:	bne	13e24 <__assert_fail@plt+0x2d64>
   13e10:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13e14:	mov	r9, r1
   13e18:	tst	r0, #1
   13e1c:	beq	13d04 <__assert_fail@plt+0x2c44>
   13e20:	b	1465c <__assert_fail@plt+0x359c>
   13e24:	mov	r9, r1
   13e28:	b	13d04 <__assert_fail@plt+0x2c44>
   13e2c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13e30:	cmp	r0, #2
   13e34:	bne	14070 <__assert_fail@plt+0x2fb0>
   13e38:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13e3c:	tst	r0, #1
   13e40:	bne	1465c <__assert_fail@plt+0x359c>
   13e44:	mov	sl, #0
   13e48:	b	14084 <__assert_fail@plt+0x2fc4>
   13e4c:	mov	r0, #102	; 0x66
   13e50:	b	140f8 <__assert_fail@plt+0x3038>
   13e54:	mov	r2, #116	; 0x74
   13e58:	b	13e68 <__assert_fail@plt+0x2da8>
   13e5c:	mov	r0, #98	; 0x62
   13e60:	b	140f8 <__assert_fail@plt+0x3038>
   13e64:	mov	r2, #114	; 0x72
   13e68:	ldr	r0, [sp, #68]	; 0x44
   13e6c:	tst	r0, #1
   13e70:	mov	r0, r2
   13e74:	bne	140f8 <__assert_fail@plt+0x3038>
   13e78:	b	1465c <__assert_fail@plt+0x359c>
   13e7c:	ldr	r0, [sp, #84]	; 0x54
   13e80:	tst	r0, #1
   13e84:	beq	14114 <__assert_fail@plt+0x3054>
   13e88:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13e8c:	tst	r0, #1
   13e90:	bne	14748 <__assert_fail@plt+0x3688>
   13e94:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13e98:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13e9c:	subs	r0, r0, #2
   13ea0:	movwne	r0, #1
   13ea4:	orr	r0, r0, r1
   13ea8:	tst	r0, #1
   13eac:	bne	13ee8 <__assert_fail@plt+0x2e28>
   13eb0:	cmp	r8, r4
   13eb4:	movcc	r0, #39	; 0x27
   13eb8:	strbcc	r0, [r5, r8]
   13ebc:	add	r0, r8, #1
   13ec0:	cmp	r0, r4
   13ec4:	movcc	r1, #36	; 0x24
   13ec8:	strbcc	r1, [r5, r0]
   13ecc:	add	r0, r8, #2
   13ed0:	add	r8, r8, #3
   13ed4:	cmp	r0, r4
   13ed8:	movcc	r1, #39	; 0x27
   13edc:	strbcc	r1, [r5, r0]
   13ee0:	mov	r0, #1
   13ee4:	str	r0, [fp, #-56]	; 0xffffffc8
   13ee8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13eec:	cmp	r8, r4
   13ef0:	mov	r9, #0
   13ef4:	mov	sl, #1
   13ef8:	mov	r6, #48	; 0x30
   13efc:	movcc	r0, #92	; 0x5c
   13f00:	strbcc	r0, [r5, r8]
   13f04:	add	r0, r8, #1
   13f08:	cmp	r1, #2
   13f0c:	beq	142dc <__assert_fail@plt+0x321c>
   13f10:	add	r1, r7, #1
   13f14:	cmp	r1, lr
   13f18:	bcs	142dc <__assert_fail@plt+0x321c>
   13f1c:	ldrb	r1, [ip, r1]
   13f20:	sub	r1, r1, #48	; 0x30
   13f24:	uxtb	r1, r1
   13f28:	cmp	r1, #9
   13f2c:	bhi	142dc <__assert_fail@plt+0x321c>
   13f30:	cmp	r0, r4
   13f34:	movcc	r1, #48	; 0x30
   13f38:	strbcc	r1, [r5, r0]
   13f3c:	add	r0, r8, #2
   13f40:	add	r8, r8, #3
   13f44:	cmp	r0, r4
   13f48:	movcc	r1, #48	; 0x30
   13f4c:	strbcc	r1, [r5, r0]
   13f50:	b	13d04 <__assert_fail@plt+0x2c44>
   13f54:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13f58:	mov	sl, #0
   13f5c:	mov	r6, #63	; 0x3f
   13f60:	cmp	r0, #5
   13f64:	beq	142e4 <__assert_fail@plt+0x3224>
   13f68:	cmp	r0, #2
   13f6c:	bne	1438c <__assert_fail@plt+0x32cc>
   13f70:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13f74:	mov	r9, #0
   13f78:	tst	r0, #1
   13f7c:	beq	13d04 <__assert_fail@plt+0x2c44>
   13f80:	b	1465c <__assert_fail@plt+0x359c>
   13f84:	mov	r0, #118	; 0x76
   13f88:	b	140f8 <__assert_fail@plt+0x3038>
   13f8c:	mov	r0, #1
   13f90:	mov	r6, #39	; 0x27
   13f94:	str	r0, [sp, #60]	; 0x3c
   13f98:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13f9c:	cmp	r0, #2
   13fa0:	bne	14130 <__assert_fail@plt+0x3070>
   13fa4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13fa8:	tst	r0, #1
   13fac:	bne	1465c <__assert_fail@plt+0x359c>
   13fb0:	ldr	r2, [sp, #56]	; 0x38
   13fb4:	clz	r1, r4
   13fb8:	mov	sl, #0
   13fbc:	mov	r9, #1
   13fc0:	lsr	r1, r1, #5
   13fc4:	cmp	r2, #0
   13fc8:	mov	r0, r2
   13fcc:	movwne	r0, #1
   13fd0:	orrs	r0, r0, r1
   13fd4:	moveq	r2, r4
   13fd8:	moveq	r4, r0
   13fdc:	cmp	r8, r4
   13fe0:	str	r2, [sp, #56]	; 0x38
   13fe4:	movcc	r0, #39	; 0x27
   13fe8:	strbcc	r0, [r5, r8]
   13fec:	add	r0, r8, #1
   13ff0:	cmp	r0, r4
   13ff4:	movcc	r1, #92	; 0x5c
   13ff8:	strbcc	r1, [r5, r0]
   13ffc:	add	r0, r8, #2
   14000:	add	r8, r8, #3
   14004:	cmp	r0, r4
   14008:	movcc	r1, #39	; 0x27
   1400c:	strbcc	r1, [r5, r0]
   14010:	mov	r0, #0
   14014:	str	r0, [fp, #-56]	; 0xffffffc8
   14018:	b	13d04 <__assert_fail@plt+0x2c44>
   1401c:	ldr	r0, [sp, #40]	; 0x28
   14020:	str	r4, [sp, #88]	; 0x58
   14024:	cmp	r0, #1
   14028:	bne	14138 <__assert_fail@plt+0x3078>
   1402c:	str	lr, [sp, #28]
   14030:	bl	10fa0 <__ctype_b_loc@plt>
   14034:	ldr	r0, [r0]
   14038:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1403c:	mov	r2, #1
   14040:	add	r0, r0, r6, lsl #1
   14044:	ldrb	r0, [r0, #1]
   14048:	ubfx	r9, r0, #6, #1
   1404c:	ldr	r0, [sp, #52]	; 0x34
   14050:	cmp	r2, #1
   14054:	orr	r0, r9, r0
   14058:	bhi	14394 <__assert_fail@plt+0x32d4>
   1405c:	tst	r0, #1
   14060:	beq	14394 <__assert_fail@plt+0x32d4>
   14064:	ldr	lr, [sp, #28]
   14068:	ldr	r4, [sp, #88]	; 0x58
   1406c:	b	13d04 <__assert_fail@plt+0x2c44>
   14070:	ldr	r1, [sp, #48]	; 0x30
   14074:	mov	sl, #0
   14078:	mov	r0, #92	; 0x5c
   1407c:	cmp	r1, #0
   14080:	beq	140f8 <__assert_fail@plt+0x3038>
   14084:	mov	r6, #92	; 0x5c
   14088:	mov	r9, #0
   1408c:	cmp	sl, #0
   14090:	bne	140c8 <__assert_fail@plt+0x3008>
   14094:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14098:	tst	r0, #1
   1409c:	beq	140c8 <__assert_fail@plt+0x3008>
   140a0:	cmp	r8, r4
   140a4:	movcc	r0, #39	; 0x27
   140a8:	strbcc	r0, [r5, r8]
   140ac:	add	r0, r8, #1
   140b0:	add	r8, r8, #2
   140b4:	cmp	r0, r4
   140b8:	movcc	r1, #39	; 0x27
   140bc:	strbcc	r1, [r5, r0]
   140c0:	mov	r0, #0
   140c4:	str	r0, [fp, #-56]	; 0xffffffc8
   140c8:	mov	r1, r9
   140cc:	mov	r0, r6
   140d0:	cmp	r8, r4
   140d4:	strbcc	r0, [r5, r8]
   140d8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   140dc:	add	r8, r8, #1
   140e0:	and	r0, r0, r1
   140e4:	str	r0, [fp, #-48]	; 0xffffffd0
   140e8:	add	r7, r7, #1
   140ec:	cmn	lr, #1
   140f0:	bne	13a30 <__assert_fail@plt+0x2970>
   140f4:	b	13a3c <__assert_fail@plt+0x297c>
   140f8:	ldr	r1, [sp, #84]	; 0x54
   140fc:	mov	sl, #0
   14100:	mov	r9, #0
   14104:	tst	r1, #1
   14108:	mov	r1, #0
   1410c:	beq	13d04 <__assert_fail@plt+0x2c44>
   14110:	b	13d4c <__assert_fail@plt+0x2c8c>
   14114:	ldr	r0, [sp, #36]	; 0x24
   14118:	mov	r6, #0
   1411c:	mov	sl, #0
   14120:	mov	r9, #0
   14124:	cmp	r0, #0
   14128:	beq	13d04 <__assert_fail@plt+0x2c44>
   1412c:	b	140e8 <__assert_fail@plt+0x3028>
   14130:	mov	r9, #1
   14134:	b	13d04 <__assert_fail@plt+0x2c44>
   14138:	mov	r0, #0
   1413c:	cmn	lr, #1
   14140:	sub	r4, fp, #40	; 0x28
   14144:	str	r0, [fp, #-36]	; 0xffffffdc
   14148:	str	r0, [fp, #-40]	; 0xffffffd8
   1414c:	bne	14160 <__assert_fail@plt+0x30a0>
   14150:	mov	r0, ip
   14154:	bl	10fc4 <strlen@plt>
   14158:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1415c:	mov	lr, r0
   14160:	ldr	r0, [sp, #72]	; 0x48
   14164:	mov	r9, #1
   14168:	mov	r2, #0
   1416c:	str	lr, [sp, #28]
   14170:	add	r0, r0, r7
   14174:	str	r0, [sp, #20]
   14178:	b	141bc <__assert_fail@plt+0x30fc>
   1417c:	ldr	r5, [sp, #44]	; 0x2c
   14180:	add	r5, r0, r5
   14184:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14188:	bl	10f10 <iswprint@plt>
   1418c:	cmp	r0, #0
   14190:	sub	r4, fp, #40	; 0x28
   14194:	movwne	r0, #1
   14198:	and	r9, r9, r0
   1419c:	mov	r0, r4
   141a0:	bl	10ed4 <mbsinit@plt>
   141a4:	mov	r2, r5
   141a8:	ldr	lr, [sp, #28]
   141ac:	ldr	r5, [fp, #-84]	; 0xffffffac
   141b0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   141b4:	cmp	r0, #0
   141b8:	bne	1404c <__assert_fail@plt+0x2f8c>
   141bc:	add	r0, r2, r7
   141c0:	str	r2, [sp, #44]	; 0x2c
   141c4:	mov	r3, r4
   141c8:	add	r1, ip, r0
   141cc:	str	r0, [sp, #24]
   141d0:	sub	r2, lr, r0
   141d4:	sub	r0, fp, #44	; 0x2c
   141d8:	bl	16e1c <__assert_fail@plt+0x5d5c>
   141dc:	cmp	r0, #0
   141e0:	beq	14584 <__assert_fail@plt+0x34c4>
   141e4:	cmn	r0, #1
   141e8:	beq	14540 <__assert_fail@plt+0x3480>
   141ec:	ldr	lr, [sp, #28]
   141f0:	cmn	r0, #2
   141f4:	beq	14548 <__assert_fail@plt+0x3488>
   141f8:	ldr	r2, [sp, #64]	; 0x40
   141fc:	ldr	r4, [sp, #88]	; 0x58
   14200:	ldr	ip, [sp, #84]	; 0x54
   14204:	cmp	r0, #2
   14208:	mov	r1, #0
   1420c:	movwcc	r1, #1
   14210:	eor	r2, r2, #1
   14214:	orrs	r1, r2, r1
   14218:	bne	1417c <__assert_fail@plt+0x30bc>
   1421c:	ldr	r1, [sp, #44]	; 0x2c
   14220:	ldr	r2, [sp, #20]
   14224:	add	r1, r2, r1
   14228:	sub	r2, r0, #1
   1422c:	b	1423c <__assert_fail@plt+0x317c>
   14230:	add	r1, r1, #1
   14234:	subs	r2, r2, #1
   14238:	beq	1417c <__assert_fail@plt+0x30bc>
   1423c:	ldrb	r3, [r1]
   14240:	sub	r3, r3, #91	; 0x5b
   14244:	cmp	r3, #33	; 0x21
   14248:	bhi	14230 <__assert_fail@plt+0x3170>
   1424c:	add	r5, pc, #0
   14250:	ldr	pc, [r5, r3, lsl #2]
   14254:	andeq	r4, r1, r8, lsr r6
   14258:	andeq	r4, r1, r8, lsr r6
   1425c:	andeq	r4, r1, r0, lsr r2
   14260:	andeq	r4, r1, r8, lsr r6
   14264:	andeq	r4, r1, r0, lsr r2
   14268:	andeq	r4, r1, r8, lsr r6
   1426c:	andeq	r4, r1, r0, lsr r2
   14270:	andeq	r4, r1, r0, lsr r2
   14274:	andeq	r4, r1, r0, lsr r2
   14278:	andeq	r4, r1, r0, lsr r2
   1427c:	andeq	r4, r1, r0, lsr r2
   14280:	andeq	r4, r1, r0, lsr r2
   14284:	andeq	r4, r1, r0, lsr r2
   14288:	andeq	r4, r1, r0, lsr r2
   1428c:	andeq	r4, r1, r0, lsr r2
   14290:	andeq	r4, r1, r0, lsr r2
   14294:	andeq	r4, r1, r0, lsr r2
   14298:	andeq	r4, r1, r0, lsr r2
   1429c:	andeq	r4, r1, r0, lsr r2
   142a0:	andeq	r4, r1, r0, lsr r2
   142a4:	andeq	r4, r1, r0, lsr r2
   142a8:	andeq	r4, r1, r0, lsr r2
   142ac:	andeq	r4, r1, r0, lsr r2
   142b0:	andeq	r4, r1, r0, lsr r2
   142b4:	andeq	r4, r1, r0, lsr r2
   142b8:	andeq	r4, r1, r0, lsr r2
   142bc:	andeq	r4, r1, r0, lsr r2
   142c0:	andeq	r4, r1, r0, lsr r2
   142c4:	andeq	r4, r1, r0, lsr r2
   142c8:	andeq	r4, r1, r0, lsr r2
   142cc:	andeq	r4, r1, r0, lsr r2
   142d0:	andeq	r4, r1, r0, lsr r2
   142d4:	andeq	r4, r1, r0, lsr r2
   142d8:	andeq	r4, r1, r8, lsr r6
   142dc:	mov	r8, r0
   142e0:	b	13d04 <__assert_fail@plt+0x2c44>
   142e4:	ldr	r0, [sp, #32]
   142e8:	cmp	r0, #0
   142ec:	beq	1438c <__assert_fail@plt+0x32cc>
   142f0:	add	r0, r7, #2
   142f4:	cmp	r0, lr
   142f8:	bcs	1438c <__assert_fail@plt+0x32cc>
   142fc:	add	r1, r7, ip
   14300:	ldrb	r1, [r1, #1]
   14304:	cmp	r1, #63	; 0x3f
   14308:	bne	1438c <__assert_fail@plt+0x32cc>
   1430c:	ldrb	r9, [ip, r0]
   14310:	sub	r2, r9, #33	; 0x21
   14314:	cmp	r2, #29
   14318:	bhi	1438c <__assert_fail@plt+0x32cc>
   1431c:	movw	r1, #20929	; 0x51c1
   14320:	mov	r3, #1
   14324:	movt	r1, #14336	; 0x3800
   14328:	tst	r1, r3, lsl r2
   1432c:	beq	1438c <__assert_fail@plt+0x32cc>
   14330:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14334:	tst	r1, #1
   14338:	bne	1465c <__assert_fail@plt+0x359c>
   1433c:	cmp	r8, r4
   14340:	add	r2, r8, #1
   14344:	mov	r6, r9
   14348:	mov	r7, r0
   1434c:	mov	r9, #0
   14350:	movcc	r1, #63	; 0x3f
   14354:	strbcc	r1, [r5, r8]
   14358:	cmp	r2, r4
   1435c:	movcc	r1, #34	; 0x22
   14360:	strbcc	r1, [r5, r2]
   14364:	add	r2, r8, #2
   14368:	cmp	r2, r4
   1436c:	movcc	r1, #34	; 0x22
   14370:	strbcc	r1, [r5, r2]
   14374:	add	r2, r8, #3
   14378:	add	r8, r8, #4
   1437c:	cmp	r2, r4
   14380:	movcc	r1, #63	; 0x3f
   14384:	strbcc	r1, [r5, r2]
   14388:	b	13d04 <__assert_fail@plt+0x2c44>
   1438c:	mov	r9, #0
   14390:	b	13d04 <__assert_fail@plt+0x2c44>
   14394:	ldr	lr, [sp, #28]
   14398:	ldr	r4, [fp, #-56]	; 0xffffffc8
   1439c:	add	r1, r2, r7
   143a0:	mov	r2, #0
   143a4:	str	r1, [sp, #44]	; 0x2c
   143a8:	tst	r0, #1
   143ac:	bne	144c8 <__assert_fail@plt+0x3408>
   143b0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   143b4:	tst	r1, #1
   143b8:	bne	14658 <__assert_fail@plt+0x3598>
   143bc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   143c0:	subs	r2, r1, #2
   143c4:	movwne	r2, #1
   143c8:	orr	r2, r2, r4
   143cc:	tst	r2, #1
   143d0:	bne	14414 <__assert_fail@plt+0x3354>
   143d4:	ldr	r1, [sp, #88]	; 0x58
   143d8:	add	r2, r8, #1
   143dc:	mov	r4, #1
   143e0:	cmp	r8, r1
   143e4:	movcc	r1, #39	; 0x27
   143e8:	strbcc	r1, [r5, r8]
   143ec:	ldr	r1, [sp, #88]	; 0x58
   143f0:	cmp	r2, r1
   143f4:	movcc	r1, #36	; 0x24
   143f8:	strbcc	r1, [r5, r2]
   143fc:	ldr	r1, [sp, #88]	; 0x58
   14400:	add	r2, r8, #2
   14404:	add	r8, r8, #3
   14408:	cmp	r2, r1
   1440c:	movcc	r1, #39	; 0x27
   14410:	strbcc	r1, [r5, r2]
   14414:	ldr	r1, [sp, #88]	; 0x58
   14418:	add	r2, r8, #1
   1441c:	cmp	r8, r1
   14420:	movcc	r1, #92	; 0x5c
   14424:	strbcc	r1, [r5, r8]
   14428:	ldr	r1, [sp, #88]	; 0x58
   1442c:	cmp	r2, r1
   14430:	bcs	14444 <__assert_fail@plt+0x3384>
   14434:	uxtb	r3, r6
   14438:	mov	r1, #48	; 0x30
   1443c:	orr	r3, r1, r3, lsr #6
   14440:	strb	r3, [r5, r2]
   14444:	ldr	r1, [sp, #88]	; 0x58
   14448:	add	r2, r8, #2
   1444c:	add	r8, r8, #3
   14450:	cmp	r2, r1
   14454:	lsrcc	r3, r6, #3
   14458:	movcc	r1, #6
   1445c:	bficc	r3, r1, #3, #29
   14460:	mov	r1, #6
   14464:	bfi	r6, r1, #3, #29
   14468:	strbcc	r3, [r5, r2]
   1446c:	mov	r2, #1
   14470:	b	144f0 <__assert_fail@plt+0x3430>
   14474:	ldr	r1, [sp, #88]	; 0x58
   14478:	ldr	r5, [fp, #-84]	; 0xffffffac
   1447c:	ldr	r4, [sp, #88]	; 0x58
   14480:	cmp	r8, r1
   14484:	movcc	r1, #39	; 0x27
   14488:	strbcc	r1, [r5, r8]
   1448c:	add	r1, r8, #1
   14490:	add	r8, r8, #2
   14494:	cmp	r1, r4
   14498:	movcc	r4, #39	; 0x27
   1449c:	strbcc	r4, [r5, r1]
   144a0:	mov	r4, #0
   144a4:	ldr	r1, [sp, #88]	; 0x58
   144a8:	cmp	r8, r1
   144ac:	ldr	r1, [sp, #72]	; 0x48
   144b0:	strbcc	r6, [r5, r8]
   144b4:	add	r8, r8, #1
   144b8:	ldrb	r6, [r1, r7]
   144bc:	mov	r7, r3
   144c0:	tst	r0, #1
   144c4:	beq	143b0 <__assert_fail@plt+0x32f0>
   144c8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   144cc:	tst	r1, #1
   144d0:	beq	144e8 <__assert_fail@plt+0x3428>
   144d4:	ldr	r1, [sp, #88]	; 0x58
   144d8:	cmp	r8, r1
   144dc:	movcc	r1, #92	; 0x5c
   144e0:	strbcc	r1, [r5, r8]
   144e4:	add	r8, r8, #1
   144e8:	mov	r1, #0
   144ec:	str	r1, [fp, #-52]	; 0xffffffcc
   144f0:	ldr	r1, [sp, #44]	; 0x2c
   144f4:	add	r3, r7, #1
   144f8:	and	sl, r2, #1
   144fc:	cmp	r1, r3
   14500:	bls	14524 <__assert_fail@plt+0x3464>
   14504:	cmp	sl, #0
   14508:	mvn	r5, r4
   1450c:	movwne	sl, #1
   14510:	orr	r5, r5, sl
   14514:	tst	r5, #1
   14518:	beq	14474 <__assert_fail@plt+0x33b4>
   1451c:	ldr	r5, [fp, #-84]	; 0xffffffac
   14520:	b	144a4 <__assert_fail@plt+0x33e4>
   14524:	str	r4, [fp, #-56]	; 0xffffffc8
   14528:	ldr	r4, [sp, #88]	; 0x58
   1452c:	cmp	sl, #0
   14530:	movwne	sl, #1
   14534:	cmp	sl, #0
   14538:	beq	14094 <__assert_fail@plt+0x2fd4>
   1453c:	b	140c8 <__assert_fail@plt+0x3008>
   14540:	mov	r9, #0
   14544:	b	14584 <__assert_fail@plt+0x34c4>
   14548:	ldr	r0, [sp, #24]
   1454c:	mov	r9, #0
   14550:	cmp	lr, r0
   14554:	bls	14584 <__assert_fail@plt+0x34c4>
   14558:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1455c:	ldr	r2, [sp, #44]	; 0x2c
   14560:	add	r0, ip, r7
   14564:	ldrb	r1, [r0, r2]
   14568:	cmp	r1, #0
   1456c:	beq	1404c <__assert_fail@plt+0x2f8c>
   14570:	add	r2, r2, #1
   14574:	add	r1, r7, r2
   14578:	cmp	r1, lr
   1457c:	bcc	14564 <__assert_fail@plt+0x34a4>
   14580:	b	1404c <__assert_fail@plt+0x2f8c>
   14584:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14588:	ldr	r2, [sp, #44]	; 0x2c
   1458c:	b	1404c <__assert_fail@plt+0x2f8c>
   14590:	mov	lr, r7
   14594:	b	1459c <__assert_fail@plt+0x34dc>
   14598:	mvn	lr, #0
   1459c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   145a0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   145a4:	eor	r0, r1, #2
   145a8:	orr	r0, r0, r8
   145ac:	clz	r0, r0
   145b0:	lsr	r0, r0, #5
   145b4:	tst	r2, r0
   145b8:	bne	1465c <__assert_fail@plt+0x359c>
   145bc:	subs	r0, r1, #2
   145c0:	movwne	r0, #1
   145c4:	orr	r0, r2, r0
   145c8:	tst	r0, #1
   145cc:	ldreq	r0, [sp, #60]	; 0x3c
   145d0:	eoreq	r0, r0, #1
   145d4:	tsteq	r0, #1
   145d8:	bne	146f0 <__assert_fail@plt+0x3630>
   145dc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   145e0:	mov	sl, lr
   145e4:	tst	r0, #1
   145e8:	bne	146bc <__assert_fail@plt+0x35fc>
   145ec:	ldr	r6, [sp, #56]	; 0x38
   145f0:	mov	r9, #0
   145f4:	cmp	r6, #0
   145f8:	beq	146e8 <__assert_fail@plt+0x3628>
   145fc:	ldr	r0, [sp, #84]	; 0x54
   14600:	mov	r1, #0
   14604:	mov	r7, #2
   14608:	cmp	r4, #0
   1460c:	str	r1, [fp, #-48]	; 0xffffffd0
   14610:	mov	r1, #0
   14614:	str	r1, [fp, #-76]	; 0xffffffb4
   14618:	beq	137b8 <__assert_fail@plt+0x26f8>
   1461c:	b	146f0 <__assert_fail@plt+0x3630>
   14620:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14624:	ldr	r1, [fp, #12]
   14628:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1462c:	mov	lr, r4
   14630:	mov	r4, r6
   14634:	b	1467c <__assert_fail@plt+0x35bc>
   14638:	tst	ip, #1
   1463c:	ldr	r5, [fp, #-84]	; 0xffffffac
   14640:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14644:	ldr	r1, [fp, #12]
   14648:	mov	r0, #2
   1464c:	movwne	r0, #4
   14650:	mov	r2, r0
   14654:	b	1467c <__assert_fail@plt+0x35bc>
   14658:	ldr	r4, [sp, #88]	; 0x58
   1465c:	ldr	r1, [sp, #84]	; 0x54
   14660:	mov	r0, #2
   14664:	tst	r1, #1
   14668:	movwne	r0, #4
   1466c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14670:	ldr	r1, [fp, #12]
   14674:	cmp	r2, #2
   14678:	moveq	r2, r0
   1467c:	mov	r0, #0
   14680:	bic	r1, r1, #2
   14684:	str	r2, [sp]
   14688:	mov	r2, ip
   1468c:	mov	r3, lr
   14690:	str	r0, [sp, #8]
   14694:	ldr	r0, [sp, #76]	; 0x4c
   14698:	str	r1, [sp, #4]
   1469c:	mov	r1, r4
   146a0:	str	r0, [sp, #12]
   146a4:	ldr	r0, [sp, #80]	; 0x50
   146a8:	str	r0, [sp, #16]
   146ac:	mov	r0, r5
   146b0:	bl	13728 <__assert_fail@plt+0x2668>
   146b4:	mov	r8, r0
   146b8:	b	1473c <__assert_fail@plt+0x367c>
   146bc:	mov	r0, #5
   146c0:	ldr	r1, [sp, #56]	; 0x38
   146c4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   146c8:	mov	r3, sl
   146cc:	str	r0, [sp]
   146d0:	ldr	r0, [fp, #12]
   146d4:	str	r0, [sp, #4]
   146d8:	ldr	r0, [fp, #16]
   146dc:	str	r0, [sp, #8]
   146e0:	ldr	r0, [sp, #76]	; 0x4c
   146e4:	b	146a0 <__assert_fail@plt+0x35e0>
   146e8:	mov	r0, #0
   146ec:	str	r0, [fp, #-76]	; 0xffffffb4
   146f0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   146f4:	cmp	r1, #0
   146f8:	beq	14730 <__assert_fail@plt+0x3670>
   146fc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14700:	tst	r0, #1
   14704:	bne	14730 <__assert_fail@plt+0x3670>
   14708:	ldrb	r0, [r1]
   1470c:	cmp	r0, #0
   14710:	beq	14730 <__assert_fail@plt+0x3670>
   14714:	add	r1, r1, #1
   14718:	cmp	r8, r4
   1471c:	strbcc	r0, [r5, r8]
   14720:	add	r8, r8, #1
   14724:	ldrb	r0, [r1], #1
   14728:	cmp	r0, #0
   1472c:	bne	14718 <__assert_fail@plt+0x3658>
   14730:	cmp	r8, r4
   14734:	movcc	r0, #0
   14738:	strbcc	r0, [r5, r8]
   1473c:	mov	r0, r8
   14740:	sub	sp, fp, #28
   14744:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14748:	mov	r0, #4
   1474c:	b	1466c <__assert_fail@plt+0x35ac>
   14750:	bl	110b4 <abort@plt>
   14754:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14758:	add	fp, sp, #28
   1475c:	sub	sp, sp, #28
   14760:	movw	r5, #672	; 0x2a0
   14764:	cmp	r2, #0
   14768:	mov	r4, r1
   1476c:	mov	r7, r0
   14770:	str	r0, [sp, #20]
   14774:	movt	r5, #3
   14778:	movne	r5, r2
   1477c:	bl	10fdc <__errno_location@plt>
   14780:	mov	sl, r0
   14784:	ldr	r2, [r5, #40]	; 0x28
   14788:	ldr	r3, [r5, #44]	; 0x2c
   1478c:	ldm	r5, {r0, r1}
   14790:	orr	r8, r1, #1
   14794:	add	r9, r5, #8
   14798:	mov	r1, #0
   1479c:	ldr	r6, [sl]
   147a0:	stm	sp, {r0, r8, r9}
   147a4:	mov	r0, #0
   147a8:	str	r2, [sp, #12]
   147ac:	str	r3, [sp, #16]
   147b0:	mov	r2, r7
   147b4:	mov	r3, r4
   147b8:	str	r6, [sp, #24]
   147bc:	mov	r6, r4
   147c0:	bl	13728 <__assert_fail@plt+0x2668>
   147c4:	add	r7, r0, #1
   147c8:	mov	r0, r7
   147cc:	bl	15974 <__assert_fail@plt+0x48b4>
   147d0:	mov	r4, r0
   147d4:	ldr	r0, [r5]
   147d8:	ldr	r2, [r5, #44]	; 0x2c
   147dc:	ldr	r1, [r5, #40]	; 0x28
   147e0:	mov	r3, r6
   147e4:	stm	sp, {r0, r8, r9}
   147e8:	str	r2, [sp, #16]
   147ec:	ldr	r2, [sp, #20]
   147f0:	str	r1, [sp, #12]
   147f4:	mov	r0, r4
   147f8:	mov	r1, r7
   147fc:	bl	13728 <__assert_fail@plt+0x2668>
   14800:	ldr	r0, [sp, #24]
   14804:	str	r0, [sl]
   14808:	mov	r0, r4
   1480c:	sub	sp, fp, #28
   14810:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14814:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14818:	add	fp, sp, #28
   1481c:	sub	sp, sp, #36	; 0x24
   14820:	movw	r8, #672	; 0x2a0
   14824:	cmp	r3, #0
   14828:	mov	r4, r2
   1482c:	str	r2, [sp, #24]
   14830:	mov	r5, r1
   14834:	mov	r6, r0
   14838:	str	r0, [sp, #20]
   1483c:	movt	r8, #3
   14840:	movne	r8, r3
   14844:	bl	10fdc <__errno_location@plt>
   14848:	str	r0, [sp, #28]
   1484c:	ldr	r1, [r8, #40]	; 0x28
   14850:	ldr	r2, [r8, #44]	; 0x2c
   14854:	ldr	r7, [r0]
   14858:	cmp	r4, #0
   1485c:	add	sl, r8, #8
   14860:	mov	r0, #0
   14864:	ldm	r8, {r3, r9}
   14868:	orreq	r9, r9, #1
   1486c:	stm	sp, {r3, r9, sl}
   14870:	str	r1, [sp, #12]
   14874:	str	r2, [sp, #16]
   14878:	mov	r1, #0
   1487c:	mov	r2, r6
   14880:	mov	r3, r5
   14884:	str	r7, [sp, #32]
   14888:	mov	r7, r5
   1488c:	bl	13728 <__assert_fail@plt+0x2668>
   14890:	add	r4, r0, #1
   14894:	mov	r5, r0
   14898:	mov	r0, r4
   1489c:	bl	15974 <__assert_fail@plt+0x48b4>
   148a0:	mov	r6, r0
   148a4:	ldr	r0, [r8]
   148a8:	ldr	r2, [r8, #44]	; 0x2c
   148ac:	ldr	r1, [r8, #40]	; 0x28
   148b0:	mov	r3, r7
   148b4:	stm	sp, {r0, r9, sl}
   148b8:	str	r2, [sp, #16]
   148bc:	ldr	r2, [sp, #20]
   148c0:	str	r1, [sp, #12]
   148c4:	mov	r0, r6
   148c8:	mov	r1, r4
   148cc:	bl	13728 <__assert_fail@plt+0x2668>
   148d0:	ldr	r0, [sp, #24]
   148d4:	ldr	r1, [sp, #32]
   148d8:	ldr	r2, [sp, #28]
   148dc:	cmp	r0, #0
   148e0:	str	r1, [r2]
   148e4:	strne	r5, [r0]
   148e8:	mov	r0, r6
   148ec:	sub	sp, fp, #28
   148f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148f4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   148f8:	add	fp, sp, #24
   148fc:	movw	r5, #33020	; 0x80fc
   14900:	movw	r8, #33016	; 0x80f8
   14904:	movt	r5, #2
   14908:	movt	r8, #2
   1490c:	ldr	r0, [r5]
   14910:	ldr	r4, [r8]
   14914:	cmp	r0, #2
   14918:	blt	14944 <__assert_fail@plt+0x3884>
   1491c:	add	r7, r4, #12
   14920:	mov	r6, #0
   14924:	ldr	r0, [r7, r6, lsl #3]
   14928:	bl	16dbc <__assert_fail@plt+0x5cfc>
   1492c:	ldr	r1, [r5]
   14930:	add	r2, r6, #2
   14934:	add	r0, r6, #1
   14938:	mov	r6, r0
   1493c:	cmp	r2, r1
   14940:	blt	14924 <__assert_fail@plt+0x3864>
   14944:	ldr	r0, [r4, #4]
   14948:	movw	r9, #720	; 0x2d0
   1494c:	movw	r7, #33024	; 0x8100
   14950:	movt	r9, #3
   14954:	movt	r7, #2
   14958:	cmp	r0, r9
   1495c:	beq	1496c <__assert_fail@plt+0x38ac>
   14960:	bl	16dbc <__assert_fail@plt+0x5cfc>
   14964:	mov	r0, #256	; 0x100
   14968:	stm	r7, {r0, r9}
   1496c:	cmp	r4, r7
   14970:	beq	14980 <__assert_fail@plt+0x38c0>
   14974:	mov	r0, r4
   14978:	bl	16dbc <__assert_fail@plt+0x5cfc>
   1497c:	str	r7, [r8]
   14980:	mov	r0, #1
   14984:	str	r0, [r5]
   14988:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1498c:	movw	r3, #672	; 0x2a0
   14990:	mvn	r2, #0
   14994:	movt	r3, #3
   14998:	b	1499c <__assert_fail@plt+0x38dc>
   1499c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149a0:	add	fp, sp, #28
   149a4:	sub	sp, sp, #44	; 0x2c
   149a8:	mov	r7, r3
   149ac:	str	r2, [sp, #36]	; 0x24
   149b0:	str	r1, [sp, #32]
   149b4:	mov	r5, r0
   149b8:	bl	10fdc <__errno_location@plt>
   149bc:	cmp	r5, #0
   149c0:	bmi	14b30 <__assert_fail@plt+0x3a70>
   149c4:	cmn	r5, #-2147483647	; 0x80000001
   149c8:	beq	14b30 <__assert_fail@plt+0x3a70>
   149cc:	movw	r8, #33020	; 0x80fc
   149d0:	movw	r4, #33016	; 0x80f8
   149d4:	str	r0, [sp, #28]
   149d8:	ldr	r0, [r0]
   149dc:	movt	r8, #2
   149e0:	movt	r4, #2
   149e4:	ldr	r1, [r8]
   149e8:	ldr	r6, [r4]
   149ec:	str	r0, [sp, #24]
   149f0:	cmp	r1, r5
   149f4:	ble	14a00 <__assert_fail@plt+0x3940>
   149f8:	mov	sl, r6
   149fc:	b	14a6c <__assert_fail@plt+0x39ac>
   14a00:	movw	r9, #33024	; 0x8100
   14a04:	mov	r0, #8
   14a08:	str	r1, [fp, #-32]	; 0xffffffe0
   14a0c:	sub	r1, r5, r1
   14a10:	mvn	r3, #-2147483648	; 0x80000000
   14a14:	movt	r9, #2
   14a18:	str	r0, [sp]
   14a1c:	add	r2, r1, #1
   14a20:	sub	r1, fp, #32
   14a24:	subs	r0, r6, r9
   14a28:	movne	r0, r6
   14a2c:	bl	15b74 <__assert_fail@plt+0x4ab4>
   14a30:	mov	sl, r0
   14a34:	cmp	r6, r9
   14a38:	str	r0, [r4]
   14a3c:	bne	14a48 <__assert_fail@plt+0x3988>
   14a40:	ldrd	r0, [r9]
   14a44:	stm	sl, {r0, r1}
   14a48:	ldr	r1, [r8]
   14a4c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14a50:	add	r0, sl, r1, lsl #3
   14a54:	sub	r1, r2, r1
   14a58:	lsl	r2, r1, #3
   14a5c:	mov	r1, #0
   14a60:	bl	10ff4 <memset@plt>
   14a64:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14a68:	str	r0, [r8]
   14a6c:	mov	r9, sl
   14a70:	ldm	r7, {r0, r1}
   14a74:	orr	r8, r1, #1
   14a78:	add	r1, r7, #8
   14a7c:	ldr	r2, [r7, #40]	; 0x28
   14a80:	ldr	r3, [r7, #44]	; 0x2c
   14a84:	ldr	r6, [r9, r5, lsl #3]!
   14a88:	str	r1, [sp, #20]
   14a8c:	ldr	r4, [r9, #4]!
   14a90:	stm	sp, {r0, r8}
   14a94:	add	r0, sp, #8
   14a98:	stm	r0, {r1, r2, r3}
   14a9c:	ldr	r2, [sp, #32]
   14aa0:	ldr	r3, [sp, #36]	; 0x24
   14aa4:	mov	r1, r6
   14aa8:	mov	r0, r4
   14aac:	bl	13728 <__assert_fail@plt+0x2668>
   14ab0:	cmp	r6, r0
   14ab4:	bhi	14b18 <__assert_fail@plt+0x3a58>
   14ab8:	add	r6, r0, #1
   14abc:	movw	r0, #720	; 0x2d0
   14ac0:	movt	r0, #3
   14ac4:	str	r6, [sl, r5, lsl #3]
   14ac8:	cmp	r4, r0
   14acc:	beq	14ad8 <__assert_fail@plt+0x3a18>
   14ad0:	mov	r0, r4
   14ad4:	bl	16dbc <__assert_fail@plt+0x5cfc>
   14ad8:	mov	r0, r6
   14adc:	bl	15974 <__assert_fail@plt+0x48b4>
   14ae0:	str	r0, [r9]
   14ae4:	mov	r4, r0
   14ae8:	add	r3, sp, #8
   14aec:	ldr	r0, [r7]
   14af0:	ldr	r1, [r7, #40]	; 0x28
   14af4:	ldr	r2, [r7, #44]	; 0x2c
   14af8:	stm	sp, {r0, r8}
   14afc:	ldr	r0, [sp, #20]
   14b00:	stm	r3, {r0, r1, r2}
   14b04:	ldr	r2, [sp, #32]
   14b08:	ldr	r3, [sp, #36]	; 0x24
   14b0c:	mov	r0, r4
   14b10:	mov	r1, r6
   14b14:	bl	13728 <__assert_fail@plt+0x2668>
   14b18:	ldr	r0, [sp, #28]
   14b1c:	ldr	r1, [sp, #24]
   14b20:	str	r1, [r0]
   14b24:	mov	r0, r4
   14b28:	sub	sp, fp, #28
   14b2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b30:	bl	110b4 <abort@plt>
   14b34:	movw	r3, #672	; 0x2a0
   14b38:	movt	r3, #3
   14b3c:	b	1499c <__assert_fail@plt+0x38dc>
   14b40:	movw	r3, #672	; 0x2a0
   14b44:	mov	r1, r0
   14b48:	mov	r0, #0
   14b4c:	mvn	r2, #0
   14b50:	movt	r3, #3
   14b54:	b	1499c <__assert_fail@plt+0x38dc>
   14b58:	movw	r3, #672	; 0x2a0
   14b5c:	mov	r2, r1
   14b60:	mov	r1, r0
   14b64:	mov	r0, #0
   14b68:	movt	r3, #3
   14b6c:	b	1499c <__assert_fail@plt+0x38dc>
   14b70:	push	{fp, lr}
   14b74:	mov	fp, sp
   14b78:	sub	sp, sp, #48	; 0x30
   14b7c:	vmov.i32	q8, #0	; 0x00000000
   14b80:	mov	ip, #32
   14b84:	mov	r3, sp
   14b88:	mov	lr, r2
   14b8c:	cmp	r1, #10
   14b90:	add	r2, r3, #16
   14b94:	vst1.64	{d16-d17}, [r3], ip
   14b98:	vst1.64	{d16-d17}, [r2]
   14b9c:	vst1.64	{d16-d17}, [r3]
   14ba0:	beq	14bc0 <__assert_fail@plt+0x3b00>
   14ba4:	str	r1, [sp]
   14ba8:	mov	r3, sp
   14bac:	mov	r1, lr
   14bb0:	mvn	r2, #0
   14bb4:	bl	1499c <__assert_fail@plt+0x38dc>
   14bb8:	mov	sp, fp
   14bbc:	pop	{fp, pc}
   14bc0:	bl	110b4 <abort@plt>
   14bc4:	push	{r4, sl, fp, lr}
   14bc8:	add	fp, sp, #8
   14bcc:	sub	sp, sp, #48	; 0x30
   14bd0:	vmov.i32	q8, #0	; 0x00000000
   14bd4:	mov	ip, r3
   14bd8:	mov	r3, sp
   14bdc:	mov	lr, #32
   14be0:	cmp	r1, #10
   14be4:	add	r4, r3, #16
   14be8:	vst1.64	{d16-d17}, [r3], lr
   14bec:	vst1.64	{d16-d17}, [r4]
   14bf0:	vst1.64	{d16-d17}, [r3]
   14bf4:	beq	14c14 <__assert_fail@plt+0x3b54>
   14bf8:	str	r1, [sp]
   14bfc:	mov	r1, r2
   14c00:	mov	r3, sp
   14c04:	mov	r2, ip
   14c08:	bl	1499c <__assert_fail@plt+0x38dc>
   14c0c:	sub	sp, fp, #8
   14c10:	pop	{r4, sl, fp, pc}
   14c14:	bl	110b4 <abort@plt>
   14c18:	push	{fp, lr}
   14c1c:	mov	fp, sp
   14c20:	sub	sp, sp, #48	; 0x30
   14c24:	vmov.i32	q8, #0	; 0x00000000
   14c28:	mov	r3, sp
   14c2c:	mov	ip, #32
   14c30:	cmp	r0, #10
   14c34:	add	r2, r3, #16
   14c38:	vst1.64	{d16-d17}, [r3], ip
   14c3c:	vst1.64	{d16-d17}, [r2]
   14c40:	vst1.64	{d16-d17}, [r3]
   14c44:	beq	14c64 <__assert_fail@plt+0x3ba4>
   14c48:	str	r0, [sp]
   14c4c:	mov	r3, sp
   14c50:	mov	r0, #0
   14c54:	mvn	r2, #0
   14c58:	bl	1499c <__assert_fail@plt+0x38dc>
   14c5c:	mov	sp, fp
   14c60:	pop	{fp, pc}
   14c64:	bl	110b4 <abort@plt>
   14c68:	push	{fp, lr}
   14c6c:	mov	fp, sp
   14c70:	sub	sp, sp, #48	; 0x30
   14c74:	vmov.i32	q8, #0	; 0x00000000
   14c78:	mov	r3, sp
   14c7c:	mov	ip, #32
   14c80:	cmp	r0, #10
   14c84:	add	lr, r3, #16
   14c88:	vst1.64	{d16-d17}, [r3], ip
   14c8c:	vst1.64	{d16-d17}, [lr]
   14c90:	vst1.64	{d16-d17}, [r3]
   14c94:	beq	14cb0 <__assert_fail@plt+0x3bf0>
   14c98:	str	r0, [sp]
   14c9c:	mov	r3, sp
   14ca0:	mov	r0, #0
   14ca4:	bl	1499c <__assert_fail@plt+0x38dc>
   14ca8:	mov	sp, fp
   14cac:	pop	{fp, pc}
   14cb0:	bl	110b4 <abort@plt>
   14cb4:	push	{r4, sl, fp, lr}
   14cb8:	add	fp, sp, #8
   14cbc:	sub	sp, sp, #48	; 0x30
   14cc0:	mov	lr, r0
   14cc4:	movw	r0, #672	; 0x2a0
   14cc8:	mov	ip, r1
   14ccc:	mov	r1, #32
   14cd0:	mov	r4, #1
   14cd4:	movt	r0, #3
   14cd8:	add	r3, r0, #16
   14cdc:	vld1.64	{d16-d17}, [r0], r1
   14ce0:	vld1.64	{d20-d21}, [r0]
   14ce4:	vld1.64	{d18-d19}, [r3]
   14ce8:	mov	r3, sp
   14cec:	add	r0, r3, #32
   14cf0:	add	r1, r3, #16
   14cf4:	vst1.64	{d20-d21}, [r0]
   14cf8:	mov	r0, #28
   14cfc:	vst1.64	{d18-d19}, [r1]
   14d00:	mov	r1, r3
   14d04:	and	r0, r0, r2, lsr #3
   14d08:	and	r2, r2, #31
   14d0c:	vst1.64	{d16-d17}, [r1], r0
   14d10:	ldr	r0, [r1, #8]
   14d14:	bic	r4, r4, r0, lsr r2
   14d18:	eor	r0, r0, r4, lsl r2
   14d1c:	mov	r2, ip
   14d20:	str	r0, [r1, #8]
   14d24:	mov	r0, #0
   14d28:	mov	r1, lr
   14d2c:	bl	1499c <__assert_fail@plt+0x38dc>
   14d30:	sub	sp, fp, #8
   14d34:	pop	{r4, sl, fp, pc}
   14d38:	push	{fp, lr}
   14d3c:	mov	fp, sp
   14d40:	sub	sp, sp, #48	; 0x30
   14d44:	mov	ip, r0
   14d48:	movw	r0, #672	; 0x2a0
   14d4c:	mov	r2, #32
   14d50:	movt	r0, #3
   14d54:	add	r3, r0, #16
   14d58:	vld1.64	{d16-d17}, [r0], r2
   14d5c:	vld1.64	{d20-d21}, [r0]
   14d60:	vld1.64	{d18-d19}, [r3]
   14d64:	mov	r3, sp
   14d68:	add	r0, r3, #32
   14d6c:	add	r2, r3, #16
   14d70:	vst1.64	{d20-d21}, [r0]
   14d74:	mov	r0, #28
   14d78:	vst1.64	{d18-d19}, [r2]
   14d7c:	mov	r2, r3
   14d80:	and	r0, r0, r1, lsr #3
   14d84:	and	r1, r1, #31
   14d88:	vst1.64	{d16-d17}, [r2], r0
   14d8c:	mov	r0, #1
   14d90:	ldr	lr, [r2, #8]
   14d94:	bic	r0, r0, lr, lsr r1
   14d98:	eor	r0, lr, r0, lsl r1
   14d9c:	mov	r1, ip
   14da0:	str	r0, [r2, #8]
   14da4:	mov	r0, #0
   14da8:	mvn	r2, #0
   14dac:	bl	1499c <__assert_fail@plt+0x38dc>
   14db0:	mov	sp, fp
   14db4:	pop	{fp, pc}
   14db8:	push	{fp, lr}
   14dbc:	mov	fp, sp
   14dc0:	sub	sp, sp, #48	; 0x30
   14dc4:	mov	r1, r0
   14dc8:	movw	r0, #672	; 0x2a0
   14dcc:	mov	r3, #32
   14dd0:	movt	r0, #3
   14dd4:	add	r2, r0, #16
   14dd8:	vld1.64	{d16-d17}, [r0], r3
   14ddc:	mov	r3, sp
   14de0:	vld1.64	{d18-d19}, [r2]
   14de4:	vld1.64	{d20-d21}, [r0]
   14de8:	add	r2, r3, #16
   14dec:	add	r0, r3, #32
   14df0:	vst1.64	{d18-d19}, [r2]
   14df4:	vst1.64	{d20-d21}, [r0]
   14df8:	mov	r0, #12
   14dfc:	mov	r2, r3
   14e00:	vst1.64	{d16-d17}, [r2], r0
   14e04:	ldr	r0, [r2]
   14e08:	orr	r0, r0, #67108864	; 0x4000000
   14e0c:	str	r0, [r2]
   14e10:	mov	r0, #0
   14e14:	mvn	r2, #0
   14e18:	bl	1499c <__assert_fail@plt+0x38dc>
   14e1c:	mov	sp, fp
   14e20:	pop	{fp, pc}
   14e24:	push	{fp, lr}
   14e28:	mov	fp, sp
   14e2c:	sub	sp, sp, #48	; 0x30
   14e30:	mov	ip, r1
   14e34:	mov	r1, r0
   14e38:	movw	r0, #672	; 0x2a0
   14e3c:	mov	r2, #32
   14e40:	movt	r0, #3
   14e44:	add	r3, r0, #16
   14e48:	vld1.64	{d16-d17}, [r0], r2
   14e4c:	vld1.64	{d18-d19}, [r3]
   14e50:	vld1.64	{d20-d21}, [r0]
   14e54:	mov	r3, sp
   14e58:	add	r2, r3, #16
   14e5c:	add	r0, r3, #32
   14e60:	vst1.64	{d18-d19}, [r2]
   14e64:	vst1.64	{d20-d21}, [r0]
   14e68:	mov	r0, #12
   14e6c:	mov	r2, r3
   14e70:	vst1.64	{d16-d17}, [r2], r0
   14e74:	ldr	r0, [r2]
   14e78:	orr	r0, r0, #67108864	; 0x4000000
   14e7c:	str	r0, [r2]
   14e80:	mov	r0, #0
   14e84:	mov	r2, ip
   14e88:	bl	1499c <__assert_fail@plt+0x38dc>
   14e8c:	mov	sp, fp
   14e90:	pop	{fp, pc}
   14e94:	push	{r4, sl, fp, lr}
   14e98:	add	fp, sp, #8
   14e9c:	sub	sp, sp, #96	; 0x60
   14ea0:	vmov.i32	q8, #0	; 0x00000000
   14ea4:	mov	ip, r2
   14ea8:	mov	r2, sp
   14eac:	mov	r4, #28
   14eb0:	cmp	r1, #10
   14eb4:	mov	r3, r2
   14eb8:	add	lr, r2, #16
   14ebc:	vst1.64	{d16-d17}, [r3], r4
   14ec0:	vst1.64	{d16-d17}, [lr]
   14ec4:	vst1.32	{d16-d17}, [r3]
   14ec8:	beq	14f18 <__assert_fail@plt+0x3e58>
   14ecc:	vld1.64	{d16-d17}, [r2], r4
   14ed0:	vld1.64	{d18-d19}, [lr]
   14ed4:	add	r3, sp, #48	; 0x30
   14ed8:	vld1.32	{d20-d21}, [r2]
   14edc:	add	r2, r3, #20
   14ee0:	add	r4, r3, #4
   14ee4:	vst1.32	{d18-d19}, [r2]
   14ee8:	add	r2, r3, #32
   14eec:	vst1.32	{d16-d17}, [r4]
   14ef0:	vst1.32	{d20-d21}, [r2]
   14ef4:	str	r1, [sp, #48]	; 0x30
   14ef8:	mvn	r2, #0
   14efc:	ldr	r1, [sp, #60]	; 0x3c
   14f00:	orr	r1, r1, #67108864	; 0x4000000
   14f04:	str	r1, [sp, #60]	; 0x3c
   14f08:	mov	r1, ip
   14f0c:	bl	1499c <__assert_fail@plt+0x38dc>
   14f10:	sub	sp, fp, #8
   14f14:	pop	{r4, sl, fp, pc}
   14f18:	bl	110b4 <abort@plt>
   14f1c:	push	{r4, r5, r6, sl, fp, lr}
   14f20:	add	fp, sp, #16
   14f24:	sub	sp, sp, #48	; 0x30
   14f28:	mov	ip, r3
   14f2c:	movw	r3, #672	; 0x2a0
   14f30:	mov	r6, #32
   14f34:	cmp	r1, #0
   14f38:	mov	r4, sp
   14f3c:	movt	r3, #3
   14f40:	cmpne	r2, #0
   14f44:	add	r5, r4, #16
   14f48:	add	lr, r3, #16
   14f4c:	vld1.64	{d16-d17}, [r3], r6
   14f50:	vld1.64	{d18-d19}, [lr]
   14f54:	vld1.64	{d20-d21}, [r3]
   14f58:	mov	r3, #10
   14f5c:	vst1.64	{d16-d17}, [r4], r6
   14f60:	vst1.64	{d18-d19}, [r5]
   14f64:	vst1.64	{d20-d21}, [r4]
   14f68:	str	r3, [sp]
   14f6c:	bne	14f74 <__assert_fail@plt+0x3eb4>
   14f70:	bl	110b4 <abort@plt>
   14f74:	str	r2, [sp, #44]	; 0x2c
   14f78:	str	r1, [sp, #40]	; 0x28
   14f7c:	mov	r3, sp
   14f80:	mov	r1, ip
   14f84:	mvn	r2, #0
   14f88:	bl	1499c <__assert_fail@plt+0x38dc>
   14f8c:	sub	sp, fp, #16
   14f90:	pop	{r4, r5, r6, sl, fp, pc}
   14f94:	push	{r4, r5, r6, sl, fp, lr}
   14f98:	add	fp, sp, #16
   14f9c:	sub	sp, sp, #48	; 0x30
   14fa0:	mov	lr, r3
   14fa4:	movw	r3, #672	; 0x2a0
   14fa8:	mov	r6, #32
   14fac:	cmp	r1, #0
   14fb0:	mov	r4, sp
   14fb4:	movt	r3, #3
   14fb8:	cmpne	r2, #0
   14fbc:	add	r5, r4, #16
   14fc0:	add	ip, r3, #16
   14fc4:	vld1.64	{d16-d17}, [r3], r6
   14fc8:	vld1.64	{d18-d19}, [ip]
   14fcc:	vld1.64	{d20-d21}, [r3]
   14fd0:	mov	r3, #10
   14fd4:	vst1.64	{d16-d17}, [r4], r6
   14fd8:	vst1.64	{d18-d19}, [r5]
   14fdc:	vst1.64	{d20-d21}, [r4]
   14fe0:	str	r3, [sp]
   14fe4:	bne	14fec <__assert_fail@plt+0x3f2c>
   14fe8:	bl	110b4 <abort@plt>
   14fec:	ldr	ip, [fp, #8]
   14ff0:	str	r2, [sp, #44]	; 0x2c
   14ff4:	str	r1, [sp, #40]	; 0x28
   14ff8:	mov	r3, sp
   14ffc:	mov	r1, lr
   15000:	mov	r2, ip
   15004:	bl	1499c <__assert_fail@plt+0x38dc>
   15008:	sub	sp, fp, #16
   1500c:	pop	{r4, r5, r6, sl, fp, pc}
   15010:	push	{r4, sl, fp, lr}
   15014:	add	fp, sp, #8
   15018:	sub	sp, sp, #48	; 0x30
   1501c:	movw	r3, #672	; 0x2a0
   15020:	mov	lr, #32
   15024:	mov	ip, r2
   15028:	cmp	r0, #0
   1502c:	movt	r3, #3
   15030:	cmpne	r1, #0
   15034:	add	r2, r3, #16
   15038:	vld1.64	{d16-d17}, [r3], lr
   1503c:	vld1.64	{d20-d21}, [r3]
   15040:	vld1.64	{d18-d19}, [r2]
   15044:	mov	r2, sp
   15048:	add	r4, r2, #16
   1504c:	vst1.64	{d16-d17}, [r2], lr
   15050:	vst1.64	{d20-d21}, [r2]
   15054:	mov	r2, #10
   15058:	vst1.64	{d18-d19}, [r4]
   1505c:	str	r2, [sp]
   15060:	bne	15068 <__assert_fail@plt+0x3fa8>
   15064:	bl	110b4 <abort@plt>
   15068:	str	r1, [sp, #44]	; 0x2c
   1506c:	str	r0, [sp, #40]	; 0x28
   15070:	mov	r3, sp
   15074:	mov	r0, #0
   15078:	mov	r1, ip
   1507c:	mvn	r2, #0
   15080:	bl	1499c <__assert_fail@plt+0x38dc>
   15084:	sub	sp, fp, #8
   15088:	pop	{r4, sl, fp, pc}
   1508c:	push	{r4, r5, fp, lr}
   15090:	add	fp, sp, #8
   15094:	sub	sp, sp, #48	; 0x30
   15098:	mov	ip, r3
   1509c:	movw	r3, #672	; 0x2a0
   150a0:	mov	r4, #32
   150a4:	mov	lr, r2
   150a8:	cmp	r0, #0
   150ac:	movt	r3, #3
   150b0:	cmpne	r1, #0
   150b4:	add	r2, r3, #16
   150b8:	vld1.64	{d16-d17}, [r3], r4
   150bc:	vld1.64	{d20-d21}, [r3]
   150c0:	vld1.64	{d18-d19}, [r2]
   150c4:	mov	r2, sp
   150c8:	add	r5, r2, #16
   150cc:	vst1.64	{d16-d17}, [r2], r4
   150d0:	vst1.64	{d20-d21}, [r2]
   150d4:	mov	r2, #10
   150d8:	vst1.64	{d18-d19}, [r5]
   150dc:	str	r2, [sp]
   150e0:	bne	150e8 <__assert_fail@plt+0x4028>
   150e4:	bl	110b4 <abort@plt>
   150e8:	str	r1, [sp, #44]	; 0x2c
   150ec:	str	r0, [sp, #40]	; 0x28
   150f0:	mov	r3, sp
   150f4:	mov	r0, #0
   150f8:	mov	r1, lr
   150fc:	mov	r2, ip
   15100:	bl	1499c <__assert_fail@plt+0x38dc>
   15104:	sub	sp, fp, #8
   15108:	pop	{r4, r5, fp, pc}
   1510c:	movw	r3, #33032	; 0x8108
   15110:	movt	r3, #2
   15114:	b	1499c <__assert_fail@plt+0x38dc>
   15118:	movw	r3, #33032	; 0x8108
   1511c:	mov	r2, r1
   15120:	mov	r1, r0
   15124:	mov	r0, #0
   15128:	movt	r3, #2
   1512c:	b	1499c <__assert_fail@plt+0x38dc>
   15130:	movw	r3, #33032	; 0x8108
   15134:	mvn	r2, #0
   15138:	movt	r3, #2
   1513c:	b	1499c <__assert_fail@plt+0x38dc>
   15140:	movw	r3, #33032	; 0x8108
   15144:	mov	r1, r0
   15148:	mov	r0, #0
   1514c:	mvn	r2, #0
   15150:	movt	r3, #2
   15154:	b	1499c <__assert_fail@plt+0x38dc>
   15158:	push	{r4, r5, fp, lr}
   1515c:	add	fp, sp, #8
   15160:	mov	r5, r0
   15164:	mov	r4, r1
   15168:	mov	r0, #0
   1516c:	mov	r2, #5
   15170:	mov	r1, r5
   15174:	bl	10eec <dcgettext@plt>
   15178:	cmp	r0, r5
   1517c:	popne	{r4, r5, fp, pc}
   15180:	bl	16de4 <__assert_fail@plt+0x5d24>
   15184:	ldrb	r1, [r0]
   15188:	and	r1, r1, #223	; 0xdf
   1518c:	cmp	r1, #71	; 0x47
   15190:	beq	151f8 <__assert_fail@plt+0x4138>
   15194:	cmp	r1, #85	; 0x55
   15198:	bne	15250 <__assert_fail@plt+0x4190>
   1519c:	ldrb	r1, [r0, #1]
   151a0:	and	r1, r1, #223	; 0xdf
   151a4:	cmp	r1, #84	; 0x54
   151a8:	bne	15250 <__assert_fail@plt+0x4190>
   151ac:	ldrb	r1, [r0, #2]
   151b0:	and	r1, r1, #223	; 0xdf
   151b4:	cmp	r1, #70	; 0x46
   151b8:	bne	15250 <__assert_fail@plt+0x4190>
   151bc:	ldrb	r1, [r0, #3]
   151c0:	cmp	r1, #45	; 0x2d
   151c4:	bne	15250 <__assert_fail@plt+0x4190>
   151c8:	ldrb	r1, [r0, #4]
   151cc:	cmp	r1, #56	; 0x38
   151d0:	bne	15250 <__assert_fail@plt+0x4190>
   151d4:	ldrb	r0, [r0, #5]
   151d8:	cmp	r0, #0
   151dc:	bne	15250 <__assert_fail@plt+0x4190>
   151e0:	ldrb	r1, [r5]
   151e4:	movw	r2, #31238	; 0x7a06
   151e8:	movw	r0, #31242	; 0x7a0a
   151ec:	movt	r2, #1
   151f0:	movt	r0, #1
   151f4:	b	15280 <__assert_fail@plt+0x41c0>
   151f8:	ldrb	r1, [r0, #1]
   151fc:	and	r1, r1, #223	; 0xdf
   15200:	cmp	r1, #66	; 0x42
   15204:	bne	15250 <__assert_fail@plt+0x4190>
   15208:	ldrb	r1, [r0, #2]
   1520c:	cmp	r1, #49	; 0x31
   15210:	bne	15250 <__assert_fail@plt+0x4190>
   15214:	ldrb	r1, [r0, #3]
   15218:	cmp	r1, #56	; 0x38
   1521c:	bne	15250 <__assert_fail@plt+0x4190>
   15220:	ldrb	r1, [r0, #4]
   15224:	cmp	r1, #48	; 0x30
   15228:	bne	15250 <__assert_fail@plt+0x4190>
   1522c:	ldrb	r1, [r0, #5]
   15230:	cmp	r1, #51	; 0x33
   15234:	bne	15250 <__assert_fail@plt+0x4190>
   15238:	ldrb	r1, [r0, #6]
   1523c:	cmp	r1, #48	; 0x30
   15240:	bne	15250 <__assert_fail@plt+0x4190>
   15244:	ldrb	r0, [r0, #7]
   15248:	cmp	r0, #0
   1524c:	beq	1526c <__assert_fail@plt+0x41ac>
   15250:	movw	r1, #30832	; 0x7870
   15254:	movw	r0, #31236	; 0x7a04
   15258:	cmp	r4, #9
   1525c:	movt	r1, #1
   15260:	movt	r0, #1
   15264:	moveq	r0, r1
   15268:	pop	{r4, r5, fp, pc}
   1526c:	ldrb	r1, [r5]
   15270:	movw	r2, #31246	; 0x7a0e
   15274:	movw	r0, #31250	; 0x7a12
   15278:	movt	r2, #1
   1527c:	movt	r0, #1
   15280:	cmp	r1, #96	; 0x60
   15284:	moveq	r0, r2
   15288:	pop	{r4, r5, fp, pc}
   1528c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15290:	add	fp, sp, #24
   15294:	sub	sp, sp, #32
   15298:	ldr	r6, [fp, #12]
   1529c:	ldr	r7, [fp, #8]
   152a0:	mov	r4, r2
   152a4:	mov	r8, r0
   152a8:	cmp	r1, #0
   152ac:	beq	152d4 <__assert_fail@plt+0x4214>
   152b0:	movw	r2, #31340	; 0x7a6c
   152b4:	mov	r5, r1
   152b8:	str	r3, [sp, #4]
   152bc:	str	r4, [sp]
   152c0:	mov	r0, r8
   152c4:	mov	r1, #1
   152c8:	movt	r2, #1
   152cc:	mov	r3, r5
   152d0:	b	152ec <__assert_fail@plt+0x422c>
   152d4:	movw	r2, #31352	; 0x7a78
   152d8:	str	r3, [sp]
   152dc:	mov	r0, r8
   152e0:	mov	r1, #1
   152e4:	mov	r3, r4
   152e8:	movt	r2, #1
   152ec:	bl	11018 <__fprintf_chk@plt>
   152f0:	movw	r1, #31359	; 0x7a7f
   152f4:	mov	r0, #0
   152f8:	mov	r2, #5
   152fc:	movt	r1, #1
   15300:	bl	10eec <dcgettext@plt>
   15304:	movw	r2, #32077	; 0x7d4d
   15308:	mov	r3, r0
   1530c:	movw	r0, #2022	; 0x7e6
   15310:	mov	r1, #1
   15314:	movt	r2, #1
   15318:	str	r0, [sp]
   1531c:	mov	r0, r8
   15320:	bl	11018 <__fprintf_chk@plt>
   15324:	movw	r4, #30672	; 0x77d0
   15328:	mov	r1, r8
   1532c:	movt	r4, #1
   15330:	mov	r0, r4
   15334:	bl	10e5c <fputs_unlocked@plt>
   15338:	movw	r1, #31363	; 0x7a83
   1533c:	mov	r0, #0
   15340:	mov	r2, #5
   15344:	movt	r1, #1
   15348:	bl	10eec <dcgettext@plt>
   1534c:	movw	r3, #31534	; 0x7b2e
   15350:	mov	r2, r0
   15354:	mov	r0, r8
   15358:	mov	r1, #1
   1535c:	movt	r3, #1
   15360:	bl	11018 <__fprintf_chk@plt>
   15364:	mov	r0, r4
   15368:	mov	r1, r8
   1536c:	bl	10e5c <fputs_unlocked@plt>
   15370:	cmp	r6, #9
   15374:	bhi	153b0 <__assert_fail@plt+0x42f0>
   15378:	add	r0, pc, #0
   1537c:	ldr	pc, [r0, r6, lsl #2]
   15380:	andeq	r5, r1, r8, lsr #7
   15384:			; <UNDEFINED> instruction: 0x000153bc
   15388:	andeq	r5, r1, ip, ror #7
   1538c:	andeq	r5, r1, r4, lsl r4
   15390:	andeq	r5, r1, ip, lsr r4
   15394:	andeq	r5, r1, r4, ror #8
   15398:	andeq	r5, r1, ip, lsl #9
   1539c:	andeq	r5, r1, r4, asr #9
   153a0:	andeq	r5, r1, r4, ror #10
   153a4:	andeq	r5, r1, ip, lsl #10
   153a8:	sub	sp, fp, #24
   153ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   153b0:	movw	r1, #31887	; 0x7c8f
   153b4:	movt	r1, #1
   153b8:	b	15514 <__assert_fail@plt+0x4454>
   153bc:	movw	r1, #31568	; 0x7b50
   153c0:	mov	r0, #0
   153c4:	mov	r2, #5
   153c8:	movt	r1, #1
   153cc:	bl	10eec <dcgettext@plt>
   153d0:	ldr	r3, [r7]
   153d4:	mov	r2, r0
   153d8:	mov	r0, r8
   153dc:	mov	r1, #1
   153e0:	sub	sp, fp, #24
   153e4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   153e8:	b	11018 <__fprintf_chk@plt>
   153ec:	movw	r1, #31584	; 0x7b60
   153f0:	mov	r0, #0
   153f4:	mov	r2, #5
   153f8:	movt	r1, #1
   153fc:	bl	10eec <dcgettext@plt>
   15400:	mov	r2, r0
   15404:	ldr	r3, [r7]
   15408:	ldr	r0, [r7, #4]
   1540c:	str	r0, [sp]
   15410:	b	15500 <__assert_fail@plt+0x4440>
   15414:	movw	r1, #31607	; 0x7b77
   15418:	mov	r0, #0
   1541c:	mov	r2, #5
   15420:	movt	r1, #1
   15424:	bl	10eec <dcgettext@plt>
   15428:	mov	r2, r0
   1542c:	ldr	r3, [r7]
   15430:	ldmib	r7, {r0, r1}
   15434:	stm	sp, {r0, r1}
   15438:	b	15500 <__assert_fail@plt+0x4440>
   1543c:	movw	r1, #31635	; 0x7b93
   15440:	mov	r0, #0
   15444:	mov	r2, #5
   15448:	movt	r1, #1
   1544c:	bl	10eec <dcgettext@plt>
   15450:	ldr	r3, [r7]
   15454:	mov	r2, r0
   15458:	ldmib	r7, {r0, r1, r7}
   1545c:	stm	sp, {r0, r1, r7}
   15460:	b	15500 <__assert_fail@plt+0x4440>
   15464:	movw	r1, #31667	; 0x7bb3
   15468:	mov	r0, #0
   1546c:	mov	r2, #5
   15470:	movt	r1, #1
   15474:	bl	10eec <dcgettext@plt>
   15478:	ldr	r3, [r7]
   1547c:	mov	r2, r0
   15480:	ldmib	r7, {r0, r1, r6, r7}
   15484:	stm	sp, {r0, r1, r6, r7}
   15488:	b	15500 <__assert_fail@plt+0x4440>
   1548c:	movw	r1, #31703	; 0x7bd7
   15490:	mov	r0, #0
   15494:	mov	r2, #5
   15498:	movt	r1, #1
   1549c:	bl	10eec <dcgettext@plt>
   154a0:	mov	r2, r0
   154a4:	ldr	r3, [r7]
   154a8:	ldmib	r7, {r0, r1, r6}
   154ac:	ldr	r5, [r7, #16]
   154b0:	ldr	r7, [r7, #20]
   154b4:	stm	sp, {r0, r1, r6}
   154b8:	str	r5, [sp, #12]
   154bc:	str	r7, [sp, #16]
   154c0:	b	15500 <__assert_fail@plt+0x4440>
   154c4:	movw	r1, #31743	; 0x7bff
   154c8:	mov	r0, #0
   154cc:	mov	r2, #5
   154d0:	movt	r1, #1
   154d4:	bl	10eec <dcgettext@plt>
   154d8:	mov	r2, r0
   154dc:	ldr	r3, [r7]
   154e0:	ldmib	r7, {r0, r1, r6}
   154e4:	ldr	r5, [r7, #16]
   154e8:	ldr	r4, [r7, #20]
   154ec:	ldr	r7, [r7, #24]
   154f0:	stm	sp, {r0, r1, r6}
   154f4:	str	r5, [sp, #12]
   154f8:	str	r4, [sp, #16]
   154fc:	str	r7, [sp, #20]
   15500:	mov	r0, r8
   15504:	mov	r1, #1
   15508:	b	155b4 <__assert_fail@plt+0x44f4>
   1550c:	movw	r1, #31835	; 0x7c5b
   15510:	movt	r1, #1
   15514:	mov	r0, #0
   15518:	mov	r2, #5
   1551c:	bl	10eec <dcgettext@plt>
   15520:	mov	ip, r0
   15524:	ldr	r3, [r7]
   15528:	ldr	r0, [r7, #4]
   1552c:	ldr	r1, [r7, #8]
   15530:	ldr	r6, [r7, #12]
   15534:	ldr	r5, [r7, #16]
   15538:	ldr	r4, [r7, #20]
   1553c:	ldr	r2, [r7, #24]
   15540:	ldr	lr, [r7, #28]
   15544:	ldr	r7, [r7, #32]
   15548:	stm	sp, {r0, r1, r6}
   1554c:	str	r5, [sp, #12]
   15550:	str	r4, [sp, #16]
   15554:	str	r2, [sp, #20]
   15558:	str	lr, [sp, #24]
   1555c:	str	r7, [sp, #28]
   15560:	b	155a8 <__assert_fail@plt+0x44e8>
   15564:	movw	r1, #31787	; 0x7c2b
   15568:	mov	r0, #0
   1556c:	mov	r2, #5
   15570:	movt	r1, #1
   15574:	bl	10eec <dcgettext@plt>
   15578:	mov	ip, r0
   1557c:	ldr	r3, [r7]
   15580:	ldmib	r7, {r0, r1, r6}
   15584:	ldr	r5, [r7, #16]
   15588:	ldr	r4, [r7, #20]
   1558c:	ldr	r2, [r7, #24]
   15590:	ldr	r7, [r7, #28]
   15594:	stm	sp, {r0, r1, r6}
   15598:	str	r5, [sp, #12]
   1559c:	str	r4, [sp, #16]
   155a0:	str	r2, [sp, #20]
   155a4:	str	r7, [sp, #24]
   155a8:	mov	r0, r8
   155ac:	mov	r1, #1
   155b0:	mov	r2, ip
   155b4:	bl	11018 <__fprintf_chk@plt>
   155b8:	sub	sp, fp, #24
   155bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   155c0:	push	{r4, sl, fp, lr}
   155c4:	add	fp, sp, #8
   155c8:	sub	sp, sp, #8
   155cc:	ldr	ip, [fp, #8]
   155d0:	mov	lr, #0
   155d4:	ldr	r4, [ip, lr, lsl #2]
   155d8:	add	lr, lr, #1
   155dc:	cmp	r4, #0
   155e0:	bne	155d4 <__assert_fail@plt+0x4514>
   155e4:	sub	r4, lr, #1
   155e8:	str	ip, [sp]
   155ec:	str	r4, [sp, #4]
   155f0:	bl	1528c <__assert_fail@plt+0x41cc>
   155f4:	sub	sp, fp, #8
   155f8:	pop	{r4, sl, fp, pc}
   155fc:	push	{fp, lr}
   15600:	mov	fp, sp
   15604:	sub	sp, sp, #48	; 0x30
   15608:	ldr	ip, [fp, #8]
   1560c:	ldr	lr, [ip]
   15610:	cmp	lr, #0
   15614:	str	lr, [sp, #8]
   15618:	beq	156b4 <__assert_fail@plt+0x45f4>
   1561c:	ldr	lr, [ip, #4]
   15620:	cmp	lr, #0
   15624:	str	lr, [sp, #12]
   15628:	beq	156bc <__assert_fail@plt+0x45fc>
   1562c:	ldr	lr, [ip, #8]
   15630:	cmp	lr, #0
   15634:	str	lr, [sp, #16]
   15638:	beq	156c4 <__assert_fail@plt+0x4604>
   1563c:	ldr	lr, [ip, #12]
   15640:	cmp	lr, #0
   15644:	str	lr, [sp, #20]
   15648:	beq	156cc <__assert_fail@plt+0x460c>
   1564c:	ldr	lr, [ip, #16]
   15650:	cmp	lr, #0
   15654:	str	lr, [sp, #24]
   15658:	beq	156d4 <__assert_fail@plt+0x4614>
   1565c:	ldr	lr, [ip, #20]
   15660:	cmp	lr, #0
   15664:	str	lr, [sp, #28]
   15668:	beq	156dc <__assert_fail@plt+0x461c>
   1566c:	ldr	lr, [ip, #24]
   15670:	cmp	lr, #0
   15674:	str	lr, [sp, #32]
   15678:	beq	156e4 <__assert_fail@plt+0x4624>
   1567c:	ldr	lr, [ip, #28]
   15680:	cmp	lr, #0
   15684:	str	lr, [sp, #36]	; 0x24
   15688:	beq	156ec <__assert_fail@plt+0x462c>
   1568c:	ldr	lr, [ip, #32]
   15690:	cmp	lr, #0
   15694:	str	lr, [sp, #40]	; 0x28
   15698:	beq	156f4 <__assert_fail@plt+0x4634>
   1569c:	ldr	lr, [ip, #36]	; 0x24
   156a0:	mov	ip, #10
   156a4:	cmp	lr, #0
   156a8:	str	lr, [sp, #44]	; 0x2c
   156ac:	movweq	ip, #9
   156b0:	b	156f8 <__assert_fail@plt+0x4638>
   156b4:	mov	ip, #0
   156b8:	b	156f8 <__assert_fail@plt+0x4638>
   156bc:	mov	ip, #1
   156c0:	b	156f8 <__assert_fail@plt+0x4638>
   156c4:	mov	ip, #2
   156c8:	b	156f8 <__assert_fail@plt+0x4638>
   156cc:	mov	ip, #3
   156d0:	b	156f8 <__assert_fail@plt+0x4638>
   156d4:	mov	ip, #4
   156d8:	b	156f8 <__assert_fail@plt+0x4638>
   156dc:	mov	ip, #5
   156e0:	b	156f8 <__assert_fail@plt+0x4638>
   156e4:	mov	ip, #6
   156e8:	b	156f8 <__assert_fail@plt+0x4638>
   156ec:	mov	ip, #7
   156f0:	b	156f8 <__assert_fail@plt+0x4638>
   156f4:	mov	ip, #8
   156f8:	add	lr, sp, #8
   156fc:	str	ip, [sp, #4]
   15700:	str	lr, [sp]
   15704:	bl	1528c <__assert_fail@plt+0x41cc>
   15708:	mov	sp, fp
   1570c:	pop	{fp, pc}
   15710:	push	{fp, lr}
   15714:	mov	fp, sp
   15718:	sub	sp, sp, #56	; 0x38
   1571c:	add	ip, fp, #8
   15720:	str	ip, [sp, #12]
   15724:	ldr	lr, [fp, #8]
   15728:	cmp	lr, #0
   1572c:	str	lr, [sp, #16]
   15730:	beq	157cc <__assert_fail@plt+0x470c>
   15734:	ldr	lr, [ip, #4]
   15738:	cmp	lr, #0
   1573c:	str	lr, [sp, #20]
   15740:	beq	157d4 <__assert_fail@plt+0x4714>
   15744:	ldr	lr, [ip, #8]
   15748:	cmp	lr, #0
   1574c:	str	lr, [sp, #24]
   15750:	beq	157dc <__assert_fail@plt+0x471c>
   15754:	ldr	lr, [ip, #12]
   15758:	cmp	lr, #0
   1575c:	str	lr, [sp, #28]
   15760:	beq	157e4 <__assert_fail@plt+0x4724>
   15764:	ldr	lr, [ip, #16]
   15768:	cmp	lr, #0
   1576c:	str	lr, [sp, #32]
   15770:	beq	157ec <__assert_fail@plt+0x472c>
   15774:	ldr	lr, [ip, #20]
   15778:	cmp	lr, #0
   1577c:	str	lr, [sp, #36]	; 0x24
   15780:	beq	157f4 <__assert_fail@plt+0x4734>
   15784:	ldr	lr, [ip, #24]
   15788:	cmp	lr, #0
   1578c:	str	lr, [sp, #40]	; 0x28
   15790:	beq	157fc <__assert_fail@plt+0x473c>
   15794:	ldr	lr, [ip, #28]
   15798:	cmp	lr, #0
   1579c:	str	lr, [sp, #44]	; 0x2c
   157a0:	beq	15804 <__assert_fail@plt+0x4744>
   157a4:	ldr	lr, [ip, #32]
   157a8:	cmp	lr, #0
   157ac:	str	lr, [sp, #48]	; 0x30
   157b0:	beq	1580c <__assert_fail@plt+0x474c>
   157b4:	ldr	lr, [ip, #36]	; 0x24
   157b8:	mov	ip, #10
   157bc:	cmp	lr, #0
   157c0:	str	lr, [sp, #52]	; 0x34
   157c4:	movweq	ip, #9
   157c8:	b	15810 <__assert_fail@plt+0x4750>
   157cc:	mov	ip, #0
   157d0:	b	15810 <__assert_fail@plt+0x4750>
   157d4:	mov	ip, #1
   157d8:	b	15810 <__assert_fail@plt+0x4750>
   157dc:	mov	ip, #2
   157e0:	b	15810 <__assert_fail@plt+0x4750>
   157e4:	mov	ip, #3
   157e8:	b	15810 <__assert_fail@plt+0x4750>
   157ec:	mov	ip, #4
   157f0:	b	15810 <__assert_fail@plt+0x4750>
   157f4:	mov	ip, #5
   157f8:	b	15810 <__assert_fail@plt+0x4750>
   157fc:	mov	ip, #6
   15800:	b	15810 <__assert_fail@plt+0x4750>
   15804:	mov	ip, #7
   15808:	b	15810 <__assert_fail@plt+0x4750>
   1580c:	mov	ip, #8
   15810:	add	lr, sp, #16
   15814:	str	ip, [sp, #4]
   15818:	str	lr, [sp]
   1581c:	bl	1528c <__assert_fail@plt+0x41cc>
   15820:	mov	sp, fp
   15824:	pop	{fp, pc}
   15828:	push	{fp, lr}
   1582c:	mov	fp, sp
   15830:	movw	r0, #33108	; 0x8154
   15834:	movt	r0, #2
   15838:	ldr	r1, [r0]
   1583c:	movw	r0, #30672	; 0x77d0
   15840:	movt	r0, #1
   15844:	bl	10e5c <fputs_unlocked@plt>
   15848:	movw	r1, #31947	; 0x7ccb
   1584c:	mov	r0, #0
   15850:	mov	r2, #5
   15854:	movt	r1, #1
   15858:	bl	10eec <dcgettext@plt>
   1585c:	movw	r2, #31967	; 0x7cdf
   15860:	mov	r1, r0
   15864:	mov	r0, #1
   15868:	movt	r2, #1
   1586c:	bl	11000 <__printf_chk@plt>
   15870:	movw	r1, #31989	; 0x7cf5
   15874:	mov	r0, #0
   15878:	mov	r2, #5
   1587c:	movt	r1, #1
   15880:	bl	10eec <dcgettext@plt>
   15884:	movw	r2, #30140	; 0x75bc
   15888:	movw	r3, #30481	; 0x7711
   1588c:	mov	r1, r0
   15890:	mov	r0, #1
   15894:	movt	r2, #1
   15898:	movt	r3, #1
   1589c:	bl	11000 <__printf_chk@plt>
   158a0:	movw	r1, #32009	; 0x7d09
   158a4:	mov	r0, #0
   158a8:	mov	r2, #5
   158ac:	movt	r1, #1
   158b0:	bl	10eec <dcgettext@plt>
   158b4:	movw	r2, #32048	; 0x7d30
   158b8:	mov	r1, r0
   158bc:	mov	r0, #1
   158c0:	movt	r2, #1
   158c4:	pop	{fp, lr}
   158c8:	b	11000 <__printf_chk@plt>
   158cc:	push	{r4, r5, r6, sl, fp, lr}
   158d0:	add	fp, sp, #16
   158d4:	mov	r4, r2
   158d8:	mov	r5, r1
   158dc:	mov	r6, r0
   158e0:	bl	16e80 <__assert_fail@plt+0x5dc0>
   158e4:	cmp	r0, #0
   158e8:	popne	{r4, r5, r6, sl, fp, pc}
   158ec:	cmp	r6, #0
   158f0:	beq	15904 <__assert_fail@plt+0x4844>
   158f4:	cmp	r5, #0
   158f8:	cmpne	r4, #0
   158fc:	bne	15904 <__assert_fail@plt+0x4844>
   15900:	pop	{r4, r5, r6, sl, fp, pc}
   15904:	bl	15e80 <__assert_fail@plt+0x4dc0>
   15908:	push	{r4, r5, r6, sl, fp, lr}
   1590c:	add	fp, sp, #16
   15910:	mov	r4, r2
   15914:	mov	r5, r1
   15918:	mov	r6, r0
   1591c:	bl	16e80 <__assert_fail@plt+0x5dc0>
   15920:	cmp	r0, #0
   15924:	popne	{r4, r5, r6, sl, fp, pc}
   15928:	cmp	r6, #0
   1592c:	beq	15940 <__assert_fail@plt+0x4880>
   15930:	cmp	r5, #0
   15934:	cmpne	r4, #0
   15938:	bne	15940 <__assert_fail@plt+0x4880>
   1593c:	pop	{r4, r5, r6, sl, fp, pc}
   15940:	bl	15e80 <__assert_fail@plt+0x4dc0>
   15944:	push	{fp, lr}
   15948:	mov	fp, sp
   1594c:	bl	16cb4 <__assert_fail@plt+0x5bf4>
   15950:	cmp	r0, #0
   15954:	popne	{fp, pc}
   15958:	bl	15e80 <__assert_fail@plt+0x4dc0>
   1595c:	push	{fp, lr}
   15960:	mov	fp, sp
   15964:	bl	16cb4 <__assert_fail@plt+0x5bf4>
   15968:	cmp	r0, #0
   1596c:	popne	{fp, pc}
   15970:	bl	15e80 <__assert_fail@plt+0x4dc0>
   15974:	push	{fp, lr}
   15978:	mov	fp, sp
   1597c:	bl	16cb4 <__assert_fail@plt+0x5bf4>
   15980:	cmp	r0, #0
   15984:	popne	{fp, pc}
   15988:	bl	15e80 <__assert_fail@plt+0x4dc0>
   1598c:	push	{r4, r5, fp, lr}
   15990:	add	fp, sp, #8
   15994:	mov	r4, r1
   15998:	mov	r5, r0
   1599c:	bl	16ce4 <__assert_fail@plt+0x5c24>
   159a0:	cmp	r0, #0
   159a4:	popne	{r4, r5, fp, pc}
   159a8:	cmp	r5, #0
   159ac:	beq	159bc <__assert_fail@plt+0x48fc>
   159b0:	cmp	r4, #0
   159b4:	bne	159bc <__assert_fail@plt+0x48fc>
   159b8:	pop	{r4, r5, fp, pc}
   159bc:	bl	15e80 <__assert_fail@plt+0x4dc0>
   159c0:	push	{fp, lr}
   159c4:	mov	fp, sp
   159c8:	cmp	r1, #0
   159cc:	orreq	r1, r1, #1
   159d0:	bl	16ce4 <__assert_fail@plt+0x5c24>
   159d4:	cmp	r0, #0
   159d8:	popne	{fp, pc}
   159dc:	bl	15e80 <__assert_fail@plt+0x4dc0>
   159e0:	push	{fp, lr}
   159e4:	mov	fp, sp
   159e8:	clz	r3, r2
   159ec:	lsr	ip, r3, #5
   159f0:	clz	r3, r1
   159f4:	lsr	r3, r3, #5
   159f8:	orrs	r3, r3, ip
   159fc:	movwne	r1, #1
   15a00:	movwne	r2, #1
   15a04:	bl	16e80 <__assert_fail@plt+0x5dc0>
   15a08:	cmp	r0, #0
   15a0c:	popne	{fp, pc}
   15a10:	bl	15e80 <__assert_fail@plt+0x4dc0>
   15a14:	push	{fp, lr}
   15a18:	mov	fp, sp
   15a1c:	mov	r2, r1
   15a20:	mov	r1, r0
   15a24:	mov	r0, #0
   15a28:	bl	16e80 <__assert_fail@plt+0x5dc0>
   15a2c:	cmp	r0, #0
   15a30:	popne	{fp, pc}
   15a34:	bl	15e80 <__assert_fail@plt+0x4dc0>
   15a38:	push	{fp, lr}
   15a3c:	mov	fp, sp
   15a40:	mov	r2, r1
   15a44:	mov	r1, r0
   15a48:	clz	r0, r2
   15a4c:	clz	r3, r1
   15a50:	lsr	r0, r0, #5
   15a54:	lsr	r3, r3, #5
   15a58:	orrs	r0, r3, r0
   15a5c:	mov	r0, #0
   15a60:	movwne	r1, #1
   15a64:	movwne	r2, #1
   15a68:	bl	16e80 <__assert_fail@plt+0x5dc0>
   15a6c:	cmp	r0, #0
   15a70:	popne	{fp, pc}
   15a74:	bl	15e80 <__assert_fail@plt+0x4dc0>
   15a78:	push	{r4, r5, r6, sl, fp, lr}
   15a7c:	add	fp, sp, #16
   15a80:	ldr	r5, [r1]
   15a84:	mov	r4, r1
   15a88:	mov	r6, r0
   15a8c:	cmp	r0, #0
   15a90:	beq	15aa8 <__assert_fail@plt+0x49e8>
   15a94:	mov	r0, #1
   15a98:	add	r0, r0, r5, lsr #1
   15a9c:	adds	r5, r5, r0
   15aa0:	bcc	15ab0 <__assert_fail@plt+0x49f0>
   15aa4:	b	15aec <__assert_fail@plt+0x4a2c>
   15aa8:	cmp	r5, #0
   15aac:	movweq	r5, #64	; 0x40
   15ab0:	mov	r0, r6
   15ab4:	mov	r1, r5
   15ab8:	mov	r2, #1
   15abc:	bl	16e80 <__assert_fail@plt+0x5dc0>
   15ac0:	cmp	r5, #0
   15ac4:	mov	r1, r5
   15ac8:	movwne	r1, #1
   15acc:	cmp	r0, #0
   15ad0:	bne	15ae4 <__assert_fail@plt+0x4a24>
   15ad4:	clz	r2, r6
   15ad8:	lsr	r2, r2, #5
   15adc:	orrs	r1, r2, r1
   15ae0:	bne	15aec <__assert_fail@plt+0x4a2c>
   15ae4:	str	r5, [r4]
   15ae8:	pop	{r4, r5, r6, sl, fp, pc}
   15aec:	bl	15e80 <__assert_fail@plt+0x4dc0>
   15af0:	push	{r4, r5, r6, r7, fp, lr}
   15af4:	add	fp, sp, #16
   15af8:	ldr	r5, [r1]
   15afc:	mov	r6, r2
   15b00:	mov	r4, r1
   15b04:	mov	r7, r0
   15b08:	cmp	r0, #0
   15b0c:	beq	15b24 <__assert_fail@plt+0x4a64>
   15b10:	mov	r0, #1
   15b14:	add	r0, r0, r5, lsr #1
   15b18:	adds	r5, r5, r0
   15b1c:	bcc	15b3c <__assert_fail@plt+0x4a7c>
   15b20:	b	15b70 <__assert_fail@plt+0x4ab0>
   15b24:	cmp	r5, #0
   15b28:	bne	15b3c <__assert_fail@plt+0x4a7c>
   15b2c:	mov	r0, #64	; 0x40
   15b30:	cmp	r6, #64	; 0x40
   15b34:	udiv	r5, r0, r6
   15b38:	addhi	r5, r5, #1
   15b3c:	mov	r0, r7
   15b40:	mov	r1, r5
   15b44:	mov	r2, r6
   15b48:	bl	16e80 <__assert_fail@plt+0x5dc0>
   15b4c:	cmp	r0, #0
   15b50:	bne	15b68 <__assert_fail@plt+0x4aa8>
   15b54:	cmp	r7, #0
   15b58:	beq	15b70 <__assert_fail@plt+0x4ab0>
   15b5c:	cmp	r6, #0
   15b60:	cmpne	r5, #0
   15b64:	bne	15b70 <__assert_fail@plt+0x4ab0>
   15b68:	str	r5, [r4]
   15b6c:	pop	{r4, r5, r6, r7, fp, pc}
   15b70:	bl	15e80 <__assert_fail@plt+0x4dc0>
   15b74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15b78:	add	fp, sp, #24
   15b7c:	mov	r8, r1
   15b80:	ldr	r1, [r1]
   15b84:	mov	r5, r0
   15b88:	add	r0, r1, r1, asr #1
   15b8c:	cmp	r0, r1
   15b90:	mvnvs	r0, #-2147483648	; 0x80000000
   15b94:	cmp	r0, r3
   15b98:	mov	r7, r0
   15b9c:	movgt	r7, r3
   15ba0:	cmn	r3, #1
   15ba4:	movle	r7, r0
   15ba8:	ldr	r0, [fp, #8]
   15bac:	cmn	r0, #1
   15bb0:	ble	15bd8 <__assert_fail@plt+0x4b18>
   15bb4:	cmp	r0, #0
   15bb8:	beq	15c2c <__assert_fail@plt+0x4b6c>
   15bbc:	cmn	r7, #1
   15bc0:	ble	15c00 <__assert_fail@plt+0x4b40>
   15bc4:	mvn	r4, #-2147483648	; 0x80000000
   15bc8:	udiv	r6, r4, r0
   15bcc:	cmp	r6, r7
   15bd0:	bge	15c2c <__assert_fail@plt+0x4b6c>
   15bd4:	b	15c3c <__assert_fail@plt+0x4b7c>
   15bd8:	cmn	r7, #1
   15bdc:	ble	15c1c <__assert_fail@plt+0x4b5c>
   15be0:	cmn	r0, #1
   15be4:	beq	15c2c <__assert_fail@plt+0x4b6c>
   15be8:	mov	r6, #-2147483648	; 0x80000000
   15bec:	mvn	r4, #-2147483648	; 0x80000000
   15bf0:	sdiv	r6, r6, r0
   15bf4:	cmp	r6, r7
   15bf8:	bge	15c2c <__assert_fail@plt+0x4b6c>
   15bfc:	b	15c3c <__assert_fail@plt+0x4b7c>
   15c00:	beq	15c2c <__assert_fail@plt+0x4b6c>
   15c04:	mov	r6, #-2147483648	; 0x80000000
   15c08:	mvn	r4, #-2147483648	; 0x80000000
   15c0c:	sdiv	r6, r6, r7
   15c10:	cmp	r6, r0
   15c14:	bge	15c2c <__assert_fail@plt+0x4b6c>
   15c18:	b	15c3c <__assert_fail@plt+0x4b7c>
   15c1c:	mvn	r4, #-2147483648	; 0x80000000
   15c20:	sdiv	r6, r4, r0
   15c24:	cmp	r7, r6
   15c28:	blt	15c3c <__assert_fail@plt+0x4b7c>
   15c2c:	mul	r6, r7, r0
   15c30:	mov	r4, #64	; 0x40
   15c34:	cmp	r6, #63	; 0x3f
   15c38:	bgt	15c44 <__assert_fail@plt+0x4b84>
   15c3c:	sdiv	r7, r4, r0
   15c40:	mul	r6, r7, r0
   15c44:	cmp	r5, #0
   15c48:	moveq	r4, #0
   15c4c:	streq	r4, [r8]
   15c50:	sub	r4, r7, r1
   15c54:	cmp	r4, r2
   15c58:	bge	15d04 <__assert_fail@plt+0x4c44>
   15c5c:	add	r7, r1, r2
   15c60:	mov	r6, #0
   15c64:	mov	r2, #0
   15c68:	cmp	r7, r3
   15c6c:	movwgt	r6, #1
   15c70:	cmn	r3, #1
   15c74:	movwgt	r2, #1
   15c78:	cmp	r7, r1
   15c7c:	bvs	15d38 <__assert_fail@plt+0x4c78>
   15c80:	ands	r1, r2, r6
   15c84:	bne	15d38 <__assert_fail@plt+0x4c78>
   15c88:	cmn	r0, #1
   15c8c:	ble	15cb4 <__assert_fail@plt+0x4bf4>
   15c90:	cmp	r0, #0
   15c94:	beq	15d00 <__assert_fail@plt+0x4c40>
   15c98:	cmn	r7, #1
   15c9c:	ble	15cd8 <__assert_fail@plt+0x4c18>
   15ca0:	mvn	r1, #-2147483648	; 0x80000000
   15ca4:	udiv	r1, r1, r0
   15ca8:	cmp	r1, r7
   15cac:	bge	15d00 <__assert_fail@plt+0x4c40>
   15cb0:	b	15d38 <__assert_fail@plt+0x4c78>
   15cb4:	cmn	r7, #1
   15cb8:	ble	15cf0 <__assert_fail@plt+0x4c30>
   15cbc:	cmn	r0, #1
   15cc0:	beq	15d00 <__assert_fail@plt+0x4c40>
   15cc4:	mov	r1, #-2147483648	; 0x80000000
   15cc8:	sdiv	r1, r1, r0
   15ccc:	cmp	r1, r7
   15cd0:	bge	15d00 <__assert_fail@plt+0x4c40>
   15cd4:	b	15d38 <__assert_fail@plt+0x4c78>
   15cd8:	beq	15d00 <__assert_fail@plt+0x4c40>
   15cdc:	mov	r1, #-2147483648	; 0x80000000
   15ce0:	sdiv	r1, r1, r7
   15ce4:	cmp	r1, r0
   15ce8:	bge	15d00 <__assert_fail@plt+0x4c40>
   15cec:	b	15d38 <__assert_fail@plt+0x4c78>
   15cf0:	mvn	r1, #-2147483648	; 0x80000000
   15cf4:	sdiv	r1, r1, r0
   15cf8:	cmp	r7, r1
   15cfc:	blt	15d38 <__assert_fail@plt+0x4c78>
   15d00:	mul	r6, r7, r0
   15d04:	mov	r0, r5
   15d08:	mov	r1, r6
   15d0c:	bl	16ce4 <__assert_fail@plt+0x5c24>
   15d10:	cmp	r6, #0
   15d14:	movwne	r6, #1
   15d18:	cmp	r0, #0
   15d1c:	bne	15d30 <__assert_fail@plt+0x4c70>
   15d20:	clz	r1, r5
   15d24:	lsr	r1, r1, #5
   15d28:	orrs	r1, r1, r6
   15d2c:	bne	15d38 <__assert_fail@plt+0x4c78>
   15d30:	str	r7, [r8]
   15d34:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15d38:	bl	15e80 <__assert_fail@plt+0x4dc0>
   15d3c:	push	{fp, lr}
   15d40:	mov	fp, sp
   15d44:	mov	r1, #1
   15d48:	bl	16c60 <__assert_fail@plt+0x5ba0>
   15d4c:	cmp	r0, #0
   15d50:	popne	{fp, pc}
   15d54:	bl	15e80 <__assert_fail@plt+0x4dc0>
   15d58:	push	{fp, lr}
   15d5c:	mov	fp, sp
   15d60:	bl	16c60 <__assert_fail@plt+0x5ba0>
   15d64:	cmp	r0, #0
   15d68:	popne	{fp, pc}
   15d6c:	bl	15e80 <__assert_fail@plt+0x4dc0>
   15d70:	push	{fp, lr}
   15d74:	mov	fp, sp
   15d78:	mov	r1, #1
   15d7c:	bl	16c60 <__assert_fail@plt+0x5ba0>
   15d80:	cmp	r0, #0
   15d84:	popne	{fp, pc}
   15d88:	bl	15e80 <__assert_fail@plt+0x4dc0>
   15d8c:	push	{fp, lr}
   15d90:	mov	fp, sp
   15d94:	bl	16c60 <__assert_fail@plt+0x5ba0>
   15d98:	cmp	r0, #0
   15d9c:	popne	{fp, pc}
   15da0:	bl	15e80 <__assert_fail@plt+0x4dc0>
   15da4:	push	{r4, r5, fp, lr}
   15da8:	add	fp, sp, #8
   15dac:	mov	r5, r0
   15db0:	mov	r0, r1
   15db4:	mov	r4, r1
   15db8:	bl	16cb4 <__assert_fail@plt+0x5bf4>
   15dbc:	cmp	r0, #0
   15dc0:	beq	15dd4 <__assert_fail@plt+0x4d14>
   15dc4:	mov	r1, r5
   15dc8:	mov	r2, r4
   15dcc:	pop	{r4, r5, fp, lr}
   15dd0:	b	10ebc <memcpy@plt>
   15dd4:	bl	15e80 <__assert_fail@plt+0x4dc0>
   15dd8:	push	{r4, r5, fp, lr}
   15ddc:	add	fp, sp, #8
   15de0:	mov	r5, r0
   15de4:	mov	r0, r1
   15de8:	mov	r4, r1
   15dec:	bl	16cb4 <__assert_fail@plt+0x5bf4>
   15df0:	cmp	r0, #0
   15df4:	beq	15e08 <__assert_fail@plt+0x4d48>
   15df8:	mov	r1, r5
   15dfc:	mov	r2, r4
   15e00:	pop	{r4, r5, fp, lr}
   15e04:	b	10ebc <memcpy@plt>
   15e08:	bl	15e80 <__assert_fail@plt+0x4dc0>
   15e0c:	push	{r4, r5, fp, lr}
   15e10:	add	fp, sp, #8
   15e14:	mov	r5, r0
   15e18:	add	r0, r1, #1
   15e1c:	mov	r4, r1
   15e20:	bl	16cb4 <__assert_fail@plt+0x5bf4>
   15e24:	cmp	r0, #0
   15e28:	beq	15e44 <__assert_fail@plt+0x4d84>
   15e2c:	mov	r1, #0
   15e30:	mov	r2, r4
   15e34:	strb	r1, [r0, r4]
   15e38:	mov	r1, r5
   15e3c:	pop	{r4, r5, fp, lr}
   15e40:	b	10ebc <memcpy@plt>
   15e44:	bl	15e80 <__assert_fail@plt+0x4dc0>
   15e48:	push	{r4, r5, fp, lr}
   15e4c:	add	fp, sp, #8
   15e50:	mov	r4, r0
   15e54:	bl	10fc4 <strlen@plt>
   15e58:	add	r5, r0, #1
   15e5c:	mov	r0, r5
   15e60:	bl	16cb4 <__assert_fail@plt+0x5bf4>
   15e64:	cmp	r0, #0
   15e68:	beq	15e7c <__assert_fail@plt+0x4dbc>
   15e6c:	mov	r1, r4
   15e70:	mov	r2, r5
   15e74:	pop	{r4, r5, fp, lr}
   15e78:	b	10ebc <memcpy@plt>
   15e7c:	bl	15e80 <__assert_fail@plt+0x4dc0>
   15e80:	push	{fp, lr}
   15e84:	mov	fp, sp
   15e88:	movw	r0, #33012	; 0x80f4
   15e8c:	movw	r1, #32124	; 0x7d7c
   15e90:	mov	r2, #5
   15e94:	movt	r0, #2
   15e98:	movt	r1, #1
   15e9c:	ldr	r4, [r0]
   15ea0:	mov	r0, #0
   15ea4:	bl	10eec <dcgettext@plt>
   15ea8:	movw	r2, #31087	; 0x796f
   15eac:	mov	r3, r0
   15eb0:	mov	r0, r4
   15eb4:	mov	r1, #0
   15eb8:	movt	r2, #1
   15ebc:	bl	10f58 <error@plt>
   15ec0:	bl	110b4 <abort@plt>
   15ec4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15ec8:	add	fp, sp, #24
   15ecc:	sub	sp, sp, #16
   15ed0:	mov	r8, r0
   15ed4:	ldr	r0, [fp, #16]
   15ed8:	mov	r5, r3
   15edc:	mov	r6, r2
   15ee0:	mov	r2, r1
   15ee4:	add	r3, sp, #8
   15ee8:	mov	r1, #0
   15eec:	str	r0, [sp]
   15ef0:	mov	r0, r8
   15ef4:	bl	15fc0 <__assert_fail@plt+0x4f00>
   15ef8:	cmp	r0, #0
   15efc:	bne	15f88 <__assert_fail@plt+0x4ec8>
   15f00:	ldr	r4, [sp, #8]
   15f04:	ldr	r7, [sp, #12]
   15f08:	subs	r0, r4, r6
   15f0c:	sbcs	r0, r7, r5
   15f10:	bcc	15f34 <__assert_fail@plt+0x4e74>
   15f14:	ldr	r1, [fp, #8]
   15f18:	ldr	r0, [fp, #12]
   15f1c:	subs	r1, r1, r4
   15f20:	sbcs	r0, r0, r7
   15f24:	movcs	r0, r4
   15f28:	movcs	r1, r7
   15f2c:	subcs	sp, fp, #24
   15f30:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   15f34:	bl	10fdc <__errno_location@plt>
   15f38:	subs	r1, r4, #1073741824	; 0x40000000
   15f3c:	sbcs	r1, r7, #0
   15f40:	movcc	r1, #34	; 0x22
   15f44:	movcs	r1, #75	; 0x4b
   15f48:	str	r1, [r0]
   15f4c:	ldr	r6, [r0]
   15f50:	ldr	r4, [fp, #24]
   15f54:	ldr	r5, [fp, #20]
   15f58:	mov	r0, r8
   15f5c:	bl	15140 <__assert_fail@plt+0x4080>
   15f60:	subs	r1, r6, #22
   15f64:	movw	r2, #31083	; 0x796b
   15f68:	str	r0, [sp]
   15f6c:	mov	r3, r5
   15f70:	movne	r1, r6
   15f74:	cmp	r4, #0
   15f78:	movt	r2, #1
   15f7c:	movweq	r4, #1
   15f80:	mov	r0, r4
   15f84:	bl	10f58 <error@plt>
   15f88:	cmp	r0, #1
   15f8c:	beq	15fa4 <__assert_fail@plt+0x4ee4>
   15f90:	cmp	r0, #3
   15f94:	bne	15fb0 <__assert_fail@plt+0x4ef0>
   15f98:	bl	10fdc <__errno_location@plt>
   15f9c:	mov	r1, #0
   15fa0:	b	15f48 <__assert_fail@plt+0x4e88>
   15fa4:	bl	10fdc <__errno_location@plt>
   15fa8:	mov	r1, #75	; 0x4b
   15fac:	b	15f48 <__assert_fail@plt+0x4e88>
   15fb0:	bl	10fdc <__errno_location@plt>
   15fb4:	b	15f4c <__assert_fail@plt+0x4e8c>
   15fb8:	mov	r1, #10
   15fbc:	b	15ec4 <__assert_fail@plt+0x4e04>
   15fc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fc4:	add	fp, sp, #28
   15fc8:	sub	sp, sp, #44	; 0x2c
   15fcc:	cmp	r2, #37	; 0x25
   15fd0:	bcs	16c40 <__assert_fail@plt+0x5b80>
   15fd4:	ldr	sl, [fp, #8]
   15fd8:	mov	r6, r2
   15fdc:	mov	r7, r1
   15fe0:	mov	r4, r0
   15fe4:	str	r3, [sp, #36]	; 0x24
   15fe8:	bl	10fdc <__errno_location@plt>
   15fec:	mov	r5, r0
   15ff0:	mov	r0, #0
   15ff4:	str	r0, [r5]
   15ff8:	bl	10fa0 <__ctype_b_loc@plt>
   15ffc:	ldr	r1, [r0]
   16000:	mov	r2, r4
   16004:	ldrb	r0, [r2], #1
   16008:	add	r3, r1, r0, lsl #1
   1600c:	ldrb	r3, [r3, #1]
   16010:	tst	r3, #32
   16014:	bne	16004 <__assert_fail@plt+0x4f44>
   16018:	cmp	r7, #0
   1601c:	sub	r9, fp, #32
   16020:	mov	r8, #4
   16024:	movne	r9, r7
   16028:	cmp	r0, #45	; 0x2d
   1602c:	beq	16c34 <__assert_fail@plt+0x5b74>
   16030:	mov	r0, r4
   16034:	mov	r1, r9
   16038:	mov	r2, r6
   1603c:	mov	r3, #0
   16040:	bl	10ec8 <__strtoull_internal@plt>
   16044:	mov	r7, r1
   16048:	ldr	r1, [r9]
   1604c:	cmp	r1, r4
   16050:	beq	1607c <__assert_fail@plt+0x4fbc>
   16054:	mov	r6, r0
   16058:	ldr	r0, [r5]
   1605c:	cmp	r0, #0
   16060:	beq	160b8 <__assert_fail@plt+0x4ff8>
   16064:	cmp	r0, #34	; 0x22
   16068:	bne	16c34 <__assert_fail@plt+0x5b74>
   1606c:	mov	r8, #1
   16070:	cmp	sl, #0
   16074:	bne	160c4 <__assert_fail@plt+0x5004>
   16078:	b	16c2c <__assert_fail@plt+0x5b6c>
   1607c:	cmp	sl, #0
   16080:	beq	16c34 <__assert_fail@plt+0x5b74>
   16084:	mov	r5, r1
   16088:	ldrb	r1, [r4]
   1608c:	cmp	r1, #0
   16090:	beq	16c34 <__assert_fail@plt+0x5b74>
   16094:	mov	r0, sl
   16098:	bl	10fd0 <strchr@plt>
   1609c:	cmp	r0, #0
   160a0:	beq	16c34 <__assert_fail@plt+0x5b74>
   160a4:	mov	r1, r5
   160a8:	mov	r8, #0
   160ac:	mov	r6, #1
   160b0:	mov	r7, #0
   160b4:	b	160c4 <__assert_fail@plt+0x5004>
   160b8:	mov	r8, r0
   160bc:	cmp	sl, #0
   160c0:	beq	16c2c <__assert_fail@plt+0x5b6c>
   160c4:	ldrb	r4, [r1]
   160c8:	cmp	r4, #0
   160cc:	beq	16c2c <__assert_fail@plt+0x5b6c>
   160d0:	str	r1, [sp, #32]
   160d4:	mov	r0, sl
   160d8:	mov	r1, r4
   160dc:	bl	10fd0 <strchr@plt>
   160e0:	cmp	r0, #0
   160e4:	beq	163ac <__assert_fail@plt+0x52ec>
   160e8:	sub	r0, r4, #69	; 0x45
   160ec:	mov	r1, #1
   160f0:	mov	r3, #0
   160f4:	mov	r5, #1024	; 0x400
   160f8:	cmp	r0, #47	; 0x2f
   160fc:	str	r1, [sp, #28]
   16100:	bhi	16204 <__assert_fail@plt+0x5144>
   16104:	add	r1, pc, #0
   16108:	ldr	pc, [r1, r0, lsl #2]
   1610c:	andeq	r6, r1, ip, asr #3
   16110:	andeq	r6, r1, r4, lsl #4
   16114:	andeq	r6, r1, ip, asr #3
   16118:	andeq	r6, r1, r4, lsl #4
   1611c:	andeq	r6, r1, r4, lsl #4
   16120:	andeq	r6, r1, r4, lsl #4
   16124:	andeq	r6, r1, ip, asr #3
   16128:	andeq	r6, r1, r4, lsl #4
   1612c:	andeq	r6, r1, ip, asr #3
   16130:	andeq	r6, r1, r4, lsl #4
   16134:	andeq	r6, r1, r4, lsl #4
   16138:	andeq	r6, r1, ip, asr #3
   1613c:	andeq	r6, r1, r4, lsl #4
   16140:	andeq	r6, r1, r4, lsl #4
   16144:	andeq	r6, r1, r4, lsl #4
   16148:	andeq	r6, r1, ip, asr #3
   1614c:	andeq	r6, r1, r4, lsl #4
   16150:	andeq	r6, r1, r4, lsl #4
   16154:	andeq	r6, r1, r4, lsl #4
   16158:	andeq	r6, r1, r4, lsl #4
   1615c:	andeq	r6, r1, ip, asr #3
   16160:	andeq	r6, r1, ip, asr #3
   16164:	andeq	r6, r1, r4, lsl #4
   16168:	andeq	r6, r1, r4, lsl #4
   1616c:	andeq	r6, r1, r4, lsl #4
   16170:	andeq	r6, r1, r4, lsl #4
   16174:	andeq	r6, r1, r4, lsl #4
   16178:	andeq	r6, r1, r4, lsl #4
   1617c:	andeq	r6, r1, r4, lsl #4
   16180:	andeq	r6, r1, r4, lsl #4
   16184:	andeq	r6, r1, r4, lsl #4
   16188:	andeq	r6, r1, r4, lsl #4
   1618c:	andeq	r6, r1, r4, lsl #4
   16190:	andeq	r6, r1, r4, lsl #4
   16194:	andeq	r6, r1, ip, asr #3
   16198:	andeq	r6, r1, r4, lsl #4
   1619c:	andeq	r6, r1, r4, lsl #4
   161a0:	andeq	r6, r1, r4, lsl #4
   161a4:	andeq	r6, r1, ip, asr #3
   161a8:	andeq	r6, r1, r4, lsl #4
   161ac:	andeq	r6, r1, ip, asr #3
   161b0:	andeq	r6, r1, r4, lsl #4
   161b4:	andeq	r6, r1, r4, lsl #4
   161b8:	andeq	r6, r1, r4, lsl #4
   161bc:	andeq	r6, r1, r4, lsl #4
   161c0:	andeq	r6, r1, r4, lsl #4
   161c4:	andeq	r6, r1, r4, lsl #4
   161c8:	andeq	r6, r1, ip, asr #3
   161cc:	mov	r0, sl
   161d0:	mov	r1, #48	; 0x30
   161d4:	bl	10fd0 <strchr@plt>
   161d8:	cmp	r0, #0
   161dc:	beq	16200 <__assert_fail@plt+0x5140>
   161e0:	ldr	r1, [sp, #32]
   161e4:	ldrb	r0, [r1, #1]
   161e8:	cmp	r0, #66	; 0x42
   161ec:	cmpne	r0, #68	; 0x44
   161f0:	bne	163b8 <__assert_fail@plt+0x52f8>
   161f4:	mov	r5, #1000	; 0x3e8
   161f8:	mov	r0, #2
   161fc:	str	r0, [sp, #28]
   16200:	mov	r3, #0
   16204:	sub	r0, r4, #66	; 0x42
   16208:	cmp	r0, #53	; 0x35
   1620c:	bhi	163ac <__assert_fail@plt+0x52ec>
   16210:	add	r1, pc, #0
   16214:	ldr	pc, [r1, r0, lsl #2]
   16218:	andeq	r6, r1, r4, lsr r7
   1621c:	andeq	r6, r1, ip, lsr #7
   16220:	andeq	r6, r1, ip, lsr #7
   16224:	andeq	r6, r1, ip, asr r7
   16228:	andeq	r6, r1, ip, lsr #7
   1622c:	strdeq	r6, [r1], -r0
   16230:	andeq	r6, r1, ip, lsr #7
   16234:	andeq	r6, r1, ip, lsr #7
   16238:	andeq	r6, r1, ip, lsr #7
   1623c:	ldrdeq	r6, [r1], -ip
   16240:	andeq	r6, r1, ip, lsr #7
   16244:	andeq	r6, r1, r4, lsr #8
   16248:	andeq	r6, r1, ip, lsr #7
   1624c:	andeq	r6, r1, ip, lsr #7
   16250:			; <UNDEFINED> instruction: 0x000168b4
   16254:	andeq	r6, r1, ip, lsr #7
   16258:	andeq	r6, r1, ip, lsr #7
   1625c:	andeq	r6, r1, ip, lsr #7
   16260:			; <UNDEFINED> instruction: 0x000164b0
   16264:	andeq	r6, r1, ip, lsr #7
   16268:	andeq	r6, r1, ip, lsr #7
   1626c:	andeq	r6, r1, ip, lsr #7
   16270:	andeq	r6, r1, ip, lsr #7
   16274:	ldrdeq	r6, [r1], -ip
   16278:	muleq	r1, r8, r5
   1627c:	andeq	r6, r1, ip, lsr #7
   16280:	andeq	r6, r1, ip, lsr #7
   16284:	andeq	r6, r1, ip, lsr #7
   16288:	andeq	r6, r1, ip, lsr #7
   1628c:	andeq	r6, r1, ip, lsr #7
   16290:	andeq	r6, r1, ip, lsr #7
   16294:	andeq	r6, r1, ip, lsr #7
   16298:			; <UNDEFINED> instruction: 0x00016bb4
   1629c:	andeq	r6, r1, ip, lsl #24
   162a0:	andeq	r6, r1, ip, lsr #7
   162a4:	andeq	r6, r1, ip, lsr #7
   162a8:	andeq	r6, r1, ip, lsr #7
   162ac:	strdeq	r6, [r1], -r0
   162b0:	andeq	r6, r1, ip, lsr #7
   162b4:	andeq	r6, r1, ip, lsr #7
   162b8:	andeq	r6, r1, ip, lsr #7
   162bc:	ldrdeq	r6, [r1], -ip
   162c0:	andeq	r6, r1, ip, lsr #7
   162c4:	andeq	r6, r1, r4, lsr #8
   162c8:	andeq	r6, r1, ip, lsr #7
   162cc:	andeq	r6, r1, ip, lsr #7
   162d0:	andeq	r6, r1, ip, lsr #7
   162d4:	andeq	r6, r1, ip, lsr #7
   162d8:	andeq	r6, r1, ip, lsr #7
   162dc:	andeq	r6, r1, ip, lsr #7
   162e0:			; <UNDEFINED> instruction: 0x000164b0
   162e4:	andeq	r6, r1, ip, lsr #7
   162e8:	andeq	r6, r1, ip, lsr #7
   162ec:	andeq	r6, r1, r8, ror #23
   162f0:	mvn	r0, #0
   162f4:	mvn	r1, #0
   162f8:	mov	r2, r5
   162fc:	mov	sl, r3
   16300:	bl	16fc8 <__assert_fail@plt+0x5f08>
   16304:	subs	r3, r0, r6
   16308:	umull	r4, r2, r6, r5
   1630c:	mov	lr, #0
   16310:	str	r1, [sp, #20]
   16314:	sbcs	r3, r1, r7
   16318:	movwcc	lr, #1
   1631c:	mla	ip, r6, sl, r2
   16320:	mov	r2, r1
   16324:	mov	r2, #0
   16328:	cmp	lr, #0
   1632c:	mla	r7, r7, r5, ip
   16330:	mvnne	r4, #0
   16334:	mvnne	r7, #0
   16338:	subs	r6, r0, r4
   1633c:	sbcs	r6, r1, r7
   16340:	umull	r3, r6, r4, r5
   16344:	movwcc	r2, #1
   16348:	cmp	r2, #0
   1634c:	mvnne	r3, #0
   16350:	cmp	r2, #0
   16354:	str	r6, [sp, #16]
   16358:	umull	r6, ip, r3, r5
   1635c:	mla	r1, r3, sl, ip
   16360:	ldr	ip, [sp, #16]
   16364:	str	r1, [sp, #12]
   16368:	mla	r4, r4, sl, ip
   1636c:	mla	r4, r7, r5, r4
   16370:	mvnne	r4, #0
   16374:	subs	r0, r0, r3
   16378:	ldr	r0, [sp, #20]
   1637c:	ldr	r7, [sp, #12]
   16380:	sbcs	r0, r0, r4
   16384:	mov	r0, #0
   16388:	mla	r7, r4, r5, r7
   1638c:	movwcc	r0, #1
   16390:	cmp	r0, #0
   16394:	mov	r1, r0
   16398:	orr	r0, lr, r2
   1639c:	mvnne	r7, #0
   163a0:	mvnne	r6, #0
   163a4:	orr	r3, r0, r1
   163a8:	b	16c0c <__assert_fail@plt+0x5b4c>
   163ac:	ldr	r0, [sp, #36]	; 0x24
   163b0:	orr	r8, r8, #2
   163b4:	b	16c30 <__assert_fail@plt+0x5b70>
   163b8:	cmp	r0, #105	; 0x69
   163bc:	mov	r3, #0
   163c0:	bne	16204 <__assert_fail@plt+0x5144>
   163c4:	ldrb	r0, [r1, #2]
   163c8:	mov	r1, #1
   163cc:	cmp	r0, #66	; 0x42
   163d0:	movweq	r1, #3
   163d4:	str	r1, [sp, #28]
   163d8:	b	16204 <__assert_fail@plt+0x5144>
   163dc:	mvn	r0, #0
   163e0:	mvn	r1, #0
   163e4:	mov	r2, r5
   163e8:	mov	r4, r3
   163ec:	bl	16fc8 <__assert_fail@plt+0x5f08>
   163f0:	subs	r0, r0, r6
   163f4:	mov	r2, #0
   163f8:	sbcs	r0, r1, r7
   163fc:	umull	r0, r1, r6, r5
   16400:	movwcc	r2, #1
   16404:	cmp	r2, #0
   16408:	mla	r1, r6, r4, r1
   1640c:	mov	r3, r2
   16410:	mvnne	r0, #0
   16414:	mla	r7, r7, r5, r1
   16418:	mvnne	r7, #0
   1641c:	mov	r6, r0
   16420:	b	16c0c <__assert_fail@plt+0x5b4c>
   16424:	mvn	r0, #0
   16428:	mvn	r1, #0
   1642c:	mov	r2, r5
   16430:	str	r3, [sp, #24]
   16434:	bl	16fc8 <__assert_fail@plt+0x5f08>
   16438:	subs	r3, r0, r6
   1643c:	mov	ip, r0
   16440:	umull	r4, r0, r6, r5
   16444:	mov	sl, #0
   16448:	sbcs	r3, r1, r7
   1644c:	mov	r3, #0
   16450:	movwcc	r3, #1
   16454:	cmp	r3, #0
   16458:	str	r0, [sp, #20]
   1645c:	ldr	r0, [sp, #24]
   16460:	mvnne	r4, #0
   16464:	cmp	r3, #0
   16468:	umull	lr, r2, r4, r5
   1646c:	mla	r2, r4, r0, r2
   16470:	str	r2, [sp, #16]
   16474:	ldr	r2, [sp, #20]
   16478:	mla	r6, r6, r0, r2
   1647c:	ldr	r0, [sp, #16]
   16480:	mla	r6, r7, r5, r6
   16484:	mvnne	r6, #0
   16488:	mla	r7, r6, r5, r0
   1648c:	subs	r0, ip, r4
   16490:	sbcs	r0, r1, r6
   16494:	movwcc	sl, #1
   16498:	cmp	sl, #0
   1649c:	orr	r3, r3, sl
   164a0:	mvnne	lr, #0
   164a4:	mvnne	r7, #0
   164a8:	mov	r6, lr
   164ac:	b	16c0c <__assert_fail@plt+0x5b4c>
   164b0:	mvn	r0, #0
   164b4:	mvn	r1, #0
   164b8:	mov	r2, r5
   164bc:	mov	sl, r3
   164c0:	bl	16fc8 <__assert_fail@plt+0x5f08>
   164c4:	subs	r3, r0, r6
   164c8:	mov	ip, r1
   164cc:	umull	r2, lr, r6, r5
   164d0:	str	r0, [sp, #20]
   164d4:	sbcs	r3, r1, r7
   164d8:	mov	r1, #0
   164dc:	str	ip, [sp, #16]
   164e0:	movwcc	r1, #1
   164e4:	mla	r6, r6, sl, lr
   164e8:	mov	lr, #0
   164ec:	cmp	r1, #0
   164f0:	mla	r7, r7, r5, r6
   164f4:	mvnne	r2, #0
   164f8:	cmp	r1, #0
   164fc:	umull	r3, r4, r2, r5
   16500:	mvnne	r7, #0
   16504:	mla	r4, r2, sl, r4
   16508:	subs	r2, r0, r2
   1650c:	sbcs	r2, ip, r7
   16510:	mla	r4, r7, r5, r4
   16514:	mov	r2, #0
   16518:	movwcc	lr, #1
   1651c:	cmp	lr, #0
   16520:	mvnne	r3, #0
   16524:	mvnne	r4, #0
   16528:	subs	r7, r0, r3
   1652c:	mov	r0, r5
   16530:	sbcs	r7, ip, r4
   16534:	umull	r5, r7, r3, r5
   16538:	movwcc	r2, #1
   1653c:	cmp	r2, #0
   16540:	mla	r3, r3, sl, r7
   16544:	mvnne	r5, #0
   16548:	cmp	r2, #0
   1654c:	mla	r3, r4, r0, r3
   16550:	umull	r6, ip, r5, r0
   16554:	mvnne	r3, #0
   16558:	mla	ip, r5, sl, ip
   1655c:	mla	r7, r3, r0, ip
   16560:	ldr	r0, [sp, #20]
   16564:	subs	r0, r0, r5
   16568:	ldr	r0, [sp, #16]
   1656c:	sbcs	r0, r0, r3
   16570:	mov	r0, #0
   16574:	movwcc	r0, #1
   16578:	cmp	r0, #0
   1657c:	mov	r3, r0
   16580:	orr	r0, r1, lr
   16584:	orr	r0, r0, r2
   16588:	mvnne	r7, #0
   1658c:	mvnne	r6, #0
   16590:	orr	r3, r0, r3
   16594:	b	16c0c <__assert_fail@plt+0x5b4c>
   16598:	mvn	r0, #0
   1659c:	mvn	r1, #0
   165a0:	mov	r2, r5
   165a4:	mov	r4, r3
   165a8:	str	r3, [sp, #24]
   165ac:	bl	16fc8 <__assert_fail@plt+0x5f08>
   165b0:	umull	r3, r2, r6, r5
   165b4:	mla	r2, r6, r4, r2
   165b8:	subs	r6, r0, r6
   165bc:	sbcs	r6, r1, r7
   165c0:	mov	r6, #0
   165c4:	mla	ip, r7, r5, r2
   165c8:	ldr	r2, [sp, #24]
   165cc:	movwcc	r6, #1
   165d0:	cmp	r6, #0
   165d4:	str	r6, [sp, #20]
   165d8:	mov	r6, #0
   165dc:	mvnne	r3, #0
   165e0:	mvnne	ip, #0
   165e4:	subs	r4, r0, r3
   165e8:	umull	r7, lr, r3, r5
   165ec:	sbcs	r4, r1, ip
   165f0:	movwcc	r6, #1
   165f4:	mla	r3, r3, r2, lr
   165f8:	cmp	r6, #0
   165fc:	str	r6, [sp, #16]
   16600:	mvnne	r7, #0
   16604:	cmp	r6, #0
   16608:	umull	sl, r4, r7, r5
   1660c:	mla	r4, r7, r2, r4
   16610:	mla	r2, ip, r5, r3
   16614:	mvnne	r2, #0
   16618:	subs	r3, r0, r7
   1661c:	mov	ip, #0
   16620:	mla	r6, r2, r5, r4
   16624:	sbcs	r2, r1, r2
   16628:	mov	r4, r0
   1662c:	mov	r0, #0
   16630:	movwcc	r0, #1
   16634:	mov	r3, r4
   16638:	cmp	r0, #0
   1663c:	str	r0, [sp, #12]
   16640:	mov	r0, r1
   16644:	str	r3, [sp, #4]
   16648:	mvnne	sl, #0
   1664c:	mvnne	r6, #0
   16650:	str	r0, [sp, #8]
   16654:	subs	r2, r4, sl
   16658:	ldr	r4, [sp, #24]
   1665c:	sbcs	r2, r1, r6
   16660:	umull	r7, r2, sl, r5
   16664:	movwcc	ip, #1
   16668:	cmp	ip, #0
   1666c:	mvnne	r7, #0
   16670:	mla	r2, sl, r4, r2
   16674:	cmp	ip, #0
   16678:	mov	sl, #0
   1667c:	umull	r1, lr, r7, r5
   16680:	mla	r2, r6, r5, r2
   16684:	mvnne	r2, #0
   16688:	subs	r6, r3, r7
   1668c:	mla	lr, r7, r4, lr
   16690:	mla	lr, r2, r5, lr
   16694:	sbcs	r2, r0, r2
   16698:	mov	r2, #0
   1669c:	movwcc	sl, #1
   166a0:	cmp	sl, #0
   166a4:	mvnne	r1, #0
   166a8:	mvnne	lr, #0
   166ac:	subs	r6, r3, r1
   166b0:	ldr	r3, [sp, #24]
   166b4:	sbcs	r6, r0, lr
   166b8:	umull	r0, r7, r1, r5
   166bc:	movwcc	r2, #1
   166c0:	cmp	r2, #0
   166c4:	mvnne	r0, #0
   166c8:	mla	r1, r1, r3, r7
   166cc:	cmp	r2, #0
   166d0:	umull	r6, r4, r0, r5
   166d4:	mla	r1, lr, r5, r1
   166d8:	mvnne	r1, #0
   166dc:	mla	r4, r0, r3, r4
   166e0:	ldr	r3, [sp, #4]
   166e4:	mla	r7, r1, r5, r4
   166e8:	ldr	r5, [sp, #16]
   166ec:	subs	r0, r3, r0
   166f0:	ldr	r0, [sp, #8]
   166f4:	sbcs	r0, r0, r1
   166f8:	mov	r0, #0
   166fc:	movwcc	r0, #1
   16700:	cmp	r0, #0
   16704:	mov	r1, r0
   16708:	ldr	r0, [sp, #20]
   1670c:	mvnne	r7, #0
   16710:	mvnne	r6, #0
   16714:	orr	r0, r0, r5
   16718:	ldr	r5, [sp, #12]
   1671c:	orr	r0, r0, r5
   16720:	orr	r0, r0, ip
   16724:	orr	r0, r0, sl
   16728:	orr	r0, r0, r2
   1672c:	orr	r0, r0, r1
   16730:	b	16bac <__assert_fail@plt+0x5aec>
   16734:	mov	r1, #0
   16738:	lsl	r2, r7, #10
   1673c:	lsl	r0, r6, #10
   16740:	lsr	r3, r7, #22
   16744:	cmp	r1, r7, lsr #22
   16748:	orr	r2, r2, r6, lsr #22
   1674c:	mvnne	r0, #0
   16750:	movwne	r3, #1
   16754:	cmp	r1, r7, lsr #22
   16758:	b	16bd8 <__assert_fail@plt+0x5b18>
   1675c:	mvn	r0, #0
   16760:	mvn	r1, #0
   16764:	mov	r2, r5
   16768:	mov	sl, r3
   1676c:	bl	16fc8 <__assert_fail@plt+0x5f08>
   16770:	subs	r2, r0, r6
   16774:	mov	ip, r0
   16778:	mov	r0, #0
   1677c:	sbcs	r2, r1, r7
   16780:	umull	r4, r2, r6, r5
   16784:	movwcc	r0, #1
   16788:	cmp	r0, #0
   1678c:	mla	r2, r6, sl, r2
   16790:	str	r0, [sp, #20]
   16794:	mvnne	r4, #0
   16798:	cmp	r0, #0
   1679c:	mla	r2, r7, r5, r2
   167a0:	mov	r0, #0
   167a4:	umull	lr, r3, r4, r5
   167a8:	mvnne	r2, #0
   167ac:	mla	r3, r4, sl, r3
   167b0:	mla	r6, r2, r5, r3
   167b4:	subs	r3, ip, r4
   167b8:	mov	r3, r1
   167bc:	sbcs	r2, r1, r2
   167c0:	str	r3, [sp, #8]
   167c4:	movwcc	r0, #1
   167c8:	cmp	r0, #0
   167cc:	str	r0, [sp, #16]
   167d0:	mov	r0, ip
   167d4:	mvnne	lr, #0
   167d8:	mvnne	r6, #0
   167dc:	str	r0, [sp, #12]
   167e0:	subs	r2, ip, lr
   167e4:	umull	r7, r4, lr, r5
   167e8:	sbcs	r2, r1, r6
   167ec:	mov	r2, #0
   167f0:	movwcc	r2, #1
   167f4:	mla	r4, lr, sl, r4
   167f8:	cmp	r2, #0
   167fc:	mla	r6, r6, r5, r4
   16800:	mov	r4, #0
   16804:	mvnne	r7, #0
   16808:	cmp	r2, #0
   1680c:	umull	r1, ip, r7, r5
   16810:	mvnne	r6, #0
   16814:	mla	ip, r7, sl, ip
   16818:	subs	r7, r0, r7
   1681c:	sbcs	r7, r3, r6
   16820:	mla	lr, r6, r5, ip
   16824:	mov	ip, #0
   16828:	movwcc	ip, #1
   1682c:	cmp	ip, #0
   16830:	mvnne	r1, #0
   16834:	mvnne	lr, #0
   16838:	subs	r7, r0, r1
   1683c:	sbcs	r7, r3, lr
   16840:	umull	r0, r7, r1, r5
   16844:	movwcc	r4, #1
   16848:	cmp	r4, #0
   1684c:	mla	r1, r1, sl, r7
   16850:	mvnne	r0, #0
   16854:	cmp	r4, #0
   16858:	mla	r1, lr, r5, r1
   1685c:	umull	r6, r3, r0, r5
   16860:	mvnne	r1, #0
   16864:	mla	r3, r0, sl, r3
   16868:	mla	r7, r1, r5, r3
   1686c:	ldr	r3, [sp, #12]
   16870:	subs	r0, r3, r0
   16874:	ldr	r0, [sp, #8]
   16878:	ldr	r3, [sp, #16]
   1687c:	sbcs	r0, r0, r1
   16880:	mov	r0, #0
   16884:	movwcc	r0, #1
   16888:	cmp	r0, #0
   1688c:	mov	r1, r0
   16890:	ldr	r0, [sp, #20]
   16894:	mvnne	r7, #0
   16898:	mvnne	r6, #0
   1689c:	orr	r0, r0, r3
   168a0:	orr	r0, r0, r2
   168a4:	orr	r0, r0, ip
   168a8:	orr	r0, r0, r4
   168ac:	orr	r3, r0, r1
   168b0:	b	16c0c <__assert_fail@plt+0x5b4c>
   168b4:	mvn	r0, #0
   168b8:	mvn	r1, #0
   168bc:	mov	r2, r5
   168c0:	mov	sl, r3
   168c4:	bl	16fc8 <__assert_fail@plt+0x5f08>
   168c8:	umull	r3, r2, r6, r5
   168cc:	mov	lr, r1
   168d0:	mov	r1, r0
   168d4:	mla	r2, r6, sl, r2
   168d8:	subs	r6, r0, r6
   168dc:	mov	r0, #0
   168e0:	sbcs	r6, lr, r7
   168e4:	mla	r2, r7, r5, r2
   168e8:	movwcc	r0, #1
   168ec:	cmp	r0, #0
   168f0:	str	r0, [sp, #20]
   168f4:	mov	r0, r1
   168f8:	mvnne	r3, #0
   168fc:	mvnne	r2, #0
   16900:	str	r0, [sp, #16]
   16904:	subs	r4, r1, r3
   16908:	umull	r7, ip, r3, r5
   1690c:	sbcs	r4, lr, r2
   16910:	mov	r4, #0
   16914:	movwcc	r4, #1
   16918:	mla	r3, r3, sl, ip
   1691c:	mov	ip, #0
   16920:	cmp	r4, #0
   16924:	mla	r2, r2, r5, r3
   16928:	mvnne	r7, #0
   1692c:	cmp	r4, #0
   16930:	umull	r1, r6, r7, r5
   16934:	mvnne	r2, #0
   16938:	mla	r6, r7, sl, r6
   1693c:	mla	r3, r2, r5, r6
   16940:	subs	r6, r0, r7
   16944:	sbcs	r2, lr, r2
   16948:	mov	r2, #0
   1694c:	movwcc	ip, #1
   16950:	cmp	ip, #0
   16954:	mvnne	r1, #0
   16958:	mvnne	r3, #0
   1695c:	subs	r6, r0, r1
   16960:	sbcs	r6, lr, r3
   16964:	umull	r0, r6, r1, r5
   16968:	movwcc	r2, #1
   1696c:	cmp	r2, #0
   16970:	mvnne	r0, #0
   16974:	cmp	r2, #0
   16978:	str	r6, [sp, #12]
   1697c:	umull	r6, r7, r0, r5
   16980:	mla	r7, r0, sl, r7
   16984:	str	r7, [sp, #8]
   16988:	ldr	r7, [sp, #12]
   1698c:	mla	r1, r1, sl, r7
   16990:	mla	r1, r3, r5, r1
   16994:	ldr	r3, [sp, #8]
   16998:	mvnne	r1, #0
   1699c:	mla	r7, r1, r5, r3
   169a0:	ldr	r3, [sp, #16]
   169a4:	subs	r0, r3, r0
   169a8:	sbcs	r0, lr, r1
   169ac:	mov	r0, #0
   169b0:	movwcc	r0, #1
   169b4:	cmp	r0, #0
   169b8:	mov	r1, r0
   169bc:	ldr	r0, [sp, #20]
   169c0:	mvnne	r7, #0
   169c4:	mvnne	r6, #0
   169c8:	orr	r0, r0, r4
   169cc:	orr	r0, r0, ip
   169d0:	orr	r0, r0, r2
   169d4:	orr	r3, r0, r1
   169d8:	b	16c0c <__assert_fail@plt+0x5b4c>
   169dc:	mvn	r0, #0
   169e0:	mvn	r1, #0
   169e4:	mov	r2, r5
   169e8:	mov	sl, r3
   169ec:	bl	16fc8 <__assert_fail@plt+0x5f08>
   169f0:	mov	lr, r0
   169f4:	subs	r0, r0, r6
   169f8:	mov	r2, #0
   169fc:	mov	ip, r1
   16a00:	str	sl, [sp, #24]
   16a04:	sbcs	r0, r1, r7
   16a08:	umull	r3, r1, r6, r5
   16a0c:	str	lr, [sp, #4]
   16a10:	movwcc	r2, #1
   16a14:	cmp	r2, #0
   16a18:	mla	r6, r6, sl, r1
   16a1c:	mov	r1, #0
   16a20:	str	r2, [sp, #20]
   16a24:	mvnne	r3, #0
   16a28:	cmp	r2, #0
   16a2c:	mla	r7, r7, r5, r6
   16a30:	mov	r2, #0
   16a34:	umull	r0, r4, r3, r5
   16a38:	mvnne	r7, #0
   16a3c:	mla	r4, r3, sl, r4
   16a40:	subs	r3, lr, r3
   16a44:	sbcs	r3, ip, r7
   16a48:	mla	r4, r7, r5, r4
   16a4c:	movwcc	r1, #1
   16a50:	cmp	r1, #0
   16a54:	str	r1, [sp, #16]
   16a58:	mvnne	r0, #0
   16a5c:	mvnne	r4, #0
   16a60:	subs	r3, lr, r0
   16a64:	sbcs	r3, ip, r4
   16a68:	umull	r6, r3, r0, r5
   16a6c:	movwcc	r2, #1
   16a70:	cmp	r2, #0
   16a74:	mla	r0, r0, sl, r3
   16a78:	str	r2, [sp, #12]
   16a7c:	mvnne	r6, #0
   16a80:	cmp	r2, #0
   16a84:	mla	r0, r4, r5, r0
   16a88:	ldr	r4, [sp, #24]
   16a8c:	umull	r1, r7, r6, r5
   16a90:	mvnne	r0, #0
   16a94:	subs	r3, lr, r6
   16a98:	mov	r3, ip
   16a9c:	str	r3, [sp]
   16aa0:	mla	r7, r6, sl, r7
   16aa4:	mla	r7, r0, r5, r7
   16aa8:	sbcs	r0, ip, r0
   16aac:	mov	r0, #0
   16ab0:	movwcc	r0, #1
   16ab4:	cmp	r0, #0
   16ab8:	str	r0, [sp, #8]
   16abc:	mvnne	r1, #0
   16ac0:	mvnne	r7, #0
   16ac4:	subs	r0, lr, r1
   16ac8:	sbcs	r0, ip, r7
   16acc:	mov	ip, #0
   16ad0:	umull	r6, r0, r1, r5
   16ad4:	movwcc	ip, #1
   16ad8:	cmp	ip, #0
   16adc:	mla	r1, r1, r4, r0
   16ae0:	mov	r0, lr
   16ae4:	mvnne	r6, #0
   16ae8:	cmp	ip, #0
   16aec:	mla	r1, r7, r5, r1
   16af0:	umull	r2, sl, r6, r5
   16af4:	mvnne	r1, #0
   16af8:	mla	sl, r6, r4, sl
   16afc:	subs	r6, lr, r6
   16b00:	mov	lr, #0
   16b04:	mla	r7, r1, r5, sl
   16b08:	sbcs	r1, r3, r1
   16b0c:	ldr	r1, [sp, #24]
   16b10:	movwcc	lr, #1
   16b14:	cmp	lr, #0
   16b18:	mvnne	r2, #0
   16b1c:	mvnne	r7, #0
   16b20:	subs	r6, r0, r2
   16b24:	umull	r0, sl, r2, r5
   16b28:	sbcs	r6, r3, r7
   16b2c:	mov	r3, #0
   16b30:	movwcc	r3, #1
   16b34:	mla	r2, r2, r1, sl
   16b38:	cmp	r3, #0
   16b3c:	mla	r2, r7, r5, r2
   16b40:	mvnne	r0, #0
   16b44:	cmp	r3, #0
   16b48:	umull	r6, r4, r0, r5
   16b4c:	mvnne	r2, #0
   16b50:	mla	r4, r0, r1, r4
   16b54:	ldr	r1, [sp, #4]
   16b58:	mla	r7, r2, r5, r4
   16b5c:	ldr	r5, [sp, #16]
   16b60:	subs	r0, r1, r0
   16b64:	ldr	r0, [sp]
   16b68:	sbcs	r0, r0, r2
   16b6c:	mov	r0, #0
   16b70:	movwcc	r0, #1
   16b74:	cmp	r0, #0
   16b78:	mov	r2, r0
   16b7c:	ldr	r0, [sp, #20]
   16b80:	mvnne	r7, #0
   16b84:	mvnne	r6, #0
   16b88:	orr	r0, r0, r5
   16b8c:	ldr	r5, [sp, #12]
   16b90:	orr	r0, r0, r5
   16b94:	ldr	r5, [sp, #8]
   16b98:	orr	r0, r0, r5
   16b9c:	orr	r0, r0, ip
   16ba0:	orr	r0, r0, lr
   16ba4:	orr	r0, r0, r3
   16ba8:	orr	r0, r0, r2
   16bac:	and	r3, r0, #1
   16bb0:	b	16c0c <__assert_fail@plt+0x5b4c>
   16bb4:	mov	r1, #0
   16bb8:	lsl	r2, r7, #9
   16bbc:	lsl	r0, r6, #9
   16bc0:	lsr	r3, r7, #23
   16bc4:	cmp	r1, r7, lsr #23
   16bc8:	orr	r2, r2, r6, lsr #23
   16bcc:	mvnne	r0, #0
   16bd0:	movwne	r3, #1
   16bd4:	cmp	r1, r7, lsr #23
   16bd8:	mvnne	r2, #0
   16bdc:	mov	r6, r0
   16be0:	mov	r7, r2
   16be4:	b	16c0c <__assert_fail@plt+0x5b4c>
   16be8:	lsl	r1, r7, #1
   16bec:	cmp	r7, #0
   16bf0:	lsl	r0, r6, #1
   16bf4:	lsr	r3, r7, #31
   16bf8:	orr	r1, r1, r6, lsr #31
   16bfc:	mvnmi	r0, #0
   16c00:	mvnmi	r1, #0
   16c04:	mov	r6, r0
   16c08:	mov	r7, r1
   16c0c:	ldr	r1, [sp, #32]
   16c10:	ldr	r2, [sp, #28]
   16c14:	orr	r8, r3, r8
   16c18:	add	r0, r1, r2
   16c1c:	str	r0, [r9]
   16c20:	ldrb	r0, [r1, r2]
   16c24:	cmp	r0, #0
   16c28:	orrne	r8, r8, #2
   16c2c:	ldr	r0, [sp, #36]	; 0x24
   16c30:	strd	r6, [r0]
   16c34:	mov	r0, r8
   16c38:	sub	sp, fp, #28
   16c3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c40:	movw	r0, #32141	; 0x7d8d
   16c44:	movw	r1, #32179	; 0x7db3
   16c48:	movw	r3, #32195	; 0x7dc3
   16c4c:	mov	r2, #85	; 0x55
   16c50:	movt	r0, #1
   16c54:	movt	r1, #1
   16c58:	movt	r3, #1
   16c5c:	bl	110c0 <__assert_fail@plt>
   16c60:	clz	r2, r1
   16c64:	clz	r3, r0
   16c68:	lsr	r2, r2, #5
   16c6c:	lsr	r3, r3, #5
   16c70:	orrs	r2, r3, r2
   16c74:	movwne	r1, #1
   16c78:	movwne	r0, #1
   16c7c:	cmp	r1, #0
   16c80:	beq	16cb0 <__assert_fail@plt+0x5bf0>
   16c84:	mvn	r2, #-2147483648	; 0x80000000
   16c88:	udiv	r2, r2, r1
   16c8c:	cmp	r2, r0
   16c90:	bcs	16cb0 <__assert_fail@plt+0x5bf0>
   16c94:	push	{fp, lr}
   16c98:	mov	fp, sp
   16c9c:	bl	10fdc <__errno_location@plt>
   16ca0:	mov	r1, #12
   16ca4:	str	r1, [r0]
   16ca8:	mov	r0, #0
   16cac:	pop	{fp, pc}
   16cb0:	b	10e50 <calloc@plt>
   16cb4:	cmp	r0, #0
   16cb8:	movweq	r0, #1
   16cbc:	cmn	r0, #1
   16cc0:	ble	16cc8 <__assert_fail@plt+0x5c08>
   16cc4:	b	10f64 <malloc@plt>
   16cc8:	push	{fp, lr}
   16ccc:	mov	fp, sp
   16cd0:	bl	10fdc <__errno_location@plt>
   16cd4:	mov	r1, #12
   16cd8:	str	r1, [r0]
   16cdc:	mov	r0, #0
   16ce0:	pop	{fp, pc}
   16ce4:	push	{fp, lr}
   16ce8:	mov	fp, sp
   16cec:	cmp	r0, #0
   16cf0:	beq	16d0c <__assert_fail@plt+0x5c4c>
   16cf4:	cmp	r1, #0
   16cf8:	beq	16d18 <__assert_fail@plt+0x5c58>
   16cfc:	cmn	r1, #1
   16d00:	ble	16d24 <__assert_fail@plt+0x5c64>
   16d04:	pop	{fp, lr}
   16d08:	b	10ef8 <realloc@plt>
   16d0c:	mov	r0, r1
   16d10:	pop	{fp, lr}
   16d14:	b	16cb4 <__assert_fail@plt+0x5bf4>
   16d18:	bl	16dbc <__assert_fail@plt+0x5cfc>
   16d1c:	mov	r0, #0
   16d20:	pop	{fp, pc}
   16d24:	bl	10fdc <__errno_location@plt>
   16d28:	mov	r1, #12
   16d2c:	str	r1, [r0]
   16d30:	mov	r0, #0
   16d34:	pop	{fp, pc}
   16d38:	push	{r4, r5, r6, sl, fp, lr}
   16d3c:	add	fp, sp, #16
   16d40:	mov	r4, r0
   16d44:	bl	10f40 <__fpending@plt>
   16d48:	ldr	r6, [r4]
   16d4c:	mov	r5, r0
   16d50:	mov	r0, r4
   16d54:	bl	1334c <__assert_fail@plt+0x228c>
   16d58:	tst	r6, #32
   16d5c:	bne	16d94 <__assert_fail@plt+0x5cd4>
   16d60:	cmp	r0, #0
   16d64:	mov	r4, r0
   16d68:	mvnne	r4, #0
   16d6c:	cmp	r5, #0
   16d70:	bne	16da0 <__assert_fail@plt+0x5ce0>
   16d74:	cmp	r0, #0
   16d78:	beq	16da0 <__assert_fail@plt+0x5ce0>
   16d7c:	bl	10fdc <__errno_location@plt>
   16d80:	ldr	r0, [r0]
   16d84:	subs	r4, r0, #9
   16d88:	mvnne	r4, #0
   16d8c:	mov	r0, r4
   16d90:	pop	{r4, r5, r6, sl, fp, pc}
   16d94:	mvn	r4, #0
   16d98:	cmp	r0, #0
   16d9c:	beq	16da8 <__assert_fail@plt+0x5ce8>
   16da0:	mov	r0, r4
   16da4:	pop	{r4, r5, r6, sl, fp, pc}
   16da8:	bl	10fdc <__errno_location@plt>
   16dac:	mov	r1, #0
   16db0:	str	r1, [r0]
   16db4:	mov	r0, r4
   16db8:	pop	{r4, r5, r6, sl, fp, pc}
   16dbc:	push	{r4, r5, r6, sl, fp, lr}
   16dc0:	add	fp, sp, #16
   16dc4:	mov	r4, r0
   16dc8:	bl	10fdc <__errno_location@plt>
   16dcc:	ldr	r6, [r0]
   16dd0:	mov	r5, r0
   16dd4:	mov	r0, r4
   16dd8:	bl	10ea4 <free@plt>
   16ddc:	str	r6, [r5]
   16de0:	pop	{r4, r5, r6, sl, fp, pc}
   16de4:	push	{fp, lr}
   16de8:	mov	fp, sp
   16dec:	mov	r0, #14
   16df0:	bl	11078 <nl_langinfo@plt>
   16df4:	movw	r1, #30673	; 0x77d1
   16df8:	cmp	r0, #0
   16dfc:	movt	r1, #1
   16e00:	movne	r1, r0
   16e04:	movw	r0, #32274	; 0x7e12
   16e08:	ldrb	r2, [r1]
   16e0c:	movt	r0, #1
   16e10:	cmp	r2, #0
   16e14:	movne	r0, r1
   16e18:	pop	{fp, pc}
   16e1c:	push	{r4, r5, r6, r7, fp, lr}
   16e20:	add	fp, sp, #16
   16e24:	sub	sp, sp, #8
   16e28:	cmp	r0, #0
   16e2c:	add	r5, sp, #4
   16e30:	mov	r7, r2
   16e34:	mov	r4, r1
   16e38:	movne	r5, r0
   16e3c:	mov	r0, r5
   16e40:	bl	10f4c <mbrtowc@plt>
   16e44:	mov	r6, r0
   16e48:	cmp	r7, #0
   16e4c:	beq	16e74 <__assert_fail@plt+0x5db4>
   16e50:	cmn	r6, #2
   16e54:	bcc	16e74 <__assert_fail@plt+0x5db4>
   16e58:	mov	r0, #0
   16e5c:	bl	16ebc <__assert_fail@plt+0x5dfc>
   16e60:	cmp	r0, #0
   16e64:	bne	16e74 <__assert_fail@plt+0x5db4>
   16e68:	ldrb	r0, [r4]
   16e6c:	mov	r6, #1
   16e70:	str	r0, [r5]
   16e74:	mov	r0, r6
   16e78:	sub	sp, fp, #16
   16e7c:	pop	{r4, r5, r6, r7, fp, pc}
   16e80:	cmp	r2, #0
   16e84:	beq	16eb4 <__assert_fail@plt+0x5df4>
   16e88:	mvn	r3, #0
   16e8c:	udiv	r3, r3, r2
   16e90:	cmp	r3, r1
   16e94:	bcs	16eb4 <__assert_fail@plt+0x5df4>
   16e98:	push	{fp, lr}
   16e9c:	mov	fp, sp
   16ea0:	bl	10fdc <__errno_location@plt>
   16ea4:	mov	r1, #12
   16ea8:	str	r1, [r0]
   16eac:	mov	r0, #0
   16eb0:	pop	{fp, pc}
   16eb4:	mul	r1, r2, r1
   16eb8:	b	16ce4 <__assert_fail@plt+0x5c24>
   16ebc:	push	{r4, sl, fp, lr}
   16ec0:	add	fp, sp, #8
   16ec4:	sub	sp, sp, #264	; 0x108
   16ec8:	add	r1, sp, #7
   16ecc:	movw	r2, #257	; 0x101
   16ed0:	bl	16f28 <__assert_fail@plt+0x5e68>
   16ed4:	mov	r4, #0
   16ed8:	cmp	r0, #0
   16edc:	bne	16f1c <__assert_fail@plt+0x5e5c>
   16ee0:	movw	r1, #32280	; 0x7e18
   16ee4:	add	r0, sp, #7
   16ee8:	mov	r2, #2
   16eec:	movt	r1, #1
   16ef0:	bl	10fb8 <bcmp@plt>
   16ef4:	cmp	r0, #0
   16ef8:	beq	16f1c <__assert_fail@plt+0x5e5c>
   16efc:	movw	r1, #32282	; 0x7e1a
   16f00:	add	r0, sp, #7
   16f04:	mov	r2, #6
   16f08:	movt	r1, #1
   16f0c:	bl	10fb8 <bcmp@plt>
   16f10:	cmp	r0, #0
   16f14:	mov	r4, r0
   16f18:	movwne	r4, #1
   16f1c:	mov	r0, r4
   16f20:	sub	sp, fp, #8
   16f24:	pop	{r4, sl, fp, pc}
   16f28:	push	{r4, r5, r6, r7, fp, lr}
   16f2c:	add	fp, sp, #16
   16f30:	mov	r4, r1
   16f34:	mov	r1, #0
   16f38:	mov	r6, r2
   16f3c:	bl	11060 <setlocale@plt>
   16f40:	cmp	r0, #0
   16f44:	beq	16f74 <__assert_fail@plt+0x5eb4>
   16f48:	mov	r7, r0
   16f4c:	bl	10fc4 <strlen@plt>
   16f50:	cmp	r0, r6
   16f54:	bcs	16f90 <__assert_fail@plt+0x5ed0>
   16f58:	add	r2, r0, #1
   16f5c:	mov	r0, r4
   16f60:	mov	r1, r7
   16f64:	bl	10ebc <memcpy@plt>
   16f68:	mov	r5, #0
   16f6c:	mov	r0, r5
   16f70:	pop	{r4, r5, r6, r7, fp, pc}
   16f74:	mov	r5, #22
   16f78:	cmp	r6, #0
   16f7c:	beq	16fb8 <__assert_fail@plt+0x5ef8>
   16f80:	mov	r0, #0
   16f84:	strb	r0, [r4]
   16f88:	mov	r0, r5
   16f8c:	pop	{r4, r5, r6, r7, fp, pc}
   16f90:	mov	r5, #34	; 0x22
   16f94:	cmp	r6, #0
   16f98:	beq	16fb8 <__assert_fail@plt+0x5ef8>
   16f9c:	sub	r6, r6, #1
   16fa0:	mov	r0, r4
   16fa4:	mov	r1, r7
   16fa8:	mov	r2, r6
   16fac:	bl	10ebc <memcpy@plt>
   16fb0:	mov	r0, #0
   16fb4:	strb	r0, [r4, r6]
   16fb8:	mov	r0, r5
   16fbc:	pop	{r4, r5, r6, r7, fp, pc}
   16fc0:	mov	r1, #0
   16fc4:	b	11060 <setlocale@plt>
   16fc8:	cmp	r3, #0
   16fcc:	cmpeq	r2, #0
   16fd0:	bne	16fe8 <__assert_fail@plt+0x5f28>
   16fd4:	cmp	r1, #0
   16fd8:	cmpeq	r0, #0
   16fdc:	mvnne	r1, #0
   16fe0:	mvnne	r0, #0
   16fe4:	b	17004 <__assert_fail@plt+0x5f44>
   16fe8:	sub	sp, sp, #8
   16fec:	push	{sp, lr}
   16ff0:	bl	17014 <__assert_fail@plt+0x5f54>
   16ff4:	ldr	lr, [sp, #4]
   16ff8:	add	sp, sp, #8
   16ffc:	pop	{r2, r3}
   17000:	bx	lr
   17004:	push	{r1, lr}
   17008:	mov	r0, #8
   1700c:	bl	10e68 <raise@plt>
   17010:	pop	{r1, pc}
   17014:	cmp	r1, r3
   17018:	cmpeq	r0, r2
   1701c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17020:	mov	r4, r0
   17024:	movcc	r0, #0
   17028:	mov	r5, r1
   1702c:	ldr	lr, [sp, #36]	; 0x24
   17030:	movcc	r1, r0
   17034:	bcc	17130 <__assert_fail@plt+0x6070>
   17038:	cmp	r3, #0
   1703c:	clzeq	ip, r2
   17040:	clzne	ip, r3
   17044:	addeq	ip, ip, #32
   17048:	cmp	r5, #0
   1704c:	clzeq	r1, r4
   17050:	addeq	r1, r1, #32
   17054:	clzne	r1, r5
   17058:	sub	ip, ip, r1
   1705c:	sub	sl, ip, #32
   17060:	lsl	r9, r3, ip
   17064:	rsb	fp, ip, #32
   17068:	orr	r9, r9, r2, lsl sl
   1706c:	orr	r9, r9, r2, lsr fp
   17070:	lsl	r8, r2, ip
   17074:	cmp	r5, r9
   17078:	cmpeq	r4, r8
   1707c:	movcc	r0, #0
   17080:	movcc	r1, r0
   17084:	bcc	170a0 <__assert_fail@plt+0x5fe0>
   17088:	mov	r0, #1
   1708c:	subs	r4, r4, r8
   17090:	lsl	r1, r0, sl
   17094:	orr	r1, r1, r0, lsr fp
   17098:	lsl	r0, r0, ip
   1709c:	sbc	r5, r5, r9
   170a0:	cmp	ip, #0
   170a4:	beq	17130 <__assert_fail@plt+0x6070>
   170a8:	lsr	r6, r8, #1
   170ac:	orr	r6, r6, r9, lsl #31
   170b0:	lsr	r7, r9, #1
   170b4:	mov	r2, ip
   170b8:	b	170dc <__assert_fail@plt+0x601c>
   170bc:	subs	r3, r4, r6
   170c0:	sbc	r8, r5, r7
   170c4:	adds	r3, r3, r3
   170c8:	adc	r8, r8, r8
   170cc:	adds	r4, r3, #1
   170d0:	adc	r5, r8, #0
   170d4:	subs	r2, r2, #1
   170d8:	beq	170f8 <__assert_fail@plt+0x6038>
   170dc:	cmp	r5, r7
   170e0:	cmpeq	r4, r6
   170e4:	bcs	170bc <__assert_fail@plt+0x5ffc>
   170e8:	adds	r4, r4, r4
   170ec:	adc	r5, r5, r5
   170f0:	subs	r2, r2, #1
   170f4:	bne	170dc <__assert_fail@plt+0x601c>
   170f8:	lsr	r3, r4, ip
   170fc:	orr	r3, r3, r5, lsl fp
   17100:	lsr	r2, r5, ip
   17104:	orr	r3, r3, r5, lsr sl
   17108:	adds	r0, r0, r4
   1710c:	mov	r4, r3
   17110:	lsl	r3, r2, ip
   17114:	orr	r3, r3, r4, lsl sl
   17118:	lsl	ip, r4, ip
   1711c:	orr	r3, r3, r4, lsr fp
   17120:	adc	r1, r1, r5
   17124:	subs	r0, r0, ip
   17128:	mov	r5, r2
   1712c:	sbc	r1, r1, r3
   17130:	cmp	lr, #0
   17134:	strdne	r4, [lr]
   17138:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1713c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17140:	mov	r7, r0
   17144:	ldr	r6, [pc, #72]	; 17194 <__assert_fail@plt+0x60d4>
   17148:	ldr	r5, [pc, #72]	; 17198 <__assert_fail@plt+0x60d8>
   1714c:	add	r6, pc, r6
   17150:	add	r5, pc, r5
   17154:	sub	r6, r6, r5
   17158:	mov	r8, r1
   1715c:	mov	r9, r2
   17160:	bl	10e30 <calloc@plt-0x20>
   17164:	asrs	r6, r6, #2
   17168:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1716c:	mov	r4, #0
   17170:	add	r4, r4, #1
   17174:	ldr	r3, [r5], #4
   17178:	mov	r2, r9
   1717c:	mov	r1, r8
   17180:	mov	r0, r7
   17184:	blx	r3
   17188:	cmp	r6, r4
   1718c:	bne	17170 <__assert_fail@plt+0x60b0>
   17190:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17194:			; <UNDEFINED> instruction: 0x00010db8
   17198:			; <UNDEFINED> instruction: 0x00010db0
   1719c:	bx	lr
   171a0:	ldr	r3, [pc, #12]	; 171b4 <__assert_fail@plt+0x60f4>
   171a4:	mov	r1, #0
   171a8:	add	r3, pc, r3
   171ac:	ldr	r2, [r3]
   171b0:	b	10fe8 <__cxa_atexit@plt>
   171b4:	andeq	r0, r1, ip, lsr pc

Disassembly of section .fini:

000171b8 <.fini>:
   171b8:	push	{r3, lr}
   171bc:	pop	{r3, pc}
