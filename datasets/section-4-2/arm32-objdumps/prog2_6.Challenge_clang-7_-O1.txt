
../repos/prog2/6.Challenge:     file format elf32-littlearm


Disassembly of section .init:

00010648 <.init>:
   10648:	push	{r3, lr}
   1064c:	bl	106f8 <_start@@Base+0x3c>
   10650:	pop	{r3, pc}

Disassembly of section .plt:

00010654 <printf@plt-0x14>:
   10654:	push	{lr}		; (str lr, [sp, #-4]!)
   10658:	ldr	lr, [pc, #4]	; 10664 <printf@plt-0x4>
   1065c:	add	lr, pc, lr
   10660:	ldr	pc, [lr, #8]!
   10664:	muleq	r1, ip, r9

00010668 <printf@plt>:
   10668:	add	ip, pc, #0, 12
   1066c:	add	ip, ip, #16, 20	; 0x10000
   10670:	ldr	pc, [ip, #2460]!	; 0x99c

00010674 <malloc@plt>:
   10674:	add	ip, pc, #0, 12
   10678:	add	ip, ip, #16, 20	; 0x10000
   1067c:	ldr	pc, [ip, #2452]!	; 0x994

00010680 <__libc_start_main@plt>:
   10680:	add	ip, pc, #0, 12
   10684:	add	ip, ip, #16, 20	; 0x10000
   10688:	ldr	pc, [ip, #2444]!	; 0x98c

0001068c <__gmon_start__@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2436]!	; 0x984

00010698 <exit@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #16, 20	; 0x10000
   106a0:	ldr	pc, [ip, #2428]!	; 0x97c

000106a4 <__isoc99_scanf@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2420]!	; 0x974

000106b0 <abort@plt>:
   106b0:	add	ip, pc, #0, 12
   106b4:	add	ip, ip, #16, 20	; 0x10000
   106b8:	ldr	pc, [ip, #2412]!	; 0x96c

Disassembly of section .text:

000106bc <_start@@Base>:
   106bc:	mov	fp, #0
   106c0:	mov	lr, #0
   106c4:	pop	{r1}		; (ldr r1, [sp], #4)
   106c8:	mov	r2, sp
   106cc:	push	{r2}		; (str r2, [sp, #-4]!)
   106d0:	push	{r0}		; (str r0, [sp, #-4]!)
   106d4:	ldr	ip, [pc, #16]	; 106ec <_start@@Base+0x30>
   106d8:	push	{ip}		; (str ip, [sp, #-4]!)
   106dc:	ldr	r0, [pc, #12]	; 106f0 <_start@@Base+0x34>
   106e0:	ldr	r3, [pc, #12]	; 106f4 <_start@@Base+0x38>
   106e4:	bl	10680 <__libc_start_main@plt>
   106e8:	bl	106b0 <abort@plt>
   106ec:	andeq	r0, r1, ip, lsl r9
   106f0:	andeq	r0, r1, ip, lsr #15
   106f4:			; <UNDEFINED> instruction: 0x000108bc
   106f8:	ldr	r3, [pc, #20]	; 10714 <_start@@Base+0x58>
   106fc:	ldr	r2, [pc, #20]	; 10718 <_start@@Base+0x5c>
   10700:	add	r3, pc, r3
   10704:	ldr	r2, [r3, r2]
   10708:	cmp	r2, #0
   1070c:	bxeq	lr
   10710:	b	1068c <__gmon_start__@plt>
   10714:	strdeq	r0, [r1], -r8
   10718:	andeq	r0, r0, r8, lsr #32
   1071c:	ldr	r0, [pc, #24]	; 1073c <_start@@Base+0x80>
   10720:	ldr	r3, [pc, #24]	; 10740 <_start@@Base+0x84>
   10724:	cmp	r3, r0
   10728:	bxeq	lr
   1072c:	ldr	r3, [pc, #16]	; 10744 <_start@@Base+0x88>
   10730:	cmp	r3, #0
   10734:	bxeq	lr
   10738:	bx	r3
   1073c:	andeq	r1, r2, r4, lsr r0
   10740:	andeq	r1, r2, r4, lsr r0
   10744:	andeq	r0, r0, r0
   10748:	ldr	r0, [pc, #36]	; 10774 <_start@@Base+0xb8>
   1074c:	ldr	r1, [pc, #36]	; 10778 <_start@@Base+0xbc>
   10750:	sub	r1, r1, r0
   10754:	asr	r1, r1, #2
   10758:	add	r1, r1, r1, lsr #31
   1075c:	asrs	r1, r1, #1
   10760:	bxeq	lr
   10764:	ldr	r3, [pc, #16]	; 1077c <_start@@Base+0xc0>
   10768:	cmp	r3, #0
   1076c:	bxeq	lr
   10770:	bx	r3
   10774:	andeq	r1, r2, r4, lsr r0
   10778:	andeq	r1, r2, r4, lsr r0
   1077c:	andeq	r0, r0, r0
   10780:	push	{r4, lr}
   10784:	ldr	r4, [pc, #24]	; 107a4 <_start@@Base+0xe8>
   10788:	ldrb	r3, [r4]
   1078c:	cmp	r3, #0
   10790:	popne	{r4, pc}
   10794:	bl	1071c <_start@@Base+0x60>
   10798:	mov	r3, #1
   1079c:	strb	r3, [r4]
   107a0:	pop	{r4, pc}
   107a4:	andeq	r1, r2, r4, lsr r0
   107a8:	b	10748 <_start@@Base+0x8c>

000107ac <main@@Base>:
   107ac:	push	{fp, lr}
   107b0:	mov	fp, sp
   107b4:	sub	sp, sp, #8
   107b8:	movw	r0, #2348	; 0x92c
   107bc:	movt	r0, #1
   107c0:	add	r1, sp, #4
   107c4:	bl	106a4 <__isoc99_scanf@plt>
   107c8:	ldr	r8, [sp, #4]
   107cc:	cmp	r8, #0
   107d0:	beq	108b4 <main@@Base+0x108>
   107d4:	movw	r5, #2369	; 0x941
   107d8:	movt	r5, #1
   107dc:	lsl	r0, r8, #3
   107e0:	bl	10674 <malloc@plt>
   107e4:	mov	r6, r0
   107e8:	cmp	r8, #1
   107ec:	blt	10858 <main@@Base+0xac>
   107f0:	mov	r0, #0
   107f4:	add	r1, r0, #1
   107f8:	str	r1, [r6, r0, lsl #2]
   107fc:	cmp	r8, r1
   10800:	mov	r0, r1
   10804:	bne	107f4 <main@@Base+0x48>
   10808:	movw	r0, #2351	; 0x92f
   1080c:	movt	r0, #1
   10810:	bl	10668 <printf@plt>
   10814:	mov	r9, #0
   10818:	cmp	r8, #3
   1081c:	blt	10868 <main@@Base+0xbc>
   10820:	add	sl, r6, r8, lsl #2
   10824:	add	r7, r8, #1
   10828:	mov	r9, #0
   1082c:	mov	r4, r6
   10830:	ldr	r1, [r4, r9, lsl #2]!
   10834:	mov	r0, r5
   10838:	bl	10668 <printf@plt>
   1083c:	ldr	r0, [r4, #4]
   10840:	str	r0, [sl, r9, lsl #1]
   10844:	sub	r7, r7, #1
   10848:	add	r9, r9, #2
   1084c:	cmp	r7, #3
   10850:	bgt	1082c <main@@Base+0x80>
   10854:	b	10868 <main@@Base+0xbc>
   10858:	movw	r0, #2351	; 0x92f
   1085c:	movt	r0, #1
   10860:	bl	10668 <printf@plt>
   10864:	mov	r9, #0
   10868:	ldr	r1, [r6, r9, lsl #2]
   1086c:	movw	r4, #2348	; 0x92c
   10870:	movt	r4, #1
   10874:	mov	r0, r4
   10878:	bl	10668 <printf@plt>
   1087c:	movw	r0, #2374	; 0x946
   10880:	movt	r0, #1
   10884:	bl	10668 <printf@plt>
   10888:	orr	r0, r9, #1
   1088c:	ldr	r1, [r6, r0, lsl #2]
   10890:	movw	r0, #2392	; 0x958
   10894:	movt	r0, #1
   10898:	bl	10668 <printf@plt>
   1089c:	mov	r0, r4
   108a0:	add	r1, sp, #4
   108a4:	bl	106a4 <__isoc99_scanf@plt>
   108a8:	ldr	r8, [sp, #4]
   108ac:	cmp	r8, #0
   108b0:	bne	107dc <main@@Base+0x30>
   108b4:	mov	r0, #0
   108b8:	bl	10698 <exit@plt>

000108bc <__libc_csu_init@@Base>:
   108bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   108c0:	mov	r7, r0
   108c4:	ldr	r6, [pc, #72]	; 10914 <__libc_csu_init@@Base+0x58>
   108c8:	ldr	r5, [pc, #72]	; 10918 <__libc_csu_init@@Base+0x5c>
   108cc:	add	r6, pc, r6
   108d0:	add	r5, pc, r5
   108d4:	sub	r6, r6, r5
   108d8:	mov	r8, r1
   108dc:	mov	r9, r2
   108e0:	bl	10648 <printf@plt-0x20>
   108e4:	asrs	r6, r6, #2
   108e8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   108ec:	mov	r4, #0
   108f0:	add	r4, r4, #1
   108f4:	ldr	r3, [r5], #4
   108f8:	mov	r2, r9
   108fc:	mov	r1, r8
   10900:	mov	r0, r7
   10904:	blx	r3
   10908:	cmp	r6, r4
   1090c:	bne	108f0 <__libc_csu_init@@Base+0x34>
   10910:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10914:	andeq	r0, r1, r8, lsr r6
   10918:	andeq	r0, r1, r0, lsr r6

0001091c <__libc_csu_fini@@Base>:
   1091c:	bx	lr

Disassembly of section .fini:

00010920 <.fini>:
   10920:	push	{r3, lr}
   10924:	pop	{r3, pc}
