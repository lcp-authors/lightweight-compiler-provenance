
../repos/coreutils/src/touch:     file format elf32-littlearm


Disassembly of section .init:

00011044 <.init>:
   11044:	push	{r3, lr}
   11048:	bl	1141c <__assert_fail@plt+0x4c>
   1104c:	pop	{r3, pc}

Disassembly of section .plt:

00011050 <calloc@plt-0x14>:
   11050:	push	{lr}		; (str lr, [sp, #-4]!)
   11054:	ldr	lr, [pc, #4]	; 11060 <calloc@plt-0x4>
   11058:	add	lr, pc, lr
   1105c:	ldr	pc, [lr, #8]!
   11060:	andeq	pc, r1, r0, lsr #31

00011064 <calloc@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #126976	; 0x1f000
   1106c:	ldr	pc, [ip, #4000]!	; 0xfa0

00011070 <fputs_unlocked@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #126976	; 0x1f000
   11078:	ldr	pc, [ip, #3992]!	; 0xf98

0001107c <raise@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #126976	; 0x1f000
   11084:	ldr	pc, [ip, #3984]!	; 0xf90

00011088 <gmtime_r@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #126976	; 0x1f000
   11090:	ldr	pc, [ip, #3976]!	; 0xf88

00011094 <utimensat@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #126976	; 0x1f000
   1109c:	ldr	pc, [ip, #3968]!	; 0xf80

000110a0 <strcmp@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #126976	; 0x1f000
   110a8:	ldr	pc, [ip, #3960]!	; 0xf78

000110ac <strtol@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #126976	; 0x1f000
   110b4:	ldr	pc, [ip, #3952]!	; 0xf70

000110b8 <mktime@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #126976	; 0x1f000
   110c0:	ldr	pc, [ip, #3944]!	; 0xf68

000110c4 <fflush@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #126976	; 0x1f000
   110cc:	ldr	pc, [ip, #3936]!	; 0xf60

000110d0 <free@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #126976	; 0x1f000
   110d8:	ldr	pc, [ip, #3928]!	; 0xf58

000110dc <clock_gettime@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #126976	; 0x1f000
   110e4:	ldr	pc, [ip, #3920]!	; 0xf50

000110e8 <_exit@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #126976	; 0x1f000
   110f0:	ldr	pc, [ip, #3912]!	; 0xf48

000110f4 <memcpy@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #126976	; 0x1f000
   110fc:	ldr	pc, [ip, #3904]!	; 0xf40

00011100 <mbsinit@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #126976	; 0x1f000
   11108:	ldr	pc, [ip, #3896]!	; 0xf38

0001110c <time@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #126976	; 0x1f000
   11114:	ldr	pc, [ip, #3888]!	; 0xf30

00011118 <memcmp@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #126976	; 0x1f000
   11120:	ldr	pc, [ip, #3880]!	; 0xf28

00011124 <fputc_unlocked@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #126976	; 0x1f000
   1112c:	ldr	pc, [ip, #3872]!	; 0xf20

00011130 <dcgettext@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #126976	; 0x1f000
   11138:	ldr	pc, [ip, #3864]!	; 0xf18

0001113c <dup2@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #126976	; 0x1f000
   11144:	ldr	pc, [ip, #3856]!	; 0xf10

00011148 <realloc@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #126976	; 0x1f000
   11150:	ldr	pc, [ip, #3848]!	; 0xf08

00011154 <localtime_r@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #126976	; 0x1f000
   1115c:	ldr	pc, [ip, #3840]!	; 0xf00

00011160 <textdomain@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #126976	; 0x1f000
   11168:	ldr	pc, [ip, #3832]!	; 0xef8

0001116c <iswprint@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #126976	; 0x1f000
   11174:	ldr	pc, [ip, #3824]!	; 0xef0

00011178 <tzset@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #126976	; 0x1f000
   11180:	ldr	pc, [ip, #3816]!	; 0xee8

00011184 <fwrite@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #126976	; 0x1f000
   1118c:	ldr	pc, [ip, #3808]!	; 0xee0

00011190 <lseek64@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #126976	; 0x1f000
   11198:	ldr	pc, [ip, #3800]!	; 0xed8

0001119c <__ctype_get_mb_cur_max@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #126976	; 0x1f000
   111a4:	ldr	pc, [ip, #3792]!	; 0xed0

000111a8 <__fpending@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #126976	; 0x1f000
   111b0:	ldr	pc, [ip, #3784]!	; 0xec8

000111b4 <mbrtowc@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #126976	; 0x1f000
   111bc:	ldr	pc, [ip, #3776]!	; 0xec0

000111c0 <error@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #126976	; 0x1f000
   111c8:	ldr	pc, [ip, #3768]!	; 0xeb8

000111cc <open64@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #126976	; 0x1f000
   111d4:	ldr	pc, [ip, #3760]!	; 0xeb0

000111d8 <getenv@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #126976	; 0x1f000
   111e0:	ldr	pc, [ip, #3752]!	; 0xea8

000111e4 <malloc@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #126976	; 0x1f000
   111ec:	ldr	pc, [ip, #3744]!	; 0xea0

000111f0 <__libc_start_main@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #126976	; 0x1f000
   111f8:	ldr	pc, [ip, #3736]!	; 0xe98

000111fc <strftime@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #126976	; 0x1f000
   11204:	ldr	pc, [ip, #3728]!	; 0xe90

00011208 <__vfprintf_chk@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #126976	; 0x1f000
   11210:	ldr	pc, [ip, #3720]!	; 0xe88

00011214 <__freading@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #126976	; 0x1f000
   1121c:	ldr	pc, [ip, #3712]!	; 0xe80

00011220 <localtime@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #126976	; 0x1f000
   11228:	ldr	pc, [ip, #3704]!	; 0xe78

0001122c <__ctype_tolower_loc@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #126976	; 0x1f000
   11234:	ldr	pc, [ip, #3696]!	; 0xe70

00011238 <__ctype_toupper_loc@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #126976	; 0x1f000
   11240:	ldr	pc, [ip, #3688]!	; 0xe68

00011244 <__gmon_start__@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #126976	; 0x1f000
   1124c:	ldr	pc, [ip, #3680]!	; 0xe60

00011250 <getopt_long@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #126976	; 0x1f000
   11258:	ldr	pc, [ip, #3672]!	; 0xe58

0001125c <__ctype_b_loc@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #126976	; 0x1f000
   11264:	ldr	pc, [ip, #3664]!	; 0xe50

00011268 <exit@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #126976	; 0x1f000
   11270:	ldr	pc, [ip, #3656]!	; 0xe48

00011274 <strlen@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #126976	; 0x1f000
   1127c:	ldr	pc, [ip, #3648]!	; 0xe40

00011280 <strchr@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #126976	; 0x1f000
   11288:	ldr	pc, [ip, #3640]!	; 0xe38

0001128c <setenv@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #126976	; 0x1f000
   11294:	ldr	pc, [ip, #3632]!	; 0xe30

00011298 <__errno_location@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #126976	; 0x1f000
   112a0:	ldr	pc, [ip, #3624]!	; 0xe28

000112a4 <__sprintf_chk@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #126976	; 0x1f000
   112ac:	ldr	pc, [ip, #3616]!	; 0xe20

000112b0 <snprintf@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #126976	; 0x1f000
   112b8:	ldr	pc, [ip, #3608]!	; 0xe18

000112bc <__cxa_atexit@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #126976	; 0x1f000
   112c4:	ldr	pc, [ip, #3600]!	; 0xe10

000112c8 <memset@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #126976	; 0x1f000
   112d0:	ldr	pc, [ip, #3592]!	; 0xe08

000112d4 <__printf_chk@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #126976	; 0x1f000
   112dc:	ldr	pc, [ip, #3584]!	; 0xe00

000112e0 <fileno@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #126976	; 0x1f000
   112e8:	ldr	pc, [ip, #3576]!	; 0xdf8

000112ec <__fprintf_chk@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #126976	; 0x1f000
   112f4:	ldr	pc, [ip, #3568]!	; 0xdf0

000112f8 <fclose@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #126976	; 0x1f000
   11300:	ldr	pc, [ip, #3560]!	; 0xde8

00011304 <fseeko64@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #126976	; 0x1f000
   1130c:	ldr	pc, [ip, #3552]!	; 0xde0

00011310 <__overflow@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #126976	; 0x1f000
   11318:	ldr	pc, [ip, #3544]!	; 0xdd8

0001131c <setlocale@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #126976	; 0x1f000
   11324:	ldr	pc, [ip, #3536]!	; 0xdd0

00011328 <strrchr@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #126976	; 0x1f000
   11330:	ldr	pc, [ip, #3528]!	; 0xdc8

00011334 <nl_langinfo@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #126976	; 0x1f000
   1133c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011340 <fputc@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #126976	; 0x1f000
   11348:	ldr	pc, [ip, #3512]!	; 0xdb8

0001134c <timegm@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #126976	; 0x1f000
   11354:	ldr	pc, [ip, #3504]!	; 0xdb0

00011358 <futimens@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #126976	; 0x1f000
   11360:	ldr	pc, [ip, #3496]!	; 0xda8

00011364 <bindtextdomain@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #126976	; 0x1f000
   1136c:	ldr	pc, [ip, #3488]!	; 0xda0

00011370 <__xstat64@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #126976	; 0x1f000
   11378:	ldr	pc, [ip, #3480]!	; 0xd98

0001137c <unsetenv@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #126976	; 0x1f000
   11384:	ldr	pc, [ip, #3472]!	; 0xd90

00011388 <fputs@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #126976	; 0x1f000
   11390:	ldr	pc, [ip, #3464]!	; 0xd88

00011394 <strncmp@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #126976	; 0x1f000
   1139c:	ldr	pc, [ip, #3456]!	; 0xd80

000113a0 <abort@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #126976	; 0x1f000
   113a8:	ldr	pc, [ip, #3448]!	; 0xd78

000113ac <close@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #126976	; 0x1f000
   113b4:	ldr	pc, [ip, #3440]!	; 0xd70

000113b8 <__lxstat64@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #126976	; 0x1f000
   113c0:	ldr	pc, [ip, #3432]!	; 0xd68

000113c4 <__snprintf_chk@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #126976	; 0x1f000
   113cc:	ldr	pc, [ip, #3424]!	; 0xd60

000113d0 <__assert_fail@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #126976	; 0x1f000
   113d8:	ldr	pc, [ip, #3416]!	; 0xd58

Disassembly of section .text:

000113e0 <.text>:
   113e0:	mov	fp, #0
   113e4:	mov	lr, #0
   113e8:	pop	{r1}		; (ldr r1, [sp], #4)
   113ec:	mov	r2, sp
   113f0:	push	{r2}		; (str r2, [sp, #-4]!)
   113f4:	push	{r0}		; (str r0, [sp, #-4]!)
   113f8:	ldr	ip, [pc, #16]	; 11410 <__assert_fail@plt+0x40>
   113fc:	push	{ip}		; (str ip, [sp, #-4]!)
   11400:	ldr	r0, [pc, #12]	; 11414 <__assert_fail@plt+0x44>
   11404:	ldr	r3, [pc, #12]	; 11418 <__assert_fail@plt+0x48>
   11408:	bl	111f0 <__libc_start_main@plt>
   1140c:	bl	113a0 <abort@plt>
   11410:	andeq	sp, r1, r8, ror #20
   11414:	andeq	r1, r1, r8, lsr #18
   11418:	andeq	sp, r1, r8, lsl #20
   1141c:	ldr	r3, [pc, #20]	; 11438 <__assert_fail@plt+0x68>
   11420:	ldr	r2, [pc, #20]	; 1143c <__assert_fail@plt+0x6c>
   11424:	add	r3, pc, r3
   11428:	ldr	r2, [r3, r2]
   1142c:	cmp	r2, #0
   11430:	bxeq	lr
   11434:	b	11244 <__gmon_start__@plt>
   11438:	ldrdeq	pc, [r1], -r4
   1143c:	andeq	r0, r0, r4, lsr r1
   11440:	ldr	r0, [pc, #24]	; 11460 <__assert_fail@plt+0x90>
   11444:	ldr	r3, [pc, #24]	; 11464 <__assert_fail@plt+0x94>
   11448:	cmp	r3, r0
   1144c:	bxeq	lr
   11450:	ldr	r3, [pc, #16]	; 11468 <__assert_fail@plt+0x98>
   11454:	cmp	r3, #0
   11458:	bxeq	lr
   1145c:	bx	r3
   11460:	andeq	r1, r3, ip, lsl #3
   11464:	andeq	r1, r3, ip, lsl #3
   11468:	andeq	r0, r0, r0
   1146c:	ldr	r0, [pc, #36]	; 11498 <__assert_fail@plt+0xc8>
   11470:	ldr	r1, [pc, #36]	; 1149c <__assert_fail@plt+0xcc>
   11474:	sub	r1, r1, r0
   11478:	asr	r1, r1, #2
   1147c:	add	r1, r1, r1, lsr #31
   11480:	asrs	r1, r1, #1
   11484:	bxeq	lr
   11488:	ldr	r3, [pc, #16]	; 114a0 <__assert_fail@plt+0xd0>
   1148c:	cmp	r3, #0
   11490:	bxeq	lr
   11494:	bx	r3
   11498:	andeq	r1, r3, ip, lsl #3
   1149c:	andeq	r1, r3, ip, lsl #3
   114a0:	andeq	r0, r0, r0
   114a4:	push	{r4, lr}
   114a8:	ldr	r4, [pc, #24]	; 114c8 <__assert_fail@plt+0xf8>
   114ac:	ldrb	r3, [r4]
   114b0:	cmp	r3, #0
   114b4:	popne	{r4, pc}
   114b8:	bl	11440 <__assert_fail@plt+0x70>
   114bc:	mov	r3, #1
   114c0:	strb	r3, [r4]
   114c4:	pop	{r4, pc}
   114c8:	andeq	r1, r3, ip, lsr #3
   114cc:	b	1146c <__assert_fail@plt+0x9c>
   114d0:	strd	r4, [sp, #-16]!
   114d4:	str	r6, [sp, #8]
   114d8:	str	lr, [sp, #12]
   114dc:	mov	r4, r1
   114e0:	bl	17fcc <__assert_fail@plt+0x6bfc>
   114e4:	cmp	r0, #0
   114e8:	beq	114fc <__assert_fail@plt+0x12c>
   114ec:	ldrd	r4, [sp]
   114f0:	ldr	r6, [sp, #8]
   114f4:	add	sp, sp, #12
   114f8:	pop	{pc}		; (ldr pc, [sp], #4)
   114fc:	mov	r2, #5
   11500:	movw	r1, #56188	; 0xdb7c
   11504:	movt	r1, #1
   11508:	bl	11130 <dcgettext@plt>
   1150c:	mov	r5, r0
   11510:	mov	r0, r4
   11514:	bl	1a754 <__assert_fail@plt+0x9384>
   11518:	mov	r3, r0
   1151c:	mov	r2, r5
   11520:	mov	r1, #0
   11524:	mov	r0, #1
   11528:	bl	111c0 <error@plt>
   1152c:	push	{lr}		; (str lr, [sp, #-4]!)
   11530:	sub	sp, sp, #60	; 0x3c
   11534:	subs	r4, r0, #0
   11538:	beq	11580 <__assert_fail@plt+0x1b0>
   1153c:	movw	r3, #4512	; 0x11a0
   11540:	movt	r3, #3
   11544:	ldr	r5, [r3]
   11548:	mov	r2, #5
   1154c:	movw	r1, #56220	; 0xdb9c
   11550:	movt	r1, #1
   11554:	mov	r0, #0
   11558:	bl	11130 <dcgettext@plt>
   1155c:	movw	r3, #4568	; 0x11d8
   11560:	movt	r3, #3
   11564:	ldr	r3, [r3]
   11568:	mov	r2, r0
   1156c:	mov	r1, #1
   11570:	mov	r0, r5
   11574:	bl	112ec <__fprintf_chk@plt>
   11578:	mov	r0, r4
   1157c:	bl	11268 <exit@plt>
   11580:	mov	r2, #5
   11584:	movw	r1, #56260	; 0xdbc4
   11588:	movt	r1, #1
   1158c:	mov	r0, #0
   11590:	bl	11130 <dcgettext@plt>
   11594:	movw	r3, #4568	; 0x11d8
   11598:	movt	r3, #3
   1159c:	ldr	r2, [r3]
   115a0:	mov	r1, r0
   115a4:	mov	r0, #1
   115a8:	bl	112d4 <__printf_chk@plt>
   115ac:	mov	r2, #5
   115b0:	movw	r1, #56292	; 0xdbe4
   115b4:	movt	r1, #1
   115b8:	mov	r0, #0
   115bc:	bl	11130 <dcgettext@plt>
   115c0:	movw	r5, #4516	; 0x11a4
   115c4:	movt	r5, #3
   115c8:	ldr	r1, [r5]
   115cc:	bl	11070 <fputs_unlocked@plt>
   115d0:	mov	r2, #5
   115d4:	movw	r1, #56584	; 0xdd08
   115d8:	movt	r1, #1
   115dc:	mov	r0, #0
   115e0:	bl	11130 <dcgettext@plt>
   115e4:	ldr	r1, [r5]
   115e8:	bl	11070 <fputs_unlocked@plt>
   115ec:	mov	r2, #5
   115f0:	movw	r1, #56660	; 0xdd54
   115f4:	movt	r1, #1
   115f8:	mov	r0, #0
   115fc:	bl	11130 <dcgettext@plt>
   11600:	ldr	r1, [r5]
   11604:	bl	11070 <fputs_unlocked@plt>
   11608:	mov	r2, #5
   1160c:	movw	r1, #56872	; 0xde28
   11610:	movt	r1, #1
   11614:	mov	r0, #0
   11618:	bl	11130 <dcgettext@plt>
   1161c:	ldr	r1, [r5]
   11620:	bl	11070 <fputs_unlocked@plt>
   11624:	mov	r2, #5
   11628:	movw	r1, #57136	; 0xdf30
   1162c:	movt	r1, #1
   11630:	mov	r0, #0
   11634:	bl	11130 <dcgettext@plt>
   11638:	ldr	r1, [r5]
   1163c:	bl	11070 <fputs_unlocked@plt>
   11640:	mov	r2, #5
   11644:	movw	r1, #57480	; 0xe088
   11648:	movt	r1, #1
   1164c:	mov	r0, #0
   11650:	bl	11130 <dcgettext@plt>
   11654:	ldr	r1, [r5]
   11658:	bl	11070 <fputs_unlocked@plt>
   1165c:	mov	r2, #5
   11660:	movw	r1, #57528	; 0xe0b8
   11664:	movt	r1, #1
   11668:	mov	r0, #0
   1166c:	bl	11130 <dcgettext@plt>
   11670:	ldr	r1, [r5]
   11674:	bl	11070 <fputs_unlocked@plt>
   11678:	mov	r2, #5
   1167c:	movw	r1, #57584	; 0xe0f0
   11680:	movt	r1, #1
   11684:	mov	r0, #0
   11688:	bl	11130 <dcgettext@plt>
   1168c:	ldr	r1, [r5]
   11690:	bl	11070 <fputs_unlocked@plt>
   11694:	movw	r0, #55952	; 0xda90
   11698:	movt	r0, #1
   1169c:	ldr	r1, [r0]
   116a0:	ldr	r3, [r0, #4]
   116a4:	str	r1, [sp]
   116a8:	str	r3, [sp, #4]
   116ac:	ldrd	r2, [r0, #8]
   116b0:	strd	r2, [sp, #8]
   116b4:	ldrd	r2, [r0, #16]
   116b8:	strd	r2, [sp, #16]
   116bc:	ldrd	r2, [r0, #24]
   116c0:	strd	r2, [sp, #24]
   116c4:	ldrd	r2, [r0, #32]
   116c8:	strd	r2, [sp, #32]
   116cc:	ldrd	r2, [r0, #40]	; 0x28
   116d0:	strd	r2, [sp, #40]	; 0x28
   116d4:	ldrd	r2, [r0, #48]	; 0x30
   116d8:	strd	r2, [sp, #48]	; 0x30
   116dc:	cmp	r1, #0
   116e0:	moveq	r5, sp
   116e4:	beq	11710 <__assert_fail@plt+0x340>
   116e8:	mov	r5, sp
   116ec:	movw	r6, #56212	; 0xdb94
   116f0:	movt	r6, #1
   116f4:	mov	r0, r6
   116f8:	bl	110a0 <strcmp@plt>
   116fc:	cmp	r0, #0
   11700:	beq	11710 <__assert_fail@plt+0x340>
   11704:	ldr	r1, [r5, #8]!
   11708:	cmp	r1, #0
   1170c:	bne	116f4 <__assert_fail@plt+0x324>
   11710:	ldr	r5, [r5, #4]
   11714:	cmp	r5, #0
   11718:	beq	11874 <__assert_fail@plt+0x4a4>
   1171c:	mov	r2, #5
   11720:	movw	r1, #57656	; 0xe138
   11724:	movt	r1, #1
   11728:	mov	r0, #0
   1172c:	bl	11130 <dcgettext@plt>
   11730:	movw	r3, #57680	; 0xe150
   11734:	movt	r3, #1
   11738:	movw	r2, #57720	; 0xe178
   1173c:	movt	r2, #1
   11740:	mov	r1, r0
   11744:	mov	r0, #1
   11748:	bl	112d4 <__printf_chk@plt>
   1174c:	mov	r1, #0
   11750:	mov	r0, #5
   11754:	bl	1131c <setlocale@plt>
   11758:	cmp	r0, #0
   1175c:	beq	11778 <__assert_fail@plt+0x3a8>
   11760:	mov	r2, #3
   11764:	movw	r1, #57736	; 0xe188
   11768:	movt	r1, #1
   1176c:	bl	11394 <strncmp@plt>
   11770:	cmp	r0, #0
   11774:	bne	117f4 <__assert_fail@plt+0x424>
   11778:	mov	r2, #5
   1177c:	movw	r1, #57812	; 0xe1d4
   11780:	movt	r1, #1
   11784:	mov	r0, #0
   11788:	bl	11130 <dcgettext@plt>
   1178c:	movw	r6, #56212	; 0xdb94
   11790:	movt	r6, #1
   11794:	mov	r3, r6
   11798:	movw	r2, #57680	; 0xe150
   1179c:	movt	r2, #1
   117a0:	mov	r1, r0
   117a4:	mov	r0, #1
   117a8:	bl	112d4 <__printf_chk@plt>
   117ac:	mov	r2, #5
   117b0:	movw	r1, #57840	; 0xe1f0
   117b4:	movt	r1, #1
   117b8:	mov	r0, #0
   117bc:	bl	11130 <dcgettext@plt>
   117c0:	mov	r1, r0
   117c4:	movw	r2, #58308	; 0xe3c4
   117c8:	movt	r2, #1
   117cc:	movw	r3, #64580	; 0xfc44
   117d0:	movt	r3, #1
   117d4:	cmp	r5, r6
   117d8:	moveq	r3, r2
   117dc:	mov	r2, r5
   117e0:	mov	r0, #1
   117e4:	bl	112d4 <__printf_chk@plt>
   117e8:	b	11578 <__assert_fail@plt+0x1a8>
   117ec:	movw	r5, #56212	; 0xdb94
   117f0:	movt	r5, #1
   117f4:	mov	r2, #5
   117f8:	movw	r1, #57740	; 0xe18c
   117fc:	movt	r1, #1
   11800:	mov	r0, #0
   11804:	bl	11130 <dcgettext@plt>
   11808:	movw	r3, #4516	; 0x11a4
   1180c:	movt	r3, #3
   11810:	ldr	r1, [r3]
   11814:	bl	11070 <fputs_unlocked@plt>
   11818:	b	11778 <__assert_fail@plt+0x3a8>
   1181c:	mov	r2, #5
   11820:	movw	r1, #57812	; 0xe1d4
   11824:	movt	r1, #1
   11828:	mov	r0, #0
   1182c:	bl	11130 <dcgettext@plt>
   11830:	movw	r5, #56212	; 0xdb94
   11834:	movt	r5, #1
   11838:	mov	r3, r5
   1183c:	movw	r2, #57680	; 0xe150
   11840:	movt	r2, #1
   11844:	mov	r1, r0
   11848:	mov	r0, #1
   1184c:	bl	112d4 <__printf_chk@plt>
   11850:	mov	r2, #5
   11854:	movw	r1, #57840	; 0xe1f0
   11858:	movt	r1, #1
   1185c:	mov	r0, #0
   11860:	bl	11130 <dcgettext@plt>
   11864:	mov	r1, r0
   11868:	movw	r3, #58308	; 0xe3c4
   1186c:	movt	r3, #1
   11870:	b	117dc <__assert_fail@plt+0x40c>
   11874:	mov	r2, #5
   11878:	movw	r1, #57656	; 0xe138
   1187c:	movt	r1, #1
   11880:	mov	r0, #0
   11884:	bl	11130 <dcgettext@plt>
   11888:	movw	r3, #57680	; 0xe150
   1188c:	movt	r3, #1
   11890:	movw	r2, #57720	; 0xe178
   11894:	movt	r2, #1
   11898:	mov	r1, r0
   1189c:	mov	r0, #1
   118a0:	bl	112d4 <__printf_chk@plt>
   118a4:	mov	r1, #0
   118a8:	mov	r0, #5
   118ac:	bl	1131c <setlocale@plt>
   118b0:	cmp	r0, #0
   118b4:	beq	1181c <__assert_fail@plt+0x44c>
   118b8:	mov	r2, #3
   118bc:	movw	r1, #57736	; 0xe188
   118c0:	movt	r1, #1
   118c4:	bl	11394 <strncmp@plt>
   118c8:	cmp	r0, #0
   118cc:	bne	117ec <__assert_fail@plt+0x41c>
   118d0:	mov	r2, #5
   118d4:	movw	r1, #57812	; 0xe1d4
   118d8:	movt	r1, #1
   118dc:	mov	r0, #0
   118e0:	bl	11130 <dcgettext@plt>
   118e4:	movw	r5, #56212	; 0xdb94
   118e8:	movt	r5, #1
   118ec:	mov	r3, r5
   118f0:	movw	r2, #57680	; 0xe150
   118f4:	movt	r2, #1
   118f8:	mov	r1, r0
   118fc:	mov	r0, #1
   11900:	bl	112d4 <__printf_chk@plt>
   11904:	mov	r2, #5
   11908:	movw	r1, #57840	; 0xe1f0
   1190c:	movt	r1, #1
   11910:	mov	r0, #0
   11914:	bl	11130 <dcgettext@plt>
   11918:	mov	r1, r0
   1191c:	movw	r3, #58308	; 0xe3c4
   11920:	movt	r3, #1
   11924:	b	117dc <__assert_fail@plt+0x40c>
   11928:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1192c:	strd	r6, [sp, #8]
   11930:	strd	r8, [sp, #16]
   11934:	strd	sl, [sp, #24]
   11938:	str	lr, [sp, #32]
   1193c:	sub	sp, sp, #164	; 0xa4
   11940:	mov	r8, r0
   11944:	mov	r6, r1
   11948:	ldr	r0, [r1]
   1194c:	bl	18458 <__assert_fail@plt+0x7088>
   11950:	movw	r1, #64580	; 0xfc44
   11954:	movt	r1, #1
   11958:	mov	r0, #6
   1195c:	bl	1131c <setlocale@plt>
   11960:	movw	r4, #57724	; 0xe17c
   11964:	movt	r4, #1
   11968:	movw	r1, #57892	; 0xe224
   1196c:	movt	r1, #1
   11970:	mov	r0, r4
   11974:	bl	11364 <bindtextdomain@plt>
   11978:	mov	r0, r4
   1197c:	bl	11160 <textdomain@plt>
   11980:	movw	r0, #10124	; 0x278c
   11984:	movt	r0, #1
   11988:	bl	1da6c <__assert_fail@plt+0xc69c>
   1198c:	movw	r2, #4528	; 0x11b0
   11990:	movt	r2, #3
   11994:	mov	r3, #0
   11998:	str	r3, [r2, #16]
   1199c:	strb	r3, [r2, #20]
   119a0:	strb	r3, [r2, #21]
   119a4:	mov	fp, r3
   119a8:	str	r3, [sp, #28]
   119ac:	movw	sl, #55952	; 0xda90
   119b0:	movt	sl, #1
   119b4:	add	r9, sl, #100	; 0x64
   119b8:	movw	r7, #57992	; 0xe288
   119bc:	movt	r7, #1
   119c0:	mov	r5, r2
   119c4:	mov	r3, #0
   119c8:	str	r3, [sp]
   119cc:	mov	r3, r9
   119d0:	mov	r2, r7
   119d4:	mov	r1, r6
   119d8:	mov	r0, r8
   119dc:	bl	11250 <getopt_long@plt>
   119e0:	cmn	r0, #1
   119e4:	beq	11c00 <__assert_fail@plt+0x830>
   119e8:	cmp	r0, #102	; 0x66
   119ec:	beq	119c4 <__assert_fail@plt+0x5f4>
   119f0:	ble	11a20 <__assert_fail@plt+0x650>
   119f4:	cmp	r0, #114	; 0x72
   119f8:	beq	11b6c <__assert_fail@plt+0x79c>
   119fc:	bgt	11adc <__assert_fail@plt+0x70c>
   11a00:	cmp	r0, #104	; 0x68
   11a04:	beq	11b60 <__assert_fail@plt+0x790>
   11a08:	cmp	r0, #109	; 0x6d
   11a0c:	bne	11bf8 <__assert_fail@plt+0x828>
   11a10:	ldr	r3, [r5, #16]
   11a14:	orr	r3, r3, #2
   11a18:	str	r3, [r5, #16]
   11a1c:	b	119c4 <__assert_fail@plt+0x5f4>
   11a20:	cmp	r0, #97	; 0x61
   11a24:	beq	11b44 <__assert_fail@plt+0x774>
   11a28:	ble	11a4c <__assert_fail@plt+0x67c>
   11a2c:	cmp	r0, #99	; 0x63
   11a30:	beq	11b54 <__assert_fail@plt+0x784>
   11a34:	cmp	r0, #100	; 0x64
   11a38:	bne	11bf8 <__assert_fail@plt+0x828>
   11a3c:	movw	r3, #4520	; 0x11a8
   11a40:	movt	r3, #3
   11a44:	ldr	fp, [r3]
   11a48:	b	119c4 <__assert_fail@plt+0x5f4>
   11a4c:	cmn	r0, #3
   11a50:	bne	11acc <__assert_fail@plt+0x6fc>
   11a54:	movw	r3, #4416	; 0x1140
   11a58:	movt	r3, #3
   11a5c:	movw	r0, #4516	; 0x11a4
   11a60:	movt	r0, #3
   11a64:	mov	r4, #0
   11a68:	str	r4, [sp, #20]
   11a6c:	movw	r2, #57924	; 0xe244
   11a70:	movt	r2, #1
   11a74:	str	r2, [sp, #16]
   11a78:	movw	r2, #57936	; 0xe250
   11a7c:	movt	r2, #1
   11a80:	str	r2, [sp, #12]
   11a84:	movw	r2, #57952	; 0xe260
   11a88:	movt	r2, #1
   11a8c:	str	r2, [sp, #8]
   11a90:	movw	r2, #57964	; 0xe26c
   11a94:	movt	r2, #1
   11a98:	str	r2, [sp, #4]
   11a9c:	movw	r2, #57980	; 0xe27c
   11aa0:	movt	r2, #1
   11aa4:	str	r2, [sp]
   11aa8:	ldr	r3, [r3]
   11aac:	movw	r2, #57720	; 0xe178
   11ab0:	movt	r2, #1
   11ab4:	movw	r1, #56212	; 0xdb94
   11ab8:	movt	r1, #1
   11abc:	ldr	r0, [r0]
   11ac0:	bl	1b1b4 <__assert_fail@plt+0x9de4>
   11ac4:	mov	r0, r4
   11ac8:	bl	11268 <exit@plt>
   11acc:	cmn	r0, #2
   11ad0:	bne	11bf8 <__assert_fail@plt+0x828>
   11ad4:	mov	r0, #0
   11ad8:	bl	1152c <__assert_fail@plt+0x15c>
   11adc:	cmp	r0, #116	; 0x74
   11ae0:	beq	11b88 <__assert_fail@plt+0x7b8>
   11ae4:	cmp	r0, #256	; 0x100
   11ae8:	bne	11bf8 <__assert_fail@plt+0x828>
   11aec:	movw	r1, #4520	; 0x11a8
   11af0:	movt	r1, #3
   11af4:	mov	r3, #1
   11af8:	str	r3, [sp, #8]
   11afc:	movw	r3, #4420	; 0x1144
   11b00:	movt	r3, #3
   11b04:	ldr	r3, [r3]
   11b08:	str	r3, [sp, #4]
   11b0c:	mov	r3, #4
   11b10:	str	r3, [sp]
   11b14:	add	r3, sl, #56	; 0x38
   11b18:	add	r2, sl, #76	; 0x4c
   11b1c:	ldr	r1, [r1]
   11b20:	movw	r0, #57916	; 0xe23c
   11b24:	movt	r0, #1
   11b28:	bl	12664 <__assert_fail@plt+0x1294>
   11b2c:	add	r0, sl, r0, lsl #2
   11b30:	ldr	r3, [r5, #16]
   11b34:	ldr	r2, [r0, #56]	; 0x38
   11b38:	orr	r3, r3, r2
   11b3c:	str	r3, [r5, #16]
   11b40:	b	119c4 <__assert_fail@plt+0x5f4>
   11b44:	ldr	r3, [r5, #16]
   11b48:	orr	r3, r3, #1
   11b4c:	str	r3, [r5, #16]
   11b50:	b	119c4 <__assert_fail@plt+0x5f4>
   11b54:	mov	r3, #1
   11b58:	strb	r3, [r5, #21]
   11b5c:	b	119c4 <__assert_fail@plt+0x5f4>
   11b60:	mov	r3, #1
   11b64:	strb	r3, [r5, #22]
   11b68:	b	119c4 <__assert_fail@plt+0x5f4>
   11b6c:	mov	r3, #1
   11b70:	strb	r3, [r5, #20]
   11b74:	movw	r3, #4520	; 0x11a8
   11b78:	movt	r3, #3
   11b7c:	ldr	r3, [r3]
   11b80:	str	r3, [r5, #24]
   11b84:	b	119c4 <__assert_fail@plt+0x5f4>
   11b88:	movw	r3, #4520	; 0x11a8
   11b8c:	movt	r3, #3
   11b90:	mov	r2, #6
   11b94:	ldr	r1, [r3]
   11b98:	mov	r0, r5
   11b9c:	bl	18120 <__assert_fail@plt+0x6d50>
   11ba0:	subs	r3, r0, #0
   11ba4:	str	r3, [sp, #28]
   11ba8:	beq	11bc0 <__assert_fail@plt+0x7f0>
   11bac:	mov	r3, #0
   11bb0:	str	r3, [r5, #4]
   11bb4:	ldrd	r2, [r5]
   11bb8:	strd	r2, [r5, #8]
   11bbc:	b	119c4 <__assert_fail@plt+0x5f4>
   11bc0:	mov	r2, #5
   11bc4:	movw	r1, #56188	; 0xdb7c
   11bc8:	movt	r1, #1
   11bcc:	bl	11130 <dcgettext@plt>
   11bd0:	mov	r4, r0
   11bd4:	movw	r3, #4520	; 0x11a8
   11bd8:	movt	r3, #3
   11bdc:	ldr	r0, [r3]
   11be0:	bl	1a754 <__assert_fail@plt+0x9384>
   11be4:	mov	r3, r0
   11be8:	mov	r2, r4
   11bec:	mov	r1, #0
   11bf0:	mov	r0, #1
   11bf4:	bl	111c0 <error@plt>
   11bf8:	mov	r0, #1
   11bfc:	bl	1152c <__assert_fail@plt+0x15c>
   11c00:	mov	r4, r0
   11c04:	movw	r3, #4528	; 0x11b0
   11c08:	movt	r3, #3
   11c0c:	ldr	r3, [r3, #16]
   11c10:	cmp	r3, #0
   11c14:	bne	11c28 <__assert_fail@plt+0x858>
   11c18:	movw	r3, #4528	; 0x11b0
   11c1c:	movt	r3, #3
   11c20:	mov	r2, #3
   11c24:	str	r2, [r3, #16]
   11c28:	ldr	r3, [sp, #28]
   11c2c:	cmp	r3, #0
   11c30:	beq	11cc8 <__assert_fail@plt+0x8f8>
   11c34:	movw	r3, #4528	; 0x11b0
   11c38:	movt	r3, #3
   11c3c:	ldrb	r3, [r3, #20]
   11c40:	cmp	fp, #0
   11c44:	moveq	fp, r3
   11c48:	orrne	fp, r3, #1
   11c4c:	cmp	fp, #0
   11c50:	bne	11c9c <__assert_fail@plt+0x8cc>
   11c54:	movw	r3, #4504	; 0x1198
   11c58:	movt	r3, #3
   11c5c:	ldr	r3, [r3]
   11c60:	cmp	r3, r8
   11c64:	beq	12000 <__assert_fail@plt+0xc30>
   11c68:	movge	fp, #1
   11c6c:	bge	122e4 <__assert_fail@plt+0xf14>
   11c70:	mov	fp, #1
   11c74:	movw	r2, #58200	; 0xe358
   11c78:	movt	r2, #1
   11c7c:	str	r2, [sp, #28]
   11c80:	movw	r5, #4528	; 0x11b0
   11c84:	movt	r5, #3
   11c88:	movw	r2, #58244	; 0xe384
   11c8c:	movt	r2, #1
   11c90:	str	r2, [sp, #36]	; 0x24
   11c94:	str	r4, [sp, #32]
   11c98:	b	12138 <__assert_fail@plt+0xd68>
   11c9c:	mov	r2, #5
   11ca0:	movw	r1, #58004	; 0xe294
   11ca4:	movt	r1, #1
   11ca8:	mov	r0, #0
   11cac:	bl	11130 <dcgettext@plt>
   11cb0:	mov	r2, r0
   11cb4:	mov	r1, #0
   11cb8:	mov	r0, r1
   11cbc:	bl	111c0 <error@plt>
   11cc0:	mov	r0, #1
   11cc4:	bl	1152c <__assert_fail@plt+0x15c>
   11cc8:	movw	r3, #4528	; 0x11b0
   11ccc:	movt	r3, #3
   11cd0:	ldrb	r3, [r3, #20]
   11cd4:	cmp	r3, #0
   11cd8:	beq	11e08 <__assert_fail@plt+0xa38>
   11cdc:	movw	r3, #4528	; 0x11b0
   11ce0:	movt	r3, #3
   11ce4:	ldrb	r3, [r3, #22]
   11ce8:	cmp	r3, #0
   11cec:	beq	11d84 <__assert_fail@plt+0x9b4>
   11cf0:	movw	r3, #4528	; 0x11b0
   11cf4:	movt	r3, #3
   11cf8:	add	r2, sp, #56	; 0x38
   11cfc:	ldr	r1, [r3, #24]
   11d00:	mov	r0, #3
   11d04:	bl	113b8 <__lxstat64@plt>
   11d08:	adds	r0, r0, #0
   11d0c:	movne	r0, #1
   11d10:	cmp	r0, #0
   11d14:	bne	11da8 <__assert_fail@plt+0x9d8>
   11d18:	movw	r3, #4528	; 0x11b0
   11d1c:	movt	r3, #3
   11d20:	ldr	r2, [sp, #128]	; 0x80
   11d24:	str	r2, [r3]
   11d28:	ldr	r2, [sp, #132]	; 0x84
   11d2c:	str	r2, [r3, #4]
   11d30:	ldr	r2, [sp, #136]	; 0x88
   11d34:	str	r2, [r3, #8]
   11d38:	ldr	r2, [sp, #140]	; 0x8c
   11d3c:	str	r2, [r3, #12]
   11d40:	cmp	fp, #0
   11d44:	beq	11c54 <__assert_fail@plt+0x884>
   11d48:	movw	r3, #4528	; 0x11b0
   11d4c:	movt	r3, #3
   11d50:	ldr	r3, [r3, #16]
   11d54:	tst	r3, #1
   11d58:	bne	11df0 <__assert_fail@plt+0xa20>
   11d5c:	movw	r3, #4528	; 0x11b0
   11d60:	movt	r3, #3
   11d64:	ldr	r3, [r3, #16]
   11d68:	tst	r3, #2
   11d6c:	beq	11c54 <__assert_fail@plt+0x884>
   11d70:	ldr	r0, [pc, #1420]	; 12304 <__assert_fail@plt+0xf34>
   11d74:	mov	r2, r0
   11d78:	mov	r1, fp
   11d7c:	bl	114d0 <__assert_fail@plt+0x100>
   11d80:	b	11c54 <__assert_fail@plt+0x884>
   11d84:	movw	r3, #4528	; 0x11b0
   11d88:	movt	r3, #3
   11d8c:	add	r2, sp, #56	; 0x38
   11d90:	ldr	r1, [r3, #24]
   11d94:	mov	r0, #3
   11d98:	bl	11370 <__xstat64@plt>
   11d9c:	adds	r0, r0, #0
   11da0:	movne	r0, #1
   11da4:	b	11d10 <__assert_fail@plt+0x940>
   11da8:	bl	11298 <__errno_location@plt>
   11dac:	ldr	r4, [r0]
   11db0:	mov	r2, #5
   11db4:	movw	r1, #58052	; 0xe2c4
   11db8:	movt	r1, #1
   11dbc:	mov	r0, #0
   11dc0:	bl	11130 <dcgettext@plt>
   11dc4:	mov	r5, r0
   11dc8:	movw	r3, #4528	; 0x11b0
   11dcc:	movt	r3, #3
   11dd0:	ldr	r1, [r3, #24]
   11dd4:	mov	r0, #4
   11dd8:	bl	1a464 <__assert_fail@plt+0x9094>
   11ddc:	mov	r3, r0
   11de0:	mov	r2, r5
   11de4:	mov	r1, r4
   11de8:	mov	r0, #1
   11dec:	bl	111c0 <error@plt>
   11df0:	movw	r0, #4528	; 0x11b0
   11df4:	movt	r0, #3
   11df8:	mov	r2, r0
   11dfc:	mov	r1, fp
   11e00:	bl	114d0 <__assert_fail@plt+0x100>
   11e04:	b	11d5c <__assert_fail@plt+0x98c>
   11e08:	cmp	fp, #0
   11e0c:	beq	11ea0 <__assert_fail@plt+0xad0>
   11e10:	add	r0, sp, #40	; 0x28
   11e14:	bl	129c4 <__assert_fail@plt+0x15f4>
   11e18:	movw	r5, #4528	; 0x11b0
   11e1c:	movt	r5, #3
   11e20:	add	r2, sp, #40	; 0x28
   11e24:	mov	r1, fp
   11e28:	mov	r0, r5
   11e2c:	bl	114d0 <__assert_fail@plt+0x100>
   11e30:	ldrd	r2, [r5]
   11e34:	strd	r2, [r5, #8]
   11e38:	ldr	r3, [r5, #16]
   11e3c:	cmp	r3, #3
   11e40:	bne	11c54 <__assert_fail@plt+0x884>
   11e44:	ldr	r2, [sp, #40]	; 0x28
   11e48:	ldr	r3, [r5]
   11e4c:	cmp	r3, r2
   11e50:	bne	11c54 <__assert_fail@plt+0x884>
   11e54:	ldr	r1, [sp, #44]	; 0x2c
   11e58:	ldr	r3, [r5, #4]
   11e5c:	cmp	r3, r1
   11e60:	bne	11c54 <__assert_fail@plt+0x884>
   11e64:	eor	r2, r2, #1
   11e68:	str	r2, [sp, #48]	; 0x30
   11e6c:	str	r1, [sp, #52]	; 0x34
   11e70:	add	r2, sp, #48	; 0x30
   11e74:	mov	r1, fp
   11e78:	add	r0, sp, #56	; 0x38
   11e7c:	bl	114d0 <__assert_fail@plt+0x100>
   11e80:	ldr	r2, [sp, #56]	; 0x38
   11e84:	ldr	r3, [sp, #48]	; 0x30
   11e88:	cmp	r2, r3
   11e8c:	bne	11c54 <__assert_fail@plt+0x884>
   11e90:	ldr	r2, [sp, #60]	; 0x3c
   11e94:	ldr	r3, [sp, #52]	; 0x34
   11e98:	cmp	r2, r3
   11e9c:	bne	11c54 <__assert_fail@plt+0x884>
   11ea0:	movw	r3, #4504	; 0x1198
   11ea4:	movt	r3, #3
   11ea8:	ldr	r3, [r3]
   11eac:	sub	r3, r8, r3
   11eb0:	cmp	r3, #1
   11eb4:	bgt	11ee4 <__assert_fail@plt+0xb14>
   11eb8:	movw	r3, #4528	; 0x11b0
   11ebc:	movt	r3, #3
   11ec0:	ldr	r3, [r3, #16]
   11ec4:	cmp	r3, #3
   11ec8:	beq	11fec <__assert_fail@plt+0xc1c>
   11ecc:	movw	r3, #4528	; 0x11b0
   11ed0:	movt	r3, #3
   11ed4:	mvn	r2, #-1073741824	; 0xc0000000
   11ed8:	str	r2, [r3, #4]
   11edc:	str	r2, [r3, #12]
   11ee0:	b	11c54 <__assert_fail@plt+0x884>
   11ee4:	bl	183e8 <__assert_fail@plt+0x7018>
   11ee8:	movw	r3, #3503	; 0xdaf
   11eec:	movt	r3, #3
   11ef0:	cmp	r0, r3
   11ef4:	bgt	11eb8 <__assert_fail@plt+0xae8>
   11ef8:	movw	r3, #4504	; 0x1198
   11efc:	movt	r3, #3
   11f00:	ldr	r3, [r3]
   11f04:	mov	r2, #9
   11f08:	ldr	r1, [r6, r3, lsl #2]
   11f0c:	movw	r0, #4528	; 0x11b0
   11f10:	movt	r0, #3
   11f14:	bl	18120 <__assert_fail@plt+0x6d50>
   11f18:	cmp	r0, #0
   11f1c:	beq	11eb8 <__assert_fail@plt+0xae8>
   11f20:	movw	r1, #4528	; 0x11b0
   11f24:	movt	r1, #3
   11f28:	mov	r3, #0
   11f2c:	str	r3, [r1, #4]
   11f30:	ldrd	r2, [r1]
   11f34:	strd	r2, [r1, #8]
   11f38:	movw	r0, #58084	; 0xe2e4
   11f3c:	movt	r0, #1
   11f40:	bl	111d8 <getenv@plt>
   11f44:	cmp	r0, #0
   11f48:	beq	11f64 <__assert_fail@plt+0xb94>
   11f4c:	movw	r3, #4504	; 0x1198
   11f50:	movt	r3, #3
   11f54:	ldr	r2, [r3]
   11f58:	add	r2, r2, #1
   11f5c:	str	r2, [r3]
   11f60:	b	11c54 <__assert_fail@plt+0x884>
   11f64:	movw	r0, #4528	; 0x11b0
   11f68:	movt	r0, #3
   11f6c:	bl	11220 <localtime@plt>
   11f70:	subs	r5, r0, #0
   11f74:	beq	11f4c <__assert_fail@plt+0xb7c>
   11f78:	mov	r2, #5
   11f7c:	movw	r1, #58100	; 0xe2f4
   11f80:	movt	r1, #1
   11f84:	mov	r0, #0
   11f88:	bl	11130 <dcgettext@plt>
   11f8c:	movw	r3, #4504	; 0x1198
   11f90:	movt	r3, #3
   11f94:	ldr	r2, [r3]
   11f98:	ldr	r3, [r5]
   11f9c:	str	r3, [sp, #20]
   11fa0:	ldr	r3, [r5, #4]
   11fa4:	str	r3, [sp, #16]
   11fa8:	ldr	r3, [r5, #8]
   11fac:	str	r3, [sp, #12]
   11fb0:	ldr	r3, [r5, #12]
   11fb4:	str	r3, [sp, #8]
   11fb8:	ldr	r3, [r5, #16]
   11fbc:	add	r3, r3, #1
   11fc0:	str	r3, [sp, #4]
   11fc4:	ldr	r3, [r5, #20]
   11fc8:	add	r3, r3, #1888	; 0x760
   11fcc:	add	r3, r3, #12
   11fd0:	str	r3, [sp]
   11fd4:	ldr	r3, [r6, r2, lsl #2]
   11fd8:	mov	r2, r0
   11fdc:	mov	r1, #0
   11fe0:	mov	r0, r1
   11fe4:	bl	111c0 <error@plt>
   11fe8:	b	11f4c <__assert_fail@plt+0xb7c>
   11fec:	movw	r3, #4528	; 0x11b0
   11ff0:	movt	r3, #3
   11ff4:	mov	r2, #1
   11ff8:	strb	r2, [r3, #28]
   11ffc:	b	11c54 <__assert_fail@plt+0x884>
   12000:	mov	r2, #5
   12004:	movw	r1, #58176	; 0xe340
   12008:	movt	r1, #1
   1200c:	mov	r0, #0
   12010:	bl	11130 <dcgettext@plt>
   12014:	mov	r2, r0
   12018:	mov	r1, #0
   1201c:	mov	r0, r1
   12020:	bl	111c0 <error@plt>
   12024:	mov	r0, #1
   12028:	bl	1152c <__assert_fail@plt+0x15c>
   1202c:	movw	r3, #438	; 0x1b6
   12030:	movw	r2, #2369	; 0x941
   12034:	mov	r1, r7
   12038:	mov	r0, #0
   1203c:	bl	1289c <__assert_fail@plt+0x14cc>
   12040:	subs	r4, r0, #0
   12044:	movge	r9, #0
   12048:	bge	1217c <__assert_fail@plt+0xdac>
   1204c:	bl	11298 <__errno_location@plt>
   12050:	ldr	r9, [r0]
   12054:	b	1217c <__assert_fail@plt+0xdac>
   12058:	ldr	r3, [pc, #680]	; 12308 <__assert_fail@plt+0xf38>
   1205c:	mov	r2, #147	; 0x93
   12060:	movw	r1, #58204	; 0xe35c
   12064:	movt	r1, #1
   12068:	movw	r0, #58216	; 0xe368
   1206c:	movt	r0, #1
   12070:	bl	113d0 <__assert_fail@plt>
   12074:	mov	r0, #0
   12078:	bl	113ac <close@plt>
   1207c:	cmp	r0, #0
   12080:	beq	12208 <__assert_fail@plt+0xe38>
   12084:	b	122a0 <__assert_fail@plt+0xed0>
   12088:	ldrb	r3, [r5, #21]
   1208c:	cmp	r3, #0
   12090:	bne	12118 <__assert_fail@plt+0xd48>
   12094:	cmp	r9, #21
   12098:	cmpne	r9, #0
   1209c:	moveq	sl, #9
   120a0:	beq	120c4 <__assert_fail@plt+0xcf4>
   120a4:	mov	sl, #9
   120a8:	b	1221c <__assert_fail@plt+0xe4c>
   120ac:	ldrb	r3, [r5, #21]
   120b0:	cmp	sl, #2
   120b4:	movne	r3, #0
   120b8:	andeq	r3, r3, #1
   120bc:	cmp	r3, #0
   120c0:	bne	12118 <__assert_fail@plt+0xd48>
   120c4:	mov	r2, #5
   120c8:	movw	r1, #58280	; 0xe3a8
   120cc:	movt	r1, #1
   120d0:	mov	r0, #0
   120d4:	bl	11130 <dcgettext@plt>
   120d8:	mov	r4, r0
   120dc:	mov	r1, r7
   120e0:	mov	r0, #4
   120e4:	bl	1a464 <__assert_fail@plt+0x9094>
   120e8:	mov	r3, r0
   120ec:	mov	r2, r4
   120f0:	mov	r1, sl
   120f4:	mov	r0, #0
   120f8:	bl	111c0 <error@plt>
   120fc:	mov	r3, #0
   12100:	b	12118 <__assert_fail@plt+0xd48>
   12104:	mov	r3, #1
   12108:	b	12118 <__assert_fail@plt+0xd48>
   1210c:	cmp	r4, #0
   12110:	movne	r3, #1
   12114:	beq	1228c <__assert_fail@plt+0xebc>
   12118:	and	fp, fp, r3
   1211c:	movw	r2, #4504	; 0x1198
   12120:	movt	r2, #3
   12124:	ldr	r3, [r2]
   12128:	add	r3, r3, #1
   1212c:	str	r3, [r2]
   12130:	cmp	r3, r8
   12134:	bge	122e4 <__assert_fail@plt+0xf14>
   12138:	ldr	r7, [r6, r3, lsl #2]
   1213c:	ldr	r1, [sp, #28]
   12140:	mov	r0, r7
   12144:	bl	110a0 <strcmp@plt>
   12148:	subs	r9, r0, #0
   1214c:	moveq	r4, #1
   12150:	beq	1217c <__assert_fail@plt+0xdac>
   12154:	ldrb	r3, [r5, #21]
   12158:	cmp	r3, #0
   1215c:	ldrne	r4, [sp, #32]
   12160:	movne	r9, #0
   12164:	bne	1217c <__assert_fail@plt+0xdac>
   12168:	ldrb	r3, [r5, #22]
   1216c:	cmp	r3, #0
   12170:	ldrne	r4, [sp, #32]
   12174:	movne	r9, #0
   12178:	beq	1202c <__assert_fail@plt+0xc5c>
   1217c:	ldr	r3, [r5, #16]
   12180:	cmp	r3, #3
   12184:	beq	121a8 <__assert_fail@plt+0xdd8>
   12188:	cmp	r3, #2
   1218c:	mvneq	r3, #-1073741823	; 0xc0000001
   12190:	streq	r3, [r5, #4]
   12194:	beq	121a8 <__assert_fail@plt+0xdd8>
   12198:	cmp	r3, #1
   1219c:	bne	12058 <__assert_fail@plt+0xc88>
   121a0:	mvn	r3, #-1073741823	; 0xc0000001
   121a4:	str	r3, [r5, #12]
   121a8:	ldrb	r3, [r5, #28]
   121ac:	cmp	r3, #0
   121b0:	moveq	r3, r5
   121b4:	movne	r3, #0
   121b8:	cmp	r4, #1
   121bc:	movne	r2, r7
   121c0:	moveq	r2, #0
   121c4:	ldrb	r1, [r5, #22]
   121c8:	cmp	r1, #0
   121cc:	movne	r1, #256	; 0x100
   121d0:	moveq	r1, #0
   121d4:	str	r1, [sp]
   121d8:	mvn	r1, #99	; 0x63
   121dc:	mov	r0, r4
   121e0:	bl	1291c <__assert_fail@plt+0x154c>
   121e4:	cmp	r0, #0
   121e8:	beq	1210c <__assert_fail@plt+0xd3c>
   121ec:	bl	11298 <__errno_location@plt>
   121f0:	ldr	sl, [r0]
   121f4:	cmp	r4, #0
   121f8:	beq	12074 <__assert_fail@plt+0xca4>
   121fc:	cmp	r4, #1
   12200:	cmpeq	sl, #9
   12204:	beq	12088 <__assert_fail@plt+0xcb8>
   12208:	cmp	sl, #0
   1220c:	beq	12104 <__assert_fail@plt+0xd34>
   12210:	cmp	r9, #0
   12214:	cmpne	r9, #21
   12218:	beq	120ac <__assert_fail@plt+0xcdc>
   1221c:	cmp	r9, #22
   12220:	bne	1224c <__assert_fail@plt+0xe7c>
   12224:	add	r2, sp, #56	; 0x38
   12228:	mov	r1, r7
   1222c:	mov	r0, #3
   12230:	bl	11370 <__xstat64@plt>
   12234:	cmp	r0, #0
   12238:	bne	1224c <__assert_fail@plt+0xe7c>
   1223c:	ldr	r3, [sp, #72]	; 0x48
   12240:	and	r3, r3, #61440	; 0xf000
   12244:	cmp	r3, #16384	; 0x4000
   12248:	beq	120ac <__assert_fail@plt+0xcdc>
   1224c:	mov	r2, #5
   12250:	movw	r1, #58264	; 0xe398
   12254:	movt	r1, #1
   12258:	mov	r0, #0
   1225c:	bl	11130 <dcgettext@plt>
   12260:	mov	r4, r0
   12264:	mov	r1, r7
   12268:	mov	r0, #4
   1226c:	bl	1a464 <__assert_fail@plt+0x9094>
   12270:	mov	r3, r0
   12274:	mov	r2, r4
   12278:	mov	r1, r9
   1227c:	mov	r0, #0
   12280:	bl	111c0 <error@plt>
   12284:	mov	r3, #0
   12288:	b	12118 <__assert_fail@plt+0xd48>
   1228c:	mov	r0, #0
   12290:	bl	113ac <close@plt>
   12294:	cmp	r0, #0
   12298:	moveq	r3, #1
   1229c:	beq	12118 <__assert_fail@plt+0xd48>
   122a0:	bl	11298 <__errno_location@plt>
   122a4:	ldr	r4, [r0]
   122a8:	mov	r2, #5
   122ac:	ldr	r1, [sp, #36]	; 0x24
   122b0:	mov	r0, #0
   122b4:	bl	11130 <dcgettext@plt>
   122b8:	mov	r9, r0
   122bc:	mov	r1, r7
   122c0:	mov	r0, #4
   122c4:	bl	1a464 <__assert_fail@plt+0x9094>
   122c8:	mov	r3, r0
   122cc:	mov	r2, r9
   122d0:	mov	r1, r4
   122d4:	mov	r0, #0
   122d8:	bl	111c0 <error@plt>
   122dc:	mov	r3, #0
   122e0:	b	12118 <__assert_fail@plt+0xd48>
   122e4:	eor	r0, fp, #1
   122e8:	add	sp, sp, #164	; 0xa4
   122ec:	ldrd	r4, [sp]
   122f0:	ldrd	r6, [sp, #8]
   122f4:	ldrd	r8, [sp, #16]
   122f8:	ldrd	sl, [sp, #24]
   122fc:	add	sp, sp, #32
   12300:	pop	{pc}		; (ldr pc, [sp], #4)
   12304:			; <UNDEFINED> instruction: 0x000311b8
   12308:	andeq	sp, r1, r4, ror fp
   1230c:	str	r4, [sp, #-8]!
   12310:	str	lr, [sp, #4]
   12314:	mov	r0, #1
   12318:	bl	1152c <__assert_fail@plt+0x15c>
   1231c:	ldr	r4, [sp]
   12320:	add	sp, sp, #4
   12324:	pop	{pc}		; (ldr pc, [sp], #4)
   12328:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1232c:	strd	r6, [sp, #8]
   12330:	strd	r8, [sp, #16]
   12334:	strd	sl, [sp, #24]
   12338:	str	lr, [sp, #32]
   1233c:	sub	sp, sp, #12
   12340:	str	r0, [sp]
   12344:	mov	r5, r1
   12348:	mov	r6, r2
   1234c:	str	r2, [sp, #4]
   12350:	mov	r9, r3
   12354:	bl	11274 <strlen@plt>
   12358:	ldr	r4, [r5]
   1235c:	cmp	r4, #0
   12360:	beq	1241c <__assert_fail@plt+0x104c>
   12364:	mov	r8, r0
   12368:	mov	fp, #0
   1236c:	mvn	sl, #0
   12370:	mov	r7, fp
   12374:	b	12394 <__assert_fail@plt+0xfc4>
   12378:	mov	sl, r7
   1237c:	b	123fc <__assert_fail@plt+0x102c>
   12380:	add	r7, r7, #1
   12384:	ldr	r4, [r5, #4]!
   12388:	add	r6, r6, r9
   1238c:	cmp	r4, #0
   12390:	beq	123f4 <__assert_fail@plt+0x1024>
   12394:	mov	r2, r8
   12398:	ldr	r1, [sp]
   1239c:	mov	r0, r4
   123a0:	bl	11394 <strncmp@plt>
   123a4:	cmp	r0, #0
   123a8:	bne	12380 <__assert_fail@plt+0xfb0>
   123ac:	mov	r0, r4
   123b0:	bl	11274 <strlen@plt>
   123b4:	cmp	r0, r8
   123b8:	beq	12378 <__assert_fail@plt+0xfa8>
   123bc:	cmn	sl, #1
   123c0:	moveq	sl, r7
   123c4:	beq	12380 <__assert_fail@plt+0xfb0>
   123c8:	ldr	r3, [sp, #4]
   123cc:	cmp	r3, #0
   123d0:	moveq	fp, #1
   123d4:	beq	12380 <__assert_fail@plt+0xfb0>
   123d8:	mov	r2, r9
   123dc:	mov	r1, r6
   123e0:	mla	r0, r9, sl, r3
   123e4:	bl	11118 <memcmp@plt>
   123e8:	cmp	r0, #0
   123ec:	movne	fp, #1
   123f0:	b	12380 <__assert_fail@plt+0xfb0>
   123f4:	cmp	fp, #0
   123f8:	mvnne	sl, #1
   123fc:	mov	r0, sl
   12400:	add	sp, sp, #12
   12404:	ldrd	r4, [sp]
   12408:	ldrd	r6, [sp, #8]
   1240c:	ldrd	r8, [sp, #16]
   12410:	ldrd	sl, [sp, #24]
   12414:	add	sp, sp, #32
   12418:	pop	{pc}		; (ldr pc, [sp], #4)
   1241c:	mvn	sl, #0
   12420:	b	123fc <__assert_fail@plt+0x102c>
   12424:	strd	r4, [sp, #-16]!
   12428:	str	r6, [sp, #8]
   1242c:	str	lr, [sp, #12]
   12430:	mov	r6, r0
   12434:	ldr	r0, [r1]
   12438:	cmp	r0, #0
   1243c:	beq	12484 <__assert_fail@plt+0x10b4>
   12440:	mov	r4, r1
   12444:	mov	r5, #0
   12448:	mov	r1, r6
   1244c:	bl	110a0 <strcmp@plt>
   12450:	cmp	r0, #0
   12454:	beq	12470 <__assert_fail@plt+0x10a0>
   12458:	add	r5, r5, #1
   1245c:	ldr	r0, [r4, #4]!
   12460:	cmp	r0, #0
   12464:	bne	12448 <__assert_fail@plt+0x1078>
   12468:	mvn	r0, #0
   1246c:	b	12474 <__assert_fail@plt+0x10a4>
   12470:	mov	r0, r5
   12474:	ldrd	r4, [sp]
   12478:	ldr	r6, [sp, #8]
   1247c:	add	sp, sp, #12
   12480:	pop	{pc}		; (ldr pc, [sp], #4)
   12484:	mvn	r0, #0
   12488:	b	12474 <__assert_fail@plt+0x10a4>
   1248c:	strd	r4, [sp, #-16]!
   12490:	str	r6, [sp, #8]
   12494:	str	lr, [sp, #12]
   12498:	sub	sp, sp, #8
   1249c:	mov	r6, r0
   124a0:	mov	r5, r1
   124a4:	cmn	r2, #1
   124a8:	mov	r2, #5
   124ac:	movweq	r1, #58524	; 0xe49c
   124b0:	movteq	r1, #1
   124b4:	movwne	r1, #58552	; 0xe4b8
   124b8:	movtne	r1, #1
   124bc:	mov	r0, #0
   124c0:	bl	11130 <dcgettext@plt>
   124c4:	mov	r4, r0
   124c8:	mov	r2, r5
   124cc:	mov	r1, #8
   124d0:	mov	r0, #0
   124d4:	bl	1a3d8 <__assert_fail@plt+0x9008>
   124d8:	mov	r5, r0
   124dc:	mov	r1, r6
   124e0:	mov	r0, #1
   124e4:	bl	1a738 <__assert_fail@plt+0x9368>
   124e8:	str	r0, [sp]
   124ec:	mov	r3, r5
   124f0:	mov	r2, r4
   124f4:	mov	r1, #0
   124f8:	mov	r0, r1
   124fc:	bl	111c0 <error@plt>
   12500:	add	sp, sp, #8
   12504:	ldrd	r4, [sp]
   12508:	ldr	r6, [sp, #8]
   1250c:	add	sp, sp, #12
   12510:	pop	{pc}		; (ldr pc, [sp], #4)
   12514:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12518:	strd	r6, [sp, #8]
   1251c:	strd	r8, [sp, #16]
   12520:	strd	sl, [sp, #24]
   12524:	str	lr, [sp, #32]
   12528:	sub	sp, sp, #12
   1252c:	mov	r7, r0
   12530:	mov	r4, r1
   12534:	mov	r8, r2
   12538:	mov	r2, #5
   1253c:	movw	r1, #58584	; 0xe4d8
   12540:	movt	r1, #1
   12544:	mov	r0, #0
   12548:	bl	11130 <dcgettext@plt>
   1254c:	movw	r3, #4512	; 0x11a0
   12550:	movt	r3, #3
   12554:	ldr	r1, [r3]
   12558:	bl	11070 <fputs_unlocked@plt>
   1255c:	ldr	r5, [r7]
   12560:	cmp	r5, #0
   12564:	beq	12610 <__assert_fail@plt+0x1240>
   12568:	mov	r3, #0
   1256c:	str	r3, [sp]
   12570:	mov	r6, r3
   12574:	movw	sl, #4512	; 0x11a0
   12578:	movt	sl, #3
   1257c:	movw	fp, #58608	; 0xe4f0
   12580:	movt	fp, #1
   12584:	movw	r3, #58616	; 0xe4f8
   12588:	movt	r3, #1
   1258c:	str	r3, [sp, #4]
   12590:	b	125cc <__assert_fail@plt+0x11fc>
   12594:	ldr	r9, [sl]
   12598:	mov	r0, r5
   1259c:	bl	1a754 <__assert_fail@plt+0x9384>
   125a0:	mov	r3, r0
   125a4:	mov	r2, fp
   125a8:	mov	r1, #1
   125ac:	mov	r0, r9
   125b0:	bl	112ec <__fprintf_chk@plt>
   125b4:	str	r4, [sp]
   125b8:	add	r6, r6, #1
   125bc:	ldr	r5, [r7, #4]!
   125c0:	add	r4, r4, r8
   125c4:	cmp	r5, #0
   125c8:	beq	12610 <__assert_fail@plt+0x1240>
   125cc:	cmp	r6, #0
   125d0:	beq	12594 <__assert_fail@plt+0x11c4>
   125d4:	mov	r2, r8
   125d8:	mov	r1, r4
   125dc:	ldr	r0, [sp]
   125e0:	bl	11118 <memcmp@plt>
   125e4:	cmp	r0, #0
   125e8:	bne	12594 <__assert_fail@plt+0x11c4>
   125ec:	ldr	r9, [sl]
   125f0:	mov	r0, r5
   125f4:	bl	1a754 <__assert_fail@plt+0x9384>
   125f8:	mov	r3, r0
   125fc:	ldr	r2, [sp, #4]
   12600:	mov	r1, #1
   12604:	mov	r0, r9
   12608:	bl	112ec <__fprintf_chk@plt>
   1260c:	b	125b8 <__assert_fail@plt+0x11e8>
   12610:	movw	r3, #4512	; 0x11a0
   12614:	movt	r3, #3
   12618:	ldr	r0, [r3]
   1261c:	ldr	r3, [r0, #20]
   12620:	ldr	r2, [r0, #24]
   12624:	cmp	r3, r2
   12628:	addcc	r2, r3, #1
   1262c:	strcc	r2, [r0, #20]
   12630:	movcc	r2, #10
   12634:	strbcc	r2, [r3]
   12638:	bcs	12658 <__assert_fail@plt+0x1288>
   1263c:	add	sp, sp, #12
   12640:	ldrd	r4, [sp]
   12644:	ldrd	r6, [sp, #8]
   12648:	ldrd	r8, [sp, #16]
   1264c:	ldrd	sl, [sp, #24]
   12650:	add	sp, sp, #32
   12654:	pop	{pc}		; (ldr pc, [sp], #4)
   12658:	mov	r1, #10
   1265c:	bl	11310 <__overflow@plt>
   12660:	b	1263c <__assert_fail@plt+0x126c>
   12664:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12668:	strd	r6, [sp, #8]
   1266c:	str	r8, [sp, #16]
   12670:	str	lr, [sp, #20]
   12674:	mov	r7, r0
   12678:	mov	r5, r1
   1267c:	mov	r4, r2
   12680:	mov	r6, r3
   12684:	ldrb	r3, [sp, #32]
   12688:	cmp	r3, #0
   1268c:	beq	126c0 <__assert_fail@plt+0x12f0>
   12690:	ldr	r3, [sp, #24]
   12694:	mov	r2, r6
   12698:	mov	r1, r4
   1269c:	mov	r0, r5
   126a0:	bl	12328 <__assert_fail@plt+0xf58>
   126a4:	cmp	r0, #0
   126a8:	blt	126d0 <__assert_fail@plt+0x1300>
   126ac:	ldrd	r4, [sp]
   126b0:	ldrd	r6, [sp, #8]
   126b4:	ldr	r8, [sp, #16]
   126b8:	add	sp, sp, #20
   126bc:	pop	{pc}		; (ldr pc, [sp], #4)
   126c0:	mov	r1, r2
   126c4:	mov	r0, r5
   126c8:	bl	12424 <__assert_fail@plt+0x1054>
   126cc:	b	126a4 <__assert_fail@plt+0x12d4>
   126d0:	mov	r2, r0
   126d4:	mov	r1, r5
   126d8:	mov	r0, r7
   126dc:	bl	1248c <__assert_fail@plt+0x10bc>
   126e0:	ldr	r2, [sp, #24]
   126e4:	mov	r1, r6
   126e8:	mov	r0, r4
   126ec:	bl	12514 <__assert_fail@plt+0x1144>
   126f0:	ldr	r3, [sp, #28]
   126f4:	blx	r3
   126f8:	mvn	r0, #0
   126fc:	b	126ac <__assert_fail@plt+0x12dc>
   12700:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12704:	strd	r6, [sp, #8]
   12708:	str	r8, [sp, #16]
   1270c:	str	lr, [sp, #20]
   12710:	ldr	r7, [r1]
   12714:	cmp	r7, #0
   12718:	beq	12754 <__assert_fail@plt+0x1384>
   1271c:	mov	r6, r3
   12720:	mov	r8, r0
   12724:	mov	r4, r2
   12728:	mov	r5, r1
   1272c:	mov	r2, r6
   12730:	mov	r1, r4
   12734:	mov	r0, r8
   12738:	bl	11118 <memcmp@plt>
   1273c:	cmp	r0, #0
   12740:	beq	12754 <__assert_fail@plt+0x1384>
   12744:	ldr	r7, [r5, #4]!
   12748:	add	r4, r4, r6
   1274c:	cmp	r7, #0
   12750:	bne	1272c <__assert_fail@plt+0x135c>
   12754:	mov	r0, r7
   12758:	ldrd	r4, [sp]
   1275c:	ldrd	r6, [sp, #8]
   12760:	ldr	r8, [sp, #16]
   12764:	add	sp, sp, #20
   12768:	pop	{pc}		; (ldr pc, [sp], #4)
   1276c:	movw	r3, #4560	; 0x11d0
   12770:	movt	r3, #3
   12774:	str	r0, [r3]
   12778:	bx	lr
   1277c:	movw	r3, #4560	; 0x11d0
   12780:	movt	r3, #3
   12784:	strb	r0, [r3, #4]
   12788:	bx	lr
   1278c:	strd	r4, [sp, #-16]!
   12790:	str	r6, [sp, #8]
   12794:	str	lr, [sp, #12]
   12798:	sub	sp, sp, #8
   1279c:	movw	r3, #4516	; 0x11a4
   127a0:	movt	r3, #3
   127a4:	ldr	r0, [r3]
   127a8:	bl	1b870 <__assert_fail@plt+0xa4a0>
   127ac:	cmp	r0, #0
   127b0:	beq	127d8 <__assert_fail@plt+0x1408>
   127b4:	movw	r3, #4560	; 0x11d0
   127b8:	movt	r3, #3
   127bc:	ldrb	r3, [r3, #4]
   127c0:	cmp	r3, #0
   127c4:	beq	12804 <__assert_fail@plt+0x1434>
   127c8:	bl	11298 <__errno_location@plt>
   127cc:	ldr	r3, [r0]
   127d0:	cmp	r3, #32
   127d4:	bne	12804 <__assert_fail@plt+0x1434>
   127d8:	movw	r3, #4512	; 0x11a0
   127dc:	movt	r3, #3
   127e0:	ldr	r0, [r3]
   127e4:	bl	1b870 <__assert_fail@plt+0xa4a0>
   127e8:	cmp	r0, #0
   127ec:	bne	1288c <__assert_fail@plt+0x14bc>
   127f0:	add	sp, sp, #8
   127f4:	ldrd	r4, [sp]
   127f8:	ldr	r6, [sp, #8]
   127fc:	add	sp, sp, #12
   12800:	pop	{pc}		; (ldr pc, [sp], #4)
   12804:	mov	r2, #5
   12808:	movw	r1, #58624	; 0xe500
   1280c:	movt	r1, #1
   12810:	mov	r0, #0
   12814:	bl	11130 <dcgettext@plt>
   12818:	mov	r4, r0
   1281c:	movw	r3, #4560	; 0x11d0
   12820:	movt	r3, #3
   12824:	ldr	r5, [r3]
   12828:	cmp	r5, #0
   1282c:	beq	1286c <__assert_fail@plt+0x149c>
   12830:	bl	11298 <__errno_location@plt>
   12834:	ldr	r6, [r0]
   12838:	mov	r0, r5
   1283c:	bl	1a550 <__assert_fail@plt+0x9180>
   12840:	str	r4, [sp]
   12844:	mov	r3, r0
   12848:	movw	r2, #58636	; 0xe50c
   1284c:	movt	r2, #1
   12850:	mov	r1, r6
   12854:	mov	r0, #0
   12858:	bl	111c0 <error@plt>
   1285c:	movw	r3, #4424	; 0x1148
   12860:	movt	r3, #3
   12864:	ldr	r0, [r3]
   12868:	bl	110e8 <_exit@plt>
   1286c:	bl	11298 <__errno_location@plt>
   12870:	mov	r3, r4
   12874:	movw	r2, #58640	; 0xe510
   12878:	movt	r2, #1
   1287c:	ldr	r1, [r0]
   12880:	mov	r0, #0
   12884:	bl	111c0 <error@plt>
   12888:	b	1285c <__assert_fail@plt+0x148c>
   1288c:	movw	r3, #4424	; 0x1148
   12890:	movt	r3, #3
   12894:	ldr	r0, [r3]
   12898:	bl	110e8 <_exit@plt>
   1289c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   128a0:	strd	r6, [sp, #8]
   128a4:	str	r8, [sp, #16]
   128a8:	str	lr, [sp, #20]
   128ac:	mov	r5, r0
   128b0:	mov	r0, r1
   128b4:	mov	r1, r2
   128b8:	mov	r2, r3
   128bc:	bl	111cc <open64@plt>
   128c0:	mov	r4, r0
   128c4:	cmp	r5, r0
   128c8:	movne	r3, #0
   128cc:	moveq	r3, #1
   128d0:	orrs	r3, r3, r0, lsr #31
   128d4:	beq	128f0 <__assert_fail@plt+0x1520>
   128d8:	mov	r0, r4
   128dc:	ldrd	r4, [sp]
   128e0:	ldrd	r6, [sp, #8]
   128e4:	ldr	r8, [sp, #16]
   128e8:	add	sp, sp, #20
   128ec:	pop	{pc}		; (ldr pc, [sp], #4)
   128f0:	mov	r1, r5
   128f4:	bl	1113c <dup2@plt>
   128f8:	mov	r6, r0
   128fc:	bl	11298 <__errno_location@plt>
   12900:	mov	r5, r0
   12904:	ldr	r7, [r0]
   12908:	mov	r0, r4
   1290c:	bl	113ac <close@plt>
   12910:	str	r7, [r5]
   12914:	mov	r4, r6
   12918:	b	128d8 <__assert_fail@plt+0x1508>
   1291c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12920:	strd	r6, [sp, #8]
   12924:	str	r8, [sp, #16]
   12928:	str	lr, [sp, #20]
   1292c:	mov	r7, r1
   12930:	mov	r5, r2
   12934:	mov	r6, r3
   12938:	cmp	r0, #0
   1293c:	bge	1295c <__assert_fail@plt+0x158c>
   12940:	cmp	r2, #0
   12944:	bne	129a8 <__assert_fail@plt+0x15d8>
   12948:	bl	11298 <__errno_location@plt>
   1294c:	mov	r3, #9
   12950:	str	r3, [r0]
   12954:	mvn	r4, #0
   12958:	b	12980 <__assert_fail@plt+0x15b0>
   1295c:	mov	r1, r3
   12960:	bl	11358 <futimens@plt>
   12964:	mov	r4, r0
   12968:	cmp	r5, #0
   1296c:	beq	12978 <__assert_fail@plt+0x15a8>
   12970:	cmn	r0, #1
   12974:	beq	12998 <__assert_fail@plt+0x15c8>
   12978:	cmp	r4, #1
   1297c:	beq	12948 <__assert_fail@plt+0x1578>
   12980:	mov	r0, r4
   12984:	ldrd	r4, [sp]
   12988:	ldrd	r6, [sp, #8]
   1298c:	ldr	r8, [sp, #16]
   12990:	add	sp, sp, #20
   12994:	pop	{pc}		; (ldr pc, [sp], #4)
   12998:	bl	11298 <__errno_location@plt>
   1299c:	ldr	r3, [r0]
   129a0:	cmp	r3, #38	; 0x26
   129a4:	bne	12980 <__assert_fail@plt+0x15b0>
   129a8:	ldr	r3, [sp, #24]
   129ac:	mov	r2, r6
   129b0:	mov	r1, r5
   129b4:	mov	r0, r7
   129b8:	bl	11094 <utimensat@plt>
   129bc:	mov	r4, r0
   129c0:	b	12978 <__assert_fail@plt+0x15a8>
   129c4:	str	r4, [sp, #-8]!
   129c8:	str	lr, [sp, #4]
   129cc:	mov	r1, r0
   129d0:	mov	r0, #0
   129d4:	bl	110dc <clock_gettime@plt>
   129d8:	ldr	r4, [sp]
   129dc:	add	sp, sp, #4
   129e0:	pop	{pc}		; (ldr pc, [sp], #4)
   129e4:	str	r4, [sp, #-8]!
   129e8:	str	lr, [sp, #4]
   129ec:	sub	sp, sp, #8
   129f0:	mov	r4, r0
   129f4:	mov	r0, sp
   129f8:	bl	129c4 <__assert_fail@plt+0x15f4>
   129fc:	ldrd	r2, [sp]
   12a00:	strd	r2, [r4]
   12a04:	mov	r0, r4
   12a08:	add	sp, sp, #8
   12a0c:	ldr	r4, [sp]
   12a10:	add	sp, sp, #4
   12a14:	pop	{pc}		; (ldr pc, [sp], #4)
   12a18:	sub	sp, sp, #8
   12a1c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12a20:	strd	r6, [sp, #8]
   12a24:	str	r8, [sp, #16]
   12a28:	str	lr, [sp, #20]
   12a2c:	mov	r4, r0
   12a30:	add	r1, sp, #20
   12a34:	stmib	r1, {r2, r3}
   12a38:	ldrd	r6, [sp, #32]
   12a3c:	ldr	r5, [sp, #40]	; 0x28
   12a40:	ldr	r3, [r0, #156]	; 0x9c
   12a44:	cmp	r3, #0
   12a48:	beq	12a9c <__assert_fail@plt+0x16cc>
   12a4c:	ldr	r2, [r0, #48]	; 0x30
   12a50:	cmp	r2, #0
   12a54:	bne	12a9c <__assert_fail@plt+0x16cc>
   12a58:	ldrb	r2, [r0, #153]	; 0x99
   12a5c:	cmp	r2, #0
   12a60:	bne	12a9c <__assert_fail@plt+0x16cc>
   12a64:	ldr	r3, [r0, #172]	; 0xac
   12a68:	cmp	r5, #2
   12a6c:	cmple	r3, #0
   12a70:	beq	12b6c <__assert_fail@plt+0x179c>
   12a74:	mov	r3, #1
   12a78:	strb	r3, [r0, #180]	; 0xb4
   12a7c:	ldrd	r0, [sp, #24]
   12a80:	strd	r0, [r4, #32]
   12a84:	mov	r0, r6
   12a88:	mov	r1, r7
   12a8c:	strd	r0, [r4, #40]	; 0x28
   12a90:	ldrd	r0, [sp, #40]	; 0x28
   12a94:	strd	r0, [r4, #48]	; 0x30
   12a98:	b	12b08 <__assert_fail@plt+0x1738>
   12a9c:	cmp	r5, #4
   12aa0:	ble	12b24 <__assert_fail@plt+0x1754>
   12aa4:	add	r3, r3, #1
   12aa8:	str	r3, [r4, #156]	; 0x9c
   12aac:	mov	r2, #100	; 0x64
   12ab0:	mov	r3, #0
   12ab4:	mov	r0, r6
   12ab8:	mov	r1, r7
   12abc:	bl	1d7fc <__assert_fail@plt+0xc42c>
   12ac0:	strd	r2, [r4, #64]	; 0x40
   12ac4:	mov	r2, #100	; 0x64
   12ac8:	mov	r3, #0
   12acc:	mov	r0, r6
   12ad0:	mov	r1, r7
   12ad4:	bl	1d7fc <__assert_fail@plt+0xc42c>
   12ad8:	mov	r2, #100	; 0x64
   12adc:	mov	r3, #0
   12ae0:	bl	1d7fc <__assert_fail@plt+0xc42c>
   12ae4:	strd	r2, [r4, #56]	; 0x38
   12ae8:	movw	r2, #10000	; 0x2710
   12aec:	mov	r3, #0
   12af0:	mov	r0, r6
   12af4:	mov	r1, r7
   12af8:	bl	1d7fc <__assert_fail@plt+0xc42c>
   12afc:	strd	r0, [r4, #40]	; 0x28
   12b00:	sub	r5, r5, #4
   12b04:	str	r5, [r4, #48]	; 0x30
   12b08:	ldrd	r4, [sp]
   12b0c:	ldrd	r6, [sp, #8]
   12b10:	ldr	r8, [sp, #16]
   12b14:	ldr	lr, [sp, #20]
   12b18:	add	sp, sp, #24
   12b1c:	add	sp, sp, #8
   12b20:	bx	lr
   12b24:	ldr	r3, [r4, #172]	; 0xac
   12b28:	add	r3, r3, #1
   12b2c:	str	r3, [r4, #172]	; 0xac
   12b30:	cmp	r5, #2
   12b34:	ble	12b74 <__assert_fail@plt+0x17a4>
   12b38:	mov	r2, #100	; 0x64
   12b3c:	mov	r3, #0
   12b40:	mov	r0, r6
   12b44:	mov	r1, r7
   12b48:	bl	1d7fc <__assert_fail@plt+0xc42c>
   12b4c:	strd	r0, [r4, #72]	; 0x48
   12b50:	mov	r2, #100	; 0x64
   12b54:	mov	r3, #0
   12b58:	mov	r0, r6
   12b5c:	mov	r1, r7
   12b60:	bl	1d7fc <__assert_fail@plt+0xc42c>
   12b64:	strd	r2, [r4, #80]	; 0x50
   12b68:	b	12b84 <__assert_fail@plt+0x17b4>
   12b6c:	mov	r3, #1
   12b70:	str	r3, [r0, #172]	; 0xac
   12b74:	strd	r6, [r4, #72]	; 0x48
   12b78:	mov	r2, #0
   12b7c:	mov	r3, #0
   12b80:	strd	r2, [r4, #80]	; 0x50
   12b84:	mov	r3, #0
   12b88:	str	r3, [r4, #88]	; 0x58
   12b8c:	str	r3, [r4, #92]	; 0x5c
   12b90:	mov	r3, #2
   12b94:	str	r3, [r4, #28]
   12b98:	b	12b08 <__assert_fail@plt+0x1738>
   12b9c:	sub	sp, sp, #8
   12ba0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12ba4:	strd	r6, [sp, #8]
   12ba8:	strd	r8, [sp, #16]
   12bac:	strd	sl, [sp, #24]
   12bb0:	str	lr, [sp, #32]
   12bb4:	sub	sp, sp, #36	; 0x24
   12bb8:	add	r1, sp, #68	; 0x44
   12bbc:	stmib	r1, {r2, r3}
   12bc0:	ldrd	r2, [sp, #72]	; 0x48
   12bc4:	strd	r2, [sp]
   12bc8:	ldrd	r8, [sp, #80]	; 0x50
   12bcc:	ldrd	r2, [sp, #88]	; 0x58
   12bd0:	strd	r2, [sp, #16]
   12bd4:	ldrd	r2, [sp, #96]	; 0x60
   12bd8:	strd	r2, [sp, #8]
   12bdc:	ldrd	sl, [sp, #104]	; 0x68
   12be0:	ldrd	r6, [sp, #112]	; 0x70
   12be4:	ldr	r3, [sp, #120]	; 0x78
   12be8:	ldr	r2, [sp, #128]	; 0x80
   12bec:	cmp	r2, #0
   12bf0:	blt	12d04 <__assert_fail@plt+0x1934>
   12bf4:	ldr	r2, [r0, #144]	; 0x90
   12bf8:	adds	r3, r2, r3
   12bfc:	movvs	lr, #1
   12c00:	movvc	lr, #0
   12c04:	str	r3, [r0, #144]	; 0x90
   12c08:	ldrd	r2, [r0, #136]	; 0x88
   12c0c:	adds	r4, r2, r6
   12c10:	adcs	r5, r3, r7
   12c14:	movvs	ip, #1
   12c18:	movvc	ip, #0
   12c1c:	strd	r4, [r0, #136]	; 0x88
   12c20:	ldrd	r2, [r0, #128]	; 0x80
   12c24:	adds	r4, r2, sl
   12c28:	adcs	r5, r3, fp
   12c2c:	movvs	r1, #1
   12c30:	movvc	r1, #0
   12c34:	strd	r4, [r0, #128]	; 0x80
   12c38:	ldrd	r2, [r0, #120]	; 0x78
   12c3c:	ldrd	r6, [sp, #8]
   12c40:	adds	r4, r2, r6
   12c44:	adcs	r5, r3, r7
   12c48:	movvs	r2, #1
   12c4c:	movvc	r2, #0
   12c50:	strd	r4, [r0, #120]	; 0x78
   12c54:	ldrd	r4, [r0, #112]	; 0x70
   12c58:	ldrd	sl, [sp, #16]
   12c5c:	adds	r6, r4, sl
   12c60:	adcs	r7, r5, fp
   12c64:	movvs	r3, #1
   12c68:	movvc	r3, #0
   12c6c:	strd	r6, [r0, #112]	; 0x70
   12c70:	ldrd	r4, [r0, #104]	; 0x68
   12c74:	adds	r6, r4, r8
   12c78:	adcs	r7, r5, r9
   12c7c:	movvs	r8, #1
   12c80:	movvc	r8, #0
   12c84:	strd	r6, [r0, #104]	; 0x68
   12c88:	ldrd	r4, [r0, #96]	; 0x60
   12c8c:	ldrd	sl, [sp]
   12c90:	adds	r6, r4, sl
   12c94:	adcs	r7, r5, fp
   12c98:	strd	r6, [r0, #96]	; 0x60
   12c9c:	and	lr, lr, #1
   12ca0:	and	ip, ip, #1
   12ca4:	orr	ip, lr, ip
   12ca8:	and	r1, r1, #1
   12cac:	orr	r1, ip, r1
   12cb0:	and	r2, r2, #1
   12cb4:	orr	r2, r1, r2
   12cb8:	and	r3, r3, #1
   12cbc:	orr	r3, r2, r3
   12cc0:	and	r8, r8, #1
   12cc4:	orrvc	r8, r3, r8
   12cc8:	movvs	r8, #1
   12ccc:	cmp	r8, #0
   12cd0:	moveq	r3, #1
   12cd4:	strbeq	r3, [r0, #153]	; 0x99
   12cd8:	moveq	r0, r3
   12cdc:	movne	r0, #0
   12ce0:	add	sp, sp, #36	; 0x24
   12ce4:	ldrd	r4, [sp]
   12ce8:	ldrd	r6, [sp, #8]
   12cec:	ldrd	r8, [sp, #16]
   12cf0:	ldrd	sl, [sp, #24]
   12cf4:	ldr	lr, [sp, #32]
   12cf8:	add	sp, sp, #36	; 0x24
   12cfc:	add	sp, sp, #8
   12d00:	bx	lr
   12d04:	mov	r2, #0
   12d08:	str	r2, [sp, #28]
   12d0c:	ldr	r2, [r0, #144]	; 0x90
   12d10:	subs	r3, r2, r3
   12d14:	movvs	r2, #1
   12d18:	strvs	r2, [sp, #28]
   12d1c:	str	r3, [r0, #144]	; 0x90
   12d20:	mov	ip, #0
   12d24:	ldrd	r2, [r0, #136]	; 0x88
   12d28:	subs	r4, r2, r6
   12d2c:	sbcs	r5, r3, r7
   12d30:	movvs	ip, #1
   12d34:	strd	r4, [r0, #136]	; 0x88
   12d38:	mov	r1, #0
   12d3c:	ldrd	r2, [r0, #128]	; 0x80
   12d40:	subs	r4, r2, sl
   12d44:	sbcs	r5, r3, fp
   12d48:	movvs	r1, #1
   12d4c:	strd	r4, [r0, #128]	; 0x80
   12d50:	mov	r2, #0
   12d54:	ldrd	r4, [r0, #120]	; 0x78
   12d58:	ldrd	sl, [sp, #8]
   12d5c:	subs	r6, r4, sl
   12d60:	sbcs	r7, r5, fp
   12d64:	movvs	r2, #1
   12d68:	strd	r6, [r0, #120]	; 0x78
   12d6c:	mov	r3, #0
   12d70:	ldrd	r4, [r0, #112]	; 0x70
   12d74:	ldrd	sl, [sp, #16]
   12d78:	subs	r6, r4, sl
   12d7c:	sbcs	r7, r5, fp
   12d80:	movvs	r3, #1
   12d84:	strd	r6, [r0, #112]	; 0x70
   12d88:	mov	lr, #0
   12d8c:	ldrd	r4, [r0, #104]	; 0x68
   12d90:	subs	r6, r4, r8
   12d94:	sbcs	r7, r5, r9
   12d98:	movvs	lr, #1
   12d9c:	strd	r6, [r0, #104]	; 0x68
   12da0:	mov	r9, #0
   12da4:	ldrd	r4, [r0, #96]	; 0x60
   12da8:	ldrd	sl, [sp]
   12dac:	subs	r6, r4, sl
   12db0:	sbcs	r7, r5, fp
   12db4:	movvs	r9, #1
   12db8:	strd	r6, [r0, #96]	; 0x60
   12dbc:	ldr	r4, [sp, #28]
   12dc0:	and	r8, r4, #1
   12dc4:	and	ip, ip, #1
   12dc8:	orr	r8, r8, ip
   12dcc:	and	r1, r1, #1
   12dd0:	orr	r8, r8, r1
   12dd4:	and	r2, r2, #1
   12dd8:	orr	r8, r8, r2
   12ddc:	and	r3, r3, #1
   12de0:	orr	r8, r8, r3
   12de4:	and	lr, lr, #1
   12de8:	orr	r8, r8, lr
   12dec:	and	r9, r9, #1
   12df0:	orr	r8, r8, r9
   12df4:	b	12ccc <__assert_fail@plt+0x18fc>
   12df8:	ldr	r3, [r1, #24]
   12dfc:	cmp	r3, #0
   12e00:	blt	12e6c <__assert_fail@plt+0x1a9c>
   12e04:	ldr	r3, [r0]
   12e08:	ldr	r2, [r1]
   12e0c:	eor	r3, r3, r2
   12e10:	ldr	r2, [r0, #4]
   12e14:	ldr	ip, [r1, #4]
   12e18:	eor	r2, r2, ip
   12e1c:	orr	r3, r3, r2
   12e20:	ldr	r2, [r0, #8]
   12e24:	ldr	ip, [r1, #8]
   12e28:	eor	r2, r2, ip
   12e2c:	orr	r3, r3, r2
   12e30:	ldr	r2, [r0, #12]
   12e34:	ldr	ip, [r1, #12]
   12e38:	eor	r2, r2, ip
   12e3c:	orr	r3, r3, r2
   12e40:	ldr	r2, [r0, #16]
   12e44:	ldr	ip, [r1, #16]
   12e48:	eor	r2, r2, ip
   12e4c:	orr	r3, r3, r2
   12e50:	ldr	r2, [r0, #20]
   12e54:	ldr	r1, [r1, #20]
   12e58:	eor	r2, r2, r1
   12e5c:	orrs	r3, r3, r2
   12e60:	moveq	r0, #1
   12e64:	movne	r0, #0
   12e68:	bx	lr
   12e6c:	mov	r0, #0
   12e70:	bx	lr
   12e74:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12e78:	strd	r6, [sp, #8]
   12e7c:	str	r8, [sp, #16]
   12e80:	str	lr, [sp, #20]
   12e84:	mov	r7, r0
   12e88:	mov	r6, r1
   12e8c:	movw	r4, #58644	; 0xe514
   12e90:	movt	r4, #1
   12e94:	movw	r1, #61504	; 0xf040
   12e98:	movt	r1, #1
   12e9c:	mov	r5, r4
   12ea0:	mov	r0, r6
   12ea4:	bl	110a0 <strcmp@plt>
   12ea8:	cmp	r0, #0
   12eac:	beq	12f1c <__assert_fail@plt+0x1b4c>
   12eb0:	ldr	r1, [r4, #12]!
   12eb4:	cmp	r1, #0
   12eb8:	bne	12e9c <__assert_fail@plt+0x1acc>
   12ebc:	ldr	r1, [r7, #192]	; 0xc0
   12ec0:	cmp	r1, #0
   12ec4:	beq	12eec <__assert_fail@plt+0x1b1c>
   12ec8:	add	r7, r7, #192	; 0xc0
   12ecc:	mov	r5, r7
   12ed0:	mov	r0, r6
   12ed4:	bl	110a0 <strcmp@plt>
   12ed8:	cmp	r0, #0
   12edc:	beq	12f1c <__assert_fail@plt+0x1b4c>
   12ee0:	ldr	r1, [r7, #12]!
   12ee4:	cmp	r1, #0
   12ee8:	bne	12ecc <__assert_fail@plt+0x1afc>
   12eec:	ldr	r4, [pc, #64]	; 12f34 <__assert_fail@plt+0x1b64>
   12ef0:	movw	r1, #61508	; 0xf044
   12ef4:	movt	r1, #1
   12ef8:	mov	r5, r4
   12efc:	mov	r0, r6
   12f00:	bl	110a0 <strcmp@plt>
   12f04:	cmp	r0, #0
   12f08:	beq	12f1c <__assert_fail@plt+0x1b4c>
   12f0c:	ldr	r1, [r4, #12]!
   12f10:	cmp	r1, #0
   12f14:	bne	12ef8 <__assert_fail@plt+0x1b28>
   12f18:	mov	r5, r1
   12f1c:	mov	r0, r5
   12f20:	ldrd	r4, [sp]
   12f24:	ldrd	r6, [sp, #8]
   12f28:	ldr	r8, [sp, #16]
   12f2c:	add	sp, sp, #20
   12f30:	pop	{pc}		; (ldr pc, [sp], #4)
   12f34:	andeq	lr, r1, r4, asr #10
   12f38:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12f3c:	str	r6, [sp, #8]
   12f40:	strd	r8, [sp, #12]
   12f44:	str	lr, [sp, #20]
   12f48:	sub	sp, sp, #16
   12f4c:	mov	r4, r0
   12f50:	mov	r5, r1
   12f54:	mov	r6, r2
   12f58:	ldrb	r3, [r0, #188]	; 0xbc
   12f5c:	cmp	r3, #0
   12f60:	moveq	r0, #0
   12f64:	strbeq	r0, [r1]
   12f68:	beq	12fac <__assert_fail@plt+0x1bdc>
   12f6c:	ldr	r3, [r4, #8]
   12f70:	ldr	r2, [r4, #12]
   12f74:	adds	r8, r3, #1
   12f78:	adc	r9, r2, #0
   12f7c:	cmp	r9, #0
   12f80:	cmpeq	r8, #13
   12f84:	bhi	12fec <__assert_fail@plt+0x1c1c>
   12f88:	mov	r2, #11
   12f8c:	mla	r3, r2, r3, r2
   12f90:	ldr	r2, [pc, #184]	; 13050 <__assert_fail@plt+0x1c80>
   12f94:	add	r3, r2, r3
   12f98:	movw	r2, #58640	; 0xe510
   12f9c:	movt	r2, #1
   12fa0:	mov	r1, r6
   12fa4:	mov	r0, r5
   12fa8:	bl	112b0 <snprintf@plt>
   12fac:	ldr	r3, [r4, #16]
   12fb0:	cmp	r3, #6
   12fb4:	bhi	12fd0 <__assert_fail@plt+0x1c00>
   12fb8:	mvn	r2, r0
   12fbc:	lsr	r2, r2, #31
   12fc0:	cmp	r0, r6
   12fc4:	movge	r2, #0
   12fc8:	cmp	r2, #0
   12fcc:	bne	13018 <__assert_fail@plt+0x1c48>
   12fd0:	mov	r0, r5
   12fd4:	add	sp, sp, #16
   12fd8:	ldrd	r4, [sp]
   12fdc:	ldr	r6, [sp, #8]
   12fe0:	ldrd	r8, [sp, #12]
   12fe4:	add	sp, sp, #20
   12fe8:	pop	{pc}		; (ldr pc, [sp], #4)
   12fec:	str	r3, [sp, #8]
   12ff0:	str	r2, [sp, #12]
   12ff4:	movw	r3, #61512	; 0xf048
   12ff8:	movt	r3, #1
   12ffc:	str	r3, [sp]
   13000:	mvn	r3, #0
   13004:	mov	r2, #1
   13008:	mov	r1, r6
   1300c:	mov	r0, r5
   13010:	bl	113c4 <__snprintf_chk@plt>
   13014:	b	12fac <__assert_fail@plt+0x1bdc>
   13018:	ldr	r2, [pc, #52]	; 13054 <__assert_fail@plt+0x1c84>
   1301c:	add	r3, r2, r3, lsl #2
   13020:	str	r3, [sp, #4]
   13024:	movw	r3, #58612	; 0xe4f4
   13028:	movt	r3, #1
   1302c:	cmp	r0, #0
   13030:	addeq	r3, r3, #1
   13034:	str	r3, [sp]
   13038:	mvn	r3, #0
   1303c:	mov	r2, #1
   13040:	sub	r1, r6, r0
   13044:	add	r0, r5, r0
   13048:	bl	113c4 <__snprintf_chk@plt>
   1304c:	b	12fd0 <__assert_fail@plt+0x1c00>
   13050:	andeq	lr, r1, r4, lsl #15
   13054:	andeq	lr, r1, r0, lsr #16
   13058:	strd	r4, [sp, #-16]!
   1305c:	str	r6, [sp, #8]
   13060:	str	lr, [sp, #12]
   13064:	sub	sp, sp, #8
   13068:	mov	r4, r1
   1306c:	subs	r6, r0, #0
   13070:	movlt	r2, #45	; 0x2d
   13074:	movge	r2, #43	; 0x2b
   13078:	movw	r3, #46021	; 0xb3c5
   1307c:	movt	r3, #37282	; 0x91a2
   13080:	smull	r3, r5, r3, r6
   13084:	add	r5, r5, r6
   13088:	asr	r3, r6, #31
   1308c:	rsb	r5, r3, r5, asr #11
   13090:	eor	r3, r5, r5, asr #31
   13094:	sub	r3, r3, r5, asr #31
   13098:	str	r3, [sp, #4]
   1309c:	str	r2, [sp]
   130a0:	movw	r3, #61520	; 0xf050
   130a4:	movt	r3, #1
   130a8:	mvn	r2, #0
   130ac:	mov	r1, #1
   130b0:	mov	r0, r4
   130b4:	bl	112a4 <__sprintf_chk@plt>
   130b8:	mov	r3, #3600	; 0xe10
   130bc:	mls	r5, r3, r5, r6
   130c0:	cmp	r5, #0
   130c4:	beq	13188 <__assert_fail@plt+0x1db8>
   130c8:	add	ip, r4, r0
   130cc:	eor	r3, r5, r5, asr #31
   130d0:	sub	r3, r3, r5, asr #31
   130d4:	movw	r2, #34953	; 0x8889
   130d8:	movt	r2, #34952	; 0x8888
   130dc:	smull	r1, r2, r2, r3
   130e0:	add	r2, r2, r3
   130e4:	asr	r2, r2, #5
   130e8:	asr	r5, r3, #31
   130ec:	sub	r1, r2, r5
   130f0:	rsb	lr, r1, r1, lsl #4
   130f4:	mov	r1, #58	; 0x3a
   130f8:	strb	r1, [r4, r0]
   130fc:	movw	r1, #33205	; 0x81b5
   13100:	movt	r1, #6990	; 0x1b4e
   13104:	smull	r0, r1, r1, r3
   13108:	rsb	r1, r5, r1, asr #6
   1310c:	add	r1, r1, #48	; 0x30
   13110:	strb	r1, [ip, #1]
   13114:	sub	r2, r2, r5
   13118:	movw	r1, #26215	; 0x6667
   1311c:	movt	r1, #26214	; 0x6666
   13120:	smull	r1, r0, r1, r2
   13124:	asr	r1, r2, #31
   13128:	rsb	r1, r1, r0, asr #2
   1312c:	add	r1, r1, r1, lsl #2
   13130:	sub	r2, r2, r1, lsl #1
   13134:	add	r2, r2, #48	; 0x30
   13138:	strb	r2, [ip, #2]
   1313c:	subs	r1, r3, lr, lsl #2
   13140:	addeq	r2, ip, #3
   13144:	beq	13180 <__assert_fail@plt+0x1db0>
   13148:	mov	r3, #58	; 0x3a
   1314c:	strb	r3, [ip, #3]
   13150:	movw	r3, #26215	; 0x6667
   13154:	movt	r3, #26214	; 0x6666
   13158:	smull	r3, r2, r3, r1
   1315c:	asr	r3, r1, #31
   13160:	rsb	r3, r3, r2, asr #2
   13164:	add	r2, r3, #48	; 0x30
   13168:	strb	r2, [ip, #4]
   1316c:	add	r2, ip, #6
   13170:	add	r3, r3, r3, lsl #2
   13174:	sub	r1, r1, r3, lsl #1
   13178:	add	r1, r1, #48	; 0x30
   1317c:	strb	r1, [ip, #5]
   13180:	mov	r3, #0
   13184:	strb	r3, [r2]
   13188:	mov	r0, r4
   1318c:	add	sp, sp, #8
   13190:	ldrd	r4, [sp]
   13194:	ldr	r6, [sp, #8]
   13198:	add	sp, sp, #12
   1319c:	pop	{pc}		; (ldr pc, [sp], #4)
   131a0:	str	r4, [sp, #-8]!
   131a4:	str	lr, [sp, #4]
   131a8:	sub	sp, sp, #8
   131ac:	mov	r4, r1
   131b0:	movw	ip, #63636	; 0xf894
   131b4:	movt	ip, #65535	; 0xffff
   131b8:	movw	r3, #61528	; 0xf058
   131bc:	movt	r3, #1
   131c0:	movw	r2, #34079	; 0x851f
   131c4:	movt	r2, #20971	; 0x51eb
   131c8:	smull	r2, r1, r2, r0
   131cc:	asr	r2, r0, #31
   131d0:	rsb	r2, r2, r1, asr #5
   131d4:	mov	r1, #100	; 0x64
   131d8:	mls	r1, r1, r2, r0
   131dc:	cmp	r1, #0
   131e0:	rsblt	r1, r1, #0
   131e4:	str	r1, [sp, #4]
   131e8:	add	r2, r2, #19
   131ec:	cmp	r2, #0
   131f0:	rsblt	r2, r2, #0
   131f4:	str	r2, [sp]
   131f8:	cmp	r0, ip
   131fc:	addge	r3, r3, #1
   13200:	mvn	r2, #0
   13204:	mov	r1, #1
   13208:	mov	r0, r4
   1320c:	bl	112a4 <__sprintf_chk@plt>
   13210:	mov	r0, r4
   13214:	add	sp, sp, #8
   13218:	ldr	r4, [sp]
   1321c:	add	sp, sp, #4
   13220:	pop	{pc}		; (ldr pc, [sp], #4)
   13224:	orrs	r1, r2, r3
   13228:	bxeq	lr
   1322c:	push	{lr}		; (str lr, [sp, #-4]!)
   13230:	sub	sp, sp, #20
   13234:	eor	r0, r0, #1
   13238:	movw	r1, #61540	; 0xf064
   1323c:	movt	r1, #1
   13240:	movw	ip, #4512	; 0x11a0
   13244:	movt	ip, #3
   13248:	ldr	lr, [sp, #24]
   1324c:	str	lr, [sp, #8]
   13250:	strd	r2, [sp]
   13254:	add	r2, r1, r0
   13258:	mov	r1, #1
   1325c:	ldr	r0, [ip]
   13260:	bl	112ec <__fprintf_chk@plt>
   13264:	mov	r0, #1
   13268:	add	sp, sp, #20
   1326c:	pop	{pc}		; (ldr pc, [sp], #4)
   13270:	push	{r0, r1, r2, r3}
   13274:	str	r4, [sp, #-8]!
   13278:	str	lr, [sp, #4]
   1327c:	sub	sp, sp, #8
   13280:	movw	r4, #4512	; 0x11a0
   13284:	movt	r4, #3
   13288:	ldr	r3, [r4]
   1328c:	mov	r2, #6
   13290:	mov	r1, #1
   13294:	movw	r0, #61552	; 0xf070
   13298:	movt	r0, #1
   1329c:	bl	11184 <fwrite@plt>
   132a0:	add	r3, sp, #20
   132a4:	str	r3, [sp, #4]
   132a8:	ldr	r2, [sp, #16]
   132ac:	mov	r1, #1
   132b0:	ldr	r0, [r4]
   132b4:	bl	11208 <__vfprintf_chk@plt>
   132b8:	add	sp, sp, #8
   132bc:	ldr	r4, [sp]
   132c0:	ldr	lr, [sp, #4]
   132c4:	add	sp, sp, #8
   132c8:	add	sp, sp, #16
   132cc:	bx	lr
   132d0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   132d4:	strd	r6, [sp, #8]
   132d8:	str	r8, [sp, #16]
   132dc:	str	lr, [sp, #20]
   132e0:	sub	sp, sp, #40	; 0x28
   132e4:	mov	r6, r1
   132e8:	mov	r4, r2
   132ec:	mov	r5, r3
   132f0:	mov	r3, #0
   132f4:	str	r3, [sp, #4]
   132f8:	str	r3, [sp]
   132fc:	mov	r3, r0
   13300:	movw	r2, #61560	; 0xf078
   13304:	movt	r2, #1
   13308:	mov	r1, r5
   1330c:	mov	r0, r4
   13310:	bl	1d660 <__assert_fail@plt+0xc290>
   13314:	cmp	r6, #0
   13318:	cmpne	r5, r0
   1331c:	ble	13330 <__assert_fail@plt+0x1f60>
   13320:	mov	r7, r0
   13324:	ldr	r3, [r6, #176]	; 0xb0
   13328:	cmp	r3, #0
   1332c:	bne	1334c <__assert_fail@plt+0x1f7c>
   13330:	mov	r0, r4
   13334:	add	sp, sp, #40	; 0x28
   13338:	ldrd	r4, [sp]
   1333c:	ldrd	r6, [sp, #8]
   13340:	ldr	r8, [sp, #16]
   13344:	add	sp, sp, #20
   13348:	pop	{pc}		; (ldr pc, [sp], #4)
   1334c:	add	r8, r4, r0
   13350:	add	r1, sp, #12
   13354:	ldr	r0, [r6, #24]
   13358:	bl	13058 <__assert_fail@plt+0x1c88>
   1335c:	str	r0, [sp, #4]
   13360:	movw	r3, #61588	; 0xf094
   13364:	movt	r3, #1
   13368:	str	r3, [sp]
   1336c:	mvn	r3, #0
   13370:	mov	r2, #1
   13374:	sub	r1, r5, r7
   13378:	mov	r0, r8
   1337c:	bl	113c4 <__snprintf_chk@plt>
   13380:	b	13330 <__assert_fail@plt+0x1f60>
   13384:	ldrb	r3, [r1, #181]	; 0xb5
   13388:	cmp	r3, #0
   1338c:	bxeq	lr
   13390:	strd	r4, [sp, #-12]!
   13394:	str	lr, [sp, #8]
   13398:	sub	sp, sp, #12
   1339c:	mov	r4, r1
   133a0:	mov	r5, r0
   133a4:	mov	r2, #5
   133a8:	movw	r1, #61596	; 0xf09c
   133ac:	movt	r1, #1
   133b0:	mov	r0, #0
   133b4:	bl	11130 <dcgettext@plt>
   133b8:	mov	r1, r5
   133bc:	bl	13270 <__assert_fail@plt+0x1ea0>
   133c0:	ldrd	r0, [r4, #96]	; 0x60
   133c4:	orrs	r3, r0, r1
   133c8:	bne	13414 <__assert_fail@plt+0x2044>
   133cc:	ldrd	r2, [r4, #104]	; 0x68
   133d0:	orrs	r3, r2, r3
   133d4:	bne	13414 <__assert_fail@plt+0x2044>
   133d8:	ldrd	r2, [r4, #112]	; 0x70
   133dc:	orrs	r3, r2, r3
   133e0:	bne	13414 <__assert_fail@plt+0x2044>
   133e4:	ldrd	r2, [r4, #120]	; 0x78
   133e8:	orrs	r3, r2, r3
   133ec:	bne	13414 <__assert_fail@plt+0x2044>
   133f0:	ldrd	r2, [r4, #128]	; 0x80
   133f4:	orrs	r3, r2, r3
   133f8:	bne	13414 <__assert_fail@plt+0x2044>
   133fc:	ldrd	r2, [r4, #136]	; 0x88
   13400:	orrs	r3, r2, r3
   13404:	bne	13414 <__assert_fail@plt+0x2044>
   13408:	ldr	r3, [r4, #144]	; 0x90
   1340c:	cmp	r3, #0
   13410:	beq	134d0 <__assert_fail@plt+0x2100>
   13414:	movw	r3, #61632	; 0xf0c0
   13418:	movt	r3, #1
   1341c:	str	r3, [sp]
   13420:	mov	r2, r0
   13424:	mov	r3, r1
   13428:	mov	r0, #0
   1342c:	bl	13224 <__assert_fail@plt+0x1e54>
   13430:	movw	r3, #61640	; 0xf0c8
   13434:	movt	r3, #1
   13438:	str	r3, [sp]
   1343c:	ldrd	r2, [r4, #104]	; 0x68
   13440:	bl	13224 <__assert_fail@plt+0x1e54>
   13444:	movw	r3, #61652	; 0xf0d4
   13448:	movt	r3, #1
   1344c:	str	r3, [sp]
   13450:	ldrd	r2, [r4, #112]	; 0x70
   13454:	bl	13224 <__assert_fail@plt+0x1e54>
   13458:	movw	r3, #61660	; 0xf0dc
   1345c:	movt	r3, #1
   13460:	str	r3, [sp]
   13464:	ldrd	r2, [r4, #120]	; 0x78
   13468:	bl	13224 <__assert_fail@plt+0x1e54>
   1346c:	movw	r3, #61668	; 0xf0e4
   13470:	movt	r3, #1
   13474:	str	r3, [sp]
   13478:	ldrd	r2, [r4, #128]	; 0x80
   1347c:	bl	13224 <__assert_fail@plt+0x1e54>
   13480:	movw	r3, #61680	; 0xf0f0
   13484:	movt	r3, #1
   13488:	str	r3, [sp]
   1348c:	ldrd	r2, [r4, #136]	; 0x88
   13490:	bl	13224 <__assert_fail@plt+0x1e54>
   13494:	ldr	r2, [r4, #144]	; 0x90
   13498:	movw	r3, #61676	; 0xf0ec
   1349c:	movt	r3, #1
   134a0:	str	r3, [sp]
   134a4:	asr	r3, r2, #31
   134a8:	bl	13224 <__assert_fail@plt+0x1e54>
   134ac:	movw	r3, #4512	; 0x11a0
   134b0:	movt	r3, #3
   134b4:	ldr	r1, [r3]
   134b8:	mov	r0, #10
   134bc:	bl	11340 <fputc@plt>
   134c0:	add	sp, sp, #12
   134c4:	ldrd	r4, [sp]
   134c8:	add	sp, sp, #8
   134cc:	pop	{pc}		; (ldr pc, [sp], #4)
   134d0:	mov	r2, #5
   134d4:	movw	r1, #61616	; 0xf0b0
   134d8:	movt	r1, #1
   134dc:	mov	r0, #0
   134e0:	bl	11130 <dcgettext@plt>
   134e4:	movw	r3, #4512	; 0x11a0
   134e8:	movt	r3, #3
   134ec:	ldr	r1, [r3]
   134f0:	bl	11388 <fputs@plt>
   134f4:	b	134c0 <__assert_fail@plt+0x20f0>
   134f8:	strd	r4, [sp, #-20]!	; 0xffffffec
   134fc:	strd	r6, [sp, #8]
   13500:	str	lr, [sp, #16]
   13504:	sub	sp, sp, #132	; 0x84
   13508:	ldrb	r5, [r1, #181]	; 0xb5
   1350c:	cmp	r5, #0
   13510:	bne	13528 <__assert_fail@plt+0x2158>
   13514:	add	sp, sp, #132	; 0x84
   13518:	ldrd	r4, [sp]
   1351c:	ldrd	r6, [sp, #8]
   13520:	add	sp, sp, #16
   13524:	pop	{pc}		; (ldr pc, [sp], #4)
   13528:	mov	r4, r1
   1352c:	mov	r6, r0
   13530:	mov	r2, #5
   13534:	movw	r1, #61596	; 0xf09c
   13538:	movt	r1, #1
   1353c:	mov	r0, #0
   13540:	bl	11130 <dcgettext@plt>
   13544:	mov	r1, r6
   13548:	bl	13270 <__assert_fail@plt+0x1ea0>
   1354c:	ldr	r3, [r4, #156]	; 0x9c
   13550:	cmp	r3, #0
   13554:	beq	13564 <__assert_fail@plt+0x2194>
   13558:	ldrb	r3, [r4, #182]	; 0xb6
   1355c:	cmp	r3, #0
   13560:	beq	13744 <__assert_fail@plt+0x2374>
   13564:	ldrb	r2, [r4, #180]	; 0xb4
   13568:	ldrb	r3, [r4, #187]	; 0xbb
   1356c:	cmp	r2, r3
   13570:	moveq	r6, #0
   13574:	beq	135bc <__assert_fail@plt+0x21ec>
   13578:	movw	r3, #4512	; 0x11a0
   1357c:	movt	r3, #3
   13580:	ldr	r6, [r3]
   13584:	mov	r2, #5
   13588:	movw	r1, #61728	; 0xf120
   1358c:	movt	r1, #1
   13590:	mov	r0, #0
   13594:	bl	11130 <dcgettext@plt>
   13598:	ldrd	r2, [r4, #40]	; 0x28
   1359c:	strd	r2, [sp]
   135a0:	mov	r2, r0
   135a4:	mov	r1, #1
   135a8:	mov	r0, r6
   135ac:	bl	112ec <__fprintf_chk@plt>
   135b0:	ldrb	r3, [r4, #180]	; 0xb4
   135b4:	strb	r3, [r4, #187]	; 0xbb
   135b8:	mov	r6, r5
   135bc:	ldr	r3, [r4, #172]	; 0xac
   135c0:	cmp	r3, #0
   135c4:	beq	135d4 <__assert_fail@plt+0x2204>
   135c8:	ldrb	r3, [r4, #185]	; 0xb9
   135cc:	cmp	r3, #0
   135d0:	beq	137b0 <__assert_fail@plt+0x23e0>
   135d4:	ldr	r3, [r4, #160]	; 0xa0
   135d8:	cmp	r3, #0
   135dc:	beq	13658 <__assert_fail@plt+0x2288>
   135e0:	ldrb	r3, [r4, #183]	; 0xb7
   135e4:	cmp	r3, #0
   135e8:	bne	13658 <__assert_fail@plt+0x2288>
   135ec:	cmp	r6, #0
   135f0:	bne	1385c <__assert_fail@plt+0x248c>
   135f4:	movw	r3, #4512	; 0x11a0
   135f8:	movt	r3, #3
   135fc:	ldr	r6, [r3]
   13600:	mov	r2, #5
   13604:	movw	r1, #61780	; 0xf154
   13608:	movt	r1, #1
   1360c:	mov	r0, #0
   13610:	bl	11130 <dcgettext@plt>
   13614:	mov	r7, r0
   13618:	mov	r2, #100	; 0x64
   1361c:	add	r1, sp, #28
   13620:	mov	r0, r4
   13624:	bl	12f38 <__assert_fail@plt+0x1b68>
   13628:	ldr	r3, [r4, #16]
   1362c:	str	r3, [sp, #8]
   13630:	ldrd	r2, [r4, #8]
   13634:	strd	r2, [sp]
   13638:	mov	r3, r0
   1363c:	mov	r2, r7
   13640:	mov	r1, #1
   13644:	mov	r0, r6
   13648:	bl	112ec <__fprintf_chk@plt>
   1364c:	mov	r3, #1
   13650:	strb	r3, [r4, #183]	; 0xb7
   13654:	mov	r6, r5
   13658:	ldr	r3, [r4, #164]	; 0xa4
   1365c:	cmp	r3, #0
   13660:	beq	136c4 <__assert_fail@plt+0x22f4>
   13664:	ldrb	r3, [r4, #184]	; 0xb8
   13668:	cmp	r3, #0
   1366c:	bne	136c4 <__assert_fail@plt+0x22f4>
   13670:	movw	r0, #4512	; 0x11a0
   13674:	movt	r0, #3
   13678:	eor	r2, r6, #1
   1367c:	movw	r1, #61812	; 0xf174
   13680:	movt	r1, #1
   13684:	ldr	lr, [r4, #168]	; 0xa8
   13688:	movw	r3, #61688	; 0xf0f8
   1368c:	movt	r3, #1
   13690:	movw	ip, #64580	; 0xfc44
   13694:	movt	ip, #1
   13698:	cmp	lr, #0
   1369c:	moveq	r3, ip
   136a0:	str	r3, [sp]
   136a4:	ldr	r3, [r4, #20]
   136a8:	add	r2, r1, r2
   136ac:	mov	r1, #1
   136b0:	ldr	r0, [r0]
   136b4:	bl	112ec <__fprintf_chk@plt>
   136b8:	mov	r3, #1
   136bc:	strb	r3, [r4, #184]	; 0xb8
   136c0:	mov	r6, r5
   136c4:	ldr	r3, [r4, #176]	; 0xb0
   136c8:	cmp	r3, #0
   136cc:	beq	136dc <__assert_fail@plt+0x230c>
   136d0:	ldrb	r3, [r4, #186]	; 0xba
   136d4:	cmp	r3, #0
   136d8:	beq	13874 <__assert_fail@plt+0x24a4>
   136dc:	ldrb	r3, [r4, #152]	; 0x98
   136e0:	cmp	r3, #0
   136e4:	beq	1372c <__assert_fail@plt+0x235c>
   136e8:	ldr	r4, [r4, #88]	; 0x58
   136ec:	asr	r5, r4, #31
   136f0:	cmp	r6, #0
   136f4:	bne	138c8 <__assert_fail@plt+0x24f8>
   136f8:	movw	r3, #4512	; 0x11a0
   136fc:	movt	r3, #3
   13700:	ldr	r6, [r3]
   13704:	mov	r2, #5
   13708:	movw	r1, #61832	; 0xf188
   1370c:	movt	r1, #1
   13710:	mov	r0, #0
   13714:	bl	11130 <dcgettext@plt>
   13718:	strd	r4, [sp]
   1371c:	mov	r2, r0
   13720:	mov	r1, #1
   13724:	mov	r0, r6
   13728:	bl	112ec <__fprintf_chk@plt>
   1372c:	movw	r3, #4512	; 0x11a0
   13730:	movt	r3, #3
   13734:	ldr	r1, [r3]
   13738:	mov	r0, #10
   1373c:	bl	11340 <fputc@plt>
   13740:	b	13514 <__assert_fail@plt+0x2144>
   13744:	movw	r0, #4512	; 0x11a0
   13748:	movt	r0, #3
   1374c:	ldrd	r2, [r4, #64]	; 0x40
   13750:	strd	r2, [sp, #16]
   13754:	ldrd	r2, [r4, #56]	; 0x38
   13758:	strd	r2, [sp, #8]
   1375c:	ldrd	r2, [r4, #40]	; 0x28
   13760:	strd	r2, [sp]
   13764:	movw	r2, #61696	; 0xf100
   13768:	movt	r2, #1
   1376c:	mov	r1, #1
   13770:	ldr	r0, [r0]
   13774:	bl	112ec <__fprintf_chk@plt>
   13778:	mov	r3, #1
   1377c:	strb	r3, [r4, #182]	; 0xb6
   13780:	ldrb	r2, [r4, #180]	; 0xb4
   13784:	ldrb	r3, [r4, #187]	; 0xbb
   13788:	cmp	r2, r3
   1378c:	beq	137a8 <__assert_fail@plt+0x23d8>
   13790:	movw	r3, #4512	; 0x11a0
   13794:	movt	r3, #3
   13798:	ldr	r1, [r3]
   1379c:	mov	r0, #32
   137a0:	bl	11340 <fputc@plt>
   137a4:	b	13578 <__assert_fail@plt+0x21a8>
   137a8:	mov	r6, r5
   137ac:	b	135bc <__assert_fail@plt+0x21ec>
   137b0:	eor	r2, r6, #1
   137b4:	movw	ip, #61744	; 0xf130
   137b8:	movt	ip, #1
   137bc:	movw	r3, #4512	; 0x11a0
   137c0:	movt	r3, #3
   137c4:	ldr	r0, [r4, #88]	; 0x58
   137c8:	asr	r1, r0, #31
   137cc:	strd	r0, [sp, #16]
   137d0:	ldrd	r0, [r4, #80]	; 0x50
   137d4:	strd	r0, [sp, #8]
   137d8:	ldrd	r0, [r4, #72]	; 0x48
   137dc:	strd	r0, [sp]
   137e0:	add	r2, ip, r2
   137e4:	mov	r1, #1
   137e8:	ldr	r0, [r3]
   137ec:	bl	112ec <__fprintf_chk@plt>
   137f0:	ldr	r3, [r4, #92]	; 0x5c
   137f4:	cmp	r3, #0
   137f8:	bne	13818 <__assert_fail@plt+0x2448>
   137fc:	ldr	r3, [r4, #28]
   13800:	cmp	r3, #1
   13804:	beq	13838 <__assert_fail@plt+0x2468>
   13808:	mov	r3, #1
   1380c:	strb	r3, [r4, #185]	; 0xb9
   13810:	mov	r6, r5
   13814:	b	135d4 <__assert_fail@plt+0x2204>
   13818:	movw	r0, #4512	; 0x11a0
   1381c:	movt	r0, #3
   13820:	movw	r2, #61768	; 0xf148
   13824:	movt	r2, #1
   13828:	mov	r1, #1
   1382c:	ldr	r0, [r0]
   13830:	bl	112ec <__fprintf_chk@plt>
   13834:	b	137fc <__assert_fail@plt+0x242c>
   13838:	movw	r3, #4512	; 0x11a0
   1383c:	movt	r3, #3
   13840:	ldr	r3, [r3]
   13844:	mov	r2, #2
   13848:	mov	r1, #1
   1384c:	movw	r0, #61776	; 0xf150
   13850:	movt	r0, #1
   13854:	bl	11184 <fwrite@plt>
   13858:	b	13808 <__assert_fail@plt+0x2438>
   1385c:	movw	r3, #4512	; 0x11a0
   13860:	movt	r3, #3
   13864:	ldr	r1, [r3]
   13868:	mov	r0, #32
   1386c:	bl	11340 <fputc@plt>
   13870:	b	135f4 <__assert_fail@plt+0x2224>
   13874:	movw	r3, #4512	; 0x11a0
   13878:	movt	r3, #3
   1387c:	ldr	r5, [r3]
   13880:	add	r1, sp, #28
   13884:	ldr	r0, [r4, #24]
   13888:	bl	13058 <__assert_fail@plt+0x1c88>
   1388c:	eor	r2, r6, #1
   13890:	movw	r1, #61824	; 0xf180
   13894:	movt	r1, #1
   13898:	mov	r3, r0
   1389c:	add	r2, r1, r2
   138a0:	mov	r1, #1
   138a4:	mov	r0, r5
   138a8:	bl	112ec <__fprintf_chk@plt>
   138ac:	mov	r3, #1
   138b0:	strb	r3, [r4, #186]	; 0xba
   138b4:	ldrb	r3, [r4, #152]	; 0x98
   138b8:	cmp	r3, #0
   138bc:	beq	1372c <__assert_fail@plt+0x235c>
   138c0:	ldr	r4, [r4, #88]	; 0x58
   138c4:	asr	r5, r4, #31
   138c8:	movw	r3, #4512	; 0x11a0
   138cc:	movt	r3, #3
   138d0:	ldr	r1, [r3]
   138d4:	mov	r0, #32
   138d8:	bl	11340 <fputc@plt>
   138dc:	b	136f8 <__assert_fail@plt+0x2328>
   138e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   138e4:	strd	r6, [sp, #8]
   138e8:	strd	r8, [sp, #16]
   138ec:	strd	sl, [sp, #24]
   138f0:	str	lr, [sp, #32]
   138f4:	sub	sp, sp, #1504	; 0x5e0
   138f8:	sub	sp, sp, #12
   138fc:	mov	fp, r0
   13900:	mov	r5, #0
   13904:	add	r3, sp, #1408	; 0x580
   13908:	add	r3, r3, #8
   1390c:	strh	r5, [r3]
   13910:	add	r8, sp, #296	; 0x128
   13914:	mov	sl, r3
   13918:	str	r5, [sp, #104]	; 0x68
   1391c:	mvn	r6, #1
   13920:	movw	r7, #58644	; 0xe514
   13924:	movt	r7, #1
   13928:	str	r5, [sp, #116]	; 0x74
   1392c:	str	r5, [sp, #128]	; 0x80
   13930:	mov	r3, #51712	; 0xca00
   13934:	movt	r3, #15258	; 0x3b9a
   13938:	str	r3, [sp, #132]	; 0x84
   1393c:	b	14300 <__assert_fail@plt+0x2f30>
   13940:	ldr	r0, [fp]
   13944:	ldrb	r1, [r0]
   13948:	cmp	r1, #9
   1394c:	bcc	1396c <__assert_fail@plt+0x259c>
   13950:	cmp	r1, #13
   13954:	bls	13960 <__assert_fail@plt+0x2590>
   13958:	cmp	r1, #32
   1395c:	bne	1396c <__assert_fail@plt+0x259c>
   13960:	add	r0, r0, #1
   13964:	str	r0, [fp]
   13968:	b	13940 <__assert_fail@plt+0x2570>
   1396c:	sub	r3, r1, #48	; 0x30
   13970:	cmp	r3, #9
   13974:	bls	139b4 <__assert_fail@plt+0x25e4>
   13978:	sub	r3, r1, #43	; 0x2b
   1397c:	tst	r3, #253	; 0xfd
   13980:	beq	15f9c <__assert_fail@plt+0x4bcc>
   13984:	cmp	r1, #65	; 0x41
   13988:	bcc	139a4 <__assert_fail@plt+0x25d4>
   1398c:	cmp	r1, #90	; 0x5a
   13990:	bls	13bcc <__assert_fail@plt+0x27fc>
   13994:	sub	r3, r1, #97	; 0x61
   13998:	uxtb	r3, r3
   1399c:	cmp	r3, #25
   139a0:	bls	13bd4 <__assert_fail@plt+0x2804>
   139a4:	cmp	r1, #40	; 0x28
   139a8:	bne	13f0c <__assert_fail@plt+0x2b3c>
   139ac:	mov	r2, #0
   139b0:	b	13f34 <__assert_fail@plt+0x2b64>
   139b4:	cmp	r1, #45	; 0x2d
   139b8:	movne	r3, #0
   139bc:	moveq	r3, #1
   139c0:	sub	r2, r1, #43	; 0x2b
   139c4:	tst	r2, #253	; 0xfd
   139c8:	bne	13a64 <__assert_fail@plt+0x2694>
   139cc:	cmp	r3, #0
   139d0:	mvnne	lr, #0
   139d4:	moveq	lr, #1
   139d8:	add	r0, r0, #1
   139dc:	str	r0, [fp]
   139e0:	ldrb	r1, [r0]
   139e4:	cmp	r1, #9
   139e8:	bcc	139fc <__assert_fail@plt+0x262c>
   139ec:	cmp	r1, #13
   139f0:	bls	139d8 <__assert_fail@plt+0x2608>
   139f4:	cmp	r1, #32
   139f8:	beq	139d8 <__assert_fail@plt+0x2608>
   139fc:	sub	r3, r1, #48	; 0x30
   13a00:	cmp	r3, #9
   13a04:	bhi	13940 <__assert_fail@plt+0x2570>
   13a08:	mov	r6, #0
   13a0c:	mov	ip, #10
   13a10:	cmp	lr, #0
   13a14:	rsblt	r3, r1, #48	; 0x30
   13a18:	subge	r3, r1, #48	; 0x30
   13a1c:	adds	r6, r6, r3
   13a20:	mov	r9, r6
   13a24:	bvs	15f94 <__assert_fail@plt+0x4bc4>
   13a28:	ldrb	r1, [r0, #1]!
   13a2c:	sub	r3, r1, #48	; 0x30
   13a30:	cmp	r3, #9
   13a34:	bls	13a6c <__assert_fail@plt+0x269c>
   13a38:	and	r1, r1, #253	; 0xfd
   13a3c:	cmp	r1, #44	; 0x2c
   13a40:	bne	13b88 <__assert_fail@plt+0x27b8>
   13a44:	ldrb	r2, [r0, #1]
   13a48:	sub	r3, r2, #48	; 0x30
   13a4c:	cmp	r3, #9
   13a50:	bhi	13b88 <__assert_fail@plt+0x27b8>
   13a54:	add	r3, r0, #2
   13a58:	sub	r2, r2, #48	; 0x30
   13a5c:	mov	r0, #8
   13a60:	b	13a8c <__assert_fail@plt+0x26bc>
   13a64:	mov	lr, #0
   13a68:	b	13a08 <__assert_fail@plt+0x2638>
   13a6c:	smull	r2, r3, r6, ip
   13a70:	mov	r6, r2
   13a74:	cmp	r3, r2, asr #31
   13a78:	beq	13a10 <__assert_fail@plt+0x2640>
   13a7c:	mov	r6, #63	; 0x3f
   13a80:	b	13bc0 <__assert_fail@plt+0x27f0>
   13a84:	subs	r0, r0, #1
   13a88:	beq	13ab4 <__assert_fail@plt+0x26e4>
   13a8c:	add	r2, r2, r2, lsl #2
   13a90:	lsl	ip, r2, #1
   13a94:	mov	r2, ip
   13a98:	ldrb	r1, [r3]
   13a9c:	sub	r6, r1, #48	; 0x30
   13aa0:	cmp	r6, #9
   13aa4:	bhi	13a84 <__assert_fail@plt+0x26b4>
   13aa8:	add	r3, r3, #1
   13aac:	add	r2, ip, r6
   13ab0:	b	13a84 <__assert_fail@plt+0x26b4>
   13ab4:	cmp	lr, #0
   13ab8:	blt	13b20 <__assert_fail@plt+0x2750>
   13abc:	ldrb	r1, [r3]
   13ac0:	sub	r1, r1, #48	; 0x30
   13ac4:	cmp	r1, #9
   13ac8:	bhi	13b68 <__assert_fail@plt+0x2798>
   13acc:	ldrb	r1, [r3, #1]!
   13ad0:	sub	r1, r1, #48	; 0x30
   13ad4:	cmp	r1, #9
   13ad8:	bls	13acc <__assert_fail@plt+0x26fc>
   13adc:	adds	r1, r2, #0
   13ae0:	movne	r1, #1
   13ae4:	ands	r1, r1, lr, lsr #31
   13ae8:	beq	13b68 <__assert_fail@plt+0x2798>
   13aec:	mov	r1, #0
   13af0:	subs	r9, r9, #1
   13af4:	movvs	r1, #1
   13af8:	cmp	r1, #0
   13afc:	movne	r6, #63	; 0x3f
   13b00:	bne	13bc0 <__assert_fail@plt+0x27f0>
   13b04:	str	r9, [sp, #1456]	; 0x5b0
   13b08:	ldr	r1, [sp, #132]	; 0x84
   13b0c:	sub	r2, r1, r2
   13b10:	str	r2, [sp, #1460]	; 0x5b4
   13b14:	str	r3, [fp]
   13b18:	mov	r6, #276	; 0x114
   13b1c:	b	13bc0 <__assert_fail@plt+0x27f0>
   13b20:	ldrb	r1, [r3]
   13b24:	sub	r0, r1, #48	; 0x30
   13b28:	cmp	r0, #9
   13b2c:	bhi	13adc <__assert_fail@plt+0x270c>
   13b30:	cmp	r1, #48	; 0x30
   13b34:	bne	13b50 <__assert_fail@plt+0x2780>
   13b38:	ldrb	r1, [r3, #1]!
   13b3c:	sub	r0, r1, #48	; 0x30
   13b40:	cmp	r0, #9
   13b44:	bhi	13adc <__assert_fail@plt+0x270c>
   13b48:	cmp	r1, #48	; 0x30
   13b4c:	beq	13b38 <__assert_fail@plt+0x2768>
   13b50:	add	r2, r2, #1
   13b54:	ldrb	r1, [r3]
   13b58:	sub	r1, r1, #48	; 0x30
   13b5c:	cmp	r1, #9
   13b60:	bls	13acc <__assert_fail@plt+0x26fc>
   13b64:	b	13adc <__assert_fail@plt+0x270c>
   13b68:	str	r9, [sp, #1456]	; 0x5b0
   13b6c:	str	r2, [sp, #1460]	; 0x5b4
   13b70:	str	r3, [fp]
   13b74:	cmp	lr, #0
   13b78:	movw	r3, #277	; 0x115
   13b7c:	movne	r6, #276	; 0x114
   13b80:	moveq	r6, r3
   13b84:	b	13bc0 <__assert_fail@plt+0x27f0>
   13b88:	lsr	r3, lr, #31
   13b8c:	strb	r3, [sp, #1456]	; 0x5b0
   13b90:	mov	r2, r9
   13b94:	asr	r3, r9, #31
   13b98:	strd	r2, [sp, #120]	; 0x78
   13b9c:	ldr	r3, [fp]
   13ba0:	sub	r3, r0, r3
   13ba4:	str	r3, [sp, #160]	; 0xa0
   13ba8:	str	r0, [fp]
   13bac:	movw	r2, #274	; 0x112
   13bb0:	movw	r3, #275	; 0x113
   13bb4:	cmp	lr, #0
   13bb8:	movne	r6, r2
   13bbc:	moveq	r6, r3
   13bc0:	add	r3, r7, r6
   13bc4:	ldrb	r3, [r3, #1992]	; 0x7c8
   13bc8:	b	1433c <__assert_fail@plt+0x2f6c>
   13bcc:	add	r3, sp, #220	; 0xdc
   13bd0:	b	13bd8 <__assert_fail@plt+0x2808>
   13bd4:	add	r3, sp, #220	; 0xdc
   13bd8:	add	r0, sp, #239	; 0xef
   13bdc:	cmp	r3, r0
   13be0:	strbcc	r1, [r3], #1
   13be4:	ldr	r2, [fp]
   13be8:	add	r1, r2, #1
   13bec:	str	r1, [fp]
   13bf0:	ldrb	r1, [r2, #1]
   13bf4:	cmp	r1, #65	; 0x41
   13bf8:	bcc	13c14 <__assert_fail@plt+0x2844>
   13bfc:	cmp	r1, #90	; 0x5a
   13c00:	bls	13bdc <__assert_fail@plt+0x280c>
   13c04:	sub	r2, r1, #97	; 0x61
   13c08:	uxtb	r2, r2
   13c0c:	cmp	r2, #25
   13c10:	bls	13bdc <__assert_fail@plt+0x280c>
   13c14:	cmp	r1, #46	; 0x2e
   13c18:	beq	13bdc <__assert_fail@plt+0x280c>
   13c1c:	mov	r2, #0
   13c20:	strb	r2, [r3]
   13c24:	ldrb	r3, [sp, #220]	; 0xdc
   13c28:	cmp	r3, r2
   13c2c:	beq	13c54 <__assert_fail@plt+0x2884>
   13c30:	add	r2, sp, #220	; 0xdc
   13c34:	mov	r1, r3
   13c38:	sub	r0, r3, #97	; 0x61
   13c3c:	cmp	r0, #25
   13c40:	subls	r1, r3, #32
   13c44:	strb	r1, [r2]
   13c48:	ldrb	r3, [r2, #1]!
   13c4c:	cmp	r3, #0
   13c50:	bne	13c34 <__assert_fail@plt+0x2864>
   13c54:	add	r6, r7, #1248	; 0x4e0
   13c58:	movw	r1, #61856	; 0xf1a0
   13c5c:	movt	r1, #1
   13c60:	add	r0, sp, #220	; 0xdc
   13c64:	bl	110a0 <strcmp@plt>
   13c68:	cmp	r0, #0
   13c6c:	beq	13eac <__assert_fail@plt+0x2adc>
   13c70:	ldr	r1, [r6, #12]!
   13c74:	cmp	r1, #0
   13c78:	bne	13c60 <__assert_fail@plt+0x2890>
   13c7c:	add	r0, sp, #220	; 0xdc
   13c80:	bl	11274 <strlen@plt>
   13c84:	mov	r3, r0
   13c88:	str	r0, [sp, #68]	; 0x44
   13c8c:	cmp	r0, #3
   13c90:	moveq	r3, #1
   13c94:	beq	13ca4 <__assert_fail@plt+0x28d4>
   13c98:	cmp	r3, #4
   13c9c:	movne	r3, #0
   13ca0:	beq	13cbc <__assert_fail@plt+0x28ec>
   13ca4:	add	r9, r7, #1296	; 0x510
   13ca8:	add	r9, r9, #12
   13cac:	movw	r1, #61860	; 0xf1a4
   13cb0:	movt	r1, #1
   13cb4:	mov	r6, r3
   13cb8:	b	13cf4 <__assert_fail@plt+0x2924>
   13cbc:	ldrb	r3, [sp, #223]	; 0xdf
   13cc0:	cmp	r3, #46	; 0x2e
   13cc4:	movne	r3, #0
   13cc8:	moveq	r3, #1
   13ccc:	b	13ca4 <__assert_fail@plt+0x28d4>
   13cd0:	add	r0, sp, #220	; 0xdc
   13cd4:	bl	110a0 <strcmp@plt>
   13cd8:	clz	r0, r0
   13cdc:	lsr	r0, r0, #5
   13ce0:	cmp	r0, #0
   13ce4:	bne	13eb0 <__assert_fail@plt+0x2ae0>
   13ce8:	ldr	r1, [r9, #12]!
   13cec:	cmp	r1, #0
   13cf0:	beq	13d18 <__assert_fail@plt+0x2948>
   13cf4:	str	r9, [sp, #56]	; 0x38
   13cf8:	cmp	r6, #0
   13cfc:	beq	13cd0 <__assert_fail@plt+0x2900>
   13d00:	mov	r2, #3
   13d04:	add	r0, sp, #220	; 0xdc
   13d08:	bl	11394 <strncmp@plt>
   13d0c:	clz	r0, r0
   13d10:	lsr	r0, r0, #5
   13d14:	b	13ce0 <__assert_fail@plt+0x2910>
   13d18:	mov	r6, r0
   13d1c:	add	r1, sp, #220	; 0xdc
   13d20:	mov	r0, fp
   13d24:	bl	12e74 <__assert_fail@plt+0x1aa4>
   13d28:	subs	r3, r0, #0
   13d2c:	str	r3, [sp, #56]	; 0x38
   13d30:	bne	13ebc <__assert_fail@plt+0x2aec>
   13d34:	movw	r1, #61888	; 0xf1c0
   13d38:	movt	r1, #1
   13d3c:	add	r0, sp, #220	; 0xdc
   13d40:	bl	110a0 <strcmp@plt>
   13d44:	cmp	r0, #0
   13d48:	beq	15fac <__assert_fail@plt+0x4bdc>
   13d4c:	add	r3, r7, #1600	; 0x640
   13d50:	add	r3, r3, #8
   13d54:	str	r3, [sp, #72]	; 0x48
   13d58:	mov	r9, r3
   13d5c:	movw	r1, #61868	; 0xf1ac
   13d60:	movt	r1, #1
   13d64:	str	r9, [sp, #56]	; 0x38
   13d68:	add	r0, sp, #220	; 0xdc
   13d6c:	bl	110a0 <strcmp@plt>
   13d70:	cmp	r0, #0
   13d74:	beq	13eb0 <__assert_fail@plt+0x2ae0>
   13d78:	ldr	r1, [r9, #12]!
   13d7c:	cmp	r1, #0
   13d80:	bne	13d64 <__assert_fail@plt+0x2994>
   13d84:	add	r9, sp, #220	; 0xdc
   13d88:	ldr	r3, [sp, #68]	; 0x44
   13d8c:	sub	r3, r3, #1
   13d90:	str	r3, [sp, #76]	; 0x4c
   13d94:	ldrb	r3, [r9, r3]
   13d98:	cmp	r3, #83	; 0x53
   13d9c:	beq	13e2c <__assert_fail@plt+0x2a5c>
   13da0:	add	r9, r7, #1728	; 0x6c0
   13da4:	add	r9, r9, #12
   13da8:	movw	r1, #61876	; 0xf1b4
   13dac:	movt	r1, #1
   13db0:	str	r9, [sp, #56]	; 0x38
   13db4:	add	r0, sp, #220	; 0xdc
   13db8:	bl	110a0 <strcmp@plt>
   13dbc:	cmp	r0, #0
   13dc0:	beq	13eb0 <__assert_fail@plt+0x2ae0>
   13dc4:	ldr	r1, [r9, #12]!
   13dc8:	cmp	r1, #0
   13dcc:	bne	13db0 <__assert_fail@plt+0x29e0>
   13dd0:	ldr	r3, [sp, #68]	; 0x44
   13dd4:	cmp	r3, #1
   13dd8:	beq	13e7c <__assert_fail@plt+0x2aac>
   13ddc:	ldrb	r3, [sp, #220]	; 0xdc
   13de0:	cmp	r3, #0
   13de4:	addne	r1, sp, #220	; 0xdc
   13de8:	movne	r2, r1
   13dec:	movne	r0, #1
   13df0:	beq	13ed8 <__assert_fail@plt+0x2b08>
   13df4:	cmp	r3, #46	; 0x2e
   13df8:	addne	r2, r2, #1
   13dfc:	moveq	r6, r0
   13e00:	ldrb	r3, [r1, #1]!
   13e04:	strb	r3, [r2]
   13e08:	cmp	r3, #0
   13e0c:	bne	13df4 <__assert_fail@plt+0x2a24>
   13e10:	cmp	r6, #0
   13e14:	beq	13ed8 <__assert_fail@plt+0x2b08>
   13e18:	add	r1, sp, #220	; 0xdc
   13e1c:	mov	r0, fp
   13e20:	bl	12e74 <__assert_fail@plt+0x1aa4>
   13e24:	str	r0, [sp, #56]	; 0x38
   13e28:	b	13eb0 <__assert_fail@plt+0x2ae0>
   13e2c:	mov	r3, #0
   13e30:	ldr	r2, [sp, #76]	; 0x4c
   13e34:	strb	r3, [r9, r2]
   13e38:	movw	r1, #61868	; 0xf1ac
   13e3c:	movt	r1, #1
   13e40:	ldr	r3, [sp, #72]	; 0x48
   13e44:	str	r3, [sp, #56]	; 0x38
   13e48:	add	r0, sp, #220	; 0xdc
   13e4c:	bl	110a0 <strcmp@plt>
   13e50:	cmp	r0, #0
   13e54:	beq	13eb0 <__assert_fail@plt+0x2ae0>
   13e58:	ldr	r3, [sp, #72]	; 0x48
   13e5c:	ldr	r1, [r3, #12]!
   13e60:	str	r3, [sp, #72]	; 0x48
   13e64:	cmp	r1, #0
   13e68:	bne	13e40 <__assert_fail@plt+0x2a70>
   13e6c:	mov	r3, #83	; 0x53
   13e70:	ldr	r2, [sp, #76]	; 0x4c
   13e74:	strb	r3, [r9, r2]
   13e78:	b	13da0 <__assert_fail@plt+0x29d0>
   13e7c:	ldrb	r3, [sp, #220]	; 0xdc
   13e80:	cmp	r3, #65	; 0x41
   13e84:	beq	15fb8 <__assert_fail@plt+0x4be8>
   13e88:	add	r1, r7, #808	; 0x328
   13e8c:	ldr	r2, [r1, #12]!
   13e90:	cmp	r2, #0
   13e94:	beq	13ddc <__assert_fail@plt+0x2a0c>
   13e98:	ldrb	r2, [r2]
   13e9c:	cmp	r2, r3
   13ea0:	bne	13e8c <__assert_fail@plt+0x2abc>
   13ea4:	str	r1, [sp, #56]	; 0x38
   13ea8:	b	13ebc <__assert_fail@plt+0x2aec>
   13eac:	str	r6, [sp, #56]	; 0x38
   13eb0:	ldr	r3, [sp, #56]	; 0x38
   13eb4:	cmp	r3, #0
   13eb8:	beq	13ed8 <__assert_fail@plt+0x2b08>
   13ebc:	ldr	r1, [sp, #56]	; 0x38
   13ec0:	ldr	r2, [r1, #8]
   13ec4:	asr	r3, r2, #31
   13ec8:	add	r0, sp, #1456	; 0x5b0
   13ecc:	strd	r2, [r0]
   13ed0:	ldr	r6, [r1, #4]
   13ed4:	b	1431c <__assert_fail@plt+0x2f4c>
   13ed8:	ldrb	r3, [fp, #181]	; 0xb5
   13edc:	cmp	r3, #0
   13ee0:	moveq	r6, #63	; 0x3f
   13ee4:	beq	1431c <__assert_fail@plt+0x2f4c>
   13ee8:	mov	r2, #5
   13eec:	movw	r1, #61892	; 0xf1c4
   13ef0:	movt	r1, #1
   13ef4:	mov	r0, #0
   13ef8:	bl	11130 <dcgettext@plt>
   13efc:	add	r1, sp, #220	; 0xdc
   13f00:	bl	13270 <__assert_fail@plt+0x1ea0>
   13f04:	mov	r6, #63	; 0x3f
   13f08:	b	1431c <__assert_fail@plt+0x2f4c>
   13f0c:	add	r3, r0, #1
   13f10:	str	r3, [fp]
   13f14:	ldrb	r6, [r0]
   13f18:	cmp	r6, #0
   13f1c:	bgt	13bc0 <__assert_fail@plt+0x27f0>
   13f20:	mov	r3, #0
   13f24:	mov	r6, r3
   13f28:	b	1433c <__assert_fail@plt+0x2f6c>
   13f2c:	cmp	r2, #0
   13f30:	beq	13940 <__assert_fail@plt+0x2570>
   13f34:	ldr	r3, [fp]
   13f38:	add	r1, r3, #1
   13f3c:	str	r1, [fp]
   13f40:	ldrb	r3, [r3]
   13f44:	cmp	r3, #0
   13f48:	beq	13f64 <__assert_fail@plt+0x2b94>
   13f4c:	cmp	r3, #40	; 0x28
   13f50:	addeq	r2, r2, #1
   13f54:	beq	13f2c <__assert_fail@plt+0x2b5c>
   13f58:	cmp	r3, #41	; 0x29
   13f5c:	subeq	r2, r2, #1
   13f60:	b	13f2c <__assert_fail@plt+0x2b5c>
   13f64:	mov	r3, #0
   13f68:	mov	r6, r3
   13f6c:	b	1433c <__assert_fail@plt+0x2f6c>
   13f70:	add	r3, r7, r5
   13f74:	ldrb	r4, [r3, #2504]	; 0x9c8
   13f78:	str	r4, [sp, #76]	; 0x4c
   13f7c:	cmp	r4, #0
   13f80:	beq	15dc0 <__assert_fail@plt+0x49f0>
   13f84:	add	r3, r7, r4
   13f88:	ldrb	r3, [r3, #2620]	; 0xa3c
   13f8c:	str	r3, [sp, #108]	; 0x6c
   13f90:	str	r3, [sp, #112]	; 0x70
   13f94:	rsb	r0, r3, #1
   13f98:	rsb	r0, r0, r0, lsl #3
   13f9c:	lsl	r0, r0, #3
   13fa0:	add	r3, r8, r0
   13fa4:	add	r2, sp, #248	; 0xf8
   13fa8:	ldrd	r0, [r0, r8]
   13fac:	strd	r0, [sp, #240]	; 0xf0
   13fb0:	ldrd	r0, [r3, #8]
   13fb4:	strd	r0, [r2], #-8
   13fb8:	ldr	r1, [r3, #16]
   13fbc:	str	r1, [r2, #16]
   13fc0:	ldr	r1, [r3, #20]
   13fc4:	str	r1, [r2, #20]
   13fc8:	ldr	r9, [r3, #24]
   13fcc:	str	r9, [r2, #24]
   13fd0:	ldr	r1, [r3, #28]
   13fd4:	str	r1, [r2, #28]
   13fd8:	ldr	r5, [r3, #32]
   13fdc:	ldr	lr, [r3, #36]	; 0x24
   13fe0:	str	r5, [r2, #32]
   13fe4:	str	lr, [r2, #36]	; 0x24
   13fe8:	ldr	ip, [r3, #40]	; 0x28
   13fec:	ldr	r1, [r3, #44]	; 0x2c
   13ff0:	str	ip, [r2, #40]	; 0x28
   13ff4:	str	r1, [sp, #80]	; 0x50
   13ff8:	str	r1, [r2, #44]	; 0x2c
   13ffc:	ldrd	r0, [r3, #48]	; 0x30
   14000:	strd	r0, [r2, #48]	; 0x30
   14004:	ldr	r2, [r3, #8]
   14008:	str	r2, [sp, #84]	; 0x54
   1400c:	ldr	r2, [r3, #12]
   14010:	str	r2, [sp, #88]	; 0x58
   14014:	ldr	r2, [r3, #16]
   14018:	str	r2, [sp, #96]	; 0x60
   1401c:	ldr	r2, [r3, #20]
   14020:	str	r2, [sp, #100]	; 0x64
   14024:	ldr	r2, [r3, #28]
   14028:	str	r2, [sp, #92]	; 0x5c
   1402c:	str	r5, [sp, #68]	; 0x44
   14030:	str	lr, [sp, #72]	; 0x48
   14034:	str	ip, [sp, #56]	; 0x38
   14038:	ldr	r2, [sp, #80]	; 0x50
   1403c:	str	r2, [sp, #60]	; 0x3c
   14040:	ldr	r3, [r3, #48]	; 0x30
   14044:	str	r3, [sp, #80]	; 0x50
   14048:	sub	r1, r4, #4
   1404c:	cmp	r1, #87	; 0x57
   14050:	ldrls	pc, [pc, r1, lsl #2]
   14054:	b	141e4 <__assert_fail@plt+0x2e14>
   14058:			; <UNDEFINED> instruction: 0x000141b8
   1405c:	andeq	r4, r1, r4, ror #3
   14060:	andeq	r4, r1, r4, ror #3
   14064:	andeq	r4, r1, r4, ror #7
   14068:	andeq	r4, r1, ip, lsl r4
   1406c:	andeq	r4, r1, r8, asr #8
   14070:	andeq	r4, r1, r4, ror r4
   14074:	andeq	r4, r1, r0, lsr #9
   14078:	andeq	r4, r1, ip, asr #9
   1407c:	strdeq	r4, [r1], -r8
   14080:	andeq	r4, r1, r8, lsl r5
   14084:	andeq	r4, r1, r8, lsr r5
   14088:	andeq	r4, r1, r4, ror #3
   1408c:	andeq	r4, r1, r4, ror #3
   14090:	andeq	r4, r1, r8, asr r5
   14094:	andeq	r4, r1, r0, lsl #11
   14098:	andeq	r4, r1, r8, lsr #11
   1409c:	andeq	r4, r1, r4, ror #3
   140a0:	ldrdeq	r4, [r1], -r8
   140a4:	andeq	r4, r1, r0, lsl #12
   140a8:	andeq	r4, r1, r8, lsr #12
   140ac:	andeq	r4, r1, r4, ror #3
   140b0:	andeq	r4, r1, r4, ror #3
   140b4:	andeq	r4, r1, r8, asr r6
   140b8:	andeq	r4, r1, ip, ror r8
   140bc:	andeq	r4, r1, r8, lsl #17
   140c0:	andeq	r4, r1, r0, lsr #17
   140c4:	andeq	r4, r1, ip, lsr #17
   140c8:			; <UNDEFINED> instruction: 0x000148bc
   140cc:	andeq	r4, r1, r0, lsr r9
   140d0:	andeq	r4, r1, r8, lsr #19
   140d4:	strdeq	r4, [r1], -r8
   140d8:	andeq	r4, r1, r8, lsl #24
   140dc:	andeq	r4, r1, r8, lsl ip
   140e0:	andeq	r4, r1, r0, lsr ip
   140e4:	andeq	r4, r1, r8, asr #24
   140e8:	andeq	r4, r1, r4, ror #24
   140ec:	andeq	r4, r1, r0, lsl #25
   140f0:	muleq	r1, r4, ip
   140f4:	andeq	r4, r1, r8, ror #26
   140f8:	andeq	r4, r1, r4, lsr #27
   140fc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14100:	andeq	r4, r1, r8, lsl #28
   14104:	andeq	r4, r1, r4, lsr lr
   14108:	andeq	r4, r1, r8, asr #28
   1410c:	andeq	r4, r1, r4, ror #3
   14110:	andeq	r4, r1, r4, ror lr
   14114:	ldrdeq	r4, [r1], -r0
   14118:	andeq	r4, r1, ip, lsr #30
   1411c:	andeq	r4, r1, r0, lsl #31
   14120:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14124:	andeq	r5, r1, ip, lsl r0
   14128:	andeq	r5, r1, r4, rrx
   1412c:	strheq	r5, [r1], -r0
   14130:	andeq	r5, r1, r4, lsl #2
   14134:	andeq	r5, r1, r8, asr r1
   14138:	andeq	r5, r1, ip, lsr #3
   1413c:	andeq	r5, r1, r0, ror #6
   14140:	andeq	r5, r1, r4, lsl r5
   14144:	andeq	r5, r1, r8, ror #10
   14148:			; <UNDEFINED> instruction: 0x000155b8
   1414c:	andeq	r5, r1, r8, lsl #12
   14150:	andeq	r5, r1, r8, asr r6
   14154:	andeq	r5, r1, ip, lsr #13
   14158:	andeq	r5, r1, r0, lsl #14
   1415c:	andeq	r5, r1, r4, asr r7
   14160:	andeq	r5, r1, r0, lsr #15
   14164:	andeq	r5, r1, ip, ror #15
   14168:	andeq	r5, r1, r4, asr #16
   1416c:	muleq	r1, ip, r8
   14170:	andeq	r4, r1, r4, ror #3
   14174:	strdeq	r5, [r1], -r0
   14178:	andeq	r5, r1, r8, lsr r9
   1417c:	andeq	r5, r1, ip, lsl #19
   14180:	andeq	r5, r1, r0, asr #22
   14184:	muleq	r1, r0, fp
   14188:	andeq	r5, r1, r4, ror #23
   1418c:	andeq	r5, r1, r0, lsr ip
   14190:	andeq	r4, r1, r4, ror #3
   14194:	andeq	r4, r1, r4, ror #3
   14198:	andeq	r4, r1, r4, ror #3
   1419c:	andeq	r5, r1, r4, lsl #25
   141a0:	andeq	r4, r1, r4, ror #3
   141a4:	andeq	r5, r1, r4, asr #25
   141a8:	andeq	r5, r1, r4, lsl #26
   141ac:	andeq	r5, r1, r4, lsr #26
   141b0:	muleq	r1, r8, sp
   141b4:	andeq	r5, r1, r8, lsr #27
   141b8:	ldrd	r2, [r8]
   141bc:	strd	r2, [fp, #88]	; 0x58
   141c0:	mov	r3, #1
   141c4:	strb	r3, [fp, #152]	; 0x98
   141c8:	mov	r2, #5
   141cc:	movw	r1, #61920	; 0xf1e0
   141d0:	movt	r1, #1
   141d4:	mov	r0, #0
   141d8:	bl	11130 <dcgettext@plt>
   141dc:	mov	r1, fp
   141e0:	bl	134f8 <__assert_fail@plt+0x2128>
   141e4:	ldr	r3, [sp, #108]	; 0x6c
   141e8:	rsb	r1, r3, r3, lsl #3
   141ec:	sub	r2, r8, r1, lsl #3
   141f0:	str	r2, [sp, #64]	; 0x40
   141f4:	sub	r4, sl, r3, lsl #1
   141f8:	add	r8, r2, #56	; 0x38
   141fc:	ldr	r0, [sp, #84]	; 0x54
   14200:	str	r0, [sp, #248]	; 0xf8
   14204:	ldr	ip, [sp, #88]	; 0x58
   14208:	str	ip, [sp, #252]	; 0xfc
   1420c:	ldr	lr, [sp, #96]	; 0x60
   14210:	str	lr, [sp, #256]	; 0x100
   14214:	ldr	r5, [sp, #100]	; 0x64
   14218:	str	r5, [sp, #260]	; 0x104
   1421c:	str	r9, [sp, #264]	; 0x108
   14220:	ldr	sl, [sp, #92]	; 0x5c
   14224:	str	sl, [sp, #268]	; 0x10c
   14228:	ldr	r3, [sp, #68]	; 0x44
   1422c:	str	r3, [sp, #272]	; 0x110
   14230:	ldr	r3, [sp, #72]	; 0x48
   14234:	str	r3, [sp, #276]	; 0x114
   14238:	ldrd	r2, [sp, #56]	; 0x38
   1423c:	add	r1, sp, #280	; 0x118
   14240:	strd	r2, [r1]
   14244:	ldr	r3, [sp, #80]	; 0x50
   14248:	str	r3, [sp, #288]	; 0x120
   1424c:	ldrd	r2, [sp, #240]	; 0xf0
   14250:	ldr	r1, [sp, #64]	; 0x40
   14254:	strd	r2, [r1, #56]	; 0x38
   14258:	str	r0, [r8, #8]
   1425c:	str	ip, [r8, #12]
   14260:	str	lr, [r8, #16]
   14264:	str	r5, [r8, #20]
   14268:	str	r9, [r8, #24]
   1426c:	str	sl, [r8, #28]
   14270:	ldr	r3, [sp, #68]	; 0x44
   14274:	str	r3, [r8, #32]
   14278:	ldr	r3, [sp, #72]	; 0x48
   1427c:	str	r3, [r8, #36]	; 0x24
   14280:	ldrd	r2, [sp, #56]	; 0x38
   14284:	strd	r2, [r8, #40]	; 0x28
   14288:	add	r3, sp, #288	; 0x120
   1428c:	ldrd	r2, [r3]
   14290:	strd	r2, [r8, #48]	; 0x30
   14294:	ldr	r3, [sp, #76]	; 0x4c
   14298:	add	r3, r7, r3
   1429c:	ldrb	r3, [r3, #2712]	; 0xa98
   142a0:	sub	r3, r3, #28
   142a4:	ldrsh	r0, [r4]
   142a8:	add	r1, r7, r3
   142ac:	movw	r2, #2804	; 0xaf4
   142b0:	ldrsb	r2, [r1, r2]
   142b4:	add	r2, r2, r0
   142b8:	cmp	r2, #112	; 0x70
   142bc:	bhi	142d4 <__assert_fail@plt+0x2f04>
   142c0:	add	r1, r7, r2
   142c4:	add	r1, r1, #2272	; 0x8e0
   142c8:	ldrsb	r1, [r1]
   142cc:	cmp	r1, r0
   142d0:	beq	15db4 <__assert_fail@plt+0x49e4>
   142d4:	add	r3, r7, r3
   142d8:	add	r3, r3, #2832	; 0xb10
   142dc:	ldrsb	r5, [r3]
   142e0:	add	sl, r4, #2
   142e4:	strh	r5, [r4, #2]
   142e8:	add	r3, sp, #1440	; 0x5a0
   142ec:	add	r3, r3, #14
   142f0:	cmp	sl, r3
   142f4:	bcs	15ea8 <__assert_fail@plt+0x4ad8>
   142f8:	cmp	r5, #12
   142fc:	beq	15ee8 <__assert_fail@plt+0x4b18>
   14300:	add	r2, r7, r5
   14304:	movw	r3, #1132	; 0x46c
   14308:	ldrsb	r4, [r2, r3]
   1430c:	cmn	r4, #93	; 0x5d
   14310:	beq	13f70 <__assert_fail@plt+0x2ba0>
   14314:	cmn	r6, #2
   14318:	beq	13940 <__assert_fail@plt+0x2570>
   1431c:	cmp	r6, #0
   14320:	movle	r3, #0
   14324:	movle	r6, r3
   14328:	ble	1433c <__assert_fail@plt+0x2f6c>
   1432c:	movw	r3, #277	; 0x115
   14330:	cmp	r6, r3
   14334:	movhi	r3, #2
   14338:	bls	13bc0 <__assert_fail@plt+0x27f0>
   1433c:	add	r4, r3, r4
   14340:	cmp	r4, #112	; 0x70
   14344:	bhi	13f70 <__assert_fail@plt+0x2ba0>
   14348:	add	r2, r7, r4
   1434c:	add	r2, r2, #2272	; 0x8e0
   14350:	ldrsb	r2, [r2]
   14354:	cmp	r2, r3
   14358:	bne	13f70 <__assert_fail@plt+0x2ba0>
   1435c:	add	r4, r7, r4
   14360:	ldrb	r5, [r4, #2388]	; 0x954
   14364:	cmp	r5, #0
   14368:	ble	15fc4 <__assert_fail@plt+0x4bf4>
   1436c:	ldr	r3, [sp, #104]	; 0x68
   14370:	cmp	r3, #0
   14374:	subne	r3, r3, #1
   14378:	strne	r3, [sp, #104]	; 0x68
   1437c:	add	r1, r8, #56	; 0x38
   14380:	add	r0, sp, #1456	; 0x5b0
   14384:	add	r0, r0, #8
   14388:	ldrd	r2, [sp, #120]	; 0x78
   1438c:	strd	r2, [r0]
   14390:	ldr	r3, [sp, #160]	; 0xa0
   14394:	str	r3, [sp, #1472]	; 0x5c0
   14398:	add	r0, sp, #1456	; 0x5b0
   1439c:	ldrd	r2, [r0]
   143a0:	strd	r2, [r8, #56]	; 0x38
   143a4:	ldrd	r2, [sp, #120]	; 0x78
   143a8:	strd	r2, [r8, #64]	; 0x40
   143ac:	ldrd	r2, [r0, #16]
   143b0:	strd	r2, [r8, #72]	; 0x48
   143b4:	ldrd	r2, [r0, #24]
   143b8:	strd	r2, [r8, #80]	; 0x50
   143bc:	ldrd	r2, [r0, #32]
   143c0:	strd	r2, [r8, #88]	; 0x58
   143c4:	ldrd	r2, [r0, #40]	; 0x28
   143c8:	strd	r2, [r8, #96]	; 0x60
   143cc:	ldrd	r2, [r0, #48]	; 0x30
   143d0:	strd	r2, [r8, #104]	; 0x68
   143d4:	mov	r8, r1
   143d8:	mov	r4, sl
   143dc:	mvn	r6, #1
   143e0:	b	142e0 <__assert_fail@plt+0x2f10>
   143e4:	ldr	r3, [fp, #172]	; 0xac
   143e8:	add	r3, r3, #1
   143ec:	str	r3, [fp, #172]	; 0xac
   143f0:	ldr	r3, [fp, #156]	; 0x9c
   143f4:	add	r3, r3, #1
   143f8:	str	r3, [fp, #156]	; 0x9c
   143fc:	mov	r2, #5
   14400:	movw	r1, #61940	; 0xf1f4
   14404:	movt	r1, #1
   14408:	mov	r0, #0
   1440c:	bl	11130 <dcgettext@plt>
   14410:	mov	r1, fp
   14414:	bl	134f8 <__assert_fail@plt+0x2128>
   14418:	b	141e4 <__assert_fail@plt+0x2e14>
   1441c:	ldr	r3, [fp, #172]	; 0xac
   14420:	add	r3, r3, #1
   14424:	str	r3, [fp, #172]	; 0xac
   14428:	mov	r2, #5
   1442c:	movw	r1, #61944	; 0xf1f8
   14430:	movt	r1, #1
   14434:	mov	r0, #0
   14438:	bl	11130 <dcgettext@plt>
   1443c:	mov	r1, fp
   14440:	bl	134f8 <__assert_fail@plt+0x2128>
   14444:	b	141e4 <__assert_fail@plt+0x2e14>
   14448:	ldr	r3, [fp, #164]	; 0xa4
   1444c:	add	r3, r3, #1
   14450:	str	r3, [fp, #164]	; 0xa4
   14454:	mov	r2, #5
   14458:	movw	r1, #61952	; 0xf200
   1445c:	movt	r1, #1
   14460:	mov	r0, #0
   14464:	bl	11130 <dcgettext@plt>
   14468:	mov	r1, fp
   1446c:	bl	134f8 <__assert_fail@plt+0x2128>
   14470:	b	141e4 <__assert_fail@plt+0x2e14>
   14474:	ldr	r3, [fp, #176]	; 0xb0
   14478:	add	r3, r3, #1
   1447c:	str	r3, [fp, #176]	; 0xb0
   14480:	mov	r2, #5
   14484:	movw	r1, #63288	; 0xf738
   14488:	movt	r1, #1
   1448c:	mov	r0, #0
   14490:	bl	11130 <dcgettext@plt>
   14494:	mov	r1, fp
   14498:	bl	134f8 <__assert_fail@plt+0x2128>
   1449c:	b	141e4 <__assert_fail@plt+0x2e14>
   144a0:	ldr	r3, [fp, #156]	; 0x9c
   144a4:	add	r3, r3, #1
   144a8:	str	r3, [fp, #156]	; 0x9c
   144ac:	mov	r2, #5
   144b0:	movw	r1, #58456	; 0xe458
   144b4:	movt	r1, #1
   144b8:	mov	r0, #0
   144bc:	bl	11130 <dcgettext@plt>
   144c0:	mov	r1, fp
   144c4:	bl	134f8 <__assert_fail@plt+0x2128>
   144c8:	b	141e4 <__assert_fail@plt+0x2e14>
   144cc:	ldr	r3, [fp, #160]	; 0xa0
   144d0:	add	r3, r3, #1
   144d4:	str	r3, [fp, #160]	; 0xa0
   144d8:	mov	r2, #5
   144dc:	movw	r1, #61964	; 0xf20c
   144e0:	movt	r1, #1
   144e4:	mov	r0, #0
   144e8:	bl	11130 <dcgettext@plt>
   144ec:	mov	r1, fp
   144f0:	bl	134f8 <__assert_fail@plt+0x2128>
   144f4:	b	141e4 <__assert_fail@plt+0x2e14>
   144f8:	mov	r2, #5
   144fc:	movw	r1, #61968	; 0xf210
   14500:	movt	r1, #1
   14504:	mov	r0, #0
   14508:	bl	11130 <dcgettext@plt>
   1450c:	mov	r1, fp
   14510:	bl	13384 <__assert_fail@plt+0x1fb4>
   14514:	b	141e4 <__assert_fail@plt+0x2e14>
   14518:	mov	r2, #5
   1451c:	movw	r1, #61980	; 0xf21c
   14520:	movt	r1, #1
   14524:	mov	r0, #0
   14528:	bl	11130 <dcgettext@plt>
   1452c:	mov	r1, fp
   14530:	bl	134f8 <__assert_fail@plt+0x2128>
   14534:	b	141e4 <__assert_fail@plt+0x2e14>
   14538:	mov	r2, #5
   1453c:	movw	r1, #61988	; 0xf224
   14540:	movt	r1, #1
   14544:	mov	r0, #0
   14548:	bl	11130 <dcgettext@plt>
   1454c:	mov	r1, fp
   14550:	bl	13384 <__assert_fail@plt+0x1fb4>
   14554:	b	141e4 <__assert_fail@plt+0x2e14>
   14558:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   1455c:	strd	r2, [fp, #72]	; 0x48
   14560:	mov	r3, #0
   14564:	str	r3, [fp, #80]	; 0x50
   14568:	str	r3, [fp, #84]	; 0x54
   1456c:	str	r3, [fp, #88]	; 0x58
   14570:	str	r3, [fp, #92]	; 0x5c
   14574:	ldr	r3, [r8]
   14578:	str	r3, [fp, #28]
   1457c:	b	141e4 <__assert_fail@plt+0x2e14>
   14580:	ldrd	r0, [r8, #-48]	; 0xffffffd0
   14584:	ldrd	r2, [r8, #-160]	; 0xffffff60
   14588:	strd	r2, [fp, #72]	; 0x48
   1458c:	strd	r0, [fp, #80]	; 0x50
   14590:	mov	r3, #0
   14594:	str	r3, [fp, #88]	; 0x58
   14598:	str	r3, [fp, #92]	; 0x5c
   1459c:	ldr	r3, [r8]
   145a0:	str	r3, [fp, #28]
   145a4:	b	141e4 <__assert_fail@plt+0x2e14>
   145a8:	ldrd	r0, [r8, #-160]	; 0xffffff60
   145ac:	ldr	lr, [r8, #-56]	; 0xffffffc8
   145b0:	ldr	ip, [r8, #-52]	; 0xffffffcc
   145b4:	sub	r3, r8, #272	; 0x110
   145b8:	ldrd	r2, [r3]
   145bc:	strd	r2, [fp, #72]	; 0x48
   145c0:	strd	r0, [fp, #80]	; 0x50
   145c4:	str	lr, [fp, #88]	; 0x58
   145c8:	str	ip, [fp, #92]	; 0x5c
   145cc:	ldr	r3, [r8]
   145d0:	str	r3, [fp, #28]
   145d4:	b	141e4 <__assert_fail@plt+0x2e14>
   145d8:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   145dc:	strd	r2, [fp, #72]	; 0x48
   145e0:	mov	r3, #0
   145e4:	str	r3, [fp, #80]	; 0x50
   145e8:	str	r3, [fp, #84]	; 0x54
   145ec:	str	r3, [fp, #88]	; 0x58
   145f0:	str	r3, [fp, #92]	; 0x5c
   145f4:	mov	r3, #2
   145f8:	str	r3, [fp, #28]
   145fc:	b	141e4 <__assert_fail@plt+0x2e14>
   14600:	ldrd	r0, [r8, #-48]	; 0xffffffd0
   14604:	ldrd	r2, [r8, #-160]	; 0xffffff60
   14608:	strd	r2, [fp, #72]	; 0x48
   1460c:	strd	r0, [fp, #80]	; 0x50
   14610:	mov	r3, #0
   14614:	str	r3, [fp, #88]	; 0x58
   14618:	str	r3, [fp, #92]	; 0x5c
   1461c:	mov	r3, #2
   14620:	str	r3, [fp, #28]
   14624:	b	141e4 <__assert_fail@plt+0x2e14>
   14628:	ldrd	r0, [r8, #-160]	; 0xffffff60
   1462c:	ldr	lr, [r8, #-56]	; 0xffffffc8
   14630:	ldr	ip, [r8, #-52]	; 0xffffffcc
   14634:	sub	r3, r8, #272	; 0x110
   14638:	ldrd	r2, [r3]
   1463c:	strd	r2, [fp, #72]	; 0x48
   14640:	strd	r0, [fp, #80]	; 0x50
   14644:	str	lr, [fp, #88]	; 0x58
   14648:	str	ip, [fp, #92]	; 0x5c
   1464c:	mov	r3, #2
   14650:	str	r3, [fp, #28]
   14654:	b	141e4 <__assert_fail@plt+0x2e14>
   14658:	ldr	r3, [fp, #176]	; 0xb0
   1465c:	add	r3, r3, #1
   14660:	str	r3, [fp, #176]	; 0xb0
   14664:	ldrd	r0, [r8]
   14668:	strd	r0, [sp, #168]	; 0xa8
   1466c:	ldrb	lr, [r8, #-56]	; 0xffffffc8
   14670:	ldr	r3, [r8, #-48]	; 0xffffffd0
   14674:	mov	r4, r3
   14678:	ldr	r3, [r8, #-44]	; 0xffffffd4
   1467c:	str	r3, [sp, #164]	; 0xa4
   14680:	ldr	r2, [r8, #-40]	; 0xffffffd8
   14684:	lsr	r3, r1, #31
   14688:	cmp	r2, #2
   1468c:	movgt	r3, #0
   14690:	andle	r3, r3, #1
   14694:	cmp	r3, #0
   14698:	bne	14710 <__assert_fail@plt+0x3340>
   1469c:	ldrd	r2, [sp, #168]	; 0xa8
   146a0:	cmp	r2, #0
   146a4:	sbcs	r3, r3, #0
   146a8:	blt	14748 <__assert_fail@plt+0x3378>
   146ac:	mov	r3, #0
   146b0:	mov	r5, r3
   146b4:	ldr	r2, [sp, #164]	; 0xa4
   146b8:	cmp	r2, r4, asr #31
   146bc:	bne	147e0 <__assert_fail@plt+0x3410>
   146c0:	mov	r2, #60	; 0x3c
   146c4:	smull	r2, r3, r4, r2
   146c8:	mov	r0, r2
   146cc:	mov	r1, r3
   146d0:	mov	r3, r1
   146d4:	str	r5, [sp, #164]	; 0xa4
   146d8:	cmp	lr, #0
   146dc:	beq	1485c <__assert_fail@plt+0x348c>
   146e0:	mov	ip, #0
   146e4:	ldrd	r4, [sp, #168]	; 0xa8
   146e8:	subs	r0, r0, r4
   146ec:	sbcs	r1, r3, r5
   146f0:	movvs	ip, #1
   146f4:	mov	r2, r0
   146f8:	mov	r3, r1
   146fc:	ldr	r1, [sp, #164]	; 0xa4
   14700:	orrs	r1, r1, ip
   14704:	beq	147b0 <__assert_fail@plt+0x33e0>
   14708:	mov	r0, #1
   1470c:	b	15eb4 <__assert_fail@plt+0x4ae4>
   14710:	adds	r3, r4, r4
   14714:	ldr	lr, [sp, #164]	; 0xa4
   14718:	adc	r2, lr, lr
   1471c:	adds	r3, r3, r4
   14720:	adc	r2, r2, lr
   14724:	lsl	r1, r2, #5
   14728:	orr	r1, r1, r3, lsr #27
   1472c:	lsl	r0, r3, #5
   14730:	adds	r3, r3, r0
   14734:	adc	r2, r2, r1
   14738:	adds	r3, r4, r3
   1473c:	mov	r4, r3
   14740:	adc	r3, lr, r2
   14744:	str	r3, [sp, #164]	; 0xa4
   14748:	mov	r2, #100	; 0x64
   1474c:	mov	r3, #0
   14750:	mov	r5, r4
   14754:	mov	r0, r4
   14758:	ldr	r4, [sp, #164]	; 0xa4
   1475c:	mov	r1, r4
   14760:	bl	1d7fc <__assert_fail@plt+0xc42c>
   14764:	lsl	r3, r1, #4
   14768:	lsl	ip, r0, #4
   1476c:	orr	r2, r3, r0, lsr #28
   14770:	subs	ip, ip, r0
   14774:	sbc	r3, r2, r1
   14778:	lsl	r3, r3, #2
   1477c:	orr	r3, r3, ip, lsr #30
   14780:	lsl	r2, ip, #2
   14784:	str	r2, [sp, #164]	; 0xa4
   14788:	str	r3, [sp, #168]	; 0xa8
   1478c:	mov	r2, #100	; 0x64
   14790:	mov	r3, #0
   14794:	mov	r0, r5
   14798:	mov	r1, r4
   1479c:	bl	1d7fc <__assert_fail@plt+0xc42c>
   147a0:	ldr	r1, [sp, #164]	; 0xa4
   147a4:	adds	r2, r1, r2
   147a8:	ldr	r1, [sp, #168]	; 0xa8
   147ac:	adc	r3, r1, r3
   147b0:	adds	r1, r2, #1440	; 0x5a0
   147b4:	str	r1, [sp, #184]	; 0xb8
   147b8:	adc	r3, r3, #0
   147bc:	str	r3, [sp, #188]	; 0xbc
   147c0:	ldrd	r0, [sp, #184]	; 0xb8
   147c4:	cmp	r1, #0
   147c8:	cmpeq	r0, #2880	; 0xb40
   147cc:	bhi	14708 <__assert_fail@plt+0x3338>
   147d0:	rsb	r2, r2, r2, lsl #4
   147d4:	lsl	r3, r2, #2
   147d8:	str	r3, [fp, #24]
   147dc:	b	141e4 <__assert_fail@plt+0x2e14>
   147e0:	mov	r0, #60	; 0x3c
   147e4:	umull	r2, r3, r4, r0
   147e8:	strd	r2, [sp, #176]	; 0xb0
   147ec:	ldr	r1, [sp, #164]	; 0xa4
   147f0:	umull	r2, r3, r0, r1
   147f4:	cmp	r1, #0
   147f8:	bge	1480c <__assert_fail@plt+0x343c>
   147fc:	mov	ip, r0
   14800:	mov	r1, #0
   14804:	subs	r2, r2, r1
   14808:	sbc	r3, r3, r0
   1480c:	ldr	r1, [sp, #180]	; 0xb4
   14810:	mov	r0, #0
   14814:	adds	r1, r2, r1
   14818:	adc	r0, r3, r0
   1481c:	cmp	r0, r1, asr #31
   14820:	bne	1482c <__assert_fail@plt+0x345c>
   14824:	ldr	r0, [sp, #176]	; 0xb0
   14828:	b	146d0 <__assert_fail@plt+0x3300>
   1482c:	ldr	ip, [sp, #164]	; 0xa4
   14830:	lsl	r1, ip, #4
   14834:	lsl	r3, r4, #4
   14838:	orr	r2, r1, r4, lsr #28
   1483c:	subs	r3, r3, r4
   14840:	sbc	r2, r2, ip
   14844:	lsl	r1, r2, #2
   14848:	orr	r1, r1, r3, lsr #30
   1484c:	lsl	r0, r3, #2
   14850:	mov	r3, #1
   14854:	mov	r5, r3
   14858:	b	146d0 <__assert_fail@plt+0x3300>
   1485c:	ldrd	r4, [sp, #168]	; 0xa8
   14860:	adds	r0, r0, r4
   14864:	adcs	r1, r3, r5
   14868:	mov	r2, r0
   1486c:	mov	r3, r1
   14870:	movvs	ip, #1
   14874:	movvc	ip, #0
   14878:	b	146fc <__assert_fail@plt+0x332c>
   1487c:	ldr	r3, [r8]
   14880:	str	r3, [fp, #20]
   14884:	b	141e4 <__assert_fail@plt+0x2e14>
   14888:	mov	r3, #1
   1488c:	str	r3, [fp, #20]
   14890:	ldr	r3, [fp, #168]	; 0xa8
   14894:	add	r3, r3, #1
   14898:	str	r3, [fp, #168]	; 0xa8
   1489c:	b	141e4 <__assert_fail@plt+0x2e14>
   148a0:	ldr	r3, [r8]
   148a4:	str	r3, [fp, #24]
   148a8:	b	141e4 <__assert_fail@plt+0x2e14>
   148ac:	movw	r3, #40336	; 0x9d90
   148b0:	movt	r3, #65535	; 0xffff
   148b4:	str	r3, [fp, #24]
   148b8:	b	141e4 <__assert_fail@plt+0x2e14>
   148bc:	ldr	r3, [r8, #-56]	; 0xffffffc8
   148c0:	str	r3, [fp, #24]
   148c4:	mov	r3, #1
   148c8:	str	r3, [sp, #48]	; 0x30
   148cc:	ldrd	r2, [r8, #8]
   148d0:	strd	r2, [sp]
   148d4:	ldrd	r2, [r8, #16]
   148d8:	strd	r2, [sp, #8]
   148dc:	ldrd	r2, [r8, #24]
   148e0:	strd	r2, [sp, #16]
   148e4:	ldrd	r2, [r8, #32]
   148e8:	strd	r2, [sp, #24]
   148ec:	ldrd	r2, [r8, #40]	; 0x28
   148f0:	strd	r2, [sp, #32]
   148f4:	ldrd	r2, [r8, #48]	; 0x30
   148f8:	strd	r2, [sp, #40]	; 0x28
   148fc:	ldm	r8, {r2, r3}
   14900:	mov	r0, fp
   14904:	bl	12b9c <__assert_fail@plt+0x17cc>
   14908:	cmp	r0, #0
   1490c:	beq	15ef8 <__assert_fail@plt+0x4b28>
   14910:	mov	r2, #5
   14914:	movw	r1, #61968	; 0xf210
   14918:	movt	r1, #1
   1491c:	mov	r0, #0
   14920:	bl	11130 <dcgettext@plt>
   14924:	mov	r1, fp
   14928:	bl	13384 <__assert_fail@plt+0x1fb4>
   1492c:	b	141e4 <__assert_fail@plt+0x2e14>
   14930:	movw	r3, #40336	; 0x9d90
   14934:	movt	r3, #65535	; 0xffff
   14938:	str	r3, [fp, #24]
   1493c:	mov	r3, #1
   14940:	str	r3, [sp, #48]	; 0x30
   14944:	ldrd	r2, [r8, #8]
   14948:	strd	r2, [sp]
   1494c:	ldrd	r2, [r8, #16]
   14950:	strd	r2, [sp, #8]
   14954:	ldrd	r2, [r8, #24]
   14958:	strd	r2, [sp, #16]
   1495c:	ldrd	r2, [r8, #32]
   14960:	strd	r2, [sp, #24]
   14964:	ldrd	r2, [r8, #40]	; 0x28
   14968:	strd	r2, [sp, #32]
   1496c:	ldrd	r2, [r8, #48]	; 0x30
   14970:	strd	r2, [sp, #40]	; 0x28
   14974:	ldm	r8, {r2, r3}
   14978:	mov	r0, fp
   1497c:	bl	12b9c <__assert_fail@plt+0x17cc>
   14980:	cmp	r0, #0
   14984:	beq	15f00 <__assert_fail@plt+0x4b30>
   14988:	mov	r2, #5
   1498c:	movw	r1, #61968	; 0xf210
   14990:	movt	r1, #1
   14994:	mov	r0, #0
   14998:	bl	11130 <dcgettext@plt>
   1499c:	mov	r1, fp
   149a0:	bl	13384 <__assert_fail@plt+0x1fb4>
   149a4:	b	141e4 <__assert_fail@plt+0x2e14>
   149a8:	ldrd	r0, [r8]
   149ac:	strd	r0, [sp, #168]	; 0xa8
   149b0:	ldrb	lr, [r8, #-56]	; 0xffffffc8
   149b4:	ldr	r3, [r8, #-48]	; 0xffffffd0
   149b8:	mov	r4, r3
   149bc:	ldr	r3, [r8, #-44]	; 0xffffffd4
   149c0:	str	r3, [sp, #164]	; 0xa4
   149c4:	ldr	r2, [r8, #-40]	; 0xffffffd8
   149c8:	lsr	r3, r1, #31
   149cc:	cmp	r2, #2
   149d0:	movgt	r3, #0
   149d4:	andle	r3, r3, #1
   149d8:	cmp	r3, #0
   149dc:	bne	14a54 <__assert_fail@plt+0x3684>
   149e0:	ldrd	r2, [sp, #168]	; 0xa8
   149e4:	cmp	r2, #0
   149e8:	sbcs	r3, r3, #0
   149ec:	blt	14a8c <__assert_fail@plt+0x36bc>
   149f0:	mov	r3, #0
   149f4:	mov	r5, r3
   149f8:	ldr	r2, [sp, #164]	; 0xa4
   149fc:	cmp	r2, r4, asr #31
   14a00:	bne	14b5c <__assert_fail@plt+0x378c>
   14a04:	mov	r2, #60	; 0x3c
   14a08:	smull	r2, r3, r4, r2
   14a0c:	mov	r0, r2
   14a10:	mov	r1, r3
   14a14:	mov	r3, r1
   14a18:	str	r5, [sp, #164]	; 0xa4
   14a1c:	cmp	lr, #0
   14a20:	beq	14bd8 <__assert_fail@plt+0x3808>
   14a24:	mov	ip, #0
   14a28:	ldrd	r4, [sp, #168]	; 0xa8
   14a2c:	subs	r0, r0, r4
   14a30:	sbcs	r1, r3, r5
   14a34:	movvs	ip, #1
   14a38:	mov	r2, r0
   14a3c:	mov	r3, r1
   14a40:	ldr	r1, [sp, #164]	; 0xa4
   14a44:	orrs	r1, r1, ip
   14a48:	beq	14af4 <__assert_fail@plt+0x3724>
   14a4c:	mov	r0, #1
   14a50:	b	15eb4 <__assert_fail@plt+0x4ae4>
   14a54:	adds	r3, r4, r4
   14a58:	ldr	lr, [sp, #164]	; 0xa4
   14a5c:	adc	r2, lr, lr
   14a60:	adds	r3, r3, r4
   14a64:	adc	r2, r2, lr
   14a68:	lsl	r1, r2, #5
   14a6c:	orr	r1, r1, r3, lsr #27
   14a70:	lsl	r0, r3, #5
   14a74:	adds	r3, r3, r0
   14a78:	adc	r2, r2, r1
   14a7c:	adds	r3, r4, r3
   14a80:	mov	r4, r3
   14a84:	adc	r3, lr, r2
   14a88:	str	r3, [sp, #164]	; 0xa4
   14a8c:	mov	r2, #100	; 0x64
   14a90:	mov	r3, #0
   14a94:	mov	r5, r4
   14a98:	mov	r0, r4
   14a9c:	ldr	r4, [sp, #164]	; 0xa4
   14aa0:	mov	r1, r4
   14aa4:	bl	1d7fc <__assert_fail@plt+0xc42c>
   14aa8:	lsl	r3, r1, #4
   14aac:	lsl	ip, r0, #4
   14ab0:	orr	r2, r3, r0, lsr #28
   14ab4:	subs	ip, ip, r0
   14ab8:	sbc	r3, r2, r1
   14abc:	lsl	r3, r3, #2
   14ac0:	orr	r3, r3, ip, lsr #30
   14ac4:	lsl	r2, ip, #2
   14ac8:	str	r2, [sp, #164]	; 0xa4
   14acc:	str	r3, [sp, #168]	; 0xa8
   14ad0:	mov	r2, #100	; 0x64
   14ad4:	mov	r3, #0
   14ad8:	mov	r0, r5
   14adc:	mov	r1, r4
   14ae0:	bl	1d7fc <__assert_fail@plt+0xc42c>
   14ae4:	ldr	r1, [sp, #164]	; 0xa4
   14ae8:	adds	r2, r1, r2
   14aec:	ldr	r1, [sp, #168]	; 0xa8
   14af0:	adc	r3, r1, r3
   14af4:	adds	r1, r2, #1440	; 0x5a0
   14af8:	str	r1, [sp, #192]	; 0xc0
   14afc:	adc	r3, r3, #0
   14b00:	str	r3, [sp, #196]	; 0xc4
   14b04:	ldrd	r0, [sp, #192]	; 0xc0
   14b08:	cmp	r1, #0
   14b0c:	cmpeq	r0, #2880	; 0xb40
   14b10:	bhi	14a4c <__assert_fail@plt+0x367c>
   14b14:	rsb	r2, r2, r2, lsl #4
   14b18:	lsl	r0, r2, #2
   14b1c:	asr	r1, r0, #31
   14b20:	ldrd	r4, [r8, #-112]	; 0xffffff90
   14b24:	adds	r2, r0, r4
   14b28:	adcs	r3, r1, r5
   14b2c:	movvs	r1, #1
   14b30:	movvc	r1, #0
   14b34:	asr	r5, r2, #31
   14b38:	cmp	r3, r5
   14b3c:	cmpeq	r2, r2
   14b40:	str	r2, [fp, #24]
   14b44:	moveq	r3, r1
   14b48:	movne	r3, #1
   14b4c:	cmp	r3, #0
   14b50:	beq	141e4 <__assert_fail@plt+0x2e14>
   14b54:	mov	r0, #1
   14b58:	b	15eb4 <__assert_fail@plt+0x4ae4>
   14b5c:	mov	r0, #60	; 0x3c
   14b60:	umull	r2, r3, r4, r0
   14b64:	strd	r2, [sp, #176]	; 0xb0
   14b68:	ldr	r1, [sp, #164]	; 0xa4
   14b6c:	umull	r2, r3, r0, r1
   14b70:	cmp	r1, #0
   14b74:	bge	14b88 <__assert_fail@plt+0x37b8>
   14b78:	mov	ip, r0
   14b7c:	mov	r1, #0
   14b80:	subs	r2, r2, r1
   14b84:	sbc	r3, r3, r0
   14b88:	ldr	r1, [sp, #180]	; 0xb4
   14b8c:	mov	r0, #0
   14b90:	adds	r1, r2, r1
   14b94:	adc	r0, r3, r0
   14b98:	cmp	r0, r1, asr #31
   14b9c:	bne	14ba8 <__assert_fail@plt+0x37d8>
   14ba0:	ldr	r0, [sp, #176]	; 0xb0
   14ba4:	b	14a14 <__assert_fail@plt+0x3644>
   14ba8:	ldr	ip, [sp, #164]	; 0xa4
   14bac:	lsl	r1, ip, #4
   14bb0:	lsl	r3, r4, #4
   14bb4:	orr	r2, r1, r4, lsr #28
   14bb8:	subs	r3, r3, r4
   14bbc:	sbc	r2, r2, ip
   14bc0:	lsl	r1, r2, #2
   14bc4:	orr	r1, r1, r3, lsr #30
   14bc8:	lsl	r0, r3, #2
   14bcc:	mov	r3, #1
   14bd0:	mov	r5, r3
   14bd4:	b	14a14 <__assert_fail@plt+0x3644>
   14bd8:	ldrd	r4, [sp, #168]	; 0xa8
   14bdc:	adds	r0, r0, r4
   14be0:	adcs	r1, r3, r5
   14be4:	mov	r2, r0
   14be8:	mov	r3, r1
   14bec:	movvs	ip, #1
   14bf0:	movvc	ip, #0
   14bf4:	b	14a40 <__assert_fail@plt+0x3670>
   14bf8:	ldr	r3, [r8]
   14bfc:	add	r3, r3, #3600	; 0xe10
   14c00:	str	r3, [fp, #24]
   14c04:	b	141e4 <__assert_fail@plt+0x2e14>
   14c08:	ldr	r3, [r8, #-56]	; 0xffffffc8
   14c0c:	add	r3, r3, #3600	; 0xe10
   14c10:	str	r3, [fp, #24]
   14c14:	b	141e4 <__assert_fail@plt+0x2e14>
   14c18:	mov	r3, #0
   14c1c:	str	r3, [fp, #8]
   14c20:	str	r3, [fp, #12]
   14c24:	ldr	r3, [r8]
   14c28:	str	r3, [fp, #16]
   14c2c:	b	141e4 <__assert_fail@plt+0x2e14>
   14c30:	mov	r3, #0
   14c34:	str	r3, [fp, #8]
   14c38:	str	r3, [fp, #12]
   14c3c:	ldr	r3, [r8, #-56]	; 0xffffffc8
   14c40:	str	r3, [fp, #16]
   14c44:	b	141e4 <__assert_fail@plt+0x2e14>
   14c48:	ldrd	r2, [r8, #-56]	; 0xffffffc8
   14c4c:	strd	r2, [fp, #8]
   14c50:	ldr	r3, [r8]
   14c54:	str	r3, [fp, #16]
   14c58:	mov	r3, #1
   14c5c:	strb	r3, [fp, #188]	; 0xbc
   14c60:	b	141e4 <__assert_fail@plt+0x2e14>
   14c64:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   14c68:	strd	r2, [fp, #8]
   14c6c:	ldr	r3, [r8]
   14c70:	str	r3, [fp, #16]
   14c74:	mov	r3, #1
   14c78:	strb	r3, [fp, #188]	; 0xbc
   14c7c:	b	141e4 <__assert_fail@plt+0x2e14>
   14c80:	ldrd	r2, [r8, #-104]	; 0xffffff98
   14c84:	strd	r2, [fp, #56]	; 0x38
   14c88:	ldrd	r2, [r8, #8]
   14c8c:	strd	r2, [fp, #64]	; 0x40
   14c90:	b	141e4 <__assert_fail@plt+0x2e14>
   14c94:	ldr	r3, [r8, #-208]	; 0xffffff30
   14c98:	str	r3, [sp, #112]	; 0x70
   14c9c:	cmp	r3, #3
   14ca0:	ble	14d10 <__assert_fail@plt+0x3940>
   14ca4:	ldrb	r3, [fp, #181]	; 0xb5
   14ca8:	cmp	r3, #0
   14cac:	bne	14cdc <__assert_fail@plt+0x390c>
   14cb0:	ldrd	r2, [r8, #-224]	; 0xffffff20
   14cb4:	strd	r2, [fp, #32]
   14cb8:	ldrd	r2, [r8, #-216]	; 0xffffff28
   14cbc:	strd	r2, [fp, #40]	; 0x28
   14cc0:	ldrd	r2, [r8, #-208]	; 0xffffff30
   14cc4:	strd	r2, [fp, #48]	; 0x30
   14cc8:	ldrd	r2, [r8, #-104]	; 0xffffff98
   14ccc:	strd	r2, [fp, #56]	; 0x38
   14cd0:	ldrd	r2, [r8, #8]
   14cd4:	strd	r2, [fp, #64]	; 0x40
   14cd8:	b	141e4 <__assert_fail@plt+0x2e14>
   14cdc:	mov	r2, #5
   14ce0:	movw	r1, #61996	; 0xf22c
   14ce4:	movt	r1, #1
   14ce8:	mov	r0, #0
   14cec:	bl	11130 <dcgettext@plt>
   14cf0:	ldrd	r4, [r8, #-216]	; 0xffffff28
   14cf4:	ldr	r2, [sp, #112]	; 0x70
   14cf8:	asr	r3, r2, #31
   14cfc:	strd	r2, [sp]
   14d00:	mov	r2, r4
   14d04:	mov	r3, r5
   14d08:	bl	13270 <__assert_fail@plt+0x1ea0>
   14d0c:	b	14cb0 <__assert_fail@plt+0x38e0>
   14d10:	ldrb	r3, [fp, #181]	; 0xb5
   14d14:	cmp	r3, #0
   14d18:	bne	14d48 <__assert_fail@plt+0x3978>
   14d1c:	ldrd	r2, [r8, #-216]	; 0xffffff28
   14d20:	strd	r2, [fp, #56]	; 0x38
   14d24:	ldrd	r2, [r8, #-104]	; 0xffffff98
   14d28:	strd	r2, [fp, #64]	; 0x40
   14d2c:	ldrd	r2, [r8]
   14d30:	strd	r2, [fp, #32]
   14d34:	ldrd	r2, [r8, #8]
   14d38:	strd	r2, [fp, #40]	; 0x28
   14d3c:	ldrd	r2, [r8, #16]
   14d40:	strd	r2, [fp, #48]	; 0x30
   14d44:	b	141e4 <__assert_fail@plt+0x2e14>
   14d48:	mov	r2, #5
   14d4c:	movw	r1, #62056	; 0xf268
   14d50:	movt	r1, #1
   14d54:	mov	r0, #0
   14d58:	bl	11130 <dcgettext@plt>
   14d5c:	ldrd	r2, [r8, #-216]	; 0xffffff28
   14d60:	bl	13270 <__assert_fail@plt+0x1ea0>
   14d64:	b	14d1c <__assert_fail@plt+0x394c>
   14d68:	ldrd	r2, [r8, #-104]	; 0xffffff98
   14d6c:	strd	r2, [fp, #64]	; 0x40
   14d70:	ldrd	r2, [r8, #-56]	; 0xffffffc8
   14d74:	strd	r2, [fp, #56]	; 0x38
   14d78:	mov	r1, #0
   14d7c:	ldrd	r2, [r8, #8]
   14d80:	rsbs	r2, r2, #0
   14d84:	rscs	r3, r3, #0
   14d88:	movvs	r1, #1
   14d8c:	strd	r2, [fp, #40]	; 0x28
   14d90:	cmp	r1, #0
   14d94:	bne	15f08 <__assert_fail@plt+0x4b38>
   14d98:	ldr	r3, [r8, #16]
   14d9c:	str	r3, [fp, #48]	; 0x30
   14da0:	b	141e4 <__assert_fail@plt+0x2e14>
   14da4:	ldrd	r2, [r8, #-112]	; 0xffffff90
   14da8:	strd	r2, [fp, #56]	; 0x38
   14dac:	mov	r1, #0
   14db0:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   14db4:	rsbs	r2, r2, #0
   14db8:	rscs	r3, r3, #0
   14dbc:	movvs	r1, #1
   14dc0:	strd	r2, [fp, #64]	; 0x40
   14dc4:	cmp	r1, #0
   14dc8:	bne	15f10 <__assert_fail@plt+0x4b40>
   14dcc:	ldrd	r2, [r8, #8]
   14dd0:	rsbs	r2, r2, #0
   14dd4:	rscs	r3, r3, #0
   14dd8:	movvs	r1, #1
   14ddc:	strd	r2, [fp, #40]	; 0x28
   14de0:	cmp	r1, #0
   14de4:	bne	15f18 <__assert_fail@plt+0x4b48>
   14de8:	ldr	r3, [r8, #16]
   14dec:	str	r3, [fp, #48]	; 0x30
   14df0:	b	141e4 <__assert_fail@plt+0x2e14>
   14df4:	ldrd	r2, [r8, #-56]	; 0xffffffc8
   14df8:	strd	r2, [fp, #56]	; 0x38
   14dfc:	ldrd	r2, [r8, #8]
   14e00:	strd	r2, [fp, #64]	; 0x40
   14e04:	b	141e4 <__assert_fail@plt+0x2e14>
   14e08:	ldrd	r2, [r8, #-168]	; 0xffffff58
   14e0c:	strd	r2, [fp, #56]	; 0x38
   14e10:	ldrd	r2, [r8, #-104]	; 0xffffff98
   14e14:	strd	r2, [fp, #64]	; 0x40
   14e18:	ldrd	r2, [r8]
   14e1c:	strd	r2, [fp, #32]
   14e20:	ldrd	r2, [r8, #8]
   14e24:	strd	r2, [fp, #40]	; 0x28
   14e28:	ldrd	r2, [r8, #16]
   14e2c:	strd	r2, [fp, #48]	; 0x30
   14e30:	b	141e4 <__assert_fail@plt+0x2e14>
   14e34:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   14e38:	strd	r2, [fp, #64]	; 0x40
   14e3c:	ldrd	r2, [r8]
   14e40:	strd	r2, [fp, #56]	; 0x38
   14e44:	b	141e4 <__assert_fail@plt+0x2e14>
   14e48:	ldrd	r2, [r8, #-104]	; 0xffffff98
   14e4c:	strd	r2, [fp, #64]	; 0x40
   14e50:	ldrd	r2, [r8, #-56]	; 0xffffffc8
   14e54:	strd	r2, [fp, #56]	; 0x38
   14e58:	ldrd	r2, [r8]
   14e5c:	strd	r2, [fp, #32]
   14e60:	ldrd	r2, [r8, #8]
   14e64:	strd	r2, [fp, #40]	; 0x28
   14e68:	ldrd	r2, [r8, #16]
   14e6c:	strd	r2, [fp, #48]	; 0x30
   14e70:	b	141e4 <__assert_fail@plt+0x2e14>
   14e74:	ldrd	r2, [r8, #-112]	; 0xffffff90
   14e78:	strd	r2, [fp, #32]
   14e7c:	ldrd	r2, [r8, #-104]	; 0xffffff98
   14e80:	strd	r2, [fp, #40]	; 0x28
   14e84:	ldrd	r2, [r8, #-96]	; 0xffffffa0
   14e88:	strd	r2, [fp, #48]	; 0x30
   14e8c:	mov	r1, #0
   14e90:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   14e94:	rsbs	r2, r2, #0
   14e98:	rscs	r3, r3, #0
   14e9c:	movvs	r1, #1
   14ea0:	strd	r2, [fp, #56]	; 0x38
   14ea4:	cmp	r1, #0
   14ea8:	bne	15f20 <__assert_fail@plt+0x4b50>
   14eac:	ldrd	r2, [r8, #8]
   14eb0:	rsbs	r2, r2, #0
   14eb4:	rscs	r3, r3, #0
   14eb8:	movvs	r1, #1
   14ebc:	strd	r2, [fp, #64]	; 0x40
   14ec0:	cmp	r1, #0
   14ec4:	beq	141e4 <__assert_fail@plt+0x2e14>
   14ec8:	mov	r0, #1
   14ecc:	b	15eb4 <__assert_fail@plt+0x4ae4>
   14ed0:	mov	r1, r8
   14ed4:	ldr	r3, [r1], #-48	; 0xffffffd0
   14ed8:	str	r3, [sp, #48]	; 0x30
   14edc:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   14ee0:	strd	r2, [sp]
   14ee4:	ldrd	r2, [r1, #8]
   14ee8:	strd	r2, [sp, #8]
   14eec:	ldrd	r2, [r1, #16]
   14ef0:	strd	r2, [sp, #16]
   14ef4:	ldrd	r2, [r1, #24]
   14ef8:	strd	r2, [sp, #24]
   14efc:	ldrd	r2, [r1, #32]
   14f00:	strd	r2, [sp, #32]
   14f04:	ldrd	r2, [r1, #40]	; 0x28
   14f08:	strd	r2, [sp, #40]	; 0x28
   14f0c:	sub	r3, r8, #56	; 0x38
   14f10:	ldm	r3, {r2, r3}
   14f14:	mov	r0, fp
   14f18:	bl	12b9c <__assert_fail@plt+0x17cc>
   14f1c:	cmp	r0, #0
   14f20:	bne	141e4 <__assert_fail@plt+0x2e14>
   14f24:	mov	r0, #1
   14f28:	b	15eb4 <__assert_fail@plt+0x4ae4>
   14f2c:	mov	r3, #1
   14f30:	str	r3, [sp, #48]	; 0x30
   14f34:	ldrd	r2, [r8, #8]
   14f38:	strd	r2, [sp]
   14f3c:	ldrd	r2, [r8, #16]
   14f40:	strd	r2, [sp, #8]
   14f44:	ldrd	r2, [r8, #24]
   14f48:	strd	r2, [sp, #16]
   14f4c:	ldrd	r2, [r8, #32]
   14f50:	strd	r2, [sp, #24]
   14f54:	ldrd	r2, [r8, #40]	; 0x28
   14f58:	strd	r2, [sp, #32]
   14f5c:	ldrd	r2, [r8, #48]	; 0x30
   14f60:	strd	r2, [sp, #40]	; 0x28
   14f64:	ldm	r8, {r2, r3}
   14f68:	mov	r0, fp
   14f6c:	bl	12b9c <__assert_fail@plt+0x17cc>
   14f70:	cmp	r0, #0
   14f74:	bne	141e4 <__assert_fail@plt+0x2e14>
   14f78:	mov	r0, #1
   14f7c:	b	15eb4 <__assert_fail@plt+0x4ae4>
   14f80:	mov	r3, #1
   14f84:	str	r3, [sp, #48]	; 0x30
   14f88:	ldrd	r2, [r8, #8]
   14f8c:	strd	r2, [sp]
   14f90:	ldrd	r2, [r8, #16]
   14f94:	strd	r2, [sp, #8]
   14f98:	ldrd	r2, [r8, #24]
   14f9c:	strd	r2, [sp, #16]
   14fa0:	ldrd	r2, [r8, #32]
   14fa4:	strd	r2, [sp, #24]
   14fa8:	ldrd	r2, [r8, #40]	; 0x28
   14fac:	strd	r2, [sp, #32]
   14fb0:	ldrd	r2, [r8, #48]	; 0x30
   14fb4:	strd	r2, [sp, #40]	; 0x28
   14fb8:	ldm	r8, {r2, r3}
   14fbc:	mov	r0, fp
   14fc0:	bl	12b9c <__assert_fail@plt+0x17cc>
   14fc4:	cmp	r0, #0
   14fc8:	bne	141e4 <__assert_fail@plt+0x2e14>
   14fcc:	mov	r0, #1
   14fd0:	b	15eb4 <__assert_fail@plt+0x4ae4>
   14fd4:	mov	r1, #0
   14fd8:	str	r1, [sp, #292]	; 0x124
   14fdc:	ldrd	r2, [r8, #-56]	; 0xffffffc8
   14fe0:	strd	r2, [sp, #240]	; 0xf0
   14fe4:	str	r1, [sp, #80]	; 0x50
   14fe8:	str	r1, [sp, #56]	; 0x38
   14fec:	str	r1, [sp, #60]	; 0x3c
   14ff0:	ldr	r2, [sp, #116]	; 0x74
   14ff4:	str	r2, [sp, #68]	; 0x44
   14ff8:	ldr	r3, [sp, #128]	; 0x80
   14ffc:	str	r3, [sp, #72]	; 0x48
   15000:	mov	r9, r2
   15004:	str	r3, [sp, #92]	; 0x5c
   15008:	str	r2, [sp, #96]	; 0x60
   1500c:	str	r3, [sp, #100]	; 0x64
   15010:	str	r2, [sp, #84]	; 0x54
   15014:	str	r3, [sp, #88]	; 0x58
   15018:	b	141e4 <__assert_fail@plt+0x2e14>
   1501c:	mov	r1, #0
   15020:	str	r1, [sp, #292]	; 0x124
   15024:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   15028:	strd	r2, [sp, #240]	; 0xf0
   1502c:	str	r1, [sp, #80]	; 0x50
   15030:	str	r1, [sp, #56]	; 0x38
   15034:	str	r1, [sp, #60]	; 0x3c
   15038:	ldr	r2, [sp, #116]	; 0x74
   1503c:	str	r2, [sp, #68]	; 0x44
   15040:	ldr	r3, [sp, #128]	; 0x80
   15044:	str	r3, [sp, #72]	; 0x48
   15048:	mov	r9, r2
   1504c:	str	r3, [sp, #92]	; 0x5c
   15050:	str	r2, [sp, #96]	; 0x60
   15054:	str	r3, [sp, #100]	; 0x64
   15058:	str	r2, [sp, #84]	; 0x54
   1505c:	str	r3, [sp, #88]	; 0x58
   15060:	b	141e4 <__assert_fail@plt+0x2e14>
   15064:	mov	r3, #0
   15068:	str	r3, [sp, #292]	; 0x124
   1506c:	mov	r0, #1
   15070:	mov	r1, #0
   15074:	strd	r0, [sp, #240]	; 0xf0
   15078:	str	r3, [sp, #80]	; 0x50
   1507c:	str	r3, [sp, #56]	; 0x38
   15080:	str	r3, [sp, #60]	; 0x3c
   15084:	ldr	r2, [sp, #116]	; 0x74
   15088:	str	r2, [sp, #68]	; 0x44
   1508c:	ldr	r3, [sp, #128]	; 0x80
   15090:	str	r3, [sp, #72]	; 0x48
   15094:	mov	r9, r2
   15098:	str	r3, [sp, #92]	; 0x5c
   1509c:	str	r2, [sp, #96]	; 0x60
   150a0:	str	r3, [sp, #100]	; 0x64
   150a4:	str	r2, [sp, #84]	; 0x54
   150a8:	str	r3, [sp, #88]	; 0x58
   150ac:	b	141e4 <__assert_fail@plt+0x2e14>
   150b0:	mov	r2, #56	; 0x38
   150b4:	mov	r1, #0
   150b8:	add	r0, sp, #240	; 0xf0
   150bc:	bl	112c8 <memset@plt>
   150c0:	ldr	r3, [r8, #-56]	; 0xffffffc8
   150c4:	str	r3, [sp, #84]	; 0x54
   150c8:	ldr	r3, [r8, #-52]	; 0xffffffcc
   150cc:	str	r3, [sp, #88]	; 0x58
   150d0:	mov	r3, #0
   150d4:	str	r3, [sp, #80]	; 0x50
   150d8:	str	r3, [sp, #56]	; 0x38
   150dc:	str	r3, [sp, #60]	; 0x3c
   150e0:	ldr	r2, [sp, #116]	; 0x74
   150e4:	str	r2, [sp, #68]	; 0x44
   150e8:	ldr	r3, [sp, #128]	; 0x80
   150ec:	str	r3, [sp, #72]	; 0x48
   150f0:	mov	r9, r2
   150f4:	str	r3, [sp, #92]	; 0x5c
   150f8:	str	r2, [sp, #96]	; 0x60
   150fc:	str	r3, [sp, #100]	; 0x64
   15100:	b	141e4 <__assert_fail@plt+0x2e14>
   15104:	mov	r2, #56	; 0x38
   15108:	mov	r1, #0
   1510c:	add	r0, sp, #240	; 0xf0
   15110:	bl	112c8 <memset@plt>
   15114:	ldr	r3, [r8, #-48]	; 0xffffffd0
   15118:	str	r3, [sp, #84]	; 0x54
   1511c:	ldr	r3, [r8, #-44]	; 0xffffffd4
   15120:	str	r3, [sp, #88]	; 0x58
   15124:	mov	r3, #0
   15128:	str	r3, [sp, #80]	; 0x50
   1512c:	str	r3, [sp, #56]	; 0x38
   15130:	str	r3, [sp, #60]	; 0x3c
   15134:	ldr	r2, [sp, #116]	; 0x74
   15138:	str	r2, [sp, #68]	; 0x44
   1513c:	ldr	r3, [sp, #128]	; 0x80
   15140:	str	r3, [sp, #72]	; 0x48
   15144:	mov	r9, r2
   15148:	str	r3, [sp, #92]	; 0x5c
   1514c:	str	r2, [sp, #96]	; 0x60
   15150:	str	r3, [sp, #100]	; 0x64
   15154:	b	141e4 <__assert_fail@plt+0x2e14>
   15158:	mov	r2, #56	; 0x38
   1515c:	mov	r1, #0
   15160:	add	r0, sp, #240	; 0xf0
   15164:	bl	112c8 <memset@plt>
   15168:	mov	r3, #0
   1516c:	str	r3, [sp, #80]	; 0x50
   15170:	str	r3, [sp, #56]	; 0x38
   15174:	str	r3, [sp, #60]	; 0x3c
   15178:	ldr	r2, [sp, #116]	; 0x74
   1517c:	str	r2, [sp, #68]	; 0x44
   15180:	ldr	r3, [sp, #128]	; 0x80
   15184:	str	r3, [sp, #72]	; 0x48
   15188:	mov	r9, r2
   1518c:	str	r3, [sp, #92]	; 0x5c
   15190:	str	r2, [sp, #96]	; 0x60
   15194:	str	r3, [sp, #100]	; 0x64
   15198:	mov	r3, #1
   1519c:	str	r3, [sp, #84]	; 0x54
   151a0:	mov	r3, #0
   151a4:	str	r3, [sp, #88]	; 0x58
   151a8:	b	141e4 <__assert_fail@plt+0x2e14>
   151ac:	mov	r2, #56	; 0x38
   151b0:	mov	r1, #0
   151b4:	add	r0, sp, #240	; 0xf0
   151b8:	bl	112c8 <memset@plt>
   151bc:	mov	r9, #0
   151c0:	ldr	r1, [r8, #-52]	; 0xffffffcc
   151c4:	ldr	r2, [r8, #-56]	; 0xffffffc8
   151c8:	ldr	ip, [r8, #4]
   151cc:	ldr	r3, [r8]
   151d0:	asr	r3, r3, #31
   151d4:	cmp	r1, r2, asr #31
   151d8:	bne	152a4 <__assert_fail@plt+0x3ed4>
   151dc:	cmp	r3, ip
   151e0:	bne	15238 <__assert_fail@plt+0x3e68>
   151e4:	ldr	r3, [r8]
   151e8:	smull	r2, r3, r2, r3
   151ec:	strd	r2, [sp, #136]	; 0x88
   151f0:	ldrd	r2, [sp, #136]	; 0x88
   151f4:	str	r2, [sp, #96]	; 0x60
   151f8:	str	r3, [sp, #100]	; 0x64
   151fc:	cmp	r9, #0
   15200:	bne	15f28 <__assert_fail@plt+0x4b58>
   15204:	mov	r3, #0
   15208:	str	r3, [sp, #80]	; 0x50
   1520c:	str	r3, [sp, #56]	; 0x38
   15210:	str	r3, [sp, #60]	; 0x3c
   15214:	ldr	r2, [sp, #116]	; 0x74
   15218:	str	r2, [sp, #68]	; 0x44
   1521c:	ldr	r3, [sp, #128]	; 0x80
   15220:	str	r3, [sp, #72]	; 0x48
   15224:	mov	r9, r2
   15228:	str	r3, [sp, #92]	; 0x5c
   1522c:	str	r2, [sp, #84]	; 0x54
   15230:	str	r3, [sp, #88]	; 0x58
   15234:	b	141e4 <__assert_fail@plt+0x2e14>
   15238:	ldr	r0, [r8]
   1523c:	ldr	r5, [r8, #4]
   15240:	ldr	r1, [r8, #-56]	; 0xffffffc8
   15244:	ldr	r2, [r8, #-56]	; 0xffffffc8
   15248:	ldr	r3, [r8]
   1524c:	umull	r2, r3, r2, r3
   15250:	strd	r2, [sp, #56]	; 0x38
   15254:	umull	r2, r3, r1, ip
   15258:	cmp	ip, #0
   1525c:	bge	15270 <__assert_fail@plt+0x3ea0>
   15260:	mov	lr, r1
   15264:	mov	ip, #0
   15268:	subs	r2, r2, ip
   1526c:	sbc	r3, r3, r1
   15270:	cmp	r1, #0
   15274:	bge	15280 <__assert_fail@plt+0x3eb0>
   15278:	subs	r2, r2, r0
   1527c:	sbc	r3, r3, r5
   15280:	ldrd	r4, [sp, #56]	; 0x38
   15284:	mov	r0, #0
   15288:	adds	r1, r2, r5
   1528c:	adc	r0, r3, r0
   15290:	cmp	r0, r1, asr #31
   15294:	bne	15334 <__assert_fail@plt+0x3f64>
   15298:	str	r4, [sp, #136]	; 0x88
   1529c:	str	r1, [sp, #140]	; 0x8c
   152a0:	b	151f0 <__assert_fail@plt+0x3e20>
   152a4:	cmp	r3, ip
   152a8:	bne	152c0 <__assert_fail@plt+0x3ef0>
   152ac:	ldr	r0, [r8, #-56]	; 0xffffffc8
   152b0:	ldr	r5, [r8, #-52]	; 0xffffffcc
   152b4:	mov	ip, r1
   152b8:	ldr	r1, [r8]
   152bc:	b	15244 <__assert_fail@plt+0x3e74>
   152c0:	ldr	lr, [r8, #-52]	; 0xffffffcc
   152c4:	ldr	r3, [r8]
   152c8:	ldr	r0, [r8, #4]
   152cc:	ldr	r2, [r8, #-56]	; 0xffffffc8
   152d0:	mul	r0, r2, r0
   152d4:	mla	r0, r3, lr, r0
   152d8:	umull	r2, r3, r2, r3
   152dc:	add	r3, r0, r3
   152e0:	mov	r4, r2
   152e4:	mov	r5, r3
   152e8:	strd	r4, [sp, #136]	; 0x88
   152ec:	add	r3, r1, #1
   152f0:	cmp	r3, #1
   152f4:	bhi	15358 <__assert_fail@plt+0x3f88>
   152f8:	add	r3, ip, #1
   152fc:	cmp	r3, #1
   15300:	bhi	15358 <__assert_fail@plt+0x3f88>
   15304:	cmp	r1, ip
   15308:	bne	15320 <__assert_fail@plt+0x3f50>
   1530c:	mov	r3, r5
   15310:	cmp	r2, #1
   15314:	sbcs	r3, r3, #0
   15318:	bge	151f0 <__assert_fail@plt+0x3e20>
   1531c:	b	15358 <__assert_fail@plt+0x3f88>
   15320:	ldrd	r2, [sp, #136]	; 0x88
   15324:	cmp	r2, #0
   15328:	sbcs	r3, r3, #0
   1532c:	blt	151f0 <__assert_fail@plt+0x3e20>
   15330:	b	15358 <__assert_fail@plt+0x3f88>
   15334:	ldr	r1, [r8, #-52]	; 0xffffffcc
   15338:	ldr	r0, [r8]
   1533c:	ldr	r3, [r8, #4]
   15340:	ldr	r2, [r8, #-56]	; 0xffffffc8
   15344:	mul	r3, r2, r3
   15348:	mla	r1, r0, r1, r3
   1534c:	umull	r2, r3, r2, r0
   15350:	add	r3, r1, r3
   15354:	strd	r2, [sp, #136]	; 0x88
   15358:	mov	r9, #1
   1535c:	b	151f0 <__assert_fail@plt+0x3e20>
   15360:	mov	r2, #56	; 0x38
   15364:	mov	r1, #0
   15368:	add	r0, sp, #240	; 0xf0
   1536c:	bl	112c8 <memset@plt>
   15370:	mov	r9, #0
   15374:	ldr	r1, [r8, #-44]	; 0xffffffd4
   15378:	ldr	r2, [r8, #-48]	; 0xffffffd0
   1537c:	ldr	ip, [r8, #4]
   15380:	ldr	r3, [r8]
   15384:	asr	r3, r3, #31
   15388:	cmp	r1, r2, asr #31
   1538c:	bne	15458 <__assert_fail@plt+0x4088>
   15390:	cmp	r3, ip
   15394:	bne	153ec <__assert_fail@plt+0x401c>
   15398:	ldr	r3, [r8]
   1539c:	smull	r2, r3, r2, r3
   153a0:	strd	r2, [sp, #144]	; 0x90
   153a4:	ldrd	r2, [sp, #144]	; 0x90
   153a8:	str	r2, [sp, #96]	; 0x60
   153ac:	str	r3, [sp, #100]	; 0x64
   153b0:	cmp	r9, #0
   153b4:	bne	15f30 <__assert_fail@plt+0x4b60>
   153b8:	mov	r3, #0
   153bc:	str	r3, [sp, #80]	; 0x50
   153c0:	str	r3, [sp, #56]	; 0x38
   153c4:	str	r3, [sp, #60]	; 0x3c
   153c8:	ldr	r2, [sp, #116]	; 0x74
   153cc:	str	r2, [sp, #68]	; 0x44
   153d0:	ldr	r3, [sp, #128]	; 0x80
   153d4:	str	r3, [sp, #72]	; 0x48
   153d8:	mov	r9, r2
   153dc:	str	r3, [sp, #92]	; 0x5c
   153e0:	str	r2, [sp, #84]	; 0x54
   153e4:	str	r3, [sp, #88]	; 0x58
   153e8:	b	141e4 <__assert_fail@plt+0x2e14>
   153ec:	ldr	r0, [r8]
   153f0:	ldr	r5, [r8, #4]
   153f4:	ldr	r1, [r8, #-48]	; 0xffffffd0
   153f8:	ldr	r2, [r8, #-48]	; 0xffffffd0
   153fc:	ldr	r3, [r8]
   15400:	umull	r2, r3, r2, r3
   15404:	strd	r2, [sp, #56]	; 0x38
   15408:	umull	r2, r3, r1, ip
   1540c:	cmp	ip, #0
   15410:	bge	15424 <__assert_fail@plt+0x4054>
   15414:	mov	lr, r1
   15418:	mov	ip, #0
   1541c:	subs	r2, r2, ip
   15420:	sbc	r3, r3, r1
   15424:	cmp	r1, #0
   15428:	bge	15434 <__assert_fail@plt+0x4064>
   1542c:	subs	r2, r2, r0
   15430:	sbc	r3, r3, r5
   15434:	ldrd	r4, [sp, #56]	; 0x38
   15438:	mov	r0, #0
   1543c:	adds	r1, r2, r5
   15440:	adc	r0, r3, r0
   15444:	cmp	r0, r1, asr #31
   15448:	bne	154e8 <__assert_fail@plt+0x4118>
   1544c:	str	r4, [sp, #144]	; 0x90
   15450:	str	r1, [sp, #148]	; 0x94
   15454:	b	153a4 <__assert_fail@plt+0x3fd4>
   15458:	cmp	r3, ip
   1545c:	bne	15474 <__assert_fail@plt+0x40a4>
   15460:	ldr	r0, [r8, #-48]	; 0xffffffd0
   15464:	ldr	r5, [r8, #-44]	; 0xffffffd4
   15468:	mov	ip, r1
   1546c:	ldr	r1, [r8]
   15470:	b	153f8 <__assert_fail@plt+0x4028>
   15474:	ldr	lr, [r8, #-44]	; 0xffffffd4
   15478:	ldr	r3, [r8]
   1547c:	ldr	r0, [r8, #4]
   15480:	ldr	r2, [r8, #-48]	; 0xffffffd0
   15484:	mul	r0, r2, r0
   15488:	mla	r0, r3, lr, r0
   1548c:	umull	r2, r3, r2, r3
   15490:	add	r3, r0, r3
   15494:	mov	r4, r2
   15498:	mov	r5, r3
   1549c:	strd	r4, [sp, #144]	; 0x90
   154a0:	add	r3, r1, #1
   154a4:	cmp	r3, #1
   154a8:	bhi	1550c <__assert_fail@plt+0x413c>
   154ac:	add	r3, ip, #1
   154b0:	cmp	r3, #1
   154b4:	bhi	1550c <__assert_fail@plt+0x413c>
   154b8:	cmp	r1, ip
   154bc:	bne	154d4 <__assert_fail@plt+0x4104>
   154c0:	mov	r3, r5
   154c4:	cmp	r2, #1
   154c8:	sbcs	r3, r3, #0
   154cc:	bge	153a4 <__assert_fail@plt+0x3fd4>
   154d0:	b	1550c <__assert_fail@plt+0x413c>
   154d4:	ldrd	r2, [sp, #144]	; 0x90
   154d8:	cmp	r2, #0
   154dc:	sbcs	r3, r3, #0
   154e0:	blt	153a4 <__assert_fail@plt+0x3fd4>
   154e4:	b	1550c <__assert_fail@plt+0x413c>
   154e8:	ldr	r1, [r8, #-44]	; 0xffffffd4
   154ec:	ldr	r0, [r8]
   154f0:	ldr	r3, [r8, #4]
   154f4:	ldr	r2, [r8, #-48]	; 0xffffffd0
   154f8:	mul	r3, r2, r3
   154fc:	mla	r1, r0, r1, r3
   15500:	umull	r2, r3, r2, r0
   15504:	add	r3, r1, r3
   15508:	strd	r2, [sp, #144]	; 0x90
   1550c:	mov	r9, #1
   15510:	b	153a4 <__assert_fail@plt+0x3fd4>
   15514:	mov	r2, #56	; 0x38
   15518:	mov	r1, #0
   1551c:	add	r0, sp, #240	; 0xf0
   15520:	bl	112c8 <memset@plt>
   15524:	ldr	r3, [r8]
   15528:	str	r3, [sp, #96]	; 0x60
   1552c:	ldr	r3, [r8, #4]
   15530:	str	r3, [sp, #100]	; 0x64
   15534:	mov	r3, #0
   15538:	str	r3, [sp, #80]	; 0x50
   1553c:	str	r3, [sp, #56]	; 0x38
   15540:	str	r3, [sp, #60]	; 0x3c
   15544:	ldr	r2, [sp, #116]	; 0x74
   15548:	str	r2, [sp, #68]	; 0x44
   1554c:	ldr	r3, [sp, #128]	; 0x80
   15550:	str	r3, [sp, #72]	; 0x48
   15554:	mov	r9, r2
   15558:	str	r3, [sp, #92]	; 0x5c
   1555c:	str	r2, [sp, #84]	; 0x54
   15560:	str	r3, [sp, #88]	; 0x58
   15564:	b	141e4 <__assert_fail@plt+0x2e14>
   15568:	mov	r2, #56	; 0x38
   1556c:	mov	r1, #0
   15570:	add	r0, sp, #240	; 0xf0
   15574:	bl	112c8 <memset@plt>
   15578:	ldr	r9, [r8, #-56]	; 0xffffffc8
   1557c:	ldr	r3, [r8, #-52]	; 0xffffffcc
   15580:	str	r3, [sp, #92]	; 0x5c
   15584:	mov	r3, #0
   15588:	str	r3, [sp, #80]	; 0x50
   1558c:	str	r3, [sp, #56]	; 0x38
   15590:	str	r3, [sp, #60]	; 0x3c
   15594:	ldr	r2, [sp, #116]	; 0x74
   15598:	str	r2, [sp, #68]	; 0x44
   1559c:	ldr	r3, [sp, #128]	; 0x80
   155a0:	str	r3, [sp, #72]	; 0x48
   155a4:	str	r2, [sp, #96]	; 0x60
   155a8:	str	r3, [sp, #100]	; 0x64
   155ac:	str	r2, [sp, #84]	; 0x54
   155b0:	str	r3, [sp, #88]	; 0x58
   155b4:	b	141e4 <__assert_fail@plt+0x2e14>
   155b8:	mov	r2, #56	; 0x38
   155bc:	mov	r1, #0
   155c0:	add	r0, sp, #240	; 0xf0
   155c4:	bl	112c8 <memset@plt>
   155c8:	ldr	r9, [r8, #-48]	; 0xffffffd0
   155cc:	ldr	r3, [r8, #-44]	; 0xffffffd4
   155d0:	str	r3, [sp, #92]	; 0x5c
   155d4:	mov	r3, #0
   155d8:	str	r3, [sp, #80]	; 0x50
   155dc:	str	r3, [sp, #56]	; 0x38
   155e0:	str	r3, [sp, #60]	; 0x3c
   155e4:	ldr	r2, [sp, #116]	; 0x74
   155e8:	str	r2, [sp, #68]	; 0x44
   155ec:	ldr	r3, [sp, #128]	; 0x80
   155f0:	str	r3, [sp, #72]	; 0x48
   155f4:	str	r2, [sp, #96]	; 0x60
   155f8:	str	r3, [sp, #100]	; 0x64
   155fc:	str	r2, [sp, #84]	; 0x54
   15600:	str	r3, [sp, #88]	; 0x58
   15604:	b	141e4 <__assert_fail@plt+0x2e14>
   15608:	mov	r2, #56	; 0x38
   1560c:	mov	r1, #0
   15610:	add	r0, sp, #240	; 0xf0
   15614:	bl	112c8 <memset@plt>
   15618:	mov	r3, #0
   1561c:	str	r3, [sp, #80]	; 0x50
   15620:	str	r3, [sp, #56]	; 0x38
   15624:	str	r3, [sp, #60]	; 0x3c
   15628:	ldr	r2, [sp, #116]	; 0x74
   1562c:	str	r2, [sp, #68]	; 0x44
   15630:	ldr	r3, [sp, #128]	; 0x80
   15634:	str	r3, [sp, #72]	; 0x48
   15638:	mov	r9, #1
   1563c:	mov	r1, #0
   15640:	str	r1, [sp, #92]	; 0x5c
   15644:	str	r2, [sp, #96]	; 0x60
   15648:	str	r3, [sp, #100]	; 0x64
   1564c:	str	r2, [sp, #84]	; 0x54
   15650:	str	r3, [sp, #88]	; 0x58
   15654:	b	141e4 <__assert_fail@plt+0x2e14>
   15658:	mov	r2, #56	; 0x38
   1565c:	mov	r1, #0
   15660:	add	r0, sp, #240	; 0xf0
   15664:	bl	112c8 <memset@plt>
   15668:	ldr	r3, [r8, #-56]	; 0xffffffc8
   1566c:	str	r3, [sp, #68]	; 0x44
   15670:	ldr	r3, [r8, #-52]	; 0xffffffcc
   15674:	str	r3, [sp, #72]	; 0x48
   15678:	mov	r3, #0
   1567c:	str	r3, [sp, #80]	; 0x50
   15680:	str	r3, [sp, #56]	; 0x38
   15684:	str	r3, [sp, #60]	; 0x3c
   15688:	ldr	r2, [sp, #116]	; 0x74
   1568c:	mov	r9, r2
   15690:	ldr	r3, [sp, #128]	; 0x80
   15694:	str	r3, [sp, #92]	; 0x5c
   15698:	str	r2, [sp, #96]	; 0x60
   1569c:	str	r3, [sp, #100]	; 0x64
   156a0:	str	r2, [sp, #84]	; 0x54
   156a4:	str	r3, [sp, #88]	; 0x58
   156a8:	b	141e4 <__assert_fail@plt+0x2e14>
   156ac:	mov	r2, #56	; 0x38
   156b0:	mov	r1, #0
   156b4:	add	r0, sp, #240	; 0xf0
   156b8:	bl	112c8 <memset@plt>
   156bc:	ldr	r3, [r8, #-48]	; 0xffffffd0
   156c0:	str	r3, [sp, #68]	; 0x44
   156c4:	ldr	r3, [r8, #-44]	; 0xffffffd4
   156c8:	str	r3, [sp, #72]	; 0x48
   156cc:	mov	r3, #0
   156d0:	str	r3, [sp, #80]	; 0x50
   156d4:	str	r3, [sp, #56]	; 0x38
   156d8:	str	r3, [sp, #60]	; 0x3c
   156dc:	ldr	r2, [sp, #116]	; 0x74
   156e0:	mov	r9, r2
   156e4:	ldr	r3, [sp, #128]	; 0x80
   156e8:	str	r3, [sp, #92]	; 0x5c
   156ec:	str	r2, [sp, #96]	; 0x60
   156f0:	str	r3, [sp, #100]	; 0x64
   156f4:	str	r2, [sp, #84]	; 0x54
   156f8:	str	r3, [sp, #88]	; 0x58
   156fc:	b	141e4 <__assert_fail@plt+0x2e14>
   15700:	mov	r2, #56	; 0x38
   15704:	mov	r1, #0
   15708:	add	r0, sp, #240	; 0xf0
   1570c:	bl	112c8 <memset@plt>
   15710:	mov	r3, #0
   15714:	str	r3, [sp, #80]	; 0x50
   15718:	str	r3, [sp, #56]	; 0x38
   1571c:	str	r3, [sp, #60]	; 0x3c
   15720:	mov	r3, #1
   15724:	str	r3, [sp, #68]	; 0x44
   15728:	mov	r3, #0
   1572c:	str	r3, [sp, #72]	; 0x48
   15730:	ldr	r2, [sp, #116]	; 0x74
   15734:	mov	r9, r2
   15738:	ldr	r3, [sp, #128]	; 0x80
   1573c:	str	r3, [sp, #92]	; 0x5c
   15740:	str	r2, [sp, #96]	; 0x60
   15744:	str	r3, [sp, #100]	; 0x64
   15748:	str	r2, [sp, #84]	; 0x54
   1574c:	str	r3, [sp, #88]	; 0x58
   15750:	b	141e4 <__assert_fail@plt+0x2e14>
   15754:	mov	r2, #56	; 0x38
   15758:	mov	r1, #0
   1575c:	add	r0, sp, #240	; 0xf0
   15760:	bl	112c8 <memset@plt>
   15764:	ldrd	r2, [r8, #-56]	; 0xffffffc8
   15768:	strd	r2, [sp, #56]	; 0x38
   1576c:	mov	r3, #0
   15770:	str	r3, [sp, #80]	; 0x50
   15774:	str	r3, [sp, #68]	; 0x44
   15778:	str	r3, [sp, #72]	; 0x48
   1577c:	ldr	r2, [sp, #116]	; 0x74
   15780:	mov	r9, r2
   15784:	ldr	r3, [sp, #128]	; 0x80
   15788:	str	r3, [sp, #92]	; 0x5c
   1578c:	str	r2, [sp, #96]	; 0x60
   15790:	str	r3, [sp, #100]	; 0x64
   15794:	str	r2, [sp, #84]	; 0x54
   15798:	str	r3, [sp, #88]	; 0x58
   1579c:	b	141e4 <__assert_fail@plt+0x2e14>
   157a0:	mov	r2, #56	; 0x38
   157a4:	mov	r1, #0
   157a8:	add	r0, sp, #240	; 0xf0
   157ac:	bl	112c8 <memset@plt>
   157b0:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   157b4:	strd	r2, [sp, #56]	; 0x38
   157b8:	mov	r3, #0
   157bc:	str	r3, [sp, #80]	; 0x50
   157c0:	str	r3, [sp, #68]	; 0x44
   157c4:	str	r3, [sp, #72]	; 0x48
   157c8:	ldr	r2, [sp, #116]	; 0x74
   157cc:	mov	r9, r2
   157d0:	ldr	r3, [sp, #128]	; 0x80
   157d4:	str	r3, [sp, #92]	; 0x5c
   157d8:	str	r2, [sp, #96]	; 0x60
   157dc:	str	r3, [sp, #100]	; 0x64
   157e0:	str	r2, [sp, #84]	; 0x54
   157e4:	str	r3, [sp, #88]	; 0x58
   157e8:	b	141e4 <__assert_fail@plt+0x2e14>
   157ec:	mov	r2, #56	; 0x38
   157f0:	mov	r1, #0
   157f4:	add	r0, sp, #240	; 0xf0
   157f8:	bl	112c8 <memset@plt>
   157fc:	ldr	r3, [r8, #-56]	; 0xffffffc8
   15800:	mov	r0, r3
   15804:	asr	r1, r3, #31
   15808:	strd	r0, [sp, #56]	; 0x38
   1580c:	ldr	r3, [r8, #-52]	; 0xffffffcc
   15810:	str	r3, [sp, #80]	; 0x50
   15814:	mov	r3, #0
   15818:	str	r3, [sp, #68]	; 0x44
   1581c:	str	r3, [sp, #72]	; 0x48
   15820:	ldr	r2, [sp, #116]	; 0x74
   15824:	mov	r9, r2
   15828:	ldr	r3, [sp, #128]	; 0x80
   1582c:	str	r3, [sp, #92]	; 0x5c
   15830:	str	r2, [sp, #96]	; 0x60
   15834:	str	r3, [sp, #100]	; 0x64
   15838:	str	r2, [sp, #84]	; 0x54
   1583c:	str	r3, [sp, #88]	; 0x58
   15840:	b	141e4 <__assert_fail@plt+0x2e14>
   15844:	mov	r2, #56	; 0x38
   15848:	mov	r1, #0
   1584c:	add	r0, sp, #240	; 0xf0
   15850:	bl	112c8 <memset@plt>
   15854:	ldr	r3, [r8, #-56]	; 0xffffffc8
   15858:	mov	r0, r3
   1585c:	asr	r1, r3, #31
   15860:	strd	r0, [sp, #56]	; 0x38
   15864:	ldr	r3, [r8, #-52]	; 0xffffffcc
   15868:	str	r3, [sp, #80]	; 0x50
   1586c:	mov	r3, #0
   15870:	str	r3, [sp, #68]	; 0x44
   15874:	str	r3, [sp, #72]	; 0x48
   15878:	ldr	r2, [sp, #116]	; 0x74
   1587c:	mov	r9, r2
   15880:	ldr	r3, [sp, #128]	; 0x80
   15884:	str	r3, [sp, #92]	; 0x5c
   15888:	str	r2, [sp, #96]	; 0x60
   1588c:	str	r3, [sp, #100]	; 0x64
   15890:	str	r2, [sp, #84]	; 0x54
   15894:	str	r3, [sp, #88]	; 0x58
   15898:	b	141e4 <__assert_fail@plt+0x2e14>
   1589c:	mov	r2, #56	; 0x38
   158a0:	mov	r1, #0
   158a4:	add	r0, sp, #240	; 0xf0
   158a8:	bl	112c8 <memset@plt>
   158ac:	mov	r3, #0
   158b0:	str	r3, [sp, #80]	; 0x50
   158b4:	mov	r2, #1
   158b8:	mov	r3, #0
   158bc:	strd	r2, [sp, #56]	; 0x38
   158c0:	mov	r3, #0
   158c4:	str	r3, [sp, #68]	; 0x44
   158c8:	str	r3, [sp, #72]	; 0x48
   158cc:	ldr	r2, [sp, #116]	; 0x74
   158d0:	mov	r9, r2
   158d4:	ldr	r3, [sp, #128]	; 0x80
   158d8:	str	r3, [sp, #92]	; 0x5c
   158dc:	str	r2, [sp, #96]	; 0x60
   158e0:	str	r3, [sp, #100]	; 0x64
   158e4:	str	r2, [sp, #84]	; 0x54
   158e8:	str	r3, [sp, #88]	; 0x58
   158ec:	b	141e4 <__assert_fail@plt+0x2e14>
   158f0:	mov	r1, #0
   158f4:	str	r1, [sp, #292]	; 0x124
   158f8:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   158fc:	strd	r2, [sp, #240]	; 0xf0
   15900:	str	r1, [sp, #80]	; 0x50
   15904:	str	r1, [sp, #56]	; 0x38
   15908:	str	r1, [sp, #60]	; 0x3c
   1590c:	ldr	r2, [sp, #116]	; 0x74
   15910:	str	r2, [sp, #68]	; 0x44
   15914:	ldr	r3, [sp, #128]	; 0x80
   15918:	str	r3, [sp, #72]	; 0x48
   1591c:	mov	r9, r2
   15920:	str	r3, [sp, #92]	; 0x5c
   15924:	str	r2, [sp, #96]	; 0x60
   15928:	str	r3, [sp, #100]	; 0x64
   1592c:	str	r2, [sp, #84]	; 0x54
   15930:	str	r3, [sp, #88]	; 0x58
   15934:	b	141e4 <__assert_fail@plt+0x2e14>
   15938:	mov	r2, #56	; 0x38
   1593c:	mov	r1, #0
   15940:	add	r0, sp, #240	; 0xf0
   15944:	bl	112c8 <memset@plt>
   15948:	ldr	r3, [r8, #-48]	; 0xffffffd0
   1594c:	str	r3, [sp, #84]	; 0x54
   15950:	ldr	r3, [r8, #-44]	; 0xffffffd4
   15954:	str	r3, [sp, #88]	; 0x58
   15958:	mov	r3, #0
   1595c:	str	r3, [sp, #80]	; 0x50
   15960:	str	r3, [sp, #56]	; 0x38
   15964:	str	r3, [sp, #60]	; 0x3c
   15968:	ldr	r2, [sp, #116]	; 0x74
   1596c:	str	r2, [sp, #68]	; 0x44
   15970:	ldr	r3, [sp, #128]	; 0x80
   15974:	str	r3, [sp, #72]	; 0x48
   15978:	mov	r9, r2
   1597c:	str	r3, [sp, #92]	; 0x5c
   15980:	str	r2, [sp, #96]	; 0x60
   15984:	str	r3, [sp, #100]	; 0x64
   15988:	b	141e4 <__assert_fail@plt+0x2e14>
   1598c:	mov	r2, #56	; 0x38
   15990:	mov	r1, #0
   15994:	add	r0, sp, #240	; 0xf0
   15998:	bl	112c8 <memset@plt>
   1599c:	mov	r9, #0
   159a0:	ldr	r1, [r8, #-44]	; 0xffffffd4
   159a4:	ldr	r2, [r8, #-48]	; 0xffffffd0
   159a8:	ldr	ip, [r8, #4]
   159ac:	ldr	r3, [r8]
   159b0:	asr	r3, r3, #31
   159b4:	cmp	r1, r2, asr #31
   159b8:	bne	15a84 <__assert_fail@plt+0x46b4>
   159bc:	cmp	r3, ip
   159c0:	bne	15a18 <__assert_fail@plt+0x4648>
   159c4:	ldr	r3, [r8]
   159c8:	smull	r2, r3, r2, r3
   159cc:	strd	r2, [sp, #152]	; 0x98
   159d0:	ldrd	r2, [sp, #152]	; 0x98
   159d4:	str	r2, [sp, #96]	; 0x60
   159d8:	str	r3, [sp, #100]	; 0x64
   159dc:	cmp	r9, #0
   159e0:	bne	15f38 <__assert_fail@plt+0x4b68>
   159e4:	mov	r3, #0
   159e8:	str	r3, [sp, #80]	; 0x50
   159ec:	str	r3, [sp, #56]	; 0x38
   159f0:	str	r3, [sp, #60]	; 0x3c
   159f4:	ldr	r2, [sp, #116]	; 0x74
   159f8:	str	r2, [sp, #68]	; 0x44
   159fc:	ldr	r3, [sp, #128]	; 0x80
   15a00:	str	r3, [sp, #72]	; 0x48
   15a04:	mov	r9, r2
   15a08:	str	r3, [sp, #92]	; 0x5c
   15a0c:	str	r2, [sp, #84]	; 0x54
   15a10:	str	r3, [sp, #88]	; 0x58
   15a14:	b	141e4 <__assert_fail@plt+0x2e14>
   15a18:	ldr	r0, [r8]
   15a1c:	ldr	r5, [r8, #4]
   15a20:	ldr	r1, [r8, #-48]	; 0xffffffd0
   15a24:	ldr	r2, [r8, #-48]	; 0xffffffd0
   15a28:	ldr	r3, [r8]
   15a2c:	umull	r2, r3, r2, r3
   15a30:	strd	r2, [sp, #56]	; 0x38
   15a34:	umull	r2, r3, r1, ip
   15a38:	cmp	ip, #0
   15a3c:	bge	15a50 <__assert_fail@plt+0x4680>
   15a40:	mov	lr, r1
   15a44:	mov	ip, #0
   15a48:	subs	r2, r2, ip
   15a4c:	sbc	r3, r3, r1
   15a50:	cmp	r1, #0
   15a54:	bge	15a60 <__assert_fail@plt+0x4690>
   15a58:	subs	r2, r2, r0
   15a5c:	sbc	r3, r3, r5
   15a60:	ldrd	r4, [sp, #56]	; 0x38
   15a64:	mov	r0, #0
   15a68:	adds	r1, r2, r5
   15a6c:	adc	r0, r3, r0
   15a70:	cmp	r0, r1, asr #31
   15a74:	bne	15b14 <__assert_fail@plt+0x4744>
   15a78:	str	r4, [sp, #152]	; 0x98
   15a7c:	str	r1, [sp, #156]	; 0x9c
   15a80:	b	159d0 <__assert_fail@plt+0x4600>
   15a84:	cmp	r3, ip
   15a88:	bne	15aa0 <__assert_fail@plt+0x46d0>
   15a8c:	ldr	r0, [r8, #-48]	; 0xffffffd0
   15a90:	ldr	r5, [r8, #-44]	; 0xffffffd4
   15a94:	mov	ip, r1
   15a98:	ldr	r1, [r8]
   15a9c:	b	15a24 <__assert_fail@plt+0x4654>
   15aa0:	ldr	lr, [r8, #-44]	; 0xffffffd4
   15aa4:	ldr	r3, [r8]
   15aa8:	ldr	r0, [r8, #4]
   15aac:	ldr	r2, [r8, #-48]	; 0xffffffd0
   15ab0:	mul	r0, r2, r0
   15ab4:	mla	r0, r3, lr, r0
   15ab8:	umull	r2, r3, r2, r3
   15abc:	add	r3, r0, r3
   15ac0:	mov	r4, r2
   15ac4:	mov	r5, r3
   15ac8:	strd	r4, [sp, #152]	; 0x98
   15acc:	add	r3, r1, #1
   15ad0:	cmp	r3, #1
   15ad4:	bhi	15b38 <__assert_fail@plt+0x4768>
   15ad8:	add	r3, ip, #1
   15adc:	cmp	r3, #1
   15ae0:	bhi	15b38 <__assert_fail@plt+0x4768>
   15ae4:	cmp	r1, ip
   15ae8:	bne	15b00 <__assert_fail@plt+0x4730>
   15aec:	mov	r3, r5
   15af0:	cmp	r2, #1
   15af4:	sbcs	r3, r3, #0
   15af8:	bge	159d0 <__assert_fail@plt+0x4600>
   15afc:	b	15b38 <__assert_fail@plt+0x4768>
   15b00:	ldrd	r2, [sp, #152]	; 0x98
   15b04:	cmp	r2, #0
   15b08:	sbcs	r3, r3, #0
   15b0c:	blt	159d0 <__assert_fail@plt+0x4600>
   15b10:	b	15b38 <__assert_fail@plt+0x4768>
   15b14:	ldr	r1, [r8, #-44]	; 0xffffffd4
   15b18:	ldr	r0, [r8]
   15b1c:	ldr	r3, [r8, #4]
   15b20:	ldr	r2, [r8, #-48]	; 0xffffffd0
   15b24:	mul	r3, r2, r3
   15b28:	mla	r1, r0, r1, r3
   15b2c:	umull	r2, r3, r2, r0
   15b30:	add	r3, r1, r3
   15b34:	strd	r2, [sp, #152]	; 0x98
   15b38:	mov	r9, #1
   15b3c:	b	159d0 <__assert_fail@plt+0x4600>
   15b40:	mov	r2, #56	; 0x38
   15b44:	mov	r1, #0
   15b48:	add	r0, sp, #240	; 0xf0
   15b4c:	bl	112c8 <memset@plt>
   15b50:	ldr	r9, [r8, #-48]	; 0xffffffd0
   15b54:	ldr	r3, [r8, #-44]	; 0xffffffd4
   15b58:	str	r3, [sp, #92]	; 0x5c
   15b5c:	mov	r3, #0
   15b60:	str	r3, [sp, #80]	; 0x50
   15b64:	str	r3, [sp, #56]	; 0x38
   15b68:	str	r3, [sp, #60]	; 0x3c
   15b6c:	ldr	r2, [sp, #116]	; 0x74
   15b70:	str	r2, [sp, #68]	; 0x44
   15b74:	ldr	r3, [sp, #128]	; 0x80
   15b78:	str	r3, [sp, #72]	; 0x48
   15b7c:	str	r2, [sp, #96]	; 0x60
   15b80:	str	r3, [sp, #100]	; 0x64
   15b84:	str	r2, [sp, #84]	; 0x54
   15b88:	str	r3, [sp, #88]	; 0x58
   15b8c:	b	141e4 <__assert_fail@plt+0x2e14>
   15b90:	mov	r2, #56	; 0x38
   15b94:	mov	r1, #0
   15b98:	add	r0, sp, #240	; 0xf0
   15b9c:	bl	112c8 <memset@plt>
   15ba0:	ldr	r3, [r8, #-48]	; 0xffffffd0
   15ba4:	str	r3, [sp, #68]	; 0x44
   15ba8:	ldr	r3, [r8, #-44]	; 0xffffffd4
   15bac:	str	r3, [sp, #72]	; 0x48
   15bb0:	mov	r3, #0
   15bb4:	str	r3, [sp, #80]	; 0x50
   15bb8:	str	r3, [sp, #56]	; 0x38
   15bbc:	str	r3, [sp, #60]	; 0x3c
   15bc0:	ldr	r2, [sp, #116]	; 0x74
   15bc4:	mov	r9, r2
   15bc8:	ldr	r3, [sp, #128]	; 0x80
   15bcc:	str	r3, [sp, #92]	; 0x5c
   15bd0:	str	r2, [sp, #96]	; 0x60
   15bd4:	str	r3, [sp, #100]	; 0x64
   15bd8:	str	r2, [sp, #84]	; 0x54
   15bdc:	str	r3, [sp, #88]	; 0x58
   15be0:	b	141e4 <__assert_fail@plt+0x2e14>
   15be4:	mov	r2, #56	; 0x38
   15be8:	mov	r1, #0
   15bec:	add	r0, sp, #240	; 0xf0
   15bf0:	bl	112c8 <memset@plt>
   15bf4:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   15bf8:	strd	r2, [sp, #56]	; 0x38
   15bfc:	mov	r3, #0
   15c00:	str	r3, [sp, #80]	; 0x50
   15c04:	str	r3, [sp, #68]	; 0x44
   15c08:	str	r3, [sp, #72]	; 0x48
   15c0c:	ldr	r2, [sp, #116]	; 0x74
   15c10:	mov	r9, r2
   15c14:	ldr	r3, [sp, #128]	; 0x80
   15c18:	str	r3, [sp, #92]	; 0x5c
   15c1c:	str	r2, [sp, #96]	; 0x60
   15c20:	str	r3, [sp, #100]	; 0x64
   15c24:	str	r2, [sp, #84]	; 0x54
   15c28:	str	r3, [sp, #88]	; 0x58
   15c2c:	b	141e4 <__assert_fail@plt+0x2e14>
   15c30:	mov	r2, #56	; 0x38
   15c34:	mov	r1, #0
   15c38:	add	r0, sp, #240	; 0xf0
   15c3c:	bl	112c8 <memset@plt>
   15c40:	ldr	r3, [r8]
   15c44:	str	r3, [sp, #96]	; 0x60
   15c48:	ldr	r3, [r8, #4]
   15c4c:	str	r3, [sp, #100]	; 0x64
   15c50:	mov	r3, #0
   15c54:	str	r3, [sp, #80]	; 0x50
   15c58:	str	r3, [sp, #56]	; 0x38
   15c5c:	str	r3, [sp, #60]	; 0x3c
   15c60:	ldr	r2, [sp, #116]	; 0x74
   15c64:	str	r2, [sp, #68]	; 0x44
   15c68:	ldr	r3, [sp, #128]	; 0x80
   15c6c:	str	r3, [sp, #72]	; 0x48
   15c70:	mov	r9, r2
   15c74:	str	r3, [sp, #92]	; 0x5c
   15c78:	str	r2, [sp, #84]	; 0x54
   15c7c:	str	r3, [sp, #88]	; 0x58
   15c80:	b	141e4 <__assert_fail@plt+0x2e14>
   15c84:	ldr	r3, [r8, #8]
   15c88:	ldr	r2, [r8, #12]
   15c8c:	adds	r1, r3, #-2147483648	; 0x80000000
   15c90:	str	r1, [sp, #200]	; 0xc8
   15c94:	adc	r2, r2, #0
   15c98:	str	r2, [sp, #204]	; 0xcc
   15c9c:	mvn	r0, #0
   15ca0:	mov	r1, #0
   15ca4:	ldrd	r4, [sp, #200]	; 0xc8
   15ca8:	cmp	r5, r1
   15cac:	cmpeq	r4, r0
   15cb0:	bhi	15f40 <__assert_fail@plt+0x4b70>
   15cb4:	str	r3, [sp, #240]	; 0xf0
   15cb8:	mov	r3, #0
   15cbc:	str	r3, [sp, #244]	; 0xf4
   15cc0:	b	141e4 <__assert_fail@plt+0x2e14>
   15cc4:	ldr	r3, [r8, #8]
   15cc8:	ldr	r2, [r8, #12]
   15ccc:	adds	r1, r3, #-2147483648	; 0x80000000
   15cd0:	str	r1, [sp, #208]	; 0xd0
   15cd4:	adc	r2, r2, #0
   15cd8:	str	r2, [sp, #212]	; 0xd4
   15cdc:	mvn	r0, #0
   15ce0:	mov	r1, #0
   15ce4:	ldrd	r4, [sp, #208]	; 0xd0
   15ce8:	cmp	r5, r1
   15cec:	cmpeq	r4, r0
   15cf0:	bhi	15f48 <__assert_fail@plt+0x4b78>
   15cf4:	str	r3, [sp, #240]	; 0xf0
   15cf8:	mov	r3, #0
   15cfc:	str	r3, [sp, #244]	; 0xf4
   15d00:	b	141e4 <__assert_fail@plt+0x2e14>
   15d04:	ldrd	r2, [r8, #8]
   15d08:	strd	r2, [sp]
   15d0c:	ldrd	r2, [r8, #16]
   15d10:	strd	r2, [sp, #8]
   15d14:	ldm	r8, {r2, r3}
   15d18:	mov	r0, fp
   15d1c:	bl	12a18 <__assert_fail@plt+0x1648>
   15d20:	b	141e4 <__assert_fail@plt+0x2e14>
   15d24:	ldrd	r2, [r8, #-48]	; 0xffffffd0
   15d28:	strd	r2, [sp]
   15d2c:	ldrd	r2, [r8, #-40]	; 0xffffffd8
   15d30:	strd	r2, [sp, #8]
   15d34:	sub	r3, r8, #56	; 0x38
   15d38:	ldm	r3, {r2, r3}
   15d3c:	mov	r0, fp
   15d40:	bl	12a18 <__assert_fail@plt+0x1648>
   15d44:	mov	r3, #1
   15d48:	str	r3, [sp, #48]	; 0x30
   15d4c:	ldrd	r2, [r8, #8]
   15d50:	strd	r2, [sp]
   15d54:	ldrd	r2, [r8, #16]
   15d58:	strd	r2, [sp, #8]
   15d5c:	ldrd	r2, [r8, #24]
   15d60:	strd	r2, [sp, #16]
   15d64:	ldrd	r2, [r8, #32]
   15d68:	strd	r2, [sp, #24]
   15d6c:	ldrd	r2, [r8, #40]	; 0x28
   15d70:	strd	r2, [sp, #32]
   15d74:	ldrd	r2, [r8, #48]	; 0x30
   15d78:	strd	r2, [sp, #40]	; 0x28
   15d7c:	ldm	r8, {r2, r3}
   15d80:	mov	r0, fp
   15d84:	bl	12b9c <__assert_fail@plt+0x17cc>
   15d88:	cmp	r0, #0
   15d8c:	bne	141e4 <__assert_fail@plt+0x2e14>
   15d90:	mov	r0, #1
   15d94:	b	15eb4 <__assert_fail@plt+0x4ae4>
   15d98:	mvn	r2, #0
   15d9c:	mvn	r3, #0
   15da0:	strd	r2, [sp, #240]	; 0xf0
   15da4:	b	141e4 <__assert_fail@plt+0x2e14>
   15da8:	ldrd	r2, [r8, #8]
   15dac:	strd	r2, [sp, #240]	; 0xf0
   15db0:	b	141e4 <__assert_fail@plt+0x2e14>
   15db4:	add	r2, r7, r2
   15db8:	ldrb	r5, [r2, #2388]	; 0x954
   15dbc:	b	142e0 <__assert_fail@plt+0x2f10>
   15dc0:	ldr	r3, [sp, #104]	; 0x68
   15dc4:	cmp	r3, #3
   15dc8:	bne	15dd8 <__assert_fail@plt+0x4a08>
   15dcc:	cmp	r6, #0
   15dd0:	bgt	15de8 <__assert_fail@plt+0x4a18>
   15dd4:	beq	15f50 <__assert_fail@plt+0x4b80>
   15dd8:	movw	r2, #1132	; 0x46c
   15ddc:	add	r1, sp, #1408	; 0x580
   15de0:	add	r1, r1, #8
   15de4:	b	15e00 <__assert_fail@plt+0x4a30>
   15de8:	mvn	r6, #1
   15dec:	b	15dd8 <__assert_fail@plt+0x4a08>
   15df0:	cmp	sl, r1
   15df4:	beq	15f8c <__assert_fail@plt+0x4bbc>
   15df8:	sub	r8, r8, #56	; 0x38
   15dfc:	ldrsh	r5, [sl, #-2]!
   15e00:	add	r5, r7, r5
   15e04:	ldrsb	r3, [r5, r2]
   15e08:	cmn	r3, #93	; 0x5d
   15e0c:	beq	15df0 <__assert_fail@plt+0x4a20>
   15e10:	add	r3, r3, #1
   15e14:	cmp	r3, #112	; 0x70
   15e18:	bhi	15df0 <__assert_fail@plt+0x4a20>
   15e1c:	add	r0, r7, r3
   15e20:	ldrb	r0, [r0, #2272]	; 0x8e0
   15e24:	cmp	r0, #1
   15e28:	bne	15df0 <__assert_fail@plt+0x4a20>
   15e2c:	add	r3, r7, r3
   15e30:	ldrb	r5, [r3, #2388]	; 0x954
   15e34:	cmp	r5, #0
   15e38:	ble	15df0 <__assert_fail@plt+0x4a20>
   15e3c:	add	r1, r8, #56	; 0x38
   15e40:	add	r0, sp, #1456	; 0x5b0
   15e44:	add	r0, r0, #8
   15e48:	ldrd	r2, [sp, #120]	; 0x78
   15e4c:	strd	r2, [r0]
   15e50:	ldr	r3, [sp, #160]	; 0xa0
   15e54:	str	r3, [sp, #1472]	; 0x5c0
   15e58:	add	r0, sp, #1456	; 0x5b0
   15e5c:	ldrd	r2, [r0]
   15e60:	strd	r2, [r8, #56]	; 0x38
   15e64:	ldrd	r2, [sp, #120]	; 0x78
   15e68:	strd	r2, [r8, #64]	; 0x40
   15e6c:	ldrd	r2, [r0, #16]
   15e70:	strd	r2, [r8, #72]	; 0x48
   15e74:	ldrd	r2, [r0, #24]
   15e78:	strd	r2, [r8, #80]	; 0x50
   15e7c:	ldrd	r2, [r0, #32]
   15e80:	strd	r2, [r8, #88]	; 0x58
   15e84:	ldrd	r2, [r0, #40]	; 0x28
   15e88:	strd	r2, [r8, #96]	; 0x60
   15e8c:	ldrd	r2, [r0, #48]	; 0x30
   15e90:	strd	r2, [r8, #104]	; 0x68
   15e94:	mov	r8, r1
   15e98:	mov	r4, sl
   15e9c:	mov	r3, #3
   15ea0:	str	r3, [sp, #104]	; 0x68
   15ea4:	b	142e0 <__assert_fail@plt+0x2f10>
   15ea8:	mov	r3, #0
   15eac:	str	r3, [sp, #112]	; 0x70
   15eb0:	mov	r0, #2
   15eb4:	ldr	r3, [sp, #112]	; 0x70
   15eb8:	sub	r1, sl, r3, lsl #1
   15ebc:	add	r3, sp, #1408	; 0x580
   15ec0:	add	r3, r3, #8
   15ec4:	cmp	r1, r3
   15ec8:	beq	15f6c <__assert_fail@plt+0x4b9c>
   15ecc:	add	r3, sp, #1504	; 0x5e0
   15ed0:	add	r3, r3, #8
   15ed4:	rsb	r3, r3, #94	; 0x5e
   15ed8:	add	r1, r1, r3
   15edc:	lsr	r1, r1, #1
   15ee0:	mov	r3, #0
   15ee4:	b	15f60 <__assert_fail@plt+0x4b90>
   15ee8:	mov	r3, #0
   15eec:	str	r3, [sp, #112]	; 0x70
   15ef0:	mov	r0, r3
   15ef4:	b	15eb4 <__assert_fail@plt+0x4ae4>
   15ef8:	mov	r0, #1
   15efc:	b	15eb4 <__assert_fail@plt+0x4ae4>
   15f00:	mov	r0, #1
   15f04:	b	15eb4 <__assert_fail@plt+0x4ae4>
   15f08:	mov	r0, #1
   15f0c:	b	15eb4 <__assert_fail@plt+0x4ae4>
   15f10:	mov	r0, #1
   15f14:	b	15eb4 <__assert_fail@plt+0x4ae4>
   15f18:	mov	r0, #1
   15f1c:	b	15eb4 <__assert_fail@plt+0x4ae4>
   15f20:	mov	r0, #1
   15f24:	b	15eb4 <__assert_fail@plt+0x4ae4>
   15f28:	mov	r0, #1
   15f2c:	b	15eb4 <__assert_fail@plt+0x4ae4>
   15f30:	mov	r0, #1
   15f34:	b	15eb4 <__assert_fail@plt+0x4ae4>
   15f38:	mov	r0, #1
   15f3c:	b	15eb4 <__assert_fail@plt+0x4ae4>
   15f40:	mov	r0, #1
   15f44:	b	15eb4 <__assert_fail@plt+0x4ae4>
   15f48:	mov	r0, #1
   15f4c:	b	15eb4 <__assert_fail@plt+0x4ae4>
   15f50:	str	r6, [sp, #112]	; 0x70
   15f54:	mov	r0, #1
   15f58:	b	15eb4 <__assert_fail@plt+0x4ae4>
   15f5c:	mov	r3, r2
   15f60:	add	r2, r3, #1
   15f64:	cmp	r1, r3
   15f68:	bne	15f5c <__assert_fail@plt+0x4b8c>
   15f6c:	add	sp, sp, #1504	; 0x5e0
   15f70:	add	sp, sp, #12
   15f74:	ldrd	r4, [sp]
   15f78:	ldrd	r6, [sp, #8]
   15f7c:	ldrd	r8, [sp, #16]
   15f80:	ldrd	sl, [sp, #24]
   15f84:	add	sp, sp, #32
   15f88:	pop	{pc}		; (ldr pc, [sp], #4)
   15f8c:	mov	r0, #1
   15f90:	b	15f6c <__assert_fail@plt+0x4b9c>
   15f94:	mov	r6, #63	; 0x3f
   15f98:	b	13bc0 <__assert_fail@plt+0x27f0>
   15f9c:	cmp	r1, #45	; 0x2d
   15fa0:	movne	r3, #0
   15fa4:	moveq	r3, #1
   15fa8:	b	139cc <__assert_fail@plt+0x25fc>
   15fac:	add	r3, r7, #1120	; 0x460
   15fb0:	str	r3, [sp, #56]	; 0x38
   15fb4:	b	13ebc <__assert_fail@plt+0x2aec>
   15fb8:	add	r3, r7, #808	; 0x328
   15fbc:	str	r3, [sp, #56]	; 0x38
   15fc0:	b	13ebc <__assert_fail@plt+0x2aec>
   15fc4:	add	r1, sp, #248	; 0xf8
   15fc8:	ldrd	r2, [r8, #56]	; 0x38
   15fcc:	strd	r2, [sp, #240]	; 0xf0
   15fd0:	ldrd	r2, [r8, #64]	; 0x40
   15fd4:	strd	r2, [r1], #-8
   15fd8:	ldrd	r2, [r8, #72]	; 0x48
   15fdc:	strd	r2, [r1, #16]
   15fe0:	ldrd	r2, [r8, #80]	; 0x50
   15fe4:	strd	r2, [r1, #24]
   15fe8:	ldrd	r2, [r8, #88]	; 0x58
   15fec:	strd	r2, [r1, #32]
   15ff0:	ldrd	r2, [r8, #96]	; 0x60
   15ff4:	strd	r2, [r1, #40]	; 0x28
   15ff8:	ldrd	r2, [r8, #104]	; 0x68
   15ffc:	strd	r2, [r1, #48]	; 0x30
   16000:	ldr	r3, [r8, #64]	; 0x40
   16004:	str	r3, [sp, #84]	; 0x54
   16008:	ldr	r3, [r8, #68]	; 0x44
   1600c:	str	r3, [sp, #88]	; 0x58
   16010:	ldr	r3, [r8, #72]	; 0x48
   16014:	str	r3, [sp, #96]	; 0x60
   16018:	ldr	r3, [r8, #76]	; 0x4c
   1601c:	str	r3, [sp, #100]	; 0x64
   16020:	ldr	r9, [r8, #80]	; 0x50
   16024:	ldr	r3, [r8, #84]	; 0x54
   16028:	str	r3, [sp, #92]	; 0x5c
   1602c:	ldr	r3, [r8, #88]	; 0x58
   16030:	str	r3, [sp, #68]	; 0x44
   16034:	ldr	r3, [r8, #92]	; 0x5c
   16038:	str	r3, [sp, #72]	; 0x48
   1603c:	ldrd	r2, [r8, #96]	; 0x60
   16040:	strd	r2, [sp, #56]	; 0x38
   16044:	ldr	r3, [r8, #104]	; 0x68
   16048:	str	r3, [sp, #80]	; 0x50
   1604c:	mov	r3, #0
   16050:	str	r3, [sp, #76]	; 0x4c
   16054:	str	r3, [sp, #108]	; 0x6c
   16058:	b	141e4 <__assert_fail@plt+0x2e14>
   1605c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16060:	strd	r6, [sp, #8]
   16064:	strd	r8, [sp, #16]
   16068:	strd	sl, [sp, #24]
   1606c:	str	lr, [sp, #32]
   16070:	sub	sp, sp, #900	; 0x384
   16074:	str	r0, [sp, #40]	; 0x28
   16078:	str	r1, [sp, #32]
   1607c:	mov	r7, r2
   16080:	mov	r9, r3
   16084:	mov	r0, r1
   16088:	bl	11274 <strlen@plt>
   1608c:	str	r0, [sp, #44]	; 0x2c
   16090:	cmp	r7, #0
   16094:	beq	1610c <__assert_fail@plt+0x4d3c>
   16098:	ldr	r6, [r7]
   1609c:	ldr	r8, [r7, #4]
   160a0:	ldr	r2, [sp, #32]
   160a4:	mov	r4, r2
   160a8:	ldrb	r3, [r2], #1
   160ac:	cmp	r3, #9
   160b0:	bcc	160c4 <__assert_fail@plt+0x4cf4>
   160b4:	cmp	r3, #13
   160b8:	bls	160a4 <__assert_fail@plt+0x4cd4>
   160bc:	cmp	r3, #32
   160c0:	beq	160a4 <__assert_fail@plt+0x4cd4>
   160c4:	mov	r2, #56	; 0x38
   160c8:	mov	r1, #0
   160cc:	add	r0, sp, #512	; 0x200
   160d0:	bl	112c8 <memset@plt>
   160d4:	mov	r2, #4
   160d8:	movw	r1, #62144	; 0xf2c0
   160dc:	movt	r1, #1
   160e0:	mov	r0, r4
   160e4:	bl	11394 <strncmp@plt>
   160e8:	cmp	r0, #0
   160ec:	bne	17ab0 <__assert_fail@plt+0x66e0>
   160f0:	add	r5, r4, #4
   160f4:	ldrb	r3, [r4, #4]
   160f8:	cmp	r3, #0
   160fc:	beq	17ab0 <__assert_fail@plt+0x66e0>
   16100:	mov	r2, r5
   16104:	mov	r0, #1
   16108:	b	16144 <__assert_fail@plt+0x4d74>
   1610c:	add	r0, sp, #572	; 0x23c
   16110:	bl	129c4 <__assert_fail@plt+0x15f4>
   16114:	add	r7, sp, #572	; 0x23c
   16118:	b	16098 <__assert_fail@plt+0x4cc8>
   1611c:	add	r3, r2, #1
   16120:	ldrb	r2, [r2, #1]
   16124:	cmp	r2, #92	; 0x5c
   16128:	cmpne	r2, #34	; 0x22
   1612c:	bne	17ab0 <__assert_fail@plt+0x66e0>
   16130:	add	r2, r3, #1
   16134:	add	r0, r0, #1
   16138:	ldrb	r3, [r3, #1]
   1613c:	cmp	r3, #0
   16140:	beq	17ab0 <__assert_fail@plt+0x66e0>
   16144:	cmp	r3, #92	; 0x5c
   16148:	beq	1611c <__assert_fail@plt+0x4d4c>
   1614c:	cmp	r3, #34	; 0x22
   16150:	beq	1615c <__assert_fail@plt+0x4d8c>
   16154:	mov	r3, r2
   16158:	b	16130 <__assert_fail@plt+0x4d60>
   1615c:	cmp	r0, #100	; 0x64
   16160:	addle	r3, sp, #580	; 0x244
   16164:	strle	r3, [sp, #940]	; 0x3ac
   16168:	movle	fp, #0
   1616c:	bgt	16204 <__assert_fail@plt+0x4e34>
   16170:	ldrb	r3, [r4, #4]
   16174:	cmp	r3, #34	; 0x22
   16178:	beq	1621c <__assert_fail@plt+0x4e4c>
   1617c:	ldr	r1, [sp, #940]	; 0x3ac
   16180:	cmp	r3, #92	; 0x5c
   16184:	movne	r3, #0
   16188:	moveq	r3, #1
   1618c:	add	r2, r5, r3
   16190:	ldrb	r3, [r5, r3]
   16194:	strb	r3, [r1], #1
   16198:	add	r5, r2, #1
   1619c:	ldrb	r3, [r2, #1]
   161a0:	cmp	r3, #34	; 0x22
   161a4:	bne	16180 <__assert_fail@plt+0x4db0>
   161a8:	mov	r3, #0
   161ac:	strb	r3, [r1]
   161b0:	ldr	r0, [sp, #940]	; 0x3ac
   161b4:	bl	1a7b0 <__assert_fail@plt+0x93e0>
   161b8:	subs	sl, r0, #0
   161bc:	beq	16214 <__assert_fail@plt+0x4e44>
   161c0:	add	r5, r5, #1
   161c4:	mov	r4, r5
   161c8:	ldrb	r3, [r5], #1
   161cc:	cmp	r3, #9
   161d0:	bcc	161e4 <__assert_fail@plt+0x4e14>
   161d4:	cmp	r3, #13
   161d8:	bls	161c4 <__assert_fail@plt+0x4df4>
   161dc:	cmp	r3, #32
   161e0:	beq	161c4 <__assert_fail@plt+0x4df4>
   161e4:	add	r2, sp, #468	; 0x1d4
   161e8:	mov	r1, r7
   161ec:	mov	r0, sl
   161f0:	bl	1ab14 <__assert_fail@plt+0x9744>
   161f4:	cmp	r0, #0
   161f8:	moveq	r4, #0
   161fc:	bne	17ad4 <__assert_fail@plt+0x6704>
   16200:	b	16474 <__assert_fail@plt+0x50a4>
   16204:	bl	1b7d8 <__assert_fail@plt+0xa408>
   16208:	subs	fp, r0, #0
   1620c:	strne	fp, [sp, #940]	; 0x3ac
   16210:	bne	16170 <__assert_fail@plt+0x4da0>
   16214:	mov	r4, #0
   16218:	b	16488 <__assert_fail@plt+0x50b8>
   1621c:	ldr	r1, [sp, #940]	; 0x3ac
   16220:	b	161a8 <__assert_fail@plt+0x4dd8>
   16224:	cmp	r4, r5
   16228:	beq	1628c <__assert_fail@plt+0x4ebc>
   1622c:	adds	r3, r6, r4
   16230:	str	r3, [sp, #88]	; 0x58
   16234:	add	r4, r4, #7733248	; 0x760000
   16238:	add	r4, r4, #42752	; 0xa700
   1623c:	bvs	1628c <__assert_fail@plt+0x4ebc>
   16240:	add	r2, sp, #132	; 0x84
   16244:	add	r1, sp, #88	; 0x58
   16248:	mov	r0, sl
   1624c:	bl	1ab14 <__assert_fail@plt+0x9744>
   16250:	cmp	r0, #0
   16254:	beq	16224 <__assert_fail@plt+0x4e54>
   16258:	ldr	r3, [sp, #172]	; 0xac
   1625c:	cmp	r3, #0
   16260:	beq	16224 <__assert_fail@plt+0x4e54>
   16264:	ldr	r2, [sp, #164]	; 0xa4
   16268:	ldr	r1, [sp, #432]	; 0x1b0
   1626c:	cmp	r2, r1
   16270:	beq	16224 <__assert_fail@plt+0x4e54>
   16274:	str	r3, [sp, #436]	; 0x1b4
   16278:	movw	r3, #269	; 0x10d
   1627c:	str	r3, [sp, #440]	; 0x1b8
   16280:	str	r2, [sp, #444]	; 0x1bc
   16284:	mov	r3, #0
   16288:	str	r3, [sp, #448]	; 0x1c0
   1628c:	ldr	r0, [sp, #424]	; 0x1a8
   16290:	cmp	r0, #0
   16294:	beq	162c0 <__assert_fail@plt+0x4ef0>
   16298:	ldr	r1, [sp, #436]	; 0x1b4
   1629c:	cmp	r1, #0
   162a0:	beq	162c0 <__assert_fail@plt+0x4ef0>
   162a4:	bl	110a0 <strcmp@plt>
   162a8:	cmp	r0, #0
   162ac:	bne	162c0 <__assert_fail@plt+0x4ef0>
   162b0:	mvn	r3, #0
   162b4:	str	r3, [sp, #432]	; 0x1b0
   162b8:	mov	r3, #0
   162bc:	str	r3, [sp, #436]	; 0x1b4
   162c0:	add	r0, sp, #232	; 0xe8
   162c4:	bl	138e0 <__assert_fail@plt+0x2510>
   162c8:	cmp	r0, #0
   162cc:	bne	1642c <__assert_fail@plt+0x505c>
   162d0:	ldrb	r3, [sp, #413]	; 0x19d
   162d4:	cmp	r3, #0
   162d8:	bne	164b0 <__assert_fail@plt+0x50e0>
   162dc:	ldrb	r4, [sp, #384]	; 0x180
   162e0:	cmp	r4, #0
   162e4:	beq	166e4 <__assert_fail@plt+0x5314>
   162e8:	add	r3, sp, #320	; 0x140
   162ec:	ldrd	r2, [r3]
   162f0:	ldr	r1, [sp, #40]	; 0x28
   162f4:	strd	r2, [r1]
   162f8:	ldrb	r4, [sp, #413]	; 0x19d
   162fc:	cmp	r4, #0
   16300:	moveq	r4, #1
   16304:	beq	16474 <__assert_fail@plt+0x50a4>
   16308:	ldr	r3, [sp, #940]	; 0x3ac
   1630c:	cmp	r3, #0
   16310:	beq	17954 <__assert_fail@plt+0x6584>
   16314:	movw	r1, #62312	; 0xf368
   16318:	movt	r1, #1
   1631c:	ldr	r0, [sp, #940]	; 0x3ac
   16320:	bl	110a0 <strcmp@plt>
   16324:	cmp	r0, #0
   16328:	bne	17970 <__assert_fail@plt+0x65a0>
   1632c:	mov	r2, #5
   16330:	movw	r1, #64460	; 0xfbcc
   16334:	movt	r1, #1
   16338:	bl	11130 <dcgettext@plt>
   1633c:	bl	13270 <__assert_fail@plt+0x1ea0>
   16340:	ldr	r8, [sp, #40]	; 0x28
   16344:	ldr	r6, [r8]
   16348:	asr	r7, r6, #31
   1634c:	ldr	r5, [r8, #4]
   16350:	mov	r2, #5
   16354:	movw	r1, #64528	; 0xfc10
   16358:	movt	r1, #1
   1635c:	mov	r0, #0
   16360:	bl	11130 <dcgettext@plt>
   16364:	str	r5, [sp]
   16368:	mov	r2, r6
   1636c:	mov	r3, r7
   16370:	bl	13270 <__assert_fail@plt+0x1ea0>
   16374:	add	r1, sp, #88	; 0x58
   16378:	mov	r0, r8
   1637c:	bl	11088 <gmtime_r@plt>
   16380:	cmp	r0, #0
   16384:	beq	163c0 <__assert_fail@plt+0x4ff0>
   16388:	mov	r2, #5
   1638c:	movw	r1, #64564	; 0xfc34
   16390:	movt	r1, #1
   16394:	mov	r0, #0
   16398:	bl	11130 <dcgettext@plt>
   1639c:	mov	r5, r0
   163a0:	mov	r3, #100	; 0x64
   163a4:	add	r2, sp, #680	; 0x2a8
   163a8:	mov	r1, #0
   163ac:	add	r0, sp, #88	; 0x58
   163b0:	bl	132d0 <__assert_fail@plt+0x1f00>
   163b4:	mov	r1, r0
   163b8:	mov	r0, r5
   163bc:	bl	13270 <__assert_fail@plt+0x1ea0>
   163c0:	add	r2, sp, #132	; 0x84
   163c4:	ldr	r1, [sp, #40]	; 0x28
   163c8:	mov	r0, sl
   163cc:	bl	1ab14 <__assert_fail@plt+0x9744>
   163d0:	cmp	r0, #0
   163d4:	beq	16474 <__assert_fail@plt+0x50a4>
   163d8:	ldr	r7, [sp, #168]	; 0xa8
   163dc:	mov	r2, #5
   163e0:	movw	r1, #64584	; 0xfc48
   163e4:	movt	r1, #1
   163e8:	mov	r0, #0
   163ec:	bl	11130 <dcgettext@plt>
   163f0:	mov	r5, r0
   163f4:	mov	r3, #100	; 0x64
   163f8:	add	r2, sp, #680	; 0x2a8
   163fc:	mov	r1, #0
   16400:	add	r0, sp, #132	; 0x84
   16404:	bl	132d0 <__assert_fail@plt+0x1f00>
   16408:	mov	r6, r0
   1640c:	add	r1, sp, #780	; 0x30c
   16410:	mov	r0, r7
   16414:	bl	13058 <__assert_fail@plt+0x1c88>
   16418:	mov	r2, r0
   1641c:	mov	r1, r6
   16420:	mov	r0, r5
   16424:	bl	13270 <__assert_fail@plt+0x1ea0>
   16428:	b	16474 <__assert_fail@plt+0x50a4>
   1642c:	ldrb	r4, [sp, #413]	; 0x19d
   16430:	cmp	r4, #0
   16434:	beq	16474 <__assert_fail@plt+0x50a4>
   16438:	ldr	r3, [sp, #32]
   1643c:	ldr	r2, [sp, #44]	; 0x2c
   16440:	add	r3, r3, r2
   16444:	ldr	r2, [sp, #232]	; 0xe8
   16448:	cmp	r2, r3
   1644c:	mov	r2, #5
   16450:	movwcs	r1, #62152	; 0xf2c8
   16454:	movtcs	r1, #1
   16458:	movwcc	r1, #62176	; 0xf2e0
   1645c:	movtcc	r1, #1
   16460:	mov	r0, #0
   16464:	bl	11130 <dcgettext@plt>
   16468:	ldr	r1, [sp, #232]	; 0xe8
   1646c:	bl	13270 <__assert_fail@plt+0x1ea0>
   16470:	mov	r4, #0
   16474:	ldr	r3, [sp, #936]	; 0x3a8
   16478:	cmp	sl, r3
   1647c:	beq	16488 <__assert_fail@plt+0x50b8>
   16480:	mov	r0, sl
   16484:	bl	1a990 <__assert_fail@plt+0x95c0>
   16488:	mov	r0, fp
   1648c:	bl	1ba28 <__assert_fail@plt+0xa658>
   16490:	mov	r0, r4
   16494:	add	sp, sp, #900	; 0x384
   16498:	ldrd	r4, [sp]
   1649c:	ldrd	r6, [sp, #8]
   164a0:	ldrd	r8, [sp, #16]
   164a4:	ldrd	sl, [sp, #24]
   164a8:	add	sp, sp, #32
   164ac:	pop	{pc}		; (ldr pc, [sp], #4)
   164b0:	mov	r2, #5
   164b4:	movw	r1, #62216	; 0xf308
   164b8:	movt	r1, #1
   164bc:	mov	r0, #0
   164c0:	bl	11130 <dcgettext@plt>
   164c4:	bl	13270 <__assert_fail@plt+0x1ea0>
   164c8:	ldrb	r3, [sp, #384]	; 0x180
   164cc:	cmp	r3, #0
   164d0:	bne	16530 <__assert_fail@plt+0x5160>
   164d4:	ldr	r3, [sp, #408]	; 0x198
   164d8:	cmp	r3, #0
   164dc:	bne	165c8 <__assert_fail@plt+0x51f8>
   164e0:	ldr	r3, [sp, #940]	; 0x3ac
   164e4:	cmp	r3, #0
   164e8:	beq	1667c <__assert_fail@plt+0x52ac>
   164ec:	ldr	r3, [sp, #936]	; 0x3a8
   164f0:	cmp	r3, sl
   164f4:	beq	165fc <__assert_fail@plt+0x522c>
   164f8:	movw	r3, #4512	; 0x11a0
   164fc:	movt	r3, #3
   16500:	ldr	r4, [r3]
   16504:	mov	r2, #5
   16508:	movw	r1, #62288	; 0xf350
   1650c:	movt	r1, #1
   16510:	mov	r0, #0
   16514:	bl	11130 <dcgettext@plt>
   16518:	ldr	r3, [sp, #940]	; 0x3ac
   1651c:	mov	r2, r0
   16520:	mov	r1, #1
   16524:	mov	r0, r4
   16528:	bl	112ec <__fprintf_chk@plt>
   1652c:	b	16560 <__assert_fail@plt+0x5190>
   16530:	movw	r3, #4512	; 0x11a0
   16534:	movt	r3, #3
   16538:	ldr	r4, [r3]
   1653c:	mov	r2, #5
   16540:	movw	r1, #62236	; 0xf31c
   16544:	movt	r1, #1
   16548:	mov	r0, #0
   1654c:	bl	11130 <dcgettext@plt>
   16550:	mov	r2, r0
   16554:	mov	r1, #1
   16558:	mov	r0, r4
   1655c:	bl	112ec <__fprintf_chk@plt>
   16560:	ldr	r3, [sp, #396]	; 0x18c
   16564:	cmp	r3, #0
   16568:	beq	165a4 <__assert_fail@plt+0x51d4>
   1656c:	ldr	r3, [sp, #408]	; 0x198
   16570:	cmp	r3, #0
   16574:	bne	166b0 <__assert_fail@plt+0x52e0>
   16578:	ldr	r3, [sp, #252]	; 0xfc
   1657c:	cmp	r3, #0
   16580:	ble	165b0 <__assert_fail@plt+0x51e0>
   16584:	movw	r3, #4512	; 0x11a0
   16588:	movt	r3, #3
   1658c:	ldr	r3, [r3]
   16590:	mov	r2, #5
   16594:	mov	r1, #1
   16598:	movw	r0, #62400	; 0xf3c0
   1659c:	movt	r0, #1
   165a0:	bl	11184 <fwrite@plt>
   165a4:	ldr	r3, [sp, #408]	; 0x198
   165a8:	cmp	r3, #0
   165ac:	bne	166b0 <__assert_fail@plt+0x52e0>
   165b0:	movw	r3, #4512	; 0x11a0
   165b4:	movt	r3, #3
   165b8:	ldr	r1, [r3]
   165bc:	mov	r0, #10
   165c0:	bl	11340 <fputc@plt>
   165c4:	b	162dc <__assert_fail@plt+0x4f0c>
   165c8:	movw	r3, #4512	; 0x11a0
   165cc:	movt	r3, #3
   165d0:	ldr	r4, [r3]
   165d4:	mov	r2, #5
   165d8:	movw	r1, #62264	; 0xf338
   165dc:	movt	r1, #1
   165e0:	mov	r0, #0
   165e4:	bl	11130 <dcgettext@plt>
   165e8:	mov	r2, r0
   165ec:	mov	r1, #1
   165f0:	mov	r0, r4
   165f4:	bl	112ec <__fprintf_chk@plt>
   165f8:	b	16560 <__assert_fail@plt+0x5190>
   165fc:	movw	r1, #62312	; 0xf368
   16600:	movt	r1, #1
   16604:	ldr	r0, [sp, #940]	; 0x3ac
   16608:	bl	110a0 <strcmp@plt>
   1660c:	cmp	r0, #0
   16610:	bne	16644 <__assert_fail@plt+0x5274>
   16614:	movw	r3, #4512	; 0x11a0
   16618:	movt	r3, #3
   1661c:	ldr	r4, [r3]
   16620:	mov	r2, #5
   16624:	movw	r1, #62320	; 0xf370
   16628:	movt	r1, #1
   1662c:	bl	11130 <dcgettext@plt>
   16630:	mov	r2, r0
   16634:	mov	r1, #1
   16638:	mov	r0, r4
   1663c:	bl	112ec <__fprintf_chk@plt>
   16640:	b	16560 <__assert_fail@plt+0x5190>
   16644:	movw	r3, #4512	; 0x11a0
   16648:	movt	r3, #3
   1664c:	ldr	r4, [r3]
   16650:	mov	r2, #5
   16654:	movw	r1, #62356	; 0xf394
   16658:	movt	r1, #1
   1665c:	mov	r0, #0
   16660:	bl	11130 <dcgettext@plt>
   16664:	ldr	r3, [sp, #940]	; 0x3ac
   16668:	mov	r2, r0
   1666c:	mov	r1, #1
   16670:	mov	r0, r4
   16674:	bl	112ec <__fprintf_chk@plt>
   16678:	b	16560 <__assert_fail@plt+0x5190>
   1667c:	movw	r3, #4512	; 0x11a0
   16680:	movt	r3, #3
   16684:	ldr	r4, [r3]
   16688:	mov	r2, #5
   1668c:	movw	r1, #62384	; 0xf3b0
   16690:	movt	r1, #1
   16694:	mov	r0, #0
   16698:	bl	11130 <dcgettext@plt>
   1669c:	mov	r2, r0
   166a0:	mov	r1, #1
   166a4:	mov	r0, r4
   166a8:	bl	112ec <__fprintf_chk@plt>
   166ac:	b	16560 <__assert_fail@plt+0x5190>
   166b0:	movw	r3, #4512	; 0x11a0
   166b4:	movt	r3, #3
   166b8:	ldr	r4, [r3]
   166bc:	add	r1, sp, #780	; 0x30c
   166c0:	ldr	r0, [sp, #256]	; 0x100
   166c4:	bl	13058 <__assert_fail@plt+0x1c88>
   166c8:	mov	r3, r0
   166cc:	movw	r2, #62408	; 0xf3c8
   166d0:	movt	r2, #1
   166d4:	mov	r1, #1
   166d8:	mov	r0, r4
   166dc:	bl	112ec <__fprintf_chk@plt>
   166e0:	b	165b0 <__assert_fail@plt+0x51e0>
   166e4:	ldr	r2, [sp, #404]	; 0x194
   166e8:	ldr	r3, [sp, #388]	; 0x184
   166ec:	orr	r3, r2, r3
   166f0:	ldr	r1, [sp, #392]	; 0x188
   166f4:	orr	r3, r3, r1
   166f8:	ldr	r1, [sp, #400]	; 0x190
   166fc:	orr	r3, r3, r1
   16700:	ldr	r1, [sp, #396]	; 0x18c
   16704:	ldr	r0, [sp, #408]	; 0x198
   16708:	add	r1, r1, r0
   1670c:	orr	r3, r3, r1
   16710:	cmp	r3, #1
   16714:	ble	167b4 <__assert_fail@plt+0x53e4>
   16718:	ldrb	r3, [sp, #413]	; 0x19d
   1671c:	cmp	r3, #0
   16720:	beq	16474 <__assert_fail@plt+0x50a4>
   16724:	cmp	r2, #1
   16728:	bgt	16774 <__assert_fail@plt+0x53a4>
   1672c:	ldr	r3, [sp, #388]	; 0x184
   16730:	cmp	r3, #1
   16734:	bgt	16784 <__assert_fail@plt+0x53b4>
   16738:	ldr	r3, [sp, #392]	; 0x188
   1673c:	cmp	r3, #1
   16740:	bgt	16794 <__assert_fail@plt+0x53c4>
   16744:	ldr	r3, [sp, #400]	; 0x190
   16748:	cmp	r3, #1
   1674c:	bgt	167a4 <__assert_fail@plt+0x53d4>
   16750:	ldr	r3, [sp, #396]	; 0x18c
   16754:	ldr	r2, [sp, #408]	; 0x198
   16758:	add	r3, r3, r2
   1675c:	cmp	r3, #1
   16760:	ble	16474 <__assert_fail@plt+0x50a4>
   16764:	movw	r0, #62568	; 0xf468
   16768:	movt	r0, #1
   1676c:	bl	13270 <__assert_fail@plt+0x1ea0>
   16770:	b	16474 <__assert_fail@plt+0x50a4>
   16774:	movw	r0, #62416	; 0xf3d0
   16778:	movt	r0, #1
   1677c:	bl	13270 <__assert_fail@plt+0x1ea0>
   16780:	b	1672c <__assert_fail@plt+0x535c>
   16784:	movw	r0, #62452	; 0xf3f4
   16788:	movt	r0, #1
   1678c:	bl	13270 <__assert_fail@plt+0x1ea0>
   16790:	b	16738 <__assert_fail@plt+0x5368>
   16794:	movw	r0, #62488	; 0xf418
   16798:	movt	r0, #1
   1679c:	bl	13270 <__assert_fail@plt+0x1ea0>
   167a0:	b	16744 <__assert_fail@plt+0x5374>
   167a4:	movw	r0, #62524	; 0xf43c
   167a8:	movt	r0, #1
   167ac:	bl	13270 <__assert_fail@plt+0x1ea0>
   167b0:	b	16750 <__assert_fail@plt+0x5380>
   167b4:	ldrb	r5, [sp, #413]	; 0x19d
   167b8:	add	r3, sp, #272	; 0x110
   167bc:	ldrd	r6, [r3]
   167c0:	cmp	r6, #0
   167c4:	sbcs	r3, r7, #0
   167c8:	blt	169dc <__assert_fail@plt+0x560c>
   167cc:	ldr	r3, [sp, #280]	; 0x118
   167d0:	cmp	r3, #2
   167d4:	beq	16980 <__assert_fail@plt+0x55b0>
   167d8:	mov	r3, #0
   167dc:	movw	r2, #63636	; 0xf894
   167e0:	movt	r2, #65535	; 0xffff
   167e4:	adds	r2, r6, r2
   167e8:	str	r2, [sp, #48]	; 0x30
   167ec:	sbc	r2, r7, #0
   167f0:	str	r2, [sp, #52]	; 0x34
   167f4:	movw	r0, #1900	; 0x76c
   167f8:	mov	r1, #0
   167fc:	cmp	r7, r1
   16800:	cmpeq	r6, r0
   16804:	bcs	16a10 <__assert_fail@plt+0x5640>
   16808:	ldrd	r0, [sp, #48]	; 0x30
   1680c:	cmp	r0, #0
   16810:	sbcs	r2, r1, #0
   16814:	bge	16a20 <__assert_fail@plt+0x5650>
   16818:	ldrd	r8, [sp, #48]	; 0x30
   1681c:	asr	r1, r8, #31
   16820:	cmp	r9, r1
   16824:	cmpeq	r8, r8
   16828:	movne	r3, #1
   1682c:	mov	r2, r8
   16830:	and	r3, r3, #1
   16834:	str	r2, [sp, #872]	; 0x368
   16838:	cmp	r3, #0
   1683c:	bne	16a28 <__assert_fail@plt+0x5658>
   16840:	add	r3, sp, #288	; 0x120
   16844:	ldrd	r6, [r3]
   16848:	mvn	r0, #0
   1684c:	mvn	r1, #0
   16850:	adds	r2, r6, r0
   16854:	adcs	r3, r7, r1
   16858:	movvs	ip, #1
   1685c:	movvc	ip, #0
   16860:	asr	r1, r2, #31
   16864:	cmp	r3, r1
   16868:	cmpeq	r2, r2
   1686c:	str	r2, [sp, #868]	; 0x364
   16870:	moveq	r3, ip
   16874:	movne	r3, #1
   16878:	cmp	r3, #0
   1687c:	bne	16a30 <__assert_fail@plt+0x5660>
   16880:	add	r3, sp, #296	; 0x128
   16884:	ldrd	r2, [r3]
   16888:	asr	r1, r2, #31
   1688c:	str	r2, [sp, #864]	; 0x360
   16890:	cmp	r3, r1
   16894:	cmpeq	r2, r2
   16898:	bne	16a30 <__assert_fail@plt+0x5660>
   1689c:	ldr	r1, [sp, #404]	; 0x194
   168a0:	cmp	r1, #0
   168a4:	bne	168cc <__assert_fail@plt+0x54fc>
   168a8:	ldrb	r3, [sp, #385]	; 0x181
   168ac:	cmp	r3, #0
   168b0:	beq	16b38 <__assert_fail@plt+0x5768>
   168b4:	ldr	r3, [sp, #388]	; 0x184
   168b8:	cmp	r3, #0
   168bc:	bne	16b38 <__assert_fail@plt+0x5768>
   168c0:	ldr	r3, [sp, #392]	; 0x188
   168c4:	cmp	r3, #0
   168c8:	bne	17a68 <__assert_fail@plt+0x6698>
   168cc:	add	r3, sp, #304	; 0x130
   168d0:	ldrd	r2, [r3]
   168d4:	ldr	r0, [sp, #260]	; 0x104
   168d8:	cmp	r0, #0
   168dc:	beq	16a7c <__assert_fail@plt+0x56ac>
   168e0:	cmp	r0, #1
   168e4:	beq	16af0 <__assert_fail@plt+0x5720>
   168e8:	cmp	r3, #0
   168ec:	cmpeq	r2, #23
   168f0:	bhi	17a34 <__assert_fail@plt+0x6664>
   168f4:	str	r2, [sp, #860]	; 0x35c
   168f8:	ldr	r3, [sp, #312]	; 0x138
   168fc:	str	r3, [sp, #856]	; 0x358
   16900:	ldr	r3, [sp, #320]	; 0x140
   16904:	str	r3, [sp, #852]	; 0x354
   16908:	ldrb	r3, [sp, #413]	; 0x19d
   1690c:	cmp	r3, #0
   16910:	beq	16b58 <__assert_fail@plt+0x5788>
   16914:	cmp	r1, #0
   16918:	mov	r2, #5
   1691c:	movwne	r1, #62752	; 0xf520
   16920:	movtne	r1, #1
   16924:	movweq	r1, #62800	; 0xf550
   16928:	movteq	r1, #1
   1692c:	mov	r0, #0
   16930:	bl	11130 <dcgettext@plt>
   16934:	mov	r5, r0
   16938:	ldr	r3, [sp, #852]	; 0x354
   1693c:	str	r3, [sp, #12]
   16940:	ldr	r3, [sp, #856]	; 0x358
   16944:	str	r3, [sp, #8]
   16948:	ldr	r3, [sp, #860]	; 0x35c
   1694c:	str	r3, [sp, #4]
   16950:	movw	r3, #62844	; 0xf57c
   16954:	movt	r3, #1
   16958:	str	r3, [sp]
   1695c:	mov	r3, #100	; 0x64
   16960:	mov	r2, #1
   16964:	mov	r1, r3
   16968:	add	r0, sp, #680	; 0x2a8
   1696c:	bl	113c4 <__snprintf_chk@plt>
   16970:	add	r1, sp, #680	; 0x2a8
   16974:	mov	r0, r5
   16978:	bl	13270 <__assert_fail@plt+0x1ea0>
   1697c:	b	16b58 <__assert_fail@plt+0x5788>
   16980:	cmp	r6, #69	; 0x45
   16984:	sbcs	r3, r7, #0
   16988:	blt	17a94 <__assert_fail@plt+0x66c4>
   1698c:	movw	r9, #1900	; 0x76c
   16990:	adds	r9, r6, r9
   16994:	mov	r8, #0
   16998:	adc	r8, r7, r8
   1699c:	cmp	r5, #0
   169a0:	bne	169b0 <__assert_fail@plt+0x55e0>
   169a4:	mov	r6, r9
   169a8:	mov	r7, r8
   169ac:	b	167d8 <__assert_fail@plt+0x5408>
   169b0:	mov	r2, #5
   169b4:	movw	r1, #62608	; 0xf490
   169b8:	movt	r1, #1
   169bc:	mov	r0, #0
   169c0:	bl	11130 <dcgettext@plt>
   169c4:	str	r9, [sp]
   169c8:	str	r8, [sp, #4]
   169cc:	mov	r2, r6
   169d0:	mov	r3, r7
   169d4:	bl	13270 <__assert_fail@plt+0x1ea0>
   169d8:	b	169a4 <__assert_fail@plt+0x55d4>
   169dc:	mov	ip, #0
   169e0:	movw	r0, #63636	; 0xf894
   169e4:	movt	r0, #65535	; 0xffff
   169e8:	mvn	r1, #0
   169ec:	subs	r2, r0, r6
   169f0:	sbcs	r3, r1, r7
   169f4:	movvs	ip, #1
   169f8:	asr	r1, r2, #31
   169fc:	cmp	r3, r1
   16a00:	cmpeq	r2, r2
   16a04:	movne	ip, #1
   16a08:	and	r3, ip, #1
   16a0c:	b	16834 <__assert_fail@plt+0x5464>
   16a10:	ldrd	r0, [sp, #48]	; 0x30
   16a14:	cmp	r0, #0
   16a18:	sbcs	r2, r1, #0
   16a1c:	bge	16818 <__assert_fail@plt+0x5448>
   16a20:	mov	r3, #1
   16a24:	b	16818 <__assert_fail@plt+0x5448>
   16a28:	cmp	r5, #0
   16a2c:	bne	16a58 <__assert_fail@plt+0x5688>
   16a30:	ldrb	r3, [sp, #413]	; 0x19d
   16a34:	cmp	r3, #0
   16a38:	beq	16474 <__assert_fail@plt+0x50a4>
   16a3c:	mov	r2, #5
   16a40:	movw	r1, #62684	; 0xf4dc
   16a44:	movt	r1, #1
   16a48:	mov	r0, #0
   16a4c:	bl	11130 <dcgettext@plt>
   16a50:	bl	13270 <__assert_fail@plt+0x1ea0>
   16a54:	b	16474 <__assert_fail@plt+0x50a4>
   16a58:	mov	r2, #5
   16a5c:	movw	r1, #62652	; 0xf4bc
   16a60:	movt	r1, #1
   16a64:	mov	r0, #0
   16a68:	bl	11130 <dcgettext@plt>
   16a6c:	mov	r2, r6
   16a70:	mov	r3, r7
   16a74:	bl	13270 <__assert_fail@plt+0x1ea0>
   16a78:	b	16a30 <__assert_fail@plt+0x5660>
   16a7c:	subs	r0, r2, #1
   16a80:	str	r0, [sp, #56]	; 0x38
   16a84:	sbc	r0, r3, #0
   16a88:	str	r0, [sp, #60]	; 0x3c
   16a8c:	ldrd	r6, [sp, #56]	; 0x38
   16a90:	cmp	r7, #0
   16a94:	cmpeq	r6, #10
   16a98:	bls	168f4 <__assert_fail@plt+0x5524>
   16a9c:	cmp	r3, #0
   16aa0:	cmpeq	r2, #12
   16aa4:	mvnne	r3, #0
   16aa8:	moveq	r3, #0
   16aac:	str	r3, [sp, #860]	; 0x35c
   16ab0:	movwne	r5, #62128	; 0xf2b0
   16ab4:	movtne	r5, #1
   16ab8:	beq	168f8 <__assert_fail@plt+0x5528>
   16abc:	ldrb	r3, [sp, #413]	; 0x19d
   16ac0:	cmp	r3, #0
   16ac4:	beq	16474 <__assert_fail@plt+0x50a4>
   16ac8:	mov	r2, #5
   16acc:	movw	r1, #62724	; 0xf504
   16ad0:	movt	r1, #1
   16ad4:	mov	r0, #0
   16ad8:	bl	11130 <dcgettext@plt>
   16adc:	str	r5, [sp]
   16ae0:	add	r3, sp, #304	; 0x130
   16ae4:	ldrd	r2, [r3]
   16ae8:	bl	13270 <__assert_fail@plt+0x1ea0>
   16aec:	b	16474 <__assert_fail@plt+0x50a4>
   16af0:	subs	r0, r2, #1
   16af4:	str	r0, [sp, #64]	; 0x40
   16af8:	sbc	r0, r3, #0
   16afc:	str	r0, [sp, #68]	; 0x44
   16b00:	ldrd	r6, [sp, #64]	; 0x40
   16b04:	cmp	r7, #0
   16b08:	cmpeq	r6, #10
   16b0c:	addls	r2, r2, #12
   16b10:	bls	168f4 <__assert_fail@plt+0x5524>
   16b14:	cmp	r3, #0
   16b18:	cmpeq	r2, #12
   16b1c:	moveq	r2, #12
   16b20:	beq	168f4 <__assert_fail@plt+0x5524>
   16b24:	mvn	r3, #0
   16b28:	str	r3, [sp, #860]	; 0x35c
   16b2c:	movw	r5, #61776	; 0xf150
   16b30:	movt	r5, #1
   16b34:	b	16abc <__assert_fail@plt+0x56ec>
   16b38:	mov	r3, #0
   16b3c:	str	r3, [sp, #852]	; 0x354
   16b40:	str	r3, [sp, #856]	; 0x358
   16b44:	str	r3, [sp, #860]	; 0x35c
   16b48:	str	r3, [sp, #324]	; 0x144
   16b4c:	ldrb	r3, [sp, #413]	; 0x19d
   16b50:	cmp	r3, #0
   16b54:	bne	16ecc <__assert_fail@plt+0x5afc>
   16b58:	ldr	r3, [sp, #388]	; 0x184
   16b5c:	ldr	r2, [sp, #392]	; 0x188
   16b60:	orr	r3, r3, r2
   16b64:	ldr	r2, [sp, #404]	; 0x194
   16b68:	orrs	r3, r3, r2
   16b6c:	bne	17a88 <__assert_fail@plt+0x66b8>
   16b70:	ldr	r3, [sp, #396]	; 0x18c
   16b74:	cmp	r3, #0
   16b78:	ldrne	r3, [sp, #252]	; 0xfc
   16b7c:	strne	r3, [sp, #884]	; 0x374
   16b80:	ldr	r3, [sp, #852]	; 0x354
   16b84:	str	r3, [sp, #808]	; 0x328
   16b88:	ldr	r3, [sp, #856]	; 0x358
   16b8c:	str	r3, [sp, #812]	; 0x32c
   16b90:	ldr	r3, [sp, #860]	; 0x35c
   16b94:	str	r3, [sp, #816]	; 0x330
   16b98:	ldr	r3, [sp, #864]	; 0x360
   16b9c:	str	r3, [sp, #820]	; 0x334
   16ba0:	ldr	r3, [sp, #868]	; 0x364
   16ba4:	str	r3, [sp, #824]	; 0x338
   16ba8:	ldr	r3, [sp, #872]	; 0x368
   16bac:	str	r3, [sp, #828]	; 0x33c
   16bb0:	ldr	r3, [sp, #884]	; 0x374
   16bb4:	str	r3, [sp, #840]	; 0x348
   16bb8:	mvn	r3, #0
   16bbc:	str	r3, [sp, #876]	; 0x36c
   16bc0:	add	r1, sp, #852	; 0x354
   16bc4:	mov	r0, sl
   16bc8:	bl	1abc0 <__assert_fail@plt+0x97f0>
   16bcc:	mov	r5, r0
   16bd0:	add	r1, sp, #852	; 0x354
   16bd4:	add	r0, sp, #808	; 0x328
   16bd8:	bl	12df8 <__assert_fail@plt+0x1a28>
   16bdc:	subs	r6, r0, #0
   16be0:	bne	16f78 <__assert_fail@plt+0x5ba8>
   16be4:	ldr	r3, [sp, #408]	; 0x198
   16be8:	str	r3, [sp, #48]	; 0x30
   16bec:	cmp	r3, #0
   16bf0:	bne	16edc <__assert_fail@plt+0x5b0c>
   16bf4:	ldr	r2, [sp, #808]	; 0x328
   16bf8:	str	r2, [sp, #56]	; 0x38
   16bfc:	ldr	r1, [sp, #852]	; 0x354
   16c00:	str	r1, [sp, #64]	; 0x40
   16c04:	ldr	r0, [sp, #812]	; 0x32c
   16c08:	str	r0, [sp, #72]	; 0x48
   16c0c:	ldr	ip, [sp, #856]	; 0x358
   16c10:	str	ip, [sp, #76]	; 0x4c
   16c14:	ldr	lr, [sp, #816]	; 0x330
   16c18:	str	lr, [sp, #80]	; 0x50
   16c1c:	ldr	r3, [sp, #860]	; 0x35c
   16c20:	str	r3, [sp, #32]
   16c24:	ldr	r3, [sp, #820]	; 0x334
   16c28:	str	r3, [sp, #40]	; 0x28
   16c2c:	ldr	r5, [sp, #864]	; 0x360
   16c30:	ldr	r7, [sp, #824]	; 0x338
   16c34:	ldr	r8, [sp, #868]	; 0x364
   16c38:	ldr	r9, [sp, #828]	; 0x33c
   16c3c:	str	r9, [sp, #44]	; 0x2c
   16c40:	ldr	r9, [sp, #872]	; 0x368
   16c44:	str	r9, [sp, #84]	; 0x54
   16c48:	cmp	r2, r1
   16c4c:	cmpeq	r0, ip
   16c50:	bne	16c84 <__assert_fail@plt+0x58b4>
   16c54:	ldr	r2, [sp, #32]
   16c58:	cmp	r3, r5
   16c5c:	movne	r3, #0
   16c60:	moveq	r3, #1
   16c64:	cmp	lr, r2
   16c68:	moveq	r3, #0
   16c6c:	cmp	r3, #0
   16c70:	beq	16c84 <__assert_fail@plt+0x58b4>
   16c74:	ldr	r3, [sp, #44]	; 0x2c
   16c78:	cmp	r7, r8
   16c7c:	cmpeq	r3, r9
   16c80:	beq	17990 <__assert_fail@plt+0x65c0>
   16c84:	ldrb	r3, [sp, #413]	; 0x19d
   16c88:	cmp	r3, #0
   16c8c:	beq	16474 <__assert_fail@plt+0x50a4>
   16c90:	mov	r2, #5
   16c94:	movw	r1, #62944	; 0xf5e0
   16c98:	movt	r1, #1
   16c9c:	mov	r0, #0
   16ca0:	bl	11130 <dcgettext@plt>
   16ca4:	bl	13270 <__assert_fail@plt+0x1ea0>
   16ca8:	mov	r2, #5
   16cac:	movw	r1, #62980	; 0xf604
   16cb0:	movt	r1, #1
   16cb4:	mov	r0, #0
   16cb8:	bl	11130 <dcgettext@plt>
   16cbc:	mov	r9, r0
   16cc0:	mov	r3, #100	; 0x64
   16cc4:	add	r2, sp, #132	; 0x84
   16cc8:	add	r1, sp, #232	; 0xe8
   16ccc:	add	r0, sp, #808	; 0x328
   16cd0:	bl	132d0 <__assert_fail@plt+0x1f00>
   16cd4:	mov	r1, r0
   16cd8:	mov	r0, r9
   16cdc:	bl	13270 <__assert_fail@plt+0x1ea0>
   16ce0:	mov	r2, #5
   16ce4:	movw	r1, #63012	; 0xf624
   16ce8:	movt	r1, #1
   16cec:	mov	r0, #0
   16cf0:	bl	11130 <dcgettext@plt>
   16cf4:	mov	r9, r0
   16cf8:	mov	r3, #100	; 0x64
   16cfc:	add	r2, sp, #132	; 0x84
   16d00:	add	r1, sp, #232	; 0xe8
   16d04:	add	r0, sp, #852	; 0x354
   16d08:	bl	132d0 <__assert_fail@plt+0x1f00>
   16d0c:	mov	r1, r0
   16d10:	mov	r0, r9
   16d14:	bl	13270 <__assert_fail@plt+0x1ea0>
   16d18:	movw	r2, #64580	; 0xfc44
   16d1c:	movt	r2, #1
   16d20:	movw	r3, #62132	; 0xf2b4
   16d24:	movt	r3, #1
   16d28:	ldr	r1, [sp, #84]	; 0x54
   16d2c:	ldr	r0, [sp, #44]	; 0x2c
   16d30:	cmp	r0, r1
   16d34:	moveq	r9, r2
   16d38:	movne	r9, r3
   16d3c:	movw	r2, #64580	; 0xfc44
   16d40:	movt	r2, #1
   16d44:	movw	r3, #62140	; 0xf2bc
   16d48:	movt	r3, #1
   16d4c:	cmp	r7, r8
   16d50:	moveq	r3, r2
   16d54:	movw	r2, #64580	; 0xfc44
   16d58:	movt	r2, #1
   16d5c:	movw	lr, #62140	; 0xf2bc
   16d60:	movt	lr, #1
   16d64:	ldr	r1, [sp, #40]	; 0x28
   16d68:	cmp	r1, r5
   16d6c:	moveq	lr, r2
   16d70:	mov	r1, r2
   16d74:	movw	r2, #62140	; 0xf2bc
   16d78:	movt	r2, #1
   16d7c:	ldr	r0, [sp, #80]	; 0x50
   16d80:	ldr	ip, [sp, #32]
   16d84:	cmp	r0, ip
   16d88:	movne	r1, r2
   16d8c:	str	r1, [sp, #16]
   16d90:	movw	r0, #64580	; 0xfc44
   16d94:	movt	r0, #1
   16d98:	mov	r1, r2
   16d9c:	ldr	ip, [sp, #72]	; 0x48
   16da0:	ldr	r2, [sp, #76]	; 0x4c
   16da4:	cmp	ip, r2
   16da8:	movne	r0, r1
   16dac:	str	r0, [sp, #20]
   16db0:	movw	r0, #64580	; 0xfc44
   16db4:	movt	r0, #1
   16db8:	mov	ip, r1
   16dbc:	ldr	r2, [sp, #56]	; 0x38
   16dc0:	ldr	r1, [sp, #64]	; 0x40
   16dc4:	cmp	r2, r1
   16dc8:	movne	r0, ip
   16dcc:	str	r0, [sp, #24]
   16dd0:	str	lr, [sp, #12]
   16dd4:	str	r3, [sp, #8]
   16dd8:	str	r9, [sp, #4]
   16ddc:	movw	r3, #63044	; 0xf644
   16de0:	movt	r3, #1
   16de4:	str	r3, [sp]
   16de8:	mov	r3, #100	; 0x64
   16dec:	mov	r2, #1
   16df0:	mov	r1, r3
   16df4:	add	r0, sp, #132	; 0x84
   16df8:	bl	113c4 <__snprintf_chk@plt>
   16dfc:	ldrb	r3, [sp, #183]	; 0xb7
   16e00:	cmp	r3, #32
   16e04:	bne	17100 <__assert_fail@plt+0x5d30>
   16e08:	add	r1, sp, #182	; 0xb6
   16e0c:	mov	r2, #51	; 0x33
   16e10:	mov	r3, r2
   16e14:	cmp	r2, #0
   16e18:	ble	16e2c <__assert_fail@plt+0x5a5c>
   16e1c:	ldrb	r0, [r1], #-1
   16e20:	sub	r2, r2, #1
   16e24:	cmp	r0, #32
   16e28:	beq	16e10 <__assert_fail@plt+0x5a40>
   16e2c:	add	r2, sp, #896	; 0x380
   16e30:	add	r3, r2, r3
   16e34:	mov	r9, #0
   16e38:	strb	r9, [r3, #-764]	; 0xfffffd04
   16e3c:	add	r1, sp, #132	; 0x84
   16e40:	movw	r0, #124	; 0x7c
   16e44:	movt	r0, #2
   16e48:	bl	13270 <__assert_fail@plt+0x1ea0>
   16e4c:	mov	r2, #5
   16e50:	movw	r1, #63104	; 0xf680
   16e54:	movt	r1, #1
   16e58:	mov	r0, r9
   16e5c:	bl	11130 <dcgettext@plt>
   16e60:	bl	13270 <__assert_fail@plt+0x1ea0>
   16e64:	cmp	r6, r9
   16e68:	bne	17108 <__assert_fail@plt+0x5d38>
   16e6c:	ldr	r3, [sp, #40]	; 0x28
   16e70:	cmp	r3, r5
   16e74:	cmpne	r7, r8
   16e78:	bne	17124 <__assert_fail@plt+0x5d54>
   16e7c:	mov	r2, #5
   16e80:	movw	r1, #63220	; 0xf6f4
   16e84:	movt	r1, #1
   16e88:	mov	r0, #0
   16e8c:	bl	11130 <dcgettext@plt>
   16e90:	bl	13270 <__assert_fail@plt+0x1ea0>
   16e94:	ldr	r3, [sp, #48]	; 0x30
   16e98:	cmp	r3, #0
   16e9c:	mov	r2, #5
   16ea0:	movwne	r1, #63256	; 0xf718
   16ea4:	movtne	r1, #1
   16ea8:	movweq	r1, #63276	; 0xf72c
   16eac:	movteq	r1, #1
   16eb0:	mov	r0, #0
   16eb4:	bl	11130 <dcgettext@plt>
   16eb8:	mov	r1, r0
   16ebc:	movw	r0, #63296	; 0xf740
   16ec0:	movt	r0, #1
   16ec4:	bl	13270 <__assert_fail@plt+0x1ea0>
   16ec8:	b	16474 <__assert_fail@plt+0x50a4>
   16ecc:	movw	r0, #62860	; 0xf58c
   16ed0:	movt	r0, #1
   16ed4:	bl	13270 <__assert_fail@plt+0x1ea0>
   16ed8:	b	16b58 <__assert_fail@plt+0x5788>
   16edc:	mov	r3, #88	; 0x58
   16ee0:	strb	r3, [sp, #134]	; 0x86
   16ee4:	strb	r3, [sp, #133]	; 0x85
   16ee8:	strb	r3, [sp, #132]	; 0x84
   16eec:	add	r1, sp, #135	; 0x87
   16ef0:	ldr	r0, [sp, #256]	; 0x100
   16ef4:	bl	13058 <__assert_fail@plt+0x1c88>
   16ef8:	add	r0, sp, #132	; 0x84
   16efc:	bl	1a7b0 <__assert_fail@plt+0x93e0>
   16f00:	subs	r7, r0, #0
   16f04:	beq	170d8 <__assert_fail@plt+0x5d08>
   16f08:	ldr	r3, [sp, #808]	; 0x328
   16f0c:	str	r3, [sp, #852]	; 0x354
   16f10:	ldr	r3, [sp, #812]	; 0x32c
   16f14:	str	r3, [sp, #856]	; 0x358
   16f18:	ldr	r3, [sp, #816]	; 0x330
   16f1c:	str	r3, [sp, #860]	; 0x35c
   16f20:	ldr	r3, [sp, #820]	; 0x334
   16f24:	str	r3, [sp, #864]	; 0x360
   16f28:	ldr	r3, [sp, #824]	; 0x338
   16f2c:	str	r3, [sp, #868]	; 0x364
   16f30:	ldr	r3, [sp, #828]	; 0x33c
   16f34:	str	r3, [sp, #872]	; 0x368
   16f38:	ldr	r3, [sp, #840]	; 0x348
   16f3c:	str	r3, [sp, #884]	; 0x374
   16f40:	mvn	r3, #0
   16f44:	str	r3, [sp, #876]	; 0x36c
   16f48:	add	r1, sp, #852	; 0x354
   16f4c:	mov	r0, r7
   16f50:	bl	1abc0 <__assert_fail@plt+0x97f0>
   16f54:	mov	r5, r0
   16f58:	add	r1, sp, #852	; 0x354
   16f5c:	add	r0, sp, #808	; 0x328
   16f60:	bl	12df8 <__assert_fail@plt+0x1a28>
   16f64:	mov	r8, r0
   16f68:	mov	r0, r7
   16f6c:	bl	1a990 <__assert_fail@plt+0x95c0>
   16f70:	cmp	r8, #0
   16f74:	beq	16bf4 <__assert_fail@plt+0x5824>
   16f78:	ldr	r3, [sp, #392]	; 0x188
   16f7c:	cmp	r3, #0
   16f80:	beq	17330 <__assert_fail@plt+0x5f60>
   16f84:	ldr	r1, [sp, #388]	; 0x184
   16f88:	cmp	r1, #0
   16f8c:	bne	17cc0 <__assert_fail@plt+0x68f0>
   16f90:	ldrd	r2, [sp, #240]	; 0xf0
   16f94:	cmp	r2, #1
   16f98:	sbcs	r0, r3, #0
   16f9c:	blt	16fb0 <__assert_fail@plt+0x5be0>
   16fa0:	ldr	r1, [sp, #876]	; 0x36c
   16fa4:	ldr	r0, [sp, #248]	; 0xf8
   16fa8:	subs	r1, r1, r0
   16fac:	movne	r1, #1
   16fb0:	subs	r6, r2, r1
   16fb4:	sbc	r7, r3, r1, asr #31
   16fb8:	mov	r0, r6
   16fbc:	mov	r1, r7
   16fc0:	strd	r0, [sp, #32]
   16fc4:	mov	ip, #0
   16fc8:	cmp	r7, r6, asr #31
   16fcc:	bne	17140 <__assert_fail@plt+0x5d70>
   16fd0:	mov	r3, #7
   16fd4:	smull	r2, r3, r6, r3
   16fd8:	mov	r0, r2
   16fdc:	mov	r7, r3
   16fe0:	cmp	ip, #0
   16fe4:	bne	17064 <__assert_fail@plt+0x5c94>
   16fe8:	ldr	r3, [sp, #248]	; 0xf8
   16fec:	ldr	r2, [sp, #876]	; 0x36c
   16ff0:	sub	r3, r3, r2
   16ff4:	add	r3, r3, #7
   16ff8:	movw	r2, #9363	; 0x2493
   16ffc:	movt	r2, #37449	; 0x9249
   17000:	smull	r1, r2, r2, r3
   17004:	add	r1, r2, r3
   17008:	asr	r2, r3, #31
   1700c:	rsb	r2, r2, r1, asr #2
   17010:	rsb	r2, r2, r2, lsl #3
   17014:	sub	r3, r3, r2
   17018:	mov	r2, r3
   1701c:	asr	r3, r3, #31
   17020:	adds	r0, r2, r0
   17024:	adcs	r1, r3, r7
   17028:	bvs	17064 <__assert_fail@plt+0x5c94>
   1702c:	ldr	r2, [sp, #864]	; 0x360
   17030:	asr	r3, r2, #31
   17034:	adds	r6, r0, r2
   17038:	adcs	r7, r1, r3
   1703c:	movvs	r1, #1
   17040:	movvc	r1, #0
   17044:	asr	r3, r6, #31
   17048:	cmp	r7, r3
   1704c:	cmpeq	r6, r6
   17050:	str	r6, [sp, #864]	; 0x360
   17054:	moveq	r3, r1
   17058:	movne	r3, #1
   1705c:	cmp	r3, #0
   17060:	beq	171a0 <__assert_fail@plt+0x5dd0>
   17064:	ldrb	r3, [sp, #413]	; 0x19d
   17068:	cmp	r3, #0
   1706c:	beq	16474 <__assert_fail@plt+0x50a4>
   17070:	mov	r2, #5
   17074:	movw	r1, #63308	; 0xf74c
   17078:	movt	r1, #1
   1707c:	mov	r0, #0
   17080:	bl	11130 <dcgettext@plt>
   17084:	mov	r5, r0
   17088:	mov	r2, #100	; 0x64
   1708c:	add	r1, sp, #132	; 0x84
   17090:	add	r0, sp, #232	; 0xe8
   17094:	bl	12f38 <__assert_fail@plt+0x1b68>
   17098:	mov	r8, r0
   1709c:	ldrd	r6, [sp, #240]	; 0xf0
   170a0:	ldr	r9, [sp, #248]	; 0xf8
   170a4:	mov	r3, #100	; 0x64
   170a8:	add	r2, sp, #680	; 0x2a8
   170ac:	add	r1, sp, #232	; 0xe8
   170b0:	add	r0, sp, #852	; 0x354
   170b4:	bl	132d0 <__assert_fail@plt+0x1f00>
   170b8:	str	r0, [sp, #4]
   170bc:	str	r9, [sp]
   170c0:	mov	r2, r6
   170c4:	mov	r3, r7
   170c8:	mov	r1, r8
   170cc:	mov	r0, r5
   170d0:	bl	13270 <__assert_fail@plt+0x1ea0>
   170d4:	b	16474 <__assert_fail@plt+0x50a4>
   170d8:	ldrb	r3, [sp, #413]	; 0x19d
   170dc:	cmp	r3, #0
   170e0:	beq	16474 <__assert_fail@plt+0x50a4>
   170e4:	mov	r2, #5
   170e8:	movw	r1, #62912	; 0xf5c0
   170ec:	movt	r1, #1
   170f0:	bl	11130 <dcgettext@plt>
   170f4:	add	r1, sp, #132	; 0x84
   170f8:	bl	13270 <__assert_fail@plt+0x1ea0>
   170fc:	b	16474 <__assert_fail@plt+0x50a4>
   17100:	mov	r3, #52	; 0x34
   17104:	b	16e2c <__assert_fail@plt+0x5a5c>
   17108:	mov	r2, #5
   1710c:	movw	r1, #63128	; 0xf698
   17110:	movt	r1, #1
   17114:	mov	r0, r9
   17118:	bl	11130 <dcgettext@plt>
   1711c:	bl	13270 <__assert_fail@plt+0x1ea0>
   17120:	b	16e6c <__assert_fail@plt+0x5a9c>
   17124:	mov	r2, #5
   17128:	movw	r1, #63180	; 0xf6cc
   1712c:	movt	r1, #1
   17130:	mov	r0, #0
   17134:	bl	11130 <dcgettext@plt>
   17138:	bl	13270 <__assert_fail@plt+0x1ea0>
   1713c:	b	16e7c <__assert_fail@plt+0x5aac>
   17140:	mov	r5, #7
   17144:	ldrd	r2, [sp, #32]
   17148:	umull	r0, r1, r2, r5
   1714c:	umull	r6, r7, r5, r3
   17150:	cmp	r3, #0
   17154:	bge	17164 <__assert_fail@plt+0x5d94>
   17158:	mov	lr, #0
   1715c:	subs	r6, r6, lr
   17160:	sbc	r7, r7, r5
   17164:	mov	r5, #0
   17168:	adds	lr, r6, r1
   1716c:	adc	r5, r7, r5
   17170:	cmp	r5, lr, asr #31
   17174:	bne	17180 <__assert_fail@plt+0x5db0>
   17178:	mov	r3, lr
   1717c:	b	16fdc <__assert_fail@plt+0x5c0c>
   17180:	ldrd	r2, [sp, #32]
   17184:	lsl	ip, r3, #3
   17188:	lsl	r0, r2, #3
   1718c:	orr	r1, ip, r2, lsr #29
   17190:	subs	r0, r0, r2
   17194:	sbc	r3, r1, r3
   17198:	mov	ip, #1
   1719c:	b	16fdc <__assert_fail@plt+0x5c0c>
   171a0:	mvn	r3, #0
   171a4:	str	r3, [sp, #884]	; 0x374
   171a8:	add	r1, sp, #852	; 0x354
   171ac:	mov	r0, sl
   171b0:	bl	1abc0 <__assert_fail@plt+0x97f0>
   171b4:	mov	r5, r0
   171b8:	cmn	r0, #1
   171bc:	beq	17064 <__assert_fail@plt+0x5c94>
   171c0:	ldrb	r3, [sp, #413]	; 0x19d
   171c4:	cmp	r3, #0
   171c8:	bne	172e0 <__assert_fail@plt+0x5f10>
   171cc:	add	r1, sp, #240	; 0xf0
   171d0:	ldrd	r2, [r1, #88]	; 0x58
   171d4:	ldr	lr, [sp, #336]	; 0x150
   171d8:	ldr	ip, [sp, #340]	; 0x154
   171dc:	orr	lr, r2, lr
   171e0:	orr	ip, r3, ip
   171e4:	ldr	r7, [sp, #344]	; 0x158
   171e8:	ldr	r6, [sp, #348]	; 0x15c
   171ec:	orr	r0, lr, r7
   171f0:	orr	r1, ip, r6
   171f4:	orrs	r1, r0, r1
   171f8:	beq	17d40 <__assert_fail@plt+0x6970>
   171fc:	ldr	r0, [sp, #872]	; 0x368
   17200:	asr	r1, r0, #31
   17204:	adds	r6, r0, r2
   17208:	adcs	r7, r1, r3
   1720c:	movvs	r1, #1
   17210:	movvc	r1, #0
   17214:	asr	r3, r6, #31
   17218:	cmp	r7, r3
   1721c:	cmpeq	r6, r6
   17220:	moveq	r3, r1
   17224:	movne	r3, #1
   17228:	cmp	r3, #0
   1722c:	bne	16474 <__assert_fail@plt+0x50a4>
   17230:	ldr	r0, [sp, #868]	; 0x364
   17234:	asr	r1, r0, #31
   17238:	add	r3, sp, #240	; 0xf0
   1723c:	ldrd	r8, [r3, #96]	; 0x60
   17240:	adds	r2, r0, r8
   17244:	adcs	r3, r1, r9
   17248:	movvs	ip, #1
   1724c:	movvc	ip, #0
   17250:	asr	r1, r2, #31
   17254:	cmp	r3, r1
   17258:	cmpeq	r2, r2
   1725c:	mov	lr, r2
   17260:	movne	ip, #1
   17264:	cmp	ip, #0
   17268:	bne	16474 <__assert_fail@plt+0x50a4>
   1726c:	ldr	r0, [sp, #864]	; 0x360
   17270:	asr	r1, r0, #31
   17274:	add	r3, sp, #240	; 0xf0
   17278:	ldrd	r2, [r3, #104]	; 0x68
   1727c:	adds	r8, r0, r2
   17280:	adcs	r9, r1, r3
   17284:	strd	r8, [sp, #32]
   17288:	movvs	r1, #1
   1728c:	movvc	r1, #0
   17290:	asr	r3, r8, #31
   17294:	cmp	r9, r3
   17298:	cmpeq	r8, r8
   1729c:	moveq	r3, r1
   172a0:	movne	r3, #1
   172a4:	cmp	r3, #0
   172a8:	beq	174fc <__assert_fail@plt+0x612c>
   172ac:	ldrb	r3, [sp, #413]	; 0x19d
   172b0:	cmp	r3, #0
   172b4:	beq	16474 <__assert_fail@plt+0x50a4>
   172b8:	mov	r2, #5
   172bc:	movw	r1, #63748	; 0xf904
   172c0:	movt	r1, #1
   172c4:	mov	r0, #0
   172c8:	bl	11130 <dcgettext@plt>
   172cc:	movw	r2, #2149	; 0x865
   172d0:	movw	r1, #63764	; 0xf914
   172d4:	movt	r1, #1
   172d8:	bl	13270 <__assert_fail@plt+0x1ea0>
   172dc:	b	16474 <__assert_fail@plt+0x50a4>
   172e0:	mov	r2, #5
   172e4:	movw	r1, #63388	; 0xf79c
   172e8:	movt	r1, #1
   172ec:	mov	r0, #0
   172f0:	bl	11130 <dcgettext@plt>
   172f4:	mov	r6, r0
   172f8:	mov	r2, #100	; 0x64
   172fc:	add	r1, sp, #132	; 0x84
   17300:	add	r0, sp, #232	; 0xe8
   17304:	bl	12f38 <__assert_fail@plt+0x1b68>
   17308:	mov	r7, r0
   1730c:	mov	r3, #100	; 0x64
   17310:	add	r2, sp, #680	; 0x2a8
   17314:	add	r1, sp, #232	; 0xe8
   17318:	add	r0, sp, #852	; 0x354
   1731c:	bl	132d0 <__assert_fail@plt+0x1f00>
   17320:	mov	r2, r0
   17324:	mov	r1, r7
   17328:	mov	r0, r6
   1732c:	bl	13270 <__assert_fail@plt+0x1ea0>
   17330:	ldrb	r3, [sp, #413]	; 0x19d
   17334:	cmp	r3, #0
   17338:	beq	171cc <__assert_fail@plt+0x5dfc>
   1733c:	ldr	r3, [sp, #388]	; 0x184
   17340:	cmp	r3, #0
   17344:	bne	17ccc <__assert_fail@plt+0x68fc>
   17348:	ldr	r3, [sp, #392]	; 0x188
   1734c:	cmp	r3, #0
   17350:	bne	17cd8 <__assert_fail@plt+0x6908>
   17354:	mov	r2, #5
   17358:	movw	r1, #63420	; 0xf7bc
   1735c:	movt	r1, #1
   17360:	mov	r0, #0
   17364:	bl	11130 <dcgettext@plt>
   17368:	mov	r6, r0
   1736c:	add	r1, sp, #88	; 0x58
   17370:	ldr	r0, [sp, #872]	; 0x368
   17374:	bl	131a0 <__assert_fail@plt+0x1dd0>
   17378:	ldr	r3, [sp, #864]	; 0x360
   1737c:	str	r3, [sp, #12]
   17380:	ldr	r3, [sp, #868]	; 0x364
   17384:	add	r3, r3, #1
   17388:	str	r3, [sp, #8]
   1738c:	str	r0, [sp, #4]
   17390:	movw	r3, #63464	; 0xf7e8
   17394:	movt	r3, #1
   17398:	str	r3, [sp]
   1739c:	mov	r3, #100	; 0x64
   173a0:	mov	r2, #1
   173a4:	mov	r1, r3
   173a8:	add	r0, sp, #680	; 0x2a8
   173ac:	bl	113c4 <__snprintf_chk@plt>
   173b0:	add	r1, sp, #680	; 0x2a8
   173b4:	mov	r0, r6
   173b8:	bl	13270 <__assert_fail@plt+0x1ea0>
   173bc:	ldr	r3, [sp, #392]	; 0x188
   173c0:	cmp	r3, #0
   173c4:	beq	17cd8 <__assert_fail@plt+0x6908>
   173c8:	ldr	r3, [sp, #388]	; 0x184
   173cc:	cmp	r3, #0
   173d0:	beq	17cd8 <__assert_fail@plt+0x6908>
   173d4:	mov	r2, #5
   173d8:	movw	r1, #63488	; 0xf800
   173dc:	movt	r1, #1
   173e0:	mov	r0, #0
   173e4:	bl	11130 <dcgettext@plt>
   173e8:	mov	r6, r0
   173ec:	mov	r2, #100	; 0x64
   173f0:	add	r1, sp, #132	; 0x84
   173f4:	add	r0, sp, #232	; 0xe8
   173f8:	bl	12f38 <__assert_fail@plt+0x1b68>
   173fc:	mov	r1, r0
   17400:	mov	r0, r6
   17404:	bl	13270 <__assert_fail@plt+0x1ea0>
   17408:	b	17cd8 <__assert_fail@plt+0x6908>
   1740c:	ldrb	ip, [sp, #413]	; 0x19d
   17410:	cmp	ip, #0
   17414:	beq	171fc <__assert_fail@plt+0x5e2c>
   17418:	orrs	r3, r0, r1
   1741c:	beq	174d4 <__assert_fail@plt+0x6104>
   17420:	ldr	r3, [sp, #864]	; 0x360
   17424:	cmp	r3, #15
   17428:	bne	174b8 <__assert_fail@plt+0x60e8>
   1742c:	add	r3, sp, #240	; 0xf0
   17430:	ldrd	r2, [r3, #104]	; 0x68
   17434:	orrs	r3, r2, r3
   17438:	bne	174d4 <__assert_fail@plt+0x6104>
   1743c:	ldr	r2, [sp, #872]	; 0x368
   17440:	asr	r3, r2, #31
   17444:	add	r1, sp, #240	; 0xf0
   17448:	ldrd	r0, [r1, #88]	; 0x58
   1744c:	adds	r6, r2, r0
   17450:	adcs	r7, r3, r1
   17454:	movvs	r1, #1
   17458:	movvc	r1, #0
   1745c:	asr	r3, r6, #31
   17460:	cmp	r7, r3
   17464:	cmpeq	r6, r6
   17468:	moveq	r3, r1
   1746c:	movne	r3, #1
   17470:	cmp	r3, #0
   17474:	bne	172ac <__assert_fail@plt+0x5edc>
   17478:	ldr	r0, [sp, #868]	; 0x364
   1747c:	asr	r1, r0, #31
   17480:	add	r3, sp, #240	; 0xf0
   17484:	ldrd	r8, [r3, #96]	; 0x60
   17488:	adds	r2, r0, r8
   1748c:	adcs	r3, r1, r9
   17490:	movvs	ip, #1
   17494:	movvc	ip, #0
   17498:	asr	r1, r2, #31
   1749c:	cmp	r3, r1
   174a0:	cmpeq	r2, r2
   174a4:	mov	lr, r2
   174a8:	movne	ip, #1
   174ac:	cmp	ip, #0
   174b0:	beq	1726c <__assert_fail@plt+0x5e9c>
   174b4:	b	172ac <__assert_fail@plt+0x5edc>
   174b8:	mov	r2, #5
   174bc:	movw	r1, #63576	; 0xf858
   174c0:	movt	r1, #1
   174c4:	mov	r0, #0
   174c8:	bl	11130 <dcgettext@plt>
   174cc:	bl	13270 <__assert_fail@plt+0x1ea0>
   174d0:	b	1742c <__assert_fail@plt+0x605c>
   174d4:	ldr	r3, [sp, #860]	; 0x35c
   174d8:	cmp	r3, #12
   174dc:	beq	1743c <__assert_fail@plt+0x606c>
   174e0:	mov	r2, #5
   174e4:	movw	r1, #63676	; 0xf8bc
   174e8:	movt	r1, #1
   174ec:	mov	r0, #0
   174f0:	bl	11130 <dcgettext@plt>
   174f4:	bl	13270 <__assert_fail@plt+0x1ea0>
   174f8:	b	1743c <__assert_fail@plt+0x606c>
   174fc:	mov	r7, lr
   17500:	str	r6, [sp, #872]	; 0x368
   17504:	str	lr, [sp, #868]	; 0x364
   17508:	ldr	r3, [sp, #32]
   1750c:	str	r3, [sp, #864]	; 0x360
   17510:	ldr	r3, [sp, #816]	; 0x330
   17514:	str	r3, [sp, #860]	; 0x35c
   17518:	ldr	r3, [sp, #812]	; 0x32c
   1751c:	str	r3, [sp, #856]	; 0x358
   17520:	ldr	r3, [sp, #808]	; 0x328
   17524:	str	r3, [sp, #852]	; 0x354
   17528:	ldr	r3, [sp, #840]	; 0x348
   1752c:	str	r3, [sp, #884]	; 0x374
   17530:	add	r1, sp, #852	; 0x354
   17534:	mov	r0, sl
   17538:	bl	1abc0 <__assert_fail@plt+0x97f0>
   1753c:	mov	r5, r0
   17540:	cmn	r0, #1
   17544:	beq	17594 <__assert_fail@plt+0x61c4>
   17548:	ldrb	r3, [sp, #413]	; 0x19d
   1754c:	cmp	r3, #0
   17550:	bne	175dc <__assert_fail@plt+0x620c>
   17554:	ldr	r3, [sp, #408]	; 0x198
   17558:	cmp	r3, #0
   1755c:	beq	17d58 <__assert_fail@plt+0x6988>
   17560:	ldr	r2, [sp, #888]	; 0x378
   17564:	asr	r7, r2, #31
   17568:	ldr	r1, [sp, #256]	; 0x100
   1756c:	subs	r2, r1, r2
   17570:	rsc	r3, r7, r1, asr #31
   17574:	subs	r6, r0, r2
   17578:	rsc	r7, r3, r0, asr #31
   1757c:	asr	r1, r6, #31
   17580:	mov	r5, r6
   17584:	cmp	r7, r1
   17588:	cmpeq	r6, r6
   1758c:	beq	17d4c <__assert_fail@plt+0x697c>
   17590:	b	16474 <__assert_fail@plt+0x50a4>
   17594:	ldrb	r3, [sp, #413]	; 0x19d
   17598:	cmp	r3, #0
   1759c:	beq	16474 <__assert_fail@plt+0x50a4>
   175a0:	mov	r2, #5
   175a4:	movw	r1, #63784	; 0xf928
   175a8:	movt	r1, #1
   175ac:	mov	r0, #0
   175b0:	bl	11130 <dcgettext@plt>
   175b4:	mov	r5, r0
   175b8:	mov	r3, #100	; 0x64
   175bc:	add	r2, sp, #680	; 0x2a8
   175c0:	add	r1, sp, #232	; 0xe8
   175c4:	add	r0, sp, #852	; 0x354
   175c8:	bl	132d0 <__assert_fail@plt+0x1f00>
   175cc:	mov	r1, r0
   175d0:	mov	r0, r5
   175d4:	bl	13270 <__assert_fail@plt+0x1ea0>
   175d8:	b	16474 <__assert_fail@plt+0x50a4>
   175dc:	mov	r2, #5
   175e0:	movw	r1, #63848	; 0xf968
   175e4:	movt	r1, #1
   175e8:	mov	r0, #0
   175ec:	bl	11130 <dcgettext@plt>
   175f0:	add	r1, sp, #240	; 0xf0
   175f4:	ldrd	r2, [r1, #104]	; 0x68
   175f8:	strd	r2, [sp, #8]
   175fc:	ldrd	r2, [r1, #96]	; 0x60
   17600:	strd	r2, [sp]
   17604:	ldrd	r2, [r1, #88]	; 0x58
   17608:	bl	13270 <__assert_fail@plt+0x1ea0>
   1760c:	mov	r2, #5
   17610:	movw	r1, #63912	; 0xf9a8
   17614:	movt	r1, #1
   17618:	mov	r0, #0
   1761c:	bl	11130 <dcgettext@plt>
   17620:	mov	r8, r0
   17624:	mov	r3, #100	; 0x64
   17628:	add	r2, sp, #680	; 0x2a8
   1762c:	add	r1, sp, #232	; 0xe8
   17630:	add	r0, sp, #852	; 0x354
   17634:	bl	132d0 <__assert_fail@plt+0x1f00>
   17638:	mov	r1, r0
   1763c:	mov	r0, r8
   17640:	bl	13270 <__assert_fail@plt+0x1ea0>
   17644:	ldr	r3, [sp, #840]	; 0x348
   17648:	cmn	r3, #1
   1764c:	beq	1765c <__assert_fail@plt+0x628c>
   17650:	ldr	r2, [sp, #884]	; 0x374
   17654:	cmp	r3, r2
   17658:	bne	17728 <__assert_fail@plt+0x6358>
   1765c:	add	r3, sp, #240	; 0xf0
   17660:	ldrd	r2, [r3, #104]	; 0x68
   17664:	orrs	r3, r2, r3
   17668:	bne	17d40 <__assert_fail@plt+0x6970>
   1766c:	ldr	r3, [sp, #864]	; 0x360
   17670:	ldr	r2, [sp, #32]
   17674:	cmp	r2, r3
   17678:	bne	17698 <__assert_fail@plt+0x62c8>
   1767c:	add	r3, sp, #240	; 0xf0
   17680:	ldrd	r2, [r3, #96]	; 0x60
   17684:	orrs	r3, r2, r3
   17688:	bne	17d40 <__assert_fail@plt+0x6970>
   1768c:	ldr	r3, [sp, #868]	; 0x364
   17690:	cmp	r7, r3
   17694:	beq	17d40 <__assert_fail@plt+0x6970>
   17698:	mov	r2, #5
   1769c:	movw	r1, #64004	; 0xfa04
   176a0:	movt	r1, #1
   176a4:	mov	r0, #0
   176a8:	bl	11130 <dcgettext@plt>
   176ac:	bl	13270 <__assert_fail@plt+0x1ea0>
   176b0:	mov	r2, #5
   176b4:	movw	r1, #64064	; 0xfa40
   176b8:	movt	r1, #1
   176bc:	mov	r0, #0
   176c0:	bl	11130 <dcgettext@plt>
   176c4:	mov	r9, r0
   176c8:	add	r1, sp, #88	; 0x58
   176cc:	mov	r0, r6
   176d0:	bl	131a0 <__assert_fail@plt+0x1dd0>
   176d4:	ldr	r3, [sp, #32]
   176d8:	add	r2, r7, #1
   176dc:	mov	r1, r0
   176e0:	mov	r0, r9
   176e4:	bl	13270 <__assert_fail@plt+0x1ea0>
   176e8:	mov	r2, #5
   176ec:	movw	r1, #64100	; 0xfa64
   176f0:	movt	r1, #1
   176f4:	mov	r0, #0
   176f8:	bl	11130 <dcgettext@plt>
   176fc:	mov	r6, r0
   17700:	add	r1, sp, #88	; 0x58
   17704:	ldr	r0, [sp, #872]	; 0x368
   17708:	bl	131a0 <__assert_fail@plt+0x1dd0>
   1770c:	ldr	r3, [sp, #864]	; 0x360
   17710:	ldr	r2, [sp, #868]	; 0x364
   17714:	add	r2, r2, #1
   17718:	mov	r1, r0
   1771c:	mov	r0, r6
   17720:	bl	13270 <__assert_fail@plt+0x1ea0>
   17724:	b	17d40 <__assert_fail@plt+0x6970>
   17728:	mov	r2, #5
   1772c:	movw	r1, #63940	; 0xf9c4
   17730:	movt	r1, #1
   17734:	mov	r0, #0
   17738:	bl	11130 <dcgettext@plt>
   1773c:	bl	13270 <__assert_fail@plt+0x1ea0>
   17740:	b	1765c <__assert_fail@plt+0x628c>
   17744:	ldr	r2, [sp, #888]	; 0x378
   17748:	asr	r7, r2, #31
   1774c:	ldr	r1, [sp, #256]	; 0x100
   17750:	subs	r2, r1, r2
   17754:	rsc	r3, r7, r1, asr #31
   17758:	subs	r6, r5, r2
   1775c:	rsc	r7, r3, r5, asr #31
   17760:	asr	r1, r6, #31
   17764:	mov	r5, r6
   17768:	cmp	r7, r1
   1776c:	cmpeq	r6, r6
   17770:	beq	17d4c <__assert_fail@plt+0x697c>
   17774:	ldrb	r3, [sp, #413]	; 0x19d
   17778:	cmp	r3, #0
   1777c:	beq	16474 <__assert_fail@plt+0x50a4>
   17780:	mov	r2, #5
   17784:	movw	r1, #64136	; 0xfa88
   17788:	movt	r1, #1
   1778c:	mov	r0, #0
   17790:	bl	11130 <dcgettext@plt>
   17794:	ldr	r1, [sp, #256]	; 0x100
   17798:	bl	13270 <__assert_fail@plt+0x1ea0>
   1779c:	b	16474 <__assert_fail@plt+0x50a4>
   177a0:	mov	r2, #5
   177a4:	movw	r1, #64180	; 0xfab4
   177a8:	movt	r1, #1
   177ac:	mov	r0, #0
   177b0:	bl	11130 <dcgettext@plt>
   177b4:	mov	r6, r0
   177b8:	mov	r3, #100	; 0x64
   177bc:	add	r2, sp, #680	; 0x2a8
   177c0:	add	r1, sp, #232	; 0xe8
   177c4:	add	r0, sp, #852	; 0x354
   177c8:	bl	132d0 <__assert_fail@plt+0x1f00>
   177cc:	mov	r2, r5
   177d0:	asr	r3, r5, #31
   177d4:	mov	r1, r0
   177d8:	mov	r0, r6
   177dc:	bl	13270 <__assert_fail@plt+0x1ea0>
   177e0:	ldr	r8, [sp, #352]	; 0x160
   177e4:	ldr	r9, [sp, #356]	; 0x164
   177e8:	mov	ip, #0
   177ec:	cmp	r9, r8, asr #31
   177f0:	bne	1783c <__assert_fail@plt+0x646c>
   177f4:	mov	r2, #3600	; 0xe10
   177f8:	smull	r2, r3, r8, r2
   177fc:	mov	r1, r2
   17800:	mov	r0, r3
   17804:	mov	r2, r1
   17808:	mov	r3, r0
   1780c:	cmp	ip, #0
   17810:	beq	17d8c <__assert_fail@plt+0x69bc>
   17814:	ldrb	r3, [sp, #413]	; 0x19d
   17818:	cmp	r3, #0
   1781c:	beq	16474 <__assert_fail@plt+0x50a4>
   17820:	mov	r2, #5
   17824:	movw	r1, #64208	; 0xfad0
   17828:	movt	r1, #1
   1782c:	mov	r0, #0
   17830:	bl	11130 <dcgettext@plt>
   17834:	bl	13270 <__assert_fail@plt+0x1ea0>
   17838:	b	16474 <__assert_fail@plt+0x50a4>
   1783c:	mov	r6, #3600	; 0xe10
   17840:	umull	r2, r3, r8, r6
   17844:	umull	r0, r1, r6, r9
   17848:	strd	r0, [sp, #32]
   1784c:	cmp	r9, #0
   17850:	bge	1786c <__assert_fail@plt+0x649c>
   17854:	mov	lr, #0
   17858:	subs	r1, r0, lr
   1785c:	str	r1, [sp, #32]
   17860:	ldr	r1, [sp, #36]	; 0x24
   17864:	sbc	r1, r1, r6
   17868:	str	r1, [sp, #36]	; 0x24
   1786c:	mov	lr, #0
   17870:	ldr	r1, [sp, #32]
   17874:	adds	r0, r1, r3
   17878:	ldr	r1, [sp, #36]	; 0x24
   1787c:	adc	r1, r1, lr
   17880:	cmp	r1, r0, asr #31
   17884:	bne	17890 <__assert_fail@plt+0x64c0>
   17888:	mov	r1, r2
   1788c:	b	17804 <__assert_fail@plt+0x6434>
   17890:	lsl	r1, r9, #3
   17894:	lsl	r3, r8, #3
   17898:	orr	r2, r1, r8, lsr #29
   1789c:	subs	r3, r3, r8
   178a0:	sbc	r2, r2, r9
   178a4:	lsl	r1, r2, #5
   178a8:	orr	r1, r1, r3, lsr #27
   178ac:	lsl	r0, r3, #5
   178b0:	adds	r3, r0, r8
   178b4:	adc	r2, r1, r9
   178b8:	lsl	r0, r2, #4
   178bc:	orr	r0, r0, r3, lsr #28
   178c0:	lsl	r1, r3, #4
   178c4:	mov	ip, #1
   178c8:	b	17804 <__assert_fail@plt+0x6434>
   178cc:	mov	r2, #60	; 0x3c
   178d0:	ldr	r3, [sp, #32]
   178d4:	umull	r0, r1, r3, r2
   178d8:	mov	r6, r0
   178dc:	mov	r7, r1
   178e0:	ldr	r3, [sp, #44]	; 0x2c
   178e4:	umull	r0, r1, r2, r3
   178e8:	cmp	r3, #0
   178ec:	bge	178fc <__assert_fail@plt+0x652c>
   178f0:	mov	r3, #0
   178f4:	subs	r0, r0, r3
   178f8:	sbc	r1, r1, r2
   178fc:	mov	r2, #0
   17900:	adds	r3, r0, r7
   17904:	adc	r2, r1, r2
   17908:	cmp	r2, r3, asr #31
   1790c:	bne	1791c <__assert_fail@plt+0x654c>
   17910:	mov	r1, r6
   17914:	mov	r0, r3
   17918:	b	17dcc <__assert_fail@plt+0x69fc>
   1791c:	ldr	ip, [sp, #44]	; 0x2c
   17920:	lsl	r3, ip, #4
   17924:	ldr	r0, [sp, #32]
   17928:	lsl	r1, r0, #4
   1792c:	orr	r2, r3, r0, lsr #28
   17930:	subs	r1, r1, r0
   17934:	sbc	r2, r2, ip
   17938:	lsl	r3, r2, #2
   1793c:	orr	r3, r3, r1, lsr #30
   17940:	lsl	r0, r1, #2
   17944:	mov	r1, r0
   17948:	mov	r0, r3
   1794c:	mov	ip, #1
   17950:	b	17dcc <__assert_fail@plt+0x69fc>
   17954:	mov	r2, #5
   17958:	movw	r1, #64432	; 0xfbb0
   1795c:	movt	r1, #1
   17960:	mov	r0, #0
   17964:	bl	11130 <dcgettext@plt>
   17968:	bl	13270 <__assert_fail@plt+0x1ea0>
   1796c:	b	16340 <__assert_fail@plt+0x4f70>
   17970:	mov	r2, #5
   17974:	movw	r1, #64488	; 0xfbe8
   17978:	movt	r1, #1
   1797c:	mov	r0, #0
   17980:	bl	11130 <dcgettext@plt>
   17984:	ldr	r1, [sp, #940]	; 0x3ac
   17988:	bl	13270 <__assert_fail@plt+0x1ea0>
   1798c:	b	16340 <__assert_fail@plt+0x4f70>
   17990:	ldrb	r6, [sp, #413]	; 0x19d
   17994:	cmp	r6, #0
   17998:	beq	16474 <__assert_fail@plt+0x50a4>
   1799c:	mov	r2, #5
   179a0:	movw	r1, #62944	; 0xf5e0
   179a4:	movt	r1, #1
   179a8:	mov	r0, #0
   179ac:	bl	11130 <dcgettext@plt>
   179b0:	bl	13270 <__assert_fail@plt+0x1ea0>
   179b4:	mov	r2, #5
   179b8:	movw	r1, #62980	; 0xf604
   179bc:	movt	r1, #1
   179c0:	mov	r0, #0
   179c4:	bl	11130 <dcgettext@plt>
   179c8:	mov	r9, r0
   179cc:	mov	r3, #100	; 0x64
   179d0:	add	r2, sp, #132	; 0x84
   179d4:	add	r1, sp, #232	; 0xe8
   179d8:	add	r0, sp, #808	; 0x328
   179dc:	bl	132d0 <__assert_fail@plt+0x1f00>
   179e0:	mov	r1, r0
   179e4:	mov	r0, r9
   179e8:	bl	13270 <__assert_fail@plt+0x1ea0>
   179ec:	mov	r2, #5
   179f0:	movw	r1, #63012	; 0xf624
   179f4:	movt	r1, #1
   179f8:	mov	r0, #0
   179fc:	bl	11130 <dcgettext@plt>
   17a00:	mov	r9, r0
   17a04:	mov	r3, #100	; 0x64
   17a08:	add	r2, sp, #132	; 0x84
   17a0c:	add	r1, sp, #232	; 0xe8
   17a10:	add	r0, sp, #852	; 0x354
   17a14:	bl	132d0 <__assert_fail@plt+0x1f00>
   17a18:	mov	r1, r0
   17a1c:	mov	r0, r9
   17a20:	bl	13270 <__assert_fail@plt+0x1ea0>
   17a24:	movw	r9, #64580	; 0xfc44
   17a28:	movt	r9, #1
   17a2c:	mov	r3, r9
   17a30:	b	16d54 <__assert_fail@plt+0x5984>
   17a34:	mvn	r3, #0
   17a38:	str	r3, [sp, #860]	; 0x35c
   17a3c:	cmp	r0, #0
   17a40:	movweq	r5, #62128	; 0xf2b0
   17a44:	movteq	r5, #1
   17a48:	beq	16abc <__assert_fail@plt+0x56ec>
   17a4c:	movw	r5, #61776	; 0xf150
   17a50:	movt	r5, #1
   17a54:	movw	r3, #64580	; 0xfc44
   17a58:	movt	r3, #1
   17a5c:	cmp	r0, #1
   17a60:	movne	r5, r3
   17a64:	b	16abc <__assert_fail@plt+0x56ec>
   17a68:	mov	r3, #0
   17a6c:	str	r3, [sp, #852]	; 0x354
   17a70:	str	r3, [sp, #856]	; 0x358
   17a74:	str	r3, [sp, #860]	; 0x35c
   17a78:	str	r3, [sp, #324]	; 0x144
   17a7c:	ldrb	r3, [sp, #413]	; 0x19d
   17a80:	cmp	r3, #0
   17a84:	bne	16ecc <__assert_fail@plt+0x5afc>
   17a88:	mvn	r3, #0
   17a8c:	str	r3, [sp, #884]	; 0x374
   17a90:	b	16b70 <__assert_fail@plt+0x57a0>
   17a94:	adds	r9, r6, #2000	; 0x7d0
   17a98:	adc	r8, r7, #0
   17a9c:	cmp	r5, #0
   17aa0:	bne	169b0 <__assert_fail@plt+0x55e0>
   17aa4:	mov	r6, r9
   17aa8:	mov	r7, r8
   17aac:	b	167d8 <__assert_fail@plt+0x5408>
   17ab0:	add	r2, sp, #468	; 0x1d4
   17ab4:	mov	r1, r7
   17ab8:	ldr	r0, [sp, #936]	; 0x3a8
   17abc:	bl	1ab14 <__assert_fail@plt+0x9744>
   17ac0:	subs	fp, r0, #0
   17ac4:	moveq	r4, #0
   17ac8:	beq	16488 <__assert_fail@plt+0x50b8>
   17acc:	ldr	sl, [sp, #936]	; 0x3a8
   17ad0:	mov	fp, #0
   17ad4:	ldrb	r2, [r4]
   17ad8:	movw	r3, #62124	; 0xf2ac
   17adc:	movt	r3, #1
   17ae0:	cmp	r2, #0
   17ae4:	moveq	r4, r3
   17ae8:	str	r4, [sp, #232]	; 0xe8
   17aec:	and	r9, r9, #1
   17af0:	strb	r9, [sp, #413]	; 0x19d
   17af4:	add	r2, sp, #240	; 0xf0
   17af8:	ldr	r3, [sp, #488]	; 0x1e8
   17afc:	movw	r4, #1900	; 0x76c
   17b00:	mov	r5, #0
   17b04:	adds	r0, r4, r3
   17b08:	adc	r1, r5, r3, asr #31
   17b0c:	strd	r0, [r2, #32]
   17b10:	mov	r3, #0
   17b14:	str	r3, [sp, #280]	; 0x118
   17b18:	ldr	r0, [sp, #484]	; 0x1e4
   17b1c:	add	r0, r0, #1
   17b20:	asr	r1, r0, #31
   17b24:	strd	r0, [r2, #48]	; 0x30
   17b28:	ldr	r0, [sp, #480]	; 0x1e0
   17b2c:	asr	r1, r0, #31
   17b30:	strd	r0, [r2, #56]	; 0x38
   17b34:	ldr	r0, [sp, #476]	; 0x1dc
   17b38:	asr	r1, r0, #31
   17b3c:	strd	r0, [r2, #64]	; 0x40
   17b40:	ldr	r0, [sp, #472]	; 0x1d8
   17b44:	asr	r1, r0, #31
   17b48:	strd	r0, [r2, #72]	; 0x48
   17b4c:	ldr	r2, [sp, #468]	; 0x1d4
   17b50:	str	r2, [sp, #320]	; 0x140
   17b54:	str	r8, [sp, #324]	; 0x144
   17b58:	ldr	lr, [sp, #500]	; 0x1f4
   17b5c:	str	lr, [sp, #884]	; 0x374
   17b60:	mov	r2, #2
   17b64:	str	r2, [sp, #260]	; 0x104
   17b68:	add	r2, sp, #328	; 0x148
   17b6c:	add	ip, sp, #512	; 0x200
   17b70:	ldrd	r0, [ip]
   17b74:	strd	r0, [r2]
   17b78:	ldrd	r0, [ip, #8]
   17b7c:	strd	r0, [r2, #8]
   17b80:	ldrd	r0, [ip, #16]
   17b84:	strd	r0, [r2, #16]
   17b88:	ldrd	r0, [ip, #24]
   17b8c:	strd	r0, [r2, #24]
   17b90:	ldrd	r0, [ip, #32]
   17b94:	strd	r0, [r2, #32]
   17b98:	ldrd	r0, [ip, #40]	; 0x28
   17b9c:	strd	r0, [r2, #40]	; 0x28
   17ba0:	ldrd	r0, [ip, #48]	; 0x30
   17ba4:	strd	r0, [r2, #48]	; 0x30
   17ba8:	strb	r3, [sp, #384]	; 0x180
   17bac:	strb	r3, [sp, #385]	; 0x181
   17bb0:	str	r3, [sp, #388]	; 0x184
   17bb4:	str	r3, [sp, #392]	; 0x188
   17bb8:	str	r3, [sp, #404]	; 0x194
   17bbc:	str	r3, [sp, #396]	; 0x18c
   17bc0:	str	r3, [sp, #400]	; 0x190
   17bc4:	str	r3, [sp, #408]	; 0x198
   17bc8:	strb	r3, [sp, #412]	; 0x19c
   17bcc:	strb	r3, [sp, #414]	; 0x19e
   17bd0:	strb	r3, [sp, #415]	; 0x19f
   17bd4:	strb	r3, [sp, #417]	; 0x1a1
   17bd8:	strb	r3, [sp, #416]	; 0x1a0
   17bdc:	strb	r3, [sp, #418]	; 0x1a2
   17be0:	strb	r3, [sp, #419]	; 0x1a3
   17be4:	strb	r3, [sp, #420]	; 0x1a4
   17be8:	ldr	r2, [sp, #508]	; 0x1fc
   17bec:	str	r2, [sp, #424]	; 0x1a8
   17bf0:	movw	r2, #269	; 0x10d
   17bf4:	str	r2, [sp, #428]	; 0x1ac
   17bf8:	str	lr, [sp, #432]	; 0x1b0
   17bfc:	str	r3, [sp, #436]	; 0x1b4
   17c00:	mov	r2, #42752	; 0xa700
   17c04:	movt	r2, #118	; 0x76
   17c08:	adds	r2, r6, r2
   17c0c:	movvs	r3, #1
   17c10:	str	r2, [sp, #88]	; 0x58
   17c14:	cmp	r3, #0
   17c18:	bne	1628c <__assert_fail@plt+0x4ebc>
   17c1c:	mov	r4, #19968	; 0x4e00
   17c20:	movt	r4, #237	; 0xed
   17c24:	mov	r5, #39936	; 0x9c00
   17c28:	movt	r5, #474	; 0x1da
   17c2c:	b	16240 <__assert_fail@plt+0x4e70>
   17c30:	mov	r6, #3600	; 0xe10
   17c34:	umull	r2, r3, r8, r6
   17c38:	umull	r0, r1, r6, r9
   17c3c:	strd	r0, [sp, #32]
   17c40:	cmp	r9, #0
   17c44:	bge	17c60 <__assert_fail@plt+0x6890>
   17c48:	mov	lr, #0
   17c4c:	subs	r1, r0, lr
   17c50:	str	r1, [sp, #32]
   17c54:	ldr	r1, [sp, #36]	; 0x24
   17c58:	sbc	r1, r1, r6
   17c5c:	str	r1, [sp, #36]	; 0x24
   17c60:	mov	lr, #0
   17c64:	ldr	r1, [sp, #32]
   17c68:	adds	r0, r1, r3
   17c6c:	ldr	r1, [sp, #36]	; 0x24
   17c70:	adc	lr, r1, lr
   17c74:	cmp	lr, r0, asr #31
   17c78:	bne	17c84 <__assert_fail@plt+0x68b4>
   17c7c:	mov	r1, r2
   17c80:	b	17d7c <__assert_fail@plt+0x69ac>
   17c84:	lsl	r1, r9, #3
   17c88:	lsl	r3, r8, #3
   17c8c:	orr	r2, r1, r8, lsr #29
   17c90:	subs	r3, r3, r8
   17c94:	sbc	r2, r2, r9
   17c98:	lsl	r1, r2, #5
   17c9c:	orr	r1, r1, r3, lsr #27
   17ca0:	lsl	r0, r3, #5
   17ca4:	adds	r3, r0, r8
   17ca8:	adc	r2, r1, r9
   17cac:	lsl	r0, r2, #4
   17cb0:	orr	r0, r0, r3, lsr #28
   17cb4:	lsl	r1, r3, #4
   17cb8:	mov	ip, #1
   17cbc:	b	17d7c <__assert_fail@plt+0x69ac>
   17cc0:	ldrb	r3, [sp, #413]	; 0x19d
   17cc4:	cmp	r3, #0
   17cc8:	beq	171cc <__assert_fail@plt+0x5dfc>
   17ccc:	ldr	r3, [sp, #392]	; 0x188
   17cd0:	cmp	r3, #0
   17cd4:	bne	173d4 <__assert_fail@plt+0x6004>
   17cd8:	mov	r2, #5
   17cdc:	movw	r1, #63548	; 0xf83c
   17ce0:	movt	r1, #1
   17ce4:	mov	r0, #0
   17ce8:	bl	11130 <dcgettext@plt>
   17cec:	mov	r6, r0
   17cf0:	mov	r3, #100	; 0x64
   17cf4:	add	r2, sp, #680	; 0x2a8
   17cf8:	add	r1, sp, #232	; 0xe8
   17cfc:	add	r0, sp, #852	; 0x354
   17d00:	bl	132d0 <__assert_fail@plt+0x1f00>
   17d04:	mov	r1, r0
   17d08:	mov	r0, r6
   17d0c:	bl	13270 <__assert_fail@plt+0x1ea0>
   17d10:	add	ip, sp, #240	; 0xf0
   17d14:	ldrd	r2, [ip, #88]	; 0x58
   17d18:	ldr	r6, [sp, #336]	; 0x150
   17d1c:	ldr	lr, [sp, #340]	; 0x154
   17d20:	orr	r0, r2, r6
   17d24:	orr	r1, r3, lr
   17d28:	ldr	lr, [sp, #344]	; 0x158
   17d2c:	ldr	ip, [sp, #348]	; 0x15c
   17d30:	orr	r6, r0, lr
   17d34:	orr	r7, r1, ip
   17d38:	orrs	ip, r6, r7
   17d3c:	bne	1740c <__assert_fail@plt+0x603c>
   17d40:	ldr	r3, [sp, #408]	; 0x198
   17d44:	cmp	r3, #0
   17d48:	bne	17744 <__assert_fail@plt+0x6374>
   17d4c:	ldrb	r3, [sp, #413]	; 0x19d
   17d50:	cmp	r3, #0
   17d54:	bne	177a0 <__assert_fail@plt+0x63d0>
   17d58:	ldr	r8, [sp, #352]	; 0x160
   17d5c:	ldr	r9, [sp, #356]	; 0x164
   17d60:	mov	ip, #0
   17d64:	cmp	r9, r8, asr #31
   17d68:	bne	17c30 <__assert_fail@plt+0x6860>
   17d6c:	mov	r2, #3600	; 0xe10
   17d70:	smull	r2, r3, r8, r2
   17d74:	mov	r1, r2
   17d78:	mov	r0, r3
   17d7c:	mov	r2, r1
   17d80:	mov	r3, r0
   17d84:	cmp	ip, #0
   17d88:	bne	16474 <__assert_fail@plt+0x50a4>
   17d8c:	asr	r1, r5, #31
   17d90:	adds	r6, r5, r2
   17d94:	adcs	r7, r1, r3
   17d98:	strd	r6, [sp, #48]	; 0x30
   17d9c:	bvs	17814 <__assert_fail@plt+0x6444>
   17da0:	ldr	r3, [sp, #360]	; 0x168
   17da4:	str	r3, [sp, #32]
   17da8:	ldr	r2, [sp, #364]	; 0x16c
   17dac:	str	r2, [sp, #44]	; 0x2c
   17db0:	mov	ip, #0
   17db4:	cmp	r2, r3, asr #31
   17db8:	bne	178cc <__assert_fail@plt+0x64fc>
   17dbc:	mov	r2, #60	; 0x3c
   17dc0:	smull	r2, r3, r3, r2
   17dc4:	mov	r1, r2
   17dc8:	mov	r0, r3
   17dcc:	mov	r3, r0
   17dd0:	cmp	ip, #0
   17dd4:	bne	17814 <__assert_fail@plt+0x6444>
   17dd8:	ldrd	r6, [sp, #48]	; 0x30
   17ddc:	adds	r0, r6, r1
   17de0:	adcs	r1, r7, r3
   17de4:	bvs	17814 <__assert_fail@plt+0x6444>
   17de8:	add	r3, sp, #240	; 0xf0
   17dec:	ldrd	r2, [r3, #128]	; 0x80
   17df0:	strd	r2, [sp, #56]	; 0x38
   17df4:	adds	r2, r0, r2
   17df8:	adcs	r3, r1, r3
   17dfc:	mov	r6, r2
   17e00:	mov	r7, r3
   17e04:	bvs	17814 <__assert_fail@plt+0x6444>
   17e08:	ldr	r3, [sp, #376]	; 0x178
   17e0c:	str	r3, [sp, #76]	; 0x4c
   17e10:	mov	r0, r3
   17e14:	asr	r1, r3, #31
   17e18:	strd	r0, [sp, #48]	; 0x30
   17e1c:	ldr	r3, [sp, #324]	; 0x144
   17e20:	adds	r0, r0, r3
   17e24:	adc	r1, r1, r3, asr #31
   17e28:	add	r3, pc, #368	; 0x170
   17e2c:	ldrd	r2, [r3]
   17e30:	strd	r0, [sp, #64]	; 0x40
   17e34:	bl	1d7fc <__assert_fail@plt+0xc42c>
   17e38:	mov	r5, #51712	; 0xca00
   17e3c:	movt	r5, #15258	; 0x3b9a
   17e40:	adds	r0, r2, r5
   17e44:	adc	r1, r3, #0
   17e48:	mov	r2, r5
   17e4c:	mov	r3, #0
   17e50:	bl	1d7fc <__assert_fail@plt+0xc42c>
   17e54:	mov	ip, r2
   17e58:	str	r2, [sp, #72]	; 0x48
   17e5c:	mov	r2, r5
   17e60:	mov	r3, #0
   17e64:	ldrd	r0, [sp, #64]	; 0x40
   17e68:	subs	r0, r0, ip
   17e6c:	sbc	r1, r1, ip, asr #31
   17e70:	bl	1d7fc <__assert_fail@plt+0xc42c>
   17e74:	asr	r1, r0, #31
   17e78:	adds	r2, r6, r0
   17e7c:	adcs	r3, r7, r1
   17e80:	mov	r6, r2
   17e84:	movvs	ip, #1
   17e88:	movvc	ip, #0
   17e8c:	asr	r1, r2, #31
   17e90:	cmp	r3, r1
   17e94:	cmpeq	r2, r2
   17e98:	moveq	r3, ip
   17e9c:	movne	r3, #1
   17ea0:	cmp	r3, #0
   17ea4:	bne	17814 <__assert_fail@plt+0x6444>
   17ea8:	ldr	r3, [sp, #40]	; 0x28
   17eac:	str	r2, [r3]
   17eb0:	ldr	r2, [sp, #72]	; 0x48
   17eb4:	str	r2, [r3, #4]
   17eb8:	ldrb	r3, [sp, #413]	; 0x19d
   17ebc:	cmp	r3, #0
   17ec0:	beq	162f8 <__assert_fail@plt+0x4f28>
   17ec4:	ldr	r3, [sp, #32]
   17ec8:	orr	r3, r3, r8
   17ecc:	ldr	r2, [sp, #44]	; 0x2c
   17ed0:	orr	r2, r2, r9
   17ed4:	ldrd	r0, [sp, #56]	; 0x38
   17ed8:	orr	r3, r3, r0
   17edc:	orr	r2, r2, r1
   17ee0:	ldr	ip, [sp, #76]	; 0x4c
   17ee4:	orr	r0, r3, ip
   17ee8:	ldr	r3, [sp, #52]	; 0x34
   17eec:	orr	r1, r2, r3
   17ef0:	orrs	r3, r0, r1
   17ef4:	beq	162f8 <__assert_fail@plt+0x4f28>
   17ef8:	mov	r2, #5
   17efc:	movw	r1, #64256	; 0xfb00
   17f00:	movt	r1, #1
   17f04:	mov	r0, #0
   17f08:	bl	11130 <dcgettext@plt>
   17f0c:	add	r1, sp, #240	; 0xf0
   17f10:	ldr	r3, [sp, #376]	; 0x178
   17f14:	str	r3, [sp, #16]
   17f18:	ldrd	r2, [r1, #128]	; 0x80
   17f1c:	strd	r2, [sp, #8]
   17f20:	ldrd	r2, [r1, #120]	; 0x78
   17f24:	strd	r2, [sp]
   17f28:	ldrd	r2, [r1, #112]	; 0x70
   17f2c:	bl	13270 <__assert_fail@plt+0x1ea0>
   17f30:	mov	r2, #5
   17f34:	movw	r1, #64332	; 0xfb4c
   17f38:	movt	r1, #1
   17f3c:	mov	r0, #0
   17f40:	bl	11130 <dcgettext@plt>
   17f44:	mov	r2, r6
   17f48:	asr	r3, r6, #31
   17f4c:	bl	13270 <__assert_fail@plt+0x1ea0>
   17f50:	ldr	r3, [sp, #884]	; 0x374
   17f54:	cmn	r3, #1
   17f58:	beq	162f8 <__assert_fail@plt+0x4f28>
   17f5c:	add	r2, sp, #88	; 0x58
   17f60:	ldr	r1, [sp, #40]	; 0x28
   17f64:	mov	r0, sl
   17f68:	bl	1ab14 <__assert_fail@plt+0x9744>
   17f6c:	cmp	r0, #0
   17f70:	beq	162f8 <__assert_fail@plt+0x4f28>
   17f74:	ldr	r2, [sp, #884]	; 0x374
   17f78:	ldr	r3, [sp, #120]	; 0x78
   17f7c:	cmp	r2, r3
   17f80:	beq	162f8 <__assert_fail@plt+0x4f28>
   17f84:	mov	r2, #5
   17f88:	movw	r1, #64368	; 0xfb70
   17f8c:	movt	r1, #1
   17f90:	mov	r0, #0
   17f94:	bl	11130 <dcgettext@plt>
   17f98:	bl	13270 <__assert_fail@plt+0x1ea0>
   17f9c:	b	162f8 <__assert_fail@plt+0x4f28>
   17fa0:	blcc	fe6ca7a8 <optarg@@GLIBC_2.4+0xfe699600>
   17fa4:	andeq	r0, r0, r0
   17fa8:	push	{lr}		; (str lr, [sp, #-4]!)
   17fac:	sub	sp, sp, #12
   17fb0:	ldr	ip, [sp, #20]
   17fb4:	str	ip, [sp, #4]
   17fb8:	ldr	ip, [sp, #16]
   17fbc:	str	ip, [sp]
   17fc0:	bl	1605c <__assert_fail@plt+0x4c8c>
   17fc4:	add	sp, sp, #12
   17fc8:	pop	{pc}		; (ldr pc, [sp], #4)
   17fcc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17fd0:	strd	r6, [sp, #8]
   17fd4:	str	r8, [sp, #16]
   17fd8:	str	lr, [sp, #20]
   17fdc:	sub	sp, sp, #8
   17fe0:	mov	r5, r0
   17fe4:	mov	r6, r1
   17fe8:	mov	r7, r2
   17fec:	movw	r0, #64604	; 0xfc5c
   17ff0:	movt	r0, #1
   17ff4:	bl	111d8 <getenv@plt>
   17ff8:	mov	r8, r0
   17ffc:	bl	1a7b0 <__assert_fail@plt+0x93e0>
   18000:	subs	r4, r0, #0
   18004:	moveq	r5, #0
   18008:	beq	18034 <__assert_fail@plt+0x6c64>
   1800c:	str	r8, [sp, #4]
   18010:	str	r4, [sp]
   18014:	mov	r3, #0
   18018:	mov	r2, r7
   1801c:	mov	r1, r6
   18020:	mov	r0, r5
   18024:	bl	1605c <__assert_fail@plt+0x4c8c>
   18028:	mov	r5, r0
   1802c:	mov	r0, r4
   18030:	bl	1a990 <__assert_fail@plt+0x95c0>
   18034:	mov	r0, r5
   18038:	add	sp, sp, #8
   1803c:	ldrd	r4, [sp]
   18040:	ldrd	r6, [sp, #8]
   18044:	ldr	r8, [sp, #16]
   18048:	add	sp, sp, #20
   1804c:	pop	{pc}		; (ldr pc, [sp], #4)
   18050:	cmp	r2, #1
   18054:	beq	180a8 <__assert_fail@plt+0x6cd8>
   18058:	cmp	r2, #2
   1805c:	beq	180d4 <__assert_fail@plt+0x6d04>
   18060:	str	r4, [sp, #-8]!
   18064:	str	lr, [sp, #4]
   18068:	sub	sp, sp, #8
   1806c:	mov	r4, r0
   18070:	mov	r0, #0
   18074:	bl	1110c <time@plt>
   18078:	str	r0, [sp, #4]
   1807c:	add	r0, sp, #4
   18080:	bl	11220 <localtime@plt>
   18084:	cmp	r0, #0
   18088:	beq	18100 <__assert_fail@plt+0x6d30>
   1808c:	ldr	r3, [r0, #20]
   18090:	str	r3, [r4, #20]
   18094:	mov	r0, #1
   18098:	add	sp, sp, #8
   1809c:	ldr	r4, [sp]
   180a0:	add	sp, sp, #4
   180a4:	pop	{pc}		; (ldr pc, [sp], #4)
   180a8:	ldr	r2, [r1]
   180ac:	str	r2, [r0, #20]
   180b0:	ldr	r1, [r1]
   180b4:	cmp	r1, #68	; 0x44
   180b8:	bgt	18108 <__assert_fail@plt+0x6d38>
   180bc:	tst	r3, #8
   180c0:	bne	18110 <__assert_fail@plt+0x6d40>
   180c4:	add	r2, r2, #100	; 0x64
   180c8:	str	r2, [r0, #20]
   180cc:	mov	r0, #1
   180d0:	bx	lr
   180d4:	tst	r3, #2
   180d8:	beq	18118 <__assert_fail@plt+0x6d48>
   180dc:	ldr	r3, [r1]
   180e0:	ldr	r2, [r1, #4]
   180e4:	mov	r1, #100	; 0x64
   180e8:	mla	r3, r1, r3, r2
   180ec:	sub	r3, r3, #1888	; 0x760
   180f0:	sub	r3, r3, #12
   180f4:	str	r3, [r0, #20]
   180f8:	mov	r0, #1
   180fc:	bx	lr
   18100:	mov	r0, #0
   18104:	b	18098 <__assert_fail@plt+0x6cc8>
   18108:	mov	r0, #1
   1810c:	bx	lr
   18110:	mov	r0, #0
   18114:	bx	lr
   18118:	mov	r0, #0
   1811c:	bx	lr
   18120:	strd	r4, [sp, #-28]!	; 0xffffffe4
   18124:	strd	r6, [sp, #8]
   18128:	strd	r8, [sp, #16]
   1812c:	str	lr, [sp, #24]
   18130:	sub	sp, sp, #92	; 0x5c
   18134:	mov	r7, r0
   18138:	mov	r5, r1
   1813c:	mov	r8, r2
   18140:	mov	r0, r1
   18144:	bl	11274 <strlen@plt>
   18148:	mov	r4, r0
   1814c:	tst	r8, #4
   18150:	beq	18198 <__assert_fail@plt+0x6dc8>
   18154:	mov	r6, r0
   18158:	mov	r1, #46	; 0x2e
   1815c:	mov	r0, r5
   18160:	bl	11280 <strchr@plt>
   18164:	subs	r9, r0, #0
   18168:	beq	1819c <__assert_fail@plt+0x6dcc>
   1816c:	sub	r4, r9, r5
   18170:	sub	r6, r6, r4
   18174:	cmp	r6, #3
   18178:	beq	1819c <__assert_fail@plt+0x6dcc>
   1817c:	mov	r0, #0
   18180:	add	sp, sp, #92	; 0x5c
   18184:	ldrd	r4, [sp]
   18188:	ldrd	r6, [sp, #8]
   1818c:	ldrd	r8, [sp, #16]
   18190:	add	sp, sp, #24
   18194:	pop	{pc}		; (ldr pc, [sp], #4)
   18198:	mov	r9, #0
   1819c:	sub	r3, r4, #8
   181a0:	cmp	r3, #4
   181a4:	bhi	1817c <__assert_fail@plt+0x6dac>
   181a8:	tst	r4, #1
   181ac:	bne	1817c <__assert_fail@plt+0x6dac>
   181b0:	ldrb	r3, [r5]
   181b4:	sub	r3, r3, #48	; 0x30
   181b8:	cmp	r3, #9
   181bc:	bhi	1817c <__assert_fail@plt+0x6dac>
   181c0:	mov	r1, r5
   181c4:	sub	r3, r5, #1
   181c8:	add	r2, r3, r4
   181cc:	ldrb	r3, [r1, #1]!
   181d0:	sub	r3, r3, #48	; 0x30
   181d4:	cmp	r3, #9
   181d8:	bhi	1817c <__assert_fail@plt+0x6dac>
   181dc:	cmp	r1, r2
   181e0:	bne	181cc <__assert_fail@plt+0x6dfc>
   181e4:	add	r4, r4, r4, lsr #31
   181e8:	asr	r4, r4, #1
   181ec:	mov	r0, sp
   181f0:	mov	r1, #0
   181f4:	add	ip, r5, #1
   181f8:	ldrb	r3, [r5, r1, lsl #1]
   181fc:	sub	r3, r3, #48	; 0x30
   18200:	add	r3, r3, r3, lsl #2
   18204:	ldrb	r2, [ip, r1, lsl #1]
   18208:	add	r3, r2, r3, lsl #1
   1820c:	sub	r3, r3, #48	; 0x30
   18210:	str	r3, [r0], #4
   18214:	add	r1, r1, #1
   18218:	cmp	r4, r1
   1821c:	bne	181f8 <__assert_fail@plt+0x6e28>
   18220:	tst	r8, #1
   18224:	beq	1826c <__assert_fail@plt+0x6e9c>
   18228:	ldr	r3, [sp]
   1822c:	sub	r3, r3, #1
   18230:	str	r3, [sp, #60]	; 0x3c
   18234:	ldr	r3, [sp, #4]
   18238:	str	r3, [sp, #56]	; 0x38
   1823c:	ldr	r3, [sp, #8]
   18240:	str	r3, [sp, #52]	; 0x34
   18244:	ldr	r3, [sp, #12]
   18248:	str	r3, [sp, #48]	; 0x30
   1824c:	mov	r3, r8
   18250:	sub	r2, r4, #4
   18254:	add	r1, sp, #16
   18258:	add	r0, sp, #44	; 0x2c
   1825c:	bl	18050 <__assert_fail@plt+0x6c80>
   18260:	cmp	r0, #0
   18264:	bne	182b4 <__assert_fail@plt+0x6ee4>
   18268:	b	1817c <__assert_fail@plt+0x6dac>
   1826c:	mov	r3, r8
   18270:	sub	r2, r4, #4
   18274:	mov	r1, sp
   18278:	add	r0, sp, #44	; 0x2c
   1827c:	bl	18050 <__assert_fail@plt+0x6c80>
   18280:	cmp	r0, #0
   18284:	beq	1817c <__assert_fail@plt+0x6dac>
   18288:	sub	r4, r4, #-1073741820	; 0xc0000004
   1828c:	add	r3, sp, r4, lsl #2
   18290:	ldr	r2, [sp, r4, lsl #2]
   18294:	sub	r2, r2, #1
   18298:	str	r2, [sp, #60]	; 0x3c
   1829c:	ldr	r2, [r3, #4]
   182a0:	str	r2, [sp, #56]	; 0x38
   182a4:	ldr	r2, [r3, #8]
   182a8:	str	r2, [sp, #52]	; 0x34
   182ac:	ldr	r3, [r3, #12]
   182b0:	str	r3, [sp, #48]	; 0x30
   182b4:	cmp	r9, #0
   182b8:	moveq	r3, #0
   182bc:	streq	r3, [sp, #44]	; 0x2c
   182c0:	beq	182f8 <__assert_fail@plt+0x6f28>
   182c4:	ldrb	r3, [r9, #1]
   182c8:	sub	r2, r3, #48	; 0x30
   182cc:	cmp	r2, #9
   182d0:	bhi	1817c <__assert_fail@plt+0x6dac>
   182d4:	ldrb	r2, [r9, #2]
   182d8:	sub	r1, r2, #48	; 0x30
   182dc:	cmp	r1, #9
   182e0:	bhi	1817c <__assert_fail@plt+0x6dac>
   182e4:	sub	r3, r3, #48	; 0x30
   182e8:	add	r3, r3, r3, lsl #2
   182ec:	add	r3, r2, r3, lsl #1
   182f0:	sub	r3, r3, #48	; 0x30
   182f4:	str	r3, [sp, #44]	; 0x2c
   182f8:	mov	r5, #0
   182fc:	mvn	r4, #0
   18300:	mov	r6, #59	; 0x3b
   18304:	b	18324 <__assert_fail@plt+0x6f54>
   18308:	adds	r0, r0, r5
   1830c:	strvc	r0, [r7]
   18310:	movvc	r0, #1
   18314:	movvs	r0, #0
   18318:	b	18180 <__assert_fail@plt+0x6db0>
   1831c:	str	r6, [sp, #44]	; 0x2c
   18320:	mov	r5, #1
   18324:	ldr	r3, [sp, #44]	; 0x2c
   18328:	str	r3, [sp]
   1832c:	ldr	r3, [sp, #48]	; 0x30
   18330:	str	r3, [sp, #4]
   18334:	ldr	r3, [sp, #52]	; 0x34
   18338:	str	r3, [sp, #8]
   1833c:	ldr	r3, [sp, #56]	; 0x38
   18340:	str	r3, [sp, #12]
   18344:	ldr	r3, [sp, #60]	; 0x3c
   18348:	str	r3, [sp, #16]
   1834c:	ldr	r3, [sp, #64]	; 0x40
   18350:	str	r3, [sp, #20]
   18354:	str	r4, [sp, #24]
   18358:	str	r4, [sp, #32]
   1835c:	mov	r0, sp
   18360:	bl	110b8 <mktime@plt>
   18364:	ldr	r3, [sp, #24]
   18368:	cmp	r3, #0
   1836c:	blt	183e0 <__assert_fail@plt+0x7010>
   18370:	ldr	r1, [sp, #44]	; 0x2c
   18374:	ldr	r3, [sp, #64]	; 0x40
   18378:	ldr	r2, [sp, #20]
   1837c:	eor	r3, r3, r2
   18380:	ldr	r2, [sp, #60]	; 0x3c
   18384:	ldr	ip, [sp, #16]
   18388:	eor	r2, r2, ip
   1838c:	orr	r3, r3, r2
   18390:	ldr	r2, [sp, #56]	; 0x38
   18394:	ldr	ip, [sp, #12]
   18398:	eor	r2, r2, ip
   1839c:	orr	r3, r3, r2
   183a0:	ldr	r2, [sp, #52]	; 0x34
   183a4:	ldr	ip, [sp, #8]
   183a8:	eor	r2, r2, ip
   183ac:	orr	r3, r3, r2
   183b0:	ldr	r2, [sp, #48]	; 0x30
   183b4:	ldr	ip, [sp, #4]
   183b8:	eor	r2, r2, ip
   183bc:	orr	r3, r3, r2
   183c0:	ldr	r2, [sp]
   183c4:	eor	r2, r2, r1
   183c8:	orrs	r3, r3, r2
   183cc:	beq	18308 <__assert_fail@plt+0x6f38>
   183d0:	cmp	r1, #60	; 0x3c
   183d4:	beq	1831c <__assert_fail@plt+0x6f4c>
   183d8:	mov	r0, #0
   183dc:	b	18180 <__assert_fail@plt+0x6db0>
   183e0:	mov	r0, #0
   183e4:	b	18180 <__assert_fail@plt+0x6db0>
   183e8:	push	{lr}		; (str lr, [sp, #-4]!)
   183ec:	sub	sp, sp, #12
   183f0:	movw	r0, #65352	; 0xff48
   183f4:	movt	r0, #1
   183f8:	bl	111d8 <getenv@plt>
   183fc:	cmp	r0, #0
   18400:	beq	1844c <__assert_fail@plt+0x707c>
   18404:	ldrb	r3, [r0]
   18408:	cmp	r3, #0
   1840c:	movweq	r3, #4201	; 0x1069
   18410:	movteq	r3, #3
   18414:	bne	18424 <__assert_fail@plt+0x7054>
   18418:	mov	r0, r3
   1841c:	add	sp, sp, #12
   18420:	pop	{pc}		; (ldr pc, [sp], #4)
   18424:	mov	r2, #10
   18428:	add	r1, sp, #4
   1842c:	bl	110ac <strtol@plt>
   18430:	ldr	r3, [sp, #4]
   18434:	ldrb	r2, [r3]
   18438:	cmp	r2, #0
   1843c:	movw	r3, #4201	; 0x1069
   18440:	movt	r3, #3
   18444:	moveq	r3, r0
   18448:	b	18418 <__assert_fail@plt+0x7048>
   1844c:	movw	r3, #4201	; 0x1069
   18450:	movt	r3, #3
   18454:	b	18418 <__assert_fail@plt+0x7048>
   18458:	strd	r4, [sp, #-16]!
   1845c:	str	r6, [sp, #8]
   18460:	str	lr, [sp, #12]
   18464:	subs	r4, r0, #0
   18468:	beq	18504 <__assert_fail@plt+0x7134>
   1846c:	mov	r1, #47	; 0x2f
   18470:	mov	r0, r4
   18474:	bl	11328 <strrchr@plt>
   18478:	subs	r5, r0, #0
   1847c:	beq	184dc <__assert_fail@plt+0x710c>
   18480:	add	r6, r5, #1
   18484:	sub	r3, r6, r4
   18488:	cmp	r3, #6
   1848c:	ble	184dc <__assert_fail@plt+0x710c>
   18490:	mov	r2, #7
   18494:	movw	r1, #65424	; 0xff90
   18498:	movt	r1, #1
   1849c:	sub	r0, r5, #6
   184a0:	bl	11394 <strncmp@plt>
   184a4:	cmp	r0, #0
   184a8:	bne	184dc <__assert_fail@plt+0x710c>
   184ac:	mov	r2, #3
   184b0:	movw	r1, #65432	; 0xff98
   184b4:	movt	r1, #1
   184b8:	mov	r0, r6
   184bc:	bl	11394 <strncmp@plt>
   184c0:	cmp	r0, #0
   184c4:	movne	r4, r6
   184c8:	bne	184dc <__assert_fail@plt+0x710c>
   184cc:	add	r4, r5, #4
   184d0:	movw	r3, #4496	; 0x1190
   184d4:	movt	r3, #3
   184d8:	str	r4, [r3]
   184dc:	movw	r3, #4568	; 0x11d8
   184e0:	movt	r3, #3
   184e4:	str	r4, [r3]
   184e8:	movw	r3, #4500	; 0x1194
   184ec:	movt	r3, #3
   184f0:	str	r4, [r3]
   184f4:	ldrd	r4, [sp]
   184f8:	ldr	r6, [sp, #8]
   184fc:	add	sp, sp, #12
   18500:	pop	{pc}		; (ldr pc, [sp], #4)
   18504:	movw	r3, #4512	; 0x11a0
   18508:	movt	r3, #3
   1850c:	ldr	r3, [r3]
   18510:	mov	r2, #55	; 0x37
   18514:	mov	r1, #1
   18518:	movw	r0, #65368	; 0xff58
   1851c:	movt	r0, #1
   18520:	bl	11184 <fwrite@plt>
   18524:	bl	113a0 <abort@plt>
   18528:	mov	r2, #0
   1852c:	mov	r3, #0
   18530:	strd	r2, [r0]
   18534:	strd	r2, [r0, #8]
   18538:	strd	r2, [r0, #16]
   1853c:	strd	r2, [r0, #24]
   18540:	strd	r2, [r0, #32]
   18544:	strd	r2, [r0, #40]	; 0x28
   18548:	cmp	r1, #10
   1854c:	beq	18558 <__assert_fail@plt+0x7188>
   18550:	str	r1, [r0]
   18554:	bx	lr
   18558:	str	r4, [sp, #-8]!
   1855c:	str	lr, [sp, #4]
   18560:	bl	113a0 <abort@plt>
   18564:	strd	r4, [sp, #-16]!
   18568:	str	r6, [sp, #8]
   1856c:	str	lr, [sp, #12]
   18570:	mov	r5, r0
   18574:	mov	r6, r1
   18578:	mov	r2, #5
   1857c:	mov	r1, r0
   18580:	mov	r0, #0
   18584:	bl	11130 <dcgettext@plt>
   18588:	mov	r4, r0
   1858c:	cmp	r5, r0
   18590:	beq	185a8 <__assert_fail@plt+0x71d8>
   18594:	mov	r0, r4
   18598:	ldrd	r4, [sp]
   1859c:	ldr	r6, [sp, #8]
   185a0:	add	sp, sp, #12
   185a4:	pop	{pc}		; (ldr pc, [sp], #4)
   185a8:	bl	1bb48 <__assert_fail@plt+0xa778>
   185ac:	ldrb	r3, [r0]
   185b0:	bic	r3, r3, #32
   185b4:	cmp	r3, #85	; 0x55
   185b8:	bne	1863c <__assert_fail@plt+0x726c>
   185bc:	ldrb	r3, [r0, #1]
   185c0:	bic	r3, r3, #32
   185c4:	cmp	r3, #84	; 0x54
   185c8:	bne	18600 <__assert_fail@plt+0x7230>
   185cc:	ldrb	r3, [r0, #2]
   185d0:	bic	r3, r3, #32
   185d4:	cmp	r3, #70	; 0x46
   185d8:	bne	18600 <__assert_fail@plt+0x7230>
   185dc:	ldrb	r3, [r0, #3]
   185e0:	cmp	r3, #45	; 0x2d
   185e4:	bne	18600 <__assert_fail@plt+0x7230>
   185e8:	ldrb	r3, [r0, #4]
   185ec:	cmp	r3, #56	; 0x38
   185f0:	bne	18600 <__assert_fail@plt+0x7230>
   185f4:	ldrb	r3, [r0, #5]
   185f8:	cmp	r3, #0
   185fc:	beq	1861c <__assert_fail@plt+0x724c>
   18600:	movw	r4, #65520	; 0xfff0
   18604:	movt	r4, #1
   18608:	movw	r3, #4
   1860c:	movt	r3, #2
   18610:	cmp	r6, #9
   18614:	movne	r4, r3
   18618:	b	18594 <__assert_fail@plt+0x71c4>
   1861c:	ldrb	r2, [r4]
   18620:	movw	r4, #0
   18624:	movt	r4, #2
   18628:	movw	r3, #65524	; 0xfff4
   1862c:	movt	r3, #1
   18630:	cmp	r2, #96	; 0x60
   18634:	movne	r4, r3
   18638:	b	18594 <__assert_fail@plt+0x71c4>
   1863c:	cmp	r3, #71	; 0x47
   18640:	bne	18600 <__assert_fail@plt+0x7230>
   18644:	ldrb	r3, [r0, #1]
   18648:	bic	r3, r3, #32
   1864c:	cmp	r3, #66	; 0x42
   18650:	bne	18600 <__assert_fail@plt+0x7230>
   18654:	ldrb	r3, [r0, #2]
   18658:	cmp	r3, #49	; 0x31
   1865c:	bne	18600 <__assert_fail@plt+0x7230>
   18660:	ldrb	r3, [r0, #3]
   18664:	cmp	r3, #56	; 0x38
   18668:	bne	18600 <__assert_fail@plt+0x7230>
   1866c:	ldrb	r3, [r0, #4]
   18670:	cmp	r3, #48	; 0x30
   18674:	bne	18600 <__assert_fail@plt+0x7230>
   18678:	ldrb	r3, [r0, #5]
   1867c:	cmp	r3, #51	; 0x33
   18680:	bne	18600 <__assert_fail@plt+0x7230>
   18684:	ldrb	r3, [r0, #6]
   18688:	cmp	r3, #48	; 0x30
   1868c:	bne	18600 <__assert_fail@plt+0x7230>
   18690:	ldrb	r3, [r0, #7]
   18694:	cmp	r3, #0
   18698:	bne	18600 <__assert_fail@plt+0x7230>
   1869c:	ldrb	r2, [r4]
   186a0:	movw	r4, #65532	; 0xfffc
   186a4:	movt	r4, #1
   186a8:	movw	r3, #65528	; 0xfff8
   186ac:	movt	r3, #1
   186b0:	cmp	r2, #96	; 0x60
   186b4:	movne	r4, r3
   186b8:	b	18594 <__assert_fail@plt+0x71c4>
   186bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   186c0:	strd	r6, [sp, #8]
   186c4:	strd	r8, [sp, #16]
   186c8:	strd	sl, [sp, #24]
   186cc:	str	lr, [sp, #32]
   186d0:	sub	sp, sp, #116	; 0x74
   186d4:	str	r0, [sp, #64]	; 0x40
   186d8:	mov	r8, r1
   186dc:	str	r2, [sp, #48]	; 0x30
   186e0:	str	r3, [sp, #24]
   186e4:	ldr	r7, [sp, #152]	; 0x98
   186e8:	bl	1119c <__ctype_get_mb_cur_max@plt>
   186ec:	str	r0, [sp, #76]	; 0x4c
   186f0:	ldr	r3, [sp, #156]	; 0x9c
   186f4:	ubfx	r3, r3, #1, #1
   186f8:	str	r3, [sp, #32]
   186fc:	mov	r3, #1
   18700:	str	r3, [sp, #40]	; 0x28
   18704:	mov	r3, #0
   18708:	str	r3, [sp, #68]	; 0x44
   1870c:	str	r3, [sp, #36]	; 0x24
   18710:	str	r3, [sp, #28]
   18714:	str	r3, [sp, #52]	; 0x34
   18718:	str	r3, [sp, #60]	; 0x3c
   1871c:	str	r3, [sp, #72]	; 0x48
   18720:	movw	r3, #8
   18724:	movt	r3, #2
   18728:	str	r3, [sp, #80]	; 0x50
   1872c:	mov	r9, r8
   18730:	mov	sl, r7
   18734:	cmp	sl, #10
   18738:	ldrls	pc, [pc, sl, lsl #2]
   1873c:	b	18900 <__assert_fail@plt+0x7530>
   18740:	andeq	r8, r1, r0, lsr #15
   18744:	andeq	r8, r1, r4, ror r7
   18748:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1874c:	andeq	r8, r1, ip, ror #14
   18750:	andeq	r8, r1, ip, lsl #17
   18754:			; <UNDEFINED> instruction: 0x000187b0
   18758:	andeq	r9, r1, ip, ror fp
   1875c:	andeq	r8, r1, r4, lsl #18
   18760:	andeq	r8, r1, ip, ror #15
   18764:	andeq	r8, r1, ip, ror #15
   18768:	andeq	r8, r1, ip, ror #15
   1876c:	mov	r3, #1
   18770:	str	r3, [sp, #28]
   18774:	mov	r3, #1
   18778:	str	r3, [sp, #32]
   1877c:	str	r3, [sp, #52]	; 0x34
   18780:	movw	r3, #4
   18784:	movt	r3, #2
   18788:	str	r3, [sp, #60]	; 0x3c
   1878c:	mov	fp, #0
   18790:	mov	sl, #2
   18794:	mov	r6, #0
   18798:	ldr	r8, [sp, #64]	; 0x40
   1879c:	b	19014 <__assert_fail@plt+0x7c44>
   187a0:	mov	fp, sl
   187a4:	mov	r3, #0
   187a8:	str	r3, [sp, #32]
   187ac:	b	18794 <__assert_fail@plt+0x73c4>
   187b0:	ldr	r3, [sp, #32]
   187b4:	cmp	r3, #0
   187b8:	bne	18918 <__assert_fail@plt+0x7548>
   187bc:	cmp	r9, #0
   187c0:	beq	1893c <__assert_fail@plt+0x756c>
   187c4:	mov	r3, #34	; 0x22
   187c8:	ldr	r2, [sp, #64]	; 0x40
   187cc:	strb	r3, [r2]
   187d0:	mov	fp, #1
   187d4:	str	fp, [sp, #28]
   187d8:	str	fp, [sp, #52]	; 0x34
   187dc:	movw	r3, #65520	; 0xfff0
   187e0:	movt	r3, #1
   187e4:	str	r3, [sp, #60]	; 0x3c
   187e8:	b	18794 <__assert_fail@plt+0x73c4>
   187ec:	cmp	sl, #10
   187f0:	bne	18824 <__assert_fail@plt+0x7454>
   187f4:	ldr	r3, [sp, #32]
   187f8:	cmp	r3, #0
   187fc:	movne	fp, #0
   18800:	beq	1884c <__assert_fail@plt+0x747c>
   18804:	ldr	r0, [sp, #168]	; 0xa8
   18808:	bl	11274 <strlen@plt>
   1880c:	str	r0, [sp, #52]	; 0x34
   18810:	ldr	r3, [sp, #168]	; 0xa8
   18814:	str	r3, [sp, #60]	; 0x3c
   18818:	mov	r3, #1
   1881c:	str	r3, [sp, #28]
   18820:	b	18794 <__assert_fail@plt+0x73c4>
   18824:	mov	r1, sl
   18828:	ldr	r0, [sp, #80]	; 0x50
   1882c:	bl	18564 <__assert_fail@plt+0x7194>
   18830:	str	r0, [sp, #164]	; 0xa4
   18834:	mov	r1, sl
   18838:	movw	r0, #4
   1883c:	movt	r0, #2
   18840:	bl	18564 <__assert_fail@plt+0x7194>
   18844:	str	r0, [sp, #168]	; 0xa8
   18848:	b	187f4 <__assert_fail@plt+0x7424>
   1884c:	ldr	r3, [sp, #164]	; 0xa4
   18850:	ldrb	r3, [r3]
   18854:	cmp	r3, #0
   18858:	beq	18884 <__assert_fail@plt+0x74b4>
   1885c:	ldr	r2, [sp, #164]	; 0xa4
   18860:	mov	fp, #0
   18864:	ldr	r1, [sp, #64]	; 0x40
   18868:	cmp	r9, fp
   1886c:	strbhi	r3, [r1, fp]
   18870:	add	fp, fp, #1
   18874:	ldrb	r3, [r2, #1]!
   18878:	cmp	r3, #0
   1887c:	bne	18868 <__assert_fail@plt+0x7498>
   18880:	b	18804 <__assert_fail@plt+0x7434>
   18884:	mov	fp, #0
   18888:	b	18804 <__assert_fail@plt+0x7434>
   1888c:	ldr	r3, [sp, #32]
   18890:	cmp	r3, #0
   18894:	bne	18774 <__assert_fail@plt+0x73a4>
   18898:	mov	r3, #1
   1889c:	str	r3, [sp, #28]
   188a0:	cmp	r9, #0
   188a4:	beq	18958 <__assert_fail@plt+0x7588>
   188a8:	mov	r3, #39	; 0x27
   188ac:	ldr	r2, [sp, #64]	; 0x40
   188b0:	strb	r3, [r2]
   188b4:	mov	r3, #0
   188b8:	str	r3, [sp, #32]
   188bc:	mov	fp, #1
   188c0:	str	fp, [sp, #52]	; 0x34
   188c4:	movw	r3, #4
   188c8:	movt	r3, #2
   188cc:	str	r3, [sp, #60]	; 0x3c
   188d0:	mov	sl, #2
   188d4:	b	18794 <__assert_fail@plt+0x73c4>
   188d8:	ldr	r3, [sp, #32]
   188dc:	cmp	r3, #0
   188e0:	beq	188a0 <__assert_fail@plt+0x74d0>
   188e4:	mov	r3, #1
   188e8:	str	r3, [sp, #52]	; 0x34
   188ec:	movw	r3, #4
   188f0:	movt	r3, #2
   188f4:	str	r3, [sp, #60]	; 0x3c
   188f8:	mov	fp, #0
   188fc:	b	18794 <__assert_fail@plt+0x73c4>
   18900:	bl	113a0 <abort@plt>
   18904:	mov	fp, #0
   18908:	str	fp, [sp, #32]
   1890c:	mov	r3, #1
   18910:	str	r3, [sp, #28]
   18914:	b	18794 <__assert_fail@plt+0x73c4>
   18918:	ldr	r3, [sp, #32]
   1891c:	str	r3, [sp, #28]
   18920:	mov	r3, #1
   18924:	str	r3, [sp, #52]	; 0x34
   18928:	movw	r3, #65520	; 0xfff0
   1892c:	movt	r3, #1
   18930:	str	r3, [sp, #60]	; 0x3c
   18934:	mov	fp, #0
   18938:	b	18794 <__assert_fail@plt+0x73c4>
   1893c:	mov	fp, #1
   18940:	str	fp, [sp, #28]
   18944:	str	fp, [sp, #52]	; 0x34
   18948:	movw	r3, #65520	; 0xfff0
   1894c:	movt	r3, #1
   18950:	str	r3, [sp, #60]	; 0x3c
   18954:	b	18794 <__assert_fail@plt+0x73c4>
   18958:	mov	r3, #0
   1895c:	str	r3, [sp, #32]
   18960:	mov	fp, #1
   18964:	str	fp, [sp, #52]	; 0x34
   18968:	movw	r3, #4
   1896c:	movt	r3, #2
   18970:	str	r3, [sp, #60]	; 0x3c
   18974:	mov	sl, #2
   18978:	b	18794 <__assert_fail@plt+0x73c4>
   1897c:	mov	r3, r2
   18980:	add	r4, r6, r2
   18984:	ldr	r2, [sp, #24]
   18988:	cmp	r3, #1
   1898c:	movls	r3, #0
   18990:	movhi	r3, #1
   18994:	cmn	r2, #1
   18998:	movne	r3, #0
   1899c:	cmp	r3, #0
   189a0:	beq	189b0 <__assert_fail@plt+0x75e0>
   189a4:	ldr	r0, [sp, #48]	; 0x30
   189a8:	bl	11274 <strlen@plt>
   189ac:	str	r0, [sp, #24]
   189b0:	ldr	r3, [sp, #24]
   189b4:	cmp	r4, r3
   189b8:	bhi	19ba4 <__assert_fail@plt+0x87d4>
   189bc:	ldr	r3, [sp, #48]	; 0x30
   189c0:	add	r4, r3, r6
   189c4:	ldr	r2, [sp, #52]	; 0x34
   189c8:	ldr	r1, [sp, #60]	; 0x3c
   189cc:	mov	r0, r4
   189d0:	bl	11118 <memcmp@plt>
   189d4:	cmp	r0, #0
   189d8:	bne	19ba4 <__assert_fail@plt+0x87d4>
   189dc:	ldr	r3, [sp, #32]
   189e0:	cmp	r3, #0
   189e4:	bne	18bf4 <__assert_fail@plt+0x7824>
   189e8:	ldrb	r4, [r4]
   189ec:	cmp	r4, #126	; 0x7e
   189f0:	ldrls	pc, [pc, r4, lsl #2]
   189f4:	b	194a8 <__assert_fail@plt+0x80d8>
   189f8:	andeq	r8, r1, r8, lsr ip
   189fc:	andeq	r9, r1, r8, lsr #9
   18a00:	andeq	r9, r1, r8, lsr #9
   18a04:	andeq	r9, r1, r8, lsr #9
   18a08:	andeq	r9, r1, r8, lsr #9
   18a0c:	andeq	r9, r1, r8, lsr #9
   18a10:	andeq	r9, r1, r8, lsr #9
   18a14:	andeq	r9, r1, r0, asr r3
   18a18:	ldrdeq	r8, [r1], -r4
   18a1c:	andeq	r9, r1, r8, ror r2
   18a20:	andeq	r9, r1, r4, lsr #6
   18a24:	andeq	r9, r1, ip, lsl #5
   18a28:	andeq	r8, r1, r8, ror #29
   18a2c:	strdeq	r8, [r1], -ip
   18a30:	andeq	r9, r1, r8, lsr #9
   18a34:	andeq	r9, r1, r8, lsr #9
   18a38:	andeq	r9, r1, r8, lsr #9
   18a3c:	andeq	r9, r1, r8, lsr #9
   18a40:	andeq	r9, r1, r8, lsr #9
   18a44:	andeq	r9, r1, r8, lsr #9
   18a48:	andeq	r9, r1, r8, lsr #9
   18a4c:	andeq	r9, r1, r8, lsr #9
   18a50:	andeq	r9, r1, r8, lsr #9
   18a54:	andeq	r9, r1, r8, lsr #9
   18a58:	andeq	r9, r1, r8, lsr #9
   18a5c:	andeq	r9, r1, r8, lsr #9
   18a60:	andeq	r9, r1, r8, lsr #9
   18a64:	andeq	r9, r1, r8, lsr #9
   18a68:	andeq	r9, r1, r8, lsr #9
   18a6c:	andeq	r9, r1, r8, lsr #9
   18a70:	andeq	r9, r1, r8, lsr #9
   18a74:	andeq	r9, r1, r8, lsr #9
   18a78:	andeq	r9, r1, r4, asr #7
   18a7c:	andeq	r9, r1, r8, ror #7
   18a80:	andeq	r9, r1, r8, ror #7
   18a84:	andeq	r9, r1, r0, lsl #7
   18a88:	andeq	r9, r1, r8, ror #7
   18a8c:	andeq	r9, r1, r8, lsl #18
   18a90:	andeq	r9, r1, r8, ror #7
   18a94:	andeq	r9, r1, r8, lsl #8
   18a98:	andeq	r9, r1, r8, ror #7
   18a9c:	andeq	r9, r1, r8, ror #7
   18aa0:	andeq	r9, r1, r8, ror #7
   18aa4:	andeq	r9, r1, r8, lsl #18
   18aa8:	andeq	r9, r1, r8, lsl #18
   18aac:	andeq	r9, r1, r8, lsl #18
   18ab0:	andeq	r9, r1, r8, lsl #18
   18ab4:	andeq	r9, r1, r8, lsl #18
   18ab8:	andeq	r9, r1, r8, lsl #18
   18abc:	andeq	r9, r1, r8, lsl #18
   18ac0:	andeq	r9, r1, r8, lsl #18
   18ac4:	andeq	r9, r1, r8, lsl #18
   18ac8:	andeq	r9, r1, r8, lsl #18
   18acc:	andeq	r9, r1, r8, lsl #18
   18ad0:	andeq	r9, r1, r8, lsl #18
   18ad4:	andeq	r9, r1, r8, lsl #18
   18ad8:	andeq	r9, r1, r8, lsl #18
   18adc:	andeq	r9, r1, r8, lsl #18
   18ae0:	andeq	r9, r1, r8, lsl #18
   18ae4:	andeq	r9, r1, r8, ror #7
   18ae8:	andeq	r9, r1, r8, ror #7
   18aec:	andeq	r9, r1, r8, ror #7
   18af0:	andeq	r9, r1, r8, ror #7
   18af4:	andeq	r8, r1, r8, ror #26
   18af8:	andeq	r9, r1, r8, lsr #9
   18afc:	andeq	r9, r1, r8, lsl #18
   18b00:	andeq	r9, r1, r8, lsl #18
   18b04:	andeq	r9, r1, r8, lsl #18
   18b08:	andeq	r9, r1, r8, lsl #18
   18b0c:	andeq	r9, r1, r8, lsl #18
   18b10:	andeq	r9, r1, r8, lsl #18
   18b14:	andeq	r9, r1, r8, lsl #18
   18b18:	andeq	r9, r1, r8, lsl #18
   18b1c:	andeq	r9, r1, r8, lsl #18
   18b20:	andeq	r9, r1, r8, lsl #18
   18b24:	andeq	r9, r1, r8, lsl #18
   18b28:	andeq	r9, r1, r8, lsl #18
   18b2c:	andeq	r9, r1, r8, lsl #18
   18b30:	andeq	r9, r1, r8, lsl #18
   18b34:	andeq	r9, r1, r8, lsl #18
   18b38:	andeq	r9, r1, r8, lsl #18
   18b3c:	andeq	r9, r1, r8, lsl #18
   18b40:	andeq	r9, r1, r8, lsl #18
   18b44:	andeq	r9, r1, r8, lsl #18
   18b48:	andeq	r9, r1, r8, lsl #18
   18b4c:	andeq	r9, r1, r8, lsl #18
   18b50:	andeq	r9, r1, r8, lsl #18
   18b54:	andeq	r9, r1, r8, lsl #18
   18b58:	andeq	r9, r1, r8, lsl #18
   18b5c:	andeq	r9, r1, r8, lsl #18
   18b60:	andeq	r9, r1, r8, lsl #18
   18b64:	andeq	r9, r1, r8, ror #7
   18b68:	andeq	r9, r1, r0, lsr #5
   18b6c:	andeq	r9, r1, r8, lsl #18
   18b70:	andeq	r9, r1, r8, ror #7
   18b74:	andeq	r9, r1, r8, lsl #18
   18b78:	andeq	r9, r1, r8, ror #7
   18b7c:	andeq	r9, r1, r8, lsl #18
   18b80:	andeq	r9, r1, r8, lsl #18
   18b84:	andeq	r9, r1, r8, lsl #18
   18b88:	andeq	r9, r1, r8, lsl #18
   18b8c:	andeq	r9, r1, r8, lsl #18
   18b90:	andeq	r9, r1, r8, lsl #18
   18b94:	andeq	r9, r1, r8, lsl #18
   18b98:	andeq	r9, r1, r8, lsl #18
   18b9c:	andeq	r9, r1, r8, lsl #18
   18ba0:	andeq	r9, r1, r8, lsl #18
   18ba4:	andeq	r9, r1, r8, lsl #18
   18ba8:	andeq	r9, r1, r8, lsl #18
   18bac:	andeq	r9, r1, r8, lsl #18
   18bb0:	andeq	r9, r1, r8, lsl #18
   18bb4:	andeq	r9, r1, r8, lsl #18
   18bb8:	andeq	r9, r1, r8, lsl #18
   18bbc:	andeq	r9, r1, r8, lsl #18
   18bc0:	andeq	r9, r1, r8, lsl #18
   18bc4:	andeq	r9, r1, r8, lsl #18
   18bc8:	andeq	r9, r1, r8, lsl #18
   18bcc:	andeq	r9, r1, r8, lsl #18
   18bd0:	andeq	r9, r1, r8, lsl #18
   18bd4:	andeq	r9, r1, r8, lsl #18
   18bd8:	andeq	r9, r1, r8, lsl #18
   18bdc:	andeq	r9, r1, r8, lsl #18
   18be0:	andeq	r9, r1, r8, lsl #18
   18be4:	andeq	r9, r1, r0, ror #6
   18be8:	andeq	r9, r1, r8, ror #7
   18bec:	andeq	r9, r1, r0, ror #6
   18bf0:	andeq	r9, r1, r0, lsl #7
   18bf4:	mov	r8, r9
   18bf8:	mov	r7, sl
   18bfc:	b	19afc <__assert_fail@plt+0x872c>
   18c00:	ldr	r3, [sp, #28]
   18c04:	cmp	r3, #0
   18c08:	bne	18c28 <__assert_fail@plt+0x7858>
   18c0c:	ldr	r3, [sp, #156]	; 0x9c
   18c10:	tst	r3, #1
   18c14:	bne	19010 <__assert_fail@plt+0x7c40>
   18c18:	ldr	r3, [sp, #28]
   18c1c:	str	r3, [sp, #44]	; 0x2c
   18c20:	mov	r5, r3
   18c24:	b	18f30 <__assert_fail@plt+0x7b60>
   18c28:	ldr	r3, [sp, #32]
   18c2c:	cmp	r3, #0
   18c30:	bne	19aac <__assert_fail@plt+0x86dc>
   18c34:	str	r3, [sp, #44]	; 0x2c
   18c38:	ldr	r3, [sp, #36]	; 0x24
   18c3c:	eor	r3, r3, #1
   18c40:	cmp	sl, #2
   18c44:	movne	r3, #0
   18c48:	andeq	r3, r3, #1
   18c4c:	cmp	r3, #0
   18c50:	beq	18ca8 <__assert_fail@plt+0x78d8>
   18c54:	cmp	r9, fp
   18c58:	movhi	r2, #39	; 0x27
   18c5c:	strbhi	r2, [r8, fp]
   18c60:	add	r2, fp, #1
   18c64:	cmp	r9, r2
   18c68:	movhi	r1, #36	; 0x24
   18c6c:	strbhi	r1, [r8, r2]
   18c70:	add	r2, fp, #2
   18c74:	cmp	r9, r2
   18c78:	movhi	r1, #39	; 0x27
   18c7c:	strbhi	r1, [r8, r2]
   18c80:	add	r2, fp, #3
   18c84:	cmp	r9, r2
   18c88:	bls	19b68 <__assert_fail@plt+0x8798>
   18c8c:	mov	r1, #92	; 0x5c
   18c90:	strb	r1, [r8, r2]
   18c94:	add	fp, fp, #4
   18c98:	str	r3, [sp, #36]	; 0x24
   18c9c:	mov	r5, #0
   18ca0:	mov	r4, #48	; 0x30
   18ca4:	b	18f7c <__assert_fail@plt+0x7bac>
   18ca8:	cmp	r9, fp
   18cac:	bhi	18cd4 <__assert_fail@plt+0x7904>
   18cb0:	add	r1, fp, #1
   18cb4:	ldr	r2, [sp, #56]	; 0x38
   18cb8:	cmp	r2, #0
   18cbc:	bne	18cfc <__assert_fail@plt+0x792c>
   18cc0:	mov	r3, r5
   18cc4:	ldr	r5, [sp, #56]	; 0x38
   18cc8:	mov	fp, r1
   18ccc:	mov	r4, #48	; 0x30
   18cd0:	b	18f30 <__assert_fail@plt+0x7b60>
   18cd4:	mov	r2, #92	; 0x5c
   18cd8:	strb	r2, [r8, fp]
   18cdc:	add	r1, fp, #1
   18ce0:	ldr	r2, [sp, #56]	; 0x38
   18ce4:	cmp	r2, #0
   18ce8:	moveq	r3, r5
   18cec:	moveq	r5, r2
   18cf0:	moveq	fp, r1
   18cf4:	moveq	r4, #48	; 0x30
   18cf8:	beq	18f7c <__assert_fail@plt+0x7bac>
   18cfc:	add	r2, r6, #1
   18d00:	ldr	r0, [sp, #24]
   18d04:	cmp	r2, r0
   18d08:	bcs	18d24 <__assert_fail@plt+0x7954>
   18d0c:	ldr	r0, [sp, #48]	; 0x30
   18d10:	ldrb	r2, [r0, r2]
   18d14:	sub	r2, r2, #48	; 0x30
   18d18:	uxtb	r2, r2
   18d1c:	cmp	r2, #9
   18d20:	bls	18d3c <__assert_fail@plt+0x796c>
   18d24:	mov	r2, r3
   18d28:	mov	r3, r5
   18d2c:	mov	r5, r2
   18d30:	mov	fp, r1
   18d34:	mov	r4, #48	; 0x30
   18d38:	b	18f54 <__assert_fail@plt+0x7b84>
   18d3c:	cmp	r9, r1
   18d40:	movhi	r2, #48	; 0x30
   18d44:	strbhi	r2, [r8, r1]
   18d48:	add	r2, fp, #2
   18d4c:	cmp	r9, r2
   18d50:	movhi	r1, #48	; 0x30
   18d54:	strbhi	r1, [r8, r2]
   18d58:	add	r1, fp, #3
   18d5c:	b	18d24 <__assert_fail@plt+0x7954>
   18d60:	mov	r3, #0
   18d64:	str	r3, [sp, #44]	; 0x2c
   18d68:	cmp	sl, #2
   18d6c:	beq	18d88 <__assert_fail@plt+0x79b8>
   18d70:	cmp	sl, #5
   18d74:	beq	18da0 <__assert_fail@plt+0x79d0>
   18d78:	mov	r5, #0
   18d7c:	mov	r3, r5
   18d80:	mov	r4, #63	; 0x3f
   18d84:	b	18f30 <__assert_fail@plt+0x7b60>
   18d88:	ldr	r3, [sp, #32]
   18d8c:	cmp	r3, #0
   18d90:	bne	19ab8 <__assert_fail@plt+0x86e8>
   18d94:	mov	r5, r3
   18d98:	mov	r4, #63	; 0x3f
   18d9c:	b	19498 <__assert_fail@plt+0x80c8>
   18da0:	ldr	r3, [sp, #156]	; 0x9c
   18da4:	tst	r3, #4
   18da8:	beq	198d0 <__assert_fail@plt+0x8500>
   18dac:	add	r2, r6, #2
   18db0:	ldr	r3, [sp, #24]
   18db4:	cmp	r2, r3
   18db8:	bcs	198e0 <__assert_fail@plt+0x8510>
   18dbc:	ldr	r3, [sp, #48]	; 0x30
   18dc0:	add	r3, r3, r6
   18dc4:	ldrb	r4, [r3, #1]
   18dc8:	cmp	r4, #63	; 0x3f
   18dcc:	movne	r5, #0
   18dd0:	movne	r3, r5
   18dd4:	movne	r4, #63	; 0x3f
   18dd8:	bne	18f30 <__assert_fail@plt+0x7b60>
   18ddc:	ldr	r3, [sp, #48]	; 0x30
   18de0:	ldrb	r1, [r3, r2]
   18de4:	sub	r3, r1, #33	; 0x21
   18de8:	cmp	r3, #29
   18dec:	ldrls	pc, [pc, r3, lsl #2]
   18df0:	b	198f0 <__assert_fail@plt+0x8520>
   18df4:	andeq	r8, r1, ip, ror #28
   18df8:	strdeq	r9, [r1], -r0
   18dfc:	strdeq	r9, [r1], -r0
   18e00:	strdeq	r9, [r1], -r0
   18e04:	strdeq	r9, [r1], -r0
   18e08:	strdeq	r9, [r1], -r0
   18e0c:	andeq	r8, r1, ip, ror #28
   18e10:	andeq	r8, r1, ip, ror #28
   18e14:	andeq	r8, r1, ip, ror #28
   18e18:	strdeq	r9, [r1], -r0
   18e1c:	strdeq	r9, [r1], -r0
   18e20:	strdeq	r9, [r1], -r0
   18e24:	andeq	r8, r1, ip, ror #28
   18e28:	strdeq	r9, [r1], -r0
   18e2c:	andeq	r8, r1, ip, ror #28
   18e30:	strdeq	r9, [r1], -r0
   18e34:	strdeq	r9, [r1], -r0
   18e38:	strdeq	r9, [r1], -r0
   18e3c:	strdeq	r9, [r1], -r0
   18e40:	strdeq	r9, [r1], -r0
   18e44:	strdeq	r9, [r1], -r0
   18e48:	strdeq	r9, [r1], -r0
   18e4c:	strdeq	r9, [r1], -r0
   18e50:	strdeq	r9, [r1], -r0
   18e54:	strdeq	r9, [r1], -r0
   18e58:	strdeq	r9, [r1], -r0
   18e5c:	strdeq	r9, [r1], -r0
   18e60:	andeq	r8, r1, ip, ror #28
   18e64:	andeq	r8, r1, ip, ror #28
   18e68:	andeq	r8, r1, ip, ror #28
   18e6c:	ldr	r3, [sp, #32]
   18e70:	cmp	r3, #0
   18e74:	bne	19b5c <__assert_fail@plt+0x878c>
   18e78:	cmp	r9, fp
   18e7c:	movhi	r3, #63	; 0x3f
   18e80:	strbhi	r3, [r8, fp]
   18e84:	add	r3, fp, #1
   18e88:	cmp	r9, r3
   18e8c:	movhi	r0, #34	; 0x22
   18e90:	strbhi	r0, [r8, r3]
   18e94:	add	r3, fp, #2
   18e98:	cmp	r9, r3
   18e9c:	movhi	r0, #34	; 0x22
   18ea0:	strbhi	r0, [r8, r3]
   18ea4:	add	r3, fp, #3
   18ea8:	cmp	r9, r3
   18eac:	movhi	r0, #63	; 0x3f
   18eb0:	strbhi	r0, [r8, r3]
   18eb4:	add	fp, fp, #4
   18eb8:	ldr	r3, [sp, #32]
   18ebc:	mov	r5, r3
   18ec0:	mov	r4, r1
   18ec4:	mov	r6, r2
   18ec8:	b	18f30 <__assert_fail@plt+0x7b60>
   18ecc:	mov	r3, #0
   18ed0:	str	r3, [sp, #44]	; 0x2c
   18ed4:	mov	r4, #8
   18ed8:	mov	r3, #98	; 0x62
   18edc:	b	18f1c <__assert_fail@plt+0x7b4c>
   18ee0:	mov	r3, #0
   18ee4:	str	r3, [sp, #44]	; 0x2c
   18ee8:	mov	r4, #12
   18eec:	mov	r3, #102	; 0x66
   18ef0:	b	18f1c <__assert_fail@plt+0x7b4c>
   18ef4:	mov	r3, #0
   18ef8:	str	r3, [sp, #44]	; 0x2c
   18efc:	mov	r4, #13
   18f00:	mov	r3, #114	; 0x72
   18f04:	ldr	r2, [sp, #32]
   18f08:	cmp	sl, #2
   18f0c:	movne	r2, #0
   18f10:	andeq	r2, r2, #1
   18f14:	cmp	r2, #0
   18f18:	bne	1933c <__assert_fail@plt+0x7f6c>
   18f1c:	ldr	r2, [sp, #28]
   18f20:	cmp	r2, #0
   18f24:	bne	19924 <__assert_fail@plt+0x8554>
   18f28:	mov	r5, r2
   18f2c:	mov	r3, r2
   18f30:	ldr	r2, [sp, #28]
   18f34:	eor	r2, r2, #1
   18f38:	cmp	sl, #2
   18f3c:	orreq	r2, r2, #1
   18f40:	eor	r2, r2, #1
   18f44:	ldr	r1, [sp, #32]
   18f48:	orr	r2, r1, r2
   18f4c:	tst	r2, #255	; 0xff
   18f50:	beq	18f7c <__assert_fail@plt+0x7bac>
   18f54:	ldr	r2, [sp, #160]	; 0xa0
   18f58:	cmp	r2, #0
   18f5c:	beq	18f7c <__assert_fail@plt+0x7bac>
   18f60:	ubfx	r1, r4, #5, #8
   18f64:	and	r2, r4, #31
   18f68:	ldr	r0, [sp, #160]	; 0xa0
   18f6c:	ldr	r1, [r0, r1, lsl #2]
   18f70:	lsr	r2, r1, r2
   18f74:	tst	r2, #1
   18f78:	bne	18f88 <__assert_fail@plt+0x7bb8>
   18f7c:	ldr	r2, [sp, #44]	; 0x2c
   18f80:	cmp	r2, #0
   18f84:	beq	192dc <__assert_fail@plt+0x7f0c>
   18f88:	ldr	r3, [sp, #32]
   18f8c:	cmp	r3, #0
   18f90:	bne	19adc <__assert_fail@plt+0x870c>
   18f94:	ldr	r3, [sp, #36]	; 0x24
   18f98:	eor	r3, r3, #1
   18f9c:	cmp	sl, #2
   18fa0:	movne	r3, #0
   18fa4:	andeq	r3, r3, #1
   18fa8:	cmp	r3, #0
   18fac:	beq	18fe4 <__assert_fail@plt+0x7c14>
   18fb0:	cmp	r9, fp
   18fb4:	movhi	r2, #39	; 0x27
   18fb8:	strbhi	r2, [r8, fp]
   18fbc:	add	r2, fp, #1
   18fc0:	cmp	r9, r2
   18fc4:	movhi	r1, #36	; 0x24
   18fc8:	strbhi	r1, [r8, r2]
   18fcc:	add	r2, fp, #2
   18fd0:	cmp	r9, r2
   18fd4:	movhi	r1, #39	; 0x27
   18fd8:	strbhi	r1, [r8, r2]
   18fdc:	add	fp, fp, #3
   18fe0:	str	r3, [sp, #36]	; 0x24
   18fe4:	cmp	r9, fp
   18fe8:	movhi	r3, #92	; 0x5c
   18fec:	strbhi	r3, [r8, fp]
   18ff0:	add	fp, fp, #1
   18ff4:	cmp	fp, r9
   18ff8:	strbcc	r4, [r8, fp]
   18ffc:	add	fp, fp, #1
   19000:	cmp	r5, #0
   19004:	ldr	r3, [sp, #40]	; 0x28
   19008:	moveq	r3, r5
   1900c:	str	r3, [sp, #40]	; 0x28
   19010:	add	r6, r6, #1
   19014:	ldr	r3, [sp, #24]
   19018:	cmn	r3, #1
   1901c:	beq	1994c <__assert_fail@plt+0x857c>
   19020:	ldr	r3, [sp, #24]
   19024:	subs	r5, r3, r6
   19028:	movne	r5, #1
   1902c:	cmp	r5, #0
   19030:	beq	19960 <__assert_fail@plt+0x8590>
   19034:	ldr	r3, [sp, #28]
   19038:	cmp	sl, #2
   1903c:	moveq	r3, #0
   19040:	andne	r3, r3, #1
   19044:	str	r3, [sp, #56]	; 0x38
   19048:	ldr	r2, [sp, #52]	; 0x34
   1904c:	adds	r7, r2, #0
   19050:	movne	r7, #1
   19054:	ands	r3, r3, r7
   19058:	str	r3, [sp, #44]	; 0x2c
   1905c:	bne	1897c <__assert_fail@plt+0x75ac>
   19060:	ldr	r3, [sp, #48]	; 0x30
   19064:	ldrb	r4, [r3, r6]
   19068:	cmp	r4, #126	; 0x7e
   1906c:	ldrls	pc, [pc, r4, lsl #2]
   19070:	b	194a8 <__assert_fail@plt+0x80d8>
   19074:	andeq	r8, r1, r0, lsl #24
   19078:	andeq	r9, r1, r8, lsr #9
   1907c:	andeq	r9, r1, r8, lsr #9
   19080:	andeq	r9, r1, r8, lsr #9
   19084:	andeq	r9, r1, r8, lsr #9
   19088:	andeq	r9, r1, r8, lsr #9
   1908c:	andeq	r9, r1, r8, lsr #9
   19090:	andeq	r9, r1, r8, asr #6
   19094:	ldrdeq	r8, [r1], -r4
   19098:	andeq	r9, r1, r8, ror r2
   1909c:	andeq	r9, r1, ip, lsl r3
   190a0:	andeq	r9, r1, ip, lsl #5
   190a4:	andeq	r8, r1, r8, ror #29
   190a8:	strdeq	r8, [r1], -ip
   190ac:	andeq	r9, r1, r8, lsr #9
   190b0:	andeq	r9, r1, r8, lsr #9
   190b4:	andeq	r9, r1, r8, lsr #9
   190b8:	andeq	r9, r1, r8, lsr #9
   190bc:	andeq	r9, r1, r8, lsr #9
   190c0:	andeq	r9, r1, r8, lsr #9
   190c4:	andeq	r9, r1, r8, lsr #9
   190c8:	andeq	r9, r1, r8, lsr #9
   190cc:	andeq	r9, r1, r8, lsr #9
   190d0:	andeq	r9, r1, r8, lsr #9
   190d4:	andeq	r9, r1, r8, lsr #9
   190d8:	andeq	r9, r1, r8, lsr #9
   190dc:	andeq	r9, r1, r8, lsr #9
   190e0:	andeq	r9, r1, r8, lsr #9
   190e4:	andeq	r9, r1, r8, lsr #9
   190e8:	andeq	r9, r1, r8, lsr #9
   190ec:	andeq	r9, r1, r8, lsr #9
   190f0:	andeq	r9, r1, r8, lsr #9
   190f4:	andeq	r9, r1, r4, asr #7
   190f8:	andeq	r9, r1, r0, asr #7
   190fc:	andeq	r9, r1, r0, asr #7
   19100:	andeq	r9, r1, r0, lsl #7
   19104:	andeq	r9, r1, r0, asr #7
   19108:	andeq	r9, r1, r8, asr #17
   1910c:	andeq	r9, r1, r0, asr #7
   19110:	andeq	r9, r1, r8, lsl #8
   19114:	andeq	r9, r1, r0, asr #7
   19118:	andeq	r9, r1, r0, asr #7
   1911c:	andeq	r9, r1, r0, asr #7
   19120:	andeq	r9, r1, r8, asr #17
   19124:	andeq	r9, r1, r8, asr #17
   19128:	andeq	r9, r1, r8, asr #17
   1912c:	andeq	r9, r1, r8, asr #17
   19130:	andeq	r9, r1, r8, asr #17
   19134:	andeq	r9, r1, r8, asr #17
   19138:	andeq	r9, r1, r8, asr #17
   1913c:	andeq	r9, r1, r8, asr #17
   19140:	andeq	r9, r1, r8, asr #17
   19144:	andeq	r9, r1, r8, asr #17
   19148:	andeq	r9, r1, r8, asr #17
   1914c:	andeq	r9, r1, r8, asr #17
   19150:	andeq	r9, r1, r8, asr #17
   19154:	andeq	r9, r1, r8, asr #17
   19158:	andeq	r9, r1, r8, asr #17
   1915c:	andeq	r9, r1, r8, asr #17
   19160:	andeq	r9, r1, r0, asr #7
   19164:	andeq	r9, r1, r0, asr #7
   19168:	andeq	r9, r1, r0, asr #7
   1916c:	andeq	r9, r1, r0, asr #7
   19170:	andeq	r8, r1, r8, ror #26
   19174:	andeq	r9, r1, r8, lsr #9
   19178:	andeq	r9, r1, r8, asr #17
   1917c:	andeq	r9, r1, r8, asr #17
   19180:	andeq	r9, r1, r8, asr #17
   19184:	andeq	r9, r1, r8, asr #17
   19188:	andeq	r9, r1, r8, asr #17
   1918c:	andeq	r9, r1, r8, asr #17
   19190:	andeq	r9, r1, r8, asr #17
   19194:	andeq	r9, r1, r8, asr #17
   19198:	andeq	r9, r1, r8, asr #17
   1919c:	andeq	r9, r1, r8, asr #17
   191a0:	andeq	r9, r1, r8, asr #17
   191a4:	andeq	r9, r1, r8, asr #17
   191a8:	andeq	r9, r1, r8, asr #17
   191ac:	andeq	r9, r1, r8, asr #17
   191b0:	andeq	r9, r1, r8, asr #17
   191b4:	andeq	r9, r1, r8, asr #17
   191b8:	andeq	r9, r1, r8, asr #17
   191bc:	andeq	r9, r1, r8, asr #17
   191c0:	andeq	r9, r1, r8, asr #17
   191c4:	andeq	r9, r1, r8, asr #17
   191c8:	andeq	r9, r1, r8, asr #17
   191cc:	andeq	r9, r1, r8, asr #17
   191d0:	andeq	r9, r1, r8, asr #17
   191d4:	andeq	r9, r1, r8, asr #17
   191d8:	andeq	r9, r1, r8, asr #17
   191dc:	andeq	r9, r1, r8, asr #17
   191e0:	andeq	r9, r1, r0, asr #7
   191e4:	andeq	r9, r1, r0, lsr #5
   191e8:	andeq	r9, r1, r8, asr #17
   191ec:	andeq	r9, r1, r0, asr #7
   191f0:	andeq	r9, r1, r8, asr #17
   191f4:	andeq	r9, r1, r0, asr #7
   191f8:	andeq	r9, r1, r8, asr #17
   191fc:	andeq	r9, r1, r8, asr #17
   19200:	andeq	r9, r1, r8, asr #17
   19204:	andeq	r9, r1, r8, asr #17
   19208:	andeq	r9, r1, r8, asr #17
   1920c:	andeq	r9, r1, r8, asr #17
   19210:	andeq	r9, r1, r8, asr #17
   19214:	andeq	r9, r1, r8, asr #17
   19218:	andeq	r9, r1, r8, asr #17
   1921c:	andeq	r9, r1, r8, asr #17
   19220:	andeq	r9, r1, r8, asr #17
   19224:	andeq	r9, r1, r8, asr #17
   19228:	andeq	r9, r1, r8, asr #17
   1922c:	andeq	r9, r1, r8, asr #17
   19230:	andeq	r9, r1, r8, asr #17
   19234:	andeq	r9, r1, r8, asr #17
   19238:	andeq	r9, r1, r8, asr #17
   1923c:	andeq	r9, r1, r8, asr #17
   19240:	andeq	r9, r1, r8, asr #17
   19244:	andeq	r9, r1, r8, asr #17
   19248:	andeq	r9, r1, r8, asr #17
   1924c:	andeq	r9, r1, r8, asr #17
   19250:	andeq	r9, r1, r8, asr #17
   19254:	andeq	r9, r1, r8, asr #17
   19258:	andeq	r9, r1, r8, asr #17
   1925c:	andeq	r9, r1, r8, asr #17
   19260:	andeq	r9, r1, r0, ror #6
   19264:	andeq	r9, r1, r0, asr #7
   19268:	andeq	r9, r1, r0, ror #6
   1926c:	andeq	r9, r1, r0, lsl #7
   19270:	mov	r3, #0
   19274:	str	r3, [sp, #44]	; 0x2c
   19278:	mov	r4, #9
   1927c:	mov	r3, #116	; 0x74
   19280:	b	18f04 <__assert_fail@plt+0x7b34>
   19284:	mov	r3, #0
   19288:	str	r3, [sp, #44]	; 0x2c
   1928c:	mov	r4, #11
   19290:	mov	r3, #118	; 0x76
   19294:	b	18f1c <__assert_fail@plt+0x7b4c>
   19298:	mov	r3, #0
   1929c:	str	r3, [sp, #44]	; 0x2c
   192a0:	cmp	sl, #2
   192a4:	beq	192c8 <__assert_fail@plt+0x7ef8>
   192a8:	ldr	r3, [sp, #28]
   192ac:	ldr	r2, [sp, #32]
   192b0:	and	r3, r3, r2
   192b4:	tst	r7, r3
   192b8:	bne	1993c <__assert_fail@plt+0x856c>
   192bc:	mov	r4, #92	; 0x5c
   192c0:	mov	r3, r4
   192c4:	b	18f1c <__assert_fail@plt+0x7b4c>
   192c8:	ldr	r3, [sp, #32]
   192cc:	cmp	r3, #0
   192d0:	bne	19ac4 <__assert_fail@plt+0x86f4>
   192d4:	mov	r5, r3
   192d8:	mov	r4, #92	; 0x5c
   192dc:	eor	r3, r3, #1
   192e0:	ldr	r2, [sp, #36]	; 0x24
   192e4:	and	r3, r3, r2
   192e8:	tst	r3, #255	; 0xff
   192ec:	beq	18ff4 <__assert_fail@plt+0x7c24>
   192f0:	cmp	r9, fp
   192f4:	movhi	r3, #39	; 0x27
   192f8:	strbhi	r3, [r8, fp]
   192fc:	add	r3, fp, #1
   19300:	cmp	r9, r3
   19304:	movhi	r2, #39	; 0x27
   19308:	strbhi	r2, [r8, r3]
   1930c:	add	fp, fp, #2
   19310:	mov	r3, #0
   19314:	str	r3, [sp, #36]	; 0x24
   19318:	b	18ff4 <__assert_fail@plt+0x7c24>
   1931c:	mov	r3, #110	; 0x6e
   19320:	b	18f04 <__assert_fail@plt+0x7b34>
   19324:	mov	r3, #110	; 0x6e
   19328:	b	18f04 <__assert_fail@plt+0x7b34>
   1932c:	mov	r3, #0
   19330:	str	r3, [sp, #44]	; 0x2c
   19334:	mov	r3, #110	; 0x6e
   19338:	b	18f04 <__assert_fail@plt+0x7b34>
   1933c:	mov	r8, r9
   19340:	mov	r7, #2
   19344:	b	19ae4 <__assert_fail@plt+0x8714>
   19348:	mov	r3, #97	; 0x61
   1934c:	b	18f1c <__assert_fail@plt+0x7b4c>
   19350:	mov	r3, #97	; 0x61
   19354:	b	18f1c <__assert_fail@plt+0x7b4c>
   19358:	mov	r3, #0
   1935c:	str	r3, [sp, #44]	; 0x2c
   19360:	ldr	r3, [sp, #24]
   19364:	cmn	r3, #1
   19368:	beq	19394 <__assert_fail@plt+0x7fc4>
   1936c:	ldr	r3, [sp, #24]
   19370:	subs	r3, r3, #1
   19374:	movne	r3, #1
   19378:	cmp	r3, #0
   1937c:	bne	198fc <__assert_fail@plt+0x852c>
   19380:	cmp	r6, #0
   19384:	beq	193c4 <__assert_fail@plt+0x7ff4>
   19388:	mov	r5, #0
   1938c:	mov	r3, r5
   19390:	b	18f30 <__assert_fail@plt+0x7b60>
   19394:	ldr	r3, [sp, #48]	; 0x30
   19398:	ldrb	r3, [r3, #1]
   1939c:	adds	r3, r3, #0
   193a0:	movne	r3, #1
   193a4:	b	19378 <__assert_fail@plt+0x7fa8>
   193a8:	mov	r3, #0
   193ac:	str	r3, [sp, #44]	; 0x2c
   193b0:	b	19380 <__assert_fail@plt+0x7fb0>
   193b4:	mov	r3, #0
   193b8:	str	r3, [sp, #44]	; 0x2c
   193bc:	b	193c4 <__assert_fail@plt+0x7ff4>
   193c0:	ldr	r5, [sp, #44]	; 0x2c
   193c4:	ldr	r3, [sp, #32]
   193c8:	cmp	sl, #2
   193cc:	movne	r3, #0
   193d0:	andeq	r3, r3, #1
   193d4:	cmp	r3, #0
   193d8:	beq	18f30 <__assert_fail@plt+0x7b60>
   193dc:	mov	r8, r9
   193e0:	mov	r7, #2
   193e4:	b	19ae4 <__assert_fail@plt+0x8714>
   193e8:	ldr	r5, [sp, #32]
   193ec:	b	193c4 <__assert_fail@plt+0x7ff4>
   193f0:	mov	r3, #0
   193f4:	str	r3, [sp, #44]	; 0x2c
   193f8:	mov	r5, r3
   193fc:	b	193c4 <__assert_fail@plt+0x7ff4>
   19400:	mov	r3, #0
   19404:	str	r3, [sp, #44]	; 0x2c
   19408:	cmp	sl, #2
   1940c:	strne	r5, [sp, #68]	; 0x44
   19410:	movne	r3, #0
   19414:	movne	r4, #39	; 0x27
   19418:	bne	18f30 <__assert_fail@plt+0x7b60>
   1941c:	ldr	r3, [sp, #32]
   19420:	cmp	r3, #0
   19424:	bne	19ad0 <__assert_fail@plt+0x8700>
   19428:	ldr	r3, [sp, #72]	; 0x48
   1942c:	clz	r3, r3
   19430:	lsr	r3, r3, #5
   19434:	cmp	r9, #0
   19438:	moveq	r3, #0
   1943c:	cmp	r3, #0
   19440:	movne	r3, #0
   19444:	bne	1946c <__assert_fail@plt+0x809c>
   19448:	cmp	r9, fp
   1944c:	movhi	r3, #39	; 0x27
   19450:	strbhi	r3, [r8, fp]
   19454:	add	r3, fp, #1
   19458:	cmp	r9, r3
   1945c:	movhi	r2, #92	; 0x5c
   19460:	strbhi	r2, [r8, r3]
   19464:	mov	r3, r9
   19468:	ldr	r9, [sp, #72]	; 0x48
   1946c:	add	r2, fp, #2
   19470:	cmp	r2, r3
   19474:	movcc	r1, #39	; 0x27
   19478:	strbcc	r1, [r8, r2]
   1947c:	add	fp, fp, #3
   19480:	str	r5, [sp, #68]	; 0x44
   19484:	ldr	r2, [sp, #32]
   19488:	str	r2, [sp, #36]	; 0x24
   1948c:	str	r9, [sp, #72]	; 0x48
   19490:	mov	r9, r3
   19494:	mov	r4, #39	; 0x27
   19498:	mov	r3, #0
   1949c:	b	18f7c <__assert_fail@plt+0x7bac>
   194a0:	mov	r3, #0
   194a4:	str	r3, [sp, #44]	; 0x2c
   194a8:	ldr	r7, [sp, #76]	; 0x4c
   194ac:	cmp	r7, #1
   194b0:	bne	194e8 <__assert_fail@plt+0x8118>
   194b4:	bl	1125c <__ctype_b_loc@plt>
   194b8:	ldr	r2, [r0]
   194bc:	lsl	r3, r4, #1
   194c0:	ldrh	r5, [r2, r3]
   194c4:	ubfx	r5, r5, #14, #1
   194c8:	mov	ip, r7
   194cc:	eor	r3, r5, #1
   194d0:	ldr	r2, [sp, #28]
   194d4:	and	r3, r3, r2
   194d8:	ands	r3, r3, #255	; 0xff
   194dc:	beq	18f30 <__assert_fail@plt+0x7b60>
   194e0:	mov	r5, #0
   194e4:	b	19744 <__assert_fail@plt+0x8374>
   194e8:	mov	r2, #0
   194ec:	mov	r3, #0
   194f0:	strd	r2, [sp, #104]	; 0x68
   194f4:	ldr	r3, [sp, #24]
   194f8:	cmn	r3, #1
   194fc:	beq	19520 <__assert_fail@plt+0x8150>
   19500:	mov	r3, #0
   19504:	str	r4, [sp, #88]	; 0x58
   19508:	str	fp, [sp, #92]	; 0x5c
   1950c:	str	r8, [sp, #56]	; 0x38
   19510:	mov	r8, r3
   19514:	str	r9, [sp, #84]	; 0x54
   19518:	ldr	r9, [sp, #48]	; 0x30
   1951c:	b	1966c <__assert_fail@plt+0x829c>
   19520:	ldr	r0, [sp, #48]	; 0x30
   19524:	bl	11274 <strlen@plt>
   19528:	str	r0, [sp, #24]
   1952c:	b	19500 <__assert_fail@plt+0x8130>
   19530:	mov	r1, fp
   19534:	ldr	r4, [sp, #88]	; 0x58
   19538:	mov	r2, r8
   1953c:	mov	ip, r8
   19540:	ldr	fp, [sp, #92]	; 0x5c
   19544:	ldr	r8, [sp, #56]	; 0x38
   19548:	ldr	r9, [sp, #84]	; 0x54
   1954c:	ldr	r0, [sp, #24]
   19550:	cmp	r7, r0
   19554:	bcs	1970c <__assert_fail@plt+0x833c>
   19558:	ldrb	r3, [r1]
   1955c:	cmp	r3, #0
   19560:	beq	19714 <__assert_fail@plt+0x8344>
   19564:	mov	r3, r1
   19568:	add	r2, r2, #1
   1956c:	add	r1, r6, r2
   19570:	cmp	r0, r1
   19574:	bls	1971c <__assert_fail@plt+0x834c>
   19578:	ldrb	r1, [r3, #1]!
   1957c:	cmp	r1, #0
   19580:	bne	19568 <__assert_fail@plt+0x8198>
   19584:	mov	ip, r2
   19588:	mov	r5, #0
   1958c:	b	1973c <__assert_fail@plt+0x836c>
   19590:	ldr	r3, [sp, #56]	; 0x38
   19594:	str	r3, [sp, #64]	; 0x40
   19598:	ldr	r8, [sp, #84]	; 0x54
   1959c:	mov	r7, #2
   195a0:	b	19ae4 <__assert_fail@plt+0x8714>
   195a4:	cmp	r2, r7
   195a8:	beq	19648 <__assert_fail@plt+0x8278>
   195ac:	ldrb	r3, [r2], #1
   195b0:	sub	r3, r3, #91	; 0x5b
   195b4:	cmp	r3, #33	; 0x21
   195b8:	ldrls	pc, [pc, r3, lsl #2]
   195bc:	b	195a4 <__assert_fail@plt+0x81d4>
   195c0:	muleq	r1, r0, r5
   195c4:	muleq	r1, r0, r5
   195c8:	andeq	r9, r1, r4, lsr #11
   195cc:	muleq	r1, r0, r5
   195d0:	andeq	r9, r1, r4, lsr #11
   195d4:	muleq	r1, r0, r5
   195d8:	andeq	r9, r1, r4, lsr #11
   195dc:	andeq	r9, r1, r4, lsr #11
   195e0:	andeq	r9, r1, r4, lsr #11
   195e4:	andeq	r9, r1, r4, lsr #11
   195e8:	andeq	r9, r1, r4, lsr #11
   195ec:	andeq	r9, r1, r4, lsr #11
   195f0:	andeq	r9, r1, r4, lsr #11
   195f4:	andeq	r9, r1, r4, lsr #11
   195f8:	andeq	r9, r1, r4, lsr #11
   195fc:	andeq	r9, r1, r4, lsr #11
   19600:	andeq	r9, r1, r4, lsr #11
   19604:	andeq	r9, r1, r4, lsr #11
   19608:	andeq	r9, r1, r4, lsr #11
   1960c:	andeq	r9, r1, r4, lsr #11
   19610:	andeq	r9, r1, r4, lsr #11
   19614:	andeq	r9, r1, r4, lsr #11
   19618:	andeq	r9, r1, r4, lsr #11
   1961c:	andeq	r9, r1, r4, lsr #11
   19620:	andeq	r9, r1, r4, lsr #11
   19624:	andeq	r9, r1, r4, lsr #11
   19628:	andeq	r9, r1, r4, lsr #11
   1962c:	andeq	r9, r1, r4, lsr #11
   19630:	andeq	r9, r1, r4, lsr #11
   19634:	andeq	r9, r1, r4, lsr #11
   19638:	andeq	r9, r1, r4, lsr #11
   1963c:	andeq	r9, r1, r4, lsr #11
   19640:	andeq	r9, r1, r4, lsr #11
   19644:	muleq	r1, r0, r5
   19648:	ldr	r0, [sp, #100]	; 0x64
   1964c:	bl	1116c <iswprint@plt>
   19650:	cmp	r0, #0
   19654:	moveq	r5, #0
   19658:	add	r8, r8, r4
   1965c:	add	r0, sp, #104	; 0x68
   19660:	bl	11100 <mbsinit@plt>
   19664:	cmp	r0, #0
   19668:	bne	196d8 <__assert_fail@plt+0x8308>
   1966c:	add	r7, r6, r8
   19670:	add	fp, r9, r7
   19674:	add	r3, sp, #104	; 0x68
   19678:	ldr	r2, [sp, #24]
   1967c:	sub	r2, r2, r7
   19680:	mov	r1, fp
   19684:	add	r0, sp, #100	; 0x64
   19688:	bl	1bb8c <__assert_fail@plt+0xa7bc>
   1968c:	subs	r4, r0, #0
   19690:	beq	19728 <__assert_fail@plt+0x8358>
   19694:	cmn	r4, #1
   19698:	beq	196f0 <__assert_fail@plt+0x8320>
   1969c:	cmn	r4, #2
   196a0:	beq	19530 <__assert_fail@plt+0x8160>
   196a4:	ldr	r3, [sp, #32]
   196a8:	cmp	sl, #2
   196ac:	movne	r3, #0
   196b0:	andeq	r3, r3, #1
   196b4:	cmp	r3, #0
   196b8:	beq	19648 <__assert_fail@plt+0x8278>
   196bc:	cmp	r4, #1
   196c0:	bls	19648 <__assert_fail@plt+0x8278>
   196c4:	add	r2, r7, #1
   196c8:	add	r2, r9, r2
   196cc:	add	r3, r9, r4
   196d0:	add	r7, r3, r7
   196d4:	b	195ac <__assert_fail@plt+0x81dc>
   196d8:	ldr	r4, [sp, #88]	; 0x58
   196dc:	mov	ip, r8
   196e0:	ldr	fp, [sp, #92]	; 0x5c
   196e4:	ldr	r8, [sp, #56]	; 0x38
   196e8:	ldr	r9, [sp, #84]	; 0x54
   196ec:	b	1973c <__assert_fail@plt+0x836c>
   196f0:	ldr	r4, [sp, #88]	; 0x58
   196f4:	mov	ip, r8
   196f8:	ldr	fp, [sp, #92]	; 0x5c
   196fc:	ldr	r8, [sp, #56]	; 0x38
   19700:	ldr	r9, [sp, #84]	; 0x54
   19704:	mov	r5, #0
   19708:	b	1973c <__assert_fail@plt+0x836c>
   1970c:	mov	r5, #0
   19710:	b	1973c <__assert_fail@plt+0x836c>
   19714:	mov	r5, #0
   19718:	b	1973c <__assert_fail@plt+0x836c>
   1971c:	mov	ip, r2
   19720:	mov	r5, #0
   19724:	b	1973c <__assert_fail@plt+0x836c>
   19728:	ldr	r4, [sp, #88]	; 0x58
   1972c:	mov	ip, r8
   19730:	ldr	fp, [sp, #92]	; 0x5c
   19734:	ldr	r8, [sp, #56]	; 0x38
   19738:	ldr	r9, [sp, #84]	; 0x54
   1973c:	cmp	ip, #1
   19740:	bls	194cc <__assert_fail@plt+0x80fc>
   19744:	add	lr, r6, ip
   19748:	ldr	r3, [sp, #48]	; 0x30
   1974c:	add	r1, r3, r6
   19750:	mov	r3, #0
   19754:	eor	r0, r5, #1
   19758:	ldr	r2, [sp, #28]
   1975c:	and	r0, r0, r2
   19760:	uxtb	r0, r0
   19764:	str	r0, [sp, #56]	; 0x38
   19768:	mov	r7, #92	; 0x5c
   1976c:	ldr	ip, [sp, #36]	; 0x24
   19770:	str	r5, [sp, #84]	; 0x54
   19774:	ldr	r2, [sp, #44]	; 0x2c
   19778:	b	197e8 <__assert_fail@plt+0x8418>
   1977c:	cmp	r2, #0
   19780:	beq	19790 <__assert_fail@plt+0x83c0>
   19784:	cmp	r9, fp
   19788:	strbhi	r7, [r8, fp]
   1978c:	add	fp, fp, #1
   19790:	add	r5, r6, #1
   19794:	cmp	r5, lr
   19798:	bcs	198a4 <__assert_fail@plt+0x84d4>
   1979c:	eor	r2, r3, #1
   197a0:	and	r2, r2, ip
   197a4:	ands	r2, r2, #255	; 0xff
   197a8:	beq	198c0 <__assert_fail@plt+0x84f0>
   197ac:	cmp	r9, fp
   197b0:	movhi	r2, #39	; 0x27
   197b4:	strbhi	r2, [r8, fp]
   197b8:	add	r2, fp, #1
   197bc:	cmp	r9, r2
   197c0:	movhi	ip, #39	; 0x27
   197c4:	strbhi	ip, [r8, r2]
   197c8:	add	fp, fp, #2
   197cc:	ldr	ip, [sp, #56]	; 0x38
   197d0:	mov	r2, ip
   197d4:	mov	r6, r5
   197d8:	cmp	r9, fp
   197dc:	strbhi	r4, [r8, fp]
   197e0:	add	fp, fp, #1
   197e4:	ldrb	r4, [r1, #1]!
   197e8:	cmp	r0, #0
   197ec:	beq	1977c <__assert_fail@plt+0x83ac>
   197f0:	ldr	r3, [sp, #32]
   197f4:	cmp	r3, #0
   197f8:	bne	19a8c <__assert_fail@plt+0x86bc>
   197fc:	eor	r3, ip, #1
   19800:	cmp	sl, #2
   19804:	movne	r3, #0
   19808:	andeq	r3, r3, #1
   1980c:	cmp	r3, #0
   19810:	beq	19848 <__assert_fail@plt+0x8478>
   19814:	cmp	r9, fp
   19818:	movhi	ip, #39	; 0x27
   1981c:	strbhi	ip, [r8, fp]
   19820:	add	ip, fp, #1
   19824:	cmp	r9, ip
   19828:	movhi	r5, #36	; 0x24
   1982c:	strbhi	r5, [r8, ip]
   19830:	add	ip, fp, #2
   19834:	cmp	r9, ip
   19838:	movhi	r5, #39	; 0x27
   1983c:	strbhi	r5, [r8, ip]
   19840:	add	fp, fp, #3
   19844:	mov	ip, r3
   19848:	cmp	r9, fp
   1984c:	strbhi	r7, [r8, fp]
   19850:	add	r3, fp, #1
   19854:	cmp	r9, r3
   19858:	bls	19868 <__assert_fail@plt+0x8498>
   1985c:	lsr	r5, r4, #6
   19860:	add	r5, r5, #48	; 0x30
   19864:	strb	r5, [r8, r3]
   19868:	add	r3, fp, #2
   1986c:	cmp	r9, r3
   19870:	bls	19880 <__assert_fail@plt+0x84b0>
   19874:	ubfx	r5, r4, #3, #3
   19878:	add	r5, r5, #48	; 0x30
   1987c:	strb	r5, [r8, r3]
   19880:	add	fp, fp, #3
   19884:	and	r4, r4, #7
   19888:	add	r4, r4, #48	; 0x30
   1988c:	add	r5, r6, #1
   19890:	cmp	r5, lr
   19894:	bcs	198b0 <__assert_fail@plt+0x84e0>
   19898:	ldr	r3, [sp, #56]	; 0x38
   1989c:	mov	r6, r5
   198a0:	b	197d8 <__assert_fail@plt+0x8408>
   198a4:	str	ip, [sp, #36]	; 0x24
   198a8:	ldr	r5, [sp, #84]	; 0x54
   198ac:	b	192dc <__assert_fail@plt+0x7f0c>
   198b0:	str	ip, [sp, #36]	; 0x24
   198b4:	ldr	r5, [sp, #84]	; 0x54
   198b8:	mov	r3, r0
   198bc:	b	192dc <__assert_fail@plt+0x7f0c>
   198c0:	mov	r6, r5
   198c4:	b	197d8 <__assert_fail@plt+0x8408>
   198c8:	ldr	r3, [sp, #44]	; 0x2c
   198cc:	b	18f30 <__assert_fail@plt+0x7b60>
   198d0:	mov	r5, #0
   198d4:	mov	r3, r5
   198d8:	mov	r4, #63	; 0x3f
   198dc:	b	18f30 <__assert_fail@plt+0x7b60>
   198e0:	mov	r5, #0
   198e4:	mov	r3, r5
   198e8:	mov	r4, #63	; 0x3f
   198ec:	b	18f30 <__assert_fail@plt+0x7b60>
   198f0:	mov	r5, #0
   198f4:	mov	r3, r5
   198f8:	b	18f30 <__assert_fail@plt+0x7b60>
   198fc:	mov	r5, #0
   19900:	mov	r3, r5
   19904:	b	18f30 <__assert_fail@plt+0x7b60>
   19908:	ldr	r5, [sp, #44]	; 0x2c
   1990c:	ldr	r3, [sp, #32]
   19910:	b	18f30 <__assert_fail@plt+0x7b60>
   19914:	ldr	r5, [sp, #44]	; 0x2c
   19918:	mov	r3, #0
   1991c:	str	r3, [sp, #44]	; 0x2c
   19920:	b	18f30 <__assert_fail@plt+0x7b60>
   19924:	mov	r4, r3
   19928:	mov	r5, #0
   1992c:	b	18f88 <__assert_fail@plt+0x7bb8>
   19930:	mov	r5, #0
   19934:	mov	r4, #97	; 0x61
   19938:	b	18f88 <__assert_fail@plt+0x7bb8>
   1993c:	mov	r5, #0
   19940:	mov	r3, r5
   19944:	mov	r4, #92	; 0x5c
   19948:	b	192dc <__assert_fail@plt+0x7f0c>
   1994c:	ldr	r3, [sp, #48]	; 0x30
   19950:	ldrb	r5, [r3, r6]
   19954:	adds	r5, r5, #0
   19958:	movne	r5, #1
   1995c:	b	1902c <__assert_fail@plt+0x7c5c>
   19960:	cmp	sl, #2
   19964:	movne	r3, #0
   19968:	moveq	r3, #1
   1996c:	ldr	r1, [sp, #32]
   19970:	cmp	fp, #0
   19974:	andeq	r2, r3, r1
   19978:	movne	r2, #0
   1997c:	cmp	r2, #0
   19980:	bne	19aa0 <__assert_fail@plt+0x86d0>
   19984:	eor	r2, r1, #1
   19988:	uxtb	r2, r2
   1998c:	and	r3, r3, r2
   19990:	ldr	r1, [sp, #68]	; 0x44
   19994:	ands	r3, r1, r3
   19998:	beq	19a2c <__assert_fail@plt+0x865c>
   1999c:	ldr	r2, [sp, #40]	; 0x28
   199a0:	cmp	r2, #0
   199a4:	bne	199dc <__assert_fail@plt+0x860c>
   199a8:	ldr	r2, [sp, #72]	; 0x48
   199ac:	adds	r2, r2, #0
   199b0:	movne	r2, #1
   199b4:	cmp	r9, #0
   199b8:	movne	r2, #0
   199bc:	str	r2, [sp, #68]	; 0x44
   199c0:	mov	sl, #2
   199c4:	ldr	r1, [sp, #40]	; 0x28
   199c8:	str	r1, [sp, #32]
   199cc:	cmp	r2, #0
   199d0:	beq	19a20 <__assert_fail@plt+0x8650>
   199d4:	ldr	r9, [sp, #72]	; 0x48
   199d8:	b	18734 <__assert_fail@plt+0x7364>
   199dc:	ldr	r3, [sp, #168]	; 0xa8
   199e0:	str	r3, [sp, #16]
   199e4:	ldr	r3, [sp, #164]	; 0xa4
   199e8:	str	r3, [sp, #12]
   199ec:	ldr	r3, [sp, #160]	; 0xa0
   199f0:	str	r3, [sp, #8]
   199f4:	ldr	r3, [sp, #156]	; 0x9c
   199f8:	str	r3, [sp, #4]
   199fc:	mov	r3, #5
   19a00:	str	r3, [sp]
   19a04:	ldr	r3, [sp, #24]
   19a08:	ldr	r2, [sp, #48]	; 0x30
   19a0c:	ldr	r1, [sp, #72]	; 0x48
   19a10:	ldr	r0, [sp, #64]	; 0x40
   19a14:	bl	186bc <__assert_fail@plt+0x72ec>
   19a18:	mov	fp, r0
   19a1c:	b	19b3c <__assert_fail@plt+0x876c>
   19a20:	mov	r8, r9
   19a24:	mov	r2, r3
   19a28:	b	19a30 <__assert_fail@plt+0x8660>
   19a2c:	mov	r8, r9
   19a30:	ldr	r3, [sp, #60]	; 0x3c
   19a34:	cmp	r3, #0
   19a38:	moveq	r2, #0
   19a3c:	andne	r2, r2, #1
   19a40:	cmp	r2, #0
   19a44:	beq	19a74 <__assert_fail@plt+0x86a4>
   19a48:	mov	r2, r3
   19a4c:	ldrb	r3, [r3]
   19a50:	cmp	r3, #0
   19a54:	beq	19a74 <__assert_fail@plt+0x86a4>
   19a58:	ldr	r1, [sp, #64]	; 0x40
   19a5c:	cmp	r8, fp
   19a60:	strbhi	r3, [r1, fp]
   19a64:	add	fp, fp, #1
   19a68:	ldrb	r3, [r2, #1]!
   19a6c:	cmp	r3, #0
   19a70:	bne	19a5c <__assert_fail@plt+0x868c>
   19a74:	cmp	r8, fp
   19a78:	bls	19b3c <__assert_fail@plt+0x876c>
   19a7c:	mov	r3, #0
   19a80:	ldr	r2, [sp, #64]	; 0x40
   19a84:	strb	r3, [r2, fp]
   19a88:	b	19b3c <__assert_fail@plt+0x876c>
   19a8c:	mov	r8, r9
   19a90:	mov	r7, sl
   19a94:	ldr	r3, [sp, #32]
   19a98:	str	r3, [sp, #28]
   19a9c:	b	19ae4 <__assert_fail@plt+0x8714>
   19aa0:	mov	r8, r9
   19aa4:	mov	r7, #2
   19aa8:	b	19ae4 <__assert_fail@plt+0x8714>
   19aac:	mov	r8, r9
   19ab0:	mov	r7, sl
   19ab4:	b	19ae4 <__assert_fail@plt+0x8714>
   19ab8:	mov	r8, r9
   19abc:	mov	r7, sl
   19ac0:	b	19ae4 <__assert_fail@plt+0x8714>
   19ac4:	mov	r8, r9
   19ac8:	mov	r7, sl
   19acc:	b	19ae4 <__assert_fail@plt+0x8714>
   19ad0:	mov	r8, r9
   19ad4:	mov	r7, sl
   19ad8:	b	19ae4 <__assert_fail@plt+0x8714>
   19adc:	mov	r8, r9
   19ae0:	mov	r7, sl
   19ae4:	ldr	r3, [sp, #28]
   19ae8:	cmp	r7, #2
   19aec:	movne	r3, #0
   19af0:	andeq	r3, r3, #1
   19af4:	cmp	r3, #0
   19af8:	movne	r7, #4
   19afc:	ldr	r3, [sp, #168]	; 0xa8
   19b00:	str	r3, [sp, #16]
   19b04:	ldr	r3, [sp, #164]	; 0xa4
   19b08:	str	r3, [sp, #12]
   19b0c:	mov	r3, #0
   19b10:	str	r3, [sp, #8]
   19b14:	ldr	r3, [sp, #156]	; 0x9c
   19b18:	bic	r3, r3, #2
   19b1c:	str	r3, [sp, #4]
   19b20:	str	r7, [sp]
   19b24:	ldr	r3, [sp, #24]
   19b28:	ldr	r2, [sp, #48]	; 0x30
   19b2c:	mov	r1, r8
   19b30:	ldr	r0, [sp, #64]	; 0x40
   19b34:	bl	186bc <__assert_fail@plt+0x72ec>
   19b38:	mov	fp, r0
   19b3c:	mov	r0, fp
   19b40:	add	sp, sp, #116	; 0x74
   19b44:	ldrd	r4, [sp]
   19b48:	ldrd	r6, [sp, #8]
   19b4c:	ldrd	r8, [sp, #16]
   19b50:	ldrd	sl, [sp, #24]
   19b54:	add	sp, sp, #32
   19b58:	pop	{pc}		; (ldr pc, [sp], #4)
   19b5c:	mov	r8, r9
   19b60:	mov	r7, sl
   19b64:	b	19afc <__assert_fail@plt+0x872c>
   19b68:	add	fp, fp, #4
   19b6c:	str	r3, [sp, #36]	; 0x24
   19b70:	mov	r5, #0
   19b74:	mov	r4, #48	; 0x30
   19b78:	b	18f30 <__assert_fail@plt+0x7b60>
   19b7c:	mov	r3, #1
   19b80:	str	r3, [sp, #32]
   19b84:	str	r3, [sp, #28]
   19b88:	str	r3, [sp, #52]	; 0x34
   19b8c:	movw	r3, #65520	; 0xfff0
   19b90:	movt	r3, #1
   19b94:	str	r3, [sp, #60]	; 0x3c
   19b98:	mov	fp, #0
   19b9c:	mov	sl, #5
   19ba0:	b	18794 <__assert_fail@plt+0x73c4>
   19ba4:	ldr	r3, [sp, #48]	; 0x30
   19ba8:	ldrb	r4, [r3, r6]
   19bac:	cmp	r4, #126	; 0x7e
   19bb0:	ldrls	pc, [pc, r4, lsl #2]
   19bb4:	b	194a0 <__assert_fail@plt+0x80d0>
   19bb8:	andeq	r8, r1, r8, lsr #24
   19bbc:	andeq	r9, r1, r0, lsr #9
   19bc0:	andeq	r9, r1, r0, lsr #9
   19bc4:	andeq	r9, r1, r0, lsr #9
   19bc8:	andeq	r9, r1, r0, lsr #9
   19bcc:	andeq	r9, r1, r0, lsr #9
   19bd0:	andeq	r9, r1, r0, lsr #9
   19bd4:	andeq	r9, r1, r0, lsr r9
   19bd8:	andeq	r8, r1, ip, asr #29
   19bdc:	andeq	r9, r1, r0, ror r2
   19be0:	andeq	r9, r1, ip, lsr #6
   19be4:	andeq	r9, r1, r4, lsl #5
   19be8:	andeq	r8, r1, r0, ror #29
   19bec:	strdeq	r8, [r1], -r4
   19bf0:	andeq	r9, r1, r0, lsr #9
   19bf4:	andeq	r9, r1, r0, lsr #9
   19bf8:	andeq	r9, r1, r0, lsr #9
   19bfc:	andeq	r9, r1, r0, lsr #9
   19c00:	andeq	r9, r1, r0, lsr #9
   19c04:	andeq	r9, r1, r0, lsr #9
   19c08:	andeq	r9, r1, r0, lsr #9
   19c0c:	andeq	r9, r1, r0, lsr #9
   19c10:	andeq	r9, r1, r0, lsr #9
   19c14:	andeq	r9, r1, r0, lsr #9
   19c18:	andeq	r9, r1, r0, lsr #9
   19c1c:	andeq	r9, r1, r0, lsr #9
   19c20:	andeq	r9, r1, r0, lsr #9
   19c24:	andeq	r9, r1, r0, lsr #9
   19c28:	andeq	r9, r1, r0, lsr #9
   19c2c:	andeq	r9, r1, r0, lsr #9
   19c30:	andeq	r9, r1, r0, lsr #9
   19c34:	andeq	r9, r1, r0, lsr #9
   19c38:			; <UNDEFINED> instruction: 0x000193b4
   19c3c:	strdeq	r9, [r1], -r0
   19c40:	strdeq	r9, [r1], -r0
   19c44:	andeq	r9, r1, r8, lsr #7
   19c48:	strdeq	r9, [r1], -r0
   19c4c:	andeq	r9, r1, r4, lsl r9
   19c50:	strdeq	r9, [r1], -r0
   19c54:	andeq	r9, r1, r0, lsl #8
   19c58:	strdeq	r9, [r1], -r0
   19c5c:	strdeq	r9, [r1], -r0
   19c60:	strdeq	r9, [r1], -r0
   19c64:	andeq	r9, r1, r4, lsl r9
   19c68:	andeq	r9, r1, r4, lsl r9
   19c6c:	andeq	r9, r1, r4, lsl r9
   19c70:	andeq	r9, r1, r4, lsl r9
   19c74:	andeq	r9, r1, r4, lsl r9
   19c78:	andeq	r9, r1, r4, lsl r9
   19c7c:	andeq	r9, r1, r4, lsl r9
   19c80:	andeq	r9, r1, r4, lsl r9
   19c84:	andeq	r9, r1, r4, lsl r9
   19c88:	andeq	r9, r1, r4, lsl r9
   19c8c:	andeq	r9, r1, r4, lsl r9
   19c90:	andeq	r9, r1, r4, lsl r9
   19c94:	andeq	r9, r1, r4, lsl r9
   19c98:	andeq	r9, r1, r4, lsl r9
   19c9c:	andeq	r9, r1, r4, lsl r9
   19ca0:	andeq	r9, r1, r4, lsl r9
   19ca4:	strdeq	r9, [r1], -r0
   19ca8:	strdeq	r9, [r1], -r0
   19cac:	strdeq	r9, [r1], -r0
   19cb0:	strdeq	r9, [r1], -r0
   19cb4:	andeq	r8, r1, r0, ror #26
   19cb8:	andeq	r9, r1, r0, lsr #9
   19cbc:	andeq	r9, r1, r4, lsl r9
   19cc0:	andeq	r9, r1, r4, lsl r9
   19cc4:	andeq	r9, r1, r4, lsl r9
   19cc8:	andeq	r9, r1, r4, lsl r9
   19ccc:	andeq	r9, r1, r4, lsl r9
   19cd0:	andeq	r9, r1, r4, lsl r9
   19cd4:	andeq	r9, r1, r4, lsl r9
   19cd8:	andeq	r9, r1, r4, lsl r9
   19cdc:	andeq	r9, r1, r4, lsl r9
   19ce0:	andeq	r9, r1, r4, lsl r9
   19ce4:	andeq	r9, r1, r4, lsl r9
   19ce8:	andeq	r9, r1, r4, lsl r9
   19cec:	andeq	r9, r1, r4, lsl r9
   19cf0:	andeq	r9, r1, r4, lsl r9
   19cf4:	andeq	r9, r1, r4, lsl r9
   19cf8:	andeq	r9, r1, r4, lsl r9
   19cfc:	andeq	r9, r1, r4, lsl r9
   19d00:	andeq	r9, r1, r4, lsl r9
   19d04:	andeq	r9, r1, r4, lsl r9
   19d08:	andeq	r9, r1, r4, lsl r9
   19d0c:	andeq	r9, r1, r4, lsl r9
   19d10:	andeq	r9, r1, r4, lsl r9
   19d14:	andeq	r9, r1, r4, lsl r9
   19d18:	andeq	r9, r1, r4, lsl r9
   19d1c:	andeq	r9, r1, r4, lsl r9
   19d20:	andeq	r9, r1, r4, lsl r9
   19d24:	strdeq	r9, [r1], -r0
   19d28:	muleq	r1, r8, r2
   19d2c:	andeq	r9, r1, r4, lsl r9
   19d30:	strdeq	r9, [r1], -r0
   19d34:	andeq	r9, r1, r4, lsl r9
   19d38:	strdeq	r9, [r1], -r0
   19d3c:	andeq	r9, r1, r4, lsl r9
   19d40:	andeq	r9, r1, r4, lsl r9
   19d44:	andeq	r9, r1, r4, lsl r9
   19d48:	andeq	r9, r1, r4, lsl r9
   19d4c:	andeq	r9, r1, r4, lsl r9
   19d50:	andeq	r9, r1, r4, lsl r9
   19d54:	andeq	r9, r1, r4, lsl r9
   19d58:	andeq	r9, r1, r4, lsl r9
   19d5c:	andeq	r9, r1, r4, lsl r9
   19d60:	andeq	r9, r1, r4, lsl r9
   19d64:	andeq	r9, r1, r4, lsl r9
   19d68:	andeq	r9, r1, r4, lsl r9
   19d6c:	andeq	r9, r1, r4, lsl r9
   19d70:	andeq	r9, r1, r4, lsl r9
   19d74:	andeq	r9, r1, r4, lsl r9
   19d78:	andeq	r9, r1, r4, lsl r9
   19d7c:	andeq	r9, r1, r4, lsl r9
   19d80:	andeq	r9, r1, r4, lsl r9
   19d84:	andeq	r9, r1, r4, lsl r9
   19d88:	andeq	r9, r1, r4, lsl r9
   19d8c:	andeq	r9, r1, r4, lsl r9
   19d90:	andeq	r9, r1, r4, lsl r9
   19d94:	andeq	r9, r1, r4, lsl r9
   19d98:	andeq	r9, r1, r4, lsl r9
   19d9c:	andeq	r9, r1, r4, lsl r9
   19da0:	andeq	r9, r1, r4, lsl r9
   19da4:	andeq	r9, r1, r8, asr r3
   19da8:	strdeq	r9, [r1], -r0
   19dac:	andeq	r9, r1, r8, asr r3
   19db0:	andeq	r9, r1, r8, lsr #7
   19db4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19db8:	strd	r6, [sp, #8]
   19dbc:	strd	r8, [sp, #16]
   19dc0:	strd	sl, [sp, #24]
   19dc4:	str	lr, [sp, #32]
   19dc8:	sub	sp, sp, #52	; 0x34
   19dcc:	mov	r5, r0
   19dd0:	str	r1, [sp, #24]
   19dd4:	str	r2, [sp, #28]
   19dd8:	mov	r4, r3
   19ddc:	bl	11298 <__errno_location@plt>
   19de0:	str	r0, [sp, #32]
   19de4:	ldr	r3, [r0]
   19de8:	str	r3, [sp, #36]	; 0x24
   19dec:	movw	r3, #4428	; 0x114c
   19df0:	movt	r3, #3
   19df4:	ldr	r6, [r3]
   19df8:	cmn	r5, #-2147483647	; 0x80000001
   19dfc:	movne	r3, #0
   19e00:	moveq	r3, #1
   19e04:	orrs	r3, r3, r5, lsr #31
   19e08:	bne	19f6c <__assert_fail@plt+0x8b9c>
   19e0c:	movw	r3, #4428	; 0x114c
   19e10:	movt	r3, #3
   19e14:	ldr	r2, [r3, #4]
   19e18:	cmp	r2, r5
   19e1c:	bgt	19e8c <__assert_fail@plt+0x8abc>
   19e20:	str	r2, [sp, #44]	; 0x2c
   19e24:	add	r3, r3, #8
   19e28:	cmp	r6, r3
   19e2c:	beq	19f70 <__assert_fail@plt+0x8ba0>
   19e30:	sub	r2, r5, r2
   19e34:	mov	r3, #8
   19e38:	str	r3, [sp]
   19e3c:	mvn	r3, #-2147483648	; 0x80000000
   19e40:	add	r2, r2, #1
   19e44:	add	r1, sp, #44	; 0x2c
   19e48:	mov	r0, r6
   19e4c:	bl	1b4d8 <__assert_fail@plt+0xa108>
   19e50:	mov	r6, r0
   19e54:	movw	r3, #4428	; 0x114c
   19e58:	movt	r3, #3
   19e5c:	str	r0, [r3]
   19e60:	movw	r7, #4428	; 0x114c
   19e64:	movt	r7, #3
   19e68:	ldr	r0, [r7, #4]
   19e6c:	ldr	r2, [sp, #44]	; 0x2c
   19e70:	sub	r2, r2, r0
   19e74:	lsl	r2, r2, #3
   19e78:	mov	r1, #0
   19e7c:	add	r0, r6, r0, lsl #3
   19e80:	bl	112c8 <memset@plt>
   19e84:	ldr	r3, [sp, #44]	; 0x2c
   19e88:	str	r3, [r7, #4]
   19e8c:	add	fp, r6, r5, lsl #3
   19e90:	ldr	r8, [r6, r5, lsl #3]
   19e94:	ldr	r7, [fp, #4]
   19e98:	ldr	r3, [r4, #4]
   19e9c:	orr	r9, r3, #1
   19ea0:	add	sl, r4, #8
   19ea4:	ldr	r3, [r4, #44]	; 0x2c
   19ea8:	str	r3, [sp, #16]
   19eac:	ldr	r3, [r4, #40]	; 0x28
   19eb0:	str	r3, [sp, #12]
   19eb4:	str	sl, [sp, #8]
   19eb8:	str	r9, [sp, #4]
   19ebc:	ldr	r3, [r4]
   19ec0:	str	r3, [sp]
   19ec4:	ldr	r3, [sp, #28]
   19ec8:	ldr	r2, [sp, #24]
   19ecc:	mov	r1, r8
   19ed0:	mov	r0, r7
   19ed4:	bl	186bc <__assert_fail@plt+0x72ec>
   19ed8:	cmp	r8, r0
   19edc:	bhi	19f40 <__assert_fail@plt+0x8b70>
   19ee0:	add	r8, r0, #1
   19ee4:	str	r8, [r6, r5, lsl #3]
   19ee8:	movw	r3, #4572	; 0x11dc
   19eec:	movt	r3, #3
   19ef0:	cmp	r7, r3
   19ef4:	beq	19f00 <__assert_fail@plt+0x8b30>
   19ef8:	mov	r0, r7
   19efc:	bl	1ba28 <__assert_fail@plt+0xa658>
   19f00:	mov	r0, r8
   19f04:	bl	1b2d4 <__assert_fail@plt+0x9f04>
   19f08:	mov	r7, r0
   19f0c:	str	r0, [fp, #4]
   19f10:	ldr	r3, [r4, #44]	; 0x2c
   19f14:	str	r3, [sp, #16]
   19f18:	ldr	r3, [r4, #40]	; 0x28
   19f1c:	str	r3, [sp, #12]
   19f20:	str	sl, [sp, #8]
   19f24:	str	r9, [sp, #4]
   19f28:	ldr	r3, [r4]
   19f2c:	str	r3, [sp]
   19f30:	ldr	r3, [sp, #28]
   19f34:	ldr	r2, [sp, #24]
   19f38:	mov	r1, r8
   19f3c:	bl	186bc <__assert_fail@plt+0x72ec>
   19f40:	ldr	r3, [sp, #32]
   19f44:	ldr	r2, [sp, #36]	; 0x24
   19f48:	str	r2, [r3]
   19f4c:	mov	r0, r7
   19f50:	add	sp, sp, #52	; 0x34
   19f54:	ldrd	r4, [sp]
   19f58:	ldrd	r6, [sp, #8]
   19f5c:	ldrd	r8, [sp, #16]
   19f60:	ldrd	sl, [sp, #24]
   19f64:	add	sp, sp, #32
   19f68:	pop	{pc}		; (ldr pc, [sp], #4)
   19f6c:	bl	113a0 <abort@plt>
   19f70:	sub	r2, r5, r2
   19f74:	mov	r3, #8
   19f78:	str	r3, [sp]
   19f7c:	mvn	r3, #-2147483648	; 0x80000000
   19f80:	add	r2, r2, #1
   19f84:	add	r1, sp, #44	; 0x2c
   19f88:	mov	r0, #0
   19f8c:	bl	1b4d8 <__assert_fail@plt+0xa108>
   19f90:	mov	r6, r0
   19f94:	movw	r3, #4428	; 0x114c
   19f98:	movt	r3, #3
   19f9c:	str	r0, [r3]
   19fa0:	ldrd	r2, [r3, #8]
   19fa4:	strd	r2, [r0]
   19fa8:	b	19e60 <__assert_fail@plt+0x8a90>
   19fac:	strd	r4, [sp, #-16]!
   19fb0:	str	r6, [sp, #8]
   19fb4:	str	lr, [sp, #12]
   19fb8:	mov	r4, r0
   19fbc:	bl	11298 <__errno_location@plt>
   19fc0:	mov	r5, r0
   19fc4:	ldr	r6, [r0]
   19fc8:	cmp	r4, #0
   19fcc:	ldr	r3, [pc, #32]	; 19ff4 <__assert_fail@plt+0x8c24>
   19fd0:	moveq	r4, r3
   19fd4:	mov	r1, #48	; 0x30
   19fd8:	mov	r0, r4
   19fdc:	bl	1b648 <__assert_fail@plt+0xa278>
   19fe0:	str	r6, [r5]
   19fe4:	ldrd	r4, [sp]
   19fe8:	ldr	r6, [sp, #8]
   19fec:	add	sp, sp, #12
   19ff0:	pop	{pc}		; (ldr pc, [sp], #4)
   19ff4:	ldrdeq	r1, [r3], -ip
   19ff8:	subs	r3, r0, #0
   19ffc:	ldr	r2, [pc, #8]	; 1a00c <__assert_fail@plt+0x8c3c>
   1a000:	moveq	r3, r2
   1a004:	ldr	r0, [r3]
   1a008:	bx	lr
   1a00c:	ldrdeq	r1, [r3], -ip
   1a010:	subs	r3, r0, #0
   1a014:	ldr	r2, [pc, #8]	; 1a024 <__assert_fail@plt+0x8c54>
   1a018:	moveq	r3, r2
   1a01c:	str	r1, [r3]
   1a020:	bx	lr
   1a024:	ldrdeq	r1, [r3], -ip
   1a028:	push	{lr}		; (str lr, [sp, #-4]!)
   1a02c:	subs	r3, r0, #0
   1a030:	ldr	r0, [pc, #44]	; 1a064 <__assert_fail@plt+0x8c94>
   1a034:	moveq	r3, r0
   1a038:	add	r3, r3, #8
   1a03c:	lsr	lr, r1, #5
   1a040:	and	r1, r1, #31
   1a044:	ldr	ip, [r3, lr, lsl #2]
   1a048:	lsr	r0, ip, r1
   1a04c:	eor	r2, r2, r0
   1a050:	and	r2, r2, #1
   1a054:	eor	r1, ip, r2, lsl r1
   1a058:	str	r1, [r3, lr, lsl #2]
   1a05c:	and	r0, r0, #1
   1a060:	pop	{pc}		; (ldr pc, [sp], #4)
   1a064:	ldrdeq	r1, [r3], -ip
   1a068:	subs	r3, r0, #0
   1a06c:	ldr	r2, [pc, #12]	; 1a080 <__assert_fail@plt+0x8cb0>
   1a070:	moveq	r3, r2
   1a074:	ldr	r0, [r3, #4]
   1a078:	str	r1, [r3, #4]
   1a07c:	bx	lr
   1a080:	ldrdeq	r1, [r3], -ip
   1a084:	subs	r3, r0, #0
   1a088:	ldr	r0, [pc, #44]	; 1a0bc <__assert_fail@plt+0x8cec>
   1a08c:	moveq	r3, r0
   1a090:	mov	r0, #10
   1a094:	str	r0, [r3]
   1a098:	cmp	r2, #0
   1a09c:	cmpne	r1, #0
   1a0a0:	beq	1a0b0 <__assert_fail@plt+0x8ce0>
   1a0a4:	str	r1, [r3, #40]	; 0x28
   1a0a8:	str	r2, [r3, #44]	; 0x2c
   1a0ac:	bx	lr
   1a0b0:	str	r4, [sp, #-8]!
   1a0b4:	str	lr, [sp, #4]
   1a0b8:	bl	113a0 <abort@plt>
   1a0bc:	ldrdeq	r1, [r3], -ip
   1a0c0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a0c4:	strd	r6, [sp, #8]
   1a0c8:	strd	r8, [sp, #16]
   1a0cc:	str	sl, [sp, #24]
   1a0d0:	str	lr, [sp, #28]
   1a0d4:	sub	sp, sp, #24
   1a0d8:	mov	r7, r0
   1a0dc:	mov	r8, r1
   1a0e0:	mov	r9, r2
   1a0e4:	mov	sl, r3
   1a0e8:	ldr	r4, [sp, #56]	; 0x38
   1a0ec:	cmp	r4, #0
   1a0f0:	ldr	r3, [pc, #104]	; 1a160 <__assert_fail@plt+0x8d90>
   1a0f4:	moveq	r4, r3
   1a0f8:	bl	11298 <__errno_location@plt>
   1a0fc:	mov	r5, r0
   1a100:	ldr	r6, [r0]
   1a104:	ldr	r3, [r4, #44]	; 0x2c
   1a108:	str	r3, [sp, #16]
   1a10c:	ldr	r3, [r4, #40]	; 0x28
   1a110:	str	r3, [sp, #12]
   1a114:	add	r3, r4, #8
   1a118:	str	r3, [sp, #8]
   1a11c:	ldr	r3, [r4, #4]
   1a120:	str	r3, [sp, #4]
   1a124:	ldr	r3, [r4]
   1a128:	str	r3, [sp]
   1a12c:	mov	r3, sl
   1a130:	mov	r2, r9
   1a134:	mov	r1, r8
   1a138:	mov	r0, r7
   1a13c:	bl	186bc <__assert_fail@plt+0x72ec>
   1a140:	str	r6, [r5]
   1a144:	add	sp, sp, #24
   1a148:	ldrd	r4, [sp]
   1a14c:	ldrd	r6, [sp, #8]
   1a150:	ldrd	r8, [sp, #16]
   1a154:	ldr	sl, [sp, #24]
   1a158:	add	sp, sp, #28
   1a15c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a160:	ldrdeq	r1, [r3], -ip
   1a164:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a168:	strd	r6, [sp, #8]
   1a16c:	strd	r8, [sp, #16]
   1a170:	strd	sl, [sp, #24]
   1a174:	str	lr, [sp, #32]
   1a178:	sub	sp, sp, #44	; 0x2c
   1a17c:	mov	r8, r0
   1a180:	mov	sl, r1
   1a184:	mov	r6, r2
   1a188:	subs	r4, r3, #0
   1a18c:	ldr	r3, [pc, #200]	; 1a25c <__assert_fail@plt+0x8e8c>
   1a190:	moveq	r4, r3
   1a194:	bl	11298 <__errno_location@plt>
   1a198:	mov	r7, r0
   1a19c:	ldr	fp, [r0]
   1a1a0:	ldr	r5, [r4, #4]
   1a1a4:	cmp	r6, #0
   1a1a8:	orreq	r5, r5, #1
   1a1ac:	add	r9, r4, #8
   1a1b0:	ldr	r3, [r4, #44]	; 0x2c
   1a1b4:	str	r3, [sp, #16]
   1a1b8:	ldr	r3, [r4, #40]	; 0x28
   1a1bc:	str	r3, [sp, #12]
   1a1c0:	str	r9, [sp, #8]
   1a1c4:	str	r5, [sp, #4]
   1a1c8:	ldr	r3, [r4]
   1a1cc:	str	r3, [sp]
   1a1d0:	str	sl, [sp, #36]	; 0x24
   1a1d4:	mov	r3, sl
   1a1d8:	str	r8, [sp, #32]
   1a1dc:	mov	r2, r8
   1a1e0:	mov	r1, #0
   1a1e4:	mov	r0, r1
   1a1e8:	bl	186bc <__assert_fail@plt+0x72ec>
   1a1ec:	mov	sl, r0
   1a1f0:	add	r8, r0, #1
   1a1f4:	mov	r0, r8
   1a1f8:	bl	1b2d4 <__assert_fail@plt+0x9f04>
   1a1fc:	str	r0, [sp, #28]
   1a200:	ldr	r3, [r4, #44]	; 0x2c
   1a204:	str	r3, [sp, #16]
   1a208:	ldr	r3, [r4, #40]	; 0x28
   1a20c:	str	r3, [sp, #12]
   1a210:	str	r9, [sp, #8]
   1a214:	str	r5, [sp, #4]
   1a218:	ldr	r3, [r4]
   1a21c:	str	r3, [sp]
   1a220:	ldr	r3, [sp, #36]	; 0x24
   1a224:	ldr	r2, [sp, #32]
   1a228:	mov	r1, r8
   1a22c:	bl	186bc <__assert_fail@plt+0x72ec>
   1a230:	str	fp, [r7]
   1a234:	cmp	r6, #0
   1a238:	strne	sl, [r6]
   1a23c:	ldr	r0, [sp, #28]
   1a240:	add	sp, sp, #44	; 0x2c
   1a244:	ldrd	r4, [sp]
   1a248:	ldrd	r6, [sp, #8]
   1a24c:	ldrd	r8, [sp, #16]
   1a250:	ldrd	sl, [sp, #24]
   1a254:	add	sp, sp, #32
   1a258:	pop	{pc}		; (ldr pc, [sp], #4)
   1a25c:	ldrdeq	r1, [r3], -ip
   1a260:	str	r4, [sp, #-8]!
   1a264:	str	lr, [sp, #4]
   1a268:	mov	r3, r2
   1a26c:	mov	r2, #0
   1a270:	bl	1a164 <__assert_fail@plt+0x8d94>
   1a274:	ldr	r4, [sp]
   1a278:	add	sp, sp, #4
   1a27c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a280:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a284:	strd	r6, [sp, #8]
   1a288:	str	r8, [sp, #16]
   1a28c:	str	lr, [sp, #20]
   1a290:	movw	r3, #4428	; 0x114c
   1a294:	movt	r3, #3
   1a298:	ldr	r7, [r3]
   1a29c:	ldr	r3, [r3, #4]
   1a2a0:	cmp	r3, #1
   1a2a4:	ble	1a2d0 <__assert_fail@plt+0x8f00>
   1a2a8:	mov	r4, #1
   1a2ac:	add	r6, r7, #4
   1a2b0:	movw	r5, #4428	; 0x114c
   1a2b4:	movt	r5, #3
   1a2b8:	ldr	r0, [r6, r4, lsl #3]
   1a2bc:	bl	1ba28 <__assert_fail@plt+0xa658>
   1a2c0:	add	r4, r4, #1
   1a2c4:	ldr	r3, [r5, #4]
   1a2c8:	cmp	r3, r4
   1a2cc:	bgt	1a2b8 <__assert_fail@plt+0x8ee8>
   1a2d0:	ldr	r0, [r7, #4]
   1a2d4:	movw	r3, #4572	; 0x11dc
   1a2d8:	movt	r3, #3
   1a2dc:	cmp	r0, r3
   1a2e0:	beq	1a304 <__assert_fail@plt+0x8f34>
   1a2e4:	bl	1ba28 <__assert_fail@plt+0xa658>
   1a2e8:	movw	r3, #4428	; 0x114c
   1a2ec:	movt	r3, #3
   1a2f0:	mov	r2, #256	; 0x100
   1a2f4:	str	r2, [r3, #8]
   1a2f8:	movw	r2, #4572	; 0x11dc
   1a2fc:	movt	r2, #3
   1a300:	str	r2, [r3, #12]
   1a304:	ldr	r3, [pc, #64]	; 1a34c <__assert_fail@plt+0x8f7c>
   1a308:	cmp	r7, r3
   1a30c:	beq	1a328 <__assert_fail@plt+0x8f58>
   1a310:	mov	r0, r7
   1a314:	bl	1ba28 <__assert_fail@plt+0xa658>
   1a318:	movw	r3, #4428	; 0x114c
   1a31c:	movt	r3, #3
   1a320:	add	r2, r3, #8
   1a324:	str	r2, [r3]
   1a328:	movw	r3, #4428	; 0x114c
   1a32c:	movt	r3, #3
   1a330:	mov	r2, #1
   1a334:	str	r2, [r3, #4]
   1a338:	ldrd	r4, [sp]
   1a33c:	ldrd	r6, [sp, #8]
   1a340:	ldr	r8, [sp, #16]
   1a344:	add	sp, sp, #20
   1a348:	pop	{pc}		; (ldr pc, [sp], #4)
   1a34c:	andeq	r1, r3, r4, asr r1
   1a350:	str	r4, [sp, #-8]!
   1a354:	str	lr, [sp, #4]
   1a358:	ldr	r3, [pc, #16]	; 1a370 <__assert_fail@plt+0x8fa0>
   1a35c:	mvn	r2, #0
   1a360:	bl	19db4 <__assert_fail@plt+0x89e4>
   1a364:	ldr	r4, [sp]
   1a368:	add	sp, sp, #4
   1a36c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a370:	ldrdeq	r1, [r3], -ip
   1a374:	str	r4, [sp, #-8]!
   1a378:	str	lr, [sp, #4]
   1a37c:	ldr	r3, [pc, #12]	; 1a390 <__assert_fail@plt+0x8fc0>
   1a380:	bl	19db4 <__assert_fail@plt+0x89e4>
   1a384:	ldr	r4, [sp]
   1a388:	add	sp, sp, #4
   1a38c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a390:	ldrdeq	r1, [r3], -ip
   1a394:	str	r4, [sp, #-8]!
   1a398:	str	lr, [sp, #4]
   1a39c:	mov	r1, r0
   1a3a0:	mov	r0, #0
   1a3a4:	bl	1a350 <__assert_fail@plt+0x8f80>
   1a3a8:	ldr	r4, [sp]
   1a3ac:	add	sp, sp, #4
   1a3b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3b4:	str	r4, [sp, #-8]!
   1a3b8:	str	lr, [sp, #4]
   1a3bc:	mov	r2, r1
   1a3c0:	mov	r1, r0
   1a3c4:	mov	r0, #0
   1a3c8:	bl	1a374 <__assert_fail@plt+0x8fa4>
   1a3cc:	ldr	r4, [sp]
   1a3d0:	add	sp, sp, #4
   1a3d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3d8:	strd	r4, [sp, #-12]!
   1a3dc:	str	lr, [sp, #8]
   1a3e0:	sub	sp, sp, #52	; 0x34
   1a3e4:	mov	r4, r0
   1a3e8:	mov	r5, r2
   1a3ec:	mov	r0, sp
   1a3f0:	bl	18528 <__assert_fail@plt+0x7158>
   1a3f4:	mov	r3, sp
   1a3f8:	mvn	r2, #0
   1a3fc:	mov	r1, r5
   1a400:	mov	r0, r4
   1a404:	bl	19db4 <__assert_fail@plt+0x89e4>
   1a408:	add	sp, sp, #52	; 0x34
   1a40c:	ldrd	r4, [sp]
   1a410:	add	sp, sp, #8
   1a414:	pop	{pc}		; (ldr pc, [sp], #4)
   1a418:	strd	r4, [sp, #-16]!
   1a41c:	str	r6, [sp, #8]
   1a420:	str	lr, [sp, #12]
   1a424:	sub	sp, sp, #48	; 0x30
   1a428:	mov	r4, r0
   1a42c:	mov	r5, r2
   1a430:	mov	r6, r3
   1a434:	mov	r0, sp
   1a438:	bl	18528 <__assert_fail@plt+0x7158>
   1a43c:	mov	r3, sp
   1a440:	mov	r2, r6
   1a444:	mov	r1, r5
   1a448:	mov	r0, r4
   1a44c:	bl	19db4 <__assert_fail@plt+0x89e4>
   1a450:	add	sp, sp, #48	; 0x30
   1a454:	ldrd	r4, [sp]
   1a458:	ldr	r6, [sp, #8]
   1a45c:	add	sp, sp, #12
   1a460:	pop	{pc}		; (ldr pc, [sp], #4)
   1a464:	str	r4, [sp, #-8]!
   1a468:	str	lr, [sp, #4]
   1a46c:	mov	r2, r1
   1a470:	mov	r1, r0
   1a474:	mov	r0, #0
   1a478:	bl	1a3d8 <__assert_fail@plt+0x9008>
   1a47c:	ldr	r4, [sp]
   1a480:	add	sp, sp, #4
   1a484:	pop	{pc}		; (ldr pc, [sp], #4)
   1a488:	str	r4, [sp, #-8]!
   1a48c:	str	lr, [sp, #4]
   1a490:	mov	r3, r2
   1a494:	mov	r2, r1
   1a498:	mov	r1, r0
   1a49c:	mov	r0, #0
   1a4a0:	bl	1a418 <__assert_fail@plt+0x9048>
   1a4a4:	ldr	r4, [sp]
   1a4a8:	add	sp, sp, #4
   1a4ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4b0:	strd	r4, [sp, #-12]!
   1a4b4:	str	lr, [sp, #8]
   1a4b8:	sub	sp, sp, #52	; 0x34
   1a4bc:	mov	r4, r0
   1a4c0:	mov	r5, r1
   1a4c4:	mov	r1, r2
   1a4c8:	ldr	r0, [pc, #92]	; 1a52c <__assert_fail@plt+0x915c>
   1a4cc:	ldrd	r2, [r0]
   1a4d0:	strd	r2, [sp]
   1a4d4:	ldrd	r2, [r0, #8]
   1a4d8:	strd	r2, [sp, #8]
   1a4dc:	ldrd	r2, [r0, #16]
   1a4e0:	strd	r2, [sp, #16]
   1a4e4:	ldrd	r2, [r0, #24]
   1a4e8:	strd	r2, [sp, #24]
   1a4ec:	ldrd	r2, [r0, #32]
   1a4f0:	strd	r2, [sp, #32]
   1a4f4:	ldrd	r2, [r0, #40]	; 0x28
   1a4f8:	strd	r2, [sp, #40]	; 0x28
   1a4fc:	mov	r2, #1
   1a500:	mov	r0, sp
   1a504:	bl	1a028 <__assert_fail@plt+0x8c58>
   1a508:	mov	r3, sp
   1a50c:	mov	r2, r5
   1a510:	mov	r1, r4
   1a514:	mov	r0, #0
   1a518:	bl	19db4 <__assert_fail@plt+0x89e4>
   1a51c:	add	sp, sp, #52	; 0x34
   1a520:	ldrd	r4, [sp]
   1a524:	add	sp, sp, #8
   1a528:	pop	{pc}		; (ldr pc, [sp], #4)
   1a52c:	ldrdeq	r1, [r3], -ip
   1a530:	str	r4, [sp, #-8]!
   1a534:	str	lr, [sp, #4]
   1a538:	mov	r2, r1
   1a53c:	mvn	r1, #0
   1a540:	bl	1a4b0 <__assert_fail@plt+0x90e0>
   1a544:	ldr	r4, [sp]
   1a548:	add	sp, sp, #4
   1a54c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a550:	str	r4, [sp, #-8]!
   1a554:	str	lr, [sp, #4]
   1a558:	mov	r1, #58	; 0x3a
   1a55c:	bl	1a530 <__assert_fail@plt+0x9160>
   1a560:	ldr	r4, [sp]
   1a564:	add	sp, sp, #4
   1a568:	pop	{pc}		; (ldr pc, [sp], #4)
   1a56c:	str	r4, [sp, #-8]!
   1a570:	str	lr, [sp, #4]
   1a574:	mov	r2, #58	; 0x3a
   1a578:	bl	1a4b0 <__assert_fail@plt+0x90e0>
   1a57c:	ldr	r4, [sp]
   1a580:	add	sp, sp, #4
   1a584:	pop	{pc}		; (ldr pc, [sp], #4)
   1a588:	strd	r4, [sp, #-12]!
   1a58c:	str	lr, [sp, #8]
   1a590:	sub	sp, sp, #100	; 0x64
   1a594:	mov	r4, r0
   1a598:	mov	r5, r2
   1a59c:	mov	r0, sp
   1a5a0:	bl	18528 <__assert_fail@plt+0x7158>
   1a5a4:	ldrd	r2, [sp]
   1a5a8:	strd	r2, [sp, #48]	; 0x30
   1a5ac:	ldrd	r2, [sp, #8]
   1a5b0:	strd	r2, [sp, #56]	; 0x38
   1a5b4:	ldrd	r2, [sp, #16]
   1a5b8:	strd	r2, [sp, #64]	; 0x40
   1a5bc:	ldrd	r2, [sp, #24]
   1a5c0:	strd	r2, [sp, #72]	; 0x48
   1a5c4:	ldrd	r2, [sp, #32]
   1a5c8:	strd	r2, [sp, #80]	; 0x50
   1a5cc:	ldrd	r2, [sp, #40]	; 0x28
   1a5d0:	strd	r2, [sp, #88]	; 0x58
   1a5d4:	mov	r2, #1
   1a5d8:	mov	r1, #58	; 0x3a
   1a5dc:	add	r0, sp, #48	; 0x30
   1a5e0:	bl	1a028 <__assert_fail@plt+0x8c58>
   1a5e4:	add	r3, sp, #48	; 0x30
   1a5e8:	mvn	r2, #0
   1a5ec:	mov	r1, r5
   1a5f0:	mov	r0, r4
   1a5f4:	bl	19db4 <__assert_fail@plt+0x89e4>
   1a5f8:	add	sp, sp, #100	; 0x64
   1a5fc:	ldrd	r4, [sp]
   1a600:	add	sp, sp, #8
   1a604:	pop	{pc}		; (ldr pc, [sp], #4)
   1a608:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a60c:	strd	r6, [sp, #8]
   1a610:	str	lr, [sp, #16]
   1a614:	sub	sp, sp, #52	; 0x34
   1a618:	mov	r4, r0
   1a61c:	mov	r5, r3
   1a620:	ldr	r3, [pc, #92]	; 1a684 <__assert_fail@plt+0x92b4>
   1a624:	ldrd	r6, [r3]
   1a628:	strd	r6, [sp]
   1a62c:	ldrd	r6, [r3, #8]
   1a630:	strd	r6, [sp, #8]
   1a634:	ldrd	r6, [r3, #16]
   1a638:	strd	r6, [sp, #16]
   1a63c:	ldrd	r6, [r3, #24]
   1a640:	strd	r6, [sp, #24]
   1a644:	ldrd	r6, [r3, #32]
   1a648:	strd	r6, [sp, #32]
   1a64c:	ldrd	r6, [r3, #40]	; 0x28
   1a650:	strd	r6, [sp, #40]	; 0x28
   1a654:	mov	r0, sp
   1a658:	bl	1a084 <__assert_fail@plt+0x8cb4>
   1a65c:	mov	r3, sp
   1a660:	ldr	r2, [sp, #72]	; 0x48
   1a664:	mov	r1, r5
   1a668:	mov	r0, r4
   1a66c:	bl	19db4 <__assert_fail@plt+0x89e4>
   1a670:	add	sp, sp, #52	; 0x34
   1a674:	ldrd	r4, [sp]
   1a678:	ldrd	r6, [sp, #8]
   1a67c:	add	sp, sp, #16
   1a680:	pop	{pc}		; (ldr pc, [sp], #4)
   1a684:	ldrdeq	r1, [r3], -ip
   1a688:	push	{lr}		; (str lr, [sp, #-4]!)
   1a68c:	sub	sp, sp, #12
   1a690:	mvn	ip, #0
   1a694:	str	ip, [sp]
   1a698:	bl	1a608 <__assert_fail@plt+0x9238>
   1a69c:	add	sp, sp, #12
   1a6a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6a4:	str	r4, [sp, #-8]!
   1a6a8:	str	lr, [sp, #4]
   1a6ac:	mov	r3, r2
   1a6b0:	mov	r2, r1
   1a6b4:	mov	r1, r0
   1a6b8:	mov	r0, #0
   1a6bc:	bl	1a688 <__assert_fail@plt+0x92b8>
   1a6c0:	ldr	r4, [sp]
   1a6c4:	add	sp, sp, #4
   1a6c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6cc:	push	{lr}		; (str lr, [sp, #-4]!)
   1a6d0:	sub	sp, sp, #12
   1a6d4:	str	r3, [sp]
   1a6d8:	mov	r3, r2
   1a6dc:	mov	r2, r1
   1a6e0:	mov	r1, r0
   1a6e4:	mov	r0, #0
   1a6e8:	bl	1a608 <__assert_fail@plt+0x9238>
   1a6ec:	add	sp, sp, #12
   1a6f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6f4:	str	r4, [sp, #-8]!
   1a6f8:	str	lr, [sp, #4]
   1a6fc:	ldr	r3, [pc, #12]	; 1a710 <__assert_fail@plt+0x9340>
   1a700:	bl	19db4 <__assert_fail@plt+0x89e4>
   1a704:	ldr	r4, [sp]
   1a708:	add	sp, sp, #4
   1a70c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a710:	andeq	r1, r3, ip, asr r1
   1a714:	str	r4, [sp, #-8]!
   1a718:	str	lr, [sp, #4]
   1a71c:	mov	r2, r1
   1a720:	mov	r1, r0
   1a724:	mov	r0, #0
   1a728:	bl	1a6f4 <__assert_fail@plt+0x9324>
   1a72c:	ldr	r4, [sp]
   1a730:	add	sp, sp, #4
   1a734:	pop	{pc}		; (ldr pc, [sp], #4)
   1a738:	str	r4, [sp, #-8]!
   1a73c:	str	lr, [sp, #4]
   1a740:	mvn	r2, #0
   1a744:	bl	1a6f4 <__assert_fail@plt+0x9324>
   1a748:	ldr	r4, [sp]
   1a74c:	add	sp, sp, #4
   1a750:	pop	{pc}		; (ldr pc, [sp], #4)
   1a754:	str	r4, [sp, #-8]!
   1a758:	str	lr, [sp, #4]
   1a75c:	mov	r1, r0
   1a760:	mov	r0, #0
   1a764:	bl	1a738 <__assert_fail@plt+0x9368>
   1a768:	ldr	r4, [sp]
   1a76c:	add	sp, sp, #4
   1a770:	pop	{pc}		; (ldr pc, [sp], #4)
   1a774:	str	r4, [sp, #-8]!
   1a778:	str	lr, [sp, #4]
   1a77c:	subs	r1, r0, #0
   1a780:	beq	1a7a0 <__assert_fail@plt+0x93d0>
   1a784:	mov	r2, #1
   1a788:	movw	r0, #64604	; 0xfc5c
   1a78c:	movt	r0, #1
   1a790:	bl	1128c <setenv@plt>
   1a794:	ldr	r4, [sp]
   1a798:	add	sp, sp, #4
   1a79c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7a0:	movw	r0, #64604	; 0xfc5c
   1a7a4:	movt	r0, #1
   1a7a8:	bl	1137c <unsetenv@plt>
   1a7ac:	b	1a794 <__assert_fail@plt+0x93c4>
   1a7b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a7b4:	strd	r6, [sp, #8]
   1a7b8:	str	r8, [sp, #16]
   1a7bc:	str	lr, [sp, #20]
   1a7c0:	subs	r6, r0, #0
   1a7c4:	beq	1a838 <__assert_fail@plt+0x9468>
   1a7c8:	mov	r0, r6
   1a7cc:	bl	11274 <strlen@plt>
   1a7d0:	add	r5, r0, #1
   1a7d4:	cmp	r5, #58	; 0x3a
   1a7d8:	movcs	r0, r5
   1a7dc:	movcc	r0, #58	; 0x3a
   1a7e0:	add	r0, r0, #9
   1a7e4:	bic	r0, r0, #3
   1a7e8:	bl	1b7d8 <__assert_fail@plt+0xa408>
   1a7ec:	subs	r4, r0, #0
   1a7f0:	beq	1a820 <__assert_fail@plt+0x9450>
   1a7f4:	mov	r8, #0
   1a7f8:	str	r8, [r4]
   1a7fc:	mov	r3, #1
   1a800:	strb	r3, [r4, #4]
   1a804:	mov	r7, r4
   1a808:	strb	r8, [r7, #5]!
   1a80c:	mov	r2, r5
   1a810:	mov	r1, r6
   1a814:	mov	r0, r7
   1a818:	bl	110f4 <memcpy@plt>
   1a81c:	strb	r8, [r7, r5]
   1a820:	mov	r0, r4
   1a824:	ldrd	r4, [sp]
   1a828:	ldrd	r6, [sp, #8]
   1a82c:	ldr	r8, [sp, #16]
   1a830:	add	sp, sp, #20
   1a834:	pop	{pc}		; (ldr pc, [sp], #4)
   1a838:	mov	r0, #64	; 0x40
   1a83c:	bl	1b7d8 <__assert_fail@plt+0xa408>
   1a840:	subs	r4, r0, #0
   1a844:	beq	1a820 <__assert_fail@plt+0x9450>
   1a848:	mov	r3, #0
   1a84c:	str	r3, [r4]
   1a850:	strb	r3, [r4, #4]
   1a854:	strb	r3, [r4, #5]
   1a858:	b	1a820 <__assert_fail@plt+0x9450>
   1a85c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a860:	strd	r6, [sp, #8]
   1a864:	str	r8, [sp, #16]
   1a868:	str	lr, [sp, #20]
   1a86c:	ldr	r6, [r1, #40]	; 0x28
   1a870:	cmp	r6, #0
   1a874:	moveq	r0, #1
   1a878:	beq	1a8bc <__assert_fail@plt+0x94ec>
   1a87c:	mov	r5, r0
   1a880:	mov	r7, r1
   1a884:	cmp	r1, r6
   1a888:	bhi	1a89c <__assert_fail@plt+0x94cc>
   1a88c:	add	r3, r1, #44	; 0x2c
   1a890:	cmp	r6, r3
   1a894:	movcc	r0, #1
   1a898:	bcc	1a8bc <__assert_fail@plt+0x94ec>
   1a89c:	ldrb	r3, [r6]
   1a8a0:	cmp	r3, #0
   1a8a4:	addne	r4, r5, #5
   1a8a8:	bne	1a920 <__assert_fail@plt+0x9550>
   1a8ac:	movw	r4, #64580	; 0xfc44
   1a8b0:	movt	r4, #1
   1a8b4:	str	r4, [r7, #40]	; 0x28
   1a8b8:	mov	r0, #1
   1a8bc:	ldrd	r4, [sp]
   1a8c0:	ldrd	r6, [sp, #8]
   1a8c4:	ldr	r8, [sp, #16]
   1a8c8:	add	sp, sp, #20
   1a8cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8d0:	mov	r0, r6
   1a8d4:	bl	1a7b0 <__assert_fail@plt+0x93e0>
   1a8d8:	str	r0, [r5]
   1a8dc:	cmp	r0, #0
   1a8e0:	moveq	r0, #0
   1a8e4:	beq	1a8bc <__assert_fail@plt+0x94ec>
   1a8e8:	mov	r3, #0
   1a8ec:	strb	r3, [r0, #4]
   1a8f0:	add	r4, r0, #5
   1a8f4:	b	1a8b4 <__assert_fail@plt+0x94e4>
   1a8f8:	mov	r0, r4
   1a8fc:	bl	11274 <strlen@plt>
   1a900:	add	r0, r0, #1
   1a904:	ldrb	r3, [r4, r0]!
   1a908:	cmp	r3, #0
   1a90c:	bne	1a920 <__assert_fail@plt+0x9550>
   1a910:	ldr	r3, [r5]
   1a914:	cmp	r3, #0
   1a918:	addne	r4, r3, #5
   1a91c:	movne	r5, r3
   1a920:	mov	r1, r6
   1a924:	mov	r0, r4
   1a928:	bl	110a0 <strcmp@plt>
   1a92c:	cmp	r0, #0
   1a930:	beq	1a8b4 <__assert_fail@plt+0x94e4>
   1a934:	ldrb	r3, [r4]
   1a938:	cmp	r3, #0
   1a93c:	bne	1a8f8 <__assert_fail@plt+0x9528>
   1a940:	add	r3, r5, #5
   1a944:	cmp	r4, r3
   1a948:	bne	1a958 <__assert_fail@plt+0x9588>
   1a94c:	ldrb	r3, [r5, #4]
   1a950:	cmp	r3, #0
   1a954:	bne	1a8f8 <__assert_fail@plt+0x9528>
   1a958:	mov	r0, r6
   1a95c:	bl	11274 <strlen@plt>
   1a960:	add	r8, r0, #1
   1a964:	add	r3, r5, #64	; 0x40
   1a968:	sub	r3, r3, r4
   1a96c:	cmp	r3, r8
   1a970:	ble	1a8d0 <__assert_fail@plt+0x9500>
   1a974:	mov	r2, r8
   1a978:	mov	r1, r6
   1a97c:	mov	r0, r4
   1a980:	bl	110f4 <memcpy@plt>
   1a984:	mov	r3, #0
   1a988:	strb	r3, [r4, r8]
   1a98c:	b	1a8b4 <__assert_fail@plt+0x94e4>
   1a990:	cmp	r0, #1
   1a994:	bxeq	lr
   1a998:	cmp	r0, #0
   1a99c:	bxeq	lr
   1a9a0:	str	r4, [sp, #-8]!
   1a9a4:	str	lr, [sp, #4]
   1a9a8:	ldr	r4, [r0]
   1a9ac:	bl	1ba28 <__assert_fail@plt+0xa658>
   1a9b0:	mov	r0, r4
   1a9b4:	cmp	r4, #0
   1a9b8:	bne	1a9a8 <__assert_fail@plt+0x95d8>
   1a9bc:	ldr	r4, [sp]
   1a9c0:	add	sp, sp, #4
   1a9c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a9c8:	strd	r4, [sp, #-16]!
   1a9cc:	str	r6, [sp, #8]
   1a9d0:	str	lr, [sp, #12]
   1a9d4:	mov	r4, r0
   1a9d8:	movw	r0, #64604	; 0xfc5c
   1a9dc:	movt	r0, #1
   1a9e0:	bl	111d8 <getenv@plt>
   1a9e4:	subs	r5, r0, #0
   1a9e8:	beq	1aa30 <__assert_fail@plt+0x9660>
   1a9ec:	ldrb	r3, [r4, #4]
   1a9f0:	cmp	r3, #0
   1a9f4:	moveq	r0, #0
   1a9f8:	beq	1aa10 <__assert_fail@plt+0x9640>
   1a9fc:	mov	r1, r5
   1aa00:	add	r0, r4, #5
   1aa04:	bl	110a0 <strcmp@plt>
   1aa08:	clz	r0, r0
   1aa0c:	lsr	r0, r0, #5
   1aa10:	cmp	r0, #0
   1aa14:	movne	r5, #1
   1aa18:	beq	1aa40 <__assert_fail@plt+0x9670>
   1aa1c:	mov	r0, r5
   1aa20:	ldrd	r4, [sp]
   1aa24:	ldr	r6, [sp, #8]
   1aa28:	add	sp, sp, #12
   1aa2c:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa30:	ldrb	r0, [r4, #4]
   1aa34:	clz	r0, r0
   1aa38:	lsr	r0, r0, #5
   1aa3c:	b	1aa10 <__assert_fail@plt+0x9640>
   1aa40:	mov	r0, r5
   1aa44:	bl	1a7b0 <__assert_fail@plt+0x93e0>
   1aa48:	subs	r5, r0, #0
   1aa4c:	beq	1aa1c <__assert_fail@plt+0x964c>
   1aa50:	ldrb	r3, [r4, #4]
   1aa54:	cmp	r3, #0
   1aa58:	addne	r0, r4, #5
   1aa5c:	moveq	r0, #0
   1aa60:	bl	1a774 <__assert_fail@plt+0x93a4>
   1aa64:	cmp	r0, #0
   1aa68:	beq	1aa8c <__assert_fail@plt+0x96bc>
   1aa6c:	bl	11298 <__errno_location@plt>
   1aa70:	mov	r4, r0
   1aa74:	ldr	r6, [r0]
   1aa78:	mov	r0, r5
   1aa7c:	bl	1a990 <__assert_fail@plt+0x95c0>
   1aa80:	str	r6, [r4]
   1aa84:	mov	r5, #0
   1aa88:	b	1aa1c <__assert_fail@plt+0x964c>
   1aa8c:	bl	11178 <tzset@plt>
   1aa90:	b	1aa1c <__assert_fail@plt+0x964c>
   1aa94:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1aa98:	strd	r6, [sp, #8]
   1aa9c:	str	r8, [sp, #16]
   1aaa0:	str	lr, [sp, #20]
   1aaa4:	cmp	r0, #1
   1aaa8:	moveq	r5, #1
   1aaac:	beq	1aaf0 <__assert_fail@plt+0x9720>
   1aab0:	mov	r4, r0
   1aab4:	bl	11298 <__errno_location@plt>
   1aab8:	mov	r6, r0
   1aabc:	ldr	r7, [r0]
   1aac0:	ldrb	r3, [r4, #4]
   1aac4:	cmp	r3, #0
   1aac8:	addne	r0, r4, #5
   1aacc:	moveq	r0, #0
   1aad0:	bl	1a774 <__assert_fail@plt+0x93a4>
   1aad4:	cmp	r0, #0
   1aad8:	beq	1ab08 <__assert_fail@plt+0x9738>
   1aadc:	ldr	r7, [r6]
   1aae0:	mov	r5, #0
   1aae4:	mov	r0, r4
   1aae8:	bl	1a990 <__assert_fail@plt+0x95c0>
   1aaec:	str	r7, [r6]
   1aaf0:	mov	r0, r5
   1aaf4:	ldrd	r4, [sp]
   1aaf8:	ldrd	r6, [sp, #8]
   1aafc:	ldr	r8, [sp, #16]
   1ab00:	add	sp, sp, #20
   1ab04:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab08:	bl	11178 <tzset@plt>
   1ab0c:	mov	r5, #1
   1ab10:	b	1aae4 <__assert_fail@plt+0x9714>
   1ab14:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ab18:	strd	r6, [sp, #8]
   1ab1c:	str	r8, [sp, #16]
   1ab20:	str	lr, [sp, #20]
   1ab24:	mov	r6, r1
   1ab28:	mov	r4, r2
   1ab2c:	subs	r5, r0, #0
   1ab30:	beq	1ab9c <__assert_fail@plt+0x97cc>
   1ab34:	mov	r0, r5
   1ab38:	bl	1a9c8 <__assert_fail@plt+0x95f8>
   1ab3c:	subs	r7, r0, #0
   1ab40:	moveq	r4, r7
   1ab44:	beq	1ab84 <__assert_fail@plt+0x97b4>
   1ab48:	mov	r1, r4
   1ab4c:	mov	r0, r6
   1ab50:	bl	11154 <localtime_r@plt>
   1ab54:	subs	r6, r0, #0
   1ab58:	beq	1abb0 <__assert_fail@plt+0x97e0>
   1ab5c:	mov	r1, r4
   1ab60:	mov	r0, r5
   1ab64:	bl	1a85c <__assert_fail@plt+0x948c>
   1ab68:	mov	r5, r0
   1ab6c:	mov	r0, r7
   1ab70:	bl	1aa94 <__assert_fail@plt+0x96c4>
   1ab74:	and	r0, r0, r5
   1ab78:	uxtb	r0, r0
   1ab7c:	cmp	r0, #0
   1ab80:	moveq	r4, #0
   1ab84:	mov	r0, r4
   1ab88:	ldrd	r4, [sp]
   1ab8c:	ldrd	r6, [sp, #8]
   1ab90:	ldr	r8, [sp, #16]
   1ab94:	add	sp, sp, #20
   1ab98:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab9c:	mov	r1, r2
   1aba0:	mov	r0, r6
   1aba4:	bl	11088 <gmtime_r@plt>
   1aba8:	mov	r4, r0
   1abac:	b	1ab84 <__assert_fail@plt+0x97b4>
   1abb0:	mov	r0, r7
   1abb4:	bl	1aa94 <__assert_fail@plt+0x96c4>
   1abb8:	mov	r4, r6
   1abbc:	b	1ab84 <__assert_fail@plt+0x97b4>
   1abc0:	strd	r4, [sp, #-20]!	; 0xffffffec
   1abc4:	strd	r6, [sp, #8]
   1abc8:	str	lr, [sp, #16]
   1abcc:	sub	sp, sp, #52	; 0x34
   1abd0:	mov	r4, r1
   1abd4:	subs	r5, r0, #0
   1abd8:	beq	1ac54 <__assert_fail@plt+0x9884>
   1abdc:	mov	r0, r5
   1abe0:	bl	1a9c8 <__assert_fail@plt+0x95f8>
   1abe4:	subs	r7, r0, #0
   1abe8:	beq	1acd0 <__assert_fail@plt+0x9900>
   1abec:	ldr	r3, [r4]
   1abf0:	str	r3, [sp, #4]
   1abf4:	ldr	r3, [r4, #4]
   1abf8:	str	r3, [sp, #8]
   1abfc:	ldr	r3, [r4, #8]
   1ac00:	str	r3, [sp, #12]
   1ac04:	ldr	r3, [r4, #12]
   1ac08:	str	r3, [sp, #16]
   1ac0c:	ldr	r3, [r4, #16]
   1ac10:	str	r3, [sp, #20]
   1ac14:	ldr	r3, [r4, #20]
   1ac18:	str	r3, [sp, #24]
   1ac1c:	mvn	r3, #0
   1ac20:	str	r3, [sp, #32]
   1ac24:	ldr	r3, [r4, #32]
   1ac28:	str	r3, [sp, #36]	; 0x24
   1ac2c:	add	r0, sp, #4
   1ac30:	bl	110b8 <mktime@plt>
   1ac34:	mov	r6, r0
   1ac38:	ldr	r3, [sp, #32]
   1ac3c:	cmp	r3, #0
   1ac40:	bge	1ac64 <__assert_fail@plt+0x9894>
   1ac44:	mov	r0, r7
   1ac48:	bl	1aa94 <__assert_fail@plt+0x96c4>
   1ac4c:	mvn	r6, #0
   1ac50:	b	1acb8 <__assert_fail@plt+0x98e8>
   1ac54:	mov	r0, r1
   1ac58:	bl	1134c <timegm@plt>
   1ac5c:	mov	r6, r0
   1ac60:	b	1acb8 <__assert_fail@plt+0x98e8>
   1ac64:	add	r1, sp, #4
   1ac68:	mov	r0, r5
   1ac6c:	bl	1a85c <__assert_fail@plt+0x948c>
   1ac70:	mov	r5, r0
   1ac74:	mov	r0, r7
   1ac78:	bl	1aa94 <__assert_fail@plt+0x96c4>
   1ac7c:	and	r0, r0, r5
   1ac80:	tst	r0, #255	; 0xff
   1ac84:	beq	1ac4c <__assert_fail@plt+0x987c>
   1ac88:	ldrd	r2, [sp, #4]
   1ac8c:	strd	r2, [r4]
   1ac90:	ldrd	r2, [sp, #12]
   1ac94:	strd	r2, [r4, #8]
   1ac98:	ldrd	r2, [sp, #20]
   1ac9c:	strd	r2, [r4, #16]
   1aca0:	ldrd	r2, [sp, #28]
   1aca4:	strd	r2, [r4, #24]
   1aca8:	ldrd	r2, [sp, #36]	; 0x24
   1acac:	strd	r2, [r4, #32]
   1acb0:	ldr	r3, [sp, #44]	; 0x2c
   1acb4:	str	r3, [r4, #40]	; 0x28
   1acb8:	mov	r0, r6
   1acbc:	add	sp, sp, #52	; 0x34
   1acc0:	ldrd	r4, [sp]
   1acc4:	ldrd	r6, [sp, #8]
   1acc8:	add	sp, sp, #16
   1accc:	pop	{pc}		; (ldr pc, [sp], #4)
   1acd0:	mvn	r6, #0
   1acd4:	b	1acb8 <__assert_fail@plt+0x98e8>
   1acd8:	strd	r4, [sp, #-16]!
   1acdc:	str	r6, [sp, #8]
   1ace0:	str	lr, [sp, #12]
   1ace4:	sub	sp, sp, #32
   1ace8:	mov	r4, r0
   1acec:	ldr	r5, [sp, #48]	; 0x30
   1acf0:	ldr	r6, [sp, #52]	; 0x34
   1acf4:	cmp	r1, #0
   1acf8:	beq	1adc4 <__assert_fail@plt+0x99f4>
   1acfc:	str	r3, [sp, #4]
   1ad00:	str	r2, [sp]
   1ad04:	mov	r3, r1
   1ad08:	movw	r2, #116	; 0x74
   1ad0c:	movt	r2, #2
   1ad10:	mov	r1, #1
   1ad14:	bl	112ec <__fprintf_chk@plt>
   1ad18:	mov	r2, #5
   1ad1c:	movw	r1, #136	; 0x88
   1ad20:	movt	r1, #2
   1ad24:	mov	r0, #0
   1ad28:	bl	11130 <dcgettext@plt>
   1ad2c:	movw	r3, #2022	; 0x7e6
   1ad30:	str	r3, [sp]
   1ad34:	mov	r3, r0
   1ad38:	movw	r2, #864	; 0x360
   1ad3c:	movt	r2, #2
   1ad40:	mov	r1, #1
   1ad44:	mov	r0, r4
   1ad48:	bl	112ec <__fprintf_chk@plt>
   1ad4c:	mov	r1, r4
   1ad50:	mov	r0, #10
   1ad54:	bl	11124 <fputc_unlocked@plt>
   1ad58:	mov	r2, #5
   1ad5c:	movw	r1, #140	; 0x8c
   1ad60:	movt	r1, #2
   1ad64:	mov	r0, #0
   1ad68:	bl	11130 <dcgettext@plt>
   1ad6c:	movw	r3, #312	; 0x138
   1ad70:	movt	r3, #2
   1ad74:	mov	r2, r0
   1ad78:	mov	r1, #1
   1ad7c:	mov	r0, r4
   1ad80:	bl	112ec <__fprintf_chk@plt>
   1ad84:	mov	r1, r4
   1ad88:	mov	r0, #10
   1ad8c:	bl	11124 <fputc_unlocked@plt>
   1ad90:	cmp	r6, #9
   1ad94:	ldrls	pc, [pc, r6, lsl #2]
   1ad98:	b	1b09c <__assert_fail@plt+0x9ccc>
   1ad9c:	andeq	sl, r1, r8, lsl #28
   1ada0:	andeq	sl, r1, r0, ror #27
   1ada4:	andeq	sl, r1, ip, lsl lr
   1ada8:	andeq	sl, r1, r0, asr lr
   1adac:	andeq	sl, r1, ip, lsl #29
   1adb0:	ldrdeq	sl, [r1], -r0
   1adb4:	andeq	sl, r1, ip, lsl pc
   1adb8:	andeq	sl, r1, r0, ror pc
   1adbc:	andeq	sl, r1, ip, asr #31
   1adc0:	andeq	fp, r1, r0, lsr r0
   1adc4:	str	r3, [sp]
   1adc8:	mov	r3, r2
   1adcc:	movw	r2, #128	; 0x80
   1add0:	movt	r2, #2
   1add4:	mov	r1, #1
   1add8:	bl	112ec <__fprintf_chk@plt>
   1addc:	b	1ad18 <__assert_fail@plt+0x9948>
   1ade0:	mov	r2, #5
   1ade4:	movw	r1, #348	; 0x15c
   1ade8:	movt	r1, #2
   1adec:	mov	r0, #0
   1adf0:	bl	11130 <dcgettext@plt>
   1adf4:	ldr	r3, [r5]
   1adf8:	mov	r2, r0
   1adfc:	mov	r1, #1
   1ae00:	mov	r0, r4
   1ae04:	bl	112ec <__fprintf_chk@plt>
   1ae08:	add	sp, sp, #32
   1ae0c:	ldrd	r4, [sp]
   1ae10:	ldr	r6, [sp, #8]
   1ae14:	add	sp, sp, #12
   1ae18:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae1c:	mov	r2, #5
   1ae20:	movw	r1, #364	; 0x16c
   1ae24:	movt	r1, #2
   1ae28:	mov	r0, #0
   1ae2c:	bl	11130 <dcgettext@plt>
   1ae30:	ldr	r3, [r5, #4]
   1ae34:	str	r3, [sp]
   1ae38:	ldr	r3, [r5]
   1ae3c:	mov	r2, r0
   1ae40:	mov	r1, #1
   1ae44:	mov	r0, r4
   1ae48:	bl	112ec <__fprintf_chk@plt>
   1ae4c:	b	1ae08 <__assert_fail@plt+0x9a38>
   1ae50:	mov	r2, #5
   1ae54:	movw	r1, #388	; 0x184
   1ae58:	movt	r1, #2
   1ae5c:	mov	r0, #0
   1ae60:	bl	11130 <dcgettext@plt>
   1ae64:	ldr	r3, [r5, #8]
   1ae68:	str	r3, [sp, #4]
   1ae6c:	ldr	r3, [r5, #4]
   1ae70:	str	r3, [sp]
   1ae74:	ldr	r3, [r5]
   1ae78:	mov	r2, r0
   1ae7c:	mov	r1, #1
   1ae80:	mov	r0, r4
   1ae84:	bl	112ec <__fprintf_chk@plt>
   1ae88:	b	1ae08 <__assert_fail@plt+0x9a38>
   1ae8c:	mov	r2, #5
   1ae90:	movw	r1, #416	; 0x1a0
   1ae94:	movt	r1, #2
   1ae98:	mov	r0, #0
   1ae9c:	bl	11130 <dcgettext@plt>
   1aea0:	ldr	r3, [r5, #12]
   1aea4:	str	r3, [sp, #8]
   1aea8:	ldr	r3, [r5, #8]
   1aeac:	str	r3, [sp, #4]
   1aeb0:	ldr	r3, [r5, #4]
   1aeb4:	str	r3, [sp]
   1aeb8:	ldr	r3, [r5]
   1aebc:	mov	r2, r0
   1aec0:	mov	r1, #1
   1aec4:	mov	r0, r4
   1aec8:	bl	112ec <__fprintf_chk@plt>
   1aecc:	b	1ae08 <__assert_fail@plt+0x9a38>
   1aed0:	mov	r2, #5
   1aed4:	movw	r1, #448	; 0x1c0
   1aed8:	movt	r1, #2
   1aedc:	mov	r0, #0
   1aee0:	bl	11130 <dcgettext@plt>
   1aee4:	ldr	r3, [r5, #16]
   1aee8:	str	r3, [sp, #12]
   1aeec:	ldr	r3, [r5, #12]
   1aef0:	str	r3, [sp, #8]
   1aef4:	ldr	r3, [r5, #8]
   1aef8:	str	r3, [sp, #4]
   1aefc:	ldr	r3, [r5, #4]
   1af00:	str	r3, [sp]
   1af04:	ldr	r3, [r5]
   1af08:	mov	r2, r0
   1af0c:	mov	r1, #1
   1af10:	mov	r0, r4
   1af14:	bl	112ec <__fprintf_chk@plt>
   1af18:	b	1ae08 <__assert_fail@plt+0x9a38>
   1af1c:	mov	r2, #5
   1af20:	movw	r1, #484	; 0x1e4
   1af24:	movt	r1, #2
   1af28:	mov	r0, #0
   1af2c:	bl	11130 <dcgettext@plt>
   1af30:	ldr	r3, [r5, #20]
   1af34:	str	r3, [sp, #16]
   1af38:	ldr	r3, [r5, #16]
   1af3c:	str	r3, [sp, #12]
   1af40:	ldr	r3, [r5, #12]
   1af44:	str	r3, [sp, #8]
   1af48:	ldr	r3, [r5, #8]
   1af4c:	str	r3, [sp, #4]
   1af50:	ldr	r3, [r5, #4]
   1af54:	str	r3, [sp]
   1af58:	ldr	r3, [r5]
   1af5c:	mov	r2, r0
   1af60:	mov	r1, #1
   1af64:	mov	r0, r4
   1af68:	bl	112ec <__fprintf_chk@plt>
   1af6c:	b	1ae08 <__assert_fail@plt+0x9a38>
   1af70:	mov	r2, #5
   1af74:	movw	r1, #524	; 0x20c
   1af78:	movt	r1, #2
   1af7c:	mov	r0, #0
   1af80:	bl	11130 <dcgettext@plt>
   1af84:	ldr	r3, [r5, #24]
   1af88:	str	r3, [sp, #20]
   1af8c:	ldr	r3, [r5, #20]
   1af90:	str	r3, [sp, #16]
   1af94:	ldr	r3, [r5, #16]
   1af98:	str	r3, [sp, #12]
   1af9c:	ldr	r3, [r5, #12]
   1afa0:	str	r3, [sp, #8]
   1afa4:	ldr	r3, [r5, #8]
   1afa8:	str	r3, [sp, #4]
   1afac:	ldr	r3, [r5, #4]
   1afb0:	str	r3, [sp]
   1afb4:	ldr	r3, [r5]
   1afb8:	mov	r2, r0
   1afbc:	mov	r1, #1
   1afc0:	mov	r0, r4
   1afc4:	bl	112ec <__fprintf_chk@plt>
   1afc8:	b	1ae08 <__assert_fail@plt+0x9a38>
   1afcc:	mov	r2, #5
   1afd0:	movw	r1, #568	; 0x238
   1afd4:	movt	r1, #2
   1afd8:	mov	r0, #0
   1afdc:	bl	11130 <dcgettext@plt>
   1afe0:	ldr	r3, [r5, #28]
   1afe4:	str	r3, [sp, #24]
   1afe8:	ldr	r3, [r5, #24]
   1afec:	str	r3, [sp, #20]
   1aff0:	ldr	r3, [r5, #20]
   1aff4:	str	r3, [sp, #16]
   1aff8:	ldr	r3, [r5, #16]
   1affc:	str	r3, [sp, #12]
   1b000:	ldr	r3, [r5, #12]
   1b004:	str	r3, [sp, #8]
   1b008:	ldr	r3, [r5, #8]
   1b00c:	str	r3, [sp, #4]
   1b010:	ldr	r3, [r5, #4]
   1b014:	str	r3, [sp]
   1b018:	ldr	r3, [r5]
   1b01c:	mov	r2, r0
   1b020:	mov	r1, #1
   1b024:	mov	r0, r4
   1b028:	bl	112ec <__fprintf_chk@plt>
   1b02c:	b	1ae08 <__assert_fail@plt+0x9a38>
   1b030:	mov	r2, #5
   1b034:	movw	r1, #616	; 0x268
   1b038:	movt	r1, #2
   1b03c:	mov	r0, #0
   1b040:	bl	11130 <dcgettext@plt>
   1b044:	ldr	r3, [r5, #32]
   1b048:	str	r3, [sp, #28]
   1b04c:	ldr	r3, [r5, #28]
   1b050:	str	r3, [sp, #24]
   1b054:	ldr	r3, [r5, #24]
   1b058:	str	r3, [sp, #20]
   1b05c:	ldr	r3, [r5, #20]
   1b060:	str	r3, [sp, #16]
   1b064:	ldr	r3, [r5, #16]
   1b068:	str	r3, [sp, #12]
   1b06c:	ldr	r3, [r5, #12]
   1b070:	str	r3, [sp, #8]
   1b074:	ldr	r3, [r5, #8]
   1b078:	str	r3, [sp, #4]
   1b07c:	ldr	r3, [r5, #4]
   1b080:	str	r3, [sp]
   1b084:	ldr	r3, [r5]
   1b088:	mov	r2, r0
   1b08c:	mov	r1, #1
   1b090:	mov	r0, r4
   1b094:	bl	112ec <__fprintf_chk@plt>
   1b098:	b	1ae08 <__assert_fail@plt+0x9a38>
   1b09c:	mov	r2, #5
   1b0a0:	movw	r1, #668	; 0x29c
   1b0a4:	movt	r1, #2
   1b0a8:	mov	r0, #0
   1b0ac:	bl	11130 <dcgettext@plt>
   1b0b0:	ldr	r3, [r5, #32]
   1b0b4:	str	r3, [sp, #28]
   1b0b8:	ldr	r3, [r5, #28]
   1b0bc:	str	r3, [sp, #24]
   1b0c0:	ldr	r3, [r5, #24]
   1b0c4:	str	r3, [sp, #20]
   1b0c8:	ldr	r3, [r5, #20]
   1b0cc:	str	r3, [sp, #16]
   1b0d0:	ldr	r3, [r5, #16]
   1b0d4:	str	r3, [sp, #12]
   1b0d8:	ldr	r3, [r5, #12]
   1b0dc:	str	r3, [sp, #8]
   1b0e0:	ldr	r3, [r5, #8]
   1b0e4:	str	r3, [sp, #4]
   1b0e8:	ldr	r3, [r5, #4]
   1b0ec:	str	r3, [sp]
   1b0f0:	ldr	r3, [r5]
   1b0f4:	mov	r2, r0
   1b0f8:	mov	r1, #1
   1b0fc:	mov	r0, r4
   1b100:	bl	112ec <__fprintf_chk@plt>
   1b104:	b	1ae08 <__assert_fail@plt+0x9a38>
   1b108:	strd	r4, [sp, #-12]!
   1b10c:	str	lr, [sp, #8]
   1b110:	sub	sp, sp, #12
   1b114:	ldr	r5, [sp, #24]
   1b118:	ldr	ip, [r5]
   1b11c:	cmp	ip, #0
   1b120:	beq	1b158 <__assert_fail@plt+0x9d88>
   1b124:	mov	lr, r5
   1b128:	mov	ip, #0
   1b12c:	add	ip, ip, #1
   1b130:	ldr	r4, [lr, #4]!
   1b134:	cmp	r4, #0
   1b138:	bne	1b12c <__assert_fail@plt+0x9d5c>
   1b13c:	str	ip, [sp, #4]
   1b140:	str	r5, [sp]
   1b144:	bl	1acd8 <__assert_fail@plt+0x9908>
   1b148:	add	sp, sp, #12
   1b14c:	ldrd	r4, [sp]
   1b150:	add	sp, sp, #8
   1b154:	pop	{pc}		; (ldr pc, [sp], #4)
   1b158:	mov	ip, #0
   1b15c:	b	1b13c <__assert_fail@plt+0x9d6c>
   1b160:	strd	r4, [sp, #-12]!
   1b164:	str	lr, [sp, #8]
   1b168:	sub	sp, sp, #52	; 0x34
   1b16c:	ldr	r5, [sp, #64]	; 0x40
   1b170:	add	r4, sp, #8
   1b174:	mov	ip, #0
   1b178:	ldr	lr, [r5], #4
   1b17c:	str	lr, [r4], #4
   1b180:	cmp	lr, #0
   1b184:	beq	1b194 <__assert_fail@plt+0x9dc4>
   1b188:	add	ip, ip, #1
   1b18c:	cmp	ip, #10
   1b190:	bne	1b178 <__assert_fail@plt+0x9da8>
   1b194:	str	ip, [sp, #4]
   1b198:	add	ip, sp, #8
   1b19c:	str	ip, [sp]
   1b1a0:	bl	1acd8 <__assert_fail@plt+0x9908>
   1b1a4:	add	sp, sp, #52	; 0x34
   1b1a8:	ldrd	r4, [sp]
   1b1ac:	add	sp, sp, #8
   1b1b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1b4:	push	{r3}		; (str r3, [sp, #-4]!)
   1b1b8:	push	{lr}		; (str lr, [sp, #-4]!)
   1b1bc:	sub	sp, sp, #16
   1b1c0:	add	r3, sp, #24
   1b1c4:	str	r3, [sp, #12]
   1b1c8:	str	r3, [sp]
   1b1cc:	ldr	r3, [sp, #20]
   1b1d0:	bl	1b160 <__assert_fail@plt+0x9d90>
   1b1d4:	add	sp, sp, #16
   1b1d8:	pop	{lr}		; (ldr lr, [sp], #4)
   1b1dc:	add	sp, sp, #4
   1b1e0:	bx	lr
   1b1e4:	str	r4, [sp, #-8]!
   1b1e8:	str	lr, [sp, #4]
   1b1ec:	movw	r3, #4516	; 0x11a4
   1b1f0:	movt	r3, #3
   1b1f4:	ldr	r1, [r3]
   1b1f8:	mov	r0, #10
   1b1fc:	bl	11124 <fputc_unlocked@plt>
   1b200:	mov	r2, #5
   1b204:	movw	r1, #728	; 0x2d8
   1b208:	movt	r1, #2
   1b20c:	mov	r0, #0
   1b210:	bl	11130 <dcgettext@plt>
   1b214:	movw	r2, #748	; 0x2ec
   1b218:	movt	r2, #2
   1b21c:	mov	r1, r0
   1b220:	mov	r0, #1
   1b224:	bl	112d4 <__printf_chk@plt>
   1b228:	mov	r2, #5
   1b22c:	movw	r1, #772	; 0x304
   1b230:	movt	r1, #2
   1b234:	mov	r0, #0
   1b238:	bl	11130 <dcgettext@plt>
   1b23c:	movw	r3, #57680	; 0xe150
   1b240:	movt	r3, #1
   1b244:	movw	r2, #57720	; 0xe178
   1b248:	movt	r2, #1
   1b24c:	mov	r1, r0
   1b250:	mov	r0, #1
   1b254:	bl	112d4 <__printf_chk@plt>
   1b258:	mov	r2, #5
   1b25c:	movw	r1, #792	; 0x318
   1b260:	movt	r1, #2
   1b264:	mov	r0, #0
   1b268:	bl	11130 <dcgettext@plt>
   1b26c:	movw	r2, #832	; 0x340
   1b270:	movt	r2, #2
   1b274:	mov	r1, r0
   1b278:	mov	r0, #1
   1b27c:	bl	112d4 <__printf_chk@plt>
   1b280:	ldr	r4, [sp]
   1b284:	add	sp, sp, #4
   1b288:	pop	{pc}		; (ldr pc, [sp], #4)
   1b28c:	str	r4, [sp, #-8]!
   1b290:	str	lr, [sp, #4]
   1b294:	bl	1b7d8 <__assert_fail@plt+0xa408>
   1b298:	cmp	r0, #0
   1b29c:	beq	1b2ac <__assert_fail@plt+0x9edc>
   1b2a0:	ldr	r4, [sp]
   1b2a4:	add	sp, sp, #4
   1b2a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b2ac:	bl	1b720 <__assert_fail@plt+0xa350>
   1b2b0:	str	r4, [sp, #-8]!
   1b2b4:	str	lr, [sp, #4]
   1b2b8:	bl	1b7d8 <__assert_fail@plt+0xa408>
   1b2bc:	cmp	r0, #0
   1b2c0:	beq	1b2d0 <__assert_fail@plt+0x9f00>
   1b2c4:	ldr	r4, [sp]
   1b2c8:	add	sp, sp, #4
   1b2cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b2d0:	bl	1b720 <__assert_fail@plt+0xa350>
   1b2d4:	str	r4, [sp, #-8]!
   1b2d8:	str	lr, [sp, #4]
   1b2dc:	bl	1b28c <__assert_fail@plt+0x9ebc>
   1b2e0:	ldr	r4, [sp]
   1b2e4:	add	sp, sp, #4
   1b2e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b2ec:	strd	r4, [sp, #-16]!
   1b2f0:	str	r6, [sp, #8]
   1b2f4:	str	lr, [sp, #12]
   1b2f8:	mov	r5, r0
   1b2fc:	mov	r4, r1
   1b300:	bl	1b814 <__assert_fail@plt+0xa444>
   1b304:	cmp	r0, #0
   1b308:	beq	1b31c <__assert_fail@plt+0x9f4c>
   1b30c:	ldrd	r4, [sp]
   1b310:	ldr	r6, [sp, #8]
   1b314:	add	sp, sp, #12
   1b318:	pop	{pc}		; (ldr pc, [sp], #4)
   1b31c:	adds	r4, r4, #0
   1b320:	movne	r4, #1
   1b324:	cmp	r5, #0
   1b328:	moveq	r4, #1
   1b32c:	cmp	r4, #0
   1b330:	beq	1b30c <__assert_fail@plt+0x9f3c>
   1b334:	bl	1b720 <__assert_fail@plt+0xa350>
   1b338:	str	r4, [sp, #-8]!
   1b33c:	str	lr, [sp, #4]
   1b340:	cmp	r1, #0
   1b344:	orreq	r1, r1, #1
   1b348:	bl	1b814 <__assert_fail@plt+0xa444>
   1b34c:	cmp	r0, #0
   1b350:	beq	1b360 <__assert_fail@plt+0x9f90>
   1b354:	ldr	r4, [sp]
   1b358:	add	sp, sp, #4
   1b35c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b360:	bl	1b720 <__assert_fail@plt+0xa350>
   1b364:	strd	r4, [sp, #-16]!
   1b368:	str	r6, [sp, #8]
   1b36c:	str	lr, [sp, #12]
   1b370:	mov	r4, r0
   1b374:	mov	r6, r1
   1b378:	mov	r5, r2
   1b37c:	bl	1d6a4 <__assert_fail@plt+0xc2d4>
   1b380:	cmp	r0, #0
   1b384:	beq	1b398 <__assert_fail@plt+0x9fc8>
   1b388:	ldrd	r4, [sp]
   1b38c:	ldr	r6, [sp, #8]
   1b390:	add	sp, sp, #12
   1b394:	pop	{pc}		; (ldr pc, [sp], #4)
   1b398:	cmp	r4, #0
   1b39c:	beq	1b3ac <__assert_fail@plt+0x9fdc>
   1b3a0:	cmp	r6, #0
   1b3a4:	cmpne	r5, #0
   1b3a8:	beq	1b388 <__assert_fail@plt+0x9fb8>
   1b3ac:	bl	1b720 <__assert_fail@plt+0xa350>
   1b3b0:	str	r4, [sp, #-8]!
   1b3b4:	str	lr, [sp, #4]
   1b3b8:	bl	1b364 <__assert_fail@plt+0x9f94>
   1b3bc:	ldr	r4, [sp]
   1b3c0:	add	sp, sp, #4
   1b3c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b3c8:	str	r4, [sp, #-8]!
   1b3cc:	str	lr, [sp, #4]
   1b3d0:	mov	ip, r1
   1b3d4:	mov	r3, r2
   1b3d8:	cmp	r2, #0
   1b3dc:	cmpne	r1, #0
   1b3e0:	moveq	r3, #1
   1b3e4:	moveq	ip, r3
   1b3e8:	mov	r2, r3
   1b3ec:	mov	r1, ip
   1b3f0:	bl	1d6a4 <__assert_fail@plt+0xc2d4>
   1b3f4:	cmp	r0, #0
   1b3f8:	beq	1b408 <__assert_fail@plt+0xa038>
   1b3fc:	ldr	r4, [sp]
   1b400:	add	sp, sp, #4
   1b404:	pop	{pc}		; (ldr pc, [sp], #4)
   1b408:	bl	1b720 <__assert_fail@plt+0xa350>
   1b40c:	str	r4, [sp, #-8]!
   1b410:	str	lr, [sp, #4]
   1b414:	mov	r2, r1
   1b418:	mov	r1, r0
   1b41c:	mov	r0, #0
   1b420:	bl	1b364 <__assert_fail@plt+0x9f94>
   1b424:	ldr	r4, [sp]
   1b428:	add	sp, sp, #4
   1b42c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b430:	str	r4, [sp, #-8]!
   1b434:	str	lr, [sp, #4]
   1b438:	mov	r2, r1
   1b43c:	mov	r1, r0
   1b440:	mov	r0, #0
   1b444:	bl	1b3c8 <__assert_fail@plt+0x9ff8>
   1b448:	ldr	r4, [sp]
   1b44c:	add	sp, sp, #4
   1b450:	pop	{pc}		; (ldr pc, [sp], #4)
   1b454:	strd	r4, [sp, #-16]!
   1b458:	str	r6, [sp, #8]
   1b45c:	str	lr, [sp, #12]
   1b460:	mov	r5, r1
   1b464:	ldr	r4, [r1]
   1b468:	cmp	r0, #0
   1b46c:	beq	1b49c <__assert_fail@plt+0xa0cc>
   1b470:	lsr	r3, r4, #1
   1b474:	add	r3, r3, #1
   1b478:	adds	r4, r4, r3
   1b47c:	bcs	1b4b8 <__assert_fail@plt+0xa0e8>
   1b480:	mov	r1, r4
   1b484:	bl	1b364 <__assert_fail@plt+0x9f94>
   1b488:	str	r4, [r5]
   1b48c:	ldrd	r4, [sp]
   1b490:	ldr	r6, [sp, #8]
   1b494:	add	sp, sp, #12
   1b498:	pop	{pc}		; (ldr pc, [sp], #4)
   1b49c:	cmp	r4, #0
   1b4a0:	bne	1b480 <__assert_fail@plt+0xa0b0>
   1b4a4:	mov	r4, #64	; 0x40
   1b4a8:	udiv	r4, r4, r2
   1b4ac:	cmp	r2, #64	; 0x40
   1b4b0:	addhi	r4, r4, #1
   1b4b4:	b	1b480 <__assert_fail@plt+0xa0b0>
   1b4b8:	bl	1b720 <__assert_fail@plt+0xa350>
   1b4bc:	str	r4, [sp, #-8]!
   1b4c0:	str	lr, [sp, #4]
   1b4c4:	mov	r2, #1
   1b4c8:	bl	1b454 <__assert_fail@plt+0xa084>
   1b4cc:	ldr	r4, [sp]
   1b4d0:	add	sp, sp, #4
   1b4d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b4d8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b4dc:	strd	r6, [sp, #8]
   1b4e0:	str	r8, [sp, #16]
   1b4e4:	str	lr, [sp, #20]
   1b4e8:	mov	r5, r1
   1b4ec:	ldr	lr, [sp, #24]
   1b4f0:	ldr	ip, [r1]
   1b4f4:	asr	r4, ip, #1
   1b4f8:	adds	r4, ip, r4
   1b4fc:	movvs	r1, #1
   1b500:	movvc	r1, #0
   1b504:	cmp	r1, #0
   1b508:	mvnne	r4, #-2147483648	; 0x80000000
   1b50c:	mvn	r8, r3
   1b510:	lsr	r8, r8, #31
   1b514:	cmp	r3, r4
   1b518:	movge	r1, #0
   1b51c:	andlt	r1, r8, #1
   1b520:	cmp	r1, #0
   1b524:	movne	r4, r3
   1b528:	smull	r6, r7, r4, lr
   1b52c:	asr	r1, r6, #31
   1b530:	cmp	r1, r7
   1b534:	bne	1b54c <__assert_fail@plt+0xa17c>
   1b538:	mov	r1, r6
   1b53c:	cmp	r6, #63	; 0x3f
   1b540:	movle	r1, #64	; 0x40
   1b544:	ble	1b550 <__assert_fail@plt+0xa180>
   1b548:	b	1b55c <__assert_fail@plt+0xa18c>
   1b54c:	mvn	r1, #-2147483648	; 0x80000000
   1b550:	sdiv	r4, r1, lr
   1b554:	mls	r6, lr, r4, r1
   1b558:	sub	r1, r1, r6
   1b55c:	cmp	r0, #0
   1b560:	moveq	r6, #0
   1b564:	streq	r6, [r5]
   1b568:	sub	r6, r4, ip
   1b56c:	cmp	r6, r2
   1b570:	bge	1b5a8 <__assert_fail@plt+0xa1d8>
   1b574:	adds	r2, ip, r2
   1b578:	mov	r4, r2
   1b57c:	bvs	1b5c4 <__assert_fail@plt+0xa1f4>
   1b580:	cmp	r2, r3
   1b584:	movle	r3, #0
   1b588:	andgt	r3, r8, #1
   1b58c:	cmp	r3, #0
   1b590:	bne	1b5c4 <__assert_fail@plt+0xa1f4>
   1b594:	smull	r2, r3, r2, lr
   1b598:	asr	ip, r2, #31
   1b59c:	mov	r1, r2
   1b5a0:	cmp	ip, r3
   1b5a4:	bne	1b5c4 <__assert_fail@plt+0xa1f4>
   1b5a8:	bl	1b2ec <__assert_fail@plt+0x9f1c>
   1b5ac:	str	r4, [r5]
   1b5b0:	ldrd	r4, [sp]
   1b5b4:	ldrd	r6, [sp, #8]
   1b5b8:	ldr	r8, [sp, #16]
   1b5bc:	add	sp, sp, #20
   1b5c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5c4:	bl	1b720 <__assert_fail@plt+0xa350>
   1b5c8:	str	r4, [sp, #-8]!
   1b5cc:	str	lr, [sp, #4]
   1b5d0:	bl	1b764 <__assert_fail@plt+0xa394>
   1b5d4:	cmp	r0, #0
   1b5d8:	beq	1b5e8 <__assert_fail@plt+0xa218>
   1b5dc:	ldr	r4, [sp]
   1b5e0:	add	sp, sp, #4
   1b5e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b5e8:	bl	1b720 <__assert_fail@plt+0xa350>
   1b5ec:	str	r4, [sp, #-8]!
   1b5f0:	str	lr, [sp, #4]
   1b5f4:	mov	r1, #1
   1b5f8:	bl	1b5c8 <__assert_fail@plt+0xa1f8>
   1b5fc:	ldr	r4, [sp]
   1b600:	add	sp, sp, #4
   1b604:	pop	{pc}		; (ldr pc, [sp], #4)
   1b608:	str	r4, [sp, #-8]!
   1b60c:	str	lr, [sp, #4]
   1b610:	bl	1b764 <__assert_fail@plt+0xa394>
   1b614:	cmp	r0, #0
   1b618:	beq	1b628 <__assert_fail@plt+0xa258>
   1b61c:	ldr	r4, [sp]
   1b620:	add	sp, sp, #4
   1b624:	pop	{pc}		; (ldr pc, [sp], #4)
   1b628:	bl	1b720 <__assert_fail@plt+0xa350>
   1b62c:	str	r4, [sp, #-8]!
   1b630:	str	lr, [sp, #4]
   1b634:	mov	r1, #1
   1b638:	bl	1b608 <__assert_fail@plt+0xa238>
   1b63c:	ldr	r4, [sp]
   1b640:	add	sp, sp, #4
   1b644:	pop	{pc}		; (ldr pc, [sp], #4)
   1b648:	strd	r4, [sp, #-16]!
   1b64c:	str	r6, [sp, #8]
   1b650:	str	lr, [sp, #12]
   1b654:	mov	r5, r0
   1b658:	mov	r4, r1
   1b65c:	mov	r0, r1
   1b660:	bl	1b28c <__assert_fail@plt+0x9ebc>
   1b664:	mov	r2, r4
   1b668:	mov	r1, r5
   1b66c:	bl	110f4 <memcpy@plt>
   1b670:	ldrd	r4, [sp]
   1b674:	ldr	r6, [sp, #8]
   1b678:	add	sp, sp, #12
   1b67c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b680:	strd	r4, [sp, #-16]!
   1b684:	str	r6, [sp, #8]
   1b688:	str	lr, [sp, #12]
   1b68c:	mov	r5, r0
   1b690:	mov	r4, r1
   1b694:	mov	r0, r1
   1b698:	bl	1b2b0 <__assert_fail@plt+0x9ee0>
   1b69c:	mov	r2, r4
   1b6a0:	mov	r1, r5
   1b6a4:	bl	110f4 <memcpy@plt>
   1b6a8:	ldrd	r4, [sp]
   1b6ac:	ldr	r6, [sp, #8]
   1b6b0:	add	sp, sp, #12
   1b6b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b6b8:	strd	r4, [sp, #-16]!
   1b6bc:	str	r6, [sp, #8]
   1b6c0:	str	lr, [sp, #12]
   1b6c4:	mov	r5, r0
   1b6c8:	mov	r4, r1
   1b6cc:	add	r0, r1, #1
   1b6d0:	bl	1b2b0 <__assert_fail@plt+0x9ee0>
   1b6d4:	mov	r2, #0
   1b6d8:	strb	r2, [r0, r4]
   1b6dc:	mov	r2, r4
   1b6e0:	mov	r1, r5
   1b6e4:	bl	110f4 <memcpy@plt>
   1b6e8:	ldrd	r4, [sp]
   1b6ec:	ldr	r6, [sp, #8]
   1b6f0:	add	sp, sp, #12
   1b6f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b6f8:	str	r4, [sp, #-8]!
   1b6fc:	str	lr, [sp, #4]
   1b700:	mov	r4, r0
   1b704:	bl	11274 <strlen@plt>
   1b708:	add	r1, r0, #1
   1b70c:	mov	r0, r4
   1b710:	bl	1b648 <__assert_fail@plt+0xa278>
   1b714:	ldr	r4, [sp]
   1b718:	add	sp, sp, #4
   1b71c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b720:	str	r4, [sp, #-8]!
   1b724:	str	lr, [sp, #4]
   1b728:	movw	r3, #4424	; 0x1148
   1b72c:	movt	r3, #3
   1b730:	ldr	r4, [r3]
   1b734:	mov	r2, #5
   1b738:	movw	r1, #912	; 0x390
   1b73c:	movt	r1, #2
   1b740:	mov	r0, #0
   1b744:	bl	11130 <dcgettext@plt>
   1b748:	mov	r3, r0
   1b74c:	movw	r2, #58640	; 0xe510
   1b750:	movt	r2, #1
   1b754:	mov	r1, #0
   1b758:	mov	r0, r4
   1b75c:	bl	111c0 <error@plt>
   1b760:	bl	113a0 <abort@plt>
   1b764:	strd	r4, [sp, #-16]!
   1b768:	str	r6, [sp, #8]
   1b76c:	str	lr, [sp, #12]
   1b770:	cmp	r1, #0
   1b774:	cmpne	r0, #0
   1b778:	beq	1b7b4 <__assert_fail@plt+0xa3e4>
   1b77c:	mov	r2, r0
   1b780:	mov	r3, r1
   1b784:	umull	r4, r5, r0, r1
   1b788:	adds	r1, r5, #0
   1b78c:	movne	r1, #1
   1b790:	cmp	r4, #0
   1b794:	movlt	r1, #1
   1b798:	cmp	r1, #0
   1b79c:	beq	1b7bc <__assert_fail@plt+0xa3ec>
   1b7a0:	bl	11298 <__errno_location@plt>
   1b7a4:	mov	r3, #12
   1b7a8:	str	r3, [r0]
   1b7ac:	mov	r0, #0
   1b7b0:	b	1b7c8 <__assert_fail@plt+0xa3f8>
   1b7b4:	mov	r3, #1
   1b7b8:	mov	r2, r3
   1b7bc:	mov	r1, r3
   1b7c0:	mov	r0, r2
   1b7c4:	bl	11064 <calloc@plt>
   1b7c8:	ldrd	r4, [sp]
   1b7cc:	ldr	r6, [sp, #8]
   1b7d0:	add	sp, sp, #12
   1b7d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b7d8:	str	r4, [sp, #-8]!
   1b7dc:	str	lr, [sp, #4]
   1b7e0:	cmp	r0, #0
   1b7e4:	beq	1b800 <__assert_fail@plt+0xa430>
   1b7e8:	bge	1b804 <__assert_fail@plt+0xa434>
   1b7ec:	bl	11298 <__errno_location@plt>
   1b7f0:	mov	r3, #12
   1b7f4:	str	r3, [r0]
   1b7f8:	mov	r0, #0
   1b7fc:	b	1b808 <__assert_fail@plt+0xa438>
   1b800:	mov	r0, #1
   1b804:	bl	111e4 <malloc@plt>
   1b808:	ldr	r4, [sp]
   1b80c:	add	sp, sp, #4
   1b810:	pop	{pc}		; (ldr pc, [sp], #4)
   1b814:	str	r4, [sp, #-8]!
   1b818:	str	lr, [sp, #4]
   1b81c:	cmp	r0, #0
   1b820:	beq	1b844 <__assert_fail@plt+0xa474>
   1b824:	cmp	r1, #0
   1b828:	beq	1b850 <__assert_fail@plt+0xa480>
   1b82c:	cmp	r1, #0
   1b830:	blt	1b85c <__assert_fail@plt+0xa48c>
   1b834:	bl	11148 <realloc@plt>
   1b838:	ldr	r4, [sp]
   1b83c:	add	sp, sp, #4
   1b840:	pop	{pc}		; (ldr pc, [sp], #4)
   1b844:	mov	r0, r1
   1b848:	bl	1b7d8 <__assert_fail@plt+0xa408>
   1b84c:	b	1b838 <__assert_fail@plt+0xa468>
   1b850:	bl	1ba28 <__assert_fail@plt+0xa658>
   1b854:	mov	r0, #0
   1b858:	b	1b838 <__assert_fail@plt+0xa468>
   1b85c:	bl	11298 <__errno_location@plt>
   1b860:	mov	r3, #12
   1b864:	str	r3, [r0]
   1b868:	mov	r0, #0
   1b86c:	b	1b838 <__assert_fail@plt+0xa468>
   1b870:	strd	r4, [sp, #-16]!
   1b874:	str	r6, [sp, #8]
   1b878:	str	lr, [sp, #12]
   1b87c:	mov	r5, r0
   1b880:	bl	111a8 <__fpending@plt>
   1b884:	mov	r6, r0
   1b888:	ldr	r4, [r5]
   1b88c:	and	r4, r4, #32
   1b890:	mov	r0, r5
   1b894:	bl	1b8fc <__assert_fail@plt+0xa52c>
   1b898:	cmp	r4, #0
   1b89c:	bne	1b8d0 <__assert_fail@plt+0xa500>
   1b8a0:	cmp	r0, #0
   1b8a4:	beq	1b8c0 <__assert_fail@plt+0xa4f0>
   1b8a8:	cmp	r6, #0
   1b8ac:	bne	1b8ec <__assert_fail@plt+0xa51c>
   1b8b0:	bl	11298 <__errno_location@plt>
   1b8b4:	ldr	r0, [r0]
   1b8b8:	subs	r0, r0, #9
   1b8bc:	mvnne	r0, #0
   1b8c0:	ldrd	r4, [sp]
   1b8c4:	ldr	r6, [sp, #8]
   1b8c8:	add	sp, sp, #12
   1b8cc:	pop	{pc}		; (ldr pc, [sp], #4)
   1b8d0:	cmp	r0, #0
   1b8d4:	bne	1b8f4 <__assert_fail@plt+0xa524>
   1b8d8:	bl	11298 <__errno_location@plt>
   1b8dc:	mov	r3, #0
   1b8e0:	str	r3, [r0]
   1b8e4:	mvn	r0, #0
   1b8e8:	b	1b8c0 <__assert_fail@plt+0xa4f0>
   1b8ec:	mvn	r0, #0
   1b8f0:	b	1b8c0 <__assert_fail@plt+0xa4f0>
   1b8f4:	mvn	r0, #0
   1b8f8:	b	1b8c0 <__assert_fail@plt+0xa4f0>
   1b8fc:	strd	r4, [sp, #-16]!
   1b900:	str	r6, [sp, #8]
   1b904:	str	lr, [sp, #12]
   1b908:	sub	sp, sp, #8
   1b90c:	mov	r4, r0
   1b910:	bl	112e0 <fileno@plt>
   1b914:	cmp	r0, #0
   1b918:	blt	1b990 <__assert_fail@plt+0xa5c0>
   1b91c:	mov	r0, r4
   1b920:	bl	11214 <__freading@plt>
   1b924:	cmp	r0, #0
   1b928:	beq	1b95c <__assert_fail@plt+0xa58c>
   1b92c:	mov	r0, r4
   1b930:	bl	112e0 <fileno@plt>
   1b934:	mov	r3, #1
   1b938:	str	r3, [sp]
   1b93c:	mov	r2, #0
   1b940:	mov	r3, #0
   1b944:	bl	11190 <lseek64@plt>
   1b948:	mvn	r2, #0
   1b94c:	mvn	r3, #0
   1b950:	cmp	r1, r3
   1b954:	cmpeq	r0, r2
   1b958:	beq	1b99c <__assert_fail@plt+0xa5cc>
   1b95c:	mov	r0, r4
   1b960:	bl	1b9b8 <__assert_fail@plt+0xa5e8>
   1b964:	cmp	r0, #0
   1b968:	beq	1b99c <__assert_fail@plt+0xa5cc>
   1b96c:	bl	11298 <__errno_location@plt>
   1b970:	mov	r5, r0
   1b974:	ldr	r6, [r0]
   1b978:	mov	r0, r4
   1b97c:	bl	112f8 <fclose@plt>
   1b980:	cmp	r6, #0
   1b984:	strne	r6, [r5]
   1b988:	mvnne	r0, #0
   1b98c:	b	1b9a4 <__assert_fail@plt+0xa5d4>
   1b990:	mov	r0, r4
   1b994:	bl	112f8 <fclose@plt>
   1b998:	b	1b9a4 <__assert_fail@plt+0xa5d4>
   1b99c:	mov	r0, r4
   1b9a0:	bl	112f8 <fclose@plt>
   1b9a4:	add	sp, sp, #8
   1b9a8:	ldrd	r4, [sp]
   1b9ac:	ldr	r6, [sp, #8]
   1b9b0:	add	sp, sp, #12
   1b9b4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9b8:	str	r4, [sp, #-8]!
   1b9bc:	str	lr, [sp, #4]
   1b9c0:	sub	sp, sp, #8
   1b9c4:	subs	r4, r0, #0
   1b9c8:	beq	1b9dc <__assert_fail@plt+0xa60c>
   1b9cc:	mov	r0, r4
   1b9d0:	bl	11214 <__freading@plt>
   1b9d4:	cmp	r0, #0
   1b9d8:	bne	1b9f4 <__assert_fail@plt+0xa624>
   1b9dc:	mov	r0, r4
   1b9e0:	bl	110c4 <fflush@plt>
   1b9e4:	add	sp, sp, #8
   1b9e8:	ldr	r4, [sp]
   1b9ec:	add	sp, sp, #4
   1b9f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9f4:	ldr	r3, [r4]
   1b9f8:	tst	r3, #256	; 0x100
   1b9fc:	bne	1ba0c <__assert_fail@plt+0xa63c>
   1ba00:	mov	r0, r4
   1ba04:	bl	110c4 <fflush@plt>
   1ba08:	b	1b9e4 <__assert_fail@plt+0xa614>
   1ba0c:	mov	r3, #1
   1ba10:	str	r3, [sp]
   1ba14:	mov	r2, #0
   1ba18:	mov	r3, #0
   1ba1c:	mov	r0, r4
   1ba20:	bl	1ba88 <__assert_fail@plt+0xa6b8>
   1ba24:	b	1ba00 <__assert_fail@plt+0xa630>
   1ba28:	strd	r4, [sp, #-12]!
   1ba2c:	str	lr, [sp, #8]
   1ba30:	sub	sp, sp, #12
   1ba34:	mov	r5, r0
   1ba38:	bl	11298 <__errno_location@plt>
   1ba3c:	mov	r4, r0
   1ba40:	ldr	r3, [r0]
   1ba44:	str	r3, [sp]
   1ba48:	str	r3, [sp, #4]
   1ba4c:	mov	r3, #0
   1ba50:	str	r3, [r0]
   1ba54:	mov	r0, r5
   1ba58:	bl	110d0 <free@plt>
   1ba5c:	ldr	r3, [r4]
   1ba60:	clz	r3, r3
   1ba64:	lsr	r3, r3, #5
   1ba68:	add	r2, sp, #8
   1ba6c:	add	r3, r2, r3, lsl #2
   1ba70:	ldr	r3, [r3, #-8]
   1ba74:	str	r3, [r4]
   1ba78:	add	sp, sp, #12
   1ba7c:	ldrd	r4, [sp]
   1ba80:	add	sp, sp, #8
   1ba84:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba88:	str	r4, [sp, #-16]!
   1ba8c:	strd	r6, [sp, #4]
   1ba90:	str	lr, [sp, #12]
   1ba94:	sub	sp, sp, #8
   1ba98:	mov	r4, r0
   1ba9c:	mov	r6, r2
   1baa0:	mov	r7, r3
   1baa4:	ldr	r2, [r0, #8]
   1baa8:	ldr	r3, [r0, #4]
   1baac:	cmp	r2, r3
   1bab0:	beq	1bae0 <__assert_fail@plt+0xa710>
   1bab4:	ldr	r3, [sp, #24]
   1bab8:	str	r3, [sp]
   1babc:	mov	r2, r6
   1bac0:	mov	r3, r7
   1bac4:	mov	r0, r4
   1bac8:	bl	11304 <fseeko64@plt>
   1bacc:	add	sp, sp, #8
   1bad0:	ldr	r4, [sp]
   1bad4:	ldrd	r6, [sp, #4]
   1bad8:	add	sp, sp, #12
   1badc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bae0:	ldr	r2, [r0, #20]
   1bae4:	ldr	r3, [r0, #16]
   1bae8:	cmp	r2, r3
   1baec:	bne	1bab4 <__assert_fail@plt+0xa6e4>
   1baf0:	ldr	r3, [r0, #36]	; 0x24
   1baf4:	cmp	r3, #0
   1baf8:	bne	1bab4 <__assert_fail@plt+0xa6e4>
   1bafc:	bl	112e0 <fileno@plt>
   1bb00:	ldr	r3, [sp, #24]
   1bb04:	str	r3, [sp]
   1bb08:	mov	r2, r6
   1bb0c:	mov	r3, r7
   1bb10:	bl	11190 <lseek64@plt>
   1bb14:	mvn	r2, #0
   1bb18:	mvn	r3, #0
   1bb1c:	cmp	r1, r3
   1bb20:	cmpeq	r0, r2
   1bb24:	beq	1bb40 <__assert_fail@plt+0xa770>
   1bb28:	ldr	r3, [r4]
   1bb2c:	bic	r3, r3, #16
   1bb30:	str	r3, [r4]
   1bb34:	strd	r0, [r4, #80]	; 0x50
   1bb38:	mov	r0, #0
   1bb3c:	b	1bacc <__assert_fail@plt+0xa6fc>
   1bb40:	mvn	r0, #0
   1bb44:	b	1bacc <__assert_fail@plt+0xa6fc>
   1bb48:	str	r4, [sp, #-8]!
   1bb4c:	str	lr, [sp, #4]
   1bb50:	mov	r0, #14
   1bb54:	bl	11334 <nl_langinfo@plt>
   1bb58:	cmp	r0, #0
   1bb5c:	beq	1bb80 <__assert_fail@plt+0xa7b0>
   1bb60:	ldrb	r2, [r0]
   1bb64:	movw	r3, #932	; 0x3a4
   1bb68:	movt	r3, #2
   1bb6c:	cmp	r2, #0
   1bb70:	moveq	r0, r3
   1bb74:	ldr	r4, [sp]
   1bb78:	add	sp, sp, #4
   1bb7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb80:	movw	r0, #932	; 0x3a4
   1bb84:	movt	r0, #2
   1bb88:	b	1bb74 <__assert_fail@plt+0xa7a4>
   1bb8c:	strd	r4, [sp, #-20]!	; 0xffffffec
   1bb90:	strd	r6, [sp, #8]
   1bb94:	str	lr, [sp, #16]
   1bb98:	sub	sp, sp, #12
   1bb9c:	mov	r7, r1
   1bba0:	mov	r5, r2
   1bba4:	subs	r6, r0, #0
   1bba8:	addeq	r6, sp, #4
   1bbac:	mov	r0, r6
   1bbb0:	bl	111b4 <mbrtowc@plt>
   1bbb4:	mov	r4, r0
   1bbb8:	cmp	r5, #0
   1bbbc:	cmnne	r0, #3
   1bbc0:	bhi	1bbdc <__assert_fail@plt+0xa80c>
   1bbc4:	mov	r0, r4
   1bbc8:	add	sp, sp, #12
   1bbcc:	ldrd	r4, [sp]
   1bbd0:	ldrd	r6, [sp, #8]
   1bbd4:	add	sp, sp, #16
   1bbd8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bbdc:	mov	r0, #0
   1bbe0:	bl	1d6e0 <__assert_fail@plt+0xc310>
   1bbe4:	cmp	r0, #0
   1bbe8:	bne	1bbc4 <__assert_fail@plt+0xa7f4>
   1bbec:	ldrb	r3, [r7]
   1bbf0:	str	r3, [r6]
   1bbf4:	mov	r4, #1
   1bbf8:	b	1bbc4 <__assert_fail@plt+0xa7f4>
   1bbfc:	strd	r4, [sp, #-16]!
   1bc00:	str	r6, [sp, #8]
   1bc04:	str	lr, [sp, #12]
   1bc08:	mov	r5, r0
   1bc0c:	subs	r4, r2, #0
   1bc10:	beq	1bc40 <__assert_fail@plt+0xa870>
   1bc14:	mov	r6, r1
   1bc18:	bl	1122c <__ctype_tolower_loc@plt>
   1bc1c:	add	r3, r6, r4
   1bc20:	add	r2, r5, r4
   1bc24:	mov	r1, r6
   1bc28:	ldrb	lr, [r3, #-1]!
   1bc2c:	ldr	ip, [r0]
   1bc30:	ldr	ip, [ip, lr, lsl #2]
   1bc34:	strb	ip, [r2, #-1]!
   1bc38:	cmp	r3, r1
   1bc3c:	bne	1bc28 <__assert_fail@plt+0xa858>
   1bc40:	mov	r0, r5
   1bc44:	ldrd	r4, [sp]
   1bc48:	ldr	r6, [sp, #8]
   1bc4c:	add	sp, sp, #12
   1bc50:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc54:	strd	r4, [sp, #-16]!
   1bc58:	str	r6, [sp, #8]
   1bc5c:	str	lr, [sp, #12]
   1bc60:	mov	r5, r0
   1bc64:	subs	r4, r2, #0
   1bc68:	beq	1bc98 <__assert_fail@plt+0xa8c8>
   1bc6c:	mov	r6, r1
   1bc70:	bl	11238 <__ctype_toupper_loc@plt>
   1bc74:	add	r3, r6, r4
   1bc78:	add	r2, r5, r4
   1bc7c:	mov	r1, r6
   1bc80:	ldrb	lr, [r3, #-1]!
   1bc84:	ldr	ip, [r0]
   1bc88:	ldr	ip, [ip, lr, lsl #2]
   1bc8c:	strb	ip, [r2, #-1]!
   1bc90:	cmp	r3, r1
   1bc94:	bne	1bc80 <__assert_fail@plt+0xa8b0>
   1bc98:	mov	r0, r5
   1bc9c:	ldrd	r4, [sp]
   1bca0:	ldr	r6, [sp, #8]
   1bca4:	add	sp, sp, #12
   1bca8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bcac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1bcb0:	strd	r6, [sp, #8]
   1bcb4:	strd	r8, [sp, #16]
   1bcb8:	strd	sl, [sp, #24]
   1bcbc:	str	lr, [sp, #32]
   1bcc0:	sub	sp, sp, #1120	; 0x460
   1bcc4:	sub	sp, sp, #12
   1bcc8:	str	r0, [sp, #28]
   1bccc:	str	r1, [sp, #24]
   1bcd0:	mov	r7, r2
   1bcd4:	mov	r4, r3
   1bcd8:	str	r3, [sp, #40]	; 0x28
   1bcdc:	ldrb	r3, [sp, #1168]	; 0x490
   1bce0:	str	r3, [sp, #36]	; 0x24
   1bce4:	ldr	r9, [sp, #1176]	; 0x498
   1bce8:	bl	11298 <__errno_location@plt>
   1bcec:	str	r0, [sp, #32]
   1bcf0:	ldr	r3, [r0]
   1bcf4:	str	r3, [sp, #44]	; 0x2c
   1bcf8:	ldr	r5, [r4, #8]
   1bcfc:	ldr	r2, [r4, #40]	; 0x28
   1bd00:	movw	r3, #64580	; 0xfc44
   1bd04:	movt	r3, #1
   1bd08:	cmp	r2, #0
   1bd0c:	moveq	r2, r3
   1bd10:	str	r2, [sp, #48]	; 0x30
   1bd14:	cmp	r5, #12
   1bd18:	subgt	r5, r5, #12
   1bd1c:	bgt	1bd28 <__assert_fail@plt+0xa958>
   1bd20:	cmp	r5, #0
   1bd24:	moveq	r5, #12
   1bd28:	ldrb	r3, [r7]
   1bd2c:	cmp	r3, #0
   1bd30:	beq	1d474 <__assert_fail@plt+0xc0a4>
   1bd34:	mov	fp, #0
   1bd38:	movw	r2, #46021	; 0xb3c5
   1bd3c:	movt	r2, #37282	; 0x91a2
   1bd40:	str	r2, [sp, #68]	; 0x44
   1bd44:	movw	r2, #34953	; 0x8889
   1bd48:	movt	r2, #34952	; 0x8888
   1bd4c:	str	r2, [sp, #72]	; 0x48
   1bd50:	movw	sl, #34079	; 0x851f
   1bd54:	movt	sl, #20971	; 0x51eb
   1bd58:	movw	r8, #9363	; 0x2493
   1bd5c:	movt	r8, #37449	; 0x9249
   1bd60:	movw	r6, #26215	; 0x6667
   1bd64:	movt	r6, #26214	; 0x6666
   1bd68:	str	r5, [sp, #64]	; 0x40
   1bd6c:	str	sl, [sp, #56]	; 0x38
   1bd70:	str	r8, [sp, #52]	; 0x34
   1bd74:	str	r6, [sp, #60]	; 0x3c
   1bd78:	ldr	r6, [sp, #28]
   1bd7c:	b	1bdb4 <__assert_fail@plt+0xa9e4>
   1bd80:	cmp	r6, #0
   1bd84:	beq	1bd98 <__assert_fail@plt+0xa9c8>
   1bd88:	cmp	r9, #1
   1bd8c:	bhi	1be10 <__assert_fail@plt+0xaa40>
   1bd90:	ldrb	r3, [r7]
   1bd94:	strb	r3, [r6], #1
   1bd98:	add	fp, fp, r4
   1bd9c:	mov	r4, r7
   1bda0:	add	r7, r4, #1
   1bda4:	ldrb	r3, [r4, #1]
   1bda8:	mvn	r9, #0
   1bdac:	cmp	r3, #0
   1bdb0:	beq	1d448 <__assert_fail@plt+0xc078>
   1bdb4:	cmp	r3, #37	; 0x25
   1bdb8:	beq	1bf40 <__assert_fail@plt+0xab70>
   1bdbc:	bic	r9, r9, r9, asr #31
   1bdc0:	cmp	r9, #1
   1bdc4:	movcs	r4, r9
   1bdc8:	movcc	r4, #1
   1bdcc:	ldr	r3, [sp, #24]
   1bdd0:	sub	r3, r3, fp
   1bdd4:	cmp	r3, r4
   1bdd8:	bhi	1bd80 <__assert_fail@plt+0xa9b0>
   1bddc:	mov	r3, #34	; 0x22
   1bde0:	ldr	r2, [sp, #32]
   1bde4:	str	r3, [r2]
   1bde8:	mov	fp, #0
   1bdec:	mov	r0, fp
   1bdf0:	add	sp, sp, #1120	; 0x460
   1bdf4:	add	sp, sp, #12
   1bdf8:	ldrd	r4, [sp]
   1bdfc:	ldrd	r6, [sp, #8]
   1be00:	ldrd	r8, [sp, #16]
   1be04:	ldrd	sl, [sp, #24]
   1be08:	add	sp, sp, #32
   1be0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1be10:	sub	r9, r9, #1
   1be14:	mov	r2, r9
   1be18:	mov	r1, #32
   1be1c:	mov	r0, r6
   1be20:	bl	112c8 <memset@plt>
   1be24:	add	r6, r6, r9
   1be28:	b	1bd90 <__assert_fail@plt+0xa9c0>
   1be2c:	str	r2, [sp, #28]
   1be30:	b	1be38 <__assert_fail@plt+0xaa68>
   1be34:	mov	r5, r1
   1be38:	ldrb	r2, [r4, #1]!
   1be3c:	sub	r3, r2, #35	; 0x23
   1be40:	cmp	r3, #60	; 0x3c
   1be44:	ldrls	pc, [pc, r3, lsl #2]
   1be48:	b	1bf68 <__assert_fail@plt+0xab98>
   1be4c:	andeq	fp, r1, r4, lsr lr
   1be50:	andeq	fp, r1, r8, ror #30
   1be54:	andeq	fp, r1, r8, ror #30
   1be58:	andeq	fp, r1, r8, ror #30
   1be5c:	andeq	fp, r1, r8, ror #30
   1be60:	andeq	fp, r1, r8, ror #30
   1be64:	andeq	fp, r1, r8, ror #30
   1be68:	andeq	fp, r1, r8, ror #30
   1be6c:	andeq	fp, r1, ip, lsr #28
   1be70:	andeq	fp, r1, r8, ror #30
   1be74:	andeq	fp, r1, ip, lsr #28
   1be78:	andeq	fp, r1, r8, ror #30
   1be7c:	andeq	fp, r1, r8, ror #30
   1be80:	andeq	fp, r1, ip, lsr #28
   1be84:	andeq	fp, r1, r8, ror #30
   1be88:	andeq	fp, r1, r8, ror #30
   1be8c:	andeq	fp, r1, r8, ror #30
   1be90:	andeq	fp, r1, r8, ror #30
   1be94:	andeq	fp, r1, r8, ror #30
   1be98:	andeq	fp, r1, r8, ror #30
   1be9c:	andeq	fp, r1, r8, ror #30
   1bea0:	andeq	fp, r1, r8, ror #30
   1bea4:	andeq	fp, r1, r8, ror #30
   1bea8:	andeq	fp, r1, r8, ror #30
   1beac:	andeq	fp, r1, r8, ror #30
   1beb0:	andeq	fp, r1, r8, ror #30
   1beb4:	andeq	fp, r1, r8, ror #30
   1beb8:	andeq	fp, r1, r8, ror #30
   1bebc:	andeq	fp, r1, r8, ror #30
   1bec0:	andeq	fp, r1, r8, ror #30
   1bec4:	andeq	fp, r1, r8, ror #30
   1bec8:	andeq	fp, r1, r8, ror #30
   1becc:	andeq	fp, r1, r8, ror #30
   1bed0:	andeq	fp, r1, r8, ror #30
   1bed4:	andeq	fp, r1, r8, ror #30
   1bed8:	andeq	fp, r1, r8, ror #30
   1bedc:	andeq	fp, r1, r8, ror #30
   1bee0:	andeq	fp, r1, r8, ror #30
   1bee4:	andeq	fp, r1, r8, ror #30
   1bee8:	andeq	fp, r1, r8, ror #30
   1beec:	andeq	fp, r1, r8, ror #30
   1bef0:	andeq	fp, r1, r8, ror #30
   1bef4:	andeq	fp, r1, r8, ror #30
   1bef8:	andeq	fp, r1, r8, ror #30
   1befc:	andeq	fp, r1, r8, ror #30
   1bf00:	andeq	fp, r1, r8, ror #30
   1bf04:	andeq	fp, r1, r8, ror #30
   1bf08:	andeq	fp, r1, r8, ror #30
   1bf0c:	andeq	fp, r1, r8, ror #30
   1bf10:	andeq	fp, r1, r8, ror #30
   1bf14:	andeq	fp, r1, r8, ror #30
   1bf18:	andeq	fp, r1, r8, ror #30
   1bf1c:	andeq	fp, r1, r8, ror #30
   1bf20:	andeq	fp, r1, r8, ror #30
   1bf24:	andeq	fp, r1, r8, ror #30
   1bf28:	andeq	fp, r1, r8, ror #30
   1bf2c:	andeq	fp, r1, r8, ror #30
   1bf30:	andeq	fp, r1, r8, ror #30
   1bf34:	andeq	fp, r1, r8, ror #30
   1bf38:	andeq	fp, r1, ip, asr pc
   1bf3c:	andeq	fp, r1, ip, lsr #28
   1bf40:	ldr	r3, [sp, #36]	; 0x24
   1bf44:	str	r3, [sp, #76]	; 0x4c
   1bf48:	mov	r4, r7
   1bf4c:	mov	r5, #0
   1bf50:	str	r5, [sp, #28]
   1bf54:	mov	r1, #1
   1bf58:	b	1be38 <__assert_fail@plt+0xaa68>
   1bf5c:	mov	r3, #1
   1bf60:	str	r3, [sp, #76]	; 0x4c
   1bf64:	b	1be38 <__assert_fail@plt+0xaa68>
   1bf68:	sub	r2, r2, #48	; 0x30
   1bf6c:	cmp	r2, #9
   1bf70:	bls	1c18c <__assert_fail@plt+0xadbc>
   1bf74:	ldrb	sl, [r4]
   1bf78:	cmp	sl, #69	; 0x45
   1bf7c:	beq	1c1e4 <__assert_fail@plt+0xae14>
   1bf80:	cmp	sl, #79	; 0x4f
   1bf84:	movne	sl, #0
   1bf88:	beq	1c1e4 <__assert_fail@plt+0xae14>
   1bf8c:	ldrb	r3, [r4]
   1bf90:	mov	r1, r3
   1bf94:	cmp	r3, #122	; 0x7a
   1bf98:	ldrls	pc, [pc, r3, lsl #2]
   1bf9c:	b	1c230 <__assert_fail@plt+0xae60>
   1bfa0:	andeq	ip, r1, ip, lsr #4
   1bfa4:	andeq	ip, r1, r0, lsr r2
   1bfa8:	andeq	ip, r1, r0, lsr r2
   1bfac:	andeq	ip, r1, r0, lsr r2
   1bfb0:	andeq	ip, r1, r0, lsr r2
   1bfb4:	andeq	ip, r1, r0, lsr r2
   1bfb8:	andeq	ip, r1, r0, lsr r2
   1bfbc:	andeq	ip, r1, r0, lsr r2
   1bfc0:	andeq	ip, r1, r0, lsr r2
   1bfc4:	andeq	ip, r1, r0, lsr r2
   1bfc8:	andeq	ip, r1, r0, lsr r2
   1bfcc:	andeq	ip, r1, r0, lsr r2
   1bfd0:	andeq	ip, r1, r0, lsr r2
   1bfd4:	andeq	ip, r1, r0, lsr r2
   1bfd8:	andeq	ip, r1, r0, lsr r2
   1bfdc:	andeq	ip, r1, r0, lsr r2
   1bfe0:	andeq	ip, r1, r0, lsr r2
   1bfe4:	andeq	ip, r1, r0, lsr r2
   1bfe8:	andeq	ip, r1, r0, lsr r2
   1bfec:	andeq	ip, r1, r0, lsr r2
   1bff0:	andeq	ip, r1, r0, lsr r2
   1bff4:	andeq	ip, r1, r0, lsr r2
   1bff8:	andeq	ip, r1, r0, lsr r2
   1bffc:	andeq	ip, r1, r0, lsr r2
   1c000:	andeq	ip, r1, r0, lsr r2
   1c004:	andeq	ip, r1, r0, lsr r2
   1c008:	andeq	ip, r1, r0, lsr r2
   1c00c:	andeq	ip, r1, r0, lsr r2
   1c010:	andeq	ip, r1, r0, lsr r2
   1c014:	andeq	ip, r1, r0, lsr r2
   1c018:	andeq	ip, r1, r0, lsr r2
   1c01c:	andeq	ip, r1, r0, lsr r2
   1c020:	andeq	ip, r1, r0, lsr r2
   1c024:	andeq	ip, r1, r0, lsr r2
   1c028:	andeq	ip, r1, r0, lsr r2
   1c02c:	andeq	ip, r1, r0, lsr r2
   1c030:	andeq	ip, r1, r0, lsr r2
   1c034:	andeq	ip, r1, r0, lsr #4
   1c038:	andeq	ip, r1, r0, lsr r2
   1c03c:	andeq	ip, r1, r0, lsr r2
   1c040:	andeq	ip, r1, r0, lsr r2
   1c044:	andeq	ip, r1, r0, lsr r2
   1c048:	andeq	ip, r1, r0, lsr r2
   1c04c:	andeq	ip, r1, r0, lsr r2
   1c050:	andeq	ip, r1, r0, lsr r2
   1c054:	andeq	ip, r1, r0, lsr r2
   1c058:	andeq	ip, r1, r0, lsr r2
   1c05c:	andeq	ip, r1, r0, lsr r2
   1c060:	andeq	ip, r1, r0, lsr r2
   1c064:	andeq	ip, r1, r0, lsr r2
   1c068:	andeq	ip, r1, r0, lsr r2
   1c06c:	andeq	ip, r1, r0, lsr r2
   1c070:	andeq	ip, r1, r0, lsr r2
   1c074:	andeq	ip, r1, r0, lsr r2
   1c078:	andeq	ip, r1, r0, lsr r2
   1c07c:	andeq	ip, r1, r0, lsr r2
   1c080:	andeq	ip, r1, r0, lsr r2
   1c084:	andeq	ip, r1, r0, lsr r2
   1c088:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c08c:	andeq	ip, r1, r0, lsr r2
   1c090:	andeq	ip, r1, r0, lsr r2
   1c094:	andeq	ip, r1, r0, lsr r2
   1c098:	andeq	ip, r1, r0, lsr r2
   1c09c:	andeq	ip, r1, r0, lsr r2
   1c0a0:	andeq	ip, r1, r0, lsr r2
   1c0a4:	muleq	r1, r8, r3
   1c0a8:	ldrdeq	ip, [r1], -r8
   1c0ac:	andeq	ip, r1, r4, ror r5
   1c0b0:	andeq	ip, r1, r4, lsl r6
   1c0b4:	andeq	ip, r1, r0, lsr r2
   1c0b8:	ldrdeq	ip, [r1], -r0
   1c0bc:	andeq	ip, r1, r4, ror lr
   1c0c0:	andeq	ip, r1, r4, lsl #18
   1c0c4:	andeq	ip, r1, r0, lsr #18
   1c0c8:	andeq	ip, r1, r0, lsr r2
   1c0cc:	andeq	ip, r1, r0, lsr r2
   1c0d0:	andeq	ip, r1, r0, lsr r2
   1c0d4:	muleq	r1, r0, r9
   1c0d8:	andeq	ip, r1, r0, ror #19
   1c0dc:	andeq	ip, r1, r0, lsr r2
   1c0e0:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c0e4:	andeq	ip, r1, r0, lsr r2
   1c0e8:	andeq	ip, r1, r0, lsl r4
   1c0ec:	andeq	ip, r1, r0, lsl #25
   1c0f0:	andeq	ip, r1, ip, ror #3
   1c0f4:	andeq	ip, r1, r8, lsr lr
   1c0f8:	andeq	ip, r1, r4, ror lr
   1c0fc:	andeq	sp, r1, r8, asr #1
   1c100:	andeq	ip, r1, ip, asr sp
   1c104:	andeq	sp, r1, ip, lsr r1
   1c108:	ldrdeq	sp, [r1], -r4
   1c10c:	andeq	ip, r1, r0, lsr r2
   1c110:	andeq	ip, r1, r0, lsr r2
   1c114:	andeq	ip, r1, r0, lsr r2
   1c118:	andeq	ip, r1, r0, lsr r2
   1c11c:	andeq	ip, r1, r0, lsr r2
   1c120:	andeq	ip, r1, r0, lsr r2
   1c124:	andeq	ip, r1, r0, ror #6
   1c128:			; <UNDEFINED> instruction: 0x0001c3b8
   1c12c:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c130:	andeq	ip, r1, ip, lsr #12
   1c134:	andeq	ip, r1, r8, asr #12
   1c138:	andeq	ip, r1, r0, lsr r2
   1c13c:	andeq	ip, r1, r4, ror lr
   1c140:			; <UNDEFINED> instruction: 0x0001c3b8
   1c144:	andeq	ip, r1, r0, lsr r2
   1c148:	andeq	ip, r1, ip, asr r9
   1c14c:	andeq	ip, r1, r8, lsr r9
   1c150:	andeq	ip, r1, ip, asr #18
   1c154:	andeq	ip, r1, ip, lsr #19
   1c158:	andeq	ip, r1, ip, ror #22
   1c15c:	andeq	ip, r1, r0, lsr r2
   1c160:	andeq	ip, r1, r4, lsl #24
   1c164:	andeq	ip, r1, r4, asr #24
   1c168:	andeq	ip, r1, r4, lsr r5
   1c16c:	muleq	r1, ip, ip
   1c170:	andeq	ip, r1, r0, ror sp
   1c174:	andeq	ip, r1, r0, lsl #28
   1c178:	andeq	ip, r1, r0, lsr r2
   1c17c:	andeq	sp, r1, r0, lsr #2
   1c180:	andeq	ip, r1, r0, lsl #12
   1c184:	andeq	sp, r1, ip, ror r1
   1c188:	andeq	sp, r1, r8, ror #5
   1c18c:	mov	r9, #0
   1c190:	mov	r1, #10
   1c194:	b	1c1a8 <__assert_fail@plt+0xadd8>
   1c198:	ldrb	r3, [r4, #1]!
   1c19c:	sub	r3, r3, #48	; 0x30
   1c1a0:	cmp	r3, #9
   1c1a4:	bhi	1bf74 <__assert_fail@plt+0xaba4>
   1c1a8:	smull	r8, r9, r9, r1
   1c1ac:	asr	r0, r8, #31
   1c1b0:	mov	r2, r8
   1c1b4:	cmp	r0, r9
   1c1b8:	mvnne	r9, #-2147483648	; 0x80000000
   1c1bc:	bne	1c198 <__assert_fail@plt+0xadc8>
   1c1c0:	ldrb	r9, [r4]
   1c1c4:	sub	r9, r9, #48	; 0x30
   1c1c8:	adds	r2, r2, r9
   1c1cc:	movvs	r3, #1
   1c1d0:	movvc	r3, #0
   1c1d4:	cmp	r3, #0
   1c1d8:	moveq	r9, r2
   1c1dc:	mvnne	r9, #-2147483648	; 0x80000000
   1c1e0:	b	1c198 <__assert_fail@plt+0xadc8>
   1c1e4:	add	r4, r4, #1
   1c1e8:	b	1bf8c <__assert_fail@plt+0xabbc>
   1c1ec:	mvn	r7, #0
   1c1f0:	movw	sl, #940	; 0x3ac
   1c1f4:	movt	sl, #2
   1c1f8:	b	1c41c <__assert_fail@plt+0xb04c>
   1c1fc:	add	r2, r4, #1
   1c200:	ldrb	r3, [r4, #1]
   1c204:	cmp	r3, #58	; 0x3a
   1c208:	movne	lr, #1
   1c20c:	beq	1d2c8 <__assert_fail@plt+0xbef8>
   1c210:	cmp	r3, #122	; 0x7a
   1c214:	moveq	r4, r2
   1c218:	bne	1c230 <__assert_fail@plt+0xae60>
   1c21c:	b	1d2ec <__assert_fail@plt+0xbf1c>
   1c220:	sub	r3, r4, #1
   1c224:	cmp	r7, r3
   1c228:	beq	1c2d0 <__assert_fail@plt+0xaf00>
   1c22c:	sub	r4, r4, #1
   1c230:	sub	r5, r4, r7
   1c234:	add	r5, r5, #1
   1c238:	ldr	r3, [sp, #28]
   1c23c:	subs	r3, r3, #45	; 0x2d
   1c240:	movne	r3, #1
   1c244:	cmp	r9, #0
   1c248:	movlt	r3, #0
   1c24c:	cmp	r3, #0
   1c250:	moveq	r9, #0
   1c254:	mov	r8, r9
   1c258:	cmp	r9, r5
   1c25c:	movcc	r9, r5
   1c260:	ldr	r3, [sp, #24]
   1c264:	sub	r3, r3, fp
   1c268:	cmp	r3, r9
   1c26c:	bls	1d424 <__assert_fail@plt+0xc054>
   1c270:	cmp	r6, #0
   1c274:	beq	1c2c8 <__assert_fail@plt+0xaef8>
   1c278:	cmp	r8, r5
   1c27c:	bls	1c2a8 <__assert_fail@plt+0xaed8>
   1c280:	sub	r8, r8, r5
   1c284:	ldr	r3, [sp, #28]
   1c288:	cmp	r3, #43	; 0x2b
   1c28c:	cmpne	r3, #48	; 0x30
   1c290:	mov	r2, r8
   1c294:	moveq	r1, #48	; 0x30
   1c298:	movne	r1, #32
   1c29c:	mov	r0, r6
   1c2a0:	bl	112c8 <memset@plt>
   1c2a4:	add	r6, r6, r8
   1c2a8:	ldr	r3, [sp, #76]	; 0x4c
   1c2ac:	cmp	r3, #0
   1c2b0:	beq	1d434 <__assert_fail@plt+0xc064>
   1c2b4:	mov	r2, r5
   1c2b8:	mov	r1, r7
   1c2bc:	mov	r0, r6
   1c2c0:	bl	1bc54 <__assert_fail@plt+0xa884>
   1c2c4:	add	r6, r6, r5
   1c2c8:	add	fp, fp, r9
   1c2cc:	b	1bda0 <__assert_fail@plt+0xa9d0>
   1c2d0:	ldr	r2, [sp, #28]
   1c2d4:	mvn	r3, r9
   1c2d8:	lsr	r3, r3, #31
   1c2dc:	cmp	r2, #45	; 0x2d
   1c2e0:	moveq	r3, #0
   1c2e4:	cmp	r3, #0
   1c2e8:	moveq	r9, #0
   1c2ec:	mov	r5, r9
   1c2f0:	cmp	r9, #1
   1c2f4:	movcc	r9, #1
   1c2f8:	ldr	r3, [sp, #24]
   1c2fc:	sub	r3, r3, fp
   1c300:	cmp	r3, r9
   1c304:	bls	1c350 <__assert_fail@plt+0xaf80>
   1c308:	cmp	r6, #0
   1c30c:	beq	1c348 <__assert_fail@plt+0xaf78>
   1c310:	cmp	r5, #1
   1c314:	bls	1c340 <__assert_fail@plt+0xaf70>
   1c318:	sub	r5, r5, #1
   1c31c:	ldr	r3, [sp, #28]
   1c320:	cmp	r3, #43	; 0x2b
   1c324:	cmpne	r3, #48	; 0x30
   1c328:	mov	r2, r5
   1c32c:	moveq	r1, #48	; 0x30
   1c330:	movne	r1, #32
   1c334:	mov	r0, r6
   1c338:	bl	112c8 <memset@plt>
   1c33c:	add	r6, r6, r5
   1c340:	ldrb	r3, [r4]
   1c344:	strb	r3, [r6], #1
   1c348:	add	fp, fp, r9
   1c34c:	b	1bda0 <__assert_fail@plt+0xa9d0>
   1c350:	mov	r3, #34	; 0x22
   1c354:	ldr	r2, [sp, #32]
   1c358:	str	r3, [r2]
   1c35c:	b	1bde8 <__assert_fail@plt+0xaa18>
   1c360:	cmp	sl, #0
   1c364:	bne	1c230 <__assert_fail@plt+0xae60>
   1c368:	ldr	r3, [sp, #76]	; 0x4c
   1c36c:	cmp	r5, #0
   1c370:	movne	r3, r5
   1c374:	str	r3, [sp, #76]	; 0x4c
   1c378:	mov	r1, #97	; 0x61
   1c37c:	mov	r3, #32
   1c380:	strb	r3, [sp, #88]	; 0x58
   1c384:	mov	r3, #37	; 0x25
   1c388:	strb	r3, [sp, #89]	; 0x59
   1c38c:	mov	r8, #0
   1c390:	add	r3, sp, #90	; 0x5a
   1c394:	b	1c6b0 <__assert_fail@plt+0xb2e0>
   1c398:	cmp	sl, #0
   1c39c:	bne	1c230 <__assert_fail@plt+0xae60>
   1c3a0:	ldr	r3, [sp, #76]	; 0x4c
   1c3a4:	cmp	r5, #0
   1c3a8:	movne	r3, r5
   1c3ac:	str	r3, [sp, #76]	; 0x4c
   1c3b0:	mov	r1, #65	; 0x41
   1c3b4:	b	1c37c <__assert_fail@plt+0xafac>
   1c3b8:	ldr	r3, [sp, #76]	; 0x4c
   1c3bc:	cmp	r5, #0
   1c3c0:	movne	r3, r5
   1c3c4:	str	r3, [sp, #76]	; 0x4c
   1c3c8:	cmp	sl, #69	; 0x45
   1c3cc:	movne	r8, #0
   1c3d0:	bne	1cc24 <__assert_fail@plt+0xb854>
   1c3d4:	b	1c230 <__assert_fail@plt+0xae60>
   1c3d8:	cmp	sl, #69	; 0x45
   1c3dc:	beq	1c230 <__assert_fail@plt+0xae60>
   1c3e0:	ldr	r3, [sp, #76]	; 0x4c
   1c3e4:	cmp	r5, #0
   1c3e8:	movne	r3, r5
   1c3ec:	str	r3, [sp, #76]	; 0x4c
   1c3f0:	mov	r1, #66	; 0x42
   1c3f4:	mov	r8, #0
   1c3f8:	b	1cc24 <__assert_fail@plt+0xb854>
   1c3fc:	cmp	sl, #79	; 0x4f
   1c400:	beq	1c230 <__assert_fail@plt+0xae60>
   1c404:	mov	r1, #99	; 0x63
   1c408:	mov	r8, #0
   1c40c:	b	1cc24 <__assert_fail@plt+0xb854>
   1c410:	mvn	r7, #0
   1c414:	movw	sl, #964	; 0x3c4
   1c418:	movt	sl, #2
   1c41c:	ldr	r3, [sp, #1188]	; 0x4a4
   1c420:	str	r3, [sp, #20]
   1c424:	ldr	r3, [sp, #1184]	; 0x4a0
   1c428:	str	r3, [sp, #16]
   1c42c:	ldr	r3, [sp, #1180]	; 0x49c
   1c430:	str	r3, [sp, #12]
   1c434:	str	r7, [sp, #8]
   1c438:	ldr	r8, [sp, #28]
   1c43c:	str	r8, [sp, #4]
   1c440:	ldr	r3, [sp, #76]	; 0x4c
   1c444:	str	r3, [sp]
   1c448:	ldr	r3, [sp, #40]	; 0x28
   1c44c:	mov	r2, sl
   1c450:	mvn	r1, #0
   1c454:	mov	r0, #0
   1c458:	bl	1bcac <__assert_fail@plt+0xa8dc>
   1c45c:	mov	r5, r0
   1c460:	mvn	r3, r9
   1c464:	lsr	r3, r3, #31
   1c468:	cmp	r8, #45	; 0x2d
   1c46c:	moveq	r3, #0
   1c470:	cmp	r3, #0
   1c474:	moveq	r9, #0
   1c478:	mov	r3, r9
   1c47c:	cmp	r9, r5
   1c480:	movcc	r9, r5
   1c484:	ldr	r2, [sp, #24]
   1c488:	sub	r8, r2, fp
   1c48c:	cmp	r8, r9
   1c490:	bls	1c524 <__assert_fail@plt+0xb154>
   1c494:	cmp	r6, #0
   1c498:	beq	1c51c <__assert_fail@plt+0xb14c>
   1c49c:	cmp	r3, r5
   1c4a0:	bls	1c4d8 <__assert_fail@plt+0xb108>
   1c4a4:	sub	r3, r3, r5
   1c4a8:	str	r3, [sp, #80]	; 0x50
   1c4ac:	ldr	r2, [sp, #28]
   1c4b0:	cmp	r2, #43	; 0x2b
   1c4b4:	cmpne	r2, #48	; 0x30
   1c4b8:	moveq	r2, r3
   1c4bc:	moveq	r1, #48	; 0x30
   1c4c0:	ldrne	r2, [sp, #80]	; 0x50
   1c4c4:	movne	r1, #32
   1c4c8:	mov	r0, r6
   1c4cc:	bl	112c8 <memset@plt>
   1c4d0:	ldr	r3, [sp, #80]	; 0x50
   1c4d4:	add	r6, r6, r3
   1c4d8:	ldr	r3, [sp, #1188]	; 0x4a4
   1c4dc:	str	r3, [sp, #20]
   1c4e0:	ldr	r3, [sp, #1184]	; 0x4a0
   1c4e4:	str	r3, [sp, #16]
   1c4e8:	ldr	r3, [sp, #1180]	; 0x49c
   1c4ec:	str	r3, [sp, #12]
   1c4f0:	str	r7, [sp, #8]
   1c4f4:	ldr	r3, [sp, #28]
   1c4f8:	str	r3, [sp, #4]
   1c4fc:	ldr	r3, [sp, #76]	; 0x4c
   1c500:	str	r3, [sp]
   1c504:	ldr	r3, [sp, #40]	; 0x28
   1c508:	mov	r2, sl
   1c50c:	mov	r1, r8
   1c510:	mov	r0, r6
   1c514:	bl	1bcac <__assert_fail@plt+0xa8dc>
   1c518:	add	r6, r6, r5
   1c51c:	add	fp, fp, r9
   1c520:	b	1bda0 <__assert_fail@plt+0xa9d0>
   1c524:	mov	r3, #34	; 0x22
   1c528:	ldr	r2, [sp, #32]
   1c52c:	str	r3, [r2]
   1c530:	b	1bde8 <__assert_fail@plt+0xaa18>
   1c534:	mov	r8, #0
   1c538:	b	1cc24 <__assert_fail@plt+0xb854>
   1c53c:	mov	r3, #34	; 0x22
   1c540:	ldr	r2, [sp, #32]
   1c544:	str	r3, [r2]
   1c548:	b	1bde8 <__assert_fail@plt+0xaa18>
   1c54c:	mov	r2, r5
   1c550:	add	r1, sp, #105	; 0x69
   1c554:	mov	r0, r6
   1c558:	bl	1bbfc <__assert_fail@plt+0xa82c>
   1c55c:	b	1c770 <__assert_fail@plt+0xb3a0>
   1c560:	mov	r2, r5
   1c564:	add	r1, sp, #105	; 0x69
   1c568:	mov	r0, r6
   1c56c:	bl	110f4 <memcpy@plt>
   1c570:	b	1c770 <__assert_fail@plt+0xb3a0>
   1c574:	cmp	sl, #69	; 0x45
   1c578:	beq	1d47c <__assert_fail@plt+0xc0ac>
   1c57c:	ldr	r3, [sp, #40]	; 0x28
   1c580:	ldr	r2, [r3, #20]
   1c584:	movw	r8, #63636	; 0xf894
   1c588:	movt	r8, #65535	; 0xffff
   1c58c:	cmp	r2, r8
   1c590:	movge	r8, #0
   1c594:	movlt	r8, #1
   1c598:	add	r3, r2, #1888	; 0x760
   1c59c:	add	r3, r3, #12
   1c5a0:	movw	r0, #1899	; 0x76b
   1c5a4:	cmp	r3, r0
   1c5a8:	mvnls	r3, #98	; 0x62
   1c5ac:	movhi	r3, #0
   1c5b0:	add	r3, r3, r2
   1c5b4:	ldr	r2, [sp, #56]	; 0x38
   1c5b8:	smull	r0, r2, r2, r3
   1c5bc:	asr	r3, r3, #31
   1c5c0:	rsb	r3, r3, r2, asr #5
   1c5c4:	add	r3, r3, #19
   1c5c8:	mov	r2, #2
   1c5cc:	str	r2, [sp, #80]	; 0x50
   1c5d0:	ldr	r0, [sp, #28]
   1c5d4:	mov	r2, r0
   1c5d8:	ldr	ip, [sp, #1172]	; 0x494
   1c5dc:	cmp	r0, #0
   1c5e0:	moveq	r2, ip
   1c5e4:	str	r2, [sp, #28]
   1c5e8:	cmp	r2, #43	; 0x2b
   1c5ec:	movne	r2, #0
   1c5f0:	beq	1c77c <__assert_fail@plt+0xb3ac>
   1c5f4:	str	r2, [sp, #84]	; 0x54
   1c5f8:	mov	r0, #0
   1c5fc:	b	1c67c <__assert_fail@plt+0xb2ac>
   1c600:	cmp	sl, #79	; 0x4f
   1c604:	beq	1c230 <__assert_fail@plt+0xae60>
   1c608:	mov	r1, #120	; 0x78
   1c60c:	mov	r8, #0
   1c610:	b	1cc24 <__assert_fail@plt+0xb854>
   1c614:	cmp	sl, #0
   1c618:	bne	1c230 <__assert_fail@plt+0xae60>
   1c61c:	mvn	r7, #0
   1c620:	movw	sl, #972	; 0x3cc
   1c624:	movt	sl, #2
   1c628:	b	1c41c <__assert_fail@plt+0xb04c>
   1c62c:	cmp	sl, #69	; 0x45
   1c630:	beq	1c230 <__assert_fail@plt+0xae60>
   1c634:	ldr	r3, [sp, #40]	; 0x28
   1c638:	ldr	r3, [r3, #12]
   1c63c:	mov	r2, #2
   1c640:	str	r2, [sp, #80]	; 0x50
   1c644:	b	1c670 <__assert_fail@plt+0xb2a0>
   1c648:	cmp	sl, #69	; 0x45
   1c64c:	beq	1c230 <__assert_fail@plt+0xae60>
   1c650:	ldr	r3, [sp, #40]	; 0x28
   1c654:	ldr	r3, [r3, #12]
   1c658:	ldr	r2, [sp, #28]
   1c65c:	cmp	r2, #0
   1c660:	mov	r2, #2
   1c664:	str	r2, [sp, #80]	; 0x50
   1c668:	moveq	r2, #95	; 0x5f
   1c66c:	streq	r2, [sp, #28]
   1c670:	lsr	r8, r3, #31
   1c674:	mov	r0, #0
   1c678:	str	r0, [sp, #84]	; 0x54
   1c67c:	eor	r2, r8, #1
   1c680:	cmp	sl, #79	; 0x4f
   1c684:	movne	r2, #0
   1c688:	andeq	r2, r2, #1
   1c68c:	cmp	r2, #0
   1c690:	beq	1c7a8 <__assert_fail@plt+0xb3d8>
   1c694:	mov	r3, #32
   1c698:	strb	r3, [sp, #88]	; 0x58
   1c69c:	mov	r3, #37	; 0x25
   1c6a0:	strb	r3, [sp, #89]	; 0x59
   1c6a4:	mov	r8, #0
   1c6a8:	strb	sl, [sp, #90]	; 0x5a
   1c6ac:	add	r3, sp, #91	; 0x5b
   1c6b0:	strb	r1, [r3]
   1c6b4:	mov	r2, #0
   1c6b8:	strb	r2, [r3, #1]
   1c6bc:	ldr	r3, [sp, #40]	; 0x28
   1c6c0:	add	r2, sp, #88	; 0x58
   1c6c4:	mov	r1, #1024	; 0x400
   1c6c8:	add	r0, sp, #104	; 0x68
   1c6cc:	bl	111fc <strftime@plt>
   1c6d0:	cmp	r0, #0
   1c6d4:	beq	1bda0 <__assert_fail@plt+0xa9d0>
   1c6d8:	sub	r5, r0, #1
   1c6dc:	ldr	r3, [sp, #28]
   1c6e0:	subs	r3, r3, #45	; 0x2d
   1c6e4:	movne	r3, #1
   1c6e8:	cmp	r9, #0
   1c6ec:	movlt	r3, #0
   1c6f0:	cmp	r3, #0
   1c6f4:	moveq	r9, #0
   1c6f8:	mov	r7, r9
   1c6fc:	cmp	r9, r5
   1c700:	movcc	r9, r5
   1c704:	ldr	r3, [sp, #24]
   1c708:	sub	r3, r3, fp
   1c70c:	cmp	r3, r9
   1c710:	bls	1c53c <__assert_fail@plt+0xb16c>
   1c714:	cmp	r6, #0
   1c718:	beq	1c774 <__assert_fail@plt+0xb3a4>
   1c71c:	cmp	r7, r5
   1c720:	bls	1c74c <__assert_fail@plt+0xb37c>
   1c724:	sub	r7, r7, r5
   1c728:	ldr	r3, [sp, #28]
   1c72c:	cmp	r3, #43	; 0x2b
   1c730:	cmpne	r3, #48	; 0x30
   1c734:	mov	r2, r7
   1c738:	moveq	r1, #48	; 0x30
   1c73c:	movne	r1, #32
   1c740:	mov	r0, r6
   1c744:	bl	112c8 <memset@plt>
   1c748:	add	r6, r6, r7
   1c74c:	cmp	r8, #0
   1c750:	bne	1c54c <__assert_fail@plt+0xb17c>
   1c754:	ldr	r3, [sp, #76]	; 0x4c
   1c758:	cmp	r3, #0
   1c75c:	beq	1c560 <__assert_fail@plt+0xb190>
   1c760:	mov	r2, r5
   1c764:	add	r1, sp, #105	; 0x69
   1c768:	mov	r0, r6
   1c76c:	bl	1bc54 <__assert_fail@plt+0xa884>
   1c770:	add	r6, r6, r5
   1c774:	add	fp, fp, r9
   1c778:	b	1bda0 <__assert_fail@plt+0xa9d0>
   1c77c:	ldr	ip, [sp, #80]	; 0x50
   1c780:	cmp	ip, #2
   1c784:	movw	r2, #9999	; 0x270f
   1c788:	moveq	r0, #99	; 0x63
   1c78c:	movne	r0, r2
   1c790:	cmp	ip, r9
   1c794:	movge	r2, #0
   1c798:	movlt	r2, #1
   1c79c:	cmp	r3, r0
   1c7a0:	orrhi	r2, r2, #1
   1c7a4:	b	1c5f4 <__assert_fail@plt+0xb224>
   1c7a8:	cmp	r8, #0
   1c7ac:	rsbne	r3, r3, #0
   1c7b0:	add	r5, sp, #102	; 0x66
   1c7b4:	mov	r7, #58	; 0x3a
   1c7b8:	movw	lr, #52429	; 0xcccd
   1c7bc:	movt	lr, #52428	; 0xcccc
   1c7c0:	b	1c7c8 <__assert_fail@plt+0xb3f8>
   1c7c4:	mov	r3, r1
   1c7c8:	tst	r0, #1
   1c7cc:	subne	ip, r5, #1
   1c7d0:	strbne	r7, [r5, #-1]
   1c7d4:	moveq	ip, r5
   1c7d8:	sub	r5, ip, #1
   1c7dc:	umull	r2, r1, lr, r3
   1c7e0:	lsr	r1, r1, #3
   1c7e4:	add	r2, r1, r1, lsl #2
   1c7e8:	sub	r2, r3, r2, lsl #1
   1c7ec:	add	r2, r2, #48	; 0x30
   1c7f0:	strb	r2, [ip, #-1]
   1c7f4:	asrs	r0, r0, #1
   1c7f8:	movne	r2, #1
   1c7fc:	moveq	r2, #0
   1c800:	cmp	r3, #9
   1c804:	movls	r3, r2
   1c808:	orrhi	r3, r2, #1
   1c80c:	cmp	r3, #0
   1c810:	bne	1c7c4 <__assert_fail@plt+0xb3f4>
   1c814:	ldr	r3, [sp, #28]
   1c818:	cmp	r3, #0
   1c81c:	moveq	r3, #48	; 0x30
   1c820:	str	r3, [sp, #28]
   1c824:	ldr	r3, [sp, #80]	; 0x50
   1c828:	cmp	r9, #0
   1c82c:	movlt	r9, r3
   1c830:	cmp	r8, #0
   1c834:	bne	1d494 <__assert_fail@plt+0xc0c4>
   1c838:	ldr	r3, [sp, #84]	; 0x54
   1c83c:	cmp	r3, #0
   1c840:	bne	1d590 <__assert_fail@plt+0xc1c0>
   1c844:	add	r7, sp, #102	; 0x66
   1c848:	sub	r7, r7, r5
   1c84c:	ldr	r3, [sp, #28]
   1c850:	subs	r3, r3, #45	; 0x2d
   1c854:	movne	r3, #1
   1c858:	sub	r8, r9, r7
   1c85c:	cmp	r8, #0
   1c860:	movle	r8, #0
   1c864:	andgt	r8, r3, #1
   1c868:	cmp	r8, #0
   1c86c:	moveq	r8, r3
   1c870:	b	1d500 <__assert_fail@plt+0xc130>
   1c874:	cmp	r6, #0
   1c878:	beq	1c890 <__assert_fail@plt+0xb4c0>
   1c87c:	mov	r2, sl
   1c880:	mov	r1, #32
   1c884:	mov	r0, r6
   1c888:	bl	112c8 <memset@plt>
   1c88c:	add	r6, r6, sl
   1c890:	add	fp, fp, sl
   1c894:	sub	r9, r9, sl
   1c898:	b	1d4dc <__assert_fail@plt+0xc10c>
   1c89c:	mov	r3, #34	; 0x22
   1c8a0:	ldr	r2, [sp, #32]
   1c8a4:	str	r3, [r2]
   1c8a8:	b	1bde8 <__assert_fail@plt+0xaa18>
   1c8ac:	mov	r3, #34	; 0x22
   1c8b0:	ldr	r2, [sp, #32]
   1c8b4:	str	r3, [r2]
   1c8b8:	b	1bde8 <__assert_fail@plt+0xaa18>
   1c8bc:	mov	r2, r7
   1c8c0:	mov	r1, r5
   1c8c4:	mov	r0, r6
   1c8c8:	bl	110f4 <memcpy@plt>
   1c8cc:	b	1d584 <__assert_fail@plt+0xc1b4>
   1c8d0:	cmp	sl, #0
   1c8d4:	bne	1c230 <__assert_fail@plt+0xae60>
   1c8d8:	ldr	r3, [sp, #28]
   1c8dc:	cmp	r3, #0
   1c8e0:	lsreq	r3, r9, #31
   1c8e4:	movne	r3, #0
   1c8e8:	cmp	r3, #0
   1c8ec:	bne	1d5d8 <__assert_fail@plt+0xc208>
   1c8f0:	sub	r7, r9, #6
   1c8f4:	bic	r7, r7, r7, asr #31
   1c8f8:	movw	sl, #952	; 0x3b8
   1c8fc:	movt	sl, #2
   1c900:	b	1c41c <__assert_fail@plt+0xb04c>
   1c904:	cmp	sl, #69	; 0x45
   1c908:	beq	1c230 <__assert_fail@plt+0xae60>
   1c90c:	ldr	r3, [sp, #40]	; 0x28
   1c910:	ldr	r3, [r3, #8]
   1c914:	mov	r2, #2
   1c918:	str	r2, [sp, #80]	; 0x50
   1c91c:	b	1c670 <__assert_fail@plt+0xb2a0>
   1c920:	cmp	sl, #69	; 0x45
   1c924:	beq	1c230 <__assert_fail@plt+0xae60>
   1c928:	ldr	r3, [sp, #64]	; 0x40
   1c92c:	mov	r2, #2
   1c930:	str	r2, [sp, #80]	; 0x50
   1c934:	b	1c670 <__assert_fail@plt+0xb2a0>
   1c938:	cmp	sl, #69	; 0x45
   1c93c:	beq	1c230 <__assert_fail@plt+0xae60>
   1c940:	ldr	r3, [sp, #40]	; 0x28
   1c944:	ldr	r3, [r3, #8]
   1c948:	b	1c658 <__assert_fail@plt+0xb288>
   1c94c:	cmp	sl, #69	; 0x45
   1c950:	beq	1c230 <__assert_fail@plt+0xae60>
   1c954:	ldr	r3, [sp, #64]	; 0x40
   1c958:	b	1c658 <__assert_fail@plt+0xb288>
   1c95c:	cmp	sl, #69	; 0x45
   1c960:	beq	1c230 <__assert_fail@plt+0xae60>
   1c964:	ldr	r3, [sp, #40]	; 0x28
   1c968:	ldr	r3, [r3, #28]
   1c96c:	cmn	r3, #1
   1c970:	movge	r8, #0
   1c974:	movlt	r8, #1
   1c978:	add	r3, r3, #1
   1c97c:	mov	r0, #0
   1c980:	str	r0, [sp, #84]	; 0x54
   1c984:	mov	r2, #3
   1c988:	str	r2, [sp, #80]	; 0x50
   1c98c:	b	1c67c <__assert_fail@plt+0xb2ac>
   1c990:	cmp	sl, #69	; 0x45
   1c994:	beq	1c230 <__assert_fail@plt+0xae60>
   1c998:	ldr	r3, [sp, #40]	; 0x28
   1c99c:	ldr	r3, [r3, #4]
   1c9a0:	mov	r2, #2
   1c9a4:	str	r2, [sp, #80]	; 0x50
   1c9a8:	b	1c670 <__assert_fail@plt+0xb2a0>
   1c9ac:	cmp	sl, #69	; 0x45
   1c9b0:	beq	1c230 <__assert_fail@plt+0xae60>
   1c9b4:	ldr	r3, [sp, #40]	; 0x28
   1c9b8:	ldr	r3, [r3, #16]
   1c9bc:	cmn	r3, #1
   1c9c0:	movge	r8, #0
   1c9c4:	movlt	r8, #1
   1c9c8:	add	r3, r3, #1
   1c9cc:	mov	r0, #0
   1c9d0:	str	r0, [sp, #84]	; 0x54
   1c9d4:	mov	r2, #2
   1c9d8:	str	r2, [sp, #80]	; 0x50
   1c9dc:	b	1c67c <__assert_fail@plt+0xb2ac>
   1c9e0:	cmp	sl, #69	; 0x45
   1c9e4:	beq	1c230 <__assert_fail@plt+0xae60>
   1c9e8:	cmp	r9, #0
   1c9ec:	movle	r9, #9
   1c9f0:	ldr	r3, [sp, #1188]	; 0x4a4
   1c9f4:	mov	r5, #9
   1c9f8:	ldr	r0, [sp, #60]	; 0x3c
   1c9fc:	b	1ca10 <__assert_fail@plt+0xb640>
   1ca00:	sub	r5, r5, #1
   1ca04:	smull	r1, r2, r0, r3
   1ca08:	asr	r3, r3, #31
   1ca0c:	rsb	r3, r3, r2, asr #2
   1ca10:	cmp	r5, r9
   1ca14:	bgt	1ca00 <__assert_fail@plt+0xb630>
   1ca18:	cmp	r5, #1
   1ca1c:	ble	1ca3c <__assert_fail@plt+0xb66c>
   1ca20:	smull	r1, r2, r0, r3
   1ca24:	asr	r1, r3, #31
   1ca28:	rsb	r2, r1, r2, asr #2
   1ca2c:	add	r2, r2, r2, lsl #2
   1ca30:	cmp	r3, r2, lsl #1
   1ca34:	beq	1ca00 <__assert_fail@plt+0xb630>
   1ca38:	b	1ca44 <__assert_fail@plt+0xb674>
   1ca3c:	cmp	r5, #1
   1ca40:	bne	1ca90 <__assert_fail@plt+0xb6c0>
   1ca44:	add	r2, sp, #1120	; 0x460
   1ca48:	add	r2, r2, #8
   1ca4c:	add	r1, r2, r5
   1ca50:	sub	r1, r1, #1040	; 0x410
   1ca54:	sub	r1, r1, #1
   1ca58:	rsb	r0, r2, #1040	; 0x410
   1ca5c:	add	r0, r0, #1
   1ca60:	ldr	ip, [sp, #60]	; 0x3c
   1ca64:	smull	r2, lr, ip, r3
   1ca68:	asr	r2, r3, #31
   1ca6c:	rsb	r2, r2, lr, asr #2
   1ca70:	add	lr, r2, r2, lsl #2
   1ca74:	sub	r3, r3, lr, lsl #1
   1ca78:	add	r3, r3, #48	; 0x30
   1ca7c:	strb	r3, [r1], #-1
   1ca80:	mov	r3, r2
   1ca84:	add	r2, r0, r1
   1ca88:	cmp	r2, #0
   1ca8c:	bgt	1ca64 <__assert_fail@plt+0xb694>
   1ca90:	ldr	r3, [sp, #28]
   1ca94:	cmp	r3, #0
   1ca98:	moveq	r3, #48	; 0x30
   1ca9c:	str	r3, [sp, #28]
   1caa0:	mov	r7, r5
   1caa4:	ldr	r3, [sp, #24]
   1caa8:	sub	r3, r3, fp
   1caac:	cmp	r3, r5
   1cab0:	bls	1cb38 <__assert_fail@plt+0xb768>
   1cab4:	cmp	r6, #0
   1cab8:	beq	1cadc <__assert_fail@plt+0xb70c>
   1cabc:	ldr	r3, [sp, #76]	; 0x4c
   1cac0:	cmp	r3, #0
   1cac4:	beq	1cb48 <__assert_fail@plt+0xb778>
   1cac8:	mov	r2, r5
   1cacc:	add	r1, sp, #88	; 0x58
   1cad0:	mov	r0, r6
   1cad4:	bl	1bc54 <__assert_fail@plt+0xa884>
   1cad8:	add	r6, r6, r7
   1cadc:	add	fp, r7, fp
   1cae0:	ldr	r3, [sp, #28]
   1cae4:	cmp	r3, #45	; 0x2d
   1cae8:	beq	1d63c <__assert_fail@plt+0xc26c>
   1caec:	sub	r5, r9, r5
   1caf0:	ldr	r3, [sp, #24]
   1caf4:	sub	r3, r3, fp
   1caf8:	cmp	r3, r5
   1cafc:	bls	1cb5c <__assert_fail@plt+0xb78c>
   1cb00:	cmp	r6, #0
   1cb04:	cmpne	r5, #0
   1cb08:	beq	1cb30 <__assert_fail@plt+0xb760>
   1cb0c:	ldr	r3, [sp, #28]
   1cb10:	cmp	r3, #43	; 0x2b
   1cb14:	cmpne	r3, #48	; 0x30
   1cb18:	mov	r2, r5
   1cb1c:	moveq	r1, #48	; 0x30
   1cb20:	movne	r1, #32
   1cb24:	mov	r0, r6
   1cb28:	bl	112c8 <memset@plt>
   1cb2c:	add	r6, r6, r5
   1cb30:	add	fp, fp, r5
   1cb34:	b	1bda0 <__assert_fail@plt+0xa9d0>
   1cb38:	mov	r3, #34	; 0x22
   1cb3c:	ldr	r2, [sp, #32]
   1cb40:	str	r3, [r2]
   1cb44:	b	1bde8 <__assert_fail@plt+0xaa18>
   1cb48:	mov	r2, r5
   1cb4c:	add	r1, sp, #88	; 0x58
   1cb50:	mov	r0, r6
   1cb54:	bl	110f4 <memcpy@plt>
   1cb58:	b	1cad8 <__assert_fail@plt+0xb708>
   1cb5c:	mov	r3, #34	; 0x22
   1cb60:	ldr	r2, [sp, #32]
   1cb64:	str	r3, [r2]
   1cb68:	b	1bde8 <__assert_fail@plt+0xaa18>
   1cb6c:	ldr	r2, [sp, #28]
   1cb70:	mvn	r3, r9
   1cb74:	lsr	r3, r3, #31
   1cb78:	cmp	r2, #45	; 0x2d
   1cb7c:	moveq	r3, #0
   1cb80:	cmp	r3, #0
   1cb84:	moveq	r9, #0
   1cb88:	mov	r5, r9
   1cb8c:	cmp	r9, #1
   1cb90:	movcc	r9, #1
   1cb94:	ldr	r3, [sp, #24]
   1cb98:	sub	r3, r3, fp
   1cb9c:	cmp	r3, r9
   1cba0:	bls	1cbec <__assert_fail@plt+0xb81c>
   1cba4:	cmp	r6, #0
   1cba8:	beq	1cbe4 <__assert_fail@plt+0xb814>
   1cbac:	cmp	r5, #1
   1cbb0:	bls	1cbdc <__assert_fail@plt+0xb80c>
   1cbb4:	sub	r5, r5, #1
   1cbb8:	ldr	r3, [sp, #28]
   1cbbc:	cmp	r3, #43	; 0x2b
   1cbc0:	cmpne	r3, #48	; 0x30
   1cbc4:	mov	r2, r5
   1cbc8:	moveq	r1, #48	; 0x30
   1cbcc:	movne	r1, #32
   1cbd0:	mov	r0, r6
   1cbd4:	bl	112c8 <memset@plt>
   1cbd8:	add	r6, r6, r5
   1cbdc:	mov	r3, #10
   1cbe0:	strb	r3, [r6], #1
   1cbe4:	add	fp, fp, r9
   1cbe8:	b	1bda0 <__assert_fail@plt+0xa9d0>
   1cbec:	mov	r3, #34	; 0x22
   1cbf0:	ldr	r2, [sp, #32]
   1cbf4:	str	r3, [r2]
   1cbf8:	b	1bde8 <__assert_fail@plt+0xaa18>
   1cbfc:	mov	r8, #1
   1cc00:	b	1cc08 <__assert_fail@plt+0xb838>
   1cc04:	mov	r8, #0
   1cc08:	cmp	r5, #0
   1cc0c:	movne	r8, r5
   1cc10:	mov	r1, #112	; 0x70
   1cc14:	cmp	r5, #0
   1cc18:	ldr	r3, [sp, #76]	; 0x4c
   1cc1c:	movne	r3, #0
   1cc20:	str	r3, [sp, #76]	; 0x4c
   1cc24:	mov	r3, #32
   1cc28:	strb	r3, [sp, #88]	; 0x58
   1cc2c:	mov	r3, #37	; 0x25
   1cc30:	strb	r3, [sp, #89]	; 0x59
   1cc34:	cmp	sl, #0
   1cc38:	addeq	r3, sp, #90	; 0x5a
   1cc3c:	beq	1c6b0 <__assert_fail@plt+0xb2e0>
   1cc40:	b	1c6a8 <__assert_fail@plt+0xb2d8>
   1cc44:	ldr	r3, [sp, #40]	; 0x28
   1cc48:	ldr	r2, [r3, #16]
   1cc4c:	cmp	sl, #79	; 0x4f
   1cc50:	moveq	r1, #113	; 0x71
   1cc54:	beq	1c694 <__assert_fail@plt+0xb2c4>
   1cc58:	mov	r3, #11
   1cc5c:	mul	r3, r3, r2
   1cc60:	asr	r3, r3, #5
   1cc64:	add	r3, r3, #1
   1cc68:	mov	r0, #0
   1cc6c:	str	r0, [sp, #84]	; 0x54
   1cc70:	mov	r8, r0
   1cc74:	mov	r2, #1
   1cc78:	str	r2, [sp, #80]	; 0x50
   1cc7c:	b	1c7b0 <__assert_fail@plt+0xb3e0>
   1cc80:	cmp	sl, #69	; 0x45
   1cc84:	beq	1c230 <__assert_fail@plt+0xae60>
   1cc88:	ldr	r3, [sp, #40]	; 0x28
   1cc8c:	ldr	r3, [r3]
   1cc90:	mov	r2, #2
   1cc94:	str	r2, [sp, #80]	; 0x50
   1cc98:	b	1c670 <__assert_fail@plt+0xb2a0>
   1cc9c:	ldr	r1, [sp, #40]	; 0x28
   1cca0:	ldrd	r2, [r1]
   1cca4:	strd	r2, [sp, #104]	; 0x68
   1cca8:	ldrd	r2, [r1, #8]
   1ccac:	strd	r2, [sp, #112]	; 0x70
   1ccb0:	ldrd	r2, [r1, #16]
   1ccb4:	strd	r2, [sp, #120]	; 0x78
   1ccb8:	ldrd	r2, [r1, #24]
   1ccbc:	strd	r2, [sp, #128]	; 0x80
   1ccc0:	ldrd	r2, [r1, #32]
   1ccc4:	strd	r2, [sp, #136]	; 0x88
   1ccc8:	ldr	r3, [r1, #40]	; 0x28
   1cccc:	str	r3, [sp, #144]	; 0x90
   1ccd0:	mvn	r3, #0
   1ccd4:	str	r3, [sp, #132]	; 0x84
   1ccd8:	add	r1, sp, #104	; 0x68
   1ccdc:	ldr	r0, [sp, #1184]	; 0x4a0
   1cce0:	bl	1abc0 <__assert_fail@plt+0x97f0>
   1cce4:	ldr	r3, [sp, #132]	; 0x84
   1cce8:	cmp	r3, #0
   1ccec:	blt	1cd4c <__assert_fail@plt+0xb97c>
   1ccf0:	lsr	r8, r0, #31
   1ccf4:	mov	r2, r0
   1ccf8:	add	r5, sp, #102	; 0x66
   1ccfc:	ldr	r1, [sp, #60]	; 0x3c
   1cd00:	smull	r3, ip, r1, r2
   1cd04:	asr	ip, ip, #2
   1cd08:	asr	lr, r2, #31
   1cd0c:	sub	r3, ip, lr
   1cd10:	add	r3, r3, r3, lsl #2
   1cd14:	sub	r3, r2, r3, lsl #1
   1cd18:	sub	r2, ip, lr
   1cd1c:	cmp	r0, #0
   1cd20:	rsblt	r3, r3, #48	; 0x30
   1cd24:	addge	r3, r3, #48	; 0x30
   1cd28:	uxtb	r3, r3
   1cd2c:	strb	r3, [r5, #-1]!
   1cd30:	cmp	r2, #0
   1cd34:	bne	1cd00 <__assert_fail@plt+0xb930>
   1cd38:	mov	r3, #0
   1cd3c:	str	r3, [sp, #84]	; 0x54
   1cd40:	mov	r3, #1
   1cd44:	str	r3, [sp, #80]	; 0x50
   1cd48:	b	1c814 <__assert_fail@plt+0xb444>
   1cd4c:	mov	r3, #75	; 0x4b
   1cd50:	ldr	r2, [sp, #32]
   1cd54:	str	r3, [r2]
   1cd58:	b	1bde8 <__assert_fail@plt+0xaa18>
   1cd5c:	cmp	sl, #79	; 0x4f
   1cd60:	beq	1c230 <__assert_fail@plt+0xae60>
   1cd64:	mov	r1, #88	; 0x58
   1cd68:	mov	r8, #0
   1cd6c:	b	1cc24 <__assert_fail@plt+0xb854>
   1cd70:	ldr	r3, [sp, #28]
   1cd74:	subs	r3, r3, #45	; 0x2d
   1cd78:	movne	r3, #1
   1cd7c:	cmp	r9, #0
   1cd80:	movlt	r3, #0
   1cd84:	cmp	r3, #0
   1cd88:	moveq	r9, #0
   1cd8c:	mov	r5, r9
   1cd90:	cmp	r9, #1
   1cd94:	movcc	r9, #1
   1cd98:	ldr	r3, [sp, #24]
   1cd9c:	sub	r3, r3, fp
   1cda0:	cmp	r3, r9
   1cda4:	bls	1cdf0 <__assert_fail@plt+0xba20>
   1cda8:	cmp	r6, #0
   1cdac:	beq	1cde8 <__assert_fail@plt+0xba18>
   1cdb0:	cmp	r5, #1
   1cdb4:	bls	1cde0 <__assert_fail@plt+0xba10>
   1cdb8:	sub	r5, r5, #1
   1cdbc:	ldr	r3, [sp, #28]
   1cdc0:	cmp	r3, #43	; 0x2b
   1cdc4:	cmpne	r3, #48	; 0x30
   1cdc8:	mov	r2, r5
   1cdcc:	moveq	r1, #48	; 0x30
   1cdd0:	movne	r1, #32
   1cdd4:	mov	r0, r6
   1cdd8:	bl	112c8 <memset@plt>
   1cddc:	add	r6, r6, r5
   1cde0:	mov	r3, #9
   1cde4:	strb	r3, [r6], #1
   1cde8:	add	fp, fp, r9
   1cdec:	b	1bda0 <__assert_fail@plt+0xa9d0>
   1cdf0:	mov	r3, #34	; 0x22
   1cdf4:	ldr	r2, [sp, #32]
   1cdf8:	str	r3, [r2]
   1cdfc:	b	1bde8 <__assert_fail@plt+0xaa18>
   1ce00:	ldr	r3, [sp, #40]	; 0x28
   1ce04:	ldr	r3, [r3, #24]
   1ce08:	add	r3, r3, #6
   1ce0c:	ldr	r2, [sp, #52]	; 0x34
   1ce10:	smull	r0, r2, r2, r3
   1ce14:	add	r0, r2, r3
   1ce18:	asr	r2, r3, #31
   1ce1c:	rsb	r2, r2, r0, asr #2
   1ce20:	rsb	r2, r2, r2, lsl #3
   1ce24:	sub	r3, r3, r2
   1ce28:	add	r3, r3, #1
   1ce2c:	mov	r2, #1
   1ce30:	str	r2, [sp, #80]	; 0x50
   1ce34:	b	1c670 <__assert_fail@plt+0xb2a0>
   1ce38:	cmp	sl, #69	; 0x45
   1ce3c:	beq	1c230 <__assert_fail@plt+0xae60>
   1ce40:	ldr	r2, [sp, #40]	; 0x28
   1ce44:	ldr	r3, [r2, #28]
   1ce48:	ldr	r2, [r2, #24]
   1ce4c:	sub	r3, r3, r2
   1ce50:	add	r3, r3, #7
   1ce54:	ldr	r2, [sp, #52]	; 0x34
   1ce58:	smull	r0, r2, r2, r3
   1ce5c:	add	r2, r2, r3
   1ce60:	asr	r3, r3, #31
   1ce64:	rsb	r3, r3, r2, asr #2
   1ce68:	mov	r2, #2
   1ce6c:	str	r2, [sp, #80]	; 0x50
   1ce70:	b	1c670 <__assert_fail@plt+0xb2a0>
   1ce74:	cmp	sl, #69	; 0x45
   1ce78:	beq	1c230 <__assert_fail@plt+0xae60>
   1ce7c:	ldr	r2, [sp, #40]	; 0x28
   1ce80:	ldr	r5, [r2, #20]
   1ce84:	cmp	r5, #0
   1ce88:	movlt	r0, #300	; 0x12c
   1ce8c:	mvnge	r0, #99	; 0x63
   1ce90:	add	r0, r5, r0
   1ce94:	ldr	r7, [r2, #28]
   1ce98:	ldr	r2, [r2, #24]
   1ce9c:	str	r2, [sp, #80]	; 0x50
   1cea0:	sub	r2, r7, r2
   1cea4:	add	r2, r2, #380	; 0x17c
   1cea8:	add	r2, r2, #2
   1ceac:	ldr	ip, [sp, #52]	; 0x34
   1ceb0:	smull	ip, lr, ip, r2
   1ceb4:	add	lr, lr, r2
   1ceb8:	asr	ip, r2, #31
   1cebc:	rsb	ip, ip, lr, asr #2
   1cec0:	rsb	ip, ip, ip, lsl #3
   1cec4:	sub	ip, r2, ip
   1cec8:	sub	r8, r7, ip
   1cecc:	adds	r8, r8, #3
   1ced0:	bmi	1cfbc <__assert_fail@plt+0xbbec>
   1ced4:	tst	r0, #3
   1ced8:	movne	r2, #0
   1cedc:	bne	1cf18 <__assert_fail@plt+0xbb48>
   1cee0:	ldr	r2, [sp, #56]	; 0x38
   1cee4:	smull	ip, r2, r2, r0
   1cee8:	asr	ip, r0, #31
   1ceec:	rsb	r2, ip, r2, asr #5
   1cef0:	mov	ip, #100	; 0x64
   1cef4:	mls	r2, ip, r2, r0
   1cef8:	cmp	r2, #0
   1cefc:	movne	r2, #1
   1cf00:	bne	1cf18 <__assert_fail@plt+0xbb48>
   1cf04:	mov	ip, #400	; 0x190
   1cf08:	sdiv	r2, r0, ip
   1cf0c:	mls	r2, ip, r2, r0
   1cf10:	clz	r2, r2
   1cf14:	lsr	r2, r2, #5
   1cf18:	add	r2, r2, #364	; 0x16c
   1cf1c:	add	r2, r2, #1
   1cf20:	sub	r2, r7, r2
   1cf24:	ldr	r0, [sp, #80]	; 0x50
   1cf28:	sub	r0, r2, r0
   1cf2c:	add	r0, r0, #380	; 0x17c
   1cf30:	add	r0, r0, #2
   1cf34:	ldr	ip, [sp, #52]	; 0x34
   1cf38:	smull	ip, lr, ip, r0
   1cf3c:	add	lr, lr, r0
   1cf40:	asr	ip, r0, #31
   1cf44:	rsb	ip, ip, lr, asr #2
   1cf48:	rsb	ip, ip, ip, lsl #3
   1cf4c:	sub	ip, r0, ip
   1cf50:	sub	lr, r2, ip
   1cf54:	add	lr, lr, #3
   1cf58:	cmp	lr, #0
   1cf5c:	movge	r8, lr
   1cf60:	mvn	lr, lr
   1cf64:	lsr	lr, lr, #31
   1cf68:	cmp	r3, #71	; 0x47
   1cf6c:	beq	1d074 <__assert_fail@plt+0xbca4>
   1cf70:	cmp	r3, #103	; 0x67
   1cf74:	bne	1d0a4 <__assert_fail@plt+0xbcd4>
   1cf78:	ldr	ip, [sp, #56]	; 0x38
   1cf7c:	smull	r2, r3, ip, r5
   1cf80:	asr	r2, r5, #31
   1cf84:	rsb	r2, r2, r3, asr #5
   1cf88:	mov	r0, #100	; 0x64
   1cf8c:	mls	r2, r0, r2, r5
   1cf90:	add	r2, r2, lr
   1cf94:	smull	r3, ip, ip, r2
   1cf98:	asr	r3, r2, #31
   1cf9c:	rsb	r3, r3, ip, asr #5
   1cfa0:	mls	r3, r0, r3, r2
   1cfa4:	cmp	r3, #0
   1cfa8:	blt	1d04c <__assert_fail@plt+0xbc7c>
   1cfac:	mov	r8, #0
   1cfb0:	mov	r2, #2
   1cfb4:	str	r2, [sp, #80]	; 0x50
   1cfb8:	b	1c5d0 <__assert_fail@plt+0xb200>
   1cfbc:	sub	r0, r0, #1
   1cfc0:	tst	r0, #3
   1cfc4:	movne	r2, #0
   1cfc8:	bne	1d004 <__assert_fail@plt+0xbc34>
   1cfcc:	ldr	r2, [sp, #56]	; 0x38
   1cfd0:	smull	ip, r2, r2, r0
   1cfd4:	asr	ip, r0, #31
   1cfd8:	rsb	r2, ip, r2, asr #5
   1cfdc:	mov	ip, #100	; 0x64
   1cfe0:	mls	r2, ip, r2, r0
   1cfe4:	cmp	r2, #0
   1cfe8:	movne	r2, #1
   1cfec:	bne	1d004 <__assert_fail@plt+0xbc34>
   1cff0:	mov	ip, #400	; 0x190
   1cff4:	sdiv	r2, r0, ip
   1cff8:	mls	r2, ip, r2, r0
   1cffc:	clz	r2, r2
   1d000:	lsr	r2, r2, #5
   1d004:	add	r2, r2, #364	; 0x16c
   1d008:	add	r2, r2, #1
   1d00c:	add	r2, r2, r7
   1d010:	ldr	r0, [sp, #80]	; 0x50
   1d014:	sub	r0, r2, r0
   1d018:	add	r0, r0, #380	; 0x17c
   1d01c:	add	r0, r0, #2
   1d020:	ldr	ip, [sp, #52]	; 0x34
   1d024:	smull	ip, lr, ip, r0
   1d028:	add	lr, lr, r0
   1d02c:	asr	ip, r0, #31
   1d030:	rsb	ip, ip, lr, asr #2
   1d034:	rsb	ip, ip, ip, lsl #3
   1d038:	sub	r0, r0, ip
   1d03c:	sub	r0, r2, r0
   1d040:	add	r8, r0, #3
   1d044:	mvn	lr, #0
   1d048:	b	1cf68 <__assert_fail@plt+0xbb98>
   1d04c:	movw	r2, #63636	; 0xf894
   1d050:	movt	r2, #65535	; 0xffff
   1d054:	sub	r2, r2, lr
   1d058:	cmp	r2, r5
   1d05c:	rsbgt	r3, r3, #0
   1d060:	addle	r3, r3, #100	; 0x64
   1d064:	mov	r8, #0
   1d068:	mov	r2, #2
   1d06c:	str	r2, [sp, #80]	; 0x50
   1d070:	b	1c5d0 <__assert_fail@plt+0xb200>
   1d074:	movw	r3, #63636	; 0xf894
   1d078:	movt	r3, #65535	; 0xffff
   1d07c:	sub	r3, r3, lr
   1d080:	cmp	r5, r3
   1d084:	movge	r8, #0
   1d088:	movlt	r8, #1
   1d08c:	add	r3, r5, #1888	; 0x760
   1d090:	add	r3, r3, #12
   1d094:	add	r3, r3, lr
   1d098:	mov	r2, #4
   1d09c:	str	r2, [sp, #80]	; 0x50
   1d0a0:	b	1c5d0 <__assert_fail@plt+0xb200>
   1d0a4:	ldr	r3, [sp, #52]	; 0x34
   1d0a8:	smull	r2, r3, r3, r8
   1d0ac:	add	r2, r3, r8
   1d0b0:	asr	r3, r8, #31
   1d0b4:	rsb	r3, r3, r2, asr #2
   1d0b8:	add	r3, r3, #1
   1d0bc:	mov	r2, #2
   1d0c0:	str	r2, [sp, #80]	; 0x50
   1d0c4:	b	1c670 <__assert_fail@plt+0xb2a0>
   1d0c8:	cmp	sl, #69	; 0x45
   1d0cc:	beq	1c230 <__assert_fail@plt+0xae60>
   1d0d0:	ldr	ip, [sp, #40]	; 0x28
   1d0d4:	ldr	r3, [ip, #24]
   1d0d8:	add	r3, r3, #6
   1d0dc:	ldr	lr, [sp, #52]	; 0x34
   1d0e0:	smull	r0, r2, lr, r3
   1d0e4:	add	r0, r2, r3
   1d0e8:	asr	r2, r3, #31
   1d0ec:	rsb	r2, r2, r0, asr #2
   1d0f0:	rsb	r2, r2, r2, lsl #3
   1d0f4:	sub	r2, r3, r2
   1d0f8:	ldr	r3, [ip, #28]
   1d0fc:	sub	r3, r3, r2
   1d100:	add	r3, r3, #7
   1d104:	smull	r0, r2, lr, r3
   1d108:	add	r2, r2, r3
   1d10c:	asr	r3, r3, #31
   1d110:	rsb	r3, r3, r2, asr #2
   1d114:	mov	r2, #2
   1d118:	str	r2, [sp, #80]	; 0x50
   1d11c:	b	1c670 <__assert_fail@plt+0xb2a0>
   1d120:	cmp	sl, #69	; 0x45
   1d124:	beq	1c230 <__assert_fail@plt+0xae60>
   1d128:	ldr	r3, [sp, #40]	; 0x28
   1d12c:	ldr	r3, [r3, #24]
   1d130:	mov	r2, #1
   1d134:	str	r2, [sp, #80]	; 0x50
   1d138:	b	1c670 <__assert_fail@plt+0xb2a0>
   1d13c:	cmp	sl, #69	; 0x45
   1d140:	beq	1d484 <__assert_fail@plt+0xc0b4>
   1d144:	cmp	sl, #79	; 0x4f
   1d148:	beq	1c230 <__assert_fail@plt+0xae60>
   1d14c:	ldr	r3, [sp, #40]	; 0x28
   1d150:	ldr	r3, [r3, #20]
   1d154:	movw	r8, #63636	; 0xf894
   1d158:	movt	r8, #65535	; 0xffff
   1d15c:	cmp	r3, r8
   1d160:	movge	r8, #0
   1d164:	movlt	r8, #1
   1d168:	add	r3, r3, #1888	; 0x760
   1d16c:	add	r3, r3, #12
   1d170:	mov	r2, #4
   1d174:	str	r2, [sp, #80]	; 0x50
   1d178:	b	1c5d0 <__assert_fail@plt+0xb200>
   1d17c:	cmp	sl, #69	; 0x45
   1d180:	beq	1d48c <__assert_fail@plt+0xc0bc>
   1d184:	ldr	r3, [sp, #40]	; 0x28
   1d188:	ldr	r2, [r3, #20]
   1d18c:	ldr	r3, [sp, #56]	; 0x38
   1d190:	smull	r3, r0, r3, r2
   1d194:	asr	r3, r2, #31
   1d198:	rsb	r3, r3, r0, asr #5
   1d19c:	mov	r0, #100	; 0x64
   1d1a0:	mls	r3, r0, r3, r2
   1d1a4:	cmp	r3, #0
   1d1a8:	blt	1d1bc <__assert_fail@plt+0xbdec>
   1d1ac:	mov	r8, #0
   1d1b0:	mov	r2, #2
   1d1b4:	str	r2, [sp, #80]	; 0x50
   1d1b8:	b	1c5d0 <__assert_fail@plt+0xb200>
   1d1bc:	movw	r0, #63636	; 0xf894
   1d1c0:	movt	r0, #65535	; 0xffff
   1d1c4:	cmp	r2, r0
   1d1c8:	rsblt	r3, r3, #0
   1d1cc:	addge	r3, r3, #100	; 0x64
   1d1d0:	b	1d1ac <__assert_fail@plt+0xbddc>
   1d1d4:	cmp	r5, #0
   1d1d8:	ldr	r3, [sp, #76]	; 0x4c
   1d1dc:	movne	r3, #0
   1d1e0:	str	r3, [sp, #76]	; 0x4c
   1d1e4:	ldr	r0, [sp, #48]	; 0x30
   1d1e8:	bl	11274 <strlen@plt>
   1d1ec:	mov	r8, r0
   1d1f0:	ldr	r3, [sp, #28]
   1d1f4:	subs	r3, r3, #45	; 0x2d
   1d1f8:	movne	r3, #1
   1d1fc:	cmp	r9, #0
   1d200:	movlt	r3, #0
   1d204:	cmp	r3, #0
   1d208:	moveq	r9, #0
   1d20c:	mov	r7, r9
   1d210:	cmp	r9, r0
   1d214:	movcc	r9, r0
   1d218:	ldr	r3, [sp, #24]
   1d21c:	sub	r3, r3, fp
   1d220:	cmp	r3, r9
   1d224:	bls	1d290 <__assert_fail@plt+0xbec0>
   1d228:	cmp	r6, #0
   1d22c:	beq	1d288 <__assert_fail@plt+0xbeb8>
   1d230:	cmp	r7, r0
   1d234:	bls	1d260 <__assert_fail@plt+0xbe90>
   1d238:	sub	r7, r7, r0
   1d23c:	ldr	r3, [sp, #28]
   1d240:	cmp	r3, #43	; 0x2b
   1d244:	cmpne	r3, #48	; 0x30
   1d248:	mov	r2, r7
   1d24c:	moveq	r1, #48	; 0x30
   1d250:	movne	r1, #32
   1d254:	mov	r0, r6
   1d258:	bl	112c8 <memset@plt>
   1d25c:	add	r6, r6, r7
   1d260:	cmp	r5, #0
   1d264:	bne	1d2a0 <__assert_fail@plt+0xbed0>
   1d268:	ldr	r3, [sp, #76]	; 0x4c
   1d26c:	cmp	r3, #0
   1d270:	beq	1d2b4 <__assert_fail@plt+0xbee4>
   1d274:	mov	r2, r8
   1d278:	ldr	r1, [sp, #48]	; 0x30
   1d27c:	mov	r0, r6
   1d280:	bl	1bc54 <__assert_fail@plt+0xa884>
   1d284:	add	r6, r6, r8
   1d288:	add	fp, fp, r9
   1d28c:	b	1bda0 <__assert_fail@plt+0xa9d0>
   1d290:	mov	r3, #34	; 0x22
   1d294:	ldr	r2, [sp, #32]
   1d298:	str	r3, [r2]
   1d29c:	b	1bde8 <__assert_fail@plt+0xaa18>
   1d2a0:	mov	r2, r8
   1d2a4:	ldr	r1, [sp, #48]	; 0x30
   1d2a8:	mov	r0, r6
   1d2ac:	bl	1bbfc <__assert_fail@plt+0xa82c>
   1d2b0:	b	1d284 <__assert_fail@plt+0xbeb4>
   1d2b4:	mov	r2, r8
   1d2b8:	ldr	r1, [sp, #48]	; 0x30
   1d2bc:	mov	r0, r6
   1d2c0:	bl	110f4 <memcpy@plt>
   1d2c4:	b	1d284 <__assert_fail@plt+0xbeb4>
   1d2c8:	add	r0, r4, #2
   1d2cc:	mov	lr, #1
   1d2d0:	add	lr, lr, #1
   1d2d4:	mov	r2, r0
   1d2d8:	ldrb	r3, [r0], #1
   1d2dc:	cmp	r3, #58	; 0x3a
   1d2e0:	bne	1c210 <__assert_fail@plt+0xae40>
   1d2e4:	b	1d2d0 <__assert_fail@plt+0xbf00>
   1d2e8:	mov	lr, #0
   1d2ec:	ldr	r2, [sp, #40]	; 0x28
   1d2f0:	ldr	r3, [r2, #32]
   1d2f4:	cmp	r3, #0
   1d2f8:	blt	1bda0 <__assert_fail@plt+0xa9d0>
   1d2fc:	ldr	r2, [r2, #36]	; 0x24
   1d300:	cmp	r2, #0
   1d304:	movlt	r8, #1
   1d308:	blt	1d328 <__assert_fail@plt+0xbf58>
   1d30c:	movne	r8, #0
   1d310:	bne	1d328 <__assert_fail@plt+0xbf58>
   1d314:	ldr	r3, [sp, #48]	; 0x30
   1d318:	ldrb	r8, [r3]
   1d31c:	cmp	r8, #45	; 0x2d
   1d320:	movne	r8, #0
   1d324:	moveq	r8, #1
   1d328:	ldr	r3, [sp, #68]	; 0x44
   1d32c:	smull	r0, r3, r3, r2
   1d330:	add	r3, r3, r2
   1d334:	asr	r0, r2, #31
   1d338:	str	r0, [sp, #80]	; 0x50
   1d33c:	rsb	r5, r0, r3, asr #11
   1d340:	ldr	ip, [sp, #72]	; 0x48
   1d344:	smull	r0, r3, ip, r2
   1d348:	add	r3, r3, r2
   1d34c:	ldr	r0, [sp, #80]	; 0x50
   1d350:	rsb	r3, r0, r3, asr #5
   1d354:	smull	ip, r0, ip, r3
   1d358:	add	r0, r0, r3
   1d35c:	asr	ip, r3, #31
   1d360:	rsb	r0, ip, r0, asr #5
   1d364:	rsb	r0, r0, r0, lsl #4
   1d368:	sub	r0, r3, r0, lsl #2
   1d36c:	rsb	r3, r3, r3, lsl #4
   1d370:	sub	r3, r2, r3, lsl #2
   1d374:	cmp	lr, #3
   1d378:	ldrls	pc, [pc, lr, lsl #2]
   1d37c:	b	1c230 <__assert_fail@plt+0xae60>
   1d380:	muleq	r1, r0, r3
   1d384:			; <UNDEFINED> instruction: 0x0001d3b0
   1d388:	ldrdeq	sp, [r1], -r0
   1d38c:	strdeq	sp, [r1], -ip
   1d390:	mov	r3, #100	; 0x64
   1d394:	mla	r3, r3, r5, r0
   1d398:	mov	r0, #0
   1d39c:	mov	r2, #1
   1d3a0:	str	r2, [sp, #84]	; 0x54
   1d3a4:	mov	r2, #5
   1d3a8:	str	r2, [sp, #80]	; 0x50
   1d3ac:	b	1c67c <__assert_fail@plt+0xb2ac>
   1d3b0:	mov	r3, #100	; 0x64
   1d3b4:	mla	r3, r3, r5, r0
   1d3b8:	mov	r0, #4
   1d3bc:	mov	r2, #1
   1d3c0:	str	r2, [sp, #84]	; 0x54
   1d3c4:	mov	r2, #6
   1d3c8:	str	r2, [sp, #80]	; 0x50
   1d3cc:	b	1c67c <__assert_fail@plt+0xb2ac>
   1d3d0:	mov	r2, #100	; 0x64
   1d3d4:	mul	r0, r2, r0
   1d3d8:	movw	r2, #10000	; 0x2710
   1d3dc:	mla	r5, r2, r5, r0
   1d3e0:	add	r3, r5, r3
   1d3e4:	mov	r0, #20
   1d3e8:	mov	r2, #1
   1d3ec:	str	r2, [sp, #84]	; 0x54
   1d3f0:	mov	r2, #9
   1d3f4:	str	r2, [sp, #80]	; 0x50
   1d3f8:	b	1c67c <__assert_fail@plt+0xb2ac>
   1d3fc:	cmp	r3, #0
   1d400:	bne	1d3d0 <__assert_fail@plt+0xc000>
   1d404:	cmp	r0, #0
   1d408:	bne	1d3b0 <__assert_fail@plt+0xbfe0>
   1d40c:	mov	r3, r5
   1d410:	mov	r2, #1
   1d414:	str	r2, [sp, #84]	; 0x54
   1d418:	mov	r2, #3
   1d41c:	str	r2, [sp, #80]	; 0x50
   1d420:	b	1c67c <__assert_fail@plt+0xb2ac>
   1d424:	mov	r3, #34	; 0x22
   1d428:	ldr	r2, [sp, #32]
   1d42c:	str	r3, [r2]
   1d430:	b	1bde8 <__assert_fail@plt+0xaa18>
   1d434:	mov	r2, r5
   1d438:	mov	r1, r7
   1d43c:	mov	r0, r6
   1d440:	bl	110f4 <memcpy@plt>
   1d444:	b	1c2c4 <__assert_fail@plt+0xaef4>
   1d448:	str	r6, [sp, #28]
   1d44c:	ldr	r2, [sp, #28]
   1d450:	ldr	r3, [sp, #24]
   1d454:	cmp	r2, #0
   1d458:	cmpne	r3, #0
   1d45c:	movne	r3, #0
   1d460:	strbne	r3, [r2]
   1d464:	ldr	r3, [sp, #32]
   1d468:	ldr	r2, [sp, #44]	; 0x2c
   1d46c:	str	r2, [r3]
   1d470:	b	1bdec <__assert_fail@plt+0xaa1c>
   1d474:	mov	fp, #0
   1d478:	b	1d44c <__assert_fail@plt+0xc07c>
   1d47c:	mov	r1, #67	; 0x43
   1d480:	b	1c694 <__assert_fail@plt+0xb2c4>
   1d484:	mov	r1, #89	; 0x59
   1d488:	b	1c694 <__assert_fail@plt+0xb2c4>
   1d48c:	mov	r1, #121	; 0x79
   1d490:	b	1c694 <__assert_fail@plt+0xb2c4>
   1d494:	add	r7, sp, #102	; 0x66
   1d498:	sub	r7, r7, r5
   1d49c:	sub	sl, r9, #1
   1d4a0:	sub	sl, sl, r7
   1d4a4:	ldr	r3, [sp, #28]
   1d4a8:	subs	r8, r3, #45	; 0x2d
   1d4ac:	movne	r8, #1
   1d4b0:	cmp	sl, #0
   1d4b4:	movle	r3, #0
   1d4b8:	andgt	r3, r8, #1
   1d4bc:	cmp	r3, #0
   1d4c0:	bne	1d650 <__assert_fail@plt+0xc280>
   1d4c4:	mov	sl, #0
   1d4c8:	mov	r3, #45	; 0x2d
   1d4cc:	str	r3, [sp, #80]	; 0x50
   1d4d0:	ldr	r3, [sp, #28]
   1d4d4:	cmp	r3, #95	; 0x5f
   1d4d8:	beq	1c874 <__assert_fail@plt+0xb4a4>
   1d4dc:	ldr	r3, [sp, #24]
   1d4e0:	sub	r3, r3, fp
   1d4e4:	cmp	r3, #1
   1d4e8:	bls	1c89c <__assert_fail@plt+0xb4cc>
   1d4ec:	cmp	r6, #0
   1d4f0:	ldrne	r3, [sp, #80]	; 0x50
   1d4f4:	strbne	r3, [r6], #1
   1d4f8:	add	fp, fp, #1
   1d4fc:	sub	r9, r9, #1
   1d500:	cmp	r9, #0
   1d504:	movlt	r8, #0
   1d508:	andge	r8, r8, #1
   1d50c:	cmp	r8, #0
   1d510:	moveq	r9, #0
   1d514:	mov	r8, r9
   1d518:	cmp	r9, r7
   1d51c:	movcc	r9, r7
   1d520:	ldr	r3, [sp, #24]
   1d524:	sub	r3, r3, fp
   1d528:	cmp	r3, r9
   1d52c:	bls	1c8ac <__assert_fail@plt+0xb4dc>
   1d530:	cmp	r6, #0
   1d534:	beq	1d588 <__assert_fail@plt+0xc1b8>
   1d538:	cmp	r8, r7
   1d53c:	bls	1d568 <__assert_fail@plt+0xc198>
   1d540:	sub	r8, r8, r7
   1d544:	ldr	r3, [sp, #28]
   1d548:	cmp	r3, #43	; 0x2b
   1d54c:	cmpne	r3, #48	; 0x30
   1d550:	mov	r2, r8
   1d554:	moveq	r1, #48	; 0x30
   1d558:	movne	r1, #32
   1d55c:	mov	r0, r6
   1d560:	bl	112c8 <memset@plt>
   1d564:	add	r6, r6, r8
   1d568:	ldr	r3, [sp, #76]	; 0x4c
   1d56c:	cmp	r3, #0
   1d570:	beq	1c8bc <__assert_fail@plt+0xb4ec>
   1d574:	mov	r2, r7
   1d578:	mov	r1, r5
   1d57c:	mov	r0, r6
   1d580:	bl	1bc54 <__assert_fail@plt+0xa884>
   1d584:	add	r6, r6, r7
   1d588:	add	fp, fp, r9
   1d58c:	b	1bda0 <__assert_fail@plt+0xa9d0>
   1d590:	add	r7, sp, #102	; 0x66
   1d594:	sub	r7, r7, r5
   1d598:	sub	sl, r9, #1
   1d59c:	sub	sl, sl, r7
   1d5a0:	ldr	r3, [sp, #28]
   1d5a4:	subs	r3, r3, #45	; 0x2d
   1d5a8:	movne	r3, #1
   1d5ac:	cmp	sl, #0
   1d5b0:	movle	r8, #0
   1d5b4:	andgt	r8, r3, #1
   1d5b8:	cmp	r8, #0
   1d5bc:	movne	r3, #43	; 0x2b
   1d5c0:	strne	r3, [sp, #80]	; 0x50
   1d5c4:	bne	1d4d0 <__assert_fail@plt+0xc100>
   1d5c8:	mov	r2, #43	; 0x2b
   1d5cc:	str	r2, [sp, #80]	; 0x50
   1d5d0:	mov	sl, #0
   1d5d4:	b	1d658 <__assert_fail@plt+0xc288>
   1d5d8:	movw	r8, #952	; 0x3b8
   1d5dc:	movt	r8, #2
   1d5e0:	ldr	r3, [sp, #1188]	; 0x4a4
   1d5e4:	str	r3, [sp, #20]
   1d5e8:	ldr	r3, [sp, #1184]	; 0x4a0
   1d5ec:	str	r3, [sp, #16]
   1d5f0:	ldr	r3, [sp, #1180]	; 0x49c
   1d5f4:	str	r3, [sp, #12]
   1d5f8:	mov	r7, #4
   1d5fc:	str	r7, [sp, #8]
   1d600:	mov	r3, #43	; 0x2b
   1d604:	str	r3, [sp, #4]
   1d608:	ldr	r3, [sp, #76]	; 0x4c
   1d60c:	str	r3, [sp]
   1d610:	ldr	r3, [sp, #40]	; 0x28
   1d614:	mov	r2, r8
   1d618:	mvn	r1, #0
   1d61c:	mov	r0, #0
   1d620:	bl	1bcac <__assert_fail@plt+0xa8dc>
   1d624:	mov	r5, r0
   1d628:	mov	r9, sl
   1d62c:	mov	sl, r8
   1d630:	mov	r3, #43	; 0x2b
   1d634:	str	r3, [sp, #28]
   1d638:	b	1c478 <__assert_fail@plt+0xb0a8>
   1d63c:	ldr	r3, [sp, #24]
   1d640:	cmp	r3, fp
   1d644:	beq	1cb5c <__assert_fail@plt+0xb78c>
   1d648:	mov	r5, #0
   1d64c:	b	1cb30 <__assert_fail@plt+0xb760>
   1d650:	mov	r2, #45	; 0x2d
   1d654:	str	r2, [sp, #80]	; 0x50
   1d658:	mov	r8, r3
   1d65c:	b	1d4d0 <__assert_fail@plt+0xc100>
   1d660:	push	{lr}		; (str lr, [sp, #-4]!)
   1d664:	sub	sp, sp, #36	; 0x24
   1d668:	mov	ip, #0
   1d66c:	strb	ip, [sp, #31]
   1d670:	ldr	lr, [sp, #44]	; 0x2c
   1d674:	str	lr, [sp, #20]
   1d678:	ldr	lr, [sp, #40]	; 0x28
   1d67c:	str	lr, [sp, #16]
   1d680:	add	lr, sp, #31
   1d684:	str	lr, [sp, #12]
   1d688:	mvn	lr, #0
   1d68c:	str	lr, [sp, #8]
   1d690:	str	ip, [sp, #4]
   1d694:	str	ip, [sp]
   1d698:	bl	1bcac <__assert_fail@plt+0xa8dc>
   1d69c:	add	sp, sp, #36	; 0x24
   1d6a0:	pop	{pc}		; (ldr pc, [sp], #4)
   1d6a4:	str	r4, [sp, #-8]!
   1d6a8:	str	lr, [sp, #4]
   1d6ac:	umull	r2, r3, r1, r2
   1d6b0:	cmp	r3, #0
   1d6b4:	bne	1d6cc <__assert_fail@plt+0xc2fc>
   1d6b8:	mov	r1, r2
   1d6bc:	bl	1b814 <__assert_fail@plt+0xa444>
   1d6c0:	ldr	r4, [sp]
   1d6c4:	add	sp, sp, #4
   1d6c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d6cc:	bl	11298 <__errno_location@plt>
   1d6d0:	mov	r3, #12
   1d6d4:	str	r3, [r0]
   1d6d8:	mov	r0, #0
   1d6dc:	b	1d6c0 <__assert_fail@plt+0xc2f0>
   1d6e0:	push	{lr}		; (str lr, [sp, #-4]!)
   1d6e4:	sub	sp, sp, #268	; 0x10c
   1d6e8:	movw	r2, #257	; 0x101
   1d6ec:	add	r1, sp, #4
   1d6f0:	bl	1d73c <__assert_fail@plt+0xc36c>
   1d6f4:	cmp	r0, #0
   1d6f8:	movne	r0, #0
   1d6fc:	bne	1d734 <__assert_fail@plt+0xc364>
   1d700:	movw	r1, #64616	; 0xfc68
   1d704:	movt	r1, #1
   1d708:	add	r0, sp, #4
   1d70c:	bl	110a0 <strcmp@plt>
   1d710:	cmp	r0, #0
   1d714:	beq	1d730 <__assert_fail@plt+0xc360>
   1d718:	movw	r1, #984	; 0x3d8
   1d71c:	movt	r1, #2
   1d720:	add	r0, sp, #4
   1d724:	bl	110a0 <strcmp@plt>
   1d728:	adds	r0, r0, #0
   1d72c:	movne	r0, #1
   1d730:	and	r0, r0, #1
   1d734:	add	sp, sp, #268	; 0x10c
   1d738:	pop	{pc}		; (ldr pc, [sp], #4)
   1d73c:	strd	r4, [sp, #-16]!
   1d740:	str	r6, [sp, #8]
   1d744:	str	lr, [sp, #12]
   1d748:	mov	r6, r1
   1d74c:	mov	r4, r2
   1d750:	mov	r1, #0
   1d754:	bl	1131c <setlocale@plt>
   1d758:	subs	r5, r0, #0
   1d75c:	beq	1d7a0 <__assert_fail@plt+0xc3d0>
   1d760:	mov	r0, r5
   1d764:	bl	11274 <strlen@plt>
   1d768:	cmp	r4, r0
   1d76c:	bhi	1d7bc <__assert_fail@plt+0xc3ec>
   1d770:	cmp	r4, #0
   1d774:	moveq	r0, #34	; 0x22
   1d778:	beq	1d7d0 <__assert_fail@plt+0xc400>
   1d77c:	sub	r4, r4, #1
   1d780:	mov	r2, r4
   1d784:	mov	r1, r5
   1d788:	mov	r0, r6
   1d78c:	bl	110f4 <memcpy@plt>
   1d790:	mov	r3, #0
   1d794:	strb	r3, [r6, r4]
   1d798:	mov	r0, #34	; 0x22
   1d79c:	b	1d7d0 <__assert_fail@plt+0xc400>
   1d7a0:	cmp	r4, #0
   1d7a4:	moveq	r0, #22
   1d7a8:	beq	1d7d0 <__assert_fail@plt+0xc400>
   1d7ac:	mov	r3, #0
   1d7b0:	strb	r3, [r6]
   1d7b4:	mov	r0, #22
   1d7b8:	b	1d7d0 <__assert_fail@plt+0xc400>
   1d7bc:	add	r2, r0, #1
   1d7c0:	mov	r1, r5
   1d7c4:	mov	r0, r6
   1d7c8:	bl	110f4 <memcpy@plt>
   1d7cc:	mov	r0, #0
   1d7d0:	ldrd	r4, [sp]
   1d7d4:	ldr	r6, [sp, #8]
   1d7d8:	add	sp, sp, #12
   1d7dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1d7e0:	str	r4, [sp, #-8]!
   1d7e4:	str	lr, [sp, #4]
   1d7e8:	mov	r1, #0
   1d7ec:	bl	1131c <setlocale@plt>
   1d7f0:	ldr	r4, [sp]
   1d7f4:	add	sp, sp, #4
   1d7f8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d7fc:	cmp	r3, #0
   1d800:	cmpeq	r2, #0
   1d804:	bne	1d828 <__assert_fail@plt+0xc458>
   1d808:	cmp	r1, #0
   1d80c:	movlt	r1, #-2147483648	; 0x80000000
   1d810:	movlt	r0, #0
   1d814:	blt	1d824 <__assert_fail@plt+0xc454>
   1d818:	cmpeq	r0, #0
   1d81c:	mvnne	r1, #-2147483648	; 0x80000000
   1d820:	mvnne	r0, #0
   1d824:	b	1d8d0 <__assert_fail@plt+0xc500>
   1d828:	sub	sp, sp, #8
   1d82c:	push	{sp, lr}
   1d830:	cmp	r1, #0
   1d834:	blt	1d854 <__assert_fail@plt+0xc484>
   1d838:	cmp	r3, #0
   1d83c:	blt	1d888 <__assert_fail@plt+0xc4b8>
   1d840:	bl	1d8e0 <__assert_fail@plt+0xc510>
   1d844:	ldr	lr, [sp, #4]
   1d848:	add	sp, sp, #8
   1d84c:	pop	{r2, r3}
   1d850:	bx	lr
   1d854:	rsbs	r0, r0, #0
   1d858:	sbc	r1, r1, r1, lsl #1
   1d85c:	cmp	r3, #0
   1d860:	blt	1d8ac <__assert_fail@plt+0xc4dc>
   1d864:	bl	1d8e0 <__assert_fail@plt+0xc510>
   1d868:	ldr	lr, [sp, #4]
   1d86c:	add	sp, sp, #8
   1d870:	pop	{r2, r3}
   1d874:	rsbs	r0, r0, #0
   1d878:	sbc	r1, r1, r1, lsl #1
   1d87c:	rsbs	r2, r2, #0
   1d880:	sbc	r3, r3, r3, lsl #1
   1d884:	bx	lr
   1d888:	rsbs	r2, r2, #0
   1d88c:	sbc	r3, r3, r3, lsl #1
   1d890:	bl	1d8e0 <__assert_fail@plt+0xc510>
   1d894:	ldr	lr, [sp, #4]
   1d898:	add	sp, sp, #8
   1d89c:	pop	{r2, r3}
   1d8a0:	rsbs	r0, r0, #0
   1d8a4:	sbc	r1, r1, r1, lsl #1
   1d8a8:	bx	lr
   1d8ac:	rsbs	r2, r2, #0
   1d8b0:	sbc	r3, r3, r3, lsl #1
   1d8b4:	bl	1d8e0 <__assert_fail@plt+0xc510>
   1d8b8:	ldr	lr, [sp, #4]
   1d8bc:	add	sp, sp, #8
   1d8c0:	pop	{r2, r3}
   1d8c4:	rsbs	r2, r2, #0
   1d8c8:	sbc	r3, r3, r3, lsl #1
   1d8cc:	bx	lr
   1d8d0:	push	{r1, lr}
   1d8d4:	mov	r0, #8
   1d8d8:	bl	1107c <raise@plt>
   1d8dc:	pop	{r1, pc}
   1d8e0:	cmp	r1, r3
   1d8e4:	cmpeq	r0, r2
   1d8e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d8ec:	mov	r4, r0
   1d8f0:	movcc	r0, #0
   1d8f4:	mov	r5, r1
   1d8f8:	ldr	lr, [sp, #36]	; 0x24
   1d8fc:	movcc	r1, r0
   1d900:	bcc	1d9fc <__assert_fail@plt+0xc62c>
   1d904:	cmp	r3, #0
   1d908:	clzeq	ip, r2
   1d90c:	clzne	ip, r3
   1d910:	addeq	ip, ip, #32
   1d914:	cmp	r5, #0
   1d918:	clzeq	r1, r4
   1d91c:	addeq	r1, r1, #32
   1d920:	clzne	r1, r5
   1d924:	sub	ip, ip, r1
   1d928:	sub	sl, ip, #32
   1d92c:	lsl	r9, r3, ip
   1d930:	rsb	fp, ip, #32
   1d934:	orr	r9, r9, r2, lsl sl
   1d938:	orr	r9, r9, r2, lsr fp
   1d93c:	lsl	r8, r2, ip
   1d940:	cmp	r5, r9
   1d944:	cmpeq	r4, r8
   1d948:	movcc	r0, #0
   1d94c:	movcc	r1, r0
   1d950:	bcc	1d96c <__assert_fail@plt+0xc59c>
   1d954:	mov	r0, #1
   1d958:	subs	r4, r4, r8
   1d95c:	lsl	r1, r0, sl
   1d960:	orr	r1, r1, r0, lsr fp
   1d964:	lsl	r0, r0, ip
   1d968:	sbc	r5, r5, r9
   1d96c:	cmp	ip, #0
   1d970:	beq	1d9fc <__assert_fail@plt+0xc62c>
   1d974:	lsr	r6, r8, #1
   1d978:	orr	r6, r6, r9, lsl #31
   1d97c:	lsr	r7, r9, #1
   1d980:	mov	r2, ip
   1d984:	b	1d9a8 <__assert_fail@plt+0xc5d8>
   1d988:	subs	r3, r4, r6
   1d98c:	sbc	r8, r5, r7
   1d990:	adds	r3, r3, r3
   1d994:	adc	r8, r8, r8
   1d998:	adds	r4, r3, #1
   1d99c:	adc	r5, r8, #0
   1d9a0:	subs	r2, r2, #1
   1d9a4:	beq	1d9c4 <__assert_fail@plt+0xc5f4>
   1d9a8:	cmp	r5, r7
   1d9ac:	cmpeq	r4, r6
   1d9b0:	bcs	1d988 <__assert_fail@plt+0xc5b8>
   1d9b4:	adds	r4, r4, r4
   1d9b8:	adc	r5, r5, r5
   1d9bc:	subs	r2, r2, #1
   1d9c0:	bne	1d9a8 <__assert_fail@plt+0xc5d8>
   1d9c4:	lsr	r3, r4, ip
   1d9c8:	orr	r3, r3, r5, lsl fp
   1d9cc:	lsr	r2, r5, ip
   1d9d0:	orr	r3, r3, r5, lsr sl
   1d9d4:	adds	r0, r0, r4
   1d9d8:	mov	r4, r3
   1d9dc:	lsl	r3, r2, ip
   1d9e0:	orr	r3, r3, r4, lsl sl
   1d9e4:	lsl	ip, r4, ip
   1d9e8:	orr	r3, r3, r4, lsr fp
   1d9ec:	adc	r1, r1, r5
   1d9f0:	subs	r0, r0, ip
   1d9f4:	mov	r5, r2
   1d9f8:	sbc	r1, r1, r3
   1d9fc:	cmp	lr, #0
   1da00:	strdne	r4, [lr]
   1da04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1da08:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1da0c:	mov	r7, r0
   1da10:	ldr	r6, [pc, #72]	; 1da60 <__assert_fail@plt+0xc690>
   1da14:	ldr	r5, [pc, #72]	; 1da64 <__assert_fail@plt+0xc694>
   1da18:	add	r6, pc, r6
   1da1c:	add	r5, pc, r5
   1da20:	sub	r6, r6, r5
   1da24:	mov	r8, r1
   1da28:	mov	r9, r2
   1da2c:	bl	11044 <calloc@plt-0x20>
   1da30:	asrs	r6, r6, #2
   1da34:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1da38:	mov	r4, #0
   1da3c:	add	r4, r4, #1
   1da40:	ldr	r3, [r5], #4
   1da44:	mov	r2, r9
   1da48:	mov	r1, r8
   1da4c:	mov	r0, r7
   1da50:	blx	r3
   1da54:	cmp	r6, r4
   1da58:	bne	1da3c <__assert_fail@plt+0xc66c>
   1da5c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1da60:	strdeq	r3, [r1], -r4
   1da64:	andeq	r3, r1, ip, ror #9
   1da68:	bx	lr
   1da6c:	ldr	r3, [pc, #12]	; 1da80 <__assert_fail@plt+0xc6b0>
   1da70:	mov	r1, #0
   1da74:	add	r3, pc, r3
   1da78:	ldr	r2, [r3]
   1da7c:	b	112bc <__cxa_atexit@plt>
   1da80:	andeq	r3, r1, r0, asr #13

Disassembly of section .fini:

0001da84 <.fini>:
   1da84:	push	{r3, lr}
   1da88:	pop	{r3, pc}
