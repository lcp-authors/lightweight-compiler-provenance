
../repos/coreutils/src/mktemp:     file format elf32-littlearm


Disassembly of section .init:

00010e48 <.init>:
   10e48:	push	{r3, lr}
   10e4c:	bl	1112c <__mempcpy_chk@plt+0x48>
   10e50:	pop	{r3, pc}

Disassembly of section .plt:

00010e54 <calloc@plt-0x14>:
   10e54:	push	{lr}		; (str lr, [sp, #-4]!)
   10e58:	ldr	lr, [pc, #4]	; 10e64 <calloc@plt-0x4>
   10e5c:	add	lr, pc, lr
   10e60:	ldr	pc, [lr, #8]!
   10e64:	muleq	r1, ip, r1

00010e68 <calloc@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #90112	; 0x16000
   10e70:	ldr	pc, [ip, #412]!	; 0x19c

00010e74 <fputs_unlocked@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #90112	; 0x16000
   10e7c:	ldr	pc, [ip, #404]!	; 0x194

00010e80 <raise@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #90112	; 0x16000
   10e88:	ldr	pc, [ip, #396]!	; 0x18c

00010e8c <strcmp@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #90112	; 0x16000
   10e94:	ldr	pc, [ip, #388]!	; 0x184

00010e98 <fflush@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #90112	; 0x16000
   10ea0:	ldr	pc, [ip, #380]!	; 0x17c

00010ea4 <free@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #90112	; 0x16000
   10eac:	ldr	pc, [ip, #372]!	; 0x174

00010eb0 <clock_gettime@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #90112	; 0x16000
   10eb8:	ldr	pc, [ip, #364]!	; 0x16c

00010ebc <_exit@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #90112	; 0x16000
   10ec4:	ldr	pc, [ip, #356]!	; 0x164

00010ec8 <memcpy@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #90112	; 0x16000
   10ed0:	ldr	pc, [ip, #348]!	; 0x15c

00010ed4 <mbsinit@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #340]!	; 0x154

00010ee0 <memcmp@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #332]!	; 0x14c

00010eec <dcgettext@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #324]!	; 0x144

00010ef8 <realloc@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #316]!	; 0x13c

00010f04 <textdomain@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #308]!	; 0x134

00010f10 <iswprint@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #90112	; 0x16000
   10f18:	ldr	pc, [ip, #300]!	; 0x12c

00010f1c <fwrite@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #90112	; 0x16000
   10f24:	ldr	pc, [ip, #292]!	; 0x124

00010f28 <lseek64@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #90112	; 0x16000
   10f30:	ldr	pc, [ip, #284]!	; 0x11c

00010f34 <__ctype_get_mb_cur_max@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #90112	; 0x16000
   10f3c:	ldr	pc, [ip, #276]!	; 0x114

00010f40 <__fpending@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #90112	; 0x16000
   10f48:	ldr	pc, [ip, #268]!	; 0x10c

00010f4c <ferror_unlocked@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #90112	; 0x16000
   10f54:	ldr	pc, [ip, #260]!	; 0x104

00010f58 <mbrtowc@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #90112	; 0x16000
   10f60:	ldr	pc, [ip, #252]!	; 0xfc

00010f64 <error@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #90112	; 0x16000
   10f6c:	ldr	pc, [ip, #244]!	; 0xf4

00010f70 <open64@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #90112	; 0x16000
   10f78:	ldr	pc, [ip, #236]!	; 0xec

00010f7c <getenv@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #90112	; 0x16000
   10f84:	ldr	pc, [ip, #228]!	; 0xe4

00010f88 <puts@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #90112	; 0x16000
   10f90:	ldr	pc, [ip, #220]!	; 0xdc

00010f94 <malloc@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #90112	; 0x16000
   10f9c:	ldr	pc, [ip, #212]!	; 0xd4

00010fa0 <__libc_start_main@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #90112	; 0x16000
   10fa8:	ldr	pc, [ip, #204]!	; 0xcc

00010fac <__freading@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #90112	; 0x16000
   10fb4:	ldr	pc, [ip, #196]!	; 0xc4

00010fb8 <__gmon_start__@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #90112	; 0x16000
   10fc0:	ldr	pc, [ip, #188]!	; 0xbc

00010fc4 <getopt_long@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #90112	; 0x16000
   10fcc:	ldr	pc, [ip, #180]!	; 0xb4

00010fd0 <__ctype_b_loc@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #90112	; 0x16000
   10fd8:	ldr	pc, [ip, #172]!	; 0xac

00010fdc <exit@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #90112	; 0x16000
   10fe4:	ldr	pc, [ip, #164]!	; 0xa4

00010fe8 <strlen@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #90112	; 0x16000
   10ff0:	ldr	pc, [ip, #156]!	; 0x9c

00010ff4 <__errno_location@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #90112	; 0x16000
   10ffc:	ldr	pc, [ip, #148]!	; 0x94

00011000 <__cxa_atexit@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #90112	; 0x16000
   11008:	ldr	pc, [ip, #140]!	; 0x8c

0001100c <mkdir@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #90112	; 0x16000
   11014:	ldr	pc, [ip, #132]!	; 0x84

00011018 <memset@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #90112	; 0x16000
   11020:	ldr	pc, [ip, #124]!	; 0x7c

00011024 <__printf_chk@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #90112	; 0x16000
   1102c:	ldr	pc, [ip, #116]!	; 0x74

00011030 <fileno@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #90112	; 0x16000
   11038:	ldr	pc, [ip, #108]!	; 0x6c

0001103c <__fprintf_chk@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #90112	; 0x16000
   11044:	ldr	pc, [ip, #100]!	; 0x64

00011048 <fclose@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #90112	; 0x16000
   11050:	ldr	pc, [ip, #92]!	; 0x5c

00011054 <fseeko64@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #90112	; 0x16000
   1105c:	ldr	pc, [ip, #84]!	; 0x54

00011060 <setlocale@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #90112	; 0x16000
   11068:	ldr	pc, [ip, #76]!	; 0x4c

0001106c <strrchr@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #90112	; 0x16000
   11074:	ldr	pc, [ip, #68]!	; 0x44

00011078 <nl_langinfo@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #90112	; 0x16000
   11080:	ldr	pc, [ip, #60]!	; 0x3c

00011084 <remove@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #90112	; 0x16000
   1108c:	ldr	pc, [ip, #52]!	; 0x34

00011090 <bindtextdomain@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #90112	; 0x16000
   11098:	ldr	pc, [ip, #44]!	; 0x2c

0001109c <getrandom@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #90112	; 0x16000
   110a4:	ldr	pc, [ip, #36]!	; 0x24

000110a8 <strncmp@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #90112	; 0x16000
   110b0:	ldr	pc, [ip, #28]!

000110b4 <abort@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #90112	; 0x16000
   110bc:	ldr	pc, [ip, #20]!

000110c0 <close@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #90112	; 0x16000
   110c8:	ldr	pc, [ip, #12]!

000110cc <__lxstat64@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #90112	; 0x16000
   110d4:	ldr	pc, [ip, #4]!

000110d8 <strspn@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #86016	; 0x15000
   110e0:	ldr	pc, [ip, #4092]!	; 0xffc

000110e4 <__mempcpy_chk@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #86016	; 0x15000
   110ec:	ldr	pc, [ip, #4084]!	; 0xff4

Disassembly of section .text:

000110f0 <.text>:
   110f0:	mov	fp, #0
   110f4:	mov	lr, #0
   110f8:	pop	{r1}		; (ldr r1, [sp], #4)
   110fc:	mov	r2, sp
   11100:	push	{r2}		; (str r2, [sp, #-4]!)
   11104:	push	{r0}		; (str r0, [sp, #-4]!)
   11108:	ldr	ip, [pc, #16]	; 11120 <__mempcpy_chk@plt+0x3c>
   1110c:	push	{ip}		; (str ip, [sp, #-4]!)
   11110:	ldr	r0, [pc, #12]	; 11124 <__mempcpy_chk@plt+0x40>
   11114:	ldr	r3, [pc, #12]	; 11128 <__mempcpy_chk@plt+0x44>
   11118:	bl	10fa0 <__libc_start_main@plt>
   1111c:	bl	110b4 <abort@plt>
   11120:	andeq	r5, r1, r8, lsr r1
   11124:	andeq	r1, r1, ip, ror #9
   11128:	ldrdeq	r5, [r1], -r8
   1112c:	ldr	r3, [pc, #20]	; 11148 <__mempcpy_chk@plt+0x64>
   11130:	ldr	r2, [pc, #20]	; 1114c <__mempcpy_chk@plt+0x68>
   11134:	add	r3, pc, r3
   11138:	ldr	r2, [r3, r2]
   1113c:	cmp	r2, #0
   11140:	bxeq	lr
   11144:	b	10fb8 <__gmon_start__@plt>
   11148:	andeq	r5, r1, r4, asr #29
   1114c:	andeq	r0, r0, r4, ror #1
   11150:	ldr	r0, [pc, #24]	; 11170 <__mempcpy_chk@plt+0x8c>
   11154:	ldr	r3, [pc, #24]	; 11174 <__mempcpy_chk@plt+0x90>
   11158:	cmp	r3, r0
   1115c:	bxeq	lr
   11160:	ldr	r3, [pc, #16]	; 11178 <__mempcpy_chk@plt+0x94>
   11164:	cmp	r3, #0
   11168:	bxeq	lr
   1116c:	bx	r3
   11170:	andeq	r7, r2, r8, lsr r1
   11174:	andeq	r7, r2, r8, lsr r1
   11178:	andeq	r0, r0, r0
   1117c:	ldr	r0, [pc, #36]	; 111a8 <__mempcpy_chk@plt+0xc4>
   11180:	ldr	r1, [pc, #36]	; 111ac <__mempcpy_chk@plt+0xc8>
   11184:	sub	r1, r1, r0
   11188:	asr	r1, r1, #2
   1118c:	add	r1, r1, r1, lsr #31
   11190:	asrs	r1, r1, #1
   11194:	bxeq	lr
   11198:	ldr	r3, [pc, #16]	; 111b0 <__mempcpy_chk@plt+0xcc>
   1119c:	cmp	r3, #0
   111a0:	bxeq	lr
   111a4:	bx	r3
   111a8:	andeq	r7, r2, r8, lsr r1
   111ac:	andeq	r7, r2, r8, lsr r1
   111b0:	andeq	r0, r0, r0
   111b4:	push	{r4, lr}
   111b8:	ldr	r4, [pc, #24]	; 111d8 <__mempcpy_chk@plt+0xf4>
   111bc:	ldrb	r3, [r4]
   111c0:	cmp	r3, #0
   111c4:	popne	{r4, pc}
   111c8:	bl	11150 <__mempcpy_chk@plt+0x6c>
   111cc:	mov	r3, #1
   111d0:	strb	r3, [r4]
   111d4:	pop	{r4, pc}
   111d8:	andeq	r7, r2, r4, asr r1
   111dc:	b	1117c <__mempcpy_chk@plt+0x98>
   111e0:	push	{fp, lr}
   111e4:	mov	fp, sp
   111e8:	mov	r4, r0
   111ec:	cmp	r0, #0
   111f0:	bne	11324 <__mempcpy_chk@plt+0x240>
   111f4:	movw	r1, #20891	; 0x519b
   111f8:	movt	r1, #1
   111fc:	mov	r0, #0
   11200:	mov	r2, #5
   11204:	bl	10eec <dcgettext@plt>
   11208:	mov	r1, r0
   1120c:	movw	r0, #29024	; 0x7160
   11210:	movt	r0, #2
   11214:	ldr	r2, [r0]
   11218:	mov	r0, #1
   1121c:	bl	11024 <__printf_chk@plt>
   11220:	movw	r1, #20925	; 0x51bd
   11224:	movt	r1, #1
   11228:	mov	r0, #0
   1122c:	mov	r2, #5
   11230:	bl	10eec <dcgettext@plt>
   11234:	movw	r5, #29004	; 0x714c
   11238:	movt	r5, #2
   1123c:	ldr	r1, [r5]
   11240:	bl	10e74 <fputs_unlocked@plt>
   11244:	movw	r1, #21136	; 0x5290
   11248:	movt	r1, #1
   1124c:	mov	r0, #0
   11250:	mov	r2, #5
   11254:	bl	10eec <dcgettext@plt>
   11258:	ldr	r1, [r5]
   1125c:	bl	10e74 <fputs_unlocked@plt>
   11260:	ldr	r1, [r5]
   11264:	movw	r0, #22994	; 0x59d2
   11268:	movt	r0, #1
   1126c:	bl	10e74 <fputs_unlocked@plt>
   11270:	movw	r1, #21210	; 0x52da
   11274:	movt	r1, #1
   11278:	mov	r0, #0
   1127c:	mov	r2, #5
   11280:	bl	10eec <dcgettext@plt>
   11284:	ldr	r1, [r5]
   11288:	bl	10e74 <fputs_unlocked@plt>
   1128c:	movw	r1, #21414	; 0x53a6
   11290:	movt	r1, #1
   11294:	mov	r0, #0
   11298:	mov	r2, #5
   1129c:	bl	10eec <dcgettext@plt>
   112a0:	ldr	r1, [r5]
   112a4:	bl	10e74 <fputs_unlocked@plt>
   112a8:	movw	r1, #21570	; 0x5442
   112ac:	movt	r1, #1
   112b0:	mov	r0, #0
   112b4:	mov	r2, #5
   112b8:	bl	10eec <dcgettext@plt>
   112bc:	ldr	r1, [r5]
   112c0:	bl	10e74 <fputs_unlocked@plt>
   112c4:	movw	r1, #21933	; 0x55ad
   112c8:	movt	r1, #1
   112cc:	mov	r0, #0
   112d0:	mov	r2, #5
   112d4:	bl	10eec <dcgettext@plt>
   112d8:	ldr	r1, [r5]
   112dc:	bl	10e74 <fputs_unlocked@plt>
   112e0:	movw	r1, #22158	; 0x568e
   112e4:	movt	r1, #1
   112e8:	mov	r0, #0
   112ec:	mov	r2, #5
   112f0:	bl	10eec <dcgettext@plt>
   112f4:	ldr	r1, [r5]
   112f8:	bl	10e74 <fputs_unlocked@plt>
   112fc:	movw	r1, #22203	; 0x56bb
   11300:	movt	r1, #1
   11304:	mov	r0, #0
   11308:	mov	r2, #5
   1130c:	bl	10eec <dcgettext@plt>
   11310:	ldr	r1, [r5]
   11314:	bl	10e74 <fputs_unlocked@plt>
   11318:	bl	11368 <__mempcpy_chk@plt+0x284>
   1131c:	mov	r0, r4
   11320:	bl	10fdc <exit@plt>
   11324:	movw	r0, #29000	; 0x7148
   11328:	movt	r0, #2
   1132c:	ldr	r5, [r0]
   11330:	movw	r1, #20852	; 0x5174
   11334:	movt	r1, #1
   11338:	mov	r0, #0
   1133c:	mov	r2, #5
   11340:	bl	10eec <dcgettext@plt>
   11344:	mov	r2, r0
   11348:	movw	r0, #29024	; 0x7160
   1134c:	movt	r0, #2
   11350:	ldr	r3, [r0]
   11354:	mov	r0, r5
   11358:	mov	r1, #1
   1135c:	bl	1103c <__fprintf_chk@plt>
   11360:	mov	r0, r4
   11364:	bl	10fdc <exit@plt>
   11368:	push	{r4, r5, fp, lr}
   1136c:	add	fp, sp, #8
   11370:	sub	sp, sp, #56	; 0x38
   11374:	movw	r0, #23192	; 0x5a98
   11378:	movt	r0, #1
   1137c:	add	r1, r0, #32
   11380:	mov	r5, sp
   11384:	mov	r2, #48	; 0x30
   11388:	vld1.64	{d16-d17}, [r1]
   1138c:	add	r1, r5, #32
   11390:	add	r3, r0, #16
   11394:	vld1.64	{d18-d19}, [r0], r2
   11398:	vld1.64	{d20-d21}, [r3]
   1139c:	vldr	d22, [r0]
   113a0:	vst1.64	{d16-d17}, [r1]
   113a4:	add	r0, r5, #16
   113a8:	vst1.64	{d20-d21}, [r0]
   113ac:	mov	r0, r5
   113b0:	vst1.64	{d18-d19}, [r0], r2
   113b4:	vstr	d22, [r0]
   113b8:	ldr	r1, [sp]
   113bc:	cmp	r1, #0
   113c0:	beq	113e8 <__mempcpy_chk@plt+0x304>
   113c4:	mov	r5, sp
   113c8:	movw	r4, #22257	; 0x56f1
   113cc:	movt	r4, #1
   113d0:	mov	r0, r4
   113d4:	bl	10e8c <strcmp@plt>
   113d8:	cmp	r0, #0
   113dc:	ldrne	r1, [r5, #8]!
   113e0:	cmpne	r1, #0
   113e4:	bne	113d0 <__mempcpy_chk@plt+0x2ec>
   113e8:	ldr	r4, [r5, #4]
   113ec:	movw	r1, #22780	; 0x58fc
   113f0:	movt	r1, #1
   113f4:	mov	r0, #0
   113f8:	mov	r2, #5
   113fc:	bl	10eec <dcgettext@plt>
   11400:	mov	r1, r0
   11404:	movw	r2, #22296	; 0x5718
   11408:	movt	r2, #1
   1140c:	movw	r3, #22803	; 0x5913
   11410:	movt	r3, #1
   11414:	mov	r0, #1
   11418:	bl	11024 <__printf_chk@plt>
   1141c:	movw	r5, #22257	; 0x56f1
   11420:	movt	r5, #1
   11424:	cmp	r4, #0
   11428:	moveq	r4, r5
   1142c:	mov	r0, #5
   11430:	mov	r1, #0
   11434:	bl	11060 <setlocale@plt>
   11438:	cmp	r0, #0
   1143c:	beq	1147c <__mempcpy_chk@plt+0x398>
   11440:	movw	r1, #22843	; 0x593b
   11444:	movt	r1, #1
   11448:	mov	r2, #3
   1144c:	bl	110a8 <strncmp@plt>
   11450:	cmp	r0, #0
   11454:	beq	1147c <__mempcpy_chk@plt+0x398>
   11458:	movw	r1, #22847	; 0x593f
   1145c:	movt	r1, #1
   11460:	mov	r0, #0
   11464:	mov	r2, #5
   11468:	bl	10eec <dcgettext@plt>
   1146c:	movw	r1, #29004	; 0x714c
   11470:	movt	r1, #2
   11474:	ldr	r1, [r1]
   11478:	bl	10e74 <fputs_unlocked@plt>
   1147c:	movw	r1, #22918	; 0x5986
   11480:	movt	r1, #1
   11484:	mov	r0, #0
   11488:	mov	r2, #5
   1148c:	bl	10eec <dcgettext@plt>
   11490:	mov	r1, r0
   11494:	movw	r2, #22803	; 0x5913
   11498:	movt	r2, #1
   1149c:	mov	r0, #1
   114a0:	mov	r3, r5
   114a4:	bl	11024 <__printf_chk@plt>
   114a8:	movw	r1, #22945	; 0x59a1
   114ac:	movt	r1, #1
   114b0:	mov	r0, #0
   114b4:	mov	r2, #5
   114b8:	bl	10eec <dcgettext@plt>
   114bc:	mov	r1, r0
   114c0:	movw	r0, #22713	; 0x58b9
   114c4:	movt	r0, #1
   114c8:	movw	r3, #22995	; 0x59d3
   114cc:	movt	r3, #1
   114d0:	cmp	r4, r5
   114d4:	moveq	r3, r0
   114d8:	mov	r0, #1
   114dc:	mov	r2, r4
   114e0:	bl	11024 <__printf_chk@plt>
   114e4:	sub	sp, fp, #8
   114e8:	pop	{r4, r5, fp, pc}
   114ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114f0:	add	fp, sp, #28
   114f4:	sub	sp, sp, #36	; 0x24
   114f8:	mov	r4, r1
   114fc:	mov	r5, r0
   11500:	ldr	r0, [r1]
   11504:	bl	12114 <__mempcpy_chk@plt+0x1030>
   11508:	movw	r1, #22995	; 0x59d3
   1150c:	movt	r1, #1
   11510:	mov	r0, #6
   11514:	bl	11060 <setlocale@plt>
   11518:	movw	r6, #22300	; 0x571c
   1151c:	movt	r6, #1
   11520:	movw	r1, #22264	; 0x56f8
   11524:	movt	r1, #1
   11528:	mov	r0, r6
   1152c:	bl	11090 <bindtextdomain@plt>
   11530:	mov	r0, r6
   11534:	bl	10f04 <textdomain@plt>
   11538:	movw	r0, #7012	; 0x1b64
   1153c:	movt	r0, #1
   11540:	bl	1513c <__mempcpy_chk@plt+0x4058>
   11544:	mov	r9, #0
   11548:	movw	r7, #22288	; 0x5710
   1154c:	movt	r7, #1
   11550:	movw	r6, #23064	; 0x5a18
   11554:	movt	r6, #1
   11558:	mov	r0, #0
   1155c:	str	r0, [sp, #20]
   11560:	mov	r0, #0
   11564:	str	r0, [sp, #16]
   11568:	mov	r0, #0
   1156c:	str	r0, [sp, #24]
   11570:	mov	r0, #0
   11574:	str	r0, [sp, #32]
   11578:	mov	r8, #0
   1157c:	mov	r0, #0
   11580:	mov	r1, #0
   11584:	str	r1, [sp, #28]
   11588:	b	11590 <__mempcpy_chk@plt+0x4ac>
   1158c:	mov	r0, sl
   11590:	mov	sl, r0
   11594:	str	r9, [sp]
   11598:	mov	r0, r5
   1159c:	mov	r1, r4
   115a0:	mov	r2, r7
   115a4:	mov	r3, r6
   115a8:	bl	10fc4 <getopt_long@plt>
   115ac:	cmp	r0, #85	; 0x55
   115b0:	ble	116a4 <__mempcpy_chk@plt+0x5c0>
   115b4:	sub	r1, r0, #86	; 0x56
   115b8:	cmp	r1, #31
   115bc:	bhi	11680 <__mempcpy_chk@plt+0x59c>
   115c0:	mov	r0, #1
   115c4:	add	r2, pc, #0
   115c8:	ldr	pc, [r2, r1, lsl #2]
   115cc:	andeq	r1, r1, ip, asr #20
   115d0:			; <UNDEFINED> instruction: 0x00011ab0
   115d4:			; <UNDEFINED> instruction: 0x00011ab0
   115d8:			; <UNDEFINED> instruction: 0x00011ab0
   115dc:			; <UNDEFINED> instruction: 0x00011ab0
   115e0:			; <UNDEFINED> instruction: 0x00011ab0
   115e4:			; <UNDEFINED> instruction: 0x00011ab0
   115e8:			; <UNDEFINED> instruction: 0x00011ab0
   115ec:			; <UNDEFINED> instruction: 0x00011ab0
   115f0:			; <UNDEFINED> instruction: 0x00011ab0
   115f4:			; <UNDEFINED> instruction: 0x00011ab0
   115f8:			; <UNDEFINED> instruction: 0x00011ab0
   115fc:			; <UNDEFINED> instruction: 0x00011ab0
   11600:			; <UNDEFINED> instruction: 0x00011ab0
   11604:	andeq	r1, r1, ip, asr #12
   11608:			; <UNDEFINED> instruction: 0x00011ab0
   1160c:			; <UNDEFINED> instruction: 0x00011ab0
   11610:			; <UNDEFINED> instruction: 0x00011ab0
   11614:			; <UNDEFINED> instruction: 0x00011ab0
   11618:			; <UNDEFINED> instruction: 0x00011ab0
   1161c:			; <UNDEFINED> instruction: 0x00011ab0
   11620:			; <UNDEFINED> instruction: 0x00011ab0
   11624:			; <UNDEFINED> instruction: 0x00011ab0
   11628:			; <UNDEFINED> instruction: 0x00011ab0
   1162c:			; <UNDEFINED> instruction: 0x00011ab0
   11630:			; <UNDEFINED> instruction: 0x00011ab0
   11634:	andeq	r1, r1, r4, ror #12
   11638:	muleq	r1, r0, r5
   1163c:			; <UNDEFINED> instruction: 0x00011ab0
   11640:			; <UNDEFINED> instruction: 0x00011ab0
   11644:	andeq	r1, r1, r8, asr r6
   11648:	muleq	r1, r8, r6
   1164c:	mov	r0, #1
   11650:	str	r0, [sp, #20]
   11654:	b	1158c <__mempcpy_chk@plt+0x4a8>
   11658:	mov	r0, #1
   1165c:	str	r0, [sp, #16]
   11660:	b	11674 <__mempcpy_chk@plt+0x590>
   11664:	movw	r0, #29008	; 0x7150
   11668:	movt	r0, #2
   1166c:	ldr	r0, [r0]
   11670:	str	r0, [sp, #28]
   11674:	mov	r0, #1
   11678:	str	r0, [sp, #32]
   1167c:	b	1158c <__mempcpy_chk@plt+0x4a8>
   11680:	cmp	r0, #256	; 0x100
   11684:	bne	11ab0 <__mempcpy_chk@plt+0x9cc>
   11688:	movw	r0, #29008	; 0x7150
   1168c:	movt	r0, #2
   11690:	ldr	r8, [r0]
   11694:	b	1158c <__mempcpy_chk@plt+0x4a8>
   11698:	mov	r0, #1
   1169c:	str	r0, [sp, #24]
   116a0:	b	1158c <__mempcpy_chk@plt+0x4a8>
   116a4:	cmn	r0, #1
   116a8:	bne	11a44 <__mempcpy_chk@plt+0x960>
   116ac:	movw	r0, #28992	; 0x7140
   116b0:	movt	r0, #2
   116b4:	ldr	r0, [r0]
   116b8:	sub	r1, r5, r0
   116bc:	cmp	r1, #2
   116c0:	bcs	11ac4 <__mempcpy_chk@plt+0x9e0>
   116c4:	cmp	r1, #0
   116c8:	beq	11748 <__mempcpy_chk@plt+0x664>
   116cc:	ldr	r6, [r4, r0, lsl #2]
   116d0:	cmp	r8, #0
   116d4:	beq	11760 <__mempcpy_chk@plt+0x67c>
   116d8:	mov	r0, r6
   116dc:	bl	10fe8 <strlen@plt>
   116e0:	cmp	r0, #0
   116e4:	beq	11ab8 <__mempcpy_chk@plt+0x9d4>
   116e8:	mov	r7, r0
   116ec:	add	r0, r6, r0
   116f0:	ldrb	r0, [r0, #-1]
   116f4:	cmp	r0, #88	; 0x58
   116f8:	bne	11ab8 <__mempcpy_chk@plt+0x9d4>
   116fc:	mov	r0, r8
   11700:	bl	10fe8 <strlen@plt>
   11704:	mov	r9, r0
   11708:	add	r5, r0, #1
   1170c:	add	r0, r5, r7
   11710:	bl	14580 <__mempcpy_chk@plt+0x349c>
   11714:	mov	r4, r0
   11718:	mov	r1, r6
   1171c:	mov	r2, r7
   11720:	bl	10ec8 <memcpy@plt>
   11724:	add	r6, r4, r7
   11728:	mov	r0, r6
   1172c:	mov	r1, r8
   11730:	mov	r2, r5
   11734:	bl	10ec8 <memcpy@plt>
   11738:	ldr	r8, [sp, #24]
   1173c:	cmp	r9, #0
   11740:	bne	117a8 <__mempcpy_chk@plt+0x6c4>
   11744:	b	117b8 <__mempcpy_chk@plt+0x6d4>
   11748:	movw	r6, #23047	; 0x5a07
   1174c:	movt	r6, #1
   11750:	mov	r0, #1
   11754:	str	r0, [sp, #32]
   11758:	cmp	r8, #0
   1175c:	bne	116d8 <__mempcpy_chk@plt+0x5f4>
   11760:	mov	r0, r6
   11764:	bl	148d4 <__mempcpy_chk@plt+0x37f0>
   11768:	mov	r4, r0
   1176c:	mov	r1, #88	; 0x58
   11770:	bl	1106c <strrchr@plt>
   11774:	cmp	r0, #0
   11778:	beq	11784 <__mempcpy_chk@plt+0x6a0>
   1177c:	add	r6, r0, #1
   11780:	b	11790 <__mempcpy_chk@plt+0x6ac>
   11784:	mov	r0, r4
   11788:	bl	10fe8 <strlen@plt>
   1178c:	add	r6, r4, r0
   11790:	ldr	r8, [sp, #24]
   11794:	mov	r0, r6
   11798:	bl	10fe8 <strlen@plt>
   1179c:	mov	r9, r0
   117a0:	cmp	r9, #0
   117a4:	beq	117b8 <__mempcpy_chk@plt+0x6d4>
   117a8:	mov	r0, r6
   117ac:	bl	11c34 <__mempcpy_chk@plt+0xb50>
   117b0:	cmp	r0, r6
   117b4:	bne	11afc <__mempcpy_chk@plt+0xa18>
   117b8:	sub	r1, r6, r4
   117bc:	mov	r0, r4
   117c0:	bl	11ba8 <__mempcpy_chk@plt+0xac4>
   117c4:	cmp	r0, #2
   117c8:	bls	11af0 <__mempcpy_chk@plt+0xa0c>
   117cc:	mov	r6, r0
   117d0:	ldr	r0, [sp, #32]
   117d4:	tst	r0, #1
   117d8:	ldr	r7, [sp, #28]
   117dc:	beq	11850 <__mempcpy_chk@plt+0x76c>
   117e0:	ldr	r0, [sp, #16]
   117e4:	tst	r0, #1
   117e8:	beq	11858 <__mempcpy_chk@plt+0x774>
   117ec:	movw	r0, #22469	; 0x57c5
   117f0:	movt	r0, #1
   117f4:	bl	10f7c <getenv@plt>
   117f8:	ldr	r1, [sp, #28]
   117fc:	cmp	r0, #0
   11800:	beq	11814 <__mempcpy_chk@plt+0x730>
   11804:	mov	r7, r0
   11808:	ldrb	r0, [r0]
   1180c:	cmp	r0, #0
   11810:	bne	11834 <__mempcpy_chk@plt+0x750>
   11814:	cmp	r1, #0
   11818:	beq	1182c <__mempcpy_chk@plt+0x748>
   1181c:	ldrb	r0, [r1]
   11820:	cmp	r0, #0
   11824:	mov	r7, r1
   11828:	bne	11834 <__mempcpy_chk@plt+0x750>
   1182c:	movw	r7, #22476	; 0x57cc
   11830:	movt	r7, #1
   11834:	mov	r0, r4
   11838:	bl	11c34 <__mempcpy_chk@plt+0xb50>
   1183c:	cmp	r0, r4
   11840:	beq	118a8 <__mempcpy_chk@plt+0x7c4>
   11844:	movw	r1, #22481	; 0x57d1
   11848:	movt	r1, #1
   1184c:	b	11b38 <__mempcpy_chk@plt+0xa54>
   11850:	mov	r7, r4
   11854:	b	118c4 <__mempcpy_chk@plt+0x7e0>
   11858:	cmp	r7, #0
   1185c:	ldrbne	r0, [r7]
   11860:	cmpne	r0, #0
   11864:	bne	1189c <__mempcpy_chk@plt+0x7b8>
   11868:	movw	r0, #22469	; 0x57c5
   1186c:	movt	r0, #1
   11870:	bl	10f7c <getenv@plt>
   11874:	cmp	r0, #0
   11878:	beq	11894 <__mempcpy_chk@plt+0x7b0>
   1187c:	ldrb	r1, [r0]
   11880:	movw	r7, #22476	; 0x57cc
   11884:	movt	r7, #1
   11888:	cmp	r1, #0
   1188c:	movne	r7, r0
   11890:	b	1189c <__mempcpy_chk@plt+0x7b8>
   11894:	movw	r7, #22476	; 0x57cc
   11898:	movt	r7, #1
   1189c:	ldrb	r0, [r4]
   118a0:	cmp	r0, #47	; 0x2f
   118a4:	beq	11b30 <__mempcpy_chk@plt+0xa4c>
   118a8:	mov	r0, r7
   118ac:	mov	r1, r4
   118b0:	mov	r2, #0
   118b4:	bl	11f50 <__mempcpy_chk@plt+0xe6c>
   118b8:	mov	r7, r0
   118bc:	mov	r0, r4
   118c0:	bl	12048 <__mempcpy_chk@plt+0xf64>
   118c4:	mov	r0, r7
   118c8:	bl	148d4 <__mempcpy_chk@plt+0x37f0>
   118cc:	mov	r4, r0
   118d0:	ldr	r0, [sp, #20]
   118d4:	and	r3, r8, #1
   118d8:	tst	r0, #1
   118dc:	beq	11918 <__mempcpy_chk@plt+0x834>
   118e0:	mov	r0, r4
   118e4:	mov	r1, r9
   118e8:	mov	r2, r6
   118ec:	bl	11bdc <__mempcpy_chk@plt+0xaf8>
   118f0:	clz	r0, r0
   118f4:	lsr	r0, r0, #5
   118f8:	orr	r1, sl, r0
   118fc:	tst	r1, #1
   11900:	bne	11970 <__mempcpy_chk@plt+0x88c>
   11904:	bl	10ff4 <__errno_location@plt>
   11908:	ldr	r4, [r0]
   1190c:	movw	r1, #22592	; 0x5840
   11910:	movt	r1, #1
   11914:	b	11a08 <__mempcpy_chk@plt+0x924>
   11918:	mov	r0, r4
   1191c:	mov	r1, r9
   11920:	mov	r2, r6
   11924:	bl	11c0c <__mempcpy_chk@plt+0xb28>
   11928:	cmp	r0, #0
   1192c:	blt	11948 <__mempcpy_chk@plt+0x864>
   11930:	tst	r8, #1
   11934:	beq	11958 <__mempcpy_chk@plt+0x874>
   11938:	mov	r0, r4
   1193c:	bl	10f88 <puts@plt>
   11940:	mov	r5, #0
   11944:	b	11a38 <__mempcpy_chk@plt+0x954>
   11948:	mov	r5, #1
   1194c:	tst	sl, #1
   11950:	beq	119f8 <__mempcpy_chk@plt+0x914>
   11954:	b	11a38 <__mempcpy_chk@plt+0x954>
   11958:	bl	110c0 <close@plt>
   1195c:	clz	r0, r0
   11960:	lsr	r0, r0, #5
   11964:	orr	r1, sl, r0
   11968:	tst	r1, #1
   1196c:	beq	119f8 <__mempcpy_chk@plt+0x914>
   11970:	mov	r5, #1
   11974:	cmp	r0, #0
   11978:	beq	11a38 <__mempcpy_chk@plt+0x954>
   1197c:	mov	r0, r4
   11980:	bl	10f88 <puts@plt>
   11984:	mov	r5, #0
   11988:	tst	r8, #1
   1198c:	bne	11a38 <__mempcpy_chk@plt+0x954>
   11990:	movw	r0, #29013	; 0x7155
   11994:	movt	r0, #2
   11998:	mov	r1, #1
   1199c:	strb	r1, [r0]
   119a0:	movw	r0, #29004	; 0x714c
   119a4:	movt	r0, #2
   119a8:	ldr	r0, [r0]
   119ac:	bl	11cb8 <__mempcpy_chk@plt+0xbd4>
   119b0:	cmp	r0, #0
   119b4:	beq	11a38 <__mempcpy_chk@plt+0x954>
   119b8:	bl	10ff4 <__errno_location@plt>
   119bc:	ldr	r5, [r0]
   119c0:	mov	r0, r4
   119c4:	bl	11084 <remove@plt>
   119c8:	tst	sl, #1
   119cc:	bne	11a34 <__mempcpy_chk@plt+0x950>
   119d0:	movw	r1, #22673	; 0x5891
   119d4:	movt	r1, #1
   119d8:	mov	r0, #0
   119dc:	mov	r2, #5
   119e0:	bl	10eec <dcgettext@plt>
   119e4:	mov	r2, r0
   119e8:	mov	r0, #0
   119ec:	mov	r1, r5
   119f0:	bl	10f64 <error@plt>
   119f4:	b	11a34 <__mempcpy_chk@plt+0x950>
   119f8:	bl	10ff4 <__errno_location@plt>
   119fc:	ldr	r4, [r0]
   11a00:	movw	r1, #22635	; 0x586b
   11a04:	movt	r1, #1
   11a08:	mov	r0, #0
   11a0c:	mov	r2, #5
   11a10:	bl	10eec <dcgettext@plt>
   11a14:	mov	r5, r0
   11a18:	mov	r0, r7
   11a1c:	bl	1394c <__mempcpy_chk@plt+0x2868>
   11a20:	mov	r3, r0
   11a24:	mov	r0, #0
   11a28:	mov	r1, r4
   11a2c:	mov	r2, r5
   11a30:	bl	10f64 <error@plt>
   11a34:	mov	r5, #1
   11a38:	mov	r0, r5
   11a3c:	sub	sp, fp, #28
   11a40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a44:	cmn	r0, #3
   11a48:	bne	11aa0 <__mempcpy_chk@plt+0x9bc>
   11a4c:	movw	r0, #28912	; 0x70f0
   11a50:	movt	r0, #2
   11a54:	ldr	r3, [r0]
   11a58:	movw	r0, #29004	; 0x714c
   11a5c:	movt	r0, #2
   11a60:	ldr	r0, [r0]
   11a64:	mov	r1, #0
   11a68:	movw	r2, #22323	; 0x5733
   11a6c:	movt	r2, #1
   11a70:	movw	r7, #22310	; 0x5726
   11a74:	movt	r7, #1
   11a78:	str	r7, [sp]
   11a7c:	str	r2, [sp, #4]
   11a80:	str	r1, [sp, #8]
   11a84:	movw	r1, #22257	; 0x56f1
   11a88:	movt	r1, #1
   11a8c:	movw	r2, #22296	; 0x5718
   11a90:	movt	r2, #1
   11a94:	bl	1443c <__mempcpy_chk@plt+0x3358>
   11a98:	mov	r0, #0
   11a9c:	bl	10fdc <exit@plt>
   11aa0:	cmn	r0, #2
   11aa4:	bne	11ab0 <__mempcpy_chk@plt+0x9cc>
   11aa8:	mov	r0, #0
   11aac:	bl	111e0 <__mempcpy_chk@plt+0xfc>
   11ab0:	mov	r0, #1
   11ab4:	bl	111e0 <__mempcpy_chk@plt+0xfc>
   11ab8:	movw	r1, #22353	; 0x5751
   11abc:	movt	r1, #1
   11ac0:	b	11b04 <__mempcpy_chk@plt+0xa20>
   11ac4:	movw	r1, #22334	; 0x573e
   11ac8:	movt	r1, #1
   11acc:	mov	r0, #0
   11ad0:	mov	r2, #5
   11ad4:	bl	10eec <dcgettext@plt>
   11ad8:	mov	r2, r0
   11adc:	mov	r0, #0
   11ae0:	mov	r1, #0
   11ae4:	bl	10f64 <error@plt>
   11ae8:	mov	r0, #1
   11aec:	bl	111e0 <__mempcpy_chk@plt+0xfc>
   11af0:	movw	r1, #22442	; 0x57aa
   11af4:	movt	r1, #1
   11af8:	b	11b38 <__mempcpy_chk@plt+0xa54>
   11afc:	movw	r1, #22394	; 0x577a
   11b00:	movt	r1, #1
   11b04:	mov	r0, #0
   11b08:	mov	r2, #5
   11b0c:	bl	10eec <dcgettext@plt>
   11b10:	mov	r4, r0
   11b14:	mov	r0, r6
   11b18:	bl	1394c <__mempcpy_chk@plt+0x2868>
   11b1c:	mov	r3, r0
   11b20:	mov	r0, #1
   11b24:	mov	r1, #0
   11b28:	mov	r2, r4
   11b2c:	bl	10f64 <error@plt>
   11b30:	movw	r1, #22532	; 0x5804
   11b34:	movt	r1, #1
   11b38:	mov	r0, #0
   11b3c:	mov	r2, #5
   11b40:	bl	10eec <dcgettext@plt>
   11b44:	mov	r5, r0
   11b48:	mov	r0, r4
   11b4c:	bl	1394c <__mempcpy_chk@plt+0x2868>
   11b50:	mov	r3, r0
   11b54:	mov	r0, #1
   11b58:	mov	r1, #0
   11b5c:	mov	r2, r5
   11b60:	bl	10f64 <error@plt>
   11b64:	push	{fp, lr}
   11b68:	mov	fp, sp
   11b6c:	movw	r0, #29013	; 0x7155
   11b70:	movt	r0, #2
   11b74:	ldrb	r0, [r0]
   11b78:	cmp	r0, #0
   11b7c:	beq	11ba0 <__mempcpy_chk@plt+0xabc>
   11b80:	movw	r0, #29000	; 0x7148
   11b84:	movt	r0, #2
   11b88:	ldr	r0, [r0]
   11b8c:	bl	11cb8 <__mempcpy_chk@plt+0xbd4>
   11b90:	cmp	r0, #0
   11b94:	popeq	{fp, pc}
   11b98:	mov	r0, #1
   11b9c:	bl	10ebc <_exit@plt>
   11ba0:	pop	{fp, lr}
   11ba4:	b	11d60 <__mempcpy_chk@plt+0xc7c>
   11ba8:	cmp	r1, #0
   11bac:	moveq	r0, #0
   11bb0:	bxeq	lr
   11bb4:	add	r0, r0, r1
   11bb8:	sub	r2, r0, #1
   11bbc:	mov	r0, #0
   11bc0:	ldrb	r3, [r2, -r0]
   11bc4:	cmp	r3, #88	; 0x58
   11bc8:	bxne	lr
   11bcc:	add	r0, r0, #1
   11bd0:	cmp	r1, r0
   11bd4:	bne	11bc0 <__mempcpy_chk@plt+0xadc>
   11bd8:	bx	lr
   11bdc:	push	{fp, lr}
   11be0:	mov	fp, sp
   11be4:	sub	sp, sp, #8
   11be8:	str	r2, [sp]
   11bec:	mov	ip, #1
   11bf0:	cmp	r3, #0
   11bf4:	movwne	ip, #2
   11bf8:	mov	r2, #0
   11bfc:	mov	r3, ip
   11c00:	bl	13d60 <__mempcpy_chk@plt+0x2c7c>
   11c04:	mov	sp, fp
   11c08:	pop	{fp, pc}
   11c0c:	push	{fp, lr}
   11c10:	mov	fp, sp
   11c14:	sub	sp, sp, #8
   11c18:	str	r2, [sp]
   11c1c:	cmp	r3, #0
   11c20:	movwne	r3, #2
   11c24:	mov	r2, #0
   11c28:	bl	13d60 <__mempcpy_chk@plt+0x2c7c>
   11c2c:	mov	sp, fp
   11c30:	pop	{fp, pc}
   11c34:	sub	r0, r0, #1
   11c38:	ldrb	r3, [r0, #1]!
   11c3c:	cmp	r3, #47	; 0x2f
   11c40:	beq	11c38 <__mempcpy_chk@plt+0xb54>
   11c44:	mov	r2, #0
   11c48:	mov	r1, r0
   11c4c:	b	11c68 <__mempcpy_chk@plt+0xb84>
   11c50:	cmp	r3, #0
   11c54:	bxeq	lr
   11c58:	tst	r2, #1
   11c5c:	movne	r0, r1
   11c60:	mov	r2, #0
   11c64:	ldrb	r3, [r1, #1]!
   11c68:	uxtb	r3, r3
   11c6c:	cmp	r3, #47	; 0x2f
   11c70:	bne	11c50 <__mempcpy_chk@plt+0xb6c>
   11c74:	mov	r2, #1
   11c78:	ldrb	r3, [r1, #1]!
   11c7c:	b	11c68 <__mempcpy_chk@plt+0xb84>
   11c80:	push	{r4, sl, fp, lr}
   11c84:	add	fp, sp, #8
   11c88:	mov	r4, r0
   11c8c:	bl	10fe8 <strlen@plt>
   11c90:	mov	r1, r0
   11c94:	sub	r2, r4, #1
   11c98:	mov	r0, r1
   11c9c:	cmp	r1, #2
   11ca0:	popcc	{r4, sl, fp, pc}
   11ca4:	ldrb	r3, [r2, r0]
   11ca8:	sub	r1, r0, #1
   11cac:	cmp	r3, #47	; 0x2f
   11cb0:	beq	11c98 <__mempcpy_chk@plt+0xbb4>
   11cb4:	pop	{r4, sl, fp, pc}
   11cb8:	push	{r4, r5, r6, sl, fp, lr}
   11cbc:	add	fp, sp, #16
   11cc0:	mov	r4, r0
   11cc4:	bl	10f40 <__fpending@plt>
   11cc8:	mov	r5, r0
   11ccc:	mov	r0, r4
   11cd0:	bl	10f4c <ferror_unlocked@plt>
   11cd4:	mov	r6, r0
   11cd8:	mov	r0, r4
   11cdc:	bl	11e48 <__mempcpy_chk@plt+0xd64>
   11ce0:	cmp	r6, #0
   11ce4:	beq	11d04 <__mempcpy_chk@plt+0xc20>
   11ce8:	mvn	r4, #0
   11cec:	cmp	r0, #0
   11cf0:	bne	11d38 <__mempcpy_chk@plt+0xc54>
   11cf4:	bl	10ff4 <__errno_location@plt>
   11cf8:	mov	r1, #0
   11cfc:	str	r1, [r0]
   11d00:	b	11d38 <__mempcpy_chk@plt+0xc54>
   11d04:	cmp	r0, #0
   11d08:	mov	r4, r0
   11d0c:	mvnne	r4, #0
   11d10:	cmp	r5, #0
   11d14:	bne	11d38 <__mempcpy_chk@plt+0xc54>
   11d18:	cmp	r0, #0
   11d1c:	beq	11d38 <__mempcpy_chk@plt+0xc54>
   11d20:	bl	10ff4 <__errno_location@plt>
   11d24:	ldr	r0, [r0]
   11d28:	subs	r4, r0, #9
   11d2c:	mvnne	r4, #0
   11d30:	mov	r0, r4
   11d34:	pop	{r4, r5, r6, sl, fp, pc}
   11d38:	mov	r0, r4
   11d3c:	pop	{r4, r5, r6, sl, fp, pc}
   11d40:	movw	r1, #29016	; 0x7158
   11d44:	movt	r1, #2
   11d48:	str	r0, [r1]
   11d4c:	bx	lr
   11d50:	movw	r1, #29020	; 0x715c
   11d54:	movt	r1, #2
   11d58:	strb	r0, [r1]
   11d5c:	bx	lr
   11d60:	push	{r4, r5, r6, sl, fp, lr}
   11d64:	add	fp, sp, #16
   11d68:	sub	sp, sp, #8
   11d6c:	movw	r0, #29004	; 0x714c
   11d70:	movt	r0, #2
   11d74:	ldr	r0, [r0]
   11d78:	bl	11cb8 <__mempcpy_chk@plt+0xbd4>
   11d7c:	cmp	r0, #0
   11d80:	beq	11da8 <__mempcpy_chk@plt+0xcc4>
   11d84:	movw	r0, #29020	; 0x715c
   11d88:	movt	r0, #2
   11d8c:	ldrb	r0, [r0]
   11d90:	cmp	r0, #0
   11d94:	beq	11dc8 <__mempcpy_chk@plt+0xce4>
   11d98:	bl	10ff4 <__errno_location@plt>
   11d9c:	ldr	r0, [r0]
   11da0:	cmp	r0, #32
   11da4:	bne	11dc8 <__mempcpy_chk@plt+0xce4>
   11da8:	movw	r0, #29000	; 0x7148
   11dac:	movt	r0, #2
   11db0:	ldr	r0, [r0]
   11db4:	bl	11cb8 <__mempcpy_chk@plt+0xbd4>
   11db8:	cmp	r0, #0
   11dbc:	subeq	sp, fp, #16
   11dc0:	popeq	{r4, r5, r6, sl, fp, pc}
   11dc4:	b	11e38 <__mempcpy_chk@plt+0xd54>
   11dc8:	movw	r1, #22673	; 0x5891
   11dcc:	movt	r1, #1
   11dd0:	mov	r0, #0
   11dd4:	mov	r2, #5
   11dd8:	bl	10eec <dcgettext@plt>
   11ddc:	mov	r4, r0
   11de0:	movw	r0, #29016	; 0x7158
   11de4:	movt	r0, #2
   11de8:	ldr	r6, [r0]
   11dec:	bl	10ff4 <__errno_location@plt>
   11df0:	ldr	r5, [r0]
   11df4:	cmp	r6, #0
   11df8:	bne	11e14 <__mempcpy_chk@plt+0xd30>
   11dfc:	movw	r2, #23267	; 0x5ae3
   11e00:	movt	r2, #1
   11e04:	mov	r0, #0
   11e08:	mov	r1, r5
   11e0c:	mov	r3, r4
   11e10:	b	11e34 <__mempcpy_chk@plt+0xd50>
   11e14:	mov	r0, r6
   11e18:	bl	137fc <__mempcpy_chk@plt+0x2718>
   11e1c:	mov	r3, r0
   11e20:	str	r4, [sp]
   11e24:	movw	r2, #23263	; 0x5adf
   11e28:	movt	r2, #1
   11e2c:	mov	r0, #0
   11e30:	mov	r1, r5
   11e34:	bl	10f64 <error@plt>
   11e38:	movw	r0, #28916	; 0x70f4
   11e3c:	movt	r0, #2
   11e40:	ldr	r0, [r0]
   11e44:	bl	10ebc <_exit@plt>
   11e48:	push	{r4, r5, fp, lr}
   11e4c:	add	fp, sp, #8
   11e50:	sub	sp, sp, #8
   11e54:	mov	r4, r0
   11e58:	bl	11030 <fileno@plt>
   11e5c:	cmn	r0, #1
   11e60:	ble	11ed8 <__mempcpy_chk@plt+0xdf4>
   11e64:	mov	r0, r4
   11e68:	bl	10fac <__freading@plt>
   11e6c:	cmp	r0, #0
   11e70:	beq	11e9c <__mempcpy_chk@plt+0xdb8>
   11e74:	mov	r0, r4
   11e78:	bl	11030 <fileno@plt>
   11e7c:	mov	r1, #1
   11e80:	str	r1, [sp]
   11e84:	mov	r2, #0
   11e88:	mov	r3, #0
   11e8c:	bl	10f28 <lseek64@plt>
   11e90:	and	r0, r0, r1
   11e94:	cmn	r0, #1
   11e98:	beq	11ed8 <__mempcpy_chk@plt+0xdf4>
   11e9c:	mov	r0, r4
   11ea0:	bl	11ee8 <__mempcpy_chk@plt+0xe04>
   11ea4:	cmp	r0, #0
   11ea8:	beq	11ed8 <__mempcpy_chk@plt+0xdf4>
   11eac:	bl	10ff4 <__errno_location@plt>
   11eb0:	ldr	r5, [r0]
   11eb4:	mov	r0, r4
   11eb8:	bl	11048 <fclose@plt>
   11ebc:	cmp	r5, #0
   11ec0:	beq	11ed0 <__mempcpy_chk@plt+0xdec>
   11ec4:	bl	10ff4 <__errno_location@plt>
   11ec8:	str	r5, [r0]
   11ecc:	mvn	r0, #0
   11ed0:	sub	sp, fp, #8
   11ed4:	pop	{r4, r5, fp, pc}
   11ed8:	mov	r0, r4
   11edc:	sub	sp, fp, #8
   11ee0:	pop	{r4, r5, fp, lr}
   11ee4:	b	11048 <fclose@plt>
   11ee8:	push	{r4, sl, fp, lr}
   11eec:	add	fp, sp, #8
   11ef0:	mov	r4, r0
   11ef4:	cmp	r0, #0
   11ef8:	beq	11f10 <__mempcpy_chk@plt+0xe2c>
   11efc:	mov	r0, r4
   11f00:	bl	10fac <__freading@plt>
   11f04:	cmp	r0, #0
   11f08:	movne	r0, r4
   11f0c:	blne	11f1c <__mempcpy_chk@plt+0xe38>
   11f10:	mov	r0, r4
   11f14:	pop	{r4, sl, fp, lr}
   11f18:	b	10e98 <fflush@plt>
   11f1c:	ldrb	r1, [r0, #1]
   11f20:	tst	r1, #1
   11f24:	bxeq	lr
   11f28:	push	{fp, lr}
   11f2c:	mov	fp, sp
   11f30:	sub	sp, sp, #8
   11f34:	mov	r1, #1
   11f38:	str	r1, [sp]
   11f3c:	mov	r2, #0
   11f40:	mov	r3, #0
   11f44:	bl	12070 <__mempcpy_chk@plt+0xf8c>
   11f48:	mov	sp, fp
   11f4c:	pop	{fp, pc}
   11f50:	push	{fp, lr}
   11f54:	mov	fp, sp
   11f58:	bl	11f68 <__mempcpy_chk@plt+0xe84>
   11f5c:	cmp	r0, #0
   11f60:	popne	{fp, pc}
   11f64:	bl	148f4 <__mempcpy_chk@plt+0x3810>
   11f68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f6c:	add	fp, sp, #28
   11f70:	push	{r2}		; (str r2, [sp, #-4]!)
   11f74:	mov	sl, r1
   11f78:	mov	r7, r0
   11f7c:	bl	11c34 <__mempcpy_chk@plt+0xb50>
   11f80:	sub	r4, r0, r7
   11f84:	bl	11c80 <__mempcpy_chk@plt+0xb9c>
   11f88:	mov	r6, r0
   11f8c:	add	r5, r4, r0
   11f90:	mov	r0, sl
   11f94:	bl	10fe8 <strlen@plt>
   11f98:	mov	r9, r0
   11f9c:	cmp	r6, #0
   11fa0:	beq	11fc8 <__mempcpy_chk@plt+0xee4>
   11fa4:	add	r0, r7, r5
   11fa8:	ldrb	r0, [r0, #-1]
   11fac:	mov	r4, #0
   11fb0:	cmp	r0, #47	; 0x2f
   11fb4:	beq	11fd8 <__mempcpy_chk@plt+0xef4>
   11fb8:	ldrb	r0, [sl]
   11fbc:	subs	r4, r0, #47	; 0x2f
   11fc0:	movwne	r4, #47	; 0x2f
   11fc4:	b	11fd8 <__mempcpy_chk@plt+0xef4>
   11fc8:	ldrb	r0, [sl]
   11fcc:	mov	r4, #0
   11fd0:	cmp	r0, #47	; 0x2f
   11fd4:	movweq	r4, #46	; 0x2e
   11fd8:	add	r0, r9, r5
   11fdc:	uxtb	r8, r4
   11fe0:	cmp	r8, #0
   11fe4:	movwne	r8, #1
   11fe8:	add	r0, r0, r8
   11fec:	add	r0, r0, #1
   11ff0:	bl	1498c <__mempcpy_chk@plt+0x38a8>
   11ff4:	mov	r6, r0
   11ff8:	cmp	r0, #0
   11ffc:	beq	1203c <__mempcpy_chk@plt+0xf58>
   12000:	mov	r0, r6
   12004:	mov	r1, r7
   12008:	mov	r2, r5
   1200c:	mvn	r3, #0
   12010:	bl	110e4 <__mempcpy_chk@plt>
   12014:	strb	r4, [r0], r8
   12018:	ldr	r1, [sp]
   1201c:	cmp	r1, #0
   12020:	strne	r0, [r1]
   12024:	mov	r1, sl
   12028:	mov	r2, r9
   1202c:	mvn	r3, #0
   12030:	bl	110e4 <__mempcpy_chk@plt>
   12034:	mov	r1, #0
   12038:	strb	r1, [r0]
   1203c:	mov	r0, r6
   12040:	sub	sp, fp, #28
   12044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12048:	push	{r4, r5, r6, sl, fp, lr}
   1204c:	add	fp, sp, #16
   12050:	mov	r4, r0
   12054:	bl	10ff4 <__errno_location@plt>
   12058:	mov	r5, r0
   1205c:	ldr	r6, [r0]
   12060:	mov	r0, r4
   12064:	bl	10ea4 <free@plt>
   12068:	str	r6, [r5]
   1206c:	pop	{r4, r5, r6, sl, fp, pc}
   12070:	push	{r4, r5, r6, r7, fp, lr}
   12074:	add	fp, sp, #16
   12078:	sub	sp, sp, #8
   1207c:	mov	r5, r3
   12080:	mov	r6, r2
   12084:	mov	r4, r0
   12088:	ldr	r0, [r0, #4]
   1208c:	ldr	r1, [r4, #8]
   12090:	cmp	r1, r0
   12094:	bne	120b0 <__mempcpy_chk@plt+0xfcc>
   12098:	ldrd	r0, [r4, #16]
   1209c:	cmp	r1, r0
   120a0:	bne	120b0 <__mempcpy_chk@plt+0xfcc>
   120a4:	ldr	r0, [r4, #36]	; 0x24
   120a8:	cmp	r0, #0
   120ac:	beq	120c8 <__mempcpy_chk@plt+0xfe4>
   120b0:	mov	r0, r4
   120b4:	mov	r2, r6
   120b8:	mov	r3, r5
   120bc:	sub	sp, fp, #16
   120c0:	pop	{r4, r5, r6, r7, fp, lr}
   120c4:	b	11054 <fseeko64@plt>
   120c8:	ldr	r7, [fp, #8]
   120cc:	mov	r0, r4
   120d0:	bl	11030 <fileno@plt>
   120d4:	str	r7, [sp]
   120d8:	mov	r2, r6
   120dc:	mov	r3, r5
   120e0:	bl	10f28 <lseek64@plt>
   120e4:	and	r2, r0, r1
   120e8:	cmn	r2, #1
   120ec:	mvneq	r0, #0
   120f0:	subeq	sp, fp, #16
   120f4:	popeq	{r4, r5, r6, r7, fp, pc}
   120f8:	strd	r0, [r4, #80]	; 0x50
   120fc:	ldr	r0, [r4]
   12100:	bic	r0, r0, #16
   12104:	str	r0, [r4]
   12108:	mov	r0, #0
   1210c:	sub	sp, fp, #16
   12110:	pop	{r4, r5, r6, r7, fp, pc}
   12114:	push	{r4, r5, fp, lr}
   12118:	add	fp, sp, #8
   1211c:	cmp	r0, #0
   12120:	beq	121b4 <__mempcpy_chk@plt+0x10d0>
   12124:	mov	r4, r0
   12128:	mov	r1, #47	; 0x2f
   1212c:	bl	1106c <strrchr@plt>
   12130:	cmp	r0, #0
   12134:	mov	r5, r4
   12138:	addne	r5, r0, #1
   1213c:	sub	r0, r5, r4
   12140:	cmp	r0, #7
   12144:	blt	12198 <__mempcpy_chk@plt+0x10b4>
   12148:	sub	r0, r5, #7
   1214c:	movw	r1, #23326	; 0x5b1e
   12150:	movt	r1, #1
   12154:	mov	r2, #7
   12158:	bl	110a8 <strncmp@plt>
   1215c:	cmp	r0, #0
   12160:	bne	12198 <__mempcpy_chk@plt+0x10b4>
   12164:	movw	r1, #23334	; 0x5b26
   12168:	movt	r1, #1
   1216c:	mov	r0, r5
   12170:	mov	r2, #3
   12174:	bl	110a8 <strncmp@plt>
   12178:	cmp	r0, #0
   1217c:	beq	12188 <__mempcpy_chk@plt+0x10a4>
   12180:	mov	r4, r5
   12184:	b	12198 <__mempcpy_chk@plt+0x10b4>
   12188:	add	r4, r5, #3
   1218c:	movw	r0, #28984	; 0x7138
   12190:	movt	r0, #2
   12194:	str	r4, [r0]
   12198:	movw	r0, #28988	; 0x713c
   1219c:	movt	r0, #2
   121a0:	str	r4, [r0]
   121a4:	movw	r0, #29024	; 0x7160
   121a8:	movt	r0, #2
   121ac:	str	r4, [r0]
   121b0:	pop	{r4, r5, fp, pc}
   121b4:	movw	r0, #29000	; 0x7148
   121b8:	movt	r0, #2
   121bc:	ldr	r3, [r0]
   121c0:	movw	r0, #23270	; 0x5ae6
   121c4:	movt	r0, #1
   121c8:	mov	r1, #55	; 0x37
   121cc:	mov	r2, #1
   121d0:	bl	10f1c <fwrite@plt>
   121d4:	bl	110b4 <abort@plt>
   121d8:	push	{r4, r5, r6, sl, fp, lr}
   121dc:	add	fp, sp, #16
   121e0:	mov	r4, r0
   121e4:	movw	r0, #29032	; 0x7168
   121e8:	movt	r0, #2
   121ec:	cmp	r4, #0
   121f0:	moveq	r4, r0
   121f4:	bl	10ff4 <__errno_location@plt>
   121f8:	mov	r5, r0
   121fc:	ldr	r6, [r0]
   12200:	mov	r0, r4
   12204:	mov	r1, #48	; 0x30
   12208:	bl	14838 <__mempcpy_chk@plt+0x3754>
   1220c:	str	r6, [r5]
   12210:	pop	{r4, r5, r6, sl, fp, pc}
   12214:	movw	r1, #29032	; 0x7168
   12218:	movt	r1, #2
   1221c:	cmp	r0, #0
   12220:	movne	r1, r0
   12224:	ldr	r0, [r1]
   12228:	bx	lr
   1222c:	movw	r2, #29032	; 0x7168
   12230:	movt	r2, #2
   12234:	cmp	r0, #0
   12238:	movne	r2, r0
   1223c:	str	r1, [r2]
   12240:	bx	lr
   12244:	movw	r3, #29032	; 0x7168
   12248:	movt	r3, #2
   1224c:	cmp	r0, #0
   12250:	movne	r3, r0
   12254:	ubfx	r0, r1, #5, #3
   12258:	add	r0, r3, r0, lsl #2
   1225c:	ldr	r3, [r0, #8]
   12260:	and	r1, r1, #31
   12264:	eor	r2, r2, r3, lsr r1
   12268:	and	r2, r2, #1
   1226c:	eor	r2, r3, r2, lsl r1
   12270:	str	r2, [r0, #8]
   12274:	mov	r0, #1
   12278:	and	r0, r0, r3, lsr r1
   1227c:	bx	lr
   12280:	movw	r2, #29032	; 0x7168
   12284:	movt	r2, #2
   12288:	cmp	r0, #0
   1228c:	movne	r2, r0
   12290:	ldr	r0, [r2, #4]
   12294:	str	r1, [r2, #4]
   12298:	bx	lr
   1229c:	movw	r3, #29032	; 0x7168
   122a0:	movt	r3, #2
   122a4:	cmp	r0, #0
   122a8:	movne	r3, r0
   122ac:	mov	r0, #10
   122b0:	str	r0, [r3]
   122b4:	cmp	r1, #0
   122b8:	cmpne	r2, #0
   122bc:	bne	122cc <__mempcpy_chk@plt+0x11e8>
   122c0:	push	{fp, lr}
   122c4:	mov	fp, sp
   122c8:	bl	110b4 <abort@plt>
   122cc:	str	r1, [r3, #40]	; 0x28
   122d0:	str	r2, [r3, #44]	; 0x2c
   122d4:	bx	lr
   122d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122dc:	add	fp, sp, #28
   122e0:	sub	sp, sp, #20
   122e4:	mov	r8, r3
   122e8:	mov	r9, r2
   122ec:	mov	sl, r1
   122f0:	mov	r7, r0
   122f4:	ldr	r0, [fp, #8]
   122f8:	movw	r5, #29032	; 0x7168
   122fc:	movt	r5, #2
   12300:	cmp	r0, #0
   12304:	movne	r5, r0
   12308:	bl	10ff4 <__errno_location@plt>
   1230c:	mov	r4, r0
   12310:	ldm	r5, {r0, r1}
   12314:	ldr	r2, [r5, #40]	; 0x28
   12318:	ldr	r3, [r5, #44]	; 0x2c
   1231c:	ldr	r6, [r4]
   12320:	add	r5, r5, #8
   12324:	stm	sp, {r0, r1, r5}
   12328:	str	r2, [sp, #12]
   1232c:	str	r3, [sp, #16]
   12330:	mov	r0, r7
   12334:	mov	r1, sl
   12338:	mov	r2, r9
   1233c:	mov	r3, r8
   12340:	bl	12350 <__mempcpy_chk@plt+0x126c>
   12344:	str	r6, [r4]
   12348:	sub	sp, fp, #28
   1234c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12350:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12354:	add	fp, sp, #28
   12358:	sub	sp, sp, #156	; 0x9c
   1235c:	mov	r9, r3
   12360:	str	r2, [fp, #-84]	; 0xffffffac
   12364:	mov	r6, r1
   12368:	mov	r7, r0
   1236c:	ldr	r0, [fp, #12]
   12370:	and	r1, r0, #4
   12374:	str	r1, [sp, #32]
   12378:	and	r1, r0, #1
   1237c:	str	r1, [sp, #36]	; 0x24
   12380:	ubfx	sl, r0, #1, #1
   12384:	bl	10f34 <__ctype_get_mb_cur_max@plt>
   12388:	str	r0, [sp, #40]	; 0x28
   1238c:	ldr	r0, [fp, #24]
   12390:	str	r0, [sp, #76]	; 0x4c
   12394:	ldr	r0, [fp, #20]
   12398:	str	r0, [sp, #68]	; 0x44
   1239c:	ldr	r0, [fp, #8]
   123a0:	str	r0, [fp, #-60]	; 0xffffffc4
   123a4:	mov	r0, #0
   123a8:	str	r0, [sp, #72]	; 0x48
   123ac:	mov	r0, #0
   123b0:	str	r0, [sp, #92]	; 0x5c
   123b4:	mov	r0, #0
   123b8:	str	r0, [fp, #-72]	; 0xffffffb8
   123bc:	mov	r0, #0
   123c0:	mov	r1, #0
   123c4:	str	r1, [fp, #-56]	; 0xffffffc8
   123c8:	mov	r1, #0
   123cc:	str	r1, [sp, #56]	; 0x38
   123d0:	mov	r5, #1
   123d4:	str	r7, [sp, #80]	; 0x50
   123d8:	mov	r4, r6
   123dc:	ldr	r6, [fp, #-60]	; 0xffffffc4
   123e0:	cmp	r6, #10
   123e4:	bhi	1334c <__mempcpy_chk@plt+0x2268>
   123e8:	add	r1, pc, #20
   123ec:	mov	r8, #0
   123f0:	mov	r2, #1
   123f4:	mov	r3, #0
   123f8:	ldr	ip, [fp, #-84]	; 0xffffffac
   123fc:	mov	lr, r9
   12400:	ldr	pc, [r1, r6, lsl #2]
   12404:	ldrdeq	r2, [r1], -ip
   12408:	andeq	r2, r1, ip, lsl #10
   1240c:	andeq	r2, r1, ip, asr #9
   12410:	andeq	r2, r1, r4, asr #9
   12414:	andeq	r2, r1, r0, lsl #10
   12418:	andeq	r2, r1, r0, ror #10
   1241c:	andeq	r2, r1, ip, ror #9
   12420:			; <UNDEFINED> instruction: 0x000125bc
   12424:	andeq	r2, r1, r0, lsr r4
   12428:	andeq	r2, r1, r0, lsr r4
   1242c:	andeq	r2, r1, r8, asr r4
   12430:	movw	r0, #23418	; 0x5b7a
   12434:	movt	r0, #1
   12438:	mov	r1, r6
   1243c:	bl	13958 <__mempcpy_chk@plt+0x2874>
   12440:	str	r0, [sp, #68]	; 0x44
   12444:	movw	r0, #23420	; 0x5b7c
   12448:	movt	r0, #1
   1244c:	mov	r1, r6
   12450:	bl	13958 <__mempcpy_chk@plt+0x2874>
   12454:	str	r0, [sp, #76]	; 0x4c
   12458:	mov	r8, #0
   1245c:	tst	sl, #1
   12460:	bne	12498 <__mempcpy_chk@plt+0x13b4>
   12464:	ldr	r0, [sp, #68]	; 0x44
   12468:	ldrb	r0, [r0]
   1246c:	cmp	r0, #0
   12470:	beq	12498 <__mempcpy_chk@plt+0x13b4>
   12474:	ldr	r1, [sp, #68]	; 0x44
   12478:	add	r1, r1, #1
   1247c:	mov	r8, #0
   12480:	cmp	r8, r4
   12484:	strbcc	r0, [r7, r8]
   12488:	ldrb	r0, [r1, r8]
   1248c:	add	r8, r8, #1
   12490:	cmp	r0, #0
   12494:	bne	12480 <__mempcpy_chk@plt+0x139c>
   12498:	ldr	r6, [sp, #76]	; 0x4c
   1249c:	mov	r0, r6
   124a0:	bl	10fe8 <strlen@plt>
   124a4:	str	r0, [fp, #-72]	; 0xffffffb8
   124a8:	str	r6, [sp, #92]	; 0x5c
   124ac:	mov	r2, #1
   124b0:	mov	r3, sl
   124b4:	ldr	ip, [fp, #-84]	; 0xffffffac
   124b8:	mov	lr, r9
   124bc:	ldr	r6, [fp, #-60]	; 0xffffffc4
   124c0:	b	125bc <__mempcpy_chk@plt+0x14d8>
   124c4:	mov	r0, #1
   124c8:	b	1250c <__mempcpy_chk@plt+0x1428>
   124cc:	tst	sl, #1
   124d0:	bne	1250c <__mempcpy_chk@plt+0x1428>
   124d4:	mov	r2, r0
   124d8:	b	12534 <__mempcpy_chk@plt+0x1450>
   124dc:	mov	r6, #0
   124e0:	mov	r8, #0
   124e4:	mov	r2, r0
   124e8:	b	125b8 <__mempcpy_chk@plt+0x14d4>
   124ec:	mov	r0, #1
   124f0:	str	r0, [fp, #-72]	; 0xffffffb8
   124f4:	mov	r8, #0
   124f8:	mov	r6, #5
   124fc:	b	12578 <__mempcpy_chk@plt+0x1494>
   12500:	mov	r2, #1
   12504:	tst	sl, #1
   12508:	beq	12534 <__mempcpy_chk@plt+0x1450>
   1250c:	mov	r1, #1
   12510:	str	r1, [fp, #-72]	; 0xffffffb8
   12514:	mov	r8, #0
   12518:	mov	r6, #2
   1251c:	movw	r1, #23420	; 0x5b7c
   12520:	movt	r1, #1
   12524:	str	r1, [sp, #92]	; 0x5c
   12528:	mov	r2, r0
   1252c:	mov	r3, #1
   12530:	b	125bc <__mempcpy_chk@plt+0x14d8>
   12534:	mov	r8, #1
   12538:	mov	r6, #2
   1253c:	cmp	r4, #0
   12540:	movne	r0, #39	; 0x27
   12544:	strbne	r0, [r7]
   12548:	movw	r0, #23420	; 0x5b7c
   1254c:	movt	r0, #1
   12550:	str	r0, [sp, #92]	; 0x5c
   12554:	mov	r0, #1
   12558:	str	r0, [fp, #-72]	; 0xffffffb8
   1255c:	b	125b8 <__mempcpy_chk@plt+0x14d4>
   12560:	mov	r6, #5
   12564:	tst	sl, #1
   12568:	beq	12590 <__mempcpy_chk@plt+0x14ac>
   1256c:	mov	r0, #1
   12570:	str	r0, [fp, #-72]	; 0xffffffb8
   12574:	mov	r8, #0
   12578:	movw	r0, #23416	; 0x5b78
   1257c:	movt	r0, #1
   12580:	str	r0, [sp, #92]	; 0x5c
   12584:	mov	r2, #1
   12588:	mov	r3, #1
   1258c:	b	125bc <__mempcpy_chk@plt+0x14d8>
   12590:	cmp	r4, #0
   12594:	movne	r0, #34	; 0x22
   12598:	strbne	r0, [r7]
   1259c:	mov	r8, #1
   125a0:	movw	r0, #23416	; 0x5b78
   125a4:	movt	r0, #1
   125a8:	str	r0, [sp, #92]	; 0x5c
   125ac:	mov	r0, #1
   125b0:	str	r0, [fp, #-72]	; 0xffffffb8
   125b4:	mov	r2, #1
   125b8:	mov	r3, #0
   125bc:	ldr	r0, [fp, #16]
   125c0:	cmp	r0, #0
   125c4:	movwne	r0, #1
   125c8:	and	r0, r0, r3
   125cc:	str	r0, [fp, #-88]	; 0xffffffa8
   125d0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   125d4:	cmp	r0, #0
   125d8:	movwne	r0, #1
   125dc:	and	r1, r0, r3
   125e0:	and	r1, r2, r1
   125e4:	str	r1, [sp, #48]	; 0x30
   125e8:	str	r6, [fp, #-60]	; 0xffffffc4
   125ec:	subs	r6, r6, #2
   125f0:	clz	r1, r6
   125f4:	lsr	r1, r1, #5
   125f8:	and	r1, r1, r3
   125fc:	str	r1, [sp, #60]	; 0x3c
   12600:	str	r6, [fp, #-80]	; 0xffffffb0
   12604:	mov	r1, r6
   12608:	movwne	r1, #1
   1260c:	str	r3, [fp, #-76]	; 0xffffffb4
   12610:	eor	r3, r3, #1
   12614:	str	r3, [sp, #88]	; 0x58
   12618:	orr	r3, r1, r3
   1261c:	str	r3, [sp, #64]	; 0x40
   12620:	and	r1, r1, r2
   12624:	str	r1, [fp, #-68]	; 0xffffffbc
   12628:	and	r0, r0, r1
   1262c:	str	r0, [fp, #-64]	; 0xffffffc0
   12630:	str	r2, [sp, #84]	; 0x54
   12634:	eor	r0, r2, #1
   12638:	str	r0, [sp, #52]	; 0x34
   1263c:	mov	r6, #0
   12640:	cmn	lr, #1
   12644:	beq	12654 <__mempcpy_chk@plt+0x1570>
   12648:	cmp	r6, lr
   1264c:	bne	12660 <__mempcpy_chk@plt+0x157c>
   12650:	b	131cc <__mempcpy_chk@plt+0x20e8>
   12654:	ldrb	r0, [ip, r6]
   12658:	cmp	r0, #0
   1265c:	beq	131cc <__mempcpy_chk@plt+0x20e8>
   12660:	str	r5, [fp, #-48]	; 0xffffffd0
   12664:	mov	sl, #0
   12668:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1266c:	cmp	r0, #0
   12670:	beq	126a4 <__mempcpy_chk@plt+0x15c0>
   12674:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12678:	add	r5, r6, r0
   1267c:	cmp	r0, #2
   12680:	bcc	1269c <__mempcpy_chk@plt+0x15b8>
   12684:	cmn	lr, #1
   12688:	bne	1269c <__mempcpy_chk@plt+0x15b8>
   1268c:	mov	r0, ip
   12690:	bl	10fe8 <strlen@plt>
   12694:	ldr	ip, [fp, #-84]	; 0xffffffac
   12698:	mov	lr, r0
   1269c:	cmp	r5, lr
   126a0:	bls	126b0 <__mempcpy_chk@plt+0x15cc>
   126a4:	mov	r0, #0
   126a8:	str	r0, [fp, #-52]	; 0xffffffcc
   126ac:	b	126fc <__mempcpy_chk@plt+0x1618>
   126b0:	mov	r5, r4
   126b4:	mov	r4, lr
   126b8:	add	r0, ip, r6
   126bc:	ldr	r1, [sp, #92]	; 0x5c
   126c0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   126c4:	bl	10ee0 <memcmp@plt>
   126c8:	cmp	r0, #0
   126cc:	mov	r1, r0
   126d0:	movwne	r1, #1
   126d4:	ldr	r2, [sp, #88]	; 0x58
   126d8:	orr	r1, r1, r2
   126dc:	tst	r1, #1
   126e0:	beq	13290 <__mempcpy_chk@plt+0x21ac>
   126e4:	clz	r0, r0
   126e8:	lsr	r0, r0, #5
   126ec:	str	r0, [fp, #-52]	; 0xffffffcc
   126f0:	ldr	ip, [fp, #-84]	; 0xffffffac
   126f4:	mov	lr, r4
   126f8:	mov	r4, r5
   126fc:	ldrb	r5, [ip, r6]
   12700:	cmp	r5, #126	; 0x7e
   12704:	bhi	12ac0 <__mempcpy_chk@plt+0x19dc>
   12708:	mov	r9, #1
   1270c:	mov	r2, #110	; 0x6e
   12710:	mov	r0, #97	; 0x61
   12714:	add	r3, pc, #4
   12718:	mov	r1, #0
   1271c:	ldr	pc, [r3, r5, lsl #2]
   12720:			; <UNDEFINED> instruction: 0x000129b8
   12724:	andeq	r2, r1, r0, asr #21
   12728:	andeq	r2, r1, r0, asr #21
   1272c:	andeq	r2, r1, r0, asr #21
   12730:	andeq	r2, r1, r0, asr #21
   12734:	andeq	r2, r1, r0, asr #21
   12738:	andeq	r2, r1, r0, asr #21
   1273c:	andeq	r2, r1, r4, lsl #23
   12740:	muleq	r1, r8, r9
   12744:	muleq	r1, r0, r9
   12748:	andeq	r2, r1, r4, lsr #19
   1274c:	andeq	r2, r1, r8, lsr #20
   12750:	andeq	r2, r1, r8, lsl #19
   12754:	andeq	r2, r1, r0, lsr #19
   12758:	andeq	r2, r1, r0, asr #21
   1275c:	andeq	r2, r1, r0, asr #21
   12760:	andeq	r2, r1, r0, asr #21
   12764:	andeq	r2, r1, r0, asr #21
   12768:	andeq	r2, r1, r0, asr #21
   1276c:	andeq	r2, r1, r0, asr #21
   12770:	andeq	r2, r1, r0, asr #21
   12774:	andeq	r2, r1, r0, asr #21
   12778:	andeq	r2, r1, r0, asr #21
   1277c:	andeq	r2, r1, r0, asr #21
   12780:	andeq	r2, r1, r0, asr #21
   12784:	andeq	r2, r1, r0, asr #21
   12788:	andeq	r2, r1, r0, asr #21
   1278c:	andeq	r2, r1, r0, asr #21
   12790:	andeq	r2, r1, r0, asr #21
   12794:	andeq	r2, r1, r0, asr #21
   12798:	andeq	r2, r1, r0, asr #21
   1279c:	andeq	r2, r1, r0, asr #21
   127a0:	andeq	r2, r1, r4, lsr fp
   127a4:	andeq	r2, r1, r8, lsr fp
   127a8:	andeq	r2, r1, r8, lsr fp
   127ac:	andeq	r2, r1, r0, lsr r9
   127b0:	andeq	r2, r1, r8, lsr fp
   127b4:	andeq	r2, r1, ip, lsl r9
   127b8:	andeq	r2, r1, r8, lsr fp
   127bc:	andeq	r2, r1, r0, lsr sl
   127c0:	andeq	r2, r1, r8, lsr fp
   127c4:	andeq	r2, r1, r8, lsr fp
   127c8:	andeq	r2, r1, r8, lsr fp
   127cc:	andeq	r2, r1, ip, lsl r9
   127d0:	andeq	r2, r1, ip, lsl r9
   127d4:	andeq	r2, r1, ip, lsl r9
   127d8:	andeq	r2, r1, ip, lsl r9
   127dc:	andeq	r2, r1, ip, lsl r9
   127e0:	andeq	r2, r1, ip, lsl r9
   127e4:	andeq	r2, r1, ip, lsl r9
   127e8:	andeq	r2, r1, ip, lsl r9
   127ec:	andeq	r2, r1, ip, lsl r9
   127f0:	andeq	r2, r1, ip, lsl r9
   127f4:	andeq	r2, r1, ip, lsl r9
   127f8:	andeq	r2, r1, ip, lsl r9
   127fc:	andeq	r2, r1, ip, lsl r9
   12800:	andeq	r2, r1, ip, lsl r9
   12804:	andeq	r2, r1, ip, lsl r9
   12808:	andeq	r2, r1, ip, lsl r9
   1280c:	andeq	r2, r1, r8, lsr fp
   12810:	andeq	r2, r1, r8, lsr fp
   12814:	andeq	r2, r1, r8, lsr fp
   12818:	andeq	r2, r1, r8, lsr fp
   1281c:	strdeq	r2, [r1], -r8
   12820:	andeq	r2, r1, r0, asr #21
   12824:	andeq	r2, r1, ip, lsl r9
   12828:	andeq	r2, r1, ip, lsl r9
   1282c:	andeq	r2, r1, ip, lsl r9
   12830:	andeq	r2, r1, ip, lsl r9
   12834:	andeq	r2, r1, ip, lsl r9
   12838:	andeq	r2, r1, ip, lsl r9
   1283c:	andeq	r2, r1, ip, lsl r9
   12840:	andeq	r2, r1, ip, lsl r9
   12844:	andeq	r2, r1, ip, lsl r9
   12848:	andeq	r2, r1, ip, lsl r9
   1284c:	andeq	r2, r1, ip, lsl r9
   12850:	andeq	r2, r1, ip, lsl r9
   12854:	andeq	r2, r1, ip, lsl r9
   12858:	andeq	r2, r1, ip, lsl r9
   1285c:	andeq	r2, r1, ip, lsl r9
   12860:	andeq	r2, r1, ip, lsl r9
   12864:	andeq	r2, r1, ip, lsl r9
   12868:	andeq	r2, r1, ip, lsl r9
   1286c:	andeq	r2, r1, ip, lsl r9
   12870:	andeq	r2, r1, ip, lsl r9
   12874:	andeq	r2, r1, ip, lsl r9
   12878:	andeq	r2, r1, ip, lsl r9
   1287c:	andeq	r2, r1, ip, lsl r9
   12880:	andeq	r2, r1, ip, lsl r9
   12884:	andeq	r2, r1, ip, lsl r9
   12888:	andeq	r2, r1, ip, lsl r9
   1288c:	andeq	r2, r1, r8, lsr fp
   12890:	andeq	r2, r1, r4, ror #18
   12894:	andeq	r2, r1, ip, lsl r9
   12898:	andeq	r2, r1, r8, lsr fp
   1289c:	andeq	r2, r1, ip, lsl r9
   128a0:	andeq	r2, r1, r8, lsr fp
   128a4:	andeq	r2, r1, ip, lsl r9
   128a8:	andeq	r2, r1, ip, lsl r9
   128ac:	andeq	r2, r1, ip, lsl r9
   128b0:	andeq	r2, r1, ip, lsl r9
   128b4:	andeq	r2, r1, ip, lsl r9
   128b8:	andeq	r2, r1, ip, lsl r9
   128bc:	andeq	r2, r1, ip, lsl r9
   128c0:	andeq	r2, r1, ip, lsl r9
   128c4:	andeq	r2, r1, ip, lsl r9
   128c8:	andeq	r2, r1, ip, lsl r9
   128cc:	andeq	r2, r1, ip, lsl r9
   128d0:	andeq	r2, r1, ip, lsl r9
   128d4:	andeq	r2, r1, ip, lsl r9
   128d8:	andeq	r2, r1, ip, lsl r9
   128dc:	andeq	r2, r1, ip, lsl r9
   128e0:	andeq	r2, r1, ip, lsl r9
   128e4:	andeq	r2, r1, ip, lsl r9
   128e8:	andeq	r2, r1, ip, lsl r9
   128ec:	andeq	r2, r1, ip, lsl r9
   128f0:	andeq	r2, r1, ip, lsl r9
   128f4:	andeq	r2, r1, ip, lsl r9
   128f8:	andeq	r2, r1, ip, lsl r9
   128fc:	andeq	r2, r1, ip, lsl r9
   12900:	andeq	r2, r1, ip, lsl r9
   12904:	andeq	r2, r1, ip, lsl r9
   12908:	andeq	r2, r1, ip, lsl r9
   1290c:	andeq	r2, r1, r4, asr #18
   12910:	andeq	r2, r1, r8, lsr fp
   12914:	andeq	r2, r1, r4, asr #18
   12918:	andeq	r2, r1, r0, lsr r9
   1291c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12920:	cmp	r0, #0
   12924:	beq	12b98 <__mempcpy_chk@plt+0x1ab4>
   12928:	ldr	r0, [fp, #16]
   1292c:	b	12b9c <__mempcpy_chk@plt+0x1ab8>
   12930:	mov	r9, #0
   12934:	cmp	r6, #0
   12938:	beq	12b34 <__mempcpy_chk@plt+0x1a50>
   1293c:	mov	sl, #0
   12940:	b	1291c <__mempcpy_chk@plt+0x1838>
   12944:	mov	r9, #0
   12948:	cmn	lr, #1
   1294c:	beq	12b18 <__mempcpy_chk@plt+0x1a34>
   12950:	cmp	r6, #0
   12954:	bne	1293c <__mempcpy_chk@plt+0x1858>
   12958:	cmp	lr, #1
   1295c:	beq	12b34 <__mempcpy_chk@plt+0x1a50>
   12960:	b	1293c <__mempcpy_chk@plt+0x1858>
   12964:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12968:	cmp	r0, #2
   1296c:	bne	12b60 <__mempcpy_chk@plt+0x1a7c>
   12970:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12974:	tst	r0, #1
   12978:	bne	132a8 <__mempcpy_chk@plt+0x21c4>
   1297c:	mov	sl, #0
   12980:	mov	r0, #92	; 0x5c
   12984:	b	12b74 <__mempcpy_chk@plt+0x1a90>
   12988:	mov	r0, #102	; 0x66
   1298c:	b	12b84 <__mempcpy_chk@plt+0x1aa0>
   12990:	mov	r2, #116	; 0x74
   12994:	b	129a4 <__mempcpy_chk@plt+0x18c0>
   12998:	mov	r0, #98	; 0x62
   1299c:	b	12b84 <__mempcpy_chk@plt+0x1aa0>
   129a0:	mov	r2, #114	; 0x72
   129a4:	ldr	r0, [sp, #64]	; 0x40
   129a8:	tst	r0, #1
   129ac:	mov	r0, r2
   129b0:	bne	12b84 <__mempcpy_chk@plt+0x1aa0>
   129b4:	b	132a8 <__mempcpy_chk@plt+0x21c4>
   129b8:	ldr	r0, [sp, #84]	; 0x54
   129bc:	tst	r0, #1
   129c0:	beq	12c74 <__mempcpy_chk@plt+0x1b90>
   129c4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   129c8:	tst	r0, #1
   129cc:	bne	132a8 <__mempcpy_chk@plt+0x21c4>
   129d0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   129d4:	cmp	r0, #2
   129d8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   129dc:	movwne	r0, #1
   129e0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   129e4:	orr	r0, r0, r2
   129e8:	tst	r0, #1
   129ec:	beq	13068 <__mempcpy_chk@plt+0x1f84>
   129f0:	mov	r0, r8
   129f4:	b	1309c <__mempcpy_chk@plt+0x1fb8>
   129f8:	mov	sl, #0
   129fc:	mov	r5, #63	; 0x3f
   12a00:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12a04:	cmp	r0, #5
   12a08:	beq	12e28 <__mempcpy_chk@plt+0x1d44>
   12a0c:	cmp	r0, #2
   12a10:	bne	12ec8 <__mempcpy_chk@plt+0x1de4>
   12a14:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12a18:	tst	r0, #1
   12a1c:	mov	r9, #0
   12a20:	beq	1291c <__mempcpy_chk@plt+0x1838>
   12a24:	b	132a8 <__mempcpy_chk@plt+0x21c4>
   12a28:	mov	r0, #118	; 0x76
   12a2c:	b	12b84 <__mempcpy_chk@plt+0x1aa0>
   12a30:	mov	r5, #39	; 0x27
   12a34:	mov	r0, #1
   12a38:	str	r0, [sp, #56]	; 0x38
   12a3c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12a40:	cmp	r0, #2
   12a44:	bne	12c94 <__mempcpy_chk@plt+0x1bb0>
   12a48:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12a4c:	tst	r0, #1
   12a50:	bne	132a8 <__mempcpy_chk@plt+0x21c4>
   12a54:	ldr	r2, [sp, #72]	; 0x48
   12a58:	cmp	r2, #0
   12a5c:	mov	r0, r2
   12a60:	movwne	r0, #1
   12a64:	clz	r1, r4
   12a68:	lsr	r1, r1, #5
   12a6c:	orrs	r0, r0, r1
   12a70:	moveq	r2, r4
   12a74:	str	r2, [sp, #72]	; 0x48
   12a78:	moveq	r4, r0
   12a7c:	cmp	r8, r4
   12a80:	movcc	r0, #39	; 0x27
   12a84:	strbcc	r0, [r7, r8]
   12a88:	add	r0, r8, #1
   12a8c:	cmp	r0, r4
   12a90:	movcc	r1, #92	; 0x5c
   12a94:	strbcc	r1, [r7, r0]
   12a98:	add	r0, r8, #2
   12a9c:	cmp	r0, r4
   12aa0:	movcc	r1, #39	; 0x27
   12aa4:	strbcc	r1, [r7, r0]
   12aa8:	add	r8, r8, #3
   12aac:	mov	r0, #0
   12ab0:	str	r0, [fp, #-56]	; 0xffffffc8
   12ab4:	mov	sl, #0
   12ab8:	mov	r9, #1
   12abc:	b	1291c <__mempcpy_chk@plt+0x1838>
   12ac0:	str	r4, [sp, #24]
   12ac4:	ldr	r0, [sp, #40]	; 0x28
   12ac8:	cmp	r0, #1
   12acc:	bne	12c9c <__mempcpy_chk@plt+0x1bb8>
   12ad0:	str	lr, [sp, #28]
   12ad4:	bl	10fd0 <__ctype_b_loc@plt>
   12ad8:	ldr	ip, [fp, #-84]	; 0xffffffac
   12adc:	ldr	r0, [r0]
   12ae0:	add	r0, r0, r5, lsl #1
   12ae4:	ldrb	r0, [r0, #1]
   12ae8:	ubfx	r9, r0, #6, #1
   12aec:	mov	r1, #1
   12af0:	ldr	r4, [sp, #24]
   12af4:	ldr	r0, [sp, #52]	; 0x34
   12af8:	orr	r0, r9, r0
   12afc:	mov	r2, r1
   12b00:	cmp	r1, #1
   12b04:	bhi	12ed0 <__mempcpy_chk@plt+0x1dec>
   12b08:	tst	r0, #1
   12b0c:	beq	12ed0 <__mempcpy_chk@plt+0x1dec>
   12b10:	ldr	lr, [sp, #28]
   12b14:	b	1291c <__mempcpy_chk@plt+0x1838>
   12b18:	cmp	r6, #0
   12b1c:	ldrbeq	r0, [ip, #1]
   12b20:	cmpeq	r0, #0
   12b24:	beq	12b34 <__mempcpy_chk@plt+0x1a50>
   12b28:	mvn	lr, #0
   12b2c:	mov	sl, #0
   12b30:	b	1291c <__mempcpy_chk@plt+0x1838>
   12b34:	mov	r1, #1
   12b38:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12b3c:	cmp	r0, #2
   12b40:	bne	12b58 <__mempcpy_chk@plt+0x1a74>
   12b44:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12b48:	tst	r0, #1
   12b4c:	mov	r9, r1
   12b50:	beq	1291c <__mempcpy_chk@plt+0x1838>
   12b54:	b	132a8 <__mempcpy_chk@plt+0x21c4>
   12b58:	mov	r9, r1
   12b5c:	b	1291c <__mempcpy_chk@plt+0x1838>
   12b60:	mov	sl, #0
   12b64:	mov	r0, #92	; 0x5c
   12b68:	ldr	r1, [sp, #48]	; 0x30
   12b6c:	cmp	r1, #0
   12b70:	beq	12b84 <__mempcpy_chk@plt+0x1aa0>
   12b74:	mov	r9, #0
   12b78:	cmp	sl, #0
   12b7c:	beq	13134 <__mempcpy_chk@plt+0x2050>
   12b80:	b	13170 <__mempcpy_chk@plt+0x208c>
   12b84:	mov	r9, #0
   12b88:	ldr	r1, [sp, #84]	; 0x54
   12b8c:	tst	r1, #1
   12b90:	mov	sl, #0
   12b94:	bne	12bd4 <__mempcpy_chk@plt+0x1af0>
   12b98:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12b9c:	cmp	r0, #0
   12ba0:	mov	r0, r5
   12ba4:	beq	12bc8 <__mempcpy_chk@plt+0x1ae4>
   12ba8:	ubfx	r0, r5, #5, #3
   12bac:	ldr	r1, [fp, #16]
   12bb0:	ldr	r0, [r1, r0, lsl #2]
   12bb4:	and	r1, r5, #31
   12bb8:	mov	r2, #1
   12bbc:	tst	r0, r2, lsl r1
   12bc0:	mov	r0, r5
   12bc4:	bne	12bd4 <__mempcpy_chk@plt+0x1af0>
   12bc8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12bcc:	cmp	r1, #0
   12bd0:	beq	1312c <__mempcpy_chk@plt+0x2048>
   12bd4:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12bd8:	tst	r1, #1
   12bdc:	bne	132a8 <__mempcpy_chk@plt+0x21c4>
   12be0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12be4:	cmp	r1, #2
   12be8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12bec:	movwne	r1, #1
   12bf0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12bf4:	orr	r1, r1, r2
   12bf8:	tst	r1, #1
   12bfc:	beq	12c08 <__mempcpy_chk@plt+0x1b24>
   12c00:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12c04:	b	12c44 <__mempcpy_chk@plt+0x1b60>
   12c08:	cmp	r8, r4
   12c0c:	movcc	r1, #39	; 0x27
   12c10:	strbcc	r1, [r7, r8]
   12c14:	add	r1, r8, #1
   12c18:	cmp	r1, r4
   12c1c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12c20:	movcc	r2, #36	; 0x24
   12c24:	strbcc	r2, [r7, r1]
   12c28:	add	r1, r8, #2
   12c2c:	cmp	r1, r4
   12c30:	movcc	r2, #39	; 0x27
   12c34:	strbcc	r2, [r7, r1]
   12c38:	add	r8, r8, #3
   12c3c:	mov	r1, #1
   12c40:	str	r1, [fp, #-56]	; 0xffffffc8
   12c44:	cmp	r8, r4
   12c48:	movcc	r1, #92	; 0x5c
   12c4c:	strbcc	r1, [r7, r8]
   12c50:	add	r8, r8, #1
   12c54:	cmp	r8, r4
   12c58:	strbcc	r0, [r7, r8]
   12c5c:	and	r5, r5, r9
   12c60:	add	r8, r8, #1
   12c64:	add	r6, r6, #1
   12c68:	cmn	lr, #1
   12c6c:	bne	12648 <__mempcpy_chk@plt+0x1564>
   12c70:	b	12654 <__mempcpy_chk@plt+0x1570>
   12c74:	mov	r9, #0
   12c78:	ldr	r0, [sp, #36]	; 0x24
   12c7c:	cmp	r0, #0
   12c80:	mov	sl, #0
   12c84:	mov	r5, #0
   12c88:	beq	12b98 <__mempcpy_chk@plt+0x1ab4>
   12c8c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12c90:	b	12c64 <__mempcpy_chk@plt+0x1b80>
   12c94:	mov	r9, #1
   12c98:	b	1291c <__mempcpy_chk@plt+0x1838>
   12c9c:	mov	r0, #0
   12ca0:	str	r0, [fp, #-36]	; 0xffffffdc
   12ca4:	str	r0, [fp, #-40]	; 0xffffffd8
   12ca8:	cmn	lr, #1
   12cac:	bne	12cc0 <__mempcpy_chk@plt+0x1bdc>
   12cb0:	mov	r0, ip
   12cb4:	bl	10fe8 <strlen@plt>
   12cb8:	ldr	ip, [fp, #-84]	; 0xffffffac
   12cbc:	mov	lr, r0
   12cc0:	add	r0, ip, r6
   12cc4:	str	r0, [sp, #20]
   12cc8:	mov	r9, #1
   12ccc:	mov	r7, #0
   12cd0:	sub	r4, fp, #40	; 0x28
   12cd4:	str	lr, [sp, #28]
   12cd8:	str	r7, [sp, #44]	; 0x2c
   12cdc:	add	r7, r7, r6
   12ce0:	add	r1, ip, r7
   12ce4:	sub	r2, lr, r7
   12ce8:	sub	r0, fp, #44	; 0x2c
   12cec:	mov	r3, r4
   12cf0:	bl	14dbc <__mempcpy_chk@plt+0x3cd8>
   12cf4:	cmp	r0, #0
   12cf8:	beq	131b8 <__mempcpy_chk@plt+0x20d4>
   12cfc:	cmn	r0, #1
   12d00:	beq	13178 <__mempcpy_chk@plt+0x2094>
   12d04:	cmn	r0, #2
   12d08:	ldr	lr, [sp, #28]
   12d0c:	beq	13180 <__mempcpy_chk@plt+0x209c>
   12d10:	cmp	r0, #2
   12d14:	mov	r1, #0
   12d18:	movwcc	r1, #1
   12d1c:	ldr	r2, [sp, #60]	; 0x3c
   12d20:	eor	r2, r2, #1
   12d24:	orrs	r1, r2, r1
   12d28:	ldr	r4, [sp, #24]
   12d2c:	bne	12dec <__mempcpy_chk@plt+0x1d08>
   12d30:	ldr	r1, [sp, #44]	; 0x2c
   12d34:	ldr	r2, [sp, #20]
   12d38:	add	r1, r2, r1
   12d3c:	mov	r2, #1
   12d40:	ldrb	r3, [r1, r2]
   12d44:	sub	r3, r3, #91	; 0x5b
   12d48:	cmp	r3, #33	; 0x21
   12d4c:	bhi	12de0 <__mempcpy_chk@plt+0x1cfc>
   12d50:	add	r7, pc, #0
   12d54:	ldr	pc, [r7, r3, lsl #2]
   12d58:	andeq	r3, r1, r0, lsr #5
   12d5c:	andeq	r3, r1, r0, lsr #5
   12d60:	andeq	r2, r1, r0, ror #27
   12d64:	andeq	r3, r1, r0, lsr #5
   12d68:	andeq	r2, r1, r0, ror #27
   12d6c:	andeq	r3, r1, r0, lsr #5
   12d70:	andeq	r2, r1, r0, ror #27
   12d74:	andeq	r2, r1, r0, ror #27
   12d78:	andeq	r2, r1, r0, ror #27
   12d7c:	andeq	r2, r1, r0, ror #27
   12d80:	andeq	r2, r1, r0, ror #27
   12d84:	andeq	r2, r1, r0, ror #27
   12d88:	andeq	r2, r1, r0, ror #27
   12d8c:	andeq	r2, r1, r0, ror #27
   12d90:	andeq	r2, r1, r0, ror #27
   12d94:	andeq	r2, r1, r0, ror #27
   12d98:	andeq	r2, r1, r0, ror #27
   12d9c:	andeq	r2, r1, r0, ror #27
   12da0:	andeq	r2, r1, r0, ror #27
   12da4:	andeq	r2, r1, r0, ror #27
   12da8:	andeq	r2, r1, r0, ror #27
   12dac:	andeq	r2, r1, r0, ror #27
   12db0:	andeq	r2, r1, r0, ror #27
   12db4:	andeq	r2, r1, r0, ror #27
   12db8:	andeq	r2, r1, r0, ror #27
   12dbc:	andeq	r2, r1, r0, ror #27
   12dc0:	andeq	r2, r1, r0, ror #27
   12dc4:	andeq	r2, r1, r0, ror #27
   12dc8:	andeq	r2, r1, r0, ror #27
   12dcc:	andeq	r2, r1, r0, ror #27
   12dd0:	andeq	r2, r1, r0, ror #27
   12dd4:	andeq	r2, r1, r0, ror #27
   12dd8:	andeq	r2, r1, r0, ror #27
   12ddc:	andeq	r3, r1, r0, lsr #5
   12de0:	add	r2, r2, #1
   12de4:	cmp	r2, r0
   12de8:	bcc	12d40 <__mempcpy_chk@plt+0x1c5c>
   12dec:	ldr	r7, [sp, #44]	; 0x2c
   12df0:	add	r7, r0, r7
   12df4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12df8:	bl	10f10 <iswprint@plt>
   12dfc:	cmp	r0, #0
   12e00:	movwne	r0, #1
   12e04:	and	r9, r9, r0
   12e08:	sub	r4, fp, #40	; 0x28
   12e0c:	mov	r0, r4
   12e10:	bl	10ed4 <mbsinit@plt>
   12e14:	ldr	lr, [sp, #28]
   12e18:	cmp	r0, #0
   12e1c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12e20:	beq	12cd8 <__mempcpy_chk@plt+0x1bf4>
   12e24:	b	131c0 <__mempcpy_chk@plt+0x20dc>
   12e28:	ldr	r0, [sp, #32]
   12e2c:	cmp	r0, #0
   12e30:	beq	12ec8 <__mempcpy_chk@plt+0x1de4>
   12e34:	add	r0, r6, #2
   12e38:	cmp	r0, lr
   12e3c:	bcs	12ec8 <__mempcpy_chk@plt+0x1de4>
   12e40:	add	r1, ip, r6
   12e44:	ldrb	r1, [r1, #1]
   12e48:	cmp	r1, #63	; 0x3f
   12e4c:	bne	12ec8 <__mempcpy_chk@plt+0x1de4>
   12e50:	ldrb	r9, [ip, r0]
   12e54:	sub	r2, r9, #33	; 0x21
   12e58:	cmp	r2, #29
   12e5c:	bhi	12ec8 <__mempcpy_chk@plt+0x1de4>
   12e60:	mov	r3, #1
   12e64:	movw	r1, #20929	; 0x51c1
   12e68:	movt	r1, #14336	; 0x3800
   12e6c:	tst	r1, r3, lsl r2
   12e70:	beq	12ec8 <__mempcpy_chk@plt+0x1de4>
   12e74:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12e78:	tst	r1, #1
   12e7c:	bne	132a8 <__mempcpy_chk@plt+0x21c4>
   12e80:	cmp	r8, r4
   12e84:	movcc	r1, #63	; 0x3f
   12e88:	strbcc	r1, [r7, r8]
   12e8c:	add	r2, r8, #1
   12e90:	cmp	r2, r4
   12e94:	movcc	r1, #34	; 0x22
   12e98:	strbcc	r1, [r7, r2]
   12e9c:	add	r2, r8, #2
   12ea0:	cmp	r2, r4
   12ea4:	movcc	r1, #34	; 0x22
   12ea8:	strbcc	r1, [r7, r2]
   12eac:	add	r2, r8, #3
   12eb0:	cmp	r2, r4
   12eb4:	movcc	r1, #63	; 0x3f
   12eb8:	strbcc	r1, [r7, r2]
   12ebc:	add	r8, r8, #4
   12ec0:	mov	r6, r0
   12ec4:	mov	r5, r9
   12ec8:	mov	r9, #0
   12ecc:	b	1291c <__mempcpy_chk@plt+0x1838>
   12ed0:	add	r1, r2, r6
   12ed4:	str	r1, [sp, #44]	; 0x2c
   12ed8:	add	r1, r6, #1
   12edc:	mov	r3, #0
   12ee0:	ldr	lr, [sp, #28]
   12ee4:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12ee8:	tst	r0, #1
   12eec:	bne	12fe0 <__mempcpy_chk@plt+0x1efc>
   12ef0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12ef4:	tst	r2, #1
   12ef8:	bne	132a8 <__mempcpy_chk@plt+0x21c4>
   12efc:	cmp	r6, #2
   12f00:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12f04:	movwne	r3, #1
   12f08:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12f0c:	orr	r3, r3, r2
   12f10:	tst	r3, #1
   12f14:	bne	12f50 <__mempcpy_chk@plt+0x1e6c>
   12f18:	cmp	r8, r4
   12f1c:	movcc	r2, #39	; 0x27
   12f20:	strbcc	r2, [r7, r8]
   12f24:	add	r3, r8, #1
   12f28:	cmp	r3, r4
   12f2c:	movcc	r2, #36	; 0x24
   12f30:	strbcc	r2, [r7, r3]
   12f34:	add	r3, r8, #2
   12f38:	cmp	r3, r4
   12f3c:	movcc	r2, #39	; 0x27
   12f40:	strbcc	r2, [r7, r3]
   12f44:	add	r8, r8, #3
   12f48:	mov	r2, #1
   12f4c:	str	r2, [fp, #-56]	; 0xffffffc8
   12f50:	cmp	r8, r4
   12f54:	movcc	r2, #92	; 0x5c
   12f58:	strbcc	r2, [r7, r8]
   12f5c:	add	r3, r8, #1
   12f60:	cmp	r3, r4
   12f64:	bcs	12f84 <__mempcpy_chk@plt+0x1ea0>
   12f68:	and	r7, r5, #192	; 0xc0
   12f6c:	mov	r2, #48	; 0x30
   12f70:	orr	r7, r2, r7, lsr #6
   12f74:	ldr	r6, [sp, #80]	; 0x50
   12f78:	strb	r7, [r6, r3]
   12f7c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12f80:	ldr	r7, [sp, #80]	; 0x50
   12f84:	add	r3, r8, #2
   12f88:	cmp	r3, r4
   12f8c:	bcs	12fac <__mempcpy_chk@plt+0x1ec8>
   12f90:	lsr	r7, r5, #3
   12f94:	mov	r2, #6
   12f98:	bfi	r7, r2, #3, #29
   12f9c:	ldr	r6, [sp, #80]	; 0x50
   12fa0:	strb	r7, [r6, r3]
   12fa4:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12fa8:	ldr	r7, [sp, #80]	; 0x50
   12fac:	mov	r2, #6
   12fb0:	bfi	r5, r2, #3, #29
   12fb4:	add	r8, r8, #3
   12fb8:	mov	r3, #1
   12fbc:	b	13004 <__mempcpy_chk@plt+0x1f20>
   12fc0:	ldr	r7, [sp, #80]	; 0x50
   12fc4:	cmp	r8, r4
   12fc8:	strbcc	r5, [r7, r8]
   12fcc:	ldrb	r5, [ip, r1]
   12fd0:	add	r1, r1, #1
   12fd4:	add	r8, r8, #1
   12fd8:	tst	r0, #1
   12fdc:	beq	12ef0 <__mempcpy_chk@plt+0x1e0c>
   12fe0:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12fe4:	tst	r2, #1
   12fe8:	beq	12ffc <__mempcpy_chk@plt+0x1f18>
   12fec:	cmp	r8, r4
   12ff0:	movcc	r2, #92	; 0x5c
   12ff4:	strbcc	r2, [r7, r8]
   12ff8:	add	r8, r8, #1
   12ffc:	mov	r2, #0
   13000:	str	r2, [fp, #-52]	; 0xffffffcc
   13004:	and	sl, r3, #1
   13008:	ldr	r2, [sp, #44]	; 0x2c
   1300c:	cmp	r2, r1
   13010:	bls	1311c <__mempcpy_chk@plt+0x2038>
   13014:	cmp	sl, #0
   13018:	movwne	sl, #1
   1301c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13020:	mvn	r7, r2
   13024:	orr	r7, r7, sl
   13028:	tst	r7, #1
   1302c:	bne	12fc0 <__mempcpy_chk@plt+0x1edc>
   13030:	cmp	r8, r4
   13034:	ldrcc	r7, [sp, #80]	; 0x50
   13038:	movcc	r2, #39	; 0x27
   1303c:	strbcc	r2, [r7, r8]
   13040:	add	r7, r8, #1
   13044:	cmp	r7, r4
   13048:	ldrcc	r6, [sp, #80]	; 0x50
   1304c:	movcc	r2, #39	; 0x27
   13050:	strbcc	r2, [r6, r7]
   13054:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   13058:	add	r8, r8, #2
   1305c:	mov	r2, #0
   13060:	str	r2, [fp, #-56]	; 0xffffffc8
   13064:	b	12fc0 <__mempcpy_chk@plt+0x1edc>
   13068:	cmp	r8, r4
   1306c:	movcc	r0, #39	; 0x27
   13070:	strbcc	r0, [r7, r8]
   13074:	add	r0, r8, #1
   13078:	cmp	r0, r4
   1307c:	movcc	r1, #36	; 0x24
   13080:	strbcc	r1, [r7, r0]
   13084:	add	r0, r8, #2
   13088:	cmp	r0, r4
   1308c:	movcc	r1, #39	; 0x27
   13090:	strbcc	r1, [r7, r0]
   13094:	add	r0, r8, #3
   13098:	mov	r2, #1
   1309c:	cmp	r0, r4
   130a0:	movcc	r1, #92	; 0x5c
   130a4:	strbcc	r1, [r7, r0]
   130a8:	str	r2, [fp, #-56]	; 0xffffffc8
   130ac:	add	r8, r0, #1
   130b0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   130b4:	cmp	r1, #2
   130b8:	beq	1310c <__mempcpy_chk@plt+0x2028>
   130bc:	add	r1, r6, #1
   130c0:	mov	r9, #0
   130c4:	mov	sl, #1
   130c8:	mov	r5, #48	; 0x30
   130cc:	cmp	r1, lr
   130d0:	bcs	1291c <__mempcpy_chk@plt+0x1838>
   130d4:	ldrb	r1, [ip, r1]
   130d8:	sub	r1, r1, #48	; 0x30
   130dc:	uxtb	r1, r1
   130e0:	cmp	r1, #9
   130e4:	bhi	1291c <__mempcpy_chk@plt+0x1838>
   130e8:	cmp	r8, r4
   130ec:	movcc	r1, #48	; 0x30
   130f0:	strbcc	r1, [r7, r8]
   130f4:	add	r1, r0, #2
   130f8:	cmp	r1, r4
   130fc:	movcc	r2, #48	; 0x30
   13100:	strbcc	r2, [r7, r1]
   13104:	add	r8, r0, #3
   13108:	b	1291c <__mempcpy_chk@plt+0x1838>
   1310c:	mov	r0, #48	; 0x30
   13110:	mov	sl, #1
   13114:	mov	r9, #0
   13118:	b	12bc8 <__mempcpy_chk@plt+0x1ae4>
   1311c:	sub	r6, r1, #1
   13120:	cmp	sl, #0
   13124:	movwne	sl, #1
   13128:	mov	r0, r5
   1312c:	cmp	sl, #0
   13130:	bne	13170 <__mempcpy_chk@plt+0x208c>
   13134:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13138:	tst	r1, #1
   1313c:	beq	13170 <__mempcpy_chk@plt+0x208c>
   13140:	cmp	r8, r4
   13144:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13148:	movcc	r1, #39	; 0x27
   1314c:	strbcc	r1, [r7, r8]
   13150:	add	r1, r8, #1
   13154:	cmp	r1, r4
   13158:	movcc	r2, #39	; 0x27
   1315c:	strbcc	r2, [r7, r1]
   13160:	add	r8, r8, #2
   13164:	mov	r1, #0
   13168:	str	r1, [fp, #-56]	; 0xffffffc8
   1316c:	b	12c54 <__mempcpy_chk@plt+0x1b70>
   13170:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13174:	b	12c54 <__mempcpy_chk@plt+0x1b70>
   13178:	mov	r9, #0
   1317c:	b	131b8 <__mempcpy_chk@plt+0x20d4>
   13180:	mov	r9, #0
   13184:	cmp	r7, lr
   13188:	bcs	131b8 <__mempcpy_chk@plt+0x20d4>
   1318c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13190:	ldr	r7, [sp, #44]	; 0x2c
   13194:	ldr	r0, [sp, #20]
   13198:	ldrb	r0, [r0, r7]
   1319c:	cmp	r0, #0
   131a0:	beq	131c0 <__mempcpy_chk@plt+0x20dc>
   131a4:	add	r7, r7, #1
   131a8:	add	r0, r6, r7
   131ac:	cmp	r0, lr
   131b0:	bcc	13194 <__mempcpy_chk@plt+0x20b0>
   131b4:	b	131c0 <__mempcpy_chk@plt+0x20dc>
   131b8:	ldr	ip, [fp, #-84]	; 0xffffffac
   131bc:	ldr	r7, [sp, #44]	; 0x2c
   131c0:	mov	r1, r7
   131c4:	ldr	r7, [sp, #80]	; 0x50
   131c8:	b	12af0 <__mempcpy_chk@plt+0x1a0c>
   131cc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   131d0:	eor	r0, r1, #2
   131d4:	orr	r0, r0, r8
   131d8:	clz	r0, r0
   131dc:	lsr	r0, r0, #5
   131e0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   131e4:	tst	r2, r0
   131e8:	bne	132a8 <__mempcpy_chk@plt+0x21c4>
   131ec:	cmp	r1, #2
   131f0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   131f4:	movwne	r0, #1
   131f8:	orr	r0, r2, r0
   131fc:	tst	r0, #1
   13200:	ldreq	r0, [sp, #56]	; 0x38
   13204:	eoreq	r0, r0, #1
   13208:	tsteq	r0, #1
   1320c:	bne	13240 <__mempcpy_chk@plt+0x215c>
   13210:	mov	r9, lr
   13214:	tst	r5, #1
   13218:	bne	13310 <__mempcpy_chk@plt+0x222c>
   1321c:	ldr	r0, [sp, #72]	; 0x48
   13220:	cmp	r0, #0
   13224:	beq	13240 <__mempcpy_chk@plt+0x215c>
   13228:	mov	r5, #0
   1322c:	cmp	r4, #0
   13230:	ldr	r0, [sp, #84]	; 0x54
   13234:	mov	sl, r2
   13238:	ldr	r6, [sp, #72]	; 0x48
   1323c:	beq	123d8 <__mempcpy_chk@plt+0x12f4>
   13240:	ldr	r1, [sp, #92]	; 0x5c
   13244:	clz	r0, r1
   13248:	lsr	r0, r0, #5
   1324c:	orr	r0, r0, r2
   13250:	tst	r0, #1
   13254:	bne	13280 <__mempcpy_chk@plt+0x219c>
   13258:	ldrb	r0, [r1]
   1325c:	cmp	r0, #0
   13260:	beq	13280 <__mempcpy_chk@plt+0x219c>
   13264:	add	r1, r1, #1
   13268:	cmp	r8, r4
   1326c:	strbcc	r0, [r7, r8]
   13270:	add	r8, r8, #1
   13274:	ldrb	r0, [r1], #1
   13278:	cmp	r0, #0
   1327c:	bne	13268 <__mempcpy_chk@plt+0x2184>
   13280:	cmp	r8, r4
   13284:	movcc	r0, #0
   13288:	strbcc	r0, [r7, r8]
   1328c:	b	13304 <__mempcpy_chk@plt+0x2220>
   13290:	ldr	ip, [fp, #-84]	; 0xffffffac
   13294:	mov	lr, r4
   13298:	mov	r4, r5
   1329c:	b	132a8 <__mempcpy_chk@plt+0x21c4>
   132a0:	ldr	r7, [sp, #80]	; 0x50
   132a4:	ldr	ip, [fp, #-84]	; 0xffffffac
   132a8:	mov	r0, #0
   132ac:	ldr	r1, [fp, #12]
   132b0:	bic	r1, r1, #2
   132b4:	ldr	r2, [sp, #84]	; 0x54
   132b8:	tst	r2, #1
   132bc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   132c0:	mov	r2, r3
   132c4:	movwne	r2, #4
   132c8:	cmp	r3, #2
   132cc:	movne	r2, r3
   132d0:	str	r2, [sp]
   132d4:	str	r1, [sp, #4]
   132d8:	str	r0, [sp, #8]
   132dc:	ldr	r0, [sp, #68]	; 0x44
   132e0:	str	r0, [sp, #12]
   132e4:	ldr	r0, [sp, #76]	; 0x4c
   132e8:	str	r0, [sp, #16]
   132ec:	mov	r0, r7
   132f0:	mov	r1, r4
   132f4:	mov	r2, ip
   132f8:	mov	r3, lr
   132fc:	bl	12350 <__mempcpy_chk@plt+0x126c>
   13300:	mov	r8, r0
   13304:	mov	r0, r8
   13308:	sub	sp, fp, #28
   1330c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13310:	mov	r0, #5
   13314:	str	r0, [sp]
   13318:	ldr	r0, [fp, #12]
   1331c:	str	r0, [sp, #4]
   13320:	ldr	r0, [fp, #16]
   13324:	str	r0, [sp, #8]
   13328:	ldr	r0, [sp, #68]	; 0x44
   1332c:	str	r0, [sp, #12]
   13330:	ldr	r0, [sp, #76]	; 0x4c
   13334:	str	r0, [sp, #16]
   13338:	mov	r0, r7
   1333c:	ldr	r1, [sp, #72]	; 0x48
   13340:	ldr	r2, [fp, #-84]	; 0xffffffac
   13344:	mov	r3, r9
   13348:	b	132fc <__mempcpy_chk@plt+0x2218>
   1334c:	bl	110b4 <abort@plt>
   13350:	mov	r3, r2
   13354:	mov	r2, #0
   13358:	b	1335c <__mempcpy_chk@plt+0x2278>
   1335c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13360:	add	fp, sp, #28
   13364:	sub	sp, sp, #36	; 0x24
   13368:	mov	r4, r2
   1336c:	str	r2, [sp, #24]
   13370:	mov	r5, r1
   13374:	mov	r6, r0
   13378:	str	r0, [sp, #20]
   1337c:	movw	r8, #29032	; 0x7168
   13380:	movt	r8, #2
   13384:	cmp	r3, #0
   13388:	movne	r8, r3
   1338c:	bl	10ff4 <__errno_location@plt>
   13390:	str	r0, [sp, #28]
   13394:	ldm	r8, {r3, r9}
   13398:	ldr	r1, [r8, #40]	; 0x28
   1339c:	ldr	r2, [r8, #44]	; 0x2c
   133a0:	ldr	r7, [r0]
   133a4:	str	r7, [sp, #32]
   133a8:	add	sl, r8, #8
   133ac:	cmp	r4, #0
   133b0:	orreq	r9, r9, #1
   133b4:	stm	sp, {r3, r9, sl}
   133b8:	str	r1, [sp, #12]
   133bc:	str	r2, [sp, #16]
   133c0:	mov	r0, #0
   133c4:	mov	r1, #0
   133c8:	mov	r2, r6
   133cc:	mov	r3, r5
   133d0:	mov	r7, r5
   133d4:	bl	12350 <__mempcpy_chk@plt+0x126c>
   133d8:	mov	r5, r0
   133dc:	add	r4, r0, #1
   133e0:	mov	r0, r4
   133e4:	bl	14580 <__mempcpy_chk@plt+0x349c>
   133e8:	mov	r6, r0
   133ec:	ldr	r0, [r8]
   133f0:	ldr	r1, [r8, #40]	; 0x28
   133f4:	ldr	r2, [r8, #44]	; 0x2c
   133f8:	stm	sp, {r0, r9, sl}
   133fc:	str	r1, [sp, #12]
   13400:	str	r2, [sp, #16]
   13404:	mov	r0, r6
   13408:	mov	r1, r4
   1340c:	ldr	r2, [sp, #20]
   13410:	mov	r3, r7
   13414:	bl	12350 <__mempcpy_chk@plt+0x126c>
   13418:	ldr	r0, [sp, #24]
   1341c:	ldr	r1, [sp, #32]
   13420:	ldr	r2, [sp, #28]
   13424:	str	r1, [r2]
   13428:	cmp	r0, #0
   1342c:	strne	r5, [r0]
   13430:	mov	r0, r6
   13434:	sub	sp, fp, #28
   13438:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1343c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13440:	add	fp, sp, #24
   13444:	movw	r8, #28920	; 0x70f8
   13448:	movt	r8, #2
   1344c:	ldr	r4, [r8]
   13450:	movw	r5, #28924	; 0x70fc
   13454:	movt	r5, #2
   13458:	ldr	r0, [r5]
   1345c:	cmp	r0, #2
   13460:	blt	1348c <__mempcpy_chk@plt+0x23a8>
   13464:	add	r7, r4, #12
   13468:	mov	r6, #0
   1346c:	ldr	r0, [r7, r6, lsl #3]
   13470:	bl	12048 <__mempcpy_chk@plt+0xf64>
   13474:	add	r0, r6, #1
   13478:	ldr	r1, [r5]
   1347c:	add	r2, r6, #2
   13480:	cmp	r2, r1
   13484:	mov	r6, r0
   13488:	blt	1346c <__mempcpy_chk@plt+0x2388>
   1348c:	ldr	r0, [r4, #4]
   13490:	movw	r7, #29080	; 0x7198
   13494:	movt	r7, #2
   13498:	cmp	r0, r7
   1349c:	beq	134b4 <__mempcpy_chk@plt+0x23d0>
   134a0:	bl	12048 <__mempcpy_chk@plt+0xf64>
   134a4:	movw	r0, #28928	; 0x7100
   134a8:	movt	r0, #2
   134ac:	mov	r6, #256	; 0x100
   134b0:	strd	r6, [r0]
   134b4:	movw	r6, #28928	; 0x7100
   134b8:	movt	r6, #2
   134bc:	cmp	r4, r6
   134c0:	beq	134d0 <__mempcpy_chk@plt+0x23ec>
   134c4:	mov	r0, r4
   134c8:	bl	12048 <__mempcpy_chk@plt+0xf64>
   134cc:	str	r6, [r8]
   134d0:	mov	r0, #1
   134d4:	str	r0, [r5]
   134d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   134dc:	movw	r3, #29032	; 0x7168
   134e0:	movt	r3, #2
   134e4:	mvn	r2, #0
   134e8:	b	134ec <__mempcpy_chk@plt+0x2408>
   134ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134f0:	add	fp, sp, #28
   134f4:	sub	sp, sp, #44	; 0x2c
   134f8:	mov	r7, r3
   134fc:	str	r2, [sp, #36]	; 0x24
   13500:	str	r1, [sp, #32]
   13504:	mov	r5, r0
   13508:	bl	10ff4 <__errno_location@plt>
   1350c:	cmp	r5, #0
   13510:	blt	1367c <__mempcpy_chk@plt+0x2598>
   13514:	cmn	r5, #-2147483647	; 0x80000001
   13518:	beq	1367c <__mempcpy_chk@plt+0x2598>
   1351c:	movw	r4, #28920	; 0x70f8
   13520:	movt	r4, #2
   13524:	ldr	r6, [r4]
   13528:	str	r0, [sp, #28]
   1352c:	ldr	r0, [r0]
   13530:	str	r0, [sp, #24]
   13534:	movw	r8, #28924	; 0x70fc
   13538:	movt	r8, #2
   1353c:	ldr	r1, [r8]
   13540:	cmp	r1, r5
   13544:	ble	13550 <__mempcpy_chk@plt+0x246c>
   13548:	mov	sl, r6
   1354c:	b	135b8 <__mempcpy_chk@plt+0x24d4>
   13550:	str	r1, [fp, #-32]	; 0xffffffe0
   13554:	mov	r0, #8
   13558:	str	r0, [sp]
   1355c:	movw	r9, #28928	; 0x7100
   13560:	movt	r9, #2
   13564:	subs	r0, r6, r9
   13568:	movne	r0, r6
   1356c:	add	r2, r5, #1
   13570:	sub	r2, r2, r1
   13574:	sub	r1, fp, #32
   13578:	mvn	r3, #-2147483648	; 0x80000000
   1357c:	bl	14668 <__mempcpy_chk@plt+0x3584>
   13580:	mov	sl, r0
   13584:	str	r0, [r4]
   13588:	cmp	r6, r9
   1358c:	ldrdeq	r0, [r9]
   13590:	stmeq	sl, {r0, r1}
   13594:	ldr	r1, [r8]
   13598:	add	r0, sl, r1, lsl #3
   1359c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   135a0:	sub	r1, r2, r1
   135a4:	lsl	r2, r1, #3
   135a8:	mov	r1, #0
   135ac:	bl	11018 <memset@plt>
   135b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   135b4:	str	r0, [r8]
   135b8:	mov	r9, sl
   135bc:	ldr	r6, [r9, r5, lsl #3]!
   135c0:	ldr	r4, [r9, #4]!
   135c4:	ldm	r7, {r0, r1}
   135c8:	ldr	r2, [r7, #40]	; 0x28
   135cc:	ldr	r3, [r7, #44]	; 0x2c
   135d0:	orr	r8, r1, #1
   135d4:	add	r1, r7, #8
   135d8:	stm	sp, {r0, r8}
   135dc:	str	r1, [sp, #20]
   135e0:	add	r0, sp, #8
   135e4:	stm	r0, {r1, r2, r3}
   135e8:	mov	r0, r4
   135ec:	mov	r1, r6
   135f0:	ldr	r2, [sp, #32]
   135f4:	ldr	r3, [sp, #36]	; 0x24
   135f8:	bl	12350 <__mempcpy_chk@plt+0x126c>
   135fc:	cmp	r6, r0
   13600:	bhi	13664 <__mempcpy_chk@plt+0x2580>
   13604:	add	r6, r0, #1
   13608:	str	r6, [sl, r5, lsl #3]
   1360c:	movw	r0, #29080	; 0x7198
   13610:	movt	r0, #2
   13614:	cmp	r4, r0
   13618:	beq	13624 <__mempcpy_chk@plt+0x2540>
   1361c:	mov	r0, r4
   13620:	bl	12048 <__mempcpy_chk@plt+0xf64>
   13624:	mov	r0, r6
   13628:	bl	14580 <__mempcpy_chk@plt+0x349c>
   1362c:	mov	r4, r0
   13630:	str	r0, [r9]
   13634:	ldr	r0, [r7]
   13638:	ldr	r1, [r7, #40]	; 0x28
   1363c:	ldr	r2, [r7, #44]	; 0x2c
   13640:	stm	sp, {r0, r8}
   13644:	ldr	r0, [sp, #20]
   13648:	add	r3, sp, #8
   1364c:	stm	r3, {r0, r1, r2}
   13650:	mov	r0, r4
   13654:	mov	r1, r6
   13658:	ldr	r2, [sp, #32]
   1365c:	ldr	r3, [sp, #36]	; 0x24
   13660:	bl	12350 <__mempcpy_chk@plt+0x126c>
   13664:	ldr	r0, [sp, #28]
   13668:	ldr	r1, [sp, #24]
   1366c:	str	r1, [r0]
   13670:	mov	r0, r4
   13674:	sub	sp, fp, #28
   13678:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1367c:	bl	110b4 <abort@plt>
   13680:	movw	r3, #29032	; 0x7168
   13684:	movt	r3, #2
   13688:	b	134ec <__mempcpy_chk@plt+0x2408>
   1368c:	mov	r1, r0
   13690:	mov	r0, #0
   13694:	b	134dc <__mempcpy_chk@plt+0x23f8>
   13698:	mov	r2, r1
   1369c:	mov	r1, r0
   136a0:	mov	r0, #0
   136a4:	b	13680 <__mempcpy_chk@plt+0x259c>
   136a8:	push	{r4, r5, r6, sl, fp, lr}
   136ac:	add	fp, sp, #16
   136b0:	sub	sp, sp, #48	; 0x30
   136b4:	mov	r4, r2
   136b8:	mov	r5, r0
   136bc:	mov	r6, sp
   136c0:	mov	r0, r6
   136c4:	bl	136e4 <__mempcpy_chk@plt+0x2600>
   136c8:	mov	r0, r5
   136cc:	mov	r1, r4
   136d0:	mvn	r2, #0
   136d4:	mov	r3, r6
   136d8:	bl	134ec <__mempcpy_chk@plt+0x2408>
   136dc:	sub	sp, fp, #16
   136e0:	pop	{r4, r5, r6, sl, fp, pc}
   136e4:	vmov.i32	q8, #0	; 0x00000000
   136e8:	mov	r2, #32
   136ec:	mov	r3, r0
   136f0:	vst1.32	{d16-d17}, [r3], r2
   136f4:	vst1.32	{d16-d17}, [r3]
   136f8:	add	r2, r0, #16
   136fc:	vst1.32	{d16-d17}, [r2]
   13700:	cmp	r1, #10
   13704:	strne	r1, [r0]
   13708:	bxne	lr
   1370c:	push	{fp, lr}
   13710:	mov	fp, sp
   13714:	bl	110b4 <abort@plt>
   13718:	push	{r4, r5, r6, r7, fp, lr}
   1371c:	add	fp, sp, #16
   13720:	sub	sp, sp, #48	; 0x30
   13724:	mov	r4, r3
   13728:	mov	r5, r2
   1372c:	mov	r6, r0
   13730:	mov	r7, sp
   13734:	mov	r0, r7
   13738:	bl	136e4 <__mempcpy_chk@plt+0x2600>
   1373c:	mov	r0, r6
   13740:	mov	r1, r5
   13744:	mov	r2, r4
   13748:	mov	r3, r7
   1374c:	bl	134ec <__mempcpy_chk@plt+0x2408>
   13750:	sub	sp, fp, #16
   13754:	pop	{r4, r5, r6, r7, fp, pc}
   13758:	mov	r2, r1
   1375c:	mov	r1, r0
   13760:	mov	r0, #0
   13764:	b	136a8 <__mempcpy_chk@plt+0x25c4>
   13768:	mov	r3, r2
   1376c:	mov	r2, r1
   13770:	mov	r1, r0
   13774:	mov	r0, #0
   13778:	b	13718 <__mempcpy_chk@plt+0x2634>
   1377c:	push	{r4, r5, r6, sl, fp, lr}
   13780:	add	fp, sp, #16
   13784:	sub	sp, sp, #48	; 0x30
   13788:	mov	r4, r1
   1378c:	mov	r5, r0
   13790:	mov	r0, #32
   13794:	movw	r1, #29032	; 0x7168
   13798:	movt	r1, #2
   1379c:	add	r3, r1, #16
   137a0:	vld1.64	{d16-d17}, [r1], r0
   137a4:	mov	r6, sp
   137a8:	vld1.64	{d18-d19}, [r3]
   137ac:	add	r3, r6, #16
   137b0:	vld1.64	{d20-d21}, [r1]
   137b4:	vst1.64	{d18-d19}, [r3]
   137b8:	mov	r1, r6
   137bc:	vst1.64	{d16-d17}, [r1], r0
   137c0:	vst1.64	{d20-d21}, [r1]
   137c4:	mov	r0, r6
   137c8:	mov	r1, r2
   137cc:	mov	r2, #1
   137d0:	bl	12244 <__mempcpy_chk@plt+0x1160>
   137d4:	mov	r0, #0
   137d8:	mov	r1, r5
   137dc:	mov	r2, r4
   137e0:	mov	r3, r6
   137e4:	bl	134ec <__mempcpy_chk@plt+0x2408>
   137e8:	sub	sp, fp, #16
   137ec:	pop	{r4, r5, r6, sl, fp, pc}
   137f0:	mov	r2, r1
   137f4:	mvn	r1, #0
   137f8:	b	1377c <__mempcpy_chk@plt+0x2698>
   137fc:	mov	r1, #58	; 0x3a
   13800:	b	137f0 <__mempcpy_chk@plt+0x270c>
   13804:	mov	r2, #58	; 0x3a
   13808:	b	1377c <__mempcpy_chk@plt+0x2698>
   1380c:	push	{r4, r5, r6, sl, fp, lr}
   13810:	add	fp, sp, #16
   13814:	sub	sp, sp, #48	; 0x30
   13818:	mov	r4, r2
   1381c:	mov	r5, r0
   13820:	mov	r6, sp
   13824:	mov	r0, r6
   13828:	bl	136e4 <__mempcpy_chk@plt+0x2600>
   1382c:	mov	r0, r6
   13830:	mov	r1, #58	; 0x3a
   13834:	mov	r2, #1
   13838:	bl	12244 <__mempcpy_chk@plt+0x1160>
   1383c:	mov	r0, r5
   13840:	mov	r1, r4
   13844:	mvn	r2, #0
   13848:	mov	r3, r6
   1384c:	bl	134ec <__mempcpy_chk@plt+0x2408>
   13850:	sub	sp, fp, #16
   13854:	pop	{r4, r5, r6, sl, fp, pc}
   13858:	push	{fp, lr}
   1385c:	mov	fp, sp
   13860:	sub	sp, sp, #8
   13864:	mvn	ip, #0
   13868:	str	ip, [sp]
   1386c:	bl	13878 <__mempcpy_chk@plt+0x2794>
   13870:	mov	sp, fp
   13874:	pop	{fp, pc}
   13878:	push	{r4, r5, r6, r7, fp, lr}
   1387c:	add	fp, sp, #16
   13880:	sub	sp, sp, #48	; 0x30
   13884:	mov	r7, r3
   13888:	mov	r5, r0
   1388c:	mov	r0, #32
   13890:	movw	r3, #29032	; 0x7168
   13894:	movt	r3, #2
   13898:	add	r4, r3, #16
   1389c:	vld1.64	{d16-d17}, [r3], r0
   138a0:	mov	r6, sp
   138a4:	vld1.64	{d18-d19}, [r4]
   138a8:	add	r4, r6, #16
   138ac:	vld1.64	{d20-d21}, [r3]
   138b0:	vst1.64	{d18-d19}, [r4]
   138b4:	mov	r3, r6
   138b8:	vst1.64	{d16-d17}, [r3], r0
   138bc:	vst1.64	{d20-d21}, [r3]
   138c0:	mov	r0, r6
   138c4:	bl	1229c <__mempcpy_chk@plt+0x11b8>
   138c8:	ldr	r2, [fp, #8]
   138cc:	mov	r0, r5
   138d0:	mov	r1, r7
   138d4:	mov	r3, r6
   138d8:	bl	134ec <__mempcpy_chk@plt+0x2408>
   138dc:	sub	sp, fp, #16
   138e0:	pop	{r4, r5, r6, r7, fp, pc}
   138e4:	mov	r3, r2
   138e8:	mov	r2, r1
   138ec:	mov	r1, r0
   138f0:	mov	r0, #0
   138f4:	b	13858 <__mempcpy_chk@plt+0x2774>
   138f8:	push	{fp, lr}
   138fc:	mov	fp, sp
   13900:	sub	sp, sp, #8
   13904:	mov	ip, r2
   13908:	mov	r2, r1
   1390c:	mov	r1, r0
   13910:	str	r3, [sp]
   13914:	mov	r0, #0
   13918:	mov	r3, ip
   1391c:	bl	13878 <__mempcpy_chk@plt+0x2794>
   13920:	mov	sp, fp
   13924:	pop	{fp, pc}
   13928:	movw	r3, #28936	; 0x7108
   1392c:	movt	r3, #2
   13930:	b	134ec <__mempcpy_chk@plt+0x2408>
   13934:	mov	r2, r1
   13938:	mov	r1, r0
   1393c:	mov	r0, #0
   13940:	b	13928 <__mempcpy_chk@plt+0x2844>
   13944:	mvn	r2, #0
   13948:	b	13928 <__mempcpy_chk@plt+0x2844>
   1394c:	mov	r1, r0
   13950:	mov	r0, #0
   13954:	b	13944 <__mempcpy_chk@plt+0x2860>
   13958:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1395c:	add	fp, sp, #24
   13960:	sub	sp, sp, #16
   13964:	mov	r4, r1
   13968:	mov	r5, r0
   1396c:	mov	r7, #0
   13970:	mov	r0, #0
   13974:	mov	r1, r5
   13978:	mov	r2, #5
   1397c:	bl	10eec <dcgettext@plt>
   13980:	cmp	r0, r5
   13984:	beq	13990 <__mempcpy_chk@plt+0x28ac>
   13988:	sub	sp, fp, #24
   1398c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13990:	bl	14d84 <__mempcpy_chk@plt+0x3ca0>
   13994:	mov	r6, r0
   13998:	mov	r8, #56	; 0x38
   1399c:	mov	r0, #45	; 0x2d
   139a0:	stm	sp, {r0, r8}
   139a4:	str	r7, [sp, #8]
   139a8:	str	r7, [sp, #12]
   139ac:	mov	r0, r6
   139b0:	mov	r1, #85	; 0x55
   139b4:	mov	r2, #84	; 0x54
   139b8:	mov	r3, #70	; 0x46
   139bc:	bl	13a54 <__mempcpy_chk@plt+0x2970>
   139c0:	cmp	r0, #0
   139c4:	beq	139e0 <__mempcpy_chk@plt+0x28fc>
   139c8:	ldrb	r1, [r5]
   139cc:	movw	r2, #23422	; 0x5b7e
   139d0:	movt	r2, #1
   139d4:	movw	r0, #23426	; 0x5b82
   139d8:	movt	r0, #1
   139dc:	b	13a24 <__mempcpy_chk@plt+0x2940>
   139e0:	mov	r0, #48	; 0x30
   139e4:	mov	r1, #51	; 0x33
   139e8:	str	r8, [sp]
   139ec:	stmib	sp, {r0, r1}
   139f0:	str	r0, [sp, #12]
   139f4:	mov	r0, r6
   139f8:	mov	r1, #71	; 0x47
   139fc:	mov	r2, #66	; 0x42
   13a00:	mov	r3, #49	; 0x31
   13a04:	bl	13a54 <__mempcpy_chk@plt+0x2970>
   13a08:	cmp	r0, #0
   13a0c:	beq	13a34 <__mempcpy_chk@plt+0x2950>
   13a10:	ldrb	r1, [r5]
   13a14:	movw	r2, #23430	; 0x5b86
   13a18:	movt	r2, #1
   13a1c:	movw	r0, #23434	; 0x5b8a
   13a20:	movt	r0, #1
   13a24:	cmp	r1, #96	; 0x60
   13a28:	moveq	r0, r2
   13a2c:	sub	sp, fp, #24
   13a30:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13a34:	movw	r1, #23416	; 0x5b78
   13a38:	movt	r1, #1
   13a3c:	movw	r0, #23420	; 0x5b7c
   13a40:	movt	r0, #1
   13a44:	cmp	r4, #9
   13a48:	moveq	r0, r1
   13a4c:	sub	sp, fp, #24
   13a50:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13a54:	push	{r4, r5, r6, r7, fp, lr}
   13a58:	add	fp, sp, #16
   13a5c:	sub	sp, sp, #16
   13a60:	mov	r4, r3
   13a64:	mov	r5, r2
   13a68:	mov	r7, r1
   13a6c:	mov	r6, r0
   13a70:	mov	r0, r1
   13a74:	bl	14cc4 <__mempcpy_chk@plt+0x3be0>
   13a78:	ldrb	r1, [r6]
   13a7c:	cmp	r0, #0
   13a80:	andne	r1, r1, #223	; 0xdf
   13a84:	mov	r0, #0
   13a88:	cmp	r1, r7
   13a8c:	bne	13acc <__mempcpy_chk@plt+0x29e8>
   13a90:	cmp	r7, #0
   13a94:	moveq	r0, #1
   13a98:	subeq	sp, fp, #16
   13a9c:	popeq	{r4, r5, r6, r7, fp, pc}
   13aa0:	ldr	r0, [fp, #20]
   13aa4:	ldr	r1, [fp, #16]
   13aa8:	ldr	r2, [fp, #12]
   13aac:	ldr	r3, [fp, #8]
   13ab0:	str	r2, [sp]
   13ab4:	str	r1, [sp, #4]
   13ab8:	str	r0, [sp, #8]
   13abc:	mov	r0, r6
   13ac0:	mov	r1, r5
   13ac4:	mov	r2, r4
   13ac8:	bl	13ad4 <__mempcpy_chk@plt+0x29f0>
   13acc:	sub	sp, fp, #16
   13ad0:	pop	{r4, r5, r6, r7, fp, pc}
   13ad4:	push	{r4, r5, r6, r7, fp, lr}
   13ad8:	add	fp, sp, #16
   13adc:	sub	sp, sp, #8
   13ae0:	mov	r4, r3
   13ae4:	mov	r5, r2
   13ae8:	mov	r7, r1
   13aec:	mov	r6, r0
   13af0:	mov	r0, r1
   13af4:	bl	14cc4 <__mempcpy_chk@plt+0x3be0>
   13af8:	ldrb	r1, [r6, #1]
   13afc:	cmp	r0, #0
   13b00:	andne	r1, r1, #223	; 0xdf
   13b04:	mov	r0, #0
   13b08:	cmp	r1, r7
   13b0c:	bne	13b44 <__mempcpy_chk@plt+0x2a60>
   13b10:	cmp	r7, #0
   13b14:	moveq	r0, #1
   13b18:	subeq	sp, fp, #16
   13b1c:	popeq	{r4, r5, r6, r7, fp, pc}
   13b20:	ldr	r0, [fp, #16]
   13b24:	ldr	r1, [fp, #12]
   13b28:	ldr	r3, [fp, #8]
   13b2c:	str	r1, [sp]
   13b30:	str	r0, [sp, #4]
   13b34:	mov	r0, r6
   13b38:	mov	r1, r5
   13b3c:	mov	r2, r4
   13b40:	bl	13b4c <__mempcpy_chk@plt+0x2a68>
   13b44:	sub	sp, fp, #16
   13b48:	pop	{r4, r5, r6, r7, fp, pc}
   13b4c:	push	{r4, r5, r6, r7, fp, lr}
   13b50:	add	fp, sp, #16
   13b54:	sub	sp, sp, #8
   13b58:	mov	r4, r3
   13b5c:	mov	r5, r2
   13b60:	mov	r7, r1
   13b64:	mov	r6, r0
   13b68:	mov	r0, r1
   13b6c:	bl	14cc4 <__mempcpy_chk@plt+0x3be0>
   13b70:	ldrb	r1, [r6, #2]
   13b74:	cmp	r0, #0
   13b78:	andne	r1, r1, #223	; 0xdf
   13b7c:	mov	r0, #0
   13b80:	cmp	r1, r7
   13b84:	bne	13bb4 <__mempcpy_chk@plt+0x2ad0>
   13b88:	cmp	r7, #0
   13b8c:	moveq	r0, #1
   13b90:	subeq	sp, fp, #16
   13b94:	popeq	{r4, r5, r6, r7, fp, pc}
   13b98:	ldr	r0, [fp, #12]
   13b9c:	ldr	r3, [fp, #8]
   13ba0:	str	r0, [sp]
   13ba4:	mov	r0, r6
   13ba8:	mov	r1, r5
   13bac:	mov	r2, r4
   13bb0:	bl	13bbc <__mempcpy_chk@plt+0x2ad8>
   13bb4:	sub	sp, fp, #16
   13bb8:	pop	{r4, r5, r6, r7, fp, pc}
   13bbc:	push	{r4, r5, r6, r7, fp, lr}
   13bc0:	add	fp, sp, #16
   13bc4:	mov	r4, r3
   13bc8:	mov	r5, r2
   13bcc:	mov	r7, r1
   13bd0:	mov	r6, r0
   13bd4:	mov	r0, r1
   13bd8:	bl	14cc4 <__mempcpy_chk@plt+0x3be0>
   13bdc:	ldrb	r1, [r6, #3]
   13be0:	ldr	r3, [fp, #8]
   13be4:	cmp	r0, #0
   13be8:	andne	r1, r1, #223	; 0xdf
   13bec:	mov	r0, #0
   13bf0:	cmp	r1, r7
   13bf4:	popne	{r4, r5, r6, r7, fp, pc}
   13bf8:	cmp	r7, #0
   13bfc:	beq	13c14 <__mempcpy_chk@plt+0x2b30>
   13c00:	mov	r0, r6
   13c04:	mov	r1, r5
   13c08:	mov	r2, r4
   13c0c:	pop	{r4, r5, r6, r7, fp, lr}
   13c10:	b	13c1c <__mempcpy_chk@plt+0x2b38>
   13c14:	mov	r0, #1
   13c18:	pop	{r4, r5, r6, r7, fp, pc}
   13c1c:	push	{r4, r5, r6, r7, fp, lr}
   13c20:	add	fp, sp, #16
   13c24:	mov	r4, r3
   13c28:	mov	r5, r2
   13c2c:	mov	r7, r1
   13c30:	mov	r6, r0
   13c34:	mov	r0, r1
   13c38:	bl	14cc4 <__mempcpy_chk@plt+0x3be0>
   13c3c:	ldrb	r1, [r6, #4]
   13c40:	cmp	r0, #0
   13c44:	andne	r1, r1, #223	; 0xdf
   13c48:	mov	r0, #0
   13c4c:	cmp	r1, r7
   13c50:	popne	{r4, r5, r6, r7, fp, pc}
   13c54:	cmp	r7, #0
   13c58:	beq	13c70 <__mempcpy_chk@plt+0x2b8c>
   13c5c:	mov	r0, r6
   13c60:	mov	r1, r5
   13c64:	mov	r2, r4
   13c68:	pop	{r4, r5, r6, r7, fp, lr}
   13c6c:	b	13c78 <__mempcpy_chk@plt+0x2b94>
   13c70:	mov	r0, #1
   13c74:	pop	{r4, r5, r6, r7, fp, pc}
   13c78:	push	{r4, r5, r6, sl, fp, lr}
   13c7c:	add	fp, sp, #16
   13c80:	mov	r4, r2
   13c84:	mov	r6, r1
   13c88:	mov	r5, r0
   13c8c:	mov	r0, r1
   13c90:	bl	14cc4 <__mempcpy_chk@plt+0x3be0>
   13c94:	ldrb	r1, [r5, #5]
   13c98:	cmp	r0, #0
   13c9c:	andne	r1, r1, #223	; 0xdf
   13ca0:	mov	r0, #0
   13ca4:	cmp	r1, r6
   13ca8:	popne	{r4, r5, r6, sl, fp, pc}
   13cac:	cmp	r6, #0
   13cb0:	beq	13cc4 <__mempcpy_chk@plt+0x2be0>
   13cb4:	mov	r0, r5
   13cb8:	mov	r1, r4
   13cbc:	pop	{r4, r5, r6, sl, fp, lr}
   13cc0:	b	13ccc <__mempcpy_chk@plt+0x2be8>
   13cc4:	mov	r0, #1
   13cc8:	pop	{r4, r5, r6, sl, fp, pc}
   13ccc:	push	{r4, r5, fp, lr}
   13cd0:	add	fp, sp, #8
   13cd4:	mov	r5, r1
   13cd8:	mov	r4, r0
   13cdc:	mov	r0, r1
   13ce0:	bl	14cc4 <__mempcpy_chk@plt+0x3be0>
   13ce4:	ldrb	r1, [r4, #6]
   13ce8:	cmp	r0, #0
   13cec:	andne	r1, r1, #223	; 0xdf
   13cf0:	mov	r0, #0
   13cf4:	cmp	r1, r5
   13cf8:	popne	{r4, r5, fp, pc}
   13cfc:	cmp	r5, #0
   13d00:	beq	13d10 <__mempcpy_chk@plt+0x2c2c>
   13d04:	mov	r0, r4
   13d08:	pop	{r4, r5, fp, lr}
   13d0c:	b	13d18 <__mempcpy_chk@plt+0x2c34>
   13d10:	mov	r0, #1
   13d14:	pop	{r4, r5, fp, pc}
   13d18:	push	{r4, sl, fp, lr}
   13d1c:	add	fp, sp, #8
   13d20:	mov	r4, r0
   13d24:	mov	r0, #0
   13d28:	bl	14cc4 <__mempcpy_chk@plt+0x3be0>
   13d2c:	ldrb	r1, [r4, #7]
   13d30:	cmp	r0, #0
   13d34:	beq	13d4c <__mempcpy_chk@plt+0x2c68>
   13d38:	tst	r1, #223	; 0xdf
   13d3c:	moveq	r0, #1
   13d40:	popeq	{r4, sl, fp, pc}
   13d44:	mov	r0, #0
   13d48:	pop	{r4, sl, fp, pc}
   13d4c:	cmp	r1, #0
   13d50:	moveq	r0, #1
   13d54:	popeq	{r4, sl, fp, pc}
   13d58:	mov	r0, #0
   13d5c:	pop	{r4, sl, fp, pc}
   13d60:	push	{fp, lr}
   13d64:	mov	fp, sp
   13d68:	sub	sp, sp, #8
   13d6c:	str	r2, [sp, #4]
   13d70:	ldr	r2, [fp, #8]
   13d74:	str	r2, [sp]
   13d78:	movw	r2, #23524	; 0x5be4
   13d7c:	movt	r2, #1
   13d80:	ldr	r3, [r2, r3, lsl #2]
   13d84:	add	r2, sp, #4
   13d88:	bl	13e00 <__mempcpy_chk@plt+0x2d1c>
   13d8c:	mov	sp, fp
   13d90:	pop	{fp, pc}
   13d94:	ldr	r1, [r1]
   13d98:	bic	r1, r1, #195	; 0xc3
   13d9c:	orr	r1, r1, #194	; 0xc2
   13da0:	mov	r2, #384	; 0x180
   13da4:	b	10f70 <open64@plt>
   13da8:	mov	r1, #448	; 0x1c0
   13dac:	b	1100c <mkdir@plt>
   13db0:	push	{fp, lr}
   13db4:	mov	fp, sp
   13db8:	sub	sp, sp, #104	; 0x68
   13dbc:	mov	r1, sp
   13dc0:	bl	15154 <__mempcpy_chk@plt+0x4070>
   13dc4:	cmp	r0, #0
   13dc8:	beq	13ddc <__mempcpy_chk@plt+0x2cf8>
   13dcc:	bl	10ff4 <__errno_location@plt>
   13dd0:	ldr	r0, [r0]
   13dd4:	cmp	r0, #75	; 0x4b
   13dd8:	bne	13de8 <__mempcpy_chk@plt+0x2d04>
   13ddc:	bl	10ff4 <__errno_location@plt>
   13de0:	mov	r1, #17
   13de4:	str	r1, [r0]
   13de8:	bl	10ff4 <__errno_location@plt>
   13dec:	ldr	r0, [r0]
   13df0:	subs	r0, r0, #2
   13df4:	mvnne	r0, #0
   13df8:	mov	sp, fp
   13dfc:	pop	{fp, pc}
   13e00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e04:	add	fp, sp, #28
   13e08:	sub	sp, sp, #36	; 0x24
   13e0c:	str	r3, [sp, #12]
   13e10:	mov	sl, r2
   13e14:	mov	r5, r1
   13e18:	mov	r7, r0
   13e1c:	bl	10ff4 <__errno_location@plt>
   13e20:	str	r0, [sp, #16]
   13e24:	ldr	r9, [r0]
   13e28:	mov	r0, #0
   13e2c:	str	r0, [sp, #28]
   13e30:	add	r0, sp, #24
   13e34:	lsr	r0, r0, #3
   13e38:	str	r0, [sp, #24]
   13e3c:	ldr	r8, [fp, #8]
   13e40:	add	r6, r8, r5
   13e44:	mov	r0, r7
   13e48:	bl	10fe8 <strlen@plt>
   13e4c:	mvn	r5, #0
   13e50:	mov	r4, #22
   13e54:	cmp	r0, r6
   13e58:	bcc	13f98 <__mempcpy_chk@plt+0x2eb4>
   13e5c:	sub	r0, r0, r6
   13e60:	add	r6, r7, r0
   13e64:	movw	r1, #22392	; 0x5778
   13e68:	movt	r1, #1
   13e6c:	mov	r0, r6
   13e70:	bl	110d8 <strspn@plt>
   13e74:	cmp	r0, r8
   13e78:	bcc	13f98 <__mempcpy_chk@plt+0x2eb4>
   13e7c:	mov	r1, r8
   13e80:	str	r9, [sp]
   13e84:	stmib	sp, {r7, sl}
   13e88:	movw	r0, #15792	; 0x3db0
   13e8c:	movt	r0, #1
   13e90:	ldr	r2, [sp, #12]
   13e94:	sub	r0, r2, r0
   13e98:	clz	r0, r0
   13e9c:	lsr	r7, r0, #5
   13ea0:	mov	sl, #0
   13ea4:	movw	r8, #39131	; 0x98db
   13ea8:	movt	r8, #62617	; 0xf499
   13eac:	movw	r9, #21503	; 0x53ff
   13eb0:	movt	r9, #2727	; 0xaa7
   13eb4:	mov	r2, #0
   13eb8:	cmp	r1, #0
   13ebc:	str	r2, [sp, #20]
   13ec0:	beq	13f48 <__mempcpy_chk@plt+0x2e64>
   13ec4:	mov	r4, #0
   13ec8:	cmp	sl, #0
   13ecc:	bne	13efc <__mempcpy_chk@plt+0x2e18>
   13ed0:	ldr	r0, [sp, #24]
   13ed4:	ldr	r1, [sp, #28]
   13ed8:	and	r2, r7, #1
   13edc:	bl	13fb4 <__mempcpy_chk@plt+0x2ed0>
   13ee0:	str	r1, [sp, #28]
   13ee4:	str	r0, [sp, #24]
   13ee8:	mov	r7, #1
   13eec:	subs	r0, r9, r0
   13ef0:	sbcs	r0, r8, r1
   13ef4:	bcc	13ed0 <__mempcpy_chk@plt+0x2dec>
   13ef8:	mov	sl, #10
   13efc:	ldr	r5, [sp, #24]
   13f00:	ldr	r1, [sp, #28]
   13f04:	mov	r0, r5
   13f08:	mov	r2, #62	; 0x3e
   13f0c:	mov	r3, #0
   13f10:	bl	14f64 <__mempcpy_chk@plt+0x3e80>
   13f14:	rsb	r2, r0, r0, lsl #5
   13f18:	sub	r2, r5, r2, lsl #1
   13f1c:	movw	r3, #23536	; 0x5bf0
   13f20:	movt	r3, #1
   13f24:	ldrb	r2, [r3, r2]
   13f28:	strb	r2, [r6, r4]
   13f2c:	str	r1, [sp, #28]
   13f30:	str	r0, [sp, #24]
   13f34:	add	r4, r4, #1
   13f38:	sub	sl, sl, #1
   13f3c:	ldr	r0, [fp, #8]
   13f40:	cmp	r4, r0
   13f44:	bne	13ec8 <__mempcpy_chk@plt+0x2de4>
   13f48:	ldmib	sp, {r0, r1, r2}
   13f4c:	blx	r2
   13f50:	cmn	r0, #1
   13f54:	bgt	13f90 <__mempcpy_chk@plt+0x2eac>
   13f58:	ldr	r0, [sp, #16]
   13f5c:	ldr	r0, [r0]
   13f60:	cmp	r0, #17
   13f64:	bne	13fac <__mempcpy_chk@plt+0x2ec8>
   13f68:	ldr	r2, [sp, #20]
   13f6c:	add	r2, r2, #1
   13f70:	movw	r0, #41719	; 0xa2f7
   13f74:	movt	r0, #3
   13f78:	cmp	r2, r0
   13f7c:	ldr	r1, [fp, #8]
   13f80:	bls	13eb8 <__mempcpy_chk@plt+0x2dd4>
   13f84:	mvn	r5, #0
   13f88:	mov	r4, #17
   13f8c:	b	13f98 <__mempcpy_chk@plt+0x2eb4>
   13f90:	mov	r5, r0
   13f94:	ldr	r4, [sp]
   13f98:	ldr	r0, [sp, #16]
   13f9c:	str	r4, [r0]
   13fa0:	mov	r0, r5
   13fa4:	sub	sp, fp, #28
   13fa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fac:	mvn	r5, #0
   13fb0:	b	13fa0 <__mempcpy_chk@plt+0x2ebc>
   13fb4:	push	{r4, r5, r6, sl, fp, lr}
   13fb8:	add	fp, sp, #16
   13fbc:	sub	sp, sp, #16
   13fc0:	mov	r6, r1
   13fc4:	mov	r5, r0
   13fc8:	cmp	r2, #0
   13fcc:	beq	13ff4 <__mempcpy_chk@plt+0x2f10>
   13fd0:	add	r0, sp, #8
   13fd4:	mov	r1, #8
   13fd8:	mov	r2, #1
   13fdc:	bl	1109c <getrandom@plt>
   13fe0:	cmp	r0, #8
   13fe4:	ldreq	r0, [sp, #8]
   13fe8:	ldreq	r1, [sp, #12]
   13fec:	subeq	sp, fp, #16
   13ff0:	popeq	{r4, r5, r6, sl, fp, pc}
   13ff4:	mov	r1, sp
   13ff8:	mov	r0, #1
   13ffc:	bl	10eb0 <clock_gettime@plt>
   14000:	ldr	r0, [sp, #4]
   14004:	eor	r1, r0, r5
   14008:	movw	r2, #45309	; 0xb0fd
   1400c:	movt	r2, #34736	; 0x87b0
   14010:	umull	r3, r5, r1, r2
   14014:	movw	r4, #12006	; 0x2ee6
   14018:	movt	r4, #10171	; 0x27bb
   1401c:	mla	r1, r1, r4, r5
   14020:	eor	r0, r6, r0, asr #31
   14024:	mul	r2, r0, r2
   14028:	movw	r0, #62253	; 0xf32d
   1402c:	movt	r0, #46340	; 0xb504
   14030:	adds	r0, r3, r0
   14034:	adc	r1, r1, r2
   14038:	sub	sp, fp, #16
   1403c:	pop	{r4, r5, r6, sl, fp, pc}
   14040:	push	{fp, lr}
   14044:	mov	fp, sp
   14048:	sub	sp, sp, #8
   1404c:	mov	ip, #6
   14050:	str	ip, [sp]
   14054:	bl	13d60 <__mempcpy_chk@plt+0x2c7c>
   14058:	mov	sp, fp
   1405c:	pop	{fp, pc}
   14060:	push	{fp, lr}
   14064:	mov	fp, sp
   14068:	sub	sp, sp, #8
   1406c:	mov	ip, #6
   14070:	str	ip, [sp]
   14074:	bl	13e00 <__mempcpy_chk@plt+0x2d1c>
   14078:	mov	sp, fp
   1407c:	pop	{fp, pc}
   14080:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14084:	add	fp, sp, #24
   14088:	sub	sp, sp, #32
   1408c:	mov	r4, r2
   14090:	mov	r8, r0
   14094:	ldr	r6, [fp, #12]
   14098:	ldr	r7, [fp, #8]
   1409c:	cmp	r1, #0
   140a0:	beq	140c8 <__mempcpy_chk@plt+0x2fe4>
   140a4:	mov	r5, r1
   140a8:	str	r4, [sp]
   140ac:	str	r3, [sp, #4]
   140b0:	movw	r2, #23599	; 0x5c2f
   140b4:	movt	r2, #1
   140b8:	mov	r0, r8
   140bc:	mov	r1, #1
   140c0:	mov	r3, r5
   140c4:	b	140e0 <__mempcpy_chk@plt+0x2ffc>
   140c8:	str	r3, [sp]
   140cc:	movw	r2, #23611	; 0x5c3b
   140d0:	movt	r2, #1
   140d4:	mov	r0, r8
   140d8:	mov	r1, #1
   140dc:	mov	r3, r4
   140e0:	bl	1103c <__fprintf_chk@plt>
   140e4:	movw	r1, #23618	; 0x5c42
   140e8:	movt	r1, #1
   140ec:	mov	r0, #0
   140f0:	mov	r2, #5
   140f4:	bl	10eec <dcgettext@plt>
   140f8:	mov	r3, r0
   140fc:	movw	r0, #2022	; 0x7e6
   14100:	str	r0, [sp]
   14104:	movw	r2, #24336	; 0x5f10
   14108:	movt	r2, #1
   1410c:	mov	r0, r8
   14110:	mov	r1, #1
   14114:	bl	1103c <__fprintf_chk@plt>
   14118:	movw	r4, #22994	; 0x59d2
   1411c:	movt	r4, #1
   14120:	mov	r0, r4
   14124:	mov	r1, r8
   14128:	bl	10e74 <fputs_unlocked@plt>
   1412c:	movw	r1, #23622	; 0x5c46
   14130:	movt	r1, #1
   14134:	mov	r0, #0
   14138:	mov	r2, #5
   1413c:	bl	10eec <dcgettext@plt>
   14140:	mov	r2, r0
   14144:	movw	r3, #23793	; 0x5cf1
   14148:	movt	r3, #1
   1414c:	mov	r0, r8
   14150:	mov	r1, #1
   14154:	bl	1103c <__fprintf_chk@plt>
   14158:	mov	r0, r4
   1415c:	mov	r1, r8
   14160:	bl	10e74 <fputs_unlocked@plt>
   14164:	cmp	r6, #9
   14168:	bhi	141a4 <__mempcpy_chk@plt+0x30c0>
   1416c:	add	r0, pc, #0
   14170:	ldr	pc, [r0, r6, lsl #2]
   14174:	muleq	r1, ip, r1
   14178:			; <UNDEFINED> instruction: 0x000141b0
   1417c:	andeq	r4, r1, r0, ror #3
   14180:	andeq	r4, r1, r8, lsl #4
   14184:	andeq	r4, r1, r0, lsr r2
   14188:	andeq	r4, r1, r8, asr r2
   1418c:	andeq	r4, r1, r0, lsl #5
   14190:			; <UNDEFINED> instruction: 0x000142b8
   14194:	andeq	r4, r1, r8, asr r3
   14198:	andeq	r4, r1, r0, lsl #6
   1419c:	sub	sp, fp, #24
   141a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   141a4:	movw	r1, #24146	; 0x5e52
   141a8:	movt	r1, #1
   141ac:	b	14308 <__mempcpy_chk@plt+0x3224>
   141b0:	movw	r1, #23827	; 0x5d13
   141b4:	movt	r1, #1
   141b8:	mov	r0, #0
   141bc:	mov	r2, #5
   141c0:	bl	10eec <dcgettext@plt>
   141c4:	mov	r2, r0
   141c8:	ldr	r3, [r7]
   141cc:	mov	r0, r8
   141d0:	mov	r1, #1
   141d4:	sub	sp, fp, #24
   141d8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   141dc:	b	1103c <__fprintf_chk@plt>
   141e0:	movw	r1, #23843	; 0x5d23
   141e4:	movt	r1, #1
   141e8:	mov	r0, #0
   141ec:	mov	r2, #5
   141f0:	bl	10eec <dcgettext@plt>
   141f4:	mov	r2, r0
   141f8:	ldr	r3, [r7]
   141fc:	ldr	r0, [r7, #4]
   14200:	str	r0, [sp]
   14204:	b	142f4 <__mempcpy_chk@plt+0x3210>
   14208:	movw	r1, #23866	; 0x5d3a
   1420c:	movt	r1, #1
   14210:	mov	r0, #0
   14214:	mov	r2, #5
   14218:	bl	10eec <dcgettext@plt>
   1421c:	mov	r2, r0
   14220:	ldr	r3, [r7]
   14224:	ldmib	r7, {r0, r1}
   14228:	stm	sp, {r0, r1}
   1422c:	b	142f4 <__mempcpy_chk@plt+0x3210>
   14230:	movw	r1, #23894	; 0x5d56
   14234:	movt	r1, #1
   14238:	mov	r0, #0
   1423c:	mov	r2, #5
   14240:	bl	10eec <dcgettext@plt>
   14244:	mov	r2, r0
   14248:	ldr	r3, [r7]
   1424c:	ldmib	r7, {r0, r1, r7}
   14250:	stm	sp, {r0, r1, r7}
   14254:	b	142f4 <__mempcpy_chk@plt+0x3210>
   14258:	movw	r1, #23926	; 0x5d76
   1425c:	movt	r1, #1
   14260:	mov	r0, #0
   14264:	mov	r2, #5
   14268:	bl	10eec <dcgettext@plt>
   1426c:	mov	r2, r0
   14270:	ldr	r3, [r7]
   14274:	ldmib	r7, {r0, r1, r6, r7}
   14278:	stm	sp, {r0, r1, r6, r7}
   1427c:	b	142f4 <__mempcpy_chk@plt+0x3210>
   14280:	movw	r1, #23962	; 0x5d9a
   14284:	movt	r1, #1
   14288:	mov	r0, #0
   1428c:	mov	r2, #5
   14290:	bl	10eec <dcgettext@plt>
   14294:	mov	r2, r0
   14298:	ldr	r3, [r7]
   1429c:	ldmib	r7, {r0, r1, r6}
   142a0:	ldr	r5, [r7, #16]
   142a4:	ldr	r7, [r7, #20]
   142a8:	stm	sp, {r0, r1, r6}
   142ac:	str	r5, [sp, #12]
   142b0:	str	r7, [sp, #16]
   142b4:	b	142f4 <__mempcpy_chk@plt+0x3210>
   142b8:	movw	r1, #24002	; 0x5dc2
   142bc:	movt	r1, #1
   142c0:	mov	r0, #0
   142c4:	mov	r2, #5
   142c8:	bl	10eec <dcgettext@plt>
   142cc:	mov	r2, r0
   142d0:	ldr	r3, [r7]
   142d4:	ldmib	r7, {r0, r1, r6}
   142d8:	ldr	r5, [r7, #16]
   142dc:	ldr	r4, [r7, #20]
   142e0:	ldr	r7, [r7, #24]
   142e4:	stm	sp, {r0, r1, r6}
   142e8:	str	r5, [sp, #12]
   142ec:	str	r4, [sp, #16]
   142f0:	str	r7, [sp, #20]
   142f4:	mov	r0, r8
   142f8:	mov	r1, #1
   142fc:	b	143a8 <__mempcpy_chk@plt+0x32c4>
   14300:	movw	r1, #24094	; 0x5e1e
   14304:	movt	r1, #1
   14308:	mov	r0, #0
   1430c:	mov	r2, #5
   14310:	bl	10eec <dcgettext@plt>
   14314:	mov	ip, r0
   14318:	ldr	r3, [r7]
   1431c:	ldr	r0, [r7, #4]
   14320:	ldr	r1, [r7, #8]
   14324:	ldr	r6, [r7, #12]
   14328:	ldr	r5, [r7, #16]
   1432c:	ldr	r4, [r7, #20]
   14330:	ldr	r2, [r7, #24]
   14334:	ldr	lr, [r7, #28]
   14338:	ldr	r7, [r7, #32]
   1433c:	stm	sp, {r0, r1, r6}
   14340:	str	r5, [sp, #12]
   14344:	str	r4, [sp, #16]
   14348:	str	r2, [sp, #20]
   1434c:	str	lr, [sp, #24]
   14350:	str	r7, [sp, #28]
   14354:	b	1439c <__mempcpy_chk@plt+0x32b8>
   14358:	movw	r1, #24046	; 0x5dee
   1435c:	movt	r1, #1
   14360:	mov	r0, #0
   14364:	mov	r2, #5
   14368:	bl	10eec <dcgettext@plt>
   1436c:	mov	ip, r0
   14370:	ldr	r3, [r7]
   14374:	ldmib	r7, {r0, r1, r6}
   14378:	ldr	r5, [r7, #16]
   1437c:	ldr	r4, [r7, #20]
   14380:	ldr	r2, [r7, #24]
   14384:	ldr	r7, [r7, #28]
   14388:	stm	sp, {r0, r1, r6}
   1438c:	str	r5, [sp, #12]
   14390:	str	r4, [sp, #16]
   14394:	str	r2, [sp, #20]
   14398:	str	r7, [sp, #24]
   1439c:	mov	r0, r8
   143a0:	mov	r1, #1
   143a4:	mov	r2, ip
   143a8:	bl	1103c <__fprintf_chk@plt>
   143ac:	sub	sp, fp, #24
   143b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   143b4:	push	{r4, sl, fp, lr}
   143b8:	add	fp, sp, #8
   143bc:	sub	sp, sp, #8
   143c0:	mov	lr, #0
   143c4:	ldr	ip, [fp, #8]
   143c8:	ldr	r4, [ip, lr, lsl #2]
   143cc:	add	lr, lr, #1
   143d0:	cmp	r4, #0
   143d4:	bne	143c8 <__mempcpy_chk@plt+0x32e4>
   143d8:	sub	r4, lr, #1
   143dc:	str	ip, [sp]
   143e0:	str	r4, [sp, #4]
   143e4:	bl	14080 <__mempcpy_chk@plt+0x2f9c>
   143e8:	sub	sp, fp, #8
   143ec:	pop	{r4, sl, fp, pc}
   143f0:	push	{r4, r5, fp, lr}
   143f4:	add	fp, sp, #8
   143f8:	sub	sp, sp, #48	; 0x30
   143fc:	mov	ip, #0
   14400:	ldr	r4, [fp, #8]
   14404:	add	lr, sp, #8
   14408:	ldr	r5, [r4]
   1440c:	str	r5, [lr, ip, lsl #2]
   14410:	cmp	r5, #0
   14414:	beq	14428 <__mempcpy_chk@plt+0x3344>
   14418:	add	ip, ip, #1
   1441c:	add	r4, r4, #4
   14420:	cmp	ip, #10
   14424:	bcc	14408 <__mempcpy_chk@plt+0x3324>
   14428:	str	lr, [sp]
   1442c:	str	ip, [sp, #4]
   14430:	bl	14080 <__mempcpy_chk@plt+0x2f9c>
   14434:	sub	sp, fp, #8
   14438:	pop	{r4, r5, fp, pc}
   1443c:	push	{fp, lr}
   14440:	mov	fp, sp
   14444:	sub	sp, sp, #8
   14448:	add	ip, fp, #8
   1444c:	str	ip, [sp, #4]
   14450:	str	ip, [sp]
   14454:	bl	143f0 <__mempcpy_chk@plt+0x330c>
   14458:	mov	sp, fp
   1445c:	pop	{fp, pc}
   14460:	push	{fp, lr}
   14464:	mov	fp, sp
   14468:	movw	r0, #29004	; 0x714c
   1446c:	movt	r0, #2
   14470:	ldr	r1, [r0]
   14474:	movw	r0, #22994	; 0x59d2
   14478:	movt	r0, #1
   1447c:	bl	10e74 <fputs_unlocked@plt>
   14480:	movw	r1, #24206	; 0x5e8e
   14484:	movt	r1, #1
   14488:	mov	r0, #0
   1448c:	mov	r2, #5
   14490:	bl	10eec <dcgettext@plt>
   14494:	mov	r1, r0
   14498:	movw	r2, #24226	; 0x5ea2
   1449c:	movt	r2, #1
   144a0:	mov	r0, #1
   144a4:	bl	11024 <__printf_chk@plt>
   144a8:	movw	r1, #24248	; 0x5eb8
   144ac:	movt	r1, #1
   144b0:	mov	r0, #0
   144b4:	mov	r2, #5
   144b8:	bl	10eec <dcgettext@plt>
   144bc:	mov	r1, r0
   144c0:	movw	r2, #22296	; 0x5718
   144c4:	movt	r2, #1
   144c8:	movw	r3, #22803	; 0x5913
   144cc:	movt	r3, #1
   144d0:	mov	r0, #1
   144d4:	bl	11024 <__printf_chk@plt>
   144d8:	movw	r1, #24268	; 0x5ecc
   144dc:	movt	r1, #1
   144e0:	mov	r0, #0
   144e4:	mov	r2, #5
   144e8:	bl	10eec <dcgettext@plt>
   144ec:	mov	r1, r0
   144f0:	movw	r2, #24307	; 0x5ef3
   144f4:	movt	r2, #1
   144f8:	mov	r0, #1
   144fc:	pop	{fp, lr}
   14500:	b	11024 <__printf_chk@plt>
   14504:	b	14508 <__mempcpy_chk@plt+0x3424>
   14508:	push	{r4, r5, r6, sl, fp, lr}
   1450c:	add	fp, sp, #16
   14510:	mov	r4, r2
   14514:	mov	r5, r1
   14518:	mov	r6, r0
   1451c:	bl	14e1c <__mempcpy_chk@plt+0x3d38>
   14520:	cmp	r0, #0
   14524:	popne	{r4, r5, r6, sl, fp, pc}
   14528:	cmp	r6, #0
   1452c:	beq	14540 <__mempcpy_chk@plt+0x345c>
   14530:	cmp	r5, #0
   14534:	cmpne	r4, #0
   14538:	bne	14540 <__mempcpy_chk@plt+0x345c>
   1453c:	pop	{r4, r5, r6, sl, fp, pc}
   14540:	bl	148f4 <__mempcpy_chk@plt+0x3810>
   14544:	push	{fp, lr}
   14548:	mov	fp, sp
   1454c:	bl	1498c <__mempcpy_chk@plt+0x38a8>
   14550:	bl	14558 <__mempcpy_chk@plt+0x3474>
   14554:	pop	{fp, pc}
   14558:	cmp	r0, #0
   1455c:	bxne	lr
   14560:	push	{fp, lr}
   14564:	mov	fp, sp
   14568:	bl	148f4 <__mempcpy_chk@plt+0x3810>
   1456c:	push	{fp, lr}
   14570:	mov	fp, sp
   14574:	bl	14d50 <__mempcpy_chk@plt+0x3c6c>
   14578:	bl	14558 <__mempcpy_chk@plt+0x3474>
   1457c:	pop	{fp, pc}
   14580:	b	14544 <__mempcpy_chk@plt+0x3460>
   14584:	push	{r4, r5, fp, lr}
   14588:	add	fp, sp, #8
   1458c:	mov	r4, r1
   14590:	mov	r5, r0
   14594:	bl	149bc <__mempcpy_chk@plt+0x38d8>
   14598:	cmp	r0, #0
   1459c:	popne	{r4, r5, fp, pc}
   145a0:	cmp	r5, #0
   145a4:	beq	145b4 <__mempcpy_chk@plt+0x34d0>
   145a8:	cmp	r4, #0
   145ac:	bne	145b4 <__mempcpy_chk@plt+0x34d0>
   145b0:	pop	{r4, r5, fp, pc}
   145b4:	bl	148f4 <__mempcpy_chk@plt+0x3810>
   145b8:	push	{fp, lr}
   145bc:	mov	fp, sp
   145c0:	bl	14d54 <__mempcpy_chk@plt+0x3c70>
   145c4:	bl	14558 <__mempcpy_chk@plt+0x3474>
   145c8:	pop	{fp, pc}
   145cc:	push	{fp, lr}
   145d0:	mov	fp, sp
   145d4:	bl	14d64 <__mempcpy_chk@plt+0x3c80>
   145d8:	bl	14558 <__mempcpy_chk@plt+0x3474>
   145dc:	pop	{fp, pc}
   145e0:	push	{fp, lr}
   145e4:	mov	fp, sp
   145e8:	mov	r2, r1
   145ec:	mov	r1, r0
   145f0:	mov	r0, #0
   145f4:	bl	14508 <__mempcpy_chk@plt+0x3424>
   145f8:	pop	{fp, pc}
   145fc:	mov	r2, r1
   14600:	mov	r1, r0
   14604:	mov	r0, #0
   14608:	b	145cc <__mempcpy_chk@plt+0x34e8>
   1460c:	mov	r2, #1
   14610:	b	14614 <__mempcpy_chk@plt+0x3530>
   14614:	push	{r4, r5, fp, lr}
   14618:	add	fp, sp, #8
   1461c:	mov	r4, r1
   14620:	ldr	r5, [r1]
   14624:	cmp	r0, #0
   14628:	beq	14640 <__mempcpy_chk@plt+0x355c>
   1462c:	mov	r1, #1
   14630:	add	r1, r1, r5, lsr #1
   14634:	adds	r5, r5, r1
   14638:	bcc	14658 <__mempcpy_chk@plt+0x3574>
   1463c:	bl	148f4 <__mempcpy_chk@plt+0x3810>
   14640:	cmp	r5, #0
   14644:	bne	14658 <__mempcpy_chk@plt+0x3574>
   14648:	mov	r1, #64	; 0x40
   1464c:	udiv	r5, r1, r2
   14650:	cmp	r2, #64	; 0x40
   14654:	addhi	r5, r5, #1
   14658:	mov	r1, r5
   1465c:	bl	14508 <__mempcpy_chk@plt+0x3424>
   14660:	str	r5, [r4]
   14664:	pop	{r4, r5, fp, pc}
   14668:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1466c:	add	fp, sp, #24
   14670:	mov	r8, r1
   14674:	ldr	r6, [r1]
   14678:	add	r1, r6, r6, asr #1
   1467c:	cmp	r1, r6
   14680:	mvnvs	r1, #-2147483648	; 0x80000000
   14684:	cmp	r1, r3
   14688:	mov	r5, r1
   1468c:	movgt	r5, r3
   14690:	cmn	r3, #1
   14694:	movle	r5, r1
   14698:	ldr	r4, [fp, #8]
   1469c:	cmn	r4, #1
   146a0:	ble	146c8 <__mempcpy_chk@plt+0x35e4>
   146a4:	cmp	r4, #0
   146a8:	beq	1471c <__mempcpy_chk@plt+0x3638>
   146ac:	cmn	r5, #1
   146b0:	ble	146f0 <__mempcpy_chk@plt+0x360c>
   146b4:	mvn	r7, #-2147483648	; 0x80000000
   146b8:	udiv	r1, r7, r4
   146bc:	cmp	r1, r5
   146c0:	bge	1471c <__mempcpy_chk@plt+0x3638>
   146c4:	b	1472c <__mempcpy_chk@plt+0x3648>
   146c8:	cmn	r5, #1
   146cc:	ble	1470c <__mempcpy_chk@plt+0x3628>
   146d0:	cmn	r4, #1
   146d4:	beq	1471c <__mempcpy_chk@plt+0x3638>
   146d8:	mov	r1, #-2147483648	; 0x80000000
   146dc:	sdiv	r1, r1, r4
   146e0:	mvn	r7, #-2147483648	; 0x80000000
   146e4:	cmp	r1, r5
   146e8:	bge	1471c <__mempcpy_chk@plt+0x3638>
   146ec:	b	1472c <__mempcpy_chk@plt+0x3648>
   146f0:	beq	1471c <__mempcpy_chk@plt+0x3638>
   146f4:	mov	r1, #-2147483648	; 0x80000000
   146f8:	sdiv	r1, r1, r5
   146fc:	mvn	r7, #-2147483648	; 0x80000000
   14700:	cmp	r1, r4
   14704:	bge	1471c <__mempcpy_chk@plt+0x3638>
   14708:	b	1472c <__mempcpy_chk@plt+0x3648>
   1470c:	mvn	r7, #-2147483648	; 0x80000000
   14710:	sdiv	r1, r7, r4
   14714:	cmp	r5, r1
   14718:	blt	1472c <__mempcpy_chk@plt+0x3648>
   1471c:	mul	r1, r5, r4
   14720:	mov	r7, #64	; 0x40
   14724:	cmp	r1, #63	; 0x3f
   14728:	bgt	14734 <__mempcpy_chk@plt+0x3650>
   1472c:	sdiv	r5, r7, r4
   14730:	mul	r1, r5, r4
   14734:	cmp	r0, #0
   14738:	moveq	r7, #0
   1473c:	streq	r7, [r8]
   14740:	sub	r7, r5, r6
   14744:	cmp	r7, r2
   14748:	bge	147f4 <__mempcpy_chk@plt+0x3710>
   1474c:	add	r5, r6, r2
   14750:	mov	r1, #0
   14754:	cmp	r5, r3
   14758:	mov	r2, #0
   1475c:	movwgt	r2, #1
   14760:	cmn	r3, #1
   14764:	movwgt	r1, #1
   14768:	cmp	r5, r6
   1476c:	bvs	147dc <__mempcpy_chk@plt+0x36f8>
   14770:	ands	r1, r1, r2
   14774:	bne	147dc <__mempcpy_chk@plt+0x36f8>
   14778:	cmn	r4, #1
   1477c:	ble	147a4 <__mempcpy_chk@plt+0x36c0>
   14780:	cmp	r4, #0
   14784:	beq	147f0 <__mempcpy_chk@plt+0x370c>
   14788:	cmn	r5, #1
   1478c:	ble	147c8 <__mempcpy_chk@plt+0x36e4>
   14790:	mvn	r1, #-2147483648	; 0x80000000
   14794:	udiv	r1, r1, r4
   14798:	cmp	r1, r5
   1479c:	bge	147f0 <__mempcpy_chk@plt+0x370c>
   147a0:	b	147dc <__mempcpy_chk@plt+0x36f8>
   147a4:	cmn	r5, #1
   147a8:	ble	147e0 <__mempcpy_chk@plt+0x36fc>
   147ac:	cmn	r4, #1
   147b0:	beq	147f0 <__mempcpy_chk@plt+0x370c>
   147b4:	mov	r1, #-2147483648	; 0x80000000
   147b8:	sdiv	r1, r1, r4
   147bc:	cmp	r1, r5
   147c0:	bge	147f0 <__mempcpy_chk@plt+0x370c>
   147c4:	b	147dc <__mempcpy_chk@plt+0x36f8>
   147c8:	beq	147f0 <__mempcpy_chk@plt+0x370c>
   147cc:	mov	r1, #-2147483648	; 0x80000000
   147d0:	sdiv	r1, r1, r5
   147d4:	cmp	r1, r4
   147d8:	bge	147f0 <__mempcpy_chk@plt+0x370c>
   147dc:	bl	148f4 <__mempcpy_chk@plt+0x3810>
   147e0:	mvn	r1, #-2147483648	; 0x80000000
   147e4:	sdiv	r1, r1, r4
   147e8:	cmp	r5, r1
   147ec:	blt	147dc <__mempcpy_chk@plt+0x36f8>
   147f0:	mul	r1, r5, r4
   147f4:	bl	14584 <__mempcpy_chk@plt+0x34a0>
   147f8:	str	r5, [r8]
   147fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14800:	mov	r1, #1
   14804:	b	14808 <__mempcpy_chk@plt+0x3724>
   14808:	push	{fp, lr}
   1480c:	mov	fp, sp
   14810:	bl	14938 <__mempcpy_chk@plt+0x3854>
   14814:	bl	14558 <__mempcpy_chk@plt+0x3474>
   14818:	pop	{fp, pc}
   1481c:	mov	r1, #1
   14820:	b	14824 <__mempcpy_chk@plt+0x3740>
   14824:	push	{fp, lr}
   14828:	mov	fp, sp
   1482c:	bl	14d60 <__mempcpy_chk@plt+0x3c7c>
   14830:	bl	14558 <__mempcpy_chk@plt+0x3474>
   14834:	pop	{fp, pc}
   14838:	push	{r4, r5, r6, sl, fp, lr}
   1483c:	add	fp, sp, #16
   14840:	mov	r4, r1
   14844:	mov	r5, r0
   14848:	mov	r0, r1
   1484c:	bl	14544 <__mempcpy_chk@plt+0x3460>
   14850:	mov	r6, r0
   14854:	mov	r1, r5
   14858:	mov	r2, r4
   1485c:	bl	10ec8 <memcpy@plt>
   14860:	mov	r0, r6
   14864:	pop	{r4, r5, r6, sl, fp, pc}
   14868:	push	{r4, r5, r6, sl, fp, lr}
   1486c:	add	fp, sp, #16
   14870:	mov	r4, r1
   14874:	mov	r5, r0
   14878:	mov	r0, r1
   1487c:	bl	1456c <__mempcpy_chk@plt+0x3488>
   14880:	mov	r6, r0
   14884:	mov	r1, r5
   14888:	mov	r2, r4
   1488c:	bl	10ec8 <memcpy@plt>
   14890:	mov	r0, r6
   14894:	pop	{r4, r5, r6, sl, fp, pc}
   14898:	push	{r4, r5, r6, sl, fp, lr}
   1489c:	add	fp, sp, #16
   148a0:	mov	r4, r1
   148a4:	mov	r5, r0
   148a8:	add	r0, r1, #1
   148ac:	bl	1456c <__mempcpy_chk@plt+0x3488>
   148b0:	mov	r6, r0
   148b4:	mov	r0, #0
   148b8:	strb	r0, [r6, r4]
   148bc:	mov	r0, r6
   148c0:	mov	r1, r5
   148c4:	mov	r2, r4
   148c8:	bl	10ec8 <memcpy@plt>
   148cc:	mov	r0, r6
   148d0:	pop	{r4, r5, r6, sl, fp, pc}
   148d4:	push	{r4, sl, fp, lr}
   148d8:	add	fp, sp, #8
   148dc:	mov	r4, r0
   148e0:	bl	10fe8 <strlen@plt>
   148e4:	add	r1, r0, #1
   148e8:	mov	r0, r4
   148ec:	pop	{r4, sl, fp, lr}
   148f0:	b	14838 <__mempcpy_chk@plt+0x3754>
   148f4:	push	{fp, lr}
   148f8:	mov	fp, sp
   148fc:	movw	r0, #28916	; 0x70f4
   14900:	movt	r0, #2
   14904:	ldr	r4, [r0]
   14908:	movw	r1, #24383	; 0x5f3f
   1490c:	movt	r1, #1
   14910:	mov	r0, #0
   14914:	mov	r2, #5
   14918:	bl	10eec <dcgettext@plt>
   1491c:	mov	r3, r0
   14920:	movw	r2, #23267	; 0x5ae3
   14924:	movt	r2, #1
   14928:	mov	r0, r4
   1492c:	mov	r1, #0
   14930:	bl	10f64 <error@plt>
   14934:	bl	110b4 <abort@plt>
   14938:	clz	r2, r1
   1493c:	lsr	r2, r2, #5
   14940:	clz	r3, r0
   14944:	lsr	r3, r3, #5
   14948:	orrs	r2, r3, r2
   1494c:	movwne	r1, #1
   14950:	movwne	r0, #1
   14954:	cmp	r1, #0
   14958:	beq	14988 <__mempcpy_chk@plt+0x38a4>
   1495c:	mvn	r2, #-2147483648	; 0x80000000
   14960:	udiv	r2, r2, r1
   14964:	cmp	r2, r0
   14968:	bcs	14988 <__mempcpy_chk@plt+0x38a4>
   1496c:	push	{fp, lr}
   14970:	mov	fp, sp
   14974:	bl	10ff4 <__errno_location@plt>
   14978:	mov	r1, #12
   1497c:	str	r1, [r0]
   14980:	mov	r0, #0
   14984:	pop	{fp, pc}
   14988:	b	10e68 <calloc@plt>
   1498c:	cmp	r0, #0
   14990:	movweq	r0, #1
   14994:	cmn	r0, #1
   14998:	ble	149a0 <__mempcpy_chk@plt+0x38bc>
   1499c:	b	10f94 <malloc@plt>
   149a0:	push	{fp, lr}
   149a4:	mov	fp, sp
   149a8:	bl	10ff4 <__errno_location@plt>
   149ac:	mov	r1, #12
   149b0:	str	r1, [r0]
   149b4:	mov	r0, #0
   149b8:	pop	{fp, pc}
   149bc:	push	{fp, lr}
   149c0:	mov	fp, sp
   149c4:	cmp	r0, #0
   149c8:	beq	149e4 <__mempcpy_chk@plt+0x3900>
   149cc:	cmp	r1, #0
   149d0:	beq	149f0 <__mempcpy_chk@plt+0x390c>
   149d4:	cmn	r1, #1
   149d8:	ble	149fc <__mempcpy_chk@plt+0x3918>
   149dc:	pop	{fp, lr}
   149e0:	b	10ef8 <realloc@plt>
   149e4:	mov	r0, r1
   149e8:	pop	{fp, lr}
   149ec:	b	1498c <__mempcpy_chk@plt+0x38a8>
   149f0:	bl	12048 <__mempcpy_chk@plt+0xf64>
   149f4:	mov	r0, #0
   149f8:	pop	{fp, pc}
   149fc:	bl	10ff4 <__errno_location@plt>
   14a00:	mov	r1, #12
   14a04:	str	r1, [r0]
   14a08:	mov	r0, #0
   14a0c:	pop	{fp, pc}
   14a10:	mov	r1, r0
   14a14:	sub	r2, r0, #65	; 0x41
   14a18:	mov	r0, #1
   14a1c:	cmp	r2, #26
   14a20:	subcs	r2, r1, #97	; 0x61
   14a24:	cmpcs	r2, #26
   14a28:	bcs	14a30 <__mempcpy_chk@plt+0x394c>
   14a2c:	bx	lr
   14a30:	sub	r1, r1, #48	; 0x30
   14a34:	cmp	r1, #10
   14a38:	movcs	r0, #0
   14a3c:	bx	lr
   14a40:	mov	r1, r0
   14a44:	sub	r2, r0, #65	; 0x41
   14a48:	mov	r0, #1
   14a4c:	cmp	r2, #26
   14a50:	subcs	r1, r1, #97	; 0x61
   14a54:	cmpcs	r1, #26
   14a58:	movcs	r0, #0
   14a5c:	bx	lr
   14a60:	mov	r1, #0
   14a64:	cmp	r0, #128	; 0x80
   14a68:	movwcc	r1, #1
   14a6c:	mov	r0, r1
   14a70:	bx	lr
   14a74:	sub	r1, r0, #9
   14a78:	clz	r1, r1
   14a7c:	lsr	r1, r1, #5
   14a80:	sub	r0, r0, #32
   14a84:	clz	r0, r0
   14a88:	lsr	r0, r0, #5
   14a8c:	orr	r0, r0, r1
   14a90:	bx	lr
   14a94:	mov	r1, r0
   14a98:	mov	r0, #1
   14a9c:	cmp	r1, #32
   14aa0:	bxcc	lr
   14aa4:	cmp	r1, #127	; 0x7f
   14aa8:	movne	r0, #0
   14aac:	bx	lr
   14ab0:	sub	r1, r0, #48	; 0x30
   14ab4:	mov	r0, #0
   14ab8:	cmp	r1, #10
   14abc:	movwcc	r0, #1
   14ac0:	bx	lr
   14ac4:	sub	r1, r0, #33	; 0x21
   14ac8:	mov	r0, #0
   14acc:	cmp	r1, #94	; 0x5e
   14ad0:	movwcc	r0, #1
   14ad4:	bx	lr
   14ad8:	sub	r1, r0, #97	; 0x61
   14adc:	mov	r0, #0
   14ae0:	cmp	r1, #26
   14ae4:	movwcc	r0, #1
   14ae8:	bx	lr
   14aec:	sub	r1, r0, #32
   14af0:	mov	r0, #0
   14af4:	cmp	r1, #95	; 0x5f
   14af8:	movwcc	r0, #1
   14afc:	bx	lr
   14b00:	sub	r1, r0, #33	; 0x21
   14b04:	cmp	r1, #93	; 0x5d
   14b08:	bhi	14c94 <__mempcpy_chk@plt+0x3bb0>
   14b0c:	mov	r0, #1
   14b10:	add	r2, pc, #0
   14b14:	ldr	pc, [r2, r1, lsl #2]
   14b18:	muleq	r1, r0, ip
   14b1c:	muleq	r1, r0, ip
   14b20:	muleq	r1, r0, ip
   14b24:	muleq	r1, r0, ip
   14b28:	muleq	r1, r0, ip
   14b2c:	muleq	r1, r0, ip
   14b30:	muleq	r1, r0, ip
   14b34:	muleq	r1, r0, ip
   14b38:	muleq	r1, r0, ip
   14b3c:	muleq	r1, r0, ip
   14b40:	muleq	r1, r0, ip
   14b44:	muleq	r1, r0, ip
   14b48:	muleq	r1, r0, ip
   14b4c:	muleq	r1, r0, ip
   14b50:	muleq	r1, r0, ip
   14b54:	muleq	r1, r4, ip
   14b58:	muleq	r1, r4, ip
   14b5c:	muleq	r1, r4, ip
   14b60:	muleq	r1, r4, ip
   14b64:	muleq	r1, r4, ip
   14b68:	muleq	r1, r4, ip
   14b6c:	muleq	r1, r4, ip
   14b70:	muleq	r1, r4, ip
   14b74:	muleq	r1, r4, ip
   14b78:	muleq	r1, r4, ip
   14b7c:	muleq	r1, r0, ip
   14b80:	muleq	r1, r0, ip
   14b84:	muleq	r1, r0, ip
   14b88:	muleq	r1, r0, ip
   14b8c:	muleq	r1, r0, ip
   14b90:	muleq	r1, r0, ip
   14b94:	muleq	r1, r0, ip
   14b98:	muleq	r1, r4, ip
   14b9c:	muleq	r1, r4, ip
   14ba0:	muleq	r1, r4, ip
   14ba4:	muleq	r1, r4, ip
   14ba8:	muleq	r1, r4, ip
   14bac:	muleq	r1, r4, ip
   14bb0:	muleq	r1, r4, ip
   14bb4:	muleq	r1, r4, ip
   14bb8:	muleq	r1, r4, ip
   14bbc:	muleq	r1, r4, ip
   14bc0:	muleq	r1, r4, ip
   14bc4:	muleq	r1, r4, ip
   14bc8:	muleq	r1, r4, ip
   14bcc:	muleq	r1, r4, ip
   14bd0:	muleq	r1, r4, ip
   14bd4:	muleq	r1, r4, ip
   14bd8:	muleq	r1, r4, ip
   14bdc:	muleq	r1, r4, ip
   14be0:	muleq	r1, r4, ip
   14be4:	muleq	r1, r4, ip
   14be8:	muleq	r1, r4, ip
   14bec:	muleq	r1, r4, ip
   14bf0:	muleq	r1, r4, ip
   14bf4:	muleq	r1, r4, ip
   14bf8:	muleq	r1, r4, ip
   14bfc:	muleq	r1, r4, ip
   14c00:	muleq	r1, r0, ip
   14c04:	muleq	r1, r0, ip
   14c08:	muleq	r1, r0, ip
   14c0c:	muleq	r1, r0, ip
   14c10:	muleq	r1, r0, ip
   14c14:	muleq	r1, r0, ip
   14c18:	muleq	r1, r4, ip
   14c1c:	muleq	r1, r4, ip
   14c20:	muleq	r1, r4, ip
   14c24:	muleq	r1, r4, ip
   14c28:	muleq	r1, r4, ip
   14c2c:	muleq	r1, r4, ip
   14c30:	muleq	r1, r4, ip
   14c34:	muleq	r1, r4, ip
   14c38:	muleq	r1, r4, ip
   14c3c:	muleq	r1, r4, ip
   14c40:	muleq	r1, r4, ip
   14c44:	muleq	r1, r4, ip
   14c48:	muleq	r1, r4, ip
   14c4c:	muleq	r1, r4, ip
   14c50:	muleq	r1, r4, ip
   14c54:	muleq	r1, r4, ip
   14c58:	muleq	r1, r4, ip
   14c5c:	muleq	r1, r4, ip
   14c60:	muleq	r1, r4, ip
   14c64:	muleq	r1, r4, ip
   14c68:	muleq	r1, r4, ip
   14c6c:	muleq	r1, r4, ip
   14c70:	muleq	r1, r4, ip
   14c74:	muleq	r1, r4, ip
   14c78:	muleq	r1, r4, ip
   14c7c:	muleq	r1, r4, ip
   14c80:	muleq	r1, r0, ip
   14c84:	muleq	r1, r0, ip
   14c88:	muleq	r1, r0, ip
   14c8c:	muleq	r1, r0, ip
   14c90:	bx	lr
   14c94:	mov	r0, #0
   14c98:	bx	lr
   14c9c:	sub	r0, r0, #9
   14ca0:	cmp	r0, #23
   14ca4:	movhi	r0, #0
   14ca8:	bxhi	lr
   14cac:	bic	r0, r0, #-16777216	; 0xff000000
   14cb0:	movw	r1, #31
   14cb4:	movt	r1, #128	; 0x80
   14cb8:	mov	r2, #1
   14cbc:	and	r0, r2, r1, lsr r0
   14cc0:	bx	lr
   14cc4:	sub	r1, r0, #65	; 0x41
   14cc8:	mov	r0, #0
   14ccc:	cmp	r1, #26
   14cd0:	movwcc	r0, #1
   14cd4:	bx	lr
   14cd8:	mov	r1, r0
   14cdc:	sub	r2, r0, #48	; 0x30
   14ce0:	mov	r0, #1
   14ce4:	cmp	r2, #22
   14ce8:	bhi	14d00 <__mempcpy_chk@plt+0x3c1c>
   14cec:	mov	ip, #1
   14cf0:	movw	r3, #1023	; 0x3ff
   14cf4:	movt	r3, #126	; 0x7e
   14cf8:	tst	r3, ip, lsl r2
   14cfc:	bxne	lr
   14d00:	sub	r1, r1, #97	; 0x61
   14d04:	cmp	r1, #6
   14d08:	movcs	r0, #0
   14d0c:	bxcs	lr
   14d10:	bx	lr
   14d14:	sub	r1, r0, #65	; 0x41
   14d18:	cmp	r1, #26
   14d1c:	addcc	r0, r0, #32
   14d20:	bx	lr
   14d24:	sub	r1, r0, #97	; 0x61
   14d28:	cmp	r1, #26
   14d2c:	subcc	r0, r0, #32
   14d30:	bx	lr
   14d34:	push	{fp, lr}
   14d38:	mov	fp, sp
   14d3c:	bl	10ff4 <__errno_location@plt>
   14d40:	mov	r1, #12
   14d44:	str	r1, [r0]
   14d48:	mov	r0, #0
   14d4c:	pop	{fp, pc}
   14d50:	b	1498c <__mempcpy_chk@plt+0x38a8>
   14d54:	cmp	r1, #0
   14d58:	orreq	r1, r1, #1
   14d5c:	b	149bc <__mempcpy_chk@plt+0x38d8>
   14d60:	b	14938 <__mempcpy_chk@plt+0x3854>
   14d64:	clz	r3, r2
   14d68:	lsr	ip, r3, #5
   14d6c:	clz	r3, r1
   14d70:	lsr	r3, r3, #5
   14d74:	orrs	r3, r3, ip
   14d78:	movwne	r1, #1
   14d7c:	movwne	r2, #1
   14d80:	b	14e1c <__mempcpy_chk@plt+0x3d38>
   14d84:	push	{fp, lr}
   14d88:	mov	fp, sp
   14d8c:	mov	r0, #14
   14d90:	bl	11078 <nl_langinfo@plt>
   14d94:	movw	r1, #22995	; 0x59d3
   14d98:	movt	r1, #1
   14d9c:	cmp	r0, #0
   14da0:	movne	r1, r0
   14da4:	ldrb	r2, [r1]
   14da8:	movw	r0, #24400	; 0x5f50
   14dac:	movt	r0, #1
   14db0:	cmp	r2, #0
   14db4:	movne	r0, r1
   14db8:	pop	{fp, pc}
   14dbc:	push	{r4, r5, r6, r7, fp, lr}
   14dc0:	add	fp, sp, #16
   14dc4:	sub	sp, sp, #8
   14dc8:	mov	r7, r2
   14dcc:	mov	r4, r1
   14dd0:	add	r5, sp, #4
   14dd4:	cmp	r0, #0
   14dd8:	movne	r5, r0
   14ddc:	mov	r0, r5
   14de0:	bl	10f58 <mbrtowc@plt>
   14de4:	mov	r6, r0
   14de8:	cmp	r7, #0
   14dec:	beq	14e10 <__mempcpy_chk@plt+0x3d2c>
   14df0:	cmn	r6, #2
   14df4:	bcc	14e10 <__mempcpy_chk@plt+0x3d2c>
   14df8:	mov	r0, #0
   14dfc:	bl	14e58 <__mempcpy_chk@plt+0x3d74>
   14e00:	cmp	r0, #0
   14e04:	ldrbeq	r0, [r4]
   14e08:	streq	r0, [r5]
   14e0c:	moveq	r6, #1
   14e10:	mov	r0, r6
   14e14:	sub	sp, fp, #16
   14e18:	pop	{r4, r5, r6, r7, fp, pc}
   14e1c:	cmp	r2, #0
   14e20:	beq	14e50 <__mempcpy_chk@plt+0x3d6c>
   14e24:	mvn	r3, #0
   14e28:	udiv	r3, r3, r2
   14e2c:	cmp	r3, r1
   14e30:	bcs	14e50 <__mempcpy_chk@plt+0x3d6c>
   14e34:	push	{fp, lr}
   14e38:	mov	fp, sp
   14e3c:	bl	10ff4 <__errno_location@plt>
   14e40:	mov	r1, #12
   14e44:	str	r1, [r0]
   14e48:	mov	r0, #0
   14e4c:	pop	{fp, pc}
   14e50:	mul	r1, r2, r1
   14e54:	b	149bc <__mempcpy_chk@plt+0x38d8>
   14e58:	push	{r4, sl, fp, lr}
   14e5c:	add	fp, sp, #8
   14e60:	sub	sp, sp, #264	; 0x108
   14e64:	add	r1, sp, #7
   14e68:	movw	r2, #257	; 0x101
   14e6c:	bl	14ebc <__mempcpy_chk@plt+0x3dd8>
   14e70:	mov	r4, #0
   14e74:	cmp	r0, #0
   14e78:	bne	14eb0 <__mempcpy_chk@plt+0x3dcc>
   14e7c:	add	r0, sp, #7
   14e80:	movw	r1, #24406	; 0x5f56
   14e84:	movt	r1, #1
   14e88:	bl	10e8c <strcmp@plt>
   14e8c:	cmp	r0, #0
   14e90:	beq	14eb0 <__mempcpy_chk@plt+0x3dcc>
   14e94:	add	r0, sp, #7
   14e98:	movw	r1, #24408	; 0x5f58
   14e9c:	movt	r1, #1
   14ea0:	bl	10e8c <strcmp@plt>
   14ea4:	mov	r4, r0
   14ea8:	cmp	r0, #0
   14eac:	movwne	r4, #1
   14eb0:	mov	r0, r4
   14eb4:	sub	sp, fp, #8
   14eb8:	pop	{r4, sl, fp, pc}
   14ebc:	b	14ec0 <__mempcpy_chk@plt+0x3ddc>
   14ec0:	push	{r4, r5, r6, r7, fp, lr}
   14ec4:	add	fp, sp, #16
   14ec8:	mov	r6, r2
   14ecc:	mov	r4, r1
   14ed0:	bl	14f5c <__mempcpy_chk@plt+0x3e78>
   14ed4:	cmp	r0, #0
   14ed8:	beq	14f08 <__mempcpy_chk@plt+0x3e24>
   14edc:	mov	r7, r0
   14ee0:	bl	10fe8 <strlen@plt>
   14ee4:	cmp	r0, r6
   14ee8:	bcs	14f28 <__mempcpy_chk@plt+0x3e44>
   14eec:	add	r2, r0, #1
   14ef0:	mov	r0, r4
   14ef4:	mov	r1, r7
   14ef8:	bl	10ec8 <memcpy@plt>
   14efc:	mov	r5, #0
   14f00:	mov	r0, r5
   14f04:	pop	{r4, r5, r6, r7, fp, pc}
   14f08:	mov	r5, #22
   14f0c:	cmp	r6, #0
   14f10:	movne	r0, #0
   14f14:	strbne	r0, [r4]
   14f18:	movne	r0, r5
   14f1c:	popne	{r4, r5, r6, r7, fp, pc}
   14f20:	mov	r0, r5
   14f24:	pop	{r4, r5, r6, r7, fp, pc}
   14f28:	mov	r5, #34	; 0x22
   14f2c:	cmp	r6, #0
   14f30:	beq	14f50 <__mempcpy_chk@plt+0x3e6c>
   14f34:	sub	r6, r6, #1
   14f38:	mov	r0, r4
   14f3c:	mov	r1, r7
   14f40:	mov	r2, r6
   14f44:	bl	10ec8 <memcpy@plt>
   14f48:	mov	r0, #0
   14f4c:	strb	r0, [r4, r6]
   14f50:	mov	r0, r5
   14f54:	pop	{r4, r5, r6, r7, fp, pc}
   14f58:	b	14f5c <__mempcpy_chk@plt+0x3e78>
   14f5c:	mov	r1, #0
   14f60:	b	11060 <setlocale@plt>
   14f64:	cmp	r3, #0
   14f68:	cmpeq	r2, #0
   14f6c:	bne	14f84 <__mempcpy_chk@plt+0x3ea0>
   14f70:	cmp	r1, #0
   14f74:	cmpeq	r0, #0
   14f78:	mvnne	r1, #0
   14f7c:	mvnne	r0, #0
   14f80:	b	14fa0 <__mempcpy_chk@plt+0x3ebc>
   14f84:	sub	sp, sp, #8
   14f88:	push	{sp, lr}
   14f8c:	bl	14fb0 <__mempcpy_chk@plt+0x3ecc>
   14f90:	ldr	lr, [sp, #4]
   14f94:	add	sp, sp, #8
   14f98:	pop	{r2, r3}
   14f9c:	bx	lr
   14fa0:	push	{r1, lr}
   14fa4:	mov	r0, #8
   14fa8:	bl	10e80 <raise@plt>
   14fac:	pop	{r1, pc}
   14fb0:	cmp	r1, r3
   14fb4:	cmpeq	r0, r2
   14fb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fbc:	mov	r4, r0
   14fc0:	movcc	r0, #0
   14fc4:	mov	r5, r1
   14fc8:	ldr	lr, [sp, #36]	; 0x24
   14fcc:	movcc	r1, r0
   14fd0:	bcc	150cc <__mempcpy_chk@plt+0x3fe8>
   14fd4:	cmp	r3, #0
   14fd8:	clzeq	ip, r2
   14fdc:	clzne	ip, r3
   14fe0:	addeq	ip, ip, #32
   14fe4:	cmp	r5, #0
   14fe8:	clzeq	r1, r4
   14fec:	addeq	r1, r1, #32
   14ff0:	clzne	r1, r5
   14ff4:	sub	ip, ip, r1
   14ff8:	sub	sl, ip, #32
   14ffc:	lsl	r9, r3, ip
   15000:	rsb	fp, ip, #32
   15004:	orr	r9, r9, r2, lsl sl
   15008:	orr	r9, r9, r2, lsr fp
   1500c:	lsl	r8, r2, ip
   15010:	cmp	r5, r9
   15014:	cmpeq	r4, r8
   15018:	movcc	r0, #0
   1501c:	movcc	r1, r0
   15020:	bcc	1503c <__mempcpy_chk@plt+0x3f58>
   15024:	mov	r0, #1
   15028:	subs	r4, r4, r8
   1502c:	lsl	r1, r0, sl
   15030:	orr	r1, r1, r0, lsr fp
   15034:	lsl	r0, r0, ip
   15038:	sbc	r5, r5, r9
   1503c:	cmp	ip, #0
   15040:	beq	150cc <__mempcpy_chk@plt+0x3fe8>
   15044:	lsr	r6, r8, #1
   15048:	orr	r6, r6, r9, lsl #31
   1504c:	lsr	r7, r9, #1
   15050:	mov	r2, ip
   15054:	b	15078 <__mempcpy_chk@plt+0x3f94>
   15058:	subs	r3, r4, r6
   1505c:	sbc	r8, r5, r7
   15060:	adds	r3, r3, r3
   15064:	adc	r8, r8, r8
   15068:	adds	r4, r3, #1
   1506c:	adc	r5, r8, #0
   15070:	subs	r2, r2, #1
   15074:	beq	15094 <__mempcpy_chk@plt+0x3fb0>
   15078:	cmp	r5, r7
   1507c:	cmpeq	r4, r6
   15080:	bcs	15058 <__mempcpy_chk@plt+0x3f74>
   15084:	adds	r4, r4, r4
   15088:	adc	r5, r5, r5
   1508c:	subs	r2, r2, #1
   15090:	bne	15078 <__mempcpy_chk@plt+0x3f94>
   15094:	lsr	r3, r4, ip
   15098:	orr	r3, r3, r5, lsl fp
   1509c:	lsr	r2, r5, ip
   150a0:	orr	r3, r3, r5, lsr sl
   150a4:	adds	r0, r0, r4
   150a8:	mov	r4, r3
   150ac:	lsl	r3, r2, ip
   150b0:	orr	r3, r3, r4, lsl sl
   150b4:	lsl	ip, r4, ip
   150b8:	orr	r3, r3, r4, lsr fp
   150bc:	adc	r1, r1, r5
   150c0:	subs	r0, r0, ip
   150c4:	mov	r5, r2
   150c8:	sbc	r1, r1, r3
   150cc:	cmp	lr, #0
   150d0:	strdne	r4, [lr]
   150d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150d8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   150dc:	mov	r7, r0
   150e0:	ldr	r6, [pc, #72]	; 15130 <__mempcpy_chk@plt+0x404c>
   150e4:	ldr	r5, [pc, #72]	; 15134 <__mempcpy_chk@plt+0x4050>
   150e8:	add	r6, pc, r6
   150ec:	add	r5, pc, r5
   150f0:	sub	r6, r6, r5
   150f4:	mov	r8, r1
   150f8:	mov	r9, r2
   150fc:	bl	10e48 <calloc@plt-0x20>
   15100:	asrs	r6, r6, #2
   15104:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15108:	mov	r4, #0
   1510c:	add	r4, r4, #1
   15110:	ldr	r3, [r5], #4
   15114:	mov	r2, r9
   15118:	mov	r1, r8
   1511c:	mov	r0, r7
   15120:	blx	r3
   15124:	cmp	r6, r4
   15128:	bne	1510c <__mempcpy_chk@plt+0x4028>
   1512c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15130:	andeq	r1, r1, ip, lsl lr
   15134:	andeq	r1, r1, r4, lsl lr
   15138:	bx	lr
   1513c:	ldr	r3, [pc, #12]	; 15150 <__mempcpy_chk@plt+0x406c>
   15140:	mov	r1, #0
   15144:	add	r3, pc, r3
   15148:	ldr	r2, [r3]
   1514c:	b	11000 <__cxa_atexit@plt>
   15150:	andeq	r1, r1, r0, lsr #31
   15154:	mov	r2, r1
   15158:	mov	r1, r0
   1515c:	mov	r0, #3
   15160:	b	110cc <__lxstat64@plt>

Disassembly of section .fini:

00015164 <.fini>:
   15164:	push	{r3, lr}
   15168:	pop	{r3, pc}
