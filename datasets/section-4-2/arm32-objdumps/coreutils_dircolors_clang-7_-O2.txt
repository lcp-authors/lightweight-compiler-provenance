
../repos/coreutils/src/dircolors:     file format elf32-littlearm


Disassembly of section .init:

00010e90 <.init>:
   10e90:	push	{r3, lr}
   10e94:	bl	11144 <close@plt+0x48>
   10e98:	pop	{r3, pc}

Disassembly of section .plt:

00010e9c <calloc@plt-0x14>:
   10e9c:	push	{lr}		; (str lr, [sp, #-4]!)
   10ea0:	ldr	lr, [pc, #4]	; 10eac <calloc@plt-0x4>
   10ea4:	add	lr, pc, lr
   10ea8:	ldr	pc, [lr, #8]!
   10eac:	andeq	r7, r1, r4, asr r1

00010eb0 <calloc@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #94208	; 0x17000
   10eb8:	ldr	pc, [ip, #340]!	; 0x154

00010ebc <fputs_unlocked@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #94208	; 0x17000
   10ec4:	ldr	pc, [ip, #332]!	; 0x14c

00010ec8 <__getdelim@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #94208	; 0x17000
   10ed0:	ldr	pc, [ip, #324]!	; 0x144

00010ed4 <strcmp@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #94208	; 0x17000
   10edc:	ldr	pc, [ip, #316]!	; 0x13c

00010ee0 <fflush@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #94208	; 0x17000
   10ee8:	ldr	pc, [ip, #308]!	; 0x134

00010eec <free@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #94208	; 0x17000
   10ef4:	ldr	pc, [ip, #300]!	; 0x12c

00010ef8 <_exit@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #94208	; 0x17000
   10f00:	ldr	pc, [ip, #292]!	; 0x124

00010f04 <memcpy@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #94208	; 0x17000
   10f0c:	ldr	pc, [ip, #284]!	; 0x11c

00010f10 <mbsinit@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #94208	; 0x17000
   10f18:	ldr	pc, [ip, #276]!	; 0x114

00010f1c <fwrite_unlocked@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #94208	; 0x17000
   10f24:	ldr	pc, [ip, #268]!	; 0x10c

00010f28 <memcmp@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #94208	; 0x17000
   10f30:	ldr	pc, [ip, #260]!	; 0x104

00010f34 <dcgettext@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #94208	; 0x17000
   10f3c:	ldr	pc, [ip, #252]!	; 0xfc

00010f40 <dup2@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #94208	; 0x17000
   10f48:	ldr	pc, [ip, #244]!	; 0xf4

00010f4c <realloc@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #94208	; 0x17000
   10f54:	ldr	pc, [ip, #236]!	; 0xec

00010f58 <textdomain@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #94208	; 0x17000
   10f60:	ldr	pc, [ip, #228]!	; 0xe4

00010f64 <iswprint@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #94208	; 0x17000
   10f6c:	ldr	pc, [ip, #220]!	; 0xdc

00010f70 <fwrite@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #94208	; 0x17000
   10f78:	ldr	pc, [ip, #212]!	; 0xd4

00010f7c <lseek64@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #94208	; 0x17000
   10f84:	ldr	pc, [ip, #204]!	; 0xcc

00010f88 <__ctype_get_mb_cur_max@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #94208	; 0x17000
   10f90:	ldr	pc, [ip, #196]!	; 0xc4

00010f94 <__fpending@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #94208	; 0x17000
   10f9c:	ldr	pc, [ip, #188]!	; 0xbc

00010fa0 <mbrtowc@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #94208	; 0x17000
   10fa8:	ldr	pc, [ip, #180]!	; 0xb4

00010fac <error@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #94208	; 0x17000
   10fb4:	ldr	pc, [ip, #172]!	; 0xac

00010fb8 <fnmatch@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #94208	; 0x17000
   10fc0:	ldr	pc, [ip, #164]!	; 0xa4

00010fc4 <open64@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #94208	; 0x17000
   10fcc:	ldr	pc, [ip, #156]!	; 0x9c

00010fd0 <getenv@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #94208	; 0x17000
   10fd8:	ldr	pc, [ip, #148]!	; 0x94

00010fdc <puts@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #94208	; 0x17000
   10fe4:	ldr	pc, [ip, #140]!	; 0x8c

00010fe8 <malloc@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #94208	; 0x17000
   10ff0:	ldr	pc, [ip, #132]!	; 0x84

00010ff4 <__libc_start_main@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #94208	; 0x17000
   10ffc:	ldr	pc, [ip, #124]!	; 0x7c

00011000 <__freading@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #94208	; 0x17000
   11008:	ldr	pc, [ip, #116]!	; 0x74

0001100c <__gmon_start__@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #94208	; 0x17000
   11014:	ldr	pc, [ip, #108]!	; 0x6c

00011018 <freopen64@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #94208	; 0x17000
   11020:	ldr	pc, [ip, #100]!	; 0x64

00011024 <getopt_long@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #94208	; 0x17000
   1102c:	ldr	pc, [ip, #92]!	; 0x5c

00011030 <__ctype_b_loc@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #94208	; 0x17000
   11038:	ldr	pc, [ip, #84]!	; 0x54

0001103c <exit@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #94208	; 0x17000
   11044:	ldr	pc, [ip, #76]!	; 0x4c

00011048 <strlen@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #94208	; 0x17000
   11050:	ldr	pc, [ip, #68]!	; 0x44

00011054 <__errno_location@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #94208	; 0x17000
   1105c:	ldr	pc, [ip, #60]!	; 0x3c

00011060 <__cxa_atexit@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #94208	; 0x17000
   11068:	ldr	pc, [ip, #52]!	; 0x34

0001106c <memset@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #94208	; 0x17000
   11074:	ldr	pc, [ip, #44]!	; 0x2c

00011078 <__printf_chk@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #94208	; 0x17000
   11080:	ldr	pc, [ip, #36]!	; 0x24

00011084 <fileno@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #94208	; 0x17000
   1108c:	ldr	pc, [ip, #28]!

00011090 <__fprintf_chk@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #94208	; 0x17000
   11098:	ldr	pc, [ip, #20]!

0001109c <fclose@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #94208	; 0x17000
   110a4:	ldr	pc, [ip, #12]!

000110a8 <fseeko64@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #94208	; 0x17000
   110b0:	ldr	pc, [ip, #4]!

000110b4 <setlocale@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #90112	; 0x16000
   110bc:	ldr	pc, [ip, #4092]!	; 0xffc

000110c0 <strrchr@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #90112	; 0x16000
   110c8:	ldr	pc, [ip, #4084]!	; 0xff4

000110cc <nl_langinfo@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #90112	; 0x16000
   110d4:	ldr	pc, [ip, #4076]!	; 0xfec

000110d8 <bindtextdomain@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #90112	; 0x16000
   110e0:	ldr	pc, [ip, #4068]!	; 0xfe4

000110e4 <strncmp@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #90112	; 0x16000
   110ec:	ldr	pc, [ip, #4060]!	; 0xfdc

000110f0 <abort@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #90112	; 0x16000
   110f8:	ldr	pc, [ip, #4052]!	; 0xfd4

000110fc <close@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #90112	; 0x16000
   11104:	ldr	pc, [ip, #4044]!	; 0xfcc

Disassembly of section .text:

00011108 <_obstack_begin@@Base-0x14c0>:
   11108:	mov	fp, #0
   1110c:	mov	lr, #0
   11110:	pop	{r1}		; (ldr r1, [sp], #4)
   11114:	mov	r2, sp
   11118:	push	{r2}		; (str r2, [sp, #-4]!)
   1111c:	push	{r0}		; (str r0, [sp, #-4]!)
   11120:	ldr	ip, [pc, #16]	; 11138 <close@plt+0x3c>
   11124:	push	{ip}		; (str ip, [sp, #-4]!)
   11128:	ldr	r0, [pc, #12]	; 1113c <close@plt+0x40>
   1112c:	ldr	r3, [pc, #12]	; 11140 <close@plt+0x44>
   11130:	bl	10ff4 <__libc_start_main@plt>
   11134:	bl	110f0 <abort@plt>
   11138:	andeq	r5, r1, r8, lsl r7
   1113c:	andeq	r1, r1, r8, asr r4
   11140:			; <UNDEFINED> instruction: 0x000156b8
   11144:	ldr	r3, [pc, #20]	; 11160 <close@plt+0x64>
   11148:	ldr	r2, [pc, #20]	; 11164 <close@plt+0x68>
   1114c:	add	r3, pc, r3
   11150:	ldr	r2, [r3, r2]
   11154:	cmp	r2, #0
   11158:	bxeq	lr
   1115c:	b	1100c <__gmon_start__@plt>
   11160:	andeq	r6, r1, ip, lsr #29
   11164:	ldrdeq	r0, [r0], -r4
   11168:	ldr	r0, [pc, #24]	; 11188 <close@plt+0x8c>
   1116c:	ldr	r3, [pc, #24]	; 1118c <close@plt+0x90>
   11170:	cmp	r3, r0
   11174:	bxeq	lr
   11178:	ldr	r3, [pc, #16]	; 11190 <close@plt+0x94>
   1117c:	cmp	r3, #0
   11180:	bxeq	lr
   11184:	bx	r3
   11188:	andeq	r8, r2, r0, lsr r1
   1118c:	andeq	r8, r2, r0, lsr r1
   11190:	andeq	r0, r0, r0
   11194:	ldr	r0, [pc, #36]	; 111c0 <close@plt+0xc4>
   11198:	ldr	r1, [pc, #36]	; 111c4 <close@plt+0xc8>
   1119c:	sub	r1, r1, r0
   111a0:	asr	r1, r1, #2
   111a4:	add	r1, r1, r1, lsr #31
   111a8:	asrs	r1, r1, #1
   111ac:	bxeq	lr
   111b0:	ldr	r3, [pc, #16]	; 111c8 <close@plt+0xcc>
   111b4:	cmp	r3, #0
   111b8:	bxeq	lr
   111bc:	bx	r3
   111c0:	andeq	r8, r2, r0, lsr r1
   111c4:	andeq	r8, r2, r0, lsr r1
   111c8:	andeq	r0, r0, r0
   111cc:	push	{r4, lr}
   111d0:	ldr	r4, [pc, #24]	; 111f0 <close@plt+0xf4>
   111d4:	ldrb	r3, [r4]
   111d8:	cmp	r3, #0
   111dc:	popne	{r4, pc}
   111e0:	bl	11168 <close@plt+0x6c>
   111e4:	mov	r3, #1
   111e8:	strb	r3, [r4]
   111ec:	pop	{r4, pc}
   111f0:	andeq	r8, r2, r0, asr r1
   111f4:	b	11194 <close@plt+0x98>
   111f8:	push	{fp, lr}
   111fc:	mov	fp, sp
   11200:	sub	sp, sp, #56	; 0x38
   11204:	mov	r4, r0
   11208:	cmp	r0, #0
   1120c:	bne	11414 <close@plt+0x318>
   11210:	movw	r1, #22379	; 0x576b
   11214:	mov	r0, #0
   11218:	mov	r2, #5
   1121c:	movt	r1, #1
   11220:	bl	10f34 <dcgettext@plt>
   11224:	mov	r1, r0
   11228:	movw	r0, #33160	; 0x8188
   1122c:	movt	r0, #2
   11230:	ldr	r2, [r0]
   11234:	mov	r0, #1
   11238:	bl	11078 <__printf_chk@plt>
   1123c:	movw	r1, #22409	; 0x5789
   11240:	mov	r0, #0
   11244:	mov	r2, #5
   11248:	movt	r1, #1
   1124c:	bl	10f34 <dcgettext@plt>
   11250:	movw	r7, #33100	; 0x814c
   11254:	movt	r7, #2
   11258:	ldr	r1, [r7]
   1125c:	bl	10ebc <fputs_unlocked@plt>
   11260:	movw	r1, #22683	; 0x589b
   11264:	mov	r0, #0
   11268:	mov	r2, #5
   1126c:	movt	r1, #1
   11270:	bl	10f34 <dcgettext@plt>
   11274:	ldr	r1, [r7]
   11278:	bl	10ebc <fputs_unlocked@plt>
   1127c:	movw	r1, #22728	; 0x58c8
   11280:	mov	r0, #0
   11284:	mov	r2, #5
   11288:	movt	r1, #1
   1128c:	bl	10f34 <dcgettext@plt>
   11290:	ldr	r1, [r7]
   11294:	bl	10ebc <fputs_unlocked@plt>
   11298:	movw	r1, #22782	; 0x58fe
   1129c:	mov	r0, #0
   112a0:	mov	r2, #5
   112a4:	movt	r1, #1
   112a8:	bl	10f34 <dcgettext@plt>
   112ac:	ldr	r1, [r7]
   112b0:	bl	10ebc <fputs_unlocked@plt>
   112b4:	movw	r0, #28600	; 0x6fb8
   112b8:	mov	r2, #48	; 0x30
   112bc:	mov	r6, sp
   112c0:	movw	r5, #23004	; 0x59dc
   112c4:	movt	r0, #1
   112c8:	movt	r5, #1
   112cc:	add	r1, r0, #32
   112d0:	add	r3, r0, #16
   112d4:	vld1.64	{d18-d19}, [r0], r2
   112d8:	vld1.64	{d16-d17}, [r1]
   112dc:	vld1.64	{d20-d21}, [r3]
   112e0:	add	r1, r6, #32
   112e4:	vldr	d22, [r0]
   112e8:	add	r0, r6, #16
   112ec:	vst1.64	{d16-d17}, [r1]
   112f0:	movw	r1, #23365	; 0x5b45
   112f4:	vst1.64	{d20-d21}, [r0]
   112f8:	mov	r0, r6
   112fc:	vst1.64	{d18-d19}, [r0], r2
   11300:	movt	r1, #1
   11304:	vstr	d22, [r0]
   11308:	mov	r0, r5
   1130c:	bl	10ed4 <strcmp@plt>
   11310:	cmp	r0, #0
   11314:	ldrne	r1, [r6, #8]!
   11318:	cmpne	r1, #0
   1131c:	bne	11308 <close@plt+0x20c>
   11320:	ldr	r6, [r6, #4]
   11324:	movw	r1, #23460	; 0x5ba4
   11328:	mov	r0, #0
   1132c:	mov	r2, #5
   11330:	movt	r1, #1
   11334:	bl	10f34 <dcgettext@plt>
   11338:	movw	r2, #23042	; 0x5a02
   1133c:	movw	r3, #23483	; 0x5bbb
   11340:	mov	r1, r0
   11344:	mov	r0, #1
   11348:	movt	r2, #1
   1134c:	movt	r3, #1
   11350:	bl	11078 <__printf_chk@plt>
   11354:	cmp	r6, #0
   11358:	mov	r0, #5
   1135c:	mov	r1, #0
   11360:	moveq	r6, r5
   11364:	bl	110b4 <setlocale@plt>
   11368:	cmp	r0, #0
   1136c:	beq	113a4 <close@plt+0x2a8>
   11370:	movw	r1, #23523	; 0x5be3
   11374:	mov	r2, #3
   11378:	movt	r1, #1
   1137c:	bl	110e4 <strncmp@plt>
   11380:	cmp	r0, #0
   11384:	beq	113a4 <close@plt+0x2a8>
   11388:	movw	r1, #23527	; 0x5be7
   1138c:	mov	r0, #0
   11390:	mov	r2, #5
   11394:	movt	r1, #1
   11398:	bl	10f34 <dcgettext@plt>
   1139c:	ldr	r1, [r7]
   113a0:	bl	10ebc <fputs_unlocked@plt>
   113a4:	movw	r1, #23598	; 0x5c2e
   113a8:	mov	r0, #0
   113ac:	mov	r2, #5
   113b0:	movt	r1, #1
   113b4:	bl	10f34 <dcgettext@plt>
   113b8:	movw	r2, #23483	; 0x5bbb
   113bc:	mov	r1, r0
   113c0:	mov	r0, #1
   113c4:	mov	r3, r5
   113c8:	movt	r2, #1
   113cc:	bl	11078 <__printf_chk@plt>
   113d0:	movw	r1, #23625	; 0x5c49
   113d4:	mov	r0, #0
   113d8:	mov	r2, #5
   113dc:	movt	r1, #1
   113e0:	bl	10f34 <dcgettext@plt>
   113e4:	movw	r3, #23675	; 0x5c7b
   113e8:	mov	r1, r0
   113ec:	movw	r0, #23393	; 0x5b61
   113f0:	cmp	r6, r5
   113f4:	mov	r2, r6
   113f8:	movt	r0, #1
   113fc:	movt	r3, #1
   11400:	moveq	r3, r0
   11404:	mov	r0, #1
   11408:	bl	11078 <__printf_chk@plt>
   1140c:	mov	r0, r4
   11410:	bl	1103c <exit@plt>
   11414:	movw	r0, #33088	; 0x8140
   11418:	movw	r1, #22340	; 0x5744
   1141c:	mov	r2, #5
   11420:	movt	r0, #2
   11424:	movt	r1, #1
   11428:	ldr	r5, [r0]
   1142c:	mov	r0, #0
   11430:	bl	10f34 <dcgettext@plt>
   11434:	mov	r2, r0
   11438:	movw	r0, #33160	; 0x8188
   1143c:	mov	r1, #1
   11440:	movt	r0, #2
   11444:	ldr	r3, [r0]
   11448:	mov	r0, r5
   1144c:	bl	11090 <__fprintf_chk@plt>
   11450:	mov	r0, r4
   11454:	bl	1103c <exit@plt>
   11458:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1145c:	add	fp, sp, #28
   11460:	sub	sp, sp, #12
   11464:	mov	sl, r0
   11468:	ldr	r0, [r1]
   1146c:	mov	r5, r1
   11470:	bl	129b8 <_obstack_memory_used@@Base+0x78>
   11474:	movw	r1, #23675	; 0x5c7b
   11478:	mov	r0, #6
   1147c:	movt	r1, #1
   11480:	bl	110b4 <setlocale@plt>
   11484:	movw	r6, #23046	; 0x5a06
   11488:	movw	r1, #23014	; 0x59e6
   1148c:	movt	r6, #1
   11490:	movt	r1, #1
   11494:	mov	r0, r6
   11498:	bl	110d8 <bindtextdomain@plt>
   1149c:	mov	r0, r6
   114a0:	bl	10f58 <textdomain@plt>
   114a4:	movw	r0, #8404	; 0x20d4
   114a8:	movt	r0, #1
   114ac:	bl	1571c <_obstack_memory_used@@Base+0x2ddc>
   114b0:	movw	r8, #23038	; 0x59fe
   114b4:	movw	r9, #24160	; 0x5e60
   114b8:	mov	r6, #2
   114bc:	mov	r7, #0
   114c0:	movt	r8, #1
   114c4:	movt	r9, #1
   114c8:	b	114d4 <close@plt+0x3d8>
   114cc:	mov	r7, #1
   114d0:	mov	r6, r4
   114d4:	mov	r4, r6
   114d8:	mov	r6, #0
   114dc:	mov	r0, sl
   114e0:	mov	r1, r5
   114e4:	mov	r2, r8
   114e8:	mov	r3, r9
   114ec:	str	r6, [sp]
   114f0:	bl	11024 <getopt_long@plt>
   114f4:	cmp	r0, #97	; 0x61
   114f8:	ble	1151c <close@plt+0x420>
   114fc:	cmp	r0, #98	; 0x62
   11500:	beq	114d4 <close@plt+0x3d8>
   11504:	cmp	r0, #112	; 0x70
   11508:	beq	114cc <close@plt+0x3d0>
   1150c:	cmp	r0, #99	; 0x63
   11510:	bne	118d8 <close@plt+0x7dc>
   11514:	mov	r6, #1
   11518:	b	114d4 <close@plt+0x3d8>
   1151c:	cmn	r0, #1
   11520:	bne	117d8 <close@plt+0x6dc>
   11524:	sub	r1, r4, #2
   11528:	mvn	r0, r7
   1152c:	clz	r1, r1
   11530:	lsr	r1, r1, #5
   11534:	orr	r0, r0, r1
   11538:	tst	r0, #1
   1153c:	beq	11838 <close@plt+0x73c>
   11540:	movw	r0, #33080	; 0x8138
   11544:	movt	r0, #2
   11548:	ldr	r0, [r0]
   1154c:	add	r8, r5, r0, lsl #2
   11550:	sub	r5, sl, r0
   11554:	mov	r0, #1
   11558:	bic	r6, r0, r7
   1155c:	cmp	r5, r6
   11560:	bgt	11864 <close@plt+0x768>
   11564:	tst	r7, #1
   11568:	beq	115ac <close@plt+0x4b0>
   1156c:	movw	r5, #24288	; 0x5ee0
   11570:	movw	r6, #4310	; 0x10d6
   11574:	movt	r5, #1
   11578:	mov	r4, r5
   1157c:	mov	r0, r4
   11580:	bl	10fdc <puts@plt>
   11584:	mov	r0, r4
   11588:	bl	11048 <strlen@plt>
   1158c:	add	r0, r4, r0
   11590:	add	r4, r0, #1
   11594:	sub	r0, r4, r5
   11598:	cmp	r0, r6
   1159c:	bcc	1157c <close@plt+0x480>
   115a0:	mov	r0, #0
   115a4:	sub	sp, fp, #28
   115a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115ac:	cmp	r4, #2
   115b0:	bne	11630 <close@plt+0x534>
   115b4:	movw	r0, #23725	; 0x5cad
   115b8:	movt	r0, #1
   115bc:	bl	10fd0 <getenv@plt>
   115c0:	cmp	r0, #0
   115c4:	ldrbne	r1, [r0]
   115c8:	cmpne	r1, #0
   115cc:	bne	115f4 <close@plt+0x4f8>
   115d0:	movw	r1, #23251	; 0x5ad3
   115d4:	mov	r0, #0
   115d8:	mov	r2, #5
   115dc:	movt	r1, #1
   115e0:	bl	10f34 <dcgettext@plt>
   115e4:	mov	r2, r0
   115e8:	mov	r0, #1
   115ec:	mov	r1, #0
   115f0:	bl	10fac <error@plt>
   115f4:	bl	11fdc <close@plt+0xee0>
   115f8:	movw	r1, #23732	; 0x5cb4
   115fc:	mov	r4, r0
   11600:	movt	r1, #1
   11604:	bl	10ed4 <strcmp@plt>
   11608:	cmp	r0, #0
   1160c:	beq	1162c <close@plt+0x530>
   11610:	movw	r1, #23731	; 0x5cb3
   11614:	mov	r0, r4
   11618:	movt	r1, #1
   1161c:	bl	10ed4 <strcmp@plt>
   11620:	clz	r0, r0
   11624:	lsr	r4, r0, #5
   11628:	b	11630 <close@plt+0x534>
   1162c:	mov	r4, #1
   11630:	movw	r0, #8884	; 0x22b4
   11634:	movw	r9, #33108	; 0x8154
   11638:	movw	r3, #21460	; 0x53d4
   1163c:	mov	r1, #0
   11640:	mov	r2, #0
   11644:	movt	r0, #1
   11648:	movt	r9, #2
   1164c:	movt	r3, #1
   11650:	str	r0, [sp]
   11654:	mov	r0, r9
   11658:	bl	125c8 <_obstack_begin@@Base>
   1165c:	cmp	r5, #0
   11660:	beq	11708 <close@plt+0x60c>
   11664:	ldr	r5, [r8]
   11668:	movw	r1, #29087	; 0x719f
   1166c:	movt	r1, #1
   11670:	mov	r0, r5
   11674:	bl	10ed4 <strcmp@plt>
   11678:	cmp	r0, #0
   1167c:	beq	116a4 <close@plt+0x5a8>
   11680:	movw	r0, #33096	; 0x8148
   11684:	movw	r1, #28985	; 0x7139
   11688:	movt	r0, #2
   1168c:	movt	r1, #1
   11690:	ldr	r2, [r0]
   11694:	mov	r0, r5
   11698:	bl	122dc <close@plt+0x11e0>
   1169c:	cmp	r0, #0
   116a0:	beq	116cc <close@plt+0x5d0>
   116a4:	movw	r6, #33096	; 0x8148
   116a8:	mov	r1, r5
   116ac:	movt	r6, #2
   116b0:	ldr	r0, [r6]
   116b4:	bl	118e0 <close@plt+0x7e4>
   116b8:	mov	r7, r0
   116bc:	ldr	r0, [r6]
   116c0:	bl	121bc <close@plt+0x10c0>
   116c4:	cmp	r0, #0
   116c8:	beq	11728 <close@plt+0x62c>
   116cc:	bl	11054 <__errno_location@plt>
   116d0:	ldr	r4, [r0]
   116d4:	mov	r0, #0
   116d8:	mov	r1, #3
   116dc:	mov	r2, r5
   116e0:	bl	14340 <_obstack_memory_used@@Base+0x1a00>
   116e4:	movw	r2, #28991	; 0x713f
   116e8:	mov	r3, r0
   116ec:	mov	r0, #0
   116f0:	mov	r1, r4
   116f4:	movt	r2, #1
   116f8:	bl	10fac <error@plt>
   116fc:	mov	r0, #1
   11700:	sub	sp, fp, #28
   11704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11708:	mov	r0, #0
   1170c:	mov	r1, #0
   11710:	bl	118e0 <close@plt+0x7e4>
   11714:	mov	r1, r0
   11718:	mov	r0, #1
   1171c:	cmp	r1, #0
   11720:	beq	115a4 <close@plt+0x4a8>
   11724:	b	11734 <close@plt+0x638>
   11728:	mov	r0, #1
   1172c:	cmp	r7, #0
   11730:	beq	115a4 <close@plt+0x4a8>
   11734:	ldr	r5, [r9, #8]
   11738:	ldr	r0, [r9, #12]
   1173c:	movw	r6, #33100	; 0x814c
   11740:	movt	r6, #2
   11744:	subs	r7, r0, r5
   11748:	ldrbeq	r1, [r9, #40]	; 0x28
   1174c:	orreq	r1, r1, #2
   11750:	strbeq	r1, [r9, #40]	; 0x28
   11754:	ldr	r3, [r9, #24]
   11758:	ldr	r1, [r9, #4]
   1175c:	ldr	r2, [r9, #16]
   11760:	add	r0, r3, r0
   11764:	bic	r0, r0, r3
   11768:	sub	r3, r0, r1
   1176c:	sub	r1, r2, r1
   11770:	cmp	r3, r1
   11774:	movw	r1, #23313	; 0x5b11
   11778:	movhi	r0, r2
   1177c:	movt	r1, #1
   11780:	cmp	r4, #0
   11784:	str	r0, [r9, #8]
   11788:	str	r0, [r9, #12]
   1178c:	movw	r0, #23346	; 0x5b32
   11790:	movt	r0, #1
   11794:	moveq	r0, r1
   11798:	ldr	r1, [r6]
   1179c:	bl	10ebc <fputs_unlocked@plt>
   117a0:	ldr	r3, [r6]
   117a4:	mov	r0, r5
   117a8:	mov	r1, #1
   117ac:	mov	r2, r7
   117b0:	bl	10f1c <fwrite_unlocked@plt>
   117b4:	movw	r1, #23325	; 0x5b1d
   117b8:	movw	r0, #23673	; 0x5c79
   117bc:	cmp	r4, #0
   117c0:	movt	r1, #1
   117c4:	movt	r0, #1
   117c8:	moveq	r0, r1
   117cc:	ldr	r1, [r6]
   117d0:	bl	10ebc <fputs_unlocked@plt>
   117d4:	b	115a0 <close@plt+0x4a4>
   117d8:	cmn	r0, #3
   117dc:	bne	11828 <close@plt+0x72c>
   117e0:	movw	r0, #32992	; 0x80e0
   117e4:	movw	r2, #23056	; 0x5a10
   117e8:	mov	r1, #0
   117ec:	movt	r0, #2
   117f0:	movt	r2, #1
   117f4:	str	r1, [sp, #4]
   117f8:	movw	r1, #23004	; 0x59dc
   117fc:	ldr	r3, [r0]
   11800:	movw	r0, #33100	; 0x814c
   11804:	str	r2, [sp]
   11808:	movw	r2, #23042	; 0x5a02
   1180c:	movt	r1, #1
   11810:	movt	r0, #2
   11814:	movt	r2, #1
   11818:	ldr	r0, [r0]
   1181c:	bl	14ba8 <_obstack_memory_used@@Base+0x2268>
   11820:	mov	r0, #0
   11824:	bl	1103c <exit@plt>
   11828:	cmn	r0, #2
   1182c:	bne	118d8 <close@plt+0x7dc>
   11830:	mov	r0, #0
   11834:	bl	111f8 <close@plt+0xfc>
   11838:	movw	r1, #23071	; 0x5a1f
   1183c:	mov	r0, #0
   11840:	mov	r2, #5
   11844:	movt	r1, #1
   11848:	bl	10f34 <dcgettext@plt>
   1184c:	mov	r2, r0
   11850:	mov	r0, #0
   11854:	mov	r1, #0
   11858:	bl	10fac <error@plt>
   1185c:	mov	r0, #1
   11860:	bl	111f8 <close@plt+0xfc>
   11864:	movw	r1, #23174	; 0x5a86
   11868:	mov	r0, #0
   1186c:	mov	r2, #5
   11870:	movt	r1, #1
   11874:	bl	10f34 <dcgettext@plt>
   11878:	mov	r4, r0
   1187c:	ldr	r0, [r8, r6, lsl #2]
   11880:	bl	145ec <_obstack_memory_used@@Base+0x1cac>
   11884:	mov	r3, r0
   11888:	mov	r0, #0
   1188c:	mov	r1, #0
   11890:	mov	r2, r4
   11894:	bl	10fac <error@plt>
   11898:	tst	r7, #1
   1189c:	beq	118d8 <close@plt+0x7dc>
   118a0:	movw	r0, #33088	; 0x8140
   118a4:	movw	r1, #23191	; 0x5a97
   118a8:	mov	r2, #5
   118ac:	movt	r0, #2
   118b0:	movt	r1, #1
   118b4:	ldr	r4, [r0]
   118b8:	mov	r0, #0
   118bc:	bl	10f34 <dcgettext@plt>
   118c0:	movw	r2, #29272	; 0x7258
   118c4:	mov	r3, r0
   118c8:	mov	r0, r4
   118cc:	mov	r1, #1
   118d0:	movt	r2, #1
   118d4:	bl	11090 <__fprintf_chk@plt>
   118d8:	mov	r0, #1
   118dc:	bl	111f8 <close@plt+0xfc>
   118e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118e4:	add	fp, sp, #28
   118e8:	sub	sp, sp, #44	; 0x2c
   118ec:	mov	r5, r0
   118f0:	mov	r0, #0
   118f4:	mov	sl, r1
   118f8:	str	r0, [fp, #-32]	; 0xffffffe0
   118fc:	str	r0, [sp, #36]	; 0x24
   11900:	movw	r0, #23736	; 0x5cb8
   11904:	movt	r0, #1
   11908:	bl	10fd0 <getenv@plt>
   1190c:	cmp	r0, #0
   11910:	ldrbne	r1, [r0]
   11914:	cmpne	r1, #0
   11918:	bne	11924 <close@plt+0x828>
   1191c:	movw	r0, #23741	; 0x5cbd
   11920:	movt	r0, #1
   11924:	str	r0, [sp, #12]
   11928:	mov	r0, #1
   1192c:	movw	r7, #24288	; 0x5ee0
   11930:	mov	r9, #0
   11934:	str	r0, [sp, #28]
   11938:	mov	r0, #3
   1193c:	movt	r7, #1
   11940:	str	r0, [sp, #16]
   11944:	movw	r0, #4310	; 0x10d6
   11948:	add	r0, r7, r0
   1194c:	str	r0, [sp, #32]
   11950:	b	119a8 <close@plt+0x8ac>
   11954:	movw	r1, #23746	; 0x5cc2
   11958:	mov	r0, #0
   1195c:	mov	r2, #5
   11960:	str	r0, [sp, #28]
   11964:	mov	r0, #0
   11968:	movt	r1, #1
   1196c:	bl	10f34 <dcgettext@plt>
   11970:	ldr	sl, [sp, #24]
   11974:	mov	r4, r0
   11978:	mov	r0, #0
   1197c:	mov	r1, #3
   11980:	mov	r2, sl
   11984:	bl	14340 <_obstack_memory_used@@Base+0x1a00>
   11988:	mov	r3, r0
   1198c:	mov	r0, #0
   11990:	mov	r1, #0
   11994:	mov	r2, r4
   11998:	str	r9, [sp]
   1199c:	bl	10fac <error@plt>
   119a0:	ldr	r0, [sp, #20]
   119a4:	bl	122b4 <close@plt+0x11b8>
   119a8:	cmp	r5, #0
   119ac:	beq	119d8 <close@plt+0x8dc>
   119b0:	sub	r0, fp, #32
   119b4:	add	r1, sp, #36	; 0x24
   119b8:	mov	r2, #10
   119bc:	mov	r3, r5
   119c0:	bl	10ec8 <__getdelim@plt>
   119c4:	mov	r1, r0
   119c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   119cc:	cmp	r1, #0
   119d0:	bgt	119fc <close@plt+0x900>
   119d4:	b	11dd8 <close@plt+0xcdc>
   119d8:	ldr	r0, [sp, #32]
   119dc:	cmp	r7, r0
   119e0:	beq	11ddc <close@plt+0xce0>
   119e4:	mov	r0, r7
   119e8:	bl	11048 <strlen@plt>
   119ec:	add	r0, r7, r0
   119f0:	add	r1, r0, #1
   119f4:	mov	r0, r7
   119f8:	mov	r7, r1
   119fc:	add	r9, r9, #1
   11a00:	add	r6, r0, #3
   11a04:	sub	r4, r0, #1
   11a08:	bl	11030 <__ctype_b_loc@plt>
   11a0c:	mov	r8, r0
   11a10:	ldr	r0, [r0]
   11a14:	ldrb	r2, [r4, #1]!
   11a18:	mov	r1, r6
   11a1c:	add	r6, r6, #1
   11a20:	add	r3, r0, r2, lsl #1
   11a24:	ldrb	r3, [r3, #1]
   11a28:	tst	r3, #32
   11a2c:	bne	11a14 <close@plt+0x918>
   11a30:	cmp	r2, #0
   11a34:	cmpne	r2, #35	; 0x23
   11a38:	beq	119a8 <close@plt+0x8ac>
   11a3c:	mov	r6, r4
   11a40:	str	sl, [sp, #24]
   11a44:	mov	sl, r1
   11a48:	ldrb	r1, [r6, #1]!
   11a4c:	cmp	r1, #0
   11a50:	beq	11a68 <close@plt+0x96c>
   11a54:	add	r1, r0, r1, lsl #1
   11a58:	ldrh	r1, [r1]
   11a5c:	ands	r1, r1, #8192	; 0x2000
   11a60:	add	r1, sl, #1
   11a64:	beq	11a44 <close@plt+0x948>
   11a68:	sub	r1, r6, r4
   11a6c:	mov	r0, r4
   11a70:	bl	152b4 <_obstack_memory_used@@Base+0x2974>
   11a74:	str	r0, [sp, #20]
   11a78:	ldrb	r0, [r6]
   11a7c:	cmp	r0, #0
   11a80:	beq	11954 <close@plt+0x858>
   11a84:	ldr	r0, [r8]
   11a88:	ldrb	r2, [r6, #1]!
   11a8c:	mov	r1, sl
   11a90:	add	sl, sl, #1
   11a94:	add	r3, r0, r2, lsl #1
   11a98:	ldrb	r3, [r3, #1]
   11a9c:	tst	r3, #32
   11aa0:	bne	11a88 <close@plt+0x98c>
   11aa4:	cmp	r2, #0
   11aa8:	cmpne	r2, #35	; 0x23
   11aac:	beq	11954 <close@plt+0x858>
   11ab0:	ldr	r8, [sp, #20]
   11ab4:	mov	r3, r6
   11ab8:	b	11ac4 <close@plt+0x9c8>
   11abc:	ldrb	r2, [r3, #1]!
   11ac0:	add	r1, r1, #1
   11ac4:	uxtb	r2, r2
   11ac8:	cmp	r2, #35	; 0x23
   11acc:	cmpne	r2, #0
   11ad0:	bne	11abc <close@plt+0x9c0>
   11ad4:	movw	r4, #33108	; 0x8154
   11ad8:	movt	r4, #2
   11adc:	ldrb	r2, [r1, #-2]
   11ae0:	sub	r1, r1, #1
   11ae4:	add	r2, r0, r2, lsl #1
   11ae8:	ldrb	r2, [r2, #1]
   11aec:	tst	r2, #32
   11af0:	bne	11adc <close@plt+0x9e0>
   11af4:	sub	r1, r1, r6
   11af8:	mov	r0, r6
   11afc:	bl	152b4 <_obstack_memory_used@@Base+0x2974>
   11b00:	movw	r1, #23736	; 0x5cb8
   11b04:	mov	r6, r0
   11b08:	mov	r0, r8
   11b0c:	movt	r1, #1
   11b10:	bl	12060 <close@plt+0xf64>
   11b14:	ldr	sl, [sp, #24]
   11b18:	cmp	r0, #0
   11b1c:	beq	11bf0 <close@plt+0xaf4>
   11b20:	ldr	r0, [sp, #16]
   11b24:	cmp	r0, #2
   11b28:	movweq	r0, #1
   11b2c:	cmp	r0, #0
   11b30:	beq	11c24 <close@plt+0xb28>
   11b34:	str	r0, [sp, #16]
   11b38:	ldrb	r0, [r8]
   11b3c:	cmp	r0, #42	; 0x2a
   11b40:	beq	11b7c <close@plt+0xa80>
   11b44:	cmp	r0, #46	; 0x2e
   11b48:	bne	11c3c <close@plt+0xb40>
   11b4c:	ldr	r0, [r4, #12]
   11b50:	ldr	r1, [r4, #16]
   11b54:	cmp	r1, r0
   11b58:	bne	11b6c <close@plt+0xa70>
   11b5c:	mov	r0, r4
   11b60:	mov	r1, #1
   11b64:	bl	1271c <_obstack_newchunk@@Base>
   11b68:	ldr	r0, [r4, #12]
   11b6c:	add	r1, r0, #1
   11b70:	str	r1, [r4, #12]
   11b74:	mov	r1, #42	; 0x2a
   11b78:	strb	r1, [r0]
   11b7c:	mov	r0, r8
   11b80:	bl	11dec <close@plt+0xcf0>
   11b84:	ldr	r0, [r4, #12]
   11b88:	ldr	r1, [r4, #16]
   11b8c:	cmp	r1, r0
   11b90:	bne	11ba4 <close@plt+0xaa8>
   11b94:	mov	r0, r4
   11b98:	mov	r1, #1
   11b9c:	bl	1271c <_obstack_newchunk@@Base>
   11ba0:	ldr	r0, [r4, #12]
   11ba4:	add	r1, r0, #1
   11ba8:	str	r1, [r4, #12]
   11bac:	mov	r1, #61	; 0x3d
   11bb0:	strb	r1, [r0]
   11bb4:	mov	r0, r6
   11bb8:	bl	11dec <close@plt+0xcf0>
   11bbc:	ldr	r0, [r4, #12]
   11bc0:	ldr	r1, [r4, #16]
   11bc4:	cmp	r1, r0
   11bc8:	bne	11bdc <close@plt+0xae0>
   11bcc:	mov	r0, r4
   11bd0:	mov	r1, #1
   11bd4:	bl	1271c <_obstack_newchunk@@Base>
   11bd8:	ldr	r0, [r4, #12]
   11bdc:	add	r1, r0, #1
   11be0:	str	r1, [r4, #12]
   11be4:	mov	r1, #58	; 0x3a
   11be8:	strb	r1, [r0]
   11bec:	b	11dc4 <close@plt+0xcc8>
   11bf0:	ldr	r1, [sp, #12]
   11bf4:	mov	r0, r6
   11bf8:	mov	r2, #0
   11bfc:	bl	10fb8 <fnmatch@plt>
   11c00:	cmp	r0, #0
   11c04:	beq	11c30 <close@plt+0xb34>
   11c08:	ldr	r0, [sp, #16]
   11c0c:	sub	r0, r0, #2
   11c10:	clz	r0, r0
   11c14:	lsr	r0, r0, #5
   11c18:	lsl	r0, r0, #1
   11c1c:	str	r0, [sp, #16]
   11c20:	b	11dc4 <close@plt+0xcc8>
   11c24:	mov	r0, #0
   11c28:	str	r0, [sp, #16]
   11c2c:	b	11dc4 <close@plt+0xcc8>
   11c30:	mov	r0, #2
   11c34:	str	r0, [sp, #16]
   11c38:	b	11dc4 <close@plt+0xcc8>
   11c3c:	movw	r1, #23790	; 0x5cee
   11c40:	mov	r0, r8
   11c44:	movt	r1, #1
   11c48:	bl	12060 <close@plt+0xf64>
   11c4c:	cmp	r0, #0
   11c50:	beq	11dc4 <close@plt+0xcc8>
   11c54:	movw	r1, #23798	; 0x5cf6
   11c58:	mov	r0, r8
   11c5c:	movt	r1, #1
   11c60:	bl	12060 <close@plt+0xf64>
   11c64:	cmp	r0, #0
   11c68:	beq	11dc4 <close@plt+0xcc8>
   11c6c:	movw	r1, #23804	; 0x5cfc
   11c70:	mov	r0, r8
   11c74:	movt	r1, #1
   11c78:	bl	12060 <close@plt+0xf64>
   11c7c:	cmp	r0, #0
   11c80:	beq	11dc4 <close@plt+0xcc8>
   11c84:	str	r6, [sp, #8]
   11c88:	mov	r6, #0
   11c8c:	movw	r0, #28656	; 0x6ff0
   11c90:	movt	r0, #1
   11c94:	ldr	r1, [r0, r6, lsl #2]
   11c98:	mov	r0, r8
   11c9c:	bl	12060 <close@plt+0xf64>
   11ca0:	cmp	r0, #0
   11ca4:	beq	11cf8 <close@plt+0xbfc>
   11ca8:	add	r6, r6, #1
   11cac:	cmp	r6, #37	; 0x25
   11cb0:	bne	11c8c <close@plt+0xb90>
   11cb4:	ldr	r0, [sp, #16]
   11cb8:	sub	r0, r0, #1
   11cbc:	cmp	r0, #1
   11cc0:	bhi	11dc0 <close@plt+0xcc4>
   11cc4:	movw	r1, #23813	; 0x5d05
   11cc8:	mov	r0, #0
   11ccc:	mov	r2, #5
   11cd0:	movt	r1, #1
   11cd4:	bl	10f34 <dcgettext@plt>
   11cd8:	mov	r6, r0
   11cdc:	mov	r0, #0
   11ce0:	cmp	sl, #0
   11ce4:	beq	11d8c <close@plt+0xc90>
   11ce8:	mov	r1, #3
   11cec:	mov	r2, sl
   11cf0:	bl	14340 <_obstack_memory_used@@Base+0x1a00>
   11cf4:	b	11d9c <close@plt+0xca0>
   11cf8:	ldr	r0, [r4, #12]
   11cfc:	ldr	r1, [r4, #16]
   11d00:	cmp	r1, r0
   11d04:	bne	11d18 <close@plt+0xc1c>
   11d08:	mov	r0, r4
   11d0c:	mov	r1, #1
   11d10:	bl	1271c <_obstack_newchunk@@Base>
   11d14:	ldr	r0, [r4, #12]
   11d18:	movw	r1, #28808	; 0x7088
   11d1c:	add	r2, r0, #1
   11d20:	movt	r1, #1
   11d24:	ldr	r6, [r1, r6, lsl #2]
   11d28:	ldrb	r1, [r6]
   11d2c:	str	r2, [r4, #12]
   11d30:	strb	r1, [r0]
   11d34:	ldr	r0, [r4, #12]
   11d38:	ldr	r1, [r4, #16]
   11d3c:	cmp	r1, r0
   11d40:	bne	11d54 <close@plt+0xc58>
   11d44:	mov	r0, r4
   11d48:	mov	r1, #1
   11d4c:	bl	1271c <_obstack_newchunk@@Base>
   11d50:	ldr	r0, [r4, #12]
   11d54:	ldrb	r1, [r6, #1]
   11d58:	add	r2, r0, #1
   11d5c:	str	r2, [r4, #12]
   11d60:	strb	r1, [r0]
   11d64:	ldr	r0, [r4, #12]
   11d68:	ldr	r1, [r4, #16]
   11d6c:	cmp	r1, r0
   11d70:	bne	11d84 <close@plt+0xc88>
   11d74:	mov	r0, r4
   11d78:	mov	r1, #1
   11d7c:	bl	1271c <_obstack_newchunk@@Base>
   11d80:	ldr	r0, [r4, #12]
   11d84:	ldr	r6, [sp, #8]
   11d88:	b	11ba4 <close@plt+0xaa8>
   11d8c:	movw	r1, #23845	; 0x5d25
   11d90:	mov	r2, #5
   11d94:	movt	r1, #1
   11d98:	bl	10f34 <dcgettext@plt>
   11d9c:	mov	r3, r0
   11da0:	mov	r0, #0
   11da4:	mov	r1, #0
   11da8:	mov	r2, r6
   11dac:	str	r9, [sp]
   11db0:	str	r8, [sp, #4]
   11db4:	str	r0, [sp, #28]
   11db8:	mov	r0, #0
   11dbc:	bl	10fac <error@plt>
   11dc0:	ldr	r6, [sp, #8]
   11dc4:	mov	r0, r8
   11dc8:	bl	122b4 <close@plt+0x11b8>
   11dcc:	mov	r0, r6
   11dd0:	bl	122b4 <close@plt+0x11b8>
   11dd4:	b	119a8 <close@plt+0x8ac>
   11dd8:	bl	122b4 <close@plt+0x11b8>
   11ddc:	ldr	r0, [sp, #28]
   11de0:	and	r0, r0, #1
   11de4:	sub	sp, fp, #28
   11de8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11dec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11df0:	add	fp, sp, #24
   11df4:	movw	r5, #33108	; 0x8154
   11df8:	mov	r4, r0
   11dfc:	mov	r0, #1
   11e00:	mov	r8, #39	; 0x27
   11e04:	mov	r7, #92	; 0x5c
   11e08:	movt	r5, #2
   11e0c:	b	11e24 <close@plt+0xd28>
   11e10:	ldrb	r1, [r4], #1
   11e14:	add	r2, r0, #1
   11e18:	str	r2, [r5, #12]
   11e1c:	strb	r1, [r0]
   11e20:	mov	r0, r6
   11e24:	ldrb	r1, [r4]
   11e28:	sub	r2, r1, #58	; 0x3a
   11e2c:	cmp	r2, #36	; 0x24
   11e30:	bhi	11f18 <close@plt+0xe1c>
   11e34:	add	r1, pc, #4
   11e38:	mov	r6, #1
   11e3c:	ldr	pc, [r1, r2, lsl #2]
   11e40:	ldrdeq	r1, [r1], -r4
   11e44:			; <UNDEFINED> instruction: 0x00011fb8
   11e48:			; <UNDEFINED> instruction: 0x00011fb8
   11e4c:	ldrdeq	r1, [r1], -r4
   11e50:			; <UNDEFINED> instruction: 0x00011fb8
   11e54:			; <UNDEFINED> instruction: 0x00011fb8
   11e58:			; <UNDEFINED> instruction: 0x00011fb8
   11e5c:			; <UNDEFINED> instruction: 0x00011fb8
   11e60:			; <UNDEFINED> instruction: 0x00011fb8
   11e64:			; <UNDEFINED> instruction: 0x00011fb8
   11e68:			; <UNDEFINED> instruction: 0x00011fb8
   11e6c:			; <UNDEFINED> instruction: 0x00011fb8
   11e70:			; <UNDEFINED> instruction: 0x00011fb8
   11e74:			; <UNDEFINED> instruction: 0x00011fb8
   11e78:			; <UNDEFINED> instruction: 0x00011fb8
   11e7c:			; <UNDEFINED> instruction: 0x00011fb8
   11e80:			; <UNDEFINED> instruction: 0x00011fb8
   11e84:			; <UNDEFINED> instruction: 0x00011fb8
   11e88:			; <UNDEFINED> instruction: 0x00011fb8
   11e8c:			; <UNDEFINED> instruction: 0x00011fb8
   11e90:			; <UNDEFINED> instruction: 0x00011fb8
   11e94:			; <UNDEFINED> instruction: 0x00011fb8
   11e98:			; <UNDEFINED> instruction: 0x00011fb8
   11e9c:			; <UNDEFINED> instruction: 0x00011fb8
   11ea0:			; <UNDEFINED> instruction: 0x00011fb8
   11ea4:			; <UNDEFINED> instruction: 0x00011fb8
   11ea8:			; <UNDEFINED> instruction: 0x00011fb8
   11eac:			; <UNDEFINED> instruction: 0x00011fb8
   11eb0:			; <UNDEFINED> instruction: 0x00011fb8
   11eb4:			; <UNDEFINED> instruction: 0x00011fb8
   11eb8:			; <UNDEFINED> instruction: 0x00011fb8
   11ebc:			; <UNDEFINED> instruction: 0x00011fb8
   11ec0:			; <UNDEFINED> instruction: 0x00011fb8
   11ec4:			; <UNDEFINED> instruction: 0x00011fb8
   11ec8:	andeq	r1, r1, r0, lsl pc
   11ecc:			; <UNDEFINED> instruction: 0x00011fb8
   11ed0:	andeq	r1, r1, r0, lsl pc
   11ed4:	tst	r0, #1
   11ed8:	mov	r6, #1
   11edc:	beq	11fb8 <close@plt+0xebc>
   11ee0:	ldr	r0, [r5, #12]
   11ee4:	ldr	r1, [r5, #16]
   11ee8:	cmp	r1, r0
   11eec:	bne	11f00 <close@plt+0xe04>
   11ef0:	mov	r0, r5
   11ef4:	mov	r1, #1
   11ef8:	bl	1271c <_obstack_newchunk@@Base>
   11efc:	ldr	r0, [r5, #12]
   11f00:	add	r1, r0, #1
   11f04:	str	r1, [r5, #12]
   11f08:	strb	r7, [r0]
   11f0c:	b	11fb4 <close@plt+0xeb8>
   11f10:	eor	r6, r0, #1
   11f14:	b	11fb8 <close@plt+0xebc>
   11f18:	cmp	r1, #39	; 0x27
   11f1c:	beq	11f30 <close@plt+0xe34>
   11f20:	cmp	r1, #0
   11f24:	mov	r6, #1
   11f28:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   11f2c:	b	11fb8 <close@plt+0xebc>
   11f30:	ldr	r0, [r5, #12]
   11f34:	ldr	r1, [r5, #16]
   11f38:	cmp	r1, r0
   11f3c:	bne	11f50 <close@plt+0xe54>
   11f40:	mov	r0, r5
   11f44:	mov	r1, #1
   11f48:	bl	1271c <_obstack_newchunk@@Base>
   11f4c:	ldr	r0, [r5, #12]
   11f50:	add	r1, r0, #1
   11f54:	str	r1, [r5, #12]
   11f58:	strb	r8, [r0]
   11f5c:	ldr	r0, [r5, #12]
   11f60:	ldr	r1, [r5, #16]
   11f64:	cmp	r1, r0
   11f68:	bne	11f7c <close@plt+0xe80>
   11f6c:	mov	r0, r5
   11f70:	mov	r1, #1
   11f74:	bl	1271c <_obstack_newchunk@@Base>
   11f78:	ldr	r0, [r5, #12]
   11f7c:	add	r1, r0, #1
   11f80:	str	r1, [r5, #12]
   11f84:	strb	r7, [r0]
   11f88:	ldr	r0, [r5, #12]
   11f8c:	ldr	r1, [r5, #16]
   11f90:	cmp	r1, r0
   11f94:	bne	11fa8 <close@plt+0xeac>
   11f98:	mov	r0, r5
   11f9c:	mov	r1, #1
   11fa0:	bl	1271c <_obstack_newchunk@@Base>
   11fa4:	ldr	r0, [r5, #12]
   11fa8:	add	r1, r0, #1
   11fac:	str	r1, [r5, #12]
   11fb0:	strb	r8, [r0]
   11fb4:	mov	r6, #1
   11fb8:	ldr	r0, [r5, #12]
   11fbc:	ldr	r1, [r5, #16]
   11fc0:	cmp	r1, r0
   11fc4:	bne	11e10 <close@plt+0xd14>
   11fc8:	mov	r0, r5
   11fcc:	mov	r1, #1
   11fd0:	bl	1271c <_obstack_newchunk@@Base>
   11fd4:	ldr	r0, [r5, #12]
   11fd8:	b	11e10 <close@plt+0xd14>
   11fdc:	sub	r0, r0, #1
   11fe0:	ldrb	r3, [r0, #1]!
   11fe4:	cmp	r3, #47	; 0x2f
   11fe8:	beq	11fe0 <close@plt+0xee4>
   11fec:	mov	r2, #0
   11ff0:	mov	r1, r0
   11ff4:	b	12010 <close@plt+0xf14>
   11ff8:	cmp	r3, #0
   11ffc:	bxeq	lr
   12000:	tst	r2, #1
   12004:	mov	r2, #0
   12008:	movne	r0, r1
   1200c:	ldrb	r3, [r1, #1]!
   12010:	uxtb	r3, r3
   12014:	cmp	r3, #47	; 0x2f
   12018:	bne	11ff8 <close@plt+0xefc>
   1201c:	ldrb	r3, [r1, #1]!
   12020:	mov	r2, #1
   12024:	b	12010 <close@plt+0xf14>
   12028:	push	{r4, sl, fp, lr}
   1202c:	add	fp, sp, #8
   12030:	mov	r4, r0
   12034:	bl	11048 <strlen@plt>
   12038:	mov	r1, r0
   1203c:	sub	r2, r4, #1
   12040:	mov	r0, r1
   12044:	cmp	r1, #2
   12048:	popcc	{r4, sl, fp, pc}
   1204c:	ldrb	r3, [r2, r0]
   12050:	sub	r1, r0, #1
   12054:	cmp	r3, #47	; 0x2f
   12058:	beq	12040 <close@plt+0xf44>
   1205c:	pop	{r4, sl, fp, pc}
   12060:	cmp	r0, r1
   12064:	moveq	r0, #0
   12068:	bxeq	lr
   1206c:	ldrb	r3, [r1]
   12070:	ldrb	ip, [r0]
   12074:	sub	r2, r3, #65	; 0x41
   12078:	cmp	r2, #26
   1207c:	sub	r2, ip, #65	; 0x41
   12080:	addcc	r3, r3, #32
   12084:	cmp	r2, #26
   12088:	addcc	ip, ip, #32
   1208c:	uxtb	r3, r3
   12090:	uxtb	r2, ip
   12094:	cmp	r2, #0
   12098:	beq	120ac <close@plt+0xfb0>
   1209c:	add	r1, r1, #1
   120a0:	add	r0, r0, #1
   120a4:	cmp	r2, r3
   120a8:	beq	1206c <close@plt+0xf70>
   120ac:	sub	r0, r2, r3
   120b0:	bx	lr
   120b4:	movw	r1, #33152	; 0x8180
   120b8:	movt	r1, #2
   120bc:	str	r0, [r1]
   120c0:	bx	lr
   120c4:	movw	r1, #33156	; 0x8184
   120c8:	movt	r1, #2
   120cc:	strb	r0, [r1]
   120d0:	bx	lr
   120d4:	push	{r4, r5, r6, sl, fp, lr}
   120d8:	add	fp, sp, #16
   120dc:	sub	sp, sp, #8
   120e0:	movw	r0, #33100	; 0x814c
   120e4:	movt	r0, #2
   120e8:	ldr	r0, [r0]
   120ec:	bl	15458 <_obstack_memory_used@@Base+0x2b18>
   120f0:	cmp	r0, #0
   120f4:	beq	1211c <close@plt+0x1020>
   120f8:	movw	r0, #33156	; 0x8184
   120fc:	movt	r0, #2
   12100:	ldrb	r0, [r0]
   12104:	cmp	r0, #0
   12108:	beq	1213c <close@plt+0x1040>
   1210c:	bl	11054 <__errno_location@plt>
   12110:	ldr	r0, [r0]
   12114:	cmp	r0, #32
   12118:	bne	1213c <close@plt+0x1040>
   1211c:	movw	r0, #33088	; 0x8140
   12120:	movt	r0, #2
   12124:	ldr	r0, [r0]
   12128:	bl	15458 <_obstack_memory_used@@Base+0x2b18>
   1212c:	cmp	r0, #0
   12130:	subeq	sp, fp, #16
   12134:	popeq	{r4, r5, r6, sl, fp, pc}
   12138:	b	121ac <close@plt+0x10b0>
   1213c:	movw	r1, #28975	; 0x712f
   12140:	mov	r0, #0
   12144:	mov	r2, #5
   12148:	movt	r1, #1
   1214c:	bl	10f34 <dcgettext@plt>
   12150:	mov	r4, r0
   12154:	movw	r0, #33152	; 0x8180
   12158:	movt	r0, #2
   1215c:	ldr	r6, [r0]
   12160:	bl	11054 <__errno_location@plt>
   12164:	ldr	r5, [r0]
   12168:	cmp	r6, #0
   1216c:	bne	12188 <close@plt+0x108c>
   12170:	movw	r2, #28991	; 0x713f
   12174:	mov	r0, #0
   12178:	mov	r1, r5
   1217c:	mov	r3, r4
   12180:	movt	r2, #1
   12184:	b	121a8 <close@plt+0x10ac>
   12188:	mov	r0, r6
   1218c:	bl	14264 <_obstack_memory_used@@Base+0x1924>
   12190:	movw	r2, #28987	; 0x713b
   12194:	mov	r3, r0
   12198:	str	r4, [sp]
   1219c:	mov	r0, #0
   121a0:	mov	r1, r5
   121a4:	movt	r2, #1
   121a8:	bl	10fac <error@plt>
   121ac:	movw	r0, #32996	; 0x80e4
   121b0:	movt	r0, #2
   121b4:	ldr	r0, [r0]
   121b8:	bl	10ef8 <_exit@plt>
   121bc:	push	{r4, r5, r6, sl, fp, lr}
   121c0:	add	fp, sp, #16
   121c4:	sub	sp, sp, #8
   121c8:	mov	r4, r0
   121cc:	bl	11084 <fileno@plt>
   121d0:	cmn	r0, #1
   121d4:	ble	12248 <close@plt+0x114c>
   121d8:	mov	r0, r4
   121dc:	bl	11000 <__freading@plt>
   121e0:	cmp	r0, #0
   121e4:	beq	12210 <close@plt+0x1114>
   121e8:	mov	r0, r4
   121ec:	bl	11084 <fileno@plt>
   121f0:	mov	r1, #1
   121f4:	mov	r2, #0
   121f8:	mov	r3, #0
   121fc:	str	r1, [sp]
   12200:	bl	10f7c <lseek64@plt>
   12204:	and	r0, r0, r1
   12208:	cmn	r0, #1
   1220c:	beq	12248 <close@plt+0x114c>
   12210:	mov	r0, r4
   12214:	bl	12258 <close@plt+0x115c>
   12218:	cmp	r0, #0
   1221c:	beq	12248 <close@plt+0x114c>
   12220:	bl	11054 <__errno_location@plt>
   12224:	ldr	r6, [r0]
   12228:	mov	r5, r0
   1222c:	mov	r0, r4
   12230:	bl	1109c <fclose@plt>
   12234:	cmp	r6, #0
   12238:	strne	r6, [r5]
   1223c:	mvnne	r0, #0
   12240:	sub	sp, fp, #16
   12244:	pop	{r4, r5, r6, sl, fp, pc}
   12248:	mov	r0, r4
   1224c:	sub	sp, fp, #16
   12250:	pop	{r4, r5, r6, sl, fp, lr}
   12254:	b	1109c <fclose@plt>
   12258:	push	{r4, sl, fp, lr}
   1225c:	add	fp, sp, #8
   12260:	sub	sp, sp, #8
   12264:	mov	r4, r0
   12268:	cmp	r0, #0
   1226c:	beq	12288 <close@plt+0x118c>
   12270:	mov	r0, r4
   12274:	bl	11000 <__freading@plt>
   12278:	cmp	r0, #0
   1227c:	ldrbne	r0, [r4, #1]
   12280:	tstne	r0, #1
   12284:	bne	12298 <close@plt+0x119c>
   12288:	mov	r0, r4
   1228c:	sub	sp, fp, #8
   12290:	pop	{r4, sl, fp, lr}
   12294:	b	10ee0 <fflush@plt>
   12298:	mov	r0, #1
   1229c:	mov	r2, #0
   122a0:	mov	r3, #0
   122a4:	str	r0, [sp]
   122a8:	mov	r0, r4
   122ac:	bl	12524 <close@plt+0x1428>
   122b0:	b	12288 <close@plt+0x118c>
   122b4:	push	{r4, r5, r6, sl, fp, lr}
   122b8:	add	fp, sp, #16
   122bc:	mov	r4, r0
   122c0:	bl	11054 <__errno_location@plt>
   122c4:	ldr	r6, [r0]
   122c8:	mov	r5, r0
   122cc:	mov	r0, r4
   122d0:	bl	10eec <free@plt>
   122d4:	str	r6, [r5]
   122d8:	pop	{r4, r5, r6, sl, fp, pc}
   122dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122e0:	add	fp, sp, #28
   122e4:	sub	sp, sp, #4
   122e8:	mov	r5, r0
   122ec:	mov	r0, r2
   122f0:	mov	r4, r2
   122f4:	mov	r9, r1
   122f8:	bl	11084 <fileno@plt>
   122fc:	mov	r7, #0
   12300:	cmp	r0, #0
   12304:	beq	12344 <close@plt+0x1248>
   12308:	cmp	r0, #1
   1230c:	beq	12350 <close@plt+0x1254>
   12310:	cmp	r0, #2
   12314:	beq	1232c <close@plt+0x1230>
   12318:	mov	r0, #2
   1231c:	mov	r1, #2
   12320:	bl	10f40 <dup2@plt>
   12324:	subs	r7, r0, #2
   12328:	movwne	r7, #1
   1232c:	mov	r0, #1
   12330:	mov	r1, #1
   12334:	bl	10f40 <dup2@plt>
   12338:	subs	r6, r0, #1
   1233c:	movwne	r6, #1
   12340:	b	12354 <close@plt+0x1258>
   12344:	mov	r6, #0
   12348:	mov	r8, #0
   1234c:	b	1241c <close@plt+0x1320>
   12350:	mov	r6, #0
   12354:	mov	r0, #0
   12358:	mov	r1, #0
   1235c:	mov	sl, #0
   12360:	bl	10f40 <dup2@plt>
   12364:	cmp	r0, #0
   12368:	mov	r8, #0
   1236c:	beq	123ac <close@plt+0x12b0>
   12370:	movw	r0, #28994	; 0x7142
   12374:	mov	r1, #0
   12378:	movt	r0, #1
   1237c:	bl	10fc4 <open64@plt>
   12380:	cmp	r0, #0
   12384:	beq	123a8 <close@plt+0x12ac>
   12388:	cmn	r0, #1
   1238c:	ble	124a8 <close@plt+0x13ac>
   12390:	bl	110fc <close@plt>
   12394:	bl	11054 <__errno_location@plt>
   12398:	mov	r4, r0
   1239c:	mov	r0, #9
   123a0:	str	r0, [r4]
   123a4:	b	124b0 <close@plt+0x13b4>
   123a8:	mov	r8, #1
   123ac:	cmp	r6, #0
   123b0:	beq	123d0 <close@plt+0x12d4>
   123b4:	movw	r0, #28994	; 0x7142
   123b8:	mov	r1, #0
   123bc:	movt	r0, #1
   123c0:	bl	10fc4 <open64@plt>
   123c4:	mov	sl, #1
   123c8:	cmp	r0, #1
   123cc:	bne	12488 <close@plt+0x138c>
   123d0:	cmp	r7, #0
   123d4:	beq	12414 <close@plt+0x1318>
   123d8:	movw	r0, #28994	; 0x7142
   123dc:	mov	r1, #0
   123e0:	movt	r0, #1
   123e4:	bl	10fc4 <open64@plt>
   123e8:	mov	r7, #1
   123ec:	cmp	r0, #2
   123f0:	beq	12418 <close@plt+0x131c>
   123f4:	cmn	r0, #1
   123f8:	ble	12500 <close@plt+0x1404>
   123fc:	bl	110fc <close@plt>
   12400:	bl	11054 <__errno_location@plt>
   12404:	mov	r4, r0
   12408:	mov	r0, #9
   1240c:	str	r0, [r4]
   12410:	b	12508 <close@plt+0x140c>
   12414:	mov	r7, #0
   12418:	mov	r6, sl
   1241c:	mov	r0, r5
   12420:	mov	r1, r9
   12424:	mov	r2, r4
   12428:	bl	11018 <freopen64@plt>
   1242c:	mov	r5, r0
   12430:	bl	11054 <__errno_location@plt>
   12434:	ldr	r9, [r0]
   12438:	mov	r4, r0
   1243c:	cmp	r7, #0
   12440:	beq	1244c <close@plt+0x1350>
   12444:	mov	r0, #2
   12448:	bl	110fc <close@plt>
   1244c:	cmp	r6, #0
   12450:	beq	1245c <close@plt+0x1360>
   12454:	mov	r0, #1
   12458:	bl	110fc <close@plt>
   1245c:	cmp	r8, #0
   12460:	beq	1246c <close@plt+0x1370>
   12464:	mov	r0, #0
   12468:	bl	110fc <close@plt>
   1246c:	cmp	r5, #0
   12470:	bne	1247c <close@plt+0x1380>
   12474:	mov	r5, #0
   12478:	str	r9, [r4]
   1247c:	mov	r0, r5
   12480:	sub	sp, fp, #28
   12484:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12488:	cmn	r0, #1
   1248c:	ble	124c8 <close@plt+0x13cc>
   12490:	bl	110fc <close@plt>
   12494:	bl	11054 <__errno_location@plt>
   12498:	mov	r4, r0
   1249c:	mov	r0, #9
   124a0:	str	r0, [r4]
   124a4:	b	124d0 <close@plt+0x13d4>
   124a8:	bl	11054 <__errno_location@plt>
   124ac:	mov	r4, r0
   124b0:	ldr	r9, [r4]
   124b4:	mov	r8, #1
   124b8:	mov	r5, #0
   124bc:	cmp	r7, #0
   124c0:	bne	12444 <close@plt+0x1348>
   124c4:	b	1244c <close@plt+0x1350>
   124c8:	bl	11054 <__errno_location@plt>
   124cc:	mov	r4, r0
   124d0:	ldr	r9, [r4]
   124d4:	mov	r5, #0
   124d8:	cmp	r7, #0
   124dc:	beq	12454 <close@plt+0x1358>
   124e0:	mov	r0, #2
   124e4:	bl	110fc <close@plt>
   124e8:	mov	r0, #1
   124ec:	bl	110fc <close@plt>
   124f0:	mov	r5, #0
   124f4:	cmp	r8, #0
   124f8:	bne	12464 <close@plt+0x1368>
   124fc:	b	12474 <close@plt+0x1378>
   12500:	bl	11054 <__errno_location@plt>
   12504:	mov	r4, r0
   12508:	ldr	r9, [r4]
   1250c:	mov	r0, #2
   12510:	bl	110fc <close@plt>
   12514:	mov	r5, #0
   12518:	cmp	sl, #0
   1251c:	bne	12454 <close@plt+0x1358>
   12520:	b	1245c <close@plt+0x1360>
   12524:	push	{r4, r5, r6, r7, fp, lr}
   12528:	add	fp, sp, #16
   1252c:	sub	sp, sp, #8
   12530:	mov	r4, r0
   12534:	ldr	r0, [r0, #4]
   12538:	mov	r5, r3
   1253c:	mov	r6, r2
   12540:	ldr	r1, [r4, #8]
   12544:	cmp	r1, r0
   12548:	bne	12564 <close@plt+0x1468>
   1254c:	ldrd	r0, [r4, #16]
   12550:	cmp	r1, r0
   12554:	bne	12564 <close@plt+0x1468>
   12558:	ldr	r0, [r4, #36]	; 0x24
   1255c:	cmp	r0, #0
   12560:	beq	1257c <close@plt+0x1480>
   12564:	mov	r0, r4
   12568:	mov	r2, r6
   1256c:	mov	r3, r5
   12570:	sub	sp, fp, #16
   12574:	pop	{r4, r5, r6, r7, fp, lr}
   12578:	b	110a8 <fseeko64@plt>
   1257c:	ldr	r7, [fp, #8]
   12580:	mov	r0, r4
   12584:	bl	11084 <fileno@plt>
   12588:	mov	r2, r6
   1258c:	mov	r3, r5
   12590:	str	r7, [sp]
   12594:	bl	10f7c <lseek64@plt>
   12598:	and	r2, r0, r1
   1259c:	cmn	r2, #1
   125a0:	mvneq	r0, #0
   125a4:	subeq	sp, fp, #16
   125a8:	popeq	{r4, r5, r6, r7, fp, pc}
   125ac:	strd	r0, [r4, #80]	; 0x50
   125b0:	ldr	r0, [r4]
   125b4:	bic	r0, r0, #16
   125b8:	str	r0, [r4]
   125bc:	mov	r0, #0
   125c0:	sub	sp, fp, #16
   125c4:	pop	{r4, r5, r6, r7, fp, pc}

000125c8 <_obstack_begin@@Base>:
   125c8:	push	{r4, r5, r6, sl, fp, lr}
   125cc:	add	fp, sp, #16
   125d0:	cmp	r1, #0
   125d4:	mov	r4, r0
   125d8:	str	r3, [r0, #28]
   125dc:	mov	r5, r2
   125e0:	movweq	r1, #4072	; 0xfe8
   125e4:	cmp	r2, #0
   125e8:	str	r1, [r0]
   125ec:	ldr	r0, [fp, #8]
   125f0:	movweq	r5, #8
   125f4:	sub	r6, r5, #1
   125f8:	str	r0, [r4, #32]
   125fc:	str	r6, [r4, #24]
   12600:	ldrb	r0, [r4, #40]	; 0x28
   12604:	and	r0, r0, #254	; 0xfe
   12608:	strb	r0, [r4, #40]	; 0x28
   1260c:	mov	r0, r1
   12610:	blx	r3
   12614:	cmp	r0, #0
   12618:	str	r0, [r4, #4]
   1261c:	addne	r1, r6, r0
   12620:	rsbne	r2, r5, #0
   12624:	addne	r1, r1, #8
   12628:	andne	r1, r1, r2
   1262c:	strne	r1, [r4, #12]
   12630:	strne	r1, [r4, #8]
   12634:	ldrne	r1, [r4]
   12638:	addne	r1, r0, r1
   1263c:	strne	r1, [r0]
   12640:	strne	r1, [r4, #16]
   12644:	movne	r1, #0
   12648:	strne	r1, [r0, #4]
   1264c:	ldrbne	r0, [r4, #40]	; 0x28
   12650:	andne	r0, r0, #249	; 0xf9
   12654:	strbne	r0, [r4, #40]	; 0x28
   12658:	movne	r0, #1
   1265c:	popne	{r4, r5, r6, sl, fp, pc}
   12660:	movw	r0, #33000	; 0x80e8
   12664:	movt	r0, #2
   12668:	ldr	r0, [r0]
   1266c:	blx	r0

00012670 <_obstack_begin_1@@Base>:
   12670:	push	{r4, r5, r6, sl, fp, lr}
   12674:	add	fp, sp, #16
   12678:	cmp	r1, #0
   1267c:	mov	r4, r0
   12680:	str	r3, [r0, #28]
   12684:	mov	r5, r2
   12688:	movweq	r1, #4072	; 0xfe8
   1268c:	cmp	r2, #0
   12690:	str	r1, [r0]
   12694:	ldr	r0, [fp, #8]
   12698:	movweq	r5, #8
   1269c:	sub	r6, r5, #1
   126a0:	str	r0, [r4, #32]
   126a4:	ldr	r0, [fp, #12]
   126a8:	str	r0, [r4, #36]	; 0x24
   126ac:	str	r6, [r4, #24]
   126b0:	ldrb	r2, [r4, #40]	; 0x28
   126b4:	orr	r2, r2, #1
   126b8:	strb	r2, [r4, #40]	; 0x28
   126bc:	blx	r3
   126c0:	cmp	r0, #0
   126c4:	str	r0, [r4, #4]
   126c8:	addne	r1, r6, r0
   126cc:	rsbne	r2, r5, #0
   126d0:	addne	r1, r1, #8
   126d4:	andne	r1, r1, r2
   126d8:	strne	r1, [r4, #12]
   126dc:	strne	r1, [r4, #8]
   126e0:	ldrne	r1, [r4]
   126e4:	addne	r1, r0, r1
   126e8:	strne	r1, [r0]
   126ec:	strne	r1, [r4, #16]
   126f0:	movne	r1, #0
   126f4:	strne	r1, [r0, #4]
   126f8:	ldrbne	r0, [r4, #40]	; 0x28
   126fc:	andne	r0, r0, #249	; 0xf9
   12700:	strbne	r0, [r4, #40]	; 0x28
   12704:	movne	r0, #1
   12708:	popne	{r4, r5, r6, sl, fp, pc}
   1270c:	movw	r0, #33000	; 0x80e8
   12710:	movt	r0, #2
   12714:	ldr	r0, [r0]
   12718:	blx	r0

0001271c <_obstack_newchunk@@Base>:
   1271c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12720:	add	fp, sp, #28
   12724:	sub	sp, sp, #4
   12728:	mov	r4, r0
   1272c:	ldr	r2, [r0]
   12730:	ldr	r0, [r0, #8]
   12734:	ldr	r3, [r4, #12]
   12738:	sub	r9, r3, r0
   1273c:	ldr	r0, [r4, #24]
   12740:	mov	r3, #0
   12744:	add	r1, r9, r1
   12748:	adds	r6, r1, r0
   1274c:	adc	r0, r3, #0
   12750:	mov	r3, #100	; 0x64
   12754:	add	r3, r3, r9, lsr #3
   12758:	adds	r7, r3, r6
   1275c:	movcs	r7, r6
   12760:	cmp	r7, r2
   12764:	movcc	r7, r2
   12768:	cmp	r1, r9
   1276c:	bcc	12864 <_obstack_newchunk@@Base+0x148>
   12770:	cmp	r0, #0
   12774:	bne	12864 <_obstack_newchunk@@Base+0x148>
   12778:	ldrb	r0, [r4, #40]	; 0x28
   1277c:	ldr	r8, [r4, #4]
   12780:	tst	r0, #1
   12784:	bne	12798 <_obstack_newchunk@@Base+0x7c>
   12788:	ldr	r1, [r4, #28]
   1278c:	mov	r0, r7
   12790:	blx	r1
   12794:	b	127a8 <_obstack_newchunk@@Base+0x8c>
   12798:	ldr	r2, [r4, #28]
   1279c:	ldr	r0, [r4, #36]	; 0x24
   127a0:	mov	r1, r7
   127a4:	blx	r2
   127a8:	mov	r6, r0
   127ac:	cmp	r0, #0
   127b0:	beq	12864 <_obstack_newchunk@@Base+0x148>
   127b4:	add	r0, r6, r7
   127b8:	str	r6, [r4, #4]
   127bc:	str	r8, [r6, #4]
   127c0:	mov	r2, r9
   127c4:	str	r0, [r4, #16]
   127c8:	str	r0, [r6]
   127cc:	ldr	r5, [r4, #24]
   127d0:	ldr	sl, [r4, #8]
   127d4:	add	r0, r5, r6
   127d8:	mov	r1, sl
   127dc:	add	r0, r0, #8
   127e0:	bic	r7, r0, r5
   127e4:	mov	r0, r7
   127e8:	bl	10f04 <memcpy@plt>
   127ec:	ldrb	r0, [r4, #40]	; 0x28
   127f0:	tst	r0, #2
   127f4:	bne	12844 <_obstack_newchunk@@Base+0x128>
   127f8:	add	r1, r5, r8
   127fc:	mvn	r0, r5
   12800:	add	r1, r1, #8
   12804:	and	r0, r1, r0
   12808:	cmp	sl, r0
   1280c:	bne	12844 <_obstack_newchunk@@Base+0x128>
   12810:	ldr	r0, [r8, #4]
   12814:	str	r0, [r6, #4]
   12818:	ldrb	r0, [r4, #40]	; 0x28
   1281c:	tst	r0, #1
   12820:	bne	12834 <_obstack_newchunk@@Base+0x118>
   12824:	ldr	r1, [r4, #32]
   12828:	mov	r0, r8
   1282c:	blx	r1
   12830:	b	12844 <_obstack_newchunk@@Base+0x128>
   12834:	ldr	r2, [r4, #32]
   12838:	ldr	r0, [r4, #36]	; 0x24
   1283c:	mov	r1, r8
   12840:	blx	r2
   12844:	add	r0, r7, r9
   12848:	str	r7, [r4, #8]
   1284c:	str	r0, [r4, #12]
   12850:	ldrb	r0, [r4, #40]	; 0x28
   12854:	and	r0, r0, #253	; 0xfd
   12858:	strb	r0, [r4, #40]	; 0x28
   1285c:	sub	sp, fp, #28
   12860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12864:	movw	r0, #33000	; 0x80e8
   12868:	movt	r0, #2
   1286c:	ldr	r0, [r0]
   12870:	blx	r0

00012874 <_obstack_allocated_p@@Base>:
   12874:	ldr	r2, [r0, #4]
   12878:	mov	r0, #0
   1287c:	b	12884 <_obstack_allocated_p@@Base+0x10>
   12880:	ldr	r2, [r2, #4]
   12884:	cmp	r2, #0
   12888:	bxeq	lr
   1288c:	cmp	r2, r1
   12890:	bcs	12880 <_obstack_allocated_p@@Base+0xc>
   12894:	ldr	r3, [r2]
   12898:	cmp	r3, r1
   1289c:	bcc	12880 <_obstack_allocated_p@@Base+0xc>
   128a0:	mov	r0, #1
   128a4:	bx	lr

000128a8 <_obstack_free@@Base>:
   128a8:	push	{r4, r5, r6, sl, fp, lr}
   128ac:	add	fp, sp, #16
   128b0:	mov	r5, r1
   128b4:	ldr	r1, [r0, #4]
   128b8:	cmp	r1, #0
   128bc:	beq	1291c <_obstack_free@@Base+0x74>
   128c0:	mov	r4, r0
   128c4:	cmp	r1, r5
   128c8:	bcs	128d8 <_obstack_free@@Base+0x30>
   128cc:	ldr	r0, [r1]
   128d0:	cmp	r0, r5
   128d4:	bcs	12928 <_obstack_free@@Base+0x80>
   128d8:	ldrb	r0, [r4, #40]	; 0x28
   128dc:	ldr	r6, [r1, #4]
   128e0:	tst	r0, #1
   128e4:	bne	128f8 <_obstack_free@@Base+0x50>
   128e8:	ldr	r2, [r4, #32]
   128ec:	mov	r0, r1
   128f0:	blx	r2
   128f4:	b	12904 <_obstack_free@@Base+0x5c>
   128f8:	ldr	r2, [r4, #32]
   128fc:	ldr	r0, [r4, #36]	; 0x24
   12900:	blx	r2
   12904:	ldrb	r0, [r4, #40]	; 0x28
   12908:	cmp	r6, #0
   1290c:	mov	r1, r6
   12910:	orr	r0, r0, #2
   12914:	strb	r0, [r4, #40]	; 0x28
   12918:	bne	128c4 <_obstack_free@@Base+0x1c>
   1291c:	cmp	r5, #0
   12920:	popeq	{r4, r5, r6, sl, fp, pc}
   12924:	bl	110f0 <abort@plt>
   12928:	str	r5, [r4, #8]
   1292c:	str	r5, [r4, #12]
   12930:	ldr	r0, [r1]
   12934:	str	r1, [r4, #4]
   12938:	str	r0, [r4, #16]
   1293c:	pop	{r4, r5, r6, sl, fp, pc}

00012940 <_obstack_memory_used@@Base>:
   12940:	ldr	r1, [r0, #4]
   12944:	mov	r0, #0
   12948:	b	1295c <_obstack_memory_used@@Base+0x1c>
   1294c:	ldr	r2, [r1]
   12950:	sub	r0, r0, r1
   12954:	ldr	r1, [r1, #4]
   12958:	add	r0, r0, r2
   1295c:	cmp	r1, #0
   12960:	bxeq	lr
   12964:	b	1294c <_obstack_memory_used@@Base+0xc>
   12968:	push	{fp, lr}
   1296c:	mov	fp, sp
   12970:	movw	r0, #33088	; 0x8140
   12974:	movw	r1, #29004	; 0x714c
   12978:	mov	r2, #5
   1297c:	movt	r0, #2
   12980:	movt	r1, #1
   12984:	ldr	r4, [r0]
   12988:	mov	r0, #0
   1298c:	bl	10f34 <dcgettext@plt>
   12990:	movw	r2, #29272	; 0x7258
   12994:	mov	r3, r0
   12998:	mov	r0, r4
   1299c:	mov	r1, #1
   129a0:	movt	r2, #1
   129a4:	bl	11090 <__fprintf_chk@plt>
   129a8:	movw	r0, #32996	; 0x80e4
   129ac:	movt	r0, #2
   129b0:	ldr	r0, [r0]
   129b4:	bl	1103c <exit@plt>
   129b8:	push	{r4, r5, fp, lr}
   129bc:	add	fp, sp, #8
   129c0:	cmp	r0, #0
   129c4:	beq	12a58 <_obstack_memory_used@@Base+0x118>
   129c8:	mov	r1, #47	; 0x2f
   129cc:	mov	r4, r0
   129d0:	bl	110c0 <strrchr@plt>
   129d4:	cmp	r0, #0
   129d8:	mov	r5, r4
   129dc:	addne	r5, r0, #1
   129e0:	sub	r0, r5, r4
   129e4:	cmp	r0, #7
   129e8:	blt	12a3c <_obstack_memory_used@@Base+0xfc>
   129ec:	movw	r1, #29077	; 0x7195
   129f0:	sub	r0, r5, #7
   129f4:	mov	r2, #7
   129f8:	movt	r1, #1
   129fc:	bl	110e4 <strncmp@plt>
   12a00:	cmp	r0, #0
   12a04:	bne	12a3c <_obstack_memory_used@@Base+0xfc>
   12a08:	movw	r1, #29085	; 0x719d
   12a0c:	mov	r0, r5
   12a10:	mov	r2, #3
   12a14:	movt	r1, #1
   12a18:	bl	110e4 <strncmp@plt>
   12a1c:	cmp	r0, #0
   12a20:	beq	12a2c <_obstack_memory_used@@Base+0xec>
   12a24:	mov	r4, r5
   12a28:	b	12a3c <_obstack_memory_used@@Base+0xfc>
   12a2c:	movw	r0, #33072	; 0x8130
   12a30:	add	r4, r5, #3
   12a34:	movt	r0, #2
   12a38:	str	r4, [r0]
   12a3c:	movw	r0, #33076	; 0x8134
   12a40:	movt	r0, #2
   12a44:	str	r4, [r0]
   12a48:	movw	r0, #33160	; 0x8188
   12a4c:	movt	r0, #2
   12a50:	str	r4, [r0]
   12a54:	pop	{r4, r5, fp, pc}
   12a58:	movw	r0, #33088	; 0x8140
   12a5c:	mov	r1, #55	; 0x37
   12a60:	mov	r2, #1
   12a64:	movt	r0, #2
   12a68:	ldr	r3, [r0]
   12a6c:	movw	r0, #29021	; 0x715d
   12a70:	movt	r0, #1
   12a74:	bl	10f70 <fwrite@plt>
   12a78:	bl	110f0 <abort@plt>
   12a7c:	push	{r4, r5, r6, sl, fp, lr}
   12a80:	add	fp, sp, #16
   12a84:	mov	r4, r0
   12a88:	movw	r0, #33168	; 0x8190
   12a8c:	movt	r0, #2
   12a90:	cmp	r4, #0
   12a94:	moveq	r4, r0
   12a98:	bl	11054 <__errno_location@plt>
   12a9c:	ldr	r6, [r0]
   12aa0:	mov	r5, r0
   12aa4:	mov	r0, r4
   12aa8:	mov	r1, #48	; 0x30
   12aac:	bl	1523c <_obstack_memory_used@@Base+0x28fc>
   12ab0:	str	r6, [r5]
   12ab4:	pop	{r4, r5, r6, sl, fp, pc}
   12ab8:	movw	r1, #33168	; 0x8190
   12abc:	cmp	r0, #0
   12ac0:	movt	r1, #2
   12ac4:	movne	r1, r0
   12ac8:	ldr	r0, [r1]
   12acc:	bx	lr
   12ad0:	movw	r2, #33168	; 0x8190
   12ad4:	cmp	r0, #0
   12ad8:	movt	r2, #2
   12adc:	movne	r2, r0
   12ae0:	str	r1, [r2]
   12ae4:	bx	lr
   12ae8:	movw	r3, #33168	; 0x8190
   12aec:	cmp	r0, #0
   12af0:	movt	r3, #2
   12af4:	movne	r3, r0
   12af8:	ubfx	r0, r1, #5, #3
   12afc:	and	r1, r1, #31
   12b00:	add	r0, r3, r0, lsl #2
   12b04:	ldr	r3, [r0, #8]
   12b08:	eor	r2, r2, r3, lsr r1
   12b0c:	and	r2, r2, #1
   12b10:	eor	r2, r3, r2, lsl r1
   12b14:	str	r2, [r0, #8]
   12b18:	mov	r0, #1
   12b1c:	and	r0, r0, r3, lsr r1
   12b20:	bx	lr
   12b24:	movw	r2, #33168	; 0x8190
   12b28:	cmp	r0, #0
   12b2c:	movt	r2, #2
   12b30:	movne	r2, r0
   12b34:	ldr	r0, [r2, #4]
   12b38:	str	r1, [r2, #4]
   12b3c:	bx	lr
   12b40:	movw	r3, #33168	; 0x8190
   12b44:	cmp	r0, #0
   12b48:	movt	r3, #2
   12b4c:	movne	r3, r0
   12b50:	cmp	r1, #0
   12b54:	mov	r0, #10
   12b58:	cmpne	r2, #0
   12b5c:	str	r0, [r3]
   12b60:	bne	12b70 <_obstack_memory_used@@Base+0x230>
   12b64:	push	{fp, lr}
   12b68:	mov	fp, sp
   12b6c:	bl	110f0 <abort@plt>
   12b70:	str	r1, [r3, #40]	; 0x28
   12b74:	str	r2, [r3, #44]	; 0x2c
   12b78:	bx	lr
   12b7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b80:	add	fp, sp, #28
   12b84:	sub	sp, sp, #20
   12b88:	mov	r7, r0
   12b8c:	ldr	r0, [fp, #8]
   12b90:	movw	r5, #33168	; 0x8190
   12b94:	mov	r8, r3
   12b98:	mov	r9, r2
   12b9c:	mov	sl, r1
   12ba0:	movt	r5, #2
   12ba4:	cmp	r0, #0
   12ba8:	movne	r5, r0
   12bac:	bl	11054 <__errno_location@plt>
   12bb0:	mov	r4, r0
   12bb4:	ldm	r5, {r0, r1}
   12bb8:	ldr	r2, [r5, #40]	; 0x28
   12bbc:	ldr	r3, [r5, #44]	; 0x2c
   12bc0:	add	r5, r5, #8
   12bc4:	ldr	r6, [r4]
   12bc8:	stm	sp, {r0, r1, r5}
   12bcc:	str	r2, [sp, #12]
   12bd0:	str	r3, [sp, #16]
   12bd4:	mov	r0, r7
   12bd8:	mov	r1, sl
   12bdc:	mov	r2, r9
   12be0:	mov	r3, r8
   12be4:	bl	12bf4 <_obstack_memory_used@@Base+0x2b4>
   12be8:	str	r6, [r4]
   12bec:	sub	sp, fp, #28
   12bf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bf8:	add	fp, sp, #28
   12bfc:	sub	sp, sp, #156	; 0x9c
   12c00:	str	r0, [sp, #80]	; 0x50
   12c04:	ldr	r0, [fp, #12]
   12c08:	mov	r6, r1
   12c0c:	mov	r9, r3
   12c10:	str	r2, [fp, #-84]	; 0xffffffac
   12c14:	and	r1, r0, #4
   12c18:	str	r1, [sp, #32]
   12c1c:	and	r1, r0, #1
   12c20:	str	r1, [sp, #36]	; 0x24
   12c24:	ubfx	r4, r0, #1, #1
   12c28:	bl	10f88 <__ctype_get_mb_cur_max@plt>
   12c2c:	str	r0, [sp, #40]	; 0x28
   12c30:	ldr	r0, [fp, #24]
   12c34:	ldr	r7, [fp, #8]
   12c38:	mov	r1, #0
   12c3c:	mov	r5, #1
   12c40:	str	r1, [fp, #-56]	; 0xffffffc8
   12c44:	mov	r1, #0
   12c48:	str	r1, [sp, #60]	; 0x3c
   12c4c:	str	r0, [sp, #76]	; 0x4c
   12c50:	ldr	r0, [fp, #20]
   12c54:	str	r0, [sp, #72]	; 0x48
   12c58:	mov	r0, #0
   12c5c:	str	r0, [sp, #56]	; 0x38
   12c60:	mov	r0, #0
   12c64:	str	r0, [sp, #92]	; 0x5c
   12c68:	mov	r0, #0
   12c6c:	str	r0, [fp, #-76]	; 0xffffffb4
   12c70:	mov	r0, #0
   12c74:	cmp	r7, #10
   12c78:	bhi	13bf8 <_obstack_memory_used@@Base+0x12b8>
   12c7c:	add	r1, pc, #28
   12c80:	mov	sl, r6
   12c84:	ldr	r6, [sp, #80]	; 0x50
   12c88:	ldr	ip, [fp, #-84]	; 0xffffffac
   12c8c:	mov	r8, #0
   12c90:	mov	r2, #1
   12c94:	mov	r3, #0
   12c98:	mov	lr, r9
   12c9c:	ldr	pc, [r1, r7, lsl #2]
   12ca0:	andeq	r2, r1, r4, lsl #27
   12ca4:			; <UNDEFINED> instruction: 0x00012db0
   12ca8:	andeq	r2, r1, r4, ror sp
   12cac:	andeq	r2, r1, ip, ror #26
   12cb0:	andeq	r2, r1, r4, lsr #27
   12cb4:	strdeq	r2, [r1], -r8
   12cb8:	muleq	r1, r4, sp
   12cbc:	andeq	r2, r1, r4, asr lr
   12cc0:	andeq	r2, r1, ip, asr #25
   12cc4:	andeq	r2, r1, ip, asr #25
   12cc8:	strdeq	r2, [r1], -r4
   12ccc:	movw	r0, #29161	; 0x71e9
   12cd0:	mov	r1, r7
   12cd4:	movt	r0, #1
   12cd8:	bl	14604 <_obstack_memory_used@@Base+0x1cc4>
   12cdc:	str	r0, [sp, #72]	; 0x48
   12ce0:	movw	r0, #23363	; 0x5b43
   12ce4:	mov	r1, r7
   12ce8:	movt	r0, #1
   12cec:	bl	14604 <_obstack_memory_used@@Base+0x1cc4>
   12cf0:	str	r0, [sp, #76]	; 0x4c
   12cf4:	str	r5, [fp, #-48]	; 0xffffffd0
   12cf8:	mov	r8, #0
   12cfc:	mov	r5, r7
   12d00:	tst	r4, #1
   12d04:	bne	12d3c <_obstack_memory_used@@Base+0x3fc>
   12d08:	ldr	r0, [sp, #72]	; 0x48
   12d0c:	ldrb	r0, [r0]
   12d10:	cmp	r0, #0
   12d14:	beq	12d3c <_obstack_memory_used@@Base+0x3fc>
   12d18:	ldr	r1, [sp, #72]	; 0x48
   12d1c:	mov	r8, #0
   12d20:	add	r1, r1, #1
   12d24:	cmp	r8, sl
   12d28:	strbcc	r0, [r6, r8]
   12d2c:	ldrb	r0, [r1, r8]
   12d30:	add	r8, r8, #1
   12d34:	cmp	r0, #0
   12d38:	bne	12d24 <_obstack_memory_used@@Base+0x3e4>
   12d3c:	ldr	r7, [sp, #76]	; 0x4c
   12d40:	mov	r0, r7
   12d44:	bl	11048 <strlen@plt>
   12d48:	str	r7, [sp, #92]	; 0x5c
   12d4c:	mov	r7, r5
   12d50:	ldr	ip, [fp, #-84]	; 0xffffffac
   12d54:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12d58:	str	r0, [fp, #-76]	; 0xffffffb4
   12d5c:	mov	r2, #1
   12d60:	mov	r3, r4
   12d64:	mov	lr, r9
   12d68:	b	12e54 <_obstack_memory_used@@Base+0x514>
   12d6c:	mov	r0, #1
   12d70:	b	12db0 <_obstack_memory_used@@Base+0x470>
   12d74:	tst	r4, #1
   12d78:	bne	12db0 <_obstack_memory_used@@Base+0x470>
   12d7c:	mov	r2, r0
   12d80:	b	12dd8 <_obstack_memory_used@@Base+0x498>
   12d84:	mov	r7, #0
   12d88:	mov	r8, #0
   12d8c:	mov	r2, r0
   12d90:	b	12e50 <_obstack_memory_used@@Base+0x510>
   12d94:	mov	r0, #1
   12d98:	mov	r8, #0
   12d9c:	mov	r7, #5
   12da0:	b	12e0c <_obstack_memory_used@@Base+0x4cc>
   12da4:	mov	r2, #1
   12da8:	tst	r4, #1
   12dac:	beq	12dd8 <_obstack_memory_used@@Base+0x498>
   12db0:	mov	r1, #1
   12db4:	mov	r8, #0
   12db8:	mov	r7, #2
   12dbc:	mov	r2, r0
   12dc0:	mov	r3, #1
   12dc4:	str	r1, [fp, #-76]	; 0xffffffb4
   12dc8:	movw	r1, #23363	; 0x5b43
   12dcc:	movt	r1, #1
   12dd0:	str	r1, [sp, #92]	; 0x5c
   12dd4:	b	12e54 <_obstack_memory_used@@Base+0x514>
   12dd8:	cmp	sl, #0
   12ddc:	mov	r8, #1
   12de0:	mov	r7, #2
   12de4:	movne	r0, #39	; 0x27
   12de8:	strbne	r0, [r6]
   12dec:	movw	r0, #23363	; 0x5b43
   12df0:	movt	r0, #1
   12df4:	b	12e44 <_obstack_memory_used@@Base+0x504>
   12df8:	mov	r7, #5
   12dfc:	tst	r4, #1
   12e00:	beq	12e28 <_obstack_memory_used@@Base+0x4e8>
   12e04:	mov	r0, #1
   12e08:	mov	r8, #0
   12e0c:	str	r0, [fp, #-76]	; 0xffffffb4
   12e10:	movw	r0, #29159	; 0x71e7
   12e14:	mov	r2, #1
   12e18:	mov	r3, #1
   12e1c:	movt	r0, #1
   12e20:	str	r0, [sp, #92]	; 0x5c
   12e24:	b	12e54 <_obstack_memory_used@@Base+0x514>
   12e28:	cmp	sl, #0
   12e2c:	mov	r8, #1
   12e30:	mov	r2, #1
   12e34:	movne	r0, #34	; 0x22
   12e38:	strbne	r0, [r6]
   12e3c:	movw	r0, #29159	; 0x71e7
   12e40:	movt	r0, #1
   12e44:	str	r0, [sp, #92]	; 0x5c
   12e48:	mov	r0, #1
   12e4c:	str	r0, [fp, #-76]	; 0xffffffb4
   12e50:	mov	r3, #0
   12e54:	ldr	r0, [fp, #16]
   12e58:	str	r3, [fp, #-72]	; 0xffffffb8
   12e5c:	str	r7, [fp, #-64]	; 0xffffffc0
   12e60:	str	r2, [sp, #84]	; 0x54
   12e64:	cmp	r0, #0
   12e68:	movwne	r0, #1
   12e6c:	and	r0, r0, r3
   12e70:	str	r0, [fp, #-88]	; 0xffffffa8
   12e74:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12e78:	cmp	r0, #0
   12e7c:	movwne	r0, #1
   12e80:	subs	r4, r7, #2
   12e84:	mov	r7, #0
   12e88:	and	r1, r0, r3
   12e8c:	str	r4, [fp, #-80]	; 0xffffffb0
   12e90:	and	r1, r2, r1
   12e94:	str	r1, [sp, #48]	; 0x30
   12e98:	clz	r1, r4
   12e9c:	lsr	r1, r1, #5
   12ea0:	and	r1, r1, r3
   12ea4:	eor	r3, r3, #1
   12ea8:	str	r1, [sp, #64]	; 0x40
   12eac:	mov	r1, r4
   12eb0:	str	r3, [sp, #88]	; 0x58
   12eb4:	movwne	r1, #1
   12eb8:	orr	r3, r1, r3
   12ebc:	and	r1, r1, r2
   12ec0:	and	r0, r0, r1
   12ec4:	str	r3, [sp, #68]	; 0x44
   12ec8:	str	r1, [fp, #-68]	; 0xffffffbc
   12ecc:	str	r0, [fp, #-60]	; 0xffffffc4
   12ed0:	eor	r0, r2, #1
   12ed4:	str	r0, [sp, #52]	; 0x34
   12ed8:	cmn	lr, #1
   12edc:	beq	12eec <_obstack_memory_used@@Base+0x5ac>
   12ee0:	cmp	r7, lr
   12ee4:	bne	12ef8 <_obstack_memory_used@@Base+0x5b8>
   12ee8:	b	13a20 <_obstack_memory_used@@Base+0x10e0>
   12eec:	ldrb	r0, [ip, r7]
   12ef0:	cmp	r0, #0
   12ef4:	beq	13a28 <_obstack_memory_used@@Base+0x10e8>
   12ef8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12efc:	mov	r9, #0
   12f00:	str	r5, [fp, #-48]	; 0xffffffd0
   12f04:	cmp	r0, #0
   12f08:	beq	12f3c <_obstack_memory_used@@Base+0x5fc>
   12f0c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12f10:	add	r4, r7, r0
   12f14:	cmp	r0, #2
   12f18:	bcc	12f34 <_obstack_memory_used@@Base+0x5f4>
   12f1c:	cmn	lr, #1
   12f20:	bne	12f34 <_obstack_memory_used@@Base+0x5f4>
   12f24:	mov	r0, ip
   12f28:	bl	11048 <strlen@plt>
   12f2c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f30:	mov	lr, r0
   12f34:	cmp	r4, lr
   12f38:	bls	12f44 <_obstack_memory_used@@Base+0x604>
   12f3c:	mov	r0, #0
   12f40:	b	12f84 <_obstack_memory_used@@Base+0x644>
   12f44:	ldr	r1, [sp, #92]	; 0x5c
   12f48:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12f4c:	add	r0, ip, r7
   12f50:	mov	r4, lr
   12f54:	bl	10f28 <memcmp@plt>
   12f58:	ldr	r2, [sp, #88]	; 0x58
   12f5c:	cmp	r0, #0
   12f60:	mov	r1, r0
   12f64:	movwne	r1, #1
   12f68:	orr	r1, r1, r2
   12f6c:	tst	r1, #1
   12f70:	beq	13ab8 <_obstack_memory_used@@Base+0x1178>
   12f74:	ldr	ip, [fp, #-84]	; 0xffffffac
   12f78:	clz	r0, r0
   12f7c:	mov	lr, r4
   12f80:	lsr	r0, r0, #5
   12f84:	str	r0, [fp, #-52]	; 0xffffffcc
   12f88:	ldrb	r5, [ip, r7]
   12f8c:	cmp	r5, #126	; 0x7e
   12f90:	bhi	13348 <_obstack_memory_used@@Base+0xa08>
   12f94:	add	r3, pc, #16
   12f98:	mov	r4, #1
   12f9c:	mov	r2, #110	; 0x6e
   12fa0:	mov	r0, #97	; 0x61
   12fa4:	mov	r1, #0
   12fa8:	ldr	pc, [r3, r5, lsl #2]
   12fac:	andeq	r3, r1, r4, asr #4
   12fb0:	andeq	r3, r1, r8, asr #6
   12fb4:	andeq	r3, r1, r8, asr #6
   12fb8:	andeq	r3, r1, r8, asr #6
   12fbc:	andeq	r3, r1, r8, asr #6
   12fc0:	andeq	r3, r1, r8, asr #6
   12fc4:	andeq	r3, r1, r8, asr #6
   12fc8:	strdeq	r3, [r1], -ip
   12fcc:	andeq	r3, r1, r4, lsr #4
   12fd0:	andeq	r3, r1, ip, lsl r2
   12fd4:	andeq	r3, r1, r0, lsr r2
   12fd8:			; <UNDEFINED> instruction: 0x000132b0
   12fdc:	andeq	r3, r1, r4, lsl r2
   12fe0:	andeq	r3, r1, ip, lsr #4
   12fe4:	andeq	r3, r1, r8, asr #6
   12fe8:	andeq	r3, r1, r8, asr #6
   12fec:	andeq	r3, r1, r8, asr #6
   12ff0:	andeq	r3, r1, r8, asr #6
   12ff4:	andeq	r3, r1, r8, asr #6
   12ff8:	andeq	r3, r1, r8, asr #6
   12ffc:	andeq	r3, r1, r8, asr #6
   13000:	andeq	r3, r1, r8, asr #6
   13004:	andeq	r3, r1, r8, asr #6
   13008:	andeq	r3, r1, r8, asr #6
   1300c:	andeq	r3, r1, r8, asr #6
   13010:	andeq	r3, r1, r8, asr #6
   13014:	andeq	r3, r1, r8, asr #6
   13018:	andeq	r3, r1, r8, asr #6
   1301c:	andeq	r3, r1, r8, asr #6
   13020:	andeq	r3, r1, r8, asr #6
   13024:	andeq	r3, r1, r8, asr #6
   13028:	andeq	r3, r1, r8, asr #6
   1302c:			; <UNDEFINED> instruction: 0x000133b4
   13030:			; <UNDEFINED> instruction: 0x000133b8
   13034:			; <UNDEFINED> instruction: 0x000133b8
   13038:			; <UNDEFINED> instruction: 0x000131bc
   1303c:			; <UNDEFINED> instruction: 0x000133b8
   13040:	andeq	r3, r1, r8, lsr #3
   13044:			; <UNDEFINED> instruction: 0x000133b8
   13048:			; <UNDEFINED> instruction: 0x000132b8
   1304c:			; <UNDEFINED> instruction: 0x000133b8
   13050:			; <UNDEFINED> instruction: 0x000133b8
   13054:			; <UNDEFINED> instruction: 0x000133b8
   13058:	andeq	r3, r1, r8, lsr #3
   1305c:	andeq	r3, r1, r8, lsr #3
   13060:	andeq	r3, r1, r8, lsr #3
   13064:	andeq	r3, r1, r8, lsr #3
   13068:	andeq	r3, r1, r8, lsr #3
   1306c:	andeq	r3, r1, r8, lsr #3
   13070:	andeq	r3, r1, r8, lsr #3
   13074:	andeq	r3, r1, r8, lsr #3
   13078:	andeq	r3, r1, r8, lsr #3
   1307c:	andeq	r3, r1, r8, lsr #3
   13080:	andeq	r3, r1, r8, lsr #3
   13084:	andeq	r3, r1, r8, lsr #3
   13088:	andeq	r3, r1, r8, lsr #3
   1308c:	andeq	r3, r1, r8, lsr #3
   13090:	andeq	r3, r1, r8, lsr #3
   13094:	andeq	r3, r1, r8, lsr #3
   13098:			; <UNDEFINED> instruction: 0x000133b8
   1309c:			; <UNDEFINED> instruction: 0x000133b8
   130a0:			; <UNDEFINED> instruction: 0x000133b8
   130a4:			; <UNDEFINED> instruction: 0x000133b8
   130a8:	andeq	r3, r1, r4, lsl #5
   130ac:	andeq	r3, r1, r8, asr #6
   130b0:	andeq	r3, r1, r8, lsr #3
   130b4:	andeq	r3, r1, r8, lsr #3
   130b8:	andeq	r3, r1, r8, lsr #3
   130bc:	andeq	r3, r1, r8, lsr #3
   130c0:	andeq	r3, r1, r8, lsr #3
   130c4:	andeq	r3, r1, r8, lsr #3
   130c8:	andeq	r3, r1, r8, lsr #3
   130cc:	andeq	r3, r1, r8, lsr #3
   130d0:	andeq	r3, r1, r8, lsr #3
   130d4:	andeq	r3, r1, r8, lsr #3
   130d8:	andeq	r3, r1, r8, lsr #3
   130dc:	andeq	r3, r1, r8, lsr #3
   130e0:	andeq	r3, r1, r8, lsr #3
   130e4:	andeq	r3, r1, r8, lsr #3
   130e8:	andeq	r3, r1, r8, lsr #3
   130ec:	andeq	r3, r1, r8, lsr #3
   130f0:	andeq	r3, r1, r8, lsr #3
   130f4:	andeq	r3, r1, r8, lsr #3
   130f8:	andeq	r3, r1, r8, lsr #3
   130fc:	andeq	r3, r1, r8, lsr #3
   13100:	andeq	r3, r1, r8, lsr #3
   13104:	andeq	r3, r1, r8, lsr #3
   13108:	andeq	r3, r1, r8, lsr #3
   1310c:	andeq	r3, r1, r8, lsr #3
   13110:	andeq	r3, r1, r8, lsr #3
   13114:	andeq	r3, r1, r8, lsr #3
   13118:			; <UNDEFINED> instruction: 0x000133b8
   1311c:	strdeq	r3, [r1], -r0
   13120:	andeq	r3, r1, r8, lsr #3
   13124:			; <UNDEFINED> instruction: 0x000133b8
   13128:	andeq	r3, r1, r8, lsr #3
   1312c:			; <UNDEFINED> instruction: 0x000133b8
   13130:	andeq	r3, r1, r8, lsr #3
   13134:	andeq	r3, r1, r8, lsr #3
   13138:	andeq	r3, r1, r8, lsr #3
   1313c:	andeq	r3, r1, r8, lsr #3
   13140:	andeq	r3, r1, r8, lsr #3
   13144:	andeq	r3, r1, r8, lsr #3
   13148:	andeq	r3, r1, r8, lsr #3
   1314c:	andeq	r3, r1, r8, lsr #3
   13150:	andeq	r3, r1, r8, lsr #3
   13154:	andeq	r3, r1, r8, lsr #3
   13158:	andeq	r3, r1, r8, lsr #3
   1315c:	andeq	r3, r1, r8, lsr #3
   13160:	andeq	r3, r1, r8, lsr #3
   13164:	andeq	r3, r1, r8, lsr #3
   13168:	andeq	r3, r1, r8, lsr #3
   1316c:	andeq	r3, r1, r8, lsr #3
   13170:	andeq	r3, r1, r8, lsr #3
   13174:	andeq	r3, r1, r8, lsr #3
   13178:	andeq	r3, r1, r8, lsr #3
   1317c:	andeq	r3, r1, r8, lsr #3
   13180:	andeq	r3, r1, r8, lsr #3
   13184:	andeq	r3, r1, r8, lsr #3
   13188:	andeq	r3, r1, r8, lsr #3
   1318c:	andeq	r3, r1, r8, lsr #3
   13190:	andeq	r3, r1, r8, lsr #3
   13194:	andeq	r3, r1, r8, lsr #3
   13198:	ldrdeq	r3, [r1], -r0
   1319c:			; <UNDEFINED> instruction: 0x000133b8
   131a0:	ldrdeq	r3, [r1], -r0
   131a4:			; <UNDEFINED> instruction: 0x000131bc
   131a8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   131ac:	cmp	r0, #0
   131b0:	beq	13410 <_obstack_memory_used@@Base+0xad0>
   131b4:	ldr	r0, [fp, #16]
   131b8:	b	13414 <_obstack_memory_used@@Base+0xad4>
   131bc:	mov	r4, #0
   131c0:	cmp	r7, #0
   131c4:	beq	133b4 <_obstack_memory_used@@Base+0xa74>
   131c8:	mov	r9, #0
   131cc:	b	131a8 <_obstack_memory_used@@Base+0x868>
   131d0:	mov	r4, #0
   131d4:	cmn	lr, #1
   131d8:	beq	13398 <_obstack_memory_used@@Base+0xa58>
   131dc:	cmp	r7, #0
   131e0:	bne	131c8 <_obstack_memory_used@@Base+0x888>
   131e4:	cmp	lr, #1
   131e8:	beq	133b4 <_obstack_memory_used@@Base+0xa74>
   131ec:	b	131c8 <_obstack_memory_used@@Base+0x888>
   131f0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   131f4:	cmp	r0, #2
   131f8:	bne	133d8 <_obstack_memory_used@@Base+0xa98>
   131fc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13200:	tst	r0, #1
   13204:	bne	13ad4 <_obstack_memory_used@@Base+0x1194>
   13208:	mov	r9, #0
   1320c:	mov	r0, #92	; 0x5c
   13210:	b	133ec <_obstack_memory_used@@Base+0xaac>
   13214:	mov	r0, #102	; 0x66
   13218:	b	133fc <_obstack_memory_used@@Base+0xabc>
   1321c:	mov	r2, #116	; 0x74
   13220:	b	13230 <_obstack_memory_used@@Base+0x8f0>
   13224:	mov	r0, #98	; 0x62
   13228:	b	133fc <_obstack_memory_used@@Base+0xabc>
   1322c:	mov	r2, #114	; 0x72
   13230:	ldr	r0, [sp, #68]	; 0x44
   13234:	tst	r0, #1
   13238:	mov	r0, r2
   1323c:	bne	133fc <_obstack_memory_used@@Base+0xabc>
   13240:	b	13ad4 <_obstack_memory_used@@Base+0x1194>
   13244:	ldr	r0, [sp, #84]	; 0x54
   13248:	tst	r0, #1
   1324c:	beq	134ec <_obstack_memory_used@@Base+0xbac>
   13250:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13254:	tst	r0, #1
   13258:	bne	13be4 <_obstack_memory_used@@Base+0x12a4>
   1325c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13260:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13264:	cmp	r0, #2
   13268:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1326c:	movwne	r0, #1
   13270:	orr	r0, r0, r2
   13274:	tst	r0, #1
   13278:	beq	138bc <_obstack_memory_used@@Base+0xf7c>
   1327c:	mov	r0, r8
   13280:	b	138f0 <_obstack_memory_used@@Base+0xfb0>
   13284:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13288:	mov	r9, #0
   1328c:	mov	r5, #63	; 0x3f
   13290:	cmp	r0, #5
   13294:	beq	136a0 <_obstack_memory_used@@Base+0xd60>
   13298:	cmp	r0, #2
   1329c:	bne	13744 <_obstack_memory_used@@Base+0xe04>
   132a0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   132a4:	tst	r0, #1
   132a8:	beq	13748 <_obstack_memory_used@@Base+0xe08>
   132ac:	b	13ad4 <_obstack_memory_used@@Base+0x1194>
   132b0:	mov	r0, #118	; 0x76
   132b4:	b	133fc <_obstack_memory_used@@Base+0xabc>
   132b8:	mov	r0, #1
   132bc:	mov	r5, #39	; 0x27
   132c0:	str	r0, [sp, #60]	; 0x3c
   132c4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   132c8:	cmp	r0, #2
   132cc:	bne	13340 <_obstack_memory_used@@Base+0xa00>
   132d0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   132d4:	tst	r0, #1
   132d8:	bne	13ad4 <_obstack_memory_used@@Base+0x1194>
   132dc:	ldr	r2, [sp, #56]	; 0x38
   132e0:	clz	r1, sl
   132e4:	mov	r9, #0
   132e8:	lsr	r1, r1, #5
   132ec:	cmp	r2, #0
   132f0:	mov	r0, r2
   132f4:	movwne	r0, #1
   132f8:	orrs	r0, r0, r1
   132fc:	moveq	r2, sl
   13300:	moveq	sl, r0
   13304:	cmp	r8, sl
   13308:	str	r2, [sp, #56]	; 0x38
   1330c:	movcc	r0, #39	; 0x27
   13310:	strbcc	r0, [r6, r8]
   13314:	add	r0, r8, #1
   13318:	cmp	r0, sl
   1331c:	movcc	r1, #92	; 0x5c
   13320:	strbcc	r1, [r6, r0]
   13324:	add	r0, r8, #2
   13328:	add	r8, r8, #3
   1332c:	cmp	r0, sl
   13330:	movcc	r1, #39	; 0x27
   13334:	strbcc	r1, [r6, r0]
   13338:	mov	r0, #0
   1333c:	str	r0, [fp, #-56]	; 0xffffffc8
   13340:	mov	r4, #1
   13344:	b	131a8 <_obstack_memory_used@@Base+0x868>
   13348:	ldr	r0, [sp, #40]	; 0x28
   1334c:	cmp	r0, #1
   13350:	bne	13518 <_obstack_memory_used@@Base+0xbd8>
   13354:	str	lr, [sp, #28]
   13358:	bl	11030 <__ctype_b_loc@plt>
   1335c:	ldr	r0, [r0]
   13360:	ldr	ip, [fp, #-84]	; 0xffffffac
   13364:	mov	r1, #1
   13368:	add	r0, r0, r5, lsl #1
   1336c:	ldrb	r0, [r0, #1]
   13370:	ubfx	r4, r0, #6, #1
   13374:	ldr	r0, [sp, #52]	; 0x34
   13378:	mov	r2, r1
   1337c:	cmp	r1, #1
   13380:	orr	r0, r4, r0
   13384:	bhi	13750 <_obstack_memory_used@@Base+0xe10>
   13388:	tst	r0, #1
   1338c:	beq	13750 <_obstack_memory_used@@Base+0xe10>
   13390:	ldr	lr, [sp, #28]
   13394:	b	131a8 <_obstack_memory_used@@Base+0x868>
   13398:	cmp	r7, #0
   1339c:	ldrbeq	r0, [ip, #1]
   133a0:	cmpeq	r0, #0
   133a4:	beq	133b4 <_obstack_memory_used@@Base+0xa74>
   133a8:	mvn	lr, #0
   133ac:	mov	r9, #0
   133b0:	b	131a8 <_obstack_memory_used@@Base+0x868>
   133b4:	mov	r1, #1
   133b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   133bc:	cmp	r0, #2
   133c0:	bne	133d0 <_obstack_memory_used@@Base+0xa90>
   133c4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   133c8:	tst	r0, #1
   133cc:	bne	13ad4 <_obstack_memory_used@@Base+0x1194>
   133d0:	mov	r4, r1
   133d4:	b	131a8 <_obstack_memory_used@@Base+0x868>
   133d8:	ldr	r1, [sp, #48]	; 0x30
   133dc:	mov	r9, #0
   133e0:	mov	r0, #92	; 0x5c
   133e4:	cmp	r1, #0
   133e8:	beq	133fc <_obstack_memory_used@@Base+0xabc>
   133ec:	mov	r4, #0
   133f0:	cmp	r9, #0
   133f4:	beq	13988 <_obstack_memory_used@@Base+0x1048>
   133f8:	b	139c4 <_obstack_memory_used@@Base+0x1084>
   133fc:	ldr	r1, [sp, #84]	; 0x54
   13400:	mov	r4, #0
   13404:	mov	r9, #0
   13408:	tst	r1, #1
   1340c:	bne	1344c <_obstack_memory_used@@Base+0xb0c>
   13410:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13414:	cmp	r0, #0
   13418:	mov	r0, r5
   1341c:	beq	13440 <_obstack_memory_used@@Base+0xb00>
   13420:	ldr	r1, [fp, #16]
   13424:	ubfx	r0, r5, #5, #3
   13428:	mov	r2, #1
   1342c:	ldr	r0, [r1, r0, lsl #2]
   13430:	and	r1, r5, #31
   13434:	tst	r0, r2, lsl r1
   13438:	mov	r0, r5
   1343c:	bne	1344c <_obstack_memory_used@@Base+0xb0c>
   13440:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13444:	cmp	r1, #0
   13448:	beq	13980 <_obstack_memory_used@@Base+0x1040>
   1344c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13450:	tst	r1, #1
   13454:	bne	13aac <_obstack_memory_used@@Base+0x116c>
   13458:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1345c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13460:	cmp	r1, #2
   13464:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13468:	movwne	r1, #1
   1346c:	orr	r1, r1, r2
   13470:	tst	r1, #1
   13474:	beq	13480 <_obstack_memory_used@@Base+0xb40>
   13478:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1347c:	b	134bc <_obstack_memory_used@@Base+0xb7c>
   13480:	cmp	r8, sl
   13484:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13488:	movcc	r1, #39	; 0x27
   1348c:	strbcc	r1, [r6, r8]
   13490:	add	r1, r8, #1
   13494:	cmp	r1, sl
   13498:	movcc	r2, #36	; 0x24
   1349c:	strbcc	r2, [r6, r1]
   134a0:	add	r1, r8, #2
   134a4:	add	r8, r8, #3
   134a8:	cmp	r1, sl
   134ac:	movcc	r2, #39	; 0x27
   134b0:	strbcc	r2, [r6, r1]
   134b4:	mov	r1, #1
   134b8:	str	r1, [fp, #-56]	; 0xffffffc8
   134bc:	cmp	r8, sl
   134c0:	movcc	r1, #92	; 0x5c
   134c4:	strbcc	r1, [r6, r8]
   134c8:	add	r8, r8, #1
   134cc:	cmp	r8, sl
   134d0:	and	r5, r5, r4
   134d4:	add	r7, r7, #1
   134d8:	strbcc	r0, [r6, r8]
   134dc:	add	r8, r8, #1
   134e0:	cmn	lr, #1
   134e4:	bne	12ee0 <_obstack_memory_used@@Base+0x5a0>
   134e8:	b	12eec <_obstack_memory_used@@Base+0x5ac>
   134ec:	ldr	r0, [sp, #36]	; 0x24
   134f0:	mov	r4, #0
   134f4:	mov	r9, #0
   134f8:	mov	r5, #0
   134fc:	cmp	r0, #0
   13500:	beq	13410 <_obstack_memory_used@@Base+0xad0>
   13504:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13508:	add	r7, r7, #1
   1350c:	cmn	lr, #1
   13510:	bne	12ee0 <_obstack_memory_used@@Base+0x5a0>
   13514:	b	12eec <_obstack_memory_used@@Base+0x5ac>
   13518:	mov	r0, #0
   1351c:	cmn	lr, #1
   13520:	str	r0, [fp, #-36]	; 0xffffffdc
   13524:	str	r0, [fp, #-40]	; 0xffffffd8
   13528:	bne	1353c <_obstack_memory_used@@Base+0xbfc>
   1352c:	mov	r0, ip
   13530:	bl	11048 <strlen@plt>
   13534:	ldr	ip, [fp, #-84]	; 0xffffffac
   13538:	mov	lr, r0
   1353c:	add	r0, ip, r7
   13540:	mov	r4, #1
   13544:	mov	r6, #0
   13548:	str	lr, [sp, #28]
   1354c:	str	r0, [sp, #24]
   13550:	sub	r0, fp, #40	; 0x28
   13554:	mov	r3, r0
   13558:	str	r6, [sp, #44]	; 0x2c
   1355c:	add	r6, r6, r7
   13560:	sub	r0, fp, #44	; 0x2c
   13564:	add	r1, ip, r6
   13568:	sub	r2, lr, r6
   1356c:	bl	15514 <_obstack_memory_used@@Base+0x2bd4>
   13570:	cmp	r0, #0
   13574:	beq	13a0c <_obstack_memory_used@@Base+0x10cc>
   13578:	cmn	r0, #1
   1357c:	beq	139cc <_obstack_memory_used@@Base+0x108c>
   13580:	ldr	lr, [sp, #28]
   13584:	cmn	r0, #2
   13588:	beq	139d4 <_obstack_memory_used@@Base+0x1094>
   1358c:	ldr	r2, [sp, #64]	; 0x40
   13590:	cmp	r0, #2
   13594:	mov	r1, #0
   13598:	movwcc	r1, #1
   1359c:	eor	r2, r2, #1
   135a0:	orrs	r1, r2, r1
   135a4:	bne	13664 <_obstack_memory_used@@Base+0xd24>
   135a8:	ldr	r1, [sp, #44]	; 0x2c
   135ac:	ldr	r2, [sp, #24]
   135b0:	add	r1, r2, r1
   135b4:	mov	r2, #1
   135b8:	ldrb	r3, [r1, r2]
   135bc:	sub	r3, r3, #91	; 0x5b
   135c0:	cmp	r3, #33	; 0x21
   135c4:	bhi	13658 <_obstack_memory_used@@Base+0xd18>
   135c8:	add	r6, pc, #0
   135cc:	ldr	pc, [r6, r3, lsl #2]
   135d0:	andeq	r3, r1, ip, asr #21
   135d4:	andeq	r3, r1, ip, asr #21
   135d8:	andeq	r3, r1, r8, asr r6
   135dc:	andeq	r3, r1, ip, asr #21
   135e0:	andeq	r3, r1, r8, asr r6
   135e4:	andeq	r3, r1, ip, asr #21
   135e8:	andeq	r3, r1, r8, asr r6
   135ec:	andeq	r3, r1, r8, asr r6
   135f0:	andeq	r3, r1, r8, asr r6
   135f4:	andeq	r3, r1, r8, asr r6
   135f8:	andeq	r3, r1, r8, asr r6
   135fc:	andeq	r3, r1, r8, asr r6
   13600:	andeq	r3, r1, r8, asr r6
   13604:	andeq	r3, r1, r8, asr r6
   13608:	andeq	r3, r1, r8, asr r6
   1360c:	andeq	r3, r1, r8, asr r6
   13610:	andeq	r3, r1, r8, asr r6
   13614:	andeq	r3, r1, r8, asr r6
   13618:	andeq	r3, r1, r8, asr r6
   1361c:	andeq	r3, r1, r8, asr r6
   13620:	andeq	r3, r1, r8, asr r6
   13624:	andeq	r3, r1, r8, asr r6
   13628:	andeq	r3, r1, r8, asr r6
   1362c:	andeq	r3, r1, r8, asr r6
   13630:	andeq	r3, r1, r8, asr r6
   13634:	andeq	r3, r1, r8, asr r6
   13638:	andeq	r3, r1, r8, asr r6
   1363c:	andeq	r3, r1, r8, asr r6
   13640:	andeq	r3, r1, r8, asr r6
   13644:	andeq	r3, r1, r8, asr r6
   13648:	andeq	r3, r1, r8, asr r6
   1364c:	andeq	r3, r1, r8, asr r6
   13650:	andeq	r3, r1, r8, asr r6
   13654:	andeq	r3, r1, ip, asr #21
   13658:	add	r2, r2, #1
   1365c:	cmp	r2, r0
   13660:	bcc	135b8 <_obstack_memory_used@@Base+0xc78>
   13664:	ldr	r6, [sp, #44]	; 0x2c
   13668:	add	r6, r0, r6
   1366c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13670:	bl	10f64 <iswprint@plt>
   13674:	cmp	r0, #0
   13678:	movwne	r0, #1
   1367c:	and	r4, r4, r0
   13680:	sub	r0, fp, #40	; 0x28
   13684:	bl	10f10 <mbsinit@plt>
   13688:	ldr	lr, [sp, #28]
   1368c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13690:	sub	r3, fp, #40	; 0x28
   13694:	cmp	r0, #0
   13698:	beq	13558 <_obstack_memory_used@@Base+0xc18>
   1369c:	b	13a14 <_obstack_memory_used@@Base+0x10d4>
   136a0:	ldr	r0, [sp, #32]
   136a4:	cmp	r0, #0
   136a8:	beq	13744 <_obstack_memory_used@@Base+0xe04>
   136ac:	add	r0, r7, #2
   136b0:	cmp	r0, lr
   136b4:	bcs	13744 <_obstack_memory_used@@Base+0xe04>
   136b8:	add	r1, ip, r7
   136bc:	ldrb	r1, [r1, #1]
   136c0:	cmp	r1, #63	; 0x3f
   136c4:	bne	13744 <_obstack_memory_used@@Base+0xe04>
   136c8:	ldrb	r5, [ip, r0]
   136cc:	sub	r1, r5, #33	; 0x21
   136d0:	cmp	r1, #29
   136d4:	bhi	13744 <_obstack_memory_used@@Base+0xe04>
   136d8:	movw	r3, #20929	; 0x51c1
   136dc:	mov	r2, #1
   136e0:	movt	r3, #14336	; 0x3800
   136e4:	tst	r3, r2, lsl r1
   136e8:	beq	13744 <_obstack_memory_used@@Base+0xe04>
   136ec:	ldr	r1, [fp, #-72]	; 0xffffffb8
   136f0:	tst	r1, #1
   136f4:	bne	13bec <_obstack_memory_used@@Base+0x12ac>
   136f8:	cmp	r8, sl
   136fc:	mov	r7, r0
   13700:	mov	r4, #0
   13704:	movcc	r1, #63	; 0x3f
   13708:	strbcc	r1, [r6, r8]
   1370c:	add	r1, r8, #1
   13710:	cmp	r1, sl
   13714:	movcc	r2, #34	; 0x22
   13718:	strbcc	r2, [r6, r1]
   1371c:	add	r1, r8, #2
   13720:	cmp	r1, sl
   13724:	movcc	r2, #34	; 0x22
   13728:	strbcc	r2, [r6, r1]
   1372c:	add	r1, r8, #3
   13730:	add	r8, r8, #4
   13734:	cmp	r1, sl
   13738:	movcc	r2, #63	; 0x3f
   1373c:	strbcc	r2, [r6, r1]
   13740:	b	131a8 <_obstack_memory_used@@Base+0x868>
   13744:	mov	r5, #63	; 0x3f
   13748:	mov	r4, #0
   1374c:	b	131a8 <_obstack_memory_used@@Base+0x868>
   13750:	add	r1, r2, r7
   13754:	ldr	lr, [sp, #28]
   13758:	mov	r3, #0
   1375c:	str	r1, [sp, #44]	; 0x2c
   13760:	add	r1, r7, #1
   13764:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13768:	tst	r0, #1
   1376c:	bne	13840 <_obstack_memory_used@@Base+0xf00>
   13770:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13774:	tst	r2, #1
   13778:	bne	13b34 <_obstack_memory_used@@Base+0x11f4>
   1377c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13780:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13784:	cmp	r7, #2
   13788:	movwne	r3, #1
   1378c:	orr	r3, r3, r2
   13790:	tst	r3, #1
   13794:	bne	137d0 <_obstack_memory_used@@Base+0xe90>
   13798:	cmp	r8, sl
   1379c:	add	r3, r8, #1
   137a0:	movcc	r2, #39	; 0x27
   137a4:	strbcc	r2, [r6, r8]
   137a8:	cmp	r3, sl
   137ac:	movcc	r2, #36	; 0x24
   137b0:	strbcc	r2, [r6, r3]
   137b4:	add	r3, r8, #2
   137b8:	add	r8, r8, #3
   137bc:	cmp	r3, sl
   137c0:	movcc	r2, #39	; 0x27
   137c4:	strbcc	r2, [r6, r3]
   137c8:	mov	r2, #1
   137cc:	str	r2, [fp, #-56]	; 0xffffffc8
   137d0:	cmp	r8, sl
   137d4:	movcc	r3, #92	; 0x5c
   137d8:	strbcc	r3, [r6, r8]
   137dc:	add	r3, r8, #1
   137e0:	cmp	r3, sl
   137e4:	andcc	r7, r5, #192	; 0xc0
   137e8:	movcc	r2, #48	; 0x30
   137ec:	orrcc	r7, r2, r7, lsr #6
   137f0:	strbcc	r7, [r6, r3]
   137f4:	add	r3, r8, #2
   137f8:	add	r8, r8, #3
   137fc:	cmp	r3, sl
   13800:	lsrcc	r7, r5, #3
   13804:	movcc	r2, #6
   13808:	bficc	r7, r2, #3, #29
   1380c:	mov	r2, #6
   13810:	strbcc	r7, [r6, r3]
   13814:	bfi	r5, r2, #3, #29
   13818:	mov	r3, #1
   1381c:	b	13864 <_obstack_memory_used@@Base+0xf24>
   13820:	cmp	r8, sl
   13824:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13828:	strbcc	r5, [r6, r8]
   1382c:	add	r8, r8, #1
   13830:	ldrb	r5, [ip, r1]
   13834:	add	r1, r1, #1
   13838:	tst	r0, #1
   1383c:	beq	13770 <_obstack_memory_used@@Base+0xe30>
   13840:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13844:	tst	r2, #1
   13848:	beq	1385c <_obstack_memory_used@@Base+0xf1c>
   1384c:	cmp	r8, sl
   13850:	movcc	r7, #92	; 0x5c
   13854:	strbcc	r7, [r6, r8]
   13858:	add	r8, r8, #1
   1385c:	mov	r2, #0
   13860:	str	r2, [fp, #-52]	; 0xffffffcc
   13864:	ldr	r2, [sp, #44]	; 0x2c
   13868:	and	r9, r3, #1
   1386c:	cmp	r2, r1
   13870:	bls	13970 <_obstack_memory_used@@Base+0x1030>
   13874:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13878:	cmp	r9, #0
   1387c:	movwne	r9, #1
   13880:	mvn	r7, r2
   13884:	orr	r7, r7, r9
   13888:	tst	r7, #1
   1388c:	bne	13820 <_obstack_memory_used@@Base+0xee0>
   13890:	cmp	r8, sl
   13894:	movcc	r7, #39	; 0x27
   13898:	strbcc	r7, [r6, r8]
   1389c:	add	r7, r8, #1
   138a0:	add	r8, r8, #2
   138a4:	cmp	r7, sl
   138a8:	movcc	r2, #39	; 0x27
   138ac:	strbcc	r2, [r6, r7]
   138b0:	mov	r2, #0
   138b4:	str	r2, [fp, #-56]	; 0xffffffc8
   138b8:	b	13820 <_obstack_memory_used@@Base+0xee0>
   138bc:	cmp	r8, sl
   138c0:	mov	r2, #1
   138c4:	movcc	r0, #39	; 0x27
   138c8:	strbcc	r0, [r6, r8]
   138cc:	add	r0, r8, #1
   138d0:	cmp	r0, sl
   138d4:	movcc	r1, #36	; 0x24
   138d8:	strbcc	r1, [r6, r0]
   138dc:	add	r0, r8, #2
   138e0:	cmp	r0, sl
   138e4:	movcc	r1, #39	; 0x27
   138e8:	strbcc	r1, [r6, r0]
   138ec:	add	r0, r8, #3
   138f0:	cmp	r0, sl
   138f4:	add	r8, r0, #1
   138f8:	str	r2, [fp, #-56]	; 0xffffffc8
   138fc:	movcc	r1, #92	; 0x5c
   13900:	strbcc	r1, [r6, r0]
   13904:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13908:	cmp	r1, #2
   1390c:	beq	13960 <_obstack_memory_used@@Base+0x1020>
   13910:	add	r1, r7, #1
   13914:	mov	r4, #0
   13918:	mov	r9, #1
   1391c:	mov	r5, #48	; 0x30
   13920:	cmp	r1, lr
   13924:	bcs	131a8 <_obstack_memory_used@@Base+0x868>
   13928:	ldrb	r1, [ip, r1]
   1392c:	sub	r1, r1, #48	; 0x30
   13930:	uxtb	r1, r1
   13934:	cmp	r1, #9
   13938:	bhi	131a8 <_obstack_memory_used@@Base+0x868>
   1393c:	cmp	r8, sl
   13940:	movcc	r1, #48	; 0x30
   13944:	strbcc	r1, [r6, r8]
   13948:	add	r1, r0, #2
   1394c:	add	r8, r0, #3
   13950:	cmp	r1, sl
   13954:	movcc	r2, #48	; 0x30
   13958:	strbcc	r2, [r6, r1]
   1395c:	b	131a8 <_obstack_memory_used@@Base+0x868>
   13960:	mov	r0, #48	; 0x30
   13964:	mov	r9, #1
   13968:	mov	r4, #0
   1396c:	b	13440 <_obstack_memory_used@@Base+0xb00>
   13970:	cmp	r9, #0
   13974:	sub	r7, r1, #1
   13978:	mov	r0, r5
   1397c:	movwne	r9, #1
   13980:	cmp	r9, #0
   13984:	bne	139c4 <_obstack_memory_used@@Base+0x1084>
   13988:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1398c:	tst	r1, #1
   13990:	beq	139c4 <_obstack_memory_used@@Base+0x1084>
   13994:	cmp	r8, sl
   13998:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1399c:	movcc	r1, #39	; 0x27
   139a0:	strbcc	r1, [r6, r8]
   139a4:	add	r1, r8, #1
   139a8:	add	r8, r8, #2
   139ac:	cmp	r1, sl
   139b0:	movcc	r2, #39	; 0x27
   139b4:	strbcc	r2, [r6, r1]
   139b8:	mov	r1, #0
   139bc:	str	r1, [fp, #-56]	; 0xffffffc8
   139c0:	b	134cc <_obstack_memory_used@@Base+0xb8c>
   139c4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   139c8:	b	134cc <_obstack_memory_used@@Base+0xb8c>
   139cc:	mov	r4, #0
   139d0:	b	13a0c <_obstack_memory_used@@Base+0x10cc>
   139d4:	mov	r4, #0
   139d8:	cmp	lr, r6
   139dc:	bls	13a0c <_obstack_memory_used@@Base+0x10cc>
   139e0:	ldr	ip, [fp, #-84]	; 0xffffffac
   139e4:	ldr	r6, [sp, #44]	; 0x2c
   139e8:	ldr	r0, [sp, #24]
   139ec:	ldrb	r0, [r0, r6]
   139f0:	cmp	r0, #0
   139f4:	beq	13a14 <_obstack_memory_used@@Base+0x10d4>
   139f8:	add	r6, r6, #1
   139fc:	add	r0, r7, r6
   13a00:	cmp	r0, lr
   13a04:	bcc	139e8 <_obstack_memory_used@@Base+0x10a8>
   13a08:	b	13a14 <_obstack_memory_used@@Base+0x10d4>
   13a0c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13a10:	ldr	r6, [sp, #44]	; 0x2c
   13a14:	mov	r1, r6
   13a18:	ldr	r6, [sp, #80]	; 0x50
   13a1c:	b	13374 <_obstack_memory_used@@Base+0xa34>
   13a20:	mov	lr, r7
   13a24:	b	13a2c <_obstack_memory_used@@Base+0x10ec>
   13a28:	mvn	lr, #0
   13a2c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13a30:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13a34:	eor	r0, r7, #2
   13a38:	orr	r0, r0, r8
   13a3c:	clz	r0, r0
   13a40:	lsr	r0, r0, #5
   13a44:	tst	r1, r0
   13a48:	bne	13ad4 <_obstack_memory_used@@Base+0x1194>
   13a4c:	mov	r0, r1
   13a50:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13a54:	cmp	r7, #2
   13a58:	movwne	r1, #1
   13a5c:	orr	r0, r0, r1
   13a60:	tst	r0, #1
   13a64:	ldreq	r0, [sp, #60]	; 0x3c
   13a68:	eoreq	r0, r0, #1
   13a6c:	tsteq	r0, #1
   13a70:	bne	13b80 <_obstack_memory_used@@Base+0x1240>
   13a74:	mov	r9, lr
   13a78:	tst	r5, #1
   13a7c:	bne	13b3c <_obstack_memory_used@@Base+0x11fc>
   13a80:	ldr	r6, [sp, #56]	; 0x38
   13a84:	mov	r4, #0
   13a88:	cmp	r6, #0
   13a8c:	beq	13b78 <_obstack_memory_used@@Base+0x1238>
   13a90:	ldr	r0, [sp, #84]	; 0x54
   13a94:	mov	r1, #0
   13a98:	cmp	sl, #0
   13a9c:	mov	r5, #0
   13aa0:	str	r1, [fp, #-72]	; 0xffffffb8
   13aa4:	beq	12c74 <_obstack_memory_used@@Base+0x334>
   13aa8:	b	13b80 <_obstack_memory_used@@Base+0x1240>
   13aac:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13ab0:	ldr	r2, [sp, #84]	; 0x54
   13ab4:	b	13adc <_obstack_memory_used@@Base+0x119c>
   13ab8:	ldr	ip, [fp, #-84]	; 0xffffffac
   13abc:	mov	r2, #1
   13ac0:	mov	lr, r4
   13ac4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13ac8:	b	13adc <_obstack_memory_used@@Base+0x119c>
   13acc:	ldr	r6, [sp, #80]	; 0x50
   13ad0:	ldr	ip, [fp, #-84]	; 0xffffffac
   13ad4:	ldr	r2, [sp, #84]	; 0x54
   13ad8:	mov	r7, #2
   13adc:	mov	r0, #0
   13ae0:	ldr	r1, [fp, #12]
   13ae4:	tst	r2, #1
   13ae8:	mov	r2, r7
   13aec:	mov	r3, lr
   13af0:	str	r0, [sp, #8]
   13af4:	ldr	r0, [sp, #72]	; 0x48
   13af8:	movwne	r2, #4
   13afc:	cmp	r7, #2
   13b00:	movne	r2, r7
   13b04:	str	r2, [sp]
   13b08:	mov	r2, ip
   13b0c:	bic	r1, r1, #2
   13b10:	str	r0, [sp, #12]
   13b14:	ldr	r0, [sp, #76]	; 0x4c
   13b18:	str	r1, [sp, #4]
   13b1c:	mov	r1, sl
   13b20:	str	r0, [sp, #16]
   13b24:	mov	r0, r6
   13b28:	bl	12bf4 <_obstack_memory_used@@Base+0x2b4>
   13b2c:	mov	r8, r0
   13b30:	b	13bd8 <_obstack_memory_used@@Base+0x1298>
   13b34:	ldr	r2, [sp, #84]	; 0x54
   13b38:	b	13adc <_obstack_memory_used@@Base+0x119c>
   13b3c:	mov	r0, #5
   13b40:	ldr	r1, [sp, #56]	; 0x38
   13b44:	ldr	r2, [fp, #-84]	; 0xffffffac
   13b48:	mov	r3, r9
   13b4c:	str	r0, [sp]
   13b50:	ldr	r0, [fp, #12]
   13b54:	str	r0, [sp, #4]
   13b58:	ldr	r0, [fp, #16]
   13b5c:	str	r0, [sp, #8]
   13b60:	ldr	r0, [sp, #72]	; 0x48
   13b64:	str	r0, [sp, #12]
   13b68:	ldr	r0, [sp, #76]	; 0x4c
   13b6c:	str	r0, [sp, #16]
   13b70:	ldr	r0, [sp, #80]	; 0x50
   13b74:	b	13b28 <_obstack_memory_used@@Base+0x11e8>
   13b78:	mov	r0, #0
   13b7c:	str	r0, [fp, #-72]	; 0xffffffb8
   13b80:	ldr	r1, [sp, #92]	; 0x5c
   13b84:	cmp	r1, #0
   13b88:	beq	13bc8 <_obstack_memory_used@@Base+0x1288>
   13b8c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13b90:	ldr	r2, [sp, #80]	; 0x50
   13b94:	tst	r0, #1
   13b98:	bne	13bcc <_obstack_memory_used@@Base+0x128c>
   13b9c:	ldrb	r0, [r1]
   13ba0:	cmp	r0, #0
   13ba4:	beq	13bcc <_obstack_memory_used@@Base+0x128c>
   13ba8:	add	r1, r1, #1
   13bac:	cmp	r8, sl
   13bb0:	strbcc	r0, [r2, r8]
   13bb4:	add	r8, r8, #1
   13bb8:	ldrb	r0, [r1], #1
   13bbc:	cmp	r0, #0
   13bc0:	bne	13bac <_obstack_memory_used@@Base+0x126c>
   13bc4:	b	13bcc <_obstack_memory_used@@Base+0x128c>
   13bc8:	ldr	r2, [sp, #80]	; 0x50
   13bcc:	cmp	r8, sl
   13bd0:	movcc	r0, #0
   13bd4:	strbcc	r0, [r2, r8]
   13bd8:	mov	r0, r8
   13bdc:	sub	sp, fp, #28
   13be0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13be4:	mov	r2, #1
   13be8:	b	13ac4 <_obstack_memory_used@@Base+0x1184>
   13bec:	ldr	r2, [sp, #84]	; 0x54
   13bf0:	mov	r7, #5
   13bf4:	b	13adc <_obstack_memory_used@@Base+0x119c>
   13bf8:	bl	110f0 <abort@plt>
   13bfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c00:	add	fp, sp, #28
   13c04:	sub	sp, sp, #28
   13c08:	movw	r5, #33168	; 0x8190
   13c0c:	cmp	r2, #0
   13c10:	mov	r4, r1
   13c14:	mov	r7, r0
   13c18:	str	r0, [sp, #20]
   13c1c:	movt	r5, #2
   13c20:	movne	r5, r2
   13c24:	bl	11054 <__errno_location@plt>
   13c28:	mov	sl, r0
   13c2c:	ldm	r5, {r0, r1}
   13c30:	ldr	r2, [r5, #40]	; 0x28
   13c34:	ldr	r3, [r5, #44]	; 0x2c
   13c38:	add	r9, r5, #8
   13c3c:	ldr	r6, [sl]
   13c40:	orr	r8, r1, #1
   13c44:	mov	r1, #0
   13c48:	str	r6, [sp, #24]
   13c4c:	stm	sp, {r0, r8, r9}
   13c50:	str	r2, [sp, #12]
   13c54:	str	r3, [sp, #16]
   13c58:	mov	r0, #0
   13c5c:	mov	r2, r7
   13c60:	mov	r3, r4
   13c64:	mov	r6, r4
   13c68:	bl	12bf4 <_obstack_memory_used@@Base+0x2b4>
   13c6c:	add	r7, r0, #1
   13c70:	mov	r0, r7
   13c74:	bl	14e0c <_obstack_memory_used@@Base+0x24cc>
   13c78:	mov	r4, r0
   13c7c:	ldr	r0, [r5]
   13c80:	ldr	r2, [r5, #44]	; 0x2c
   13c84:	ldr	r1, [r5, #40]	; 0x28
   13c88:	mov	r3, r6
   13c8c:	stm	sp, {r0, r8, r9}
   13c90:	str	r2, [sp, #16]
   13c94:	str	r1, [sp, #12]
   13c98:	mov	r0, r4
   13c9c:	mov	r1, r7
   13ca0:	ldr	r2, [sp, #20]
   13ca4:	bl	12bf4 <_obstack_memory_used@@Base+0x2b4>
   13ca8:	ldr	r0, [sp, #24]
   13cac:	str	r0, [sl]
   13cb0:	mov	r0, r4
   13cb4:	sub	sp, fp, #28
   13cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cc0:	add	fp, sp, #28
   13cc4:	sub	sp, sp, #36	; 0x24
   13cc8:	movw	r8, #33168	; 0x8190
   13ccc:	cmp	r3, #0
   13cd0:	mov	r4, r2
   13cd4:	str	r2, [sp, #24]
   13cd8:	mov	r5, r1
   13cdc:	mov	r6, r0
   13ce0:	str	r0, [sp, #20]
   13ce4:	movt	r8, #2
   13ce8:	movne	r8, r3
   13cec:	bl	11054 <__errno_location@plt>
   13cf0:	str	r0, [sp, #28]
   13cf4:	cmp	r4, #0
   13cf8:	add	sl, r8, #8
   13cfc:	ldm	r8, {r3, r9}
   13d00:	ldr	r7, [r0]
   13d04:	ldr	r1, [r8, #40]	; 0x28
   13d08:	ldr	r2, [r8, #44]	; 0x2c
   13d0c:	mov	r0, #0
   13d10:	orreq	r9, r9, #1
   13d14:	str	r7, [sp, #32]
   13d18:	mov	r7, r5
   13d1c:	stm	sp, {r3, r9, sl}
   13d20:	str	r1, [sp, #12]
   13d24:	str	r2, [sp, #16]
   13d28:	mov	r1, #0
   13d2c:	mov	r2, r6
   13d30:	mov	r3, r5
   13d34:	bl	12bf4 <_obstack_memory_used@@Base+0x2b4>
   13d38:	add	r4, r0, #1
   13d3c:	mov	r5, r0
   13d40:	mov	r0, r4
   13d44:	bl	14e0c <_obstack_memory_used@@Base+0x24cc>
   13d48:	mov	r6, r0
   13d4c:	ldr	r0, [r8]
   13d50:	ldr	r2, [r8, #44]	; 0x2c
   13d54:	ldr	r1, [r8, #40]	; 0x28
   13d58:	mov	r3, r7
   13d5c:	stm	sp, {r0, r9, sl}
   13d60:	str	r2, [sp, #16]
   13d64:	str	r1, [sp, #12]
   13d68:	mov	r0, r6
   13d6c:	mov	r1, r4
   13d70:	ldr	r2, [sp, #20]
   13d74:	bl	12bf4 <_obstack_memory_used@@Base+0x2b4>
   13d78:	ldr	r0, [sp, #24]
   13d7c:	ldr	r1, [sp, #32]
   13d80:	ldr	r2, [sp, #28]
   13d84:	cmp	r0, #0
   13d88:	str	r1, [r2]
   13d8c:	strne	r5, [r0]
   13d90:	mov	r0, r6
   13d94:	sub	sp, fp, #28
   13d98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d9c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13da0:	add	fp, sp, #24
   13da4:	movw	r5, #33012	; 0x80f4
   13da8:	movw	r8, #33008	; 0x80f0
   13dac:	movt	r5, #2
   13db0:	movt	r8, #2
   13db4:	ldr	r0, [r5]
   13db8:	ldr	r4, [r8]
   13dbc:	cmp	r0, #2
   13dc0:	blt	13dec <_obstack_memory_used@@Base+0x14ac>
   13dc4:	add	r7, r4, #12
   13dc8:	mov	r6, #0
   13dcc:	ldr	r0, [r7, r6, lsl #3]
   13dd0:	bl	122b4 <close@plt+0x11b8>
   13dd4:	ldr	r1, [r5]
   13dd8:	add	r2, r6, #2
   13ddc:	add	r0, r6, #1
   13de0:	mov	r6, r0
   13de4:	cmp	r2, r1
   13de8:	blt	13dcc <_obstack_memory_used@@Base+0x148c>
   13dec:	ldr	r0, [r4, #4]
   13df0:	movw	r7, #33216	; 0x81c0
   13df4:	movt	r7, #2
   13df8:	cmp	r0, r7
   13dfc:	beq	13e14 <_obstack_memory_used@@Base+0x14d4>
   13e00:	bl	122b4 <close@plt+0x11b8>
   13e04:	movw	r0, #33016	; 0x80f8
   13e08:	mov	r6, #256	; 0x100
   13e0c:	movt	r0, #2
   13e10:	strd	r6, [r0]
   13e14:	movw	r6, #33016	; 0x80f8
   13e18:	movt	r6, #2
   13e1c:	cmp	r4, r6
   13e20:	beq	13e30 <_obstack_memory_used@@Base+0x14f0>
   13e24:	mov	r0, r4
   13e28:	bl	122b4 <close@plt+0x11b8>
   13e2c:	str	r6, [r8]
   13e30:	mov	r0, #1
   13e34:	str	r0, [r5]
   13e38:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e3c:	movw	r3, #33168	; 0x8190
   13e40:	mvn	r2, #0
   13e44:	movt	r3, #2
   13e48:	b	13e4c <_obstack_memory_used@@Base+0x150c>
   13e4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e50:	add	fp, sp, #28
   13e54:	sub	sp, sp, #44	; 0x2c
   13e58:	mov	r7, r3
   13e5c:	str	r2, [sp, #36]	; 0x24
   13e60:	str	r1, [sp, #32]
   13e64:	mov	r5, r0
   13e68:	bl	11054 <__errno_location@plt>
   13e6c:	cmp	r5, #0
   13e70:	blt	13fdc <_obstack_memory_used@@Base+0x169c>
   13e74:	cmn	r5, #-2147483647	; 0x80000001
   13e78:	beq	13fdc <_obstack_memory_used@@Base+0x169c>
   13e7c:	movw	r8, #33012	; 0x80f4
   13e80:	movw	r4, #33008	; 0x80f0
   13e84:	str	r0, [sp, #28]
   13e88:	ldr	r0, [r0]
   13e8c:	movt	r8, #2
   13e90:	movt	r4, #2
   13e94:	ldr	r1, [r8]
   13e98:	ldr	r6, [r4]
   13e9c:	str	r0, [sp, #24]
   13ea0:	cmp	r1, r5
   13ea4:	ble	13eb0 <_obstack_memory_used@@Base+0x1570>
   13ea8:	mov	sl, r6
   13eac:	b	13f18 <_obstack_memory_used@@Base+0x15d8>
   13eb0:	movw	r9, #33016	; 0x80f8
   13eb4:	mov	r0, #8
   13eb8:	add	r2, r5, #1
   13ebc:	str	r1, [fp, #-32]	; 0xffffffe0
   13ec0:	mvn	r3, #-2147483648	; 0x80000000
   13ec4:	movt	r9, #2
   13ec8:	str	r0, [sp]
   13ecc:	sub	r2, r2, r1
   13ed0:	sub	r1, fp, #32
   13ed4:	subs	r0, r6, r9
   13ed8:	movne	r0, r6
   13edc:	bl	1500c <_obstack_memory_used@@Base+0x26cc>
   13ee0:	cmp	r6, r9
   13ee4:	mov	sl, r0
   13ee8:	str	r0, [r4]
   13eec:	ldrdeq	r0, [r9]
   13ef0:	stmeq	sl, {r0, r1}
   13ef4:	ldr	r1, [r8]
   13ef8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13efc:	add	r0, sl, r1, lsl #3
   13f00:	sub	r1, r2, r1
   13f04:	lsl	r2, r1, #3
   13f08:	mov	r1, #0
   13f0c:	bl	1106c <memset@plt>
   13f10:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13f14:	str	r0, [r8]
   13f18:	mov	r9, sl
   13f1c:	ldr	r6, [r9, r5, lsl #3]!
   13f20:	ldr	r4, [r9, #4]!
   13f24:	ldm	r7, {r0, r1}
   13f28:	ldr	r2, [r7, #40]	; 0x28
   13f2c:	ldr	r3, [r7, #44]	; 0x2c
   13f30:	orr	r8, r1, #1
   13f34:	add	r1, r7, #8
   13f38:	stm	sp, {r0, r8}
   13f3c:	add	r0, sp, #8
   13f40:	str	r1, [sp, #20]
   13f44:	stm	r0, {r1, r2, r3}
   13f48:	mov	r0, r4
   13f4c:	mov	r1, r6
   13f50:	ldr	r2, [sp, #32]
   13f54:	ldr	r3, [sp, #36]	; 0x24
   13f58:	bl	12bf4 <_obstack_memory_used@@Base+0x2b4>
   13f5c:	cmp	r6, r0
   13f60:	bhi	13fc4 <_obstack_memory_used@@Base+0x1684>
   13f64:	add	r6, r0, #1
   13f68:	movw	r0, #33216	; 0x81c0
   13f6c:	movt	r0, #2
   13f70:	str	r6, [sl, r5, lsl #3]
   13f74:	cmp	r4, r0
   13f78:	beq	13f84 <_obstack_memory_used@@Base+0x1644>
   13f7c:	mov	r0, r4
   13f80:	bl	122b4 <close@plt+0x11b8>
   13f84:	mov	r0, r6
   13f88:	bl	14e0c <_obstack_memory_used@@Base+0x24cc>
   13f8c:	str	r0, [r9]
   13f90:	mov	r4, r0
   13f94:	add	r3, sp, #8
   13f98:	ldr	r0, [r7]
   13f9c:	ldr	r1, [r7, #40]	; 0x28
   13fa0:	ldr	r2, [r7, #44]	; 0x2c
   13fa4:	stm	sp, {r0, r8}
   13fa8:	ldr	r0, [sp, #20]
   13fac:	stm	r3, {r0, r1, r2}
   13fb0:	mov	r0, r4
   13fb4:	mov	r1, r6
   13fb8:	ldr	r2, [sp, #32]
   13fbc:	ldr	r3, [sp, #36]	; 0x24
   13fc0:	bl	12bf4 <_obstack_memory_used@@Base+0x2b4>
   13fc4:	ldr	r0, [sp, #28]
   13fc8:	ldr	r1, [sp, #24]
   13fcc:	str	r1, [r0]
   13fd0:	mov	r0, r4
   13fd4:	sub	sp, fp, #28
   13fd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fdc:	bl	110f0 <abort@plt>
   13fe0:	movw	r3, #33168	; 0x8190
   13fe4:	movt	r3, #2
   13fe8:	b	13e4c <_obstack_memory_used@@Base+0x150c>
   13fec:	movw	r3, #33168	; 0x8190
   13ff0:	mov	r1, r0
   13ff4:	mov	r0, #0
   13ff8:	mvn	r2, #0
   13ffc:	movt	r3, #2
   14000:	b	13e4c <_obstack_memory_used@@Base+0x150c>
   14004:	movw	r3, #33168	; 0x8190
   14008:	mov	r2, r1
   1400c:	mov	r1, r0
   14010:	mov	r0, #0
   14014:	movt	r3, #2
   14018:	b	13e4c <_obstack_memory_used@@Base+0x150c>
   1401c:	push	{fp, lr}
   14020:	mov	fp, sp
   14024:	sub	sp, sp, #48	; 0x30
   14028:	vmov.i32	q8, #0	; 0x00000000
   1402c:	mov	ip, #32
   14030:	mov	r3, sp
   14034:	mov	lr, r2
   14038:	cmp	r1, #10
   1403c:	add	r2, r3, #16
   14040:	vst1.64	{d16-d17}, [r3], ip
   14044:	vst1.64	{d16-d17}, [r3]
   14048:	vst1.64	{d16-d17}, [r2]
   1404c:	beq	1406c <_obstack_memory_used@@Base+0x172c>
   14050:	str	r1, [sp]
   14054:	mov	r3, sp
   14058:	mov	r1, lr
   1405c:	mvn	r2, #0
   14060:	bl	13e4c <_obstack_memory_used@@Base+0x150c>
   14064:	mov	sp, fp
   14068:	pop	{fp, pc}
   1406c:	bl	110f0 <abort@plt>
   14070:	push	{r4, sl, fp, lr}
   14074:	add	fp, sp, #8
   14078:	sub	sp, sp, #48	; 0x30
   1407c:	mov	ip, r3
   14080:	mov	r3, sp
   14084:	vmov.i32	q8, #0	; 0x00000000
   14088:	mov	lr, #32
   1408c:	cmp	r1, #10
   14090:	add	r4, r3, #16
   14094:	vst1.64	{d16-d17}, [r3], lr
   14098:	vst1.64	{d16-d17}, [r3]
   1409c:	vst1.64	{d16-d17}, [r4]
   140a0:	beq	140c0 <_obstack_memory_used@@Base+0x1780>
   140a4:	str	r1, [sp]
   140a8:	mov	r1, r2
   140ac:	mov	r3, sp
   140b0:	mov	r2, ip
   140b4:	bl	13e4c <_obstack_memory_used@@Base+0x150c>
   140b8:	sub	sp, fp, #8
   140bc:	pop	{r4, sl, fp, pc}
   140c0:	bl	110f0 <abort@plt>
   140c4:	push	{fp, lr}
   140c8:	mov	fp, sp
   140cc:	sub	sp, sp, #48	; 0x30
   140d0:	mov	r3, sp
   140d4:	vmov.i32	q8, #0	; 0x00000000
   140d8:	mov	ip, #32
   140dc:	cmp	r0, #10
   140e0:	add	r2, r3, #16
   140e4:	vst1.64	{d16-d17}, [r3], ip
   140e8:	vst1.64	{d16-d17}, [r3]
   140ec:	vst1.64	{d16-d17}, [r2]
   140f0:	beq	14110 <_obstack_memory_used@@Base+0x17d0>
   140f4:	str	r0, [sp]
   140f8:	mov	r3, sp
   140fc:	mov	r0, #0
   14100:	mvn	r2, #0
   14104:	bl	13e4c <_obstack_memory_used@@Base+0x150c>
   14108:	mov	sp, fp
   1410c:	pop	{fp, pc}
   14110:	bl	110f0 <abort@plt>
   14114:	push	{fp, lr}
   14118:	mov	fp, sp
   1411c:	sub	sp, sp, #48	; 0x30
   14120:	mov	r3, sp
   14124:	vmov.i32	q8, #0	; 0x00000000
   14128:	mov	ip, #32
   1412c:	cmp	r0, #10
   14130:	add	lr, r3, #16
   14134:	vst1.64	{d16-d17}, [r3], ip
   14138:	vst1.64	{d16-d17}, [r3]
   1413c:	vst1.64	{d16-d17}, [lr]
   14140:	beq	1415c <_obstack_memory_used@@Base+0x181c>
   14144:	str	r0, [sp]
   14148:	mov	r3, sp
   1414c:	mov	r0, #0
   14150:	bl	13e4c <_obstack_memory_used@@Base+0x150c>
   14154:	mov	sp, fp
   14158:	pop	{fp, pc}
   1415c:	bl	110f0 <abort@plt>
   14160:	push	{r4, sl, fp, lr}
   14164:	add	fp, sp, #8
   14168:	sub	sp, sp, #48	; 0x30
   1416c:	mov	lr, r0
   14170:	movw	r0, #33168	; 0x8190
   14174:	mov	r3, #32
   14178:	mov	ip, r1
   1417c:	mov	r4, #1
   14180:	movt	r0, #2
   14184:	add	r1, r0, #16
   14188:	vld1.64	{d16-d17}, [r0], r3
   1418c:	mov	r3, sp
   14190:	vld1.64	{d18-d19}, [r1]
   14194:	add	r1, r3, #16
   14198:	vld1.64	{d20-d21}, [r0]
   1419c:	add	r0, r3, #32
   141a0:	vst1.64	{d18-d19}, [r1]
   141a4:	mov	r1, r3
   141a8:	vst1.64	{d20-d21}, [r0]
   141ac:	mov	r0, #28
   141b0:	and	r0, r0, r2, lsr #3
   141b4:	and	r2, r2, #31
   141b8:	vst1.64	{d16-d17}, [r1], r0
   141bc:	ldr	r0, [r1, #8]
   141c0:	bic	r4, r4, r0, lsr r2
   141c4:	eor	r0, r0, r4, lsl r2
   141c8:	mov	r2, ip
   141cc:	str	r0, [r1, #8]
   141d0:	mov	r0, #0
   141d4:	mov	r1, lr
   141d8:	bl	13e4c <_obstack_memory_used@@Base+0x150c>
   141dc:	sub	sp, fp, #8
   141e0:	pop	{r4, sl, fp, pc}
   141e4:	push	{fp, lr}
   141e8:	mov	fp, sp
   141ec:	sub	sp, sp, #48	; 0x30
   141f0:	mov	ip, r0
   141f4:	movw	r0, #33168	; 0x8190
   141f8:	mov	r3, #32
   141fc:	movt	r0, #2
   14200:	add	r2, r0, #16
   14204:	vld1.64	{d16-d17}, [r0], r3
   14208:	mov	r3, sp
   1420c:	vld1.64	{d18-d19}, [r2]
   14210:	add	r2, r3, #16
   14214:	vld1.64	{d20-d21}, [r0]
   14218:	add	r0, r3, #32
   1421c:	vst1.64	{d18-d19}, [r2]
   14220:	mov	r2, r3
   14224:	vst1.64	{d20-d21}, [r0]
   14228:	mov	r0, #28
   1422c:	and	r0, r0, r1, lsr #3
   14230:	and	r1, r1, #31
   14234:	vst1.64	{d16-d17}, [r2], r0
   14238:	mov	r0, #1
   1423c:	ldr	lr, [r2, #8]
   14240:	bic	r0, r0, lr, lsr r1
   14244:	eor	r0, lr, r0, lsl r1
   14248:	mov	r1, ip
   1424c:	str	r0, [r2, #8]
   14250:	mov	r0, #0
   14254:	mvn	r2, #0
   14258:	bl	13e4c <_obstack_memory_used@@Base+0x150c>
   1425c:	mov	sp, fp
   14260:	pop	{fp, pc}
   14264:	push	{fp, lr}
   14268:	mov	fp, sp
   1426c:	sub	sp, sp, #48	; 0x30
   14270:	movw	r2, #33168	; 0x8190
   14274:	mov	r3, #32
   14278:	mov	r1, r0
   1427c:	movt	r2, #2
   14280:	add	r0, r2, #16
   14284:	vld1.64	{d16-d17}, [r2], r3
   14288:	mov	r3, sp
   1428c:	vld1.64	{d18-d19}, [r0]
   14290:	add	r0, r3, #16
   14294:	vld1.64	{d20-d21}, [r2]
   14298:	mov	r2, r3
   1429c:	vst1.64	{d18-d19}, [r0]
   142a0:	add	r0, r3, #32
   142a4:	vst1.64	{d20-d21}, [r0]
   142a8:	mov	r0, #12
   142ac:	vst1.64	{d16-d17}, [r2], r0
   142b0:	ldr	r0, [r2]
   142b4:	orr	r0, r0, #67108864	; 0x4000000
   142b8:	str	r0, [r2]
   142bc:	mov	r0, #0
   142c0:	mvn	r2, #0
   142c4:	bl	13e4c <_obstack_memory_used@@Base+0x150c>
   142c8:	mov	sp, fp
   142cc:	pop	{fp, pc}
   142d0:	push	{fp, lr}
   142d4:	mov	fp, sp
   142d8:	sub	sp, sp, #48	; 0x30
   142dc:	mov	ip, r1
   142e0:	mov	r1, r0
   142e4:	movw	r0, #33168	; 0x8190
   142e8:	mov	r3, #32
   142ec:	movt	r0, #2
   142f0:	add	r2, r0, #16
   142f4:	vld1.64	{d16-d17}, [r0], r3
   142f8:	mov	r3, sp
   142fc:	vld1.64	{d18-d19}, [r2]
   14300:	add	r2, r3, #16
   14304:	vld1.64	{d20-d21}, [r0]
   14308:	add	r0, r3, #32
   1430c:	vst1.64	{d18-d19}, [r2]
   14310:	mov	r2, r3
   14314:	vst1.64	{d20-d21}, [r0]
   14318:	mov	r0, #12
   1431c:	vst1.64	{d16-d17}, [r2], r0
   14320:	ldr	r0, [r2]
   14324:	orr	r0, r0, #67108864	; 0x4000000
   14328:	str	r0, [r2]
   1432c:	mov	r0, #0
   14330:	mov	r2, ip
   14334:	bl	13e4c <_obstack_memory_used@@Base+0x150c>
   14338:	mov	sp, fp
   1433c:	pop	{fp, pc}
   14340:	push	{r4, sl, fp, lr}
   14344:	add	fp, sp, #8
   14348:	sub	sp, sp, #96	; 0x60
   1434c:	mov	ip, r2
   14350:	mov	r2, sp
   14354:	vmov.i32	q8, #0	; 0x00000000
   14358:	mov	r4, #28
   1435c:	cmp	r1, #10
   14360:	mov	r3, r2
   14364:	add	lr, r2, #16
   14368:	vst1.64	{d16-d17}, [r3], r4
   1436c:	vst1.64	{d16-d17}, [lr]
   14370:	vst1.32	{d16-d17}, [r3]
   14374:	beq	143c4 <_obstack_memory_used@@Base+0x1a84>
   14378:	vld1.64	{d16-d17}, [r2], r4
   1437c:	vld1.64	{d18-d19}, [lr]
   14380:	add	r3, sp, #48	; 0x30
   14384:	add	r4, r3, #4
   14388:	vld1.32	{d20-d21}, [r2]
   1438c:	add	r2, r3, #20
   14390:	vst1.32	{d16-d17}, [r4]
   14394:	vst1.32	{d18-d19}, [r2]
   14398:	add	r2, r3, #32
   1439c:	vst1.32	{d20-d21}, [r2]
   143a0:	str	r1, [sp, #48]	; 0x30
   143a4:	mvn	r2, #0
   143a8:	ldr	r1, [sp, #60]	; 0x3c
   143ac:	orr	r1, r1, #67108864	; 0x4000000
   143b0:	str	r1, [sp, #60]	; 0x3c
   143b4:	mov	r1, ip
   143b8:	bl	13e4c <_obstack_memory_used@@Base+0x150c>
   143bc:	sub	sp, fp, #8
   143c0:	pop	{r4, sl, fp, pc}
   143c4:	bl	110f0 <abort@plt>
   143c8:	push	{r4, r5, fp, lr}
   143cc:	add	fp, sp, #8
   143d0:	sub	sp, sp, #48	; 0x30
   143d4:	mov	ip, r3
   143d8:	movw	r3, #33168	; 0x8190
   143dc:	mov	lr, #32
   143e0:	cmp	r1, #0
   143e4:	mov	r5, sp
   143e8:	movt	r3, #2
   143ec:	cmpne	r2, #0
   143f0:	add	r4, r3, #16
   143f4:	vld1.64	{d16-d17}, [r3], lr
   143f8:	vld1.64	{d18-d19}, [r4]
   143fc:	add	r4, r5, #16
   14400:	vld1.64	{d20-d21}, [r3]
   14404:	vst1.64	{d16-d17}, [r5], lr
   14408:	mov	r3, #10
   1440c:	vst1.64	{d18-d19}, [r4]
   14410:	vst1.64	{d20-d21}, [r5]
   14414:	str	r3, [sp]
   14418:	bne	14420 <_obstack_memory_used@@Base+0x1ae0>
   1441c:	bl	110f0 <abort@plt>
   14420:	str	r2, [sp, #44]	; 0x2c
   14424:	str	r1, [sp, #40]	; 0x28
   14428:	mov	r3, sp
   1442c:	mov	r1, ip
   14430:	mvn	r2, #0
   14434:	bl	13e4c <_obstack_memory_used@@Base+0x150c>
   14438:	sub	sp, fp, #8
   1443c:	pop	{r4, r5, fp, pc}
   14440:	push	{r4, r5, fp, lr}
   14444:	add	fp, sp, #8
   14448:	sub	sp, sp, #48	; 0x30
   1444c:	mov	lr, r3
   14450:	movw	r3, #33168	; 0x8190
   14454:	mov	ip, #32
   14458:	cmp	r1, #0
   1445c:	mov	r5, sp
   14460:	movt	r3, #2
   14464:	cmpne	r2, #0
   14468:	add	r4, r3, #16
   1446c:	vld1.64	{d16-d17}, [r3], ip
   14470:	vld1.64	{d18-d19}, [r4]
   14474:	add	r4, r5, #16
   14478:	vld1.64	{d20-d21}, [r3]
   1447c:	vst1.64	{d16-d17}, [r5], ip
   14480:	mov	r3, #10
   14484:	vst1.64	{d18-d19}, [r4]
   14488:	vst1.64	{d20-d21}, [r5]
   1448c:	str	r3, [sp]
   14490:	bne	14498 <_obstack_memory_used@@Base+0x1b58>
   14494:	bl	110f0 <abort@plt>
   14498:	ldr	ip, [fp, #8]
   1449c:	str	r2, [sp, #44]	; 0x2c
   144a0:	str	r1, [sp, #40]	; 0x28
   144a4:	mov	r3, sp
   144a8:	mov	r1, lr
   144ac:	mov	r2, ip
   144b0:	bl	13e4c <_obstack_memory_used@@Base+0x150c>
   144b4:	sub	sp, fp, #8
   144b8:	pop	{r4, r5, fp, pc}
   144bc:	push	{r4, sl, fp, lr}
   144c0:	add	fp, sp, #8
   144c4:	sub	sp, sp, #48	; 0x30
   144c8:	mov	ip, r2
   144cc:	movw	r2, #33168	; 0x8190
   144d0:	mov	lr, #32
   144d4:	cmp	r0, #0
   144d8:	mov	r4, sp
   144dc:	movt	r2, #2
   144e0:	cmpne	r1, #0
   144e4:	add	r3, r2, #16
   144e8:	vld1.64	{d16-d17}, [r2], lr
   144ec:	vld1.64	{d18-d19}, [r3]
   144f0:	add	r3, r4, #16
   144f4:	vld1.64	{d20-d21}, [r2]
   144f8:	vst1.64	{d16-d17}, [r4], lr
   144fc:	mov	r2, #10
   14500:	vst1.64	{d18-d19}, [r3]
   14504:	vst1.64	{d20-d21}, [r4]
   14508:	str	r2, [sp]
   1450c:	bne	14514 <_obstack_memory_used@@Base+0x1bd4>
   14510:	bl	110f0 <abort@plt>
   14514:	str	r1, [sp, #44]	; 0x2c
   14518:	str	r0, [sp, #40]	; 0x28
   1451c:	mov	r3, sp
   14520:	mov	r0, #0
   14524:	mov	r1, ip
   14528:	mvn	r2, #0
   1452c:	bl	13e4c <_obstack_memory_used@@Base+0x150c>
   14530:	sub	sp, fp, #8
   14534:	pop	{r4, sl, fp, pc}
   14538:	push	{r4, r5, fp, lr}
   1453c:	add	fp, sp, #8
   14540:	sub	sp, sp, #48	; 0x30
   14544:	mov	lr, r2
   14548:	movw	r2, #33168	; 0x8190
   1454c:	mov	ip, r3
   14550:	mov	r3, #32
   14554:	cmp	r0, #0
   14558:	mov	r5, sp
   1455c:	movt	r2, #2
   14560:	cmpne	r1, #0
   14564:	add	r4, r2, #16
   14568:	vld1.64	{d16-d17}, [r2], r3
   1456c:	vld1.64	{d18-d19}, [r4]
   14570:	add	r4, r5, #16
   14574:	vld1.64	{d20-d21}, [r2]
   14578:	vst1.64	{d16-d17}, [r5], r3
   1457c:	mov	r2, #10
   14580:	vst1.64	{d18-d19}, [r4]
   14584:	vst1.64	{d20-d21}, [r5]
   14588:	str	r2, [sp]
   1458c:	bne	14594 <_obstack_memory_used@@Base+0x1c54>
   14590:	bl	110f0 <abort@plt>
   14594:	str	r1, [sp, #44]	; 0x2c
   14598:	str	r0, [sp, #40]	; 0x28
   1459c:	mov	r3, sp
   145a0:	mov	r0, #0
   145a4:	mov	r1, lr
   145a8:	mov	r2, ip
   145ac:	bl	13e4c <_obstack_memory_used@@Base+0x150c>
   145b0:	sub	sp, fp, #8
   145b4:	pop	{r4, r5, fp, pc}
   145b8:	movw	r3, #33024	; 0x8100
   145bc:	movt	r3, #2
   145c0:	b	13e4c <_obstack_memory_used@@Base+0x150c>
   145c4:	movw	r3, #33024	; 0x8100
   145c8:	mov	r2, r1
   145cc:	mov	r1, r0
   145d0:	mov	r0, #0
   145d4:	movt	r3, #2
   145d8:	b	13e4c <_obstack_memory_used@@Base+0x150c>
   145dc:	movw	r3, #33024	; 0x8100
   145e0:	mvn	r2, #0
   145e4:	movt	r3, #2
   145e8:	b	13e4c <_obstack_memory_used@@Base+0x150c>
   145ec:	movw	r3, #33024	; 0x8100
   145f0:	mov	r1, r0
   145f4:	mov	r0, #0
   145f8:	mvn	r2, #0
   145fc:	movt	r3, #2
   14600:	b	13e4c <_obstack_memory_used@@Base+0x150c>
   14604:	push	{r4, r5, fp, lr}
   14608:	add	fp, sp, #8
   1460c:	mov	r5, r0
   14610:	mov	r4, r1
   14614:	mov	r0, #0
   14618:	mov	r2, #5
   1461c:	mov	r1, r5
   14620:	bl	10f34 <dcgettext@plt>
   14624:	cmp	r0, r5
   14628:	popne	{r4, r5, fp, pc}
   1462c:	bl	154dc <_obstack_memory_used@@Base+0x2b9c>
   14630:	ldrb	r1, [r0]
   14634:	and	r1, r1, #223	; 0xdf
   14638:	cmp	r1, #71	; 0x47
   1463c:	beq	146a4 <_obstack_memory_used@@Base+0x1d64>
   14640:	cmp	r1, #85	; 0x55
   14644:	bne	146c8 <_obstack_memory_used@@Base+0x1d88>
   14648:	ldrb	r1, [r0, #1]
   1464c:	and	r1, r1, #223	; 0xdf
   14650:	cmp	r1, #84	; 0x54
   14654:	bne	146c8 <_obstack_memory_used@@Base+0x1d88>
   14658:	ldrb	r1, [r0, #2]
   1465c:	and	r1, r1, #223	; 0xdf
   14660:	cmp	r1, #70	; 0x46
   14664:	ldrbeq	r1, [r0, #3]
   14668:	cmpeq	r1, #45	; 0x2d
   1466c:	bne	146c8 <_obstack_memory_used@@Base+0x1d88>
   14670:	ldrb	r1, [r0, #4]
   14674:	cmp	r1, #56	; 0x38
   14678:	ldrbeq	r0, [r0, #5]
   1467c:	cmpeq	r0, #0
   14680:	bne	146c8 <_obstack_memory_used@@Base+0x1d88>
   14684:	ldrb	r1, [r5]
   14688:	movw	r2, #29163	; 0x71eb
   1468c:	movw	r0, #29167	; 0x71ef
   14690:	movt	r2, #1
   14694:	movt	r0, #1
   14698:	cmp	r1, #96	; 0x60
   1469c:	moveq	r0, r2
   146a0:	pop	{r4, r5, fp, pc}
   146a4:	ldrb	r1, [r0, #1]
   146a8:	and	r1, r1, #223	; 0xdf
   146ac:	cmp	r1, #66	; 0x42
   146b0:	bne	146c8 <_obstack_memory_used@@Base+0x1d88>
   146b4:	ldrb	r1, [r0, #2]
   146b8:	cmp	r1, #49	; 0x31
   146bc:	ldrbeq	r1, [r0, #3]
   146c0:	cmpeq	r1, #56	; 0x38
   146c4:	beq	146e4 <_obstack_memory_used@@Base+0x1da4>
   146c8:	movw	r1, #29159	; 0x71e7
   146cc:	movw	r0, #23363	; 0x5b43
   146d0:	cmp	r4, #9
   146d4:	movt	r1, #1
   146d8:	movt	r0, #1
   146dc:	moveq	r0, r1
   146e0:	pop	{r4, r5, fp, pc}
   146e4:	ldrb	r1, [r0, #4]
   146e8:	cmp	r1, #48	; 0x30
   146ec:	ldrbeq	r1, [r0, #5]
   146f0:	cmpeq	r1, #51	; 0x33
   146f4:	bne	146c8 <_obstack_memory_used@@Base+0x1d88>
   146f8:	ldrb	r1, [r0, #6]
   146fc:	cmp	r1, #48	; 0x30
   14700:	ldrbeq	r0, [r0, #7]
   14704:	cmpeq	r0, #0
   14708:	bne	146c8 <_obstack_memory_used@@Base+0x1d88>
   1470c:	ldrb	r1, [r5]
   14710:	movw	r2, #29171	; 0x71f3
   14714:	movw	r0, #29175	; 0x71f7
   14718:	movt	r2, #1
   1471c:	movt	r0, #1
   14720:	b	14698 <_obstack_memory_used@@Base+0x1d58>
   14724:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14728:	add	fp, sp, #24
   1472c:	sub	sp, sp, #32
   14730:	ldr	r6, [fp, #12]
   14734:	ldr	r7, [fp, #8]
   14738:	mov	r4, r2
   1473c:	mov	r8, r0
   14740:	cmp	r1, #0
   14744:	beq	1476c <_obstack_memory_used@@Base+0x1e2c>
   14748:	movw	r2, #29264	; 0x7250
   1474c:	mov	r5, r1
   14750:	str	r3, [sp, #4]
   14754:	str	r4, [sp]
   14758:	mov	r0, r8
   1475c:	mov	r1, #1
   14760:	movt	r2, #1
   14764:	mov	r3, r5
   14768:	b	14784 <_obstack_memory_used@@Base+0x1e44>
   1476c:	movw	r2, #29276	; 0x725c
   14770:	str	r3, [sp]
   14774:	mov	r0, r8
   14778:	mov	r1, #1
   1477c:	mov	r3, r4
   14780:	movt	r2, #1
   14784:	bl	11090 <__fprintf_chk@plt>
   14788:	movw	r1, #29283	; 0x7263
   1478c:	mov	r0, #0
   14790:	mov	r2, #5
   14794:	movt	r1, #1
   14798:	bl	10f34 <dcgettext@plt>
   1479c:	movw	r2, #30001	; 0x7531
   147a0:	mov	r3, r0
   147a4:	movw	r0, #2022	; 0x7e6
   147a8:	mov	r1, #1
   147ac:	str	r0, [sp]
   147b0:	movt	r2, #1
   147b4:	mov	r0, r8
   147b8:	bl	11090 <__fprintf_chk@plt>
   147bc:	movw	r4, #23674	; 0x5c7a
   147c0:	mov	r1, r8
   147c4:	movt	r4, #1
   147c8:	mov	r0, r4
   147cc:	bl	10ebc <fputs_unlocked@plt>
   147d0:	movw	r1, #29287	; 0x7267
   147d4:	mov	r0, #0
   147d8:	mov	r2, #5
   147dc:	movt	r1, #1
   147e0:	bl	10f34 <dcgettext@plt>
   147e4:	movw	r3, #29458	; 0x7312
   147e8:	mov	r2, r0
   147ec:	mov	r0, r8
   147f0:	mov	r1, #1
   147f4:	movt	r3, #1
   147f8:	bl	11090 <__fprintf_chk@plt>
   147fc:	mov	r0, r4
   14800:	mov	r1, r8
   14804:	bl	10ebc <fputs_unlocked@plt>
   14808:	cmp	r6, #9
   1480c:	bhi	14848 <_obstack_memory_used@@Base+0x1f08>
   14810:	add	r0, pc, #0
   14814:	ldr	pc, [r0, r6, lsl #2]
   14818:	andeq	r4, r1, r0, asr #16
   1481c:	andeq	r4, r1, r4, asr r8
   14820:	andeq	r4, r1, r4, lsl #17
   14824:	andeq	r4, r1, ip, lsr #17
   14828:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1482c:	strdeq	r4, [r1], -ip
   14830:	andeq	r4, r1, r4, lsr #18
   14834:	andeq	r4, r1, ip, asr r9
   14838:	strdeq	r4, [r1], -ip
   1483c:	andeq	r4, r1, r4, lsr #19
   14840:	sub	sp, fp, #24
   14844:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14848:	movw	r1, #29811	; 0x7473
   1484c:	movt	r1, #1
   14850:	b	149ac <_obstack_memory_used@@Base+0x206c>
   14854:	movw	r1, #29492	; 0x7334
   14858:	mov	r0, #0
   1485c:	mov	r2, #5
   14860:	movt	r1, #1
   14864:	bl	10f34 <dcgettext@plt>
   14868:	ldr	r3, [r7]
   1486c:	mov	r2, r0
   14870:	mov	r0, r8
   14874:	mov	r1, #1
   14878:	sub	sp, fp, #24
   1487c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14880:	b	11090 <__fprintf_chk@plt>
   14884:	movw	r1, #29508	; 0x7344
   14888:	mov	r0, #0
   1488c:	mov	r2, #5
   14890:	movt	r1, #1
   14894:	bl	10f34 <dcgettext@plt>
   14898:	mov	r2, r0
   1489c:	ldr	r3, [r7]
   148a0:	ldr	r0, [r7, #4]
   148a4:	str	r0, [sp]
   148a8:	b	14998 <_obstack_memory_used@@Base+0x2058>
   148ac:	movw	r1, #29531	; 0x735b
   148b0:	mov	r0, #0
   148b4:	mov	r2, #5
   148b8:	movt	r1, #1
   148bc:	bl	10f34 <dcgettext@plt>
   148c0:	ldr	r3, [r7]
   148c4:	mov	r2, r0
   148c8:	ldmib	r7, {r0, r1}
   148cc:	stm	sp, {r0, r1}
   148d0:	b	14998 <_obstack_memory_used@@Base+0x2058>
   148d4:	movw	r1, #29559	; 0x7377
   148d8:	mov	r0, #0
   148dc:	mov	r2, #5
   148e0:	movt	r1, #1
   148e4:	bl	10f34 <dcgettext@plt>
   148e8:	ldr	r3, [r7]
   148ec:	mov	r2, r0
   148f0:	ldmib	r7, {r0, r1, r7}
   148f4:	stm	sp, {r0, r1, r7}
   148f8:	b	14998 <_obstack_memory_used@@Base+0x2058>
   148fc:	movw	r1, #29591	; 0x7397
   14900:	mov	r0, #0
   14904:	mov	r2, #5
   14908:	movt	r1, #1
   1490c:	bl	10f34 <dcgettext@plt>
   14910:	ldr	r3, [r7]
   14914:	mov	r2, r0
   14918:	ldmib	r7, {r0, r1, r6, r7}
   1491c:	stm	sp, {r0, r1, r6, r7}
   14920:	b	14998 <_obstack_memory_used@@Base+0x2058>
   14924:	movw	r1, #29627	; 0x73bb
   14928:	mov	r0, #0
   1492c:	mov	r2, #5
   14930:	movt	r1, #1
   14934:	bl	10f34 <dcgettext@plt>
   14938:	ldr	r3, [r7]
   1493c:	mov	r2, r0
   14940:	ldmib	r7, {r0, r1, r6}
   14944:	ldr	r5, [r7, #16]
   14948:	ldr	r7, [r7, #20]
   1494c:	stm	sp, {r0, r1, r6}
   14950:	str	r5, [sp, #12]
   14954:	str	r7, [sp, #16]
   14958:	b	14998 <_obstack_memory_used@@Base+0x2058>
   1495c:	movw	r1, #29667	; 0x73e3
   14960:	mov	r0, #0
   14964:	mov	r2, #5
   14968:	movt	r1, #1
   1496c:	bl	10f34 <dcgettext@plt>
   14970:	ldr	r3, [r7]
   14974:	mov	r2, r0
   14978:	ldmib	r7, {r0, r1, r6}
   1497c:	ldr	r5, [r7, #16]
   14980:	ldr	r4, [r7, #20]
   14984:	ldr	r7, [r7, #24]
   14988:	stm	sp, {r0, r1, r6}
   1498c:	str	r5, [sp, #12]
   14990:	str	r4, [sp, #16]
   14994:	str	r7, [sp, #20]
   14998:	mov	r0, r8
   1499c:	mov	r1, #1
   149a0:	b	14a4c <_obstack_memory_used@@Base+0x210c>
   149a4:	movw	r1, #29759	; 0x743f
   149a8:	movt	r1, #1
   149ac:	mov	r0, #0
   149b0:	mov	r2, #5
   149b4:	bl	10f34 <dcgettext@plt>
   149b8:	mov	ip, r0
   149bc:	ldr	r3, [r7]
   149c0:	ldr	r0, [r7, #4]
   149c4:	ldr	r1, [r7, #8]
   149c8:	ldr	r6, [r7, #12]
   149cc:	ldr	r5, [r7, #16]
   149d0:	ldr	r4, [r7, #20]
   149d4:	ldr	r2, [r7, #24]
   149d8:	ldr	lr, [r7, #28]
   149dc:	ldr	r7, [r7, #32]
   149e0:	stm	sp, {r0, r1, r6}
   149e4:	str	r5, [sp, #12]
   149e8:	str	r4, [sp, #16]
   149ec:	str	r2, [sp, #20]
   149f0:	str	lr, [sp, #24]
   149f4:	str	r7, [sp, #28]
   149f8:	b	14a40 <_obstack_memory_used@@Base+0x2100>
   149fc:	movw	r1, #29711	; 0x740f
   14a00:	mov	r0, #0
   14a04:	mov	r2, #5
   14a08:	movt	r1, #1
   14a0c:	bl	10f34 <dcgettext@plt>
   14a10:	mov	ip, r0
   14a14:	ldr	r3, [r7]
   14a18:	ldmib	r7, {r0, r1, r6}
   14a1c:	ldr	r5, [r7, #16]
   14a20:	ldr	r4, [r7, #20]
   14a24:	ldr	r2, [r7, #24]
   14a28:	ldr	r7, [r7, #28]
   14a2c:	stm	sp, {r0, r1, r6}
   14a30:	str	r5, [sp, #12]
   14a34:	str	r4, [sp, #16]
   14a38:	str	r2, [sp, #20]
   14a3c:	str	r7, [sp, #24]
   14a40:	mov	r0, r8
   14a44:	mov	r1, #1
   14a48:	mov	r2, ip
   14a4c:	bl	11090 <__fprintf_chk@plt>
   14a50:	sub	sp, fp, #24
   14a54:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a58:	push	{r4, sl, fp, lr}
   14a5c:	add	fp, sp, #8
   14a60:	sub	sp, sp, #8
   14a64:	ldr	ip, [fp, #8]
   14a68:	mov	lr, #0
   14a6c:	ldr	r4, [ip, lr, lsl #2]
   14a70:	add	lr, lr, #1
   14a74:	cmp	r4, #0
   14a78:	bne	14a6c <_obstack_memory_used@@Base+0x212c>
   14a7c:	sub	r4, lr, #1
   14a80:	str	ip, [sp]
   14a84:	str	r4, [sp, #4]
   14a88:	bl	14724 <_obstack_memory_used@@Base+0x1de4>
   14a8c:	sub	sp, fp, #8
   14a90:	pop	{r4, sl, fp, pc}
   14a94:	push	{fp, lr}
   14a98:	mov	fp, sp
   14a9c:	sub	sp, sp, #48	; 0x30
   14aa0:	ldr	ip, [fp, #8]
   14aa4:	ldr	lr, [ip]
   14aa8:	cmp	lr, #0
   14aac:	str	lr, [sp, #8]
   14ab0:	beq	14b4c <_obstack_memory_used@@Base+0x220c>
   14ab4:	ldr	lr, [ip, #4]
   14ab8:	cmp	lr, #0
   14abc:	str	lr, [sp, #12]
   14ac0:	beq	14b54 <_obstack_memory_used@@Base+0x2214>
   14ac4:	ldr	lr, [ip, #8]
   14ac8:	cmp	lr, #0
   14acc:	str	lr, [sp, #16]
   14ad0:	beq	14b5c <_obstack_memory_used@@Base+0x221c>
   14ad4:	ldr	lr, [ip, #12]
   14ad8:	cmp	lr, #0
   14adc:	str	lr, [sp, #20]
   14ae0:	beq	14b64 <_obstack_memory_used@@Base+0x2224>
   14ae4:	ldr	lr, [ip, #16]
   14ae8:	cmp	lr, #0
   14aec:	str	lr, [sp, #24]
   14af0:	beq	14b6c <_obstack_memory_used@@Base+0x222c>
   14af4:	ldr	lr, [ip, #20]
   14af8:	cmp	lr, #0
   14afc:	str	lr, [sp, #28]
   14b00:	beq	14b74 <_obstack_memory_used@@Base+0x2234>
   14b04:	ldr	lr, [ip, #24]
   14b08:	cmp	lr, #0
   14b0c:	str	lr, [sp, #32]
   14b10:	beq	14b7c <_obstack_memory_used@@Base+0x223c>
   14b14:	ldr	lr, [ip, #28]
   14b18:	cmp	lr, #0
   14b1c:	str	lr, [sp, #36]	; 0x24
   14b20:	beq	14b84 <_obstack_memory_used@@Base+0x2244>
   14b24:	ldr	lr, [ip, #32]
   14b28:	cmp	lr, #0
   14b2c:	str	lr, [sp, #40]	; 0x28
   14b30:	beq	14b8c <_obstack_memory_used@@Base+0x224c>
   14b34:	ldr	lr, [ip, #36]	; 0x24
   14b38:	mov	ip, #10
   14b3c:	cmp	lr, #0
   14b40:	str	lr, [sp, #44]	; 0x2c
   14b44:	movweq	ip, #9
   14b48:	b	14b90 <_obstack_memory_used@@Base+0x2250>
   14b4c:	mov	ip, #0
   14b50:	b	14b90 <_obstack_memory_used@@Base+0x2250>
   14b54:	mov	ip, #1
   14b58:	b	14b90 <_obstack_memory_used@@Base+0x2250>
   14b5c:	mov	ip, #2
   14b60:	b	14b90 <_obstack_memory_used@@Base+0x2250>
   14b64:	mov	ip, #3
   14b68:	b	14b90 <_obstack_memory_used@@Base+0x2250>
   14b6c:	mov	ip, #4
   14b70:	b	14b90 <_obstack_memory_used@@Base+0x2250>
   14b74:	mov	ip, #5
   14b78:	b	14b90 <_obstack_memory_used@@Base+0x2250>
   14b7c:	mov	ip, #6
   14b80:	b	14b90 <_obstack_memory_used@@Base+0x2250>
   14b84:	mov	ip, #7
   14b88:	b	14b90 <_obstack_memory_used@@Base+0x2250>
   14b8c:	mov	ip, #8
   14b90:	add	lr, sp, #8
   14b94:	str	ip, [sp, #4]
   14b98:	str	lr, [sp]
   14b9c:	bl	14724 <_obstack_memory_used@@Base+0x1de4>
   14ba0:	mov	sp, fp
   14ba4:	pop	{fp, pc}
   14ba8:	push	{fp, lr}
   14bac:	mov	fp, sp
   14bb0:	sub	sp, sp, #56	; 0x38
   14bb4:	add	ip, fp, #8
   14bb8:	str	ip, [sp, #12]
   14bbc:	ldr	lr, [fp, #8]
   14bc0:	cmp	lr, #0
   14bc4:	str	lr, [sp, #16]
   14bc8:	beq	14c64 <_obstack_memory_used@@Base+0x2324>
   14bcc:	ldr	lr, [ip, #4]
   14bd0:	cmp	lr, #0
   14bd4:	str	lr, [sp, #20]
   14bd8:	beq	14c6c <_obstack_memory_used@@Base+0x232c>
   14bdc:	ldr	lr, [ip, #8]
   14be0:	cmp	lr, #0
   14be4:	str	lr, [sp, #24]
   14be8:	beq	14c74 <_obstack_memory_used@@Base+0x2334>
   14bec:	ldr	lr, [ip, #12]
   14bf0:	cmp	lr, #0
   14bf4:	str	lr, [sp, #28]
   14bf8:	beq	14c7c <_obstack_memory_used@@Base+0x233c>
   14bfc:	ldr	lr, [ip, #16]
   14c00:	cmp	lr, #0
   14c04:	str	lr, [sp, #32]
   14c08:	beq	14c84 <_obstack_memory_used@@Base+0x2344>
   14c0c:	ldr	lr, [ip, #20]
   14c10:	cmp	lr, #0
   14c14:	str	lr, [sp, #36]	; 0x24
   14c18:	beq	14c8c <_obstack_memory_used@@Base+0x234c>
   14c1c:	ldr	lr, [ip, #24]
   14c20:	cmp	lr, #0
   14c24:	str	lr, [sp, #40]	; 0x28
   14c28:	beq	14c94 <_obstack_memory_used@@Base+0x2354>
   14c2c:	ldr	lr, [ip, #28]
   14c30:	cmp	lr, #0
   14c34:	str	lr, [sp, #44]	; 0x2c
   14c38:	beq	14c9c <_obstack_memory_used@@Base+0x235c>
   14c3c:	ldr	lr, [ip, #32]
   14c40:	cmp	lr, #0
   14c44:	str	lr, [sp, #48]	; 0x30
   14c48:	beq	14ca4 <_obstack_memory_used@@Base+0x2364>
   14c4c:	ldr	lr, [ip, #36]	; 0x24
   14c50:	mov	ip, #10
   14c54:	cmp	lr, #0
   14c58:	str	lr, [sp, #52]	; 0x34
   14c5c:	movweq	ip, #9
   14c60:	b	14ca8 <_obstack_memory_used@@Base+0x2368>
   14c64:	mov	ip, #0
   14c68:	b	14ca8 <_obstack_memory_used@@Base+0x2368>
   14c6c:	mov	ip, #1
   14c70:	b	14ca8 <_obstack_memory_used@@Base+0x2368>
   14c74:	mov	ip, #2
   14c78:	b	14ca8 <_obstack_memory_used@@Base+0x2368>
   14c7c:	mov	ip, #3
   14c80:	b	14ca8 <_obstack_memory_used@@Base+0x2368>
   14c84:	mov	ip, #4
   14c88:	b	14ca8 <_obstack_memory_used@@Base+0x2368>
   14c8c:	mov	ip, #5
   14c90:	b	14ca8 <_obstack_memory_used@@Base+0x2368>
   14c94:	mov	ip, #6
   14c98:	b	14ca8 <_obstack_memory_used@@Base+0x2368>
   14c9c:	mov	ip, #7
   14ca0:	b	14ca8 <_obstack_memory_used@@Base+0x2368>
   14ca4:	mov	ip, #8
   14ca8:	add	lr, sp, #16
   14cac:	str	ip, [sp, #4]
   14cb0:	str	lr, [sp]
   14cb4:	bl	14724 <_obstack_memory_used@@Base+0x1de4>
   14cb8:	mov	sp, fp
   14cbc:	pop	{fp, pc}
   14cc0:	push	{fp, lr}
   14cc4:	mov	fp, sp
   14cc8:	movw	r0, #33100	; 0x814c
   14ccc:	movt	r0, #2
   14cd0:	ldr	r1, [r0]
   14cd4:	movw	r0, #23674	; 0x5c7a
   14cd8:	movt	r0, #1
   14cdc:	bl	10ebc <fputs_unlocked@plt>
   14ce0:	movw	r1, #29871	; 0x74af
   14ce4:	mov	r0, #0
   14ce8:	mov	r2, #5
   14cec:	movt	r1, #1
   14cf0:	bl	10f34 <dcgettext@plt>
   14cf4:	movw	r2, #29891	; 0x74c3
   14cf8:	mov	r1, r0
   14cfc:	mov	r0, #1
   14d00:	movt	r2, #1
   14d04:	bl	11078 <__printf_chk@plt>
   14d08:	movw	r1, #29913	; 0x74d9
   14d0c:	mov	r0, #0
   14d10:	mov	r2, #5
   14d14:	movt	r1, #1
   14d18:	bl	10f34 <dcgettext@plt>
   14d1c:	movw	r2, #23042	; 0x5a02
   14d20:	movw	r3, #23483	; 0x5bbb
   14d24:	mov	r1, r0
   14d28:	mov	r0, #1
   14d2c:	movt	r2, #1
   14d30:	movt	r3, #1
   14d34:	bl	11078 <__printf_chk@plt>
   14d38:	movw	r1, #29933	; 0x74ed
   14d3c:	mov	r0, #0
   14d40:	mov	r2, #5
   14d44:	movt	r1, #1
   14d48:	bl	10f34 <dcgettext@plt>
   14d4c:	movw	r2, #29972	; 0x7514
   14d50:	mov	r1, r0
   14d54:	mov	r0, #1
   14d58:	movt	r2, #1
   14d5c:	pop	{fp, lr}
   14d60:	b	11078 <__printf_chk@plt>
   14d64:	push	{r4, r5, r6, sl, fp, lr}
   14d68:	add	fp, sp, #16
   14d6c:	mov	r4, r2
   14d70:	mov	r5, r1
   14d74:	mov	r6, r0
   14d78:	bl	15574 <_obstack_memory_used@@Base+0x2c34>
   14d7c:	cmp	r0, #0
   14d80:	popne	{r4, r5, r6, sl, fp, pc}
   14d84:	cmp	r6, #0
   14d88:	beq	14d9c <_obstack_memory_used@@Base+0x245c>
   14d8c:	cmp	r5, #0
   14d90:	cmpne	r4, #0
   14d94:	bne	14d9c <_obstack_memory_used@@Base+0x245c>
   14d98:	pop	{r4, r5, r6, sl, fp, pc}
   14d9c:	bl	1533c <_obstack_memory_used@@Base+0x29fc>
   14da0:	push	{r4, r5, r6, sl, fp, lr}
   14da4:	add	fp, sp, #16
   14da8:	mov	r4, r2
   14dac:	mov	r5, r1
   14db0:	mov	r6, r0
   14db4:	bl	15574 <_obstack_memory_used@@Base+0x2c34>
   14db8:	cmp	r0, #0
   14dbc:	popne	{r4, r5, r6, sl, fp, pc}
   14dc0:	cmp	r6, #0
   14dc4:	beq	14dd8 <_obstack_memory_used@@Base+0x2498>
   14dc8:	cmp	r5, #0
   14dcc:	cmpne	r4, #0
   14dd0:	bne	14dd8 <_obstack_memory_used@@Base+0x2498>
   14dd4:	pop	{r4, r5, r6, sl, fp, pc}
   14dd8:	bl	1533c <_obstack_memory_used@@Base+0x29fc>
   14ddc:	push	{fp, lr}
   14de0:	mov	fp, sp
   14de4:	bl	153d4 <_obstack_memory_used@@Base+0x2a94>
   14de8:	cmp	r0, #0
   14dec:	popne	{fp, pc}
   14df0:	bl	1533c <_obstack_memory_used@@Base+0x29fc>
   14df4:	push	{fp, lr}
   14df8:	mov	fp, sp
   14dfc:	bl	153d4 <_obstack_memory_used@@Base+0x2a94>
   14e00:	cmp	r0, #0
   14e04:	popne	{fp, pc}
   14e08:	bl	1533c <_obstack_memory_used@@Base+0x29fc>
   14e0c:	push	{fp, lr}
   14e10:	mov	fp, sp
   14e14:	bl	153d4 <_obstack_memory_used@@Base+0x2a94>
   14e18:	cmp	r0, #0
   14e1c:	popne	{fp, pc}
   14e20:	bl	1533c <_obstack_memory_used@@Base+0x29fc>
   14e24:	push	{r4, r5, fp, lr}
   14e28:	add	fp, sp, #8
   14e2c:	mov	r4, r1
   14e30:	mov	r5, r0
   14e34:	bl	15404 <_obstack_memory_used@@Base+0x2ac4>
   14e38:	cmp	r0, #0
   14e3c:	popne	{r4, r5, fp, pc}
   14e40:	cmp	r5, #0
   14e44:	beq	14e54 <_obstack_memory_used@@Base+0x2514>
   14e48:	cmp	r4, #0
   14e4c:	bne	14e54 <_obstack_memory_used@@Base+0x2514>
   14e50:	pop	{r4, r5, fp, pc}
   14e54:	bl	1533c <_obstack_memory_used@@Base+0x29fc>
   14e58:	push	{fp, lr}
   14e5c:	mov	fp, sp
   14e60:	cmp	r1, #0
   14e64:	orreq	r1, r1, #1
   14e68:	bl	15404 <_obstack_memory_used@@Base+0x2ac4>
   14e6c:	cmp	r0, #0
   14e70:	popne	{fp, pc}
   14e74:	bl	1533c <_obstack_memory_used@@Base+0x29fc>
   14e78:	push	{fp, lr}
   14e7c:	mov	fp, sp
   14e80:	clz	r3, r2
   14e84:	lsr	ip, r3, #5
   14e88:	clz	r3, r1
   14e8c:	lsr	r3, r3, #5
   14e90:	orrs	r3, r3, ip
   14e94:	movwne	r1, #1
   14e98:	movwne	r2, #1
   14e9c:	bl	15574 <_obstack_memory_used@@Base+0x2c34>
   14ea0:	cmp	r0, #0
   14ea4:	popne	{fp, pc}
   14ea8:	bl	1533c <_obstack_memory_used@@Base+0x29fc>
   14eac:	push	{fp, lr}
   14eb0:	mov	fp, sp
   14eb4:	mov	r2, r1
   14eb8:	mov	r1, r0
   14ebc:	mov	r0, #0
   14ec0:	bl	15574 <_obstack_memory_used@@Base+0x2c34>
   14ec4:	cmp	r0, #0
   14ec8:	popne	{fp, pc}
   14ecc:	bl	1533c <_obstack_memory_used@@Base+0x29fc>
   14ed0:	push	{fp, lr}
   14ed4:	mov	fp, sp
   14ed8:	mov	r2, r1
   14edc:	mov	r1, r0
   14ee0:	clz	r0, r2
   14ee4:	clz	r3, r1
   14ee8:	lsr	r0, r0, #5
   14eec:	lsr	r3, r3, #5
   14ef0:	orrs	r0, r3, r0
   14ef4:	movwne	r1, #1
   14ef8:	movwne	r2, #1
   14efc:	mov	r0, #0
   14f00:	bl	15574 <_obstack_memory_used@@Base+0x2c34>
   14f04:	cmp	r0, #0
   14f08:	popne	{fp, pc}
   14f0c:	bl	1533c <_obstack_memory_used@@Base+0x29fc>
   14f10:	push	{r4, r5, r6, sl, fp, lr}
   14f14:	add	fp, sp, #16
   14f18:	ldr	r5, [r1]
   14f1c:	mov	r4, r1
   14f20:	mov	r6, r0
   14f24:	cmp	r0, #0
   14f28:	beq	14f40 <_obstack_memory_used@@Base+0x2600>
   14f2c:	mov	r0, #1
   14f30:	add	r0, r0, r5, lsr #1
   14f34:	adds	r5, r5, r0
   14f38:	bcc	14f48 <_obstack_memory_used@@Base+0x2608>
   14f3c:	b	14f84 <_obstack_memory_used@@Base+0x2644>
   14f40:	cmp	r5, #0
   14f44:	movweq	r5, #64	; 0x40
   14f48:	mov	r0, r6
   14f4c:	mov	r1, r5
   14f50:	mov	r2, #1
   14f54:	bl	15574 <_obstack_memory_used@@Base+0x2c34>
   14f58:	cmp	r5, #0
   14f5c:	mov	r1, r5
   14f60:	movwne	r1, #1
   14f64:	cmp	r0, #0
   14f68:	bne	14f7c <_obstack_memory_used@@Base+0x263c>
   14f6c:	clz	r2, r6
   14f70:	lsr	r2, r2, #5
   14f74:	orrs	r1, r2, r1
   14f78:	bne	14f84 <_obstack_memory_used@@Base+0x2644>
   14f7c:	str	r5, [r4]
   14f80:	pop	{r4, r5, r6, sl, fp, pc}
   14f84:	bl	1533c <_obstack_memory_used@@Base+0x29fc>
   14f88:	push	{r4, r5, r6, r7, fp, lr}
   14f8c:	add	fp, sp, #16
   14f90:	ldr	r5, [r1]
   14f94:	mov	r6, r2
   14f98:	mov	r4, r1
   14f9c:	mov	r7, r0
   14fa0:	cmp	r0, #0
   14fa4:	beq	14fbc <_obstack_memory_used@@Base+0x267c>
   14fa8:	mov	r0, #1
   14fac:	add	r0, r0, r5, lsr #1
   14fb0:	adds	r5, r5, r0
   14fb4:	bcc	14fd4 <_obstack_memory_used@@Base+0x2694>
   14fb8:	b	15008 <_obstack_memory_used@@Base+0x26c8>
   14fbc:	cmp	r5, #0
   14fc0:	bne	14fd4 <_obstack_memory_used@@Base+0x2694>
   14fc4:	mov	r0, #64	; 0x40
   14fc8:	cmp	r6, #64	; 0x40
   14fcc:	udiv	r5, r0, r6
   14fd0:	addhi	r5, r5, #1
   14fd4:	mov	r0, r7
   14fd8:	mov	r1, r5
   14fdc:	mov	r2, r6
   14fe0:	bl	15574 <_obstack_memory_used@@Base+0x2c34>
   14fe4:	cmp	r0, #0
   14fe8:	bne	15000 <_obstack_memory_used@@Base+0x26c0>
   14fec:	cmp	r7, #0
   14ff0:	beq	15008 <_obstack_memory_used@@Base+0x26c8>
   14ff4:	cmp	r6, #0
   14ff8:	cmpne	r5, #0
   14ffc:	bne	15008 <_obstack_memory_used@@Base+0x26c8>
   15000:	str	r5, [r4]
   15004:	pop	{r4, r5, r6, r7, fp, pc}
   15008:	bl	1533c <_obstack_memory_used@@Base+0x29fc>
   1500c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15010:	add	fp, sp, #24
   15014:	mov	r8, r1
   15018:	ldr	r1, [r1]
   1501c:	mov	r5, r0
   15020:	add	r0, r1, r1, asr #1
   15024:	cmp	r0, r1
   15028:	mvnvs	r0, #-2147483648	; 0x80000000
   1502c:	cmp	r0, r3
   15030:	mov	r7, r0
   15034:	movgt	r7, r3
   15038:	cmn	r3, #1
   1503c:	movle	r7, r0
   15040:	ldr	r0, [fp, #8]
   15044:	cmn	r0, #1
   15048:	ble	15070 <_obstack_memory_used@@Base+0x2730>
   1504c:	cmp	r0, #0
   15050:	beq	150c4 <_obstack_memory_used@@Base+0x2784>
   15054:	cmn	r7, #1
   15058:	ble	15098 <_obstack_memory_used@@Base+0x2758>
   1505c:	mvn	r4, #-2147483648	; 0x80000000
   15060:	udiv	r6, r4, r0
   15064:	cmp	r6, r7
   15068:	bge	150c4 <_obstack_memory_used@@Base+0x2784>
   1506c:	b	150d4 <_obstack_memory_used@@Base+0x2794>
   15070:	cmn	r7, #1
   15074:	ble	150b4 <_obstack_memory_used@@Base+0x2774>
   15078:	cmn	r0, #1
   1507c:	beq	150c4 <_obstack_memory_used@@Base+0x2784>
   15080:	mov	r6, #-2147483648	; 0x80000000
   15084:	mvn	r4, #-2147483648	; 0x80000000
   15088:	sdiv	r6, r6, r0
   1508c:	cmp	r6, r7
   15090:	bge	150c4 <_obstack_memory_used@@Base+0x2784>
   15094:	b	150d4 <_obstack_memory_used@@Base+0x2794>
   15098:	beq	150c4 <_obstack_memory_used@@Base+0x2784>
   1509c:	mov	r6, #-2147483648	; 0x80000000
   150a0:	mvn	r4, #-2147483648	; 0x80000000
   150a4:	sdiv	r6, r6, r7
   150a8:	cmp	r6, r0
   150ac:	bge	150c4 <_obstack_memory_used@@Base+0x2784>
   150b0:	b	150d4 <_obstack_memory_used@@Base+0x2794>
   150b4:	mvn	r4, #-2147483648	; 0x80000000
   150b8:	sdiv	r6, r4, r0
   150bc:	cmp	r7, r6
   150c0:	blt	150d4 <_obstack_memory_used@@Base+0x2794>
   150c4:	mul	r6, r7, r0
   150c8:	mov	r4, #64	; 0x40
   150cc:	cmp	r6, #63	; 0x3f
   150d0:	bgt	150dc <_obstack_memory_used@@Base+0x279c>
   150d4:	sdiv	r7, r4, r0
   150d8:	mul	r6, r7, r0
   150dc:	cmp	r5, #0
   150e0:	moveq	r4, #0
   150e4:	streq	r4, [r8]
   150e8:	sub	r4, r7, r1
   150ec:	cmp	r4, r2
   150f0:	bge	1519c <_obstack_memory_used@@Base+0x285c>
   150f4:	add	r7, r1, r2
   150f8:	mov	r6, #0
   150fc:	mov	r2, #0
   15100:	cmp	r7, r3
   15104:	movwgt	r6, #1
   15108:	cmn	r3, #1
   1510c:	movwgt	r2, #1
   15110:	cmp	r7, r1
   15114:	bvs	151d0 <_obstack_memory_used@@Base+0x2890>
   15118:	ands	r1, r2, r6
   1511c:	bne	151d0 <_obstack_memory_used@@Base+0x2890>
   15120:	cmn	r0, #1
   15124:	ble	1514c <_obstack_memory_used@@Base+0x280c>
   15128:	cmp	r0, #0
   1512c:	beq	15198 <_obstack_memory_used@@Base+0x2858>
   15130:	cmn	r7, #1
   15134:	ble	15170 <_obstack_memory_used@@Base+0x2830>
   15138:	mvn	r1, #-2147483648	; 0x80000000
   1513c:	udiv	r1, r1, r0
   15140:	cmp	r1, r7
   15144:	bge	15198 <_obstack_memory_used@@Base+0x2858>
   15148:	b	151d0 <_obstack_memory_used@@Base+0x2890>
   1514c:	cmn	r7, #1
   15150:	ble	15188 <_obstack_memory_used@@Base+0x2848>
   15154:	cmn	r0, #1
   15158:	beq	15198 <_obstack_memory_used@@Base+0x2858>
   1515c:	mov	r1, #-2147483648	; 0x80000000
   15160:	sdiv	r1, r1, r0
   15164:	cmp	r1, r7
   15168:	bge	15198 <_obstack_memory_used@@Base+0x2858>
   1516c:	b	151d0 <_obstack_memory_used@@Base+0x2890>
   15170:	beq	15198 <_obstack_memory_used@@Base+0x2858>
   15174:	mov	r1, #-2147483648	; 0x80000000
   15178:	sdiv	r1, r1, r7
   1517c:	cmp	r1, r0
   15180:	bge	15198 <_obstack_memory_used@@Base+0x2858>
   15184:	b	151d0 <_obstack_memory_used@@Base+0x2890>
   15188:	mvn	r1, #-2147483648	; 0x80000000
   1518c:	sdiv	r1, r1, r0
   15190:	cmp	r7, r1
   15194:	blt	151d0 <_obstack_memory_used@@Base+0x2890>
   15198:	mul	r6, r7, r0
   1519c:	mov	r0, r5
   151a0:	mov	r1, r6
   151a4:	bl	15404 <_obstack_memory_used@@Base+0x2ac4>
   151a8:	cmp	r6, #0
   151ac:	movwne	r6, #1
   151b0:	cmp	r0, #0
   151b4:	bne	151c8 <_obstack_memory_used@@Base+0x2888>
   151b8:	clz	r1, r5
   151bc:	lsr	r1, r1, #5
   151c0:	orrs	r1, r1, r6
   151c4:	bne	151d0 <_obstack_memory_used@@Base+0x2890>
   151c8:	str	r7, [r8]
   151cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   151d0:	bl	1533c <_obstack_memory_used@@Base+0x29fc>
   151d4:	push	{fp, lr}
   151d8:	mov	fp, sp
   151dc:	mov	r1, #1
   151e0:	bl	15380 <_obstack_memory_used@@Base+0x2a40>
   151e4:	cmp	r0, #0
   151e8:	popne	{fp, pc}
   151ec:	bl	1533c <_obstack_memory_used@@Base+0x29fc>
   151f0:	push	{fp, lr}
   151f4:	mov	fp, sp
   151f8:	bl	15380 <_obstack_memory_used@@Base+0x2a40>
   151fc:	cmp	r0, #0
   15200:	popne	{fp, pc}
   15204:	bl	1533c <_obstack_memory_used@@Base+0x29fc>
   15208:	push	{fp, lr}
   1520c:	mov	fp, sp
   15210:	mov	r1, #1
   15214:	bl	15380 <_obstack_memory_used@@Base+0x2a40>
   15218:	cmp	r0, #0
   1521c:	popne	{fp, pc}
   15220:	bl	1533c <_obstack_memory_used@@Base+0x29fc>
   15224:	push	{fp, lr}
   15228:	mov	fp, sp
   1522c:	bl	15380 <_obstack_memory_used@@Base+0x2a40>
   15230:	cmp	r0, #0
   15234:	popne	{fp, pc}
   15238:	bl	1533c <_obstack_memory_used@@Base+0x29fc>
   1523c:	push	{r4, r5, r6, sl, fp, lr}
   15240:	add	fp, sp, #16
   15244:	mov	r5, r0
   15248:	mov	r0, r1
   1524c:	mov	r4, r1
   15250:	bl	153d4 <_obstack_memory_used@@Base+0x2a94>
   15254:	cmp	r0, #0
   15258:	beq	15274 <_obstack_memory_used@@Base+0x2934>
   1525c:	mov	r1, r5
   15260:	mov	r2, r4
   15264:	mov	r6, r0
   15268:	bl	10f04 <memcpy@plt>
   1526c:	mov	r0, r6
   15270:	pop	{r4, r5, r6, sl, fp, pc}
   15274:	bl	1533c <_obstack_memory_used@@Base+0x29fc>
   15278:	push	{r4, r5, r6, sl, fp, lr}
   1527c:	add	fp, sp, #16
   15280:	mov	r5, r0
   15284:	mov	r0, r1
   15288:	mov	r4, r1
   1528c:	bl	153d4 <_obstack_memory_used@@Base+0x2a94>
   15290:	cmp	r0, #0
   15294:	beq	152b0 <_obstack_memory_used@@Base+0x2970>
   15298:	mov	r1, r5
   1529c:	mov	r2, r4
   152a0:	mov	r6, r0
   152a4:	bl	10f04 <memcpy@plt>
   152a8:	mov	r0, r6
   152ac:	pop	{r4, r5, r6, sl, fp, pc}
   152b0:	bl	1533c <_obstack_memory_used@@Base+0x29fc>
   152b4:	push	{r4, r5, r6, sl, fp, lr}
   152b8:	add	fp, sp, #16
   152bc:	mov	r5, r0
   152c0:	add	r0, r1, #1
   152c4:	mov	r4, r1
   152c8:	bl	153d4 <_obstack_memory_used@@Base+0x2a94>
   152cc:	cmp	r0, #0
   152d0:	beq	152f8 <_obstack_memory_used@@Base+0x29b8>
   152d4:	mov	r6, r0
   152d8:	mov	r0, #0
   152dc:	mov	r1, r5
   152e0:	mov	r2, r4
   152e4:	strb	r0, [r6, r4]
   152e8:	mov	r0, r6
   152ec:	bl	10f04 <memcpy@plt>
   152f0:	mov	r0, r6
   152f4:	pop	{r4, r5, r6, sl, fp, pc}
   152f8:	bl	1533c <_obstack_memory_used@@Base+0x29fc>
   152fc:	push	{r4, r5, r6, sl, fp, lr}
   15300:	add	fp, sp, #16
   15304:	mov	r4, r0
   15308:	bl	11048 <strlen@plt>
   1530c:	add	r5, r0, #1
   15310:	mov	r0, r5
   15314:	bl	153d4 <_obstack_memory_used@@Base+0x2a94>
   15318:	cmp	r0, #0
   1531c:	beq	15338 <_obstack_memory_used@@Base+0x29f8>
   15320:	mov	r1, r4
   15324:	mov	r2, r5
   15328:	mov	r6, r0
   1532c:	bl	10f04 <memcpy@plt>
   15330:	mov	r0, r6
   15334:	pop	{r4, r5, r6, sl, fp, pc}
   15338:	bl	1533c <_obstack_memory_used@@Base+0x29fc>
   1533c:	push	{fp, lr}
   15340:	mov	fp, sp
   15344:	movw	r0, #32996	; 0x80e4
   15348:	movw	r1, #29004	; 0x714c
   1534c:	mov	r2, #5
   15350:	movt	r0, #2
   15354:	movt	r1, #1
   15358:	ldr	r4, [r0]
   1535c:	mov	r0, #0
   15360:	bl	10f34 <dcgettext@plt>
   15364:	movw	r2, #28991	; 0x713f
   15368:	mov	r3, r0
   1536c:	mov	r0, r4
   15370:	mov	r1, #0
   15374:	movt	r2, #1
   15378:	bl	10fac <error@plt>
   1537c:	bl	110f0 <abort@plt>
   15380:	clz	r2, r1
   15384:	clz	r3, r0
   15388:	lsr	r2, r2, #5
   1538c:	lsr	r3, r3, #5
   15390:	orrs	r2, r3, r2
   15394:	movwne	r1, #1
   15398:	movwne	r0, #1
   1539c:	cmp	r1, #0
   153a0:	beq	153d0 <_obstack_memory_used@@Base+0x2a90>
   153a4:	mvn	r2, #-2147483648	; 0x80000000
   153a8:	udiv	r2, r2, r1
   153ac:	cmp	r2, r0
   153b0:	bcs	153d0 <_obstack_memory_used@@Base+0x2a90>
   153b4:	push	{fp, lr}
   153b8:	mov	fp, sp
   153bc:	bl	11054 <__errno_location@plt>
   153c0:	mov	r1, #12
   153c4:	str	r1, [r0]
   153c8:	mov	r0, #0
   153cc:	pop	{fp, pc}
   153d0:	b	10eb0 <calloc@plt>
   153d4:	cmp	r0, #0
   153d8:	movweq	r0, #1
   153dc:	cmn	r0, #1
   153e0:	ble	153e8 <_obstack_memory_used@@Base+0x2aa8>
   153e4:	b	10fe8 <malloc@plt>
   153e8:	push	{fp, lr}
   153ec:	mov	fp, sp
   153f0:	bl	11054 <__errno_location@plt>
   153f4:	mov	r1, #12
   153f8:	str	r1, [r0]
   153fc:	mov	r0, #0
   15400:	pop	{fp, pc}
   15404:	push	{fp, lr}
   15408:	mov	fp, sp
   1540c:	cmp	r0, #0
   15410:	beq	1542c <_obstack_memory_used@@Base+0x2aec>
   15414:	cmp	r1, #0
   15418:	beq	15438 <_obstack_memory_used@@Base+0x2af8>
   1541c:	cmn	r1, #1
   15420:	ble	15444 <_obstack_memory_used@@Base+0x2b04>
   15424:	pop	{fp, lr}
   15428:	b	10f4c <realloc@plt>
   1542c:	mov	r0, r1
   15430:	pop	{fp, lr}
   15434:	b	153d4 <_obstack_memory_used@@Base+0x2a94>
   15438:	bl	122b4 <close@plt+0x11b8>
   1543c:	mov	r0, #0
   15440:	pop	{fp, pc}
   15444:	bl	11054 <__errno_location@plt>
   15448:	mov	r1, #12
   1544c:	str	r1, [r0]
   15450:	mov	r0, #0
   15454:	pop	{fp, pc}
   15458:	push	{r4, r5, r6, sl, fp, lr}
   1545c:	add	fp, sp, #16
   15460:	mov	r4, r0
   15464:	bl	10f94 <__fpending@plt>
   15468:	ldr	r6, [r4]
   1546c:	mov	r5, r0
   15470:	mov	r0, r4
   15474:	bl	121bc <close@plt+0x10c0>
   15478:	tst	r6, #32
   1547c:	bne	154b4 <_obstack_memory_used@@Base+0x2b74>
   15480:	cmp	r0, #0
   15484:	mov	r4, r0
   15488:	mvnne	r4, #0
   1548c:	cmp	r5, #0
   15490:	bne	154c0 <_obstack_memory_used@@Base+0x2b80>
   15494:	cmp	r0, #0
   15498:	beq	154c0 <_obstack_memory_used@@Base+0x2b80>
   1549c:	bl	11054 <__errno_location@plt>
   154a0:	ldr	r0, [r0]
   154a4:	subs	r4, r0, #9
   154a8:	mvnne	r4, #0
   154ac:	mov	r0, r4
   154b0:	pop	{r4, r5, r6, sl, fp, pc}
   154b4:	mvn	r4, #0
   154b8:	cmp	r0, #0
   154bc:	beq	154c8 <_obstack_memory_used@@Base+0x2b88>
   154c0:	mov	r0, r4
   154c4:	pop	{r4, r5, r6, sl, fp, pc}
   154c8:	bl	11054 <__errno_location@plt>
   154cc:	mov	r1, #0
   154d0:	str	r1, [r0]
   154d4:	mov	r0, r4
   154d8:	pop	{r4, r5, r6, sl, fp, pc}
   154dc:	push	{fp, lr}
   154e0:	mov	fp, sp
   154e4:	mov	r0, #14
   154e8:	bl	110cc <nl_langinfo@plt>
   154ec:	movw	r1, #23675	; 0x5c7b
   154f0:	cmp	r0, #0
   154f4:	movt	r1, #1
   154f8:	movne	r1, r0
   154fc:	movw	r0, #30048	; 0x7560
   15500:	ldrb	r2, [r1]
   15504:	movt	r0, #1
   15508:	cmp	r2, #0
   1550c:	movne	r0, r1
   15510:	pop	{fp, pc}
   15514:	push	{r4, r5, r6, r7, fp, lr}
   15518:	add	fp, sp, #16
   1551c:	sub	sp, sp, #8
   15520:	add	r5, sp, #4
   15524:	cmp	r0, #0
   15528:	mov	r7, r2
   1552c:	mov	r4, r1
   15530:	movne	r5, r0
   15534:	mov	r0, r5
   15538:	bl	10fa0 <mbrtowc@plt>
   1553c:	mov	r6, r0
   15540:	cmp	r7, #0
   15544:	beq	15568 <_obstack_memory_used@@Base+0x2c28>
   15548:	cmn	r6, #2
   1554c:	bcc	15568 <_obstack_memory_used@@Base+0x2c28>
   15550:	mov	r0, #0
   15554:	bl	155b0 <_obstack_memory_used@@Base+0x2c70>
   15558:	cmp	r0, #0
   1555c:	ldrbeq	r0, [r4]
   15560:	moveq	r6, #1
   15564:	streq	r0, [r5]
   15568:	mov	r0, r6
   1556c:	sub	sp, fp, #16
   15570:	pop	{r4, r5, r6, r7, fp, pc}
   15574:	cmp	r2, #0
   15578:	beq	155a8 <_obstack_memory_used@@Base+0x2c68>
   1557c:	mvn	r3, #0
   15580:	udiv	r3, r3, r2
   15584:	cmp	r3, r1
   15588:	bcs	155a8 <_obstack_memory_used@@Base+0x2c68>
   1558c:	push	{fp, lr}
   15590:	mov	fp, sp
   15594:	bl	11054 <__errno_location@plt>
   15598:	mov	r1, #12
   1559c:	str	r1, [r0]
   155a0:	mov	r0, #0
   155a4:	pop	{fp, pc}
   155a8:	mul	r1, r2, r1
   155ac:	b	15404 <_obstack_memory_used@@Base+0x2ac4>
   155b0:	push	{r4, sl, fp, lr}
   155b4:	add	fp, sp, #8
   155b8:	sub	sp, sp, #264	; 0x108
   155bc:	add	r1, sp, #7
   155c0:	movw	r2, #257	; 0x101
   155c4:	bl	15614 <_obstack_memory_used@@Base+0x2cd4>
   155c8:	mov	r4, #0
   155cc:	cmp	r0, #0
   155d0:	bne	15608 <_obstack_memory_used@@Base+0x2cc8>
   155d4:	movw	r1, #23952	; 0x5d90
   155d8:	add	r0, sp, #7
   155dc:	movt	r1, #1
   155e0:	bl	10ed4 <strcmp@plt>
   155e4:	cmp	r0, #0
   155e8:	beq	15608 <_obstack_memory_used@@Base+0x2cc8>
   155ec:	movw	r1, #30054	; 0x7566
   155f0:	add	r0, sp, #7
   155f4:	movt	r1, #1
   155f8:	bl	10ed4 <strcmp@plt>
   155fc:	mov	r4, r0
   15600:	cmp	r0, #0
   15604:	movwne	r4, #1
   15608:	mov	r0, r4
   1560c:	sub	sp, fp, #8
   15610:	pop	{r4, sl, fp, pc}
   15614:	push	{r4, r5, r6, r7, fp, lr}
   15618:	add	fp, sp, #16
   1561c:	mov	r4, r1
   15620:	mov	r1, #0
   15624:	mov	r6, r2
   15628:	bl	110b4 <setlocale@plt>
   1562c:	cmp	r0, #0
   15630:	beq	15660 <_obstack_memory_used@@Base+0x2d20>
   15634:	mov	r7, r0
   15638:	bl	11048 <strlen@plt>
   1563c:	cmp	r0, r6
   15640:	bcs	15680 <_obstack_memory_used@@Base+0x2d40>
   15644:	add	r2, r0, #1
   15648:	mov	r0, r4
   1564c:	mov	r1, r7
   15650:	bl	10f04 <memcpy@plt>
   15654:	mov	r5, #0
   15658:	mov	r0, r5
   1565c:	pop	{r4, r5, r6, r7, fp, pc}
   15660:	cmp	r6, #0
   15664:	mov	r5, #22
   15668:	movne	r0, #0
   1566c:	strbne	r0, [r4]
   15670:	movne	r0, r5
   15674:	popne	{r4, r5, r6, r7, fp, pc}
   15678:	mov	r0, r5
   1567c:	pop	{r4, r5, r6, r7, fp, pc}
   15680:	mov	r5, #34	; 0x22
   15684:	cmp	r6, #0
   15688:	beq	156a8 <_obstack_memory_used@@Base+0x2d68>
   1568c:	sub	r6, r6, #1
   15690:	mov	r0, r4
   15694:	mov	r1, r7
   15698:	mov	r2, r6
   1569c:	bl	10f04 <memcpy@plt>
   156a0:	mov	r0, #0
   156a4:	strb	r0, [r4, r6]
   156a8:	mov	r0, r5
   156ac:	pop	{r4, r5, r6, r7, fp, pc}
   156b0:	mov	r1, #0
   156b4:	b	110b4 <setlocale@plt>
   156b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   156bc:	mov	r7, r0
   156c0:	ldr	r6, [pc, #72]	; 15710 <_obstack_memory_used@@Base+0x2dd0>
   156c4:	ldr	r5, [pc, #72]	; 15714 <_obstack_memory_used@@Base+0x2dd4>
   156c8:	add	r6, pc, r6
   156cc:	add	r5, pc, r5
   156d0:	sub	r6, r6, r5
   156d4:	mov	r8, r1
   156d8:	mov	r9, r2
   156dc:	bl	10e90 <calloc@plt-0x20>
   156e0:	asrs	r6, r6, #2
   156e4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   156e8:	mov	r4, #0
   156ec:	add	r4, r4, #1
   156f0:	ldr	r3, [r5], #4
   156f4:	mov	r2, r9
   156f8:	mov	r1, r8
   156fc:	mov	r0, r7
   15700:	blx	r3
   15704:	cmp	r6, r4
   15708:	bne	156ec <_obstack_memory_used@@Base+0x2dac>
   1570c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15710:	andeq	r2, r1, ip, lsr r8
   15714:	andeq	r2, r1, r4, lsr r8
   15718:	bx	lr
   1571c:	ldr	r3, [pc, #12]	; 15730 <_obstack_memory_used@@Base+0x2df0>
   15720:	mov	r1, #0
   15724:	add	r3, pc, r3
   15728:	ldr	r2, [r3]
   1572c:	b	11060 <__cxa_atexit@plt>
   15730:			; <UNDEFINED> instruction: 0x000129b0

Disassembly of section .fini:

00015734 <.fini>:
   15734:	push	{r3, lr}
   15738:	pop	{r3, pc}
