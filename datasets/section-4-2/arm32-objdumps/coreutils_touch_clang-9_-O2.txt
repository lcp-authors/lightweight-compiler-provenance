
../repos/coreutils/src/touch:     file format elf32-littlearm


Disassembly of section .init:

00011244 <.init>:
   11244:	push	{r3, lr}
   11248:	bl	11600 <__assert_fail@plt+0x48>
   1124c:	pop	{r3, pc}

Disassembly of section .plt:

00011250 <calloc@plt-0x14>:
   11250:	push	{lr}		; (str lr, [sp, #-4]!)
   11254:	ldr	lr, [pc, #4]	; 11260 <calloc@plt-0x4>
   11258:	add	lr, pc, lr
   1125c:	ldr	pc, [lr, #8]!
   11260:	andeq	r0, r2, r0, lsr #27

00011264 <calloc@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #32, 20	; 0x20000
   1126c:	ldr	pc, [ip, #3488]!	; 0xda0

00011270 <fputs_unlocked@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #32, 20	; 0x20000
   11278:	ldr	pc, [ip, #3480]!	; 0xd98

0001127c <raise@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #32, 20	; 0x20000
   11284:	ldr	pc, [ip, #3472]!	; 0xd90

00011288 <gmtime_r@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #32, 20	; 0x20000
   11290:	ldr	pc, [ip, #3464]!	; 0xd88

00011294 <utimensat@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #32, 20	; 0x20000
   1129c:	ldr	pc, [ip, #3456]!	; 0xd80

000112a0 <strcmp@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #32, 20	; 0x20000
   112a8:	ldr	pc, [ip, #3448]!	; 0xd78

000112ac <strtol@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #32, 20	; 0x20000
   112b4:	ldr	pc, [ip, #3440]!	; 0xd70

000112b8 <mktime@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #32, 20	; 0x20000
   112c0:	ldr	pc, [ip, #3432]!	; 0xd68

000112c4 <fflush@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #32, 20	; 0x20000
   112cc:	ldr	pc, [ip, #3424]!	; 0xd60

000112d0 <free@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #32, 20	; 0x20000
   112d8:	ldr	pc, [ip, #3416]!	; 0xd58

000112dc <clock_gettime@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #32, 20	; 0x20000
   112e4:	ldr	pc, [ip, #3408]!	; 0xd50

000112e8 <_exit@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #32, 20	; 0x20000
   112f0:	ldr	pc, [ip, #3400]!	; 0xd48

000112f4 <memcpy@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #32, 20	; 0x20000
   112fc:	ldr	pc, [ip, #3392]!	; 0xd40

00011300 <mbsinit@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #32, 20	; 0x20000
   11308:	ldr	pc, [ip, #3384]!	; 0xd38

0001130c <time@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #32, 20	; 0x20000
   11314:	ldr	pc, [ip, #3376]!	; 0xd30

00011318 <dcgettext@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #32, 20	; 0x20000
   11320:	ldr	pc, [ip, #3368]!	; 0xd28

00011324 <dup2@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #32, 20	; 0x20000
   1132c:	ldr	pc, [ip, #3360]!	; 0xd20

00011330 <realloc@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #32, 20	; 0x20000
   11338:	ldr	pc, [ip, #3352]!	; 0xd18

0001133c <localtime_r@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #32, 20	; 0x20000
   11344:	ldr	pc, [ip, #3344]!	; 0xd10

00011348 <textdomain@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #32, 20	; 0x20000
   11350:	ldr	pc, [ip, #3336]!	; 0xd08

00011354 <iswprint@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #32, 20	; 0x20000
   1135c:	ldr	pc, [ip, #3328]!	; 0xd00

00011360 <tzset@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #32, 20	; 0x20000
   11368:	ldr	pc, [ip, #3320]!	; 0xcf8

0001136c <fwrite@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #32, 20	; 0x20000
   11374:	ldr	pc, [ip, #3312]!	; 0xcf0

00011378 <lseek64@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #32, 20	; 0x20000
   11380:	ldr	pc, [ip, #3304]!	; 0xce8

00011384 <__ctype_get_mb_cur_max@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #32, 20	; 0x20000
   1138c:	ldr	pc, [ip, #3296]!	; 0xce0

00011390 <__fpending@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #32, 20	; 0x20000
   11398:	ldr	pc, [ip, #3288]!	; 0xcd8

0001139c <mbrtowc@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #32, 20	; 0x20000
   113a4:	ldr	pc, [ip, #3280]!	; 0xcd0

000113a8 <error@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #32, 20	; 0x20000
   113b0:	ldr	pc, [ip, #3272]!	; 0xcc8

000113b4 <open64@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #32, 20	; 0x20000
   113bc:	ldr	pc, [ip, #3264]!	; 0xcc0

000113c0 <getenv@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #32, 20	; 0x20000
   113c8:	ldr	pc, [ip, #3256]!	; 0xcb8

000113cc <malloc@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #32, 20	; 0x20000
   113d4:	ldr	pc, [ip, #3248]!	; 0xcb0

000113d8 <__libc_start_main@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #32, 20	; 0x20000
   113e0:	ldr	pc, [ip, #3240]!	; 0xca8

000113e4 <strftime@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #32, 20	; 0x20000
   113ec:	ldr	pc, [ip, #3232]!	; 0xca0

000113f0 <__vfprintf_chk@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #32, 20	; 0x20000
   113f8:	ldr	pc, [ip, #3224]!	; 0xc98

000113fc <__freading@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #32, 20	; 0x20000
   11404:	ldr	pc, [ip, #3216]!	; 0xc90

00011408 <localtime@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #32, 20	; 0x20000
   11410:	ldr	pc, [ip, #3208]!	; 0xc88

00011414 <__ctype_tolower_loc@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #32, 20	; 0x20000
   1141c:	ldr	pc, [ip, #3200]!	; 0xc80

00011420 <__ctype_toupper_loc@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #32, 20	; 0x20000
   11428:	ldr	pc, [ip, #3192]!	; 0xc78

0001142c <__gmon_start__@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #32, 20	; 0x20000
   11434:	ldr	pc, [ip, #3184]!	; 0xc70

00011438 <getopt_long@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #32, 20	; 0x20000
   11440:	ldr	pc, [ip, #3176]!	; 0xc68

00011444 <__ctype_b_loc@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #32, 20	; 0x20000
   1144c:	ldr	pc, [ip, #3168]!	; 0xc60

00011450 <exit@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #32, 20	; 0x20000
   11458:	ldr	pc, [ip, #3160]!	; 0xc58

0001145c <bcmp@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #32, 20	; 0x20000
   11464:	ldr	pc, [ip, #3152]!	; 0xc50

00011468 <strlen@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #32, 20	; 0x20000
   11470:	ldr	pc, [ip, #3144]!	; 0xc48

00011474 <strchr@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #32, 20	; 0x20000
   1147c:	ldr	pc, [ip, #3136]!	; 0xc40

00011480 <setenv@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #32, 20	; 0x20000
   11488:	ldr	pc, [ip, #3128]!	; 0xc38

0001148c <__errno_location@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #32, 20	; 0x20000
   11494:	ldr	pc, [ip, #3120]!	; 0xc30

00011498 <__sprintf_chk@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #32, 20	; 0x20000
   114a0:	ldr	pc, [ip, #3112]!	; 0xc28

000114a4 <__cxa_atexit@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #32, 20	; 0x20000
   114ac:	ldr	pc, [ip, #3104]!	; 0xc20

000114b0 <memset@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #32, 20	; 0x20000
   114b8:	ldr	pc, [ip, #3096]!	; 0xc18

000114bc <__printf_chk@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #32, 20	; 0x20000
   114c4:	ldr	pc, [ip, #3088]!	; 0xc10

000114c8 <fileno@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #32, 20	; 0x20000
   114d0:	ldr	pc, [ip, #3080]!	; 0xc08

000114d4 <__fprintf_chk@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #32, 20	; 0x20000
   114dc:	ldr	pc, [ip, #3072]!	; 0xc00

000114e0 <fclose@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #32, 20	; 0x20000
   114e8:	ldr	pc, [ip, #3064]!	; 0xbf8

000114ec <fseeko64@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #32, 20	; 0x20000
   114f4:	ldr	pc, [ip, #3056]!	; 0xbf0

000114f8 <__overflow@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #32, 20	; 0x20000
   11500:	ldr	pc, [ip, #3048]!	; 0xbe8

00011504 <setlocale@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #32, 20	; 0x20000
   1150c:	ldr	pc, [ip, #3040]!	; 0xbe0

00011510 <strrchr@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #32, 20	; 0x20000
   11518:	ldr	pc, [ip, #3032]!	; 0xbd8

0001151c <nl_langinfo@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #32, 20	; 0x20000
   11524:	ldr	pc, [ip, #3024]!	; 0xbd0

00011528 <fputc@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #32, 20	; 0x20000
   11530:	ldr	pc, [ip, #3016]!	; 0xbc8

00011534 <timegm@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #32, 20	; 0x20000
   1153c:	ldr	pc, [ip, #3008]!	; 0xbc0

00011540 <futimens@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #32, 20	; 0x20000
   11548:	ldr	pc, [ip, #3000]!	; 0xbb8

0001154c <bindtextdomain@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #32, 20	; 0x20000
   11554:	ldr	pc, [ip, #2992]!	; 0xbb0

00011558 <__xstat64@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #32, 20	; 0x20000
   11560:	ldr	pc, [ip, #2984]!	; 0xba8

00011564 <unsetenv@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #32, 20	; 0x20000
   1156c:	ldr	pc, [ip, #2976]!	; 0xba0

00011570 <fputs@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #32, 20	; 0x20000
   11578:	ldr	pc, [ip, #2968]!	; 0xb98

0001157c <strncmp@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #32, 20	; 0x20000
   11584:	ldr	pc, [ip, #2960]!	; 0xb90

00011588 <abort@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #32, 20	; 0x20000
   11590:	ldr	pc, [ip, #2952]!	; 0xb88

00011594 <close@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #32, 20	; 0x20000
   1159c:	ldr	pc, [ip, #2944]!	; 0xb80

000115a0 <__lxstat64@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #32, 20	; 0x20000
   115a8:	ldr	pc, [ip, #2936]!	; 0xb78

000115ac <__snprintf_chk@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #32, 20	; 0x20000
   115b4:	ldr	pc, [ip, #2928]!	; 0xb70

000115b8 <__assert_fail@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #32, 20	; 0x20000
   115c0:	ldr	pc, [ip, #2920]!	; 0xb68

Disassembly of section .text:

000115c4 <.text>:
   115c4:	mov	fp, #0
   115c8:	mov	lr, #0
   115cc:	pop	{r1}		; (ldr r1, [sp], #4)
   115d0:	mov	r2, sp
   115d4:	push	{r2}		; (str r2, [sp, #-4]!)
   115d8:	push	{r0}		; (str r0, [sp, #-4]!)
   115dc:	ldr	ip, [pc, #16]	; 115f4 <__assert_fail@plt+0x3c>
   115e0:	push	{ip}		; (str ip, [sp, #-4]!)
   115e4:	ldr	r0, [pc, #12]	; 115f8 <__assert_fail@plt+0x40>
   115e8:	ldr	r3, [pc, #12]	; 115fc <__assert_fail@plt+0x44>
   115ec:	bl	113d8 <__libc_start_main@plt>
   115f0:	bl	11588 <abort@plt>
   115f4:	muleq	r1, ip, r5
   115f8:	andeq	r1, r1, r4, lsl #19
   115fc:	andeq	pc, r1, ip, lsr r5	; <UNPREDICTABLE>
   11600:	ldr	r3, [pc, #20]	; 1161c <__assert_fail@plt+0x64>
   11604:	ldr	r2, [pc, #20]	; 11620 <__assert_fail@plt+0x68>
   11608:	add	r3, pc, r3
   1160c:	ldr	r2, [r3, r2]
   11610:	cmp	r2, #0
   11614:	bxeq	lr
   11618:	b	1142c <__gmon_start__@plt>
   1161c:	strdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   11620:	andeq	r0, r0, ip, lsr #2
   11624:	ldr	r0, [pc, #24]	; 11644 <__assert_fail@plt+0x8c>
   11628:	ldr	r3, [pc, #24]	; 11648 <__assert_fail@plt+0x90>
   1162c:	cmp	r3, r0
   11630:	bxeq	lr
   11634:	ldr	r3, [pc, #16]	; 1164c <__assert_fail@plt+0x94>
   11638:	cmp	r3, #0
   1163c:	bxeq	lr
   11640:	bx	r3
   11644:	andeq	r2, r3, r8, lsl #3
   11648:	andeq	r2, r3, r8, lsl #3
   1164c:	andeq	r0, r0, r0
   11650:	ldr	r0, [pc, #36]	; 1167c <__assert_fail@plt+0xc4>
   11654:	ldr	r1, [pc, #36]	; 11680 <__assert_fail@plt+0xc8>
   11658:	sub	r1, r1, r0
   1165c:	asr	r1, r1, #2
   11660:	add	r1, r1, r1, lsr #31
   11664:	asrs	r1, r1, #1
   11668:	bxeq	lr
   1166c:	ldr	r3, [pc, #16]	; 11684 <__assert_fail@plt+0xcc>
   11670:	cmp	r3, #0
   11674:	bxeq	lr
   11678:	bx	r3
   1167c:	andeq	r2, r3, r8, lsl #3
   11680:	andeq	r2, r3, r8, lsl #3
   11684:	andeq	r0, r0, r0
   11688:	push	{r4, lr}
   1168c:	ldr	r4, [pc, #24]	; 116ac <__assert_fail@plt+0xf4>
   11690:	ldrb	r3, [r4]
   11694:	cmp	r3, #0
   11698:	popne	{r4, pc}
   1169c:	bl	11624 <__assert_fail@plt+0x6c>
   116a0:	mov	r3, #1
   116a4:	strb	r3, [r4]
   116a8:	pop	{r4, pc}
   116ac:	andeq	r2, r3, ip, lsr #3
   116b0:	b	11650 <__assert_fail@plt+0x98>
   116b4:	push	{fp, lr}
   116b8:	mov	fp, sp
   116bc:	sub	sp, sp, #56	; 0x38
   116c0:	mov	r4, r0
   116c4:	cmp	r0, #0
   116c8:	bne	11940 <__assert_fail@plt+0x388>
   116cc:	movw	r1, #62955	; 0xf5eb
   116d0:	mov	r0, #0
   116d4:	mov	r2, #5
   116d8:	movt	r1, #1
   116dc:	bl	11318 <dcgettext@plt>
   116e0:	mov	r1, r0
   116e4:	movw	r0, #8668	; 0x21dc
   116e8:	movt	r0, #3
   116ec:	ldr	r2, [r0]
   116f0:	mov	r0, #1
   116f4:	bl	114bc <__printf_chk@plt>
   116f8:	movw	r1, #62986	; 0xf60a
   116fc:	mov	r0, #0
   11700:	mov	r2, #5
   11704:	movt	r1, #1
   11708:	bl	11318 <dcgettext@plt>
   1170c:	movw	r7, #8612	; 0x21a4
   11710:	movt	r7, #3
   11714:	ldr	r1, [r7]
   11718:	bl	11270 <fputs_unlocked@plt>
   1171c:	movw	r1, #64604	; 0xfc5c
   11720:	mov	r0, #0
   11724:	mov	r2, #5
   11728:	movt	r1, #1
   1172c:	bl	11318 <dcgettext@plt>
   11730:	ldr	r1, [r7]
   11734:	bl	11270 <fputs_unlocked@plt>
   11738:	movw	r1, #63278	; 0xf72e
   1173c:	mov	r0, #0
   11740:	mov	r2, #5
   11744:	movt	r1, #1
   11748:	bl	11318 <dcgettext@plt>
   1174c:	ldr	r1, [r7]
   11750:	bl	11270 <fputs_unlocked@plt>
   11754:	movw	r1, #63489	; 0xf801
   11758:	mov	r0, #0
   1175c:	mov	r2, #5
   11760:	movt	r1, #1
   11764:	bl	11318 <dcgettext@plt>
   11768:	ldr	r1, [r7]
   1176c:	bl	11270 <fputs_unlocked@plt>
   11770:	movw	r1, #63750	; 0xf906
   11774:	mov	r0, #0
   11778:	mov	r2, #5
   1177c:	movt	r1, #1
   11780:	bl	11318 <dcgettext@plt>
   11784:	ldr	r1, [r7]
   11788:	bl	11270 <fputs_unlocked@plt>
   1178c:	movw	r1, #64093	; 0xfa5d
   11790:	mov	r0, #0
   11794:	mov	r2, #5
   11798:	movt	r1, #1
   1179c:	bl	11318 <dcgettext@plt>
   117a0:	ldr	r1, [r7]
   117a4:	bl	11270 <fputs_unlocked@plt>
   117a8:	movw	r1, #64138	; 0xfa8a
   117ac:	mov	r0, #0
   117b0:	mov	r2, #5
   117b4:	movt	r1, #1
   117b8:	bl	11318 <dcgettext@plt>
   117bc:	ldr	r1, [r7]
   117c0:	bl	11270 <fputs_unlocked@plt>
   117c4:	movw	r1, #64192	; 0xfac0
   117c8:	mov	r0, #0
   117cc:	mov	r2, #5
   117d0:	movt	r1, #1
   117d4:	bl	11318 <dcgettext@plt>
   117d8:	ldr	r1, [r7]
   117dc:	bl	11270 <fputs_unlocked@plt>
   117e0:	movw	r0, #65360	; 0xff50
   117e4:	mov	r2, #48	; 0x30
   117e8:	mov	r6, sp
   117ec:	movw	r5, #64262	; 0xfb06
   117f0:	movt	r0, #1
   117f4:	movt	r5, #1
   117f8:	add	r1, r0, #32
   117fc:	add	r3, r0, #16
   11800:	vld1.64	{d18-d19}, [r0], r2
   11804:	vld1.64	{d16-d17}, [r1]
   11808:	vld1.64	{d20-d21}, [r3]
   1180c:	vldr	d22, [r0]
   11810:	add	r1, r6, #32
   11814:	add	r0, r6, #16
   11818:	vst1.64	{d16-d17}, [r1]
   1181c:	movw	r1, #64679	; 0xfca7
   11820:	vst1.64	{d20-d21}, [r0]
   11824:	mov	r0, r6
   11828:	movt	r1, #1
   1182c:	vst1.64	{d18-d19}, [r0], r2
   11830:	vstr	d22, [r0]
   11834:	mov	r0, r5
   11838:	bl	112a0 <strcmp@plt>
   1183c:	cmp	r0, #0
   11840:	ldrne	r1, [r6, #8]!
   11844:	cmpne	r1, #0
   11848:	bne	11834 <__assert_fail@plt+0x27c>
   1184c:	movw	r1, #64774	; 0xfd06
   11850:	ldr	r6, [r6, #4]
   11854:	mov	r0, #0
   11858:	mov	r2, #5
   1185c:	movt	r1, #1
   11860:	bl	11318 <dcgettext@plt>
   11864:	movw	r2, #64334	; 0xfb4e
   11868:	movw	r3, #64797	; 0xfd1d
   1186c:	mov	r1, r0
   11870:	mov	r0, #1
   11874:	movt	r2, #1
   11878:	movt	r3, #1
   1187c:	bl	114bc <__printf_chk@plt>
   11880:	cmp	r6, #0
   11884:	mov	r0, #5
   11888:	mov	r1, #0
   1188c:	moveq	r6, r5
   11890:	bl	11504 <setlocale@plt>
   11894:	cmp	r0, #0
   11898:	beq	118d0 <__assert_fail@plt+0x318>
   1189c:	movw	r1, #64837	; 0xfd45
   118a0:	mov	r2, #3
   118a4:	movt	r1, #1
   118a8:	bl	1157c <strncmp@plt>
   118ac:	cmp	r0, #0
   118b0:	beq	118d0 <__assert_fail@plt+0x318>
   118b4:	movw	r1, #64841	; 0xfd49
   118b8:	mov	r0, #0
   118bc:	mov	r2, #5
   118c0:	movt	r1, #1
   118c4:	bl	11318 <dcgettext@plt>
   118c8:	ldr	r1, [r7]
   118cc:	bl	11270 <fputs_unlocked@plt>
   118d0:	movw	r1, #64912	; 0xfd90
   118d4:	mov	r0, #0
   118d8:	mov	r2, #5
   118dc:	movt	r1, #1
   118e0:	bl	11318 <dcgettext@plt>
   118e4:	movw	r2, #64797	; 0xfd1d
   118e8:	mov	r1, r0
   118ec:	mov	r0, #1
   118f0:	mov	r3, r5
   118f4:	movt	r2, #1
   118f8:	bl	114bc <__printf_chk@plt>
   118fc:	movw	r1, #64939	; 0xfdab
   11900:	mov	r0, #0
   11904:	mov	r2, #5
   11908:	movt	r1, #1
   1190c:	bl	11318 <dcgettext@plt>
   11910:	mov	r1, r0
   11914:	movw	r0, #64707	; 0xfcc3
   11918:	movw	r3, #6017	; 0x1781
   1191c:	cmp	r6, r5
   11920:	mov	r2, r6
   11924:	movt	r0, #1
   11928:	movt	r3, #2
   1192c:	moveq	r3, r0
   11930:	mov	r0, #1
   11934:	bl	114bc <__printf_chk@plt>
   11938:	mov	r0, r4
   1193c:	bl	11450 <exit@plt>
   11940:	movw	r0, #8608	; 0x21a0
   11944:	movw	r1, #62916	; 0xf5c4
   11948:	mov	r2, #5
   1194c:	movt	r0, #3
   11950:	movt	r1, #1
   11954:	ldr	r5, [r0]
   11958:	mov	r0, #0
   1195c:	bl	11318 <dcgettext@plt>
   11960:	mov	r2, r0
   11964:	movw	r0, #8668	; 0x21dc
   11968:	mov	r1, #1
   1196c:	movt	r0, #3
   11970:	ldr	r3, [r0]
   11974:	mov	r0, r5
   11978:	bl	114d4 <__fprintf_chk@plt>
   1197c:	mov	r0, r4
   11980:	bl	11450 <exit@plt>
   11984:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11988:	add	fp, sp, #28
   1198c:	sub	sp, sp, #164	; 0xa4
   11990:	str	r0, [sp, #36]	; 0x24
   11994:	ldr	r0, [r1]
   11998:	str	r1, [sp, #32]
   1199c:	bl	1a1c8 <__assert_fail@plt+0x8c10>
   119a0:	movw	r1, #6017	; 0x1781
   119a4:	mov	r0, #6
   119a8:	movt	r1, #2
   119ac:	bl	11504 <setlocale@plt>
   119b0:	movw	r6, #64338	; 0xfb52
   119b4:	movw	r1, #64268	; 0xfb0c
   119b8:	movt	r6, #1
   119bc:	movt	r1, #1
   119c0:	mov	r0, r6
   119c4:	bl	1154c <bindtextdomain@plt>
   119c8:	mov	r0, r6
   119cc:	bl	11348 <textdomain@plt>
   119d0:	movw	r0, #10516	; 0x2914
   119d4:	movt	r0, #1
   119d8:	bl	1f5a0 <__assert_fail@plt+0xdfe8>
   119dc:	movw	r0, #8624	; 0x21b0
   119e0:	mov	r8, #0
   119e4:	movw	r6, #64292	; 0xfb24
   119e8:	movw	r7, #65184	; 0xfea0
   119ec:	movw	r5, #8640	; 0x21c0
   119f0:	movw	r9, #65312	; 0xff20
   119f4:	mov	r4, #1
   119f8:	mov	sl, #0
   119fc:	movt	r0, #3
   11a00:	movt	r6, #1
   11a04:	movt	r7, #1
   11a08:	movt	r5, #3
   11a0c:	movt	r9, #1
   11a10:	str	r8, [r0]
   11a14:	movw	r0, #8628	; 0x21b4
   11a18:	movt	r0, #3
   11a1c:	strb	r8, [r0]
   11a20:	movw	r0, #8629	; 0x21b5
   11a24:	movt	r0, #3
   11a28:	strb	r8, [r0]
   11a2c:	mov	r0, #0
   11a30:	str	r0, [sp, #28]
   11a34:	ldr	r0, [sp, #36]	; 0x24
   11a38:	ldr	r1, [sp, #32]
   11a3c:	mov	r2, r6
   11a40:	mov	r3, r7
   11a44:	str	r8, [sp]
   11a48:	bl	11438 <getopt_long@plt>
   11a4c:	cmp	r0, #96	; 0x60
   11a50:	ble	11bec <__assert_fail@plt+0x634>
   11a54:	sub	r1, r0, #97	; 0x61
   11a58:	cmp	r1, #19
   11a5c:	bhi	11b68 <__assert_fail@plt+0x5b0>
   11a60:	add	r0, pc, #0
   11a64:	ldr	pc, [r0, r1, lsl #2]
   11a68:			; <UNDEFINED> instruction: 0x00011ab8
   11a6c:	andeq	r2, r1, r8, lsr #5
   11a70:	strdeq	r1, [r1], -r8
   11a74:	andeq	r1, r1, r4, ror #21
   11a78:	andeq	r2, r1, r8, lsr #5
   11a7c:	andeq	r1, r1, r4, lsr sl
   11a80:	andeq	r2, r1, r8, lsr #5
   11a84:	ldrdeq	r1, [r1], -r4
   11a88:	andeq	r2, r1, r8, lsr #5
   11a8c:	andeq	r2, r1, r8, lsr #5
   11a90:	andeq	r2, r1, r8, lsr #5
   11a94:	andeq	r2, r1, r8, lsr #5
   11a98:	ldrdeq	r1, [r1], -r0
   11a9c:	andeq	r2, r1, r8, lsr #5
   11aa0:	andeq	r2, r1, r8, lsr #5
   11aa4:	andeq	r2, r1, r8, lsr #5
   11aa8:	andeq	r2, r1, r8, lsr #5
   11aac:	andeq	r1, r1, r8, lsl #22
   11ab0:	andeq	r2, r1, r8, lsr #5
   11ab4:	andeq	r1, r1, r0, lsr fp
   11ab8:	movw	r0, #8624	; 0x21b0
   11abc:	movt	r0, #3
   11ac0:	mov	r1, r0
   11ac4:	ldr	r0, [r0]
   11ac8:	orr	r0, r0, #1
   11acc:	str	r0, [r1]
   11ad0:	b	11a34 <__assert_fail@plt+0x47c>
   11ad4:	movw	r0, #8630	; 0x21b6
   11ad8:	movt	r0, #3
   11adc:	strb	r4, [r0]
   11ae0:	b	11a34 <__assert_fail@plt+0x47c>
   11ae4:	movw	r0, #8616	; 0x21a8
   11ae8:	movt	r0, #3
   11aec:	ldr	r0, [r0]
   11af0:	str	r0, [sp, #28]
   11af4:	b	11a34 <__assert_fail@plt+0x47c>
   11af8:	movw	r0, #8629	; 0x21b5
   11afc:	movt	r0, #3
   11b00:	strb	r4, [r0]
   11b04:	b	11a34 <__assert_fail@plt+0x47c>
   11b08:	movw	r0, #8628	; 0x21b4
   11b0c:	movw	r1, #8632	; 0x21b8
   11b10:	movt	r0, #3
   11b14:	movt	r1, #3
   11b18:	strb	r4, [r0]
   11b1c:	movw	r0, #8616	; 0x21a8
   11b20:	movt	r0, #3
   11b24:	ldr	r0, [r0]
   11b28:	str	r0, [r1]
   11b2c:	b	11a34 <__assert_fail@plt+0x47c>
   11b30:	movw	r0, #8616	; 0x21a8
   11b34:	mov	r2, #6
   11b38:	movt	r0, #3
   11b3c:	ldr	r1, [r0]
   11b40:	mov	r0, r5
   11b44:	bl	19e30 <__assert_fail@plt+0x8878>
   11b48:	cmp	r0, #0
   11b4c:	beq	122b0 <__assert_fail@plt+0xcf8>
   11b50:	ldr	r0, [r5]
   11b54:	str	r8, [r5, #4]
   11b58:	str	r8, [r5, #12]
   11b5c:	mov	sl, #1
   11b60:	str	r0, [r5, #8]
   11b64:	b	11a34 <__assert_fail@plt+0x47c>
   11b68:	cmp	r0, #256	; 0x100
   11b6c:	bne	122a8 <__assert_fail@plt+0xcf0>
   11b70:	movw	r0, #8616	; 0x21a8
   11b74:	mov	r2, #4
   11b78:	mov	r3, r9
   11b7c:	movt	r0, #3
   11b80:	str	r2, [sp]
   11b84:	movw	r2, #65332	; 0xff34
   11b88:	movt	r2, #1
   11b8c:	ldr	r1, [r0]
   11b90:	movw	r0, #8508	; 0x213c
   11b94:	movt	r0, #3
   11b98:	ldr	r0, [r0]
   11b9c:	stmib	sp, {r0, r4}
   11ba0:	movw	r0, #64327	; 0xfb47
   11ba4:	movt	r0, #1
   11ba8:	bl	12680 <__assert_fail@plt+0x10c8>
   11bac:	movw	r1, #8624	; 0x21b0
   11bb0:	ldr	r0, [r9, r0, lsl #2]
   11bb4:	mov	r4, #1
   11bb8:	movt	r1, #3
   11bbc:	mov	r2, r1
   11bc0:	ldr	r1, [r1]
   11bc4:	orr	r0, r1, r0
   11bc8:	str	r0, [r2]
   11bcc:	b	11a34 <__assert_fail@plt+0x47c>
   11bd0:	movw	r0, #8624	; 0x21b0
   11bd4:	movt	r0, #3
   11bd8:	mov	r1, r0
   11bdc:	ldr	r0, [r0]
   11be0:	orr	r0, r0, #2
   11be4:	str	r0, [r1]
   11be8:	b	11a34 <__assert_fail@plt+0x47c>
   11bec:	cmn	r0, #1
   11bf0:	bne	12204 <__assert_fail@plt+0xc4c>
   11bf4:	movw	r7, #8624	; 0x21b0
   11bf8:	ldr	r6, [sp, #28]
   11bfc:	movt	r7, #3
   11c00:	ldr	r0, [r7]
   11c04:	cmp	r0, #0
   11c08:	moveq	r0, #3
   11c0c:	streq	r0, [r7]
   11c10:	movw	r0, #8628	; 0x21b4
   11c14:	tst	sl, #1
   11c18:	movt	r0, #3
   11c1c:	ldrb	r0, [r0]
   11c20:	beq	11f14 <__assert_fail@plt+0x95c>
   11c24:	clz	r1, r6
   11c28:	eor	r0, r0, #1
   11c2c:	lsr	r1, r1, #5
   11c30:	tst	r1, r0
   11c34:	beq	122f8 <__assert_fail@plt+0xd40>
   11c38:	movw	r0, #8600	; 0x2198
   11c3c:	movt	r0, #3
   11c40:	ldr	r1, [r0]
   11c44:	ldr	r0, [sp, #36]	; 0x24
   11c48:	cmp	r1, r0
   11c4c:	beq	122ec <__assert_fail@plt+0xd34>
   11c50:	mov	r0, #0
   11c54:	bge	11f58 <__assert_fail@plt+0x9a0>
   11c58:	add	r0, r5, #4
   11c5c:	mov	sl, #1
   11c60:	str	r0, [sp, #28]
   11c64:	add	r0, r5, #12
   11c68:	str	r0, [sp, #24]
   11c6c:	b	11cdc <__assert_fail@plt+0x724>
   11c70:	movw	r1, #65145	; 0xfe79
   11c74:	movt	r1, #1
   11c78:	mov	r0, #0
   11c7c:	mov	r2, #5
   11c80:	mov	r5, #0
   11c84:	bl	11318 <dcgettext@plt>
   11c88:	mov	r4, r0
   11c8c:	mov	r0, #4
   11c90:	mov	r1, r6
   11c94:	bl	1b8f4 <__assert_fail@plt+0xa33c>
   11c98:	mov	r3, r0
   11c9c:	mov	r0, #0
   11ca0:	mov	r1, r9
   11ca4:	mov	r2, r4
   11ca8:	bl	113a8 <error@plt>
   11cac:	movw	r0, #8600	; 0x2198
   11cb0:	and	sl, sl, r5
   11cb4:	movw	r5, #8640	; 0x21c0
   11cb8:	movt	r0, #3
   11cbc:	movt	r5, #3
   11cc0:	mov	r2, r0
   11cc4:	ldr	r0, [r0]
   11cc8:	add	r1, r0, #1
   11ccc:	ldr	r0, [sp, #36]	; 0x24
   11cd0:	str	r1, [r2]
   11cd4:	cmp	r1, r0
   11cd8:	bge	11f54 <__assert_fail@plt+0x99c>
   11cdc:	ldr	r0, [sp, #32]
   11ce0:	ldr	r6, [r0, r1, lsl #2]
   11ce4:	movw	r1, #6108	; 0x17dc
   11ce8:	movt	r1, #2
   11cec:	mov	r0, r6
   11cf0:	bl	112a0 <strcmp@plt>
   11cf4:	cmp	r0, #0
   11cf8:	mov	r9, #0
   11cfc:	mov	r8, #1
   11d00:	beq	11d68 <__assert_fail@plt+0x7b0>
   11d04:	movw	r0, #8629	; 0x21b5
   11d08:	mvn	r8, #0
   11d0c:	movt	r0, #3
   11d10:	ldrb	r0, [r0]
   11d14:	cmp	r0, #0
   11d18:	beq	11d24 <__assert_fail@plt+0x76c>
   11d1c:	mov	r9, #0
   11d20:	b	11d68 <__assert_fail@plt+0x7b0>
   11d24:	movw	r0, #8630	; 0x21b6
   11d28:	mov	r9, #0
   11d2c:	movt	r0, #3
   11d30:	ldrb	r0, [r0]
   11d34:	cmp	r0, #0
   11d38:	bne	11d68 <__assert_fail@plt+0x7b0>
   11d3c:	mov	r0, #0
   11d40:	mov	r1, r6
   11d44:	movw	r2, #2369	; 0x941
   11d48:	movw	r3, #438	; 0x1b6
   11d4c:	mov	r9, #0
   11d50:	bl	129fc <__assert_fail@plt+0x1444>
   11d54:	mov	r8, r0
   11d58:	cmn	r0, #1
   11d5c:	bgt	11d68 <__assert_fail@plt+0x7b0>
   11d60:	bl	1148c <__errno_location@plt>
   11d64:	ldr	r9, [r0]
   11d68:	ldr	r0, [r7]
   11d6c:	cmp	r0, #1
   11d70:	beq	11d8c <__assert_fail@plt+0x7d4>
   11d74:	ldr	r1, [sp, #28]
   11d78:	cmp	r0, #2
   11d7c:	beq	11d90 <__assert_fail@plt+0x7d8>
   11d80:	cmp	r0, #3
   11d84:	beq	11d98 <__assert_fail@plt+0x7e0>
   11d88:	b	12278 <__assert_fail@plt+0xcc0>
   11d8c:	ldr	r1, [sp, #24]
   11d90:	mvn	r0, #-1073741823	; 0xc0000001
   11d94:	str	r0, [r1]
   11d98:	movw	r1, #8630	; 0x21b6
   11d9c:	movw	r0, #8656	; 0x21d0
   11da0:	movt	r1, #3
   11da4:	movt	r0, #3
   11da8:	ldrb	r1, [r1]
   11dac:	ldrb	r0, [r0]
   11db0:	cmp	r1, #0
   11db4:	movwne	r1, #256	; 0x100
   11db8:	subs	r2, r8, #1
   11dbc:	movne	r2, r6
   11dc0:	cmp	r0, #0
   11dc4:	str	r1, [sp]
   11dc8:	mov	r0, r8
   11dcc:	mvn	r1, #99	; 0x63
   11dd0:	movwne	r5, #0
   11dd4:	mov	r3, r5
   11dd8:	bl	12a64 <__assert_fail@plt+0x14ac>
   11ddc:	cmp	r0, #0
   11de0:	beq	11e10 <__assert_fail@plt+0x858>
   11de4:	bl	1148c <__errno_location@plt>
   11de8:	ldr	r4, [r0]
   11dec:	cmp	r8, #0
   11df0:	beq	11e1c <__assert_fail@plt+0x864>
   11df4:	cmp	r8, #1
   11df8:	cmpeq	r4, #9
   11dfc:	beq	11e74 <__assert_fail@plt+0x8bc>
   11e00:	cmp	r4, #0
   11e04:	bne	11e8c <__assert_fail@plt+0x8d4>
   11e08:	mov	r5, #1
   11e0c:	b	11cac <__assert_fail@plt+0x6f4>
   11e10:	mov	r4, #0
   11e14:	cmp	r8, #0
   11e18:	bne	11df4 <__assert_fail@plt+0x83c>
   11e1c:	mov	r0, #0
   11e20:	bl	11594 <close@plt>
   11e24:	cmp	r0, #0
   11e28:	beq	11e00 <__assert_fail@plt+0x848>
   11e2c:	bl	1148c <__errno_location@plt>
   11e30:	movw	r1, #65126	; 0xfe66
   11e34:	ldr	r7, [r0]
   11e38:	mov	r0, #0
   11e3c:	mov	r2, #5
   11e40:	mov	r5, #0
   11e44:	movt	r1, #1
   11e48:	bl	11318 <dcgettext@plt>
   11e4c:	mov	r4, r0
   11e50:	mov	r0, #4
   11e54:	mov	r1, r6
   11e58:	bl	1b8f4 <__assert_fail@plt+0xa33c>
   11e5c:	mov	r1, r7
   11e60:	movw	r7, #8624	; 0x21b0
   11e64:	mov	r3, r0
   11e68:	mov	r0, #0
   11e6c:	movt	r7, #3
   11e70:	b	11ca4 <__assert_fail@plt+0x6ec>
   11e74:	movw	r0, #8629	; 0x21b5
   11e78:	mov	r5, #1
   11e7c:	movt	r0, #3
   11e80:	ldrb	r0, [r0]
   11e84:	cmp	r0, #0
   11e88:	bne	11cac <__assert_fail@plt+0x6f4>
   11e8c:	cmp	r9, #0
   11e90:	cmpne	r9, #21
   11e94:	bne	11ec8 <__assert_fail@plt+0x910>
   11e98:	cmp	r4, #2
   11e9c:	bne	11f04 <__assert_fail@plt+0x94c>
   11ea0:	movw	r0, #8629	; 0x21b5
   11ea4:	movw	r1, #65161	; 0xfe89
   11ea8:	mov	r5, #1
   11eac:	mov	r9, r4
   11eb0:	movt	r0, #3
   11eb4:	movt	r1, #1
   11eb8:	ldrb	r0, [r0]
   11ebc:	cmp	r0, #0
   11ec0:	bne	11cac <__assert_fail@plt+0x6f4>
   11ec4:	b	11c78 <__assert_fail@plt+0x6c0>
   11ec8:	cmp	r9, #22
   11ecc:	bne	11c70 <__assert_fail@plt+0x6b8>
   11ed0:	mov	r0, #3
   11ed4:	mov	r1, r6
   11ed8:	add	r2, sp, #56	; 0x38
   11edc:	bl	11558 <__xstat64@plt>
   11ee0:	cmp	r0, #0
   11ee4:	bne	11c70 <__assert_fail@plt+0x6b8>
   11ee8:	ldr	r0, [sp, #72]	; 0x48
   11eec:	movw	r1, #65145	; 0xfe79
   11ef0:	movt	r1, #1
   11ef4:	and	r0, r0, #61440	; 0xf000
   11ef8:	cmp	r0, #16384	; 0x4000
   11efc:	bne	11c78 <__assert_fail@plt+0x6c0>
   11f00:	b	11e98 <__assert_fail@plt+0x8e0>
   11f04:	movw	r1, #65161	; 0xfe89
   11f08:	mov	r9, r4
   11f0c:	movt	r1, #1
   11f10:	b	11c78 <__assert_fail@plt+0x6c0>
   11f14:	cmp	r0, #0
   11f18:	beq	11f60 <__assert_fail@plt+0x9a8>
   11f1c:	movw	r0, #8632	; 0x21b8
   11f20:	add	r2, sp, #56	; 0x38
   11f24:	movt	r0, #3
   11f28:	ldr	r1, [r0]
   11f2c:	movw	r0, #8630	; 0x21b6
   11f30:	movt	r0, #3
   11f34:	ldrb	r0, [r0]
   11f38:	cmp	r0, #1
   11f3c:	bne	12140 <__assert_fail@plt+0xb88>
   11f40:	mov	r0, #3
   11f44:	bl	115a0 <__lxstat64@plt>
   11f48:	cmp	r0, #0
   11f4c:	beq	12150 <__assert_fail@plt+0xb98>
   11f50:	b	12324 <__assert_fail@plt+0xd6c>
   11f54:	eor	r0, sl, #1
   11f58:	sub	sp, fp, #28
   11f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f60:	cmp	r6, #0
   11f64:	beq	12010 <__assert_fail@plt+0xa58>
   11f68:	add	r7, sp, #56	; 0x38
   11f6c:	mov	r0, r7
   11f70:	bl	12b04 <__assert_fail@plt+0x154c>
   11f74:	movw	r4, #8640	; 0x21c0
   11f78:	mov	r1, r6
   11f7c:	mov	r2, r7
   11f80:	movt	r4, #3
   11f84:	mov	r0, r4
   11f88:	bl	19bcc <__assert_fail@plt+0x8614>
   11f8c:	cmp	r0, #0
   11f90:	beq	121b4 <__assert_fail@plt+0xbfc>
   11f94:	ldrd	r0, [r4]
   11f98:	movw	r7, #8624	; 0x21b0
   11f9c:	movt	r7, #3
   11fa0:	strd	r0, [r4, #8]
   11fa4:	ldr	r1, [r7]
   11fa8:	cmp	r1, #3
   11fac:	bne	11c38 <__assert_fail@plt+0x680>
   11fb0:	ldr	r1, [sp, #56]	; 0x38
   11fb4:	cmp	r1, r0
   11fb8:	bne	11c38 <__assert_fail@plt+0x680>
   11fbc:	ldr	r1, [r4, #4]
   11fc0:	ldr	r2, [sp, #60]	; 0x3c
   11fc4:	cmp	r1, r2
   11fc8:	bne	11c38 <__assert_fail@plt+0x680>
   11fcc:	eor	r0, r0, #1
   11fd0:	str	r1, [sp, #52]	; 0x34
   11fd4:	add	r2, sp, #48	; 0x30
   11fd8:	mov	r1, r6
   11fdc:	str	r0, [sp, #48]	; 0x30
   11fe0:	add	r0, sp, #40	; 0x28
   11fe4:	bl	19bcc <__assert_fail@plt+0x8614>
   11fe8:	cmp	r0, #0
   11fec:	beq	121b4 <__assert_fail@plt+0xbfc>
   11ff0:	ldr	r0, [sp, #48]	; 0x30
   11ff4:	ldr	r1, [sp, #40]	; 0x28
   11ff8:	cmp	r1, r0
   11ffc:	bne	11c38 <__assert_fail@plt+0x680>
   12000:	ldr	r0, [sp, #52]	; 0x34
   12004:	ldr	r1, [sp, #44]	; 0x2c
   12008:	cmp	r1, r0
   1200c:	bne	11c38 <__assert_fail@plt+0x680>
   12010:	movw	r0, #8600	; 0x2198
   12014:	ldr	r1, [sp, #36]	; 0x24
   12018:	movt	r0, #3
   1201c:	ldr	r0, [r0]
   12020:	sub	r0, r1, r0
   12024:	cmp	r0, #2
   12028:	blt	121d4 <__assert_fail@plt+0xc1c>
   1202c:	bl	1a16c <__assert_fail@plt+0x8bb4>
   12030:	movw	r1, #3503	; 0xdaf
   12034:	movt	r1, #3
   12038:	cmp	r0, r1
   1203c:	bgt	121d4 <__assert_fail@plt+0xc1c>
   12040:	movw	r0, #8600	; 0x2198
   12044:	ldr	r1, [sp, #32]
   12048:	movw	r6, #8640	; 0x21c0
   1204c:	mov	r2, #9
   12050:	movt	r0, #3
   12054:	movt	r6, #3
   12058:	ldr	r0, [r0]
   1205c:	ldr	r1, [r1, r0, lsl #2]
   12060:	mov	r0, r6
   12064:	bl	19e30 <__assert_fail@plt+0x8878>
   12068:	cmp	r0, #0
   1206c:	beq	121d4 <__assert_fail@plt+0xc1c>
   12070:	mov	r0, #0
   12074:	ldr	r1, [r6]
   12078:	stmib	r6, {r0, r1}
   1207c:	str	r0, [r6, #12]
   12080:	movw	r0, #64492	; 0xfbec
   12084:	movt	r0, #1
   12088:	bl	113c0 <getenv@plt>
   1208c:	cmp	r0, #0
   12090:	bne	12124 <__assert_fail@plt+0xb6c>
   12094:	movw	r0, #8640	; 0x21c0
   12098:	movt	r0, #3
   1209c:	bl	11408 <localtime@plt>
   120a0:	cmp	r0, #0
   120a4:	beq	12124 <__assert_fail@plt+0xb6c>
   120a8:	movw	r1, #64508	; 0xfbfc
   120ac:	mov	r6, r0
   120b0:	mov	r0, #0
   120b4:	mov	r2, #5
   120b8:	movt	r1, #1
   120bc:	bl	11318 <dcgettext@plt>
   120c0:	mov	ip, r0
   120c4:	movw	r0, #8600	; 0x2198
   120c8:	ldr	r1, [sp, #32]
   120cc:	ldr	r4, [r6, #16]
   120d0:	ldr	r5, [r6, #12]
   120d4:	movw	r2, #1900	; 0x76c
   120d8:	movt	r0, #3
   120dc:	ldr	r0, [r0]
   120e0:	add	r4, r4, #1
   120e4:	ldr	r3, [r1, r0, lsl #2]
   120e8:	ldm	r6, {r0, r1, r7}
   120ec:	ldr	r6, [r6, #20]
   120f0:	add	r2, r6, r2
   120f4:	stm	sp, {r2, r4, r5}
   120f8:	movw	r5, #8640	; 0x21c0
   120fc:	str	r7, [sp, #12]
   12100:	movw	r7, #8624	; 0x21b0
   12104:	str	r1, [sp, #16]
   12108:	str	r0, [sp, #20]
   1210c:	mov	r0, #0
   12110:	mov	r1, #0
   12114:	mov	r2, ip
   12118:	movt	r5, #3
   1211c:	movt	r7, #3
   12120:	bl	113a8 <error@plt>
   12124:	movw	r0, #8600	; 0x2198
   12128:	movt	r0, #3
   1212c:	mov	r1, r0
   12130:	ldr	r0, [r0]
   12134:	add	r0, r0, #1
   12138:	str	r0, [r1]
   1213c:	b	11c38 <__assert_fail@plt+0x680>
   12140:	mov	r0, #3
   12144:	bl	11558 <__xstat64@plt>
   12148:	cmp	r0, #0
   1214c:	bne	12324 <__assert_fail@plt+0xd6c>
   12150:	add	r0, sp, #56	; 0x38
   12154:	cmp	r6, #0
   12158:	add	r0, r0, #72	; 0x48
   1215c:	vld1.64	{d16-d17}, [r0]
   12160:	vst1.64	{d16-d17}, [r5 :128]
   12164:	beq	11c38 <__assert_fail@plt+0x680>
   12168:	ldr	r0, [r7]
   1216c:	tst	r0, #1
   12170:	beq	12194 <__assert_fail@plt+0xbdc>
   12174:	movw	r0, #8640	; 0x21c0
   12178:	mov	r1, r6
   1217c:	movt	r0, #3
   12180:	mov	r2, r0
   12184:	bl	19bcc <__assert_fail@plt+0x8614>
   12188:	cmp	r0, #0
   1218c:	beq	121b4 <__assert_fail@plt+0xbfc>
   12190:	ldr	r0, [r7]
   12194:	tst	r0, #2
   12198:	beq	11c38 <__assert_fail@plt+0x680>
   1219c:	add	r0, r5, #8
   121a0:	mov	r1, r6
   121a4:	mov	r2, r0
   121a8:	bl	19bcc <__assert_fail@plt+0x8614>
   121ac:	cmp	r0, #0
   121b0:	bne	11c38 <__assert_fail@plt+0x680>
   121b4:	movw	r1, #64304	; 0xfb30
   121b8:	mov	r0, #0
   121bc:	mov	r2, #5
   121c0:	movt	r1, #1
   121c4:	bl	11318 <dcgettext@plt>
   121c8:	mov	r4, r0
   121cc:	mov	r0, r6
   121d0:	b	122d4 <__assert_fail@plt+0xd1c>
   121d4:	ldr	r0, [r7]
   121d8:	cmp	r0, #3
   121dc:	bne	121f4 <__assert_fail@plt+0xc3c>
   121e0:	movw	r0, #8656	; 0x21d0
   121e4:	mov	r1, #1
   121e8:	movt	r0, #3
   121ec:	strb	r1, [r0]
   121f0:	b	11c38 <__assert_fail@plt+0x680>
   121f4:	mvn	r0, #-1073741824	; 0xc0000000
   121f8:	str	r0, [r5, #12]
   121fc:	str	r0, [r5, #4]
   12200:	b	11c38 <__assert_fail@plt+0x680>
   12204:	cmn	r0, #3
   12208:	bne	12298 <__assert_fail@plt+0xce0>
   1220c:	movw	r0, #8504	; 0x2138
   12210:	movw	r2, #64402	; 0xfb92
   12214:	movw	r4, #64348	; 0xfb5c
   12218:	movw	r7, #64386	; 0xfb82
   1221c:	movw	r6, #64374	; 0xfb76
   12220:	movw	r5, #64359	; 0xfb67
   12224:	mov	r1, #0
   12228:	movt	r0, #3
   1222c:	movt	r2, #1
   12230:	movt	r4, #1
   12234:	movt	r7, #1
   12238:	movt	r6, #1
   1223c:	movt	r5, #1
   12240:	ldr	r3, [r0]
   12244:	movw	r0, #8612	; 0x21a4
   12248:	stm	sp, {r4, r5, r6, r7}
   1224c:	str	r2, [sp, #16]
   12250:	movw	r2, #64334	; 0xfb4e
   12254:	str	r1, [sp, #20]
   12258:	movw	r1, #64262	; 0xfb06
   1225c:	movt	r0, #3
   12260:	movt	r1, #1
   12264:	movt	r2, #1
   12268:	ldr	r0, [r0]
   1226c:	bl	1ca00 <__assert_fail@plt+0xb448>
   12270:	mov	r0, #0
   12274:	bl	11450 <exit@plt>
   12278:	movw	r0, #65063	; 0xfe27
   1227c:	movw	r1, #65088	; 0xfe40
   12280:	movw	r3, #65100	; 0xfe4c
   12284:	mov	r2, #147	; 0x93
   12288:	movt	r0, #1
   1228c:	movt	r1, #1
   12290:	movt	r3, #1
   12294:	bl	115b8 <__assert_fail@plt>
   12298:	cmn	r0, #2
   1229c:	bne	122a8 <__assert_fail@plt+0xcf0>
   122a0:	mov	r0, #0
   122a4:	bl	116b4 <__assert_fail@plt+0xfc>
   122a8:	mov	r0, #1
   122ac:	bl	116b4 <__assert_fail@plt+0xfc>
   122b0:	movw	r1, #64304	; 0xfb30
   122b4:	mov	r0, #0
   122b8:	mov	r2, #5
   122bc:	movt	r1, #1
   122c0:	bl	11318 <dcgettext@plt>
   122c4:	mov	r4, r0
   122c8:	movw	r0, #8616	; 0x21a8
   122cc:	movt	r0, #3
   122d0:	ldr	r0, [r0]
   122d4:	bl	1be1c <__assert_fail@plt+0xa864>
   122d8:	mov	r3, r0
   122dc:	mov	r0, #1
   122e0:	mov	r1, #0
   122e4:	mov	r2, r4
   122e8:	bl	113a8 <error@plt>
   122ec:	movw	r1, #64583	; 0xfc47
   122f0:	movt	r1, #1
   122f4:	b	12300 <__assert_fail@plt+0xd48>
   122f8:	movw	r1, #64414	; 0xfb9e
   122fc:	movt	r1, #1
   12300:	mov	r0, #0
   12304:	mov	r2, #5
   12308:	bl	11318 <dcgettext@plt>
   1230c:	mov	r2, r0
   12310:	mov	r0, #0
   12314:	mov	r1, #0
   12318:	bl	113a8 <error@plt>
   1231c:	mov	r0, #1
   12320:	bl	116b4 <__assert_fail@plt+0xfc>
   12324:	bl	1148c <__errno_location@plt>
   12328:	movw	r1, #64461	; 0xfbcd
   1232c:	ldr	r6, [r0]
   12330:	mov	r0, #0
   12334:	mov	r2, #5
   12338:	movt	r1, #1
   1233c:	bl	11318 <dcgettext@plt>
   12340:	mov	r5, r0
   12344:	movw	r0, #8632	; 0x21b8
   12348:	movt	r0, #3
   1234c:	ldr	r1, [r0]
   12350:	mov	r0, #4
   12354:	bl	1b8f4 <__assert_fail@plt+0xa33c>
   12358:	mov	r3, r0
   1235c:	mov	r0, #1
   12360:	mov	r1, r6
   12364:	mov	r2, r5
   12368:	bl	113a8 <error@plt>
   1236c:	mov	r0, #1
   12370:	b	116b4 <__assert_fail@plt+0xfc>
   12374:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12378:	add	fp, sp, #28
   1237c:	sub	sp, sp, #12
   12380:	mov	r4, r3
   12384:	mov	r6, r2
   12388:	mov	r5, r1
   1238c:	mov	sl, r0
   12390:	bl	11468 <strlen@plt>
   12394:	ldr	r8, [r5]
   12398:	cmp	r8, #0
   1239c:	beq	1245c <__assert_fail@plt+0xea4>
   123a0:	mov	r7, r0
   123a4:	mov	r0, #0
   123a8:	add	r9, r5, #4
   123ac:	mov	r5, #0
   123b0:	str	r6, [sp, #4]
   123b4:	str	r0, [sp]
   123b8:	mvn	r0, #0
   123bc:	str	r0, [sp, #8]
   123c0:	b	123dc <__assert_fail@plt+0xe24>
   123c4:	str	r5, [sp, #8]
   123c8:	ldr	r8, [r9, r5, lsl #2]
   123cc:	add	r6, r6, r4
   123d0:	add	r5, r5, #1
   123d4:	cmp	r8, #0
   123d8:	beq	12444 <__assert_fail@plt+0xe8c>
   123dc:	mov	r0, r8
   123e0:	mov	r1, sl
   123e4:	mov	r2, r7
   123e8:	bl	1157c <strncmp@plt>
   123ec:	cmp	r0, #0
   123f0:	bne	123c8 <__assert_fail@plt+0xe10>
   123f4:	mov	r0, r8
   123f8:	bl	11468 <strlen@plt>
   123fc:	cmp	r0, r7
   12400:	beq	12460 <__assert_fail@plt+0xea8>
   12404:	ldr	r0, [sp, #8]
   12408:	cmn	r0, #1
   1240c:	beq	123c4 <__assert_fail@plt+0xe0c>
   12410:	ldr	r0, [sp, #4]
   12414:	cmp	r0, #0
   12418:	beq	12438 <__assert_fail@plt+0xe80>
   1241c:	ldr	r1, [sp, #8]
   12420:	mov	r2, r4
   12424:	mla	r0, r1, r4, r0
   12428:	mov	r1, r6
   1242c:	bl	1145c <bcmp@plt>
   12430:	cmp	r0, #0
   12434:	beq	123c8 <__assert_fail@plt+0xe10>
   12438:	mov	r0, #1
   1243c:	str	r0, [sp]
   12440:	b	123c8 <__assert_fail@plt+0xe10>
   12444:	ldr	r0, [sp]
   12448:	tst	r0, #1
   1244c:	ldr	r0, [sp, #8]
   12450:	mvnne	r0, #1
   12454:	sub	sp, fp, #28
   12458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1245c:	mvn	r5, #0
   12460:	mov	r0, r5
   12464:	sub	sp, fp, #28
   12468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1246c:	push	{r4, r5, r6, r7, fp, lr}
   12470:	add	fp, sp, #16
   12474:	mov	r5, r0
   12478:	ldr	r0, [r1]
   1247c:	mvn	r4, #0
   12480:	cmp	r0, #0
   12484:	beq	124b0 <__assert_fail@plt+0xef8>
   12488:	add	r7, r1, #4
   1248c:	mov	r6, #0
   12490:	mov	r1, r5
   12494:	bl	112a0 <strcmp@plt>
   12498:	cmp	r0, #0
   1249c:	beq	124b8 <__assert_fail@plt+0xf00>
   124a0:	ldr	r0, [r7, r6, lsl #2]
   124a4:	add	r6, r6, #1
   124a8:	cmp	r0, #0
   124ac:	bne	12490 <__assert_fail@plt+0xed8>
   124b0:	mov	r0, r4
   124b4:	pop	{r4, r5, r6, r7, fp, pc}
   124b8:	mov	r0, r6
   124bc:	pop	{r4, r5, r6, r7, fp, pc}
   124c0:	push	{r4, r5, r6, sl, fp, lr}
   124c4:	add	fp, sp, #16
   124c8:	sub	sp, sp, #8
   124cc:	mov	r5, r0
   124d0:	movw	r0, #65431	; 0xff97
   124d4:	mov	r4, r1
   124d8:	movw	r1, #65458	; 0xffb2
   124dc:	cmn	r2, #1
   124e0:	mov	r2, #5
   124e4:	movt	r0, #1
   124e8:	movt	r1, #1
   124ec:	moveq	r1, r0
   124f0:	mov	r0, #0
   124f4:	bl	11318 <dcgettext@plt>
   124f8:	mov	r6, r0
   124fc:	mov	r0, #0
   12500:	mov	r1, #8
   12504:	mov	r2, r4
   12508:	bl	1b84c <__assert_fail@plt+0xa294>
   1250c:	mov	r4, r0
   12510:	mov	r0, #1
   12514:	mov	r1, r5
   12518:	bl	1be0c <__assert_fail@plt+0xa854>
   1251c:	str	r0, [sp]
   12520:	mov	r0, #0
   12524:	mov	r1, #0
   12528:	mov	r2, r6
   1252c:	mov	r3, r4
   12530:	bl	113a8 <error@plt>
   12534:	sub	sp, fp, #16
   12538:	pop	{r4, r5, r6, sl, fp, pc}
   1253c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12540:	add	fp, sp, #28
   12544:	sub	sp, sp, #4
   12548:	mov	sl, r1
   1254c:	movw	r1, #65487	; 0xffcf
   12550:	mov	r4, r2
   12554:	mov	r6, r0
   12558:	mov	r0, #0
   1255c:	mov	r2, #5
   12560:	mov	r8, #0
   12564:	movt	r1, #1
   12568:	bl	11318 <dcgettext@plt>
   1256c:	movw	r1, #8608	; 0x21a0
   12570:	movt	r1, #3
   12574:	ldr	r1, [r1]
   12578:	bl	11270 <fputs_unlocked@plt>
   1257c:	ldr	r7, [r6]
   12580:	cmp	r7, #0
   12584:	beq	12640 <__assert_fail@plt+0x1088>
   12588:	add	r0, r6, #4
   1258c:	mov	r9, #0
   12590:	mov	r6, #0
   12594:	str	r0, [sp]
   12598:	cmp	r9, #0
   1259c:	bne	125f4 <__assert_fail@plt+0x103c>
   125a0:	mov	r5, #0
   125a4:	movw	r0, #8608	; 0x21a0
   125a8:	movt	r0, #3
   125ac:	ldr	r6, [r0]
   125b0:	mov	r0, r7
   125b4:	bl	1be1c <__assert_fail@plt+0xa864>
   125b8:	movw	r2, #65508	; 0xffe4
   125bc:	mov	r3, r0
   125c0:	mov	r0, r6
   125c4:	mov	r1, #1
   125c8:	movt	r2, #1
   125cc:	bl	114d4 <__fprintf_chk@plt>
   125d0:	add	r6, sl, r5
   125d4:	ldr	r0, [sp]
   125d8:	add	r8, r8, r4
   125dc:	ldr	r7, [r0, -r9, lsl #2]
   125e0:	sub	r9, r9, #1
   125e4:	cmp	r7, #0
   125e8:	beq	12640 <__assert_fail@plt+0x1088>
   125ec:	cmp	r9, #0
   125f0:	beq	125a0 <__assert_fail@plt+0xfe8>
   125f4:	add	r1, sl, r8
   125f8:	mov	r0, r6
   125fc:	mov	r2, r4
   12600:	bl	1145c <bcmp@plt>
   12604:	cmp	r0, #0
   12608:	mov	r5, r8
   1260c:	bne	125a4 <__assert_fail@plt+0xfec>
   12610:	movw	r0, #8608	; 0x21a0
   12614:	movt	r0, #3
   12618:	ldr	r5, [r0]
   1261c:	mov	r0, r7
   12620:	bl	1be1c <__assert_fail@plt+0xa864>
   12624:	movw	r2, #65516	; 0xffec
   12628:	mov	r3, r0
   1262c:	mov	r0, r5
   12630:	mov	r1, #1
   12634:	movt	r2, #1
   12638:	bl	114d4 <__fprintf_chk@plt>
   1263c:	b	125d4 <__assert_fail@plt+0x101c>
   12640:	movw	r0, #8608	; 0x21a0
   12644:	movt	r0, #3
   12648:	ldr	r0, [r0]
   1264c:	ldr	r1, [r0, #20]
   12650:	ldr	r2, [r0, #24]
   12654:	cmp	r1, r2
   12658:	addcc	r2, r1, #1
   1265c:	strcc	r2, [r0, #20]
   12660:	movcc	r0, #10
   12664:	strbcc	r0, [r1]
   12668:	subcc	sp, fp, #28
   1266c:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12670:	mov	r1, #10
   12674:	sub	sp, fp, #28
   12678:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1267c:	b	114f8 <__overflow@plt>
   12680:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12684:	add	fp, sp, #28
   12688:	sub	sp, sp, #20
   1268c:	mov	r9, r0
   12690:	ldr	r0, [fp, #16]
   12694:	mov	r8, r3
   12698:	mov	sl, r2
   1269c:	mov	r7, r1
   126a0:	cmp	r0, #0
   126a4:	beq	12764 <__assert_fail@plt+0x11ac>
   126a8:	mov	r0, r7
   126ac:	str	r9, [sp, #8]
   126b0:	str	r8, [sp, #16]
   126b4:	bl	11468 <strlen@plt>
   126b8:	ldr	r9, [sl]
   126bc:	cmp	r9, #0
   126c0:	beq	127d4 <__assert_fail@plt+0x121c>
   126c4:	str	sl, [sp, #4]
   126c8:	add	r8, sl, #4
   126cc:	ldr	sl, [sp, #16]
   126d0:	mov	r4, r0
   126d4:	mov	r0, #0
   126d8:	mvn	r6, #0
   126dc:	mov	r5, #0
   126e0:	str	r0, [sp, #12]
   126e4:	b	12704 <__assert_fail@plt+0x114c>
   126e8:	mov	r6, r5
   126ec:	ldr	r9, [r8, r5, lsl #2]
   126f0:	ldr	r0, [fp, #8]
   126f4:	add	r5, r5, #1
   126f8:	add	sl, sl, r0
   126fc:	cmp	r9, #0
   12700:	beq	127a4 <__assert_fail@plt+0x11ec>
   12704:	mov	r0, r9
   12708:	mov	r1, r7
   1270c:	mov	r2, r4
   12710:	bl	1157c <strncmp@plt>
   12714:	cmp	r0, #0
   12718:	bne	126ec <__assert_fail@plt+0x1134>
   1271c:	mov	r0, r9
   12720:	bl	11468 <strlen@plt>
   12724:	cmp	r0, r4
   12728:	beq	12858 <__assert_fail@plt+0x12a0>
   1272c:	cmn	r6, #1
   12730:	beq	126e8 <__assert_fail@plt+0x1130>
   12734:	ldr	r0, [sp, #16]
   12738:	cmp	r0, #0
   1273c:	beq	12758 <__assert_fail@plt+0x11a0>
   12740:	ldr	r2, [fp, #8]
   12744:	mov	r1, sl
   12748:	mla	r0, r6, r2, r0
   1274c:	bl	1145c <bcmp@plt>
   12750:	cmp	r0, #0
   12754:	beq	126ec <__assert_fail@plt+0x1134>
   12758:	mov	r0, #1
   1275c:	str	r0, [sp, #12]
   12760:	b	126ec <__assert_fail@plt+0x1134>
   12764:	ldr	r0, [sl]
   12768:	movw	r4, #65431	; 0xff97
   1276c:	movt	r4, #1
   12770:	cmp	r0, #0
   12774:	beq	127e4 <__assert_fail@plt+0x122c>
   12778:	add	r5, sl, #4
   1277c:	mov	r6, #0
   12780:	mov	r1, r7
   12784:	bl	112a0 <strcmp@plt>
   12788:	cmp	r0, #0
   1278c:	beq	127bc <__assert_fail@plt+0x1204>
   12790:	ldr	r0, [r5, r6, lsl #2]
   12794:	add	r6, r6, #1
   12798:	cmp	r0, #0
   1279c:	bne	12780 <__assert_fail@plt+0x11c8>
   127a0:	b	127e4 <__assert_fail@plt+0x122c>
   127a4:	ldr	r0, [sp, #12]
   127a8:	ldr	r8, [sp, #16]
   127ac:	ldr	sl, [sp, #4]
   127b0:	ldr	r9, [sp, #8]
   127b4:	tst	r0, #1
   127b8:	bne	127c8 <__assert_fail@plt+0x1210>
   127bc:	cmn	r6, #1
   127c0:	bgt	1284c <__assert_fail@plt+0x1294>
   127c4:	beq	127dc <__assert_fail@plt+0x1224>
   127c8:	movw	r4, #65458	; 0xffb2
   127cc:	movt	r4, #1
   127d0:	b	127e4 <__assert_fail@plt+0x122c>
   127d4:	ldr	r8, [sp, #16]
   127d8:	ldr	r9, [sp, #8]
   127dc:	movw	r4, #65431	; 0xff97
   127e0:	movt	r4, #1
   127e4:	ldr	r6, [fp, #12]
   127e8:	mov	r0, #0
   127ec:	mov	r1, r4
   127f0:	mov	r2, #5
   127f4:	bl	11318 <dcgettext@plt>
   127f8:	mov	r4, r0
   127fc:	mov	r0, #0
   12800:	mov	r1, #8
   12804:	mov	r2, r7
   12808:	bl	1b84c <__assert_fail@plt+0xa294>
   1280c:	mov	r5, r0
   12810:	mov	r0, #1
   12814:	mov	r1, r9
   12818:	bl	1be0c <__assert_fail@plt+0xa854>
   1281c:	str	r0, [sp]
   12820:	mov	r0, #0
   12824:	mov	r1, #0
   12828:	mov	r2, r4
   1282c:	mov	r3, r5
   12830:	bl	113a8 <error@plt>
   12834:	ldr	r2, [fp, #8]
   12838:	mov	r0, sl
   1283c:	mov	r1, r8
   12840:	bl	1253c <__assert_fail@plt+0xf84>
   12844:	blx	r6
   12848:	mvn	r6, #0
   1284c:	mov	r0, r6
   12850:	sub	sp, fp, #28
   12854:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12858:	ldr	r8, [sp, #16]
   1285c:	ldr	sl, [sp, #4]
   12860:	ldr	r9, [sp, #8]
   12864:	mov	r6, r5
   12868:	cmn	r6, #1
   1286c:	bgt	1284c <__assert_fail@plt+0x1294>
   12870:	b	127c4 <__assert_fail@plt+0x120c>
   12874:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12878:	add	fp, sp, #24
   1287c:	ldr	r6, [r1]
   12880:	cmp	r6, #0
   12884:	beq	128e8 <__assert_fail@plt+0x1330>
   12888:	mov	r8, r1
   1288c:	mov	r7, r2
   12890:	mov	r1, r2
   12894:	mov	r2, r3
   12898:	mov	r4, r3
   1289c:	mov	r9, r0
   128a0:	bl	1145c <bcmp@plt>
   128a4:	cmp	r0, #0
   128a8:	beq	128e0 <__assert_fail@plt+0x1328>
   128ac:	add	r7, r7, r4
   128b0:	add	r5, r8, #4
   128b4:	ldr	r6, [r5]
   128b8:	cmp	r6, #0
   128bc:	beq	128e8 <__assert_fail@plt+0x1330>
   128c0:	mov	r0, r9
   128c4:	mov	r1, r7
   128c8:	mov	r2, r4
   128cc:	bl	1145c <bcmp@plt>
   128d0:	add	r7, r7, r4
   128d4:	add	r5, r5, #4
   128d8:	cmp	r0, #0
   128dc:	bne	128b4 <__assert_fail@plt+0x12fc>
   128e0:	mov	r0, r6
   128e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   128e8:	mov	r6, #0
   128ec:	mov	r0, r6
   128f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   128f4:	movw	r1, #8660	; 0x21d4
   128f8:	movt	r1, #3
   128fc:	str	r0, [r1]
   12900:	bx	lr
   12904:	movw	r1, #8664	; 0x21d8
   12908:	movt	r1, #3
   1290c:	strb	r0, [r1]
   12910:	bx	lr
   12914:	push	{r4, r5, r6, sl, fp, lr}
   12918:	add	fp, sp, #16
   1291c:	sub	sp, sp, #8
   12920:	movw	r0, #8612	; 0x21a4
   12924:	movt	r0, #3
   12928:	ldr	r0, [r0]
   1292c:	bl	1d28c <__assert_fail@plt+0xbcd4>
   12930:	cmp	r0, #0
   12934:	beq	1295c <__assert_fail@plt+0x13a4>
   12938:	movw	r0, #8664	; 0x21d8
   1293c:	movt	r0, #3
   12940:	ldrb	r0, [r0]
   12944:	cmp	r0, #0
   12948:	beq	1297c <__assert_fail@plt+0x13c4>
   1294c:	bl	1148c <__errno_location@plt>
   12950:	ldr	r0, [r0]
   12954:	cmp	r0, #32
   12958:	bne	1297c <__assert_fail@plt+0x13c4>
   1295c:	movw	r0, #8608	; 0x21a0
   12960:	movt	r0, #3
   12964:	ldr	r0, [r0]
   12968:	bl	1d28c <__assert_fail@plt+0xbcd4>
   1296c:	cmp	r0, #0
   12970:	subeq	sp, fp, #16
   12974:	popeq	{r4, r5, r6, sl, fp, pc}
   12978:	b	129ec <__assert_fail@plt+0x1434>
   1297c:	movw	r1, #65521	; 0xfff1
   12980:	mov	r0, #0
   12984:	mov	r2, #5
   12988:	movt	r1, #1
   1298c:	bl	11318 <dcgettext@plt>
   12990:	mov	r4, r0
   12994:	movw	r0, #8660	; 0x21d4
   12998:	movt	r0, #3
   1299c:	ldr	r6, [r0]
   129a0:	bl	1148c <__errno_location@plt>
   129a4:	ldr	r5, [r0]
   129a8:	cmp	r6, #0
   129ac:	bne	129c8 <__assert_fail@plt+0x1410>
   129b0:	movw	r2, #65518	; 0xffee
   129b4:	mov	r0, #0
   129b8:	mov	r1, r5
   129bc:	mov	r3, r4
   129c0:	movt	r2, #1
   129c4:	b	129e8 <__assert_fail@plt+0x1430>
   129c8:	mov	r0, r6
   129cc:	bl	1ba94 <__assert_fail@plt+0xa4dc>
   129d0:	movw	r2, #65533	; 0xfffd
   129d4:	mov	r3, r0
   129d8:	str	r4, [sp]
   129dc:	mov	r0, #0
   129e0:	mov	r1, r5
   129e4:	movt	r2, #1
   129e8:	bl	113a8 <error@plt>
   129ec:	movw	r0, #8512	; 0x2140
   129f0:	movt	r0, #3
   129f4:	ldr	r0, [r0]
   129f8:	bl	112e8 <_exit@plt>
   129fc:	push	{r4, r5, r6, r7, fp, lr}
   12a00:	add	fp, sp, #16
   12a04:	mov	r5, r0
   12a08:	mov	r0, r1
   12a0c:	mov	r1, r2
   12a10:	mov	r2, r3
   12a14:	bl	113b4 <open64@plt>
   12a18:	mov	r4, r0
   12a1c:	cmp	r0, r5
   12a20:	beq	12a5c <__assert_fail@plt+0x14a4>
   12a24:	cmp	r4, #0
   12a28:	bmi	12a5c <__assert_fail@plt+0x14a4>
   12a2c:	mov	r0, r4
   12a30:	mov	r1, r5
   12a34:	bl	11324 <dup2@plt>
   12a38:	mov	r5, r0
   12a3c:	bl	1148c <__errno_location@plt>
   12a40:	ldr	r7, [r0]
   12a44:	mov	r6, r0
   12a48:	mov	r0, r4
   12a4c:	bl	11594 <close@plt>
   12a50:	mov	r0, r5
   12a54:	str	r7, [r6]
   12a58:	pop	{r4, r5, r6, r7, fp, pc}
   12a5c:	mov	r0, r4
   12a60:	pop	{r4, r5, r6, r7, fp, pc}
   12a64:	push	{r4, r5, r6, r7, fp, lr}
   12a68:	add	fp, sp, #16
   12a6c:	mov	r4, r3
   12a70:	mov	r5, r2
   12a74:	mov	r6, r1
   12a78:	mov	r7, r0
   12a7c:	cmp	r0, #0
   12a80:	bmi	12adc <__assert_fail@plt+0x1524>
   12a84:	mov	r0, r7
   12a88:	mov	r1, r4
   12a8c:	bl	11540 <futimens@plt>
   12a90:	cmp	r5, #0
   12a94:	beq	12ae8 <__assert_fail@plt+0x1530>
   12a98:	cmp	r7, #0
   12a9c:	bmi	12abc <__assert_fail@plt+0x1504>
   12aa0:	cmn	r0, #1
   12aa4:	bne	12ae8 <__assert_fail@plt+0x1530>
   12aa8:	bl	1148c <__errno_location@plt>
   12aac:	ldr	r1, [r0]
   12ab0:	mvn	r0, #0
   12ab4:	cmp	r1, #38	; 0x26
   12ab8:	bne	12b00 <__assert_fail@plt+0x1548>
   12abc:	ldr	r3, [fp, #8]
   12ac0:	mov	r0, r6
   12ac4:	mov	r1, r5
   12ac8:	mov	r2, r4
   12acc:	bl	11294 <utimensat@plt>
   12ad0:	cmp	r0, #1
   12ad4:	beq	12af0 <__assert_fail@plt+0x1538>
   12ad8:	b	12b00 <__assert_fail@plt+0x1548>
   12adc:	mov	r0, #1
   12ae0:	cmp	r5, #0
   12ae4:	bne	12a98 <__assert_fail@plt+0x14e0>
   12ae8:	cmp	r0, #1
   12aec:	bne	12b00 <__assert_fail@plt+0x1548>
   12af0:	bl	1148c <__errno_location@plt>
   12af4:	mov	r1, #9
   12af8:	str	r1, [r0]
   12afc:	mvn	r0, #0
   12b00:	pop	{r4, r5, r6, r7, fp, pc}
   12b04:	mov	r1, r0
   12b08:	mov	r0, #0
   12b0c:	b	112dc <clock_gettime@plt>
   12b10:	push	{fp, lr}
   12b14:	mov	fp, sp
   12b18:	mov	r1, r0
   12b1c:	mov	r0, #0
   12b20:	bl	112dc <clock_gettime@plt>
   12b24:	pop	{fp, pc}
   12b28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b2c:	add	fp, sp, #28
   12b30:	sub	sp, sp, #4
   12b34:	vpush	{d8-d9}
   12b38:	sub	sp, sp, #408	; 0x198
   12b3c:	sub	sp, sp, #1024	; 0x400
   12b40:	mov	r8, r0
   12b44:	add	r0, r0, #48	; 0x30
   12b48:	sub	r1, fp, #72	; 0x48
   12b4c:	movw	lr, #64	; 0x40
   12b50:	vmov.i32	q4, #0	; 0x00000000
   12b54:	mvn	r4, #1
   12b58:	add	r3, sp, #248	; 0xf8
   12b5c:	sub	r9, fp, #112	; 0x70
   12b60:	mov	sl, #0
   12b64:	mov	r7, #0
   12b68:	str	r0, [sp, #92]	; 0x5c
   12b6c:	add	r0, r1, #1
   12b70:	movt	lr, #2
   12b74:	add	ip, r1, #19
   12b78:	str	r0, [sp, #84]	; 0x54
   12b7c:	add	r0, r8, #8
   12b80:	str	ip, [sp, #176]	; 0xb0
   12b84:	str	r0, [sp, #96]	; 0x60
   12b88:	add	r0, r8, #32
   12b8c:	str	r0, [sp, #100]	; 0x64
   12b90:	add	r0, r8, #40	; 0x28
   12b94:	str	r0, [sp, #88]	; 0x58
   12b98:	add	r0, r8, #56	; 0x38
   12b9c:	str	r0, [sp, #168]	; 0xa8
   12ba0:	add	r0, r8, #64	; 0x40
   12ba4:	str	r0, [sp, #164]	; 0xa4
   12ba8:	add	r0, r8, #72	; 0x48
   12bac:	str	r0, [sp, #144]	; 0x90
   12bb0:	add	r0, r8, #80	; 0x50
   12bb4:	str	r0, [sp, #140]	; 0x8c
   12bb8:	add	r0, r8, #88	; 0x58
   12bbc:	str	r0, [sp, #80]	; 0x50
   12bc0:	add	r0, r8, #96	; 0x60
   12bc4:	str	r0, [sp, #124]	; 0x7c
   12bc8:	add	r0, r8, #104	; 0x68
   12bcc:	str	r0, [sp, #120]	; 0x78
   12bd0:	add	r0, r8, #112	; 0x70
   12bd4:	str	r0, [sp, #116]	; 0x74
   12bd8:	add	r0, r8, #120	; 0x78
   12bdc:	str	r0, [sp, #112]	; 0x70
   12be0:	add	r0, r8, #128	; 0x80
   12be4:	str	r0, [sp, #108]	; 0x6c
   12be8:	add	r0, r8, #136	; 0x88
   12bec:	str	r0, [sp, #104]	; 0x68
   12bf0:	mov	r0, #0
   12bf4:	strh	r0, [fp, #-112]	; 0xffffff90
   12bf8:	mov	r0, #0
   12bfc:	str	r0, [sp, #128]	; 0x80
   12c00:	mov	r0, #0
   12c04:	str	r0, [sp, #132]	; 0x84
   12c08:	mov	r0, #0
   12c0c:	str	r0, [sp, #136]	; 0x88
   12c10:	mov	r0, #0
   12c14:	str	r0, [sp, #152]	; 0x98
   12c18:	mov	r0, #0
   12c1c:	str	r0, [sp, #156]	; 0x9c
   12c20:	mov	r0, #0
   12c24:	str	r0, [sp, #148]	; 0x94
   12c28:	cmp	sl, #12
   12c2c:	bne	12c64 <__assert_fail@plt+0x16ac>
   12c30:	b	1649c <__assert_fail@plt+0x4ee4>
   12c34:	movw	r1, #1006	; 0x3ee
   12c38:	ldr	r4, [sp, #184]	; 0xb8
   12c3c:	movt	r1, #2
   12c40:	add	r0, r1, r0
   12c44:	ldrsb	sl, [r0]
   12c48:	add	r7, r7, #1
   12c4c:	add	r0, r9, r7, lsl #1
   12c50:	cmp	r7, #18
   12c54:	strh	sl, [r0]
   12c58:	bgt	164ac <__assert_fail@plt+0x4ef4>
   12c5c:	cmp	sl, #12
   12c60:	beq	1649c <__assert_fail@plt+0x4ee4>
   12c64:	add	r0, lr, sl
   12c68:	str	r7, [sp, #192]	; 0xc0
   12c6c:	ldrsb	r5, [r0]
   12c70:	cmn	r5, #93	; 0x5d
   12c74:	beq	13b38 <__assert_fail@plt+0x2580>
   12c78:	cmn	r4, #2
   12c7c:	bne	13364 <__assert_fail@plt+0x1dac>
   12c80:	ldr	r1, [r8]
   12c84:	str	r3, [sp, #180]	; 0xb4
   12c88:	b	12c94 <__assert_fail@plt+0x16dc>
   12c8c:	add	r1, r1, #1
   12c90:	str	r1, [r8]
   12c94:	ldrb	r3, [r1]
   12c98:	sub	r0, r3, #9
   12c9c:	cmp	r0, #5
   12ca0:	bcc	12c8c <__assert_fail@plt+0x16d4>
   12ca4:	cmp	r3, #32
   12ca8:	beq	12c8c <__assert_fail@plt+0x16d4>
   12cac:	sub	r0, r3, #48	; 0x30
   12cb0:	cmp	r0, #10
   12cb4:	bcs	12cc8 <__assert_fail@plt+0x1710>
   12cb8:	cmp	r3, #45	; 0x2d
   12cbc:	cmpne	r3, #43	; 0x2b
   12cc0:	beq	12e28 <__assert_fail@plt+0x1870>
   12cc4:	b	12ec4 <__assert_fail@plt+0x190c>
   12cc8:	sub	r0, r3, #40	; 0x28
   12ccc:	cmp	r0, #82	; 0x52
   12cd0:	bhi	13ad4 <__assert_fail@plt+0x251c>
   12cd4:	add	r2, pc, #0
   12cd8:	ldr	pc, [r2, r0, lsl #2]
   12cdc:	andeq	r2, r1, r8, asr lr
   12ce0:	ldrdeq	r3, [r1], -r4
   12ce4:	ldrdeq	r3, [r1], -r4
   12ce8:	andeq	r2, r1, r8, lsr #28
   12cec:	ldrdeq	r3, [r1], -r4
   12cf0:	andeq	r2, r1, r8, lsr #28
   12cf4:	ldrdeq	r3, [r1], -r4
   12cf8:	ldrdeq	r3, [r1], -r4
   12cfc:	ldrdeq	r3, [r1], -r4
   12d00:	ldrdeq	r3, [r1], -r4
   12d04:	ldrdeq	r3, [r1], -r4
   12d08:	ldrdeq	r3, [r1], -r4
   12d0c:	ldrdeq	r3, [r1], -r4
   12d10:	ldrdeq	r3, [r1], -r4
   12d14:	ldrdeq	r3, [r1], -r4
   12d18:	ldrdeq	r3, [r1], -r4
   12d1c:	ldrdeq	r3, [r1], -r4
   12d20:	ldrdeq	r3, [r1], -r4
   12d24:	ldrdeq	r3, [r1], -r4
   12d28:	ldrdeq	r3, [r1], -r4
   12d2c:	ldrdeq	r3, [r1], -r4
   12d30:	ldrdeq	r3, [r1], -r4
   12d34:	ldrdeq	r3, [r1], -r4
   12d38:	ldrdeq	r3, [r1], -r4
   12d3c:	ldrdeq	r3, [r1], -r4
   12d40:	strheq	r3, [r1], -r8
   12d44:	strheq	r3, [r1], -r8
   12d48:	strheq	r3, [r1], -r8
   12d4c:	strheq	r3, [r1], -r8
   12d50:	strheq	r3, [r1], -r8
   12d54:	strheq	r3, [r1], -r8
   12d58:	strheq	r3, [r1], -r8
   12d5c:	strheq	r3, [r1], -r8
   12d60:	strheq	r3, [r1], -r8
   12d64:	strheq	r3, [r1], -r8
   12d68:	strheq	r3, [r1], -r8
   12d6c:	strheq	r3, [r1], -r8
   12d70:	strheq	r3, [r1], -r8
   12d74:	strheq	r3, [r1], -r8
   12d78:	strheq	r3, [r1], -r8
   12d7c:	strheq	r3, [r1], -r8
   12d80:	strheq	r3, [r1], -r8
   12d84:	strheq	r3, [r1], -r8
   12d88:	strheq	r3, [r1], -r8
   12d8c:	strheq	r3, [r1], -r8
   12d90:	strheq	r3, [r1], -r8
   12d94:	strheq	r3, [r1], -r8
   12d98:	strheq	r3, [r1], -r8
   12d9c:	strheq	r3, [r1], -r8
   12da0:	strheq	r3, [r1], -r8
   12da4:	strheq	r3, [r1], -r8
   12da8:	ldrdeq	r3, [r1], -r4
   12dac:	ldrdeq	r3, [r1], -r4
   12db0:	ldrdeq	r3, [r1], -r4
   12db4:	ldrdeq	r3, [r1], -r4
   12db8:	ldrdeq	r3, [r1], -r4
   12dbc:	ldrdeq	r3, [r1], -r4
   12dc0:	strheq	r3, [r1], -r8
   12dc4:	strheq	r3, [r1], -r8
   12dc8:	strheq	r3, [r1], -r8
   12dcc:	strheq	r3, [r1], -r8
   12dd0:	strheq	r3, [r1], -r8
   12dd4:	strheq	r3, [r1], -r8
   12dd8:	strheq	r3, [r1], -r8
   12ddc:	strheq	r3, [r1], -r8
   12de0:	strheq	r3, [r1], -r8
   12de4:	strheq	r3, [r1], -r8
   12de8:	strheq	r3, [r1], -r8
   12dec:	strheq	r3, [r1], -r8
   12df0:	strheq	r3, [r1], -r8
   12df4:	strheq	r3, [r1], -r8
   12df8:	strheq	r3, [r1], -r8
   12dfc:	strheq	r3, [r1], -r8
   12e00:	strheq	r3, [r1], -r8
   12e04:	strheq	r3, [r1], -r8
   12e08:	strheq	r3, [r1], -r8
   12e0c:	strheq	r3, [r1], -r8
   12e10:	strheq	r3, [r1], -r8
   12e14:	strheq	r3, [r1], -r8
   12e18:	strheq	r3, [r1], -r8
   12e1c:	strheq	r3, [r1], -r8
   12e20:	strheq	r3, [r1], -r8
   12e24:	strheq	r3, [r1], -r8
   12e28:	add	r1, r1, #1
   12e2c:	str	r1, [r8]
   12e30:	ldrb	r2, [r1]
   12e34:	sub	r0, r2, #9
   12e38:	cmp	r0, #5
   12e3c:	bcc	12e28 <__assert_fail@plt+0x1870>
   12e40:	cmp	r2, #32
   12e44:	beq	12e28 <__assert_fail@plt+0x1870>
   12e48:	sub	r0, r2, #48	; 0x30
   12e4c:	cmp	r0, #9
   12e50:	bhi	12c94 <__assert_fail@plt+0x16dc>
   12e54:	b	12eb0 <__assert_fail@plt+0x18f8>
   12e58:	mov	r0, #0
   12e5c:	b	12e6c <__assert_fail@plt+0x18b4>
   12e60:	sub	r0, r0, #1
   12e64:	cmp	r0, #0
   12e68:	beq	12c94 <__assert_fail@plt+0x16dc>
   12e6c:	mov	r2, r1
   12e70:	add	r1, r1, #1
   12e74:	str	r1, [r8]
   12e78:	ldrb	r2, [r2]
   12e7c:	cmp	r2, #40	; 0x28
   12e80:	beq	12e98 <__assert_fail@plt+0x18e0>
   12e84:	cmp	r2, #41	; 0x29
   12e88:	beq	12e60 <__assert_fail@plt+0x18a8>
   12e8c:	cmp	r2, #0
   12e90:	bne	12e64 <__assert_fail@plt+0x18ac>
   12e94:	b	12ea8 <__assert_fail@plt+0x18f0>
   12e98:	add	r0, r0, #1
   12e9c:	cmp	r0, #0
   12ea0:	bne	12e6c <__assert_fail@plt+0x18b4>
   12ea4:	b	12c94 <__assert_fail@plt+0x16dc>
   12ea8:	ldr	r3, [sp, #180]	; 0xb4
   12eac:	b	13aec <__assert_fail@plt+0x2534>
   12eb0:	cmp	r3, #45	; 0x2d
   12eb4:	mov	r0, #1
   12eb8:	str	r5, [sp, #244]	; 0xf4
   12ebc:	mvneq	r0, #0
   12ec0:	b	12ed0 <__assert_fail@plt+0x1918>
   12ec4:	mov	r0, #0
   12ec8:	mov	r2, r3
   12ecc:	str	r5, [sp, #244]	; 0xf4
   12ed0:	mov	r5, #0
   12ed4:	mov	r3, r1
   12ed8:	cmn	r5, #1
   12edc:	ble	12ef4 <__assert_fail@plt+0x193c>
   12ee0:	movw	r6, #52428	; 0xcccc
   12ee4:	movt	r6, #3276	; 0xccc
   12ee8:	cmp	r5, r6
   12eec:	ble	12f08 <__assert_fail@plt+0x1950>
   12ef0:	b	131f8 <__assert_fail@plt+0x1c40>
   12ef4:	beq	12f08 <__assert_fail@plt+0x1950>
   12ef8:	mov	r6, #-2147483648	; 0x80000000
   12efc:	sdiv	r6, r6, r5
   12f00:	cmp	r6, #10
   12f04:	blt	131f8 <__assert_fail@plt+0x1c40>
   12f08:	mvn	r6, #47	; 0x2f
   12f0c:	cmp	r0, #0
   12f10:	mov	r4, #63	; 0x3f
   12f14:	uxtab	r6, r6, r2
   12f18:	uxtb	r2, r2
   12f1c:	rsbmi	r6, r2, #48	; 0x30
   12f20:	add	r2, r5, r5, lsl #2
   12f24:	add	r5, r6, r2, lsl #1
   12f28:	cmp	r5, r2, lsl #1
   12f2c:	bvs	133e8 <__assert_fail@plt+0x1e30>
   12f30:	ldrb	r2, [r3, #1]!
   12f34:	sub	r6, r2, #48	; 0x30
   12f38:	cmp	r6, #10
   12f3c:	bcc	12ed8 <__assert_fail@plt+0x1920>
   12f40:	orr	r2, r2, #2
   12f44:	cmp	r2, #46	; 0x2e
   12f48:	bne	13200 <__assert_fail@plt+0x1c48>
   12f4c:	ldrb	r2, [r3, #1]
   12f50:	sub	r2, r2, #48	; 0x30
   12f54:	cmp	r2, #9
   12f58:	bhi	13200 <__assert_fail@plt+0x1c48>
   12f5c:	mov	r1, r3
   12f60:	add	r2, r2, r2, lsl #2
   12f64:	ldrb	r6, [r1, #2]!
   12f68:	sub	r4, r6, #48	; 0x30
   12f6c:	mov	r6, #2
   12f70:	cmp	r4, #10
   12f74:	movwcc	r6, #3
   12f78:	addcc	r1, r3, #3
   12f7c:	ldrb	r3, [r3, r6]
   12f80:	sub	r3, r3, #48	; 0x30
   12f84:	cmp	r3, #10
   12f88:	str	r3, [sp, #240]	; 0xf0
   12f8c:	addcc	r1, r1, #1
   12f90:	mov	r3, r1
   12f94:	ldrb	r6, [r3], #1
   12f98:	sub	r7, r6, #48	; 0x30
   12f9c:	cmp	r7, #10
   12fa0:	str	r7, [sp, #236]	; 0xec
   12fa4:	movcs	r3, r1
   12fa8:	mov	r1, r3
   12fac:	ldrb	r6, [r1], #1
   12fb0:	sub	r7, r6, #48	; 0x30
   12fb4:	cmp	r7, #10
   12fb8:	movcs	r1, r3
   12fbc:	mov	r3, r1
   12fc0:	ldrb	r6, [r3], #1
   12fc4:	sub	r9, r6, #48	; 0x30
   12fc8:	cmp	r9, #10
   12fcc:	movcs	r3, r1
   12fd0:	mov	r1, r3
   12fd4:	ldrb	r6, [r1], #1
   12fd8:	sub	lr, r6, #48	; 0x30
   12fdc:	cmp	lr, #10
   12fe0:	movcs	r1, r3
   12fe4:	mov	r6, r1
   12fe8:	ldrb	r3, [r6], #1
   12fec:	sub	ip, r3, #48	; 0x30
   12ff0:	cmp	ip, #10
   12ff4:	movcs	r6, r1
   12ff8:	mov	r1, r6
   12ffc:	ldrb	r3, [r1], #1
   13000:	sub	r3, r3, #48	; 0x30
   13004:	cmp	r3, #10
   13008:	movcs	r1, r6
   1300c:	cmp	r4, #10
   13010:	lsl	r6, r2, #1
   13014:	addcc	r6, r4, r2, lsl #1
   13018:	ldr	r4, [sp, #240]	; 0xf0
   1301c:	add	r2, r6, r6, lsl #2
   13020:	cmp	r4, #10
   13024:	lsl	r6, r2, #1
   13028:	addcc	r6, r4, r2, lsl #1
   1302c:	ldr	r4, [sp, #236]	; 0xec
   13030:	add	r2, r6, r6, lsl #2
   13034:	cmp	r4, #10
   13038:	lsl	r6, r2, #1
   1303c:	addcc	r6, r4, r2, lsl #1
   13040:	cmp	r7, #10
   13044:	add	r2, r6, r6, lsl #2
   13048:	lsl	r6, r2, #1
   1304c:	addcc	r6, r7, r2, lsl #1
   13050:	cmp	r9, #10
   13054:	add	r2, r6, r6, lsl #2
   13058:	lsl	r6, r2, #1
   1305c:	addcc	r6, r9, r2, lsl #1
   13060:	cmp	lr, #10
   13064:	add	r2, r6, r6, lsl #2
   13068:	lsl	r6, r2, #1
   1306c:	addcc	r6, lr, r2, lsl #1
   13070:	cmp	ip, #10
   13074:	add	r2, r6, r6, lsl #2
   13078:	lsl	r6, r2, #1
   1307c:	addcc	r6, ip, r2, lsl #1
   13080:	cmp	r3, #10
   13084:	add	r6, r6, r6, lsl #2
   13088:	lsl	r2, r6, #1
   1308c:	addcc	r2, r3, r6, lsl #1
   13090:	cmn	r0, #1
   13094:	ble	13250 <__assert_fail@plt+0x1c98>
   13098:	ldr	ip, [sp, #176]	; 0xb0
   1309c:	ldr	r7, [sp, #192]	; 0xc0
   130a0:	movw	lr, #64	; 0x40
   130a4:	sub	r4, fp, #112	; 0x70
   130a8:	mov	r9, r4
   130ac:	movt	lr, #2
   130b0:	mov	r4, #63	; 0x3f
   130b4:	b	13384 <__assert_fail@plt+0x1dcc>
   130b8:	sub	r0, fp, #72	; 0x48
   130bc:	str	r5, [sp, #244]	; 0xf4
   130c0:	mov	r5, r0
   130c4:	cmp	r5, ip
   130c8:	bcs	130d8 <__assert_fail@plt+0x1b20>
   130cc:	strb	r3, [r5], #1
   130d0:	ldr	r2, [r8]
   130d4:	b	130dc <__assert_fail@plt+0x1b24>
   130d8:	mov	r2, r1
   130dc:	add	r1, r2, #1
   130e0:	str	r1, [r8]
   130e4:	ldrb	r3, [r2, #1]
   130e8:	mov	r2, #1
   130ec:	sub	r6, r3, #65	; 0x41
   130f0:	cmp	r6, #26
   130f4:	subcs	r6, r3, #97	; 0x61
   130f8:	cmpcs	r6, #26
   130fc:	movcs	r2, #0
   13100:	cmp	r3, #46	; 0x2e
   13104:	beq	130c4 <__assert_fail@plt+0x1b0c>
   13108:	cmp	r2, #0
   1310c:	bne	130c4 <__assert_fail@plt+0x1b0c>
   13110:	mov	r1, #0
   13114:	mov	r6, r9
   13118:	mvn	r3, #96	; 0x60
   1311c:	strb	r1, [r5]
   13120:	ldrb	r7, [fp, #-72]	; 0xffffffb8
   13124:	cmp	r7, #0
   13128:	beq	13150 <__assert_fail@plt+0x1b98>
   1312c:	ldr	r1, [sp, #84]	; 0x54
   13130:	uxtab	r2, r3, r7
   13134:	cmp	r2, #26
   13138:	subcc	r7, r7, #32
   1313c:	strb	r7, [r1, #-1]
   13140:	ldrb	r7, [r1]
   13144:	add	r1, r1, #1
   13148:	cmp	r7, #0
   1314c:	bne	13130 <__assert_fail@plt+0x1b78>
   13150:	movw	r1, #3389	; 0xd3d
   13154:	mov	r2, #3
   13158:	movt	r1, #2
   1315c:	bl	1145c <bcmp@plt>
   13160:	movw	r9, #1216	; 0x4c0
   13164:	cmp	r0, #0
   13168:	movt	r9, #2
   1316c:	beq	13324 <__assert_fail@plt+0x1d6c>
   13170:	movw	r1, #3392	; 0xd40
   13174:	sub	r4, fp, #72	; 0x48
   13178:	mov	r2, #5
   1317c:	movt	r1, #2
   13180:	mov	r0, r4
   13184:	bl	1145c <bcmp@plt>
   13188:	cmp	r0, #0
   1318c:	beq	13230 <__assert_fail@plt+0x1c78>
   13190:	movw	r1, #3397	; 0xd45
   13194:	mov	r0, r4
   13198:	mov	r2, #3
   1319c:	movt	r1, #2
   131a0:	bl	1145c <bcmp@plt>
   131a4:	cmp	r0, #0
   131a8:	beq	13240 <__assert_fail@plt+0x1c88>
   131ac:	movw	r1, #3400	; 0xd48
   131b0:	mov	r0, r4
   131b4:	mov	r2, #5
   131b8:	movt	r1, #2
   131bc:	bl	1145c <bcmp@plt>
   131c0:	cmp	r0, #0
   131c4:	beq	1329c <__assert_fail@plt+0x1ce4>
   131c8:	mov	r0, r4
   131cc:	bl	11468 <strlen@plt>
   131d0:	mov	r7, r0
   131d4:	cmp	r0, #3
   131d8:	beq	132ac <__assert_fail@plt+0x1cf4>
   131dc:	cmp	r7, #4
   131e0:	bne	132b4 <__assert_fail@plt+0x1cfc>
   131e4:	ldrb	r0, [fp, #-69]	; 0xffffffbb
   131e8:	sub	r0, r0, #46	; 0x2e
   131ec:	clz	r0, r0
   131f0:	lsr	r5, r0, #5
   131f4:	b	132b8 <__assert_fail@plt+0x1d00>
   131f8:	mov	r4, #63	; 0x3f
   131fc:	b	133e8 <__assert_fail@plt+0x1e30>
   13200:	sub	r1, r3, r1
   13204:	cmp	r0, #0
   13208:	lsr	r0, r0, #31
   1320c:	movw	r4, #274	; 0x112
   13210:	str	r3, [r8]
   13214:	str	r5, [sp, #128]	; 0x80
   13218:	str	r1, [sp, #136]	; 0x88
   1321c:	asr	r1, r5, #31
   13220:	movweq	r4, #275	; 0x113
   13224:	str	r0, [sp, #156]	; 0x9c
   13228:	str	r1, [sp, #132]	; 0x84
   1322c:	b	133e8 <__assert_fail@plt+0x1e30>
   13230:	movw	r0, #1216	; 0x4c0
   13234:	movt	r0, #2
   13238:	add	r9, r0, #12
   1323c:	b	13324 <__assert_fail@plt+0x1d6c>
   13240:	movw	r0, #1216	; 0x4c0
   13244:	movt	r0, #2
   13248:	add	r9, r0, #24
   1324c:	b	13324 <__assert_fail@plt+0x1d6c>
   13250:	ldrb	r3, [r1]
   13254:	ldr	ip, [sp, #176]	; 0xb0
   13258:	ldr	r7, [sp, #192]	; 0xc0
   1325c:	movw	lr, #64	; 0x40
   13260:	sub	r4, fp, #112	; 0x70
   13264:	movt	lr, #2
   13268:	mov	r9, r4
   1326c:	mov	r4, #63	; 0x3f
   13270:	sub	r6, r3, #48	; 0x30
   13274:	cmp	r6, #9
   13278:	bhi	13384 <__assert_fail@plt+0x1dcc>
   1327c:	uxtb	r3, r3
   13280:	cmp	r3, #48	; 0x30
   13284:	bne	13380 <__assert_fail@plt+0x1dc8>
   13288:	ldrb	r3, [r1, #1]!
   1328c:	sub	r6, r3, #48	; 0x30
   13290:	cmp	r6, #10
   13294:	bcc	1327c <__assert_fail@plt+0x1cc4>
   13298:	b	13384 <__assert_fail@plt+0x1dcc>
   1329c:	movw	r0, #1216	; 0x4c0
   132a0:	movt	r0, #2
   132a4:	add	r9, r0, #36	; 0x24
   132a8:	b	13324 <__assert_fail@plt+0x1d6c>
   132ac:	mov	r5, #1
   132b0:	b	132b8 <__assert_fail@plt+0x1d00>
   132b4:	mov	r5, #0
   132b8:	movw	r1, #3405	; 0xd4d
   132bc:	movw	r9, #1276	; 0x4fc
   132c0:	sub	r2, fp, #72	; 0x48
   132c4:	movt	r1, #2
   132c8:	movt	r9, #2
   132cc:	b	132ec <__assert_fail@plt+0x1d34>
   132d0:	bl	112a0 <strcmp@plt>
   132d4:	cmp	r0, #0
   132d8:	beq	13324 <__assert_fail@plt+0x1d6c>
   132dc:	ldr	r1, [r9, #12]!
   132e0:	sub	r2, fp, #72	; 0x48
   132e4:	cmp	r1, #0
   132e8:	beq	1330c <__assert_fail@plt+0x1d54>
   132ec:	mov	r0, r2
   132f0:	cmp	r5, #0
   132f4:	beq	132d0 <__assert_fail@plt+0x1d18>
   132f8:	mov	r2, #3
   132fc:	bl	1157c <strncmp@plt>
   13300:	cmp	r0, #0
   13304:	bne	132dc <__assert_fail@plt+0x1d24>
   13308:	b	13324 <__assert_fail@plt+0x1d6c>
   1330c:	mov	r0, r8
   13310:	mov	r1, r2
   13314:	bl	19d38 <__assert_fail@plt+0x8780>
   13318:	mov	r9, r0
   1331c:	cmp	r0, #0
   13320:	beq	13400 <__assert_fail@plt+0x1e48>
   13324:	ldr	r1, [r9, #8]
   13328:	ldr	r5, [r9, #4]
   1332c:	asr	r0, r1, #31
   13330:	str	r1, [sp, #156]	; 0x9c
   13334:	str	r0, [sp, #152]	; 0x98
   13338:	mov	r0, r1
   1333c:	lsr	r0, r1, #8
   13340:	str	r0, [sp, #148]	; 0x94
   13344:	mov	r4, r5
   13348:	ldr	ip, [sp, #176]	; 0xb0
   1334c:	ldr	r3, [sp, #180]	; 0xb4
   13350:	ldr	r7, [sp, #192]	; 0xc0
   13354:	ldr	r5, [sp, #244]	; 0xf4
   13358:	movw	lr, #64	; 0x40
   1335c:	mov	r9, r6
   13360:	movt	lr, #2
   13364:	cmp	r4, #1
   13368:	blt	13aec <__assert_fail@plt+0x2534>
   1336c:	lsr	r1, r4, #1
   13370:	mov	r0, #2
   13374:	cmp	r1, #138	; 0x8a
   13378:	bls	133f0 <__assert_fail@plt+0x1e38>
   1337c:	b	13af4 <__assert_fail@plt+0x253c>
   13380:	add	r2, r2, #1
   13384:	sub	r1, r1, #1
   13388:	ldrb	r3, [r1, #1]!
   1338c:	sub	r3, r3, #48	; 0x30
   13390:	cmp	r3, #10
   13394:	bcc	13388 <__assert_fail@plt+0x1dd0>
   13398:	cmn	r0, #1
   1339c:	bgt	133c4 <__assert_fail@plt+0x1e0c>
   133a0:	cmp	r2, #0
   133a4:	beq	133c4 <__assert_fail@plt+0x1e0c>
   133a8:	sub	r3, r5, #1
   133ac:	cmp	r3, r5
   133b0:	bvs	133e8 <__assert_fail@plt+0x1e30>
   133b4:	movw	r5, #51712	; 0xca00
   133b8:	movt	r5, #15258	; 0x3b9a
   133bc:	sub	r2, r5, r2
   133c0:	mov	r5, r3
   133c4:	str	r2, [sp, #152]	; 0x98
   133c8:	cmp	r0, #0
   133cc:	mov	r0, r5
   133d0:	lsr	r0, r5, #8
   133d4:	mov	r4, #276	; 0x114
   133d8:	str	r1, [r8]
   133dc:	str	r5, [sp, #156]	; 0x9c
   133e0:	movweq	r4, #277	; 0x115
   133e4:	str	r0, [sp, #148]	; 0x94
   133e8:	ldr	r3, [sp, #180]	; 0xb4
   133ec:	ldr	r5, [sp, #244]	; 0xf4
   133f0:	movw	r0, #178	; 0xb2
   133f4:	movt	r0, #2
   133f8:	ldrb	r0, [r0, r4]
   133fc:	b	13af4 <__assert_fail@plt+0x253c>
   13400:	movw	r1, #3236	; 0xca4
   13404:	sub	r0, fp, #72	; 0x48
   13408:	mov	r2, #4
   1340c:	movt	r1, #2
   13410:	bl	1145c <bcmp@plt>
   13414:	movw	r9, #1576	; 0x628
   13418:	cmp	r0, #0
   1341c:	movt	r9, #2
   13420:	beq	13324 <__assert_fail@plt+0x1d6c>
   13424:	movw	r1, #3769	; 0xeb9
   13428:	sub	r0, fp, #72	; 0x48
   1342c:	mov	r2, #5
   13430:	movt	r1, #2
   13434:	bl	1145c <bcmp@plt>
   13438:	movw	r9, #1588	; 0x634
   1343c:	cmp	r0, #0
   13440:	movt	r9, #2
   13444:	beq	13324 <__assert_fail@plt+0x1d6c>
   13448:	movw	r1, #3774	; 0xebe
   1344c:	sub	r4, fp, #72	; 0x48
   13450:	mov	r2, #6
   13454:	movt	r1, #2
   13458:	mov	r0, r4
   1345c:	bl	1145c <bcmp@plt>
   13460:	movw	r5, #1588	; 0x634
   13464:	cmp	r0, #0
   13468:	movt	r5, #2
   1346c:	add	r9, r5, #12
   13470:	beq	13324 <__assert_fail@plt+0x1d6c>
   13474:	movw	r1, #3780	; 0xec4
   13478:	mov	r0, r4
   1347c:	mov	r2, #10
   13480:	str	r9, [sp, #240]	; 0xf0
   13484:	movt	r1, #2
   13488:	bl	1145c <bcmp@plt>
   1348c:	add	r9, r5, #24
   13490:	cmp	r0, #0
   13494:	beq	13324 <__assert_fail@plt+0x1d6c>
   13498:	movw	r1, #3790	; 0xece
   1349c:	mov	r0, r4
   134a0:	mov	r2, #5
   134a4:	str	r9, [sp, #236]	; 0xec
   134a8:	movt	r1, #2
   134ac:	bl	1145c <bcmp@plt>
   134b0:	add	r9, r5, #36	; 0x24
   134b4:	cmp	r0, #0
   134b8:	beq	13324 <__assert_fail@plt+0x1d6c>
   134bc:	movw	r1, #3563	; 0xdeb
   134c0:	mov	r0, r4
   134c4:	mov	r2, #4
   134c8:	str	r9, [sp, #232]	; 0xe8
   134cc:	movt	r1, #2
   134d0:	bl	1145c <bcmp@plt>
   134d4:	add	r9, r5, #48	; 0x30
   134d8:	cmp	r0, #0
   134dc:	beq	13324 <__assert_fail@plt+0x1d6c>
   134e0:	movw	r1, #3795	; 0xed3
   134e4:	mov	r0, r4
   134e8:	mov	r2, #5
   134ec:	str	r9, [sp, #228]	; 0xe4
   134f0:	movt	r1, #2
   134f4:	bl	1145c <bcmp@plt>
   134f8:	add	r9, r5, #60	; 0x3c
   134fc:	cmp	r0, #0
   13500:	beq	13324 <__assert_fail@plt+0x1d6c>
   13504:	movw	r1, #3800	; 0xed8
   13508:	mov	r0, r4
   1350c:	mov	r2, #7
   13510:	str	r9, [sp, #224]	; 0xe0
   13514:	movt	r1, #2
   13518:	bl	1145c <bcmp@plt>
   1351c:	add	r9, r5, #72	; 0x48
   13520:	cmp	r0, #0
   13524:	beq	13324 <__assert_fail@plt+0x1d6c>
   13528:	movw	r1, #3807	; 0xedf
   1352c:	mov	r0, r4
   13530:	mov	r2, #4
   13534:	str	r9, [sp, #220]	; 0xdc
   13538:	movt	r1, #2
   1353c:	bl	1145c <bcmp@plt>
   13540:	add	r9, r5, #84	; 0x54
   13544:	cmp	r0, #0
   13548:	beq	13324 <__assert_fail@plt+0x1d6c>
   1354c:	movw	r1, #3811	; 0xee3
   13550:	mov	r0, r4
   13554:	mov	r2, #7
   13558:	str	r9, [sp, #216]	; 0xd8
   1355c:	movt	r1, #2
   13560:	bl	1145c <bcmp@plt>
   13564:	add	r9, r5, #96	; 0x60
   13568:	cmp	r0, #0
   1356c:	beq	13324 <__assert_fail@plt+0x1d6c>
   13570:	movw	r1, #3818	; 0xeea
   13574:	sub	r0, fp, #72	; 0x48
   13578:	mov	r2, #4
   1357c:	str	r9, [sp, #212]	; 0xd4
   13580:	movt	r1, #2
   13584:	bl	1145c <bcmp@plt>
   13588:	add	r4, r5, #108	; 0x6c
   1358c:	cmp	r0, #0
   13590:	beq	16144 <__assert_fail@plt+0x4b8c>
   13594:	sub	r5, r7, #1
   13598:	sub	r0, fp, #72	; 0x48
   1359c:	ldrb	r0, [r0, r5]
   135a0:	cmp	r0, #83	; 0x53
   135a4:	bne	13700 <__assert_fail@plt+0x2148>
   135a8:	sub	r0, fp, #72	; 0x48
   135ac:	mov	r1, #0
   135b0:	mov	r2, #5
   135b4:	strb	r1, [r0, r5]
   135b8:	movw	r1, #3769	; 0xeb9
   135bc:	movt	r1, #2
   135c0:	bl	1145c <bcmp@plt>
   135c4:	movw	r9, #1588	; 0x634
   135c8:	cmp	r0, #0
   135cc:	movt	r9, #2
   135d0:	beq	13324 <__assert_fail@plt+0x1d6c>
   135d4:	movw	r1, #3774	; 0xebe
   135d8:	sub	r0, fp, #72	; 0x48
   135dc:	mov	r2, #6
   135e0:	movt	r1, #2
   135e4:	bl	1145c <bcmp@plt>
   135e8:	ldr	r9, [sp, #240]	; 0xf0
   135ec:	cmp	r0, #0
   135f0:	beq	13324 <__assert_fail@plt+0x1d6c>
   135f4:	movw	r1, #3780	; 0xec4
   135f8:	sub	r0, fp, #72	; 0x48
   135fc:	mov	r2, #10
   13600:	movt	r1, #2
   13604:	bl	1145c <bcmp@plt>
   13608:	ldr	r9, [sp, #236]	; 0xec
   1360c:	cmp	r0, #0
   13610:	beq	13324 <__assert_fail@plt+0x1d6c>
   13614:	movw	r1, #3790	; 0xece
   13618:	sub	r0, fp, #72	; 0x48
   1361c:	mov	r2, #5
   13620:	movt	r1, #2
   13624:	bl	1145c <bcmp@plt>
   13628:	ldr	r9, [sp, #232]	; 0xe8
   1362c:	cmp	r0, #0
   13630:	beq	13324 <__assert_fail@plt+0x1d6c>
   13634:	movw	r1, #3563	; 0xdeb
   13638:	sub	r0, fp, #72	; 0x48
   1363c:	mov	r2, #4
   13640:	movt	r1, #2
   13644:	bl	1145c <bcmp@plt>
   13648:	ldr	r9, [sp, #228]	; 0xe4
   1364c:	cmp	r0, #0
   13650:	beq	13324 <__assert_fail@plt+0x1d6c>
   13654:	movw	r1, #3795	; 0xed3
   13658:	sub	r0, fp, #72	; 0x48
   1365c:	mov	r2, #5
   13660:	movt	r1, #2
   13664:	bl	1145c <bcmp@plt>
   13668:	ldr	r9, [sp, #224]	; 0xe0
   1366c:	cmp	r0, #0
   13670:	beq	13324 <__assert_fail@plt+0x1d6c>
   13674:	movw	r1, #3800	; 0xed8
   13678:	sub	r0, fp, #72	; 0x48
   1367c:	mov	r2, #7
   13680:	movt	r1, #2
   13684:	bl	1145c <bcmp@plt>
   13688:	ldr	r9, [sp, #220]	; 0xdc
   1368c:	cmp	r0, #0
   13690:	beq	13324 <__assert_fail@plt+0x1d6c>
   13694:	movw	r1, #3807	; 0xedf
   13698:	sub	r0, fp, #72	; 0x48
   1369c:	mov	r2, #4
   136a0:	movt	r1, #2
   136a4:	bl	1145c <bcmp@plt>
   136a8:	ldr	r9, [sp, #216]	; 0xd8
   136ac:	cmp	r0, #0
   136b0:	beq	13324 <__assert_fail@plt+0x1d6c>
   136b4:	movw	r1, #3811	; 0xee3
   136b8:	sub	r0, fp, #72	; 0x48
   136bc:	mov	r2, #7
   136c0:	movt	r1, #2
   136c4:	bl	1145c <bcmp@plt>
   136c8:	ldr	r9, [sp, #212]	; 0xd4
   136cc:	cmp	r0, #0
   136d0:	beq	13324 <__assert_fail@plt+0x1d6c>
   136d4:	movw	r1, #3818	; 0xeea
   136d8:	sub	r0, fp, #72	; 0x48
   136dc:	mov	r2, #4
   136e0:	movt	r1, #2
   136e4:	bl	1145c <bcmp@plt>
   136e8:	cmp	r0, #0
   136ec:	mov	r9, r4
   136f0:	beq	13324 <__assert_fail@plt+0x1d6c>
   136f4:	sub	r0, fp, #72	; 0x48
   136f8:	mov	r1, #83	; 0x53
   136fc:	strb	r1, [r0, r5]
   13700:	movw	r1, #3822	; 0xeee
   13704:	sub	r0, fp, #72	; 0x48
   13708:	mov	r2, #9
   1370c:	movt	r1, #2
   13710:	bl	1145c <bcmp@plt>
   13714:	movw	r9, #1720	; 0x6b8
   13718:	cmp	r0, #0
   1371c:	movt	r9, #2
   13720:	beq	13324 <__assert_fail@plt+0x1d6c>
   13724:	movw	r1, #3831	; 0xef7
   13728:	sub	r0, fp, #72	; 0x48
   1372c:	mov	r2, #10
   13730:	movt	r1, #2
   13734:	bl	1145c <bcmp@plt>
   13738:	cmp	r0, #0
   1373c:	beq	1614c <__assert_fail@plt+0x4b94>
   13740:	movw	r1, #3841	; 0xf01
   13744:	sub	r0, fp, #72	; 0x48
   13748:	mov	r2, #6
   1374c:	movt	r1, #2
   13750:	bl	1145c <bcmp@plt>
   13754:	cmp	r0, #0
   13758:	beq	16158 <__assert_fail@plt+0x4ba0>
   1375c:	movw	r1, #3847	; 0xf07
   13760:	sub	r0, fp, #72	; 0x48
   13764:	mov	r2, #4
   13768:	movt	r1, #2
   1376c:	bl	1145c <bcmp@plt>
   13770:	cmp	r0, #0
   13774:	beq	16168 <__assert_fail@plt+0x4bb0>
   13778:	movw	r1, #3851	; 0xf0b
   1377c:	sub	r0, fp, #72	; 0x48
   13780:	mov	r2, #5
   13784:	movt	r1, #2
   13788:	bl	1145c <bcmp@plt>
   1378c:	cmp	r0, #0
   13790:	beq	16178 <__assert_fail@plt+0x4bc0>
   13794:	movw	r1, #3856	; 0xf10
   13798:	sub	r0, fp, #72	; 0x48
   1379c:	mov	r2, #5
   137a0:	movt	r1, #2
   137a4:	bl	1145c <bcmp@plt>
   137a8:	cmp	r0, #0
   137ac:	beq	16188 <__assert_fail@plt+0x4bd0>
   137b0:	movw	r1, #3861	; 0xf15
   137b4:	sub	r0, fp, #72	; 0x48
   137b8:	mov	r2, #5
   137bc:	movt	r1, #2
   137c0:	bl	1145c <bcmp@plt>
   137c4:	cmp	r0, #0
   137c8:	beq	16198 <__assert_fail@plt+0x4be0>
   137cc:	movw	r1, #3866	; 0xf1a
   137d0:	sub	r0, fp, #72	; 0x48
   137d4:	mov	r2, #6
   137d8:	movt	r1, #2
   137dc:	bl	1145c <bcmp@plt>
   137e0:	cmp	r0, #0
   137e4:	beq	161a8 <__assert_fail@plt+0x4bf0>
   137e8:	movw	r1, #3872	; 0xf20
   137ec:	sub	r0, fp, #72	; 0x48
   137f0:	mov	r2, #6
   137f4:	movt	r1, #2
   137f8:	bl	1145c <bcmp@plt>
   137fc:	cmp	r0, #0
   13800:	beq	161b8 <__assert_fail@plt+0x4c00>
   13804:	movw	r1, #3878	; 0xf26
   13808:	sub	r0, fp, #72	; 0x48
   1380c:	mov	r2, #7
   13810:	movt	r1, #2
   13814:	bl	1145c <bcmp@plt>
   13818:	cmp	r0, #0
   1381c:	beq	161c8 <__assert_fail@plt+0x4c10>
   13820:	movw	r1, #3885	; 0xf2d
   13824:	sub	r0, fp, #72	; 0x48
   13828:	mov	r2, #6
   1382c:	movt	r1, #2
   13830:	bl	1145c <bcmp@plt>
   13834:	cmp	r0, #0
   13838:	beq	161d8 <__assert_fail@plt+0x4c20>
   1383c:	movw	r1, #3891	; 0xf33
   13840:	sub	r0, fp, #72	; 0x48
   13844:	mov	r2, #6
   13848:	movt	r1, #2
   1384c:	bl	1145c <bcmp@plt>
   13850:	cmp	r0, #0
   13854:	beq	161e8 <__assert_fail@plt+0x4c30>
   13858:	movw	r1, #3897	; 0xf39
   1385c:	sub	r0, fp, #72	; 0x48
   13860:	mov	r2, #8
   13864:	movt	r1, #2
   13868:	bl	1145c <bcmp@plt>
   1386c:	cmp	r0, #0
   13870:	beq	161f8 <__assert_fail@plt+0x4c40>
   13874:	movw	r1, #3905	; 0xf41
   13878:	sub	r0, fp, #72	; 0x48
   1387c:	mov	r2, #7
   13880:	movt	r1, #2
   13884:	bl	1145c <bcmp@plt>
   13888:	cmp	r0, #0
   1388c:	beq	16208 <__assert_fail@plt+0x4c50>
   13890:	movw	r1, #3912	; 0xf48
   13894:	sub	r0, fp, #72	; 0x48
   13898:	mov	r2, #6
   1389c:	movt	r1, #2
   138a0:	bl	1145c <bcmp@plt>
   138a4:	cmp	r0, #0
   138a8:	beq	16218 <__assert_fail@plt+0x4c60>
   138ac:	movw	r1, #3918	; 0xf4e
   138b0:	sub	r0, fp, #72	; 0x48
   138b4:	mov	r2, #6
   138b8:	movt	r1, #2
   138bc:	bl	1145c <bcmp@plt>
   138c0:	cmp	r0, #0
   138c4:	beq	16228 <__assert_fail@plt+0x4c70>
   138c8:	movw	r1, #3924	; 0xf54
   138cc:	sub	r0, fp, #72	; 0x48
   138d0:	mov	r2, #9
   138d4:	movt	r1, #2
   138d8:	bl	1145c <bcmp@plt>
   138dc:	cmp	r0, #0
   138e0:	beq	16238 <__assert_fail@plt+0x4c80>
   138e4:	movw	r1, #3933	; 0xf5d
   138e8:	sub	r0, fp, #72	; 0x48
   138ec:	mov	r2, #8
   138f0:	movt	r1, #2
   138f4:	bl	1145c <bcmp@plt>
   138f8:	cmp	r0, #0
   138fc:	beq	16248 <__assert_fail@plt+0x4c90>
   13900:	movw	r1, #3941	; 0xf65
   13904:	sub	r0, fp, #72	; 0x48
   13908:	mov	r2, #4
   1390c:	movt	r1, #2
   13910:	bl	1145c <bcmp@plt>
   13914:	cmp	r0, #0
   13918:	beq	16258 <__assert_fail@plt+0x4ca0>
   1391c:	movw	r1, #3945	; 0xf69
   13920:	sub	r0, fp, #72	; 0x48
   13924:	mov	r2, #6
   13928:	movt	r1, #2
   1392c:	bl	1145c <bcmp@plt>
   13930:	cmp	r0, #0
   13934:	beq	16268 <__assert_fail@plt+0x4cb0>
   13938:	ldrb	r1, [fp, #-72]	; 0xffffffb8
   1393c:	cmp	r7, #1
   13940:	bne	16278 <__assert_fail@plt+0x4cc0>
   13944:	cmp	r1, #90	; 0x5a
   13948:	bhi	16280 <__assert_fail@plt+0x4cc8>
   1394c:	movw	r9, #1972	; 0x7b4
   13950:	add	r0, pc, #4
   13954:	movt	r9, #2
   13958:	ldr	pc, [r0, r1, lsl #2]
   1395c:	strdeq	r6, [r1], -ip
   13960:	andeq	r6, r1, r0, lsl #5
   13964:	andeq	r6, r1, r0, lsl #5
   13968:	andeq	r6, r1, r0, lsl #5
   1396c:	andeq	r6, r1, r0, lsl #5
   13970:	andeq	r6, r1, r0, lsl #5
   13974:	andeq	r6, r1, r0, lsl #5
   13978:	andeq	r6, r1, r0, lsl #5
   1397c:	andeq	r6, r1, r0, lsl #5
   13980:	andeq	r6, r1, r0, lsl #5
   13984:	andeq	r6, r1, r0, lsl #5
   13988:	andeq	r6, r1, r0, lsl #5
   1398c:	andeq	r6, r1, r0, lsl #5
   13990:	andeq	r6, r1, r0, lsl #5
   13994:	andeq	r6, r1, r0, lsl #5
   13998:	andeq	r6, r1, r0, lsl #5
   1399c:	andeq	r6, r1, r0, lsl #5
   139a0:	andeq	r6, r1, r0, lsl #5
   139a4:	andeq	r6, r1, r0, lsl #5
   139a8:	andeq	r6, r1, r0, lsl #5
   139ac:	andeq	r6, r1, r0, lsl #5
   139b0:	andeq	r6, r1, r0, lsl #5
   139b4:	andeq	r6, r1, r0, lsl #5
   139b8:	andeq	r6, r1, r0, lsl #5
   139bc:	andeq	r6, r1, r0, lsl #5
   139c0:	andeq	r6, r1, r0, lsl #5
   139c4:	andeq	r6, r1, r0, lsl #5
   139c8:	andeq	r6, r1, r0, lsl #5
   139cc:	andeq	r6, r1, r0, lsl #5
   139d0:	andeq	r6, r1, r0, lsl #5
   139d4:	andeq	r6, r1, r0, lsl #5
   139d8:	andeq	r6, r1, r0, lsl #5
   139dc:	andeq	r6, r1, r0, lsl #5
   139e0:	andeq	r6, r1, r0, lsl #5
   139e4:	andeq	r6, r1, r0, lsl #5
   139e8:	andeq	r6, r1, r0, lsl #5
   139ec:	andeq	r6, r1, r0, lsl #5
   139f0:	andeq	r6, r1, r0, lsl #5
   139f4:	andeq	r6, r1, r0, lsl #5
   139f8:	andeq	r6, r1, r0, lsl #5
   139fc:	andeq	r6, r1, r0, lsl #5
   13a00:	andeq	r6, r1, r0, lsl #5
   13a04:	andeq	r6, r1, r0, lsl #5
   13a08:	andeq	r6, r1, r0, lsl #5
   13a0c:	andeq	r6, r1, r0, lsl #5
   13a10:	andeq	r6, r1, r0, lsl #5
   13a14:	andeq	r6, r1, r0, lsl #5
   13a18:	andeq	r6, r1, r0, lsl #5
   13a1c:	andeq	r6, r1, r0, lsl #5
   13a20:	andeq	r6, r1, r0, lsl #5
   13a24:	andeq	r6, r1, r0, lsl #5
   13a28:	andeq	r6, r1, r0, lsl #5
   13a2c:	andeq	r6, r1, r0, lsl #5
   13a30:	andeq	r6, r1, r0, lsl #5
   13a34:	andeq	r6, r1, r0, lsl #5
   13a38:	andeq	r6, r1, r0, lsl #5
   13a3c:	andeq	r6, r1, r0, lsl #5
   13a40:	andeq	r6, r1, r0, lsl #5
   13a44:	andeq	r6, r1, r0, lsl #5
   13a48:	andeq	r6, r1, r0, lsl #5
   13a4c:	andeq	r6, r1, r0, lsl #5
   13a50:	andeq	r6, r1, r0, lsl #5
   13a54:	andeq	r6, r1, r0, lsl #5
   13a58:	andeq	r6, r1, r0, lsl #5
   13a5c:	andeq	r6, r1, r0, lsl #5
   13a60:	andeq	r3, r1, r4, lsr #6
   13a64:	andeq	r3, r1, r8, asr #21
   13a68:	andeq	r6, r1, ip, lsr #6
   13a6c:	andeq	r6, r1, ip, lsr r3
   13a70:	andeq	r6, r1, ip, asr #6
   13a74:	andeq	r6, r1, ip, asr r3
   13a78:	andeq	r6, r1, ip, ror #6
   13a7c:	andeq	r6, r1, ip, ror r3
   13a80:	andeq	r6, r1, ip, lsl #7
   13a84:	andeq	r6, r1, r0, lsl #5
   13a88:	muleq	r1, ip, r3
   13a8c:	andeq	r6, r1, ip, lsr #7
   13a90:			; <UNDEFINED> instruction: 0x000163bc
   13a94:	andeq	r6, r1, ip, asr #7
   13a98:	ldrdeq	r6, [r1], -ip
   13a9c:	andeq	r6, r1, ip, ror #7
   13aa0:	strdeq	r6, [r1], -ip
   13aa4:	andeq	r6, r1, ip, lsl #8
   13aa8:	andeq	r6, r1, ip, lsl r4
   13aac:	andeq	r6, r1, ip, lsr #8
   13ab0:	andeq	r6, r1, ip, lsr r4
   13ab4:	andeq	r6, r1, ip, asr #8
   13ab8:	andeq	r6, r1, ip, asr r4
   13abc:	andeq	r6, r1, ip, ror #8
   13ac0:	andeq	r6, r1, ip, ror r4
   13ac4:	andeq	r6, r1, ip, lsl #9
   13ac8:	movw	r0, #1972	; 0x7b4
   13acc:	movt	r0, #2
   13ad0:	b	13238 <__assert_fail@plt+0x1c80>
   13ad4:	add	r0, r1, #1
   13ad8:	ldr	r3, [sp, #180]	; 0xb4
   13adc:	str	r0, [r8]
   13ae0:	ldrb	r4, [r1]
   13ae4:	cmp	r4, #1
   13ae8:	bge	1336c <__assert_fail@plt+0x1db4>
   13aec:	mov	r0, #0
   13af0:	mov	r4, #0
   13af4:	add	r1, r0, r5
   13af8:	cmp	r1, #112	; 0x70
   13afc:	bhi	13b38 <__assert_fail@plt+0x2580>
   13b00:	movw	r2, #456	; 0x1c8
   13b04:	movt	r2, #2
   13b08:	add	r2, r2, r1
   13b0c:	ldrsb	r2, [r2]
   13b10:	cmp	r0, r2
   13b14:	bne	13b38 <__assert_fail@plt+0x2580>
   13b18:	movw	r0, #569	; 0x239
   13b1c:	movt	r0, #2
   13b20:	ldrb	sl, [r0, r1]
   13b24:	orr	r0, r1, #4
   13b28:	cmp	r0, #111	; 0x6f
   13b2c:	bne	14044 <__assert_fail@plt+0x2a8c>
   13b30:	rsb	r2, sl, #0
   13b34:	b	13b4c <__assert_fail@plt+0x2594>
   13b38:	movw	r0, #682	; 0x2aa
   13b3c:	movt	r0, #2
   13b40:	ldrb	r2, [r0, sl]
   13b44:	cmp	r2, #0
   13b48:	beq	164a4 <__assert_fail@plt+0x4eec>
   13b4c:	movw	r0, #796	; 0x31c
   13b50:	str	r4, [sp, #184]	; 0xb8
   13b54:	mov	r1, r3
   13b58:	movt	r0, #2
   13b5c:	ldrb	r4, [r0, r2]
   13b60:	rsb	r0, r4, #1
   13b64:	rsb	r0, r0, r0, lsl #3
   13b68:	ldr	r0, [r1, r0, lsl #3]!
   13b6c:	ldr	r5, [r1, #52]	; 0x34
   13b70:	str	r0, [sp, #244]	; 0xf4
   13b74:	ldr	r0, [r1, #44]	; 0x2c
   13b78:	str	r5, [sp, #188]	; 0xbc
   13b7c:	str	r0, [sp, #200]	; 0xc8
   13b80:	ldr	r0, [r1, #40]	; 0x28
   13b84:	str	r0, [sp, #208]	; 0xd0
   13b88:	ldr	r0, [r1, #36]	; 0x24
   13b8c:	str	r0, [sp, #204]	; 0xcc
   13b90:	ldr	r0, [r1, #4]
   13b94:	str	r0, [sp, #240]	; 0xf0
   13b98:	ldr	r0, [r1, #8]
   13b9c:	str	r0, [sp, #236]	; 0xec
   13ba0:	ldr	r0, [r1, #12]
   13ba4:	str	r0, [sp, #228]	; 0xe4
   13ba8:	ldr	r0, [r1, #16]
   13bac:	str	r0, [sp, #232]	; 0xe8
   13bb0:	ldr	r0, [r1, #20]
   13bb4:	str	r0, [sp, #224]	; 0xe0
   13bb8:	ldr	r0, [r1, #24]
   13bbc:	str	r0, [sp, #220]	; 0xdc
   13bc0:	ldr	r0, [r1, #28]
   13bc4:	str	r0, [sp, #216]	; 0xd8
   13bc8:	ldr	r0, [r1, #32]
   13bcc:	ldr	r1, [r1, #48]	; 0x30
   13bd0:	str	r0, [sp, #212]	; 0xd4
   13bd4:	sub	r0, r2, #4
   13bd8:	str	r1, [sp, #196]	; 0xc4
   13bdc:	cmp	r0, #87	; 0x57
   13be0:	bhi	16018 <__assert_fail@plt+0x4a60>
   13be4:	add	r1, pc, #20
   13be8:	add	r6, r3, #8
   13bec:	add	r9, r3, #16
   13bf0:	add	sl, r3, #24
   13bf4:	add	r7, r3, #32
   13bf8:	add	r5, r3, #40	; 0x28
   13bfc:	ldr	pc, [r1, r0, lsl #2]
   13c00:	andeq	r4, r1, r8, lsr #26
   13c04:	andeq	r6, r1, r8, lsl r0
   13c08:	andeq	r6, r1, r8, lsl r0
   13c0c:	andeq	r4, r1, r0, asr sp
   13c10:	ldrdeq	r4, [r1], -r8
   13c14:	andeq	r4, r1, ip, lsl #29
   13c18:	andeq	r4, r1, ip, lsr #29
   13c1c:			; <UNDEFINED> instruction: 0x00014cb8
   13c20:	andeq	r4, r1, r4, ror sp
   13c24:	andeq	r4, r1, ip, lsl #27
   13c28:	andeq	r4, r1, r0, ror pc
   13c2c:	andeq	r4, r1, r4, lsl #30
   13c30:	andeq	r6, r1, r8, lsl r0
   13c34:	andeq	r6, r1, r8, lsl r0
   13c38:	muleq	r1, r0, r7
   13c3c:	ldrdeq	r4, [r1], -r0
   13c40:	andeq	r4, r1, r4, lsl #23
   13c44:	andeq	r6, r1, r8, lsl r0
   13c48:	ldrdeq	r4, [r1], -r8
   13c4c:	muleq	r1, r8, sp
   13c50:	andeq	r4, r1, ip, lsr lr
   13c54:	andeq	r6, r1, r8, lsl r0
   13c58:	andeq	r6, r1, r8, lsl r0
   13c5c:	andeq	r4, r1, ip, ror #31
   13c60:			; <UNDEFINED> instruction: 0x00014fb4
   13c64:	andeq	r4, r1, ip, lsr #13
   13c68:	andeq	r4, r1, ip, asr #23
   13c6c:	andeq	r5, r1, r8, ror #1
   13c70:	andeq	r4, r1, r4, asr #13
   13c74:	andeq	r4, r1, r4, lsr r8
   13c78:	andeq	r4, r1, ip, lsl #14
   13c7c:	andeq	r4, r1, r8, lsl sp
   13c80:	andeq	r4, r1, r4, lsl #14
   13c84:	andeq	r5, r1, ip, lsr #5
   13c88:	andeq	r5, r1, r8, asr #5
   13c8c:	andeq	r4, r1, ip, lsr #16
   13c90:	strdeq	r4, [r1], -r0
   13c94:	andeq	r4, r1, r4, lsr #29
   13c98:	andeq	r4, r1, r0, lsr #24
   13c9c:	andeq	r5, r1, r4, lsl r3
   13ca0:			; <UNDEFINED> instruction: 0x000147bc
   13ca4:	andeq	r4, r1, r0, asr #31
   13ca8:	andeq	r5, r1, r4, ror #5
   13cac:	andeq	r4, r1, ip, ror r6
   13cb0:	andeq	r4, r1, r4, asr #29
   13cb4:	andeq	r6, r1, r8, lsl r0
   13cb8:	andeq	r4, r1, ip, lsl #12
   13cbc:			; <UNDEFINED> instruction: 0x000142bc
   13cc0:	andeq	r3, r1, r0, ror #26
   13cc4:	andeq	r3, r1, r0, ror #26
   13cc8:	andeq	r5, r1, r0, lsl #1
   13ccc:	andeq	r4, r1, r8, lsr #1
   13cd0:	ldrdeq	r4, [r1], -r8
   13cd4:	andeq	r4, r1, r4, ror #29
   13cd8:	strheq	r4, [r1], -r8
   13cdc:	andeq	r4, r1, ip, lsr #5
   13ce0:	andeq	r4, r1, ip, lsl #5
   13ce4:	andeq	r4, r1, ip, asr #2
   13ce8:	andeq	r4, r1, r8, lsl r1
   13cec:	andeq	r4, r1, r0, asr #30
   13cf0:	andeq	r4, r1, r8, lsr #2
   13cf4:	andeq	r5, r1, r0, lsl #5
   13cf8:	andeq	r5, r1, r8, asr #2
   13cfc:	andeq	r4, r1, r0, lsr #1
   13d00:			; <UNDEFINED> instruction: 0x000153bc
   13d04:	strdeq	r5, [r1], -r8
   13d08:	strheq	r4, [r1], -r0
   13d0c:	andeq	r4, r1, r0, asr #1
   13d10:	andeq	r4, r1, r0, asr #1
   13d14:	andeq	r5, r1, r0, ror r3
   13d18:	andeq	r6, r1, r8, lsl r0
   13d1c:	andeq	r4, r1, r8, lsr #1
   13d20:	strheq	r4, [r1], -r8
   13d24:	andeq	r4, r1, ip, asr #2
   13d28:	andeq	r4, r1, r8, lsr #2
   13d2c:	andeq	r4, r1, r0, lsr #1
   13d30:	strheq	r4, [r1], -r0
   13d34:	andeq	r4, r1, r8, lsl r1
   13d38:	andeq	r6, r1, r8, lsl r0
   13d3c:	andeq	r6, r1, r8, lsl r0
   13d40:	andeq	r6, r1, r8, lsl r0
   13d44:	andeq	r4, r1, r0, lsr r1
   13d48:	andeq	r6, r1, r8, lsl r0
   13d4c:	andeq	r4, r1, r0, lsr r1
   13d50:	andeq	r5, r1, r8, lsl #3
   13d54:	muleq	r1, r4, r1
   13d58:	muleq	r1, ip, r6
   13d5c:	andeq	r4, r1, r0, lsr pc
   13d60:	str	r4, [sp, #172]	; 0xac
   13d64:	ldm	r3, {r0, r4}
   13d68:	str	r3, [sp, #180]	; 0xb4
   13d6c:	ldr	r3, [r5, #8]
   13d70:	str	r2, [sp, #160]	; 0xa0
   13d74:	ldr	r2, [r7, #4]
   13d78:	str	r4, [sp, #68]	; 0x44
   13d7c:	str	r0, [sp, #36]	; 0x24
   13d80:	ldm	r6, {r0, r6}
   13d84:	str	r6, [sp, #64]	; 0x40
   13d88:	str	r2, [sp, #44]	; 0x2c
   13d8c:	str	r0, [sp, #60]	; 0x3c
   13d90:	ldm	r9, {r0, lr}
   13d94:	ldr	r9, [r7]
   13d98:	ldm	r5, {r1, r7}
   13d9c:	str	lr, [sp, #56]	; 0x38
   13da0:	str	r7, [sp, #28]
   13da4:	str	r0, [sp, #32]
   13da8:	ldm	sl, {r0, ip}
   13dac:	str	ip, [sp, #52]	; 0x34
   13db0:	str	r0, [sp, #48]	; 0x30
   13db4:	ldr	r0, [r8, #144]	; 0x90
   13db8:	str	r0, [sp, #76]	; 0x4c
   13dbc:	add	r0, r0, r3
   13dc0:	str	r0, [sp, #72]	; 0x48
   13dc4:	str	r0, [r8, #144]	; 0x90
   13dc8:	ldr	r0, [sp, #104]	; 0x68
   13dcc:	ldm	r0, {r3, r5}
   13dd0:	adds	r1, r3, r1
   13dd4:	adc	r3, r5, r7
   13dd8:	stm	r0, {r1, r3}
   13ddc:	ldr	r1, [sp, #108]	; 0x6c
   13de0:	ldm	r1, {r0, sl}
   13de4:	adds	r0, r0, r9
   13de8:	adc	r9, sl, r2
   13dec:	stm	r1, {r0, r9}
   13df0:	ldr	r1, [sp, #112]	; 0x70
   13df4:	ldr	r7, [sp, #48]	; 0x30
   13df8:	ldm	r1, {r0, r2}
   13dfc:	str	r2, [sp, #40]	; 0x28
   13e00:	adds	r0, r0, r7
   13e04:	adc	r2, r2, ip
   13e08:	str	r2, [sp, #24]
   13e0c:	stm	r1, {r0, r2}
   13e10:	ldr	r1, [sp, #116]	; 0x74
   13e14:	ldr	r7, [sp, #32]
   13e18:	ldm	r1, {r0, r2}
   13e1c:	str	r2, [sp, #48]	; 0x30
   13e20:	adds	r0, r0, r7
   13e24:	mov	r7, #0
   13e28:	adc	lr, r2, lr
   13e2c:	stm	r1, {r0, lr}
   13e30:	ldr	ip, [sp, #120]	; 0x78
   13e34:	ldr	r2, [sp, #60]	; 0x3c
   13e38:	ldrd	r0, [ip]
   13e3c:	adds	r0, r0, r2
   13e40:	str	r1, [sp, #32]
   13e44:	adc	r2, r1, r6
   13e48:	stm	ip, {r0, r2}
   13e4c:	ldr	ip, [sp, #124]	; 0x7c
   13e50:	ldr	r6, [sp, #36]	; 0x24
   13e54:	ldrd	r0, [ip]
   13e58:	adds	r0, r0, r6
   13e5c:	str	r1, [sp, #60]	; 0x3c
   13e60:	mov	r6, #0
   13e64:	adc	r4, r1, r4
   13e68:	cmn	r5, #1
   13e6c:	mov	r1, #0
   13e70:	stm	ip, {r0, r4}
   13e74:	mov	r0, #0
   13e78:	mov	ip, #0
   13e7c:	mov	r5, #0
   13e80:	movwgt	r1, #1
   13e84:	cmn	r3, #1
   13e88:	mov	r3, #0
   13e8c:	movwgt	r0, #1
   13e90:	str	r1, [sp, #36]	; 0x24
   13e94:	subs	r0, r1, r0
   13e98:	mov	r1, #0
   13e9c:	movwne	r0, #1
   13ea0:	str	r0, [sp, #20]
   13ea4:	ldr	r0, [sp, #28]
   13ea8:	cmn	r0, #1
   13eac:	mov	r0, #0
   13eb0:	movwgt	r0, #1
   13eb4:	cmn	sl, #1
   13eb8:	ldr	sl, [sp, #72]	; 0x48
   13ebc:	movwgt	r1, #1
   13ec0:	cmn	r9, #1
   13ec4:	str	r0, [sp, #28]
   13ec8:	mov	r0, #0
   13ecc:	movwgt	r0, #1
   13ed0:	str	r1, [sp, #16]
   13ed4:	subs	r0, r1, r0
   13ed8:	ldr	r1, [sp, #48]	; 0x30
   13edc:	movwne	r0, #1
   13ee0:	str	r0, [sp, #12]
   13ee4:	ldr	r0, [sp, #44]	; 0x2c
   13ee8:	cmn	r0, #1
   13eec:	mov	r0, #0
   13ef0:	movwgt	r0, #1
   13ef4:	str	r0, [sp, #44]	; 0x2c
   13ef8:	ldr	r0, [sp, #40]	; 0x28
   13efc:	cmn	r0, #1
   13f00:	ldr	r0, [sp, #24]
   13f04:	movwgt	ip, #1
   13f08:	cmn	r0, #1
   13f0c:	mov	r0, #0
   13f10:	movwgt	r0, #1
   13f14:	subs	r0, ip, r0
   13f18:	movwne	r0, #1
   13f1c:	str	r0, [sp, #40]	; 0x28
   13f20:	ldr	r0, [sp, #52]	; 0x34
   13f24:	cmn	r0, #1
   13f28:	mov	r0, #0
   13f2c:	movwgt	r0, #1
   13f30:	cmn	r1, #1
   13f34:	mov	r1, #0
   13f38:	movwgt	r7, #1
   13f3c:	cmn	lr, #1
   13f40:	mov	lr, #0
   13f44:	movwgt	r1, #1
   13f48:	subs	r1, r7, r1
   13f4c:	movwne	r1, #1
   13f50:	str	r1, [sp, #52]	; 0x34
   13f54:	ldr	r1, [sp, #56]	; 0x38
   13f58:	cmn	r1, #1
   13f5c:	ldr	r1, [sp, #32]
   13f60:	movwgt	lr, #1
   13f64:	cmn	r1, #1
   13f68:	ldr	r1, [sp, #64]	; 0x40
   13f6c:	movwgt	r5, #1
   13f70:	cmn	r2, #1
   13f74:	mov	r2, #0
   13f78:	movwgt	r2, #1
   13f7c:	subs	r2, r5, r2
   13f80:	movwne	r2, #1
   13f84:	cmn	r1, #1
   13f88:	ldr	r1, [sp, #60]	; 0x3c
   13f8c:	movwgt	r3, #1
   13f90:	cmn	r1, #1
   13f94:	ldr	r1, [sp, #68]	; 0x44
   13f98:	movwgt	r6, #1
   13f9c:	cmn	r4, #1
   13fa0:	mov	r4, #0
   13fa4:	movwgt	r4, #1
   13fa8:	subs	r9, r6, r4
   13fac:	ldr	r4, [sp, #76]	; 0x4c
   13fb0:	movwne	r9, #1
   13fb4:	cmn	r1, #1
   13fb8:	mov	r1, #0
   13fbc:	movwgt	r1, #1
   13fc0:	str	r1, [sp, #68]	; 0x44
   13fc4:	cmp	sl, r4
   13fc8:	bvs	164a4 <__assert_fail@plt+0x4eec>
   13fcc:	ldr	r4, [sp, #36]	; 0x24
   13fd0:	ldr	r1, [sp, #28]
   13fd4:	sub	r4, r4, r1
   13fd8:	ldr	r1, [sp, #20]
   13fdc:	clz	r4, r4
   13fe0:	lsr	r4, r4, #5
   13fe4:	ands	r4, r4, r1
   13fe8:	bne	164a4 <__assert_fail@plt+0x4eec>
   13fec:	ldr	r1, [sp, #16]
   13ff0:	ldr	r4, [sp, #44]	; 0x2c
   13ff4:	sub	r4, r1, r4
   13ff8:	ldr	r1, [sp, #12]
   13ffc:	clz	r4, r4
   14000:	lsr	r4, r4, #5
   14004:	ands	r4, r4, r1
   14008:	bne	164a4 <__assert_fail@plt+0x4eec>
   1400c:	ldr	r1, [sp, #40]	; 0x28
   14010:	sub	r0, ip, r0
   14014:	mov	sl, #1
   14018:	clz	r0, r0
   1401c:	lsr	r0, r0, #5
   14020:	ands	r0, r0, r1
   14024:	ldreq	r1, [sp, #52]	; 0x34
   14028:	subeq	r0, r7, lr
   1402c:	clzeq	r0, r0
   14030:	lsreq	r0, r0, #5
   14034:	andseq	r0, r0, r1
   14038:	bne	164b0 <__assert_fail@plt+0x4ef8>
   1403c:	sub	r0, r5, r3
   14040:	b	15c40 <__assert_fail@plt+0x4688>
   14044:	ldr	r2, [sp, #156]	; 0x9c
   14048:	ldr	r5, [sp, #148]	; 0x94
   1404c:	add	r0, r3, #56	; 0x38
   14050:	add	r1, r3, #64	; 0x40
   14054:	mvn	r4, #1
   14058:	uxtb	r2, r2
   1405c:	orr	r2, r2, r5, lsl #8
   14060:	ldr	r5, [sp, #152]	; 0x98
   14064:	stm	r0, {r2, r5}
   14068:	ldr	r5, [sp, #128]	; 0x80
   1406c:	ldr	r2, [sp, #132]	; 0x84
   14070:	str	r5, [r1]
   14074:	str	r2, [r1, #4]
   14078:	add	r1, r3, #76	; 0x4c
   1407c:	vst1.32	{d8-d9}, [r1]
   14080:	ldr	r1, [sp, #136]	; 0x88
   14084:	str	r1, [r3, #72]	; 0x48
   14088:	add	r1, r3, #92	; 0x5c
   1408c:	vst1.32	{d8-d9}, [r1]
   14090:	mov	r1, #0
   14094:	str	r1, [r3, #108]	; 0x6c
   14098:	mov	r3, r0
   1409c:	b	12c48 <__assert_fail@plt+0x1690>
   140a0:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   140a4:	b	1514c <__assert_fail@plt+0x3b94>
   140a8:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   140ac:	b	15084 <__assert_fail@plt+0x3acc>
   140b0:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   140b4:	b	150fc <__assert_fail@plt+0x3b44>
   140b8:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   140bc:	b	14ee8 <__assert_fail@plt+0x3930>
   140c0:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   140c4:	str	r0, [sp, #208]	; 0xd0
   140c8:	asr	r0, r0, #31
   140cc:	str	r1, [sp, #196]	; 0xc4
   140d0:	str	r0, [sp, #200]	; 0xc8
   140d4:	mov	r0, #0
   140d8:	str	r0, [sp, #236]	; 0xec
   140dc:	mov	r0, #0
   140e0:	str	r0, [sp, #228]	; 0xe4
   140e4:	mov	r0, #0
   140e8:	str	r0, [sp, #232]	; 0xe8
   140ec:	mov	r0, #0
   140f0:	str	r0, [sp, #224]	; 0xe0
   140f4:	mov	r0, #0
   140f8:	str	r0, [sp, #220]	; 0xdc
   140fc:	mov	r0, #0
   14100:	str	r0, [sp, #216]	; 0xd8
   14104:	mov	r0, #0
   14108:	str	r0, [sp, #212]	; 0xd4
   1410c:	mov	r0, #0
   14110:	str	r0, [sp, #204]	; 0xcc
   14114:	b	16008 <__assert_fail@plt+0x4a50>
   14118:	ldrd	r0, [r3]
   1411c:	str	r1, [sp, #224]	; 0xe0
   14120:	str	r0, [sp, #232]	; 0xe8
   14124:	b	15fc0 <__assert_fail@plt+0x4a08>
   14128:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   1412c:	b	14f44 <__assert_fail@plt+0x398c>
   14130:	ldr	r5, [r6]
   14134:	ldr	r1, [r6, #4]
   14138:	adds	r0, r5, #-2147483648	; 0x80000000
   1413c:	adcs	r0, r1, #0
   14140:	bne	164a4 <__assert_fail@plt+0x4eec>
   14144:	str	r5, [sp, #244]	; 0xf4
   14148:	b	16010 <__assert_fail@plt+0x4a58>
   1414c:	ldrd	r6, [r3]
   14150:	cmn	r7, #1
   14154:	ble	153f8 <__assert_fail@plt+0x3e40>
   14158:	ldr	r5, [r3, #-48]	; 0xffffffd0
   1415c:	ldr	r9, [r3, #-44]	; 0xffffffd4
   14160:	orrs	r0, r6, r7
   14164:	beq	15fac <__assert_fail@plt+0x49f4>
   14168:	cmn	r9, #1
   1416c:	ble	1553c <__assert_fail@plt+0x3f84>
   14170:	mov	sl, r2
   14174:	str	r4, [sp, #172]	; 0xac
   14178:	mov	r4, r3
   1417c:	mvn	r0, #0
   14180:	mvn	r1, #-2147483648	; 0x80000000
   14184:	mov	r2, r6
   14188:	mov	r3, r7
   1418c:	bl	1f3c8 <__assert_fail@plt+0xde10>
   14190:	b	15434 <__assert_fail@plt+0x3e7c>
   14194:	sub	r1, r3, #56	; 0x38
   14198:	ldr	r0, [r8, #156]	; 0x9c
   1419c:	ldr	lr, [r3, #-40]	; 0xffffffd8
   141a0:	str	r3, [sp, #180]	; 0xb4
   141a4:	str	r2, [sp, #160]	; 0xa0
   141a8:	str	r4, [sp, #172]	; 0xac
   141ac:	vld1.64	{d16-d17}, [r1]
   141b0:	cmp	r0, #0
   141b4:	beq	141ec <__assert_fail@plt+0x2c34>
   141b8:	ldr	r1, [sp, #92]	; 0x5c
   141bc:	ldr	r1, [r1]
   141c0:	cmp	r1, #0
   141c4:	bne	141ec <__assert_fail@plt+0x2c34>
   141c8:	ldrb	r1, [r8, #153]	; 0x99
   141cc:	cmp	r1, #0
   141d0:	bne	141ec <__assert_fail@plt+0x2c34>
   141d4:	ldr	ip, [r3, #-36]	; 0xffffffdc
   141d8:	cmp	lr, #2
   141dc:	bgt	16108 <__assert_fail@plt+0x4b50>
   141e0:	ldr	r2, [r8, #172]	; 0xac
   141e4:	cmp	r2, #0
   141e8:	bne	16108 <__assert_fail@plt+0x4b50>
   141ec:	cmp	lr, #5
   141f0:	blt	154d8 <__assert_fail@plt+0x3f20>
   141f4:	vmov.32	r4, d17[0]
   141f8:	vmov.32	r1, d17[1]
   141fc:	add	r0, r0, #1
   14200:	mov	r2, #100	; 0x64
   14204:	mov	r3, #0
   14208:	str	lr, [sp, #72]	; 0x48
   1420c:	str	r0, [r8, #156]	; 0x9c
   14210:	mov	r0, r4
   14214:	str	r1, [sp, #76]	; 0x4c
   14218:	str	r4, [sp, #68]	; 0x44
   1421c:	bl	1f2f4 <__assert_fail@plt+0xdd3c>
   14220:	mov	ip, #100	; 0x64
   14224:	umull	r2, r3, r0, ip
   14228:	mla	r3, r1, ip, r3
   1422c:	subs	r2, r4, r2
   14230:	ldr	r4, [sp, #76]	; 0x4c
   14234:	sbc	r3, r4, r3
   14238:	ldr	r4, [sp, #164]	; 0xa4
   1423c:	strd	r2, [r4]
   14240:	mov	r2, #100	; 0x64
   14244:	mov	r3, #0
   14248:	bl	1f2f4 <__assert_fail@plt+0xdd3c>
   1424c:	mov	r0, r2
   14250:	ldr	r2, [sp, #168]	; 0xa8
   14254:	mov	r1, r3
   14258:	mov	r3, #0
   1425c:	strd	r0, [r2]
   14260:	movw	r2, #10000	; 0x2710
   14264:	ldr	r0, [sp, #68]	; 0x44
   14268:	ldr	r1, [sp, #76]	; 0x4c
   1426c:	bl	1f2f4 <__assert_fail@plt+0xdd3c>
   14270:	ldr	r2, [sp, #88]	; 0x58
   14274:	ldr	r3, [sp, #180]	; 0xb4
   14278:	strd	r0, [r2]
   1427c:	ldr	r0, [sp, #72]	; 0x48
   14280:	sub	r0, r0, #4
   14284:	str	r0, [r8, #48]	; 0x30
   14288:	b	15960 <__assert_fail@plt+0x43a8>
   1428c:	ldrd	r6, [r3]
   14290:	cmn	r7, #1
   14294:	ble	15590 <__assert_fail@plt+0x3fd8>
   14298:	ldr	r5, [r3, #-56]	; 0xffffffc8
   1429c:	ldr	r9, [r3, #-52]	; 0xffffffcc
   142a0:	orrs	r0, r6, r7
   142a4:	bne	14168 <__assert_fail@plt+0x2bb0>
   142a8:	b	15fac <__assert_fail@plt+0x49f4>
   142ac:	mov	r0, #0
   142b0:	str	r0, [sp, #228]	; 0xe4
   142b4:	mov	r0, #1
   142b8:	b	14eec <__assert_fail@plt+0x3934>
   142bc:	ldr	r0, [r3, #-56]	; 0xffffffc8
   142c0:	str	r2, [sp, #160]	; 0xa0
   142c4:	ldr	r6, [r3, #-12]
   142c8:	ldr	r1, [r3, #-16]
   142cc:	ldr	ip, [r3, #-20]	; 0xffffffec
   142d0:	ldr	r5, [r3, #-24]	; 0xffffffe8
   142d4:	sub	lr, r3, #36	; 0x24
   142d8:	ldr	r2, [r3, #-8]
   142dc:	str	r3, [sp, #180]	; 0xb4
   142e0:	str	r4, [sp, #172]	; 0xac
   142e4:	ldm	lr, {r4, sl, lr}
   142e8:	str	lr, [sp, #52]	; 0x34
   142ec:	str	r0, [sp, #64]	; 0x40
   142f0:	ldr	r0, [r3, #-52]	; 0xffffffcc
   142f4:	str	r4, [sp, #60]	; 0x3c
   142f8:	str	r0, [sp, #76]	; 0x4c
   142fc:	ldr	r0, [r3, #-48]	; 0xffffffd0
   14300:	str	r0, [sp, #56]	; 0x38
   14304:	ldr	r0, [r3, #-44]	; 0xffffffd4
   14308:	str	r0, [sp, #68]	; 0x44
   1430c:	ldr	r0, [r3, #-40]	; 0xffffffd8
   14310:	ldr	r3, [r3]
   14314:	str	r0, [sp, #48]	; 0x30
   14318:	ldr	r0, [r8, #144]	; 0x90
   1431c:	cmn	r3, #1
   14320:	str	r0, [sp, #72]	; 0x48
   14324:	ble	155e8 <__assert_fail@plt+0x4030>
   14328:	add	r2, r0, r2
   1432c:	str	r2, [sp, #44]	; 0x2c
   14330:	str	r2, [r8, #144]	; 0x90
   14334:	ldr	r2, [sp, #104]	; 0x68
   14338:	ldm	r2, {r0, r3}
   1433c:	adds	r0, r0, r1
   14340:	adc	r7, r3, r6
   14344:	stm	r2, {r0, r7}
   14348:	ldr	r2, [sp, #108]	; 0x6c
   1434c:	ldm	r2, {r0, r9}
   14350:	str	ip, [sp, #28]
   14354:	adds	r5, r0, r5
   14358:	mov	r0, r4
   1435c:	adc	ip, r9, ip
   14360:	stm	r2, {r5, ip}
   14364:	ldr	r2, [sp, #112]	; 0x70
   14368:	ldr	r4, [r2]
   1436c:	ldr	r1, [r2, #4]
   14370:	adds	r4, r4, sl
   14374:	str	r1, [sp, #24]
   14378:	adc	r1, r1, lr
   1437c:	str	r1, [sp, #32]
   14380:	str	r4, [r2]
   14384:	str	r1, [r2, #4]
   14388:	ldr	r2, [sp, #116]	; 0x74
   1438c:	ldr	r5, [sp, #48]	; 0x30
   14390:	ldr	r4, [r2]
   14394:	ldr	r1, [r2, #4]
   14398:	adds	r4, r4, r5
   1439c:	str	r1, [sp, #36]	; 0x24
   143a0:	mov	r5, #0
   143a4:	adc	r0, r1, r0
   143a8:	str	r0, [sp, #40]	; 0x28
   143ac:	str	r4, [r2]
   143b0:	str	r0, [r2, #4]
   143b4:	ldr	lr, [sp, #120]	; 0x78
   143b8:	ldr	r1, [sp, #56]	; 0x38
   143bc:	ldr	sl, [sp, #68]	; 0x44
   143c0:	ldr	r4, [lr]
   143c4:	ldr	r0, [lr, #4]
   143c8:	adds	r2, r4, r1
   143cc:	str	r0, [sp, #48]	; 0x30
   143d0:	mov	r1, #0
   143d4:	adc	r0, r0, sl
   143d8:	str	r0, [sp, #56]	; 0x38
   143dc:	str	r2, [lr]
   143e0:	str	r0, [lr, #4]
   143e4:	ldr	r0, [sp, #124]	; 0x7c
   143e8:	ldr	r4, [sp, #64]	; 0x40
   143ec:	ldm	r0, {r2, lr}
   143f0:	adds	r2, r2, r4
   143f4:	ldr	r4, [sp, #76]	; 0x4c
   143f8:	adc	r4, lr, r4
   143fc:	cmn	r3, #1
   14400:	stm	r0, {r2, r4}
   14404:	mov	r2, #0
   14408:	mov	r0, #0
   1440c:	mov	r3, #0
   14410:	movwgt	r2, #1
   14414:	cmn	r7, #1
   14418:	movwgt	r1, #1
   1441c:	str	r2, [sp, #64]	; 0x40
   14420:	subs	r1, r2, r1
   14424:	ldr	r2, [sp, #56]	; 0x38
   14428:	movwne	r1, #1
   1442c:	cmn	r6, #1
   14430:	ldr	r6, [sp, #76]	; 0x4c
   14434:	movwgt	r0, #1
   14438:	cmn	r9, #1
   1443c:	str	r1, [sp, #20]
   14440:	mov	r1, #0
   14444:	mov	r9, #0
   14448:	movwgt	r1, #1
   1444c:	cmn	ip, #1
   14450:	str	r0, [sp, #16]
   14454:	mov	r0, #0
   14458:	mov	ip, #0
   1445c:	movwgt	r0, #1
   14460:	str	r1, [sp, #12]
   14464:	subs	r0, r1, r0
   14468:	ldr	r1, [sp, #36]	; 0x24
   1446c:	movwne	r0, #1
   14470:	str	r0, [sp, #8]
   14474:	ldr	r0, [sp, #28]
   14478:	cmn	r0, #1
   1447c:	mov	r0, #0
   14480:	movwgt	r0, #1
   14484:	str	r0, [sp, #28]
   14488:	ldr	r0, [sp, #24]
   1448c:	cmn	r0, #1
   14490:	ldr	r0, [sp, #32]
   14494:	movwgt	r5, #1
   14498:	cmn	r0, #1
   1449c:	mov	r0, #0
   144a0:	movwgt	r0, #1
   144a4:	subs	r0, r5, r0
   144a8:	movwne	r0, #1
   144ac:	str	r0, [sp, #32]
   144b0:	ldr	r0, [sp, #52]	; 0x34
   144b4:	cmn	r0, #1
   144b8:	mov	r0, #0
   144bc:	movwgt	r0, #1
   144c0:	cmn	r1, #1
   144c4:	ldr	r1, [sp, #40]	; 0x28
   144c8:	movwgt	r9, #1
   144cc:	cmn	r1, #1
   144d0:	mov	r1, #0
   144d4:	movwgt	r1, #1
   144d8:	subs	r1, r9, r1
   144dc:	movwne	r1, #1
   144e0:	str	r1, [sp, #52]	; 0x34
   144e4:	ldr	r1, [sp, #60]	; 0x3c
   144e8:	cmn	r1, #1
   144ec:	ldr	r1, [sp, #48]	; 0x30
   144f0:	movwgt	ip, #1
   144f4:	cmn	r1, #1
   144f8:	mov	r1, #0
   144fc:	movwgt	r1, #1
   14500:	cmn	r2, #1
   14504:	mov	r2, #0
   14508:	movwgt	r2, #1
   1450c:	subs	r7, r1, r2
   14510:	mov	r2, #0
   14514:	movwne	r7, #1
   14518:	cmn	sl, #1
   1451c:	movwgt	r3, #1
   14520:	cmn	lr, #1
   14524:	ldr	lr, [sp, #72]	; 0x48
   14528:	movwgt	r2, #1
   1452c:	cmn	r4, #1
   14530:	mov	r4, #0
   14534:	movwgt	r4, #1
   14538:	subs	sl, r2, r4
   1453c:	ldr	r4, [sp, #44]	; 0x2c
   14540:	movwne	sl, #1
   14544:	cmn	r6, #1
   14548:	mov	r6, #0
   1454c:	movwgt	r6, #1
   14550:	str	r6, [sp, #76]	; 0x4c
   14554:	cmp	r4, lr
   14558:	bvs	164a4 <__assert_fail@plt+0x4eec>
   1455c:	ldr	r4, [sp, #64]	; 0x40
   14560:	ldr	r6, [sp, #16]
   14564:	sub	r4, r4, r6
   14568:	ldr	r6, [sp, #20]
   1456c:	clz	r4, r4
   14570:	lsr	r4, r4, #5
   14574:	ands	r4, r4, r6
   14578:	bne	164a4 <__assert_fail@plt+0x4eec>
   1457c:	ldr	r6, [sp, #12]
   14580:	ldr	r4, [sp, #28]
   14584:	sub	r4, r6, r4
   14588:	ldr	r6, [sp, #8]
   1458c:	clz	r4, r4
   14590:	lsr	r4, r4, #5
   14594:	ands	r4, r4, r6
   14598:	bne	164a4 <__assert_fail@plt+0x4eec>
   1459c:	ldr	r6, [sp, #32]
   145a0:	sub	r0, r5, r0
   145a4:	movw	lr, #64	; 0x40
   145a8:	clz	r0, r0
   145ac:	movt	lr, #2
   145b0:	lsr	r0, r0, #5
   145b4:	ands	r0, r0, r6
   145b8:	bne	164a4 <__assert_fail@plt+0x4eec>
   145bc:	ldr	r6, [sp, #52]	; 0x34
   145c0:	sub	r0, r9, ip
   145c4:	clz	r0, r0
   145c8:	lsr	r0, r0, #5
   145cc:	ands	r0, r0, r6
   145d0:	bne	164a4 <__assert_fail@plt+0x4eec>
   145d4:	sub	r0, r1, r3
   145d8:	clz	r0, r0
   145dc:	lsr	r0, r0, #5
   145e0:	ands	r0, r0, r7
   145e4:	bne	164a4 <__assert_fail@plt+0x4eec>
   145e8:	ldr	r0, [sp, #76]	; 0x4c
   145ec:	ldr	ip, [sp, #176]	; 0xb0
   145f0:	ldr	r3, [sp, #180]	; 0xb4
   145f4:	sub	r0, r2, r0
   145f8:	ldr	r2, [sp, #160]	; 0xa0
   145fc:	clz	r0, r0
   14600:	lsr	r0, r0, #5
   14604:	ands	r0, r0, sl
   14608:	b	15870 <__assert_fail@plt+0x42b8>
   1460c:	sub	r0, r3, #112	; 0x70
   14610:	vldr	d18, [r3, #-96]	; 0xffffffa0
   14614:	mov	r5, r2
   14618:	ldr	r2, [sp, #168]	; 0xa8
   1461c:	mov	r7, r4
   14620:	mov	r4, r3
   14624:	mov	sl, #1
   14628:	vld1.64	{d16-d17}, [r0]
   1462c:	ldr	r0, [sp, #100]	; 0x64
   14630:	vst1.64	{d16-d17}, [r0]!
   14634:	vstr	d18, [r0]
   14638:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   1463c:	rsbs	r0, r0, #0
   14640:	rsc	r3, r1, #0
   14644:	stm	r2, {r0, r3}
   14648:	ands	r0, r1, r3
   1464c:	bmi	164b0 <__assert_fail@plt+0x4ef8>
   14650:	ldrd	r0, [r6]
   14654:	ldr	r2, [sp, #164]	; 0xa4
   14658:	rsbs	r0, r0, #0
   1465c:	rsc	r3, r1, #0
   14660:	stm	r2, {r0, r3}
   14664:	mov	r2, r5
   14668:	ands	r0, r1, r3
   1466c:	mov	r3, r4
   14670:	mov	r4, r7
   14674:	bpl	16018 <__assert_fail@plt+0x4a60>
   14678:	b	164b0 <__assert_fail@plt+0x4ef8>
   1467c:	mov	r5, r4
   14680:	mov	r4, r2
   14684:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   14688:	ldr	r2, [sp, #164]	; 0xa4
   1468c:	strd	r0, [r2]
   14690:	ldrd	r0, [r3]
   14694:	ldr	r2, [sp, #168]	; 0xa8
   14698:	b	14fdc <__assert_fail@plt+0x3a24>
   1469c:	mvn	r0, #0
   146a0:	str	r0, [sp, #244]	; 0xf4
   146a4:	mvn	r0, #0
   146a8:	b	16014 <__assert_fail@plt+0x4a5c>
   146ac:	mov	r0, #1
   146b0:	str	r0, [r8, #20]
   146b4:	ldr	r0, [r8, #168]	; 0xa8
   146b8:	add	r0, r0, #1
   146bc:	str	r0, [r8, #168]	; 0xa8
   146c0:	b	16018 <__assert_fail@plt+0x4a60>
   146c4:	ldr	r0, [r3, #-56]	; 0xffffffc8
   146c8:	str	r3, [sp, #180]	; 0xb4
   146cc:	str	r4, [sp, #172]	; 0xac
   146d0:	str	r2, [sp, #160]	; 0xa0
   146d4:	b	14848 <__assert_fail@plt+0x3290>
   146d8:	mov	r5, r4
   146dc:	mov	r4, r2
   146e0:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   146e4:	ldr	r2, [sp, #144]	; 0x90
   146e8:	vmov.i32	q8, #0	; 0x00000000
   146ec:	strd	r0, [r2]
   146f0:	mov	r2, r4
   146f4:	mov	r4, r5
   146f8:	ldr	r0, [sp, #140]	; 0x8c
   146fc:	vst1.64	{d16-d17}, [r0]
   14700:	b	14e80 <__assert_fail@plt+0x38c8>
   14704:	ldr	r0, [r3, #-56]	; 0xffffffc8
   14708:	b	14d1c <__assert_fail@plt+0x3764>
   1470c:	ldr	r1, [r3, #-40]	; 0xffffffd8
   14710:	ldr	sl, [r3, #4]
   14714:	ldr	r0, [r3, #-48]	; 0xffffffd0
   14718:	ldr	r5, [r3, #-44]	; 0xffffffd4
   1471c:	str	r2, [sp, #160]	; 0xa0
   14720:	mov	r2, #0
   14724:	mov	r6, #100	; 0x64
   14728:	str	r3, [sp, #180]	; 0xb4
   1472c:	cmp	r1, #3
   14730:	mov	r1, #0
   14734:	movwlt	r1, #1
   14738:	cmp	sl, #0
   1473c:	movwmi	r2, #1
   14740:	ands	r1, r2, r1
   14744:	umull	r7, r1, r0, r6
   14748:	moveq	r7, r0
   1474c:	mlane	r5, r5, r6, r1
   14750:	cmn	sl, #1
   14754:	ble	15880 <__assert_fail@plt+0x42c8>
   14758:	ldr	r0, [r3, #-56]	; 0xffffffc8
   1475c:	ldr	r9, [r3]
   14760:	cmn	r5, #1
   14764:	str	r0, [sp, #76]	; 0x4c
   14768:	ble	15cf4 <__assert_fail@plt+0x473c>
   1476c:	movw	r1, #8738	; 0x2222
   14770:	movw	r0, #8738	; 0x2222
   14774:	mov	r2, #1
   14778:	movt	r1, #8738	; 0x2222
   1477c:	movt	r0, #546	; 0x222
   14780:	subs	r1, r1, r7
   14784:	sbcs	r0, r0, r5
   14788:	blt	15d2c <__assert_fail@plt+0x4774>
   1478c:	b	15d28 <__assert_fail@plt+0x4770>
   14790:	mov	r5, r4
   14794:	mov	r4, r2
   14798:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   1479c:	ldr	r2, [sp, #144]	; 0x90
   147a0:	vmov.i32	q8, #0	; 0x00000000
   147a4:	strd	r0, [r2]
   147a8:	mov	r2, r4
   147ac:	mov	r4, r5
   147b0:	ldr	r0, [sp, #140]	; 0x8c
   147b4:	vst1.64	{d16-d17}, [r0]
   147b8:	b	14d0c <__assert_fail@plt+0x3754>
   147bc:	mov	r5, r2
   147c0:	ldrd	r0, [r3, #-112]	; 0xffffff90
   147c4:	ldr	r2, [sp, #168]	; 0xa8
   147c8:	mov	r7, r4
   147cc:	mov	r4, r3
   147d0:	mov	sl, #1
   147d4:	strd	r0, [r2]
   147d8:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   147dc:	ldr	r2, [sp, #164]	; 0xa4
   147e0:	rsbs	r0, r0, #0
   147e4:	rsc	r3, r1, #0
   147e8:	stm	r2, {r0, r3}
   147ec:	ands	r0, r1, r3
   147f0:	bmi	164b0 <__assert_fail@plt+0x4ef8>
   147f4:	ldrd	r0, [r6]
   147f8:	ldr	r2, [sp, #88]	; 0x58
   147fc:	rsbs	r0, r0, #0
   14800:	rsc	r3, r1, #0
   14804:	stm	r2, {r0, r3}
   14808:	ands	r0, r1, r3
   1480c:	bmi	164b0 <__assert_fail@plt+0x4ef8>
   14810:	mov	r3, r4
   14814:	ldr	r1, [sp, #92]	; 0x5c
   14818:	mov	r2, r5
   1481c:	mov	r4, r7
   14820:	ldr	r0, [r3, #16]
   14824:	str	r0, [r1]
   14828:	b	16018 <__assert_fail@plt+0x4a60>
   1482c:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   14830:	b	14bf4 <__assert_fail@plt+0x363c>
   14834:	movw	r0, #40336	; 0x9d90
   14838:	str	r3, [sp, #180]	; 0xb4
   1483c:	str	r4, [sp, #172]	; 0xac
   14840:	str	r2, [sp, #160]	; 0xa0
   14844:	movt	r0, #65535	; 0xffff
   14848:	str	r0, [r8, #24]
   1484c:	ldr	r0, [r3, #4]
   14850:	ldr	r1, [r3]
   14854:	ldr	r3, [r5, #8]
   14858:	ldr	r2, [sl, #4]
   1485c:	ldr	r4, [r7, #4]
   14860:	ldr	sl, [sl]
   14864:	str	r0, [sp, #76]	; 0x4c
   14868:	ldm	r6, {r0, r6}
   1486c:	str	r1, [sp, #64]	; 0x40
   14870:	str	r6, [sp, #60]	; 0x3c
   14874:	str	r2, [sp, #44]	; 0x2c
   14878:	str	r4, [sp, #32]
   1487c:	str	r0, [sp, #56]	; 0x38
   14880:	ldm	r9, {r0, ip}
   14884:	ldr	r9, [r7]
   14888:	ldm	r5, {r1, r7}
   1488c:	str	ip, [sp, #52]	; 0x34
   14890:	str	r7, [sp, #28]
   14894:	str	r0, [sp, #48]	; 0x30
   14898:	ldr	r0, [r8, #144]	; 0x90
   1489c:	str	r0, [sp, #72]	; 0x48
   148a0:	add	r0, r0, r3
   148a4:	str	r0, [sp, #68]	; 0x44
   148a8:	str	r0, [r8, #144]	; 0x90
   148ac:	ldr	r0, [sp, #104]	; 0x68
   148b0:	ldm	r0, {r3, r5}
   148b4:	adds	r1, r3, r1
   148b8:	adc	r3, r5, r7
   148bc:	stm	r0, {r1, r3}
   148c0:	ldr	r7, [sp, #108]	; 0x6c
   148c4:	ldm	r7, {r0, lr}
   148c8:	adds	r0, r0, r9
   148cc:	adc	r9, lr, r4
   148d0:	stm	r7, {r0, r9}
   148d4:	ldr	r4, [sp, #112]	; 0x70
   148d8:	ldm	r4, {r0, r7}
   148dc:	adds	r0, r0, sl
   148e0:	adc	sl, r7, r2
   148e4:	stm	r4, {r0, sl}
   148e8:	ldr	r4, [sp, #116]	; 0x74
   148ec:	ldr	r2, [sp, #48]	; 0x30
   148f0:	ldrd	r0, [r4]
   148f4:	adds	r0, r0, r2
   148f8:	str	r1, [sp, #40]	; 0x28
   148fc:	adc	r1, r1, ip
   14900:	str	r1, [sp, #36]	; 0x24
   14904:	strd	r0, [r4]
   14908:	ldr	r4, [sp, #120]	; 0x78
   1490c:	ldr	r1, [sp, #56]	; 0x38
   14910:	ldm	r4, {r0, r2}
   14914:	str	r2, [sp, #48]	; 0x30
   14918:	adds	r0, r0, r1
   1491c:	adc	r6, r2, r6
   14920:	stm	r4, {r0, r6}
   14924:	ldr	ip, [sp, #124]	; 0x7c
   14928:	ldr	r1, [sp, #64]	; 0x40
   1492c:	ldr	r2, [sp, #76]	; 0x4c
   14930:	ldm	ip, {r0, r4}
   14934:	str	r4, [sp, #56]	; 0x38
   14938:	adds	r0, r0, r1
   1493c:	mov	r1, #0
   14940:	adc	r2, r4, r2
   14944:	cmn	r5, #1
   14948:	mov	r5, #0
   1494c:	mov	r4, #0
   14950:	str	r2, [sp, #64]	; 0x40
   14954:	stm	ip, {r0, r2}
   14958:	mov	r2, #0
   1495c:	movwgt	r2, #1
   14960:	cmn	r3, #1
   14964:	mov	r0, #0
   14968:	mov	ip, #0
   1496c:	mov	r3, #0
   14970:	movwgt	r0, #1
   14974:	str	r2, [sp, #24]
   14978:	subs	r0, r2, r0
   1497c:	mov	r2, #0
   14980:	movwne	r0, #1
   14984:	str	r0, [sp, #20]
   14988:	ldr	r0, [sp, #28]
   1498c:	cmn	r0, #1
   14990:	mov	r0, #0
   14994:	movwgt	r0, #1
   14998:	cmn	lr, #1
   1499c:	mov	lr, #0
   149a0:	movwgt	r1, #1
   149a4:	cmn	r9, #1
   149a8:	str	r0, [sp, #28]
   149ac:	mov	r0, #0
   149b0:	movwgt	r0, #1
   149b4:	str	r1, [sp, #16]
   149b8:	subs	r0, r1, r0
   149bc:	ldr	r1, [sp, #40]	; 0x28
   149c0:	movwne	r0, #1
   149c4:	str	r0, [sp, #12]
   149c8:	ldr	r0, [sp, #32]
   149cc:	cmn	r0, #1
   149d0:	mov	r0, #0
   149d4:	movwgt	r0, #1
   149d8:	cmn	r7, #1
   149dc:	mov	r7, #0
   149e0:	movwgt	ip, #1
   149e4:	cmn	sl, #1
   149e8:	str	r0, [sp, #32]
   149ec:	mov	r0, #0
   149f0:	movwgt	r0, #1
   149f4:	subs	r0, ip, r0
   149f8:	movwne	r0, #1
   149fc:	str	r0, [sp, #8]
   14a00:	ldr	r0, [sp, #44]	; 0x2c
   14a04:	cmn	r0, #1
   14a08:	mov	r0, #0
   14a0c:	movwgt	r0, #1
   14a10:	cmn	r1, #1
   14a14:	ldr	r1, [sp, #36]	; 0x24
   14a18:	movwgt	r7, #1
   14a1c:	cmn	r1, #1
   14a20:	mov	r1, #0
   14a24:	movwgt	r1, #1
   14a28:	subs	sl, r7, r1
   14a2c:	ldr	r1, [sp, #52]	; 0x34
   14a30:	movwne	sl, #1
   14a34:	cmn	r1, #1
   14a38:	ldr	r1, [sp, #48]	; 0x30
   14a3c:	movwgt	lr, #1
   14a40:	cmn	r1, #1
   14a44:	ldr	r1, [sp, #60]	; 0x3c
   14a48:	movwgt	r5, #1
   14a4c:	cmn	r6, #1
   14a50:	mov	r6, #0
   14a54:	movwgt	r2, #1
   14a58:	subs	r2, r5, r2
   14a5c:	movwne	r2, #1
   14a60:	cmn	r1, #1
   14a64:	ldr	r1, [sp, #56]	; 0x38
   14a68:	movwgt	r3, #1
   14a6c:	cmn	r1, #1
   14a70:	ldr	r1, [sp, #64]	; 0x40
   14a74:	movwgt	r6, #1
   14a78:	cmn	r1, #1
   14a7c:	mov	r1, #0
   14a80:	movwgt	r1, #1
   14a84:	subs	r9, r6, r1
   14a88:	ldr	r1, [sp, #76]	; 0x4c
   14a8c:	movwne	r9, #1
   14a90:	cmn	r1, #1
   14a94:	ldr	r1, [sp, #72]	; 0x48
   14a98:	movwgt	r4, #1
   14a9c:	str	r4, [sp, #76]	; 0x4c
   14aa0:	ldr	r4, [sp, #68]	; 0x44
   14aa4:	cmp	r4, r1
   14aa8:	bvs	164a4 <__assert_fail@plt+0x4eec>
   14aac:	ldr	r1, [sp, #24]
   14ab0:	ldr	r4, [sp, #28]
   14ab4:	sub	r1, r1, r4
   14ab8:	ldr	r4, [sp, #20]
   14abc:	clz	r1, r1
   14ac0:	lsr	r1, r1, #5
   14ac4:	ands	r1, r1, r4
   14ac8:	bne	164a4 <__assert_fail@plt+0x4eec>
   14acc:	ldr	r1, [sp, #16]
   14ad0:	ldr	r4, [sp, #32]
   14ad4:	sub	r1, r1, r4
   14ad8:	ldr	r4, [sp, #12]
   14adc:	clz	r1, r1
   14ae0:	lsr	r1, r1, #5
   14ae4:	ands	r1, r1, r4
   14ae8:	bne	164a4 <__assert_fail@plt+0x4eec>
   14aec:	ldr	r1, [sp, #8]
   14af0:	sub	r0, ip, r0
   14af4:	clz	r0, r0
   14af8:	lsr	r0, r0, #5
   14afc:	ands	r0, r0, r1
   14b00:	bne	164a4 <__assert_fail@plt+0x4eec>
   14b04:	sub	r0, r7, lr
   14b08:	clz	r0, r0
   14b0c:	lsr	r0, r0, #5
   14b10:	ands	r0, r0, sl
   14b14:	bne	164a4 <__assert_fail@plt+0x4eec>
   14b18:	sub	r0, r5, r3
   14b1c:	mov	sl, #1
   14b20:	clz	r0, r0
   14b24:	lsr	r0, r0, #5
   14b28:	ands	r0, r0, r2
   14b2c:	ldreq	r0, [sp, #76]	; 0x4c
   14b30:	subeq	r0, r6, r0
   14b34:	clzeq	r0, r0
   14b38:	lsreq	r0, r0, #5
   14b3c:	andseq	r0, r0, r9
   14b40:	bne	164b0 <__assert_fail@plt+0x4ef8>
   14b44:	movw	r1, #2950	; 0xb86
   14b48:	mov	r0, #1
   14b4c:	mov	r2, #5
   14b50:	movt	r1, #2
   14b54:	strb	r0, [r8, #153]	; 0x99
   14b58:	mov	r0, #0
   14b5c:	bl	11318 <dcgettext@plt>
   14b60:	mov	r1, r8
   14b64:	bl	16938 <__assert_fail@plt+0x5380>
   14b68:	ldr	r2, [sp, #160]	; 0xa0
   14b6c:	ldr	r3, [sp, #180]	; 0xb4
   14b70:	ldr	ip, [sp, #176]	; 0xb0
   14b74:	ldr	r4, [sp, #172]	; 0xac
   14b78:	movw	lr, #64	; 0x40
   14b7c:	movt	lr, #2
   14b80:	b	16018 <__assert_fail@plt+0x4a60>
   14b84:	mov	r0, r2
   14b88:	mov	r1, r4
   14b8c:	mov	r4, r3
   14b90:	ldr	r9, [r3, #-56]	; 0xffffffc8
   14b94:	ldr	sl, [r3, #-52]	; 0xffffffcc
   14b98:	ldr	r2, [r3, #-272]	; 0xfffffef0
   14b9c:	ldr	r3, [r3, #-268]	; 0xfffffef4
   14ba0:	ldr	r5, [sp, #144]	; 0x90
   14ba4:	ldrd	r6, [r4, #-160]	; 0xffffff60
   14ba8:	strd	r2, [r5]
   14bac:	mov	r3, r4
   14bb0:	mov	r4, r1
   14bb4:	ldr	r2, [sp, #140]	; 0x8c
   14bb8:	strd	r6, [r2]
   14bbc:	str	r9, [r8, #88]	; 0x58
   14bc0:	mov	r2, r0
   14bc4:	str	sl, [r8, #92]	; 0x5c
   14bc8:	b	14d0c <__assert_fail@plt+0x3754>
   14bcc:	ldr	r0, [r3]
   14bd0:	str	r0, [r8, #24]
   14bd4:	b	16018 <__assert_fail@plt+0x4a60>
   14bd8:	ldr	r0, [r8, #172]	; 0xac
   14bdc:	movw	r1, #64329	; 0xfb49
   14be0:	movt	r1, #1
   14be4:	add	r0, r0, #1
   14be8:	str	r0, [r8, #172]	; 0xac
   14bec:	b	14f78 <__assert_fail@plt+0x39c0>
   14bf0:	ldrd	r0, [r3, #-48]	; 0xffffffd0
   14bf4:	mov	r5, r4
   14bf8:	mov	r4, r2
   14bfc:	ldr	r2, [sp, #96]	; 0x60
   14c00:	strd	r0, [r2]
   14c04:	mov	r1, #1
   14c08:	mov	r2, r4
   14c0c:	mov	r4, r5
   14c10:	ldr	r0, [r3]
   14c14:	strb	r1, [r8, #188]	; 0xbc
   14c18:	str	r0, [r8, #16]
   14c1c:	b	16018 <__assert_fail@plt+0x4a60>
   14c20:	ldr	r7, [r3, #-208]	; 0xffffff30
   14c24:	ldrb	r0, [r8, #181]	; 0xb5
   14c28:	cmp	r7, #4
   14c2c:	blt	1545c <__assert_fail@plt+0x3ea4>
   14c30:	mov	r9, r2
   14c34:	sub	r5, r3, #224	; 0xe0
   14c38:	cmp	r0, #0
   14c3c:	beq	14c84 <__assert_fail@plt+0x36cc>
   14c40:	movw	r1, #2973	; 0xb9d
   14c44:	mov	r0, #0
   14c48:	mov	r2, #5
   14c4c:	mov	sl, r4
   14c50:	mov	r4, r3
   14c54:	movt	r1, #2
   14c58:	bl	11318 <dcgettext@plt>
   14c5c:	ldrd	r2, [r4, #-216]	; 0xffffff28
   14c60:	asr	r1, r7, #31
   14c64:	str	r7, [sp]
   14c68:	str	r1, [sp, #4]
   14c6c:	bl	16be8 <__assert_fail@plt+0x5630>
   14c70:	ldr	ip, [sp, #176]	; 0xb0
   14c74:	movw	lr, #64	; 0x40
   14c78:	mov	r3, r4
   14c7c:	mov	r4, sl
   14c80:	movt	lr, #2
   14c84:	vld1.64	{d16-d17}, [r5]!
   14c88:	ldr	r0, [sp, #100]	; 0x64
   14c8c:	ldr	r2, [sp, #168]	; 0xa8
   14c90:	vldr	d18, [r5]
   14c94:	vst1.64	{d16-d17}, [r0]!
   14c98:	vstr	d18, [r0]
   14c9c:	ldrd	r0, [r3, #-104]	; 0xffffff98
   14ca0:	strd	r0, [r2]
   14ca4:	ldrd	r0, [r6]
   14ca8:	ldr	r2, [sp, #164]	; 0xa4
   14cac:	strd	r0, [r2]
   14cb0:	mov	r2, r9
   14cb4:	b	16018 <__assert_fail@plt+0x4a60>
   14cb8:	ldr	r0, [r8, #156]	; 0x9c
   14cbc:	movw	r1, #65000	; 0xfde8
   14cc0:	movt	r1, #1
   14cc4:	add	r0, r0, #1
   14cc8:	str	r0, [r8, #156]	; 0x9c
   14ccc:	b	14f78 <__assert_fail@plt+0x39c0>
   14cd0:	ldrd	r0, [r3, #-160]	; 0xffffff60
   14cd4:	ldr	r7, [sp, #144]	; 0x90
   14cd8:	mov	r6, r4
   14cdc:	mov	r4, r3
   14ce0:	mov	r5, r2
   14ce4:	ldrd	r2, [r3, #-48]	; 0xffffffd0
   14ce8:	strd	r0, [r7]
   14cec:	ldr	r0, [sp, #140]	; 0x8c
   14cf0:	strd	r2, [r0]
   14cf4:	mov	r0, #0
   14cf8:	mov	r3, r4
   14cfc:	mov	r2, r5
   14d00:	mov	r4, r6
   14d04:	str	r0, [r8, #88]	; 0x58
   14d08:	str	r0, [r8, #92]	; 0x5c
   14d0c:	ldr	r0, [r3]
   14d10:	str	r0, [r8, #28]
   14d14:	b	16018 <__assert_fail@plt+0x4a60>
   14d18:	ldr	r0, [r3]
   14d1c:	add	r0, r0, #3600	; 0xe10
   14d20:	str	r0, [r8, #24]
   14d24:	b	16018 <__assert_fail@plt+0x4a60>
   14d28:	mov	r5, r2
   14d2c:	ldrd	r0, [r3]
   14d30:	ldr	r2, [sp, #80]	; 0x50
   14d34:	strd	r0, [r2]
   14d38:	movw	r1, #2908	; 0xb5c
   14d3c:	mov	r0, #1
   14d40:	strb	r0, [r8, #152]	; 0x98
   14d44:	movt	r1, #2
   14d48:	mov	r0, #0
   14d4c:	b	14f80 <__assert_fail@plt+0x39c8>
   14d50:	ldr	r1, [r8, #172]	; 0xac
   14d54:	ldr	r0, [r8, #156]	; 0x9c
   14d58:	add	r1, r1, #1
   14d5c:	add	r0, r0, #1
   14d60:	str	r1, [r8, #172]	; 0xac
   14d64:	movw	r1, #2926	; 0xb6e
   14d68:	str	r0, [r8, #156]	; 0x9c
   14d6c:	movt	r1, #2
   14d70:	b	14f78 <__assert_fail@plt+0x39c0>
   14d74:	ldr	r0, [r8, #160]	; 0xa0
   14d78:	movw	r1, #2946	; 0xb82
   14d7c:	movt	r1, #2
   14d80:	add	r0, r0, #1
   14d84:	str	r0, [r8, #160]	; 0xa0
   14d88:	b	14f78 <__assert_fail@plt+0x39c0>
   14d8c:	movw	r1, #2950	; 0xb86
   14d90:	movt	r1, #2
   14d94:	b	14f0c <__assert_fail@plt+0x3954>
   14d98:	ldrd	r0, [r3, #-160]	; 0xffffff60
   14d9c:	ldr	r7, [sp, #144]	; 0x90
   14da0:	mov	r6, r4
   14da4:	mov	r4, r3
   14da8:	mov	r5, r2
   14dac:	ldrd	r2, [r3, #-48]	; 0xffffffd0
   14db0:	strd	r0, [r7]
   14db4:	ldr	r0, [sp, #140]	; 0x8c
   14db8:	strd	r2, [r0]
   14dbc:	mov	r0, #0
   14dc0:	mov	r3, r4
   14dc4:	mov	r2, r5
   14dc8:	mov	r4, r6
   14dcc:	str	r0, [r8, #88]	; 0x58
   14dd0:	str	r0, [r8, #92]	; 0x5c
   14dd4:	b	14e80 <__assert_fail@plt+0x38c8>
   14dd8:	mov	r0, #0
   14ddc:	str	r0, [sp, #236]	; 0xec
   14de0:	mov	r0, #1
   14de4:	str	r0, [sp, #244]	; 0xf4
   14de8:	mov	r0, #0
   14dec:	str	r0, [sp, #228]	; 0xe4
   14df0:	mov	r0, #0
   14df4:	str	r0, [sp, #232]	; 0xe8
   14df8:	mov	r0, #0
   14dfc:	str	r0, [sp, #224]	; 0xe0
   14e00:	mov	r0, #0
   14e04:	str	r0, [sp, #220]	; 0xdc
   14e08:	mov	r0, #0
   14e0c:	str	r0, [sp, #216]	; 0xd8
   14e10:	mov	r0, #0
   14e14:	str	r0, [sp, #212]	; 0xd4
   14e18:	mov	r0, #0
   14e1c:	str	r0, [sp, #204]	; 0xcc
   14e20:	mov	r0, #0
   14e24:	str	r0, [sp, #208]	; 0xd0
   14e28:	mov	r0, #0
   14e2c:	str	r0, [sp, #200]	; 0xc8
   14e30:	mov	r0, #0
   14e34:	str	r0, [sp, #196]	; 0xc4
   14e38:	b	16010 <__assert_fail@plt+0x4a58>
   14e3c:	mov	r0, r2
   14e40:	mov	r1, r4
   14e44:	mov	r4, r3
   14e48:	ldr	r9, [r3, #-56]	; 0xffffffc8
   14e4c:	ldr	sl, [r3, #-52]	; 0xffffffcc
   14e50:	ldr	r2, [r3, #-272]	; 0xfffffef0
   14e54:	ldr	r3, [r3, #-268]	; 0xfffffef4
   14e58:	ldr	r5, [sp, #144]	; 0x90
   14e5c:	ldrd	r6, [r4, #-160]	; 0xffffff60
   14e60:	strd	r2, [r5]
   14e64:	mov	r3, r4
   14e68:	mov	r4, r1
   14e6c:	ldr	r2, [sp, #140]	; 0x8c
   14e70:	strd	r6, [r2]
   14e74:	str	r9, [r8, #88]	; 0x58
   14e78:	mov	r2, r0
   14e7c:	str	sl, [r8, #92]	; 0x5c
   14e80:	mov	r0, #2
   14e84:	str	r0, [r8, #28]
   14e88:	b	16018 <__assert_fail@plt+0x4a60>
   14e8c:	ldr	r0, [r8, #164]	; 0xa4
   14e90:	movw	r1, #2935	; 0xb77
   14e94:	movt	r1, #2
   14e98:	add	r0, r0, #1
   14e9c:	str	r0, [r8, #164]	; 0xa4
   14ea0:	b	14f78 <__assert_fail@plt+0x39c0>
   14ea4:	ldrd	r0, [r3, #-104]	; 0xffffff98
   14ea8:	b	14fc4 <__assert_fail@plt+0x3a0c>
   14eac:	ldr	r0, [r8, #176]	; 0xb0
   14eb0:	movw	r1, #2941	; 0xb7d
   14eb4:	movt	r1, #2
   14eb8:	add	r0, r0, #1
   14ebc:	str	r0, [r8, #176]	; 0xb0
   14ec0:	b	14f78 <__assert_fail@plt+0x39c0>
   14ec4:	mov	r5, r4
   14ec8:	mov	r4, r2
   14ecc:	ldrd	r0, [r3, #-104]	; 0xffffff98
   14ed0:	ldr	r2, [sp, #164]	; 0xa4
   14ed4:	strd	r0, [r2]
   14ed8:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   14edc:	ldr	r2, [sp, #168]	; 0xa8
   14ee0:	b	15300 <__assert_fail@plt+0x3d48>
   14ee4:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   14ee8:	str	r1, [sp, #228]	; 0xe4
   14eec:	str	r0, [sp, #236]	; 0xec
   14ef0:	mov	r0, #0
   14ef4:	str	r0, [sp, #232]	; 0xe8
   14ef8:	mov	r0, #0
   14efc:	str	r0, [sp, #224]	; 0xe0
   14f00:	b	15fd0 <__assert_fail@plt+0x4a18>
   14f04:	movw	r1, #2966	; 0xb96
   14f08:	movt	r1, #2
   14f0c:	mov	r5, r2
   14f10:	mov	r0, #0
   14f14:	mov	r2, #5
   14f18:	mov	r6, r4
   14f1c:	mov	r4, r3
   14f20:	bl	11318 <dcgettext@plt>
   14f24:	mov	r1, r8
   14f28:	bl	16938 <__assert_fail@plt+0x5380>
   14f2c:	b	14f98 <__assert_fail@plt+0x39e0>
   14f30:	ldrd	r0, [r6]
   14f34:	str	r1, [sp, #240]	; 0xf0
   14f38:	str	r0, [sp, #244]	; 0xf4
   14f3c:	b	16018 <__assert_fail@plt+0x4a60>
   14f40:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   14f44:	str	r0, [sp, #220]	; 0xdc
   14f48:	mov	r0, #0
   14f4c:	str	r1, [sp, #216]	; 0xd8
   14f50:	str	r0, [sp, #236]	; 0xec
   14f54:	mov	r0, #0
   14f58:	str	r0, [sp, #228]	; 0xe4
   14f5c:	mov	r0, #0
   14f60:	str	r0, [sp, #232]	; 0xe8
   14f64:	mov	r0, #0
   14f68:	str	r0, [sp, #224]	; 0xe0
   14f6c:	b	15fe0 <__assert_fail@plt+0x4a28>
   14f70:	movw	r1, #2959	; 0xb8f
   14f74:	movt	r1, #2
   14f78:	mov	r0, #0
   14f7c:	mov	r5, r2
   14f80:	mov	r2, #5
   14f84:	mov	r6, r4
   14f88:	mov	r4, r3
   14f8c:	bl	11318 <dcgettext@plt>
   14f90:	mov	r1, r8
   14f94:	bl	164c4 <__assert_fail@plt+0x4f0c>
   14f98:	ldr	ip, [sp, #176]	; 0xb0
   14f9c:	movw	lr, #64	; 0x40
   14fa0:	mov	r3, r4
   14fa4:	mov	r2, r5
   14fa8:	mov	r4, r6
   14fac:	movt	lr, #2
   14fb0:	b	16018 <__assert_fail@plt+0x4a60>
   14fb4:	ldr	r0, [r3]
   14fb8:	str	r0, [r8, #20]
   14fbc:	b	16018 <__assert_fail@plt+0x4a60>
   14fc0:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   14fc4:	mov	r5, r4
   14fc8:	mov	r4, r2
   14fcc:	ldr	r2, [sp, #168]	; 0xa8
   14fd0:	strd	r0, [r2]
   14fd4:	ldrd	r0, [r6]
   14fd8:	ldr	r2, [sp, #164]	; 0xa4
   14fdc:	strd	r0, [r2]
   14fe0:	mov	r2, r4
   14fe4:	mov	r4, r5
   14fe8:	b	16018 <__assert_fail@plt+0x4a60>
   14fec:	ldr	r0, [r8, #176]	; 0xb0
   14ff0:	str	r2, [sp, #160]	; 0xa0
   14ff4:	mov	r2, #0
   14ff8:	mov	r6, #100	; 0x64
   14ffc:	str	r3, [sp, #180]	; 0xb4
   15000:	str	r4, [sp, #172]	; 0xac
   15004:	add	r0, r0, #1
   15008:	str	r0, [r8, #176]	; 0xb0
   1500c:	ldr	r1, [r3, #-40]	; 0xffffffd8
   15010:	ldr	sl, [r3, #4]
   15014:	ldr	r0, [r3, #-48]	; 0xffffffd0
   15018:	ldr	r5, [r3, #-44]	; 0xffffffd4
   1501c:	cmp	r1, #3
   15020:	mov	r1, #0
   15024:	movwlt	r1, #1
   15028:	cmp	sl, #0
   1502c:	movwmi	r2, #1
   15030:	ands	r1, r2, r1
   15034:	umull	r7, r1, r0, r6
   15038:	moveq	r7, r0
   1503c:	mlane	r5, r5, r6, r1
   15040:	cmn	sl, #1
   15044:	ble	158c4 <__assert_fail@plt+0x430c>
   15048:	ldr	r0, [r3, #-56]	; 0xffffffc8
   1504c:	ldr	r9, [r3]
   15050:	cmn	r5, #1
   15054:	str	r0, [sp, #76]	; 0x4c
   15058:	ble	15e84 <__assert_fail@plt+0x48cc>
   1505c:	movw	r1, #8738	; 0x2222
   15060:	movw	r0, #8738	; 0x2222
   15064:	mov	r2, #1
   15068:	movt	r1, #8738	; 0x2222
   1506c:	movt	r0, #546	; 0x222
   15070:	subs	r1, r1, r7
   15074:	sbcs	r0, r0, r5
   15078:	blt	15ebc <__assert_fail@plt+0x4904>
   1507c:	b	15eb8 <__assert_fail@plt+0x4900>
   15080:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   15084:	str	r0, [sp, #244]	; 0xf4
   15088:	mov	r0, #0
   1508c:	str	r1, [sp, #240]	; 0xf0
   15090:	str	r0, [sp, #236]	; 0xec
   15094:	mov	r0, #0
   15098:	str	r0, [sp, #228]	; 0xe4
   1509c:	mov	r0, #0
   150a0:	str	r0, [sp, #232]	; 0xe8
   150a4:	mov	r0, #0
   150a8:	str	r0, [sp, #224]	; 0xe0
   150ac:	mov	r0, #0
   150b0:	str	r0, [sp, #220]	; 0xdc
   150b4:	mov	r0, #0
   150b8:	str	r0, [sp, #216]	; 0xd8
   150bc:	mov	r0, #0
   150c0:	str	r0, [sp, #212]	; 0xd4
   150c4:	mov	r0, #0
   150c8:	str	r0, [sp, #204]	; 0xcc
   150cc:	mov	r0, #0
   150d0:	str	r0, [sp, #208]	; 0xd0
   150d4:	mov	r0, #0
   150d8:	str	r0, [sp, #200]	; 0xc8
   150dc:	mov	r0, #0
   150e0:	str	r0, [sp, #196]	; 0xc4
   150e4:	b	16018 <__assert_fail@plt+0x4a60>
   150e8:	movw	r0, #40336	; 0x9d90
   150ec:	movt	r0, #65535	; 0xffff
   150f0:	str	r0, [r8, #24]
   150f4:	b	16018 <__assert_fail@plt+0x4a60>
   150f8:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   150fc:	str	r0, [sp, #208]	; 0xd0
   15100:	mov	r0, #0
   15104:	str	r1, [sp, #200]	; 0xc8
   15108:	str	r0, [sp, #236]	; 0xec
   1510c:	mov	r0, #0
   15110:	str	r0, [sp, #228]	; 0xe4
   15114:	mov	r0, #0
   15118:	str	r0, [sp, #232]	; 0xe8
   1511c:	mov	r0, #0
   15120:	str	r0, [sp, #224]	; 0xe0
   15124:	mov	r0, #0
   15128:	str	r0, [sp, #220]	; 0xdc
   1512c:	mov	r0, #0
   15130:	str	r0, [sp, #216]	; 0xd8
   15134:	mov	r0, #0
   15138:	str	r0, [sp, #212]	; 0xd4
   1513c:	mov	r0, #0
   15140:	str	r0, [sp, #204]	; 0xcc
   15144:	b	16000 <__assert_fail@plt+0x4a48>
   15148:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   1514c:	str	r0, [sp, #212]	; 0xd4
   15150:	mov	r0, #0
   15154:	str	r1, [sp, #204]	; 0xcc
   15158:	str	r0, [sp, #236]	; 0xec
   1515c:	mov	r0, #0
   15160:	str	r0, [sp, #228]	; 0xe4
   15164:	mov	r0, #0
   15168:	str	r0, [sp, #232]	; 0xe8
   1516c:	mov	r0, #0
   15170:	str	r0, [sp, #224]	; 0xe0
   15174:	mov	r0, #0
   15178:	str	r0, [sp, #220]	; 0xdc
   1517c:	mov	r0, #0
   15180:	str	r0, [sp, #216]	; 0xd8
   15184:	b	15ff0 <__assert_fail@plt+0x4a38>
   15188:	ldr	r0, [r8, #156]	; 0x9c
   1518c:	vld1.64	{d16-d17}, [r3]
   15190:	ldr	r6, [r9]
   15194:	cmp	r0, #0
   15198:	beq	151d0 <__assert_fail@plt+0x3c18>
   1519c:	ldr	r1, [sp, #92]	; 0x5c
   151a0:	ldr	r1, [r1]
   151a4:	cmp	r1, #0
   151a8:	bne	151d0 <__assert_fail@plt+0x3c18>
   151ac:	ldrb	r1, [r8, #153]	; 0x99
   151b0:	cmp	r1, #0
   151b4:	bne	151d0 <__assert_fail@plt+0x3c18>
   151b8:	ldr	r7, [r9, #4]
   151bc:	cmp	r6, #2
   151c0:	bgt	16128 <__assert_fail@plt+0x4b70>
   151c4:	ldr	r1, [r8, #172]	; 0xac
   151c8:	cmp	r1, #0
   151cc:	bne	16128 <__assert_fail@plt+0x4b70>
   151d0:	cmp	r6, #5
   151d4:	str	r2, [sp, #160]	; 0xa0
   151d8:	blt	15508 <__assert_fail@plt+0x3f50>
   151dc:	vmov.32	r5, d17[1]
   151e0:	vmov.32	r9, d17[0]
   151e4:	add	r0, r0, #1
   151e8:	mov	sl, r3
   151ec:	mov	r2, #100	; 0x64
   151f0:	mov	r3, #0
   151f4:	str	r4, [sp, #172]	; 0xac
   151f8:	mov	r4, #100	; 0x64
   151fc:	str	r0, [r8, #156]	; 0x9c
   15200:	mov	r0, r9
   15204:	mov	r1, r5
   15208:	bl	1f2f4 <__assert_fail@plt+0xdd3c>
   1520c:	umull	r2, r3, r0, r4
   15210:	ldr	r7, [sp, #164]	; 0xa4
   15214:	mla	r3, r1, r4, r3
   15218:	subs	r2, r9, r2
   1521c:	sbc	r3, r5, r3
   15220:	strd	r2, [r7]
   15224:	mov	r2, #100	; 0x64
   15228:	mov	r3, #0
   1522c:	bl	1f2f4 <__assert_fail@plt+0xdd3c>
   15230:	mov	r0, r2
   15234:	ldr	r2, [sp, #168]	; 0xa8
   15238:	mov	r1, r3
   1523c:	mov	r3, #0
   15240:	strd	r0, [r2]
   15244:	mov	r0, r9
   15248:	mov	r1, r5
   1524c:	movw	r2, #10000	; 0x2710
   15250:	bl	1f2f4 <__assert_fail@plt+0xdd3c>
   15254:	ldr	r2, [sp, #88]	; 0x58
   15258:	ldr	ip, [sp, #176]	; 0xb0
   1525c:	ldr	r4, [sp, #172]	; 0xac
   15260:	movw	lr, #64	; 0x40
   15264:	mov	r3, sl
   15268:	movt	lr, #2
   1526c:	strd	r0, [r2]
   15270:	sub	r0, r6, #4
   15274:	ldr	r2, [sp, #160]	; 0xa0
   15278:	str	r0, [r8, #48]	; 0x30
   1527c:	b	16018 <__assert_fail@plt+0x4a60>
   15280:	mov	r0, #0
   15284:	str	r0, [sp, #236]	; 0xec
   15288:	mov	r0, #1
   1528c:	str	r0, [sp, #220]	; 0xdc
   15290:	mov	r0, #0
   15294:	str	r0, [sp, #228]	; 0xe4
   15298:	mov	r0, #0
   1529c:	str	r0, [sp, #232]	; 0xe8
   152a0:	mov	r0, #0
   152a4:	str	r0, [sp, #224]	; 0xe0
   152a8:	b	15fd8 <__assert_fail@plt+0x4a20>
   152ac:	ldr	r1, [sp, #96]	; 0x60
   152b0:	mov	r0, #0
   152b4:	str	r0, [r1]
   152b8:	str	r0, [r1, #4]
   152bc:	ldr	r0, [r3]
   152c0:	str	r0, [r8, #16]
   152c4:	b	16018 <__assert_fail@plt+0x4a60>
   152c8:	ldr	r1, [sp, #96]	; 0x60
   152cc:	mov	r0, #0
   152d0:	str	r0, [r1]
   152d4:	str	r0, [r1, #4]
   152d8:	ldr	r0, [r3, #-56]	; 0xffffffc8
   152dc:	str	r0, [r8, #16]
   152e0:	b	16018 <__assert_fail@plt+0x4a60>
   152e4:	mov	r5, r4
   152e8:	mov	r4, r2
   152ec:	ldrd	r0, [r3, #-168]	; 0xffffff58
   152f0:	ldr	r2, [sp, #168]	; 0xa8
   152f4:	strd	r0, [r2]
   152f8:	ldrd	r0, [r3, #-104]	; 0xffffff98
   152fc:	ldr	r2, [sp, #164]	; 0xa4
   15300:	strd	r0, [r2]
   15304:	mov	r0, r3
   15308:	mov	r2, r4
   1530c:	mov	r4, r5
   15310:	b	154c0 <__assert_fail@plt+0x3f08>
   15314:	mov	r5, r2
   15318:	ldrd	r0, [r3, #-104]	; 0xffffff98
   1531c:	ldr	r2, [sp, #164]	; 0xa4
   15320:	mov	r7, r4
   15324:	mov	r4, r3
   15328:	strd	r0, [r2]
   1532c:	ldrd	r0, [r3, #-56]	; 0xffffffc8
   15330:	ldr	r2, [sp, #168]	; 0xa8
   15334:	strd	r0, [r2]
   15338:	ldrd	r0, [r6]
   1533c:	ldr	r2, [sp, #88]	; 0x58
   15340:	rsbs	r0, r0, #0
   15344:	rsc	r3, r1, #0
   15348:	stm	r2, {r0, r3}
   1534c:	ands	r0, r1, r3
   15350:	bmi	164a4 <__assert_fail@plt+0x4eec>
   15354:	ldr	r0, [r4, #16]
   15358:	ldr	r1, [sp, #92]	; 0x5c
   1535c:	mov	r3, r4
   15360:	mov	r2, r5
   15364:	mov	r4, r7
   15368:	str	r0, [r1]
   1536c:	b	16018 <__assert_fail@plt+0x4a60>
   15370:	mov	r0, #0
   15374:	str	r0, [sp, #236]	; 0xec
   15378:	mov	r0, #1
   1537c:	str	r0, [sp, #208]	; 0xd0
   15380:	mov	r0, #0
   15384:	str	r0, [sp, #228]	; 0xe4
   15388:	mov	r0, #0
   1538c:	str	r0, [sp, #232]	; 0xe8
   15390:	mov	r0, #0
   15394:	str	r0, [sp, #224]	; 0xe0
   15398:	mov	r0, #0
   1539c:	str	r0, [sp, #220]	; 0xdc
   153a0:	mov	r0, #0
   153a4:	str	r0, [sp, #216]	; 0xd8
   153a8:	mov	r0, #0
   153ac:	str	r0, [sp, #212]	; 0xd4
   153b0:	mov	r0, #0
   153b4:	str	r0, [sp, #204]	; 0xcc
   153b8:	b	15ff8 <__assert_fail@plt+0x4a40>
   153bc:	mov	r0, #0
   153c0:	str	r0, [sp, #236]	; 0xec
   153c4:	mov	r0, #1
   153c8:	str	r0, [sp, #212]	; 0xd4
   153cc:	mov	r0, #0
   153d0:	str	r0, [sp, #228]	; 0xe4
   153d4:	mov	r0, #0
   153d8:	str	r0, [sp, #232]	; 0xe8
   153dc:	mov	r0, #0
   153e0:	str	r0, [sp, #224]	; 0xe0
   153e4:	mov	r0, #0
   153e8:	str	r0, [sp, #220]	; 0xdc
   153ec:	mov	r0, #0
   153f0:	str	r0, [sp, #216]	; 0xd8
   153f4:	b	15fe8 <__assert_fail@plt+0x4a30>
   153f8:	ldr	r9, [r3, #-44]	; 0xffffffd4
   153fc:	ldr	r5, [r3, #-48]	; 0xffffffd0
   15400:	cmn	r9, #1
   15404:	ble	155a0 <__assert_fail@plt+0x3fe8>
   15408:	and	r0, r6, r7
   1540c:	cmn	r0, #1
   15410:	beq	15fac <__assert_fail@plt+0x49f4>
   15414:	mov	sl, r2
   15418:	str	r4, [sp, #172]	; 0xac
   1541c:	mov	r4, r3
   15420:	mov	r0, #0
   15424:	mov	r1, #-2147483648	; 0x80000000
   15428:	mov	r2, r6
   1542c:	mov	r3, r7
   15430:	bl	1f2f4 <__assert_fail@plt+0xdd3c>
   15434:	mov	r3, r4
   15438:	ldr	ip, [sp, #176]	; 0xb0
   1543c:	ldr	r4, [sp, #172]	; 0xac
   15440:	movw	lr, #64	; 0x40
   15444:	subs	r0, r0, r5
   15448:	mov	r2, sl
   1544c:	movt	lr, #2
   15450:	sbcs	r0, r1, r9
   15454:	bge	15fac <__assert_fail@plt+0x49f4>
   15458:	b	164a4 <__assert_fail@plt+0x4eec>
   1545c:	mov	r5, r2
   15460:	cmp	r0, #0
   15464:	beq	154a0 <__assert_fail@plt+0x3ee8>
   15468:	movw	r1, #3031	; 0xbd7
   1546c:	mov	r0, #0
   15470:	mov	r2, #5
   15474:	mov	r6, r4
   15478:	mov	r4, r3
   1547c:	movt	r1, #2
   15480:	bl	11318 <dcgettext@plt>
   15484:	ldrd	r2, [r4, #-216]	; 0xffffff28
   15488:	bl	16be8 <__assert_fail@plt+0x5630>
   1548c:	ldr	ip, [sp, #176]	; 0xb0
   15490:	movw	lr, #64	; 0x40
   15494:	mov	r3, r4
   15498:	mov	r4, r6
   1549c:	movt	lr, #2
   154a0:	ldrd	r0, [r3, #-216]	; 0xffffff28
   154a4:	ldr	r2, [sp, #168]	; 0xa8
   154a8:	strd	r0, [r2]
   154ac:	ldrd	r0, [r3, #-104]	; 0xffffff98
   154b0:	ldr	r2, [sp, #164]	; 0xa4
   154b4:	strd	r0, [r2]
   154b8:	mov	r0, r3
   154bc:	mov	r2, r5
   154c0:	vld1.64	{d16-d17}, [r0]!
   154c4:	vldr	d18, [r0]
   154c8:	ldr	r0, [sp, #100]	; 0x64
   154cc:	vst1.64	{d16-d17}, [r0]!
   154d0:	vstr	d18, [r0]
   154d4:	b	16018 <__assert_fail@plt+0x4a60>
   154d8:	ldr	r0, [r8, #172]	; 0xac
   154dc:	vmov.32	r4, d17[1]
   154e0:	mov	r2, #0
   154e4:	cmp	lr, #3
   154e8:	add	r0, r0, #1
   154ec:	str	r0, [r8, #172]	; 0xac
   154f0:	vmov.32	r0, d17[0]
   154f4:	bge	15908 <__assert_fail@plt+0x4350>
   154f8:	mov	r1, r4
   154fc:	mov	ip, #0
   15500:	mov	r3, #0
   15504:	b	15938 <__assert_fail@plt+0x4380>
   15508:	vmov.32	r1, d17[1]
   1550c:	vmov.32	r9, d17[0]
   15510:	ldr	r0, [r8, #172]	; 0xac
   15514:	mov	sl, r3
   15518:	mov	r5, #0
   1551c:	cmp	r6, #3
   15520:	add	r0, r0, #1
   15524:	str	r0, [r8, #172]	; 0xac
   15528:	bge	15c8c <__assert_fail@plt+0x46d4>
   1552c:	mov	r0, r9
   15530:	mov	r2, #0
   15534:	mov	r3, #0
   15538:	b	15cc8 <__assert_fail@plt+0x4710>
   1553c:	and	r0, r5, r9
   15540:	cmn	r0, #1
   15544:	beq	15fa4 <__assert_fail@plt+0x49ec>
   15548:	mov	sl, r2
   1554c:	str	r4, [sp, #172]	; 0xac
   15550:	mov	r4, r3
   15554:	mov	r0, #0
   15558:	mov	r1, #-2147483648	; 0x80000000
   1555c:	mov	r2, r5
   15560:	mov	r3, r9
   15564:	bl	1f2f4 <__assert_fail@plt+0xdd3c>
   15568:	mov	r3, r4
   1556c:	ldr	ip, [sp, #176]	; 0xb0
   15570:	ldr	r4, [sp, #172]	; 0xac
   15574:	movw	lr, #64	; 0x40
   15578:	subs	r0, r0, r6
   1557c:	mov	r2, sl
   15580:	movt	lr, #2
   15584:	sbcs	r0, r1, r7
   15588:	bge	15fac <__assert_fail@plt+0x49f4>
   1558c:	b	164a4 <__assert_fail@plt+0x4eec>
   15590:	ldr	r9, [r3, #-52]	; 0xffffffcc
   15594:	ldr	r5, [r3, #-56]	; 0xffffffc8
   15598:	cmn	r9, #1
   1559c:	bgt	15408 <__assert_fail@plt+0x3e50>
   155a0:	mov	sl, r2
   155a4:	str	r4, [sp, #172]	; 0xac
   155a8:	mov	r4, r3
   155ac:	mvn	r0, #0
   155b0:	mvn	r1, #-2147483648	; 0x80000000
   155b4:	mov	r2, r6
   155b8:	mov	r3, r7
   155bc:	bl	1f2f4 <__assert_fail@plt+0xdd3c>
   155c0:	mov	r3, r4
   155c4:	ldr	ip, [sp, #176]	; 0xb0
   155c8:	ldr	r4, [sp, #172]	; 0xac
   155cc:	movw	lr, #64	; 0x40
   155d0:	subs	r0, r5, r0
   155d4:	mov	r2, sl
   155d8:	movt	lr, #2
   155dc:	sbcs	r0, r9, r1
   155e0:	bge	15fac <__assert_fail@plt+0x49f4>
   155e4:	b	164a4 <__assert_fail@plt+0x4eec>
   155e8:	sub	r3, r0, r2
   155ec:	ldr	r0, [sp, #104]	; 0x68
   155f0:	str	r3, [r8, #144]	; 0x90
   155f4:	ldm	r0, {r3, r9}
   155f8:	subs	r1, r3, r1
   155fc:	sbc	r3, r9, r6
   15600:	stm	r0, {r1, r3}
   15604:	str	r2, [sp, #44]	; 0x2c
   15608:	ldr	r2, [sp, #108]	; 0x6c
   1560c:	ldrd	r0, [r2]
   15610:	subs	r0, r0, r5
   15614:	mov	r5, ip
   15618:	str	r1, [sp, #20]
   1561c:	sbc	ip, r1, ip
   15620:	stm	r2, {r0, ip}
   15624:	ldr	r2, [sp, #112]	; 0x70
   15628:	ldrd	r0, [r2]
   1562c:	subs	r0, r0, sl
   15630:	str	r1, [sp, #24]
   15634:	sbc	sl, r1, lr
   15638:	stm	r2, {r0, sl}
   1563c:	ldr	r7, [sp, #116]	; 0x74
   15640:	ldr	r2, [sp, #48]	; 0x30
   15644:	ldrd	r0, [r7]
   15648:	subs	r0, r0, r2
   1564c:	str	r1, [sp, #32]
   15650:	sbc	r1, r1, r4
   15654:	str	r1, [sp, #36]	; 0x24
   15658:	strd	r0, [r7]
   1565c:	ldr	r4, [sp, #120]	; 0x78
   15660:	ldr	r2, [sp, #56]	; 0x38
   15664:	ldr	r7, [sp, #68]	; 0x44
   15668:	ldrd	r0, [r4]
   1566c:	subs	r0, r0, r2
   15670:	str	r1, [sp, #40]	; 0x28
   15674:	sbc	r1, r1, r7
   15678:	str	r1, [sp, #48]	; 0x30
   1567c:	strd	r0, [r4]
   15680:	ldr	r2, [sp, #124]	; 0x7c
   15684:	ldr	r4, [sp, #64]	; 0x40
   15688:	ldrd	r0, [r2]
   1568c:	subs	lr, r0, r4
   15690:	ldr	r4, [sp, #76]	; 0x4c
   15694:	str	r1, [sp, #56]	; 0x38
   15698:	sbc	r0, r1, r4
   1569c:	cmn	r6, #1
   156a0:	mov	r6, #0
   156a4:	str	r0, [sp, #64]	; 0x40
   156a8:	str	lr, [r2]
   156ac:	str	r0, [r2, #4]
   156b0:	mov	r0, #0
   156b4:	movwgt	r0, #1
   156b8:	cmn	r9, #1
   156bc:	mov	r2, #0
   156c0:	movwgt	r2, #1
   156c4:	ldr	r1, [sp, #20]
   156c8:	subs	r0, r2, r0
   156cc:	movwne	r0, #1
   156d0:	cmn	r3, #1
   156d4:	str	r0, [sp, #16]
   156d8:	mov	r0, #0
   156dc:	movwgt	r0, #1
   156e0:	subs	r0, r2, r0
   156e4:	ldr	r2, [sp, #36]	; 0x24
   156e8:	movwne	r0, #1
   156ec:	cmn	r5, #1
   156f0:	mov	r5, #0
   156f4:	str	r0, [sp, #12]
   156f8:	mov	r0, #0
   156fc:	movwgt	r0, #1
   15700:	cmn	r1, #1
   15704:	mov	r1, #0
   15708:	movwgt	r1, #1
   1570c:	subs	r0, r1, r0
   15710:	movwne	r0, #1
   15714:	cmn	ip, #1
   15718:	str	r0, [sp, #28]
   1571c:	mov	r0, #0
   15720:	movwgt	r0, #1
   15724:	subs	r9, r1, r0
   15728:	ldr	r0, [sp, #52]	; 0x34
   1572c:	ldr	r1, [sp, #24]
   15730:	movwne	r9, #1
   15734:	cmn	r0, #1
   15738:	mov	r0, #0
   1573c:	movwgt	r0, #1
   15740:	cmn	r1, #1
   15744:	mov	r1, #0
   15748:	movwgt	r1, #1
   1574c:	subs	lr, r1, r0
   15750:	mov	r0, #0
   15754:	movwne	lr, #1
   15758:	cmn	sl, #1
   1575c:	movwgt	r0, #1
   15760:	subs	r3, r1, r0
   15764:	ldr	r0, [sp, #60]	; 0x3c
   15768:	ldr	r1, [sp, #32]
   1576c:	movwne	r3, #1
   15770:	cmn	r0, #1
   15774:	mov	r0, #0
   15778:	movwgt	r0, #1
   1577c:	cmn	r1, #1
   15780:	mov	r1, #0
   15784:	movwgt	r1, #1
   15788:	subs	r0, r1, r0
   1578c:	movwne	r0, #1
   15790:	cmn	r2, #1
   15794:	ldr	r2, [sp, #40]	; 0x28
   15798:	movwgt	r6, #1
   1579c:	subs	r6, r1, r6
   157a0:	mov	r1, #0
   157a4:	movwne	r6, #1
   157a8:	cmn	r7, #1
   157ac:	ldr	r7, [sp, #56]	; 0x38
   157b0:	movwgt	r1, #1
   157b4:	cmn	r2, #1
   157b8:	ldr	r2, [sp, #48]	; 0x30
   157bc:	movwgt	r5, #1
   157c0:	subs	r1, r5, r1
   157c4:	movwne	r1, #1
   157c8:	cmn	r2, #1
   157cc:	mov	r2, #0
   157d0:	movwgt	r2, #1
   157d4:	subs	r5, r5, r2
   157d8:	mov	r2, #0
   157dc:	movwne	r5, #1
   157e0:	cmn	r4, #1
   157e4:	ldr	r4, [sp, #44]	; 0x2c
   157e8:	movwgt	r2, #1
   157ec:	cmn	r7, #1
   157f0:	mov	r7, #0
   157f4:	movwgt	r7, #1
   157f8:	subs	ip, r7, r2
   157fc:	ldr	r2, [sp, #64]	; 0x40
   15800:	movwne	ip, #1
   15804:	cmn	r2, #1
   15808:	mov	r2, #0
   1580c:	movwgt	r2, #1
   15810:	subs	sl, r7, r2
   15814:	ldr	r2, [sp, #72]	; 0x48
   15818:	movwne	sl, #1
   1581c:	cmp	r2, r4
   15820:	bvs	164a4 <__assert_fail@plt+0x4eec>
   15824:	ldr	r2, [sp, #16]
   15828:	ldr	r4, [sp, #12]
   1582c:	ands	r2, r2, r4
   15830:	bne	164a4 <__assert_fail@plt+0x4eec>
   15834:	ldr	r2, [sp, #28]
   15838:	ands	r2, r2, r9
   1583c:	bne	164a4 <__assert_fail@plt+0x4eec>
   15840:	ands	r2, lr, r3
   15844:	bne	164a4 <__assert_fail@plt+0x4eec>
   15848:	ldr	r3, [sp, #180]	; 0xb4
   1584c:	ldr	r2, [sp, #160]	; 0xa0
   15850:	movw	lr, #64	; 0x40
   15854:	ands	r0, r0, r6
   15858:	movt	lr, #2
   1585c:	bne	164a4 <__assert_fail@plt+0x4eec>
   15860:	ands	r0, r1, r5
   15864:	bne	164a4 <__assert_fail@plt+0x4eec>
   15868:	ands	r0, ip, sl
   1586c:	ldr	ip, [sp, #176]	; 0xb0
   15870:	ldr	r4, [sp, #172]	; 0xac
   15874:	mov	sl, #1
   15878:	beq	15c80 <__assert_fail@plt+0x46c8>
   1587c:	b	164b0 <__assert_fail@plt+0x4ef8>
   15880:	mov	r0, r7
   15884:	mov	r1, r5
   15888:	mov	r2, #100	; 0x64
   1588c:	mov	r3, #0
   15890:	bl	1f2f4 <__assert_fail@plt+0xdd3c>
   15894:	umull	r2, r3, r0, r6
   15898:	mla	r3, r1, r6, r3
   1589c:	rsb	r1, r1, r1, lsl #4
   158a0:	subs	r2, r7, r2
   158a4:	mov	r7, #60	; 0x3c
   158a8:	umull	r0, r7, r0, r7
   158ac:	sbc	r3, r5, r3
   158b0:	add	r1, r7, r1, lsl #2
   158b4:	adds	r0, r0, r2
   158b8:	mov	r7, #1
   158bc:	adc	r1, r1, r3
   158c0:	b	15dd0 <__assert_fail@plt+0x4818>
   158c4:	mov	r0, r7
   158c8:	mov	r1, r5
   158cc:	mov	r2, #100	; 0x64
   158d0:	mov	r3, #0
   158d4:	bl	1f2f4 <__assert_fail@plt+0xdd3c>
   158d8:	umull	r2, r3, r0, r6
   158dc:	mla	r3, r1, r6, r3
   158e0:	rsb	r1, r1, r1, lsl #4
   158e4:	subs	r2, r7, r2
   158e8:	mov	r7, #60	; 0x3c
   158ec:	umull	r0, r7, r0, r7
   158f0:	sbc	r3, r5, r3
   158f4:	add	r1, r7, r1, lsl #2
   158f8:	adds	r0, r0, r2
   158fc:	mov	r7, #1
   15900:	adc	r1, r1, r3
   15904:	b	15f5c <__assert_fail@plt+0x49a4>
   15908:	mov	r1, r4
   1590c:	mov	r2, #100	; 0x64
   15910:	mov	r3, #0
   15914:	str	r0, [sp, #76]	; 0x4c
   15918:	bl	1f2f4 <__assert_fail@plt+0xdd3c>
   1591c:	mov	lr, #100	; 0x64
   15920:	mov	r2, #0
   15924:	umull	ip, r3, r0, lr
   15928:	mla	lr, r1, lr, r3
   1592c:	ldr	r3, [sp, #76]	; 0x4c
   15930:	subs	ip, r3, ip
   15934:	sbc	r3, r4, lr
   15938:	ldr	r4, [sp, #144]	; 0x90
   1593c:	strd	r0, [r4]
   15940:	ldr	r0, [sp, #140]	; 0x8c
   15944:	str	ip, [r0]
   15948:	str	r3, [r0, #4]
   1594c:	mov	r0, #2
   15950:	str	r2, [r8, #88]	; 0x58
   15954:	str	r2, [r8, #92]	; 0x5c
   15958:	ldr	r3, [sp, #180]	; 0xb4
   1595c:	str	r0, [r8, #28]
   15960:	ldm	r3, {r0, r4}
   15964:	ldr	r1, [r5, #4]
   15968:	ldr	r2, [r8, #144]	; 0x90
   1596c:	str	r4, [sp, #68]	; 0x44
   15970:	str	r0, [sp, #32]
   15974:	ldm	r6, {r0, lr}
   15978:	str	lr, [sp, #60]	; 0x3c
   1597c:	str	r2, [sp, #76]	; 0x4c
   15980:	str	r1, [sp, #24]
   15984:	str	r0, [sp, #64]	; 0x40
   15988:	ldm	r9, {r0, ip}
   1598c:	ldr	r9, [r5]
   15990:	ldr	r5, [r5, #8]
   15994:	str	ip, [sp, #56]	; 0x38
   15998:	str	r0, [sp, #52]	; 0x34
   1599c:	ldm	sl, {r0, r3}
   159a0:	str	r3, [sp, #48]	; 0x30
   159a4:	add	r2, r2, r5
   159a8:	str	r2, [sp, #72]	; 0x48
   159ac:	str	r0, [sp, #44]	; 0x2c
   159b0:	ldr	r0, [r7, #4]
   159b4:	ldr	r7, [r7]
   159b8:	str	r2, [r8, #144]	; 0x90
   159bc:	ldr	r2, [sp, #104]	; 0x68
   159c0:	str	r0, [sp, #40]	; 0x28
   159c4:	ldm	r2, {r5, r6}
   159c8:	adds	r5, r5, r9
   159cc:	adc	r9, r6, r1
   159d0:	stm	r2, {r5, r9}
   159d4:	ldr	r1, [sp, #108]	; 0x6c
   159d8:	ldm	r1, {r5, sl}
   159dc:	adds	r5, r5, r7
   159e0:	adc	r0, sl, r0
   159e4:	str	r0, [sp, #36]	; 0x24
   159e8:	str	r5, [r1]
   159ec:	str	r0, [r1, #4]
   159f0:	ldr	r1, [sp, #112]	; 0x70
   159f4:	ldr	r0, [sp, #44]	; 0x2c
   159f8:	ldr	r7, [r1]
   159fc:	ldr	r5, [r1, #4]
   15a00:	adds	r0, r7, r0
   15a04:	adc	r7, r5, r3
   15a08:	stm	r1, {r0, r7}
   15a0c:	ldr	r2, [sp, #116]	; 0x74
   15a10:	ldr	r3, [sp, #52]	; 0x34
   15a14:	ldrd	r0, [r2]
   15a18:	adds	r0, r0, r3
   15a1c:	str	r1, [sp, #44]	; 0x2c
   15a20:	adc	r1, r1, ip
   15a24:	str	r1, [sp, #28]
   15a28:	strd	r0, [r2]
   15a2c:	ldr	ip, [sp, #120]	; 0x78
   15a30:	ldr	r2, [sp, #64]	; 0x40
   15a34:	ldrd	r0, [ip]
   15a38:	adds	r0, r0, r2
   15a3c:	str	r1, [sp, #52]	; 0x34
   15a40:	adc	r3, r1, lr
   15a44:	stm	ip, {r0, r3}
   15a48:	mov	lr, #0
   15a4c:	ldr	ip, [sp, #124]	; 0x7c
   15a50:	ldr	r2, [sp, #32]
   15a54:	ldrd	r0, [ip]
   15a58:	adds	r0, r0, r2
   15a5c:	str	r1, [sp, #64]	; 0x40
   15a60:	mov	r2, #0
   15a64:	adc	r4, r1, r4
   15a68:	cmn	r6, #1
   15a6c:	mov	r1, #0
   15a70:	stm	ip, {r0, r4}
   15a74:	mov	r0, #0
   15a78:	mov	ip, #0
   15a7c:	mov	r6, #0
   15a80:	movwgt	r1, #1
   15a84:	cmn	r9, #1
   15a88:	movwgt	r0, #1
   15a8c:	str	r1, [sp, #32]
   15a90:	subs	r0, r1, r0
   15a94:	mov	r1, #0
   15a98:	movwne	r0, #1
   15a9c:	str	r0, [sp, #20]
   15aa0:	ldr	r0, [sp, #24]
   15aa4:	cmn	r0, #1
   15aa8:	mov	r0, #0
   15aac:	movwgt	r0, #1
   15ab0:	cmn	sl, #1
   15ab4:	ldr	sl, [sp, #72]	; 0x48
   15ab8:	str	r0, [sp, #24]
   15abc:	ldr	r0, [sp, #36]	; 0x24
   15ac0:	movwgt	r1, #1
   15ac4:	str	r1, [sp, #36]	; 0x24
   15ac8:	cmn	r0, #1
   15acc:	mov	r0, #0
   15ad0:	movwgt	r0, #1
   15ad4:	subs	r0, r1, r0
   15ad8:	ldr	r1, [sp, #60]	; 0x3c
   15adc:	movwne	r0, #1
   15ae0:	str	r0, [sp, #16]
   15ae4:	ldr	r0, [sp, #40]	; 0x28
   15ae8:	cmn	r0, #1
   15aec:	mov	r0, #0
   15af0:	movwgt	r0, #1
   15af4:	cmn	r5, #1
   15af8:	mov	r5, #0
   15afc:	movwgt	ip, #1
   15b00:	cmn	r7, #1
   15b04:	str	r0, [sp, #40]	; 0x28
   15b08:	mov	r0, #0
   15b0c:	mov	r7, #0
   15b10:	movwgt	r0, #1
   15b14:	subs	r0, ip, r0
   15b18:	movwne	r0, #1
   15b1c:	str	r0, [sp, #12]
   15b20:	ldr	r0, [sp, #48]	; 0x30
   15b24:	cmn	r0, #1
   15b28:	ldr	r0, [sp, #44]	; 0x2c
   15b2c:	movwgt	r5, #1
   15b30:	cmn	r0, #1
   15b34:	ldr	r0, [sp, #28]
   15b38:	movwgt	r7, #1
   15b3c:	cmn	r0, #1
   15b40:	mov	r0, #0
   15b44:	movwgt	r0, #1
   15b48:	subs	r0, r7, r0
   15b4c:	movwne	r0, #1
   15b50:	str	r0, [sp, #48]	; 0x30
   15b54:	ldr	r0, [sp, #56]	; 0x38
   15b58:	cmn	r0, #1
   15b5c:	ldr	r0, [sp, #52]	; 0x34
   15b60:	movwgt	lr, #1
   15b64:	cmn	r0, #1
   15b68:	mov	r0, #0
   15b6c:	movwgt	r0, #1
   15b70:	cmn	r3, #1
   15b74:	mov	r3, #0
   15b78:	movwgt	r2, #1
   15b7c:	subs	r2, r0, r2
   15b80:	movwne	r2, #1
   15b84:	cmn	r1, #1
   15b88:	ldr	r1, [sp, #64]	; 0x40
   15b8c:	movwgt	r3, #1
   15b90:	cmn	r1, #1
   15b94:	ldr	r1, [sp, #68]	; 0x44
   15b98:	movwgt	r6, #1
   15b9c:	cmn	r4, #1
   15ba0:	mov	r4, #0
   15ba4:	movwgt	r4, #1
   15ba8:	subs	r9, r6, r4
   15bac:	ldr	r4, [sp, #76]	; 0x4c
   15bb0:	movwne	r9, #1
   15bb4:	cmn	r1, #1
   15bb8:	mov	r1, #0
   15bbc:	movwgt	r1, #1
   15bc0:	str	r1, [sp, #68]	; 0x44
   15bc4:	cmp	sl, r4
   15bc8:	bvs	164a4 <__assert_fail@plt+0x4eec>
   15bcc:	ldr	r4, [sp, #32]
   15bd0:	ldr	r1, [sp, #24]
   15bd4:	sub	r4, r4, r1
   15bd8:	ldr	r1, [sp, #20]
   15bdc:	clz	r4, r4
   15be0:	lsr	r4, r4, #5
   15be4:	ands	r4, r4, r1
   15be8:	bne	164a4 <__assert_fail@plt+0x4eec>
   15bec:	ldr	r1, [sp, #36]	; 0x24
   15bf0:	ldr	r4, [sp, #40]	; 0x28
   15bf4:	sub	r4, r1, r4
   15bf8:	ldr	r1, [sp, #16]
   15bfc:	clz	r4, r4
   15c00:	lsr	r4, r4, #5
   15c04:	ands	r4, r4, r1
   15c08:	bne	164a4 <__assert_fail@plt+0x4eec>
   15c0c:	ldr	r1, [sp, #12]
   15c10:	sub	r5, ip, r5
   15c14:	mov	sl, #1
   15c18:	clz	r5, r5
   15c1c:	lsr	r5, r5, #5
   15c20:	ands	r5, r5, r1
   15c24:	ldreq	r1, [sp, #48]	; 0x30
   15c28:	subeq	r7, r7, lr
   15c2c:	clzeq	r7, r7
   15c30:	lsreq	r7, r7, #5
   15c34:	andseq	r1, r7, r1
   15c38:	bne	164b0 <__assert_fail@plt+0x4ef8>
   15c3c:	sub	r0, r0, r3
   15c40:	clz	r0, r0
   15c44:	lsr	r0, r0, #5
   15c48:	ands	r0, r0, r2
   15c4c:	bne	164b0 <__assert_fail@plt+0x4ef8>
   15c50:	ldr	r0, [sp, #68]	; 0x44
   15c54:	ldr	ip, [sp, #176]	; 0xb0
   15c58:	ldr	r3, [sp, #180]	; 0xb4
   15c5c:	ldr	r2, [sp, #160]	; 0xa0
   15c60:	ldr	r4, [sp, #172]	; 0xac
   15c64:	movw	lr, #64	; 0x40
   15c68:	movt	lr, #2
   15c6c:	sub	r0, r6, r0
   15c70:	clz	r0, r0
   15c74:	lsr	r0, r0, #5
   15c78:	ands	r0, r0, r9
   15c7c:	bne	164b0 <__assert_fail@plt+0x4ef8>
   15c80:	mov	r0, #1
   15c84:	strb	r0, [r8, #153]	; 0x99
   15c88:	b	16018 <__assert_fail@plt+0x4a60>
   15c8c:	mov	r0, r9
   15c90:	mov	r2, #100	; 0x64
   15c94:	mov	r3, #0
   15c98:	mov	r7, #100	; 0x64
   15c9c:	mov	r6, r1
   15ca0:	bl	1f2f4 <__assert_fail@plt+0xdd3c>
   15ca4:	mov	r2, r4
   15ca8:	umull	r2, r3, r0, r7
   15cac:	ldr	ip, [sp, #176]	; 0xb0
   15cb0:	movw	lr, #64	; 0x40
   15cb4:	mov	r5, #0
   15cb8:	movt	lr, #2
   15cbc:	mla	r3, r1, r7, r3
   15cc0:	subs	r2, r9, r2
   15cc4:	sbc	r3, r6, r3
   15cc8:	ldr	r7, [sp, #144]	; 0x90
   15ccc:	strd	r0, [r7]
   15cd0:	ldr	r0, [sp, #140]	; 0x8c
   15cd4:	strd	r2, [r0]
   15cd8:	mov	r0, #2
   15cdc:	str	r5, [r8, #88]	; 0x58
   15ce0:	str	r5, [r8, #92]	; 0x5c
   15ce4:	mov	r3, sl
   15ce8:	ldr	r2, [sp, #160]	; 0xa0
   15cec:	str	r0, [r8, #28]
   15cf0:	b	16018 <__assert_fail@plt+0x4a60>
   15cf4:	and	r0, r7, r5
   15cf8:	cmn	r0, #1
   15cfc:	beq	15d28 <__assert_fail@plt+0x4770>
   15d00:	mov	r0, #0
   15d04:	mov	r1, #-2147483648	; 0x80000000
   15d08:	mov	r2, r7
   15d0c:	mov	r3, r5
   15d10:	bl	1f2f4 <__assert_fail@plt+0xdd3c>
   15d14:	subs	r0, r0, #60	; 0x3c
   15d18:	mov	r2, #1
   15d1c:	sbcs	r0, r1, #0
   15d20:	movge	r2, #0
   15d24:	b	15d2c <__assert_fail@plt+0x4774>
   15d28:	mov	r2, #0
   15d2c:	mov	r0, #60	; 0x3c
   15d30:	str	r2, [sp, #72]	; 0x48
   15d34:	rsb	r2, r5, r5, lsl #4
   15d38:	cmn	sl, #1
   15d3c:	mov	r6, #0
   15d40:	mov	ip, #0
   15d44:	mov	r3, #0
   15d48:	umull	lr, r1, r7, r0
   15d4c:	movwgt	r6, #1
   15d50:	mov	r7, #0
   15d54:	add	r2, r1, r2, lsl #2
   15d58:	cmn	r2, #1
   15d5c:	movwgt	r7, #1
   15d60:	subs	r0, r7, r6
   15d64:	movwne	r0, #1
   15d68:	subs	r1, lr, r9
   15d6c:	str	r1, [sp, #68]	; 0x44
   15d70:	sbc	r1, r2, sl
   15d74:	cmn	r1, #1
   15d78:	movwgt	ip, #1
   15d7c:	subs	r5, r7, ip
   15d80:	movwne	r5, #1
   15d84:	and	r5, r0, r5
   15d88:	adds	r0, lr, r9
   15d8c:	adc	r2, r2, sl
   15d90:	cmn	r2, #1
   15d94:	movwgt	r3, #1
   15d98:	subs	r3, r7, r3
   15d9c:	sub	r7, r7, r6
   15da0:	ldr	r6, [sp, #76]	; 0x4c
   15da4:	clz	r7, r7
   15da8:	movwne	r3, #1
   15dac:	lsr	r7, r7, #5
   15db0:	ands	r6, r6, #1
   15db4:	andeq	r5, r7, r3
   15db8:	ldr	r3, [sp, #72]	; 0x48
   15dbc:	moveq	r1, r2
   15dc0:	ldr	r2, [sp, #68]	; 0x44
   15dc4:	orr	r3, r3, r5
   15dc8:	movne	r0, r2
   15dcc:	eor	r7, r3, #1
   15dd0:	adds	r3, r0, #1440	; 0x5a0
   15dd4:	mov	sl, #1
   15dd8:	adc	r1, r1, #0
   15ddc:	cmp	r7, #0
   15de0:	beq	164b0 <__assert_fail@plt+0x4ef8>
   15de4:	rsbs	r2, r3, #2880	; 0xb40
   15de8:	rscs	r1, r1, #0
   15dec:	bcc	164b0 <__assert_fail@plt+0x4ef8>
   15df0:	rsb	r0, r0, r0, lsl #4
   15df4:	mov	r3, #0
   15df8:	mov	r2, #0
   15dfc:	lsl	r1, r0, #2
   15e00:	str	r1, [r8, #24]
   15e04:	sbfx	r1, r0, #29, #1
   15e08:	ldr	r7, [sp, #180]	; 0xb4
   15e0c:	cmn	r1, #1
   15e10:	movwgt	r3, #1
   15e14:	ldrd	r6, [r7, #-112]	; 0xffffff90
   15e18:	adds	r0, r6, r0, lsl #2
   15e1c:	mov	r6, #0
   15e20:	adc	r1, r1, r7
   15e24:	cmn	r1, #1
   15e28:	str	r0, [r8, #24]
   15e2c:	movwgt	r6, #1
   15e30:	subs	r6, r3, r6
   15e34:	movwne	r6, #1
   15e38:	cmn	r7, #1
   15e3c:	movwgt	r2, #1
   15e40:	sub	r2, r3, r2
   15e44:	clz	r2, r2
   15e48:	lsr	r2, r2, #5
   15e4c:	tst	r2, r6
   15e50:	bne	164b0 <__assert_fail@plt+0x4ef8>
   15e54:	asr	r2, r0, #31
   15e58:	ldr	ip, [sp, #176]	; 0xb0
   15e5c:	ldr	r3, [sp, #180]	; 0xb4
   15e60:	movw	lr, #64	; 0x40
   15e64:	eor	r0, r0, r0
   15e68:	eor	r1, r1, r2
   15e6c:	ldr	r2, [sp, #160]	; 0xa0
   15e70:	movt	lr, #2
   15e74:	orrs	r0, r0, r1
   15e78:	mov	r0, r4
   15e7c:	beq	16018 <__assert_fail@plt+0x4a60>
   15e80:	b	164b0 <__assert_fail@plt+0x4ef8>
   15e84:	and	r0, r7, r5
   15e88:	cmn	r0, #1
   15e8c:	beq	15eb8 <__assert_fail@plt+0x4900>
   15e90:	mov	r0, #0
   15e94:	mov	r1, #-2147483648	; 0x80000000
   15e98:	mov	r2, r7
   15e9c:	mov	r3, r5
   15ea0:	bl	1f2f4 <__assert_fail@plt+0xdd3c>
   15ea4:	subs	r0, r0, #60	; 0x3c
   15ea8:	mov	r2, #1
   15eac:	sbcs	r0, r1, #0
   15eb0:	movge	r2, #0
   15eb4:	b	15ebc <__assert_fail@plt+0x4904>
   15eb8:	mov	r2, #0
   15ebc:	mov	r0, #60	; 0x3c
   15ec0:	str	r2, [sp, #72]	; 0x48
   15ec4:	rsb	r2, r5, r5, lsl #4
   15ec8:	cmn	sl, #1
   15ecc:	mov	r6, #0
   15ed0:	mov	r4, r9
   15ed4:	mov	ip, #0
   15ed8:	mov	r3, #0
   15edc:	umull	lr, r1, r7, r0
   15ee0:	movwgt	r6, #1
   15ee4:	mov	r7, #0
   15ee8:	add	r2, r1, r2, lsl #2
   15eec:	cmn	r2, #1
   15ef0:	movwgt	r7, #1
   15ef4:	subs	r0, r7, r6
   15ef8:	movwne	r0, #1
   15efc:	subs	r9, lr, r9
   15f00:	sbc	r1, r2, sl
   15f04:	cmn	r1, #1
   15f08:	movwgt	ip, #1
   15f0c:	subs	r5, r7, ip
   15f10:	movwne	r5, #1
   15f14:	and	r5, r0, r5
   15f18:	adds	r0, lr, r4
   15f1c:	adc	r2, r2, sl
   15f20:	cmn	r2, #1
   15f24:	movwgt	r3, #1
   15f28:	subs	r3, r7, r3
   15f2c:	sub	r7, r7, r6
   15f30:	ldr	r6, [sp, #76]	; 0x4c
   15f34:	clz	r7, r7
   15f38:	movwne	r3, #1
   15f3c:	lsr	r7, r7, #5
   15f40:	ands	r6, r6, #1
   15f44:	andeq	r5, r7, r3
   15f48:	ldr	r3, [sp, #72]	; 0x48
   15f4c:	moveq	r1, r2
   15f50:	movne	r0, r9
   15f54:	orr	r3, r3, r5
   15f58:	eor	r7, r3, #1
   15f5c:	ldr	ip, [sp, #176]	; 0xb0
   15f60:	movw	lr, #64	; 0x40
   15f64:	adds	r3, r0, #1440	; 0x5a0
   15f68:	mov	sl, #1
   15f6c:	movt	lr, #2
   15f70:	adc	r1, r1, #0
   15f74:	cmp	r7, #0
   15f78:	beq	164b0 <__assert_fail@plt+0x4ef8>
   15f7c:	rsbs	r2, r3, #2880	; 0xb40
   15f80:	ldr	r3, [sp, #180]	; 0xb4
   15f84:	ldr	r2, [sp, #160]	; 0xa0
   15f88:	ldr	r4, [sp, #172]	; 0xac
   15f8c:	rscs	r1, r1, #0
   15f90:	bcc	164b0 <__assert_fail@plt+0x4ef8>
   15f94:	rsb	r0, r0, r0, lsl #4
   15f98:	lsl	r0, r0, #2
   15f9c:	str	r0, [r8, #24]
   15fa0:	b	16018 <__assert_fail@plt+0x4a60>
   15fa4:	mvn	r5, #0
   15fa8:	mvn	r9, #0
   15fac:	umull	r1, r0, r5, r6
   15fb0:	mla	r0, r5, r7, r0
   15fb4:	mla	r0, r9, r6, r0
   15fb8:	str	r1, [sp, #232]	; 0xe8
   15fbc:	str	r0, [sp, #224]	; 0xe0
   15fc0:	mov	r0, #0
   15fc4:	str	r0, [sp, #236]	; 0xec
   15fc8:	mov	r0, #0
   15fcc:	str	r0, [sp, #228]	; 0xe4
   15fd0:	mov	r0, #0
   15fd4:	str	r0, [sp, #220]	; 0xdc
   15fd8:	mov	r0, #0
   15fdc:	str	r0, [sp, #216]	; 0xd8
   15fe0:	mov	r0, #0
   15fe4:	str	r0, [sp, #212]	; 0xd4
   15fe8:	mov	r0, #0
   15fec:	str	r0, [sp, #204]	; 0xcc
   15ff0:	mov	r0, #0
   15ff4:	str	r0, [sp, #208]	; 0xd0
   15ff8:	mov	r0, #0
   15ffc:	str	r0, [sp, #200]	; 0xc8
   16000:	mov	r0, #0
   16004:	str	r0, [sp, #196]	; 0xc4
   16008:	mov	r0, #0
   1600c:	str	r0, [sp, #244]	; 0xf4
   16010:	mov	r0, #0
   16014:	str	r0, [sp, #240]	; 0xf0
   16018:	sub	r0, r4, r4, lsl #3
   1601c:	ldr	r7, [sp, #192]	; 0xc0
   16020:	add	r3, r3, r0, lsl #3
   16024:	ldr	r0, [sp, #244]	; 0xf4
   16028:	sub	r7, r7, r4
   1602c:	sub	r4, fp, #112	; 0x70
   16030:	mov	r9, r4
   16034:	str	r0, [r3, #56]!	; 0x38
   16038:	ldr	r0, [sp, #240]	; 0xf0
   1603c:	str	r0, [r3, #4]
   16040:	ldr	r0, [sp, #236]	; 0xec
   16044:	str	r0, [r3, #8]
   16048:	ldr	r0, [sp, #228]	; 0xe4
   1604c:	str	r0, [r3, #12]
   16050:	ldr	r0, [sp, #232]	; 0xe8
   16054:	str	r0, [r3, #16]
   16058:	ldr	r0, [sp, #224]	; 0xe0
   1605c:	str	r0, [r3, #20]
   16060:	ldr	r0, [sp, #220]	; 0xdc
   16064:	str	r0, [r3, #24]
   16068:	ldr	r0, [sp, #216]	; 0xd8
   1606c:	str	r0, [r3, #28]
   16070:	ldr	r0, [sp, #212]	; 0xd4
   16074:	str	r0, [r3, #32]
   16078:	ldr	r0, [sp, #204]	; 0xcc
   1607c:	str	r0, [r3, #36]	; 0x24
   16080:	ldr	r0, [sp, #208]	; 0xd0
   16084:	str	r0, [r3, #40]	; 0x28
   16088:	ldr	r0, [sp, #200]	; 0xc8
   1608c:	str	r0, [r3, #44]	; 0x2c
   16090:	ldr	r0, [sp, #196]	; 0xc4
   16094:	str	r0, [r3, #48]	; 0x30
   16098:	ldr	r0, [sp, #188]	; 0xbc
   1609c:	str	r0, [r3, #52]	; 0x34
   160a0:	add	r0, r4, r7, lsl #1
   160a4:	ldrsh	r1, [r0]
   160a8:	movw	r0, #888	; 0x378
   160ac:	movt	r0, #2
   160b0:	ldrb	r0, [r0, r2]
   160b4:	movw	r2, #980	; 0x3d4
   160b8:	movt	r2, #2
   160bc:	sub	r0, r0, #28
   160c0:	add	r2, r2, r0
   160c4:	ldrsb	r2, [r2]
   160c8:	add	r2, r1, r2
   160cc:	cmp	r2, #112	; 0x70
   160d0:	bhi	12c34 <__assert_fail@plt+0x167c>
   160d4:	mov	r5, r3
   160d8:	movw	r3, #456	; 0x1c8
   160dc:	movt	r3, #2
   160e0:	add	r3, r3, r2
   160e4:	ldrsb	r3, [r3]
   160e8:	cmp	r3, r1
   160ec:	mov	r3, r5
   160f0:	bne	12c34 <__assert_fail@plt+0x167c>
   160f4:	movw	r0, #569	; 0x239
   160f8:	ldr	r4, [sp, #184]	; 0xb8
   160fc:	movt	r0, #2
   16100:	ldrb	sl, [r0, r2]
   16104:	b	12c48 <__assert_fail@plt+0x1690>
   16108:	mov	r0, #1
   1610c:	strb	r0, [r8, #180]	; 0xb4
   16110:	ldr	r0, [sp, #100]	; 0x64
   16114:	vst1.64	{d16-d17}, [r0]
   16118:	ldr	r0, [sp, #92]	; 0x5c
   1611c:	str	lr, [r0]
   16120:	str	ip, [r0, #4]
   16124:	b	15960 <__assert_fail@plt+0x43a8>
   16128:	mov	r0, #1
   1612c:	strb	r0, [r8, #180]	; 0xb4
   16130:	ldr	r0, [sp, #100]	; 0x64
   16134:	vst1.64	{d16-d17}, [r0]
   16138:	ldr	r0, [sp, #92]	; 0x5c
   1613c:	strd	r6, [r0]
   16140:	b	16018 <__assert_fail@plt+0x4a60>
   16144:	mov	r9, r4
   16148:	b	13324 <__assert_fail@plt+0x1d6c>
   1614c:	movw	r0, #1720	; 0x6b8
   16150:	movt	r0, #2
   16154:	b	13238 <__assert_fail@plt+0x1c80>
   16158:	movw	r0, #1720	; 0x6b8
   1615c:	movt	r0, #2
   16160:	add	r9, r0, #24
   16164:	b	13324 <__assert_fail@plt+0x1d6c>
   16168:	movw	r0, #1720	; 0x6b8
   1616c:	movt	r0, #2
   16170:	add	r9, r0, #36	; 0x24
   16174:	b	13324 <__assert_fail@plt+0x1d6c>
   16178:	movw	r0, #1720	; 0x6b8
   1617c:	movt	r0, #2
   16180:	add	r9, r0, #48	; 0x30
   16184:	b	13324 <__assert_fail@plt+0x1d6c>
   16188:	movw	r0, #1720	; 0x6b8
   1618c:	movt	r0, #2
   16190:	add	r9, r0, #60	; 0x3c
   16194:	b	13324 <__assert_fail@plt+0x1d6c>
   16198:	movw	r0, #1720	; 0x6b8
   1619c:	movt	r0, #2
   161a0:	add	r9, r0, #72	; 0x48
   161a4:	b	13324 <__assert_fail@plt+0x1d6c>
   161a8:	movw	r0, #1720	; 0x6b8
   161ac:	movt	r0, #2
   161b0:	add	r9, r0, #84	; 0x54
   161b4:	b	13324 <__assert_fail@plt+0x1d6c>
   161b8:	movw	r0, #1720	; 0x6b8
   161bc:	movt	r0, #2
   161c0:	add	r9, r0, #96	; 0x60
   161c4:	b	13324 <__assert_fail@plt+0x1d6c>
   161c8:	movw	r0, #1720	; 0x6b8
   161cc:	movt	r0, #2
   161d0:	add	r9, r0, #108	; 0x6c
   161d4:	b	13324 <__assert_fail@plt+0x1d6c>
   161d8:	movw	r0, #1720	; 0x6b8
   161dc:	movt	r0, #2
   161e0:	add	r9, r0, #120	; 0x78
   161e4:	b	13324 <__assert_fail@plt+0x1d6c>
   161e8:	movw	r0, #1720	; 0x6b8
   161ec:	movt	r0, #2
   161f0:	add	r9, r0, #132	; 0x84
   161f4:	b	13324 <__assert_fail@plt+0x1d6c>
   161f8:	movw	r0, #1720	; 0x6b8
   161fc:	movt	r0, #2
   16200:	add	r9, r0, #144	; 0x90
   16204:	b	13324 <__assert_fail@plt+0x1d6c>
   16208:	movw	r0, #1720	; 0x6b8
   1620c:	movt	r0, #2
   16210:	add	r9, r0, #156	; 0x9c
   16214:	b	13324 <__assert_fail@plt+0x1d6c>
   16218:	movw	r0, #1720	; 0x6b8
   1621c:	movt	r0, #2
   16220:	add	r9, r0, #168	; 0xa8
   16224:	b	13324 <__assert_fail@plt+0x1d6c>
   16228:	movw	r0, #1720	; 0x6b8
   1622c:	movt	r0, #2
   16230:	add	r9, r0, #180	; 0xb4
   16234:	b	13324 <__assert_fail@plt+0x1d6c>
   16238:	movw	r0, #1720	; 0x6b8
   1623c:	movt	r0, #2
   16240:	add	r9, r0, #192	; 0xc0
   16244:	b	13324 <__assert_fail@plt+0x1d6c>
   16248:	movw	r0, #1720	; 0x6b8
   1624c:	movt	r0, #2
   16250:	add	r9, r0, #204	; 0xcc
   16254:	b	13324 <__assert_fail@plt+0x1d6c>
   16258:	movw	r0, #1720	; 0x6b8
   1625c:	movt	r0, #2
   16260:	add	r9, r0, #216	; 0xd8
   16264:	b	13324 <__assert_fail@plt+0x1d6c>
   16268:	movw	r0, #1720	; 0x6b8
   1626c:	movt	r0, #2
   16270:	add	r9, r0, #228	; 0xe4
   16274:	b	13324 <__assert_fail@plt+0x1d6c>
   16278:	cmp	r1, #0
   1627c:	beq	162fc <__assert_fail@plt+0x4d44>
   16280:	cmp	r1, #46	; 0x2e
   16284:	sub	r2, fp, #72	; 0x48
   16288:	ldr	r0, [sp, #84]	; 0x54
   1628c:	sub	r1, r1, #46	; 0x2e
   16290:	moveq	r0, r2
   16294:	ldrb	r2, [fp, #-71]	; 0xffffffb9
   16298:	clz	r1, r1
   1629c:	lsr	r1, r1, #5
   162a0:	cmp	r2, #0
   162a4:	strb	r2, [r0]
   162a8:	beq	162dc <__assert_fail@plt+0x4d24>
   162ac:	ldr	r2, [sp, #84]	; 0x54
   162b0:	ldrb	r3, [r2]
   162b4:	ldrb	r5, [r2, #1]!
   162b8:	cmp	r3, #46	; 0x2e
   162bc:	sub	r3, r3, #46	; 0x2e
   162c0:	clz	r3, r3
   162c4:	addne	r0, r0, #1
   162c8:	cmp	r5, #0
   162cc:	lsr	r3, r3, #5
   162d0:	strb	r5, [r0]
   162d4:	orr	r1, r1, r3
   162d8:	bne	162b0 <__assert_fail@plt+0x4cf8>
   162dc:	tst	r1, #1
   162e0:	beq	162fc <__assert_fail@plt+0x4d44>
   162e4:	mov	r0, r8
   162e8:	sub	r1, fp, #72	; 0x48
   162ec:	bl	19d38 <__assert_fail@plt+0x8780>
   162f0:	mov	r9, r0
   162f4:	cmp	r0, #0
   162f8:	bne	13324 <__assert_fail@plt+0x1d6c>
   162fc:	ldrb	r0, [r8, #181]	; 0xb5
   16300:	mov	r5, #63	; 0x3f
   16304:	cmp	r0, #0
   16308:	beq	13344 <__assert_fail@plt+0x1d8c>
   1630c:	movw	r1, #3363	; 0xd23
   16310:	mov	r0, #0
   16314:	mov	r2, #5
   16318:	movt	r1, #2
   1631c:	bl	11318 <dcgettext@plt>
   16320:	sub	r1, fp, #72	; 0x48
   16324:	bl	16be8 <__assert_fail@plt+0x5630>
   16328:	b	13344 <__assert_fail@plt+0x1d8c>
   1632c:	movw	r0, #1972	; 0x7b4
   16330:	movt	r0, #2
   16334:	add	r9, r0, #24
   16338:	b	13324 <__assert_fail@plt+0x1d6c>
   1633c:	movw	r0, #1972	; 0x7b4
   16340:	movt	r0, #2
   16344:	add	r9, r0, #36	; 0x24
   16348:	b	13324 <__assert_fail@plt+0x1d6c>
   1634c:	movw	r0, #1972	; 0x7b4
   16350:	movt	r0, #2
   16354:	add	r9, r0, #48	; 0x30
   16358:	b	13324 <__assert_fail@plt+0x1d6c>
   1635c:	movw	r0, #1972	; 0x7b4
   16360:	movt	r0, #2
   16364:	add	r9, r0, #60	; 0x3c
   16368:	b	13324 <__assert_fail@plt+0x1d6c>
   1636c:	movw	r0, #1972	; 0x7b4
   16370:	movt	r0, #2
   16374:	add	r9, r0, #72	; 0x48
   16378:	b	13324 <__assert_fail@plt+0x1d6c>
   1637c:	movw	r0, #1972	; 0x7b4
   16380:	movt	r0, #2
   16384:	add	r9, r0, #84	; 0x54
   16388:	b	13324 <__assert_fail@plt+0x1d6c>
   1638c:	movw	r0, #1972	; 0x7b4
   16390:	movt	r0, #2
   16394:	add	r9, r0, #96	; 0x60
   16398:	b	13324 <__assert_fail@plt+0x1d6c>
   1639c:	movw	r0, #1972	; 0x7b4
   163a0:	movt	r0, #2
   163a4:	add	r9, r0, #108	; 0x6c
   163a8:	b	13324 <__assert_fail@plt+0x1d6c>
   163ac:	movw	r0, #1972	; 0x7b4
   163b0:	movt	r0, #2
   163b4:	add	r9, r0, #120	; 0x78
   163b8:	b	13324 <__assert_fail@plt+0x1d6c>
   163bc:	movw	r0, #1972	; 0x7b4
   163c0:	movt	r0, #2
   163c4:	add	r9, r0, #132	; 0x84
   163c8:	b	13324 <__assert_fail@plt+0x1d6c>
   163cc:	movw	r0, #1972	; 0x7b4
   163d0:	movt	r0, #2
   163d4:	add	r9, r0, #144	; 0x90
   163d8:	b	13324 <__assert_fail@plt+0x1d6c>
   163dc:	movw	r0, #1972	; 0x7b4
   163e0:	movt	r0, #2
   163e4:	add	r9, r0, #156	; 0x9c
   163e8:	b	13324 <__assert_fail@plt+0x1d6c>
   163ec:	movw	r0, #1972	; 0x7b4
   163f0:	movt	r0, #2
   163f4:	add	r9, r0, #168	; 0xa8
   163f8:	b	13324 <__assert_fail@plt+0x1d6c>
   163fc:	movw	r0, #1972	; 0x7b4
   16400:	movt	r0, #2
   16404:	add	r9, r0, #180	; 0xb4
   16408:	b	13324 <__assert_fail@plt+0x1d6c>
   1640c:	movw	r0, #1972	; 0x7b4
   16410:	movt	r0, #2
   16414:	add	r9, r0, #192	; 0xc0
   16418:	b	13324 <__assert_fail@plt+0x1d6c>
   1641c:	movw	r0, #1972	; 0x7b4
   16420:	movt	r0, #2
   16424:	add	r9, r0, #204	; 0xcc
   16428:	b	13324 <__assert_fail@plt+0x1d6c>
   1642c:	movw	r0, #1972	; 0x7b4
   16430:	movt	r0, #2
   16434:	add	r9, r0, #216	; 0xd8
   16438:	b	13324 <__assert_fail@plt+0x1d6c>
   1643c:	movw	r0, #1972	; 0x7b4
   16440:	movt	r0, #2
   16444:	add	r9, r0, #228	; 0xe4
   16448:	b	13324 <__assert_fail@plt+0x1d6c>
   1644c:	movw	r0, #1972	; 0x7b4
   16450:	movt	r0, #2
   16454:	add	r9, r0, #240	; 0xf0
   16458:	b	13324 <__assert_fail@plt+0x1d6c>
   1645c:	movw	r0, #1972	; 0x7b4
   16460:	movt	r0, #2
   16464:	add	r9, r0, #252	; 0xfc
   16468:	b	13324 <__assert_fail@plt+0x1d6c>
   1646c:	movw	r0, #1972	; 0x7b4
   16470:	movt	r0, #2
   16474:	add	r9, r0, #264	; 0x108
   16478:	b	13324 <__assert_fail@plt+0x1d6c>
   1647c:	movw	r0, #1972	; 0x7b4
   16480:	movt	r0, #2
   16484:	add	r9, r0, #276	; 0x114
   16488:	b	13324 <__assert_fail@plt+0x1d6c>
   1648c:	movw	r0, #1972	; 0x7b4
   16490:	movt	r0, #2
   16494:	add	r9, r0, #288	; 0x120
   16498:	b	13324 <__assert_fail@plt+0x1d6c>
   1649c:	mov	sl, #0
   164a0:	b	164b0 <__assert_fail@plt+0x4ef8>
   164a4:	mov	sl, #1
   164a8:	b	164b0 <__assert_fail@plt+0x4ef8>
   164ac:	mov	sl, #2
   164b0:	mov	r0, sl
   164b4:	sub	sp, fp, #48	; 0x30
   164b8:	vpop	{d8-d9}
   164bc:	add	sp, sp, #4
   164c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164c8:	add	fp, sp, #28
   164cc:	sub	sp, sp, #132	; 0x84
   164d0:	mov	r5, r0
   164d4:	ldrb	r0, [r1, #181]	; 0xb5
   164d8:	cmp	r0, #0
   164dc:	bne	164e8 <__assert_fail@plt+0x4f30>
   164e0:	sub	sp, fp, #28
   164e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164e8:	mov	r4, r1
   164ec:	add	r6, r1, #40	; 0x28
   164f0:	movw	r1, #3101	; 0xc1d
   164f4:	mov	r0, #0
   164f8:	mov	r2, #5
   164fc:	mov	r7, #0
   16500:	movt	r1, #2
   16504:	bl	11318 <dcgettext@plt>
   16508:	mov	r1, r5
   1650c:	bl	16be8 <__assert_fail@plt+0x5630>
   16510:	ldr	r0, [r4, #156]	; 0x9c
   16514:	movw	r8, #8608	; 0x21a0
   16518:	movt	r8, #3
   1651c:	cmp	r0, #0
   16520:	beq	16574 <__assert_fail@plt+0x4fbc>
   16524:	ldrb	r0, [r4, #182]	; 0xb6
   16528:	cmp	r0, #0
   1652c:	bne	16574 <__assert_fail@plt+0x4fbc>
   16530:	add	r2, r4, #64	; 0x40
   16534:	add	r1, r4, #56	; 0x38
   16538:	ldm	r6, {r3, r5}
   1653c:	ldr	r0, [r8]
   16540:	ldm	r2, {r2, r9}
   16544:	ldm	r1, {r1, r7}
   16548:	stm	sp, {r3, r5}
   1654c:	str	r7, [sp, #12]
   16550:	str	r9, [sp, #20]
   16554:	mov	r7, #1
   16558:	str	r2, [sp, #16]
   1655c:	movw	r2, #3118	; 0xc2e
   16560:	str	r1, [sp, #8]
   16564:	mov	r1, #1
   16568:	movt	r2, #2
   1656c:	bl	114d4 <__fprintf_chk@plt>
   16570:	strb	r7, [r4, #182]	; 0xb6
   16574:	ldrb	r0, [r4, #180]	; 0xb4
   16578:	ldrb	r1, [r4, #187]	; 0xbb
   1657c:	cmp	r0, r1
   16580:	beq	165d4 <__assert_fail@plt+0x501c>
   16584:	cmp	r7, #0
   16588:	beq	16598 <__assert_fail@plt+0x4fe0>
   1658c:	ldr	r1, [r8]
   16590:	mov	r0, #32
   16594:	bl	11528 <fputc@plt>
   16598:	movw	r1, #3147	; 0xc4b
   1659c:	ldr	r5, [r8]
   165a0:	mov	r0, #0
   165a4:	mov	r2, #5
   165a8:	movt	r1, #2
   165ac:	bl	11318 <dcgettext@plt>
   165b0:	mov	r2, r0
   165b4:	ldrd	r0, [r6]
   165b8:	mov	r7, #1
   165bc:	stm	sp, {r0, r1}
   165c0:	mov	r0, r5
   165c4:	mov	r1, #1
   165c8:	bl	114d4 <__fprintf_chk@plt>
   165cc:	ldrb	r0, [r4, #180]	; 0xb4
   165d0:	strb	r0, [r4, #187]	; 0xbb
   165d4:	ldr	r0, [r4, #172]	; 0xac
   165d8:	cmp	r0, #0
   165dc:	beq	16680 <__assert_fail@plt+0x50c8>
   165e0:	ldrb	r0, [r4, #185]	; 0xb9
   165e4:	cmp	r0, #0
   165e8:	bne	16680 <__assert_fail@plt+0x50c8>
   165ec:	add	r1, r4, #72	; 0x48
   165f0:	add	r2, r4, #80	; 0x50
   165f4:	ldr	r5, [r4, #88]	; 0x58
   165f8:	ldr	r0, [r8]
   165fc:	ldr	r6, [r1]
   16600:	ldr	r1, [r1, #4]
   16604:	ldm	r2, {r2, r9}
   16608:	asr	r3, r5, #31
   1660c:	str	r6, [sp]
   16610:	stmib	sp, {r1, r2, r9}
   16614:	movw	r2, #3160	; 0xc58
   16618:	eor	r1, r7, #1
   1661c:	str	r5, [sp, #16]
   16620:	str	r3, [sp, #20]
   16624:	movt	r2, #2
   16628:	add	r2, r2, r1
   1662c:	mov	r1, #1
   16630:	bl	114d4 <__fprintf_chk@plt>
   16634:	ldr	r3, [r4, #92]	; 0x5c
   16638:	cmp	r3, #0
   1663c:	beq	16654 <__assert_fail@plt+0x509c>
   16640:	ldr	r0, [r8]
   16644:	movw	r2, #3182	; 0xc6e
   16648:	mov	r1, #1
   1664c:	movt	r2, #2
   16650:	bl	114d4 <__fprintf_chk@plt>
   16654:	ldr	r0, [r4, #28]
   16658:	cmp	r0, #1
   1665c:	bne	16678 <__assert_fail@plt+0x50c0>
   16660:	ldr	r3, [r8]
   16664:	movw	r0, #3188	; 0xc74
   16668:	mov	r1, #2
   1666c:	mov	r2, #1
   16670:	movt	r0, #2
   16674:	bl	1136c <fwrite@plt>
   16678:	mov	r7, #1
   1667c:	strb	r7, [r4, #185]	; 0xb9
   16680:	ldr	r0, [r4, #160]	; 0xa0
   16684:	cmp	r0, #0
   16688:	beq	16700 <__assert_fail@plt+0x5148>
   1668c:	ldrb	r0, [r4, #183]	; 0xb7
   16690:	cmp	r0, #0
   16694:	bne	16700 <__assert_fail@plt+0x5148>
   16698:	add	r9, r4, #8
   1669c:	cmp	r7, #0
   166a0:	beq	166b0 <__assert_fail@plt+0x50f8>
   166a4:	ldr	r1, [r8]
   166a8:	mov	r0, #32
   166ac:	bl	11528 <fputc@plt>
   166b0:	movw	r1, #3191	; 0xc77
   166b4:	ldr	r5, [r8]
   166b8:	mov	r0, #0
   166bc:	mov	r2, #5
   166c0:	movt	r1, #2
   166c4:	bl	11318 <dcgettext@plt>
   166c8:	mov	r6, r0
   166cc:	add	r1, sp, #32
   166d0:	mov	r0, r4
   166d4:	bl	19c40 <__assert_fail@plt+0x8688>
   166d8:	mov	r3, r0
   166dc:	ldrd	r0, [r9]
   166e0:	ldr	r2, [r4, #16]
   166e4:	mov	r7, #1
   166e8:	stm	sp, {r0, r1, r2}
   166ec:	mov	r0, r5
   166f0:	mov	r1, #1
   166f4:	mov	r2, r6
   166f8:	bl	114d4 <__fprintf_chk@plt>
   166fc:	strb	r7, [r4, #183]	; 0xb7
   16700:	ldr	r0, [r4, #164]	; 0xa4
   16704:	cmp	r0, #0
   16708:	beq	16760 <__assert_fail@plt+0x51a8>
   1670c:	ldrb	r0, [r4, #184]	; 0xb8
   16710:	cmp	r0, #0
   16714:	bne	16760 <__assert_fail@plt+0x51a8>
   16718:	ldr	r0, [r4, #168]	; 0xa8
   1671c:	movw	r1, #6017	; 0x1781
   16720:	movw	r2, #3235	; 0xca3
   16724:	ldr	r3, [r4, #20]
   16728:	movt	r1, #2
   1672c:	movt	r2, #2
   16730:	cmp	r0, #0
   16734:	ldr	r0, [r8]
   16738:	moveq	r2, r1
   1673c:	eor	r1, r7, #1
   16740:	mov	r7, #1
   16744:	str	r2, [sp]
   16748:	movw	r2, #3223	; 0xc97
   1674c:	movt	r2, #2
   16750:	add	r2, r2, r1
   16754:	mov	r1, #1
   16758:	bl	114d4 <__fprintf_chk@plt>
   1675c:	strb	r7, [r4, #184]	; 0xb8
   16760:	ldr	r0, [r4, #176]	; 0xb0
   16764:	cmp	r0, #0
   16768:	beq	16878 <__assert_fail@plt+0x52c0>
   1676c:	ldrb	r0, [r4, #186]	; 0xba
   16770:	cmp	r0, #0
   16774:	bne	16878 <__assert_fail@plt+0x52c0>
   16778:	ldr	r6, [r4, #24]
   1677c:	mov	r0, #43	; 0x2b
   16780:	ldr	r1, [r8]
   16784:	movw	r3, #3271	; 0xcc7
   16788:	add	sl, sp, #32
   1678c:	mov	r2, #27
   16790:	mov	r5, #1
   16794:	movt	r3, #2
   16798:	cmp	r6, #0
   1679c:	str	r1, [sp, #28]
   167a0:	movwmi	r0, #45	; 0x2d
   167a4:	str	r0, [sp]
   167a8:	movw	r0, #46021	; 0xb3c5
   167ac:	movt	r0, #37282	; 0x91a2
   167b0:	smmla	r0, r6, r0, r6
   167b4:	asr	r1, r0, #11
   167b8:	add	r9, r1, r0, lsr #31
   167bc:	mov	r1, #1
   167c0:	cmp	r9, #0
   167c4:	mov	r0, r9
   167c8:	rsbmi	r0, r9, #0
   167cc:	str	r0, [sp, #4]
   167d0:	mov	r0, sl
   167d4:	bl	11498 <__sprintf_chk@plt>
   167d8:	mov	r1, #3600	; 0xe10
   167dc:	movw	r3, #3240	; 0xca8
   167e0:	eor	r2, r7, #1
   167e4:	mls	r1, r9, r1, r6
   167e8:	movt	r3, #2
   167ec:	add	r2, r3, r2
   167f0:	cmp	r1, #0
   167f4:	beq	168b8 <__assert_fail@plt+0x5300>
   167f8:	add	r9, sl, r0
   167fc:	mov	r3, #58	; 0x3a
   16800:	rsbmi	r1, r1, #0
   16804:	mov	ip, #48	; 0x30
   16808:	movw	lr, #52429	; 0xcccd
   1680c:	strb	r3, [r9]
   16810:	movw	r3, #33205	; 0x81b5
   16814:	uxth	r7, r1
   16818:	movt	lr, #52428	; 0xcccc
   1681c:	movt	r3, #6990	; 0x1b4e
   16820:	umull	r3, r6, r7, r3
   16824:	add	r6, ip, r6, lsr #6
   16828:	strb	r6, [r9, #1]
   1682c:	movw	r6, #34953	; 0x8889
   16830:	movt	r6, #34952	; 0x8888
   16834:	umull	r7, r6, r7, r6
   16838:	ubfx	r3, r6, #5, #8
   1683c:	umull	r7, r0, r3, lr
   16840:	lsr	r0, r0, #3
   16844:	add	r0, r0, r0, lsl #2
   16848:	sub	r0, r3, r0, lsl #1
   1684c:	orr	r0, r0, #48	; 0x30
   16850:	strb	r0, [r9, #2]
   16854:	lsr	r0, r6, #5
   16858:	lsl	r0, r0, #4
   1685c:	sub	r0, r0, r6, lsr #5
   16860:	sub	r1, r1, r0, lsl #2
   16864:	movw	r0, #65535	; 0xffff
   16868:	tst	r1, r0
   1686c:	bne	16880 <__assert_fail@plt+0x52c8>
   16870:	add	r0, r9, #3
   16874:	b	168b0 <__assert_fail@plt+0x52f8>
   16878:	mov	r5, r7
   1687c:	b	168cc <__assert_fail@plt+0x5314>
   16880:	mov	r0, #58	; 0x3a
   16884:	strb	r0, [r9, #3]
   16888:	uxtb	r0, r1
   1688c:	umull	r0, r3, r0, lr
   16890:	orr	r0, ip, r3, lsr #3
   16894:	strb	r0, [r9, #4]
   16898:	lsr	r0, r3, #3
   1689c:	add	r0, r0, r0, lsl #2
   168a0:	sub	r0, r1, r0, lsl #1
   168a4:	orr	r0, r0, #48	; 0x30
   168a8:	strb	r0, [r9, #5]
   168ac:	add	r0, r9, #6
   168b0:	mov	r1, #0
   168b4:	strb	r1, [r0]
   168b8:	ldr	r0, [sp, #28]
   168bc:	add	r3, sp, #32
   168c0:	mov	r1, #1
   168c4:	bl	114d4 <__fprintf_chk@plt>
   168c8:	strb	r5, [r4, #186]	; 0xba
   168cc:	ldrb	r0, [r4, #152]	; 0x98
   168d0:	cmp	r0, #0
   168d4:	beq	16924 <__assert_fail@plt+0x536c>
   168d8:	ldr	r6, [r4, #88]	; 0x58
   168dc:	cmp	r5, #0
   168e0:	beq	168f0 <__assert_fail@plt+0x5338>
   168e4:	ldr	r1, [r8]
   168e8:	mov	r0, #32
   168ec:	bl	11528 <fputc@plt>
   168f0:	movw	r1, #3247	; 0xcaf
   168f4:	ldr	r4, [r8]
   168f8:	mov	r0, #0
   168fc:	mov	r2, #5
   16900:	movt	r1, #2
   16904:	bl	11318 <dcgettext@plt>
   16908:	mov	r2, r0
   1690c:	asr	r0, r6, #31
   16910:	mov	r1, #1
   16914:	str	r6, [sp]
   16918:	str	r0, [sp, #4]
   1691c:	mov	r0, r4
   16920:	bl	114d4 <__fprintf_chk@plt>
   16924:	ldr	r1, [r8]
   16928:	mov	r0, #10
   1692c:	bl	11528 <fputc@plt>
   16930:	sub	sp, fp, #28
   16934:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16938:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1693c:	add	fp, sp, #28
   16940:	sub	sp, sp, #28
   16944:	mov	r5, r0
   16948:	ldrb	r0, [r1, #181]	; 0xb5
   1694c:	cmp	r0, #0
   16950:	beq	16a04 <__assert_fail@plt+0x544c>
   16954:	add	r0, r1, #112	; 0x70
   16958:	mov	r4, r1
   1695c:	add	r7, r1, #96	; 0x60
   16960:	add	sl, r1, #104	; 0x68
   16964:	add	r9, r1, #128	; 0x80
   16968:	add	r8, r1, #136	; 0x88
   1696c:	mov	r2, #5
   16970:	str	r0, [sp, #20]
   16974:	add	r0, r1, #120	; 0x78
   16978:	movw	r1, #3101	; 0xc1d
   1697c:	movt	r1, #2
   16980:	str	r0, [sp, #16]
   16984:	mov	r0, #0
   16988:	bl	11318 <dcgettext@plt>
   1698c:	mov	r1, r5
   16990:	bl	16be8 <__assert_fail@plt+0x5630>
   16994:	ldr	r2, [r7]
   16998:	ldr	r1, [r7, #4]
   1699c:	movw	r6, #8608	; 0x21a0
   169a0:	movw	r5, #3346	; 0xd12
   169a4:	str	r8, [sp, #24]
   169a8:	movt	r6, #3
   169ac:	movt	r5, #2
   169b0:	orrs	r0, r2, r1
   169b4:	beq	16a0c <__assert_fail@plt+0x5454>
   169b8:	ldr	r0, [r6]
   169bc:	movw	r3, #3294	; 0xcde
   169c0:	str	r2, [sp]
   169c4:	add	r2, r5, #1
   169c8:	mov	r7, #1
   169cc:	movt	r3, #2
   169d0:	stmib	sp, {r1, r3}
   169d4:	mov	r1, #1
   169d8:	bl	114d4 <__fprintf_chk@plt>
   169dc:	ldr	r2, [sl]
   169e0:	ldr	r1, [sl, #4]
   169e4:	mov	sl, r5
   169e8:	mov	r5, r6
   169ec:	ldr	r8, [sp, #16]
   169f0:	ldr	r6, [sp, #20]
   169f4:	mov	r3, #0
   169f8:	orrs	r0, r2, r1
   169fc:	bne	16a30 <__assert_fail@plt+0x5478>
   16a00:	b	16a54 <__assert_fail@plt+0x549c>
   16a04:	sub	sp, fp, #28
   16a08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a0c:	ldr	r2, [sl]
   16a10:	ldr	r1, [sl, #4]
   16a14:	mov	sl, r5
   16a18:	mov	r5, r6
   16a1c:	ldr	r8, [sp, #16]
   16a20:	ldr	r6, [sp, #20]
   16a24:	mov	r3, #1
   16a28:	orrs	r0, r2, r1
   16a2c:	beq	16b80 <__assert_fail@plt+0x55c8>
   16a30:	ldr	r0, [r5]
   16a34:	movw	r7, #3302	; 0xce6
   16a38:	str	r2, [sp]
   16a3c:	add	r2, sl, r3
   16a40:	movt	r7, #2
   16a44:	stmib	sp, {r1, r7}
   16a48:	mov	r1, #1
   16a4c:	mov	r7, #1
   16a50:	bl	114d4 <__fprintf_chk@plt>
   16a54:	ldr	r2, [r6]
   16a58:	ldr	r1, [r6, #4]
   16a5c:	orrs	r0, r2, r1
   16a60:	beq	16a8c <__assert_fail@plt+0x54d4>
   16a64:	ldr	r0, [r5]
   16a68:	movw	r3, #3311	; 0xcef
   16a6c:	str	r2, [sp]
   16a70:	movt	r3, #2
   16a74:	stmib	sp, {r1, r3}
   16a78:	eor	r1, r7, #1
   16a7c:	mov	r7, #1
   16a80:	add	r2, sl, r1
   16a84:	mov	r1, #1
   16a88:	bl	114d4 <__fprintf_chk@plt>
   16a8c:	ldr	r2, [r8]
   16a90:	ldr	r1, [r8, #4]
   16a94:	orrs	r0, r2, r1
   16a98:	beq	16ac4 <__assert_fail@plt+0x550c>
   16a9c:	ldr	r0, [r5]
   16aa0:	movw	r3, #3318	; 0xcf6
   16aa4:	str	r2, [sp]
   16aa8:	movt	r3, #2
   16aac:	stmib	sp, {r1, r3}
   16ab0:	eor	r1, r7, #1
   16ab4:	mov	r7, #1
   16ab8:	add	r2, sl, r1
   16abc:	mov	r1, #1
   16ac0:	bl	114d4 <__fprintf_chk@plt>
   16ac4:	ldr	r2, [r9]
   16ac8:	ldr	r1, [r9, #4]
   16acc:	orrs	r0, r2, r1
   16ad0:	beq	16afc <__assert_fail@plt+0x5544>
   16ad4:	ldr	r0, [r5]
   16ad8:	movw	r3, #3326	; 0xcfe
   16adc:	str	r2, [sp]
   16ae0:	movt	r3, #2
   16ae4:	stmib	sp, {r1, r3}
   16ae8:	eor	r1, r7, #1
   16aec:	mov	r7, #1
   16af0:	add	r2, sl, r1
   16af4:	mov	r1, #1
   16af8:	bl	114d4 <__fprintf_chk@plt>
   16afc:	ldr	r0, [sp, #24]
   16b00:	ldr	r2, [r0]
   16b04:	ldr	r1, [r0, #4]
   16b08:	orrs	r0, r2, r1
   16b0c:	beq	16b38 <__assert_fail@plt+0x5580>
   16b10:	ldr	r0, [r5]
   16b14:	movw	r3, #2918	; 0xb66
   16b18:	str	r2, [sp]
   16b1c:	movt	r3, #2
   16b20:	stmib	sp, {r1, r3}
   16b24:	eor	r1, r7, #1
   16b28:	mov	r7, #1
   16b2c:	add	r2, sl, r1
   16b30:	mov	r1, #1
   16b34:	bl	114d4 <__fprintf_chk@plt>
   16b38:	ldr	r1, [r4, #144]	; 0x90
   16b3c:	cmp	r1, #0
   16b40:	beq	16b6c <__assert_fail@plt+0x55b4>
   16b44:	movw	r2, #3334	; 0xd06
   16b48:	ldr	r0, [r5]
   16b4c:	asr	r3, r1, #31
   16b50:	stm	sp, {r1, r3}
   16b54:	eor	r1, r7, #1
   16b58:	movt	r2, #2
   16b5c:	str	r2, [sp, #8]
   16b60:	add	r2, sl, r1
   16b64:	mov	r1, #1
   16b68:	bl	114d4 <__fprintf_chk@plt>
   16b6c:	ldr	r1, [r5]
   16b70:	mov	r0, #10
   16b74:	sub	sp, fp, #28
   16b78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b7c:	b	11528 <fputc@plt>
   16b80:	ldrd	r0, [r6]
   16b84:	mov	r7, #0
   16b88:	orrs	r0, r0, r1
   16b8c:	bne	16a54 <__assert_fail@plt+0x549c>
   16b90:	ldrd	r0, [r8]
   16b94:	orrs	r0, r0, r1
   16b98:	bne	16a54 <__assert_fail@plt+0x549c>
   16b9c:	ldrd	r0, [r9]
   16ba0:	orrs	r0, r0, r1
   16ba4:	bne	16a54 <__assert_fail@plt+0x549c>
   16ba8:	ldr	r0, [sp, #24]
   16bac:	ldrd	r0, [r0]
   16bb0:	orrs	r0, r0, r1
   16bb4:	bne	16a54 <__assert_fail@plt+0x549c>
   16bb8:	ldr	r0, [r4, #144]	; 0x90
   16bbc:	cmp	r0, #0
   16bc0:	bne	16a54 <__assert_fail@plt+0x549c>
   16bc4:	movw	r1, #3278	; 0xcce
   16bc8:	mov	r0, #0
   16bcc:	mov	r2, #5
   16bd0:	movt	r1, #2
   16bd4:	bl	11318 <dcgettext@plt>
   16bd8:	ldr	r1, [r5]
   16bdc:	sub	sp, fp, #28
   16be0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16be4:	b	11570 <fputs@plt>
   16be8:	sub	sp, sp, #12
   16bec:	push	{r4, r5, fp, lr}
   16bf0:	add	fp, sp, #8
   16bf4:	sub	sp, sp, #4
   16bf8:	movw	r5, #8608	; 0x21a0
   16bfc:	mov	r4, r0
   16c00:	add	r0, fp, #8
   16c04:	movt	r5, #3
   16c08:	stm	r0, {r1, r2, r3}
   16c0c:	movw	r0, #3356	; 0xd1c
   16c10:	mov	r1, #6
   16c14:	mov	r2, #1
   16c18:	movt	r0, #2
   16c1c:	ldr	r3, [r5]
   16c20:	bl	1136c <fwrite@plt>
   16c24:	ldr	r0, [r5]
   16c28:	add	r3, fp, #8
   16c2c:	mov	r1, #1
   16c30:	mov	r2, r4
   16c34:	str	r3, [sp]
   16c38:	bl	113f0 <__vfprintf_chk@plt>
   16c3c:	sub	sp, fp, #8
   16c40:	pop	{r4, r5, fp, lr}
   16c44:	add	sp, sp, #12
   16c48:	bx	lr
   16c4c:	b	16c50 <__assert_fail@plt+0x5698>
   16c50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c54:	add	fp, sp, #28
   16c58:	sub	sp, sp, #924	; 0x39c
   16c5c:	str	r0, [sp, #68]	; 0x44
   16c60:	mov	r0, r1
   16c64:	str	r3, [sp, #80]	; 0x50
   16c68:	mov	r7, r2
   16c6c:	mov	r4, r1
   16c70:	bl	11468 <strlen@plt>
   16c74:	mov	r5, r0
   16c78:	add	sl, sp, #160	; 0xa0
   16c7c:	cmp	r7, #0
   16c80:	bne	16c90 <__assert_fail@plt+0x56d8>
   16c84:	sub	r7, fp, #456	; 0x1c8
   16c88:	mov	r0, r7
   16c8c:	bl	12b04 <__assert_fail@plt+0x154c>
   16c90:	add	r0, r4, r5
   16c94:	ldr	r2, [fp, #12]
   16c98:	ldr	r6, [r7]
   16c9c:	add	r3, sl, #40	; 0x28
   16ca0:	add	r5, sl, #88	; 0x58
   16ca4:	add	r9, r4, #4
   16ca8:	str	r0, [sp, #60]	; 0x3c
   16cac:	add	r0, sl, #8
   16cb0:	str	r0, [sp, #52]	; 0x34
   16cb4:	add	r0, sl, #56	; 0x38
   16cb8:	str	r0, [sp, #104]	; 0x68
   16cbc:	add	r0, sl, #64	; 0x40
   16cc0:	str	r0, [sp, #100]	; 0x64
   16cc4:	add	r0, sl, #72	; 0x48
   16cc8:	str	r0, [sp, #96]	; 0x60
   16ccc:	add	r0, sl, #80	; 0x50
   16cd0:	str	r0, [sp, #92]	; 0x5c
   16cd4:	add	r0, sl, #96	; 0x60
   16cd8:	str	r0, [sp, #88]	; 0x58
   16cdc:	add	r0, sl, #104	; 0x68
   16ce0:	str	r0, [sp, #44]	; 0x2c
   16ce4:	add	r0, sl, #112	; 0x70
   16ce8:	str	r0, [sp, #48]	; 0x30
   16cec:	add	r0, sl, #120	; 0x78
   16cf0:	str	r0, [sp, #40]	; 0x28
   16cf4:	add	r0, sl, #128	; 0x80
   16cf8:	str	r0, [sp, #36]	; 0x24
   16cfc:	add	r0, sl, #136	; 0x88
   16d00:	str	r0, [sp, #32]
   16d04:	ldr	r0, [r7, #4]
   16d08:	str	r0, [sp, #76]	; 0x4c
   16d0c:	b	16d14 <__assert_fail@plt+0x575c>
   16d10:	add	r9, r9, #1
   16d14:	ldrb	r0, [r9, #-4]
   16d18:	sub	r1, r0, #9
   16d1c:	cmp	r1, #5
   16d20:	bcc	16d10 <__assert_fail@plt+0x5758>
   16d24:	cmp	r0, #32
   16d28:	beq	16d10 <__assert_fail@plt+0x5758>
   16d2c:	vmov.i32	q8, #0	; 0x00000000
   16d30:	str	r6, [sp, #84]	; 0x54
   16d34:	add	r6, sp, #440	; 0x1b8
   16d38:	mov	r0, #52	; 0x34
   16d3c:	sub	r8, r9, #4
   16d40:	str	r2, [sp, #64]	; 0x40
   16d44:	mov	r2, #4
   16d48:	str	r3, [sp, #108]	; 0x6c
   16d4c:	mov	r1, r6
   16d50:	add	r4, r6, #32
   16d54:	vst1.64	{d16-d17}, [r1], r0
   16d58:	mov	r0, #0
   16d5c:	vst1.64	{d16-d17}, [r4]
   16d60:	str	r0, [r1]
   16d64:	add	r1, r6, #16
   16d68:	str	r0, [sp, #488]	; 0x1e8
   16d6c:	mov	r0, r8
   16d70:	str	r1, [sp, #72]	; 0x48
   16d74:	vst1.64	{d16-d17}, [r1]
   16d78:	movw	r1, #3967	; 0xf7f
   16d7c:	movt	r1, #2
   16d80:	bl	1157c <strncmp@plt>
   16d84:	cmp	r0, #0
   16d88:	str	r5, [sp, #56]	; 0x38
   16d8c:	beq	17060 <__assert_fail@plt+0x5aa8>
   16d90:	ldr	r9, [fp, #8]
   16d94:	mov	r0, #0
   16d98:	str	r0, [sp, #112]	; 0x70
   16d9c:	mov	r5, r9
   16da0:	add	r2, sp, #396	; 0x18c
   16da4:	mov	r0, r5
   16da8:	mov	r1, r7
   16dac:	bl	1c01c <__assert_fail@plt+0xaa64>
   16db0:	cmp	r0, #0
   16db4:	mov	r7, #0
   16db8:	beq	176e4 <__assert_fail@plt+0x612c>
   16dbc:	ldrb	r0, [r8]
   16dc0:	ldr	r1, [sp, #80]	; 0x50
   16dc4:	movw	r2, #1900	; 0x76c
   16dc8:	vld1.64	{d18-d19}, [r4]
   16dcc:	ldr	r4, [sp, #72]	; 0x48
   16dd0:	ldr	r7, [sp, #88]	; 0x58
   16dd4:	add	lr, sp, #256	; 0x100
   16dd8:	cmp	r0, #0
   16ddc:	ldr	r0, [sp, #416]	; 0x1a0
   16de0:	and	r1, r1, #1
   16de4:	vld1.64	{d20-d21}, [r4]
   16de8:	ldr	r4, [sp, #84]	; 0x54
   16dec:	strb	r1, [sp, #341]	; 0x155
   16df0:	movw	r1, #4127	; 0x101f
   16df4:	movt	r1, #2
   16df8:	movne	r1, r8
   16dfc:	str	r1, [sp, #160]	; 0xa0
   16e00:	asr	r1, r0, #31
   16e04:	adds	r0, r0, r2
   16e08:	ldr	r2, [sp, #108]	; 0x6c
   16e0c:	adc	r1, r1, #0
   16e10:	strd	r0, [r2]
   16e14:	ldr	r1, [sp, #412]	; 0x19c
   16e18:	mov	r0, #0
   16e1c:	str	r0, [sp, #208]	; 0xd0
   16e20:	add	r2, r1, #1
   16e24:	ldr	r1, [sp, #104]	; 0x68
   16e28:	asr	r3, r2, #31
   16e2c:	strd	r2, [r1]
   16e30:	ldr	r2, [sp, #408]	; 0x198
   16e34:	ldr	r1, [sp, #100]	; 0x64
   16e38:	asr	r3, r2, #31
   16e3c:	strd	r2, [r1]
   16e40:	ldr	r2, [sp, #404]	; 0x194
   16e44:	ldr	r1, [sp, #96]	; 0x60
   16e48:	asr	r3, r2, #31
   16e4c:	strd	r2, [r1]
   16e50:	ldr	r2, [sp, #400]	; 0x190
   16e54:	ldr	r1, [sp, #92]	; 0x5c
   16e58:	asr	r3, r2, #31
   16e5c:	strd	r2, [r1]
   16e60:	ldr	r2, [sp, #76]	; 0x4c
   16e64:	mov	r1, #48	; 0x30
   16e68:	ldr	r3, [sp, #428]	; 0x1ac
   16e6c:	vld1.64	{d16-d17}, [r6], r1
   16e70:	vldr	d22, [r6]
   16e74:	str	r2, [sp, #252]	; 0xfc
   16e78:	mov	r2, #2
   16e7c:	str	r3, [fp, #-144]	; 0xffffff70
   16e80:	str	r2, [sp, #188]	; 0xbc
   16e84:	ldr	r2, [sp, #396]	; 0x18c
   16e88:	str	r2, [sp, #248]	; 0xf8
   16e8c:	add	r2, r7, #32
   16e90:	vst1.64	{d18-d19}, [r2]
   16e94:	add	r2, r7, #16
   16e98:	vst1.64	{d20-d21}, [r2]
   16e9c:	mov	r2, r7
   16ea0:	vst1.64	{d16-d17}, [r2], r1
   16ea4:	vmov.i32	q8, #0	; 0x00000000
   16ea8:	add	r1, sl, #156	; 0x9c
   16eac:	vstr	d22, [r2]
   16eb0:	vst1.32	{d16-d17}, [r1]
   16eb4:	add	r1, sl, #165	; 0xa5
   16eb8:	vst1.8	{d16-d17}, [r1]
   16ebc:	strh	r0, [lr, #56]	; 0x38
   16ec0:	str	r0, [sp, #342]	; 0x156
   16ec4:	str	r0, [sp, #345]	; 0x159
   16ec8:	str	r0, [sp, #364]	; 0x16c
   16ecc:	movw	r0, #269	; 0x10d
   16ed0:	str	r3, [sp, #360]	; 0x168
   16ed4:	str	r0, [sp, #356]	; 0x164
   16ed8:	ldr	r0, [sp, #436]	; 0x1b4
   16edc:	str	r0, [sp, #352]	; 0x160
   16ee0:	add	r0, r4, #42752	; 0xa700
   16ee4:	add	r0, r0, #7733248	; 0x760000
   16ee8:	cmp	r0, r4
   16eec:	str	r0, [fp, #-348]	; 0xfffffea4
   16ef0:	bvs	16fd0 <__assert_fail@plt+0x5a18>
   16ef4:	sub	r1, fp, #348	; 0x15c
   16ef8:	sub	r2, fp, #132	; 0x84
   16efc:	mov	r0, r5
   16f00:	bl	1c01c <__assert_fail@plt+0xaa64>
   16f04:	cmp	r0, #0
   16f08:	beq	16f28 <__assert_fail@plt+0x5970>
   16f0c:	ldr	r0, [fp, #-92]	; 0xffffffa4
   16f10:	cmp	r0, #0
   16f14:	beq	16f28 <__assert_fail@plt+0x5970>
   16f18:	ldr	r1, [fp, #-100]	; 0xffffff9c
   16f1c:	ldr	r2, [sp, #360]	; 0x168
   16f20:	cmp	r1, r2
   16f24:	bne	16fb8 <__assert_fail@plt+0x5a00>
   16f28:	add	r0, r4, #19968	; 0x4e00
   16f2c:	add	r0, r0, #15532032	; 0xed0000
   16f30:	cmp	r0, r4
   16f34:	str	r0, [fp, #-348]	; 0xfffffea4
   16f38:	bvs	16fd0 <__assert_fail@plt+0x5a18>
   16f3c:	sub	r1, fp, #348	; 0x15c
   16f40:	sub	r2, fp, #132	; 0x84
   16f44:	mov	r0, r5
   16f48:	bl	1c01c <__assert_fail@plt+0xaa64>
   16f4c:	cmp	r0, #0
   16f50:	beq	16f70 <__assert_fail@plt+0x59b8>
   16f54:	ldr	r0, [fp, #-92]	; 0xffffffa4
   16f58:	cmp	r0, #0
   16f5c:	beq	16f70 <__assert_fail@plt+0x59b8>
   16f60:	ldr	r1, [fp, #-100]	; 0xffffff9c
   16f64:	ldr	r2, [sp, #360]	; 0x168
   16f68:	cmp	r1, r2
   16f6c:	bne	16fb8 <__assert_fail@plt+0x5a00>
   16f70:	movw	r0, #62720	; 0xf500
   16f74:	movt	r0, #355	; 0x163
   16f78:	adds	r0, r4, r0
   16f7c:	str	r0, [fp, #-348]	; 0xfffffea4
   16f80:	bvs	16fd0 <__assert_fail@plt+0x5a18>
   16f84:	sub	r1, fp, #348	; 0x15c
   16f88:	sub	r2, fp, #132	; 0x84
   16f8c:	mov	r0, r5
   16f90:	bl	1c01c <__assert_fail@plt+0xaa64>
   16f94:	cmp	r0, #0
   16f98:	beq	16fd0 <__assert_fail@plt+0x5a18>
   16f9c:	ldr	r0, [fp, #-92]	; 0xffffffa4
   16fa0:	cmp	r0, #0
   16fa4:	beq	16fd0 <__assert_fail@plt+0x5a18>
   16fa8:	ldr	r1, [fp, #-100]	; 0xffffff9c
   16fac:	ldr	r2, [sp, #360]	; 0x168
   16fb0:	cmp	r1, r2
   16fb4:	beq	16fd0 <__assert_fail@plt+0x5a18>
   16fb8:	mov	r2, #0
   16fbc:	str	r2, [sp, #376]	; 0x178
   16fc0:	str	r1, [sp, #372]	; 0x174
   16fc4:	movw	r1, #269	; 0x10d
   16fc8:	str	r1, [sp, #368]	; 0x170
   16fcc:	str	r0, [sp, #364]	; 0x16c
   16fd0:	ldr	r0, [sp, #352]	; 0x160
   16fd4:	cmp	r0, #0
   16fd8:	beq	17000 <__assert_fail@plt+0x5a48>
   16fdc:	ldr	r1, [sp, #364]	; 0x16c
   16fe0:	cmp	r1, #0
   16fe4:	beq	17000 <__assert_fail@plt+0x5a48>
   16fe8:	bl	112a0 <strcmp@plt>
   16fec:	cmp	r0, #0
   16ff0:	moveq	r0, #0
   16ff4:	streq	r0, [sp, #364]	; 0x16c
   16ff8:	mvneq	r0, #0
   16ffc:	streq	r0, [sp, #360]	; 0x168
   17000:	add	r0, sp, #160	; 0xa0
   17004:	bl	12b28 <__assert_fail@plt+0x1570>
   17008:	ldrb	r1, [sp, #341]	; 0x155
   1700c:	cmp	r0, #0
   17010:	beq	170c4 <__assert_fail@plt+0x5b0c>
   17014:	cmp	r1, #0
   17018:	beq	18550 <__assert_fail@plt+0x6f98>
   1701c:	ldr	r0, [sp, #160]	; 0xa0
   17020:	ldr	r3, [sp, #60]	; 0x3c
   17024:	movw	r2, #3995	; 0xf9b
   17028:	movw	r1, #3972	; 0xf84
   1702c:	mov	r7, #0
   17030:	movt	r2, #2
   17034:	movt	r1, #2
   17038:	cmp	r3, r0
   1703c:	mov	r0, #0
   17040:	movhi	r1, r2
   17044:	mov	r2, #5
   17048:	bl	11318 <dcgettext@plt>
   1704c:	ldr	r1, [sp, #160]	; 0xa0
   17050:	bl	16be8 <__assert_fail@plt+0x5630>
   17054:	cmp	r5, r9
   17058:	bne	176ec <__assert_fail@plt+0x6134>
   1705c:	b	176f4 <__assert_fail@plt+0x613c>
   17060:	mov	r0, #1
   17064:	mov	r1, r9
   17068:	b	17084 <__assert_fail@plt+0x5acc>
   1706c:	ldrb	r2, [r1, #1]!
   17070:	cmp	r2, #34	; 0x22
   17074:	cmpne	r2, #92	; 0x5c
   17078:	bne	16d90 <__assert_fail@plt+0x57d8>
   1707c:	add	r0, r0, #1
   17080:	add	r1, r1, #1
   17084:	ldrb	r2, [r1]
   17088:	cmp	r2, #92	; 0x5c
   1708c:	beq	1706c <__assert_fail@plt+0x5ab4>
   17090:	cmp	r2, #0
   17094:	beq	16d90 <__assert_fail@plt+0x57d8>
   17098:	cmp	r2, #34	; 0x22
   1709c:	bne	1707c <__assert_fail@plt+0x5ac4>
   170a0:	cmp	r0, #101	; 0x65
   170a4:	bcc	17214 <__assert_fail@plt+0x5c5c>
   170a8:	bl	1d208 <__assert_fail@plt+0xbc50>
   170ac:	cmp	r0, #0
   170b0:	mov	r5, r0
   170b4:	bne	1721c <__assert_fail@plt+0x5c64>
   170b8:	mov	r7, #0
   170bc:	mov	r5, #0
   170c0:	b	176f8 <__assert_fail@plt+0x6140>
   170c4:	cmp	r1, #0
   170c8:	bne	17570 <__assert_fail@plt+0x5fb8>
   170cc:	ldrb	r0, [sp, #312]	; 0x138
   170d0:	cmp	r0, #0
   170d4:	beq	17140 <__assert_fail@plt+0x5b88>
   170d8:	ldr	r0, [sp, #56]	; 0x38
   170dc:	ldr	r2, [sp, #68]	; 0x44
   170e0:	ldrd	r0, [r0]
   170e4:	stm	r2, {r0, r1}
   170e8:	ldrb	r0, [sp, #341]	; 0x155
   170ec:	ldr	r4, [sp, #64]	; 0x40
   170f0:	mov	r7, #1
   170f4:	cmp	r0, #0
   170f8:	beq	176e4 <__assert_fail@plt+0x612c>
   170fc:	cmp	r4, #0
   17100:	beq	17328 <__assert_fail@plt+0x5d70>
   17104:	movw	r1, #4124	; 0x101c
   17108:	mov	r0, r4
   1710c:	movt	r1, #2
   17110:	bl	112a0 <strcmp@plt>
   17114:	mov	r8, r5
   17118:	cmp	r0, #0
   1711c:	beq	17338 <__assert_fail@plt+0x5d80>
   17120:	movw	r1, #5758	; 0x167e
   17124:	mov	r0, #0
   17128:	mov	r2, #5
   1712c:	movt	r1, #2
   17130:	bl	11318 <dcgettext@plt>
   17134:	mov	r1, r4
   17138:	bl	16be8 <__assert_fail@plt+0x5630>
   1713c:	b	17350 <__assert_fail@plt+0x5d98>
   17140:	ldr	r1, [sp, #324]	; 0x144
   17144:	ldr	r7, [sp, #336]	; 0x150
   17148:	ldr	r0, [sp, #316]	; 0x13c
   1714c:	ldr	r2, [sp, #320]	; 0x140
   17150:	ldr	r3, [sp, #328]	; 0x148
   17154:	mov	r8, r5
   17158:	ldrb	r5, [sp, #341]	; 0x155
   1715c:	add	r7, r7, r1
   17160:	ldr	r1, [sp, #332]	; 0x14c
   17164:	orr	r6, r0, r1
   17168:	orr	r2, r6, r2
   1716c:	orr	r2, r2, r3
   17170:	orr	r2, r2, r7
   17174:	cmp	r2, #2
   17178:	blt	1729c <__assert_fail@plt+0x5ce4>
   1717c:	mov	r7, #0
   17180:	cmp	r5, #0
   17184:	beq	19a80 <__assert_fail@plt+0x84c8>
   17188:	cmp	r1, #2
   1718c:	mov	r5, r8
   17190:	blt	171a4 <__assert_fail@plt+0x5bec>
   17194:	movw	r0, #4216	; 0x1078
   17198:	movt	r0, #2
   1719c:	bl	16be8 <__assert_fail@plt+0x5630>
   171a0:	ldr	r0, [sp, #316]	; 0x13c
   171a4:	cmp	r0, #2
   171a8:	blt	171b8 <__assert_fail@plt+0x5c00>
   171ac:	movw	r0, #4249	; 0x1099
   171b0:	movt	r0, #2
   171b4:	bl	16be8 <__assert_fail@plt+0x5630>
   171b8:	ldr	r0, [sp, #320]	; 0x140
   171bc:	cmp	r0, #2
   171c0:	blt	171d0 <__assert_fail@plt+0x5c18>
   171c4:	movw	r0, #4282	; 0x10ba
   171c8:	movt	r0, #2
   171cc:	bl	16be8 <__assert_fail@plt+0x5630>
   171d0:	ldr	r0, [sp, #328]	; 0x148
   171d4:	cmp	r0, #2
   171d8:	blt	171e8 <__assert_fail@plt+0x5c30>
   171dc:	movw	r0, #4315	; 0x10db
   171e0:	movt	r0, #2
   171e4:	bl	16be8 <__assert_fail@plt+0x5630>
   171e8:	ldr	r0, [sp, #324]	; 0x144
   171ec:	ldr	r1, [sp, #336]	; 0x150
   171f0:	add	r0, r1, r0
   171f4:	cmp	r0, #2
   171f8:	blt	176e4 <__assert_fail@plt+0x612c>
   171fc:	movw	r0, #4359	; 0x1107
   17200:	movt	r0, #2
   17204:	bl	16be8 <__assert_fail@plt+0x5630>
   17208:	cmp	r5, r9
   1720c:	bne	176ec <__assert_fail@plt+0x6134>
   17210:	b	176f4 <__assert_fail@plt+0x613c>
   17214:	mov	r5, #0
   17218:	sub	r0, fp, #448	; 0x1c0
   1721c:	ldrb	r1, [r9]
   17220:	mov	r2, r0
   17224:	cmp	r1, #34	; 0x22
   17228:	beq	1724c <__assert_fail@plt+0x5c94>
   1722c:	uxtb	r1, r1
   17230:	cmp	r1, #92	; 0x5c
   17234:	addeq	r9, r9, #1
   17238:	ldrb	r1, [r9]
   1723c:	strb	r1, [r2], #1
   17240:	ldrb	r1, [r9, #1]!
   17244:	cmp	r1, #34	; 0x22
   17248:	bne	1722c <__assert_fail@plt+0x5c74>
   1724c:	mov	r1, #0
   17250:	str	r0, [sp, #64]	; 0x40
   17254:	strb	r1, [r2]
   17258:	bl	1bf68 <__assert_fail@plt+0xa9b0>
   1725c:	cmp	r0, #0
   17260:	beq	17320 <__assert_fail@plt+0x5d68>
   17264:	add	r8, r9, #1
   17268:	ldr	r9, [fp, #8]
   1726c:	str	r5, [sp, #112]	; 0x70
   17270:	mov	r5, r0
   17274:	mov	r1, r0
   17278:	b	17280 <__assert_fail@plt+0x5cc8>
   1727c:	add	r8, r8, #1
   17280:	ldrb	r0, [r8]
   17284:	sub	r1, r0, #9
   17288:	cmp	r1, #5
   1728c:	bcc	1727c <__assert_fail@plt+0x5cc4>
   17290:	cmp	r0, #32
   17294:	beq	1727c <__assert_fail@plt+0x5cc4>
   17298:	b	16da0 <__assert_fail@plt+0x57e8>
   1729c:	ldr	r0, [sp, #108]	; 0x6c
   172a0:	mvn	sl, #0
   172a4:	ldrd	r6, [r0]
   172a8:	cmp	r7, #0
   172ac:	bmi	17550 <__assert_fail@plt+0x5f98>
   172b0:	add	r0, r0, #8
   172b4:	ldr	r0, [r0]
   172b8:	cmp	r0, #2
   172bc:	bne	175c4 <__assert_fail@plt+0x600c>
   172c0:	subs	r1, r6, #69	; 0x45
   172c4:	mov	r0, #0
   172c8:	sbcs	r1, r7, #0
   172cc:	movw	r1, #1900	; 0x76c
   172d0:	movwlt	r0, #1
   172d4:	cmp	r0, #0
   172d8:	movwne	r1, #2000	; 0x7d0
   172dc:	adds	r9, r1, r6
   172e0:	adc	r4, r7, #0
   172e4:	cmp	r5, #0
   172e8:	beq	17314 <__assert_fail@plt+0x5d5c>
   172ec:	movw	r1, #5865	; 0x16e9
   172f0:	mov	r0, #0
   172f4:	mov	r2, #5
   172f8:	movt	r1, #2
   172fc:	bl	11318 <dcgettext@plt>
   17300:	mov	r2, r6
   17304:	mov	r3, r7
   17308:	str	r9, [sp]
   1730c:	str	r4, [sp, #4]
   17310:	bl	16be8 <__assert_fail@plt+0x5630>
   17314:	cmn	r4, #1
   17318:	bgt	175cc <__assert_fail@plt+0x6014>
   1731c:	b	17558 <__assert_fail@plt+0x5fa0>
   17320:	mov	r7, #0
   17324:	b	176f8 <__assert_fail@plt+0x6140>
   17328:	movw	r1, #5706	; 0x164a
   1732c:	mov	r8, r5
   17330:	movt	r1, #2
   17334:	b	17340 <__assert_fail@plt+0x5d88>
   17338:	movw	r1, #5732	; 0x1664
   1733c:	movt	r1, #2
   17340:	mov	r0, #0
   17344:	mov	r2, #5
   17348:	bl	11318 <dcgettext@plt>
   1734c:	bl	16be8 <__assert_fail@plt+0x5630>
   17350:	ldr	r7, [sp, #68]	; 0x44
   17354:	movw	r1, #5795	; 0x16a3
   17358:	mov	r0, #0
   1735c:	mov	r2, #5
   17360:	mov	r4, #0
   17364:	movt	r1, #2
   17368:	ldr	r6, [r7]
   1736c:	ldr	r5, [r7, #4]
   17370:	bl	11318 <dcgettext@plt>
   17374:	asr	r3, r6, #31
   17378:	mov	r2, r6
   1737c:	str	r5, [sp]
   17380:	bl	16be8 <__assert_fail@plt+0x5630>
   17384:	sub	r1, fp, #132	; 0x84
   17388:	mov	r0, r7
   1738c:	bl	11288 <gmtime_r@plt>
   17390:	cmp	r0, #0
   17394:	beq	173e0 <__assert_fail@plt+0x5e28>
   17398:	movw	r1, #5829	; 0x16c5
   1739c:	mov	r0, #0
   173a0:	mov	r2, #5
   173a4:	movt	r1, #2
   173a8:	bl	11318 <dcgettext@plt>
   173ac:	movw	r2, #6303	; 0x189f
   173b0:	sub	r7, fp, #348	; 0x15c
   173b4:	mov	r6, r0
   173b8:	sub	r3, fp, #132	; 0x84
   173bc:	mov	r1, #100	; 0x64
   173c0:	str	r4, [sp]
   173c4:	str	r4, [sp, #4]
   173c8:	movt	r2, #2
   173cc:	mov	r0, r7
   173d0:	bl	1d574 <__assert_fail@plt+0xbfbc>
   173d4:	mov	r0, r6
   173d8:	mov	r1, r7
   173dc:	bl	16be8 <__assert_fail@plt+0x5630>
   173e0:	ldr	r1, [sp, #68]	; 0x44
   173e4:	add	r2, sp, #116	; 0x74
   173e8:	mov	r0, r8
   173ec:	mov	r5, r8
   173f0:	bl	1c01c <__assert_fail@plt+0xaa64>
   173f4:	cmp	r0, #0
   173f8:	beq	17644 <__assert_fail@plt+0x608c>
   173fc:	movw	r1, #5846	; 0x16d6
   17400:	ldr	r4, [sp, #152]	; 0x98
   17404:	mov	r0, #0
   17408:	mov	r2, #5
   1740c:	mov	sl, r5
   17410:	mov	r5, #0
   17414:	movt	r1, #2
   17418:	bl	11318 <dcgettext@plt>
   1741c:	movw	r2, #6303	; 0x189f
   17420:	mov	r8, r0
   17424:	sub	r0, fp, #348	; 0x15c
   17428:	add	r3, sp, #116	; 0x74
   1742c:	mov	r1, #100	; 0x64
   17430:	str	r5, [sp]
   17434:	str	r5, [sp, #4]
   17438:	movt	r2, #2
   1743c:	bl	1d574 <__assert_fail@plt+0xbfbc>
   17440:	movw	r0, #46021	; 0xb3c5
   17444:	movw	r3, #3271	; 0xcc7
   17448:	sub	r7, fp, #247	; 0xf7
   1744c:	mov	r2, #27
   17450:	movt	r0, #37282	; 0x91a2
   17454:	movt	r3, #2
   17458:	smmla	r0, r4, r0, r4
   1745c:	asr	r1, r0, #11
   17460:	add	r5, r1, r0, lsr #31
   17464:	mov	r1, #43	; 0x2b
   17468:	cmp	r5, #0
   1746c:	mov	r0, r5
   17470:	rsbmi	r0, r5, #0
   17474:	cmp	r4, #0
   17478:	movwmi	r1, #45	; 0x2d
   1747c:	str	r0, [sp, #4]
   17480:	mov	r0, r7
   17484:	str	r1, [sp]
   17488:	mov	r1, #1
   1748c:	bl	11498 <__sprintf_chk@plt>
   17490:	mov	r1, #3600	; 0xe10
   17494:	mls	r1, r5, r1, r4
   17498:	mov	r5, sl
   1749c:	cmp	r1, #0
   174a0:	beq	17634 <__assert_fail@plt+0x607c>
   174a4:	add	r0, r7, r0
   174a8:	mov	r2, #58	; 0x3a
   174ac:	rsbmi	r1, r1, #0
   174b0:	strb	r2, [r0]
   174b4:	movw	r2, #33205	; 0x81b5
   174b8:	uxth	r3, r1
   174bc:	movt	r2, #6990	; 0x1b4e
   174c0:	umull	r2, r7, r3, r2
   174c4:	mov	r2, #48	; 0x30
   174c8:	add	r7, r2, r7, lsr #6
   174cc:	strb	r7, [r0, #1]
   174d0:	movw	r7, #34953	; 0x8889
   174d4:	movt	r7, #34952	; 0x8888
   174d8:	umull	r3, r7, r3, r7
   174dc:	movw	r3, #52429	; 0xcccd
   174e0:	movt	r3, #52428	; 0xcccc
   174e4:	ubfx	r5, r7, #5, #8
   174e8:	umull	r4, r6, r5, r3
   174ec:	lsr	r6, r6, #3
   174f0:	add	r6, r6, r6, lsl #2
   174f4:	sub	r6, r5, r6, lsl #1
   174f8:	orr	r6, r6, #48	; 0x30
   174fc:	strb	r6, [r0, #2]
   17500:	lsr	r6, r7, #5
   17504:	lsl	r6, r6, #4
   17508:	sub	r7, r6, r7, lsr #5
   1750c:	sub	r1, r1, r7, lsl #2
   17510:	movw	r7, #65535	; 0xffff
   17514:	tst	r1, r7
   17518:	beq	17624 <__assert_fail@plt+0x606c>
   1751c:	mov	r7, #58	; 0x3a
   17520:	strb	r7, [r0, #3]
   17524:	uxtb	r7, r1
   17528:	umull	r3, r7, r7, r3
   1752c:	orr	r2, r2, r7, lsr #3
   17530:	strb	r2, [r0, #4]
   17534:	lsr	r2, r7, #3
   17538:	add	r2, r2, r2, lsl #2
   1753c:	sub	r1, r1, r2, lsl #1
   17540:	orr	r1, r1, #48	; 0x30
   17544:	strb	r1, [r0, #5]
   17548:	add	r0, r0, #6
   1754c:	b	17628 <__assert_fail@plt+0x6070>
   17550:	mov	r9, r6
   17554:	mov	r4, r7
   17558:	movw	r0, #63636	; 0xf894
   1755c:	movt	r0, #65535	; 0xffff
   17560:	subs	r0, r0, r9
   17564:	str	r0, [fp, #-156]	; 0xffffff64
   17568:	sbc	r1, sl, r4
   1756c:	b	175dc <__assert_fail@plt+0x6024>
   17570:	movw	r1, #4035	; 0xfc3
   17574:	mov	r0, #0
   17578:	mov	r2, #5
   1757c:	movt	r1, #2
   17580:	bl	11318 <dcgettext@plt>
   17584:	bl	16be8 <__assert_fail@plt+0x5630>
   17588:	ldrb	r0, [sp, #312]	; 0x138
   1758c:	movw	r8, #8608	; 0x21a0
   17590:	movt	r8, #3
   17594:	cmp	r0, #0
   17598:	bne	1770c <__assert_fail@plt+0x6154>
   1759c:	ldr	r0, [sp, #336]	; 0x150
   175a0:	cmp	r0, #0
   175a4:	bne	177a0 <__assert_fail@plt+0x61e8>
   175a8:	ldr	r6, [sp, #64]	; 0x40
   175ac:	cmp	r6, #0
   175b0:	bne	178fc <__assert_fail@plt+0x6344>
   175b4:	ldr	r4, [r8]
   175b8:	movw	r1, #4189	; 0x105d
   175bc:	movt	r1, #2
   175c0:	b	177ac <__assert_fail@plt+0x61f4>
   175c4:	mov	r9, r6
   175c8:	mov	r4, r7
   175cc:	movw	r0, #1900	; 0x76c
   175d0:	subs	r0, r9, r0
   175d4:	sbc	r1, r4, #0
   175d8:	str	r0, [fp, #-156]	; 0xffffff64
   175dc:	eor	r1, r1, r0, asr #31
   175e0:	clz	r0, r1
   175e4:	cmp	r1, #0
   175e8:	lsr	r0, r0, #5
   175ec:	beq	17654 <__assert_fail@plt+0x609c>
   175f0:	cmp	r5, #0
   175f4:	mov	r5, r8
   175f8:	beq	17658 <__assert_fail@plt+0x60a0>
   175fc:	movw	r1, #5909	; 0x1715
   17600:	mov	r0, #0
   17604:	mov	r2, #5
   17608:	movt	r1, #2
   1760c:	bl	11318 <dcgettext@plt>
   17610:	mov	r2, r9
   17614:	mov	r3, r4
   17618:	bl	16be8 <__assert_fail@plt+0x5630>
   1761c:	ldr	r9, [fp, #8]
   17620:	b	176bc <__assert_fail@plt+0x6104>
   17624:	add	r0, r0, #3
   17628:	mov	r5, sl
   1762c:	mov	r1, #0
   17630:	strb	r1, [r0]
   17634:	sub	r1, fp, #348	; 0x15c
   17638:	sub	r2, fp, #247	; 0xf7
   1763c:	mov	r0, r8
   17640:	bl	16be8 <__assert_fail@plt+0x5630>
   17644:	mov	r7, #1
   17648:	cmp	r5, r9
   1764c:	bne	176ec <__assert_fail@plt+0x6134>
   17650:	b	176f4 <__assert_fail@plt+0x613c>
   17654:	mov	r5, r8
   17658:	ldr	r9, [fp, #8]
   1765c:	cmp	r0, #0
   17660:	beq	176bc <__assert_fail@plt+0x6104>
   17664:	ldr	r0, [sp, #104]	; 0x68
   17668:	mov	r7, #0
   1766c:	mov	r6, #0
   17670:	mov	r2, #0
   17674:	ldm	r0, {r0, r3}
   17678:	cmn	r3, #1
   1767c:	movwgt	r7, #1
   17680:	subs	r0, r0, #1
   17684:	sbc	r1, r3, #0
   17688:	str	r0, [fp, #-160]	; 0xffffff60
   1768c:	cmn	r1, #1
   17690:	movwgt	r6, #1
   17694:	subs	r7, r7, r6
   17698:	movwne	r7, #1
   1769c:	cmp	r3, #0
   176a0:	movwmi	r2, #1
   176a4:	tst	r2, r7
   176a8:	asreq	r2, r0, #31
   176ac:	eoreq	r0, r0, r0
   176b0:	eoreq	r1, r1, r2
   176b4:	orrseq	r0, r0, r1
   176b8:	beq	1771c <__assert_fail@plt+0x6164>
   176bc:	ldrb	r0, [sp, #341]	; 0x155
   176c0:	mov	r7, #0
   176c4:	cmp	r0, #0
   176c8:	beq	176e4 <__assert_fail@plt+0x612c>
   176cc:	movw	r1, #4397	; 0x112d
   176d0:	mov	r0, #0
   176d4:	mov	r2, #5
   176d8:	movt	r1, #2
   176dc:	bl	11318 <dcgettext@plt>
   176e0:	bl	16be8 <__assert_fail@plt+0x5630>
   176e4:	cmp	r5, r9
   176e8:	beq	176f4 <__assert_fail@plt+0x613c>
   176ec:	mov	r0, r5
   176f0:	bl	1bff4 <__assert_fail@plt+0xaa3c>
   176f4:	ldr	r5, [sp, #112]	; 0x70
   176f8:	mov	r0, r5
   176fc:	bl	1d408 <__assert_fail@plt+0xbe50>
   17700:	mov	r0, r7
   17704:	sub	sp, fp, #28
   17708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1770c:	ldr	r4, [r8]
   17710:	movw	r1, #4052	; 0xfd4
   17714:	movt	r1, #2
   17718:	b	177ac <__assert_fail@plt+0x61f4>
   1771c:	ldr	r0, [sp, #100]	; 0x64
   17720:	ldrd	r0, [r0]
   17724:	teq	r1, r0, asr #31
   17728:	str	r0, [fp, #-164]	; 0xffffff5c
   1772c:	bne	176bc <__assert_fail@plt+0x6104>
   17730:	ldr	r0, [sp, #332]	; 0x14c
   17734:	cmp	r0, #0
   17738:	bne	17758 <__assert_fail@plt+0x61a0>
   1773c:	ldrb	r1, [sp, #313]	; 0x139
   17740:	cmp	r1, #0
   17744:	beq	17b00 <__assert_fail@plt+0x6548>
   17748:	ldr	r1, [sp, #316]	; 0x13c
   1774c:	ldr	r2, [sp, #320]	; 0x140
   17750:	orrs	r1, r2, r1
   17754:	bne	17b00 <__assert_fail@plt+0x6548>
   17758:	ldr	r1, [sp, #96]	; 0x60
   1775c:	ldrd	r2, [r1]
   17760:	ldr	r1, [sp, #188]	; 0xbc
   17764:	cmp	r1, #0
   17768:	beq	179a0 <__assert_fail@plt+0x63e8>
   1776c:	cmp	r1, #1
   17770:	bne	179c4 <__assert_fail@plt+0x640c>
   17774:	eor	r7, r2, #12
   17778:	orrs	r7, r7, r3
   1777c:	mvn	r7, #0
   17780:	movweq	r7, #12
   17784:	subs	r6, r2, #1
   17788:	sbc	r3, r3, #0
   1778c:	subs	r6, r6, #11
   17790:	sbcs	r3, r3, #0
   17794:	addcc	r7, r2, #12
   17798:	mov	r2, r7
   1779c:	b	179d0 <__assert_fail@plt+0x6418>
   177a0:	ldr	r4, [r8]
   177a4:	movw	r1, #4077	; 0xfed
   177a8:	movt	r1, #2
   177ac:	mov	r0, #0
   177b0:	mov	r2, #5
   177b4:	bl	11318 <dcgettext@plt>
   177b8:	mov	r2, r0
   177bc:	mov	r0, r4
   177c0:	mov	r1, #1
   177c4:	bl	114d4 <__fprintf_chk@plt>
   177c8:	ldr	r1, [sp, #324]	; 0x144
   177cc:	ldr	r0, [sp, #336]	; 0x150
   177d0:	cmp	r1, #0
   177d4:	beq	17804 <__assert_fail@plt+0x624c>
   177d8:	cmp	r0, #0
   177dc:	bne	17804 <__assert_fail@plt+0x624c>
   177e0:	ldr	r0, [sp, #180]	; 0xb4
   177e4:	cmp	r0, #1
   177e8:	blt	17980 <__assert_fail@plt+0x63c8>
   177ec:	ldr	r0, [r8]
   177f0:	movw	r2, #4204	; 0x106c
   177f4:	mov	r1, #1
   177f8:	movt	r2, #2
   177fc:	bl	114d4 <__fprintf_chk@plt>
   17800:	ldr	r0, [sp, #336]	; 0x150
   17804:	cmp	r0, #0
   17808:	beq	17980 <__assert_fail@plt+0x63c8>
   1780c:	ldr	r7, [sp, #184]	; 0xb8
   17810:	mov	r0, #43	; 0x2b
   17814:	mov	r4, r5
   17818:	movw	r3, #3271	; 0xcc7
   1781c:	ldr	sl, [r8]
   17820:	sub	r6, fp, #247	; 0xf7
   17824:	mov	r2, #27
   17828:	movt	r3, #2
   1782c:	cmp	r7, #0
   17830:	movwmi	r0, #45	; 0x2d
   17834:	str	r0, [sp]
   17838:	movw	r0, #46021	; 0xb3c5
   1783c:	movt	r0, #37282	; 0x91a2
   17840:	smmla	r0, r7, r0, r7
   17844:	asr	r1, r0, #11
   17848:	add	r5, r1, r0, lsr #31
   1784c:	mov	r1, #1
   17850:	cmp	r5, #0
   17854:	mov	r0, r5
   17858:	rsbmi	r0, r5, #0
   1785c:	str	r0, [sp, #4]
   17860:	mov	r0, r6
   17864:	bl	11498 <__sprintf_chk@plt>
   17868:	mov	r1, #3600	; 0xe10
   1786c:	mls	r1, r5, r1, r7
   17870:	mov	r5, r4
   17874:	cmp	r1, #0
   17878:	beq	17968 <__assert_fail@plt+0x63b0>
   1787c:	add	r0, r6, r0
   17880:	mov	r2, #58	; 0x3a
   17884:	rsbmi	r1, r1, #0
   17888:	mov	ip, #48	; 0x30
   1788c:	strb	r2, [r0]
   17890:	movw	r2, #33205	; 0x81b5
   17894:	uxth	r3, r1
   17898:	movt	r2, #6990	; 0x1b4e
   1789c:	umull	r2, r7, r3, r2
   178a0:	add	r7, ip, r7, lsr #6
   178a4:	strb	r7, [r0, #1]
   178a8:	movw	r7, #34953	; 0x8889
   178ac:	movt	r7, #34952	; 0x8888
   178b0:	umull	r3, r7, r3, r7
   178b4:	movw	r3, #52429	; 0xcccd
   178b8:	movt	r3, #52428	; 0xcccc
   178bc:	ubfx	r6, r7, #5, #8
   178c0:	umull	r5, r2, r6, r3
   178c4:	lsr	r2, r2, #3
   178c8:	add	r2, r2, r2, lsl #2
   178cc:	sub	r2, r6, r2, lsl #1
   178d0:	orr	r2, r2, #48	; 0x30
   178d4:	strb	r2, [r0, #2]
   178d8:	lsr	r2, r7, #5
   178dc:	lsl	r2, r2, #4
   178e0:	sub	r2, r2, r7, lsr #5
   178e4:	sub	r1, r1, r2, lsl #2
   178e8:	movw	r2, #65535	; 0xffff
   178ec:	tst	r1, r2
   178f0:	bne	1792c <__assert_fail@plt+0x6374>
   178f4:	add	r0, r0, #3
   178f8:	b	1795c <__assert_fail@plt+0x63a4>
   178fc:	cmp	r5, r9
   17900:	bne	17990 <__assert_fail@plt+0x63d8>
   17904:	movw	r1, #4124	; 0x101c
   17908:	mov	r0, r6
   1790c:	movt	r1, #2
   17910:	bl	112a0 <strcmp@plt>
   17914:	ldr	r4, [r8]
   17918:	cmp	r0, #0
   1791c:	bne	17ad4 <__assert_fail@plt+0x651c>
   17920:	movw	r1, #4129	; 0x1021
   17924:	movt	r1, #2
   17928:	b	177ac <__assert_fail@plt+0x61f4>
   1792c:	mov	r2, #58	; 0x3a
   17930:	strb	r2, [r0, #3]
   17934:	uxtb	r2, r1
   17938:	umull	r2, r3, r2, r3
   1793c:	orr	r2, ip, r3, lsr #3
   17940:	strb	r2, [r0, #4]
   17944:	lsr	r2, r3, #3
   17948:	add	r2, r2, r2, lsl #2
   1794c:	sub	r1, r1, r2, lsl #1
   17950:	orr	r1, r1, #48	; 0x30
   17954:	strb	r1, [r0, #5]
   17958:	add	r0, r0, #6
   1795c:	mov	r5, r4
   17960:	mov	r1, #0
   17964:	strb	r1, [r0]
   17968:	movw	r2, #4210	; 0x1072
   1796c:	sub	r3, fp, #247	; 0xf7
   17970:	mov	r0, sl
   17974:	mov	r1, #1
   17978:	movt	r2, #2
   1797c:	bl	114d4 <__fprintf_chk@plt>
   17980:	ldr	r1, [r8]
   17984:	mov	r0, #10
   17988:	bl	11528 <fputc@plt>
   1798c:	b	170cc <__assert_fail@plt+0x5b14>
   17990:	ldr	r4, [r8]
   17994:	movw	r1, #4101	; 0x1005
   17998:	movt	r1, #2
   1799c:	b	17adc <__assert_fail@plt+0x6524>
   179a0:	eor	r7, r2, #12
   179a4:	orrs	r7, r7, r3
   179a8:	mvnne	r7, #0
   179ac:	subs	r6, r2, #1
   179b0:	sbc	r3, r3, #0
   179b4:	subs	r6, r6, #11
   179b8:	sbcs	r3, r3, #0
   179bc:	movcs	r2, r7
   179c0:	b	179d0 <__assert_fail@plt+0x6418>
   179c4:	subs	r7, r2, #24
   179c8:	sbcs	r3, r3, #0
   179cc:	mvncs	r2, #0
   179d0:	cmn	r2, #1
   179d4:	str	r2, [fp, #-168]	; 0xffffff58
   179d8:	ble	17a6c <__assert_fail@plt+0x64b4>
   179dc:	ldr	r1, [sp, #92]	; 0x5c
   179e0:	ldr	r2, [sp, #248]	; 0xf8
   179e4:	ldr	r1, [r1]
   179e8:	str	r2, [fp, #-176]	; 0xffffff50
   179ec:	str	r1, [fp, #-172]	; 0xffffff54
   179f0:	ldrb	r1, [sp, #341]	; 0x155
   179f4:	cmp	r1, #0
   179f8:	beq	17b2c <__assert_fail@plt+0x6574>
   179fc:	movw	r2, #4511	; 0x119f
   17a00:	movw	r1, #4465	; 0x1171
   17a04:	cmp	r0, #0
   17a08:	mov	r0, #0
   17a0c:	movt	r2, #2
   17a10:	movt	r1, #2
   17a14:	moveq	r1, r2
   17a18:	mov	r2, #5
   17a1c:	bl	11318 <dcgettext@plt>
   17a20:	sub	r2, fp, #176	; 0xb0
   17a24:	mov	r4, r0
   17a28:	movw	r3, #5940	; 0x1734
   17a2c:	sub	r6, fp, #348	; 0x15c
   17a30:	ldm	r2, {r0, r1, r2}
   17a34:	movt	r3, #2
   17a38:	str	r2, [sp, #4]
   17a3c:	str	r1, [sp, #8]
   17a40:	mov	r1, #100	; 0x64
   17a44:	mov	r2, #1
   17a48:	str	r3, [sp]
   17a4c:	mov	r3, #100	; 0x64
   17a50:	str	r0, [sp, #12]
   17a54:	mov	r0, r6
   17a58:	bl	115ac <__snprintf_chk@plt>
   17a5c:	mov	r0, r4
   17a60:	mov	r1, r6
   17a64:	bl	16be8 <__assert_fail@plt+0x5630>
   17a68:	b	17b2c <__assert_fail@plt+0x6574>
   17a6c:	ldrb	r0, [sp, #341]	; 0x155
   17a70:	cmp	r0, #0
   17a74:	beq	18550 <__assert_fail@plt+0x6f98>
   17a78:	movw	r0, #3188	; 0xc74
   17a7c:	movw	r2, #6017	; 0x1781
   17a80:	cmp	r1, #1
   17a84:	movw	r4, #4434	; 0x1152
   17a88:	mov	r7, #0
   17a8c:	movt	r0, #2
   17a90:	movt	r2, #2
   17a94:	movt	r4, #2
   17a98:	moveq	r2, r0
   17a9c:	cmp	r1, #0
   17aa0:	movw	r1, #4437	; 0x1155
   17aa4:	mov	r0, #0
   17aa8:	movt	r1, #2
   17aac:	movne	r4, r2
   17ab0:	mov	r2, #5
   17ab4:	bl	11318 <dcgettext@plt>
   17ab8:	ldr	r1, [sp, #96]	; 0x60
   17abc:	str	r4, [sp]
   17ac0:	ldrd	r2, [r1]
   17ac4:	bl	16be8 <__assert_fail@plt+0x5630>
   17ac8:	cmp	r5, r9
   17acc:	bne	176ec <__assert_fail@plt+0x6134>
   17ad0:	b	176f4 <__assert_fail@plt+0x613c>
   17ad4:	movw	r1, #4163	; 0x1043
   17ad8:	movt	r1, #2
   17adc:	mov	r0, #0
   17ae0:	mov	r2, #5
   17ae4:	bl	11318 <dcgettext@plt>
   17ae8:	mov	r2, r0
   17aec:	mov	r0, r4
   17af0:	mov	r1, #1
   17af4:	mov	r3, r6
   17af8:	bl	114d4 <__fprintf_chk@plt>
   17afc:	b	177c8 <__assert_fail@plt+0x6210>
   17b00:	mov	r0, #0
   17b04:	str	r0, [sp, #252]	; 0xfc
   17b08:	str	r0, [fp, #-168]	; 0xffffff58
   17b0c:	str	r0, [fp, #-172]	; 0xffffff54
   17b10:	str	r0, [fp, #-176]	; 0xffffff50
   17b14:	ldrb	r0, [sp, #341]	; 0x155
   17b18:	cmp	r0, #0
   17b1c:	beq	17b2c <__assert_fail@plt+0x6574>
   17b20:	movw	r0, #4555	; 0x11cb
   17b24:	movt	r0, #2
   17b28:	bl	16be8 <__assert_fail@plt+0x5630>
   17b2c:	ldr	r0, [sp, #316]	; 0x13c
   17b30:	ldr	r1, [sp, #320]	; 0x140
   17b34:	ldr	r2, [sp, #332]	; 0x14c
   17b38:	orr	r0, r1, r0
   17b3c:	orrs	r0, r0, r2
   17b40:	mvnne	r0, #0
   17b44:	strne	r0, [fp, #-144]	; 0xffffff70
   17b48:	ldr	r0, [sp, #324]	; 0x144
   17b4c:	cmp	r0, #0
   17b50:	beq	17b60 <__assert_fail@plt+0x65a8>
   17b54:	ldr	r0, [sp, #180]	; 0xb4
   17b58:	str	r0, [fp, #-144]	; 0xffffff70
   17b5c:	b	17b64 <__assert_fail@plt+0x65ac>
   17b60:	ldr	r0, [fp, #-144]	; 0xffffff70
   17b64:	str	r0, [fp, #-188]	; 0xffffff44
   17b68:	mvn	r0, #0
   17b6c:	sub	r1, fp, #176	; 0xb0
   17b70:	str	r0, [fp, #-152]	; 0xffffff68
   17b74:	mov	r0, r8
   17b78:	ldr	r4, [fp, #-176]	; 0xffffff50
   17b7c:	ldr	sl, [fp, #-172]	; 0xffffff54
   17b80:	ldr	r7, [fp, #-168]	; 0xffffff58
   17b84:	ldr	r5, [fp, #-164]	; 0xffffff5c
   17b88:	ldr	r9, [fp, #-160]	; 0xffffff60
   17b8c:	ldr	r6, [fp, #-156]	; 0xffffff64
   17b90:	str	r4, [fp, #-220]	; 0xffffff24
   17b94:	str	sl, [fp, #-216]	; 0xffffff28
   17b98:	str	r7, [fp, #-212]	; 0xffffff2c
   17b9c:	str	r5, [fp, #-208]	; 0xffffff30
   17ba0:	str	r9, [fp, #-204]	; 0xffffff34
   17ba4:	str	r6, [fp, #-200]	; 0xffffff38
   17ba8:	bl	1c3f0 <__assert_fail@plt+0xae38>
   17bac:	mov	ip, r0
   17bb0:	ldr	r0, [fp, #-152]	; 0xffffff68
   17bb4:	cmp	r0, #0
   17bb8:	bmi	17bfc <__assert_fail@plt+0x6644>
   17bbc:	sub	r3, fp, #176	; 0xb0
   17bc0:	ldm	r3, {r0, r1, r2, r3}
   17bc4:	eor	r1, r1, sl
   17bc8:	eor	r0, r0, r4
   17bcc:	orr	r0, r1, r0
   17bd0:	eor	r1, r2, r7
   17bd4:	orr	r0, r0, r1
   17bd8:	eor	r1, r3, r5
   17bdc:	orr	r0, r0, r1
   17be0:	ldr	r1, [fp, #-160]	; 0xffffff60
   17be4:	eor	r1, r1, r9
   17be8:	orr	r0, r0, r1
   17bec:	ldr	r1, [fp, #-156]	; 0xffffff64
   17bf0:	eor	r1, r1, r6
   17bf4:	orrs	r0, r0, r1
   17bf8:	beq	17e58 <__assert_fail@plt+0x68a0>
   17bfc:	ldr	sl, [sp, #336]	; 0x150
   17c00:	ldr	r9, [fp, #8]
   17c04:	cmp	sl, #0
   17c08:	beq	17ed0 <__assert_fail@plt+0x6918>
   17c0c:	ldr	r5, [sp, #184]	; 0xb8
   17c10:	mov	r0, #88	; 0x58
   17c14:	movw	r3, #3271	; 0xcc7
   17c18:	mov	r2, #27
   17c1c:	strb	r0, [fp, #-130]	; 0xffffff7e
   17c20:	movw	r0, #22616	; 0x5858
   17c24:	movt	r3, #2
   17c28:	strh	r0, [fp, #-132]	; 0xffffff7c
   17c2c:	mov	r0, #43	; 0x2b
   17c30:	cmp	r5, #0
   17c34:	movwmi	r0, #45	; 0x2d
   17c38:	str	r0, [sp]
   17c3c:	movw	r0, #46021	; 0xb3c5
   17c40:	movt	r0, #37282	; 0x91a2
   17c44:	smmla	r0, r5, r0, r5
   17c48:	asr	r1, r0, #11
   17c4c:	add	r4, r1, r0, lsr #31
   17c50:	mov	r1, #1
   17c54:	cmp	r4, #0
   17c58:	mov	r0, r4
   17c5c:	rsbmi	r0, r4, #0
   17c60:	str	r0, [sp, #4]
   17c64:	sub	r0, fp, #132	; 0x84
   17c68:	add	r6, r0, #3
   17c6c:	mov	r0, r6
   17c70:	bl	11498 <__sprintf_chk@plt>
   17c74:	mov	r1, #3600	; 0xe10
   17c78:	mls	r1, r4, r1, r5
   17c7c:	mov	r5, r8
   17c80:	cmp	r1, #0
   17c84:	beq	17d40 <__assert_fail@plt+0x6788>
   17c88:	add	r0, r6, r0
   17c8c:	mov	r2, #58	; 0x3a
   17c90:	rsbmi	r1, r1, #0
   17c94:	strb	r2, [r0]
   17c98:	movw	r2, #33205	; 0x81b5
   17c9c:	uxth	r3, r1
   17ca0:	movt	r2, #6990	; 0x1b4e
   17ca4:	umull	r2, r7, r3, r2
   17ca8:	mov	r2, #48	; 0x30
   17cac:	add	r7, r2, r7, lsr #6
   17cb0:	strb	r7, [r0, #1]
   17cb4:	movw	r7, #34953	; 0x8889
   17cb8:	movt	r7, #34952	; 0x8888
   17cbc:	umull	r3, r7, r3, r7
   17cc0:	movw	r3, #52429	; 0xcccd
   17cc4:	movt	r3, #52428	; 0xcccc
   17cc8:	ubfx	r6, r7, #5, #8
   17ccc:	umull	r5, r4, r6, r3
   17cd0:	lsr	r5, r4, #3
   17cd4:	add	r5, r5, r5, lsl #2
   17cd8:	sub	r6, r6, r5, lsl #1
   17cdc:	orr	r6, r6, #48	; 0x30
   17ce0:	strb	r6, [r0, #2]
   17ce4:	lsr	r6, r7, #5
   17ce8:	add	r0, r0, #3
   17cec:	lsl	r6, r6, #4
   17cf0:	sub	r7, r6, r7, lsr #5
   17cf4:	sub	r1, r1, r7, lsl #2
   17cf8:	movw	r7, #65535	; 0xffff
   17cfc:	tst	r1, r7
   17d00:	beq	17d34 <__assert_fail@plt+0x677c>
   17d04:	mov	r7, #58	; 0x3a
   17d08:	strb	r7, [r0]
   17d0c:	uxtb	r7, r1
   17d10:	umull	r3, r7, r7, r3
   17d14:	orr	r2, r2, r7, lsr #3
   17d18:	strb	r2, [r0, #1]
   17d1c:	lsr	r2, r7, #3
   17d20:	add	r2, r2, r2, lsl #2
   17d24:	sub	r1, r1, r2, lsl #1
   17d28:	orr	r1, r1, #48	; 0x30
   17d2c:	strb	r1, [r0, #2]
   17d30:	add	r0, r0, #3
   17d34:	mov	r5, r8
   17d38:	mov	r1, #0
   17d3c:	strb	r1, [r0]
   17d40:	sub	r0, fp, #132	; 0x84
   17d44:	bl	1bf68 <__assert_fail@plt+0xa9b0>
   17d48:	cmp	r0, #0
   17d4c:	beq	17ea0 <__assert_fail@plt+0x68e8>
   17d50:	mov	r7, r0
   17d54:	mov	r0, #32
   17d58:	sub	r3, fp, #220	; 0xdc
   17d5c:	sub	r1, fp, #176	; 0xb0
   17d60:	ldr	r2, [fp, #-200]	; 0xffffff38
   17d64:	vld1.32	{d16-d17}, [r3], r0
   17d68:	mov	r0, #24
   17d6c:	mov	r4, r1
   17d70:	vst1.32	{d16-d17}, [r4], r0
   17d74:	mvn	r0, #0
   17d78:	str	r0, [r4]
   17d7c:	ldr	r0, [fp, #-204]	; 0xffffff34
   17d80:	str	r0, [fp, #-160]	; 0xffffff60
   17d84:	ldr	r0, [r3]
   17d88:	str	r2, [fp, #-156]	; 0xffffff64
   17d8c:	str	r0, [fp, #-144]	; 0xffffff70
   17d90:	mov	r0, r7
   17d94:	bl	1c3f0 <__assert_fail@plt+0xae38>
   17d98:	ldr	r1, [r4]
   17d9c:	cmn	r1, #1
   17da0:	ble	17ec8 <__assert_fail@plt+0x6910>
   17da4:	str	r0, [sp, #104]	; 0x68
   17da8:	ldr	r0, [fp, #-156]	; 0xffffff64
   17dac:	sub	r6, fp, #220	; 0xdc
   17db0:	str	sl, [sp, #108]	; 0x6c
   17db4:	ldr	r9, [fp, #-172]	; 0xffffff54
   17db8:	ldr	sl, [fp, #-208]	; 0xffffff30
   17dbc:	ldm	r6, {r4, r5, r6}
   17dc0:	str	r0, [sp, #100]	; 0x64
   17dc4:	ldr	r0, [fp, #-200]	; 0xffffff38
   17dc8:	str	r0, [sp, #96]	; 0x60
   17dcc:	ldr	r0, [fp, #-160]	; 0xffffff60
   17dd0:	str	r0, [sp, #92]	; 0x5c
   17dd4:	ldr	r0, [fp, #-204]	; 0xffffff34
   17dd8:	str	r0, [sp, #84]	; 0x54
   17ddc:	ldr	r0, [fp, #-176]	; 0xffffff50
   17de0:	str	r0, [sp, #72]	; 0x48
   17de4:	ldr	r0, [fp, #-168]	; 0xffffff58
   17de8:	str	r0, [sp, #76]	; 0x4c
   17dec:	ldr	r0, [fp, #-164]	; 0xffffff5c
   17df0:	str	r0, [sp, #80]	; 0x50
   17df4:	mov	r0, r7
   17df8:	bl	1bff4 <__assert_fail@plt+0xaa3c>
   17dfc:	ldr	r0, [sp, #72]	; 0x48
   17e00:	eor	r1, r9, r5
   17e04:	ldr	r2, [sp, #84]	; 0x54
   17e08:	ldr	r9, [fp, #8]
   17e0c:	eor	r0, r0, r4
   17e10:	orr	r0, r1, r0
   17e14:	ldr	r1, [sp, #76]	; 0x4c
   17e18:	eor	r1, r1, r6
   17e1c:	orr	r0, r0, r1
   17e20:	ldr	r1, [sp, #80]	; 0x50
   17e24:	eor	r1, r1, sl
   17e28:	ldr	sl, [sp, #108]	; 0x6c
   17e2c:	orr	r0, r0, r1
   17e30:	ldr	r1, [sp, #92]	; 0x5c
   17e34:	eor	r1, r1, r2
   17e38:	ldr	r2, [sp, #96]	; 0x60
   17e3c:	orr	r0, r0, r1
   17e40:	ldr	r1, [sp, #100]	; 0x64
   17e44:	eor	r1, r1, r2
   17e48:	orrs	r0, r0, r1
   17e4c:	bne	17ed0 <__assert_fail@plt+0x6918>
   17e50:	ldr	ip, [sp, #104]	; 0x68
   17e54:	b	17e5c <__assert_fail@plt+0x68a4>
   17e58:	ldr	r9, [fp, #8]
   17e5c:	ldr	r0, [sp, #320]	; 0x140
   17e60:	mvn	r2, #0
   17e64:	cmp	r0, #0
   17e68:	beq	18b3c <__assert_fail@plt+0x7584>
   17e6c:	ldr	r0, [sp, #316]	; 0x13c
   17e70:	cmp	r0, #0
   17e74:	bne	18b3c <__assert_fail@plt+0x7584>
   17e78:	ldr	r0, [sp, #52]	; 0x34
   17e7c:	ldrd	r4, [r0]
   17e80:	subs	r0, r4, #1
   17e84:	sbcs	r0, r5, #0
   17e88:	blt	18124 <__assert_fail@plt+0x6b6c>
   17e8c:	ldr	r0, [sp, #176]	; 0xb0
   17e90:	ldr	r1, [fp, #-152]	; 0xffffff68
   17e94:	subs	r0, r1, r0
   17e98:	movwne	r0, #1
   17e9c:	b	18128 <__assert_fail@plt+0x6b70>
   17ea0:	ldrb	r0, [sp, #341]	; 0x155
   17ea4:	cmp	r0, #0
   17ea8:	beq	18550 <__assert_fail@plt+0x6f98>
   17eac:	movw	r1, #4607	; 0x11ff
   17eb0:	mov	r0, #0
   17eb4:	mov	r2, #5
   17eb8:	movt	r1, #2
   17ebc:	bl	11318 <dcgettext@plt>
   17ec0:	sub	r1, fp, #132	; 0x84
   17ec4:	b	1854c <__assert_fail@plt+0x6f94>
   17ec8:	mov	r0, r7
   17ecc:	bl	1bff4 <__assert_fail@plt+0xaa3c>
   17ed0:	ldr	r2, [fp, #-168]	; 0xffffff58
   17ed4:	ldr	r3, [fp, #-212]	; 0xffffff2c
   17ed8:	ldrb	r1, [sp, #341]	; 0x155
   17edc:	mov	r5, r8
   17ee0:	subs	r0, r3, r2
   17ee4:	movwne	r0, #1
   17ee8:	cmp	r1, #0
   17eec:	beq	18550 <__assert_fail@plt+0x6f98>
   17ef0:	str	r2, [sp, #88]	; 0x58
   17ef4:	ldr	r6, [fp, #-176]	; 0xffffff50
   17ef8:	ldr	r1, [fp, #-172]	; 0xffffff54
   17efc:	ldr	r5, [fp, #-220]	; 0xffffff24
   17f00:	ldr	r2, [fp, #-216]	; 0xffffff28
   17f04:	str	r3, [sp, #84]	; 0x54
   17f08:	ldr	r3, [fp, #-164]	; 0xffffff5c
   17f0c:	ldr	r7, [fp, #-208]	; 0xffffff30
   17f10:	str	sl, [sp, #108]	; 0x6c
   17f14:	str	r1, [sp, #72]	; 0x48
   17f18:	str	r2, [sp, #68]	; 0x44
   17f1c:	eor	r1, r2, r1
   17f20:	eor	r2, r5, r6
   17f24:	str	r5, [sp, #60]	; 0x3c
   17f28:	str	r6, [sp, #64]	; 0x40
   17f2c:	str	r3, [sp, #96]	; 0x60
   17f30:	str	r7, [sp, #92]	; 0x5c
   17f34:	mov	r6, #0
   17f38:	orr	r1, r2, r1
   17f3c:	ldr	r2, [fp, #-204]	; 0xffffff34
   17f40:	clz	r1, r1
   17f44:	lsr	r1, r1, #5
   17f48:	and	r4, r1, r0
   17f4c:	sub	r0, r7, r3
   17f50:	ldr	r1, [fp, #-200]	; 0xffffff38
   17f54:	clz	r0, r0
   17f58:	str	r2, [sp, #100]	; 0x64
   17f5c:	lsr	r5, r0, #5
   17f60:	ldr	r0, [fp, #-156]	; 0xffffff64
   17f64:	str	r1, [sp, #76]	; 0x4c
   17f68:	str	r0, [sp, #80]	; 0x50
   17f6c:	eor	r0, r1, r0
   17f70:	ldr	r1, [fp, #-160]	; 0xffffff60
   17f74:	str	r1, [sp, #104]	; 0x68
   17f78:	eor	r1, r2, r1
   17f7c:	mov	r2, #5
   17f80:	orr	r0, r1, r0
   17f84:	movw	r1, #5955	; 0x1743
   17f88:	clz	r0, r0
   17f8c:	movt	r1, #2
   17f90:	str	r0, [sp, #56]	; 0x38
   17f94:	mov	r0, #0
   17f98:	bl	11318 <dcgettext@plt>
   17f9c:	bl	16be8 <__assert_fail@plt+0x5630>
   17fa0:	movw	r1, #5988	; 0x1764
   17fa4:	mov	r0, #0
   17fa8:	mov	r2, #5
   17fac:	movt	r1, #2
   17fb0:	bl	11318 <dcgettext@plt>
   17fb4:	movw	r2, #6303	; 0x189f
   17fb8:	sub	r9, fp, #132	; 0x84
   17fbc:	mov	r7, r0
   17fc0:	sub	r3, fp, #220	; 0xdc
   17fc4:	mov	r1, #100	; 0x64
   17fc8:	str	r6, [sp]
   17fcc:	str	r6, [sp, #4]
   17fd0:	movt	r2, #2
   17fd4:	mov	r0, r9
   17fd8:	bl	1d574 <__assert_fail@plt+0xbfbc>
   17fdc:	cmp	r0, #99	; 0x63
   17fe0:	bgt	181a4 <__assert_fail@plt+0x6bec>
   17fe4:	mov	r6, r0
   17fe8:	ldr	r0, [sp, #336]	; 0x150
   17fec:	cmp	r0, #0
   17ff0:	beq	181a4 <__assert_fail@plt+0x6bec>
   17ff4:	str	r4, [sp, #52]	; 0x34
   17ff8:	ldr	r4, [sp, #184]	; 0xb8
   17ffc:	mov	r0, #43	; 0x2b
   18000:	str	r5, [sp, #48]	; 0x30
   18004:	movw	r3, #3271	; 0xcc7
   18008:	add	sl, sp, #116	; 0x74
   1800c:	mov	r2, #27
   18010:	str	r7, [sp, #44]	; 0x2c
   18014:	movt	r3, #2
   18018:	cmp	r4, #0
   1801c:	movwmi	r0, #45	; 0x2d
   18020:	str	r0, [sp]
   18024:	movw	r0, #46021	; 0xb3c5
   18028:	movt	r0, #37282	; 0x91a2
   1802c:	smmla	r0, r4, r0, r4
   18030:	asr	r1, r0, #11
   18034:	add	r5, r1, r0, lsr #31
   18038:	mov	r1, #1
   1803c:	cmp	r5, #0
   18040:	mov	r0, r5
   18044:	rsbmi	r0, r5, #0
   18048:	str	r0, [sp, #4]
   1804c:	mov	r0, sl
   18050:	bl	11498 <__sprintf_chk@plt>
   18054:	mov	r2, r0
   18058:	mov	r0, #3600	; 0xe10
   1805c:	rsb	r1, r6, #100	; 0x64
   18060:	mls	r3, r5, r0, r4
   18064:	ldr	r4, [sp, #52]	; 0x34
   18068:	ldr	r5, [sp, #48]	; 0x30
   1806c:	add	r0, r9, r6
   18070:	cmp	r3, #0
   18074:	beq	18188 <__assert_fail@plt+0x6bd0>
   18078:	add	r2, sl, r2
   1807c:	mov	r7, #58	; 0x3a
   18080:	rsbmi	r3, r3, #0
   18084:	mov	ip, #48	; 0x30
   18088:	movw	lr, #52429	; 0xcccd
   1808c:	strb	r7, [r2]
   18090:	movw	r7, #33205	; 0x81b5
   18094:	uxth	r6, r3
   18098:	movt	lr, #52428	; 0xcccc
   1809c:	movt	r7, #6990	; 0x1b4e
   180a0:	umull	r7, r5, r6, r7
   180a4:	add	r5, ip, r5, lsr #6
   180a8:	strb	r5, [r2, #1]
   180ac:	movw	r5, #34953	; 0x8889
   180b0:	movt	r5, #34952	; 0x8888
   180b4:	umull	r6, r5, r6, r5
   180b8:	ubfx	r4, r5, #5, #8
   180bc:	umull	r7, r6, r4, lr
   180c0:	lsr	r6, r6, #3
   180c4:	add	r6, r6, r6, lsl #2
   180c8:	sub	r4, r4, r6, lsl #1
   180cc:	orr	r4, r4, #48	; 0x30
   180d0:	strb	r4, [r2, #2]
   180d4:	lsr	r4, r5, #5
   180d8:	lsl	r4, r4, #4
   180dc:	sub	r4, r4, r5, lsr #5
   180e0:	sub	r3, r3, r4, lsl #2
   180e4:	movw	r4, #65535	; 0xffff
   180e8:	tst	r3, r4
   180ec:	beq	18174 <__assert_fail@plt+0x6bbc>
   180f0:	mov	r4, #58	; 0x3a
   180f4:	strb	r4, [r2, #3]
   180f8:	uxtb	r4, r3
   180fc:	umull	r7, r6, r4, lr
   18100:	orr	r7, ip, r6, lsr #3
   18104:	strb	r7, [r2, #4]
   18108:	lsr	r7, r6, #3
   1810c:	add	r7, r7, r7, lsl #2
   18110:	sub	r3, r3, r7, lsl #1
   18114:	orr	r3, r3, #48	; 0x30
   18118:	strb	r3, [r2, #5]
   1811c:	add	r2, r2, #6
   18120:	b	18178 <__assert_fail@plt+0x6bc0>
   18124:	mov	r0, #0
   18128:	subs	r0, r4, r0
   1812c:	sbcs	r0, r5, #0
   18130:	bge	18154 <__assert_fail@plt+0x6b9c>
   18134:	subs	r0, r4, #1
   18138:	sbcs	r0, r5, #0
   1813c:	blt	18560 <__assert_fail@plt+0x6fa8>
   18140:	ldr	r0, [sp, #176]	; 0xb0
   18144:	ldr	r1, [fp, #-152]	; 0xffffff68
   18148:	subs	r0, r1, r0
   1814c:	movwne	r0, #1
   18150:	b	18564 <__assert_fail@plt+0x6fac>
   18154:	subs	r0, r4, #1
   18158:	sbcs	r0, r5, #0
   1815c:	blt	1859c <__assert_fail@plt+0x6fe4>
   18160:	ldr	r0, [sp, #176]	; 0xb0
   18164:	ldr	r1, [fp, #-152]	; 0xffffff68
   18168:	subs	r0, r1, r0
   1816c:	movwne	r0, #1
   18170:	b	185a0 <__assert_fail@plt+0x6fe8>
   18174:	add	r2, r2, #3
   18178:	ldr	r4, [sp, #52]	; 0x34
   1817c:	ldr	r5, [sp, #48]	; 0x30
   18180:	mov	r3, #0
   18184:	strb	r3, [r2]
   18188:	movw	r2, #6329	; 0x18b9
   1818c:	mvn	r3, #0
   18190:	movt	r2, #2
   18194:	stm	sp, {r2, sl}
   18198:	mov	r2, #1
   1819c:	bl	115ac <__snprintf_chk@plt>
   181a0:	ldr	r7, [sp, #44]	; 0x2c
   181a4:	ldr	r0, [sp, #56]	; 0x38
   181a8:	sub	sl, fp, #132	; 0x84
   181ac:	and	r4, r4, r5
   181b0:	mov	r1, sl
   181b4:	lsr	r5, r0, #5
   181b8:	mov	r0, r7
   181bc:	bl	16be8 <__assert_fail@plt+0x5630>
   181c0:	movw	r1, #6018	; 0x1782
   181c4:	mov	r0, #0
   181c8:	mov	r2, #5
   181cc:	movt	r1, #2
   181d0:	bl	11318 <dcgettext@plt>
   181d4:	movw	r2, #6303	; 0x189f
   181d8:	mov	r7, r0
   181dc:	mov	r0, #0
   181e0:	sub	r3, fp, #176	; 0xb0
   181e4:	mov	r1, #100	; 0x64
   181e8:	movt	r2, #2
   181ec:	str	r0, [sp]
   181f0:	str	r0, [sp, #4]
   181f4:	mov	r0, sl
   181f8:	bl	1d574 <__assert_fail@plt+0xbfbc>
   181fc:	cmp	r0, #99	; 0x63
   18200:	bgt	18374 <__assert_fail@plt+0x6dbc>
   18204:	mov	r6, r0
   18208:	ldr	r0, [sp, #336]	; 0x150
   1820c:	cmp	r0, #0
   18210:	beq	18374 <__assert_fail@plt+0x6dbc>
   18214:	str	r5, [sp, #56]	; 0x38
   18218:	ldr	r5, [sp, #184]	; 0xb8
   1821c:	mov	r0, #43	; 0x2b
   18220:	str	r4, [sp, #52]	; 0x34
   18224:	movw	r3, #3271	; 0xcc7
   18228:	add	r9, sp, #116	; 0x74
   1822c:	mov	r2, #27
   18230:	movt	r3, #2
   18234:	cmp	r5, #0
   18238:	movwmi	r0, #45	; 0x2d
   1823c:	str	r0, [sp]
   18240:	movw	r0, #46021	; 0xb3c5
   18244:	movt	r0, #37282	; 0x91a2
   18248:	smmla	r0, r5, r0, r5
   1824c:	asr	r1, r0, #11
   18250:	add	r4, r1, r0, lsr #31
   18254:	mov	r1, #1
   18258:	cmp	r4, #0
   1825c:	mov	r0, r4
   18260:	rsbmi	r0, r4, #0
   18264:	str	r0, [sp, #4]
   18268:	mov	r0, r9
   1826c:	bl	11498 <__sprintf_chk@plt>
   18270:	mov	r2, r0
   18274:	mov	r0, #3600	; 0xe10
   18278:	rsb	r1, r6, #100	; 0x64
   1827c:	mls	r3, r4, r0, r5
   18280:	ldr	r4, [sp, #52]	; 0x34
   18284:	ldr	r5, [sp, #56]	; 0x38
   18288:	add	r0, sl, r6
   1828c:	cmp	r3, #0
   18290:	beq	1835c <__assert_fail@plt+0x6da4>
   18294:	mov	sl, r7
   18298:	add	r2, r9, r2
   1829c:	mov	r7, #58	; 0x3a
   182a0:	rsbmi	r3, r3, #0
   182a4:	mov	ip, #48	; 0x30
   182a8:	movw	lr, #52429	; 0xcccd
   182ac:	strb	r7, [r2]
   182b0:	movw	r7, #33205	; 0x81b5
   182b4:	uxth	r6, r3
   182b8:	movt	lr, #52428	; 0xcccc
   182bc:	movt	r7, #6990	; 0x1b4e
   182c0:	umull	r7, r5, r6, r7
   182c4:	add	r5, ip, r5, lsr #6
   182c8:	strb	r5, [r2, #1]
   182cc:	movw	r5, #34953	; 0x8889
   182d0:	movt	r5, #34952	; 0x8888
   182d4:	umull	r6, r5, r6, r5
   182d8:	ubfx	r4, r5, #5, #8
   182dc:	umull	r7, r6, r4, lr
   182e0:	lsr	r6, r6, #3
   182e4:	add	r6, r6, r6, lsl #2
   182e8:	sub	r4, r4, r6, lsl #1
   182ec:	orr	r4, r4, #48	; 0x30
   182f0:	strb	r4, [r2, #2]
   182f4:	lsr	r4, r5, #5
   182f8:	lsl	r4, r4, #4
   182fc:	sub	r4, r4, r5, lsr #5
   18300:	sub	r3, r3, r4, lsl #2
   18304:	movw	r4, #65535	; 0xffff
   18308:	tst	r3, r4
   1830c:	beq	18344 <__assert_fail@plt+0x6d8c>
   18310:	mov	r4, #58	; 0x3a
   18314:	strb	r4, [r2, #3]
   18318:	uxtb	r4, r3
   1831c:	umull	r7, r6, r4, lr
   18320:	orr	r7, ip, r6, lsr #3
   18324:	strb	r7, [r2, #4]
   18328:	lsr	r7, r6, #3
   1832c:	add	r7, r7, r7, lsl #2
   18330:	sub	r3, r3, r7, lsl #1
   18334:	orr	r3, r3, #48	; 0x30
   18338:	strb	r3, [r2, #5]
   1833c:	add	r2, r2, #6
   18340:	b	18348 <__assert_fail@plt+0x6d90>
   18344:	add	r2, r2, #3
   18348:	ldr	r4, [sp, #52]	; 0x34
   1834c:	ldr	r5, [sp, #56]	; 0x38
   18350:	mov	r3, #0
   18354:	mov	r7, sl
   18358:	strb	r3, [r2]
   1835c:	movw	r2, #6329	; 0x18b9
   18360:	mvn	r3, #0
   18364:	movt	r2, #2
   18368:	stm	sp, {r2, r9}
   1836c:	mov	r2, #1
   18370:	bl	115ac <__snprintf_chk@plt>
   18374:	sub	r6, fp, #132	; 0x84
   18378:	mov	r0, r7
   1837c:	and	r5, r4, r5
   18380:	mov	r1, r6
   18384:	bl	16be8 <__assert_fail@plt+0x5630>
   18388:	ldr	r2, [sp, #64]	; 0x40
   1838c:	ldr	r3, [sp, #60]	; 0x3c
   18390:	movw	r0, #6017	; 0x1781
   18394:	movw	r1, #6107	; 0x17db
   18398:	ldr	r7, [sp, #96]	; 0x60
   1839c:	ldr	r4, [sp, #92]	; 0x5c
   183a0:	movt	r0, #2
   183a4:	movt	r1, #2
   183a8:	cmp	r3, r2
   183ac:	mov	r2, r1
   183b0:	ldr	r3, [sp, #68]	; 0x44
   183b4:	moveq	r2, r0
   183b8:	str	r2, [sp, #24]
   183bc:	ldr	r2, [sp, #72]	; 0x48
   183c0:	cmp	r3, r2
   183c4:	mov	r2, r1
   183c8:	ldr	r3, [sp, #84]	; 0x54
   183cc:	moveq	r2, r0
   183d0:	str	r2, [sp, #20]
   183d4:	ldr	r2, [sp, #88]	; 0x58
   183d8:	cmp	r3, r2
   183dc:	mov	r2, r1
   183e0:	ldr	r3, [sp, #100]	; 0x64
   183e4:	moveq	r2, r0
   183e8:	cmp	r4, r7
   183ec:	str	r2, [sp, #16]
   183f0:	mov	r2, r1
   183f4:	moveq	r2, r0
   183f8:	str	r2, [sp, #12]
   183fc:	ldr	r2, [sp, #104]	; 0x68
   18400:	cmp	r3, r2
   18404:	ldr	r2, [sp, #80]	; 0x50
   18408:	ldr	r3, [sp, #76]	; 0x4c
   1840c:	moveq	r1, r0
   18410:	str	r1, [sp, #8]
   18414:	movw	r1, #6105	; 0x17d9
   18418:	movt	r1, #2
   1841c:	cmp	r3, r2
   18420:	mov	r2, #1
   18424:	mov	r3, #100	; 0x64
   18428:	moveq	r1, r0
   1842c:	movw	r0, #6048	; 0x17a0
   18430:	movt	r0, #2
   18434:	str	r1, [sp, #4]
   18438:	mov	r1, #100	; 0x64
   1843c:	str	r0, [sp]
   18440:	mov	r0, r6
   18444:	bl	115ac <__snprintf_chk@plt>
   18448:	ldr	r9, [fp, #8]
   1844c:	ldr	sl, [sp, #108]	; 0x6c
   18450:	cmp	r0, #0
   18454:	bmi	18488 <__assert_fail@plt+0x6ed0>
   18458:	cmp	r0, #99	; 0x63
   1845c:	movcs	r0, #99	; 0x63
   18460:	mov	r1, r0
   18464:	cmp	r0, #1
   18468:	blt	18480 <__assert_fail@plt+0x6ec8>
   1846c:	add	r0, r6, r1
   18470:	ldrb	r2, [r0, #-1]
   18474:	sub	r0, r1, #1
   18478:	cmp	r2, #32
   1847c:	beq	18460 <__assert_fail@plt+0x6ea8>
   18480:	mov	r0, #0
   18484:	strb	r0, [r6, r1]
   18488:	movw	r0, #6263	; 0x1877
   1848c:	sub	r1, fp, #132	; 0x84
   18490:	movt	r0, #2
   18494:	bl	16be8 <__assert_fail@plt+0x5630>
   18498:	movw	r1, #6110	; 0x17de
   1849c:	mov	r0, #0
   184a0:	mov	r2, #5
   184a4:	movt	r1, #2
   184a8:	bl	11318 <dcgettext@plt>
   184ac:	bl	16be8 <__assert_fail@plt+0x5630>
   184b0:	cmp	r5, #0
   184b4:	beq	184d0 <__assert_fail@plt+0x6f18>
   184b8:	movw	r1, #6134	; 0x17f6
   184bc:	mov	r0, #0
   184c0:	mov	r2, #5
   184c4:	movt	r1, #2
   184c8:	bl	11318 <dcgettext@plt>
   184cc:	bl	16be8 <__assert_fail@plt+0x5630>
   184d0:	cmp	r4, r7
   184d4:	mov	r5, r8
   184d8:	beq	18504 <__assert_fail@plt+0x6f4c>
   184dc:	ldr	r0, [sp, #104]	; 0x68
   184e0:	ldr	r1, [sp, #100]	; 0x64
   184e4:	cmp	r1, r0
   184e8:	beq	18504 <__assert_fail@plt+0x6f4c>
   184ec:	movw	r1, #6184	; 0x1828
   184f0:	mov	r0, #0
   184f4:	mov	r2, #5
   184f8:	movt	r1, #2
   184fc:	bl	11318 <dcgettext@plt>
   18500:	bl	16be8 <__assert_fail@plt+0x5630>
   18504:	movw	r1, #6223	; 0x184f
   18508:	mov	r0, #0
   1850c:	mov	r2, #5
   18510:	movt	r1, #2
   18514:	bl	11318 <dcgettext@plt>
   18518:	bl	16be8 <__assert_fail@plt+0x5630>
   1851c:	movw	r0, #6267	; 0x187b
   18520:	movw	r1, #6286	; 0x188e
   18524:	cmp	sl, #0
   18528:	mov	r2, #5
   1852c:	movt	r0, #2
   18530:	movt	r1, #2
   18534:	movne	r1, r0
   18538:	mov	r0, #0
   1853c:	bl	11318 <dcgettext@plt>
   18540:	mov	r1, r0
   18544:	movw	r0, #6256	; 0x1870
   18548:	movt	r0, #2
   1854c:	bl	16be8 <__assert_fail@plt+0x5630>
   18550:	mov	r7, #0
   18554:	cmp	r5, r9
   18558:	bne	176ec <__assert_fail@plt+0x6134>
   1855c:	b	176f4 <__assert_fail@plt+0x613c>
   18560:	mov	r0, #0
   18564:	subs	r0, r4, r0
   18568:	sbc	r1, r5, #0
   1856c:	eor	r0, r0, r2
   18570:	eor	r1, r1, r2
   18574:	orrs	r0, r0, r1
   18578:	beq	185f0 <__assert_fail@plt+0x7038>
   1857c:	subs	r0, r4, #1
   18580:	sbcs	r0, r5, #0
   18584:	blt	185c8 <__assert_fail@plt+0x7010>
   18588:	ldr	r0, [sp, #176]	; 0xb0
   1858c:	ldr	r1, [fp, #-152]	; 0xffffff68
   18590:	subs	r0, r1, r0
   18594:	movwne	r0, #1
   18598:	b	185cc <__assert_fail@plt+0x7014>
   1859c:	mov	r0, #0
   185a0:	movw	r3, #37449	; 0x9249
   185a4:	movw	r2, #9362	; 0x2492
   185a8:	subs	r0, r4, r0
   185ac:	movt	r3, #18724	; 0x4924
   185b0:	movt	r2, #4681	; 0x1249
   185b4:	sbc	r1, r5, #0
   185b8:	subs	r0, r3, r0
   185bc:	sbcs	r0, r2, r1
   185c0:	bge	185f0 <__assert_fail@plt+0x7038>
   185c4:	b	18708 <__assert_fail@plt+0x7150>
   185c8:	mov	r0, #0
   185cc:	subs	r2, r4, r0
   185d0:	mov	r0, #0
   185d4:	mov	r1, #-2147483648	; 0x80000000
   185d8:	sbc	r3, r5, #0
   185dc:	bl	1f2f4 <__assert_fail@plt+0xdd3c>
   185e0:	ldr	r9, [fp, #8]
   185e4:	subs	r0, r0, #7
   185e8:	sbcs	r0, r1, #0
   185ec:	blt	18708 <__assert_fail@plt+0x7150>
   185f0:	rsbs	r0, r4, #0
   185f4:	rscs	r0, r5, #0
   185f8:	bge	18610 <__assert_fail@plt+0x7058>
   185fc:	ldr	r1, [sp, #176]	; 0xb0
   18600:	ldr	r0, [fp, #-152]	; 0xffffff68
   18604:	subs	r2, r0, r1
   18608:	movwne	r2, #1
   1860c:	b	1861c <__assert_fail@plt+0x7064>
   18610:	ldr	r0, [fp, #-152]	; 0xffffff68
   18614:	ldr	r1, [sp, #176]	; 0xb0
   18618:	mov	r2, #0
   1861c:	sub	r0, r1, r0
   18620:	movw	r1, #9363	; 0x2493
   18624:	subs	r2, r4, r2
   18628:	mov	r3, #7
   1862c:	mov	r6, #0
   18630:	movt	r1, #37449	; 0x9249
   18634:	add	r0, r0, #7
   18638:	umull	r2, r3, r2, r3
   1863c:	sbc	r7, r5, #0
   18640:	rsb	r7, r7, r7, lsl #3
   18644:	smmla	r1, r0, r1, r0
   18648:	add	r3, r3, r7
   1864c:	asr	r7, r1, #2
   18650:	add	r1, r7, r1, lsr #31
   18654:	sub	r1, r1, r1, lsl #3
   18658:	add	r0, r0, r1
   1865c:	asr	r7, r0, #31
   18660:	adds	r2, r0, r2
   18664:	mov	r0, #0
   18668:	adc	r1, r7, r3
   1866c:	cmn	r1, #1
   18670:	movwgt	r6, #1
   18674:	cmn	r7, #1
   18678:	mov	r7, #0
   1867c:	movwgt	r7, #1
   18680:	subs	r6, r7, r6
   18684:	movwne	r6, #1
   18688:	cmn	r3, #1
   1868c:	mov	r3, #0
   18690:	movwgt	r3, #1
   18694:	sub	r3, r7, r3
   18698:	clz	r3, r3
   1869c:	lsr	r3, r3, #5
   186a0:	ands	r3, r3, r6
   186a4:	bne	18708 <__assert_fail@plt+0x7150>
   186a8:	ldr	r7, [fp, #-164]	; 0xffffff5c
   186ac:	cmn	r1, #1
   186b0:	mov	r3, #0
   186b4:	mov	r6, #0
   186b8:	movwgt	r3, #1
   186bc:	adds	r2, r2, r7
   186c0:	adc	r1, r1, r7, asr #31
   186c4:	asr	r7, r7, #31
   186c8:	str	r2, [fp, #-164]	; 0xffffff5c
   186cc:	cmn	r1, #1
   186d0:	movwgt	r6, #1
   186d4:	subs	r6, r3, r6
   186d8:	movwne	r6, #1
   186dc:	cmn	r7, #1
   186e0:	movwgt	r0, #1
   186e4:	sub	r0, r3, r0
   186e8:	clz	r0, r0
   186ec:	lsr	r0, r0, #5
   186f0:	tst	r0, r6
   186f4:	asreq	r0, r2, #31
   186f8:	eoreq	r2, r2, r2
   186fc:	eoreq	r0, r1, r0
   18700:	orrseq	r0, r2, r0
   18704:	beq	188c8 <__assert_fail@plt+0x7310>
   18708:	ldrb	r0, [sp, #341]	; 0x155
   1870c:	cmp	r0, #0
   18710:	mov	r5, r8
   18714:	beq	18550 <__assert_fail@plt+0x6f98>
   18718:	movw	r1, #4637	; 0x121d
   1871c:	mov	r0, #0
   18720:	mov	r2, #5
   18724:	mov	r4, #0
   18728:	movt	r1, #2
   1872c:	bl	11318 <dcgettext@plt>
   18730:	mov	sl, r0
   18734:	add	r0, sp, #160	; 0xa0
   18738:	sub	r1, fp, #132	; 0x84
   1873c:	bl	19c40 <__assert_fail@plt+0x8688>
   18740:	mov	r7, r0
   18744:	ldr	r0, [sp, #52]	; 0x34
   18748:	movw	r2, #6303	; 0x189f
   1874c:	str	r4, [sp]
   18750:	str	r4, [sp, #4]
   18754:	sub	r4, fp, #348	; 0x15c
   18758:	sub	r3, fp, #176	; 0xb0
   1875c:	mov	r1, #100	; 0x64
   18760:	movt	r2, #2
   18764:	ldm	r0, {r0, r6}
   18768:	str	r0, [sp, #108]	; 0x6c
   1876c:	ldr	r0, [sp, #176]	; 0xb0
   18770:	str	r0, [sp, #104]	; 0x68
   18774:	mov	r0, r4
   18778:	bl	1d574 <__assert_fail@plt+0xbfbc>
   1877c:	cmp	r0, #99	; 0x63
   18780:	bgt	18ab8 <__assert_fail@plt+0x7500>
   18784:	ldr	r1, [sp, #336]	; 0x150
   18788:	cmp	r1, #0
   1878c:	beq	18ab8 <__assert_fail@plt+0x7500>
   18790:	ldr	r9, [sp, #184]	; 0xb8
   18794:	str	r0, [sp, #88]	; 0x58
   18798:	mov	r0, #43	; 0x2b
   1879c:	str	sl, [sp, #100]	; 0x64
   187a0:	movw	r3, #3271	; 0xcc7
   187a4:	add	r5, sp, #116	; 0x74
   187a8:	mov	r2, #27
   187ac:	str	r7, [sp, #92]	; 0x5c
   187b0:	str	r6, [sp, #96]	; 0x60
   187b4:	movt	r3, #2
   187b8:	cmp	r9, #0
   187bc:	movwmi	r0, #45	; 0x2d
   187c0:	str	r0, [sp]
   187c4:	movw	r0, #46021	; 0xb3c5
   187c8:	movt	r0, #37282	; 0x91a2
   187cc:	smmla	r0, r9, r0, r9
   187d0:	asr	r1, r0, #11
   187d4:	add	sl, r1, r0, lsr #31
   187d8:	mov	r1, #1
   187dc:	cmp	sl, #0
   187e0:	mov	r0, sl
   187e4:	rsbmi	r0, sl, #0
   187e8:	str	r0, [sp, #4]
   187ec:	mov	r0, r5
   187f0:	bl	11498 <__sprintf_chk@plt>
   187f4:	mov	r2, r0
   187f8:	mov	r0, #3600	; 0xe10
   187fc:	ldr	r1, [sp, #88]	; 0x58
   18800:	sub	r4, fp, #348	; 0x15c
   18804:	mls	r3, sl, r0, r9
   18808:	add	r0, r4, r1
   1880c:	rsb	r1, r1, #100	; 0x64
   18810:	cmp	r3, #0
   18814:	beq	18a8c <__assert_fail@plt+0x74d4>
   18818:	mov	r9, r5
   1881c:	add	r2, r5, r2
   18820:	movw	r5, #33205	; 0x81b5
   18824:	mov	r7, #58	; 0x3a
   18828:	rsbmi	r3, r3, #0
   1882c:	mov	ip, #48	; 0x30
   18830:	movw	lr, #52429	; 0xcccd
   18834:	strb	r7, [r2]
   18838:	uxth	r7, r3
   1883c:	movt	r5, #6990	; 0x1b4e
   18840:	movt	lr, #52428	; 0xcccc
   18844:	umull	r5, r4, r7, r5
   18848:	add	r5, ip, r4, lsr #6
   1884c:	strb	r5, [r2, #1]
   18850:	movw	r5, #34953	; 0x8889
   18854:	movt	r5, #34952	; 0x8888
   18858:	umull	r7, r5, r7, r5
   1885c:	ubfx	r4, r5, #5, #8
   18860:	umull	r7, r6, r4, lr
   18864:	lsr	r6, r6, #3
   18868:	add	r6, r6, r6, lsl #2
   1886c:	sub	r4, r4, r6, lsl #1
   18870:	orr	r4, r4, #48	; 0x30
   18874:	strb	r4, [r2, #2]
   18878:	lsr	r4, r5, #5
   1887c:	lsl	r4, r4, #4
   18880:	sub	r4, r4, r5, lsr #5
   18884:	sub	r3, r3, r4, lsl #2
   18888:	movw	r4, #65535	; 0xffff
   1888c:	tst	r3, r4
   18890:	beq	18a78 <__assert_fail@plt+0x74c0>
   18894:	mov	r4, #58	; 0x3a
   18898:	strb	r4, [r2, #3]
   1889c:	uxtb	r4, r3
   188a0:	umull	r7, r6, r4, lr
   188a4:	orr	r7, ip, r6, lsr #3
   188a8:	strb	r7, [r2, #4]
   188ac:	lsr	r7, r6, #3
   188b0:	add	r7, r7, r7, lsl #2
   188b4:	sub	r3, r3, r7, lsl #1
   188b8:	orr	r3, r3, #48	; 0x30
   188bc:	strb	r3, [r2, #5]
   188c0:	add	r2, r2, #6
   188c4:	b	18a7c <__assert_fail@plt+0x74c4>
   188c8:	mvn	r0, #0
   188cc:	sub	r1, fp, #176	; 0xb0
   188d0:	str	r0, [fp, #-144]	; 0xffffff70
   188d4:	mov	r0, r8
   188d8:	bl	1c3f0 <__assert_fail@plt+0xae38>
   188dc:	ldrb	r1, [sp, #341]	; 0x155
   188e0:	cmn	r0, #1
   188e4:	beq	18ad8 <__assert_fail@plt+0x7520>
   188e8:	mov	sl, r0
   188ec:	cmp	r1, #0
   188f0:	beq	18aec <__assert_fail@plt+0x7534>
   188f4:	movw	r1, #4717	; 0x126d
   188f8:	mov	r0, #0
   188fc:	mov	r2, #5
   18900:	mov	r4, #0
   18904:	movt	r1, #2
   18908:	bl	11318 <dcgettext@plt>
   1890c:	mov	r9, r0
   18910:	add	r0, sp, #160	; 0xa0
   18914:	sub	r1, fp, #132	; 0x84
   18918:	bl	19c40 <__assert_fail@plt+0x8688>
   1891c:	movw	r2, #6303	; 0x189f
   18920:	sub	r7, fp, #348	; 0x15c
   18924:	str	r0, [sp, #108]	; 0x6c
   18928:	sub	r3, fp, #176	; 0xb0
   1892c:	mov	r1, #100	; 0x64
   18930:	str	r4, [sp]
   18934:	str	r4, [sp, #4]
   18938:	movt	r2, #2
   1893c:	mov	r0, r7
   18940:	bl	1d574 <__assert_fail@plt+0xbfbc>
   18944:	cmp	r0, #99	; 0x63
   18948:	bgt	18b24 <__assert_fail@plt+0x756c>
   1894c:	mov	r4, r0
   18950:	ldr	r0, [sp, #336]	; 0x150
   18954:	cmp	r0, #0
   18958:	beq	18b24 <__assert_fail@plt+0x756c>
   1895c:	ldr	r5, [sp, #184]	; 0xb8
   18960:	mov	r0, #43	; 0x2b
   18964:	movw	r3, #3271	; 0xcc7
   18968:	mov	r2, #27
   1896c:	movt	r3, #2
   18970:	cmp	r5, #0
   18974:	movwmi	r0, #45	; 0x2d
   18978:	str	r0, [sp]
   1897c:	movw	r0, #46021	; 0xb3c5
   18980:	movt	r0, #37282	; 0x91a2
   18984:	smmla	r0, r5, r0, r5
   18988:	asr	r1, r0, #11
   1898c:	add	r6, r1, r0, lsr #31
   18990:	mov	r1, #1
   18994:	cmp	r6, #0
   18998:	mov	r0, r6
   1899c:	rsbmi	r0, r6, #0
   189a0:	str	r0, [sp, #4]
   189a4:	add	r0, sp, #116	; 0x74
   189a8:	bl	11498 <__sprintf_chk@plt>
   189ac:	mov	r2, r0
   189b0:	mov	r0, #3600	; 0xe10
   189b4:	rsb	r1, r4, #100	; 0x64
   189b8:	mls	r3, r6, r0, r5
   189bc:	add	r0, r7, r4
   189c0:	cmp	r3, #0
   189c4:	beq	18b04 <__assert_fail@plt+0x754c>
   189c8:	add	r7, sp, #116	; 0x74
   189cc:	rsbmi	r3, r3, #0
   189d0:	mov	ip, #48	; 0x30
   189d4:	movw	lr, #52429	; 0xcccd
   189d8:	add	r2, r7, r2
   189dc:	mov	r7, #58	; 0x3a
   189e0:	uxth	r6, r3
   189e4:	movt	lr, #52428	; 0xcccc
   189e8:	strb	r7, [r2]
   189ec:	movw	r7, #33205	; 0x81b5
   189f0:	movt	r7, #6990	; 0x1b4e
   189f4:	umull	r7, r5, r6, r7
   189f8:	add	r5, ip, r5, lsr #6
   189fc:	strb	r5, [r2, #1]
   18a00:	movw	r5, #34953	; 0x8889
   18a04:	movt	r5, #34952	; 0x8888
   18a08:	umull	r6, r5, r6, r5
   18a0c:	ubfx	r4, r5, #5, #8
   18a10:	umull	r7, r6, r4, lr
   18a14:	lsr	r6, r6, #3
   18a18:	add	r6, r6, r6, lsl #2
   18a1c:	sub	r4, r4, r6, lsl #1
   18a20:	orr	r4, r4, #48	; 0x30
   18a24:	strb	r4, [r2, #2]
   18a28:	lsr	r4, r5, #5
   18a2c:	lsl	r4, r4, #4
   18a30:	sub	r4, r4, r5, lsr #5
   18a34:	sub	r3, r3, r4, lsl #2
   18a38:	movw	r4, #65535	; 0xffff
   18a3c:	tst	r3, r4
   18a40:	beq	18af8 <__assert_fail@plt+0x7540>
   18a44:	mov	r4, #58	; 0x3a
   18a48:	strb	r4, [r2, #3]
   18a4c:	uxtb	r4, r3
   18a50:	umull	r7, r6, r4, lr
   18a54:	orr	r7, ip, r6, lsr #3
   18a58:	strb	r7, [r2, #4]
   18a5c:	lsr	r7, r6, #3
   18a60:	add	r7, r7, r7, lsl #2
   18a64:	sub	r3, r3, r7, lsl #1
   18a68:	orr	r3, r3, #48	; 0x30
   18a6c:	strb	r3, [r2, #5]
   18a70:	add	r2, r2, #6
   18a74:	b	18afc <__assert_fail@plt+0x7544>
   18a78:	add	r2, r2, #3
   18a7c:	mov	r3, #0
   18a80:	sub	r4, fp, #348	; 0x15c
   18a84:	mov	r5, r9
   18a88:	strb	r3, [r2]
   18a8c:	movw	r2, #6329	; 0x18b9
   18a90:	mvn	r3, #0
   18a94:	movt	r2, #2
   18a98:	stm	sp, {r2, r5}
   18a9c:	mov	r2, #1
   18aa0:	bl	115ac <__snprintf_chk@plt>
   18aa4:	ldr	r9, [fp, #8]
   18aa8:	ldr	sl, [sp, #100]	; 0x64
   18aac:	ldr	r6, [sp, #96]	; 0x60
   18ab0:	ldr	r7, [sp, #92]	; 0x5c
   18ab4:	mov	r5, r8
   18ab8:	ldr	r0, [sp, #104]	; 0x68
   18abc:	ldr	r2, [sp, #108]	; 0x6c
   18ac0:	mov	r1, r7
   18ac4:	mov	r3, r6
   18ac8:	stm	sp, {r0, r4}
   18acc:	mov	r0, sl
   18ad0:	bl	16be8 <__assert_fail@plt+0x5630>
   18ad4:	b	18550 <__assert_fail@plt+0x6f98>
   18ad8:	ldr	r9, [fp, #8]
   18adc:	cmp	r1, #0
   18ae0:	mov	r5, r8
   18ae4:	bne	18718 <__assert_fail@plt+0x7160>
   18ae8:	b	18550 <__assert_fail@plt+0x6f98>
   18aec:	ldr	r9, [fp, #8]
   18af0:	mov	ip, sl
   18af4:	b	18e14 <__assert_fail@plt+0x785c>
   18af8:	add	r2, r2, #3
   18afc:	mov	r3, #0
   18b00:	strb	r3, [r2]
   18b04:	movw	r2, #6329	; 0x18b9
   18b08:	mvn	r3, #0
   18b0c:	movt	r2, #2
   18b10:	str	r2, [sp]
   18b14:	add	r2, sp, #116	; 0x74
   18b18:	str	r2, [sp, #4]
   18b1c:	mov	r2, #1
   18b20:	bl	115ac <__snprintf_chk@plt>
   18b24:	ldr	r1, [sp, #108]	; 0x6c
   18b28:	sub	r2, fp, #348	; 0x15c
   18b2c:	mov	r0, r9
   18b30:	bl	16be8 <__assert_fail@plt+0x5630>
   18b34:	ldr	r9, [fp, #8]
   18b38:	mov	ip, sl
   18b3c:	ldrb	r0, [sp, #341]	; 0x155
   18b40:	cmp	r0, #0
   18b44:	beq	18e14 <__assert_fail@plt+0x785c>
   18b48:	ldr	r0, [sp, #316]	; 0x13c
   18b4c:	ldr	r1, [sp, #320]	; 0x140
   18b50:	str	ip, [sp, #104]	; 0x68
   18b54:	orrs	r2, r1, r0
   18b58:	bne	18c2c <__assert_fail@plt+0x7674>
   18b5c:	movw	r1, #4747	; 0x128b
   18b60:	mov	r0, #0
   18b64:	mov	r2, #5
   18b68:	movt	r1, #2
   18b6c:	bl	11318 <dcgettext@plt>
   18b70:	mov	r4, r0
   18b74:	ldr	r0, [fp, #-156]	; 0xffffff64
   18b78:	movw	r1, #34079	; 0x851f
   18b7c:	mvn	r3, #18
   18b80:	movt	r1, #20971	; 0x51eb
   18b84:	smmul	r1, r0, r1
   18b88:	asr	r2, r1, #5
   18b8c:	add	r1, r2, r1, lsr #31
   18b90:	mov	r2, #100	; 0x64
   18b94:	mls	r2, r1, r2, r0
   18b98:	cmp	r2, #0
   18b9c:	rsbmi	r2, r2, #0
   18ba0:	adds	r7, r1, #19
   18ba4:	submi	r7, r3, r1
   18ba8:	movw	r1, #63635	; 0xf893
   18bac:	movw	r3, #6357	; 0x18d5
   18bb0:	str	r2, [sp, #4]
   18bb4:	mov	r2, #13
   18bb8:	movt	r1, #65535	; 0xffff
   18bbc:	movt	r3, #2
   18bc0:	str	r7, [sp]
   18bc4:	add	r7, sp, #116	; 0x74
   18bc8:	cmp	r0, r1
   18bcc:	mov	r0, r7
   18bd0:	mov	r1, #1
   18bd4:	addgt	r3, r3, #1
   18bd8:	bl	11498 <__sprintf_chk@plt>
   18bdc:	ldr	r1, [fp, #-160]	; 0xffffff60
   18be0:	movw	r2, #6336	; 0x18c0
   18be4:	ldr	r0, [fp, #-164]	; 0xffffff5c
   18be8:	mov	r3, #100	; 0x64
   18bec:	movt	r2, #2
   18bf0:	stm	sp, {r2, r7}
   18bf4:	sub	r7, fp, #348	; 0x15c
   18bf8:	mov	r2, #1
   18bfc:	add	r1, r1, #1
   18c00:	str	r0, [sp, #12]
   18c04:	mov	r0, r7
   18c08:	str	r1, [sp, #8]
   18c0c:	mov	r1, #100	; 0x64
   18c10:	bl	115ac <__snprintf_chk@plt>
   18c14:	mov	r0, r4
   18c18:	mov	r1, r7
   18c1c:	bl	16be8 <__assert_fail@plt+0x5630>
   18c20:	ldr	r0, [sp, #316]	; 0x13c
   18c24:	ldr	r1, [sp, #320]	; 0x140
   18c28:	ldr	r9, [fp, #8]
   18c2c:	cmp	r1, #0
   18c30:	cmpne	r0, #0
   18c34:	beq	18c68 <__assert_fail@plt+0x76b0>
   18c38:	movw	r1, #4791	; 0x12b7
   18c3c:	mov	r0, #0
   18c40:	mov	r2, #5
   18c44:	movt	r1, #2
   18c48:	bl	11318 <dcgettext@plt>
   18c4c:	mov	r4, r0
   18c50:	add	r0, sp, #160	; 0xa0
   18c54:	sub	r1, fp, #132	; 0x84
   18c58:	bl	19c40 <__assert_fail@plt+0x8688>
   18c5c:	mov	r1, r0
   18c60:	mov	r0, r4
   18c64:	bl	16be8 <__assert_fail@plt+0x5630>
   18c68:	movw	r1, #4848	; 0x12f0
   18c6c:	mov	r0, #0
   18c70:	mov	r2, #5
   18c74:	mov	r4, #0
   18c78:	movt	r1, #2
   18c7c:	bl	11318 <dcgettext@plt>
   18c80:	movw	r2, #6303	; 0x189f
   18c84:	sub	r7, fp, #348	; 0x15c
   18c88:	mov	sl, r0
   18c8c:	sub	r3, fp, #176	; 0xb0
   18c90:	mov	r1, #100	; 0x64
   18c94:	str	r4, [sp]
   18c98:	str	r4, [sp, #4]
   18c9c:	movt	r2, #2
   18ca0:	mov	r0, r7
   18ca4:	bl	1d574 <__assert_fail@plt+0xbfbc>
   18ca8:	cmp	r0, #99	; 0x63
   18cac:	bgt	18e04 <__assert_fail@plt+0x784c>
   18cb0:	mov	r4, r0
   18cb4:	ldr	r0, [sp, #336]	; 0x150
   18cb8:	cmp	r0, #0
   18cbc:	beq	18e04 <__assert_fail@plt+0x784c>
   18cc0:	ldr	r5, [sp, #184]	; 0xb8
   18cc4:	mov	r0, #43	; 0x2b
   18cc8:	movw	r3, #3271	; 0xcc7
   18ccc:	add	r9, sp, #116	; 0x74
   18cd0:	mov	r2, #27
   18cd4:	movt	r3, #2
   18cd8:	cmp	r5, #0
   18cdc:	movwmi	r0, #45	; 0x2d
   18ce0:	str	r0, [sp]
   18ce4:	movw	r0, #46021	; 0xb3c5
   18ce8:	movt	r0, #37282	; 0x91a2
   18cec:	smmla	r0, r5, r0, r5
   18cf0:	asr	r1, r0, #11
   18cf4:	add	r6, r1, r0, lsr #31
   18cf8:	mov	r1, #1
   18cfc:	cmp	r6, #0
   18d00:	mov	r0, r6
   18d04:	rsbmi	r0, r6, #0
   18d08:	str	r0, [sp, #4]
   18d0c:	mov	r0, r9
   18d10:	bl	11498 <__sprintf_chk@plt>
   18d14:	mov	r2, r0
   18d18:	mov	r0, #3600	; 0xe10
   18d1c:	rsb	r1, r4, #100	; 0x64
   18d20:	mls	r3, r6, r0, r5
   18d24:	add	r0, r7, r4
   18d28:	cmp	r3, #0
   18d2c:	beq	18de8 <__assert_fail@plt+0x7830>
   18d30:	add	r2, r9, r2
   18d34:	mov	r7, #58	; 0x3a
   18d38:	rsbmi	r3, r3, #0
   18d3c:	mov	ip, #48	; 0x30
   18d40:	movw	lr, #52429	; 0xcccd
   18d44:	strb	r7, [r2]
   18d48:	movw	r7, #33205	; 0x81b5
   18d4c:	uxth	r6, r3
   18d50:	movt	lr, #52428	; 0xcccc
   18d54:	movt	r7, #6990	; 0x1b4e
   18d58:	umull	r7, r5, r6, r7
   18d5c:	add	r5, ip, r5, lsr #6
   18d60:	strb	r5, [r2, #1]
   18d64:	movw	r5, #34953	; 0x8889
   18d68:	movt	r5, #34952	; 0x8888
   18d6c:	umull	r6, r5, r6, r5
   18d70:	ubfx	r4, r5, #5, #8
   18d74:	umull	r7, r6, r4, lr
   18d78:	lsr	r6, r6, #3
   18d7c:	add	r6, r6, r6, lsl #2
   18d80:	sub	r4, r4, r6, lsl #1
   18d84:	orr	r4, r4, #48	; 0x30
   18d88:	strb	r4, [r2, #2]
   18d8c:	lsr	r4, r5, #5
   18d90:	lsl	r4, r4, #4
   18d94:	sub	r4, r4, r5, lsr #5
   18d98:	sub	r3, r3, r4, lsl #2
   18d9c:	movw	r4, #65535	; 0xffff
   18da0:	tst	r3, r4
   18da4:	beq	18ddc <__assert_fail@plt+0x7824>
   18da8:	mov	r4, #58	; 0x3a
   18dac:	strb	r4, [r2, #3]
   18db0:	uxtb	r4, r3
   18db4:	umull	r7, r6, r4, lr
   18db8:	orr	r7, ip, r6, lsr #3
   18dbc:	strb	r7, [r2, #4]
   18dc0:	lsr	r7, r6, #3
   18dc4:	add	r7, r7, r7, lsl #2
   18dc8:	sub	r3, r3, r7, lsl #1
   18dcc:	orr	r3, r3, #48	; 0x30
   18dd0:	strb	r3, [r2, #5]
   18dd4:	add	r2, r2, #6
   18dd8:	b	18de0 <__assert_fail@plt+0x7828>
   18ddc:	add	r2, r2, #3
   18de0:	mov	r3, #0
   18de4:	strb	r3, [r2]
   18de8:	movw	r2, #6329	; 0x18b9
   18dec:	mvn	r3, #0
   18df0:	movt	r2, #2
   18df4:	stm	sp, {r2, r9}
   18df8:	mov	r2, #1
   18dfc:	bl	115ac <__snprintf_chk@plt>
   18e00:	ldr	r9, [fp, #8]
   18e04:	sub	r1, fp, #348	; 0x15c
   18e08:	mov	r0, sl
   18e0c:	bl	16be8 <__assert_fail@plt+0x5630>
   18e10:	ldr	ip, [sp, #104]	; 0x68
   18e14:	ldr	r0, [sp, #88]	; 0x58
   18e18:	ldrd	r4, [r0]
   18e1c:	ldr	r0, [sp, #44]	; 0x2c
   18e20:	ldrd	r6, [r0]
   18e24:	ldr	r0, [sp, #48]	; 0x30
   18e28:	ldrd	r0, [r0]
   18e2c:	orr	r2, r7, r5
   18e30:	orr	r3, r6, r4
   18e34:	orr	r7, r2, r1
   18e38:	orr	r6, r3, r0
   18e3c:	orrs	r7, r6, r7
   18e40:	beq	19588 <__assert_fail@plt+0x7fd0>
   18e44:	ldrb	r7, [sp, #341]	; 0x155
   18e48:	cmp	r7, #0
   18e4c:	beq	18ea8 <__assert_fail@plt+0x78f0>
   18e50:	orrs	r2, r3, r2
   18e54:	ldrne	r2, [fp, #-164]	; 0xffffff5c
   18e58:	cmpne	r2, #15
   18e5c:	beq	18e80 <__assert_fail@plt+0x78c8>
   18e60:	movw	r1, #4874	; 0x130a
   18e64:	mov	r0, #0
   18e68:	mov	r2, #5
   18e6c:	movt	r1, #2
   18e70:	bl	11318 <dcgettext@plt>
   18e74:	bl	16be8 <__assert_fail@plt+0x5630>
   18e78:	ldr	r0, [sp, #48]	; 0x30
   18e7c:	ldrd	r0, [r0]
   18e80:	orrs	r0, r0, r1
   18e84:	ldrne	r0, [fp, #-168]	; 0xffffff58
   18e88:	cmpne	r0, #12
   18e8c:	beq	18ea8 <__assert_fail@plt+0x78f0>
   18e90:	movw	r1, #4971	; 0x136b
   18e94:	mov	r0, #0
   18e98:	mov	r2, #5
   18e9c:	movt	r1, #2
   18ea0:	bl	11318 <dcgettext@plt>
   18ea4:	bl	16be8 <__assert_fail@plt+0x5630>
   18ea8:	ldr	r7, [sp, #88]	; 0x58
   18eac:	ldr	r0, [fp, #-156]	; 0xffffff64
   18eb0:	mov	r3, #0
   18eb4:	mov	r2, #0
   18eb8:	ldm	r7, {r4, r7}
   18ebc:	asr	r1, r0, #31
   18ec0:	cmn	r1, #1
   18ec4:	movwgt	r3, #1
   18ec8:	adds	r5, r0, r4
   18ecc:	adc	r0, r1, r7
   18ed0:	mov	r1, #0
   18ed4:	cmn	r0, #1
   18ed8:	movwgt	r1, #1
   18edc:	subs	r1, r3, r1
   18ee0:	movwne	r1, #1
   18ee4:	cmn	r7, #1
   18ee8:	movwgt	r2, #1
   18eec:	sub	r2, r3, r2
   18ef0:	clz	r2, r2
   18ef4:	lsr	r2, r2, #5
   18ef8:	tst	r2, r1
   18efc:	asreq	r1, r5, #31
   18f00:	eoreq	r2, r5, r5
   18f04:	eoreq	r0, r0, r1
   18f08:	orrseq	r0, r2, r0
   18f0c:	bne	18f78 <__assert_fail@plt+0x79c0>
   18f10:	ldr	r7, [sp, #44]	; 0x2c
   18f14:	ldr	r0, [fp, #-160]	; 0xffffff60
   18f18:	mov	r3, #0
   18f1c:	mov	r2, #0
   18f20:	ldm	r7, {r4, r9}
   18f24:	asr	r1, r0, #31
   18f28:	cmn	r1, #1
   18f2c:	movwgt	r3, #1
   18f30:	adds	r7, r0, r4
   18f34:	adc	r0, r1, r9
   18f38:	mov	r1, #0
   18f3c:	cmn	r0, #1
   18f40:	movwgt	r1, #1
   18f44:	subs	r1, r3, r1
   18f48:	movwne	r1, #1
   18f4c:	cmn	r9, #1
   18f50:	movwgt	r2, #1
   18f54:	sub	r2, r3, r2
   18f58:	clz	r2, r2
   18f5c:	lsr	r2, r2, #5
   18f60:	tst	r2, r1
   18f64:	asreq	r1, r7, #31
   18f68:	eoreq	r2, r7, r7
   18f6c:	eoreq	r0, r0, r1
   18f70:	orrseq	r0, r2, r0
   18f74:	beq	18fb4 <__assert_fail@plt+0x79fc>
   18f78:	ldrb	r0, [sp, #341]	; 0x155
   18f7c:	ldr	r9, [fp, #8]
   18f80:	mov	r5, r8
   18f84:	cmp	r0, #0
   18f88:	beq	18550 <__assert_fail@plt+0x6f98>
   18f8c:	movw	r1, #5042	; 0x13b2
   18f90:	mov	r0, #0
   18f94:	mov	r2, #5
   18f98:	movt	r1, #2
   18f9c:	bl	11318 <dcgettext@plt>
   18fa0:	movw	r1, #5056	; 0x13c0
   18fa4:	movw	r2, #2149	; 0x865
   18fa8:	movt	r1, #2
   18fac:	bl	16be8 <__assert_fail@plt+0x5630>
   18fb0:	b	18550 <__assert_fail@plt+0x6f98>
   18fb4:	ldr	r6, [sp, #48]	; 0x30
   18fb8:	ldr	r0, [fp, #-164]	; 0xffffff5c
   18fbc:	mov	r3, #0
   18fc0:	mov	r2, #0
   18fc4:	ldm	r6, {r4, r9}
   18fc8:	asr	r1, r0, #31
   18fcc:	cmn	r1, #1
   18fd0:	movwgt	r3, #1
   18fd4:	adds	sl, r0, r4
   18fd8:	adc	r0, r1, r9
   18fdc:	mov	r1, #0
   18fe0:	cmn	r0, #1
   18fe4:	movwgt	r1, #1
   18fe8:	subs	r1, r3, r1
   18fec:	movwne	r1, #1
   18ff0:	cmn	r9, #1
   18ff4:	movwgt	r2, #1
   18ff8:	sub	r2, r3, r2
   18ffc:	clz	r2, r2
   19000:	lsr	r2, r2, #5
   19004:	tst	r2, r1
   19008:	asreq	r1, sl, #31
   1900c:	eoreq	r2, sl, sl
   19010:	eoreq	r0, r0, r1
   19014:	orrseq	r0, r2, r0
   19018:	bne	18f78 <__assert_fail@plt+0x79c0>
   1901c:	sub	r2, fp, #220	; 0xdc
   19020:	ldr	r3, [fp, #-188]	; 0xffffff44
   19024:	sub	ip, fp, #176	; 0xb0
   19028:	str	r7, [fp, #-160]	; 0xffffff60
   1902c:	str	r5, [fp, #-156]	; 0xffffff64
   19030:	str	sl, [fp, #-164]	; 0xffffff5c
   19034:	ldm	r2, {r0, r1, r2}
   19038:	stm	ip, {r0, r1, r2}
   1903c:	sub	r1, fp, #176	; 0xb0
   19040:	mov	r0, r8
   19044:	str	r3, [fp, #-144]	; 0xffffff70
   19048:	bl	1c3f0 <__assert_fail@plt+0xae38>
   1904c:	ldrb	r1, [sp, #341]	; 0x155
   19050:	cmn	r0, #1
   19054:	str	r0, [sp, #104]	; 0x68
   19058:	beq	19220 <__assert_fail@plt+0x7c68>
   1905c:	cmp	r1, #0
   19060:	beq	19580 <__assert_fail@plt+0x7fc8>
   19064:	movw	r1, #5136	; 0x1410
   19068:	mov	r0, #0
   1906c:	mov	r2, #5
   19070:	mov	r9, #0
   19074:	movt	r1, #2
   19078:	bl	11318 <dcgettext@plt>
   1907c:	ldr	r1, [sp, #88]	; 0x58
   19080:	ldr	r2, [sp, #48]	; 0x30
   19084:	ldm	r1, {r4, ip}
   19088:	ldr	r1, [sp, #44]	; 0x2c
   1908c:	ldrd	r2, [r2]
   19090:	ldr	r6, [r1]
   19094:	ldr	r1, [r1, #4]
   19098:	str	r6, [sp]
   1909c:	stmib	sp, {r1, r2, r3}
   190a0:	mov	r2, r4
   190a4:	mov	r3, ip
   190a8:	bl	16be8 <__assert_fail@plt+0x5630>
   190ac:	movw	r1, #5200	; 0x1450
   190b0:	mov	r0, #0
   190b4:	mov	r2, #5
   190b8:	movt	r1, #2
   190bc:	bl	11318 <dcgettext@plt>
   190c0:	movw	r2, #6303	; 0x189f
   190c4:	str	r0, [sp, #108]	; 0x6c
   190c8:	sub	r0, fp, #348	; 0x15c
   190cc:	sub	r3, fp, #176	; 0xb0
   190d0:	mov	r1, #100	; 0x64
   190d4:	str	r9, [sp]
   190d8:	str	r9, [sp, #4]
   190dc:	movt	r2, #2
   190e0:	bl	1d574 <__assert_fail@plt+0xbfbc>
   190e4:	cmp	r0, #99	; 0x63
   190e8:	bgt	193d0 <__assert_fail@plt+0x7e18>
   190ec:	mov	r9, r0
   190f0:	ldr	r0, [sp, #336]	; 0x150
   190f4:	cmp	r0, #0
   190f8:	beq	193d0 <__assert_fail@plt+0x7e18>
   190fc:	ldr	r4, [sp, #184]	; 0xb8
   19100:	mov	r0, #43	; 0x2b
   19104:	movw	r3, #3271	; 0xcc7
   19108:	mov	r2, #27
   1910c:	movt	r3, #2
   19110:	cmp	r4, #0
   19114:	movwmi	r0, #45	; 0x2d
   19118:	str	r0, [sp]
   1911c:	movw	r0, #46021	; 0xb3c5
   19120:	movt	r0, #37282	; 0x91a2
   19124:	smmla	r0, r4, r0, r4
   19128:	asr	r1, r0, #11
   1912c:	add	r6, r1, r0, lsr #31
   19130:	mov	r1, #1
   19134:	cmp	r6, #0
   19138:	mov	r0, r6
   1913c:	rsbmi	r0, r6, #0
   19140:	str	r0, [sp, #4]
   19144:	add	r0, sp, #116	; 0x74
   19148:	bl	11498 <__sprintf_chk@plt>
   1914c:	mov	r2, r0
   19150:	mov	r0, #3600	; 0xe10
   19154:	rsb	r1, r9, #100	; 0x64
   19158:	mls	ip, r6, r0, r4
   1915c:	sub	r0, fp, #348	; 0x15c
   19160:	add	r0, r0, r9
   19164:	cmp	ip, #0
   19168:	beq	193b0 <__assert_fail@plt+0x7df8>
   1916c:	add	r3, sp, #116	; 0x74
   19170:	movw	r4, #33205	; 0x81b5
   19174:	mov	r6, #58	; 0x3a
   19178:	rsbmi	ip, ip, #0
   1917c:	add	r9, r3, r2
   19180:	movt	r4, #6990	; 0x1b4e
   19184:	mov	r2, #48	; 0x30
   19188:	strb	r6, [r9]
   1918c:	uxth	r6, ip
   19190:	umull	r4, lr, r6, r4
   19194:	add	r4, r2, lr, lsr #6
   19198:	movw	lr, #52429	; 0xcccd
   1919c:	movt	lr, #52428	; 0xcccc
   191a0:	strb	r4, [r9, #1]
   191a4:	movw	r4, #34953	; 0x8889
   191a8:	movt	r4, #34952	; 0x8888
   191ac:	umull	r6, r4, r6, r4
   191b0:	ubfx	r6, r4, #5, #8
   191b4:	umull	r2, r3, r6, lr
   191b8:	lsr	r2, r3, #3
   191bc:	add	r2, r2, r2, lsl #2
   191c0:	sub	r2, r6, r2, lsl #1
   191c4:	orr	r2, r2, #48	; 0x30
   191c8:	strb	r2, [r9, #2]
   191cc:	lsr	r2, r4, #5
   191d0:	lsl	r2, r2, #4
   191d4:	sub	r2, r2, r4, lsr #5
   191d8:	sub	r3, ip, r2, lsl #2
   191dc:	movw	r2, #65535	; 0xffff
   191e0:	tst	r3, r2
   191e4:	beq	193a4 <__assert_fail@plt+0x7dec>
   191e8:	mov	r2, #58	; 0x3a
   191ec:	strb	r2, [r9, #3]
   191f0:	uxtb	r2, r3
   191f4:	umull	r2, r6, r2, lr
   191f8:	mov	r2, #48	; 0x30
   191fc:	orr	r2, r2, r6, lsr #3
   19200:	strb	r2, [r9, #4]
   19204:	lsr	r2, r6, #3
   19208:	add	r2, r2, r2, lsl #2
   1920c:	sub	r2, r3, r2, lsl #1
   19210:	orr	r2, r2, #48	; 0x30
   19214:	strb	r2, [r9, #5]
   19218:	add	r2, r9, #6
   1921c:	b	193a8 <__assert_fail@plt+0x7df0>
   19220:	ldr	r9, [fp, #8]
   19224:	cmp	r1, #0
   19228:	mov	r5, r8
   1922c:	beq	18550 <__assert_fail@plt+0x6f98>
   19230:	movw	r1, #5073	; 0x13d1
   19234:	mov	r0, #0
   19238:	mov	r2, #5
   1923c:	mov	r4, #0
   19240:	movt	r1, #2
   19244:	bl	11318 <dcgettext@plt>
   19248:	movw	r2, #6303	; 0x189f
   1924c:	sub	r7, fp, #348	; 0x15c
   19250:	mov	r9, r0
   19254:	sub	r3, fp, #176	; 0xb0
   19258:	mov	r1, #100	; 0x64
   1925c:	str	r4, [sp]
   19260:	str	r4, [sp, #4]
   19264:	movt	r2, #2
   19268:	mov	r0, r7
   1926c:	bl	1d574 <__assert_fail@plt+0xbfbc>
   19270:	cmp	r0, #99	; 0x63
   19274:	bgt	19bb4 <__assert_fail@plt+0x85fc>
   19278:	mov	r6, r0
   1927c:	ldr	r0, [sp, #336]	; 0x150
   19280:	cmp	r0, #0
   19284:	beq	19bb4 <__assert_fail@plt+0x85fc>
   19288:	ldr	r5, [sp, #184]	; 0xb8
   1928c:	mov	r0, #43	; 0x2b
   19290:	movw	r3, #3271	; 0xcc7
   19294:	add	sl, sp, #116	; 0x74
   19298:	mov	r2, #27
   1929c:	movt	r3, #2
   192a0:	cmp	r5, #0
   192a4:	movwmi	r0, #45	; 0x2d
   192a8:	str	r0, [sp]
   192ac:	movw	r0, #46021	; 0xb3c5
   192b0:	movt	r0, #37282	; 0x91a2
   192b4:	smmla	r0, r5, r0, r5
   192b8:	asr	r1, r0, #11
   192bc:	add	r4, r1, r0, lsr #31
   192c0:	mov	r1, #1
   192c4:	cmp	r4, #0
   192c8:	mov	r0, r4
   192cc:	rsbmi	r0, r4, #0
   192d0:	str	r0, [sp, #4]
   192d4:	mov	r0, sl
   192d8:	bl	11498 <__sprintf_chk@plt>
   192dc:	mov	r2, r0
   192e0:	mov	r0, #3600	; 0xe10
   192e4:	rsb	r1, r6, #100	; 0x64
   192e8:	mls	r3, r4, r0, r5
   192ec:	add	r0, r7, r6
   192f0:	cmp	r3, #0
   192f4:	beq	19b9c <__assert_fail@plt+0x85e4>
   192f8:	add	r2, sl, r2
   192fc:	mov	r7, #58	; 0x3a
   19300:	rsbmi	r3, r3, #0
   19304:	mov	ip, #48	; 0x30
   19308:	movw	lr, #52429	; 0xcccd
   1930c:	strb	r7, [r2]
   19310:	movw	r7, #33205	; 0x81b5
   19314:	uxth	r6, r3
   19318:	movt	lr, #52428	; 0xcccc
   1931c:	movt	r7, #6990	; 0x1b4e
   19320:	umull	r7, r5, r6, r7
   19324:	add	r5, ip, r5, lsr #6
   19328:	strb	r5, [r2, #1]
   1932c:	movw	r5, #34953	; 0x8889
   19330:	movt	r5, #34952	; 0x8888
   19334:	umull	r6, r5, r6, r5
   19338:	ubfx	r4, r5, #5, #8
   1933c:	umull	r7, r6, r4, lr
   19340:	lsr	r6, r6, #3
   19344:	add	r6, r6, r6, lsl #2
   19348:	sub	r4, r4, r6, lsl #1
   1934c:	orr	r4, r4, #48	; 0x30
   19350:	strb	r4, [r2, #2]
   19354:	lsr	r4, r5, #5
   19358:	lsl	r4, r4, #4
   1935c:	sub	r4, r4, r5, lsr #5
   19360:	sub	r3, r3, r4, lsl #2
   19364:	movw	r4, #65535	; 0xffff
   19368:	tst	r3, r4
   1936c:	beq	19b90 <__assert_fail@plt+0x85d8>
   19370:	mov	r4, #58	; 0x3a
   19374:	strb	r4, [r2, #3]
   19378:	uxtb	r4, r3
   1937c:	umull	r7, r6, r4, lr
   19380:	orr	r7, ip, r6, lsr #3
   19384:	strb	r7, [r2, #4]
   19388:	lsr	r7, r6, #3
   1938c:	add	r7, r7, r7, lsl #2
   19390:	sub	r3, r3, r7, lsl #1
   19394:	orr	r3, r3, #48	; 0x30
   19398:	strb	r3, [r2, #5]
   1939c:	add	r2, r2, #6
   193a0:	b	19b94 <__assert_fail@plt+0x85dc>
   193a4:	add	r2, r9, #3
   193a8:	mov	r3, #0
   193ac:	strb	r3, [r2]
   193b0:	movw	r2, #6329	; 0x18b9
   193b4:	mvn	r3, #0
   193b8:	movt	r2, #2
   193bc:	str	r2, [sp]
   193c0:	add	r2, sp, #116	; 0x74
   193c4:	str	r2, [sp, #4]
   193c8:	mov	r2, #1
   193cc:	bl	115ac <__snprintf_chk@plt>
   193d0:	ldr	r0, [sp, #108]	; 0x6c
   193d4:	sub	r1, fp, #348	; 0x15c
   193d8:	bl	16be8 <__assert_fail@plt+0x5630>
   193dc:	ldr	r0, [fp, #-188]	; 0xffffff44
   193e0:	cmn	r0, #1
   193e4:	ldrne	r1, [fp, #-144]	; 0xffffff70
   193e8:	cmpne	r1, r0
   193ec:	beq	19408 <__assert_fail@plt+0x7e50>
   193f0:	movw	r1, #5226	; 0x146a
   193f4:	mov	r0, #0
   193f8:	mov	r2, #5
   193fc:	movt	r1, #2
   19400:	bl	11318 <dcgettext@plt>
   19404:	bl	16be8 <__assert_fail@plt+0x5630>
   19408:	ldr	r0, [sp, #48]	; 0x30
   1940c:	ldrd	r0, [r0]
   19410:	orrs	r0, r0, r1
   19414:	bne	19580 <__assert_fail@plt+0x7fc8>
   19418:	ldr	r0, [fp, #-164]	; 0xffffff5c
   1941c:	cmp	r0, sl
   19420:	bne	19440 <__assert_fail@plt+0x7e88>
   19424:	ldr	r0, [sp, #44]	; 0x2c
   19428:	ldrd	r0, [r0]
   1942c:	orrs	r0, r0, r1
   19430:	bne	19580 <__assert_fail@plt+0x7fc8>
   19434:	ldr	r0, [fp, #-160]	; 0xffffff60
   19438:	cmp	r0, r7
   1943c:	beq	19580 <__assert_fail@plt+0x7fc8>
   19440:	movw	r1, #5287	; 0x14a7
   19444:	mov	r0, #0
   19448:	mov	r2, #5
   1944c:	movt	r1, #2
   19450:	bl	11318 <dcgettext@plt>
   19454:	bl	16be8 <__assert_fail@plt+0x5630>
   19458:	movw	r1, #5346	; 0x14e2
   1945c:	mov	r0, #0
   19460:	mov	r2, #5
   19464:	movt	r1, #2
   19468:	bl	11318 <dcgettext@plt>
   1946c:	mov	r4, r0
   19470:	movw	r0, #34079	; 0x851f
   19474:	mvn	r3, #18
   19478:	movw	r9, #6357	; 0x18d5
   1947c:	movt	r0, #20971	; 0x51eb
   19480:	movt	r9, #2
   19484:	smmul	r0, r5, r0
   19488:	add	r6, r9, #1
   1948c:	asr	r1, r0, #5
   19490:	add	r0, r1, r0, lsr #31
   19494:	mov	r1, #100	; 0x64
   19498:	mls	r1, r0, r1, r5
   1949c:	cmp	r1, #0
   194a0:	rsbmi	r1, r1, #0
   194a4:	adds	r2, r0, #19
   194a8:	submi	r2, r3, r0
   194ac:	movw	r0, #63635	; 0xf893
   194b0:	str	r1, [sp, #4]
   194b4:	mov	r3, r9
   194b8:	mov	r1, #1
   194bc:	movt	r0, #65535	; 0xffff
   194c0:	str	r2, [sp]
   194c4:	mov	r2, #13
   194c8:	cmp	r5, r0
   194cc:	add	r5, sp, #116	; 0x74
   194d0:	movgt	r3, r6
   194d4:	mov	r0, r5
   194d8:	bl	11498 <__sprintf_chk@plt>
   194dc:	add	r2, r7, #1
   194e0:	mov	r0, r4
   194e4:	mov	r1, r5
   194e8:	mov	r3, sl
   194ec:	bl	16be8 <__assert_fail@plt+0x5630>
   194f0:	movw	r1, #5381	; 0x1505
   194f4:	mov	r0, #0
   194f8:	mov	r2, #5
   194fc:	movt	r1, #2
   19500:	bl	11318 <dcgettext@plt>
   19504:	mov	r4, r0
   19508:	ldr	r0, [fp, #-156]	; 0xffffff64
   1950c:	movw	r1, #34079	; 0x851f
   19510:	mvn	r7, #18
   19514:	movt	r1, #20971	; 0x51eb
   19518:	smmul	r1, r0, r1
   1951c:	asr	r2, r1, #5
   19520:	add	r2, r2, r1, lsr #31
   19524:	mov	r1, #100	; 0x64
   19528:	mls	r1, r2, r1, r0
   1952c:	cmp	r1, #0
   19530:	rsbmi	r1, r1, #0
   19534:	adds	r3, r2, #19
   19538:	str	r1, [sp, #4]
   1953c:	movw	r1, #63635	; 0xf893
   19540:	submi	r3, r7, r2
   19544:	mov	r2, #13
   19548:	movt	r1, #65535	; 0xffff
   1954c:	str	r3, [sp]
   19550:	cmp	r0, r1
   19554:	mov	r0, r5
   19558:	mov	r1, #1
   1955c:	movgt	r9, r6
   19560:	mov	r3, r9
   19564:	bl	11498 <__sprintf_chk@plt>
   19568:	ldr	r0, [fp, #-160]	; 0xffffff60
   1956c:	ldr	r3, [fp, #-164]	; 0xffffff5c
   19570:	mov	r1, r5
   19574:	add	r2, r0, #1
   19578:	mov	r0, r4
   1957c:	bl	16be8 <__assert_fail@plt+0x5630>
   19580:	ldr	r9, [fp, #8]
   19584:	ldr	ip, [sp, #104]	; 0x68
   19588:	ldr	r0, [sp, #336]	; 0x150
   1958c:	cmp	r0, #0
   19590:	beq	195e8 <__assert_fail@plt+0x8030>
   19594:	ldr	r0, [fp, #-140]	; 0xffffff74
   19598:	ldr	r2, [sp, #184]	; 0xb8
   1959c:	asr	r1, r0, #31
   195a0:	subs	r0, r0, r2
   195a4:	sbc	r1, r1, r2, asr #31
   195a8:	adds	r2, r0, ip
   195ac:	mov	sl, r2
   195b0:	adc	r0, r1, ip, asr #31
   195b4:	teq	r0, r2, asr #31
   195b8:	beq	195ec <__assert_fail@plt+0x8034>
   195bc:	ldrb	r0, [sp, #341]	; 0x155
   195c0:	mov	r5, r8
   195c4:	cmp	r0, #0
   195c8:	beq	18550 <__assert_fail@plt+0x6f98>
   195cc:	movw	r1, #5416	; 0x1528
   195d0:	mov	r0, #0
   195d4:	mov	r2, #5
   195d8:	movt	r1, #2
   195dc:	bl	11318 <dcgettext@plt>
   195e0:	ldr	r1, [sp, #184]	; 0xb8
   195e4:	b	1854c <__assert_fail@plt+0x6f94>
   195e8:	mov	sl, ip
   195ec:	ldrb	r0, [sp, #341]	; 0x155
   195f0:	cmp	r0, #0
   195f4:	beq	197ac <__assert_fail@plt+0x81f4>
   195f8:	movw	r1, #5459	; 0x1553
   195fc:	mov	r0, #0
   19600:	mov	r2, #5
   19604:	mov	r4, #0
   19608:	movt	r1, #2
   1960c:	bl	11318 <dcgettext@plt>
   19610:	movw	r2, #6303	; 0x189f
   19614:	sub	r7, fp, #348	; 0x15c
   19618:	mov	r9, r0
   1961c:	sub	r3, fp, #176	; 0xb0
   19620:	mov	r1, #100	; 0x64
   19624:	str	r4, [sp]
   19628:	str	r4, [sp, #4]
   1962c:	movt	r2, #2
   19630:	mov	r0, r7
   19634:	bl	1d574 <__assert_fail@plt+0xbfbc>
   19638:	cmp	r0, #99	; 0x63
   1963c:	bgt	19798 <__assert_fail@plt+0x81e0>
   19640:	mov	r6, r0
   19644:	ldr	r0, [sp, #336]	; 0x150
   19648:	cmp	r0, #0
   1964c:	beq	19798 <__assert_fail@plt+0x81e0>
   19650:	ldr	r4, [sp, #184]	; 0xb8
   19654:	mov	r0, #43	; 0x2b
   19658:	movw	r3, #3271	; 0xcc7
   1965c:	mov	r2, #27
   19660:	movt	r3, #2
   19664:	cmp	r4, #0
   19668:	movwmi	r0, #45	; 0x2d
   1966c:	str	r0, [sp]
   19670:	movw	r0, #46021	; 0xb3c5
   19674:	movt	r0, #37282	; 0x91a2
   19678:	smmla	r0, r4, r0, r4
   1967c:	asr	r1, r0, #11
   19680:	add	r5, r1, r0, lsr #31
   19684:	mov	r1, #1
   19688:	cmp	r5, #0
   1968c:	mov	r0, r5
   19690:	rsbmi	r0, r5, #0
   19694:	str	r0, [sp, #4]
   19698:	add	r0, sp, #116	; 0x74
   1969c:	bl	11498 <__sprintf_chk@plt>
   196a0:	mov	r2, r0
   196a4:	mov	r0, #3600	; 0xe10
   196a8:	rsb	r1, r6, #100	; 0x64
   196ac:	mls	r3, r5, r0, r4
   196b0:	add	r0, r7, r6
   196b4:	cmp	r3, #0
   196b8:	beq	19778 <__assert_fail@plt+0x81c0>
   196bc:	add	r7, sp, #116	; 0x74
   196c0:	rsbmi	r3, r3, #0
   196c4:	mov	ip, #48	; 0x30
   196c8:	movw	lr, #52429	; 0xcccd
   196cc:	add	r2, r7, r2
   196d0:	mov	r7, #58	; 0x3a
   196d4:	uxth	r6, r3
   196d8:	movt	lr, #52428	; 0xcccc
   196dc:	strb	r7, [r2]
   196e0:	movw	r7, #33205	; 0x81b5
   196e4:	movt	r7, #6990	; 0x1b4e
   196e8:	umull	r7, r5, r6, r7
   196ec:	add	r5, ip, r5, lsr #6
   196f0:	strb	r5, [r2, #1]
   196f4:	movw	r5, #34953	; 0x8889
   196f8:	movt	r5, #34952	; 0x8888
   196fc:	umull	r6, r5, r6, r5
   19700:	ubfx	r4, r5, #5, #8
   19704:	umull	r7, r6, r4, lr
   19708:	lsr	r6, r6, #3
   1970c:	add	r6, r6, r6, lsl #2
   19710:	sub	r4, r4, r6, lsl #1
   19714:	orr	r4, r4, #48	; 0x30
   19718:	strb	r4, [r2, #2]
   1971c:	lsr	r4, r5, #5
   19720:	lsl	r4, r4, #4
   19724:	sub	r4, r4, r5, lsr #5
   19728:	sub	r3, r3, r4, lsl #2
   1972c:	movw	r4, #65535	; 0xffff
   19730:	tst	r3, r4
   19734:	beq	1976c <__assert_fail@plt+0x81b4>
   19738:	mov	r4, #58	; 0x3a
   1973c:	strb	r4, [r2, #3]
   19740:	uxtb	r4, r3
   19744:	umull	r7, r6, r4, lr
   19748:	orr	r7, ip, r6, lsr #3
   1974c:	strb	r7, [r2, #4]
   19750:	lsr	r7, r6, #3
   19754:	add	r7, r7, r7, lsl #2
   19758:	sub	r3, r3, r7, lsl #1
   1975c:	orr	r3, r3, #48	; 0x30
   19760:	strb	r3, [r2, #5]
   19764:	add	r2, r2, #6
   19768:	b	19770 <__assert_fail@plt+0x81b8>
   1976c:	add	r2, r2, #3
   19770:	mov	r3, #0
   19774:	strb	r3, [r2]
   19778:	movw	r2, #6329	; 0x18b9
   1977c:	mvn	r3, #0
   19780:	movt	r2, #2
   19784:	str	r2, [sp]
   19788:	add	r2, sp, #116	; 0x74
   1978c:	str	r2, [sp, #4]
   19790:	mov	r2, #1
   19794:	bl	115ac <__snprintf_chk@plt>
   19798:	mov	r2, sl
   1979c:	asr	r3, sl, #31
   197a0:	sub	r1, fp, #348	; 0x15c
   197a4:	mov	r0, r9
   197a8:	bl	16be8 <__assert_fail@plt+0x5630>
   197ac:	ldr	r5, [sp, #304]	; 0x130
   197b0:	ldr	r0, [sp, #252]	; 0xfc
   197b4:	movw	r4, #51712	; 0xca00
   197b8:	mov	r3, #0
   197bc:	movt	r4, #15258	; 0x3b9a
   197c0:	mov	r2, r4
   197c4:	asr	r1, r5, #31
   197c8:	adds	r7, r5, r0
   197cc:	adc	r6, r1, r0, asr #31
   197d0:	mov	r0, r7
   197d4:	mov	r1, r6
   197d8:	bl	1f2f4 <__assert_fail@plt+0xdd3c>
   197dc:	adds	r0, r2, r4
   197e0:	mov	r2, r4
   197e4:	adc	r1, r3, #0
   197e8:	mov	r3, #0
   197ec:	bl	1f2f4 <__assert_fail@plt+0xdd3c>
   197f0:	subs	r0, r7, r2
   197f4:	str	r2, [sp, #100]	; 0x64
   197f8:	mov	r3, #0
   197fc:	sbc	r1, r6, r2, asr #31
   19800:	mov	r2, r4
   19804:	bl	1f2f4 <__assert_fail@plt+0xdd3c>
   19808:	str	r0, [sp, #104]	; 0x68
   1980c:	ldr	r0, [sp, #40]	; 0x28
   19810:	str	r1, [sp, #108]	; 0x6c
   19814:	ldm	r0, {r6, r9}
   19818:	cmn	r9, #1
   1981c:	ble	19840 <__assert_fail@plt+0x8288>
   19820:	movw	r1, #24175	; 0x5e6f
   19824:	movw	r0, #6699	; 0x1a2b
   19828:	movt	r1, #15437	; 0x3c4d
   1982c:	movt	r0, #9
   19830:	subs	r1, r1, r6
   19834:	sbcs	r0, r0, r9
   19838:	bge	19874 <__assert_fail@plt+0x82bc>
   1983c:	b	19a54 <__assert_fail@plt+0x849c>
   19840:	mvn	r1, #0
   19844:	eor	r0, r6, r1
   19848:	eor	r1, r9, r1
   1984c:	orrs	r0, r0, r1
   19850:	beq	19874 <__assert_fail@plt+0x82bc>
   19854:	mov	r0, #0
   19858:	mov	r1, #-2147483648	; 0x80000000
   1985c:	mov	r2, r6
   19860:	mov	r3, r9
   19864:	bl	1f2f4 <__assert_fail@plt+0xdd3c>
   19868:	subs	r0, r0, #3600	; 0xe10
   1986c:	sbcs	r0, r1, #0
   19870:	blt	19a54 <__assert_fail@plt+0x849c>
   19874:	mov	r0, #3600	; 0xe10
   19878:	mov	r3, #0
   1987c:	umull	r1, r2, r6, r0
   19880:	mla	r0, r9, r0, r2
   19884:	asr	r2, sl, #31
   19888:	adds	r4, sl, r1
   1988c:	mov	r1, #0
   19890:	adc	sl, r2, r0
   19894:	cmn	sl, #1
   19898:	movwgt	r3, #1
   1989c:	cmn	r2, #1
   198a0:	mov	r2, #0
   198a4:	movwgt	r2, #1
   198a8:	subs	r3, r2, r3
   198ac:	movwne	r3, #1
   198b0:	cmn	r0, #1
   198b4:	movwgt	r1, #1
   198b8:	sub	r0, r2, r1
   198bc:	clz	r0, r0
   198c0:	lsr	r0, r0, #5
   198c4:	tst	r0, r3
   198c8:	bne	19a54 <__assert_fail@plt+0x849c>
   198cc:	ldr	r0, [sp, #36]	; 0x24
   198d0:	ldm	r0, {r0, r7}
   198d4:	cmn	r7, #1
   198d8:	str	r0, [sp, #96]	; 0x60
   198dc:	ble	19904 <__assert_fail@plt+0x834c>
   198e0:	ldr	r2, [sp, #96]	; 0x60
   198e4:	movw	r1, #8738	; 0x2222
   198e8:	movw	r0, #8738	; 0x2222
   198ec:	movt	r1, #8738	; 0x2222
   198f0:	movt	r0, #546	; 0x222
   198f4:	subs	r1, r1, r2
   198f8:	sbcs	r0, r0, r7
   198fc:	bge	1993c <__assert_fail@plt+0x8384>
   19900:	b	19a54 <__assert_fail@plt+0x849c>
   19904:	ldr	r0, [sp, #96]	; 0x60
   19908:	mvn	r1, #0
   1990c:	eor	r0, r0, r1
   19910:	eor	r1, r7, r1
   19914:	orrs	r0, r0, r1
   19918:	beq	1993c <__assert_fail@plt+0x8384>
   1991c:	ldr	r2, [sp, #96]	; 0x60
   19920:	mov	r0, #0
   19924:	mov	r1, #-2147483648	; 0x80000000
   19928:	mov	r3, r7
   1992c:	bl	1f2f4 <__assert_fail@plt+0xdd3c>
   19930:	subs	r0, r0, #60	; 0x3c
   19934:	sbcs	r0, r1, #0
   19938:	blt	19a54 <__assert_fail@plt+0x849c>
   1993c:	ldr	r1, [sp, #96]	; 0x60
   19940:	mov	r0, #60	; 0x3c
   19944:	rsb	r2, r7, r7, lsl #4
   19948:	mov	r3, #0
   1994c:	umull	r0, r1, r1, r0
   19950:	add	r1, r1, r2, lsl #2
   19954:	adds	ip, r4, r0
   19958:	mov	r0, #0
   1995c:	mov	r2, #0
   19960:	adc	r4, sl, r1
   19964:	cmn	r4, #1
   19968:	movwgt	r0, #1
   1996c:	cmn	sl, #1
   19970:	movwgt	r3, #1
   19974:	subs	r0, r3, r0
   19978:	movwne	r0, #1
   1997c:	cmn	r1, #1
   19980:	mov	r1, #0
   19984:	movwgt	r1, #1
   19988:	sub	r1, r3, r1
   1998c:	clz	r1, r1
   19990:	lsr	r1, r1, #5
   19994:	ands	r0, r1, r0
   19998:	bne	19a54 <__assert_fail@plt+0x849c>
   1999c:	ldr	r1, [sp, #32]
   199a0:	cmn	r4, #1
   199a4:	mov	r0, #0
   199a8:	mov	r3, #0
   199ac:	movwgt	r0, #1
   199b0:	ldr	lr, [r1]
   199b4:	ldr	sl, [r1, #4]
   199b8:	adds	ip, ip, lr
   199bc:	adc	r4, r4, sl
   199c0:	cmn	r4, #1
   199c4:	movwgt	r3, #1
   199c8:	subs	r3, r0, r3
   199cc:	movwne	r3, #1
   199d0:	cmn	sl, #1
   199d4:	movwgt	r2, #1
   199d8:	sub	r0, r0, r2
   199dc:	clz	r0, r0
   199e0:	lsr	r0, r0, #5
   199e4:	ands	r0, r0, r3
   199e8:	bne	19a54 <__assert_fail@plt+0x849c>
   199ec:	ldr	r1, [sp, #104]	; 0x68
   199f0:	cmn	r4, #1
   199f4:	mov	r2, #0
   199f8:	mov	r3, #0
   199fc:	mov	r0, #0
   19a00:	movwgt	r2, #1
   19a04:	adds	r1, ip, r1
   19a08:	str	r1, [sp, #104]	; 0x68
   19a0c:	ldr	r1, [sp, #108]	; 0x6c
   19a10:	adc	r4, r4, r1
   19a14:	cmn	r4, #1
   19a18:	movwgt	r3, #1
   19a1c:	subs	r3, r2, r3
   19a20:	movwne	r3, #1
   19a24:	cmn	r1, #1
   19a28:	movwgt	r0, #1
   19a2c:	sub	r0, r2, r0
   19a30:	clz	r0, r0
   19a34:	lsr	r0, r0, #5
   19a38:	tst	r0, r3
   19a3c:	ldreq	r1, [sp, #104]	; 0x68
   19a40:	asreq	r0, r1, #31
   19a44:	eoreq	r2, r1, r1
   19a48:	eoreq	r0, r4, r0
   19a4c:	orrseq	r0, r2, r0
   19a50:	beq	19a90 <__assert_fail@plt+0x84d8>
   19a54:	ldrb	r0, [sp, #341]	; 0x155
   19a58:	cmp	r0, #0
   19a5c:	beq	19a78 <__assert_fail@plt+0x84c0>
   19a60:	movw	r1, #5486	; 0x156e
   19a64:	mov	r0, #0
   19a68:	mov	r2, #5
   19a6c:	movt	r1, #2
   19a70:	bl	11318 <dcgettext@plt>
   19a74:	bl	16be8 <__assert_fail@plt+0x5630>
   19a78:	ldr	r9, [fp, #8]
   19a7c:	mov	r7, #0
   19a80:	mov	r5, r8
   19a84:	cmp	r5, r9
   19a88:	bne	176ec <__assert_fail@plt+0x6134>
   19a8c:	b	176f4 <__assert_fail@plt+0x613c>
   19a90:	ldr	r0, [sp, #68]	; 0x44
   19a94:	ldr	r1, [sp, #104]	; 0x68
   19a98:	ldr	r2, [sp, #100]	; 0x64
   19a9c:	str	r1, [r0]
   19aa0:	str	r2, [r0, #4]
   19aa4:	ldrb	r0, [sp, #341]	; 0x155
   19aa8:	cmp	r0, #0
   19aac:	beq	19b84 <__assert_fail@plt+0x85cc>
   19ab0:	ldr	r1, [sp, #96]	; 0x60
   19ab4:	orr	r2, r9, r5, asr #31
   19ab8:	orr	r0, r6, r5
   19abc:	orr	r2, r2, r7
   19ac0:	orr	r0, r0, r1
   19ac4:	orr	r1, r2, sl
   19ac8:	orr	r0, r0, lr
   19acc:	orrs	r0, r0, r1
   19ad0:	beq	19b84 <__assert_fail@plt+0x85cc>
   19ad4:	movw	r1, #5534	; 0x159e
   19ad8:	mov	r0, #0
   19adc:	mov	r2, #5
   19ae0:	movt	r1, #2
   19ae4:	bl	11318 <dcgettext@plt>
   19ae8:	ldr	r1, [sp, #40]	; 0x28
   19aec:	ldm	r1, {r3, r9}
   19af0:	ldr	r1, [sp, #36]	; 0x24
   19af4:	ldm	r1, {r2, r5}
   19af8:	ldr	r1, [sp, #32]
   19afc:	ldrd	r6, [r1]
   19b00:	ldr	r1, [sp, #304]	; 0x130
   19b04:	stm	sp, {r2, r5, r6, r7}
   19b08:	mov	r2, r3
   19b0c:	mov	r3, r9
   19b10:	str	r1, [sp, #16]
   19b14:	bl	16be8 <__assert_fail@plt+0x5630>
   19b18:	movw	r1, #5610	; 0x15ea
   19b1c:	mov	r0, #0
   19b20:	mov	r2, #5
   19b24:	movt	r1, #2
   19b28:	bl	11318 <dcgettext@plt>
   19b2c:	ldr	r2, [sp, #104]	; 0x68
   19b30:	mov	r3, r4
   19b34:	bl	16be8 <__assert_fail@plt+0x5630>
   19b38:	ldr	r0, [fp, #-144]	; 0xffffff70
   19b3c:	cmn	r0, #1
   19b40:	beq	19b84 <__assert_fail@plt+0x85cc>
   19b44:	ldr	r1, [sp, #68]	; 0x44
   19b48:	add	r2, sp, #116	; 0x74
   19b4c:	mov	r0, r8
   19b50:	bl	1c01c <__assert_fail@plt+0xaa64>
   19b54:	cmp	r0, #0
   19b58:	beq	19b84 <__assert_fail@plt+0x85cc>
   19b5c:	ldr	r0, [sp, #148]	; 0x94
   19b60:	ldr	r1, [fp, #-144]	; 0xffffff70
   19b64:	cmp	r1, r0
   19b68:	beq	19b84 <__assert_fail@plt+0x85cc>
   19b6c:	movw	r1, #5645	; 0x160d
   19b70:	mov	r0, #0
   19b74:	mov	r2, #5
   19b78:	movt	r1, #2
   19b7c:	bl	11318 <dcgettext@plt>
   19b80:	bl	16be8 <__assert_fail@plt+0x5630>
   19b84:	ldr	r9, [fp, #8]
   19b88:	mov	r5, r8
   19b8c:	b	170e8 <__assert_fail@plt+0x5b30>
   19b90:	add	r2, r2, #3
   19b94:	mov	r3, #0
   19b98:	strb	r3, [r2]
   19b9c:	movw	r2, #6329	; 0x18b9
   19ba0:	mvn	r3, #0
   19ba4:	movt	r2, #2
   19ba8:	stm	sp, {r2, sl}
   19bac:	mov	r2, #1
   19bb0:	bl	115ac <__snprintf_chk@plt>
   19bb4:	sub	r1, fp, #348	; 0x15c
   19bb8:	mov	r0, r9
   19bbc:	bl	16be8 <__assert_fail@plt+0x5630>
   19bc0:	ldr	r9, [fp, #8]
   19bc4:	mov	r5, r8
   19bc8:	b	18550 <__assert_fail@plt+0x6f98>
   19bcc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19bd0:	add	fp, sp, #24
   19bd4:	sub	sp, sp, #8
   19bd8:	mov	r6, r0
   19bdc:	movw	r0, #3098	; 0xc1a
   19be0:	mov	r8, r2
   19be4:	mov	r5, r1
   19be8:	movt	r0, #2
   19bec:	bl	113c0 <getenv@plt>
   19bf0:	mov	r4, r0
   19bf4:	bl	1bf68 <__assert_fail@plt+0xa9b0>
   19bf8:	cmp	r0, #0
   19bfc:	beq	19c34 <__assert_fail@plt+0x867c>
   19c00:	mov	r7, r0
   19c04:	stm	sp, {r0, r4}
   19c08:	mov	r0, r6
   19c0c:	mov	r1, r5
   19c10:	mov	r2, r8
   19c14:	mov	r3, #0
   19c18:	bl	16c50 <__assert_fail@plt+0x5698>
   19c1c:	mov	r4, r0
   19c20:	mov	r0, r7
   19c24:	bl	1bff4 <__assert_fail@plt+0xaa3c>
   19c28:	mov	r0, r4
   19c2c:	sub	sp, fp, #24
   19c30:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19c34:	mov	r0, #0
   19c38:	sub	sp, fp, #24
   19c3c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19c40:	push	{r4, r5, fp, lr}
   19c44:	add	fp, sp, #8
   19c48:	sub	sp, sp, #16
   19c4c:	mov	r5, r0
   19c50:	ldrb	r0, [r0, #188]	; 0xbc
   19c54:	mov	r4, r1
   19c58:	cmp	r0, #0
   19c5c:	beq	19ca0 <__assert_fail@plt+0x86e8>
   19c60:	ldrd	r0, [r5, #8]
   19c64:	adds	r2, r0, #1
   19c68:	adc	r3, r1, #0
   19c6c:	rsbs	r2, r2, #13
   19c70:	rscs	r2, r3, #0
   19c74:	bcc	19cac <__assert_fail@plt+0x86f4>
   19c78:	movw	r2, #1032	; 0x408
   19c7c:	mov	r3, #11
   19c80:	movw	r1, #65518	; 0xffee
   19c84:	movt	r2, #2
   19c88:	movt	r1, #1
   19c8c:	mla	r0, r0, r3, r2
   19c90:	str	r1, [sp]
   19c94:	add	r0, r0, #11
   19c98:	str	r0, [sp, #4]
   19c9c:	b	19cc0 <__assert_fail@plt+0x8708>
   19ca0:	mov	r0, #0
   19ca4:	strb	r0, [r4]
   19ca8:	b	19cd4 <__assert_fail@plt+0x871c>
   19cac:	str	r0, [sp, #8]
   19cb0:	movw	r0, #3266	; 0xcc2
   19cb4:	str	r1, [sp, #12]
   19cb8:	movt	r0, #2
   19cbc:	str	r0, [sp]
   19cc0:	mov	r0, r4
   19cc4:	mov	r1, #100	; 0x64
   19cc8:	mov	r2, #1
   19ccc:	mvn	r3, #0
   19cd0:	bl	115ac <__snprintf_chk@plt>
   19cd4:	ldr	r1, [r5, #16]
   19cd8:	cmp	r1, #0
   19cdc:	bmi	19d2c <__assert_fail@plt+0x8774>
   19ce0:	cmp	r0, #99	; 0x63
   19ce4:	bhi	19d2c <__assert_fail@plt+0x8774>
   19ce8:	cmp	r1, #6
   19cec:	bgt	19d2c <__assert_fail@plt+0x8774>
   19cf0:	movw	r2, #1186	; 0x4a2
   19cf4:	cmp	r0, #0
   19cf8:	mvn	r3, #0
   19cfc:	movt	r2, #2
   19d00:	add	r1, r2, r1, lsl #2
   19d04:	movw	r2, #65517	; 0xffed
   19d08:	movt	r2, #1
   19d0c:	str	r1, [sp, #4]
   19d10:	rsb	r1, r0, #100	; 0x64
   19d14:	addeq	r2, r2, #1
   19d18:	str	r2, [sp]
   19d1c:	add	r2, r4, r0
   19d20:	mov	r0, r2
   19d24:	mov	r2, #1
   19d28:	bl	115ac <__snprintf_chk@plt>
   19d2c:	mov	r0, r4
   19d30:	sub	sp, fp, #8
   19d34:	pop	{r4, r5, fp, pc}
   19d38:	push	{r4, r5, r6, sl, fp, lr}
   19d3c:	add	fp, sp, #16
   19d40:	mov	r4, r1
   19d44:	movw	r1, #3576	; 0xdf8
   19d48:	mov	r5, r0
   19d4c:	movt	r1, #2
   19d50:	mov	r0, r4
   19d54:	bl	112a0 <strcmp@plt>
   19d58:	cmp	r0, #0
   19d5c:	beq	19dfc <__assert_fail@plt+0x8844>
   19d60:	movw	r1, #3580	; 0xdfc
   19d64:	mov	r0, r4
   19d68:	movt	r1, #2
   19d6c:	bl	112a0 <strcmp@plt>
   19d70:	movw	r6, #2284	; 0x8ec
   19d74:	cmp	r0, #0
   19d78:	movt	r6, #2
   19d7c:	beq	19e0c <__assert_fail@plt+0x8854>
   19d80:	movw	r1, #4073	; 0xfe9
   19d84:	mov	r0, r4
   19d88:	movt	r1, #2
   19d8c:	bl	112a0 <strcmp@plt>
   19d90:	cmp	r0, #0
   19d94:	beq	19e18 <__assert_fail@plt+0x8860>
   19d98:	ldr	r1, [r5, #192]	; 0xc0
   19d9c:	cmp	r1, #0
   19da0:	beq	19dc4 <__assert_fail@plt+0x880c>
   19da4:	add	r5, r5, #204	; 0xcc
   19da8:	mov	r0, r4
   19dac:	bl	112a0 <strcmp@plt>
   19db0:	cmp	r0, #0
   19db4:	beq	19e24 <__assert_fail@plt+0x886c>
   19db8:	ldr	r1, [r5], #12
   19dbc:	cmp	r1, #0
   19dc0:	bne	19da8 <__assert_fail@plt+0x87f0>
   19dc4:	movw	r5, #2332	; 0x91c
   19dc8:	movw	r1, #3583	; 0xdff
   19dcc:	movt	r5, #2
   19dd0:	movt	r1, #2
   19dd4:	mov	r0, r4
   19dd8:	bl	112a0 <strcmp@plt>
   19ddc:	cmp	r0, #0
   19de0:	beq	19e28 <__assert_fail@plt+0x8870>
   19de4:	ldr	r1, [r5, #12]!
   19de8:	cmp	r1, #0
   19dec:	bne	19dd4 <__assert_fail@plt+0x881c>
   19df0:	mov	r5, #0
   19df4:	mov	r0, r5
   19df8:	pop	{r4, r5, r6, sl, fp, pc}
   19dfc:	movw	r5, #2284	; 0x8ec
   19e00:	movt	r5, #2
   19e04:	mov	r0, r5
   19e08:	pop	{r4, r5, r6, sl, fp, pc}
   19e0c:	add	r5, r6, #12
   19e10:	mov	r0, r5
   19e14:	pop	{r4, r5, r6, sl, fp, pc}
   19e18:	add	r5, r6, #24
   19e1c:	mov	r0, r5
   19e20:	pop	{r4, r5, r6, sl, fp, pc}
   19e24:	sub	r5, r5, #12
   19e28:	mov	r0, r5
   19e2c:	pop	{r4, r5, r6, sl, fp, pc}
   19e30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e34:	add	fp, sp, #28
   19e38:	sub	sp, sp, #52	; 0x34
   19e3c:	str	r0, [sp]
   19e40:	mov	r0, r1
   19e44:	mov	r5, r2
   19e48:	mov	r6, r1
   19e4c:	bl	11468 <strlen@plt>
   19e50:	mov	r9, #0
   19e54:	mov	r7, r0
   19e58:	tst	r5, #4
   19e5c:	beq	19e8c <__assert_fail@plt+0x88d4>
   19e60:	mov	r4, r0
   19e64:	mov	r0, r6
   19e68:	mov	r1, #46	; 0x2e
   19e6c:	bl	11474 <strchr@plt>
   19e70:	cmp	r0, #0
   19e74:	beq	19e8c <__assert_fail@plt+0x88d4>
   19e78:	sub	r7, r0, r6
   19e7c:	mov	r9, r0
   19e80:	sub	r1, r4, r7
   19e84:	cmp	r1, #3
   19e88:	bne	1a140 <__assert_fail@plt+0x8b88>
   19e8c:	sub	r0, r7, #8
   19e90:	cmp	r0, #4
   19e94:	bhi	1a140 <__assert_fail@plt+0x8b88>
   19e98:	ands	r0, r7, #1
   19e9c:	bne	1a140 <__assert_fail@plt+0x8b88>
   19ea0:	mov	r0, #0
   19ea4:	ldrb	r1, [r6, r0]
   19ea8:	sub	r1, r1, #48	; 0x30
   19eac:	cmp	r1, #10
   19eb0:	bcs	1a140 <__assert_fail@plt+0x8b88>
   19eb4:	add	r0, r0, #1
   19eb8:	cmp	r7, r0
   19ebc:	bne	19ea4 <__assert_fail@plt+0x88ec>
   19ec0:	add	r0, r7, r7, lsr #31
   19ec4:	cmp	r7, #2
   19ec8:	asr	r0, r0, #1
   19ecc:	blt	19f00 <__assert_fail@plt+0x8948>
   19ed0:	add	r1, r6, #1
   19ed4:	add	r2, sp, #4
   19ed8:	mov	r3, r0
   19edc:	ldrb	r7, [r1, #-1]
   19ee0:	ldrb	r6, [r1]
   19ee4:	add	r1, r1, #2
   19ee8:	subs	r3, r3, #1
   19eec:	add	r7, r7, r7, lsl #2
   19ef0:	add	r7, r6, r7, lsl #1
   19ef4:	sub	r7, r7, #528	; 0x210
   19ef8:	str	r7, [r2], #4
   19efc:	bne	19edc <__assert_fail@plt+0x8924>
   19f00:	ands	r8, r5, #1
   19f04:	beq	19f10 <__assert_fail@plt+0x8958>
   19f08:	add	r1, sp, #4
   19f0c:	b	19f88 <__assert_fail@plt+0x89d0>
   19f10:	subs	r7, r0, #4
   19f14:	beq	19f3c <__assert_fail@plt+0x8984>
   19f18:	cmp	r0, #6
   19f1c:	beq	19f60 <__assert_fail@plt+0x89a8>
   19f20:	ldr	ip, [sp, #4]
   19f24:	cmp	ip, #68	; 0x44
   19f28:	bgt	19f7c <__assert_fail@plt+0x89c4>
   19f2c:	tst	r5, #8
   19f30:	bne	1a140 <__assert_fail@plt+0x8b88>
   19f34:	add	ip, ip, #100	; 0x64
   19f38:	b	19f7c <__assert_fail@plt+0x89c4>
   19f3c:	mov	r0, #0
   19f40:	bl	1130c <time@plt>
   19f44:	str	r0, [fp, #-32]	; 0xffffffe0
   19f48:	sub	r0, fp, #32
   19f4c:	bl	11408 <localtime@plt>
   19f50:	cmp	r0, #0
   19f54:	beq	1a140 <__assert_fail@plt+0x8b88>
   19f58:	ldr	ip, [r0, #20]
   19f5c:	b	19f7c <__assert_fail@plt+0x89c4>
   19f60:	tst	r5, #2
   19f64:	beq	1a140 <__assert_fail@plt+0x8b88>
   19f68:	ldmib	sp, {r0, r1}
   19f6c:	mov	r2, #100	; 0x64
   19f70:	mla	r0, r0, r2, r1
   19f74:	movw	r1, #1900	; 0x76c
   19f78:	sub	ip, r0, r1
   19f7c:	add	r0, sp, #4
   19f80:	add	r1, r0, r7, lsl #2
   19f84:	mov	r0, #4
   19f88:	ldr	r6, [r1]
   19f8c:	ldr	r3, [r1, #12]
   19f90:	ldmib	r1, {r4, lr}
   19f94:	cmp	r8, #0
   19f98:	beq	1a01c <__assert_fail@plt+0x8a64>
   19f9c:	cmp	r0, #4
   19fa0:	beq	19fc8 <__assert_fail@plt+0x8a10>
   19fa4:	cmp	r0, #6
   19fa8:	beq	19ffc <__assert_fail@plt+0x8a44>
   19fac:	ldr	ip, [r1, #16]
   19fb0:	cmp	ip, #68	; 0x44
   19fb4:	bgt	1a01c <__assert_fail@plt+0x8a64>
   19fb8:	tst	r5, #8
   19fbc:	bne	1a140 <__assert_fail@plt+0x8b88>
   19fc0:	add	ip, ip, #100	; 0x64
   19fc4:	b	1a01c <__assert_fail@plt+0x8a64>
   19fc8:	mov	r0, #0
   19fcc:	mov	r7, r3
   19fd0:	mov	r5, lr
   19fd4:	bl	1130c <time@plt>
   19fd8:	str	r0, [fp, #-32]	; 0xffffffe0
   19fdc:	sub	r0, fp, #32
   19fe0:	bl	11408 <localtime@plt>
   19fe4:	cmp	r0, #0
   19fe8:	beq	1a140 <__assert_fail@plt+0x8b88>
   19fec:	ldr	ip, [r0, #20]
   19ff0:	mov	lr, r5
   19ff4:	mov	r3, r7
   19ff8:	b	1a01c <__assert_fail@plt+0x8a64>
   19ffc:	tst	r5, #2
   1a000:	beq	1a140 <__assert_fail@plt+0x8b88>
   1a004:	ldr	r0, [r1, #16]
   1a008:	ldr	r1, [r1, #20]
   1a00c:	mov	r2, #100	; 0x64
   1a010:	mla	r0, r0, r2, r1
   1a014:	movw	r1, #1900	; 0x76c
   1a018:	sub	ip, r0, r1
   1a01c:	mov	r7, #0
   1a020:	cmp	r9, #0
   1a024:	mov	r5, #0
   1a028:	beq	1a058 <__assert_fail@plt+0x8aa0>
   1a02c:	ldrb	r0, [r9, #1]
   1a030:	sub	r1, r0, #48	; 0x30
   1a034:	cmp	r1, #9
   1a038:	bhi	1a140 <__assert_fail@plt+0x8b88>
   1a03c:	ldrb	r1, [r9, #2]
   1a040:	sub	r2, r1, #48	; 0x30
   1a044:	cmp	r2, #9
   1a048:	bhi	1a140 <__assert_fail@plt+0x8b88>
   1a04c:	add	r0, r0, r0, lsl #2
   1a050:	add	r0, r1, r0, lsl #1
   1a054:	sub	r5, r0, #528	; 0x210
   1a058:	mvn	r0, #0
   1a05c:	sub	r6, r6, #1
   1a060:	mov	sl, lr
   1a064:	mov	r9, r3
   1a068:	mov	r8, ip
   1a06c:	str	r0, [sp, #36]	; 0x24
   1a070:	str	r0, [sp, #28]
   1a074:	add	r0, sp, #16
   1a078:	stm	r0, {r4, r6, ip}
   1a07c:	add	r0, sp, #4
   1a080:	str	lr, [sp, #12]
   1a084:	str	r3, [sp, #8]
   1a088:	str	r5, [sp, #4]
   1a08c:	bl	112b8 <mktime@plt>
   1a090:	ldr	r1, [sp, #28]
   1a094:	cmp	r1, #0
   1a098:	bmi	1a144 <__assert_fail@plt+0x8b8c>
   1a09c:	mov	ip, #0
   1a0a0:	ldr	r3, [sp, #20]
   1a0a4:	ldr	r2, [sp, #24]
   1a0a8:	mov	r1, r6
   1a0ac:	ldr	r7, [sp, #12]
   1a0b0:	ldr	lr, [sp, #4]
   1a0b4:	eor	r3, r3, r6
   1a0b8:	ldr	r6, [sp, #16]
   1a0bc:	eor	r2, r2, r8
   1a0c0:	eor	r7, r7, sl
   1a0c4:	orr	r2, r3, r2
   1a0c8:	ldr	r3, [sp, #8]
   1a0cc:	eor	r6, r6, r4
   1a0d0:	orr	r2, r2, r6
   1a0d4:	orr	r2, r2, r7
   1a0d8:	eor	r7, r3, r9
   1a0dc:	eor	r3, lr, r5
   1a0e0:	orr	r2, r2, r7
   1a0e4:	orrs	r2, r2, r3
   1a0e8:	beq	1a150 <__assert_fail@plt+0x8b98>
   1a0ec:	mov	r7, #0
   1a0f0:	cmp	r5, #60	; 0x3c
   1a0f4:	bne	1a144 <__assert_fail@plt+0x8b8c>
   1a0f8:	mvn	r0, #0
   1a0fc:	mov	r5, #59	; 0x3b
   1a100:	mov	r6, r1
   1a104:	str	r0, [sp, #36]	; 0x24
   1a108:	str	r0, [sp, #28]
   1a10c:	add	r0, sp, #4
   1a110:	str	r8, [sp, #24]
   1a114:	str	r1, [sp, #20]
   1a118:	str	r4, [sp, #16]
   1a11c:	str	sl, [sp, #12]
   1a120:	str	r9, [sp, #8]
   1a124:	str	r5, [sp, #4]
   1a128:	bl	112b8 <mktime@plt>
   1a12c:	ldr	r2, [sp, #28]
   1a130:	mov	ip, #1
   1a134:	cmp	r2, #0
   1a138:	bpl	1a0a0 <__assert_fail@plt+0x8ae8>
   1a13c:	b	1a144 <__assert_fail@plt+0x8b8c>
   1a140:	mov	r7, #0
   1a144:	mov	r0, r7
   1a148:	sub	sp, fp, #28
   1a14c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a150:	adds	r0, r0, ip
   1a154:	mov	r7, #0
   1a158:	bvs	1a144 <__assert_fail@plt+0x8b8c>
   1a15c:	ldr	r1, [sp]
   1a160:	mov	r7, #1
   1a164:	str	r0, [r1]
   1a168:	b	1a144 <__assert_fail@plt+0x8b8c>
   1a16c:	push	{r4, sl, fp, lr}
   1a170:	add	fp, sp, #8
   1a174:	sub	sp, sp, #8
   1a178:	movw	r0, #6367	; 0x18df
   1a17c:	movt	r0, #2
   1a180:	bl	113c0 <getenv@plt>
   1a184:	movw	r4, #4201	; 0x1069
   1a188:	cmp	r0, #0
   1a18c:	movt	r4, #3
   1a190:	beq	1a1bc <__assert_fail@plt+0x8c04>
   1a194:	ldrb	r1, [r0]
   1a198:	cmp	r1, #0
   1a19c:	beq	1a1bc <__assert_fail@plt+0x8c04>
   1a1a0:	add	r1, sp, #4
   1a1a4:	mov	r2, #10
   1a1a8:	bl	112ac <strtol@plt>
   1a1ac:	ldr	r1, [sp, #4]
   1a1b0:	ldrb	r1, [r1]
   1a1b4:	cmp	r1, #0
   1a1b8:	moveq	r4, r0
   1a1bc:	mov	r0, r4
   1a1c0:	sub	sp, fp, #8
   1a1c4:	pop	{r4, sl, fp, pc}
   1a1c8:	push	{r4, r5, fp, lr}
   1a1cc:	add	fp, sp, #8
   1a1d0:	cmp	r0, #0
   1a1d4:	beq	1a268 <__assert_fail@plt+0x8cb0>
   1a1d8:	mov	r1, #47	; 0x2f
   1a1dc:	mov	r4, r0
   1a1e0:	bl	11510 <strrchr@plt>
   1a1e4:	cmp	r0, #0
   1a1e8:	mov	r5, r4
   1a1ec:	addne	r5, r0, #1
   1a1f0:	sub	r0, r5, r4
   1a1f4:	cmp	r0, #7
   1a1f8:	blt	1a24c <__assert_fail@plt+0x8c94>
   1a1fc:	movw	r1, #6439	; 0x1927
   1a200:	sub	r0, r5, #7
   1a204:	mov	r2, #7
   1a208:	movt	r1, #2
   1a20c:	bl	1157c <strncmp@plt>
   1a210:	cmp	r0, #0
   1a214:	bne	1a24c <__assert_fail@plt+0x8c94>
   1a218:	movw	r1, #6447	; 0x192f
   1a21c:	mov	r0, r5
   1a220:	mov	r2, #3
   1a224:	movt	r1, #2
   1a228:	bl	1157c <strncmp@plt>
   1a22c:	cmp	r0, #0
   1a230:	beq	1a23c <__assert_fail@plt+0x8c84>
   1a234:	mov	r4, r5
   1a238:	b	1a24c <__assert_fail@plt+0x8c94>
   1a23c:	movw	r0, #8592	; 0x2190
   1a240:	add	r4, r5, #3
   1a244:	movt	r0, #3
   1a248:	str	r4, [r0]
   1a24c:	movw	r0, #8596	; 0x2194
   1a250:	movt	r0, #3
   1a254:	str	r4, [r0]
   1a258:	movw	r0, #8668	; 0x21dc
   1a25c:	movt	r0, #3
   1a260:	str	r4, [r0]
   1a264:	pop	{r4, r5, fp, pc}
   1a268:	movw	r0, #8608	; 0x21a0
   1a26c:	mov	r1, #55	; 0x37
   1a270:	mov	r2, #1
   1a274:	movt	r0, #3
   1a278:	ldr	r3, [r0]
   1a27c:	movw	r0, #6383	; 0x18ef
   1a280:	movt	r0, #2
   1a284:	bl	1136c <fwrite@plt>
   1a288:	bl	11588 <abort@plt>
   1a28c:	push	{r4, r5, r6, sl, fp, lr}
   1a290:	add	fp, sp, #16
   1a294:	mov	r4, r0
   1a298:	movw	r0, #8672	; 0x21e0
   1a29c:	movt	r0, #3
   1a2a0:	cmp	r4, #0
   1a2a4:	moveq	r4, r0
   1a2a8:	bl	1148c <__errno_location@plt>
   1a2ac:	ldr	r6, [r0]
   1a2b0:	mov	r5, r0
   1a2b4:	mov	r0, r4
   1a2b8:	mov	r1, #48	; 0x30
   1a2bc:	bl	1d094 <__assert_fail@plt+0xbadc>
   1a2c0:	str	r6, [r5]
   1a2c4:	pop	{r4, r5, r6, sl, fp, pc}
   1a2c8:	movw	r1, #8672	; 0x21e0
   1a2cc:	cmp	r0, #0
   1a2d0:	movt	r1, #3
   1a2d4:	movne	r1, r0
   1a2d8:	ldr	r0, [r1]
   1a2dc:	bx	lr
   1a2e0:	movw	r2, #8672	; 0x21e0
   1a2e4:	cmp	r0, #0
   1a2e8:	movt	r2, #3
   1a2ec:	movne	r2, r0
   1a2f0:	str	r1, [r2]
   1a2f4:	bx	lr
   1a2f8:	movw	r3, #8672	; 0x21e0
   1a2fc:	cmp	r0, #0
   1a300:	and	r2, r2, #1
   1a304:	movt	r3, #3
   1a308:	movne	r3, r0
   1a30c:	ubfx	r0, r1, #5, #3
   1a310:	and	r1, r1, #31
   1a314:	add	ip, r3, r0, lsl #2
   1a318:	mov	r0, #1
   1a31c:	ldr	r3, [ip, #8]
   1a320:	and	r0, r0, r3, lsr r1
   1a324:	eor	r2, r0, r2
   1a328:	eor	r1, r3, r2, lsl r1
   1a32c:	str	r1, [ip, #8]
   1a330:	bx	lr
   1a334:	movw	r2, #8672	; 0x21e0
   1a338:	cmp	r0, #0
   1a33c:	movt	r2, #3
   1a340:	movne	r2, r0
   1a344:	ldr	r0, [r2, #4]
   1a348:	str	r1, [r2, #4]
   1a34c:	bx	lr
   1a350:	push	{fp, lr}
   1a354:	mov	fp, sp
   1a358:	movw	r3, #8672	; 0x21e0
   1a35c:	cmp	r0, #0
   1a360:	movt	r3, #3
   1a364:	movne	r3, r0
   1a368:	cmp	r1, #0
   1a36c:	mov	r0, #10
   1a370:	cmpne	r2, #0
   1a374:	str	r0, [r3]
   1a378:	bne	1a380 <__assert_fail@plt+0x8dc8>
   1a37c:	bl	11588 <abort@plt>
   1a380:	str	r1, [r3, #40]	; 0x28
   1a384:	str	r2, [r3, #44]	; 0x2c
   1a388:	pop	{fp, pc}
   1a38c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a390:	add	fp, sp, #28
   1a394:	sub	sp, sp, #20
   1a398:	mov	r7, r0
   1a39c:	ldr	r0, [fp, #8]
   1a3a0:	movw	r5, #8672	; 0x21e0
   1a3a4:	mov	r8, r3
   1a3a8:	mov	r9, r2
   1a3ac:	mov	sl, r1
   1a3b0:	movt	r5, #3
   1a3b4:	cmp	r0, #0
   1a3b8:	movne	r5, r0
   1a3bc:	bl	1148c <__errno_location@plt>
   1a3c0:	ldr	r2, [r5, #40]	; 0x28
   1a3c4:	ldr	r3, [r5, #44]	; 0x2c
   1a3c8:	mov	r4, r0
   1a3cc:	ldm	r5, {r0, r1}
   1a3d0:	add	r5, r5, #8
   1a3d4:	ldr	r6, [r4]
   1a3d8:	stm	sp, {r0, r1, r5}
   1a3dc:	mov	r0, r7
   1a3e0:	mov	r1, sl
   1a3e4:	str	r2, [sp, #12]
   1a3e8:	str	r3, [sp, #16]
   1a3ec:	mov	r2, r9
   1a3f0:	mov	r3, r8
   1a3f4:	bl	1a404 <__assert_fail@plt+0x8e4c>
   1a3f8:	str	r6, [r4]
   1a3fc:	sub	sp, fp, #28
   1a400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a404:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a408:	add	fp, sp, #28
   1a40c:	sub	sp, sp, #156	; 0x9c
   1a410:	mov	r5, r0
   1a414:	add	r0, r2, #1
   1a418:	mov	r6, r1
   1a41c:	mov	sl, r3
   1a420:	str	r2, [fp, #-80]	; 0xffffffb0
   1a424:	str	r0, [sp, #72]	; 0x48
   1a428:	ldr	r0, [fp, #12]
   1a42c:	and	r1, r0, #1
   1a430:	str	r1, [sp, #36]	; 0x24
   1a434:	and	r1, r0, #4
   1a438:	str	r1, [sp, #32]
   1a43c:	ubfx	r9, r0, #1, #1
   1a440:	bl	11384 <__ctype_get_mb_cur_max@plt>
   1a444:	str	r0, [sp, #40]	; 0x28
   1a448:	ldr	r0, [fp, #24]
   1a44c:	ldr	r7, [fp, #8]
   1a450:	mov	r1, #0
   1a454:	str	r5, [fp, #-84]	; 0xffffffac
   1a458:	str	r1, [fp, #-56]	; 0xffffffc8
   1a45c:	mov	r1, #0
   1a460:	str	r1, [sp, #60]	; 0x3c
   1a464:	mov	r1, #1
   1a468:	str	r1, [fp, #-48]	; 0xffffffd0
   1a46c:	str	r0, [sp, #80]	; 0x50
   1a470:	ldr	r0, [fp, #20]
   1a474:	str	r0, [sp, #76]	; 0x4c
   1a478:	mov	r0, #0
   1a47c:	str	r0, [sp, #56]	; 0x38
   1a480:	mov	r0, #0
   1a484:	str	r0, [fp, #-88]	; 0xffffffa8
   1a488:	mov	r0, #0
   1a48c:	str	r0, [fp, #-72]	; 0xffffffb8
   1a490:	mov	r0, #0
   1a494:	cmp	r7, #10
   1a498:	bhi	1b42c <__assert_fail@plt+0x9e74>
   1a49c:	add	r1, pc, #24
   1a4a0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1a4a4:	mov	r4, r6
   1a4a8:	mov	r8, #0
   1a4ac:	mov	r2, #1
   1a4b0:	mov	r3, #0
   1a4b4:	mov	lr, sl
   1a4b8:	ldr	pc, [r1, r7, lsl #2]
   1a4bc:	andeq	sl, r1, r0, lsl #11
   1a4c0:	ldrdeq	sl, [r1], -r4
   1a4c4:	muleq	r1, r4, r5
   1a4c8:	andeq	sl, r1, r8, ror r5
   1a4cc:	andeq	sl, r1, r8, asr #11
   1a4d0:	strdeq	sl, [r1], -ip
   1a4d4:	andeq	sl, r1, r4, lsr #11
   1a4d8:	andeq	sl, r1, r0, lsl #13
   1a4dc:	andeq	sl, r1, r8, ror #9
   1a4e0:	andeq	sl, r1, r8, ror #9
   1a4e4:	andeq	sl, r1, r0, lsl r5
   1a4e8:	movw	r0, #6527	; 0x197f
   1a4ec:	mov	r1, r7
   1a4f0:	movt	r0, #2
   1a4f4:	bl	1be34 <__assert_fail@plt+0xa87c>
   1a4f8:	str	r0, [sp, #76]	; 0x4c
   1a4fc:	movw	r0, #64581	; 0xfc45
   1a500:	mov	r1, r7
   1a504:	movt	r0, #1
   1a508:	bl	1be34 <__assert_fail@plt+0xa87c>
   1a50c:	str	r0, [sp, #80]	; 0x50
   1a510:	mov	r8, #0
   1a514:	tst	r9, #1
   1a518:	bne	1a550 <__assert_fail@plt+0x8f98>
   1a51c:	ldr	r0, [sp, #76]	; 0x4c
   1a520:	ldrb	r0, [r0]
   1a524:	cmp	r0, #0
   1a528:	beq	1a550 <__assert_fail@plt+0x8f98>
   1a52c:	ldr	r1, [sp, #76]	; 0x4c
   1a530:	mov	r8, #0
   1a534:	add	r1, r1, #1
   1a538:	cmp	r8, r4
   1a53c:	strbcc	r0, [r5, r8]
   1a540:	ldrb	r0, [r1, r8]
   1a544:	add	r8, r8, #1
   1a548:	cmp	r0, #0
   1a54c:	bne	1a538 <__assert_fail@plt+0x8f80>
   1a550:	ldr	r6, [sp, #80]	; 0x50
   1a554:	mov	r0, r6
   1a558:	bl	11468 <strlen@plt>
   1a55c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1a560:	str	r0, [fp, #-72]	; 0xffffffb8
   1a564:	str	r6, [fp, #-88]	; 0xffffffa8
   1a568:	mov	r2, #1
   1a56c:	mov	r3, r9
   1a570:	mov	lr, sl
   1a574:	b	1a680 <__assert_fail@plt+0x90c8>
   1a578:	mov	r0, #1
   1a57c:	b	1a5d4 <__assert_fail@plt+0x901c>
   1a580:	mov	r7, #0
   1a584:	mov	r8, #0
   1a588:	mov	r2, r0
   1a58c:	mov	r3, #0
   1a590:	b	1a680 <__assert_fail@plt+0x90c8>
   1a594:	tst	r9, #1
   1a598:	bne	1a5d4 <__assert_fail@plt+0x901c>
   1a59c:	mov	r2, r0
   1a5a0:	b	1a62c <__assert_fail@plt+0x9074>
   1a5a4:	mov	r0, #1
   1a5a8:	mov	r8, #0
   1a5ac:	mov	r7, #5
   1a5b0:	mov	r2, #1
   1a5b4:	str	r0, [fp, #-72]	; 0xffffffb8
   1a5b8:	movw	r0, #3970	; 0xf82
   1a5bc:	movt	r0, #2
   1a5c0:	str	r0, [fp, #-88]	; 0xffffffa8
   1a5c4:	b	1a5f4 <__assert_fail@plt+0x903c>
   1a5c8:	mov	r2, #1
   1a5cc:	tst	r9, #1
   1a5d0:	beq	1a62c <__assert_fail@plt+0x9074>
   1a5d4:	mov	r1, #1
   1a5d8:	mov	r8, #0
   1a5dc:	mov	r7, #2
   1a5e0:	mov	r2, r0
   1a5e4:	str	r1, [fp, #-72]	; 0xffffffb8
   1a5e8:	movw	r1, #64581	; 0xfc45
   1a5ec:	movt	r1, #1
   1a5f0:	str	r1, [fp, #-88]	; 0xffffffa8
   1a5f4:	mov	r3, #1
   1a5f8:	b	1a680 <__assert_fail@plt+0x90c8>
   1a5fc:	tst	r9, #1
   1a600:	beq	1a650 <__assert_fail@plt+0x9098>
   1a604:	mov	r0, #1
   1a608:	mov	r8, #0
   1a60c:	mov	r2, #1
   1a610:	mov	r3, #1
   1a614:	mov	r7, #5
   1a618:	str	r0, [fp, #-72]	; 0xffffffb8
   1a61c:	movw	r0, #3970	; 0xf82
   1a620:	movt	r0, #2
   1a624:	str	r0, [fp, #-88]	; 0xffffffa8
   1a628:	b	1a680 <__assert_fail@plt+0x90c8>
   1a62c:	cmp	r4, #0
   1a630:	mov	r8, #1
   1a634:	mov	r3, #0
   1a638:	mov	r7, #2
   1a63c:	movne	r0, #39	; 0x27
   1a640:	strbne	r0, [r5]
   1a644:	movw	r0, #64581	; 0xfc45
   1a648:	movt	r0, #1
   1a64c:	b	1a674 <__assert_fail@plt+0x90bc>
   1a650:	cmp	r4, #0
   1a654:	mov	r8, #1
   1a658:	mov	r2, #1
   1a65c:	mov	r7, #5
   1a660:	mov	r3, #0
   1a664:	movne	r0, #34	; 0x22
   1a668:	strbne	r0, [r5]
   1a66c:	movw	r0, #3970	; 0xf82
   1a670:	movt	r0, #2
   1a674:	str	r0, [fp, #-88]	; 0xffffffa8
   1a678:	mov	r0, #1
   1a67c:	str	r0, [fp, #-72]	; 0xffffffb8
   1a680:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1a684:	eor	r6, r3, #1
   1a688:	str	r7, [fp, #-68]	; 0xffffffbc
   1a68c:	str	r3, [fp, #-76]	; 0xffffffb4
   1a690:	str	r2, [sp, #84]	; 0x54
   1a694:	str	r6, [sp, #92]	; 0x5c
   1a698:	cmp	r0, #0
   1a69c:	movwne	r0, #1
   1a6a0:	and	r1, r0, r3
   1a6a4:	and	r1, r2, r1
   1a6a8:	str	r1, [sp, #48]	; 0x30
   1a6ac:	sub	r1, r7, #2
   1a6b0:	clz	r1, r1
   1a6b4:	lsr	r1, r1, #5
   1a6b8:	and	r1, r1, r3
   1a6bc:	str	r1, [sp, #64]	; 0x40
   1a6c0:	subs	r1, r7, #2
   1a6c4:	mov	r7, #0
   1a6c8:	movwne	r1, #1
   1a6cc:	orr	r6, r1, r6
   1a6d0:	and	r1, r1, r2
   1a6d4:	and	r0, r0, r1
   1a6d8:	str	r6, [sp, #68]	; 0x44
   1a6dc:	str	r0, [fp, #-60]	; 0xffffffc4
   1a6e0:	orr	r0, r1, r3
   1a6e4:	ldr	r1, [fp, #16]
   1a6e8:	eor	r0, r0, #1
   1a6ec:	clz	r1, r1
   1a6f0:	lsr	r1, r1, #5
   1a6f4:	orr	r0, r1, r0
   1a6f8:	str	r0, [fp, #-64]	; 0xffffffc0
   1a6fc:	eor	r0, r2, #1
   1a700:	str	r0, [sp, #52]	; 0x34
   1a704:	cmn	lr, #1
   1a708:	beq	1a718 <__assert_fail@plt+0x9160>
   1a70c:	cmp	r7, lr
   1a710:	bne	1a724 <__assert_fail@plt+0x916c>
   1a714:	b	1b26c <__assert_fail@plt+0x9cb4>
   1a718:	ldrb	r0, [ip, r7]
   1a71c:	cmp	r0, #0
   1a720:	beq	1b274 <__assert_fail@plt+0x9cbc>
   1a724:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1a728:	mov	sl, #0
   1a72c:	cmp	r0, #0
   1a730:	beq	1a768 <__assert_fail@plt+0x91b0>
   1a734:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1a738:	add	r5, r7, r0
   1a73c:	cmp	r0, #2
   1a740:	bcc	1a75c <__assert_fail@plt+0x91a4>
   1a744:	cmn	lr, #1
   1a748:	bne	1a75c <__assert_fail@plt+0x91a4>
   1a74c:	mov	r0, ip
   1a750:	bl	11468 <strlen@plt>
   1a754:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1a758:	mov	lr, r0
   1a75c:	cmp	r5, lr
   1a760:	bls	1a770 <__assert_fail@plt+0x91b8>
   1a764:	ldr	r5, [fp, #-84]	; 0xffffffac
   1a768:	mov	r0, #0
   1a76c:	b	1a7bc <__assert_fail@plt+0x9204>
   1a770:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1a774:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1a778:	add	r0, ip, r7
   1a77c:	mov	r6, r4
   1a780:	mov	r4, lr
   1a784:	bl	1145c <bcmp@plt>
   1a788:	ldr	r2, [sp, #92]	; 0x5c
   1a78c:	cmp	r0, #0
   1a790:	ldr	r5, [fp, #-84]	; 0xffffffac
   1a794:	mov	r1, r0
   1a798:	movwne	r1, #1
   1a79c:	orr	r1, r1, r2
   1a7a0:	tst	r1, #1
   1a7a4:	beq	1b2fc <__assert_fail@plt+0x9d44>
   1a7a8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1a7ac:	clz	r0, r0
   1a7b0:	mov	lr, r4
   1a7b4:	mov	r4, r6
   1a7b8:	lsr	r0, r0, #5
   1a7bc:	str	r0, [fp, #-52]	; 0xffffffcc
   1a7c0:	ldrb	r6, [ip, r7]
   1a7c4:	cmp	r6, #126	; 0x7e
   1a7c8:	bhi	1acf8 <__assert_fail@plt+0x9740>
   1a7cc:	add	r3, pc, #16
   1a7d0:	mov	r9, #1
   1a7d4:	mov	r2, #110	; 0x6e
   1a7d8:	mov	r0, #97	; 0x61
   1a7dc:	mov	r1, #0
   1a7e0:	ldr	pc, [r3, r6, lsl #2]
   1a7e4:	andeq	sl, r1, r8, asr fp
   1a7e8:	strdeq	sl, [r1], -r8
   1a7ec:	strdeq	sl, [r1], -r8
   1a7f0:	strdeq	sl, [r1], -r8
   1a7f4:	strdeq	sl, [r1], -r8
   1a7f8:	strdeq	sl, [r1], -r8
   1a7fc:	strdeq	sl, [r1], -r8
   1a800:	ldrdeq	sl, [r1], -r4
   1a804:	andeq	sl, r1, r8, lsr fp
   1a808:	andeq	sl, r1, r0, lsr fp
   1a80c:	andeq	sl, r1, r4, asr #22
   1a810:	andeq	sl, r1, r0, ror #24
   1a814:	andeq	sl, r1, r8, lsr #22
   1a818:	andeq	sl, r1, r0, asr #22
   1a81c:	strdeq	sl, [r1], -r8
   1a820:	strdeq	sl, [r1], -r8
   1a824:	strdeq	sl, [r1], -r8
   1a828:	strdeq	sl, [r1], -r8
   1a82c:	strdeq	sl, [r1], -r8
   1a830:	strdeq	sl, [r1], -r8
   1a834:	strdeq	sl, [r1], -r8
   1a838:	strdeq	sl, [r1], -r8
   1a83c:	strdeq	sl, [r1], -r8
   1a840:	strdeq	sl, [r1], -r8
   1a844:	strdeq	sl, [r1], -r8
   1a848:	strdeq	sl, [r1], -r8
   1a84c:	strdeq	sl, [r1], -r8
   1a850:	strdeq	sl, [r1], -r8
   1a854:	strdeq	sl, [r1], -r8
   1a858:	strdeq	sl, [r1], -r8
   1a85c:	strdeq	sl, [r1], -r8
   1a860:	strdeq	sl, [r1], -r8
   1a864:	ldrdeq	sl, [r1], -ip
   1a868:	andeq	sl, r1, r0, ror #21
   1a86c:	andeq	sl, r1, r0, ror #21
   1a870:	andeq	sl, r1, r8, asr #21
   1a874:	andeq	sl, r1, r0, ror #21
   1a878:	andeq	sl, r1, r0, ror #19
   1a87c:	andeq	sl, r1, r0, ror #21
   1a880:	andeq	sl, r1, r8, ror #24
   1a884:	andeq	sl, r1, r0, ror #21
   1a888:	andeq	sl, r1, r0, ror #21
   1a88c:	andeq	sl, r1, r0, ror #21
   1a890:	andeq	sl, r1, r0, ror #19
   1a894:	andeq	sl, r1, r0, ror #19
   1a898:	andeq	sl, r1, r0, ror #19
   1a89c:	andeq	sl, r1, r0, ror #19
   1a8a0:	andeq	sl, r1, r0, ror #19
   1a8a4:	andeq	sl, r1, r0, ror #19
   1a8a8:	andeq	sl, r1, r0, ror #19
   1a8ac:	andeq	sl, r1, r0, ror #19
   1a8b0:	andeq	sl, r1, r0, ror #19
   1a8b4:	andeq	sl, r1, r0, ror #19
   1a8b8:	andeq	sl, r1, r0, ror #19
   1a8bc:	andeq	sl, r1, r0, ror #19
   1a8c0:	andeq	sl, r1, r0, ror #19
   1a8c4:	andeq	sl, r1, r0, ror #19
   1a8c8:	andeq	sl, r1, r0, ror #19
   1a8cc:	andeq	sl, r1, r0, ror #19
   1a8d0:	andeq	sl, r1, r0, ror #21
   1a8d4:	andeq	sl, r1, r0, ror #21
   1a8d8:	andeq	sl, r1, r0, ror #21
   1a8dc:	andeq	sl, r1, r0, ror #21
   1a8e0:	andeq	sl, r1, r0, lsr ip
   1a8e4:	strdeq	sl, [r1], -r8
   1a8e8:	andeq	sl, r1, r0, ror #19
   1a8ec:	andeq	sl, r1, r0, ror #19
   1a8f0:	andeq	sl, r1, r0, ror #19
   1a8f4:	andeq	sl, r1, r0, ror #19
   1a8f8:	andeq	sl, r1, r0, ror #19
   1a8fc:	andeq	sl, r1, r0, ror #19
   1a900:	andeq	sl, r1, r0, ror #19
   1a904:	andeq	sl, r1, r0, ror #19
   1a908:	andeq	sl, r1, r0, ror #19
   1a90c:	andeq	sl, r1, r0, ror #19
   1a910:	andeq	sl, r1, r0, ror #19
   1a914:	andeq	sl, r1, r0, ror #19
   1a918:	andeq	sl, r1, r0, ror #19
   1a91c:	andeq	sl, r1, r0, ror #19
   1a920:	andeq	sl, r1, r0, ror #19
   1a924:	andeq	sl, r1, r0, ror #19
   1a928:	andeq	sl, r1, r0, ror #19
   1a92c:	andeq	sl, r1, r0, ror #19
   1a930:	andeq	sl, r1, r0, ror #19
   1a934:	andeq	sl, r1, r0, ror #19
   1a938:	andeq	sl, r1, r0, ror #19
   1a93c:	andeq	sl, r1, r0, ror #19
   1a940:	andeq	sl, r1, r0, ror #19
   1a944:	andeq	sl, r1, r0, ror #19
   1a948:	andeq	sl, r1, r0, ror #19
   1a94c:	andeq	sl, r1, r0, ror #19
   1a950:	andeq	sl, r1, r0, ror #21
   1a954:	andeq	sl, r1, r8, lsl #22
   1a958:	andeq	sl, r1, r0, ror #19
   1a95c:	andeq	sl, r1, r0, ror #21
   1a960:	andeq	sl, r1, r0, ror #19
   1a964:	andeq	sl, r1, r0, ror #21
   1a968:	andeq	sl, r1, r0, ror #19
   1a96c:	andeq	sl, r1, r0, ror #19
   1a970:	andeq	sl, r1, r0, ror #19
   1a974:	andeq	sl, r1, r0, ror #19
   1a978:	andeq	sl, r1, r0, ror #19
   1a97c:	andeq	sl, r1, r0, ror #19
   1a980:	andeq	sl, r1, r0, ror #19
   1a984:	andeq	sl, r1, r0, ror #19
   1a988:	andeq	sl, r1, r0, ror #19
   1a98c:	andeq	sl, r1, r0, ror #19
   1a990:	andeq	sl, r1, r0, ror #19
   1a994:	andeq	sl, r1, r0, ror #19
   1a998:	andeq	sl, r1, r0, ror #19
   1a99c:	andeq	sl, r1, r0, ror #19
   1a9a0:	andeq	sl, r1, r0, ror #19
   1a9a4:	andeq	sl, r1, r0, ror #19
   1a9a8:	andeq	sl, r1, r0, ror #19
   1a9ac:	andeq	sl, r1, r0, ror #19
   1a9b0:	andeq	sl, r1, r0, ror #19
   1a9b4:	andeq	sl, r1, r0, ror #19
   1a9b8:	andeq	sl, r1, r0, ror #19
   1a9bc:	andeq	sl, r1, r0, ror #19
   1a9c0:	andeq	sl, r1, r0, ror #19
   1a9c4:	andeq	sl, r1, r0, ror #19
   1a9c8:	andeq	sl, r1, r0, ror #19
   1a9cc:	andeq	sl, r1, r0, ror #19
   1a9d0:	muleq	r1, ip, sl
   1a9d4:	andeq	sl, r1, r0, ror #21
   1a9d8:	muleq	r1, ip, sl
   1a9dc:	andeq	sl, r1, r8, asr #21
   1a9e0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1a9e4:	tst	r0, #1
   1a9e8:	bne	1aa14 <__assert_fail@plt+0x945c>
   1a9ec:	ldr	r1, [fp, #16]
   1a9f0:	ubfx	r0, r6, #5, #3
   1a9f4:	mov	r2, #1
   1a9f8:	ldr	r0, [r1, r0, lsl #2]
   1a9fc:	and	r1, r6, #31
   1aa00:	tst	r0, r2, lsl r1
   1aa04:	beq	1aa14 <__assert_fail@plt+0x945c>
   1aa08:	mov	r0, r6
   1aa0c:	mov	r1, r9
   1aa10:	b	1aa28 <__assert_fail@plt+0x9470>
   1aa14:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1aa18:	mov	r1, r9
   1aa1c:	cmp	r0, #0
   1aa20:	mov	r0, r6
   1aa24:	beq	1ad68 <__assert_fail@plt+0x97b0>
   1aa28:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1aa2c:	tst	r2, #1
   1aa30:	bne	1b338 <__assert_fail@plt+0x9d80>
   1aa34:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1aa38:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1aa3c:	subs	r2, r2, #2
   1aa40:	movwne	r2, #1
   1aa44:	orr	r2, r2, r3
   1aa48:	tst	r2, #1
   1aa4c:	bne	1aa88 <__assert_fail@plt+0x94d0>
   1aa50:	cmp	r8, r4
   1aa54:	movcc	r2, #39	; 0x27
   1aa58:	strbcc	r2, [r5, r8]
   1aa5c:	add	r2, r8, #1
   1aa60:	cmp	r2, r4
   1aa64:	movcc	r3, #36	; 0x24
   1aa68:	strbcc	r3, [r5, r2]
   1aa6c:	add	r2, r8, #2
   1aa70:	add	r8, r8, #3
   1aa74:	cmp	r2, r4
   1aa78:	movcc	r3, #39	; 0x27
   1aa7c:	strbcc	r3, [r5, r2]
   1aa80:	mov	r2, #1
   1aa84:	str	r2, [fp, #-56]	; 0xffffffc8
   1aa88:	cmp	r8, r4
   1aa8c:	movcc	r2, #92	; 0x5c
   1aa90:	strbcc	r2, [r5, r8]
   1aa94:	add	r8, r8, #1
   1aa98:	b	1adac <__assert_fail@plt+0x97f4>
   1aa9c:	cmp	lr, #1
   1aaa0:	beq	1aac8 <__assert_fail@plt+0x9510>
   1aaa4:	mov	r9, #0
   1aaa8:	cmn	lr, #1
   1aaac:	bne	1aad4 <__assert_fail@plt+0x951c>
   1aab0:	ldrb	r0, [ip, #1]
   1aab4:	cmp	r0, #0
   1aab8:	beq	1aac8 <__assert_fail@plt+0x9510>
   1aabc:	mvn	lr, #0
   1aac0:	mov	sl, #0
   1aac4:	b	1a9e0 <__assert_fail@plt+0x9428>
   1aac8:	mov	r9, #0
   1aacc:	cmp	r7, #0
   1aad0:	beq	1aadc <__assert_fail@plt+0x9524>
   1aad4:	mov	sl, #0
   1aad8:	b	1a9e0 <__assert_fail@plt+0x9428>
   1aadc:	mov	r1, #1
   1aae0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1aae4:	cmp	r0, #2
   1aae8:	bne	1ab00 <__assert_fail@plt+0x9548>
   1aaec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1aaf0:	mov	r9, r1
   1aaf4:	tst	r0, #1
   1aaf8:	beq	1a9e0 <__assert_fail@plt+0x9428>
   1aafc:	b	1b338 <__assert_fail@plt+0x9d80>
   1ab00:	mov	r9, r1
   1ab04:	b	1a9e0 <__assert_fail@plt+0x9428>
   1ab08:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1ab0c:	cmp	r0, #2
   1ab10:	bne	1ad4c <__assert_fail@plt+0x9794>
   1ab14:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1ab18:	tst	r0, #1
   1ab1c:	bne	1b338 <__assert_fail@plt+0x9d80>
   1ab20:	mov	sl, #0
   1ab24:	b	1ad60 <__assert_fail@plt+0x97a8>
   1ab28:	mov	r0, #102	; 0x66
   1ab2c:	b	1add4 <__assert_fail@plt+0x981c>
   1ab30:	mov	r2, #116	; 0x74
   1ab34:	b	1ab44 <__assert_fail@plt+0x958c>
   1ab38:	mov	r0, #98	; 0x62
   1ab3c:	b	1add4 <__assert_fail@plt+0x981c>
   1ab40:	mov	r2, #114	; 0x72
   1ab44:	ldr	r0, [sp, #68]	; 0x44
   1ab48:	tst	r0, #1
   1ab4c:	mov	r0, r2
   1ab50:	bne	1add4 <__assert_fail@plt+0x981c>
   1ab54:	b	1b338 <__assert_fail@plt+0x9d80>
   1ab58:	ldr	r0, [sp, #84]	; 0x54
   1ab5c:	tst	r0, #1
   1ab60:	beq	1adf0 <__assert_fail@plt+0x9838>
   1ab64:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1ab68:	tst	r0, #1
   1ab6c:	bne	1b424 <__assert_fail@plt+0x9e6c>
   1ab70:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1ab74:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1ab78:	subs	r0, r0, #2
   1ab7c:	movwne	r0, #1
   1ab80:	orr	r0, r0, r1
   1ab84:	tst	r0, #1
   1ab88:	bne	1abc4 <__assert_fail@plt+0x960c>
   1ab8c:	cmp	r8, r4
   1ab90:	movcc	r0, #39	; 0x27
   1ab94:	strbcc	r0, [r5, r8]
   1ab98:	add	r0, r8, #1
   1ab9c:	cmp	r0, r4
   1aba0:	movcc	r1, #36	; 0x24
   1aba4:	strbcc	r1, [r5, r0]
   1aba8:	add	r0, r8, #2
   1abac:	add	r8, r8, #3
   1abb0:	cmp	r0, r4
   1abb4:	movcc	r1, #39	; 0x27
   1abb8:	strbcc	r1, [r5, r0]
   1abbc:	mov	r0, #1
   1abc0:	str	r0, [fp, #-56]	; 0xffffffc8
   1abc4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1abc8:	cmp	r8, r4
   1abcc:	mov	r9, #0
   1abd0:	mov	sl, #1
   1abd4:	mov	r6, #48	; 0x30
   1abd8:	movcc	r0, #92	; 0x5c
   1abdc:	strbcc	r0, [r5, r8]
   1abe0:	add	r0, r8, #1
   1abe4:	cmp	r1, #2
   1abe8:	beq	1afb8 <__assert_fail@plt+0x9a00>
   1abec:	add	r1, r7, #1
   1abf0:	cmp	r1, lr
   1abf4:	bcs	1afb8 <__assert_fail@plt+0x9a00>
   1abf8:	ldrb	r1, [ip, r1]
   1abfc:	sub	r1, r1, #48	; 0x30
   1ac00:	uxtb	r1, r1
   1ac04:	cmp	r1, #9
   1ac08:	bhi	1afb8 <__assert_fail@plt+0x9a00>
   1ac0c:	cmp	r0, r4
   1ac10:	movcc	r1, #48	; 0x30
   1ac14:	strbcc	r1, [r5, r0]
   1ac18:	add	r0, r8, #2
   1ac1c:	add	r8, r8, #3
   1ac20:	cmp	r0, r4
   1ac24:	movcc	r1, #48	; 0x30
   1ac28:	strbcc	r1, [r5, r0]
   1ac2c:	b	1a9e0 <__assert_fail@plt+0x9428>
   1ac30:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1ac34:	mov	sl, #0
   1ac38:	mov	r6, #63	; 0x3f
   1ac3c:	cmp	r0, #5
   1ac40:	beq	1afc0 <__assert_fail@plt+0x9a08>
   1ac44:	cmp	r0, #2
   1ac48:	bne	1b068 <__assert_fail@plt+0x9ab0>
   1ac4c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1ac50:	mov	r9, #0
   1ac54:	tst	r0, #1
   1ac58:	beq	1a9e0 <__assert_fail@plt+0x9428>
   1ac5c:	b	1b338 <__assert_fail@plt+0x9d80>
   1ac60:	mov	r0, #118	; 0x76
   1ac64:	b	1add4 <__assert_fail@plt+0x981c>
   1ac68:	mov	r0, #1
   1ac6c:	mov	r6, #39	; 0x27
   1ac70:	str	r0, [sp, #60]	; 0x3c
   1ac74:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1ac78:	cmp	r0, #2
   1ac7c:	bne	1ae0c <__assert_fail@plt+0x9854>
   1ac80:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1ac84:	tst	r0, #1
   1ac88:	bne	1b338 <__assert_fail@plt+0x9d80>
   1ac8c:	ldr	r2, [sp, #56]	; 0x38
   1ac90:	clz	r1, r4
   1ac94:	mov	sl, #0
   1ac98:	mov	r9, #1
   1ac9c:	lsr	r1, r1, #5
   1aca0:	cmp	r2, #0
   1aca4:	mov	r0, r2
   1aca8:	movwne	r0, #1
   1acac:	orrs	r0, r0, r1
   1acb0:	moveq	r2, r4
   1acb4:	moveq	r4, r0
   1acb8:	cmp	r8, r4
   1acbc:	str	r2, [sp, #56]	; 0x38
   1acc0:	movcc	r0, #39	; 0x27
   1acc4:	strbcc	r0, [r5, r8]
   1acc8:	add	r0, r8, #1
   1accc:	cmp	r0, r4
   1acd0:	movcc	r1, #92	; 0x5c
   1acd4:	strbcc	r1, [r5, r0]
   1acd8:	add	r0, r8, #2
   1acdc:	add	r8, r8, #3
   1ace0:	cmp	r0, r4
   1ace4:	movcc	r1, #39	; 0x27
   1ace8:	strbcc	r1, [r5, r0]
   1acec:	mov	r0, #0
   1acf0:	str	r0, [fp, #-56]	; 0xffffffc8
   1acf4:	b	1a9e0 <__assert_fail@plt+0x9428>
   1acf8:	ldr	r0, [sp, #40]	; 0x28
   1acfc:	str	r4, [sp, #88]	; 0x58
   1ad00:	cmp	r0, #1
   1ad04:	bne	1ae14 <__assert_fail@plt+0x985c>
   1ad08:	str	lr, [sp, #28]
   1ad0c:	bl	11444 <__ctype_b_loc@plt>
   1ad10:	ldr	r0, [r0]
   1ad14:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1ad18:	mov	r2, #1
   1ad1c:	add	r0, r0, r6, lsl #1
   1ad20:	ldrb	r0, [r0, #1]
   1ad24:	ubfx	r9, r0, #6, #1
   1ad28:	ldr	r0, [sp, #52]	; 0x34
   1ad2c:	cmp	r2, #1
   1ad30:	orr	r0, r9, r0
   1ad34:	bhi	1b070 <__assert_fail@plt+0x9ab8>
   1ad38:	tst	r0, #1
   1ad3c:	beq	1b070 <__assert_fail@plt+0x9ab8>
   1ad40:	ldr	lr, [sp, #28]
   1ad44:	ldr	r4, [sp, #88]	; 0x58
   1ad48:	b	1a9e0 <__assert_fail@plt+0x9428>
   1ad4c:	ldr	r1, [sp, #48]	; 0x30
   1ad50:	mov	sl, #0
   1ad54:	mov	r0, #92	; 0x5c
   1ad58:	cmp	r1, #0
   1ad5c:	beq	1add4 <__assert_fail@plt+0x981c>
   1ad60:	mov	r6, #92	; 0x5c
   1ad64:	mov	r9, #0
   1ad68:	cmp	sl, #0
   1ad6c:	bne	1ada4 <__assert_fail@plt+0x97ec>
   1ad70:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1ad74:	tst	r0, #1
   1ad78:	beq	1ada4 <__assert_fail@plt+0x97ec>
   1ad7c:	cmp	r8, r4
   1ad80:	movcc	r0, #39	; 0x27
   1ad84:	strbcc	r0, [r5, r8]
   1ad88:	add	r0, r8, #1
   1ad8c:	add	r8, r8, #2
   1ad90:	cmp	r0, r4
   1ad94:	movcc	r1, #39	; 0x27
   1ad98:	strbcc	r1, [r5, r0]
   1ad9c:	mov	r0, #0
   1ada0:	str	r0, [fp, #-56]	; 0xffffffc8
   1ada4:	mov	r1, r9
   1ada8:	mov	r0, r6
   1adac:	cmp	r8, r4
   1adb0:	strbcc	r0, [r5, r8]
   1adb4:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1adb8:	add	r8, r8, #1
   1adbc:	and	r0, r0, r1
   1adc0:	str	r0, [fp, #-48]	; 0xffffffd0
   1adc4:	add	r7, r7, #1
   1adc8:	cmn	lr, #1
   1adcc:	bne	1a70c <__assert_fail@plt+0x9154>
   1add0:	b	1a718 <__assert_fail@plt+0x9160>
   1add4:	ldr	r1, [sp, #84]	; 0x54
   1add8:	mov	sl, #0
   1addc:	mov	r9, #0
   1ade0:	tst	r1, #1
   1ade4:	mov	r1, #0
   1ade8:	beq	1a9e0 <__assert_fail@plt+0x9428>
   1adec:	b	1aa28 <__assert_fail@plt+0x9470>
   1adf0:	ldr	r0, [sp, #36]	; 0x24
   1adf4:	mov	r6, #0
   1adf8:	mov	sl, #0
   1adfc:	mov	r9, #0
   1ae00:	cmp	r0, #0
   1ae04:	beq	1a9e0 <__assert_fail@plt+0x9428>
   1ae08:	b	1adc4 <__assert_fail@plt+0x980c>
   1ae0c:	mov	r9, #1
   1ae10:	b	1a9e0 <__assert_fail@plt+0x9428>
   1ae14:	mov	r0, #0
   1ae18:	cmn	lr, #1
   1ae1c:	sub	r4, fp, #40	; 0x28
   1ae20:	str	r0, [fp, #-36]	; 0xffffffdc
   1ae24:	str	r0, [fp, #-40]	; 0xffffffd8
   1ae28:	bne	1ae3c <__assert_fail@plt+0x9884>
   1ae2c:	mov	r0, ip
   1ae30:	bl	11468 <strlen@plt>
   1ae34:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1ae38:	mov	lr, r0
   1ae3c:	ldr	r0, [sp, #72]	; 0x48
   1ae40:	mov	r9, #1
   1ae44:	mov	r2, #0
   1ae48:	str	lr, [sp, #28]
   1ae4c:	add	r0, r0, r7
   1ae50:	str	r0, [sp, #20]
   1ae54:	b	1ae98 <__assert_fail@plt+0x98e0>
   1ae58:	ldr	r5, [sp, #44]	; 0x2c
   1ae5c:	add	r5, r0, r5
   1ae60:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1ae64:	bl	11354 <iswprint@plt>
   1ae68:	cmp	r0, #0
   1ae6c:	sub	r4, fp, #40	; 0x28
   1ae70:	movwne	r0, #1
   1ae74:	and	r9, r9, r0
   1ae78:	mov	r0, r4
   1ae7c:	bl	11300 <mbsinit@plt>
   1ae80:	mov	r2, r5
   1ae84:	ldr	lr, [sp, #28]
   1ae88:	ldr	r5, [fp, #-84]	; 0xffffffac
   1ae8c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1ae90:	cmp	r0, #0
   1ae94:	bne	1ad28 <__assert_fail@plt+0x9770>
   1ae98:	add	r0, r2, r7
   1ae9c:	str	r2, [sp, #44]	; 0x2c
   1aea0:	mov	r3, r4
   1aea4:	add	r1, ip, r0
   1aea8:	str	r0, [sp, #24]
   1aeac:	sub	r2, lr, r0
   1aeb0:	sub	r0, fp, #44	; 0x2c
   1aeb4:	bl	1d510 <__assert_fail@plt+0xbf58>
   1aeb8:	cmp	r0, #0
   1aebc:	beq	1b260 <__assert_fail@plt+0x9ca8>
   1aec0:	cmn	r0, #1
   1aec4:	beq	1b21c <__assert_fail@plt+0x9c64>
   1aec8:	ldr	lr, [sp, #28]
   1aecc:	cmn	r0, #2
   1aed0:	beq	1b224 <__assert_fail@plt+0x9c6c>
   1aed4:	ldr	r2, [sp, #64]	; 0x40
   1aed8:	ldr	r4, [sp, #88]	; 0x58
   1aedc:	ldr	ip, [sp, #84]	; 0x54
   1aee0:	cmp	r0, #2
   1aee4:	mov	r1, #0
   1aee8:	movwcc	r1, #1
   1aeec:	eor	r2, r2, #1
   1aef0:	orrs	r1, r2, r1
   1aef4:	bne	1ae58 <__assert_fail@plt+0x98a0>
   1aef8:	ldr	r1, [sp, #44]	; 0x2c
   1aefc:	ldr	r2, [sp, #20]
   1af00:	add	r1, r2, r1
   1af04:	sub	r2, r0, #1
   1af08:	b	1af18 <__assert_fail@plt+0x9960>
   1af0c:	add	r1, r1, #1
   1af10:	subs	r2, r2, #1
   1af14:	beq	1ae58 <__assert_fail@plt+0x98a0>
   1af18:	ldrb	r3, [r1]
   1af1c:	sub	r3, r3, #91	; 0x5b
   1af20:	cmp	r3, #33	; 0x21
   1af24:	bhi	1af0c <__assert_fail@plt+0x9954>
   1af28:	add	r5, pc, #0
   1af2c:	ldr	pc, [r5, r3, lsl #2]
   1af30:	andeq	fp, r1, r4, lsl r3
   1af34:	andeq	fp, r1, r4, lsl r3
   1af38:	andeq	sl, r1, ip, lsl #30
   1af3c:	andeq	fp, r1, r4, lsl r3
   1af40:	andeq	sl, r1, ip, lsl #30
   1af44:	andeq	fp, r1, r4, lsl r3
   1af48:	andeq	sl, r1, ip, lsl #30
   1af4c:	andeq	sl, r1, ip, lsl #30
   1af50:	andeq	sl, r1, ip, lsl #30
   1af54:	andeq	sl, r1, ip, lsl #30
   1af58:	andeq	sl, r1, ip, lsl #30
   1af5c:	andeq	sl, r1, ip, lsl #30
   1af60:	andeq	sl, r1, ip, lsl #30
   1af64:	andeq	sl, r1, ip, lsl #30
   1af68:	andeq	sl, r1, ip, lsl #30
   1af6c:	andeq	sl, r1, ip, lsl #30
   1af70:	andeq	sl, r1, ip, lsl #30
   1af74:	andeq	sl, r1, ip, lsl #30
   1af78:	andeq	sl, r1, ip, lsl #30
   1af7c:	andeq	sl, r1, ip, lsl #30
   1af80:	andeq	sl, r1, ip, lsl #30
   1af84:	andeq	sl, r1, ip, lsl #30
   1af88:	andeq	sl, r1, ip, lsl #30
   1af8c:	andeq	sl, r1, ip, lsl #30
   1af90:	andeq	sl, r1, ip, lsl #30
   1af94:	andeq	sl, r1, ip, lsl #30
   1af98:	andeq	sl, r1, ip, lsl #30
   1af9c:	andeq	sl, r1, ip, lsl #30
   1afa0:	andeq	sl, r1, ip, lsl #30
   1afa4:	andeq	sl, r1, ip, lsl #30
   1afa8:	andeq	sl, r1, ip, lsl #30
   1afac:	andeq	sl, r1, ip, lsl #30
   1afb0:	andeq	sl, r1, ip, lsl #30
   1afb4:	andeq	fp, r1, r4, lsl r3
   1afb8:	mov	r8, r0
   1afbc:	b	1a9e0 <__assert_fail@plt+0x9428>
   1afc0:	ldr	r0, [sp, #32]
   1afc4:	cmp	r0, #0
   1afc8:	beq	1b068 <__assert_fail@plt+0x9ab0>
   1afcc:	add	r0, r7, #2
   1afd0:	cmp	r0, lr
   1afd4:	bcs	1b068 <__assert_fail@plt+0x9ab0>
   1afd8:	add	r1, r7, ip
   1afdc:	ldrb	r1, [r1, #1]
   1afe0:	cmp	r1, #63	; 0x3f
   1afe4:	bne	1b068 <__assert_fail@plt+0x9ab0>
   1afe8:	ldrb	r9, [ip, r0]
   1afec:	sub	r2, r9, #33	; 0x21
   1aff0:	cmp	r2, #29
   1aff4:	bhi	1b068 <__assert_fail@plt+0x9ab0>
   1aff8:	movw	r1, #20929	; 0x51c1
   1affc:	mov	r3, #1
   1b000:	movt	r1, #14336	; 0x3800
   1b004:	tst	r1, r3, lsl r2
   1b008:	beq	1b068 <__assert_fail@plt+0x9ab0>
   1b00c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1b010:	tst	r1, #1
   1b014:	bne	1b338 <__assert_fail@plt+0x9d80>
   1b018:	cmp	r8, r4
   1b01c:	add	r2, r8, #1
   1b020:	mov	r6, r9
   1b024:	mov	r7, r0
   1b028:	mov	r9, #0
   1b02c:	movcc	r1, #63	; 0x3f
   1b030:	strbcc	r1, [r5, r8]
   1b034:	cmp	r2, r4
   1b038:	movcc	r1, #34	; 0x22
   1b03c:	strbcc	r1, [r5, r2]
   1b040:	add	r2, r8, #2
   1b044:	cmp	r2, r4
   1b048:	movcc	r1, #34	; 0x22
   1b04c:	strbcc	r1, [r5, r2]
   1b050:	add	r2, r8, #3
   1b054:	add	r8, r8, #4
   1b058:	cmp	r2, r4
   1b05c:	movcc	r1, #63	; 0x3f
   1b060:	strbcc	r1, [r5, r2]
   1b064:	b	1a9e0 <__assert_fail@plt+0x9428>
   1b068:	mov	r9, #0
   1b06c:	b	1a9e0 <__assert_fail@plt+0x9428>
   1b070:	ldr	lr, [sp, #28]
   1b074:	ldr	r4, [fp, #-56]	; 0xffffffc8
   1b078:	add	r1, r2, r7
   1b07c:	mov	r2, #0
   1b080:	str	r1, [sp, #44]	; 0x2c
   1b084:	tst	r0, #1
   1b088:	bne	1b1a4 <__assert_fail@plt+0x9bec>
   1b08c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1b090:	tst	r1, #1
   1b094:	bne	1b334 <__assert_fail@plt+0x9d7c>
   1b098:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1b09c:	subs	r2, r1, #2
   1b0a0:	movwne	r2, #1
   1b0a4:	orr	r2, r2, r4
   1b0a8:	tst	r2, #1
   1b0ac:	bne	1b0f0 <__assert_fail@plt+0x9b38>
   1b0b0:	ldr	r1, [sp, #88]	; 0x58
   1b0b4:	add	r2, r8, #1
   1b0b8:	mov	r4, #1
   1b0bc:	cmp	r8, r1
   1b0c0:	movcc	r1, #39	; 0x27
   1b0c4:	strbcc	r1, [r5, r8]
   1b0c8:	ldr	r1, [sp, #88]	; 0x58
   1b0cc:	cmp	r2, r1
   1b0d0:	movcc	r1, #36	; 0x24
   1b0d4:	strbcc	r1, [r5, r2]
   1b0d8:	ldr	r1, [sp, #88]	; 0x58
   1b0dc:	add	r2, r8, #2
   1b0e0:	add	r8, r8, #3
   1b0e4:	cmp	r2, r1
   1b0e8:	movcc	r1, #39	; 0x27
   1b0ec:	strbcc	r1, [r5, r2]
   1b0f0:	ldr	r1, [sp, #88]	; 0x58
   1b0f4:	add	r2, r8, #1
   1b0f8:	cmp	r8, r1
   1b0fc:	movcc	r1, #92	; 0x5c
   1b100:	strbcc	r1, [r5, r8]
   1b104:	ldr	r1, [sp, #88]	; 0x58
   1b108:	cmp	r2, r1
   1b10c:	bcs	1b120 <__assert_fail@plt+0x9b68>
   1b110:	uxtb	r3, r6
   1b114:	mov	r1, #48	; 0x30
   1b118:	orr	r3, r1, r3, lsr #6
   1b11c:	strb	r3, [r5, r2]
   1b120:	ldr	r1, [sp, #88]	; 0x58
   1b124:	add	r2, r8, #2
   1b128:	add	r8, r8, #3
   1b12c:	cmp	r2, r1
   1b130:	lsrcc	r3, r6, #3
   1b134:	movcc	r1, #6
   1b138:	bficc	r3, r1, #3, #29
   1b13c:	mov	r1, #6
   1b140:	bfi	r6, r1, #3, #29
   1b144:	strbcc	r3, [r5, r2]
   1b148:	mov	r2, #1
   1b14c:	b	1b1cc <__assert_fail@plt+0x9c14>
   1b150:	ldr	r1, [sp, #88]	; 0x58
   1b154:	ldr	r5, [fp, #-84]	; 0xffffffac
   1b158:	ldr	r4, [sp, #88]	; 0x58
   1b15c:	cmp	r8, r1
   1b160:	movcc	r1, #39	; 0x27
   1b164:	strbcc	r1, [r5, r8]
   1b168:	add	r1, r8, #1
   1b16c:	add	r8, r8, #2
   1b170:	cmp	r1, r4
   1b174:	movcc	r4, #39	; 0x27
   1b178:	strbcc	r4, [r5, r1]
   1b17c:	mov	r4, #0
   1b180:	ldr	r1, [sp, #88]	; 0x58
   1b184:	cmp	r8, r1
   1b188:	ldr	r1, [sp, #72]	; 0x48
   1b18c:	strbcc	r6, [r5, r8]
   1b190:	add	r8, r8, #1
   1b194:	ldrb	r6, [r1, r7]
   1b198:	mov	r7, r3
   1b19c:	tst	r0, #1
   1b1a0:	beq	1b08c <__assert_fail@plt+0x9ad4>
   1b1a4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1b1a8:	tst	r1, #1
   1b1ac:	beq	1b1c4 <__assert_fail@plt+0x9c0c>
   1b1b0:	ldr	r1, [sp, #88]	; 0x58
   1b1b4:	cmp	r8, r1
   1b1b8:	movcc	r1, #92	; 0x5c
   1b1bc:	strbcc	r1, [r5, r8]
   1b1c0:	add	r8, r8, #1
   1b1c4:	mov	r1, #0
   1b1c8:	str	r1, [fp, #-52]	; 0xffffffcc
   1b1cc:	ldr	r1, [sp, #44]	; 0x2c
   1b1d0:	add	r3, r7, #1
   1b1d4:	and	sl, r2, #1
   1b1d8:	cmp	r1, r3
   1b1dc:	bls	1b200 <__assert_fail@plt+0x9c48>
   1b1e0:	cmp	sl, #0
   1b1e4:	mvn	r5, r4
   1b1e8:	movwne	sl, #1
   1b1ec:	orr	r5, r5, sl
   1b1f0:	tst	r5, #1
   1b1f4:	beq	1b150 <__assert_fail@plt+0x9b98>
   1b1f8:	ldr	r5, [fp, #-84]	; 0xffffffac
   1b1fc:	b	1b180 <__assert_fail@plt+0x9bc8>
   1b200:	str	r4, [fp, #-56]	; 0xffffffc8
   1b204:	ldr	r4, [sp, #88]	; 0x58
   1b208:	cmp	sl, #0
   1b20c:	movwne	sl, #1
   1b210:	cmp	sl, #0
   1b214:	beq	1ad70 <__assert_fail@plt+0x97b8>
   1b218:	b	1ada4 <__assert_fail@plt+0x97ec>
   1b21c:	mov	r9, #0
   1b220:	b	1b260 <__assert_fail@plt+0x9ca8>
   1b224:	ldr	r0, [sp, #24]
   1b228:	mov	r9, #0
   1b22c:	cmp	lr, r0
   1b230:	bls	1b260 <__assert_fail@plt+0x9ca8>
   1b234:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1b238:	ldr	r2, [sp, #44]	; 0x2c
   1b23c:	add	r0, ip, r7
   1b240:	ldrb	r1, [r0, r2]
   1b244:	cmp	r1, #0
   1b248:	beq	1ad28 <__assert_fail@plt+0x9770>
   1b24c:	add	r2, r2, #1
   1b250:	add	r1, r7, r2
   1b254:	cmp	r1, lr
   1b258:	bcc	1b240 <__assert_fail@plt+0x9c88>
   1b25c:	b	1ad28 <__assert_fail@plt+0x9770>
   1b260:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1b264:	ldr	r2, [sp, #44]	; 0x2c
   1b268:	b	1ad28 <__assert_fail@plt+0x9770>
   1b26c:	mov	lr, r7
   1b270:	b	1b278 <__assert_fail@plt+0x9cc0>
   1b274:	mvn	lr, #0
   1b278:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1b27c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1b280:	eor	r0, r1, #2
   1b284:	orr	r0, r0, r8
   1b288:	clz	r0, r0
   1b28c:	lsr	r0, r0, #5
   1b290:	tst	r2, r0
   1b294:	bne	1b338 <__assert_fail@plt+0x9d80>
   1b298:	subs	r0, r1, #2
   1b29c:	movwne	r0, #1
   1b2a0:	orr	r0, r2, r0
   1b2a4:	tst	r0, #1
   1b2a8:	ldreq	r0, [sp, #60]	; 0x3c
   1b2ac:	eoreq	r0, r0, #1
   1b2b0:	tsteq	r0, #1
   1b2b4:	bne	1b3cc <__assert_fail@plt+0x9e14>
   1b2b8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1b2bc:	mov	sl, lr
   1b2c0:	tst	r0, #1
   1b2c4:	bne	1b398 <__assert_fail@plt+0x9de0>
   1b2c8:	ldr	r6, [sp, #56]	; 0x38
   1b2cc:	mov	r9, #0
   1b2d0:	cmp	r6, #0
   1b2d4:	beq	1b3c4 <__assert_fail@plt+0x9e0c>
   1b2d8:	ldr	r0, [sp, #84]	; 0x54
   1b2dc:	mov	r1, #0
   1b2e0:	mov	r7, #2
   1b2e4:	cmp	r4, #0
   1b2e8:	str	r1, [fp, #-48]	; 0xffffffd0
   1b2ec:	mov	r1, #0
   1b2f0:	str	r1, [fp, #-76]	; 0xffffffb4
   1b2f4:	beq	1a494 <__assert_fail@plt+0x8edc>
   1b2f8:	b	1b3cc <__assert_fail@plt+0x9e14>
   1b2fc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1b300:	ldr	r1, [fp, #12]
   1b304:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1b308:	mov	lr, r4
   1b30c:	mov	r4, r6
   1b310:	b	1b358 <__assert_fail@plt+0x9da0>
   1b314:	tst	ip, #1
   1b318:	ldr	r5, [fp, #-84]	; 0xffffffac
   1b31c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1b320:	ldr	r1, [fp, #12]
   1b324:	mov	r0, #2
   1b328:	movwne	r0, #4
   1b32c:	mov	r2, r0
   1b330:	b	1b358 <__assert_fail@plt+0x9da0>
   1b334:	ldr	r4, [sp, #88]	; 0x58
   1b338:	ldr	r1, [sp, #84]	; 0x54
   1b33c:	mov	r0, #2
   1b340:	tst	r1, #1
   1b344:	movwne	r0, #4
   1b348:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1b34c:	ldr	r1, [fp, #12]
   1b350:	cmp	r2, #2
   1b354:	moveq	r2, r0
   1b358:	mov	r0, #0
   1b35c:	bic	r1, r1, #2
   1b360:	str	r2, [sp]
   1b364:	mov	r2, ip
   1b368:	mov	r3, lr
   1b36c:	str	r0, [sp, #8]
   1b370:	ldr	r0, [sp, #76]	; 0x4c
   1b374:	str	r1, [sp, #4]
   1b378:	mov	r1, r4
   1b37c:	str	r0, [sp, #12]
   1b380:	ldr	r0, [sp, #80]	; 0x50
   1b384:	str	r0, [sp, #16]
   1b388:	mov	r0, r5
   1b38c:	bl	1a404 <__assert_fail@plt+0x8e4c>
   1b390:	mov	r8, r0
   1b394:	b	1b418 <__assert_fail@plt+0x9e60>
   1b398:	mov	r0, #5
   1b39c:	ldr	r1, [sp, #56]	; 0x38
   1b3a0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1b3a4:	mov	r3, sl
   1b3a8:	str	r0, [sp]
   1b3ac:	ldr	r0, [fp, #12]
   1b3b0:	str	r0, [sp, #4]
   1b3b4:	ldr	r0, [fp, #16]
   1b3b8:	str	r0, [sp, #8]
   1b3bc:	ldr	r0, [sp, #76]	; 0x4c
   1b3c0:	b	1b37c <__assert_fail@plt+0x9dc4>
   1b3c4:	mov	r0, #0
   1b3c8:	str	r0, [fp, #-76]	; 0xffffffb4
   1b3cc:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1b3d0:	cmp	r1, #0
   1b3d4:	beq	1b40c <__assert_fail@plt+0x9e54>
   1b3d8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1b3dc:	tst	r0, #1
   1b3e0:	bne	1b40c <__assert_fail@plt+0x9e54>
   1b3e4:	ldrb	r0, [r1]
   1b3e8:	cmp	r0, #0
   1b3ec:	beq	1b40c <__assert_fail@plt+0x9e54>
   1b3f0:	add	r1, r1, #1
   1b3f4:	cmp	r8, r4
   1b3f8:	strbcc	r0, [r5, r8]
   1b3fc:	add	r8, r8, #1
   1b400:	ldrb	r0, [r1], #1
   1b404:	cmp	r0, #0
   1b408:	bne	1b3f4 <__assert_fail@plt+0x9e3c>
   1b40c:	cmp	r8, r4
   1b410:	movcc	r0, #0
   1b414:	strbcc	r0, [r5, r8]
   1b418:	mov	r0, r8
   1b41c:	sub	sp, fp, #28
   1b420:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b424:	mov	r0, #4
   1b428:	b	1b348 <__assert_fail@plt+0x9d90>
   1b42c:	bl	11588 <abort@plt>
   1b430:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b434:	add	fp, sp, #28
   1b438:	sub	sp, sp, #28
   1b43c:	movw	r5, #8672	; 0x21e0
   1b440:	cmp	r2, #0
   1b444:	mov	r4, r1
   1b448:	mov	r7, r0
   1b44c:	str	r0, [sp, #20]
   1b450:	movt	r5, #3
   1b454:	movne	r5, r2
   1b458:	bl	1148c <__errno_location@plt>
   1b45c:	mov	sl, r0
   1b460:	ldr	r2, [r5, #40]	; 0x28
   1b464:	ldr	r3, [r5, #44]	; 0x2c
   1b468:	ldm	r5, {r0, r1}
   1b46c:	orr	r8, r1, #1
   1b470:	add	r9, r5, #8
   1b474:	mov	r1, #0
   1b478:	ldr	r6, [sl]
   1b47c:	stm	sp, {r0, r8, r9}
   1b480:	mov	r0, #0
   1b484:	str	r2, [sp, #12]
   1b488:	str	r3, [sp, #16]
   1b48c:	mov	r2, r7
   1b490:	mov	r3, r4
   1b494:	str	r6, [sp, #24]
   1b498:	mov	r6, r4
   1b49c:	bl	1a404 <__assert_fail@plt+0x8e4c>
   1b4a0:	add	r7, r0, #1
   1b4a4:	mov	r0, r7
   1b4a8:	bl	1cc64 <__assert_fail@plt+0xb6ac>
   1b4ac:	mov	r4, r0
   1b4b0:	ldr	r0, [r5]
   1b4b4:	ldr	r2, [r5, #44]	; 0x2c
   1b4b8:	ldr	r1, [r5, #40]	; 0x28
   1b4bc:	mov	r3, r6
   1b4c0:	stm	sp, {r0, r8, r9}
   1b4c4:	str	r2, [sp, #16]
   1b4c8:	ldr	r2, [sp, #20]
   1b4cc:	str	r1, [sp, #12]
   1b4d0:	mov	r0, r4
   1b4d4:	mov	r1, r7
   1b4d8:	bl	1a404 <__assert_fail@plt+0x8e4c>
   1b4dc:	ldr	r0, [sp, #24]
   1b4e0:	str	r0, [sl]
   1b4e4:	mov	r0, r4
   1b4e8:	sub	sp, fp, #28
   1b4ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4f4:	add	fp, sp, #28
   1b4f8:	sub	sp, sp, #36	; 0x24
   1b4fc:	movw	r8, #8672	; 0x21e0
   1b500:	cmp	r3, #0
   1b504:	mov	r4, r2
   1b508:	str	r2, [sp, #24]
   1b50c:	mov	r5, r1
   1b510:	mov	r6, r0
   1b514:	str	r0, [sp, #20]
   1b518:	movt	r8, #3
   1b51c:	movne	r8, r3
   1b520:	bl	1148c <__errno_location@plt>
   1b524:	str	r0, [sp, #28]
   1b528:	ldr	r1, [r8, #40]	; 0x28
   1b52c:	ldr	r2, [r8, #44]	; 0x2c
   1b530:	ldr	r7, [r0]
   1b534:	cmp	r4, #0
   1b538:	add	sl, r8, #8
   1b53c:	mov	r0, #0
   1b540:	ldm	r8, {r3, r9}
   1b544:	orreq	r9, r9, #1
   1b548:	stm	sp, {r3, r9, sl}
   1b54c:	str	r1, [sp, #12]
   1b550:	str	r2, [sp, #16]
   1b554:	mov	r1, #0
   1b558:	mov	r2, r6
   1b55c:	mov	r3, r5
   1b560:	str	r7, [sp, #32]
   1b564:	mov	r7, r5
   1b568:	bl	1a404 <__assert_fail@plt+0x8e4c>
   1b56c:	add	r4, r0, #1
   1b570:	mov	r5, r0
   1b574:	mov	r0, r4
   1b578:	bl	1cc64 <__assert_fail@plt+0xb6ac>
   1b57c:	mov	r6, r0
   1b580:	ldr	r0, [r8]
   1b584:	ldr	r2, [r8, #44]	; 0x2c
   1b588:	ldr	r1, [r8, #40]	; 0x28
   1b58c:	mov	r3, r7
   1b590:	stm	sp, {r0, r9, sl}
   1b594:	str	r2, [sp, #16]
   1b598:	ldr	r2, [sp, #20]
   1b59c:	str	r1, [sp, #12]
   1b5a0:	mov	r0, r6
   1b5a4:	mov	r1, r4
   1b5a8:	bl	1a404 <__assert_fail@plt+0x8e4c>
   1b5ac:	ldr	r0, [sp, #24]
   1b5b0:	ldr	r1, [sp, #32]
   1b5b4:	ldr	r2, [sp, #28]
   1b5b8:	cmp	r0, #0
   1b5bc:	str	r1, [r2]
   1b5c0:	strne	r5, [r0]
   1b5c4:	mov	r0, r6
   1b5c8:	sub	sp, fp, #28
   1b5cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5d0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b5d4:	add	fp, sp, #24
   1b5d8:	movw	r5, #8524	; 0x214c
   1b5dc:	movw	r8, #8520	; 0x2148
   1b5e0:	movt	r5, #3
   1b5e4:	movt	r8, #3
   1b5e8:	ldr	r0, [r5]
   1b5ec:	ldr	r4, [r8]
   1b5f0:	cmp	r0, #2
   1b5f4:	blt	1b620 <__assert_fail@plt+0xa068>
   1b5f8:	add	r7, r4, #12
   1b5fc:	mov	r6, #0
   1b600:	ldr	r0, [r7, r6, lsl #3]
   1b604:	bl	1d408 <__assert_fail@plt+0xbe50>
   1b608:	ldr	r1, [r5]
   1b60c:	add	r2, r6, #2
   1b610:	add	r0, r6, #1
   1b614:	mov	r6, r0
   1b618:	cmp	r2, r1
   1b61c:	blt	1b600 <__assert_fail@plt+0xa048>
   1b620:	ldr	r0, [r4, #4]
   1b624:	movw	r9, #8720	; 0x2210
   1b628:	movw	r7, #8528	; 0x2150
   1b62c:	movt	r9, #3
   1b630:	movt	r7, #3
   1b634:	cmp	r0, r9
   1b638:	beq	1b648 <__assert_fail@plt+0xa090>
   1b63c:	bl	1d408 <__assert_fail@plt+0xbe50>
   1b640:	mov	r0, #256	; 0x100
   1b644:	stm	r7, {r0, r9}
   1b648:	cmp	r4, r7
   1b64c:	beq	1b65c <__assert_fail@plt+0xa0a4>
   1b650:	mov	r0, r4
   1b654:	bl	1d408 <__assert_fail@plt+0xbe50>
   1b658:	str	r7, [r8]
   1b65c:	mov	r0, #1
   1b660:	str	r0, [r5]
   1b664:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b668:	movw	r3, #8672	; 0x21e0
   1b66c:	mvn	r2, #0
   1b670:	movt	r3, #3
   1b674:	b	1b678 <__assert_fail@plt+0xa0c0>
   1b678:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b67c:	add	fp, sp, #28
   1b680:	sub	sp, sp, #44	; 0x2c
   1b684:	mov	r7, r3
   1b688:	str	r2, [sp, #36]	; 0x24
   1b68c:	str	r1, [sp, #32]
   1b690:	mov	r5, r0
   1b694:	bl	1148c <__errno_location@plt>
   1b698:	cmp	r5, #0
   1b69c:	bmi	1b80c <__assert_fail@plt+0xa254>
   1b6a0:	cmn	r5, #-2147483647	; 0x80000001
   1b6a4:	beq	1b80c <__assert_fail@plt+0xa254>
   1b6a8:	movw	r8, #8524	; 0x214c
   1b6ac:	movw	r4, #8520	; 0x2148
   1b6b0:	str	r0, [sp, #28]
   1b6b4:	ldr	r0, [r0]
   1b6b8:	movt	r8, #3
   1b6bc:	movt	r4, #3
   1b6c0:	ldr	r1, [r8]
   1b6c4:	ldr	r6, [r4]
   1b6c8:	str	r0, [sp, #24]
   1b6cc:	cmp	r1, r5
   1b6d0:	ble	1b6dc <__assert_fail@plt+0xa124>
   1b6d4:	mov	sl, r6
   1b6d8:	b	1b748 <__assert_fail@plt+0xa190>
   1b6dc:	movw	r9, #8528	; 0x2150
   1b6e0:	mov	r0, #8
   1b6e4:	str	r1, [fp, #-32]	; 0xffffffe0
   1b6e8:	sub	r1, r5, r1
   1b6ec:	mvn	r3, #-2147483648	; 0x80000000
   1b6f0:	movt	r9, #3
   1b6f4:	str	r0, [sp]
   1b6f8:	add	r2, r1, #1
   1b6fc:	sub	r1, fp, #32
   1b700:	subs	r0, r6, r9
   1b704:	movne	r0, r6
   1b708:	bl	1ce64 <__assert_fail@plt+0xb8ac>
   1b70c:	mov	sl, r0
   1b710:	cmp	r6, r9
   1b714:	str	r0, [r4]
   1b718:	bne	1b724 <__assert_fail@plt+0xa16c>
   1b71c:	ldrd	r0, [r9]
   1b720:	stm	sl, {r0, r1}
   1b724:	ldr	r1, [r8]
   1b728:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1b72c:	add	r0, sl, r1, lsl #3
   1b730:	sub	r1, r2, r1
   1b734:	lsl	r2, r1, #3
   1b738:	mov	r1, #0
   1b73c:	bl	114b0 <memset@plt>
   1b740:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1b744:	str	r0, [r8]
   1b748:	mov	r9, sl
   1b74c:	ldm	r7, {r0, r1}
   1b750:	orr	r8, r1, #1
   1b754:	add	r1, r7, #8
   1b758:	ldr	r2, [r7, #40]	; 0x28
   1b75c:	ldr	r3, [r7, #44]	; 0x2c
   1b760:	ldr	r6, [r9, r5, lsl #3]!
   1b764:	str	r1, [sp, #20]
   1b768:	ldr	r4, [r9, #4]!
   1b76c:	stm	sp, {r0, r8}
   1b770:	add	r0, sp, #8
   1b774:	stm	r0, {r1, r2, r3}
   1b778:	ldr	r2, [sp, #32]
   1b77c:	ldr	r3, [sp, #36]	; 0x24
   1b780:	mov	r1, r6
   1b784:	mov	r0, r4
   1b788:	bl	1a404 <__assert_fail@plt+0x8e4c>
   1b78c:	cmp	r6, r0
   1b790:	bhi	1b7f4 <__assert_fail@plt+0xa23c>
   1b794:	add	r6, r0, #1
   1b798:	movw	r0, #8720	; 0x2210
   1b79c:	movt	r0, #3
   1b7a0:	str	r6, [sl, r5, lsl #3]
   1b7a4:	cmp	r4, r0
   1b7a8:	beq	1b7b4 <__assert_fail@plt+0xa1fc>
   1b7ac:	mov	r0, r4
   1b7b0:	bl	1d408 <__assert_fail@plt+0xbe50>
   1b7b4:	mov	r0, r6
   1b7b8:	bl	1cc64 <__assert_fail@plt+0xb6ac>
   1b7bc:	str	r0, [r9]
   1b7c0:	mov	r4, r0
   1b7c4:	add	r3, sp, #8
   1b7c8:	ldr	r0, [r7]
   1b7cc:	ldr	r1, [r7, #40]	; 0x28
   1b7d0:	ldr	r2, [r7, #44]	; 0x2c
   1b7d4:	stm	sp, {r0, r8}
   1b7d8:	ldr	r0, [sp, #20]
   1b7dc:	stm	r3, {r0, r1, r2}
   1b7e0:	ldr	r2, [sp, #32]
   1b7e4:	ldr	r3, [sp, #36]	; 0x24
   1b7e8:	mov	r0, r4
   1b7ec:	mov	r1, r6
   1b7f0:	bl	1a404 <__assert_fail@plt+0x8e4c>
   1b7f4:	ldr	r0, [sp, #28]
   1b7f8:	ldr	r1, [sp, #24]
   1b7fc:	str	r1, [r0]
   1b800:	mov	r0, r4
   1b804:	sub	sp, fp, #28
   1b808:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b80c:	bl	11588 <abort@plt>
   1b810:	movw	r3, #8672	; 0x21e0
   1b814:	movt	r3, #3
   1b818:	b	1b678 <__assert_fail@plt+0xa0c0>
   1b81c:	movw	r3, #8672	; 0x21e0
   1b820:	mov	r1, r0
   1b824:	mov	r0, #0
   1b828:	mvn	r2, #0
   1b82c:	movt	r3, #3
   1b830:	b	1b678 <__assert_fail@plt+0xa0c0>
   1b834:	movw	r3, #8672	; 0x21e0
   1b838:	mov	r2, r1
   1b83c:	mov	r1, r0
   1b840:	mov	r0, #0
   1b844:	movt	r3, #3
   1b848:	b	1b678 <__assert_fail@plt+0xa0c0>
   1b84c:	push	{fp, lr}
   1b850:	mov	fp, sp
   1b854:	sub	sp, sp, #48	; 0x30
   1b858:	vmov.i32	q8, #0	; 0x00000000
   1b85c:	mov	ip, #32
   1b860:	mov	r3, sp
   1b864:	mov	lr, r2
   1b868:	cmp	r1, #10
   1b86c:	add	r2, r3, #16
   1b870:	vst1.64	{d16-d17}, [r3], ip
   1b874:	vst1.64	{d16-d17}, [r2]
   1b878:	vst1.64	{d16-d17}, [r3]
   1b87c:	beq	1b89c <__assert_fail@plt+0xa2e4>
   1b880:	str	r1, [sp]
   1b884:	mov	r3, sp
   1b888:	mov	r1, lr
   1b88c:	mvn	r2, #0
   1b890:	bl	1b678 <__assert_fail@plt+0xa0c0>
   1b894:	mov	sp, fp
   1b898:	pop	{fp, pc}
   1b89c:	bl	11588 <abort@plt>
   1b8a0:	push	{r4, sl, fp, lr}
   1b8a4:	add	fp, sp, #8
   1b8a8:	sub	sp, sp, #48	; 0x30
   1b8ac:	vmov.i32	q8, #0	; 0x00000000
   1b8b0:	mov	ip, r3
   1b8b4:	mov	r3, sp
   1b8b8:	mov	lr, #32
   1b8bc:	cmp	r1, #10
   1b8c0:	add	r4, r3, #16
   1b8c4:	vst1.64	{d16-d17}, [r3], lr
   1b8c8:	vst1.64	{d16-d17}, [r4]
   1b8cc:	vst1.64	{d16-d17}, [r3]
   1b8d0:	beq	1b8f0 <__assert_fail@plt+0xa338>
   1b8d4:	str	r1, [sp]
   1b8d8:	mov	r1, r2
   1b8dc:	mov	r3, sp
   1b8e0:	mov	r2, ip
   1b8e4:	bl	1b678 <__assert_fail@plt+0xa0c0>
   1b8e8:	sub	sp, fp, #8
   1b8ec:	pop	{r4, sl, fp, pc}
   1b8f0:	bl	11588 <abort@plt>
   1b8f4:	push	{fp, lr}
   1b8f8:	mov	fp, sp
   1b8fc:	sub	sp, sp, #48	; 0x30
   1b900:	vmov.i32	q8, #0	; 0x00000000
   1b904:	mov	r3, sp
   1b908:	mov	ip, #32
   1b90c:	cmp	r0, #10
   1b910:	add	r2, r3, #16
   1b914:	vst1.64	{d16-d17}, [r3], ip
   1b918:	vst1.64	{d16-d17}, [r2]
   1b91c:	vst1.64	{d16-d17}, [r3]
   1b920:	beq	1b940 <__assert_fail@plt+0xa388>
   1b924:	str	r0, [sp]
   1b928:	mov	r3, sp
   1b92c:	mov	r0, #0
   1b930:	mvn	r2, #0
   1b934:	bl	1b678 <__assert_fail@plt+0xa0c0>
   1b938:	mov	sp, fp
   1b93c:	pop	{fp, pc}
   1b940:	bl	11588 <abort@plt>
   1b944:	push	{fp, lr}
   1b948:	mov	fp, sp
   1b94c:	sub	sp, sp, #48	; 0x30
   1b950:	vmov.i32	q8, #0	; 0x00000000
   1b954:	mov	r3, sp
   1b958:	mov	ip, #32
   1b95c:	cmp	r0, #10
   1b960:	add	lr, r3, #16
   1b964:	vst1.64	{d16-d17}, [r3], ip
   1b968:	vst1.64	{d16-d17}, [lr]
   1b96c:	vst1.64	{d16-d17}, [r3]
   1b970:	beq	1b98c <__assert_fail@plt+0xa3d4>
   1b974:	str	r0, [sp]
   1b978:	mov	r3, sp
   1b97c:	mov	r0, #0
   1b980:	bl	1b678 <__assert_fail@plt+0xa0c0>
   1b984:	mov	sp, fp
   1b988:	pop	{fp, pc}
   1b98c:	bl	11588 <abort@plt>
   1b990:	push	{r4, sl, fp, lr}
   1b994:	add	fp, sp, #8
   1b998:	sub	sp, sp, #48	; 0x30
   1b99c:	mov	lr, r0
   1b9a0:	movw	r0, #8672	; 0x21e0
   1b9a4:	mov	ip, r1
   1b9a8:	mov	r1, #32
   1b9ac:	mov	r4, #1
   1b9b0:	movt	r0, #3
   1b9b4:	add	r3, r0, #16
   1b9b8:	vld1.64	{d16-d17}, [r0], r1
   1b9bc:	vld1.64	{d20-d21}, [r0]
   1b9c0:	vld1.64	{d18-d19}, [r3]
   1b9c4:	mov	r3, sp
   1b9c8:	add	r0, r3, #32
   1b9cc:	add	r1, r3, #16
   1b9d0:	vst1.64	{d20-d21}, [r0]
   1b9d4:	mov	r0, #28
   1b9d8:	vst1.64	{d18-d19}, [r1]
   1b9dc:	mov	r1, r3
   1b9e0:	and	r0, r0, r2, lsr #3
   1b9e4:	and	r2, r2, #31
   1b9e8:	vst1.64	{d16-d17}, [r1], r0
   1b9ec:	ldr	r0, [r1, #8]
   1b9f0:	bic	r4, r4, r0, lsr r2
   1b9f4:	eor	r0, r0, r4, lsl r2
   1b9f8:	mov	r2, ip
   1b9fc:	str	r0, [r1, #8]
   1ba00:	mov	r0, #0
   1ba04:	mov	r1, lr
   1ba08:	bl	1b678 <__assert_fail@plt+0xa0c0>
   1ba0c:	sub	sp, fp, #8
   1ba10:	pop	{r4, sl, fp, pc}
   1ba14:	push	{fp, lr}
   1ba18:	mov	fp, sp
   1ba1c:	sub	sp, sp, #48	; 0x30
   1ba20:	mov	ip, r0
   1ba24:	movw	r0, #8672	; 0x21e0
   1ba28:	mov	r2, #32
   1ba2c:	movt	r0, #3
   1ba30:	add	r3, r0, #16
   1ba34:	vld1.64	{d16-d17}, [r0], r2
   1ba38:	vld1.64	{d20-d21}, [r0]
   1ba3c:	vld1.64	{d18-d19}, [r3]
   1ba40:	mov	r3, sp
   1ba44:	add	r0, r3, #32
   1ba48:	add	r2, r3, #16
   1ba4c:	vst1.64	{d20-d21}, [r0]
   1ba50:	mov	r0, #28
   1ba54:	vst1.64	{d18-d19}, [r2]
   1ba58:	mov	r2, r3
   1ba5c:	and	r0, r0, r1, lsr #3
   1ba60:	and	r1, r1, #31
   1ba64:	vst1.64	{d16-d17}, [r2], r0
   1ba68:	mov	r0, #1
   1ba6c:	ldr	lr, [r2, #8]
   1ba70:	bic	r0, r0, lr, lsr r1
   1ba74:	eor	r0, lr, r0, lsl r1
   1ba78:	mov	r1, ip
   1ba7c:	str	r0, [r2, #8]
   1ba80:	mov	r0, #0
   1ba84:	mvn	r2, #0
   1ba88:	bl	1b678 <__assert_fail@plt+0xa0c0>
   1ba8c:	mov	sp, fp
   1ba90:	pop	{fp, pc}
   1ba94:	push	{fp, lr}
   1ba98:	mov	fp, sp
   1ba9c:	sub	sp, sp, #48	; 0x30
   1baa0:	mov	r1, r0
   1baa4:	movw	r0, #8672	; 0x21e0
   1baa8:	mov	r3, #32
   1baac:	movt	r0, #3
   1bab0:	add	r2, r0, #16
   1bab4:	vld1.64	{d16-d17}, [r0], r3
   1bab8:	mov	r3, sp
   1babc:	vld1.64	{d18-d19}, [r2]
   1bac0:	vld1.64	{d20-d21}, [r0]
   1bac4:	add	r2, r3, #16
   1bac8:	add	r0, r3, #32
   1bacc:	vst1.64	{d18-d19}, [r2]
   1bad0:	vst1.64	{d20-d21}, [r0]
   1bad4:	mov	r0, #12
   1bad8:	mov	r2, r3
   1badc:	vst1.64	{d16-d17}, [r2], r0
   1bae0:	ldr	r0, [r2]
   1bae4:	orr	r0, r0, #67108864	; 0x4000000
   1bae8:	str	r0, [r2]
   1baec:	mov	r0, #0
   1baf0:	mvn	r2, #0
   1baf4:	bl	1b678 <__assert_fail@plt+0xa0c0>
   1baf8:	mov	sp, fp
   1bafc:	pop	{fp, pc}
   1bb00:	push	{fp, lr}
   1bb04:	mov	fp, sp
   1bb08:	sub	sp, sp, #48	; 0x30
   1bb0c:	mov	ip, r1
   1bb10:	mov	r1, r0
   1bb14:	movw	r0, #8672	; 0x21e0
   1bb18:	mov	r2, #32
   1bb1c:	movt	r0, #3
   1bb20:	add	r3, r0, #16
   1bb24:	vld1.64	{d16-d17}, [r0], r2
   1bb28:	vld1.64	{d18-d19}, [r3]
   1bb2c:	vld1.64	{d20-d21}, [r0]
   1bb30:	mov	r3, sp
   1bb34:	add	r2, r3, #16
   1bb38:	add	r0, r3, #32
   1bb3c:	vst1.64	{d18-d19}, [r2]
   1bb40:	vst1.64	{d20-d21}, [r0]
   1bb44:	mov	r0, #12
   1bb48:	mov	r2, r3
   1bb4c:	vst1.64	{d16-d17}, [r2], r0
   1bb50:	ldr	r0, [r2]
   1bb54:	orr	r0, r0, #67108864	; 0x4000000
   1bb58:	str	r0, [r2]
   1bb5c:	mov	r0, #0
   1bb60:	mov	r2, ip
   1bb64:	bl	1b678 <__assert_fail@plt+0xa0c0>
   1bb68:	mov	sp, fp
   1bb6c:	pop	{fp, pc}
   1bb70:	push	{r4, sl, fp, lr}
   1bb74:	add	fp, sp, #8
   1bb78:	sub	sp, sp, #96	; 0x60
   1bb7c:	vmov.i32	q8, #0	; 0x00000000
   1bb80:	mov	ip, r2
   1bb84:	mov	r2, sp
   1bb88:	mov	r4, #28
   1bb8c:	cmp	r1, #10
   1bb90:	mov	r3, r2
   1bb94:	add	lr, r2, #16
   1bb98:	vst1.64	{d16-d17}, [r3], r4
   1bb9c:	vst1.64	{d16-d17}, [lr]
   1bba0:	vst1.32	{d16-d17}, [r3]
   1bba4:	beq	1bbf4 <__assert_fail@plt+0xa63c>
   1bba8:	vld1.64	{d16-d17}, [r2], r4
   1bbac:	vld1.64	{d18-d19}, [lr]
   1bbb0:	add	r3, sp, #48	; 0x30
   1bbb4:	vld1.32	{d20-d21}, [r2]
   1bbb8:	add	r2, r3, #20
   1bbbc:	add	r4, r3, #4
   1bbc0:	vst1.32	{d18-d19}, [r2]
   1bbc4:	add	r2, r3, #32
   1bbc8:	vst1.32	{d16-d17}, [r4]
   1bbcc:	vst1.32	{d20-d21}, [r2]
   1bbd0:	str	r1, [sp, #48]	; 0x30
   1bbd4:	mvn	r2, #0
   1bbd8:	ldr	r1, [sp, #60]	; 0x3c
   1bbdc:	orr	r1, r1, #67108864	; 0x4000000
   1bbe0:	str	r1, [sp, #60]	; 0x3c
   1bbe4:	mov	r1, ip
   1bbe8:	bl	1b678 <__assert_fail@plt+0xa0c0>
   1bbec:	sub	sp, fp, #8
   1bbf0:	pop	{r4, sl, fp, pc}
   1bbf4:	bl	11588 <abort@plt>
   1bbf8:	push	{r4, r5, r6, sl, fp, lr}
   1bbfc:	add	fp, sp, #16
   1bc00:	sub	sp, sp, #48	; 0x30
   1bc04:	mov	ip, r3
   1bc08:	movw	r3, #8672	; 0x21e0
   1bc0c:	mov	r6, #32
   1bc10:	cmp	r1, #0
   1bc14:	mov	r4, sp
   1bc18:	movt	r3, #3
   1bc1c:	cmpne	r2, #0
   1bc20:	add	r5, r4, #16
   1bc24:	add	lr, r3, #16
   1bc28:	vld1.64	{d16-d17}, [r3], r6
   1bc2c:	vld1.64	{d18-d19}, [lr]
   1bc30:	vld1.64	{d20-d21}, [r3]
   1bc34:	mov	r3, #10
   1bc38:	vst1.64	{d16-d17}, [r4], r6
   1bc3c:	vst1.64	{d18-d19}, [r5]
   1bc40:	vst1.64	{d20-d21}, [r4]
   1bc44:	str	r3, [sp]
   1bc48:	bne	1bc50 <__assert_fail@plt+0xa698>
   1bc4c:	bl	11588 <abort@plt>
   1bc50:	str	r2, [sp, #44]	; 0x2c
   1bc54:	str	r1, [sp, #40]	; 0x28
   1bc58:	mov	r3, sp
   1bc5c:	mov	r1, ip
   1bc60:	mvn	r2, #0
   1bc64:	bl	1b678 <__assert_fail@plt+0xa0c0>
   1bc68:	sub	sp, fp, #16
   1bc6c:	pop	{r4, r5, r6, sl, fp, pc}
   1bc70:	push	{r4, r5, r6, sl, fp, lr}
   1bc74:	add	fp, sp, #16
   1bc78:	sub	sp, sp, #48	; 0x30
   1bc7c:	mov	lr, r3
   1bc80:	movw	r3, #8672	; 0x21e0
   1bc84:	mov	r6, #32
   1bc88:	cmp	r1, #0
   1bc8c:	mov	r4, sp
   1bc90:	movt	r3, #3
   1bc94:	cmpne	r2, #0
   1bc98:	add	r5, r4, #16
   1bc9c:	add	ip, r3, #16
   1bca0:	vld1.64	{d16-d17}, [r3], r6
   1bca4:	vld1.64	{d18-d19}, [ip]
   1bca8:	vld1.64	{d20-d21}, [r3]
   1bcac:	mov	r3, #10
   1bcb0:	vst1.64	{d16-d17}, [r4], r6
   1bcb4:	vst1.64	{d18-d19}, [r5]
   1bcb8:	vst1.64	{d20-d21}, [r4]
   1bcbc:	str	r3, [sp]
   1bcc0:	bne	1bcc8 <__assert_fail@plt+0xa710>
   1bcc4:	bl	11588 <abort@plt>
   1bcc8:	ldr	ip, [fp, #8]
   1bccc:	str	r2, [sp, #44]	; 0x2c
   1bcd0:	str	r1, [sp, #40]	; 0x28
   1bcd4:	mov	r3, sp
   1bcd8:	mov	r1, lr
   1bcdc:	mov	r2, ip
   1bce0:	bl	1b678 <__assert_fail@plt+0xa0c0>
   1bce4:	sub	sp, fp, #16
   1bce8:	pop	{r4, r5, r6, sl, fp, pc}
   1bcec:	push	{r4, sl, fp, lr}
   1bcf0:	add	fp, sp, #8
   1bcf4:	sub	sp, sp, #48	; 0x30
   1bcf8:	movw	r3, #8672	; 0x21e0
   1bcfc:	mov	lr, #32
   1bd00:	mov	ip, r2
   1bd04:	cmp	r0, #0
   1bd08:	movt	r3, #3
   1bd0c:	cmpne	r1, #0
   1bd10:	add	r2, r3, #16
   1bd14:	vld1.64	{d16-d17}, [r3], lr
   1bd18:	vld1.64	{d20-d21}, [r3]
   1bd1c:	vld1.64	{d18-d19}, [r2]
   1bd20:	mov	r2, sp
   1bd24:	add	r4, r2, #16
   1bd28:	vst1.64	{d16-d17}, [r2], lr
   1bd2c:	vst1.64	{d20-d21}, [r2]
   1bd30:	mov	r2, #10
   1bd34:	vst1.64	{d18-d19}, [r4]
   1bd38:	str	r2, [sp]
   1bd3c:	bne	1bd44 <__assert_fail@plt+0xa78c>
   1bd40:	bl	11588 <abort@plt>
   1bd44:	str	r1, [sp, #44]	; 0x2c
   1bd48:	str	r0, [sp, #40]	; 0x28
   1bd4c:	mov	r3, sp
   1bd50:	mov	r0, #0
   1bd54:	mov	r1, ip
   1bd58:	mvn	r2, #0
   1bd5c:	bl	1b678 <__assert_fail@plt+0xa0c0>
   1bd60:	sub	sp, fp, #8
   1bd64:	pop	{r4, sl, fp, pc}
   1bd68:	push	{r4, r5, fp, lr}
   1bd6c:	add	fp, sp, #8
   1bd70:	sub	sp, sp, #48	; 0x30
   1bd74:	mov	ip, r3
   1bd78:	movw	r3, #8672	; 0x21e0
   1bd7c:	mov	r4, #32
   1bd80:	mov	lr, r2
   1bd84:	cmp	r0, #0
   1bd88:	movt	r3, #3
   1bd8c:	cmpne	r1, #0
   1bd90:	add	r2, r3, #16
   1bd94:	vld1.64	{d16-d17}, [r3], r4
   1bd98:	vld1.64	{d20-d21}, [r3]
   1bd9c:	vld1.64	{d18-d19}, [r2]
   1bda0:	mov	r2, sp
   1bda4:	add	r5, r2, #16
   1bda8:	vst1.64	{d16-d17}, [r2], r4
   1bdac:	vst1.64	{d20-d21}, [r2]
   1bdb0:	mov	r2, #10
   1bdb4:	vst1.64	{d18-d19}, [r5]
   1bdb8:	str	r2, [sp]
   1bdbc:	bne	1bdc4 <__assert_fail@plt+0xa80c>
   1bdc0:	bl	11588 <abort@plt>
   1bdc4:	str	r1, [sp, #44]	; 0x2c
   1bdc8:	str	r0, [sp, #40]	; 0x28
   1bdcc:	mov	r3, sp
   1bdd0:	mov	r0, #0
   1bdd4:	mov	r1, lr
   1bdd8:	mov	r2, ip
   1bddc:	bl	1b678 <__assert_fail@plt+0xa0c0>
   1bde0:	sub	sp, fp, #8
   1bde4:	pop	{r4, r5, fp, pc}
   1bde8:	movw	r3, #8536	; 0x2158
   1bdec:	movt	r3, #3
   1bdf0:	b	1b678 <__assert_fail@plt+0xa0c0>
   1bdf4:	movw	r3, #8536	; 0x2158
   1bdf8:	mov	r2, r1
   1bdfc:	mov	r1, r0
   1be00:	mov	r0, #0
   1be04:	movt	r3, #3
   1be08:	b	1b678 <__assert_fail@plt+0xa0c0>
   1be0c:	movw	r3, #8536	; 0x2158
   1be10:	mvn	r2, #0
   1be14:	movt	r3, #3
   1be18:	b	1b678 <__assert_fail@plt+0xa0c0>
   1be1c:	movw	r3, #8536	; 0x2158
   1be20:	mov	r1, r0
   1be24:	mov	r0, #0
   1be28:	mvn	r2, #0
   1be2c:	movt	r3, #3
   1be30:	b	1b678 <__assert_fail@plt+0xa0c0>
   1be34:	push	{r4, r5, fp, lr}
   1be38:	add	fp, sp, #8
   1be3c:	mov	r5, r0
   1be40:	mov	r4, r1
   1be44:	mov	r0, #0
   1be48:	mov	r2, #5
   1be4c:	mov	r1, r5
   1be50:	bl	11318 <dcgettext@plt>
   1be54:	cmp	r0, r5
   1be58:	popne	{r4, r5, fp, pc}
   1be5c:	bl	1d4d8 <__assert_fail@plt+0xbf20>
   1be60:	ldrb	r1, [r0]
   1be64:	and	r1, r1, #223	; 0xdf
   1be68:	cmp	r1, #71	; 0x47
   1be6c:	beq	1bed4 <__assert_fail@plt+0xa91c>
   1be70:	cmp	r1, #85	; 0x55
   1be74:	bne	1bf2c <__assert_fail@plt+0xa974>
   1be78:	ldrb	r1, [r0, #1]
   1be7c:	and	r1, r1, #223	; 0xdf
   1be80:	cmp	r1, #84	; 0x54
   1be84:	bne	1bf2c <__assert_fail@plt+0xa974>
   1be88:	ldrb	r1, [r0, #2]
   1be8c:	and	r1, r1, #223	; 0xdf
   1be90:	cmp	r1, #70	; 0x46
   1be94:	bne	1bf2c <__assert_fail@plt+0xa974>
   1be98:	ldrb	r1, [r0, #3]
   1be9c:	cmp	r1, #45	; 0x2d
   1bea0:	bne	1bf2c <__assert_fail@plt+0xa974>
   1bea4:	ldrb	r1, [r0, #4]
   1bea8:	cmp	r1, #56	; 0x38
   1beac:	bne	1bf2c <__assert_fail@plt+0xa974>
   1beb0:	ldrb	r0, [r0, #5]
   1beb4:	cmp	r0, #0
   1beb8:	bne	1bf2c <__assert_fail@plt+0xa974>
   1bebc:	ldrb	r1, [r5]
   1bec0:	movw	r2, #6529	; 0x1981
   1bec4:	movw	r0, #6533	; 0x1985
   1bec8:	movt	r2, #2
   1becc:	movt	r0, #2
   1bed0:	b	1bf5c <__assert_fail@plt+0xa9a4>
   1bed4:	ldrb	r1, [r0, #1]
   1bed8:	and	r1, r1, #223	; 0xdf
   1bedc:	cmp	r1, #66	; 0x42
   1bee0:	bne	1bf2c <__assert_fail@plt+0xa974>
   1bee4:	ldrb	r1, [r0, #2]
   1bee8:	cmp	r1, #49	; 0x31
   1beec:	bne	1bf2c <__assert_fail@plt+0xa974>
   1bef0:	ldrb	r1, [r0, #3]
   1bef4:	cmp	r1, #56	; 0x38
   1bef8:	bne	1bf2c <__assert_fail@plt+0xa974>
   1befc:	ldrb	r1, [r0, #4]
   1bf00:	cmp	r1, #48	; 0x30
   1bf04:	bne	1bf2c <__assert_fail@plt+0xa974>
   1bf08:	ldrb	r1, [r0, #5]
   1bf0c:	cmp	r1, #51	; 0x33
   1bf10:	bne	1bf2c <__assert_fail@plt+0xa974>
   1bf14:	ldrb	r1, [r0, #6]
   1bf18:	cmp	r1, #48	; 0x30
   1bf1c:	bne	1bf2c <__assert_fail@plt+0xa974>
   1bf20:	ldrb	r0, [r0, #7]
   1bf24:	cmp	r0, #0
   1bf28:	beq	1bf48 <__assert_fail@plt+0xa990>
   1bf2c:	movw	r1, #3970	; 0xf82
   1bf30:	movw	r0, #64581	; 0xfc45
   1bf34:	cmp	r4, #9
   1bf38:	movt	r1, #2
   1bf3c:	movt	r0, #1
   1bf40:	moveq	r0, r1
   1bf44:	pop	{r4, r5, fp, pc}
   1bf48:	ldrb	r1, [r5]
   1bf4c:	movw	r2, #6537	; 0x1989
   1bf50:	movw	r0, #6541	; 0x198d
   1bf54:	movt	r2, #2
   1bf58:	movt	r0, #2
   1bf5c:	cmp	r1, #96	; 0x60
   1bf60:	moveq	r0, r2
   1bf64:	pop	{r4, r5, fp, pc}
   1bf68:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1bf6c:	add	fp, sp, #24
   1bf70:	mov	r4, r0
   1bf74:	cmp	r0, #0
   1bf78:	beq	1bf9c <__assert_fail@plt+0xa9e4>
   1bf7c:	mov	r0, r4
   1bf80:	bl	11468 <strlen@plt>
   1bf84:	add	r5, r0, #1
   1bf88:	cmp	r5, #58	; 0x3a
   1bf8c:	bls	1bfa0 <__assert_fail@plt+0xa9e8>
   1bf90:	add	r0, r0, #10
   1bf94:	bic	r0, r0, #3
   1bf98:	b	1bfa4 <__assert_fail@plt+0xa9ec>
   1bf9c:	mov	r5, #0
   1bfa0:	mov	r0, #64	; 0x40
   1bfa4:	bl	1d208 <__assert_fail@plt+0xbc50>
   1bfa8:	mov	r6, r0
   1bfac:	cmp	r0, #0
   1bfb0:	beq	1bfec <__assert_fail@plt+0xaa34>
   1bfb4:	cmp	r4, #0
   1bfb8:	mov	r0, r4
   1bfbc:	mov	r8, #0
   1bfc0:	mov	r7, r6
   1bfc4:	movwne	r0, #1
   1bfc8:	str	r8, [r6]
   1bfcc:	strb	r0, [r6, #4]
   1bfd0:	strb	r8, [r7, #5]!
   1bfd4:	beq	1bfec <__assert_fail@plt+0xaa34>
   1bfd8:	mov	r0, r7
   1bfdc:	mov	r1, r4
   1bfe0:	mov	r2, r5
   1bfe4:	bl	112f4 <memcpy@plt>
   1bfe8:	strb	r8, [r7, r5]
   1bfec:	mov	r0, r6
   1bff0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1bff4:	push	{r4, sl, fp, lr}
   1bff8:	add	fp, sp, #8
   1bffc:	cmp	r0, #2
   1c000:	popcc	{r4, sl, fp, pc}
   1c004:	ldr	r4, [r0]
   1c008:	bl	1d408 <__assert_fail@plt+0xbe50>
   1c00c:	cmp	r4, #0
   1c010:	mov	r0, r4
   1c014:	bne	1c004 <__assert_fail@plt+0xaa4c>
   1c018:	pop	{r4, sl, fp, pc}
   1c01c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c020:	add	fp, sp, #28
   1c024:	sub	sp, sp, #4
   1c028:	mov	sl, r2
   1c02c:	mov	r7, r1
   1c030:	cmp	r0, #0
   1c034:	beq	1c0fc <__assert_fail@plt+0xab44>
   1c038:	mov	r6, r0
   1c03c:	bl	1c144 <__assert_fail@plt+0xab8c>
   1c040:	cmp	r0, #0
   1c044:	beq	1c110 <__assert_fail@plt+0xab58>
   1c048:	mov	r4, r0
   1c04c:	mov	r0, r7
   1c050:	mov	r1, sl
   1c054:	bl	1133c <localtime_r@plt>
   1c058:	mov	r7, #1
   1c05c:	cmp	r0, #0
   1c060:	mov	r9, #1
   1c064:	beq	1c078 <__assert_fail@plt+0xaac0>
   1c068:	mov	r0, r6
   1c06c:	mov	r1, sl
   1c070:	bl	1c290 <__assert_fail@plt+0xacd8>
   1c074:	eor	r9, r0, #1
   1c078:	cmp	r4, #1
   1c07c:	beq	1c0e0 <__assert_fail@plt+0xab28>
   1c080:	bl	1148c <__errno_location@plt>
   1c084:	mov	r6, r0
   1c088:	ldr	r8, [r0]
   1c08c:	ldrb	r0, [r4, #4]
   1c090:	cmp	r0, #0
   1c094:	beq	1c11c <__assert_fail@plt+0xab64>
   1c098:	movw	r0, #3098	; 0xc1a
   1c09c:	add	r1, r4, #5
   1c0a0:	mov	r2, #1
   1c0a4:	movt	r0, #2
   1c0a8:	bl	11480 <setenv@plt>
   1c0ac:	cmp	r0, #0
   1c0b0:	beq	1c130 <__assert_fail@plt+0xab78>
   1c0b4:	ldr	r8, [r6]
   1c0b8:	mov	r7, #0
   1c0bc:	cmp	r4, #2
   1c0c0:	bcc	1c0dc <__assert_fail@plt+0xab24>
   1c0c4:	ldr	r5, [r4]
   1c0c8:	mov	r0, r4
   1c0cc:	bl	1d408 <__assert_fail@plt+0xbe50>
   1c0d0:	cmp	r5, #0
   1c0d4:	mov	r4, r5
   1c0d8:	bne	1c0c4 <__assert_fail@plt+0xab0c>
   1c0dc:	str	r8, [r6]
   1c0e0:	cmp	r7, #0
   1c0e4:	moveq	sl, r7
   1c0e8:	cmp	r9, #0
   1c0ec:	movwne	sl, #0
   1c0f0:	mov	r0, sl
   1c0f4:	sub	sp, fp, #28
   1c0f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c0fc:	mov	r0, r7
   1c100:	mov	r1, sl
   1c104:	sub	sp, fp, #28
   1c108:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c10c:	b	11288 <gmtime_r@plt>
   1c110:	mov	r0, #0
   1c114:	sub	sp, fp, #28
   1c118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c11c:	movw	r0, #3098	; 0xc1a
   1c120:	movt	r0, #2
   1c124:	bl	11564 <unsetenv@plt>
   1c128:	cmp	r0, #0
   1c12c:	bne	1c0b4 <__assert_fail@plt+0xaafc>
   1c130:	bl	11360 <tzset@plt>
   1c134:	mov	r7, #1
   1c138:	cmp	r4, #2
   1c13c:	bcs	1c0c4 <__assert_fail@plt+0xab0c>
   1c140:	b	1c0dc <__assert_fail@plt+0xab24>
   1c144:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c148:	add	fp, sp, #28
   1c14c:	sub	sp, sp, #4
   1c150:	mov	r4, r0
   1c154:	movw	r0, #3098	; 0xc1a
   1c158:	movt	r0, #2
   1c15c:	bl	113c0 <getenv@plt>
   1c160:	mov	r6, r0
   1c164:	ldrb	r0, [r4, #4]
   1c168:	cmp	r6, #0
   1c16c:	beq	1c1b0 <__assert_fail@plt+0xabf8>
   1c170:	cmp	r0, #0
   1c174:	beq	1c18c <__assert_fail@plt+0xabd4>
   1c178:	add	r0, r4, #5
   1c17c:	mov	r1, r6
   1c180:	bl	112a0 <strcmp@plt>
   1c184:	cmp	r0, #0
   1c188:	beq	1c264 <__assert_fail@plt+0xacac>
   1c18c:	mov	r0, r6
   1c190:	bl	11468 <strlen@plt>
   1c194:	add	r8, r0, #1
   1c198:	mov	r9, #1
   1c19c:	cmp	r8, #58	; 0x3a
   1c1a0:	bls	1c1c0 <__assert_fail@plt+0xac08>
   1c1a4:	add	r0, r0, #10
   1c1a8:	bic	r0, r0, #3
   1c1ac:	b	1c1c4 <__assert_fail@plt+0xac0c>
   1c1b0:	mov	r9, #0
   1c1b4:	cmp	r0, #0
   1c1b8:	mov	r8, #0
   1c1bc:	beq	1c264 <__assert_fail@plt+0xacac>
   1c1c0:	mov	r0, #64	; 0x40
   1c1c4:	bl	1d208 <__assert_fail@plt+0xbc50>
   1c1c8:	cmp	r0, #0
   1c1cc:	beq	1c25c <__assert_fail@plt+0xaca4>
   1c1d0:	mov	sl, #0
   1c1d4:	mov	r7, r0
   1c1d8:	strb	r9, [r0, #4]
   1c1dc:	mov	r5, r0
   1c1e0:	cmp	r9, #0
   1c1e4:	str	sl, [r0]
   1c1e8:	strb	sl, [r7, #5]!
   1c1ec:	beq	1c204 <__assert_fail@plt+0xac4c>
   1c1f0:	mov	r0, r7
   1c1f4:	mov	r1, r6
   1c1f8:	mov	r2, r8
   1c1fc:	bl	112f4 <memcpy@plt>
   1c200:	strb	sl, [r7, r8]
   1c204:	ldrb	r0, [r4, #4]
   1c208:	cmp	r0, #0
   1c20c:	beq	1c26c <__assert_fail@plt+0xacb4>
   1c210:	movw	r0, #3098	; 0xc1a
   1c214:	add	r1, r4, #5
   1c218:	mov	r2, #1
   1c21c:	movt	r0, #2
   1c220:	bl	11480 <setenv@plt>
   1c224:	cmp	r0, #0
   1c228:	beq	1c280 <__assert_fail@plt+0xacc8>
   1c22c:	bl	1148c <__errno_location@plt>
   1c230:	ldr	r6, [r0]
   1c234:	mov	r4, r0
   1c238:	cmp	r5, #2
   1c23c:	bcc	1c258 <__assert_fail@plt+0xaca0>
   1c240:	ldr	r7, [r5]
   1c244:	mov	r0, r5
   1c248:	bl	1d408 <__assert_fail@plt+0xbe50>
   1c24c:	cmp	r7, #0
   1c250:	mov	r5, r7
   1c254:	bne	1c240 <__assert_fail@plt+0xac88>
   1c258:	str	r6, [r4]
   1c25c:	mov	r5, #0
   1c260:	b	1c284 <__assert_fail@plt+0xaccc>
   1c264:	mov	r5, #1
   1c268:	b	1c284 <__assert_fail@plt+0xaccc>
   1c26c:	movw	r0, #3098	; 0xc1a
   1c270:	movt	r0, #2
   1c274:	bl	11564 <unsetenv@plt>
   1c278:	cmp	r0, #0
   1c27c:	bne	1c22c <__assert_fail@plt+0xac74>
   1c280:	bl	11360 <tzset@plt>
   1c284:	mov	r0, r5
   1c288:	sub	sp, fp, #28
   1c28c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c290:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c294:	add	fp, sp, #28
   1c298:	sub	sp, sp, #4
   1c29c:	ldr	r7, [r1, #40]	; 0x28
   1c2a0:	mov	r8, #1
   1c2a4:	cmp	r7, #0
   1c2a8:	beq	1c348 <__assert_fail@plt+0xad90>
   1c2ac:	mov	r5, r1
   1c2b0:	mov	r6, r0
   1c2b4:	cmp	r7, r1
   1c2b8:	bcc	1c2c8 <__assert_fail@plt+0xad10>
   1c2bc:	add	r0, r5, #44	; 0x2c
   1c2c0:	cmp	r7, r0
   1c2c4:	bcc	1c348 <__assert_fail@plt+0xad90>
   1c2c8:	ldrb	r0, [r7]
   1c2cc:	cmp	r0, #0
   1c2d0:	beq	1c33c <__assert_fail@plt+0xad84>
   1c2d4:	add	r4, r6, #5
   1c2d8:	mov	r0, r4
   1c2dc:	mov	r1, r7
   1c2e0:	bl	112a0 <strcmp@plt>
   1c2e4:	cmp	r0, #0
   1c2e8:	beq	1c344 <__assert_fail@plt+0xad8c>
   1c2ec:	ldrb	r0, [r4]
   1c2f0:	cmp	r0, #0
   1c2f4:	bne	1c310 <__assert_fail@plt+0xad58>
   1c2f8:	add	r0, r6, #5
   1c2fc:	cmp	r4, r0
   1c300:	bne	1c354 <__assert_fail@plt+0xad9c>
   1c304:	ldrb	r0, [r6, #4]
   1c308:	cmp	r0, #0
   1c30c:	beq	1c354 <__assert_fail@plt+0xad9c>
   1c310:	mov	r0, r4
   1c314:	bl	11468 <strlen@plt>
   1c318:	add	r4, r0, r4
   1c31c:	ldrb	r0, [r4, #1]!
   1c320:	cmp	r0, #0
   1c324:	bne	1c2d8 <__assert_fail@plt+0xad20>
   1c328:	ldr	r0, [r6]
   1c32c:	cmp	r0, #0
   1c330:	addne	r4, r0, #5
   1c334:	movne	r6, r0
   1c338:	b	1c2d8 <__assert_fail@plt+0xad20>
   1c33c:	movw	r4, #6017	; 0x1781
   1c340:	movt	r4, #2
   1c344:	str	r4, [r5, #40]	; 0x28
   1c348:	mov	r0, r8
   1c34c:	sub	sp, fp, #28
   1c350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c354:	sub	r0, r6, r4
   1c358:	add	sl, r0, #64	; 0x40
   1c35c:	mov	r0, r7
   1c360:	bl	11468 <strlen@plt>
   1c364:	add	r9, r0, #1
   1c368:	cmp	r9, sl
   1c36c:	bge	1c38c <__assert_fail@plt+0xadd4>
   1c370:	mov	r0, r4
   1c374:	mov	r1, r7
   1c378:	mov	r2, r9
   1c37c:	bl	112f4 <memcpy@plt>
   1c380:	mov	r0, #0
   1c384:	strb	r0, [r4, r9]
   1c388:	b	1c344 <__assert_fail@plt+0xad8c>
   1c38c:	add	r0, r0, #10
   1c390:	cmp	r9, #59	; 0x3b
   1c394:	bic	r0, r0, #3
   1c398:	movwcc	r0, #64	; 0x40
   1c39c:	bl	1d208 <__assert_fail@plt+0xbc50>
   1c3a0:	cmp	r0, #0
   1c3a4:	beq	1c3e4 <__assert_fail@plt+0xae2c>
   1c3a8:	mov	sl, r0
   1c3ac:	mov	r0, #1
   1c3b0:	mov	r1, r7
   1c3b4:	mov	r2, r9
   1c3b8:	strh	r0, [sl, #4]
   1c3bc:	mov	r0, #0
   1c3c0:	add	r4, sl, #5
   1c3c4:	str	r0, [sl]
   1c3c8:	mov	r0, r4
   1c3cc:	bl	112f4 <memcpy@plt>
   1c3d0:	mov	r0, #0
   1c3d4:	strb	r0, [r4, r9]
   1c3d8:	str	sl, [r6]
   1c3dc:	strb	r0, [sl, #4]
   1c3e0:	b	1c344 <__assert_fail@plt+0xad8c>
   1c3e4:	mov	r8, #0
   1c3e8:	str	r8, [r6]
   1c3ec:	b	1c348 <__assert_fail@plt+0xad90>
   1c3f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c3f4:	add	fp, sp, #28
   1c3f8:	sub	sp, sp, #52	; 0x34
   1c3fc:	mov	r4, r1
   1c400:	cmp	r0, #0
   1c404:	beq	1c510 <__assert_fail@plt+0xaf58>
   1c408:	mov	r6, r0
   1c40c:	bl	1c144 <__assert_fail@plt+0xab8c>
   1c410:	cmp	r0, #0
   1c414:	beq	1c508 <__assert_fail@plt+0xaf50>
   1c418:	mov	r8, r0
   1c41c:	mov	r0, #32
   1c420:	mov	r1, r4
   1c424:	add	r5, sp, #8
   1c428:	vld1.32	{d16-d17}, [r1], r0
   1c42c:	mov	r2, r5
   1c430:	vst1.32	{d16-d17}, [r2], r0
   1c434:	ldr	r0, [r4, #16]
   1c438:	ldr	r3, [r4, #20]
   1c43c:	str	r0, [sp, #24]
   1c440:	mvn	r0, #0
   1c444:	str	r0, [sp, #36]	; 0x24
   1c448:	str	r3, [sp, #28]
   1c44c:	ldr	r0, [r1]
   1c450:	str	r0, [r2]
   1c454:	mov	r0, r5
   1c458:	bl	112b8 <mktime@plt>
   1c45c:	mov	r9, r0
   1c460:	ldr	r0, [sp, #36]	; 0x24
   1c464:	mov	sl, #1
   1c468:	mov	r1, #1
   1c46c:	cmp	r0, #0
   1c470:	bmi	1c484 <__assert_fail@plt+0xaecc>
   1c474:	add	r1, sp, #8
   1c478:	mov	r0, r6
   1c47c:	bl	1c290 <__assert_fail@plt+0xacd8>
   1c480:	eor	r1, r0, #1
   1c484:	cmp	r8, #1
   1c488:	beq	1c4fc <__assert_fail@plt+0xaf44>
   1c48c:	str	r1, [sp, #4]
   1c490:	bl	1148c <__errno_location@plt>
   1c494:	mov	r6, r0
   1c498:	ldr	r7, [r0]
   1c49c:	ldrb	r0, [r8, #4]
   1c4a0:	cmp	r0, #0
   1c4a4:	beq	1c550 <__assert_fail@plt+0xaf98>
   1c4a8:	movw	r0, #3098	; 0xc1a
   1c4ac:	add	r1, r8, #5
   1c4b0:	mov	r2, #1
   1c4b4:	movt	r0, #2
   1c4b8:	bl	11480 <setenv@plt>
   1c4bc:	cmp	r0, #0
   1c4c0:	beq	1c564 <__assert_fail@plt+0xafac>
   1c4c4:	ldr	r0, [r6]
   1c4c8:	mov	sl, #0
   1c4cc:	str	r0, [sp]
   1c4d0:	cmp	r8, #2
   1c4d4:	bcc	1c4f0 <__assert_fail@plt+0xaf38>
   1c4d8:	ldr	r7, [r8]
   1c4dc:	mov	r0, r8
   1c4e0:	bl	1d408 <__assert_fail@plt+0xbe50>
   1c4e4:	cmp	r7, #0
   1c4e8:	mov	r8, r7
   1c4ec:	bne	1c4d8 <__assert_fail@plt+0xaf20>
   1c4f0:	ldr	r0, [sp]
   1c4f4:	ldr	r1, [sp, #4]
   1c4f8:	str	r0, [r6]
   1c4fc:	eor	r0, sl, #1
   1c500:	orrs	r0, r1, r0
   1c504:	beq	1c520 <__assert_fail@plt+0xaf68>
   1c508:	mvn	r9, #0
   1c50c:	b	1c544 <__assert_fail@plt+0xaf8c>
   1c510:	mov	r0, r4
   1c514:	sub	sp, fp, #28
   1c518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c51c:	b	11534 <timegm@plt>
   1c520:	mov	r0, #28
   1c524:	add	r1, r5, #16
   1c528:	vld1.32	{d16-d17}, [r5], r0
   1c52c:	vld1.64	{d18-d19}, [r1]
   1c530:	add	r1, r4, #16
   1c534:	vld1.32	{d20-d21}, [r5]
   1c538:	vst1.32	{d16-d17}, [r4], r0
   1c53c:	vst1.32	{d18-d19}, [r1]
   1c540:	vst1.32	{d20-d21}, [r4]
   1c544:	mov	r0, r9
   1c548:	sub	sp, fp, #28
   1c54c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c550:	movw	r0, #3098	; 0xc1a
   1c554:	movt	r0, #2
   1c558:	bl	11564 <unsetenv@plt>
   1c55c:	cmp	r0, #0
   1c560:	bne	1c4c4 <__assert_fail@plt+0xaf0c>
   1c564:	str	r7, [sp]
   1c568:	bl	11360 <tzset@plt>
   1c56c:	mov	sl, #1
   1c570:	cmp	r8, #2
   1c574:	bcs	1c4d8 <__assert_fail@plt+0xaf20>
   1c578:	b	1c4f0 <__assert_fail@plt+0xaf38>
   1c57c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c580:	add	fp, sp, #24
   1c584:	sub	sp, sp, #32
   1c588:	ldr	r6, [fp, #12]
   1c58c:	ldr	r7, [fp, #8]
   1c590:	mov	r4, r2
   1c594:	mov	r8, r0
   1c598:	cmp	r1, #0
   1c59c:	beq	1c5c4 <__assert_fail@plt+0xb00c>
   1c5a0:	movw	r2, #6628	; 0x19e4
   1c5a4:	mov	r5, r1
   1c5a8:	str	r3, [sp, #4]
   1c5ac:	str	r4, [sp]
   1c5b0:	mov	r0, r8
   1c5b4:	mov	r1, #1
   1c5b8:	movt	r2, #2
   1c5bc:	mov	r3, r5
   1c5c0:	b	1c5dc <__assert_fail@plt+0xb024>
   1c5c4:	movw	r2, #6640	; 0x19f0
   1c5c8:	str	r3, [sp]
   1c5cc:	mov	r0, r8
   1c5d0:	mov	r1, #1
   1c5d4:	mov	r3, r4
   1c5d8:	movt	r2, #2
   1c5dc:	bl	114d4 <__fprintf_chk@plt>
   1c5e0:	movw	r1, #6647	; 0x19f7
   1c5e4:	mov	r0, #0
   1c5e8:	mov	r2, #5
   1c5ec:	movt	r1, #2
   1c5f0:	bl	11318 <dcgettext@plt>
   1c5f4:	movw	r2, #7365	; 0x1cc5
   1c5f8:	mov	r3, r0
   1c5fc:	movw	r0, #2022	; 0x7e6
   1c600:	mov	r1, #1
   1c604:	movt	r2, #2
   1c608:	str	r0, [sp]
   1c60c:	mov	r0, r8
   1c610:	bl	114d4 <__fprintf_chk@plt>
   1c614:	movw	r4, #6016	; 0x1780
   1c618:	mov	r1, r8
   1c61c:	movt	r4, #2
   1c620:	mov	r0, r4
   1c624:	bl	11270 <fputs_unlocked@plt>
   1c628:	movw	r1, #6651	; 0x19fb
   1c62c:	mov	r0, #0
   1c630:	mov	r2, #5
   1c634:	movt	r1, #2
   1c638:	bl	11318 <dcgettext@plt>
   1c63c:	movw	r3, #6822	; 0x1aa6
   1c640:	mov	r2, r0
   1c644:	mov	r0, r8
   1c648:	mov	r1, #1
   1c64c:	movt	r3, #2
   1c650:	bl	114d4 <__fprintf_chk@plt>
   1c654:	mov	r0, r4
   1c658:	mov	r1, r8
   1c65c:	bl	11270 <fputs_unlocked@plt>
   1c660:	cmp	r6, #9
   1c664:	bhi	1c6a0 <__assert_fail@plt+0xb0e8>
   1c668:	add	r0, pc, #0
   1c66c:	ldr	pc, [r0, r6, lsl #2]
   1c670:	muleq	r1, r8, r6
   1c674:	andeq	ip, r1, ip, lsr #13
   1c678:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c67c:	andeq	ip, r1, r4, lsl #14
   1c680:	andeq	ip, r1, ip, lsr #14
   1c684:	andeq	ip, r1, r4, asr r7
   1c688:	andeq	ip, r1, ip, ror r7
   1c68c:			; <UNDEFINED> instruction: 0x0001c7b4
   1c690:	andeq	ip, r1, r4, asr r8
   1c694:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c698:	sub	sp, fp, #24
   1c69c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c6a0:	movw	r1, #7175	; 0x1c07
   1c6a4:	movt	r1, #2
   1c6a8:	b	1c804 <__assert_fail@plt+0xb24c>
   1c6ac:	movw	r1, #6856	; 0x1ac8
   1c6b0:	mov	r0, #0
   1c6b4:	mov	r2, #5
   1c6b8:	movt	r1, #2
   1c6bc:	bl	11318 <dcgettext@plt>
   1c6c0:	ldr	r3, [r7]
   1c6c4:	mov	r2, r0
   1c6c8:	mov	r0, r8
   1c6cc:	mov	r1, #1
   1c6d0:	sub	sp, fp, #24
   1c6d4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1c6d8:	b	114d4 <__fprintf_chk@plt>
   1c6dc:	movw	r1, #6872	; 0x1ad8
   1c6e0:	mov	r0, #0
   1c6e4:	mov	r2, #5
   1c6e8:	movt	r1, #2
   1c6ec:	bl	11318 <dcgettext@plt>
   1c6f0:	mov	r2, r0
   1c6f4:	ldr	r3, [r7]
   1c6f8:	ldr	r0, [r7, #4]
   1c6fc:	str	r0, [sp]
   1c700:	b	1c7f0 <__assert_fail@plt+0xb238>
   1c704:	movw	r1, #6895	; 0x1aef
   1c708:	mov	r0, #0
   1c70c:	mov	r2, #5
   1c710:	movt	r1, #2
   1c714:	bl	11318 <dcgettext@plt>
   1c718:	mov	r2, r0
   1c71c:	ldr	r3, [r7]
   1c720:	ldmib	r7, {r0, r1}
   1c724:	stm	sp, {r0, r1}
   1c728:	b	1c7f0 <__assert_fail@plt+0xb238>
   1c72c:	movw	r1, #6923	; 0x1b0b
   1c730:	mov	r0, #0
   1c734:	mov	r2, #5
   1c738:	movt	r1, #2
   1c73c:	bl	11318 <dcgettext@plt>
   1c740:	ldr	r3, [r7]
   1c744:	mov	r2, r0
   1c748:	ldmib	r7, {r0, r1, r7}
   1c74c:	stm	sp, {r0, r1, r7}
   1c750:	b	1c7f0 <__assert_fail@plt+0xb238>
   1c754:	movw	r1, #6955	; 0x1b2b
   1c758:	mov	r0, #0
   1c75c:	mov	r2, #5
   1c760:	movt	r1, #2
   1c764:	bl	11318 <dcgettext@plt>
   1c768:	ldr	r3, [r7]
   1c76c:	mov	r2, r0
   1c770:	ldmib	r7, {r0, r1, r6, r7}
   1c774:	stm	sp, {r0, r1, r6, r7}
   1c778:	b	1c7f0 <__assert_fail@plt+0xb238>
   1c77c:	movw	r1, #6991	; 0x1b4f
   1c780:	mov	r0, #0
   1c784:	mov	r2, #5
   1c788:	movt	r1, #2
   1c78c:	bl	11318 <dcgettext@plt>
   1c790:	mov	r2, r0
   1c794:	ldr	r3, [r7]
   1c798:	ldmib	r7, {r0, r1, r6}
   1c79c:	ldr	r5, [r7, #16]
   1c7a0:	ldr	r7, [r7, #20]
   1c7a4:	stm	sp, {r0, r1, r6}
   1c7a8:	str	r5, [sp, #12]
   1c7ac:	str	r7, [sp, #16]
   1c7b0:	b	1c7f0 <__assert_fail@plt+0xb238>
   1c7b4:	movw	r1, #7031	; 0x1b77
   1c7b8:	mov	r0, #0
   1c7bc:	mov	r2, #5
   1c7c0:	movt	r1, #2
   1c7c4:	bl	11318 <dcgettext@plt>
   1c7c8:	mov	r2, r0
   1c7cc:	ldr	r3, [r7]
   1c7d0:	ldmib	r7, {r0, r1, r6}
   1c7d4:	ldr	r5, [r7, #16]
   1c7d8:	ldr	r4, [r7, #20]
   1c7dc:	ldr	r7, [r7, #24]
   1c7e0:	stm	sp, {r0, r1, r6}
   1c7e4:	str	r5, [sp, #12]
   1c7e8:	str	r4, [sp, #16]
   1c7ec:	str	r7, [sp, #20]
   1c7f0:	mov	r0, r8
   1c7f4:	mov	r1, #1
   1c7f8:	b	1c8a4 <__assert_fail@plt+0xb2ec>
   1c7fc:	movw	r1, #7123	; 0x1bd3
   1c800:	movt	r1, #2
   1c804:	mov	r0, #0
   1c808:	mov	r2, #5
   1c80c:	bl	11318 <dcgettext@plt>
   1c810:	mov	ip, r0
   1c814:	ldr	r3, [r7]
   1c818:	ldr	r0, [r7, #4]
   1c81c:	ldr	r1, [r7, #8]
   1c820:	ldr	r6, [r7, #12]
   1c824:	ldr	r5, [r7, #16]
   1c828:	ldr	r4, [r7, #20]
   1c82c:	ldr	r2, [r7, #24]
   1c830:	ldr	lr, [r7, #28]
   1c834:	ldr	r7, [r7, #32]
   1c838:	stm	sp, {r0, r1, r6}
   1c83c:	str	r5, [sp, #12]
   1c840:	str	r4, [sp, #16]
   1c844:	str	r2, [sp, #20]
   1c848:	str	lr, [sp, #24]
   1c84c:	str	r7, [sp, #28]
   1c850:	b	1c898 <__assert_fail@plt+0xb2e0>
   1c854:	movw	r1, #7075	; 0x1ba3
   1c858:	mov	r0, #0
   1c85c:	mov	r2, #5
   1c860:	movt	r1, #2
   1c864:	bl	11318 <dcgettext@plt>
   1c868:	mov	ip, r0
   1c86c:	ldr	r3, [r7]
   1c870:	ldmib	r7, {r0, r1, r6}
   1c874:	ldr	r5, [r7, #16]
   1c878:	ldr	r4, [r7, #20]
   1c87c:	ldr	r2, [r7, #24]
   1c880:	ldr	r7, [r7, #28]
   1c884:	stm	sp, {r0, r1, r6}
   1c888:	str	r5, [sp, #12]
   1c88c:	str	r4, [sp, #16]
   1c890:	str	r2, [sp, #20]
   1c894:	str	r7, [sp, #24]
   1c898:	mov	r0, r8
   1c89c:	mov	r1, #1
   1c8a0:	mov	r2, ip
   1c8a4:	bl	114d4 <__fprintf_chk@plt>
   1c8a8:	sub	sp, fp, #24
   1c8ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1c8b0:	push	{r4, sl, fp, lr}
   1c8b4:	add	fp, sp, #8
   1c8b8:	sub	sp, sp, #8
   1c8bc:	ldr	ip, [fp, #8]
   1c8c0:	mov	lr, #0
   1c8c4:	ldr	r4, [ip, lr, lsl #2]
   1c8c8:	add	lr, lr, #1
   1c8cc:	cmp	r4, #0
   1c8d0:	bne	1c8c4 <__assert_fail@plt+0xb30c>
   1c8d4:	sub	r4, lr, #1
   1c8d8:	str	ip, [sp]
   1c8dc:	str	r4, [sp, #4]
   1c8e0:	bl	1c57c <__assert_fail@plt+0xafc4>
   1c8e4:	sub	sp, fp, #8
   1c8e8:	pop	{r4, sl, fp, pc}
   1c8ec:	push	{fp, lr}
   1c8f0:	mov	fp, sp
   1c8f4:	sub	sp, sp, #48	; 0x30
   1c8f8:	ldr	ip, [fp, #8]
   1c8fc:	ldr	lr, [ip]
   1c900:	cmp	lr, #0
   1c904:	str	lr, [sp, #8]
   1c908:	beq	1c9a4 <__assert_fail@plt+0xb3ec>
   1c90c:	ldr	lr, [ip, #4]
   1c910:	cmp	lr, #0
   1c914:	str	lr, [sp, #12]
   1c918:	beq	1c9ac <__assert_fail@plt+0xb3f4>
   1c91c:	ldr	lr, [ip, #8]
   1c920:	cmp	lr, #0
   1c924:	str	lr, [sp, #16]
   1c928:	beq	1c9b4 <__assert_fail@plt+0xb3fc>
   1c92c:	ldr	lr, [ip, #12]
   1c930:	cmp	lr, #0
   1c934:	str	lr, [sp, #20]
   1c938:	beq	1c9bc <__assert_fail@plt+0xb404>
   1c93c:	ldr	lr, [ip, #16]
   1c940:	cmp	lr, #0
   1c944:	str	lr, [sp, #24]
   1c948:	beq	1c9c4 <__assert_fail@plt+0xb40c>
   1c94c:	ldr	lr, [ip, #20]
   1c950:	cmp	lr, #0
   1c954:	str	lr, [sp, #28]
   1c958:	beq	1c9cc <__assert_fail@plt+0xb414>
   1c95c:	ldr	lr, [ip, #24]
   1c960:	cmp	lr, #0
   1c964:	str	lr, [sp, #32]
   1c968:	beq	1c9d4 <__assert_fail@plt+0xb41c>
   1c96c:	ldr	lr, [ip, #28]
   1c970:	cmp	lr, #0
   1c974:	str	lr, [sp, #36]	; 0x24
   1c978:	beq	1c9dc <__assert_fail@plt+0xb424>
   1c97c:	ldr	lr, [ip, #32]
   1c980:	cmp	lr, #0
   1c984:	str	lr, [sp, #40]	; 0x28
   1c988:	beq	1c9e4 <__assert_fail@plt+0xb42c>
   1c98c:	ldr	lr, [ip, #36]	; 0x24
   1c990:	mov	ip, #10
   1c994:	cmp	lr, #0
   1c998:	str	lr, [sp, #44]	; 0x2c
   1c99c:	movweq	ip, #9
   1c9a0:	b	1c9e8 <__assert_fail@plt+0xb430>
   1c9a4:	mov	ip, #0
   1c9a8:	b	1c9e8 <__assert_fail@plt+0xb430>
   1c9ac:	mov	ip, #1
   1c9b0:	b	1c9e8 <__assert_fail@plt+0xb430>
   1c9b4:	mov	ip, #2
   1c9b8:	b	1c9e8 <__assert_fail@plt+0xb430>
   1c9bc:	mov	ip, #3
   1c9c0:	b	1c9e8 <__assert_fail@plt+0xb430>
   1c9c4:	mov	ip, #4
   1c9c8:	b	1c9e8 <__assert_fail@plt+0xb430>
   1c9cc:	mov	ip, #5
   1c9d0:	b	1c9e8 <__assert_fail@plt+0xb430>
   1c9d4:	mov	ip, #6
   1c9d8:	b	1c9e8 <__assert_fail@plt+0xb430>
   1c9dc:	mov	ip, #7
   1c9e0:	b	1c9e8 <__assert_fail@plt+0xb430>
   1c9e4:	mov	ip, #8
   1c9e8:	add	lr, sp, #8
   1c9ec:	str	ip, [sp, #4]
   1c9f0:	str	lr, [sp]
   1c9f4:	bl	1c57c <__assert_fail@plt+0xafc4>
   1c9f8:	mov	sp, fp
   1c9fc:	pop	{fp, pc}
   1ca00:	push	{fp, lr}
   1ca04:	mov	fp, sp
   1ca08:	sub	sp, sp, #56	; 0x38
   1ca0c:	add	ip, fp, #8
   1ca10:	str	ip, [sp, #12]
   1ca14:	ldr	lr, [fp, #8]
   1ca18:	cmp	lr, #0
   1ca1c:	str	lr, [sp, #16]
   1ca20:	beq	1cabc <__assert_fail@plt+0xb504>
   1ca24:	ldr	lr, [ip, #4]
   1ca28:	cmp	lr, #0
   1ca2c:	str	lr, [sp, #20]
   1ca30:	beq	1cac4 <__assert_fail@plt+0xb50c>
   1ca34:	ldr	lr, [ip, #8]
   1ca38:	cmp	lr, #0
   1ca3c:	str	lr, [sp, #24]
   1ca40:	beq	1cacc <__assert_fail@plt+0xb514>
   1ca44:	ldr	lr, [ip, #12]
   1ca48:	cmp	lr, #0
   1ca4c:	str	lr, [sp, #28]
   1ca50:	beq	1cad4 <__assert_fail@plt+0xb51c>
   1ca54:	ldr	lr, [ip, #16]
   1ca58:	cmp	lr, #0
   1ca5c:	str	lr, [sp, #32]
   1ca60:	beq	1cadc <__assert_fail@plt+0xb524>
   1ca64:	ldr	lr, [ip, #20]
   1ca68:	cmp	lr, #0
   1ca6c:	str	lr, [sp, #36]	; 0x24
   1ca70:	beq	1cae4 <__assert_fail@plt+0xb52c>
   1ca74:	ldr	lr, [ip, #24]
   1ca78:	cmp	lr, #0
   1ca7c:	str	lr, [sp, #40]	; 0x28
   1ca80:	beq	1caec <__assert_fail@plt+0xb534>
   1ca84:	ldr	lr, [ip, #28]
   1ca88:	cmp	lr, #0
   1ca8c:	str	lr, [sp, #44]	; 0x2c
   1ca90:	beq	1caf4 <__assert_fail@plt+0xb53c>
   1ca94:	ldr	lr, [ip, #32]
   1ca98:	cmp	lr, #0
   1ca9c:	str	lr, [sp, #48]	; 0x30
   1caa0:	beq	1cafc <__assert_fail@plt+0xb544>
   1caa4:	ldr	lr, [ip, #36]	; 0x24
   1caa8:	mov	ip, #10
   1caac:	cmp	lr, #0
   1cab0:	str	lr, [sp, #52]	; 0x34
   1cab4:	movweq	ip, #9
   1cab8:	b	1cb00 <__assert_fail@plt+0xb548>
   1cabc:	mov	ip, #0
   1cac0:	b	1cb00 <__assert_fail@plt+0xb548>
   1cac4:	mov	ip, #1
   1cac8:	b	1cb00 <__assert_fail@plt+0xb548>
   1cacc:	mov	ip, #2
   1cad0:	b	1cb00 <__assert_fail@plt+0xb548>
   1cad4:	mov	ip, #3
   1cad8:	b	1cb00 <__assert_fail@plt+0xb548>
   1cadc:	mov	ip, #4
   1cae0:	b	1cb00 <__assert_fail@plt+0xb548>
   1cae4:	mov	ip, #5
   1cae8:	b	1cb00 <__assert_fail@plt+0xb548>
   1caec:	mov	ip, #6
   1caf0:	b	1cb00 <__assert_fail@plt+0xb548>
   1caf4:	mov	ip, #7
   1caf8:	b	1cb00 <__assert_fail@plt+0xb548>
   1cafc:	mov	ip, #8
   1cb00:	add	lr, sp, #16
   1cb04:	str	ip, [sp, #4]
   1cb08:	str	lr, [sp]
   1cb0c:	bl	1c57c <__assert_fail@plt+0xafc4>
   1cb10:	mov	sp, fp
   1cb14:	pop	{fp, pc}
   1cb18:	push	{fp, lr}
   1cb1c:	mov	fp, sp
   1cb20:	movw	r0, #8612	; 0x21a4
   1cb24:	movt	r0, #3
   1cb28:	ldr	r1, [r0]
   1cb2c:	movw	r0, #6016	; 0x1780
   1cb30:	movt	r0, #2
   1cb34:	bl	11270 <fputs_unlocked@plt>
   1cb38:	movw	r1, #7235	; 0x1c43
   1cb3c:	mov	r0, #0
   1cb40:	mov	r2, #5
   1cb44:	movt	r1, #2
   1cb48:	bl	11318 <dcgettext@plt>
   1cb4c:	movw	r2, #7255	; 0x1c57
   1cb50:	mov	r1, r0
   1cb54:	mov	r0, #1
   1cb58:	movt	r2, #2
   1cb5c:	bl	114bc <__printf_chk@plt>
   1cb60:	movw	r1, #7277	; 0x1c6d
   1cb64:	mov	r0, #0
   1cb68:	mov	r2, #5
   1cb6c:	movt	r1, #2
   1cb70:	bl	11318 <dcgettext@plt>
   1cb74:	movw	r2, #64334	; 0xfb4e
   1cb78:	movw	r3, #64797	; 0xfd1d
   1cb7c:	mov	r1, r0
   1cb80:	mov	r0, #1
   1cb84:	movt	r2, #1
   1cb88:	movt	r3, #1
   1cb8c:	bl	114bc <__printf_chk@plt>
   1cb90:	movw	r1, #7297	; 0x1c81
   1cb94:	mov	r0, #0
   1cb98:	mov	r2, #5
   1cb9c:	movt	r1, #2
   1cba0:	bl	11318 <dcgettext@plt>
   1cba4:	movw	r2, #7336	; 0x1ca8
   1cba8:	mov	r1, r0
   1cbac:	mov	r0, #1
   1cbb0:	movt	r2, #2
   1cbb4:	pop	{fp, lr}
   1cbb8:	b	114bc <__printf_chk@plt>
   1cbbc:	push	{r4, r5, r6, sl, fp, lr}
   1cbc0:	add	fp, sp, #16
   1cbc4:	mov	r4, r2
   1cbc8:	mov	r5, r1
   1cbcc:	mov	r6, r0
   1cbd0:	bl	1f1ac <__assert_fail@plt+0xdbf4>
   1cbd4:	cmp	r0, #0
   1cbd8:	popne	{r4, r5, r6, sl, fp, pc}
   1cbdc:	cmp	r6, #0
   1cbe0:	beq	1cbf4 <__assert_fail@plt+0xb63c>
   1cbe4:	cmp	r5, #0
   1cbe8:	cmpne	r4, #0
   1cbec:	bne	1cbf4 <__assert_fail@plt+0xb63c>
   1cbf0:	pop	{r4, r5, r6, sl, fp, pc}
   1cbf4:	bl	1d170 <__assert_fail@plt+0xbbb8>
   1cbf8:	push	{r4, r5, r6, sl, fp, lr}
   1cbfc:	add	fp, sp, #16
   1cc00:	mov	r4, r2
   1cc04:	mov	r5, r1
   1cc08:	mov	r6, r0
   1cc0c:	bl	1f1ac <__assert_fail@plt+0xdbf4>
   1cc10:	cmp	r0, #0
   1cc14:	popne	{r4, r5, r6, sl, fp, pc}
   1cc18:	cmp	r6, #0
   1cc1c:	beq	1cc30 <__assert_fail@plt+0xb678>
   1cc20:	cmp	r5, #0
   1cc24:	cmpne	r4, #0
   1cc28:	bne	1cc30 <__assert_fail@plt+0xb678>
   1cc2c:	pop	{r4, r5, r6, sl, fp, pc}
   1cc30:	bl	1d170 <__assert_fail@plt+0xbbb8>
   1cc34:	push	{fp, lr}
   1cc38:	mov	fp, sp
   1cc3c:	bl	1d208 <__assert_fail@plt+0xbc50>
   1cc40:	cmp	r0, #0
   1cc44:	popne	{fp, pc}
   1cc48:	bl	1d170 <__assert_fail@plt+0xbbb8>
   1cc4c:	push	{fp, lr}
   1cc50:	mov	fp, sp
   1cc54:	bl	1d208 <__assert_fail@plt+0xbc50>
   1cc58:	cmp	r0, #0
   1cc5c:	popne	{fp, pc}
   1cc60:	bl	1d170 <__assert_fail@plt+0xbbb8>
   1cc64:	push	{fp, lr}
   1cc68:	mov	fp, sp
   1cc6c:	bl	1d208 <__assert_fail@plt+0xbc50>
   1cc70:	cmp	r0, #0
   1cc74:	popne	{fp, pc}
   1cc78:	bl	1d170 <__assert_fail@plt+0xbbb8>
   1cc7c:	push	{r4, r5, fp, lr}
   1cc80:	add	fp, sp, #8
   1cc84:	mov	r4, r1
   1cc88:	mov	r5, r0
   1cc8c:	bl	1d238 <__assert_fail@plt+0xbc80>
   1cc90:	cmp	r0, #0
   1cc94:	popne	{r4, r5, fp, pc}
   1cc98:	cmp	r5, #0
   1cc9c:	beq	1ccac <__assert_fail@plt+0xb6f4>
   1cca0:	cmp	r4, #0
   1cca4:	bne	1ccac <__assert_fail@plt+0xb6f4>
   1cca8:	pop	{r4, r5, fp, pc}
   1ccac:	bl	1d170 <__assert_fail@plt+0xbbb8>
   1ccb0:	push	{fp, lr}
   1ccb4:	mov	fp, sp
   1ccb8:	cmp	r1, #0
   1ccbc:	orreq	r1, r1, #1
   1ccc0:	bl	1d238 <__assert_fail@plt+0xbc80>
   1ccc4:	cmp	r0, #0
   1ccc8:	popne	{fp, pc}
   1cccc:	bl	1d170 <__assert_fail@plt+0xbbb8>
   1ccd0:	push	{fp, lr}
   1ccd4:	mov	fp, sp
   1ccd8:	clz	r3, r2
   1ccdc:	lsr	ip, r3, #5
   1cce0:	clz	r3, r1
   1cce4:	lsr	r3, r3, #5
   1cce8:	orrs	r3, r3, ip
   1ccec:	movwne	r1, #1
   1ccf0:	movwne	r2, #1
   1ccf4:	bl	1f1ac <__assert_fail@plt+0xdbf4>
   1ccf8:	cmp	r0, #0
   1ccfc:	popne	{fp, pc}
   1cd00:	bl	1d170 <__assert_fail@plt+0xbbb8>
   1cd04:	push	{fp, lr}
   1cd08:	mov	fp, sp
   1cd0c:	mov	r2, r1
   1cd10:	mov	r1, r0
   1cd14:	mov	r0, #0
   1cd18:	bl	1f1ac <__assert_fail@plt+0xdbf4>
   1cd1c:	cmp	r0, #0
   1cd20:	popne	{fp, pc}
   1cd24:	bl	1d170 <__assert_fail@plt+0xbbb8>
   1cd28:	push	{fp, lr}
   1cd2c:	mov	fp, sp
   1cd30:	mov	r2, r1
   1cd34:	mov	r1, r0
   1cd38:	clz	r0, r2
   1cd3c:	clz	r3, r1
   1cd40:	lsr	r0, r0, #5
   1cd44:	lsr	r3, r3, #5
   1cd48:	orrs	r0, r3, r0
   1cd4c:	mov	r0, #0
   1cd50:	movwne	r1, #1
   1cd54:	movwne	r2, #1
   1cd58:	bl	1f1ac <__assert_fail@plt+0xdbf4>
   1cd5c:	cmp	r0, #0
   1cd60:	popne	{fp, pc}
   1cd64:	bl	1d170 <__assert_fail@plt+0xbbb8>
   1cd68:	push	{r4, r5, r6, sl, fp, lr}
   1cd6c:	add	fp, sp, #16
   1cd70:	ldr	r5, [r1]
   1cd74:	mov	r4, r1
   1cd78:	mov	r6, r0
   1cd7c:	cmp	r0, #0
   1cd80:	beq	1cd98 <__assert_fail@plt+0xb7e0>
   1cd84:	mov	r0, #1
   1cd88:	add	r0, r0, r5, lsr #1
   1cd8c:	adds	r5, r5, r0
   1cd90:	bcc	1cda0 <__assert_fail@plt+0xb7e8>
   1cd94:	b	1cddc <__assert_fail@plt+0xb824>
   1cd98:	cmp	r5, #0
   1cd9c:	movweq	r5, #64	; 0x40
   1cda0:	mov	r0, r6
   1cda4:	mov	r1, r5
   1cda8:	mov	r2, #1
   1cdac:	bl	1f1ac <__assert_fail@plt+0xdbf4>
   1cdb0:	cmp	r5, #0
   1cdb4:	mov	r1, r5
   1cdb8:	movwne	r1, #1
   1cdbc:	cmp	r0, #0
   1cdc0:	bne	1cdd4 <__assert_fail@plt+0xb81c>
   1cdc4:	clz	r2, r6
   1cdc8:	lsr	r2, r2, #5
   1cdcc:	orrs	r1, r2, r1
   1cdd0:	bne	1cddc <__assert_fail@plt+0xb824>
   1cdd4:	str	r5, [r4]
   1cdd8:	pop	{r4, r5, r6, sl, fp, pc}
   1cddc:	bl	1d170 <__assert_fail@plt+0xbbb8>
   1cde0:	push	{r4, r5, r6, r7, fp, lr}
   1cde4:	add	fp, sp, #16
   1cde8:	ldr	r5, [r1]
   1cdec:	mov	r6, r2
   1cdf0:	mov	r4, r1
   1cdf4:	mov	r7, r0
   1cdf8:	cmp	r0, #0
   1cdfc:	beq	1ce14 <__assert_fail@plt+0xb85c>
   1ce00:	mov	r0, #1
   1ce04:	add	r0, r0, r5, lsr #1
   1ce08:	adds	r5, r5, r0
   1ce0c:	bcc	1ce2c <__assert_fail@plt+0xb874>
   1ce10:	b	1ce60 <__assert_fail@plt+0xb8a8>
   1ce14:	cmp	r5, #0
   1ce18:	bne	1ce2c <__assert_fail@plt+0xb874>
   1ce1c:	mov	r0, #64	; 0x40
   1ce20:	cmp	r6, #64	; 0x40
   1ce24:	udiv	r5, r0, r6
   1ce28:	addhi	r5, r5, #1
   1ce2c:	mov	r0, r7
   1ce30:	mov	r1, r5
   1ce34:	mov	r2, r6
   1ce38:	bl	1f1ac <__assert_fail@plt+0xdbf4>
   1ce3c:	cmp	r0, #0
   1ce40:	bne	1ce58 <__assert_fail@plt+0xb8a0>
   1ce44:	cmp	r7, #0
   1ce48:	beq	1ce60 <__assert_fail@plt+0xb8a8>
   1ce4c:	cmp	r6, #0
   1ce50:	cmpne	r5, #0
   1ce54:	bne	1ce60 <__assert_fail@plt+0xb8a8>
   1ce58:	str	r5, [r4]
   1ce5c:	pop	{r4, r5, r6, r7, fp, pc}
   1ce60:	bl	1d170 <__assert_fail@plt+0xbbb8>
   1ce64:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ce68:	add	fp, sp, #24
   1ce6c:	mov	r8, r1
   1ce70:	ldr	r1, [r1]
   1ce74:	mov	r5, r0
   1ce78:	add	r0, r1, r1, asr #1
   1ce7c:	cmp	r0, r1
   1ce80:	mvnvs	r0, #-2147483648	; 0x80000000
   1ce84:	cmp	r0, r3
   1ce88:	mov	r7, r0
   1ce8c:	movgt	r7, r3
   1ce90:	cmn	r3, #1
   1ce94:	movle	r7, r0
   1ce98:	ldr	r0, [fp, #8]
   1ce9c:	cmn	r0, #1
   1cea0:	ble	1cec8 <__assert_fail@plt+0xb910>
   1cea4:	cmp	r0, #0
   1cea8:	beq	1cf1c <__assert_fail@plt+0xb964>
   1ceac:	cmn	r7, #1
   1ceb0:	ble	1cef0 <__assert_fail@plt+0xb938>
   1ceb4:	mvn	r4, #-2147483648	; 0x80000000
   1ceb8:	udiv	r6, r4, r0
   1cebc:	cmp	r6, r7
   1cec0:	bge	1cf1c <__assert_fail@plt+0xb964>
   1cec4:	b	1cf2c <__assert_fail@plt+0xb974>
   1cec8:	cmn	r7, #1
   1cecc:	ble	1cf0c <__assert_fail@plt+0xb954>
   1ced0:	cmn	r0, #1
   1ced4:	beq	1cf1c <__assert_fail@plt+0xb964>
   1ced8:	mov	r6, #-2147483648	; 0x80000000
   1cedc:	mvn	r4, #-2147483648	; 0x80000000
   1cee0:	sdiv	r6, r6, r0
   1cee4:	cmp	r6, r7
   1cee8:	bge	1cf1c <__assert_fail@plt+0xb964>
   1ceec:	b	1cf2c <__assert_fail@plt+0xb974>
   1cef0:	beq	1cf1c <__assert_fail@plt+0xb964>
   1cef4:	mov	r6, #-2147483648	; 0x80000000
   1cef8:	mvn	r4, #-2147483648	; 0x80000000
   1cefc:	sdiv	r6, r6, r7
   1cf00:	cmp	r6, r0
   1cf04:	bge	1cf1c <__assert_fail@plt+0xb964>
   1cf08:	b	1cf2c <__assert_fail@plt+0xb974>
   1cf0c:	mvn	r4, #-2147483648	; 0x80000000
   1cf10:	sdiv	r6, r4, r0
   1cf14:	cmp	r7, r6
   1cf18:	blt	1cf2c <__assert_fail@plt+0xb974>
   1cf1c:	mul	r6, r7, r0
   1cf20:	mov	r4, #64	; 0x40
   1cf24:	cmp	r6, #63	; 0x3f
   1cf28:	bgt	1cf34 <__assert_fail@plt+0xb97c>
   1cf2c:	sdiv	r7, r4, r0
   1cf30:	mul	r6, r7, r0
   1cf34:	cmp	r5, #0
   1cf38:	moveq	r4, #0
   1cf3c:	streq	r4, [r8]
   1cf40:	sub	r4, r7, r1
   1cf44:	cmp	r4, r2
   1cf48:	bge	1cff4 <__assert_fail@plt+0xba3c>
   1cf4c:	add	r7, r1, r2
   1cf50:	mov	r6, #0
   1cf54:	mov	r2, #0
   1cf58:	cmp	r7, r3
   1cf5c:	movwgt	r6, #1
   1cf60:	cmn	r3, #1
   1cf64:	movwgt	r2, #1
   1cf68:	cmp	r7, r1
   1cf6c:	bvs	1d028 <__assert_fail@plt+0xba70>
   1cf70:	ands	r1, r2, r6
   1cf74:	bne	1d028 <__assert_fail@plt+0xba70>
   1cf78:	cmn	r0, #1
   1cf7c:	ble	1cfa4 <__assert_fail@plt+0xb9ec>
   1cf80:	cmp	r0, #0
   1cf84:	beq	1cff0 <__assert_fail@plt+0xba38>
   1cf88:	cmn	r7, #1
   1cf8c:	ble	1cfc8 <__assert_fail@plt+0xba10>
   1cf90:	mvn	r1, #-2147483648	; 0x80000000
   1cf94:	udiv	r1, r1, r0
   1cf98:	cmp	r1, r7
   1cf9c:	bge	1cff0 <__assert_fail@plt+0xba38>
   1cfa0:	b	1d028 <__assert_fail@plt+0xba70>
   1cfa4:	cmn	r7, #1
   1cfa8:	ble	1cfe0 <__assert_fail@plt+0xba28>
   1cfac:	cmn	r0, #1
   1cfb0:	beq	1cff0 <__assert_fail@plt+0xba38>
   1cfb4:	mov	r1, #-2147483648	; 0x80000000
   1cfb8:	sdiv	r1, r1, r0
   1cfbc:	cmp	r1, r7
   1cfc0:	bge	1cff0 <__assert_fail@plt+0xba38>
   1cfc4:	b	1d028 <__assert_fail@plt+0xba70>
   1cfc8:	beq	1cff0 <__assert_fail@plt+0xba38>
   1cfcc:	mov	r1, #-2147483648	; 0x80000000
   1cfd0:	sdiv	r1, r1, r7
   1cfd4:	cmp	r1, r0
   1cfd8:	bge	1cff0 <__assert_fail@plt+0xba38>
   1cfdc:	b	1d028 <__assert_fail@plt+0xba70>
   1cfe0:	mvn	r1, #-2147483648	; 0x80000000
   1cfe4:	sdiv	r1, r1, r0
   1cfe8:	cmp	r7, r1
   1cfec:	blt	1d028 <__assert_fail@plt+0xba70>
   1cff0:	mul	r6, r7, r0
   1cff4:	mov	r0, r5
   1cff8:	mov	r1, r6
   1cffc:	bl	1d238 <__assert_fail@plt+0xbc80>
   1d000:	cmp	r6, #0
   1d004:	movwne	r6, #1
   1d008:	cmp	r0, #0
   1d00c:	bne	1d020 <__assert_fail@plt+0xba68>
   1d010:	clz	r1, r5
   1d014:	lsr	r1, r1, #5
   1d018:	orrs	r1, r1, r6
   1d01c:	bne	1d028 <__assert_fail@plt+0xba70>
   1d020:	str	r7, [r8]
   1d024:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d028:	bl	1d170 <__assert_fail@plt+0xbbb8>
   1d02c:	push	{fp, lr}
   1d030:	mov	fp, sp
   1d034:	mov	r1, #1
   1d038:	bl	1d1b4 <__assert_fail@plt+0xbbfc>
   1d03c:	cmp	r0, #0
   1d040:	popne	{fp, pc}
   1d044:	bl	1d170 <__assert_fail@plt+0xbbb8>
   1d048:	push	{fp, lr}
   1d04c:	mov	fp, sp
   1d050:	bl	1d1b4 <__assert_fail@plt+0xbbfc>
   1d054:	cmp	r0, #0
   1d058:	popne	{fp, pc}
   1d05c:	bl	1d170 <__assert_fail@plt+0xbbb8>
   1d060:	push	{fp, lr}
   1d064:	mov	fp, sp
   1d068:	mov	r1, #1
   1d06c:	bl	1d1b4 <__assert_fail@plt+0xbbfc>
   1d070:	cmp	r0, #0
   1d074:	popne	{fp, pc}
   1d078:	bl	1d170 <__assert_fail@plt+0xbbb8>
   1d07c:	push	{fp, lr}
   1d080:	mov	fp, sp
   1d084:	bl	1d1b4 <__assert_fail@plt+0xbbfc>
   1d088:	cmp	r0, #0
   1d08c:	popne	{fp, pc}
   1d090:	bl	1d170 <__assert_fail@plt+0xbbb8>
   1d094:	push	{r4, r5, fp, lr}
   1d098:	add	fp, sp, #8
   1d09c:	mov	r5, r0
   1d0a0:	mov	r0, r1
   1d0a4:	mov	r4, r1
   1d0a8:	bl	1d208 <__assert_fail@plt+0xbc50>
   1d0ac:	cmp	r0, #0
   1d0b0:	beq	1d0c4 <__assert_fail@plt+0xbb0c>
   1d0b4:	mov	r1, r5
   1d0b8:	mov	r2, r4
   1d0bc:	pop	{r4, r5, fp, lr}
   1d0c0:	b	112f4 <memcpy@plt>
   1d0c4:	bl	1d170 <__assert_fail@plt+0xbbb8>
   1d0c8:	push	{r4, r5, fp, lr}
   1d0cc:	add	fp, sp, #8
   1d0d0:	mov	r5, r0
   1d0d4:	mov	r0, r1
   1d0d8:	mov	r4, r1
   1d0dc:	bl	1d208 <__assert_fail@plt+0xbc50>
   1d0e0:	cmp	r0, #0
   1d0e4:	beq	1d0f8 <__assert_fail@plt+0xbb40>
   1d0e8:	mov	r1, r5
   1d0ec:	mov	r2, r4
   1d0f0:	pop	{r4, r5, fp, lr}
   1d0f4:	b	112f4 <memcpy@plt>
   1d0f8:	bl	1d170 <__assert_fail@plt+0xbbb8>
   1d0fc:	push	{r4, r5, fp, lr}
   1d100:	add	fp, sp, #8
   1d104:	mov	r5, r0
   1d108:	add	r0, r1, #1
   1d10c:	mov	r4, r1
   1d110:	bl	1d208 <__assert_fail@plt+0xbc50>
   1d114:	cmp	r0, #0
   1d118:	beq	1d134 <__assert_fail@plt+0xbb7c>
   1d11c:	mov	r1, #0
   1d120:	mov	r2, r4
   1d124:	strb	r1, [r0, r4]
   1d128:	mov	r1, r5
   1d12c:	pop	{r4, r5, fp, lr}
   1d130:	b	112f4 <memcpy@plt>
   1d134:	bl	1d170 <__assert_fail@plt+0xbbb8>
   1d138:	push	{r4, r5, fp, lr}
   1d13c:	add	fp, sp, #8
   1d140:	mov	r4, r0
   1d144:	bl	11468 <strlen@plt>
   1d148:	add	r5, r0, #1
   1d14c:	mov	r0, r5
   1d150:	bl	1d208 <__assert_fail@plt+0xbc50>
   1d154:	cmp	r0, #0
   1d158:	beq	1d16c <__assert_fail@plt+0xbbb4>
   1d15c:	mov	r1, r4
   1d160:	mov	r2, r5
   1d164:	pop	{r4, r5, fp, lr}
   1d168:	b	112f4 <memcpy@plt>
   1d16c:	bl	1d170 <__assert_fail@plt+0xbbb8>
   1d170:	push	{fp, lr}
   1d174:	mov	fp, sp
   1d178:	movw	r0, #8512	; 0x2140
   1d17c:	movw	r1, #7412	; 0x1cf4
   1d180:	mov	r2, #5
   1d184:	movt	r0, #3
   1d188:	movt	r1, #2
   1d18c:	ldr	r4, [r0]
   1d190:	mov	r0, #0
   1d194:	bl	11318 <dcgettext@plt>
   1d198:	movw	r2, #65518	; 0xffee
   1d19c:	mov	r3, r0
   1d1a0:	mov	r0, r4
   1d1a4:	mov	r1, #0
   1d1a8:	movt	r2, #1
   1d1ac:	bl	113a8 <error@plt>
   1d1b0:	bl	11588 <abort@plt>
   1d1b4:	clz	r2, r1
   1d1b8:	clz	r3, r0
   1d1bc:	lsr	r2, r2, #5
   1d1c0:	lsr	r3, r3, #5
   1d1c4:	orrs	r2, r3, r2
   1d1c8:	movwne	r1, #1
   1d1cc:	movwne	r0, #1
   1d1d0:	cmp	r1, #0
   1d1d4:	beq	1d204 <__assert_fail@plt+0xbc4c>
   1d1d8:	mvn	r2, #-2147483648	; 0x80000000
   1d1dc:	udiv	r2, r2, r1
   1d1e0:	cmp	r2, r0
   1d1e4:	bcs	1d204 <__assert_fail@plt+0xbc4c>
   1d1e8:	push	{fp, lr}
   1d1ec:	mov	fp, sp
   1d1f0:	bl	1148c <__errno_location@plt>
   1d1f4:	mov	r1, #12
   1d1f8:	str	r1, [r0]
   1d1fc:	mov	r0, #0
   1d200:	pop	{fp, pc}
   1d204:	b	11264 <calloc@plt>
   1d208:	cmp	r0, #0
   1d20c:	movweq	r0, #1
   1d210:	cmn	r0, #1
   1d214:	ble	1d21c <__assert_fail@plt+0xbc64>
   1d218:	b	113cc <malloc@plt>
   1d21c:	push	{fp, lr}
   1d220:	mov	fp, sp
   1d224:	bl	1148c <__errno_location@plt>
   1d228:	mov	r1, #12
   1d22c:	str	r1, [r0]
   1d230:	mov	r0, #0
   1d234:	pop	{fp, pc}
   1d238:	push	{fp, lr}
   1d23c:	mov	fp, sp
   1d240:	cmp	r0, #0
   1d244:	beq	1d260 <__assert_fail@plt+0xbca8>
   1d248:	cmp	r1, #0
   1d24c:	beq	1d26c <__assert_fail@plt+0xbcb4>
   1d250:	cmn	r1, #1
   1d254:	ble	1d278 <__assert_fail@plt+0xbcc0>
   1d258:	pop	{fp, lr}
   1d25c:	b	11330 <realloc@plt>
   1d260:	mov	r0, r1
   1d264:	pop	{fp, lr}
   1d268:	b	1d208 <__assert_fail@plt+0xbc50>
   1d26c:	bl	1d408 <__assert_fail@plt+0xbe50>
   1d270:	mov	r0, #0
   1d274:	pop	{fp, pc}
   1d278:	bl	1148c <__errno_location@plt>
   1d27c:	mov	r1, #12
   1d280:	str	r1, [r0]
   1d284:	mov	r0, #0
   1d288:	pop	{fp, pc}
   1d28c:	push	{r4, r5, r6, sl, fp, lr}
   1d290:	add	fp, sp, #16
   1d294:	mov	r4, r0
   1d298:	bl	11390 <__fpending@plt>
   1d29c:	ldr	r6, [r4]
   1d2a0:	mov	r5, r0
   1d2a4:	mov	r0, r4
   1d2a8:	bl	1d310 <__assert_fail@plt+0xbd58>
   1d2ac:	tst	r6, #32
   1d2b0:	bne	1d2e8 <__assert_fail@plt+0xbd30>
   1d2b4:	cmp	r0, #0
   1d2b8:	mov	r4, r0
   1d2bc:	mvnne	r4, #0
   1d2c0:	cmp	r5, #0
   1d2c4:	bne	1d2f4 <__assert_fail@plt+0xbd3c>
   1d2c8:	cmp	r0, #0
   1d2cc:	beq	1d2f4 <__assert_fail@plt+0xbd3c>
   1d2d0:	bl	1148c <__errno_location@plt>
   1d2d4:	ldr	r0, [r0]
   1d2d8:	subs	r4, r0, #9
   1d2dc:	mvnne	r4, #0
   1d2e0:	mov	r0, r4
   1d2e4:	pop	{r4, r5, r6, sl, fp, pc}
   1d2e8:	mvn	r4, #0
   1d2ec:	cmp	r0, #0
   1d2f0:	beq	1d2fc <__assert_fail@plt+0xbd44>
   1d2f4:	mov	r0, r4
   1d2f8:	pop	{r4, r5, r6, sl, fp, pc}
   1d2fc:	bl	1148c <__errno_location@plt>
   1d300:	mov	r1, #0
   1d304:	str	r1, [r0]
   1d308:	mov	r0, r4
   1d30c:	pop	{r4, r5, r6, sl, fp, pc}
   1d310:	push	{r4, r5, r6, sl, fp, lr}
   1d314:	add	fp, sp, #16
   1d318:	sub	sp, sp, #8
   1d31c:	mov	r4, r0
   1d320:	bl	114c8 <fileno@plt>
   1d324:	cmn	r0, #1
   1d328:	ble	1d39c <__assert_fail@plt+0xbde4>
   1d32c:	mov	r0, r4
   1d330:	bl	113fc <__freading@plt>
   1d334:	cmp	r0, #0
   1d338:	beq	1d364 <__assert_fail@plt+0xbdac>
   1d33c:	mov	r0, r4
   1d340:	bl	114c8 <fileno@plt>
   1d344:	mov	r1, #1
   1d348:	mov	r2, #0
   1d34c:	mov	r3, #0
   1d350:	str	r1, [sp]
   1d354:	bl	11378 <lseek64@plt>
   1d358:	and	r0, r0, r1
   1d35c:	cmn	r0, #1
   1d360:	beq	1d39c <__assert_fail@plt+0xbde4>
   1d364:	mov	r0, r4
   1d368:	bl	1d3ac <__assert_fail@plt+0xbdf4>
   1d36c:	cmp	r0, #0
   1d370:	beq	1d39c <__assert_fail@plt+0xbde4>
   1d374:	bl	1148c <__errno_location@plt>
   1d378:	ldr	r6, [r0]
   1d37c:	mov	r5, r0
   1d380:	mov	r0, r4
   1d384:	bl	114e0 <fclose@plt>
   1d388:	cmp	r6, #0
   1d38c:	strne	r6, [r5]
   1d390:	mvnne	r0, #0
   1d394:	sub	sp, fp, #16
   1d398:	pop	{r4, r5, r6, sl, fp, pc}
   1d39c:	mov	r0, r4
   1d3a0:	sub	sp, fp, #16
   1d3a4:	pop	{r4, r5, r6, sl, fp, lr}
   1d3a8:	b	114e0 <fclose@plt>
   1d3ac:	push	{r4, sl, fp, lr}
   1d3b0:	add	fp, sp, #8
   1d3b4:	sub	sp, sp, #8
   1d3b8:	mov	r4, r0
   1d3bc:	cmp	r0, #0
   1d3c0:	beq	1d3f8 <__assert_fail@plt+0xbe40>
   1d3c4:	mov	r0, r4
   1d3c8:	bl	113fc <__freading@plt>
   1d3cc:	cmp	r0, #0
   1d3d0:	beq	1d3f8 <__assert_fail@plt+0xbe40>
   1d3d4:	ldrb	r0, [r4, #1]
   1d3d8:	tst	r0, #1
   1d3dc:	beq	1d3f8 <__assert_fail@plt+0xbe40>
   1d3e0:	mov	r0, #1
   1d3e4:	mov	r2, #0
   1d3e8:	mov	r3, #0
   1d3ec:	str	r0, [sp]
   1d3f0:	mov	r0, r4
   1d3f4:	bl	1d430 <__assert_fail@plt+0xbe78>
   1d3f8:	mov	r0, r4
   1d3fc:	sub	sp, fp, #8
   1d400:	pop	{r4, sl, fp, lr}
   1d404:	b	112c4 <fflush@plt>
   1d408:	push	{r4, r5, r6, sl, fp, lr}
   1d40c:	add	fp, sp, #16
   1d410:	mov	r4, r0
   1d414:	bl	1148c <__errno_location@plt>
   1d418:	ldr	r6, [r0]
   1d41c:	mov	r5, r0
   1d420:	mov	r0, r4
   1d424:	bl	112d0 <free@plt>
   1d428:	str	r6, [r5]
   1d42c:	pop	{r4, r5, r6, sl, fp, pc}
   1d430:	push	{r4, r5, r6, r7, fp, lr}
   1d434:	add	fp, sp, #16
   1d438:	sub	sp, sp, #8
   1d43c:	mov	r4, r0
   1d440:	ldr	r0, [r0, #4]
   1d444:	mov	r5, r3
   1d448:	mov	r6, r2
   1d44c:	ldr	r1, [r4, #8]
   1d450:	cmp	r1, r0
   1d454:	bne	1d470 <__assert_fail@plt+0xbeb8>
   1d458:	ldrd	r0, [r4, #16]
   1d45c:	cmp	r1, r0
   1d460:	bne	1d470 <__assert_fail@plt+0xbeb8>
   1d464:	ldr	r0, [r4, #36]	; 0x24
   1d468:	cmp	r0, #0
   1d46c:	beq	1d488 <__assert_fail@plt+0xbed0>
   1d470:	mov	r0, r4
   1d474:	mov	r2, r6
   1d478:	mov	r3, r5
   1d47c:	sub	sp, fp, #16
   1d480:	pop	{r4, r5, r6, r7, fp, lr}
   1d484:	b	114ec <fseeko64@plt>
   1d488:	ldr	r7, [fp, #8]
   1d48c:	mov	r0, r4
   1d490:	bl	114c8 <fileno@plt>
   1d494:	mov	r2, r6
   1d498:	mov	r3, r5
   1d49c:	str	r7, [sp]
   1d4a0:	bl	11378 <lseek64@plt>
   1d4a4:	and	r2, r0, r1
   1d4a8:	cmn	r2, #1
   1d4ac:	beq	1d4cc <__assert_fail@plt+0xbf14>
   1d4b0:	strd	r0, [r4, #80]	; 0x50
   1d4b4:	ldr	r0, [r4]
   1d4b8:	bic	r0, r0, #16
   1d4bc:	str	r0, [r4]
   1d4c0:	mov	r0, #0
   1d4c4:	sub	sp, fp, #16
   1d4c8:	pop	{r4, r5, r6, r7, fp, pc}
   1d4cc:	mvn	r0, #0
   1d4d0:	sub	sp, fp, #16
   1d4d4:	pop	{r4, r5, r6, r7, fp, pc}
   1d4d8:	push	{fp, lr}
   1d4dc:	mov	fp, sp
   1d4e0:	mov	r0, #14
   1d4e4:	bl	1151c <nl_langinfo@plt>
   1d4e8:	movw	r1, #6017	; 0x1781
   1d4ec:	cmp	r0, #0
   1d4f0:	movt	r1, #2
   1d4f4:	movne	r1, r0
   1d4f8:	movw	r0, #7429	; 0x1d05
   1d4fc:	ldrb	r2, [r1]
   1d500:	movt	r0, #2
   1d504:	cmp	r2, #0
   1d508:	movne	r0, r1
   1d50c:	pop	{fp, pc}
   1d510:	push	{r4, r5, r6, r7, fp, lr}
   1d514:	add	fp, sp, #16
   1d518:	sub	sp, sp, #8
   1d51c:	cmp	r0, #0
   1d520:	add	r5, sp, #4
   1d524:	mov	r7, r2
   1d528:	mov	r4, r1
   1d52c:	movne	r5, r0
   1d530:	mov	r0, r5
   1d534:	bl	1139c <mbrtowc@plt>
   1d538:	mov	r6, r0
   1d53c:	cmp	r7, #0
   1d540:	beq	1d568 <__assert_fail@plt+0xbfb0>
   1d544:	cmn	r6, #2
   1d548:	bcc	1d568 <__assert_fail@plt+0xbfb0>
   1d54c:	mov	r0, #0
   1d550:	bl	1f1e8 <__assert_fail@plt+0xdc30>
   1d554:	cmp	r0, #0
   1d558:	bne	1d568 <__assert_fail@plt+0xbfb0>
   1d55c:	ldrb	r0, [r4]
   1d560:	mov	r6, #1
   1d564:	str	r0, [r5]
   1d568:	mov	r0, r6
   1d56c:	sub	sp, fp, #16
   1d570:	pop	{r4, r5, r6, r7, fp, pc}
   1d574:	push	{fp, lr}
   1d578:	mov	fp, sp
   1d57c:	sub	sp, sp, #24
   1d580:	mvn	ip, #0
   1d584:	str	ip, [sp, #8]
   1d588:	mov	ip, #0
   1d58c:	str	ip, [sp, #4]
   1d590:	str	ip, [sp]
   1d594:	ldr	ip, [fp, #12]
   1d598:	str	ip, [sp, #16]
   1d59c:	ldr	ip, [fp, #8]
   1d5a0:	str	ip, [sp, #12]
   1d5a4:	bl	1d5b0 <__assert_fail@plt+0xbff8>
   1d5a8:	mov	sp, fp
   1d5ac:	pop	{fp, pc}
   1d5b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d5b4:	add	fp, sp, #28
   1d5b8:	sub	sp, sp, #140	; 0x8c
   1d5bc:	sub	sp, sp, #1024	; 0x400
   1d5c0:	mov	r4, r3
   1d5c4:	mov	r6, r2
   1d5c8:	str	r1, [sp, #104]	; 0x68
   1d5cc:	mov	r8, r0
   1d5d0:	bl	1148c <__errno_location@plt>
   1d5d4:	mov	r2, r4
   1d5d8:	ldrb	r3, [r6]
   1d5dc:	str	r0, [sp, #76]	; 0x4c
   1d5e0:	ldr	r0, [r0]
   1d5e4:	movw	r5, #6017	; 0x1781
   1d5e8:	ldr	r1, [r2, #8]!
   1d5ec:	movt	r5, #2
   1d5f0:	str	r0, [sp, #72]	; 0x48
   1d5f4:	cmp	r1, #0
   1d5f8:	mov	r7, r1
   1d5fc:	movweq	r7, #12
   1d600:	cmp	r1, #12
   1d604:	subgt	r7, r1, #12
   1d608:	ldr	r1, [r2, #32]
   1d60c:	cmp	r1, #0
   1d610:	movne	r5, r1
   1d614:	cmp	r3, #0
   1d618:	beq	1f160 <__assert_fail@plt+0xdba8>
   1d61c:	sub	r0, fp, #48	; 0x30
   1d620:	mvn	r1, #13
   1d624:	str	r2, [sp, #60]	; 0x3c
   1d628:	str	r7, [sp, #56]	; 0x38
   1d62c:	ldr	r7, [fp, #16]
   1d630:	movw	ip, #52428	; 0xcccc
   1d634:	sub	r9, r5, #2
   1d638:	str	r4, [sp, #88]	; 0x58
   1d63c:	mov	lr, #0
   1d640:	str	r5, [sp, #64]	; 0x40
   1d644:	sub	r1, r1, r0
   1d648:	movt	ip, #3276	; 0xccc
   1d64c:	str	r9, [sp, #32]
   1d650:	str	r1, [sp, #44]	; 0x2c
   1d654:	add	r1, sp, #112	; 0x70
   1d658:	add	r1, r1, #1
   1d65c:	str	r1, [sp, #48]	; 0x30
   1d660:	sub	r1, fp, #53	; 0x35
   1d664:	add	r2, r1, #3
   1d668:	add	r1, r1, #2
   1d66c:	str	r1, [sp, #84]	; 0x54
   1d670:	add	r1, r4, #12
   1d674:	mov	r4, #-2147483648	; 0x80000000
   1d678:	str	r2, [sp, #68]	; 0x44
   1d67c:	str	r1, [sp, #52]	; 0x34
   1d680:	sub	r1, r0, #2
   1d684:	str	r1, [sp, #28]
   1d688:	add	r1, r0, #8
   1d68c:	str	r1, [sp, #24]
   1d690:	add	r1, r0, #13
   1d694:	add	r0, r0, #14
   1d698:	str	r0, [sp, #80]	; 0x50
   1d69c:	mvn	r0, r0
   1d6a0:	str	r1, [sp, #40]	; 0x28
   1d6a4:	str	r0, [sp, #36]	; 0x24
   1d6a8:	b	1d6c4 <__assert_fail@plt+0xc10c>
   1d6ac:	mov	r8, #0
   1d6b0:	add	lr, r5, lr
   1d6b4:	ldrb	r3, [r6, #1]!
   1d6b8:	mvn	r7, #0
   1d6bc:	cmp	r3, #0
   1d6c0:	beq	1f164 <__assert_fail@plt+0xdbac>
   1d6c4:	uxtb	r1, r3
   1d6c8:	str	r8, [sp, #108]	; 0x6c
   1d6cc:	cmp	r1, #37	; 0x25
   1d6d0:	bne	1d778 <__assert_fail@plt+0xc1c0>
   1d6d4:	mov	r0, #0
   1d6d8:	mov	r9, #0
   1d6dc:	mov	sl, r6
   1d6e0:	str	r0, [sp, #100]	; 0x64
   1d6e4:	ldr	r0, [fp, #8]
   1d6e8:	mov	r5, r0
   1d6ec:	add	r1, sl, #2
   1d6f0:	add	sl, sl, #1
   1d6f4:	b	1d70c <__assert_fail@plt+0xc154>
   1d6f8:	cmp	r0, #95	; 0x5f
   1d6fc:	bne	1d768 <__assert_fail@plt+0xc1b0>
   1d700:	add	r1, r1, #1
   1d704:	add	sl, sl, #1
   1d708:	mov	r9, r0
   1d70c:	ldrb	r0, [sl]
   1d710:	sub	r2, r0, #35	; 0x23
   1d714:	cmp	r2, #13
   1d718:	bhi	1d6f8 <__assert_fail@plt+0xc140>
   1d71c:	add	r3, pc, #0
   1d720:	ldr	pc, [r3, r2, lsl #2]
   1d724:	andeq	sp, r1, ip, asr r7
   1d728:	andeq	sp, r1, r8, ror #15
   1d72c:	andeq	sp, r1, r8, ror #15
   1d730:	andeq	sp, r1, r8, ror #15
   1d734:	andeq	sp, r1, r8, ror #15
   1d738:	andeq	sp, r1, r8, ror #15
   1d73c:	andeq	sp, r1, r8, ror #15
   1d740:	andeq	sp, r1, r8, ror #15
   1d744:	andeq	sp, r1, r0, lsl #14
   1d748:	andeq	sp, r1, r8, ror #15
   1d74c:	andeq	sp, r1, r0, lsl #14
   1d750:	andeq	sp, r1, r8, ror #15
   1d754:	andeq	sp, r1, r8, ror #15
   1d758:	andeq	sp, r1, r0, lsl #14
   1d75c:	mov	r0, #1
   1d760:	str	r0, [sp, #100]	; 0x64
   1d764:	b	1d6ec <__assert_fail@plt+0xc134>
   1d768:	cmp	r0, #94	; 0x5e
   1d76c:	bne	1d7e8 <__assert_fail@plt+0xc230>
   1d770:	mov	r5, #1
   1d774:	b	1d6ec <__assert_fail@plt+0xc134>
   1d778:	ldr	r0, [sp, #104]	; 0x68
   1d77c:	bic	r1, r7, r7, asr #31
   1d780:	cmp	r1, #1
   1d784:	mov	r5, r1
   1d788:	movls	r5, #1
   1d78c:	sub	r2, r0, lr
   1d790:	cmp	r5, r2
   1d794:	bcs	1f188 <__assert_fail@plt+0xdbd0>
   1d798:	ldr	r8, [sp, #108]	; 0x6c
   1d79c:	cmp	r8, #0
   1d7a0:	beq	1d6ac <__assert_fail@plt+0xc0f4>
   1d7a4:	cmp	r1, #2
   1d7a8:	bcc	1d7e0 <__assert_fail@plt+0xc228>
   1d7ac:	sub	r4, r1, #1
   1d7b0:	mov	r0, r8
   1d7b4:	mov	r1, #32
   1d7b8:	mov	r7, lr
   1d7bc:	mov	r2, r4
   1d7c0:	bl	114b0 <memset@plt>
   1d7c4:	ldr	r8, [sp, #108]	; 0x6c
   1d7c8:	ldrb	r3, [r6]
   1d7cc:	movw	ip, #52428	; 0xcccc
   1d7d0:	mov	lr, r7
   1d7d4:	movt	ip, #3276	; 0xccc
   1d7d8:	add	r8, r8, r4
   1d7dc:	mov	r4, #-2147483648	; 0x80000000
   1d7e0:	strb	r3, [r8], #1
   1d7e4:	b	1d6b0 <__assert_fail@plt+0xc0f8>
   1d7e8:	sub	r2, r0, #48	; 0x30
   1d7ec:	cmp	r2, #9
   1d7f0:	bhi	1d85c <__assert_fail@plt+0xc2a4>
   1d7f4:	mov	r7, #0
   1d7f8:	cmn	r7, #1
   1d7fc:	bgt	1d834 <__assert_fail@plt+0xc27c>
   1d800:	b	1d840 <__assert_fail@plt+0xc288>
   1d804:	add	r2, r7, r7, lsl #2
   1d808:	lsl	r3, r2, #1
   1d80c:	uxtab	r0, r3, r0
   1d810:	sub	r7, r0, #48	; 0x30
   1d814:	cmp	r7, r2, lsl #1
   1d818:	mvnvs	r7, #-2147483648	; 0x80000000
   1d81c:	ldrb	r0, [r1], #1
   1d820:	sub	r2, r0, #48	; 0x30
   1d824:	cmp	r2, #10
   1d828:	bcs	1d858 <__assert_fail@plt+0xc2a0>
   1d82c:	cmn	r7, #1
   1d830:	ble	1d840 <__assert_fail@plt+0xc288>
   1d834:	cmp	r7, ip
   1d838:	ble	1d804 <__assert_fail@plt+0xc24c>
   1d83c:	b	1d850 <__assert_fail@plt+0xc298>
   1d840:	beq	1d804 <__assert_fail@plt+0xc24c>
   1d844:	sdiv	r2, r4, r7
   1d848:	cmp	r2, #10
   1d84c:	bge	1d804 <__assert_fail@plt+0xc24c>
   1d850:	mvn	r7, #-2147483648	; 0x80000000
   1d854:	b	1d81c <__assert_fail@plt+0xc264>
   1d858:	sub	sl, r1, #1
   1d85c:	cmp	r0, #79	; 0x4f
   1d860:	cmpne	r0, #69	; 0x45
   1d864:	bne	1d870 <__assert_fail@plt+0xc2b8>
   1d868:	ldrb	r1, [sl, #1]!
   1d86c:	b	1d878 <__assert_fail@plt+0xc2c0>
   1d870:	mov	r1, r0
   1d874:	mov	r0, #0
   1d878:	cmp	r1, #122	; 0x7a
   1d87c:	str	r5, [sp, #96]	; 0x60
   1d880:	bhi	1e2d8 <__assert_fail@plt+0xcd20>
   1d884:	movw	r8, #26215	; 0x6667
   1d888:	movw	r3, #7453	; 0x1d1d
   1d88c:	add	r2, pc, #16
   1d890:	mov	r5, #0
   1d894:	mvn	r4, #0
   1d898:	movt	r8, #26214	; 0x6666
   1d89c:	movt	r3, #2
   1d8a0:	ldr	pc, [r2, r1, lsl #2]
   1d8a4:	andeq	sp, r1, r8, lsl ip
   1d8a8:	ldrdeq	lr, [r1], -r8
   1d8ac:	ldrdeq	lr, [r1], -r8
   1d8b0:	ldrdeq	lr, [r1], -r8
   1d8b4:	ldrdeq	lr, [r1], -r8
   1d8b8:	ldrdeq	lr, [r1], -r8
   1d8bc:	ldrdeq	lr, [r1], -r8
   1d8c0:	ldrdeq	lr, [r1], -r8
   1d8c4:	ldrdeq	lr, [r1], -r8
   1d8c8:	ldrdeq	lr, [r1], -r8
   1d8cc:	ldrdeq	lr, [r1], -r8
   1d8d0:	ldrdeq	lr, [r1], -r8
   1d8d4:	ldrdeq	lr, [r1], -r8
   1d8d8:	ldrdeq	lr, [r1], -r8
   1d8dc:	ldrdeq	lr, [r1], -r8
   1d8e0:	ldrdeq	lr, [r1], -r8
   1d8e4:	ldrdeq	lr, [r1], -r8
   1d8e8:	ldrdeq	lr, [r1], -r8
   1d8ec:	ldrdeq	lr, [r1], -r8
   1d8f0:	ldrdeq	lr, [r1], -r8
   1d8f4:	ldrdeq	lr, [r1], -r8
   1d8f8:	ldrdeq	lr, [r1], -r8
   1d8fc:	ldrdeq	lr, [r1], -r8
   1d900:	ldrdeq	lr, [r1], -r8
   1d904:	ldrdeq	lr, [r1], -r8
   1d908:	ldrdeq	lr, [r1], -r8
   1d90c:	ldrdeq	lr, [r1], -r8
   1d910:	ldrdeq	lr, [r1], -r8
   1d914:	ldrdeq	lr, [r1], -r8
   1d918:	ldrdeq	lr, [r1], -r8
   1d91c:	ldrdeq	lr, [r1], -r8
   1d920:	ldrdeq	lr, [r1], -r8
   1d924:	ldrdeq	lr, [r1], -r8
   1d928:	ldrdeq	lr, [r1], -r8
   1d92c:	ldrdeq	lr, [r1], -r8
   1d930:	ldrdeq	lr, [r1], -r8
   1d934:	ldrdeq	lr, [r1], -r8
   1d938:	andeq	sp, r1, ip, lsl #24
   1d93c:	ldrdeq	lr, [r1], -r8
   1d940:	ldrdeq	lr, [r1], -r8
   1d944:	ldrdeq	lr, [r1], -r8
   1d948:	ldrdeq	lr, [r1], -r8
   1d94c:	ldrdeq	lr, [r1], -r8
   1d950:	ldrdeq	lr, [r1], -r8
   1d954:	ldrdeq	lr, [r1], -r8
   1d958:	ldrdeq	lr, [r1], -r8
   1d95c:	ldrdeq	lr, [r1], -r8
   1d960:	ldrdeq	lr, [r1], -r8
   1d964:	ldrdeq	lr, [r1], -r8
   1d968:	ldrdeq	lr, [r1], -r8
   1d96c:	ldrdeq	lr, [r1], -r8
   1d970:	ldrdeq	lr, [r1], -r8
   1d974:	ldrdeq	lr, [r1], -r8
   1d978:	ldrdeq	lr, [r1], -r8
   1d97c:	ldrdeq	lr, [r1], -r8
   1d980:	ldrdeq	lr, [r1], -r8
   1d984:	ldrdeq	lr, [r1], -r8
   1d988:	ldrdeq	lr, [r1], -r8
   1d98c:	andeq	sp, r1, r0, lsr #24
   1d990:	ldrdeq	lr, [r1], -r8
   1d994:	ldrdeq	lr, [r1], -r8
   1d998:	ldrdeq	lr, [r1], -r8
   1d99c:	ldrdeq	lr, [r1], -r8
   1d9a0:	ldrdeq	lr, [r1], -r8
   1d9a4:	ldrdeq	lr, [r1], -r8
   1d9a8:	andeq	sp, r1, r8, lsr ip
   1d9ac:	andeq	sp, r1, ip, asr ip
   1d9b0:	andeq	sp, r1, r0, lsl #25
   1d9b4:	muleq	r1, r4, ip
   1d9b8:	ldrdeq	lr, [r1], -r8
   1d9bc:	andeq	sp, r1, r8, lsr #25
   1d9c0:	muleq	r1, r0, sl
   1d9c4:	ldrdeq	sp, [r1], -r4
   1d9c8:	andeq	sp, r1, r8, ror #25
   1d9cc:	ldrdeq	lr, [r1], -r8
   1d9d0:	ldrdeq	lr, [r1], -r8
   1d9d4:	ldrdeq	lr, [r1], -r8
   1d9d8:	strdeq	sp, [r1], -r8
   1d9dc:	andeq	sp, r1, ip, lsl #26
   1d9e0:	ldrdeq	lr, [r1], -r8
   1d9e4:	andeq	sp, r1, r8, ror sp
   1d9e8:	ldrdeq	lr, [r1], -r8
   1d9ec:			; <UNDEFINED> instruction: 0x0001ddb8
   1d9f0:	muleq	r1, ip, sp
   1d9f4:			; <UNDEFINED> instruction: 0x0001ddb0
   1d9f8:	andeq	sp, r1, r0, ror #28
   1d9fc:	muleq	r1, r0, sl
   1da00:	andeq	sp, r1, ip, lsl #29
   1da04:	ldrdeq	sp, [r1], -r8
   1da08:	andeq	sp, r1, ip, ror #29
   1da0c:	andeq	sp, r1, r8, lsr #30
   1da10:	ldrdeq	lr, [r1], -r8
   1da14:	ldrdeq	lr, [r1], -r8
   1da18:	ldrdeq	lr, [r1], -r8
   1da1c:	ldrdeq	lr, [r1], -r8
   1da20:	ldrdeq	lr, [r1], -r8
   1da24:	ldrdeq	lr, [r1], -r8
   1da28:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   1da2c:	andeq	sp, r1, ip, ror #23
   1da30:	andeq	sp, r1, r0, asr #31
   1da34:	ldrdeq	sp, [r1], -r4
   1da38:	andeq	sp, r1, r8, ror #31
   1da3c:	ldrdeq	lr, [r1], -r8
   1da40:	muleq	r1, r0, sl
   1da44:	andeq	sp, r1, ip, ror #23
   1da48:	ldrdeq	lr, [r1], -r8
   1da4c:	strdeq	sp, [r1], -r8
   1da50:	andeq	lr, r1, r4, lsl r0
   1da54:	andeq	lr, r1, r8, lsr #32
   1da58:	andeq	lr, r1, r0, asr #32
   1da5c:	andeq	lr, r1, ip, rrx
   1da60:	ldrdeq	lr, [r1], -r8
   1da64:	andeq	sp, r1, ip, ror sp
   1da68:	andeq	lr, r1, r8, asr #1
   1da6c:			; <UNDEFINED> instruction: 0x0001eab4
   1da70:	strdeq	lr, [r1], -r0
   1da74:			; <UNDEFINED> instruction: 0x0001e1b4
   1da78:	andeq	lr, r1, r0, lsl r2
   1da7c:	ldrdeq	lr, [r1], -r8
   1da80:	andeq	lr, r1, r4, asr #4
   1da84:	andeq	lr, r1, ip, asr r2
   1da88:	andeq	lr, r1, r0, ror r2
   1da8c:	muleq	r1, r0, r2
   1da90:	cmp	r0, #69	; 0x45
   1da94:	beq	1e2d8 <__assert_fail@plt+0xcd20>
   1da98:	ldr	r2, [sp, #88]	; 0x58
   1da9c:	movw	r3, #9363	; 0x2493
   1daa0:	str	lr, [sp, #92]	; 0x5c
   1daa4:	movw	r6, #382	; 0x17e
   1daa8:	movt	r3, #37449	; 0x9249
   1daac:	ldr	r8, [r2, #24]
   1dab0:	ldr	r5, [r2, #28]
   1dab4:	ldr	lr, [r2, #20]
   1dab8:	sub	r2, r5, r8
   1dabc:	cmp	lr, #0
   1dac0:	add	r2, r2, r6
   1dac4:	smmla	r4, r2, r3, r2
   1dac8:	asr	r6, r4, #2
   1dacc:	add	r4, r6, r4, lsr #31
   1dad0:	rsb	r4, r4, r4, lsl #3
   1dad4:	sub	r2, r4, r2
   1dad8:	add	r2, r5, r2
   1dadc:	add	r4, r2, #3
   1dae0:	mvn	r2, #99	; 0x63
   1dae4:	movwmi	r2, #300	; 0x12c
   1dae8:	add	r2, r2, lr
   1daec:	cmn	r4, #1
   1daf0:	ble	1e470 <__assert_fail@plt+0xceb8>
   1daf4:	movw	r6, #365	; 0x16d
   1daf8:	tst	r2, #3
   1dafc:	bne	1db48 <__assert_fail@plt+0xc590>
   1db00:	movw	r6, #34079	; 0x851f
   1db04:	mov	ip, #100	; 0x64
   1db08:	movt	r6, #20971	; 0x51eb
   1db0c:	smmul	r6, r2, r6
   1db10:	asr	r3, r6, #5
   1db14:	add	r3, r3, r6, lsr #31
   1db18:	mls	ip, r3, ip, r2
   1db1c:	asr	r3, r6, #7
   1db20:	add	r3, r3, r6, lsr #31
   1db24:	mov	r6, #400	; 0x190
   1db28:	mls	r2, r3, r6, r2
   1db2c:	movw	r6, #365	; 0x16d
   1db30:	cmp	r2, #0
   1db34:	movweq	r6, #366	; 0x16e
   1db38:	cmp	ip, #0
   1db3c:	movw	ip, #52428	; 0xcccc
   1db40:	movt	ip, #3276	; 0xccc
   1db44:	movwne	r6, #366	; 0x16e
   1db48:	add	r2, r8, r6
   1db4c:	movw	r3, #382	; 0x17e
   1db50:	sub	r2, r5, r2
   1db54:	movw	r5, #9363	; 0x2493
   1db58:	movt	r5, #37449	; 0x9249
   1db5c:	add	r2, r2, r3
   1db60:	smmla	r2, r2, r5, r2
   1db64:	asr	r3, r2, #2
   1db68:	add	r2, r3, r2, lsr #31
   1db6c:	movw	r3, #379	; 0x17b
   1db70:	rsb	r2, r2, r2, lsl #3
   1db74:	add	r2, r8, r2
   1db78:	sub	r2, r2, r3
   1db7c:	cmn	r2, #1
   1db80:	movgt	r4, r2
   1db84:	mvn	r2, r2
   1db88:	lsr	r3, r2, #31
   1db8c:	cmp	r1, #71	; 0x47
   1db90:	beq	1e4fc <__assert_fail@plt+0xcf44>
   1db94:	cmp	r1, #103	; 0x67
   1db98:	bne	1e540 <__assert_fail@plt+0xcf88>
   1db9c:	movw	r2, #34079	; 0x851f
   1dba0:	movt	r2, #20971	; 0x51eb
   1dba4:	smmul	r6, lr, r2
   1dba8:	asr	r5, r6, #5
   1dbac:	add	r6, r5, r6, lsr #31
   1dbb0:	mov	r5, #100	; 0x64
   1dbb4:	mls	r6, r6, r5, lr
   1dbb8:	add	r6, r3, r6
   1dbbc:	smmul	r2, r6, r2
   1dbc0:	asr	r4, r2, #5
   1dbc4:	add	r2, r4, r2, lsr #31
   1dbc8:	mls	r6, r2, r5, r6
   1dbcc:	mov	r2, #2
   1dbd0:	str	r2, [sp, #100]	; 0x64
   1dbd4:	mov	r2, #0
   1dbd8:	cmn	r6, #1
   1dbdc:	ble	1ee28 <__assert_fail@plt+0xd870>
   1dbe0:	ldr	lr, [sp, #92]	; 0x5c
   1dbe4:	mov	r3, r6
   1dbe8:	b	1ee74 <__assert_fail@plt+0xd8bc>
   1dbec:	ldr	r2, [sp, #96]	; 0x60
   1dbf0:	ldr	r3, [sp, #100]	; 0x64
   1dbf4:	mov	r5, #0
   1dbf8:	cmp	r0, #69	; 0x45
   1dbfc:	orr	r2, r3, r2
   1dc00:	str	r2, [sp, #96]	; 0x60
   1dc04:	beq	1e2d8 <__assert_fail@plt+0xcd20>
   1dc08:	b	1eab4 <__assert_fail@plt+0xd4fc>
   1dc0c:	sub	r0, sl, #1
   1dc10:	cmp	r0, r6
   1dc14:	beq	1e9b4 <__assert_fail@plt+0xd3fc>
   1dc18:	sub	sl, sl, #1
   1dc1c:	b	1e2d8 <__assert_fail@plt+0xcd20>
   1dc20:	mov	r5, #1
   1dc24:	ldrb	r2, [sl, r5]
   1dc28:	cmp	r2, #58	; 0x3a
   1dc2c:	bne	1e284 <__assert_fail@plt+0xcccc>
   1dc30:	add	r5, r5, #1
   1dc34:	b	1dc24 <__assert_fail@plt+0xc66c>
   1dc38:	cmp	r0, #0
   1dc3c:	bne	1e2d8 <__assert_fail@plt+0xcd20>
   1dc40:	ldr	r1, [sp, #96]	; 0x60
   1dc44:	ldr	r2, [sp, #100]	; 0x64
   1dc48:	mov	r5, #0
   1dc4c:	orr	r1, r2, r1
   1dc50:	str	r1, [sp, #96]	; 0x60
   1dc54:	mov	r1, #65	; 0x41
   1dc58:	b	1eab4 <__assert_fail@plt+0xd4fc>
   1dc5c:	cmp	r0, #69	; 0x45
   1dc60:	beq	1e2d8 <__assert_fail@plt+0xcd20>
   1dc64:	ldr	r1, [sp, #96]	; 0x60
   1dc68:	ldr	r2, [sp, #100]	; 0x64
   1dc6c:	mov	r5, #0
   1dc70:	orr	r1, r2, r1
   1dc74:	str	r1, [sp, #96]	; 0x60
   1dc78:	mov	r1, #66	; 0x42
   1dc7c:	b	1eab4 <__assert_fail@plt+0xd4fc>
   1dc80:	cmp	r0, #69	; 0x45
   1dc84:	bne	1e818 <__assert_fail@plt+0xd260>
   1dc88:	mov	r5, #0
   1dc8c:	mov	r1, #67	; 0x43
   1dc90:	b	1eab4 <__assert_fail@plt+0xd4fc>
   1dc94:	cmp	r0, #0
   1dc98:	bne	1e2d8 <__assert_fail@plt+0xcd20>
   1dc9c:	movw	r3, #7435	; 0x1d0b
   1dca0:	movt	r3, #2
   1dca4:	b	1ddb8 <__assert_fail@plt+0xc800>
   1dca8:	cmp	r0, #0
   1dcac:	bne	1e2d8 <__assert_fail@plt+0xcd20>
   1dcb0:	movw	r3, #7444	; 0x1d14
   1dcb4:	cmp	r9, #0
   1dcb8:	movt	r3, #2
   1dcbc:	bne	1ee48 <__assert_fail@plt+0xd890>
   1dcc0:	cmp	r7, #0
   1dcc4:	bpl	1ee48 <__assert_fail@plt+0xd890>
   1dcc8:	mov	r9, #43	; 0x2b
   1dccc:	mov	r4, #4
   1dcd0:	b	1ddb8 <__assert_fail@plt+0xc800>
   1dcd4:	cmp	r0, #69	; 0x45
   1dcd8:	beq	1e2d8 <__assert_fail@plt+0xcd20>
   1dcdc:	ldr	r2, [sp, #60]	; 0x3c
   1dce0:	ldr	r3, [r2]
   1dce4:	b	1e554 <__assert_fail@plt+0xcf9c>
   1dce8:	cmp	r0, #69	; 0x45
   1dcec:	beq	1e2d8 <__assert_fail@plt+0xcd20>
   1dcf0:	ldr	r3, [sp, #56]	; 0x38
   1dcf4:	b	1e554 <__assert_fail@plt+0xcf9c>
   1dcf8:	cmp	r0, #69	; 0x45
   1dcfc:	beq	1e2d8 <__assert_fail@plt+0xcd20>
   1dd00:	ldr	r2, [sp, #88]	; 0x58
   1dd04:	ldr	r3, [r2, #4]
   1dd08:	b	1e554 <__assert_fail@plt+0xcf9c>
   1dd0c:	cmp	r0, #69	; 0x45
   1dd10:	beq	1e2d8 <__assert_fail@plt+0xcd20>
   1dd14:	ldr	r1, [fp, #24]
   1dd18:	cmp	r7, #1
   1dd1c:	mov	r4, #9
   1dd20:	mov	r0, #8
   1dd24:	sub	r6, fp, #48	; 0x30
   1dd28:	movwlt	r7, #9
   1dd2c:	cmp	r7, r4
   1dd30:	blt	1dd58 <__assert_fail@plt+0xc7a0>
   1dd34:	cmp	r4, #2
   1dd38:	blt	1e870 <__assert_fail@plt+0xd2b8>
   1dd3c:	smmul	r2, r1, r8
   1dd40:	asr	r3, r2, #2
   1dd44:	add	r2, r3, r2, lsr #31
   1dd48:	add	r2, r2, r2, lsl #2
   1dd4c:	sub	r2, r1, r2, lsl #1
   1dd50:	cmp	r2, #0
   1dd54:	bne	1e870 <__assert_fail@plt+0xd2b8>
   1dd58:	smmul	r1, r1, r8
   1dd5c:	sub	r0, r0, #1
   1dd60:	sub	r4, r4, #1
   1dd64:	asr	r2, r1, #2
   1dd68:	add	r1, r2, r1, lsr #31
   1dd6c:	cmp	r7, r4
   1dd70:	blt	1dd58 <__assert_fail@plt+0xc7a0>
   1dd74:	b	1dd34 <__assert_fail@plt+0xc77c>
   1dd78:	mov	r5, #1
   1dd7c:	ldr	r1, [sp, #100]	; 0x64
   1dd80:	ldr	r2, [sp, #96]	; 0x60
   1dd84:	orr	r5, r1, r5
   1dd88:	eor	r1, r1, #1
   1dd8c:	and	r2, r2, r1
   1dd90:	mov	r1, #112	; 0x70
   1dd94:	str	r2, [sp, #96]	; 0x60
   1dd98:	b	1eab4 <__assert_fail@plt+0xd4fc>
   1dd9c:	cmp	r0, #69	; 0x45
   1dda0:	beq	1e2d8 <__assert_fail@plt+0xcd20>
   1dda4:	ldr	r2, [sp, #88]	; 0x58
   1dda8:	ldr	r3, [r2]
   1ddac:	b	1e554 <__assert_fail@plt+0xcf9c>
   1ddb0:	movw	r3, #6320	; 0x18b0
   1ddb4:	movt	r3, #2
   1ddb8:	ldr	r0, [sp, #96]	; 0x60
   1ddbc:	str	r3, [sp, #100]	; 0x64
   1ddc0:	mov	r2, r3
   1ddc4:	ldr	r3, [sp, #88]	; 0x58
   1ddc8:	mvn	r1, #0
   1ddcc:	str	lr, [sp, #92]	; 0x5c
   1ddd0:	and	r6, r0, #1
   1ddd4:	ldr	r0, [fp, #20]
   1ddd8:	stm	sp, {r6, r9}
   1dddc:	str	r4, [sp, #8]
   1dde0:	str	r0, [sp, #12]
   1dde4:	ldr	r0, [fp, #24]
   1dde8:	str	r0, [sp, #16]
   1ddec:	mov	r0, #0
   1ddf0:	bl	1d5b0 <__assert_fail@plt+0xbff8>
   1ddf4:	subs	r3, r9, #45	; 0x2d
   1ddf8:	ldr	lr, [sp, #92]	; 0x5c
   1ddfc:	ldr	r1, [sp, #104]	; 0x68
   1de00:	mov	r5, r0
   1de04:	movne	r3, r7
   1de08:	cmp	r7, #0
   1de0c:	movwmi	r3, #0
   1de10:	cmp	r3, r0
   1de14:	movhi	r5, r3
   1de18:	sub	r7, r1, lr
   1de1c:	cmp	r5, r7
   1de20:	bcs	1f188 <__assert_fail@plt+0xdbd0>
   1de24:	ldr	r2, [sp, #108]	; 0x6c
   1de28:	movw	ip, #52428	; 0xcccc
   1de2c:	movt	ip, #3276	; 0xccc
   1de30:	cmp	r2, #0
   1de34:	beq	1e45c <__assert_fail@plt+0xcea4>
   1de38:	cmp	r3, r0
   1de3c:	str	r0, [sp, #96]	; 0x60
   1de40:	bls	1e468 <__assert_fail@plt+0xceb0>
   1de44:	cmp	r9, #48	; 0x30
   1de48:	sub	r8, r3, r0
   1de4c:	cmpne	r9, #43	; 0x2b
   1de50:	bne	1edc4 <__assert_fail@plt+0xd80c>
   1de54:	mov	r0, r2
   1de58:	mov	r1, #48	; 0x30
   1de5c:	b	1edcc <__assert_fail@plt+0xd814>
   1de60:	cmp	r0, #69	; 0x45
   1de64:	beq	1e2d8 <__assert_fail@plt+0xcd20>
   1de68:	ldr	r3, [sp, #88]	; 0x58
   1de6c:	ldr	r2, [r3, #24]
   1de70:	ldr	r3, [r3, #28]
   1de74:	sub	r2, r3, r2
   1de78:	movw	r3, #9363	; 0x2493
   1de7c:	movt	r3, #37449	; 0x9249
   1de80:	add	r2, r2, #7
   1de84:	smmla	r2, r2, r3, r2
   1de88:	b	1decc <__assert_fail@plt+0xc914>
   1de8c:	cmp	r0, #69	; 0x45
   1de90:	beq	1e2d8 <__assert_fail@plt+0xcd20>
   1de94:	ldr	r3, [sp, #88]	; 0x58
   1de98:	movw	r6, #9363	; 0x2493
   1de9c:	movt	r6, #37449	; 0x9249
   1dea0:	ldr	r2, [r3, #24]
   1dea4:	ldr	r3, [r3, #28]
   1dea8:	add	r2, r2, #6
   1deac:	smmla	r5, r2, r6, r2
   1deb0:	asr	r4, r5, #2
   1deb4:	add	r5, r4, r5, lsr #31
   1deb8:	rsb	r5, r5, r5, lsl #3
   1debc:	sub	r2, r5, r2
   1dec0:	add	r2, r3, r2
   1dec4:	add	r2, r2, #7
   1dec8:	smmla	r2, r2, r6, r2
   1decc:	asr	r3, r2, #2
   1ded0:	add	r3, r3, r2, lsr #31
   1ded4:	b	1e554 <__assert_fail@plt+0xcf9c>
   1ded8:	cmp	r0, #79	; 0x4f
   1dedc:	beq	1e2d8 <__assert_fail@plt+0xcd20>
   1dee0:	mov	r5, #0
   1dee4:	mov	r1, #88	; 0x58
   1dee8:	b	1eab4 <__assert_fail@plt+0xd4fc>
   1deec:	cmp	r0, #69	; 0x45
   1def0:	beq	1eaac <__assert_fail@plt+0xd4f4>
   1def4:	cmp	r0, #79	; 0x4f
   1def8:	beq	1e2d8 <__assert_fail@plt+0xcd20>
   1defc:	ldr	r2, [sp, #88]	; 0x58
   1df00:	movw	r6, #63636	; 0xf894
   1df04:	mov	r4, #4
   1df08:	movt	r6, #65535	; 0xffff
   1df0c:	ldr	r3, [r2, #20]
   1df10:	mov	r2, #0
   1df14:	cmp	r3, r6
   1df18:	movw	r6, #1900	; 0x76c
   1df1c:	movwlt	r2, #1
   1df20:	add	r3, r3, r6
   1df24:	b	1e868 <__assert_fail@plt+0xd2b0>
   1df28:	ldr	r0, [sp, #64]	; 0x40
   1df2c:	subs	r5, r9, #45	; 0x2d
   1df30:	bicne	r5, r7, r7, asr #31
   1df34:	mov	r7, lr
   1df38:	bl	11468 <strlen@plt>
   1df3c:	mov	r4, r0
   1df40:	cmp	r5, r0
   1df44:	mov	r6, r0
   1df48:	ldr	r0, [sp, #104]	; 0x68
   1df4c:	movhi	r6, r5
   1df50:	sub	r0, r0, r7
   1df54:	cmp	r6, r0
   1df58:	bcs	1f188 <__assert_fail@plt+0xdbd0>
   1df5c:	ldr	r8, [sp, #108]	; 0x6c
   1df60:	movw	ip, #52428	; 0xcccc
   1df64:	mov	lr, r7
   1df68:	movt	ip, #3276	; 0xccc
   1df6c:	cmp	r8, #0
   1df70:	beq	1ea1c <__assert_fail@plt+0xd464>
   1df74:	cmp	r5, r4
   1df78:	bls	1ed28 <__assert_fail@plt+0xd770>
   1df7c:	uxtb	r1, r9
   1df80:	sub	r5, r5, r4
   1df84:	cmp	r1, #48	; 0x30
   1df88:	cmpne	r1, #43	; 0x2b
   1df8c:	bne	1ef84 <__assert_fail@plt+0xd9cc>
   1df90:	mov	r0, r8
   1df94:	mov	r1, #48	; 0x30
   1df98:	b	1ef8c <__assert_fail@plt+0xd9d4>
   1df9c:	cmp	r0, #0
   1dfa0:	bne	1e2d8 <__assert_fail@plt+0xcd20>
   1dfa4:	ldr	r1, [sp, #96]	; 0x60
   1dfa8:	ldr	r2, [sp, #100]	; 0x64
   1dfac:	mov	r5, #0
   1dfb0:	orr	r1, r2, r1
   1dfb4:	str	r1, [sp, #96]	; 0x60
   1dfb8:	mov	r1, #97	; 0x61
   1dfbc:	b	1eab4 <__assert_fail@plt+0xd4fc>
   1dfc0:	cmp	r0, #79	; 0x4f
   1dfc4:	beq	1e2d8 <__assert_fail@plt+0xcd20>
   1dfc8:	mov	r5, #0
   1dfcc:	mov	r1, #99	; 0x63
   1dfd0:	b	1eab4 <__assert_fail@plt+0xd4fc>
   1dfd4:	cmp	r0, #69	; 0x45
   1dfd8:	beq	1e2d8 <__assert_fail@plt+0xcd20>
   1dfdc:	ldr	r2, [sp, #52]	; 0x34
   1dfe0:	ldr	r3, [r2]
   1dfe4:	b	1e554 <__assert_fail@plt+0xcf9c>
   1dfe8:	ldr	r2, [sp, #52]	; 0x34
   1dfec:	cmp	r0, #69	; 0x45
   1dff0:	bne	1e020 <__assert_fail@plt+0xca68>
   1dff4:	b	1e2d8 <__assert_fail@plt+0xcd20>
   1dff8:	cmp	r0, #69	; 0x45
   1dffc:	beq	1e2d8 <__assert_fail@plt+0xcd20>
   1e000:	ldr	r2, [sp, #88]	; 0x58
   1e004:	mov	r4, #3
   1e008:	str	r4, [sp, #100]	; 0x64
   1e00c:	ldr	r3, [r2, #28]
   1e010:	b	1e058 <__assert_fail@plt+0xcaa0>
   1e014:	ldr	r2, [sp, #60]	; 0x3c
   1e018:	cmp	r0, #69	; 0x45
   1e01c:	beq	1e2d8 <__assert_fail@plt+0xcd20>
   1e020:	ldr	r3, [r2]
   1e024:	b	1e034 <__assert_fail@plt+0xca7c>
   1e028:	ldr	r3, [sp, #56]	; 0x38
   1e02c:	cmp	r0, #69	; 0x45
   1e030:	beq	1e2d8 <__assert_fail@plt+0xcd20>
   1e034:	cmp	r9, #0
   1e038:	movweq	r9, #95	; 0x5f
   1e03c:	b	1e554 <__assert_fail@plt+0xcf9c>
   1e040:	cmp	r0, #69	; 0x45
   1e044:	beq	1e2d8 <__assert_fail@plt+0xcd20>
   1e048:	ldr	r2, [sp, #88]	; 0x58
   1e04c:	mov	r4, #2
   1e050:	str	r4, [sp, #100]	; 0x64
   1e054:	ldr	r3, [r2, #16]
   1e058:	mov	r2, #0
   1e05c:	cmn	r3, #1
   1e060:	add	r3, r3, #1
   1e064:	movwlt	r2, #1
   1e068:	b	1e560 <__assert_fail@plt+0xcfa8>
   1e06c:	subs	r0, r9, #45	; 0x2d
   1e070:	ldr	r1, [sp, #104]	; 0x68
   1e074:	bicne	r0, r7, r7, asr #31
   1e078:	cmp	r0, #1
   1e07c:	mov	r5, r0
   1e080:	movls	r5, #1
   1e084:	sub	r1, r1, lr
   1e088:	cmp	r5, r1
   1e08c:	bcs	1f188 <__assert_fail@plt+0xdbd0>
   1e090:	ldr	r8, [sp, #108]	; 0x6c
   1e094:	mov	r4, #-2147483648	; 0x80000000
   1e098:	cmp	r8, #0
   1e09c:	beq	1ea14 <__assert_fail@plt+0xd45c>
   1e0a0:	cmp	r0, #2
   1e0a4:	bcc	1f070 <__assert_fail@plt+0xdab8>
   1e0a8:	uxtb	r1, r9
   1e0ac:	sub	r4, r0, #1
   1e0b0:	cmp	r1, #48	; 0x30
   1e0b4:	cmpne	r1, #43	; 0x2b
   1e0b8:	bne	1f044 <__assert_fail@plt+0xda8c>
   1e0bc:	mov	r0, r8
   1e0c0:	mov	r1, #48	; 0x30
   1e0c4:	b	1f04c <__assert_fail@plt+0xda94>
   1e0c8:	ldr	r2, [sp, #88]	; 0x58
   1e0cc:	mov	r3, #11
   1e0d0:	mov	r4, #1
   1e0d4:	ldr	r2, [r2, #16]
   1e0d8:	mul	r2, r2, r3
   1e0dc:	mov	r3, #1
   1e0e0:	str	r3, [sp, #100]	; 0x64
   1e0e4:	add	r3, r4, r2, asr #5
   1e0e8:	mov	r2, #0
   1e0ec:	b	1e560 <__assert_fail@plt+0xcfa8>
   1e0f0:	ldr	r2, [sp, #88]	; 0x58
   1e0f4:	mov	r0, #28
   1e0f8:	add	r1, sp, #112	; 0x70
   1e0fc:	str	lr, [sp, #92]	; 0x5c
   1e100:	mov	r4, r1
   1e104:	mov	r3, r2
   1e108:	add	r2, r2, #16
   1e10c:	vld1.32	{d16-d17}, [r3], r0
   1e110:	vld1.32	{d18-d19}, [r2]
   1e114:	add	r2, r1, #16
   1e118:	vld1.32	{d20-d21}, [r3]
   1e11c:	vst1.64	{d16-d17}, [r4], r0
   1e120:	mvn	r0, #0
   1e124:	vst1.64	{d18-d19}, [r2]
   1e128:	vst1.32	{d20-d21}, [r4]
   1e12c:	str	r0, [r4]
   1e130:	ldr	r0, [fp, #20]
   1e134:	bl	1c3f0 <__assert_fail@plt+0xae38>
   1e138:	ldr	r1, [r4]
   1e13c:	cmp	r1, #0
   1e140:	bmi	1f1a4 <__assert_fail@plt+0xdbec>
   1e144:	ldr	r1, [sp, #40]	; 0x28
   1e148:	lsr	r2, r0, #31
   1e14c:	mov	r3, r0
   1e150:	smmul	r6, r3, r8
   1e154:	cmp	r0, #0
   1e158:	asr	r5, r6, #2
   1e15c:	add	r6, r5, r6, lsr #31
   1e160:	add	r5, r6, r6, lsl #2
   1e164:	sub	r5, r3, r5, lsl #1
   1e168:	add	r3, r3, #9
   1e16c:	rsbmi	r5, r5, #0
   1e170:	cmp	r3, #18
   1e174:	mov	r3, r6
   1e178:	add	r5, r5, #48	; 0x30
   1e17c:	strb	r5, [r1], #-1
   1e180:	bhi	1e150 <__assert_fail@plt+0xcb98>
   1e184:	ldr	lr, [sp, #92]	; 0x5c
   1e188:	cmp	r7, #0
   1e18c:	movw	ip, #52428	; 0xcccc
   1e190:	add	r8, r1, #1
   1e194:	mov	r4, #0
   1e198:	mov	r6, sl
   1e19c:	movwmi	r7, #1
   1e1a0:	cmp	r9, #0
   1e1a4:	movt	ip, #3276	; 0xccc
   1e1a8:	movweq	r9, #48	; 0x30
   1e1ac:	mov	r3, r7
   1e1b0:	b	1e5f4 <__assert_fail@plt+0xd03c>
   1e1b4:	subs	r0, r9, #45	; 0x2d
   1e1b8:	ldr	r1, [sp, #104]	; 0x68
   1e1bc:	bicne	r0, r7, r7, asr #31
   1e1c0:	cmp	r0, #1
   1e1c4:	mov	r5, r0
   1e1c8:	movls	r5, #1
   1e1cc:	sub	r1, r1, lr
   1e1d0:	cmp	r5, r1
   1e1d4:	bcs	1f188 <__assert_fail@plt+0xdbd0>
   1e1d8:	ldr	r8, [sp, #108]	; 0x6c
   1e1dc:	mov	r4, #-2147483648	; 0x80000000
   1e1e0:	cmp	r8, #0
   1e1e4:	beq	1ea14 <__assert_fail@plt+0xd45c>
   1e1e8:	cmp	r0, #2
   1e1ec:	bcc	1f0a8 <__assert_fail@plt+0xdaf0>
   1e1f0:	uxtb	r1, r9
   1e1f4:	sub	r4, r0, #1
   1e1f8:	cmp	r1, #48	; 0x30
   1e1fc:	cmpne	r1, #43	; 0x2b
   1e200:	bne	1f07c <__assert_fail@plt+0xdac4>
   1e204:	mov	r0, r8
   1e208:	mov	r1, #48	; 0x30
   1e20c:	b	1f084 <__assert_fail@plt+0xdacc>
   1e210:	ldr	r2, [sp, #88]	; 0x58
   1e214:	movw	r3, #9363	; 0x2493
   1e218:	movt	r3, #37449	; 0x9249
   1e21c:	ldr	r2, [r2, #24]
   1e220:	add	r2, r2, #6
   1e224:	smmla	r3, r2, r3, r2
   1e228:	asr	r6, r3, #2
   1e22c:	add	r3, r6, r3, lsr #31
   1e230:	rsb	r3, r3, r3, lsl #3
   1e234:	sub	r2, r2, r3
   1e238:	add	r3, r2, #1
   1e23c:	mov	r2, #1
   1e240:	b	1e558 <__assert_fail@plt+0xcfa0>
   1e244:	cmp	r0, #69	; 0x45
   1e248:	beq	1e2d8 <__assert_fail@plt+0xcd20>
   1e24c:	ldr	r2, [sp, #88]	; 0x58
   1e250:	ldr	r3, [r2, #24]
   1e254:	mov	r2, #1
   1e258:	b	1e558 <__assert_fail@plt+0xcfa0>
   1e25c:	cmp	r0, #79	; 0x4f
   1e260:	beq	1e2d8 <__assert_fail@plt+0xcd20>
   1e264:	mov	r5, #0
   1e268:	mov	r1, #120	; 0x78
   1e26c:	b	1eab4 <__assert_fail@plt+0xd4fc>
   1e270:	cmp	r0, #69	; 0x45
   1e274:	bne	1e974 <__assert_fail@plt+0xd3bc>
   1e278:	mov	r5, #0
   1e27c:	mov	r1, #121	; 0x79
   1e280:	b	1eab4 <__assert_fail@plt+0xd4fc>
   1e284:	cmp	r2, #122	; 0x7a
   1e288:	bne	1e2d8 <__assert_fail@plt+0xcd20>
   1e28c:	add	sl, sl, r5
   1e290:	ldr	r3, [sp, #88]	; 0x58
   1e294:	ldr	r2, [r3, #32]
   1e298:	cmp	r2, #0
   1e29c:	bmi	1e530 <__assert_fail@plt+0xcf78>
   1e2a0:	mov	r8, lr
   1e2a4:	ldr	lr, [r3, #36]	; 0x24
   1e2a8:	cmp	lr, #0
   1e2ac:	bmi	1ea24 <__assert_fail@plt+0xd46c>
   1e2b0:	mov	r2, #0
   1e2b4:	bne	1ea28 <__assert_fail@plt+0xd470>
   1e2b8:	ldr	r2, [sp, #64]	; 0x40
   1e2bc:	ldrb	r2, [r2]
   1e2c0:	sub	r2, r2, #45	; 0x2d
   1e2c4:	clz	r2, r2
   1e2c8:	lsr	r2, r2, #5
   1e2cc:	cmp	r5, #3
   1e2d0:	bls	1ea30 <__assert_fail@plt+0xd478>
   1e2d4:	mov	lr, r8
   1e2d8:	subs	r5, r9, #45	; 0x2d
   1e2dc:	ldr	r0, [sp, #104]	; 0x68
   1e2e0:	sub	r8, sl, r6
   1e2e4:	ldr	r3, [sp, #108]	; 0x6c
   1e2e8:	bicne	r5, r7, r7, asr #31
   1e2ec:	add	r4, r8, #1
   1e2f0:	mov	r7, r4
   1e2f4:	cmp	r5, r4
   1e2f8:	movhi	r7, r5
   1e2fc:	sub	r0, r0, lr
   1e300:	cmp	r7, r0
   1e304:	bcs	1f188 <__assert_fail@plt+0xdbd0>
   1e308:	cmp	r3, #0
   1e30c:	beq	1e340 <__assert_fail@plt+0xcd88>
   1e310:	cmp	r5, r4
   1e314:	mov	r1, r3
   1e318:	bls	1e36c <__assert_fail@plt+0xcdb4>
   1e31c:	uxtb	r0, r9
   1e320:	sub	r2, r5, r4
   1e324:	str	lr, [sp, #92]	; 0x5c
   1e328:	cmp	r0, #48	; 0x30
   1e32c:	cmpne	r0, #43	; 0x2b
   1e330:	bne	1e348 <__assert_fail@plt+0xcd90>
   1e334:	mov	r0, r3
   1e338:	mov	r1, #48	; 0x30
   1e33c:	b	1e350 <__assert_fail@plt+0xcd98>
   1e340:	mov	r8, #0
   1e344:	b	1e44c <__assert_fail@plt+0xce94>
   1e348:	mov	r0, r3
   1e34c:	mov	r1, #32
   1e350:	mov	r9, r2
   1e354:	bl	114b0 <memset@plt>
   1e358:	ldr	r0, [sp, #108]	; 0x6c
   1e35c:	ldr	lr, [sp, #92]	; 0x5c
   1e360:	movw	ip, #52428	; 0xcccc
   1e364:	movt	ip, #3276	; 0xccc
   1e368:	add	r1, r0, r9
   1e36c:	ldr	r0, [sp, #96]	; 0x60
   1e370:	str	r1, [sp, #100]	; 0x64
   1e374:	tst	r0, #1
   1e378:	beq	1e424 <__assert_fail@plt+0xce6c>
   1e37c:	cmp	r4, #0
   1e380:	beq	1e444 <__assert_fail@plt+0xce8c>
   1e384:	sub	r0, sl, r6
   1e388:	str	lr, [sp, #92]	; 0x5c
   1e38c:	add	r9, r0, #1
   1e390:	bl	11420 <__ctype_toupper_loc@plt>
   1e394:	tst	r9, #1
   1e398:	mov	r1, r4
   1e39c:	beq	1e3b8 <__assert_fail@plt+0xce00>
   1e3a0:	ldrb	r1, [sl]
   1e3a4:	ldr	r2, [r0]
   1e3a8:	ldr	r1, [r2, r1, lsl #2]
   1e3ac:	ldr	r2, [sp, #100]	; 0x64
   1e3b0:	strb	r1, [r2, r8]
   1e3b4:	mov	r1, r8
   1e3b8:	ldr	lr, [sp, #92]	; 0x5c
   1e3bc:	movw	ip, #52428	; 0xcccc
   1e3c0:	cmp	sl, r6
   1e3c4:	movt	ip, #3276	; 0xccc
   1e3c8:	beq	1e444 <__assert_fail@plt+0xce8c>
   1e3cc:	cmp	r5, r9
   1e3d0:	ldr	r3, [sp, #108]	; 0x6c
   1e3d4:	add	r2, r1, r6
   1e3d8:	movhi	r9, r5
   1e3dc:	add	r2, r2, r9
   1e3e0:	sub	r2, r2, sl
   1e3e4:	add	r2, r3, r2
   1e3e8:	sub	r3, r6, #2
   1e3ec:	sub	r2, r2, #2
   1e3f0:	add	r6, r3, r1
   1e3f4:	ldr	r5, [r0]
   1e3f8:	ldrb	r6, [r6, #1]
   1e3fc:	ldr	r6, [r5, r6, lsl #2]
   1e400:	strb	r6, [r2]
   1e404:	ldrb	r6, [r3, r1]
   1e408:	ldr	r5, [r0]
   1e40c:	subs	r1, r1, #2
   1e410:	ldr	r6, [r5, r6, lsl #2]
   1e414:	strb	r6, [r2, #-1]
   1e418:	sub	r2, r2, #2
   1e41c:	bne	1e3f0 <__assert_fail@plt+0xce38>
   1e420:	b	1e444 <__assert_fail@plt+0xce8c>
   1e424:	mov	r0, r1
   1e428:	mov	r1, r6
   1e42c:	mov	r2, r4
   1e430:	mov	r5, lr
   1e434:	bl	112f4 <memcpy@plt>
   1e438:	movw	ip, #52428	; 0xcccc
   1e43c:	mov	lr, r5
   1e440:	movt	ip, #3276	; 0xccc
   1e444:	ldr	r0, [sp, #100]	; 0x64
   1e448:	add	r8, r0, r4
   1e44c:	add	lr, r7, lr
   1e450:	mov	r6, sl
   1e454:	mov	r4, #-2147483648	; 0x80000000
   1e458:	b	1d6b4 <__assert_fail@plt+0xc0fc>
   1e45c:	mov	r8, #0
   1e460:	mov	r4, #-2147483648	; 0x80000000
   1e464:	b	1f14c <__assert_fail@plt+0xdb94>
   1e468:	ldr	r3, [sp, #88]	; 0x58
   1e46c:	b	1ede0 <__assert_fail@plt+0xd828>
   1e470:	sub	r2, r2, #1
   1e474:	movw	r4, #365	; 0x16d
   1e478:	tst	r2, #3
   1e47c:	bne	1e4c0 <__assert_fail@plt+0xcf08>
   1e480:	movw	r4, #34079	; 0x851f
   1e484:	movt	r4, #20971	; 0x51eb
   1e488:	smmul	r4, r2, r4
   1e48c:	asr	r6, r4, #5
   1e490:	add	r3, r6, r4, lsr #31
   1e494:	mov	r6, #100	; 0x64
   1e498:	mls	r3, r3, r6, r2
   1e49c:	asr	r6, r4, #7
   1e4a0:	add	r4, r6, r4, lsr #31
   1e4a4:	mov	r6, #400	; 0x190
   1e4a8:	mls	r2, r4, r6, r2
   1e4ac:	movw	r4, #365	; 0x16d
   1e4b0:	cmp	r2, #0
   1e4b4:	movweq	r4, #366	; 0x16e
   1e4b8:	cmp	r3, #0
   1e4bc:	movwne	r4, #366	; 0x16e
   1e4c0:	add	r2, r4, r5
   1e4c4:	movw	r5, #9363	; 0x2493
   1e4c8:	movw	r4, #382	; 0x17e
   1e4cc:	sub	r3, r4, r8
   1e4d0:	movt	r5, #37449	; 0x9249
   1e4d4:	add	r2, r3, r2
   1e4d8:	smmla	r2, r2, r5, r2
   1e4dc:	asr	r4, r2, #2
   1e4e0:	add	r2, r4, r2, lsr #31
   1e4e4:	rsb	r2, r2, r2, lsl #3
   1e4e8:	sub	r2, r2, r3
   1e4ec:	mvn	r3, #0
   1e4f0:	add	r4, r2, #3
   1e4f4:	cmp	r1, #71	; 0x47
   1e4f8:	bne	1db94 <__assert_fail@plt+0xc5dc>
   1e4fc:	movw	r2, #63636	; 0xf894
   1e500:	movt	r2, #65535	; 0xffff
   1e504:	sub	r6, r2, r3
   1e508:	add	r3, lr, r3
   1e50c:	mov	r2, #0
   1e510:	cmp	lr, r6
   1e514:	ldr	lr, [sp, #92]	; 0x5c
   1e518:	movw	r6, #1900	; 0x76c
   1e51c:	add	r3, r3, r6
   1e520:	mov	r6, #4
   1e524:	movwlt	r2, #1
   1e528:	str	r6, [sp, #100]	; 0x64
   1e52c:	b	1ee74 <__assert_fail@plt+0xd8bc>
   1e530:	ldr	r8, [sp, #108]	; 0x6c
   1e534:	mov	r6, sl
   1e538:	mov	r4, #-2147483648	; 0x80000000
   1e53c:	b	1d6b4 <__assert_fail@plt+0xc0fc>
   1e540:	smmla	r2, r4, r5, r4
   1e544:	ldr	lr, [sp, #92]	; 0x5c
   1e548:	asr	r3, r2, #2
   1e54c:	add	r2, r3, r2, lsr #31
   1e550:	add	r3, r2, #1
   1e554:	mov	r2, #2
   1e558:	str	r2, [sp, #100]	; 0x64
   1e55c:	lsr	r2, r3, #31
   1e560:	cmp	r2, #0
   1e564:	mov	r6, #0
   1e568:	mov	r4, #0
   1e56c:	movwne	r2, #1
   1e570:	cmp	r0, #79	; 0x4f
   1e574:	moveq	r5, #0
   1e578:	cmpeq	r2, #0
   1e57c:	beq	1eab4 <__assert_fail@plt+0xd4fc>
   1e580:	ldr	r8, [sp, #80]	; 0x50
   1e584:	cmp	r2, #0
   1e588:	rsbne	r3, r3, #0
   1e58c:	tst	r6, #1
   1e590:	asr	r6, r6, #1
   1e594:	movne	r0, #58	; 0x3a
   1e598:	strbne	r0, [r8, #-1]!
   1e59c:	movw	r0, #52429	; 0xcccd
   1e5a0:	cmp	r3, #9
   1e5a4:	movt	r0, #52428	; 0xcccc
   1e5a8:	umull	r0, r1, r3, r0
   1e5ac:	lsr	r0, r1, #3
   1e5b0:	add	r1, r0, r0, lsl #2
   1e5b4:	sub	r1, r3, r1, lsl #1
   1e5b8:	mov	r3, r0
   1e5bc:	orr	r1, r1, #48	; 0x30
   1e5c0:	strb	r1, [r8, #-1]!
   1e5c4:	bhi	1e58c <__assert_fail@plt+0xcfd4>
   1e5c8:	cmp	r6, #0
   1e5cc:	mov	r3, r0
   1e5d0:	bne	1e58c <__assert_fail@plt+0xcfd4>
   1e5d4:	cmp	r7, #0
   1e5d8:	ldr	r3, [sp, #100]	; 0x64
   1e5dc:	mov	r6, sl
   1e5e0:	movpl	r3, r7
   1e5e4:	cmp	r4, #0
   1e5e8:	movwne	r4, #43	; 0x2b
   1e5ec:	cmp	r9, #0
   1e5f0:	movweq	r9, #48	; 0x30
   1e5f4:	ldr	r1, [sp, #80]	; 0x50
   1e5f8:	cmp	r2, #0
   1e5fc:	mov	r0, r3
   1e600:	movwne	r4, #45	; 0x2d
   1e604:	cmp	r4, #0
   1e608:	subne	r0, r0, #1
   1e60c:	sub	sl, r1, r8
   1e610:	sub	r0, r0, sl
   1e614:	cmp	r0, #1
   1e618:	movwlt	r0, #0
   1e61c:	subs	r5, r9, #45	; 0x2d
   1e620:	movne	r5, r0
   1e624:	cmp	r4, #0
   1e628:	beq	1e674 <__assert_fail@plt+0xd0bc>
   1e62c:	ldr	r7, [sp, #108]	; 0x6c
   1e630:	cmp	r9, #95	; 0x5f
   1e634:	bne	1e688 <__assert_fail@plt+0xd0d0>
   1e638:	cmp	r7, #0
   1e63c:	beq	1e67c <__assert_fail@plt+0xd0c4>
   1e640:	mov	r0, r7
   1e644:	mov	r1, #32
   1e648:	mov	r2, r5
   1e64c:	str	lr, [sp, #92]	; 0x5c
   1e650:	str	r3, [sp, #100]	; 0x64
   1e654:	bl	114b0 <memset@plt>
   1e658:	ldr	r7, [sp, #108]	; 0x6c
   1e65c:	ldr	r3, [sp, #100]	; 0x64
   1e660:	ldr	lr, [sp, #92]	; 0x5c
   1e664:	movw	ip, #52428	; 0xcccc
   1e668:	movt	ip, #3276	; 0xccc
   1e66c:	add	r7, r7, r5
   1e670:	b	1e680 <__assert_fail@plt+0xd0c8>
   1e674:	ldr	r7, [sp, #108]	; 0x6c
   1e678:	b	1e6ac <__assert_fail@plt+0xd0f4>
   1e67c:	mov	r7, #0
   1e680:	sub	r3, r3, r5
   1e684:	add	lr, r5, lr
   1e688:	ldr	r0, [sp, #104]	; 0x68
   1e68c:	sub	r0, r0, lr
   1e690:	cmp	r0, #2
   1e694:	bcc	1f188 <__assert_fail@plt+0xdbd0>
   1e698:	cmp	r7, #0
   1e69c:	sub	r3, r3, #1
   1e6a0:	add	lr, lr, #1
   1e6a4:	strbne	r4, [r7], #1
   1e6a8:	moveq	r7, #0
   1e6ac:	subs	r5, r9, #45	; 0x2d
   1e6b0:	ldr	r0, [sp, #104]	; 0x68
   1e6b4:	mov	r4, sl
   1e6b8:	bicne	r5, r3, r3, asr #31
   1e6bc:	cmp	r5, sl
   1e6c0:	movhi	r4, r5
   1e6c4:	sub	r0, r0, lr
   1e6c8:	cmp	r4, r0
   1e6cc:	bcs	1f188 <__assert_fail@plt+0xdbd0>
   1e6d0:	cmp	r7, #0
   1e6d4:	beq	1e704 <__assert_fail@plt+0xd14c>
   1e6d8:	cmp	r5, sl
   1e6dc:	mov	r1, r7
   1e6e0:	bls	1e730 <__assert_fail@plt+0xd178>
   1e6e4:	cmp	r9, #48	; 0x30
   1e6e8:	sub	r2, r5, sl
   1e6ec:	str	lr, [sp, #92]	; 0x5c
   1e6f0:	cmpne	r9, #43	; 0x2b
   1e6f4:	bne	1e710 <__assert_fail@plt+0xd158>
   1e6f8:	mov	r0, r7
   1e6fc:	mov	r1, #48	; 0x30
   1e700:	b	1e718 <__assert_fail@plt+0xd160>
   1e704:	mov	r8, #0
   1e708:	add	lr, r4, lr
   1e70c:	b	1e454 <__assert_fail@plt+0xce9c>
   1e710:	mov	r0, r7
   1e714:	mov	r1, #32
   1e718:	mov	r9, r2
   1e71c:	bl	114b0 <memset@plt>
   1e720:	ldr	lr, [sp, #92]	; 0x5c
   1e724:	movw	ip, #52428	; 0xcccc
   1e728:	add	r1, r7, r9
   1e72c:	movt	ip, #3276	; 0xccc
   1e730:	ldr	r0, [sp, #96]	; 0x60
   1e734:	tst	r0, #1
   1e738:	beq	1e7e8 <__assert_fail@plt+0xd230>
   1e73c:	mov	r9, r1
   1e740:	cmp	sl, #0
   1e744:	str	r7, [sp, #108]	; 0x6c
   1e748:	beq	1e80c <__assert_fail@plt+0xd254>
   1e74c:	str	lr, [sp, #92]	; 0x5c
   1e750:	mvn	r7, r8
   1e754:	bl	11420 <__ctype_toupper_loc@plt>
   1e758:	tst	sl, #1
   1e75c:	mov	r1, sl
   1e760:	beq	1e778 <__assert_fail@plt+0xd1c0>
   1e764:	sub	r1, sl, #1
   1e768:	ldr	r3, [r0]
   1e76c:	ldrb	r2, [r8, r1]
   1e770:	ldr	r2, [r3, r2, lsl #2]
   1e774:	strb	r2, [r9, r1]
   1e778:	ldr	r2, [sp, #44]	; 0x2c
   1e77c:	ldr	lr, [sp, #92]	; 0x5c
   1e780:	movw	ip, #52428	; 0xcccc
   1e784:	movt	ip, #3276	; 0xccc
   1e788:	cmp	r7, r2
   1e78c:	beq	1e80c <__assert_fail@plt+0xd254>
   1e790:	cmp	r5, sl
   1e794:	add	r2, r1, r8
   1e798:	ldr	r3, [sp, #36]	; 0x24
   1e79c:	movls	r5, sl
   1e7a0:	add	r2, r2, r5
   1e7a4:	ldr	r5, [sp, #108]	; 0x6c
   1e7a8:	add	r3, r5, r3
   1e7ac:	add	r2, r3, r2
   1e7b0:	sub	r3, r8, #2
   1e7b4:	add	r5, r3, r1
   1e7b8:	ldr	r7, [r0]
   1e7bc:	ldrb	r5, [r5, #1]
   1e7c0:	ldr	r7, [r7, r5, lsl #2]
   1e7c4:	strb	r7, [r2]
   1e7c8:	ldrb	r7, [r3, r1]
   1e7cc:	ldr	r5, [r0]
   1e7d0:	subs	r1, r1, #2
   1e7d4:	ldr	r7, [r5, r7, lsl #2]
   1e7d8:	strb	r7, [r2, #-1]
   1e7dc:	sub	r2, r2, #2
   1e7e0:	bne	1e7b4 <__assert_fail@plt+0xd1fc>
   1e7e4:	b	1e80c <__assert_fail@plt+0xd254>
   1e7e8:	mov	r9, r1
   1e7ec:	mov	r0, r1
   1e7f0:	mov	r1, r8
   1e7f4:	mov	r2, sl
   1e7f8:	mov	r5, lr
   1e7fc:	bl	112f4 <memcpy@plt>
   1e800:	movw	ip, #52428	; 0xcccc
   1e804:	mov	lr, r5
   1e808:	movt	ip, #3276	; 0xccc
   1e80c:	add	r8, r9, sl
   1e810:	add	lr, r4, lr
   1e814:	b	1e454 <__assert_fail@plt+0xce9c>
   1e818:	ldr	r2, [sp, #88]	; 0x58
   1e81c:	movw	r5, #63636	; 0xf894
   1e820:	mov	r3, #0
   1e824:	mvn	r4, #98	; 0x62
   1e828:	movt	r5, #65535	; 0xffff
   1e82c:	ldr	r6, [r2, #20]
   1e830:	mov	r2, #0
   1e834:	cmp	r6, r5
   1e838:	movwge	r3, #1
   1e83c:	cmp	r6, r5
   1e840:	and	r3, r3, r6, lsr #31
   1e844:	movwlt	r2, #1
   1e848:	smlabb	r3, r3, r4, r6
   1e84c:	movw	r4, #34079	; 0x851f
   1e850:	movt	r4, #20971	; 0x51eb
   1e854:	smmul	r3, r3, r4
   1e858:	asr	r4, r3, #5
   1e85c:	add	r3, r4, r3, lsr #31
   1e860:	mov	r4, #2
   1e864:	add	r3, r3, #19
   1e868:	str	r4, [sp, #100]	; 0x64
   1e86c:	b	1ee74 <__assert_fail@plt+0xd8bc>
   1e870:	cmp	r4, #1
   1e874:	blt	1e8a8 <__assert_fail@plt+0xd2f0>
   1e878:	smmul	r2, r1, r8
   1e87c:	cmp	r0, #0
   1e880:	asr	r3, r2, #2
   1e884:	add	r2, r3, r2, lsr #31
   1e888:	add	r3, r2, r2, lsl #2
   1e88c:	sub	r1, r1, r3, lsl #1
   1e890:	add	r1, r1, #48	; 0x30
   1e894:	strb	r1, [r6, r0]
   1e898:	sub	r1, r0, #1
   1e89c:	mov	r0, r1
   1e8a0:	mov	r1, r2
   1e8a4:	bgt	1e878 <__assert_fail@plt+0xd2c0>
   1e8a8:	ldr	r0, [sp, #104]	; 0x68
   1e8ac:	cmp	r9, #0
   1e8b0:	movweq	r9, #48	; 0x30
   1e8b4:	sub	r8, r0, lr
   1e8b8:	cmp	r4, r8
   1e8bc:	bcs	1f188 <__assert_fail@plt+0xdbd0>
   1e8c0:	ldr	r0, [sp, #108]	; 0x6c
   1e8c4:	mov	r2, #0
   1e8c8:	mov	r5, #0
   1e8cc:	cmp	r0, #0
   1e8d0:	beq	1ef18 <__assert_fail@plt+0xd960>
   1e8d4:	ldr	r1, [sp, #96]	; 0x60
   1e8d8:	tst	r1, #1
   1e8dc:	beq	1eef0 <__assert_fail@plt+0xd938>
   1e8e0:	cmp	r4, #0
   1e8e4:	beq	1ef0c <__assert_fail@plt+0xd954>
   1e8e8:	mov	r5, lr
   1e8ec:	bl	11420 <__ctype_toupper_loc@plt>
   1e8f0:	tst	r4, #1
   1e8f4:	mov	r1, r4
   1e8f8:	beq	1e920 <__assert_fail@plt+0xd368>
   1e8fc:	ldr	r1, [sp, #24]
   1e900:	ldr	r2, [r0]
   1e904:	add	r1, r1, r4
   1e908:	ldrb	r1, [r1, #-9]
   1e90c:	ldr	r1, [r2, r1, lsl #2]
   1e910:	ldr	r2, [sp, #108]	; 0x6c
   1e914:	add	r2, r2, r4
   1e918:	strb	r1, [r2, #-1]
   1e91c:	sub	r1, r4, #1
   1e920:	ldr	r6, [sp, #28]
   1e924:	movw	ip, #52428	; 0xcccc
   1e928:	cmp	r4, #1
   1e92c:	mov	lr, r5
   1e930:	movt	ip, #3276	; 0xccc
   1e934:	beq	1ef0c <__assert_fail@plt+0xd954>
   1e938:	ldr	r2, [sp, #108]	; 0x6c
   1e93c:	sub	r2, r2, #2
   1e940:	add	r3, r6, r1
   1e944:	ldr	r5, [r0]
   1e948:	ldrb	r3, [r3, #1]
   1e94c:	ldr	r3, [r5, r3, lsl #2]
   1e950:	add	r5, r2, r1
   1e954:	strb	r3, [r5, #1]
   1e958:	ldrb	r3, [r6, r1]
   1e95c:	ldr	r5, [r0]
   1e960:	ldr	r3, [r5, r3, lsl #2]
   1e964:	strb	r3, [r2, r1]
   1e968:	subs	r1, r1, #2
   1e96c:	bne	1e940 <__assert_fail@plt+0xd388>
   1e970:	b	1ef0c <__assert_fail@plt+0xd954>
   1e974:	ldr	r2, [sp, #88]	; 0x58
   1e978:	ldr	r6, [r2, #20]
   1e97c:	movw	r2, #34079	; 0x851f
   1e980:	movt	r2, #20971	; 0x51eb
   1e984:	smmul	r2, r6, r2
   1e988:	asr	r3, r2, #5
   1e98c:	add	r2, r3, r2, lsr #31
   1e990:	mov	r3, #100	; 0x64
   1e994:	mls	r5, r2, r3, r6
   1e998:	mov	r2, #0
   1e99c:	mov	r3, #2
   1e9a0:	cmn	r5, #1
   1e9a4:	ble	1ee5c <__assert_fail@plt+0xd8a4>
   1e9a8:	str	r3, [sp, #100]	; 0x64
   1e9ac:	mov	r3, r5
   1e9b0:	b	1ee74 <__assert_fail@plt+0xd8bc>
   1e9b4:	subs	r0, r9, #45	; 0x2d
   1e9b8:	ldr	r1, [sp, #104]	; 0x68
   1e9bc:	bicne	r0, r7, r7, asr #31
   1e9c0:	cmp	r0, #1
   1e9c4:	mov	r5, r0
   1e9c8:	movls	r5, #1
   1e9cc:	sub	r1, r1, lr
   1e9d0:	cmp	r5, r1
   1e9d4:	bcs	1f188 <__assert_fail@plt+0xdbd0>
   1e9d8:	ldr	r8, [sp, #108]	; 0x6c
   1e9dc:	mov	r4, #-2147483648	; 0x80000000
   1e9e0:	cmp	r8, #0
   1e9e4:	beq	1ea14 <__assert_fail@plt+0xd45c>
   1e9e8:	mov	r1, #37	; 0x25
   1e9ec:	cmp	r0, #2
   1e9f0:	bcc	1f148 <__assert_fail@plt+0xdb90>
   1e9f4:	uxtb	r1, r9
   1e9f8:	sub	r4, r0, #1
   1e9fc:	cmp	r1, #48	; 0x30
   1ea00:	cmpne	r1, #43	; 0x2b
   1ea04:	bne	1f118 <__assert_fail@plt+0xdb60>
   1ea08:	mov	r0, r8
   1ea0c:	mov	r1, #48	; 0x30
   1ea10:	b	1f120 <__assert_fail@plt+0xdb68>
   1ea14:	mov	r8, #0
   1ea18:	b	1f14c <__assert_fail@plt+0xdb94>
   1ea1c:	mov	r8, #0
   1ea20:	b	1f034 <__assert_fail@plt+0xda7c>
   1ea24:	mov	r2, #1
   1ea28:	cmp	r5, #3
   1ea2c:	bhi	1e2d4 <__assert_fail@plt+0xcd1c>
   1ea30:	movw	ip, #34953	; 0x8889
   1ea34:	movt	ip, #34952	; 0x8888
   1ea38:	smmla	r6, lr, ip, lr
   1ea3c:	asr	r3, r6, #5
   1ea40:	add	r6, r3, r6, lsr #31
   1ea44:	smmla	r3, r6, ip, r6
   1ea48:	asr	r4, r3, #5
   1ea4c:	add	r3, r4, r3, lsr #31
   1ea50:	rsb	r3, r3, r3, lsl #4
   1ea54:	sub	ip, r6, r3, lsl #2
   1ea58:	movw	r3, #46021	; 0xb3c5
   1ea5c:	movt	r3, #37282	; 0x91a2
   1ea60:	smmla	r3, lr, r3, lr
   1ea64:	asr	r4, r3, #11
   1ea68:	add	r3, r4, r3, lsr #31
   1ea6c:	rsb	r4, r6, r6, lsl #4
   1ea70:	add	r6, pc, #4
   1ea74:	sub	r4, lr, r4, lsl #2
   1ea78:	ldr	pc, [r6, r5, lsl #2]
   1ea7c:	andeq	lr, r1, ip, lsl #21
   1ea80:	strdeq	pc, [r1], -r0
   1ea84:	andeq	lr, r1, r8, asr #29
   1ea88:	andeq	lr, r1, r0, asr #29
   1ea8c:	mov	r6, #100	; 0x64
   1ea90:	mla	r3, r3, r6, ip
   1ea94:	mov	r6, #5
   1ea98:	str	r6, [sp, #100]	; 0x64
   1ea9c:	mov	r4, #1
   1eaa0:	mov	r6, #0
   1eaa4:	mov	lr, r8
   1eaa8:	b	1f10c <__assert_fail@plt+0xdb54>
   1eaac:	mov	r5, #0
   1eab0:	mov	r1, #89	; 0x59
   1eab4:	movw	r2, #9504	; 0x2520
   1eab8:	cmp	r0, #0
   1eabc:	ldr	r3, [sp, #88]	; 0x58
   1eac0:	str	lr, [sp, #92]	; 0x5c
   1eac4:	strh	r2, [fp, #-53]	; 0xffffffcb
   1eac8:	ldr	r2, [sp, #84]	; 0x54
   1eacc:	ldrne	r2, [sp, #68]	; 0x44
   1ead0:	strbne	r0, [fp, #-51]	; 0xffffffcd
   1ead4:	mov	r0, #0
   1ead8:	strb	r0, [r2, #1]
   1eadc:	strb	r1, [r2]
   1eae0:	add	r0, sp, #112	; 0x70
   1eae4:	sub	r2, fp, #53	; 0x35
   1eae8:	mov	r1, #1024	; 0x400
   1eaec:	bl	113e4 <strftime@plt>
   1eaf0:	cmp	r0, #0
   1eaf4:	beq	1eb60 <__assert_fail@plt+0xd5a8>
   1eaf8:	subs	r4, r9, #45	; 0x2d
   1eafc:	mov	r6, r0
   1eb00:	sub	r8, r0, #1
   1eb04:	ldr	lr, [sp, #92]	; 0x5c
   1eb08:	ldr	r0, [sp, #104]	; 0x68
   1eb0c:	movne	r4, r7
   1eb10:	cmp	r7, #0
   1eb14:	mov	r7, r8
   1eb18:	movwmi	r4, #0
   1eb1c:	cmp	r4, r8
   1eb20:	movhi	r7, r4
   1eb24:	sub	r0, r0, lr
   1eb28:	cmp	r7, r0
   1eb2c:	bcs	1f188 <__assert_fail@plt+0xdbd0>
   1eb30:	ldr	r0, [sp, #108]	; 0x6c
   1eb34:	cmp	r0, #0
   1eb38:	beq	1eb7c <__assert_fail@plt+0xd5c4>
   1eb3c:	cmp	r4, r8
   1eb40:	mov	r1, r0
   1eb44:	bls	1eba4 <__assert_fail@plt+0xd5ec>
   1eb48:	cmp	r9, #48	; 0x30
   1eb4c:	sub	r2, r4, r8
   1eb50:	cmpne	r9, #43	; 0x2b
   1eb54:	bne	1eb90 <__assert_fail@plt+0xd5d8>
   1eb58:	mov	r1, #48	; 0x30
   1eb5c:	b	1eb94 <__assert_fail@plt+0xd5dc>
   1eb60:	ldr	lr, [sp, #92]	; 0x5c
   1eb64:	ldr	r8, [sp, #108]	; 0x6c
   1eb68:	movw	ip, #52428	; 0xcccc
   1eb6c:	mov	r4, #-2147483648	; 0x80000000
   1eb70:	mov	r6, sl
   1eb74:	movt	ip, #3276	; 0xccc
   1eb78:	b	1d6b4 <__assert_fail@plt+0xc0fc>
   1eb7c:	movw	ip, #52428	; 0xcccc
   1eb80:	mov	r8, #0
   1eb84:	mov	r4, #-2147483648	; 0x80000000
   1eb88:	movt	ip, #3276	; 0xccc
   1eb8c:	b	1ed1c <__assert_fail@plt+0xd764>
   1eb90:	mov	r1, #32
   1eb94:	mov	r9, r2
   1eb98:	bl	114b0 <memset@plt>
   1eb9c:	ldr	r0, [sp, #108]	; 0x6c
   1eba0:	add	r1, r0, r9
   1eba4:	tst	r5, #1
   1eba8:	str	r1, [sp, #100]	; 0x64
   1ebac:	beq	1ec4c <__assert_fail@plt+0xd694>
   1ebb0:	movw	ip, #52428	; 0xcccc
   1ebb4:	cmp	r8, #0
   1ebb8:	movt	ip, #3276	; 0xccc
   1ebbc:	beq	1ed0c <__assert_fail@plt+0xd754>
   1ebc0:	bl	11414 <__ctype_tolower_loc@plt>
   1ebc4:	tst	r8, #1
   1ebc8:	mov	r1, r8
   1ebcc:	beq	1ebec <__assert_fail@plt+0xd634>
   1ebd0:	add	r1, sp, #112	; 0x70
   1ebd4:	ldr	r2, [r0]
   1ebd8:	ldr	r3, [sp, #100]	; 0x64
   1ebdc:	ldrb	r1, [r1, r8]
   1ebe0:	ldr	r2, [r2, r1, lsl #2]
   1ebe4:	sub	r1, r6, #2
   1ebe8:	strb	r2, [r3, r1]
   1ebec:	ldr	r2, [sp, #108]	; 0x6c
   1ebf0:	movw	ip, #52428	; 0xcccc
   1ebf4:	cmp	r6, #2
   1ebf8:	add	lr, sp, #112	; 0x70
   1ebfc:	movt	ip, #3276	; 0xccc
   1ec00:	beq	1ed0c <__assert_fail@plt+0xd754>
   1ec04:	cmp	r4, r8
   1ec08:	mov	r3, r2
   1ec0c:	movls	r4, r8
   1ec10:	sub	r2, r4, r6
   1ec14:	add	r5, r3, r2
   1ec18:	ldrb	r3, [lr, r1]
   1ec1c:	ldr	r6, [r0]
   1ec20:	mov	r2, r5
   1ec24:	ldr	r3, [r6, r3, lsl #2]
   1ec28:	strb	r3, [r2, r1]!
   1ec2c:	add	r3, lr, r1
   1ec30:	subs	r1, r1, #2
   1ec34:	ldrb	r3, [r3, #-1]
   1ec38:	ldr	r6, [r0]
   1ec3c:	ldr	r3, [r6, r3, lsl #2]
   1ec40:	strb	r3, [r2, #-1]
   1ec44:	bne	1ec18 <__assert_fail@plt+0xd660>
   1ec48:	b	1ed0c <__assert_fail@plt+0xd754>
   1ec4c:	ldr	r0, [sp, #96]	; 0x60
   1ec50:	tst	r0, #1
   1ec54:	beq	1ecf4 <__assert_fail@plt+0xd73c>
   1ec58:	movw	ip, #52428	; 0xcccc
   1ec5c:	cmp	r8, #0
   1ec60:	movt	ip, #3276	; 0xccc
   1ec64:	beq	1ed0c <__assert_fail@plt+0xd754>
   1ec68:	bl	11420 <__ctype_toupper_loc@plt>
   1ec6c:	tst	r8, #1
   1ec70:	mov	r1, r8
   1ec74:	beq	1ec94 <__assert_fail@plt+0xd6dc>
   1ec78:	add	r1, sp, #112	; 0x70
   1ec7c:	ldr	r2, [r0]
   1ec80:	ldr	r3, [sp, #100]	; 0x64
   1ec84:	ldrb	r1, [r1, r8]
   1ec88:	ldr	r2, [r2, r1, lsl #2]
   1ec8c:	sub	r1, r6, #2
   1ec90:	strb	r2, [r3, r1]
   1ec94:	ldr	r2, [sp, #108]	; 0x6c
   1ec98:	movw	ip, #52428	; 0xcccc
   1ec9c:	cmp	r6, #2
   1eca0:	add	lr, sp, #112	; 0x70
   1eca4:	movt	ip, #3276	; 0xccc
   1eca8:	beq	1ed0c <__assert_fail@plt+0xd754>
   1ecac:	cmp	r4, r8
   1ecb0:	mov	r3, r2
   1ecb4:	movls	r4, r8
   1ecb8:	sub	r2, r4, r6
   1ecbc:	add	r5, r3, r2
   1ecc0:	ldrb	r3, [lr, r1]
   1ecc4:	ldr	r6, [r0]
   1ecc8:	mov	r2, r5
   1eccc:	ldr	r3, [r6, r3, lsl #2]
   1ecd0:	strb	r3, [r2, r1]!
   1ecd4:	add	r3, lr, r1
   1ecd8:	subs	r1, r1, #2
   1ecdc:	ldrb	r3, [r3, #-1]
   1ece0:	ldr	r6, [r0]
   1ece4:	ldr	r3, [r6, r3, lsl #2]
   1ece8:	strb	r3, [r2, #-1]
   1ecec:	bne	1ecc0 <__assert_fail@plt+0xd708>
   1ecf0:	b	1ed0c <__assert_fail@plt+0xd754>
   1ecf4:	mov	r0, r1
   1ecf8:	ldr	r1, [sp, #48]	; 0x30
   1ecfc:	mov	r2, r8
   1ed00:	bl	112f4 <memcpy@plt>
   1ed04:	movw	ip, #52428	; 0xcccc
   1ed08:	movt	ip, #3276	; 0xccc
   1ed0c:	ldr	r0, [sp, #100]	; 0x64
   1ed10:	ldr	lr, [sp, #92]	; 0x5c
   1ed14:	mov	r4, #-2147483648	; 0x80000000
   1ed18:	add	r8, r0, r8
   1ed1c:	add	lr, r7, lr
   1ed20:	mov	r6, sl
   1ed24:	b	1d6b4 <__assert_fail@plt+0xc0fc>
   1ed28:	ldr	r9, [sp, #32]
   1ed2c:	ldr	r2, [sp, #96]	; 0x60
   1ed30:	ldr	r1, [sp, #100]	; 0x64
   1ed34:	tst	r1, #1
   1ed38:	bne	1efbc <__assert_fail@plt+0xda04>
   1ed3c:	eor	r1, r1, #1
   1ed40:	and	r1, r2, r1
   1ed44:	tst	r1, #1
   1ed48:	beq	1ef64 <__assert_fail@plt+0xd9ac>
   1ed4c:	cmp	r4, #0
   1ed50:	beq	1f030 <__assert_fail@plt+0xda78>
   1ed54:	bl	11420 <__ctype_toupper_loc@plt>
   1ed58:	tst	r4, #1
   1ed5c:	mov	r1, r4
   1ed60:	beq	1ed7c <__assert_fail@plt+0xd7c4>
   1ed64:	ldr	r2, [sp, #64]	; 0x40
   1ed68:	sub	r1, r4, #1
   1ed6c:	ldr	r3, [r0]
   1ed70:	ldrb	r2, [r2, r1]
   1ed74:	ldr	r2, [r3, r2, lsl #2]
   1ed78:	strb	r2, [r8, r1]
   1ed7c:	movw	ip, #52428	; 0xcccc
   1ed80:	cmp	r4, #1
   1ed84:	mov	lr, r7
   1ed88:	movt	ip, #3276	; 0xccc
   1ed8c:	beq	1f030 <__assert_fail@plt+0xda78>
   1ed90:	add	r2, r9, r1
   1ed94:	ldr	r3, [r0]
   1ed98:	ldrb	r2, [r2, #1]
   1ed9c:	ldr	r2, [r3, r2, lsl #2]
   1eda0:	add	r3, r8, r1
   1eda4:	strb	r2, [r3, #-1]
   1eda8:	ldrb	r2, [r9, r1]
   1edac:	ldr	r7, [r0]
   1edb0:	subs	r1, r1, #2
   1edb4:	ldr	r2, [r7, r2, lsl #2]
   1edb8:	strb	r2, [r3, #-2]
   1edbc:	bne	1ed90 <__assert_fail@plt+0xd7d8>
   1edc0:	b	1f030 <__assert_fail@plt+0xda78>
   1edc4:	mov	r0, r2
   1edc8:	mov	r1, #32
   1edcc:	mov	r2, r8
   1edd0:	bl	114b0 <memset@plt>
   1edd4:	ldr	r2, [sp, #108]	; 0x6c
   1edd8:	ldr	r3, [sp, #88]	; 0x58
   1eddc:	add	r2, r2, r8
   1ede0:	ldr	r0, [fp, #20]
   1ede4:	stm	sp, {r6, r9}
   1ede8:	mov	r8, r2
   1edec:	mov	r1, r7
   1edf0:	str	r4, [sp, #8]
   1edf4:	str	r0, [sp, #12]
   1edf8:	ldr	r0, [fp, #24]
   1edfc:	str	r0, [sp, #16]
   1ee00:	mov	r0, r2
   1ee04:	ldr	r2, [sp, #100]	; 0x64
   1ee08:	bl	1d5b0 <__assert_fail@plt+0xbff8>
   1ee0c:	ldr	r0, [sp, #96]	; 0x60
   1ee10:	ldr	lr, [sp, #92]	; 0x5c
   1ee14:	movw	ip, #52428	; 0xcccc
   1ee18:	mov	r4, #-2147483648	; 0x80000000
   1ee1c:	movt	ip, #3276	; 0xccc
   1ee20:	add	r8, r8, r0
   1ee24:	b	1f14c <__assert_fail@plt+0xdb94>
   1ee28:	movw	r5, #63636	; 0xf894
   1ee2c:	movt	r5, #65535	; 0xffff
   1ee30:	sub	r5, r5, r3
   1ee34:	add	r3, r6, #100	; 0x64
   1ee38:	cmp	lr, r5
   1ee3c:	ldr	lr, [sp, #92]	; 0x5c
   1ee40:	rsblt	r3, r6, #0
   1ee44:	b	1ee74 <__assert_fail@plt+0xd8bc>
   1ee48:	cmp	r7, #6
   1ee4c:	mov	r0, r7
   1ee50:	movle	r0, #6
   1ee54:	sub	r4, r0, #6
   1ee58:	b	1ddb8 <__assert_fail@plt+0xc800>
   1ee5c:	movw	r4, #63636	; 0xf894
   1ee60:	str	r3, [sp, #100]	; 0x64
   1ee64:	add	r3, r5, #100	; 0x64
   1ee68:	movt	r4, #65535	; 0xffff
   1ee6c:	cmp	r6, r4
   1ee70:	rsblt	r3, r5, #0
   1ee74:	ldr	r6, [fp, #12]
   1ee78:	cmp	r9, #0
   1ee7c:	mov	r4, #0
   1ee80:	moveq	r9, r6
   1ee84:	mov	r6, #0
   1ee88:	cmp	r9, #43	; 0x2b
   1ee8c:	bne	1e570 <__assert_fail@plt+0xcfb8>
   1ee90:	ldr	r8, [sp, #100]	; 0x64
   1ee94:	mov	r4, #0
   1ee98:	movw	r5, #9999	; 0x270f
   1ee9c:	mov	ip, #0
   1eea0:	cmp	r8, r7
   1eea4:	movwlt	r4, #1
   1eea8:	cmp	r8, #2
   1eeac:	movweq	r5, #99	; 0x63
   1eeb0:	cmp	r5, r3
   1eeb4:	movwcc	ip, #1
   1eeb8:	orr	r4, r4, ip
   1eebc:	b	1f10c <__assert_fail@plt+0xdb54>
   1eec0:	cmp	r4, #0
   1eec4:	beq	1f0e8 <__assert_fail@plt+0xdb30>
   1eec8:	movw	r6, #10000	; 0x2710
   1eecc:	mov	lr, r8
   1eed0:	mla	r3, r3, r6, r4
   1eed4:	mov	r6, #100	; 0x64
   1eed8:	mov	r4, #1
   1eedc:	mla	r3, ip, r6, r3
   1eee0:	mov	r6, #9
   1eee4:	str	r6, [sp, #100]	; 0x64
   1eee8:	mov	r6, #20
   1eeec:	b	1f10c <__assert_fail@plt+0xdb54>
   1eef0:	sub	r1, fp, #48	; 0x30
   1eef4:	mov	r2, r4
   1eef8:	mov	r5, lr
   1eefc:	bl	112f4 <memcpy@plt>
   1ef00:	movw	ip, #52428	; 0xcccc
   1ef04:	mov	lr, r5
   1ef08:	movt	ip, #3276	; 0xccc
   1ef0c:	ldr	r0, [sp, #108]	; 0x6c
   1ef10:	mov	r2, #0
   1ef14:	add	r5, r0, r4
   1ef18:	cmp	r9, #45	; 0x2d
   1ef1c:	subne	r0, r7, r4
   1ef20:	bicne	r2, r0, r0, asr #31
   1ef24:	sub	r0, r8, r4
   1ef28:	cmp	r2, r0
   1ef2c:	bcs	1f188 <__assert_fail@plt+0xdbd0>
   1ef30:	cmp	r5, #0
   1ef34:	beq	1ef5c <__assert_fail@plt+0xd9a4>
   1ef38:	cmp	r2, #0
   1ef3c:	beq	1ef5c <__assert_fail@plt+0xd9a4>
   1ef40:	uxtb	r0, r9
   1ef44:	cmp	r0, #48	; 0x30
   1ef48:	cmpne	r0, #43	; 0x2b
   1ef4c:	bne	1f0b4 <__assert_fail@plt+0xdafc>
   1ef50:	mov	r0, r5
   1ef54:	mov	r1, #48	; 0x30
   1ef58:	b	1f0bc <__assert_fail@plt+0xdb04>
   1ef5c:	mov	r8, r5
   1ef60:	b	1f0dc <__assert_fail@plt+0xdb24>
   1ef64:	ldr	r1, [sp, #64]	; 0x40
   1ef68:	mov	r0, r8
   1ef6c:	mov	r2, r4
   1ef70:	bl	112f4 <memcpy@plt>
   1ef74:	movw	ip, #52428	; 0xcccc
   1ef78:	mov	lr, r7
   1ef7c:	movt	ip, #3276	; 0xccc
   1ef80:	b	1f030 <__assert_fail@plt+0xda78>
   1ef84:	mov	r0, r8
   1ef88:	mov	r1, #32
   1ef8c:	mov	r2, r5
   1ef90:	bl	114b0 <memset@plt>
   1ef94:	ldr	r8, [sp, #108]	; 0x6c
   1ef98:	ldr	r9, [sp, #32]
   1ef9c:	ldr	r1, [sp, #100]	; 0x64
   1efa0:	ldr	r2, [sp, #96]	; 0x60
   1efa4:	movw	ip, #52428	; 0xcccc
   1efa8:	mov	lr, r7
   1efac:	movt	ip, #3276	; 0xccc
   1efb0:	add	r8, r8, r5
   1efb4:	tst	r1, #1
   1efb8:	beq	1ed3c <__assert_fail@plt+0xd784>
   1efbc:	cmp	r4, #0
   1efc0:	beq	1f030 <__assert_fail@plt+0xda78>
   1efc4:	bl	11414 <__ctype_tolower_loc@plt>
   1efc8:	tst	r4, #1
   1efcc:	mov	r1, r4
   1efd0:	beq	1efec <__assert_fail@plt+0xda34>
   1efd4:	ldr	r2, [sp, #64]	; 0x40
   1efd8:	sub	r1, r4, #1
   1efdc:	ldr	r3, [r0]
   1efe0:	ldrb	r2, [r2, r1]
   1efe4:	ldr	r2, [r3, r2, lsl #2]
   1efe8:	strb	r2, [r8, r1]
   1efec:	movw	ip, #52428	; 0xcccc
   1eff0:	cmp	r4, #1
   1eff4:	mov	lr, r7
   1eff8:	movt	ip, #3276	; 0xccc
   1effc:	beq	1f030 <__assert_fail@plt+0xda78>
   1f000:	add	r2, r9, r1
   1f004:	ldr	r3, [r0]
   1f008:	ldrb	r2, [r2, #1]
   1f00c:	ldr	r2, [r3, r2, lsl #2]
   1f010:	add	r3, r8, r1
   1f014:	strb	r2, [r3, #-1]
   1f018:	ldrb	r2, [r9, r1]
   1f01c:	ldr	r7, [r0]
   1f020:	subs	r1, r1, #2
   1f024:	ldr	r2, [r7, r2, lsl #2]
   1f028:	strb	r2, [r3, #-2]
   1f02c:	bne	1f000 <__assert_fail@plt+0xda48>
   1f030:	add	r8, r8, r4
   1f034:	add	lr, r6, lr
   1f038:	mov	r4, #-2147483648	; 0x80000000
   1f03c:	mov	r6, sl
   1f040:	b	1d6b4 <__assert_fail@plt+0xc0fc>
   1f044:	mov	r0, r8
   1f048:	mov	r1, #32
   1f04c:	mov	r2, r4
   1f050:	mov	r6, lr
   1f054:	bl	114b0 <memset@plt>
   1f058:	ldr	r8, [sp, #108]	; 0x6c
   1f05c:	movw	ip, #52428	; 0xcccc
   1f060:	mov	lr, r6
   1f064:	movt	ip, #3276	; 0xccc
   1f068:	add	r8, r8, r4
   1f06c:	mov	r4, #-2147483648	; 0x80000000
   1f070:	mov	r0, #10
   1f074:	strb	r0, [r8], #1
   1f078:	b	1f14c <__assert_fail@plt+0xdb94>
   1f07c:	mov	r0, r8
   1f080:	mov	r1, #32
   1f084:	mov	r2, r4
   1f088:	mov	r6, lr
   1f08c:	bl	114b0 <memset@plt>
   1f090:	ldr	r8, [sp, #108]	; 0x6c
   1f094:	movw	ip, #52428	; 0xcccc
   1f098:	mov	lr, r6
   1f09c:	movt	ip, #3276	; 0xccc
   1f0a0:	add	r8, r8, r4
   1f0a4:	mov	r4, #-2147483648	; 0x80000000
   1f0a8:	mov	r0, #9
   1f0ac:	strb	r0, [r8], #1
   1f0b0:	b	1f14c <__assert_fail@plt+0xdb94>
   1f0b4:	mov	r0, r5
   1f0b8:	mov	r1, #32
   1f0bc:	mov	r6, lr
   1f0c0:	mov	r7, r2
   1f0c4:	bl	114b0 <memset@plt>
   1f0c8:	movw	ip, #52428	; 0xcccc
   1f0cc:	mov	r2, r7
   1f0d0:	mov	lr, r6
   1f0d4:	add	r8, r5, r7
   1f0d8:	movt	ip, #3276	; 0xccc
   1f0dc:	add	r0, r2, lr
   1f0e0:	add	lr, r0, r4
   1f0e4:	b	1e450 <__assert_fail@plt+0xce98>
   1f0e8:	cmp	ip, #0
   1f0ec:	beq	1f158 <__assert_fail@plt+0xdba0>
   1f0f0:	mov	r6, #100	; 0x64
   1f0f4:	mov	r4, #1
   1f0f8:	mov	lr, r8
   1f0fc:	mla	r3, r3, r6, ip
   1f100:	mov	r6, #6
   1f104:	str	r6, [sp, #100]	; 0x64
   1f108:	mov	r6, #4
   1f10c:	movw	ip, #52428	; 0xcccc
   1f110:	movt	ip, #3276	; 0xccc
   1f114:	b	1e570 <__assert_fail@plt+0xcfb8>
   1f118:	mov	r0, r8
   1f11c:	mov	r1, #32
   1f120:	mov	r2, r4
   1f124:	mov	r6, lr
   1f128:	bl	114b0 <memset@plt>
   1f12c:	ldr	r8, [sp, #108]	; 0x6c
   1f130:	ldrb	r1, [sl]
   1f134:	movw	ip, #52428	; 0xcccc
   1f138:	mov	lr, r6
   1f13c:	movt	ip, #3276	; 0xccc
   1f140:	add	r8, r8, r4
   1f144:	mov	r4, #-2147483648	; 0x80000000
   1f148:	strb	r1, [r8], #1
   1f14c:	add	lr, r5, lr
   1f150:	mov	r6, sl
   1f154:	b	1d6b4 <__assert_fail@plt+0xc0fc>
   1f158:	mov	r6, #3
   1f15c:	b	1ea98 <__assert_fail@plt+0xd4e0>
   1f160:	mov	lr, #0
   1f164:	ldr	r0, [sp, #104]	; 0x68
   1f168:	ldr	r1, [sp, #72]	; 0x48
   1f16c:	cmp	r0, #0
   1f170:	cmpne	r8, #0
   1f174:	movne	r0, #0
   1f178:	strbne	r0, [r8]
   1f17c:	ldr	r0, [sp, #76]	; 0x4c
   1f180:	str	r1, [r0]
   1f184:	b	1f198 <__assert_fail@plt+0xdbe0>
   1f188:	mov	r0, #34	; 0x22
   1f18c:	ldr	r1, [sp, #76]	; 0x4c
   1f190:	mov	lr, #0
   1f194:	str	r0, [r1]
   1f198:	mov	r0, lr
   1f19c:	sub	sp, fp, #28
   1f1a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f1a4:	mov	r0, #75	; 0x4b
   1f1a8:	b	1f18c <__assert_fail@plt+0xdbd4>
   1f1ac:	cmp	r2, #0
   1f1b0:	beq	1f1e0 <__assert_fail@plt+0xdc28>
   1f1b4:	mvn	r3, #0
   1f1b8:	udiv	r3, r3, r2
   1f1bc:	cmp	r3, r1
   1f1c0:	bcs	1f1e0 <__assert_fail@plt+0xdc28>
   1f1c4:	push	{fp, lr}
   1f1c8:	mov	fp, sp
   1f1cc:	bl	1148c <__errno_location@plt>
   1f1d0:	mov	r1, #12
   1f1d4:	str	r1, [r0]
   1f1d8:	mov	r0, #0
   1f1dc:	pop	{fp, pc}
   1f1e0:	mul	r1, r2, r1
   1f1e4:	b	1d238 <__assert_fail@plt+0xbc80>
   1f1e8:	push	{r4, sl, fp, lr}
   1f1ec:	add	fp, sp, #8
   1f1f0:	sub	sp, sp, #264	; 0x108
   1f1f4:	add	r1, sp, #7
   1f1f8:	movw	r2, #257	; 0x101
   1f1fc:	bl	1f254 <__assert_fail@plt+0xdc9c>
   1f200:	mov	r4, #0
   1f204:	cmp	r0, #0
   1f208:	bne	1f248 <__assert_fail@plt+0xdc90>
   1f20c:	movw	r1, #3820	; 0xeec
   1f210:	add	r0, sp, #7
   1f214:	mov	r2, #2
   1f218:	movt	r1, #2
   1f21c:	bl	1145c <bcmp@plt>
   1f220:	cmp	r0, #0
   1f224:	beq	1f248 <__assert_fail@plt+0xdc90>
   1f228:	movw	r1, #7459	; 0x1d23
   1f22c:	add	r0, sp, #7
   1f230:	mov	r2, #6
   1f234:	movt	r1, #2
   1f238:	bl	1145c <bcmp@plt>
   1f23c:	cmp	r0, #0
   1f240:	mov	r4, r0
   1f244:	movwne	r4, #1
   1f248:	mov	r0, r4
   1f24c:	sub	sp, fp, #8
   1f250:	pop	{r4, sl, fp, pc}
   1f254:	push	{r4, r5, r6, r7, fp, lr}
   1f258:	add	fp, sp, #16
   1f25c:	mov	r4, r1
   1f260:	mov	r1, #0
   1f264:	mov	r6, r2
   1f268:	bl	11504 <setlocale@plt>
   1f26c:	cmp	r0, #0
   1f270:	beq	1f2a0 <__assert_fail@plt+0xdce8>
   1f274:	mov	r7, r0
   1f278:	bl	11468 <strlen@plt>
   1f27c:	cmp	r0, r6
   1f280:	bcs	1f2bc <__assert_fail@plt+0xdd04>
   1f284:	add	r2, r0, #1
   1f288:	mov	r0, r4
   1f28c:	mov	r1, r7
   1f290:	bl	112f4 <memcpy@plt>
   1f294:	mov	r5, #0
   1f298:	mov	r0, r5
   1f29c:	pop	{r4, r5, r6, r7, fp, pc}
   1f2a0:	mov	r5, #22
   1f2a4:	cmp	r6, #0
   1f2a8:	beq	1f2e4 <__assert_fail@plt+0xdd2c>
   1f2ac:	mov	r0, #0
   1f2b0:	strb	r0, [r4]
   1f2b4:	mov	r0, r5
   1f2b8:	pop	{r4, r5, r6, r7, fp, pc}
   1f2bc:	mov	r5, #34	; 0x22
   1f2c0:	cmp	r6, #0
   1f2c4:	beq	1f2e4 <__assert_fail@plt+0xdd2c>
   1f2c8:	sub	r6, r6, #1
   1f2cc:	mov	r0, r4
   1f2d0:	mov	r1, r7
   1f2d4:	mov	r2, r6
   1f2d8:	bl	112f4 <memcpy@plt>
   1f2dc:	mov	r0, #0
   1f2e0:	strb	r0, [r4, r6]
   1f2e4:	mov	r0, r5
   1f2e8:	pop	{r4, r5, r6, r7, fp, pc}
   1f2ec:	mov	r1, #0
   1f2f0:	b	11504 <setlocale@plt>
   1f2f4:	cmp	r3, #0
   1f2f8:	cmpeq	r2, #0
   1f2fc:	bne	1f320 <__assert_fail@plt+0xdd68>
   1f300:	cmp	r1, #0
   1f304:	movlt	r1, #-2147483648	; 0x80000000
   1f308:	movlt	r0, #0
   1f30c:	blt	1f31c <__assert_fail@plt+0xdd64>
   1f310:	cmpeq	r0, #0
   1f314:	mvnne	r1, #-2147483648	; 0x80000000
   1f318:	mvnne	r0, #0
   1f31c:	b	1f404 <__assert_fail@plt+0xde4c>
   1f320:	sub	sp, sp, #8
   1f324:	push	{sp, lr}
   1f328:	cmp	r1, #0
   1f32c:	blt	1f34c <__assert_fail@plt+0xdd94>
   1f330:	cmp	r3, #0
   1f334:	blt	1f380 <__assert_fail@plt+0xddc8>
   1f338:	bl	1f414 <__assert_fail@plt+0xde5c>
   1f33c:	ldr	lr, [sp, #4]
   1f340:	add	sp, sp, #8
   1f344:	pop	{r2, r3}
   1f348:	bx	lr
   1f34c:	rsbs	r0, r0, #0
   1f350:	sbc	r1, r1, r1, lsl #1
   1f354:	cmp	r3, #0
   1f358:	blt	1f3a4 <__assert_fail@plt+0xddec>
   1f35c:	bl	1f414 <__assert_fail@plt+0xde5c>
   1f360:	ldr	lr, [sp, #4]
   1f364:	add	sp, sp, #8
   1f368:	pop	{r2, r3}
   1f36c:	rsbs	r0, r0, #0
   1f370:	sbc	r1, r1, r1, lsl #1
   1f374:	rsbs	r2, r2, #0
   1f378:	sbc	r3, r3, r3, lsl #1
   1f37c:	bx	lr
   1f380:	rsbs	r2, r2, #0
   1f384:	sbc	r3, r3, r3, lsl #1
   1f388:	bl	1f414 <__assert_fail@plt+0xde5c>
   1f38c:	ldr	lr, [sp, #4]
   1f390:	add	sp, sp, #8
   1f394:	pop	{r2, r3}
   1f398:	rsbs	r0, r0, #0
   1f39c:	sbc	r1, r1, r1, lsl #1
   1f3a0:	bx	lr
   1f3a4:	rsbs	r2, r2, #0
   1f3a8:	sbc	r3, r3, r3, lsl #1
   1f3ac:	bl	1f414 <__assert_fail@plt+0xde5c>
   1f3b0:	ldr	lr, [sp, #4]
   1f3b4:	add	sp, sp, #8
   1f3b8:	pop	{r2, r3}
   1f3bc:	rsbs	r2, r2, #0
   1f3c0:	sbc	r3, r3, r3, lsl #1
   1f3c4:	bx	lr
   1f3c8:	cmp	r3, #0
   1f3cc:	cmpeq	r2, #0
   1f3d0:	bne	1f3e8 <__assert_fail@plt+0xde30>
   1f3d4:	cmp	r1, #0
   1f3d8:	cmpeq	r0, #0
   1f3dc:	mvnne	r1, #0
   1f3e0:	mvnne	r0, #0
   1f3e4:	b	1f404 <__assert_fail@plt+0xde4c>
   1f3e8:	sub	sp, sp, #8
   1f3ec:	push	{sp, lr}
   1f3f0:	bl	1f414 <__assert_fail@plt+0xde5c>
   1f3f4:	ldr	lr, [sp, #4]
   1f3f8:	add	sp, sp, #8
   1f3fc:	pop	{r2, r3}
   1f400:	bx	lr
   1f404:	push	{r1, lr}
   1f408:	mov	r0, #8
   1f40c:	bl	1127c <raise@plt>
   1f410:	pop	{r1, pc}
   1f414:	cmp	r1, r3
   1f418:	cmpeq	r0, r2
   1f41c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f420:	mov	r4, r0
   1f424:	movcc	r0, #0
   1f428:	mov	r5, r1
   1f42c:	ldr	lr, [sp, #36]	; 0x24
   1f430:	movcc	r1, r0
   1f434:	bcc	1f530 <__assert_fail@plt+0xdf78>
   1f438:	cmp	r3, #0
   1f43c:	clzeq	ip, r2
   1f440:	clzne	ip, r3
   1f444:	addeq	ip, ip, #32
   1f448:	cmp	r5, #0
   1f44c:	clzeq	r1, r4
   1f450:	addeq	r1, r1, #32
   1f454:	clzne	r1, r5
   1f458:	sub	ip, ip, r1
   1f45c:	sub	sl, ip, #32
   1f460:	lsl	r9, r3, ip
   1f464:	rsb	fp, ip, #32
   1f468:	orr	r9, r9, r2, lsl sl
   1f46c:	orr	r9, r9, r2, lsr fp
   1f470:	lsl	r8, r2, ip
   1f474:	cmp	r5, r9
   1f478:	cmpeq	r4, r8
   1f47c:	movcc	r0, #0
   1f480:	movcc	r1, r0
   1f484:	bcc	1f4a0 <__assert_fail@plt+0xdee8>
   1f488:	mov	r0, #1
   1f48c:	subs	r4, r4, r8
   1f490:	lsl	r1, r0, sl
   1f494:	orr	r1, r1, r0, lsr fp
   1f498:	lsl	r0, r0, ip
   1f49c:	sbc	r5, r5, r9
   1f4a0:	cmp	ip, #0
   1f4a4:	beq	1f530 <__assert_fail@plt+0xdf78>
   1f4a8:	lsr	r6, r8, #1
   1f4ac:	orr	r6, r6, r9, lsl #31
   1f4b0:	lsr	r7, r9, #1
   1f4b4:	mov	r2, ip
   1f4b8:	b	1f4dc <__assert_fail@plt+0xdf24>
   1f4bc:	subs	r3, r4, r6
   1f4c0:	sbc	r8, r5, r7
   1f4c4:	adds	r3, r3, r3
   1f4c8:	adc	r8, r8, r8
   1f4cc:	adds	r4, r3, #1
   1f4d0:	adc	r5, r8, #0
   1f4d4:	subs	r2, r2, #1
   1f4d8:	beq	1f4f8 <__assert_fail@plt+0xdf40>
   1f4dc:	cmp	r5, r7
   1f4e0:	cmpeq	r4, r6
   1f4e4:	bcs	1f4bc <__assert_fail@plt+0xdf04>
   1f4e8:	adds	r4, r4, r4
   1f4ec:	adc	r5, r5, r5
   1f4f0:	subs	r2, r2, #1
   1f4f4:	bne	1f4dc <__assert_fail@plt+0xdf24>
   1f4f8:	lsr	r3, r4, ip
   1f4fc:	orr	r3, r3, r5, lsl fp
   1f500:	lsr	r2, r5, ip
   1f504:	orr	r3, r3, r5, lsr sl
   1f508:	adds	r0, r0, r4
   1f50c:	mov	r4, r3
   1f510:	lsl	r3, r2, ip
   1f514:	orr	r3, r3, r4, lsl sl
   1f518:	lsl	ip, r4, ip
   1f51c:	orr	r3, r3, r4, lsr fp
   1f520:	adc	r1, r1, r5
   1f524:	subs	r0, r0, ip
   1f528:	mov	r5, r2
   1f52c:	sbc	r1, r1, r3
   1f530:	cmp	lr, #0
   1f534:	strdne	r4, [lr]
   1f538:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f53c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f540:	mov	r7, r0
   1f544:	ldr	r6, [pc, #72]	; 1f594 <__assert_fail@plt+0xdfdc>
   1f548:	ldr	r5, [pc, #72]	; 1f598 <__assert_fail@plt+0xdfe0>
   1f54c:	add	r6, pc, r6
   1f550:	add	r5, pc, r5
   1f554:	sub	r6, r6, r5
   1f558:	mov	r8, r1
   1f55c:	mov	r9, r2
   1f560:	bl	11244 <calloc@plt-0x20>
   1f564:	asrs	r6, r6, #2
   1f568:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f56c:	mov	r4, #0
   1f570:	add	r4, r4, #1
   1f574:	ldr	r3, [r5], #4
   1f578:	mov	r2, r9
   1f57c:	mov	r1, r8
   1f580:	mov	r0, r7
   1f584:	blx	r3
   1f588:	cmp	r6, r4
   1f58c:	bne	1f570 <__assert_fail@plt+0xdfb8>
   1f590:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f594:			; <UNDEFINED> instruction: 0x000129b8
   1f598:			; <UNDEFINED> instruction: 0x000129b0
   1f59c:	bx	lr
   1f5a0:	ldr	r3, [pc, #12]	; 1f5b4 <__assert_fail@plt+0xdffc>
   1f5a4:	mov	r1, #0
   1f5a8:	add	r3, pc, r3
   1f5ac:	ldr	r2, [r3]
   1f5b0:	b	114a4 <__cxa_atexit@plt>
   1f5b4:	andeq	r2, r1, r4, lsl #23

Disassembly of section .fini:

0001f5b8 <.fini>:
   1f5b8:	push	{r3, lr}
   1f5bc:	pop	{r3, pc}
