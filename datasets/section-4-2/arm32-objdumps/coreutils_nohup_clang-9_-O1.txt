
../repos/coreutils/src/nohup:     file format elf32-littlearm


Disassembly of section .init:

00010dcc <.init>:
   10dcc:	push	{r3, lr}
   10dd0:	bl	11098 <__mempcpy_chk@plt+0x48>
   10dd4:	pop	{r3, pc}

Disassembly of section .plt:

00010dd8 <calloc@plt-0x14>:
   10dd8:	push	{lr}		; (str lr, [sp, #-4]!)
   10ddc:	ldr	lr, [pc, #4]	; 10de8 <calloc@plt-0x4>
   10de0:	add	lr, pc, lr
   10de4:	ldr	pc, [lr, #8]!
   10de8:	andeq	r5, r1, r8, lsl r2

00010dec <calloc@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #86016	; 0x15000
   10df4:	ldr	pc, [ip, #536]!	; 0x218

00010df8 <fputs_unlocked@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #86016	; 0x15000
   10e00:	ldr	pc, [ip, #528]!	; 0x210

00010e04 <strcmp@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #86016	; 0x15000
   10e0c:	ldr	pc, [ip, #520]!	; 0x208

00010e10 <fflush@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #86016	; 0x15000
   10e18:	ldr	pc, [ip, #512]!	; 0x200

00010e1c <free@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #86016	; 0x15000
   10e24:	ldr	pc, [ip, #504]!	; 0x1f8

00010e28 <_exit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #86016	; 0x15000
   10e30:	ldr	pc, [ip, #496]!	; 0x1f0

00010e34 <memcpy@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #86016	; 0x15000
   10e3c:	ldr	pc, [ip, #488]!	; 0x1e8

00010e40 <execvp@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #86016	; 0x15000
   10e48:	ldr	pc, [ip, #480]!	; 0x1e0

00010e4c <mbsinit@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #86016	; 0x15000
   10e54:	ldr	pc, [ip, #472]!	; 0x1d8

00010e58 <signal@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #86016	; 0x15000
   10e60:	ldr	pc, [ip, #464]!	; 0x1d0

00010e64 <dcgettext@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #86016	; 0x15000
   10e6c:	ldr	pc, [ip, #456]!	; 0x1c8

00010e70 <dup2@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #86016	; 0x15000
   10e78:	ldr	pc, [ip, #448]!	; 0x1c0

00010e7c <realloc@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #86016	; 0x15000
   10e84:	ldr	pc, [ip, #440]!	; 0x1b8

00010e88 <textdomain@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #86016	; 0x15000
   10e90:	ldr	pc, [ip, #432]!	; 0x1b0

00010e94 <iswprint@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #86016	; 0x15000
   10e9c:	ldr	pc, [ip, #424]!	; 0x1a8

00010ea0 <fwrite@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #86016	; 0x15000
   10ea8:	ldr	pc, [ip, #416]!	; 0x1a0

00010eac <lseek64@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #86016	; 0x15000
   10eb4:	ldr	pc, [ip, #408]!	; 0x198

00010eb8 <__ctype_get_mb_cur_max@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #86016	; 0x15000
   10ec0:	ldr	pc, [ip, #400]!	; 0x190

00010ec4 <__fpending@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #86016	; 0x15000
   10ecc:	ldr	pc, [ip, #392]!	; 0x188

00010ed0 <ferror_unlocked@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #86016	; 0x15000
   10ed8:	ldr	pc, [ip, #384]!	; 0x180

00010edc <mbrtowc@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #86016	; 0x15000
   10ee4:	ldr	pc, [ip, #376]!	; 0x178

00010ee8 <error@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #86016	; 0x15000
   10ef0:	ldr	pc, [ip, #368]!	; 0x170

00010ef4 <open64@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #86016	; 0x15000
   10efc:	ldr	pc, [ip, #360]!	; 0x168

00010f00 <getenv@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #86016	; 0x15000
   10f08:	ldr	pc, [ip, #352]!	; 0x160

00010f0c <malloc@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #86016	; 0x15000
   10f14:	ldr	pc, [ip, #344]!	; 0x158

00010f18 <__libc_start_main@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #86016	; 0x15000
   10f20:	ldr	pc, [ip, #336]!	; 0x150

00010f24 <__freading@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #86016	; 0x15000
   10f2c:	ldr	pc, [ip, #328]!	; 0x148

00010f30 <__gmon_start__@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #86016	; 0x15000
   10f38:	ldr	pc, [ip, #320]!	; 0x140

00010f3c <getopt_long@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #86016	; 0x15000
   10f44:	ldr	pc, [ip, #312]!	; 0x138

00010f48 <__ctype_b_loc@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #86016	; 0x15000
   10f50:	ldr	pc, [ip, #304]!	; 0x130

00010f54 <exit@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #86016	; 0x15000
   10f5c:	ldr	pc, [ip, #296]!	; 0x128

00010f60 <bcmp@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #86016	; 0x15000
   10f68:	ldr	pc, [ip, #288]!	; 0x120

00010f6c <strlen@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #86016	; 0x15000
   10f74:	ldr	pc, [ip, #280]!	; 0x118

00010f78 <__errno_location@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #86016	; 0x15000
   10f80:	ldr	pc, [ip, #272]!	; 0x110

00010f84 <__cxa_atexit@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #86016	; 0x15000
   10f8c:	ldr	pc, [ip, #264]!	; 0x108

00010f90 <memset@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #86016	; 0x15000
   10f98:	ldr	pc, [ip, #256]!	; 0x100

00010f9c <__printf_chk@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #86016	; 0x15000
   10fa4:	ldr	pc, [ip, #248]!	; 0xf8

00010fa8 <fileno@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #86016	; 0x15000
   10fb0:	ldr	pc, [ip, #240]!	; 0xf0

00010fb4 <__fprintf_chk@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #86016	; 0x15000
   10fbc:	ldr	pc, [ip, #232]!	; 0xe8

00010fc0 <fclose@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #86016	; 0x15000
   10fc8:	ldr	pc, [ip, #224]!	; 0xe0

00010fcc <fseeko64@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #86016	; 0x15000
   10fd4:	ldr	pc, [ip, #216]!	; 0xd8

00010fd8 <fcntl64@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #86016	; 0x15000
   10fe0:	ldr	pc, [ip, #208]!	; 0xd0

00010fe4 <setlocale@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #86016	; 0x15000
   10fec:	ldr	pc, [ip, #200]!	; 0xc8

00010ff0 <strrchr@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #86016	; 0x15000
   10ff8:	ldr	pc, [ip, #192]!	; 0xc0

00010ffc <nl_langinfo@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #86016	; 0x15000
   11004:	ldr	pc, [ip, #184]!	; 0xb8

00011008 <bindtextdomain@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #86016	; 0x15000
   11010:	ldr	pc, [ip, #176]!	; 0xb0

00011014 <umask@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #86016	; 0x15000
   1101c:	ldr	pc, [ip, #168]!	; 0xa8

00011020 <isatty@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #86016	; 0x15000
   11028:	ldr	pc, [ip, #160]!	; 0xa0

0001102c <strncmp@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #86016	; 0x15000
   11034:	ldr	pc, [ip, #152]!	; 0x98

00011038 <abort@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #86016	; 0x15000
   11040:	ldr	pc, [ip, #144]!	; 0x90

00011044 <close@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #86016	; 0x15000
   1104c:	ldr	pc, [ip, #136]!	; 0x88

00011050 <__mempcpy_chk@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #86016	; 0x15000
   11058:	ldr	pc, [ip, #128]!	; 0x80

Disassembly of section .text:

0001105c <.text>:
   1105c:	mov	fp, #0
   11060:	mov	lr, #0
   11064:	pop	{r1}		; (ldr r1, [sp], #4)
   11068:	mov	r2, sp
   1106c:	push	{r2}		; (str r2, [sp, #-4]!)
   11070:	push	{r0}		; (str r0, [sp, #-4]!)
   11074:	ldr	ip, [pc, #16]	; 1108c <__mempcpy_chk@plt+0x3c>
   11078:	push	{ip}		; (str ip, [sp, #-4]!)
   1107c:	ldr	r0, [pc, #12]	; 11090 <__mempcpy_chk@plt+0x40>
   11080:	ldr	r3, [pc, #12]	; 11094 <__mempcpy_chk@plt+0x44>
   11084:	bl	10f18 <__libc_start_main@plt>
   11088:	bl	11038 <abort@plt>
   1108c:	andeq	r4, r1, r0, lsr #26
   11090:	andeq	r1, r1, r0, lsl r4
   11094:	andeq	r4, r1, r0, asr #25
   11098:	ldr	r3, [pc, #20]	; 110b4 <__mempcpy_chk@plt+0x64>
   1109c:	ldr	r2, [pc, #20]	; 110b8 <__mempcpy_chk@plt+0x68>
   110a0:	add	r3, pc, r3
   110a4:	ldr	r2, [r3, r2]
   110a8:	cmp	r2, #0
   110ac:	bxeq	lr
   110b0:	b	10f30 <__gmon_start__@plt>
   110b4:	andeq	r4, r1, r8, asr pc
   110b8:	ldrdeq	r0, [r0], -ip
   110bc:	ldr	r0, [pc, #24]	; 110dc <__mempcpy_chk@plt+0x8c>
   110c0:	ldr	r3, [pc, #24]	; 110e0 <__mempcpy_chk@plt+0x90>
   110c4:	cmp	r3, r0
   110c8:	bxeq	lr
   110cc:	ldr	r3, [pc, #16]	; 110e4 <__mempcpy_chk@plt+0x94>
   110d0:	cmp	r3, #0
   110d4:	bxeq	lr
   110d8:	bx	r3
   110dc:	andeq	r6, r2, r0, lsr r1
   110e0:	andeq	r6, r2, r0, lsr r1
   110e4:	andeq	r0, r0, r0
   110e8:	ldr	r0, [pc, #36]	; 11114 <__mempcpy_chk@plt+0xc4>
   110ec:	ldr	r1, [pc, #36]	; 11118 <__mempcpy_chk@plt+0xc8>
   110f0:	sub	r1, r1, r0
   110f4:	asr	r1, r1, #2
   110f8:	add	r1, r1, r1, lsr #31
   110fc:	asrs	r1, r1, #1
   11100:	bxeq	lr
   11104:	ldr	r3, [pc, #16]	; 1111c <__mempcpy_chk@plt+0xcc>
   11108:	cmp	r3, #0
   1110c:	bxeq	lr
   11110:	bx	r3
   11114:	andeq	r6, r2, r0, lsr r1
   11118:	andeq	r6, r2, r0, lsr r1
   1111c:	andeq	r0, r0, r0
   11120:	push	{r4, lr}
   11124:	ldr	r4, [pc, #24]	; 11144 <__mempcpy_chk@plt+0xf4>
   11128:	ldrb	r3, [r4]
   1112c:	cmp	r3, #0
   11130:	popne	{r4, pc}
   11134:	bl	110bc <__mempcpy_chk@plt+0x6c>
   11138:	mov	r3, #1
   1113c:	strb	r3, [r4]
   11140:	pop	{r4, pc}
   11144:	andeq	r6, r2, ip, asr #2
   11148:	b	110e8 <__mempcpy_chk@plt+0x98>
   1114c:	push	{fp, lr}
   11150:	mov	fp, sp
   11154:	mov	r4, r0
   11158:	cmp	r0, #0
   1115c:	bne	11244 <__mempcpy_chk@plt+0x1f4>
   11160:	movw	r1, #19827	; 0x4d73
   11164:	movt	r1, #1
   11168:	mov	r0, #0
   1116c:	mov	r2, #5
   11170:	bl	10e64 <dcgettext@plt>
   11174:	mov	r1, r0
   11178:	movw	r5, #24924	; 0x615c
   1117c:	movt	r5, #2
   11180:	ldr	r2, [r5]
   11184:	mov	r0, #1
   11188:	mov	r3, r2
   1118c:	bl	10f9c <__printf_chk@plt>
   11190:	movw	r1, #19872	; 0x4da0
   11194:	movt	r1, #1
   11198:	mov	r0, #0
   1119c:	mov	r2, #5
   111a0:	bl	10e64 <dcgettext@plt>
   111a4:	movw	r6, #24900	; 0x6144
   111a8:	movt	r6, #2
   111ac:	ldr	r1, [r6]
   111b0:	bl	10df8 <fputs_unlocked@plt>
   111b4:	movw	r1, #19912	; 0x4dc8
   111b8:	movt	r1, #1
   111bc:	mov	r0, #0
   111c0:	mov	r2, #5
   111c4:	bl	10e64 <dcgettext@plt>
   111c8:	ldr	r1, [r6]
   111cc:	bl	10df8 <fputs_unlocked@plt>
   111d0:	movw	r1, #19957	; 0x4df5
   111d4:	movt	r1, #1
   111d8:	mov	r0, #0
   111dc:	mov	r2, #5
   111e0:	bl	10e64 <dcgettext@plt>
   111e4:	ldr	r1, [r6]
   111e8:	bl	10df8 <fputs_unlocked@plt>
   111ec:	movw	r1, #20011	; 0x4e2b
   111f0:	movt	r1, #1
   111f4:	mov	r0, #0
   111f8:	mov	r2, #5
   111fc:	bl	10e64 <dcgettext@plt>
   11200:	mov	r1, r0
   11204:	ldr	r2, [r5]
   11208:	mov	r0, #1
   1120c:	bl	10f9c <__printf_chk@plt>
   11210:	movw	r1, #20302	; 0x4f4e
   11214:	movt	r1, #1
   11218:	mov	r0, #0
   1121c:	mov	r2, #5
   11220:	bl	10e64 <dcgettext@plt>
   11224:	mov	r1, r0
   11228:	movw	r2, #20493	; 0x500d
   1122c:	movt	r2, #1
   11230:	mov	r0, #1
   11234:	bl	10f9c <__printf_chk@plt>
   11238:	bl	11288 <__mempcpy_chk@plt+0x238>
   1123c:	mov	r0, r4
   11240:	bl	10f54 <exit@plt>
   11244:	movw	r0, #24896	; 0x6140
   11248:	movt	r0, #2
   1124c:	ldr	r5, [r0]
   11250:	movw	r1, #19788	; 0x4d4c
   11254:	movt	r1, #1
   11258:	mov	r0, #0
   1125c:	mov	r2, #5
   11260:	bl	10e64 <dcgettext@plt>
   11264:	mov	r2, r0
   11268:	movw	r0, #24924	; 0x615c
   1126c:	movt	r0, #2
   11270:	ldr	r3, [r0]
   11274:	mov	r0, r5
   11278:	mov	r1, #1
   1127c:	bl	10fb4 <__fprintf_chk@plt>
   11280:	mov	r0, r4
   11284:	bl	10f54 <exit@plt>
   11288:	push	{r4, r5, r6, sl, fp, lr}
   1128c:	add	fp, sp, #16
   11290:	sub	sp, sp, #56	; 0x38
   11294:	movw	r0, #21144	; 0x5298
   11298:	movt	r0, #1
   1129c:	add	r1, r0, #32
   112a0:	mov	r2, #48	; 0x30
   112a4:	vld1.64	{d16-d17}, [r1]
   112a8:	mov	r6, sp
   112ac:	add	r1, r6, #32
   112b0:	add	r3, r0, #16
   112b4:	vld1.64	{d18-d19}, [r0], r2
   112b8:	vld1.64	{d20-d21}, [r3]
   112bc:	vldr	d22, [r0]
   112c0:	vst1.64	{d16-d17}, [r1]
   112c4:	add	r0, r6, #16
   112c8:	vst1.64	{d20-d21}, [r0]
   112cc:	mov	r0, r6
   112d0:	vst1.64	{d18-d19}, [r0], r2
   112d4:	vstr	d22, [r0]
   112d8:	ldr	r1, [sp]
   112dc:	cmp	r1, #0
   112e0:	movw	r4, #20493	; 0x500d
   112e4:	movt	r4, #1
   112e8:	beq	11310 <__mempcpy_chk@plt+0x2c0>
   112ec:	mov	r6, sp
   112f0:	movw	r5, #20493	; 0x500d
   112f4:	movt	r5, #1
   112f8:	mov	r0, r5
   112fc:	bl	10e04 <strcmp@plt>
   11300:	cmp	r0, #0
   11304:	ldrne	r1, [r6, #8]!
   11308:	cmpne	r1, #0
   1130c:	bne	112f8 <__mempcpy_chk@plt+0x2a8>
   11310:	ldr	r5, [r6, #4]
   11314:	movw	r1, #20925	; 0x51bd
   11318:	movt	r1, #1
   1131c:	mov	r0, #0
   11320:	mov	r2, #5
   11324:	bl	10e64 <dcgettext@plt>
   11328:	mov	r1, r0
   1132c:	movw	r2, #20539	; 0x503b
   11330:	movt	r2, #1
   11334:	movw	r3, #20948	; 0x51d4
   11338:	movt	r3, #1
   1133c:	mov	r0, #1
   11340:	bl	10f9c <__printf_chk@plt>
   11344:	cmp	r5, #0
   11348:	moveq	r5, r4
   1134c:	mov	r0, #5
   11350:	mov	r1, #0
   11354:	bl	10fe4 <setlocale@plt>
   11358:	cmp	r0, #0
   1135c:	beq	1139c <__mempcpy_chk@plt+0x34c>
   11360:	movw	r1, #20988	; 0x51fc
   11364:	movt	r1, #1
   11368:	mov	r2, #3
   1136c:	bl	1102c <strncmp@plt>
   11370:	cmp	r0, #0
   11374:	beq	1139c <__mempcpy_chk@plt+0x34c>
   11378:	movw	r1, #20992	; 0x5200
   1137c:	movt	r1, #1
   11380:	mov	r0, #0
   11384:	mov	r2, #5
   11388:	bl	10e64 <dcgettext@plt>
   1138c:	movw	r1, #24900	; 0x6144
   11390:	movt	r1, #2
   11394:	ldr	r1, [r1]
   11398:	bl	10df8 <fputs_unlocked@plt>
   1139c:	movw	r1, #21063	; 0x5247
   113a0:	movt	r1, #1
   113a4:	mov	r0, #0
   113a8:	mov	r2, #5
   113ac:	bl	10e64 <dcgettext@plt>
   113b0:	mov	r1, r0
   113b4:	movw	r2, #20948	; 0x51d4
   113b8:	movt	r2, #1
   113bc:	mov	r0, #1
   113c0:	mov	r3, r4
   113c4:	bl	10f9c <__printf_chk@plt>
   113c8:	movw	r0, #20858	; 0x517a
   113cc:	movt	r0, #1
   113d0:	movw	r6, #19911	; 0x4dc7
   113d4:	movt	r6, #1
   113d8:	cmp	r5, r4
   113dc:	moveq	r6, r0
   113e0:	movw	r1, #21090	; 0x5262
   113e4:	movt	r1, #1
   113e8:	mov	r0, #0
   113ec:	mov	r2, #5
   113f0:	bl	10e64 <dcgettext@plt>
   113f4:	mov	r1, r0
   113f8:	mov	r0, #1
   113fc:	mov	r2, r5
   11400:	mov	r3, r6
   11404:	sub	sp, fp, #16
   11408:	pop	{r4, r5, r6, sl, fp, lr}
   1140c:	b	10f9c <__printf_chk@plt>
   11410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11414:	add	fp, sp, #28
   11418:	sub	sp, sp, #44	; 0x2c
   1141c:	mov	r9, r1
   11420:	mov	r4, r0
   11424:	ldr	r0, [r1]
   11428:	bl	11f34 <__mempcpy_chk@plt+0xee4>
   1142c:	movw	r1, #19911	; 0x4dc7
   11430:	movt	r1, #1
   11434:	mov	r0, #6
   11438:	bl	10fe4 <setlocale@plt>
   1143c:	movw	r5, #20543	; 0x503f
   11440:	movt	r5, #1
   11444:	movw	r1, #20499	; 0x5013
   11448:	movt	r1, #1
   1144c:	mov	r0, r5
   11450:	bl	11008 <bindtextdomain@plt>
   11454:	mov	r0, r5
   11458:	bl	10e88 <textdomain@plt>
   1145c:	movw	r0, #20523	; 0x502b
   11460:	movt	r0, #1
   11464:	bl	10f00 <getenv@plt>
   11468:	mov	sl, #127	; 0x7f
   1146c:	cmp	r0, #0
   11470:	movweq	sl, #125	; 0x7d
   11474:	mov	r0, sl
   11478:	bl	11938 <__mempcpy_chk@plt+0x8e8>
   1147c:	movw	r0, #6508	; 0x196c
   11480:	movt	r0, #1
   11484:	bl	14d24 <__mempcpy_chk@plt+0x3cd4>
   11488:	movw	r0, #24808	; 0x60e8
   1148c:	movt	r0, #2
   11490:	ldr	r0, [r0]
   11494:	mov	r5, #0
   11498:	movw	r1, #20553	; 0x5049
   1149c:	movt	r1, #1
   114a0:	movw	r2, #4428	; 0x114c
   114a4:	movt	r2, #1
   114a8:	stm	sp, {r0, r5}
   114ac:	str	r2, [sp, #8]
   114b0:	str	r1, [sp, #12]
   114b4:	str	r5, [sp, #16]
   114b8:	movw	r2, #20493	; 0x500d
   114bc:	movt	r2, #1
   114c0:	movw	r3, #20539	; 0x503b
   114c4:	movt	r3, #1
   114c8:	mov	r0, r4
   114cc:	mov	r1, r9
   114d0:	bl	11e70 <__mempcpy_chk@plt+0xe20>
   114d4:	movw	r0, #24888	; 0x6138
   114d8:	movt	r0, #2
   114dc:	ldr	r0, [r0]
   114e0:	cmp	r0, r4
   114e4:	bge	1190c <__mempcpy_chk@plt+0x8bc>
   114e8:	mov	r0, #0
   114ec:	bl	11020 <isatty@plt>
   114f0:	mov	r6, r0
   114f4:	mov	r0, #1
   114f8:	bl	11020 <isatty@plt>
   114fc:	mov	r7, r0
   11500:	cmp	r0, #0
   11504:	bne	1151c <__mempcpy_chk@plt+0x4cc>
   11508:	bl	10f78 <__errno_location@plt>
   1150c:	ldr	r0, [r0]
   11510:	sub	r0, r0, #9
   11514:	clz	r0, r0
   11518:	lsr	r5, r0, #5
   1151c:	mov	r0, #2
   11520:	bl	11020 <isatty@plt>
   11524:	mov	r8, r0
   11528:	cmp	r6, #0
   1152c:	beq	11558 <__mempcpy_chk@plt+0x508>
   11530:	movw	r1, #20582	; 0x5066
   11534:	movt	r1, #1
   11538:	mov	r0, #0
   1153c:	mov	r2, #1
   11540:	mov	r3, #0
   11544:	bl	11c38 <__mempcpy_chk@plt+0xbe8>
   11548:	cmn	r0, #1
   1154c:	ble	1172c <__mempcpy_chk@plt+0x6dc>
   11550:	orrs	r0, r8, r7
   11554:	beq	11760 <__mempcpy_chk@plt+0x710>
   11558:	str	r6, [fp, #-32]	; 0xffffffe0
   1155c:	cmp	r7, #0
   11560:	beq	11590 <__mempcpy_chk@plt+0x540>
   11564:	str	r5, [sp, #36]	; 0x24
   11568:	mvn	r0, #384	; 0x180
   1156c:	bl	11014 <umask@plt>
   11570:	mov	r5, r0
   11574:	movw	r1, #20648	; 0x50a8
   11578:	movt	r1, #1
   1157c:	mov	r0, #1
   11580:	movw	r2, #1089	; 0x441
   11584:	mov	r3, #384	; 0x180
   11588:	bl	11c38 <__mempcpy_chk@plt+0xbe8>
   1158c:	b	115cc <__mempcpy_chk@plt+0x57c>
   11590:	cmp	r8, #0
   11594:	mov	r0, r8
   11598:	movwne	r0, #1
   1159c:	mov	r6, #1
   115a0:	tst	r5, r0
   115a4:	beq	1164c <__mempcpy_chk@plt+0x5fc>
   115a8:	str	r5, [sp, #36]	; 0x24
   115ac:	mvn	r0, #384	; 0x180
   115b0:	bl	11014 <umask@plt>
   115b4:	mov	r5, r0
   115b8:	movw	r0, #20648	; 0x50a8
   115bc:	movt	r0, #1
   115c0:	movw	r1, #1089	; 0x441
   115c4:	mov	r2, #384	; 0x180
   115c8:	bl	10ef4 <open64@plt>
   115cc:	mov	r6, r0
   115d0:	cmn	r0, #1
   115d4:	ble	116d0 <__mempcpy_chk@plt+0x680>
   115d8:	str	r9, [sp, #32]
   115dc:	mov	r4, #0
   115e0:	movw	r9, #20648	; 0x50a8
   115e4:	movt	r9, #1
   115e8:	mov	r0, r5
   115ec:	bl	11014 <umask@plt>
   115f0:	movw	r0, #20681	; 0x50c9
   115f4:	movt	r0, #1
   115f8:	movw	r1, #20700	; 0x50dc
   115fc:	movt	r1, #1
   11600:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11604:	cmp	r2, #0
   11608:	movne	r1, r0
   1160c:	mov	r0, #0
   11610:	mov	r2, #5
   11614:	bl	10e64 <dcgettext@plt>
   11618:	mov	r5, r0
   1161c:	mov	r0, #4
   11620:	mov	r1, r9
   11624:	bl	13534 <__mempcpy_chk@plt+0x24e4>
   11628:	mov	r3, r0
   1162c:	mov	r0, #0
   11630:	mov	r1, #0
   11634:	mov	r2, r5
   11638:	bl	10ee8 <error@plt>
   1163c:	mov	r0, r4
   11640:	bl	11d98 <__mempcpy_chk@plt+0xd48>
   11644:	ldr	r9, [sp, #32]
   11648:	ldr	r5, [sp, #36]	; 0x24
   1164c:	cmp	r8, #0
   11650:	beq	116c8 <__mempcpy_chk@plt+0x678>
   11654:	mov	r0, #2
   11658:	movw	r1, #1030	; 0x406
   1165c:	mov	r2, #3
   11660:	bl	11a54 <__mempcpy_chk@plt+0xa04>
   11664:	mov	r4, r0
   11668:	cmp	r7, #0
   1166c:	bne	116a8 <__mempcpy_chk@plt+0x658>
   11670:	movw	r0, #20723	; 0x50f3
   11674:	movt	r0, #1
   11678:	movw	r1, #20742	; 0x5106
   1167c:	movt	r1, #1
   11680:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11684:	cmp	r2, #0
   11688:	movne	r1, r0
   1168c:	mov	r0, #0
   11690:	mov	r2, #5
   11694:	bl	10e64 <dcgettext@plt>
   11698:	mov	r2, r0
   1169c:	mov	r0, #0
   116a0:	mov	r1, #0
   116a4:	bl	10ee8 <error@plt>
   116a8:	mov	r0, r6
   116ac:	mov	r1, #2
   116b0:	bl	10e70 <dup2@plt>
   116b4:	cmn	r0, #1
   116b8:	ble	11788 <__mempcpy_chk@plt+0x738>
   116bc:	cmp	r5, #0
   116c0:	bne	117c4 <__mempcpy_chk@plt+0x774>
   116c4:	b	117cc <__mempcpy_chk@plt+0x77c>
   116c8:	mov	r4, #2
   116cc:	b	117cc <__mempcpy_chk@plt+0x77c>
   116d0:	bl	10f78 <__errno_location@plt>
   116d4:	str	r0, [sp, #24]
   116d8:	ldr	r0, [r0]
   116dc:	str	r0, [sp, #28]
   116e0:	movw	r0, #20658	; 0x50b2
   116e4:	movt	r0, #1
   116e8:	bl	10f00 <getenv@plt>
   116ec:	cmp	r0, #0
   116f0:	beq	11854 <__mempcpy_chk@plt+0x804>
   116f4:	str	r9, [sp, #32]
   116f8:	movw	r1, #20648	; 0x50a8
   116fc:	movt	r1, #1
   11700:	mov	r2, #0
   11704:	bl	11ca0 <__mempcpy_chk@plt+0xc50>
   11708:	mov	r9, r0
   1170c:	cmp	r7, #0
   11710:	beq	1185c <__mempcpy_chk@plt+0x80c>
   11714:	mov	r0, #1
   11718:	mov	r1, r9
   1171c:	movw	r2, #1089	; 0x441
   11720:	mov	r3, #384	; 0x180
   11724:	bl	11c38 <__mempcpy_chk@plt+0xbe8>
   11728:	b	1186c <__mempcpy_chk@plt+0x81c>
   1172c:	bl	10f78 <__errno_location@plt>
   11730:	ldr	r4, [r0]
   11734:	movw	r1, #20592	; 0x5070
   11738:	movt	r1, #1
   1173c:	mov	r0, #0
   11740:	mov	r2, #5
   11744:	bl	10e64 <dcgettext@plt>
   11748:	mov	r2, r0
   1174c:	mov	r0, sl
   11750:	mov	r1, r4
   11754:	bl	10ee8 <error@plt>
   11758:	orrs	r0, r8, r7
   1175c:	bne	11558 <__mempcpy_chk@plt+0x508>
   11760:	movw	r1, #20633	; 0x5099
   11764:	movt	r1, #1
   11768:	mov	r0, #0
   1176c:	mov	r2, #5
   11770:	bl	10e64 <dcgettext@plt>
   11774:	mov	r2, r0
   11778:	mov	r0, #0
   1177c:	mov	r1, #0
   11780:	bl	10ee8 <error@plt>
   11784:	b	11558 <__mempcpy_chk@plt+0x508>
   11788:	bl	10f78 <__errno_location@plt>
   1178c:	mov	r7, r5
   11790:	ldr	r5, [r0]
   11794:	movw	r1, #20771	; 0x5123
   11798:	movt	r1, #1
   1179c:	mov	r0, #0
   117a0:	mov	r2, #5
   117a4:	bl	10e64 <dcgettext@plt>
   117a8:	mov	r2, r0
   117ac:	mov	r0, sl
   117b0:	mov	r1, r5
   117b4:	mov	r5, r7
   117b8:	bl	10ee8 <error@plt>
   117bc:	cmp	r5, #0
   117c0:	beq	117cc <__mempcpy_chk@plt+0x77c>
   117c4:	mov	r0, r6
   117c8:	bl	11044 <close@plt>
   117cc:	movw	r0, #24896	; 0x6140
   117d0:	movt	r0, #2
   117d4:	ldr	r0, [r0]
   117d8:	bl	10ed0 <ferror_unlocked@plt>
   117dc:	cmp	r0, #0
   117e0:	bne	11900 <__mempcpy_chk@plt+0x8b0>
   117e4:	mov	r0, #1
   117e8:	mov	r1, #1
   117ec:	bl	10e58 <signal@plt>
   117f0:	movw	r0, #24888	; 0x6138
   117f4:	movt	r0, #2
   117f8:	ldr	r0, [r0]
   117fc:	ldr	r0, [r9, r0, lsl #2]!
   11800:	mov	r1, r9
   11804:	bl	10e40 <execvp@plt>
   11808:	bl	10f78 <__errno_location@plt>
   1180c:	ldr	r5, [r0]
   11810:	mov	sl, #126	; 0x7e
   11814:	cmp	r5, #2
   11818:	movweq	sl, #127	; 0x7f
   1181c:	mov	r0, r4
   11820:	mov	r1, #2
   11824:	bl	10e70 <dup2@plt>
   11828:	cmp	r0, #2
   1182c:	bne	11900 <__mempcpy_chk@plt+0x8b0>
   11830:	movw	r1, #20805	; 0x5145
   11834:	movt	r1, #1
   11838:	mov	r0, #0
   1183c:	mov	r2, #5
   11840:	bl	10e64 <dcgettext@plt>
   11844:	mov	r4, r0
   11848:	ldr	r1, [r9]
   1184c:	mov	r0, #4
   11850:	b	118e8 <__mempcpy_chk@plt+0x898>
   11854:	mov	r9, #0
   11858:	b	1187c <__mempcpy_chk@plt+0x82c>
   1185c:	mov	r0, r9
   11860:	movw	r1, #1089	; 0x441
   11864:	mov	r2, #384	; 0x180
   11868:	bl	10ef4 <open64@plt>
   1186c:	mov	r6, r0
   11870:	cmn	r0, #1
   11874:	mov	r4, r9
   11878:	bgt	115e8 <__mempcpy_chk@plt+0x598>
   1187c:	ldr	r0, [sp, #24]
   11880:	ldr	r5, [r0]
   11884:	movw	r1, #20663	; 0x50b7
   11888:	movt	r1, #1
   1188c:	mov	r0, #0
   11890:	mov	r2, #5
   11894:	bl	10e64 <dcgettext@plt>
   11898:	mov	r4, r0
   1189c:	movw	r1, #20648	; 0x50a8
   118a0:	movt	r1, #1
   118a4:	mov	r0, #4
   118a8:	bl	13534 <__mempcpy_chk@plt+0x24e4>
   118ac:	mov	r3, r0
   118b0:	mov	r0, #0
   118b4:	ldr	r1, [sp, #28]
   118b8:	mov	r2, r4
   118bc:	bl	10ee8 <error@plt>
   118c0:	cmp	r9, #0
   118c4:	beq	11900 <__mempcpy_chk@plt+0x8b0>
   118c8:	movw	r1, #20663	; 0x50b7
   118cc:	movt	r1, #1
   118d0:	mov	r0, #0
   118d4:	mov	r2, #5
   118d8:	bl	10e64 <dcgettext@plt>
   118dc:	mov	r4, r0
   118e0:	mov	r0, #4
   118e4:	mov	r1, r9
   118e8:	bl	13534 <__mempcpy_chk@plt+0x24e4>
   118ec:	mov	r3, r0
   118f0:	mov	r0, #0
   118f4:	mov	r1, r5
   118f8:	mov	r2, r4
   118fc:	bl	10ee8 <error@plt>
   11900:	mov	r0, sl
   11904:	sub	sp, fp, #28
   11908:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1190c:	movw	r1, #20566	; 0x5056
   11910:	movt	r1, #1
   11914:	mov	r0, #0
   11918:	mov	r2, #5
   1191c:	bl	10e64 <dcgettext@plt>
   11920:	mov	r2, r0
   11924:	mov	r0, #0
   11928:	mov	r1, #0
   1192c:	bl	10ee8 <error@plt>
   11930:	mov	r0, sl
   11934:	bl	1114c <__mempcpy_chk@plt+0xfc>
   11938:	cmp	r0, #1
   1193c:	movwne	r1, #24812	; 0x60ec
   11940:	movtne	r1, #2
   11944:	strne	r0, [r1]
   11948:	bx	lr
   1194c:	movw	r1, #24912	; 0x6150
   11950:	movt	r1, #2
   11954:	str	r0, [r1]
   11958:	bx	lr
   1195c:	movw	r1, #24916	; 0x6154
   11960:	movt	r1, #2
   11964:	strb	r0, [r1]
   11968:	bx	lr
   1196c:	push	{r4, r5, r6, sl, fp, lr}
   11970:	add	fp, sp, #16
   11974:	sub	sp, sp, #8
   11978:	movw	r0, #24900	; 0x6144
   1197c:	movt	r0, #2
   11980:	ldr	r0, [r0]
   11984:	bl	14854 <__mempcpy_chk@plt+0x3804>
   11988:	cmp	r0, #0
   1198c:	beq	119b4 <__mempcpy_chk@plt+0x964>
   11990:	movw	r0, #24916	; 0x6154
   11994:	movt	r0, #2
   11998:	ldrb	r0, [r0]
   1199c:	cmp	r0, #0
   119a0:	beq	119d4 <__mempcpy_chk@plt+0x984>
   119a4:	bl	10f78 <__errno_location@plt>
   119a8:	ldr	r0, [r0]
   119ac:	cmp	r0, #32
   119b0:	bne	119d4 <__mempcpy_chk@plt+0x984>
   119b4:	movw	r0, #24896	; 0x6140
   119b8:	movt	r0, #2
   119bc:	ldr	r0, [r0]
   119c0:	bl	14854 <__mempcpy_chk@plt+0x3804>
   119c4:	cmp	r0, #0
   119c8:	subeq	sp, fp, #16
   119cc:	popeq	{r4, r5, r6, sl, fp, pc}
   119d0:	b	11a44 <__mempcpy_chk@plt+0x9f4>
   119d4:	movw	r1, #21215	; 0x52df
   119d8:	movt	r1, #1
   119dc:	mov	r0, #0
   119e0:	mov	r2, #5
   119e4:	bl	10e64 <dcgettext@plt>
   119e8:	mov	r4, r0
   119ec:	movw	r0, #24912	; 0x6150
   119f0:	movt	r0, #2
   119f4:	ldr	r6, [r0]
   119f8:	bl	10f78 <__errno_location@plt>
   119fc:	ldr	r5, [r0]
   11a00:	cmp	r6, #0
   11a04:	bne	11a20 <__mempcpy_chk@plt+0x9d0>
   11a08:	movw	r2, #21231	; 0x52ef
   11a0c:	movt	r2, #1
   11a10:	mov	r0, #0
   11a14:	mov	r1, r5
   11a18:	mov	r3, r4
   11a1c:	b	11a40 <__mempcpy_chk@plt+0x9f0>
   11a20:	mov	r0, r6
   11a24:	bl	135d8 <__mempcpy_chk@plt+0x2588>
   11a28:	mov	r3, r0
   11a2c:	str	r4, [sp]
   11a30:	movw	r2, #21227	; 0x52eb
   11a34:	movt	r2, #1
   11a38:	mov	r0, #0
   11a3c:	mov	r1, r5
   11a40:	bl	10ee8 <error@plt>
   11a44:	movw	r0, #24812	; 0x60ec
   11a48:	movt	r0, #2
   11a4c:	ldr	r0, [r0]
   11a50:	bl	10e28 <_exit@plt>
   11a54:	sub	sp, sp, #8
   11a58:	push	{fp, lr}
   11a5c:	mov	fp, sp
   11a60:	sub	sp, sp, #8
   11a64:	str	r2, [fp, #8]
   11a68:	str	r3, [fp, #12]
   11a6c:	add	r2, fp, #8
   11a70:	str	r2, [sp, #4]
   11a74:	cmp	r1, #11
   11a78:	bhi	11ab8 <__mempcpy_chk@plt+0xa68>
   11a7c:	mov	r2, #1
   11a80:	movw	r3, #1300	; 0x514
   11a84:	tst	r3, r2, lsl r1
   11a88:	bne	11b08 <__mempcpy_chk@plt+0xab8>
   11a8c:	movw	r3, #2570	; 0xa0a
   11a90:	tst	r3, r2, lsl r1
   11a94:	bne	11ae0 <__mempcpy_chk@plt+0xa90>
   11a98:	cmp	r1, #0
   11a9c:	bne	11ab8 <__mempcpy_chk@plt+0xa68>
   11aa0:	ldr	r1, [sp, #4]
   11aa4:	add	r2, r1, #4
   11aa8:	str	r2, [sp, #4]
   11aac:	ldr	r1, [r1]
   11ab0:	bl	11b2c <__mempcpy_chk@plt+0xadc>
   11ab4:	b	11b1c <__mempcpy_chk@plt+0xacc>
   11ab8:	sub	r2, r1, #1024	; 0x400
   11abc:	cmp	r2, #10
   11ac0:	bhi	11b08 <__mempcpy_chk@plt+0xab8>
   11ac4:	mov	ip, #1
   11ac8:	movw	r3, #645	; 0x285
   11acc:	tst	r3, ip, lsl r2
   11ad0:	bne	11b08 <__mempcpy_chk@plt+0xab8>
   11ad4:	movw	r3, #1282	; 0x502
   11ad8:	tst	r3, ip, lsl r2
   11adc:	beq	11ae8 <__mempcpy_chk@plt+0xa98>
   11ae0:	bl	10fd8 <fcntl64@plt>
   11ae4:	b	11b1c <__mempcpy_chk@plt+0xacc>
   11ae8:	cmp	r2, #6
   11aec:	bne	11b08 <__mempcpy_chk@plt+0xab8>
   11af0:	ldr	r1, [sp, #4]
   11af4:	add	r2, r1, #4
   11af8:	str	r2, [sp, #4]
   11afc:	ldr	r1, [r1]
   11b00:	bl	11b38 <__mempcpy_chk@plt+0xae8>
   11b04:	b	11b1c <__mempcpy_chk@plt+0xacc>
   11b08:	ldr	r2, [sp, #4]
   11b0c:	add	r3, r2, #4
   11b10:	str	r3, [sp, #4]
   11b14:	ldr	r2, [r2]
   11b18:	bl	10fd8 <fcntl64@plt>
   11b1c:	mov	sp, fp
   11b20:	pop	{fp, lr}
   11b24:	add	sp, sp, #8
   11b28:	bx	lr
   11b2c:	mov	r2, r1
   11b30:	mov	r1, #0
   11b34:	b	10fd8 <fcntl64@plt>
   11b38:	push	{r4, r5, r6, r7, fp, lr}
   11b3c:	add	fp, sp, #16
   11b40:	mov	r5, r1
   11b44:	mov	r6, r0
   11b48:	movw	r7, #24920	; 0x6158
   11b4c:	movt	r7, #2
   11b50:	ldr	r0, [r7]
   11b54:	cmp	r0, #0
   11b58:	bmi	11bbc <__mempcpy_chk@plt+0xb6c>
   11b5c:	mov	r0, r6
   11b60:	movw	r1, #1030	; 0x406
   11b64:	mov	r2, r5
   11b68:	bl	10fd8 <fcntl64@plt>
   11b6c:	mov	r4, r0
   11b70:	cmn	r0, #1
   11b74:	bgt	11ba8 <__mempcpy_chk@plt+0xb58>
   11b78:	bl	10f78 <__errno_location@plt>
   11b7c:	ldr	r0, [r0]
   11b80:	cmp	r0, #22
   11b84:	bne	11ba8 <__mempcpy_chk@plt+0xb58>
   11b88:	mov	r0, r6
   11b8c:	mov	r1, r5
   11b90:	bl	11b2c <__mempcpy_chk@plt+0xadc>
   11b94:	mov	r4, r0
   11b98:	cmp	r0, #0
   11b9c:	bmi	11c0c <__mempcpy_chk@plt+0xbbc>
   11ba0:	mvn	r0, #0
   11ba4:	b	11bac <__mempcpy_chk@plt+0xb5c>
   11ba8:	mov	r0, #1
   11bac:	str	r0, [r7]
   11bb0:	cmp	r4, #0
   11bb4:	bpl	11bd4 <__mempcpy_chk@plt+0xb84>
   11bb8:	b	11c0c <__mempcpy_chk@plt+0xbbc>
   11bbc:	mov	r0, r6
   11bc0:	mov	r1, r5
   11bc4:	bl	11b2c <__mempcpy_chk@plt+0xadc>
   11bc8:	mov	r4, r0
   11bcc:	cmp	r4, #0
   11bd0:	bmi	11c0c <__mempcpy_chk@plt+0xbbc>
   11bd4:	ldr	r0, [r7]
   11bd8:	cmn	r0, #1
   11bdc:	bne	11c0c <__mempcpy_chk@plt+0xbbc>
   11be0:	mov	r0, r4
   11be4:	mov	r1, #1
   11be8:	bl	10fd8 <fcntl64@plt>
   11bec:	cmp	r0, #0
   11bf0:	bmi	11c14 <__mempcpy_chk@plt+0xbc4>
   11bf4:	orr	r2, r0, #1
   11bf8:	mov	r0, r4
   11bfc:	mov	r1, #2
   11c00:	bl	10fd8 <fcntl64@plt>
   11c04:	cmn	r0, #1
   11c08:	beq	11c14 <__mempcpy_chk@plt+0xbc4>
   11c0c:	mov	r0, r4
   11c10:	pop	{r4, r5, r6, r7, fp, pc}
   11c14:	bl	10f78 <__errno_location@plt>
   11c18:	mov	r5, r0
   11c1c:	ldr	r6, [r0]
   11c20:	mov	r0, r4
   11c24:	bl	11044 <close@plt>
   11c28:	str	r6, [r5]
   11c2c:	mvn	r4, #0
   11c30:	mov	r0, r4
   11c34:	pop	{r4, r5, r6, r7, fp, pc}
   11c38:	push	{r4, r5, r6, r7, fp, lr}
   11c3c:	add	fp, sp, #16
   11c40:	mov	r5, r0
   11c44:	mov	r0, r1
   11c48:	mov	r1, r2
   11c4c:	mov	r2, r3
   11c50:	bl	10ef4 <open64@plt>
   11c54:	mov	r4, r0
   11c58:	cmp	r0, r5
   11c5c:	beq	11c98 <__mempcpy_chk@plt+0xc48>
   11c60:	cmp	r4, #0
   11c64:	bmi	11c98 <__mempcpy_chk@plt+0xc48>
   11c68:	mov	r0, r4
   11c6c:	mov	r1, r5
   11c70:	bl	10e70 <dup2@plt>
   11c74:	mov	r5, r0
   11c78:	bl	10f78 <__errno_location@plt>
   11c7c:	mov	r6, r0
   11c80:	ldr	r7, [r0]
   11c84:	mov	r0, r4
   11c88:	bl	11044 <close@plt>
   11c8c:	str	r7, [r6]
   11c90:	mov	r0, r5
   11c94:	pop	{r4, r5, r6, r7, fp, pc}
   11c98:	mov	r0, r4
   11c9c:	pop	{r4, r5, r6, r7, fp, pc}
   11ca0:	push	{fp, lr}
   11ca4:	mov	fp, sp
   11ca8:	bl	11cb8 <__mempcpy_chk@plt+0xc68>
   11cac:	cmp	r0, #0
   11cb0:	popne	{fp, pc}
   11cb4:	bl	14390 <__mempcpy_chk@plt+0x3340>
   11cb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cbc:	add	fp, sp, #28
   11cc0:	push	{r2}		; (str r2, [sp, #-4]!)
   11cc4:	mov	sl, r1
   11cc8:	mov	r7, r0
   11ccc:	bl	144ac <__mempcpy_chk@plt+0x345c>
   11cd0:	sub	r4, r0, r7
   11cd4:	bl	144f8 <__mempcpy_chk@plt+0x34a8>
   11cd8:	mov	r6, r0
   11cdc:	add	r5, r4, r0
   11ce0:	mov	r0, sl
   11ce4:	bl	10f6c <strlen@plt>
   11ce8:	mov	r9, r0
   11cec:	cmp	r6, #0
   11cf0:	beq	11d18 <__mempcpy_chk@plt+0xcc8>
   11cf4:	add	r0, r5, r7
   11cf8:	ldrb	r0, [r0, #-1]
   11cfc:	mov	r4, #0
   11d00:	cmp	r0, #47	; 0x2f
   11d04:	beq	11d28 <__mempcpy_chk@plt+0xcd8>
   11d08:	ldrb	r0, [sl]
   11d0c:	subs	r4, r0, #47	; 0x2f
   11d10:	movwne	r4, #47	; 0x2f
   11d14:	b	11d28 <__mempcpy_chk@plt+0xcd8>
   11d18:	ldrb	r0, [sl]
   11d1c:	mov	r4, #0
   11d20:	cmp	r0, #47	; 0x2f
   11d24:	movweq	r4, #46	; 0x2e
   11d28:	add	r0, r9, r5
   11d2c:	uxtb	r8, r4
   11d30:	cmp	r8, #0
   11d34:	movwne	r8, #1
   11d38:	add	r0, r0, r8
   11d3c:	add	r0, r0, #1
   11d40:	bl	14428 <__mempcpy_chk@plt+0x33d8>
   11d44:	mov	r6, r0
   11d48:	cmp	r0, #0
   11d4c:	beq	11d8c <__mempcpy_chk@plt+0xd3c>
   11d50:	mov	r0, r6
   11d54:	mov	r1, r7
   11d58:	mov	r2, r5
   11d5c:	mvn	r3, #0
   11d60:	bl	11050 <__mempcpy_chk@plt>
   11d64:	strb	r4, [r0], r8
   11d68:	ldr	r1, [sp]
   11d6c:	cmp	r1, #0
   11d70:	strne	r0, [r1]
   11d74:	mov	r1, sl
   11d78:	mov	r2, r9
   11d7c:	mvn	r3, #0
   11d80:	bl	11050 <__mempcpy_chk@plt>
   11d84:	mov	r1, #0
   11d88:	strb	r1, [r0]
   11d8c:	mov	r0, r6
   11d90:	sub	sp, fp, #28
   11d94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d98:	push	{r4, r5, r6, sl, fp, lr}
   11d9c:	add	fp, sp, #16
   11da0:	mov	r4, r0
   11da4:	bl	10f78 <__errno_location@plt>
   11da8:	mov	r5, r0
   11dac:	ldr	r6, [r0]
   11db0:	mov	r0, r4
   11db4:	bl	10e1c <free@plt>
   11db8:	str	r6, [r5]
   11dbc:	pop	{r4, r5, r6, sl, fp, pc}
   11dc0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11dc4:	add	fp, sp, #24
   11dc8:	sub	sp, sp, #8
   11dcc:	movw	r6, #24904	; 0x6148
   11dd0:	movt	r6, #2
   11dd4:	ldr	r7, [r6]
   11dd8:	mov	r4, #0
   11ddc:	str	r4, [r6]
   11de0:	cmp	r0, #2
   11de4:	bne	11e58 <__mempcpy_chk@plt+0xe08>
   11de8:	mov	r8, r3
   11dec:	mov	r5, r2
   11df0:	str	r4, [sp]
   11df4:	movw	r2, #21234	; 0x52f2
   11df8:	movt	r2, #1
   11dfc:	movw	r3, #21252	; 0x5304
   11e00:	movt	r3, #1
   11e04:	mov	r0, #2
   11e08:	bl	10f3c <getopt_long@plt>
   11e0c:	cmp	r0, #104	; 0x68
   11e10:	beq	11e4c <__mempcpy_chk@plt+0xdfc>
   11e14:	cmp	r0, #118	; 0x76
   11e18:	bne	11e58 <__mempcpy_chk@plt+0xe08>
   11e1c:	ldr	r3, [fp, #8]
   11e20:	add	r1, fp, #16
   11e24:	str	r1, [sp, #4]
   11e28:	movw	r0, #24900	; 0x6144
   11e2c:	movt	r0, #2
   11e30:	ldr	r0, [r0]
   11e34:	str	r1, [sp]
   11e38:	mov	r1, r5
   11e3c:	mov	r2, r8
   11e40:	bl	13eb0 <__mempcpy_chk@plt+0x2e60>
   11e44:	mov	r0, #0
   11e48:	bl	10f54 <exit@plt>
   11e4c:	ldr	r1, [fp, #12]
   11e50:	mov	r0, #0
   11e54:	blx	r1
   11e58:	movw	r0, #24888	; 0x6138
   11e5c:	movt	r0, #2
   11e60:	str	r4, [r0]
   11e64:	str	r7, [r6]
   11e68:	sub	sp, fp, #24
   11e6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11e70:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11e74:	add	fp, sp, #24
   11e78:	sub	sp, sp, #8
   11e7c:	mov	r8, r3
   11e80:	mov	r9, r2
   11e84:	movw	r7, #24904	; 0x6148
   11e88:	movt	r7, #2
   11e8c:	ldr	r4, [r7]
   11e90:	mov	r2, #1
   11e94:	str	r2, [r7]
   11e98:	mov	r6, #0
   11e9c:	str	r6, [sp]
   11ea0:	ldr	r3, [fp, #12]
   11ea4:	movw	r5, #19911	; 0x4dc7
   11ea8:	movt	r5, #1
   11eac:	movw	r2, #21234	; 0x52f2
   11eb0:	movt	r2, #1
   11eb4:	cmp	r3, #0
   11eb8:	movne	r2, r5
   11ebc:	movw	r3, #21252	; 0x5304
   11ec0:	movt	r3, #1
   11ec4:	bl	10f3c <getopt_long@plt>
   11ec8:	cmn	r0, #1
   11ecc:	beq	11ef8 <__mempcpy_chk@plt+0xea8>
   11ed0:	cmp	r0, #104	; 0x68
   11ed4:	beq	11eec <__mempcpy_chk@plt+0xe9c>
   11ed8:	cmp	r0, #118	; 0x76
   11edc:	beq	11f04 <__mempcpy_chk@plt+0xeb4>
   11ee0:	movw	r0, #24812	; 0x60ec
   11ee4:	movt	r0, #2
   11ee8:	ldr	r6, [r0]
   11eec:	ldr	r1, [fp, #16]
   11ef0:	mov	r0, r6
   11ef4:	blx	r1
   11ef8:	str	r4, [r7]
   11efc:	sub	sp, fp, #24
   11f00:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11f04:	ldr	r3, [fp, #8]
   11f08:	add	r1, fp, #20
   11f0c:	str	r1, [sp, #4]
   11f10:	movw	r0, #24900	; 0x6144
   11f14:	movt	r0, #2
   11f18:	ldr	r0, [r0]
   11f1c:	str	r1, [sp]
   11f20:	mov	r1, r9
   11f24:	mov	r2, r8
   11f28:	bl	13eb0 <__mempcpy_chk@plt+0x2e60>
   11f2c:	mov	r0, #0
   11f30:	bl	10f54 <exit@plt>
   11f34:	push	{r4, r5, fp, lr}
   11f38:	add	fp, sp, #8
   11f3c:	cmp	r0, #0
   11f40:	beq	11fd4 <__mempcpy_chk@plt+0xf84>
   11f44:	mov	r4, r0
   11f48:	mov	r1, #47	; 0x2f
   11f4c:	bl	10ff0 <strrchr@plt>
   11f50:	cmp	r0, #0
   11f54:	mov	r5, r4
   11f58:	addne	r5, r0, #1
   11f5c:	sub	r0, r5, r4
   11f60:	cmp	r0, #7
   11f64:	blt	11fb8 <__mempcpy_chk@plt+0xf68>
   11f68:	sub	r0, r5, #7
   11f6c:	movw	r1, #21356	; 0x536c
   11f70:	movt	r1, #1
   11f74:	mov	r2, #7
   11f78:	bl	1102c <strncmp@plt>
   11f7c:	cmp	r0, #0
   11f80:	bne	11fb8 <__mempcpy_chk@plt+0xf68>
   11f84:	movw	r1, #21364	; 0x5374
   11f88:	movt	r1, #1
   11f8c:	mov	r0, r5
   11f90:	mov	r2, #3
   11f94:	bl	1102c <strncmp@plt>
   11f98:	cmp	r0, #0
   11f9c:	beq	11fa8 <__mempcpy_chk@plt+0xf58>
   11fa0:	mov	r4, r5
   11fa4:	b	11fb8 <__mempcpy_chk@plt+0xf68>
   11fa8:	add	r4, r5, #3
   11fac:	movw	r0, #24880	; 0x6130
   11fb0:	movt	r0, #2
   11fb4:	str	r4, [r0]
   11fb8:	movw	r0, #24884	; 0x6134
   11fbc:	movt	r0, #2
   11fc0:	str	r4, [r0]
   11fc4:	movw	r0, #24924	; 0x615c
   11fc8:	movt	r0, #2
   11fcc:	str	r4, [r0]
   11fd0:	pop	{r4, r5, fp, pc}
   11fd4:	movw	r0, #24896	; 0x6140
   11fd8:	movt	r0, #2
   11fdc:	ldr	r3, [r0]
   11fe0:	movw	r0, #21300	; 0x5334
   11fe4:	movt	r0, #1
   11fe8:	mov	r1, #55	; 0x37
   11fec:	mov	r2, #1
   11ff0:	bl	10ea0 <fwrite@plt>
   11ff4:	bl	11038 <abort@plt>
   11ff8:	push	{r4, r5, r6, sl, fp, lr}
   11ffc:	add	fp, sp, #16
   12000:	mov	r4, r0
   12004:	movw	r0, #24928	; 0x6160
   12008:	movt	r0, #2
   1200c:	cmp	r4, #0
   12010:	moveq	r4, r0
   12014:	bl	10f78 <__errno_location@plt>
   12018:	mov	r5, r0
   1201c:	ldr	r6, [r0]
   12020:	mov	r0, r4
   12024:	mov	r1, #48	; 0x30
   12028:	bl	142f0 <__mempcpy_chk@plt+0x32a0>
   1202c:	str	r6, [r5]
   12030:	pop	{r4, r5, r6, sl, fp, pc}
   12034:	movw	r1, #24928	; 0x6160
   12038:	movt	r1, #2
   1203c:	cmp	r0, #0
   12040:	movne	r1, r0
   12044:	ldr	r0, [r1]
   12048:	bx	lr
   1204c:	movw	r2, #24928	; 0x6160
   12050:	movt	r2, #2
   12054:	cmp	r0, #0
   12058:	movne	r2, r0
   1205c:	str	r1, [r2]
   12060:	bx	lr
   12064:	movw	r3, #24928	; 0x6160
   12068:	movt	r3, #2
   1206c:	cmp	r0, #0
   12070:	movne	r3, r0
   12074:	ubfx	r0, r1, #5, #3
   12078:	add	ip, r3, r0, lsl #2
   1207c:	ldr	r3, [ip, #8]
   12080:	and	r1, r1, #31
   12084:	mov	r0, #1
   12088:	and	r0, r0, r3, lsr r1
   1208c:	and	r2, r2, #1
   12090:	eor	r2, r0, r2
   12094:	eor	r1, r3, r2, lsl r1
   12098:	str	r1, [ip, #8]
   1209c:	bx	lr
   120a0:	movw	r2, #24928	; 0x6160
   120a4:	movt	r2, #2
   120a8:	cmp	r0, #0
   120ac:	movne	r2, r0
   120b0:	ldr	r0, [r2, #4]
   120b4:	str	r1, [r2, #4]
   120b8:	bx	lr
   120bc:	push	{fp, lr}
   120c0:	mov	fp, sp
   120c4:	movw	r3, #24928	; 0x6160
   120c8:	movt	r3, #2
   120cc:	cmp	r0, #0
   120d0:	movne	r3, r0
   120d4:	mov	r0, #10
   120d8:	str	r0, [r3]
   120dc:	cmp	r1, #0
   120e0:	cmpne	r2, #0
   120e4:	bne	120ec <__mempcpy_chk@plt+0x109c>
   120e8:	bl	11038 <abort@plt>
   120ec:	str	r1, [r3, #40]	; 0x28
   120f0:	str	r2, [r3, #44]	; 0x2c
   120f4:	pop	{fp, pc}
   120f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120fc:	add	fp, sp, #28
   12100:	sub	sp, sp, #20
   12104:	mov	r8, r3
   12108:	mov	r9, r2
   1210c:	mov	sl, r1
   12110:	mov	r7, r0
   12114:	ldr	r0, [fp, #8]
   12118:	movw	r5, #24928	; 0x6160
   1211c:	movt	r5, #2
   12120:	cmp	r0, #0
   12124:	movne	r5, r0
   12128:	bl	10f78 <__errno_location@plt>
   1212c:	mov	r4, r0
   12130:	ldm	r5, {r0, r1}
   12134:	ldr	r2, [r5, #40]	; 0x28
   12138:	ldr	r3, [r5, #44]	; 0x2c
   1213c:	ldr	r6, [r4]
   12140:	add	r5, r5, #8
   12144:	stm	sp, {r0, r1, r5}
   12148:	str	r2, [sp, #12]
   1214c:	str	r3, [sp, #16]
   12150:	mov	r0, r7
   12154:	mov	r1, sl
   12158:	mov	r2, r9
   1215c:	mov	r3, r8
   12160:	bl	12170 <__mempcpy_chk@plt+0x1120>
   12164:	str	r6, [r4]
   12168:	sub	sp, fp, #28
   1216c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12170:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12174:	add	fp, sp, #28
   12178:	sub	sp, sp, #156	; 0x9c
   1217c:	mov	r9, r3
   12180:	mov	r7, r1
   12184:	mov	r6, r0
   12188:	str	r2, [fp, #-80]	; 0xffffffb0
   1218c:	add	r0, r2, #1
   12190:	str	r0, [sp, #76]	; 0x4c
   12194:	ldr	r0, [fp, #12]
   12198:	and	r1, r0, #1
   1219c:	str	r1, [sp, #40]	; 0x28
   121a0:	and	r1, r0, #4
   121a4:	str	r1, [sp, #36]	; 0x24
   121a8:	ubfx	r4, r0, #1, #1
   121ac:	bl	10eb8 <__ctype_get_mb_cur_max@plt>
   121b0:	str	r0, [sp, #44]	; 0x2c
   121b4:	ldr	r0, [fp, #24]
   121b8:	str	r0, [sp, #88]	; 0x58
   121bc:	ldr	r0, [fp, #20]
   121c0:	str	r0, [sp, #80]	; 0x50
   121c4:	ldr	r1, [fp, #8]
   121c8:	mov	r0, #0
   121cc:	str	r0, [sp, #84]	; 0x54
   121d0:	mov	r0, #0
   121d4:	str	r0, [fp, #-84]	; 0xffffffac
   121d8:	mov	r0, #0
   121dc:	str	r0, [fp, #-72]	; 0xffffffb8
   121e0:	mov	r0, #0
   121e4:	mov	r2, #0
   121e8:	str	r2, [fp, #-56]	; 0xffffffc8
   121ec:	mov	r2, #0
   121f0:	str	r2, [sp, #64]	; 0x40
   121f4:	mov	r2, #1
   121f8:	str	r2, [fp, #-48]	; 0xffffffd0
   121fc:	cmp	r1, #10
   12200:	bhi	1312c <__mempcpy_chk@plt+0x20dc>
   12204:	mov	sl, r7
   12208:	mov	r7, r1
   1220c:	add	r1, pc, #24
   12210:	mov	r8, #0
   12214:	mov	r2, #1
   12218:	mov	r3, #0
   1221c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12220:	mov	lr, r9
   12224:	mov	r5, r6
   12228:	ldr	pc, [r1, r7, lsl #2]
   1222c:	andeq	r2, r1, r0, lsl #6
   12230:	andeq	r2, r1, r0, asr #6
   12234:	andeq	r2, r1, r0, lsl r3
   12238:	strdeq	r2, [r1], -r8
   1223c:	andeq	r2, r1, r4, lsr r3
   12240:	muleq	r1, r4, r3
   12244:	andeq	r2, r1, r0, lsr #6
   12248:	strdeq	r2, [r1], -r0
   1224c:	andeq	r2, r1, r8, asr r2
   12250:	andeq	r2, r1, r8, asr r2
   12254:	andeq	r2, r1, r4, lsl #5
   12258:	movw	r0, #21448	; 0x53c8
   1225c:	movt	r0, #1
   12260:	mov	r1, r7
   12264:	bl	13734 <__mempcpy_chk@plt+0x26e4>
   12268:	str	r0, [sp, #80]	; 0x50
   1226c:	movw	r0, #21450	; 0x53ca
   12270:	movt	r0, #1
   12274:	mov	r1, r7
   12278:	bl	13734 <__mempcpy_chk@plt+0x26e4>
   1227c:	mov	r5, r6
   12280:	str	r0, [sp, #88]	; 0x58
   12284:	mov	r8, #0
   12288:	tst	r4, #1
   1228c:	str	r7, [fp, #-64]	; 0xffffffc0
   12290:	bne	122c8 <__mempcpy_chk@plt+0x1278>
   12294:	ldr	r0, [sp, #80]	; 0x50
   12298:	ldrb	r0, [r0]
   1229c:	cmp	r0, #0
   122a0:	beq	122c8 <__mempcpy_chk@plt+0x1278>
   122a4:	ldr	r1, [sp, #80]	; 0x50
   122a8:	add	r1, r1, #1
   122ac:	mov	r8, #0
   122b0:	cmp	r8, sl
   122b4:	strbcc	r0, [r5, r8]
   122b8:	ldrb	r0, [r1, r8]
   122bc:	add	r8, r8, #1
   122c0:	cmp	r0, #0
   122c4:	bne	122b0 <__mempcpy_chk@plt+0x1260>
   122c8:	ldr	r7, [sp, #88]	; 0x58
   122cc:	mov	r0, r7
   122d0:	bl	10f6c <strlen@plt>
   122d4:	mov	r5, r6
   122d8:	str	r0, [fp, #-72]	; 0xffffffb8
   122dc:	str	r7, [fp, #-84]	; 0xffffffac
   122e0:	mov	r2, #1
   122e4:	mov	r3, r4
   122e8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   122ec:	mov	lr, r9
   122f0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   122f4:	b	123f0 <__mempcpy_chk@plt+0x13a0>
   122f8:	mov	r0, #1
   122fc:	b	12340 <__mempcpy_chk@plt+0x12f0>
   12300:	mov	r7, #0
   12304:	mov	r8, #0
   12308:	mov	r2, r0
   1230c:	b	123ec <__mempcpy_chk@plt+0x139c>
   12310:	tst	r4, #1
   12314:	bne	12340 <__mempcpy_chk@plt+0x12f0>
   12318:	mov	r2, r0
   1231c:	b	12368 <__mempcpy_chk@plt+0x1318>
   12320:	mov	r0, #1
   12324:	str	r0, [fp, #-72]	; 0xffffffb8
   12328:	mov	r8, #0
   1232c:	mov	r7, #5
   12330:	b	123ac <__mempcpy_chk@plt+0x135c>
   12334:	mov	r2, #1
   12338:	tst	r4, #1
   1233c:	beq	12368 <__mempcpy_chk@plt+0x1318>
   12340:	mov	r1, #1
   12344:	str	r1, [fp, #-72]	; 0xffffffb8
   12348:	mov	r8, #0
   1234c:	mov	r7, #2
   12350:	movw	r1, #21450	; 0x53ca
   12354:	movt	r1, #1
   12358:	str	r1, [fp, #-84]	; 0xffffffac
   1235c:	mov	r2, r0
   12360:	mov	r3, #1
   12364:	b	123f0 <__mempcpy_chk@plt+0x13a0>
   12368:	mov	r8, #1
   1236c:	mov	r7, #2
   12370:	cmp	sl, #0
   12374:	movne	r0, #39	; 0x27
   12378:	strbne	r0, [r5]
   1237c:	movw	r0, #21450	; 0x53ca
   12380:	movt	r0, #1
   12384:	str	r0, [fp, #-84]	; 0xffffffac
   12388:	mov	r0, #1
   1238c:	str	r0, [fp, #-72]	; 0xffffffb8
   12390:	b	123ec <__mempcpy_chk@plt+0x139c>
   12394:	mov	r7, #5
   12398:	tst	r4, #1
   1239c:	beq	123c4 <__mempcpy_chk@plt+0x1374>
   123a0:	mov	r0, #1
   123a4:	str	r0, [fp, #-72]	; 0xffffffb8
   123a8:	mov	r8, #0
   123ac:	movw	r0, #21446	; 0x53c6
   123b0:	movt	r0, #1
   123b4:	str	r0, [fp, #-84]	; 0xffffffac
   123b8:	mov	r2, #1
   123bc:	mov	r3, #1
   123c0:	b	123f0 <__mempcpy_chk@plt+0x13a0>
   123c4:	cmp	sl, #0
   123c8:	movne	r0, #34	; 0x22
   123cc:	strbne	r0, [r5]
   123d0:	mov	r8, #1
   123d4:	movw	r0, #21446	; 0x53c6
   123d8:	movt	r0, #1
   123dc:	str	r0, [fp, #-84]	; 0xffffffac
   123e0:	mov	r0, #1
   123e4:	str	r0, [fp, #-72]	; 0xffffffb8
   123e8:	mov	r2, #1
   123ec:	mov	r3, #0
   123f0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   123f4:	cmp	r0, #0
   123f8:	movwne	r0, #1
   123fc:	and	r1, r0, r3
   12400:	and	r1, r2, r1
   12404:	str	r1, [sp, #56]	; 0x38
   12408:	sub	r1, r7, #2
   1240c:	clz	r1, r1
   12410:	lsr	r1, r1, #5
   12414:	and	r1, r1, r3
   12418:	str	r1, [sp, #68]	; 0x44
   1241c:	str	r7, [fp, #-64]	; 0xffffffc0
   12420:	subs	r1, r7, #2
   12424:	movwne	r1, #1
   12428:	eor	r4, r3, #1
   1242c:	str	r4, [fp, #-88]	; 0xffffffa8
   12430:	orr	r4, r1, r4
   12434:	str	r4, [sp, #72]	; 0x48
   12438:	and	r1, r1, r2
   1243c:	and	r0, r0, r1
   12440:	str	r0, [fp, #-60]	; 0xffffffc4
   12444:	str	r3, [fp, #-76]	; 0xffffffb4
   12448:	orr	r0, r1, r3
   1244c:	eor	r0, r0, #1
   12450:	ldr	r1, [fp, #16]
   12454:	clz	r1, r1
   12458:	lsr	r1, r1, #5
   1245c:	orr	r0, r1, r0
   12460:	str	r0, [fp, #-68]	; 0xffffffbc
   12464:	str	r2, [sp, #92]	; 0x5c
   12468:	eor	r0, r2, #1
   1246c:	str	r0, [sp, #60]	; 0x3c
   12470:	mov	r7, #0
   12474:	cmn	lr, #1
   12478:	beq	12488 <__mempcpy_chk@plt+0x1438>
   1247c:	cmp	r7, lr
   12480:	bne	12494 <__mempcpy_chk@plt+0x1444>
   12484:	b	12fa0 <__mempcpy_chk@plt+0x1f50>
   12488:	ldrb	r0, [ip, r7]
   1248c:	cmp	r0, #0
   12490:	beq	12fa0 <__mempcpy_chk@plt+0x1f50>
   12494:	mov	r9, #0
   12498:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1249c:	cmp	r0, #0
   124a0:	beq	124d4 <__mempcpy_chk@plt+0x1484>
   124a4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   124a8:	add	r4, r7, r0
   124ac:	cmp	r0, #2
   124b0:	bcc	124cc <__mempcpy_chk@plt+0x147c>
   124b4:	cmn	lr, #1
   124b8:	bne	124cc <__mempcpy_chk@plt+0x147c>
   124bc:	mov	r0, ip
   124c0:	bl	10f6c <strlen@plt>
   124c4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   124c8:	mov	lr, r0
   124cc:	cmp	r4, lr
   124d0:	bls	124e0 <__mempcpy_chk@plt+0x1490>
   124d4:	mov	r0, #0
   124d8:	str	r0, [fp, #-52]	; 0xffffffcc
   124dc:	b	12524 <__mempcpy_chk@plt+0x14d4>
   124e0:	mov	r4, lr
   124e4:	add	r0, ip, r7
   124e8:	ldr	r1, [fp, #-84]	; 0xffffffac
   124ec:	ldr	r2, [fp, #-72]	; 0xffffffb8
   124f0:	bl	10f60 <bcmp@plt>
   124f4:	cmp	r0, #0
   124f8:	mov	r1, r0
   124fc:	movwne	r1, #1
   12500:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12504:	orr	r1, r1, r2
   12508:	tst	r1, #1
   1250c:	beq	13074 <__mempcpy_chk@plt+0x2024>
   12510:	clz	r0, r0
   12514:	lsr	r0, r0, #5
   12518:	str	r0, [fp, #-52]	; 0xffffffcc
   1251c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12520:	mov	lr, r4
   12524:	ldrb	r4, [ip, r7]
   12528:	cmp	r4, #126	; 0x7e
   1252c:	bhi	12a5c <__mempcpy_chk@plt+0x1a0c>
   12530:	mov	r6, #1
   12534:	mov	r2, #110	; 0x6e
   12538:	mov	r0, #97	; 0x61
   1253c:	add	r3, pc, #4
   12540:	mov	r1, #0
   12544:	ldr	pc, [r3, r4, lsl #2]
   12548:			; <UNDEFINED> instruction: 0x000128bc
   1254c:	andeq	r2, r1, ip, asr sl
   12550:	andeq	r2, r1, ip, asr sl
   12554:	andeq	r2, r1, ip, asr sl
   12558:	andeq	r2, r1, ip, asr sl
   1255c:	andeq	r2, r1, ip, asr sl
   12560:	andeq	r2, r1, ip, asr sl
   12564:	andeq	r2, r1, r0, lsr fp
   12568:	muleq	r1, ip, r8
   1256c:	muleq	r1, r4, r8
   12570:	andeq	r2, r1, r8, lsr #17
   12574:	andeq	r2, r1, r4, asr #19
   12578:	andeq	r2, r1, ip, lsl #17
   1257c:	andeq	r2, r1, r4, lsr #17
   12580:	andeq	r2, r1, ip, asr sl
   12584:	andeq	r2, r1, ip, asr sl
   12588:	andeq	r2, r1, ip, asr sl
   1258c:	andeq	r2, r1, ip, asr sl
   12590:	andeq	r2, r1, ip, asr sl
   12594:	andeq	r2, r1, ip, asr sl
   12598:	andeq	r2, r1, ip, asr sl
   1259c:	andeq	r2, r1, ip, asr sl
   125a0:	andeq	r2, r1, ip, asr sl
   125a4:	andeq	r2, r1, ip, asr sl
   125a8:	andeq	r2, r1, ip, asr sl
   125ac:	andeq	r2, r1, ip, asr sl
   125b0:	andeq	r2, r1, ip, asr sl
   125b4:	andeq	r2, r1, ip, asr sl
   125b8:	andeq	r2, r1, ip, asr sl
   125bc:	andeq	r2, r1, ip, asr sl
   125c0:	andeq	r2, r1, ip, asr sl
   125c4:	andeq	r2, r1, ip, asr sl
   125c8:	andeq	r2, r1, r0, asr #16
   125cc:	andeq	r2, r1, r4, asr #16
   125d0:	andeq	r2, r1, r4, asr #16
   125d4:	andeq	r2, r1, ip, lsr #16
   125d8:	andeq	r2, r1, r4, asr #16
   125dc:	andeq	r2, r1, r4, asr #14
   125e0:	andeq	r2, r1, r4, asr #16
   125e4:	andeq	r2, r1, ip, asr #19
   125e8:	andeq	r2, r1, r4, asr #16
   125ec:	andeq	r2, r1, r4, asr #16
   125f0:	andeq	r2, r1, r4, asr #16
   125f4:	andeq	r2, r1, r4, asr #14
   125f8:	andeq	r2, r1, r4, asr #14
   125fc:	andeq	r2, r1, r4, asr #14
   12600:	andeq	r2, r1, r4, asr #14
   12604:	andeq	r2, r1, r4, asr #14
   12608:	andeq	r2, r1, r4, asr #14
   1260c:	andeq	r2, r1, r4, asr #14
   12610:	andeq	r2, r1, r4, asr #14
   12614:	andeq	r2, r1, r4, asr #14
   12618:	andeq	r2, r1, r4, asr #14
   1261c:	andeq	r2, r1, r4, asr #14
   12620:	andeq	r2, r1, r4, asr #14
   12624:	andeq	r2, r1, r4, asr #14
   12628:	andeq	r2, r1, r4, asr #14
   1262c:	andeq	r2, r1, r4, asr #14
   12630:	andeq	r2, r1, r4, asr #14
   12634:	andeq	r2, r1, r4, asr #16
   12638:	andeq	r2, r1, r4, asr #16
   1263c:	andeq	r2, r1, r4, asr #16
   12640:	andeq	r2, r1, r4, asr #16
   12644:	muleq	r1, r4, r9
   12648:	andeq	r2, r1, ip, asr sl
   1264c:	andeq	r2, r1, r4, asr #14
   12650:	andeq	r2, r1, r4, asr #14
   12654:	andeq	r2, r1, r4, asr #14
   12658:	andeq	r2, r1, r4, asr #14
   1265c:	andeq	r2, r1, r4, asr #14
   12660:	andeq	r2, r1, r4, asr #14
   12664:	andeq	r2, r1, r4, asr #14
   12668:	andeq	r2, r1, r4, asr #14
   1266c:	andeq	r2, r1, r4, asr #14
   12670:	andeq	r2, r1, r4, asr #14
   12674:	andeq	r2, r1, r4, asr #14
   12678:	andeq	r2, r1, r4, asr #14
   1267c:	andeq	r2, r1, r4, asr #14
   12680:	andeq	r2, r1, r4, asr #14
   12684:	andeq	r2, r1, r4, asr #14
   12688:	andeq	r2, r1, r4, asr #14
   1268c:	andeq	r2, r1, r4, asr #14
   12690:	andeq	r2, r1, r4, asr #14
   12694:	andeq	r2, r1, r4, asr #14
   12698:	andeq	r2, r1, r4, asr #14
   1269c:	andeq	r2, r1, r4, asr #14
   126a0:	andeq	r2, r1, r4, asr #14
   126a4:	andeq	r2, r1, r4, asr #14
   126a8:	andeq	r2, r1, r4, asr #14
   126ac:	andeq	r2, r1, r4, asr #14
   126b0:	andeq	r2, r1, r4, asr #14
   126b4:	andeq	r2, r1, r4, asr #16
   126b8:	andeq	r2, r1, ip, ror #16
   126bc:	andeq	r2, r1, r4, asr #14
   126c0:	andeq	r2, r1, r4, asr #16
   126c4:	andeq	r2, r1, r4, asr #14
   126c8:	andeq	r2, r1, r4, asr #16
   126cc:	andeq	r2, r1, r4, asr #14
   126d0:	andeq	r2, r1, r4, asr #14
   126d4:	andeq	r2, r1, r4, asr #14
   126d8:	andeq	r2, r1, r4, asr #14
   126dc:	andeq	r2, r1, r4, asr #14
   126e0:	andeq	r2, r1, r4, asr #14
   126e4:	andeq	r2, r1, r4, asr #14
   126e8:	andeq	r2, r1, r4, asr #14
   126ec:	andeq	r2, r1, r4, asr #14
   126f0:	andeq	r2, r1, r4, asr #14
   126f4:	andeq	r2, r1, r4, asr #14
   126f8:	andeq	r2, r1, r4, asr #14
   126fc:	andeq	r2, r1, r4, asr #14
   12700:	andeq	r2, r1, r4, asr #14
   12704:	andeq	r2, r1, r4, asr #14
   12708:	andeq	r2, r1, r4, asr #14
   1270c:	andeq	r2, r1, r4, asr #14
   12710:	andeq	r2, r1, r4, asr #14
   12714:	andeq	r2, r1, r4, asr #14
   12718:	andeq	r2, r1, r4, asr #14
   1271c:	andeq	r2, r1, r4, asr #14
   12720:	andeq	r2, r1, r4, asr #14
   12724:	andeq	r2, r1, r4, asr #14
   12728:	andeq	r2, r1, r4, asr #14
   1272c:	andeq	r2, r1, r4, asr #14
   12730:	andeq	r2, r1, r4, asr #14
   12734:	andeq	r2, r1, r0, lsl #16
   12738:	andeq	r2, r1, r4, asr #16
   1273c:	andeq	r2, r1, r0, lsl #16
   12740:	andeq	r2, r1, ip, lsr #16
   12744:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12748:	tst	r0, #1
   1274c:	bne	12778 <__mempcpy_chk@plt+0x1728>
   12750:	ubfx	r0, r4, #5, #3
   12754:	ldr	r1, [fp, #16]
   12758:	ldr	r0, [r1, r0, lsl #2]
   1275c:	and	r1, r4, #31
   12760:	mov	r2, #1
   12764:	tst	r0, r2, lsl r1
   12768:	beq	12778 <__mempcpy_chk@plt+0x1728>
   1276c:	mov	r0, r4
   12770:	mov	r1, r6
   12774:	b	1278c <__mempcpy_chk@plt+0x173c>
   12778:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1277c:	cmp	r0, #0
   12780:	mov	r0, r4
   12784:	mov	r1, r6
   12788:	beq	12ac4 <__mempcpy_chk@plt+0x1a74>
   1278c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12790:	tst	r2, #1
   12794:	bne	13088 <__mempcpy_chk@plt+0x2038>
   12798:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1279c:	subs	r2, r2, #2
   127a0:	movwne	r2, #1
   127a4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   127a8:	orr	r2, r2, r3
   127ac:	tst	r2, #1
   127b0:	bne	127ec <__mempcpy_chk@plt+0x179c>
   127b4:	cmp	r8, sl
   127b8:	movcc	r2, #39	; 0x27
   127bc:	strbcc	r2, [r5, r8]
   127c0:	add	r2, r8, #1
   127c4:	cmp	r2, sl
   127c8:	movcc	r3, #36	; 0x24
   127cc:	strbcc	r3, [r5, r2]
   127d0:	add	r2, r8, #2
   127d4:	cmp	r2, sl
   127d8:	movcc	r3, #39	; 0x27
   127dc:	strbcc	r3, [r5, r2]
   127e0:	add	r8, r8, #3
   127e4:	mov	r2, #1
   127e8:	str	r2, [fp, #-56]	; 0xffffffc8
   127ec:	cmp	r8, sl
   127f0:	movcc	r2, #92	; 0x5c
   127f4:	strbcc	r2, [r5, r8]
   127f8:	add	r8, r8, #1
   127fc:	b	12b08 <__mempcpy_chk@plt+0x1ab8>
   12800:	cmp	lr, #1
   12804:	beq	1282c <__mempcpy_chk@plt+0x17dc>
   12808:	mov	r6, #0
   1280c:	cmn	lr, #1
   12810:	bne	12838 <__mempcpy_chk@plt+0x17e8>
   12814:	ldrb	r0, [ip, #1]
   12818:	cmp	r0, #0
   1281c:	beq	1282c <__mempcpy_chk@plt+0x17dc>
   12820:	mvn	lr, #0
   12824:	mov	r9, #0
   12828:	b	12744 <__mempcpy_chk@plt+0x16f4>
   1282c:	mov	r6, #0
   12830:	cmp	r7, #0
   12834:	beq	12840 <__mempcpy_chk@plt+0x17f0>
   12838:	mov	r9, #0
   1283c:	b	12744 <__mempcpy_chk@plt+0x16f4>
   12840:	mov	r1, #1
   12844:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12848:	cmp	r0, #2
   1284c:	bne	12864 <__mempcpy_chk@plt+0x1814>
   12850:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12854:	tst	r0, #1
   12858:	mov	r6, r1
   1285c:	beq	12744 <__mempcpy_chk@plt+0x16f4>
   12860:	b	13088 <__mempcpy_chk@plt+0x2038>
   12864:	mov	r6, r1
   12868:	b	12744 <__mempcpy_chk@plt+0x16f4>
   1286c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12870:	cmp	r0, #2
   12874:	bne	12aa8 <__mempcpy_chk@plt+0x1a58>
   12878:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1287c:	tst	r0, #1
   12880:	bne	13088 <__mempcpy_chk@plt+0x2038>
   12884:	mov	r9, #0
   12888:	b	12abc <__mempcpy_chk@plt+0x1a6c>
   1288c:	mov	r0, #102	; 0x66
   12890:	b	12b30 <__mempcpy_chk@plt+0x1ae0>
   12894:	mov	r2, #116	; 0x74
   12898:	b	128a8 <__mempcpy_chk@plt+0x1858>
   1289c:	mov	r0, #98	; 0x62
   128a0:	b	12b30 <__mempcpy_chk@plt+0x1ae0>
   128a4:	mov	r2, #114	; 0x72
   128a8:	ldr	r0, [sp, #72]	; 0x48
   128ac:	tst	r0, #1
   128b0:	mov	r0, r2
   128b4:	bne	12b30 <__mempcpy_chk@plt+0x1ae0>
   128b8:	b	13088 <__mempcpy_chk@plt+0x2038>
   128bc:	ldr	r0, [sp, #92]	; 0x5c
   128c0:	tst	r0, #1
   128c4:	beq	12b4c <__mempcpy_chk@plt+0x1afc>
   128c8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   128cc:	tst	r0, #1
   128d0:	bne	13088 <__mempcpy_chk@plt+0x2038>
   128d4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   128d8:	subs	r0, r0, #2
   128dc:	movwne	r0, #1
   128e0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   128e4:	orr	r0, r0, r1
   128e8:	tst	r0, #1
   128ec:	bne	12928 <__mempcpy_chk@plt+0x18d8>
   128f0:	cmp	r8, sl
   128f4:	movcc	r0, #39	; 0x27
   128f8:	strbcc	r0, [r5, r8]
   128fc:	add	r0, r8, #1
   12900:	cmp	r0, sl
   12904:	movcc	r1, #36	; 0x24
   12908:	strbcc	r1, [r5, r0]
   1290c:	add	r0, r8, #2
   12910:	cmp	r0, sl
   12914:	movcc	r1, #39	; 0x27
   12918:	strbcc	r1, [r5, r0]
   1291c:	add	r8, r8, #3
   12920:	mov	r0, #1
   12924:	str	r0, [fp, #-56]	; 0xffffffc8
   12928:	cmp	r8, sl
   1292c:	movcc	r0, #92	; 0x5c
   12930:	strbcc	r0, [r5, r8]
   12934:	add	r0, r8, #1
   12938:	mov	r6, #0
   1293c:	mov	r9, #1
   12940:	mov	r4, #48	; 0x30
   12944:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12948:	cmp	r1, #2
   1294c:	beq	12d10 <__mempcpy_chk@plt+0x1cc0>
   12950:	add	r1, r7, #1
   12954:	cmp	r1, lr
   12958:	bcs	12d10 <__mempcpy_chk@plt+0x1cc0>
   1295c:	ldrb	r1, [ip, r1]
   12960:	sub	r1, r1, #48	; 0x30
   12964:	uxtb	r1, r1
   12968:	cmp	r1, #9
   1296c:	bhi	12d10 <__mempcpy_chk@plt+0x1cc0>
   12970:	cmp	r0, sl
   12974:	movcc	r1, #48	; 0x30
   12978:	strbcc	r1, [r5, r0]
   1297c:	add	r0, r8, #2
   12980:	cmp	r0, sl
   12984:	movcc	r1, #48	; 0x30
   12988:	strbcc	r1, [r5, r0]
   1298c:	add	r8, r8, #3
   12990:	b	12744 <__mempcpy_chk@plt+0x16f4>
   12994:	mov	r9, #0
   12998:	mov	r4, #63	; 0x3f
   1299c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   129a0:	cmp	r0, #5
   129a4:	beq	12d18 <__mempcpy_chk@plt+0x1cc8>
   129a8:	cmp	r0, #2
   129ac:	bne	12dc0 <__mempcpy_chk@plt+0x1d70>
   129b0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   129b4:	tst	r0, #1
   129b8:	mov	r6, #0
   129bc:	beq	12744 <__mempcpy_chk@plt+0x16f4>
   129c0:	b	13088 <__mempcpy_chk@plt+0x2038>
   129c4:	mov	r0, #118	; 0x76
   129c8:	b	12b30 <__mempcpy_chk@plt+0x1ae0>
   129cc:	mov	r4, #39	; 0x27
   129d0:	mov	r0, #1
   129d4:	str	r0, [sp, #64]	; 0x40
   129d8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   129dc:	cmp	r0, #2
   129e0:	bne	12b68 <__mempcpy_chk@plt+0x1b18>
   129e4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   129e8:	tst	r0, #1
   129ec:	bne	13088 <__mempcpy_chk@plt+0x2038>
   129f0:	ldr	r2, [sp, #84]	; 0x54
   129f4:	cmp	r2, #0
   129f8:	mov	r0, r2
   129fc:	movwne	r0, #1
   12a00:	clz	r1, sl
   12a04:	lsr	r1, r1, #5
   12a08:	orrs	r0, r0, r1
   12a0c:	moveq	r2, sl
   12a10:	str	r2, [sp, #84]	; 0x54
   12a14:	moveq	sl, r0
   12a18:	cmp	r8, sl
   12a1c:	movcc	r0, #39	; 0x27
   12a20:	strbcc	r0, [r5, r8]
   12a24:	add	r0, r8, #1
   12a28:	cmp	r0, sl
   12a2c:	movcc	r1, #92	; 0x5c
   12a30:	strbcc	r1, [r5, r0]
   12a34:	add	r0, r8, #2
   12a38:	cmp	r0, sl
   12a3c:	movcc	r1, #39	; 0x27
   12a40:	strbcc	r1, [r5, r0]
   12a44:	add	r8, r8, #3
   12a48:	mov	r0, #0
   12a4c:	str	r0, [fp, #-56]	; 0xffffffc8
   12a50:	mov	r9, #0
   12a54:	mov	r6, #1
   12a58:	b	12744 <__mempcpy_chk@plt+0x16f4>
   12a5c:	ldr	r0, [sp, #44]	; 0x2c
   12a60:	cmp	r0, #1
   12a64:	bne	12b70 <__mempcpy_chk@plt+0x1b20>
   12a68:	str	lr, [sp, #32]
   12a6c:	bl	10f48 <__ctype_b_loc@plt>
   12a70:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12a74:	ldr	r0, [r0]
   12a78:	add	r0, r0, r4, lsl #1
   12a7c:	ldrb	r0, [r0, #1]
   12a80:	ubfx	r6, r0, #6, #1
   12a84:	mov	r2, #1
   12a88:	ldr	r0, [sp, #60]	; 0x3c
   12a8c:	orr	r1, r6, r0
   12a90:	cmp	r2, #1
   12a94:	bhi	12dc8 <__mempcpy_chk@plt+0x1d78>
   12a98:	tst	r1, #1
   12a9c:	beq	12dc8 <__mempcpy_chk@plt+0x1d78>
   12aa0:	ldr	lr, [sp, #32]
   12aa4:	b	12744 <__mempcpy_chk@plt+0x16f4>
   12aa8:	mov	r9, #0
   12aac:	mov	r0, #92	; 0x5c
   12ab0:	ldr	r1, [sp, #56]	; 0x38
   12ab4:	cmp	r1, #0
   12ab8:	beq	12b30 <__mempcpy_chk@plt+0x1ae0>
   12abc:	mov	r4, #92	; 0x5c
   12ac0:	mov	r6, #0
   12ac4:	cmp	r9, #0
   12ac8:	bne	12b00 <__mempcpy_chk@plt+0x1ab0>
   12acc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12ad0:	tst	r0, #1
   12ad4:	beq	12b00 <__mempcpy_chk@plt+0x1ab0>
   12ad8:	cmp	r8, sl
   12adc:	movcc	r0, #39	; 0x27
   12ae0:	strbcc	r0, [r5, r8]
   12ae4:	add	r0, r8, #1
   12ae8:	cmp	r0, sl
   12aec:	movcc	r1, #39	; 0x27
   12af0:	strbcc	r1, [r5, r0]
   12af4:	add	r8, r8, #2
   12af8:	mov	r0, #0
   12afc:	str	r0, [fp, #-56]	; 0xffffffc8
   12b00:	mov	r1, r6
   12b04:	mov	r0, r4
   12b08:	cmp	r8, sl
   12b0c:	strbcc	r0, [r5, r8]
   12b10:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12b14:	and	r0, r0, r1
   12b18:	str	r0, [fp, #-48]	; 0xffffffd0
   12b1c:	add	r8, r8, #1
   12b20:	add	r7, r7, #1
   12b24:	cmn	lr, #1
   12b28:	bne	1247c <__mempcpy_chk@plt+0x142c>
   12b2c:	b	12488 <__mempcpy_chk@plt+0x1438>
   12b30:	mov	r9, #0
   12b34:	ldr	r1, [sp, #92]	; 0x5c
   12b38:	tst	r1, #1
   12b3c:	mov	r6, #0
   12b40:	mov	r1, #0
   12b44:	beq	12744 <__mempcpy_chk@plt+0x16f4>
   12b48:	b	1278c <__mempcpy_chk@plt+0x173c>
   12b4c:	mov	r4, #0
   12b50:	ldr	r0, [sp, #40]	; 0x28
   12b54:	cmp	r0, #0
   12b58:	mov	r9, #0
   12b5c:	mov	r6, #0
   12b60:	beq	12744 <__mempcpy_chk@plt+0x16f4>
   12b64:	b	12b20 <__mempcpy_chk@plt+0x1ad0>
   12b68:	mov	r6, #1
   12b6c:	b	12744 <__mempcpy_chk@plt+0x16f4>
   12b70:	mov	r0, #0
   12b74:	str	r0, [fp, #-36]	; 0xffffffdc
   12b78:	str	r0, [fp, #-40]	; 0xffffffd8
   12b7c:	cmn	lr, #1
   12b80:	bne	12b94 <__mempcpy_chk@plt+0x1b44>
   12b84:	mov	r0, ip
   12b88:	bl	10f6c <strlen@plt>
   12b8c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12b90:	mov	lr, r0
   12b94:	ldr	r0, [sp, #76]	; 0x4c
   12b98:	add	r0, r0, r7
   12b9c:	str	r0, [sp, #24]
   12ba0:	mov	r6, #1
   12ba4:	mov	r2, #0
   12ba8:	sub	r0, fp, #40	; 0x28
   12bac:	mov	r3, r0
   12bb0:	str	r5, [sp, #28]
   12bb4:	str	lr, [sp, #32]
   12bb8:	b	12bfc <__mempcpy_chk@plt+0x1bac>
   12bbc:	ldr	r5, [sp, #52]	; 0x34
   12bc0:	add	r5, r0, r5
   12bc4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12bc8:	bl	10e94 <iswprint@plt>
   12bcc:	cmp	r0, #0
   12bd0:	movwne	r0, #1
   12bd4:	and	r6, r6, r0
   12bd8:	sub	r0, fp, #40	; 0x28
   12bdc:	bl	10e4c <mbsinit@plt>
   12be0:	sub	r3, fp, #40	; 0x28
   12be4:	mov	r2, r5
   12be8:	ldr	lr, [sp, #32]
   12bec:	cmp	r0, #0
   12bf0:	ldr	r5, [sp, #28]
   12bf4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12bf8:	bne	12a88 <__mempcpy_chk@plt+0x1a38>
   12bfc:	str	r2, [sp, #52]	; 0x34
   12c00:	add	r0, r2, r7
   12c04:	add	r1, ip, r0
   12c08:	str	r0, [sp, #48]	; 0x30
   12c0c:	sub	r2, lr, r0
   12c10:	sub	r0, fp, #44	; 0x2c
   12c14:	bl	14b10 <__mempcpy_chk@plt+0x3ac0>
   12c18:	cmp	r0, #0
   12c1c:	beq	12f94 <__mempcpy_chk@plt+0x1f44>
   12c20:	cmn	r0, #1
   12c24:	beq	12f50 <__mempcpy_chk@plt+0x1f00>
   12c28:	cmn	r0, #2
   12c2c:	ldr	lr, [sp, #32]
   12c30:	beq	12f58 <__mempcpy_chk@plt+0x1f08>
   12c34:	cmp	r0, #2
   12c38:	mov	r1, #0
   12c3c:	movwcc	r1, #1
   12c40:	ldr	r2, [sp, #68]	; 0x44
   12c44:	eor	r2, r2, #1
   12c48:	orrs	r1, r2, r1
   12c4c:	bne	12bbc <__mempcpy_chk@plt+0x1b6c>
   12c50:	ldr	r1, [sp, #52]	; 0x34
   12c54:	ldr	r2, [sp, #24]
   12c58:	add	r1, r2, r1
   12c5c:	sub	r2, r0, #1
   12c60:	b	12c70 <__mempcpy_chk@plt+0x1c20>
   12c64:	add	r1, r1, #1
   12c68:	subs	r2, r2, #1
   12c6c:	beq	12bbc <__mempcpy_chk@plt+0x1b6c>
   12c70:	ldrb	r3, [r1]
   12c74:	sub	r3, r3, #91	; 0x5b
   12c78:	cmp	r3, #33	; 0x21
   12c7c:	bhi	12c64 <__mempcpy_chk@plt+0x1c14>
   12c80:	add	r5, pc, #0
   12c84:	ldr	pc, [r5, r3, lsl #2]
   12c88:	andeq	r3, r1, r0, lsl #1
   12c8c:	andeq	r3, r1, r0, lsl #1
   12c90:	andeq	r2, r1, r4, ror #24
   12c94:	andeq	r3, r1, r0, lsl #1
   12c98:	andeq	r2, r1, r4, ror #24
   12c9c:	andeq	r3, r1, r0, lsl #1
   12ca0:	andeq	r2, r1, r4, ror #24
   12ca4:	andeq	r2, r1, r4, ror #24
   12ca8:	andeq	r2, r1, r4, ror #24
   12cac:	andeq	r2, r1, r4, ror #24
   12cb0:	andeq	r2, r1, r4, ror #24
   12cb4:	andeq	r2, r1, r4, ror #24
   12cb8:	andeq	r2, r1, r4, ror #24
   12cbc:	andeq	r2, r1, r4, ror #24
   12cc0:	andeq	r2, r1, r4, ror #24
   12cc4:	andeq	r2, r1, r4, ror #24
   12cc8:	andeq	r2, r1, r4, ror #24
   12ccc:	andeq	r2, r1, r4, ror #24
   12cd0:	andeq	r2, r1, r4, ror #24
   12cd4:	andeq	r2, r1, r4, ror #24
   12cd8:	andeq	r2, r1, r4, ror #24
   12cdc:	andeq	r2, r1, r4, ror #24
   12ce0:	andeq	r2, r1, r4, ror #24
   12ce4:	andeq	r2, r1, r4, ror #24
   12ce8:	andeq	r2, r1, r4, ror #24
   12cec:	andeq	r2, r1, r4, ror #24
   12cf0:	andeq	r2, r1, r4, ror #24
   12cf4:	andeq	r2, r1, r4, ror #24
   12cf8:	andeq	r2, r1, r4, ror #24
   12cfc:	andeq	r2, r1, r4, ror #24
   12d00:	andeq	r2, r1, r4, ror #24
   12d04:	andeq	r2, r1, r4, ror #24
   12d08:	andeq	r2, r1, r4, ror #24
   12d0c:	andeq	r3, r1, r0, lsl #1
   12d10:	mov	r8, r0
   12d14:	b	12744 <__mempcpy_chk@plt+0x16f4>
   12d18:	ldr	r0, [sp, #36]	; 0x24
   12d1c:	cmp	r0, #0
   12d20:	beq	12dc0 <__mempcpy_chk@plt+0x1d70>
   12d24:	add	r0, r7, #2
   12d28:	cmp	r0, lr
   12d2c:	bcs	12dc0 <__mempcpy_chk@plt+0x1d70>
   12d30:	add	r1, r7, ip
   12d34:	ldrb	r1, [r1, #1]
   12d38:	cmp	r1, #63	; 0x3f
   12d3c:	bne	12dc0 <__mempcpy_chk@plt+0x1d70>
   12d40:	ldrb	r1, [ip, r0]
   12d44:	sub	r2, r1, #33	; 0x21
   12d48:	cmp	r2, #29
   12d4c:	bhi	12dc0 <__mempcpy_chk@plt+0x1d70>
   12d50:	mov	r3, #1
   12d54:	movw	r6, #20929	; 0x51c1
   12d58:	movt	r6, #14336	; 0x3800
   12d5c:	tst	r6, r3, lsl r2
   12d60:	beq	12dc0 <__mempcpy_chk@plt+0x1d70>
   12d64:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12d68:	tst	r2, #1
   12d6c:	bne	13088 <__mempcpy_chk@plt+0x2038>
   12d70:	cmp	r8, sl
   12d74:	movcc	r2, #63	; 0x3f
   12d78:	strbcc	r2, [r5, r8]
   12d7c:	add	r2, r8, #1
   12d80:	cmp	r2, sl
   12d84:	movcc	r3, #34	; 0x22
   12d88:	strbcc	r3, [r5, r2]
   12d8c:	add	r2, r8, #2
   12d90:	cmp	r2, sl
   12d94:	movcc	r3, #34	; 0x22
   12d98:	strbcc	r3, [r5, r2]
   12d9c:	add	r2, r8, #3
   12da0:	cmp	r2, sl
   12da4:	movcc	r3, #63	; 0x3f
   12da8:	strbcc	r3, [r5, r2]
   12dac:	add	r8, r8, #4
   12db0:	mov	r7, r0
   12db4:	mov	r4, r1
   12db8:	mov	r6, #0
   12dbc:	b	12744 <__mempcpy_chk@plt+0x16f4>
   12dc0:	mov	r6, #0
   12dc4:	b	12744 <__mempcpy_chk@plt+0x16f4>
   12dc8:	add	r0, r2, r7
   12dcc:	str	r0, [sp, #52]	; 0x34
   12dd0:	mov	r2, #0
   12dd4:	ldr	lr, [sp, #32]
   12dd8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12ddc:	str	r1, [sp, #48]	; 0x30
   12de0:	tst	r1, #1
   12de4:	bne	12ec0 <__mempcpy_chk@plt+0x1e70>
   12de8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12dec:	tst	r1, #1
   12df0:	bne	13088 <__mempcpy_chk@plt+0x2038>
   12df4:	mov	r3, r0
   12df8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12dfc:	subs	r1, r0, #2
   12e00:	movwne	r1, #1
   12e04:	orr	r1, r1, r3
   12e08:	tst	r1, #1
   12e0c:	bne	12e44 <__mempcpy_chk@plt+0x1df4>
   12e10:	cmp	r8, sl
   12e14:	movcc	r0, #39	; 0x27
   12e18:	strbcc	r0, [r5, r8]
   12e1c:	add	r2, r8, #1
   12e20:	cmp	r2, sl
   12e24:	movcc	r0, #36	; 0x24
   12e28:	strbcc	r0, [r5, r2]
   12e2c:	add	r2, r8, #2
   12e30:	cmp	r2, sl
   12e34:	movcc	r0, #39	; 0x27
   12e38:	strbcc	r0, [r5, r2]
   12e3c:	add	r8, r8, #3
   12e40:	mov	r3, #1
   12e44:	cmp	r8, sl
   12e48:	movcc	r1, #92	; 0x5c
   12e4c:	strbcc	r1, [r5, r8]
   12e50:	add	r2, r8, #1
   12e54:	cmp	r2, sl
   12e58:	bcs	12e6c <__mempcpy_chk@plt+0x1e1c>
   12e5c:	uxtb	r1, r4
   12e60:	mov	r0, #48	; 0x30
   12e64:	orr	r1, r0, r1, lsr #6
   12e68:	strb	r1, [r5, r2]
   12e6c:	add	r2, r8, #2
   12e70:	cmp	r2, sl
   12e74:	lsrcc	r1, r4, #3
   12e78:	movcc	r0, #6
   12e7c:	bficc	r1, r0, #3, #29
   12e80:	strbcc	r1, [r5, r2]
   12e84:	mov	r0, #6
   12e88:	bfi	r4, r0, #3, #29
   12e8c:	add	r8, r8, #3
   12e90:	mov	r2, #1
   12e94:	mov	r0, r3
   12e98:	b	12ee4 <__mempcpy_chk@plt+0x1e94>
   12e9c:	cmp	r8, sl
   12ea0:	strbcc	r4, [r5, r8]
   12ea4:	ldr	r1, [sp, #76]	; 0x4c
   12ea8:	ldrb	r4, [r1, r7]
   12eac:	add	r8, r8, #1
   12eb0:	mov	r7, r3
   12eb4:	ldr	r1, [sp, #48]	; 0x30
   12eb8:	tst	r1, #1
   12ebc:	beq	12de8 <__mempcpy_chk@plt+0x1d98>
   12ec0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12ec4:	tst	r1, #1
   12ec8:	beq	12edc <__mempcpy_chk@plt+0x1e8c>
   12ecc:	cmp	r8, sl
   12ed0:	movcc	r1, #92	; 0x5c
   12ed4:	strbcc	r1, [r5, r8]
   12ed8:	add	r8, r8, #1
   12edc:	mov	r1, #0
   12ee0:	str	r1, [fp, #-52]	; 0xffffffcc
   12ee4:	and	r9, r2, #1
   12ee8:	add	r3, r7, #1
   12eec:	ldr	r1, [sp, #52]	; 0x34
   12ef0:	cmp	r1, r3
   12ef4:	bls	12f38 <__mempcpy_chk@plt+0x1ee8>
   12ef8:	cmp	r9, #0
   12efc:	movwne	r9, #1
   12f00:	mvn	r1, r0
   12f04:	orr	r1, r1, r9
   12f08:	tst	r1, #1
   12f0c:	bne	12e9c <__mempcpy_chk@plt+0x1e4c>
   12f10:	cmp	r8, sl
   12f14:	movcc	r1, #39	; 0x27
   12f18:	strbcc	r1, [r5, r8]
   12f1c:	add	r1, r8, #1
   12f20:	cmp	r1, sl
   12f24:	movcc	r0, #39	; 0x27
   12f28:	strbcc	r0, [r5, r1]
   12f2c:	add	r8, r8, #2
   12f30:	mov	r0, #0
   12f34:	b	12e9c <__mempcpy_chk@plt+0x1e4c>
   12f38:	str	r0, [fp, #-56]	; 0xffffffc8
   12f3c:	cmp	r9, #0
   12f40:	movwne	r9, #1
   12f44:	cmp	r9, #0
   12f48:	beq	12acc <__mempcpy_chk@plt+0x1a7c>
   12f4c:	b	12b00 <__mempcpy_chk@plt+0x1ab0>
   12f50:	mov	r6, #0
   12f54:	b	12f94 <__mempcpy_chk@plt+0x1f44>
   12f58:	mov	r6, #0
   12f5c:	ldr	r0, [sp, #48]	; 0x30
   12f60:	cmp	r0, lr
   12f64:	bcs	12f94 <__mempcpy_chk@plt+0x1f44>
   12f68:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12f6c:	add	r0, ip, r7
   12f70:	ldr	r2, [sp, #52]	; 0x34
   12f74:	ldrb	r1, [r0, r2]
   12f78:	cmp	r1, #0
   12f7c:	beq	12a88 <__mempcpy_chk@plt+0x1a38>
   12f80:	add	r2, r2, #1
   12f84:	add	r1, r7, r2
   12f88:	cmp	r1, lr
   12f8c:	bcc	12f74 <__mempcpy_chk@plt+0x1f24>
   12f90:	b	12a88 <__mempcpy_chk@plt+0x1a38>
   12f94:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12f98:	ldr	r2, [sp, #52]	; 0x34
   12f9c:	b	12a88 <__mempcpy_chk@plt+0x1a38>
   12fa0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12fa4:	eor	r0, r1, #2
   12fa8:	orr	r0, r0, r8
   12fac:	clz	r0, r0
   12fb0:	lsr	r0, r0, #5
   12fb4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   12fb8:	tst	r3, r0
   12fbc:	bne	13088 <__mempcpy_chk@plt+0x2038>
   12fc0:	mov	r6, r5
   12fc4:	subs	r0, r1, #2
   12fc8:	movwne	r0, #1
   12fcc:	orr	r0, r3, r0
   12fd0:	tst	r0, #1
   12fd4:	ldr	r2, [sp, #92]	; 0x5c
   12fd8:	ldreq	r0, [sp, #64]	; 0x40
   12fdc:	eoreq	r0, r0, #1
   12fe0:	tsteq	r0, #1
   12fe4:	bne	13024 <__mempcpy_chk@plt+0x1fd4>
   12fe8:	mov	r9, lr
   12fec:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12ff0:	tst	r0, #1
   12ff4:	bne	130f0 <__mempcpy_chk@plt+0x20a0>
   12ff8:	ldr	r0, [sp, #84]	; 0x54
   12ffc:	cmp	r0, #0
   13000:	beq	13024 <__mempcpy_chk@plt+0x1fd4>
   13004:	mov	r0, #0
   13008:	str	r0, [fp, #-48]	; 0xffffffd0
   1300c:	mov	r1, #2
   13010:	cmp	sl, #0
   13014:	mov	r0, r2
   13018:	mov	r4, r3
   1301c:	ldr	r7, [sp, #84]	; 0x54
   13020:	beq	121fc <__mempcpy_chk@plt+0x11ac>
   13024:	ldr	r1, [fp, #-84]	; 0xffffffac
   13028:	clz	r0, r1
   1302c:	lsr	r0, r0, #5
   13030:	orr	r0, r0, r3
   13034:	tst	r0, #1
   13038:	bne	13064 <__mempcpy_chk@plt+0x2014>
   1303c:	ldrb	r0, [r1]
   13040:	cmp	r0, #0
   13044:	beq	13064 <__mempcpy_chk@plt+0x2014>
   13048:	add	r1, r1, #1
   1304c:	cmp	r8, sl
   13050:	strbcc	r0, [r6, r8]
   13054:	add	r8, r8, #1
   13058:	ldrb	r0, [r1], #1
   1305c:	cmp	r0, #0
   13060:	bne	1304c <__mempcpy_chk@plt+0x1ffc>
   13064:	cmp	r8, sl
   13068:	movcc	r0, #0
   1306c:	strbcc	r0, [r6, r8]
   13070:	b	130e4 <__mempcpy_chk@plt+0x2094>
   13074:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13078:	mov	lr, r4
   1307c:	b	13088 <__mempcpy_chk@plt+0x2038>
   13080:	ldr	r5, [sp, #28]
   13084:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13088:	mov	r0, #0
   1308c:	ldr	r1, [fp, #12]
   13090:	bic	r1, r1, #2
   13094:	mov	r2, #2
   13098:	ldr	r3, [sp, #92]	; 0x5c
   1309c:	tst	r3, #1
   130a0:	movwne	r2, #4
   130a4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   130a8:	cmp	r3, #2
   130ac:	movne	r2, r3
   130b0:	str	r2, [sp]
   130b4:	str	r1, [sp, #4]
   130b8:	str	r0, [sp, #8]
   130bc:	ldr	r0, [sp, #80]	; 0x50
   130c0:	str	r0, [sp, #12]
   130c4:	ldr	r0, [sp, #88]	; 0x58
   130c8:	str	r0, [sp, #16]
   130cc:	mov	r0, r5
   130d0:	mov	r1, sl
   130d4:	mov	r2, ip
   130d8:	mov	r3, lr
   130dc:	bl	12170 <__mempcpy_chk@plt+0x1120>
   130e0:	mov	r8, r0
   130e4:	mov	r0, r8
   130e8:	sub	sp, fp, #28
   130ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130f0:	mov	r0, #5
   130f4:	str	r0, [sp]
   130f8:	ldr	r0, [fp, #12]
   130fc:	str	r0, [sp, #4]
   13100:	ldr	r0, [fp, #16]
   13104:	str	r0, [sp, #8]
   13108:	ldr	r0, [sp, #80]	; 0x50
   1310c:	str	r0, [sp, #12]
   13110:	ldr	r0, [sp, #88]	; 0x58
   13114:	str	r0, [sp, #16]
   13118:	mov	r0, r6
   1311c:	ldr	r1, [sp, #84]	; 0x54
   13120:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13124:	mov	r3, r9
   13128:	b	130dc <__mempcpy_chk@plt+0x208c>
   1312c:	bl	11038 <abort@plt>
   13130:	mov	r3, r2
   13134:	mov	r2, #0
   13138:	b	1313c <__mempcpy_chk@plt+0x20ec>
   1313c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13140:	add	fp, sp, #28
   13144:	sub	sp, sp, #36	; 0x24
   13148:	mov	r4, r2
   1314c:	str	r2, [sp, #24]
   13150:	mov	r5, r1
   13154:	mov	r6, r0
   13158:	str	r0, [sp, #20]
   1315c:	movw	r8, #24928	; 0x6160
   13160:	movt	r8, #2
   13164:	cmp	r3, #0
   13168:	movne	r8, r3
   1316c:	bl	10f78 <__errno_location@plt>
   13170:	str	r0, [sp, #28]
   13174:	ldm	r8, {r3, r9}
   13178:	ldr	r1, [r8, #40]	; 0x28
   1317c:	ldr	r2, [r8, #44]	; 0x2c
   13180:	ldr	r7, [r0]
   13184:	str	r7, [sp, #32]
   13188:	add	sl, r8, #8
   1318c:	cmp	r4, #0
   13190:	orreq	r9, r9, #1
   13194:	stm	sp, {r3, r9, sl}
   13198:	str	r1, [sp, #12]
   1319c:	str	r2, [sp, #16]
   131a0:	mov	r0, #0
   131a4:	mov	r1, #0
   131a8:	mov	r2, r6
   131ac:	mov	r3, r5
   131b0:	mov	r7, r5
   131b4:	bl	12170 <__mempcpy_chk@plt+0x1120>
   131b8:	mov	r5, r0
   131bc:	add	r4, r0, #1
   131c0:	mov	r0, r4
   131c4:	bl	14044 <__mempcpy_chk@plt+0x2ff4>
   131c8:	mov	r6, r0
   131cc:	ldr	r0, [r8]
   131d0:	ldr	r1, [r8, #40]	; 0x28
   131d4:	ldr	r2, [r8, #44]	; 0x2c
   131d8:	stm	sp, {r0, r9, sl}
   131dc:	str	r1, [sp, #12]
   131e0:	str	r2, [sp, #16]
   131e4:	mov	r0, r6
   131e8:	mov	r1, r4
   131ec:	ldr	r2, [sp, #20]
   131f0:	mov	r3, r7
   131f4:	bl	12170 <__mempcpy_chk@plt+0x1120>
   131f8:	ldr	r0, [sp, #24]
   131fc:	ldr	r1, [sp, #32]
   13200:	ldr	r2, [sp, #28]
   13204:	str	r1, [r2]
   13208:	cmp	r0, #0
   1320c:	strne	r5, [r0]
   13210:	mov	r0, r6
   13214:	sub	sp, fp, #28
   13218:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1321c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13220:	add	fp, sp, #24
   13224:	movw	r8, #24816	; 0x60f0
   13228:	movt	r8, #2
   1322c:	ldr	r4, [r8]
   13230:	movw	r5, #24820	; 0x60f4
   13234:	movt	r5, #2
   13238:	ldr	r0, [r5]
   1323c:	cmp	r0, #2
   13240:	blt	1326c <__mempcpy_chk@plt+0x221c>
   13244:	add	r7, r4, #12
   13248:	mov	r6, #0
   1324c:	ldr	r0, [r7, r6, lsl #3]
   13250:	bl	11d98 <__mempcpy_chk@plt+0xd48>
   13254:	add	r0, r6, #1
   13258:	ldr	r1, [r5]
   1325c:	add	r2, r6, #2
   13260:	cmp	r2, r1
   13264:	mov	r6, r0
   13268:	blt	1324c <__mempcpy_chk@plt+0x21fc>
   1326c:	ldr	r0, [r4, #4]
   13270:	movw	r9, #24976	; 0x6190
   13274:	movt	r9, #2
   13278:	cmp	r0, r9
   1327c:	movw	r7, #24824	; 0x60f8
   13280:	movt	r7, #2
   13284:	beq	13294 <__mempcpy_chk@plt+0x2244>
   13288:	bl	11d98 <__mempcpy_chk@plt+0xd48>
   1328c:	mov	r0, #256	; 0x100
   13290:	stm	r7, {r0, r9}
   13294:	cmp	r4, r7
   13298:	beq	132a8 <__mempcpy_chk@plt+0x2258>
   1329c:	mov	r0, r4
   132a0:	bl	11d98 <__mempcpy_chk@plt+0xd48>
   132a4:	str	r7, [r8]
   132a8:	mov	r0, #1
   132ac:	str	r0, [r5]
   132b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   132b4:	movw	r3, #24928	; 0x6160
   132b8:	movt	r3, #2
   132bc:	mvn	r2, #0
   132c0:	b	132c4 <__mempcpy_chk@plt+0x2274>
   132c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132c8:	add	fp, sp, #28
   132cc:	sub	sp, sp, #44	; 0x2c
   132d0:	mov	r7, r3
   132d4:	str	r2, [sp, #36]	; 0x24
   132d8:	str	r1, [sp, #32]
   132dc:	mov	r5, r0
   132e0:	bl	10f78 <__errno_location@plt>
   132e4:	cmp	r5, #0
   132e8:	bmi	13458 <__mempcpy_chk@plt+0x2408>
   132ec:	cmn	r5, #-2147483647	; 0x80000001
   132f0:	beq	13458 <__mempcpy_chk@plt+0x2408>
   132f4:	movw	r4, #24816	; 0x60f0
   132f8:	movt	r4, #2
   132fc:	ldr	r6, [r4]
   13300:	str	r0, [sp, #28]
   13304:	ldr	r0, [r0]
   13308:	str	r0, [sp, #24]
   1330c:	movw	r8, #24820	; 0x60f4
   13310:	movt	r8, #2
   13314:	ldr	r1, [r8]
   13318:	cmp	r1, r5
   1331c:	ble	13328 <__mempcpy_chk@plt+0x22d8>
   13320:	mov	sl, r6
   13324:	b	13394 <__mempcpy_chk@plt+0x2344>
   13328:	str	r1, [fp, #-32]	; 0xffffffe0
   1332c:	mov	r0, #8
   13330:	str	r0, [sp]
   13334:	movw	r9, #24824	; 0x60f8
   13338:	movt	r9, #2
   1333c:	subs	r0, r6, r9
   13340:	movne	r0, r6
   13344:	sub	r1, r5, r1
   13348:	add	r2, r1, #1
   1334c:	sub	r1, fp, #32
   13350:	mvn	r3, #-2147483648	; 0x80000000
   13354:	bl	14120 <__mempcpy_chk@plt+0x30d0>
   13358:	mov	sl, r0
   1335c:	str	r0, [r4]
   13360:	cmp	r6, r9
   13364:	bne	13370 <__mempcpy_chk@plt+0x2320>
   13368:	ldrd	r0, [r9]
   1336c:	stm	sl, {r0, r1}
   13370:	ldr	r1, [r8]
   13374:	add	r0, sl, r1, lsl #3
   13378:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1337c:	sub	r1, r2, r1
   13380:	lsl	r2, r1, #3
   13384:	mov	r1, #0
   13388:	bl	10f90 <memset@plt>
   1338c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13390:	str	r0, [r8]
   13394:	mov	r9, sl
   13398:	ldr	r6, [r9, r5, lsl #3]!
   1339c:	ldr	r4, [r9, #4]!
   133a0:	ldm	r7, {r0, r1}
   133a4:	ldr	r2, [r7, #40]	; 0x28
   133a8:	ldr	r3, [r7, #44]	; 0x2c
   133ac:	orr	r8, r1, #1
   133b0:	add	r1, r7, #8
   133b4:	stm	sp, {r0, r8}
   133b8:	str	r1, [sp, #20]
   133bc:	add	r0, sp, #8
   133c0:	stm	r0, {r1, r2, r3}
   133c4:	mov	r0, r4
   133c8:	mov	r1, r6
   133cc:	ldr	r2, [sp, #32]
   133d0:	ldr	r3, [sp, #36]	; 0x24
   133d4:	bl	12170 <__mempcpy_chk@plt+0x1120>
   133d8:	cmp	r6, r0
   133dc:	bhi	13440 <__mempcpy_chk@plt+0x23f0>
   133e0:	add	r6, r0, #1
   133e4:	str	r6, [sl, r5, lsl #3]
   133e8:	movw	r0, #24976	; 0x6190
   133ec:	movt	r0, #2
   133f0:	cmp	r4, r0
   133f4:	beq	13400 <__mempcpy_chk@plt+0x23b0>
   133f8:	mov	r0, r4
   133fc:	bl	11d98 <__mempcpy_chk@plt+0xd48>
   13400:	mov	r0, r6
   13404:	bl	14044 <__mempcpy_chk@plt+0x2ff4>
   13408:	mov	r4, r0
   1340c:	str	r0, [r9]
   13410:	ldr	r0, [r7]
   13414:	ldr	r1, [r7, #40]	; 0x28
   13418:	ldr	r2, [r7, #44]	; 0x2c
   1341c:	stm	sp, {r0, r8}
   13420:	ldr	r0, [sp, #20]
   13424:	add	r3, sp, #8
   13428:	stm	r3, {r0, r1, r2}
   1342c:	mov	r0, r4
   13430:	mov	r1, r6
   13434:	ldr	r2, [sp, #32]
   13438:	ldr	r3, [sp, #36]	; 0x24
   1343c:	bl	12170 <__mempcpy_chk@plt+0x1120>
   13440:	ldr	r0, [sp, #28]
   13444:	ldr	r1, [sp, #24]
   13448:	str	r1, [r0]
   1344c:	mov	r0, r4
   13450:	sub	sp, fp, #28
   13454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13458:	bl	11038 <abort@plt>
   1345c:	movw	r3, #24928	; 0x6160
   13460:	movt	r3, #2
   13464:	b	132c4 <__mempcpy_chk@plt+0x2274>
   13468:	mov	r1, r0
   1346c:	mov	r0, #0
   13470:	b	132b4 <__mempcpy_chk@plt+0x2264>
   13474:	mov	r2, r1
   13478:	mov	r1, r0
   1347c:	mov	r0, #0
   13480:	b	1345c <__mempcpy_chk@plt+0x240c>
   13484:	push	{r4, r5, r6, sl, fp, lr}
   13488:	add	fp, sp, #16
   1348c:	sub	sp, sp, #48	; 0x30
   13490:	mov	r4, r2
   13494:	mov	r5, r0
   13498:	mov	r6, sp
   1349c:	mov	r0, r6
   134a0:	bl	134c0 <__mempcpy_chk@plt+0x2470>
   134a4:	mov	r0, r5
   134a8:	mov	r1, r4
   134ac:	mvn	r2, #0
   134b0:	mov	r3, r6
   134b4:	bl	132c4 <__mempcpy_chk@plt+0x2274>
   134b8:	sub	sp, fp, #16
   134bc:	pop	{r4, r5, r6, sl, fp, pc}
   134c0:	push	{fp, lr}
   134c4:	mov	fp, sp
   134c8:	vmov.i32	q8, #0	; 0x00000000
   134cc:	mov	r2, #32
   134d0:	mov	r3, r0
   134d4:	vst1.32	{d16-d17}, [r3], r2
   134d8:	vst1.32	{d16-d17}, [r3]
   134dc:	add	r2, r0, #16
   134e0:	vst1.32	{d16-d17}, [r2]
   134e4:	cmp	r1, #10
   134e8:	strne	r1, [r0]
   134ec:	popne	{fp, pc}
   134f0:	bl	11038 <abort@plt>
   134f4:	push	{r4, r5, r6, r7, fp, lr}
   134f8:	add	fp, sp, #16
   134fc:	sub	sp, sp, #48	; 0x30
   13500:	mov	r4, r3
   13504:	mov	r5, r2
   13508:	mov	r6, r0
   1350c:	mov	r7, sp
   13510:	mov	r0, r7
   13514:	bl	134c0 <__mempcpy_chk@plt+0x2470>
   13518:	mov	r0, r6
   1351c:	mov	r1, r5
   13520:	mov	r2, r4
   13524:	mov	r3, r7
   13528:	bl	132c4 <__mempcpy_chk@plt+0x2274>
   1352c:	sub	sp, fp, #16
   13530:	pop	{r4, r5, r6, r7, fp, pc}
   13534:	mov	r2, r1
   13538:	mov	r1, r0
   1353c:	mov	r0, #0
   13540:	b	13484 <__mempcpy_chk@plt+0x2434>
   13544:	mov	r3, r2
   13548:	mov	r2, r1
   1354c:	mov	r1, r0
   13550:	mov	r0, #0
   13554:	b	134f4 <__mempcpy_chk@plt+0x24a4>
   13558:	push	{r4, r5, r6, sl, fp, lr}
   1355c:	add	fp, sp, #16
   13560:	sub	sp, sp, #48	; 0x30
   13564:	mov	r4, r1
   13568:	mov	r5, r0
   1356c:	movw	r0, #24928	; 0x6160
   13570:	movt	r0, #2
   13574:	add	r1, r0, #16
   13578:	mov	r3, #32
   1357c:	vld1.64	{d16-d17}, [r0], r3
   13580:	vld1.64	{d18-d19}, [r1]
   13584:	mov	r6, sp
   13588:	add	r1, r6, #16
   1358c:	vld1.64	{d20-d21}, [r0]
   13590:	vst1.64	{d18-d19}, [r1]
   13594:	mov	r0, r6
   13598:	vst1.64	{d16-d17}, [r0], r3
   1359c:	vst1.64	{d20-d21}, [r0]
   135a0:	mov	r0, r6
   135a4:	mov	r1, r2
   135a8:	mov	r2, #1
   135ac:	bl	12064 <__mempcpy_chk@plt+0x1014>
   135b0:	mov	r0, #0
   135b4:	mov	r1, r5
   135b8:	mov	r2, r4
   135bc:	mov	r3, r6
   135c0:	bl	132c4 <__mempcpy_chk@plt+0x2274>
   135c4:	sub	sp, fp, #16
   135c8:	pop	{r4, r5, r6, sl, fp, pc}
   135cc:	mov	r2, r1
   135d0:	mvn	r1, #0
   135d4:	b	13558 <__mempcpy_chk@plt+0x2508>
   135d8:	mov	r1, #58	; 0x3a
   135dc:	b	135cc <__mempcpy_chk@plt+0x257c>
   135e0:	mov	r2, #58	; 0x3a
   135e4:	b	13558 <__mempcpy_chk@plt+0x2508>
   135e8:	push	{r4, r5, r6, sl, fp, lr}
   135ec:	add	fp, sp, #16
   135f0:	sub	sp, sp, #48	; 0x30
   135f4:	mov	r4, r2
   135f8:	mov	r5, r0
   135fc:	mov	r6, sp
   13600:	mov	r0, r6
   13604:	bl	134c0 <__mempcpy_chk@plt+0x2470>
   13608:	mov	r0, r6
   1360c:	mov	r1, #58	; 0x3a
   13610:	mov	r2, #1
   13614:	bl	12064 <__mempcpy_chk@plt+0x1014>
   13618:	mov	r0, r5
   1361c:	mov	r1, r4
   13620:	mvn	r2, #0
   13624:	mov	r3, r6
   13628:	bl	132c4 <__mempcpy_chk@plt+0x2274>
   1362c:	sub	sp, fp, #16
   13630:	pop	{r4, r5, r6, sl, fp, pc}
   13634:	push	{fp, lr}
   13638:	mov	fp, sp
   1363c:	sub	sp, sp, #8
   13640:	mvn	ip, #0
   13644:	str	ip, [sp]
   13648:	bl	13654 <__mempcpy_chk@plt+0x2604>
   1364c:	mov	sp, fp
   13650:	pop	{fp, pc}
   13654:	push	{r4, r5, r6, r7, fp, lr}
   13658:	add	fp, sp, #16
   1365c:	sub	sp, sp, #48	; 0x30
   13660:	mov	r7, r3
   13664:	mov	r5, r0
   13668:	movw	r0, #24928	; 0x6160
   1366c:	movt	r0, #2
   13670:	add	r3, r0, #16
   13674:	mov	r4, #32
   13678:	vld1.64	{d16-d17}, [r0], r4
   1367c:	vld1.64	{d18-d19}, [r3]
   13680:	mov	r6, sp
   13684:	add	r3, r6, #16
   13688:	vld1.64	{d20-d21}, [r0]
   1368c:	vst1.64	{d18-d19}, [r3]
   13690:	mov	r0, r6
   13694:	vst1.64	{d16-d17}, [r0], r4
   13698:	vst1.64	{d20-d21}, [r0]
   1369c:	mov	r0, r6
   136a0:	bl	120bc <__mempcpy_chk@plt+0x106c>
   136a4:	ldr	r2, [fp, #8]
   136a8:	mov	r0, r5
   136ac:	mov	r1, r7
   136b0:	mov	r3, r6
   136b4:	bl	132c4 <__mempcpy_chk@plt+0x2274>
   136b8:	sub	sp, fp, #16
   136bc:	pop	{r4, r5, r6, r7, fp, pc}
   136c0:	mov	r3, r2
   136c4:	mov	r2, r1
   136c8:	mov	r1, r0
   136cc:	mov	r0, #0
   136d0:	b	13634 <__mempcpy_chk@plt+0x25e4>
   136d4:	push	{fp, lr}
   136d8:	mov	fp, sp
   136dc:	sub	sp, sp, #8
   136e0:	mov	ip, r2
   136e4:	mov	r2, r1
   136e8:	mov	r1, r0
   136ec:	str	r3, [sp]
   136f0:	mov	r0, #0
   136f4:	mov	r3, ip
   136f8:	bl	13654 <__mempcpy_chk@plt+0x2604>
   136fc:	mov	sp, fp
   13700:	pop	{fp, pc}
   13704:	movw	r3, #24832	; 0x6100
   13708:	movt	r3, #2
   1370c:	b	132c4 <__mempcpy_chk@plt+0x2274>
   13710:	mov	r2, r1
   13714:	mov	r1, r0
   13718:	mov	r0, #0
   1371c:	b	13704 <__mempcpy_chk@plt+0x26b4>
   13720:	mvn	r2, #0
   13724:	b	13704 <__mempcpy_chk@plt+0x26b4>
   13728:	mov	r1, r0
   1372c:	mov	r0, #0
   13730:	b	13720 <__mempcpy_chk@plt+0x26d0>
   13734:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13738:	add	fp, sp, #24
   1373c:	sub	sp, sp, #16
   13740:	mov	r4, r1
   13744:	mov	r5, r0
   13748:	mov	r7, #0
   1374c:	mov	r0, #0
   13750:	mov	r1, r5
   13754:	mov	r2, #5
   13758:	bl	10e64 <dcgettext@plt>
   1375c:	cmp	r0, r5
   13760:	beq	1376c <__mempcpy_chk@plt+0x271c>
   13764:	sub	sp, fp, #24
   13768:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1376c:	bl	14ad8 <__mempcpy_chk@plt+0x3a88>
   13770:	mov	r6, r0
   13774:	mov	r8, #56	; 0x38
   13778:	mov	r0, #45	; 0x2d
   1377c:	stm	sp, {r0, r8}
   13780:	str	r7, [sp, #8]
   13784:	str	r7, [sp, #12]
   13788:	mov	r0, r6
   1378c:	mov	r1, #85	; 0x55
   13790:	mov	r2, #84	; 0x54
   13794:	mov	r3, #70	; 0x46
   13798:	bl	13830 <__mempcpy_chk@plt+0x27e0>
   1379c:	cmp	r0, #0
   137a0:	beq	137bc <__mempcpy_chk@plt+0x276c>
   137a4:	ldrb	r1, [r5]
   137a8:	movw	r2, #21452	; 0x53cc
   137ac:	movt	r2, #1
   137b0:	movw	r0, #21456	; 0x53d0
   137b4:	movt	r0, #1
   137b8:	b	13800 <__mempcpy_chk@plt+0x27b0>
   137bc:	mov	r0, #48	; 0x30
   137c0:	mov	r1, #51	; 0x33
   137c4:	str	r8, [sp]
   137c8:	stmib	sp, {r0, r1}
   137cc:	str	r0, [sp, #12]
   137d0:	mov	r0, r6
   137d4:	mov	r1, #71	; 0x47
   137d8:	mov	r2, #66	; 0x42
   137dc:	mov	r3, #49	; 0x31
   137e0:	bl	13830 <__mempcpy_chk@plt+0x27e0>
   137e4:	cmp	r0, #0
   137e8:	beq	13810 <__mempcpy_chk@plt+0x27c0>
   137ec:	ldrb	r1, [r5]
   137f0:	movw	r2, #21460	; 0x53d4
   137f4:	movt	r2, #1
   137f8:	movw	r0, #21464	; 0x53d8
   137fc:	movt	r0, #1
   13800:	cmp	r1, #96	; 0x60
   13804:	moveq	r0, r2
   13808:	sub	sp, fp, #24
   1380c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13810:	movw	r1, #21446	; 0x53c6
   13814:	movt	r1, #1
   13818:	movw	r0, #21450	; 0x53ca
   1381c:	movt	r0, #1
   13820:	cmp	r4, #9
   13824:	moveq	r0, r1
   13828:	sub	sp, fp, #24
   1382c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13830:	push	{r4, r5, r6, r7, fp, lr}
   13834:	add	fp, sp, #16
   13838:	sub	sp, sp, #16
   1383c:	mov	r4, r3
   13840:	mov	r5, r2
   13844:	mov	r7, r1
   13848:	mov	r6, r0
   1384c:	mov	r0, r1
   13850:	bl	147e4 <__mempcpy_chk@plt+0x3794>
   13854:	ldrb	r1, [r6]
   13858:	cmp	r0, #0
   1385c:	andne	r1, r1, #223	; 0xdf
   13860:	mov	r0, #0
   13864:	cmp	r1, r7
   13868:	bne	138a0 <__mempcpy_chk@plt+0x2850>
   1386c:	cmp	r7, #0
   13870:	beq	138a8 <__mempcpy_chk@plt+0x2858>
   13874:	ldr	r0, [fp, #20]
   13878:	ldr	r1, [fp, #16]
   1387c:	ldr	r2, [fp, #12]
   13880:	ldr	r3, [fp, #8]
   13884:	str	r2, [sp]
   13888:	str	r1, [sp, #4]
   1388c:	str	r0, [sp, #8]
   13890:	mov	r0, r6
   13894:	mov	r1, r5
   13898:	mov	r2, r4
   1389c:	bl	138b4 <__mempcpy_chk@plt+0x2864>
   138a0:	sub	sp, fp, #16
   138a4:	pop	{r4, r5, r6, r7, fp, pc}
   138a8:	mov	r0, #1
   138ac:	sub	sp, fp, #16
   138b0:	pop	{r4, r5, r6, r7, fp, pc}
   138b4:	push	{r4, r5, r6, r7, fp, lr}
   138b8:	add	fp, sp, #16
   138bc:	sub	sp, sp, #8
   138c0:	mov	r4, r3
   138c4:	mov	r5, r2
   138c8:	mov	r7, r1
   138cc:	mov	r6, r0
   138d0:	mov	r0, r1
   138d4:	bl	147e4 <__mempcpy_chk@plt+0x3794>
   138d8:	ldrb	r1, [r6, #1]
   138dc:	cmp	r0, #0
   138e0:	andne	r1, r1, #223	; 0xdf
   138e4:	mov	r0, #0
   138e8:	cmp	r1, r7
   138ec:	bne	1391c <__mempcpy_chk@plt+0x28cc>
   138f0:	cmp	r7, #0
   138f4:	beq	13924 <__mempcpy_chk@plt+0x28d4>
   138f8:	ldr	r0, [fp, #16]
   138fc:	ldr	r1, [fp, #12]
   13900:	ldr	r3, [fp, #8]
   13904:	str	r1, [sp]
   13908:	str	r0, [sp, #4]
   1390c:	mov	r0, r6
   13910:	mov	r1, r5
   13914:	mov	r2, r4
   13918:	bl	13930 <__mempcpy_chk@plt+0x28e0>
   1391c:	sub	sp, fp, #16
   13920:	pop	{r4, r5, r6, r7, fp, pc}
   13924:	mov	r0, #1
   13928:	sub	sp, fp, #16
   1392c:	pop	{r4, r5, r6, r7, fp, pc}
   13930:	push	{r4, r5, r6, r7, fp, lr}
   13934:	add	fp, sp, #16
   13938:	sub	sp, sp, #8
   1393c:	mov	r4, r3
   13940:	mov	r5, r2
   13944:	mov	r7, r1
   13948:	mov	r6, r0
   1394c:	mov	r0, r1
   13950:	bl	147e4 <__mempcpy_chk@plt+0x3794>
   13954:	ldrb	r1, [r6, #2]
   13958:	cmp	r0, #0
   1395c:	andne	r1, r1, #223	; 0xdf
   13960:	mov	r0, #0
   13964:	cmp	r1, r7
   13968:	bne	13990 <__mempcpy_chk@plt+0x2940>
   1396c:	cmp	r7, #0
   13970:	beq	13998 <__mempcpy_chk@plt+0x2948>
   13974:	ldr	r0, [fp, #12]
   13978:	ldr	r3, [fp, #8]
   1397c:	str	r0, [sp]
   13980:	mov	r0, r6
   13984:	mov	r1, r5
   13988:	mov	r2, r4
   1398c:	bl	139a4 <__mempcpy_chk@plt+0x2954>
   13990:	sub	sp, fp, #16
   13994:	pop	{r4, r5, r6, r7, fp, pc}
   13998:	mov	r0, #1
   1399c:	sub	sp, fp, #16
   139a0:	pop	{r4, r5, r6, r7, fp, pc}
   139a4:	push	{r4, r5, r6, r7, fp, lr}
   139a8:	add	fp, sp, #16
   139ac:	mov	r4, r3
   139b0:	mov	r5, r2
   139b4:	mov	r7, r1
   139b8:	mov	r6, r0
   139bc:	mov	r0, r1
   139c0:	bl	147e4 <__mempcpy_chk@plt+0x3794>
   139c4:	ldrb	r1, [r6, #3]
   139c8:	ldr	r3, [fp, #8]
   139cc:	cmp	r0, #0
   139d0:	andne	r1, r1, #223	; 0xdf
   139d4:	mov	r0, #0
   139d8:	cmp	r1, r7
   139dc:	bne	13a00 <__mempcpy_chk@plt+0x29b0>
   139e0:	cmp	r7, #0
   139e4:	beq	139fc <__mempcpy_chk@plt+0x29ac>
   139e8:	mov	r0, r6
   139ec:	mov	r1, r5
   139f0:	mov	r2, r4
   139f4:	pop	{r4, r5, r6, r7, fp, lr}
   139f8:	b	13a04 <__mempcpy_chk@plt+0x29b4>
   139fc:	mov	r0, #1
   13a00:	pop	{r4, r5, r6, r7, fp, pc}
   13a04:	push	{r4, r5, r6, r7, fp, lr}
   13a08:	add	fp, sp, #16
   13a0c:	mov	r4, r3
   13a10:	mov	r5, r2
   13a14:	mov	r7, r1
   13a18:	mov	r6, r0
   13a1c:	mov	r0, r1
   13a20:	bl	147e4 <__mempcpy_chk@plt+0x3794>
   13a24:	ldrb	r1, [r6, #4]
   13a28:	cmp	r0, #0
   13a2c:	andne	r1, r1, #223	; 0xdf
   13a30:	mov	r0, #0
   13a34:	cmp	r1, r7
   13a38:	bne	13a5c <__mempcpy_chk@plt+0x2a0c>
   13a3c:	cmp	r7, #0
   13a40:	beq	13a58 <__mempcpy_chk@plt+0x2a08>
   13a44:	mov	r0, r6
   13a48:	mov	r1, r5
   13a4c:	mov	r2, r4
   13a50:	pop	{r4, r5, r6, r7, fp, lr}
   13a54:	b	13a60 <__mempcpy_chk@plt+0x2a10>
   13a58:	mov	r0, #1
   13a5c:	pop	{r4, r5, r6, r7, fp, pc}
   13a60:	push	{r4, r5, r6, sl, fp, lr}
   13a64:	add	fp, sp, #16
   13a68:	mov	r4, r2
   13a6c:	mov	r6, r1
   13a70:	mov	r5, r0
   13a74:	mov	r0, r1
   13a78:	bl	147e4 <__mempcpy_chk@plt+0x3794>
   13a7c:	ldrb	r1, [r5, #5]
   13a80:	cmp	r0, #0
   13a84:	andne	r1, r1, #223	; 0xdf
   13a88:	mov	r0, #0
   13a8c:	cmp	r1, r6
   13a90:	bne	13ab0 <__mempcpy_chk@plt+0x2a60>
   13a94:	cmp	r6, #0
   13a98:	beq	13aac <__mempcpy_chk@plt+0x2a5c>
   13a9c:	mov	r0, r5
   13aa0:	mov	r1, r4
   13aa4:	pop	{r4, r5, r6, sl, fp, lr}
   13aa8:	b	13ab4 <__mempcpy_chk@plt+0x2a64>
   13aac:	mov	r0, #1
   13ab0:	pop	{r4, r5, r6, sl, fp, pc}
   13ab4:	push	{r4, r5, fp, lr}
   13ab8:	add	fp, sp, #8
   13abc:	mov	r5, r1
   13ac0:	mov	r4, r0
   13ac4:	mov	r0, r1
   13ac8:	bl	147e4 <__mempcpy_chk@plt+0x3794>
   13acc:	ldrb	r1, [r4, #6]
   13ad0:	cmp	r0, #0
   13ad4:	andne	r1, r1, #223	; 0xdf
   13ad8:	mov	r0, #0
   13adc:	cmp	r1, r5
   13ae0:	popne	{r4, r5, fp, pc}
   13ae4:	cmp	r5, #0
   13ae8:	beq	13af8 <__mempcpy_chk@plt+0x2aa8>
   13aec:	mov	r0, r4
   13af0:	pop	{r4, r5, fp, lr}
   13af4:	b	13b00 <__mempcpy_chk@plt+0x2ab0>
   13af8:	mov	r0, #1
   13afc:	pop	{r4, r5, fp, pc}
   13b00:	push	{r4, sl, fp, lr}
   13b04:	add	fp, sp, #8
   13b08:	mov	r4, r0
   13b0c:	mov	r0, #0
   13b10:	bl	147e4 <__mempcpy_chk@plt+0x3794>
   13b14:	ldrb	r1, [r4, #7]
   13b18:	cmp	r0, #0
   13b1c:	beq	13b30 <__mempcpy_chk@plt+0x2ae0>
   13b20:	tst	r1, #223	; 0xdf
   13b24:	bne	13b38 <__mempcpy_chk@plt+0x2ae8>
   13b28:	mov	r0, #1
   13b2c:	pop	{r4, sl, fp, pc}
   13b30:	cmp	r1, #0
   13b34:	beq	13b28 <__mempcpy_chk@plt+0x2ad8>
   13b38:	mov	r0, #0
   13b3c:	pop	{r4, sl, fp, pc}
   13b40:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b44:	add	fp, sp, #24
   13b48:	sub	sp, sp, #32
   13b4c:	mov	r4, r2
   13b50:	mov	r8, r0
   13b54:	ldr	r6, [fp, #12]
   13b58:	ldr	r7, [fp, #8]
   13b5c:	cmp	r1, #0
   13b60:	beq	13b88 <__mempcpy_chk@plt+0x2b38>
   13b64:	mov	r5, r1
   13b68:	str	r4, [sp]
   13b6c:	str	r3, [sp, #4]
   13b70:	movw	r2, #21552	; 0x5430
   13b74:	movt	r2, #1
   13b78:	mov	r0, r8
   13b7c:	mov	r1, #1
   13b80:	mov	r3, r5
   13b84:	b	13ba0 <__mempcpy_chk@plt+0x2b50>
   13b88:	str	r3, [sp]
   13b8c:	movw	r2, #21564	; 0x543c
   13b90:	movt	r2, #1
   13b94:	mov	r0, r8
   13b98:	mov	r1, #1
   13b9c:	mov	r3, r4
   13ba0:	bl	10fb4 <__fprintf_chk@plt>
   13ba4:	movw	r1, #21571	; 0x5443
   13ba8:	movt	r1, #1
   13bac:	mov	r0, #0
   13bb0:	mov	r2, #5
   13bb4:	bl	10e64 <dcgettext@plt>
   13bb8:	mov	r3, r0
   13bbc:	movw	r0, #2022	; 0x7e6
   13bc0:	str	r0, [sp]
   13bc4:	movw	r2, #22289	; 0x5711
   13bc8:	movt	r2, #1
   13bcc:	mov	r0, r8
   13bd0:	mov	r1, #1
   13bd4:	bl	10fb4 <__fprintf_chk@plt>
   13bd8:	movw	r4, #19910	; 0x4dc6
   13bdc:	movt	r4, #1
   13be0:	mov	r0, r4
   13be4:	mov	r1, r8
   13be8:	bl	10df8 <fputs_unlocked@plt>
   13bec:	movw	r1, #21575	; 0x5447
   13bf0:	movt	r1, #1
   13bf4:	mov	r0, #0
   13bf8:	mov	r2, #5
   13bfc:	bl	10e64 <dcgettext@plt>
   13c00:	mov	r2, r0
   13c04:	movw	r3, #21746	; 0x54f2
   13c08:	movt	r3, #1
   13c0c:	mov	r0, r8
   13c10:	mov	r1, #1
   13c14:	bl	10fb4 <__fprintf_chk@plt>
   13c18:	mov	r0, r4
   13c1c:	mov	r1, r8
   13c20:	bl	10df8 <fputs_unlocked@plt>
   13c24:	cmp	r6, #9
   13c28:	bhi	13c64 <__mempcpy_chk@plt+0x2c14>
   13c2c:	add	r0, pc, #0
   13c30:	ldr	pc, [r0, r6, lsl #2]
   13c34:	andeq	r3, r1, ip, asr ip
   13c38:	andeq	r3, r1, r0, ror ip
   13c3c:	andeq	r3, r1, r0, lsr #25
   13c40:	andeq	r3, r1, r8, asr #25
   13c44:	strdeq	r3, [r1], -r0
   13c48:	andeq	r3, r1, r8, lsl sp
   13c4c:	andeq	r3, r1, r0, asr #26
   13c50:	andeq	r3, r1, r8, ror sp
   13c54:	andeq	r3, r1, r8, lsl lr
   13c58:	andeq	r3, r1, r0, asr #27
   13c5c:	sub	sp, fp, #24
   13c60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13c64:	movw	r1, #22099	; 0x5653
   13c68:	movt	r1, #1
   13c6c:	b	13dc8 <__mempcpy_chk@plt+0x2d78>
   13c70:	movw	r1, #21780	; 0x5514
   13c74:	movt	r1, #1
   13c78:	mov	r0, #0
   13c7c:	mov	r2, #5
   13c80:	bl	10e64 <dcgettext@plt>
   13c84:	mov	r2, r0
   13c88:	ldr	r3, [r7]
   13c8c:	mov	r0, r8
   13c90:	mov	r1, #1
   13c94:	sub	sp, fp, #24
   13c98:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13c9c:	b	10fb4 <__fprintf_chk@plt>
   13ca0:	movw	r1, #21796	; 0x5524
   13ca4:	movt	r1, #1
   13ca8:	mov	r0, #0
   13cac:	mov	r2, #5
   13cb0:	bl	10e64 <dcgettext@plt>
   13cb4:	mov	r2, r0
   13cb8:	ldr	r3, [r7]
   13cbc:	ldr	r0, [r7, #4]
   13cc0:	str	r0, [sp]
   13cc4:	b	13db4 <__mempcpy_chk@plt+0x2d64>
   13cc8:	movw	r1, #21819	; 0x553b
   13ccc:	movt	r1, #1
   13cd0:	mov	r0, #0
   13cd4:	mov	r2, #5
   13cd8:	bl	10e64 <dcgettext@plt>
   13cdc:	mov	r2, r0
   13ce0:	ldr	r3, [r7]
   13ce4:	ldmib	r7, {r0, r1}
   13ce8:	stm	sp, {r0, r1}
   13cec:	b	13db4 <__mempcpy_chk@plt+0x2d64>
   13cf0:	movw	r1, #21847	; 0x5557
   13cf4:	movt	r1, #1
   13cf8:	mov	r0, #0
   13cfc:	mov	r2, #5
   13d00:	bl	10e64 <dcgettext@plt>
   13d04:	mov	r2, r0
   13d08:	ldr	r3, [r7]
   13d0c:	ldmib	r7, {r0, r1, r7}
   13d10:	stm	sp, {r0, r1, r7}
   13d14:	b	13db4 <__mempcpy_chk@plt+0x2d64>
   13d18:	movw	r1, #21879	; 0x5577
   13d1c:	movt	r1, #1
   13d20:	mov	r0, #0
   13d24:	mov	r2, #5
   13d28:	bl	10e64 <dcgettext@plt>
   13d2c:	mov	r2, r0
   13d30:	ldr	r3, [r7]
   13d34:	ldmib	r7, {r0, r1, r6, r7}
   13d38:	stm	sp, {r0, r1, r6, r7}
   13d3c:	b	13db4 <__mempcpy_chk@plt+0x2d64>
   13d40:	movw	r1, #21915	; 0x559b
   13d44:	movt	r1, #1
   13d48:	mov	r0, #0
   13d4c:	mov	r2, #5
   13d50:	bl	10e64 <dcgettext@plt>
   13d54:	mov	r2, r0
   13d58:	ldr	r3, [r7]
   13d5c:	ldmib	r7, {r0, r1, r6}
   13d60:	ldr	r5, [r7, #16]
   13d64:	ldr	r7, [r7, #20]
   13d68:	stm	sp, {r0, r1, r6}
   13d6c:	str	r5, [sp, #12]
   13d70:	str	r7, [sp, #16]
   13d74:	b	13db4 <__mempcpy_chk@plt+0x2d64>
   13d78:	movw	r1, #21955	; 0x55c3
   13d7c:	movt	r1, #1
   13d80:	mov	r0, #0
   13d84:	mov	r2, #5
   13d88:	bl	10e64 <dcgettext@plt>
   13d8c:	mov	r2, r0
   13d90:	ldr	r3, [r7]
   13d94:	ldmib	r7, {r0, r1, r6}
   13d98:	ldr	r5, [r7, #16]
   13d9c:	ldr	r4, [r7, #20]
   13da0:	ldr	r7, [r7, #24]
   13da4:	stm	sp, {r0, r1, r6}
   13da8:	str	r5, [sp, #12]
   13dac:	str	r4, [sp, #16]
   13db0:	str	r7, [sp, #20]
   13db4:	mov	r0, r8
   13db8:	mov	r1, #1
   13dbc:	b	13e68 <__mempcpy_chk@plt+0x2e18>
   13dc0:	movw	r1, #22047	; 0x561f
   13dc4:	movt	r1, #1
   13dc8:	mov	r0, #0
   13dcc:	mov	r2, #5
   13dd0:	bl	10e64 <dcgettext@plt>
   13dd4:	mov	ip, r0
   13dd8:	ldr	r3, [r7]
   13ddc:	ldr	r0, [r7, #4]
   13de0:	ldr	r1, [r7, #8]
   13de4:	ldr	r6, [r7, #12]
   13de8:	ldr	r5, [r7, #16]
   13dec:	ldr	r4, [r7, #20]
   13df0:	ldr	r2, [r7, #24]
   13df4:	ldr	lr, [r7, #28]
   13df8:	ldr	r7, [r7, #32]
   13dfc:	stm	sp, {r0, r1, r6}
   13e00:	str	r5, [sp, #12]
   13e04:	str	r4, [sp, #16]
   13e08:	str	r2, [sp, #20]
   13e0c:	str	lr, [sp, #24]
   13e10:	str	r7, [sp, #28]
   13e14:	b	13e5c <__mempcpy_chk@plt+0x2e0c>
   13e18:	movw	r1, #21999	; 0x55ef
   13e1c:	movt	r1, #1
   13e20:	mov	r0, #0
   13e24:	mov	r2, #5
   13e28:	bl	10e64 <dcgettext@plt>
   13e2c:	mov	ip, r0
   13e30:	ldr	r3, [r7]
   13e34:	ldmib	r7, {r0, r1, r6}
   13e38:	ldr	r5, [r7, #16]
   13e3c:	ldr	r4, [r7, #20]
   13e40:	ldr	r2, [r7, #24]
   13e44:	ldr	r7, [r7, #28]
   13e48:	stm	sp, {r0, r1, r6}
   13e4c:	str	r5, [sp, #12]
   13e50:	str	r4, [sp, #16]
   13e54:	str	r2, [sp, #20]
   13e58:	str	r7, [sp, #24]
   13e5c:	mov	r0, r8
   13e60:	mov	r1, #1
   13e64:	mov	r2, ip
   13e68:	bl	10fb4 <__fprintf_chk@plt>
   13e6c:	sub	sp, fp, #24
   13e70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13e74:	push	{r4, sl, fp, lr}
   13e78:	add	fp, sp, #8
   13e7c:	sub	sp, sp, #8
   13e80:	mov	lr, #0
   13e84:	ldr	ip, [fp, #8]
   13e88:	ldr	r4, [ip, lr, lsl #2]
   13e8c:	add	lr, lr, #1
   13e90:	cmp	r4, #0
   13e94:	bne	13e88 <__mempcpy_chk@plt+0x2e38>
   13e98:	sub	r4, lr, #1
   13e9c:	str	ip, [sp]
   13ea0:	str	r4, [sp, #4]
   13ea4:	bl	13b40 <__mempcpy_chk@plt+0x2af0>
   13ea8:	sub	sp, fp, #8
   13eac:	pop	{r4, sl, fp, pc}
   13eb0:	push	{r4, r5, fp, lr}
   13eb4:	add	fp, sp, #8
   13eb8:	sub	sp, sp, #48	; 0x30
   13ebc:	mov	ip, #0
   13ec0:	ldr	r4, [fp, #8]
   13ec4:	add	lr, sp, #8
   13ec8:	ldr	r5, [r4]
   13ecc:	str	r5, [lr, ip, lsl #2]
   13ed0:	cmp	r5, #0
   13ed4:	beq	13eec <__mempcpy_chk@plt+0x2e9c>
   13ed8:	add	ip, ip, #1
   13edc:	add	r4, r4, #4
   13ee0:	cmp	ip, #10
   13ee4:	bne	13ec8 <__mempcpy_chk@plt+0x2e78>
   13ee8:	mov	ip, #10
   13eec:	str	lr, [sp]
   13ef0:	str	ip, [sp, #4]
   13ef4:	bl	13b40 <__mempcpy_chk@plt+0x2af0>
   13ef8:	sub	sp, fp, #8
   13efc:	pop	{r4, r5, fp, pc}
   13f00:	push	{fp, lr}
   13f04:	mov	fp, sp
   13f08:	sub	sp, sp, #8
   13f0c:	add	ip, fp, #8
   13f10:	str	ip, [sp, #4]
   13f14:	str	ip, [sp]
   13f18:	bl	13eb0 <__mempcpy_chk@plt+0x2e60>
   13f1c:	mov	sp, fp
   13f20:	pop	{fp, pc}
   13f24:	push	{fp, lr}
   13f28:	mov	fp, sp
   13f2c:	movw	r0, #24900	; 0x6144
   13f30:	movt	r0, #2
   13f34:	ldr	r1, [r0]
   13f38:	movw	r0, #19910	; 0x4dc6
   13f3c:	movt	r0, #1
   13f40:	bl	10df8 <fputs_unlocked@plt>
   13f44:	movw	r1, #22159	; 0x568f
   13f48:	movt	r1, #1
   13f4c:	mov	r0, #0
   13f50:	mov	r2, #5
   13f54:	bl	10e64 <dcgettext@plt>
   13f58:	mov	r1, r0
   13f5c:	movw	r2, #22179	; 0x56a3
   13f60:	movt	r2, #1
   13f64:	mov	r0, #1
   13f68:	bl	10f9c <__printf_chk@plt>
   13f6c:	movw	r1, #22201	; 0x56b9
   13f70:	movt	r1, #1
   13f74:	mov	r0, #0
   13f78:	mov	r2, #5
   13f7c:	bl	10e64 <dcgettext@plt>
   13f80:	mov	r1, r0
   13f84:	movw	r2, #20539	; 0x503b
   13f88:	movt	r2, #1
   13f8c:	movw	r3, #20948	; 0x51d4
   13f90:	movt	r3, #1
   13f94:	mov	r0, #1
   13f98:	bl	10f9c <__printf_chk@plt>
   13f9c:	movw	r1, #22221	; 0x56cd
   13fa0:	movt	r1, #1
   13fa4:	mov	r0, #0
   13fa8:	mov	r2, #5
   13fac:	bl	10e64 <dcgettext@plt>
   13fb0:	mov	r1, r0
   13fb4:	movw	r2, #22260	; 0x56f4
   13fb8:	movt	r2, #1
   13fbc:	mov	r0, #1
   13fc0:	pop	{fp, lr}
   13fc4:	b	10f9c <__printf_chk@plt>
   13fc8:	b	13fcc <__mempcpy_chk@plt+0x2f7c>
   13fcc:	push	{r4, r5, r6, sl, fp, lr}
   13fd0:	add	fp, sp, #16
   13fd4:	mov	r4, r2
   13fd8:	mov	r5, r1
   13fdc:	mov	r6, r0
   13fe0:	bl	14b74 <__mempcpy_chk@plt+0x3b24>
   13fe4:	cmp	r0, #0
   13fe8:	popne	{r4, r5, r6, sl, fp, pc}
   13fec:	cmp	r6, #0
   13ff0:	beq	14004 <__mempcpy_chk@plt+0x2fb4>
   13ff4:	cmp	r5, #0
   13ff8:	cmpne	r4, #0
   13ffc:	bne	14004 <__mempcpy_chk@plt+0x2fb4>
   14000:	pop	{r4, r5, r6, sl, fp, pc}
   14004:	bl	14390 <__mempcpy_chk@plt+0x3340>
   14008:	push	{fp, lr}
   1400c:	mov	fp, sp
   14010:	bl	14428 <__mempcpy_chk@plt+0x33d8>
   14014:	pop	{fp, lr}
   14018:	b	1401c <__mempcpy_chk@plt+0x2fcc>
   1401c:	cmp	r0, #0
   14020:	bxne	lr
   14024:	push	{fp, lr}
   14028:	mov	fp, sp
   1402c:	bl	14390 <__mempcpy_chk@plt+0x3340>
   14030:	push	{fp, lr}
   14034:	mov	fp, sp
   14038:	bl	14aa4 <__mempcpy_chk@plt+0x3a54>
   1403c:	pop	{fp, lr}
   14040:	b	1401c <__mempcpy_chk@plt+0x2fcc>
   14044:	b	14008 <__mempcpy_chk@plt+0x2fb8>
   14048:	push	{r4, r5, fp, lr}
   1404c:	add	fp, sp, #8
   14050:	mov	r4, r1
   14054:	mov	r5, r0
   14058:	bl	14458 <__mempcpy_chk@plt+0x3408>
   1405c:	cmp	r0, #0
   14060:	popne	{r4, r5, fp, pc}
   14064:	cmp	r5, #0
   14068:	beq	14078 <__mempcpy_chk@plt+0x3028>
   1406c:	cmp	r4, #0
   14070:	bne	14078 <__mempcpy_chk@plt+0x3028>
   14074:	pop	{r4, r5, fp, pc}
   14078:	bl	14390 <__mempcpy_chk@plt+0x3340>
   1407c:	push	{fp, lr}
   14080:	mov	fp, sp
   14084:	bl	14aa8 <__mempcpy_chk@plt+0x3a58>
   14088:	pop	{fp, lr}
   1408c:	b	1401c <__mempcpy_chk@plt+0x2fcc>
   14090:	push	{fp, lr}
   14094:	mov	fp, sp
   14098:	bl	14ab8 <__mempcpy_chk@plt+0x3a68>
   1409c:	pop	{fp, lr}
   140a0:	b	1401c <__mempcpy_chk@plt+0x2fcc>
   140a4:	mov	r2, r1
   140a8:	mov	r1, r0
   140ac:	mov	r0, #0
   140b0:	b	13fcc <__mempcpy_chk@plt+0x2f7c>
   140b4:	mov	r2, r1
   140b8:	mov	r1, r0
   140bc:	mov	r0, #0
   140c0:	b	14090 <__mempcpy_chk@plt+0x3040>
   140c4:	mov	r2, #1
   140c8:	b	140cc <__mempcpy_chk@plt+0x307c>
   140cc:	push	{r4, r5, fp, lr}
   140d0:	add	fp, sp, #8
   140d4:	mov	r4, r1
   140d8:	ldr	r5, [r1]
   140dc:	cmp	r0, #0
   140e0:	beq	140f8 <__mempcpy_chk@plt+0x30a8>
   140e4:	mov	r1, #1
   140e8:	add	r1, r1, r5, lsr #1
   140ec:	adds	r5, r5, r1
   140f0:	bcc	14110 <__mempcpy_chk@plt+0x30c0>
   140f4:	bl	14390 <__mempcpy_chk@plt+0x3340>
   140f8:	cmp	r5, #0
   140fc:	bne	14110 <__mempcpy_chk@plt+0x30c0>
   14100:	mov	r1, #64	; 0x40
   14104:	udiv	r5, r1, r2
   14108:	cmp	r2, #64	; 0x40
   1410c:	addhi	r5, r5, #1
   14110:	mov	r1, r5
   14114:	bl	13fcc <__mempcpy_chk@plt+0x2f7c>
   14118:	str	r5, [r4]
   1411c:	pop	{r4, r5, fp, pc}
   14120:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14124:	add	fp, sp, #24
   14128:	mov	r8, r1
   1412c:	ldr	r6, [r1]
   14130:	add	r1, r6, r6, asr #1
   14134:	cmp	r1, r6
   14138:	mvnvs	r1, #-2147483648	; 0x80000000
   1413c:	cmp	r1, r3
   14140:	mov	r5, r1
   14144:	movgt	r5, r3
   14148:	cmn	r3, #1
   1414c:	movle	r5, r1
   14150:	ldr	r4, [fp, #8]
   14154:	cmn	r4, #1
   14158:	ble	14180 <__mempcpy_chk@plt+0x3130>
   1415c:	cmp	r4, #0
   14160:	beq	141d4 <__mempcpy_chk@plt+0x3184>
   14164:	cmn	r5, #1
   14168:	ble	141a8 <__mempcpy_chk@plt+0x3158>
   1416c:	mvn	r7, #-2147483648	; 0x80000000
   14170:	udiv	r1, r7, r4
   14174:	cmp	r1, r5
   14178:	bge	141d4 <__mempcpy_chk@plt+0x3184>
   1417c:	b	141e4 <__mempcpy_chk@plt+0x3194>
   14180:	cmn	r5, #1
   14184:	ble	141c4 <__mempcpy_chk@plt+0x3174>
   14188:	cmn	r4, #1
   1418c:	beq	141d4 <__mempcpy_chk@plt+0x3184>
   14190:	mov	r1, #-2147483648	; 0x80000000
   14194:	sdiv	r1, r1, r4
   14198:	mvn	r7, #-2147483648	; 0x80000000
   1419c:	cmp	r1, r5
   141a0:	bge	141d4 <__mempcpy_chk@plt+0x3184>
   141a4:	b	141e4 <__mempcpy_chk@plt+0x3194>
   141a8:	beq	141d4 <__mempcpy_chk@plt+0x3184>
   141ac:	mov	r1, #-2147483648	; 0x80000000
   141b0:	sdiv	r1, r1, r5
   141b4:	mvn	r7, #-2147483648	; 0x80000000
   141b8:	cmp	r1, r4
   141bc:	bge	141d4 <__mempcpy_chk@plt+0x3184>
   141c0:	b	141e4 <__mempcpy_chk@plt+0x3194>
   141c4:	mvn	r7, #-2147483648	; 0x80000000
   141c8:	sdiv	r1, r7, r4
   141cc:	cmp	r5, r1
   141d0:	blt	141e4 <__mempcpy_chk@plt+0x3194>
   141d4:	mul	r1, r5, r4
   141d8:	mov	r7, #64	; 0x40
   141dc:	cmp	r1, #63	; 0x3f
   141e0:	bgt	141ec <__mempcpy_chk@plt+0x319c>
   141e4:	sdiv	r5, r7, r4
   141e8:	mul	r1, r5, r4
   141ec:	cmp	r0, #0
   141f0:	moveq	r7, #0
   141f4:	streq	r7, [r8]
   141f8:	sub	r7, r5, r6
   141fc:	cmp	r7, r2
   14200:	bge	142ac <__mempcpy_chk@plt+0x325c>
   14204:	add	r5, r6, r2
   14208:	mov	r1, #0
   1420c:	cmp	r5, r3
   14210:	mov	r2, #0
   14214:	movwgt	r2, #1
   14218:	cmn	r3, #1
   1421c:	movwgt	r1, #1
   14220:	cmp	r5, r6
   14224:	bvs	14294 <__mempcpy_chk@plt+0x3244>
   14228:	ands	r1, r1, r2
   1422c:	bne	14294 <__mempcpy_chk@plt+0x3244>
   14230:	cmn	r4, #1
   14234:	ble	1425c <__mempcpy_chk@plt+0x320c>
   14238:	cmp	r4, #0
   1423c:	beq	142a8 <__mempcpy_chk@plt+0x3258>
   14240:	cmn	r5, #1
   14244:	ble	14280 <__mempcpy_chk@plt+0x3230>
   14248:	mvn	r1, #-2147483648	; 0x80000000
   1424c:	udiv	r1, r1, r4
   14250:	cmp	r1, r5
   14254:	bge	142a8 <__mempcpy_chk@plt+0x3258>
   14258:	b	14294 <__mempcpy_chk@plt+0x3244>
   1425c:	cmn	r5, #1
   14260:	ble	14298 <__mempcpy_chk@plt+0x3248>
   14264:	cmn	r4, #1
   14268:	beq	142a8 <__mempcpy_chk@plt+0x3258>
   1426c:	mov	r1, #-2147483648	; 0x80000000
   14270:	sdiv	r1, r1, r4
   14274:	cmp	r1, r5
   14278:	bge	142a8 <__mempcpy_chk@plt+0x3258>
   1427c:	b	14294 <__mempcpy_chk@plt+0x3244>
   14280:	beq	142a8 <__mempcpy_chk@plt+0x3258>
   14284:	mov	r1, #-2147483648	; 0x80000000
   14288:	sdiv	r1, r1, r5
   1428c:	cmp	r1, r4
   14290:	bge	142a8 <__mempcpy_chk@plt+0x3258>
   14294:	bl	14390 <__mempcpy_chk@plt+0x3340>
   14298:	mvn	r1, #-2147483648	; 0x80000000
   1429c:	sdiv	r1, r1, r4
   142a0:	cmp	r5, r1
   142a4:	blt	14294 <__mempcpy_chk@plt+0x3244>
   142a8:	mul	r1, r5, r4
   142ac:	bl	14048 <__mempcpy_chk@plt+0x2ff8>
   142b0:	str	r5, [r8]
   142b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   142b8:	mov	r1, #1
   142bc:	b	142c0 <__mempcpy_chk@plt+0x3270>
   142c0:	push	{fp, lr}
   142c4:	mov	fp, sp
   142c8:	bl	143d4 <__mempcpy_chk@plt+0x3384>
   142cc:	pop	{fp, lr}
   142d0:	b	1401c <__mempcpy_chk@plt+0x2fcc>
   142d4:	mov	r1, #1
   142d8:	b	142dc <__mempcpy_chk@plt+0x328c>
   142dc:	push	{fp, lr}
   142e0:	mov	fp, sp
   142e4:	bl	14ab4 <__mempcpy_chk@plt+0x3a64>
   142e8:	pop	{fp, lr}
   142ec:	b	1401c <__mempcpy_chk@plt+0x2fcc>
   142f0:	push	{r4, r5, fp, lr}
   142f4:	add	fp, sp, #8
   142f8:	mov	r4, r1
   142fc:	mov	r5, r0
   14300:	mov	r0, r1
   14304:	bl	14008 <__mempcpy_chk@plt+0x2fb8>
   14308:	mov	r1, r5
   1430c:	mov	r2, r4
   14310:	pop	{r4, r5, fp, lr}
   14314:	b	10e34 <memcpy@plt>
   14318:	push	{r4, r5, fp, lr}
   1431c:	add	fp, sp, #8
   14320:	mov	r4, r1
   14324:	mov	r5, r0
   14328:	mov	r0, r1
   1432c:	bl	14030 <__mempcpy_chk@plt+0x2fe0>
   14330:	mov	r1, r5
   14334:	mov	r2, r4
   14338:	pop	{r4, r5, fp, lr}
   1433c:	b	10e34 <memcpy@plt>
   14340:	push	{r4, r5, fp, lr}
   14344:	add	fp, sp, #8
   14348:	mov	r4, r1
   1434c:	mov	r5, r0
   14350:	add	r0, r1, #1
   14354:	bl	14030 <__mempcpy_chk@plt+0x2fe0>
   14358:	mov	r1, #0
   1435c:	strb	r1, [r0, r4]
   14360:	mov	r1, r5
   14364:	mov	r2, r4
   14368:	pop	{r4, r5, fp, lr}
   1436c:	b	10e34 <memcpy@plt>
   14370:	push	{r4, sl, fp, lr}
   14374:	add	fp, sp, #8
   14378:	mov	r4, r0
   1437c:	bl	10f6c <strlen@plt>
   14380:	add	r1, r0, #1
   14384:	mov	r0, r4
   14388:	pop	{r4, sl, fp, lr}
   1438c:	b	142f0 <__mempcpy_chk@plt+0x32a0>
   14390:	push	{fp, lr}
   14394:	mov	fp, sp
   14398:	movw	r0, #24812	; 0x60ec
   1439c:	movt	r0, #2
   143a0:	ldr	r4, [r0]
   143a4:	movw	r1, #22336	; 0x5740
   143a8:	movt	r1, #1
   143ac:	mov	r0, #0
   143b0:	mov	r2, #5
   143b4:	bl	10e64 <dcgettext@plt>
   143b8:	mov	r3, r0
   143bc:	movw	r2, #21231	; 0x52ef
   143c0:	movt	r2, #1
   143c4:	mov	r0, r4
   143c8:	mov	r1, #0
   143cc:	bl	10ee8 <error@plt>
   143d0:	bl	11038 <abort@plt>
   143d4:	clz	r2, r1
   143d8:	lsr	r2, r2, #5
   143dc:	clz	r3, r0
   143e0:	lsr	r3, r3, #5
   143e4:	orrs	r2, r3, r2
   143e8:	movwne	r1, #1
   143ec:	movwne	r0, #1
   143f0:	cmp	r1, #0
   143f4:	beq	14424 <__mempcpy_chk@plt+0x33d4>
   143f8:	mvn	r2, #-2147483648	; 0x80000000
   143fc:	udiv	r2, r2, r1
   14400:	cmp	r2, r0
   14404:	bcs	14424 <__mempcpy_chk@plt+0x33d4>
   14408:	push	{fp, lr}
   1440c:	mov	fp, sp
   14410:	bl	10f78 <__errno_location@plt>
   14414:	mov	r1, #12
   14418:	str	r1, [r0]
   1441c:	mov	r0, #0
   14420:	pop	{fp, pc}
   14424:	b	10dec <calloc@plt>
   14428:	cmp	r0, #0
   1442c:	movweq	r0, #1
   14430:	cmn	r0, #1
   14434:	ble	1443c <__mempcpy_chk@plt+0x33ec>
   14438:	b	10f0c <malloc@plt>
   1443c:	push	{fp, lr}
   14440:	mov	fp, sp
   14444:	bl	10f78 <__errno_location@plt>
   14448:	mov	r1, #12
   1444c:	str	r1, [r0]
   14450:	mov	r0, #0
   14454:	pop	{fp, pc}
   14458:	push	{fp, lr}
   1445c:	mov	fp, sp
   14460:	cmp	r0, #0
   14464:	beq	14480 <__mempcpy_chk@plt+0x3430>
   14468:	cmp	r1, #0
   1446c:	beq	1448c <__mempcpy_chk@plt+0x343c>
   14470:	cmn	r1, #1
   14474:	ble	14498 <__mempcpy_chk@plt+0x3448>
   14478:	pop	{fp, lr}
   1447c:	b	10e7c <realloc@plt>
   14480:	mov	r0, r1
   14484:	pop	{fp, lr}
   14488:	b	14428 <__mempcpy_chk@plt+0x33d8>
   1448c:	bl	11d98 <__mempcpy_chk@plt+0xd48>
   14490:	mov	r0, #0
   14494:	pop	{fp, pc}
   14498:	bl	10f78 <__errno_location@plt>
   1449c:	mov	r1, #12
   144a0:	str	r1, [r0]
   144a4:	mov	r0, #0
   144a8:	pop	{fp, pc}
   144ac:	sub	r0, r0, #1
   144b0:	ldrb	r3, [r0, #1]!
   144b4:	cmp	r3, #47	; 0x2f
   144b8:	beq	144b0 <__mempcpy_chk@plt+0x3460>
   144bc:	mov	r2, #0
   144c0:	mov	r1, r0
   144c4:	b	144d0 <__mempcpy_chk@plt+0x3480>
   144c8:	mov	r2, #1
   144cc:	ldrb	r3, [r1, #1]!
   144d0:	uxtb	r3, r3
   144d4:	cmp	r3, #47	; 0x2f
   144d8:	beq	144c8 <__mempcpy_chk@plt+0x3478>
   144dc:	cmp	r3, #0
   144e0:	bxeq	lr
   144e4:	tst	r2, #1
   144e8:	movne	r0, r1
   144ec:	mov	r2, #0
   144f0:	ldrb	r3, [r1, #1]!
   144f4:	b	144d0 <__mempcpy_chk@plt+0x3480>
   144f8:	push	{r4, sl, fp, lr}
   144fc:	add	fp, sp, #8
   14500:	mov	r4, r0
   14504:	bl	10f6c <strlen@plt>
   14508:	mov	r1, r0
   1450c:	sub	r2, r4, #1
   14510:	mov	r0, r1
   14514:	cmp	r1, #2
   14518:	bcc	1452c <__mempcpy_chk@plt+0x34dc>
   1451c:	ldrb	r3, [r2, r0]
   14520:	sub	r1, r0, #1
   14524:	cmp	r3, #47	; 0x2f
   14528:	beq	14510 <__mempcpy_chk@plt+0x34c0>
   1452c:	pop	{r4, sl, fp, pc}
   14530:	mov	r1, r0
   14534:	sub	r2, r0, #65	; 0x41
   14538:	mov	r0, #1
   1453c:	cmp	r2, #26
   14540:	subcs	r2, r1, #97	; 0x61
   14544:	cmpcs	r2, #26
   14548:	bcs	14550 <__mempcpy_chk@plt+0x3500>
   1454c:	bx	lr
   14550:	sub	r1, r1, #48	; 0x30
   14554:	cmp	r1, #10
   14558:	movcs	r0, #0
   1455c:	bx	lr
   14560:	mov	r1, r0
   14564:	sub	r2, r0, #65	; 0x41
   14568:	mov	r0, #1
   1456c:	cmp	r2, #26
   14570:	subcs	r1, r1, #97	; 0x61
   14574:	cmpcs	r1, #26
   14578:	movcs	r0, #0
   1457c:	bx	lr
   14580:	mov	r1, #0
   14584:	cmp	r0, #128	; 0x80
   14588:	movwcc	r1, #1
   1458c:	mov	r0, r1
   14590:	bx	lr
   14594:	sub	r1, r0, #9
   14598:	clz	r1, r1
   1459c:	lsr	r1, r1, #5
   145a0:	sub	r0, r0, #32
   145a4:	clz	r0, r0
   145a8:	lsr	r0, r0, #5
   145ac:	orr	r0, r0, r1
   145b0:	bx	lr
   145b4:	mov	r1, r0
   145b8:	mov	r0, #1
   145bc:	cmp	r1, #32
   145c0:	bxcc	lr
   145c4:	cmp	r1, #127	; 0x7f
   145c8:	movne	r0, #0
   145cc:	bx	lr
   145d0:	sub	r1, r0, #48	; 0x30
   145d4:	mov	r0, #0
   145d8:	cmp	r1, #10
   145dc:	movwcc	r0, #1
   145e0:	bx	lr
   145e4:	sub	r1, r0, #33	; 0x21
   145e8:	mov	r0, #0
   145ec:	cmp	r1, #94	; 0x5e
   145f0:	movwcc	r0, #1
   145f4:	bx	lr
   145f8:	sub	r1, r0, #97	; 0x61
   145fc:	mov	r0, #0
   14600:	cmp	r1, #26
   14604:	movwcc	r0, #1
   14608:	bx	lr
   1460c:	sub	r1, r0, #32
   14610:	mov	r0, #0
   14614:	cmp	r1, #95	; 0x5f
   14618:	movwcc	r0, #1
   1461c:	bx	lr
   14620:	sub	r1, r0, #33	; 0x21
   14624:	cmp	r1, #93	; 0x5d
   14628:	bhi	147b4 <__mempcpy_chk@plt+0x3764>
   1462c:	mov	r0, #1
   14630:	add	r2, pc, #0
   14634:	ldr	pc, [r2, r1, lsl #2]
   14638:			; <UNDEFINED> instruction: 0x000147b0
   1463c:			; <UNDEFINED> instruction: 0x000147b0
   14640:			; <UNDEFINED> instruction: 0x000147b0
   14644:			; <UNDEFINED> instruction: 0x000147b0
   14648:			; <UNDEFINED> instruction: 0x000147b0
   1464c:			; <UNDEFINED> instruction: 0x000147b0
   14650:			; <UNDEFINED> instruction: 0x000147b0
   14654:			; <UNDEFINED> instruction: 0x000147b0
   14658:			; <UNDEFINED> instruction: 0x000147b0
   1465c:			; <UNDEFINED> instruction: 0x000147b0
   14660:			; <UNDEFINED> instruction: 0x000147b0
   14664:			; <UNDEFINED> instruction: 0x000147b0
   14668:			; <UNDEFINED> instruction: 0x000147b0
   1466c:			; <UNDEFINED> instruction: 0x000147b0
   14670:			; <UNDEFINED> instruction: 0x000147b0
   14674:			; <UNDEFINED> instruction: 0x000147b4
   14678:			; <UNDEFINED> instruction: 0x000147b4
   1467c:			; <UNDEFINED> instruction: 0x000147b4
   14680:			; <UNDEFINED> instruction: 0x000147b4
   14684:			; <UNDEFINED> instruction: 0x000147b4
   14688:			; <UNDEFINED> instruction: 0x000147b4
   1468c:			; <UNDEFINED> instruction: 0x000147b4
   14690:			; <UNDEFINED> instruction: 0x000147b4
   14694:			; <UNDEFINED> instruction: 0x000147b4
   14698:			; <UNDEFINED> instruction: 0x000147b4
   1469c:			; <UNDEFINED> instruction: 0x000147b0
   146a0:			; <UNDEFINED> instruction: 0x000147b0
   146a4:			; <UNDEFINED> instruction: 0x000147b0
   146a8:			; <UNDEFINED> instruction: 0x000147b0
   146ac:			; <UNDEFINED> instruction: 0x000147b0
   146b0:			; <UNDEFINED> instruction: 0x000147b0
   146b4:			; <UNDEFINED> instruction: 0x000147b0
   146b8:			; <UNDEFINED> instruction: 0x000147b4
   146bc:			; <UNDEFINED> instruction: 0x000147b4
   146c0:			; <UNDEFINED> instruction: 0x000147b4
   146c4:			; <UNDEFINED> instruction: 0x000147b4
   146c8:			; <UNDEFINED> instruction: 0x000147b4
   146cc:			; <UNDEFINED> instruction: 0x000147b4
   146d0:			; <UNDEFINED> instruction: 0x000147b4
   146d4:			; <UNDEFINED> instruction: 0x000147b4
   146d8:			; <UNDEFINED> instruction: 0x000147b4
   146dc:			; <UNDEFINED> instruction: 0x000147b4
   146e0:			; <UNDEFINED> instruction: 0x000147b4
   146e4:			; <UNDEFINED> instruction: 0x000147b4
   146e8:			; <UNDEFINED> instruction: 0x000147b4
   146ec:			; <UNDEFINED> instruction: 0x000147b4
   146f0:			; <UNDEFINED> instruction: 0x000147b4
   146f4:			; <UNDEFINED> instruction: 0x000147b4
   146f8:			; <UNDEFINED> instruction: 0x000147b4
   146fc:			; <UNDEFINED> instruction: 0x000147b4
   14700:			; <UNDEFINED> instruction: 0x000147b4
   14704:			; <UNDEFINED> instruction: 0x000147b4
   14708:			; <UNDEFINED> instruction: 0x000147b4
   1470c:			; <UNDEFINED> instruction: 0x000147b4
   14710:			; <UNDEFINED> instruction: 0x000147b4
   14714:			; <UNDEFINED> instruction: 0x000147b4
   14718:			; <UNDEFINED> instruction: 0x000147b4
   1471c:			; <UNDEFINED> instruction: 0x000147b4
   14720:			; <UNDEFINED> instruction: 0x000147b0
   14724:			; <UNDEFINED> instruction: 0x000147b0
   14728:			; <UNDEFINED> instruction: 0x000147b0
   1472c:			; <UNDEFINED> instruction: 0x000147b0
   14730:			; <UNDEFINED> instruction: 0x000147b0
   14734:			; <UNDEFINED> instruction: 0x000147b0
   14738:			; <UNDEFINED> instruction: 0x000147b4
   1473c:			; <UNDEFINED> instruction: 0x000147b4
   14740:			; <UNDEFINED> instruction: 0x000147b4
   14744:			; <UNDEFINED> instruction: 0x000147b4
   14748:			; <UNDEFINED> instruction: 0x000147b4
   1474c:			; <UNDEFINED> instruction: 0x000147b4
   14750:			; <UNDEFINED> instruction: 0x000147b4
   14754:			; <UNDEFINED> instruction: 0x000147b4
   14758:			; <UNDEFINED> instruction: 0x000147b4
   1475c:			; <UNDEFINED> instruction: 0x000147b4
   14760:			; <UNDEFINED> instruction: 0x000147b4
   14764:			; <UNDEFINED> instruction: 0x000147b4
   14768:			; <UNDEFINED> instruction: 0x000147b4
   1476c:			; <UNDEFINED> instruction: 0x000147b4
   14770:			; <UNDEFINED> instruction: 0x000147b4
   14774:			; <UNDEFINED> instruction: 0x000147b4
   14778:			; <UNDEFINED> instruction: 0x000147b4
   1477c:			; <UNDEFINED> instruction: 0x000147b4
   14780:			; <UNDEFINED> instruction: 0x000147b4
   14784:			; <UNDEFINED> instruction: 0x000147b4
   14788:			; <UNDEFINED> instruction: 0x000147b4
   1478c:			; <UNDEFINED> instruction: 0x000147b4
   14790:			; <UNDEFINED> instruction: 0x000147b4
   14794:			; <UNDEFINED> instruction: 0x000147b4
   14798:			; <UNDEFINED> instruction: 0x000147b4
   1479c:			; <UNDEFINED> instruction: 0x000147b4
   147a0:			; <UNDEFINED> instruction: 0x000147b0
   147a4:			; <UNDEFINED> instruction: 0x000147b0
   147a8:			; <UNDEFINED> instruction: 0x000147b0
   147ac:			; <UNDEFINED> instruction: 0x000147b0
   147b0:	bx	lr
   147b4:	mov	r0, #0
   147b8:	bx	lr
   147bc:	sub	r0, r0, #9
   147c0:	cmp	r0, #23
   147c4:	movhi	r0, #0
   147c8:	bxhi	lr
   147cc:	bic	r0, r0, #-16777216	; 0xff000000
   147d0:	movw	r1, #31
   147d4:	movt	r1, #128	; 0x80
   147d8:	mov	r2, #1
   147dc:	and	r0, r2, r1, lsr r0
   147e0:	bx	lr
   147e4:	sub	r1, r0, #65	; 0x41
   147e8:	mov	r0, #0
   147ec:	cmp	r1, #26
   147f0:	movwcc	r0, #1
   147f4:	bx	lr
   147f8:	mov	r1, r0
   147fc:	sub	r2, r0, #48	; 0x30
   14800:	mov	r0, #1
   14804:	cmp	r2, #22
   14808:	bhi	14820 <__mempcpy_chk@plt+0x37d0>
   1480c:	mov	ip, #1
   14810:	movw	r3, #1023	; 0x3ff
   14814:	movt	r3, #126	; 0x7e
   14818:	tst	r3, ip, lsl r2
   1481c:	bxne	lr
   14820:	sub	r1, r1, #97	; 0x61
   14824:	cmp	r1, #6
   14828:	movcs	r0, #0
   1482c:	bxcs	lr
   14830:	bx	lr
   14834:	sub	r1, r0, #65	; 0x41
   14838:	cmp	r1, #26
   1483c:	addcc	r0, r0, #32
   14840:	bx	lr
   14844:	sub	r1, r0, #97	; 0x61
   14848:	cmp	r1, #26
   1484c:	subcc	r0, r0, #32
   14850:	bx	lr
   14854:	push	{r4, r5, r6, sl, fp, lr}
   14858:	add	fp, sp, #16
   1485c:	mov	r4, r0
   14860:	bl	10ec4 <__fpending@plt>
   14864:	mov	r5, r0
   14868:	mov	r0, r4
   1486c:	bl	10ed0 <ferror_unlocked@plt>
   14870:	mov	r6, r0
   14874:	mov	r0, r4
   14878:	bl	148d8 <__mempcpy_chk@plt+0x3888>
   1487c:	cmp	r6, #0
   14880:	beq	148a4 <__mempcpy_chk@plt+0x3854>
   14884:	mvn	r4, #0
   14888:	cmp	r0, #0
   1488c:	bne	148d0 <__mempcpy_chk@plt+0x3880>
   14890:	bl	10f78 <__errno_location@plt>
   14894:	mov	r1, #0
   14898:	str	r1, [r0]
   1489c:	mov	r0, r4
   148a0:	pop	{r4, r5, r6, sl, fp, pc}
   148a4:	cmp	r0, #0
   148a8:	mov	r4, r0
   148ac:	mvnne	r4, #0
   148b0:	cmp	r5, #0
   148b4:	bne	148d0 <__mempcpy_chk@plt+0x3880>
   148b8:	cmp	r0, #0
   148bc:	beq	148d0 <__mempcpy_chk@plt+0x3880>
   148c0:	bl	10f78 <__errno_location@plt>
   148c4:	ldr	r0, [r0]
   148c8:	subs	r4, r0, #9
   148cc:	mvnne	r4, #0
   148d0:	mov	r0, r4
   148d4:	pop	{r4, r5, r6, sl, fp, pc}
   148d8:	push	{r4, r5, fp, lr}
   148dc:	add	fp, sp, #8
   148e0:	sub	sp, sp, #8
   148e4:	mov	r4, r0
   148e8:	bl	10fa8 <fileno@plt>
   148ec:	cmn	r0, #1
   148f0:	ble	14968 <__mempcpy_chk@plt+0x3918>
   148f4:	mov	r0, r4
   148f8:	bl	10f24 <__freading@plt>
   148fc:	cmp	r0, #0
   14900:	beq	1492c <__mempcpy_chk@plt+0x38dc>
   14904:	mov	r0, r4
   14908:	bl	10fa8 <fileno@plt>
   1490c:	mov	r1, #1
   14910:	str	r1, [sp]
   14914:	mov	r2, #0
   14918:	mov	r3, #0
   1491c:	bl	10eac <lseek64@plt>
   14920:	and	r0, r0, r1
   14924:	cmn	r0, #1
   14928:	beq	14968 <__mempcpy_chk@plt+0x3918>
   1492c:	mov	r0, r4
   14930:	bl	14978 <__mempcpy_chk@plt+0x3928>
   14934:	cmp	r0, #0
   14938:	beq	14968 <__mempcpy_chk@plt+0x3918>
   1493c:	bl	10f78 <__errno_location@plt>
   14940:	ldr	r5, [r0]
   14944:	mov	r0, r4
   14948:	bl	10fc0 <fclose@plt>
   1494c:	cmp	r5, #0
   14950:	beq	14960 <__mempcpy_chk@plt+0x3910>
   14954:	bl	10f78 <__errno_location@plt>
   14958:	str	r5, [r0]
   1495c:	mvn	r0, #0
   14960:	sub	sp, fp, #8
   14964:	pop	{r4, r5, fp, pc}
   14968:	mov	r0, r4
   1496c:	sub	sp, fp, #8
   14970:	pop	{r4, r5, fp, lr}
   14974:	b	10fc0 <fclose@plt>
   14978:	push	{r4, sl, fp, lr}
   1497c:	add	fp, sp, #8
   14980:	mov	r4, r0
   14984:	cmp	r0, #0
   14988:	beq	149a0 <__mempcpy_chk@plt+0x3950>
   1498c:	mov	r0, r4
   14990:	bl	10f24 <__freading@plt>
   14994:	cmp	r0, #0
   14998:	movne	r0, r4
   1499c:	blne	149ac <__mempcpy_chk@plt+0x395c>
   149a0:	mov	r0, r4
   149a4:	pop	{r4, sl, fp, lr}
   149a8:	b	10e10 <fflush@plt>
   149ac:	push	{fp, lr}
   149b0:	mov	fp, sp
   149b4:	sub	sp, sp, #8
   149b8:	ldrb	r1, [r0, #1]
   149bc:	tst	r1, #1
   149c0:	beq	149d8 <__mempcpy_chk@plt+0x3988>
   149c4:	mov	r1, #1
   149c8:	str	r1, [sp]
   149cc:	mov	r2, #0
   149d0:	mov	r3, #0
   149d4:	bl	149e0 <__mempcpy_chk@plt+0x3990>
   149d8:	mov	sp, fp
   149dc:	pop	{fp, pc}
   149e0:	push	{r4, r5, r6, r7, fp, lr}
   149e4:	add	fp, sp, #16
   149e8:	sub	sp, sp, #8
   149ec:	mov	r5, r3
   149f0:	mov	r6, r2
   149f4:	mov	r4, r0
   149f8:	ldr	r0, [r0, #4]
   149fc:	ldr	r1, [r4, #8]
   14a00:	cmp	r1, r0
   14a04:	bne	14a20 <__mempcpy_chk@plt+0x39d0>
   14a08:	ldrd	r0, [r4, #16]
   14a0c:	cmp	r1, r0
   14a10:	bne	14a20 <__mempcpy_chk@plt+0x39d0>
   14a14:	ldr	r0, [r4, #36]	; 0x24
   14a18:	cmp	r0, #0
   14a1c:	beq	14a38 <__mempcpy_chk@plt+0x39e8>
   14a20:	mov	r0, r4
   14a24:	mov	r2, r6
   14a28:	mov	r3, r5
   14a2c:	sub	sp, fp, #16
   14a30:	pop	{r4, r5, r6, r7, fp, lr}
   14a34:	b	10fcc <fseeko64@plt>
   14a38:	ldr	r7, [fp, #8]
   14a3c:	mov	r0, r4
   14a40:	bl	10fa8 <fileno@plt>
   14a44:	str	r7, [sp]
   14a48:	mov	r2, r6
   14a4c:	mov	r3, r5
   14a50:	bl	10eac <lseek64@plt>
   14a54:	and	r2, r0, r1
   14a58:	cmn	r2, #1
   14a5c:	beq	14a7c <__mempcpy_chk@plt+0x3a2c>
   14a60:	strd	r0, [r4, #80]	; 0x50
   14a64:	ldr	r0, [r4]
   14a68:	bic	r0, r0, #16
   14a6c:	str	r0, [r4]
   14a70:	mov	r0, #0
   14a74:	sub	sp, fp, #16
   14a78:	pop	{r4, r5, r6, r7, fp, pc}
   14a7c:	mvn	r0, #0
   14a80:	sub	sp, fp, #16
   14a84:	pop	{r4, r5, r6, r7, fp, pc}
   14a88:	push	{fp, lr}
   14a8c:	mov	fp, sp
   14a90:	bl	10f78 <__errno_location@plt>
   14a94:	mov	r1, #12
   14a98:	str	r1, [r0]
   14a9c:	mov	r0, #0
   14aa0:	pop	{fp, pc}
   14aa4:	b	14428 <__mempcpy_chk@plt+0x33d8>
   14aa8:	cmp	r1, #0
   14aac:	orreq	r1, r1, #1
   14ab0:	b	14458 <__mempcpy_chk@plt+0x3408>
   14ab4:	b	143d4 <__mempcpy_chk@plt+0x3384>
   14ab8:	clz	r3, r2
   14abc:	lsr	ip, r3, #5
   14ac0:	clz	r3, r1
   14ac4:	lsr	r3, r3, #5
   14ac8:	orrs	r3, r3, ip
   14acc:	movwne	r1, #1
   14ad0:	movwne	r2, #1
   14ad4:	b	14b74 <__mempcpy_chk@plt+0x3b24>
   14ad8:	push	{fp, lr}
   14adc:	mov	fp, sp
   14ae0:	mov	r0, #14
   14ae4:	bl	10ffc <nl_langinfo@plt>
   14ae8:	movw	r1, #19911	; 0x4dc7
   14aec:	movt	r1, #1
   14af0:	cmp	r0, #0
   14af4:	movne	r1, r0
   14af8:	ldrb	r2, [r1]
   14afc:	movw	r0, #22353	; 0x5751
   14b00:	movt	r0, #1
   14b04:	cmp	r2, #0
   14b08:	movne	r0, r1
   14b0c:	pop	{fp, pc}
   14b10:	push	{r4, r5, r6, r7, fp, lr}
   14b14:	add	fp, sp, #16
   14b18:	sub	sp, sp, #8
   14b1c:	mov	r7, r2
   14b20:	mov	r4, r1
   14b24:	add	r5, sp, #4
   14b28:	cmp	r0, #0
   14b2c:	movne	r5, r0
   14b30:	mov	r0, r5
   14b34:	bl	10edc <mbrtowc@plt>
   14b38:	mov	r6, r0
   14b3c:	cmp	r7, #0
   14b40:	beq	14b68 <__mempcpy_chk@plt+0x3b18>
   14b44:	cmn	r6, #2
   14b48:	bcc	14b68 <__mempcpy_chk@plt+0x3b18>
   14b4c:	mov	r0, #0
   14b50:	bl	14bb0 <__mempcpy_chk@plt+0x3b60>
   14b54:	cmp	r0, #0
   14b58:	bne	14b68 <__mempcpy_chk@plt+0x3b18>
   14b5c:	ldrb	r0, [r4]
   14b60:	str	r0, [r5]
   14b64:	mov	r6, #1
   14b68:	mov	r0, r6
   14b6c:	sub	sp, fp, #16
   14b70:	pop	{r4, r5, r6, r7, fp, pc}
   14b74:	cmp	r2, #0
   14b78:	beq	14ba8 <__mempcpy_chk@plt+0x3b58>
   14b7c:	mvn	r3, #0
   14b80:	udiv	r3, r3, r2
   14b84:	cmp	r3, r1
   14b88:	bcs	14ba8 <__mempcpy_chk@plt+0x3b58>
   14b8c:	push	{fp, lr}
   14b90:	mov	fp, sp
   14b94:	bl	10f78 <__errno_location@plt>
   14b98:	mov	r1, #12
   14b9c:	str	r1, [r0]
   14ba0:	mov	r0, #0
   14ba4:	pop	{fp, pc}
   14ba8:	mul	r1, r2, r1
   14bac:	b	14458 <__mempcpy_chk@plt+0x3408>
   14bb0:	push	{r4, sl, fp, lr}
   14bb4:	add	fp, sp, #8
   14bb8:	sub	sp, sp, #264	; 0x108
   14bbc:	add	r1, sp, #7
   14bc0:	movw	r2, #257	; 0x101
   14bc4:	bl	14c1c <__mempcpy_chk@plt+0x3bcc>
   14bc8:	mov	r4, #0
   14bcc:	cmp	r0, #0
   14bd0:	bne	14c10 <__mempcpy_chk@plt+0x3bc0>
   14bd4:	add	r0, sp, #7
   14bd8:	movw	r1, #22359	; 0x5757
   14bdc:	movt	r1, #1
   14be0:	mov	r2, #2
   14be4:	bl	10f60 <bcmp@plt>
   14be8:	cmp	r0, #0
   14bec:	beq	14c10 <__mempcpy_chk@plt+0x3bc0>
   14bf0:	add	r0, sp, #7
   14bf4:	movw	r1, #22361	; 0x5759
   14bf8:	movt	r1, #1
   14bfc:	mov	r2, #6
   14c00:	bl	10f60 <bcmp@plt>
   14c04:	mov	r4, r0
   14c08:	cmp	r0, #0
   14c0c:	movwne	r4, #1
   14c10:	mov	r0, r4
   14c14:	sub	sp, fp, #8
   14c18:	pop	{r4, sl, fp, pc}
   14c1c:	b	14c20 <__mempcpy_chk@plt+0x3bd0>
   14c20:	push	{r4, r5, r6, r7, fp, lr}
   14c24:	add	fp, sp, #16
   14c28:	mov	r6, r2
   14c2c:	mov	r4, r1
   14c30:	bl	14cb8 <__mempcpy_chk@plt+0x3c68>
   14c34:	cmp	r0, #0
   14c38:	beq	14c68 <__mempcpy_chk@plt+0x3c18>
   14c3c:	mov	r7, r0
   14c40:	bl	10f6c <strlen@plt>
   14c44:	cmp	r0, r6
   14c48:	bcs	14c84 <__mempcpy_chk@plt+0x3c34>
   14c4c:	add	r2, r0, #1
   14c50:	mov	r0, r4
   14c54:	mov	r1, r7
   14c58:	bl	10e34 <memcpy@plt>
   14c5c:	mov	r5, #0
   14c60:	mov	r0, r5
   14c64:	pop	{r4, r5, r6, r7, fp, pc}
   14c68:	mov	r5, #22
   14c6c:	cmp	r6, #0
   14c70:	beq	14cac <__mempcpy_chk@plt+0x3c5c>
   14c74:	mov	r0, #0
   14c78:	strb	r0, [r4]
   14c7c:	mov	r0, r5
   14c80:	pop	{r4, r5, r6, r7, fp, pc}
   14c84:	mov	r5, #34	; 0x22
   14c88:	cmp	r6, #0
   14c8c:	beq	14cac <__mempcpy_chk@plt+0x3c5c>
   14c90:	sub	r6, r6, #1
   14c94:	mov	r0, r4
   14c98:	mov	r1, r7
   14c9c:	mov	r2, r6
   14ca0:	bl	10e34 <memcpy@plt>
   14ca4:	mov	r0, #0
   14ca8:	strb	r0, [r4, r6]
   14cac:	mov	r0, r5
   14cb0:	pop	{r4, r5, r6, r7, fp, pc}
   14cb4:	b	14cb8 <__mempcpy_chk@plt+0x3c68>
   14cb8:	mov	r1, #0
   14cbc:	b	10fe4 <setlocale@plt>
   14cc0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14cc4:	mov	r7, r0
   14cc8:	ldr	r6, [pc, #72]	; 14d18 <__mempcpy_chk@plt+0x3cc8>
   14ccc:	ldr	r5, [pc, #72]	; 14d1c <__mempcpy_chk@plt+0x3ccc>
   14cd0:	add	r6, pc, r6
   14cd4:	add	r5, pc, r5
   14cd8:	sub	r6, r6, r5
   14cdc:	mov	r8, r1
   14ce0:	mov	r9, r2
   14ce4:	bl	10dcc <calloc@plt-0x20>
   14ce8:	asrs	r6, r6, #2
   14cec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   14cf0:	mov	r4, #0
   14cf4:	add	r4, r4, #1
   14cf8:	ldr	r3, [r5], #4
   14cfc:	mov	r2, r9
   14d00:	mov	r1, r8
   14d04:	mov	r0, r7
   14d08:	blx	r3
   14d0c:	cmp	r6, r4
   14d10:	bne	14cf4 <__mempcpy_chk@plt+0x3ca4>
   14d14:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14d18:	andeq	r1, r1, r4, lsr r2
   14d1c:	andeq	r1, r1, ip, lsr #4
   14d20:	bx	lr
   14d24:	ldr	r3, [pc, #12]	; 14d38 <__mempcpy_chk@plt+0x3ce8>
   14d28:	mov	r1, #0
   14d2c:	add	r3, pc, r3
   14d30:	ldr	r2, [r3]
   14d34:	b	10f84 <__cxa_atexit@plt>
   14d38:			; <UNDEFINED> instruction: 0x000113b0

Disassembly of section .fini:

00014d3c <.fini>:
   14d3c:	push	{r3, lr}
   14d40:	pop	{r3, pc}
