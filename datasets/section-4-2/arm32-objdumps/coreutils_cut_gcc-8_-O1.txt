
../repos/coreutils/src/cut:     file format elf32-littlearm


Disassembly of section .init:

00010d44 <.init>:
   10d44:	push	{r3, lr}
   10d48:	bl	1104c <__assert_fail@plt+0x48>
   10d4c:	pop	{r3, pc}

Disassembly of section .plt:

00010d50 <calloc@plt-0x14>:
   10d50:	push	{lr}		; (str lr, [sp, #-4]!)
   10d54:	ldr	lr, [pc, #4]	; 10d60 <calloc@plt-0x4>
   10d58:	add	lr, pc, lr
   10d5c:	ldr	pc, [lr, #8]!
   10d60:	andeq	r7, r1, r0, lsr #5

00010d64 <calloc@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #94208	; 0x17000
   10d6c:	ldr	pc, [ip, #672]!	; 0x2a0

00010d70 <fputs_unlocked@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #94208	; 0x17000
   10d78:	ldr	pc, [ip, #664]!	; 0x298

00010d7c <strcmp@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #94208	; 0x17000
   10d84:	ldr	pc, [ip, #656]!	; 0x290

00010d88 <posix_fadvise64@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #94208	; 0x17000
   10d90:	ldr	pc, [ip, #648]!	; 0x288

00010d94 <fflush@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #94208	; 0x17000
   10d9c:	ldr	pc, [ip, #640]!	; 0x280

00010da0 <memmove@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #94208	; 0x17000
   10da8:	ldr	pc, [ip, #632]!	; 0x278

00010dac <free@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #94208	; 0x17000
   10db4:	ldr	pc, [ip, #624]!	; 0x270

00010db8 <ferror@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #94208	; 0x17000
   10dc0:	ldr	pc, [ip, #616]!	; 0x268

00010dc4 <_exit@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #94208	; 0x17000
   10dcc:	ldr	pc, [ip, #608]!	; 0x260

00010dd0 <memcpy@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #94208	; 0x17000
   10dd8:	ldr	pc, [ip, #600]!	; 0x258

00010ddc <mbsinit@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #94208	; 0x17000
   10de4:	ldr	pc, [ip, #592]!	; 0x250

00010de8 <fwrite_unlocked@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #94208	; 0x17000
   10df0:	ldr	pc, [ip, #584]!	; 0x248

00010df4 <memcmp@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #94208	; 0x17000
   10dfc:	ldr	pc, [ip, #576]!	; 0x240

00010e00 <fputc_unlocked@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #94208	; 0x17000
   10e08:	ldr	pc, [ip, #568]!	; 0x238

00010e0c <dcgettext@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #94208	; 0x17000
   10e14:	ldr	pc, [ip, #560]!	; 0x230

00010e18 <realloc@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #94208	; 0x17000
   10e20:	ldr	pc, [ip, #552]!	; 0x228

00010e24 <textdomain@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #94208	; 0x17000
   10e2c:	ldr	pc, [ip, #544]!	; 0x220

00010e30 <iswprint@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #94208	; 0x17000
   10e38:	ldr	pc, [ip, #536]!	; 0x218

00010e3c <fwrite@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #94208	; 0x17000
   10e44:	ldr	pc, [ip, #528]!	; 0x210

00010e48 <lseek64@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #94208	; 0x17000
   10e50:	ldr	pc, [ip, #520]!	; 0x208

00010e54 <__ctype_get_mb_cur_max@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #94208	; 0x17000
   10e5c:	ldr	pc, [ip, #512]!	; 0x200

00010e60 <__fpending@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #94208	; 0x17000
   10e68:	ldr	pc, [ip, #504]!	; 0x1f8

00010e6c <mbrtowc@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #94208	; 0x17000
   10e74:	ldr	pc, [ip, #496]!	; 0x1f0

00010e78 <error@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #94208	; 0x17000
   10e80:	ldr	pc, [ip, #488]!	; 0x1e8

00010e84 <malloc@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #94208	; 0x17000
   10e8c:	ldr	pc, [ip, #480]!	; 0x1e0

00010e90 <__libc_start_main@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #94208	; 0x17000
   10e98:	ldr	pc, [ip, #472]!	; 0x1d8

00010e9c <__freading@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #94208	; 0x17000
   10ea4:	ldr	pc, [ip, #464]!	; 0x1d0

00010ea8 <__gmon_start__@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #94208	; 0x17000
   10eb0:	ldr	pc, [ip, #456]!	; 0x1c8

00010eb4 <getopt_long@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #94208	; 0x17000
   10ebc:	ldr	pc, [ip, #448]!	; 0x1c0

00010ec0 <__ctype_b_loc@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #94208	; 0x17000
   10ec8:	ldr	pc, [ip, #440]!	; 0x1b8

00010ecc <exit@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #94208	; 0x17000
   10ed4:	ldr	pc, [ip, #432]!	; 0x1b0

00010ed8 <strlen@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #94208	; 0x17000
   10ee0:	ldr	pc, [ip, #424]!	; 0x1a8

00010ee4 <ungetc@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #94208	; 0x17000
   10eec:	ldr	pc, [ip, #416]!	; 0x1a0

00010ef0 <__errno_location@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #94208	; 0x17000
   10ef8:	ldr	pc, [ip, #408]!	; 0x198

00010efc <__cxa_atexit@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #94208	; 0x17000
   10f04:	ldr	pc, [ip, #400]!	; 0x190

00010f08 <memset@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #94208	; 0x17000
   10f10:	ldr	pc, [ip, #392]!	; 0x188

00010f14 <fgetc@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #94208	; 0x17000
   10f1c:	ldr	pc, [ip, #384]!	; 0x180

00010f20 <__printf_chk@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #94208	; 0x17000
   10f28:	ldr	pc, [ip, #376]!	; 0x178

00010f2c <fileno@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #94208	; 0x17000
   10f34:	ldr	pc, [ip, #368]!	; 0x170

00010f38 <__fprintf_chk@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #94208	; 0x17000
   10f40:	ldr	pc, [ip, #360]!	; 0x168

00010f44 <memchr@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #94208	; 0x17000
   10f4c:	ldr	pc, [ip, #352]!	; 0x160

00010f50 <fclose@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #94208	; 0x17000
   10f58:	ldr	pc, [ip, #344]!	; 0x158

00010f5c <fseeko64@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #94208	; 0x17000
   10f64:	ldr	pc, [ip, #336]!	; 0x150

00010f68 <__fread_chk@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #94208	; 0x17000
   10f70:	ldr	pc, [ip, #328]!	; 0x148

00010f74 <__uflow@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #94208	; 0x17000
   10f7c:	ldr	pc, [ip, #320]!	; 0x140

00010f80 <__overflow@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #94208	; 0x17000
   10f88:	ldr	pc, [ip, #312]!	; 0x138

00010f8c <setlocale@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #94208	; 0x17000
   10f94:	ldr	pc, [ip, #304]!	; 0x130

00010f98 <strrchr@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #94208	; 0x17000
   10fa0:	ldr	pc, [ip, #296]!	; 0x128

00010fa4 <nl_langinfo@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #94208	; 0x17000
   10fac:	ldr	pc, [ip, #288]!	; 0x120

00010fb0 <clearerr_unlocked@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #94208	; 0x17000
   10fb8:	ldr	pc, [ip, #280]!	; 0x118

00010fbc <fopen64@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #94208	; 0x17000
   10fc4:	ldr	pc, [ip, #272]!	; 0x110

00010fc8 <qsort@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #94208	; 0x17000
   10fd0:	ldr	pc, [ip, #264]!	; 0x108

00010fd4 <bindtextdomain@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #94208	; 0x17000
   10fdc:	ldr	pc, [ip, #256]!	; 0x100

00010fe0 <strncmp@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #94208	; 0x17000
   10fe8:	ldr	pc, [ip, #248]!	; 0xf8

00010fec <abort@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #94208	; 0x17000
   10ff4:	ldr	pc, [ip, #240]!	; 0xf0

00010ff8 <strspn@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #94208	; 0x17000
   11000:	ldr	pc, [ip, #232]!	; 0xe8

00011004 <__assert_fail@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #94208	; 0x17000
   1100c:	ldr	pc, [ip, #224]!	; 0xe0

Disassembly of section .text:

00011010 <.text>:
   11010:	mov	fp, #0
   11014:	mov	lr, #0
   11018:	pop	{r1}		; (ldr r1, [sp], #4)
   1101c:	mov	r2, sp
   11020:	push	{r2}		; (str r2, [sp, #-4]!)
   11024:	push	{r0}		; (str r0, [sp, #-4]!)
   11028:	ldr	ip, [pc, #16]	; 11040 <__assert_fail@plt+0x3c>
   1102c:	push	{ip}		; (str ip, [sp, #-4]!)
   11030:	ldr	r0, [pc, #12]	; 11044 <__assert_fail@plt+0x40>
   11034:	ldr	r3, [pc, #12]	; 11048 <__assert_fail@plt+0x44>
   11038:	bl	10e90 <__libc_start_main@plt>
   1103c:	bl	10fec <abort@plt>
   11040:	strdeq	r6, [r1], -r8
   11044:	andeq	r1, r1, r8, lsl lr
   11048:	muleq	r1, r8, r6
   1104c:	ldr	r3, [pc, #20]	; 11068 <__assert_fail@plt+0x64>
   11050:	ldr	r2, [pc, #20]	; 1106c <__assert_fail@plt+0x68>
   11054:	add	r3, pc, r3
   11058:	ldr	r2, [r3, r2]
   1105c:	cmp	r2, #0
   11060:	bxeq	lr
   11064:	b	10ea8 <__gmon_start__@plt>
   11068:	andeq	r6, r1, r4, lsr #31
   1106c:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11070:	ldr	r0, [pc, #24]	; 11090 <__assert_fail@plt+0x8c>
   11074:	ldr	r3, [pc, #24]	; 11094 <__assert_fail@plt+0x90>
   11078:	cmp	r3, r0
   1107c:	bxeq	lr
   11080:	ldr	r3, [pc, #16]	; 11098 <__assert_fail@plt+0x94>
   11084:	cmp	r3, #0
   11088:	bxeq	lr
   1108c:	bx	r3
   11090:	andeq	r8, r2, r8, asr #2
   11094:	andeq	r8, r2, r8, asr #2
   11098:	andeq	r0, r0, r0
   1109c:	ldr	r0, [pc, #36]	; 110c8 <__assert_fail@plt+0xc4>
   110a0:	ldr	r1, [pc, #36]	; 110cc <__assert_fail@plt+0xc8>
   110a4:	sub	r1, r1, r0
   110a8:	asr	r1, r1, #2
   110ac:	add	r1, r1, r1, lsr #31
   110b0:	asrs	r1, r1, #1
   110b4:	bxeq	lr
   110b8:	ldr	r3, [pc, #16]	; 110d0 <__assert_fail@plt+0xcc>
   110bc:	cmp	r3, #0
   110c0:	bxeq	lr
   110c4:	bx	r3
   110c8:	andeq	r8, r2, r8, asr #2
   110cc:	andeq	r8, r2, r8, asr #2
   110d0:	andeq	r0, r0, r0
   110d4:	push	{r4, lr}
   110d8:	ldr	r4, [pc, #24]	; 110f8 <__assert_fail@plt+0xf4>
   110dc:	ldrb	r3, [r4]
   110e0:	cmp	r3, #0
   110e4:	popne	{r4, pc}
   110e8:	bl	11070 <__assert_fail@plt+0x6c>
   110ec:	mov	r3, #1
   110f0:	strb	r3, [r4]
   110f4:	pop	{r4, pc}
   110f8:	andeq	r8, r2, ip, ror #2
   110fc:	b	1109c <__assert_fail@plt+0x98>
   11100:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11104:	strd	r6, [sp, #8]
   11108:	strd	r8, [sp, #16]
   1110c:	strd	sl, [sp, #24]
   11110:	str	lr, [sp, #32]
   11114:	sub	sp, sp, #36	; 0x24
   11118:	mov	r5, r0
   1111c:	movw	r3, #33136	; 0x8170
   11120:	movt	r3, #2
   11124:	movw	r2, #33176	; 0x8198
   11128:	movt	r2, #2
   1112c:	ldr	r2, [r2]
   11130:	str	r2, [r3]
   11134:	ldr	r3, [r0, #4]
   11138:	ldr	r2, [r0, #8]
   1113c:	cmp	r2, r3
   11140:	bls	111c4 <__assert_fail@plt+0x1c0>
   11144:	add	r2, r3, #1
   11148:	str	r2, [r0, #4]
   1114c:	ldrb	r0, [r3]
   11150:	mov	r1, r5
   11154:	bl	10ee4 <ungetc@plt>
   11158:	movw	r3, #33136	; 0x8170
   1115c:	movt	r3, #2
   11160:	ldr	r2, [r3]
   11164:	ldrd	r0, [r2]
   11168:	cmp	r1, #0
   1116c:	cmpeq	r0, #1
   11170:	movhi	r2, #1
   11174:	movls	r2, #0
   11178:	ldrb	r3, [r3, #4]
   1117c:	subs	r3, r2, r3
   11180:	movne	r3, #1
   11184:	str	r3, [sp, #24]
   11188:	mov	sl, #1
   1118c:	mov	fp, #0
   11190:	mov	r3, #0
   11194:	str	r3, [sp, #16]
   11198:	mov	r7, r3
   1119c:	movw	r6, #33136	; 0x8170
   111a0:	movt	r6, #2
   111a4:	movw	r8, #33020	; 0x80fc
   111a8:	movt	r8, #2
   111ac:	movw	r3, #33176	; 0x8198
   111b0:	movt	r3, #2
   111b4:	str	r3, [sp, #28]
   111b8:	movw	r9, #33124	; 0x8164
   111bc:	movt	r9, #2
   111c0:	b	1154c <__assert_fail@plt+0x548>
   111c4:	bl	10f74 <__uflow@plt>
   111c8:	cmn	r0, #1
   111cc:	bne	11150 <__assert_fail@plt+0x14c>
   111d0:	add	sp, sp, #36	; 0x24
   111d4:	ldrd	r4, [sp]
   111d8:	ldrd	r6, [sp, #8]
   111dc:	ldrd	r8, [sp, #16]
   111e0:	ldrd	sl, [sp, #24]
   111e4:	add	sp, sp, #32
   111e8:	pop	{pc}		; (ldr pc, [sp], #4)
   111ec:	mov	sl, #1
   111f0:	mov	fp, #0
   111f4:	mov	r7, #0
   111f8:	b	1154c <__assert_fail@plt+0x548>
   111fc:	str	r5, [sp, #8]
   11200:	ldrb	r3, [r8]
   11204:	str	r3, [sp, #4]
   11208:	ldrb	r3, [r6, #16]
   1120c:	str	r3, [sp]
   11210:	mvn	r3, #0
   11214:	mov	r2, #0
   11218:	add	r1, r6, #8
   1121c:	add	r0, r6, #12
   11220:	bl	12ebc <__assert_fail@plt+0x1eb8>
   11224:	subs	r2, r0, #0
   11228:	blt	11288 <__assert_fail@plt+0x284>
   1122c:	cmp	r2, #0
   11230:	beq	112b0 <__assert_fail@plt+0x2ac>
   11234:	ldr	r0, [r6, #12]
   11238:	sub	r7, r2, #1
   1123c:	ldrb	r1, [r0, r7]
   11240:	ldrb	r3, [r6, #16]
   11244:	cmp	r1, r3
   11248:	bne	112d0 <__assert_fail@plt+0x2cc>
   1124c:	ldr	r3, [r6]
   11250:	ldrd	r2, [r3]
   11254:	cmp	r3, #0
   11258:	cmpeq	r2, #1
   1125c:	bls	11334 <__assert_fail@plt+0x330>
   11260:	ldr	r3, [r6]
   11264:	ldrd	r0, [r3, #8]
   11268:	cmp	r1, #0
   1126c:	cmpeq	r0, #1
   11270:	addls	r3, r3, #16
   11274:	strls	r3, [r6]
   11278:	mov	sl, #2
   1127c:	mov	fp, #0
   11280:	mov	r7, #0
   11284:	b	11568 <__assert_fail@plt+0x564>
   11288:	movw	r4, #33136	; 0x8170
   1128c:	movt	r4, #2
   11290:	ldr	r0, [r4, #12]
   11294:	bl	12d9c <__assert_fail@plt+0x1d98>
   11298:	mov	r3, #0
   1129c:	str	r3, [r4, #12]
   112a0:	ldr	r3, [r5]
   112a4:	tst	r3, #48	; 0x30
   112a8:	bne	111d0 <__assert_fail@plt+0x1cc>
   112ac:	bl	160cc <__assert_fail@plt+0x50c8>
   112b0:	movw	r3, #26400	; 0x6720
   112b4:	movt	r3, #1
   112b8:	movw	r2, #315	; 0x13b
   112bc:	movw	r1, #26644	; 0x6814
   112c0:	movt	r1, #1
   112c4:	movw	r0, #26656	; 0x6820
   112c8:	movt	r0, #1
   112cc:	bl	11004 <__assert_fail@plt>
   112d0:	ldrb	r3, [r6, #4]
   112d4:	cmp	r3, #0
   112d8:	bne	111ec <__assert_fail@plt+0x1e8>
   112dc:	ldr	r3, [r9]
   112e0:	mov	r1, #1
   112e4:	bl	10de8 <fwrite_unlocked@plt>
   112e8:	ldrb	r1, [r8]
   112ec:	ldr	r3, [r6, #12]
   112f0:	ldrb	r3, [r3, r7]
   112f4:	cmp	r3, r1
   112f8:	beq	1131c <__assert_fail@plt+0x318>
   112fc:	ldr	r0, [r9]
   11300:	ldr	r3, [r0, #20]
   11304:	ldr	r2, [r0, #24]
   11308:	cmp	r3, r2
   1130c:	addcc	r2, r3, #1
   11310:	strcc	r2, [r0, #20]
   11314:	strbcc	r1, [r3]
   11318:	bcs	1132c <__assert_fail@plt+0x328>
   1131c:	ldrb	r7, [r8]
   11320:	mov	sl, #1
   11324:	mov	fp, #0
   11328:	b	1154c <__assert_fail@plt+0x548>
   1132c:	bl	10f80 <__overflow@plt>
   11330:	b	1131c <__assert_fail@plt+0x318>
   11334:	ldr	r3, [r9]
   11338:	mov	r2, r7
   1133c:	mov	r1, #1
   11340:	bl	10de8 <fwrite_unlocked@plt>
   11344:	ldrb	r2, [r6, #16]
   11348:	ldrb	r3, [r8]
   1134c:	cmp	r2, r3
   11350:	strne	r4, [sp, #16]
   11354:	bne	11260 <__assert_fail@plt+0x25c>
   11358:	ldr	r3, [r5, #4]
   1135c:	ldr	r2, [r5, #8]
   11360:	cmp	r3, r2
   11364:	bcs	11384 <__assert_fail@plt+0x380>
   11368:	add	r2, r3, #1
   1136c:	str	r2, [r5, #4]
   11370:	ldrb	r0, [r3]
   11374:	mov	r1, r5
   11378:	bl	10ee4 <ungetc@plt>
   1137c:	str	r4, [sp, #16]
   11380:	b	11260 <__assert_fail@plt+0x25c>
   11384:	mov	r0, r5
   11388:	bl	10f74 <__uflow@plt>
   1138c:	cmn	r0, #1
   11390:	beq	11260 <__assert_fail@plt+0x25c>
   11394:	b	11374 <__assert_fail@plt+0x370>
   11398:	mov	r7, r4
   1139c:	ldr	r3, [r5, #4]
   113a0:	ldr	r2, [r5, #8]
   113a4:	cmp	r3, r2
   113a8:	bcs	11400 <__assert_fail@plt+0x3fc>
   113ac:	add	r2, r3, #1
   113b0:	str	r2, [r5, #4]
   113b4:	ldrb	r4, [r3]
   113b8:	ldrb	r3, [r6, #16]
   113bc:	cmp	r3, r4
   113c0:	beq	11610 <__assert_fail@plt+0x60c>
   113c4:	ldrb	r3, [r8]
   113c8:	cmp	r3, r4
   113cc:	cmnne	r4, #1
   113d0:	beq	11484 <__assert_fail@plt+0x480>
   113d4:	ldr	r0, [r9]
   113d8:	ldr	r3, [r0, #20]
   113dc:	ldr	r2, [r0, #24]
   113e0:	cmp	r3, r2
   113e4:	addcc	r2, r3, #1
   113e8:	strcc	r2, [r0, #20]
   113ec:	strbcc	r4, [r3]
   113f0:	bcc	11398 <__assert_fail@plt+0x394>
   113f4:	uxtb	r1, r4
   113f8:	bl	10f80 <__overflow@plt>
   113fc:	b	11398 <__assert_fail@plt+0x394>
   11400:	mov	r0, r5
   11404:	bl	10f74 <__uflow@plt>
   11408:	mov	r4, r0
   1140c:	b	113b8 <__assert_fail@plt+0x3b4>
   11410:	mov	r7, r0
   11414:	ldr	r3, [r5, #4]
   11418:	ldr	r2, [r5, #8]
   1141c:	cmp	r3, r2
   11420:	bcs	11478 <__assert_fail@plt+0x474>
   11424:	add	r2, r3, #1
   11428:	str	r2, [r5, #4]
   1142c:	ldrb	r0, [r3]
   11430:	ldrb	r3, [r6, #16]
   11434:	cmp	r3, r0
   11438:	beq	11660 <__assert_fail@plt+0x65c>
   1143c:	ldrb	r3, [r8]
   11440:	cmp	r3, r0
   11444:	cmnne	r0, #1
   11448:	bne	11410 <__assert_fail@plt+0x40c>
   1144c:	mov	r4, r0
   11450:	mov	r2, r3
   11454:	ldrb	r3, [r6, #16]
   11458:	cmp	r2, r3
   1145c:	strne	r7, [sp, #20]
   11460:	movne	r7, r0
   11464:	bne	11630 <__assert_fail@plt+0x62c>
   11468:	ldrb	r2, [r6, #16]
   1146c:	str	r7, [sp, #20]
   11470:	mov	r7, r4
   11474:	b	114a8 <__assert_fail@plt+0x4a4>
   11478:	mov	r0, r5
   1147c:	bl	10f74 <__uflow@plt>
   11480:	b	11430 <__assert_fail@plt+0x42c>
   11484:	ldrb	r3, [r6, #16]
   11488:	ldrb	r2, [r8]
   1148c:	cmp	r2, r3
   11490:	beq	115a0 <__assert_fail@plt+0x59c>
   11494:	ldrb	r2, [r6, #16]
   11498:	str	r7, [sp, #20]
   1149c:	mov	r7, r4
   114a0:	mov	r3, #1
   114a4:	str	r3, [sp, #16]
   114a8:	ldrb	r1, [r8]
   114ac:	cmp	r1, r7
   114b0:	movne	r3, #0
   114b4:	moveq	r3, #1
   114b8:	cmp	r1, r7
   114bc:	cmnne	r7, #1
   114c0:	bne	1154c <__assert_fail@plt+0x548>
   114c4:	ldr	r0, [sp, #16]
   114c8:	cmp	r0, #0
   114cc:	bne	114ec <__assert_fail@plt+0x4e8>
   114d0:	ldrb	r0, [r6, #4]
   114d4:	eor	r0, r0, #1
   114d8:	cmp	fp, #0
   114dc:	cmpeq	sl, #1
   114e0:	orrne	r0, r0, #1
   114e4:	cmp	r0, #0
   114e8:	beq	11528 <__assert_fail@plt+0x524>
   114ec:	ldr	r0, [sp, #20]
   114f0:	cmp	r1, r0
   114f4:	orrne	r3, r3, #1
   114f8:	cmp	r1, r2
   114fc:	orreq	r3, r3, #1
   11500:	cmp	r3, #0
   11504:	beq	111d0 <__assert_fail@plt+0x1cc>
   11508:	ldr	r0, [r9]
   1150c:	ldr	r3, [r0, #20]
   11510:	ldr	r2, [r0, #24]
   11514:	cmp	r3, r2
   11518:	addcc	r2, r3, #1
   1151c:	strcc	r2, [r0, #20]
   11520:	strbcc	r1, [r3]
   11524:	bcs	11608 <__assert_fail@plt+0x604>
   11528:	cmn	r7, #1
   1152c:	beq	111d0 <__assert_fail@plt+0x1cc>
   11530:	ldr	r3, [sp, #28]
   11534:	ldr	r3, [r3]
   11538:	str	r3, [r6]
   1153c:	mov	sl, #1
   11540:	mov	fp, #0
   11544:	mov	r3, #0
   11548:	str	r3, [sp, #16]
   1154c:	cmp	fp, #0
   11550:	cmpeq	sl, #1
   11554:	ldr	r3, [sp, #24]
   11558:	moveq	r4, r3
   1155c:	movne	r4, #0
   11560:	cmp	r4, #0
   11564:	bne	111fc <__assert_fail@plt+0x1f8>
   11568:	ldr	r3, [r6]
   1156c:	ldrd	r2, [r3]
   11570:	cmp	r3, fp
   11574:	cmpeq	r2, sl
   11578:	bhi	11414 <__assert_fail@plt+0x410>
   1157c:	ldr	r3, [sp, #16]
   11580:	cmp	r3, #0
   11584:	beq	1139c <__assert_fail@plt+0x398>
   11588:	ldr	r3, [r9]
   1158c:	ldr	r2, [r6, #20]
   11590:	mov	r1, #1
   11594:	ldr	r0, [r6, #24]
   11598:	bl	10de8 <fwrite_unlocked@plt>
   1159c:	b	1139c <__assert_fail@plt+0x398>
   115a0:	cmp	r3, r4
   115a4:	movne	r3, #1
   115a8:	strne	r3, [sp, #16]
   115ac:	bne	11468 <__assert_fail@plt+0x464>
   115b0:	str	r7, [sp, #20]
   115b4:	mov	r7, r4
   115b8:	mov	r3, #1
   115bc:	str	r3, [sp, #16]
   115c0:	ldr	r3, [r5, #4]
   115c4:	ldr	r2, [r5, #8]
   115c8:	cmp	r3, r2
   115cc:	bcs	115ec <__assert_fail@plt+0x5e8>
   115d0:	add	r2, r3, #1
   115d4:	str	r2, [r5, #4]
   115d8:	ldrb	r4, [r3]
   115dc:	mov	r1, r5
   115e0:	mov	r0, r4
   115e4:	bl	10ee4 <ungetc@plt>
   115e8:	b	11630 <__assert_fail@plt+0x62c>
   115ec:	mov	r0, r5
   115f0:	bl	10f74 <__uflow@plt>
   115f4:	mov	r4, r0
   115f8:	cmn	r0, #1
   115fc:	bne	115dc <__assert_fail@plt+0x5d8>
   11600:	ldr	r7, [sp, #20]
   11604:	b	11468 <__assert_fail@plt+0x464>
   11608:	bl	10f80 <__overflow@plt>
   1160c:	b	11528 <__assert_fail@plt+0x524>
   11610:	str	r7, [sp, #20]
   11614:	mov	r7, r4
   11618:	mov	r3, #1
   1161c:	str	r3, [sp, #16]
   11620:	ldrb	r2, [r8]
   11624:	ldrb	r3, [r6, #16]
   11628:	cmp	r2, r3
   1162c:	beq	115c0 <__assert_fail@plt+0x5bc>
   11630:	ldrb	r2, [r6, #16]
   11634:	cmp	r2, r7
   11638:	bne	114a8 <__assert_fail@plt+0x4a4>
   1163c:	adds	sl, sl, #1
   11640:	adc	fp, fp, #0
   11644:	ldr	r1, [r6]
   11648:	ldrd	r2, [r1, #8]
   1164c:	cmp	fp, r3
   11650:	cmpeq	sl, r2
   11654:	addhi	r1, r1, #16
   11658:	strhi	r1, [r6]
   1165c:	b	1154c <__assert_fail@plt+0x548>
   11660:	mov	r4, r0
   11664:	str	r7, [sp, #20]
   11668:	mov	r7, r0
   1166c:	b	11620 <__assert_fail@plt+0x61c>
   11670:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11674:	strd	r6, [sp, #8]
   11678:	strd	r8, [sp, #16]
   1167c:	strd	sl, [sp, #24]
   11680:	str	lr, [sp, #32]
   11684:	sub	sp, sp, #4
   11688:	mov	r6, r0
   1168c:	movw	r3, #33136	; 0x8170
   11690:	movt	r3, #2
   11694:	movw	r2, #33176	; 0x8198
   11698:	movt	r2, #2
   1169c:	ldr	r2, [r2]
   116a0:	str	r2, [r3]
   116a4:	mov	r4, #0
   116a8:	mov	r5, #0
   116ac:	mov	r8, #0
   116b0:	mov	r7, r3
   116b4:	add	sl, r3, #28
   116b8:	movw	r9, #33124	; 0x8164
   116bc:	movt	r9, #2
   116c0:	b	11774 <__assert_fail@plt+0x770>
   116c4:	mov	r0, r6
   116c8:	bl	10f74 <__uflow@plt>
   116cc:	movw	r3, #33020	; 0x80fc
   116d0:	movt	r3, #2
   116d4:	ldrb	r3, [r3]
   116d8:	mov	r1, r3
   116dc:	cmp	r3, r0
   116e0:	beq	11738 <__assert_fail@plt+0x734>
   116e4:	cmn	r0, #1
   116e8:	bne	11840 <__assert_fail@plt+0x83c>
   116ec:	orrs	r2, r4, r5
   116f0:	beq	1171c <__assert_fail@plt+0x718>
   116f4:	movw	r2, #33124	; 0x8164
   116f8:	movt	r2, #2
   116fc:	ldr	r0, [r2]
   11700:	ldr	r2, [r0, #20]
   11704:	ldr	ip, [r0, #24]
   11708:	cmp	r2, ip
   1170c:	addcc	r1, r2, #1
   11710:	strcc	r1, [r0, #20]
   11714:	strbcc	r3, [r2]
   11718:	bcs	11838 <__assert_fail@plt+0x834>
   1171c:	add	sp, sp, #4
   11720:	ldrd	r4, [sp]
   11724:	ldrd	r6, [sp, #8]
   11728:	ldrd	r8, [sp, #16]
   1172c:	ldrd	sl, [sp, #24]
   11730:	add	sp, sp, #32
   11734:	pop	{pc}		; (ldr pc, [sp], #4)
   11738:	ldr	r3, [r9]
   1173c:	ldr	r2, [r3, #20]
   11740:	ldr	r1, [r3, #24]
   11744:	cmp	r2, r1
   11748:	addcc	r1, r2, #1
   1174c:	strcc	r1, [r3, #20]
   11750:	strbcc	r0, [r2]
   11754:	bcs	11828 <__assert_fail@plt+0x824>
   11758:	movw	r3, #33176	; 0x8198
   1175c:	movt	r3, #2
   11760:	ldr	r3, [r3]
   11764:	str	r3, [r7]
   11768:	mov	r4, #0
   1176c:	mov	r5, #0
   11770:	mov	r8, #0
   11774:	ldr	r3, [r6, #4]
   11778:	ldr	r2, [r6, #8]
   1177c:	cmp	r2, r3
   11780:	bls	116c4 <__assert_fail@plt+0x6c0>
   11784:	add	r2, r3, #1
   11788:	str	r2, [r6, #4]
   1178c:	ldrb	fp, [r3]
   11790:	movw	r3, #33020	; 0x80fc
   11794:	movt	r3, #2
   11798:	ldrb	r0, [r3]
   1179c:	cmp	fp, r0
   117a0:	beq	11738 <__assert_fail@plt+0x734>
   117a4:	adds	r4, r4, #1
   117a8:	adc	r5, r5, #0
   117ac:	ldr	r1, [r7]
   117b0:	ldrd	r2, [r1, #8]
   117b4:	cmp	r5, r3
   117b8:	cmpeq	r4, r2
   117bc:	addhi	r1, r1, #16
   117c0:	strhi	r1, [r7]
   117c4:	ldr	r3, [r7]
   117c8:	ldrd	r2, [r3]
   117cc:	cmp	r3, r5
   117d0:	cmpeq	r2, r4
   117d4:	bhi	11774 <__assert_fail@plt+0x770>
   117d8:	ldr	r0, [r7, #24]
   117dc:	cmp	r0, sl
   117e0:	beq	117fc <__assert_fail@plt+0x7f8>
   117e4:	cmp	r3, r5
   117e8:	cmpeq	r2, r4
   117ec:	movne	r8, #0
   117f0:	cmp	r8, #0
   117f4:	moveq	r8, #1
   117f8:	bne	11848 <__assert_fail@plt+0x844>
   117fc:	ldr	r0, [r9]
   11800:	ldr	r3, [r0, #20]
   11804:	ldr	r2, [r0, #24]
   11808:	cmp	r3, r2
   1180c:	addcc	r2, r3, #1
   11810:	strcc	r2, [r0, #20]
   11814:	strbcc	fp, [r3]
   11818:	bcc	11774 <__assert_fail@plt+0x770>
   1181c:	uxtb	r1, fp
   11820:	bl	10f80 <__overflow@plt>
   11824:	b	11774 <__assert_fail@plt+0x770>
   11828:	uxtb	r1, r0
   1182c:	mov	r0, r3
   11830:	bl	10f80 <__overflow@plt>
   11834:	b	11758 <__assert_fail@plt+0x754>
   11838:	bl	10f80 <__overflow@plt>
   1183c:	b	1171c <__assert_fail@plt+0x718>
   11840:	mov	fp, r0
   11844:	b	117a4 <__assert_fail@plt+0x7a0>
   11848:	ldr	r3, [r9]
   1184c:	ldr	r2, [r7, #20]
   11850:	mov	r1, #1
   11854:	bl	10de8 <fwrite_unlocked@plt>
   11858:	b	117fc <__assert_fail@plt+0x7f8>
   1185c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11860:	strd	r6, [sp, #8]
   11864:	str	r8, [sp, #16]
   11868:	str	lr, [sp, #20]
   1186c:	mov	r6, r0
   11870:	mov	r5, r1
   11874:	movw	r1, #29308	; 0x727c
   11878:	movt	r1, #1
   1187c:	bl	10d7c <strcmp@plt>
   11880:	cmp	r0, #0
   11884:	bne	11914 <__assert_fail@plt+0x910>
   11888:	movw	r3, #33136	; 0x8170
   1188c:	movt	r3, #2
   11890:	mov	r2, #1
   11894:	strb	r2, [r3, #29]
   11898:	movw	r3, #33120	; 0x8160
   1189c:	movt	r3, #2
   118a0:	ldr	r4, [r3]
   118a4:	mov	r1, #2
   118a8:	mov	r0, r4
   118ac:	bl	12c30 <__assert_fail@plt+0x1c2c>
   118b0:	mov	r0, r4
   118b4:	blx	r5
   118b8:	bl	10ef0 <__errno_location@plt>
   118bc:	mov	r7, r0
   118c0:	ldr	r5, [r0]
   118c4:	ldr	r3, [r4]
   118c8:	and	r3, r3, #32
   118cc:	cmp	r3, #0
   118d0:	moveq	r5, r3
   118d4:	movw	r1, #29308	; 0x727c
   118d8:	movt	r1, #1
   118dc:	mov	r0, r6
   118e0:	bl	10d7c <strcmp@plt>
   118e4:	cmp	r0, #0
   118e8:	bne	11964 <__assert_fail@plt+0x960>
   118ec:	mov	r0, r4
   118f0:	bl	10fb0 <clearerr_unlocked@plt>
   118f4:	cmp	r5, #0
   118f8:	moveq	r0, #1
   118fc:	bne	11978 <__assert_fail@plt+0x974>
   11900:	ldrd	r4, [sp]
   11904:	ldrd	r6, [sp, #8]
   11908:	ldr	r8, [sp, #16]
   1190c:	add	sp, sp, #20
   11910:	pop	{pc}		; (ldr pc, [sp], #4)
   11914:	movw	r1, #29064	; 0x7188
   11918:	movt	r1, #1
   1191c:	mov	r0, r6
   11920:	bl	10fbc <fopen64@plt>
   11924:	subs	r4, r0, #0
   11928:	bne	118a4 <__assert_fail@plt+0x8a0>
   1192c:	bl	10ef0 <__errno_location@plt>
   11930:	ldr	r4, [r0]
   11934:	mov	r2, r6
   11938:	mov	r1, #3
   1193c:	mov	r0, #0
   11940:	bl	15498 <__assert_fail@plt+0x4494>
   11944:	mov	r3, r0
   11948:	movw	r2, #29584	; 0x7390
   1194c:	movt	r2, #1
   11950:	mov	r1, r4
   11954:	mov	r0, #0
   11958:	bl	10e78 <error@plt>
   1195c:	mov	r0, #0
   11960:	b	11900 <__assert_fail@plt+0x8fc>
   11964:	mov	r0, r4
   11968:	bl	12c70 <__assert_fail@plt+0x1c6c>
   1196c:	cmn	r0, #1
   11970:	ldreq	r5, [r7]
   11974:	b	118f4 <__assert_fail@plt+0x8f0>
   11978:	mov	r2, r6
   1197c:	mov	r1, #3
   11980:	mov	r0, #0
   11984:	bl	15498 <__assert_fail@plt+0x4494>
   11988:	mov	r3, r0
   1198c:	movw	r2, #29584	; 0x7390
   11990:	movt	r2, #1
   11994:	mov	r1, r5
   11998:	mov	r0, #0
   1199c:	bl	10e78 <error@plt>
   119a0:	mov	r0, #0
   119a4:	b	11900 <__assert_fail@plt+0x8fc>
   119a8:	push	{lr}		; (str lr, [sp, #-4]!)
   119ac:	sub	sp, sp, #60	; 0x3c
   119b0:	subs	r5, r0, #0
   119b4:	beq	119fc <__assert_fail@plt+0x9f8>
   119b8:	movw	r3, #33112	; 0x8158
   119bc:	movt	r3, #2
   119c0:	ldr	r4, [r3]
   119c4:	mov	r2, #5
   119c8:	movw	r1, #26676	; 0x6834
   119cc:	movt	r1, #1
   119d0:	mov	r0, #0
   119d4:	bl	10e0c <dcgettext@plt>
   119d8:	movw	r3, #33192	; 0x81a8
   119dc:	movt	r3, #2
   119e0:	ldr	r3, [r3]
   119e4:	mov	r2, r0
   119e8:	mov	r1, #1
   119ec:	mov	r0, r4
   119f0:	bl	10f38 <__fprintf_chk@plt>
   119f4:	mov	r0, r5
   119f8:	bl	10ecc <exit@plt>
   119fc:	mov	r2, #5
   11a00:	movw	r1, #26716	; 0x685c
   11a04:	movt	r1, #1
   11a08:	mov	r0, #0
   11a0c:	bl	10e0c <dcgettext@plt>
   11a10:	movw	r3, #33192	; 0x81a8
   11a14:	movt	r3, #2
   11a18:	ldr	r2, [r3]
   11a1c:	mov	r1, r0
   11a20:	mov	r0, #1
   11a24:	bl	10f20 <__printf_chk@plt>
   11a28:	mov	r2, #5
   11a2c:	movw	r1, #26748	; 0x687c
   11a30:	movt	r1, #1
   11a34:	mov	r0, #0
   11a38:	bl	10e0c <dcgettext@plt>
   11a3c:	movw	r4, #33124	; 0x8164
   11a40:	movt	r4, #2
   11a44:	ldr	r1, [r4]
   11a48:	bl	10d70 <fputs_unlocked@plt>
   11a4c:	mov	r2, #5
   11a50:	movw	r1, #26816	; 0x68c0
   11a54:	movt	r1, #1
   11a58:	mov	r0, #0
   11a5c:	bl	10e0c <dcgettext@plt>
   11a60:	ldr	r1, [r4]
   11a64:	bl	10d70 <fputs_unlocked@plt>
   11a68:	mov	r2, #5
   11a6c:	movw	r1, #26872	; 0x68f8
   11a70:	movt	r1, #1
   11a74:	mov	r0, #0
   11a78:	bl	10e0c <dcgettext@plt>
   11a7c:	ldr	r1, [r4]
   11a80:	bl	10d70 <fputs_unlocked@plt>
   11a84:	mov	r2, #5
   11a88:	movw	r1, #26948	; 0x6944
   11a8c:	movt	r1, #1
   11a90:	mov	r0, #0
   11a94:	bl	10e0c <dcgettext@plt>
   11a98:	ldr	r1, [r4]
   11a9c:	bl	10d70 <fputs_unlocked@plt>
   11aa0:	mov	r2, #5
   11aa4:	movw	r1, #27128	; 0x69f8
   11aa8:	movt	r1, #1
   11aac:	mov	r0, #0
   11ab0:	bl	10e0c <dcgettext@plt>
   11ab4:	ldr	r1, [r4]
   11ab8:	bl	10d70 <fputs_unlocked@plt>
   11abc:	mov	r2, #5
   11ac0:	movw	r1, #27368	; 0x6ae8
   11ac4:	movt	r1, #1
   11ac8:	mov	r0, #0
   11acc:	bl	10e0c <dcgettext@plt>
   11ad0:	ldr	r1, [r4]
   11ad4:	bl	10d70 <fputs_unlocked@plt>
   11ad8:	mov	r2, #5
   11adc:	movw	r1, #27484	; 0x6b5c
   11ae0:	movt	r1, #1
   11ae4:	mov	r0, #0
   11ae8:	bl	10e0c <dcgettext@plt>
   11aec:	ldr	r1, [r4]
   11af0:	bl	10d70 <fputs_unlocked@plt>
   11af4:	mov	r2, #5
   11af8:	movw	r1, #27696	; 0x6c30
   11afc:	movt	r1, #1
   11b00:	mov	r0, #0
   11b04:	bl	10e0c <dcgettext@plt>
   11b08:	ldr	r1, [r4]
   11b0c:	bl	10d70 <fputs_unlocked@plt>
   11b10:	mov	r2, #5
   11b14:	movw	r1, #27760	; 0x6c70
   11b18:	movt	r1, #1
   11b1c:	mov	r0, #0
   11b20:	bl	10e0c <dcgettext@plt>
   11b24:	ldr	r1, [r4]
   11b28:	bl	10d70 <fputs_unlocked@plt>
   11b2c:	mov	r2, #5
   11b30:	movw	r1, #27808	; 0x6ca0
   11b34:	movt	r1, #1
   11b38:	mov	r0, #0
   11b3c:	bl	10e0c <dcgettext@plt>
   11b40:	ldr	r1, [r4]
   11b44:	bl	10d70 <fputs_unlocked@plt>
   11b48:	mov	r2, #5
   11b4c:	movw	r1, #27864	; 0x6cd8
   11b50:	movt	r1, #1
   11b54:	mov	r0, #0
   11b58:	bl	10e0c <dcgettext@plt>
   11b5c:	ldr	r1, [r4]
   11b60:	bl	10d70 <fputs_unlocked@plt>
   11b64:	mov	r2, #5
   11b68:	movw	r1, #28068	; 0x6da4
   11b6c:	movt	r1, #1
   11b70:	mov	r0, #0
   11b74:	bl	10e0c <dcgettext@plt>
   11b78:	ldr	r1, [r4]
   11b7c:	bl	10d70 <fputs_unlocked@plt>
   11b80:	movw	r3, #26400	; 0x6720
   11b84:	movt	r3, #1
   11b88:	add	r0, r3, #12
   11b8c:	ldr	r1, [r3, #12]
   11b90:	ldr	r3, [r3, #16]
   11b94:	str	r1, [sp]
   11b98:	str	r3, [sp, #4]
   11b9c:	ldrd	r2, [r0, #8]
   11ba0:	strd	r2, [sp, #8]
   11ba4:	ldrd	r2, [r0, #16]
   11ba8:	strd	r2, [sp, #16]
   11bac:	ldrd	r2, [r0, #24]
   11bb0:	strd	r2, [sp, #24]
   11bb4:	ldrd	r2, [r0, #32]
   11bb8:	strd	r2, [sp, #32]
   11bbc:	ldrd	r2, [r0, #40]	; 0x28
   11bc0:	strd	r2, [sp, #40]	; 0x28
   11bc4:	ldrd	r2, [r0, #48]	; 0x30
   11bc8:	strd	r2, [sp, #48]	; 0x30
   11bcc:	cmp	r1, #0
   11bd0:	moveq	r4, sp
   11bd4:	beq	11c00 <__assert_fail@plt+0xbfc>
   11bd8:	mov	r4, sp
   11bdc:	movw	r6, #26672	; 0x6830
   11be0:	movt	r6, #1
   11be4:	mov	r0, r6
   11be8:	bl	10d7c <strcmp@plt>
   11bec:	cmp	r0, #0
   11bf0:	beq	11c00 <__assert_fail@plt+0xbfc>
   11bf4:	ldr	r1, [r4, #8]!
   11bf8:	cmp	r1, #0
   11bfc:	bne	11be4 <__assert_fail@plt+0xbe0>
   11c00:	ldr	r4, [r4, #4]
   11c04:	cmp	r4, #0
   11c08:	beq	11d64 <__assert_fail@plt+0xd60>
   11c0c:	mov	r2, #5
   11c10:	movw	r1, #28332	; 0x6eac
   11c14:	movt	r1, #1
   11c18:	mov	r0, #0
   11c1c:	bl	10e0c <dcgettext@plt>
   11c20:	movw	r3, #28356	; 0x6ec4
   11c24:	movt	r3, #1
   11c28:	movw	r2, #28396	; 0x6eec
   11c2c:	movt	r2, #1
   11c30:	mov	r1, r0
   11c34:	mov	r0, #1
   11c38:	bl	10f20 <__printf_chk@plt>
   11c3c:	mov	r1, #0
   11c40:	mov	r0, #5
   11c44:	bl	10f8c <setlocale@plt>
   11c48:	cmp	r0, #0
   11c4c:	beq	11c68 <__assert_fail@plt+0xc64>
   11c50:	mov	r2, #3
   11c54:	movw	r1, #28412	; 0x6efc
   11c58:	movt	r1, #1
   11c5c:	bl	10fe0 <strncmp@plt>
   11c60:	cmp	r0, #0
   11c64:	bne	11ce4 <__assert_fail@plt+0xce0>
   11c68:	mov	r2, #5
   11c6c:	movw	r1, #28488	; 0x6f48
   11c70:	movt	r1, #1
   11c74:	mov	r0, #0
   11c78:	bl	10e0c <dcgettext@plt>
   11c7c:	movw	r6, #26672	; 0x6830
   11c80:	movt	r6, #1
   11c84:	mov	r3, r6
   11c88:	movw	r2, #28356	; 0x6ec4
   11c8c:	movt	r2, #1
   11c90:	mov	r1, r0
   11c94:	mov	r0, #1
   11c98:	bl	10f20 <__printf_chk@plt>
   11c9c:	mov	r2, #5
   11ca0:	movw	r1, #28516	; 0x6f64
   11ca4:	movt	r1, #1
   11ca8:	mov	r0, #0
   11cac:	bl	10e0c <dcgettext@plt>
   11cb0:	mov	r1, r0
   11cb4:	movw	r2, #28936	; 0x7108
   11cb8:	movt	r2, #1
   11cbc:	movw	r3, #27124	; 0x69f4
   11cc0:	movt	r3, #1
   11cc4:	cmp	r4, r6
   11cc8:	moveq	r3, r2
   11ccc:	mov	r2, r4
   11cd0:	mov	r0, #1
   11cd4:	bl	10f20 <__printf_chk@plt>
   11cd8:	b	119f4 <__assert_fail@plt+0x9f0>
   11cdc:	movw	r4, #26672	; 0x6830
   11ce0:	movt	r4, #1
   11ce4:	mov	r2, #5
   11ce8:	movw	r1, #28416	; 0x6f00
   11cec:	movt	r1, #1
   11cf0:	mov	r0, #0
   11cf4:	bl	10e0c <dcgettext@plt>
   11cf8:	movw	r3, #33124	; 0x8164
   11cfc:	movt	r3, #2
   11d00:	ldr	r1, [r3]
   11d04:	bl	10d70 <fputs_unlocked@plt>
   11d08:	b	11c68 <__assert_fail@plt+0xc64>
   11d0c:	mov	r2, #5
   11d10:	movw	r1, #28488	; 0x6f48
   11d14:	movt	r1, #1
   11d18:	mov	r0, #0
   11d1c:	bl	10e0c <dcgettext@plt>
   11d20:	movw	r4, #26672	; 0x6830
   11d24:	movt	r4, #1
   11d28:	mov	r3, r4
   11d2c:	movw	r2, #28356	; 0x6ec4
   11d30:	movt	r2, #1
   11d34:	mov	r1, r0
   11d38:	mov	r0, #1
   11d3c:	bl	10f20 <__printf_chk@plt>
   11d40:	mov	r2, #5
   11d44:	movw	r1, #28516	; 0x6f64
   11d48:	movt	r1, #1
   11d4c:	mov	r0, #0
   11d50:	bl	10e0c <dcgettext@plt>
   11d54:	mov	r1, r0
   11d58:	movw	r3, #28936	; 0x7108
   11d5c:	movt	r3, #1
   11d60:	b	11ccc <__assert_fail@plt+0xcc8>
   11d64:	mov	r2, #5
   11d68:	movw	r1, #28332	; 0x6eac
   11d6c:	movt	r1, #1
   11d70:	mov	r0, #0
   11d74:	bl	10e0c <dcgettext@plt>
   11d78:	movw	r3, #28356	; 0x6ec4
   11d7c:	movt	r3, #1
   11d80:	movw	r2, #28396	; 0x6eec
   11d84:	movt	r2, #1
   11d88:	mov	r1, r0
   11d8c:	mov	r0, #1
   11d90:	bl	10f20 <__printf_chk@plt>
   11d94:	mov	r1, #0
   11d98:	mov	r0, #5
   11d9c:	bl	10f8c <setlocale@plt>
   11da0:	cmp	r0, #0
   11da4:	beq	11d0c <__assert_fail@plt+0xd08>
   11da8:	mov	r2, #3
   11dac:	movw	r1, #28412	; 0x6efc
   11db0:	movt	r1, #1
   11db4:	bl	10fe0 <strncmp@plt>
   11db8:	cmp	r0, #0
   11dbc:	bne	11cdc <__assert_fail@plt+0xcd8>
   11dc0:	mov	r2, #5
   11dc4:	movw	r1, #28488	; 0x6f48
   11dc8:	movt	r1, #1
   11dcc:	mov	r0, #0
   11dd0:	bl	10e0c <dcgettext@plt>
   11dd4:	movw	r4, #26672	; 0x6830
   11dd8:	movt	r4, #1
   11ddc:	mov	r3, r4
   11de0:	movw	r2, #28356	; 0x6ec4
   11de4:	movt	r2, #1
   11de8:	mov	r1, r0
   11dec:	mov	r0, #1
   11df0:	bl	10f20 <__printf_chk@plt>
   11df4:	mov	r2, #5
   11df8:	movw	r1, #28516	; 0x6f64
   11dfc:	movt	r1, #1
   11e00:	mov	r0, #0
   11e04:	bl	10e0c <dcgettext@plt>
   11e08:	mov	r1, r0
   11e0c:	movw	r3, #28936	; 0x7108
   11e10:	movt	r3, #1
   11e14:	b	11ccc <__assert_fail@plt+0xcc8>
   11e18:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11e1c:	strd	r6, [sp, #8]
   11e20:	strd	r8, [sp, #16]
   11e24:	strd	sl, [sp, #24]
   11e28:	str	lr, [sp, #32]
   11e2c:	sub	sp, sp, #28
   11e30:	mov	r6, r0
   11e34:	mov	r4, r1
   11e38:	ldr	r0, [r1]
   11e3c:	bl	13368 <__assert_fail@plt+0x2364>
   11e40:	movw	r1, #27124	; 0x69f4
   11e44:	movt	r1, #1
   11e48:	mov	r0, #6
   11e4c:	bl	10f8c <setlocale@plt>
   11e50:	movw	r5, #28400	; 0x6ef0
   11e54:	movt	r5, #1
   11e58:	movw	r1, #28568	; 0x6f98
   11e5c:	movt	r1, #1
   11e60:	mov	r0, r5
   11e64:	bl	10fd4 <bindtextdomain@plt>
   11e68:	mov	r0, r5
   11e6c:	bl	10e24 <textdomain@plt>
   11e70:	movw	r0, #10992	; 0x2af0
   11e74:	movt	r0, #1
   11e78:	bl	166fc <__assert_fail@plt+0x56f8>
   11e7c:	movw	r2, #33136	; 0x8170
   11e80:	movt	r2, #2
   11e84:	mov	r3, #0
   11e88:	strb	r3, [r2, #4]
   11e8c:	strb	r3, [r2, #16]
   11e90:	strb	r3, [r2, #29]
   11e94:	mov	r9, r3
   11e98:	mov	sl, r3
   11e9c:	str	r3, [sp, #20]
   11ea0:	ldr	r7, [pc, #1120]	; 12308 <__assert_fail@plt+0x1304>
   11ea4:	movw	r5, #28716	; 0x702c
   11ea8:	movt	r5, #1
   11eac:	movw	r8, #33128	; 0x8168
   11eb0:	movt	r8, #2
   11eb4:	b	11fb4 <__assert_fail@plt+0xfb0>
   11eb8:	cmp	r0, #99	; 0x63
   11ebc:	bgt	11f40 <__assert_fail@plt+0xf3c>
   11ec0:	cmp	r0, #98	; 0x62
   11ec4:	bge	11fa4 <__assert_fail@plt+0xfa0>
   11ec8:	cmn	r0, #3
   11ecc:	bne	11f30 <__assert_fail@plt+0xf2c>
   11ed0:	movw	r3, #33024	; 0x8100
   11ed4:	movt	r3, #2
   11ed8:	movw	r0, #33124	; 0x8164
   11edc:	movt	r0, #2
   11ee0:	mov	r4, #0
   11ee4:	str	r4, [sp, #12]
   11ee8:	movw	r2, #28668	; 0x6ffc
   11eec:	movt	r2, #1
   11ef0:	str	r2, [sp, #8]
   11ef4:	movw	r2, #28684	; 0x700c
   11ef8:	movt	r2, #1
   11efc:	str	r2, [sp, #4]
   11f00:	movw	r2, #28700	; 0x701c
   11f04:	movt	r2, #1
   11f08:	str	r2, [sp]
   11f0c:	ldr	r3, [r3]
   11f10:	movw	r2, #28396	; 0x6eec
   11f14:	movt	r2, #1
   11f18:	movw	r1, #26672	; 0x6830
   11f1c:	movt	r1, #1
   11f20:	ldr	r0, [r0]
   11f24:	bl	15b60 <__assert_fail@plt+0x4b5c>
   11f28:	mov	r0, r4
   11f2c:	bl	10ecc <exit@plt>
   11f30:	cmn	r0, #2
   11f34:	bne	120b0 <__assert_fail@plt+0x10ac>
   11f38:	mov	r0, #0
   11f3c:	bl	119a8 <__assert_fail@plt+0x9a4>
   11f40:	cmp	r0, #100	; 0x64
   11f44:	bne	120b0 <__assert_fail@plt+0x10ac>
   11f48:	ldr	r3, [r8]
   11f4c:	ldrb	r2, [r3]
   11f50:	cmp	r2, #0
   11f54:	beq	11f64 <__assert_fail@plt+0xf60>
   11f58:	ldrb	r3, [r3, #1]
   11f5c:	cmp	r3, #0
   11f60:	bne	12040 <__assert_fail@plt+0x103c>
   11f64:	movw	r3, #33136	; 0x8170
   11f68:	movt	r3, #2
   11f6c:	strb	r2, [r3, #16]
   11f70:	mov	r3, #1
   11f74:	str	r3, [sp, #20]
   11f78:	b	11fb4 <__assert_fail@plt+0xfb0>
   11f7c:	cmp	r0, #256	; 0x100
   11f80:	beq	1206c <__assert_fail@plt+0x1068>
   11f84:	movw	r3, #257	; 0x101
   11f88:	cmp	r0, r3
   11f8c:	bne	120b0 <__assert_fail@plt+0x10ac>
   11f90:	movw	r3, #33136	; 0x8170
   11f94:	movt	r3, #2
   11f98:	mov	r2, #1
   11f9c:	strb	r2, [r3, #30]
   11fa0:	b	11fb4 <__assert_fail@plt+0xfb0>
   11fa4:	mov	sl, #1
   11fa8:	cmp	r9, #0
   11fac:	bne	12014 <__assert_fail@plt+0x1010>
   11fb0:	ldr	r9, [r8]
   11fb4:	mov	r3, #0
   11fb8:	str	r3, [sp]
   11fbc:	mov	r3, r7
   11fc0:	mov	r2, r5
   11fc4:	mov	r1, r4
   11fc8:	mov	r0, r6
   11fcc:	bl	10eb4 <getopt_long@plt>
   11fd0:	cmn	r0, #1
   11fd4:	beq	120b8 <__assert_fail@plt+0x10b4>
   11fd8:	cmp	r0, #102	; 0x66
   11fdc:	beq	11fa8 <__assert_fail@plt+0xfa4>
   11fe0:	ble	11eb8 <__assert_fail@plt+0xeb4>
   11fe4:	cmp	r0, #122	; 0x7a
   11fe8:	beq	1209c <__assert_fail@plt+0x1098>
   11fec:	bgt	11f7c <__assert_fail@plt+0xf78>
   11ff0:	cmp	r0, #110	; 0x6e
   11ff4:	beq	11fb4 <__assert_fail@plt+0xfb0>
   11ff8:	cmp	r0, #115	; 0x73
   11ffc:	bne	120b0 <__assert_fail@plt+0x10ac>
   12000:	movw	r3, #33136	; 0x8170
   12004:	movt	r3, #2
   12008:	mov	r2, #1
   1200c:	strb	r2, [r3, #4]
   12010:	b	11fb4 <__assert_fail@plt+0xfb0>
   12014:	mov	r2, #5
   12018:	movw	r1, #28592	; 0x6fb0
   1201c:	movt	r1, #1
   12020:	mov	r0, #0
   12024:	bl	10e0c <dcgettext@plt>
   12028:	mov	r2, r0
   1202c:	mov	r1, #0
   12030:	mov	r0, r1
   12034:	bl	10e78 <error@plt>
   12038:	mov	r0, #1
   1203c:	bl	119a8 <__assert_fail@plt+0x9a4>
   12040:	mov	r2, #5
   12044:	movw	r1, #28624	; 0x6fd0
   12048:	movt	r1, #1
   1204c:	mov	r0, #0
   12050:	bl	10e0c <dcgettext@plt>
   12054:	mov	r2, r0
   12058:	mov	r1, #0
   1205c:	mov	r0, r1
   12060:	bl	10e78 <error@plt>
   12064:	mov	r0, #1
   12068:	bl	119a8 <__assert_fail@plt+0x9a4>
   1206c:	ldr	fp, [r8]
   12070:	ldrb	r3, [fp]
   12074:	cmp	r3, #0
   12078:	moveq	r0, #1
   1207c:	beq	12088 <__assert_fail@plt+0x1084>
   12080:	mov	r0, fp
   12084:	bl	10ed8 <strlen@plt>
   12088:	movw	r3, #33136	; 0x8170
   1208c:	movt	r3, #2
   12090:	str	r0, [r3, #20]
   12094:	str	fp, [r3, #24]
   12098:	b	11fb4 <__assert_fail@plt+0xfb0>
   1209c:	movw	r3, #33020	; 0x80fc
   120a0:	movt	r3, #2
   120a4:	mov	r2, #0
   120a8:	strb	r2, [r3]
   120ac:	b	11fb4 <__assert_fail@plt+0xfb0>
   120b0:	mov	r0, #1
   120b4:	bl	119a8 <__assert_fail@plt+0x9a4>
   120b8:	cmp	r9, #0
   120bc:	beq	12124 <__assert_fail@plt+0x1120>
   120c0:	cmp	sl, #0
   120c4:	beq	121a8 <__assert_fail@plt+0x11a4>
   120c8:	ldr	r3, [sp, #20]
   120cc:	cmp	r3, #0
   120d0:	bne	12150 <__assert_fail@plt+0x114c>
   120d4:	movw	r3, #33136	; 0x8170
   120d8:	movt	r3, #2
   120dc:	ldrb	r3, [r3, #4]
   120e0:	cmp	r3, #0
   120e4:	bne	1217c <__assert_fail@plt+0x1178>
   120e8:	movw	r3, #33136	; 0x8170
   120ec:	movt	r3, #2
   120f0:	ldrb	r3, [r3, #30]
   120f4:	cmp	r3, #0
   120f8:	moveq	r3, #4
   120fc:	moveq	r1, #0
   12100:	beq	121c4 <__assert_fail@plt+0x11c0>
   12104:	mov	r1, #6
   12108:	mov	r0, r9
   1210c:	bl	123d4 <__assert_fail@plt+0x13d0>
   12110:	movw	r3, #33136	; 0x8170
   12114:	movt	r3, #2
   12118:	mov	r2, #9
   1211c:	strb	r2, [r3, #16]
   12120:	b	121dc <__assert_fail@plt+0x11d8>
   12124:	mov	r2, #5
   12128:	movw	r1, #28728	; 0x7038
   1212c:	movt	r1, #1
   12130:	mov	r0, #0
   12134:	bl	10e0c <dcgettext@plt>
   12138:	mov	r2, r0
   1213c:	mov	r1, #0
   12140:	mov	r0, r1
   12144:	bl	10e78 <error@plt>
   12148:	mov	r0, #1
   1214c:	bl	119a8 <__assert_fail@plt+0x9a4>
   12150:	mov	r2, #5
   12154:	movw	r1, #28784	; 0x7070
   12158:	movt	r1, #1
   1215c:	mov	r0, #0
   12160:	bl	10e0c <dcgettext@plt>
   12164:	mov	r2, r0
   12168:	mov	r1, #0
   1216c:	mov	r0, r1
   12170:	bl	10e78 <error@plt>
   12174:	mov	r0, #1
   12178:	bl	119a8 <__assert_fail@plt+0x9a4>
   1217c:	mov	r2, #5
   12180:	movw	r1, #28852	; 0x70b4
   12184:	movt	r1, #1
   12188:	mov	r0, #0
   1218c:	bl	10e0c <dcgettext@plt>
   12190:	mov	r2, r0
   12194:	mov	r1, #0
   12198:	mov	r0, r1
   1219c:	bl	10e78 <error@plt>
   121a0:	mov	r0, #1
   121a4:	bl	119a8 <__assert_fail@plt+0x9a4>
   121a8:	movw	r3, #33136	; 0x8170
   121ac:	movt	r3, #2
   121b0:	ldrb	r3, [r3, #30]
   121b4:	cmp	r3, #0
   121b8:	moveq	r1, r3
   121bc:	movne	r3, #0
   121c0:	movne	r1, #2
   121c4:	orr	r1, r1, r3
   121c8:	mov	r0, r9
   121cc:	bl	123d4 <__assert_fail@plt+0x13d0>
   121d0:	ldr	r3, [sp, #20]
   121d4:	cmp	r3, #0
   121d8:	beq	12110 <__assert_fail@plt+0x110c>
   121dc:	movw	r3, #33136	; 0x8170
   121e0:	movt	r3, #2
   121e4:	ldr	r3, [r3, #24]
   121e8:	cmp	r3, #0
   121ec:	beq	12294 <__assert_fail@plt+0x1290>
   121f0:	movw	r2, #5744	; 0x1670
   121f4:	movt	r2, #1
   121f8:	movw	r3, #4352	; 0x1100
   121fc:	movt	r3, #1
   12200:	cmp	sl, #0
   12204:	movne	sl, r2
   12208:	moveq	sl, r3
   1220c:	movw	r3, #33104	; 0x8150
   12210:	movt	r3, #2
   12214:	ldr	r3, [r3]
   12218:	cmp	r3, r6
   1221c:	beq	122b8 <__assert_fail@plt+0x12b4>
   12220:	movge	r5, #1
   12224:	bge	1225c <__assert_fail@plt+0x1258>
   12228:	mov	r5, #1
   1222c:	movw	r7, #33104	; 0x8150
   12230:	movt	r7, #2
   12234:	mov	r1, sl
   12238:	ldr	r0, [r4, r3, lsl #2]
   1223c:	bl	1185c <__assert_fail@plt+0x858>
   12240:	and	r5, r5, r0
   12244:	uxtb	r5, r5
   12248:	ldr	r3, [r7]
   1224c:	add	r3, r3, #1
   12250:	str	r3, [r7]
   12254:	cmp	r3, r6
   12258:	blt	12234 <__assert_fail@plt+0x1230>
   1225c:	movw	r3, #33136	; 0x8170
   12260:	movt	r3, #2
   12264:	ldrb	r3, [r3, #29]
   12268:	cmp	r3, #0
   1226c:	bne	122d0 <__assert_fail@plt+0x12cc>
   12270:	eor	r0, r5, #1
   12274:	uxtb	r0, r0
   12278:	add	sp, sp, #28
   1227c:	ldrd	r4, [sp]
   12280:	ldrd	r6, [sp, #8]
   12284:	ldrd	r8, [sp, #16]
   12288:	ldrd	sl, [sp, #24]
   1228c:	add	sp, sp, #32
   12290:	pop	{pc}		; (ldr pc, [sp], #4)
   12294:	movw	r3, #33136	; 0x8170
   12298:	movt	r3, #2
   1229c:	ldrb	r1, [r3, #16]
   122a0:	mov	r2, r3
   122a4:	strb	r1, [r2, #28]!
   122a8:	str	r2, [r3, #24]
   122ac:	mov	r2, #1
   122b0:	str	r2, [r3, #20]
   122b4:	b	121f0 <__assert_fail@plt+0x11ec>
   122b8:	mov	r1, sl
   122bc:	movw	r0, #29308	; 0x727c
   122c0:	movt	r0, #1
   122c4:	bl	1185c <__assert_fail@plt+0x858>
   122c8:	mov	r5, r0
   122cc:	b	1225c <__assert_fail@plt+0x1258>
   122d0:	movw	r3, #33120	; 0x8160
   122d4:	movt	r3, #2
   122d8:	ldr	r0, [r3]
   122dc:	bl	12c70 <__assert_fail@plt+0x1c6c>
   122e0:	cmn	r0, #1
   122e4:	bne	12270 <__assert_fail@plt+0x126c>
   122e8:	bl	10ef0 <__errno_location@plt>
   122ec:	movw	r2, #29308	; 0x727c
   122f0:	movt	r2, #1
   122f4:	ldr	r1, [r0]
   122f8:	mov	r0, #0
   122fc:	bl	10e78 <error@plt>
   12300:	mov	r5, #0
   12304:	b	12270 <__assert_fail@plt+0x126c>
   12308:	andeq	r6, r1, r4, ror #14
   1230c:	andeq	r0, r0, r0
   12310:	ldr	r0, [r0]
   12314:	ldr	r3, [r1]
   12318:	cmp	r0, r3
   1231c:	blt	12330 <__assert_fail@plt+0x132c>
   12320:	cmp	r0, r3
   12324:	movle	r0, #0
   12328:	movgt	r0, #1
   1232c:	bx	lr
   12330:	mvn	r0, #0
   12334:	bx	lr
   12338:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1233c:	strd	r6, [sp, #8]
   12340:	str	r8, [sp, #16]
   12344:	str	lr, [sp, #20]
   12348:	mov	r6, r0
   1234c:	mov	r7, r1
   12350:	mov	r4, r2
   12354:	mov	r5, r3
   12358:	movw	r3, #33168	; 0x8190
   1235c:	movt	r3, #2
   12360:	ldr	r2, [r3]
   12364:	ldr	r3, [r3, #4]
   12368:	cmp	r2, r3
   1236c:	beq	123b4 <__assert_fail@plt+0x13b0>
   12370:	movw	r3, #33168	; 0x8190
   12374:	movt	r3, #2
   12378:	ldr	r2, [r3]
   1237c:	ldr	r1, [r3, #8]
   12380:	lsl	r2, r2, #4
   12384:	strd	r6, [r1, r2]
   12388:	ldr	r2, [r3]
   1238c:	ldr	r1, [r3, #8]
   12390:	add	r1, r1, r2, lsl #4
   12394:	strd	r4, [r1, #8]
   12398:	add	r2, r2, #1
   1239c:	str	r2, [r3]
   123a0:	ldrd	r4, [sp]
   123a4:	ldrd	r6, [sp, #8]
   123a8:	ldr	r8, [sp, #16]
   123ac:	add	sp, sp, #20
   123b0:	pop	{pc}		; (ldr pc, [sp], #4)
   123b4:	movw	r8, #33168	; 0x8190
   123b8:	movt	r8, #2
   123bc:	mov	r2, #16
   123c0:	add	r1, r8, #4
   123c4:	ldr	r0, [r8, #8]
   123c8:	bl	15e00 <__assert_fail@plt+0x4dfc>
   123cc:	str	r0, [r8, #8]
   123d0:	b	12370 <__assert_fail@plt+0x136c>
   123d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   123d8:	strd	r6, [sp, #8]
   123dc:	strd	r8, [sp, #16]
   123e0:	strd	sl, [sp, #24]
   123e4:	str	lr, [sp, #32]
   123e8:	sub	sp, sp, #44	; 0x2c
   123ec:	mov	r5, r0
   123f0:	str	r1, [sp, #28]
   123f4:	ands	r3, r1, #1
   123f8:	str	r3, [sp, #24]
   123fc:	beq	12428 <__assert_fail@plt+0x1424>
   12400:	movw	r1, #29308	; 0x727c
   12404:	movt	r1, #1
   12408:	bl	10d7c <strcmp@plt>
   1240c:	cmp	r0, #0
   12410:	bne	12450 <__assert_fail@plt+0x144c>
   12414:	add	r5, r5, #1
   12418:	mov	sl, #1
   1241c:	mov	fp, #0
   12420:	mov	r7, #1
   12424:	b	12434 <__assert_fail@plt+0x1430>
   12428:	mov	sl, #0
   1242c:	mov	fp, #0
   12430:	mov	r7, #0
   12434:	mov	r8, r7
   12438:	mov	r6, #0
   1243c:	mov	r9, r6
   12440:	mov	r2, #1
   12444:	mov	r3, #0
   12448:	strd	r2, [sp]
   1244c:	b	125f0 <__assert_fail@plt+0x15ec>
   12450:	mov	sl, #0
   12454:	mov	fp, #0
   12458:	mov	r7, #0
   1245c:	b	12434 <__assert_fail@plt+0x1430>
   12460:	mov	r6, r7
   12464:	mov	sl, #0
   12468:	mov	fp, sl
   1246c:	mov	r8, #1
   12470:	str	r8, [sp]
   12474:	str	sl, [sp, #4]
   12478:	b	125f0 <__assert_fail@plt+0x15ec>
   1247c:	cmp	r8, #0
   12480:	bne	124b4 <__assert_fail@plt+0x14b0>
   12484:	orrs	r3, sl, fp
   12488:	movne	r6, #0
   1248c:	andeq	r6, r7, #1
   12490:	cmp	r6, #0
   12494:	bne	124f0 <__assert_fail@plt+0x14ec>
   12498:	cmp	r7, #0
   1249c:	beq	12460 <__assert_fail@plt+0x145c>
   124a0:	mov	r8, r7
   124a4:	strd	sl, [sp]
   124a8:	mov	sl, #0
   124ac:	mov	fp, sl
   124b0:	b	125f0 <__assert_fail@plt+0x15ec>
   124b4:	ldr	r3, [sp, #28]
   124b8:	tst	r3, #4
   124bc:	mov	r2, #5
   124c0:	movwne	r1, #29148	; 0x71dc
   124c4:	movtne	r1, #1
   124c8:	movweq	r1, #29180	; 0x71fc
   124cc:	movteq	r1, #1
   124d0:	mov	r0, #0
   124d4:	bl	10e0c <dcgettext@plt>
   124d8:	mov	r2, r0
   124dc:	mov	r1, #0
   124e0:	mov	r0, r1
   124e4:	bl	10e78 <error@plt>
   124e8:	mov	r0, #1
   124ec:	bl	119a8 <__assert_fail@plt+0x9a4>
   124f0:	ldr	r3, [sp, #28]
   124f4:	tst	r3, #4
   124f8:	mov	r2, #5
   124fc:	movwne	r1, #29200	; 0x7210
   12500:	movtne	r1, #1
   12504:	movweq	r1, #29248	; 0x7240
   12508:	movteq	r1, #1
   1250c:	mov	r0, #0
   12510:	bl	10e0c <dcgettext@plt>
   12514:	mov	r2, r0
   12518:	mov	r1, #0
   1251c:	mov	r0, r1
   12520:	bl	10e78 <error@plt>
   12524:	mov	r0, #1
   12528:	bl	119a8 <__assert_fail@plt+0x9a4>
   1252c:	mov	r2, #5
   12530:	movw	r1, #29276	; 0x725c
   12534:	movt	r1, #1
   12538:	mov	r0, #0
   1253c:	bl	10e0c <dcgettext@plt>
   12540:	mov	r2, r0
   12544:	mov	r1, #0
   12548:	mov	r0, r1
   1254c:	bl	10e78 <error@plt>
   12550:	mov	r0, #1
   12554:	bl	119a8 <__assert_fail@plt+0x9a4>
   12558:	cmp	r9, #0
   1255c:	beq	1265c <__assert_fail@plt+0x1658>
   12560:	ldrd	r2, [sp]
   12564:	cmp	r3, fp
   12568:	cmpeq	r2, sl
   1256c:	bhi	12584 <__assert_fail@plt+0x1580>
   12570:	mov	r2, sl
   12574:	mov	r3, fp
   12578:	ldrd	r0, [sp]
   1257c:	bl	12338 <__assert_fail@plt+0x1334>
   12580:	b	125cc <__assert_fail@plt+0x15c8>
   12584:	mov	r2, #5
   12588:	movw	r1, #29312	; 0x7280
   1258c:	movt	r1, #1
   12590:	mov	r0, #0
   12594:	bl	10e0c <dcgettext@plt>
   12598:	mov	r2, r0
   1259c:	mov	r1, #0
   125a0:	mov	r0, r1
   125a4:	bl	10e78 <error@plt>
   125a8:	mov	r0, #1
   125ac:	bl	119a8 <__assert_fail@plt+0x9a4>
   125b0:	orrs	r3, sl, fp
   125b4:	beq	12670 <__assert_fail@plt+0x166c>
   125b8:	mov	r2, sl
   125bc:	mov	r3, fp
   125c0:	mov	r0, sl
   125c4:	mov	r1, fp
   125c8:	bl	12338 <__assert_fail@plt+0x1334>
   125cc:	ldrb	r3, [r5, #-1]
   125d0:	cmp	r3, #0
   125d4:	beq	12840 <__assert_fail@plt+0x183c>
   125d8:	mov	sl, #0
   125dc:	mov	fp, sl
   125e0:	mov	r6, sl
   125e4:	mov	r8, sl
   125e8:	mov	r9, sl
   125ec:	mov	r7, sl
   125f0:	str	r5, [sp, #12]
   125f4:	ldrb	r4, [r5], #1
   125f8:	cmp	r4, #45	; 0x2d
   125fc:	beq	1247c <__assert_fail@plt+0x1478>
   12600:	cmp	r4, #44	; 0x2c
   12604:	beq	1262c <__assert_fail@plt+0x1628>
   12608:	bl	10ec0 <__ctype_b_loc@plt>
   1260c:	ldr	r2, [r0]
   12610:	lsl	r3, r4, #1
   12614:	ldrh	r3, [r2, r3]
   12618:	cmp	r4, #0
   1261c:	andne	r3, r3, #1
   12620:	moveq	r3, #1
   12624:	cmp	r3, #0
   12628:	beq	126ac <__assert_fail@plt+0x16a8>
   1262c:	cmp	r8, #0
   12630:	beq	125b0 <__assert_fail@plt+0x15ac>
   12634:	orr	r7, r7, r9
   12638:	tst	r7, #255	; 0xff
   1263c:	bne	12558 <__assert_fail@plt+0x1554>
   12640:	ldr	r3, [sp, #24]
   12644:	cmp	r3, #0
   12648:	beq	1252c <__assert_fail@plt+0x1528>
   1264c:	mov	r3, #1
   12650:	str	r3, [sp]
   12654:	mov	r3, #0
   12658:	str	r3, [sp, #4]
   1265c:	mvn	r2, #0
   12660:	mvn	r3, #0
   12664:	ldrd	r0, [sp]
   12668:	bl	12338 <__assert_fail@plt+0x1334>
   1266c:	b	125cc <__assert_fail@plt+0x15c8>
   12670:	ldr	r3, [sp, #28]
   12674:	tst	r3, #4
   12678:	mov	r2, #5
   1267c:	movwne	r1, #29200	; 0x7210
   12680:	movtne	r1, #1
   12684:	movweq	r1, #29248	; 0x7240
   12688:	movteq	r1, #1
   1268c:	mov	r0, #0
   12690:	bl	10e0c <dcgettext@plt>
   12694:	mov	r2, r0
   12698:	mov	r1, #0
   1269c:	mov	r0, r1
   126a0:	bl	10e78 <error@plt>
   126a4:	mov	r0, #1
   126a8:	bl	119a8 <__assert_fail@plt+0x9a4>
   126ac:	sub	r3, r4, #48	; 0x30
   126b0:	cmp	r3, #9
   126b4:	bhi	127f4 <__assert_fail@plt+0x17f0>
   126b8:	cmp	r6, #0
   126bc:	beq	126d4 <__assert_fail@plt+0x16d0>
   126c0:	movw	r3, #33168	; 0x8190
   126c4:	movt	r3, #2
   126c8:	ldr	r3, [r3, #12]
   126cc:	cmp	r3, #0
   126d0:	bne	126e4 <__assert_fail@plt+0x16e0>
   126d4:	movw	r3, #33168	; 0x8190
   126d8:	movt	r3, #2
   126dc:	ldr	r2, [sp, #12]
   126e0:	str	r2, [r3, #12]
   126e4:	cmp	r8, #0
   126e8:	moveq	r7, #1
   126ec:	cmp	r8, #0
   126f0:	movne	r9, r8
   126f4:	add	r3, pc, #972	; 0x3cc
   126f8:	ldrd	r2, [r3]
   126fc:	cmp	fp, r3
   12700:	cmpeq	sl, r2
   12704:	bhi	12774 <__assert_fail@plt+0x1770>
   12708:	lsl	r1, fp, #2
   1270c:	lsl	r3, sl, #2
   12710:	orr	r2, r1, sl, lsr #30
   12714:	adds	r3, r3, sl
   12718:	adc	r2, r2, fp
   1271c:	adds	r3, r3, r3
   12720:	str	r3, [sp, #16]
   12724:	adc	r3, r2, r2
   12728:	str	r3, [sp, #20]
   1272c:	sub	r4, r4, #48	; 0x30
   12730:	ldrd	r2, [sp, #16]
   12734:	adds	r2, r2, r4
   12738:	adc	r3, r3, r4, asr #31
   1273c:	cmp	r3, fp
   12740:	cmpeq	r2, sl
   12744:	movcc	r0, #1
   12748:	movcs	r0, #0
   1274c:	and	r1, r2, r3
   12750:	cmn	r1, #1
   12754:	movne	r1, #0
   12758:	moveq	r1, #1
   1275c:	orrs	r1, r0, r1
   12760:	bne	12774 <__assert_fail@plt+0x1770>
   12764:	mov	sl, r2
   12768:	mov	fp, r3
   1276c:	mov	r6, #1
   12770:	b	125f0 <__assert_fail@plt+0x15ec>
   12774:	movw	r3, #33168	; 0x8190
   12778:	movt	r3, #2
   1277c:	ldr	r4, [r3, #12]
   12780:	movw	r1, #29340	; 0x729c
   12784:	movt	r1, #1
   12788:	mov	r0, r4
   1278c:	bl	10ff8 <strspn@plt>
   12790:	mov	r1, r0
   12794:	mov	r0, r4
   12798:	bl	16064 <__assert_fail@plt+0x5060>
   1279c:	mov	r4, r0
   127a0:	ldr	r3, [sp, #28]
   127a4:	tst	r3, #4
   127a8:	mov	r2, #5
   127ac:	movwne	r1, #29352	; 0x72a8
   127b0:	movtne	r1, #1
   127b4:	movweq	r1, #29392	; 0x72d0
   127b8:	movteq	r1, #1
   127bc:	mov	r0, #0
   127c0:	bl	10e0c <dcgettext@plt>
   127c4:	mov	r5, r0
   127c8:	mov	r0, r4
   127cc:	bl	15664 <__assert_fail@plt+0x4660>
   127d0:	mov	r3, r0
   127d4:	mov	r2, r5
   127d8:	mov	r1, #0
   127dc:	mov	r0, r1
   127e0:	bl	10e78 <error@plt>
   127e4:	mov	r0, r4
   127e8:	bl	12d9c <__assert_fail@plt+0x1d98>
   127ec:	mov	r0, #1
   127f0:	bl	119a8 <__assert_fail@plt+0x9a4>
   127f4:	ldr	r3, [sp, #28]
   127f8:	tst	r3, #4
   127fc:	mov	r2, #5
   12800:	movwne	r1, #29424	; 0x72f0
   12804:	movtne	r1, #1
   12808:	movweq	r1, #29460	; 0x7314
   1280c:	movteq	r1, #1
   12810:	mov	r0, #0
   12814:	bl	10e0c <dcgettext@plt>
   12818:	mov	r4, r0
   1281c:	ldr	r0, [sp, #12]
   12820:	bl	15664 <__assert_fail@plt+0x4660>
   12824:	mov	r3, r0
   12828:	mov	r2, r4
   1282c:	mov	r1, #0
   12830:	mov	r0, r1
   12834:	bl	10e78 <error@plt>
   12838:	mov	r0, #1
   1283c:	bl	119a8 <__assert_fail@plt+0x9a4>
   12840:	movw	r3, #33168	; 0x8190
   12844:	movt	r3, #2
   12848:	ldr	r1, [r3]
   1284c:	cmp	r1, #0
   12850:	beq	12888 <__assert_fail@plt+0x1884>
   12854:	movw	r0, #33168	; 0x8190
   12858:	movt	r0, #2
   1285c:	movw	r3, #8976	; 0x2310
   12860:	movt	r3, #1
   12864:	mov	r2, #16
   12868:	ldr	r0, [r0, #8]
   1286c:	bl	10fc8 <qsort@plt>
   12870:	mvn	r8, #-268435455	; 0xf0000001
   12874:	mov	sl, #16
   12878:	mov	fp, #0
   1287c:	movw	r9, #33168	; 0x8190
   12880:	movt	r9, #2
   12884:	b	128cc <__assert_fail@plt+0x18c8>
   12888:	ldr	r3, [sp, #28]
   1288c:	tst	r3, #4
   12890:	mov	r2, #5
   12894:	movwne	r1, #29484	; 0x732c
   12898:	movtne	r1, #1
   1289c:	movweq	r1, #29528	; 0x7358
   128a0:	movteq	r1, #1
   128a4:	mov	r0, #0
   128a8:	bl	10e0c <dcgettext@plt>
   128ac:	mov	r2, r0
   128b0:	mov	r1, #0
   128b4:	mov	r0, r1
   128b8:	bl	10e78 <error@plt>
   128bc:	mov	r0, #1
   128c0:	bl	119a8 <__assert_fail@plt+0x9a4>
   128c4:	add	sl, sl, #16
   128c8:	sub	r8, r8, #1
   128cc:	ldr	r2, [r9]
   128d0:	cmp	r2, fp
   128d4:	bls	1297c <__assert_fail@plt+0x1978>
   128d8:	add	fp, fp, #1
   128dc:	cmp	r2, fp
   128e0:	bls	128c4 <__assert_fail@plt+0x18c0>
   128e4:	ldr	r1, [r9, #8]
   128e8:	add	r0, r1, sl
   128ec:	sub	r3, sl, #16
   128f0:	str	r3, [sp, #12]
   128f4:	add	r3, r1, r3
   128f8:	ldrd	r6, [r3, #8]
   128fc:	ldrd	r4, [r1, sl]
   12900:	cmp	r5, r7
   12904:	cmpeq	r4, r6
   12908:	bhi	128c4 <__assert_fail@plt+0x18c0>
   1290c:	add	ip, sl, #16
   12910:	str	ip, [sp]
   12914:	ldrd	r4, [r0, #8]
   12918:	cmp	r5, r7
   1291c:	cmpeq	r4, r6
   12920:	movcc	r4, r6
   12924:	movcc	r5, r7
   12928:	strd	r4, [r3, #8]
   1292c:	add	r2, r2, r8
   12930:	lsl	r2, r2, #4
   12934:	ldr	r3, [sp]
   12938:	add	r1, r1, r3
   1293c:	bl	10da0 <memmove@plt>
   12940:	ldr	r2, [r9]
   12944:	sub	r2, r2, #1
   12948:	str	r2, [r9]
   1294c:	cmp	r2, fp
   12950:	bls	128c4 <__assert_fail@plt+0x18c0>
   12954:	ldr	r1, [r9, #8]
   12958:	add	r0, r1, sl
   1295c:	ldr	r3, [sp, #12]
   12960:	add	r3, r1, r3
   12964:	ldrd	r6, [r3, #8]
   12968:	ldrd	r4, [r1, sl]
   1296c:	cmp	r5, r7
   12970:	cmpeq	r4, r6
   12974:	bls	12914 <__assert_fail@plt+0x1910>
   12978:	b	128c4 <__assert_fail@plt+0x18c0>
   1297c:	mov	r4, r2
   12980:	ldr	r3, [sp, #28]
   12984:	tst	r3, #2
   12988:	bne	129ec <__assert_fail@plt+0x19e8>
   1298c:	movw	r4, #33168	; 0x8190
   12990:	movt	r4, #2
   12994:	ldr	r1, [r4]
   12998:	add	r1, r1, #1
   1299c:	str	r1, [r4]
   129a0:	lsl	r1, r1, #4
   129a4:	ldr	r0, [r4, #8]
   129a8:	bl	15c98 <__assert_fail@plt+0x4c94>
   129ac:	str	r0, [r4, #8]
   129b0:	ldr	r3, [r4]
   129b4:	sub	r3, r3, #-268435455	; 0xf0000001
   129b8:	lsl	r3, r3, #4
   129bc:	add	r2, r0, r3
   129c0:	mvn	r4, #0
   129c4:	mvn	r5, #0
   129c8:	strd	r4, [r2, #8]
   129cc:	strd	r4, [r0, r3]
   129d0:	add	sp, sp, #44	; 0x2c
   129d4:	ldrd	r4, [sp]
   129d8:	ldrd	r6, [sp, #8]
   129dc:	ldrd	r8, [sp, #16]
   129e0:	ldrd	sl, [sp, #24]
   129e4:	add	sp, sp, #32
   129e8:	pop	{pc}		; (ldr pc, [sp], #4)
   129ec:	movw	r3, #33168	; 0x8190
   129f0:	movt	r3, #2
   129f4:	ldr	r6, [r3, #8]
   129f8:	mov	r2, #0
   129fc:	str	r2, [r3, #8]
   12a00:	str	r2, [r3]
   12a04:	str	r2, [r3, #4]
   12a08:	ldrd	r0, [r6]
   12a0c:	cmp	r1, #0
   12a10:	cmpeq	r0, #1
   12a14:	bhi	12a30 <__assert_fail@plt+0x1a2c>
   12a18:	cmp	r4, #1
   12a1c:	bls	12a8c <__assert_fail@plt+0x1a88>
   12a20:	mov	r5, r6
   12a24:	sub	r7, r6, #16
   12a28:	add	r7, r7, r4, lsl #4
   12a2c:	b	12a54 <__assert_fail@plt+0x1a50>
   12a30:	subs	r2, r0, #1
   12a34:	sbc	r3, r1, #0
   12a38:	mov	r0, #1
   12a3c:	mov	r1, #0
   12a40:	bl	12338 <__assert_fail@plt+0x1334>
   12a44:	b	12a18 <__assert_fail@plt+0x1a14>
   12a48:	add	r5, r5, #16
   12a4c:	cmp	r5, r7
   12a50:	beq	12a8c <__assert_fail@plt+0x1a88>
   12a54:	ldr	r3, [r5, #8]
   12a58:	ldr	r2, [r5, #12]
   12a5c:	adds	r8, r3, #1
   12a60:	adc	r9, r2, #0
   12a64:	ldrd	r0, [r5, #16]
   12a68:	cmp	r9, r1
   12a6c:	cmpeq	r8, r0
   12a70:	beq	12a48 <__assert_fail@plt+0x1a44>
   12a74:	subs	r2, r0, #1
   12a78:	sbc	r3, r1, #0
   12a7c:	mov	r0, r8
   12a80:	mov	r1, r9
   12a84:	bl	12338 <__assert_fail@plt+0x1334>
   12a88:	b	12a48 <__assert_fail@plt+0x1a44>
   12a8c:	add	r4, r6, r4, lsl #4
   12a90:	ldrd	r4, [r4, #-8]
   12a94:	mvn	r2, #0
   12a98:	mvn	r3, #0
   12a9c:	cmp	r5, r3
   12aa0:	cmpeq	r4, r2
   12aa4:	bne	12ab4 <__assert_fail@plt+0x1ab0>
   12aa8:	mov	r0, r6
   12aac:	bl	12d9c <__assert_fail@plt+0x1d98>
   12ab0:	b	1298c <__assert_fail@plt+0x1988>
   12ab4:	adds	r0, r4, #1
   12ab8:	adc	r1, r5, #0
   12abc:	bl	12338 <__assert_fail@plt+0x1334>
   12ac0:	b	12aa8 <__assert_fail@plt+0x1aa4>
   12ac4:	nop	{0}
   12ac8:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   12acc:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   12ad0:	movw	r3, #33184	; 0x81a0
   12ad4:	movt	r3, #2
   12ad8:	str	r0, [r3]
   12adc:	bx	lr
   12ae0:	movw	r3, #33184	; 0x81a0
   12ae4:	movt	r3, #2
   12ae8:	strb	r0, [r3, #4]
   12aec:	bx	lr
   12af0:	strd	r4, [sp, #-16]!
   12af4:	str	r6, [sp, #8]
   12af8:	str	lr, [sp, #12]
   12afc:	sub	sp, sp, #8
   12b00:	movw	r3, #33124	; 0x8164
   12b04:	movt	r3, #2
   12b08:	ldr	r0, [r3]
   12b0c:	bl	1621c <__assert_fail@plt+0x5218>
   12b10:	cmp	r0, #0
   12b14:	beq	12b3c <__assert_fail@plt+0x1b38>
   12b18:	movw	r3, #33184	; 0x81a0
   12b1c:	movt	r3, #2
   12b20:	ldrb	r3, [r3, #4]
   12b24:	cmp	r3, #0
   12b28:	beq	12b68 <__assert_fail@plt+0x1b64>
   12b2c:	bl	10ef0 <__errno_location@plt>
   12b30:	ldr	r3, [r0]
   12b34:	cmp	r3, #32
   12b38:	bne	12b68 <__assert_fail@plt+0x1b64>
   12b3c:	movw	r3, #33112	; 0x8158
   12b40:	movt	r3, #2
   12b44:	ldr	r0, [r3]
   12b48:	bl	1621c <__assert_fail@plt+0x5218>
   12b4c:	cmp	r0, #0
   12b50:	bne	12bf0 <__assert_fail@plt+0x1bec>
   12b54:	add	sp, sp, #8
   12b58:	ldrd	r4, [sp]
   12b5c:	ldr	r6, [sp, #8]
   12b60:	add	sp, sp, #12
   12b64:	pop	{pc}		; (ldr pc, [sp], #4)
   12b68:	mov	r2, #5
   12b6c:	movw	r1, #29568	; 0x7380
   12b70:	movt	r1, #1
   12b74:	mov	r0, #0
   12b78:	bl	10e0c <dcgettext@plt>
   12b7c:	mov	r4, r0
   12b80:	movw	r3, #33184	; 0x81a0
   12b84:	movt	r3, #2
   12b88:	ldr	r5, [r3]
   12b8c:	cmp	r5, #0
   12b90:	beq	12bd0 <__assert_fail@plt+0x1bcc>
   12b94:	bl	10ef0 <__errno_location@plt>
   12b98:	ldr	r6, [r0]
   12b9c:	mov	r0, r5
   12ba0:	bl	15460 <__assert_fail@plt+0x445c>
   12ba4:	str	r4, [sp]
   12ba8:	mov	r3, r0
   12bac:	movw	r2, #29580	; 0x738c
   12bb0:	movt	r2, #1
   12bb4:	mov	r1, r6
   12bb8:	mov	r0, #0
   12bbc:	bl	10e78 <error@plt>
   12bc0:	movw	r3, #33028	; 0x8104
   12bc4:	movt	r3, #2
   12bc8:	ldr	r0, [r3]
   12bcc:	bl	10dc4 <_exit@plt>
   12bd0:	bl	10ef0 <__errno_location@plt>
   12bd4:	mov	r3, r4
   12bd8:	movw	r2, #29584	; 0x7390
   12bdc:	movt	r2, #1
   12be0:	ldr	r1, [r0]
   12be4:	mov	r0, #0
   12be8:	bl	10e78 <error@plt>
   12bec:	b	12bc0 <__assert_fail@plt+0x1bbc>
   12bf0:	movw	r3, #33028	; 0x8104
   12bf4:	movt	r3, #2
   12bf8:	ldr	r0, [r3]
   12bfc:	bl	10dc4 <_exit@plt>
   12c00:	strd	r4, [sp, #-12]!
   12c04:	str	lr, [sp, #8]
   12c08:	sub	sp, sp, #20
   12c0c:	ldr	r1, [sp, #40]	; 0x28
   12c10:	str	r1, [sp, #8]
   12c14:	ldrd	r4, [sp, #32]
   12c18:	strd	r4, [sp]
   12c1c:	bl	10d88 <posix_fadvise64@plt>
   12c20:	add	sp, sp, #20
   12c24:	ldrd	r4, [sp]
   12c28:	add	sp, sp, #8
   12c2c:	pop	{pc}		; (ldr pc, [sp], #4)
   12c30:	cmp	r0, #0
   12c34:	bxeq	lr
   12c38:	str	r4, [sp, #-8]!
   12c3c:	str	lr, [sp, #4]
   12c40:	sub	sp, sp, #16
   12c44:	mov	r4, r1
   12c48:	bl	10f2c <fileno@plt>
   12c4c:	str	r4, [sp, #8]
   12c50:	mov	r2, #0
   12c54:	mov	r3, #0
   12c58:	strd	r2, [sp]
   12c5c:	bl	10d88 <posix_fadvise64@plt>
   12c60:	add	sp, sp, #16
   12c64:	ldr	r4, [sp]
   12c68:	add	sp, sp, #4
   12c6c:	pop	{pc}		; (ldr pc, [sp], #4)
   12c70:	strd	r4, [sp, #-16]!
   12c74:	str	r6, [sp, #8]
   12c78:	str	lr, [sp, #12]
   12c7c:	sub	sp, sp, #8
   12c80:	mov	r4, r0
   12c84:	bl	10f2c <fileno@plt>
   12c88:	cmp	r0, #0
   12c8c:	blt	12d04 <__assert_fail@plt+0x1d00>
   12c90:	mov	r0, r4
   12c94:	bl	10e9c <__freading@plt>
   12c98:	cmp	r0, #0
   12c9c:	beq	12cd0 <__assert_fail@plt+0x1ccc>
   12ca0:	mov	r0, r4
   12ca4:	bl	10f2c <fileno@plt>
   12ca8:	mov	r3, #1
   12cac:	str	r3, [sp]
   12cb0:	mov	r2, #0
   12cb4:	mov	r3, #0
   12cb8:	bl	10e48 <lseek64@plt>
   12cbc:	mvn	r2, #0
   12cc0:	mvn	r3, #0
   12cc4:	cmp	r1, r3
   12cc8:	cmpeq	r0, r2
   12ccc:	beq	12d10 <__assert_fail@plt+0x1d0c>
   12cd0:	mov	r0, r4
   12cd4:	bl	12d2c <__assert_fail@plt+0x1d28>
   12cd8:	cmp	r0, #0
   12cdc:	beq	12d10 <__assert_fail@plt+0x1d0c>
   12ce0:	bl	10ef0 <__errno_location@plt>
   12ce4:	mov	r5, r0
   12ce8:	ldr	r6, [r0]
   12cec:	mov	r0, r4
   12cf0:	bl	10f50 <fclose@plt>
   12cf4:	cmp	r6, #0
   12cf8:	strne	r6, [r5]
   12cfc:	mvnne	r0, #0
   12d00:	b	12d18 <__assert_fail@plt+0x1d14>
   12d04:	mov	r0, r4
   12d08:	bl	10f50 <fclose@plt>
   12d0c:	b	12d18 <__assert_fail@plt+0x1d14>
   12d10:	mov	r0, r4
   12d14:	bl	10f50 <fclose@plt>
   12d18:	add	sp, sp, #8
   12d1c:	ldrd	r4, [sp]
   12d20:	ldr	r6, [sp, #8]
   12d24:	add	sp, sp, #12
   12d28:	pop	{pc}		; (ldr pc, [sp], #4)
   12d2c:	str	r4, [sp, #-8]!
   12d30:	str	lr, [sp, #4]
   12d34:	sub	sp, sp, #8
   12d38:	subs	r4, r0, #0
   12d3c:	beq	12d50 <__assert_fail@plt+0x1d4c>
   12d40:	mov	r0, r4
   12d44:	bl	10e9c <__freading@plt>
   12d48:	cmp	r0, #0
   12d4c:	bne	12d68 <__assert_fail@plt+0x1d64>
   12d50:	mov	r0, r4
   12d54:	bl	10d94 <fflush@plt>
   12d58:	add	sp, sp, #8
   12d5c:	ldr	r4, [sp]
   12d60:	add	sp, sp, #4
   12d64:	pop	{pc}		; (ldr pc, [sp], #4)
   12d68:	ldr	r3, [r4]
   12d6c:	tst	r3, #256	; 0x100
   12d70:	bne	12d80 <__assert_fail@plt+0x1d7c>
   12d74:	mov	r0, r4
   12d78:	bl	10d94 <fflush@plt>
   12d7c:	b	12d58 <__assert_fail@plt+0x1d54>
   12d80:	mov	r3, #1
   12d84:	str	r3, [sp]
   12d88:	mov	r2, #0
   12d8c:	mov	r3, #0
   12d90:	mov	r0, r4
   12d94:	bl	12dfc <__assert_fail@plt+0x1df8>
   12d98:	b	12d74 <__assert_fail@plt+0x1d70>
   12d9c:	strd	r4, [sp, #-12]!
   12da0:	str	lr, [sp, #8]
   12da4:	sub	sp, sp, #12
   12da8:	mov	r5, r0
   12dac:	bl	10ef0 <__errno_location@plt>
   12db0:	mov	r4, r0
   12db4:	ldr	r3, [r0]
   12db8:	str	r3, [sp]
   12dbc:	str	r3, [sp, #4]
   12dc0:	mov	r3, #0
   12dc4:	str	r3, [r0]
   12dc8:	mov	r0, r5
   12dcc:	bl	10dac <free@plt>
   12dd0:	ldr	r3, [r4]
   12dd4:	clz	r3, r3
   12dd8:	lsr	r3, r3, #5
   12ddc:	add	r2, sp, #8
   12de0:	add	r3, r2, r3, lsl #2
   12de4:	ldr	r3, [r3, #-8]
   12de8:	str	r3, [r4]
   12dec:	add	sp, sp, #12
   12df0:	ldrd	r4, [sp]
   12df4:	add	sp, sp, #8
   12df8:	pop	{pc}		; (ldr pc, [sp], #4)
   12dfc:	str	r4, [sp, #-16]!
   12e00:	strd	r6, [sp, #4]
   12e04:	str	lr, [sp, #12]
   12e08:	sub	sp, sp, #8
   12e0c:	mov	r4, r0
   12e10:	mov	r6, r2
   12e14:	mov	r7, r3
   12e18:	ldr	r2, [r0, #8]
   12e1c:	ldr	r3, [r0, #4]
   12e20:	cmp	r2, r3
   12e24:	beq	12e54 <__assert_fail@plt+0x1e50>
   12e28:	ldr	r3, [sp, #24]
   12e2c:	str	r3, [sp]
   12e30:	mov	r2, r6
   12e34:	mov	r3, r7
   12e38:	mov	r0, r4
   12e3c:	bl	10f5c <fseeko64@plt>
   12e40:	add	sp, sp, #8
   12e44:	ldr	r4, [sp]
   12e48:	ldrd	r6, [sp, #4]
   12e4c:	add	sp, sp, #12
   12e50:	pop	{pc}		; (ldr pc, [sp], #4)
   12e54:	ldr	r2, [r0, #20]
   12e58:	ldr	r3, [r0, #16]
   12e5c:	cmp	r2, r3
   12e60:	bne	12e28 <__assert_fail@plt+0x1e24>
   12e64:	ldr	r3, [r0, #36]	; 0x24
   12e68:	cmp	r3, #0
   12e6c:	bne	12e28 <__assert_fail@plt+0x1e24>
   12e70:	bl	10f2c <fileno@plt>
   12e74:	ldr	r3, [sp, #24]
   12e78:	str	r3, [sp]
   12e7c:	mov	r2, r6
   12e80:	mov	r3, r7
   12e84:	bl	10e48 <lseek64@plt>
   12e88:	mvn	r2, #0
   12e8c:	mvn	r3, #0
   12e90:	cmp	r1, r3
   12e94:	cmpeq	r0, r2
   12e98:	beq	12eb4 <__assert_fail@plt+0x1eb0>
   12e9c:	ldr	r3, [r4]
   12ea0:	bic	r3, r3, #16
   12ea4:	str	r3, [r4]
   12ea8:	strd	r0, [r4, #80]	; 0x50
   12eac:	mov	r0, #0
   12eb0:	b	12e40 <__assert_fail@plt+0x1e3c>
   12eb4:	mvn	r0, #0
   12eb8:	b	12e40 <__assert_fail@plt+0x1e3c>
   12ebc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12ec0:	strd	r6, [sp, #8]
   12ec4:	strd	r8, [sp, #16]
   12ec8:	strd	sl, [sp, #24]
   12ecc:	str	lr, [sp, #32]
   12ed0:	sub	sp, sp, #36	; 0x24
   12ed4:	str	r0, [sp, #16]
   12ed8:	str	r1, [sp, #20]
   12edc:	str	r2, [sp, #12]
   12ee0:	mov	fp, r3
   12ee4:	ldr	r3, [r0]
   12ee8:	str	r3, [sp, #4]
   12eec:	ldr	r8, [r1]
   12ef0:	cmp	r3, #0
   12ef4:	beq	12f58 <__assert_fail@plt+0x1f54>
   12ef8:	ldr	r3, [sp, #12]
   12efc:	cmp	r8, r3
   12f00:	bcc	1319c <__assert_fail@plt+0x2198>
   12f04:	subs	r5, r8, r3
   12f08:	moveq	r3, #1
   12f0c:	movne	r3, #0
   12f10:	cmp	r8, fp
   12f14:	movcc	r3, #0
   12f18:	andcs	r3, r3, #1
   12f1c:	cmp	r3, #0
   12f20:	bne	1319c <__assert_fail@plt+0x2198>
   12f24:	ldr	r2, [sp, #72]	; 0x48
   12f28:	cmn	r2, #1
   12f2c:	beq	12f80 <__assert_fail@plt+0x1f7c>
   12f30:	ldr	r2, [sp, #76]	; 0x4c
   12f34:	ldr	r1, [sp, #72]	; 0x48
   12f38:	cmn	r2, #1
   12f3c:	moveq	r2, r1
   12f40:	str	r2, [sp, #76]	; 0x4c
   12f44:	ldr	r2, [sp, #4]
   12f48:	ldr	r1, [sp, #12]
   12f4c:	add	r6, r2, r1
   12f50:	str	r3, [sp, #8]
   12f54:	b	13114 <__assert_fail@plt+0x2110>
   12f58:	cmp	fp, #64	; 0x40
   12f5c:	movcc	r8, fp
   12f60:	movcs	r8, #64	; 0x40
   12f64:	mov	r0, r8
   12f68:	bl	16184 <__assert_fail@plt+0x5180>
   12f6c:	subs	r3, r0, #0
   12f70:	str	r3, [sp, #4]
   12f74:	bne	12ef8 <__assert_fail@plt+0x1ef4>
   12f78:	mvn	r0, #0
   12f7c:	b	131b4 <__assert_fail@plt+0x21b0>
   12f80:	ldr	r2, [sp, #76]	; 0x4c
   12f84:	str	r2, [sp, #72]	; 0x48
   12f88:	b	12f44 <__assert_fail@plt+0x1f40>
   12f8c:	ldr	r3, [sp, #28]
   12f90:	ldr	r2, [sp, #76]	; 0x4c
   12f94:	ldr	r1, [sp, #72]	; 0x48
   12f98:	mov	r0, r7
   12f9c:	bl	131d0 <__assert_fail@plt+0x21cc>
   12fa0:	cmp	r0, #0
   12fa4:	beq	13060 <__assert_fail@plt+0x205c>
   12fa8:	sub	r0, r0, r7
   12fac:	add	r0, r0, #1
   12fb0:	str	r0, [sp, #28]
   12fb4:	mov	sl, #0
   12fb8:	mov	r9, #1
   12fbc:	b	1313c <__assert_fail@plt+0x2138>
   12fc0:	ldr	r3, [sp, #80]	; 0x50
   12fc4:	ldr	r3, [r3, #4]
   12fc8:	ldr	r2, [sp, #80]	; 0x50
   12fcc:	ldr	r2, [r2, #8]
   12fd0:	cmp	r3, r2
   12fd4:	bcs	1300c <__assert_fail@plt+0x2008>
   12fd8:	add	r2, r3, #1
   12fdc:	ldr	r1, [sp, #80]	; 0x50
   12fe0:	str	r2, [r1, #4]
   12fe4:	ldrb	sl, [r3]
   12fe8:	ldr	r3, [sp, #72]	; 0x48
   12fec:	ldr	r2, [sp, #76]	; 0x4c
   12ff0:	cmp	r2, sl
   12ff4:	cmpne	r3, sl
   12ff8:	moveq	r9, #1
   12ffc:	movne	r9, #0
   13000:	mov	r3, #1
   13004:	str	r3, [sp, #28]
   13008:	b	1313c <__assert_fail@plt+0x2138>
   1300c:	ldr	r0, [sp, #80]	; 0x50
   13010:	bl	10f74 <__uflow@plt>
   13014:	mov	sl, r0
   13018:	cmn	r0, #1
   1301c:	bne	12fe8 <__assert_fail@plt+0x1fe4>
   13020:	ldr	r3, [sp, #4]
   13024:	cmp	r6, r3
   13028:	beq	1319c <__assert_fail@plt+0x2198>
   1302c:	mov	r3, #0
   13030:	strb	r3, [r6]
   13034:	ldr	r3, [sp, #4]
   13038:	ldr	r2, [sp, #12]
   1303c:	add	r0, r3, r2
   13040:	sub	r0, r6, r0
   13044:	ldr	r2, [sp, #16]
   13048:	str	r3, [r2]
   1304c:	ldr	r3, [sp, #20]
   13050:	str	r8, [r3]
   13054:	cmp	r0, #0
   13058:	mvneq	r0, #0
   1305c:	b	131b4 <__assert_fail@plt+0x21b0>
   13060:	ldr	r9, [sp, #8]
   13064:	mov	sl, #0
   13068:	b	1313c <__assert_fail@plt+0x2138>
   1306c:	cmp	r8, #63	; 0x3f
   13070:	addls	r4, r8, #64	; 0x40
   13074:	lslhi	r4, r8, #1
   13078:	ldr	r2, [sp, #4]
   1307c:	sub	r6, r6, r2
   13080:	sub	r2, r4, r6
   13084:	cmp	r3, r2
   13088:	addhi	r4, r3, r6
   1308c:	cmp	r4, fp
   13090:	cmpls	r8, r4
   13094:	movcs	r3, #1
   13098:	movcc	r3, #0
   1309c:	cmp	r3, #0
   130a0:	movne	r4, fp
   130a4:	ldr	r2, [sp, #12]
   130a8:	sub	r3, r4, r2
   130ac:	cmp	r3, #0
   130b0:	bge	130c0 <__assert_fail@plt+0x20bc>
   130b4:	add	r4, r2, #-2147483648	; 0x80000000
   130b8:	cmp	r8, r4
   130bc:	beq	13198 <__assert_fail@plt+0x2194>
   130c0:	sub	r5, r4, r6
   130c4:	mov	r1, r4
   130c8:	ldr	r0, [sp, #4]
   130cc:	bl	161c0 <__assert_fail@plt+0x51bc>
   130d0:	cmp	r0, #0
   130d4:	beq	1319c <__assert_fail@plt+0x2198>
   130d8:	add	r6, r0, r6
   130dc:	mov	r8, r4
   130e0:	str	r0, [sp, #4]
   130e4:	b	13160 <__assert_fail@plt+0x215c>
   130e8:	add	r6, r6, r4
   130ec:	sub	r5, r5, r4
   130f0:	cmp	r7, #0
   130f4:	beq	1310c <__assert_fail@plt+0x2108>
   130f8:	ldr	r1, [sp, #28]
   130fc:	ldr	r0, [sp, #80]	; 0x50
   13100:	bl	162e4 <__assert_fail@plt+0x52e0>
   13104:	cmp	r0, #0
   13108:	bne	1319c <__assert_fail@plt+0x2198>
   1310c:	cmp	r9, #0
   13110:	bne	1302c <__assert_fail@plt+0x2028>
   13114:	add	r1, sp, #28
   13118:	ldr	r0, [sp, #80]	; 0x50
   1311c:	bl	162a8 <__assert_fail@plt+0x52a4>
   13120:	subs	r7, r0, #0
   13124:	beq	12fc0 <__assert_fail@plt+0x1fbc>
   13128:	ldr	r3, [sp, #72]	; 0x48
   1312c:	cmn	r3, #1
   13130:	bne	12f8c <__assert_fail@plt+0x1f88>
   13134:	ldr	r9, [sp, #8]
   13138:	mov	sl, #0
   1313c:	ldr	r3, [sp, #28]
   13140:	add	r3, r3, #1
   13144:	cmp	r8, fp
   13148:	movcs	r2, #0
   1314c:	movcc	r2, #1
   13150:	cmp	r3, r5
   13154:	movls	r2, #0
   13158:	cmp	r2, #0
   1315c:	bne	1306c <__assert_fail@plt+0x2068>
   13160:	cmp	r5, #1
   13164:	bls	130f0 <__assert_fail@plt+0x20ec>
   13168:	sub	r4, r5, #1
   1316c:	ldr	r3, [sp, #28]
   13170:	cmp	r4, r3
   13174:	movcs	r4, r3
   13178:	cmp	r7, #0
   1317c:	strbeq	sl, [r6]
   13180:	beq	130e8 <__assert_fail@plt+0x20e4>
   13184:	mov	r2, r4
   13188:	mov	r1, r7
   1318c:	mov	r0, r6
   13190:	bl	10dd0 <memcpy@plt>
   13194:	b	130e8 <__assert_fail@plt+0x20e4>
   13198:	mov	r8, r4
   1319c:	ldr	r3, [sp, #16]
   131a0:	ldr	r2, [sp, #4]
   131a4:	str	r2, [r3]
   131a8:	ldr	r3, [sp, #20]
   131ac:	str	r8, [r3]
   131b0:	mvn	r0, #0
   131b4:	add	sp, sp, #36	; 0x24
   131b8:	ldrd	r4, [sp]
   131bc:	ldrd	r6, [sp, #8]
   131c0:	ldrd	r8, [sp, #16]
   131c4:	ldrd	sl, [sp, #24]
   131c8:	add	sp, sp, #32
   131cc:	pop	{pc}		; (ldr pc, [sp], #4)
   131d0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   131d4:	strd	r6, [sp, #8]
   131d8:	str	r8, [sp, #16]
   131dc:	str	lr, [sp, #20]
   131e0:	uxtb	r4, r1
   131e4:	uxtb	r5, r2
   131e8:	cmp	r4, r5
   131ec:	beq	13250 <__assert_fail@plt+0x224c>
   131f0:	cmp	r3, #0
   131f4:	beq	13260 <__assert_fail@plt+0x225c>
   131f8:	tst	r0, #3
   131fc:	beq	13260 <__assert_fail@plt+0x225c>
   13200:	ldrb	ip, [r0]
   13204:	cmp	r4, ip
   13208:	cmpne	r5, ip
   1320c:	beq	1323c <__assert_fail@plt+0x2238>
   13210:	add	ip, r0, #1
   13214:	mov	r0, ip
   13218:	subs	r3, r3, #1
   1321c:	beq	13260 <__assert_fail@plt+0x225c>
   13220:	tst	ip, #3
   13224:	beq	13260 <__assert_fail@plt+0x225c>
   13228:	ldrb	lr, [r0]
   1322c:	add	ip, ip, #1
   13230:	cmp	lr, r5
   13234:	cmpne	lr, r4
   13238:	bne	13214 <__assert_fail@plt+0x2210>
   1323c:	ldrd	r4, [sp]
   13240:	ldrd	r6, [sp, #8]
   13244:	ldr	r8, [sp, #16]
   13248:	add	sp, sp, #20
   1324c:	pop	{pc}		; (ldr pc, [sp], #4)
   13250:	mov	r2, r3
   13254:	uxtb	r1, r1
   13258:	bl	10f44 <memchr@plt>
   1325c:	b	1323c <__assert_fail@plt+0x2238>
   13260:	lsl	r6, r1, #8
   13264:	uxth	r6, r6
   13268:	uxtb	r1, r1
   1326c:	orr	r1, r6, r1
   13270:	lsl	r7, r2, #8
   13274:	uxth	r7, r7
   13278:	uxtb	r2, r2
   1327c:	orr	r2, r7, r2
   13280:	orr	r6, r1, r1, lsl #16
   13284:	orr	r7, r2, r2, lsl #16
   13288:	cmp	r3, #3
   1328c:	bls	13318 <__assert_fail@plt+0x2314>
   13290:	ldr	r2, [r0]
   13294:	eor	lr, r6, r2
   13298:	eor	ip, r7, r2
   1329c:	movw	r2, #65279	; 0xfeff
   132a0:	movt	r2, #65278	; 0xfefe
   132a4:	add	r1, lr, r2
   132a8:	bic	r1, r1, lr
   132ac:	add	r2, ip, r2
   132b0:	bic	r2, r2, ip
   132b4:	orr	r2, r1, r2
   132b8:	movw	r1, #32896	; 0x8080
   132bc:	bfi	r1, r1, #16, #16
   132c0:	tst	r2, r1
   132c4:	addeq	ip, r0, #4
   132c8:	movweq	lr, #65279	; 0xfeff
   132cc:	movteq	lr, #65278	; 0xfefe
   132d0:	bne	13320 <__assert_fail@plt+0x231c>
   132d4:	mov	r0, ip
   132d8:	sub	r3, r3, #4
   132dc:	cmp	r3, #3
   132e0:	bls	13318 <__assert_fail@plt+0x2314>
   132e4:	ldr	r1, [ip], #4
   132e8:	eor	r8, r1, r6
   132ec:	eor	r1, r1, r7
   132f0:	add	r2, r8, lr
   132f4:	bic	r2, r2, r8
   132f8:	add	r8, r1, lr
   132fc:	bic	r1, r8, r1
   13300:	orr	r2, r2, r1
   13304:	movw	r1, #32896	; 0x8080
   13308:	bfi	r1, r1, #16, #16
   1330c:	tst	r2, r1
   13310:	beq	132d4 <__assert_fail@plt+0x22d0>
   13314:	b	13320 <__assert_fail@plt+0x231c>
   13318:	cmp	r3, #0
   1331c:	beq	13360 <__assert_fail@plt+0x235c>
   13320:	ldrb	r2, [r0]
   13324:	cmp	r4, r2
   13328:	cmpne	r5, r2
   1332c:	beq	1323c <__assert_fail@plt+0x2238>
   13330:	add	r2, r0, #1
   13334:	add	r3, r0, r3
   13338:	mov	r0, r2
   1333c:	cmp	r2, r3
   13340:	beq	13358 <__assert_fail@plt+0x2354>
   13344:	ldrb	r1, [r2], #1
   13348:	cmp	r1, r4
   1334c:	cmpne	r1, r5
   13350:	bne	13338 <__assert_fail@plt+0x2334>
   13354:	b	1323c <__assert_fail@plt+0x2238>
   13358:	mov	r0, #0
   1335c:	b	1323c <__assert_fail@plt+0x2238>
   13360:	mov	r0, #0
   13364:	b	1323c <__assert_fail@plt+0x2238>
   13368:	strd	r4, [sp, #-16]!
   1336c:	str	r6, [sp, #8]
   13370:	str	lr, [sp, #12]
   13374:	subs	r4, r0, #0
   13378:	beq	13414 <__assert_fail@plt+0x2410>
   1337c:	mov	r1, #47	; 0x2f
   13380:	mov	r0, r4
   13384:	bl	10f98 <strrchr@plt>
   13388:	subs	r5, r0, #0
   1338c:	beq	133ec <__assert_fail@plt+0x23e8>
   13390:	add	r6, r5, #1
   13394:	sub	r3, r6, r4
   13398:	cmp	r3, #6
   1339c:	ble	133ec <__assert_fail@plt+0x23e8>
   133a0:	mov	r2, #7
   133a4:	movw	r1, #29644	; 0x73cc
   133a8:	movt	r1, #1
   133ac:	sub	r0, r5, #6
   133b0:	bl	10fe0 <strncmp@plt>
   133b4:	cmp	r0, #0
   133b8:	bne	133ec <__assert_fail@plt+0x23e8>
   133bc:	mov	r2, #3
   133c0:	movw	r1, #29652	; 0x73d4
   133c4:	movt	r1, #1
   133c8:	mov	r0, r6
   133cc:	bl	10fe0 <strncmp@plt>
   133d0:	cmp	r0, #0
   133d4:	movne	r4, r6
   133d8:	bne	133ec <__assert_fail@plt+0x23e8>
   133dc:	add	r4, r5, #4
   133e0:	movw	r3, #33096	; 0x8148
   133e4:	movt	r3, #2
   133e8:	str	r4, [r3]
   133ec:	movw	r3, #33192	; 0x81a8
   133f0:	movt	r3, #2
   133f4:	str	r4, [r3]
   133f8:	movw	r3, #33100	; 0x814c
   133fc:	movt	r3, #2
   13400:	str	r4, [r3]
   13404:	ldrd	r4, [sp]
   13408:	ldr	r6, [sp, #8]
   1340c:	add	sp, sp, #12
   13410:	pop	{pc}		; (ldr pc, [sp], #4)
   13414:	movw	r3, #33112	; 0x8158
   13418:	movt	r3, #2
   1341c:	ldr	r3, [r3]
   13420:	mov	r2, #55	; 0x37
   13424:	mov	r1, #1
   13428:	movw	r0, #29588	; 0x7394
   1342c:	movt	r0, #1
   13430:	bl	10e3c <fwrite@plt>
   13434:	bl	10fec <abort@plt>
   13438:	mov	r2, #0
   1343c:	mov	r3, #0
   13440:	strd	r2, [r0]
   13444:	strd	r2, [r0, #8]
   13448:	strd	r2, [r0, #16]
   1344c:	strd	r2, [r0, #24]
   13450:	strd	r2, [r0, #32]
   13454:	strd	r2, [r0, #40]	; 0x28
   13458:	cmp	r1, #10
   1345c:	beq	13468 <__assert_fail@plt+0x2464>
   13460:	str	r1, [r0]
   13464:	bx	lr
   13468:	str	r4, [sp, #-8]!
   1346c:	str	lr, [sp, #4]
   13470:	bl	10fec <abort@plt>
   13474:	strd	r4, [sp, #-16]!
   13478:	str	r6, [sp, #8]
   1347c:	str	lr, [sp, #12]
   13480:	mov	r5, r0
   13484:	mov	r6, r1
   13488:	mov	r2, #5
   1348c:	mov	r1, r0
   13490:	mov	r0, #0
   13494:	bl	10e0c <dcgettext@plt>
   13498:	mov	r4, r0
   1349c:	cmp	r5, r0
   134a0:	beq	134b8 <__assert_fail@plt+0x24b4>
   134a4:	mov	r0, r4
   134a8:	ldrd	r4, [sp]
   134ac:	ldr	r6, [sp, #8]
   134b0:	add	sp, sp, #12
   134b4:	pop	{pc}		; (ldr pc, [sp], #4)
   134b8:	bl	16448 <__assert_fail@plt+0x5444>
   134bc:	ldrb	r3, [r0]
   134c0:	bic	r3, r3, #32
   134c4:	cmp	r3, #85	; 0x55
   134c8:	bne	1354c <__assert_fail@plt+0x2548>
   134cc:	ldrb	r3, [r0, #1]
   134d0:	bic	r3, r3, #32
   134d4:	cmp	r3, #84	; 0x54
   134d8:	bne	13510 <__assert_fail@plt+0x250c>
   134dc:	ldrb	r3, [r0, #2]
   134e0:	bic	r3, r3, #32
   134e4:	cmp	r3, #70	; 0x46
   134e8:	bne	13510 <__assert_fail@plt+0x250c>
   134ec:	ldrb	r3, [r0, #3]
   134f0:	cmp	r3, #45	; 0x2d
   134f4:	bne	13510 <__assert_fail@plt+0x250c>
   134f8:	ldrb	r3, [r0, #4]
   134fc:	cmp	r3, #56	; 0x38
   13500:	bne	13510 <__assert_fail@plt+0x250c>
   13504:	ldrb	r3, [r0, #5]
   13508:	cmp	r3, #0
   1350c:	beq	1352c <__assert_fail@plt+0x2528>
   13510:	movw	r4, #29740	; 0x742c
   13514:	movt	r4, #1
   13518:	movw	r3, #29760	; 0x7440
   1351c:	movt	r3, #1
   13520:	cmp	r6, #9
   13524:	movne	r4, r3
   13528:	b	134a4 <__assert_fail@plt+0x24a0>
   1352c:	ldrb	r2, [r4]
   13530:	movw	r4, #29756	; 0x743c
   13534:	movt	r4, #1
   13538:	movw	r3, #29744	; 0x7430
   1353c:	movt	r3, #1
   13540:	cmp	r2, #96	; 0x60
   13544:	movne	r4, r3
   13548:	b	134a4 <__assert_fail@plt+0x24a0>
   1354c:	cmp	r3, #71	; 0x47
   13550:	bne	13510 <__assert_fail@plt+0x250c>
   13554:	ldrb	r3, [r0, #1]
   13558:	bic	r3, r3, #32
   1355c:	cmp	r3, #66	; 0x42
   13560:	bne	13510 <__assert_fail@plt+0x250c>
   13564:	ldrb	r3, [r0, #2]
   13568:	cmp	r3, #49	; 0x31
   1356c:	bne	13510 <__assert_fail@plt+0x250c>
   13570:	ldrb	r3, [r0, #3]
   13574:	cmp	r3, #56	; 0x38
   13578:	bne	13510 <__assert_fail@plt+0x250c>
   1357c:	ldrb	r3, [r0, #4]
   13580:	cmp	r3, #48	; 0x30
   13584:	bne	13510 <__assert_fail@plt+0x250c>
   13588:	ldrb	r3, [r0, #5]
   1358c:	cmp	r3, #51	; 0x33
   13590:	bne	13510 <__assert_fail@plt+0x250c>
   13594:	ldrb	r3, [r0, #6]
   13598:	cmp	r3, #48	; 0x30
   1359c:	bne	13510 <__assert_fail@plt+0x250c>
   135a0:	ldrb	r3, [r0, #7]
   135a4:	cmp	r3, #0
   135a8:	bne	13510 <__assert_fail@plt+0x250c>
   135ac:	ldrb	r2, [r4]
   135b0:	movw	r4, #29752	; 0x7438
   135b4:	movt	r4, #1
   135b8:	movw	r3, #29748	; 0x7434
   135bc:	movt	r3, #1
   135c0:	cmp	r2, #96	; 0x60
   135c4:	movne	r4, r3
   135c8:	b	134a4 <__assert_fail@plt+0x24a0>
   135cc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   135d0:	strd	r6, [sp, #8]
   135d4:	strd	r8, [sp, #16]
   135d8:	strd	sl, [sp, #24]
   135dc:	str	lr, [sp, #32]
   135e0:	sub	sp, sp, #116	; 0x74
   135e4:	str	r0, [sp, #64]	; 0x40
   135e8:	mov	r8, r1
   135ec:	str	r2, [sp, #48]	; 0x30
   135f0:	str	r3, [sp, #24]
   135f4:	ldr	r7, [sp, #152]	; 0x98
   135f8:	bl	10e54 <__ctype_get_mb_cur_max@plt>
   135fc:	str	r0, [sp, #76]	; 0x4c
   13600:	ldr	r3, [sp, #156]	; 0x9c
   13604:	ubfx	r3, r3, #1, #1
   13608:	str	r3, [sp, #32]
   1360c:	mov	r3, #1
   13610:	str	r3, [sp, #40]	; 0x28
   13614:	mov	r3, #0
   13618:	str	r3, [sp, #68]	; 0x44
   1361c:	str	r3, [sp, #36]	; 0x24
   13620:	str	r3, [sp, #28]
   13624:	str	r3, [sp, #52]	; 0x34
   13628:	str	r3, [sp, #60]	; 0x3c
   1362c:	str	r3, [sp, #72]	; 0x48
   13630:	movw	r3, #29764	; 0x7444
   13634:	movt	r3, #1
   13638:	str	r3, [sp, #80]	; 0x50
   1363c:	mov	r9, r8
   13640:	mov	sl, r7
   13644:	cmp	sl, #10
   13648:	ldrls	pc, [pc, sl, lsl #2]
   1364c:	b	13810 <__assert_fail@plt+0x280c>
   13650:			; <UNDEFINED> instruction: 0x000136b0
   13654:	andeq	r3, r1, r4, lsl #13
   13658:	andeq	r3, r1, r8, ror #15
   1365c:	andeq	r3, r1, ip, ror r6
   13660:	muleq	r1, ip, r7
   13664:	andeq	r3, r1, r0, asr #13
   13668:	andeq	r4, r1, ip, lsl #21
   1366c:	andeq	r3, r1, r4, lsl r8
   13670:	strdeq	r3, [r1], -ip
   13674:	strdeq	r3, [r1], -ip
   13678:	strdeq	r3, [r1], -ip
   1367c:	mov	r3, #1
   13680:	str	r3, [sp, #28]
   13684:	mov	r3, #1
   13688:	str	r3, [sp, #32]
   1368c:	str	r3, [sp, #52]	; 0x34
   13690:	movw	r3, #29760	; 0x7440
   13694:	movt	r3, #1
   13698:	str	r3, [sp, #60]	; 0x3c
   1369c:	mov	fp, #0
   136a0:	mov	sl, #2
   136a4:	mov	r6, #0
   136a8:	ldr	r8, [sp, #64]	; 0x40
   136ac:	b	13f24 <__assert_fail@plt+0x2f20>
   136b0:	mov	fp, sl
   136b4:	mov	r3, #0
   136b8:	str	r3, [sp, #32]
   136bc:	b	136a4 <__assert_fail@plt+0x26a0>
   136c0:	ldr	r3, [sp, #32]
   136c4:	cmp	r3, #0
   136c8:	bne	13828 <__assert_fail@plt+0x2824>
   136cc:	cmp	r9, #0
   136d0:	beq	1384c <__assert_fail@plt+0x2848>
   136d4:	mov	r3, #34	; 0x22
   136d8:	ldr	r2, [sp, #64]	; 0x40
   136dc:	strb	r3, [r2]
   136e0:	mov	fp, #1
   136e4:	str	fp, [sp, #28]
   136e8:	str	fp, [sp, #52]	; 0x34
   136ec:	movw	r3, #29740	; 0x742c
   136f0:	movt	r3, #1
   136f4:	str	r3, [sp, #60]	; 0x3c
   136f8:	b	136a4 <__assert_fail@plt+0x26a0>
   136fc:	cmp	sl, #10
   13700:	bne	13734 <__assert_fail@plt+0x2730>
   13704:	ldr	r3, [sp, #32]
   13708:	cmp	r3, #0
   1370c:	movne	fp, #0
   13710:	beq	1375c <__assert_fail@plt+0x2758>
   13714:	ldr	r0, [sp, #168]	; 0xa8
   13718:	bl	10ed8 <strlen@plt>
   1371c:	str	r0, [sp, #52]	; 0x34
   13720:	ldr	r3, [sp, #168]	; 0xa8
   13724:	str	r3, [sp, #60]	; 0x3c
   13728:	mov	r3, #1
   1372c:	str	r3, [sp, #28]
   13730:	b	136a4 <__assert_fail@plt+0x26a0>
   13734:	mov	r1, sl
   13738:	ldr	r0, [sp, #80]	; 0x50
   1373c:	bl	13474 <__assert_fail@plt+0x2470>
   13740:	str	r0, [sp, #164]	; 0xa4
   13744:	mov	r1, sl
   13748:	movw	r0, #29760	; 0x7440
   1374c:	movt	r0, #1
   13750:	bl	13474 <__assert_fail@plt+0x2470>
   13754:	str	r0, [sp, #168]	; 0xa8
   13758:	b	13704 <__assert_fail@plt+0x2700>
   1375c:	ldr	r3, [sp, #164]	; 0xa4
   13760:	ldrb	r3, [r3]
   13764:	cmp	r3, #0
   13768:	beq	13794 <__assert_fail@plt+0x2790>
   1376c:	ldr	r2, [sp, #164]	; 0xa4
   13770:	mov	fp, #0
   13774:	ldr	r1, [sp, #64]	; 0x40
   13778:	cmp	r9, fp
   1377c:	strbhi	r3, [r1, fp]
   13780:	add	fp, fp, #1
   13784:	ldrb	r3, [r2, #1]!
   13788:	cmp	r3, #0
   1378c:	bne	13778 <__assert_fail@plt+0x2774>
   13790:	b	13714 <__assert_fail@plt+0x2710>
   13794:	mov	fp, #0
   13798:	b	13714 <__assert_fail@plt+0x2710>
   1379c:	ldr	r3, [sp, #32]
   137a0:	cmp	r3, #0
   137a4:	bne	13684 <__assert_fail@plt+0x2680>
   137a8:	mov	r3, #1
   137ac:	str	r3, [sp, #28]
   137b0:	cmp	r9, #0
   137b4:	beq	13868 <__assert_fail@plt+0x2864>
   137b8:	mov	r3, #39	; 0x27
   137bc:	ldr	r2, [sp, #64]	; 0x40
   137c0:	strb	r3, [r2]
   137c4:	mov	r3, #0
   137c8:	str	r3, [sp, #32]
   137cc:	mov	fp, #1
   137d0:	str	fp, [sp, #52]	; 0x34
   137d4:	movw	r3, #29760	; 0x7440
   137d8:	movt	r3, #1
   137dc:	str	r3, [sp, #60]	; 0x3c
   137e0:	mov	sl, #2
   137e4:	b	136a4 <__assert_fail@plt+0x26a0>
   137e8:	ldr	r3, [sp, #32]
   137ec:	cmp	r3, #0
   137f0:	beq	137b0 <__assert_fail@plt+0x27ac>
   137f4:	mov	r3, #1
   137f8:	str	r3, [sp, #52]	; 0x34
   137fc:	movw	r3, #29760	; 0x7440
   13800:	movt	r3, #1
   13804:	str	r3, [sp, #60]	; 0x3c
   13808:	mov	fp, #0
   1380c:	b	136a4 <__assert_fail@plt+0x26a0>
   13810:	bl	10fec <abort@plt>
   13814:	mov	fp, #0
   13818:	str	fp, [sp, #32]
   1381c:	mov	r3, #1
   13820:	str	r3, [sp, #28]
   13824:	b	136a4 <__assert_fail@plt+0x26a0>
   13828:	ldr	r3, [sp, #32]
   1382c:	str	r3, [sp, #28]
   13830:	mov	r3, #1
   13834:	str	r3, [sp, #52]	; 0x34
   13838:	movw	r3, #29740	; 0x742c
   1383c:	movt	r3, #1
   13840:	str	r3, [sp, #60]	; 0x3c
   13844:	mov	fp, #0
   13848:	b	136a4 <__assert_fail@plt+0x26a0>
   1384c:	mov	fp, #1
   13850:	str	fp, [sp, #28]
   13854:	str	fp, [sp, #52]	; 0x34
   13858:	movw	r3, #29740	; 0x742c
   1385c:	movt	r3, #1
   13860:	str	r3, [sp, #60]	; 0x3c
   13864:	b	136a4 <__assert_fail@plt+0x26a0>
   13868:	mov	r3, #0
   1386c:	str	r3, [sp, #32]
   13870:	mov	fp, #1
   13874:	str	fp, [sp, #52]	; 0x34
   13878:	movw	r3, #29760	; 0x7440
   1387c:	movt	r3, #1
   13880:	str	r3, [sp, #60]	; 0x3c
   13884:	mov	sl, #2
   13888:	b	136a4 <__assert_fail@plt+0x26a0>
   1388c:	mov	r3, r2
   13890:	add	r4, r6, r2
   13894:	ldr	r2, [sp, #24]
   13898:	cmp	r3, #1
   1389c:	movls	r3, #0
   138a0:	movhi	r3, #1
   138a4:	cmn	r2, #1
   138a8:	movne	r3, #0
   138ac:	cmp	r3, #0
   138b0:	beq	138c0 <__assert_fail@plt+0x28bc>
   138b4:	ldr	r0, [sp, #48]	; 0x30
   138b8:	bl	10ed8 <strlen@plt>
   138bc:	str	r0, [sp, #24]
   138c0:	ldr	r3, [sp, #24]
   138c4:	cmp	r4, r3
   138c8:	bhi	14ab4 <__assert_fail@plt+0x3ab0>
   138cc:	ldr	r3, [sp, #48]	; 0x30
   138d0:	add	r4, r3, r6
   138d4:	ldr	r2, [sp, #52]	; 0x34
   138d8:	ldr	r1, [sp, #60]	; 0x3c
   138dc:	mov	r0, r4
   138e0:	bl	10df4 <memcmp@plt>
   138e4:	cmp	r0, #0
   138e8:	bne	14ab4 <__assert_fail@plt+0x3ab0>
   138ec:	ldr	r3, [sp, #32]
   138f0:	cmp	r3, #0
   138f4:	bne	13b04 <__assert_fail@plt+0x2b00>
   138f8:	ldrb	r4, [r4]
   138fc:	cmp	r4, #126	; 0x7e
   13900:	ldrls	pc, [pc, r4, lsl #2]
   13904:	b	143b8 <__assert_fail@plt+0x33b4>
   13908:	andeq	r3, r1, r8, asr #22
   1390c:			; <UNDEFINED> instruction: 0x000143b8
   13910:			; <UNDEFINED> instruction: 0x000143b8
   13914:			; <UNDEFINED> instruction: 0x000143b8
   13918:			; <UNDEFINED> instruction: 0x000143b8
   1391c:			; <UNDEFINED> instruction: 0x000143b8
   13920:			; <UNDEFINED> instruction: 0x000143b8
   13924:	andeq	r4, r1, r0, ror #4
   13928:	andeq	r3, r1, r4, ror #27
   1392c:	andeq	r4, r1, r8, lsl #3
   13930:	andeq	r4, r1, r4, lsr r2
   13934:	muleq	r1, ip, r1
   13938:	strdeq	r3, [r1], -r8
   1393c:	andeq	r3, r1, ip, lsl #28
   13940:			; <UNDEFINED> instruction: 0x000143b8
   13944:			; <UNDEFINED> instruction: 0x000143b8
   13948:			; <UNDEFINED> instruction: 0x000143b8
   1394c:			; <UNDEFINED> instruction: 0x000143b8
   13950:			; <UNDEFINED> instruction: 0x000143b8
   13954:			; <UNDEFINED> instruction: 0x000143b8
   13958:			; <UNDEFINED> instruction: 0x000143b8
   1395c:			; <UNDEFINED> instruction: 0x000143b8
   13960:			; <UNDEFINED> instruction: 0x000143b8
   13964:			; <UNDEFINED> instruction: 0x000143b8
   13968:			; <UNDEFINED> instruction: 0x000143b8
   1396c:			; <UNDEFINED> instruction: 0x000143b8
   13970:			; <UNDEFINED> instruction: 0x000143b8
   13974:			; <UNDEFINED> instruction: 0x000143b8
   13978:			; <UNDEFINED> instruction: 0x000143b8
   1397c:			; <UNDEFINED> instruction: 0x000143b8
   13980:			; <UNDEFINED> instruction: 0x000143b8
   13984:			; <UNDEFINED> instruction: 0x000143b8
   13988:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1398c:	strdeq	r4, [r1], -r8
   13990:	strdeq	r4, [r1], -r8
   13994:	muleq	r1, r0, r2
   13998:	strdeq	r4, [r1], -r8
   1399c:	andeq	r4, r1, r8, lsl r8
   139a0:	strdeq	r4, [r1], -r8
   139a4:	andeq	r4, r1, r8, lsl r3
   139a8:	strdeq	r4, [r1], -r8
   139ac:	strdeq	r4, [r1], -r8
   139b0:	strdeq	r4, [r1], -r8
   139b4:	andeq	r4, r1, r8, lsl r8
   139b8:	andeq	r4, r1, r8, lsl r8
   139bc:	andeq	r4, r1, r8, lsl r8
   139c0:	andeq	r4, r1, r8, lsl r8
   139c4:	andeq	r4, r1, r8, lsl r8
   139c8:	andeq	r4, r1, r8, lsl r8
   139cc:	andeq	r4, r1, r8, lsl r8
   139d0:	andeq	r4, r1, r8, lsl r8
   139d4:	andeq	r4, r1, r8, lsl r8
   139d8:	andeq	r4, r1, r8, lsl r8
   139dc:	andeq	r4, r1, r8, lsl r8
   139e0:	andeq	r4, r1, r8, lsl r8
   139e4:	andeq	r4, r1, r8, lsl r8
   139e8:	andeq	r4, r1, r8, lsl r8
   139ec:	andeq	r4, r1, r8, lsl r8
   139f0:	andeq	r4, r1, r8, lsl r8
   139f4:	strdeq	r4, [r1], -r8
   139f8:	strdeq	r4, [r1], -r8
   139fc:	strdeq	r4, [r1], -r8
   13a00:	strdeq	r4, [r1], -r8
   13a04:	andeq	r3, r1, r8, ror ip
   13a08:			; <UNDEFINED> instruction: 0x000143b8
   13a0c:	andeq	r4, r1, r8, lsl r8
   13a10:	andeq	r4, r1, r8, lsl r8
   13a14:	andeq	r4, r1, r8, lsl r8
   13a18:	andeq	r4, r1, r8, lsl r8
   13a1c:	andeq	r4, r1, r8, lsl r8
   13a20:	andeq	r4, r1, r8, lsl r8
   13a24:	andeq	r4, r1, r8, lsl r8
   13a28:	andeq	r4, r1, r8, lsl r8
   13a2c:	andeq	r4, r1, r8, lsl r8
   13a30:	andeq	r4, r1, r8, lsl r8
   13a34:	andeq	r4, r1, r8, lsl r8
   13a38:	andeq	r4, r1, r8, lsl r8
   13a3c:	andeq	r4, r1, r8, lsl r8
   13a40:	andeq	r4, r1, r8, lsl r8
   13a44:	andeq	r4, r1, r8, lsl r8
   13a48:	andeq	r4, r1, r8, lsl r8
   13a4c:	andeq	r4, r1, r8, lsl r8
   13a50:	andeq	r4, r1, r8, lsl r8
   13a54:	andeq	r4, r1, r8, lsl r8
   13a58:	andeq	r4, r1, r8, lsl r8
   13a5c:	andeq	r4, r1, r8, lsl r8
   13a60:	andeq	r4, r1, r8, lsl r8
   13a64:	andeq	r4, r1, r8, lsl r8
   13a68:	andeq	r4, r1, r8, lsl r8
   13a6c:	andeq	r4, r1, r8, lsl r8
   13a70:	andeq	r4, r1, r8, lsl r8
   13a74:	strdeq	r4, [r1], -r8
   13a78:			; <UNDEFINED> instruction: 0x000141b0
   13a7c:	andeq	r4, r1, r8, lsl r8
   13a80:	strdeq	r4, [r1], -r8
   13a84:	andeq	r4, r1, r8, lsl r8
   13a88:	strdeq	r4, [r1], -r8
   13a8c:	andeq	r4, r1, r8, lsl r8
   13a90:	andeq	r4, r1, r8, lsl r8
   13a94:	andeq	r4, r1, r8, lsl r8
   13a98:	andeq	r4, r1, r8, lsl r8
   13a9c:	andeq	r4, r1, r8, lsl r8
   13aa0:	andeq	r4, r1, r8, lsl r8
   13aa4:	andeq	r4, r1, r8, lsl r8
   13aa8:	andeq	r4, r1, r8, lsl r8
   13aac:	andeq	r4, r1, r8, lsl r8
   13ab0:	andeq	r4, r1, r8, lsl r8
   13ab4:	andeq	r4, r1, r8, lsl r8
   13ab8:	andeq	r4, r1, r8, lsl r8
   13abc:	andeq	r4, r1, r8, lsl r8
   13ac0:	andeq	r4, r1, r8, lsl r8
   13ac4:	andeq	r4, r1, r8, lsl r8
   13ac8:	andeq	r4, r1, r8, lsl r8
   13acc:	andeq	r4, r1, r8, lsl r8
   13ad0:	andeq	r4, r1, r8, lsl r8
   13ad4:	andeq	r4, r1, r8, lsl r8
   13ad8:	andeq	r4, r1, r8, lsl r8
   13adc:	andeq	r4, r1, r8, lsl r8
   13ae0:	andeq	r4, r1, r8, lsl r8
   13ae4:	andeq	r4, r1, r8, lsl r8
   13ae8:	andeq	r4, r1, r8, lsl r8
   13aec:	andeq	r4, r1, r8, lsl r8
   13af0:	andeq	r4, r1, r8, lsl r8
   13af4:	andeq	r4, r1, r0, ror r2
   13af8:	strdeq	r4, [r1], -r8
   13afc:	andeq	r4, r1, r0, ror r2
   13b00:	muleq	r1, r0, r2
   13b04:	mov	r8, r9
   13b08:	mov	r7, sl
   13b0c:	b	14a0c <__assert_fail@plt+0x3a08>
   13b10:	ldr	r3, [sp, #28]
   13b14:	cmp	r3, #0
   13b18:	bne	13b38 <__assert_fail@plt+0x2b34>
   13b1c:	ldr	r3, [sp, #156]	; 0x9c
   13b20:	tst	r3, #1
   13b24:	bne	13f20 <__assert_fail@plt+0x2f1c>
   13b28:	ldr	r3, [sp, #28]
   13b2c:	str	r3, [sp, #44]	; 0x2c
   13b30:	mov	r5, r3
   13b34:	b	13e40 <__assert_fail@plt+0x2e3c>
   13b38:	ldr	r3, [sp, #32]
   13b3c:	cmp	r3, #0
   13b40:	bne	149bc <__assert_fail@plt+0x39b8>
   13b44:	str	r3, [sp, #44]	; 0x2c
   13b48:	ldr	r3, [sp, #36]	; 0x24
   13b4c:	eor	r3, r3, #1
   13b50:	cmp	sl, #2
   13b54:	movne	r3, #0
   13b58:	andeq	r3, r3, #1
   13b5c:	cmp	r3, #0
   13b60:	beq	13bb8 <__assert_fail@plt+0x2bb4>
   13b64:	cmp	r9, fp
   13b68:	movhi	r2, #39	; 0x27
   13b6c:	strbhi	r2, [r8, fp]
   13b70:	add	r2, fp, #1
   13b74:	cmp	r9, r2
   13b78:	movhi	r1, #36	; 0x24
   13b7c:	strbhi	r1, [r8, r2]
   13b80:	add	r2, fp, #2
   13b84:	cmp	r9, r2
   13b88:	movhi	r1, #39	; 0x27
   13b8c:	strbhi	r1, [r8, r2]
   13b90:	add	r2, fp, #3
   13b94:	cmp	r9, r2
   13b98:	bls	14a78 <__assert_fail@plt+0x3a74>
   13b9c:	mov	r1, #92	; 0x5c
   13ba0:	strb	r1, [r8, r2]
   13ba4:	add	fp, fp, #4
   13ba8:	str	r3, [sp, #36]	; 0x24
   13bac:	mov	r5, #0
   13bb0:	mov	r4, #48	; 0x30
   13bb4:	b	13e8c <__assert_fail@plt+0x2e88>
   13bb8:	cmp	r9, fp
   13bbc:	bhi	13be4 <__assert_fail@plt+0x2be0>
   13bc0:	add	r1, fp, #1
   13bc4:	ldr	r2, [sp, #56]	; 0x38
   13bc8:	cmp	r2, #0
   13bcc:	bne	13c0c <__assert_fail@plt+0x2c08>
   13bd0:	mov	r3, r5
   13bd4:	ldr	r5, [sp, #56]	; 0x38
   13bd8:	mov	fp, r1
   13bdc:	mov	r4, #48	; 0x30
   13be0:	b	13e40 <__assert_fail@plt+0x2e3c>
   13be4:	mov	r2, #92	; 0x5c
   13be8:	strb	r2, [r8, fp]
   13bec:	add	r1, fp, #1
   13bf0:	ldr	r2, [sp, #56]	; 0x38
   13bf4:	cmp	r2, #0
   13bf8:	moveq	r3, r5
   13bfc:	moveq	r5, r2
   13c00:	moveq	fp, r1
   13c04:	moveq	r4, #48	; 0x30
   13c08:	beq	13e8c <__assert_fail@plt+0x2e88>
   13c0c:	add	r2, r6, #1
   13c10:	ldr	r0, [sp, #24]
   13c14:	cmp	r2, r0
   13c18:	bcs	13c34 <__assert_fail@plt+0x2c30>
   13c1c:	ldr	r0, [sp, #48]	; 0x30
   13c20:	ldrb	r2, [r0, r2]
   13c24:	sub	r2, r2, #48	; 0x30
   13c28:	uxtb	r2, r2
   13c2c:	cmp	r2, #9
   13c30:	bls	13c4c <__assert_fail@plt+0x2c48>
   13c34:	mov	r2, r3
   13c38:	mov	r3, r5
   13c3c:	mov	r5, r2
   13c40:	mov	fp, r1
   13c44:	mov	r4, #48	; 0x30
   13c48:	b	13e64 <__assert_fail@plt+0x2e60>
   13c4c:	cmp	r9, r1
   13c50:	movhi	r2, #48	; 0x30
   13c54:	strbhi	r2, [r8, r1]
   13c58:	add	r2, fp, #2
   13c5c:	cmp	r9, r2
   13c60:	movhi	r1, #48	; 0x30
   13c64:	strbhi	r1, [r8, r2]
   13c68:	add	r1, fp, #3
   13c6c:	b	13c34 <__assert_fail@plt+0x2c30>
   13c70:	mov	r3, #0
   13c74:	str	r3, [sp, #44]	; 0x2c
   13c78:	cmp	sl, #2
   13c7c:	beq	13c98 <__assert_fail@plt+0x2c94>
   13c80:	cmp	sl, #5
   13c84:	beq	13cb0 <__assert_fail@plt+0x2cac>
   13c88:	mov	r5, #0
   13c8c:	mov	r3, r5
   13c90:	mov	r4, #63	; 0x3f
   13c94:	b	13e40 <__assert_fail@plt+0x2e3c>
   13c98:	ldr	r3, [sp, #32]
   13c9c:	cmp	r3, #0
   13ca0:	bne	149c8 <__assert_fail@plt+0x39c4>
   13ca4:	mov	r5, r3
   13ca8:	mov	r4, #63	; 0x3f
   13cac:	b	143a8 <__assert_fail@plt+0x33a4>
   13cb0:	ldr	r3, [sp, #156]	; 0x9c
   13cb4:	tst	r3, #4
   13cb8:	beq	147e0 <__assert_fail@plt+0x37dc>
   13cbc:	add	r2, r6, #2
   13cc0:	ldr	r3, [sp, #24]
   13cc4:	cmp	r2, r3
   13cc8:	bcs	147f0 <__assert_fail@plt+0x37ec>
   13ccc:	ldr	r3, [sp, #48]	; 0x30
   13cd0:	add	r3, r3, r6
   13cd4:	ldrb	r4, [r3, #1]
   13cd8:	cmp	r4, #63	; 0x3f
   13cdc:	movne	r5, #0
   13ce0:	movne	r3, r5
   13ce4:	movne	r4, #63	; 0x3f
   13ce8:	bne	13e40 <__assert_fail@plt+0x2e3c>
   13cec:	ldr	r3, [sp, #48]	; 0x30
   13cf0:	ldrb	r1, [r3, r2]
   13cf4:	sub	r3, r1, #33	; 0x21
   13cf8:	cmp	r3, #29
   13cfc:	ldrls	pc, [pc, r3, lsl #2]
   13d00:	b	14800 <__assert_fail@plt+0x37fc>
   13d04:	andeq	r3, r1, ip, ror sp
   13d08:	andeq	r4, r1, r0, lsl #16
   13d0c:	andeq	r4, r1, r0, lsl #16
   13d10:	andeq	r4, r1, r0, lsl #16
   13d14:	andeq	r4, r1, r0, lsl #16
   13d18:	andeq	r4, r1, r0, lsl #16
   13d1c:	andeq	r3, r1, ip, ror sp
   13d20:	andeq	r3, r1, ip, ror sp
   13d24:	andeq	r3, r1, ip, ror sp
   13d28:	andeq	r4, r1, r0, lsl #16
   13d2c:	andeq	r4, r1, r0, lsl #16
   13d30:	andeq	r4, r1, r0, lsl #16
   13d34:	andeq	r3, r1, ip, ror sp
   13d38:	andeq	r4, r1, r0, lsl #16
   13d3c:	andeq	r3, r1, ip, ror sp
   13d40:	andeq	r4, r1, r0, lsl #16
   13d44:	andeq	r4, r1, r0, lsl #16
   13d48:	andeq	r4, r1, r0, lsl #16
   13d4c:	andeq	r4, r1, r0, lsl #16
   13d50:	andeq	r4, r1, r0, lsl #16
   13d54:	andeq	r4, r1, r0, lsl #16
   13d58:	andeq	r4, r1, r0, lsl #16
   13d5c:	andeq	r4, r1, r0, lsl #16
   13d60:	andeq	r4, r1, r0, lsl #16
   13d64:	andeq	r4, r1, r0, lsl #16
   13d68:	andeq	r4, r1, r0, lsl #16
   13d6c:	andeq	r4, r1, r0, lsl #16
   13d70:	andeq	r3, r1, ip, ror sp
   13d74:	andeq	r3, r1, ip, ror sp
   13d78:	andeq	r3, r1, ip, ror sp
   13d7c:	ldr	r3, [sp, #32]
   13d80:	cmp	r3, #0
   13d84:	bne	14a6c <__assert_fail@plt+0x3a68>
   13d88:	cmp	r9, fp
   13d8c:	movhi	r3, #63	; 0x3f
   13d90:	strbhi	r3, [r8, fp]
   13d94:	add	r3, fp, #1
   13d98:	cmp	r9, r3
   13d9c:	movhi	r0, #34	; 0x22
   13da0:	strbhi	r0, [r8, r3]
   13da4:	add	r3, fp, #2
   13da8:	cmp	r9, r3
   13dac:	movhi	r0, #34	; 0x22
   13db0:	strbhi	r0, [r8, r3]
   13db4:	add	r3, fp, #3
   13db8:	cmp	r9, r3
   13dbc:	movhi	r0, #63	; 0x3f
   13dc0:	strbhi	r0, [r8, r3]
   13dc4:	add	fp, fp, #4
   13dc8:	ldr	r3, [sp, #32]
   13dcc:	mov	r5, r3
   13dd0:	mov	r4, r1
   13dd4:	mov	r6, r2
   13dd8:	b	13e40 <__assert_fail@plt+0x2e3c>
   13ddc:	mov	r3, #0
   13de0:	str	r3, [sp, #44]	; 0x2c
   13de4:	mov	r4, #8
   13de8:	mov	r3, #98	; 0x62
   13dec:	b	13e2c <__assert_fail@plt+0x2e28>
   13df0:	mov	r3, #0
   13df4:	str	r3, [sp, #44]	; 0x2c
   13df8:	mov	r4, #12
   13dfc:	mov	r3, #102	; 0x66
   13e00:	b	13e2c <__assert_fail@plt+0x2e28>
   13e04:	mov	r3, #0
   13e08:	str	r3, [sp, #44]	; 0x2c
   13e0c:	mov	r4, #13
   13e10:	mov	r3, #114	; 0x72
   13e14:	ldr	r2, [sp, #32]
   13e18:	cmp	sl, #2
   13e1c:	movne	r2, #0
   13e20:	andeq	r2, r2, #1
   13e24:	cmp	r2, #0
   13e28:	bne	1424c <__assert_fail@plt+0x3248>
   13e2c:	ldr	r2, [sp, #28]
   13e30:	cmp	r2, #0
   13e34:	bne	14834 <__assert_fail@plt+0x3830>
   13e38:	mov	r5, r2
   13e3c:	mov	r3, r2
   13e40:	ldr	r2, [sp, #28]
   13e44:	eor	r2, r2, #1
   13e48:	cmp	sl, #2
   13e4c:	orreq	r2, r2, #1
   13e50:	eor	r2, r2, #1
   13e54:	ldr	r1, [sp, #32]
   13e58:	orr	r2, r1, r2
   13e5c:	tst	r2, #255	; 0xff
   13e60:	beq	13e8c <__assert_fail@plt+0x2e88>
   13e64:	ldr	r2, [sp, #160]	; 0xa0
   13e68:	cmp	r2, #0
   13e6c:	beq	13e8c <__assert_fail@plt+0x2e88>
   13e70:	ubfx	r1, r4, #5, #8
   13e74:	and	r2, r4, #31
   13e78:	ldr	r0, [sp, #160]	; 0xa0
   13e7c:	ldr	r1, [r0, r1, lsl #2]
   13e80:	lsr	r2, r1, r2
   13e84:	tst	r2, #1
   13e88:	bne	13e98 <__assert_fail@plt+0x2e94>
   13e8c:	ldr	r2, [sp, #44]	; 0x2c
   13e90:	cmp	r2, #0
   13e94:	beq	141ec <__assert_fail@plt+0x31e8>
   13e98:	ldr	r3, [sp, #32]
   13e9c:	cmp	r3, #0
   13ea0:	bne	149ec <__assert_fail@plt+0x39e8>
   13ea4:	ldr	r3, [sp, #36]	; 0x24
   13ea8:	eor	r3, r3, #1
   13eac:	cmp	sl, #2
   13eb0:	movne	r3, #0
   13eb4:	andeq	r3, r3, #1
   13eb8:	cmp	r3, #0
   13ebc:	beq	13ef4 <__assert_fail@plt+0x2ef0>
   13ec0:	cmp	r9, fp
   13ec4:	movhi	r2, #39	; 0x27
   13ec8:	strbhi	r2, [r8, fp]
   13ecc:	add	r2, fp, #1
   13ed0:	cmp	r9, r2
   13ed4:	movhi	r1, #36	; 0x24
   13ed8:	strbhi	r1, [r8, r2]
   13edc:	add	r2, fp, #2
   13ee0:	cmp	r9, r2
   13ee4:	movhi	r1, #39	; 0x27
   13ee8:	strbhi	r1, [r8, r2]
   13eec:	add	fp, fp, #3
   13ef0:	str	r3, [sp, #36]	; 0x24
   13ef4:	cmp	r9, fp
   13ef8:	movhi	r3, #92	; 0x5c
   13efc:	strbhi	r3, [r8, fp]
   13f00:	add	fp, fp, #1
   13f04:	cmp	fp, r9
   13f08:	strbcc	r4, [r8, fp]
   13f0c:	add	fp, fp, #1
   13f10:	cmp	r5, #0
   13f14:	ldr	r3, [sp, #40]	; 0x28
   13f18:	moveq	r3, r5
   13f1c:	str	r3, [sp, #40]	; 0x28
   13f20:	add	r6, r6, #1
   13f24:	ldr	r3, [sp, #24]
   13f28:	cmn	r3, #1
   13f2c:	beq	1485c <__assert_fail@plt+0x3858>
   13f30:	ldr	r3, [sp, #24]
   13f34:	subs	r5, r3, r6
   13f38:	movne	r5, #1
   13f3c:	cmp	r5, #0
   13f40:	beq	14870 <__assert_fail@plt+0x386c>
   13f44:	ldr	r3, [sp, #28]
   13f48:	cmp	sl, #2
   13f4c:	moveq	r3, #0
   13f50:	andne	r3, r3, #1
   13f54:	str	r3, [sp, #56]	; 0x38
   13f58:	ldr	r2, [sp, #52]	; 0x34
   13f5c:	adds	r7, r2, #0
   13f60:	movne	r7, #1
   13f64:	ands	r3, r3, r7
   13f68:	str	r3, [sp, #44]	; 0x2c
   13f6c:	bne	1388c <__assert_fail@plt+0x2888>
   13f70:	ldr	r3, [sp, #48]	; 0x30
   13f74:	ldrb	r4, [r3, r6]
   13f78:	cmp	r4, #126	; 0x7e
   13f7c:	ldrls	pc, [pc, r4, lsl #2]
   13f80:	b	143b8 <__assert_fail@plt+0x33b4>
   13f84:	andeq	r3, r1, r0, lsl fp
   13f88:			; <UNDEFINED> instruction: 0x000143b8
   13f8c:			; <UNDEFINED> instruction: 0x000143b8
   13f90:			; <UNDEFINED> instruction: 0x000143b8
   13f94:			; <UNDEFINED> instruction: 0x000143b8
   13f98:			; <UNDEFINED> instruction: 0x000143b8
   13f9c:			; <UNDEFINED> instruction: 0x000143b8
   13fa0:	andeq	r4, r1, r8, asr r2
   13fa4:	andeq	r3, r1, r4, ror #27
   13fa8:	andeq	r4, r1, r8, lsl #3
   13fac:	andeq	r4, r1, ip, lsr #4
   13fb0:	muleq	r1, ip, r1
   13fb4:	strdeq	r3, [r1], -r8
   13fb8:	andeq	r3, r1, ip, lsl #28
   13fbc:			; <UNDEFINED> instruction: 0x000143b8
   13fc0:			; <UNDEFINED> instruction: 0x000143b8
   13fc4:			; <UNDEFINED> instruction: 0x000143b8
   13fc8:			; <UNDEFINED> instruction: 0x000143b8
   13fcc:			; <UNDEFINED> instruction: 0x000143b8
   13fd0:			; <UNDEFINED> instruction: 0x000143b8
   13fd4:			; <UNDEFINED> instruction: 0x000143b8
   13fd8:			; <UNDEFINED> instruction: 0x000143b8
   13fdc:			; <UNDEFINED> instruction: 0x000143b8
   13fe0:			; <UNDEFINED> instruction: 0x000143b8
   13fe4:			; <UNDEFINED> instruction: 0x000143b8
   13fe8:			; <UNDEFINED> instruction: 0x000143b8
   13fec:			; <UNDEFINED> instruction: 0x000143b8
   13ff0:			; <UNDEFINED> instruction: 0x000143b8
   13ff4:			; <UNDEFINED> instruction: 0x000143b8
   13ff8:			; <UNDEFINED> instruction: 0x000143b8
   13ffc:			; <UNDEFINED> instruction: 0x000143b8
   14000:			; <UNDEFINED> instruction: 0x000143b8
   14004:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14008:	ldrdeq	r4, [r1], -r0
   1400c:	ldrdeq	r4, [r1], -r0
   14010:	muleq	r1, r0, r2
   14014:	ldrdeq	r4, [r1], -r0
   14018:	ldrdeq	r4, [r1], -r8
   1401c:	ldrdeq	r4, [r1], -r0
   14020:	andeq	r4, r1, r8, lsl r3
   14024:	ldrdeq	r4, [r1], -r0
   14028:	ldrdeq	r4, [r1], -r0
   1402c:	ldrdeq	r4, [r1], -r0
   14030:	ldrdeq	r4, [r1], -r8
   14034:	ldrdeq	r4, [r1], -r8
   14038:	ldrdeq	r4, [r1], -r8
   1403c:	ldrdeq	r4, [r1], -r8
   14040:	ldrdeq	r4, [r1], -r8
   14044:	ldrdeq	r4, [r1], -r8
   14048:	ldrdeq	r4, [r1], -r8
   1404c:	ldrdeq	r4, [r1], -r8
   14050:	ldrdeq	r4, [r1], -r8
   14054:	ldrdeq	r4, [r1], -r8
   14058:	ldrdeq	r4, [r1], -r8
   1405c:	ldrdeq	r4, [r1], -r8
   14060:	ldrdeq	r4, [r1], -r8
   14064:	ldrdeq	r4, [r1], -r8
   14068:	ldrdeq	r4, [r1], -r8
   1406c:	ldrdeq	r4, [r1], -r8
   14070:	ldrdeq	r4, [r1], -r0
   14074:	ldrdeq	r4, [r1], -r0
   14078:	ldrdeq	r4, [r1], -r0
   1407c:	ldrdeq	r4, [r1], -r0
   14080:	andeq	r3, r1, r8, ror ip
   14084:			; <UNDEFINED> instruction: 0x000143b8
   14088:	ldrdeq	r4, [r1], -r8
   1408c:	ldrdeq	r4, [r1], -r8
   14090:	ldrdeq	r4, [r1], -r8
   14094:	ldrdeq	r4, [r1], -r8
   14098:	ldrdeq	r4, [r1], -r8
   1409c:	ldrdeq	r4, [r1], -r8
   140a0:	ldrdeq	r4, [r1], -r8
   140a4:	ldrdeq	r4, [r1], -r8
   140a8:	ldrdeq	r4, [r1], -r8
   140ac:	ldrdeq	r4, [r1], -r8
   140b0:	ldrdeq	r4, [r1], -r8
   140b4:	ldrdeq	r4, [r1], -r8
   140b8:	ldrdeq	r4, [r1], -r8
   140bc:	ldrdeq	r4, [r1], -r8
   140c0:	ldrdeq	r4, [r1], -r8
   140c4:	ldrdeq	r4, [r1], -r8
   140c8:	ldrdeq	r4, [r1], -r8
   140cc:	ldrdeq	r4, [r1], -r8
   140d0:	ldrdeq	r4, [r1], -r8
   140d4:	ldrdeq	r4, [r1], -r8
   140d8:	ldrdeq	r4, [r1], -r8
   140dc:	ldrdeq	r4, [r1], -r8
   140e0:	ldrdeq	r4, [r1], -r8
   140e4:	ldrdeq	r4, [r1], -r8
   140e8:	ldrdeq	r4, [r1], -r8
   140ec:	ldrdeq	r4, [r1], -r8
   140f0:	ldrdeq	r4, [r1], -r0
   140f4:			; <UNDEFINED> instruction: 0x000141b0
   140f8:	ldrdeq	r4, [r1], -r8
   140fc:	ldrdeq	r4, [r1], -r0
   14100:	ldrdeq	r4, [r1], -r8
   14104:	ldrdeq	r4, [r1], -r0
   14108:	ldrdeq	r4, [r1], -r8
   1410c:	ldrdeq	r4, [r1], -r8
   14110:	ldrdeq	r4, [r1], -r8
   14114:	ldrdeq	r4, [r1], -r8
   14118:	ldrdeq	r4, [r1], -r8
   1411c:	ldrdeq	r4, [r1], -r8
   14120:	ldrdeq	r4, [r1], -r8
   14124:	ldrdeq	r4, [r1], -r8
   14128:	ldrdeq	r4, [r1], -r8
   1412c:	ldrdeq	r4, [r1], -r8
   14130:	ldrdeq	r4, [r1], -r8
   14134:	ldrdeq	r4, [r1], -r8
   14138:	ldrdeq	r4, [r1], -r8
   1413c:	ldrdeq	r4, [r1], -r8
   14140:	ldrdeq	r4, [r1], -r8
   14144:	ldrdeq	r4, [r1], -r8
   14148:	ldrdeq	r4, [r1], -r8
   1414c:	ldrdeq	r4, [r1], -r8
   14150:	ldrdeq	r4, [r1], -r8
   14154:	ldrdeq	r4, [r1], -r8
   14158:	ldrdeq	r4, [r1], -r8
   1415c:	ldrdeq	r4, [r1], -r8
   14160:	ldrdeq	r4, [r1], -r8
   14164:	ldrdeq	r4, [r1], -r8
   14168:	ldrdeq	r4, [r1], -r8
   1416c:	ldrdeq	r4, [r1], -r8
   14170:	andeq	r4, r1, r0, ror r2
   14174:	ldrdeq	r4, [r1], -r0
   14178:	andeq	r4, r1, r0, ror r2
   1417c:	muleq	r1, r0, r2
   14180:	mov	r3, #0
   14184:	str	r3, [sp, #44]	; 0x2c
   14188:	mov	r4, #9
   1418c:	mov	r3, #116	; 0x74
   14190:	b	13e14 <__assert_fail@plt+0x2e10>
   14194:	mov	r3, #0
   14198:	str	r3, [sp, #44]	; 0x2c
   1419c:	mov	r4, #11
   141a0:	mov	r3, #118	; 0x76
   141a4:	b	13e2c <__assert_fail@plt+0x2e28>
   141a8:	mov	r3, #0
   141ac:	str	r3, [sp, #44]	; 0x2c
   141b0:	cmp	sl, #2
   141b4:	beq	141d8 <__assert_fail@plt+0x31d4>
   141b8:	ldr	r3, [sp, #28]
   141bc:	ldr	r2, [sp, #32]
   141c0:	and	r3, r3, r2
   141c4:	tst	r7, r3
   141c8:	bne	1484c <__assert_fail@plt+0x3848>
   141cc:	mov	r4, #92	; 0x5c
   141d0:	mov	r3, r4
   141d4:	b	13e2c <__assert_fail@plt+0x2e28>
   141d8:	ldr	r3, [sp, #32]
   141dc:	cmp	r3, #0
   141e0:	bne	149d4 <__assert_fail@plt+0x39d0>
   141e4:	mov	r5, r3
   141e8:	mov	r4, #92	; 0x5c
   141ec:	eor	r3, r3, #1
   141f0:	ldr	r2, [sp, #36]	; 0x24
   141f4:	and	r3, r3, r2
   141f8:	tst	r3, #255	; 0xff
   141fc:	beq	13f04 <__assert_fail@plt+0x2f00>
   14200:	cmp	r9, fp
   14204:	movhi	r3, #39	; 0x27
   14208:	strbhi	r3, [r8, fp]
   1420c:	add	r3, fp, #1
   14210:	cmp	r9, r3
   14214:	movhi	r2, #39	; 0x27
   14218:	strbhi	r2, [r8, r3]
   1421c:	add	fp, fp, #2
   14220:	mov	r3, #0
   14224:	str	r3, [sp, #36]	; 0x24
   14228:	b	13f04 <__assert_fail@plt+0x2f00>
   1422c:	mov	r3, #110	; 0x6e
   14230:	b	13e14 <__assert_fail@plt+0x2e10>
   14234:	mov	r3, #110	; 0x6e
   14238:	b	13e14 <__assert_fail@plt+0x2e10>
   1423c:	mov	r3, #0
   14240:	str	r3, [sp, #44]	; 0x2c
   14244:	mov	r3, #110	; 0x6e
   14248:	b	13e14 <__assert_fail@plt+0x2e10>
   1424c:	mov	r8, r9
   14250:	mov	r7, #2
   14254:	b	149f4 <__assert_fail@plt+0x39f0>
   14258:	mov	r3, #97	; 0x61
   1425c:	b	13e2c <__assert_fail@plt+0x2e28>
   14260:	mov	r3, #97	; 0x61
   14264:	b	13e2c <__assert_fail@plt+0x2e28>
   14268:	mov	r3, #0
   1426c:	str	r3, [sp, #44]	; 0x2c
   14270:	ldr	r3, [sp, #24]
   14274:	cmn	r3, #1
   14278:	beq	142a4 <__assert_fail@plt+0x32a0>
   1427c:	ldr	r3, [sp, #24]
   14280:	subs	r3, r3, #1
   14284:	movne	r3, #1
   14288:	cmp	r3, #0
   1428c:	bne	1480c <__assert_fail@plt+0x3808>
   14290:	cmp	r6, #0
   14294:	beq	142d4 <__assert_fail@plt+0x32d0>
   14298:	mov	r5, #0
   1429c:	mov	r3, r5
   142a0:	b	13e40 <__assert_fail@plt+0x2e3c>
   142a4:	ldr	r3, [sp, #48]	; 0x30
   142a8:	ldrb	r3, [r3, #1]
   142ac:	adds	r3, r3, #0
   142b0:	movne	r3, #1
   142b4:	b	14288 <__assert_fail@plt+0x3284>
   142b8:	mov	r3, #0
   142bc:	str	r3, [sp, #44]	; 0x2c
   142c0:	b	14290 <__assert_fail@plt+0x328c>
   142c4:	mov	r3, #0
   142c8:	str	r3, [sp, #44]	; 0x2c
   142cc:	b	142d4 <__assert_fail@plt+0x32d0>
   142d0:	ldr	r5, [sp, #44]	; 0x2c
   142d4:	ldr	r3, [sp, #32]
   142d8:	cmp	sl, #2
   142dc:	movne	r3, #0
   142e0:	andeq	r3, r3, #1
   142e4:	cmp	r3, #0
   142e8:	beq	13e40 <__assert_fail@plt+0x2e3c>
   142ec:	mov	r8, r9
   142f0:	mov	r7, #2
   142f4:	b	149f4 <__assert_fail@plt+0x39f0>
   142f8:	ldr	r5, [sp, #32]
   142fc:	b	142d4 <__assert_fail@plt+0x32d0>
   14300:	mov	r3, #0
   14304:	str	r3, [sp, #44]	; 0x2c
   14308:	mov	r5, r3
   1430c:	b	142d4 <__assert_fail@plt+0x32d0>
   14310:	mov	r3, #0
   14314:	str	r3, [sp, #44]	; 0x2c
   14318:	cmp	sl, #2
   1431c:	strne	r5, [sp, #68]	; 0x44
   14320:	movne	r3, #0
   14324:	movne	r4, #39	; 0x27
   14328:	bne	13e40 <__assert_fail@plt+0x2e3c>
   1432c:	ldr	r3, [sp, #32]
   14330:	cmp	r3, #0
   14334:	bne	149e0 <__assert_fail@plt+0x39dc>
   14338:	ldr	r3, [sp, #72]	; 0x48
   1433c:	clz	r3, r3
   14340:	lsr	r3, r3, #5
   14344:	cmp	r9, #0
   14348:	moveq	r3, #0
   1434c:	cmp	r3, #0
   14350:	movne	r3, #0
   14354:	bne	1437c <__assert_fail@plt+0x3378>
   14358:	cmp	r9, fp
   1435c:	movhi	r3, #39	; 0x27
   14360:	strbhi	r3, [r8, fp]
   14364:	add	r3, fp, #1
   14368:	cmp	r9, r3
   1436c:	movhi	r2, #92	; 0x5c
   14370:	strbhi	r2, [r8, r3]
   14374:	mov	r3, r9
   14378:	ldr	r9, [sp, #72]	; 0x48
   1437c:	add	r2, fp, #2
   14380:	cmp	r2, r3
   14384:	movcc	r1, #39	; 0x27
   14388:	strbcc	r1, [r8, r2]
   1438c:	add	fp, fp, #3
   14390:	str	r5, [sp, #68]	; 0x44
   14394:	ldr	r2, [sp, #32]
   14398:	str	r2, [sp, #36]	; 0x24
   1439c:	str	r9, [sp, #72]	; 0x48
   143a0:	mov	r9, r3
   143a4:	mov	r4, #39	; 0x27
   143a8:	mov	r3, #0
   143ac:	b	13e8c <__assert_fail@plt+0x2e88>
   143b0:	mov	r3, #0
   143b4:	str	r3, [sp, #44]	; 0x2c
   143b8:	ldr	r7, [sp, #76]	; 0x4c
   143bc:	cmp	r7, #1
   143c0:	bne	143f8 <__assert_fail@plt+0x33f4>
   143c4:	bl	10ec0 <__ctype_b_loc@plt>
   143c8:	ldr	r2, [r0]
   143cc:	lsl	r3, r4, #1
   143d0:	ldrh	r5, [r2, r3]
   143d4:	ubfx	r5, r5, #14, #1
   143d8:	mov	ip, r7
   143dc:	eor	r3, r5, #1
   143e0:	ldr	r2, [sp, #28]
   143e4:	and	r3, r3, r2
   143e8:	ands	r3, r3, #255	; 0xff
   143ec:	beq	13e40 <__assert_fail@plt+0x2e3c>
   143f0:	mov	r5, #0
   143f4:	b	14654 <__assert_fail@plt+0x3650>
   143f8:	mov	r2, #0
   143fc:	mov	r3, #0
   14400:	strd	r2, [sp, #104]	; 0x68
   14404:	ldr	r3, [sp, #24]
   14408:	cmn	r3, #1
   1440c:	beq	14430 <__assert_fail@plt+0x342c>
   14410:	mov	r3, #0
   14414:	str	r4, [sp, #88]	; 0x58
   14418:	str	fp, [sp, #92]	; 0x5c
   1441c:	str	r8, [sp, #56]	; 0x38
   14420:	mov	r8, r3
   14424:	str	r9, [sp, #84]	; 0x54
   14428:	ldr	r9, [sp, #48]	; 0x30
   1442c:	b	1457c <__assert_fail@plt+0x3578>
   14430:	ldr	r0, [sp, #48]	; 0x30
   14434:	bl	10ed8 <strlen@plt>
   14438:	str	r0, [sp, #24]
   1443c:	b	14410 <__assert_fail@plt+0x340c>
   14440:	mov	r1, fp
   14444:	ldr	r4, [sp, #88]	; 0x58
   14448:	mov	r2, r8
   1444c:	mov	ip, r8
   14450:	ldr	fp, [sp, #92]	; 0x5c
   14454:	ldr	r8, [sp, #56]	; 0x38
   14458:	ldr	r9, [sp, #84]	; 0x54
   1445c:	ldr	r0, [sp, #24]
   14460:	cmp	r7, r0
   14464:	bcs	1461c <__assert_fail@plt+0x3618>
   14468:	ldrb	r3, [r1]
   1446c:	cmp	r3, #0
   14470:	beq	14624 <__assert_fail@plt+0x3620>
   14474:	mov	r3, r1
   14478:	add	r2, r2, #1
   1447c:	add	r1, r6, r2
   14480:	cmp	r0, r1
   14484:	bls	1462c <__assert_fail@plt+0x3628>
   14488:	ldrb	r1, [r3, #1]!
   1448c:	cmp	r1, #0
   14490:	bne	14478 <__assert_fail@plt+0x3474>
   14494:	mov	ip, r2
   14498:	mov	r5, #0
   1449c:	b	1464c <__assert_fail@plt+0x3648>
   144a0:	ldr	r3, [sp, #56]	; 0x38
   144a4:	str	r3, [sp, #64]	; 0x40
   144a8:	ldr	r8, [sp, #84]	; 0x54
   144ac:	mov	r7, #2
   144b0:	b	149f4 <__assert_fail@plt+0x39f0>
   144b4:	cmp	r2, r7
   144b8:	beq	14558 <__assert_fail@plt+0x3554>
   144bc:	ldrb	r3, [r2], #1
   144c0:	sub	r3, r3, #91	; 0x5b
   144c4:	cmp	r3, #33	; 0x21
   144c8:	ldrls	pc, [pc, r3, lsl #2]
   144cc:	b	144b4 <__assert_fail@plt+0x34b0>
   144d0:	andeq	r4, r1, r0, lsr #9
   144d4:	andeq	r4, r1, r0, lsr #9
   144d8:			; <UNDEFINED> instruction: 0x000144b4
   144dc:	andeq	r4, r1, r0, lsr #9
   144e0:			; <UNDEFINED> instruction: 0x000144b4
   144e4:	andeq	r4, r1, r0, lsr #9
   144e8:			; <UNDEFINED> instruction: 0x000144b4
   144ec:			; <UNDEFINED> instruction: 0x000144b4
   144f0:			; <UNDEFINED> instruction: 0x000144b4
   144f4:			; <UNDEFINED> instruction: 0x000144b4
   144f8:			; <UNDEFINED> instruction: 0x000144b4
   144fc:			; <UNDEFINED> instruction: 0x000144b4
   14500:			; <UNDEFINED> instruction: 0x000144b4
   14504:			; <UNDEFINED> instruction: 0x000144b4
   14508:			; <UNDEFINED> instruction: 0x000144b4
   1450c:			; <UNDEFINED> instruction: 0x000144b4
   14510:			; <UNDEFINED> instruction: 0x000144b4
   14514:			; <UNDEFINED> instruction: 0x000144b4
   14518:			; <UNDEFINED> instruction: 0x000144b4
   1451c:			; <UNDEFINED> instruction: 0x000144b4
   14520:			; <UNDEFINED> instruction: 0x000144b4
   14524:			; <UNDEFINED> instruction: 0x000144b4
   14528:			; <UNDEFINED> instruction: 0x000144b4
   1452c:			; <UNDEFINED> instruction: 0x000144b4
   14530:			; <UNDEFINED> instruction: 0x000144b4
   14534:			; <UNDEFINED> instruction: 0x000144b4
   14538:			; <UNDEFINED> instruction: 0x000144b4
   1453c:			; <UNDEFINED> instruction: 0x000144b4
   14540:			; <UNDEFINED> instruction: 0x000144b4
   14544:			; <UNDEFINED> instruction: 0x000144b4
   14548:			; <UNDEFINED> instruction: 0x000144b4
   1454c:			; <UNDEFINED> instruction: 0x000144b4
   14550:			; <UNDEFINED> instruction: 0x000144b4
   14554:	andeq	r4, r1, r0, lsr #9
   14558:	ldr	r0, [sp, #100]	; 0x64
   1455c:	bl	10e30 <iswprint@plt>
   14560:	cmp	r0, #0
   14564:	moveq	r5, #0
   14568:	add	r8, r8, r4
   1456c:	add	r0, sp, #104	; 0x68
   14570:	bl	10ddc <mbsinit@plt>
   14574:	cmp	r0, #0
   14578:	bne	145e8 <__assert_fail@plt+0x35e4>
   1457c:	add	r7, r6, r8
   14580:	add	fp, r9, r7
   14584:	add	r3, sp, #104	; 0x68
   14588:	ldr	r2, [sp, #24]
   1458c:	sub	r2, r2, r7
   14590:	mov	r1, fp
   14594:	add	r0, sp, #100	; 0x64
   14598:	bl	1648c <__assert_fail@plt+0x5488>
   1459c:	subs	r4, r0, #0
   145a0:	beq	14638 <__assert_fail@plt+0x3634>
   145a4:	cmn	r4, #1
   145a8:	beq	14600 <__assert_fail@plt+0x35fc>
   145ac:	cmn	r4, #2
   145b0:	beq	14440 <__assert_fail@plt+0x343c>
   145b4:	ldr	r3, [sp, #32]
   145b8:	cmp	sl, #2
   145bc:	movne	r3, #0
   145c0:	andeq	r3, r3, #1
   145c4:	cmp	r3, #0
   145c8:	beq	14558 <__assert_fail@plt+0x3554>
   145cc:	cmp	r4, #1
   145d0:	bls	14558 <__assert_fail@plt+0x3554>
   145d4:	add	r2, r7, #1
   145d8:	add	r2, r9, r2
   145dc:	add	r3, r9, r4
   145e0:	add	r7, r3, r7
   145e4:	b	144bc <__assert_fail@plt+0x34b8>
   145e8:	ldr	r4, [sp, #88]	; 0x58
   145ec:	mov	ip, r8
   145f0:	ldr	fp, [sp, #92]	; 0x5c
   145f4:	ldr	r8, [sp, #56]	; 0x38
   145f8:	ldr	r9, [sp, #84]	; 0x54
   145fc:	b	1464c <__assert_fail@plt+0x3648>
   14600:	ldr	r4, [sp, #88]	; 0x58
   14604:	mov	ip, r8
   14608:	ldr	fp, [sp, #92]	; 0x5c
   1460c:	ldr	r8, [sp, #56]	; 0x38
   14610:	ldr	r9, [sp, #84]	; 0x54
   14614:	mov	r5, #0
   14618:	b	1464c <__assert_fail@plt+0x3648>
   1461c:	mov	r5, #0
   14620:	b	1464c <__assert_fail@plt+0x3648>
   14624:	mov	r5, #0
   14628:	b	1464c <__assert_fail@plt+0x3648>
   1462c:	mov	ip, r2
   14630:	mov	r5, #0
   14634:	b	1464c <__assert_fail@plt+0x3648>
   14638:	ldr	r4, [sp, #88]	; 0x58
   1463c:	mov	ip, r8
   14640:	ldr	fp, [sp, #92]	; 0x5c
   14644:	ldr	r8, [sp, #56]	; 0x38
   14648:	ldr	r9, [sp, #84]	; 0x54
   1464c:	cmp	ip, #1
   14650:	bls	143dc <__assert_fail@plt+0x33d8>
   14654:	add	lr, r6, ip
   14658:	ldr	r3, [sp, #48]	; 0x30
   1465c:	add	r1, r3, r6
   14660:	mov	r3, #0
   14664:	eor	r0, r5, #1
   14668:	ldr	r2, [sp, #28]
   1466c:	and	r0, r0, r2
   14670:	uxtb	r0, r0
   14674:	str	r0, [sp, #56]	; 0x38
   14678:	mov	r7, #92	; 0x5c
   1467c:	ldr	ip, [sp, #36]	; 0x24
   14680:	str	r5, [sp, #84]	; 0x54
   14684:	ldr	r2, [sp, #44]	; 0x2c
   14688:	b	146f8 <__assert_fail@plt+0x36f4>
   1468c:	cmp	r2, #0
   14690:	beq	146a0 <__assert_fail@plt+0x369c>
   14694:	cmp	r9, fp
   14698:	strbhi	r7, [r8, fp]
   1469c:	add	fp, fp, #1
   146a0:	add	r5, r6, #1
   146a4:	cmp	r5, lr
   146a8:	bcs	147b4 <__assert_fail@plt+0x37b0>
   146ac:	eor	r2, r3, #1
   146b0:	and	r2, r2, ip
   146b4:	ands	r2, r2, #255	; 0xff
   146b8:	beq	147d0 <__assert_fail@plt+0x37cc>
   146bc:	cmp	r9, fp
   146c0:	movhi	r2, #39	; 0x27
   146c4:	strbhi	r2, [r8, fp]
   146c8:	add	r2, fp, #1
   146cc:	cmp	r9, r2
   146d0:	movhi	ip, #39	; 0x27
   146d4:	strbhi	ip, [r8, r2]
   146d8:	add	fp, fp, #2
   146dc:	ldr	ip, [sp, #56]	; 0x38
   146e0:	mov	r2, ip
   146e4:	mov	r6, r5
   146e8:	cmp	r9, fp
   146ec:	strbhi	r4, [r8, fp]
   146f0:	add	fp, fp, #1
   146f4:	ldrb	r4, [r1, #1]!
   146f8:	cmp	r0, #0
   146fc:	beq	1468c <__assert_fail@plt+0x3688>
   14700:	ldr	r3, [sp, #32]
   14704:	cmp	r3, #0
   14708:	bne	1499c <__assert_fail@plt+0x3998>
   1470c:	eor	r3, ip, #1
   14710:	cmp	sl, #2
   14714:	movne	r3, #0
   14718:	andeq	r3, r3, #1
   1471c:	cmp	r3, #0
   14720:	beq	14758 <__assert_fail@plt+0x3754>
   14724:	cmp	r9, fp
   14728:	movhi	ip, #39	; 0x27
   1472c:	strbhi	ip, [r8, fp]
   14730:	add	ip, fp, #1
   14734:	cmp	r9, ip
   14738:	movhi	r5, #36	; 0x24
   1473c:	strbhi	r5, [r8, ip]
   14740:	add	ip, fp, #2
   14744:	cmp	r9, ip
   14748:	movhi	r5, #39	; 0x27
   1474c:	strbhi	r5, [r8, ip]
   14750:	add	fp, fp, #3
   14754:	mov	ip, r3
   14758:	cmp	r9, fp
   1475c:	strbhi	r7, [r8, fp]
   14760:	add	r3, fp, #1
   14764:	cmp	r9, r3
   14768:	bls	14778 <__assert_fail@plt+0x3774>
   1476c:	lsr	r5, r4, #6
   14770:	add	r5, r5, #48	; 0x30
   14774:	strb	r5, [r8, r3]
   14778:	add	r3, fp, #2
   1477c:	cmp	r9, r3
   14780:	bls	14790 <__assert_fail@plt+0x378c>
   14784:	ubfx	r5, r4, #3, #3
   14788:	add	r5, r5, #48	; 0x30
   1478c:	strb	r5, [r8, r3]
   14790:	add	fp, fp, #3
   14794:	and	r4, r4, #7
   14798:	add	r4, r4, #48	; 0x30
   1479c:	add	r5, r6, #1
   147a0:	cmp	r5, lr
   147a4:	bcs	147c0 <__assert_fail@plt+0x37bc>
   147a8:	ldr	r3, [sp, #56]	; 0x38
   147ac:	mov	r6, r5
   147b0:	b	146e8 <__assert_fail@plt+0x36e4>
   147b4:	str	ip, [sp, #36]	; 0x24
   147b8:	ldr	r5, [sp, #84]	; 0x54
   147bc:	b	141ec <__assert_fail@plt+0x31e8>
   147c0:	str	ip, [sp, #36]	; 0x24
   147c4:	ldr	r5, [sp, #84]	; 0x54
   147c8:	mov	r3, r0
   147cc:	b	141ec <__assert_fail@plt+0x31e8>
   147d0:	mov	r6, r5
   147d4:	b	146e8 <__assert_fail@plt+0x36e4>
   147d8:	ldr	r3, [sp, #44]	; 0x2c
   147dc:	b	13e40 <__assert_fail@plt+0x2e3c>
   147e0:	mov	r5, #0
   147e4:	mov	r3, r5
   147e8:	mov	r4, #63	; 0x3f
   147ec:	b	13e40 <__assert_fail@plt+0x2e3c>
   147f0:	mov	r5, #0
   147f4:	mov	r3, r5
   147f8:	mov	r4, #63	; 0x3f
   147fc:	b	13e40 <__assert_fail@plt+0x2e3c>
   14800:	mov	r5, #0
   14804:	mov	r3, r5
   14808:	b	13e40 <__assert_fail@plt+0x2e3c>
   1480c:	mov	r5, #0
   14810:	mov	r3, r5
   14814:	b	13e40 <__assert_fail@plt+0x2e3c>
   14818:	ldr	r5, [sp, #44]	; 0x2c
   1481c:	ldr	r3, [sp, #32]
   14820:	b	13e40 <__assert_fail@plt+0x2e3c>
   14824:	ldr	r5, [sp, #44]	; 0x2c
   14828:	mov	r3, #0
   1482c:	str	r3, [sp, #44]	; 0x2c
   14830:	b	13e40 <__assert_fail@plt+0x2e3c>
   14834:	mov	r4, r3
   14838:	mov	r5, #0
   1483c:	b	13e98 <__assert_fail@plt+0x2e94>
   14840:	mov	r5, #0
   14844:	mov	r4, #97	; 0x61
   14848:	b	13e98 <__assert_fail@plt+0x2e94>
   1484c:	mov	r5, #0
   14850:	mov	r3, r5
   14854:	mov	r4, #92	; 0x5c
   14858:	b	141ec <__assert_fail@plt+0x31e8>
   1485c:	ldr	r3, [sp, #48]	; 0x30
   14860:	ldrb	r5, [r3, r6]
   14864:	adds	r5, r5, #0
   14868:	movne	r5, #1
   1486c:	b	13f3c <__assert_fail@plt+0x2f38>
   14870:	cmp	sl, #2
   14874:	movne	r3, #0
   14878:	moveq	r3, #1
   1487c:	ldr	r1, [sp, #32]
   14880:	cmp	fp, #0
   14884:	andeq	r2, r3, r1
   14888:	movne	r2, #0
   1488c:	cmp	r2, #0
   14890:	bne	149b0 <__assert_fail@plt+0x39ac>
   14894:	eor	r2, r1, #1
   14898:	uxtb	r2, r2
   1489c:	and	r3, r3, r2
   148a0:	ldr	r1, [sp, #68]	; 0x44
   148a4:	ands	r3, r1, r3
   148a8:	beq	1493c <__assert_fail@plt+0x3938>
   148ac:	ldr	r2, [sp, #40]	; 0x28
   148b0:	cmp	r2, #0
   148b4:	bne	148ec <__assert_fail@plt+0x38e8>
   148b8:	ldr	r2, [sp, #72]	; 0x48
   148bc:	adds	r2, r2, #0
   148c0:	movne	r2, #1
   148c4:	cmp	r9, #0
   148c8:	movne	r2, #0
   148cc:	str	r2, [sp, #68]	; 0x44
   148d0:	mov	sl, #2
   148d4:	ldr	r1, [sp, #40]	; 0x28
   148d8:	str	r1, [sp, #32]
   148dc:	cmp	r2, #0
   148e0:	beq	14930 <__assert_fail@plt+0x392c>
   148e4:	ldr	r9, [sp, #72]	; 0x48
   148e8:	b	13644 <__assert_fail@plt+0x2640>
   148ec:	ldr	r3, [sp, #168]	; 0xa8
   148f0:	str	r3, [sp, #16]
   148f4:	ldr	r3, [sp, #164]	; 0xa4
   148f8:	str	r3, [sp, #12]
   148fc:	ldr	r3, [sp, #160]	; 0xa0
   14900:	str	r3, [sp, #8]
   14904:	ldr	r3, [sp, #156]	; 0x9c
   14908:	str	r3, [sp, #4]
   1490c:	mov	r3, #5
   14910:	str	r3, [sp]
   14914:	ldr	r3, [sp, #24]
   14918:	ldr	r2, [sp, #48]	; 0x30
   1491c:	ldr	r1, [sp, #72]	; 0x48
   14920:	ldr	r0, [sp, #64]	; 0x40
   14924:	bl	135cc <__assert_fail@plt+0x25c8>
   14928:	mov	fp, r0
   1492c:	b	14a4c <__assert_fail@plt+0x3a48>
   14930:	mov	r8, r9
   14934:	mov	r2, r3
   14938:	b	14940 <__assert_fail@plt+0x393c>
   1493c:	mov	r8, r9
   14940:	ldr	r3, [sp, #60]	; 0x3c
   14944:	cmp	r3, #0
   14948:	moveq	r2, #0
   1494c:	andne	r2, r2, #1
   14950:	cmp	r2, #0
   14954:	beq	14984 <__assert_fail@plt+0x3980>
   14958:	mov	r2, r3
   1495c:	ldrb	r3, [r3]
   14960:	cmp	r3, #0
   14964:	beq	14984 <__assert_fail@plt+0x3980>
   14968:	ldr	r1, [sp, #64]	; 0x40
   1496c:	cmp	r8, fp
   14970:	strbhi	r3, [r1, fp]
   14974:	add	fp, fp, #1
   14978:	ldrb	r3, [r2, #1]!
   1497c:	cmp	r3, #0
   14980:	bne	1496c <__assert_fail@plt+0x3968>
   14984:	cmp	r8, fp
   14988:	bls	14a4c <__assert_fail@plt+0x3a48>
   1498c:	mov	r3, #0
   14990:	ldr	r2, [sp, #64]	; 0x40
   14994:	strb	r3, [r2, fp]
   14998:	b	14a4c <__assert_fail@plt+0x3a48>
   1499c:	mov	r8, r9
   149a0:	mov	r7, sl
   149a4:	ldr	r3, [sp, #32]
   149a8:	str	r3, [sp, #28]
   149ac:	b	149f4 <__assert_fail@plt+0x39f0>
   149b0:	mov	r8, r9
   149b4:	mov	r7, #2
   149b8:	b	149f4 <__assert_fail@plt+0x39f0>
   149bc:	mov	r8, r9
   149c0:	mov	r7, sl
   149c4:	b	149f4 <__assert_fail@plt+0x39f0>
   149c8:	mov	r8, r9
   149cc:	mov	r7, sl
   149d0:	b	149f4 <__assert_fail@plt+0x39f0>
   149d4:	mov	r8, r9
   149d8:	mov	r7, sl
   149dc:	b	149f4 <__assert_fail@plt+0x39f0>
   149e0:	mov	r8, r9
   149e4:	mov	r7, sl
   149e8:	b	149f4 <__assert_fail@plt+0x39f0>
   149ec:	mov	r8, r9
   149f0:	mov	r7, sl
   149f4:	ldr	r3, [sp, #28]
   149f8:	cmp	r7, #2
   149fc:	movne	r3, #0
   14a00:	andeq	r3, r3, #1
   14a04:	cmp	r3, #0
   14a08:	movne	r7, #4
   14a0c:	ldr	r3, [sp, #168]	; 0xa8
   14a10:	str	r3, [sp, #16]
   14a14:	ldr	r3, [sp, #164]	; 0xa4
   14a18:	str	r3, [sp, #12]
   14a1c:	mov	r3, #0
   14a20:	str	r3, [sp, #8]
   14a24:	ldr	r3, [sp, #156]	; 0x9c
   14a28:	bic	r3, r3, #2
   14a2c:	str	r3, [sp, #4]
   14a30:	str	r7, [sp]
   14a34:	ldr	r3, [sp, #24]
   14a38:	ldr	r2, [sp, #48]	; 0x30
   14a3c:	mov	r1, r8
   14a40:	ldr	r0, [sp, #64]	; 0x40
   14a44:	bl	135cc <__assert_fail@plt+0x25c8>
   14a48:	mov	fp, r0
   14a4c:	mov	r0, fp
   14a50:	add	sp, sp, #116	; 0x74
   14a54:	ldrd	r4, [sp]
   14a58:	ldrd	r6, [sp, #8]
   14a5c:	ldrd	r8, [sp, #16]
   14a60:	ldrd	sl, [sp, #24]
   14a64:	add	sp, sp, #32
   14a68:	pop	{pc}		; (ldr pc, [sp], #4)
   14a6c:	mov	r8, r9
   14a70:	mov	r7, sl
   14a74:	b	14a0c <__assert_fail@plt+0x3a08>
   14a78:	add	fp, fp, #4
   14a7c:	str	r3, [sp, #36]	; 0x24
   14a80:	mov	r5, #0
   14a84:	mov	r4, #48	; 0x30
   14a88:	b	13e40 <__assert_fail@plt+0x2e3c>
   14a8c:	mov	r3, #1
   14a90:	str	r3, [sp, #32]
   14a94:	str	r3, [sp, #28]
   14a98:	str	r3, [sp, #52]	; 0x34
   14a9c:	movw	r3, #29740	; 0x742c
   14aa0:	movt	r3, #1
   14aa4:	str	r3, [sp, #60]	; 0x3c
   14aa8:	mov	fp, #0
   14aac:	mov	sl, #5
   14ab0:	b	136a4 <__assert_fail@plt+0x26a0>
   14ab4:	ldr	r3, [sp, #48]	; 0x30
   14ab8:	ldrb	r4, [r3, r6]
   14abc:	cmp	r4, #126	; 0x7e
   14ac0:	ldrls	pc, [pc, r4, lsl #2]
   14ac4:	b	143b0 <__assert_fail@plt+0x33ac>
   14ac8:	andeq	r3, r1, r8, lsr fp
   14acc:			; <UNDEFINED> instruction: 0x000143b0
   14ad0:			; <UNDEFINED> instruction: 0x000143b0
   14ad4:			; <UNDEFINED> instruction: 0x000143b0
   14ad8:			; <UNDEFINED> instruction: 0x000143b0
   14adc:			; <UNDEFINED> instruction: 0x000143b0
   14ae0:			; <UNDEFINED> instruction: 0x000143b0
   14ae4:	andeq	r4, r1, r0, asr #16
   14ae8:	ldrdeq	r3, [r1], -ip
   14aec:	andeq	r4, r1, r0, lsl #3
   14af0:	andeq	r4, r1, ip, lsr r2
   14af4:	muleq	r1, r4, r1
   14af8:	strdeq	r3, [r1], -r0
   14afc:	andeq	r3, r1, r4, lsl #28
   14b00:			; <UNDEFINED> instruction: 0x000143b0
   14b04:			; <UNDEFINED> instruction: 0x000143b0
   14b08:			; <UNDEFINED> instruction: 0x000143b0
   14b0c:			; <UNDEFINED> instruction: 0x000143b0
   14b10:			; <UNDEFINED> instruction: 0x000143b0
   14b14:			; <UNDEFINED> instruction: 0x000143b0
   14b18:			; <UNDEFINED> instruction: 0x000143b0
   14b1c:			; <UNDEFINED> instruction: 0x000143b0
   14b20:			; <UNDEFINED> instruction: 0x000143b0
   14b24:			; <UNDEFINED> instruction: 0x000143b0
   14b28:			; <UNDEFINED> instruction: 0x000143b0
   14b2c:			; <UNDEFINED> instruction: 0x000143b0
   14b30:			; <UNDEFINED> instruction: 0x000143b0
   14b34:			; <UNDEFINED> instruction: 0x000143b0
   14b38:			; <UNDEFINED> instruction: 0x000143b0
   14b3c:			; <UNDEFINED> instruction: 0x000143b0
   14b40:			; <UNDEFINED> instruction: 0x000143b0
   14b44:			; <UNDEFINED> instruction: 0x000143b0
   14b48:	andeq	r4, r1, r4, asr #5
   14b4c:	andeq	r4, r1, r0, lsl #6
   14b50:	andeq	r4, r1, r0, lsl #6
   14b54:			; <UNDEFINED> instruction: 0x000142b8
   14b58:	andeq	r4, r1, r0, lsl #6
   14b5c:	andeq	r4, r1, r4, lsr #16
   14b60:	andeq	r4, r1, r0, lsl #6
   14b64:	andeq	r4, r1, r0, lsl r3
   14b68:	andeq	r4, r1, r0, lsl #6
   14b6c:	andeq	r4, r1, r0, lsl #6
   14b70:	andeq	r4, r1, r0, lsl #6
   14b74:	andeq	r4, r1, r4, lsr #16
   14b78:	andeq	r4, r1, r4, lsr #16
   14b7c:	andeq	r4, r1, r4, lsr #16
   14b80:	andeq	r4, r1, r4, lsr #16
   14b84:	andeq	r4, r1, r4, lsr #16
   14b88:	andeq	r4, r1, r4, lsr #16
   14b8c:	andeq	r4, r1, r4, lsr #16
   14b90:	andeq	r4, r1, r4, lsr #16
   14b94:	andeq	r4, r1, r4, lsr #16
   14b98:	andeq	r4, r1, r4, lsr #16
   14b9c:	andeq	r4, r1, r4, lsr #16
   14ba0:	andeq	r4, r1, r4, lsr #16
   14ba4:	andeq	r4, r1, r4, lsr #16
   14ba8:	andeq	r4, r1, r4, lsr #16
   14bac:	andeq	r4, r1, r4, lsr #16
   14bb0:	andeq	r4, r1, r4, lsr #16
   14bb4:	andeq	r4, r1, r0, lsl #6
   14bb8:	andeq	r4, r1, r0, lsl #6
   14bbc:	andeq	r4, r1, r0, lsl #6
   14bc0:	andeq	r4, r1, r0, lsl #6
   14bc4:	andeq	r3, r1, r0, ror ip
   14bc8:			; <UNDEFINED> instruction: 0x000143b0
   14bcc:	andeq	r4, r1, r4, lsr #16
   14bd0:	andeq	r4, r1, r4, lsr #16
   14bd4:	andeq	r4, r1, r4, lsr #16
   14bd8:	andeq	r4, r1, r4, lsr #16
   14bdc:	andeq	r4, r1, r4, lsr #16
   14be0:	andeq	r4, r1, r4, lsr #16
   14be4:	andeq	r4, r1, r4, lsr #16
   14be8:	andeq	r4, r1, r4, lsr #16
   14bec:	andeq	r4, r1, r4, lsr #16
   14bf0:	andeq	r4, r1, r4, lsr #16
   14bf4:	andeq	r4, r1, r4, lsr #16
   14bf8:	andeq	r4, r1, r4, lsr #16
   14bfc:	andeq	r4, r1, r4, lsr #16
   14c00:	andeq	r4, r1, r4, lsr #16
   14c04:	andeq	r4, r1, r4, lsr #16
   14c08:	andeq	r4, r1, r4, lsr #16
   14c0c:	andeq	r4, r1, r4, lsr #16
   14c10:	andeq	r4, r1, r4, lsr #16
   14c14:	andeq	r4, r1, r4, lsr #16
   14c18:	andeq	r4, r1, r4, lsr #16
   14c1c:	andeq	r4, r1, r4, lsr #16
   14c20:	andeq	r4, r1, r4, lsr #16
   14c24:	andeq	r4, r1, r4, lsr #16
   14c28:	andeq	r4, r1, r4, lsr #16
   14c2c:	andeq	r4, r1, r4, lsr #16
   14c30:	andeq	r4, r1, r4, lsr #16
   14c34:	andeq	r4, r1, r0, lsl #6
   14c38:	andeq	r4, r1, r8, lsr #3
   14c3c:	andeq	r4, r1, r4, lsr #16
   14c40:	andeq	r4, r1, r0, lsl #6
   14c44:	andeq	r4, r1, r4, lsr #16
   14c48:	andeq	r4, r1, r0, lsl #6
   14c4c:	andeq	r4, r1, r4, lsr #16
   14c50:	andeq	r4, r1, r4, lsr #16
   14c54:	andeq	r4, r1, r4, lsr #16
   14c58:	andeq	r4, r1, r4, lsr #16
   14c5c:	andeq	r4, r1, r4, lsr #16
   14c60:	andeq	r4, r1, r4, lsr #16
   14c64:	andeq	r4, r1, r4, lsr #16
   14c68:	andeq	r4, r1, r4, lsr #16
   14c6c:	andeq	r4, r1, r4, lsr #16
   14c70:	andeq	r4, r1, r4, lsr #16
   14c74:	andeq	r4, r1, r4, lsr #16
   14c78:	andeq	r4, r1, r4, lsr #16
   14c7c:	andeq	r4, r1, r4, lsr #16
   14c80:	andeq	r4, r1, r4, lsr #16
   14c84:	andeq	r4, r1, r4, lsr #16
   14c88:	andeq	r4, r1, r4, lsr #16
   14c8c:	andeq	r4, r1, r4, lsr #16
   14c90:	andeq	r4, r1, r4, lsr #16
   14c94:	andeq	r4, r1, r4, lsr #16
   14c98:	andeq	r4, r1, r4, lsr #16
   14c9c:	andeq	r4, r1, r4, lsr #16
   14ca0:	andeq	r4, r1, r4, lsr #16
   14ca4:	andeq	r4, r1, r4, lsr #16
   14ca8:	andeq	r4, r1, r4, lsr #16
   14cac:	andeq	r4, r1, r4, lsr #16
   14cb0:	andeq	r4, r1, r4, lsr #16
   14cb4:	andeq	r4, r1, r8, ror #4
   14cb8:	andeq	r4, r1, r0, lsl #6
   14cbc:	andeq	r4, r1, r8, ror #4
   14cc0:			; <UNDEFINED> instruction: 0x000142b8
   14cc4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14cc8:	strd	r6, [sp, #8]
   14ccc:	strd	r8, [sp, #16]
   14cd0:	strd	sl, [sp, #24]
   14cd4:	str	lr, [sp, #32]
   14cd8:	sub	sp, sp, #52	; 0x34
   14cdc:	mov	r5, r0
   14ce0:	str	r1, [sp, #24]
   14ce4:	str	r2, [sp, #28]
   14ce8:	mov	r4, r3
   14cec:	bl	10ef0 <__errno_location@plt>
   14cf0:	str	r0, [sp, #32]
   14cf4:	ldr	r3, [r0]
   14cf8:	str	r3, [sp, #36]	; 0x24
   14cfc:	movw	r3, #33032	; 0x8108
   14d00:	movt	r3, #2
   14d04:	ldr	r6, [r3]
   14d08:	cmn	r5, #-2147483647	; 0x80000001
   14d0c:	movne	r3, #0
   14d10:	moveq	r3, #1
   14d14:	orrs	r3, r3, r5, lsr #31
   14d18:	bne	14e7c <__assert_fail@plt+0x3e78>
   14d1c:	movw	r3, #33032	; 0x8108
   14d20:	movt	r3, #2
   14d24:	ldr	r2, [r3, #4]
   14d28:	cmp	r2, r5
   14d2c:	bgt	14d9c <__assert_fail@plt+0x3d98>
   14d30:	str	r2, [sp, #44]	; 0x2c
   14d34:	add	r3, r3, #8
   14d38:	cmp	r6, r3
   14d3c:	beq	14e80 <__assert_fail@plt+0x3e7c>
   14d40:	sub	r2, r5, r2
   14d44:	mov	r3, #8
   14d48:	str	r3, [sp]
   14d4c:	mvn	r3, #-2147483648	; 0x80000000
   14d50:	add	r2, r2, #1
   14d54:	add	r1, sp, #44	; 0x2c
   14d58:	mov	r0, r6
   14d5c:	bl	15e84 <__assert_fail@plt+0x4e80>
   14d60:	mov	r6, r0
   14d64:	movw	r3, #33032	; 0x8108
   14d68:	movt	r3, #2
   14d6c:	str	r0, [r3]
   14d70:	movw	r7, #33032	; 0x8108
   14d74:	movt	r7, #2
   14d78:	ldr	r0, [r7, #4]
   14d7c:	ldr	r2, [sp, #44]	; 0x2c
   14d80:	sub	r2, r2, r0
   14d84:	lsl	r2, r2, #3
   14d88:	mov	r1, #0
   14d8c:	add	r0, r6, r0, lsl #3
   14d90:	bl	10f08 <memset@plt>
   14d94:	ldr	r3, [sp, #44]	; 0x2c
   14d98:	str	r3, [r7, #4]
   14d9c:	add	fp, r6, r5, lsl #3
   14da0:	ldr	r8, [r6, r5, lsl #3]
   14da4:	ldr	r7, [fp, #4]
   14da8:	ldr	r3, [r4, #4]
   14dac:	orr	r9, r3, #1
   14db0:	add	sl, r4, #8
   14db4:	ldr	r3, [r4, #44]	; 0x2c
   14db8:	str	r3, [sp, #16]
   14dbc:	ldr	r3, [r4, #40]	; 0x28
   14dc0:	str	r3, [sp, #12]
   14dc4:	str	sl, [sp, #8]
   14dc8:	str	r9, [sp, #4]
   14dcc:	ldr	r3, [r4]
   14dd0:	str	r3, [sp]
   14dd4:	ldr	r3, [sp, #28]
   14dd8:	ldr	r2, [sp, #24]
   14ddc:	mov	r1, r8
   14de0:	mov	r0, r7
   14de4:	bl	135cc <__assert_fail@plt+0x25c8>
   14de8:	cmp	r8, r0
   14dec:	bhi	14e50 <__assert_fail@plt+0x3e4c>
   14df0:	add	r8, r0, #1
   14df4:	str	r8, [r6, r5, lsl #3]
   14df8:	movw	r3, #33196	; 0x81ac
   14dfc:	movt	r3, #2
   14e00:	cmp	r7, r3
   14e04:	beq	14e10 <__assert_fail@plt+0x3e0c>
   14e08:	mov	r0, r7
   14e0c:	bl	12d9c <__assert_fail@plt+0x1d98>
   14e10:	mov	r0, r8
   14e14:	bl	15c80 <__assert_fail@plt+0x4c7c>
   14e18:	mov	r7, r0
   14e1c:	str	r0, [fp, #4]
   14e20:	ldr	r3, [r4, #44]	; 0x2c
   14e24:	str	r3, [sp, #16]
   14e28:	ldr	r3, [r4, #40]	; 0x28
   14e2c:	str	r3, [sp, #12]
   14e30:	str	sl, [sp, #8]
   14e34:	str	r9, [sp, #4]
   14e38:	ldr	r3, [r4]
   14e3c:	str	r3, [sp]
   14e40:	ldr	r3, [sp, #28]
   14e44:	ldr	r2, [sp, #24]
   14e48:	mov	r1, r8
   14e4c:	bl	135cc <__assert_fail@plt+0x25c8>
   14e50:	ldr	r3, [sp, #32]
   14e54:	ldr	r2, [sp, #36]	; 0x24
   14e58:	str	r2, [r3]
   14e5c:	mov	r0, r7
   14e60:	add	sp, sp, #52	; 0x34
   14e64:	ldrd	r4, [sp]
   14e68:	ldrd	r6, [sp, #8]
   14e6c:	ldrd	r8, [sp, #16]
   14e70:	ldrd	sl, [sp, #24]
   14e74:	add	sp, sp, #32
   14e78:	pop	{pc}		; (ldr pc, [sp], #4)
   14e7c:	bl	10fec <abort@plt>
   14e80:	sub	r2, r5, r2
   14e84:	mov	r3, #8
   14e88:	str	r3, [sp]
   14e8c:	mvn	r3, #-2147483648	; 0x80000000
   14e90:	add	r2, r2, #1
   14e94:	add	r1, sp, #44	; 0x2c
   14e98:	mov	r0, #0
   14e9c:	bl	15e84 <__assert_fail@plt+0x4e80>
   14ea0:	mov	r6, r0
   14ea4:	movw	r3, #33032	; 0x8108
   14ea8:	movt	r3, #2
   14eac:	str	r0, [r3]
   14eb0:	ldrd	r2, [r3, #8]
   14eb4:	strd	r2, [r0]
   14eb8:	b	14d70 <__assert_fail@plt+0x3d6c>
   14ebc:	strd	r4, [sp, #-16]!
   14ec0:	str	r6, [sp, #8]
   14ec4:	str	lr, [sp, #12]
   14ec8:	mov	r4, r0
   14ecc:	bl	10ef0 <__errno_location@plt>
   14ed0:	mov	r5, r0
   14ed4:	ldr	r6, [r0]
   14ed8:	cmp	r4, #0
   14edc:	ldr	r3, [pc, #32]	; 14f04 <__assert_fail@plt+0x3f00>
   14ee0:	moveq	r4, r3
   14ee4:	mov	r1, #48	; 0x30
   14ee8:	mov	r0, r4
   14eec:	bl	15ff4 <__assert_fail@plt+0x4ff0>
   14ef0:	str	r6, [r5]
   14ef4:	ldrd	r4, [sp]
   14ef8:	ldr	r6, [sp, #8]
   14efc:	add	sp, sp, #12
   14f00:	pop	{pc}		; (ldr pc, [sp], #4)
   14f04:	andeq	r8, r2, ip, lsr #5
   14f08:	subs	r3, r0, #0
   14f0c:	ldr	r2, [pc, #8]	; 14f1c <__assert_fail@plt+0x3f18>
   14f10:	moveq	r3, r2
   14f14:	ldr	r0, [r3]
   14f18:	bx	lr
   14f1c:	andeq	r8, r2, ip, lsr #5
   14f20:	subs	r3, r0, #0
   14f24:	ldr	r2, [pc, #8]	; 14f34 <__assert_fail@plt+0x3f30>
   14f28:	moveq	r3, r2
   14f2c:	str	r1, [r3]
   14f30:	bx	lr
   14f34:	andeq	r8, r2, ip, lsr #5
   14f38:	push	{lr}		; (str lr, [sp, #-4]!)
   14f3c:	subs	r3, r0, #0
   14f40:	ldr	r0, [pc, #44]	; 14f74 <__assert_fail@plt+0x3f70>
   14f44:	moveq	r3, r0
   14f48:	add	r3, r3, #8
   14f4c:	lsr	lr, r1, #5
   14f50:	and	r1, r1, #31
   14f54:	ldr	ip, [r3, lr, lsl #2]
   14f58:	lsr	r0, ip, r1
   14f5c:	eor	r2, r2, r0
   14f60:	and	r2, r2, #1
   14f64:	eor	r1, ip, r2, lsl r1
   14f68:	str	r1, [r3, lr, lsl #2]
   14f6c:	and	r0, r0, #1
   14f70:	pop	{pc}		; (ldr pc, [sp], #4)
   14f74:	andeq	r8, r2, ip, lsr #5
   14f78:	subs	r3, r0, #0
   14f7c:	ldr	r2, [pc, #12]	; 14f90 <__assert_fail@plt+0x3f8c>
   14f80:	moveq	r3, r2
   14f84:	ldr	r0, [r3, #4]
   14f88:	str	r1, [r3, #4]
   14f8c:	bx	lr
   14f90:	andeq	r8, r2, ip, lsr #5
   14f94:	subs	r3, r0, #0
   14f98:	ldr	r0, [pc, #44]	; 14fcc <__assert_fail@plt+0x3fc8>
   14f9c:	moveq	r3, r0
   14fa0:	mov	r0, #10
   14fa4:	str	r0, [r3]
   14fa8:	cmp	r2, #0
   14fac:	cmpne	r1, #0
   14fb0:	beq	14fc0 <__assert_fail@plt+0x3fbc>
   14fb4:	str	r1, [r3, #40]	; 0x28
   14fb8:	str	r2, [r3, #44]	; 0x2c
   14fbc:	bx	lr
   14fc0:	str	r4, [sp, #-8]!
   14fc4:	str	lr, [sp, #4]
   14fc8:	bl	10fec <abort@plt>
   14fcc:	andeq	r8, r2, ip, lsr #5
   14fd0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14fd4:	strd	r6, [sp, #8]
   14fd8:	strd	r8, [sp, #16]
   14fdc:	str	sl, [sp, #24]
   14fe0:	str	lr, [sp, #28]
   14fe4:	sub	sp, sp, #24
   14fe8:	mov	r7, r0
   14fec:	mov	r8, r1
   14ff0:	mov	r9, r2
   14ff4:	mov	sl, r3
   14ff8:	ldr	r4, [sp, #56]	; 0x38
   14ffc:	cmp	r4, #0
   15000:	ldr	r3, [pc, #104]	; 15070 <__assert_fail@plt+0x406c>
   15004:	moveq	r4, r3
   15008:	bl	10ef0 <__errno_location@plt>
   1500c:	mov	r5, r0
   15010:	ldr	r6, [r0]
   15014:	ldr	r3, [r4, #44]	; 0x2c
   15018:	str	r3, [sp, #16]
   1501c:	ldr	r3, [r4, #40]	; 0x28
   15020:	str	r3, [sp, #12]
   15024:	add	r3, r4, #8
   15028:	str	r3, [sp, #8]
   1502c:	ldr	r3, [r4, #4]
   15030:	str	r3, [sp, #4]
   15034:	ldr	r3, [r4]
   15038:	str	r3, [sp]
   1503c:	mov	r3, sl
   15040:	mov	r2, r9
   15044:	mov	r1, r8
   15048:	mov	r0, r7
   1504c:	bl	135cc <__assert_fail@plt+0x25c8>
   15050:	str	r6, [r5]
   15054:	add	sp, sp, #24
   15058:	ldrd	r4, [sp]
   1505c:	ldrd	r6, [sp, #8]
   15060:	ldrd	r8, [sp, #16]
   15064:	ldr	sl, [sp, #24]
   15068:	add	sp, sp, #28
   1506c:	pop	{pc}		; (ldr pc, [sp], #4)
   15070:	andeq	r8, r2, ip, lsr #5
   15074:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15078:	strd	r6, [sp, #8]
   1507c:	strd	r8, [sp, #16]
   15080:	strd	sl, [sp, #24]
   15084:	str	lr, [sp, #32]
   15088:	sub	sp, sp, #44	; 0x2c
   1508c:	mov	r8, r0
   15090:	mov	sl, r1
   15094:	mov	r6, r2
   15098:	subs	r4, r3, #0
   1509c:	ldr	r3, [pc, #200]	; 1516c <__assert_fail@plt+0x4168>
   150a0:	moveq	r4, r3
   150a4:	bl	10ef0 <__errno_location@plt>
   150a8:	mov	r7, r0
   150ac:	ldr	fp, [r0]
   150b0:	ldr	r5, [r4, #4]
   150b4:	cmp	r6, #0
   150b8:	orreq	r5, r5, #1
   150bc:	add	r9, r4, #8
   150c0:	ldr	r3, [r4, #44]	; 0x2c
   150c4:	str	r3, [sp, #16]
   150c8:	ldr	r3, [r4, #40]	; 0x28
   150cc:	str	r3, [sp, #12]
   150d0:	str	r9, [sp, #8]
   150d4:	str	r5, [sp, #4]
   150d8:	ldr	r3, [r4]
   150dc:	str	r3, [sp]
   150e0:	str	sl, [sp, #36]	; 0x24
   150e4:	mov	r3, sl
   150e8:	str	r8, [sp, #32]
   150ec:	mov	r2, r8
   150f0:	mov	r1, #0
   150f4:	mov	r0, r1
   150f8:	bl	135cc <__assert_fail@plt+0x25c8>
   150fc:	mov	sl, r0
   15100:	add	r8, r0, #1
   15104:	mov	r0, r8
   15108:	bl	15c80 <__assert_fail@plt+0x4c7c>
   1510c:	str	r0, [sp, #28]
   15110:	ldr	r3, [r4, #44]	; 0x2c
   15114:	str	r3, [sp, #16]
   15118:	ldr	r3, [r4, #40]	; 0x28
   1511c:	str	r3, [sp, #12]
   15120:	str	r9, [sp, #8]
   15124:	str	r5, [sp, #4]
   15128:	ldr	r3, [r4]
   1512c:	str	r3, [sp]
   15130:	ldr	r3, [sp, #36]	; 0x24
   15134:	ldr	r2, [sp, #32]
   15138:	mov	r1, r8
   1513c:	bl	135cc <__assert_fail@plt+0x25c8>
   15140:	str	fp, [r7]
   15144:	cmp	r6, #0
   15148:	strne	sl, [r6]
   1514c:	ldr	r0, [sp, #28]
   15150:	add	sp, sp, #44	; 0x2c
   15154:	ldrd	r4, [sp]
   15158:	ldrd	r6, [sp, #8]
   1515c:	ldrd	r8, [sp, #16]
   15160:	ldrd	sl, [sp, #24]
   15164:	add	sp, sp, #32
   15168:	pop	{pc}		; (ldr pc, [sp], #4)
   1516c:	andeq	r8, r2, ip, lsr #5
   15170:	str	r4, [sp, #-8]!
   15174:	str	lr, [sp, #4]
   15178:	mov	r3, r2
   1517c:	mov	r2, #0
   15180:	bl	15074 <__assert_fail@plt+0x4070>
   15184:	ldr	r4, [sp]
   15188:	add	sp, sp, #4
   1518c:	pop	{pc}		; (ldr pc, [sp], #4)
   15190:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15194:	strd	r6, [sp, #8]
   15198:	str	r8, [sp, #16]
   1519c:	str	lr, [sp, #20]
   151a0:	movw	r3, #33032	; 0x8108
   151a4:	movt	r3, #2
   151a8:	ldr	r7, [r3]
   151ac:	ldr	r3, [r3, #4]
   151b0:	cmp	r3, #1
   151b4:	ble	151e0 <__assert_fail@plt+0x41dc>
   151b8:	mov	r4, #1
   151bc:	add	r6, r7, #4
   151c0:	movw	r5, #33032	; 0x8108
   151c4:	movt	r5, #2
   151c8:	ldr	r0, [r6, r4, lsl #3]
   151cc:	bl	12d9c <__assert_fail@plt+0x1d98>
   151d0:	add	r4, r4, #1
   151d4:	ldr	r3, [r5, #4]
   151d8:	cmp	r3, r4
   151dc:	bgt	151c8 <__assert_fail@plt+0x41c4>
   151e0:	ldr	r0, [r7, #4]
   151e4:	movw	r3, #33196	; 0x81ac
   151e8:	movt	r3, #2
   151ec:	cmp	r0, r3
   151f0:	beq	15214 <__assert_fail@plt+0x4210>
   151f4:	bl	12d9c <__assert_fail@plt+0x1d98>
   151f8:	movw	r3, #33032	; 0x8108
   151fc:	movt	r3, #2
   15200:	mov	r2, #256	; 0x100
   15204:	str	r2, [r3, #8]
   15208:	movw	r2, #33196	; 0x81ac
   1520c:	movt	r2, #2
   15210:	str	r2, [r3, #12]
   15214:	ldr	r3, [pc, #64]	; 1525c <__assert_fail@plt+0x4258>
   15218:	cmp	r7, r3
   1521c:	beq	15238 <__assert_fail@plt+0x4234>
   15220:	mov	r0, r7
   15224:	bl	12d9c <__assert_fail@plt+0x1d98>
   15228:	movw	r3, #33032	; 0x8108
   1522c:	movt	r3, #2
   15230:	add	r2, r3, #8
   15234:	str	r2, [r3]
   15238:	movw	r3, #33032	; 0x8108
   1523c:	movt	r3, #2
   15240:	mov	r2, #1
   15244:	str	r2, [r3, #4]
   15248:	ldrd	r4, [sp]
   1524c:	ldrd	r6, [sp, #8]
   15250:	ldr	r8, [sp, #16]
   15254:	add	sp, sp, #20
   15258:	pop	{pc}		; (ldr pc, [sp], #4)
   1525c:	andeq	r8, r2, r0, lsl r1
   15260:	str	r4, [sp, #-8]!
   15264:	str	lr, [sp, #4]
   15268:	ldr	r3, [pc, #16]	; 15280 <__assert_fail@plt+0x427c>
   1526c:	mvn	r2, #0
   15270:	bl	14cc4 <__assert_fail@plt+0x3cc0>
   15274:	ldr	r4, [sp]
   15278:	add	sp, sp, #4
   1527c:	pop	{pc}		; (ldr pc, [sp], #4)
   15280:	andeq	r8, r2, ip, lsr #5
   15284:	str	r4, [sp, #-8]!
   15288:	str	lr, [sp, #4]
   1528c:	ldr	r3, [pc, #12]	; 152a0 <__assert_fail@plt+0x429c>
   15290:	bl	14cc4 <__assert_fail@plt+0x3cc0>
   15294:	ldr	r4, [sp]
   15298:	add	sp, sp, #4
   1529c:	pop	{pc}		; (ldr pc, [sp], #4)
   152a0:	andeq	r8, r2, ip, lsr #5
   152a4:	str	r4, [sp, #-8]!
   152a8:	str	lr, [sp, #4]
   152ac:	mov	r1, r0
   152b0:	mov	r0, #0
   152b4:	bl	15260 <__assert_fail@plt+0x425c>
   152b8:	ldr	r4, [sp]
   152bc:	add	sp, sp, #4
   152c0:	pop	{pc}		; (ldr pc, [sp], #4)
   152c4:	str	r4, [sp, #-8]!
   152c8:	str	lr, [sp, #4]
   152cc:	mov	r2, r1
   152d0:	mov	r1, r0
   152d4:	mov	r0, #0
   152d8:	bl	15284 <__assert_fail@plt+0x4280>
   152dc:	ldr	r4, [sp]
   152e0:	add	sp, sp, #4
   152e4:	pop	{pc}		; (ldr pc, [sp], #4)
   152e8:	strd	r4, [sp, #-12]!
   152ec:	str	lr, [sp, #8]
   152f0:	sub	sp, sp, #52	; 0x34
   152f4:	mov	r4, r0
   152f8:	mov	r5, r2
   152fc:	mov	r0, sp
   15300:	bl	13438 <__assert_fail@plt+0x2434>
   15304:	mov	r3, sp
   15308:	mvn	r2, #0
   1530c:	mov	r1, r5
   15310:	mov	r0, r4
   15314:	bl	14cc4 <__assert_fail@plt+0x3cc0>
   15318:	add	sp, sp, #52	; 0x34
   1531c:	ldrd	r4, [sp]
   15320:	add	sp, sp, #8
   15324:	pop	{pc}		; (ldr pc, [sp], #4)
   15328:	strd	r4, [sp, #-16]!
   1532c:	str	r6, [sp, #8]
   15330:	str	lr, [sp, #12]
   15334:	sub	sp, sp, #48	; 0x30
   15338:	mov	r4, r0
   1533c:	mov	r5, r2
   15340:	mov	r6, r3
   15344:	mov	r0, sp
   15348:	bl	13438 <__assert_fail@plt+0x2434>
   1534c:	mov	r3, sp
   15350:	mov	r2, r6
   15354:	mov	r1, r5
   15358:	mov	r0, r4
   1535c:	bl	14cc4 <__assert_fail@plt+0x3cc0>
   15360:	add	sp, sp, #48	; 0x30
   15364:	ldrd	r4, [sp]
   15368:	ldr	r6, [sp, #8]
   1536c:	add	sp, sp, #12
   15370:	pop	{pc}		; (ldr pc, [sp], #4)
   15374:	str	r4, [sp, #-8]!
   15378:	str	lr, [sp, #4]
   1537c:	mov	r2, r1
   15380:	mov	r1, r0
   15384:	mov	r0, #0
   15388:	bl	152e8 <__assert_fail@plt+0x42e4>
   1538c:	ldr	r4, [sp]
   15390:	add	sp, sp, #4
   15394:	pop	{pc}		; (ldr pc, [sp], #4)
   15398:	str	r4, [sp, #-8]!
   1539c:	str	lr, [sp, #4]
   153a0:	mov	r3, r2
   153a4:	mov	r2, r1
   153a8:	mov	r1, r0
   153ac:	mov	r0, #0
   153b0:	bl	15328 <__assert_fail@plt+0x4324>
   153b4:	ldr	r4, [sp]
   153b8:	add	sp, sp, #4
   153bc:	pop	{pc}		; (ldr pc, [sp], #4)
   153c0:	strd	r4, [sp, #-12]!
   153c4:	str	lr, [sp, #8]
   153c8:	sub	sp, sp, #52	; 0x34
   153cc:	mov	r4, r0
   153d0:	mov	r5, r1
   153d4:	mov	r1, r2
   153d8:	ldr	r0, [pc, #92]	; 1543c <__assert_fail@plt+0x4438>
   153dc:	ldrd	r2, [r0]
   153e0:	strd	r2, [sp]
   153e4:	ldrd	r2, [r0, #8]
   153e8:	strd	r2, [sp, #8]
   153ec:	ldrd	r2, [r0, #16]
   153f0:	strd	r2, [sp, #16]
   153f4:	ldrd	r2, [r0, #24]
   153f8:	strd	r2, [sp, #24]
   153fc:	ldrd	r2, [r0, #32]
   15400:	strd	r2, [sp, #32]
   15404:	ldrd	r2, [r0, #40]	; 0x28
   15408:	strd	r2, [sp, #40]	; 0x28
   1540c:	mov	r2, #1
   15410:	mov	r0, sp
   15414:	bl	14f38 <__assert_fail@plt+0x3f34>
   15418:	mov	r3, sp
   1541c:	mov	r2, r5
   15420:	mov	r1, r4
   15424:	mov	r0, #0
   15428:	bl	14cc4 <__assert_fail@plt+0x3cc0>
   1542c:	add	sp, sp, #52	; 0x34
   15430:	ldrd	r4, [sp]
   15434:	add	sp, sp, #8
   15438:	pop	{pc}		; (ldr pc, [sp], #4)
   1543c:	andeq	r8, r2, ip, lsr #5
   15440:	str	r4, [sp, #-8]!
   15444:	str	lr, [sp, #4]
   15448:	mov	r2, r1
   1544c:	mvn	r1, #0
   15450:	bl	153c0 <__assert_fail@plt+0x43bc>
   15454:	ldr	r4, [sp]
   15458:	add	sp, sp, #4
   1545c:	pop	{pc}		; (ldr pc, [sp], #4)
   15460:	str	r4, [sp, #-8]!
   15464:	str	lr, [sp, #4]
   15468:	mov	r1, #58	; 0x3a
   1546c:	bl	15440 <__assert_fail@plt+0x443c>
   15470:	ldr	r4, [sp]
   15474:	add	sp, sp, #4
   15478:	pop	{pc}		; (ldr pc, [sp], #4)
   1547c:	str	r4, [sp, #-8]!
   15480:	str	lr, [sp, #4]
   15484:	mov	r2, #58	; 0x3a
   15488:	bl	153c0 <__assert_fail@plt+0x43bc>
   1548c:	ldr	r4, [sp]
   15490:	add	sp, sp, #4
   15494:	pop	{pc}		; (ldr pc, [sp], #4)
   15498:	strd	r4, [sp, #-12]!
   1549c:	str	lr, [sp, #8]
   154a0:	sub	sp, sp, #100	; 0x64
   154a4:	mov	r4, r0
   154a8:	mov	r5, r2
   154ac:	mov	r0, sp
   154b0:	bl	13438 <__assert_fail@plt+0x2434>
   154b4:	ldrd	r2, [sp]
   154b8:	strd	r2, [sp, #48]	; 0x30
   154bc:	ldrd	r2, [sp, #8]
   154c0:	strd	r2, [sp, #56]	; 0x38
   154c4:	ldrd	r2, [sp, #16]
   154c8:	strd	r2, [sp, #64]	; 0x40
   154cc:	ldrd	r2, [sp, #24]
   154d0:	strd	r2, [sp, #72]	; 0x48
   154d4:	ldrd	r2, [sp, #32]
   154d8:	strd	r2, [sp, #80]	; 0x50
   154dc:	ldrd	r2, [sp, #40]	; 0x28
   154e0:	strd	r2, [sp, #88]	; 0x58
   154e4:	mov	r2, #1
   154e8:	mov	r1, #58	; 0x3a
   154ec:	add	r0, sp, #48	; 0x30
   154f0:	bl	14f38 <__assert_fail@plt+0x3f34>
   154f4:	add	r3, sp, #48	; 0x30
   154f8:	mvn	r2, #0
   154fc:	mov	r1, r5
   15500:	mov	r0, r4
   15504:	bl	14cc4 <__assert_fail@plt+0x3cc0>
   15508:	add	sp, sp, #100	; 0x64
   1550c:	ldrd	r4, [sp]
   15510:	add	sp, sp, #8
   15514:	pop	{pc}		; (ldr pc, [sp], #4)
   15518:	strd	r4, [sp, #-20]!	; 0xffffffec
   1551c:	strd	r6, [sp, #8]
   15520:	str	lr, [sp, #16]
   15524:	sub	sp, sp, #52	; 0x34
   15528:	mov	r4, r0
   1552c:	mov	r5, r3
   15530:	ldr	r3, [pc, #92]	; 15594 <__assert_fail@plt+0x4590>
   15534:	ldrd	r6, [r3]
   15538:	strd	r6, [sp]
   1553c:	ldrd	r6, [r3, #8]
   15540:	strd	r6, [sp, #8]
   15544:	ldrd	r6, [r3, #16]
   15548:	strd	r6, [sp, #16]
   1554c:	ldrd	r6, [r3, #24]
   15550:	strd	r6, [sp, #24]
   15554:	ldrd	r6, [r3, #32]
   15558:	strd	r6, [sp, #32]
   1555c:	ldrd	r6, [r3, #40]	; 0x28
   15560:	strd	r6, [sp, #40]	; 0x28
   15564:	mov	r0, sp
   15568:	bl	14f94 <__assert_fail@plt+0x3f90>
   1556c:	mov	r3, sp
   15570:	ldr	r2, [sp, #72]	; 0x48
   15574:	mov	r1, r5
   15578:	mov	r0, r4
   1557c:	bl	14cc4 <__assert_fail@plt+0x3cc0>
   15580:	add	sp, sp, #52	; 0x34
   15584:	ldrd	r4, [sp]
   15588:	ldrd	r6, [sp, #8]
   1558c:	add	sp, sp, #16
   15590:	pop	{pc}		; (ldr pc, [sp], #4)
   15594:	andeq	r8, r2, ip, lsr #5
   15598:	push	{lr}		; (str lr, [sp, #-4]!)
   1559c:	sub	sp, sp, #12
   155a0:	mvn	ip, #0
   155a4:	str	ip, [sp]
   155a8:	bl	15518 <__assert_fail@plt+0x4514>
   155ac:	add	sp, sp, #12
   155b0:	pop	{pc}		; (ldr pc, [sp], #4)
   155b4:	str	r4, [sp, #-8]!
   155b8:	str	lr, [sp, #4]
   155bc:	mov	r3, r2
   155c0:	mov	r2, r1
   155c4:	mov	r1, r0
   155c8:	mov	r0, #0
   155cc:	bl	15598 <__assert_fail@plt+0x4594>
   155d0:	ldr	r4, [sp]
   155d4:	add	sp, sp, #4
   155d8:	pop	{pc}		; (ldr pc, [sp], #4)
   155dc:	push	{lr}		; (str lr, [sp, #-4]!)
   155e0:	sub	sp, sp, #12
   155e4:	str	r3, [sp]
   155e8:	mov	r3, r2
   155ec:	mov	r2, r1
   155f0:	mov	r1, r0
   155f4:	mov	r0, #0
   155f8:	bl	15518 <__assert_fail@plt+0x4514>
   155fc:	add	sp, sp, #12
   15600:	pop	{pc}		; (ldr pc, [sp], #4)
   15604:	str	r4, [sp, #-8]!
   15608:	str	lr, [sp, #4]
   1560c:	ldr	r3, [pc, #12]	; 15620 <__assert_fail@plt+0x461c>
   15610:	bl	14cc4 <__assert_fail@plt+0x3cc0>
   15614:	ldr	r4, [sp]
   15618:	add	sp, sp, #4
   1561c:	pop	{pc}		; (ldr pc, [sp], #4)
   15620:	andeq	r8, r2, r8, lsl r1
   15624:	str	r4, [sp, #-8]!
   15628:	str	lr, [sp, #4]
   1562c:	mov	r2, r1
   15630:	mov	r1, r0
   15634:	mov	r0, #0
   15638:	bl	15604 <__assert_fail@plt+0x4600>
   1563c:	ldr	r4, [sp]
   15640:	add	sp, sp, #4
   15644:	pop	{pc}		; (ldr pc, [sp], #4)
   15648:	str	r4, [sp, #-8]!
   1564c:	str	lr, [sp, #4]
   15650:	mvn	r2, #0
   15654:	bl	15604 <__assert_fail@plt+0x4600>
   15658:	ldr	r4, [sp]
   1565c:	add	sp, sp, #4
   15660:	pop	{pc}		; (ldr pc, [sp], #4)
   15664:	str	r4, [sp, #-8]!
   15668:	str	lr, [sp, #4]
   1566c:	mov	r1, r0
   15670:	mov	r0, #0
   15674:	bl	15648 <__assert_fail@plt+0x4644>
   15678:	ldr	r4, [sp]
   1567c:	add	sp, sp, #4
   15680:	pop	{pc}		; (ldr pc, [sp], #4)
   15684:	strd	r4, [sp, #-16]!
   15688:	str	r6, [sp, #8]
   1568c:	str	lr, [sp, #12]
   15690:	sub	sp, sp, #32
   15694:	mov	r4, r0
   15698:	ldr	r5, [sp, #48]	; 0x30
   1569c:	ldr	r6, [sp, #52]	; 0x34
   156a0:	cmp	r1, #0
   156a4:	beq	15770 <__assert_fail@plt+0x476c>
   156a8:	str	r3, [sp, #4]
   156ac:	str	r2, [sp]
   156b0:	mov	r3, r1
   156b4:	movw	r2, #29868	; 0x74ac
   156b8:	movt	r2, #1
   156bc:	mov	r1, #1
   156c0:	bl	10f38 <__fprintf_chk@plt>
   156c4:	mov	r2, #5
   156c8:	movw	r1, #29888	; 0x74c0
   156cc:	movt	r1, #1
   156d0:	mov	r0, #0
   156d4:	bl	10e0c <dcgettext@plt>
   156d8:	movw	r3, #2022	; 0x7e6
   156dc:	str	r3, [sp]
   156e0:	mov	r3, r0
   156e4:	movw	r2, #30616	; 0x7798
   156e8:	movt	r2, #1
   156ec:	mov	r1, #1
   156f0:	mov	r0, r4
   156f4:	bl	10f38 <__fprintf_chk@plt>
   156f8:	mov	r1, r4
   156fc:	mov	r0, #10
   15700:	bl	10e00 <fputc_unlocked@plt>
   15704:	mov	r2, #5
   15708:	movw	r1, #29892	; 0x74c4
   1570c:	movt	r1, #1
   15710:	mov	r0, #0
   15714:	bl	10e0c <dcgettext@plt>
   15718:	movw	r3, #30064	; 0x7570
   1571c:	movt	r3, #1
   15720:	mov	r2, r0
   15724:	mov	r1, #1
   15728:	mov	r0, r4
   1572c:	bl	10f38 <__fprintf_chk@plt>
   15730:	mov	r1, r4
   15734:	mov	r0, #10
   15738:	bl	10e00 <fputc_unlocked@plt>
   1573c:	cmp	r6, #9
   15740:	ldrls	pc, [pc, r6, lsl #2]
   15744:	b	15a48 <__assert_fail@plt+0x4a44>
   15748:			; <UNDEFINED> instruction: 0x000157b4
   1574c:	andeq	r5, r1, ip, lsl #15
   15750:	andeq	r5, r1, r8, asr #15
   15754:	strdeq	r5, [r1], -ip
   15758:	andeq	r5, r1, r8, lsr r8
   1575c:	andeq	r5, r1, ip, ror r8
   15760:	andeq	r5, r1, r8, asr #17
   15764:	andeq	r5, r1, ip, lsl r9
   15768:	andeq	r5, r1, r8, ror r9
   1576c:	ldrdeq	r5, [r1], -ip
   15770:	str	r3, [sp]
   15774:	mov	r3, r2
   15778:	movw	r2, #29880	; 0x74b8
   1577c:	movt	r2, #1
   15780:	mov	r1, #1
   15784:	bl	10f38 <__fprintf_chk@plt>
   15788:	b	156c4 <__assert_fail@plt+0x46c0>
   1578c:	mov	r2, #5
   15790:	movw	r1, #30100	; 0x7594
   15794:	movt	r1, #1
   15798:	mov	r0, #0
   1579c:	bl	10e0c <dcgettext@plt>
   157a0:	ldr	r3, [r5]
   157a4:	mov	r2, r0
   157a8:	mov	r1, #1
   157ac:	mov	r0, r4
   157b0:	bl	10f38 <__fprintf_chk@plt>
   157b4:	add	sp, sp, #32
   157b8:	ldrd	r4, [sp]
   157bc:	ldr	r6, [sp, #8]
   157c0:	add	sp, sp, #12
   157c4:	pop	{pc}		; (ldr pc, [sp], #4)
   157c8:	mov	r2, #5
   157cc:	movw	r1, #30116	; 0x75a4
   157d0:	movt	r1, #1
   157d4:	mov	r0, #0
   157d8:	bl	10e0c <dcgettext@plt>
   157dc:	ldr	r3, [r5, #4]
   157e0:	str	r3, [sp]
   157e4:	ldr	r3, [r5]
   157e8:	mov	r2, r0
   157ec:	mov	r1, #1
   157f0:	mov	r0, r4
   157f4:	bl	10f38 <__fprintf_chk@plt>
   157f8:	b	157b4 <__assert_fail@plt+0x47b0>
   157fc:	mov	r2, #5
   15800:	movw	r1, #30140	; 0x75bc
   15804:	movt	r1, #1
   15808:	mov	r0, #0
   1580c:	bl	10e0c <dcgettext@plt>
   15810:	ldr	r3, [r5, #8]
   15814:	str	r3, [sp, #4]
   15818:	ldr	r3, [r5, #4]
   1581c:	str	r3, [sp]
   15820:	ldr	r3, [r5]
   15824:	mov	r2, r0
   15828:	mov	r1, #1
   1582c:	mov	r0, r4
   15830:	bl	10f38 <__fprintf_chk@plt>
   15834:	b	157b4 <__assert_fail@plt+0x47b0>
   15838:	mov	r2, #5
   1583c:	movw	r1, #30168	; 0x75d8
   15840:	movt	r1, #1
   15844:	mov	r0, #0
   15848:	bl	10e0c <dcgettext@plt>
   1584c:	ldr	r3, [r5, #12]
   15850:	str	r3, [sp, #8]
   15854:	ldr	r3, [r5, #8]
   15858:	str	r3, [sp, #4]
   1585c:	ldr	r3, [r5, #4]
   15860:	str	r3, [sp]
   15864:	ldr	r3, [r5]
   15868:	mov	r2, r0
   1586c:	mov	r1, #1
   15870:	mov	r0, r4
   15874:	bl	10f38 <__fprintf_chk@plt>
   15878:	b	157b4 <__assert_fail@plt+0x47b0>
   1587c:	mov	r2, #5
   15880:	movw	r1, #30200	; 0x75f8
   15884:	movt	r1, #1
   15888:	mov	r0, #0
   1588c:	bl	10e0c <dcgettext@plt>
   15890:	ldr	r3, [r5, #16]
   15894:	str	r3, [sp, #12]
   15898:	ldr	r3, [r5, #12]
   1589c:	str	r3, [sp, #8]
   158a0:	ldr	r3, [r5, #8]
   158a4:	str	r3, [sp, #4]
   158a8:	ldr	r3, [r5, #4]
   158ac:	str	r3, [sp]
   158b0:	ldr	r3, [r5]
   158b4:	mov	r2, r0
   158b8:	mov	r1, #1
   158bc:	mov	r0, r4
   158c0:	bl	10f38 <__fprintf_chk@plt>
   158c4:	b	157b4 <__assert_fail@plt+0x47b0>
   158c8:	mov	r2, #5
   158cc:	movw	r1, #30236	; 0x761c
   158d0:	movt	r1, #1
   158d4:	mov	r0, #0
   158d8:	bl	10e0c <dcgettext@plt>
   158dc:	ldr	r3, [r5, #20]
   158e0:	str	r3, [sp, #16]
   158e4:	ldr	r3, [r5, #16]
   158e8:	str	r3, [sp, #12]
   158ec:	ldr	r3, [r5, #12]
   158f0:	str	r3, [sp, #8]
   158f4:	ldr	r3, [r5, #8]
   158f8:	str	r3, [sp, #4]
   158fc:	ldr	r3, [r5, #4]
   15900:	str	r3, [sp]
   15904:	ldr	r3, [r5]
   15908:	mov	r2, r0
   1590c:	mov	r1, #1
   15910:	mov	r0, r4
   15914:	bl	10f38 <__fprintf_chk@plt>
   15918:	b	157b4 <__assert_fail@plt+0x47b0>
   1591c:	mov	r2, #5
   15920:	movw	r1, #30276	; 0x7644
   15924:	movt	r1, #1
   15928:	mov	r0, #0
   1592c:	bl	10e0c <dcgettext@plt>
   15930:	ldr	r3, [r5, #24]
   15934:	str	r3, [sp, #20]
   15938:	ldr	r3, [r5, #20]
   1593c:	str	r3, [sp, #16]
   15940:	ldr	r3, [r5, #16]
   15944:	str	r3, [sp, #12]
   15948:	ldr	r3, [r5, #12]
   1594c:	str	r3, [sp, #8]
   15950:	ldr	r3, [r5, #8]
   15954:	str	r3, [sp, #4]
   15958:	ldr	r3, [r5, #4]
   1595c:	str	r3, [sp]
   15960:	ldr	r3, [r5]
   15964:	mov	r2, r0
   15968:	mov	r1, #1
   1596c:	mov	r0, r4
   15970:	bl	10f38 <__fprintf_chk@plt>
   15974:	b	157b4 <__assert_fail@plt+0x47b0>
   15978:	mov	r2, #5
   1597c:	movw	r1, #30320	; 0x7670
   15980:	movt	r1, #1
   15984:	mov	r0, #0
   15988:	bl	10e0c <dcgettext@plt>
   1598c:	ldr	r3, [r5, #28]
   15990:	str	r3, [sp, #24]
   15994:	ldr	r3, [r5, #24]
   15998:	str	r3, [sp, #20]
   1599c:	ldr	r3, [r5, #20]
   159a0:	str	r3, [sp, #16]
   159a4:	ldr	r3, [r5, #16]
   159a8:	str	r3, [sp, #12]
   159ac:	ldr	r3, [r5, #12]
   159b0:	str	r3, [sp, #8]
   159b4:	ldr	r3, [r5, #8]
   159b8:	str	r3, [sp, #4]
   159bc:	ldr	r3, [r5, #4]
   159c0:	str	r3, [sp]
   159c4:	ldr	r3, [r5]
   159c8:	mov	r2, r0
   159cc:	mov	r1, #1
   159d0:	mov	r0, r4
   159d4:	bl	10f38 <__fprintf_chk@plt>
   159d8:	b	157b4 <__assert_fail@plt+0x47b0>
   159dc:	mov	r2, #5
   159e0:	movw	r1, #30368	; 0x76a0
   159e4:	movt	r1, #1
   159e8:	mov	r0, #0
   159ec:	bl	10e0c <dcgettext@plt>
   159f0:	ldr	r3, [r5, #32]
   159f4:	str	r3, [sp, #28]
   159f8:	ldr	r3, [r5, #28]
   159fc:	str	r3, [sp, #24]
   15a00:	ldr	r3, [r5, #24]
   15a04:	str	r3, [sp, #20]
   15a08:	ldr	r3, [r5, #20]
   15a0c:	str	r3, [sp, #16]
   15a10:	ldr	r3, [r5, #16]
   15a14:	str	r3, [sp, #12]
   15a18:	ldr	r3, [r5, #12]
   15a1c:	str	r3, [sp, #8]
   15a20:	ldr	r3, [r5, #8]
   15a24:	str	r3, [sp, #4]
   15a28:	ldr	r3, [r5, #4]
   15a2c:	str	r3, [sp]
   15a30:	ldr	r3, [r5]
   15a34:	mov	r2, r0
   15a38:	mov	r1, #1
   15a3c:	mov	r0, r4
   15a40:	bl	10f38 <__fprintf_chk@plt>
   15a44:	b	157b4 <__assert_fail@plt+0x47b0>
   15a48:	mov	r2, #5
   15a4c:	movw	r1, #30420	; 0x76d4
   15a50:	movt	r1, #1
   15a54:	mov	r0, #0
   15a58:	bl	10e0c <dcgettext@plt>
   15a5c:	ldr	r3, [r5, #32]
   15a60:	str	r3, [sp, #28]
   15a64:	ldr	r3, [r5, #28]
   15a68:	str	r3, [sp, #24]
   15a6c:	ldr	r3, [r5, #24]
   15a70:	str	r3, [sp, #20]
   15a74:	ldr	r3, [r5, #20]
   15a78:	str	r3, [sp, #16]
   15a7c:	ldr	r3, [r5, #16]
   15a80:	str	r3, [sp, #12]
   15a84:	ldr	r3, [r5, #12]
   15a88:	str	r3, [sp, #8]
   15a8c:	ldr	r3, [r5, #8]
   15a90:	str	r3, [sp, #4]
   15a94:	ldr	r3, [r5, #4]
   15a98:	str	r3, [sp]
   15a9c:	ldr	r3, [r5]
   15aa0:	mov	r2, r0
   15aa4:	mov	r1, #1
   15aa8:	mov	r0, r4
   15aac:	bl	10f38 <__fprintf_chk@plt>
   15ab0:	b	157b4 <__assert_fail@plt+0x47b0>
   15ab4:	strd	r4, [sp, #-12]!
   15ab8:	str	lr, [sp, #8]
   15abc:	sub	sp, sp, #12
   15ac0:	ldr	r5, [sp, #24]
   15ac4:	ldr	ip, [r5]
   15ac8:	cmp	ip, #0
   15acc:	beq	15b04 <__assert_fail@plt+0x4b00>
   15ad0:	mov	lr, r5
   15ad4:	mov	ip, #0
   15ad8:	add	ip, ip, #1
   15adc:	ldr	r4, [lr, #4]!
   15ae0:	cmp	r4, #0
   15ae4:	bne	15ad8 <__assert_fail@plt+0x4ad4>
   15ae8:	str	ip, [sp, #4]
   15aec:	str	r5, [sp]
   15af0:	bl	15684 <__assert_fail@plt+0x4680>
   15af4:	add	sp, sp, #12
   15af8:	ldrd	r4, [sp]
   15afc:	add	sp, sp, #8
   15b00:	pop	{pc}		; (ldr pc, [sp], #4)
   15b04:	mov	ip, #0
   15b08:	b	15ae8 <__assert_fail@plt+0x4ae4>
   15b0c:	strd	r4, [sp, #-12]!
   15b10:	str	lr, [sp, #8]
   15b14:	sub	sp, sp, #52	; 0x34
   15b18:	ldr	r5, [sp, #64]	; 0x40
   15b1c:	add	r4, sp, #8
   15b20:	mov	ip, #0
   15b24:	ldr	lr, [r5], #4
   15b28:	str	lr, [r4], #4
   15b2c:	cmp	lr, #0
   15b30:	beq	15b40 <__assert_fail@plt+0x4b3c>
   15b34:	add	ip, ip, #1
   15b38:	cmp	ip, #10
   15b3c:	bne	15b24 <__assert_fail@plt+0x4b20>
   15b40:	str	ip, [sp, #4]
   15b44:	add	ip, sp, #8
   15b48:	str	ip, [sp]
   15b4c:	bl	15684 <__assert_fail@plt+0x4680>
   15b50:	add	sp, sp, #52	; 0x34
   15b54:	ldrd	r4, [sp]
   15b58:	add	sp, sp, #8
   15b5c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b60:	push	{r3}		; (str r3, [sp, #-4]!)
   15b64:	push	{lr}		; (str lr, [sp, #-4]!)
   15b68:	sub	sp, sp, #16
   15b6c:	add	r3, sp, #24
   15b70:	str	r3, [sp, #12]
   15b74:	str	r3, [sp]
   15b78:	ldr	r3, [sp, #20]
   15b7c:	bl	15b0c <__assert_fail@plt+0x4b08>
   15b80:	add	sp, sp, #16
   15b84:	pop	{lr}		; (ldr lr, [sp], #4)
   15b88:	add	sp, sp, #4
   15b8c:	bx	lr
   15b90:	str	r4, [sp, #-8]!
   15b94:	str	lr, [sp, #4]
   15b98:	movw	r3, #33124	; 0x8164
   15b9c:	movt	r3, #2
   15ba0:	ldr	r1, [r3]
   15ba4:	mov	r0, #10
   15ba8:	bl	10e00 <fputc_unlocked@plt>
   15bac:	mov	r2, #5
   15bb0:	movw	r1, #30480	; 0x7710
   15bb4:	movt	r1, #1
   15bb8:	mov	r0, #0
   15bbc:	bl	10e0c <dcgettext@plt>
   15bc0:	movw	r2, #30500	; 0x7724
   15bc4:	movt	r2, #1
   15bc8:	mov	r1, r0
   15bcc:	mov	r0, #1
   15bd0:	bl	10f20 <__printf_chk@plt>
   15bd4:	mov	r2, #5
   15bd8:	movw	r1, #30524	; 0x773c
   15bdc:	movt	r1, #1
   15be0:	mov	r0, #0
   15be4:	bl	10e0c <dcgettext@plt>
   15be8:	movw	r3, #28356	; 0x6ec4
   15bec:	movt	r3, #1
   15bf0:	movw	r2, #28396	; 0x6eec
   15bf4:	movt	r2, #1
   15bf8:	mov	r1, r0
   15bfc:	mov	r0, #1
   15c00:	bl	10f20 <__printf_chk@plt>
   15c04:	mov	r2, #5
   15c08:	movw	r1, #30544	; 0x7750
   15c0c:	movt	r1, #1
   15c10:	mov	r0, #0
   15c14:	bl	10e0c <dcgettext@plt>
   15c18:	movw	r2, #30584	; 0x7778
   15c1c:	movt	r2, #1
   15c20:	mov	r1, r0
   15c24:	mov	r0, #1
   15c28:	bl	10f20 <__printf_chk@plt>
   15c2c:	ldr	r4, [sp]
   15c30:	add	sp, sp, #4
   15c34:	pop	{pc}		; (ldr pc, [sp], #4)
   15c38:	str	r4, [sp, #-8]!
   15c3c:	str	lr, [sp, #4]
   15c40:	bl	16184 <__assert_fail@plt+0x5180>
   15c44:	cmp	r0, #0
   15c48:	beq	15c58 <__assert_fail@plt+0x4c54>
   15c4c:	ldr	r4, [sp]
   15c50:	add	sp, sp, #4
   15c54:	pop	{pc}		; (ldr pc, [sp], #4)
   15c58:	bl	160cc <__assert_fail@plt+0x50c8>
   15c5c:	str	r4, [sp, #-8]!
   15c60:	str	lr, [sp, #4]
   15c64:	bl	16184 <__assert_fail@plt+0x5180>
   15c68:	cmp	r0, #0
   15c6c:	beq	15c7c <__assert_fail@plt+0x4c78>
   15c70:	ldr	r4, [sp]
   15c74:	add	sp, sp, #4
   15c78:	pop	{pc}		; (ldr pc, [sp], #4)
   15c7c:	bl	160cc <__assert_fail@plt+0x50c8>
   15c80:	str	r4, [sp, #-8]!
   15c84:	str	lr, [sp, #4]
   15c88:	bl	15c38 <__assert_fail@plt+0x4c34>
   15c8c:	ldr	r4, [sp]
   15c90:	add	sp, sp, #4
   15c94:	pop	{pc}		; (ldr pc, [sp], #4)
   15c98:	strd	r4, [sp, #-16]!
   15c9c:	str	r6, [sp, #8]
   15ca0:	str	lr, [sp, #12]
   15ca4:	mov	r5, r0
   15ca8:	mov	r4, r1
   15cac:	bl	161c0 <__assert_fail@plt+0x51bc>
   15cb0:	cmp	r0, #0
   15cb4:	beq	15cc8 <__assert_fail@plt+0x4cc4>
   15cb8:	ldrd	r4, [sp]
   15cbc:	ldr	r6, [sp, #8]
   15cc0:	add	sp, sp, #12
   15cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   15cc8:	adds	r4, r4, #0
   15ccc:	movne	r4, #1
   15cd0:	cmp	r5, #0
   15cd4:	moveq	r4, #1
   15cd8:	cmp	r4, #0
   15cdc:	beq	15cb8 <__assert_fail@plt+0x4cb4>
   15ce0:	bl	160cc <__assert_fail@plt+0x50c8>
   15ce4:	str	r4, [sp, #-8]!
   15ce8:	str	lr, [sp, #4]
   15cec:	cmp	r1, #0
   15cf0:	orreq	r1, r1, #1
   15cf4:	bl	161c0 <__assert_fail@plt+0x51bc>
   15cf8:	cmp	r0, #0
   15cfc:	beq	15d0c <__assert_fail@plt+0x4d08>
   15d00:	ldr	r4, [sp]
   15d04:	add	sp, sp, #4
   15d08:	pop	{pc}		; (ldr pc, [sp], #4)
   15d0c:	bl	160cc <__assert_fail@plt+0x50c8>
   15d10:	strd	r4, [sp, #-16]!
   15d14:	str	r6, [sp, #8]
   15d18:	str	lr, [sp, #12]
   15d1c:	mov	r4, r0
   15d20:	mov	r6, r1
   15d24:	mov	r5, r2
   15d28:	bl	164fc <__assert_fail@plt+0x54f8>
   15d2c:	cmp	r0, #0
   15d30:	beq	15d44 <__assert_fail@plt+0x4d40>
   15d34:	ldrd	r4, [sp]
   15d38:	ldr	r6, [sp, #8]
   15d3c:	add	sp, sp, #12
   15d40:	pop	{pc}		; (ldr pc, [sp], #4)
   15d44:	cmp	r4, #0
   15d48:	beq	15d58 <__assert_fail@plt+0x4d54>
   15d4c:	cmp	r6, #0
   15d50:	cmpne	r5, #0
   15d54:	beq	15d34 <__assert_fail@plt+0x4d30>
   15d58:	bl	160cc <__assert_fail@plt+0x50c8>
   15d5c:	str	r4, [sp, #-8]!
   15d60:	str	lr, [sp, #4]
   15d64:	bl	15d10 <__assert_fail@plt+0x4d0c>
   15d68:	ldr	r4, [sp]
   15d6c:	add	sp, sp, #4
   15d70:	pop	{pc}		; (ldr pc, [sp], #4)
   15d74:	str	r4, [sp, #-8]!
   15d78:	str	lr, [sp, #4]
   15d7c:	mov	ip, r1
   15d80:	mov	r3, r2
   15d84:	cmp	r2, #0
   15d88:	cmpne	r1, #0
   15d8c:	moveq	r3, #1
   15d90:	moveq	ip, r3
   15d94:	mov	r2, r3
   15d98:	mov	r1, ip
   15d9c:	bl	164fc <__assert_fail@plt+0x54f8>
   15da0:	cmp	r0, #0
   15da4:	beq	15db4 <__assert_fail@plt+0x4db0>
   15da8:	ldr	r4, [sp]
   15dac:	add	sp, sp, #4
   15db0:	pop	{pc}		; (ldr pc, [sp], #4)
   15db4:	bl	160cc <__assert_fail@plt+0x50c8>
   15db8:	str	r4, [sp, #-8]!
   15dbc:	str	lr, [sp, #4]
   15dc0:	mov	r2, r1
   15dc4:	mov	r1, r0
   15dc8:	mov	r0, #0
   15dcc:	bl	15d10 <__assert_fail@plt+0x4d0c>
   15dd0:	ldr	r4, [sp]
   15dd4:	add	sp, sp, #4
   15dd8:	pop	{pc}		; (ldr pc, [sp], #4)
   15ddc:	str	r4, [sp, #-8]!
   15de0:	str	lr, [sp, #4]
   15de4:	mov	r2, r1
   15de8:	mov	r1, r0
   15dec:	mov	r0, #0
   15df0:	bl	15d74 <__assert_fail@plt+0x4d70>
   15df4:	ldr	r4, [sp]
   15df8:	add	sp, sp, #4
   15dfc:	pop	{pc}		; (ldr pc, [sp], #4)
   15e00:	strd	r4, [sp, #-16]!
   15e04:	str	r6, [sp, #8]
   15e08:	str	lr, [sp, #12]
   15e0c:	mov	r5, r1
   15e10:	ldr	r4, [r1]
   15e14:	cmp	r0, #0
   15e18:	beq	15e48 <__assert_fail@plt+0x4e44>
   15e1c:	lsr	r3, r4, #1
   15e20:	add	r3, r3, #1
   15e24:	adds	r4, r4, r3
   15e28:	bcs	15e64 <__assert_fail@plt+0x4e60>
   15e2c:	mov	r1, r4
   15e30:	bl	15d10 <__assert_fail@plt+0x4d0c>
   15e34:	str	r4, [r5]
   15e38:	ldrd	r4, [sp]
   15e3c:	ldr	r6, [sp, #8]
   15e40:	add	sp, sp, #12
   15e44:	pop	{pc}		; (ldr pc, [sp], #4)
   15e48:	cmp	r4, #0
   15e4c:	bne	15e2c <__assert_fail@plt+0x4e28>
   15e50:	mov	r4, #64	; 0x40
   15e54:	udiv	r4, r4, r2
   15e58:	cmp	r2, #64	; 0x40
   15e5c:	addhi	r4, r4, #1
   15e60:	b	15e2c <__assert_fail@plt+0x4e28>
   15e64:	bl	160cc <__assert_fail@plt+0x50c8>
   15e68:	str	r4, [sp, #-8]!
   15e6c:	str	lr, [sp, #4]
   15e70:	mov	r2, #1
   15e74:	bl	15e00 <__assert_fail@plt+0x4dfc>
   15e78:	ldr	r4, [sp]
   15e7c:	add	sp, sp, #4
   15e80:	pop	{pc}		; (ldr pc, [sp], #4)
   15e84:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15e88:	strd	r6, [sp, #8]
   15e8c:	str	r8, [sp, #16]
   15e90:	str	lr, [sp, #20]
   15e94:	mov	r5, r1
   15e98:	ldr	lr, [sp, #24]
   15e9c:	ldr	ip, [r1]
   15ea0:	asr	r4, ip, #1
   15ea4:	adds	r4, ip, r4
   15ea8:	movvs	r1, #1
   15eac:	movvc	r1, #0
   15eb0:	cmp	r1, #0
   15eb4:	mvnne	r4, #-2147483648	; 0x80000000
   15eb8:	mvn	r8, r3
   15ebc:	lsr	r8, r8, #31
   15ec0:	cmp	r3, r4
   15ec4:	movge	r1, #0
   15ec8:	andlt	r1, r8, #1
   15ecc:	cmp	r1, #0
   15ed0:	movne	r4, r3
   15ed4:	smull	r6, r7, r4, lr
   15ed8:	asr	r1, r6, #31
   15edc:	cmp	r1, r7
   15ee0:	bne	15ef8 <__assert_fail@plt+0x4ef4>
   15ee4:	mov	r1, r6
   15ee8:	cmp	r6, #63	; 0x3f
   15eec:	movle	r1, #64	; 0x40
   15ef0:	ble	15efc <__assert_fail@plt+0x4ef8>
   15ef4:	b	15f08 <__assert_fail@plt+0x4f04>
   15ef8:	mvn	r1, #-2147483648	; 0x80000000
   15efc:	sdiv	r4, r1, lr
   15f00:	mls	r6, lr, r4, r1
   15f04:	sub	r1, r1, r6
   15f08:	cmp	r0, #0
   15f0c:	moveq	r6, #0
   15f10:	streq	r6, [r5]
   15f14:	sub	r6, r4, ip
   15f18:	cmp	r6, r2
   15f1c:	bge	15f54 <__assert_fail@plt+0x4f50>
   15f20:	adds	r2, ip, r2
   15f24:	mov	r4, r2
   15f28:	bvs	15f70 <__assert_fail@plt+0x4f6c>
   15f2c:	cmp	r2, r3
   15f30:	movle	r3, #0
   15f34:	andgt	r3, r8, #1
   15f38:	cmp	r3, #0
   15f3c:	bne	15f70 <__assert_fail@plt+0x4f6c>
   15f40:	smull	r2, r3, r2, lr
   15f44:	asr	ip, r2, #31
   15f48:	mov	r1, r2
   15f4c:	cmp	ip, r3
   15f50:	bne	15f70 <__assert_fail@plt+0x4f6c>
   15f54:	bl	15c98 <__assert_fail@plt+0x4c94>
   15f58:	str	r4, [r5]
   15f5c:	ldrd	r4, [sp]
   15f60:	ldrd	r6, [sp, #8]
   15f64:	ldr	r8, [sp, #16]
   15f68:	add	sp, sp, #20
   15f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   15f70:	bl	160cc <__assert_fail@plt+0x50c8>
   15f74:	str	r4, [sp, #-8]!
   15f78:	str	lr, [sp, #4]
   15f7c:	bl	16110 <__assert_fail@plt+0x510c>
   15f80:	cmp	r0, #0
   15f84:	beq	15f94 <__assert_fail@plt+0x4f90>
   15f88:	ldr	r4, [sp]
   15f8c:	add	sp, sp, #4
   15f90:	pop	{pc}		; (ldr pc, [sp], #4)
   15f94:	bl	160cc <__assert_fail@plt+0x50c8>
   15f98:	str	r4, [sp, #-8]!
   15f9c:	str	lr, [sp, #4]
   15fa0:	mov	r1, #1
   15fa4:	bl	15f74 <__assert_fail@plt+0x4f70>
   15fa8:	ldr	r4, [sp]
   15fac:	add	sp, sp, #4
   15fb0:	pop	{pc}		; (ldr pc, [sp], #4)
   15fb4:	str	r4, [sp, #-8]!
   15fb8:	str	lr, [sp, #4]
   15fbc:	bl	16110 <__assert_fail@plt+0x510c>
   15fc0:	cmp	r0, #0
   15fc4:	beq	15fd4 <__assert_fail@plt+0x4fd0>
   15fc8:	ldr	r4, [sp]
   15fcc:	add	sp, sp, #4
   15fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   15fd4:	bl	160cc <__assert_fail@plt+0x50c8>
   15fd8:	str	r4, [sp, #-8]!
   15fdc:	str	lr, [sp, #4]
   15fe0:	mov	r1, #1
   15fe4:	bl	15fb4 <__assert_fail@plt+0x4fb0>
   15fe8:	ldr	r4, [sp]
   15fec:	add	sp, sp, #4
   15ff0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ff4:	strd	r4, [sp, #-16]!
   15ff8:	str	r6, [sp, #8]
   15ffc:	str	lr, [sp, #12]
   16000:	mov	r5, r0
   16004:	mov	r4, r1
   16008:	mov	r0, r1
   1600c:	bl	15c38 <__assert_fail@plt+0x4c34>
   16010:	mov	r2, r4
   16014:	mov	r1, r5
   16018:	bl	10dd0 <memcpy@plt>
   1601c:	ldrd	r4, [sp]
   16020:	ldr	r6, [sp, #8]
   16024:	add	sp, sp, #12
   16028:	pop	{pc}		; (ldr pc, [sp], #4)
   1602c:	strd	r4, [sp, #-16]!
   16030:	str	r6, [sp, #8]
   16034:	str	lr, [sp, #12]
   16038:	mov	r5, r0
   1603c:	mov	r4, r1
   16040:	mov	r0, r1
   16044:	bl	15c5c <__assert_fail@plt+0x4c58>
   16048:	mov	r2, r4
   1604c:	mov	r1, r5
   16050:	bl	10dd0 <memcpy@plt>
   16054:	ldrd	r4, [sp]
   16058:	ldr	r6, [sp, #8]
   1605c:	add	sp, sp, #12
   16060:	pop	{pc}		; (ldr pc, [sp], #4)
   16064:	strd	r4, [sp, #-16]!
   16068:	str	r6, [sp, #8]
   1606c:	str	lr, [sp, #12]
   16070:	mov	r5, r0
   16074:	mov	r4, r1
   16078:	add	r0, r1, #1
   1607c:	bl	15c5c <__assert_fail@plt+0x4c58>
   16080:	mov	r2, #0
   16084:	strb	r2, [r0, r4]
   16088:	mov	r2, r4
   1608c:	mov	r1, r5
   16090:	bl	10dd0 <memcpy@plt>
   16094:	ldrd	r4, [sp]
   16098:	ldr	r6, [sp, #8]
   1609c:	add	sp, sp, #12
   160a0:	pop	{pc}		; (ldr pc, [sp], #4)
   160a4:	str	r4, [sp, #-8]!
   160a8:	str	lr, [sp, #4]
   160ac:	mov	r4, r0
   160b0:	bl	10ed8 <strlen@plt>
   160b4:	add	r1, r0, #1
   160b8:	mov	r0, r4
   160bc:	bl	15ff4 <__assert_fail@plt+0x4ff0>
   160c0:	ldr	r4, [sp]
   160c4:	add	sp, sp, #4
   160c8:	pop	{pc}		; (ldr pc, [sp], #4)
   160cc:	str	r4, [sp, #-8]!
   160d0:	str	lr, [sp, #4]
   160d4:	movw	r3, #33028	; 0x8104
   160d8:	movt	r3, #2
   160dc:	ldr	r4, [r3]
   160e0:	mov	r2, #5
   160e4:	movw	r1, #30664	; 0x77c8
   160e8:	movt	r1, #1
   160ec:	mov	r0, #0
   160f0:	bl	10e0c <dcgettext@plt>
   160f4:	mov	r3, r0
   160f8:	movw	r2, #29584	; 0x7390
   160fc:	movt	r2, #1
   16100:	mov	r1, #0
   16104:	mov	r0, r4
   16108:	bl	10e78 <error@plt>
   1610c:	bl	10fec <abort@plt>
   16110:	strd	r4, [sp, #-16]!
   16114:	str	r6, [sp, #8]
   16118:	str	lr, [sp, #12]
   1611c:	cmp	r1, #0
   16120:	cmpne	r0, #0
   16124:	beq	16160 <__assert_fail@plt+0x515c>
   16128:	mov	r2, r0
   1612c:	mov	r3, r1
   16130:	umull	r4, r5, r0, r1
   16134:	adds	r1, r5, #0
   16138:	movne	r1, #1
   1613c:	cmp	r4, #0
   16140:	movlt	r1, #1
   16144:	cmp	r1, #0
   16148:	beq	16168 <__assert_fail@plt+0x5164>
   1614c:	bl	10ef0 <__errno_location@plt>
   16150:	mov	r3, #12
   16154:	str	r3, [r0]
   16158:	mov	r0, #0
   1615c:	b	16174 <__assert_fail@plt+0x5170>
   16160:	mov	r3, #1
   16164:	mov	r2, r3
   16168:	mov	r1, r3
   1616c:	mov	r0, r2
   16170:	bl	10d64 <calloc@plt>
   16174:	ldrd	r4, [sp]
   16178:	ldr	r6, [sp, #8]
   1617c:	add	sp, sp, #12
   16180:	pop	{pc}		; (ldr pc, [sp], #4)
   16184:	str	r4, [sp, #-8]!
   16188:	str	lr, [sp, #4]
   1618c:	cmp	r0, #0
   16190:	beq	161ac <__assert_fail@plt+0x51a8>
   16194:	bge	161b0 <__assert_fail@plt+0x51ac>
   16198:	bl	10ef0 <__errno_location@plt>
   1619c:	mov	r3, #12
   161a0:	str	r3, [r0]
   161a4:	mov	r0, #0
   161a8:	b	161b4 <__assert_fail@plt+0x51b0>
   161ac:	mov	r0, #1
   161b0:	bl	10e84 <malloc@plt>
   161b4:	ldr	r4, [sp]
   161b8:	add	sp, sp, #4
   161bc:	pop	{pc}		; (ldr pc, [sp], #4)
   161c0:	str	r4, [sp, #-8]!
   161c4:	str	lr, [sp, #4]
   161c8:	cmp	r0, #0
   161cc:	beq	161f0 <__assert_fail@plt+0x51ec>
   161d0:	cmp	r1, #0
   161d4:	beq	161fc <__assert_fail@plt+0x51f8>
   161d8:	cmp	r1, #0
   161dc:	blt	16208 <__assert_fail@plt+0x5204>
   161e0:	bl	10e18 <realloc@plt>
   161e4:	ldr	r4, [sp]
   161e8:	add	sp, sp, #4
   161ec:	pop	{pc}		; (ldr pc, [sp], #4)
   161f0:	mov	r0, r1
   161f4:	bl	16184 <__assert_fail@plt+0x5180>
   161f8:	b	161e4 <__assert_fail@plt+0x51e0>
   161fc:	bl	12d9c <__assert_fail@plt+0x1d98>
   16200:	mov	r0, #0
   16204:	b	161e4 <__assert_fail@plt+0x51e0>
   16208:	bl	10ef0 <__errno_location@plt>
   1620c:	mov	r3, #12
   16210:	str	r3, [r0]
   16214:	mov	r0, #0
   16218:	b	161e4 <__assert_fail@plt+0x51e0>
   1621c:	strd	r4, [sp, #-16]!
   16220:	str	r6, [sp, #8]
   16224:	str	lr, [sp, #12]
   16228:	mov	r5, r0
   1622c:	bl	10e60 <__fpending@plt>
   16230:	mov	r6, r0
   16234:	ldr	r4, [r5]
   16238:	and	r4, r4, #32
   1623c:	mov	r0, r5
   16240:	bl	12c70 <__assert_fail@plt+0x1c6c>
   16244:	cmp	r4, #0
   16248:	bne	1627c <__assert_fail@plt+0x5278>
   1624c:	cmp	r0, #0
   16250:	beq	1626c <__assert_fail@plt+0x5268>
   16254:	cmp	r6, #0
   16258:	bne	16298 <__assert_fail@plt+0x5294>
   1625c:	bl	10ef0 <__errno_location@plt>
   16260:	ldr	r0, [r0]
   16264:	subs	r0, r0, #9
   16268:	mvnne	r0, #0
   1626c:	ldrd	r4, [sp]
   16270:	ldr	r6, [sp, #8]
   16274:	add	sp, sp, #12
   16278:	pop	{pc}		; (ldr pc, [sp], #4)
   1627c:	cmp	r0, #0
   16280:	bne	162a0 <__assert_fail@plt+0x529c>
   16284:	bl	10ef0 <__errno_location@plt>
   16288:	mov	r3, #0
   1628c:	str	r3, [r0]
   16290:	mvn	r0, #0
   16294:	b	1626c <__assert_fail@plt+0x5268>
   16298:	mvn	r0, #0
   1629c:	b	1626c <__assert_fail@plt+0x5268>
   162a0:	mvn	r0, #0
   162a4:	b	1626c <__assert_fail@plt+0x5268>
   162a8:	ldr	r2, [r0, #20]
   162ac:	ldr	r3, [r0, #16]
   162b0:	cmp	r2, r3
   162b4:	bhi	162d4 <__assert_fail@plt+0x52d0>
   162b8:	ldr	r3, [r0, #8]
   162bc:	ldr	r2, [r0, #4]
   162c0:	subs	r3, r3, r2
   162c4:	beq	162dc <__assert_fail@plt+0x52d8>
   162c8:	str	r3, [r1]
   162cc:	ldr	r0, [r0, #4]
   162d0:	bx	lr
   162d4:	mov	r0, #0
   162d8:	bx	lr
   162dc:	mov	r0, #0
   162e0:	bx	lr
   162e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   162e8:	strd	r6, [sp, #8]
   162ec:	str	r8, [sp, #16]
   162f0:	str	lr, [sp, #20]
   162f4:	sub	sp, sp, #4096	; 0x1000
   162f8:	sub	sp, sp, #8
   162fc:	subs	r4, r1, #0
   16300:	moveq	r0, #0
   16304:	beq	1642c <__assert_fail@plt+0x5428>
   16308:	mov	r6, r0
   1630c:	bl	16538 <__assert_fail@plt+0x5534>
   16310:	subs	r5, r0, #0
   16314:	bne	1633c <__assert_fail@plt+0x5338>
   16318:	b	16380 <__assert_fail@plt+0x537c>
   1631c:	mov	r0, r6
   16320:	bl	10f14 <fgetc@plt>
   16324:	cmn	r0, #1
   16328:	beq	16418 <__assert_fail@plt+0x5414>
   1632c:	subs	r4, r4, #1
   16330:	beq	163d4 <__assert_fail@plt+0x53d0>
   16334:	subs	r5, r5, #1
   16338:	beq	16380 <__assert_fail@plt+0x537c>
   1633c:	add	r1, sp, #8
   16340:	mov	r0, r6
   16344:	bl	162a8 <__assert_fail@plt+0x52a4>
   16348:	cmp	r0, #0
   1634c:	beq	1631c <__assert_fail@plt+0x5318>
   16350:	ldr	r3, [sp, #8]
   16354:	cmp	r3, #0
   16358:	beq	1631c <__assert_fail@plt+0x5318>
   1635c:	cmp	r3, r4
   16360:	movcs	r3, r4
   16364:	ldr	r2, [r6, #4]
   16368:	add	r2, r2, r3
   1636c:	str	r2, [r6, #4]
   16370:	subs	r4, r4, r3
   16374:	beq	163d4 <__assert_fail@plt+0x53d0>
   16378:	subs	r5, r5, r3
   1637c:	bne	1631c <__assert_fail@plt+0x5318>
   16380:	mov	r0, r6
   16384:	bl	10f2c <fileno@plt>
   16388:	cmp	r0, #0
   1638c:	bge	163dc <__assert_fail@plt+0x53d8>
   16390:	mov	r8, #1
   16394:	mov	r7, #4096	; 0x1000
   16398:	cmp	r4, #4096	; 0x1000
   1639c:	movcc	r5, r4
   163a0:	movcs	r5, #4096	; 0x1000
   163a4:	str	r6, [sp]
   163a8:	mov	r3, r5
   163ac:	mov	r2, r8
   163b0:	mov	r1, r7
   163b4:	add	r0, sp, #8
   163b8:	bl	10f68 <__fread_chk@plt>
   163bc:	cmp	r5, r0
   163c0:	bhi	16418 <__assert_fail@plt+0x5414>
   163c4:	subs	r4, r4, r5
   163c8:	bne	16398 <__assert_fail@plt+0x5394>
   163cc:	mov	r0, #0
   163d0:	b	1642c <__assert_fail@plt+0x5428>
   163d4:	mov	r0, #0
   163d8:	b	1642c <__assert_fail@plt+0x5428>
   163dc:	mov	r3, #1
   163e0:	str	r3, [sp]
   163e4:	mov	r2, #0
   163e8:	mov	r3, #0
   163ec:	bl	10e48 <lseek64@plt>
   163f0:	cmp	r0, #0
   163f4:	sbcs	r3, r1, #0
   163f8:	blt	16390 <__assert_fail@plt+0x538c>
   163fc:	mov	r3, #1
   16400:	str	r3, [sp]
   16404:	mov	r2, r4
   16408:	mov	r3, #0
   1640c:	mov	r0, r6
   16410:	bl	12dfc <__assert_fail@plt+0x1df8>
   16414:	b	1642c <__assert_fail@plt+0x5428>
   16418:	mov	r0, r6
   1641c:	bl	10db8 <ferror@plt>
   16420:	adds	r0, r0, #0
   16424:	movne	r0, #1
   16428:	rsb	r0, r0, #0
   1642c:	add	sp, sp, #4096	; 0x1000
   16430:	add	sp, sp, #8
   16434:	ldrd	r4, [sp]
   16438:	ldrd	r6, [sp, #8]
   1643c:	ldr	r8, [sp, #16]
   16440:	add	sp, sp, #20
   16444:	pop	{pc}		; (ldr pc, [sp], #4)
   16448:	str	r4, [sp, #-8]!
   1644c:	str	lr, [sp, #4]
   16450:	mov	r0, #14
   16454:	bl	10fa4 <nl_langinfo@plt>
   16458:	cmp	r0, #0
   1645c:	beq	16480 <__assert_fail@plt+0x547c>
   16460:	ldrb	r2, [r0]
   16464:	movw	r3, #30684	; 0x77dc
   16468:	movt	r3, #1
   1646c:	cmp	r2, #0
   16470:	moveq	r0, r3
   16474:	ldr	r4, [sp]
   16478:	add	sp, sp, #4
   1647c:	pop	{pc}		; (ldr pc, [sp], #4)
   16480:	movw	r0, #30684	; 0x77dc
   16484:	movt	r0, #1
   16488:	b	16474 <__assert_fail@plt+0x5470>
   1648c:	strd	r4, [sp, #-20]!	; 0xffffffec
   16490:	strd	r6, [sp, #8]
   16494:	str	lr, [sp, #16]
   16498:	sub	sp, sp, #12
   1649c:	mov	r7, r1
   164a0:	mov	r5, r2
   164a4:	subs	r6, r0, #0
   164a8:	addeq	r6, sp, #4
   164ac:	mov	r0, r6
   164b0:	bl	10e6c <mbrtowc@plt>
   164b4:	mov	r4, r0
   164b8:	cmp	r5, #0
   164bc:	cmnne	r0, #3
   164c0:	bhi	164dc <__assert_fail@plt+0x54d8>
   164c4:	mov	r0, r4
   164c8:	add	sp, sp, #12
   164cc:	ldrd	r4, [sp]
   164d0:	ldrd	r6, [sp, #8]
   164d4:	add	sp, sp, #16
   164d8:	pop	{pc}		; (ldr pc, [sp], #4)
   164dc:	mov	r0, #0
   164e0:	bl	1657c <__assert_fail@plt+0x5578>
   164e4:	cmp	r0, #0
   164e8:	bne	164c4 <__assert_fail@plt+0x54c0>
   164ec:	ldrb	r3, [r7]
   164f0:	str	r3, [r6]
   164f4:	mov	r4, #1
   164f8:	b	164c4 <__assert_fail@plt+0x54c0>
   164fc:	str	r4, [sp, #-8]!
   16500:	str	lr, [sp, #4]
   16504:	umull	r2, r3, r1, r2
   16508:	cmp	r3, #0
   1650c:	bne	16524 <__assert_fail@plt+0x5520>
   16510:	mov	r1, r2
   16514:	bl	161c0 <__assert_fail@plt+0x51bc>
   16518:	ldr	r4, [sp]
   1651c:	add	sp, sp, #4
   16520:	pop	{pc}		; (ldr pc, [sp], #4)
   16524:	bl	10ef0 <__errno_location@plt>
   16528:	mov	r3, #12
   1652c:	str	r3, [r0]
   16530:	mov	r0, #0
   16534:	b	16518 <__assert_fail@plt+0x5514>
   16538:	ldr	r2, [r0, #20]
   1653c:	ldr	r3, [r0, #16]
   16540:	cmp	r2, r3
   16544:	bhi	16574 <__assert_fail@plt+0x5570>
   16548:	ldr	r3, [r0, #8]
   1654c:	ldr	r2, [r0, #4]
   16550:	sub	r3, r3, r2
   16554:	ldr	r2, [r0]
   16558:	ands	r2, r2, #256	; 0x100
   1655c:	beq	1656c <__assert_fail@plt+0x5568>
   16560:	ldr	r2, [r0, #44]	; 0x2c
   16564:	ldr	r0, [r0, #36]	; 0x24
   16568:	sub	r2, r2, r0
   1656c:	add	r0, r3, r2
   16570:	bx	lr
   16574:	mov	r0, #0
   16578:	bx	lr
   1657c:	push	{lr}		; (str lr, [sp, #-4]!)
   16580:	sub	sp, sp, #268	; 0x10c
   16584:	movw	r2, #257	; 0x101
   16588:	add	r1, sp, #4
   1658c:	bl	165d8 <__assert_fail@plt+0x55d4>
   16590:	cmp	r0, #0
   16594:	movne	r0, #0
   16598:	bne	165d0 <__assert_fail@plt+0x55cc>
   1659c:	movw	r1, #30692	; 0x77e4
   165a0:	movt	r1, #1
   165a4:	add	r0, sp, #4
   165a8:	bl	10d7c <strcmp@plt>
   165ac:	cmp	r0, #0
   165b0:	beq	165cc <__assert_fail@plt+0x55c8>
   165b4:	movw	r1, #30696	; 0x77e8
   165b8:	movt	r1, #1
   165bc:	add	r0, sp, #4
   165c0:	bl	10d7c <strcmp@plt>
   165c4:	adds	r0, r0, #0
   165c8:	movne	r0, #1
   165cc:	and	r0, r0, #1
   165d0:	add	sp, sp, #268	; 0x10c
   165d4:	pop	{pc}		; (ldr pc, [sp], #4)
   165d8:	strd	r4, [sp, #-16]!
   165dc:	str	r6, [sp, #8]
   165e0:	str	lr, [sp, #12]
   165e4:	mov	r6, r1
   165e8:	mov	r4, r2
   165ec:	mov	r1, #0
   165f0:	bl	10f8c <setlocale@plt>
   165f4:	subs	r5, r0, #0
   165f8:	beq	1663c <__assert_fail@plt+0x5638>
   165fc:	mov	r0, r5
   16600:	bl	10ed8 <strlen@plt>
   16604:	cmp	r4, r0
   16608:	bhi	16658 <__assert_fail@plt+0x5654>
   1660c:	cmp	r4, #0
   16610:	moveq	r0, #34	; 0x22
   16614:	beq	1666c <__assert_fail@plt+0x5668>
   16618:	sub	r4, r4, #1
   1661c:	mov	r2, r4
   16620:	mov	r1, r5
   16624:	mov	r0, r6
   16628:	bl	10dd0 <memcpy@plt>
   1662c:	mov	r3, #0
   16630:	strb	r3, [r6, r4]
   16634:	mov	r0, #34	; 0x22
   16638:	b	1666c <__assert_fail@plt+0x5668>
   1663c:	cmp	r4, #0
   16640:	moveq	r0, #22
   16644:	beq	1666c <__assert_fail@plt+0x5668>
   16648:	mov	r3, #0
   1664c:	strb	r3, [r6]
   16650:	mov	r0, #22
   16654:	b	1666c <__assert_fail@plt+0x5668>
   16658:	add	r2, r0, #1
   1665c:	mov	r1, r5
   16660:	mov	r0, r6
   16664:	bl	10dd0 <memcpy@plt>
   16668:	mov	r0, #0
   1666c:	ldrd	r4, [sp]
   16670:	ldr	r6, [sp, #8]
   16674:	add	sp, sp, #12
   16678:	pop	{pc}		; (ldr pc, [sp], #4)
   1667c:	str	r4, [sp, #-8]!
   16680:	str	lr, [sp, #4]
   16684:	mov	r1, #0
   16688:	bl	10f8c <setlocale@plt>
   1668c:	ldr	r4, [sp]
   16690:	add	sp, sp, #4
   16694:	pop	{pc}		; (ldr pc, [sp], #4)
   16698:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1669c:	mov	r7, r0
   166a0:	ldr	r6, [pc, #72]	; 166f0 <__assert_fail@plt+0x56ec>
   166a4:	ldr	r5, [pc, #72]	; 166f4 <__assert_fail@plt+0x56f0>
   166a8:	add	r6, pc, r6
   166ac:	add	r5, pc, r5
   166b0:	sub	r6, r6, r5
   166b4:	mov	r8, r1
   166b8:	mov	r9, r2
   166bc:	bl	10d44 <calloc@plt-0x20>
   166c0:	asrs	r6, r6, #2
   166c4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   166c8:	mov	r4, #0
   166cc:	add	r4, r4, #1
   166d0:	ldr	r3, [r5], #4
   166d4:	mov	r2, r9
   166d8:	mov	r1, r8
   166dc:	mov	r0, r7
   166e0:	blx	r3
   166e4:	cmp	r6, r4
   166e8:	bne	166cc <__assert_fail@plt+0x56c8>
   166ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   166f0:	andeq	r1, r1, r4, ror #16
   166f4:	andeq	r1, r1, ip, asr r8
   166f8:	bx	lr
   166fc:	ldr	r3, [pc, #12]	; 16710 <__assert_fail@plt+0x570c>
   16700:	mov	r1, #0
   16704:	add	r3, pc, r3
   16708:	ldr	r2, [r3]
   1670c:	b	10efc <__cxa_atexit@plt>
   16710:	andeq	r1, r1, ip, ror #19

Disassembly of section .fini:

00016714 <.fini>:
   16714:	push	{r3, lr}
   16718:	pop	{r3, pc}
