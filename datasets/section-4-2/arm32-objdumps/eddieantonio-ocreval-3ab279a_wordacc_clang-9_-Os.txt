
../repos/eddieantonio-ocreval-3ab279a/wordacc/wordacc:     file format elf32-littlearm


Disassembly of section .init:

00010af8 <.init>:
   10af8:	push	{r3, lr}
   10afc:	bl	10d04 <__assert_fail@plt+0x48>
   10b00:	pop	{r3, pc}

Disassembly of section .plt:

00010b04 <calloc@plt-0x14>:
   10b04:	push	{lr}		; (str lr, [sp, #-4]!)
   10b08:	ldr	lr, [pc, #4]	; 10b14 <calloc@plt-0x4>
   10b0c:	add	lr, pc, lr
   10b10:	ldr	pc, [lr, #8]!
   10b14:	andeq	r7, r1, ip, ror #9

00010b18 <calloc@plt>:
   10b18:	add	ip, pc, #0, 12
   10b1c:	add	ip, ip, #94208	; 0x17000
   10b20:	ldr	pc, [ip, #1260]!	; 0x4ec

00010b24 <strcmp@plt>:
   10b24:	add	ip, pc, #0, 12
   10b28:	add	ip, ip, #94208	; 0x17000
   10b2c:	ldr	pc, [ip, #1252]!	; 0x4e4

00010b30 <fopen@plt>:
   10b30:	add	ip, pc, #0, 12
   10b34:	add	ip, ip, #94208	; 0x17000
   10b38:	ldr	pc, [ip, #1244]!	; 0x4dc

00010b3c <free@plt>:
   10b3c:	add	ip, pc, #0, 12
   10b40:	add	ip, ip, #94208	; 0x17000
   10b44:	ldr	pc, [ip, #1236]!	; 0x4d4

00010b48 <utf8proc_get_property@plt>:
   10b48:	add	ip, pc, #0, 12
   10b4c:	add	ip, ip, #94208	; 0x17000
   10b50:	ldr	pc, [ip, #1228]!	; 0x4cc

00010b54 <fgets@plt>:
   10b54:	add	ip, pc, #0, 12
   10b58:	add	ip, ip, #94208	; 0x17000
   10b5c:	ldr	pc, [ip, #1220]!	; 0x4c4

00010b60 <utf8proc_encode_char@plt>:
   10b60:	add	ip, pc, #0, 12
   10b64:	add	ip, ip, #94208	; 0x17000
   10b68:	ldr	pc, [ip, #1212]!	; 0x4bc

00010b6c <strdup@plt>:
   10b6c:	add	ip, pc, #0, 12
   10b70:	add	ip, ip, #94208	; 0x17000
   10b74:	ldr	pc, [ip, #1204]!	; 0x4b4

00010b78 <rewind@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #94208	; 0x17000
   10b80:	ldr	pc, [ip, #1196]!	; 0x4ac

00010b84 <unlink@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #94208	; 0x17000
   10b8c:	ldr	pc, [ip, #1188]!	; 0x4a4

00010b90 <utf8proc_tolower@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #94208	; 0x17000
   10b98:	ldr	pc, [ip, #1180]!	; 0x49c

00010b9c <__xstat@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #94208	; 0x17000
   10ba4:	ldr	pc, [ip, #1172]!	; 0x494

00010ba8 <fread@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #94208	; 0x17000
   10bb0:	ldr	pc, [ip, #1164]!	; 0x48c

00010bb4 <utf8proc_iterate@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #94208	; 0x17000
   10bbc:	ldr	pc, [ip, #1156]!	; 0x484

00010bc0 <malloc@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #94208	; 0x17000
   10bc8:	ldr	pc, [ip, #1148]!	; 0x47c

00010bcc <__libc_start_main@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #94208	; 0x17000
   10bd4:	ldr	pc, [ip, #1140]!	; 0x474

00010bd8 <__sysv_signal@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #94208	; 0x17000
   10be0:	ldr	pc, [ip, #1132]!	; 0x46c

00010be4 <__gmon_start__@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #94208	; 0x17000
   10bec:	ldr	pc, [ip, #1124]!	; 0x464

00010bf0 <getpid@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #94208	; 0x17000
   10bf8:	ldr	pc, [ip, #1116]!	; 0x45c

00010bfc <exit@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #94208	; 0x17000
   10c04:	ldr	pc, [ip, #1108]!	; 0x454

00010c08 <bcmp@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #94208	; 0x17000
   10c10:	ldr	pc, [ip, #1100]!	; 0x44c

00010c14 <utf8proc_category@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #94208	; 0x17000
   10c1c:	ldr	pc, [ip, #1092]!	; 0x444

00010c20 <strlen@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #94208	; 0x17000
   10c28:	ldr	pc, [ip, #1084]!	; 0x43c

00010c2c <fprintf@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #94208	; 0x17000
   10c34:	ldr	pc, [ip, #1076]!	; 0x434

00010c38 <__isoc99_sscanf@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #94208	; 0x17000
   10c40:	ldr	pc, [ip, #1068]!	; 0x42c

00010c44 <fclose@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #94208	; 0x17000
   10c4c:	ldr	pc, [ip, #1060]!	; 0x424

00010c50 <utf8proc_NFC@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #94208	; 0x17000
   10c58:	ldr	pc, [ip, #1052]!	; 0x41c

00010c5c <fputc@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #94208	; 0x17000
   10c64:	ldr	pc, [ip, #1044]!	; 0x414

00010c68 <sprintf@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #94208	; 0x17000
   10c70:	ldr	pc, [ip, #1036]!	; 0x40c

00010c74 <atoi@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #94208	; 0x17000
   10c7c:	ldr	pc, [ip, #1028]!	; 0x404

00010c80 <utf8proc_errmsg@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #94208	; 0x17000
   10c88:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c8c <fputs@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #94208	; 0x17000
   10c94:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c98 <strncmp@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #94208	; 0x17000
   10ca0:	ldr	pc, [ip, #1004]!	; 0x3ec

00010ca4 <abort@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #94208	; 0x17000
   10cac:	ldr	pc, [ip, #996]!	; 0x3e4

00010cb0 <getc@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #94208	; 0x17000
   10cb8:	ldr	pc, [ip, #988]!	; 0x3dc

00010cbc <__assert_fail@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #94208	; 0x17000
   10cc4:	ldr	pc, [ip, #980]!	; 0x3d4

Disassembly of section .text:

00010cc8 <error@@Base-0x20e0>:
   10cc8:	mov	fp, #0
   10ccc:	mov	lr, #0
   10cd0:	pop	{r1}		; (ldr r1, [sp], #4)
   10cd4:	mov	r2, sp
   10cd8:	push	{r2}		; (str r2, [sp, #-4]!)
   10cdc:	push	{r0}		; (str r0, [sp, #-4]!)
   10ce0:	ldr	ip, [pc, #16]	; 10cf8 <__assert_fail@plt+0x3c>
   10ce4:	push	{ip}		; (str ip, [sp, #-4]!)
   10ce8:	ldr	r0, [pc, #12]	; 10cfc <__assert_fail@plt+0x40>
   10cec:	ldr	r3, [pc, #12]	; 10d00 <__assert_fail@plt+0x44>
   10cf0:	bl	10bcc <__libc_start_main@plt>
   10cf4:	bl	10ca4 <abort@plt>
   10cf8:	andeq	r3, r1, r8, lsl #14
   10cfc:	andeq	r1, r1, ip, lsl #10
   10d00:	andeq	r3, r1, r8, lsr #13
   10d04:	ldr	r3, [pc, #20]	; 10d20 <__assert_fail@plt+0x64>
   10d08:	ldr	r2, [pc, #20]	; 10d24 <__assert_fail@plt+0x68>
   10d0c:	add	r3, pc, r3
   10d10:	ldr	r2, [r3, r2]
   10d14:	cmp	r2, #0
   10d18:	bxeq	lr
   10d1c:	b	10be4 <__gmon_start__@plt>
   10d20:	andeq	r7, r1, ip, ror #5
   10d24:	muleq	r0, ip, r0
   10d28:	ldr	r0, [pc, #24]	; 10d48 <__assert_fail@plt+0x8c>
   10d2c:	ldr	r3, [pc, #24]	; 10d4c <__assert_fail@plt+0x90>
   10d30:	cmp	r3, r0
   10d34:	bxeq	lr
   10d38:	ldr	r3, [pc, #16]	; 10d50 <__assert_fail@plt+0x94>
   10d3c:	cmp	r3, #0
   10d40:	bxeq	lr
   10d44:	bx	r3
   10d48:	andeq	r8, r2, r0, ror #1
   10d4c:	andeq	r8, r2, r0, ror #1
   10d50:	andeq	r0, r0, r0
   10d54:	ldr	r0, [pc, #36]	; 10d80 <__assert_fail@plt+0xc4>
   10d58:	ldr	r1, [pc, #36]	; 10d84 <__assert_fail@plt+0xc8>
   10d5c:	sub	r1, r1, r0
   10d60:	asr	r1, r1, #2
   10d64:	add	r1, r1, r1, lsr #31
   10d68:	asrs	r1, r1, #1
   10d6c:	bxeq	lr
   10d70:	ldr	r3, [pc, #16]	; 10d88 <__assert_fail@plt+0xcc>
   10d74:	cmp	r3, #0
   10d78:	bxeq	lr
   10d7c:	bx	r3
   10d80:	andeq	r8, r2, r0, ror #1
   10d84:	andeq	r8, r2, r0, ror #1
   10d88:	andeq	r0, r0, r0
   10d8c:	push	{r4, lr}
   10d90:	ldr	r4, [pc, #24]	; 10db0 <__assert_fail@plt+0xf4>
   10d94:	ldrb	r3, [r4]
   10d98:	cmp	r3, #0
   10d9c:	popne	{r4, pc}
   10da0:	bl	10d28 <__assert_fail@plt+0x6c>
   10da4:	mov	r3, #1
   10da8:	strb	r3, [r4]
   10dac:	pop	{r4, pc}
   10db0:	strdeq	r8, [r2], -r0
   10db4:	b	10d54 <__assert_fail@plt+0x98>
   10db8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   10dbc:	add	fp, sp, #24
   10dc0:	mov	r9, r0
   10dc4:	movw	r0, #41260	; 0xa12c
   10dc8:	mov	r8, r1
   10dcc:	mov	r1, #4
   10dd0:	movt	r0, #2
   10dd4:	add	r4, r0, r9, lsl #4
   10dd8:	ldr	r0, [r4, #12]
   10ddc:	add	r0, r0, #1
   10de0:	bl	12914 <__assert_fail@plt+0x1c58>
   10de4:	ldr	r1, [r4, #12]
   10de8:	cmp	r1, #1
   10dec:	blt	10e38 <__assert_fail@plt+0x17c>
   10df0:	movw	ip, #948	; 0x3b4
   10df4:	rsb	r3, r9, #1
   10df8:	mov	r4, #0
   10dfc:	mov	r2, #0
   10e00:	mov	r7, #0
   10e04:	movt	ip, #3
   10e08:	ldr	r6, [ip, r9, lsl #2]
   10e0c:	add	r7, r7, #1
   10e10:	ldr	r5, [r6, r4]!
   10e14:	add	r4, r4, #8
   10e18:	add	r5, r5, r3
   10e1c:	ldrb	r5, [r5, #12]
   10e20:	cmp	r5, #0
   10e24:	strne	r6, [r0, r2, lsl #2]
   10e28:	addne	r2, r2, #1
   10e2c:	cmp	r7, r1
   10e30:	blt	10e08 <__assert_fail@plt+0x14c>
   10e34:	b	10e3c <__assert_fail@plt+0x180>
   10e38:	mov	r2, #0
   10e3c:	str	r2, [r8]
   10e40:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   10e44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e48:	add	fp, sp, #28
   10e4c:	push	{r0}		; (str r0, [sp, #-4]!)
   10e50:	movw	r8, #948	; 0x3b4
   10e54:	movw	r6, #41308	; 0xa15c
   10e58:	mov	r4, #0
   10e5c:	mov	r9, #1
   10e60:	movt	r8, #3
   10e64:	movt	r6, #2
   10e68:	ldr	r0, [sp]
   10e6c:	movw	r2, #32960	; 0x80c0
   10e70:	movt	r2, #2
   10e74:	ldr	r1, [r0, r4, lsl #2]
   10e78:	movw	r0, #41216	; 0xa100
   10e7c:	movt	r0, #2
   10e80:	add	r7, r0, r4, lsl #4
   10e84:	mov	r0, r7
   10e88:	bl	12f78 <error@@Base+0x1d0>
   10e8c:	cmp	r4, #0
   10e90:	bne	10ea8 <__assert_fail@plt+0x1ec>
   10e94:	movw	r0, #32960	; 0x80c0
   10e98:	movt	r0, #2
   10e9c:	ldrb	r0, [r0, #11]
   10ea0:	cmp	r0, #0
   10ea4:	bne	10fa0 <__assert_fail@plt+0x2e4>
   10ea8:	movw	r0, #41260	; 0xa12c
   10eac:	mov	r1, r7
   10eb0:	movt	r0, #2
   10eb4:	add	r5, r0, r4, lsl #4
   10eb8:	mov	sl, r0
   10ebc:	mov	r0, r5
   10ec0:	bl	1246c <__assert_fail@plt+0x17b0>
   10ec4:	ldr	r0, [r5, #12]
   10ec8:	mov	r1, #8
   10ecc:	add	r0, r0, #1
   10ed0:	bl	12914 <__assert_fail@plt+0x1c58>
   10ed4:	ldr	r5, [sl, r4, lsl #4]
   10ed8:	str	r0, [r8, r4, lsl #2]
   10edc:	cmp	r5, #0
   10ee0:	beq	10f44 <__assert_fail@plt+0x288>
   10ee4:	mov	sl, #0
   10ee8:	ldr	r1, [r5, #8]
   10eec:	mov	r0, r6
   10ef0:	bl	1220c <__assert_fail@plt+0x1550>
   10ef4:	mov	r7, r0
   10ef8:	cmp	r0, #0
   10efc:	bne	10f24 <__assert_fail@plt+0x268>
   10f00:	mov	r0, #1
   10f04:	mov	r1, #16
   10f08:	bl	12914 <__assert_fail@plt+0x1c58>
   10f0c:	mov	r7, r0
   10f10:	ldr	r0, [r5, #8]
   10f14:	mov	r1, r7
   10f18:	str	r0, [r7, #8]
   10f1c:	mov	r0, r6
   10f20:	bl	12290 <__assert_fail@plt+0x15d4>
   10f24:	add	r0, r7, r4
   10f28:	strb	r9, [r0, #12]
   10f2c:	ldr	r0, [r8, r4, lsl #2]
   10f30:	str	r7, [r0, sl]
   10f34:	add	sl, sl, #8
   10f38:	ldr	r5, [r5, #4]
   10f3c:	cmp	r5, #0
   10f40:	bne	10ee8 <__assert_fail@plt+0x22c>
   10f44:	add	r4, r4, #1
   10f48:	cmp	r4, #2
   10f4c:	bne	10e68 <__assert_fail@plt+0x1ac>
   10f50:	movw	r4, #940	; 0x3ac
   10f54:	mov	r0, #0
   10f58:	movt	r4, #3
   10f5c:	mov	r1, r4
   10f60:	bl	10db8 <__assert_fail@plt+0xfc>
   10f64:	movw	r1, #936	; 0x3a8
   10f68:	movt	r1, #3
   10f6c:	str	r0, [r1]
   10f70:	ldr	r0, [r4]
   10f74:	cmp	r0, #65536	; 0x10000
   10f78:	bge	10fac <__assert_fail@plt+0x2f0>
   10f7c:	movw	r1, #41252	; 0xa124
   10f80:	mov	r0, #1
   10f84:	movt	r1, #2
   10f88:	bl	10db8 <__assert_fail@plt+0xfc>
   10f8c:	movw	r1, #41248	; 0xa120
   10f90:	movt	r1, #2
   10f94:	str	r0, [r1]
   10f98:	sub	sp, fp, #28
   10f9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10fa0:	movw	r0, #14120	; 0x3728
   10fa4:	movt	r0, #1
   10fa8:	bl	12da8 <error@@Base>
   10fac:	movw	r0, #14146	; 0x3742
   10fb0:	movt	r0, #1
   10fb4:	bl	12da8 <error@@Base>
   10fb8:	push	{fp, lr}
   10fbc:	mov	fp, sp
   10fc0:	cmp	r1, #0
   10fc4:	beq	11034 <__assert_fail@plt+0x378>
   10fc8:	ldr	r3, [r1, #8]
   10fcc:	mov	ip, r0
   10fd0:	mov	r0, #0
   10fd4:	rsb	lr, r3, #0
   10fd8:	cmp	lr, ip
   10fdc:	bge	11000 <__assert_fail@plt+0x344>
   10fe0:	sub	lr, ip, #1
   10fe4:	add	r0, r3, lr
   10fe8:	ldr	r3, [r1, #12]
   10fec:	bic	r0, r0, #1
   10ff0:	add	r0, r3, r0
   10ff4:	ldrh	r0, [r0]
   10ff8:	str	lr, [r2]
   10ffc:	ldr	r3, [r1, #8]
   11000:	cmp	r3, ip
   11004:	pople	{fp, pc}
   11008:	ldr	r1, [r1, #12]
   1100c:	add	ip, ip, #1
   11010:	add	r3, r3, ip
   11014:	bic	r3, r3, #1
   11018:	add	r1, r1, r3
   1101c:	ldrh	r1, [r1]
   11020:	add	r1, r1, #1
   11024:	cmp	r1, r0
   11028:	movcs	r0, r1
   1102c:	strcs	ip, [r2]
   11030:	pop	{fp, pc}
   11034:	mov	r0, #0
   11038:	pop	{fp, pc}
   1103c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11040:	add	fp, sp, #24
   11044:	sub	sp, sp, #8
   11048:	mov	r8, r1
   1104c:	ldr	r1, [r1]
   11050:	add	r2, sp, #4
   11054:	mov	r4, r0
   11058:	bl	10fb8 <__assert_fail@plt+0x2fc>
   1105c:	movw	r2, #940	; 0x3ac
   11060:	movw	r1, #41252	; 0xa124
   11064:	add	r5, r0, r4
   11068:	movt	r2, #3
   1106c:	movt	r1, #2
   11070:	ldr	r2, [r2]
   11074:	ldr	r1, [r1]
   11078:	cmp	r0, r2
   1107c:	cmplt	r5, r1
   11080:	blt	110d0 <__assert_fail@plt+0x414>
   11084:	mov	r3, r0
   11088:	cmp	r3, r2
   1108c:	movweq	r2, #944	; 0x3b0
   11090:	addeq	r0, r4, #1
   11094:	movteq	r2, #3
   11098:	streq	r0, [r2]
   1109c:	cmp	r5, r1
   110a0:	movweq	r1, #932	; 0x3a4
   110a4:	subeq	r0, r4, #1
   110a8:	movteq	r1, #3
   110ac:	streq	r0, [r1]
   110b0:	ldr	r0, [r8, #8]
   110b4:	ldr	r1, [r8, #12]
   110b8:	add	r0, r0, r4
   110bc:	bic	r0, r0, #1
   110c0:	add	r0, r1, r0
   110c4:	strh	r3, [r0]
   110c8:	sub	sp, fp, #24
   110cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   110d0:	movw	r3, #41248	; 0xa120
   110d4:	movt	r3, #2
   110d8:	ldr	r3, [r3]
   110dc:	add	r5, r3, r4, lsl #2
   110e0:	movw	r3, #936	; 0x3a8
   110e4:	movt	r3, #3
   110e8:	ldr	r6, [r3]
   110ec:	ldr	r3, [r5, r0, lsl #2]
   110f0:	ldr	r7, [r6, r0, lsl #2]
   110f4:	ldr	r3, [r3]
   110f8:	ldr	r7, [r7]
   110fc:	cmp	r7, r3
   11100:	bne	1112c <__assert_fail@plt+0x470>
   11104:	add	r3, r0, #1
   11108:	cmp	r3, r2
   1110c:	bge	11124 <__assert_fail@plt+0x468>
   11110:	add	r0, r4, r0
   11114:	add	r0, r0, #1
   11118:	cmp	r0, r1
   1111c:	mov	r0, r3
   11120:	blt	110ec <__assert_fail@plt+0x430>
   11124:	add	r5, r4, r3
   11128:	b	11088 <__assert_fail@plt+0x3cc>
   1112c:	add	r5, r4, r0
   11130:	b	11084 <__assert_fail@plt+0x3c8>
   11134:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11138:	add	fp, sp, #28
   1113c:	sub	sp, sp, #4
   11140:	movw	r0, #41252	; 0xa124
   11144:	movw	r9, #940	; 0x3ac
   11148:	movw	r7, #932	; 0x3a4
   1114c:	movw	r4, #944	; 0x3b0
   11150:	movt	r0, #2
   11154:	movt	r9, #3
   11158:	movt	r7, #3
   1115c:	movt	r4, #3
   11160:	ldr	r0, [r0]
   11164:	ldr	r1, [r9]
   11168:	str	r0, [r7]
   1116c:	rsb	r2, r1, #0
   11170:	sub	r0, r0, r1
   11174:	cmp	r0, r2
   11178:	str	r2, [r4]
   1117c:	blt	1121c <__assert_fail@plt+0x560>
   11180:	movw	sl, #41292	; 0xa14c
   11184:	mvn	r8, #0
   11188:	movt	sl, #2
   1118c:	mov	r0, #1
   11190:	mov	r1, #16
   11194:	mov	r6, r8
   11198:	bl	12914 <__assert_fail@plt+0x1c58>
   1119c:	add	r8, r8, #1
   111a0:	mov	r5, r0
   111a4:	mov	r1, #2
   111a8:	str	r8, [r0, #8]
   111ac:	add	r0, r6, #2
   111b0:	bl	12914 <__assert_fail@plt+0x1c58>
   111b4:	str	r0, [r5, #12]
   111b8:	mov	r0, sl
   111bc:	mov	r1, r5
   111c0:	bl	11604 <__assert_fail@plt+0x948>
   111c4:	mvn	r6, r6
   111c8:	cmp	r8, r6
   111cc:	blt	111fc <__assert_fail@plt+0x540>
   111d0:	ldr	r0, [r4]
   111d4:	cmp	r6, r0
   111d8:	blt	111f0 <__assert_fail@plt+0x534>
   111dc:	ldr	r0, [r7]
   111e0:	cmp	r6, r0
   111e4:	movle	r0, r6
   111e8:	movle	r1, r5
   111ec:	blle	1103c <__assert_fail@plt+0x380>
   111f0:	add	r6, r6, #2
   111f4:	cmp	r6, r8
   111f8:	ble	111d0 <__assert_fail@plt+0x514>
   111fc:	movw	r1, #41252	; 0xa124
   11200:	ldr	r0, [r9]
   11204:	movt	r1, #2
   11208:	ldr	r1, [r1]
   1120c:	sub	r0, r1, r0
   11210:	ldr	r1, [r4]
   11214:	cmp	r1, r0
   11218:	ble	1118c <__assert_fail@plt+0x4d0>
   1121c:	sub	sp, fp, #28
   11220:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11224:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11228:	add	fp, sp, #24
   1122c:	sub	sp, sp, #8
   11230:	movw	r0, #41292	; 0xa14c
   11234:	movt	r0, #2
   11238:	ldr	r5, [r0, #4]
   1123c:	cmp	r5, #0
   11240:	beq	112c8 <__assert_fail@plt+0x60c>
   11244:	movw	r0, #940	; 0x3ac
   11248:	movw	r1, #41252	; 0xa124
   1124c:	movw	r8, #936	; 0x3a8
   11250:	add	r4, sp, #4
   11254:	mov	r7, #1
   11258:	movt	r0, #3
   1125c:	movt	r1, #2
   11260:	movt	r8, #3
   11264:	ldr	r0, [r0]
   11268:	ldr	r1, [r1]
   1126c:	sub	r0, r1, r0
   11270:	ldr	r2, [r5, #8]
   11274:	ldr	r3, [r5, #12]
   11278:	ldr	r1, [r5]
   1127c:	add	r2, r2, r0
   11280:	bic	r2, r2, #1
   11284:	add	r2, r3, r2
   11288:	ldrh	r6, [r2]
   1128c:	mov	r2, r4
   11290:	bl	10fb8 <__assert_fail@plt+0x2fc>
   11294:	cmp	r0, r6
   11298:	bge	112b8 <__assert_fail@plt+0x5fc>
   1129c:	ldr	r1, [r8]
   112a0:	sub	r1, r1, #4
   112a4:	ldr	r2, [r1, r6, lsl #2]
   112a8:	sub	r6, r6, #1
   112ac:	cmp	r6, r0
   112b0:	strb	r7, [r2, #4]
   112b4:	bgt	112a4 <__assert_fail@plt+0x5e8>
   112b8:	ldr	r5, [r5]
   112bc:	ldr	r0, [sp, #4]
   112c0:	cmp	r5, #0
   112c4:	bne	11270 <__assert_fail@plt+0x5b4>
   112c8:	sub	sp, fp, #24
   112cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   112d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112d4:	add	fp, sp, #28
   112d8:	sub	sp, sp, #4
   112dc:	mov	sl, r2
   112e0:	mov	r9, r1
   112e4:	mov	r6, r0
   112e8:	bl	123a0 <__assert_fail@plt+0x16e4>
   112ec:	movw	r0, #8052	; 0x1f74
   112f0:	ldr	r0, [r6, r0]
   112f4:	cmp	r0, #1
   112f8:	blt	113ac <__assert_fail@plt+0x6f0>
   112fc:	movw	r8, #49364	; 0xc0d4
   11300:	movw	r0, #8048	; 0x1f70
   11304:	mov	r4, #0
   11308:	movt	r8, #2
   1130c:	add	r5, r6, r0
   11310:	ldr	r0, [r5]
   11314:	ldr	r0, [r0, r4, lsl #2]
   11318:	ldr	r7, [r0, #12]
   1131c:	ldr	r6, [r0, #16]
   11320:	mov	r0, r8
   11324:	mov	r1, r7
   11328:	mov	r2, r6
   1132c:	bl	118e0 <__assert_fail@plt+0xc24>
   11330:	mov	r0, r9
   11334:	mov	r1, r7
   11338:	mov	r2, r6
   1133c:	bl	118e0 <__assert_fail@plt+0xc24>
   11340:	ldr	r0, [r5]
   11344:	ldr	r0, [r0, r4, lsl #2]
   11348:	ldr	r0, [r0, #8]
   1134c:	bl	10c20 <strlen@plt>
   11350:	add	r0, r9, r0, lsl #3
   11354:	mov	r1, r7
   11358:	mov	r2, r6
   1135c:	bl	118e0 <__assert_fail@plt+0xc24>
   11360:	cmp	sl, #0
   11364:	beq	1139c <__assert_fail@plt+0x6e0>
   11368:	sub	r0, r7, r6
   1136c:	mov	r1, #1
   11370:	clz	r0, r0
   11374:	lsr	r6, r0, #5
   11378:	mov	r0, sl
   1137c:	mov	r2, r6
   11380:	bl	118e0 <__assert_fail@plt+0xc24>
   11384:	cmp	r7, #11
   11388:	mov	r1, #1
   1138c:	mov	r2, r6
   11390:	movge	r7, #11
   11394:	add	r0, sl, r7, lsl #3
   11398:	bl	118e0 <__assert_fail@plt+0xc24>
   1139c:	ldr	r0, [r5, #4]
   113a0:	add	r4, r4, #1
   113a4:	cmp	r4, r0
   113a8:	blt	11310 <__assert_fail@plt+0x654>
   113ac:	sub	sp, fp, #28
   113b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113b8:	add	fp, sp, #28
   113bc:	sub	sp, sp, #4
   113c0:	movw	r9, #41260	; 0xa12c
   113c4:	movt	r9, #2
   113c8:	ldr	r0, [r9, #12]
   113cc:	cmp	r0, #1
   113d0:	blt	11454 <__assert_fail@plt+0x798>
   113d4:	movw	r1, #49364	; 0xc0d4
   113d8:	movw	sl, #948	; 0x3b4
   113dc:	mov	r6, #0
   113e0:	mov	r7, #4
   113e4:	movt	r1, #2
   113e8:	movt	sl, #3
   113ec:	add	r1, r1, #928	; 0x3a0
   113f0:	str	r1, [sp]
   113f4:	ldr	r4, [sp]
   113f8:	mov	r5, #1
   113fc:	mov	r8, #0
   11400:	add	r1, r6, r8
   11404:	cmp	r1, r0
   11408:	bge	11444 <__assert_fail@plt+0x788>
   1140c:	ldr	r0, [sl]
   11410:	mov	r1, #1
   11414:	add	r0, r0, r7
   11418:	ldrb	r0, [r0, r8, lsl #3]
   1141c:	and	r5, r5, r0
   11420:	clz	r0, r5
   11424:	lsr	r2, r0, #5
   11428:	mov	r0, r4
   1142c:	bl	118e0 <__assert_fail@plt+0xc24>
   11430:	ldr	r0, [r9, #12]
   11434:	add	r8, r8, #1
   11438:	add	r4, r4, #8
   1143c:	cmp	r8, #8
   11440:	bne	11400 <__assert_fail@plt+0x744>
   11444:	add	r6, r6, #1
   11448:	add	r7, r7, #8
   1144c:	cmp	r6, r0
   11450:	blt	113f4 <__assert_fail@plt+0x738>
   11454:	sub	sp, fp, #28
   11458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1145c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11460:	add	fp, sp, #24
   11464:	movw	r8, #41260	; 0xa12c
   11468:	movw	r9, #49364	; 0xc0d4
   1146c:	movt	r8, #2
   11470:	movt	r9, #2
   11474:	ldr	r0, [r8, #12]
   11478:	cmp	r0, #1
   1147c:	blt	114e0 <__assert_fail@plt+0x824>
   11480:	movw	r7, #948	; 0x3b4
   11484:	mov	r6, #0
   11488:	movw	r5, #9048	; 0x2358
   1148c:	add	r4, r9, #992	; 0x3e0
   11490:	movt	r7, #3
   11494:	ldr	r0, [r7]
   11498:	ldr	r0, [r0, r6, lsl #3]
   1149c:	ldr	r0, [r0, #8]
   114a0:	bl	11898 <__assert_fail@plt+0xbdc>
   114a4:	ldr	r2, [r7]
   114a8:	cmp	r0, #0
   114ac:	mov	r0, r4
   114b0:	addeq	r0, r9, r5
   114b4:	ldr	r1, [r2, r6, lsl #3]!
   114b8:	ldrb	r2, [r2, #4]
   114bc:	ldr	r1, [r1, #8]
   114c0:	clz	r2, r2
   114c4:	lsr	r3, r2, #5
   114c8:	mov	r2, #1
   114cc:	bl	118f4 <__assert_fail@plt+0xc38>
   114d0:	ldr	r0, [r8, #12]
   114d4:	add	r6, r6, #1
   114d8:	cmp	r6, r0
   114dc:	blt	11494 <__assert_fail@plt+0x7d8>
   114e0:	add	r0, r9, #992	; 0x3e0
   114e4:	add	r1, r9, #8
   114e8:	mov	r2, #0
   114ec:	bl	112d0 <__assert_fail@plt+0x614>
   114f0:	movw	r0, #9048	; 0x2358
   114f4:	add	r1, r9, #416	; 0x1a0
   114f8:	add	r2, r9, #824	; 0x338
   114fc:	add	r0, r9, r0
   11500:	bl	112d0 <__assert_fail@plt+0x614>
   11504:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   11508:	b	113b4 <__assert_fail@plt+0x6f8>
   1150c:	push	{fp, lr}
   11510:	mov	fp, sp
   11514:	sub	sp, sp, #8
   11518:	movw	r2, #14170	; 0x375a
   1151c:	movw	r3, #32936	; 0x80a8
   11520:	str	r0, [sp, #4]
   11524:	add	r0, sp, #4
   11528:	mov	r4, r1
   1152c:	movt	r2, #1
   11530:	movt	r3, #2
   11534:	bl	12b3c <__assert_fail@plt+0x1e80>
   11538:	ldr	r0, [sp, #4]
   1153c:	bic	r0, r0, #1
   11540:	cmp	r0, #2
   11544:	bne	1158c <__assert_fail@plt+0x8d0>
   11548:	movw	r0, #41256	; 0xa128
   1154c:	movt	r0, #2
   11550:	ldr	r0, [r0]
   11554:	bl	11740 <__assert_fail@plt+0xa84>
   11558:	mov	r0, r4
   1155c:	bl	10e44 <__assert_fail@plt+0x188>
   11560:	bl	11134 <__assert_fail@plt+0x478>
   11564:	bl	11224 <__assert_fail@plt+0x568>
   11568:	bl	1145c <__assert_fail@plt+0x7a0>
   1156c:	ldr	r0, [sp, #4]
   11570:	mov	r1, #0
   11574:	cmp	r0, #3
   11578:	movw	r0, #49364	; 0xc0d4
   1157c:	ldreq	r1, [r4, #8]
   11580:	movt	r0, #2
   11584:	bl	11d20 <__assert_fail@plt+0x1064>
   11588:	bl	12d68 <__assert_fail@plt+0x20ac>
   1158c:	movw	r0, #14231	; 0x3797
   11590:	movt	r0, #1
   11594:	bl	12da8 <error@@Base>
   11598:	vmov.i32	q8, #0	; 0x00000000
   1159c:	vst1.32	{d16-d17}, [r0]
   115a0:	bx	lr
   115a4:	ldr	r3, [r0]
   115a8:	mov	r2, r1
   115ac:	mov	r1, #0
   115b0:	b	115b4 <__assert_fail@plt+0x8f8>
   115b4:	push	{r4, sl, fp, lr}
   115b8:	add	fp, sp, #8
   115bc:	cmp	r1, #0
   115c0:	mov	r4, r0
   115c4:	stm	r2, {r1, r3}
   115c8:	addne	r0, r1, #4
   115cc:	cmp	r3, #0
   115d0:	addeq	r3, r4, #4
   115d4:	str	r2, [r0]
   115d8:	str	r2, [r3]
   115dc:	ldr	r0, [r4, #8]
   115e0:	cmp	r0, #0
   115e4:	beq	115f4 <__assert_fail@plt+0x938>
   115e8:	bl	10b3c <free@plt>
   115ec:	mov	r0, #0
   115f0:	str	r0, [r4, #8]
   115f4:	ldr	r0, [r4, #12]
   115f8:	add	r0, r0, #1
   115fc:	str	r0, [r4, #12]
   11600:	pop	{r4, sl, fp, pc}
   11604:	mov	r2, r1
   11608:	ldr	r1, [r0, #4]
   1160c:	mov	r3, #0
   11610:	b	115b4 <__assert_fail@plt+0x8f8>
   11614:	mov	r3, r2
   11618:	mov	r2, r1
   1161c:	ldr	r1, [r3]
   11620:	b	115b4 <__assert_fail@plt+0x8f8>
   11624:	ldr	r3, [r1, #4]
   11628:	b	115b4 <__assert_fail@plt+0x8f8>
   1162c:	push	{r4, r5, fp, lr}
   11630:	add	fp, sp, #8
   11634:	mov	r4, r0
   11638:	ldm	r1, {r0, r2}
   1163c:	cmp	r0, #0
   11640:	beq	11650 <__assert_fail@plt+0x994>
   11644:	str	r2, [r0, #4]
   11648:	ldr	r2, [r1, #4]
   1164c:	b	11654 <__assert_fail@plt+0x998>
   11650:	str	r2, [r4]
   11654:	cmp	r2, #0
   11658:	mov	r5, #0
   1165c:	addeq	r2, r4, #4
   11660:	str	r0, [r2]
   11664:	str	r5, [r1]
   11668:	str	r5, [r1, #4]
   1166c:	ldr	r0, [r4, #8]
   11670:	cmp	r0, #0
   11674:	beq	11680 <__assert_fail@plt+0x9c4>
   11678:	bl	10b3c <free@plt>
   1167c:	str	r5, [r4, #8]
   11680:	ldr	r0, [r4, #12]
   11684:	sub	r0, r0, #1
   11688:	str	r0, [r4, #12]
   1168c:	pop	{r4, r5, fp, pc}
   11690:	push	{r4, sl, fp, lr}
   11694:	add	fp, sp, #8
   11698:	mov	r4, r0
   1169c:	ldr	r0, [r0, #8]
   116a0:	cmp	r0, #0
   116a4:	beq	116ac <__assert_fail@plt+0x9f0>
   116a8:	pop	{r4, sl, fp, pc}
   116ac:	ldr	r0, [r4, #12]
   116b0:	cmp	r0, #0
   116b4:	beq	116a8 <__assert_fail@plt+0x9ec>
   116b8:	mov	r1, #4
   116bc:	bl	12914 <__assert_fail@plt+0x1c58>
   116c0:	str	r0, [r4, #8]
   116c4:	ldr	r1, [r4]
   116c8:	cmp	r1, #0
   116cc:	beq	116a8 <__assert_fail@plt+0x9ec>
   116d0:	str	r1, [r0]
   116d4:	ldr	r0, [r1, #4]
   116d8:	cmp	r0, #0
   116dc:	popeq	{r4, sl, fp, pc}
   116e0:	mov	r1, #4
   116e4:	ldr	r2, [r4, #8]
   116e8:	str	r0, [r2, r1]
   116ec:	add	r1, r1, #4
   116f0:	ldr	r0, [r0, #4]
   116f4:	cmp	r0, #0
   116f8:	bne	116e4 <__assert_fail@plt+0xa28>
   116fc:	b	116a8 <__assert_fail@plt+0x9ec>
   11700:	push	{r4, r5, r6, sl, fp, lr}
   11704:	add	fp, sp, #16
   11708:	ldr	r6, [r0]
   1170c:	cmp	r6, #0
   11710:	beq	1173c <__assert_fail@plt+0xa80>
   11714:	mov	r4, r1
   11718:	mov	r5, r0
   1171c:	mov	r0, r5
   11720:	mov	r1, r6
   11724:	bl	1162c <__assert_fail@plt+0x970>
   11728:	mov	r0, r6
   1172c:	blx	r4
   11730:	ldr	r6, [r5]
   11734:	cmp	r6, #0
   11738:	bne	1171c <__assert_fail@plt+0xa60>
   1173c:	pop	{r4, r5, r6, sl, fp, pc}
   11740:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11744:	add	fp, sp, #24
   11748:	movw	r8, #33012	; 0x80f4
   1174c:	mov	r1, r0
   11750:	movt	r8, #2
   11754:	ldrb	r0, [r8]
   11758:	cmp	r0, #1
   1175c:	beq	1188c <__assert_fail@plt+0xbd0>
   11760:	cmp	r1, #0
   11764:	beq	11814 <__assert_fail@plt+0xb58>
   11768:	movw	r4, #33016	; 0x80f8
   1176c:	movw	r2, #32972	; 0x80cc
   11770:	movt	r4, #2
   11774:	movt	r2, #2
   11778:	mov	r0, r4
   1177c:	bl	12f78 <error@@Base+0x1d0>
   11780:	movw	r5, #33032	; 0x8108
   11784:	mov	r1, r4
   11788:	movt	r5, #2
   1178c:	mov	r0, r5
   11790:	bl	1246c <__assert_fail@plt+0x17b0>
   11794:	movw	r1, #2876	; 0xb3c
   11798:	mov	r0, r4
   1179c:	movt	r1, #1
   117a0:	bl	11700 <__assert_fail@plt+0xa44>
   117a4:	ldr	r7, [r5]
   117a8:	cmp	r7, #0
   117ac:	beq	11880 <__assert_fail@plt+0xbc4>
   117b0:	movw	r4, #33048	; 0x8118
   117b4:	movw	r5, #14311	; 0x37e7
   117b8:	movt	r4, #2
   117bc:	movt	r5, #1
   117c0:	ldr	r6, [r7, #8]
   117c4:	mov	r0, r4
   117c8:	mov	r1, r6
   117cc:	bl	1220c <__assert_fail@plt+0x1550>
   117d0:	cmp	r0, #0
   117d4:	beq	117e8 <__assert_fail@plt+0xb2c>
   117d8:	mov	r0, r5
   117dc:	mov	r1, r6
   117e0:	bl	12e30 <error@@Base+0x88>
   117e4:	b	11804 <__assert_fail@plt+0xb48>
   117e8:	mov	r0, #1
   117ec:	mov	r1, #12
   117f0:	bl	12914 <__assert_fail@plt+0x1c58>
   117f4:	mov	r1, r0
   117f8:	str	r6, [r0, #8]
   117fc:	mov	r0, r4
   11800:	bl	12290 <__assert_fail@plt+0x15d4>
   11804:	ldr	r7, [r7, #4]
   11808:	cmp	r7, #0
   1180c:	bne	117c0 <__assert_fail@plt+0xb04>
   11810:	b	11880 <__assert_fail@plt+0xbc4>
   11814:	movw	r5, #14748	; 0x399c
   11818:	movw	r4, #33048	; 0x8118
   1181c:	movw	r9, #14311	; 0x37e7
   11820:	mov	r7, #0
   11824:	movt	r5, #1
   11828:	movt	r4, #2
   1182c:	movt	r9, #1
   11830:	ldr	r6, [r5, r7, lsl #2]
   11834:	mov	r0, r4
   11838:	mov	r1, r6
   1183c:	bl	1220c <__assert_fail@plt+0x1550>
   11840:	cmp	r0, #0
   11844:	beq	11858 <__assert_fail@plt+0xb9c>
   11848:	mov	r0, r9
   1184c:	mov	r1, r6
   11850:	bl	12e30 <error@@Base+0x88>
   11854:	b	11874 <__assert_fail@plt+0xbb8>
   11858:	mov	r0, #1
   1185c:	mov	r1, #12
   11860:	bl	12914 <__assert_fail@plt+0x1c58>
   11864:	mov	r1, r0
   11868:	str	r6, [r0, #8]
   1186c:	mov	r0, r4
   11870:	bl	12290 <__assert_fail@plt+0x15d4>
   11874:	add	r7, r7, #1
   11878:	cmp	r7, #110	; 0x6e
   1187c:	bne	11830 <__assert_fail@plt+0xb74>
   11880:	mov	r0, #1
   11884:	strb	r0, [r8]
   11888:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1188c:	movw	r0, #14255	; 0x37af
   11890:	movt	r0, #1
   11894:	bl	12da8 <error@@Base>
   11898:	push	{fp, lr}
   1189c:	mov	fp, sp
   118a0:	mov	r1, r0
   118a4:	movw	r0, #33012	; 0x80f4
   118a8:	movt	r0, #2
   118ac:	ldrb	r0, [r0]
   118b0:	cmp	r0, #0
   118b4:	beq	118d0 <__assert_fail@plt+0xc14>
   118b8:	movw	r0, #33048	; 0x8118
   118bc:	movt	r0, #2
   118c0:	bl	1220c <__assert_fail@plt+0x1550>
   118c4:	cmp	r0, #0
   118c8:	movwne	r0, #1
   118cc:	pop	{fp, pc}
   118d0:	movw	r0, #14285	; 0x37cd
   118d4:	movt	r0, #1
   118d8:	bl	12da8 <error@@Base>
   118dc:	andeq	r0, r0, r0
   118e0:	ldm	r0, {r3, ip}
   118e4:	add	r2, ip, r2
   118e8:	add	r1, r3, r1
   118ec:	stm	r0, {r1, r2}
   118f0:	bx	lr
   118f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   118f8:	add	fp, sp, #24
   118fc:	mov	r8, r3
   11900:	mov	r5, r2
   11904:	mov	r4, r1
   11908:	mov	r6, r0
   1190c:	bl	1220c <__assert_fail@plt+0x1550>
   11910:	mov	r7, r0
   11914:	cmp	r0, #0
   11918:	bne	11944 <__assert_fail@plt+0xc88>
   1191c:	mov	r0, #1
   11920:	mov	r1, #20
   11924:	bl	12914 <__assert_fail@plt+0x1c58>
   11928:	mov	r7, r0
   1192c:	mov	r0, r4
   11930:	bl	10b6c <strdup@plt>
   11934:	str	r0, [r7, #8]
   11938:	mov	r0, r6
   1193c:	mov	r1, r7
   11940:	bl	12290 <__assert_fail@plt+0x15d4>
   11944:	ldr	r0, [r7, #12]
   11948:	ldr	r1, [r7, #16]
   1194c:	add	r0, r0, r5
   11950:	add	r1, r1, r8
   11954:	str	r0, [r7, #12]
   11958:	str	r1, [r7, #16]
   1195c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11960:	push	{r4, r5, r6, r7, fp, lr}
   11964:	add	fp, sp, #16
   11968:	sub	sp, sp, #8
   1196c:	mov	r6, r1
   11970:	movw	r1, #14564	; 0x38e4
   11974:	mov	r5, r0
   11978:	movt	r1, #1
   1197c:	mov	r0, r6
   11980:	bl	129b0 <__assert_fail@plt+0x1cf4>
   11984:	mov	r4, r0
   11988:	movw	r0, #41104	; 0xa090
   1198c:	mov	r1, #99	; 0x63
   11990:	movt	r0, #2
   11994:	mov	r2, r4
   11998:	bl	10b54 <fgets@plt>
   1199c:	cmp	r0, #0
   119a0:	beq	11af0 <__assert_fail@plt+0xe34>
   119a4:	movw	r0, #41104	; 0xa090
   119a8:	movw	r1, #15188	; 0x3b54
   119ac:	mov	r2, #45	; 0x2d
   119b0:	movt	r0, #2
   119b4:	movt	r1, #1
   119b8:	bl	10c08 <bcmp@plt>
   119bc:	cmp	r0, #0
   119c0:	bne	11af0 <__assert_fail@plt+0xe34>
   119c4:	movw	r0, #41104	; 0xa090
   119c8:	mov	r1, #99	; 0x63
   119cc:	mov	r2, r4
   119d0:	movt	r0, #2
   119d4:	bl	10b54 <fgets@plt>
   119d8:	cmp	r0, #0
   119dc:	beq	11af0 <__assert_fail@plt+0xe34>
   119e0:	movw	r0, #41104	; 0xa090
   119e4:	movw	r1, #28979	; 0x7133
   119e8:	mov	r2, #48	; 0x30
   119ec:	movt	r0, #2
   119f0:	movt	r1, #1
   119f4:	bl	10c08 <bcmp@plt>
   119f8:	cmp	r0, #0
   119fc:	bne	11af0 <__assert_fail@plt+0xe34>
   11a00:	add	r1, sp, #4
   11a04:	mov	r0, r4
   11a08:	bl	11b0c <__assert_fail@plt+0xe50>
   11a0c:	cmp	r0, #0
   11a10:	beq	11af0 <__assert_fail@plt+0xe34>
   11a14:	mov	r1, sp
   11a18:	mov	r0, r4
   11a1c:	bl	11b0c <__assert_fail@plt+0xe50>
   11a20:	cmp	r0, #0
   11a24:	beq	11af0 <__assert_fail@plt+0xe34>
   11a28:	movw	r0, #41104	; 0xa090
   11a2c:	mov	r1, #99	; 0x63
   11a30:	mov	r2, r4
   11a34:	movt	r0, #2
   11a38:	bl	10b54 <fgets@plt>
   11a3c:	cmp	r0, #0
   11a40:	beq	11af0 <__assert_fail@plt+0xe34>
   11a44:	movw	r0, #41104	; 0xa090
   11a48:	mov	r1, #99	; 0x63
   11a4c:	mov	r2, r4
   11a50:	movt	r0, #2
   11a54:	bl	10b54 <fgets@plt>
   11a58:	cmp	r0, #0
   11a5c:	beq	11af0 <__assert_fail@plt+0xe34>
   11a60:	ldr	r2, [sp, #4]
   11a64:	ldm	r5, {r0, r1}
   11a68:	add	r0, r0, r2
   11a6c:	ldr	r2, [sp]
   11a70:	add	r1, r1, r2
   11a74:	stm	r5, {r0, r1}
   11a78:	add	r1, r5, #8
   11a7c:	mov	r0, r4
   11a80:	bl	11b64 <__assert_fail@plt+0xea8>
   11a84:	mov	r7, r0
   11a88:	add	r1, r5, #416	; 0x1a0
   11a8c:	mov	r0, r4
   11a90:	bl	11b64 <__assert_fail@plt+0xea8>
   11a94:	mov	r6, r0
   11a98:	add	r1, r5, #824	; 0x338
   11a9c:	mov	r0, r4
   11aa0:	bl	11b64 <__assert_fail@plt+0xea8>
   11aa4:	ldr	r0, [sp, #4]
   11aa8:	cmp	r0, #1
   11aac:	blt	11ae0 <__assert_fail@plt+0xe24>
   11ab0:	add	r1, r5, #920	; 0x398
   11ab4:	mov	r0, r4
   11ab8:	bl	11b64 <__assert_fail@plt+0xea8>
   11abc:	cmp	r7, #1
   11ac0:	addge	r1, r5, #992	; 0x3e0
   11ac4:	movge	r0, r4
   11ac8:	blge	11c64 <__assert_fail@plt+0xfa8>
   11acc:	cmp	r6, #1
   11ad0:	movwge	r0, #9048	; 0x2358
   11ad4:	addge	r1, r5, r0
   11ad8:	movge	r0, r4
   11adc:	blge	11c64 <__assert_fail@plt+0xfa8>
   11ae0:	mov	r0, r4
   11ae4:	bl	12a28 <__assert_fail@plt+0x1d6c>
   11ae8:	sub	sp, fp, #16
   11aec:	pop	{r4, r5, r6, r7, fp, pc}
   11af0:	movw	r0, #15236	; 0x3b84
   11af4:	movw	r1, #15254	; 0x3b96
   11af8:	cmp	r6, #0
   11afc:	movt	r0, #1
   11b00:	movt	r1, #1
   11b04:	movne	r1, r6
   11b08:	bl	12de8 <error@@Base+0x40>
   11b0c:	push	{r4, sl, fp, lr}
   11b10:	add	fp, sp, #8
   11b14:	mov	r2, r0
   11b18:	movw	r0, #41104	; 0xa090
   11b1c:	mov	r4, r1
   11b20:	mov	r1, #99	; 0x63
   11b24:	movt	r0, #2
   11b28:	bl	10b54 <fgets@plt>
   11b2c:	cmp	r0, #0
   11b30:	beq	11b5c <__assert_fail@plt+0xea0>
   11b34:	movw	r0, #41104	; 0xa090
   11b38:	movw	r1, #15367	; 0x3c07
   11b3c:	mov	r2, r4
   11b40:	movt	r0, #2
   11b44:	movt	r1, #1
   11b48:	bl	10c38 <__isoc99_sscanf@plt>
   11b4c:	sub	r0, r0, #1
   11b50:	clz	r0, r0
   11b54:	lsr	r0, r0, #5
   11b58:	pop	{r4, sl, fp, pc}
   11b5c:	mov	r0, #0
   11b60:	pop	{r4, sl, fp, pc}
   11b64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b68:	add	fp, sp, #28
   11b6c:	sub	sp, sp, #12
   11b70:	mov	r5, r0
   11b74:	movw	r0, #41104	; 0xa090
   11b78:	mov	r4, r1
   11b7c:	mov	r1, #99	; 0x63
   11b80:	movt	r0, #2
   11b84:	mov	r2, r5
   11b88:	bl	10b54 <fgets@plt>
   11b8c:	mov	r6, #0
   11b90:	cmp	r0, #0
   11b94:	beq	11c58 <__assert_fail@plt+0xf9c>
   11b98:	movw	r7, #41104	; 0xa090
   11b9c:	mov	r1, #99	; 0x63
   11ba0:	mov	r2, r5
   11ba4:	movt	r7, #2
   11ba8:	mov	r0, r7
   11bac:	bl	10b54 <fgets@plt>
   11bb0:	cmp	r0, #0
   11bb4:	beq	11c58 <__assert_fail@plt+0xf9c>
   11bb8:	add	r1, sp, #8
   11bbc:	add	r2, sp, #4
   11bc0:	mov	r0, r5
   11bc4:	bl	12104 <__assert_fail@plt+0x1448>
   11bc8:	cmp	r0, #0
   11bcc:	beq	11c58 <__assert_fail@plt+0xf9c>
   11bd0:	movw	r8, #15355	; 0x3bfb
   11bd4:	mov	r6, #0
   11bd8:	add	r7, r7, #29
   11bdc:	add	r9, sp, #8
   11be0:	add	sl, sp, #4
   11be4:	movt	r8, #1
   11be8:	mov	r0, r7
   11bec:	bl	10c74 <atoi@plt>
   11bf0:	cmp	r0, #0
   11bf4:	beq	11c00 <__assert_fail@plt+0xf44>
   11bf8:	ldr	r1, [sp, #8]
   11bfc:	b	11c20 <__assert_fail@plt+0xf64>
   11c00:	mov	r0, r7
   11c04:	mov	r1, r8
   11c08:	mov	r2, #8
   11c0c:	bl	10c08 <bcmp@plt>
   11c10:	ldr	r1, [sp, #8]
   11c14:	cmp	r0, #0
   11c18:	movwne	r0, #11
   11c1c:	moveq	r6, r1
   11c20:	mov	r2, r4
   11c24:	ldr	r0, [r2, r0, lsl #3]!
   11c28:	add	r0, r0, r1
   11c2c:	ldr	r1, [sp, #4]
   11c30:	str	r0, [r2]
   11c34:	ldr	r0, [r2, #4]
   11c38:	add	r0, r0, r1
   11c3c:	mov	r1, r9
   11c40:	str	r0, [r2, #4]
   11c44:	mov	r0, r5
   11c48:	mov	r2, sl
   11c4c:	bl	12104 <__assert_fail@plt+0x1448>
   11c50:	cmp	r0, #0
   11c54:	bne	11be8 <__assert_fail@plt+0xf2c>
   11c58:	mov	r0, r6
   11c5c:	sub	sp, fp, #28
   11c60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c68:	add	fp, sp, #28
   11c6c:	sub	sp, sp, #12
   11c70:	mov	r5, r0
   11c74:	movw	r0, #41104	; 0xa090
   11c78:	mov	r4, r1
   11c7c:	mov	r1, #99	; 0x63
   11c80:	movt	r0, #2
   11c84:	mov	r2, r5
   11c88:	bl	10b54 <fgets@plt>
   11c8c:	cmp	r0, #0
   11c90:	beq	11d18 <__assert_fail@plt+0x105c>
   11c94:	movw	r6, #41104	; 0xa090
   11c98:	mov	r1, #99	; 0x63
   11c9c:	mov	r2, r5
   11ca0:	movt	r6, #2
   11ca4:	mov	r0, r6
   11ca8:	bl	10b54 <fgets@plt>
   11cac:	cmp	r0, #0
   11cb0:	beq	11d18 <__assert_fail@plt+0x105c>
   11cb4:	add	r1, sp, #8
   11cb8:	add	r2, sp, #4
   11cbc:	mov	r0, r5
   11cc0:	bl	12104 <__assert_fail@plt+0x1448>
   11cc4:	cmp	r0, #0
   11cc8:	beq	11d18 <__assert_fail@plt+0x105c>
   11ccc:	mov	sl, #0
   11cd0:	add	r7, r6, #29
   11cd4:	add	r8, sp, #8
   11cd8:	add	r9, sp, #4
   11cdc:	mov	r0, r6
   11ce0:	bl	10c20 <strlen@plt>
   11ce4:	ldr	r2, [sp, #8]
   11ce8:	ldr	r3, [sp, #4]
   11cec:	add	r0, r0, r6
   11cf0:	mov	r1, r7
   11cf4:	strb	sl, [r0, #-1]
   11cf8:	mov	r0, r4
   11cfc:	bl	118f4 <__assert_fail@plt+0xc38>
   11d00:	mov	r0, r5
   11d04:	mov	r1, r8
   11d08:	mov	r2, r9
   11d0c:	bl	12104 <__assert_fail@plt+0x1448>
   11d10:	cmp	r0, #0
   11d14:	bne	11cdc <__assert_fail@plt+0x1020>
   11d18:	sub	sp, fp, #28
   11d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d20:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11d24:	add	fp, sp, #24
   11d28:	sub	sp, sp, #8
   11d2c:	mov	r2, r1
   11d30:	movw	r1, #14539	; 0x38cb
   11d34:	mov	r5, r0
   11d38:	movt	r1, #1
   11d3c:	mov	r0, r2
   11d40:	bl	129b0 <__assert_fail@plt+0x1cf4>
   11d44:	movw	r1, #15260	; 0x3b9c
   11d48:	movw	r2, #15188	; 0x3b54
   11d4c:	movw	r3, #28979	; 0x7133
   11d50:	mov	r4, r0
   11d54:	movt	r1, #1
   11d58:	movt	r2, #1
   11d5c:	movt	r3, #1
   11d60:	bl	10c2c <fprintf@plt>
   11d64:	ldr	r2, [r5]
   11d68:	movw	r1, #15265	; 0x3ba1
   11d6c:	mov	r0, r4
   11d70:	movt	r1, #1
   11d74:	bl	10c2c <fprintf@plt>
   11d78:	ldr	r2, [r5, #4]
   11d7c:	movw	r1, #15279	; 0x3baf
   11d80:	mov	r0, r4
   11d84:	movt	r1, #1
   11d88:	bl	10c2c <fprintf@plt>
   11d8c:	mov	r0, r4
   11d90:	mov	r1, r5
   11d94:	bl	11e98 <__assert_fail@plt+0x11dc>
   11d98:	movw	r0, #15301	; 0x3bc5
   11d9c:	mov	r1, r4
   11da0:	movt	r0, #1
   11da4:	bl	10c8c <fputs@plt>
   11da8:	movw	r3, #15314	; 0x3bd2
   11dac:	mov	r7, #1
   11db0:	mov	r8, #0
   11db4:	add	r1, r5, #8
   11db8:	mov	r0, r4
   11dbc:	mov	r2, #50	; 0x32
   11dc0:	movt	r3, #1
   11dc4:	str	r8, [sp]
   11dc8:	str	r7, [sp, #4]
   11dcc:	bl	11ef8 <__assert_fail@plt+0x123c>
   11dd0:	movw	r3, #15333	; 0x3be5
   11dd4:	add	r6, r5, #416	; 0x1a0
   11dd8:	mov	r0, r4
   11ddc:	mov	r2, #50	; 0x32
   11de0:	str	r8, [sp]
   11de4:	str	r7, [sp, #4]
   11de8:	movt	r3, #1
   11dec:	mov	r1, r6
   11df0:	bl	11ef8 <__assert_fail@plt+0x123c>
   11df4:	movw	r3, #15324	; 0x3bdc
   11df8:	add	r1, r5, #824	; 0x338
   11dfc:	mov	r0, r4
   11e00:	mov	r2, #10
   11e04:	str	r7, [sp]
   11e08:	str	r7, [sp, #4]
   11e0c:	movt	r3, #1
   11e10:	bl	11ef8 <__assert_fail@plt+0x123c>
   11e14:	ldr	r0, [r5]
   11e18:	cmp	r0, #1
   11e1c:	blt	11e84 <__assert_fail@plt+0x11c8>
   11e20:	movw	r3, #15347	; 0x3bf3
   11e24:	add	r1, r5, #920	; 0x398
   11e28:	mov	r0, r4
   11e2c:	mov	r2, #8
   11e30:	str	r8, [sp]
   11e34:	str	r8, [sp, #4]
   11e38:	movt	r3, #1
   11e3c:	bl	11ef8 <__assert_fail@plt+0x123c>
   11e40:	ldr	r0, [r5, #8]
   11e44:	cmp	r0, #1
   11e48:	blt	11e60 <__assert_fail@plt+0x11a4>
   11e4c:	movw	r2, #15314	; 0x3bd2
   11e50:	add	r1, r5, #992	; 0x3e0
   11e54:	mov	r0, r4
   11e58:	movt	r2, #1
   11e5c:	bl	12038 <__assert_fail@plt+0x137c>
   11e60:	ldr	r0, [r6]
   11e64:	cmp	r0, #1
   11e68:	blt	11e84 <__assert_fail@plt+0x11c8>
   11e6c:	movw	r2, #15333	; 0x3be5
   11e70:	movw	r0, #9048	; 0x2358
   11e74:	movt	r2, #1
   11e78:	add	r1, r5, r0
   11e7c:	mov	r0, r4
   11e80:	bl	12038 <__assert_fail@plt+0x137c>
   11e84:	mov	r0, r4
   11e88:	sub	sp, fp, #24
   11e8c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   11e90:	b	12a28 <__assert_fail@plt+0x1d6c>
   11e94:	nop	{0}
   11e98:	mov	ip, r0
   11e9c:	ldr	r0, [r1]
   11ea0:	cmp	r0, #0
   11ea4:	beq	11ee0 <__assert_fail@plt+0x1224>
   11ea8:	ldr	r1, [r1, #4]
   11eac:	vldr	d16, [pc, #60]	; 11ef0 <__assert_fail@plt+0x1234>
   11eb0:	vmov	s2, r0
   11eb4:	sub	r1, r0, r1
   11eb8:	mov	r0, ip
   11ebc:	vmov	s0, r1
   11ec0:	movw	r1, #15380	; 0x3c14
   11ec4:	movt	r1, #1
   11ec8:	vcvt.f64.s32	d17, s0
   11ecc:	vcvt.f64.s32	d18, s2
   11ed0:	vmul.f64	d16, d17, d16
   11ed4:	vdiv.f64	d16, d16, d18
   11ed8:	vmov	r2, r3, d16
   11edc:	b	10c2c <fprintf@plt>
   11ee0:	movw	r0, #15371	; 0x3c0b
   11ee4:	mov	r1, ip
   11ee8:	movt	r0, #1
   11eec:	b	10c8c <fputs@plt>
   11ef0:	andeq	r0, r0, r0
   11ef4:	subsmi	r0, r9, r0
   11ef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11efc:	add	fp, sp, #28
   11f00:	sub	sp, sp, #4
   11f04:	mov	r5, r1
   11f08:	movw	r1, #15386	; 0x3c1a
   11f0c:	mov	r7, r2
   11f10:	mov	r2, r3
   11f14:	mov	r4, r0
   11f18:	movt	r1, #1
   11f1c:	bl	10c2c <fprintf@plt>
   11f20:	movw	r0, #15434	; 0x3c4a
   11f24:	mov	r1, r4
   11f28:	movt	r0, #1
   11f2c:	bl	10c8c <fputs@plt>
   11f30:	movw	r0, #15461	; 0x3c65
   11f34:	mov	r1, r4
   11f38:	movt	r0, #1
   11f3c:	bl	10c8c <fputs@plt>
   11f40:	ldrb	sl, [fp, #8]
   11f44:	movw	r0, #15391	; 0x3c1f
   11f48:	movw	r1, #15387	; 0x3c1b
   11f4c:	movw	r2, #15398	; 0x3c26
   11f50:	movt	r0, #1
   11f54:	movt	r1, #1
   11f58:	movt	r2, #1
   11f5c:	cmp	sl, #0
   11f60:	movne	r2, r0
   11f64:	mov	r0, r4
   11f68:	bl	10c2c <fprintf@plt>
   11f6c:	ldr	r1, [fp, #12]
   11f70:	lsl	r0, r7, #16
   11f74:	sxth	r6, r7
   11f78:	cmp	r0, #65536	; 0x10000
   11f7c:	str	r1, [sp]
   11f80:	blt	11fcc <__assert_fail@plt+0x1310>
   11f84:	movw	r8, #15405	; 0x3c2d
   11f88:	mov	r7, #1
   11f8c:	mov	r9, #1
   11f90:	movt	r8, #1
   11f94:	mov	r1, r5
   11f98:	ldr	r0, [r1, r7, lsl #3]!
   11f9c:	cmp	r0, #1
   11fa0:	blt	11fbc <__assert_fail@plt+0x1300>
   11fa4:	mov	r0, r4
   11fa8:	bl	12164 <__assert_fail@plt+0x14a8>
   11fac:	mov	r0, r4
   11fb0:	mov	r1, r8
   11fb4:	mov	r2, r7
   11fb8:	bl	10c2c <fprintf@plt>
   11fbc:	add	r9, r9, #1
   11fc0:	sxth	r7, r9
   11fc4:	cmp	r6, r7
   11fc8:	bge	11f94 <__assert_fail@plt+0x12d8>
   11fcc:	cmp	sl, #0
   11fd0:	beq	12000 <__assert_fail@plt+0x1344>
   11fd4:	add	r1, r5, r6, lsl #3
   11fd8:	ldr	r0, [r1, #8]!
   11fdc:	cmp	r0, #1
   11fe0:	blt	12000 <__assert_fail@plt+0x1344>
   11fe4:	mov	r0, r4
   11fe8:	bl	12164 <__assert_fail@plt+0x14a8>
   11fec:	movw	r1, #15414	; 0x3c36
   11ff0:	mov	r0, r4
   11ff4:	mov	r2, r6
   11ff8:	movt	r1, #1
   11ffc:	bl	10c2c <fprintf@plt>
   12000:	ldr	r0, [sp]
   12004:	tst	r0, #255	; 0xff
   12008:	beq	12030 <__assert_fail@plt+0x1374>
   1200c:	mov	r0, r4
   12010:	mov	r1, r5
   12014:	bl	12164 <__assert_fail@plt+0x14a8>
   12018:	movw	r0, #15355	; 0x3bfb
   1201c:	mov	r1, r4
   12020:	movt	r0, #1
   12024:	sub	sp, fp, #28
   12028:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1202c:	b	10c8c <fputs@plt>
   12030:	sub	sp, fp, #28
   12034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12038:	push	{r4, r5, r6, r7, fp, lr}
   1203c:	add	fp, sp, #16
   12040:	mov	r5, r0
   12044:	mov	r0, r1
   12048:	mov	r6, r2
   1204c:	mov	r4, r1
   12050:	bl	123a0 <__assert_fail@plt+0x16e4>
   12054:	movw	r0, #8048	; 0x1f70
   12058:	movw	r2, #8644	; 0x21c4
   1205c:	ldr	r1, [r4, r0]!
   12060:	movt	r2, #1
   12064:	ldr	r0, [r4, #4]
   12068:	bl	1356c <error@@Base+0x7c4>
   1206c:	movw	r1, #15386	; 0x3c1a
   12070:	mov	r0, r5
   12074:	mov	r2, r6
   12078:	movt	r1, #1
   1207c:	bl	10c2c <fprintf@plt>
   12080:	movw	r0, #15434	; 0x3c4a
   12084:	mov	r1, r5
   12088:	movt	r0, #1
   1208c:	bl	10c8c <fputs@plt>
   12090:	movw	r0, #15461	; 0x3c65
   12094:	mov	r1, r5
   12098:	movt	r0, #1
   1209c:	bl	10c8c <fputs@plt>
   120a0:	mov	r0, #10
   120a4:	mov	r1, r5
   120a8:	bl	10c5c <fputc@plt>
   120ac:	ldr	r0, [r4, #4]
   120b0:	cmp	r0, #1
   120b4:	blt	12100 <__assert_fail@plt+0x1444>
   120b8:	movw	r6, #15387	; 0x3c1b
   120bc:	mov	r7, #0
   120c0:	movt	r6, #1
   120c4:	ldr	r0, [r4]
   120c8:	ldr	r0, [r0, r7, lsl #2]
   120cc:	add	r1, r0, #12
   120d0:	mov	r0, r5
   120d4:	bl	12164 <__assert_fail@plt+0x14a8>
   120d8:	ldr	r0, [r4]
   120dc:	mov	r1, r6
   120e0:	ldr	r0, [r0, r7, lsl #2]
   120e4:	ldr	r2, [r0, #8]
   120e8:	mov	r0, r5
   120ec:	bl	10c2c <fprintf@plt>
   120f0:	ldr	r0, [r4, #4]
   120f4:	add	r7, r7, #1
   120f8:	cmp	r7, r0
   120fc:	blt	120c4 <__assert_fail@plt+0x1408>
   12100:	pop	{r4, r5, r6, r7, fp, pc}
   12104:	push	{r4, r5, fp, lr}
   12108:	add	fp, sp, #8
   1210c:	mov	r4, r2
   12110:	mov	r2, r0
   12114:	movw	r0, #41104	; 0xa090
   12118:	mov	r5, r1
   1211c:	mov	r1, #99	; 0x63
   12120:	movt	r0, #2
   12124:	bl	10b54 <fgets@plt>
   12128:	cmp	r0, #0
   1212c:	beq	1215c <__assert_fail@plt+0x14a0>
   12130:	movw	r0, #41104	; 0xa090
   12134:	movw	r1, #15363	; 0x3c03
   12138:	mov	r2, r5
   1213c:	mov	r3, r4
   12140:	movt	r0, #2
   12144:	movt	r1, #1
   12148:	bl	10c38 <__isoc99_sscanf@plt>
   1214c:	sub	r0, r0, #2
   12150:	clz	r0, r0
   12154:	lsr	r0, r0, #5
   12158:	pop	{r4, r5, fp, pc}
   1215c:	mov	r0, #0
   12160:	pop	{r4, r5, fp, pc}
   12164:	push	{r4, r5, fp, lr}
   12168:	add	fp, sp, #8
   1216c:	mov	r4, r0
   12170:	cmp	r1, #0
   12174:	beq	121a0 <__assert_fail@plt+0x14e4>
   12178:	mov	r5, r1
   1217c:	ldm	r1, {r2, r3}
   12180:	movw	r1, #15423	; 0x3c3f
   12184:	mov	r0, r4
   12188:	movt	r1, #1
   1218c:	bl	10c2c <fprintf@plt>
   12190:	mov	r0, r4
   12194:	mov	r1, r5
   12198:	bl	11e98 <__assert_fail@plt+0x11dc>
   1219c:	b	121b0 <__assert_fail@plt+0x14f4>
   121a0:	movw	r0, #15434	; 0x3c4a
   121a4:	mov	r1, r4
   121a8:	movt	r0, #1
   121ac:	bl	10c8c <fputs@plt>
   121b0:	movw	r0, #15461	; 0x3c65
   121b4:	mov	r1, r4
   121b8:	movt	r0, #1
   121bc:	pop	{r4, r5, fp, lr}
   121c0:	b	10c8c <fputs@plt>
   121c4:	ldr	r1, [r1, #8]
   121c8:	ldr	r0, [r0, #8]
   121cc:	b	12934 <__assert_fail@plt+0x1c78>
   121d0:	push	{r4, r5, r6, sl, fp, lr}
   121d4:	add	fp, sp, #16
   121d8:	mov	r4, r0
   121dc:	movw	r0, #8048	; 0x1f70
   121e0:	movw	r6, #503	; 0x1f7
   121e4:	add	r5, r4, r0
   121e8:	mov	r0, r4
   121ec:	bl	11598 <__assert_fail@plt+0x8dc>
   121f0:	subs	r6, r6, #1
   121f4:	add	r4, r4, #16
   121f8:	bne	121e8 <__assert_fail@plt+0x152c>
   121fc:	mov	r0, #0
   12200:	str	r0, [r5]
   12204:	str	r0, [r5, #4]
   12208:	pop	{r4, r5, r6, sl, fp, pc}
   1220c:	push	{r4, r5, r6, sl, fp, lr}
   12210:	add	fp, sp, #16
   12214:	mov	r5, r1
   12218:	ldrb	r1, [r1]
   1221c:	mov	r4, #0
   12220:	mov	r2, #0
   12224:	cmp	r1, #0
   12228:	beq	1225c <__assert_fail@plt+0x15a0>
   1222c:	add	r3, r5, #1
   12230:	mov	r2, #0
   12234:	uxtab	r2, r2, r1
   12238:	ldrb	r1, [r3], #1
   1223c:	cmp	r1, #0
   12240:	bne	12234 <__assert_fail@plt+0x1578>
   12244:	movw	r1, #20065	; 0x4e61
   12248:	movt	r1, #33354	; 0x824a
   1224c:	umull	r1, r3, r2, r1
   12250:	lsr	r1, r3, #8
   12254:	movw	r3, #503	; 0x1f7
   12258:	mls	r2, r1, r3, r2
   1225c:	ldr	r6, [r0, r2, lsl #4]
   12260:	cmp	r6, #0
   12264:	beq	12288 <__assert_fail@plt+0x15cc>
   12268:	ldr	r1, [r6, #8]
   1226c:	mov	r0, r5
   12270:	bl	10b24 <strcmp@plt>
   12274:	cmp	r0, #0
   12278:	beq	12284 <__assert_fail@plt+0x15c8>
   1227c:	ldr	r6, [r6, #4]
   12280:	b	12260 <__assert_fail@plt+0x15a4>
   12284:	mov	r4, r6
   12288:	mov	r0, r4
   1228c:	pop	{r4, r5, r6, sl, fp, pc}
   12290:	push	{r4, r5, fp, lr}
   12294:	add	fp, sp, #8
   12298:	movw	r2, #8048	; 0x1f70
   1229c:	add	r5, r0, r2
   122a0:	ldr	r2, [r1, #8]
   122a4:	ldrb	r3, [r2]
   122a8:	cmp	r3, #0
   122ac:	beq	122e4 <__assert_fail@plt+0x1628>
   122b0:	add	r4, r2, #1
   122b4:	mov	r2, #0
   122b8:	uxtab	r2, r2, r3
   122bc:	ldrb	r3, [r4], #1
   122c0:	cmp	r3, #0
   122c4:	bne	122b8 <__assert_fail@plt+0x15fc>
   122c8:	movw	r3, #20065	; 0x4e61
   122cc:	movt	r3, #33354	; 0x824a
   122d0:	umull	r3, r4, r2, r3
   122d4:	lsr	r3, r4, #8
   122d8:	movw	r4, #503	; 0x1f7
   122dc:	mls	r2, r3, r4, r2
   122e0:	b	122e8 <__assert_fail@plt+0x162c>
   122e4:	mov	r2, #0
   122e8:	add	r0, r0, r2, lsl #4
   122ec:	bl	115a4 <__assert_fail@plt+0x8e8>
   122f0:	ldr	r0, [r5]
   122f4:	cmp	r0, #0
   122f8:	beq	12308 <__assert_fail@plt+0x164c>
   122fc:	bl	10b3c <free@plt>
   12300:	mov	r0, #0
   12304:	str	r0, [r5]
   12308:	ldr	r0, [r5, #4]
   1230c:	add	r0, r0, #1
   12310:	str	r0, [r5, #4]
   12314:	pop	{r4, r5, fp, pc}
   12318:	push	{r4, r5, fp, lr}
   1231c:	add	fp, sp, #8
   12320:	movw	r2, #8048	; 0x1f70
   12324:	add	r5, r0, r2
   12328:	ldr	r2, [r1, #8]
   1232c:	ldrb	r3, [r2]
   12330:	cmp	r3, #0
   12334:	beq	1236c <__assert_fail@plt+0x16b0>
   12338:	add	r4, r2, #1
   1233c:	mov	r2, #0
   12340:	uxtab	r2, r2, r3
   12344:	ldrb	r3, [r4], #1
   12348:	cmp	r3, #0
   1234c:	bne	12340 <__assert_fail@plt+0x1684>
   12350:	movw	r3, #20065	; 0x4e61
   12354:	movt	r3, #33354	; 0x824a
   12358:	umull	r3, r4, r2, r3
   1235c:	lsr	r3, r4, #8
   12360:	movw	r4, #503	; 0x1f7
   12364:	mls	r2, r3, r4, r2
   12368:	b	12370 <__assert_fail@plt+0x16b4>
   1236c:	mov	r2, #0
   12370:	add	r0, r0, r2, lsl #4
   12374:	bl	1162c <__assert_fail@plt+0x970>
   12378:	ldr	r0, [r5]
   1237c:	cmp	r0, #0
   12380:	beq	12390 <__assert_fail@plt+0x16d4>
   12384:	bl	10b3c <free@plt>
   12388:	mov	r0, #0
   1238c:	str	r0, [r5]
   12390:	ldr	r0, [r5, #4]
   12394:	sub	r0, r0, #1
   12398:	str	r0, [r5, #4]
   1239c:	pop	{r4, r5, fp, pc}
   123a0:	push	{r4, r5, fp, lr}
   123a4:	add	fp, sp, #8
   123a8:	mov	r4, r0
   123ac:	movw	r0, #8048	; 0x1f70
   123b0:	mov	r5, r4
   123b4:	ldr	r0, [r5, r0]!
   123b8:	cmp	r0, #0
   123bc:	bne	12410 <__assert_fail@plt+0x1754>
   123c0:	ldr	r0, [r5, #4]
   123c4:	cmp	r0, #0
   123c8:	popeq	{r4, r5, fp, pc}
   123cc:	mov	r1, #4
   123d0:	bl	12914 <__assert_fail@plt+0x1c58>
   123d4:	str	r0, [r5]
   123d8:	mov	r0, #0
   123dc:	movw	ip, #503	; 0x1f7
   123e0:	mov	r2, #0
   123e4:	ldr	r3, [r4, r2, lsl #4]
   123e8:	cmp	r3, #0
   123ec:	beq	12404 <__assert_fail@plt+0x1748>
   123f0:	ldr	r1, [r5]
   123f4:	str	r3, [r1, r0, lsl #2]
   123f8:	add	r0, r0, #1
   123fc:	ldr	r3, [r3, #4]
   12400:	b	123e8 <__assert_fail@plt+0x172c>
   12404:	add	r2, r2, #1
   12408:	cmp	r2, ip
   1240c:	bne	123e4 <__assert_fail@plt+0x1728>
   12410:	pop	{r4, r5, fp, pc}
   12414:	push	{r4, r5, r6, r7, fp, lr}
   12418:	add	fp, sp, #16
   1241c:	mov	r5, r0
   12420:	movw	r0, #8048	; 0x1f70
   12424:	mov	r4, r1
   12428:	movw	r7, #503	; 0x1f7
   1242c:	add	r6, r5, r0
   12430:	mov	r0, r5
   12434:	mov	r1, r4
   12438:	bl	11700 <__assert_fail@plt+0xa44>
   1243c:	subs	r7, r7, #1
   12440:	add	r5, r5, #16
   12444:	bne	12430 <__assert_fail@plt+0x1774>
   12448:	ldr	r0, [r6]
   1244c:	cmp	r0, #0
   12450:	beq	12460 <__assert_fail@plt+0x17a4>
   12454:	bl	10b3c <free@plt>
   12458:	mov	r0, #0
   1245c:	str	r0, [r6]
   12460:	mov	r0, #0
   12464:	str	r0, [r6, #4]
   12468:	pop	{r4, r5, r6, r7, fp, pc}
   1246c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12470:	add	fp, sp, #28
   12474:	sub	sp, sp, #20
   12478:	ldr	sl, [r1]
   1247c:	str	r0, [sp]
   12480:	cmp	sl, #0
   12484:	str	sl, [sp, #8]
   12488:	beq	127d0 <__assert_fail@plt+0x1b14>
   1248c:	add	r9, sp, #4
   12490:	mov	r7, #17
   12494:	mov	r6, r9
   12498:	mov	r0, r6
   1249c:	mov	r8, r7
   124a0:	bl	12850 <__assert_fail@plt+0x1b94>
   124a4:	mov	r6, r0
   124a8:	bl	12898 <__assert_fail@plt+0x1bdc>
   124ac:	mov	r7, r0
   124b0:	mov	r0, r6
   124b4:	bl	12850 <__assert_fail@plt+0x1b94>
   124b8:	mov	r5, r0
   124bc:	bl	12898 <__assert_fail@plt+0x1bdc>
   124c0:	mov	r4, r0
   124c4:	mov	r0, r5
   124c8:	bl	12850 <__assert_fail@plt+0x1b94>
   124cc:	bl	12898 <__assert_fail@plt+0x1bdc>
   124d0:	cmp	r7, #1
   124d4:	cmpeq	r4, #2
   124d8:	beq	1262c <__assert_fail@plt+0x1970>
   124dc:	sub	r1, r7, #1
   124e0:	cmp	r1, #3
   124e4:	subcs	r1, r4, #1
   124e8:	cmpcs	r1, #3
   124ec:	bcc	126ac <__assert_fail@plt+0x19f0>
   124f0:	orr	r2, r7, #1
   124f4:	orr	r1, r4, #1
   124f8:	cmp	r2, #9
   124fc:	cmpeq	r1, #9
   12500:	beq	1262c <__assert_fail@plt+0x1970>
   12504:	cmp	r2, #9
   12508:	bne	12530 <__assert_fail@plt+0x1874>
   1250c:	cmp	r4, #13
   12510:	bhi	12530 <__assert_fail@plt+0x1874>
   12514:	mov	r3, #1
   12518:	mov	r5, #13312	; 0x3400
   1251c:	tst	r5, r3, lsl r4
   12520:	beq	12530 <__assert_fail@plt+0x1874>
   12524:	orr	r3, r0, #1
   12528:	cmp	r3, #9
   1252c:	beq	1262c <__assert_fail@plt+0x1970>
   12530:	orr	r3, r8, #1
   12534:	cmp	r3, #9
   12538:	bne	1255c <__assert_fail@plt+0x18a0>
   1253c:	cmp	r7, #13
   12540:	bhi	1255c <__assert_fail@plt+0x18a0>
   12544:	mov	r3, #1
   12548:	mov	r5, #13312	; 0x3400
   1254c:	tst	r5, r3, lsl r7
   12550:	beq	1255c <__assert_fail@plt+0x18a0>
   12554:	cmp	r1, #9
   12558:	beq	1262c <__assert_fail@plt+0x1970>
   1255c:	cmp	r7, #8
   12560:	cmpeq	r4, #10
   12564:	beq	1262c <__assert_fail@plt+0x1970>
   12568:	cmp	r7, #8
   1256c:	cmpeq	r4, #11
   12570:	beq	12618 <__assert_fail@plt+0x195c>
   12574:	cmp	r8, #8
   12578:	cmpeq	r7, #11
   1257c:	beq	12624 <__assert_fail@plt+0x1968>
   12580:	sub	r2, r2, #9
   12584:	sub	r3, r7, #15
   12588:	clz	r2, r2
   1258c:	clz	r3, r3
   12590:	lsr	ip, r2, #5
   12594:	sub	r2, r4, #15
   12598:	lsr	r3, r3, #5
   1259c:	clz	r2, r2
   125a0:	orr	r5, r3, ip
   125a4:	lsr	r2, r2, #5
   125a8:	tst	r5, r2
   125ac:	subeq	r1, r1, #9
   125b0:	clzeq	r1, r1
   125b4:	lsreq	r1, r1, #5
   125b8:	andseq	r1, r3, r1
   125bc:	bne	1262c <__assert_fail@plt+0x1970>
   125c0:	cmp	r8, #15
   125c4:	bne	125e8 <__assert_fail@plt+0x192c>
   125c8:	subs	r1, r7, #10
   125cc:	orr	r2, r7, #2
   125d0:	movwne	r1, #1
   125d4:	subs	r2, r2, #14
   125d8:	movwne	r2, #1
   125dc:	tst	r1, r2
   125e0:	cmpeq	r4, #15
   125e4:	beq	1262c <__assert_fail@plt+0x1970>
   125e8:	cmp	r7, #15
   125ec:	bne	1263c <__assert_fail@plt+0x1980>
   125f0:	subs	r1, r4, #10
   125f4:	orr	r2, r4, #2
   125f8:	movwne	r1, #1
   125fc:	subs	r2, r2, #14
   12600:	movwne	r2, #1
   12604:	tst	r1, r2
   12608:	bne	12648 <__assert_fail@plt+0x198c>
   1260c:	cmp	r0, #15
   12610:	beq	1262c <__assert_fail@plt+0x1970>
   12614:	b	12648 <__assert_fail@plt+0x198c>
   12618:	cmp	r0, #8
   1261c:	beq	1262c <__assert_fail@plt+0x1970>
   12620:	b	12574 <__assert_fail@plt+0x18b8>
   12624:	cmp	r4, #8
   12628:	bne	12580 <__assert_fail@plt+0x18c4>
   1262c:	ldr	r0, [r6, #4]
   12630:	cmp	r0, #0
   12634:	bne	12498 <__assert_fail@plt+0x17dc>
   12638:	b	126b4 <__assert_fail@plt+0x19f8>
   1263c:	cmp	r7, #7
   12640:	cmpeq	r4, #7
   12644:	beq	1262c <__assert_fail@plt+0x1970>
   12648:	cmp	r4, #16
   1264c:	bne	12678 <__assert_fail@plt+0x19bc>
   12650:	orr	r0, r7, #8
   12654:	sub	r1, r7, #16
   12658:	sub	r0, r0, #15
   1265c:	clz	r1, r1
   12660:	clz	r0, r0
   12664:	lsr	r1, r1, #5
   12668:	lsr	r0, r0, #5
   1266c:	orr	r0, r0, ip
   12670:	orrs	r0, r1, r0
   12674:	bne	1262c <__assert_fail@plt+0x1970>
   12678:	cmp	r7, #16
   1267c:	bne	126a0 <__assert_fail@plt+0x19e4>
   12680:	cmp	r4, #16
   12684:	bhi	126ac <__assert_fail@plt+0x19f0>
   12688:	movw	r1, #33664	; 0x8380
   1268c:	mov	r0, #1
   12690:	movt	r1, #1
   12694:	tst	r1, r0, lsl r4
   12698:	bne	1262c <__assert_fail@plt+0x1970>
   1269c:	b	126ac <__assert_fail@plt+0x19f0>
   126a0:	cmp	r7, #5
   126a4:	cmpeq	r4, #5
   126a8:	beq	1262c <__assert_fail@plt+0x1970>
   126ac:	cmp	r6, #0
   126b0:	beq	127d0 <__assert_fail@plt+0x1b14>
   126b4:	mov	r7, r6
   126b8:	ldr	r6, [r6, #4]
   126bc:	cmp	r6, #0
   126c0:	beq	126d8 <__assert_fail@plt+0x1a1c>
   126c4:	mov	r0, r6
   126c8:	bl	12898 <__assert_fail@plt+0x1bdc>
   126cc:	orr	r0, r0, #2
   126d0:	cmp	r0, #6
   126d4:	beq	126b4 <__assert_fail@plt+0x19f8>
   126d8:	ldr	r0, [sl, #12]
   126dc:	bl	10b48 <utf8proc_get_property@plt>
   126e0:	ldrsh	r0, [r0]
   126e4:	sub	r1, r0, #1
   126e8:	cmp	r1, #12
   126ec:	bcs	127c4 <__assert_fail@plt+0x1b08>
   126f0:	ldr	r5, [r7, #4]
   126f4:	cmp	r5, sl
   126f8:	beq	12768 <__assert_fail@plt+0x1aac>
   126fc:	mov	r4, #0
   12700:	mov	r6, sl
   12704:	cmp	r6, #0
   12708:	beq	127d8 <__assert_fail@plt+0x1b1c>
   1270c:	ldr	r0, [r6, #12]
   12710:	mov	r1, r9
   12714:	bl	10b60 <utf8proc_encode_char@plt>
   12718:	cmp	r0, #0
   1271c:	beq	127f0 <__assert_fail@plt+0x1b34>
   12720:	ldr	r6, [r6, #4]
   12724:	add	r4, r0, r4
   12728:	cmp	r6, r5
   1272c:	bne	12704 <__assert_fail@plt+0x1a48>
   12730:	add	r0, r4, #1
   12734:	bl	10bc0 <malloc@plt>
   12738:	mov	r4, r0
   1273c:	mov	r6, #0
   12740:	cmp	sl, #0
   12744:	beq	12810 <__assert_fail@plt+0x1b54>
   12748:	ldr	r0, [sl, #12]
   1274c:	add	r1, r4, r6
   12750:	bl	10b60 <utf8proc_encode_char@plt>
   12754:	ldr	sl, [sl, #4]
   12758:	add	r6, r0, r6
   1275c:	cmp	sl, r5
   12760:	bne	12740 <__assert_fail@plt+0x1a84>
   12764:	b	12778 <__assert_fail@plt+0x1abc>
   12768:	mov	r0, #1
   1276c:	bl	10bc0 <malloc@plt>
   12770:	mov	r4, r0
   12774:	mov	r6, #0
   12778:	mov	r0, #0
   1277c:	mov	r1, #12
   12780:	strb	r0, [r4, r6]
   12784:	mov	r0, #1
   12788:	bl	12914 <__assert_fail@plt+0x1c58>
   1278c:	mov	r5, r0
   12790:	mov	r0, r4
   12794:	bl	10c50 <utf8proc_NFC@plt>
   12798:	str	r0, [r5, #8]
   1279c:	ldr	r0, [sp]
   127a0:	mov	r1, r5
   127a4:	bl	11604 <__assert_fail@plt+0x948>
   127a8:	mov	r0, r4
   127ac:	bl	10b3c <free@plt>
   127b0:	ldr	sl, [r7, #4]
   127b4:	cmp	sl, #0
   127b8:	str	sl, [sp, #8]
   127bc:	bne	12490 <__assert_fail@plt+0x17d4>
   127c0:	b	127d0 <__assert_fail@plt+0x1b14>
   127c4:	cmp	r0, #29
   127c8:	beq	126f0 <__assert_fail@plt+0x1a34>
   127cc:	b	127b0 <__assert_fail@plt+0x1af4>
   127d0:	sub	sp, fp, #28
   127d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127d8:	movw	r0, #28591	; 0x6faf
   127dc:	movw	r1, #28584	; 0x6fa8
   127e0:	movw	r3, #28607	; 0x6fbf
   127e4:	mov	r2, #249	; 0xf9
   127e8:	movt	r0, #1
   127ec:	b	12804 <__assert_fail@plt+0x1b48>
   127f0:	movw	r0, #28633	; 0x6fd9
   127f4:	movw	r1, #28584	; 0x6fa8
   127f8:	movw	r3, #28607	; 0x6fbf
   127fc:	mov	r2, #253	; 0xfd
   12800:	movt	r0, #1
   12804:	movt	r1, #1
   12808:	movt	r3, #1
   1280c:	bl	10cbc <__assert_fail@plt>
   12810:	movw	r0, #28591	; 0x6faf
   12814:	movw	r1, #28584	; 0x6fa8
   12818:	movw	r3, #28652	; 0x6fec
   1281c:	movw	r2, #269	; 0x10d
   12820:	movt	r0, #1
   12824:	movt	r1, #1
   12828:	movt	r3, #1
   1282c:	bl	10cbc <__assert_fail@plt>
   12830:	push	{r4, sl, fp, lr}
   12834:	add	fp, sp, #8
   12838:	mov	r4, r0
   1283c:	ldr	r0, [r0, #8]
   12840:	bl	10b3c <free@plt>
   12844:	mov	r0, r4
   12848:	pop	{r4, sl, fp, lr}
   1284c:	b	10b3c <free@plt>
   12850:	push	{r4, r5, fp, lr}
   12854:	add	fp, sp, #8
   12858:	mov	r4, #0
   1285c:	cmp	r0, #0
   12860:	beq	12890 <__assert_fail@plt+0x1bd4>
   12864:	ldr	r5, [r0, #4]
   12868:	cmp	r5, #0
   1286c:	beq	12890 <__assert_fail@plt+0x1bd4>
   12870:	mov	r0, r5
   12874:	bl	12898 <__assert_fail@plt+0x1bdc>
   12878:	orr	r0, r0, #2
   1287c:	cmp	r0, #6
   12880:	bne	1288c <__assert_fail@plt+0x1bd0>
   12884:	ldr	r5, [r5, #4]
   12888:	b	12868 <__assert_fail@plt+0x1bac>
   1288c:	mov	r4, r5
   12890:	mov	r0, r4
   12894:	pop	{r4, r5, fp, pc}
   12898:	push	{r4, sl, fp, lr}
   1289c:	add	fp, sp, #8
   128a0:	cmp	r0, #0
   128a4:	beq	12904 <__assert_fail@plt+0x1c48>
   128a8:	ldr	lr, [r0, #12]
   128ac:	movw	ip, #15468	; 0x3c6c
   128b0:	mov	r3, #0
   128b4:	movw	r2, #1092	; 0x444
   128b8:	movt	ip, #1
   128bc:	sub	r0, r2, r3
   128c0:	add	r1, r3, r0, lsr #1
   128c4:	add	r0, r1, r1, lsl #1
   128c8:	ldr	r4, [ip, r0, lsl #2]
   128cc:	cmp	r4, lr
   128d0:	bls	128e4 <__assert_fail@plt+0x1c28>
   128d4:	sub	r2, r1, #1
   128d8:	cmp	r2, r3
   128dc:	bcs	128bc <__assert_fail@plt+0x1c00>
   128e0:	b	128fc <__assert_fail@plt+0x1c40>
   128e4:	add	r0, ip, r0, lsl #2
   128e8:	ldr	r3, [r0, #4]
   128ec:	cmp	r3, lr
   128f0:	bcs	1290c <__assert_fail@plt+0x1c50>
   128f4:	add	r3, r1, #1
   128f8:	b	128d8 <__assert_fail@plt+0x1c1c>
   128fc:	mov	r0, #0
   12900:	pop	{r4, sl, fp, pc}
   12904:	mov	r0, #18
   12908:	pop	{r4, sl, fp, pc}
   1290c:	ldr	r0, [r0, #8]
   12910:	pop	{r4, sl, fp, pc}
   12914:	push	{fp, lr}
   12918:	mov	fp, sp
   1291c:	bl	10b18 <calloc@plt>
   12920:	cmp	r0, #0
   12924:	popne	{fp, pc}
   12928:	movw	r0, #28676	; 0x7004
   1292c:	movt	r0, #1
   12930:	bl	12da8 <error@@Base>
   12934:	push	{r4, r5, r6, sl, fp, lr}
   12938:	add	fp, sp, #16
   1293c:	ldrb	r3, [r0]
   12940:	ldrb	ip, [r1]
   12944:	mov	r2, r0
   12948:	mov	r0, #0
   1294c:	cmp	r3, #0
   12950:	beq	12988 <__assert_fail@plt+0x1ccc>
   12954:	add	r6, r2, #1
   12958:	add	lr, r1, #1
   1295c:	mov	r2, #0
   12960:	uxtb	r4, ip
   12964:	uxtb	r5, r3
   12968:	cmp	r5, r4
   1296c:	bne	12998 <__assert_fail@plt+0x1cdc>
   12970:	ldrb	r3, [r6, r2]
   12974:	ldrb	ip, [lr, r2]
   12978:	add	r2, r2, #1
   1297c:	cmp	r3, #0
   12980:	bne	12960 <__assert_fail@plt+0x1ca4>
   12984:	b	1298c <__assert_fail@plt+0x1cd0>
   12988:	mov	r2, #0
   1298c:	cmp	ip, #0
   12990:	beq	129ac <__assert_fail@plt+0x1cf0>
   12994:	mov	r3, #0
   12998:	ldrb	r1, [r1, r2]
   1299c:	uxtb	r2, r3
   129a0:	mov	r0, #1
   129a4:	cmp	r2, r1
   129a8:	mvncc	r0, #0
   129ac:	pop	{r4, r5, r6, sl, fp, pc}
   129b0:	push	{r4, r5, fp, lr}
   129b4:	add	fp, sp, #8
   129b8:	mov	r5, r1
   129bc:	cmp	r0, #0
   129c0:	beq	129f4 <__assert_fail@plt+0x1d38>
   129c4:	mov	r1, r5
   129c8:	mov	r4, r0
   129cc:	bl	10b30 <fopen@plt>
   129d0:	cmp	r0, #0
   129d4:	popne	{r4, r5, fp, pc}
   129d8:	ldrb	r0, [r5]
   129dc:	cmp	r0, #119	; 0x77
   129e0:	bne	12a18 <__assert_fail@plt+0x1d5c>
   129e4:	movw	r0, #28702	; 0x701e
   129e8:	mov	r1, r4
   129ec:	movt	r0, #1
   129f0:	bl	12de8 <error@@Base+0x40>
   129f4:	ldrb	r0, [r5]
   129f8:	movw	r1, #33000	; 0x80e8
   129fc:	movw	r2, #33004	; 0x80ec
   12a00:	movt	r1, #2
   12a04:	movt	r2, #2
   12a08:	cmp	r0, #114	; 0x72
   12a0c:	moveq	r2, r1
   12a10:	ldr	r0, [r2]
   12a14:	pop	{r4, r5, fp, pc}
   12a18:	movw	r0, #28724	; 0x7034
   12a1c:	mov	r1, r4
   12a20:	movt	r0, #1
   12a24:	bl	12de8 <error@@Base+0x40>
   12a28:	movw	r1, #33000	; 0x80e8
   12a2c:	movt	r1, #2
   12a30:	ldr	r1, [r1]
   12a34:	cmp	r1, r0
   12a38:	bxeq	lr
   12a3c:	movw	r1, #33004	; 0x80ec
   12a40:	movt	r1, #2
   12a44:	ldr	r1, [r1]
   12a48:	cmp	r1, r0
   12a4c:	beq	12a54 <__assert_fail@plt+0x1d98>
   12a50:	b	10c44 <fclose@plt>
   12a54:	bx	lr
   12a58:	push	{fp, lr}
   12a5c:	mov	fp, sp
   12a60:	sub	sp, sp, #88	; 0x58
   12a64:	mov	r1, sp
   12a68:	bl	1370c <error@@Base+0x964>
   12a6c:	clz	r0, r0
   12a70:	lsr	r0, r0, #5
   12a74:	mov	sp, fp
   12a78:	pop	{fp, pc}
   12a7c:	push	{r4, sl, fp, lr}
   12a80:	add	fp, sp, #8
   12a84:	movw	r0, #41204	; 0xa0f4
   12a88:	movt	r0, #2
   12a8c:	ldrh	r1, [r0]
   12a90:	add	r1, r1, #1
   12a94:	strh	r1, [r0]
   12a98:	sxth	r0, r1
   12a9c:	bl	12ab0 <__assert_fail@plt+0x1df4>
   12aa0:	mov	r4, r0
   12aa4:	bl	10b84 <unlink@plt>
   12aa8:	mov	r0, r4
   12aac:	pop	{r4, sl, fp, pc}
   12ab0:	push	{r4, r5, fp, lr}
   12ab4:	add	fp, sp, #8
   12ab8:	sub	sp, sp, #104	; 0x68
   12abc:	mov	r4, r0
   12ac0:	movw	r0, #960	; 0x3c0
   12ac4:	movt	r0, #3
   12ac8:	ldr	r5, [r0]
   12acc:	bl	10bf0 <getpid@plt>
   12ad0:	movw	r1, #28765	; 0x705d
   12ad4:	mov	r3, r0
   12ad8:	sxth	r0, r4
   12adc:	add	r4, sp, #4
   12ae0:	mov	r2, r5
   12ae4:	movt	r1, #1
   12ae8:	str	r0, [sp]
   12aec:	mov	r0, r4
   12af0:	bl	10c68 <sprintf@plt>
   12af4:	mov	r0, r4
   12af8:	bl	10b6c <strdup@plt>
   12afc:	sub	sp, fp, #8
   12b00:	pop	{r4, r5, fp, pc}
   12b04:	push	{r4, sl, fp, lr}
   12b08:	add	fp, sp, #8
   12b0c:	mov	r4, r0
   12b10:	bl	10c20 <strlen@plt>
   12b14:	sub	r0, r0, #1
   12b18:	sxth	r0, r0
   12b1c:	cmp	r0, #0
   12b20:	bmi	12b30 <__assert_fail@plt+0x1e74>
   12b24:	ldrb	r1, [r4, r0]
   12b28:	cmp	r1, #47	; 0x2f
   12b2c:	bne	12b14 <__assert_fail@plt+0x1e58>
   12b30:	add	r0, r0, r4
   12b34:	add	r0, r0, #1
   12b38:	pop	{r4, sl, fp, pc}
   12b3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b40:	add	fp, sp, #28
   12b44:	sub	sp, sp, #12
   12b48:	stmib	sp, {r0, r1}
   12b4c:	mov	r6, r3
   12b50:	str	r2, [sp]
   12b54:	ldr	r4, [r1]
   12b58:	mov	r0, r4
   12b5c:	bl	10c20 <strlen@plt>
   12b60:	sub	r0, r0, #1
   12b64:	sxth	r0, r0
   12b68:	cmp	r0, #0
   12b6c:	bmi	12b7c <__assert_fail@plt+0x1ec0>
   12b70:	ldrb	r1, [r4, r0]
   12b74:	cmp	r1, #47	; 0x2f
   12b78:	bne	12b60 <__assert_fail@plt+0x1ea4>
   12b7c:	add	r0, r0, r4
   12b80:	movw	r1, #960	; 0x3c0
   12b84:	movw	r4, #11888	; 0x2e70
   12b88:	movt	r1, #3
   12b8c:	movt	r4, #1
   12b90:	add	r0, r0, #1
   12b94:	str	r0, [r1]
   12b98:	mov	r0, #2
   12b9c:	mov	r1, r4
   12ba0:	bl	10bd8 <__sysv_signal@plt>
   12ba4:	mov	r0, #15
   12ba8:	mov	r1, r4
   12bac:	bl	10bd8 <__sysv_signal@plt>
   12bb0:	ldr	r0, [sp, #4]
   12bb4:	ldr	r5, [r0]
   12bb8:	cmp	r5, #1
   12bbc:	bne	12bd4 <__assert_fail@plt+0x1f18>
   12bc0:	movw	r0, #32984	; 0x80d8
   12bc4:	movt	r0, #2
   12bc8:	ldrb	r0, [r0]
   12bcc:	cmp	r0, #0
   12bd0:	bne	12d50 <__assert_fail@plt+0x2094>
   12bd4:	ldr	ip, [sp, #8]
   12bd8:	mov	r8, #0
   12bdc:	cmp	r5, #2
   12be0:	blt	12d2c <__assert_fail@plt+0x2070>
   12be4:	mov	r8, #0
   12be8:	mov	r7, #1
   12bec:	mov	r9, #1
   12bf0:	ldr	r4, [ip, r7, lsl #2]
   12bf4:	ldrb	r0, [r4]
   12bf8:	cmp	r0, #45	; 0x2d
   12bfc:	bne	12cd4 <__assert_fail@plt+0x2018>
   12c00:	ldrb	sl, [r4, #1]
   12c04:	cmp	sl, #0
   12c08:	beq	12cd4 <__assert_fail@plt+0x2018>
   12c0c:	mov	r0, r4
   12c10:	bl	10c20 <strlen@plt>
   12c14:	mov	r2, r0
   12c18:	movw	r0, #28794	; 0x707a
   12c1c:	mov	r1, r4
   12c20:	movt	r0, #1
   12c24:	bl	10c98 <strncmp@plt>
   12c28:	cmp	r0, #0
   12c2c:	beq	12d50 <__assert_fail@plt+0x2094>
   12c30:	ldr	ip, [sp, #8]
   12c34:	add	r1, r7, #1
   12c38:	mov	r0, #0
   12c3c:	cmp	r1, r5
   12c40:	ldrlt	r0, [ip, r1, lsl #2]
   12c44:	cmp	r6, #0
   12c48:	ldrbne	r2, [r6]
   12c4c:	cmpne	r2, #0
   12c50:	beq	12d40 <__assert_fail@plt+0x2084>
   12c54:	mov	r1, #0
   12c58:	cmp	sl, r2
   12c5c:	beq	12c84 <__assert_fail@plt+0x1fc8>
   12c60:	mov	r2, #1
   12c64:	sxth	r1, r2
   12c68:	add	r3, r1, r1, lsl #1
   12c6c:	ldrb	r3, [r6, r3, lsl #2]
   12c70:	cmp	r3, #0
   12c74:	beq	12d40 <__assert_fail@plt+0x2084>
   12c78:	add	r2, r2, #1
   12c7c:	cmp	sl, r3
   12c80:	bne	12c64 <__assert_fail@plt+0x1fa8>
   12c84:	add	r1, r1, r1, lsl #1
   12c88:	add	r3, r6, r1, lsl #2
   12c8c:	ldr	r1, [r3, #4]
   12c90:	cmp	r1, #0
   12c94:	beq	12cf4 <__assert_fail@plt+0x2038>
   12c98:	mov	r2, r4
   12c9c:	cmp	r0, #0
   12ca0:	ldrb	r7, [r2, #2]!
   12ca4:	cmpeq	r7, #0
   12ca8:	beq	12cf4 <__assert_fail@plt+0x2038>
   12cac:	ldr	r3, [r1]
   12cb0:	cmp	r3, #0
   12cb4:	bne	12d58 <__assert_fail@plt+0x209c>
   12cb8:	cmp	r7, #0
   12cbc:	movne	r0, r2
   12cc0:	str	r0, [r1]
   12cc4:	ldrb	r0, [r2]
   12cc8:	cmp	r0, #0
   12ccc:	addeq	r9, r9, #1
   12cd0:	b	12ce0 <__assert_fail@plt+0x2024>
   12cd4:	sxth	r0, r8
   12cd8:	add	r8, r8, #1
   12cdc:	str	r4, [ip, r0, lsl #2]
   12ce0:	add	r9, r9, #1
   12ce4:	sxth	r7, r9
   12ce8:	cmp	r5, r7
   12cec:	bgt	12bf0 <__assert_fail@plt+0x1f34>
   12cf0:	b	12d2c <__assert_fail@plt+0x2070>
   12cf4:	ldr	r0, [r3, #8]
   12cf8:	cmp	r0, #0
   12cfc:	beq	12d40 <__assert_fail@plt+0x2084>
   12d00:	ldrb	r1, [r4, #2]
   12d04:	cmp	r1, #0
   12d08:	bne	12d40 <__assert_fail@plt+0x2084>
   12d0c:	ldrb	r1, [r0]
   12d10:	cmp	r1, #0
   12d14:	bne	12d58 <__assert_fail@plt+0x209c>
   12d18:	mov	r1, #1
   12d1c:	strb	r1, [r0]
   12d20:	ldr	r0, [sp, #4]
   12d24:	ldr	r5, [r0]
   12d28:	b	12ce0 <__assert_fail@plt+0x2024>
   12d2c:	ldr	r1, [sp, #4]
   12d30:	sxth	r0, r8
   12d34:	str	r0, [r1]
   12d38:	sub	sp, fp, #28
   12d3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d40:	movw	r0, #28815	; 0x708f
   12d44:	mov	r1, r4
   12d48:	movt	r0, #1
   12d4c:	bl	12de8 <error@@Base+0x40>
   12d50:	ldr	r0, [sp]
   12d54:	bl	12ea0 <error@@Base+0xf8>
   12d58:	movw	r0, #28830	; 0x709e
   12d5c:	mov	r1, r4
   12d60:	movt	r0, #1
   12d64:	bl	12de8 <error@@Base+0x40>
   12d68:	push	{fp, lr}
   12d6c:	mov	fp, sp
   12d70:	mov	r0, #0
   12d74:	bl	12d78 <__assert_fail@plt+0x20bc>
   12d78:	push	{fp, lr}
   12d7c:	mov	fp, sp
   12d80:	mov	r4, r0
   12d84:	movw	r0, #964	; 0x3c4
   12d88:	movt	r0, #3
   12d8c:	ldr	r0, [r0]
   12d90:	cmp	r0, #0
   12d94:	beq	12d9c <__assert_fail@plt+0x20e0>
   12d98:	blx	r0
   12d9c:	bl	12ef0 <error@@Base+0x148>
   12da0:	mov	r0, r4
   12da4:	bl	10bfc <exit@plt>

00012da8 <error@@Base>:
   12da8:	push	{fp, lr}
   12dac:	mov	fp, sp
   12db0:	mov	r3, r0
   12db4:	movw	r0, #960	; 0x3c0
   12db8:	movw	r1, #28744	; 0x7048
   12dbc:	movt	r0, #3
   12dc0:	movt	r1, #1
   12dc4:	ldr	r2, [r0]
   12dc8:	movw	r0, #32992	; 0x80e0
   12dcc:	movt	r0, #2
   12dd0:	ldr	r0, [r0]
   12dd4:	bl	10c2c <fprintf@plt>
   12dd8:	movw	r0, #32988	; 0x80dc
   12ddc:	movt	r0, #2
   12de0:	ldr	r0, [r0]
   12de4:	bl	12d78 <__assert_fail@plt+0x20bc>
   12de8:	push	{fp, lr}
   12dec:	mov	fp, sp
   12df0:	sub	sp, sp, #8
   12df4:	mov	r3, r0
   12df8:	movw	r0, #960	; 0x3c0
   12dfc:	str	r1, [sp]
   12e00:	movw	r1, #28752	; 0x7050
   12e04:	movt	r0, #3
   12e08:	movt	r1, #1
   12e0c:	ldr	r2, [r0]
   12e10:	movw	r0, #32992	; 0x80e0
   12e14:	movt	r0, #2
   12e18:	ldr	r0, [r0]
   12e1c:	bl	10c2c <fprintf@plt>
   12e20:	movw	r0, #32988	; 0x80dc
   12e24:	movt	r0, #2
   12e28:	ldr	r0, [r0]
   12e2c:	bl	12d78 <__assert_fail@plt+0x20bc>
   12e30:	push	{fp, lr}
   12e34:	mov	fp, sp
   12e38:	sub	sp, sp, #8
   12e3c:	mov	r3, r0
   12e40:	movw	r0, #960	; 0x3c0
   12e44:	str	r1, [sp]
   12e48:	movw	r1, #28752	; 0x7050
   12e4c:	movt	r0, #3
   12e50:	movt	r1, #1
   12e54:	ldr	r2, [r0]
   12e58:	movw	r0, #32992	; 0x80e0
   12e5c:	movt	r0, #2
   12e60:	ldr	r0, [r0]
   12e64:	bl	10c2c <fprintf@plt>
   12e68:	mov	sp, fp
   12e6c:	pop	{fp, pc}
   12e70:	push	{fp, lr}
   12e74:	mov	fp, sp
   12e78:	movw	r0, #41206	; 0xa0f6
   12e7c:	movt	r0, #2
   12e80:	ldrb	r1, [r0]
   12e84:	cmp	r1, #1
   12e88:	popeq	{fp, pc}
   12e8c:	mov	r1, #1
   12e90:	strb	r1, [r0]
   12e94:	movw	r0, #28779	; 0x706b
   12e98:	movt	r0, #1
   12e9c:	bl	12da8 <error@@Base>
   12ea0:	push	{fp, lr}
   12ea4:	mov	fp, sp
   12ea8:	mov	r3, r0
   12eac:	movw	r0, #956	; 0x3bc
   12eb0:	movt	r0, #3
   12eb4:	ldr	r0, [r0]
   12eb8:	cmp	r0, #0
   12ebc:	bne	12ee8 <error@@Base+0x140>
   12ec0:	movw	r0, #960	; 0x3c0
   12ec4:	movw	r1, #28800	; 0x7080
   12ec8:	movt	r0, #3
   12ecc:	movt	r1, #1
   12ed0:	ldr	r2, [r0]
   12ed4:	movw	r0, #32992	; 0x80e0
   12ed8:	movt	r0, #2
   12edc:	ldr	r0, [r0]
   12ee0:	bl	10c2c <fprintf@plt>
   12ee4:	bl	12d68 <__assert_fail@plt+0x20ac>
   12ee8:	blx	r0
   12eec:	bl	12d68 <__assert_fail@plt+0x20ac>
   12ef0:	push	{r4, r5, r6, sl, fp, lr}
   12ef4:	add	fp, sp, #16
   12ef8:	movw	r5, #41204	; 0xa0f4
   12efc:	movt	r5, #2
   12f00:	ldrsh	r0, [r5]
   12f04:	cmp	r0, #1
   12f08:	blt	12f3c <error@@Base+0x194>
   12f0c:	mov	r6, #1
   12f10:	sxth	r0, r6
   12f14:	bl	12ab0 <__assert_fail@plt+0x1df4>
   12f18:	mov	r4, r0
   12f1c:	bl	10b84 <unlink@plt>
   12f20:	mov	r0, r4
   12f24:	bl	10b3c <free@plt>
   12f28:	add	r0, r6, #1
   12f2c:	sxth	r6, r0
   12f30:	ldrsh	r0, [r5]
   12f34:	cmp	r6, r0
   12f38:	ble	12f10 <error@@Base+0x168>
   12f3c:	pop	{r4, r5, r6, sl, fp, pc}
   12f40:	push	{r4, r5, r6, sl, fp, lr}
   12f44:	add	fp, sp, #16
   12f48:	mov	r5, r1
   12f4c:	mov	r6, r0
   12f50:	mov	r0, #1
   12f54:	mov	r1, #16
   12f58:	mov	r4, r2
   12f5c:	bl	12914 <__assert_fail@plt+0x1c58>
   12f60:	str	r4, [r0, #12]
   12f64:	mov	r1, r0
   12f68:	strb	r5, [r0, #8]
   12f6c:	mov	r0, r6
   12f70:	pop	{r4, r5, r6, sl, fp, lr}
   12f74:	b	11604 <__assert_fail@plt+0x948>
   12f78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f7c:	add	fp, sp, #28
   12f80:	sub	sp, sp, #124	; 0x7c
   12f84:	mov	r4, r2
   12f88:	mov	r2, r1
   12f8c:	cmp	r1, #0
   12f90:	str	r0, [sp, #16]
   12f94:	bne	12fa4 <error@@Base+0x1fc>
   12f98:	ldrb	r0, [r4]
   12f9c:	cmp	r0, #0
   12fa0:	bne	132d0 <error@@Base+0x528>
   12fa4:	ldr	r0, [sp, #16]
   12fa8:	movw	r1, #14564	; 0x38e4
   12fac:	movt	r1, #1
   12fb0:	ldr	r0, [r0, #4]
   12fb4:	str	r0, [sp, #4]
   12fb8:	mov	r0, r2
   12fbc:	bl	129b0 <__assert_fail@plt+0x1cf4>
   12fc0:	mov	r6, r0
   12fc4:	ldrb	r0, [r4]
   12fc8:	cmp	r0, #0
   12fcc:	beq	13014 <error@@Base+0x26c>
   12fd0:	add	r0, sp, #20
   12fd4:	mov	r1, #99	; 0x63
   12fd8:	mov	r2, r6
   12fdc:	bl	10b54 <fgets@plt>
   12fe0:	cmp	r0, #0
   12fe4:	beq	13004 <error@@Base+0x25c>
   12fe8:	movw	r1, #28915	; 0x70f3
   12fec:	add	r0, sp, #20
   12ff0:	mov	r2, #51	; 0x33
   12ff4:	movt	r1, #1
   12ff8:	bl	10c08 <bcmp@plt>
   12ffc:	cmp	r0, #0
   13000:	beq	1325c <error@@Base+0x4b4>
   13004:	mov	r0, r6
   13008:	bl	10b78 <rewind@plt>
   1300c:	mov	r5, #0
   13010:	strb	r5, [r4, #11]
   13014:	ldr	r9, [r4, #4]
   13018:	ldrb	r8, [r4, #1]
   1301c:	mov	r0, r6
   13020:	str	r4, [sp, #8]
   13024:	cmp	r9, #0
   13028:	movweq	r9, #94	; 0x5e
   1302c:	bl	10cb0 <getc@plt>
   13030:	cmn	r0, #1
   13034:	beq	130f8 <error@@Base+0x350>
   13038:	add	r1, sp, #20
   1303c:	mov	sl, #0
   13040:	sub	r4, fp, #32
   13044:	add	r1, r1, #1
   13048:	str	r1, [sp, #12]
   1304c:	movw	r1, #32256	; 0x7e00
   13050:	movt	r1, #2
   13054:	add	r1, r1, r0
   13058:	ldrsb	r5, [r1]
   1305c:	cmp	r5, #0
   13060:	ble	132b0 <error@@Base+0x508>
   13064:	cmp	r5, #1
   13068:	strb	r0, [sp, #20]
   1306c:	beq	13090 <error@@Base+0x2e8>
   13070:	ldr	r0, [sp, #12]
   13074:	sub	r7, r5, #1
   13078:	mov	r1, #1
   1307c:	mov	r3, r6
   13080:	mov	r2, r7
   13084:	bl	10ba8 <fread@plt>
   13088:	cmp	r0, r7
   1308c:	bne	132c4 <error@@Base+0x51c>
   13090:	add	r0, sp, #20
   13094:	mov	r1, #4
   13098:	mov	r2, r4
   1309c:	bl	10bb4 <utf8proc_iterate@plt>
   130a0:	cmp	r0, r5
   130a4:	bne	132bc <error@@Base+0x514>
   130a8:	ldr	r5, [fp, #-32]	; 0xffffffe0
   130ac:	cmp	r8, #0
   130b0:	beq	130c0 <error@@Base+0x318>
   130b4:	mov	r7, #1
   130b8:	cmp	r5, r9
   130bc:	beq	130e4 <error@@Base+0x33c>
   130c0:	mov	r0, #1
   130c4:	mov	r1, #16
   130c8:	bl	12914 <__assert_fail@plt+0x1c58>
   130cc:	str	r5, [r0, #12]
   130d0:	mov	r1, r0
   130d4:	strb	sl, [r0, #8]
   130d8:	ldr	r0, [sp, #16]
   130dc:	bl	11604 <__assert_fail@plt+0x948>
   130e0:	mov	r7, #0
   130e4:	mov	r0, r6
   130e8:	bl	10cb0 <getc@plt>
   130ec:	cmn	r0, #1
   130f0:	mov	sl, r7
   130f4:	bne	1304c <error@@Base+0x2a4>
   130f8:	mov	r0, r6
   130fc:	bl	12a28 <__assert_fail@plt+0x1d6c>
   13100:	ldr	r8, [sp, #8]
   13104:	ldr	r9, [sp, #4]
   13108:	ldrb	r0, [r8, #9]
   1310c:	cmp	r0, #0
   13110:	beq	1321c <error@@Base+0x474>
   13114:	cmp	r9, #0
   13118:	ldr	r0, [sp, #16]
   1311c:	addne	r0, r9, #4
   13120:	ldr	r6, [r0]
   13124:	cmp	r6, #0
   13128:	beq	1321c <error@@Base+0x474>
   1312c:	mov	r5, #32
   13130:	mov	r7, r6
   13134:	ldr	r4, [r7, #12]
   13138:	mov	r0, r4
   1313c:	bl	10b48 <utf8proc_get_property@plt>
   13140:	cmp	r4, #10
   13144:	ble	13160 <error@@Base+0x3b8>
   13148:	sub	r1, r4, #11
   1314c:	cmp	r1, #3
   13150:	bcc	13184 <error@@Base+0x3dc>
   13154:	cmp	r4, #160	; 0xa0
   13158:	beq	13184 <error@@Base+0x3dc>
   1315c:	b	13170 <error@@Base+0x3c8>
   13160:	cmp	r4, #9
   13164:	beq	13184 <error@@Base+0x3dc>
   13168:	cmp	r4, #10
   1316c:	beq	13188 <error@@Base+0x3e0>
   13170:	ldrsh	r0, [r0]
   13174:	sub	r0, r0, #23
   13178:	cmp	r0, #2
   1317c:	strls	r5, [r7, #12]
   13180:	b	13188 <error@@Base+0x3e0>
   13184:	str	r5, [r7, #12]
   13188:	ldr	r7, [r7, #4]
   1318c:	cmp	r7, #0
   13190:	bne	13134 <error@@Base+0x38c>
   13194:	mov	r4, #0
   13198:	ldr	r1, [r6, #12]
   1319c:	ldr	r5, [r6, #4]
   131a0:	cmp	r1, #32
   131a4:	bne	131e0 <error@@Base+0x438>
   131a8:	tst	r4, #255	; 0xff
   131ac:	cmpne	r5, #0
   131b0:	beq	131fc <error@@Base+0x454>
   131b4:	ldr	r1, [r5, #12]
   131b8:	cmp	r1, #10
   131bc:	beq	131fc <error@@Base+0x454>
   131c0:	mov	r0, #1
   131c4:	cmp	r1, #32
   131c8:	bne	131f4 <error@@Base+0x44c>
   131cc:	ldrb	r0, [r6, #8]
   131d0:	ldrb	r1, [r5, #8]
   131d4:	orr	r0, r1, r0
   131d8:	strb	r0, [r5, #8]
   131dc:	b	131fc <error@@Base+0x454>
   131e0:	subs	r0, r1, #10
   131e4:	movwne	r0, #1
   131e8:	tst	r4, #255	; 0xff
   131ec:	cmpeq	r1, #10
   131f0:	beq	131fc <error@@Base+0x454>
   131f4:	mov	r4, r0
   131f8:	b	13210 <error@@Base+0x468>
   131fc:	ldr	r0, [sp, #16]
   13200:	mov	r1, r6
   13204:	bl	1162c <__assert_fail@plt+0x970>
   13208:	mov	r0, r6
   1320c:	bl	10b3c <free@plt>
   13210:	cmp	r5, #0
   13214:	mov	r6, r5
   13218:	bne	13198 <error@@Base+0x3f0>
   1321c:	ldrb	r0, [r8, #10]
   13220:	cmp	r0, #0
   13224:	beq	13254 <error@@Base+0x4ac>
   13228:	cmp	r9, #0
   1322c:	ldr	r0, [sp, #16]
   13230:	addne	r0, r9, #4
   13234:	ldr	r4, [r0]
   13238:	cmp	r4, #0
   1323c:	beq	13254 <error@@Base+0x4ac>
   13240:	ldr	r0, [r4, #12]
   13244:	bl	10b90 <utf8proc_tolower@plt>
   13248:	str	r0, [r4, #12]
   1324c:	ldr	r4, [r4, #4]
   13250:	b	13238 <error@@Base+0x490>
   13254:	sub	sp, fp, #28
   13258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1325c:	movw	r8, #28971	; 0x712b
   13260:	mov	r7, #0
   13264:	add	r9, sp, #20
   13268:	mov	r5, #1
   1326c:	movt	r8, #1
   13270:	mov	r0, r9
   13274:	mov	r1, #99	; 0x63
   13278:	mov	r2, r6
   1327c:	bl	10b54 <fgets@plt>
   13280:	cmp	r0, #0
   13284:	beq	13010 <error@@Base+0x268>
   13288:	mov	r0, r9
   1328c:	mov	r1, r8
   13290:	mov	r2, #56	; 0x38
   13294:	bl	10c08 <bcmp@plt>
   13298:	cmp	r0, #0
   1329c:	addeq	r7, r7, #1
   132a0:	uxth	r0, r7
   132a4:	cmp	r0, #2
   132a8:	bcc	13270 <error@@Base+0x4c8>
   132ac:	b	13010 <error@@Base+0x268>
   132b0:	movw	r0, #29027	; 0x7163
   132b4:	movt	r0, #1
   132b8:	bl	12da8 <error@@Base>
   132bc:	bl	10c80 <utf8proc_errmsg@plt>
   132c0:	bl	12da8 <error@@Base>
   132c4:	movw	r0, #29051	; 0x717b
   132c8:	movt	r0, #1
   132cc:	bl	12da8 <error@@Base>
   132d0:	movw	r0, #28847	; 0x70af
   132d4:	movw	r1, #28863	; 0x70bf
   132d8:	movt	r0, #1
   132dc:	movt	r1, #1
   132e0:	bl	12de8 <error@@Base+0x40>
   132e4:	push	{fp, lr}
   132e8:	mov	fp, sp
   132ec:	bl	10b60 <utf8proc_encode_char@plt>
   132f0:	cmp	r0, #0
   132f4:	sxtbgt	r0, r0
   132f8:	popgt	{fp, pc}
   132fc:	movw	r0, #28873	; 0x70c9
   13300:	movt	r0, #1
   13304:	bl	12da8 <error@@Base>
   13308:	push	{r4, r5, r6, r7, fp, lr}
   1330c:	add	fp, sp, #16
   13310:	mov	r6, r3
   13314:	mov	r4, r2
   13318:	mov	r5, r1
   1331c:	tst	r0, #255	; 0xff
   13320:	beq	13340 <error@@Base+0x598>
   13324:	mov	r0, #94	; 0x5e
   13328:	mov	r1, r4
   1332c:	bl	10b60 <utf8proc_encode_char@plt>
   13330:	cmp	r0, #0
   13334:	ble	133dc <error@@Base+0x634>
   13338:	sxtb	r7, r0
   1333c:	b	13344 <error@@Base+0x59c>
   13340:	mov	r7, #0
   13344:	cmp	r5, #10
   13348:	bne	13370 <error@@Base+0x5c8>
   1334c:	movw	r0, #28763	; 0x705b
   13350:	movw	r1, #28896	; 0x70e0
   13354:	tst	r6, #255	; 0xff
   13358:	movt	r0, #1
   1335c:	movt	r1, #1
   13360:	moveq	r1, r0
   13364:	add	r0, r4, r7
   13368:	pop	{r4, r5, r6, r7, fp, lr}
   1336c:	b	10c68 <sprintf@plt>
   13370:	mov	r0, r5
   13374:	bl	10b48 <utf8proc_get_property@plt>
   13378:	cmp	r5, #32
   1337c:	beq	13390 <error@@Base+0x5e8>
   13380:	ldrsh	r0, [r0]
   13384:	sub	r1, r0, #1
   13388:	cmp	r1, #22
   1338c:	bcs	133e8 <error@@Base+0x640>
   13390:	mov	r0, r5
   13394:	bl	10c14 <utf8proc_category@plt>
   13398:	sub	r0, r0, #6
   1339c:	cmp	r0, #2
   133a0:	bhi	133bc <error@@Base+0x614>
   133a4:	add	r1, r4, r7
   133a8:	movw	r0, #9676	; 0x25cc
   133ac:	bl	10b60 <utf8proc_encode_char@plt>
   133b0:	cmp	r0, #0
   133b4:	ble	133dc <error@@Base+0x634>
   133b8:	sxtab	r7, r7, r0
   133bc:	add	r1, r4, r7
   133c0:	mov	r0, r5
   133c4:	bl	10b60 <utf8proc_encode_char@plt>
   133c8:	cmp	r0, #0
   133cc:	sxtabgt	r0, r7, r0
   133d0:	movgt	r1, #0
   133d4:	strbgt	r1, [r4, r0]
   133d8:	popgt	{r4, r5, r6, r7, fp, pc}
   133dc:	movw	r0, #28873	; 0x70c9
   133e0:	movt	r0, #1
   133e4:	bl	12da8 <error@@Base>
   133e8:	cmp	r0, #29
   133ec:	beq	13390 <error@@Base+0x5e8>
   133f0:	add	r0, r4, r7
   133f4:	cmp	r5, #255	; 0xff
   133f8:	bhi	13408 <error@@Base+0x660>
   133fc:	movw	r1, #28901	; 0x70e5
   13400:	movt	r1, #1
   13404:	b	13410 <error@@Base+0x668>
   13408:	movw	r1, #28908	; 0x70ec
   1340c:	movt	r1, #1
   13410:	mov	r2, r5
   13414:	pop	{r4, r5, r6, r7, fp, lr}
   13418:	b	10c68 <sprintf@plt>
   1341c:	push	{r4, r5, r6, r7, fp, lr}
   13420:	add	fp, sp, #16
   13424:	sub	sp, sp, #16
   13428:	mov	r6, r2
   1342c:	mov	r2, r1
   13430:	movw	r1, #14539	; 0x38cb
   13434:	mov	r5, r0
   13438:	movt	r1, #1
   1343c:	mov	r0, r2
   13440:	bl	129b0 <__assert_fail@plt+0x1cf4>
   13444:	mov	r4, r0
   13448:	cmp	r6, #0
   1344c:	beq	13488 <error@@Base+0x6e0>
   13450:	movw	r0, #28915	; 0x70f3
   13454:	mov	r1, r4
   13458:	movt	r0, #1
   1345c:	bl	10c8c <fputs@plt>
   13460:	movw	r7, #28971	; 0x712b
   13464:	mov	r1, r4
   13468:	movt	r7, #1
   1346c:	mov	r0, r7
   13470:	bl	10c8c <fputs@plt>
   13474:	mov	r0, r4
   13478:	blx	r6
   1347c:	mov	r0, r7
   13480:	mov	r1, r4
   13484:	bl	10c8c <fputs@plt>
   13488:	ldr	r6, [r5]
   1348c:	cmp	r6, #0
   13490:	beq	134c4 <error@@Base+0x71c>
   13494:	add	r5, sp, #7
   13498:	ldr	r1, [r6, #12]
   1349c:	ldrb	r0, [r6, #8]
   134a0:	mov	r2, r5
   134a4:	mov	r3, #0
   134a8:	bl	13308 <error@@Base+0x560>
   134ac:	mov	r0, r5
   134b0:	mov	r1, r4
   134b4:	bl	10c8c <fputs@plt>
   134b8:	ldr	r6, [r6, #4]
   134bc:	cmp	r6, #0
   134c0:	bne	13498 <error@@Base+0x6f0>
   134c4:	mov	r0, r4
   134c8:	bl	12a28 <__assert_fail@plt+0x1d6c>
   134cc:	sub	sp, fp, #16
   134d0:	pop	{r4, r5, r6, r7, fp, pc}
   134d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134d8:	add	fp, sp, #28
   134dc:	sub	sp, sp, #4
   134e0:	mov	r9, #0
   134e4:	mov	sl, r0
   134e8:	str	r9, [sp]
   134ec:	ldrb	r0, [r1]
   134f0:	cmp	r0, #0
   134f4:	beq	13554 <error@@Base+0x7ac>
   134f8:	mov	r4, r1
   134fc:	mov	r8, sp
   13500:	mov	r7, #1
   13504:	mov	r0, r4
   13508:	mvn	r1, #0
   1350c:	mov	r2, r8
   13510:	bl	10bb4 <utf8proc_iterate@plt>
   13514:	cmp	r0, #1
   13518:	blt	1355c <error@@Base+0x7b4>
   1351c:	ldr	r5, [sp]
   13520:	mov	r6, r0
   13524:	mov	r0, #1
   13528:	mov	r1, #16
   1352c:	bl	12914 <__assert_fail@plt+0x1c58>
   13530:	str	r5, [r0, #12]
   13534:	mov	r1, r0
   13538:	strb	r9, [r0, #8]
   1353c:	mov	r0, sl
   13540:	bl	11604 <__assert_fail@plt+0x948>
   13544:	ldrb	r0, [r4, r6]!
   13548:	cmp	r0, #0
   1354c:	bne	13504 <error@@Base+0x75c>
   13550:	b	13560 <error@@Base+0x7b8>
   13554:	mov	r7, #1
   13558:	b	13560 <error@@Base+0x7b8>
   1355c:	mov	r7, #0
   13560:	mov	r0, r7
   13564:	sub	sp, fp, #28
   13568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1356c:	cmp	r0, #2
   13570:	bxlt	lr
   13574:	movw	r3, #41212	; 0xa0fc
   13578:	movt	r3, #2
   1357c:	str	r2, [r3]
   13580:	movw	r2, #41208	; 0xa0f8
   13584:	movt	r2, #2
   13588:	str	r1, [r2]
   1358c:	sub	r1, r0, #1
   13590:	mov	r0, #0
   13594:	b	13598 <error@@Base+0x7f0>
   13598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1359c:	add	fp, sp, #28
   135a0:	sub	sp, sp, #4
   135a4:	movw	r7, #41208	; 0xa0f8
   135a8:	movw	sl, #41212	; 0xa0fc
   135ac:	mov	r8, r1
   135b0:	mov	r9, r0
   135b4:	movt	r7, #2
   135b8:	movt	sl, #2
   135bc:	ldr	r0, [r7]
   135c0:	cmp	r9, r8
   135c4:	mov	r5, r8
   135c8:	mov	r4, r9
   135cc:	ldr	r6, [r0, r9, lsl #2]
   135d0:	bge	13680 <error@@Base+0x8d8>
   135d4:	mov	r4, r9
   135d8:	mov	r5, r8
   135dc:	cmp	r4, r5
   135e0:	bge	13608 <error@@Base+0x860>
   135e4:	ldr	r0, [r7]
   135e8:	ldr	r2, [sl]
   135ec:	ldr	r1, [r0, r5, lsl #2]
   135f0:	mov	r0, r6
   135f4:	blx	r2
   135f8:	cmn	r0, #1
   135fc:	bgt	13608 <error@@Base+0x860>
   13600:	sub	r5, r5, #1
   13604:	b	135dc <error@@Base+0x834>
   13608:	cmp	r4, r5
   1360c:	beq	13620 <error@@Base+0x878>
   13610:	ldr	r0, [r7]
   13614:	ldr	r1, [r0, r5, lsl #2]
   13618:	str	r1, [r0, r4, lsl #2]
   1361c:	add	r4, r4, #1
   13620:	cmp	r4, r5
   13624:	bge	13654 <error@@Base+0x8ac>
   13628:	ldr	r0, [r7]
   1362c:	ldr	r2, [sl]
   13630:	ldr	r1, [r0, r4, lsl #2]
   13634:	mov	r0, r6
   13638:	blx	r2
   1363c:	cmp	r0, #1
   13640:	blt	13654 <error@@Base+0x8ac>
   13644:	add	r4, r4, #1
   13648:	cmp	r5, r4
   1364c:	bne	13628 <error@@Base+0x880>
   13650:	b	13678 <error@@Base+0x8d0>
   13654:	cmp	r4, r5
   13658:	beq	1366c <error@@Base+0x8c4>
   1365c:	ldr	r0, [r7]
   13660:	ldr	r1, [r0, r4, lsl #2]
   13664:	str	r1, [r0, r5, lsl #2]
   13668:	sub	r5, r5, #1
   1366c:	cmp	r4, r5
   13670:	blt	135dc <error@@Base+0x834>
   13674:	b	1367c <error@@Base+0x8d4>
   13678:	mov	r4, r5
   1367c:	ldr	r0, [r7]
   13680:	sub	r1, r5, #1
   13684:	str	r6, [r0, r5, lsl #2]
   13688:	cmp	r1, r9
   1368c:	movgt	r0, r9
   13690:	blgt	13598 <error@@Base+0x7f0>
   13694:	add	r9, r4, #1
   13698:	cmp	r9, r8
   1369c:	blt	135bc <error@@Base+0x814>
   136a0:	sub	sp, fp, #28
   136a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   136ac:	mov	r7, r0
   136b0:	ldr	r6, [pc, #72]	; 13700 <error@@Base+0x958>
   136b4:	ldr	r5, [pc, #72]	; 13704 <error@@Base+0x95c>
   136b8:	add	r6, pc, r6
   136bc:	add	r5, pc, r5
   136c0:	sub	r6, r6, r5
   136c4:	mov	r8, r1
   136c8:	mov	r9, r2
   136cc:	bl	10af8 <calloc@plt-0x20>
   136d0:	asrs	r6, r6, #2
   136d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   136d8:	mov	r4, #0
   136dc:	add	r4, r4, #1
   136e0:	ldr	r3, [r5], #4
   136e4:	mov	r2, r9
   136e8:	mov	r1, r8
   136ec:	mov	r0, r7
   136f0:	blx	r3
   136f4:	cmp	r6, r4
   136f8:	bne	136dc <error@@Base+0x934>
   136fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13700:	andeq	r4, r1, ip, lsr r7
   13704:	andeq	r4, r1, r4, lsr r7
   13708:	bx	lr
   1370c:	mov	r2, r1
   13710:	mov	r1, r0
   13714:	mov	r0, #3
   13718:	b	10b9c <__xstat@plt>

Disassembly of section .fini:

0001371c <.fini>:
   1371c:	push	{r3, lr}
   13720:	pop	{r3, pc}
