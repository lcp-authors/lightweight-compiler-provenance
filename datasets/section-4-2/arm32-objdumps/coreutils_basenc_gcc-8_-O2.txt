
../repos/coreutils/src/basenc:     file format elf32-littlearm


Disassembly of section .init:

00010ca0 <.init>:
   10ca0:	push	{r3, lr}
   10ca4:	bl	11970 <__assert_fail@plt+0xa40>
   10ca8:	pop	{r3, pc}

Disassembly of section .plt:

00010cac <calloc@plt-0x14>:
   10cac:	push	{lr}		; (str lr, [sp, #-4]!)
   10cb0:	ldr	lr, [pc, #4]	; 10cbc <calloc@plt-0x4>
   10cb4:	add	lr, pc, lr
   10cb8:	ldr	pc, [lr, #8]!
   10cbc:	andeq	r9, r1, r4, asr #6

00010cc0 <calloc@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #102400	; 0x19000
   10cc8:	ldr	pc, [ip, #836]!	; 0x344

00010ccc <fputs_unlocked@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #102400	; 0x19000
   10cd4:	ldr	pc, [ip, #828]!	; 0x33c

00010cd8 <raise@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #102400	; 0x19000
   10ce0:	ldr	pc, [ip, #820]!	; 0x334

00010ce4 <strcmp@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #102400	; 0x19000
   10cec:	ldr	pc, [ip, #812]!	; 0x32c

00010cf0 <posix_fadvise64@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #102400	; 0x19000
   10cf8:	ldr	pc, [ip, #804]!	; 0x324

00010cfc <fflush@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #102400	; 0x19000
   10d04:	ldr	pc, [ip, #796]!	; 0x31c

00010d08 <memmove@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #102400	; 0x19000
   10d10:	ldr	pc, [ip, #788]!	; 0x314

00010d14 <free@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #102400	; 0x19000
   10d1c:	ldr	pc, [ip, #780]!	; 0x30c

00010d20 <_exit@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #102400	; 0x19000
   10d28:	ldr	pc, [ip, #772]!	; 0x304

00010d2c <memcpy@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #102400	; 0x19000
   10d34:	ldr	pc, [ip, #764]!	; 0x2fc

00010d38 <mbsinit@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #102400	; 0x19000
   10d40:	ldr	pc, [ip, #756]!	; 0x2f4

00010d44 <fwrite_unlocked@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #102400	; 0x19000
   10d4c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d50 <memcmp@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #102400	; 0x19000
   10d58:	ldr	pc, [ip, #740]!	; 0x2e4

00010d5c <fputc_unlocked@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #102400	; 0x19000
   10d64:	ldr	pc, [ip, #732]!	; 0x2dc

00010d68 <dcgettext@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #102400	; 0x19000
   10d70:	ldr	pc, [ip, #724]!	; 0x2d4

00010d74 <realloc@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #102400	; 0x19000
   10d7c:	ldr	pc, [ip, #716]!	; 0x2cc

00010d80 <textdomain@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #102400	; 0x19000
   10d88:	ldr	pc, [ip, #708]!	; 0x2c4

00010d8c <iswprint@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #102400	; 0x19000
   10d94:	ldr	pc, [ip, #700]!	; 0x2bc

00010d98 <fwrite@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #102400	; 0x19000
   10da0:	ldr	pc, [ip, #692]!	; 0x2b4

00010da4 <lseek64@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #102400	; 0x19000
   10dac:	ldr	pc, [ip, #684]!	; 0x2ac

00010db0 <__ctype_get_mb_cur_max@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #102400	; 0x19000
   10db8:	ldr	pc, [ip, #676]!	; 0x2a4

00010dbc <__fpending@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #102400	; 0x19000
   10dc4:	ldr	pc, [ip, #668]!	; 0x29c

00010dc8 <mbrtowc@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #102400	; 0x19000
   10dd0:	ldr	pc, [ip, #660]!	; 0x294

00010dd4 <error@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #102400	; 0x19000
   10ddc:	ldr	pc, [ip, #652]!	; 0x28c

00010de0 <malloc@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #102400	; 0x19000
   10de8:	ldr	pc, [ip, #644]!	; 0x284

00010dec <__libc_start_main@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #102400	; 0x19000
   10df4:	ldr	pc, [ip, #636]!	; 0x27c

00010df8 <__freading@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #102400	; 0x19000
   10e00:	ldr	pc, [ip, #628]!	; 0x274

00010e04 <__gmon_start__@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #102400	; 0x19000
   10e0c:	ldr	pc, [ip, #620]!	; 0x26c

00010e10 <getopt_long@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #102400	; 0x19000
   10e18:	ldr	pc, [ip, #612]!	; 0x264

00010e1c <__ctype_b_loc@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #102400	; 0x19000
   10e24:	ldr	pc, [ip, #604]!	; 0x25c

00010e28 <exit@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #102400	; 0x19000
   10e30:	ldr	pc, [ip, #596]!	; 0x254

00010e34 <strlen@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #102400	; 0x19000
   10e3c:	ldr	pc, [ip, #588]!	; 0x24c

00010e40 <strchr@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #102400	; 0x19000
   10e48:	ldr	pc, [ip, #580]!	; 0x244

00010e4c <__errno_location@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #102400	; 0x19000
   10e54:	ldr	pc, [ip, #572]!	; 0x23c

00010e58 <__cxa_atexit@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #102400	; 0x19000
   10e60:	ldr	pc, [ip, #564]!	; 0x234

00010e64 <memset@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #102400	; 0x19000
   10e6c:	ldr	pc, [ip, #556]!	; 0x22c

00010e70 <__printf_chk@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #102400	; 0x19000
   10e78:	ldr	pc, [ip, #548]!	; 0x224

00010e7c <fileno@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #102400	; 0x19000
   10e84:	ldr	pc, [ip, #540]!	; 0x21c

00010e88 <__fprintf_chk@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #102400	; 0x19000
   10e90:	ldr	pc, [ip, #532]!	; 0x214

00010e94 <memchr@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #102400	; 0x19000
   10e9c:	ldr	pc, [ip, #524]!	; 0x20c

00010ea0 <fclose@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #102400	; 0x19000
   10ea8:	ldr	pc, [ip, #516]!	; 0x204

00010eac <fseeko64@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #102400	; 0x19000
   10eb4:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb8 <__overflow@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #102400	; 0x19000
   10ec0:	ldr	pc, [ip, #500]!	; 0x1f4

00010ec4 <setlocale@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #102400	; 0x19000
   10ecc:	ldr	pc, [ip, #492]!	; 0x1ec

00010ed0 <strrchr@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #102400	; 0x19000
   10ed8:	ldr	pc, [ip, #484]!	; 0x1e4

00010edc <nl_langinfo@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #102400	; 0x19000
   10ee4:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee8 <__strtoll_internal@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #102400	; 0x19000
   10ef0:	ldr	pc, [ip, #468]!	; 0x1d4

00010ef4 <fopen64@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #102400	; 0x19000
   10efc:	ldr	pc, [ip, #460]!	; 0x1cc

00010f00 <bindtextdomain@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #102400	; 0x19000
   10f08:	ldr	pc, [ip, #452]!	; 0x1c4

00010f0c <fread_unlocked@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #102400	; 0x19000
   10f14:	ldr	pc, [ip, #444]!	; 0x1bc

00010f18 <strncmp@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #102400	; 0x19000
   10f20:	ldr	pc, [ip, #436]!	; 0x1b4

00010f24 <abort@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #102400	; 0x19000
   10f2c:	ldr	pc, [ip, #428]!	; 0x1ac

00010f30 <__assert_fail@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #102400	; 0x19000
   10f38:	ldr	pc, [ip, #420]!	; 0x1a4

Disassembly of section .text:

00010f3c <.text>:
   10f3c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10f40:	mov	r4, #0
   10f44:	strd	r6, [sp, #8]
   10f48:	movw	r6, #35300	; 0x89e4
   10f4c:	movt	r6, #1
   10f50:	strd	r8, [sp, #16]
   10f54:	mov	r8, r1
   10f58:	movw	r7, #41304	; 0xa158
   10f5c:	movt	r7, #2
   10f60:	strd	sl, [sp, #24]
   10f64:	mov	sl, r0
   10f68:	str	lr, [sp, #32]
   10f6c:	sub	sp, sp, #84	; 0x54
   10f70:	mov	r9, r4
   10f74:	ldr	r0, [r1]
   10f78:	str	r4, [sp, #16]
   10f7c:	bl	13ea4 <__assert_fail@plt+0x2f74>
   10f80:	movw	r1, #34720	; 0x87a0
   10f84:	movt	r1, #1
   10f88:	ldr	fp, [pc, #2464]	; 11930 <__assert_fail@plt+0xa00>
   10f8c:	mov	r0, #6
   10f90:	bl	10ec4 <setlocale@plt>
   10f94:	movw	r1, #35216	; 0x8990
   10f98:	movt	r1, #1
   10f9c:	movw	r0, #35048	; 0x88e8
   10fa0:	movt	r0, #1
   10fa4:	bl	10f00 <bindtextdomain@plt>
   10fa8:	movw	r0, #35048	; 0x88e8
   10fac:	movt	r0, #1
   10fb0:	bl	10d80 <textdomain@plt>
   10fb4:	movw	r0, #15136	; 0x3b20
   10fb8:	movt	r0, #1
   10fbc:	bl	17f84 <__assert_fail@plt+0x7054>
   10fc0:	mov	r3, #76	; 0x4c
   10fc4:	str	r3, [sp, #20]
   10fc8:	mov	r5, #0
   10fcc:	mov	r3, fp
   10fd0:	mov	r2, r6
   10fd4:	mov	r1, r8
   10fd8:	mov	r0, sl
   10fdc:	str	r5, [sp]
   10fe0:	bl	10e10 <getopt_long@plt>
   10fe4:	cmn	r0, #1
   10fe8:	beq	11114 <__assert_fail@plt+0x1e4>
   10fec:	cmp	r0, #105	; 0x69
   10ff0:	beq	11044 <__assert_fail@plt+0x114>
   10ff4:	bgt	11018 <__assert_fail@plt+0xe8>
   10ff8:	cmn	r0, #2
   10ffc:	beq	1110c <__assert_fail@plt+0x1dc>
   11000:	cmp	r0, #100	; 0x64
   11004:	beq	11038 <__assert_fail@plt+0x108>
   11008:	cmn	r0, #3
   1100c:	beq	110c0 <__assert_fail@plt+0x190>
   11010:	mov	r0, #1
   11014:	bl	126ec <__assert_fail@plt+0x17bc>
   11018:	cmp	r0, #119	; 0x77
   1101c:	beq	11054 <__assert_fail@plt+0x124>
   11020:	blt	11010 <__assert_fail@plt+0xe0>
   11024:	sub	r3, r0, #256	; 0x100
   11028:	cmp	r3, #7
   1102c:	bhi	11010 <__assert_fail@plt+0xe0>
   11030:	mov	r4, r0
   11034:	b	10fc8 <__assert_fail@plt+0x98>
   11038:	mov	r0, r4
   1103c:	mov	r9, #1
   11040:	b	11030 <__assert_fail@plt+0x100>
   11044:	mov	r3, #1
   11048:	mov	r0, r4
   1104c:	str	r3, [sp, #16]
   11050:	b	11030 <__assert_fail@plt+0x100>
   11054:	movw	r2, #34720	; 0x87a0
   11058:	movt	r2, #1
   1105c:	ldr	r0, [r7]
   11060:	mov	r1, r5
   11064:	add	r3, sp, #56	; 0x38
   11068:	str	r2, [sp]
   1106c:	mov	r2, #10
   11070:	bl	16bfc <__assert_fail@plt+0x5ccc>
   11074:	cmp	r0, #1
   11078:	mov	ip, r0
   1107c:	bhi	11870 <__assert_fail@plt+0x940>
   11080:	ldrd	r2, [sp, #56]	; 0x38
   11084:	cmp	r2, #0
   11088:	sbcs	r1, r3, #0
   1108c:	blt	11870 <__assert_fail@plt+0x940>
   11090:	mvn	r0, #-2147483648	; 0x80000000
   11094:	mov	r1, #0
   11098:	cmp	r0, r2
   1109c:	eor	ip, ip, #1
   110a0:	sbcs	r1, r1, r3
   110a4:	mov	r0, r4
   110a8:	movlt	ip, #0
   110ac:	andge	ip, ip, #1
   110b0:	cmp	ip, #0
   110b4:	moveq	r2, #0
   110b8:	str	r2, [sp, #20]
   110bc:	b	11030 <__assert_fail@plt+0x100>
   110c0:	movw	r1, #35268	; 0x89c4
   110c4:	movt	r1, #1
   110c8:	movw	r2, #35284	; 0x89d4
   110cc:	movt	r2, #1
   110d0:	movw	r3, #41196	; 0xa0ec
   110d4:	movt	r3, #2
   110d8:	movw	r0, #41300	; 0xa154
   110dc:	movt	r0, #2
   110e0:	str	r2, [sp]
   110e4:	movw	r2, #35044	; 0x88e4
   110e8:	movt	r2, #1
   110ec:	stmib	sp, {r1, r5}
   110f0:	movw	r1, #33420	; 0x828c
   110f4:	movt	r1, #1
   110f8:	ldr	r0, [r0]
   110fc:	ldr	r3, [r3]
   11100:	bl	16630 <__assert_fail@plt+0x5700>
   11104:	mov	r0, r5
   11108:	bl	10e28 <exit@plt>
   1110c:	mov	r0, r5
   11110:	bl	126ec <__assert_fail@plt+0x17bc>
   11114:	sub	r4, r4, #256	; 0x100
   11118:	cmp	r4, #7
   1111c:	ldrls	pc, [pc, r4, lsl #2]
   11120:	b	11908 <__assert_fail@plt+0x9d8>
   11124:			; <UNDEFINED> instruction: 0x000114b8
   11128:	andeq	r1, r1, r0, ror r4
   1112c:	andeq	r1, r1, r8, lsr #8
   11130:	andeq	r1, r1, r0, ror #7
   11134:	muleq	r1, r8, r3
   11138:	andeq	r1, r1, r0, asr r3
   1113c:	andeq	r1, r1, r8, lsl #6
   11140:	andeq	r1, r1, r4, asr #2
   11144:	movw	r7, #41312	; 0xa160
   11148:	movt	r7, #2
   1114c:	movw	r3, #6904	; 0x1af8
   11150:	movt	r3, #1
   11154:	movw	r2, #7436	; 0x1d0c
   11158:	movt	r2, #1
   1115c:	str	r3, [r7]
   11160:	movw	r3, #8940	; 0x22ec
   11164:	movt	r3, #1
   11168:	str	r2, [r7, #4]
   1116c:	movw	r2, #7264	; 0x1c60
   11170:	movt	r2, #1
   11174:	str	r3, [r7, #8]
   11178:	movw	r3, #8100	; 0x1fa4
   1117c:	movt	r3, #1
   11180:	str	r2, [r7, #12]
   11184:	str	r3, [r7, #16]
   11188:	movw	r4, #41280	; 0xa140
   1118c:	movt	r4, #2
   11190:	ldr	r3, [r4]
   11194:	sub	r2, sl, r3
   11198:	cmp	r2, #1
   1119c:	bgt	115b8 <__assert_fail@plt+0x688>
   111a0:	cmp	r3, sl
   111a4:	bge	115fc <__assert_fail@plt+0x6cc>
   111a8:	ldr	r3, [r8, r3, lsl #2]
   111ac:	movw	r1, #33292	; 0x820c
   111b0:	movt	r1, #1
   111b4:	mov	r0, r3
   111b8:	str	r3, [sp, #44]	; 0x2c
   111bc:	bl	10ce4 <strcmp@plt>
   111c0:	cmp	r0, #0
   111c4:	beq	11608 <__assert_fail@plt+0x6d8>
   111c8:	movw	r1, #35352	; 0x8a18
   111cc:	movt	r1, #1
   111d0:	ldr	r0, [sp, #44]	; 0x2c
   111d4:	bl	10ef4 <fopen64@plt>
   111d8:	subs	sl, r0, #0
   111dc:	beq	118ac <__assert_fail@plt+0x97c>
   111e0:	mov	r1, #2
   111e4:	mov	r0, sl
   111e8:	bl	13c10 <__assert_fail@plt+0x2ce0>
   111ec:	cmp	r9, #0
   111f0:	movw	r3, #41300	; 0xa154
   111f4:	movt	r3, #2
   111f8:	beq	11618 <__assert_fail@plt+0x6e8>
   111fc:	ldr	r3, [r3]
   11200:	movw	r0, #4200	; 0x1068
   11204:	ldr	r2, [r7]
   11208:	str	r3, [sp, #20]
   1120c:	blx	r2
   11210:	bl	16740 <__assert_fail@plt+0x5810>
   11214:	mov	r6, r0
   11218:	movw	r0, #4200	; 0x1068
   1121c:	bl	16740 <__assert_fail@plt+0x5810>
   11220:	mov	r2, #0
   11224:	mov	r9, r0
   11228:	ldr	r3, [r7, #12]
   1122c:	add	r0, sp, #56	; 0x38
   11230:	str	r2, [sp, #72]	; 0x48
   11234:	blx	r3
   11238:	str	r9, [sp, #24]
   1123c:	mov	r5, #0
   11240:	b	11274 <__assert_fail@plt+0x344>
   11244:	ldr	r4, [sl]
   11248:	add	r5, r5, r8
   1124c:	ands	r4, r4, #32
   11250:	bne	11698 <__assert_fail@plt+0x768>
   11254:	movw	r0, #4200	; 0x1068
   11258:	ldr	r3, [r7]
   1125c:	blx	r3
   11260:	cmp	r5, r0
   11264:	ldr	r3, [sl]
   11268:	bge	11500 <__assert_fail@plt+0x5d0>
   1126c:	tst	r3, #16
   11270:	bne	11500 <__assert_fail@plt+0x5d0>
   11274:	movw	r0, #4200	; 0x1068
   11278:	ldr	r3, [r7]
   1127c:	add	r4, r6, r5
   11280:	blx	r3
   11284:	sub	r2, r0, r5
   11288:	mov	r3, sl
   1128c:	mov	r1, #1
   11290:	mov	r0, r4
   11294:	bl	10f0c <fread_unlocked@plt>
   11298:	ldr	r3, [sp, #16]
   1129c:	mov	r8, r0
   112a0:	cmp	r3, #0
   112a4:	beq	11244 <__assert_fail@plt+0x314>
   112a8:	cmp	r0, #0
   112ac:	ble	11244 <__assert_fail@plt+0x314>
   112b0:	mov	r9, #0
   112b4:	b	112e4 <__assert_fail@plt+0x3b4>
   112b8:	ldrb	r3, [r6, r4]
   112bc:	cmp	r3, #61	; 0x3d
   112c0:	beq	11300 <__assert_fail@plt+0x3d0>
   112c4:	sub	r8, r8, #1
   112c8:	add	r1, r4, #1
   112cc:	add	r1, r6, r1
   112d0:	mov	r0, fp
   112d4:	sub	r2, r8, r9
   112d8:	bl	10d08 <memmove@plt>
   112dc:	cmp	r8, r9
   112e0:	ble	11244 <__assert_fail@plt+0x314>
   112e4:	add	r4, r5, r9
   112e8:	ldr	r3, [r7, #4]
   112ec:	add	fp, r6, r4
   112f0:	ldrb	r0, [r6, r4]
   112f4:	blx	r3
   112f8:	cmp	r0, #0
   112fc:	beq	112b8 <__assert_fail@plt+0x388>
   11300:	add	r9, r9, #1
   11304:	b	112dc <__assert_fail@plt+0x3ac>
   11308:	movw	r7, #41312	; 0xa160
   1130c:	movt	r7, #2
   11310:	movw	r3, #6948	; 0x1b24
   11314:	movt	r3, #1
   11318:	movw	r2, #6928	; 0x1b10
   1131c:	movt	r2, #1
   11320:	str	r3, [r7]
   11324:	movw	r3, #7040	; 0x1b80
   11328:	movt	r3, #1
   1132c:	str	r2, [r7, #4]
   11330:	movw	r2, #7320	; 0x1c98
   11334:	movt	r2, #1
   11338:	str	r3, [r7, #8]
   1133c:	movw	r3, #8496	; 0x2130
   11340:	movt	r3, #1
   11344:	str	r2, [r7, #12]
   11348:	str	r3, [r7, #16]
   1134c:	b	11188 <__assert_fail@plt+0x258>
   11350:	movw	r7, #41312	; 0xa160
   11354:	movt	r7, #2
   11358:	movw	r3, #6948	; 0x1b24
   1135c:	movt	r3, #1
   11360:	movw	r2, #6928	; 0x1b10
   11364:	movt	r2, #1
   11368:	str	r3, [r7]
   1136c:	movw	r3, #6956	; 0x1b2c
   11370:	movt	r3, #1
   11374:	str	r2, [r7, #4]
   11378:	movw	r2, #7320	; 0x1c98
   1137c:	movt	r2, #1
   11380:	str	r3, [r7, #8]
   11384:	movw	r3, #8704	; 0x2200
   11388:	movt	r3, #1
   1138c:	str	r2, [r7, #12]
   11390:	str	r3, [r7, #16]
   11394:	b	11188 <__assert_fail@plt+0x258>
   11398:	movw	r7, #41312	; 0xa160
   1139c:	movt	r7, #2
   113a0:	movw	r3, #6808	; 0x1a98
   113a4:	movt	r3, #1
   113a8:	movw	r2, #6780	; 0x1a7c
   113ac:	movt	r2, #1
   113b0:	str	r3, [r7]
   113b4:	movw	r3, #6816	; 0x1aa0
   113b8:	movt	r3, #1
   113bc:	str	r2, [r7, #4]
   113c0:	movw	r2, #7376	; 0x1cd0
   113c4:	movt	r2, #1
   113c8:	str	r3, [r7, #8]
   113cc:	movw	r3, #7900	; 0x1edc
   113d0:	movt	r3, #1
   113d4:	str	r2, [r7, #12]
   113d8:	str	r3, [r7, #16]
   113dc:	b	11188 <__assert_fail@plt+0x258>
   113e0:	movw	r7, #41312	; 0xa160
   113e4:	movt	r7, #2
   113e8:	movw	r3, #6720	; 0x1a40
   113ec:	movt	r3, #1
   113f0:	movw	r2, #6752	; 0x1a60
   113f4:	movt	r2, #1
   113f8:	str	r3, [r7]
   113fc:	movw	r3, #9336	; 0x2478
   11400:	movt	r3, #1
   11404:	str	r2, [r7, #4]
   11408:	movw	r2, #7584	; 0x1da0
   1140c:	movt	r2, #1
   11410:	str	r3, [r7, #8]
   11414:	movw	r3, #9752	; 0x2618
   11418:	movt	r3, #1
   1141c:	str	r2, [r7, #12]
   11420:	str	r3, [r7, #16]
   11424:	b	11188 <__assert_fail@plt+0x258>
   11428:	movw	r7, #41312	; 0xa160
   1142c:	movt	r7, #2
   11430:	movw	r3, #6720	; 0x1a40
   11434:	movt	r3, #1
   11438:	movw	r2, #12324	; 0x3024
   1143c:	movt	r2, #1
   11440:	str	r3, [r7]
   11444:	movw	r3, #11584	; 0x2d40
   11448:	movt	r3, #1
   1144c:	str	r2, [r7, #4]
   11450:	movw	r2, #7636	; 0x1dd4
   11454:	movt	r2, #1
   11458:	str	r3, [r7, #8]
   1145c:	movw	r3, #7528	; 0x1d68
   11460:	movt	r3, #1
   11464:	str	r2, [r7, #12]
   11468:	str	r3, [r7, #16]
   1146c:	b	11188 <__assert_fail@plt+0x258>
   11470:	movw	r7, #41312	; 0xa160
   11474:	movt	r7, #2
   11478:	movw	r3, #6692	; 0x1a24
   1147c:	movt	r3, #1
   11480:	movw	r2, #7120	; 0x1bd0
   11484:	movt	r2, #1
   11488:	str	r3, [r7]
   1148c:	movw	r3, #7164	; 0x1bfc
   11490:	movt	r3, #1
   11494:	str	r2, [r7, #4]
   11498:	movw	r2, #7700	; 0x1e14
   1149c:	movt	r2, #1
   114a0:	str	r3, [r7, #8]
   114a4:	movw	r3, #9492	; 0x2514
   114a8:	movt	r3, #1
   114ac:	str	r2, [r7, #12]
   114b0:	str	r3, [r7, #16]
   114b4:	b	11188 <__assert_fail@plt+0x258>
   114b8:	movw	r7, #41312	; 0xa160
   114bc:	movt	r7, #2
   114c0:	movw	r3, #6692	; 0x1a24
   114c4:	movt	r3, #1
   114c8:	movw	r2, #14224	; 0x3790
   114cc:	movt	r2, #1
   114d0:	str	r3, [r7]
   114d4:	movw	r3, #13540	; 0x34e4
   114d8:	movt	r3, #1
   114dc:	str	r2, [r7, #4]
   114e0:	movw	r2, #7752	; 0x1e48
   114e4:	movt	r2, #1
   114e8:	str	r3, [r7, #8]
   114ec:	movw	r3, #7644	; 0x1ddc
   114f0:	movt	r3, #1
   114f4:	str	r2, [r7, #12]
   114f8:	str	r3, [r7, #16]
   114fc:	b	11188 <__assert_fail@plt+0x258>
   11500:	add	fp, sp, #52	; 0x34
   11504:	ldr	r9, [sp, #24]
   11508:	b	11574 <__assert_fail@plt+0x644>
   1150c:	cmp	r4, #0
   11510:	bne	1123c <__assert_fail@plt+0x30c>
   11514:	ldr	r8, [r7, #16]
   11518:	cmp	r4, #0
   1151c:	movw	r3, #4200	; 0x1068
   11520:	moveq	r2, r5
   11524:	movne	r2, #0
   11528:	str	r3, [sp, #52]	; 0x34
   1152c:	mov	r3, r9
   11530:	mov	r1, r6
   11534:	str	fp, [sp]
   11538:	add	r0, sp, #56	; 0x38
   1153c:	blx	r8
   11540:	mov	r8, r0
   11544:	mov	r1, #1
   11548:	ldr	r3, [sp, #20]
   1154c:	mov	r0, r9
   11550:	ldr	r2, [sp, #52]	; 0x34
   11554:	bl	10d44 <fwrite_unlocked@plt>
   11558:	ldr	r3, [sp, #52]	; 0x34
   1155c:	cmp	r0, r3
   11560:	bcc	117fc <__assert_fail@plt+0x8cc>
   11564:	cmp	r8, #0
   11568:	beq	11834 <__assert_fail@plt+0x904>
   1156c:	ldr	r3, [sl]
   11570:	add	r4, r4, #1
   11574:	tst	r3, #16
   11578:	beq	1150c <__assert_fail@plt+0x5dc>
   1157c:	cmp	r4, #2
   11580:	beq	115ac <__assert_fail@plt+0x67c>
   11584:	cmp	r4, #1
   11588:	bne	11514 <__assert_fail@plt+0x5e4>
   1158c:	ldr	r3, [sp, #56]	; 0x38
   11590:	cmp	r3, #0
   11594:	beq	115ac <__assert_fail@plt+0x67c>
   11598:	movw	r3, #4200	; 0x1068
   1159c:	mov	r2, #0
   115a0:	ldr	r8, [r7, #16]
   115a4:	str	r3, [sp, #52]	; 0x34
   115a8:	b	1152c <__assert_fail@plt+0x5fc>
   115ac:	mov	r0, sl
   115b0:	ldr	r1, [sp, #44]	; 0x2c
   115b4:	bl	11e50 <__assert_fail@plt+0xf20>
   115b8:	mov	r2, #5
   115bc:	movw	r1, #35332	; 0x8a04
   115c0:	movt	r1, #1
   115c4:	mov	r0, #0
   115c8:	bl	10d68 <dcgettext@plt>
   115cc:	ldr	r3, [r4]
   115d0:	mov	r5, r0
   115d4:	add	r3, r3, #1
   115d8:	ldr	r0, [r8, r3, lsl #2]
   115dc:	bl	16194 <__assert_fail@plt+0x5264>
   115e0:	mov	r1, #0
   115e4:	mov	r3, r0
   115e8:	mov	r2, r5
   115ec:	mov	r0, r1
   115f0:	bl	10dd4 <error@plt>
   115f4:	mov	r0, #1
   115f8:	bl	126ec <__assert_fail@plt+0x17bc>
   115fc:	movw	r3, #33292	; 0x820c
   11600:	movt	r3, #1
   11604:	str	r3, [sp, #44]	; 0x2c
   11608:	movw	r3, #41296	; 0xa150
   1160c:	movt	r3, #2
   11610:	ldr	sl, [r3]
   11614:	b	111e0 <__assert_fail@plt+0x2b0>
   11618:	mov	r0, #30720	; 0x7800
   1161c:	str	r3, [sp, #28]
   11620:	ldr	fp, [r3]
   11624:	bl	16740 <__assert_fail@plt+0x5810>
   11628:	mov	r8, r0
   1162c:	mov	r0, #30720	; 0x7800
   11630:	ldr	r3, [r7]
   11634:	blx	r3
   11638:	bl	16740 <__assert_fail@plt+0x5810>
   1163c:	str	r0, [sp, #16]
   11640:	str	r7, [sp, #24]
   11644:	mov	r5, #0
   11648:	b	11654 <__assert_fail@plt+0x724>
   1164c:	cmp	r5, #30720	; 0x7800
   11650:	bge	116c4 <__assert_fail@plt+0x794>
   11654:	mov	r3, sl
   11658:	rsb	r2, r5, #30720	; 0x7800
   1165c:	add	r0, r8, r5
   11660:	mov	r1, #1
   11664:	bl	10f0c <fread_unlocked@plt>
   11668:	ldr	r3, [sl]
   1166c:	add	r5, r5, r0
   11670:	tst	r3, #48	; 0x30
   11674:	beq	1164c <__assert_fail@plt+0x71c>
   11678:	cmp	r5, #0
   1167c:	bgt	116c4 <__assert_fail@plt+0x794>
   11680:	ldr	r2, [sp, #20]
   11684:	cmp	r2, #0
   11688:	cmpne	r9, #0
   1168c:	bgt	1180c <__assert_fail@plt+0x8dc>
   11690:	tst	r3, #32
   11694:	beq	115ac <__assert_fail@plt+0x67c>
   11698:	bl	10e4c <__errno_location@plt>
   1169c:	movw	r1, #35356	; 0x8a1c
   116a0:	movt	r1, #1
   116a4:	ldr	r4, [r0]
   116a8:	mov	r2, #5
   116ac:	mov	r0, #0
   116b0:	bl	10d68 <dcgettext@plt>
   116b4:	mov	r2, r0
   116b8:	mov	r0, #1
   116bc:	mov	r1, r4
   116c0:	bl	10dd4 <error@plt>
   116c4:	ldr	r6, [sp, #24]
   116c8:	mov	r0, r5
   116cc:	ldr	r3, [r6]
   116d0:	ldr	r4, [r6, #8]
   116d4:	blx	r3
   116d8:	mov	r3, r0
   116dc:	mov	r1, r5
   116e0:	ldr	r2, [sp, #16]
   116e4:	mov	r0, r8
   116e8:	blx	r4
   116ec:	mov	r0, r5
   116f0:	ldr	r3, [r6]
   116f4:	blx	r3
   116f8:	ldr	r3, [sp, #20]
   116fc:	mov	r7, r0
   11700:	cmp	r3, #0
   11704:	beq	117dc <__assert_fail@plt+0x8ac>
   11708:	cmp	r0, #0
   1170c:	ble	117a8 <__assert_fail@plt+0x878>
   11710:	mov	r6, #0
   11714:	str	sl, [sp, #32]
   11718:	str	r8, [sp, #36]	; 0x24
   1171c:	str	r5, [sp, #40]	; 0x28
   11720:	ldr	r8, [sp, #16]
   11724:	ldr	r5, [sp, #20]
   11728:	ldr	sl, [sp, #28]
   1172c:	b	1175c <__assert_fail@plt+0x82c>
   11730:	ldr	r3, [fp, #20]
   11734:	ldr	r2, [fp, #24]
   11738:	cmp	r3, r2
   1173c:	bcs	117c0 <__assert_fail@plt+0x890>
   11740:	add	r2, r3, #1
   11744:	mov	r9, r4
   11748:	str	r2, [fp, #20]
   1174c:	mov	r2, #10
   11750:	strb	r2, [r3]
   11754:	cmp	r6, r7
   11758:	bge	1179c <__assert_fail@plt+0x86c>
   1175c:	sub	r4, r7, r6
   11760:	sub	r3, r5, r9
   11764:	cmp	r4, r3
   11768:	movge	r4, r3
   1176c:	cmp	r4, #0
   11770:	beq	11730 <__assert_fail@plt+0x800>
   11774:	mov	r2, r4
   11778:	mov	r1, #1
   1177c:	ldr	r3, [sl]
   11780:	add	r0, r8, r6
   11784:	bl	10d44 <fwrite_unlocked@plt>
   11788:	cmp	r4, r0
   1178c:	bhi	117fc <__assert_fail@plt+0x8cc>
   11790:	add	r9, r9, r4
   11794:	add	r6, r6, r4
   11798:	b	11754 <__assert_fail@plt+0x824>
   1179c:	ldr	sl, [sp, #32]
   117a0:	ldr	r8, [sp, #36]	; 0x24
   117a4:	ldr	r5, [sp, #40]	; 0x28
   117a8:	ldr	r3, [sl]
   117ac:	and	r2, r3, #48	; 0x30
   117b0:	cmp	r5, #30720	; 0x7800
   117b4:	cmpeq	r2, #0
   117b8:	beq	11644 <__assert_fail@plt+0x714>
   117bc:	b	11680 <__assert_fail@plt+0x750>
   117c0:	mov	r1, #10
   117c4:	mov	r0, fp
   117c8:	bl	10eb8 <__overflow@plt>
   117cc:	cmn	r0, #1
   117d0:	beq	118dc <__assert_fail@plt+0x9ac>
   117d4:	mov	r9, r4
   117d8:	b	11754 <__assert_fail@plt+0x824>
   117dc:	ldr	r3, [sp, #28]
   117e0:	mov	r2, r0
   117e4:	mov	r1, #1
   117e8:	ldr	r0, [sp, #16]
   117ec:	ldr	r3, [r3]
   117f0:	bl	10d44 <fwrite_unlocked@plt>
   117f4:	cmp	r7, r0
   117f8:	bls	117a8 <__assert_fail@plt+0x878>
   117fc:	bl	10e4c <__errno_location@plt>
   11800:	movw	r1, #35368	; 0x8a28
   11804:	movt	r1, #1
   11808:	b	116a4 <__assert_fail@plt+0x774>
   1180c:	ldr	r3, [fp, #20]
   11810:	ldr	r2, [fp, #24]
   11814:	cmp	r3, r2
   11818:	addcc	r1, r3, #1
   1181c:	movcc	r2, #10
   11820:	strcc	r1, [fp, #20]
   11824:	strbcc	r2, [r3]
   11828:	bcs	11858 <__assert_fail@plt+0x928>
   1182c:	ldr	r3, [sl]
   11830:	b	11690 <__assert_fail@plt+0x760>
   11834:	mov	r2, #5
   11838:	movw	r1, #35380	; 0x8a34
   1183c:	movt	r1, #1
   11840:	mov	r0, r8
   11844:	bl	10d68 <dcgettext@plt>
   11848:	mov	r2, r0
   1184c:	mov	r1, r8
   11850:	mov	r0, #1
   11854:	bl	10dd4 <error@plt>
   11858:	mov	r0, fp
   1185c:	mov	r1, #10
   11860:	bl	10eb8 <__overflow@plt>
   11864:	cmn	r0, #1
   11868:	bne	1182c <__assert_fail@plt+0x8fc>
   1186c:	b	117fc <__assert_fail@plt+0x8cc>
   11870:	mov	r2, #5
   11874:	movw	r1, #35240	; 0x89a8
   11878:	movt	r1, #1
   1187c:	mov	r0, #0
   11880:	bl	10d68 <dcgettext@plt>
   11884:	mov	r4, r0
   11888:	ldr	r0, [r7]
   1188c:	bl	16194 <__assert_fail@plt+0x5264>
   11890:	movw	r2, #35260	; 0x89bc
   11894:	movt	r2, #1
   11898:	str	r0, [sp]
   1189c:	mov	r3, r4
   118a0:	mov	r1, #0
   118a4:	mov	r0, #1
   118a8:	bl	10dd4 <error@plt>
   118ac:	bl	10e4c <__errno_location@plt>
   118b0:	ldr	r4, [r0]
   118b4:	mov	r1, #3
   118b8:	mov	r0, sl
   118bc:	ldr	r2, [sp, #44]	; 0x2c
   118c0:	bl	15fbc <__assert_fail@plt+0x508c>
   118c4:	mov	r3, r0
   118c8:	movw	r2, #35264	; 0x89c0
   118cc:	movt	r2, #1
   118d0:	mov	r0, #1
   118d4:	mov	r1, r4
   118d8:	bl	10dd4 <error@plt>
   118dc:	bl	10e4c <__errno_location@plt>
   118e0:	ldr	r5, [r0]
   118e4:	mov	r2, #5
   118e8:	movw	r1, #35368	; 0x8a28
   118ec:	movt	r1, #1
   118f0:	mov	r0, r4
   118f4:	bl	10d68 <dcgettext@plt>
   118f8:	mov	r2, r0
   118fc:	mov	r0, #1
   11900:	mov	r1, r5
   11904:	bl	10dd4 <error@plt>
   11908:	mov	r2, #5
   1190c:	movw	r1, #35308	; 0x89ec
   11910:	movt	r1, #1
   11914:	mov	r0, #0
   11918:	bl	10d68 <dcgettext@plt>
   1191c:	mov	r1, #0
   11920:	mov	r2, r0
   11924:	mov	r0, r1
   11928:	bl	10dd4 <error@plt>
   1192c:	b	11010 <__assert_fail@plt+0xe0>
   11930:	andeq	r8, r1, r4, lsl r1
   11934:	mov	fp, #0
   11938:	mov	lr, #0
   1193c:	pop	{r1}		; (ldr r1, [sp], #4)
   11940:	mov	r2, sp
   11944:	push	{r2}		; (str r2, [sp, #-4]!)
   11948:	push	{r0}		; (str r0, [sp, #-4]!)
   1194c:	ldr	ip, [pc, #16]	; 11964 <__assert_fail@plt+0xa34>
   11950:	push	{ip}		; (str ip, [sp, #-4]!)
   11954:	ldr	r0, [pc, #12]	; 11968 <__assert_fail@plt+0xa38>
   11958:	ldr	r3, [pc, #12]	; 1196c <__assert_fail@plt+0xa3c>
   1195c:	bl	10dec <__libc_start_main@plt>
   11960:	bl	10f24 <abort@plt>
   11964:	andeq	r7, r1, r0, lsl #31
   11968:	andeq	r0, r1, ip, lsr pc
   1196c:	andeq	r7, r1, r0, lsr #30
   11970:	ldr	r3, [pc, #20]	; 1198c <__assert_fail@plt+0xa5c>
   11974:	ldr	r2, [pc, #20]	; 11990 <__assert_fail@plt+0xa60>
   11978:	add	r3, pc, r3
   1197c:	ldr	r2, [r3, r2]
   11980:	cmp	r2, #0
   11984:	bxeq	lr
   11988:	b	10e04 <__gmon_start__@plt>
   1198c:	andeq	r8, r1, r0, lsl #13
   11990:	andeq	r0, r0, r0, ror #1
   11994:	ldr	r0, [pc, #24]	; 119b4 <__assert_fail@plt+0xa84>
   11998:	ldr	r3, [pc, #24]	; 119b8 <__assert_fail@plt+0xa88>
   1199c:	cmp	r3, r0
   119a0:	bxeq	lr
   119a4:	ldr	r3, [pc, #16]	; 119bc <__assert_fail@plt+0xa8c>
   119a8:	cmp	r3, #0
   119ac:	bxeq	lr
   119b0:	bx	r3
   119b4:	andeq	sl, r2, r4, lsr r1
   119b8:	andeq	sl, r2, r4, lsr r1
   119bc:	andeq	r0, r0, r0
   119c0:	ldr	r0, [pc, #36]	; 119ec <__assert_fail@plt+0xabc>
   119c4:	ldr	r1, [pc, #36]	; 119f0 <__assert_fail@plt+0xac0>
   119c8:	sub	r1, r1, r0
   119cc:	asr	r1, r1, #2
   119d0:	add	r1, r1, r1, lsr #31
   119d4:	asrs	r1, r1, #1
   119d8:	bxeq	lr
   119dc:	ldr	r3, [pc, #16]	; 119f4 <__assert_fail@plt+0xac4>
   119e0:	cmp	r3, #0
   119e4:	bxeq	lr
   119e8:	bx	r3
   119ec:	andeq	sl, r2, r4, lsr r1
   119f0:	andeq	sl, r2, r4, lsr r1
   119f4:	andeq	r0, r0, r0
   119f8:	push	{r4, lr}
   119fc:	ldr	r4, [pc, #24]	; 11a1c <__assert_fail@plt+0xaec>
   11a00:	ldrb	r3, [r4]
   11a04:	cmp	r3, #0
   11a08:	popne	{r4, pc}
   11a0c:	bl	11994 <__assert_fail@plt+0xa64>
   11a10:	mov	r3, #1
   11a14:	strb	r3, [r4]
   11a18:	pop	{r4, pc}
   11a1c:	andeq	sl, r2, ip, asr r1
   11a20:	b	119c0 <__assert_fail@plt+0xa90>
   11a24:	add	r0, r0, #2
   11a28:	movw	r3, #21846	; 0x5556
   11a2c:	movt	r3, #21845	; 0x5555
   11a30:	smull	r2, r3, r3, r0
   11a34:	sub	r0, r3, r0, asr #31
   11a38:	lsl	r0, r0, #2
   11a3c:	bx	lr
   11a40:	add	r0, r0, #4
   11a44:	movw	r2, #26215	; 0x6667
   11a48:	movt	r2, #26214	; 0x6666
   11a4c:	asr	r3, r0, #31
   11a50:	smull	r2, r0, r2, r0
   11a54:	rsb	r0, r3, r0, asr #1
   11a58:	lsl	r0, r0, #3
   11a5c:	bx	lr
   11a60:	sub	r3, r0, #48	; 0x30
   11a64:	sub	r0, r0, #65	; 0x41
   11a68:	cmp	r0, #21
   11a6c:	cmphi	r3, #9
   11a70:	movls	r0, #1
   11a74:	movhi	r0, #0
   11a78:	bx	lr
   11a7c:	sub	r3, r0, #48	; 0x30
   11a80:	sub	r0, r0, #65	; 0x41
   11a84:	cmp	r0, #5
   11a88:	cmphi	r3, #9
   11a8c:	movls	r0, #1
   11a90:	movhi	r0, #0
   11a94:	bx	lr
   11a98:	lsl	r0, r0, #1
   11a9c:	bx	lr
   11aa0:	cmp	r1, #0
   11aa4:	bxeq	lr
   11aa8:	sub	r1, r1, #1
   11aac:	add	r2, r2, #2
   11ab0:	str	r4, [sp, #-8]!
   11ab4:	add	r4, r0, r1
   11ab8:	movw	r1, #32680	; 0x7fa8
   11abc:	movt	r1, #1
   11ac0:	sub	r0, r0, #1
   11ac4:	str	lr, [sp, #4]
   11ac8:	ldrb	r3, [r0, #1]!
   11acc:	add	r2, r2, #2
   11ad0:	and	lr, r3, #15
   11ad4:	ldrb	ip, [r1, r3, lsr #4]
   11ad8:	cmp	r0, r4
   11adc:	ldrb	r3, [r1, lr]
   11ae0:	strb	ip, [r2, #-4]
   11ae4:	strb	r3, [r2, #-3]
   11ae8:	bne	11ac8 <__assert_fail@plt+0xb98>
   11aec:	ldr	r4, [sp]
   11af0:	add	sp, sp, #4
   11af4:	pop	{pc}		; (ldr pc, [sp], #4)
   11af8:	add	r0, r0, r0, lsl #2
   11afc:	add	r3, r0, #3
   11b00:	cmp	r0, #0
   11b04:	movlt	r0, r3
   11b08:	asr	r0, r0, #2
   11b0c:	bx	lr
   11b10:	sub	r0, r0, #48	; 0x30
   11b14:	cmp	r0, #1
   11b18:	movhi	r0, #0
   11b1c:	movls	r0, #1
   11b20:	bx	lr
   11b24:	lsl	r0, r0, #3
   11b28:	bx	lr
   11b2c:	cmp	r1, #0
   11b30:	bxeq	lr
   11b34:	sub	r1, r1, #1
   11b38:	add	ip, r2, #8
   11b3c:	push	{lr}		; (str lr, [sp, #-4]!)
   11b40:	add	lr, r0, r1
   11b44:	sub	r0, r0, #1
   11b48:	ldrb	r3, [r0, #1]!
   11b4c:	sub	r2, ip, #8
   11b50:	tst	r3, #128	; 0x80
   11b54:	lsl	r3, r3, #1
   11b58:	movne	r1, #49	; 0x31
   11b5c:	moveq	r1, #48	; 0x30
   11b60:	uxtb	r3, r3
   11b64:	strb	r1, [r2], #1
   11b68:	cmp	r2, ip
   11b6c:	bne	11b50 <__assert_fail@plt+0xc20>
   11b70:	cmp	r0, lr
   11b74:	add	ip, ip, #8
   11b78:	bne	11b48 <__assert_fail@plt+0xc18>
   11b7c:	pop	{pc}		; (ldr pc, [sp], #4)
   11b80:	cmp	r1, #0
   11b84:	bxeq	lr
   11b88:	sub	r1, r1, #1
   11b8c:	add	ip, r2, #8
   11b90:	push	{lr}		; (str lr, [sp, #-4]!)
   11b94:	add	lr, r0, r1
   11b98:	sub	r0, r0, #1
   11b9c:	ldrb	r2, [r0, #1]!
   11ba0:	sub	r3, ip, #8
   11ba4:	tst	r2, #1
   11ba8:	lsr	r2, r2, #1
   11bac:	movne	r1, #49	; 0x31
   11bb0:	moveq	r1, #48	; 0x30
   11bb4:	strb	r1, [r3], #1
   11bb8:	cmp	r3, ip
   11bbc:	bne	11ba4 <__assert_fail@plt+0xc74>
   11bc0:	cmp	r0, lr
   11bc4:	add	ip, ip, #8
   11bc8:	bne	11b9c <__assert_fail@plt+0xc6c>
   11bcc:	pop	{pc}		; (ldr pc, [sp], #4)
   11bd0:	cmp	r0, #95	; 0x5f
   11bd4:	cmpne	r0, #45	; 0x2d
   11bd8:	moveq	r2, #1
   11bdc:	movne	r2, #0
   11be0:	beq	11bf4 <__assert_fail@plt+0xcc4>
   11be4:	and	r3, r0, #251	; 0xfb
   11be8:	cmp	r3, #43	; 0x2b
   11bec:	beq	11bf4 <__assert_fail@plt+0xcc4>
   11bf0:	b	13790 <__assert_fail@plt+0x2860>
   11bf4:	mov	r0, r2
   11bf8:	bx	lr
   11bfc:	strd	r4, [sp, #-16]!
   11c00:	mov	r5, r3
   11c04:	mov	r4, r2
   11c08:	str	r6, [sp, #8]
   11c0c:	str	lr, [sp, #12]
   11c10:	bl	134e4 <__assert_fail@plt+0x25b4>
   11c14:	cmp	r5, #0
   11c18:	beq	11c50 <__assert_fail@plt+0xd20>
   11c1c:	sub	r2, r5, #1
   11c20:	sub	r1, r4, #1
   11c24:	add	r2, r4, r2
   11c28:	mov	ip, #95	; 0x5f
   11c2c:	mov	r0, #45	; 0x2d
   11c30:	ldrb	r3, [r1, #1]!
   11c34:	cmp	r3, #43	; 0x2b
   11c38:	strbeq	r0, [r1]
   11c3c:	beq	11c48 <__assert_fail@plt+0xd18>
   11c40:	cmp	r3, #47	; 0x2f
   11c44:	strbeq	ip, [r1]
   11c48:	cmp	r1, r2
   11c4c:	bne	11c30 <__assert_fail@plt+0xd00>
   11c50:	ldrd	r4, [sp]
   11c54:	ldr	r6, [sp, #8]
   11c58:	add	sp, sp, #12
   11c5c:	pop	{pc}		; (ldr pc, [sp], #4)
   11c60:	movw	r3, #4200	; 0x1068
   11c64:	str	r4, [sp, #-8]!
   11c68:	mov	r4, r0
   11c6c:	mov	r0, r3
   11c70:	str	lr, [sp, #4]
   11c74:	str	r3, [r4, #20]
   11c78:	bl	16788 <__assert_fail@plt+0x5858>
   11c7c:	mov	r3, #0
   11c80:	mov	r2, #1
   11c84:	strd	r2, [r4]
   11c88:	str	r0, [r4, #16]
   11c8c:	ldr	r4, [sp]
   11c90:	add	sp, sp, #4
   11c94:	pop	{pc}		; (ldr pc, [sp], #4)
   11c98:	movw	r3, #4200	; 0x1068
   11c9c:	str	r4, [sp, #-8]!
   11ca0:	mov	r4, r0
   11ca4:	mov	r0, r3
   11ca8:	str	lr, [sp, #4]
   11cac:	str	r3, [r4, #20]
   11cb0:	bl	16788 <__assert_fail@plt+0x5858>
   11cb4:	mov	r3, #0
   11cb8:	str	r3, [r4]
   11cbc:	strb	r3, [r4, #4]
   11cc0:	str	r0, [r4, #16]
   11cc4:	ldr	r4, [sp]
   11cc8:	add	sp, sp, #4
   11ccc:	pop	{pc}		; (ldr pc, [sp], #4)
   11cd0:	movw	r3, #4200	; 0x1068
   11cd4:	str	r4, [sp, #-8]!
   11cd8:	mov	r4, r0
   11cdc:	mov	r0, r3
   11ce0:	str	lr, [sp, #4]
   11ce4:	str	r3, [r4, #20]
   11ce8:	bl	16788 <__assert_fail@plt+0x5858>
   11cec:	mov	r3, #0
   11cf0:	mov	r2, #1
   11cf4:	str	r2, [r4]
   11cf8:	strb	r3, [r4, #5]
   11cfc:	str	r0, [r4, #16]
   11d00:	ldr	r4, [sp]
   11d04:	add	sp, sp, #4
   11d08:	pop	{pc}		; (ldr pc, [sp], #4)
   11d0c:	cmp	r0, #90	; 0x5a
   11d10:	bhi	11d54 <__assert_fail@plt+0xe24>
   11d14:	cmp	r0, #65	; 0x41
   11d18:	bcs	11d60 <__assert_fail@plt+0xe30>
   11d1c:	sub	r3, r0, #48	; 0x30
   11d20:	cmp	r3, #9
   11d24:	bls	11d60 <__assert_fail@plt+0xe30>
   11d28:	mov	r1, r0
   11d2c:	movw	r0, #33268	; 0x81f4
   11d30:	movt	r0, #1
   11d34:	str	r4, [sp, #-8]!
   11d38:	str	lr, [sp, #4]
   11d3c:	bl	10e40 <strchr@plt>
   11d40:	adds	r0, r0, #0
   11d44:	ldr	r4, [sp]
   11d48:	add	sp, sp, #4
   11d4c:	movne	r0, #1
   11d50:	pop	{pc}		; (ldr pc, [sp], #4)
   11d54:	sub	r3, r0, #97	; 0x61
   11d58:	cmp	r3, #25
   11d5c:	bhi	11d28 <__assert_fail@plt+0xdf8>
   11d60:	mov	r0, #1
   11d64:	bx	lr
   11d68:	str	r4, [sp, #-8]!
   11d6c:	mov	r4, r0
   11d70:	add	r0, r0, #4
   11d74:	str	lr, [sp, #4]
   11d78:	sub	sp, sp, #8
   11d7c:	ldr	ip, [sp, #16]
   11d80:	str	ip, [sp]
   11d84:	bl	13048 <__assert_fail@plt+0x2118>
   11d88:	ldr	r3, [r4, #4]
   11d8c:	str	r3, [r4]
   11d90:	add	sp, sp, #8
   11d94:	ldr	r4, [sp]
   11d98:	add	sp, sp, #4
   11d9c:	pop	{pc}		; (ldr pc, [sp], #4)
   11da0:	str	r4, [sp, #-8]!
   11da4:	mov	r4, r0
   11da8:	add	r0, r0, #4
   11dac:	str	lr, [sp, #4]
   11db0:	bl	1303c <__assert_fail@plt+0x210c>
   11db4:	movw	r3, #4200	; 0x1068
   11db8:	mov	r0, r3
   11dbc:	str	r3, [r4, #20]
   11dc0:	bl	16788 <__assert_fail@plt+0x5858>
   11dc4:	str	r0, [r4, #16]
   11dc8:	ldr	r4, [sp]
   11dcc:	add	sp, sp, #4
   11dd0:	pop	{pc}		; (ldr pc, [sp], #4)
   11dd4:	add	r0, r0, #4
   11dd8:	b	1303c <__assert_fail@plt+0x210c>
   11ddc:	str	r4, [sp, #-8]!
   11de0:	mov	r4, r0
   11de4:	add	r0, r0, #4
   11de8:	str	lr, [sp, #4]
   11dec:	sub	sp, sp, #8
   11df0:	ldr	ip, [sp, #16]
   11df4:	str	ip, [sp]
   11df8:	bl	137b4 <__assert_fail@plt+0x2884>
   11dfc:	ldr	r3, [r4, #4]
   11e00:	str	r3, [r4]
   11e04:	add	sp, sp, #8
   11e08:	ldr	r4, [sp]
   11e0c:	add	sp, sp, #4
   11e10:	pop	{pc}		; (ldr pc, [sp], #4)
   11e14:	str	r4, [sp, #-8]!
   11e18:	mov	r4, r0
   11e1c:	add	r0, r0, #4
   11e20:	str	lr, [sp, #4]
   11e24:	bl	137a8 <__assert_fail@plt+0x2878>
   11e28:	movw	r3, #4200	; 0x1068
   11e2c:	mov	r0, r3
   11e30:	str	r3, [r4, #20]
   11e34:	bl	16788 <__assert_fail@plt+0x5858>
   11e38:	str	r0, [r4, #16]
   11e3c:	ldr	r4, [sp]
   11e40:	add	sp, sp, #4
   11e44:	pop	{pc}		; (ldr pc, [sp], #4)
   11e48:	add	r0, r0, #4
   11e4c:	b	137a8 <__assert_fail@plt+0x2878>
   11e50:	str	r4, [sp, #-8]!
   11e54:	mov	r4, r1
   11e58:	str	lr, [sp, #4]
   11e5c:	bl	13c60 <__assert_fail@plt+0x2d30>
   11e60:	cmp	r0, #0
   11e64:	beq	11ed8 <__assert_fail@plt+0xfa8>
   11e68:	movw	r1, #33292	; 0x820c
   11e6c:	movt	r1, #1
   11e70:	mov	r0, r4
   11e74:	bl	10ce4 <strcmp@plt>
   11e78:	mov	r5, r0
   11e7c:	bl	10e4c <__errno_location@plt>
   11e80:	cmp	r5, #0
   11e84:	ldr	r6, [r0]
   11e88:	bne	11eb0 <__assert_fail@plt+0xf80>
   11e8c:	mov	r2, #5
   11e90:	mov	r0, r5
   11e94:	movw	r1, #33296	; 0x8210
   11e98:	movt	r1, #1
   11e9c:	bl	10d68 <dcgettext@plt>
   11ea0:	mov	r2, r0
   11ea4:	mov	r1, r6
   11ea8:	mov	r0, #1
   11eac:	bl	10dd4 <error@plt>
   11eb0:	mov	r2, r4
   11eb4:	mov	r1, #3
   11eb8:	mov	r0, #0
   11ebc:	bl	15fbc <__assert_fail@plt+0x508c>
   11ec0:	mov	r3, r0
   11ec4:	movw	r2, #35264	; 0x89c0
   11ec8:	movt	r2, #1
   11ecc:	mov	r1, r6
   11ed0:	mov	r0, #1
   11ed4:	bl	10dd4 <error@plt>
   11ed8:	bl	10e28 <exit@plt>
   11edc:	strd	r4, [sp, #-12]!
   11ee0:	mov	ip, #0
   11ee4:	cmp	r2, #0
   11ee8:	ldr	r4, [sp, #12]
   11eec:	addne	r2, r1, r2
   11ef0:	str	lr, [sp, #8]
   11ef4:	str	ip, [r4]
   11ef8:	beq	11f80 <__assert_fail@plt+0x1050>
   11efc:	ldrb	ip, [r1], #1
   11f00:	cmp	ip, #10
   11f04:	sub	lr, ip, #48	; 0x30
   11f08:	beq	11f68 <__assert_fail@plt+0x1038>
   11f0c:	cmp	lr, #9
   11f10:	sub	r5, ip, #65	; 0x41
   11f14:	sub	ip, ip, #55	; 0x37
   11f18:	movls	ip, lr
   11f1c:	bls	11f28 <__assert_fail@plt+0xff8>
   11f20:	cmp	r5, #5
   11f24:	bhi	11f94 <__assert_fail@plt+0x1064>
   11f28:	ldrb	lr, [r0, #5]
   11f2c:	uxtb	ip, ip
   11f30:	mov	r5, r3
   11f34:	cmp	lr, #0
   11f38:	strbeq	ip, [r0, #4]
   11f3c:	beq	11f60 <__assert_fail@plt+0x1030>
   11f40:	ldr	lr, [r4]
   11f44:	ldrb	r3, [r0, #4]
   11f48:	add	lr, lr, #1
   11f4c:	add	ip, ip, r3, lsl #4
   11f50:	str	lr, [r4]
   11f54:	ldrb	lr, [r0, #5]
   11f58:	strb	ip, [r5], #1
   11f5c:	mov	r3, r5
   11f60:	eor	lr, lr, #1
   11f64:	strb	lr, [r0, #5]
   11f68:	cmp	r1, r2
   11f6c:	bne	11efc <__assert_fail@plt+0xfcc>
   11f70:	ldrd	r4, [sp]
   11f74:	add	sp, sp, #8
   11f78:	mov	r0, #1
   11f7c:	pop	{pc}		; (ldr pc, [sp], #4)
   11f80:	ldrb	r0, [r0, #5]
   11f84:	ldrd	r4, [sp]
   11f88:	add	sp, sp, #8
   11f8c:	eor	r0, r0, #1
   11f90:	pop	{pc}		; (ldr pc, [sp], #4)
   11f94:	ldrd	r4, [sp]
   11f98:	add	sp, sp, #8
   11f9c:	mov	r0, #0
   11fa0:	pop	{pc}		; (ldr pc, [sp], #4)
   11fa4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11fa8:	cmp	r2, #0
   11fac:	strd	r6, [sp, #8]
   11fb0:	strd	r8, [sp, #16]
   11fb4:	strd	sl, [sp, #24]
   11fb8:	str	lr, [sp, #32]
   11fbc:	sub	sp, sp, #28
   11fc0:	mov	lr, #0
   11fc4:	ldr	ip, [sp, #64]	; 0x40
   11fc8:	str	lr, [ip]
   11fcc:	bne	12000 <__assert_fail@plt+0x10d0>
   11fd0:	ldr	r3, [r0, #4]
   11fd4:	cmp	r3, lr
   11fd8:	movgt	r3, #0
   11fdc:	movle	r3, #1
   11fe0:	mov	r0, r3
   11fe4:	add	sp, sp, #28
   11fe8:	ldrd	r4, [sp]
   11fec:	ldrd	r6, [sp, #8]
   11ff0:	ldrd	r8, [sp, #16]
   11ff4:	ldrd	sl, [sp, #24]
   11ff8:	add	sp, sp, #32
   11ffc:	pop	{pc}		; (ldr pc, [sp], #4)
   12000:	movw	r7, #24301	; 0x5eed
   12004:	movt	r7, #9
   12008:	str	lr, [sp, #20]
   1200c:	movw	r6, #33969	; 0x84b1
   12010:	movt	r6, #796	; 0x31c
   12014:	movw	lr, #32680	; 0x7fa8
   12018:	movt	lr, #1
   1201c:	add	r2, r1, r2
   12020:	b	1202c <__assert_fail@plt+0x10fc>
   12024:	cmp	r1, r2
   12028:	beq	12118 <__assert_fail@plt+0x11e8>
   1202c:	ldrb	r4, [r1], #1
   12030:	cmp	r4, #10
   12034:	add	r9, lr, r4
   12038:	sub	r5, r4, #33	; 0x21
   1203c:	beq	12024 <__assert_fail@plt+0x10f4>
   12040:	cmp	r5, #92	; 0x5c
   12044:	bhi	12128 <__assert_fail@plt+0x11f8>
   12048:	ldrsb	r5, [r9, #-17]	; 0xffffffef
   1204c:	cmp	r5, #0
   12050:	blt	12128 <__assert_fail@plt+0x11f8>
   12054:	ldr	r4, [r0, #4]
   12058:	add	r9, r4, #1
   1205c:	add	r4, r0, r4
   12060:	cmp	r9, #5
   12064:	str	r9, [r0, #4]
   12068:	strb	r5, [r4, #8]
   1206c:	bne	12024 <__assert_fail@plt+0x10f4>
   12070:	ldrb	sl, [r0, #10]
   12074:	movw	r8, #7225	; 0x1c39
   12078:	ldrb	fp, [r0, #9]
   1207c:	ldrb	r9, [r0, #11]
   12080:	mul	sl, r8, sl
   12084:	mov	r8, #85	; 0x55
   12088:	ldrb	r4, [r0, #8]
   1208c:	mla	sl, r7, fp, sl
   12090:	ldrb	fp, [r0, #12]
   12094:	smlabb	r9, r8, r9, sl
   12098:	umull	r4, r5, r4, r6
   1209c:	add	r9, r9, fp
   120a0:	adds	sl, r4, r9
   120a4:	adc	fp, r5, r9, asr #31
   120a8:	mov	r4, sl
   120ac:	lsr	r9, sl, #24
   120b0:	mov	r5, fp
   120b4:	lsr	fp, sl, #16
   120b8:	orr	r9, r9, r5, lsl #8
   120bc:	strd	r4, [sp, #8]
   120c0:	lsr	sl, sl, #8
   120c4:	ldr	r5, [sp, #12]
   120c8:	bic	r4, r9, #255	; 0xff
   120cc:	str	r4, [sp]
   120d0:	asr	r4, r5, #24
   120d4:	str	r4, [sp, #4]
   120d8:	ldrd	r4, [sp]
   120dc:	orrs	r4, r4, r5
   120e0:	bne	12128 <__assert_fail@plt+0x11f8>
   120e4:	ldrb	r4, [sp, #8]
   120e8:	cmp	r1, r2
   120ec:	add	r3, r3, #4
   120f0:	strb	r9, [r3, #-4]
   120f4:	ldr	r5, [ip]
   120f8:	strb	fp, [r3, #-3]
   120fc:	strb	sl, [r3, #-2]
   12100:	strb	r4, [r3, #-1]
   12104:	ldr	r4, [sp, #20]
   12108:	add	r5, r5, #4
   1210c:	str	r5, [ip]
   12110:	str	r4, [r0, #4]
   12114:	bne	1202c <__assert_fail@plt+0x10fc>
   12118:	ldr	r2, [r0, #4]
   1211c:	mov	r3, #1
   12120:	str	r2, [r0]
   12124:	b	11fe0 <__assert_fail@plt+0x10b0>
   12128:	mov	r3, #0
   1212c:	b	11fe0 <__assert_fail@plt+0x10b0>
   12130:	strd	r4, [sp, #-16]!
   12134:	cmp	r2, #0
   12138:	ldr	r5, [sp, #16]
   1213c:	addne	r2, r1, r2
   12140:	str	r6, [sp, #8]
   12144:	mov	r6, #0
   12148:	str	lr, [sp, #12]
   1214c:	str	r6, [r5]
   12150:	beq	121d0 <__assert_fail@plt+0x12a0>
   12154:	ldrb	ip, [r1], #1
   12158:	cmp	ip, #10
   1215c:	sub	lr, ip, #48	; 0x30
   12160:	beq	121b4 <__assert_fail@plt+0x1284>
   12164:	cmp	lr, #1
   12168:	bhi	121ec <__assert_fail@plt+0x12bc>
   1216c:	ldrb	lr, [r0, #4]
   12170:	sub	ip, ip, #49	; 0x31
   12174:	clz	ip, ip
   12178:	ldr	r4, [r0]
   1217c:	lsr	ip, ip, #5
   12180:	orr	ip, lr, ip, lsl r4
   12184:	add	lr, r4, #1
   12188:	cmp	lr, #8
   1218c:	uxtb	ip, ip
   12190:	str	lr, [r0]
   12194:	strb	ip, [r0, #4]
   12198:	bne	121b4 <__assert_fail@plt+0x1284>
   1219c:	strb	r6, [r0, #4]
   121a0:	ldr	lr, [r5]
   121a4:	strb	ip, [r3], #1
   121a8:	add	ip, lr, #1
   121ac:	str	ip, [r5]
   121b0:	str	r6, [r0]
   121b4:	cmp	r2, r1
   121b8:	bne	12154 <__assert_fail@plt+0x1224>
   121bc:	ldrd	r4, [sp]
   121c0:	mov	r0, #1
   121c4:	ldr	r6, [sp, #8]
   121c8:	add	sp, sp, #12
   121cc:	pop	{pc}		; (ldr pc, [sp], #4)
   121d0:	ldr	r0, [r0]
   121d4:	ldrd	r4, [sp]
   121d8:	ldr	r6, [sp, #8]
   121dc:	add	sp, sp, #12
   121e0:	clz	r0, r0
   121e4:	lsr	r0, r0, #5
   121e8:	pop	{pc}		; (ldr pc, [sp], #4)
   121ec:	ldrd	r4, [sp]
   121f0:	mov	r0, #0
   121f4:	ldr	r6, [sp, #8]
   121f8:	add	sp, sp, #12
   121fc:	pop	{pc}		; (ldr pc, [sp], #4)
   12200:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12204:	mov	ip, #0
   12208:	cmp	r2, #0
   1220c:	ldr	r5, [sp, #24]
   12210:	addne	r2, r1, r2
   12214:	strd	r6, [sp, #8]
   12218:	movne	r7, #7
   1221c:	str	r8, [sp, #16]
   12220:	str	lr, [sp, #20]
   12224:	str	ip, [r5]
   12228:	bne	12244 <__assert_fail@plt+0x1314>
   1222c:	b	122d4 <__assert_fail@plt+0x13a4>
   12230:	orr	ip, lr, ip, lsl #7
   12234:	str	r7, [r0]
   12238:	strb	ip, [r0, #4]
   1223c:	cmp	r2, r1
   12240:	beq	122bc <__assert_fail@plt+0x138c>
   12244:	ldrb	ip, [r1], #1
   12248:	cmp	ip, #10
   1224c:	sub	lr, ip, #48	; 0x30
   12250:	beq	1223c <__assert_fail@plt+0x130c>
   12254:	cmp	lr, #1
   12258:	mov	r8, r3
   1225c:	bhi	122e4 <__assert_fail@plt+0x13b4>
   12260:	ldr	r6, [r0]
   12264:	sub	ip, ip, #49	; 0x31
   12268:	clz	ip, ip
   1226c:	lsr	ip, ip, #5
   12270:	ldrsb	lr, [r0, #4]
   12274:	cmp	r6, #0
   12278:	sub	r4, r6, #1
   1227c:	beq	12230 <__assert_fail@plt+0x1300>
   12280:	orr	ip, lr, ip, lsl r4
   12284:	cmp	r4, #0
   12288:	str	r4, [r0]
   1228c:	uxtb	ip, ip
   12290:	strb	ip, [r0, #4]
   12294:	bne	1223c <__assert_fail@plt+0x130c>
   12298:	strb	r4, [r0, #4]
   1229c:	cmp	r2, r1
   122a0:	ldr	lr, [r5]
   122a4:	strb	ip, [r8], #1
   122a8:	mov	r3, r8
   122ac:	add	ip, lr, #1
   122b0:	str	ip, [r5]
   122b4:	str	r4, [r0]
   122b8:	bne	12244 <__assert_fail@plt+0x1314>
   122bc:	mov	r0, #1
   122c0:	ldrd	r4, [sp]
   122c4:	ldrd	r6, [sp, #8]
   122c8:	ldr	r8, [sp, #16]
   122cc:	add	sp, sp, #20
   122d0:	pop	{pc}		; (ldr pc, [sp], #4)
   122d4:	ldr	r0, [r0]
   122d8:	clz	r0, r0
   122dc:	lsr	r0, r0, #5
   122e0:	b	122c0 <__assert_fail@plt+0x1390>
   122e4:	mov	r0, #0
   122e8:	b	122c0 <__assert_fail@plt+0x1390>
   122ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   122f0:	cmp	r1, #0
   122f4:	strd	r6, [sp, #8]
   122f8:	strd	r8, [sp, #16]
   122fc:	strd	sl, [sp, #24]
   12300:	str	lr, [sp, #32]
   12304:	sub	sp, sp, #36	; 0x24
   12308:	str	r2, [sp, #4]
   1230c:	str	r3, [sp, #20]
   12310:	beq	12438 <__assert_fail@plt+0x1508>
   12314:	mov	fp, r0
   12318:	movw	r3, #32680	; 0x7fa8
   1231c:	movt	r3, #1
   12320:	ldrb	r2, [fp], r1
   12324:	add	r5, r0, #1
   12328:	mov	sl, #0
   1232c:	str	r3, [sp, #12]
   12330:	mov	r3, #1
   12334:	strb	r2, [sp, #28]
   12338:	cmp	fp, r5
   1233c:	beq	12430 <__assert_fail@plt+0x1500>
   12340:	ldrb	r1, [r5], #1
   12344:	add	r2, sp, #32
   12348:	add	r2, r2, r3
   1234c:	add	r3, r3, #1
   12350:	cmp	r3, #4
   12354:	strb	r1, [r2, #-4]
   12358:	bne	12338 <__assert_fail@plt+0x1408>
   1235c:	ldrb	r0, [sp, #28]
   12360:	mov	r1, #0
   12364:	add	r4, sl, #4
   12368:	str	r5, [sp, #16]
   1236c:	ldrb	lr, [sp, #29]
   12370:	ldrb	ip, [sp, #30]
   12374:	lsl	r6, r0, #24
   12378:	lsr	r7, r0, #8
   1237c:	ldrb	r0, [sp, #31]
   12380:	lsl	lr, lr, #16
   12384:	ldr	r5, [sp, #20]
   12388:	adds	r2, r6, lr
   1238c:	lsl	ip, ip, #8
   12390:	adc	r3, r7, lr, asr #31
   12394:	ldr	lr, [sp, #4]
   12398:	adds	r8, r2, ip
   1239c:	adc	r9, r3, ip, asr #31
   123a0:	adds	r7, r0, r8
   123a4:	adc	r6, r1, r9
   123a8:	sub	lr, lr, sl
   123ac:	str	lr, [sp, #8]
   123b0:	mov	r2, #85	; 0x55
   123b4:	mov	r3, #0
   123b8:	mov	r0, r7
   123bc:	mov	r1, r6
   123c0:	bl	17cd8 <__assert_fail@plt+0x6da8>
   123c4:	cmp	r5, r4
   123c8:	mov	r9, r0
   123cc:	mov	r8, r1
   123d0:	ble	123fc <__assert_fail@plt+0x14cc>
   123d4:	mov	r0, r7
   123d8:	mov	r1, r6
   123dc:	mov	r2, #85	; 0x55
   123e0:	mov	r3, #0
   123e4:	bl	17cd8 <__assert_fail@plt+0x6da8>
   123e8:	ldr	r3, [sp, #12]
   123ec:	add	r2, r3, r2
   123f0:	ldrb	r3, [r2, #112]	; 0x70
   123f4:	ldr	r2, [sp, #8]
   123f8:	strb	r3, [r2, r4]
   123fc:	cmp	r4, sl
   12400:	mov	r7, r9
   12404:	sub	r4, r4, #1
   12408:	mov	r6, r8
   1240c:	bne	123b0 <__assert_fail@plt+0x1480>
   12410:	ldr	r3, [sp, #4]
   12414:	add	sl, sl, #5
   12418:	ldr	r5, [sp, #16]
   1241c:	add	r3, r3, #5
   12420:	cmp	fp, r5
   12424:	str	r3, [sp, #4]
   12428:	mov	r3, #0
   1242c:	bne	12340 <__assert_fail@plt+0x1410>
   12430:	cmp	r3, #0
   12434:	bne	12454 <__assert_fail@plt+0x1524>
   12438:	add	sp, sp, #36	; 0x24
   1243c:	ldrd	r4, [sp]
   12440:	ldrd	r6, [sp, #8]
   12444:	ldrd	r8, [sp, #16]
   12448:	ldrd	sl, [sp, #24]
   1244c:	add	sp, sp, #32
   12450:	pop	{pc}		; (ldr pc, [sp], #4)
   12454:	mov	r2, #5
   12458:	movw	r1, #33320	; 0x8228
   1245c:	movt	r1, #1
   12460:	mov	r0, #0
   12464:	bl	10d68 <dcgettext@plt>
   12468:	mov	r2, r0
   1246c:	mov	r1, #0
   12470:	mov	r0, #1
   12474:	bl	10dd4 <error@plt>
   12478:	strd	r4, [sp, #-16]!
   1247c:	mov	r5, r3
   12480:	mov	r4, r2
   12484:	str	r6, [sp, #8]
   12488:	str	lr, [sp, #12]
   1248c:	bl	12d40 <__assert_fail@plt+0x1e10>
   12490:	cmp	r5, #0
   12494:	beq	124e4 <__assert_fail@plt+0x15b4>
   12498:	ldrb	r1, [r4]
   1249c:	sub	r3, r1, #50	; 0x32
   124a0:	cmp	r3, #40	; 0x28
   124a4:	bhi	124f4 <__assert_fail@plt+0x15c4>
   124a8:	sub	r0, r5, #1
   124ac:	movw	ip, #32680	; 0x7fa8
   124b0:	movt	ip, #1
   124b4:	mov	r2, r4
   124b8:	add	r0, r4, r0
   124bc:	b	124d0 <__assert_fail@plt+0x15a0>
   124c0:	ldrb	r1, [r2, #1]!
   124c4:	sub	r3, r1, #50	; 0x32
   124c8:	cmp	r3, #40	; 0x28
   124cc:	bhi	124f4 <__assert_fail@plt+0x15c4>
   124d0:	add	r1, ip, r1
   124d4:	cmp	r2, r0
   124d8:	ldrb	r3, [r1, #170]	; 0xaa
   124dc:	strb	r3, [r2]
   124e0:	bne	124c0 <__assert_fail@plt+0x1590>
   124e4:	ldrd	r4, [sp]
   124e8:	ldr	r6, [sp, #8]
   124ec:	add	sp, sp, #12
   124f0:	pop	{pc}		; (ldr pc, [sp], #4)
   124f4:	movw	r1, #33376	; 0x8260
   124f8:	movt	r1, #1
   124fc:	ldr	r3, [pc, #12]	; 12510 <__assert_fail@plt+0x15e0>
   12500:	movw	r0, #33392	; 0x8270
   12504:	movt	r0, #1
   12508:	mov	r2, #452	; 0x1c4
   1250c:	bl	10f30 <__assert_fail@plt>
   12510:	andeq	r8, r1, r0, ror r0
   12514:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12518:	mov	r4, r0
   1251c:	mov	r5, r2
   12520:	strd	r6, [sp, #8]
   12524:	mov	r7, r3
   12528:	ldr	r3, [r0, #20]
   1252c:	str	r8, [sp, #16]
   12530:	mov	r8, r1
   12534:	str	lr, [sp, #20]
   12538:	sub	sp, sp, #8
   1253c:	ldr	r0, [r0, #16]
   12540:	cmp	r2, r3
   12544:	ldr	r6, [sp, #32]
   12548:	bgt	125fc <__assert_fail@plt+0x16cc>
   1254c:	mov	r1, r8
   12550:	mov	r2, r5
   12554:	bl	10d2c <memcpy@plt>
   12558:	cmp	r5, #0
   1255c:	ldr	r1, [r4, #16]
   12560:	beq	125b8 <__assert_fail@plt+0x1688>
   12564:	ldrb	r3, [r1]
   12568:	and	r2, r3, #251	; 0xfb
   1256c:	cmp	r2, #43	; 0x2b
   12570:	beq	125ec <__assert_fail@plt+0x16bc>
   12574:	sub	r0, r5, #1
   12578:	mov	lr, #47	; 0x2f
   1257c:	add	r0, r1, r0
   12580:	mov	ip, #43	; 0x2b
   12584:	b	12598 <__assert_fail@plt+0x1668>
   12588:	ldrb	r3, [r1, #1]!
   1258c:	and	r2, r3, #251	; 0xfb
   12590:	cmp	r2, #43	; 0x2b
   12594:	beq	125ec <__assert_fail@plt+0x16bc>
   12598:	cmp	r3, #45	; 0x2d
   1259c:	strbeq	ip, [r1]
   125a0:	beq	125ac <__assert_fail@plt+0x167c>
   125a4:	cmp	r3, #95	; 0x5f
   125a8:	strbeq	lr, [r1]
   125ac:	cmp	r0, r1
   125b0:	bne	12588 <__assert_fail@plt+0x1658>
   125b4:	ldr	r1, [r4, #16]
   125b8:	mov	r3, r7
   125bc:	mov	r2, r5
   125c0:	str	r6, [sp]
   125c4:	add	r0, r4, #4
   125c8:	bl	137b4 <__assert_fail@plt+0x2884>
   125cc:	ldr	r3, [r4, #4]
   125d0:	str	r3, [r4]
   125d4:	add	sp, sp, #8
   125d8:	ldrd	r4, [sp]
   125dc:	ldrd	r6, [sp, #8]
   125e0:	ldr	r8, [sp, #16]
   125e4:	add	sp, sp, #20
   125e8:	pop	{pc}		; (ldr pc, [sp], #4)
   125ec:	mov	r3, #0
   125f0:	mov	r0, r3
   125f4:	str	r3, [r6]
   125f8:	b	125d4 <__assert_fail@plt+0x16a4>
   125fc:	lsl	r3, r2, #1
   12600:	mov	r2, #1
   12604:	mov	r1, r3
   12608:	str	r3, [r4, #20]
   1260c:	bl	16824 <__assert_fail@plt+0x58f4>
   12610:	str	r0, [r4, #16]
   12614:	b	1254c <__assert_fail@plt+0x161c>
   12618:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1261c:	mov	r4, r1
   12620:	mov	r5, r0
   12624:	ldr	r1, [r0, #16]
   12628:	strd	r6, [sp, #8]
   1262c:	mov	r6, r2
   12630:	ldr	r2, [r0, #20]
   12634:	strd	r8, [sp, #16]
   12638:	str	lr, [sp, #24]
   1263c:	sub	sp, sp, #20
   12640:	ldr	r7, [sp, #48]	; 0x30
   12644:	cmp	r6, r2
   12648:	bgt	126c0 <__assert_fail@plt+0x1790>
   1264c:	cmp	r6, #0
   12650:	beq	12690 <__assert_fail@plt+0x1760>
   12654:	movw	r8, #32680	; 0x7fa8
   12658:	movt	r8, #1
   1265c:	sub	r0, r4, #1
   12660:	add	r9, r1, r6
   12664:	ldrb	r2, [r0, #1]!
   12668:	sub	lr, r2, #48	; 0x30
   1266c:	sub	ip, r2, #65	; 0x41
   12670:	cmp	ip, #21
   12674:	cmphi	lr, #9
   12678:	add	r4, r8, r2
   1267c:	ldrbls	r2, [r4, #216]	; 0xd8
   12680:	strb	r2, [r1], #1
   12684:	cmp	r9, r1
   12688:	bne	12664 <__assert_fail@plt+0x1734>
   1268c:	ldr	r1, [r5, #16]
   12690:	mov	r2, r6
   12694:	add	r0, r5, #4
   12698:	str	r7, [sp]
   1269c:	bl	13048 <__assert_fail@plt+0x2118>
   126a0:	ldr	r3, [r5, #4]
   126a4:	str	r3, [r5]
   126a8:	add	sp, sp, #20
   126ac:	ldrd	r4, [sp]
   126b0:	ldrd	r6, [sp, #8]
   126b4:	ldrd	r8, [sp, #16]
   126b8:	add	sp, sp, #24
   126bc:	pop	{pc}		; (ldr pc, [sp], #4)
   126c0:	lsl	ip, r6, #1
   126c4:	mov	r0, r1
   126c8:	mov	r2, #1
   126cc:	str	r3, [sp, #12]
   126d0:	mov	r1, ip
   126d4:	str	ip, [r5, #20]
   126d8:	bl	16824 <__assert_fail@plt+0x58f4>
   126dc:	mov	r1, r0
   126e0:	str	r0, [r5, #16]
   126e4:	ldr	r3, [sp, #12]
   126e8:	b	1264c <__assert_fail@plt+0x171c>
   126ec:	subs	r6, r0, #0
   126f0:	str	r7, [sp, #-8]!
   126f4:	str	lr, [sp, #4]
   126f8:	sub	sp, sp, #56	; 0x38
   126fc:	beq	12744 <__assert_fail@plt+0x1814>
   12700:	movw	r3, #41288	; 0xa148
   12704:	movt	r3, #2
   12708:	ldr	r4, [r3]
   1270c:	mov	r2, #5
   12710:	movw	r1, #33428	; 0x8294
   12714:	movt	r1, #1
   12718:	mov	r0, #0
   1271c:	bl	10d68 <dcgettext@plt>
   12720:	movw	r3, #41340	; 0xa17c
   12724:	movt	r3, #2
   12728:	mov	r2, r0
   1272c:	mov	r1, #1
   12730:	ldr	r3, [r3]
   12734:	mov	r0, r4
   12738:	bl	10e88 <__fprintf_chk@plt>
   1273c:	mov	r0, r6
   12740:	bl	10e28 <exit@plt>
   12744:	mov	r2, #5
   12748:	movw	r1, #33468	; 0x82bc
   1274c:	movt	r1, #1
   12750:	movw	r7, #41300	; 0xa154
   12754:	movt	r7, #2
   12758:	bl	10d68 <dcgettext@plt>
   1275c:	movw	r3, #41340	; 0xa17c
   12760:	movt	r3, #2
   12764:	mov	r1, r0
   12768:	mov	r0, #1
   1276c:	ldr	r2, [r3]
   12770:	bl	10e70 <__printf_chk@plt>
   12774:	mov	r2, #5
   12778:	movw	r1, #33500	; 0x82dc
   1277c:	movt	r1, #1
   12780:	mov	r0, r6
   12784:	bl	10d68 <dcgettext@plt>
   12788:	ldr	r1, [r7]
   1278c:	bl	10ccc <fputs_unlocked@plt>
   12790:	mov	r2, #5
   12794:	movw	r1, #33572	; 0x8324
   12798:	movt	r1, #1
   1279c:	mov	r0, r6
   127a0:	bl	10d68 <dcgettext@plt>
   127a4:	ldr	r1, [r7]
   127a8:	bl	10ccc <fputs_unlocked@plt>
   127ac:	mov	r2, #5
   127b0:	movw	r1, #33628	; 0x835c
   127b4:	movt	r1, #1
   127b8:	mov	r0, r6
   127bc:	bl	10d68 <dcgettext@plt>
   127c0:	ldr	r1, [r7]
   127c4:	bl	10ccc <fputs_unlocked@plt>
   127c8:	mov	r2, #5
   127cc:	movw	r1, #33704	; 0x83a8
   127d0:	movt	r1, #1
   127d4:	mov	r0, r6
   127d8:	bl	10d68 <dcgettext@plt>
   127dc:	ldr	r1, [r7]
   127e0:	bl	10ccc <fputs_unlocked@plt>
   127e4:	mov	r2, #5
   127e8:	movw	r1, #33776	; 0x83f0
   127ec:	movt	r1, #1
   127f0:	mov	r0, r6
   127f4:	bl	10d68 <dcgettext@plt>
   127f8:	ldr	r1, [r7]
   127fc:	bl	10ccc <fputs_unlocked@plt>
   12800:	mov	r2, #5
   12804:	movw	r1, #33848	; 0x8438
   12808:	movt	r1, #1
   1280c:	mov	r0, r6
   12810:	bl	10d68 <dcgettext@plt>
   12814:	ldr	r1, [r7]
   12818:	bl	10ccc <fputs_unlocked@plt>
   1281c:	mov	r2, #5
   12820:	movw	r1, #33920	; 0x8480
   12824:	movt	r1, #1
   12828:	mov	r0, r6
   1282c:	bl	10d68 <dcgettext@plt>
   12830:	ldr	r1, [r7]
   12834:	bl	10ccc <fputs_unlocked@plt>
   12838:	mov	r2, #5
   1283c:	movw	r1, #33996	; 0x84cc
   12840:	movt	r1, #1
   12844:	mov	r0, r6
   12848:	bl	10d68 <dcgettext@plt>
   1284c:	ldr	r1, [r7]
   12850:	bl	10ccc <fputs_unlocked@plt>
   12854:	mov	r2, #5
   12858:	movw	r1, #34056	; 0x8508
   1285c:	movt	r1, #1
   12860:	mov	r0, r6
   12864:	bl	10d68 <dcgettext@plt>
   12868:	ldr	r1, [r7]
   1286c:	bl	10ccc <fputs_unlocked@plt>
   12870:	mov	r2, #5
   12874:	movw	r1, #34132	; 0x8554
   12878:	movt	r1, #1
   1287c:	mov	r0, r6
   12880:	bl	10d68 <dcgettext@plt>
   12884:	ldr	r1, [r7]
   12888:	bl	10ccc <fputs_unlocked@plt>
   1288c:	mov	r2, #5
   12890:	movw	r1, #34208	; 0x85a0
   12894:	movt	r1, #1
   12898:	mov	r0, r6
   1289c:	bl	10d68 <dcgettext@plt>
   128a0:	ldr	r1, [r7]
   128a4:	bl	10ccc <fputs_unlocked@plt>
   128a8:	mov	r2, #5
   128ac:	movw	r1, #34452	; 0x8694
   128b0:	movt	r1, #1
   128b4:	mov	r0, r6
   128b8:	bl	10d68 <dcgettext@plt>
   128bc:	ldr	r1, [r7]
   128c0:	bl	10ccc <fputs_unlocked@plt>
   128c4:	mov	r2, #5
   128c8:	movw	r1, #34676	; 0x8774
   128cc:	movt	r1, #1
   128d0:	mov	r0, r6
   128d4:	bl	10d68 <dcgettext@plt>
   128d8:	ldr	r1, [r7]
   128dc:	bl	10ccc <fputs_unlocked@plt>
   128e0:	mov	r2, #5
   128e4:	movw	r1, #34724	; 0x87a4
   128e8:	movt	r1, #1
   128ec:	mov	r0, r6
   128f0:	bl	10d68 <dcgettext@plt>
   128f4:	ldr	r1, [r7]
   128f8:	bl	10ccc <fputs_unlocked@plt>
   128fc:	mov	r2, #5
   12900:	movw	r1, #34780	; 0x87dc
   12904:	movt	r1, #1
   12908:	mov	r0, r6
   1290c:	bl	10d68 <dcgettext@plt>
   12910:	ldr	r1, [r7]
   12914:	bl	10ccc <fputs_unlocked@plt>
   12918:	ldr	lr, [pc, #560]	; 12b50 <__assert_fail@plt+0x1c20>
   1291c:	ldr	ip, [lr]
   12920:	ldr	r4, [lr, #4]
   12924:	ldrd	r8, [lr, #8]
   12928:	subs	r1, ip, #0
   1292c:	str	ip, [sp]
   12930:	ldrd	r2, [lr, #16]
   12934:	str	r4, [sp, #4]
   12938:	ldrd	r4, [lr, #24]
   1293c:	strd	r8, [sp, #8]
   12940:	ldrd	r8, [lr, #32]
   12944:	strd	r2, [sp, #16]
   12948:	ldrd	r2, [lr, #40]	; 0x28
   1294c:	strd	r4, [sp, #24]
   12950:	ldrd	r4, [lr, #48]	; 0x30
   12954:	strd	r8, [sp, #32]
   12958:	strd	r2, [sp, #40]	; 0x28
   1295c:	strd	r4, [sp, #48]	; 0x30
   12960:	movwne	r5, #33420	; 0x828c
   12964:	mov	r4, sp
   12968:	movtne	r5, #1
   1296c:	bne	12a64 <__assert_fail@plt+0x1b34>
   12970:	ldr	r4, [r4, #4]
   12974:	movw	r1, #34980	; 0x88a4
   12978:	movt	r1, #1
   1297c:	mov	r2, #5
   12980:	cmp	r4, #0
   12984:	beq	12a78 <__assert_fail@plt+0x1b48>
   12988:	mov	r0, #0
   1298c:	bl	10d68 <dcgettext@plt>
   12990:	mov	r1, r0
   12994:	movw	r3, #35004	; 0x88bc
   12998:	movt	r3, #1
   1299c:	movw	r2, #35044	; 0x88e4
   129a0:	movt	r2, #1
   129a4:	mov	r0, #1
   129a8:	bl	10e70 <__printf_chk@plt>
   129ac:	mov	r1, #0
   129b0:	mov	r0, #5
   129b4:	bl	10ec4 <setlocale@plt>
   129b8:	cmp	r0, #0
   129bc:	movweq	r5, #33420	; 0x828c
   129c0:	movteq	r5, #1
   129c4:	beq	129e8 <__assert_fail@plt+0x1ab8>
   129c8:	movw	r1, #35060	; 0x88f4
   129cc:	movt	r1, #1
   129d0:	mov	r2, #3
   129d4:	movw	r5, #33420	; 0x828c
   129d8:	movt	r5, #1
   129dc:	bl	10f18 <strncmp@plt>
   129e0:	cmp	r0, #0
   129e4:	bne	12b30 <__assert_fail@plt+0x1c00>
   129e8:	mov	r2, #5
   129ec:	movw	r1, #35136	; 0x8940
   129f0:	movt	r1, #1
   129f4:	mov	r0, #0
   129f8:	bl	10d68 <dcgettext@plt>
   129fc:	mov	r1, r0
   12a00:	movw	r3, #33420	; 0x828c
   12a04:	movt	r3, #1
   12a08:	movw	r2, #35004	; 0x88bc
   12a0c:	movt	r2, #1
   12a10:	mov	r0, #1
   12a14:	bl	10e70 <__printf_chk@plt>
   12a18:	mov	r2, #5
   12a1c:	movw	r1, #35164	; 0x895c
   12a20:	movt	r1, #1
   12a24:	mov	r0, #0
   12a28:	bl	10d68 <dcgettext@plt>
   12a2c:	movw	r2, #35404	; 0x8a4c
   12a30:	movt	r2, #1
   12a34:	cmp	r4, r5
   12a38:	movw	r3, #34720	; 0x87a0
   12a3c:	movt	r3, #1
   12a40:	mov	r1, r0
   12a44:	moveq	r3, r2
   12a48:	mov	r2, r4
   12a4c:	mov	r0, #1
   12a50:	bl	10e70 <__printf_chk@plt>
   12a54:	b	1273c <__assert_fail@plt+0x180c>
   12a58:	ldr	r1, [r4, #8]!
   12a5c:	cmp	r1, #0
   12a60:	beq	12970 <__assert_fail@plt+0x1a40>
   12a64:	mov	r0, r5
   12a68:	bl	10ce4 <strcmp@plt>
   12a6c:	cmp	r0, #0
   12a70:	bne	12a58 <__assert_fail@plt+0x1b28>
   12a74:	b	12970 <__assert_fail@plt+0x1a40>
   12a78:	mov	r0, r4
   12a7c:	bl	10d68 <dcgettext@plt>
   12a80:	mov	r1, r0
   12a84:	movw	r3, #35004	; 0x88bc
   12a88:	movt	r3, #1
   12a8c:	movw	r2, #35044	; 0x88e4
   12a90:	movt	r2, #1
   12a94:	mov	r0, #1
   12a98:	bl	10e70 <__printf_chk@plt>
   12a9c:	mov	r1, r4
   12aa0:	mov	r0, #5
   12aa4:	bl	10ec4 <setlocale@plt>
   12aa8:	cmp	r0, #0
   12aac:	beq	12ac8 <__assert_fail@plt+0x1b98>
   12ab0:	movw	r1, #35060	; 0x88f4
   12ab4:	movt	r1, #1
   12ab8:	mov	r2, #3
   12abc:	bl	10f18 <strncmp@plt>
   12ac0:	cmp	r0, #0
   12ac4:	bne	12b24 <__assert_fail@plt+0x1bf4>
   12ac8:	mov	r2, #5
   12acc:	movw	r1, #35136	; 0x8940
   12ad0:	movt	r1, #1
   12ad4:	mov	r0, #0
   12ad8:	bl	10d68 <dcgettext@plt>
   12adc:	mov	r1, r0
   12ae0:	movw	r3, #33420	; 0x828c
   12ae4:	movt	r3, #1
   12ae8:	movw	r2, #35004	; 0x88bc
   12aec:	movt	r2, #1
   12af0:	mov	r0, #1
   12af4:	bl	10e70 <__printf_chk@plt>
   12af8:	movw	r1, #35164	; 0x895c
   12afc:	movt	r1, #1
   12b00:	mov	r2, #5
   12b04:	mov	r0, #0
   12b08:	bl	10d68 <dcgettext@plt>
   12b0c:	movw	r4, #33420	; 0x828c
   12b10:	movt	r4, #1
   12b14:	movw	r3, #35404	; 0x8a4c
   12b18:	movt	r3, #1
   12b1c:	mov	r1, r0
   12b20:	b	12a48 <__assert_fail@plt+0x1b18>
   12b24:	movw	r5, #33420	; 0x828c
   12b28:	movt	r5, #1
   12b2c:	mov	r4, r5
   12b30:	mov	r2, #5
   12b34:	movw	r1, #35064	; 0x88f8
   12b38:	movt	r1, #1
   12b3c:	mov	r0, #0
   12b40:	bl	10d68 <dcgettext@plt>
   12b44:	ldr	r1, [r7]
   12b48:	bl	10ccc <fputs_unlocked@plt>
   12b4c:	b	129e8 <__assert_fail@plt+0x1ab8>
   12b50:	ldrdeq	r8, [r1], -ip
   12b54:	cmp	r1, #7
   12b58:	ble	12cf4 <__assert_fail@plt+0x1dc4>
   12b5c:	strd	r4, [sp, #-16]!
   12b60:	movw	r1, #35644	; 0x8b3c
   12b64:	movt	r1, #1
   12b68:	str	r6, [sp, #8]
   12b6c:	str	lr, [sp, #12]
   12b70:	ldrb	ip, [r0]
   12b74:	ldrsb	r4, [r1, ip]
   12b78:	cmp	r4, #0
   12b7c:	blt	12cb0 <__assert_fail@plt+0x1d80>
   12b80:	ldrb	ip, [r0, #1]
   12b84:	ldrsb	r5, [r1, ip]
   12b88:	cmp	r5, #0
   12b8c:	blt	12cb0 <__assert_fail@plt+0x1d80>
   12b90:	ldr	lr, [r3]
   12b94:	ldr	ip, [r2]
   12b98:	cmp	lr, #0
   12b9c:	bne	12cfc <__assert_fail@plt+0x1dcc>
   12ba0:	ldrb	r4, [r0, #2]
   12ba4:	cmp	r4, #61	; 0x3d
   12ba8:	beq	12cc4 <__assert_fail@plt+0x1d94>
   12bac:	ldrsb	r4, [r1, r4]
   12bb0:	cmp	r4, #0
   12bb4:	blt	12cdc <__assert_fail@plt+0x1dac>
   12bb8:	ldrb	r6, [r0, #3]
   12bbc:	ldrsb	r6, [r1, r6]
   12bc0:	cmp	r6, #0
   12bc4:	blt	12cdc <__assert_fail@plt+0x1dac>
   12bc8:	cmp	lr, #0
   12bcc:	beq	12bec <__assert_fail@plt+0x1cbc>
   12bd0:	lsl	r4, r4, #1
   12bd4:	orr	r5, r4, r5, lsl #6
   12bd8:	orr	r5, r5, r6, asr #4
   12bdc:	strb	r5, [ip], #1
   12be0:	ldr	lr, [r3]
   12be4:	sub	lr, lr, #1
   12be8:	str	lr, [r3]
   12bec:	ldrb	r4, [r0, #4]
   12bf0:	cmp	r4, #61	; 0x3d
   12bf4:	beq	12d18 <__assert_fail@plt+0x1de8>
   12bf8:	ldrsb	r4, [r1, r4]
   12bfc:	cmp	r4, #0
   12c00:	blt	12cdc <__assert_fail@plt+0x1dac>
   12c04:	cmp	lr, #0
   12c08:	beq	12c24 <__assert_fail@plt+0x1cf4>
   12c0c:	asr	lr, r4, #1
   12c10:	orr	r6, lr, r6, lsl #4
   12c14:	strb	r6, [ip], #1
   12c18:	ldr	lr, [r3]
   12c1c:	sub	lr, lr, #1
   12c20:	str	lr, [r3]
   12c24:	ldrb	r5, [r0, #5]
   12c28:	cmp	r5, #61	; 0x3d
   12c2c:	beq	12d24 <__assert_fail@plt+0x1df4>
   12c30:	ldrsb	r5, [r1, r5]
   12c34:	cmp	r5, #0
   12c38:	blt	12cdc <__assert_fail@plt+0x1dac>
   12c3c:	ldrb	r6, [r0, #6]
   12c40:	ldrsb	r6, [r1, r6]
   12c44:	cmp	r6, #0
   12c48:	blt	12cdc <__assert_fail@plt+0x1dac>
   12c4c:	cmp	lr, #0
   12c50:	beq	12c70 <__assert_fail@plt+0x1d40>
   12c54:	lsl	lr, r5, #2
   12c58:	orr	lr, lr, r4, lsl #7
   12c5c:	orr	lr, lr, r6, asr #3
   12c60:	strb	lr, [ip], #1
   12c64:	ldr	lr, [r3]
   12c68:	sub	lr, lr, #1
   12c6c:	str	lr, [r3]
   12c70:	ldrb	r0, [r0, #7]
   12c74:	cmp	r0, #61	; 0x3d
   12c78:	beq	12ca4 <__assert_fail@plt+0x1d74>
   12c7c:	ldrsb	r1, [r1, r0]
   12c80:	cmp	r1, #0
   12c84:	blt	12cdc <__assert_fail@plt+0x1dac>
   12c88:	cmp	lr, #0
   12c8c:	beq	12ca4 <__assert_fail@plt+0x1d74>
   12c90:	orr	r1, r1, r6, lsl #5
   12c94:	strb	r1, [ip], #1
   12c98:	ldr	r1, [r3]
   12c9c:	sub	r1, r1, #1
   12ca0:	str	r1, [r3]
   12ca4:	mov	r0, #1
   12ca8:	str	ip, [r2]
   12cac:	b	12cb4 <__assert_fail@plt+0x1d84>
   12cb0:	mov	r0, #0
   12cb4:	ldrd	r4, [sp]
   12cb8:	ldr	r6, [sp, #8]
   12cbc:	add	sp, sp, #12
   12cc0:	pop	{pc}		; (ldr pc, [sp], #4)
   12cc4:	ldrb	r3, [r0, #3]
   12cc8:	cmp	r3, #61	; 0x3d
   12ccc:	bne	12cdc <__assert_fail@plt+0x1dac>
   12cd0:	ldrb	r3, [r0, #4]
   12cd4:	cmp	r3, #61	; 0x3d
   12cd8:	beq	12d18 <__assert_fail@plt+0x1de8>
   12cdc:	ldrd	r4, [sp]
   12ce0:	mov	r0, #0
   12ce4:	str	ip, [r2]
   12ce8:	ldr	r6, [sp, #8]
   12cec:	add	sp, sp, #12
   12cf0:	pop	{pc}		; (ldr pc, [sp], #4)
   12cf4:	mov	r0, #0
   12cf8:	bx	lr
   12cfc:	asr	lr, r5, #2
   12d00:	orr	r4, lr, r4, lsl #3
   12d04:	strb	r4, [ip], #1
   12d08:	ldr	lr, [r3]
   12d0c:	sub	lr, lr, #1
   12d10:	str	lr, [r3]
   12d14:	b	12ba0 <__assert_fail@plt+0x1c70>
   12d18:	ldrb	r3, [r0, #5]
   12d1c:	cmp	r3, #61	; 0x3d
   12d20:	bne	12cdc <__assert_fail@plt+0x1dac>
   12d24:	ldrb	r3, [r0, #6]
   12d28:	cmp	r3, #61	; 0x3d
   12d2c:	bne	12cdc <__assert_fail@plt+0x1dac>
   12d30:	ldrb	r3, [r0, #7]
   12d34:	cmp	r3, #61	; 0x3d
   12d38:	beq	12ca4 <__assert_fail@plt+0x1d74>
   12d3c:	b	12cdc <__assert_fail@plt+0x1dac>
   12d40:	add	r2, r2, #8
   12d44:	strd	r4, [sp, #-12]!
   12d48:	mov	r5, #61	; 0x3d
   12d4c:	str	lr, [sp, #8]
   12d50:	movw	lr, #35644	; 0x8b3c
   12d54:	movt	lr, #1
   12d58:	b	12e58 <__assert_fail@plt+0x1f28>
   12d5c:	ldrb	r4, [r0, #1]
   12d60:	cmp	r3, #2
   12d64:	add	ip, ip, r4, lsr #6
   12d68:	and	ip, ip, #31
   12d6c:	add	ip, lr, ip
   12d70:	ldrb	ip, [ip, #256]	; 0x100
   12d74:	strb	ip, [r2, #-7]
   12d78:	beq	12f14 <__assert_fail@plt+0x1fe4>
   12d7c:	ubfx	ip, r4, #1, #5
   12d80:	cmp	r3, #3
   12d84:	add	ip, lr, ip
   12d88:	ldrb	ip, [ip, #256]	; 0x100
   12d8c:	strb	ip, [r2, #-6]
   12d90:	beq	12f14 <__assert_fail@plt+0x1fe4>
   12d94:	cmp	r1, #2
   12d98:	lsl	r4, r4, #4
   12d9c:	beq	12efc <__assert_fail@plt+0x1fcc>
   12da0:	ldrb	ip, [r0, #2]
   12da4:	cmp	r3, #4
   12da8:	add	r4, r4, ip, lsr #4
   12dac:	and	r4, r4, #31
   12db0:	add	r4, lr, r4
   12db4:	ldrb	r4, [r4, #256]	; 0x100
   12db8:	strb	r4, [r2, #-5]
   12dbc:	beq	12f14 <__assert_fail@plt+0x1fe4>
   12dc0:	cmp	r1, #3
   12dc4:	lsl	r4, ip, #1
   12dc8:	beq	12f20 <__assert_fail@plt+0x1ff0>
   12dcc:	ldrb	ip, [r0, #3]
   12dd0:	cmp	r3, #5
   12dd4:	add	r4, r4, ip, lsr #7
   12dd8:	and	r4, r4, #31
   12ddc:	add	r4, lr, r4
   12de0:	ldrb	r4, [r4, #256]	; 0x100
   12de4:	strb	r4, [r2, #-4]
   12de8:	beq	12f14 <__assert_fail@plt+0x1fe4>
   12dec:	ubfx	r4, ip, #2, #5
   12df0:	cmp	r3, #6
   12df4:	add	r4, lr, r4
   12df8:	ldrb	r4, [r4, #256]	; 0x100
   12dfc:	strb	r4, [r2, #-3]
   12e00:	beq	12f14 <__assert_fail@plt+0x1fe4>
   12e04:	cmp	r1, #4
   12e08:	lsl	ip, ip, #3
   12e0c:	beq	12f44 <__assert_fail@plt+0x2014>
   12e10:	ldrb	r4, [r0, #4]
   12e14:	cmp	r3, #7
   12e18:	add	ip, ip, r4, lsr #5
   12e1c:	and	ip, ip, #31
   12e20:	add	ip, lr, ip
   12e24:	ldrb	ip, [ip, #256]	; 0x100
   12e28:	strb	ip, [r2, #-2]
   12e2c:	beq	12f14 <__assert_fail@plt+0x1fe4>
   12e30:	and	r4, r4, #31
   12e34:	cmp	r3, #8
   12e38:	add	r4, lr, r4
   12e3c:	ldrb	ip, [r4, #256]	; 0x100
   12e40:	strb	ip, [r2, #-1]
   12e44:	beq	12f14 <__assert_fail@plt+0x1fe4>
   12e48:	subs	r1, r1, #5
   12e4c:	addne	r0, r0, #5
   12e50:	sub	r3, r3, #8
   12e54:	add	r2, r2, #8
   12e58:	adds	ip, r3, #0
   12e5c:	movne	ip, #1
   12e60:	cmp	r1, #0
   12e64:	moveq	ip, #0
   12e68:	cmp	ip, #0
   12e6c:	beq	12f60 <__assert_fail@plt+0x2030>
   12e70:	ldrb	ip, [r0]
   12e74:	cmp	r3, #1
   12e78:	add	r4, lr, ip, lsr #3
   12e7c:	ldrb	r4, [r4, #256]	; 0x100
   12e80:	strb	r4, [r2, #-8]
   12e84:	beq	12f14 <__assert_fail@plt+0x1fe4>
   12e88:	cmp	r1, #1
   12e8c:	lsl	ip, ip, #2
   12e90:	bne	12d5c <__assert_fail@plt+0x1e2c>
   12e94:	and	ip, ip, #31
   12e98:	cmp	r3, #2
   12e9c:	add	ip, lr, ip
   12ea0:	ldrb	r1, [ip, #256]	; 0x100
   12ea4:	strb	r1, [r2, #-7]
   12ea8:	beq	12f14 <__assert_fail@plt+0x1fe4>
   12eac:	cmp	r3, #3
   12eb0:	strb	r5, [r2, #-6]
   12eb4:	beq	12f14 <__assert_fail@plt+0x1fe4>
   12eb8:	cmp	r3, #4
   12ebc:	strb	r5, [r2, #-5]
   12ec0:	beq	12f14 <__assert_fail@plt+0x1fe4>
   12ec4:	cmp	r3, #5
   12ec8:	strb	r5, [r2, #-4]
   12ecc:	beq	12f14 <__assert_fail@plt+0x1fe4>
   12ed0:	cmp	r3, #6
   12ed4:	strb	r5, [r2, #-3]
   12ed8:	beq	12f14 <__assert_fail@plt+0x1fe4>
   12edc:	cmp	r3, #7
   12ee0:	strb	r5, [r2, #-2]
   12ee4:	beq	12f14 <__assert_fail@plt+0x1fe4>
   12ee8:	cmp	r3, #8
   12eec:	strb	r5, [r2, #-1]
   12ef0:	beq	12f14 <__assert_fail@plt+0x1fe4>
   12ef4:	mov	r1, #0
   12ef8:	b	12e50 <__assert_fail@plt+0x1f20>
   12efc:	and	r4, r4, #31
   12f00:	cmp	r3, #4
   12f04:	add	r4, lr, r4
   12f08:	ldrb	r1, [r4, #256]	; 0x100
   12f0c:	strb	r1, [r2, #-5]
   12f10:	bne	12ec4 <__assert_fail@plt+0x1f94>
   12f14:	ldrd	r4, [sp]
   12f18:	add	sp, sp, #8
   12f1c:	pop	{pc}		; (ldr pc, [sp], #4)
   12f20:	and	ip, r4, #31
   12f24:	cmp	r3, #5
   12f28:	add	ip, lr, ip
   12f2c:	ldrb	r1, [ip, #256]	; 0x100
   12f30:	strb	r1, [r2, #-4]
   12f34:	bne	12ed0 <__assert_fail@plt+0x1fa0>
   12f38:	ldrd	r4, [sp]
   12f3c:	add	sp, sp, #8
   12f40:	pop	{pc}		; (ldr pc, [sp], #4)
   12f44:	and	ip, ip, #31
   12f48:	cmp	r3, #7
   12f4c:	add	ip, lr, ip
   12f50:	ldrb	r1, [ip, #256]	; 0x100
   12f54:	strb	r1, [r2, #-2]
   12f58:	beq	12f14 <__assert_fail@plt+0x1fe4>
   12f5c:	b	12ee8 <__assert_fail@plt+0x1fb8>
   12f60:	cmp	r3, #0
   12f64:	strbne	ip, [r2, #-8]
   12f68:	b	12f14 <__assert_fail@plt+0x1fe4>
   12f6c:	movw	ip, #26215	; 0x6667
   12f70:	movt	ip, #26214	; 0x6666
   12f74:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12f78:	asr	r3, r1, #31
   12f7c:	strd	r6, [sp, #8]
   12f80:	str	lr, [sp, #20]
   12f84:	smull	lr, ip, ip, r1
   12f88:	str	r8, [sp, #16]
   12f8c:	rsb	r3, r3, ip, asr #1
   12f90:	add	ip, r3, r3, lsl #2
   12f94:	cmp	r1, ip
   12f98:	addne	r3, r3, #1
   12f9c:	asr	r7, r3, #31
   12fa0:	lsl	r5, r3, #3
   12fa4:	lsl	ip, r7, #3
   12fa8:	orr	ip, ip, r3, lsr #29
   12fac:	cmp	ip, r5, asr #31
   12fb0:	movne	r3, #1
   12fb4:	moveq	r3, #0
   12fb8:	orrs	r3, r3, r1, lsr #31
   12fbc:	beq	12fe4 <__assert_fail@plt+0x20b4>
   12fc0:	mov	r3, #0
   12fc4:	mov	r5, r3
   12fc8:	str	r3, [r2]
   12fcc:	mov	r0, r5
   12fd0:	ldrd	r4, [sp]
   12fd4:	ldrd	r6, [sp, #8]
   12fd8:	ldr	r8, [sp, #16]
   12fdc:	add	sp, sp, #20
   12fe0:	pop	{pc}		; (ldr pc, [sp], #4)
   12fe4:	add	r8, r5, #1
   12fe8:	mov	r7, r0
   12fec:	mov	r0, r8
   12ff0:	mov	r6, r2
   12ff4:	mov	r4, r1
   12ff8:	bl	179ac <__assert_fail@plt+0x6a7c>
   12ffc:	cmp	r0, #0
   13000:	str	r0, [r6]
   13004:	moveq	r5, r8
   13008:	beq	12fcc <__assert_fail@plt+0x209c>
   1300c:	mov	r2, r0
   13010:	mov	r3, r8
   13014:	mov	r1, r4
   13018:	mov	r0, r7
   1301c:	bl	12d40 <__assert_fail@plt+0x1e10>
   13020:	b	12fcc <__assert_fail@plt+0x209c>
   13024:	movw	r3, #35644	; 0x8b3c
   13028:	movt	r3, #1
   1302c:	ldrb	r0, [r3, r0]
   13030:	mvn	r0, r0
   13034:	ubfx	r0, r0, #7, #1
   13038:	bx	lr
   1303c:	mov	r3, #0
   13040:	str	r3, [r0]
   13044:	bx	lr
   13048:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1304c:	strd	r6, [sp, #8]
   13050:	mov	r6, r1
   13054:	mov	r1, r2
   13058:	strd	r8, [sp, #16]
   1305c:	subs	r8, r0, #0
   13060:	strd	sl, [sp, #24]
   13064:	movne	fp, #1
   13068:	moveq	fp, #0
   1306c:	str	lr, [sp, #32]
   13070:	sub	sp, sp, #20
   13074:	str	r3, [sp, #4]
   13078:	ldr	r3, [sp, #56]	; 0x38
   1307c:	ldr	r7, [r3]
   13080:	str	r7, [sp, #12]
   13084:	beq	1329c <__assert_fail@plt+0x236c>
   13088:	ldr	sl, [r8]
   1308c:	adds	r9, r2, #0
   13090:	movne	r9, #1
   13094:	cmp	sl, #0
   13098:	moveq	sl, r9
   1309c:	movne	sl, #0
   130a0:	and	fp, fp, r9
   130a4:	b	130f4 <__assert_fail@plt+0x21c4>
   130a8:	ldrb	r2, [r6]
   130ac:	cmp	r2, #10
   130b0:	beq	131dc <__assert_fail@plt+0x22ac>
   130b4:	ldr	r2, [sp, #4]
   130b8:	sub	r3, r7, r3
   130bc:	cmp	r8, #0
   130c0:	add	r4, r6, r1
   130c4:	str	r7, [sp, #12]
   130c8:	sub	r3, r2, r3
   130cc:	str	r3, [sp, #4]
   130d0:	bne	132cc <__assert_fail@plt+0x239c>
   130d4:	mov	r0, r6
   130d8:	add	r3, sp, #12
   130dc:	add	r2, sp, #4
   130e0:	bl	12b54 <__assert_fail@plt+0x1c24>
   130e4:	cmp	r0, #0
   130e8:	beq	132b4 <__assert_fail@plt+0x2384>
   130ec:	ldr	r7, [sp, #12]
   130f0:	sub	r1, r4, r6
   130f4:	cmp	sl, #0
   130f8:	moveq	r3, r7
   130fc:	bne	131a0 <__assert_fail@plt+0x2270>
   13100:	cmp	r1, #0
   13104:	moveq	r0, r9
   13108:	movne	r0, #0
   1310c:	cmp	r0, #0
   13110:	bne	13170 <__assert_fail@plt+0x2240>
   13114:	cmp	r1, #0
   13118:	bne	130a8 <__assert_fail@plt+0x2178>
   1311c:	ldr	r2, [sp, #4]
   13120:	sub	r3, r7, r3
   13124:	cmp	r8, #0
   13128:	str	r7, [sp, #12]
   1312c:	sub	r3, r2, r3
   13130:	str	r3, [sp, #4]
   13134:	beq	132a8 <__assert_fail@plt+0x2378>
   13138:	ldr	r3, [r8]
   1313c:	cmp	r3, #8
   13140:	beq	131f4 <__assert_fail@plt+0x22c4>
   13144:	mov	r1, r3
   13148:	mov	r4, r6
   1314c:	cmp	r1, #0
   13150:	add	r0, r8, #4
   13154:	beq	13168 <__assert_fail@plt+0x2238>
   13158:	cmp	r1, #7
   1315c:	bgt	130d8 <__assert_fail@plt+0x21a8>
   13160:	cmp	fp, #0
   13164:	beq	130d8 <__assert_fail@plt+0x21a8>
   13168:	ldr	r3, [sp, #12]
   1316c:	mov	r0, #1
   13170:	ldr	r2, [sp, #56]	; 0x38
   13174:	ldr	r2, [r2]
   13178:	sub	r3, r2, r3
   1317c:	ldr	r2, [sp, #56]	; 0x38
   13180:	str	r3, [r2]
   13184:	add	sp, sp, #20
   13188:	ldrd	r4, [sp]
   1318c:	ldrd	r6, [sp, #8]
   13190:	ldrd	r8, [sp, #16]
   13194:	ldrd	sl, [sp, #24]
   13198:	add	sp, sp, #32
   1319c:	pop	{pc}		; (ldr pc, [sp], #4)
   131a0:	add	r5, r6, r1
   131a4:	b	131b0 <__assert_fail@plt+0x2280>
   131a8:	ldr	r7, [sp, #12]
   131ac:	add	r6, r6, #8
   131b0:	sub	r4, r5, r6
   131b4:	add	r3, sp, #12
   131b8:	mov	r1, r4
   131bc:	add	r2, sp, #4
   131c0:	mov	r0, r6
   131c4:	bl	12b54 <__assert_fail@plt+0x1c24>
   131c8:	cmp	r0, #0
   131cc:	bne	131a8 <__assert_fail@plt+0x2278>
   131d0:	mov	r1, r4
   131d4:	ldr	r3, [sp, #12]
   131d8:	b	13100 <__assert_fail@plt+0x21d0>
   131dc:	cmp	r8, #0
   131e0:	beq	1327c <__assert_fail@plt+0x234c>
   131e4:	add	r6, r6, #1
   131e8:	sub	r1, r1, #1
   131ec:	mov	r7, r3
   131f0:	b	130f4 <__assert_fail@plt+0x21c4>
   131f4:	mov	r4, r6
   131f8:	mov	r2, #0
   131fc:	mov	r3, #1
   13200:	mov	r5, r2
   13204:	str	r2, [r8]
   13208:	cmp	r1, #7
   1320c:	movle	r1, #0
   13210:	andgt	r1, r3, #1
   13214:	cmp	r1, #0
   13218:	beq	13234 <__assert_fail@plt+0x2304>
   1321c:	mov	r2, #8
   13220:	mov	r1, #10
   13224:	mov	r0, r6
   13228:	bl	10e94 <memchr@plt>
   1322c:	cmp	r0, #0
   13230:	beq	132bc <__assert_fail@plt+0x238c>
   13234:	cmp	r4, r6
   13238:	movls	r1, r5
   1323c:	bls	1314c <__assert_fail@plt+0x221c>
   13240:	ldrb	r2, [r6], #1
   13244:	add	r1, r5, #1
   13248:	mov	r3, r8
   1324c:	cmp	r2, #10
   13250:	beq	13268 <__assert_fail@plt+0x2338>
   13254:	cmp	r1, #8
   13258:	str	r1, [r3], r5
   1325c:	mov	r5, r1
   13260:	strb	r2, [r3, #4]
   13264:	beq	1314c <__assert_fail@plt+0x221c>
   13268:	cmp	r4, r6
   1326c:	bne	13240 <__assert_fail@plt+0x2310>
   13270:	mov	r1, r5
   13274:	mov	r6, r4
   13278:	b	1314c <__assert_fail@plt+0x221c>
   1327c:	ldr	r2, [sp, #4]
   13280:	sub	r3, r7, r3
   13284:	add	r4, r6, r1
   13288:	mov	r0, r6
   1328c:	str	r7, [sp, #12]
   13290:	sub	r3, r2, r3
   13294:	str	r3, [sp, #4]
   13298:	b	13158 <__assert_fail@plt+0x2228>
   1329c:	mov	sl, #1
   132a0:	mov	r9, sl
   132a4:	b	130a0 <__assert_fail@plt+0x2170>
   132a8:	mov	r3, r7
   132ac:	mov	r0, #1
   132b0:	b	13170 <__assert_fail@plt+0x2240>
   132b4:	ldr	r3, [sp, #12]
   132b8:	b	13170 <__assert_fail@plt+0x2240>
   132bc:	mov	r1, #8
   132c0:	mov	r0, r6
   132c4:	add	r6, r6, r1
   132c8:	b	130d8 <__assert_fail@plt+0x21a8>
   132cc:	ldr	r5, [r8]
   132d0:	cmp	r5, #8
   132d4:	beq	131f8 <__assert_fail@plt+0x22c8>
   132d8:	clz	r3, r5
   132dc:	lsr	r3, r3, #5
   132e0:	b	13208 <__assert_fail@plt+0x22d8>
   132e4:	strd	r4, [sp, #-20]!	; 0xffffffec
   132e8:	mov	r5, r3
   132ec:	mov	r4, r2
   132f0:	strd	r6, [sp, #8]
   132f4:	mov	r6, r0
   132f8:	asr	r0, r2, #3
   132fc:	str	lr, [sp, #16]
   13300:	sub	sp, sp, #20
   13304:	mov	r7, r1
   13308:	add	r3, r0, #1
   1330c:	add	r3, r3, r3, lsl #2
   13310:	mov	r0, r3
   13314:	str	r3, [sp, #12]
   13318:	bl	179ac <__assert_fail@plt+0x6a7c>
   1331c:	cmp	r0, #0
   13320:	str	r0, [r5]
   13324:	beq	1337c <__assert_fail@plt+0x244c>
   13328:	add	ip, sp, #12
   1332c:	mov	r3, r0
   13330:	mov	r2, r4
   13334:	mov	r1, r7
   13338:	mov	r0, r6
   1333c:	str	ip, [sp]
   13340:	bl	13048 <__assert_fail@plt+0x2118>
   13344:	subs	r4, r0, #0
   13348:	beq	13384 <__assert_fail@plt+0x2454>
   1334c:	ldr	r3, [sp, #40]	; 0x28
   13350:	cmp	r3, #0
   13354:	beq	1337c <__assert_fail@plt+0x244c>
   13358:	ldr	r3, [sp, #12]
   1335c:	ldr	r2, [sp, #40]	; 0x28
   13360:	str	r3, [r2]
   13364:	mov	r0, r4
   13368:	add	sp, sp, #20
   1336c:	ldrd	r4, [sp]
   13370:	ldrd	r6, [sp, #8]
   13374:	add	sp, sp, #16
   13378:	pop	{pc}		; (ldr pc, [sp], #4)
   1337c:	mov	r4, #1
   13380:	b	13364 <__assert_fail@plt+0x2434>
   13384:	ldr	r0, [r5]
   13388:	bl	13d74 <__assert_fail@plt+0x2e44>
   1338c:	str	r4, [r5]
   13390:	b	13364 <__assert_fail@plt+0x2434>
   13394:	cmp	r1, #1
   13398:	ble	134b4 <__assert_fail@plt+0x2584>
   1339c:	strd	r4, [sp, #-16]!
   133a0:	movw	ip, #35932	; 0x8c5c
   133a4:	movt	ip, #1
   133a8:	str	r6, [sp, #8]
   133ac:	str	lr, [sp, #12]
   133b0:	ldrb	lr, [r0]
   133b4:	ldrsb	r5, [ip, lr]
   133b8:	cmp	r5, #0
   133bc:	blt	13474 <__assert_fail@plt+0x2544>
   133c0:	ldrb	lr, [r0, #1]
   133c4:	ldrsb	r6, [ip, lr]
   133c8:	cmp	r6, #0
   133cc:	blt	13474 <__assert_fail@plt+0x2544>
   133d0:	ldr	r4, [r3]
   133d4:	ldr	lr, [r2]
   133d8:	cmp	r4, #0
   133dc:	bne	134bc <__assert_fail@plt+0x258c>
   133e0:	cmp	r1, #2
   133e4:	beq	1349c <__assert_fail@plt+0x256c>
   133e8:	ldrb	r5, [r0, #2]
   133ec:	cmp	r5, #61	; 0x3d
   133f0:	beq	13488 <__assert_fail@plt+0x2558>
   133f4:	ldrsb	r5, [ip, r5]
   133f8:	cmp	r5, #0
   133fc:	blt	1349c <__assert_fail@plt+0x256c>
   13400:	cmp	r4, #0
   13404:	beq	13420 <__assert_fail@plt+0x24f0>
   13408:	asr	r4, r5, #2
   1340c:	orr	r6, r4, r6, lsl #4
   13410:	strb	r6, [lr], #1
   13414:	ldr	r4, [r3]
   13418:	sub	r4, r4, #1
   1341c:	str	r4, [r3]
   13420:	cmp	r1, #3
   13424:	beq	1349c <__assert_fail@plt+0x256c>
   13428:	ldrb	r0, [r0, #3]
   1342c:	cmp	r0, #61	; 0x3d
   13430:	beq	134d8 <__assert_fail@plt+0x25a8>
   13434:	ldrsb	r1, [ip, r0]
   13438:	cmp	r1, #0
   1343c:	blt	1349c <__assert_fail@plt+0x256c>
   13440:	cmp	r4, #0
   13444:	beq	1345c <__assert_fail@plt+0x252c>
   13448:	orr	r5, r1, r5, lsl #6
   1344c:	strb	r5, [lr], #1
   13450:	ldr	r1, [r3]
   13454:	sub	r1, r1, #1
   13458:	str	r1, [r3]
   1345c:	ldrd	r4, [sp]
   13460:	mov	r0, #1
   13464:	str	lr, [r2]
   13468:	ldr	r6, [sp, #8]
   1346c:	add	sp, sp, #12
   13470:	pop	{pc}		; (ldr pc, [sp], #4)
   13474:	ldrd	r4, [sp]
   13478:	mov	r0, #0
   1347c:	ldr	r6, [sp, #8]
   13480:	add	sp, sp, #12
   13484:	pop	{pc}		; (ldr pc, [sp], #4)
   13488:	cmp	r1, #4
   1348c:	bne	1349c <__assert_fail@plt+0x256c>
   13490:	ldrb	r3, [r0, #3]
   13494:	cmp	r3, #61	; 0x3d
   13498:	beq	1345c <__assert_fail@plt+0x252c>
   1349c:	ldrd	r4, [sp]
   134a0:	mov	r0, #0
   134a4:	str	lr, [r2]
   134a8:	ldr	r6, [sp, #8]
   134ac:	add	sp, sp, #12
   134b0:	pop	{pc}		; (ldr pc, [sp], #4)
   134b4:	mov	r0, #0
   134b8:	bx	lr
   134bc:	asr	r4, r6, #4
   134c0:	orr	r5, r4, r5, lsl #2
   134c4:	strb	r5, [lr], #1
   134c8:	ldr	r4, [r3]
   134cc:	sub	r4, r4, #1
   134d0:	str	r4, [r3]
   134d4:	b	133e0 <__assert_fail@plt+0x24b0>
   134d8:	cmp	r1, #4
   134dc:	beq	1345c <__assert_fail@plt+0x252c>
   134e0:	b	1349c <__assert_fail@plt+0x256c>
   134e4:	tst	r3, #3
   134e8:	mov	ip, r3
   134ec:	strd	r4, [sp, #-16]!
   134f0:	str	r6, [sp, #8]
   134f4:	str	lr, [sp, #12]
   134f8:	bne	1350c <__assert_fail@plt+0x25dc>
   134fc:	asr	r3, r3, #2
   13500:	add	r3, r3, r3, lsl #1
   13504:	cmp	r3, r1
   13508:	beq	13650 <__assert_fail@plt+0x2720>
   1350c:	movw	r4, #35932	; 0x8c5c
   13510:	movt	r4, #1
   13514:	add	r2, r2, #4
   13518:	mov	r5, #61	; 0x3d
   1351c:	b	13594 <__assert_fail@plt+0x2664>
   13520:	ldrb	lr, [r0, #1]
   13524:	cmp	ip, #2
   13528:	add	r3, r3, lr, lsr #4
   1352c:	and	r3, r3, #63	; 0x3f
   13530:	add	r3, r4, r3
   13534:	ldrb	r3, [r3, #256]	; 0x100
   13538:	strb	r3, [r2, #-3]
   1353c:	beq	13624 <__assert_fail@plt+0x26f4>
   13540:	cmp	r1, #2
   13544:	lsl	lr, lr, #2
   13548:	beq	1360c <__assert_fail@plt+0x26dc>
   1354c:	ldrb	r3, [r0, #2]
   13550:	cmp	ip, #3
   13554:	add	lr, lr, r3, lsr #6
   13558:	and	lr, lr, #63	; 0x3f
   1355c:	add	lr, r4, lr
   13560:	ldrb	lr, [lr, #256]	; 0x100
   13564:	strb	lr, [r2, #-2]
   13568:	beq	13624 <__assert_fail@plt+0x26f4>
   1356c:	and	r3, r3, #63	; 0x3f
   13570:	cmp	ip, #4
   13574:	add	r3, r4, r3
   13578:	ldrb	r3, [r3, #256]	; 0x100
   1357c:	strb	r3, [r2, #-1]
   13580:	beq	13624 <__assert_fail@plt+0x26f4>
   13584:	subs	r1, r1, #3
   13588:	addne	r0, r0, #3
   1358c:	sub	ip, ip, #4
   13590:	add	r2, r2, #4
   13594:	adds	r3, ip, #0
   13598:	sub	lr, r2, #4
   1359c:	movne	r3, #1
   135a0:	cmp	r1, #0
   135a4:	moveq	r3, #0
   135a8:	cmp	r3, #0
   135ac:	beq	13634 <__assert_fail@plt+0x2704>
   135b0:	ldrb	r3, [r0]
   135b4:	cmp	ip, #1
   135b8:	add	lr, r4, r3, lsr #2
   135bc:	ldrb	lr, [lr, #256]	; 0x100
   135c0:	strb	lr, [r2, #-4]
   135c4:	beq	13624 <__assert_fail@plt+0x26f4>
   135c8:	cmp	r1, #1
   135cc:	lsl	r3, r3, #4
   135d0:	bne	13520 <__assert_fail@plt+0x25f0>
   135d4:	and	r3, r3, #63	; 0x3f
   135d8:	cmp	ip, #2
   135dc:	add	r3, r4, r3
   135e0:	ldrb	r3, [r3, #256]	; 0x100
   135e4:	strb	r3, [r2, #-3]
   135e8:	beq	13624 <__assert_fail@plt+0x26f4>
   135ec:	cmp	ip, #3
   135f0:	strb	r5, [r2, #-2]
   135f4:	beq	13624 <__assert_fail@plt+0x26f4>
   135f8:	cmp	ip, #4
   135fc:	strb	r5, [r2, #-1]
   13600:	beq	13624 <__assert_fail@plt+0x26f4>
   13604:	mov	r1, #0
   13608:	b	1358c <__assert_fail@plt+0x265c>
   1360c:	and	lr, lr, #63	; 0x3f
   13610:	cmp	ip, #3
   13614:	add	lr, r4, lr
   13618:	ldrb	r3, [lr, #256]	; 0x100
   1361c:	strb	r3, [r2, #-2]
   13620:	bne	135f8 <__assert_fail@plt+0x26c8>
   13624:	ldrd	r4, [sp]
   13628:	ldr	r6, [sp, #8]
   1362c:	add	sp, sp, #12
   13630:	pop	{pc}		; (ldr pc, [sp], #4)
   13634:	cmp	ip, #0
   13638:	beq	13624 <__assert_fail@plt+0x26f4>
   1363c:	strb	r3, [r2, #-4]
   13640:	ldrd	r4, [sp]
   13644:	ldr	r6, [sp, #8]
   13648:	add	sp, sp, #12
   1364c:	pop	{pc}		; (ldr pc, [sp], #4)
   13650:	cmp	r3, #0
   13654:	beq	13624 <__assert_fail@plt+0x26f4>
   13658:	add	r1, r3, #3
   1365c:	movw	r4, #35932	; 0x8c5c
   13660:	movt	r4, #1
   13664:	add	r3, r2, #4
   13668:	add	r2, r0, r1
   1366c:	add	r0, r0, #3
   13670:	ldrb	r6, [r0, #-2]
   13674:	add	r0, r0, #3
   13678:	add	r3, r3, #4
   1367c:	ldrb	lr, [r0, #-4]
   13680:	ldrb	r5, [r0, #-6]
   13684:	cmp	r2, r0
   13688:	lsr	r1, r6, #4
   1368c:	lsr	ip, lr, #6
   13690:	and	lr, lr, #63	; 0x3f
   13694:	add	lr, r4, lr
   13698:	add	ip, ip, r6, lsl #2
   1369c:	ldrb	lr, [lr, #256]	; 0x100
   136a0:	add	r1, r1, r5, lsl #4
   136a4:	and	ip, ip, #63	; 0x3f
   136a8:	add	r5, r4, r5, lsr #2
   136ac:	and	r1, r1, #63	; 0x3f
   136b0:	add	ip, r4, ip
   136b4:	add	r1, r4, r1
   136b8:	ldrb	r6, [ip, #256]	; 0x100
   136bc:	ldrb	ip, [r1, #256]	; 0x100
   136c0:	ldrb	r1, [r5, #256]	; 0x100
   136c4:	strb	lr, [r3, #-5]
   136c8:	strb	r6, [r3, #-6]
   136cc:	strb	r1, [r3, #-8]
   136d0:	strb	ip, [r3, #-7]
   136d4:	bne	13670 <__assert_fail@plt+0x2740>
   136d8:	b	13624 <__assert_fail@plt+0x26f4>
   136dc:	movw	r3, #21846	; 0x5556
   136e0:	movt	r3, #21845	; 0x5555
   136e4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   136e8:	strd	r6, [sp, #8]
   136ec:	smull	ip, r3, r3, r1
   136f0:	str	r8, [sp, #16]
   136f4:	str	lr, [sp, #20]
   136f8:	sub	r3, r3, r1, asr #31
   136fc:	add	ip, r3, r3, lsl #1
   13700:	cmp	r1, ip
   13704:	addne	r3, r3, #1
   13708:	asr	r7, r3, #31
   1370c:	lsl	r5, r3, #2
   13710:	lsl	ip, r7, #2
   13714:	orr	ip, ip, r3, lsr #30
   13718:	cmp	ip, r5, asr #31
   1371c:	movne	r3, #1
   13720:	moveq	r3, #0
   13724:	orrs	r3, r3, r1, lsr #31
   13728:	beq	13750 <__assert_fail@plt+0x2820>
   1372c:	mov	r3, #0
   13730:	mov	r5, r3
   13734:	str	r3, [r2]
   13738:	mov	r0, r5
   1373c:	ldrd	r4, [sp]
   13740:	ldrd	r6, [sp, #8]
   13744:	ldr	r8, [sp, #16]
   13748:	add	sp, sp, #20
   1374c:	pop	{pc}		; (ldr pc, [sp], #4)
   13750:	add	r8, r5, #1
   13754:	mov	r7, r0
   13758:	mov	r0, r8
   1375c:	mov	r6, r2
   13760:	mov	r4, r1
   13764:	bl	179ac <__assert_fail@plt+0x6a7c>
   13768:	cmp	r0, #0
   1376c:	str	r0, [r6]
   13770:	moveq	r5, r8
   13774:	beq	13738 <__assert_fail@plt+0x2808>
   13778:	mov	r2, r0
   1377c:	mov	r3, r8
   13780:	mov	r1, r4
   13784:	mov	r0, r7
   13788:	bl	134e4 <__assert_fail@plt+0x25b4>
   1378c:	b	13738 <__assert_fail@plt+0x2808>
   13790:	movw	r3, #35932	; 0x8c5c
   13794:	movt	r3, #1
   13798:	ldrb	r0, [r3, r0]
   1379c:	mvn	r0, r0
   137a0:	ubfx	r0, r0, #7, #1
   137a4:	bx	lr
   137a8:	mov	r3, #0
   137ac:	str	r3, [r0]
   137b0:	bx	lr
   137b4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   137b8:	strd	r6, [sp, #8]
   137bc:	mov	r6, r1
   137c0:	mov	r1, r2
   137c4:	strd	r8, [sp, #16]
   137c8:	subs	r8, r0, #0
   137cc:	strd	sl, [sp, #24]
   137d0:	movne	fp, #1
   137d4:	moveq	fp, #0
   137d8:	str	lr, [sp, #32]
   137dc:	sub	sp, sp, #20
   137e0:	str	r3, [sp, #4]
   137e4:	ldr	r3, [sp, #56]	; 0x38
   137e8:	ldr	r7, [r3]
   137ec:	str	r7, [sp, #12]
   137f0:	beq	13a08 <__assert_fail@plt+0x2ad8>
   137f4:	ldr	sl, [r8]
   137f8:	adds	r9, r2, #0
   137fc:	movne	r9, #1
   13800:	cmp	sl, #0
   13804:	moveq	sl, r9
   13808:	movne	sl, #0
   1380c:	and	fp, fp, r9
   13810:	b	13860 <__assert_fail@plt+0x2930>
   13814:	ldrb	r2, [r6]
   13818:	cmp	r2, #10
   1381c:	beq	13948 <__assert_fail@plt+0x2a18>
   13820:	ldr	r2, [sp, #4]
   13824:	sub	r3, r7, r3
   13828:	cmp	r8, #0
   1382c:	add	r4, r6, r1
   13830:	str	r7, [sp, #12]
   13834:	sub	r3, r2, r3
   13838:	str	r3, [sp, #4]
   1383c:	bne	13a38 <__assert_fail@plt+0x2b08>
   13840:	mov	r0, r6
   13844:	add	r3, sp, #12
   13848:	add	r2, sp, #4
   1384c:	bl	13394 <__assert_fail@plt+0x2464>
   13850:	cmp	r0, #0
   13854:	beq	13a20 <__assert_fail@plt+0x2af0>
   13858:	ldr	r7, [sp, #12]
   1385c:	sub	r1, r4, r6
   13860:	cmp	sl, #0
   13864:	moveq	r3, r7
   13868:	bne	1390c <__assert_fail@plt+0x29dc>
   1386c:	cmp	r1, #0
   13870:	moveq	r0, r9
   13874:	movne	r0, #0
   13878:	cmp	r0, #0
   1387c:	bne	138dc <__assert_fail@plt+0x29ac>
   13880:	cmp	r1, #0
   13884:	bne	13814 <__assert_fail@plt+0x28e4>
   13888:	ldr	r2, [sp, #4]
   1388c:	sub	r3, r7, r3
   13890:	cmp	r8, #0
   13894:	str	r7, [sp, #12]
   13898:	sub	r3, r2, r3
   1389c:	str	r3, [sp, #4]
   138a0:	beq	13a14 <__assert_fail@plt+0x2ae4>
   138a4:	ldr	r3, [r8]
   138a8:	cmp	r3, #4
   138ac:	beq	13960 <__assert_fail@plt+0x2a30>
   138b0:	mov	r1, r3
   138b4:	mov	r4, r6
   138b8:	cmp	r1, #0
   138bc:	add	r0, r8, #4
   138c0:	beq	138d4 <__assert_fail@plt+0x29a4>
   138c4:	cmp	r1, #3
   138c8:	bgt	13844 <__assert_fail@plt+0x2914>
   138cc:	cmp	fp, #0
   138d0:	beq	13844 <__assert_fail@plt+0x2914>
   138d4:	ldr	r3, [sp, #12]
   138d8:	mov	r0, #1
   138dc:	ldr	r2, [sp, #56]	; 0x38
   138e0:	ldr	r2, [r2]
   138e4:	sub	r3, r2, r3
   138e8:	ldr	r2, [sp, #56]	; 0x38
   138ec:	str	r3, [r2]
   138f0:	add	sp, sp, #20
   138f4:	ldrd	r4, [sp]
   138f8:	ldrd	r6, [sp, #8]
   138fc:	ldrd	r8, [sp, #16]
   13900:	ldrd	sl, [sp, #24]
   13904:	add	sp, sp, #32
   13908:	pop	{pc}		; (ldr pc, [sp], #4)
   1390c:	add	r5, r6, r1
   13910:	b	1391c <__assert_fail@plt+0x29ec>
   13914:	ldr	r7, [sp, #12]
   13918:	add	r6, r6, #4
   1391c:	sub	r4, r5, r6
   13920:	add	r3, sp, #12
   13924:	mov	r1, r4
   13928:	add	r2, sp, #4
   1392c:	mov	r0, r6
   13930:	bl	13394 <__assert_fail@plt+0x2464>
   13934:	cmp	r0, #0
   13938:	bne	13914 <__assert_fail@plt+0x29e4>
   1393c:	mov	r1, r4
   13940:	ldr	r3, [sp, #12]
   13944:	b	1386c <__assert_fail@plt+0x293c>
   13948:	cmp	r8, #0
   1394c:	beq	139e8 <__assert_fail@plt+0x2ab8>
   13950:	add	r6, r6, #1
   13954:	sub	r1, r1, #1
   13958:	mov	r7, r3
   1395c:	b	13860 <__assert_fail@plt+0x2930>
   13960:	mov	r4, r6
   13964:	mov	r2, #0
   13968:	mov	r3, #1
   1396c:	mov	r5, r2
   13970:	str	r2, [r8]
   13974:	cmp	r1, #3
   13978:	movle	r1, #0
   1397c:	andgt	r1, r3, #1
   13980:	cmp	r1, #0
   13984:	beq	139a0 <__assert_fail@plt+0x2a70>
   13988:	mov	r2, #4
   1398c:	mov	r1, #10
   13990:	mov	r0, r6
   13994:	bl	10e94 <memchr@plt>
   13998:	cmp	r0, #0
   1399c:	beq	13a28 <__assert_fail@plt+0x2af8>
   139a0:	cmp	r4, r6
   139a4:	movls	r1, r5
   139a8:	bls	138b8 <__assert_fail@plt+0x2988>
   139ac:	ldrb	r2, [r6], #1
   139b0:	add	r1, r5, #1
   139b4:	mov	r3, r8
   139b8:	cmp	r2, #10
   139bc:	beq	139d4 <__assert_fail@plt+0x2aa4>
   139c0:	cmp	r1, #4
   139c4:	str	r1, [r3], r5
   139c8:	mov	r5, r1
   139cc:	strb	r2, [r3, #4]
   139d0:	beq	138b8 <__assert_fail@plt+0x2988>
   139d4:	cmp	r4, r6
   139d8:	bne	139ac <__assert_fail@plt+0x2a7c>
   139dc:	mov	r1, r5
   139e0:	mov	r6, r4
   139e4:	b	138b8 <__assert_fail@plt+0x2988>
   139e8:	ldr	r2, [sp, #4]
   139ec:	sub	r3, r7, r3
   139f0:	add	r4, r6, r1
   139f4:	mov	r0, r6
   139f8:	str	r7, [sp, #12]
   139fc:	sub	r3, r2, r3
   13a00:	str	r3, [sp, #4]
   13a04:	b	138c4 <__assert_fail@plt+0x2994>
   13a08:	mov	sl, #1
   13a0c:	mov	r9, sl
   13a10:	b	1380c <__assert_fail@plt+0x28dc>
   13a14:	mov	r3, r7
   13a18:	mov	r0, #1
   13a1c:	b	138dc <__assert_fail@plt+0x29ac>
   13a20:	ldr	r3, [sp, #12]
   13a24:	b	138dc <__assert_fail@plt+0x29ac>
   13a28:	mov	r1, #4
   13a2c:	mov	r0, r6
   13a30:	add	r6, r6, r1
   13a34:	b	13844 <__assert_fail@plt+0x2914>
   13a38:	ldr	r5, [r8]
   13a3c:	cmp	r5, #4
   13a40:	beq	13964 <__assert_fail@plt+0x2a34>
   13a44:	clz	r3, r5
   13a48:	lsr	r3, r3, #5
   13a4c:	b	13974 <__assert_fail@plt+0x2a44>
   13a50:	strd	r4, [sp, #-20]!	; 0xffffffec
   13a54:	mov	r5, r3
   13a58:	mov	r4, r2
   13a5c:	strd	r6, [sp, #8]
   13a60:	mov	r6, r0
   13a64:	asr	r0, r2, #2
   13a68:	str	lr, [sp, #16]
   13a6c:	sub	sp, sp, #20
   13a70:	mov	r7, r1
   13a74:	add	r3, r0, #1
   13a78:	add	r3, r3, r3, lsl #1
   13a7c:	mov	r0, r3
   13a80:	str	r3, [sp, #12]
   13a84:	bl	179ac <__assert_fail@plt+0x6a7c>
   13a88:	cmp	r0, #0
   13a8c:	str	r0, [r5]
   13a90:	beq	13ae8 <__assert_fail@plt+0x2bb8>
   13a94:	add	ip, sp, #12
   13a98:	mov	r3, r0
   13a9c:	mov	r2, r4
   13aa0:	mov	r1, r7
   13aa4:	mov	r0, r6
   13aa8:	str	ip, [sp]
   13aac:	bl	137b4 <__assert_fail@plt+0x2884>
   13ab0:	subs	r4, r0, #0
   13ab4:	beq	13af0 <__assert_fail@plt+0x2bc0>
   13ab8:	ldr	r3, [sp, #40]	; 0x28
   13abc:	cmp	r3, #0
   13ac0:	beq	13ae8 <__assert_fail@plt+0x2bb8>
   13ac4:	ldr	r3, [sp, #12]
   13ac8:	ldr	r2, [sp, #40]	; 0x28
   13acc:	str	r3, [r2]
   13ad0:	mov	r0, r4
   13ad4:	add	sp, sp, #20
   13ad8:	ldrd	r4, [sp]
   13adc:	ldrd	r6, [sp, #8]
   13ae0:	add	sp, sp, #16
   13ae4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ae8:	mov	r4, #1
   13aec:	b	13ad0 <__assert_fail@plt+0x2ba0>
   13af0:	ldr	r0, [r5]
   13af4:	bl	13d74 <__assert_fail@plt+0x2e44>
   13af8:	str	r4, [r5]
   13afc:	b	13ad0 <__assert_fail@plt+0x2ba0>
   13b00:	movw	r3, #41332	; 0xa174
   13b04:	movt	r3, #2
   13b08:	str	r0, [r3]
   13b0c:	bx	lr
   13b10:	movw	r3, #41332	; 0xa174
   13b14:	movt	r3, #2
   13b18:	strb	r0, [r3, #4]
   13b1c:	bx	lr
   13b20:	movw	r3, #41300	; 0xa154
   13b24:	movt	r3, #2
   13b28:	strd	r4, [sp, #-16]!
   13b2c:	ldr	r0, [r3]
   13b30:	str	r6, [sp, #8]
   13b34:	str	lr, [sp, #12]
   13b38:	sub	sp, sp, #8
   13b3c:	bl	17a40 <__assert_fail@plt+0x6b10>
   13b40:	cmp	r0, #0
   13b44:	beq	13b70 <__assert_fail@plt+0x2c40>
   13b48:	movw	r4, #41332	; 0xa174
   13b4c:	movt	r4, #2
   13b50:	ldrb	r6, [r4, #4]
   13b54:	bl	10e4c <__errno_location@plt>
   13b58:	mov	r5, r0
   13b5c:	cmp	r6, #0
   13b60:	beq	13b9c <__assert_fail@plt+0x2c6c>
   13b64:	ldr	r3, [r0]
   13b68:	cmp	r3, #32
   13b6c:	bne	13b9c <__assert_fail@plt+0x2c6c>
   13b70:	movw	r3, #41288	; 0xa148
   13b74:	movt	r3, #2
   13b78:	ldr	r0, [r3]
   13b7c:	bl	17a40 <__assert_fail@plt+0x6b10>
   13b80:	cmp	r0, #0
   13b84:	bne	13be4 <__assert_fail@plt+0x2cb4>
   13b88:	add	sp, sp, #8
   13b8c:	ldrd	r4, [sp]
   13b90:	ldr	r6, [sp, #8]
   13b94:	add	sp, sp, #12
   13b98:	pop	{pc}		; (ldr pc, [sp], #4)
   13b9c:	movw	r1, #35368	; 0x8a28
   13ba0:	movt	r1, #1
   13ba4:	mov	r2, #5
   13ba8:	mov	r0, #0
   13bac:	bl	10d68 <dcgettext@plt>
   13bb0:	mov	r6, r0
   13bb4:	ldr	r0, [r4]
   13bb8:	cmp	r0, #0
   13bbc:	beq	13bf4 <__assert_fail@plt+0x2cc4>
   13bc0:	ldr	r4, [r5]
   13bc4:	bl	15fa8 <__assert_fail@plt+0x5078>
   13bc8:	mov	r3, r0
   13bcc:	movw	r2, #35260	; 0x89bc
   13bd0:	movt	r2, #1
   13bd4:	mov	r0, #0
   13bd8:	str	r6, [sp]
   13bdc:	mov	r1, r4
   13be0:	bl	10dd4 <error@plt>
   13be4:	movw	r3, #41200	; 0xa0f0
   13be8:	movt	r3, #2
   13bec:	ldr	r0, [r3]
   13bf0:	bl	10d20 <_exit@plt>
   13bf4:	mov	r3, r6
   13bf8:	movw	r2, #35264	; 0x89c0
   13bfc:	movt	r2, #1
   13c00:	ldr	r1, [r5]
   13c04:	bl	10dd4 <error@plt>
   13c08:	b	13be4 <__assert_fail@plt+0x2cb4>
   13c0c:	b	10cf0 <posix_fadvise64@plt>
   13c10:	cmp	r0, #0
   13c14:	bxeq	lr
   13c18:	str	r4, [sp, #-16]!
   13c1c:	mov	r4, r1
   13c20:	strd	r6, [sp, #4]
   13c24:	mov	r6, #0
   13c28:	mov	r7, #0
   13c2c:	str	lr, [sp, #12]
   13c30:	sub	sp, sp, #16
   13c34:	bl	10e7c <fileno@plt>
   13c38:	mov	r2, r6
   13c3c:	mov	r3, r7
   13c40:	strd	r6, [sp]
   13c44:	str	r4, [sp, #8]
   13c48:	bl	10cf0 <posix_fadvise64@plt>
   13c4c:	add	sp, sp, #16
   13c50:	ldr	r4, [sp]
   13c54:	ldrd	r6, [sp, #4]
   13c58:	add	sp, sp, #12
   13c5c:	pop	{pc}		; (ldr pc, [sp], #4)
   13c60:	strd	r4, [sp, #-12]!
   13c64:	mov	r4, r0
   13c68:	str	lr, [sp, #8]
   13c6c:	sub	sp, sp, #12
   13c70:	bl	10e7c <fileno@plt>
   13c74:	cmp	r0, #0
   13c78:	mov	r0, r4
   13c7c:	blt	13d00 <__assert_fail@plt+0x2dd0>
   13c80:	bl	10df8 <__freading@plt>
   13c84:	cmp	r0, #0
   13c88:	bne	13ccc <__assert_fail@plt+0x2d9c>
   13c8c:	mov	r0, r4
   13c90:	bl	13d14 <__assert_fail@plt+0x2de4>
   13c94:	cmp	r0, #0
   13c98:	beq	13cfc <__assert_fail@plt+0x2dcc>
   13c9c:	bl	10e4c <__errno_location@plt>
   13ca0:	mov	r5, r0
   13ca4:	mov	r0, r4
   13ca8:	ldr	r4, [r5]
   13cac:	bl	10ea0 <fclose@plt>
   13cb0:	cmp	r4, #0
   13cb4:	mvnne	r0, #0
   13cb8:	strne	r4, [r5]
   13cbc:	add	sp, sp, #12
   13cc0:	ldrd	r4, [sp]
   13cc4:	add	sp, sp, #8
   13cc8:	pop	{pc}		; (ldr pc, [sp], #4)
   13ccc:	mov	r0, r4
   13cd0:	bl	10e7c <fileno@plt>
   13cd4:	mov	r1, #1
   13cd8:	mov	r2, #0
   13cdc:	mov	r3, #0
   13ce0:	str	r1, [sp]
   13ce4:	bl	10da4 <lseek64@plt>
   13ce8:	mvn	r3, #0
   13cec:	mvn	r2, #0
   13cf0:	cmp	r1, r3
   13cf4:	cmpeq	r0, r2
   13cf8:	bne	13c8c <__assert_fail@plt+0x2d5c>
   13cfc:	mov	r0, r4
   13d00:	add	sp, sp, #12
   13d04:	ldrd	r4, [sp]
   13d08:	ldr	lr, [sp, #8]
   13d0c:	add	sp, sp, #12
   13d10:	b	10ea0 <fclose@plt>
   13d14:	str	r4, [sp, #-8]!
   13d18:	subs	r4, r0, #0
   13d1c:	str	lr, [sp, #4]
   13d20:	sub	sp, sp, #8
   13d24:	beq	13d40 <__assert_fail@plt+0x2e10>
   13d28:	bl	10df8 <__freading@plt>
   13d2c:	cmp	r0, #0
   13d30:	beq	13d40 <__assert_fail@plt+0x2e10>
   13d34:	ldr	r3, [r4]
   13d38:	tst	r3, #256	; 0x100
   13d3c:	bne	13d58 <__assert_fail@plt+0x2e28>
   13d40:	mov	r0, r4
   13d44:	add	sp, sp, #8
   13d48:	ldr	r4, [sp]
   13d4c:	ldr	lr, [sp, #4]
   13d50:	add	sp, sp, #8
   13d54:	b	10cfc <fflush@plt>
   13d58:	mov	r1, #1
   13d5c:	mov	r2, #0
   13d60:	mov	r3, #0
   13d64:	mov	r0, r4
   13d68:	str	r1, [sp]
   13d6c:	bl	13dd4 <__assert_fail@plt+0x2ea4>
   13d70:	b	13d40 <__assert_fail@plt+0x2e10>
   13d74:	strd	r4, [sp, #-12]!
   13d78:	mov	r5, r0
   13d7c:	str	lr, [sp, #8]
   13d80:	sub	sp, sp, #12
   13d84:	bl	10e4c <__errno_location@plt>
   13d88:	mov	r4, r0
   13d8c:	mov	r2, #0
   13d90:	ldr	r3, [r4]
   13d94:	mov	r0, r5
   13d98:	str	r2, [r4]
   13d9c:	str	r3, [sp]
   13da0:	str	r3, [sp, #4]
   13da4:	bl	10d14 <free@plt>
   13da8:	ldr	r3, [r4]
   13dac:	add	r2, sp, #8
   13db0:	clz	r3, r3
   13db4:	lsr	r3, r3, #5
   13db8:	add	r3, r2, r3, lsl #2
   13dbc:	ldr	r3, [r3, #-8]
   13dc0:	str	r3, [r4]
   13dc4:	add	sp, sp, #12
   13dc8:	ldrd	r4, [sp]
   13dcc:	add	sp, sp, #8
   13dd0:	pop	{pc}		; (ldr pc, [sp], #4)
   13dd4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13dd8:	mov	r4, r0
   13ddc:	ldr	ip, [r0, #4]
   13de0:	strd	r6, [sp, #8]
   13de4:	str	lr, [sp, #20]
   13de8:	ldr	lr, [r0, #8]
   13dec:	str	r8, [sp, #16]
   13df0:	sub	sp, sp, #8
   13df4:	ldr	r5, [sp, #32]
   13df8:	cmp	lr, ip
   13dfc:	beq	13e24 <__assert_fail@plt+0x2ef4>
   13e00:	mov	r0, r4
   13e04:	str	r5, [sp, #32]
   13e08:	add	sp, sp, #8
   13e0c:	ldrd	r4, [sp]
   13e10:	ldrd	r6, [sp, #8]
   13e14:	ldr	r8, [sp, #16]
   13e18:	ldr	lr, [sp, #20]
   13e1c:	add	sp, sp, #24
   13e20:	b	10eac <fseeko64@plt>
   13e24:	ldr	ip, [r0, #16]
   13e28:	ldr	lr, [r0, #20]
   13e2c:	cmp	lr, ip
   13e30:	bne	13e00 <__assert_fail@plt+0x2ed0>
   13e34:	ldr	r8, [r0, #36]	; 0x24
   13e38:	cmp	r8, #0
   13e3c:	bne	13e00 <__assert_fail@plt+0x2ed0>
   13e40:	mov	r6, r2
   13e44:	mov	r7, r3
   13e48:	bl	10e7c <fileno@plt>
   13e4c:	mov	r2, r6
   13e50:	mov	r3, r7
   13e54:	str	r5, [sp]
   13e58:	bl	10da4 <lseek64@plt>
   13e5c:	mvn	r3, #0
   13e60:	mvn	r2, #0
   13e64:	cmp	r1, r3
   13e68:	cmpeq	r0, r2
   13e6c:	beq	13e9c <__assert_fail@plt+0x2f6c>
   13e70:	ldr	r3, [r4]
   13e74:	strd	r0, [r4, #80]	; 0x50
   13e78:	bic	r3, r3, #16
   13e7c:	str	r3, [r4]
   13e80:	mov	r0, r8
   13e84:	add	sp, sp, #8
   13e88:	ldrd	r4, [sp]
   13e8c:	ldrd	r6, [sp, #8]
   13e90:	ldr	r8, [sp, #16]
   13e94:	add	sp, sp, #20
   13e98:	pop	{pc}		; (ldr pc, [sp], #4)
   13e9c:	mvn	r8, #0
   13ea0:	b	13e80 <__assert_fail@plt+0x2f50>
   13ea4:	strd	r4, [sp, #-16]!
   13ea8:	subs	r4, r0, #0
   13eac:	str	r6, [sp, #8]
   13eb0:	str	lr, [sp, #12]
   13eb4:	beq	13f4c <__assert_fail@plt+0x301c>
   13eb8:	mov	r1, #47	; 0x2f
   13ebc:	bl	10ed0 <strrchr@plt>
   13ec0:	subs	r5, r0, #0
   13ec4:	beq	13f24 <__assert_fail@plt+0x2ff4>
   13ec8:	add	r6, r5, #1
   13ecc:	sub	r3, r6, r4
   13ed0:	cmp	r3, #6
   13ed4:	ble	13f24 <__assert_fail@plt+0x2ff4>
   13ed8:	movw	r1, #36308	; 0x8dd4
   13edc:	movt	r1, #1
   13ee0:	mov	r2, #7
   13ee4:	sub	r0, r5, #6
   13ee8:	bl	10f18 <strncmp@plt>
   13eec:	cmp	r0, #0
   13ef0:	bne	13f24 <__assert_fail@plt+0x2ff4>
   13ef4:	movw	r1, #36316	; 0x8ddc
   13ef8:	movt	r1, #1
   13efc:	mov	r2, #3
   13f00:	mov	r0, r6
   13f04:	bl	10f18 <strncmp@plt>
   13f08:	cmp	r0, #0
   13f0c:	movne	r4, r6
   13f10:	bne	13f24 <__assert_fail@plt+0x2ff4>
   13f14:	add	r4, r5, #4
   13f18:	movw	r3, #41272	; 0xa138
   13f1c:	movt	r3, #2
   13f20:	str	r4, [r3]
   13f24:	movw	r2, #41340	; 0xa17c
   13f28:	movt	r2, #2
   13f2c:	ldr	r6, [sp, #8]
   13f30:	movw	r3, #41276	; 0xa13c
   13f34:	movt	r3, #2
   13f38:	str	r4, [r2]
   13f3c:	str	r4, [r3]
   13f40:	ldrd	r4, [sp]
   13f44:	add	sp, sp, #12
   13f48:	pop	{pc}		; (ldr pc, [sp], #4)
   13f4c:	movw	r3, #41288	; 0xa148
   13f50:	movt	r3, #2
   13f54:	movw	r0, #36252	; 0x8d9c
   13f58:	movt	r0, #1
   13f5c:	ldr	r3, [r3]
   13f60:	mov	r2, #55	; 0x37
   13f64:	mov	r1, #1
   13f68:	bl	10d98 <fwrite@plt>
   13f6c:	bl	10f24 <abort@plt>
   13f70:	strd	r4, [sp, #-16]!
   13f74:	mov	r4, #0
   13f78:	mov	r5, #0
   13f7c:	cmp	r1, #10
   13f80:	str	r6, [sp, #8]
   13f84:	strd	r4, [r0]
   13f88:	strd	r4, [r0, #8]
   13f8c:	str	lr, [sp, #12]
   13f90:	strd	r4, [r0, #16]
   13f94:	strd	r4, [r0, #24]
   13f98:	strd	r4, [r0, #32]
   13f9c:	strd	r4, [r0, #40]	; 0x28
   13fa0:	beq	13fb8 <__assert_fail@plt+0x3088>
   13fa4:	ldrd	r4, [sp]
   13fa8:	str	r1, [r0]
   13fac:	ldr	r6, [sp, #8]
   13fb0:	add	sp, sp, #12
   13fb4:	pop	{pc}		; (ldr pc, [sp], #4)
   13fb8:	bl	10f24 <abort@plt>
   13fbc:	mov	r2, #5
   13fc0:	strd	r4, [sp, #-16]!
   13fc4:	mov	r5, r0
   13fc8:	str	r6, [sp, #8]
   13fcc:	mov	r6, r1
   13fd0:	mov	r1, r0
   13fd4:	mov	r0, #0
   13fd8:	str	lr, [sp, #12]
   13fdc:	bl	10d68 <dcgettext@plt>
   13fe0:	cmp	r5, r0
   13fe4:	mov	r4, r0
   13fe8:	beq	14000 <__assert_fail@plt+0x30d0>
   13fec:	mov	r0, r4
   13ff0:	ldrd	r4, [sp]
   13ff4:	ldr	r6, [sp, #8]
   13ff8:	add	sp, sp, #12
   13ffc:	pop	{pc}		; (ldr pc, [sp], #4)
   14000:	bl	17ac8 <__assert_fail@plt+0x6b98>
   14004:	ldrb	r3, [r0]
   14008:	bic	r3, r3, #32
   1400c:	cmp	r3, #85	; 0x55
   14010:	bne	14078 <__assert_fail@plt+0x3148>
   14014:	ldrb	r3, [r0, #1]
   14018:	bic	r3, r3, #32
   1401c:	cmp	r3, #84	; 0x54
   14020:	bne	140f8 <__assert_fail@plt+0x31c8>
   14024:	ldrb	r3, [r0, #2]
   14028:	bic	r3, r3, #32
   1402c:	cmp	r3, #70	; 0x46
   14030:	bne	140f8 <__assert_fail@plt+0x31c8>
   14034:	ldrb	r3, [r0, #3]
   14038:	cmp	r3, #45	; 0x2d
   1403c:	bne	140f8 <__assert_fail@plt+0x31c8>
   14040:	ldrb	r3, [r0, #4]
   14044:	cmp	r3, #56	; 0x38
   14048:	bne	140f8 <__assert_fail@plt+0x31c8>
   1404c:	ldrb	r3, [r0, #5]
   14050:	cmp	r3, #0
   14054:	bne	140f8 <__assert_fail@plt+0x31c8>
   14058:	ldrb	r2, [r4]
   1405c:	movw	r3, #36408	; 0x8e38
   14060:	movt	r3, #1
   14064:	movw	r4, #36420	; 0x8e44
   14068:	movt	r4, #1
   1406c:	cmp	r2, #96	; 0x60
   14070:	movne	r4, r3
   14074:	b	13fec <__assert_fail@plt+0x30bc>
   14078:	cmp	r3, #71	; 0x47
   1407c:	bne	140f8 <__assert_fail@plt+0x31c8>
   14080:	ldrb	r3, [r0, #1]
   14084:	bic	r3, r3, #32
   14088:	cmp	r3, #66	; 0x42
   1408c:	bne	140f8 <__assert_fail@plt+0x31c8>
   14090:	ldrb	r3, [r0, #2]
   14094:	cmp	r3, #49	; 0x31
   14098:	bne	140f8 <__assert_fail@plt+0x31c8>
   1409c:	ldrb	r3, [r0, #3]
   140a0:	cmp	r3, #56	; 0x38
   140a4:	bne	140f8 <__assert_fail@plt+0x31c8>
   140a8:	ldrb	r3, [r0, #4]
   140ac:	cmp	r3, #48	; 0x30
   140b0:	bne	140f8 <__assert_fail@plt+0x31c8>
   140b4:	ldrb	r3, [r0, #5]
   140b8:	cmp	r3, #51	; 0x33
   140bc:	bne	140f8 <__assert_fail@plt+0x31c8>
   140c0:	ldrb	r3, [r0, #6]
   140c4:	cmp	r3, #48	; 0x30
   140c8:	bne	140f8 <__assert_fail@plt+0x31c8>
   140cc:	ldrb	r3, [r0, #7]
   140d0:	cmp	r3, #0
   140d4:	bne	140f8 <__assert_fail@plt+0x31c8>
   140d8:	ldrb	r2, [r4]
   140dc:	movw	r3, #36412	; 0x8e3c
   140e0:	movt	r3, #1
   140e4:	movw	r4, #36416	; 0x8e40
   140e8:	movt	r4, #1
   140ec:	cmp	r2, #96	; 0x60
   140f0:	movne	r4, r3
   140f4:	b	13fec <__assert_fail@plt+0x30bc>
   140f8:	movw	r3, #36424	; 0x8e48
   140fc:	movt	r3, #1
   14100:	cmp	r6, #9
   14104:	movw	r4, #36404	; 0x8e34
   14108:	movt	r4, #1
   1410c:	movne	r4, r3
   14110:	b	13fec <__assert_fail@plt+0x30bc>
   14114:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14118:	strd	r6, [sp, #8]
   1411c:	strd	r8, [sp, #16]
   14120:	strd	sl, [sp, #24]
   14124:	mov	fp, r0
   14128:	mov	sl, r1
   1412c:	str	lr, [sp, #32]
   14130:	sub	sp, sp, #116	; 0x74
   14134:	ldr	r8, [sp, #152]	; 0x98
   14138:	str	r3, [sp, #28]
   1413c:	ldr	r3, [sp, #156]	; 0x9c
   14140:	str	r2, [sp, #32]
   14144:	and	r4, r3, #2
   14148:	ubfx	r3, r3, #1, #1
   1414c:	str	r3, [sp, #44]	; 0x2c
   14150:	bl	10db0 <__ctype_get_mb_cur_max@plt>
   14154:	str	r0, [sp, #64]	; 0x40
   14158:	cmp	r8, #10
   1415c:	ldrls	pc, [pc, r8, lsl #2]
   14160:	b	158d0 <__assert_fail@plt+0x49a0>
   14164:	andeq	r4, r1, r8, ror #10
   14168:	andeq	r4, r1, r4, lsl #12
   1416c:	andeq	r4, r1, r0, ror #23
   14170:	andeq	r4, r1, r4, lsr #12
   14174:	andeq	r4, r1, ip, asr #9
   14178:	andeq	r4, r1, r8, lsl r5
   1417c:	muleq	r1, r8, r5
   14180:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14184:	muleq	r1, r0, r1
   14188:	muleq	r1, r0, r1
   1418c:	muleq	r1, r0, r1
   14190:	cmp	r8, #10
   14194:	beq	141c0 <__assert_fail@plt+0x3290>
   14198:	mov	r1, r8
   1419c:	movw	r0, #36428	; 0x8e4c
   141a0:	movt	r0, #1
   141a4:	bl	13fbc <__assert_fail@plt+0x308c>
   141a8:	mov	r1, r8
   141ac:	str	r0, [sp, #164]	; 0xa4
   141b0:	movw	r0, #36424	; 0x8e48
   141b4:	movt	r0, #1
   141b8:	bl	13fbc <__assert_fail@plt+0x308c>
   141bc:	str	r0, [sp, #168]	; 0xa8
   141c0:	cmp	r4, #0
   141c4:	movne	r4, #0
   141c8:	beq	155ac <__assert_fail@plt+0x467c>
   141cc:	mov	r3, #1
   141d0:	mov	r5, #0
   141d4:	ldr	r0, [sp, #168]	; 0xa8
   141d8:	str	r3, [sp, #36]	; 0x24
   141dc:	str	r3, [sp, #40]	; 0x28
   141e0:	str	r5, [sp, #68]	; 0x44
   141e4:	bl	10e34 <strlen@plt>
   141e8:	ldr	r3, [sp, #168]	; 0xa8
   141ec:	str	r5, [sp, #48]	; 0x30
   141f0:	str	r0, [sp, #56]	; 0x38
   141f4:	str	r3, [sp, #60]	; 0x3c
   141f8:	str	r5, [sp, #72]	; 0x48
   141fc:	str	r8, [sp, #152]	; 0x98
   14200:	mov	r8, fp
   14204:	mov	r9, #0
   14208:	ldr	fp, [sp, #152]	; 0x98
   1420c:	ldr	r3, [sp, #28]
   14210:	cmn	r3, #1
   14214:	beq	14774 <__assert_fail@plt+0x3844>
   14218:	ldr	r3, [sp, #28]
   1421c:	subs	r6, r3, r9
   14220:	movne	r6, #1
   14224:	cmp	r6, #0
   14228:	beq	1478c <__assert_fail@plt+0x385c>
   1422c:	ldr	r0, [sp, #32]
   14230:	ldr	r7, [sp, #40]	; 0x28
   14234:	add	r3, r0, r9
   14238:	cmp	fp, #2
   1423c:	moveq	r7, #0
   14240:	andne	r7, r7, #1
   14244:	str	r3, [sp, #52]	; 0x34
   14248:	cmp	r7, #0
   1424c:	beq	14c28 <__assert_fail@plt+0x3cf8>
   14250:	ldr	r2, [sp, #56]	; 0x38
   14254:	cmp	r2, #0
   14258:	beq	14ec4 <__assert_fail@plt+0x3f94>
   1425c:	ldr	r1, [sp, #28]
   14260:	cmp	r2, #1
   14264:	mov	r3, r2
   14268:	movls	r3, #0
   1426c:	movhi	r3, #1
   14270:	add	r5, r9, r2
   14274:	cmn	r1, #1
   14278:	movne	r3, #0
   1427c:	cmp	r3, #0
   14280:	beq	1428c <__assert_fail@plt+0x335c>
   14284:	bl	10e34 <strlen@plt>
   14288:	str	r0, [sp, #28]
   1428c:	ldr	r3, [sp, #28]
   14290:	cmp	r5, r3
   14294:	bhi	14ec4 <__assert_fail@plt+0x3f94>
   14298:	ldr	r0, [sp, #52]	; 0x34
   1429c:	ldr	r2, [sp, #56]	; 0x38
   142a0:	ldr	r1, [sp, #60]	; 0x3c
   142a4:	bl	10d50 <memcmp@plt>
   142a8:	cmp	r0, #0
   142ac:	bne	14ec4 <__assert_fail@plt+0x3f94>
   142b0:	ldr	r3, [sp, #44]	; 0x2c
   142b4:	cmp	r3, #0
   142b8:	bne	157f4 <__assert_fail@plt+0x48c4>
   142bc:	ldr	r3, [sp, #52]	; 0x34
   142c0:	ldrb	r5, [r3]
   142c4:	cmp	r5, #126	; 0x7e
   142c8:	ldrls	pc, [pc, r5, lsl #2]
   142cc:	b	14b84 <__assert_fail@plt+0x3c54>
   142d0:	andeq	r4, r1, r8, lsl #21
   142d4:	andeq	r4, r1, r4, lsl #23
   142d8:	andeq	r4, r1, r4, lsl #23
   142dc:	andeq	r4, r1, r4, lsl #23
   142e0:	andeq	r4, r1, r4, lsl #23
   142e4:	andeq	r4, r1, r4, lsl #23
   142e8:	andeq	r4, r1, r4, lsl #23
   142ec:	andeq	r4, r1, ip, asr sl
   142f0:	andeq	r4, r1, r4, asr sl
   142f4:	muleq	r1, ip, r9
   142f8:	andeq	r4, r1, r8, asr #20
   142fc:	muleq	r1, r4, r9
   14300:	andeq	r4, r1, r4, lsr #20
   14304:	andeq	r4, r1, r0, ror sl
   14308:	andeq	r4, r1, r4, lsl #23
   1430c:	andeq	r4, r1, r4, lsl #23
   14310:	andeq	r4, r1, r4, lsl #23
   14314:	andeq	r4, r1, r4, lsl #23
   14318:	andeq	r4, r1, r4, lsl #23
   1431c:	andeq	r4, r1, r4, lsl #23
   14320:	andeq	r4, r1, r4, lsl #23
   14324:	andeq	r4, r1, r4, lsl #23
   14328:	andeq	r4, r1, r4, lsl #23
   1432c:	andeq	r4, r1, r4, lsl #23
   14330:	andeq	r4, r1, r4, lsl #23
   14334:	andeq	r4, r1, r4, lsl #23
   14338:	andeq	r4, r1, r4, lsl #23
   1433c:	andeq	r4, r1, r4, lsl #23
   14340:	andeq	r4, r1, r4, lsl #23
   14344:	andeq	r4, r1, r4, lsl #23
   14348:	andeq	r4, r1, r4, lsl #23
   1434c:	andeq	r4, r1, r4, lsl #23
   14350:	andeq	r4, r1, r0, ror #22
   14354:	andeq	r4, r1, r8, ror #20
   14358:	andeq	r4, r1, r8, ror #20
   1435c:	andeq	r4, r1, r4, asr #22
   14360:	andeq	r4, r1, r8, ror #20
   14364:	andeq	r4, r1, r8, ror fp
   14368:	andeq	r4, r1, r8, ror #20
   1436c:	andeq	r4, r1, r4, asr #17
   14370:	andeq	r4, r1, r8, ror #20
   14374:	andeq	r4, r1, r8, ror #20
   14378:	andeq	r4, r1, r8, ror #20
   1437c:	andeq	r4, r1, r8, ror fp
   14380:	andeq	r4, r1, r8, ror fp
   14384:	andeq	r4, r1, r8, ror fp
   14388:	andeq	r4, r1, r8, ror fp
   1438c:	andeq	r4, r1, r8, ror fp
   14390:	andeq	r4, r1, r8, ror fp
   14394:	andeq	r4, r1, r8, ror fp
   14398:	andeq	r4, r1, r8, ror fp
   1439c:	andeq	r4, r1, r8, ror fp
   143a0:	andeq	r4, r1, r8, ror fp
   143a4:	andeq	r4, r1, r8, ror fp
   143a8:	andeq	r4, r1, r8, ror fp
   143ac:	andeq	r4, r1, r8, ror fp
   143b0:	andeq	r4, r1, r8, ror fp
   143b4:	andeq	r4, r1, r8, ror fp
   143b8:	andeq	r4, r1, r8, ror fp
   143bc:	andeq	r4, r1, r8, ror #20
   143c0:	andeq	r4, r1, r8, ror #20
   143c4:	andeq	r4, r1, r8, ror #20
   143c8:	andeq	r4, r1, r8, ror #20
   143cc:	muleq	r1, r8, r8
   143d0:	andeq	r4, r1, r4, lsl #23
   143d4:	andeq	r4, r1, r8, ror fp
   143d8:	andeq	r4, r1, r8, ror fp
   143dc:	andeq	r4, r1, r8, ror fp
   143e0:	andeq	r4, r1, r8, ror fp
   143e4:	andeq	r4, r1, r8, ror fp
   143e8:	andeq	r4, r1, r8, ror fp
   143ec:	andeq	r4, r1, r8, ror fp
   143f0:	andeq	r4, r1, r8, ror fp
   143f4:	andeq	r4, r1, r8, ror fp
   143f8:	andeq	r4, r1, r8, ror fp
   143fc:	andeq	r4, r1, r8, ror fp
   14400:	andeq	r4, r1, r8, ror fp
   14404:	andeq	r4, r1, r8, ror fp
   14408:	andeq	r4, r1, r8, ror fp
   1440c:	andeq	r4, r1, r8, ror fp
   14410:	andeq	r4, r1, r8, ror fp
   14414:	andeq	r4, r1, r8, ror fp
   14418:	andeq	r4, r1, r8, ror fp
   1441c:	andeq	r4, r1, r8, ror fp
   14420:	andeq	r4, r1, r8, ror fp
   14424:	andeq	r4, r1, r8, ror fp
   14428:	andeq	r4, r1, r8, ror fp
   1442c:	andeq	r4, r1, r8, ror fp
   14430:	andeq	r4, r1, r8, ror fp
   14434:	andeq	r4, r1, r8, ror fp
   14438:	andeq	r4, r1, r8, ror fp
   1443c:	andeq	r4, r1, r8, ror #20
   14440:	andeq	r4, r1, r0, asr #16
   14444:	andeq	r4, r1, r8, ror fp
   14448:	andeq	r4, r1, r8, ror #20
   1444c:	andeq	r4, r1, r8, ror fp
   14450:	andeq	r4, r1, r8, ror #20
   14454:	andeq	r4, r1, r8, ror fp
   14458:	andeq	r4, r1, r8, ror fp
   1445c:	andeq	r4, r1, r8, ror fp
   14460:	andeq	r4, r1, r8, ror fp
   14464:	andeq	r4, r1, r8, ror fp
   14468:	andeq	r4, r1, r8, ror fp
   1446c:	andeq	r4, r1, r8, ror fp
   14470:	andeq	r4, r1, r8, ror fp
   14474:	andeq	r4, r1, r8, ror fp
   14478:	andeq	r4, r1, r8, ror fp
   1447c:	andeq	r4, r1, r8, ror fp
   14480:	andeq	r4, r1, r8, ror fp
   14484:	andeq	r4, r1, r8, ror fp
   14488:	andeq	r4, r1, r8, ror fp
   1448c:	andeq	r4, r1, r8, ror fp
   14490:	andeq	r4, r1, r8, ror fp
   14494:	andeq	r4, r1, r8, ror fp
   14498:	andeq	r4, r1, r8, ror fp
   1449c:	andeq	r4, r1, r8, ror fp
   144a0:	andeq	r4, r1, r8, ror fp
   144a4:	andeq	r4, r1, r8, ror fp
   144a8:	andeq	r4, r1, r8, ror fp
   144ac:	andeq	r4, r1, r8, ror fp
   144b0:	andeq	r4, r1, r8, ror fp
   144b4:	andeq	r4, r1, r8, ror fp
   144b8:	andeq	r4, r1, r8, ror fp
   144bc:	andeq	r4, r1, r4, ror #12
   144c0:	andeq	r4, r1, r8, ror #20
   144c4:	andeq	r4, r1, r4, ror #12
   144c8:	andeq	r4, r1, r4, asr #22
   144cc:	cmp	r4, #0
   144d0:	moveq	r3, #1
   144d4:	streq	r3, [sp, #40]	; 0x28
   144d8:	beq	14bec <__assert_fail@plt+0x3cbc>
   144dc:	mov	r3, #0
   144e0:	mov	r2, #1
   144e4:	mov	r4, r3
   144e8:	str	r2, [sp, #36]	; 0x24
   144ec:	str	r2, [sp, #44]	; 0x2c
   144f0:	str	r2, [sp, #56]	; 0x38
   144f4:	str	r3, [sp, #68]	; 0x44
   144f8:	movw	r3, #36424	; 0x8e48
   144fc:	movt	r3, #1
   14500:	str	r4, [sp, #40]	; 0x28
   14504:	mov	r8, #2
   14508:	str	r4, [sp, #48]	; 0x30
   1450c:	str	r3, [sp, #60]	; 0x3c
   14510:	str	r4, [sp, #72]	; 0x48
   14514:	b	141fc <__assert_fail@plt+0x32cc>
   14518:	cmp	r4, #0
   1451c:	bne	15768 <__assert_fail@plt+0x4838>
   14520:	cmp	sl, #0
   14524:	beq	15528 <__assert_fail@plt+0x45f8>
   14528:	mov	r3, #34	; 0x22
   1452c:	mov	r1, r4
   14530:	mov	r2, #1
   14534:	strb	r3, [fp]
   14538:	movw	r3, #36404	; 0x8e34
   1453c:	movt	r3, #1
   14540:	mov	r4, r2
   14544:	str	r2, [sp, #36]	; 0x24
   14548:	str	r2, [sp, #40]	; 0x28
   1454c:	str	r1, [sp, #44]	; 0x2c
   14550:	str	r1, [sp, #48]	; 0x30
   14554:	str	r2, [sp, #56]	; 0x38
   14558:	str	r3, [sp, #60]	; 0x3c
   1455c:	str	r1, [sp, #68]	; 0x44
   14560:	str	r1, [sp, #72]	; 0x48
   14564:	b	141fc <__assert_fail@plt+0x32cc>
   14568:	mov	r3, #0
   1456c:	mov	r4, r8
   14570:	str	r3, [sp, #40]	; 0x28
   14574:	str	r3, [sp, #44]	; 0x2c
   14578:	str	r3, [sp, #48]	; 0x30
   1457c:	str	r8, [sp, #56]	; 0x38
   14580:	str	r3, [sp, #60]	; 0x3c
   14584:	str	r3, [sp, #68]	; 0x44
   14588:	mov	r3, #1
   1458c:	str	r3, [sp, #36]	; 0x24
   14590:	str	r8, [sp, #72]	; 0x48
   14594:	b	141fc <__assert_fail@plt+0x32cc>
   14598:	mov	r3, #1
   1459c:	mov	r2, #0
   145a0:	mov	r4, r2
   145a4:	mov	r8, #5
   145a8:	str	r3, [sp, #36]	; 0x24
   145ac:	str	r3, [sp, #40]	; 0x28
   145b0:	str	r3, [sp, #44]	; 0x2c
   145b4:	str	r2, [sp, #48]	; 0x30
   145b8:	str	r3, [sp, #56]	; 0x38
   145bc:	movw	r3, #36404	; 0x8e34
   145c0:	movt	r3, #1
   145c4:	str	r3, [sp, #60]	; 0x3c
   145c8:	str	r2, [sp, #68]	; 0x44
   145cc:	str	r2, [sp, #72]	; 0x48
   145d0:	b	141fc <__assert_fail@plt+0x32cc>
   145d4:	mov	r3, #0
   145d8:	mov	r2, #1
   145dc:	mov	r4, r3
   145e0:	str	r2, [sp, #36]	; 0x24
   145e4:	str	r2, [sp, #40]	; 0x28
   145e8:	str	r3, [sp, #44]	; 0x2c
   145ec:	str	r3, [sp, #48]	; 0x30
   145f0:	str	r3, [sp, #56]	; 0x38
   145f4:	str	r3, [sp, #60]	; 0x3c
   145f8:	str	r3, [sp, #68]	; 0x44
   145fc:	str	r3, [sp, #72]	; 0x48
   14600:	b	141fc <__assert_fail@plt+0x32cc>
   14604:	mov	r2, #1
   14608:	mov	r3, #0
   1460c:	mov	r4, r3
   14610:	str	r2, [sp, #36]	; 0x24
   14614:	str	r2, [sp, #44]	; 0x2c
   14618:	str	r8, [sp, #56]	; 0x38
   1461c:	str	r3, [sp, #68]	; 0x44
   14620:	b	144f8 <__assert_fail@plt+0x35c8>
   14624:	mov	r3, #1
   14628:	mov	r2, #0
   1462c:	mov	r4, r2
   14630:	mov	r8, #2
   14634:	str	r3, [sp, #36]	; 0x24
   14638:	str	r3, [sp, #40]	; 0x28
   1463c:	str	r3, [sp, #44]	; 0x2c
   14640:	str	r2, [sp, #48]	; 0x30
   14644:	str	r3, [sp, #56]	; 0x38
   14648:	movw	r3, #36424	; 0x8e48
   1464c:	movt	r3, #1
   14650:	str	r3, [sp, #60]	; 0x3c
   14654:	str	r2, [sp, #68]	; 0x44
   14658:	str	r2, [sp, #72]	; 0x48
   1465c:	b	141fc <__assert_fail@plt+0x32cc>
   14660:	mov	r7, #0
   14664:	ldr	r3, [sp, #28]
   14668:	cmn	r3, #1
   1466c:	beq	15144 <__assert_fail@plt+0x4214>
   14670:	ldr	r3, [sp, #28]
   14674:	subs	r2, r3, #1
   14678:	movne	r2, #1
   1467c:	sub	r3, fp, #2
   14680:	cmp	r2, #0
   14684:	clz	r3, r3
   14688:	lsr	r3, r3, #5
   1468c:	bne	14698 <__assert_fail@plt+0x3768>
   14690:	cmp	r9, #0
   14694:	beq	14ea4 <__assert_fail@plt+0x3f74>
   14698:	mov	r6, #0
   1469c:	ldr	r2, [sp, #40]	; 0x28
   146a0:	eor	r2, r2, #1
   146a4:	orrs	r3, r3, r2
   146a8:	bne	14880 <__assert_fail@plt+0x3950>
   146ac:	ldr	r2, [sp, #160]	; 0xa0
   146b0:	cmp	r2, #0
   146b4:	beq	146d4 <__assert_fail@plt+0x37a4>
   146b8:	ldr	r0, [sp, #160]	; 0xa0
   146bc:	ubfx	r1, r5, #5, #8
   146c0:	and	r2, r5, #31
   146c4:	ldr	r1, [r0, r1, lsl #2]
   146c8:	lsr	r2, r1, r2
   146cc:	tst	r2, #1
   146d0:	bne	146dc <__assert_fail@plt+0x37ac>
   146d4:	cmp	r7, #0
   146d8:	beq	1494c <__assert_fail@plt+0x3a1c>
   146dc:	ldr	r2, [sp, #44]	; 0x2c
   146e0:	sub	r3, fp, #2
   146e4:	clz	r3, r3
   146e8:	lsr	r3, r3, #5
   146ec:	cmp	r2, #0
   146f0:	bne	15498 <__assert_fail@plt+0x4568>
   146f4:	ldr	r2, [sp, #48]	; 0x30
   146f8:	eor	r2, r2, #1
   146fc:	ands	r3, r3, r2
   14700:	beq	14738 <__assert_fail@plt+0x3808>
   14704:	cmp	sl, r4
   14708:	str	r3, [sp, #48]	; 0x30
   1470c:	movhi	r2, #39	; 0x27
   14710:	strbhi	r2, [r8, r4]
   14714:	add	r2, r4, #1
   14718:	cmp	sl, r2
   1471c:	movhi	r1, #36	; 0x24
   14720:	strbhi	r1, [r8, r2]
   14724:	add	r2, r4, #2
   14728:	add	r4, r4, #3
   1472c:	cmp	sl, r2
   14730:	movhi	r1, #39	; 0x27
   14734:	strbhi	r1, [r8, r2]
   14738:	cmp	r4, sl
   1473c:	add	r9, r9, #1
   14740:	movcc	r3, #92	; 0x5c
   14744:	strbcc	r3, [r8, r4]
   14748:	add	r4, r4, #1
   1474c:	cmp	r4, sl
   14750:	ldr	r3, [sp, #36]	; 0x24
   14754:	strbcc	r5, [r8, r4]
   14758:	cmp	r6, #0
   1475c:	add	r4, r4, #1
   14760:	moveq	r3, #0
   14764:	str	r3, [sp, #36]	; 0x24
   14768:	ldr	r3, [sp, #28]
   1476c:	cmn	r3, #1
   14770:	bne	14218 <__assert_fail@plt+0x32e8>
   14774:	ldr	r3, [sp, #32]
   14778:	ldrb	r6, [r3, r9]
   1477c:	adds	r6, r6, #0
   14780:	movne	r6, #1
   14784:	cmp	r6, #0
   14788:	bne	1422c <__assert_fail@plt+0x32fc>
   1478c:	str	fp, [sp, #152]	; 0x98
   14790:	mov	fp, r8
   14794:	cmp	r4, #0
   14798:	ldr	r1, [sp, #44]	; 0x2c
   1479c:	movne	r3, #0
   147a0:	ldr	r8, [sp, #152]	; 0x98
   147a4:	sub	r2, r8, #2
   147a8:	clz	r2, r2
   147ac:	lsr	r2, r2, #5
   147b0:	andeq	r3, r2, r1
   147b4:	cmp	r3, #0
   147b8:	bne	15874 <__assert_fail@plt+0x4944>
   147bc:	eor	r3, r1, #1
   147c0:	ands	r2, r2, r3
   147c4:	beq	157a0 <__assert_fail@plt+0x4870>
   147c8:	ldr	r3, [sp, #68]	; 0x44
   147cc:	cmp	r3, #0
   147d0:	beq	157a4 <__assert_fail@plt+0x4874>
   147d4:	ldr	r3, [sp, #36]	; 0x24
   147d8:	cmp	r3, #0
   147dc:	bne	15830 <__assert_fail@plt+0x4900>
   147e0:	ldr	r3, [sp, #72]	; 0x48
   147e4:	adds	r3, r3, #0
   147e8:	movne	r3, #1
   147ec:	cmp	sl, #0
   147f0:	movne	r3, #0
   147f4:	cmp	r3, #0
   147f8:	ldreq	r2, [sp, #68]	; 0x44
   147fc:	beq	157a4 <__assert_fail@plt+0x4874>
   14800:	ldr	r2, [sp, #72]	; 0x48
   14804:	str	r3, [sp, #68]	; 0x44
   14808:	movw	r3, #36424	; 0x8e48
   1480c:	movt	r3, #1
   14810:	mov	r1, #39	; 0x27
   14814:	mov	r4, #1
   14818:	ldr	sl, [sp, #72]	; 0x48
   1481c:	mov	r8, #2
   14820:	str	r3, [sp, #60]	; 0x3c
   14824:	mov	r3, #0
   14828:	strb	r1, [fp]
   1482c:	str	r3, [sp, #44]	; 0x2c
   14830:	str	r4, [sp, #56]	; 0x38
   14834:	str	r2, [sp, #72]	; 0x48
   14838:	b	141fc <__assert_fail@plt+0x32cc>
   1483c:	mov	r7, #0
   14840:	cmp	fp, #2
   14844:	beq	15124 <__assert_fail@plt+0x41f4>
   14848:	ldr	r2, [sp, #40]	; 0x28
   1484c:	ldr	r3, [sp, #56]	; 0x38
   14850:	ldr	r1, [sp, #44]	; 0x2c
   14854:	cmp	r3, #0
   14858:	moveq	r3, #0
   1485c:	andne	r3, r2, r1
   14860:	cmp	r3, #0
   14864:	moveq	r5, #92	; 0x5c
   14868:	moveq	r3, r5
   1486c:	bne	15130 <__assert_fail@plt+0x4200>
   14870:	ldr	r2, [sp, #40]	; 0x28
   14874:	cmp	r2, #0
   14878:	bne	1556c <__assert_fail@plt+0x463c>
   1487c:	mov	r6, #0
   14880:	ldr	r3, [sp, #44]	; 0x2c
   14884:	cmp	r3, #0
   14888:	beq	1511c <__assert_fail@plt+0x41ec>
   1488c:	mov	r3, #0
   14890:	b	146ac <__assert_fail@plt+0x377c>
   14894:	mov	r7, #0
   14898:	cmp	fp, #2
   1489c:	beq	15194 <__assert_fail@plt+0x4264>
   148a0:	cmp	fp, #5
   148a4:	beq	15158 <__assert_fail@plt+0x4228>
   148a8:	sub	r3, fp, #2
   148ac:	mov	r6, #0
   148b0:	clz	r3, r3
   148b4:	mov	r5, #63	; 0x3f
   148b8:	lsr	r3, r3, #5
   148bc:	b	1469c <__assert_fail@plt+0x376c>
   148c0:	mov	r7, #0
   148c4:	cmp	fp, #2
   148c8:	movne	r3, #0
   148cc:	movne	r5, #39	; 0x27
   148d0:	strne	r6, [sp, #68]	; 0x44
   148d4:	bne	1469c <__assert_fail@plt+0x376c>
   148d8:	ldr	r3, [sp, #44]	; 0x2c
   148dc:	cmp	r3, #0
   148e0:	bne	1559c <__assert_fail@plt+0x466c>
   148e4:	ldr	r3, [sp, #72]	; 0x48
   148e8:	cmp	sl, #0
   148ec:	clz	r3, r3
   148f0:	lsr	r3, r3, #5
   148f4:	moveq	r3, #0
   148f8:	cmp	r3, #0
   148fc:	bne	154c8 <__assert_fail@plt+0x4598>
   14900:	cmp	sl, r4
   14904:	movhi	r3, #39	; 0x27
   14908:	strbhi	r3, [r8, r4]
   1490c:	add	r3, r4, #1
   14910:	cmp	sl, r3
   14914:	movhi	r2, #92	; 0x5c
   14918:	strbhi	r2, [r8, r3]
   1491c:	add	r3, r4, #2
   14920:	cmp	sl, r3
   14924:	bls	14930 <__assert_fail@plt+0x3a00>
   14928:	mov	r2, #39	; 0x27
   1492c:	strb	r2, [r8, r3]
   14930:	mov	r3, #0
   14934:	cmp	r7, #0
   14938:	add	r4, r4, #3
   1493c:	mov	r5, #39	; 0x27
   14940:	str	r3, [sp, #48]	; 0x30
   14944:	str	r6, [sp, #68]	; 0x44
   14948:	bne	146dc <__assert_fail@plt+0x37ac>
   1494c:	ldr	r2, [sp, #48]	; 0x30
   14950:	eor	r3, r3, #1
   14954:	add	r9, r9, #1
   14958:	and	r3, r3, r2
   1495c:	uxtb	r3, r3
   14960:	cmp	r3, #0
   14964:	beq	1474c <__assert_fail@plt+0x381c>
   14968:	cmp	sl, r4
   1496c:	movhi	r3, #39	; 0x27
   14970:	strbhi	r3, [r8, r4]
   14974:	add	r3, r4, #1
   14978:	add	r4, r4, #2
   1497c:	cmp	sl, r3
   14980:	movhi	r2, #39	; 0x27
   14984:	strbhi	r2, [r8, r3]
   14988:	mov	r3, #0
   1498c:	str	r3, [sp, #48]	; 0x30
   14990:	b	1474c <__assert_fail@plt+0x381c>
   14994:	mov	r3, #118	; 0x76
   14998:	b	14870 <__assert_fail@plt+0x3940>
   1499c:	mov	r3, #116	; 0x74
   149a0:	ldr	r2, [sp, #44]	; 0x2c
   149a4:	cmp	fp, #2
   149a8:	movne	r2, #0
   149ac:	andeq	r2, r2, #1
   149b0:	cmp	r2, #0
   149b4:	beq	14870 <__assert_fail@plt+0x3940>
   149b8:	mov	fp, r8
   149bc:	mov	r8, #2
   149c0:	ldr	r3, [sp, #40]	; 0x28
   149c4:	cmp	r3, #0
   149c8:	movne	r8, #4
   149cc:	mov	lr, #0
   149d0:	mov	r0, fp
   149d4:	ldr	r2, [sp, #32]
   149d8:	ldr	r3, [sp, #156]	; 0x9c
   149dc:	ldr	r1, [sp, #164]	; 0xa4
   149e0:	bic	ip, r3, #2
   149e4:	ldr	r3, [sp, #28]
   149e8:	stm	sp, {r8, ip, lr}
   149ec:	ldr	ip, [sp, #168]	; 0xa8
   149f0:	str	r1, [sp, #12]
   149f4:	mov	r1, sl
   149f8:	str	ip, [sp, #16]
   149fc:	bl	14114 <__assert_fail@plt+0x31e4>
   14a00:	mov	r4, r0
   14a04:	mov	r0, r4
   14a08:	add	sp, sp, #116	; 0x74
   14a0c:	ldrd	r4, [sp]
   14a10:	ldrd	r6, [sp, #8]
   14a14:	ldrd	r8, [sp, #16]
   14a18:	ldrd	sl, [sp, #24]
   14a1c:	add	sp, sp, #32
   14a20:	pop	{pc}		; (ldr pc, [sp], #4)
   14a24:	mov	r5, #102	; 0x66
   14a28:	ldr	r2, [sp, #44]	; 0x2c
   14a2c:	sub	r3, fp, #2
   14a30:	clz	r3, r3
   14a34:	lsr	r3, r3, #5
   14a38:	cmp	r2, #0
   14a3c:	bne	15498 <__assert_fail@plt+0x4568>
   14a40:	mov	r6, r2
   14a44:	b	14738 <__assert_fail@plt+0x3808>
   14a48:	mov	r5, #110	; 0x6e
   14a4c:	mov	r6, #0
   14a50:	b	146dc <__assert_fail@plt+0x37ac>
   14a54:	mov	r5, #98	; 0x62
   14a58:	b	14a28 <__assert_fail@plt+0x3af8>
   14a5c:	mov	r5, #97	; 0x61
   14a60:	b	14a28 <__assert_fail@plt+0x3af8>
   14a64:	mov	r7, #0
   14a68:	mov	r6, #0
   14a6c:	b	1488c <__assert_fail@plt+0x395c>
   14a70:	mov	r5, #114	; 0x72
   14a74:	b	14a4c <__assert_fail@plt+0x3b1c>
   14a78:	ldr	r3, [sp, #44]	; 0x2c
   14a7c:	cmp	r3, #0
   14a80:	bne	15810 <__assert_fail@plt+0x48e0>
   14a84:	mov	r7, r3
   14a88:	ldr	r3, [sp, #48]	; 0x30
   14a8c:	sub	r2, fp, #2
   14a90:	clz	r2, r2
   14a94:	lsr	r2, r2, #5
   14a98:	eor	r3, r3, #1
   14a9c:	ands	r3, r2, r3
   14aa0:	beq	154b4 <__assert_fail@plt+0x4584>
   14aa4:	cmp	sl, r4
   14aa8:	movhi	r1, #39	; 0x27
   14aac:	strbhi	r1, [r8, r4]
   14ab0:	add	r1, r4, #1
   14ab4:	cmp	sl, r1
   14ab8:	movhi	r0, #36	; 0x24
   14abc:	strbhi	r0, [r8, r1]
   14ac0:	add	r1, r4, #2
   14ac4:	cmp	sl, r1
   14ac8:	movhi	r0, #39	; 0x27
   14acc:	strbhi	r0, [r8, r1]
   14ad0:	add	r1, r4, #3
   14ad4:	cmp	sl, r1
   14ad8:	bls	1550c <__assert_fail@plt+0x45dc>
   14adc:	mov	r4, r1
   14ae0:	mov	r1, #92	; 0x5c
   14ae4:	mov	r0, r4
   14ae8:	str	r3, [sp, #48]	; 0x30
   14aec:	strb	r1, [r8, r4]
   14af0:	cmp	fp, #2
   14af4:	add	r4, r4, #1
   14af8:	beq	1555c <__assert_fail@plt+0x462c>
   14afc:	ldr	r1, [sp, #28]
   14b00:	add	r3, r9, #1
   14b04:	cmp	r3, r1
   14b08:	bcs	14b20 <__assert_fail@plt+0x3bf0>
   14b0c:	ldr	r1, [sp, #32]
   14b10:	ldrb	r3, [r1, r3]
   14b14:	sub	r3, r3, #48	; 0x30
   14b18:	cmp	r3, #9
   14b1c:	bls	15574 <__assert_fail@plt+0x4644>
   14b20:	mov	r5, #48	; 0x30
   14b24:	ldr	r3, [sp, #40]	; 0x28
   14b28:	eor	r3, r3, #1
   14b2c:	orrs	r2, r2, r3
   14b30:	mov	r3, r6
   14b34:	moveq	r6, r2
   14b38:	beq	146ac <__assert_fail@plt+0x377c>
   14b3c:	mov	r6, #0
   14b40:	b	146d4 <__assert_fail@plt+0x37a4>
   14b44:	cmp	r9, #0
   14b48:	mov	r2, r7
   14b4c:	bne	150ec <__assert_fail@plt+0x41bc>
   14b50:	mov	r6, r7
   14b54:	mov	r3, r9
   14b58:	mov	r7, r2
   14b5c:	b	1469c <__assert_fail@plt+0x376c>
   14b60:	mov	r2, r7
   14b64:	mov	r6, r7
   14b68:	mov	r3, #0
   14b6c:	mov	r7, r2
   14b70:	mov	r5, #32
   14b74:	b	1469c <__assert_fail@plt+0x376c>
   14b78:	mov	r6, r7
   14b7c:	b	1488c <__assert_fail@plt+0x395c>
   14b80:	mov	r7, #0
   14b84:	ldr	r3, [sp, #64]	; 0x40
   14b88:	cmp	r3, #1
   14b8c:	bne	151ac <__assert_fail@plt+0x427c>
   14b90:	bl	10e1c <__ctype_b_loc@plt>
   14b94:	ldr	r2, [r0]
   14b98:	sxth	r3, r5
   14b9c:	lsl	r3, r3, #1
   14ba0:	ldr	r1, [sp, #64]	; 0x40
   14ba4:	ldrh	r3, [r2, r3]
   14ba8:	mov	ip, r1
   14bac:	and	r3, r3, #16384	; 0x4000
   14bb0:	cmp	r3, #0
   14bb4:	ldr	r3, [sp, #40]	; 0x28
   14bb8:	movne	r6, #1
   14bbc:	moveq	r6, #0
   14bc0:	movne	r2, #0
   14bc4:	andeq	r2, r3, #1
   14bc8:	cmp	r2, #0
   14bcc:	bne	154f4 <__assert_fail@plt+0x45c4>
   14bd0:	sub	r3, fp, #2
   14bd4:	clz	r3, r3
   14bd8:	lsr	r3, r3, #5
   14bdc:	b	1469c <__assert_fail@plt+0x376c>
   14be0:	cmp	r4, #0
   14be4:	bne	15884 <__assert_fail@plt+0x4954>
   14be8:	str	r4, [sp, #40]	; 0x28
   14bec:	cmp	sl, #0
   14bf0:	bne	158b4 <__assert_fail@plt+0x4984>
   14bf4:	mov	r3, #1
   14bf8:	movw	r2, #36424	; 0x8e48
   14bfc:	movt	r2, #1
   14c00:	mov	r4, r3
   14c04:	mov	r8, #2
   14c08:	str	r3, [sp, #36]	; 0x24
   14c0c:	str	sl, [sp, #44]	; 0x2c
   14c10:	str	sl, [sp, #48]	; 0x30
   14c14:	str	r3, [sp, #56]	; 0x38
   14c18:	str	r2, [sp, #60]	; 0x3c
   14c1c:	str	sl, [sp, #68]	; 0x44
   14c20:	str	sl, [sp, #72]	; 0x48
   14c24:	b	141fc <__assert_fail@plt+0x32cc>
   14c28:	ldr	r3, [sp, #32]
   14c2c:	ldrb	r5, [r3, r9]
   14c30:	cmp	r5, #126	; 0x7e
   14c34:	ldrls	pc, [pc, r5, lsl #2]
   14c38:	b	14b84 <__assert_fail@plt+0x3c54>
   14c3c:	andeq	r4, r1, r0, ror #28
   14c40:	andeq	r4, r1, r4, lsl #23
   14c44:	andeq	r4, r1, r4, lsl #23
   14c48:	andeq	r4, r1, r4, lsl #23
   14c4c:	andeq	r4, r1, r4, lsl #23
   14c50:	andeq	r4, r1, r4, lsl #23
   14c54:	andeq	r4, r1, r4, lsl #23
   14c58:	andeq	r4, r1, r8, asr lr
   14c5c:	andeq	r4, r1, r0, asr lr
   14c60:	muleq	r1, ip, r9
   14c64:	andeq	r4, r1, r8, asr #28
   14c68:	muleq	r1, r4, r9
   14c6c:	andeq	r4, r1, r0, asr #28
   14c70:	andeq	r4, r1, r8, lsr lr
   14c74:	andeq	r4, r1, r4, lsl #23
   14c78:	andeq	r4, r1, r4, lsl #23
   14c7c:	andeq	r4, r1, r4, lsl #23
   14c80:	andeq	r4, r1, r4, lsl #23
   14c84:	andeq	r4, r1, r4, lsl #23
   14c88:	andeq	r4, r1, r4, lsl #23
   14c8c:	andeq	r4, r1, r4, lsl #23
   14c90:	andeq	r4, r1, r4, lsl #23
   14c94:	andeq	r4, r1, r4, lsl #23
   14c98:	andeq	r4, r1, r4, lsl #23
   14c9c:	andeq	r4, r1, r4, lsl #23
   14ca0:	andeq	r4, r1, r4, lsl #23
   14ca4:	andeq	r4, r1, r4, lsl #23
   14ca8:	andeq	r4, r1, r4, lsl #23
   14cac:	andeq	r4, r1, r4, lsl #23
   14cb0:	andeq	r4, r1, r4, lsl #23
   14cb4:	andeq	r4, r1, r4, lsl #23
   14cb8:	andeq	r4, r1, r4, lsl #23
   14cbc:			; <UNDEFINED> instruction: 0x00014eb4
   14cc0:	muleq	r1, r4, lr
   14cc4:	muleq	r1, r4, lr
   14cc8:	andeq	r4, r1, r4, lsl #29
   14ccc:	muleq	r1, r4, lr
   14cd0:	ldrdeq	r4, [r1], -r0
   14cd4:	muleq	r1, r4, lr
   14cd8:	andeq	r4, r1, r4, asr #17
   14cdc:	muleq	r1, r4, lr
   14ce0:	muleq	r1, r4, lr
   14ce4:	muleq	r1, r4, lr
   14ce8:	ldrdeq	r4, [r1], -r0
   14cec:	ldrdeq	r4, [r1], -r0
   14cf0:	ldrdeq	r4, [r1], -r0
   14cf4:	ldrdeq	r4, [r1], -r0
   14cf8:	ldrdeq	r4, [r1], -r0
   14cfc:	ldrdeq	r4, [r1], -r0
   14d00:	ldrdeq	r4, [r1], -r0
   14d04:	ldrdeq	r4, [r1], -r0
   14d08:	ldrdeq	r4, [r1], -r0
   14d0c:	ldrdeq	r4, [r1], -r0
   14d10:	ldrdeq	r4, [r1], -r0
   14d14:	ldrdeq	r4, [r1], -r0
   14d18:	ldrdeq	r4, [r1], -r0
   14d1c:	ldrdeq	r4, [r1], -r0
   14d20:	ldrdeq	r4, [r1], -r0
   14d24:	ldrdeq	r4, [r1], -r0
   14d28:	muleq	r1, r4, lr
   14d2c:	muleq	r1, r4, lr
   14d30:	muleq	r1, r4, lr
   14d34:	muleq	r1, r4, lr
   14d38:	muleq	r1, r8, r8
   14d3c:	andeq	r4, r1, r4, lsl #23
   14d40:	ldrdeq	r4, [r1], -r0
   14d44:	ldrdeq	r4, [r1], -r0
   14d48:	ldrdeq	r4, [r1], -r0
   14d4c:	ldrdeq	r4, [r1], -r0
   14d50:	ldrdeq	r4, [r1], -r0
   14d54:	ldrdeq	r4, [r1], -r0
   14d58:	ldrdeq	r4, [r1], -r0
   14d5c:	ldrdeq	r4, [r1], -r0
   14d60:	ldrdeq	r4, [r1], -r0
   14d64:	ldrdeq	r4, [r1], -r0
   14d68:	ldrdeq	r4, [r1], -r0
   14d6c:	ldrdeq	r4, [r1], -r0
   14d70:	ldrdeq	r4, [r1], -r0
   14d74:	ldrdeq	r4, [r1], -r0
   14d78:	ldrdeq	r4, [r1], -r0
   14d7c:	ldrdeq	r4, [r1], -r0
   14d80:	ldrdeq	r4, [r1], -r0
   14d84:	ldrdeq	r4, [r1], -r0
   14d88:	ldrdeq	r4, [r1], -r0
   14d8c:	ldrdeq	r4, [r1], -r0
   14d90:	ldrdeq	r4, [r1], -r0
   14d94:	ldrdeq	r4, [r1], -r0
   14d98:	ldrdeq	r4, [r1], -r0
   14d9c:	ldrdeq	r4, [r1], -r0
   14da0:	ldrdeq	r4, [r1], -r0
   14da4:	ldrdeq	r4, [r1], -r0
   14da8:	muleq	r1, r4, lr
   14dac:	andeq	r4, r1, r0, asr #16
   14db0:	ldrdeq	r4, [r1], -r0
   14db4:	muleq	r1, r4, lr
   14db8:	ldrdeq	r4, [r1], -r0
   14dbc:	muleq	r1, r4, lr
   14dc0:	ldrdeq	r4, [r1], -r0
   14dc4:	ldrdeq	r4, [r1], -r0
   14dc8:	ldrdeq	r4, [r1], -r0
   14dcc:	ldrdeq	r4, [r1], -r0
   14dd0:	ldrdeq	r4, [r1], -r0
   14dd4:	ldrdeq	r4, [r1], -r0
   14dd8:	ldrdeq	r4, [r1], -r0
   14ddc:	ldrdeq	r4, [r1], -r0
   14de0:	ldrdeq	r4, [r1], -r0
   14de4:	ldrdeq	r4, [r1], -r0
   14de8:	ldrdeq	r4, [r1], -r0
   14dec:	ldrdeq	r4, [r1], -r0
   14df0:	ldrdeq	r4, [r1], -r0
   14df4:	ldrdeq	r4, [r1], -r0
   14df8:	ldrdeq	r4, [r1], -r0
   14dfc:	ldrdeq	r4, [r1], -r0
   14e00:	ldrdeq	r4, [r1], -r0
   14e04:	ldrdeq	r4, [r1], -r0
   14e08:	ldrdeq	r4, [r1], -r0
   14e0c:	ldrdeq	r4, [r1], -r0
   14e10:	ldrdeq	r4, [r1], -r0
   14e14:	ldrdeq	r4, [r1], -r0
   14e18:	ldrdeq	r4, [r1], -r0
   14e1c:	ldrdeq	r4, [r1], -r0
   14e20:	ldrdeq	r4, [r1], -r0
   14e24:	ldrdeq	r4, [r1], -r0
   14e28:	andeq	r4, r1, r4, ror #12
   14e2c:	muleq	r1, r4, lr
   14e30:	andeq	r4, r1, r4, ror #12
   14e34:	andeq	r4, r1, r4, lsl #29
   14e38:	mov	r3, #114	; 0x72
   14e3c:	b	149a0 <__assert_fail@plt+0x3a70>
   14e40:	mov	r3, #102	; 0x66
   14e44:	b	14870 <__assert_fail@plt+0x3940>
   14e48:	mov	r3, #110	; 0x6e
   14e4c:	b	149a0 <__assert_fail@plt+0x3a70>
   14e50:	mov	r3, #98	; 0x62
   14e54:	b	14870 <__assert_fail@plt+0x3940>
   14e58:	mov	r3, #97	; 0x61
   14e5c:	b	14870 <__assert_fail@plt+0x3940>
   14e60:	ldr	r3, [sp, #40]	; 0x28
   14e64:	cmp	r3, #0
   14e68:	bne	14a78 <__assert_fail@plt+0x3b48>
   14e6c:	ldr	r3, [sp, #156]	; 0x9c
   14e70:	tst	r3, #1
   14e74:	addne	r9, r9, #1
   14e78:	bne	1420c <__assert_fail@plt+0x32dc>
   14e7c:	ldr	r7, [sp, #40]	; 0x28
   14e80:	b	1487c <__assert_fail@plt+0x394c>
   14e84:	sub	r3, fp, #2
   14e88:	clz	r3, r3
   14e8c:	lsr	r3, r3, #5
   14e90:	b	14690 <__assert_fail@plt+0x3760>
   14e94:	sub	r3, fp, #2
   14e98:	mov	r6, #0
   14e9c:	clz	r3, r3
   14ea0:	lsr	r3, r3, #5
   14ea4:	ldr	r2, [sp, #44]	; 0x2c
   14ea8:	tst	r2, r3
   14eac:	beq	1469c <__assert_fail@plt+0x376c>
   14eb0:	b	149b8 <__assert_fail@plt+0x3a88>
   14eb4:	sub	r3, fp, #2
   14eb8:	clz	r3, r3
   14ebc:	lsr	r3, r3, #5
   14ec0:	b	14ea4 <__assert_fail@plt+0x3f74>
   14ec4:	ldr	r3, [sp, #52]	; 0x34
   14ec8:	ldrb	r5, [r3]
   14ecc:	cmp	r5, #126	; 0x7e
   14ed0:	ldrls	pc, [pc, r5, lsl #2]
   14ed4:	b	14b80 <__assert_fail@plt+0x3c50>
   14ed8:	andeq	r4, r1, r8, ror sl
   14edc:	andeq	r4, r1, r0, lsl #23
   14ee0:	andeq	r4, r1, r0, lsl #23
   14ee4:	andeq	r4, r1, r0, lsl #23
   14ee8:	andeq	r4, r1, r0, lsl #23
   14eec:	andeq	r4, r1, r0, lsl #23
   14ef0:	andeq	r4, r1, r0, lsl #23
   14ef4:	andeq	r4, r1, ip, asr sl
   14ef8:	andeq	r4, r1, r4, asr sl
   14efc:	andeq	r5, r1, r0, lsl r1
   14f00:	andeq	r4, r1, r8, asr #20
   14f04:	andeq	r5, r1, r4, lsl #2
   14f08:	andeq	r4, r1, r4, lsr #20
   14f0c:	andeq	r4, r1, r0, ror sl
   14f10:	andeq	r4, r1, r0, lsl #23
   14f14:	andeq	r4, r1, r0, lsl #23
   14f18:	andeq	r4, r1, r0, lsl #23
   14f1c:	andeq	r4, r1, r0, lsl #23
   14f20:	andeq	r4, r1, r0, lsl #23
   14f24:	andeq	r4, r1, r0, lsl #23
   14f28:	andeq	r4, r1, r0, lsl #23
   14f2c:	andeq	r4, r1, r0, lsl #23
   14f30:	andeq	r4, r1, r0, lsl #23
   14f34:	andeq	r4, r1, r0, lsl #23
   14f38:	andeq	r4, r1, r0, lsl #23
   14f3c:	andeq	r4, r1, r0, lsl #23
   14f40:	andeq	r4, r1, r0, lsl #23
   14f44:	andeq	r4, r1, r0, lsl #23
   14f48:	andeq	r4, r1, r0, lsl #23
   14f4c:	andeq	r4, r1, r0, lsl #23
   14f50:	andeq	r4, r1, r0, lsl #23
   14f54:	andeq	r4, r1, r0, lsl #23
   14f58:	strdeq	r5, [r1], -ip
   14f5c:	andeq	r4, r1, r4, ror #20
   14f60:	andeq	r4, r1, r4, ror #20
   14f64:	andeq	r5, r1, r0, ror #1
   14f68:	andeq	r4, r1, r4, ror #20
   14f6c:	ldrdeq	r5, [r1], -r4
   14f70:	andeq	r4, r1, r4, ror #20
   14f74:	andeq	r4, r1, r0, asr #17
   14f78:	andeq	r4, r1, r4, ror #20
   14f7c:	andeq	r4, r1, r4, ror #20
   14f80:	andeq	r4, r1, r4, ror #20
   14f84:	ldrdeq	r5, [r1], -r4
   14f88:	ldrdeq	r5, [r1], -r4
   14f8c:	ldrdeq	r5, [r1], -r4
   14f90:	ldrdeq	r5, [r1], -r4
   14f94:	ldrdeq	r5, [r1], -r4
   14f98:	ldrdeq	r5, [r1], -r4
   14f9c:	ldrdeq	r5, [r1], -r4
   14fa0:	ldrdeq	r5, [r1], -r4
   14fa4:	ldrdeq	r5, [r1], -r4
   14fa8:	ldrdeq	r5, [r1], -r4
   14fac:	ldrdeq	r5, [r1], -r4
   14fb0:	ldrdeq	r5, [r1], -r4
   14fb4:	ldrdeq	r5, [r1], -r4
   14fb8:	ldrdeq	r5, [r1], -r4
   14fbc:	ldrdeq	r5, [r1], -r4
   14fc0:	ldrdeq	r5, [r1], -r4
   14fc4:	andeq	r4, r1, r4, ror #20
   14fc8:	andeq	r4, r1, r4, ror #20
   14fcc:	andeq	r4, r1, r4, ror #20
   14fd0:	andeq	r4, r1, r4, ror #20
   14fd4:	muleq	r1, r4, r8
   14fd8:	andeq	r4, r1, r0, lsl #23
   14fdc:	ldrdeq	r5, [r1], -r4
   14fe0:	ldrdeq	r5, [r1], -r4
   14fe4:	ldrdeq	r5, [r1], -r4
   14fe8:	ldrdeq	r5, [r1], -r4
   14fec:	ldrdeq	r5, [r1], -r4
   14ff0:	ldrdeq	r5, [r1], -r4
   14ff4:	ldrdeq	r5, [r1], -r4
   14ff8:	ldrdeq	r5, [r1], -r4
   14ffc:	ldrdeq	r5, [r1], -r4
   15000:	ldrdeq	r5, [r1], -r4
   15004:	ldrdeq	r5, [r1], -r4
   15008:	ldrdeq	r5, [r1], -r4
   1500c:	ldrdeq	r5, [r1], -r4
   15010:	ldrdeq	r5, [r1], -r4
   15014:	ldrdeq	r5, [r1], -r4
   15018:	ldrdeq	r5, [r1], -r4
   1501c:	ldrdeq	r5, [r1], -r4
   15020:	ldrdeq	r5, [r1], -r4
   15024:	ldrdeq	r5, [r1], -r4
   15028:	ldrdeq	r5, [r1], -r4
   1502c:	ldrdeq	r5, [r1], -r4
   15030:	ldrdeq	r5, [r1], -r4
   15034:	ldrdeq	r5, [r1], -r4
   15038:	ldrdeq	r5, [r1], -r4
   1503c:	ldrdeq	r5, [r1], -r4
   15040:	ldrdeq	r5, [r1], -r4
   15044:	andeq	r4, r1, r4, ror #20
   15048:	andeq	r4, r1, ip, lsr r8
   1504c:	ldrdeq	r5, [r1], -r4
   15050:	andeq	r4, r1, r4, ror #20
   15054:	ldrdeq	r5, [r1], -r4
   15058:	andeq	r4, r1, r4, ror #20
   1505c:	ldrdeq	r5, [r1], -r4
   15060:	ldrdeq	r5, [r1], -r4
   15064:	ldrdeq	r5, [r1], -r4
   15068:	ldrdeq	r5, [r1], -r4
   1506c:	ldrdeq	r5, [r1], -r4
   15070:	ldrdeq	r5, [r1], -r4
   15074:	ldrdeq	r5, [r1], -r4
   15078:	ldrdeq	r5, [r1], -r4
   1507c:	ldrdeq	r5, [r1], -r4
   15080:	ldrdeq	r5, [r1], -r4
   15084:	ldrdeq	r5, [r1], -r4
   15088:	ldrdeq	r5, [r1], -r4
   1508c:	ldrdeq	r5, [r1], -r4
   15090:	ldrdeq	r5, [r1], -r4
   15094:	ldrdeq	r5, [r1], -r4
   15098:	ldrdeq	r5, [r1], -r4
   1509c:	ldrdeq	r5, [r1], -r4
   150a0:	ldrdeq	r5, [r1], -r4
   150a4:	ldrdeq	r5, [r1], -r4
   150a8:	ldrdeq	r5, [r1], -r4
   150ac:	ldrdeq	r5, [r1], -r4
   150b0:	ldrdeq	r5, [r1], -r4
   150b4:	ldrdeq	r5, [r1], -r4
   150b8:	ldrdeq	r5, [r1], -r4
   150bc:	ldrdeq	r5, [r1], -r4
   150c0:	ldrdeq	r5, [r1], -r4
   150c4:	andeq	r4, r1, r0, ror #12
   150c8:	andeq	r4, r1, r4, ror #20
   150cc:	andeq	r4, r1, r0, ror #12
   150d0:	andeq	r5, r1, r0, ror #1
   150d4:	mov	r6, r7
   150d8:	mov	r7, #0
   150dc:	b	1488c <__assert_fail@plt+0x395c>
   150e0:	cmp	r9, #0
   150e4:	mov	r2, #0
   150e8:	beq	14b50 <__assert_fail@plt+0x3c20>
   150ec:	mov	r6, #0
   150f0:	mov	r7, r2
   150f4:	mov	r3, r6
   150f8:	b	146ac <__assert_fail@plt+0x377c>
   150fc:	mov	r2, #0
   15100:	b	14b64 <__assert_fail@plt+0x3c34>
   15104:	mov	r7, #0
   15108:	mov	r3, #118	; 0x76
   1510c:	b	14870 <__assert_fail@plt+0x3940>
   15110:	mov	r7, #0
   15114:	mov	r3, #116	; 0x74
   15118:	b	149a0 <__assert_fail@plt+0x3a70>
   1511c:	ldr	r3, [sp, #44]	; 0x2c
   15120:	b	146d4 <__assert_fail@plt+0x37a4>
   15124:	ldr	r3, [sp, #44]	; 0x2c
   15128:	cmp	r3, #0
   1512c:	bne	1559c <__assert_fail@plt+0x466c>
   15130:	add	r9, r9, #1
   15134:	mov	r6, #0
   15138:	ldr	r3, [sp, #48]	; 0x30
   1513c:	mov	r5, #92	; 0x5c
   15140:	b	14960 <__assert_fail@plt+0x3a30>
   15144:	ldr	r3, [sp, #32]
   15148:	ldrb	r2, [r3, #1]
   1514c:	adds	r2, r2, #0
   15150:	movne	r2, #1
   15154:	b	1467c <__assert_fail@plt+0x374c>
   15158:	ldr	r3, [sp, #156]	; 0x9c
   1515c:	ands	r3, r3, #4
   15160:	beq	15188 <__assert_fail@plt+0x4258>
   15164:	ldr	r2, [sp, #28]
   15168:	add	r3, r9, #2
   1516c:	cmp	r3, r2
   15170:	bcs	15184 <__assert_fail@plt+0x4254>
   15174:	ldr	r2, [sp, #52]	; 0x34
   15178:	ldrb	r5, [r2, #1]
   1517c:	cmp	r5, #63	; 0x3f
   15180:	beq	15600 <__assert_fail@plt+0x46d0>
   15184:	mov	r3, #0
   15188:	mov	r5, #63	; 0x3f
   1518c:	mov	r6, r3
   15190:	b	1469c <__assert_fail@plt+0x376c>
   15194:	ldr	r3, [sp, #44]	; 0x2c
   15198:	cmp	r3, #0
   1519c:	bne	1559c <__assert_fail@plt+0x466c>
   151a0:	mov	r6, r3
   151a4:	mov	r5, #63	; 0x3f
   151a8:	b	146d4 <__assert_fail@plt+0x37a4>
   151ac:	ldr	r1, [sp, #28]
   151b0:	mov	r2, #0
   151b4:	mov	r3, #0
   151b8:	strd	r2, [sp, #104]	; 0x68
   151bc:	cmn	r1, #1
   151c0:	bne	151d0 <__assert_fail@plt+0x42a0>
   151c4:	ldr	r0, [sp, #32]
   151c8:	bl	10e34 <strlen@plt>
   151cc:	str	r0, [sp, #28]
   151d0:	str	r8, [sp, #76]	; 0x4c
   151d4:	mov	r3, #0
   151d8:	str	sl, [sp, #80]	; 0x50
   151dc:	ldr	sl, [sp, #32]
   151e0:	str	r5, [sp, #84]	; 0x54
   151e4:	mov	r5, r3
   151e8:	ldr	r8, [sp, #44]	; 0x2c
   151ec:	str	r7, [sp, #88]	; 0x58
   151f0:	str	r4, [sp, #92]	; 0x5c
   151f4:	ldr	r2, [sp, #28]
   151f8:	add	r4, r9, r5
   151fc:	add	r3, sp, #104	; 0x68
   15200:	add	r7, sl, r4
   15204:	add	r0, sp, #100	; 0x64
   15208:	mov	r1, r7
   1520c:	sub	r2, r2, r4
   15210:	bl	17b14 <__assert_fail@plt+0x6be4>
   15214:	subs	r1, r0, #0
   15218:	beq	15264 <__assert_fail@plt+0x4334>
   1521c:	cmn	r1, #1
   15220:	beq	155dc <__assert_fail@plt+0x46ac>
   15224:	cmn	r1, #2
   15228:	beq	156fc <__assert_fail@plt+0x47cc>
   1522c:	cmp	fp, #2
   15230:	movne	r3, #0
   15234:	andeq	r3, r8, #1
   15238:	cmp	r3, #0
   1523c:	bne	153c8 <__assert_fail@plt+0x4498>
   15240:	ldr	r0, [sp, #100]	; 0x64
   15244:	add	r5, r5, r1
   15248:	bl	10d8c <iswprint@plt>
   1524c:	cmp	r0, #0
   15250:	add	r0, sp, #104	; 0x68
   15254:	moveq	r6, #0
   15258:	bl	10d38 <mbsinit@plt>
   1525c:	cmp	r0, #0
   15260:	beq	151f4 <__assert_fail@plt+0x42c4>
   15264:	ldr	r3, [sp, #40]	; 0x28
   15268:	mov	ip, r5
   1526c:	eor	r2, r6, #1
   15270:	ldr	r8, [sp, #76]	; 0x4c
   15274:	ldr	sl, [sp, #80]	; 0x50
   15278:	and	r2, r2, r3
   1527c:	ldr	r5, [sp, #84]	; 0x54
   15280:	ldr	r7, [sp, #88]	; 0x58
   15284:	ldr	r4, [sp, #92]	; 0x5c
   15288:	cmp	ip, #1
   1528c:	bls	14bc8 <__assert_fail@plt+0x3c98>
   15290:	add	r1, ip, r9
   15294:	mov	r0, #39	; 0x27
   15298:	ldr	lr, [sp, #52]	; 0x34
   1529c:	mov	ip, #0
   152a0:	str	r6, [sp, #52]	; 0x34
   152a4:	ldr	r6, [sp, #48]	; 0x30
   152a8:	b	15364 <__assert_fail@plt+0x4434>
   152ac:	ldr	ip, [sp, #44]	; 0x2c
   152b0:	sub	r3, fp, #2
   152b4:	clz	r3, r3
   152b8:	lsr	r3, r3, #5
   152bc:	cmp	ip, #0
   152c0:	bne	154d4 <__assert_fail@plt+0x45a4>
   152c4:	eor	ip, r6, #1
   152c8:	ands	r3, r3, ip
   152cc:	beq	152fc <__assert_fail@plt+0x43cc>
   152d0:	cmp	sl, r4
   152d4:	add	ip, r4, #1
   152d8:	strbhi	r0, [r8, r4]
   152dc:	cmp	sl, ip
   152e0:	movhi	r6, #36	; 0x24
   152e4:	strbhi	r6, [r8, ip]
   152e8:	add	ip, r4, #2
   152ec:	mov	r6, r3
   152f0:	cmp	sl, ip
   152f4:	add	r4, r4, #3
   152f8:	strbhi	r0, [r8, ip]
   152fc:	cmp	sl, r4
   15300:	movhi	r3, #92	; 0x5c
   15304:	strbhi	r3, [r8, r4]
   15308:	add	r3, r4, #1
   1530c:	cmp	sl, r3
   15310:	bls	15320 <__assert_fail@plt+0x43f0>
   15314:	lsr	ip, r5, #6
   15318:	add	ip, ip, #48	; 0x30
   1531c:	strb	ip, [r8, r3]
   15320:	add	r3, r4, #2
   15324:	cmp	sl, r3
   15328:	bls	15338 <__assert_fail@plt+0x4408>
   1532c:	ubfx	ip, r5, #3, #3
   15330:	add	ip, ip, #48	; 0x30
   15334:	strb	ip, [r8, r3]
   15338:	add	r9, r9, #1
   1533c:	and	r5, r5, #7
   15340:	cmp	r9, r1
   15344:	add	r5, r5, #48	; 0x30
   15348:	add	r4, r4, #3
   1534c:	bcs	15500 <__assert_fail@plt+0x45d0>
   15350:	mov	ip, r2
   15354:	cmp	sl, r4
   15358:	strbhi	r5, [r8, r4]
   1535c:	add	r4, r4, #1
   15360:	ldrb	r5, [lr, #1]!
   15364:	cmp	r2, #0
   15368:	bne	152ac <__assert_fail@plt+0x437c>
   1536c:	eor	r3, ip, #1
   15370:	cmp	r7, #0
   15374:	and	r3, r3, r6
   15378:	uxtb	r3, r3
   1537c:	beq	15390 <__assert_fail@plt+0x4460>
   15380:	cmp	sl, r4
   15384:	movhi	r7, #92	; 0x5c
   15388:	strbhi	r7, [r8, r4]
   1538c:	add	r4, r4, #1
   15390:	add	r9, r9, #1
   15394:	cmp	r9, r1
   15398:	bcs	154e8 <__assert_fail@plt+0x45b8>
   1539c:	cmp	r3, #0
   153a0:	beq	15520 <__assert_fail@plt+0x45f0>
   153a4:	cmp	sl, r4
   153a8:	add	r3, r4, #1
   153ac:	mov	r7, #0
   153b0:	strbhi	r0, [r8, r4]
   153b4:	cmp	sl, r3
   153b8:	add	r4, r4, #2
   153bc:	mov	r6, r7
   153c0:	strbhi	r0, [r8, r3]
   153c4:	b	15354 <__assert_fail@plt+0x4424>
   153c8:	cmp	r1, #1
   153cc:	beq	15240 <__assert_fail@plt+0x4310>
   153d0:	add	r2, r4, #1
   153d4:	add	r3, sl, r1
   153d8:	add	r2, sl, r2
   153dc:	add	r4, r3, r4
   153e0:	ldrb	r3, [r2], #1
   153e4:	sub	r3, r3, #91	; 0x5b
   153e8:	cmp	r3, #33	; 0x21
   153ec:	ldrls	pc, [pc, r3, lsl #2]
   153f0:	b	1547c <__assert_fail@plt+0x454c>
   153f4:	andeq	r5, r1, r8, lsl #9
   153f8:	andeq	r5, r1, r8, lsl #9
   153fc:	andeq	r5, r1, ip, ror r4
   15400:	andeq	r5, r1, r8, lsl #9
   15404:	andeq	r5, r1, ip, ror r4
   15408:	andeq	r5, r1, r8, lsl #9
   1540c:	andeq	r5, r1, ip, ror r4
   15410:	andeq	r5, r1, ip, ror r4
   15414:	andeq	r5, r1, ip, ror r4
   15418:	andeq	r5, r1, ip, ror r4
   1541c:	andeq	r5, r1, ip, ror r4
   15420:	andeq	r5, r1, ip, ror r4
   15424:	andeq	r5, r1, ip, ror r4
   15428:	andeq	r5, r1, ip, ror r4
   1542c:	andeq	r5, r1, ip, ror r4
   15430:	andeq	r5, r1, ip, ror r4
   15434:	andeq	r5, r1, ip, ror r4
   15438:	andeq	r5, r1, ip, ror r4
   1543c:	andeq	r5, r1, ip, ror r4
   15440:	andeq	r5, r1, ip, ror r4
   15444:	andeq	r5, r1, ip, ror r4
   15448:	andeq	r5, r1, ip, ror r4
   1544c:	andeq	r5, r1, ip, ror r4
   15450:	andeq	r5, r1, ip, ror r4
   15454:	andeq	r5, r1, ip, ror r4
   15458:	andeq	r5, r1, ip, ror r4
   1545c:	andeq	r5, r1, ip, ror r4
   15460:	andeq	r5, r1, ip, ror r4
   15464:	andeq	r5, r1, ip, ror r4
   15468:	andeq	r5, r1, ip, ror r4
   1546c:	andeq	r5, r1, ip, ror r4
   15470:	andeq	r5, r1, ip, ror r4
   15474:	andeq	r5, r1, ip, ror r4
   15478:	andeq	r5, r1, r8, lsl #9
   1547c:	cmp	r4, r2
   15480:	bne	153e0 <__assert_fail@plt+0x44b0>
   15484:	b	15240 <__assert_fail@plt+0x4310>
   15488:	mov	r8, #2
   1548c:	ldr	fp, [sp, #76]	; 0x4c
   15490:	ldr	sl, [sp, #80]	; 0x50
   15494:	b	149c0 <__assert_fail@plt+0x3a90>
   15498:	ldr	r2, [sp, #40]	; 0x28
   1549c:	str	fp, [sp, #152]	; 0x98
   154a0:	mov	fp, r8
   154a4:	ldr	r8, [sp, #152]	; 0x98
   154a8:	and	r2, r2, r3
   154ac:	str	r2, [sp, #40]	; 0x28
   154b0:	b	149c0 <__assert_fail@plt+0x3a90>
   154b4:	cmp	sl, r4
   154b8:	movls	r0, r4
   154bc:	bls	14af0 <__assert_fail@plt+0x3bc0>
   154c0:	ldr	r3, [sp, #48]	; 0x30
   154c4:	b	14ae0 <__assert_fail@plt+0x3bb0>
   154c8:	str	sl, [sp, #72]	; 0x48
   154cc:	ldr	sl, [sp, #44]	; 0x2c
   154d0:	b	14930 <__assert_fail@plt+0x3a00>
   154d4:	str	r3, [sp, #40]	; 0x28
   154d8:	str	fp, [sp, #152]	; 0x98
   154dc:	mov	fp, r8
   154e0:	ldr	r8, [sp, #152]	; 0x98
   154e4:	b	149c0 <__assert_fail@plt+0x3a90>
   154e8:	str	r6, [sp, #48]	; 0x30
   154ec:	ldr	r6, [sp, #52]	; 0x34
   154f0:	b	14960 <__assert_fail@plt+0x3a30>
   154f4:	mov	r6, #0
   154f8:	ldr	r2, [sp, #40]	; 0x28
   154fc:	b	15290 <__assert_fail@plt+0x4360>
   15500:	str	r6, [sp, #48]	; 0x30
   15504:	ldr	r6, [sp, #52]	; 0x34
   15508:	b	1474c <__assert_fail@plt+0x381c>
   1550c:	add	r4, r4, #4
   15510:	mov	r6, #0
   15514:	str	r3, [sp, #48]	; 0x30
   15518:	mov	r5, #48	; 0x30
   1551c:	b	146d4 <__assert_fail@plt+0x37a4>
   15520:	mov	r7, r3
   15524:	b	15354 <__assert_fail@plt+0x4424>
   15528:	mov	r3, #1
   1552c:	movw	r2, #36404	; 0x8e34
   15530:	movt	r2, #1
   15534:	mov	r4, r3
   15538:	str	r3, [sp, #36]	; 0x24
   1553c:	str	r3, [sp, #40]	; 0x28
   15540:	str	sl, [sp, #44]	; 0x2c
   15544:	str	sl, [sp, #48]	; 0x30
   15548:	str	r3, [sp, #56]	; 0x38
   1554c:	str	r2, [sp, #60]	; 0x3c
   15550:	str	sl, [sp, #68]	; 0x44
   15554:	str	sl, [sp, #72]	; 0x48
   15558:	b	141fc <__assert_fail@plt+0x32cc>
   1555c:	mov	r3, r6
   15560:	mov	r5, #48	; 0x30
   15564:	mov	r6, #0
   15568:	b	146d4 <__assert_fail@plt+0x37a4>
   1556c:	mov	r5, r3
   15570:	b	14a4c <__assert_fail@plt+0x3b1c>
   15574:	cmp	sl, r4
   15578:	mov	r5, #48	; 0x30
   1557c:	movhi	r3, #48	; 0x30
   15580:	strbhi	r3, [r8, r4]
   15584:	add	r3, r0, #2
   15588:	add	r4, r0, #3
   1558c:	cmp	sl, r3
   15590:	movhi	r1, #48	; 0x30
   15594:	strbhi	r1, [r8, r3]
   15598:	b	14b24 <__assert_fail@plt+0x3bf4>
   1559c:	str	fp, [sp, #152]	; 0x98
   155a0:	mov	fp, r8
   155a4:	ldr	r8, [sp, #152]	; 0x98
   155a8:	b	149c0 <__assert_fail@plt+0x3a90>
   155ac:	ldr	r3, [sp, #164]	; 0xa4
   155b0:	ldrb	r3, [r3]
   155b4:	cmp	r3, #0
   155b8:	beq	141cc <__assert_fail@plt+0x329c>
   155bc:	ldr	r2, [sp, #164]	; 0xa4
   155c0:	cmp	sl, r4
   155c4:	strbhi	r3, [fp, r4]
   155c8:	add	r4, r4, #1
   155cc:	ldrb	r3, [r2, #1]!
   155d0:	cmp	r3, #0
   155d4:	bne	155c0 <__assert_fail@plt+0x4690>
   155d8:	b	141cc <__assert_fail@plt+0x329c>
   155dc:	mov	ip, r5
   155e0:	mov	r6, #0
   155e4:	ldr	r2, [sp, #40]	; 0x28
   155e8:	ldr	r8, [sp, #76]	; 0x4c
   155ec:	ldr	sl, [sp, #80]	; 0x50
   155f0:	ldr	r5, [sp, #84]	; 0x54
   155f4:	ldr	r7, [sp, #88]	; 0x58
   155f8:	ldr	r4, [sp, #92]	; 0x5c
   155fc:	b	15288 <__assert_fail@plt+0x4358>
   15600:	ldr	r2, [sp, #32]
   15604:	ldrb	r1, [r2, r3]
   15608:	sub	r2, r1, #33	; 0x21
   1560c:	cmp	r2, #29
   15610:	ldrls	pc, [pc, r2, lsl #2]
   15614:	b	156f0 <__assert_fail@plt+0x47c0>
   15618:	muleq	r1, r0, r6
   1561c:	strdeq	r5, [r1], -r0
   15620:	strdeq	r5, [r1], -r0
   15624:	strdeq	r5, [r1], -r0
   15628:	strdeq	r5, [r1], -r0
   1562c:	strdeq	r5, [r1], -r0
   15630:	muleq	r1, r0, r6
   15634:	muleq	r1, r0, r6
   15638:	muleq	r1, r0, r6
   1563c:	strdeq	r5, [r1], -r0
   15640:	strdeq	r5, [r1], -r0
   15644:	strdeq	r5, [r1], -r0
   15648:	muleq	r1, r0, r6
   1564c:	strdeq	r5, [r1], -r0
   15650:	muleq	r1, r0, r6
   15654:	strdeq	r5, [r1], -r0
   15658:	strdeq	r5, [r1], -r0
   1565c:	strdeq	r5, [r1], -r0
   15660:	strdeq	r5, [r1], -r0
   15664:	strdeq	r5, [r1], -r0
   15668:	strdeq	r5, [r1], -r0
   1566c:	strdeq	r5, [r1], -r0
   15670:	strdeq	r5, [r1], -r0
   15674:	strdeq	r5, [r1], -r0
   15678:	strdeq	r5, [r1], -r0
   1567c:	strdeq	r5, [r1], -r0
   15680:	strdeq	r5, [r1], -r0
   15684:	muleq	r1, r0, r6
   15688:	muleq	r1, r0, r6
   1568c:	muleq	r1, r0, r6
   15690:	ldr	r2, [sp, #44]	; 0x2c
   15694:	cmp	r2, #0
   15698:	bne	157f4 <__assert_fail@plt+0x48c4>
   1569c:	cmp	sl, r4
   156a0:	mov	r5, r1
   156a4:	movhi	r2, #63	; 0x3f
   156a8:	mov	r9, r3
   156ac:	strbhi	r2, [r8, r4]
   156b0:	add	r2, r4, #1
   156b4:	cmp	sl, r2
   156b8:	movhi	r0, #34	; 0x22
   156bc:	strbhi	r0, [r8, r2]
   156c0:	add	r2, r4, #2
   156c4:	cmp	sl, r2
   156c8:	movhi	r0, #34	; 0x22
   156cc:	strbhi	r0, [r8, r2]
   156d0:	add	r2, r4, #3
   156d4:	add	r4, r4, #4
   156d8:	cmp	sl, r2
   156dc:	movhi	r0, #63	; 0x3f
   156e0:	strbhi	r0, [r8, r2]
   156e4:	mov	r2, #0
   156e8:	mov	r6, r2
   156ec:	b	14b24 <__assert_fail@plt+0x3bf4>
   156f0:	mov	r3, #0
   156f4:	mov	r6, r3
   156f8:	b	1469c <__assert_fail@plt+0x376c>
   156fc:	ldr	r0, [sp, #28]
   15700:	mov	r1, r4
   15704:	mov	r2, r7
   15708:	mov	r3, r5
   1570c:	mov	ip, r5
   15710:	ldr	r8, [sp, #76]	; 0x4c
   15714:	ldr	sl, [sp, #80]	; 0x50
   15718:	cmp	r1, r0
   1571c:	ldr	r5, [sp, #84]	; 0x54
   15720:	ldr	r7, [sp, #88]	; 0x58
   15724:	ldr	r4, [sp, #92]	; 0x5c
   15728:	bcs	1575c <__assert_fail@plt+0x482c>
   1572c:	ldrb	r6, [r2]
   15730:	cmp	r6, #0
   15734:	bne	15748 <__assert_fail@plt+0x4818>
   15738:	b	1587c <__assert_fail@plt+0x494c>
   1573c:	ldrb	r6, [r2, #1]!
   15740:	cmp	r6, #0
   15744:	beq	15804 <__assert_fail@plt+0x48d4>
   15748:	add	r3, r3, #1
   1574c:	add	r1, r9, r3
   15750:	cmp	r1, r0
   15754:	bcc	1573c <__assert_fail@plt+0x480c>
   15758:	mov	ip, r3
   1575c:	mov	r6, #0
   15760:	ldr	r2, [sp, #40]	; 0x28
   15764:	b	15288 <__assert_fail@plt+0x4358>
   15768:	mov	r3, #1
   1576c:	mov	r2, #0
   15770:	mov	r4, r2
   15774:	str	r3, [sp, #36]	; 0x24
   15778:	str	r3, [sp, #40]	; 0x28
   1577c:	str	r3, [sp, #44]	; 0x2c
   15780:	str	r2, [sp, #48]	; 0x30
   15784:	str	r3, [sp, #56]	; 0x38
   15788:	movw	r3, #36404	; 0x8e34
   1578c:	movt	r3, #1
   15790:	str	r3, [sp, #60]	; 0x3c
   15794:	str	r2, [sp, #68]	; 0x44
   15798:	str	r2, [sp, #72]	; 0x48
   1579c:	b	141fc <__assert_fail@plt+0x32cc>
   157a0:	mov	r2, r3
   157a4:	ldr	r3, [sp, #60]	; 0x3c
   157a8:	cmp	r3, #0
   157ac:	moveq	r2, #0
   157b0:	andne	r2, r2, #1
   157b4:	cmp	r2, #0
   157b8:	beq	157e4 <__assert_fail@plt+0x48b4>
   157bc:	mov	r2, r3
   157c0:	ldrb	r3, [r3]
   157c4:	cmp	r3, #0
   157c8:	beq	157e4 <__assert_fail@plt+0x48b4>
   157cc:	cmp	sl, r4
   157d0:	strbhi	r3, [fp, r4]
   157d4:	add	r4, r4, #1
   157d8:	ldrb	r3, [r2, #1]!
   157dc:	cmp	r3, #0
   157e0:	bne	157cc <__assert_fail@plt+0x489c>
   157e4:	cmp	sl, r4
   157e8:	movhi	r3, #0
   157ec:	strbhi	r3, [fp, r4]
   157f0:	b	14a04 <__assert_fail@plt+0x3ad4>
   157f4:	str	fp, [sp, #152]	; 0x98
   157f8:	mov	fp, r8
   157fc:	ldr	r8, [sp, #152]	; 0x98
   15800:	b	149cc <__assert_fail@plt+0x3a9c>
   15804:	mov	ip, r3
   15808:	ldr	r2, [sp, #40]	; 0x28
   1580c:	b	15288 <__assert_fail@plt+0x4358>
   15810:	str	fp, [sp, #152]	; 0x98
   15814:	mov	fp, r8
   15818:	ldr	r8, [sp, #152]	; 0x98
   1581c:	sub	r3, r8, #2
   15820:	clz	r3, r3
   15824:	lsr	r3, r3, #5
   15828:	str	r3, [sp, #40]	; 0x28
   1582c:	b	149c0 <__assert_fail@plt+0x3a90>
   15830:	mov	ip, #5
   15834:	ldr	r3, [sp, #28]
   15838:	str	ip, [sp]
   1583c:	ldr	r2, [sp, #156]	; 0x9c
   15840:	ldr	ip, [sp, #164]	; 0xa4
   15844:	ldr	r0, [sp, #160]	; 0xa0
   15848:	str	r2, [sp, #4]
   1584c:	ldr	r2, [sp, #32]
   15850:	ldr	r1, [sp, #72]	; 0x48
   15854:	str	ip, [sp, #12]
   15858:	ldr	ip, [sp, #168]	; 0xa8
   1585c:	str	r0, [sp, #8]
   15860:	mov	r0, fp
   15864:	str	ip, [sp, #16]
   15868:	bl	14114 <__assert_fail@plt+0x31e4>
   1586c:	mov	r4, r0
   15870:	b	14a04 <__assert_fail@plt+0x3ad4>
   15874:	mov	r8, #2
   15878:	b	149c0 <__assert_fail@plt+0x3a90>
   1587c:	ldr	r2, [sp, #40]	; 0x28
   15880:	b	15288 <__assert_fail@plt+0x4358>
   15884:	mov	r3, #0
   15888:	mov	r2, #1
   1588c:	mov	r4, r3
   15890:	strd	r2, [sp, #36]	; 0x24
   15894:	strd	r2, [sp, #44]	; 0x2c
   15898:	str	r2, [sp, #56]	; 0x38
   1589c:	str	r3, [sp, #68]	; 0x44
   158a0:	str	r3, [sp, #72]	; 0x48
   158a4:	movw	r3, #36424	; 0x8e48
   158a8:	movt	r3, #1
   158ac:	str	r3, [sp, #60]	; 0x3c
   158b0:	b	141fc <__assert_fail@plt+0x32cc>
   158b4:	mov	r3, #0
   158b8:	mov	r1, #1
   158bc:	mov	r2, r3
   158c0:	str	r1, [sp, #36]	; 0x24
   158c4:	str	r3, [sp, #48]	; 0x30
   158c8:	str	sl, [sp, #72]	; 0x48
   158cc:	b	14804 <__assert_fail@plt+0x38d4>
   158d0:	bl	10f24 <abort@plt>
   158d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   158d8:	mov	r4, r0
   158dc:	mov	r5, r3
   158e0:	strd	r6, [sp, #8]
   158e4:	movw	r7, #41204	; 0xa0f4
   158e8:	movt	r7, #2
   158ec:	strd	r8, [sp, #16]
   158f0:	strd	sl, [sp, #24]
   158f4:	mov	sl, r1
   158f8:	mov	fp, r2
   158fc:	str	lr, [sp, #32]
   15900:	sub	sp, sp, #60	; 0x3c
   15904:	bl	10e4c <__errno_location@plt>
   15908:	mov	r8, r0
   1590c:	cmn	r4, #-2147483647	; 0x80000001
   15910:	ldr	r6, [r7]
   15914:	movne	r0, #0
   15918:	moveq	r0, #1
   1591c:	ldr	r3, [r8]
   15920:	orrs	r0, r0, r4, lsr #31
   15924:	str	r3, [sp, #28]
   15928:	bne	15ab8 <__assert_fail@plt+0x4b88>
   1592c:	ldr	r3, [r7, #4]
   15930:	cmp	r3, r4
   15934:	bgt	15994 <__assert_fail@plt+0x4a64>
   15938:	add	r1, r7, #8
   1593c:	sub	r2, r4, r3
   15940:	str	r3, [sp, #52]	; 0x34
   15944:	cmp	r6, r1
   15948:	add	r2, r2, #1
   1594c:	beq	15a90 <__assert_fail@plt+0x4b60>
   15950:	mov	r1, #8
   15954:	mov	r0, r6
   15958:	mvn	r3, #-2147483648	; 0x80000000
   1595c:	str	r1, [sp]
   15960:	add	r1, sp, #52	; 0x34
   15964:	bl	16938 <__assert_fail@plt+0x5a08>
   15968:	mov	r6, r0
   1596c:	str	r0, [r7]
   15970:	ldr	r0, [r7, #4]
   15974:	mov	r1, #0
   15978:	ldr	r2, [sp, #52]	; 0x34
   1597c:	sub	r2, r2, r0
   15980:	add	r0, r6, r0, lsl #3
   15984:	lsl	r2, r2, #3
   15988:	bl	10e64 <memset@plt>
   1598c:	ldr	r3, [sp, #52]	; 0x34
   15990:	str	r3, [r7, #4]
   15994:	ldr	r1, [r5, #4]
   15998:	add	r0, r6, r4, lsl #3
   1599c:	add	ip, r5, #8
   159a0:	mov	r3, fp
   159a4:	mov	r2, sl
   159a8:	ldr	r7, [r0, #4]
   159ac:	str	r0, [sp, #36]	; 0x24
   159b0:	str	ip, [sp, #40]	; 0x28
   159b4:	orr	r0, r1, #1
   159b8:	ldr	r9, [r6, r4, lsl #3]
   159bc:	str	ip, [sp, #8]
   159c0:	ldr	lr, [r5, #44]	; 0x2c
   159c4:	str	r0, [sp, #4]
   159c8:	ldr	ip, [r5]
   159cc:	mov	r1, r9
   159d0:	str	ip, [sp, #32]
   159d4:	ldr	ip, [r5, #40]	; 0x28
   159d8:	str	ip, [sp, #12]
   159dc:	ldr	ip, [sp, #32]
   159e0:	str	lr, [sp, #16]
   159e4:	str	r0, [sp, #44]	; 0x2c
   159e8:	mov	r0, r7
   159ec:	str	ip, [sp]
   159f0:	bl	14114 <__assert_fail@plt+0x31e4>
   159f4:	cmp	r9, r0
   159f8:	bhi	15a68 <__assert_fail@plt+0x4b38>
   159fc:	add	r9, r0, #1
   15a00:	movw	r3, #41344	; 0xa180
   15a04:	movt	r3, #2
   15a08:	cmp	r7, r3
   15a0c:	str	r9, [r6, r4, lsl #3]
   15a10:	beq	15a1c <__assert_fail@plt+0x4aec>
   15a14:	mov	r0, r7
   15a18:	bl	13d74 <__assert_fail@plt+0x2e44>
   15a1c:	mov	r0, r9
   15a20:	bl	16788 <__assert_fail@plt+0x5858>
   15a24:	ldr	ip, [r5]
   15a28:	mov	r3, fp
   15a2c:	mov	r2, sl
   15a30:	mov	r1, r9
   15a34:	mov	r7, r0
   15a38:	ldr	lr, [sp, #36]	; 0x24
   15a3c:	ldr	r4, [r5, #40]	; 0x28
   15a40:	str	r0, [lr, #4]
   15a44:	ldr	lr, [r5, #44]	; 0x2c
   15a48:	str	ip, [sp]
   15a4c:	ldr	ip, [sp, #44]	; 0x2c
   15a50:	str	ip, [sp, #4]
   15a54:	ldr	ip, [sp, #40]	; 0x28
   15a58:	str	r4, [sp, #12]
   15a5c:	str	lr, [sp, #16]
   15a60:	str	ip, [sp, #8]
   15a64:	bl	14114 <__assert_fail@plt+0x31e4>
   15a68:	ldr	r3, [sp, #28]
   15a6c:	mov	r0, r7
   15a70:	str	r3, [r8]
   15a74:	add	sp, sp, #60	; 0x3c
   15a78:	ldrd	r4, [sp]
   15a7c:	ldrd	r6, [sp, #8]
   15a80:	ldrd	r8, [sp, #16]
   15a84:	ldrd	sl, [sp, #24]
   15a88:	add	sp, sp, #32
   15a8c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a90:	mov	r1, #8
   15a94:	mvn	r3, #-2147483648	; 0x80000000
   15a98:	str	r1, [sp]
   15a9c:	add	r1, sp, #52	; 0x34
   15aa0:	bl	16938 <__assert_fail@plt+0x5a08>
   15aa4:	ldrd	r2, [r7, #8]
   15aa8:	mov	r6, r0
   15aac:	str	r0, [r7]
   15ab0:	strd	r2, [r0]
   15ab4:	b	15970 <__assert_fail@plt+0x4a40>
   15ab8:	bl	10f24 <abort@plt>
   15abc:	strd	r4, [sp, #-16]!
   15ac0:	mov	r5, r0
   15ac4:	str	r6, [sp, #8]
   15ac8:	str	lr, [sp, #12]
   15acc:	bl	10e4c <__errno_location@plt>
   15ad0:	mov	r4, r0
   15ad4:	cmp	r5, #0
   15ad8:	ldr	r0, [pc, #32]	; 15b00 <__assert_fail@plt+0x4bd0>
   15adc:	mov	r1, #48	; 0x30
   15ae0:	movne	r0, r5
   15ae4:	ldr	r6, [r4]
   15ae8:	bl	16ab0 <__assert_fail@plt+0x5b80>
   15aec:	str	r6, [r4]
   15af0:	ldrd	r4, [sp]
   15af4:	ldr	r6, [sp, #8]
   15af8:	add	sp, sp, #12
   15afc:	pop	{pc}		; (ldr pc, [sp], #4)
   15b00:	andeq	sl, r2, r0, lsl #5
   15b04:	ldr	r3, [pc, #12]	; 15b18 <__assert_fail@plt+0x4be8>
   15b08:	cmp	r0, #0
   15b0c:	moveq	r0, r3
   15b10:	ldr	r0, [r0]
   15b14:	bx	lr
   15b18:	andeq	sl, r2, r0, lsl #5
   15b1c:	ldr	r3, [pc, #12]	; 15b30 <__assert_fail@plt+0x4c00>
   15b20:	cmp	r0, #0
   15b24:	moveq	r0, r3
   15b28:	str	r1, [r0]
   15b2c:	bx	lr
   15b30:	andeq	sl, r2, r0, lsl #5
   15b34:	ldr	r3, [pc, #52]	; 15b70 <__assert_fail@plt+0x4c40>
   15b38:	cmp	r0, #0
   15b3c:	push	{lr}		; (str lr, [sp, #-4]!)
   15b40:	lsr	lr, r1, #5
   15b44:	and	r1, r1, #31
   15b48:	moveq	r0, r3
   15b4c:	add	r3, r0, #8
   15b50:	ldr	ip, [r3, lr, lsl #2]
   15b54:	lsr	r0, ip, r1
   15b58:	eor	r2, r2, r0
   15b5c:	and	r0, r0, #1
   15b60:	and	r2, r2, #1
   15b64:	eor	r1, ip, r2, lsl r1
   15b68:	str	r1, [r3, lr, lsl #2]
   15b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   15b70:	andeq	sl, r2, r0, lsl #5
   15b74:	ldr	r3, [pc, #16]	; 15b8c <__assert_fail@plt+0x4c5c>
   15b78:	cmp	r0, #0
   15b7c:	movne	r3, r0
   15b80:	ldr	r0, [r3, #4]
   15b84:	str	r1, [r3, #4]
   15b88:	bx	lr
   15b8c:	andeq	sl, r2, r0, lsl #5
   15b90:	ldr	r3, [pc, #48]	; 15bc8 <__assert_fail@plt+0x4c98>
   15b94:	cmp	r0, #0
   15b98:	mov	ip, #10
   15b9c:	moveq	r0, r3
   15ba0:	cmp	r2, #0
   15ba4:	cmpne	r1, #0
   15ba8:	str	ip, [r0]
   15bac:	beq	15bbc <__assert_fail@plt+0x4c8c>
   15bb0:	str	r1, [r0, #40]	; 0x28
   15bb4:	str	r2, [r0, #44]	; 0x2c
   15bb8:	bx	lr
   15bbc:	str	r4, [sp, #-8]!
   15bc0:	str	lr, [sp, #4]
   15bc4:	bl	10f24 <abort@plt>
   15bc8:	andeq	sl, r2, r0, lsl #5
   15bcc:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15bd0:	strd	r6, [sp, #8]
   15bd4:	mov	r7, r0
   15bd8:	mov	r6, r1
   15bdc:	strd	r8, [sp, #16]
   15be0:	mov	r8, r2
   15be4:	mov	r9, r3
   15be8:	str	lr, [sp, #24]
   15bec:	sub	sp, sp, #28
   15bf0:	ldr	r4, [sp, #56]	; 0x38
   15bf4:	ldr	ip, [pc, #104]	; 15c64 <__assert_fail@plt+0x4d34>
   15bf8:	cmp	r4, #0
   15bfc:	moveq	r4, ip
   15c00:	bl	10e4c <__errno_location@plt>
   15c04:	ldr	ip, [r4, #44]	; 0x2c
   15c08:	mov	r5, r0
   15c0c:	mov	r1, r6
   15c10:	add	lr, r4, #8
   15c14:	mov	r3, r9
   15c18:	ldr	r6, [r5]
   15c1c:	mov	r2, r8
   15c20:	mov	r0, r7
   15c24:	str	ip, [sp, #16]
   15c28:	ldr	ip, [r4, #40]	; 0x28
   15c2c:	str	lr, [sp, #8]
   15c30:	str	ip, [sp, #12]
   15c34:	ldr	ip, [r4, #4]
   15c38:	str	ip, [sp, #4]
   15c3c:	ldr	ip, [r4]
   15c40:	str	ip, [sp]
   15c44:	bl	14114 <__assert_fail@plt+0x31e4>
   15c48:	str	r6, [r5]
   15c4c:	add	sp, sp, #28
   15c50:	ldrd	r4, [sp]
   15c54:	ldrd	r6, [sp, #8]
   15c58:	ldrd	r8, [sp, #16]
   15c5c:	add	sp, sp, #24
   15c60:	pop	{pc}		; (ldr pc, [sp], #4)
   15c64:	andeq	sl, r2, r0, lsl #5
   15c68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15c6c:	cmp	r3, #0
   15c70:	ldr	r4, [pc, #220]	; 15d54 <__assert_fail@plt+0x4e24>
   15c74:	movne	r4, r3
   15c78:	strd	r6, [sp, #8]
   15c7c:	mov	r6, r2
   15c80:	strd	r8, [sp, #16]
   15c84:	mov	r9, r0
   15c88:	strd	sl, [sp, #24]
   15c8c:	mov	sl, r1
   15c90:	str	lr, [sp, #32]
   15c94:	sub	sp, sp, #44	; 0x2c
   15c98:	bl	10e4c <__errno_location@plt>
   15c9c:	ldr	r5, [r4, #4]
   15ca0:	mov	r7, r0
   15ca4:	mov	r1, #0
   15ca8:	add	r8, r4, #8
   15cac:	mov	r3, sl
   15cb0:	ldr	ip, [r4, #44]	; 0x2c
   15cb4:	mov	r2, r9
   15cb8:	mov	r0, r1
   15cbc:	ldr	lr, [r7]
   15cc0:	cmp	r6, r1
   15cc4:	orreq	r5, r5, #1
   15cc8:	str	ip, [sp, #16]
   15ccc:	ldr	ip, [r4, #40]	; 0x28
   15cd0:	stmib	sp, {r5, r8, ip}
   15cd4:	ldr	ip, [r4]
   15cd8:	str	lr, [sp, #28]
   15cdc:	str	ip, [sp]
   15ce0:	bl	14114 <__assert_fail@plt+0x31e4>
   15ce4:	add	r1, r0, #1
   15ce8:	mov	fp, r0
   15cec:	mov	r0, r1
   15cf0:	str	r1, [sp, #36]	; 0x24
   15cf4:	bl	16788 <__assert_fail@plt+0x5858>
   15cf8:	ldr	ip, [r4, #44]	; 0x2c
   15cfc:	mov	r3, sl
   15d00:	mov	r2, r9
   15d04:	ldr	r1, [sp, #36]	; 0x24
   15d08:	str	ip, [sp, #16]
   15d0c:	ldr	ip, [r4, #40]	; 0x28
   15d10:	str	r0, [sp, #32]
   15d14:	stmib	sp, {r5, r8, ip}
   15d18:	ldr	ip, [r4]
   15d1c:	str	ip, [sp]
   15d20:	bl	14114 <__assert_fail@plt+0x31e4>
   15d24:	ldr	lr, [sp, #28]
   15d28:	cmp	r6, #0
   15d2c:	ldr	r0, [sp, #32]
   15d30:	str	lr, [r7]
   15d34:	strne	fp, [r6]
   15d38:	add	sp, sp, #44	; 0x2c
   15d3c:	ldrd	r4, [sp]
   15d40:	ldrd	r6, [sp, #8]
   15d44:	ldrd	r8, [sp, #16]
   15d48:	ldrd	sl, [sp, #24]
   15d4c:	add	sp, sp, #32
   15d50:	pop	{pc}		; (ldr pc, [sp], #4)
   15d54:	andeq	sl, r2, r0, lsl #5
   15d58:	mov	r3, r2
   15d5c:	mov	r2, #0
   15d60:	b	15c68 <__assert_fail@plt+0x4d38>
   15d64:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15d68:	movw	r5, #41204	; 0xa0f4
   15d6c:	movt	r5, #2
   15d70:	ldr	r3, [r5, #4]
   15d74:	strd	r6, [sp, #8]
   15d78:	str	r8, [sp, #16]
   15d7c:	str	lr, [sp, #20]
   15d80:	ldr	r7, [r5]
   15d84:	cmp	r3, #1
   15d88:	ble	15dac <__assert_fail@plt+0x4e7c>
   15d8c:	mov	r4, #1
   15d90:	add	r6, r7, #4
   15d94:	ldr	r0, [r6, r4, lsl #3]
   15d98:	add	r4, r4, #1
   15d9c:	bl	13d74 <__assert_fail@plt+0x2e44>
   15da0:	ldr	r3, [r5, #4]
   15da4:	cmp	r3, r4
   15da8:	bgt	15d94 <__assert_fail@plt+0x4e64>
   15dac:	ldr	r0, [r7, #4]
   15db0:	movw	r4, #41344	; 0xa180
   15db4:	movt	r4, #2
   15db8:	cmp	r0, r4
   15dbc:	beq	15dd0 <__assert_fail@plt+0x4ea0>
   15dc0:	bl	13d74 <__assert_fail@plt+0x2e44>
   15dc4:	mov	r3, #256	; 0x100
   15dc8:	str	r3, [r5, #8]
   15dcc:	str	r4, [r5, #12]
   15dd0:	ldr	r4, [pc, #44]	; 15e04 <__assert_fail@plt+0x4ed4>
   15dd4:	cmp	r7, r4
   15dd8:	beq	15de8 <__assert_fail@plt+0x4eb8>
   15ddc:	mov	r0, r7
   15de0:	bl	13d74 <__assert_fail@plt+0x2e44>
   15de4:	str	r4, [r5]
   15de8:	mov	r3, #1
   15dec:	ldrd	r6, [sp, #8]
   15df0:	str	r3, [r5, #4]
   15df4:	ldrd	r4, [sp]
   15df8:	ldr	r8, [sp, #16]
   15dfc:	add	sp, sp, #20
   15e00:	pop	{pc}		; (ldr pc, [sp], #4)
   15e04:	strdeq	sl, [r2], -ip
   15e08:	ldr	r3, [pc, #4]	; 15e14 <__assert_fail@plt+0x4ee4>
   15e0c:	mvn	r2, #0
   15e10:	b	158d4 <__assert_fail@plt+0x49a4>
   15e14:	andeq	sl, r2, r0, lsl #5
   15e18:	ldr	r3, [pc]	; 15e20 <__assert_fail@plt+0x4ef0>
   15e1c:	b	158d4 <__assert_fail@plt+0x49a4>
   15e20:	andeq	sl, r2, r0, lsl #5
   15e24:	mov	r1, r0
   15e28:	ldr	r3, [pc, #8]	; 15e38 <__assert_fail@plt+0x4f08>
   15e2c:	mvn	r2, #0
   15e30:	mov	r0, #0
   15e34:	b	158d4 <__assert_fail@plt+0x49a4>
   15e38:	andeq	sl, r2, r0, lsl #5
   15e3c:	mov	r2, r1
   15e40:	ldr	r3, [pc, #8]	; 15e50 <__assert_fail@plt+0x4f20>
   15e44:	mov	r1, r0
   15e48:	mov	r0, #0
   15e4c:	b	158d4 <__assert_fail@plt+0x49a4>
   15e50:	andeq	sl, r2, r0, lsl #5
   15e54:	strd	r4, [sp, #-12]!
   15e58:	mov	r5, r2
   15e5c:	mov	r4, r0
   15e60:	str	lr, [sp, #8]
   15e64:	sub	sp, sp, #52	; 0x34
   15e68:	mov	r0, sp
   15e6c:	bl	13f70 <__assert_fail@plt+0x3040>
   15e70:	mov	r3, sp
   15e74:	mov	r1, r5
   15e78:	mov	r0, r4
   15e7c:	mvn	r2, #0
   15e80:	bl	158d4 <__assert_fail@plt+0x49a4>
   15e84:	add	sp, sp, #52	; 0x34
   15e88:	ldrd	r4, [sp]
   15e8c:	add	sp, sp, #8
   15e90:	pop	{pc}		; (ldr pc, [sp], #4)
   15e94:	strd	r4, [sp, #-16]!
   15e98:	mov	r5, r2
   15e9c:	mov	r4, r0
   15ea0:	str	r6, [sp, #8]
   15ea4:	mov	r6, r3
   15ea8:	str	lr, [sp, #12]
   15eac:	sub	sp, sp, #48	; 0x30
   15eb0:	mov	r0, sp
   15eb4:	bl	13f70 <__assert_fail@plt+0x3040>
   15eb8:	mov	r3, sp
   15ebc:	mov	r2, r6
   15ec0:	mov	r1, r5
   15ec4:	mov	r0, r4
   15ec8:	bl	158d4 <__assert_fail@plt+0x49a4>
   15ecc:	add	sp, sp, #48	; 0x30
   15ed0:	ldrd	r4, [sp]
   15ed4:	ldr	r6, [sp, #8]
   15ed8:	add	sp, sp, #12
   15edc:	pop	{pc}		; (ldr pc, [sp], #4)
   15ee0:	mov	r2, r1
   15ee4:	mov	r1, r0
   15ee8:	mov	r0, #0
   15eec:	b	15e54 <__assert_fail@plt+0x4f24>
   15ef0:	mov	r3, r2
   15ef4:	mov	r2, r1
   15ef8:	mov	r1, r0
   15efc:	mov	r0, #0
   15f00:	b	15e94 <__assert_fail@plt+0x4f64>
   15f04:	ldr	ip, [pc, #140]	; 15f98 <__assert_fail@plt+0x5068>
   15f08:	strd	r4, [sp, #-28]!	; 0xffffffe4
   15f0c:	ldrd	r4, [ip]
   15f10:	strd	r6, [sp, #8]
   15f14:	ldrd	r6, [ip, #8]
   15f18:	strd	r8, [sp, #16]
   15f1c:	lsr	r9, r2, #5
   15f20:	str	lr, [sp, #24]
   15f24:	sub	sp, sp, #52	; 0x34
   15f28:	and	lr, r2, #31
   15f2c:	add	r8, sp, #8
   15f30:	mov	r2, r1
   15f34:	strd	r4, [sp]
   15f38:	mov	r1, r0
   15f3c:	mov	r3, sp
   15f40:	strd	r6, [sp, #8]
   15f44:	mov	r0, #0
   15f48:	ldrd	r4, [ip, #16]
   15f4c:	ldrd	r6, [ip, #24]
   15f50:	strd	r4, [sp, #16]
   15f54:	ldrd	r4, [ip, #32]
   15f58:	strd	r6, [sp, #24]
   15f5c:	ldrd	r6, [ip, #40]	; 0x28
   15f60:	strd	r4, [sp, #32]
   15f64:	strd	r6, [sp, #40]	; 0x28
   15f68:	ldr	ip, [r8, r9, lsl #2]
   15f6c:	mvn	r4, ip, lsr lr
   15f70:	and	r4, r4, #1
   15f74:	eor	lr, ip, r4, lsl lr
   15f78:	str	lr, [r8, r9, lsl #2]
   15f7c:	bl	158d4 <__assert_fail@plt+0x49a4>
   15f80:	add	sp, sp, #52	; 0x34
   15f84:	ldrd	r4, [sp]
   15f88:	ldrd	r6, [sp, #8]
   15f8c:	ldrd	r8, [sp, #16]
   15f90:	add	sp, sp, #24
   15f94:	pop	{pc}		; (ldr pc, [sp], #4)
   15f98:	andeq	sl, r2, r0, lsl #5
   15f9c:	mov	r2, r1
   15fa0:	mvn	r1, #0
   15fa4:	b	15f04 <__assert_fail@plt+0x4fd4>
   15fa8:	mov	r2, #58	; 0x3a
   15fac:	mvn	r1, #0
   15fb0:	b	15f04 <__assert_fail@plt+0x4fd4>
   15fb4:	mov	r2, #58	; 0x3a
   15fb8:	b	15f04 <__assert_fail@plt+0x4fd4>
   15fbc:	strd	r4, [sp, #-20]!	; 0xffffffec
   15fc0:	strd	r6, [sp, #8]
   15fc4:	mov	r6, r0
   15fc8:	mov	r7, r2
   15fcc:	str	lr, [sp, #16]
   15fd0:	sub	sp, sp, #100	; 0x64
   15fd4:	mov	r0, sp
   15fd8:	bl	13f70 <__assert_fail@plt+0x3040>
   15fdc:	ldrd	r4, [sp, #8]
   15fe0:	mov	r1, r7
   15fe4:	mov	r0, r6
   15fe8:	add	r3, sp, #48	; 0x30
   15fec:	mvn	r2, #0
   15ff0:	ldrd	r6, [sp]
   15ff4:	strd	r4, [sp, #56]	; 0x38
   15ff8:	ldrd	r4, [sp, #16]
   15ffc:	strd	r6, [sp, #48]	; 0x30
   16000:	ldrd	r6, [sp, #32]
   16004:	ldr	lr, [sp, #60]	; 0x3c
   16008:	strd	r4, [sp, #64]	; 0x40
   1600c:	ldrd	r4, [sp, #24]
   16010:	mvn	ip, lr
   16014:	and	ip, ip, #67108864	; 0x4000000
   16018:	strd	r4, [sp, #72]	; 0x48
   1601c:	eor	ip, ip, lr
   16020:	ldrd	r4, [sp, #40]	; 0x28
   16024:	str	ip, [sp, #60]	; 0x3c
   16028:	strd	r6, [sp, #80]	; 0x50
   1602c:	strd	r4, [sp, #88]	; 0x58
   16030:	bl	158d4 <__assert_fail@plt+0x49a4>
   16034:	add	sp, sp, #100	; 0x64
   16038:	ldrd	r4, [sp]
   1603c:	ldrd	r6, [sp, #8]
   16040:	add	sp, sp, #16
   16044:	pop	{pc}		; (ldr pc, [sp], #4)
   16048:	ldr	ip, [pc, #156]	; 160ec <__assert_fail@plt+0x51bc>
   1604c:	cmp	r2, #0
   16050:	cmpne	r1, #0
   16054:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16058:	strd	r6, [sp, #8]
   1605c:	mov	r6, r2
   16060:	str	r8, [sp, #16]
   16064:	mov	r8, r3
   16068:	strd	sl, [sp, #20]
   1606c:	ldrd	r4, [ip]
   16070:	str	lr, [sp, #28]
   16074:	sub	sp, sp, #48	; 0x30
   16078:	mov	lr, #10
   1607c:	ldrd	r2, [ip, #8]
   16080:	ldrd	sl, [ip, #16]
   16084:	strd	r4, [sp]
   16088:	ldrd	r4, [ip, #32]
   1608c:	str	lr, [sp]
   16090:	strd	r2, [sp, #8]
   16094:	strd	sl, [sp, #16]
   16098:	ldrd	r2, [ip, #24]
   1609c:	ldrd	sl, [ip, #40]	; 0x28
   160a0:	strd	r2, [sp, #24]
   160a4:	strd	r4, [sp, #32]
   160a8:	strd	sl, [sp, #40]	; 0x28
   160ac:	beq	160e8 <__assert_fail@plt+0x51b8>
   160b0:	ldr	r2, [sp, #80]	; 0x50
   160b4:	mov	r7, r1
   160b8:	mov	r3, sp
   160bc:	mov	r1, r8
   160c0:	str	r7, [sp, #40]	; 0x28
   160c4:	str	r6, [sp, #44]	; 0x2c
   160c8:	bl	158d4 <__assert_fail@plt+0x49a4>
   160cc:	add	sp, sp, #48	; 0x30
   160d0:	ldrd	r4, [sp]
   160d4:	ldrd	r6, [sp, #8]
   160d8:	ldr	r8, [sp, #16]
   160dc:	ldrd	sl, [sp, #20]
   160e0:	add	sp, sp, #28
   160e4:	pop	{pc}		; (ldr pc, [sp], #4)
   160e8:	bl	10f24 <abort@plt>
   160ec:	andeq	sl, r2, r0, lsl #5
   160f0:	mvn	ip, #0
   160f4:	push	{lr}		; (str lr, [sp, #-4]!)
   160f8:	sub	sp, sp, #12
   160fc:	str	ip, [sp]
   16100:	bl	16048 <__assert_fail@plt+0x5118>
   16104:	add	sp, sp, #12
   16108:	pop	{pc}		; (ldr pc, [sp], #4)
   1610c:	mvn	ip, #0
   16110:	push	{lr}		; (str lr, [sp, #-4]!)
   16114:	sub	sp, sp, #12
   16118:	mov	r3, r2
   1611c:	mov	r2, r1
   16120:	mov	r1, r0
   16124:	mov	r0, #0
   16128:	str	ip, [sp]
   1612c:	bl	16048 <__assert_fail@plt+0x5118>
   16130:	add	sp, sp, #12
   16134:	pop	{pc}		; (ldr pc, [sp], #4)
   16138:	push	{lr}		; (str lr, [sp, #-4]!)
   1613c:	sub	sp, sp, #12
   16140:	str	r3, [sp]
   16144:	mov	r3, r2
   16148:	mov	r2, r1
   1614c:	mov	r1, r0
   16150:	mov	r0, #0
   16154:	bl	16048 <__assert_fail@plt+0x5118>
   16158:	add	sp, sp, #12
   1615c:	pop	{pc}		; (ldr pc, [sp], #4)
   16160:	ldr	r3, [pc]	; 16168 <__assert_fail@plt+0x5238>
   16164:	b	158d4 <__assert_fail@plt+0x49a4>
   16168:	andeq	sl, r2, r4, lsl #2
   1616c:	mov	r2, r1
   16170:	ldr	r3, [pc, #8]	; 16180 <__assert_fail@plt+0x5250>
   16174:	mov	r1, r0
   16178:	mov	r0, #0
   1617c:	b	158d4 <__assert_fail@plt+0x49a4>
   16180:	andeq	sl, r2, r4, lsl #2
   16184:	ldr	r3, [pc, #4]	; 16190 <__assert_fail@plt+0x5260>
   16188:	mvn	r2, #0
   1618c:	b	158d4 <__assert_fail@plt+0x49a4>
   16190:	andeq	sl, r2, r4, lsl #2
   16194:	mov	r1, r0
   16198:	ldr	r3, [pc, #8]	; 161a8 <__assert_fail@plt+0x5278>
   1619c:	mvn	r2, #0
   161a0:	mov	r0, #0
   161a4:	b	158d4 <__assert_fail@plt+0x49a4>
   161a8:	andeq	sl, r2, r4, lsl #2
   161ac:	cmp	r1, #0
   161b0:	strd	r4, [sp, #-16]!
   161b4:	mov	ip, r3
   161b8:	str	r6, [sp, #8]
   161bc:	mov	r4, r0
   161c0:	str	lr, [sp, #12]
   161c4:	sub	sp, sp, #32
   161c8:	ldr	r5, [sp, #48]	; 0x30
   161cc:	ldr	r6, [sp, #52]	; 0x34
   161d0:	beq	16314 <__assert_fail@plt+0x53e4>
   161d4:	mov	r3, r1
   161d8:	mov	r1, #1
   161dc:	stm	sp, {r2, ip}
   161e0:	movw	r2, #36532	; 0x8eb4
   161e4:	movt	r2, #1
   161e8:	bl	10e88 <__fprintf_chk@plt>
   161ec:	mov	r2, #5
   161f0:	movw	r1, #36552	; 0x8ec8
   161f4:	movt	r1, #1
   161f8:	mov	r0, #0
   161fc:	bl	10d68 <dcgettext@plt>
   16200:	movw	ip, #2022	; 0x7e6
   16204:	mov	r3, r0
   16208:	mov	r1, #1
   1620c:	movw	r2, #37280	; 0x91a0
   16210:	movt	r2, #1
   16214:	mov	r0, r4
   16218:	str	ip, [sp]
   1621c:	bl	10e88 <__fprintf_chk@plt>
   16220:	mov	r1, r4
   16224:	mov	r0, #10
   16228:	bl	10d5c <fputc_unlocked@plt>
   1622c:	mov	r2, #5
   16230:	movw	r1, #36556	; 0x8ecc
   16234:	movt	r1, #1
   16238:	mov	r0, #0
   1623c:	bl	10d68 <dcgettext@plt>
   16240:	mov	r2, r0
   16244:	mov	r1, #1
   16248:	movw	r3, #36728	; 0x8f78
   1624c:	movt	r3, #1
   16250:	mov	r0, r4
   16254:	bl	10e88 <__fprintf_chk@plt>
   16258:	mov	r1, r4
   1625c:	mov	r0, #10
   16260:	bl	10d5c <fputc_unlocked@plt>
   16264:	cmp	r6, #9
   16268:	ldrls	pc, [pc, r6, lsl #2]
   1626c:	b	16580 <__assert_fail@plt+0x5650>
   16270:	andeq	r6, r1, r0, lsl #6
   16274:	andeq	r6, r1, r0, lsr r3
   16278:	andeq	r6, r1, ip, ror #6
   1627c:	andeq	r6, r1, ip, lsr #7
   16280:	strdeq	r6, [r1], -r4
   16284:	andeq	r6, r1, ip, lsr #8
   16288:	andeq	r6, r1, r4, ror r4
   1628c:	andeq	r6, r1, r8, asr #9
   16290:	andeq	r6, r1, r0, lsr #10
   16294:	muleq	r1, r8, r2
   16298:	movw	r1, #37032	; 0x90a8
   1629c:	movt	r1, #1
   162a0:	mov	r2, #5
   162a4:	mov	r0, #0
   162a8:	bl	10d68 <dcgettext@plt>
   162ac:	ldr	lr, [r5, #4]
   162b0:	mov	r2, r0
   162b4:	mov	r1, #1
   162b8:	mov	r0, r4
   162bc:	ldr	r3, [r5, #8]
   162c0:	ldr	ip, [r5, #32]
   162c4:	str	lr, [sp]
   162c8:	ldr	lr, [r5, #12]
   162cc:	str	ip, [sp, #28]
   162d0:	ldr	ip, [r5, #28]
   162d4:	str	r3, [sp, #4]
   162d8:	ldr	r3, [r5, #16]
   162dc:	str	lr, [sp, #8]
   162e0:	ldr	lr, [r5, #20]
   162e4:	str	ip, [sp, #24]
   162e8:	ldr	ip, [r5, #24]
   162ec:	str	r3, [sp, #12]
   162f0:	ldr	r3, [r5]
   162f4:	str	lr, [sp, #16]
   162f8:	str	ip, [sp, #20]
   162fc:	bl	10e88 <__fprintf_chk@plt>
   16300:	add	sp, sp, #32
   16304:	ldrd	r4, [sp]
   16308:	ldr	r6, [sp, #8]
   1630c:	add	sp, sp, #12
   16310:	pop	{pc}		; (ldr pc, [sp], #4)
   16314:	mov	r3, r2
   16318:	mov	r1, #1
   1631c:	str	ip, [sp]
   16320:	movw	r2, #36544	; 0x8ec0
   16324:	movt	r2, #1
   16328:	bl	10e88 <__fprintf_chk@plt>
   1632c:	b	161ec <__assert_fail@plt+0x52bc>
   16330:	mov	r2, #5
   16334:	movw	r1, #36764	; 0x8f9c
   16338:	movt	r1, #1
   1633c:	mov	r0, #0
   16340:	bl	10d68 <dcgettext@plt>
   16344:	ldr	r3, [r5]
   16348:	mov	r2, r0
   1634c:	mov	r1, #1
   16350:	mov	r0, r4
   16354:	add	sp, sp, #32
   16358:	ldrd	r4, [sp]
   1635c:	ldr	r6, [sp, #8]
   16360:	ldr	lr, [sp, #12]
   16364:	add	sp, sp, #16
   16368:	b	10e88 <__fprintf_chk@plt>
   1636c:	mov	r2, #5
   16370:	movw	r1, #36780	; 0x8fac
   16374:	movt	r1, #1
   16378:	mov	r0, #0
   1637c:	bl	10d68 <dcgettext@plt>
   16380:	ldm	r5, {r3, ip}
   16384:	mov	r2, r0
   16388:	mov	r1, #1
   1638c:	mov	r0, r4
   16390:	str	ip, [sp, #48]	; 0x30
   16394:	add	sp, sp, #32
   16398:	ldrd	r4, [sp]
   1639c:	ldr	r6, [sp, #8]
   163a0:	ldr	lr, [sp, #12]
   163a4:	add	sp, sp, #16
   163a8:	b	10e88 <__fprintf_chk@plt>
   163ac:	mov	r2, #5
   163b0:	movw	r1, #36804	; 0x8fc4
   163b4:	movt	r1, #1
   163b8:	mov	r0, #0
   163bc:	bl	10d68 <dcgettext@plt>
   163c0:	ldm	r5, {r3, lr}
   163c4:	mov	r2, r0
   163c8:	mov	r1, #1
   163cc:	mov	r0, r4
   163d0:	ldr	ip, [r5, #8]
   163d4:	str	lr, [sp, #48]	; 0x30
   163d8:	str	ip, [sp, #52]	; 0x34
   163dc:	add	sp, sp, #32
   163e0:	ldrd	r4, [sp]
   163e4:	ldr	r6, [sp, #8]
   163e8:	ldr	lr, [sp, #12]
   163ec:	add	sp, sp, #16
   163f0:	b	10e88 <__fprintf_chk@plt>
   163f4:	mov	r2, #5
   163f8:	movw	r1, #36832	; 0x8fe0
   163fc:	movt	r1, #1
   16400:	mov	r0, #0
   16404:	bl	10d68 <dcgettext@plt>
   16408:	ldmib	r5, {r3, ip, lr}
   1640c:	mov	r2, r0
   16410:	mov	r1, #1
   16414:	mov	r0, r4
   16418:	str	r3, [sp]
   1641c:	ldr	r3, [r5]
   16420:	stmib	sp, {ip, lr}
   16424:	bl	10e88 <__fprintf_chk@plt>
   16428:	b	16300 <__assert_fail@plt+0x53d0>
   1642c:	mov	r2, #5
   16430:	movw	r1, #36864	; 0x9000
   16434:	movt	r1, #1
   16438:	mov	r0, #0
   1643c:	bl	10d68 <dcgettext@plt>
   16440:	ldmib	r5, {ip, lr}
   16444:	mov	r2, r0
   16448:	mov	r1, #1
   1644c:	mov	r0, r4
   16450:	ldr	r3, [r5, #16]
   16454:	str	ip, [sp]
   16458:	ldr	ip, [r5, #12]
   1645c:	str	r3, [sp, #12]
   16460:	ldr	r3, [r5]
   16464:	str	lr, [sp, #4]
   16468:	str	ip, [sp, #8]
   1646c:	bl	10e88 <__fprintf_chk@plt>
   16470:	b	16300 <__assert_fail@plt+0x53d0>
   16474:	mov	r2, #5
   16478:	movw	r1, #36900	; 0x9024
   1647c:	movt	r1, #1
   16480:	mov	r0, #0
   16484:	bl	10d68 <dcgettext@plt>
   16488:	ldr	lr, [r5, #4]
   1648c:	mov	r2, r0
   16490:	mov	r1, #1
   16494:	mov	r0, r4
   16498:	ldr	r3, [r5, #8]
   1649c:	ldr	ip, [r5, #20]
   164a0:	str	lr, [sp]
   164a4:	ldr	lr, [r5, #12]
   164a8:	str	ip, [sp, #16]
   164ac:	ldr	ip, [r5, #16]
   164b0:	str	r3, [sp, #4]
   164b4:	ldr	r3, [r5]
   164b8:	str	lr, [sp, #8]
   164bc:	str	ip, [sp, #12]
   164c0:	bl	10e88 <__fprintf_chk@plt>
   164c4:	b	16300 <__assert_fail@plt+0x53d0>
   164c8:	mov	r2, #5
   164cc:	movw	r1, #36940	; 0x904c
   164d0:	movt	r1, #1
   164d4:	mov	r0, #0
   164d8:	bl	10d68 <dcgettext@plt>
   164dc:	ldmib	r5, {r3, ip}
   164e0:	mov	r2, r0
   164e4:	mov	r1, #1
   164e8:	mov	r0, r4
   164ec:	ldr	lr, [r5, #24]
   164f0:	str	r3, [sp]
   164f4:	ldr	r3, [r5, #12]
   164f8:	str	lr, [sp, #20]
   164fc:	ldr	lr, [r5, #20]
   16500:	str	ip, [sp, #4]
   16504:	ldr	ip, [r5, #16]
   16508:	str	r3, [sp, #8]
   1650c:	ldr	r3, [r5]
   16510:	str	ip, [sp, #12]
   16514:	str	lr, [sp, #16]
   16518:	bl	10e88 <__fprintf_chk@plt>
   1651c:	b	16300 <__assert_fail@plt+0x53d0>
   16520:	mov	r2, #5
   16524:	movw	r1, #36984	; 0x9078
   16528:	movt	r1, #1
   1652c:	mov	r0, #0
   16530:	bl	10d68 <dcgettext@plt>
   16534:	ldmib	r5, {ip, lr}
   16538:	mov	r2, r0
   1653c:	mov	r1, #1
   16540:	mov	r0, r4
   16544:	ldr	r3, [r5, #28]
   16548:	str	ip, [sp]
   1654c:	ldr	ip, [r5, #12]
   16550:	str	r3, [sp, #24]
   16554:	ldr	r3, [r5, #24]
   16558:	str	lr, [sp, #4]
   1655c:	ldr	lr, [r5, #16]
   16560:	str	ip, [sp, #8]
   16564:	ldr	ip, [r5, #20]
   16568:	str	r3, [sp, #20]
   1656c:	ldr	r3, [r5]
   16570:	str	lr, [sp, #12]
   16574:	str	ip, [sp, #16]
   16578:	bl	10e88 <__fprintf_chk@plt>
   1657c:	b	16300 <__assert_fail@plt+0x53d0>
   16580:	movw	r1, #37084	; 0x90dc
   16584:	movt	r1, #1
   16588:	b	162a0 <__assert_fail@plt+0x5370>
   1658c:	strd	r4, [sp, #-12]!
   16590:	str	lr, [sp, #8]
   16594:	sub	sp, sp, #12
   16598:	ldr	r5, [sp, #24]
   1659c:	ldr	ip, [r5]
   165a0:	cmp	ip, #0
   165a4:	beq	165c0 <__assert_fail@plt+0x5690>
   165a8:	mov	lr, r5
   165ac:	mov	ip, #0
   165b0:	ldr	r4, [lr, #4]!
   165b4:	add	ip, ip, #1
   165b8:	cmp	r4, #0
   165bc:	bne	165b0 <__assert_fail@plt+0x5680>
   165c0:	stm	sp, {r5, ip}
   165c4:	bl	161ac <__assert_fail@plt+0x527c>
   165c8:	add	sp, sp, #12
   165cc:	ldrd	r4, [sp]
   165d0:	add	sp, sp, #8
   165d4:	pop	{pc}		; (ldr pc, [sp], #4)
   165d8:	strd	r4, [sp, #-16]!
   165dc:	mov	ip, #0
   165e0:	str	r6, [sp, #8]
   165e4:	str	lr, [sp, #12]
   165e8:	sub	sp, sp, #48	; 0x30
   165ec:	ldr	r5, [sp, #64]	; 0x40
   165f0:	add	r6, sp, #8
   165f4:	mov	r4, r6
   165f8:	ldr	lr, [r5], #4
   165fc:	cmp	lr, #0
   16600:	str	lr, [r4], #4
   16604:	beq	16614 <__assert_fail@plt+0x56e4>
   16608:	add	ip, ip, #1
   1660c:	cmp	ip, #10
   16610:	bne	165f8 <__assert_fail@plt+0x56c8>
   16614:	stm	sp, {r6, ip}
   16618:	bl	161ac <__assert_fail@plt+0x527c>
   1661c:	add	sp, sp, #48	; 0x30
   16620:	ldrd	r4, [sp]
   16624:	ldr	r6, [sp, #8]
   16628:	add	sp, sp, #12
   1662c:	pop	{pc}		; (ldr pc, [sp], #4)
   16630:	push	{r3}		; (str r3, [sp, #-4]!)
   16634:	mov	ip, #0
   16638:	strd	r4, [sp, #-12]!
   1663c:	str	lr, [sp, #8]
   16640:	sub	sp, sp, #56	; 0x38
   16644:	add	r3, sp, #72	; 0x48
   16648:	add	r5, sp, #16
   1664c:	mov	r4, r3
   16650:	mov	lr, r5
   16654:	str	r3, [sp, #12]
   16658:	ldr	r3, [r4], #4
   1665c:	cmp	r3, #0
   16660:	str	r3, [lr], #4
   16664:	beq	16674 <__assert_fail@plt+0x5744>
   16668:	add	ip, ip, #1
   1666c:	cmp	ip, #10
   16670:	bne	16658 <__assert_fail@plt+0x5728>
   16674:	ldr	r3, [sp, #68]	; 0x44
   16678:	stm	sp, {r5, ip}
   1667c:	bl	161ac <__assert_fail@plt+0x527c>
   16680:	add	sp, sp, #56	; 0x38
   16684:	ldrd	r4, [sp]
   16688:	ldr	lr, [sp, #8]
   1668c:	add	sp, sp, #12
   16690:	add	sp, sp, #4
   16694:	bx	lr
   16698:	movw	r3, #41300	; 0xa154
   1669c:	movt	r3, #2
   166a0:	str	r4, [sp, #-8]!
   166a4:	mov	r0, #10
   166a8:	ldr	r1, [r3]
   166ac:	str	lr, [sp, #4]
   166b0:	bl	10d5c <fputc_unlocked@plt>
   166b4:	mov	r2, #5
   166b8:	movw	r1, #37144	; 0x9118
   166bc:	movt	r1, #1
   166c0:	mov	r0, #0
   166c4:	bl	10d68 <dcgettext@plt>
   166c8:	mov	r1, r0
   166cc:	movw	r2, #37164	; 0x912c
   166d0:	movt	r2, #1
   166d4:	mov	r0, #1
   166d8:	bl	10e70 <__printf_chk@plt>
   166dc:	mov	r2, #5
   166e0:	movw	r1, #37188	; 0x9144
   166e4:	movt	r1, #1
   166e8:	mov	r0, #0
   166ec:	bl	10d68 <dcgettext@plt>
   166f0:	mov	r1, r0
   166f4:	movw	r3, #35004	; 0x88bc
   166f8:	movt	r3, #1
   166fc:	movw	r2, #35044	; 0x88e4
   16700:	movt	r2, #1
   16704:	mov	r0, #1
   16708:	bl	10e70 <__printf_chk@plt>
   1670c:	mov	r2, #5
   16710:	movw	r1, #37208	; 0x9158
   16714:	movt	r1, #1
   16718:	mov	r0, #0
   1671c:	bl	10d68 <dcgettext@plt>
   16720:	mov	r1, r0
   16724:	movw	r2, #37248	; 0x9180
   16728:	movt	r2, #1
   1672c:	mov	r0, #1
   16730:	ldr	r4, [sp]
   16734:	ldr	lr, [sp, #4]
   16738:	add	sp, sp, #8
   1673c:	b	10e70 <__printf_chk@plt>
   16740:	str	r4, [sp, #-8]!
   16744:	str	lr, [sp, #4]
   16748:	bl	179ac <__assert_fail@plt+0x6a7c>
   1674c:	cmp	r0, #0
   16750:	beq	16760 <__assert_fail@plt+0x5830>
   16754:	ldr	r4, [sp]
   16758:	add	sp, sp, #4
   1675c:	pop	{pc}		; (ldr pc, [sp], #4)
   16760:	bl	16bb8 <__assert_fail@plt+0x5c88>
   16764:	str	r4, [sp, #-8]!
   16768:	str	lr, [sp, #4]
   1676c:	bl	179ac <__assert_fail@plt+0x6a7c>
   16770:	cmp	r0, #0
   16774:	beq	16784 <__assert_fail@plt+0x5854>
   16778:	ldr	r4, [sp]
   1677c:	add	sp, sp, #4
   16780:	pop	{pc}		; (ldr pc, [sp], #4)
   16784:	bl	16bb8 <__assert_fail@plt+0x5c88>
   16788:	str	r4, [sp, #-8]!
   1678c:	str	lr, [sp, #4]
   16790:	bl	179ac <__assert_fail@plt+0x6a7c>
   16794:	cmp	r0, #0
   16798:	beq	167a8 <__assert_fail@plt+0x5878>
   1679c:	ldr	r4, [sp]
   167a0:	add	sp, sp, #4
   167a4:	pop	{pc}		; (ldr pc, [sp], #4)
   167a8:	bl	16bb8 <__assert_fail@plt+0x5c88>
   167ac:	strd	r4, [sp, #-16]!
   167b0:	mov	r5, r0
   167b4:	mov	r4, r1
   167b8:	str	r6, [sp, #8]
   167bc:	str	lr, [sp, #12]
   167c0:	bl	179e8 <__assert_fail@plt+0x6ab8>
   167c4:	cmp	r0, #0
   167c8:	beq	167dc <__assert_fail@plt+0x58ac>
   167cc:	ldrd	r4, [sp]
   167d0:	ldr	r6, [sp, #8]
   167d4:	add	sp, sp, #12
   167d8:	pop	{pc}		; (ldr pc, [sp], #4)
   167dc:	adds	r4, r4, #0
   167e0:	movne	r4, #1
   167e4:	cmp	r5, #0
   167e8:	moveq	r4, #1
   167ec:	cmp	r4, #0
   167f0:	beq	167cc <__assert_fail@plt+0x589c>
   167f4:	bl	16bb8 <__assert_fail@plt+0x5c88>
   167f8:	cmp	r1, #0
   167fc:	orreq	r1, r1, #1
   16800:	str	r4, [sp, #-8]!
   16804:	str	lr, [sp, #4]
   16808:	bl	179e8 <__assert_fail@plt+0x6ab8>
   1680c:	cmp	r0, #0
   16810:	beq	16820 <__assert_fail@plt+0x58f0>
   16814:	ldr	r4, [sp]
   16818:	add	sp, sp, #4
   1681c:	pop	{pc}		; (ldr pc, [sp], #4)
   16820:	bl	16bb8 <__assert_fail@plt+0x5c88>
   16824:	strd	r4, [sp, #-16]!
   16828:	mov	r4, r0
   1682c:	mov	r5, r2
   16830:	str	r6, [sp, #8]
   16834:	mov	r6, r1
   16838:	str	lr, [sp, #12]
   1683c:	bl	17b84 <__assert_fail@plt+0x6c54>
   16840:	cmp	r0, #0
   16844:	beq	16858 <__assert_fail@plt+0x5928>
   16848:	ldrd	r4, [sp]
   1684c:	ldr	r6, [sp, #8]
   16850:	add	sp, sp, #12
   16854:	pop	{pc}		; (ldr pc, [sp], #4)
   16858:	cmp	r4, #0
   1685c:	beq	1686c <__assert_fail@plt+0x593c>
   16860:	cmp	r6, #0
   16864:	cmpne	r5, #0
   16868:	beq	16848 <__assert_fail@plt+0x5918>
   1686c:	bl	16bb8 <__assert_fail@plt+0x5c88>
   16870:	b	16824 <__assert_fail@plt+0x58f4>
   16874:	cmp	r2, #0
   16878:	cmpne	r1, #0
   1687c:	str	r4, [sp, #-8]!
   16880:	moveq	r2, #1
   16884:	str	lr, [sp, #4]
   16888:	moveq	r1, r2
   1688c:	bl	17b84 <__assert_fail@plt+0x6c54>
   16890:	cmp	r0, #0
   16894:	beq	168a4 <__assert_fail@plt+0x5974>
   16898:	ldr	r4, [sp]
   1689c:	add	sp, sp, #4
   168a0:	pop	{pc}		; (ldr pc, [sp], #4)
   168a4:	bl	16bb8 <__assert_fail@plt+0x5c88>
   168a8:	mov	r2, r1
   168ac:	mov	r1, r0
   168b0:	mov	r0, #0
   168b4:	b	16824 <__assert_fail@plt+0x58f4>
   168b8:	mov	r2, r1
   168bc:	mov	r1, r0
   168c0:	mov	r0, #0
   168c4:	b	16874 <__assert_fail@plt+0x5944>
   168c8:	cmp	r0, #0
   168cc:	strd	r4, [sp, #-16]!
   168d0:	mov	r5, r1
   168d4:	ldr	r4, [r1]
   168d8:	str	r6, [sp, #8]
   168dc:	str	lr, [sp, #12]
   168e0:	beq	16910 <__assert_fail@plt+0x59e0>
   168e4:	lsr	r3, r4, #1
   168e8:	add	r3, r3, #1
   168ec:	adds	r4, r4, r3
   168f0:	bcs	1692c <__assert_fail@plt+0x59fc>
   168f4:	mov	r1, r4
   168f8:	bl	16824 <__assert_fail@plt+0x58f4>
   168fc:	ldr	r6, [sp, #8]
   16900:	str	r4, [r5]
   16904:	ldrd	r4, [sp]
   16908:	add	sp, sp, #12
   1690c:	pop	{pc}		; (ldr pc, [sp], #4)
   16910:	cmp	r4, #0
   16914:	bne	168f4 <__assert_fail@plt+0x59c4>
   16918:	mov	r4, #64	; 0x40
   1691c:	udiv	r4, r4, r2
   16920:	cmp	r2, #64	; 0x40
   16924:	addhi	r4, r4, #1
   16928:	b	168f4 <__assert_fail@plt+0x59c4>
   1692c:	bl	16bb8 <__assert_fail@plt+0x5c88>
   16930:	mov	r2, #1
   16934:	b	168c8 <__assert_fail@plt+0x5998>
   16938:	ldr	ip, [r1]
   1693c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16940:	mov	r5, r1
   16944:	strd	r6, [sp, #8]
   16948:	str	lr, [sp, #28]
   1694c:	strd	r8, [sp, #16]
   16950:	asr	lr, ip, #1
   16954:	ldr	r8, [sp, #32]
   16958:	str	sl, [sp, #24]
   1695c:	adds	r4, ip, lr
   16960:	mvn	lr, r3
   16964:	lsr	lr, lr, #31
   16968:	mvnvs	r4, #-2147483648	; 0x80000000
   1696c:	cmp	r3, r4
   16970:	movge	r1, #0
   16974:	andlt	r1, lr, #1
   16978:	cmp	r1, #0
   1697c:	movne	r4, r3
   16980:	smull	r6, r7, r4, r8
   16984:	cmp	r7, r6, asr #31
   16988:	bne	16a10 <__assert_fail@plt+0x5ae0>
   1698c:	cmp	r6, #63	; 0x3f
   16990:	mov	r1, r6
   16994:	ble	169f8 <__assert_fail@plt+0x5ac8>
   16998:	cmp	r0, #0
   1699c:	sub	r6, r4, ip
   169a0:	streq	r0, [r5]
   169a4:	cmp	r6, r2
   169a8:	bge	169d8 <__assert_fail@plt+0x5aa8>
   169ac:	adds	r4, ip, r2
   169b0:	bvs	16a0c <__assert_fail@plt+0x5adc>
   169b4:	cmp	r4, r3
   169b8:	movle	r3, #0
   169bc:	andgt	r3, lr, #1
   169c0:	cmp	r3, #0
   169c4:	bne	16a0c <__assert_fail@plt+0x5adc>
   169c8:	smull	r8, r9, r4, r8
   169cc:	cmp	r9, r8, asr #31
   169d0:	mov	r1, r8
   169d4:	bne	16a0c <__assert_fail@plt+0x5adc>
   169d8:	bl	167ac <__assert_fail@plt+0x587c>
   169dc:	ldrd	r6, [sp, #8]
   169e0:	ldrd	r8, [sp, #16]
   169e4:	ldr	sl, [sp, #24]
   169e8:	str	r4, [r5]
   169ec:	ldrd	r4, [sp]
   169f0:	add	sp, sp, #28
   169f4:	pop	{pc}		; (ldr pc, [sp], #4)
   169f8:	mov	r6, #64	; 0x40
   169fc:	sdiv	r4, r6, r8
   16a00:	mls	r1, r8, r4, r6
   16a04:	sub	r1, r6, r1
   16a08:	b	16998 <__assert_fail@plt+0x5a68>
   16a0c:	bl	16bb8 <__assert_fail@plt+0x5c88>
   16a10:	mvn	r6, #-2147483648	; 0x80000000
   16a14:	b	169fc <__assert_fail@plt+0x5acc>
   16a18:	mov	r1, #1
   16a1c:	str	r4, [sp, #-8]!
   16a20:	str	lr, [sp, #4]
   16a24:	bl	17938 <__assert_fail@plt+0x6a08>
   16a28:	cmp	r0, #0
   16a2c:	beq	16a3c <__assert_fail@plt+0x5b0c>
   16a30:	ldr	r4, [sp]
   16a34:	add	sp, sp, #4
   16a38:	pop	{pc}		; (ldr pc, [sp], #4)
   16a3c:	bl	16bb8 <__assert_fail@plt+0x5c88>
   16a40:	mov	r1, #1
   16a44:	str	r4, [sp, #-8]!
   16a48:	str	lr, [sp, #4]
   16a4c:	bl	17938 <__assert_fail@plt+0x6a08>
   16a50:	cmp	r0, #0
   16a54:	beq	16a64 <__assert_fail@plt+0x5b34>
   16a58:	ldr	r4, [sp]
   16a5c:	add	sp, sp, #4
   16a60:	pop	{pc}		; (ldr pc, [sp], #4)
   16a64:	bl	16bb8 <__assert_fail@plt+0x5c88>
   16a68:	str	r4, [sp, #-8]!
   16a6c:	str	lr, [sp, #4]
   16a70:	bl	17938 <__assert_fail@plt+0x6a08>
   16a74:	cmp	r0, #0
   16a78:	beq	16a88 <__assert_fail@plt+0x5b58>
   16a7c:	ldr	r4, [sp]
   16a80:	add	sp, sp, #4
   16a84:	pop	{pc}		; (ldr pc, [sp], #4)
   16a88:	bl	16bb8 <__assert_fail@plt+0x5c88>
   16a8c:	str	r4, [sp, #-8]!
   16a90:	str	lr, [sp, #4]
   16a94:	bl	17938 <__assert_fail@plt+0x6a08>
   16a98:	cmp	r0, #0
   16a9c:	beq	16aac <__assert_fail@plt+0x5b7c>
   16aa0:	ldr	r4, [sp]
   16aa4:	add	sp, sp, #4
   16aa8:	pop	{pc}		; (ldr pc, [sp], #4)
   16aac:	bl	16bb8 <__assert_fail@plt+0x5c88>
   16ab0:	strd	r4, [sp, #-16]!
   16ab4:	mov	r4, r1
   16ab8:	str	r6, [sp, #8]
   16abc:	mov	r6, r0
   16ac0:	mov	r0, r1
   16ac4:	str	lr, [sp, #12]
   16ac8:	bl	179ac <__assert_fail@plt+0x6a7c>
   16acc:	subs	r5, r0, #0
   16ad0:	beq	16af4 <__assert_fail@plt+0x5bc4>
   16ad4:	mov	r2, r4
   16ad8:	mov	r1, r6
   16adc:	bl	10d2c <memcpy@plt>
   16ae0:	mov	r0, r5
   16ae4:	ldrd	r4, [sp]
   16ae8:	ldr	r6, [sp, #8]
   16aec:	add	sp, sp, #12
   16af0:	pop	{pc}		; (ldr pc, [sp], #4)
   16af4:	bl	16bb8 <__assert_fail@plt+0x5c88>
   16af8:	strd	r4, [sp, #-16]!
   16afc:	mov	r4, r1
   16b00:	str	r6, [sp, #8]
   16b04:	mov	r6, r0
   16b08:	mov	r0, r1
   16b0c:	str	lr, [sp, #12]
   16b10:	bl	179ac <__assert_fail@plt+0x6a7c>
   16b14:	subs	r5, r0, #0
   16b18:	beq	16b3c <__assert_fail@plt+0x5c0c>
   16b1c:	mov	r2, r4
   16b20:	mov	r1, r6
   16b24:	bl	10d2c <memcpy@plt>
   16b28:	mov	r0, r5
   16b2c:	ldrd	r4, [sp]
   16b30:	ldr	r6, [sp, #8]
   16b34:	add	sp, sp, #12
   16b38:	pop	{pc}		; (ldr pc, [sp], #4)
   16b3c:	bl	16bb8 <__assert_fail@plt+0x5c88>
   16b40:	strd	r4, [sp, #-16]!
   16b44:	mov	r4, r1
   16b48:	str	r6, [sp, #8]
   16b4c:	mov	r6, r0
   16b50:	add	r0, r1, #1
   16b54:	str	lr, [sp, #12]
   16b58:	bl	179ac <__assert_fail@plt+0x6a7c>
   16b5c:	subs	r5, r0, #0
   16b60:	beq	16b8c <__assert_fail@plt+0x5c5c>
   16b64:	mov	r3, #0
   16b68:	mov	r1, r6
   16b6c:	mov	r2, r4
   16b70:	strb	r3, [r5, r4]
   16b74:	bl	10d2c <memcpy@plt>
   16b78:	mov	r0, r5
   16b7c:	ldrd	r4, [sp]
   16b80:	ldr	r6, [sp, #8]
   16b84:	add	sp, sp, #12
   16b88:	pop	{pc}		; (ldr pc, [sp], #4)
   16b8c:	bl	16bb8 <__assert_fail@plt+0x5c88>
   16b90:	str	r4, [sp, #-8]!
   16b94:	mov	r4, r0
   16b98:	str	lr, [sp, #4]
   16b9c:	bl	10e34 <strlen@plt>
   16ba0:	add	r1, r0, #1
   16ba4:	mov	r0, r4
   16ba8:	ldr	r4, [sp]
   16bac:	ldr	lr, [sp, #4]
   16bb0:	add	sp, sp, #8
   16bb4:	b	16ab0 <__assert_fail@plt+0x5b80>
   16bb8:	movw	r3, #41200	; 0xa0f0
   16bbc:	movt	r3, #2
   16bc0:	str	r4, [sp, #-8]!
   16bc4:	ldr	r4, [r3]
   16bc8:	mov	r2, #5
   16bcc:	movw	r1, #37328	; 0x91d0
   16bd0:	movt	r1, #1
   16bd4:	mov	r0, #0
   16bd8:	str	lr, [sp, #4]
   16bdc:	bl	10d68 <dcgettext@plt>
   16be0:	mov	r3, r0
   16be4:	movw	r2, #35264	; 0x89c0
   16be8:	movt	r2, #1
   16bec:	mov	r1, #0
   16bf0:	mov	r0, r4
   16bf4:	bl	10dd4 <error@plt>
   16bf8:	bl	10f24 <abort@plt>
   16bfc:	cmp	r2, #36	; 0x24
   16c00:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16c04:	strd	r6, [sp, #8]
   16c08:	strd	r8, [sp, #16]
   16c0c:	strd	sl, [sp, #24]
   16c10:	str	lr, [sp, #32]
   16c14:	sub	sp, sp, #44	; 0x2c
   16c18:	bhi	17804 <__assert_fail@plt+0x68d4>
   16c1c:	cmp	r1, #0
   16c20:	mov	r5, r1
   16c24:	mov	r6, r2
   16c28:	addeq	r5, sp, #36	; 0x24
   16c2c:	mov	sl, r0
   16c30:	mov	r7, r3
   16c34:	bl	10e4c <__errno_location@plt>
   16c38:	mov	fp, r0
   16c3c:	mov	r4, #0
   16c40:	mov	r2, r6
   16c44:	mov	r3, r4
   16c48:	mov	r1, r5
   16c4c:	mov	r0, sl
   16c50:	str	r4, [fp]
   16c54:	bl	10ee8 <__strtoll_internal@plt>
   16c58:	ldr	r6, [r5]
   16c5c:	mov	r8, r0
   16c60:	mov	r9, r1
   16c64:	cmp	r6, sl
   16c68:	beq	16cc0 <__assert_fail@plt+0x5d90>
   16c6c:	ldr	r4, [fp]
   16c70:	cmp	r4, #0
   16c74:	beq	16c84 <__assert_fail@plt+0x5d54>
   16c78:	cmp	r4, #34	; 0x22
   16c7c:	bne	16dc4 <__assert_fail@plt+0x5e94>
   16c80:	mov	r4, #1
   16c84:	ldr	r3, [sp, #80]	; 0x50
   16c88:	cmp	r3, #0
   16c8c:	beq	16c9c <__assert_fail@plt+0x5d6c>
   16c90:	ldrb	sl, [r6]
   16c94:	cmp	sl, #0
   16c98:	bne	16ec8 <__assert_fail@plt+0x5f98>
   16c9c:	strd	r8, [r7]
   16ca0:	mov	r0, r4
   16ca4:	add	sp, sp, #44	; 0x2c
   16ca8:	ldrd	r4, [sp]
   16cac:	ldrd	r6, [sp, #8]
   16cb0:	ldrd	r8, [sp, #16]
   16cb4:	ldrd	sl, [sp, #24]
   16cb8:	add	sp, sp, #32
   16cbc:	pop	{pc}		; (ldr pc, [sp], #4)
   16cc0:	ldr	r3, [sp, #80]	; 0x50
   16cc4:	cmp	r3, r4
   16cc8:	beq	16dc4 <__assert_fail@plt+0x5e94>
   16ccc:	ldrb	sl, [sl]
   16cd0:	cmp	sl, r4
   16cd4:	beq	16dc4 <__assert_fail@plt+0x5e94>
   16cd8:	mov	r1, sl
   16cdc:	mov	r0, r3
   16ce0:	bl	10e40 <strchr@plt>
   16ce4:	cmp	r0, r4
   16ce8:	movne	r8, #1
   16cec:	movne	r9, #0
   16cf0:	beq	16dc4 <__assert_fail@plt+0x5e94>
   16cf4:	sub	fp, sl, #69	; 0x45
   16cf8:	cmp	fp, #47	; 0x2f
   16cfc:	ldrls	pc, [pc, fp, lsl #2]
   16d00:	b	16ee4 <__assert_fail@plt+0x5fb4>
   16d04:	andeq	r6, r1, ip, asr #27
   16d08:	andeq	r6, r1, r4, ror #29
   16d0c:	andeq	r6, r1, ip, asr #27
   16d10:	andeq	r6, r1, r4, ror #29
   16d14:	andeq	r6, r1, r4, ror #29
   16d18:	andeq	r6, r1, r4, ror #29
   16d1c:	andeq	r6, r1, ip, asr #27
   16d20:	andeq	r6, r1, r4, ror #29
   16d24:	andeq	r6, r1, ip, asr #27
   16d28:	andeq	r6, r1, r4, ror #29
   16d2c:	andeq	r6, r1, r4, ror #29
   16d30:	andeq	r6, r1, ip, asr #27
   16d34:	andeq	r6, r1, r4, ror #29
   16d38:	andeq	r6, r1, r4, ror #29
   16d3c:	andeq	r6, r1, r4, ror #29
   16d40:	andeq	r6, r1, ip, asr #27
   16d44:	andeq	r6, r1, r4, ror #29
   16d48:	andeq	r6, r1, r4, ror #29
   16d4c:	andeq	r6, r1, r4, ror #29
   16d50:	andeq	r6, r1, r4, ror #29
   16d54:	andeq	r6, r1, ip, asr #27
   16d58:	andeq	r6, r1, ip, asr #27
   16d5c:	andeq	r6, r1, r4, ror #29
   16d60:	andeq	r6, r1, r4, ror #29
   16d64:	andeq	r6, r1, r4, ror #29
   16d68:	andeq	r6, r1, r4, ror #29
   16d6c:	andeq	r6, r1, r4, ror #29
   16d70:	andeq	r6, r1, r4, ror #29
   16d74:	andeq	r6, r1, r4, ror #29
   16d78:	andeq	r6, r1, r4, ror #29
   16d7c:	andeq	r6, r1, r4, ror #29
   16d80:	andeq	r6, r1, r4, ror #29
   16d84:	andeq	r6, r1, r4, ror #29
   16d88:	andeq	r6, r1, r4, ror #29
   16d8c:	andeq	r6, r1, ip, asr #27
   16d90:	andeq	r6, r1, r4, ror #29
   16d94:	andeq	r6, r1, r4, ror #29
   16d98:	andeq	r6, r1, r4, ror #29
   16d9c:	andeq	r6, r1, ip, asr #27
   16da0:	andeq	r6, r1, r4, ror #29
   16da4:	andeq	r6, r1, ip, asr #27
   16da8:	andeq	r6, r1, r4, ror #29
   16dac:	andeq	r6, r1, r4, ror #29
   16db0:	andeq	r6, r1, r4, ror #29
   16db4:	andeq	r6, r1, r4, ror #29
   16db8:	andeq	r6, r1, r4, ror #29
   16dbc:	andeq	r6, r1, r4, ror #29
   16dc0:	andeq	r6, r1, ip, asr #27
   16dc4:	mov	r4, #4
   16dc8:	b	16ca0 <__assert_fail@plt+0x5d70>
   16dcc:	mov	r1, #48	; 0x30
   16dd0:	ldr	r0, [sp, #80]	; 0x50
   16dd4:	bl	10e40 <strchr@plt>
   16dd8:	cmp	r0, #0
   16ddc:	beq	16ee4 <__assert_fail@plt+0x5fb4>
   16de0:	ldrb	r3, [r6, #1]
   16de4:	cmp	r3, #68	; 0x44
   16de8:	beq	174ac <__assert_fail@plt+0x657c>
   16dec:	cmp	r3, #105	; 0x69
   16df0:	beq	1765c <__assert_fail@plt+0x672c>
   16df4:	cmp	r3, #66	; 0x42
   16df8:	beq	174ac <__assert_fail@plt+0x657c>
   16dfc:	cmp	fp, #47	; 0x2f
   16e00:	ldrls	pc, [pc, fp, lsl #2]
   16e04:	b	16edc <__assert_fail@plt+0x5fac>
   16e08:	andeq	r7, r1, r4, lsl #8
   16e0c:	ldrdeq	r6, [r1], -ip
   16e10:	strdeq	r7, [r1], -r4
   16e14:	ldrdeq	r6, [r1], -ip
   16e18:	ldrdeq	r6, [r1], -ip
   16e1c:	ldrdeq	r6, [r1], -ip
   16e20:	andeq	r7, r1, r0, ror r4
   16e24:	ldrdeq	r6, [r1], -ip
   16e28:	andeq	r7, r1, r0, ror #8
   16e2c:	ldrdeq	r6, [r1], -ip
   16e30:	ldrdeq	r6, [r1], -ip
   16e34:	andeq	r7, r1, r0, lsr r4
   16e38:	ldrdeq	r6, [r1], -ip
   16e3c:	ldrdeq	r6, [r1], -ip
   16e40:	ldrdeq	r6, [r1], -ip
   16e44:	andeq	r7, r1, r0, lsr #8
   16e48:	ldrdeq	r6, [r1], -ip
   16e4c:	ldrdeq	r6, [r1], -ip
   16e50:	ldrdeq	r6, [r1], -ip
   16e54:	ldrdeq	r6, [r1], -ip
   16e58:	andeq	r7, r1, r0, asr r4
   16e5c:	andeq	r7, r1, r0, asr #8
   16e60:	ldrdeq	r6, [r1], -ip
   16e64:	ldrdeq	r6, [r1], -ip
   16e68:	ldrdeq	r6, [r1], -ip
   16e6c:	ldrdeq	r6, [r1], -ip
   16e70:	ldrdeq	r6, [r1], -ip
   16e74:	ldrdeq	r6, [r1], -ip
   16e78:	ldrdeq	r6, [r1], -ip
   16e7c:	ldrdeq	r6, [r1], -r4
   16e80:	andeq	r7, r1, r4, lsl r4
   16e84:	ldrdeq	r6, [r1], -ip
   16e88:	ldrdeq	r6, [r1], -ip
   16e8c:	ldrdeq	r6, [r1], -ip
   16e90:	strdeq	r7, [r1], -r4
   16e94:	ldrdeq	r6, [r1], -ip
   16e98:	ldrdeq	r6, [r1], -ip
   16e9c:	ldrdeq	r6, [r1], -ip
   16ea0:	andeq	r7, r1, r0, ror r4
   16ea4:	ldrdeq	r6, [r1], -ip
   16ea8:	andeq	r7, r1, r0, ror #8
   16eac:	ldrdeq	r6, [r1], -ip
   16eb0:	ldrdeq	r6, [r1], -ip
   16eb4:	ldrdeq	r6, [r1], -ip
   16eb8:	ldrdeq	r6, [r1], -ip
   16ebc:	ldrdeq	r6, [r1], -ip
   16ec0:	ldrdeq	r6, [r1], -ip
   16ec4:	andeq	r7, r1, r0, lsr #8
   16ec8:	mov	r1, sl
   16ecc:	ldr	r0, [sp, #80]	; 0x50
   16ed0:	bl	10e40 <strchr@plt>
   16ed4:	cmp	r0, #0
   16ed8:	bne	16cf4 <__assert_fail@plt+0x5dc4>
   16edc:	orr	r4, r4, #2
   16ee0:	b	16c9c <__assert_fail@plt+0x5d6c>
   16ee4:	mov	r3, #1
   16ee8:	mov	fp, #1024	; 0x400
   16eec:	sub	sl, sl, #66	; 0x42
   16ef0:	cmp	sl, #53	; 0x35
   16ef4:	ldrls	pc, [pc, sl, lsl #2]
   16ef8:	b	16edc <__assert_fail@plt+0x5fac>
   16efc:	andeq	r7, r1, r0, lsr #32
   16f00:	ldrdeq	r6, [r1], -ip
   16f04:	ldrdeq	r6, [r1], -ip
   16f08:	andeq	r7, r1, ip, lsl #4
   16f0c:	ldrdeq	r6, [r1], -ip
   16f10:	muleq	r1, r4, r1
   16f14:	ldrdeq	r6, [r1], -ip
   16f18:	ldrdeq	r6, [r1], -ip
   16f1c:	ldrdeq	r6, [r1], -ip
   16f20:	andeq	r7, r1, r8, asr r1
   16f24:	ldrdeq	r6, [r1], -ip
   16f28:	strdeq	r7, [r1], -ip
   16f2c:	ldrdeq	r6, [r1], -ip
   16f30:	ldrdeq	r6, [r1], -ip
   16f34:	strdeq	r7, [r1], -ip
   16f38:	ldrdeq	r6, [r1], -ip
   16f3c:	ldrdeq	r6, [r1], -ip
   16f40:	ldrdeq	r6, [r1], -ip
   16f44:	andeq	r7, r1, r4, lsl #5
   16f48:	ldrdeq	r6, [r1], -ip
   16f4c:	ldrdeq	r6, [r1], -ip
   16f50:	ldrdeq	r6, [r1], -ip
   16f54:	ldrdeq	r6, [r1], -ip
   16f58:	andeq	r7, r1, r4, ror r3
   16f5c:	andeq	r7, r1, r4, lsl #1
   16f60:	ldrdeq	r6, [r1], -ip
   16f64:	ldrdeq	r6, [r1], -ip
   16f68:	ldrdeq	r6, [r1], -ip
   16f6c:	ldrdeq	r6, [r1], -ip
   16f70:	ldrdeq	r6, [r1], -ip
   16f74:	ldrdeq	r6, [r1], -ip
   16f78:	ldrdeq	r6, [r1], -ip
   16f7c:	ldrdeq	r6, [r1], -r8
   16f80:	andeq	r7, r1, ip, ror #7
   16f84:	ldrdeq	r6, [r1], -ip
   16f88:	ldrdeq	r6, [r1], -ip
   16f8c:	ldrdeq	r6, [r1], -ip
   16f90:	muleq	r1, r4, r1
   16f94:	ldrdeq	r6, [r1], -ip
   16f98:	ldrdeq	r6, [r1], -ip
   16f9c:	ldrdeq	r6, [r1], -ip
   16fa0:	andeq	r7, r1, r8, asr r1
   16fa4:	ldrdeq	r6, [r1], -ip
   16fa8:	strdeq	r7, [r1], -ip
   16fac:	ldrdeq	r6, [r1], -ip
   16fb0:	ldrdeq	r6, [r1], -ip
   16fb4:	ldrdeq	r6, [r1], -ip
   16fb8:	ldrdeq	r6, [r1], -ip
   16fbc:	ldrdeq	r6, [r1], -ip
   16fc0:	ldrdeq	r6, [r1], -ip
   16fc4:	andeq	r7, r1, r4, lsl #5
   16fc8:	ldrdeq	r6, [r1], -ip
   16fcc:	ldrdeq	r6, [r1], -ip
   16fd0:	andeq	r7, r1, r0, asr #32
   16fd4:	mov	r3, #1
   16fd8:	cmp	r9, r8, asr #31
   16fdc:	mov	ip, #0
   16fe0:	str	r3, [sp, #4]
   16fe4:	bne	17674 <__assert_fail@plt+0x6744>
   16fe8:	lsl	r3, r9, #9
   16fec:	lsl	r2, r8, #9
   16ff0:	orr	r3, r3, r8, lsr #23
   16ff4:	cmp	ip, #0
   16ff8:	bne	17068 <__assert_fail@plt+0x6138>
   16ffc:	mov	r8, r2
   17000:	mov	r9, r3
   17004:	ldr	r2, [sp, #4]
   17008:	add	r3, r6, r2
   1700c:	str	r3, [r5]
   17010:	ldrb	r3, [r6, r2]
   17014:	cmp	r3, #0
   17018:	beq	16c9c <__assert_fail@plt+0x5d6c>
   1701c:	b	16edc <__assert_fail@plt+0x5fac>
   17020:	cmp	r9, r8, asr #31
   17024:	mov	ip, #0
   17028:	str	r3, [sp, #4]
   1702c:	bne	176bc <__assert_fail@plt+0x678c>
   17030:	lsl	r3, r9, #10
   17034:	lsl	r2, r8, #10
   17038:	orr	r3, r3, r8, lsr #22
   1703c:	b	16ff4 <__assert_fail@plt+0x60c4>
   17040:	cmp	r9, r8, asr #31
   17044:	mov	r1, #0
   17048:	str	r3, [sp, #4]
   1704c:	bne	17740 <__assert_fail@plt+0x6810>
   17050:	adds	ip, r8, r8
   17054:	adc	r3, r9, r9
   17058:	cmp	r1, #0
   1705c:	moveq	r8, ip
   17060:	moveq	r9, r3
   17064:	beq	17004 <__assert_fail@plt+0x60d4>
   17068:	cmp	r8, #0
   1706c:	mov	r4, #1
   17070:	sbcs	r3, r9, #0
   17074:	blt	174a0 <__assert_fail@plt+0x6570>
   17078:	mvn	r8, #0
   1707c:	mvn	r9, #-2147483648	; 0x80000000
   17080:	b	17004 <__assert_fail@plt+0x60d4>
   17084:	str	r3, [sp, #4]
   17088:	asr	r1, fp, #31
   1708c:	mov	r0, fp
   17090:	mov	r3, #0
   17094:	mov	ip, #7
   17098:	mov	lr, r3
   1709c:	strd	r0, [sp, #8]
   170a0:	str	r4, [sp, #16]
   170a4:	str	r5, [sp, #24]
   170a8:	b	170bc <__assert_fail@plt+0x618c>
   170ac:	mov	r8, fp
   170b0:	mov	r9, r2
   170b4:	subs	ip, ip, #1
   170b8:	beq	17480 <__assert_fail@plt+0x6550>
   170bc:	cmp	r9, r8, asr #31
   170c0:	mov	r1, #0
   170c4:	bne	175b4 <__assert_fail@plt+0x6684>
   170c8:	smull	r2, r3, r8, r0
   170cc:	mov	fp, r2
   170d0:	mov	r2, r3
   170d4:	cmp	r1, #0
   170d8:	beq	170ac <__assert_fail@plt+0x617c>
   170dc:	cmp	r8, #0
   170e0:	mov	lr, #1
   170e4:	sbcs	r3, r9, #0
   170e8:	mvnge	r8, #0
   170ec:	mvnge	r9, #-2147483648	; 0x80000000
   170f0:	movlt	r8, #0
   170f4:	movlt	r9, #-2147483648	; 0x80000000
   170f8:	b	170b4 <__assert_fail@plt+0x6184>
   170fc:	str	r3, [sp, #4]
   17100:	asr	r3, fp, #31
   17104:	mov	r2, fp
   17108:	mov	r1, #0
   1710c:	cmp	r9, r8, asr #31
   17110:	strd	r2, [sp, #8]
   17114:	bne	17700 <__assert_fail@plt+0x67d0>
   17118:	smull	r2, r3, r8, fp
   1711c:	mov	lr, r2
   17120:	subs	ip, r1, #0
   17124:	bne	17068 <__assert_fail@plt+0x6138>
   17128:	cmp	r3, lr, asr #31
   1712c:	mov	r0, lr
   17130:	mov	r1, r3
   17134:	bne	17794 <__assert_fail@plt+0x6864>
   17138:	smull	r2, r3, lr, fp
   1713c:	mov	sl, r2
   17140:	mov	r2, r3
   17144:	cmp	ip, #0
   17148:	bne	17490 <__assert_fail@plt+0x6560>
   1714c:	mov	r8, sl
   17150:	mov	r9, r2
   17154:	b	17004 <__assert_fail@plt+0x60d4>
   17158:	str	r3, [sp, #4]
   1715c:	asr	r3, fp, #31
   17160:	mov	r2, fp
   17164:	mov	ip, #0
   17168:	cmp	r9, r8, asr #31
   1716c:	strd	r2, [sp, #8]
   17170:	bne	17528 <__assert_fail@plt+0x65f8>
   17174:	smull	r2, r3, r8, fp
   17178:	mov	r1, r2
   1717c:	mov	r2, r3
   17180:	cmp	ip, #0
   17184:	bne	17068 <__assert_fail@plt+0x6138>
   17188:	mov	r8, r1
   1718c:	mov	r9, r2
   17190:	b	17004 <__assert_fail@plt+0x60d4>
   17194:	str	r3, [sp, #4]
   17198:	asr	r1, fp, #31
   1719c:	mov	r0, fp
   171a0:	mov	r3, #0
   171a4:	mov	ip, #3
   171a8:	mov	lr, r3
   171ac:	strd	r0, [sp, #8]
   171b0:	str	r4, [sp, #16]
   171b4:	str	r5, [sp, #24]
   171b8:	b	171cc <__assert_fail@plt+0x629c>
   171bc:	mov	r8, fp
   171c0:	mov	r9, r2
   171c4:	subs	ip, ip, #1
   171c8:	beq	17480 <__assert_fail@plt+0x6550>
   171cc:	cmp	r9, r8, asr #31
   171d0:	mov	r1, #0
   171d4:	bne	174f0 <__assert_fail@plt+0x65c0>
   171d8:	smull	r2, r3, r8, r0
   171dc:	mov	fp, r2
   171e0:	mov	r2, r3
   171e4:	cmp	r1, #0
   171e8:	beq	171bc <__assert_fail@plt+0x628c>
   171ec:	cmp	r8, #0
   171f0:	mov	lr, #1
   171f4:	sbcs	r3, r9, #0
   171f8:	mvnge	r8, #0
   171fc:	mvnge	r9, #-2147483648	; 0x80000000
   17200:	movlt	r8, #0
   17204:	movlt	r9, #-2147483648	; 0x80000000
   17208:	b	171c4 <__assert_fail@plt+0x6294>
   1720c:	str	r3, [sp, #4]
   17210:	asr	r1, fp, #31
   17214:	mov	r0, fp
   17218:	mov	r3, #0
   1721c:	mov	ip, #6
   17220:	mov	lr, r3
   17224:	strd	r0, [sp, #8]
   17228:	str	r4, [sp, #16]
   1722c:	str	r5, [sp, #24]
   17230:	b	17244 <__assert_fail@plt+0x6314>
   17234:	mov	r8, fp
   17238:	mov	r9, r2
   1723c:	subs	ip, ip, #1
   17240:	beq	17480 <__assert_fail@plt+0x6550>
   17244:	cmp	r9, r8, asr #31
   17248:	mov	r1, #0
   1724c:	bne	17624 <__assert_fail@plt+0x66f4>
   17250:	smull	r2, r3, r8, r0
   17254:	mov	fp, r2
   17258:	mov	r2, r3
   1725c:	cmp	r1, #0
   17260:	beq	17234 <__assert_fail@plt+0x6304>
   17264:	cmp	r8, #0
   17268:	mov	lr, #1
   1726c:	sbcs	r3, r9, #0
   17270:	mvnge	r8, #0
   17274:	mvnge	r9, #-2147483648	; 0x80000000
   17278:	movlt	r8, #0
   1727c:	movlt	r9, #-2147483648	; 0x80000000
   17280:	b	1723c <__assert_fail@plt+0x630c>
   17284:	str	r3, [sp, #4]
   17288:	asr	r1, fp, #31
   1728c:	mov	r0, fp
   17290:	mov	r3, #0
   17294:	mov	ip, #4
   17298:	mov	lr, r3
   1729c:	strd	r0, [sp, #8]
   172a0:	str	r4, [sp, #16]
   172a4:	str	r5, [sp, #24]
   172a8:	b	172bc <__assert_fail@plt+0x638c>
   172ac:	mov	r8, fp
   172b0:	mov	r9, r2
   172b4:	subs	ip, ip, #1
   172b8:	beq	17480 <__assert_fail@plt+0x6550>
   172bc:	cmp	r9, r8, asr #31
   172c0:	mov	r1, #0
   172c4:	bne	175ec <__assert_fail@plt+0x66bc>
   172c8:	smull	r2, r3, r8, r0
   172cc:	mov	fp, r2
   172d0:	mov	r2, r3
   172d4:	cmp	r1, #0
   172d8:	beq	172ac <__assert_fail@plt+0x637c>
   172dc:	cmp	r8, #0
   172e0:	mov	lr, #1
   172e4:	sbcs	r3, r9, #0
   172e8:	mvnge	r8, #0
   172ec:	mvnge	r9, #-2147483648	; 0x80000000
   172f0:	movlt	r8, #0
   172f4:	movlt	r9, #-2147483648	; 0x80000000
   172f8:	b	172b4 <__assert_fail@plt+0x6384>
   172fc:	str	r3, [sp, #4]
   17300:	asr	r1, fp, #31
   17304:	mov	r0, fp
   17308:	mov	r3, #0
   1730c:	mov	ip, #5
   17310:	mov	lr, r3
   17314:	strd	r0, [sp, #8]
   17318:	str	r4, [sp, #16]
   1731c:	str	r5, [sp, #24]
   17320:	b	17334 <__assert_fail@plt+0x6404>
   17324:	mov	r8, fp
   17328:	mov	r9, r2
   1732c:	subs	ip, ip, #1
   17330:	beq	17480 <__assert_fail@plt+0x6550>
   17334:	cmp	r9, r8, asr #31
   17338:	mov	r1, #0
   1733c:	bne	1757c <__assert_fail@plt+0x664c>
   17340:	smull	r2, r3, r8, r0
   17344:	mov	fp, r2
   17348:	mov	r2, r3
   1734c:	cmp	r1, #0
   17350:	beq	17324 <__assert_fail@plt+0x63f4>
   17354:	cmp	r8, #0
   17358:	mov	lr, #1
   1735c:	sbcs	r3, r9, #0
   17360:	mvnge	r8, #0
   17364:	mvnge	r9, #-2147483648	; 0x80000000
   17368:	movlt	r8, #0
   1736c:	movlt	r9, #-2147483648	; 0x80000000
   17370:	b	1732c <__assert_fail@plt+0x63fc>
   17374:	str	r3, [sp, #4]
   17378:	asr	r1, fp, #31
   1737c:	mov	r0, fp
   17380:	mov	r3, #0
   17384:	mov	ip, #8
   17388:	mov	lr, r3
   1738c:	strd	r0, [sp, #8]
   17390:	str	r4, [sp, #16]
   17394:	str	r5, [sp, #24]
   17398:	b	173ac <__assert_fail@plt+0x647c>
   1739c:	mov	r8, fp
   173a0:	mov	r9, r2
   173a4:	subs	ip, ip, #1
   173a8:	beq	17480 <__assert_fail@plt+0x6550>
   173ac:	cmp	r9, r8, asr #31
   173b0:	mov	r1, #0
   173b4:	bne	174b8 <__assert_fail@plt+0x6588>
   173b8:	smull	r2, r3, r8, r0
   173bc:	mov	fp, r2
   173c0:	mov	r2, r3
   173c4:	cmp	r1, #0
   173c8:	beq	1739c <__assert_fail@plt+0x646c>
   173cc:	cmp	r8, #0
   173d0:	mov	lr, #1
   173d4:	sbcs	r3, r9, #0
   173d8:	mvnge	r8, #0
   173dc:	mvnge	r9, #-2147483648	; 0x80000000
   173e0:	movlt	r8, #0
   173e4:	movlt	r9, #-2147483648	; 0x80000000
   173e8:	b	173a4 <__assert_fail@plt+0x6474>
   173ec:	str	r3, [sp, #4]
   173f0:	b	17004 <__assert_fail@plt+0x60d4>
   173f4:	mov	r3, #1
   173f8:	mov	fp, #1024	; 0x400
   173fc:	str	r3, [sp, #4]
   17400:	b	17198 <__assert_fail@plt+0x6268>
   17404:	mov	r3, #1
   17408:	mov	fp, #1024	; 0x400
   1740c:	str	r3, [sp, #4]
   17410:	b	17210 <__assert_fail@plt+0x62e0>
   17414:	mov	r3, #1
   17418:	str	r3, [sp, #4]
   1741c:	b	17004 <__assert_fail@plt+0x60d4>
   17420:	mov	r3, #1
   17424:	mov	fp, #1024	; 0x400
   17428:	str	r3, [sp, #4]
   1742c:	b	17288 <__assert_fail@plt+0x6358>
   17430:	mov	r3, #1
   17434:	mov	fp, #1024	; 0x400
   17438:	str	r3, [sp, #4]
   1743c:	b	17300 <__assert_fail@plt+0x63d0>
   17440:	mov	r3, #1
   17444:	mov	fp, #1024	; 0x400
   17448:	str	r3, [sp, #4]
   1744c:	b	17088 <__assert_fail@plt+0x6158>
   17450:	mov	r3, #1
   17454:	mov	fp, #1024	; 0x400
   17458:	str	r3, [sp, #4]
   1745c:	b	17378 <__assert_fail@plt+0x6448>
   17460:	mov	r3, #1
   17464:	mov	fp, #1024	; 0x400
   17468:	str	r3, [sp, #4]
   1746c:	b	17100 <__assert_fail@plt+0x61d0>
   17470:	mov	r3, #1
   17474:	mov	fp, #1024	; 0x400
   17478:	str	r3, [sp, #4]
   1747c:	b	1715c <__assert_fail@plt+0x622c>
   17480:	ldr	r4, [sp, #16]
   17484:	ldr	r5, [sp, #24]
   17488:	orr	r4, r4, lr
   1748c:	b	17004 <__assert_fail@plt+0x60d4>
   17490:	cmp	r0, #0
   17494:	mov	r4, #1
   17498:	sbcs	r3, r1, #0
   1749c:	bge	17078 <__assert_fail@plt+0x6148>
   174a0:	mov	r8, #0
   174a4:	mov	r9, #-2147483648	; 0x80000000
   174a8:	b	17004 <__assert_fail@plt+0x60d4>
   174ac:	mov	r3, #2
   174b0:	mov	fp, #1000	; 0x3e8
   174b4:	b	16eec <__assert_fail@plt+0x5fbc>
   174b8:	cmp	r9, #0
   174bc:	umull	r4, r5, r8, r0
   174c0:	umull	sl, fp, r0, r9
   174c4:	bge	174d4 <__assert_fail@plt+0x65a4>
   174c8:	mov	r3, #0
   174cc:	subs	sl, sl, r3
   174d0:	sbc	fp, fp, r0
   174d4:	adds	r2, sl, r5
   174d8:	mov	r3, #0
   174dc:	adc	r3, fp, r3
   174e0:	cmp	r3, r2, asr #31
   174e4:	bne	17874 <__assert_fail@plt+0x6944>
   174e8:	mov	fp, r4
   174ec:	b	173c4 <__assert_fail@plt+0x6494>
   174f0:	cmp	r9, #0
   174f4:	umull	r4, r5, r8, r0
   174f8:	umull	sl, fp, r0, r9
   174fc:	bge	1750c <__assert_fail@plt+0x65dc>
   17500:	mov	r3, #0
   17504:	subs	sl, sl, r3
   17508:	sbc	fp, fp, r0
   1750c:	adds	r2, sl, r5
   17510:	mov	r3, #0
   17514:	adc	r3, fp, r3
   17518:	cmp	r3, r2, asr #31
   1751c:	bne	17894 <__assert_fail@plt+0x6964>
   17520:	mov	fp, r4
   17524:	b	171e4 <__assert_fail@plt+0x62b4>
   17528:	umull	r0, r1, fp, r9
   1752c:	cmp	r9, #0
   17530:	umull	r2, r3, r8, fp
   17534:	strd	r0, [sp, #16]
   17538:	bge	17550 <__assert_fail@plt+0x6620>
   1753c:	subs	r1, r0, ip
   17540:	str	r1, [sp, #16]
   17544:	ldr	r1, [sp, #20]
   17548:	sbc	r1, r1, fp
   1754c:	str	r1, [sp, #20]
   17550:	mov	r1, r3
   17554:	ldr	r3, [sp, #16]
   17558:	mov	r0, r2
   1755c:	mov	lr, #0
   17560:	adds	r2, r3, r1
   17564:	ldr	r3, [sp, #20]
   17568:	adc	lr, r3, lr
   1756c:	cmp	lr, r2, asr #31
   17570:	bne	178f4 <__assert_fail@plt+0x69c4>
   17574:	mov	r1, r0
   17578:	b	17180 <__assert_fail@plt+0x6250>
   1757c:	cmp	r9, #0
   17580:	umull	r4, r5, r8, r0
   17584:	umull	sl, fp, r0, r9
   17588:	bge	17598 <__assert_fail@plt+0x6668>
   1758c:	mov	r3, #0
   17590:	subs	sl, sl, r3
   17594:	sbc	fp, fp, r0
   17598:	adds	r2, sl, r5
   1759c:	mov	r3, #0
   175a0:	adc	r3, fp, r3
   175a4:	cmp	r3, r2, asr #31
   175a8:	bne	17834 <__assert_fail@plt+0x6904>
   175ac:	mov	fp, r4
   175b0:	b	1734c <__assert_fail@plt+0x641c>
   175b4:	cmp	r9, #0
   175b8:	umull	r4, r5, r8, r0
   175bc:	umull	sl, fp, r0, r9
   175c0:	bge	175d0 <__assert_fail@plt+0x66a0>
   175c4:	mov	r3, #0
   175c8:	subs	sl, sl, r3
   175cc:	sbc	fp, fp, r0
   175d0:	adds	r2, sl, r5
   175d4:	mov	r3, #0
   175d8:	adc	r3, fp, r3
   175dc:	cmp	r3, r2, asr #31
   175e0:	bne	178b4 <__assert_fail@plt+0x6984>
   175e4:	mov	fp, r4
   175e8:	b	170d4 <__assert_fail@plt+0x61a4>
   175ec:	cmp	r9, #0
   175f0:	umull	r4, r5, r8, r0
   175f4:	umull	sl, fp, r0, r9
   175f8:	bge	17608 <__assert_fail@plt+0x66d8>
   175fc:	mov	r3, #0
   17600:	subs	sl, sl, r3
   17604:	sbc	fp, fp, r0
   17608:	adds	r2, sl, r5
   1760c:	mov	r3, #0
   17610:	adc	r3, fp, r3
   17614:	cmp	r3, r2, asr #31
   17618:	bne	178d4 <__assert_fail@plt+0x69a4>
   1761c:	mov	fp, r4
   17620:	b	172d4 <__assert_fail@plt+0x63a4>
   17624:	cmp	r9, #0
   17628:	umull	r4, r5, r8, r0
   1762c:	umull	sl, fp, r0, r9
   17630:	bge	17640 <__assert_fail@plt+0x6710>
   17634:	mov	r3, #0
   17638:	subs	sl, sl, r3
   1763c:	sbc	fp, fp, r0
   17640:	adds	r2, sl, r5
   17644:	mov	r3, #0
   17648:	adc	r3, fp, r3
   1764c:	cmp	r3, r2, asr #31
   17650:	bne	17854 <__assert_fail@plt+0x6924>
   17654:	mov	fp, r4
   17658:	b	1725c <__assert_fail@plt+0x632c>
   1765c:	ldrb	r3, [r6, #2]
   17660:	mov	fp, #1024	; 0x400
   17664:	cmp	r3, #66	; 0x42
   17668:	movne	r3, #1
   1766c:	moveq	r3, #3
   17670:	b	16eec <__assert_fail@plt+0x5fbc>
   17674:	mov	lr, #512	; 0x200
   17678:	cmp	r9, #0
   1767c:	lsr	r3, r8, #23
   17680:	lsl	r2, r8, #9
   17684:	umull	r0, r1, lr, r9
   17688:	bge	17694 <__assert_fail@plt+0x6764>
   1768c:	subs	r0, r0, ip
   17690:	sbc	r1, r1, lr
   17694:	adds	r3, r0, r3
   17698:	mov	lr, #0
   1769c:	adc	r1, r1, lr
   176a0:	cmp	r1, r3, asr #31
   176a4:	beq	16ff4 <__assert_fail@plt+0x60c4>
   176a8:	lsl	r3, r9, #9
   176ac:	mov	ip, #1
   176b0:	lsl	r2, r8, #9
   176b4:	orr	r3, r3, r8, lsr #23
   176b8:	b	16ff4 <__assert_fail@plt+0x60c4>
   176bc:	mov	lr, #1024	; 0x400
   176c0:	cmp	r9, #0
   176c4:	lsr	r3, r8, #22
   176c8:	lsl	r2, r8, #10
   176cc:	umull	r0, r1, lr, r9
   176d0:	bge	176dc <__assert_fail@plt+0x67ac>
   176d4:	subs	r0, r0, ip
   176d8:	sbc	r1, r1, lr
   176dc:	adds	r3, r0, r3
   176e0:	mov	lr, #0
   176e4:	adc	r1, r1, lr
   176e8:	cmp	r1, r3, asr #31
   176ec:	lslne	r3, r9, #10
   176f0:	movne	ip, #1
   176f4:	lslne	r2, r8, #10
   176f8:	orrne	r3, r3, r8, lsr #22
   176fc:	b	16ff4 <__assert_fail@plt+0x60c4>
   17700:	umull	r2, r3, r8, fp
   17704:	cmp	r9, #0
   17708:	strd	r2, [sp, #16]
   1770c:	umull	r2, r3, fp, r9
   17710:	bge	1771c <__assert_fail@plt+0x67ec>
   17714:	subs	r2, r2, r1
   17718:	sbc	r3, r3, fp
   1771c:	ldr	r0, [sp, #20]
   17720:	mov	ip, #0
   17724:	adds	r0, r2, r0
   17728:	adc	ip, r3, ip
   1772c:	cmp	ip, r0, asr #31
   17730:	bne	17914 <__assert_fail@plt+0x69e4>
   17734:	mov	r3, r0
   17738:	ldr	lr, [sp, #16]
   1773c:	b	17120 <__assert_fail@plt+0x61f0>
   17740:	mov	lr, #2
   17744:	mov	r3, #0
   17748:	adds	ip, r8, r8
   1774c:	adc	r0, r3, r3
   17750:	umull	r2, r3, lr, r9
   17754:	cmp	r9, #0
   17758:	strd	r2, [sp, #8]
   1775c:	bge	17774 <__assert_fail@plt+0x6844>
   17760:	subs	r3, r2, r1
   17764:	str	r3, [sp, #8]
   17768:	ldr	r3, [sp, #12]
   1776c:	sbc	r3, r3, lr
   17770:	str	r3, [sp, #12]
   17774:	ldrd	sl, [sp, #8]
   17778:	mov	lr, #0
   1777c:	adds	r2, sl, r0
   17780:	adc	r3, fp, lr
   17784:	cmp	r3, r2, asr #31
   17788:	bne	17824 <__assert_fail@plt+0x68f4>
   1778c:	mov	r3, r2
   17790:	b	17058 <__assert_fail@plt+0x6128>
   17794:	cmp	r3, #0
   17798:	umull	r8, r9, lr, fp
   1779c:	umull	r2, r3, fp, r3
   177a0:	strd	r2, [sp, #16]
   177a4:	strd	r8, [sp, #24]
   177a8:	bge	177c0 <__assert_fail@plt+0x6890>
   177ac:	subs	r3, r2, ip
   177b0:	str	r3, [sp, #16]
   177b4:	ldr	r3, [sp, #20]
   177b8:	sbc	r3, r3, fp
   177bc:	str	r3, [sp, #20]
   177c0:	ldr	r3, [sp, #16]
   177c4:	mov	lr, #0
   177c8:	ldrd	sl, [sp, #24]
   177cc:	adds	r2, r3, fp
   177d0:	ldr	r3, [sp, #20]
   177d4:	adc	lr, r3, lr
   177d8:	cmp	lr, r2, asr #31
   177dc:	beq	17144 <__assert_fail@plt+0x6214>
   177e0:	ldrd	r8, [sp, #8]
   177e4:	mov	ip, #1
   177e8:	mul	lr, r0, r9
   177ec:	umull	r2, r3, r0, r8
   177f0:	mla	lr, r8, r1, lr
   177f4:	mov	sl, r2
   177f8:	add	r3, lr, r3
   177fc:	mov	r2, r3
   17800:	b	17144 <__assert_fail@plt+0x6214>
   17804:	movw	r3, #37348	; 0x91e4
   17808:	movt	r3, #1
   1780c:	movw	r1, #37360	; 0x91f0
   17810:	movt	r1, #1
   17814:	movw	r0, #37376	; 0x9200
   17818:	movt	r0, #1
   1781c:	mov	r2, #85	; 0x55
   17820:	bl	10f30 <__assert_fail@plt>
   17824:	adds	ip, r8, r8
   17828:	mov	r1, #1
   1782c:	adc	r3, r9, r9
   17830:	b	17058 <__assert_fail@plt+0x6128>
   17834:	ldrd	r4, [sp, #8]
   17838:	mov	r1, #1
   1783c:	mul	sl, r8, r5
   17840:	umull	r2, r3, r8, r4
   17844:	mla	sl, r4, r9, sl
   17848:	mov	fp, r2
   1784c:	add	r2, sl, r3
   17850:	b	1734c <__assert_fail@plt+0x641c>
   17854:	ldrd	r4, [sp, #8]
   17858:	mov	r1, #1
   1785c:	mul	sl, r8, r5
   17860:	umull	r2, r3, r8, r4
   17864:	mla	sl, r4, r9, sl
   17868:	mov	fp, r2
   1786c:	add	r2, sl, r3
   17870:	b	1725c <__assert_fail@plt+0x632c>
   17874:	ldrd	r4, [sp, #8]
   17878:	mov	r1, #1
   1787c:	mul	sl, r8, r5
   17880:	umull	r2, r3, r8, r4
   17884:	mla	sl, r4, r9, sl
   17888:	mov	fp, r2
   1788c:	add	r2, sl, r3
   17890:	b	173c4 <__assert_fail@plt+0x6494>
   17894:	ldrd	r4, [sp, #8]
   17898:	mov	r1, #1
   1789c:	mul	sl, r8, r5
   178a0:	umull	r2, r3, r8, r4
   178a4:	mla	sl, r4, r9, sl
   178a8:	mov	fp, r2
   178ac:	add	r2, sl, r3
   178b0:	b	171e4 <__assert_fail@plt+0x62b4>
   178b4:	ldrd	r4, [sp, #8]
   178b8:	mov	r1, #1
   178bc:	mul	sl, r8, r5
   178c0:	umull	r2, r3, r8, r4
   178c4:	mla	sl, r4, r9, sl
   178c8:	mov	fp, r2
   178cc:	add	r2, sl, r3
   178d0:	b	170d4 <__assert_fail@plt+0x61a4>
   178d4:	ldrd	r4, [sp, #8]
   178d8:	mov	r1, #1
   178dc:	mul	sl, r8, r5
   178e0:	umull	r2, r3, r8, r4
   178e4:	mla	sl, r4, r9, sl
   178e8:	mov	fp, r2
   178ec:	add	r2, sl, r3
   178f0:	b	172d4 <__assert_fail@plt+0x63a4>
   178f4:	ldrd	sl, [sp, #8]
   178f8:	mov	ip, #1
   178fc:	mul	r1, r8, fp
   17900:	umull	r2, r3, r8, sl
   17904:	mla	r0, sl, r9, r1
   17908:	mov	r1, r2
   1790c:	add	r2, r0, r3
   17910:	b	17180 <__assert_fail@plt+0x6250>
   17914:	ldrd	r2, [sp, #8]
   17918:	mov	r1, #1
   1791c:	ldr	ip, [sp, #8]
   17920:	mul	r0, r8, r3
   17924:	umull	r2, r3, r8, r2
   17928:	mla	r0, ip, r9, r0
   1792c:	mov	lr, r2
   17930:	add	r3, r0, r3
   17934:	b	17120 <__assert_fail@plt+0x61f0>
   17938:	cmp	r1, #0
   1793c:	cmpne	r0, #0
   17940:	beq	1798c <__assert_fail@plt+0x6a5c>
   17944:	strd	r4, [sp, #-16]!
   17948:	umull	r4, r5, r0, r1
   1794c:	str	r6, [sp, #8]
   17950:	str	lr, [sp, #12]
   17954:	adds	r3, r5, #0
   17958:	movne	r3, #1
   1795c:	cmp	r4, #0
   17960:	blt	1796c <__assert_fail@plt+0x6a3c>
   17964:	cmp	r3, #0
   17968:	beq	17998 <__assert_fail@plt+0x6a68>
   1796c:	bl	10e4c <__errno_location@plt>
   17970:	mov	r3, #12
   17974:	ldrd	r4, [sp]
   17978:	ldr	r6, [sp, #8]
   1797c:	add	sp, sp, #12
   17980:	str	r3, [r0]
   17984:	mov	r0, #0
   17988:	pop	{pc}		; (ldr pc, [sp], #4)
   1798c:	mov	r1, #1
   17990:	mov	r0, r1
   17994:	b	10cc0 <calloc@plt>
   17998:	ldrd	r4, [sp]
   1799c:	ldr	r6, [sp, #8]
   179a0:	ldr	lr, [sp, #12]
   179a4:	add	sp, sp, #16
   179a8:	b	10cc0 <calloc@plt>
   179ac:	cmp	r0, #0
   179b0:	beq	179bc <__assert_fail@plt+0x6a8c>
   179b4:	blt	179c4 <__assert_fail@plt+0x6a94>
   179b8:	b	10de0 <malloc@plt>
   179bc:	mov	r0, #1
   179c0:	b	10de0 <malloc@plt>
   179c4:	str	r4, [sp, #-8]!
   179c8:	str	lr, [sp, #4]
   179cc:	bl	10e4c <__errno_location@plt>
   179d0:	mov	r3, #12
   179d4:	ldr	r4, [sp]
   179d8:	add	sp, sp, #4
   179dc:	str	r3, [r0]
   179e0:	mov	r0, #0
   179e4:	pop	{pc}		; (ldr pc, [sp], #4)
   179e8:	cmp	r0, #0
   179ec:	beq	17a14 <__assert_fail@plt+0x6ae4>
   179f0:	cmp	r1, #0
   179f4:	str	r4, [sp, #-8]!
   179f8:	str	lr, [sp, #4]
   179fc:	beq	17a1c <__assert_fail@plt+0x6aec>
   17a00:	blt	17a30 <__assert_fail@plt+0x6b00>
   17a04:	ldr	r4, [sp]
   17a08:	ldr	lr, [sp, #4]
   17a0c:	add	sp, sp, #8
   17a10:	b	10d74 <realloc@plt>
   17a14:	mov	r0, r1
   17a18:	b	179ac <__assert_fail@plt+0x6a7c>
   17a1c:	bl	13d74 <__assert_fail@plt+0x2e44>
   17a20:	ldr	r4, [sp]
   17a24:	add	sp, sp, #4
   17a28:	mov	r0, #0
   17a2c:	pop	{pc}		; (ldr pc, [sp], #4)
   17a30:	bl	10e4c <__errno_location@plt>
   17a34:	mov	r3, #12
   17a38:	str	r3, [r0]
   17a3c:	b	17a20 <__assert_fail@plt+0x6af0>
   17a40:	strd	r4, [sp, #-16]!
   17a44:	mov	r4, r0
   17a48:	str	r6, [sp, #8]
   17a4c:	str	lr, [sp, #12]
   17a50:	bl	10dbc <__fpending@plt>
   17a54:	ldr	r5, [r4]
   17a58:	mov	r6, r0
   17a5c:	mov	r0, r4
   17a60:	bl	13c60 <__assert_fail@plt+0x2d30>
   17a64:	mov	r4, r0
   17a68:	and	r5, r5, #32
   17a6c:	cmp	r5, #0
   17a70:	bne	17aa8 <__assert_fail@plt+0x6b78>
   17a74:	cmp	r0, #0
   17a78:	beq	17a94 <__assert_fail@plt+0x6b64>
   17a7c:	cmp	r6, #0
   17a80:	bne	17ac0 <__assert_fail@plt+0x6b90>
   17a84:	bl	10e4c <__errno_location@plt>
   17a88:	ldr	r4, [r0]
   17a8c:	subs	r4, r4, #9
   17a90:	mvnne	r4, #0
   17a94:	mov	r0, r4
   17a98:	ldrd	r4, [sp]
   17a9c:	ldr	r6, [sp, #8]
   17aa0:	add	sp, sp, #12
   17aa4:	pop	{pc}		; (ldr pc, [sp], #4)
   17aa8:	cmp	r0, #0
   17aac:	bne	17ac0 <__assert_fail@plt+0x6b90>
   17ab0:	bl	10e4c <__errno_location@plt>
   17ab4:	str	r4, [r0]
   17ab8:	mvn	r4, #0
   17abc:	b	17a94 <__assert_fail@plt+0x6b64>
   17ac0:	mvn	r4, #0
   17ac4:	b	17a94 <__assert_fail@plt+0x6b64>
   17ac8:	mov	r0, #14
   17acc:	str	r4, [sp, #-8]!
   17ad0:	str	lr, [sp, #4]
   17ad4:	bl	10edc <nl_langinfo@plt>
   17ad8:	cmp	r0, #0
   17adc:	beq	17b00 <__assert_fail@plt+0x6bd0>
   17ae0:	ldrb	r2, [r0]
   17ae4:	movw	r3, #37416	; 0x9228
   17ae8:	movt	r3, #1
   17aec:	ldr	r4, [sp]
   17af0:	add	sp, sp, #4
   17af4:	cmp	r2, #0
   17af8:	moveq	r0, r3
   17afc:	pop	{pc}		; (ldr pc, [sp], #4)
   17b00:	ldr	r4, [sp]
   17b04:	add	sp, sp, #4
   17b08:	movw	r0, #37416	; 0x9228
   17b0c:	movt	r0, #1
   17b10:	pop	{pc}		; (ldr pc, [sp], #4)
   17b14:	strd	r4, [sp, #-20]!	; 0xffffffec
   17b18:	mov	r5, r2
   17b1c:	strd	r6, [sp, #8]
   17b20:	subs	r6, r0, #0
   17b24:	mov	r7, r1
   17b28:	str	lr, [sp, #16]
   17b2c:	sub	sp, sp, #12
   17b30:	addeq	r6, sp, #4
   17b34:	mov	r0, r6
   17b38:	bl	10dc8 <mbrtowc@plt>
   17b3c:	cmp	r5, #0
   17b40:	cmnne	r0, #3
   17b44:	mov	r4, r0
   17b48:	bhi	17b64 <__assert_fail@plt+0x6c34>
   17b4c:	mov	r0, r4
   17b50:	add	sp, sp, #12
   17b54:	ldrd	r4, [sp]
   17b58:	ldrd	r6, [sp, #8]
   17b5c:	add	sp, sp, #16
   17b60:	pop	{pc}		; (ldr pc, [sp], #4)
   17b64:	mov	r0, #0
   17b68:	bl	17bbc <__assert_fail@plt+0x6c8c>
   17b6c:	cmp	r0, #0
   17b70:	bne	17b4c <__assert_fail@plt+0x6c1c>
   17b74:	ldrb	r3, [r7]
   17b78:	mov	r4, #1
   17b7c:	str	r3, [r6]
   17b80:	b	17b4c <__assert_fail@plt+0x6c1c>
   17b84:	umull	r2, r3, r1, r2
   17b88:	cmp	r3, #0
   17b8c:	bne	17b98 <__assert_fail@plt+0x6c68>
   17b90:	mov	r1, r2
   17b94:	b	179e8 <__assert_fail@plt+0x6ab8>
   17b98:	str	r4, [sp, #-8]!
   17b9c:	str	lr, [sp, #4]
   17ba0:	bl	10e4c <__errno_location@plt>
   17ba4:	mov	r3, #12
   17ba8:	ldr	r4, [sp]
   17bac:	add	sp, sp, #4
   17bb0:	str	r3, [r0]
   17bb4:	mov	r0, #0
   17bb8:	pop	{pc}		; (ldr pc, [sp], #4)
   17bbc:	push	{lr}		; (str lr, [sp, #-4]!)
   17bc0:	sub	sp, sp, #268	; 0x10c
   17bc4:	movw	r2, #257	; 0x101
   17bc8:	add	r1, sp, #4
   17bcc:	bl	17c14 <__assert_fail@plt+0x6ce4>
   17bd0:	cmp	r0, #0
   17bd4:	movne	r0, #0
   17bd8:	bne	17c0c <__assert_fail@plt+0x6cdc>
   17bdc:	movw	r1, #37424	; 0x9230
   17be0:	movt	r1, #1
   17be4:	add	r0, sp, #4
   17be8:	bl	10ce4 <strcmp@plt>
   17bec:	cmp	r0, #0
   17bf0:	beq	17c0c <__assert_fail@plt+0x6cdc>
   17bf4:	add	r0, sp, #4
   17bf8:	movw	r1, #37428	; 0x9234
   17bfc:	movt	r1, #1
   17c00:	bl	10ce4 <strcmp@plt>
   17c04:	adds	r0, r0, #0
   17c08:	movne	r0, #1
   17c0c:	add	sp, sp, #268	; 0x10c
   17c10:	pop	{pc}		; (ldr pc, [sp], #4)
   17c14:	strd	r4, [sp, #-16]!
   17c18:	mov	r5, r1
   17c1c:	mov	r1, #0
   17c20:	mov	r4, r2
   17c24:	str	r6, [sp, #8]
   17c28:	str	lr, [sp, #12]
   17c2c:	bl	10ec4 <setlocale@plt>
   17c30:	subs	r6, r0, #0
   17c34:	beq	17cb4 <__assert_fail@plt+0x6d84>
   17c38:	bl	10e34 <strlen@plt>
   17c3c:	cmp	r4, r0
   17c40:	bhi	17c60 <__assert_fail@plt+0x6d30>
   17c44:	cmp	r4, #0
   17c48:	moveq	r0, #34	; 0x22
   17c4c:	bne	17c84 <__assert_fail@plt+0x6d54>
   17c50:	ldrd	r4, [sp]
   17c54:	ldr	r6, [sp, #8]
   17c58:	add	sp, sp, #12
   17c5c:	pop	{pc}		; (ldr pc, [sp], #4)
   17c60:	add	r2, r0, #1
   17c64:	mov	r1, r6
   17c68:	mov	r0, r5
   17c6c:	bl	10d2c <memcpy@plt>
   17c70:	ldrd	r4, [sp]
   17c74:	mov	r0, #0
   17c78:	ldr	r6, [sp, #8]
   17c7c:	add	sp, sp, #12
   17c80:	pop	{pc}		; (ldr pc, [sp], #4)
   17c84:	sub	r4, r4, #1
   17c88:	mov	r1, r6
   17c8c:	mov	r2, r4
   17c90:	mov	r0, r5
   17c94:	bl	10d2c <memcpy@plt>
   17c98:	mov	r3, #0
   17c9c:	mov	r0, #34	; 0x22
   17ca0:	strb	r3, [r5, r4]
   17ca4:	ldrd	r4, [sp]
   17ca8:	ldr	r6, [sp, #8]
   17cac:	add	sp, sp, #12
   17cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   17cb4:	cmp	r4, #0
   17cb8:	mov	r0, #22
   17cbc:	strbne	r6, [r5]
   17cc0:	ldrd	r4, [sp]
   17cc4:	ldr	r6, [sp, #8]
   17cc8:	add	sp, sp, #12
   17ccc:	pop	{pc}		; (ldr pc, [sp], #4)
   17cd0:	mov	r1, #0
   17cd4:	b	10ec4 <setlocale@plt>
   17cd8:	cmp	r3, #0
   17cdc:	cmpeq	r2, #0
   17ce0:	bne	17d04 <__assert_fail@plt+0x6dd4>
   17ce4:	cmp	r1, #0
   17ce8:	movlt	r1, #-2147483648	; 0x80000000
   17cec:	movlt	r0, #0
   17cf0:	blt	17d00 <__assert_fail@plt+0x6dd0>
   17cf4:	cmpeq	r0, #0
   17cf8:	mvnne	r1, #-2147483648	; 0x80000000
   17cfc:	mvnne	r0, #0
   17d00:	b	17de8 <__assert_fail@plt+0x6eb8>
   17d04:	sub	sp, sp, #8
   17d08:	push	{sp, lr}
   17d0c:	cmp	r1, #0
   17d10:	blt	17d30 <__assert_fail@plt+0x6e00>
   17d14:	cmp	r3, #0
   17d18:	blt	17d64 <__assert_fail@plt+0x6e34>
   17d1c:	bl	17df8 <__assert_fail@plt+0x6ec8>
   17d20:	ldr	lr, [sp, #4]
   17d24:	add	sp, sp, #8
   17d28:	pop	{r2, r3}
   17d2c:	bx	lr
   17d30:	rsbs	r0, r0, #0
   17d34:	sbc	r1, r1, r1, lsl #1
   17d38:	cmp	r3, #0
   17d3c:	blt	17d88 <__assert_fail@plt+0x6e58>
   17d40:	bl	17df8 <__assert_fail@plt+0x6ec8>
   17d44:	ldr	lr, [sp, #4]
   17d48:	add	sp, sp, #8
   17d4c:	pop	{r2, r3}
   17d50:	rsbs	r0, r0, #0
   17d54:	sbc	r1, r1, r1, lsl #1
   17d58:	rsbs	r2, r2, #0
   17d5c:	sbc	r3, r3, r3, lsl #1
   17d60:	bx	lr
   17d64:	rsbs	r2, r2, #0
   17d68:	sbc	r3, r3, r3, lsl #1
   17d6c:	bl	17df8 <__assert_fail@plt+0x6ec8>
   17d70:	ldr	lr, [sp, #4]
   17d74:	add	sp, sp, #8
   17d78:	pop	{r2, r3}
   17d7c:	rsbs	r0, r0, #0
   17d80:	sbc	r1, r1, r1, lsl #1
   17d84:	bx	lr
   17d88:	rsbs	r2, r2, #0
   17d8c:	sbc	r3, r3, r3, lsl #1
   17d90:	bl	17df8 <__assert_fail@plt+0x6ec8>
   17d94:	ldr	lr, [sp, #4]
   17d98:	add	sp, sp, #8
   17d9c:	pop	{r2, r3}
   17da0:	rsbs	r2, r2, #0
   17da4:	sbc	r3, r3, r3, lsl #1
   17da8:	bx	lr
   17dac:	cmp	r3, #0
   17db0:	cmpeq	r2, #0
   17db4:	bne	17dcc <__assert_fail@plt+0x6e9c>
   17db8:	cmp	r1, #0
   17dbc:	cmpeq	r0, #0
   17dc0:	mvnne	r1, #0
   17dc4:	mvnne	r0, #0
   17dc8:	b	17de8 <__assert_fail@plt+0x6eb8>
   17dcc:	sub	sp, sp, #8
   17dd0:	push	{sp, lr}
   17dd4:	bl	17df8 <__assert_fail@plt+0x6ec8>
   17dd8:	ldr	lr, [sp, #4]
   17ddc:	add	sp, sp, #8
   17de0:	pop	{r2, r3}
   17de4:	bx	lr
   17de8:	push	{r1, lr}
   17dec:	mov	r0, #8
   17df0:	bl	10cd8 <raise@plt>
   17df4:	pop	{r1, pc}
   17df8:	cmp	r1, r3
   17dfc:	cmpeq	r0, r2
   17e00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e04:	mov	r4, r0
   17e08:	movcc	r0, #0
   17e0c:	mov	r5, r1
   17e10:	ldr	lr, [sp, #36]	; 0x24
   17e14:	movcc	r1, r0
   17e18:	bcc	17f14 <__assert_fail@plt+0x6fe4>
   17e1c:	cmp	r3, #0
   17e20:	clzeq	ip, r2
   17e24:	clzne	ip, r3
   17e28:	addeq	ip, ip, #32
   17e2c:	cmp	r5, #0
   17e30:	clzeq	r1, r4
   17e34:	addeq	r1, r1, #32
   17e38:	clzne	r1, r5
   17e3c:	sub	ip, ip, r1
   17e40:	sub	sl, ip, #32
   17e44:	lsl	r9, r3, ip
   17e48:	rsb	fp, ip, #32
   17e4c:	orr	r9, r9, r2, lsl sl
   17e50:	orr	r9, r9, r2, lsr fp
   17e54:	lsl	r8, r2, ip
   17e58:	cmp	r5, r9
   17e5c:	cmpeq	r4, r8
   17e60:	movcc	r0, #0
   17e64:	movcc	r1, r0
   17e68:	bcc	17e84 <__assert_fail@plt+0x6f54>
   17e6c:	mov	r0, #1
   17e70:	subs	r4, r4, r8
   17e74:	lsl	r1, r0, sl
   17e78:	orr	r1, r1, r0, lsr fp
   17e7c:	lsl	r0, r0, ip
   17e80:	sbc	r5, r5, r9
   17e84:	cmp	ip, #0
   17e88:	beq	17f14 <__assert_fail@plt+0x6fe4>
   17e8c:	lsr	r6, r8, #1
   17e90:	orr	r6, r6, r9, lsl #31
   17e94:	lsr	r7, r9, #1
   17e98:	mov	r2, ip
   17e9c:	b	17ec0 <__assert_fail@plt+0x6f90>
   17ea0:	subs	r3, r4, r6
   17ea4:	sbc	r8, r5, r7
   17ea8:	adds	r3, r3, r3
   17eac:	adc	r8, r8, r8
   17eb0:	adds	r4, r3, #1
   17eb4:	adc	r5, r8, #0
   17eb8:	subs	r2, r2, #1
   17ebc:	beq	17edc <__assert_fail@plt+0x6fac>
   17ec0:	cmp	r5, r7
   17ec4:	cmpeq	r4, r6
   17ec8:	bcs	17ea0 <__assert_fail@plt+0x6f70>
   17ecc:	adds	r4, r4, r4
   17ed0:	adc	r5, r5, r5
   17ed4:	subs	r2, r2, #1
   17ed8:	bne	17ec0 <__assert_fail@plt+0x6f90>
   17edc:	lsr	r3, r4, ip
   17ee0:	orr	r3, r3, r5, lsl fp
   17ee4:	lsr	r2, r5, ip
   17ee8:	orr	r3, r3, r5, lsr sl
   17eec:	adds	r0, r0, r4
   17ef0:	mov	r4, r3
   17ef4:	lsl	r3, r2, ip
   17ef8:	orr	r3, r3, r4, lsl sl
   17efc:	lsl	ip, r4, ip
   17f00:	orr	r3, r3, r4, lsr fp
   17f04:	adc	r1, r1, r5
   17f08:	subs	r0, r0, ip
   17f0c:	mov	r5, r2
   17f10:	sbc	r1, r1, r3
   17f14:	cmp	lr, #0
   17f18:	strdne	r4, [lr]
   17f1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17f24:	mov	r7, r0
   17f28:	ldr	r6, [pc, #72]	; 17f78 <__assert_fail@plt+0x7048>
   17f2c:	ldr	r5, [pc, #72]	; 17f7c <__assert_fail@plt+0x704c>
   17f30:	add	r6, pc, r6
   17f34:	add	r5, pc, r5
   17f38:	sub	r6, r6, r5
   17f3c:	mov	r8, r1
   17f40:	mov	r9, r2
   17f44:	bl	10ca0 <calloc@plt-0x20>
   17f48:	asrs	r6, r6, #2
   17f4c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17f50:	mov	r4, #0
   17f54:	add	r4, r4, #1
   17f58:	ldr	r3, [r5], #4
   17f5c:	mov	r2, r9
   17f60:	mov	r1, r8
   17f64:	mov	r0, r7
   17f68:	blx	r3
   17f6c:	cmp	r6, r4
   17f70:	bne	17f54 <__assert_fail@plt+0x7024>
   17f74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17f78:	ldrdeq	r1, [r1], -ip
   17f7c:	ldrdeq	r1, [r1], -r4
   17f80:	bx	lr
   17f84:	ldr	r3, [pc, #12]	; 17f98 <__assert_fail@plt+0x7068>
   17f88:	mov	r1, #0
   17f8c:	add	r3, pc, r3
   17f90:	ldr	r2, [r3]
   17f94:	b	10e58 <__cxa_atexit@plt>
   17f98:	andeq	r2, r1, r4, asr r1

Disassembly of section .fini:

00017f9c <.fini>:
   17f9c:	push	{r3, lr}
   17fa0:	pop	{r3, pc}
