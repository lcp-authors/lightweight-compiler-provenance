
../repos/inetutils/tests/ls:     file format elf32-littlearm


Disassembly of section .init:

00010b58 <.init>:
   10b58:	push	{r3, lr}
   10b5c:	bl	10e40 <__assert_fail@plt+0x4c>
   10b60:	pop	{r3, pc}

Disassembly of section .plt:

00010b64 <fstatfs64@plt-0x14>:
   10b64:	push	{lr}		; (str lr, [sp, #-4]!)
   10b68:	ldr	lr, [pc, #4]	; 10b74 <fstatfs64@plt-0x4>
   10b6c:	add	lr, pc, lr
   10b70:	ldr	pc, [lr, #8]!
   10b74:	andeq	sl, r1, ip, lsl #9

00010b78 <fstatfs64@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #106496	; 0x1a000
   10b80:	ldr	pc, [ip, #1164]!	; 0x48c

00010b84 <calloc@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #106496	; 0x1a000
   10b8c:	ldr	pc, [ip, #1156]!	; 0x484

00010b90 <raise@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #106496	; 0x1a000
   10b98:	ldr	pc, [ip, #1148]!	; 0x47c

00010b9c <strcmp@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #106496	; 0x1a000
   10ba4:	ldr	pc, [ip, #1140]!	; 0x474

00010ba8 <strtol@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #106496	; 0x1a000
   10bb0:	ldr	pc, [ip, #1132]!	; 0x46c

00010bb4 <getpwuid@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #106496	; 0x1a000
   10bbc:	ldr	pc, [ip, #1124]!	; 0x464

00010bc0 <printf@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #106496	; 0x1a000
   10bc8:	ldr	pc, [ip, #1116]!	; 0x45c

00010bcc <getuid@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #106496	; 0x1a000
   10bd4:	ldr	pc, [ip, #1108]!	; 0x454

00010bd8 <memmove@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #106496	; 0x1a000
   10be0:	ldr	pc, [ip, #1100]!	; 0x44c

00010be4 <free@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #106496	; 0x1a000
   10bec:	ldr	pc, [ip, #1092]!	; 0x444

00010bf0 <memcpy@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #106496	; 0x1a000
   10bf8:	ldr	pc, [ip, #1084]!	; 0x43c

00010bfc <time@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #106496	; 0x1a000
   10c04:	ldr	pc, [ip, #1076]!	; 0x434

00010c08 <ctime@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #106496	; 0x1a000
   10c10:	ldr	pc, [ip, #1068]!	; 0x42c

00010c14 <realloc@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #106496	; 0x1a000
   10c1c:	ldr	pc, [ip, #1060]!	; 0x424

00010c20 <funlockfile@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #106496	; 0x1a000
   10c28:	ldr	pc, [ip, #1052]!	; 0x41c

00010c2c <__fxstatat64@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #106496	; 0x1a000
   10c34:	ldr	pc, [ip, #1044]!	; 0x414

00010c38 <__fxstat64@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #106496	; 0x1a000
   10c40:	ldr	pc, [ip, #1036]!	; 0x40c

00010c44 <readlink@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #106496	; 0x1a000
   10c4c:	ldr	pc, [ip, #1028]!	; 0x404

00010c50 <fwrite@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #106496	; 0x1a000
   10c58:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c5c <ioctl@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #106496	; 0x1a000
   10c64:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c68 <strcpy@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #106496	; 0x1a000
   10c70:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c74 <open64@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #106496	; 0x1a000
   10c7c:	ldr	pc, [ip, #996]!	; 0x3e4

00010c80 <getenv@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #106496	; 0x1a000
   10c88:	ldr	pc, [ip, #988]!	; 0x3dc

00010c8c <malloc@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #106496	; 0x1a000
   10c94:	ldr	pc, [ip, #980]!	; 0x3d4

00010c98 <__libc_start_main@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #106496	; 0x1a000
   10ca0:	ldr	pc, [ip, #972]!	; 0x3cc

00010ca4 <strerror@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #106496	; 0x1a000
   10cac:	ldr	pc, [ip, #964]!	; 0x3c4

00010cb0 <__gmon_start__@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #106496	; 0x1a000
   10cb8:	ldr	pc, [ip, #956]!	; 0x3bc

00010cbc <__ctype_b_loc@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #106496	; 0x1a000
   10cc4:	ldr	pc, [ip, #948]!	; 0x3b4

00010cc8 <strlen@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #106496	; 0x1a000
   10cd0:	ldr	pc, [ip, #940]!	; 0x3ac

00010cd4 <strchr@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #106496	; 0x1a000
   10cdc:	ldr	pc, [ip, #932]!	; 0x3a4

00010ce0 <openat64@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #106496	; 0x1a000
   10ce8:	ldr	pc, [ip, #924]!	; 0x39c

00010cec <fprintf@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #106496	; 0x1a000
   10cf4:	ldr	pc, [ip, #916]!	; 0x394

00010cf8 <__errno_location@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #106496	; 0x1a000
   10d00:	ldr	pc, [ip, #908]!	; 0x38c

00010d04 <snprintf@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #106496	; 0x1a000
   10d0c:	ldr	pc, [ip, #900]!	; 0x384

00010d10 <memset@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #106496	; 0x1a000
   10d18:	ldr	pc, [ip, #892]!	; 0x37c

00010d1c <fcntl64@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #106496	; 0x1a000
   10d24:	ldr	pc, [ip, #884]!	; 0x374

00010d28 <strrchr@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #106496	; 0x1a000
   10d30:	ldr	pc, [ip, #876]!	; 0x36c

00010d34 <fputc@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #106496	; 0x1a000
   10d3c:	ldr	pc, [ip, #868]!	; 0x364

00010d40 <readdir64@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #106496	; 0x1a000
   10d48:	ldr	pc, [ip, #860]!	; 0x35c

00010d4c <fdopendir@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #106496	; 0x1a000
   10d54:	ldr	pc, [ip, #852]!	; 0x354

00010d58 <putc@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #106496	; 0x1a000
   10d60:	ldr	pc, [ip, #844]!	; 0x34c

00010d64 <dirfd@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #106496	; 0x1a000
   10d6c:	ldr	pc, [ip, #836]!	; 0x344

00010d70 <flockfile@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #106496	; 0x1a000
   10d78:	ldr	pc, [ip, #828]!	; 0x33c

00010d7c <fchdir@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #106496	; 0x1a000
   10d84:	ldr	pc, [ip, #820]!	; 0x334

00010d88 <qsort@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #106496	; 0x1a000
   10d90:	ldr	pc, [ip, #812]!	; 0x32c

00010d94 <__xstat64@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #106496	; 0x1a000
   10d9c:	ldr	pc, [ip, #804]!	; 0x324

00010da0 <isatty@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #106496	; 0x1a000
   10da8:	ldr	pc, [ip, #796]!	; 0x31c

00010dac <strncmp@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #106496	; 0x1a000
   10db4:	ldr	pc, [ip, #788]!	; 0x314

00010db8 <abort@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #106496	; 0x1a000
   10dc0:	ldr	pc, [ip, #780]!	; 0x30c

00010dc4 <close@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #106496	; 0x1a000
   10dcc:	ldr	pc, [ip, #772]!	; 0x304

00010dd0 <__lxstat64@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #106496	; 0x1a000
   10dd8:	ldr	pc, [ip, #764]!	; 0x2fc

00010ddc <closedir@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #106496	; 0x1a000
   10de4:	ldr	pc, [ip, #756]!	; 0x2f4

00010de8 <getgrgid@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #106496	; 0x1a000
   10df0:	ldr	pc, [ip, #748]!	; 0x2ec

00010df4 <__assert_fail@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #106496	; 0x1a000
   10dfc:	ldr	pc, [ip, #740]!	; 0x2e4

Disassembly of section .text:

00010e00 <.text>:
   10e00:	b	11730 <__assert_fail@plt+0x93c>
   10e04:	mov	fp, #0
   10e08:	mov	lr, #0
   10e0c:	pop	{r1}		; (ldr r1, [sp], #4)
   10e10:	mov	r2, sp
   10e14:	push	{r2}		; (str r2, [sp, #-4]!)
   10e18:	push	{r0}		; (str r0, [sp, #-4]!)
   10e1c:	ldr	ip, [pc, #16]	; 10e34 <__assert_fail@plt+0x40>
   10e20:	push	{ip}		; (str ip, [sp, #-4]!)
   10e24:	ldr	r0, [pc, #12]	; 10e38 <__assert_fail@plt+0x44>
   10e28:	ldr	r3, [pc, #12]	; 10e3c <__assert_fail@plt+0x48>
   10e2c:	bl	10c98 <__libc_start_main@plt>
   10e30:	bl	10db8 <abort@plt>
   10e34:	muleq	r1, r0, fp
   10e38:	andeq	r0, r1, r0, lsl #28
   10e3c:	andeq	r9, r1, r0, lsr fp
   10e40:	ldr	r3, [pc, #20]	; 10e5c <__assert_fail@plt+0x68>
   10e44:	ldr	r2, [pc, #20]	; 10e60 <__assert_fail@plt+0x6c>
   10e48:	add	r3, pc, r3
   10e4c:	ldr	r2, [r3, r2]
   10e50:	cmp	r2, #0
   10e54:	bxeq	lr
   10e58:	b	10cb0 <__gmon_start__@plt>
   10e5c:			; <UNDEFINED> instruction: 0x0001a1b0
   10e60:	andeq	r0, r0, r4, ror #1
   10e64:	ldr	r3, [pc, #28]	; 10e88 <__assert_fail@plt+0x94>
   10e68:	ldr	r0, [pc, #28]	; 10e8c <__assert_fail@plt+0x98>
   10e6c:	sub	r3, r3, r0
   10e70:	cmp	r3, #6
   10e74:	bxls	lr
   10e78:	ldr	r3, [pc, #16]	; 10e90 <__assert_fail@plt+0x9c>
   10e7c:	cmp	r3, #0
   10e80:	bxeq	lr
   10e84:	bx	r3
   10e88:	andeq	fp, r2, r3, lsl r1
   10e8c:	andeq	fp, r2, r0, lsl r1
   10e90:	andeq	r0, r0, r0
   10e94:	ldr	r1, [pc, #36]	; 10ec0 <__assert_fail@plt+0xcc>
   10e98:	ldr	r0, [pc, #36]	; 10ec4 <__assert_fail@plt+0xd0>
   10e9c:	sub	r1, r1, r0
   10ea0:	asr	r1, r1, #2
   10ea4:	add	r1, r1, r1, lsr #31
   10ea8:	asrs	r1, r1, #1
   10eac:	bxeq	lr
   10eb0:	ldr	r3, [pc, #16]	; 10ec8 <__assert_fail@plt+0xd4>
   10eb4:	cmp	r3, #0
   10eb8:	bxeq	lr
   10ebc:	bx	r3
   10ec0:	andeq	fp, r2, r0, lsl r1
   10ec4:	andeq	fp, r2, r0, lsl r1
   10ec8:	andeq	r0, r0, r0
   10ecc:	push	{r4, lr}
   10ed0:	ldr	r4, [pc, #24]	; 10ef0 <__assert_fail@plt+0xfc>
   10ed4:	ldrb	r3, [r4]
   10ed8:	cmp	r3, #0
   10edc:	popne	{r4, pc}
   10ee0:	bl	10e64 <__assert_fail@plt+0x70>
   10ee4:	mov	r3, #1
   10ee8:	strb	r3, [r4]
   10eec:	pop	{r4, pc}
   10ef0:	andeq	fp, r2, r8, lsl r1
   10ef4:	ldr	r0, [pc, #40]	; 10f24 <__assert_fail@plt+0x130>
   10ef8:	ldr	r3, [r0]
   10efc:	cmp	r3, #0
   10f00:	bne	10f08 <__assert_fail@plt+0x114>
   10f04:	b	10e94 <__assert_fail@plt+0xa0>
   10f08:	ldr	r3, [pc, #24]	; 10f28 <__assert_fail@plt+0x134>
   10f0c:	cmp	r3, #0
   10f10:	beq	10f04 <__assert_fail@plt+0x110>
   10f14:	push	{r4, lr}
   10f18:	blx	r3
   10f1c:	pop	{r4, lr}
   10f20:	b	10e94 <__assert_fail@plt+0xa0>
   10f24:	andeq	sl, r2, r4, lsl pc
   10f28:	andeq	r0, r0, r0
   10f2c:	ldr	r2, [r0]
   10f30:	ldrh	r0, [r2, #56]	; 0x38
   10f34:	cmp	r0, #7
   10f38:	beq	10fac <__assert_fail@plt+0x1b8>
   10f3c:	ldr	r1, [r1]
   10f40:	ldrh	r3, [r1, #56]	; 0x38
   10f44:	cmp	r3, #7
   10f48:	beq	10fac <__assert_fail@plt+0x1b8>
   10f4c:	cmp	r3, #10
   10f50:	cmpne	r0, #10
   10f54:	beq	10f9c <__assert_fail@plt+0x1a8>
   10f58:	cmp	r0, r3
   10f5c:	beq	10f8c <__assert_fail@plt+0x198>
   10f60:	ldr	ip, [r2, #48]	; 0x30
   10f64:	cmp	ip, #0
   10f68:	bne	10f8c <__assert_fail@plt+0x198>
   10f6c:	ldr	ip, [pc, #88]	; 10fcc <__assert_fail@plt+0x1d8>
   10f70:	ldr	ip, [ip]
   10f74:	cmp	ip, #0
   10f78:	bne	10f8c <__assert_fail@plt+0x198>
   10f7c:	cmp	r0, #1
   10f80:	bxeq	lr
   10f84:	cmp	r3, #1
   10f88:	beq	10fc4 <__assert_fail@plt+0x1d0>
   10f8c:	ldr	r3, [pc, #60]	; 10fd0 <__assert_fail@plt+0x1dc>
   10f90:	mov	r0, r2
   10f94:	ldr	r3, [r3]
   10f98:	bx	r3
   10f9c:	cmp	r3, #10
   10fa0:	beq	10fb4 <__assert_fail@plt+0x1c0>
   10fa4:	mov	r0, #1
   10fa8:	bx	lr
   10fac:	mov	r0, #0
   10fb0:	bx	lr
   10fb4:	cmp	r0, #10
   10fb8:	bne	10fc4 <__assert_fail@plt+0x1d0>
   10fbc:	mov	r0, r2
   10fc0:	b	13200 <__assert_fail@plt+0x240c>
   10fc4:	mvn	r0, #0
   10fc8:	bx	lr
   10fcc:	andeq	fp, r2, r0, lsr #3
   10fd0:	andeq	fp, r2, ip, lsl r1
   10fd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fd8:	sub	sp, sp, #180	; 0xb4
   10fdc:	subs	r3, r1, #0
   10fe0:	str	r3, [sp, #52]	; 0x34
   10fe4:	str	r0, [sp]
   10fe8:	beq	11270 <__assert_fail@plt+0x47c>
   10fec:	ldr	r3, [pc, #1144]	; 1146c <__assert_fail@plt+0x678>
   10ff0:	ldr	r3, [r3]
   10ff4:	cmp	r3, #0
   10ff8:	beq	1134c <__assert_fail@plt+0x558>
   10ffc:	mov	sl, #1
   11000:	mov	r3, #0
   11004:	ldr	r4, [sp, #52]	; 0x34
   11008:	str	r3, [sp, #20]
   1100c:	mov	r8, r3
   11010:	str	r3, [sp, #32]
   11014:	str	r3, [sp, #28]
   11018:	str	r3, [sp, #24]
   1101c:	str	r3, [sp, #36]	; 0x24
   11020:	str	r3, [sp, #16]
   11024:	mov	fp, r3
   11028:	mov	r5, r3
   1102c:	mov	r9, r3
   11030:	str	r3, [sp, #4]
   11034:	mov	r2, #0
   11038:	mov	r3, #0
   1103c:	strd	r2, [sp, #8]
   11040:	ldrh	r3, [r4, #56]	; 0x38
   11044:	cmp	r3, #10
   11048:	cmpne	r3, #7
   1104c:	beq	11278 <__assert_fail@plt+0x484>
   11050:	ldr	r2, [sp]
   11054:	cmp	r2, #0
   11058:	beq	112cc <__assert_fail@plt+0x4d8>
   1105c:	ldrb	r3, [r4, #168]	; 0xa8
   11060:	cmp	r3, #46	; 0x2e
   11064:	beq	112b0 <__assert_fail@plt+0x4bc>
   11068:	ldr	r3, [r4, #52]	; 0x34
   1106c:	cmp	r5, r3
   11070:	movcc	r5, r3
   11074:	cmp	sl, #0
   11078:	beq	11200 <__assert_fail@plt+0x40c>
   1107c:	ldr	lr, [sp, #16]
   11080:	ldrd	r2, [r4, #128]	; 0x80
   11084:	ldrd	r0, [r4, #160]	; 0xa0
   11088:	asr	r7, lr, #31
   1108c:	cmp	lr, r2
   11090:	sbcs	ip, r7, r3
   11094:	mov	r7, #0
   11098:	movlt	lr, r2
   1109c:	cmp	r1, r7
   110a0:	cmpeq	r0, r9
   110a4:	ldr	ip, [r4, #84]	; 0x54
   110a8:	ldrd	r6, [r4, #112]	; 0x70
   110ac:	movhi	r9, r0
   110b0:	ldrd	r0, [sp, #8]
   110b4:	cmp	fp, ip
   110b8:	movcc	fp, ip
   110bc:	cmp	r0, r6
   110c0:	sbcs	r1, r1, r7
   110c4:	str	lr, [sp, #16]
   110c8:	strdlt	r6, [sp, #8]
   110cc:	ldr	r1, [pc, #924]	; 11470 <__assert_fail@plt+0x67c>
   110d0:	ldr	r3, [r1]
   110d4:	ldr	r1, [sp, #4]
   110d8:	cmp	r3, #0
   110dc:	add	r2, r1, r2
   110e0:	str	r2, [sp, #4]
   110e4:	beq	11200 <__assert_fail@plt+0x40c>
   110e8:	ldr	r3, [pc, #900]	; 11474 <__assert_fail@plt+0x680>
   110ec:	ldr	r3, [r3]
   110f0:	cmp	r3, #0
   110f4:	beq	112e8 <__assert_fail@plt+0x4f4>
   110f8:	add	r2, sp, #80	; 0x50
   110fc:	ldr	r0, [r4, #88]	; 0x58
   11100:	mov	r1, #0
   11104:	bl	18f64 <__assert_fail@plt+0x8170>
   11108:	mov	r3, r0
   1110c:	add	r2, sp, #104	; 0x68
   11110:	ldr	r0, [r4, #92]	; 0x5c
   11114:	mov	r1, #0
   11118:	str	r3, [sp, #44]	; 0x2c
   1111c:	bl	18f64 <__assert_fail@plt+0x8170>
   11120:	ldr	r3, [sp, #44]	; 0x2c
   11124:	str	r0, [sp, #40]	; 0x28
   11128:	mov	r0, r3
   1112c:	str	r3, [sp, #44]	; 0x2c
   11130:	bl	10cc8 <strlen@plt>
   11134:	ldr	r3, [sp, #32]
   11138:	mov	r6, r0
   1113c:	cmp	r3, r0
   11140:	movlt	r3, r6
   11144:	ldr	r0, [sp, #40]	; 0x28
   11148:	str	r3, [sp, #32]
   1114c:	bl	10cc8 <strlen@plt>
   11150:	ldr	r3, [pc, #800]	; 11478 <__assert_fail@plt+0x684>
   11154:	ldr	r2, [r3]
   11158:	ldr	r3, [sp, #28]
   1115c:	cmp	r3, r0
   11160:	movlt	r3, r0
   11164:	str	r3, [sp, #28]
   11168:	cmp	r2, #0
   1116c:	add	r3, r6, r0
   11170:	movne	r2, #1
   11174:	moveq	r2, #0
   11178:	str	r3, [sp, #48]	; 0x30
   1117c:	add	r0, r3, #19
   11180:	ldr	r3, [sp, #24]
   11184:	add	r0, r0, r2
   11188:	movne	r3, sl
   1118c:	ldr	r2, [pc, #744]	; 1147c <__assert_fail@plt+0x688>
   11190:	str	r3, [sp, #24]
   11194:	ldr	r3, [sp, #20]
   11198:	movne	r3, r2
   1119c:	str	r3, [sp, #20]
   111a0:	bl	1910c <__assert_fail@plt+0x8318>
   111a4:	ldr	r3, [sp, #44]	; 0x2c
   111a8:	subs	r7, r0, #0
   111ac:	beq	11370 <__assert_fail@plt+0x57c>
   111b0:	add	r0, r7, #12
   111b4:	mov	r1, r3
   111b8:	str	r0, [r7]
   111bc:	bl	10c68 <strcpy@plt>
   111c0:	add	r0, r6, #13
   111c4:	add	r0, r7, r0
   111c8:	ldr	r1, [sp, #40]	; 0x28
   111cc:	str	r0, [r7, #4]
   111d0:	bl	10c68 <strcpy@plt>
   111d4:	ldr	r2, [pc, #668]	; 11478 <__assert_fail@plt+0x684>
   111d8:	ldr	r3, [r4, #80]	; 0x50
   111dc:	ldr	r1, [r2]
   111e0:	and	r3, r3, #45056	; 0xb000
   111e4:	ldr	r2, [sp, #36]	; 0x24
   111e8:	cmp	r3, #8192	; 0x2000
   111ec:	moveq	r2, sl
   111f0:	cmp	r1, #0
   111f4:	str	r2, [sp, #36]	; 0x24
   111f8:	bne	11330 <__assert_fail@plt+0x53c>
   111fc:	str	r7, [r4, #20]
   11200:	add	r8, r8, #1
   11204:	ldr	r4, [r4, #8]
   11208:	cmp	r4, #0
   1120c:	bne	11040 <__assert_fail@plt+0x24c>
   11210:	cmp	r8, #0
   11214:	beq	11270 <__assert_fail@plt+0x47c>
   11218:	ldr	r3, [sp, #52]	; 0x34
   1121c:	cmp	sl, #0
   11220:	str	r3, [sp, #128]	; 0x80
   11224:	str	r8, [sp, #140]	; 0x8c
   11228:	str	r5, [sp, #144]	; 0x90
   1122c:	bne	113a8 <__assert_fail@plt+0x5b4>
   11230:	ldr	r4, [pc, #584]	; 11480 <__assert_fail@plt+0x68c>
   11234:	add	r0, sp, #128	; 0x80
   11238:	ldr	r3, [r4, #4]
   1123c:	blx	r3
   11240:	ldr	r3, [pc, #552]	; 11470 <__assert_fail@plt+0x67c>
   11244:	mov	r2, #1
   11248:	str	r2, [r4, #8]
   1124c:	ldr	r3, [r3]
   11250:	cmp	r3, #0
   11254:	beq	11270 <__assert_fail@plt+0x47c>
   11258:	ldr	r4, [sp, #52]	; 0x34
   1125c:	ldr	r0, [r4, #20]
   11260:	bl	136fc <__assert_fail@plt+0x2908>
   11264:	ldr	r4, [r4, #8]
   11268:	cmp	r4, #0
   1126c:	bne	1125c <__assert_fail@plt+0x468>
   11270:	add	sp, sp, #180	; 0xb4
   11274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11278:	ldr	r3, [pc, #516]	; 11484 <__assert_fail@plt+0x690>
   1127c:	ldr	r0, [r4, #32]
   11280:	ldr	r6, [r3]
   11284:	bl	10ca4 <strerror@plt>
   11288:	add	r2, r4, #168	; 0xa8
   1128c:	ldr	r1, [pc, #500]	; 11488 <__assert_fail@plt+0x694>
   11290:	mov	r3, r0
   11294:	mov	r0, r6
   11298:	bl	10cec <fprintf@plt>
   1129c:	ldr	r2, [pc, #488]	; 1148c <__assert_fail@plt+0x698>
   112a0:	mov	r3, #1
   112a4:	str	r3, [r4, #16]
   112a8:	str	r3, [r2]
   112ac:	b	11204 <__assert_fail@plt+0x410>
   112b0:	ldr	r3, [pc, #472]	; 11490 <__assert_fail@plt+0x69c>
   112b4:	ldr	r3, [r3]
   112b8:	cmp	r3, #0
   112bc:	bne	11068 <__assert_fail@plt+0x274>
   112c0:	mov	r3, #1
   112c4:	str	r3, [r4, #16]
   112c8:	b	11204 <__assert_fail@plt+0x410>
   112cc:	cmp	r3, #1
   112d0:	bne	11068 <__assert_fail@plt+0x274>
   112d4:	ldr	r2, [pc, #440]	; 11494 <__assert_fail@plt+0x6a0>
   112d8:	ldr	r2, [r2]
   112dc:	cmp	r2, #0
   112e0:	bne	11068 <__assert_fail@plt+0x274>
   112e4:	b	112c4 <__assert_fail@plt+0x4d0>
   112e8:	ldr	r0, [r4, #88]	; 0x58
   112ec:	bl	10bb4 <getpwuid@plt>
   112f0:	subs	r3, r0, #0
   112f4:	ldr	r0, [r4, #92]	; 0x5c
   112f8:	beq	11430 <__assert_fail@plt+0x63c>
   112fc:	ldr	r3, [r3]
   11300:	str	r3, [sp, #40]	; 0x28
   11304:	bl	10de8 <getgrgid@plt>
   11308:	ldr	r3, [sp, #40]	; 0x28
   1130c:	cmp	r0, #0
   11310:	beq	11460 <__assert_fail@plt+0x66c>
   11314:	ldr	r2, [r0]
   11318:	cmp	r3, #0
   1131c:	str	r2, [sp, #40]	; 0x28
   11320:	beq	11444 <__assert_fail@plt+0x650>
   11324:	cmp	r2, #0
   11328:	bne	11128 <__assert_fail@plt+0x334>
   1132c:	b	1110c <__assert_fail@plt+0x318>
   11330:	ldr	r3, [sp, #48]	; 0x30
   11334:	ldr	r1, [sp, #20]
   11338:	add	r0, r3, #14
   1133c:	add	r0, r7, r0
   11340:	str	r0, [r7, #8]
   11344:	bl	10c68 <strcpy@plt>
   11348:	b	111fc <__assert_fail@plt+0x408>
   1134c:	ldr	r3, [pc, #284]	; 11470 <__assert_fail@plt+0x67c>
   11350:	ldr	r3, [r3]
   11354:	cmp	r3, #0
   11358:	bne	10ffc <__assert_fail@plt+0x208>
   1135c:	ldr	r3, [pc, #308]	; 11498 <__assert_fail@plt+0x6a4>
   11360:	ldr	sl, [r3]
   11364:	adds	sl, sl, #0
   11368:	movne	sl, #1
   1136c:	b	11000 <__assert_fail@plt+0x20c>
   11370:	ldr	r3, [pc, #268]	; 11484 <__assert_fail@plt+0x690>
   11374:	ldr	r4, [r3]
   11378:	bl	10cf8 <__errno_location@plt>
   1137c:	ldr	r0, [r0]
   11380:	bl	10ca4 <strerror@plt>
   11384:	ldr	r1, [pc, #272]	; 1149c <__assert_fail@plt+0x6a8>
   11388:	mov	r2, r0
   1138c:	mov	r0, r4
   11390:	bl	10cec <fprintf@plt>
   11394:	ldr	r3, [pc, #240]	; 1148c <__assert_fail@plt+0x698>
   11398:	mov	r2, #1
   1139c:	str	r2, [r3]
   113a0:	add	sp, sp, #180	; 0xb4
   113a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113a8:	ldr	r3, [sp, #36]	; 0x24
   113ac:	ldr	r0, [sp, #16]
   113b0:	str	r3, [sp, #136]	; 0x88
   113b4:	ldr	r3, [sp, #4]
   113b8:	add	r2, sp, #56	; 0x38
   113bc:	asr	r1, r0, #31
   113c0:	str	r3, [sp, #132]	; 0x84
   113c4:	bl	18f64 <__assert_fail@plt+0x8170>
   113c8:	bl	10cc8 <strlen@plt>
   113cc:	ldr	r3, [sp, #24]
   113d0:	add	r2, sp, #56	; 0x38
   113d4:	str	r3, [sp, #152]	; 0x98
   113d8:	ldr	r3, [sp, #28]
   113dc:	mov	r1, r4
   113e0:	str	r3, [sp, #156]	; 0x9c
   113e4:	str	r0, [sp, #148]	; 0x94
   113e8:	mov	r0, r9
   113ec:	bl	18f64 <__assert_fail@plt+0x8170>
   113f0:	bl	10cc8 <strlen@plt>
   113f4:	mov	r1, r4
   113f8:	add	r2, sp, #56	; 0x38
   113fc:	str	r0, [sp, #160]	; 0xa0
   11400:	mov	r0, fp
   11404:	bl	18f64 <__assert_fail@plt+0x8170>
   11408:	bl	10cc8 <strlen@plt>
   1140c:	add	r2, sp, #56	; 0x38
   11410:	str	r0, [sp, #164]	; 0xa4
   11414:	ldrd	r0, [sp, #8]
   11418:	bl	18f64 <__assert_fail@plt+0x8170>
   1141c:	bl	10cc8 <strlen@plt>
   11420:	ldr	r3, [sp, #32]
   11424:	str	r3, [sp, #172]	; 0xac
   11428:	str	r0, [sp, #168]	; 0xa8
   1142c:	b	11230 <__assert_fail@plt+0x43c>
   11430:	bl	10de8 <getgrgid@plt>
   11434:	cmp	r0, #0
   11438:	beq	110f8 <__assert_fail@plt+0x304>
   1143c:	ldr	r3, [r0]
   11440:	str	r3, [sp, #40]	; 0x28
   11444:	add	r2, sp, #80	; 0x50
   11448:	ldr	r0, [r4, #88]	; 0x58
   1144c:	mov	r1, #0
   11450:	bl	18f64 <__assert_fail@plt+0x8170>
   11454:	ldr	r2, [sp, #40]	; 0x28
   11458:	mov	r3, r0
   1145c:	b	11324 <__assert_fail@plt+0x530>
   11460:	cmp	r3, #0
   11464:	bne	1110c <__assert_fail@plt+0x318>
   11468:	b	110f8 <__assert_fail@plt+0x304>
   1146c:	andeq	fp, r2, r0, ror r1
   11470:	andeq	fp, r2, ip, lsl #3
   11474:	muleq	r2, r8, r1
   11478:	andeq	fp, r2, r8, ror #2
   1147c:	andeq	r9, r1, r0, lsr #23
   11480:	andeq	fp, r2, ip, lsl r1
   11484:	andeq	fp, r2, r0, lsl r1
   11488:	andeq	r9, r1, r4, lsr #23
   1148c:	andeq	fp, r2, r8, lsl #3
   11490:			; <UNDEFINED> instruction: 0x0002b1b0
   11494:	andeq	fp, r2, r0, lsr #3
   11498:	andeq	fp, r2, r8, asr r1
   1149c:	andeq	r9, r1, ip, lsr #23
   114a0:	ldr	ip, [pc, #592]	; 116f8 <__assert_fail@plt+0x904>
   114a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114a8:	mov	r5, r1
   114ac:	ldr	r1, [ip]
   114b0:	sub	sp, sp, #12
   114b4:	ldr	r3, [pc, #576]	; 116fc <__assert_fail@plt+0x908>
   114b8:	cmp	r1, #0
   114bc:	mov	r6, r2
   114c0:	str	r0, [sp, #4]
   114c4:	moveq	r2, r3
   114c8:	movne	r2, #0
   114cc:	mov	r1, r6
   114d0:	mov	r0, r5
   114d4:	bl	14af8 <__assert_fail@plt+0x3d04>
   114d8:	subs	r4, r0, #0
   114dc:	beq	116b8 <__assert_fail@plt+0x8c4>
   114e0:	mov	r1, #0
   114e4:	bl	15c48 <__assert_fail@plt+0x4e54>
   114e8:	mov	r1, r0
   114ec:	mov	r0, #0
   114f0:	bl	10fd4 <__assert_fail@plt+0x1e0>
   114f4:	ldr	r3, [pc, #516]	; 11700 <__assert_fail@plt+0x90c>
   114f8:	ldr	r5, [r3]
   114fc:	cmp	r5, #0
   11500:	bne	115ac <__assert_fail@plt+0x7b8>
   11504:	ldr	r7, [pc, #504]	; 11704 <__assert_fail@plt+0x910>
   11508:	ldr	r3, [r7]
   1150c:	cmp	r3, #0
   11510:	beq	1164c <__assert_fail@plt+0x858>
   11514:	ldr	r6, [pc, #492]	; 11708 <__assert_fail@plt+0x914>
   11518:	ldr	fp, [pc, #492]	; 1170c <__assert_fail@plt+0x918>
   1151c:	ldr	r8, [pc, #492]	; 11710 <__assert_fail@plt+0x91c>
   11520:	mov	r0, r4
   11524:	bl	152bc <__assert_fail@plt+0x44c8>
   11528:	subs	r9, r0, #0
   1152c:	beq	1159c <__assert_fail@plt+0x7a8>
   11530:	ldrh	r3, [r9, #56]	; 0x38
   11534:	sub	r3, r3, #1
   11538:	cmp	r3, #6
   1153c:	ldrls	pc, [pc, r3, lsl #2]
   11540:	b	11520 <__assert_fail@plt+0x72c>
   11544:	andeq	r1, r1, r8, asr #11
   11548:			; <UNDEFINED> instruction: 0x000115b4
   1154c:	andeq	r1, r1, r0, lsr #10
   11550:	andeq	r1, r1, r0, ror #10
   11554:	andeq	r1, r1, r0, lsr #10
   11558:	andeq	r1, r1, r0, lsr #10
   1155c:	andeq	r1, r1, r0, ror #10
   11560:	ldr	r0, [r9, #32]
   11564:	ldr	sl, [r6]
   11568:	bl	10ca4 <strerror@plt>
   1156c:	add	r2, r9, #168	; 0xa8
   11570:	ldr	r1, [pc, #412]	; 11714 <__assert_fail@plt+0x920>
   11574:	mov	r3, r0
   11578:	mov	r0, sl
   1157c:	bl	10cec <fprintf@plt>
   11580:	ldr	r2, [pc, #400]	; 11718 <__assert_fail@plt+0x924>
   11584:	mov	r3, #1
   11588:	mov	r0, r4
   1158c:	str	r3, [r2]
   11590:	bl	152bc <__assert_fail@plt+0x44c8>
   11594:	subs	r9, r0, #0
   11598:	bne	11530 <__assert_fail@plt+0x73c>
   1159c:	bl	10cf8 <__errno_location@plt>
   115a0:	ldr	r0, [r0]
   115a4:	cmp	r0, #0
   115a8:	bne	11658 <__assert_fail@plt+0x864>
   115ac:	add	sp, sp, #12
   115b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115b4:	add	r2, r9, #168	; 0xa8
   115b8:	mov	r1, fp
   115bc:	ldr	r0, [r6]
   115c0:	bl	10cec <fprintf@plt>
   115c4:	b	11520 <__assert_fail@plt+0x72c>
   115c8:	ldrb	r3, [r9, #168]	; 0xa8
   115cc:	cmp	r3, #46	; 0x2e
   115d0:	beq	11688 <__assert_fail@plt+0x894>
   115d4:	ldr	r3, [r8, #8]
   115d8:	cmp	r3, #0
   115dc:	bne	116a8 <__assert_fail@plt+0x8b4>
   115e0:	ldr	r3, [sp, #4]
   115e4:	cmp	r3, #1
   115e8:	ble	11600 <__assert_fail@plt+0x80c>
   115ec:	ldr	r1, [r9, #28]
   115f0:	ldr	r0, [pc, #292]	; 1171c <__assert_fail@plt+0x928>
   115f4:	bl	10bc0 <printf@plt>
   115f8:	mov	r3, #1
   115fc:	str	r3, [r8, #8]
   11600:	mov	r1, r5
   11604:	mov	r0, r4
   11608:	bl	15c48 <__assert_fail@plt+0x4e54>
   1160c:	mov	sl, r0
   11610:	mov	r1, r0
   11614:	mov	r0, r9
   11618:	bl	10fd4 <__assert_fail@plt+0x1e0>
   1161c:	cmp	sl, #0
   11620:	ldr	r3, [r7]
   11624:	clz	r3, r3
   11628:	lsr	r3, r3, #5
   1162c:	moveq	r3, #0
   11630:	cmp	r3, #0
   11634:	beq	11520 <__assert_fail@plt+0x72c>
   11638:	mov	r1, r9
   1163c:	mov	r2, #4
   11640:	mov	r0, r4
   11644:	bl	15c14 <__assert_fail@plt+0x4e20>
   11648:	b	11520 <__assert_fail@plt+0x72c>
   1164c:	ands	r5, r6, #8
   11650:	movne	r5, #4096	; 0x1000
   11654:	b	11514 <__assert_fail@plt+0x720>
   11658:	ldr	r3, [pc, #168]	; 11708 <__assert_fail@plt+0x914>
   1165c:	ldr	r4, [r3]
   11660:	bl	10ca4 <strerror@plt>
   11664:	ldr	r1, [pc, #180]	; 11720 <__assert_fail@plt+0x92c>
   11668:	mov	r2, r0
   1166c:	mov	r0, r4
   11670:	bl	10cec <fprintf@plt>
   11674:	ldr	r3, [pc, #156]	; 11718 <__assert_fail@plt+0x924>
   11678:	mov	r2, #1
   1167c:	str	r2, [r3]
   11680:	add	sp, sp, #12
   11684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11688:	ldr	r3, [r9, #48]	; 0x30
   1168c:	cmp	r3, #0
   11690:	beq	115d4 <__assert_fail@plt+0x7e0>
   11694:	ldr	r3, [pc, #136]	; 11724 <__assert_fail@plt+0x930>
   11698:	ldr	r3, [r3]
   1169c:	cmp	r3, #0
   116a0:	beq	11520 <__assert_fail@plt+0x72c>
   116a4:	b	115d4 <__assert_fail@plt+0x7e0>
   116a8:	ldr	r1, [r9, #28]
   116ac:	ldr	r0, [pc, #116]	; 11728 <__assert_fail@plt+0x934>
   116b0:	bl	10bc0 <printf@plt>
   116b4:	b	11600 <__assert_fail@plt+0x80c>
   116b8:	ldr	r3, [pc, #72]	; 11708 <__assert_fail@plt+0x914>
   116bc:	ldr	r5, [r5]
   116c0:	ldr	r4, [r3]
   116c4:	bl	10cf8 <__errno_location@plt>
   116c8:	ldr	r0, [r0]
   116cc:	bl	10ca4 <strerror@plt>
   116d0:	mov	r2, r5
   116d4:	ldr	r1, [pc, #80]	; 1172c <__assert_fail@plt+0x938>
   116d8:	mov	r3, r0
   116dc:	mov	r0, r4
   116e0:	bl	10cec <fprintf@plt>
   116e4:	ldr	r3, [pc, #44]	; 11718 <__assert_fail@plt+0x924>
   116e8:	mov	r2, #1
   116ec:	str	r2, [r3]
   116f0:	add	sp, sp, #12
   116f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116f8:	andeq	fp, r2, ip, ror r1
   116fc:	andeq	r0, r1, ip, lsr #30
   11700:	andeq	fp, r2, r0, lsr #3
   11704:	andeq	fp, r2, ip, ror #2
   11708:	andeq	fp, r2, r0, lsl r1
   1170c:	ldrdeq	r9, [r1], -ip
   11710:	andeq	fp, r2, ip, lsl r1
   11714:	andeq	r9, r1, r4, lsr #23
   11718:	andeq	fp, r2, r8, lsl #3
   1171c:	ldrdeq	r9, [r1], -r4
   11720:	strdeq	r9, [r1], -ip
   11724:			; <UNDEFINED> instruction: 0x0002b1b0
   11728:	andeq	r9, r1, ip, asr #23
   1172c:			; <UNDEFINED> instruction: 0x00019bb8
   11730:	ldr	r3, [pc, #1884]	; 11e94 <__assert_fail@plt+0x10a0>
   11734:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11738:	mov	r6, #0
   1173c:	str	r6, [r3]
   11740:	ldr	r3, [pc, #1872]	; 11e98 <__assert_fail@plt+0x10a4>
   11744:	ldr	r2, [pc, #1872]	; 11e9c <__assert_fail@plt+0x10a8>
   11748:	ldr	r9, [pc, #1872]	; 11ea0 <__assert_fail@plt+0x10ac>
   1174c:	str	r6, [r3]
   11750:	ldr	r3, [pc, #1868]	; 11ea4 <__assert_fail@plt+0x10b0>
   11754:	ldr	fp, [pc, #1868]	; 11ea8 <__assert_fail@plt+0x10b4>
   11758:	ldr	sl, [pc, #1868]	; 11eac <__assert_fail@plt+0x10b8>
   1175c:	str	r6, [r3]
   11760:	ldr	r3, [pc, #1864]	; 11eb0 <__assert_fail@plt+0x10bc>
   11764:	mov	r5, r1
   11768:	ldr	r1, [pc, #1860]	; 11eb4 <__assert_fail@plt+0x10c0>
   1176c:	str	r6, [r3]
   11770:	ldr	r3, [pc, #1856]	; 11eb8 <__assert_fail@plt+0x10c4>
   11774:	sub	sp, sp, #20
   11778:	mov	r4, r0
   1177c:	str	r6, [r3]
   11780:	ldr	r3, [pc, #1844]	; 11ebc <__assert_fail@plt+0x10c8>
   11784:	mov	r0, #1
   11788:	str	r6, [r1, #8]
   1178c:	str	r6, [r3]
   11790:	ldr	r3, [pc, #1832]	; 11ec0 <__assert_fail@plt+0x10cc>
   11794:	str	r6, [r2]
   11798:	str	r6, [fp]
   1179c:	str	r6, [r3]
   117a0:	ldr	r3, [pc, #1820]	; 11ec4 <__assert_fail@plt+0x10d0>
   117a4:	str	r6, [sl]
   117a8:	str	r6, [r9]
   117ac:	str	r6, [r3]
   117b0:	ldr	r3, [pc, #1808]	; 11ec8 <__assert_fail@plt+0x10d4>
   117b4:	str	r6, [r3]
   117b8:	ldr	r3, [pc, #1804]	; 11ecc <__assert_fail@plt+0x10d8>
   117bc:	str	r6, [r3]
   117c0:	ldr	r3, [pc, #1800]	; 11ed0 <__assert_fail@plt+0x10dc>
   117c4:	str	r6, [r3]
   117c8:	ldr	r3, [pc, #1796]	; 11ed4 <__assert_fail@plt+0x10e0>
   117cc:	str	r6, [r3]
   117d0:	ldr	r3, [pc, #1792]	; 11ed8 <__assert_fail@plt+0x10e4>
   117d4:	str	r6, [r3]
   117d8:	ldr	r3, [pc, #1788]	; 11edc <__assert_fail@plt+0x10e8>
   117dc:	str	r6, [r3]
   117e0:	ldr	r3, [pc, #1784]	; 11ee0 <__assert_fail@plt+0x10ec>
   117e4:	str	r6, [r3]
   117e8:	ldr	r3, [pc, #1780]	; 11ee4 <__assert_fail@plt+0x10f0>
   117ec:	str	r6, [r3]
   117f0:	ldr	r3, [pc, #1776]	; 11ee8 <__assert_fail@plt+0x10f4>
   117f4:	str	r6, [r3]
   117f8:	ldr	r3, [pc, #1772]	; 11eec <__assert_fail@plt+0x10f8>
   117fc:	str	r6, [r3]
   11800:	ldr	r3, [pc, #1768]	; 11ef0 <__assert_fail@plt+0x10fc>
   11804:	str	r6, [r3]
   11808:	bl	10da0 <isatty@plt>
   1180c:	cmp	r0, r6
   11810:	moveq	r3, #1
   11814:	streq	r3, [r9]
   11818:	bne	11c94 <__assert_fail@plt+0xea0>
   1181c:	bl	10bcc <getuid@plt>
   11820:	ldr	r6, [pc, #1740]	; 11ef4 <__assert_fail@plt+0x1100>
   11824:	mov	r7, #0
   11828:	cmp	r0, #0
   1182c:	moveq	r3, #1
   11830:	ldreq	r2, [pc, #1668]	; 11ebc <__assert_fail@plt+0x10c8>
   11834:	streq	r3, [r2]
   11838:	ldr	r2, [pc, #1720]	; 11ef8 <__assert_fail@plt+0x1104>
   1183c:	mov	r3, #1
   11840:	mov	r8, r3
   11844:	str	r3, [r2]
   11848:	mov	r3, #20
   1184c:	str	r3, [sp, #4]
   11850:	mov	r2, r6
   11854:	mov	r1, r5
   11858:	mov	r0, r4
   1185c:	bl	171e0 <__assert_fail@plt+0x63ec>
   11860:	cmn	r0, #1
   11864:	beq	119b0 <__assert_fail@plt+0xbbc>
   11868:	sub	r0, r0, #49	; 0x31
   1186c:	cmp	r0, #71	; 0x47
   11870:	ldrls	pc, [pc, r0, lsl #2]
   11874:	b	11c50 <__assert_fail@plt+0xe5c>
   11878:	andeq	r1, r1, r4, asr #23
   1187c:	andeq	r1, r1, r0, asr ip
   11880:	andeq	r1, r1, r0, asr ip
   11884:	andeq	r1, r1, r0, asr ip
   11888:	andeq	r1, r1, r0, asr ip
   1188c:	andeq	r1, r1, r0, asr ip
   11890:	andeq	r1, r1, r0, asr ip
   11894:	andeq	r1, r1, r0, asr ip
   11898:	andeq	r1, r1, r0, asr ip
   1189c:	andeq	r1, r1, r0, asr ip
   118a0:	andeq	r1, r1, r0, asr ip
   118a4:	andeq	r1, r1, r0, asr ip
   118a8:	andeq	r1, r1, r0, asr ip
   118ac:	andeq	r1, r1, r0, asr ip
   118b0:	andeq	r1, r1, r0, asr ip
   118b4:	andeq	r1, r1, r0, asr ip
   118b8:	andeq	r1, r1, r4, lsr #19
   118bc:	andeq	r1, r1, r0, asr ip
   118c0:	andeq	r1, r1, r4, lsr #23
   118c4:	andeq	r1, r1, r0, asr ip
   118c8:	andeq	r1, r1, r0, asr ip
   118cc:	muleq	r1, r8, fp
   118d0:	andeq	r1, r1, r0, asr ip
   118d4:	andeq	r1, r1, r0, asr ip
   118d8:	andeq	r1, r1, r0, asr ip
   118dc:	andeq	r1, r1, r0, asr ip
   118e0:	andeq	r1, r1, r0, asr ip
   118e4:	andeq	r1, r1, r4, lsl #23
   118e8:	andeq	r1, r1, r0, asr ip
   118ec:	andeq	r1, r1, r0, asr ip
   118f0:	andeq	r1, r1, r0, asr ip
   118f4:	andeq	r1, r1, r0, asr ip
   118f8:	andeq	r1, r1, r0, asr ip
   118fc:	andeq	r1, r1, r8, ror fp
   11900:	andeq	r1, r1, ip, ror #22
   11904:	andeq	r1, r1, r0, ror #22
   11908:	andeq	r1, r1, r0, asr ip
   1190c:	andeq	r1, r1, r0, asr ip
   11910:	andeq	r1, r1, r4, asr fp
   11914:	andeq	r1, r1, r0, asr ip
   11918:	andeq	r1, r1, r0, asr ip
   1191c:	andeq	r1, r1, r0, asr ip
   11920:	andeq	r1, r1, r0, asr ip
   11924:	andeq	r1, r1, r0, asr ip
   11928:	andeq	r1, r1, r0, asr ip
   1192c:	andeq	r1, r1, r0, asr ip
   11930:	andeq	r1, r1, r0, asr ip
   11934:	andeq	r1, r1, r0, asr ip
   11938:	muleq	r1, r8, r9
   1193c:	andeq	r1, r1, r0, asr ip
   11940:	andeq	r1, r1, r0, asr #22
   11944:	andeq	r1, r1, ip, lsr #22
   11948:	andeq	r1, r1, r0, asr ip
   1194c:	andeq	r1, r1, r0, lsr #22
   11950:	andeq	r1, r1, r0, asr r8
   11954:	andeq	r1, r1, r0, asr ip
   11958:	andeq	r1, r1, r4, lsl fp
   1195c:	andeq	r1, r1, r0, asr ip
   11960:	andeq	r1, r1, r4, lsl #22
   11964:	strdeq	r1, [r1], -r4
   11968:	ldrdeq	r1, [r1], -r4
   1196c:	andeq	r1, r1, ip, lsr #21
   11970:	andeq	r1, r1, r0, lsr #21
   11974:	muleq	r1, r4, sl
   11978:	andeq	r1, r1, r8, lsl #21
   1197c:	andeq	r1, r1, ip, ror sl
   11980:	andeq	r1, r1, r0, ror sl
   11984:	andeq	r1, r1, r0, ror #20
   11988:	andeq	r1, r1, ip, asr #20
   1198c:	andeq	r1, r1, r0, asr ip
   11990:	andeq	r1, r1, r0, asr ip
   11994:	andeq	r1, r1, ip, lsr #20
   11998:	ldr	r3, [sp, #4]
   1199c:	orr	r3, r3, #32
   119a0:	str	r3, [sp, #4]
   119a4:	ldr	r3, [pc, #1296]	; 11ebc <__assert_fail@plt+0x10c8>
   119a8:	str	r8, [r3]
   119ac:	b	11850 <__assert_fail@plt+0xa5c>
   119b0:	ldr	r3, [pc, #1344]	; 11ef8 <__assert_fail@plt+0x1104>
   119b4:	ldr	r2, [sl]
   119b8:	ldr	r1, [r3]
   119bc:	cmp	r2, #0
   119c0:	sub	r0, r4, r1
   119c4:	beq	11be4 <__assert_fail@plt+0xdf0>
   119c8:	ldr	r3, [pc, #1304]	; 11ee8 <__assert_fail@plt+0x10f4>
   119cc:	ldr	r3, [r3]
   119d0:	cmp	r3, #0
   119d4:	beq	11e88 <__assert_fail@plt+0x1094>
   119d8:	ldr	r3, [sp, #4]
   119dc:	orr	r3, r3, #128	; 0x80
   119e0:	str	r3, [sp, #4]
   119e4:	ldr	r3, [pc, #1224]	; 11eb4 <__assert_fail@plt+0x10c0>
   119e8:	ldr	r3, [r3, #12]
   119ec:	ldr	ip, [pc, #1288]	; 11efc <__assert_fail@plt+0x1108>
   119f0:	mov	lr, #2
   119f4:	str	lr, [ip]
   119f8:	ldr	ip, [pc, #1236]	; 11ed4 <__assert_fail@plt+0x10e0>
   119fc:	ldr	ip, [ip]
   11a00:	cmp	ip, #0
   11a04:	beq	11ccc <__assert_fail@plt+0xed8>
   11a08:	cmp	r3, #1
   11a0c:	beq	11ddc <__assert_fail@plt+0xfe8>
   11a10:	cmp	r3, #2
   11a14:	beq	11d78 <__assert_fail@plt+0xf84>
   11a18:	cmp	r3, #0
   11a1c:	ldreq	ip, [pc, #1168]	; 11eb4 <__assert_fail@plt+0x10c0>
   11a20:	ldreq	r3, [pc, #1240]	; 11f00 <__assert_fail@plt+0x110c>
   11a24:	streq	r3, [ip]
   11a28:	b	11cec <__assert_fail@plt+0xef8>
   11a2c:	ldr	r3, [pc, #1148]	; 11eb0 <__assert_fail@plt+0x10bc>
   11a30:	str	r7, [r9]
   11a34:	str	r7, [sl]
   11a38:	str	r8, [r3]
   11a3c:	ldr	r3, [pc, #1176]	; 11edc <__assert_fail@plt+0x10e8>
   11a40:	str	r7, [fp]
   11a44:	str	r7, [r3]
   11a48:	b	11850 <__assert_fail@plt+0xa5c>
   11a4c:	ldr	r3, [pc, #1124]	; 11eb8 <__assert_fail@plt+0x10c4>
   11a50:	str	r8, [r3]
   11a54:	ldr	r3, [pc, #1156]	; 11ee0 <__assert_fail@plt+0x10ec>
   11a58:	str	r7, [r3]
   11a5c:	b	11850 <__assert_fail@plt+0xa5c>
   11a60:	ldr	r3, [pc, #1100]	; 11eb4 <__assert_fail@plt+0x10c0>
   11a64:	mov	r2, #2
   11a68:	str	r2, [r3, #12]
   11a6c:	b	11850 <__assert_fail@plt+0xa5c>
   11a70:	ldr	r3, [pc, #1132]	; 11ee4 <__assert_fail@plt+0x10f0>
   11a74:	str	r8, [r3]
   11a78:	b	11850 <__assert_fail@plt+0xa5c>
   11a7c:	ldr	r3, [pc, #1104]	; 11ed4 <__assert_fail@plt+0x10e0>
   11a80:	str	r8, [r3]
   11a84:	b	11850 <__assert_fail@plt+0xa5c>
   11a88:	ldr	r3, [pc, #1084]	; 11ecc <__assert_fail@plt+0x10d8>
   11a8c:	str	r8, [r3]
   11a90:	b	11850 <__assert_fail@plt+0xa5c>
   11a94:	ldr	r3, [pc, #1104]	; 11eec <__assert_fail@plt+0x10f8>
   11a98:	str	r8, [r3]
   11a9c:	b	11850 <__assert_fail@plt+0xa5c>
   11aa0:	ldr	r3, [pc, #1020]	; 11ea4 <__assert_fail@plt+0x10b0>
   11aa4:	str	r8, [r3]
   11aa8:	b	11850 <__assert_fail@plt+0xa5c>
   11aac:	ldr	r3, [pc, #1040]	; 11ec4 <__assert_fail@plt+0x10d0>
   11ab0:	str	r8, [sl]
   11ab4:	str	r8, [r3]
   11ab8:	ldr	r3, [pc, #1052]	; 11edc <__assert_fail@plt+0x10e8>
   11abc:	str	r7, [r9]
   11ac0:	str	r7, [fp]
   11ac4:	str	r7, [r3]
   11ac8:	ldr	r3, [pc, #992]	; 11eb0 <__assert_fail@plt+0x10bc>
   11acc:	str	r7, [r3]
   11ad0:	b	11850 <__assert_fail@plt+0xa5c>
   11ad4:	ldr	r3, [pc, #1024]	; 11edc <__assert_fail@plt+0x10e8>
   11ad8:	str	r7, [r9]
   11adc:	str	r7, [sl]
   11ae0:	str	r8, [r3]
   11ae4:	ldr	r3, [pc, #964]	; 11eb0 <__assert_fail@plt+0x10bc>
   11ae8:	str	r7, [fp]
   11aec:	str	r7, [r3]
   11af0:	b	11850 <__assert_fail@plt+0xa5c>
   11af4:	ldr	r3, [pc, #968]	; 11ec4 <__assert_fail@plt+0x10d0>
   11af8:	str	r8, [sl]
   11afc:	str	r7, [r3]
   11b00:	b	11ab8 <__assert_fail@plt+0xcc4>
   11b04:	ldr	r3, [pc, #1008]	; 11efc <__assert_fail@plt+0x1108>
   11b08:	mov	r2, #1024	; 0x400
   11b0c:	str	r2, [r3]
   11b10:	b	11850 <__assert_fail@plt+0xa5c>
   11b14:	ldr	r3, [pc, #892]	; 11e98 <__assert_fail@plt+0x10a4>
   11b18:	str	r8, [r3]
   11b1c:	b	11850 <__assert_fail@plt+0xa5c>
   11b20:	ldr	r3, [pc, #928]	; 11ec8 <__assert_fail@plt+0x10d4>
   11b24:	str	r8, [r3]
   11b28:	b	11850 <__assert_fail@plt+0xa5c>
   11b2c:	ldr	r3, [pc, #908]	; 11ec0 <__assert_fail@plt+0x10cc>
   11b30:	str	r8, [r3]
   11b34:	ldr	r3, [pc, #924]	; 11ed8 <__assert_fail@plt+0x10e4>
   11b38:	str	r7, [r3]
   11b3c:	b	11850 <__assert_fail@plt+0xa5c>
   11b40:	ldr	r3, [pc, #920]	; 11ee0 <__assert_fail@plt+0x10ec>
   11b44:	str	r8, [r3]
   11b48:	ldr	r3, [pc, #872]	; 11eb8 <__assert_fail@plt+0x10c4>
   11b4c:	str	r7, [r3]
   11b50:	b	11850 <__assert_fail@plt+0xa5c>
   11b54:	ldr	r3, [pc, #908]	; 11ee8 <__assert_fail@plt+0x10f4>
   11b58:	str	r8, [r3]
   11b5c:	b	11850 <__assert_fail@plt+0xa5c>
   11b60:	ldr	r3, [pc, #872]	; 11ed0 <__assert_fail@plt+0x10dc>
   11b64:	str	r8, [r3]
   11b68:	b	11850 <__assert_fail@plt+0xa5c>
   11b6c:	ldr	r3, [pc, #832]	; 11eb4 <__assert_fail@plt+0x10c0>
   11b70:	str	r8, [r3, #12]
   11b74:	b	11850 <__assert_fail@plt+0xa5c>
   11b78:	ldr	r3, [pc, #856]	; 11ed8 <__assert_fail@plt+0x10e4>
   11b7c:	str	r8, [r3]
   11b80:	b	11850 <__assert_fail@plt+0xa5c>
   11b84:	ldr	r3, [sp, #4]
   11b88:	bic	r3, r3, #16
   11b8c:	orr	r3, r3, #2
   11b90:	str	r3, [sp, #4]
   11b94:	b	11850 <__assert_fail@plt+0xa5c>
   11b98:	ldr	r3, [pc, #848]	; 11ef0 <__assert_fail@plt+0x10fc>
   11b9c:	str	r8, [r3]
   11ba0:	b	11850 <__assert_fail@plt+0xa5c>
   11ba4:	ldr	r3, [pc, #816]	; 11edc <__assert_fail@plt+0x10e8>
   11ba8:	str	r8, [fp]
   11bac:	str	r7, [r9]
   11bb0:	str	r7, [r3]
   11bb4:	ldr	r3, [pc, #756]	; 11eb0 <__assert_fail@plt+0x10bc>
   11bb8:	str	r7, [sl]
   11bbc:	str	r7, [r3]
   11bc0:	b	11850 <__assert_fail@plt+0xa5c>
   11bc4:	ldr	r3, [pc, #784]	; 11edc <__assert_fail@plt+0x10e8>
   11bc8:	str	r8, [r9]
   11bcc:	str	r7, [sl]
   11bd0:	str	r7, [r3]
   11bd4:	ldr	r3, [pc, #724]	; 11eb0 <__assert_fail@plt+0x10bc>
   11bd8:	str	r7, [fp]
   11bdc:	str	r7, [r3]
   11be0:	b	11850 <__assert_fail@plt+0xa5c>
   11be4:	ldr	r3, [pc, #684]	; 11e98 <__assert_fail@plt+0x10a4>
   11be8:	ldr	r3, [r3]
   11bec:	cmp	r3, #0
   11bf0:	bne	11c5c <__assert_fail@plt+0xe68>
   11bf4:	ldr	r3, [pc, #744]	; 11ee4 <__assert_fail@plt+0x10f0>
   11bf8:	ldr	r3, [r3]
   11bfc:	cmp	r3, #0
   11c00:	bne	11c5c <__assert_fail@plt+0xe68>
   11c04:	ldr	r3, [pc, #740]	; 11ef0 <__assert_fail@plt+0x10fc>
   11c08:	ldr	r3, [r3]
   11c0c:	cmp	r3, #0
   11c10:	bne	11d2c <__assert_fail@plt+0xf38>
   11c14:	ldr	r3, [pc, #720]	; 11eec <__assert_fail@plt+0x10f8>
   11c18:	ldr	r3, [r3]
   11c1c:	cmp	r3, #0
   11c20:	ldr	r3, [pc, #652]	; 11eb4 <__assert_fail@plt+0x10c0>
   11c24:	ldr	r3, [r3, #12]
   11c28:	bne	11c3c <__assert_fail@plt+0xe48>
   11c2c:	cmp	r3, #0
   11c30:	ldreq	ip, [sp, #4]
   11c34:	orreq	ip, ip, #8
   11c38:	streq	ip, [sp, #4]
   11c3c:	ldr	ip, [pc, #636]	; 11ec0 <__assert_fail@plt+0x10cc>
   11c40:	ldr	ip, [ip]
   11c44:	cmp	ip, #0
   11c48:	bne	11d34 <__assert_fail@plt+0xf40>
   11c4c:	b	11c84 <__assert_fail@plt+0xe90>
   11c50:	bl	131d4 <__assert_fail@plt+0x23e0>
   11c54:	add	sp, sp, #20
   11c58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c5c:	ldr	r3, [pc, #604]	; 11ec0 <__assert_fail@plt+0x10cc>
   11c60:	ldr	r3, [r3]
   11c64:	cmp	r3, #0
   11c68:	bne	11d2c <__assert_fail@plt+0xf38>
   11c6c:	ldr	r3, [pc, #636]	; 11ef0 <__assert_fail@plt+0x10fc>
   11c70:	ldr	r3, [r3]
   11c74:	cmp	r3, #0
   11c78:	bne	11d2c <__assert_fail@plt+0xf38>
   11c7c:	ldr	r3, [pc, #560]	; 11eb4 <__assert_fail@plt+0x10c0>
   11c80:	ldr	r3, [r3, #12]
   11c84:	ldr	ip, [sp, #4]
   11c88:	orr	ip, ip, #1
   11c8c:	str	ip, [sp, #4]
   11c90:	b	11d34 <__assert_fail@plt+0xf40>
   11c94:	ldr	r0, [pc, #616]	; 11f04 <__assert_fail@plt+0x1110>
   11c98:	bl	10c80 <getenv@plt>
   11c9c:	cmp	r0, r6
   11ca0:	beq	11e4c <__assert_fail@plt+0x1058>
   11ca4:	mov	r1, r6
   11ca8:	mov	r2, #10
   11cac:	bl	10ba8 <strtol@plt>
   11cb0:	ldr	r3, [pc, #592]	; 11f08 <__assert_fail@plt+0x1114>
   11cb4:	str	r0, [r3]
   11cb8:	ldr	r2, [pc, #524]	; 11ecc <__assert_fail@plt+0x10d8>
   11cbc:	mov	r3, #1
   11cc0:	str	r3, [fp]
   11cc4:	str	r3, [r2]
   11cc8:	b	1181c <__assert_fail@plt+0xa28>
   11ccc:	cmp	r3, #1
   11cd0:	beq	11dcc <__assert_fail@plt+0xfd8>
   11cd4:	cmp	r3, #2
   11cd8:	beq	11d58 <__assert_fail@plt+0xf64>
   11cdc:	cmp	r3, #0
   11ce0:	ldreq	ip, [pc, #460]	; 11eb4 <__assert_fail@plt+0x10c0>
   11ce4:	ldreq	r3, [pc, #544]	; 11f0c <__assert_fail@plt+0x1118>
   11ce8:	streq	r3, [ip]
   11cec:	ldr	r3, [r9]
   11cf0:	cmp	r3, #0
   11cf4:	beq	11d98 <__assert_fail@plt+0xfa4>
   11cf8:	ldr	r2, [pc, #436]	; 11eb4 <__assert_fail@plt+0x10c0>
   11cfc:	ldr	r3, [pc, #524]	; 11f10 <__assert_fail@plt+0x111c>
   11d00:	str	r3, [r2, #4]
   11d04:	cmp	r0, #0
   11d08:	moveq	r0, #1
   11d0c:	ldr	r2, [sp, #4]
   11d10:	addne	r1, r5, r1, lsl #2
   11d14:	ldreq	r1, [pc, #504]	; 11f14 <__assert_fail@plt+0x1120>
   11d18:	bl	114a0 <__assert_fail@plt+0x6ac>
   11d1c:	ldr	r3, [pc, #500]	; 11f18 <__assert_fail@plt+0x1124>
   11d20:	ldr	r0, [r3]
   11d24:	add	sp, sp, #20
   11d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d2c:	ldr	r3, [pc, #384]	; 11eb4 <__assert_fail@plt+0x10c0>
   11d30:	ldr	r3, [r3, #12]
   11d34:	ldr	ip, [pc, #428]	; 11ee8 <__assert_fail@plt+0x10f4>
   11d38:	ldr	ip, [ip]
   11d3c:	cmp	ip, #0
   11d40:	bne	11e78 <__assert_fail@plt+0x1084>
   11d44:	ldr	ip, [pc, #408]	; 11ee4 <__assert_fail@plt+0x10f0>
   11d48:	ldr	ip, [ip]
   11d4c:	cmp	ip, #0
   11d50:	beq	119f8 <__assert_fail@plt+0xc04>
   11d54:	b	119ec <__assert_fail@plt+0xbf8>
   11d58:	ldr	r3, [pc, #344]	; 11eb8 <__assert_fail@plt+0x10c4>
   11d5c:	ldr	r3, [r3]
   11d60:	cmp	r3, #0
   11d64:	beq	11e2c <__assert_fail@plt+0x1038>
   11d68:	ldr	ip, [pc, #324]	; 11eb4 <__assert_fail@plt+0x10c0>
   11d6c:	ldr	r3, [pc, #424]	; 11f1c <__assert_fail@plt+0x1128>
   11d70:	str	r3, [ip]
   11d74:	b	11cec <__assert_fail@plt+0xef8>
   11d78:	ldr	r3, [pc, #312]	; 11eb8 <__assert_fail@plt+0x10c4>
   11d7c:	ldr	r3, [r3]
   11d80:	cmp	r3, #0
   11d84:	beq	11e0c <__assert_fail@plt+0x1018>
   11d88:	ldr	ip, [pc, #292]	; 11eb4 <__assert_fail@plt+0x10c0>
   11d8c:	ldr	r3, [pc, #396]	; 11f20 <__assert_fail@plt+0x112c>
   11d90:	str	r3, [ip]
   11d94:	b	11cec <__assert_fail@plt+0xef8>
   11d98:	ldr	r3, [pc, #272]	; 11eb0 <__assert_fail@plt+0x10bc>
   11d9c:	ldr	r3, [r3]
   11da0:	cmp	r3, #0
   11da4:	ldrne	r2, [pc, #264]	; 11eb4 <__assert_fail@plt+0x10c0>
   11da8:	ldrne	r3, [pc, #372]	; 11f24 <__assert_fail@plt+0x1130>
   11dac:	strne	r3, [r2, #4]
   11db0:	bne	11d04 <__assert_fail@plt+0xf10>
   11db4:	cmp	r2, #0
   11db8:	beq	11dec <__assert_fail@plt+0xff8>
   11dbc:	ldr	r2, [pc, #240]	; 11eb4 <__assert_fail@plt+0x10c0>
   11dc0:	ldr	r3, [pc, #352]	; 11f28 <__assert_fail@plt+0x1134>
   11dc4:	str	r3, [r2, #4]
   11dc8:	b	11d04 <__assert_fail@plt+0xf10>
   11dcc:	ldr	ip, [pc, #224]	; 11eb4 <__assert_fail@plt+0x10c0>
   11dd0:	ldr	r3, [pc, #340]	; 11f2c <__assert_fail@plt+0x1138>
   11dd4:	str	r3, [ip]
   11dd8:	b	11cec <__assert_fail@plt+0xef8>
   11ddc:	ldr	ip, [pc, #208]	; 11eb4 <__assert_fail@plt+0x10c0>
   11de0:	ldr	r3, [pc, #328]	; 11f30 <__assert_fail@plt+0x113c>
   11de4:	str	r3, [ip]
   11de8:	b	11cec <__assert_fail@plt+0xef8>
   11dec:	ldr	r3, [pc, #232]	; 11edc <__assert_fail@plt+0x10e8>
   11df0:	ldr	r2, [pc, #188]	; 11eb4 <__assert_fail@plt+0x10c0>
   11df4:	ldr	r3, [r3]
   11df8:	cmp	r3, #0
   11dfc:	ldrne	r3, [pc, #304]	; 11f34 <__assert_fail@plt+0x1140>
   11e00:	ldreq	r3, [pc, #304]	; 11f38 <__assert_fail@plt+0x1144>
   11e04:	str	r3, [r2, #4]
   11e08:	b	11d04 <__assert_fail@plt+0xf10>
   11e0c:	ldr	r3, [pc, #204]	; 11ee0 <__assert_fail@plt+0x10ec>
   11e10:	ldr	ip, [pc, #156]	; 11eb4 <__assert_fail@plt+0x10c0>
   11e14:	ldr	r3, [r3]
   11e18:	cmp	r3, #0
   11e1c:	ldrne	r3, [pc, #280]	; 11f3c <__assert_fail@plt+0x1148>
   11e20:	ldreq	r3, [pc, #280]	; 11f40 <__assert_fail@plt+0x114c>
   11e24:	str	r3, [ip]
   11e28:	b	11cec <__assert_fail@plt+0xef8>
   11e2c:	ldr	r3, [pc, #172]	; 11ee0 <__assert_fail@plt+0x10ec>
   11e30:	ldr	ip, [pc, #124]	; 11eb4 <__assert_fail@plt+0x10c0>
   11e34:	ldr	r3, [r3]
   11e38:	cmp	r3, #0
   11e3c:	ldrne	r3, [pc, #256]	; 11f44 <__assert_fail@plt+0x1150>
   11e40:	ldreq	r3, [pc, #256]	; 11f48 <__assert_fail@plt+0x1154>
   11e44:	str	r3, [ip]
   11e48:	b	11cec <__assert_fail@plt+0xef8>
   11e4c:	add	r2, sp, #8
   11e50:	ldr	r1, [pc, #244]	; 11f4c <__assert_fail@plt+0x1158>
   11e54:	mov	r0, #1
   11e58:	bl	18fcc <__assert_fail@plt+0x81d8>
   11e5c:	cmp	r0, #0
   11e60:	bne	11cb8 <__assert_fail@plt+0xec4>
   11e64:	ldrh	r3, [sp, #10]
   11e68:	cmp	r3, #0
   11e6c:	ldrne	r2, [pc, #148]	; 11f08 <__assert_fail@plt+0x1114>
   11e70:	strne	r3, [r2]
   11e74:	b	11cb8 <__assert_fail@plt+0xec4>
   11e78:	ldr	ip, [sp, #4]
   11e7c:	orr	ip, ip, #128	; 0x80
   11e80:	str	ip, [sp, #4]
   11e84:	b	11d44 <__assert_fail@plt+0xf50>
   11e88:	ldr	r3, [pc, #36]	; 11eb4 <__assert_fail@plt+0x10c0>
   11e8c:	ldr	r3, [r3, #12]
   11e90:	b	119ec <__assert_fail@plt+0xbf8>
   11e94:	andeq	fp, r2, ip, asr r1
   11e98:	andeq	fp, r2, r0, ror r1
   11e9c:	andeq	fp, r2, ip, lsr #3
   11ea0:	andeq	fp, r2, r0, ror #2
   11ea4:	andeq	fp, r2, r8, ror #2
   11ea8:	andeq	fp, r2, r4, ror #2
   11eac:	andeq	fp, r2, ip, lsl #3
   11eb0:	muleq	r2, ip, r1
   11eb4:	andeq	fp, r2, ip, lsl r1
   11eb8:	andeq	fp, r2, r8, ror r1
   11ebc:			; <UNDEFINED> instruction: 0x0002b1b0
   11ec0:	andeq	fp, r2, r0, lsr #3
   11ec4:	muleq	r2, r8, r1
   11ec8:	andeq	fp, r2, ip, ror r1
   11ecc:			; <UNDEFINED> instruction: 0x0002b1b4
   11ed0:	muleq	r2, r4, r1
   11ed4:	andeq	fp, r2, r4, ror r1
   11ed8:	andeq	fp, r2, ip, ror #2
   11edc:			; <UNDEFINED> instruction: 0x0002b1b8
   11ee0:	andeq	fp, r2, r4, lsr #3
   11ee4:	andeq	fp, r2, r8, asr r1
   11ee8:	andeq	fp, r2, r4, lsl #3
   11eec:	muleq	r2, r0, r1
   11ef0:	andeq	fp, r2, r0, lsl #3
   11ef4:	andeq	r9, r1, r4, lsl ip
   11ef8:	andeq	fp, r2, r4, lsl #2
   11efc:	andeq	fp, r2, r8, lsr #3
   11f00:	andeq	r3, r1, ip, lsl #4
   11f04:	andeq	r9, r1, ip, lsl #24
   11f08:	strdeq	fp, [r2], -r0
   11f0c:	andeq	r3, r1, r0, lsl #4
   11f10:			; <UNDEFINED> instruction: 0x000122bc
   11f14:	strdeq	fp, [r2], -r4
   11f18:	andeq	fp, r2, r8, lsl #3
   11f1c:			; <UNDEFINED> instruction: 0x000132b0
   11f20:	strdeq	r3, [r1], -r4
   11f24:	andeq	r2, r1, r0, asr #25
   11f28:	andeq	r2, r1, r4, asr r4
   11f2c:	ldrdeq	r3, [r1], -r8
   11f30:	andeq	r3, r1, r0, lsr #8
   11f34:	ldrdeq	r2, [r1], -ip
   11f38:	andeq	r2, r1, ip, asr #15
   11f3c:	andeq	r3, r1, r8, lsl #7
   11f40:	andeq	r3, r1, r0, ror #4
   11f44:	andeq	r3, r1, r4, asr #6
   11f48:	andeq	r3, r1, ip, lsl r2
   11f4c:	andeq	r5, r0, r3, lsl r4
   11f50:	push	{r4, r5, r6, r7, lr}
   11f54:	sub	sp, sp, #12
   11f58:	add	r3, sp, #8
   11f5c:	ldr	r5, [pc, #196]	; 12028 <__assert_fail@plt+0x1234>
   11f60:	str	r0, [r3, #-4]!
   11f64:	mov	r0, r3
   11f68:	bl	10c08 <ctime@plt>
   11f6c:	mov	r6, r0
   11f70:	add	r4, r0, #3
   11f74:	add	r7, r0, #10
   11f78:	ldrb	r0, [r4, #1]!
   11f7c:	ldr	r1, [r5]
   11f80:	bl	10d58 <putc@plt>
   11f84:	cmp	r4, r7
   11f88:	bne	11f78 <__assert_fail@plt+0x1184>
   11f8c:	ldr	r3, [pc, #152]	; 1202c <__assert_fail@plt+0x1238>
   11f90:	ldr	r0, [r3]
   11f94:	cmp	r0, #0
   11f98:	beq	11fc8 <__assert_fail@plt+0x11d4>
   11f9c:	add	r6, r6, #23
   11fa0:	ldrb	r0, [r4, #1]!
   11fa4:	ldr	r1, [r5]
   11fa8:	bl	10d58 <putc@plt>
   11fac:	cmp	r6, r4
   11fb0:	bne	11fa0 <__assert_fail@plt+0x11ac>
   11fb4:	ldr	r1, [r5]
   11fb8:	mov	r0, #32
   11fbc:	bl	10d58 <putc@plt>
   11fc0:	add	sp, sp, #12
   11fc4:	pop	{r4, r5, r6, r7, pc}
   11fc8:	ldr	r3, [sp, #4]
   11fcc:	ldr	r7, [pc, #92]	; 12030 <__assert_fail@plt+0x123c>
   11fd0:	add	r7, r3, r7
   11fd4:	bl	10bfc <time@plt>
   11fd8:	cmp	r7, r0
   11fdc:	blt	11ffc <__assert_fail@plt+0x1208>
   11fe0:	add	r6, r6, #15
   11fe4:	ldrb	r0, [r4, #1]!
   11fe8:	ldr	r1, [r5]
   11fec:	bl	10d58 <putc@plt>
   11ff0:	cmp	r6, r4
   11ff4:	bne	11fe4 <__assert_fail@plt+0x11f0>
   11ff8:	b	11fb4 <__assert_fail@plt+0x11c0>
   11ffc:	ldr	r1, [r5]
   12000:	mov	r0, #32
   12004:	bl	10d58 <putc@plt>
   12008:	add	r4, r6, #19
   1200c:	add	r6, r6, #23
   12010:	ldrb	r0, [r4, #1]!
   12014:	ldr	r1, [r5]
   12018:	bl	10d58 <putc@plt>
   1201c:	cmp	r6, r4
   12020:	bne	12010 <__assert_fail@plt+0x121c>
   12024:	b	11fb4 <__assert_fail@plt+0x11c0>
   12028:	andeq	fp, r2, r4, lsl r1
   1202c:	muleq	r2, r4, r1
   12030:	strdeq	pc, [pc], #15	; <UNPREDICTABLE>
   12034:	ldr	r3, [r0, #48]	; 0x30
   12038:	push	{r4, r5, lr}
   1203c:	cmp	r3, #0
   12040:	sub	sp, sp, #8192	; 0x2000
   12044:	sub	sp, sp, #12
   12048:	bne	120b4 <__assert_fail@plt+0x12c0>
   1204c:	add	r4, sp, #8
   12050:	add	r3, r0, #168	; 0xa8
   12054:	ldr	r2, [pc, #180]	; 12110 <__assert_fail@plt+0x131c>
   12058:	mov	r0, r4
   1205c:	mov	r1, #4096	; 0x1000
   12060:	bl	10d04 <snprintf@plt>
   12064:	add	r1, sp, #4096	; 0x1000
   12068:	add	r1, r1, #8
   1206c:	ldr	r2, [pc, #160]	; 12114 <__assert_fail@plt+0x1320>
   12070:	mov	r0, r4
   12074:	bl	10c44 <readlink@plt>
   12078:	cmn	r0, #1
   1207c:	mov	r3, r0
   12080:	beq	120dc <__assert_fail@plt+0x12e8>
   12084:	add	r1, sp, #4096	; 0x1000
   12088:	add	r1, r1, #8
   1208c:	mov	r2, #0
   12090:	ldr	r0, [pc, #128]	; 12118 <__assert_fail@plt+0x1324>
   12094:	strb	r2, [r1, r3]
   12098:	bl	10bc0 <printf@plt>
   1209c:	add	r0, sp, #4096	; 0x1000
   120a0:	add	r0, r0, #8
   120a4:	bl	13154 <__assert_fail@plt+0x2360>
   120a8:	add	sp, sp, #8192	; 0x2000
   120ac:	add	sp, sp, #12
   120b0:	pop	{r4, r5, pc}
   120b4:	ldr	r3, [r0, #4]
   120b8:	add	r2, r0, #168	; 0xa8
   120bc:	add	r4, sp, #8
   120c0:	ldr	r3, [r3, #24]
   120c4:	mov	r0, r4
   120c8:	str	r2, [sp]
   120cc:	mov	r1, #4096	; 0x1000
   120d0:	ldr	r2, [pc, #68]	; 1211c <__assert_fail@plt+0x1328>
   120d4:	bl	10d04 <snprintf@plt>
   120d8:	b	12064 <__assert_fail@plt+0x1270>
   120dc:	ldr	r3, [pc, #60]	; 12120 <__assert_fail@plt+0x132c>
   120e0:	ldr	r5, [r3]
   120e4:	bl	10cf8 <__errno_location@plt>
   120e8:	ldr	r0, [r0]
   120ec:	bl	10ca4 <strerror@plt>
   120f0:	mov	r2, r4
   120f4:	ldr	r1, [pc, #40]	; 12124 <__assert_fail@plt+0x1330>
   120f8:	mov	r3, r0
   120fc:	mov	r0, r5
   12100:	bl	10cec <fprintf@plt>
   12104:	add	sp, sp, #8192	; 0x2000
   12108:	add	sp, sp, #12
   1210c:	pop	{r4, r5, pc}
   12110:			; <UNDEFINED> instruction: 0x00019bb4
   12114:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   12118:	andeq	r9, r1, r8, asr #24
   1211c:	andeq	r9, r1, r0, lsr ip
   12120:	andeq	fp, r2, r0, lsl r1
   12124:	andeq	r9, r1, r8, lsr ip
   12128:	ldr	r3, [pc, #364]	; 1229c <__assert_fail@plt+0x14a8>
   1212c:	push	{r4, r5, r6, lr}
   12130:	mov	r5, r0
   12134:	ldr	r4, [r3]
   12138:	mov	r6, r2
   1213c:	cmp	r4, #0
   12140:	bne	12218 <__assert_fail@plt+0x1424>
   12144:	ldr	r3, [pc, #340]	; 122a0 <__assert_fail@plt+0x14ac>
   12148:	ldr	r3, [r3]
   1214c:	cmp	r3, #0
   12150:	bne	121dc <__assert_fail@plt+0x13e8>
   12154:	add	r0, r5, #168	; 0xa8
   12158:	bl	13154 <__assert_fail@plt+0x2360>
   1215c:	ldr	r3, [pc, #320]	; 122a4 <__assert_fail@plt+0x14b0>
   12160:	ldr	r3, [r3]
   12164:	cmp	r3, #0
   12168:	add	r4, r4, r0
   1216c:	bne	12198 <__assert_fail@plt+0x13a4>
   12170:	ldr	r3, [pc, #304]	; 122a8 <__assert_fail@plt+0x14b4>
   12174:	ldr	r3, [r3]
   12178:	cmp	r3, #0
   1217c:	beq	12190 <__assert_fail@plt+0x139c>
   12180:	ldr	r3, [r5, #80]	; 0x50
   12184:	and	r3, r3, #61440	; 0xf000
   12188:	cmp	r3, #16384	; 0x4000
   1218c:	beq	1222c <__assert_fail@plt+0x1438>
   12190:	mov	r0, r4
   12194:	pop	{r4, r5, r6, pc}
   12198:	ldr	r3, [r5, #80]	; 0x50
   1219c:	and	r2, r3, #61440	; 0xf000
   121a0:	cmp	r2, #16384	; 0x4000
   121a4:	beq	1222c <__assert_fail@plt+0x1438>
   121a8:	bls	12244 <__assert_fail@plt+0x1450>
   121ac:	cmp	r2, #40960	; 0xa000
   121b0:	beq	12284 <__assert_fail@plt+0x1490>
   121b4:	cmp	r2, #49152	; 0xc000
   121b8:	bne	12264 <__assert_fail@plt+0x1470>
   121bc:	ldr	r3, [pc, #232]	; 122ac <__assert_fail@plt+0x14b8>
   121c0:	mov	r0, #61	; 0x3d
   121c4:	ldr	r1, [r3]
   121c8:	bl	10d58 <putc@plt>
   121cc:	mov	r3, #1
   121d0:	add	r4, r4, r3
   121d4:	mov	r0, r4
   121d8:	pop	{r4, r5, r6, pc}
   121dc:	ldr	r3, [pc, #204]	; 122b0 <__assert_fail@plt+0x14bc>
   121e0:	ldrd	r0, [r5, #128]	; 0x80
   121e4:	ldr	r2, [r3]
   121e8:	sub	r3, r2, #1
   121ec:	adds	r0, r0, r3
   121f0:	adc	r1, r1, r3, asr #31
   121f4:	asr	r3, r2, #31
   121f8:	bl	198e8 <__assert_fail@plt+0x8af4>
   121fc:	mov	r2, r0
   12200:	mov	r3, r1
   12204:	ldr	r0, [pc, #168]	; 122b4 <__assert_fail@plt+0x14c0>
   12208:	mov	r1, r6
   1220c:	bl	10bc0 <printf@plt>
   12210:	add	r4, r4, r0
   12214:	b	12154 <__assert_fail@plt+0x1360>
   12218:	ldr	r2, [r0, #160]	; 0xa0
   1221c:	ldr	r0, [pc, #148]	; 122b8 <__assert_fail@plt+0x14c4>
   12220:	bl	10bc0 <printf@plt>
   12224:	mov	r4, r0
   12228:	b	12144 <__assert_fail@plt+0x1350>
   1222c:	ldr	r3, [pc, #120]	; 122ac <__assert_fail@plt+0x14b8>
   12230:	mov	r0, #47	; 0x2f
   12234:	ldr	r1, [r3]
   12238:	bl	10d58 <putc@plt>
   1223c:	mov	r3, #1
   12240:	b	121d0 <__assert_fail@plt+0x13dc>
   12244:	cmp	r2, #4096	; 0x1000
   12248:	bne	12264 <__assert_fail@plt+0x1470>
   1224c:	ldr	r3, [pc, #88]	; 122ac <__assert_fail@plt+0x14b8>
   12250:	mov	r0, #124	; 0x7c
   12254:	ldr	r1, [r3]
   12258:	bl	10d58 <putc@plt>
   1225c:	mov	r3, #1
   12260:	b	121d0 <__assert_fail@plt+0x13dc>
   12264:	ands	r3, r3, #73	; 0x49
   12268:	beq	121d0 <__assert_fail@plt+0x13dc>
   1226c:	ldr	r3, [pc, #56]	; 122ac <__assert_fail@plt+0x14b8>
   12270:	mov	r0, #42	; 0x2a
   12274:	ldr	r1, [r3]
   12278:	bl	10d58 <putc@plt>
   1227c:	mov	r3, #1
   12280:	b	121d0 <__assert_fail@plt+0x13dc>
   12284:	ldr	r3, [pc, #32]	; 122ac <__assert_fail@plt+0x14b8>
   12288:	mov	r0, #64	; 0x40
   1228c:	ldr	r1, [r3]
   12290:	bl	10d58 <putc@plt>
   12294:	mov	r3, #1
   12298:	b	121d0 <__assert_fail@plt+0x13dc>
   1229c:	andeq	fp, r2, r0, ror r1
   122a0:	andeq	fp, r2, r8, asr r1
   122a4:	andeq	fp, r2, r0, lsl #3
   122a8:	muleq	r2, r0, r1
   122ac:	andeq	fp, r2, r4, lsl r1
   122b0:	andeq	fp, r2, r8, lsr #3
   122b4:	andeq	r9, r1, r8, asr ip
   122b8:	andeq	r9, r1, r0, asr ip
   122bc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122c0:	ldr	r4, [r0]
   122c4:	cmp	r4, #0
   122c8:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   122cc:	mov	r5, r0
   122d0:	ldr	sl, [pc, #348]	; 12434 <__assert_fail@plt+0x1640>
   122d4:	ldr	r9, [pc, #348]	; 12438 <__assert_fail@plt+0x1644>
   122d8:	ldr	r8, [pc, #348]	; 1243c <__assert_fail@plt+0x1648>
   122dc:	ldr	r6, [pc, #348]	; 12440 <__assert_fail@plt+0x164c>
   122e0:	ldr	fp, [pc, #348]	; 12444 <__assert_fail@plt+0x1650>
   122e4:	b	1233c <__assert_fail@plt+0x1548>
   122e8:	ldr	r3, [r9]
   122ec:	cmp	r3, #0
   122f0:	bne	12374 <__assert_fail@plt+0x1580>
   122f4:	add	r0, r4, #168	; 0xa8
   122f8:	bl	13154 <__assert_fail@plt+0x2360>
   122fc:	ldr	r3, [r8]
   12300:	cmp	r3, #0
   12304:	bne	123ac <__assert_fail@plt+0x15b8>
   12308:	ldr	r3, [fp]
   1230c:	cmp	r3, #0
   12310:	beq	12324 <__assert_fail@plt+0x1530>
   12314:	ldr	r3, [r4, #80]	; 0x50
   12318:	and	r3, r3, #61440	; 0xf000
   1231c:	cmp	r3, #16384	; 0x4000
   12320:	beq	12424 <__assert_fail@plt+0x1630>
   12324:	ldr	r1, [r6]
   12328:	mov	r0, #10
   1232c:	bl	10d58 <putc@plt>
   12330:	ldr	r4, [r4, #8]
   12334:	cmp	r4, #0
   12338:	beq	123e0 <__assert_fail@plt+0x15ec>
   1233c:	ldr	r3, [r4, #16]
   12340:	cmp	r3, #1
   12344:	beq	12330 <__assert_fail@plt+0x153c>
   12348:	ldr	r3, [sl]
   1234c:	ldr	r7, [r5, #20]
   12350:	cmp	r3, #0
   12354:	beq	122e8 <__assert_fail@plt+0x14f4>
   12358:	ldr	r2, [r4, #160]	; 0xa0
   1235c:	ldr	r1, [r5, #32]
   12360:	ldr	r0, [pc, #224]	; 12448 <__assert_fail@plt+0x1654>
   12364:	bl	10bc0 <printf@plt>
   12368:	ldr	r3, [r9]
   1236c:	cmp	r3, #0
   12370:	beq	122f4 <__assert_fail@plt+0x1500>
   12374:	ldr	r3, [pc, #208]	; 1244c <__assert_fail@plt+0x1658>
   12378:	ldrd	r0, [r4, #128]	; 0x80
   1237c:	ldr	r2, [r3]
   12380:	sub	ip, r2, #1
   12384:	adds	r0, r0, ip
   12388:	asr	r3, r2, #31
   1238c:	adc	r1, r1, ip, asr #31
   12390:	bl	198e8 <__assert_fail@plt+0x8af4>
   12394:	mov	r2, r0
   12398:	mov	r3, r1
   1239c:	ldr	r0, [pc, #172]	; 12450 <__assert_fail@plt+0x165c>
   123a0:	mov	r1, r7
   123a4:	bl	10bc0 <printf@plt>
   123a8:	b	122f4 <__assert_fail@plt+0x1500>
   123ac:	ldr	r2, [r4, #80]	; 0x50
   123b0:	and	r3, r2, #61440	; 0xf000
   123b4:	cmp	r3, #16384	; 0x4000
   123b8:	beq	12424 <__assert_fail@plt+0x1630>
   123bc:	bls	123e4 <__assert_fail@plt+0x15f0>
   123c0:	cmp	r3, #40960	; 0xa000
   123c4:	beq	12414 <__assert_fail@plt+0x1620>
   123c8:	cmp	r3, #49152	; 0xc000
   123cc:	bne	123fc <__assert_fail@plt+0x1608>
   123d0:	ldr	r1, [r6]
   123d4:	mov	r0, #61	; 0x3d
   123d8:	bl	10d58 <putc@plt>
   123dc:	b	12324 <__assert_fail@plt+0x1530>
   123e0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123e4:	cmp	r3, #4096	; 0x1000
   123e8:	bne	123fc <__assert_fail@plt+0x1608>
   123ec:	ldr	r1, [r6]
   123f0:	mov	r0, #124	; 0x7c
   123f4:	bl	10d58 <putc@plt>
   123f8:	b	12324 <__assert_fail@plt+0x1530>
   123fc:	tst	r2, #73	; 0x49
   12400:	beq	12324 <__assert_fail@plt+0x1530>
   12404:	ldr	r1, [r6]
   12408:	mov	r0, #42	; 0x2a
   1240c:	bl	10d58 <putc@plt>
   12410:	b	12324 <__assert_fail@plt+0x1530>
   12414:	ldr	r1, [r6]
   12418:	mov	r0, #64	; 0x40
   1241c:	bl	10d58 <putc@plt>
   12420:	b	12324 <__assert_fail@plt+0x1530>
   12424:	ldr	r1, [r6]
   12428:	mov	r0, #47	; 0x2f
   1242c:	bl	10d58 <putc@plt>
   12430:	b	12324 <__assert_fail@plt+0x1530>
   12434:	andeq	fp, r2, r0, ror r1
   12438:	andeq	fp, r2, r8, asr r1
   1243c:	andeq	fp, r2, r0, lsl #3
   12440:	andeq	fp, r2, r4, lsl r1
   12444:	muleq	r2, r0, r1
   12448:	andeq	r9, r1, r0, asr ip
   1244c:	andeq	fp, r2, r8, lsr #3
   12450:	andeq	r9, r1, r8, asr ip
   12454:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12458:	mov	r5, r0
   1245c:	ldr	r4, [r0]
   12460:	sub	sp, sp, #44	; 0x2c
   12464:	ldr	r3, [r4, #48]	; 0x30
   12468:	cmp	r3, #0
   1246c:	beq	12490 <__assert_fail@plt+0x169c>
   12470:	ldr	r3, [pc, #780]	; 12784 <__assert_fail@plt+0x1990>
   12474:	ldr	r3, [r3]
   12478:	cmp	r3, #0
   1247c:	bne	126cc <__assert_fail@plt+0x18d8>
   12480:	ldr	r3, [pc, #768]	; 12788 <__assert_fail@plt+0x1994>
   12484:	ldr	r3, [r3]
   12488:	cmp	r3, #0
   1248c:	bne	126cc <__assert_fail@plt+0x18d8>
   12490:	ldr	fp, [pc, #756]	; 1278c <__assert_fail@plt+0x1998>
   12494:	ldr	sl, [pc, #748]	; 12788 <__assert_fail@plt+0x1994>
   12498:	ldr	r9, [pc, #752]	; 12790 <__assert_fail@plt+0x199c>
   1249c:	ldr	r8, [pc, #752]	; 12794 <__assert_fail@plt+0x19a0>
   124a0:	ldr	r7, [pc, #752]	; 12798 <__assert_fail@plt+0x19a4>
   124a4:	b	12538 <__assert_fail@plt+0x1744>
   124a8:	ldrd	r0, [r4, #112]	; 0x70
   124ac:	ldr	r3, [r5, #40]	; 0x28
   124b0:	ldr	r2, [pc, #740]	; 1279c <__assert_fail@plt+0x19a8>
   124b4:	strd	r0, [sp]
   124b8:	rsb	r1, r3, #8
   124bc:	ldr	r0, [pc, #732]	; 127a0 <__assert_fail@plt+0x19ac>
   124c0:	bl	10bc0 <printf@plt>
   124c4:	ldr	r3, [r8]
   124c8:	cmp	r3, #0
   124cc:	bne	125e0 <__assert_fail@plt+0x17ec>
   124d0:	ldr	r3, [pc, #716]	; 127a4 <__assert_fail@plt+0x19b0>
   124d4:	ldr	r3, [r3]
   124d8:	cmp	r3, #0
   124dc:	ldrne	r0, [r4, #152]	; 0x98
   124e0:	ldreq	r0, [r4, #144]	; 0x90
   124e4:	bl	11f50 <__assert_fail@plt+0x115c>
   124e8:	add	r0, r4, #168	; 0xa8
   124ec:	bl	13154 <__assert_fail@plt+0x2360>
   124f0:	ldr	r3, [r7]
   124f4:	cmp	r3, #0
   124f8:	bne	1268c <__assert_fail@plt+0x1898>
   124fc:	ldr	r3, [pc, #676]	; 127a8 <__assert_fail@plt+0x19b4>
   12500:	ldr	r3, [r3]
   12504:	cmp	r3, #0
   12508:	ldr	r3, [r4, #80]	; 0x50
   1250c:	bne	125ec <__assert_fail@plt+0x17f8>
   12510:	ldr	r6, [pc, #660]	; 127ac <__assert_fail@plt+0x19b8>
   12514:	and	r3, r3, #61440	; 0xf000
   12518:	cmp	r3, #40960	; 0xa000
   1251c:	beq	12604 <__assert_fail@plt+0x1810>
   12520:	ldr	r1, [r6]
   12524:	mov	r0, #10
   12528:	bl	10d58 <putc@plt>
   1252c:	ldr	r4, [r4, #8]
   12530:	cmp	r4, #0
   12534:	beq	126fc <__assert_fail@plt+0x1908>
   12538:	ldr	r3, [r4, #16]
   1253c:	cmp	r3, #1
   12540:	beq	1252c <__assert_fail@plt+0x1738>
   12544:	ldr	r3, [fp]
   12548:	cmp	r3, #0
   1254c:	bne	12678 <__assert_fail@plt+0x1884>
   12550:	ldr	r3, [sl]
   12554:	cmp	r3, #0
   12558:	bne	12640 <__assert_fail@plt+0x184c>
   1255c:	add	r1, sp, #20
   12560:	ldr	r0, [r4, #80]	; 0x50
   12564:	bl	13468 <__assert_fail@plt+0x2674>
   12568:	ldr	r6, [r4, #20]
   1256c:	ldr	r1, [r5, #28]
   12570:	ldr	r3, [r4, #84]	; 0x54
   12574:	ldr	r2, [r6, #4]
   12578:	str	r1, [sp, #8]
   1257c:	str	r2, [sp, #12]
   12580:	ldr	r0, [r5, #44]	; 0x2c
   12584:	ldr	ip, [r6]
   12588:	ldr	r2, [r5, #36]	; 0x24
   1258c:	add	r1, sp, #20
   12590:	stm	sp, {r0, ip}
   12594:	ldr	r0, [pc, #532]	; 127b0 <__assert_fail@plt+0x19bc>
   12598:	bl	10bc0 <printf@plt>
   1259c:	ldr	r3, [r9]
   125a0:	cmp	r3, #0
   125a4:	bne	1262c <__assert_fail@plt+0x1838>
   125a8:	ldr	r3, [r4, #80]	; 0x50
   125ac:	and	r3, r3, #45056	; 0xb000
   125b0:	cmp	r3, #8192	; 0x2000
   125b4:	beq	12610 <__assert_fail@plt+0x181c>
   125b8:	ldr	r3, [r5, #8]
   125bc:	cmp	r3, #0
   125c0:	bne	124a8 <__assert_fail@plt+0x16b4>
   125c4:	ldrd	r2, [r4, #112]	; 0x70
   125c8:	ldr	r1, [r5, #40]	; 0x28
   125cc:	ldr	r0, [pc, #480]	; 127b4 <__assert_fail@plt+0x19c0>
   125d0:	bl	10bc0 <printf@plt>
   125d4:	ldr	r3, [r8]
   125d8:	cmp	r3, #0
   125dc:	beq	124d0 <__assert_fail@plt+0x16dc>
   125e0:	ldr	r0, [r4, #136]	; 0x88
   125e4:	bl	11f50 <__assert_fail@plt+0x115c>
   125e8:	b	124e8 <__assert_fail@plt+0x16f4>
   125ec:	and	r3, r3, #61440	; 0xf000
   125f0:	cmp	r3, #16384	; 0x4000
   125f4:	beq	12768 <__assert_fail@plt+0x1974>
   125f8:	cmp	r3, #40960	; 0xa000
   125fc:	ldr	r6, [pc, #424]	; 127ac <__assert_fail@plt+0x19b8>
   12600:	bne	12520 <__assert_fail@plt+0x172c>
   12604:	mov	r0, r4
   12608:	bl	12034 <__assert_fail@plt+0x1240>
   1260c:	b	12520 <__assert_fail@plt+0x172c>
   12610:	ldr	r2, [r4, #96]	; 0x60
   12614:	ldr	r0, [pc, #412]	; 127b8 <__assert_fail@plt+0x19c4>
   12618:	lsr	r1, r2, #8
   1261c:	uxtb	r2, r2
   12620:	uxtb	r1, r1
   12624:	bl	10bc0 <printf@plt>
   12628:	b	124c4 <__assert_fail@plt+0x16d0>
   1262c:	ldr	r2, [r6, #8]
   12630:	ldr	r1, [r5, #24]
   12634:	ldr	r0, [pc, #384]	; 127bc <__assert_fail@plt+0x19c8>
   12638:	bl	10bc0 <printf@plt>
   1263c:	b	125a8 <__assert_fail@plt+0x17b4>
   12640:	ldr	r3, [pc, #376]	; 127c0 <__assert_fail@plt+0x19cc>
   12644:	ldrd	r0, [r4, #128]	; 0x80
   12648:	ldr	r2, [r3]
   1264c:	sub	r3, r2, #1
   12650:	adds	r0, r0, r3
   12654:	adc	r1, r1, r3, asr #31
   12658:	asr	r3, r2, #31
   1265c:	bl	198e8 <__assert_fail@plt+0x8af4>
   12660:	mov	r2, r0
   12664:	mov	r3, r1
   12668:	ldr	r0, [pc, #324]	; 127b4 <__assert_fail@plt+0x19c0>
   1266c:	ldr	r1, [r5, #20]
   12670:	bl	10bc0 <printf@plt>
   12674:	b	1255c <__assert_fail@plt+0x1768>
   12678:	ldr	r2, [r4, #160]	; 0xa0
   1267c:	ldr	r1, [r5, #32]
   12680:	ldr	r0, [pc, #316]	; 127c4 <__assert_fail@plt+0x19d0>
   12684:	bl	10bc0 <printf@plt>
   12688:	b	12550 <__assert_fail@plt+0x175c>
   1268c:	ldr	r2, [r4, #80]	; 0x50
   12690:	and	r3, r2, #61440	; 0xf000
   12694:	cmp	r3, #16384	; 0x4000
   12698:	beq	12768 <__assert_fail@plt+0x1974>
   1269c:	bls	12704 <__assert_fail@plt+0x1910>
   126a0:	cmp	r3, #40960	; 0xa000
   126a4:	beq	12728 <__assert_fail@plt+0x1934>
   126a8:	cmp	r3, #49152	; 0xc000
   126ac:	bne	12744 <__assert_fail@plt+0x1950>
   126b0:	ldr	r6, [pc, #244]	; 127ac <__assert_fail@plt+0x19b8>
   126b4:	mov	r0, #61	; 0x3d
   126b8:	ldr	r1, [r6]
   126bc:	bl	10d58 <putc@plt>
   126c0:	ldr	r3, [r4, #80]	; 0x50
   126c4:	and	r3, r3, #61440	; 0xf000
   126c8:	b	12518 <__assert_fail@plt+0x1724>
   126cc:	ldr	r2, [pc, #236]	; 127c0 <__assert_fail@plt+0x19cc>
   126d0:	ldr	r3, [r5, #4]
   126d4:	ldr	r1, [r2]
   126d8:	sub	r0, r1, #1
   126dc:	add	r0, r0, r3
   126e0:	bl	1949c <__assert_fail@plt+0x86a8>
   126e4:	mov	r1, r0
   126e8:	ldr	r0, [pc, #216]	; 127c8 <__assert_fail@plt+0x19d4>
   126ec:	bl	10bc0 <printf@plt>
   126f0:	ldr	r4, [r5]
   126f4:	cmp	r4, #0
   126f8:	bne	12490 <__assert_fail@plt+0x169c>
   126fc:	add	sp, sp, #44	; 0x2c
   12700:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12704:	cmp	r3, #4096	; 0x1000
   12708:	bne	12744 <__assert_fail@plt+0x1950>
   1270c:	ldr	r6, [pc, #152]	; 127ac <__assert_fail@plt+0x19b8>
   12710:	mov	r0, #124	; 0x7c
   12714:	ldr	r1, [r6]
   12718:	bl	10d58 <putc@plt>
   1271c:	ldr	r3, [r4, #80]	; 0x50
   12720:	and	r3, r3, #61440	; 0xf000
   12724:	b	12518 <__assert_fail@plt+0x1724>
   12728:	ldr	r6, [pc, #124]	; 127ac <__assert_fail@plt+0x19b8>
   1272c:	mov	r0, #64	; 0x40
   12730:	ldr	r1, [r6]
   12734:	bl	10d58 <putc@plt>
   12738:	ldr	r3, [r4, #80]	; 0x50
   1273c:	and	r3, r3, #61440	; 0xf000
   12740:	b	12518 <__assert_fail@plt+0x1724>
   12744:	tst	r2, #73	; 0x49
   12748:	ldr	r6, [pc, #92]	; 127ac <__assert_fail@plt+0x19b8>
   1274c:	beq	12518 <__assert_fail@plt+0x1724>
   12750:	mov	r0, #42	; 0x2a
   12754:	ldr	r1, [r6]
   12758:	bl	10d58 <putc@plt>
   1275c:	ldr	r3, [r4, #80]	; 0x50
   12760:	and	r3, r3, #61440	; 0xf000
   12764:	b	12518 <__assert_fail@plt+0x1724>
   12768:	ldr	r6, [pc, #60]	; 127ac <__assert_fail@plt+0x19b8>
   1276c:	mov	r0, #47	; 0x2f
   12770:	ldr	r1, [r6]
   12774:	bl	10d58 <putc@plt>
   12778:	ldr	r3, [r4, #80]	; 0x50
   1277c:	and	r3, r3, #61440	; 0xf000
   12780:	b	12518 <__assert_fail@plt+0x1724>
   12784:	andeq	fp, r2, ip, lsl #3
   12788:	andeq	fp, r2, r8, asr r1
   1278c:	andeq	fp, r2, r0, ror r1
   12790:	andeq	fp, r2, r8, ror #2
   12794:	andeq	fp, r2, r8, ror r1
   12798:	andeq	fp, r2, r0, lsl #3
   1279c:	andeq	r9, r1, r0, asr lr
   127a0:	muleq	r1, r4, ip
   127a4:	andeq	fp, r2, r4, lsr #3
   127a8:	muleq	r2, r0, r1
   127ac:	andeq	fp, r2, r4, lsl r1
   127b0:	andeq	r9, r1, ip, ror #24
   127b4:	andeq	r9, r1, r8, asr ip
   127b8:	andeq	r9, r1, r8, lsl #25
   127bc:	andeq	r9, r1, r0, lsl #25
   127c0:	andeq	fp, r2, r8, lsr #3
   127c4:	andeq	r9, r1, r0, asr ip
   127c8:	andeq	r9, r1, r0, ror #24
   127cc:	ldr	r2, [pc, #1200]	; 12c84 <__assert_fail@plt+0x1e90>
   127d0:	ldr	r3, [r0, #16]
   127d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127d8:	sub	sp, sp, #44	; 0x2c
   127dc:	ldr	r2, [r2]
   127e0:	str	r0, [sp, #8]
   127e4:	cmp	r2, #0
   127e8:	movne	r1, r0
   127ec:	movne	r2, r1
   127f0:	ldrne	r2, [r2, #32]
   127f4:	addne	r2, r2, #1
   127f8:	addne	r3, r3, r2
   127fc:	ldr	r2, [pc, #1156]	; 12c88 <__assert_fail@plt+0x1e94>
   12800:	ldr	r2, [r2]
   12804:	cmp	r2, #0
   12808:	ldrne	r2, [sp, #8]
   1280c:	ldrne	r2, [r2, #20]
   12810:	addne	r2, r2, #1
   12814:	addne	r3, r3, r2
   12818:	ldr	r2, [pc, #1132]	; 12c8c <__assert_fail@plt+0x1e98>
   1281c:	ldr	r2, [r2]
   12820:	cmp	r2, #0
   12824:	bne	12a38 <__assert_fail@plt+0x1c44>
   12828:	ldr	r2, [pc, #1120]	; 12c90 <__assert_fail@plt+0x1e9c>
   1282c:	ldr	r2, [r2]
   12830:	cmp	r2, #0
   12834:	bne	12a38 <__assert_fail@plt+0x1c44>
   12838:	ldr	r2, [pc, #1108]	; 12c94 <__assert_fail@plt+0x1ea0>
   1283c:	add	r1, r3, #1
   12840:	ldr	r4, [r2]
   12844:	add	r4, r4, #1
   12848:	cmp	r4, r1, lsl #1
   1284c:	blt	12a40 <__assert_fail@plt+0x1c4c>
   12850:	mov	r0, r4
   12854:	bl	196a8 <__assert_fail@plt+0x88b4>
   12858:	mov	r1, r0
   1285c:	str	r0, [sp, #16]
   12860:	mov	r0, r4
   12864:	bl	196a8 <__assert_fail@plt+0x88b4>
   12868:	subs	r3, r0, #0
   1286c:	str	r3, [sp, #4]
   12870:	beq	12a90 <__assert_fail@plt+0x1c9c>
   12874:	ldr	r3, [sp, #8]
   12878:	ldr	r4, [pc, #1048]	; 12c98 <__assert_fail@plt+0x1ea4>
   1287c:	ldr	r1, [r3, #12]
   12880:	ldr	r3, [r4]
   12884:	cmp	r1, r3
   12888:	bgt	12a98 <__assert_fail@plt+0x1ca4>
   1288c:	ldr	r3, [sp, #8]
   12890:	ldr	r3, [r3]
   12894:	cmp	r3, #0
   12898:	beq	12c38 <__assert_fail@plt+0x1e44>
   1289c:	ldr	fp, [pc, #1016]	; 12c9c <__assert_fail@plt+0x1ea8>
   128a0:	mov	r2, #0
   128a4:	ldr	r1, [fp]
   128a8:	ldr	r0, [r3, #16]
   128ac:	cmp	r0, #1
   128b0:	strne	r3, [r1, r2, lsl #2]
   128b4:	ldr	r3, [r3, #8]
   128b8:	addne	r2, r2, #1
   128bc:	cmp	r3, #0
   128c0:	bne	128a8 <__assert_fail@plt+0x1ab4>
   128c4:	ldr	r5, [sp, #16]
   128c8:	mov	r0, r2
   128cc:	mov	r1, r5
   128d0:	mov	r4, r2
   128d4:	str	r2, [sp, #12]
   128d8:	bl	196a8 <__assert_fail@plt+0x88b4>
   128dc:	mov	r1, r5
   128e0:	str	r0, [sp, #20]
   128e4:	mov	r0, r4
   128e8:	bl	198c8 <__assert_fail@plt+0x8ad4>
   128ec:	ldr	r3, [sp, #8]
   128f0:	ldr	r3, [r3]
   128f4:	ldr	r3, [r3, #48]	; 0x30
   128f8:	cmp	r1, #0
   128fc:	ldrne	r2, [sp, #20]
   12900:	addne	r2, r2, #1
   12904:	strne	r2, [sp, #20]
   12908:	cmp	r3, #0
   1290c:	beq	12930 <__assert_fail@plt+0x1b3c>
   12910:	ldr	r3, [pc, #904]	; 12ca0 <__assert_fail@plt+0x1eac>
   12914:	ldr	r3, [r3]
   12918:	cmp	r3, #0
   1291c:	bne	12ad4 <__assert_fail@plt+0x1ce0>
   12920:	ldr	r3, [pc, #864]	; 12c88 <__assert_fail@plt+0x1e94>
   12924:	ldr	r3, [r3]
   12928:	cmp	r3, #0
   1292c:	bne	12ad4 <__assert_fail@plt+0x1ce0>
   12930:	ldr	r3, [sp, #20]
   12934:	cmp	r3, #0
   12938:	ble	12a90 <__assert_fail@plt+0x1c9c>
   1293c:	ldr	r5, [pc, #864]	; 12ca4 <__assert_fail@plt+0x1eb0>
   12940:	ldr	fp, [pc, #852]	; 12c9c <__assert_fail@plt+0x1ea8>
   12944:	lsl	r2, r3, #1
   12948:	str	r2, [sp, #36]	; 0x24
   1294c:	str	r3, [sp, #32]
   12950:	lsl	r2, r3, #2
   12954:	mov	r3, #0
   12958:	str	r2, [sp, #24]
   1295c:	str	r3, [sp, #28]
   12960:	ldr	r9, [sp, #28]
   12964:	ldr	r8, [sp, #32]
   12968:	mov	r7, #0
   1296c:	ldr	r2, [pc, #784]	; 12c84 <__assert_fail@plt+0x1e90>
   12970:	ldr	r3, [fp]
   12974:	ldr	r4, [r2]
   12978:	ldr	r2, [sp, #8]
   1297c:	cmp	r4, #0
   12980:	ldr	r6, [r3, r9]
   12984:	ldr	sl, [r2, #20]
   12988:	bne	12bbc <__assert_fail@plt+0x1dc8>
   1298c:	ldr	r3, [pc, #756]	; 12c88 <__assert_fail@plt+0x1e94>
   12990:	ldr	r3, [r3]
   12994:	cmp	r3, #0
   12998:	bne	12b80 <__assert_fail@plt+0x1d8c>
   1299c:	add	r0, r6, #168	; 0xa8
   129a0:	bl	13154 <__assert_fail@plt+0x2360>
   129a4:	ldr	r3, [pc, #736]	; 12c8c <__assert_fail@plt+0x1e98>
   129a8:	ldr	r3, [r3]
   129ac:	cmp	r3, #0
   129b0:	add	r4, r0, r4
   129b4:	bne	12b00 <__assert_fail@plt+0x1d0c>
   129b8:	ldr	r3, [pc, #720]	; 12c90 <__assert_fail@plt+0x1e9c>
   129bc:	ldr	r3, [r3]
   129c0:	cmp	r3, #0
   129c4:	beq	129d8 <__assert_fail@plt+0x1be4>
   129c8:	ldr	r3, [r6, #80]	; 0x50
   129cc:	and	r3, r3, #61440	; 0xf000
   129d0:	cmp	r3, #16384	; 0x4000
   129d4:	beq	12c08 <__assert_fail@plt+0x1e14>
   129d8:	ldr	r3, [sp, #12]
   129dc:	cmp	r3, r8
   129e0:	ble	12b44 <__assert_fail@plt+0x1d50>
   129e4:	ldr	r3, [sp, #16]
   129e8:	add	r7, r7, #1
   129ec:	cmp	r7, r3
   129f0:	beq	12b44 <__assert_fail@plt+0x1d50>
   129f4:	ldr	r3, [sp, #4]
   129f8:	cmp	r3, r4
   129fc:	addgt	sl, r3, #1
   12a00:	add	r4, r4, #1
   12a04:	movgt	r6, #32
   12a08:	ble	12a24 <__assert_fail@plt+0x1c30>
   12a0c:	add	r4, r4, #1
   12a10:	ldr	r1, [r5]
   12a14:	mov	r0, r6
   12a18:	bl	10d58 <putc@plt>
   12a1c:	cmp	r4, sl
   12a20:	bne	12a0c <__assert_fail@plt+0x1c18>
   12a24:	ldr	r3, [sp, #20]
   12a28:	add	r8, r8, r3
   12a2c:	ldr	r3, [sp, #24]
   12a30:	add	r9, r9, r3
   12a34:	b	1296c <__assert_fail@plt+0x1b78>
   12a38:	add	r3, r3, #1
   12a3c:	b	12838 <__assert_fail@plt+0x1a44>
   12a40:	ldr	r3, [sp, #8]
   12a44:	ldr	r4, [r3]
   12a48:	cmp	r4, #0
   12a4c:	beq	12a90 <__assert_fail@plt+0x1c9c>
   12a50:	ldr	r6, [pc, #588]	; 12ca4 <__assert_fail@plt+0x1eb0>
   12a54:	mov	r5, #10
   12a58:	mov	r7, r3
   12a5c:	ldr	r3, [r4, #16]
   12a60:	mov	r0, r4
   12a64:	cmp	r3, #1
   12a68:	beq	12a84 <__assert_fail@plt+0x1c90>
   12a6c:	ldr	r1, [r7, #32]
   12a70:	ldr	r2, [r7, #20]
   12a74:	bl	12128 <__assert_fail@plt+0x1334>
   12a78:	ldr	r1, [r6]
   12a7c:	mov	r0, r5
   12a80:	bl	10d58 <putc@plt>
   12a84:	ldr	r4, [r4, #8]
   12a88:	cmp	r4, #0
   12a8c:	bne	12a5c <__assert_fail@plt+0x1c68>
   12a90:	add	sp, sp, #44	; 0x2c
   12a94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a98:	ldr	fp, [pc, #508]	; 12c9c <__assert_fail@plt+0x1ea8>
   12a9c:	lsl	r1, r1, #2
   12aa0:	ldr	r0, [fp]
   12aa4:	bl	19138 <__assert_fail@plt+0x8344>
   12aa8:	cmp	r0, #0
   12aac:	beq	12c50 <__assert_fail@plt+0x1e5c>
   12ab0:	ldr	r3, [sp, #8]
   12ab4:	str	r0, [fp]
   12ab8:	ldr	r3, [r3, #12]
   12abc:	str	r3, [r4]
   12ac0:	ldr	r3, [sp, #8]
   12ac4:	ldr	r3, [r3]
   12ac8:	cmp	r3, #0
   12acc:	bne	1289c <__assert_fail@plt+0x1aa8>
   12ad0:	b	12c38 <__assert_fail@plt+0x1e44>
   12ad4:	ldr	r2, [pc, #460]	; 12ca8 <__assert_fail@plt+0x1eb4>
   12ad8:	ldr	r3, [sp, #8]
   12adc:	ldr	r1, [r2]
   12ae0:	ldr	r3, [r3, #4]
   12ae4:	sub	r0, r1, #1
   12ae8:	add	r0, r0, r3
   12aec:	bl	1949c <__assert_fail@plt+0x86a8>
   12af0:	mov	r1, r0
   12af4:	ldr	r0, [pc, #432]	; 12cac <__assert_fail@plt+0x1eb8>
   12af8:	bl	10bc0 <printf@plt>
   12afc:	b	12930 <__assert_fail@plt+0x1b3c>
   12b00:	ldr	r3, [r6, #80]	; 0x50
   12b04:	and	r2, r3, #61440	; 0xf000
   12b08:	cmp	r2, #16384	; 0x4000
   12b0c:	beq	12c08 <__assert_fail@plt+0x1e14>
   12b10:	bls	12bd8 <__assert_fail@plt+0x1de4>
   12b14:	cmp	r2, #40960	; 0xa000
   12b18:	beq	12bf4 <__assert_fail@plt+0x1e00>
   12b1c:	cmp	r2, #49152	; 0xc000
   12b20:	bne	12c1c <__assert_fail@plt+0x1e28>
   12b24:	ldr	r1, [r5]
   12b28:	mov	r0, #61	; 0x3d
   12b2c:	bl	10d58 <putc@plt>
   12b30:	mov	r3, #1
   12b34:	add	r4, r4, r3
   12b38:	ldr	r3, [sp, #12]
   12b3c:	cmp	r3, r8
   12b40:	bgt	129e4 <__assert_fail@plt+0x1bf0>
   12b44:	ldr	r3, [sp, #32]
   12b48:	ldr	r1, [r5]
   12b4c:	add	r3, r3, #1
   12b50:	mov	r0, #10
   12b54:	mov	r4, r3
   12b58:	str	r3, [sp, #32]
   12b5c:	bl	10d58 <putc@plt>
   12b60:	ldr	r3, [sp, #28]
   12b64:	ldr	r2, [sp, #36]	; 0x24
   12b68:	add	r3, r3, #4
   12b6c:	cmp	r2, r4
   12b70:	str	r3, [sp, #28]
   12b74:	bne	12960 <__assert_fail@plt+0x1b6c>
   12b78:	add	sp, sp, #44	; 0x2c
   12b7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b80:	ldr	r3, [pc, #288]	; 12ca8 <__assert_fail@plt+0x1eb4>
   12b84:	ldrd	r0, [r6, #128]	; 0x80
   12b88:	ldr	r2, [r3]
   12b8c:	sub	ip, r2, #1
   12b90:	adds	r0, r0, ip
   12b94:	asr	r3, r2, #31
   12b98:	adc	r1, r1, ip, asr #31
   12b9c:	bl	198e8 <__assert_fail@plt+0x8af4>
   12ba0:	mov	r2, r0
   12ba4:	mov	r3, r1
   12ba8:	ldr	r0, [pc, #256]	; 12cb0 <__assert_fail@plt+0x1ebc>
   12bac:	mov	r1, sl
   12bb0:	bl	10bc0 <printf@plt>
   12bb4:	add	r4, r4, r0
   12bb8:	b	1299c <__assert_fail@plt+0x1ba8>
   12bbc:	mov	r3, r2
   12bc0:	ldr	r0, [pc, #236]	; 12cb4 <__assert_fail@plt+0x1ec0>
   12bc4:	ldr	r2, [r6, #160]	; 0xa0
   12bc8:	ldr	r1, [r3, #32]
   12bcc:	bl	10bc0 <printf@plt>
   12bd0:	mov	r4, r0
   12bd4:	b	1298c <__assert_fail@plt+0x1b98>
   12bd8:	cmp	r2, #4096	; 0x1000
   12bdc:	bne	12c1c <__assert_fail@plt+0x1e28>
   12be0:	ldr	r1, [r5]
   12be4:	mov	r0, #124	; 0x7c
   12be8:	bl	10d58 <putc@plt>
   12bec:	mov	r3, #1
   12bf0:	b	12b34 <__assert_fail@plt+0x1d40>
   12bf4:	ldr	r1, [r5]
   12bf8:	mov	r0, #64	; 0x40
   12bfc:	bl	10d58 <putc@plt>
   12c00:	mov	r3, #1
   12c04:	b	12b34 <__assert_fail@plt+0x1d40>
   12c08:	ldr	r1, [r5]
   12c0c:	mov	r0, #47	; 0x2f
   12c10:	bl	10d58 <putc@plt>
   12c14:	mov	r3, #1
   12c18:	b	12b34 <__assert_fail@plt+0x1d40>
   12c1c:	ands	r3, r3, #73	; 0x49
   12c20:	beq	12b34 <__assert_fail@plt+0x1d40>
   12c24:	ldr	r1, [r5]
   12c28:	mov	r0, #42	; 0x2a
   12c2c:	bl	10d58 <putc@plt>
   12c30:	mov	r3, #1
   12c34:	b	12b34 <__assert_fail@plt+0x1d40>
   12c38:	ldr	r2, [r3, #48]	; 0x30
   12c3c:	cmp	r2, #0
   12c40:	beq	12a90 <__assert_fail@plt+0x1c9c>
   12c44:	str	r3, [sp, #12]
   12c48:	str	r3, [sp, #20]
   12c4c:	b	12910 <__assert_fail@plt+0x1b1c>
   12c50:	ldr	r3, [pc, #96]	; 12cb8 <__assert_fail@plt+0x1ec4>
   12c54:	ldr	r4, [r3]
   12c58:	bl	10cf8 <__errno_location@plt>
   12c5c:	ldr	r0, [r0]
   12c60:	bl	10ca4 <strerror@plt>
   12c64:	ldr	r1, [pc, #80]	; 12cbc <__assert_fail@plt+0x1ec8>
   12c68:	mov	r2, r0
   12c6c:	mov	r0, r4
   12c70:	bl	10cec <fprintf@plt>
   12c74:	ldr	r0, [sp, #8]
   12c78:	add	sp, sp, #44	; 0x2c
   12c7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c80:	b	122bc <__assert_fail@plt+0x14c8>
   12c84:	andeq	fp, r2, r0, ror r1
   12c88:	andeq	fp, r2, r8, asr r1
   12c8c:	andeq	fp, r2, r0, lsl #3
   12c90:	muleq	r2, r0, r1
   12c94:	strdeq	fp, [r2], -r0
   12c98:	andeq	fp, r2, r0, lsl #2
   12c9c:	andeq	fp, r2, ip, lsr #2
   12ca0:	andeq	fp, r2, ip, lsl #3
   12ca4:	andeq	fp, r2, r4, lsl r1
   12ca8:	andeq	fp, r2, r8, lsr #3
   12cac:	andeq	r9, r1, r0, ror #24
   12cb0:	andeq	r9, r1, r8, asr ip
   12cb4:	andeq	r9, r1, r0, asr ip
   12cb8:	andeq	fp, r2, r0, lsl r1
   12cbc:	andeq	r9, r1, r0, lsr #25
   12cc0:	ldr	r3, [pc, #496]	; 12eb8 <__assert_fail@plt+0x20c4>
   12cc4:	ldr	r1, [r0, #16]
   12cc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ccc:	mov	r9, r0
   12cd0:	ldr	r3, [r3]
   12cd4:	sub	sp, sp, #12
   12cd8:	cmp	r3, #0
   12cdc:	ldrne	r3, [r0, #32]
   12ce0:	addne	r3, r3, #1
   12ce4:	addne	r1, r1, r3
   12ce8:	ldr	r3, [pc, #460]	; 12ebc <__assert_fail@plt+0x20c8>
   12cec:	ldr	r5, [r3]
   12cf0:	cmp	r5, #0
   12cf4:	ldrne	r3, [r0, #20]
   12cf8:	addne	r3, r3, #1
   12cfc:	addne	r1, r1, r3
   12d00:	ldr	r3, [pc, #440]	; 12ec0 <__assert_fail@plt+0x20cc>
   12d04:	ldr	r3, [r3]
   12d08:	cmp	r3, #0
   12d0c:	bne	12df8 <__assert_fail@plt+0x2004>
   12d10:	ldr	r3, [pc, #428]	; 12ec4 <__assert_fail@plt+0x20d0>
   12d14:	ldr	r3, [r3]
   12d18:	cmp	r3, #0
   12d1c:	bne	12df8 <__assert_fail@plt+0x2004>
   12d20:	ldr	r3, [pc, #416]	; 12ec8 <__assert_fail@plt+0x20d4>
   12d24:	add	r1, r1, #1
   12d28:	ldr	r4, [r3]
   12d2c:	add	r4, r4, #1
   12d30:	cmp	r4, r1, lsl #1
   12d34:	blt	12e00 <__assert_fail@plt+0x200c>
   12d38:	mov	r0, r4
   12d3c:	bl	196a8 <__assert_fail@plt+0x88b4>
   12d40:	mov	r1, r0
   12d44:	mov	sl, r0
   12d48:	mov	r0, r4
   12d4c:	bl	196a8 <__assert_fail@plt+0x88b4>
   12d50:	subs	r3, r0, #0
   12d54:	str	r3, [sp, #4]
   12d58:	beq	12e48 <__assert_fail@plt+0x2054>
   12d5c:	ldr	r4, [r9]
   12d60:	ldr	r3, [r4, #48]	; 0x30
   12d64:	cmp	r3, #0
   12d68:	bne	12e50 <__assert_fail@plt+0x205c>
   12d6c:	ldr	r3, [sp, #4]
   12d70:	ldr	r5, [pc, #340]	; 12ecc <__assert_fail@plt+0x20d8>
   12d74:	mov	r8, #0
   12d78:	add	r7, r3, #1
   12d7c:	mov	r6, #32
   12d80:	ldr	r3, [r4, #16]
   12d84:	cmp	r3, #1
   12d88:	beq	12dd8 <__assert_fail@plt+0x1fe4>
   12d8c:	cmp	r8, sl
   12d90:	addlt	r8, r8, #1
   12d94:	bge	12ea4 <__assert_fail@plt+0x20b0>
   12d98:	ldr	r2, [r9, #20]
   12d9c:	ldr	r1, [r9, #32]
   12da0:	mov	r0, r4
   12da4:	bl	12128 <__assert_fail@plt+0x1334>
   12da8:	cmp	sl, r8
   12dac:	ble	12dd8 <__assert_fail@plt+0x1fe4>
   12db0:	ldr	r3, [sp, #4]
   12db4:	add	fp, r0, #1
   12db8:	cmp	r0, r3
   12dbc:	bge	12dd8 <__assert_fail@plt+0x1fe4>
   12dc0:	add	fp, fp, #1
   12dc4:	ldr	r1, [r5]
   12dc8:	mov	r0, r6
   12dcc:	bl	10d58 <putc@plt>
   12dd0:	cmp	fp, r7
   12dd4:	bne	12dc0 <__assert_fail@plt+0x1fcc>
   12dd8:	ldr	r4, [r4, #8]
   12ddc:	cmp	r4, #0
   12de0:	bne	12d80 <__assert_fail@plt+0x1f8c>
   12de4:	ldr	r1, [r5]
   12de8:	mov	r0, #10
   12dec:	add	sp, sp, #12
   12df0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12df4:	b	10d58 <putc@plt>
   12df8:	add	r1, r1, #1
   12dfc:	b	12d20 <__assert_fail@plt+0x1f2c>
   12e00:	ldr	r4, [r9]
   12e04:	cmp	r4, #0
   12e08:	beq	12e48 <__assert_fail@plt+0x2054>
   12e0c:	ldr	r6, [pc, #184]	; 12ecc <__assert_fail@plt+0x20d8>
   12e10:	mov	r5, #10
   12e14:	ldr	r3, [r4, #16]
   12e18:	mov	r0, r4
   12e1c:	cmp	r3, #1
   12e20:	beq	12e3c <__assert_fail@plt+0x2048>
   12e24:	ldr	r1, [r9, #32]
   12e28:	ldr	r2, [r9, #20]
   12e2c:	bl	12128 <__assert_fail@plt+0x1334>
   12e30:	ldr	r1, [r6]
   12e34:	mov	r0, r5
   12e38:	bl	10d58 <putc@plt>
   12e3c:	ldr	r4, [r4, #8]
   12e40:	cmp	r4, #0
   12e44:	bne	12e14 <__assert_fail@plt+0x2020>
   12e48:	add	sp, sp, #12
   12e4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e50:	ldr	r3, [pc, #120]	; 12ed0 <__assert_fail@plt+0x20dc>
   12e54:	ldr	r3, [r3]
   12e58:	cmp	r3, #0
   12e5c:	bne	12e68 <__assert_fail@plt+0x2074>
   12e60:	cmp	r5, #0
   12e64:	beq	12d6c <__assert_fail@plt+0x1f78>
   12e68:	ldr	r2, [pc, #100]	; 12ed4 <__assert_fail@plt+0x20e0>
   12e6c:	ldr	r3, [r9, #4]
   12e70:	ldr	r1, [r2]
   12e74:	sub	r0, r1, #1
   12e78:	add	r0, r0, r3
   12e7c:	bl	1949c <__assert_fail@plt+0x86a8>
   12e80:	mov	r3, #0
   12e84:	mov	r2, r0
   12e88:	ldr	r0, [pc, #72]	; 12ed8 <__assert_fail@plt+0x20e4>
   12e8c:	bl	10bc0 <printf@plt>
   12e90:	ldr	r4, [r9]
   12e94:	cmp	r4, #0
   12e98:	bne	12d6c <__assert_fail@plt+0x1f78>
   12e9c:	ldr	r5, [pc, #40]	; 12ecc <__assert_fail@plt+0x20d8>
   12ea0:	b	12de4 <__assert_fail@plt+0x1ff0>
   12ea4:	ldr	r1, [r5]
   12ea8:	mov	r0, #10
   12eac:	bl	10d58 <putc@plt>
   12eb0:	mov	r8, #1
   12eb4:	b	12d98 <__assert_fail@plt+0x1fa4>
   12eb8:	andeq	fp, r2, r0, ror r1
   12ebc:	andeq	fp, r2, r8, asr r1
   12ec0:	andeq	fp, r2, r0, lsl #3
   12ec4:	muleq	r2, r0, r1
   12ec8:	strdeq	fp, [r2], -r0
   12ecc:	andeq	fp, r2, r4, lsl r1
   12ed0:	andeq	fp, r2, ip, lsl #3
   12ed4:	andeq	fp, r2, r8, lsr #3
   12ed8:			; <UNDEFINED> instruction: 0x00019cb0
   12edc:	ldr	r3, [pc, #588]	; 13130 <__assert_fail@plt+0x233c>
   12ee0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ee4:	sub	sp, sp, #12
   12ee8:	ldr	r3, [r3]
   12eec:	ldr	sl, [pc, #576]	; 13134 <__assert_fail@plt+0x2340>
   12ef0:	cmp	r3, #0
   12ef4:	str	r3, [sp, #4]
   12ef8:	ldrne	r3, [r0, #32]
   12efc:	ldr	r9, [pc, #564]	; 13138 <__assert_fail@plt+0x2344>
   12f00:	addne	r3, r3, #1
   12f04:	strne	r3, [sp, #4]
   12f08:	ldr	r3, [sl]
   12f0c:	ldr	r4, [r0]
   12f10:	cmp	r3, #0
   12f14:	ldrne	r3, [r0, #20]
   12f18:	ldrne	r2, [sp, #4]
   12f1c:	addne	r3, r3, #1
   12f20:	addne	r3, r2, r3
   12f24:	strne	r3, [sp, #4]
   12f28:	ldr	r3, [r9]
   12f2c:	cmp	r3, #0
   12f30:	ldrne	r3, [sp, #4]
   12f34:	addne	r3, r3, #1
   12f38:	strne	r3, [sp, #4]
   12f3c:	cmp	r4, #0
   12f40:	beq	130b8 <__assert_fail@plt+0x22c4>
   12f44:	mov	r8, r0
   12f48:	ldr	r7, [pc, #492]	; 1313c <__assert_fail@plt+0x2348>
   12f4c:	ldr	fp, [pc, #492]	; 13140 <__assert_fail@plt+0x234c>
   12f50:	mov	r6, #0
   12f54:	b	12fa8 <__assert_fail@plt+0x21b4>
   12f58:	ldr	r3, [sl]
   12f5c:	cmp	r3, #0
   12f60:	bne	13034 <__assert_fail@plt+0x2240>
   12f64:	add	r0, r4, #168	; 0xa8
   12f68:	bl	13154 <__assert_fail@plt+0x2360>
   12f6c:	ldr	r3, [r9]
   12f70:	cmp	r3, #0
   12f74:	add	r5, r0, r5
   12f78:	bne	13070 <__assert_fail@plt+0x227c>
   12f7c:	ldr	r3, [fp]
   12f80:	cmp	r3, #0
   12f84:	beq	12f98 <__assert_fail@plt+0x21a4>
   12f88:	ldr	r3, [r4, #80]	; 0x50
   12f8c:	and	r3, r3, #61440	; 0xf000
   12f90:	cmp	r3, #16384	; 0x4000
   12f94:	beq	13100 <__assert_fail@plt+0x230c>
   12f98:	add	r6, r6, r5
   12f9c:	ldr	r4, [r4, #8]
   12fa0:	cmp	r4, #0
   12fa4:	beq	130bc <__assert_fail@plt+0x22c8>
   12fa8:	ldr	r3, [r4, #16]
   12fac:	cmp	r3, #1
   12fb0:	beq	12f9c <__assert_fail@plt+0x21a8>
   12fb4:	cmp	r6, #0
   12fb8:	ble	12ffc <__assert_fail@plt+0x2208>
   12fbc:	ldr	r1, [r7]
   12fc0:	mov	r0, #44	; 0x2c
   12fc4:	bl	10d58 <putc@plt>
   12fc8:	ldr	r2, [pc, #372]	; 13144 <__assert_fail@plt+0x2350>
   12fcc:	ldr	r3, [sp, #4]
   12fd0:	ldr	r1, [r4, #52]	; 0x34
   12fd4:	add	r6, r6, #2
   12fd8:	add	r3, r3, r6
   12fdc:	ldr	r2, [r2]
   12fe0:	add	r3, r3, r1
   12fe4:	cmp	r3, r2
   12fe8:	ldr	r1, [r7]
   12fec:	bcc	130ac <__assert_fail@plt+0x22b8>
   12ff0:	mov	r0, #10
   12ff4:	bl	10d58 <putc@plt>
   12ff8:	mov	r6, #0
   12ffc:	ldr	r3, [pc, #300]	; 13130 <__assert_fail@plt+0x233c>
   13000:	ldr	r5, [r3]
   13004:	ldr	r3, [r8, #20]
   13008:	cmp	r5, #0
   1300c:	str	r3, [sp]
   13010:	beq	12f58 <__assert_fail@plt+0x2164>
   13014:	ldr	r2, [r4, #160]	; 0xa0
   13018:	ldr	r1, [r8, #32]
   1301c:	ldr	r0, [pc, #292]	; 13148 <__assert_fail@plt+0x2354>
   13020:	bl	10bc0 <printf@plt>
   13024:	ldr	r3, [sl]
   13028:	cmp	r3, #0
   1302c:	mov	r5, r0
   13030:	beq	12f64 <__assert_fail@plt+0x2170>
   13034:	ldr	r3, [pc, #272]	; 1314c <__assert_fail@plt+0x2358>
   13038:	ldrd	r0, [r4, #128]	; 0x80
   1303c:	ldr	r2, [r3]
   13040:	sub	ip, r2, #1
   13044:	adds	r0, r0, ip
   13048:	asr	r3, r2, #31
   1304c:	adc	r1, r1, ip, asr #31
   13050:	bl	198e8 <__assert_fail@plt+0x8af4>
   13054:	mov	r2, r0
   13058:	mov	r3, r1
   1305c:	ldr	r0, [pc, #236]	; 13150 <__assert_fail@plt+0x235c>
   13060:	ldr	r1, [sp]
   13064:	bl	10bc0 <printf@plt>
   13068:	add	r5, r5, r0
   1306c:	b	12f64 <__assert_fail@plt+0x2170>
   13070:	ldr	r3, [r4, #80]	; 0x50
   13074:	and	r2, r3, #61440	; 0xf000
   13078:	cmp	r2, #16384	; 0x4000
   1307c:	beq	13100 <__assert_fail@plt+0x230c>
   13080:	bls	130d0 <__assert_fail@plt+0x22dc>
   13084:	cmp	r2, #40960	; 0xa000
   13088:	beq	130ec <__assert_fail@plt+0x22f8>
   1308c:	cmp	r2, #49152	; 0xc000
   13090:	bne	13114 <__assert_fail@plt+0x2320>
   13094:	ldr	r1, [r7]
   13098:	mov	r0, #61	; 0x3d
   1309c:	bl	10d58 <putc@plt>
   130a0:	mov	r3, #1
   130a4:	add	r5, r5, r3
   130a8:	b	12f98 <__assert_fail@plt+0x21a4>
   130ac:	mov	r0, #32
   130b0:	bl	10d58 <putc@plt>
   130b4:	b	12ffc <__assert_fail@plt+0x2208>
   130b8:	ldr	r7, [pc, #124]	; 1313c <__assert_fail@plt+0x2348>
   130bc:	ldr	r1, [r7]
   130c0:	mov	r0, #10
   130c4:	add	sp, sp, #12
   130c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130cc:	b	10d58 <putc@plt>
   130d0:	cmp	r2, #4096	; 0x1000
   130d4:	bne	13114 <__assert_fail@plt+0x2320>
   130d8:	ldr	r1, [r7]
   130dc:	mov	r0, #124	; 0x7c
   130e0:	bl	10d58 <putc@plt>
   130e4:	mov	r3, #1
   130e8:	b	130a4 <__assert_fail@plt+0x22b0>
   130ec:	ldr	r1, [r7]
   130f0:	mov	r0, #64	; 0x40
   130f4:	bl	10d58 <putc@plt>
   130f8:	mov	r3, #1
   130fc:	b	130a4 <__assert_fail@plt+0x22b0>
   13100:	ldr	r1, [r7]
   13104:	mov	r0, #47	; 0x2f
   13108:	bl	10d58 <putc@plt>
   1310c:	mov	r3, #1
   13110:	b	130a4 <__assert_fail@plt+0x22b0>
   13114:	ands	r3, r3, #73	; 0x49
   13118:	beq	130a4 <__assert_fail@plt+0x22b0>
   1311c:	ldr	r1, [r7]
   13120:	mov	r0, #42	; 0x2a
   13124:	bl	10d58 <putc@plt>
   13128:	mov	r3, #1
   1312c:	b	130a4 <__assert_fail@plt+0x22b0>
   13130:	andeq	fp, r2, r0, ror r1
   13134:	andeq	fp, r2, r8, asr r1
   13138:	andeq	fp, r2, r0, lsl #3
   1313c:	andeq	fp, r2, r4, lsl r1
   13140:	muleq	r2, r0, r1
   13144:	strdeq	fp, [r2], -r0
   13148:	andeq	r9, r1, r0, asr ip
   1314c:	andeq	fp, r2, r8, lsr #3
   13150:	andeq	r9, r1, r8, asr ip
   13154:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13158:	ldrb	r4, [r0]
   1315c:	cmp	r4, #0
   13160:	beq	131c4 <__assert_fail@plt+0x23d0>
   13164:	mov	r5, r0
   13168:	bl	10cbc <__ctype_b_loc@plt>
   1316c:	ldr	r7, [pc, #88]	; 131cc <__assert_fail@plt+0x23d8>
   13170:	ldr	r8, [pc, #88]	; 131d0 <__assert_fail@plt+0x23dc>
   13174:	mov	r6, #0
   13178:	mov	r9, #63	; 0x3f
   1317c:	mov	sl, r0
   13180:	ldr	r2, [sl]
   13184:	lsl	r3, r4, #1
   13188:	mov	r0, r4
   1318c:	ldrh	r3, [r2, r3]
   13190:	tst	r3, #16384	; 0x4000
   13194:	bne	131a4 <__assert_fail@plt+0x23b0>
   13198:	ldr	r3, [r8]
   1319c:	cmp	r3, #0
   131a0:	movne	r0, r9
   131a4:	ldr	r1, [r7]
   131a8:	bl	10d58 <putc@plt>
   131ac:	ldrb	r4, [r5, #1]!
   131b0:	add	r6, r6, #1
   131b4:	cmp	r4, #0
   131b8:	bne	13180 <__assert_fail@plt+0x238c>
   131bc:	mov	r0, r6
   131c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   131c4:	mov	r6, r4
   131c8:	b	131bc <__assert_fail@plt+0x23c8>
   131cc:	andeq	fp, r2, r4, lsl r1
   131d0:			; <UNDEFINED> instruction: 0x0002b1b4
   131d4:	ldr	r3, [pc, #28]	; 131f8 <__assert_fail@plt+0x2404>
   131d8:	push	{r4, lr}
   131dc:	mov	r2, #51	; 0x33
   131e0:	mov	r1, #1
   131e4:	ldr	r3, [r3]
   131e8:	ldr	r0, [pc, #12]	; 131fc <__assert_fail@plt+0x2408>
   131ec:	bl	10c50 <fwrite@plt>
   131f0:	mov	r0, #1
   131f4:	pop	{r4, pc}
   131f8:	andeq	fp, r2, r0, lsl r1
   131fc:			; <UNDEFINED> instruction: 0x00019cbc
   13200:	add	r1, r1, #168	; 0xa8
   13204:	add	r0, r0, #168	; 0xa8
   13208:	b	10b9c <strcmp@plt>
   1320c:	add	r3, r1, #168	; 0xa8
   13210:	add	r1, r0, #168	; 0xa8
   13214:	mov	r0, r3
   13218:	b	10b9c <strcmp@plt>
   1321c:	ldr	r3, [r0, #144]	; 0x90
   13220:	ldr	r2, [r1, #144]	; 0x90
   13224:	cmp	r2, r3
   13228:	bgt	13250 <__assert_fail@plt+0x245c>
   1322c:	beq	13240 <__assert_fail@plt+0x244c>
   13230:	blt	13258 <__assert_fail@plt+0x2464>
   13234:	add	r1, r1, #168	; 0xa8
   13238:	add	r0, r0, #168	; 0xa8
   1323c:	b	10b9c <strcmp@plt>
   13240:	ldr	r2, [r1, #148]	; 0x94
   13244:	ldr	r3, [r0, #148]	; 0x94
   13248:	cmp	r2, r3
   1324c:	ble	13230 <__assert_fail@plt+0x243c>
   13250:	mov	r0, #1
   13254:	bx	lr
   13258:	mvn	r0, #0
   1325c:	bx	lr
   13260:	ldr	r3, [r0, #144]	; 0x90
   13264:	ldr	r2, [r1, #144]	; 0x90
   13268:	cmp	r2, r3
   1326c:	bgt	132a0 <__assert_fail@plt+0x24ac>
   13270:	beq	13290 <__assert_fail@plt+0x249c>
   13274:	blt	132a8 <__assert_fail@plt+0x24b4>
   13278:	push	{r4, lr}
   1327c:	add	r1, r1, #168	; 0xa8
   13280:	add	r0, r0, #168	; 0xa8
   13284:	bl	10b9c <strcmp@plt>
   13288:	rsb	r0, r0, #0
   1328c:	pop	{r4, pc}
   13290:	ldr	r2, [r1, #148]	; 0x94
   13294:	ldr	r3, [r0, #148]	; 0x94
   13298:	cmp	r2, r3
   1329c:	ble	13274 <__assert_fail@plt+0x2480>
   132a0:	mvn	r0, #0
   132a4:	bx	lr
   132a8:	mov	r0, #1
   132ac:	bx	lr
   132b0:	ldr	r3, [r0, #136]	; 0x88
   132b4:	ldr	r2, [r1, #136]	; 0x88
   132b8:	cmp	r2, r3
   132bc:	bgt	132e4 <__assert_fail@plt+0x24f0>
   132c0:	beq	132d4 <__assert_fail@plt+0x24e0>
   132c4:	blt	132ec <__assert_fail@plt+0x24f8>
   132c8:	add	r1, r1, #168	; 0xa8
   132cc:	add	r0, r0, #168	; 0xa8
   132d0:	b	10b9c <strcmp@plt>
   132d4:	ldr	r2, [r1, #140]	; 0x8c
   132d8:	ldr	r3, [r0, #140]	; 0x8c
   132dc:	cmp	r2, r3
   132e0:	ble	132c4 <__assert_fail@plt+0x24d0>
   132e4:	mov	r0, #1
   132e8:	bx	lr
   132ec:	mvn	r0, #0
   132f0:	bx	lr
   132f4:	ldr	r3, [r0, #136]	; 0x88
   132f8:	ldr	r2, [r1, #136]	; 0x88
   132fc:	cmp	r2, r3
   13300:	bgt	13334 <__assert_fail@plt+0x2540>
   13304:	beq	13324 <__assert_fail@plt+0x2530>
   13308:	blt	1333c <__assert_fail@plt+0x2548>
   1330c:	push	{r4, lr}
   13310:	add	r1, r1, #168	; 0xa8
   13314:	add	r0, r0, #168	; 0xa8
   13318:	bl	10b9c <strcmp@plt>
   1331c:	rsb	r0, r0, #0
   13320:	pop	{r4, pc}
   13324:	ldr	r2, [r1, #140]	; 0x8c
   13328:	ldr	r3, [r0, #140]	; 0x8c
   1332c:	cmp	r2, r3
   13330:	ble	13308 <__assert_fail@plt+0x2514>
   13334:	mvn	r0, #0
   13338:	bx	lr
   1333c:	mov	r0, #1
   13340:	bx	lr
   13344:	ldr	r3, [r0, #152]	; 0x98
   13348:	ldr	r2, [r1, #152]	; 0x98
   1334c:	cmp	r2, r3
   13350:	bgt	13378 <__assert_fail@plt+0x2584>
   13354:	beq	13368 <__assert_fail@plt+0x2574>
   13358:	blt	13380 <__assert_fail@plt+0x258c>
   1335c:	add	r1, r1, #168	; 0xa8
   13360:	add	r0, r0, #168	; 0xa8
   13364:	b	10b9c <strcmp@plt>
   13368:	ldr	r2, [r1, #156]	; 0x9c
   1336c:	ldr	r3, [r0, #156]	; 0x9c
   13370:	cmp	r2, r3
   13374:	ble	13358 <__assert_fail@plt+0x2564>
   13378:	mov	r0, #1
   1337c:	bx	lr
   13380:	mvn	r0, #0
   13384:	bx	lr
   13388:	ldr	r3, [r0, #152]	; 0x98
   1338c:	ldr	r2, [r1, #152]	; 0x98
   13390:	cmp	r2, r3
   13394:	bgt	133c8 <__assert_fail@plt+0x25d4>
   13398:	beq	133b8 <__assert_fail@plt+0x25c4>
   1339c:	blt	133d0 <__assert_fail@plt+0x25dc>
   133a0:	push	{r4, lr}
   133a4:	add	r1, r1, #168	; 0xa8
   133a8:	add	r0, r0, #168	; 0xa8
   133ac:	bl	10b9c <strcmp@plt>
   133b0:	rsb	r0, r0, #0
   133b4:	pop	{r4, pc}
   133b8:	ldr	r2, [r1, #156]	; 0x9c
   133bc:	ldr	r3, [r0, #156]	; 0x9c
   133c0:	cmp	r2, r3
   133c4:	ble	1339c <__assert_fail@plt+0x25a8>
   133c8:	mvn	r0, #0
   133cc:	bx	lr
   133d0:	mov	r0, #1
   133d4:	bx	lr
   133d8:	ldrd	r2, [r0, #112]	; 0x70
   133dc:	push	{r4, r5}
   133e0:	ldrd	r4, [r1, #112]	; 0x70
   133e4:	cmp	r2, r4
   133e8:	sbcs	ip, r3, r5
   133ec:	blt	1340c <__assert_fail@plt+0x2618>
   133f0:	cmp	r4, r2
   133f4:	sbcs	r3, r5, r3
   133f8:	blt	13418 <__assert_fail@plt+0x2624>
   133fc:	add	r1, r1, #168	; 0xa8
   13400:	add	r0, r0, #168	; 0xa8
   13404:	pop	{r4, r5}
   13408:	b	10b9c <strcmp@plt>
   1340c:	mov	r0, #1
   13410:	pop	{r4, r5}
   13414:	bx	lr
   13418:	mvn	r0, #0
   1341c:	b	13410 <__assert_fail@plt+0x261c>
   13420:	ldrd	r2, [r0, #112]	; 0x70
   13424:	push	{r4, r5, r6, lr}
   13428:	ldrd	r4, [r1, #112]	; 0x70
   1342c:	cmp	r2, r4
   13430:	sbcs	ip, r3, r5
   13434:	blt	13460 <__assert_fail@plt+0x266c>
   13438:	cmp	r4, r2
   1343c:	sbcs	r3, r5, r3
   13440:	blt	13458 <__assert_fail@plt+0x2664>
   13444:	add	r1, r1, #168	; 0xa8
   13448:	add	r0, r0, #168	; 0xa8
   1344c:	bl	10b9c <strcmp@plt>
   13450:	rsb	r0, r0, #0
   13454:	pop	{r4, r5, r6, pc}
   13458:	mov	r0, #1
   1345c:	pop	{r4, r5, r6, pc}
   13460:	mvn	r0, #0
   13464:	pop	{r4, r5, r6, pc}
   13468:	and	r3, r0, #61440	; 0xf000
   1346c:	cmp	r3, #32768	; 0x8000
   13470:	moveq	r3, #45	; 0x2d
   13474:	beq	134c0 <__assert_fail@plt+0x26cc>
   13478:	cmp	r3, #16384	; 0x4000
   1347c:	moveq	r3, #100	; 0x64
   13480:	beq	134c0 <__assert_fail@plt+0x26cc>
   13484:	cmp	r3, #24576	; 0x6000
   13488:	moveq	r3, #98	; 0x62
   1348c:	beq	134c0 <__assert_fail@plt+0x26cc>
   13490:	cmp	r3, #8192	; 0x2000
   13494:	moveq	r3, #99	; 0x63
   13498:	beq	134c0 <__assert_fail@plt+0x26cc>
   1349c:	cmp	r3, #40960	; 0xa000
   134a0:	moveq	r3, #108	; 0x6c
   134a4:	beq	134c0 <__assert_fail@plt+0x26cc>
   134a8:	cmp	r3, #4096	; 0x1000
   134ac:	moveq	r3, #112	; 0x70
   134b0:	beq	134c0 <__assert_fail@plt+0x26cc>
   134b4:	cmp	r3, #49152	; 0xc000
   134b8:	moveq	r3, #115	; 0x73
   134bc:	movne	r3, #63	; 0x3f
   134c0:	tst	r0, #256	; 0x100
   134c4:	movne	ip, #114	; 0x72
   134c8:	moveq	ip, #45	; 0x2d
   134cc:	tst	r0, #128	; 0x80
   134d0:	movne	r2, #119	; 0x77
   134d4:	moveq	r2, #45	; 0x2d
   134d8:	tst	r0, #2048	; 0x800
   134dc:	strb	r3, [r1]
   134e0:	strb	ip, [r1, #1]
   134e4:	strb	r2, [r1, #2]
   134e8:	beq	13580 <__assert_fail@plt+0x278c>
   134ec:	tst	r0, #64	; 0x40
   134f0:	movne	ip, #115	; 0x73
   134f4:	moveq	ip, #83	; 0x53
   134f8:	tst	r0, #32
   134fc:	movne	r2, #114	; 0x72
   13500:	moveq	r2, #45	; 0x2d
   13504:	tst	r0, #16
   13508:	movne	r3, #119	; 0x77
   1350c:	moveq	r3, #45	; 0x2d
   13510:	tst	r0, #1024	; 0x400
   13514:	strb	ip, [r1, #3]
   13518:	strb	r2, [r1, #4]
   1351c:	strb	r3, [r1, #5]
   13520:	beq	135a0 <__assert_fail@plt+0x27ac>
   13524:	tst	r0, #8
   13528:	movne	ip, #115	; 0x73
   1352c:	moveq	ip, #83	; 0x53
   13530:	tst	r0, #4
   13534:	movne	r2, #114	; 0x72
   13538:	moveq	r2, #45	; 0x2d
   1353c:	tst	r0, #2
   13540:	movne	r3, #119	; 0x77
   13544:	moveq	r3, #45	; 0x2d
   13548:	tst	r0, #512	; 0x200
   1354c:	strb	ip, [r1, #6]
   13550:	strb	r2, [r1, #7]
   13554:	strb	r3, [r1, #8]
   13558:	beq	13590 <__assert_fail@plt+0x279c>
   1355c:	tst	r0, #1
   13560:	movne	r0, #116	; 0x74
   13564:	moveq	r0, #84	; 0x54
   13568:	mov	r2, #32
   1356c:	mov	r3, #0
   13570:	strb	r0, [r1, #9]
   13574:	strb	r2, [r1, #10]
   13578:	strb	r3, [r1, #11]
   1357c:	bx	lr
   13580:	tst	r0, #64	; 0x40
   13584:	movne	ip, #120	; 0x78
   13588:	moveq	ip, #45	; 0x2d
   1358c:	b	134f8 <__assert_fail@plt+0x2704>
   13590:	tst	r0, #1
   13594:	movne	r0, #120	; 0x78
   13598:	moveq	r0, #45	; 0x2d
   1359c:	b	13568 <__assert_fail@plt+0x2774>
   135a0:	tst	r0, #8
   135a4:	movne	ip, #120	; 0x78
   135a8:	moveq	ip, #45	; 0x2d
   135ac:	b	13530 <__assert_fail@plt+0x273c>
   135b0:	ldr	r3, [r0, #16]
   135b4:	and	r2, r3, #61440	; 0xf000
   135b8:	cmp	r2, #32768	; 0x8000
   135bc:	moveq	r2, #45	; 0x2d
   135c0:	beq	1360c <__assert_fail@plt+0x2818>
   135c4:	cmp	r2, #16384	; 0x4000
   135c8:	moveq	r2, #100	; 0x64
   135cc:	beq	1360c <__assert_fail@plt+0x2818>
   135d0:	cmp	r2, #24576	; 0x6000
   135d4:	moveq	r2, #98	; 0x62
   135d8:	beq	1360c <__assert_fail@plt+0x2818>
   135dc:	cmp	r2, #8192	; 0x2000
   135e0:	moveq	r2, #99	; 0x63
   135e4:	beq	1360c <__assert_fail@plt+0x2818>
   135e8:	cmp	r2, #40960	; 0xa000
   135ec:	moveq	r2, #108	; 0x6c
   135f0:	beq	1360c <__assert_fail@plt+0x2818>
   135f4:	cmp	r2, #4096	; 0x1000
   135f8:	moveq	r2, #112	; 0x70
   135fc:	beq	1360c <__assert_fail@plt+0x2818>
   13600:	cmp	r2, #49152	; 0xc000
   13604:	moveq	r2, #115	; 0x73
   13608:	movne	r2, #63	; 0x3f
   1360c:	tst	r3, #256	; 0x100
   13610:	movne	ip, #114	; 0x72
   13614:	moveq	ip, #45	; 0x2d
   13618:	tst	r3, #128	; 0x80
   1361c:	movne	r0, #119	; 0x77
   13620:	moveq	r0, #45	; 0x2d
   13624:	tst	r3, #2048	; 0x800
   13628:	strb	r2, [r1]
   1362c:	strb	ip, [r1, #1]
   13630:	strb	r0, [r1, #2]
   13634:	beq	136cc <__assert_fail@plt+0x28d8>
   13638:	tst	r3, #64	; 0x40
   1363c:	movne	ip, #115	; 0x73
   13640:	moveq	ip, #83	; 0x53
   13644:	tst	r3, #32
   13648:	movne	r0, #114	; 0x72
   1364c:	moveq	r0, #45	; 0x2d
   13650:	tst	r3, #16
   13654:	movne	r2, #119	; 0x77
   13658:	moveq	r2, #45	; 0x2d
   1365c:	tst	r3, #1024	; 0x400
   13660:	strb	ip, [r1, #3]
   13664:	strb	r0, [r1, #4]
   13668:	strb	r2, [r1, #5]
   1366c:	beq	136ec <__assert_fail@plt+0x28f8>
   13670:	tst	r3, #8
   13674:	movne	ip, #115	; 0x73
   13678:	moveq	ip, #83	; 0x53
   1367c:	tst	r3, #4
   13680:	movne	r0, #114	; 0x72
   13684:	moveq	r0, #45	; 0x2d
   13688:	tst	r3, #2
   1368c:	movne	r2, #119	; 0x77
   13690:	moveq	r2, #45	; 0x2d
   13694:	tst	r3, #512	; 0x200
   13698:	strb	ip, [r1, #6]
   1369c:	strb	r0, [r1, #7]
   136a0:	strb	r2, [r1, #8]
   136a4:	beq	136dc <__assert_fail@plt+0x28e8>
   136a8:	tst	r3, #1
   136ac:	movne	r0, #116	; 0x74
   136b0:	moveq	r0, #84	; 0x54
   136b4:	mov	r2, #32
   136b8:	mov	r3, #0
   136bc:	strb	r0, [r1, #9]
   136c0:	strb	r2, [r1, #10]
   136c4:	strb	r3, [r1, #11]
   136c8:	bx	lr
   136cc:	tst	r3, #64	; 0x40
   136d0:	movne	ip, #120	; 0x78
   136d4:	moveq	ip, #45	; 0x2d
   136d8:	b	13644 <__assert_fail@plt+0x2850>
   136dc:	tst	r3, #1
   136e0:	movne	r0, #120	; 0x78
   136e4:	moveq	r0, #45	; 0x2d
   136e8:	b	136b4 <__assert_fail@plt+0x28c0>
   136ec:	tst	r3, #8
   136f0:	movne	ip, #120	; 0x78
   136f4:	moveq	ip, #45	; 0x2d
   136f8:	b	1367c <__assert_fail@plt+0x2888>
   136fc:	push	{r4, r5, lr}
   13700:	sub	sp, sp, #12
   13704:	mov	r5, r0
   13708:	bl	10cf8 <__errno_location@plt>
   1370c:	mov	r2, #0
   13710:	mov	r4, r0
   13714:	ldr	r3, [r0]
   13718:	str	r2, [r4]
   1371c:	mov	r0, r5
   13720:	str	r3, [sp]
   13724:	str	r3, [sp, #4]
   13728:	bl	10be4 <free@plt>
   1372c:	ldr	r3, [r4]
   13730:	add	r2, sp, #8
   13734:	cmp	r3, #0
   13738:	moveq	r3, #4
   1373c:	movne	r3, #0
   13740:	add	r3, r2, r3
   13744:	ldr	r3, [r3, #-8]
   13748:	str	r3, [r4]
   1374c:	add	sp, sp, #12
   13750:	pop	{r4, r5, pc}
   13754:	ldrd	r2, [r1, #8]
   13758:	push	{r4, r5}
   1375c:	ldrd	r4, [r0, #8]
   13760:	cmp	r5, r3
   13764:	cmpeq	r4, r2
   13768:	movne	r0, #0
   1376c:	beq	13778 <__assert_fail@plt+0x2984>
   13770:	pop	{r4, r5}
   13774:	bx	lr
   13778:	ldrd	r4, [r0]
   1377c:	ldrd	r2, [r1]
   13780:	cmp	r5, r3
   13784:	cmpeq	r4, r2
   13788:	moveq	r0, #1
   1378c:	movne	r0, #0
   13790:	pop	{r4, r5}
   13794:	bx	lr
   13798:	push	{r4, lr}
   1379c:	mov	r2, r1
   137a0:	mov	r3, #0
   137a4:	ldrd	r0, [r0, #8]
   137a8:	bl	199bc <__assert_fail@plt+0x8bc8>
   137ac:	mov	r0, r2
   137b0:	pop	{r4, pc}
   137b4:	push	{r4, lr}
   137b8:	mov	r2, r1
   137bc:	mov	r3, #0
   137c0:	ldrd	r0, [r0]
   137c4:	bl	199bc <__assert_fail@plt+0x8bc8>
   137c8:	mov	r0, r2
   137cc:	pop	{r4, pc}
   137d0:	push	{r4, r5}
   137d4:	ldrd	r2, [r1]
   137d8:	ldrd	r4, [r0]
   137dc:	cmp	r5, r3
   137e0:	cmpeq	r4, r2
   137e4:	moveq	r0, #1
   137e8:	movne	r0, #0
   137ec:	pop	{r4, r5}
   137f0:	bx	lr
   137f4:	ldr	r2, [r0]
   137f8:	ldr	r3, [r1]
   137fc:	ldrd	r0, [r2, #160]	; 0xa0
   13800:	ldrd	r2, [r3, #160]	; 0xa0
   13804:	cmp	r1, r3
   13808:	cmpeq	r0, r2
   1380c:	movhi	r0, #1
   13810:	movls	r0, #0
   13814:	movcc	r3, #1
   13818:	movcs	r3, #0
   1381c:	sub	r0, r0, r3
   13820:	bx	lr
   13824:	push	{r4, r5, r6, r7, lr}
   13828:	sub	sp, sp, #100	; 0x64
   1382c:	ldr	r4, [r0, #44]	; 0x2c
   13830:	ldr	r3, [r4, #48]	; 0x30
   13834:	tst	r3, #512	; 0x200
   13838:	beq	138ac <__assert_fail@plt+0x2ab8>
   1383c:	ldr	r6, [r4, #52]	; 0x34
   13840:	mov	r7, r1
   13844:	cmp	r6, #0
   13848:	mov	r5, r0
   1384c:	beq	13878 <__assert_fail@plt+0x2a84>
   13850:	ldrd	r2, [r5, #64]	; 0x40
   13854:	add	r1, sp, #96	; 0x60
   13858:	mov	r0, r6
   1385c:	strd	r2, [r1, #-88]!	; 0xffffffa8
   13860:	bl	17ab8 <__assert_fail@plt+0x6cc4>
   13864:	cmp	r0, #0
   13868:	beq	138a4 <__assert_fail@plt+0x2ab0>
   1386c:	ldr	r0, [r0, #8]
   13870:	add	sp, sp, #100	; 0x64
   13874:	pop	{r4, r5, r6, r7, pc}
   13878:	ldr	r3, [pc, #168]	; 13928 <__assert_fail@plt+0x2b34>
   1387c:	mov	r1, r6
   13880:	str	r3, [sp]
   13884:	ldr	r2, [pc, #160]	; 1392c <__assert_fail@plt+0x2b38>
   13888:	ldr	r3, [pc, #160]	; 13930 <__assert_fail@plt+0x2b3c>
   1388c:	mov	r0, #13
   13890:	bl	17d98 <__assert_fail@plt+0x6fa4>
   13894:	cmp	r0, #0
   13898:	mov	r6, r0
   1389c:	str	r0, [r4, #52]	; 0x34
   138a0:	bne	13850 <__assert_fail@plt+0x2a5c>
   138a4:	cmp	r7, #0
   138a8:	bge	138b8 <__assert_fail@plt+0x2ac4>
   138ac:	mov	r0, #0
   138b0:	add	sp, sp, #100	; 0x64
   138b4:	pop	{r4, r5, r6, r7, pc}
   138b8:	mov	r0, r7
   138bc:	add	r1, sp, #8
   138c0:	bl	10b78 <fstatfs64@plt>
   138c4:	cmp	r0, #0
   138c8:	bne	138ac <__assert_fail@plt+0x2ab8>
   138cc:	cmp	r6, #0
   138d0:	beq	1391c <__assert_fail@plt+0x2b28>
   138d4:	mov	r0, #16
   138d8:	bl	1910c <__assert_fail@plt+0x8318>
   138dc:	subs	r4, r0, #0
   138e0:	beq	1391c <__assert_fail@plt+0x2b28>
   138e4:	ldrd	r2, [r5, #64]	; 0x40
   138e8:	ldr	r1, [sp, #8]
   138ec:	mov	r0, r6
   138f0:	str	r1, [r4, #8]
   138f4:	strd	r2, [r4]
   138f8:	mov	r1, r4
   138fc:	bl	18700 <__assert_fail@plt+0x790c>
   13900:	cmp	r0, #0
   13904:	beq	13914 <__assert_fail@plt+0x2b20>
   13908:	cmp	r4, r0
   1390c:	beq	1391c <__assert_fail@plt+0x2b28>
   13910:	bl	10db8 <abort@plt>
   13914:	mov	r0, r4
   13918:	bl	136fc <__assert_fail@plt+0x2908>
   1391c:	ldr	r0, [sp, #8]
   13920:	add	sp, sp, #100	; 0x64
   13924:	pop	{r4, r5, r6, r7, pc}
   13928:	strdeq	r3, [r1], -ip
   1392c:			; <UNDEFINED> instruction: 0x000137b4
   13930:	ldrdeq	r3, [r1], -r0
   13934:	push	{r4, r5, r6, lr}
   13938:	mov	r4, r2
   1393c:	ldr	r2, [r2, #48]	; 0x30
   13940:	sub	sp, sp, #8
   13944:	cmp	r2, #0
   13948:	add	r5, r4, #64	; 0x40
   1394c:	bne	139a4 <__assert_fail@plt+0x2bb0>
   13950:	tst	r1, #1
   13954:	beq	139a4 <__assert_fail@plt+0x2bb0>
   13958:	mov	r2, r5
   1395c:	ldr	r1, [r4, #24]
   13960:	mov	r0, #3
   13964:	bl	10d94 <__xstat64@plt>
   13968:	cmp	r0, #0
   1396c:	beq	139e0 <__assert_fail@plt+0x2bec>
   13970:	bl	10cf8 <__errno_location@plt>
   13974:	ldr	r3, [r0]
   13978:	mov	r6, r0
   1397c:	cmp	r3, #2
   13980:	beq	13a58 <__assert_fail@plt+0x2c64>
   13984:	str	r3, [r4, #32]
   13988:	mov	r0, r5
   1398c:	mov	r2, #104	; 0x68
   13990:	mov	r1, #0
   13994:	bl	10d10 <memset@plt>
   13998:	mov	r0, #10
   1399c:	add	sp, sp, #8
   139a0:	pop	{r4, r5, r6, pc}
   139a4:	lsl	r1, r1, #30
   139a8:	orrs	r3, r3, r1, lsr #31
   139ac:	bne	13958 <__assert_fail@plt+0x2b64>
   139b0:	mov	r3, #256	; 0x100
   139b4:	ldr	r2, [r4, #24]
   139b8:	mov	r1, r0
   139bc:	str	r3, [sp]
   139c0:	mov	r0, #3
   139c4:	mov	r3, r5
   139c8:	bl	10c2c <__fxstatat64@plt>
   139cc:	cmp	r0, #0
   139d0:	beq	139e0 <__assert_fail@plt+0x2bec>
   139d4:	bl	10cf8 <__errno_location@plt>
   139d8:	ldr	r3, [r0]
   139dc:	b	13984 <__assert_fail@plt+0x2b90>
   139e0:	ldr	r0, [r4, #80]	; 0x50
   139e4:	and	r0, r0, #61440	; 0xf000
   139e8:	cmp	r0, #16384	; 0x4000
   139ec:	beq	13a10 <__assert_fail@plt+0x2c1c>
   139f0:	cmp	r0, #40960	; 0xa000
   139f4:	moveq	r0, #12
   139f8:	beq	1399c <__assert_fail@plt+0x2ba8>
   139fc:	cmp	r0, #32768	; 0x8000
   13a00:	movne	r0, #3
   13a04:	moveq	r0, #8
   13a08:	add	sp, sp, #8
   13a0c:	pop	{r4, r5, r6, pc}
   13a10:	ldrb	r3, [r4, #168]	; 0xa8
   13a14:	cmp	r3, #46	; 0x2e
   13a18:	beq	13a24 <__assert_fail@plt+0x2c30>
   13a1c:	mov	r0, #1
   13a20:	b	1399c <__assert_fail@plt+0x2ba8>
   13a24:	ldrb	r3, [r4, #169]	; 0xa9
   13a28:	cmp	r3, #0
   13a2c:	beq	13a44 <__assert_fail@plt+0x2c50>
   13a30:	ldr	r3, [r4, #168]	; 0xa8
   13a34:	bic	r3, r3, #-16777216	; 0xff000000
   13a38:	bic	r3, r3, #255	; 0xff
   13a3c:	cmp	r3, #11776	; 0x2e00
   13a40:	bne	13a1c <__assert_fail@plt+0x2c28>
   13a44:	ldr	r0, [r4, #48]	; 0x30
   13a48:	cmp	r0, #0
   13a4c:	movne	r0, #5
   13a50:	moveq	r0, #1
   13a54:	b	1399c <__assert_fail@plt+0x2ba8>
   13a58:	mov	r2, r5
   13a5c:	ldr	r1, [r4, #24]
   13a60:	mov	r0, #3
   13a64:	bl	10dd0 <__lxstat64@plt>
   13a68:	cmp	r0, #0
   13a6c:	streq	r0, [r6]
   13a70:	moveq	r0, #13
   13a74:	beq	1399c <__assert_fail@plt+0x2ba8>
   13a78:	ldr	r3, [r6]
   13a7c:	b	13984 <__assert_fail@plt+0x2b90>
   13a80:	ldr	r3, [pc, #172]	; 13b34 <__assert_fail@plt+0x2d40>
   13a84:	push	{r4, r5, lr}
   13a88:	and	r3, r3, r0
   13a8c:	cmp	r3, #0
   13a90:	sub	sp, sp, #28
   13a94:	bne	13adc <__assert_fail@plt+0x2ce8>
   13a98:	ldr	r3, [r2, #4]
   13a9c:	cmp	r3, #0
   13aa0:	beq	13ad4 <__assert_fail@plt+0x2ce0>
   13aa4:	ldr	r0, [r3, #48]	; 0x30
   13aa8:	cmp	r0, #0
   13aac:	blt	13ad4 <__assert_fail@plt+0x2ce0>
   13ab0:	ldr	ip, [r1]
   13ab4:	ldrd	r0, [ip, #16]
   13ab8:	orrs	r1, r0, r1
   13abc:	beq	13b30 <__assert_fail@plt+0x2d3c>
   13ac0:	ldrd	r4, [ip]
   13ac4:	ldrd	r0, [r2, #160]	; 0xa0
   13ac8:	cmp	r5, r1
   13acc:	cmpeq	r4, r0
   13ad0:	beq	13b0c <__assert_fail@plt+0x2d18>
   13ad4:	add	sp, sp, #28
   13ad8:	pop	{r4, r5, pc}
   13adc:	ldrd	r4, [r2, #64]	; 0x40
   13ae0:	ldrd	r2, [r2, #160]	; 0xa0
   13ae4:	ldr	r0, [r1]
   13ae8:	mov	r1, sp
   13aec:	strd	r4, [sp]
   13af0:	strd	r2, [sp, #8]
   13af4:	bl	189c4 <__assert_fail@plt+0x7bd0>
   13af8:	cmp	r0, #0
   13afc:	beq	13b30 <__assert_fail@plt+0x2d3c>
   13b00:	bl	136fc <__assert_fail@plt+0x2908>
   13b04:	add	sp, sp, #28
   13b08:	pop	{r4, r5, pc}
   13b0c:	ldrd	r0, [ip, #8]
   13b10:	ldrd	r4, [r2, #64]	; 0x40
   13b14:	cmp	r1, r5
   13b18:	cmpeq	r0, r4
   13b1c:	ldrdeq	r0, [r3, #64]	; 0x40
   13b20:	ldrdeq	r2, [r3, #160]	; 0xa0
   13b24:	strdeq	r0, [ip, #8]
   13b28:	strdeq	r2, [ip]
   13b2c:	b	13ad4 <__assert_fail@plt+0x2ce0>
   13b30:	bl	10db8 <abort@plt>
   13b34:	andeq	r0, r0, r2, lsl #2
   13b38:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13b3c:	subs	sl, r3, #0
   13b40:	sub	sp, sp, #104	; 0x68
   13b44:	mov	r5, r0
   13b48:	mov	r6, r1
   13b4c:	mov	r4, r2
   13b50:	ldr	r9, [r0, #48]	; 0x30
   13b54:	beq	13bd0 <__assert_fail@plt+0x2ddc>
   13b58:	ldr	r1, [pc, #612]	; 13dc4 <__assert_fail@plt+0x2fd0>
   13b5c:	mov	r0, sl
   13b60:	bl	10b9c <strcmp@plt>
   13b64:	cmp	r0, #0
   13b68:	bne	13bd0 <__assert_fail@plt+0x2ddc>
   13b6c:	tst	r9, #4
   13b70:	bne	13bd8 <__assert_fail@plt+0x2de4>
   13b74:	cmp	r4, #0
   13b78:	bge	13db0 <__assert_fail@plt+0x2fbc>
   13b7c:	tst	r9, #512	; 0x200
   13b80:	beq	13cc4 <__assert_fail@plt+0x2ed0>
   13b84:	add	r7, r5, #60	; 0x3c
   13b88:	mov	r0, r7
   13b8c:	bl	18ed0 <__assert_fail@plt+0x80dc>
   13b90:	cmp	r0, #0
   13b94:	beq	13d40 <__assert_fail@plt+0x2f4c>
   13b98:	ldr	r2, [pc, #552]	; 13dc8 <__assert_fail@plt+0x2fd4>
   13b9c:	tst	r9, #16
   13ba0:	ldr	r1, [pc, #548]	; 13dcc <__assert_fail@plt+0x2fd8>
   13ba4:	mov	r8, #1
   13ba8:	movne	r1, r2
   13bac:	mov	r2, r1
   13bb0:	ldr	r0, [r5, #32]
   13bb4:	mov	r1, sl
   13bb8:	bl	18ffc <__assert_fail@plt+0x8208>
   13bbc:	mov	r7, r0
   13bc0:	cmp	r7, #0
   13bc4:	blt	13d84 <__assert_fail@plt+0x2f90>
   13bc8:	ldr	r9, [r5, #48]	; 0x30
   13bcc:	b	13c0c <__assert_fail@plt+0x2e18>
   13bd0:	ands	r8, r9, #4
   13bd4:	beq	13c00 <__assert_fail@plt+0x2e0c>
   13bd8:	mvn	r3, r4
   13bdc:	lsr	r3, r3, #31
   13be0:	ands	r9, r3, r9, lsr #9
   13be4:	beq	13bf4 <__assert_fail@plt+0x2e00>
   13be8:	mov	r0, r4
   13bec:	bl	10dc4 <close@plt>
   13bf0:	mov	r9, #0
   13bf4:	mov	r0, r9
   13bf8:	add	sp, sp, #104	; 0x68
   13bfc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13c00:	cmp	r4, #0
   13c04:	movge	r7, r4
   13c08:	blt	13d90 <__assert_fail@plt+0x2f9c>
   13c0c:	tst	r9, #2
   13c10:	bne	13c30 <__assert_fail@plt+0x2e3c>
   13c14:	cmp	sl, #0
   13c18:	beq	13c88 <__assert_fail@plt+0x2e94>
   13c1c:	mov	r0, sl
   13c20:	ldr	r1, [pc, #412]	; 13dc4 <__assert_fail@plt+0x2fd0>
   13c24:	bl	10b9c <strcmp@plt>
   13c28:	cmp	r0, #0
   13c2c:	bne	13c88 <__assert_fail@plt+0x2e94>
   13c30:	mov	r2, sp
   13c34:	mov	r1, r7
   13c38:	mov	r0, #3
   13c3c:	bl	10c38 <__fxstat64@plt>
   13c40:	cmp	r0, #0
   13c44:	beq	13ca0 <__assert_fail@plt+0x2eac>
   13c48:	mvn	r9, #0
   13c4c:	cmp	r4, #0
   13c50:	bge	13bf4 <__assert_fail@plt+0x2e00>
   13c54:	bl	10cf8 <__errno_location@plt>
   13c58:	mov	r4, r0
   13c5c:	mov	r0, r7
   13c60:	ldr	r5, [r4]
   13c64:	bl	10dc4 <close@plt>
   13c68:	str	r5, [r4]
   13c6c:	b	13bf4 <__assert_fail@plt+0x2e00>
   13c70:	ldrd	r0, [r6, #160]	; 0xa0
   13c74:	ldrd	r2, [sp, #96]	; 0x60
   13c78:	cmp	r1, r3
   13c7c:	cmpeq	r0, r2
   13c80:	bne	13cb4 <__assert_fail@plt+0x2ec0>
   13c84:	ldr	r9, [r5, #48]	; 0x30
   13c88:	tst	r9, #512	; 0x200
   13c8c:	bne	13ce8 <__assert_fail@plt+0x2ef4>
   13c90:	mov	r0, r7
   13c94:	bl	10d7c <fchdir@plt>
   13c98:	mov	r9, r0
   13c9c:	b	13c4c <__assert_fail@plt+0x2e58>
   13ca0:	ldrd	r0, [r6, #64]	; 0x40
   13ca4:	ldrd	r2, [sp]
   13ca8:	cmp	r1, r3
   13cac:	cmpeq	r0, r2
   13cb0:	beq	13c70 <__assert_fail@plt+0x2e7c>
   13cb4:	bl	10cf8 <__errno_location@plt>
   13cb8:	mov	r3, #2
   13cbc:	str	r3, [r0]
   13cc0:	b	13c48 <__assert_fail@plt+0x2e54>
   13cc4:	ldr	r2, [pc, #252]	; 13dc8 <__assert_fail@plt+0x2fd4>
   13cc8:	tst	r9, #16
   13ccc:	ldr	r1, [pc, #248]	; 13dcc <__assert_fail@plt+0x2fd8>
   13cd0:	mov	r8, #1
   13cd4:	movne	r1, r2
   13cd8:	mov	r0, sl
   13cdc:	bl	19458 <__assert_fail@plt+0x8664>
   13ce0:	mov	r7, r0
   13ce4:	b	13bc0 <__assert_fail@plt+0x2dcc>
   13ce8:	ldr	r1, [r5, #32]
   13cec:	cmn	r1, #100	; 0x64
   13cf0:	sub	r3, r7, r1
   13cf4:	clz	r3, r3
   13cf8:	lsr	r3, r3, #5
   13cfc:	moveq	r3, #0
   13d00:	cmp	r3, #0
   13d04:	bne	13d8c <__assert_fail@plt+0x2f98>
   13d08:	cmp	r8, #0
   13d0c:	beq	13d70 <__assert_fail@plt+0x2f7c>
   13d10:	lsr	r3, r9, #2
   13d14:	eor	r3, r3, #1
   13d18:	cmp	r1, #0
   13d1c:	movlt	r3, #0
   13d20:	andge	r3, r3, #1
   13d24:	cmp	r3, #0
   13d28:	beq	13d34 <__assert_fail@plt+0x2f40>
   13d2c:	mov	r0, r1
   13d30:	bl	10dc4 <close@plt>
   13d34:	str	r7, [r5, #32]
   13d38:	mov	r9, #0
   13d3c:	b	13bf4 <__assert_fail@plt+0x2e00>
   13d40:	mov	r0, r7
   13d44:	bl	18f1c <__assert_fail@plt+0x8128>
   13d48:	ldr	r9, [r5, #48]	; 0x30
   13d4c:	subs	r7, r0, #0
   13d50:	movlt	r8, #1
   13d54:	andlt	r3, r9, #512	; 0x200
   13d58:	blt	13d94 <__assert_fail@plt+0x2fa0>
   13d5c:	tst	r9, #2
   13d60:	mov	r4, r7
   13d64:	mov	r8, #1
   13d68:	beq	13c88 <__assert_fail@plt+0x2e94>
   13d6c:	b	13c30 <__assert_fail@plt+0x2e3c>
   13d70:	add	r0, r5, #60	; 0x3c
   13d74:	bl	18ed8 <__assert_fail@plt+0x80e4>
   13d78:	cmp	r0, #0
   13d7c:	bge	13d30 <__assert_fail@plt+0x2f3c>
   13d80:	b	13d34 <__assert_fail@plt+0x2f40>
   13d84:	mvn	r9, #0
   13d88:	b	13bf4 <__assert_fail@plt+0x2e00>
   13d8c:	bl	10db8 <abort@plt>
   13d90:	and	r3, r9, #512	; 0x200
   13d94:	ldr	r2, [pc, #48]	; 13dcc <__assert_fail@plt+0x2fd8>
   13d98:	tst	r9, #16
   13d9c:	ldr	r1, [pc, #36]	; 13dc8 <__assert_fail@plt+0x2fd4>
   13da0:	moveq	r1, r2
   13da4:	cmp	r3, #0
   13da8:	bne	13bac <__assert_fail@plt+0x2db8>
   13dac:	b	13cd8 <__assert_fail@plt+0x2ee4>
   13db0:	tst	r9, #2
   13db4:	mov	r7, r4
   13db8:	mov	r8, #1
   13dbc:	beq	13c1c <__assert_fail@plt+0x2e28>
   13dc0:	b	13c30 <__assert_fail@plt+0x2e3c>
   13dc4:	andeq	r9, r1, r0, lsr #26
   13dc8:	andeq	ip, r8, r0, lsl #18
   13dcc:	andeq	r4, r8, r0, lsl #18
   13dd0:	ldr	r3, [r0]
   13dd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13dd8:	sub	sp, sp, #68	; 0x44
   13ddc:	mov	r6, r0
   13de0:	str	r3, [sp, #8]
   13de4:	ldr	r3, [r3, #12]
   13de8:	str	r1, [sp, #40]	; 0x28
   13dec:	cmp	r3, #0
   13df0:	str	r3, [sp, #44]	; 0x2c
   13df4:	beq	143dc <__assert_fail@plt+0x35e8>
   13df8:	mov	r0, r3
   13dfc:	bl	10d64 <dirfd@plt>
   13e00:	cmp	r0, #0
   13e04:	str	r0, [sp, #60]	; 0x3c
   13e08:	blt	14818 <__assert_fail@plt+0x3a24>
   13e0c:	ldr	r3, [r6, #44]	; 0x2c
   13e10:	cmp	r3, #0
   13e14:	beq	14a9c <__assert_fail@plt+0x3ca8>
   13e18:	mvn	r3, #0
   13e1c:	str	r3, [sp, #24]
   13e20:	ldr	r0, [r6, #48]	; 0x30
   13e24:	ldr	r2, [sp, #8]
   13e28:	mov	r3, #1
   13e2c:	str	r3, [sp, #52]	; 0x34
   13e30:	ldr	r3, [r2, #40]	; 0x28
   13e34:	ldr	r1, [r2, #28]
   13e38:	sub	r2, r3, #1
   13e3c:	ldrb	r1, [r1, r2]
   13e40:	cmp	r1, #47	; 0x2f
   13e44:	moveq	r3, r2
   13e48:	ands	r0, r0, #4
   13e4c:	movne	r0, #47	; 0x2f
   13e50:	ldrne	r2, [r6, #24]
   13e54:	streq	r0, [sp, #32]
   13e58:	addne	r1, r2, r3
   13e5c:	strbne	r0, [r2, r3]
   13e60:	addne	r2, r1, #1
   13e64:	strne	r2, [sp, #32]
   13e68:	ldr	r2, [sp, #8]
   13e6c:	add	r3, r3, #1
   13e70:	ldr	r1, [r6, #36]	; 0x24
   13e74:	ldr	r2, [r2, #48]	; 0x30
   13e78:	mov	r0, r3
   13e7c:	str	r3, [sp, #12]
   13e80:	sub	r1, r1, r0
   13e84:	mov	r3, #0
   13e88:	add	r2, r2, #1
   13e8c:	mov	r7, r3
   13e90:	str	r3, [sp, #48]	; 0x30
   13e94:	str	r1, [sp, #20]
   13e98:	str	r2, [sp, #28]
   13e9c:	str	r3, [sp, #36]	; 0x24
   13ea0:	str	r3, [sp]
   13ea4:	mov	sl, r3
   13ea8:	str	r3, [sp, #16]
   13eac:	b	13f30 <__assert_fail@plt+0x313c>
   13eb0:	tst	r3, #251	; 0xfb
   13eb4:	beq	14044 <__assert_fail@plt+0x3250>
   13eb8:	lsr	r2, r1, #4
   13ebc:	cmp	r3, #10
   13ec0:	orrne	r2, r2, #1
   13ec4:	tst	r2, #1
   13ec8:	beq	14508 <__assert_fail@plt+0x3714>
   13ecc:	sub	r3, r3, #1
   13ed0:	mov	r2, #11
   13ed4:	cmp	r3, #11
   13ed8:	strh	r2, [r4, #56]	; 0x38
   13edc:	bhi	14ab8 <__assert_fail@plt+0x3cc4>
   13ee0:	ldr	r2, [pc, #3040]	; 14ac8 <__assert_fail@plt+0x3cd4>
   13ee4:	ldr	r1, [r2, r3, lsl #2]
   13ee8:	mov	r2, #1
   13eec:	mov	r3, #0
   13ef0:	str	r1, [r4, #80]	; 0x50
   13ef4:	strd	r2, [r4, #112]	; 0x70
   13ef8:	ldr	r3, [sp, #16]
   13efc:	str	r7, [r4, #8]
   13f00:	cmp	r3, #0
   13f04:	streq	r4, [sp, #16]
   13f08:	ldrne	r3, [sp]
   13f0c:	strne	r4, [r3, #8]
   13f10:	ldr	r3, [pc, #2996]	; 14acc <__assert_fail@plt+0x3cd8>
   13f14:	cmp	sl, r3
   13f18:	beq	14194 <__assert_fail@plt+0x33a0>
   13f1c:	ldr	r3, [sp, #24]
   13f20:	add	sl, sl, #1
   13f24:	cmp	r3, sl
   13f28:	bls	142ac <__assert_fail@plt+0x34b8>
   13f2c:	str	r4, [sp]
   13f30:	ldr	r3, [sp, #8]
   13f34:	ldr	r4, [r3, #12]
   13f38:	cmp	r4, #0
   13f3c:	beq	142ac <__assert_fail@plt+0x34b8>
   13f40:	bl	10cf8 <__errno_location@plt>
   13f44:	mov	fp, r0
   13f48:	mov	r0, r4
   13f4c:	str	r7, [fp]
   13f50:	bl	10d40 <readdir64@plt>
   13f54:	subs	r8, r0, #0
   13f58:	beq	146a8 <__assert_fail@plt+0x38b4>
   13f5c:	ldr	r3, [r6, #48]	; 0x30
   13f60:	tst	r3, #32
   13f64:	bne	13f74 <__assert_fail@plt+0x3180>
   13f68:	ldrb	r3, [r8, #19]
   13f6c:	cmp	r3, #46	; 0x2e
   13f70:	beq	141f8 <__assert_fail@plt+0x3404>
   13f74:	add	r1, r8, #19
   13f78:	mov	r0, r1
   13f7c:	str	r1, [sp, #4]
   13f80:	bl	10cc8 <strlen@plt>
   13f84:	mov	r5, r0
   13f88:	add	r0, r0, #176	; 0xb0
   13f8c:	bic	r0, r0, #7
   13f90:	bl	1910c <__assert_fail@plt+0x8318>
   13f94:	subs	r4, r0, #0
   13f98:	beq	142a0 <__assert_fail@plt+0x34ac>
   13f9c:	add	r9, r4, #168	; 0xa8
   13fa0:	ldr	r1, [sp, #4]
   13fa4:	mov	r2, r5
   13fa8:	mov	r0, r9
   13fac:	bl	10bf0 <memcpy@plt>
   13fb0:	ldr	r3, [sp, #20]
   13fb4:	add	r1, r4, r5
   13fb8:	ldr	r2, [r6, #24]
   13fbc:	mov	r0, #196608	; 0x30000
   13fc0:	cmp	r3, r5
   13fc4:	strb	r7, [r1, #168]	; 0xa8
   13fc8:	str	r5, [r4, #52]	; 0x34
   13fcc:	str	r6, [r4, #44]	; 0x2c
   13fd0:	str	r7, [r4, #32]
   13fd4:	str	r7, [r4, #12]
   13fd8:	str	r7, [r4, #16]
   13fdc:	str	r7, [r4, #20]
   13fe0:	str	r2, [r4, #28]
   13fe4:	str	r0, [r4, #58]	; 0x3a
   13fe8:	bls	1407c <__assert_fail@plt+0x3288>
   13fec:	ldr	r3, [sp, #12]
   13ff0:	adds	r5, r3, r5
   13ff4:	bcs	140fc <__assert_fail@plt+0x3308>
   13ff8:	ldrd	r2, [r8]
   13ffc:	ldr	r1, [r6, #48]	; 0x30
   14000:	ldr	r0, [sp, #28]
   14004:	strd	r2, [r4, #160]	; 0xa0
   14008:	ldr	r3, [r6]
   1400c:	tst	r1, #4
   14010:	str	r0, [r4, #48]	; 0x30
   14014:	str	r5, [r4, #40]	; 0x28
   14018:	str	r3, [r4, #4]
   1401c:	streq	r9, [r4, #24]
   14020:	bne	14170 <__assert_fail@plt+0x337c>
   14024:	ldr	r3, [r6, #44]	; 0x2c
   14028:	cmp	r3, #0
   1402c:	beq	14038 <__assert_fail@plt+0x3244>
   14030:	tst	r1, #1024	; 0x400
   14034:	beq	141e0 <__assert_fail@plt+0x33ec>
   14038:	tst	r1, #8
   1403c:	ldrb	r3, [r8, #18]
   14040:	bne	13eb0 <__assert_fail@plt+0x30bc>
   14044:	sub	r3, r3, #1
   14048:	cmp	r3, #11
   1404c:	mov	r2, #11
   14050:	strh	r2, [r4, #56]	; 0x38
   14054:	strhi	r7, [r4, #80]	; 0x50
   14058:	movhi	r2, #2
   1405c:	movhi	r3, #0
   14060:	bhi	13ef4 <__assert_fail@plt+0x3100>
   14064:	ldr	r2, [pc, #2652]	; 14ac8 <__assert_fail@plt+0x3cd4>
   14068:	ldr	r1, [r2, r3, lsl #2]
   1406c:	mov	r2, #2
   14070:	mov	r3, #0
   14074:	str	r1, [r4, #80]	; 0x50
   14078:	b	13ef4 <__assert_fail@plt+0x3100>
   1407c:	ldr	r0, [r6, #36]	; 0x24
   14080:	ldr	r3, [sp, #12]
   14084:	add	r1, r0, #256	; 0x100
   14088:	add	r1, r1, #1
   1408c:	add	r1, r1, r3
   14090:	add	r1, r1, r5
   14094:	cmp	r0, r1
   14098:	bhi	14218 <__assert_fail@plt+0x3424>
   1409c:	mov	r0, r2
   140a0:	str	r1, [r6, #36]	; 0x24
   140a4:	str	r2, [sp, #4]
   140a8:	bl	19138 <__assert_fail@plt+0x8344>
   140ac:	ldr	r2, [sp, #4]
   140b0:	cmp	r0, #0
   140b4:	beq	14894 <__assert_fail@plt+0x3aa0>
   140b8:	cmp	r2, r0
   140bc:	str	r0, [r6, #24]
   140c0:	beq	140e0 <__assert_fail@plt+0x32ec>
   140c4:	ldr	r2, [r6, #48]	; 0x30
   140c8:	tst	r2, #4
   140cc:	ldrne	r3, [sp, #12]
   140d0:	addne	r3, r0, r3
   140d4:	strne	r3, [sp, #32]
   140d8:	mov	r3, #1
   140dc:	str	r3, [sp, #36]	; 0x24
   140e0:	ldr	r2, [r6, #36]	; 0x24
   140e4:	ldr	r3, [sp, #12]
   140e8:	sub	r3, r2, r3
   140ec:	str	r3, [sp, #20]
   140f0:	ldr	r3, [sp, #12]
   140f4:	adds	r5, r3, r5
   140f8:	bcc	13ff8 <__assert_fail@plt+0x3204>
   140fc:	ldr	r8, [sp, #16]
   14100:	mov	r0, r4
   14104:	bl	136fc <__assert_fail@plt+0x2908>
   14108:	cmp	r8, #0
   1410c:	beq	14134 <__assert_fail@plt+0x3340>
   14110:	ldr	r3, [r8, #12]
   14114:	ldr	r4, [r8, #8]
   14118:	subs	r0, r3, #0
   1411c:	beq	14124 <__assert_fail@plt+0x3330>
   14120:	bl	10ddc <closedir@plt>
   14124:	mov	r0, r8
   14128:	bl	136fc <__assert_fail@plt+0x2908>
   1412c:	subs	r8, r4, #0
   14130:	bne	14110 <__assert_fail@plt+0x331c>
   14134:	ldr	r4, [sp, #8]
   14138:	mov	r8, #0
   1413c:	ldr	r0, [r4, #12]
   14140:	bl	10ddc <closedir@plt>
   14144:	ldr	r3, [r6, #48]	; 0x30
   14148:	mov	r1, #7
   1414c:	orr	r3, r3, #8192	; 0x2000
   14150:	mov	r2, #36	; 0x24
   14154:	str	r8, [r4, #12]
   14158:	strh	r1, [r4, #56]	; 0x38
   1415c:	str	r3, [r6, #48]	; 0x30
   14160:	str	r2, [fp]
   14164:	mov	r0, r8
   14168:	add	sp, sp, #68	; 0x44
   1416c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14170:	ldr	r0, [r4, #28]
   14174:	ldr	r2, [r4, #52]	; 0x34
   14178:	mov	r1, r9
   1417c:	str	r0, [r4, #24]
   14180:	add	r2, r2, #1
   14184:	ldr	r0, [sp, #32]
   14188:	bl	10bd8 <memmove@plt>
   1418c:	ldr	r1, [r6, #48]	; 0x30
   14190:	b	14024 <__assert_fail@plt+0x3230>
   14194:	ldr	r3, [r6, #44]	; 0x2c
   14198:	cmp	r3, #0
   1419c:	bne	13f1c <__assert_fail@plt+0x3128>
   141a0:	ldr	r1, [sp, #60]	; 0x3c
   141a4:	ldr	r0, [sp, #8]
   141a8:	bl	13824 <__assert_fail@plt+0x2a30>
   141ac:	ldr	r3, [pc, #2332]	; 14ad0 <__assert_fail@plt+0x3cdc>
   141b0:	cmp	r0, r3
   141b4:	beq	141d8 <__assert_fail@plt+0x33e4>
   141b8:	ldr	r3, [pc, #2324]	; 14ad4 <__assert_fail@plt+0x3ce0>
   141bc:	cmp	r0, r3
   141c0:	beq	141d8 <__assert_fail@plt+0x33e4>
   141c4:	ldr	r3, [pc, #2316]	; 14ad8 <__assert_fail@plt+0x3ce4>
   141c8:	cmp	r0, r3
   141cc:	movne	r3, #1
   141d0:	strne	r3, [sp, #48]	; 0x30
   141d4:	bne	13f1c <__assert_fail@plt+0x3128>
   141d8:	str	r7, [sp, #48]	; 0x30
   141dc:	b	13f1c <__assert_fail@plt+0x3128>
   141e0:	mov	r3, r7
   141e4:	mov	r2, r4
   141e8:	ldr	r0, [r6, #32]
   141ec:	bl	13934 <__assert_fail@plt+0x2b40>
   141f0:	strh	r0, [r4, #56]	; 0x38
   141f4:	b	13ef8 <__assert_fail@plt+0x3104>
   141f8:	ldrb	r3, [r8, #20]
   141fc:	cmp	r3, #0
   14200:	beq	14210 <__assert_fail@plt+0x341c>
   14204:	ldrh	r3, [r8, #20]
   14208:	cmp	r3, #46	; 0x2e
   1420c:	bne	13f74 <__assert_fail@plt+0x3180>
   14210:	ldr	r4, [sp]
   14214:	b	13f2c <__assert_fail@plt+0x3138>
   14218:	mov	r0, r2
   1421c:	ldr	r8, [sp, #16]
   14220:	bl	136fc <__assert_fail@plt+0x2908>
   14224:	mov	r3, #36	; 0x24
   14228:	mov	r5, r3
   1422c:	str	r7, [r6, #24]
   14230:	str	r3, [fp]
   14234:	mov	r0, r4
   14238:	bl	136fc <__assert_fail@plt+0x2908>
   1423c:	cmp	r8, #0
   14240:	beq	14268 <__assert_fail@plt+0x3474>
   14244:	ldr	r3, [r8, #12]
   14248:	ldr	r4, [r8, #8]
   1424c:	subs	r0, r3, #0
   14250:	beq	14258 <__assert_fail@plt+0x3464>
   14254:	bl	10ddc <closedir@plt>
   14258:	mov	r0, r8
   1425c:	bl	136fc <__assert_fail@plt+0x2908>
   14260:	subs	r8, r4, #0
   14264:	bne	14244 <__assert_fail@plt+0x3450>
   14268:	ldr	r4, [sp, #8]
   1426c:	mov	r8, #0
   14270:	ldr	r0, [r4, #12]
   14274:	bl	10ddc <closedir@plt>
   14278:	ldr	r3, [r6, #48]	; 0x30
   1427c:	mov	r2, #7
   14280:	orr	r3, r3, #8192	; 0x2000
   14284:	str	r8, [r4, #12]
   14288:	strh	r2, [r4, #56]	; 0x38
   1428c:	mov	r0, r8
   14290:	str	r3, [r6, #48]	; 0x30
   14294:	str	r5, [fp]
   14298:	add	sp, sp, #68	; 0x44
   1429c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142a0:	ldr	r8, [sp, #16]
   142a4:	ldr	r5, [fp]
   142a8:	b	14234 <__assert_fail@plt+0x3440>
   142ac:	ldr	r8, [sp, #16]
   142b0:	ldr	r3, [sp, #36]	; 0x24
   142b4:	cmp	r3, #0
   142b8:	bne	14700 <__assert_fail@plt+0x390c>
   142bc:	ldr	r3, [r6, #48]	; 0x30
   142c0:	tst	r3, #4
   142c4:	beq	142f0 <__assert_fail@plt+0x34fc>
   142c8:	ldr	r3, [r6, #36]	; 0x24
   142cc:	ldr	r2, [sp, #12]
   142d0:	cmp	sl, #0
   142d4:	cmpne	r3, r2
   142d8:	ldreq	r3, [sp, #32]
   142dc:	subeq	r3, r3, #1
   142e0:	streq	r3, [sp, #32]
   142e4:	ldr	r2, [sp, #32]
   142e8:	mov	r3, #0
   142ec:	strb	r3, [r2]
   142f0:	ldr	r3, [sp, #52]	; 0x34
   142f4:	ldr	r2, [sp, #44]	; 0x2c
   142f8:	cmp	r2, #0
   142fc:	movne	r3, #0
   14300:	andeq	r3, r3, #1
   14304:	cmp	r3, #0
   14308:	beq	14398 <__assert_fail@plt+0x35a4>
   1430c:	ldr	r3, [sp, #40]	; 0x28
   14310:	cmp	sl, #0
   14314:	cmpne	r3, #1
   14318:	beq	145a4 <__assert_fail@plt+0x37b0>
   1431c:	ldr	r3, [sp, #48]	; 0x30
   14320:	cmp	r3, #0
   14324:	bne	14784 <__assert_fail@plt+0x3990>
   14328:	ldr	r4, [r6, #44]	; 0x2c
   1432c:	cmp	r4, #0
   14330:	cmpne	sl, #1
   14334:	bls	14164 <__assert_fail@plt+0x3370>
   14338:	ldr	r3, [r6, #40]	; 0x28
   1433c:	cmp	sl, r3
   14340:	bls	14538 <__assert_fail@plt+0x3744>
   14344:	add	r1, sl, #40	; 0x28
   14348:	cmn	r1, #-1073741823	; 0xc0000001
   1434c:	str	r1, [r6, #40]	; 0x28
   14350:	bhi	1487c <__assert_fail@plt+0x3a88>
   14354:	lsl	r1, r1, #2
   14358:	ldr	r0, [r6, #8]
   1435c:	bl	19138 <__assert_fail@plt+0x8344>
   14360:	cmp	r0, #0
   14364:	beq	1487c <__assert_fail@plt+0x3a88>
   14368:	str	r0, [r6, #8]
   1436c:	b	1453c <__assert_fail@plt+0x3748>
   14370:	ldr	r1, [sp, #8]
   14374:	ldr	r3, [pc, #1888]	; 14adc <__assert_fail@plt+0x3ce8>
   14378:	mvn	r2, #0
   1437c:	ldr	r1, [r1, #4]
   14380:	mov	r0, r6
   14384:	bl	13b38 <__assert_fail@plt+0x2d44>
   14388:	adds	r5, r0, #0
   1438c:	movne	r5, #1
   14390:	cmp	r5, #0
   14394:	bne	14940 <__assert_fail@plt+0x3b4c>
   14398:	cmp	sl, #0
   1439c:	bne	1431c <__assert_fail@plt+0x3528>
   143a0:	ldr	r3, [sp, #40]	; 0x28
   143a4:	cmp	r3, #3
   143a8:	beq	14908 <__assert_fail@plt+0x3b14>
   143ac:	cmp	r8, #0
   143b0:	beq	14838 <__assert_fail@plt+0x3a44>
   143b4:	ldr	r3, [r8, #12]
   143b8:	ldr	r4, [r8, #8]
   143bc:	subs	r0, r3, #0
   143c0:	beq	143c8 <__assert_fail@plt+0x35d4>
   143c4:	bl	10ddc <closedir@plt>
   143c8:	mov	r0, r8
   143cc:	bl	136fc <__assert_fail@plt+0x2908>
   143d0:	subs	r8, r4, #0
   143d4:	bne	143b4 <__assert_fail@plt+0x35c0>
   143d8:	b	14838 <__assert_fail@plt+0x3a44>
   143dc:	ldr	r3, [r0, #48]	; 0x30
   143e0:	ldr	ip, [sp, #8]
   143e4:	and	r2, r3, #516	; 0x204
   143e8:	cmp	r2, #512	; 0x200
   143ec:	mvnne	r0, #99	; 0x63
   143f0:	ldreq	r0, [r0, #32]
   143f4:	ands	r2, r3, #16
   143f8:	ldr	r1, [ip, #24]
   143fc:	bne	14518 <__assert_fail@plt+0x3724>
   14400:	add	r3, sp, #60	; 0x3c
   14404:	bl	19034 <__assert_fail@plt+0x8240>
   14408:	ldr	r3, [sp, #8]
   1440c:	cmp	r0, #0
   14410:	mov	r8, r0
   14414:	str	r0, [r3, #12]
   14418:	beq	14988 <__assert_fail@plt+0x3b94>
   1441c:	ldrh	r3, [r3, #56]	; 0x38
   14420:	cmp	r3, #11
   14424:	beq	149b0 <__assert_fail@plt+0x3bbc>
   14428:	ldr	r0, [r6, #48]	; 0x30
   1442c:	tst	r0, #256	; 0x100
   14430:	bne	1460c <__assert_fail@plt+0x3818>
   14434:	ldr	r2, [r6, #44]	; 0x2c
   14438:	ldr	r3, [pc, #1696]	; 14ae0 <__assert_fail@plt+0x3cec>
   1443c:	cmp	r2, #0
   14440:	mvnne	r3, #0
   14444:	str	r3, [sp, #24]
   14448:	ldr	r3, [sp, #40]	; 0x28
   1444c:	cmp	r3, #2
   14450:	beq	148b4 <__assert_fail@plt+0x3ac0>
   14454:	ldr	r3, [r6, #48]	; 0x30
   14458:	and	r3, r3, #56	; 0x38
   1445c:	cmp	r3, #24
   14460:	beq	149d0 <__assert_fail@plt+0x3bdc>
   14464:	ldr	r3, [sp, #40]	; 0x28
   14468:	mov	r4, #1
   1446c:	sub	r5, r3, #3
   14470:	clz	r5, r5
   14474:	lsr	r5, r5, #5
   14478:	ldr	r3, [r6, #48]	; 0x30
   1447c:	tst	r3, #512	; 0x200
   14480:	bne	14924 <__assert_fail@plt+0x3b30>
   14484:	ldr	r2, [sp, #60]	; 0x3c
   14488:	cmp	r2, #0
   1448c:	blt	144a8 <__assert_fail@plt+0x36b4>
   14490:	mov	r3, #0
   14494:	ldr	r1, [sp, #8]
   14498:	mov	r0, r6
   1449c:	bl	13b38 <__assert_fail@plt+0x2d44>
   144a0:	cmp	r0, #0
   144a4:	beq	13e20 <__assert_fail@plt+0x302c>
   144a8:	tst	r4, r5
   144ac:	bne	14a28 <__assert_fail@plt+0x3c34>
   144b0:	ldr	r4, [sp, #8]
   144b4:	ldrh	r3, [r4, #58]	; 0x3a
   144b8:	ldr	r0, [r4, #12]
   144bc:	orr	r3, r3, #1
   144c0:	strh	r3, [r4, #58]	; 0x3a
   144c4:	bl	10ddc <closedir@plt>
   144c8:	ldr	r0, [r6, #48]	; 0x30
   144cc:	mov	r3, #0
   144d0:	tst	r0, #512	; 0x200
   144d4:	str	r3, [r4, #12]
   144d8:	beq	144f4 <__assert_fail@plt+0x3700>
   144dc:	ldr	r3, [sp, #60]	; 0x3c
   144e0:	cmp	r3, #0
   144e4:	blt	144f4 <__assert_fail@plt+0x3700>
   144e8:	mov	r0, r3
   144ec:	bl	10dc4 <close@plt>
   144f0:	ldr	r0, [r6, #48]	; 0x30
   144f4:	ldr	r2, [sp, #8]
   144f8:	mov	r3, #0
   144fc:	str	r3, [sp, #52]	; 0x34
   14500:	str	r3, [r2, #12]
   14504:	b	13e30 <__assert_fail@plt+0x303c>
   14508:	mov	r3, #11
   1450c:	strh	r3, [r4, #56]	; 0x38
   14510:	mov	r3, #9
   14514:	b	14064 <__assert_fail@plt+0x3270>
   14518:	tst	r3, #1
   1451c:	moveq	r2, #32768	; 0x8000
   14520:	beq	14400 <__assert_fail@plt+0x360c>
   14524:	ldr	r2, [ip, #48]	; 0x30
   14528:	cmp	r2, #0
   1452c:	movne	r2, #32768	; 0x8000
   14530:	moveq	r2, #0
   14534:	b	14400 <__assert_fail@plt+0x360c>
   14538:	ldr	r0, [r6, #8]
   1453c:	cmp	r8, #0
   14540:	movne	r2, r0
   14544:	beq	14558 <__assert_fail@plt+0x3764>
   14548:	str	r8, [r2], #4
   1454c:	ldr	r8, [r8, #8]
   14550:	cmp	r8, #0
   14554:	bne	14548 <__assert_fail@plt+0x3754>
   14558:	mov	r3, r4
   1455c:	mov	r2, #4
   14560:	mov	r1, sl
   14564:	bl	10d88 <qsort@plt>
   14568:	ldr	ip, [r6, #8]
   1456c:	sub	r3, sl, #1
   14570:	mov	r2, ip
   14574:	ldr	r8, [ip]
   14578:	ldr	r1, [r2]
   1457c:	ldr	r0, [r2, #4]!
   14580:	subs	r3, r3, #1
   14584:	str	r0, [r1, #8]
   14588:	bne	14578 <__assert_fail@plt+0x3784>
   1458c:	add	sl, ip, sl, lsl #2
   14590:	mov	r0, r8
   14594:	ldr	r2, [sl, #-4]
   14598:	str	r3, [r2, #8]
   1459c:	add	sp, sp, #68	; 0x44
   145a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145a4:	ldr	r3, [sp, #8]
   145a8:	ldr	r3, [r3, #48]	; 0x30
   145ac:	cmp	r3, #0
   145b0:	bne	14370 <__assert_fail@plt+0x357c>
   145b4:	ldr	r2, [r6, #48]	; 0x30
   145b8:	tst	r2, #4
   145bc:	movne	r5, r3
   145c0:	addne	r4, r6, #60	; 0x3c
   145c4:	bne	145f4 <__assert_fail@plt+0x3800>
   145c8:	tst	r2, #512	; 0x200
   145cc:	bne	14a40 <__assert_fail@plt+0x3c4c>
   145d0:	ldr	r0, [r6, #28]
   145d4:	bl	10d7c <fchdir@plt>
   145d8:	add	r4, r6, #60	; 0x3c
   145dc:	adds	r5, r0, #0
   145e0:	movne	r5, #1
   145e4:	b	145f4 <__assert_fail@plt+0x3800>
   145e8:	bl	18f1c <__assert_fail@plt+0x8128>
   145ec:	cmp	r0, #0
   145f0:	bge	14874 <__assert_fail@plt+0x3a80>
   145f4:	mov	r0, r4
   145f8:	bl	18ed0 <__assert_fail@plt+0x80dc>
   145fc:	cmp	r0, #0
   14600:	mov	r0, r4
   14604:	beq	145e8 <__assert_fail@plt+0x37f4>
   14608:	b	14390 <__assert_fail@plt+0x359c>
   1460c:	ldr	r5, [sp, #8]
   14610:	add	r1, r6, #56	; 0x38
   14614:	mov	r2, r5
   14618:	bl	13a80 <__assert_fail@plt+0x2c8c>
   1461c:	mov	r3, #0
   14620:	mov	r2, r5
   14624:	ldr	r1, [r6, #48]	; 0x30
   14628:	ldr	r0, [r6, #32]
   1462c:	bl	13934 <__assert_fail@plt+0x2b40>
   14630:	ldr	r2, [r6, #48]	; 0x30
   14634:	ldr	r3, [pc, #1192]	; 14ae4 <__assert_fail@plt+0x3cf0>
   14638:	mov	r7, r5
   1463c:	and	r3, r3, r2
   14640:	cmp	r3, #0
   14644:	beq	148c8 <__assert_fail@plt+0x3ad4>
   14648:	mov	r0, #24
   1464c:	bl	1910c <__assert_fail@plt+0x8318>
   14650:	subs	r4, r0, #0
   14654:	beq	14a6c <__assert_fail@plt+0x3c78>
   14658:	ldrd	r0, [r5, #160]	; 0xa0
   1465c:	ldrd	r2, [r5, #64]	; 0x40
   14660:	str	r5, [r4, #16]
   14664:	strd	r0, [r4, #8]
   14668:	strd	r2, [r4]
   1466c:	mov	r1, r4
   14670:	ldr	r0, [r6, #56]	; 0x38
   14674:	bl	18700 <__assert_fail@plt+0x790c>
   14678:	cmp	r4, r0
   1467c:	mov	r5, r0
   14680:	beq	14434 <__assert_fail@plt+0x3640>
   14684:	mov	r0, r4
   14688:	bl	136fc <__assert_fail@plt+0x2908>
   1468c:	cmp	r5, #0
   14690:	beq	14a6c <__assert_fail@plt+0x3c78>
   14694:	ldr	r2, [r5, #16]
   14698:	mov	r3, #2
   1469c:	str	r2, [r7]
   146a0:	strh	r3, [r7, #56]	; 0x38
   146a4:	b	14434 <__assert_fail@plt+0x3640>
   146a8:	ldr	r3, [fp]
   146ac:	ldr	r8, [sp, #16]
   146b0:	cmp	r3, #0
   146b4:	beq	146d8 <__assert_fail@plt+0x38e4>
   146b8:	ldr	r2, [sp, #44]	; 0x2c
   146bc:	ldr	r1, [sp, #8]
   146c0:	cmp	sl, #0
   146c4:	cmpeq	r2, #0
   146c8:	moveq	r2, #4
   146cc:	movne	r2, #7
   146d0:	str	r3, [r1, #32]
   146d4:	strh	r2, [r1, #56]	; 0x38
   146d8:	ldr	r4, [sp, #8]
   146dc:	ldr	r0, [r4, #12]
   146e0:	cmp	r0, #0
   146e4:	beq	142b0 <__assert_fail@plt+0x34bc>
   146e8:	bl	10ddc <closedir@plt>
   146ec:	mov	r3, #0
   146f0:	str	r3, [r4, #12]
   146f4:	ldr	r3, [sp, #36]	; 0x24
   146f8:	cmp	r3, #0
   146fc:	beq	142bc <__assert_fail@plt+0x34c8>
   14700:	ldr	r1, [r6, #4]
   14704:	ldr	r0, [r6, #24]
   14708:	cmp	r1, #0
   1470c:	beq	1473c <__assert_fail@plt+0x3948>
   14710:	ldr	r3, [r1, #24]
   14714:	add	r2, r1, #168	; 0xa8
   14718:	cmp	r3, r2
   1471c:	ldrne	r2, [r1, #28]
   14720:	str	r0, [r1, #28]
   14724:	subne	r3, r3, r2
   14728:	addne	r3, r0, r3
   1472c:	strne	r3, [r1, #24]
   14730:	ldr	r1, [r1, #8]
   14734:	cmp	r1, #0
   14738:	bne	14710 <__assert_fail@plt+0x391c>
   1473c:	mov	r3, r8
   14740:	b	14770 <__assert_fail@plt+0x397c>
   14744:	ldr	r2, [r3, #24]
   14748:	cmp	r2, r1
   1474c:	ldrne	r1, [r3, #28]
   14750:	str	r0, [r3, #28]
   14754:	subne	r2, r2, r1
   14758:	addne	r2, r0, r2
   1475c:	strne	r2, [r3, #24]
   14760:	ldr	r2, [r3, #8]
   14764:	cmp	r2, #0
   14768:	ldreq	r2, [r3, #4]
   1476c:	mov	r3, r2
   14770:	ldr	r2, [r3, #48]	; 0x30
   14774:	add	r1, r3, #168	; 0xa8
   14778:	cmp	r2, #0
   1477c:	bge	14744 <__assert_fail@plt+0x3950>
   14780:	b	142bc <__assert_fail@plt+0x34c8>
   14784:	ldr	r2, [r6, #40]	; 0x28
   14788:	ldr	r3, [pc, #856]	; 14ae8 <__assert_fail@plt+0x3cf4>
   1478c:	cmp	sl, r2
   14790:	str	r3, [r6, #44]	; 0x2c
   14794:	bhi	14848 <__assert_fail@plt+0x3a54>
   14798:	ldr	r0, [r6, #8]
   1479c:	cmp	r8, #0
   147a0:	movne	r3, r0
   147a4:	beq	147b8 <__assert_fail@plt+0x39c4>
   147a8:	str	r8, [r3], #4
   147ac:	ldr	r8, [r8, #8]
   147b0:	cmp	r8, #0
   147b4:	bne	147a8 <__assert_fail@plt+0x39b4>
   147b8:	ldr	r3, [pc, #808]	; 14ae8 <__assert_fail@plt+0x3cf4>
   147bc:	mov	r2, #4
   147c0:	mov	r1, sl
   147c4:	bl	10d88 <qsort@plt>
   147c8:	ldr	ip, [r6, #8]
   147cc:	subs	r3, sl, #1
   147d0:	ldr	r8, [ip]
   147d4:	moveq	r3, r8
   147d8:	beq	147fc <__assert_fail@plt+0x3a08>
   147dc:	mov	r2, ip
   147e0:	ldr	r1, [r2]
   147e4:	ldr	r0, [r2, #4]!
   147e8:	subs	r3, r3, #1
   147ec:	str	r0, [r1, #8]
   147f0:	bne	147e0 <__assert_fail@plt+0x39ec>
   147f4:	add	ip, ip, sl, lsl #2
   147f8:	ldr	r3, [ip, #-4]
   147fc:	mov	r2, #0
   14800:	str	r2, [r3, #8]
   14804:	mov	r3, #0
   14808:	mov	r0, r8
   1480c:	str	r3, [r6, #44]	; 0x2c
   14810:	add	sp, sp, #68	; 0x44
   14814:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14818:	ldr	r4, [sp, #8]
   1481c:	mov	r8, #0
   14820:	ldr	r0, [r4, #12]
   14824:	bl	10ddc <closedir@plt>
   14828:	ldr	r3, [sp, #40]	; 0x28
   1482c:	str	r8, [r4, #12]
   14830:	cmp	r3, #3
   14834:	beq	14994 <__assert_fail@plt+0x3ba0>
   14838:	mov	r8, #0
   1483c:	mov	r0, r8
   14840:	add	sp, sp, #68	; 0x44
   14844:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14848:	add	r1, sl, #40	; 0x28
   1484c:	cmn	r1, #-1073741823	; 0xc0000001
   14850:	str	r1, [r6, #40]	; 0x28
   14854:	bhi	148f0 <__assert_fail@plt+0x3afc>
   14858:	lsl	r1, r1, #2
   1485c:	ldr	r0, [r6, #8]
   14860:	bl	19138 <__assert_fail@plt+0x8344>
   14864:	cmp	r0, #0
   14868:	beq	148f0 <__assert_fail@plt+0x3afc>
   1486c:	str	r0, [r6, #8]
   14870:	b	1479c <__assert_fail@plt+0x39a8>
   14874:	bl	10dc4 <close@plt>
   14878:	b	145f4 <__assert_fail@plt+0x3800>
   1487c:	ldr	r0, [r6, #8]
   14880:	bl	136fc <__assert_fail@plt+0x2908>
   14884:	mov	r3, #0
   14888:	str	r3, [r6, #8]
   1488c:	str	r3, [r6, #40]	; 0x28
   14890:	b	14164 <__assert_fail@plt+0x3370>
   14894:	str	r0, [sp]
   14898:	ldr	r0, [r6, #24]
   1489c:	ldr	r8, [sp, #16]
   148a0:	bl	136fc <__assert_fail@plt+0x2908>
   148a4:	ldr	r1, [sp]
   148a8:	ldr	r5, [fp]
   148ac:	str	r1, [r6, #24]
   148b0:	b	14234 <__assert_fail@plt+0x3440>
   148b4:	mov	r3, #0
   148b8:	str	r3, [sp, #52]	; 0x34
   148bc:	ldr	r0, [r6, #48]	; 0x30
   148c0:	ldr	r2, [sp, #8]
   148c4:	b	13e30 <__assert_fail@plt+0x303c>
   148c8:	ldr	r4, [sp, #8]
   148cc:	ldr	r0, [r6, #56]	; 0x38
   148d0:	add	r1, r4, #64	; 0x40
   148d4:	bl	191b8 <__assert_fail@plt+0x83c4>
   148d8:	cmp	r0, #0
   148dc:	movne	r2, r4
   148e0:	movne	r3, #2
   148e4:	strne	r4, [r2]
   148e8:	strhne	r3, [r4, #56]	; 0x38
   148ec:	b	14434 <__assert_fail@plt+0x3640>
   148f0:	ldr	r0, [r6, #8]
   148f4:	bl	136fc <__assert_fail@plt+0x2908>
   148f8:	mov	r3, #0
   148fc:	str	r3, [r6, #8]
   14900:	str	r3, [r6, #40]	; 0x28
   14904:	b	14804 <__assert_fail@plt+0x3a10>
   14908:	ldr	r2, [sp, #8]
   1490c:	ldrh	r3, [r2, #56]	; 0x38
   14910:	cmp	r3, #7
   14914:	cmpne	r3, #4
   14918:	movne	r3, #6
   1491c:	strhne	r3, [r2, #56]	; 0x38
   14920:	b	143ac <__assert_fail@plt+0x35b8>
   14924:	mov	r2, #3
   14928:	ldr	r1, [pc, #444]	; 14aec <__assert_fail@plt+0x3cf8>
   1492c:	ldr	r0, [sp, #60]	; 0x3c
   14930:	bl	19284 <__assert_fail@plt+0x8490>
   14934:	mov	r2, r0
   14938:	str	r0, [sp, #60]	; 0x3c
   1493c:	b	14488 <__assert_fail@plt+0x3694>
   14940:	ldr	r3, [r6, #48]	; 0x30
   14944:	ldr	r1, [sp, #8]
   14948:	orr	r3, r3, #8192	; 0x2000
   1494c:	mov	r2, #7
   14950:	cmp	r8, #0
   14954:	strh	r2, [r1, #56]	; 0x38
   14958:	str	r3, [r6, #48]	; 0x30
   1495c:	beq	14838 <__assert_fail@plt+0x3a44>
   14960:	ldr	r3, [r8, #12]
   14964:	ldr	r4, [r8, #8]
   14968:	subs	r0, r3, #0
   1496c:	beq	14974 <__assert_fail@plt+0x3b80>
   14970:	bl	10ddc <closedir@plt>
   14974:	mov	r0, r8
   14978:	bl	136fc <__assert_fail@plt+0x2908>
   1497c:	subs	r8, r4, #0
   14980:	bne	14960 <__assert_fail@plt+0x3b6c>
   14984:	b	14838 <__assert_fail@plt+0x3a44>
   14988:	ldr	r3, [sp, #40]	; 0x28
   1498c:	cmp	r3, #3
   14990:	bne	14838 <__assert_fail@plt+0x3a44>
   14994:	ldr	r4, [sp, #8]
   14998:	mov	r3, #4
   1499c:	strh	r3, [r4, #56]	; 0x38
   149a0:	bl	10cf8 <__errno_location@plt>
   149a4:	ldr	r3, [r0]
   149a8:	str	r3, [r4, #32]
   149ac:	b	14164 <__assert_fail@plt+0x3370>
   149b0:	ldr	r4, [sp, #8]
   149b4:	mov	r3, #0
   149b8:	mov	r2, r4
   149bc:	ldr	r1, [r6, #48]	; 0x30
   149c0:	ldr	r0, [r6, #32]
   149c4:	bl	13934 <__assert_fail@plt+0x2b40>
   149c8:	strh	r0, [r4, #56]	; 0x38
   149cc:	b	14434 <__assert_fail@plt+0x3640>
   149d0:	ldr	r3, [sp, #8]
   149d4:	ldr	r3, [r3, #84]	; 0x54
   149d8:	cmp	r3, #2
   149dc:	bne	14464 <__assert_fail@plt+0x3670>
   149e0:	ldr	r1, [sp, #60]	; 0x3c
   149e4:	ldr	r0, [sp, #8]
   149e8:	bl	13824 <__assert_fail@plt+0x2a30>
   149ec:	ldr	r3, [pc, #220]	; 14ad0 <__assert_fail@plt+0x3cdc>
   149f0:	cmp	r0, r3
   149f4:	beq	14464 <__assert_fail@plt+0x3670>
   149f8:	bgt	14a80 <__assert_fail@plt+0x3c8c>
   149fc:	ldr	r3, [pc, #212]	; 14ad8 <__assert_fail@plt+0x3ce4>
   14a00:	cmp	r0, r3
   14a04:	beq	14464 <__assert_fail@plt+0x3670>
   14a08:	cmp	r0, #0
   14a0c:	beq	14464 <__assert_fail@plt+0x3670>
   14a10:	ldr	r3, [sp, #40]	; 0x28
   14a14:	cmp	r3, #3
   14a18:	bne	148b4 <__assert_fail@plt+0x3ac0>
   14a1c:	mov	r5, #1
   14a20:	mov	r4, #0
   14a24:	b	14478 <__assert_fail@plt+0x3684>
   14a28:	bl	10cf8 <__errno_location@plt>
   14a2c:	ldr	r2, [sp, #8]
   14a30:	mov	r4, r2
   14a34:	ldr	r3, [r0]
   14a38:	str	r3, [r2, #32]
   14a3c:	b	144b4 <__assert_fail@plt+0x36c0>
   14a40:	add	r4, r6, #60	; 0x3c
   14a44:	mov	r0, r4
   14a48:	ldr	r1, [r6, #32]
   14a4c:	bl	18ed8 <__assert_fail@plt+0x80e4>
   14a50:	cmp	r0, #0
   14a54:	blt	14a5c <__assert_fail@plt+0x3c68>
   14a58:	bl	10dc4 <close@plt>
   14a5c:	mvn	r3, #99	; 0x63
   14a60:	str	r3, [r6, #32]
   14a64:	mov	r5, #0
   14a68:	b	145f4 <__assert_fail@plt+0x3800>
   14a6c:	bl	10cf8 <__errno_location@plt>
   14a70:	mov	r3, #12
   14a74:	mov	r8, #0
   14a78:	str	r3, [r0]
   14a7c:	b	14164 <__assert_fail@plt+0x3370>
   14a80:	ldr	r3, [pc, #104]	; 14af0 <__assert_fail@plt+0x3cfc>
   14a84:	cmp	r0, r3
   14a88:	beq	14464 <__assert_fail@plt+0x3670>
   14a8c:	ldr	r3, [pc, #96]	; 14af4 <__assert_fail@plt+0x3d00>
   14a90:	cmp	r0, r3
   14a94:	bne	14a10 <__assert_fail@plt+0x3c1c>
   14a98:	b	14464 <__assert_fail@plt+0x3670>
   14a9c:	ldr	r3, [pc, #60]	; 14ae0 <__assert_fail@plt+0x3cec>
   14aa0:	ldr	r0, [r6, #48]	; 0x30
   14aa4:	str	r3, [sp, #24]
   14aa8:	mov	r3, #1
   14aac:	str	r3, [sp, #52]	; 0x34
   14ab0:	ldr	r2, [sp, #8]
   14ab4:	b	13e30 <__assert_fail@plt+0x303c>
   14ab8:	str	r7, [r4, #80]	; 0x50
   14abc:	mov	r2, #1
   14ac0:	mov	r3, #0
   14ac4:	b	13ef4 <__assert_fail@plt+0x3100>
   14ac8:	strdeq	r9, [r1], -r0
   14acc:	andeq	r2, r0, r0, lsl r7
   14ad0:	andeq	r6, r0, r9, ror #18
   14ad4:			; <UNDEFINED> instruction: 0x01021994
   14ad8:			; <UNDEFINED> instruction: 0xff534d42
   14adc:	andeq	r9, r1, r0, lsr #26
   14ae0:	andeq	r8, r1, r0, lsr #13
   14ae4:	andeq	r0, r0, r2, lsl #2
   14ae8:	strdeq	r3, [r1], -r4
   14aec:	andeq	r0, r0, r6, lsl #8
   14af0:	andeq	r9, r0, r0, lsr #31
   14af4:	movtpl	r4, #24911	; 0x614f
   14af8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14afc:	bic	r8, r1, #4080	; 0xff0
   14b00:	sub	sp, sp, #36	; 0x24
   14b04:	bic	r8, r8, #15
   14b08:	cmp	r8, #0
   14b0c:	str	r2, [sp, #12]
   14b10:	bne	14fb8 <__assert_fail@plt+0x41c4>
   14b14:	and	r3, r1, #516	; 0x204
   14b18:	cmp	r3, #516	; 0x204
   14b1c:	mov	r5, r1
   14b20:	beq	14f1c <__assert_fail@plt+0x4128>
   14b24:	ands	r8, r1, #18
   14b28:	beq	14f1c <__assert_fail@plt+0x4128>
   14b2c:	mov	r9, r0
   14b30:	mov	r1, #96	; 0x60
   14b34:	mov	r0, #1
   14b38:	bl	190c4 <__assert_fail@plt+0x82d0>
   14b3c:	subs	r8, r0, #0
   14b40:	beq	14e74 <__assert_fail@plt+0x4080>
   14b44:	ldr	r3, [sp, #12]
   14b48:	tst	r5, #2
   14b4c:	str	r3, [r8, #44]	; 0x2c
   14b50:	bicne	r3, r5, #512	; 0x200
   14b54:	orrne	r3, r3, #4
   14b58:	strne	r3, [r8, #48]	; 0x30
   14b5c:	ldr	r3, [r9]
   14b60:	streq	r5, [r8, #48]	; 0x30
   14b64:	mvn	r2, #99	; 0x63
   14b68:	cmp	r3, #0
   14b6c:	str	r2, [r8, #32]
   14b70:	beq	1501c <__assert_fail@plt+0x4228>
   14b74:	mov	r6, r9
   14b78:	mov	r4, #0
   14b7c:	mov	r0, r3
   14b80:	bl	10cc8 <strlen@plt>
   14b84:	ldr	r3, [r6, #4]!
   14b88:	cmp	r4, r0
   14b8c:	movcc	r4, r0
   14b90:	cmp	r3, #0
   14b94:	bne	14b7c <__assert_fail@plt+0x3d88>
   14b98:	add	r4, r4, #1
   14b9c:	cmp	r4, #4096	; 0x1000
   14ba0:	movcc	r4, #4096	; 0x1000
   14ba4:	ldr	r3, [r8, #36]	; 0x24
   14ba8:	add	r1, r3, #256	; 0x100
   14bac:	add	r1, r1, r4
   14bb0:	cmp	r3, r1
   14bb4:	bhi	14ee8 <__assert_fail@plt+0x40f4>
   14bb8:	str	r1, [r8, #36]	; 0x24
   14bbc:	ldr	r0, [r8, #24]
   14bc0:	bl	19138 <__assert_fail@plt+0x8344>
   14bc4:	subs	r4, r0, #0
   14bc8:	beq	150b8 <__assert_fail@plt+0x42c4>
   14bcc:	ldr	fp, [r9]
   14bd0:	str	r4, [r8, #24]
   14bd4:	cmp	fp, #0
   14bd8:	beq	14f9c <__assert_fail@plt+0x41a8>
   14bdc:	mov	r0, #176	; 0xb0
   14be0:	bl	1910c <__assert_fail@plt+0x8318>
   14be4:	subs	r3, r0, #0
   14be8:	mov	r0, r3
   14bec:	str	r3, [sp, #16]
   14bf0:	beq	14edc <__assert_fail@plt+0x40e8>
   14bf4:	ldr	r2, [r8, #24]
   14bf8:	ldr	r3, [sp, #12]
   14bfc:	mov	r1, #196608	; 0x30000
   14c00:	cmp	r3, #0
   14c04:	str	r2, [r0, #28]
   14c08:	mov	r3, #0
   14c0c:	mvn	r2, #0
   14c10:	str	r8, [r0, #44]	; 0x2c
   14c14:	strb	r3, [r0, #168]	; 0xa8
   14c18:	str	r3, [r0, #52]	; 0x34
   14c1c:	str	r3, [r0, #32]
   14c20:	str	r3, [r0, #12]
   14c24:	str	r3, [r0, #16]
   14c28:	str	r3, [r0, #20]
   14c2c:	str	r1, [r0, #58]	; 0x3a
   14c30:	str	r2, [r0, #48]	; 0x30
   14c34:	ldr	fp, [r9]
   14c38:	beq	15010 <__assert_fail@plt+0x421c>
   14c3c:	ldr	r3, [r8, #48]	; 0x30
   14c40:	lsr	r3, r3, #10
   14c44:	and	r3, r3, #1
   14c48:	str	r3, [sp, #24]
   14c4c:	cmp	fp, #0
   14c50:	beq	150d0 <__assert_fail@plt+0x42dc>
   14c54:	lsr	r5, r5, #11
   14c58:	mov	r3, #0
   14c5c:	eor	r5, r5, #1
   14c60:	mov	r6, r3
   14c64:	str	r3, [sp, #28]
   14c68:	and	r3, r5, #1
   14c6c:	str	r3, [sp, #20]
   14c70:	mov	sl, r6
   14c74:	mov	r7, r6
   14c78:	b	14cb8 <__assert_fail@plt+0x3ec4>
   14c7c:	mov	r3, #11
   14c80:	strh	r3, [r4, #56]	; 0x38
   14c84:	mov	r2, #2
   14c88:	mov	r3, #0
   14c8c:	strd	r2, [r4, #112]	; 0x70
   14c90:	ldr	r3, [sp, #12]
   14c94:	cmp	r3, #0
   14c98:	beq	14d98 <__assert_fail@plt+0x3fa4>
   14c9c:	ldr	fp, [r9, #4]!
   14ca0:	str	r7, [r4, #8]
   14ca4:	cmp	fp, #0
   14ca8:	mov	r7, r4
   14cac:	add	r4, sl, #1
   14cb0:	beq	14dc4 <__assert_fail@plt+0x3fd0>
   14cb4:	mov	sl, r4
   14cb8:	mov	r0, fp
   14cbc:	bl	10cc8 <strlen@plt>
   14cc0:	ldr	r3, [sp, #20]
   14cc4:	cmp	r0, #2
   14cc8:	movls	r3, #0
   14ccc:	andhi	r3, r3, #1
   14cd0:	cmp	r3, #0
   14cd4:	mov	r5, r0
   14cd8:	beq	14cf0 <__assert_fail@plt+0x3efc>
   14cdc:	sub	r2, r0, #1
   14ce0:	add	r3, fp, r2
   14ce4:	ldrb	r2, [fp, r2]
   14ce8:	cmp	r2, #47	; 0x2f
   14cec:	beq	14e80 <__assert_fail@plt+0x408c>
   14cf0:	add	r0, r5, #176	; 0xb0
   14cf4:	bic	r0, r0, #7
   14cf8:	bl	1910c <__assert_fail@plt+0x8318>
   14cfc:	subs	r4, r0, #0
   14d00:	beq	14ea8 <__assert_fail@plt+0x40b4>
   14d04:	add	r3, r4, #168	; 0xa8
   14d08:	mov	r1, fp
   14d0c:	mov	r0, r3
   14d10:	mov	r2, r5
   14d14:	bl	10bf0 <memcpy@plt>
   14d18:	add	r1, r4, r5
   14d1c:	ldr	r2, [r8, #24]
   14d20:	strb	r6, [r1, #168]	; 0xa8
   14d24:	str	r5, [r4, #52]	; 0x34
   14d28:	str	r8, [r4, #44]	; 0x2c
   14d2c:	str	r6, [r4, #32]
   14d30:	str	r6, [r4, #12]
   14d34:	str	r6, [r4, #16]
   14d38:	str	r6, [r4, #20]
   14d3c:	str	r6, [r4, #48]	; 0x30
   14d40:	str	r2, [r4, #28]
   14d44:	mov	r3, r0
   14d48:	ldr	r0, [sp, #24]
   14d4c:	str	r3, [r4, #24]
   14d50:	mov	r3, #196608	; 0x30000
   14d54:	cmp	r7, #0
   14d58:	moveq	r0, #0
   14d5c:	andne	r0, r0, #1
   14d60:	str	r3, [r4, #58]	; 0x3a
   14d64:	ldr	r3, [sp, #16]
   14d68:	cmp	r0, #0
   14d6c:	str	r3, [r4, #4]
   14d70:	bne	14c7c <__assert_fail@plt+0x3e88>
   14d74:	mov	r3, r6
   14d78:	mov	r2, r4
   14d7c:	ldr	r1, [r8, #48]	; 0x30
   14d80:	ldr	r0, [r8, #32]
   14d84:	bl	13934 <__assert_fail@plt+0x2b40>
   14d88:	ldr	r3, [sp, #12]
   14d8c:	cmp	r3, #0
   14d90:	strh	r0, [r4, #56]	; 0x38
   14d94:	bne	14c9c <__assert_fail@plt+0x3ea8>
   14d98:	cmp	r7, #0
   14d9c:	str	r3, [r4, #8]
   14da0:	ldrne	r3, [sp, #28]
   14da4:	ldr	fp, [r9, #4]!
   14da8:	strne	r4, [sp, #28]
   14dac:	strne	r4, [r3, #8]
   14db0:	streq	r4, [sp, #28]
   14db4:	moveq	r7, r4
   14db8:	cmp	fp, #0
   14dbc:	add	r4, sl, #1
   14dc0:	bne	14cb4 <__assert_fail@plt+0x3ec0>
   14dc4:	ldr	r3, [sp, #12]
   14dc8:	cmp	r3, #0
   14dcc:	cmpne	r4, #1
   14dd0:	bhi	14fd4 <__assert_fail@plt+0x41e0>
   14dd4:	mov	r0, #176	; 0xb0
   14dd8:	bl	1910c <__assert_fail@plt+0x8318>
   14ddc:	cmp	r0, #0
   14de0:	beq	150c8 <__assert_fail@plt+0x42d4>
   14de4:	ldr	r2, [r8, #48]	; 0x30
   14de8:	ldr	r3, [pc, #744]	; 150d8 <__assert_fail@plt+0x42e4>
   14dec:	ldr	lr, [r8, #24]
   14df0:	and	r3, r3, r2
   14df4:	mov	r1, #0
   14df8:	cmp	r3, #0
   14dfc:	mov	ip, #3
   14e00:	mov	r2, #9
   14e04:	mov	r3, #1
   14e08:	str	r8, [r0, #44]	; 0x2c
   14e0c:	str	r0, [r8]
   14e10:	str	r7, [r0, #8]
   14e14:	str	lr, [r0, #28]
   14e18:	strb	r1, [r0, #168]	; 0xa8
   14e1c:	str	r1, [r0, #52]	; 0x34
   14e20:	str	r1, [r0, #32]
   14e24:	str	r1, [r0, #12]
   14e28:	strh	r1, [r0, #58]	; 0x3a
   14e2c:	str	r1, [r0, #16]
   14e30:	str	r1, [r0, #20]
   14e34:	strh	ip, [r0, #60]	; 0x3c
   14e38:	strh	r2, [r0, #56]	; 0x38
   14e3c:	str	r3, [r0, #48]	; 0x30
   14e40:	bne	14f34 <__assert_fail@plt+0x4140>
   14e44:	mov	r0, #32
   14e48:	bl	1910c <__assert_fail@plt+0x8318>
   14e4c:	cmp	r0, #0
   14e50:	str	r0, [r8, #56]	; 0x38
   14e54:	beq	14ea8 <__assert_fail@plt+0x40b4>
   14e58:	bl	19194 <__assert_fail@plt+0x83a0>
   14e5c:	ldr	r3, [r8, #48]	; 0x30
   14e60:	tst	r3, #516	; 0x204
   14e64:	beq	14f64 <__assert_fail@plt+0x4170>
   14e68:	mvn	r1, #0
   14e6c:	add	r0, r8, #60	; 0x3c
   14e70:	bl	18ea4 <__assert_fail@plt+0x80b0>
   14e74:	mov	r0, r8
   14e78:	add	sp, sp, #36	; 0x24
   14e7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e80:	ldrb	r2, [r3, #-1]!
   14e84:	cmp	r2, #47	; 0x2f
   14e88:	bne	14cf0 <__assert_fail@plt+0x3efc>
   14e8c:	sub	r5, r5, #1
   14e90:	cmp	r5, #1
   14e94:	bne	14e80 <__assert_fail@plt+0x408c>
   14e98:	mov	r0, #176	; 0xb0
   14e9c:	bl	1910c <__assert_fail@plt+0x8318>
   14ea0:	subs	r4, r0, #0
   14ea4:	bne	14d04 <__assert_fail@plt+0x3f10>
   14ea8:	cmp	r7, #0
   14eac:	beq	14ed4 <__assert_fail@plt+0x40e0>
   14eb0:	ldr	r3, [r7, #12]
   14eb4:	ldr	r4, [r7, #8]
   14eb8:	subs	r0, r3, #0
   14ebc:	beq	14ec4 <__assert_fail@plt+0x40d0>
   14ec0:	bl	10ddc <closedir@plt>
   14ec4:	mov	r0, r7
   14ec8:	bl	136fc <__assert_fail@plt+0x2908>
   14ecc:	subs	r7, r4, #0
   14ed0:	bne	14eb0 <__assert_fail@plt+0x40bc>
   14ed4:	ldr	r0, [sp, #16]
   14ed8:	bl	136fc <__assert_fail@plt+0x2908>
   14edc:	ldr	r0, [r8, #24]
   14ee0:	bl	136fc <__assert_fail@plt+0x2908>
   14ee4:	b	14f04 <__assert_fail@plt+0x4110>
   14ee8:	ldr	r0, [r8, #24]
   14eec:	bl	136fc <__assert_fail@plt+0x2908>
   14ef0:	mov	r3, #0
   14ef4:	str	r3, [r8, #24]
   14ef8:	bl	10cf8 <__errno_location@plt>
   14efc:	mov	r3, #36	; 0x24
   14f00:	str	r3, [r0]
   14f04:	mov	r0, r8
   14f08:	bl	136fc <__assert_fail@plt+0x2908>
   14f0c:	mov	r8, #0
   14f10:	mov	r0, r8
   14f14:	add	sp, sp, #36	; 0x24
   14f18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f1c:	bl	10cf8 <__errno_location@plt>
   14f20:	mov	r3, #22
   14f24:	str	r3, [r0]
   14f28:	mov	r0, r8
   14f2c:	add	sp, sp, #36	; 0x24
   14f30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f34:	ldr	r3, [pc, #416]	; 150dc <__assert_fail@plt+0x42e8>
   14f38:	ldr	r2, [pc, #416]	; 150e0 <__assert_fail@plt+0x42ec>
   14f3c:	str	r3, [sp]
   14f40:	mov	r0, #31
   14f44:	ldr	r3, [pc, #408]	; 150e4 <__assert_fail@plt+0x42f0>
   14f48:	bl	17d98 <__assert_fail@plt+0x6fa4>
   14f4c:	cmp	r0, #0
   14f50:	str	r0, [r8, #56]	; 0x38
   14f54:	beq	14ea8 <__assert_fail@plt+0x40b4>
   14f58:	ldr	r3, [r8, #48]	; 0x30
   14f5c:	tst	r3, #516	; 0x204
   14f60:	bne	14e68 <__assert_fail@plt+0x4074>
   14f64:	ldr	r2, [pc, #380]	; 150e8 <__assert_fail@plt+0x42f4>
   14f68:	tst	r3, #16
   14f6c:	ldr	r1, [pc, #376]	; 150ec <__assert_fail@plt+0x42f8>
   14f70:	moveq	r1, r2
   14f74:	tst	r3, #512	; 0x200
   14f78:	bne	1508c <__assert_fail@plt+0x4298>
   14f7c:	ldr	r0, [pc, #364]	; 150f0 <__assert_fail@plt+0x42fc>
   14f80:	bl	19458 <__assert_fail@plt+0x8664>
   14f84:	cmp	r0, #0
   14f88:	str	r0, [r8, #28]
   14f8c:	ldrlt	r3, [r8, #48]	; 0x30
   14f90:	orrlt	r3, r3, #4
   14f94:	strlt	r3, [r8, #48]	; 0x30
   14f98:	b	14e68 <__assert_fail@plt+0x4074>
   14f9c:	ldr	r3, [sp, #12]
   14fa0:	cmp	r3, #0
   14fa4:	strne	fp, [sp, #16]
   14fa8:	bne	14c3c <__assert_fail@plt+0x3e48>
   14fac:	str	r3, [sp, #16]
   14fb0:	mov	r7, r3
   14fb4:	b	14dd4 <__assert_fail@plt+0x3fe0>
   14fb8:	bl	10cf8 <__errno_location@plt>
   14fbc:	mov	r8, #0
   14fc0:	mov	r3, #22
   14fc4:	str	r3, [r0]
   14fc8:	mov	r0, r8
   14fcc:	add	sp, sp, #36	; 0x24
   14fd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fd4:	ldr	r2, [r8, #40]	; 0x28
   14fd8:	ldr	r5, [r8, #44]	; 0x2c
   14fdc:	cmp	r4, r2
   14fe0:	bls	15024 <__assert_fail@plt+0x4230>
   14fe4:	add	r1, sl, #41	; 0x29
   14fe8:	cmn	r1, #-1073741823	; 0xc0000001
   14fec:	str	r1, [r8, #40]	; 0x28
   14ff0:	bhi	150a0 <__assert_fail@plt+0x42ac>
   14ff4:	lsl	r1, r1, #2
   14ff8:	ldr	r0, [r8, #8]
   14ffc:	bl	19138 <__assert_fail@plt+0x8344>
   15000:	cmp	r0, #0
   15004:	beq	150a0 <__assert_fail@plt+0x42ac>
   15008:	str	r0, [r8, #8]
   1500c:	b	15028 <__assert_fail@plt+0x4234>
   15010:	mov	r3, #1
   15014:	str	r3, [sp, #24]
   15018:	b	14c4c <__assert_fail@plt+0x3e58>
   1501c:	mov	r4, #4096	; 0x1000
   15020:	b	14ba4 <__assert_fail@plt+0x3db0>
   15024:	ldr	r0, [r8, #8]
   15028:	mov	r2, r0
   1502c:	str	r7, [r2], #4
   15030:	ldr	r7, [r7, #8]
   15034:	cmp	r7, #0
   15038:	bne	1502c <__assert_fail@plt+0x4238>
   1503c:	mov	r3, r5
   15040:	mov	r1, r4
   15044:	mov	r2, #4
   15048:	bl	10d88 <qsort@plt>
   1504c:	ldr	ip, [r8, #8]
   15050:	cmp	sl, #0
   15054:	ldr	r7, [ip]
   15058:	moveq	r3, r7
   1505c:	beq	15080 <__assert_fail@plt+0x428c>
   15060:	mov	r2, sl
   15064:	mov	r3, ip
   15068:	ldr	r1, [r3]
   1506c:	ldr	r0, [r3, #4]!
   15070:	subs	r2, r2, #1
   15074:	str	r0, [r1, #8]
   15078:	bne	15068 <__assert_fail@plt+0x4274>
   1507c:	ldr	r3, [ip, sl, lsl #2]
   15080:	mov	r2, #0
   15084:	str	r2, [r3, #8]
   15088:	b	14dd4 <__assert_fail@plt+0x3fe0>
   1508c:	mov	r2, r1
   15090:	ldr	r0, [r8, #32]
   15094:	ldr	r1, [pc, #84]	; 150f0 <__assert_fail@plt+0x42fc>
   15098:	bl	18ffc <__assert_fail@plt+0x8208>
   1509c:	b	14f84 <__assert_fail@plt+0x4190>
   150a0:	ldr	r0, [r8, #8]
   150a4:	bl	136fc <__assert_fail@plt+0x2908>
   150a8:	mov	r3, #0
   150ac:	str	r3, [r8, #8]
   150b0:	str	r3, [r8, #40]	; 0x28
   150b4:	b	14dd4 <__assert_fail@plt+0x3fe0>
   150b8:	ldr	r0, [r8, #24]
   150bc:	bl	136fc <__assert_fail@plt+0x2908>
   150c0:	str	r4, [r8, #24]
   150c4:	b	14f04 <__assert_fail@plt+0x4110>
   150c8:	str	r0, [r8]
   150cc:	b	14ea8 <__assert_fail@plt+0x40b4>
   150d0:	mov	r7, fp
   150d4:	b	14dd4 <__assert_fail@plt+0x3fe0>
   150d8:	andeq	r0, r0, r2, lsl #2
   150dc:	strdeq	r3, [r1], -ip
   150e0:	muleq	r1, r8, r7
   150e4:	andeq	r3, r1, r4, asr r7
   150e8:	andeq	r4, r8, r0, lsl #18
   150ec:	andeq	ip, r8, r0, lsl #18
   150f0:	andeq	r9, r1, r4, lsr #26
   150f4:	ldr	r3, [r0]
   150f8:	push	{r4, r5, r6, lr}
   150fc:	cmp	r3, #0
   15100:	mov	r6, r0
   15104:	beq	15140 <__assert_fail@plt+0x434c>
   15108:	ldr	r2, [r3, #48]	; 0x30
   1510c:	cmp	r2, #0
   15110:	blt	15280 <__assert_fail@plt+0x448c>
   15114:	ldr	r4, [r3, #8]
   15118:	mov	r0, r3
   1511c:	cmp	r4, #0
   15120:	ldreq	r4, [r3, #4]
   15124:	bl	136fc <__assert_fail@plt+0x2908>
   15128:	mov	r3, r4
   1512c:	ldr	r2, [r4, #48]	; 0x30
   15130:	cmp	r2, #0
   15134:	bge	15114 <__assert_fail@plt+0x4320>
   15138:	mov	r0, r4
   1513c:	bl	136fc <__assert_fail@plt+0x2908>
   15140:	ldr	r4, [r6, #4]
   15144:	cmp	r4, #0
   15148:	beq	15170 <__assert_fail@plt+0x437c>
   1514c:	ldr	r3, [r4, #12]
   15150:	ldr	r5, [r4, #8]
   15154:	subs	r0, r3, #0
   15158:	beq	15160 <__assert_fail@plt+0x436c>
   1515c:	bl	10ddc <closedir@plt>
   15160:	mov	r0, r4
   15164:	bl	136fc <__assert_fail@plt+0x2908>
   15168:	subs	r4, r5, #0
   1516c:	bne	1514c <__assert_fail@plt+0x4358>
   15170:	ldr	r0, [r6, #8]
   15174:	bl	136fc <__assert_fail@plt+0x2908>
   15178:	ldr	r0, [r6, #24]
   1517c:	bl	136fc <__assert_fail@plt+0x2908>
   15180:	ldr	r3, [r6, #48]	; 0x30
   15184:	tst	r3, #512	; 0x200
   15188:	beq	15224 <__assert_fail@plt+0x4430>
   1518c:	ldr	r0, [r6, #32]
   15190:	cmp	r0, #0
   15194:	blt	151a4 <__assert_fail@plt+0x43b0>
   15198:	bl	10dc4 <close@plt>
   1519c:	cmp	r0, #0
   151a0:	bne	15274 <__assert_fail@plt+0x4480>
   151a4:	mov	r5, #0
   151a8:	add	r4, r6, #60	; 0x3c
   151ac:	b	151bc <__assert_fail@plt+0x43c8>
   151b0:	bl	18f1c <__assert_fail@plt+0x8128>
   151b4:	cmp	r0, #0
   151b8:	bge	1521c <__assert_fail@plt+0x4428>
   151bc:	mov	r0, r4
   151c0:	bl	18ed0 <__assert_fail@plt+0x80dc>
   151c4:	cmp	r0, #0
   151c8:	mov	r0, r4
   151cc:	beq	151b0 <__assert_fail@plt+0x43bc>
   151d0:	ldr	r0, [r6, #52]	; 0x34
   151d4:	cmp	r0, #0
   151d8:	beq	151e0 <__assert_fail@plt+0x43ec>
   151dc:	bl	18088 <__assert_fail@plt+0x7294>
   151e0:	ldr	r2, [r6, #48]	; 0x30
   151e4:	ldr	r3, [pc, #204]	; 152b8 <__assert_fail@plt+0x44c4>
   151e8:	ldr	r0, [r6, #56]	; 0x38
   151ec:	and	r3, r3, r2
   151f0:	cmp	r3, #0
   151f4:	beq	1526c <__assert_fail@plt+0x4478>
   151f8:	cmp	r0, #0
   151fc:	beq	15204 <__assert_fail@plt+0x4410>
   15200:	bl	18088 <__assert_fail@plt+0x7294>
   15204:	mov	r0, r6
   15208:	bl	136fc <__assert_fail@plt+0x2908>
   1520c:	cmp	r5, #0
   15210:	bne	152a8 <__assert_fail@plt+0x44b4>
   15214:	mov	r0, r5
   15218:	pop	{r4, r5, r6, pc}
   1521c:	bl	10dc4 <close@plt>
   15220:	b	151bc <__assert_fail@plt+0x43c8>
   15224:	tst	r3, #4
   15228:	bne	151a4 <__assert_fail@plt+0x43b0>
   1522c:	ldr	r0, [r6, #28]
   15230:	bl	10d7c <fchdir@plt>
   15234:	cmp	r0, #0
   15238:	beq	15288 <__assert_fail@plt+0x4494>
   1523c:	bl	10cf8 <__errno_location@plt>
   15240:	mov	r4, r0
   15244:	ldr	r0, [r6, #28]
   15248:	ldr	r5, [r4]
   1524c:	bl	10dc4 <close@plt>
   15250:	adds	r0, r0, #0
   15254:	movne	r0, #1
   15258:	cmp	r5, #0
   1525c:	movne	r0, #0
   15260:	cmp	r0, #0
   15264:	beq	151a8 <__assert_fail@plt+0x43b4>
   15268:	b	152a0 <__assert_fail@plt+0x44ac>
   1526c:	bl	136fc <__assert_fail@plt+0x2908>
   15270:	b	15204 <__assert_fail@plt+0x4410>
   15274:	bl	10cf8 <__errno_location@plt>
   15278:	ldr	r5, [r0]
   1527c:	b	151a8 <__assert_fail@plt+0x43b4>
   15280:	mov	r4, r3
   15284:	b	15138 <__assert_fail@plt+0x4344>
   15288:	ldr	r0, [r6, #28]
   1528c:	bl	10dc4 <close@plt>
   15290:	cmp	r0, #0
   15294:	beq	151a4 <__assert_fail@plt+0x43b0>
   15298:	bl	10cf8 <__errno_location@plt>
   1529c:	mov	r4, r0
   152a0:	ldr	r5, [r4]
   152a4:	b	151a8 <__assert_fail@plt+0x43b4>
   152a8:	bl	10cf8 <__errno_location@plt>
   152ac:	str	r5, [r0]
   152b0:	mvn	r5, #0
   152b4:	b	15214 <__assert_fail@plt+0x4420>
   152b8:	andeq	r0, r0, r2, lsl #2
   152bc:	push	{r4, r5, r6, r7, r8, r9, lr}
   152c0:	sub	sp, sp, #12
   152c4:	ldr	r4, [r0]
   152c8:	cmp	r4, #0
   152cc:	beq	15400 <__assert_fail@plt+0x460c>
   152d0:	ldr	r1, [r0, #48]	; 0x30
   152d4:	ands	r5, r1, #8192	; 0x2000
   152d8:	bne	15400 <__assert_fail@plt+0x460c>
   152dc:	ldrh	r3, [r4, #60]	; 0x3c
   152e0:	mov	r2, #3
   152e4:	mov	r7, r0
   152e8:	cmp	r3, #1
   152ec:	strh	r2, [r4, #60]	; 0x3c
   152f0:	beq	15778 <__assert_fail@plt+0x4984>
   152f4:	cmp	r3, #2
   152f8:	beq	15410 <__assert_fail@plt+0x461c>
   152fc:	ldrh	r2, [r4, #56]	; 0x38
   15300:	cmp	r2, #1
   15304:	bne	1533c <__assert_fail@plt+0x4548>
   15308:	cmp	r3, #4
   1530c:	bne	15428 <__assert_fail@plt+0x4634>
   15310:	b	15444 <__assert_fail@plt+0x4650>
   15314:	str	r6, [r7]
   15318:	mov	r0, r4
   1531c:	bl	136fc <__assert_fail@plt+0x2908>
   15320:	ldr	r3, [r6, #48]	; 0x30
   15324:	cmp	r3, #0
   15328:	beq	154b0 <__assert_fail@plt+0x46bc>
   1532c:	ldrh	r3, [r6, #60]	; 0x3c
   15330:	mov	r4, r6
   15334:	cmp	r3, #4
   15338:	bne	15664 <__assert_fail@plt+0x4870>
   1533c:	ldr	r6, [r4, #8]
   15340:	cmp	r6, #0
   15344:	bne	15314 <__assert_fail@plt+0x4520>
   15348:	ldr	r6, [r4, #4]
   1534c:	ldr	r3, [r6, #12]
   15350:	cmp	r3, #0
   15354:	bne	15a08 <__assert_fail@plt+0x4c14>
   15358:	str	r6, [r7]
   1535c:	mov	r0, r4
   15360:	bl	136fc <__assert_fail@plt+0x2908>
   15364:	ldr	r3, [r6, #48]	; 0x30
   15368:	cmn	r3, #1
   1536c:	beq	158f8 <__assert_fail@plt+0x4b04>
   15370:	ldrh	r3, [r6, #56]	; 0x38
   15374:	cmp	r3, #11
   15378:	beq	156d8 <__assert_fail@plt+0x48e4>
   1537c:	ldr	r3, [r6, #40]	; 0x28
   15380:	ldr	r2, [r7, #24]
   15384:	mov	r1, #0
   15388:	strb	r1, [r2, r3]
   1538c:	ldr	r3, [r6, #48]	; 0x30
   15390:	cmp	r3, r1
   15394:	beq	157f4 <__assert_fail@plt+0x4a00>
   15398:	ldrh	r3, [r6, #58]	; 0x3a
   1539c:	tst	r3, #2
   153a0:	beq	157b4 <__assert_fail@plt+0x49c0>
   153a4:	ldr	r3, [r7, #48]	; 0x30
   153a8:	tst	r3, #4
   153ac:	beq	15868 <__assert_fail@plt+0x4a74>
   153b0:	ldr	r0, [r6, #36]	; 0x24
   153b4:	bl	10dc4 <close@plt>
   153b8:	ldr	r3, [r7, #48]	; 0x30
   153bc:	ldrh	r2, [r6, #56]	; 0x38
   153c0:	cmp	r2, #2
   153c4:	beq	153f8 <__assert_fail@plt+0x4604>
   153c8:	ldr	r2, [r6, #32]
   153cc:	cmp	r2, #0
   153d0:	movne	r2, #7
   153d4:	strhne	r2, [r6, #56]	; 0x38
   153d8:	bne	153f8 <__assert_fail@plt+0x4604>
   153dc:	mov	r2, #6
   153e0:	mov	r0, r3
   153e4:	strh	r2, [r6, #56]	; 0x38
   153e8:	add	r1, r7, #56	; 0x38
   153ec:	mov	r2, r6
   153f0:	bl	13a80 <__assert_fail@plt+0x2c8c>
   153f4:	ldr	r3, [r7, #48]	; 0x30
   153f8:	tst	r3, #8192	; 0x2000
   153fc:	beq	154a4 <__assert_fail@plt+0x46b0>
   15400:	mov	r6, #0
   15404:	mov	r0, r6
   15408:	add	sp, sp, #12
   1540c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15410:	ldrh	r3, [r4, #56]	; 0x38
   15414:	sub	r2, r3, #12
   15418:	cmp	r2, #1
   1541c:	bls	158b0 <__assert_fail@plt+0x4abc>
   15420:	cmp	r3, #1
   15424:	bne	1533c <__assert_fail@plt+0x4548>
   15428:	tst	r1, #64	; 0x40
   1542c:	beq	156e4 <__assert_fail@plt+0x48f0>
   15430:	ldrd	r8, [r4, #64]	; 0x40
   15434:	ldrd	r2, [r7, #16]
   15438:	cmp	r9, r3
   1543c:	cmpeq	r8, r2
   15440:	beq	156e4 <__assert_fail@plt+0x48f0>
   15444:	ldrh	r3, [r4, #58]	; 0x3a
   15448:	tst	r3, #2
   1544c:	bne	159fc <__assert_fail@plt+0x4c08>
   15450:	ldr	r5, [r7, #4]
   15454:	cmp	r5, #0
   15458:	beq	15488 <__assert_fail@plt+0x4694>
   1545c:	ldr	r0, [r5, #12]
   15460:	ldr	r6, [r5, #8]
   15464:	cmp	r0, #0
   15468:	beq	15470 <__assert_fail@plt+0x467c>
   1546c:	bl	10ddc <closedir@plt>
   15470:	mov	r0, r5
   15474:	bl	136fc <__assert_fail@plt+0x2908>
   15478:	cmp	r6, #0
   1547c:	mov	r5, r6
   15480:	bne	1545c <__assert_fail@plt+0x4668>
   15484:	str	r6, [r7, #4]
   15488:	mov	r3, #6
   1548c:	strh	r3, [r4, #56]	; 0x38
   15490:	mov	r2, r4
   15494:	add	r1, r7, #56	; 0x38
   15498:	ldr	r0, [r7, #48]	; 0x30
   1549c:	mov	r6, r4
   154a0:	bl	13a80 <__assert_fail@plt+0x2c8c>
   154a4:	mov	r0, r6
   154a8:	add	sp, sp, #12
   154ac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   154b0:	ldr	r3, [r7, #48]	; 0x30
   154b4:	ands	r8, r3, #4
   154b8:	addne	r4, r7, #60	; 0x3c
   154bc:	bne	154f0 <__assert_fail@plt+0x46fc>
   154c0:	tst	r3, #512	; 0x200
   154c4:	bne	15918 <__assert_fail@plt+0x4b24>
   154c8:	ldr	r0, [r7, #28]
   154cc:	bl	10d7c <fchdir@plt>
   154d0:	add	r4, r7, #60	; 0x3c
   154d4:	adds	r5, r0, #0
   154d8:	movne	r5, #1
   154dc:	b	154f0 <__assert_fail@plt+0x46fc>
   154e0:	mov	r0, r4
   154e4:	bl	18f1c <__assert_fail@plt+0x8128>
   154e8:	cmp	r0, #0
   154ec:	bge	156dc <__assert_fail@plt+0x48e8>
   154f0:	mov	r0, r4
   154f4:	bl	18ed0 <__assert_fail@plt+0x80dc>
   154f8:	cmp	r0, #0
   154fc:	beq	154e0 <__assert_fail@plt+0x46ec>
   15500:	cmp	r5, #0
   15504:	bne	159d8 <__assert_fail@plt+0x4be4>
   15508:	ldr	r2, [r7, #48]	; 0x30
   1550c:	ldr	r3, [pc, #1760]	; 15bf4 <__assert_fail@plt+0x4e00>
   15510:	ldr	r0, [r7, #56]	; 0x38
   15514:	and	r3, r3, r2
   15518:	cmp	r3, #0
   1551c:	beq	159d0 <__assert_fail@plt+0x4bdc>
   15520:	cmp	r0, #0
   15524:	beq	1552c <__assert_fail@plt+0x4738>
   15528:	bl	18088 <__assert_fail@plt+0x7294>
   1552c:	ldr	r2, [r6, #52]	; 0x34
   15530:	add	r5, r6, #168	; 0xa8
   15534:	str	r2, [r6, #40]	; 0x28
   15538:	mov	r1, r5
   1553c:	add	r2, r2, #1
   15540:	ldr	r0, [r7, #24]
   15544:	bl	10bd8 <memmove@plt>
   15548:	mov	r0, r5
   1554c:	mov	r1, #47	; 0x2f
   15550:	bl	10d28 <strrchr@plt>
   15554:	cmp	r0, #0
   15558:	beq	15588 <__assert_fail@plt+0x4794>
   1555c:	cmp	r5, r0
   15560:	beq	159ec <__assert_fail@plt+0x4bf8>
   15564:	add	r4, r0, #1
   15568:	mov	r0, r4
   1556c:	bl	10cc8 <strlen@plt>
   15570:	mov	r1, r4
   15574:	mov	r8, r0
   15578:	add	r2, r8, #1
   1557c:	mov	r0, r5
   15580:	bl	10bd8 <memmove@plt>
   15584:	str	r8, [r6, #52]	; 0x34
   15588:	ldr	r1, [r7, #48]	; 0x30
   1558c:	ldr	r3, [pc, #1632]	; 15bf4 <__assert_fail@plt+0x4e00>
   15590:	ldr	r2, [r7, #24]
   15594:	and	r3, r3, r1
   15598:	cmp	r3, #0
   1559c:	str	r2, [r6, #28]
   155a0:	str	r2, [r6, #24]
   155a4:	beq	15794 <__assert_fail@plt+0x49a0>
   155a8:	ldr	r2, [pc, #1608]	; 15bf8 <__assert_fail@plt+0x4e04>
   155ac:	ldr	r3, [pc, #1608]	; 15bfc <__assert_fail@plt+0x4e08>
   155b0:	str	r2, [sp]
   155b4:	mov	r1, #0
   155b8:	ldr	r2, [pc, #1600]	; 15c00 <__assert_fail@plt+0x4e0c>
   155bc:	mov	r0, #31
   155c0:	bl	17d98 <__assert_fail@plt+0x6fa4>
   155c4:	ldrh	r3, [r6, #56]	; 0x38
   155c8:	str	r0, [r7, #56]	; 0x38
   155cc:	cmp	r3, #11
   155d0:	str	r6, [r7]
   155d4:	beq	156bc <__assert_fail@plt+0x48c8>
   155d8:	cmp	r3, #1
   155dc:	bne	154a4 <__assert_fail@plt+0x46b0>
   155e0:	ldr	r3, [r6, #48]	; 0x30
   155e4:	cmp	r3, #0
   155e8:	ldrdeq	r2, [r6, #64]	; 0x40
   155ec:	strdeq	r2, [r7, #16]
   155f0:	ldr	r2, [r7, #48]	; 0x30
   155f4:	ldr	r3, [pc, #1528]	; 15bf4 <__assert_fail@plt+0x4e00>
   155f8:	and	r3, r3, r2
   155fc:	cmp	r3, #0
   15600:	beq	15758 <__assert_fail@plt+0x4964>
   15604:	mov	r0, #24
   15608:	bl	1910c <__assert_fail@plt+0x8318>
   1560c:	subs	r8, r0, #0
   15610:	beq	158e4 <__assert_fail@plt+0x4af0>
   15614:	ldrd	r4, [r6, #64]	; 0x40
   15618:	ldrd	r2, [r6, #160]	; 0xa0
   1561c:	ldr	r0, [r7, #56]	; 0x38
   15620:	strd	r4, [r8]
   15624:	strd	r2, [r8, #8]
   15628:	str	r6, [r8, #16]
   1562c:	mov	r1, r8
   15630:	bl	18700 <__assert_fail@plt+0x790c>
   15634:	cmp	r8, r0
   15638:	mov	r4, r0
   1563c:	beq	154a4 <__assert_fail@plt+0x46b0>
   15640:	mov	r0, r8
   15644:	bl	136fc <__assert_fail@plt+0x2908>
   15648:	cmp	r4, #0
   1564c:	beq	158e4 <__assert_fail@plt+0x4af0>
   15650:	ldr	r2, [r4, #16]
   15654:	mov	r3, #2
   15658:	str	r2, [r6]
   1565c:	strh	r3, [r6, #56]	; 0x38
   15660:	b	154a4 <__assert_fail@plt+0x46b0>
   15664:	cmp	r3, #2
   15668:	beq	15a3c <__assert_fail@plt+0x4c48>
   1566c:	ldr	r3, [r6, #4]
   15670:	mov	ip, #47	; 0x2f
   15674:	ldr	r2, [r7, #24]
   15678:	ldr	r0, [r3, #40]	; 0x28
   1567c:	ldr	lr, [r3, #28]
   15680:	sub	r3, r0, #1
   15684:	add	r1, r6, #168	; 0xa8
   15688:	ldrb	lr, [lr, r3]
   1568c:	cmp	lr, ip
   15690:	movne	r3, r0
   15694:	add	r0, r2, r3
   15698:	strb	ip, [r2, r3]
   1569c:	ldr	r2, [r6, #52]	; 0x34
   156a0:	add	r0, r0, #1
   156a4:	add	r2, r2, #1
   156a8:	bl	10bd8 <memmove@plt>
   156ac:	ldrh	r3, [r6, #56]	; 0x38
   156b0:	str	r6, [r7]
   156b4:	cmp	r3, #11
   156b8:	bne	155d8 <__assert_fail@plt+0x47e4>
   156bc:	ldrd	r2, [r6, #112]	; 0x70
   156c0:	cmp	r3, #0
   156c4:	cmpeq	r2, #2
   156c8:	beq	15a68 <__assert_fail@plt+0x4c74>
   156cc:	cmp	r3, #0
   156d0:	cmpeq	r2, #1
   156d4:	beq	154a4 <__assert_fail@plt+0x46b0>
   156d8:	bl	10db8 <abort@plt>
   156dc:	bl	10dc4 <close@plt>
   156e0:	b	154f0 <__assert_fail@plt+0x46fc>
   156e4:	ldr	r5, [r7, #4]
   156e8:	cmp	r5, #0
   156ec:	beq	15978 <__assert_fail@plt+0x4b84>
   156f0:	tst	r1, #4096	; 0x1000
   156f4:	bne	15944 <__assert_fail@plt+0x4b50>
   156f8:	ldr	r3, [r4, #24]
   156fc:	mvn	r2, #0
   15700:	mov	r1, r4
   15704:	mov	r0, r7
   15708:	bl	13b38 <__assert_fail@plt+0x2d44>
   1570c:	cmp	r0, #0
   15710:	beq	15858 <__assert_fail@plt+0x4a64>
   15714:	bl	10cf8 <__errno_location@plt>
   15718:	ldrh	r3, [r4, #58]	; 0x3a
   1571c:	ldr	r6, [r7, #4]
   15720:	orr	r3, r3, #1
   15724:	cmp	r6, #0
   15728:	ldr	r2, [r0]
   1572c:	strh	r3, [r4, #58]	; 0x3a
   15730:	str	r2, [r4, #32]
   15734:	beq	1585c <__assert_fail@plt+0x4a68>
   15738:	mov	r3, r6
   1573c:	ldr	r2, [r3, #4]
   15740:	ldr	r2, [r2, #24]
   15744:	str	r2, [r3, #24]
   15748:	ldr	r3, [r3, #8]
   1574c:	cmp	r3, #0
   15750:	bne	1573c <__assert_fail@plt+0x4948>
   15754:	b	1585c <__assert_fail@plt+0x4a68>
   15758:	ldr	r0, [r7, #56]	; 0x38
   1575c:	add	r1, r6, #64	; 0x40
   15760:	bl	191b8 <__assert_fail@plt+0x83c4>
   15764:	cmp	r0, #0
   15768:	movne	r3, #2
   1576c:	strne	r6, [r6]
   15770:	strhne	r3, [r6, #56]	; 0x38
   15774:	b	154a4 <__assert_fail@plt+0x46b0>
   15778:	mov	r3, r5
   1577c:	ldr	r0, [r0, #32]
   15780:	mov	r2, r4
   15784:	bl	13934 <__assert_fail@plt+0x2b40>
   15788:	mov	r6, r4
   1578c:	strh	r0, [r4, #56]	; 0x38
   15790:	b	154a4 <__assert_fail@plt+0x46b0>
   15794:	mov	r0, #32
   15798:	bl	1910c <__assert_fail@plt+0x8318>
   1579c:	cmp	r0, #0
   157a0:	str	r0, [r7, #56]	; 0x38
   157a4:	beq	156ac <__assert_fail@plt+0x48b8>
   157a8:	bl	19194 <__assert_fail@plt+0x83a0>
   157ac:	ldrh	r3, [r6, #56]	; 0x38
   157b0:	b	155cc <__assert_fail@plt+0x47d8>
   157b4:	tst	r3, #1
   157b8:	bne	153b8 <__assert_fail@plt+0x45c4>
   157bc:	ldr	r3, [pc, #1088]	; 15c04 <__assert_fail@plt+0x4e10>
   157c0:	mvn	r2, #0
   157c4:	ldr	r1, [r6, #4]
   157c8:	mov	r0, r7
   157cc:	bl	13b38 <__assert_fail@plt+0x2d44>
   157d0:	cmp	r0, #0
   157d4:	beq	153b8 <__assert_fail@plt+0x45c4>
   157d8:	bl	10cf8 <__errno_location@plt>
   157dc:	ldr	r3, [r7, #48]	; 0x30
   157e0:	orr	r3, r3, #8192	; 0x2000
   157e4:	ldr	r2, [r0]
   157e8:	str	r2, [r6, #32]
   157ec:	str	r3, [r7, #48]	; 0x30
   157f0:	b	153bc <__assert_fail@plt+0x45c8>
   157f4:	ldr	r3, [r7, #48]	; 0x30
   157f8:	ands	r8, r3, #4
   157fc:	addne	r4, r7, #60	; 0x3c
   15800:	bne	15834 <__assert_fail@plt+0x4a40>
   15804:	tst	r3, #512	; 0x200
   15808:	bne	15ab4 <__assert_fail@plt+0x4cc0>
   1580c:	ldr	r0, [r7, #28]
   15810:	bl	10d7c <fchdir@plt>
   15814:	add	r4, r7, #60	; 0x3c
   15818:	adds	r5, r0, #0
   1581c:	movne	r5, #1
   15820:	b	15834 <__assert_fail@plt+0x4a40>
   15824:	mov	r0, r4
   15828:	bl	18f1c <__assert_fail@plt+0x8128>
   1582c:	cmp	r0, #0
   15830:	bge	15850 <__assert_fail@plt+0x4a5c>
   15834:	mov	r0, r4
   15838:	bl	18ed0 <__assert_fail@plt+0x80dc>
   1583c:	cmp	r0, #0
   15840:	beq	15824 <__assert_fail@plt+0x4a30>
   15844:	cmp	r5, #0
   15848:	bne	157d8 <__assert_fail@plt+0x49e4>
   1584c:	b	153b8 <__assert_fail@plt+0x45c4>
   15850:	bl	10dc4 <close@plt>
   15854:	b	15834 <__assert_fail@plt+0x4a40>
   15858:	ldr	r6, [r7, #4]
   1585c:	mov	r3, #0
   15860:	str	r3, [r7, #4]
   15864:	b	1566c <__assert_fail@plt+0x4878>
   15868:	tst	r3, #512	; 0x200
   1586c:	beq	15a88 <__assert_fail@plt+0x4c94>
   15870:	ldr	r1, [r7, #32]
   15874:	ldr	r4, [r6, #36]	; 0x24
   15878:	cmn	r1, #100	; 0x64
   1587c:	sub	r3, r4, r1
   15880:	clz	r3, r3
   15884:	lsr	r3, r3, #5
   15888:	moveq	r3, #0
   1588c:	cmp	r3, #0
   15890:	bne	156d8 <__assert_fail@plt+0x48e4>
   15894:	add	r0, r7, #60	; 0x3c
   15898:	bl	18ed8 <__assert_fail@plt+0x80e4>
   1589c:	cmp	r0, #0
   158a0:	blt	158a8 <__assert_fail@plt+0x4ab4>
   158a4:	bl	10dc4 <close@plt>
   158a8:	str	r4, [r7, #32]
   158ac:	b	153b0 <__assert_fail@plt+0x45bc>
   158b0:	mov	r3, #1
   158b4:	mov	r2, r4
   158b8:	ldr	r0, [r0, #32]
   158bc:	bl	13934 <__assert_fail@plt+0x2b40>
   158c0:	cmp	r0, #1
   158c4:	strh	r0, [r4, #56]	; 0x38
   158c8:	mov	r3, r0
   158cc:	beq	15af4 <__assert_fail@plt+0x4d00>
   158d0:	cmp	r0, #11
   158d4:	mov	r6, r4
   158d8:	str	r4, [r7]
   158dc:	bne	154a4 <__assert_fail@plt+0x46b0>
   158e0:	b	156bc <__assert_fail@plt+0x48c8>
   158e4:	bl	10cf8 <__errno_location@plt>
   158e8:	mov	r3, #12
   158ec:	mov	r6, #0
   158f0:	str	r3, [r0]
   158f4:	b	154a4 <__assert_fail@plt+0x46b0>
   158f8:	mov	r0, r6
   158fc:	bl	136fc <__assert_fail@plt+0x2908>
   15900:	bl	10cf8 <__errno_location@plt>
   15904:	mov	r3, #0
   15908:	mov	r6, r3
   1590c:	str	r3, [r0]
   15910:	str	r3, [r7]
   15914:	b	154a4 <__assert_fail@plt+0x46b0>
   15918:	add	r4, r7, #60	; 0x3c
   1591c:	mov	r0, r4
   15920:	ldr	r1, [r7, #32]
   15924:	bl	18ed8 <__assert_fail@plt+0x80e4>
   15928:	cmp	r0, #0
   1592c:	blt	15934 <__assert_fail@plt+0x4b40>
   15930:	bl	10dc4 <close@plt>
   15934:	mvn	r3, #99	; 0x63
   15938:	mov	r5, r8
   1593c:	str	r3, [r7, #32]
   15940:	b	154f0 <__assert_fail@plt+0x46fc>
   15944:	bic	ip, r1, #4096	; 0x1000
   15948:	str	ip, [r7, #48]	; 0x30
   1594c:	ldr	r0, [r5, #12]
   15950:	ldr	r6, [r5, #8]
   15954:	cmp	r0, #0
   15958:	beq	15960 <__assert_fail@plt+0x4b6c>
   1595c:	bl	10ddc <closedir@plt>
   15960:	mov	r0, r5
   15964:	bl	136fc <__assert_fail@plt+0x2908>
   15968:	cmp	r6, #0
   1596c:	mov	r5, r6
   15970:	bne	1594c <__assert_fail@plt+0x4b58>
   15974:	str	r6, [r7, #4]
   15978:	mov	r1, #3
   1597c:	mov	r0, r7
   15980:	bl	13dd0 <__assert_fail@plt+0x2fdc>
   15984:	cmp	r0, #0
   15988:	mov	r6, r0
   1598c:	str	r0, [r7, #4]
   15990:	bne	1585c <__assert_fail@plt+0x4a68>
   15994:	ldr	r0, [r7, #48]	; 0x30
   15998:	tst	r0, #8192	; 0x2000
   1599c:	bne	15400 <__assert_fail@plt+0x460c>
   159a0:	ldr	r3, [r4, #32]
   159a4:	cmp	r3, #0
   159a8:	beq	159bc <__assert_fail@plt+0x4bc8>
   159ac:	ldrh	r3, [r4, #56]	; 0x38
   159b0:	cmp	r3, #4
   159b4:	movne	r3, #7
   159b8:	strhne	r3, [r4, #56]	; 0x38
   159bc:	add	r1, r7, #56	; 0x38
   159c0:	mov	r2, r4
   159c4:	bl	13a80 <__assert_fail@plt+0x2c8c>
   159c8:	mov	r6, r4
   159cc:	b	154a4 <__assert_fail@plt+0x46b0>
   159d0:	bl	136fc <__assert_fail@plt+0x2908>
   159d4:	b	1552c <__assert_fail@plt+0x4738>
   159d8:	ldr	r3, [r7, #48]	; 0x30
   159dc:	mov	r6, #0
   159e0:	orr	r3, r3, #8192	; 0x2000
   159e4:	str	r3, [r7, #48]	; 0x30
   159e8:	b	154a4 <__assert_fail@plt+0x46b0>
   159ec:	ldrb	r3, [r6, #169]	; 0xa9
   159f0:	cmp	r3, #0
   159f4:	bne	15564 <__assert_fail@plt+0x4770>
   159f8:	b	15588 <__assert_fail@plt+0x4794>
   159fc:	ldr	r0, [r4, #36]	; 0x24
   15a00:	bl	10dc4 <close@plt>
   15a04:	b	15450 <__assert_fail@plt+0x465c>
   15a08:	ldr	r3, [r6, #40]	; 0x28
   15a0c:	ldr	r2, [r7, #24]
   15a10:	mov	r0, #0
   15a14:	str	r6, [r7]
   15a18:	mov	r1, #3
   15a1c:	strb	r0, [r2, r3]
   15a20:	mov	r0, r7
   15a24:	bl	13dd0 <__assert_fail@plt+0x2fdc>
   15a28:	subs	r6, r0, #0
   15a2c:	beq	15ae0 <__assert_fail@plt+0x4cec>
   15a30:	mov	r0, r4
   15a34:	bl	136fc <__assert_fail@plt+0x2908>
   15a38:	b	1566c <__assert_fail@plt+0x4878>
   15a3c:	mov	r3, #1
   15a40:	mov	r2, r6
   15a44:	ldr	r1, [r7, #48]	; 0x30
   15a48:	ldr	r0, [r7, #32]
   15a4c:	bl	13934 <__assert_fail@plt+0x2b40>
   15a50:	cmp	r0, #1
   15a54:	strh	r0, [r6, #56]	; 0x38
   15a58:	beq	15b0c <__assert_fail@plt+0x4d18>
   15a5c:	mov	r3, #3
   15a60:	strh	r3, [r6, #60]	; 0x3c
   15a64:	b	1566c <__assert_fail@plt+0x4878>
   15a68:	mov	r3, #0
   15a6c:	mov	r2, r6
   15a70:	ldr	r1, [r7, #48]	; 0x30
   15a74:	ldr	r0, [r7, #32]
   15a78:	bl	13934 <__assert_fail@plt+0x2b40>
   15a7c:	mov	r3, r0
   15a80:	strh	r0, [r6, #56]	; 0x38
   15a84:	b	155d8 <__assert_fail@plt+0x47e4>
   15a88:	ldr	r0, [r6, #36]	; 0x24
   15a8c:	bl	10d7c <fchdir@plt>
   15a90:	cmp	r0, #0
   15a94:	beq	153b0 <__assert_fail@plt+0x45bc>
   15a98:	bl	10cf8 <__errno_location@plt>
   15a9c:	ldr	r3, [r7, #48]	; 0x30
   15aa0:	orr	r3, r3, #8192	; 0x2000
   15aa4:	ldr	r2, [r0]
   15aa8:	str	r2, [r6, #32]
   15aac:	str	r3, [r7, #48]	; 0x30
   15ab0:	b	153b0 <__assert_fail@plt+0x45bc>
   15ab4:	add	r4, r7, #60	; 0x3c
   15ab8:	mov	r0, r4
   15abc:	ldr	r1, [r7, #32]
   15ac0:	bl	18ed8 <__assert_fail@plt+0x80e4>
   15ac4:	cmp	r0, #0
   15ac8:	blt	15ad0 <__assert_fail@plt+0x4cdc>
   15acc:	bl	10dc4 <close@plt>
   15ad0:	mvn	r3, #99	; 0x63
   15ad4:	mov	r5, r8
   15ad8:	str	r3, [r7, #32]
   15adc:	b	15834 <__assert_fail@plt+0x4a40>
   15ae0:	ldr	r3, [r7, #48]	; 0x30
   15ae4:	tst	r3, #8192	; 0x2000
   15ae8:	bne	15400 <__assert_fail@plt+0x460c>
   15aec:	ldr	r6, [r4, #4]
   15af0:	b	15358 <__assert_fail@plt+0x4564>
   15af4:	ldr	r1, [r7, #48]	; 0x30
   15af8:	tst	r1, #4
   15afc:	beq	15b58 <__assert_fail@plt+0x4d64>
   15b00:	str	r4, [r7]
   15b04:	mov	r6, r4
   15b08:	b	155d8 <__assert_fail@plt+0x47e4>
   15b0c:	ldr	r3, [r7, #48]	; 0x30
   15b10:	tst	r3, #4
   15b14:	bne	15a5c <__assert_fail@plt+0x4c68>
   15b18:	ldr	r1, [pc, #232]	; 15c08 <__assert_fail@plt+0x4e14>
   15b1c:	tst	r3, #16
   15b20:	ldr	r2, [pc, #228]	; 15c0c <__assert_fail@plt+0x4e18>
   15b24:	movne	r2, r1
   15b28:	tst	r3, #512	; 0x200
   15b2c:	bne	15bb8 <__assert_fail@plt+0x4dc4>
   15b30:	mov	r1, r2
   15b34:	ldr	r0, [pc, #212]	; 15c10 <__assert_fail@plt+0x4e1c>
   15b38:	bl	19458 <__assert_fail@plt+0x8664>
   15b3c:	cmp	r0, #0
   15b40:	str	r0, [r6, #36]	; 0x24
   15b44:	blt	15ba0 <__assert_fail@plt+0x4dac>
   15b48:	ldrh	r3, [r6, #58]	; 0x3a
   15b4c:	orr	r3, r3, #2
   15b50:	strh	r3, [r6, #58]	; 0x3a
   15b54:	b	15a5c <__assert_fail@plt+0x4c68>
   15b58:	ldr	r3, [pc, #168]	; 15c08 <__assert_fail@plt+0x4e14>
   15b5c:	tst	r1, #16
   15b60:	ldr	r2, [pc, #164]	; 15c0c <__assert_fail@plt+0x4e18>
   15b64:	movne	r2, r3
   15b68:	tst	r1, #512	; 0x200
   15b6c:	bne	15be4 <__assert_fail@plt+0x4df0>
   15b70:	mov	r1, r2
   15b74:	ldr	r0, [pc, #148]	; 15c10 <__assert_fail@plt+0x4e1c>
   15b78:	bl	19458 <__assert_fail@plt+0x8664>
   15b7c:	cmp	r0, #0
   15b80:	str	r0, [r4, #36]	; 0x24
   15b84:	blt	15bc8 <__assert_fail@plt+0x4dd4>
   15b88:	ldrh	r2, [r4, #58]	; 0x3a
   15b8c:	ldrh	r3, [r4, #56]	; 0x38
   15b90:	mov	r6, r4
   15b94:	orr	r2, r2, #2
   15b98:	strh	r2, [r4, #58]	; 0x3a
   15b9c:	b	155cc <__assert_fail@plt+0x47d8>
   15ba0:	bl	10cf8 <__errno_location@plt>
   15ba4:	mov	r2, #7
   15ba8:	ldr	r3, [r0]
   15bac:	strh	r2, [r6, #56]	; 0x38
   15bb0:	str	r3, [r6, #32]
   15bb4:	b	15a5c <__assert_fail@plt+0x4c68>
   15bb8:	ldr	r1, [pc, #80]	; 15c10 <__assert_fail@plt+0x4e1c>
   15bbc:	ldr	r0, [r7, #32]
   15bc0:	bl	18ffc <__assert_fail@plt+0x8208>
   15bc4:	b	15b3c <__assert_fail@plt+0x4d48>
   15bc8:	bl	10cf8 <__errno_location@plt>
   15bcc:	mov	r2, #7
   15bd0:	mov	r3, r2
   15bd4:	ldr	r1, [r0]
   15bd8:	strh	r2, [r4, #56]	; 0x38
   15bdc:	str	r1, [r4, #32]
   15be0:	b	15b00 <__assert_fail@plt+0x4d0c>
   15be4:	ldr	r1, [pc, #36]	; 15c10 <__assert_fail@plt+0x4e1c>
   15be8:	ldr	r0, [r7, #32]
   15bec:	bl	18ffc <__assert_fail@plt+0x8208>
   15bf0:	b	15b7c <__assert_fail@plt+0x4d88>
   15bf4:	andeq	r0, r0, r2, lsl #2
   15bf8:	strdeq	r3, [r1], -ip
   15bfc:	andeq	r3, r1, r4, asr r7
   15c00:	muleq	r1, r8, r7
   15c04:	andeq	r9, r1, r0, lsr #26
   15c08:	andeq	ip, r8, r0, lsl #18
   15c0c:	andeq	r4, r8, r0, lsl #18
   15c10:	andeq	r9, r1, r4, lsr #26
   15c14:	cmp	r2, #4
   15c18:	bhi	15c2c <__assert_fail@plt+0x4e38>
   15c1c:	mov	r3, #0
   15c20:	strh	r2, [r1, #60]	; 0x3c
   15c24:	mov	r0, r3
   15c28:	bx	lr
   15c2c:	push	{r4, lr}
   15c30:	bl	10cf8 <__errno_location@plt>
   15c34:	mov	r2, #22
   15c38:	mov	r3, #1
   15c3c:	str	r2, [r0]
   15c40:	mov	r0, r3
   15c44:	pop	{r4, pc}
   15c48:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15c4c:	bics	r4, r1, #4096	; 0x1000
   15c50:	bne	15dc4 <__assert_fail@plt+0x4fd0>
   15c54:	mov	r6, r0
   15c58:	mov	r7, r1
   15c5c:	bl	10cf8 <__errno_location@plt>
   15c60:	ldr	r8, [r6]
   15c64:	str	r4, [r0]
   15c68:	ldr	r3, [r6, #48]	; 0x30
   15c6c:	mov	r9, r0
   15c70:	ands	r3, r3, #8192	; 0x2000
   15c74:	bne	15ddc <__assert_fail@plt+0x4fe8>
   15c78:	ldrh	r2, [r8, #56]	; 0x38
   15c7c:	cmp	r2, #9
   15c80:	ldreq	r3, [r8, #8]
   15c84:	beq	15d08 <__assert_fail@plt+0x4f14>
   15c88:	cmp	r2, #1
   15c8c:	bne	15d08 <__assert_fail@plt+0x4f14>
   15c90:	ldr	r4, [r6, #4]
   15c94:	cmp	r4, #0
   15c98:	beq	15cc0 <__assert_fail@plt+0x4ecc>
   15c9c:	ldr	r0, [r4, #12]
   15ca0:	ldr	r5, [r4, #8]
   15ca4:	cmp	r0, #0
   15ca8:	beq	15cb0 <__assert_fail@plt+0x4ebc>
   15cac:	bl	10ddc <closedir@plt>
   15cb0:	mov	r0, r4
   15cb4:	bl	136fc <__assert_fail@plt+0x2908>
   15cb8:	subs	r4, r5, #0
   15cbc:	bne	15c9c <__assert_fail@plt+0x4ea8>
   15cc0:	cmp	r7, #4096	; 0x1000
   15cc4:	movne	r4, #1
   15cc8:	beq	15d10 <__assert_fail@plt+0x4f1c>
   15ccc:	ldr	r3, [r8, #48]	; 0x30
   15cd0:	cmp	r3, #0
   15cd4:	bne	15cf4 <__assert_fail@plt+0x4f00>
   15cd8:	ldr	r3, [r8, #24]
   15cdc:	ldrb	r3, [r3]
   15ce0:	cmp	r3, #47	; 0x2f
   15ce4:	beq	15cf4 <__assert_fail@plt+0x4f00>
   15ce8:	ldr	r3, [r6, #48]	; 0x30
   15cec:	tst	r3, #4
   15cf0:	beq	15d30 <__assert_fail@plt+0x4f3c>
   15cf4:	mov	r1, r4
   15cf8:	mov	r0, r6
   15cfc:	bl	13dd0 <__assert_fail@plt+0x2fdc>
   15d00:	mov	r3, r0
   15d04:	str	r0, [r6, #4]
   15d08:	mov	r0, r3
   15d0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15d10:	ldr	r3, [r6, #48]	; 0x30
   15d14:	mov	r4, #2
   15d18:	orr	r3, r3, #4096	; 0x1000
   15d1c:	str	r3, [r6, #48]	; 0x30
   15d20:	ldr	r3, [r8, #48]	; 0x30
   15d24:	cmp	r3, #0
   15d28:	beq	15cd8 <__assert_fail@plt+0x4ee4>
   15d2c:	b	15cf4 <__assert_fail@plt+0x4f00>
   15d30:	ldr	r2, [pc, #252]	; 15e34 <__assert_fail@plt+0x5040>
   15d34:	tst	r3, #16
   15d38:	ldr	r1, [pc, #248]	; 15e38 <__assert_fail@plt+0x5044>
   15d3c:	moveq	r1, r2
   15d40:	tst	r3, #512	; 0x200
   15d44:	bne	15e00 <__assert_fail@plt+0x500c>
   15d48:	ldr	r0, [pc, #236]	; 15e3c <__assert_fail@plt+0x5048>
   15d4c:	bl	19458 <__assert_fail@plt+0x8664>
   15d50:	mov	r5, r0
   15d54:	cmp	r5, #0
   15d58:	movlt	r3, #0
   15d5c:	strlt	r3, [r6, #4]
   15d60:	blt	15d08 <__assert_fail@plt+0x4f14>
   15d64:	mov	r1, r4
   15d68:	mov	r0, r6
   15d6c:	bl	13dd0 <__assert_fail@plt+0x2fdc>
   15d70:	ldr	r3, [r6, #48]	; 0x30
   15d74:	ands	r4, r3, #512	; 0x200
   15d78:	str	r0, [r6, #4]
   15d7c:	beq	15de4 <__assert_fail@plt+0x4ff0>
   15d80:	ldr	r1, [r6, #32]
   15d84:	cmn	r1, #100	; 0x64
   15d88:	sub	r3, r5, r1
   15d8c:	clz	r3, r3
   15d90:	lsr	r3, r3, #5
   15d94:	moveq	r3, #0
   15d98:	cmp	r3, #0
   15d9c:	bne	15e30 <__assert_fail@plt+0x503c>
   15da0:	add	r0, r6, #60	; 0x3c
   15da4:	bl	18ed8 <__assert_fail@plt+0x80e4>
   15da8:	cmp	r0, #0
   15dac:	blt	15db4 <__assert_fail@plt+0x4fc0>
   15db0:	bl	10dc4 <close@plt>
   15db4:	str	r5, [r6, #32]
   15db8:	ldr	r3, [r6, #4]
   15dbc:	mov	r0, r3
   15dc0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15dc4:	bl	10cf8 <__errno_location@plt>
   15dc8:	mov	r2, #22
   15dcc:	mov	r3, #0
   15dd0:	str	r2, [r0]
   15dd4:	mov	r0, r3
   15dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ddc:	mov	r3, r4
   15de0:	b	15d08 <__assert_fail@plt+0x4f14>
   15de4:	mov	r0, r5
   15de8:	bl	10d7c <fchdir@plt>
   15dec:	cmp	r0, #0
   15df0:	bne	15e18 <__assert_fail@plt+0x5024>
   15df4:	mov	r0, r5
   15df8:	bl	10dc4 <close@plt>
   15dfc:	b	15db8 <__assert_fail@plt+0x4fc4>
   15e00:	mov	r2, r1
   15e04:	ldr	r0, [r6, #32]
   15e08:	ldr	r1, [pc, #44]	; 15e3c <__assert_fail@plt+0x5048>
   15e0c:	bl	18ffc <__assert_fail@plt+0x8208>
   15e10:	mov	r5, r0
   15e14:	b	15d54 <__assert_fail@plt+0x4f60>
   15e18:	ldr	r6, [r9]
   15e1c:	mov	r0, r5
   15e20:	bl	10dc4 <close@plt>
   15e24:	str	r6, [r9]
   15e28:	mov	r3, r4
   15e2c:	b	15d08 <__assert_fail@plt+0x4f14>
   15e30:	bl	10db8 <abort@plt>
   15e34:	andeq	r4, r8, r0, lsl #18
   15e38:	andeq	ip, r8, r0, lsl #18
   15e3c:	andeq	r9, r1, r4, lsr #26
   15e40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15e44:	ldr	r4, [r1, #32]
   15e48:	ldr	r8, [r1, #28]
   15e4c:	ldr	r7, [r1]
   15e50:	add	r6, r0, r4, lsl #2
   15e54:	mov	r2, r8
   15e58:	mov	r5, r7
   15e5c:	cmp	r5, r4
   15e60:	movle	r3, #0
   15e64:	movgt	r3, #1
   15e68:	cmp	r2, r4
   15e6c:	movge	r3, #0
   15e70:	cmp	r3, #0
   15e74:	beq	15ee8 <__assert_fail@plt+0x50f4>
   15e78:	sub	r3, r5, r4
   15e7c:	sub	sl, r4, r2
   15e80:	cmp	r3, sl
   15e84:	ble	15eb8 <__assert_fail@plt+0x50c4>
   15e88:	sub	r5, r5, sl
   15e8c:	add	sl, sl, r2
   15e90:	add	ip, r0, r5, lsl #2
   15e94:	add	sl, r0, sl, lsl #2
   15e98:	add	r3, r0, r2, lsl #2
   15e9c:	ldr	r9, [ip]
   15ea0:	ldr	lr, [r3]
   15ea4:	str	r9, [r3], #4
   15ea8:	cmp	r3, sl
   15eac:	str	lr, [ip], #4
   15eb0:	bne	15e9c <__assert_fail@plt+0x50a8>
   15eb4:	b	15e5c <__assert_fail@plt+0x5068>
   15eb8:	add	sl, r3, r2
   15ebc:	add	r3, r0, r2, lsl #2
   15ec0:	add	r9, r0, sl, lsl #2
   15ec4:	mov	r2, r6
   15ec8:	ldr	lr, [r2]
   15ecc:	ldr	ip, [r3]
   15ed0:	str	lr, [r3], #4
   15ed4:	cmp	r9, r3
   15ed8:	str	ip, [r2], #4
   15edc:	bne	15ec8 <__assert_fail@plt+0x50d4>
   15ee0:	mov	r2, sl
   15ee4:	b	15e5c <__assert_fail@plt+0x5068>
   15ee8:	sub	r4, r7, r4
   15eec:	add	r8, r4, r8
   15ef0:	str	r8, [r1, #28]
   15ef4:	str	r7, [r1, #32]
   15ef8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15efc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f00:	sub	sp, sp, #52	; 0x34
   15f04:	str	r1, [sp, #24]
   15f08:	ldr	r1, [sp, #96]	; 0x60
   15f0c:	str	r0, [sp, #28]
   15f10:	str	r2, [sp, #32]
   15f14:	ldr	r8, [r1, #20]
   15f18:	str	r3, [sp, #12]
   15f1c:	mov	r7, r8
   15f20:	ldrb	r5, [r8]
   15f24:	cmp	r5, #61	; 0x3d
   15f28:	cmpne	r5, #0
   15f2c:	movne	r5, #1
   15f30:	moveq	r5, #0
   15f34:	beq	15f50 <__assert_fail@plt+0x515c>
   15f38:	ldrb	r3, [r7, #1]!
   15f3c:	cmp	r3, #0
   15f40:	cmpne	r3, #61	; 0x3d
   15f44:	bne	15f38 <__assert_fail@plt+0x5144>
   15f48:	ldr	r3, [sp, #12]
   15f4c:	sub	r5, r7, r8
   15f50:	ldr	sl, [r3]
   15f54:	cmp	sl, #0
   15f58:	beq	16330 <__assert_fail@plt+0x553c>
   15f5c:	mov	fp, r3
   15f60:	mov	r4, sl
   15f64:	mov	r6, #0
   15f68:	str	r3, [sp, #20]
   15f6c:	mov	r2, r5
   15f70:	mov	r1, r8
   15f74:	mov	r0, r4
   15f78:	bl	10dac <strncmp@plt>
   15f7c:	mov	r9, fp
   15f80:	cmp	r0, #0
   15f84:	mov	r0, r4
   15f88:	bne	15f98 <__assert_fail@plt+0x51a4>
   15f8c:	bl	10cc8 <strlen@plt>
   15f90:	cmp	r0, r5
   15f94:	beq	16058 <__assert_fail@plt+0x5264>
   15f98:	ldr	r4, [fp, #16]!
   15f9c:	add	r6, r6, #1
   15fa0:	cmp	r4, #0
   15fa4:	bne	15f6c <__assert_fail@plt+0x5178>
   15fa8:	ldr	r3, [sp, #100]	; 0x64
   15fac:	cmp	r3, #0
   15fb0:	ldr	r3, [sp, #92]	; 0x5c
   15fb4:	beq	160fc <__assert_fail@plt+0x5308>
   15fb8:	cmp	r3, #0
   15fbc:	bne	16214 <__assert_fail@plt+0x5420>
   15fc0:	mov	fp, r3
   15fc4:	mov	r0, sl
   15fc8:	ldr	r4, [sp, #12]
   15fcc:	ldr	sl, [sp, #96]	; 0x60
   15fd0:	mov	r9, fp
   15fd4:	mov	r1, r8
   15fd8:	str	r3, [sp, #16]
   15fdc:	str	r3, [sp, #44]	; 0x2c
   15fe0:	mvn	r3, #0
   15fe4:	str	r3, [sp, #40]	; 0x28
   15fe8:	str	fp, [sp, #36]	; 0x24
   15fec:	mov	r2, r5
   15ff0:	bl	10dac <strncmp@plt>
   15ff4:	cmp	r0, #0
   15ff8:	bne	16034 <__assert_fail@plt+0x5240>
   15ffc:	cmp	r9, #0
   16000:	beq	16568 <__assert_fail@plt+0x5774>
   16004:	ldr	r2, [r9, #4]
   16008:	ldr	r3, [r4, #4]
   1600c:	cmp	r2, r3
   16010:	beq	165c4 <__assert_fail@plt+0x57d0>
   16014:	ldr	r3, [sp, #16]
   16018:	cmp	r3, #0
   1601c:	bne	16034 <__assert_fail@plt+0x5240>
   16020:	ldr	r3, [sp, #36]	; 0x24
   16024:	cmp	r3, #0
   16028:	beq	164a0 <__assert_fail@plt+0x56ac>
   1602c:	mov	r2, #1
   16030:	strb	r2, [r3, fp]
   16034:	ldr	r0, [r4, #16]!
   16038:	add	fp, fp, #1
   1603c:	cmp	r0, #0
   16040:	beq	16170 <__assert_fail@plt+0x537c>
   16044:	ldr	r1, [sl, #20]
   16048:	b	15fec <__assert_fail@plt+0x51f8>
   1604c:	cmp	r9, #0
   16050:	beq	16330 <__assert_fail@plt+0x553c>
   16054:	ldr	r6, [sp, #40]	; 0x28
   16058:	ldr	r3, [sp, #96]	; 0x60
   1605c:	ldr	r0, [sp, #96]	; 0x60
   16060:	mov	r1, #0
   16064:	ldr	r2, [r3]
   16068:	str	r1, [r0, #20]
   1606c:	add	r3, r2, #1
   16070:	str	r3, [r0]
   16074:	ldrb	r1, [r7]
   16078:	cmp	r1, #0
   1607c:	bne	160bc <__assert_fail@plt+0x52c8>
   16080:	ldr	r1, [r9, #4]
   16084:	cmp	r1, #1
   16088:	beq	163a0 <__assert_fail@plt+0x55ac>
   1608c:	ldr	r3, [sp, #88]	; 0x58
   16090:	ldr	r2, [r9, #8]
   16094:	cmp	r3, #0
   16098:	strne	r6, [r3]
   1609c:	cmp	r2, #0
   160a0:	movne	r3, #0
   160a4:	ldreq	r3, [r9, #12]
   160a8:	ldrne	r1, [r9, #12]
   160ac:	strne	r1, [r2]
   160b0:	mov	r0, r3
   160b4:	add	sp, sp, #52	; 0x34
   160b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160bc:	ldr	r3, [r9, #4]
   160c0:	cmp	r3, #0
   160c4:	movne	r3, r0
   160c8:	addne	r7, r7, #1
   160cc:	strne	r7, [r3, #12]
   160d0:	bne	1608c <__assert_fail@plt+0x5298>
   160d4:	ldr	r3, [sp, #100]	; 0x64
   160d8:	cmp	r3, #0
   160dc:	bne	162f8 <__assert_fail@plt+0x5504>
   160e0:	ldr	r1, [sp, #96]	; 0x60
   160e4:	ldr	r2, [r9, #12]
   160e8:	mov	r3, #63	; 0x3f
   160ec:	str	r2, [r1, #8]
   160f0:	mov	r0, r3
   160f4:	add	sp, sp, #52	; 0x34
   160f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160fc:	cmp	r3, #0
   16100:	bne	16290 <__assert_fail@plt+0x549c>
   16104:	mov	fp, r3
   16108:	ldr	r4, [sp, #12]
   1610c:	mov	r9, fp
   16110:	mov	r0, sl
   16114:	str	r3, [sp, #16]
   16118:	mvn	r3, #0
   1611c:	str	r3, [sp, #40]	; 0x28
   16120:	mov	r2, r5
   16124:	mov	r1, r8
   16128:	bl	10dac <strncmp@plt>
   1612c:	cmp	r0, #0
   16130:	bne	16154 <__assert_fail@plt+0x5360>
   16134:	cmp	r9, #0
   16138:	beq	1655c <__assert_fail@plt+0x5768>
   1613c:	ldr	r2, [r9, #4]
   16140:	ldr	r3, [r4, #4]
   16144:	cmp	r2, r3
   16148:	beq	16598 <__assert_fail@plt+0x57a4>
   1614c:	mov	r3, #1
   16150:	str	r3, [sp, #16]
   16154:	ldr	r0, [r4, #16]!
   16158:	add	fp, fp, #1
   1615c:	cmp	r0, #0
   16160:	bne	16120 <__assert_fail@plt+0x532c>
   16164:	ldr	r3, [sp, #92]	; 0x5c
   16168:	str	r0, [sp, #36]	; 0x24
   1616c:	str	r3, [sp, #44]	; 0x2c
   16170:	ldr	r2, [sp, #36]	; 0x24
   16174:	ldr	r3, [sp, #16]
   16178:	cmp	r3, #0
   1617c:	cmpeq	r2, #0
   16180:	beq	1604c <__assert_fail@plt+0x5258>
   16184:	ldr	r2, [sp, #100]	; 0x64
   16188:	cmp	r2, #0
   1618c:	beq	163f0 <__assert_fail@plt+0x55fc>
   16190:	cmp	r3, #0
   16194:	bne	163c8 <__assert_fail@plt+0x55d4>
   16198:	ldr	r5, [pc, #1108]	; 165f4 <__assert_fail@plt+0x5800>
   1619c:	ldr	r3, [sp, #36]	; 0x24
   161a0:	ldr	r7, [pc, #1104]	; 165f8 <__assert_fail@plt+0x5804>
   161a4:	ldr	r0, [r5]
   161a8:	add	r6, r3, r6
   161ac:	mov	r4, r3
   161b0:	bl	10d70 <flockfile@plt>
   161b4:	ldr	r3, [sp, #24]
   161b8:	ldr	r0, [r5]
   161bc:	ldr	r1, [pc, #1080]	; 165fc <__assert_fail@plt+0x5808>
   161c0:	ldr	r2, [r3]
   161c4:	ldr	r3, [sp, #96]	; 0x60
   161c8:	ldr	r3, [r3, #20]
   161cc:	str	r3, [sp]
   161d0:	ldr	r3, [sp, #104]	; 0x68
   161d4:	bl	10cec <fprintf@plt>
   161d8:	ldr	r8, [sp, #16]
   161dc:	ldr	r9, [sp, #12]
   161e0:	b	161f0 <__assert_fail@plt+0x53fc>
   161e4:	cmp	r4, r6
   161e8:	add	r8, r8, #1
   161ec:	beq	16580 <__assert_fail@plt+0x578c>
   161f0:	ldrb	r3, [r4], #1
   161f4:	cmp	r3, #0
   161f8:	beq	161e4 <__assert_fail@plt+0x53f0>
   161fc:	ldr	r3, [r9, r8, lsl #4]
   16200:	ldr	r2, [sp, #104]	; 0x68
   16204:	mov	r1, r7
   16208:	ldr	r0, [r5]
   1620c:	bl	10cec <fprintf@plt>
   16210:	b	161e4 <__assert_fail@plt+0x53f0>
   16214:	mov	r9, r4
   16218:	str	r4, [sp, #16]
   1621c:	str	r4, [sp, #44]	; 0x2c
   16220:	str	r4, [sp, #36]	; 0x24
   16224:	mov	r1, r8
   16228:	mov	r0, sl
   1622c:	mov	r8, r4
   16230:	ldr	sl, [sp, #20]
   16234:	ldr	r4, [sp, #96]	; 0x60
   16238:	mov	fp, #1
   1623c:	mvn	r3, #0
   16240:	str	r3, [sp, #40]	; 0x28
   16244:	mov	r2, r5
   16248:	bl	10dac <strncmp@plt>
   1624c:	cmp	r0, #0
   16250:	bne	16278 <__assert_fail@plt+0x5484>
   16254:	cmp	r9, #0
   16258:	beq	16574 <__assert_fail@plt+0x5780>
   1625c:	ldr	r3, [sp, #16]
   16260:	cmp	r3, #0
   16264:	bne	16278 <__assert_fail@plt+0x5484>
   16268:	ldr	r3, [sp, #36]	; 0x24
   1626c:	cmp	r3, #0
   16270:	beq	164e4 <__assert_fail@plt+0x56f0>
   16274:	strb	fp, [r3, r8]
   16278:	ldr	r0, [sl, #16]!
   1627c:	add	r8, r8, #1
   16280:	cmp	r0, #0
   16284:	beq	16170 <__assert_fail@plt+0x537c>
   16288:	ldr	r1, [r4, #20]
   1628c:	b	16244 <__assert_fail@plt+0x5450>
   16290:	ldr	r3, [sp, #100]	; 0x64
   16294:	mov	r0, sl
   16298:	mov	r4, r3
   1629c:	ldr	sl, [sp, #20]
   162a0:	mov	r9, r4
   162a4:	str	r3, [sp, #16]
   162a8:	mvn	r3, #0
   162ac:	str	r3, [sp, #40]	; 0x28
   162b0:	mov	r2, r5
   162b4:	mov	r1, r8
   162b8:	bl	10dac <strncmp@plt>
   162bc:	cmp	r0, #0
   162c0:	bne	162d8 <__assert_fail@plt+0x54e4>
   162c4:	cmp	r9, #0
   162c8:	moveq	r9, sl
   162cc:	movne	r3, #1
   162d0:	strne	r3, [sp, #16]
   162d4:	streq	r4, [sp, #40]	; 0x28
   162d8:	ldr	r0, [sl, #16]!
   162dc:	add	r4, r4, #1
   162e0:	cmp	r0, #0
   162e4:	bne	162b0 <__assert_fail@plt+0x54bc>
   162e8:	ldr	r3, [sp, #100]	; 0x64
   162ec:	str	r0, [sp, #36]	; 0x24
   162f0:	str	r3, [sp, #44]	; 0x2c
   162f4:	b	16170 <__assert_fail@plt+0x537c>
   162f8:	ldr	r3, [sp, #24]
   162fc:	ldr	r1, [pc, #752]	; 165f4 <__assert_fail@plt+0x5800>
   16300:	ldr	r2, [r3]
   16304:	ldr	r3, [r9]
   16308:	ldr	r0, [r1]
   1630c:	str	r3, [sp]
   16310:	ldr	r1, [pc, #744]	; 16600 <__assert_fail@plt+0x580c>
   16314:	ldr	r3, [sp, #104]	; 0x68
   16318:	bl	10cec <fprintf@plt>
   1631c:	ldr	r1, [sp, #96]	; 0x60
   16320:	ldr	r2, [r9, #12]
   16324:	mov	r3, #63	; 0x3f
   16328:	str	r2, [r1, #8]
   1632c:	b	160f0 <__assert_fail@plt+0x52fc>
   16330:	ldr	r3, [sp, #92]	; 0x5c
   16334:	cmp	r3, #0
   16338:	bne	1651c <__assert_fail@plt+0x5728>
   1633c:	ldr	r3, [sp, #100]	; 0x64
   16340:	cmp	r3, #0
   16344:	beq	16370 <__assert_fail@plt+0x557c>
   16348:	ldr	r3, [sp, #24]
   1634c:	ldr	r1, [pc, #672]	; 165f4 <__assert_fail@plt+0x5800>
   16350:	ldr	r2, [r3]
   16354:	ldr	r3, [sp, #96]	; 0x60
   16358:	ldr	r0, [r1]
   1635c:	ldr	r1, [pc, #672]	; 16604 <__assert_fail@plt+0x5810>
   16360:	ldr	r3, [r3, #20]
   16364:	str	r3, [sp]
   16368:	ldr	r3, [sp, #104]	; 0x68
   1636c:	bl	10cec <fprintf@plt>
   16370:	ldr	r3, [sp, #96]	; 0x60
   16374:	ldr	r1, [sp, #96]	; 0x60
   16378:	mov	r2, #0
   1637c:	ldr	r3, [r3]
   16380:	str	r2, [r1, #20]
   16384:	add	r3, r3, #1
   16388:	str	r3, [r1]
   1638c:	mov	r3, #63	; 0x3f
   16390:	mov	r0, r3
   16394:	str	r2, [r1, #8]
   16398:	add	sp, sp, #52	; 0x34
   1639c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163a0:	ldr	r1, [sp, #28]
   163a4:	cmp	r3, r1
   163a8:	bge	16448 <__assert_fail@plt+0x5654>
   163ac:	ldr	r1, [sp, #24]
   163b0:	add	r2, r2, #2
   163b4:	ldr	r3, [r1, r3, lsl #2]
   163b8:	ldr	r1, [sp, #96]	; 0x60
   163bc:	str	r3, [r1, #12]
   163c0:	str	r2, [r1]
   163c4:	b	1608c <__assert_fail@plt+0x5298>
   163c8:	ldr	r3, [sp, #24]
   163cc:	ldr	r1, [pc, #544]	; 165f4 <__assert_fail@plt+0x5800>
   163d0:	ldr	r2, [r3]
   163d4:	ldr	r3, [sp, #96]	; 0x60
   163d8:	ldr	r0, [r1]
   163dc:	ldr	r1, [pc, #548]	; 16608 <__assert_fail@plt+0x5814>
   163e0:	ldr	r3, [r3, #20]
   163e4:	str	r3, [sp]
   163e8:	ldr	r3, [sp, #104]	; 0x68
   163ec:	bl	10cec <fprintf@plt>
   163f0:	ldr	r3, [sp, #44]	; 0x2c
   163f4:	cmp	r3, #0
   163f8:	beq	16404 <__assert_fail@plt+0x5610>
   163fc:	ldr	r0, [sp, #36]	; 0x24
   16400:	bl	136fc <__assert_fail@plt+0x2908>
   16404:	ldr	r3, [sp, #96]	; 0x60
   16408:	ldr	r4, [r3, #20]
   1640c:	mov	r0, r4
   16410:	bl	10cc8 <strlen@plt>
   16414:	ldr	r3, [sp, #96]	; 0x60
   16418:	ldr	r1, [sp, #96]	; 0x60
   1641c:	mov	r2, #0
   16420:	ldr	r3, [r3]
   16424:	str	r2, [r1, #8]
   16428:	add	r3, r3, #1
   1642c:	str	r3, [r1]
   16430:	mov	r3, #63	; 0x3f
   16434:	add	r0, r4, r0
   16438:	str	r0, [r1, #20]
   1643c:	mov	r0, r3
   16440:	add	sp, sp, #52	; 0x34
   16444:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16448:	ldr	r3, [sp, #100]	; 0x64
   1644c:	cmp	r3, #0
   16450:	bne	16478 <__assert_fail@plt+0x5684>
   16454:	ldr	r2, [sp, #96]	; 0x60
   16458:	ldr	r3, [r9, #12]
   1645c:	str	r3, [r2, #8]
   16460:	ldr	r3, [sp, #32]
   16464:	ldrb	r3, [r3]
   16468:	cmp	r3, #58	; 0x3a
   1646c:	movne	r3, #63	; 0x3f
   16470:	moveq	r3, #58	; 0x3a
   16474:	b	160b0 <__assert_fail@plt+0x52bc>
   16478:	ldr	r3, [sp, #24]
   1647c:	ldr	r1, [pc, #368]	; 165f4 <__assert_fail@plt+0x5800>
   16480:	ldr	r2, [r3]
   16484:	ldr	r3, [r9]
   16488:	ldr	r0, [r1]
   1648c:	str	r3, [sp]
   16490:	ldr	r1, [pc, #372]	; 1660c <__assert_fail@plt+0x5818>
   16494:	ldr	r3, [sp, #104]	; 0x68
   16498:	bl	10cec <fprintf@plt>
   1649c:	b	16454 <__assert_fail@plt+0x5660>
   164a0:	mov	r0, r6
   164a4:	bl	1910c <__assert_fail@plt+0x8318>
   164a8:	subs	r3, r0, #0
   164ac:	mov	r8, r3
   164b0:	str	r3, [sp, #36]	; 0x24
   164b4:	mov	r3, #1
   164b8:	streq	r3, [sp, #16]
   164bc:	beq	16034 <__assert_fail@plt+0x5240>
   164c0:	mov	r2, r6
   164c4:	mov	r1, #0
   164c8:	str	r3, [sp, #44]	; 0x2c
   164cc:	bl	10d10 <memset@plt>
   164d0:	ldr	r2, [sp, #40]	; 0x28
   164d4:	mov	r1, #1
   164d8:	ldr	r3, [sp, #36]	; 0x24
   164dc:	strb	r1, [r8, r2]
   164e0:	b	1602c <__assert_fail@plt+0x5238>
   164e4:	mov	r0, r6
   164e8:	bl	1910c <__assert_fail@plt+0x8318>
   164ec:	subs	r3, r0, #0
   164f0:	str	r3, [sp, #36]	; 0x24
   164f4:	beq	165e8 <__assert_fail@plt+0x57f4>
   164f8:	mov	r2, r6
   164fc:	mov	r1, #0
   16500:	bl	10d10 <memset@plt>
   16504:	mov	r2, #1
   16508:	str	r2, [sp, #44]	; 0x2c
   1650c:	ldr	r3, [sp, #36]	; 0x24
   16510:	ldr	r2, [sp, #40]	; 0x28
   16514:	strb	fp, [r3, r2]
   16518:	b	16274 <__assert_fail@plt+0x5480>
   1651c:	ldr	r3, [sp, #96]	; 0x60
   16520:	ldr	r2, [sp, #24]
   16524:	ldr	r3, [r3]
   16528:	ldr	r3, [r2, r3, lsl #2]
   1652c:	ldrb	r3, [r3, #1]
   16530:	cmp	r3, #45	; 0x2d
   16534:	beq	1633c <__assert_fail@plt+0x5548>
   16538:	ldr	r3, [sp, #96]	; 0x60
   1653c:	ldr	r0, [sp, #32]
   16540:	ldr	r3, [r3, #20]
   16544:	ldrb	r1, [r3]
   16548:	bl	10cd4 <strchr@plt>
   1654c:	cmp	r0, #0
   16550:	beq	1633c <__assert_fail@plt+0x5548>
   16554:	mvn	r3, #0
   16558:	b	160b0 <__assert_fail@plt+0x52bc>
   1655c:	str	fp, [sp, #40]	; 0x28
   16560:	mov	r9, r4
   16564:	b	16154 <__assert_fail@plt+0x5360>
   16568:	str	fp, [sp, #40]	; 0x28
   1656c:	mov	r9, r4
   16570:	b	16034 <__assert_fail@plt+0x5240>
   16574:	str	r8, [sp, #40]	; 0x28
   16578:	mov	r9, sl
   1657c:	b	16278 <__assert_fail@plt+0x5484>
   16580:	ldr	r1, [r5]
   16584:	mov	r0, #10
   16588:	bl	10d34 <fputc@plt>
   1658c:	ldr	r0, [r5]
   16590:	bl	10c20 <funlockfile@plt>
   16594:	b	163f0 <__assert_fail@plt+0x55fc>
   16598:	ldr	r2, [r9, #8]
   1659c:	ldr	r3, [r4, #8]
   165a0:	cmp	r2, r3
   165a4:	bne	1614c <__assert_fail@plt+0x5358>
   165a8:	ldr	r2, [r9, #12]
   165ac:	ldr	r3, [r4, #12]
   165b0:	ldr	r1, [sp, #16]
   165b4:	cmp	r2, r3
   165b8:	movne	r1, #1
   165bc:	str	r1, [sp, #16]
   165c0:	b	16154 <__assert_fail@plt+0x5360>
   165c4:	ldr	r2, [r9, #8]
   165c8:	ldr	r3, [r4, #8]
   165cc:	cmp	r2, r3
   165d0:	bne	16014 <__assert_fail@plt+0x5220>
   165d4:	ldr	r2, [r9, #12]
   165d8:	ldr	r3, [r4, #12]
   165dc:	cmp	r2, r3
   165e0:	bne	16014 <__assert_fail@plt+0x5220>
   165e4:	b	16034 <__assert_fail@plt+0x5240>
   165e8:	mov	r3, #1
   165ec:	str	r3, [sp, #16]
   165f0:	b	16278 <__assert_fail@plt+0x5484>
   165f4:	andeq	fp, r2, r0, lsl r1
   165f8:	andeq	r9, r1, r8, ror sp
   165fc:	andeq	r9, r1, r8, asr #26
   16600:	andeq	r9, r1, r0, lsr #27
   16604:	andeq	r9, r1, r0, lsl #27
   16608:	andeq	r9, r1, r8, lsr #26
   1660c:	ldrdeq	r9, [r1], -r0
   16610:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16614:	sub	sp, sp, #36	; 0x24
   16618:	subs	r6, r0, #0
   1661c:	ldr	r4, [sp, #80]	; 0x50
   16620:	ldr	r8, [r4, #4]
   16624:	ble	167f8 <__assert_fail@plt+0x5a04>
   16628:	mov	sl, r3
   1662c:	ldr	r3, [r4]
   16630:	mov	r7, r2
   16634:	mov	r2, #0
   16638:	cmp	r3, r2
   1663c:	mov	r9, r1
   16640:	str	r2, [r4, #12]
   16644:	beq	16880 <__assert_fail@plt+0x5a8c>
   16648:	ldr	r2, [r4, #16]
   1664c:	cmp	r2, #0
   16650:	bne	16804 <__assert_fail@plt+0x5a10>
   16654:	mov	r5, #0
   16658:	str	r3, [r4, #32]
   1665c:	str	r3, [r4, #28]
   16660:	str	r5, [r4, #20]
   16664:	ldrb	r3, [r7]
   16668:	cmp	r3, #45	; 0x2d
   1666c:	moveq	r3, #2
   16670:	addeq	r7, r7, #1
   16674:	streq	r3, [r4, #24]
   16678:	beq	166a0 <__assert_fail@plt+0x58ac>
   1667c:	cmp	r3, #43	; 0x2b
   16680:	streq	r5, [r4, #24]
   16684:	addeq	r7, r7, #1
   16688:	beq	166a0 <__assert_fail@plt+0x58ac>
   1668c:	ldr	r3, [sp, #84]	; 0x54
   16690:	cmp	r3, #0
   16694:	beq	16910 <__assert_fail@plt+0x5b1c>
   16698:	mov	r3, #0
   1669c:	str	r3, [r4, #24]
   166a0:	mov	r3, #1
   166a4:	str	r3, [r4, #16]
   166a8:	ldrb	r3, [r7]
   166ac:	cmp	r3, #58	; 0x3a
   166b0:	moveq	r8, #0
   166b4:	cmp	r5, #0
   166b8:	beq	16760 <__assert_fail@plt+0x596c>
   166bc:	ldrb	r3, [r5]
   166c0:	cmp	r3, #0
   166c4:	beq	16760 <__assert_fail@plt+0x596c>
   166c8:	add	r3, r5, #1
   166cc:	str	r3, [r4, #20]
   166d0:	ldrb	fp, [r5]
   166d4:	mov	r0, r7
   166d8:	str	r3, [sp, #28]
   166dc:	mov	r1, fp
   166e0:	bl	10cd4 <strchr@plt>
   166e4:	ldrb	r1, [r5, #1]
   166e8:	ldr	r3, [sp, #28]
   166ec:	cmp	r1, #0
   166f0:	ldreq	r1, [r4]
   166f4:	addeq	r1, r1, #1
   166f8:	streq	r1, [r4]
   166fc:	sub	r1, fp, #58	; 0x3a
   16700:	mov	r2, r0
   16704:	cmp	r2, #0
   16708:	cmpne	r1, #1
   1670c:	mov	r0, fp
   16710:	bls	16850 <__assert_fail@plt+0x5a5c>
   16714:	ldrb	r1, [r2]
   16718:	cmp	r1, #87	; 0x57
   1671c:	ldrb	r1, [r2, #1]
   16720:	beq	1699c <__assert_fail@plt+0x5ba8>
   16724:	cmp	r1, #58	; 0x3a
   16728:	bne	16848 <__assert_fail@plt+0x5a54>
   1672c:	ldrb	r2, [r2, #2]
   16730:	cmp	r2, #58	; 0x3a
   16734:	ldrb	r2, [r5, #1]
   16738:	beq	16a94 <__assert_fail@plt+0x5ca0>
   1673c:	cmp	r2, #0
   16740:	beq	16a74 <__assert_fail@plt+0x5c80>
   16744:	ldr	r2, [r4]
   16748:	str	r3, [r4, #12]
   1674c:	add	r3, r2, #1
   16750:	str	r3, [r4]
   16754:	mov	r3, #0
   16758:	str	r3, [r4, #20]
   1675c:	b	16848 <__assert_fail@plt+0x5a54>
   16760:	ldr	fp, [r4]
   16764:	ldr	r3, [r4, #32]
   16768:	ldr	r2, [r4, #28]
   1676c:	cmp	r3, fp
   16770:	ldr	r3, [r4, #24]
   16774:	strgt	fp, [r4, #32]
   16778:	cmp	fp, r2
   1677c:	movlt	r2, fp
   16780:	strlt	fp, [r4, #28]
   16784:	cmp	r3, #1
   16788:	beq	16890 <__assert_fail@plt+0x5a9c>
   1678c:	cmp	r6, fp
   16790:	beq	168f8 <__assert_fail@plt+0x5b04>
   16794:	ldr	r3, [pc, #972]	; 16b68 <__assert_fail@plt+0x5d74>
   16798:	ldr	r5, [r9, fp, lsl #2]
   1679c:	mov	r1, r3
   167a0:	mov	r0, r5
   167a4:	str	r3, [sp, #28]
   167a8:	bl	10b9c <strcmp@plt>
   167ac:	ldr	r3, [sp, #28]
   167b0:	cmp	r0, #0
   167b4:	bne	16820 <__assert_fail@plt+0x5a2c>
   167b8:	ldr	r3, [r4, #28]
   167bc:	ldr	r2, [r4, #32]
   167c0:	add	fp, fp, #1
   167c4:	cmp	r3, r2
   167c8:	str	fp, [r4]
   167cc:	beq	16990 <__assert_fail@plt+0x5b9c>
   167d0:	cmp	fp, r2
   167d4:	beq	167e8 <__assert_fail@plt+0x59f4>
   167d8:	mov	r0, r9
   167dc:	mov	r1, r4
   167e0:	bl	15e40 <__assert_fail@plt+0x504c>
   167e4:	ldr	r3, [r4, #28]
   167e8:	cmp	r6, r3
   167ec:	str	r6, [r4]
   167f0:	str	r6, [r4, #32]
   167f4:	strne	r3, [r4]
   167f8:	mvn	r0, #0
   167fc:	add	sp, sp, #36	; 0x24
   16800:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16804:	ldrb	r3, [r7]
   16808:	ldr	r5, [r4, #20]
   1680c:	sub	r2, r3, #43	; 0x2b
   16810:	tst	r2, #253	; 0xfd
   16814:	ldrbeq	r3, [r7, #1]
   16818:	addeq	r7, r7, #1
   1681c:	b	166ac <__assert_fail@plt+0x58b8>
   16820:	ldrb	r2, [r5]
   16824:	cmp	r2, #45	; 0x2d
   16828:	beq	16944 <__assert_fail@plt+0x5b50>
   1682c:	ldr	r3, [r4, #24]
   16830:	cmp	r3, #0
   16834:	beq	167f8 <__assert_fail@plt+0x5a04>
   16838:	mov	r0, #1
   1683c:	add	fp, fp, #1
   16840:	str	fp, [r4]
   16844:	str	r5, [r4, #12]
   16848:	add	sp, sp, #36	; 0x24
   1684c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16850:	cmp	r8, #0
   16854:	beq	16870 <__assert_fail@plt+0x5a7c>
   16858:	ldr	r1, [pc, #780]	; 16b6c <__assert_fail@plt+0x5d78>
   1685c:	ldr	r2, [r9]
   16860:	mov	r3, fp
   16864:	ldr	r0, [r1]
   16868:	ldr	r1, [pc, #768]	; 16b70 <__assert_fail@plt+0x5d7c>
   1686c:	bl	10cec <fprintf@plt>
   16870:	mov	r0, #63	; 0x3f
   16874:	str	fp, [r4, #8]
   16878:	add	sp, sp, #36	; 0x24
   1687c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16880:	mov	r2, #1
   16884:	mov	r3, r2
   16888:	str	r2, [r4]
   1688c:	b	16654 <__assert_fail@plt+0x5860>
   16890:	ldr	r3, [r4, #32]
   16894:	cmp	r3, r2
   16898:	beq	16a10 <__assert_fail@plt+0x5c1c>
   1689c:	cmp	fp, r3
   168a0:	beq	168b4 <__assert_fail@plt+0x5ac0>
   168a4:	mov	r1, r4
   168a8:	mov	r0, r9
   168ac:	bl	15e40 <__assert_fail@plt+0x504c>
   168b0:	ldr	r3, [r4]
   168b4:	cmp	r6, r3
   168b8:	addgt	r1, r9, r3, lsl #2
   168bc:	bgt	168d4 <__assert_fail@plt+0x5ae0>
   168c0:	b	168f0 <__assert_fail@plt+0x5afc>
   168c4:	add	r3, r3, #1
   168c8:	cmp	r6, r3
   168cc:	str	r3, [r4]
   168d0:	beq	16930 <__assert_fail@plt+0x5b3c>
   168d4:	ldr	r2, [r1], #4
   168d8:	ldrb	r0, [r2]
   168dc:	cmp	r0, #45	; 0x2d
   168e0:	bne	168c4 <__assert_fail@plt+0x5ad0>
   168e4:	ldrb	r2, [r2, #1]
   168e8:	cmp	r2, #0
   168ec:	beq	168c4 <__assert_fail@plt+0x5ad0>
   168f0:	mov	fp, r3
   168f4:	b	16934 <__assert_fail@plt+0x5b40>
   168f8:	ldr	r3, [r4, #28]
   168fc:	ldr	r6, [r4, #32]
   16900:	mvn	r0, #0
   16904:	cmp	r6, r3
   16908:	strne	r3, [r4]
   1690c:	b	167fc <__assert_fail@plt+0x5a08>
   16910:	ldr	r0, [pc, #604]	; 16b74 <__assert_fail@plt+0x5d80>
   16914:	bl	10c80 <getenv@plt>
   16918:	ldr	r5, [r4, #20]
   1691c:	cmp	r0, #0
   16920:	bne	16698 <__assert_fail@plt+0x58a4>
   16924:	mov	r3, #1
   16928:	str	r3, [r4, #24]
   1692c:	b	166a0 <__assert_fail@plt+0x58ac>
   16930:	mov	fp, r6
   16934:	cmp	r6, fp
   16938:	str	fp, [r4, #32]
   1693c:	bne	16794 <__assert_fail@plt+0x59a0>
   16940:	b	168f8 <__assert_fail@plt+0x5b04>
   16944:	ldrb	r1, [r5, #1]
   16948:	cmp	r1, #0
   1694c:	beq	1682c <__assert_fail@plt+0x5a38>
   16950:	cmp	sl, #0
   16954:	beq	16988 <__assert_fail@plt+0x5b94>
   16958:	cmp	r1, #45	; 0x2d
   1695c:	beq	16ab8 <__assert_fail@plt+0x5cc4>
   16960:	ldr	r3, [sp, #76]	; 0x4c
   16964:	cmp	r3, #0
   16968:	beq	16988 <__assert_fail@plt+0x5b94>
   1696c:	ldrb	r3, [r5, #2]
   16970:	cmp	r3, #0
   16974:	bne	16a24 <__assert_fail@plt+0x5c30>
   16978:	mov	r0, r7
   1697c:	bl	10cd4 <strchr@plt>
   16980:	cmp	r0, #0
   16984:	beq	16a24 <__assert_fail@plt+0x5c30>
   16988:	add	r5, r5, #1
   1698c:	b	166c8 <__assert_fail@plt+0x58d4>
   16990:	mov	r3, fp
   16994:	str	fp, [r4, #28]
   16998:	b	167e8 <__assert_fail@plt+0x59f4>
   1699c:	adds	ip, sl, #0
   169a0:	movne	ip, #1
   169a4:	cmp	r1, #59	; 0x3b
   169a8:	movne	ip, #0
   169ac:	cmp	ip, #0
   169b0:	beq	16724 <__assert_fail@plt+0x5930>
   169b4:	ldrb	r2, [r5, #1]
   169b8:	cmp	r2, #0
   169bc:	bne	169d0 <__assert_fail@plt+0x5bdc>
   169c0:	ldr	r3, [r4]
   169c4:	cmp	r6, r3
   169c8:	ldrne	r3, [r9, r3, lsl #2]
   169cc:	beq	16b14 <__assert_fail@plt+0x5d20>
   169d0:	str	r3, [r4, #20]
   169d4:	ldr	lr, [pc, #412]	; 16b78 <__assert_fail@plt+0x5d84>
   169d8:	ldr	r3, [sp, #72]	; 0x48
   169dc:	mov	ip, #0
   169e0:	str	r3, [sp]
   169e4:	str	r8, [sp, #12]
   169e8:	str	r4, [sp, #8]
   169ec:	str	lr, [sp, #16]
   169f0:	mov	r3, sl
   169f4:	str	ip, [r4, #12]
   169f8:	mov	r2, r7
   169fc:	mov	r1, r9
   16a00:	mov	r0, r6
   16a04:	str	ip, [sp, #4]
   16a08:	bl	15efc <__assert_fail@plt+0x5108>
   16a0c:	b	16848 <__assert_fail@plt+0x5a54>
   16a10:	cmp	fp, r2
   16a14:	strne	fp, [r4, #28]
   16a18:	movne	r3, fp
   16a1c:	moveq	r3, r2
   16a20:	b	168b4 <__assert_fail@plt+0x5ac0>
   16a24:	ldr	r2, [sp, #76]	; 0x4c
   16a28:	add	r5, r5, #1
   16a2c:	str	r5, [r4, #20]
   16a30:	ldr	r3, [pc, #324]	; 16b7c <__assert_fail@plt+0x5d88>
   16a34:	str	r2, [sp, #4]
   16a38:	ldr	r2, [sp, #72]	; 0x48
   16a3c:	str	r3, [sp, #16]
   16a40:	str	r2, [sp]
   16a44:	str	r8, [sp, #12]
   16a48:	str	r4, [sp, #8]
   16a4c:	mov	r3, sl
   16a50:	mov	r2, r7
   16a54:	mov	r1, r9
   16a58:	mov	r0, r6
   16a5c:	bl	15efc <__assert_fail@plt+0x5108>
   16a60:	cmn	r0, #1
   16a64:	bne	16848 <__assert_fail@plt+0x5a54>
   16a68:	ldr	r3, [r4]
   16a6c:	ldr	r5, [r9, r3, lsl #2]
   16a70:	b	16988 <__assert_fail@plt+0x5b94>
   16a74:	ldr	r3, [r4]
   16a78:	cmp	r6, r3
   16a7c:	beq	16af4 <__assert_fail@plt+0x5d00>
   16a80:	ldr	r2, [r9, r3, lsl #2]
   16a84:	add	r3, r3, #1
   16a88:	str	r2, [r4, #12]
   16a8c:	str	r3, [r4]
   16a90:	b	16754 <__assert_fail@plt+0x5960>
   16a94:	cmp	r2, #0
   16a98:	moveq	r3, r2
   16a9c:	ldrne	r2, [r4]
   16aa0:	str	r3, [r4, #12]
   16aa4:	addne	r2, r2, #1
   16aa8:	strne	r2, [r4]
   16aac:	mov	r2, #0
   16ab0:	str	r2, [r4, #20]
   16ab4:	b	16848 <__assert_fail@plt+0x5a54>
   16ab8:	add	r5, r5, #2
   16abc:	str	r5, [r4, #20]
   16ac0:	str	r3, [sp, #16]
   16ac4:	ldr	r3, [sp, #76]	; 0x4c
   16ac8:	str	r8, [sp, #12]
   16acc:	str	r3, [sp, #4]
   16ad0:	ldr	r3, [sp, #72]	; 0x48
   16ad4:	str	r4, [sp, #8]
   16ad8:	str	r3, [sp]
   16adc:	mov	r2, r7
   16ae0:	mov	r3, sl
   16ae4:	mov	r1, r9
   16ae8:	mov	r0, r6
   16aec:	bl	15efc <__assert_fail@plt+0x5108>
   16af0:	b	16848 <__assert_fail@plt+0x5a54>
   16af4:	cmp	r8, #0
   16af8:	bne	16b4c <__assert_fail@plt+0x5d58>
   16afc:	str	fp, [r4, #8]
   16b00:	ldrb	r0, [r7]
   16b04:	cmp	r0, #58	; 0x3a
   16b08:	movne	r0, #63	; 0x3f
   16b0c:	moveq	r0, #58	; 0x3a
   16b10:	b	16754 <__assert_fail@plt+0x5960>
   16b14:	cmp	r8, #0
   16b18:	beq	16b34 <__assert_fail@plt+0x5d40>
   16b1c:	ldr	r1, [pc, #72]	; 16b6c <__assert_fail@plt+0x5d78>
   16b20:	ldr	r2, [r9]
   16b24:	mov	r3, fp
   16b28:	ldr	r0, [r1]
   16b2c:	ldr	r1, [pc, #76]	; 16b80 <__assert_fail@plt+0x5d8c>
   16b30:	bl	10cec <fprintf@plt>
   16b34:	str	fp, [r4, #8]
   16b38:	ldrb	r0, [r7]
   16b3c:	cmp	r0, #58	; 0x3a
   16b40:	movne	r0, #63	; 0x3f
   16b44:	moveq	r0, #58	; 0x3a
   16b48:	b	16848 <__assert_fail@plt+0x5a54>
   16b4c:	ldr	r1, [pc, #24]	; 16b6c <__assert_fail@plt+0x5d78>
   16b50:	ldr	r2, [r9]
   16b54:	mov	r3, fp
   16b58:	ldr	r0, [r1]
   16b5c:	ldr	r1, [pc, #28]	; 16b80 <__assert_fail@plt+0x5d8c>
   16b60:	bl	10cec <fprintf@plt>
   16b64:	b	16afc <__assert_fail@plt+0x5d08>
   16b68:	andeq	r9, r1, r8, lsl #28
   16b6c:	andeq	fp, r2, r0, lsl r1
   16b70:	andeq	r9, r1, ip, lsl #28
   16b74:	strdeq	r9, [r1], -r8
   16b78:	andeq	r9, r1, r4, asr lr
   16b7c:	andeq	r9, r1, r0, lsr #23
   16b80:	andeq	r9, r1, r8, lsr #28
   16b84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b88:	sub	sp, sp, #44	; 0x2c
   16b8c:	ldr	r7, [pc, #1572]	; 171b8 <__assert_fail@plt+0x63c4>
   16b90:	ldr	r4, [pc, #1572]	; 171bc <__assert_fail@plt+0x63c8>
   16b94:	subs	r6, r0, #0
   16b98:	ldm	r7, {r5, sl}
   16b9c:	str	r1, [sp, #32]
   16ba0:	str	r3, [sp, #36]	; 0x24
   16ba4:	stm	r4, {r5, sl}
   16ba8:	ble	16d54 <__assert_fail@plt+0x5f60>
   16bac:	mov	r3, #0
   16bb0:	cmp	r5, #0
   16bb4:	mov	fp, r2
   16bb8:	str	r3, [r4, #12]
   16bbc:	beq	16e10 <__assert_fail@plt+0x601c>
   16bc0:	ldr	r3, [r4, #16]
   16bc4:	cmp	r3, #0
   16bc8:	bne	16d6c <__assert_fail@plt+0x5f78>
   16bcc:	mov	r3, #0
   16bd0:	str	r5, [r4, #32]
   16bd4:	str	r5, [r4, #28]
   16bd8:	str	r3, [r4, #20]
   16bdc:	ldrb	r2, [fp]
   16be0:	cmp	r2, #45	; 0x2d
   16be4:	beq	16ec0 <__assert_fail@plt+0x60cc>
   16be8:	cmp	r2, #43	; 0x2b
   16bec:	streq	r3, [r4, #24]
   16bf0:	addeq	fp, fp, #1
   16bf4:	moveq	r5, r3
   16bf8:	beq	16c14 <__assert_fail@plt+0x5e20>
   16bfc:	ldr	r2, [sp, #88]	; 0x58
   16c00:	cmp	r2, #0
   16c04:	movne	r5, r3
   16c08:	beq	16ea0 <__assert_fail@plt+0x60ac>
   16c0c:	mov	r3, #0
   16c10:	str	r3, [r4, #24]
   16c14:	mov	r3, #1
   16c18:	str	r3, [r4, #16]
   16c1c:	ldrb	r3, [fp]
   16c20:	cmp	r3, #58	; 0x3a
   16c24:	moveq	sl, #0
   16c28:	cmp	r5, #0
   16c2c:	beq	16cb0 <__assert_fail@plt+0x5ebc>
   16c30:	ldrb	r3, [r5]
   16c34:	cmp	r3, #0
   16c38:	beq	16cb0 <__assert_fail@plt+0x5ebc>
   16c3c:	add	r9, r5, #1
   16c40:	str	r9, [r4, #20]
   16c44:	ldrb	r8, [r5]
   16c48:	mov	r0, fp
   16c4c:	mov	r1, r8
   16c50:	bl	10cd4 <strchr@plt>
   16c54:	ldrb	r3, [r5, #1]
   16c58:	str	r8, [sp, #28]
   16c5c:	cmp	r3, #0
   16c60:	ldreq	r3, [r4]
   16c64:	addeq	r3, r3, #1
   16c68:	streq	r3, [r4]
   16c6c:	sub	r3, r8, #58	; 0x3a
   16c70:	cmp	r0, #0
   16c74:	cmpne	r3, #1
   16c78:	bls	16dd4 <__assert_fail@plt+0x5fe0>
   16c7c:	ldrb	r3, [r0]
   16c80:	cmp	r3, #87	; 0x57
   16c84:	ldrb	r3, [r0, #1]
   16c88:	beq	16f48 <__assert_fail@plt+0x6154>
   16c8c:	cmp	r3, #58	; 0x3a
   16c90:	beq	16fec <__assert_fail@plt+0x61f8>
   16c94:	ldr	r3, [r4, #8]
   16c98:	mov	r0, r8
   16c9c:	ldr	r9, [r4, #12]
   16ca0:	ldr	r5, [r4]
   16ca4:	str	r3, [sp, #28]
   16ca8:	mov	r2, r3
   16cac:	b	16dbc <__assert_fail@plt+0x5fc8>
   16cb0:	ldr	r5, [r4]
   16cb4:	ldr	r8, [r4, #32]
   16cb8:	ldr	r3, [r4, #28]
   16cbc:	cmp	r8, r5
   16cc0:	ldr	r2, [r4, #24]
   16cc4:	movgt	r8, r5
   16cc8:	strgt	r5, [r4, #32]
   16ccc:	cmp	r5, r3
   16cd0:	movlt	r3, r5
   16cd4:	strlt	r5, [r4, #28]
   16cd8:	cmp	r2, #1
   16cdc:	beq	16e20 <__assert_fail@plt+0x602c>
   16ce0:	cmp	r6, r5
   16ce4:	beq	16e88 <__assert_fail@plt+0x6094>
   16ce8:	ldr	r3, [sp, #32]
   16cec:	ldr	r9, [r3, r5, lsl #2]
   16cf0:	ldr	r3, [pc, #1224]	; 171c0 <__assert_fail@plt+0x63cc>
   16cf4:	mov	r0, r9
   16cf8:	mov	r1, r3
   16cfc:	str	r3, [sp, #28]
   16d00:	bl	10b9c <strcmp@plt>
   16d04:	ldr	r3, [sp, #28]
   16d08:	cmp	r0, #0
   16d0c:	bne	16d88 <__assert_fail@plt+0x5f94>
   16d10:	add	r3, r5, #1
   16d14:	ldr	r5, [r4, #28]
   16d18:	str	r3, [r4]
   16d1c:	cmp	r5, r8
   16d20:	beq	16f3c <__assert_fail@plt+0x6148>
   16d24:	cmp	r3, r8
   16d28:	beq	16d3c <__assert_fail@plt+0x5f48>
   16d2c:	ldr	r0, [sp, #32]
   16d30:	ldr	r1, [pc, #1156]	; 171bc <__assert_fail@plt+0x63c8>
   16d34:	bl	15e40 <__assert_fail@plt+0x504c>
   16d38:	ldr	r5, [r4, #28]
   16d3c:	mov	r8, r6
   16d40:	cmp	r8, r5
   16d44:	str	r6, [r4, #32]
   16d48:	str	r6, [r4]
   16d4c:	moveq	r5, r6
   16d50:	bne	16e98 <__assert_fail@plt+0x60a4>
   16d54:	ldr	r3, [r4, #8]
   16d58:	ldr	r9, [r4, #12]
   16d5c:	str	r3, [sp, #28]
   16d60:	mvn	r0, #0
   16d64:	mov	r2, r3
   16d68:	b	16dbc <__assert_fail@plt+0x5fc8>
   16d6c:	ldrb	r3, [r2]
   16d70:	ldr	r5, [r4, #20]
   16d74:	sub	r2, r3, #43	; 0x2b
   16d78:	tst	r2, #253	; 0xfd
   16d7c:	ldrbeq	r3, [fp, #1]
   16d80:	addeq	fp, fp, #1
   16d84:	b	16c20 <__assert_fail@plt+0x5e2c>
   16d88:	ldrb	r2, [r9]
   16d8c:	cmp	r2, #45	; 0x2d
   16d90:	beq	16eec <__assert_fail@plt+0x60f8>
   16d94:	ldr	r3, [r4, #24]
   16d98:	cmp	r3, #0
   16d9c:	beq	16d54 <__assert_fail@plt+0x5f60>
   16da0:	ldr	r3, [r4, #8]
   16da4:	mov	r0, #1
   16da8:	mov	r2, r3
   16dac:	add	r5, r5, #1
   16db0:	str	r5, [r4]
   16db4:	str	r9, [r4, #12]
   16db8:	str	r3, [sp, #28]
   16dbc:	ldr	r3, [pc, #1024]	; 171c4 <__assert_fail@plt+0x63d0>
   16dc0:	str	r5, [r7]
   16dc4:	str	r2, [r7, #8]
   16dc8:	str	r9, [r3]
   16dcc:	add	sp, sp, #44	; 0x2c
   16dd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16dd4:	cmp	sl, #0
   16dd8:	beq	16df8 <__assert_fail@plt+0x6004>
   16ddc:	ldr	r1, [pc, #996]	; 171c8 <__assert_fail@plt+0x63d4>
   16de0:	ldr	r3, [sp, #32]
   16de4:	ldr	r0, [r1]
   16de8:	ldr	r2, [r3]
   16dec:	ldr	r1, [pc, #984]	; 171cc <__assert_fail@plt+0x63d8>
   16df0:	mov	r3, r8
   16df4:	bl	10cec <fprintf@plt>
   16df8:	str	r8, [r4, #8]
   16dfc:	ldr	r5, [r4]
   16e00:	ldr	r9, [r4, #12]
   16e04:	mov	r0, #63	; 0x3f
   16e08:	ldr	r2, [sp, #28]
   16e0c:	b	16dbc <__assert_fail@plt+0x5fc8>
   16e10:	mov	r3, #1
   16e14:	mov	r5, r3
   16e18:	str	r3, [r4]
   16e1c:	b	16bcc <__assert_fail@plt+0x5dd8>
   16e20:	cmp	r8, r3
   16e24:	beq	16fdc <__assert_fail@plt+0x61e8>
   16e28:	cmp	r5, r8
   16e2c:	beq	16e40 <__assert_fail@plt+0x604c>
   16e30:	ldr	r1, [pc, #900]	; 171bc <__assert_fail@plt+0x63c8>
   16e34:	ldr	r0, [sp, #32]
   16e38:	bl	15e40 <__assert_fail@plt+0x504c>
   16e3c:	ldr	r8, [r4]
   16e40:	cmp	r6, r8
   16e44:	ldrgt	r3, [sp, #32]
   16e48:	addgt	r2, r3, r8, lsl #2
   16e4c:	bgt	16e64 <__assert_fail@plt+0x6070>
   16e50:	b	16e80 <__assert_fail@plt+0x608c>
   16e54:	add	r8, r8, #1
   16e58:	cmp	r6, r8
   16e5c:	str	r8, [r4]
   16e60:	beq	16ed4 <__assert_fail@plt+0x60e0>
   16e64:	ldr	r3, [r2], #4
   16e68:	ldrb	r1, [r3]
   16e6c:	cmp	r1, #45	; 0x2d
   16e70:	bne	16e54 <__assert_fail@plt+0x6060>
   16e74:	ldrb	r3, [r3, #1]
   16e78:	cmp	r3, #0
   16e7c:	beq	16e54 <__assert_fail@plt+0x6060>
   16e80:	mov	r5, r8
   16e84:	b	16ed8 <__assert_fail@plt+0x60e4>
   16e88:	ldr	r5, [r4, #28]
   16e8c:	cmp	r8, r5
   16e90:	moveq	r5, r6
   16e94:	beq	16d54 <__assert_fail@plt+0x5f60>
   16e98:	str	r5, [r4]
   16e9c:	b	16d54 <__assert_fail@plt+0x5f60>
   16ea0:	ldr	r0, [pc, #808]	; 171d0 <__assert_fail@plt+0x63dc>
   16ea4:	bl	10c80 <getenv@plt>
   16ea8:	ldr	r5, [r4, #20]
   16eac:	cmp	r0, #0
   16eb0:	bne	16c0c <__assert_fail@plt+0x5e18>
   16eb4:	mov	r3, #1
   16eb8:	str	r3, [r4, #24]
   16ebc:	b	16c14 <__assert_fail@plt+0x5e20>
   16ec0:	mov	r2, #2
   16ec4:	add	fp, fp, #1
   16ec8:	mov	r5, r3
   16ecc:	str	r2, [r4, #24]
   16ed0:	b	16c14 <__assert_fail@plt+0x5e20>
   16ed4:	mov	r5, r6
   16ed8:	cmp	r6, r5
   16edc:	mov	r8, r5
   16ee0:	str	r5, [r4, #32]
   16ee4:	bne	16ce8 <__assert_fail@plt+0x5ef4>
   16ee8:	b	16e88 <__assert_fail@plt+0x6094>
   16eec:	ldrb	r1, [r9, #1]
   16ef0:	cmp	r1, #0
   16ef4:	beq	16d94 <__assert_fail@plt+0x5fa0>
   16ef8:	ldr	r2, [sp, #36]	; 0x24
   16efc:	cmp	r2, #0
   16f00:	beq	16f34 <__assert_fail@plt+0x6140>
   16f04:	cmp	r1, #45	; 0x2d
   16f08:	beq	170e8 <__assert_fail@plt+0x62f4>
   16f0c:	ldr	r3, [sp, #84]	; 0x54
   16f10:	cmp	r3, #0
   16f14:	beq	16f34 <__assert_fail@plt+0x6140>
   16f18:	ldrb	r3, [r9, #2]
   16f1c:	cmp	r3, #0
   16f20:	bne	17030 <__assert_fail@plt+0x623c>
   16f24:	mov	r0, fp
   16f28:	bl	10cd4 <strchr@plt>
   16f2c:	cmp	r0, #0
   16f30:	beq	17030 <__assert_fail@plt+0x623c>
   16f34:	add	r5, r9, #1
   16f38:	b	16c3c <__assert_fail@plt+0x5e48>
   16f3c:	mov	r5, r3
   16f40:	str	r3, [r4, #28]
   16f44:	b	16d3c <__assert_fail@plt+0x5f48>
   16f48:	ldr	r1, [sp, #36]	; 0x24
   16f4c:	sub	r2, r3, #59	; 0x3b
   16f50:	cmp	r1, #0
   16f54:	clz	r2, r2
   16f58:	lsr	r2, r2, #5
   16f5c:	moveq	r2, #0
   16f60:	cmp	r2, #0
   16f64:	beq	16c8c <__assert_fail@plt+0x5e98>
   16f68:	ldrb	r3, [r5, #1]
   16f6c:	cmp	r3, #0
   16f70:	bne	16f88 <__assert_fail@plt+0x6194>
   16f74:	ldr	r3, [r4]
   16f78:	cmp	r6, r3
   16f7c:	beq	17150 <__assert_fail@plt+0x635c>
   16f80:	ldr	r2, [sp, #32]
   16f84:	ldr	r9, [r2, r3, lsl #2]
   16f88:	ldr	r3, [sp, #80]	; 0x50
   16f8c:	ldr	r1, [sp, #32]
   16f90:	str	r3, [sp]
   16f94:	ldr	r3, [sp, #36]	; 0x24
   16f98:	ldr	lr, [pc, #564]	; 171d4 <__assert_fail@plt+0x63e0>
   16f9c:	mov	r2, fp
   16fa0:	mov	r0, r6
   16fa4:	mov	ip, #0
   16fa8:	str	sl, [sp, #12]
   16fac:	str	r4, [sp, #8]
   16fb0:	str	lr, [sp, #16]
   16fb4:	str	ip, [sp, #4]
   16fb8:	str	r9, [r4, #20]
   16fbc:	str	ip, [r4, #12]
   16fc0:	bl	15efc <__assert_fail@plt+0x5108>
   16fc4:	ldr	r3, [r4, #8]
   16fc8:	ldr	r5, [r4]
   16fcc:	ldr	r9, [r4, #12]
   16fd0:	str	r3, [sp, #28]
   16fd4:	mov	r2, r3
   16fd8:	b	16dbc <__assert_fail@plt+0x5fc8>
   16fdc:	cmp	r5, r8
   16fe0:	movne	r8, r5
   16fe4:	strne	r5, [r4, #28]
   16fe8:	b	16e40 <__assert_fail@plt+0x604c>
   16fec:	ldrb	r3, [r0, #2]
   16ff0:	cmp	r3, #58	; 0x3a
   16ff4:	ldrb	r3, [r5, #1]
   16ff8:	beq	170b0 <__assert_fail@plt+0x62bc>
   16ffc:	cmp	r3, #0
   17000:	ldr	r5, [r4]
   17004:	beq	17084 <__assert_fail@plt+0x6290>
   17008:	ldr	r3, [r4, #8]
   1700c:	mov	r0, r8
   17010:	add	r5, r5, #1
   17014:	str	r9, [r4, #12]
   17018:	str	r5, [r4]
   1701c:	str	r3, [sp, #28]
   17020:	mov	r3, #0
   17024:	str	r3, [r4, #20]
   17028:	ldr	r2, [sp, #28]
   1702c:	b	16dbc <__assert_fail@plt+0x5fc8>
   17030:	ldr	r2, [sp, #84]	; 0x54
   17034:	ldr	r3, [pc, #412]	; 171d8 <__assert_fail@plt+0x63e4>
   17038:	str	r2, [sp, #4]
   1703c:	ldr	r2, [sp, #80]	; 0x50
   17040:	str	r3, [sp, #16]
   17044:	str	r2, [sp]
   17048:	add	r9, r9, #1
   1704c:	str	sl, [sp, #12]
   17050:	str	r4, [sp, #8]
   17054:	ldr	r3, [sp, #36]	; 0x24
   17058:	mov	r2, fp
   1705c:	ldr	r1, [sp, #32]
   17060:	mov	r0, r6
   17064:	str	r9, [r4, #20]
   17068:	bl	15efc <__assert_fail@plt+0x5108>
   1706c:	cmn	r0, #1
   17070:	bne	16fc4 <__assert_fail@plt+0x61d0>
   17074:	ldr	r3, [r4]
   17078:	ldr	r2, [sp, #32]
   1707c:	ldr	r9, [r2, r3, lsl #2]
   17080:	b	16f34 <__assert_fail@plt+0x6140>
   17084:	cmp	r6, r5
   17088:	beq	17120 <__assert_fail@plt+0x632c>
   1708c:	ldr	r3, [r4, #8]
   17090:	mov	r0, r8
   17094:	str	r3, [sp, #28]
   17098:	ldr	r3, [sp, #32]
   1709c:	ldr	r9, [r3, r5, lsl #2]
   170a0:	add	r5, r5, #1
   170a4:	str	r9, [r4, #12]
   170a8:	str	r5, [r4]
   170ac:	b	17020 <__assert_fail@plt+0x622c>
   170b0:	cmp	r3, #0
   170b4:	moveq	r9, r3
   170b8:	ldrne	r5, [r4]
   170bc:	mov	r3, #0
   170c0:	str	r3, [r4, #20]
   170c4:	ldr	r3, [r4, #8]
   170c8:	addne	r5, r5, #1
   170cc:	ldreq	r5, [r4]
   170d0:	strne	r5, [r4]
   170d4:	str	r9, [r4, #12]
   170d8:	mov	r0, r8
   170dc:	str	r3, [sp, #28]
   170e0:	mov	r2, r3
   170e4:	b	16dbc <__assert_fail@plt+0x5fc8>
   170e8:	str	r3, [sp, #16]
   170ec:	ldr	r3, [sp, #84]	; 0x54
   170f0:	add	r9, r9, #2
   170f4:	str	r3, [sp, #4]
   170f8:	ldr	r3, [sp, #80]	; 0x50
   170fc:	str	sl, [sp, #12]
   17100:	str	r3, [sp]
   17104:	str	r4, [sp, #8]
   17108:	mov	r3, r2
   1710c:	ldr	r1, [sp, #32]
   17110:	mov	r2, fp
   17114:	mov	r0, r6
   17118:	str	r9, [r4, #20]
   1711c:	b	16fc0 <__assert_fail@plt+0x61cc>
   17120:	cmp	sl, #0
   17124:	bne	17198 <__assert_fail@plt+0x63a4>
   17128:	str	r8, [r4, #8]
   1712c:	ldrb	r8, [fp]
   17130:	cmp	r8, #58	; 0x3a
   17134:	moveq	r0, r8
   17138:	ldreq	r5, [r4]
   1713c:	ldreq	r9, [r4, #12]
   17140:	ldrne	r5, [r4]
   17144:	ldrne	r9, [r4, #12]
   17148:	movne	r0, #63	; 0x3f
   1714c:	b	17020 <__assert_fail@plt+0x622c>
   17150:	cmp	sl, #0
   17154:	beq	17174 <__assert_fail@plt+0x6380>
   17158:	ldr	r1, [pc, #104]	; 171c8 <__assert_fail@plt+0x63d4>
   1715c:	ldr	r3, [sp, #32]
   17160:	ldr	r0, [r1]
   17164:	ldr	r2, [r3]
   17168:	ldr	r1, [pc, #108]	; 171dc <__assert_fail@plt+0x63e8>
   1716c:	mov	r3, r8
   17170:	bl	10cec <fprintf@plt>
   17174:	str	r8, [r4, #8]
   17178:	ldrb	r8, [fp]
   1717c:	ldr	r5, [r4]
   17180:	ldr	r9, [r4, #12]
   17184:	cmp	r8, #58	; 0x3a
   17188:	movne	r0, #63	; 0x3f
   1718c:	moveq	r0, #58	; 0x3a
   17190:	ldr	r2, [sp, #28]
   17194:	b	16dbc <__assert_fail@plt+0x5fc8>
   17198:	ldr	r3, [sp, #32]
   1719c:	ldr	r1, [pc, #36]	; 171c8 <__assert_fail@plt+0x63d4>
   171a0:	ldr	r2, [r3]
   171a4:	ldr	r0, [r1]
   171a8:	mov	r3, r8
   171ac:	ldr	r1, [pc, #40]	; 171dc <__assert_fail@plt+0x63e8>
   171b0:	bl	10cec <fprintf@plt>
   171b4:	b	17128 <__assert_fail@plt+0x6334>
   171b8:	andeq	fp, r2, r4, lsl #2
   171bc:	andeq	fp, r2, r0, lsr r1
   171c0:	andeq	r9, r1, r8, lsl #28
   171c4:			; <UNDEFINED> instruction: 0x0002b1bc
   171c8:	andeq	fp, r2, r0, lsl r1
   171cc:	andeq	r9, r1, ip, lsl #28
   171d0:	strdeq	r9, [r1], -r8
   171d4:	andeq	r9, r1, r4, asr lr
   171d8:	andeq	r9, r1, r0, lsr #23
   171dc:	andeq	r9, r1, r8, lsr #28
   171e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   171e4:	sub	sp, sp, #20
   171e8:	ldr	r7, [pc, #1052]	; 1760c <__assert_fail@plt+0x6818>
   171ec:	ldr	r4, [pc, #1052]	; 17610 <__assert_fail@plt+0x681c>
   171f0:	subs	r6, r0, #0
   171f4:	ldr	r5, [r7]
   171f8:	ldr	r3, [r7, #4]
   171fc:	str	r1, [sp, #4]
   17200:	str	r5, [r4]
   17204:	str	r3, [r4, #4]
   17208:	ble	174e0 <__assert_fail@plt+0x66ec>
   1720c:	mov	sl, r2
   17210:	cmp	r5, #0
   17214:	mov	r2, #0
   17218:	str	r2, [r4, #12]
   1721c:	beq	172c8 <__assert_fail@plt+0x64d4>
   17220:	ldr	r2, [r4, #16]
   17224:	cmp	r2, #0
   17228:	beq	172d4 <__assert_fail@plt+0x64e0>
   1722c:	ldrb	r2, [sl]
   17230:	sub	r1, r2, #43	; 0x2b
   17234:	tst	r1, #253	; 0xfd
   17238:	ldrbeq	r2, [sl, #1]
   1723c:	addeq	sl, sl, #1
   17240:	cmp	r2, #58	; 0x3a
   17244:	ldr	r2, [r4, #20]
   17248:	moveq	r3, #0
   1724c:	cmp	r2, #0
   17250:	beq	17328 <__assert_fail@plt+0x6534>
   17254:	ldrb	r1, [r2]
   17258:	cmp	r1, #0
   1725c:	beq	17328 <__assert_fail@plt+0x6534>
   17260:	add	r9, r2, #1
   17264:	str	r9, [r4, #20]
   17268:	ldrb	r8, [r2]
   1726c:	mov	r0, sl
   17270:	str	r3, [sp, #12]
   17274:	mov	r1, r8
   17278:	str	r2, [sp, #8]
   1727c:	bl	10cd4 <strchr@plt>
   17280:	ldr	r2, [sp, #8]
   17284:	mov	fp, r8
   17288:	ldr	r3, [sp, #12]
   1728c:	ldrb	r1, [r2, #1]
   17290:	cmp	r1, #0
   17294:	addeq	r5, r5, #1
   17298:	sub	r1, r8, #58	; 0x3a
   1729c:	streq	r5, [r4]
   172a0:	cmp	r0, #0
   172a4:	cmpne	r1, #1
   172a8:	bls	17414 <__assert_fail@plt+0x6620>
   172ac:	ldrb	r1, [r0, #1]
   172b0:	cmp	r1, #58	; 0x3a
   172b4:	beq	17520 <__assert_fail@plt+0x672c>
   172b8:	mov	r0, r8
   172bc:	ldr	r9, [r4, #12]
   172c0:	ldr	fp, [r4, #8]
   172c4:	b	173fc <__assert_fail@plt+0x6608>
   172c8:	mov	r2, #1
   172cc:	mov	r5, r2
   172d0:	str	r2, [r4]
   172d4:	mov	r2, #0
   172d8:	str	r5, [r4, #32]
   172dc:	str	r5, [r4, #28]
   172e0:	str	r2, [r4, #20]
   172e4:	ldrb	r1, [sl]
   172e8:	cmp	r1, #45	; 0x2d
   172ec:	moveq	r1, #2
   172f0:	addeq	sl, sl, #1
   172f4:	streq	r1, [r4, #24]
   172f8:	beq	17314 <__assert_fail@plt+0x6520>
   172fc:	cmp	r1, #43	; 0x2b
   17300:	addeq	sl, sl, #1
   17304:	moveq	r1, r2
   17308:	movne	r1, r2
   1730c:	streq	r2, [r4, #24]
   17310:	strne	r2, [r4, #24]
   17314:	mov	r2, #1
   17318:	str	r2, [r4, #16]
   1731c:	ldrb	r2, [sl]
   17320:	cmp	r2, #58	; 0x3a
   17324:	beq	1744c <__assert_fail@plt+0x6658>
   17328:	add	r1, r4, #24
   1732c:	ldm	r1, {r1, r2, r8}
   17330:	cmp	r8, r5
   17334:	movgt	r8, r5
   17338:	strgt	r5, [r4, #32]
   1733c:	cmp	r5, r2
   17340:	movlt	r2, r5
   17344:	strlt	r5, [r4, #28]
   17348:	cmp	r1, #1
   1734c:	beq	17460 <__assert_fail@plt+0x666c>
   17350:	cmp	r6, r5
   17354:	str	r3, [sp, #8]
   17358:	beq	174d0 <__assert_fail@plt+0x66dc>
   1735c:	ldr	fp, [sp, #4]
   17360:	ldr	r1, [pc, #684]	; 17614 <__assert_fail@plt+0x6820>
   17364:	ldr	r9, [fp, r5, lsl #2]
   17368:	mov	r0, r9
   1736c:	bl	10b9c <strcmp@plt>
   17370:	ldr	r3, [sp, #8]
   17374:	cmp	r0, #0
   17378:	bne	173d0 <__assert_fail@plt+0x65dc>
   1737c:	add	r3, r5, #1
   17380:	ldr	r5, [r4, #28]
   17384:	str	r3, [r4]
   17388:	cmp	r5, r8
   1738c:	beq	17514 <__assert_fail@plt+0x6720>
   17390:	cmp	r3, r8
   17394:	beq	173a8 <__assert_fail@plt+0x65b4>
   17398:	mov	r0, fp
   1739c:	ldr	r1, [pc, #620]	; 17610 <__assert_fail@plt+0x681c>
   173a0:	bl	15e40 <__assert_fail@plt+0x504c>
   173a4:	ldr	r5, [r4, #28]
   173a8:	mov	r8, r6
   173ac:	cmp	r8, r5
   173b0:	str	r6, [r4, #32]
   173b4:	str	r6, [r4]
   173b8:	beq	174dc <__assert_fail@plt+0x66e8>
   173bc:	str	r5, [r4]
   173c0:	ldr	r9, [r4, #12]
   173c4:	ldr	fp, [r4, #8]
   173c8:	mvn	r0, #0
   173cc:	b	173fc <__assert_fail@plt+0x6608>
   173d0:	ldrb	r2, [r9]
   173d4:	cmp	r2, #45	; 0x2d
   173d8:	beq	17500 <__assert_fail@plt+0x670c>
   173dc:	ldr	r3, [r4, #24]
   173e0:	cmp	r3, #0
   173e4:	beq	174e0 <__assert_fail@plt+0x66ec>
   173e8:	ldr	fp, [r4, #8]
   173ec:	mov	r0, #1
   173f0:	add	r5, r5, #1
   173f4:	str	r5, [r4]
   173f8:	str	r9, [r4, #12]
   173fc:	ldr	r3, [pc, #532]	; 17618 <__assert_fail@plt+0x6824>
   17400:	str	r5, [r7]
   17404:	str	fp, [r7, #8]
   17408:	str	r9, [r3]
   1740c:	add	sp, sp, #20
   17410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17414:	cmp	r3, #0
   17418:	beq	1743c <__assert_fail@plt+0x6648>
   1741c:	ldr	r3, [sp, #4]
   17420:	ldr	r1, [pc, #500]	; 1761c <__assert_fail@plt+0x6828>
   17424:	ldr	r2, [r3]
   17428:	ldr	r0, [r1]
   1742c:	mov	r3, r8
   17430:	ldr	r1, [pc, #488]	; 17620 <__assert_fail@plt+0x682c>
   17434:	bl	10cec <fprintf@plt>
   17438:	ldr	r5, [r4]
   1743c:	str	r8, [r4, #8]
   17440:	ldr	r9, [r4, #12]
   17444:	mov	r0, #63	; 0x3f
   17448:	b	173fc <__assert_fail@plt+0x6608>
   1744c:	cmp	r1, #1
   17450:	mov	r8, r5
   17454:	mov	r2, r5
   17458:	mov	r3, #0
   1745c:	bne	17350 <__assert_fail@plt+0x655c>
   17460:	cmp	r2, r8
   17464:	beq	17558 <__assert_fail@plt+0x6764>
   17468:	cmp	r5, r8
   1746c:	beq	17488 <__assert_fail@plt+0x6694>
   17470:	ldr	r1, [pc, #408]	; 17610 <__assert_fail@plt+0x681c>
   17474:	ldr	r0, [sp, #4]
   17478:	str	r3, [sp, #8]
   1747c:	bl	15e40 <__assert_fail@plt+0x504c>
   17480:	ldr	r8, [r4]
   17484:	ldr	r3, [sp, #8]
   17488:	cmp	r6, r8
   1748c:	ldrgt	r2, [sp, #4]
   17490:	addgt	r1, r2, r8, lsl #2
   17494:	bgt	174ac <__assert_fail@plt+0x66b8>
   17498:	b	174c8 <__assert_fail@plt+0x66d4>
   1749c:	add	r8, r8, #1
   174a0:	cmp	r6, r8
   174a4:	str	r8, [r4]
   174a8:	beq	174f0 <__assert_fail@plt+0x66fc>
   174ac:	ldr	r2, [r1], #4
   174b0:	ldrb	r0, [r2]
   174b4:	cmp	r0, #45	; 0x2d
   174b8:	bne	1749c <__assert_fail@plt+0x66a8>
   174bc:	ldrb	r2, [r2, #1]
   174c0:	cmp	r2, #0
   174c4:	beq	1749c <__assert_fail@plt+0x66a8>
   174c8:	mov	r5, r8
   174cc:	b	174f4 <__assert_fail@plt+0x6700>
   174d0:	ldr	r5, [r4, #28]
   174d4:	cmp	r8, r5
   174d8:	bne	173bc <__assert_fail@plt+0x65c8>
   174dc:	mov	r5, r6
   174e0:	ldr	r9, [r4, #12]
   174e4:	ldr	fp, [r4, #8]
   174e8:	mvn	r0, #0
   174ec:	b	173fc <__assert_fail@plt+0x6608>
   174f0:	mov	r5, r6
   174f4:	mov	r8, r5
   174f8:	str	r5, [r4, #32]
   174fc:	b	17350 <__assert_fail@plt+0x655c>
   17500:	ldrb	r2, [r9, #1]
   17504:	cmp	r2, #0
   17508:	beq	173dc <__assert_fail@plt+0x65e8>
   1750c:	add	r2, r9, #1
   17510:	b	17260 <__assert_fail@plt+0x646c>
   17514:	mov	r5, r3
   17518:	str	r3, [r4, #28]
   1751c:	b	173a8 <__assert_fail@plt+0x65b4>
   17520:	ldrb	r1, [r0, #2]
   17524:	cmp	r1, #58	; 0x3a
   17528:	beq	17594 <__assert_fail@plt+0x67a0>
   1752c:	ldrb	r2, [r2, #1]
   17530:	cmp	r2, #0
   17534:	beq	17568 <__assert_fail@plt+0x6774>
   17538:	ldr	fp, [r4, #8]
   1753c:	mov	r0, r8
   17540:	add	r5, r5, #1
   17544:	str	r5, [r4]
   17548:	str	r9, [r4, #12]
   1754c:	mov	r3, #0
   17550:	str	r3, [r4, #20]
   17554:	b	173fc <__assert_fail@plt+0x6608>
   17558:	cmp	r5, r8
   1755c:	movne	r8, r5
   17560:	strne	r5, [r4, #28]
   17564:	b	17488 <__assert_fail@plt+0x6694>
   17568:	cmp	r6, r5
   1756c:	beq	175c0 <__assert_fail@plt+0x67cc>
   17570:	ldr	r2, [sp, #4]
   17574:	add	r3, r5, #1
   17578:	ldr	fp, [r4, #8]
   1757c:	ldr	r9, [r2, r5, lsl #2]
   17580:	mov	r0, r8
   17584:	mov	r5, r3
   17588:	str	r9, [r4, #12]
   1758c:	str	r3, [r4]
   17590:	b	1754c <__assert_fail@plt+0x6758>
   17594:	ldrb	r3, [r2, #1]
   17598:	mov	r0, r8
   1759c:	ldr	fp, [r4, #8]
   175a0:	cmp	r3, #0
   175a4:	moveq	r9, r3
   175a8:	addne	r5, r5, #1
   175ac:	mov	r3, #0
   175b0:	strne	r5, [r4]
   175b4:	str	r9, [r4, #12]
   175b8:	str	r3, [r4, #20]
   175bc:	b	173fc <__assert_fail@plt+0x6608>
   175c0:	cmp	r3, #0
   175c4:	beq	175e8 <__assert_fail@plt+0x67f4>
   175c8:	ldr	r3, [sp, #4]
   175cc:	ldr	r1, [pc, #72]	; 1761c <__assert_fail@plt+0x6828>
   175d0:	ldr	r2, [r3]
   175d4:	ldr	r0, [r1]
   175d8:	mov	r3, r8
   175dc:	ldr	r1, [pc, #64]	; 17624 <__assert_fail@plt+0x6830>
   175e0:	bl	10cec <fprintf@plt>
   175e4:	ldr	r6, [r4]
   175e8:	str	r8, [r4, #8]
   175ec:	ldrb	r8, [sl]
   175f0:	mov	r5, r6
   175f4:	cmp	r8, #58	; 0x3a
   175f8:	moveq	r0, r8
   175fc:	ldreq	r9, [r4, #12]
   17600:	ldrne	r9, [r4, #12]
   17604:	movne	r0, #63	; 0x3f
   17608:	b	1754c <__assert_fail@plt+0x6758>
   1760c:	andeq	fp, r2, r4, lsl #2
   17610:	andeq	fp, r2, r0, lsr r1
   17614:	andeq	r9, r1, r8, lsl #28
   17618:			; <UNDEFINED> instruction: 0x0002b1bc
   1761c:	andeq	fp, r2, r0, lsl r1
   17620:	andeq	r9, r1, ip, lsl #28
   17624:	andeq	r9, r1, r8, lsr #28
   17628:	push	{r4, lr}
   1762c:	ror	r0, r0, #3
   17630:	bl	19688 <__assert_fail@plt+0x8894>
   17634:	mov	r0, r1
   17638:	pop	{r4, pc}
   1763c:	sub	r0, r1, r0
   17640:	clz	r0, r0
   17644:	lsr	r0, r0, #5
   17648:	bx	lr
   1764c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17650:	mov	r5, r1
   17654:	mov	r6, r0
   17658:	ldr	r4, [r0, #24]
   1765c:	ldr	r1, [r0, #8]
   17660:	mov	r0, r5
   17664:	mov	r8, r3
   17668:	mov	sl, r2
   1766c:	blx	r4
   17670:	ldr	r3, [r6, #8]
   17674:	cmp	r0, r3
   17678:	bcs	17768 <__assert_fail@plt+0x6974>
   1767c:	ldr	r9, [r6]
   17680:	mov	r7, r0
   17684:	add	r4, r9, r0, lsl #3
   17688:	str	r4, [sl]
   1768c:	ldr	r3, [r9, r0, lsl #3]
   17690:	cmp	r3, #0
   17694:	beq	17728 <__assert_fail@plt+0x6934>
   17698:	cmp	r5, r3
   1769c:	beq	176bc <__assert_fail@plt+0x68c8>
   176a0:	mov	r1, r3
   176a4:	mov	r0, r5
   176a8:	ldr	r3, [r6, #28]
   176ac:	blx	r3
   176b0:	cmp	r0, #0
   176b4:	beq	1771c <__assert_fail@plt+0x6928>
   176b8:	ldr	r3, [r9, r7, lsl #3]
   176bc:	cmp	r8, #0
   176c0:	beq	176ec <__assert_fail@plt+0x68f8>
   176c4:	ldr	r2, [r4, #4]
   176c8:	cmp	r2, #0
   176cc:	movne	ip, #0
   176d0:	ldmne	r2, {r0, r1}
   176d4:	streq	r2, [r9, r7, lsl #3]
   176d8:	stmne	r4, {r0, r1}
   176dc:	strne	ip, [r2]
   176e0:	ldrne	r1, [r6, #36]	; 0x24
   176e4:	strne	r1, [r2, #4]
   176e8:	strne	r2, [r6, #36]	; 0x24
   176ec:	mov	r0, r3
   176f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   176f4:	ldr	r3, [r2]
   176f8:	cmp	r5, r3
   176fc:	beq	1773c <__assert_fail@plt+0x6948>
   17700:	mov	r1, r3
   17704:	mov	r0, r5
   17708:	ldr	r3, [r6, #28]
   1770c:	blx	r3
   17710:	cmp	r0, #0
   17714:	bne	17734 <__assert_fail@plt+0x6940>
   17718:	ldr	r4, [r4, #4]
   1771c:	ldr	r2, [r4, #4]
   17720:	cmp	r2, #0
   17724:	bne	176f4 <__assert_fail@plt+0x6900>
   17728:	mov	r3, #0
   1772c:	mov	r0, r3
   17730:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17734:	ldr	r2, [r4, #4]
   17738:	ldr	r3, [r2]
   1773c:	cmp	r8, #0
   17740:	beq	176ec <__assert_fail@plt+0x68f8>
   17744:	ldr	r0, [r2, #4]
   17748:	mov	r1, #0
   1774c:	str	r0, [r4, #4]
   17750:	str	r1, [r2]
   17754:	ldr	r1, [r6, #36]	; 0x24
   17758:	mov	r0, r3
   1775c:	str	r1, [r2, #4]
   17760:	str	r2, [r6, #36]	; 0x24
   17764:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17768:	bl	10db8 <abort@plt>
   1776c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17770:	ldr	r6, [r1]
   17774:	ldr	r3, [r1, #4]
   17778:	cmp	r6, r3
   1777c:	bcs	1784c <__assert_fail@plt+0x6a58>
   17780:	mov	r9, r2
   17784:	mov	r5, r0
   17788:	mov	r8, r1
   1778c:	add	r6, r6, #8
   17790:	mov	sl, #0
   17794:	ldr	fp, [r6, #-8]
   17798:	mov	r7, r6
   1779c:	cmp	fp, #0
   177a0:	beq	17840 <__assert_fail@plt+0x6a4c>
   177a4:	ldr	r4, [r6, #-4]
   177a8:	cmp	r4, #0
   177ac:	beq	17830 <__assert_fail@plt+0x6a3c>
   177b0:	ldr	r1, [r5, #8]
   177b4:	b	177d0 <__assert_fail@plt+0x69dc>
   177b8:	ldr	r3, [ip, #4]
   177bc:	cmp	r2, #0
   177c0:	str	r3, [r4, #4]
   177c4:	str	r4, [ip, #4]
   177c8:	beq	1782c <__assert_fail@plt+0x6a38>
   177cc:	mov	r4, r2
   177d0:	ldr	fp, [r4]
   177d4:	ldr	r3, [r5, #24]
   177d8:	mov	r0, fp
   177dc:	blx	r3
   177e0:	ldr	r1, [r5, #8]
   177e4:	cmp	r0, r1
   177e8:	bcs	178ec <__assert_fail@plt+0x6af8>
   177ec:	ldr	r3, [r5]
   177f0:	ldr	r2, [r4, #4]
   177f4:	add	ip, r3, r0, lsl #3
   177f8:	ldr	lr, [r3, r0, lsl #3]
   177fc:	cmp	lr, #0
   17800:	bne	177b8 <__assert_fail@plt+0x69c4>
   17804:	ldr	ip, [r5, #12]
   17808:	str	fp, [r3, r0, lsl #3]
   1780c:	add	r3, ip, #1
   17810:	str	r3, [r5, #12]
   17814:	str	lr, [r4]
   17818:	ldr	r3, [r5, #36]	; 0x24
   1781c:	cmp	r2, #0
   17820:	str	r3, [r4, #4]
   17824:	str	r4, [r5, #36]	; 0x24
   17828:	bne	177cc <__assert_fail@plt+0x69d8>
   1782c:	ldr	fp, [r6, #-8]
   17830:	cmp	r9, #0
   17834:	str	sl, [r6, #-4]
   17838:	beq	17854 <__assert_fail@plt+0x6a60>
   1783c:	ldr	r3, [r8, #4]
   17840:	cmp	r3, r7
   17844:	add	r6, r6, #8
   17848:	bhi	17794 <__assert_fail@plt+0x69a0>
   1784c:	mov	r0, #1
   17850:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17854:	ldr	r3, [r5, #24]
   17858:	ldr	r1, [r5, #8]
   1785c:	mov	r0, fp
   17860:	blx	r3
   17864:	ldr	r3, [r5, #8]
   17868:	cmp	r0, r3
   1786c:	bcs	178ec <__assert_fail@plt+0x6af8>
   17870:	ldr	r3, [r5]
   17874:	add	r4, r3, r0, lsl #3
   17878:	ldr	r2, [r3, r0, lsl #3]
   1787c:	cmp	r2, #0
   17880:	beq	178c0 <__assert_fail@plt+0x6acc>
   17884:	ldr	r0, [r5, #36]	; 0x24
   17888:	cmp	r0, #0
   1788c:	beq	178d4 <__assert_fail@plt+0x6ae0>
   17890:	ldr	r3, [r0, #4]
   17894:	str	r3, [r5, #36]	; 0x24
   17898:	ldr	r3, [r4, #4]
   1789c:	str	fp, [r0]
   178a0:	str	r3, [r0, #4]
   178a4:	str	r0, [r4, #4]
   178a8:	ldr	r2, [r8, #12]
   178ac:	str	sl, [r6, #-8]
   178b0:	sub	r2, r2, #1
   178b4:	ldr	r3, [r8, #4]
   178b8:	str	r2, [r8, #12]
   178bc:	b	17840 <__assert_fail@plt+0x6a4c>
   178c0:	ldr	r2, [r5, #12]
   178c4:	str	fp, [r3, r0, lsl #3]
   178c8:	add	r3, r2, #1
   178cc:	str	r3, [r5, #12]
   178d0:	b	178a8 <__assert_fail@plt+0x6ab4>
   178d4:	mov	r0, #8
   178d8:	bl	1910c <__assert_fail@plt+0x8318>
   178dc:	cmp	r0, #0
   178e0:	bne	17898 <__assert_fail@plt+0x6aa4>
   178e4:	mov	r0, r9
   178e8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178ec:	bl	10db8 <abort@plt>
   178f0:	ldr	r0, [r0, #8]
   178f4:	bx	lr
   178f8:	ldr	r0, [r0, #12]
   178fc:	bx	lr
   17900:	ldr	r0, [r0, #16]
   17904:	bx	lr
   17908:	ldm	r0, {r1, ip}
   1790c:	mov	r0, #0
   17910:	cmp	r1, ip
   17914:	bcs	1795c <__assert_fail@plt+0x6b68>
   17918:	ldr	r3, [r1]
   1791c:	cmp	r3, #0
   17920:	beq	1794c <__assert_fail@plt+0x6b58>
   17924:	ldr	r3, [r1, #4]
   17928:	mov	r2, #1
   1792c:	cmp	r3, #0
   17930:	beq	17944 <__assert_fail@plt+0x6b50>
   17934:	ldr	r3, [r3, #4]
   17938:	add	r2, r2, #1
   1793c:	cmp	r3, #0
   17940:	bne	17934 <__assert_fail@plt+0x6b40>
   17944:	cmp	r0, r2
   17948:	movcc	r0, r2
   1794c:	add	r1, r1, #8
   17950:	cmp	r1, ip
   17954:	bcc	17918 <__assert_fail@plt+0x6b24>
   17958:	bx	lr
   1795c:	bx	lr
   17960:	push	{lr}		; (str lr, [sp, #-4]!)
   17964:	mov	r2, #0
   17968:	ldm	r0, {r1, lr}
   1796c:	mov	ip, r2
   17970:	cmp	r1, lr
   17974:	bcs	179b4 <__assert_fail@plt+0x6bc0>
   17978:	ldr	r3, [r1]
   1797c:	cmp	r3, #0
   17980:	beq	179a8 <__assert_fail@plt+0x6bb4>
   17984:	ldr	r3, [r1, #4]
   17988:	add	ip, ip, #1
   1798c:	cmp	r3, #0
   17990:	add	r2, r2, #1
   17994:	beq	179a8 <__assert_fail@plt+0x6bb4>
   17998:	ldr	r3, [r3, #4]
   1799c:	add	r2, r2, #1
   179a0:	cmp	r3, #0
   179a4:	bne	17998 <__assert_fail@plt+0x6ba4>
   179a8:	add	r1, r1, #8
   179ac:	cmp	r1, lr
   179b0:	bcc	17978 <__assert_fail@plt+0x6b84>
   179b4:	ldr	r3, [r0, #12]
   179b8:	cmp	r3, ip
   179bc:	ldreq	r0, [r0, #16]
   179c0:	subeq	r0, r0, r2
   179c4:	clzeq	r0, r0
   179c8:	lsreq	r0, r0, #5
   179cc:	movne	r0, #0
   179d0:	pop	{pc}		; (ldr pc, [sp], #4)
   179d4:	push	{r4, r5, r6, r7, lr}
   179d8:	mov	r5, r1
   179dc:	ldm	r0, {ip, lr}
   179e0:	sub	sp, sp, #12
   179e4:	ldr	r2, [r0, #16]
   179e8:	cmp	ip, lr
   179ec:	mov	r4, #0
   179f0:	ldr	r6, [r0, #8]
   179f4:	ldr	r7, [r0, #12]
   179f8:	bcs	17a3c <__assert_fail@plt+0x6c48>
   179fc:	ldr	r3, [ip]
   17a00:	cmp	r3, #0
   17a04:	beq	17a30 <__assert_fail@plt+0x6c3c>
   17a08:	ldr	r3, [ip, #4]
   17a0c:	mov	r1, #1
   17a10:	cmp	r3, #0
   17a14:	beq	17a28 <__assert_fail@plt+0x6c34>
   17a18:	ldr	r3, [r3, #4]
   17a1c:	add	r1, r1, #1
   17a20:	cmp	r3, #0
   17a24:	bne	17a18 <__assert_fail@plt+0x6c24>
   17a28:	cmp	r4, r1
   17a2c:	movcc	r4, r1
   17a30:	add	ip, ip, #8
   17a34:	cmp	ip, lr
   17a38:	bcc	179fc <__assert_fail@plt+0x6c08>
   17a3c:	ldr	r1, [pc, #100]	; 17aa8 <__assert_fail@plt+0x6cb4>
   17a40:	mov	r0, r5
   17a44:	bl	10cec <fprintf@plt>
   17a48:	mov	r2, r6
   17a4c:	ldr	r1, [pc, #88]	; 17aac <__assert_fail@plt+0x6cb8>
   17a50:	mov	r0, r5
   17a54:	bl	10cec <fprintf@plt>
   17a58:	vmov	s15, r7
   17a5c:	vldr	d5, [pc, #60]	; 17aa0 <__assert_fail@plt+0x6cac>
   17a60:	mov	r2, r7
   17a64:	ldr	r1, [pc, #68]	; 17ab0 <__assert_fail@plt+0x6cbc>
   17a68:	vcvt.f64.u32	d6, s15
   17a6c:	vmov	s15, r6
   17a70:	mov	r0, r5
   17a74:	vcvt.f64.u32	d7, s15
   17a78:	vmul.f64	d6, d6, d5
   17a7c:	vdiv.f64	d5, d6, d7
   17a80:	vstr	d5, [sp]
   17a84:	bl	10cec <fprintf@plt>
   17a88:	mov	r2, r4
   17a8c:	mov	r0, r5
   17a90:	ldr	r1, [pc, #28]	; 17ab4 <__assert_fail@plt+0x6cc0>
   17a94:	add	sp, sp, #12
   17a98:	pop	{r4, r5, r6, r7, lr}
   17a9c:	b	10cec <fprintf@plt>
   17aa0:	andeq	r0, r0, r0
   17aa4:	subsmi	r0, r9, r0
   17aa8:	andeq	r9, r1, ip, ror #28
   17aac:	andeq	r9, r1, r4, lsl #29
   17ab0:	muleq	r1, ip, lr
   17ab4:	andeq	r9, r1, r0, asr #29
   17ab8:	push	{r4, r5, r6, lr}
   17abc:	mov	r5, r1
   17ac0:	ldr	r3, [r0, #24]
   17ac4:	mov	r6, r0
   17ac8:	ldr	r1, [r0, #8]
   17acc:	mov	r0, r5
   17ad0:	blx	r3
   17ad4:	ldr	r3, [r6, #8]
   17ad8:	cmp	r0, r3
   17adc:	bcs	17b3c <__assert_fail@plt+0x6d48>
   17ae0:	ldr	r3, [r6]
   17ae4:	add	r4, r3, r0, lsl #3
   17ae8:	ldr	r1, [r3, r0, lsl #3]
   17aec:	cmp	r1, #0
   17af0:	bne	17afc <__assert_fail@plt+0x6d08>
   17af4:	b	17b24 <__assert_fail@plt+0x6d30>
   17af8:	ldr	r1, [r4]
   17afc:	cmp	r5, r1
   17b00:	beq	17b2c <__assert_fail@plt+0x6d38>
   17b04:	ldr	r3, [r6, #28]
   17b08:	mov	r0, r5
   17b0c:	blx	r3
   17b10:	cmp	r0, #0
   17b14:	bne	17b34 <__assert_fail@plt+0x6d40>
   17b18:	ldr	r4, [r4, #4]
   17b1c:	cmp	r4, #0
   17b20:	bne	17af8 <__assert_fail@plt+0x6d04>
   17b24:	mov	r0, #0
   17b28:	pop	{r4, r5, r6, pc}
   17b2c:	mov	r0, r5
   17b30:	pop	{r4, r5, r6, pc}
   17b34:	ldr	r0, [r4]
   17b38:	pop	{r4, r5, r6, pc}
   17b3c:	bl	10db8 <abort@plt>
   17b40:	ldr	r3, [r0, #16]
   17b44:	cmp	r3, #0
   17b48:	beq	17b7c <__assert_fail@plt+0x6d88>
   17b4c:	ldr	r3, [r0]
   17b50:	ldr	r2, [r0, #4]
   17b54:	cmp	r3, r2
   17b58:	bcc	17b6c <__assert_fail@plt+0x6d78>
   17b5c:	b	17b84 <__assert_fail@plt+0x6d90>
   17b60:	add	r3, r3, #8
   17b64:	cmp	r3, r2
   17b68:	bcs	17b84 <__assert_fail@plt+0x6d90>
   17b6c:	ldr	r0, [r3]
   17b70:	cmp	r0, #0
   17b74:	beq	17b60 <__assert_fail@plt+0x6d6c>
   17b78:	bx	lr
   17b7c:	mov	r0, r3
   17b80:	bx	lr
   17b84:	push	{r4, lr}
   17b88:	bl	10db8 <abort@plt>
   17b8c:	push	{r4, r5, r6, lr}
   17b90:	mov	r4, r1
   17b94:	ldr	r3, [r0, #24]
   17b98:	mov	r5, r0
   17b9c:	ldr	r1, [r0, #8]
   17ba0:	mov	r0, r4
   17ba4:	blx	r3
   17ba8:	ldr	r3, [r5, #8]
   17bac:	cmp	r0, r3
   17bb0:	bcs	17c14 <__assert_fail@plt+0x6e20>
   17bb4:	ldr	r3, [r5]
   17bb8:	add	r0, r3, r0, lsl #3
   17bbc:	mov	r3, r0
   17bc0:	b	17bcc <__assert_fail@plt+0x6dd8>
   17bc4:	cmp	r3, #0
   17bc8:	beq	17be0 <__assert_fail@plt+0x6dec>
   17bcc:	ldm	r3, {r2, r3}
   17bd0:	cmp	r4, r2
   17bd4:	bne	17bc4 <__assert_fail@plt+0x6dd0>
   17bd8:	cmp	r3, #0
   17bdc:	bne	17c0c <__assert_fail@plt+0x6e18>
   17be0:	ldr	r2, [r5, #4]
   17be4:	mov	r3, r0
   17be8:	b	17bf8 <__assert_fail@plt+0x6e04>
   17bec:	ldr	r0, [r3]
   17bf0:	cmp	r0, #0
   17bf4:	popne	{r4, r5, r6, pc}
   17bf8:	add	r3, r3, #8
   17bfc:	cmp	r3, r2
   17c00:	bcc	17bec <__assert_fail@plt+0x6df8>
   17c04:	mov	r0, #0
   17c08:	pop	{r4, r5, r6, pc}
   17c0c:	ldr	r0, [r3]
   17c10:	pop	{r4, r5, r6, pc}
   17c14:	bl	10db8 <abort@plt>
   17c18:	push	{r4, r5, r6, lr}
   17c1c:	mov	r5, r0
   17c20:	ldr	r4, [r0]
   17c24:	ldr	r0, [r0, #4]
   17c28:	cmp	r4, r0
   17c2c:	bcs	17ca8 <__assert_fail@plt+0x6eb4>
   17c30:	add	r4, r4, #8
   17c34:	mov	ip, #0
   17c38:	ldr	r3, [r4, #-8]
   17c3c:	mov	r6, r4
   17c40:	cmp	r3, #0
   17c44:	beq	17c90 <__assert_fail@plt+0x6e9c>
   17c48:	cmp	r2, ip
   17c4c:	bls	17c9c <__assert_fail@plt+0x6ea8>
   17c50:	str	r3, [r1, ip, lsl #2]
   17c54:	ldr	r3, [r4, #-4]
   17c58:	add	r0, ip, #1
   17c5c:	cmp	r3, #0
   17c60:	add	ip, r1, ip, lsl #2
   17c64:	beq	17c88 <__assert_fail@plt+0x6e94>
   17c68:	cmp	r2, r0
   17c6c:	beq	17ca4 <__assert_fail@plt+0x6eb0>
   17c70:	ldr	lr, [r3]
   17c74:	add	r0, r0, #1
   17c78:	str	lr, [ip, #4]!
   17c7c:	ldr	r3, [r3, #4]
   17c80:	cmp	r3, #0
   17c84:	bne	17c68 <__assert_fail@plt+0x6e74>
   17c88:	mov	ip, r0
   17c8c:	ldr	r0, [r5, #4]
   17c90:	cmp	r0, r6
   17c94:	add	r4, r4, #8
   17c98:	bhi	17c38 <__assert_fail@plt+0x6e44>
   17c9c:	mov	r0, ip
   17ca0:	pop	{r4, r5, r6, pc}
   17ca4:	pop	{r4, r5, r6, pc}
   17ca8:	mov	r0, #0
   17cac:	pop	{r4, r5, r6, pc}
   17cb0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17cb4:	ldr	r3, [r0, #4]
   17cb8:	ldr	r8, [r0]
   17cbc:	cmp	r8, r3
   17cc0:	bcs	17d24 <__assert_fail@plt+0x6f30>
   17cc4:	mov	r7, r2
   17cc8:	mov	r6, r1
   17ccc:	mov	r9, r0
   17cd0:	mov	r5, #0
   17cd4:	ldr	r0, [r8]
   17cd8:	cmp	r0, #0
   17cdc:	beq	17d10 <__assert_fail@plt+0x6f1c>
   17ce0:	mov	r4, r8
   17ce4:	b	17cec <__assert_fail@plt+0x6ef8>
   17ce8:	ldr	r0, [r4]
   17cec:	mov	r1, r7
   17cf0:	blx	r6
   17cf4:	cmp	r0, #0
   17cf8:	beq	17d1c <__assert_fail@plt+0x6f28>
   17cfc:	ldr	r4, [r4, #4]
   17d00:	add	r5, r5, #1
   17d04:	cmp	r4, #0
   17d08:	bne	17ce8 <__assert_fail@plt+0x6ef4>
   17d0c:	ldr	r3, [r9, #4]
   17d10:	add	r8, r8, #8
   17d14:	cmp	r3, r8
   17d18:	bhi	17cd4 <__assert_fail@plt+0x6ee0>
   17d1c:	mov	r0, r5
   17d20:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17d24:	mov	r5, #0
   17d28:	b	17d1c <__assert_fail@plt+0x6f28>
   17d2c:	push	{r4, r5, r6, lr}
   17d30:	mov	r4, r0
   17d34:	ldrb	r0, [r0]
   17d38:	cmp	r0, #0
   17d3c:	beq	17d6c <__assert_fail@plt+0x6f78>
   17d40:	mov	r5, r1
   17d44:	mov	r1, #0
   17d48:	rsb	r1, r1, r1, lsl #5
   17d4c:	add	r0, r1, r0
   17d50:	mov	r1, r5
   17d54:	bl	19688 <__assert_fail@plt+0x8894>
   17d58:	ldrb	r0, [r4, #1]!
   17d5c:	cmp	r0, #0
   17d60:	bne	17d48 <__assert_fail@plt+0x6f54>
   17d64:	mov	r0, r1
   17d68:	pop	{r4, r5, r6, pc}
   17d6c:	mov	r1, r0
   17d70:	b	17d64 <__assert_fail@plt+0x6f70>
   17d74:	push	{lr}		; (str lr, [sp, #-4]!)
   17d78:	mov	ip, r0
   17d7c:	ldr	lr, [pc, #16]	; 17d94 <__assert_fail@plt+0x6fa0>
   17d80:	ldm	lr!, {r0, r1, r2, r3}
   17d84:	ldr	lr, [lr]
   17d88:	stmia	ip!, {r0, r1, r2, r3}
   17d8c:	str	lr, [ip]
   17d90:	pop	{pc}		; (ldr pc, [sp], #4)
   17d94:	andeq	r9, r1, r8, asr lr
   17d98:	cmp	r2, #0
   17d9c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17da0:	mov	r4, r0
   17da4:	ldr	sl, [pc, #548]	; 17fd0 <__assert_fail@plt+0x71dc>
   17da8:	mov	r0, #40	; 0x28
   17dac:	movne	sl, r2
   17db0:	cmp	r3, #0
   17db4:	ldr	fp, [pc, #536]	; 17fd4 <__assert_fail@plt+0x71e0>
   17db8:	mov	r5, r1
   17dbc:	movne	fp, r3
   17dc0:	bl	1910c <__assert_fail@plt+0x8318>
   17dc4:	subs	r8, r0, #0
   17dc8:	beq	17e60 <__assert_fail@plt+0x706c>
   17dcc:	cmp	r5, #0
   17dd0:	ldr	r3, [pc, #512]	; 17fd8 <__assert_fail@plt+0x71e4>
   17dd4:	beq	17e68 <__assert_fail@plt+0x7074>
   17dd8:	cmp	r5, r3
   17ddc:	str	r5, [r8, #20]
   17de0:	beq	17e6c <__assert_fail@plt+0x7078>
   17de4:	vldr	s15, [r5, #8]
   17de8:	vldr	s14, [pc, #456]	; 17fb8 <__assert_fail@plt+0x71c4>
   17dec:	vcmpe.f32	s15, s14
   17df0:	vmrs	APSR_nzcv, fpscr
   17df4:	ble	17e50 <__assert_fail@plt+0x705c>
   17df8:	vldr	s13, [pc, #444]	; 17fbc <__assert_fail@plt+0x71c8>
   17dfc:	vcmpe.f32	s15, s13
   17e00:	vmrs	APSR_nzcv, fpscr
   17e04:	bpl	17e50 <__assert_fail@plt+0x705c>
   17e08:	vldr	s13, [pc, #432]	; 17fc0 <__assert_fail@plt+0x71cc>
   17e0c:	vldr	s12, [r5, #12]
   17e10:	vcmpe.f32	s12, s13
   17e14:	vmrs	APSR_nzcv, fpscr
   17e18:	ble	17e50 <__assert_fail@plt+0x705c>
   17e1c:	vldr	s13, [r5]
   17e20:	vcmpe.f32	s13, #0.0
   17e24:	vmrs	APSR_nzcv, fpscr
   17e28:	blt	17e50 <__assert_fail@plt+0x705c>
   17e2c:	vadd.f32	s14, s13, s14
   17e30:	vldr	s13, [r5, #4]
   17e34:	vcmpe.f32	s14, s13
   17e38:	vmrs	APSR_nzcv, fpscr
   17e3c:	bpl	17e50 <__assert_fail@plt+0x705c>
   17e40:	vldr	s12, [pc, #380]	; 17fc4 <__assert_fail@plt+0x71d0>
   17e44:	vcmpe.f32	s13, s12
   17e48:	vmrs	APSR_nzcv, fpscr
   17e4c:	bls	17f9c <__assert_fail@plt+0x71a8>
   17e50:	str	r3, [r8, #20]
   17e54:	mov	r0, r8
   17e58:	bl	136fc <__assert_fail@plt+0x2908>
   17e5c:	mov	r8, #0
   17e60:	mov	r0, r8
   17e64:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e68:	str	r3, [r8, #20]
   17e6c:	vldr	s15, [pc, #340]	; 17fc8 <__assert_fail@plt+0x71d4>
   17e70:	vmov	s14, r4
   17e74:	vldr	s13, [pc, #336]	; 17fcc <__assert_fail@plt+0x71d8>
   17e78:	vcvt.f32.u32	s12, s14
   17e7c:	vdiv.f32	s14, s12, s15
   17e80:	vcmpe.f32	s14, s13
   17e84:	vmrs	APSR_nzcv, fpscr
   17e88:	bge	17f88 <__assert_fail@plt+0x7194>
   17e8c:	vcvt.u32.f32	s15, s14
   17e90:	vmov	r4, s15
   17e94:	cmp	r4, #10
   17e98:	movcc	r4, #10
   17e9c:	orr	r7, r4, #1
   17ea0:	cmn	r7, #1
   17ea4:	ldrne	r9, [pc, #304]	; 17fdc <__assert_fail@plt+0x71e8>
   17ea8:	beq	17f20 <__assert_fail@plt+0x712c>
   17eac:	cmp	r7, #9
   17eb0:	bls	17f94 <__assert_fail@plt+0x71a0>
   17eb4:	umull	r2, r3, r9, r7
   17eb8:	lsr	r3, r3, #1
   17ebc:	add	r3, r3, r3, lsl #1
   17ec0:	cmp	r7, r3
   17ec4:	beq	17f14 <__assert_fail@plt+0x7120>
   17ec8:	mov	r6, #16
   17ecc:	mov	r5, #9
   17ed0:	mov	r4, #3
   17ed4:	b	17ee8 <__assert_fail@plt+0x70f4>
   17ed8:	bl	19688 <__assert_fail@plt+0x8894>
   17edc:	add	r6, r6, #8
   17ee0:	cmp	r1, #0
   17ee4:	beq	17f14 <__assert_fail@plt+0x7120>
   17ee8:	add	r5, r5, r6
   17eec:	add	r4, r4, #2
   17ef0:	cmp	r5, r7
   17ef4:	mov	r0, r7
   17ef8:	mov	r1, r4
   17efc:	bcc	17ed8 <__assert_fail@plt+0x70e4>
   17f00:	mov	r1, r4
   17f04:	mov	r0, r7
   17f08:	bl	19688 <__assert_fail@plt+0x8894>
   17f0c:	cmp	r1, #0
   17f10:	bne	17f20 <__assert_fail@plt+0x712c>
   17f14:	add	r7, r7, #2
   17f18:	cmn	r7, #1
   17f1c:	bne	17eac <__assert_fail@plt+0x70b8>
   17f20:	lsrs	r3, r7, #30
   17f24:	movne	r4, #1
   17f28:	moveq	r4, #0
   17f2c:	tst	r7, #536870912	; 0x20000000
   17f30:	bne	17f88 <__assert_fail@plt+0x7194>
   17f34:	cmp	r4, #0
   17f38:	bne	17f88 <__assert_fail@plt+0x7194>
   17f3c:	str	r7, [r8, #8]
   17f40:	mov	r0, r7
   17f44:	mov	r1, #8
   17f48:	bl	190c4 <__assert_fail@plt+0x82d0>
   17f4c:	cmp	r0, #0
   17f50:	str	r0, [r8]
   17f54:	beq	17e54 <__assert_fail@plt+0x7060>
   17f58:	ldr	r3, [r8, #8]
   17f5c:	str	r4, [r8, #12]
   17f60:	str	r4, [r8, #16]
   17f64:	add	r0, r0, r3, lsl #3
   17f68:	ldr	r3, [sp, #40]	; 0x28
   17f6c:	str	r0, [r8, #4]
   17f70:	str	sl, [r8, #24]
   17f74:	str	fp, [r8, #28]
   17f78:	str	r3, [r8, #32]
   17f7c:	str	r4, [r8, #36]	; 0x24
   17f80:	mov	r0, r8
   17f84:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f88:	mov	r3, #0
   17f8c:	str	r3, [r8, #8]
   17f90:	b	17e54 <__assert_fail@plt+0x7060>
   17f94:	mov	r4, #3
   17f98:	b	17f00 <__assert_fail@plt+0x710c>
   17f9c:	vcmpe.f32	s15, s14
   17fa0:	vmrs	APSR_nzcv, fpscr
   17fa4:	ble	17e50 <__assert_fail@plt+0x705c>
   17fa8:	ldrb	r3, [r5, #16]
   17fac:	cmp	r3, #0
   17fb0:	bne	17e94 <__assert_fail@plt+0x70a0>
   17fb4:	b	17e70 <__assert_fail@plt+0x707c>
   17fb8:	stclcc	12, cr12, [ip, #820]	; 0x334
   17fbc:	svccc	0x00666666
   17fc0:	svccc	0x008ccccd
   17fc4:	svccc	0x00800000
   17fc8:	svccc	0x004ccccd
   17fcc:	svcmi	0x00800000
   17fd0:	andeq	r7, r1, r8, lsr #12
   17fd4:	andeq	r7, r1, ip, lsr r6
   17fd8:	andeq	r9, r1, r8, asr lr
   17fdc:	bge	feac2a90 <stdout@@GLIBC_2.4+0xfea9797c>
   17fe0:	push	{r4, r5, r6, r7, r8, lr}
   17fe4:	mov	r5, r0
   17fe8:	ldr	r7, [r0]
   17fec:	ldr	r3, [r0, #4]
   17ff0:	cmp	r7, r3
   17ff4:	addcc	r7, r7, #8
   17ff8:	movcc	r6, #0
   17ffc:	bcs	18078 <__assert_fail@plt+0x7284>
   18000:	ldr	r2, [r7, #-8]
   18004:	mov	r8, r7
   18008:	cmp	r2, #0
   1800c:	beq	1806c <__assert_fail@plt+0x7278>
   18010:	ldr	r4, [r7, #-4]
   18014:	ldr	r2, [r5, #32]
   18018:	cmp	r4, #0
   1801c:	beq	18050 <__assert_fail@plt+0x725c>
   18020:	cmp	r2, #0
   18024:	beq	18034 <__assert_fail@plt+0x7240>
   18028:	ldr	r0, [r4]
   1802c:	blx	r2
   18030:	ldr	r2, [r5, #32]
   18034:	ldr	r3, [r4, #4]
   18038:	ldr	r1, [r5, #36]	; 0x24
   1803c:	str	r6, [r4]
   18040:	str	r1, [r4, #4]
   18044:	str	r4, [r5, #36]	; 0x24
   18048:	subs	r4, r3, #0
   1804c:	bne	18020 <__assert_fail@plt+0x722c>
   18050:	cmp	r2, #0
   18054:	beq	18060 <__assert_fail@plt+0x726c>
   18058:	ldr	r0, [r7, #-8]
   1805c:	blx	r2
   18060:	str	r6, [r7, #-8]
   18064:	str	r6, [r7, #-4]
   18068:	ldr	r3, [r5, #4]
   1806c:	cmp	r3, r8
   18070:	add	r7, r7, #8
   18074:	bhi	18000 <__assert_fail@plt+0x720c>
   18078:	mov	r3, #0
   1807c:	str	r3, [r5, #12]
   18080:	str	r3, [r5, #16]
   18084:	pop	{r4, r5, r6, r7, r8, pc}
   18088:	ldr	r3, [r0, #32]
   1808c:	push	{r4, r5, r6, lr}
   18090:	cmp	r3, #0
   18094:	mov	r5, r0
   18098:	beq	180f8 <__assert_fail@plt+0x7304>
   1809c:	ldr	r3, [r0, #16]
   180a0:	cmp	r3, #0
   180a4:	beq	180f8 <__assert_fail@plt+0x7304>
   180a8:	ldr	r6, [r0]
   180ac:	ldr	r3, [r0, #4]
   180b0:	cmp	r6, r3
   180b4:	bcs	18134 <__assert_fail@plt+0x7340>
   180b8:	ldr	r0, [r6]
   180bc:	cmp	r0, #0
   180c0:	beq	180e8 <__assert_fail@plt+0x72f4>
   180c4:	mov	r4, r6
   180c8:	b	180d0 <__assert_fail@plt+0x72dc>
   180cc:	ldr	r0, [r4]
   180d0:	ldr	r3, [r5, #32]
   180d4:	blx	r3
   180d8:	ldr	r4, [r4, #4]
   180dc:	cmp	r4, #0
   180e0:	bne	180cc <__assert_fail@plt+0x72d8>
   180e4:	ldr	r3, [r5, #4]
   180e8:	add	r6, r6, #8
   180ec:	cmp	r3, r6
   180f0:	bhi	180b8 <__assert_fail@plt+0x72c4>
   180f4:	b	180fc <__assert_fail@plt+0x7308>
   180f8:	ldr	r3, [r5, #4]
   180fc:	ldr	r6, [r5]
   18100:	cmp	r6, r3
   18104:	bcs	18134 <__assert_fail@plt+0x7340>
   18108:	ldr	r0, [r6, #4]
   1810c:	cmp	r0, #0
   18110:	beq	18128 <__assert_fail@plt+0x7334>
   18114:	ldr	r4, [r0, #4]
   18118:	bl	136fc <__assert_fail@plt+0x2908>
   1811c:	subs	r0, r4, #0
   18120:	bne	18114 <__assert_fail@plt+0x7320>
   18124:	ldr	r3, [r5, #4]
   18128:	add	r6, r6, #8
   1812c:	cmp	r3, r6
   18130:	bhi	18108 <__assert_fail@plt+0x7314>
   18134:	ldr	r0, [r5, #36]	; 0x24
   18138:	cmp	r0, #0
   1813c:	beq	18150 <__assert_fail@plt+0x735c>
   18140:	ldr	r4, [r0, #4]
   18144:	bl	136fc <__assert_fail@plt+0x2908>
   18148:	subs	r0, r4, #0
   1814c:	bne	18140 <__assert_fail@plt+0x734c>
   18150:	ldr	r0, [r5]
   18154:	bl	136fc <__assert_fail@plt+0x2908>
   18158:	mov	r0, r5
   1815c:	pop	{r4, r5, r6, lr}
   18160:	b	136fc <__assert_fail@plt+0x2908>
   18164:	ldr	r3, [r0, #20]
   18168:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1816c:	mov	r8, r0
   18170:	ldrb	r2, [r3, #16]
   18174:	sub	sp, sp, #40	; 0x28
   18178:	cmp	r2, #0
   1817c:	bne	181a8 <__assert_fail@plt+0x73b4>
   18180:	vmov	s15, r1
   18184:	vldr	s13, [r3, #8]
   18188:	vldr	s14, [pc, #648]	; 18418 <__assert_fail@plt+0x7624>
   1818c:	vcvt.f32.u32	s12, s15
   18190:	vdiv.f32	s15, s12, s13
   18194:	vcmpe.f32	s15, s14
   18198:	vmrs	APSR_nzcv, fpscr
   1819c:	bge	183d0 <__assert_fail@plt+0x75dc>
   181a0:	vcvt.u32.f32	s15, s15
   181a4:	vmov	r1, s15
   181a8:	cmp	r1, #10
   181ac:	movcc	r1, #10
   181b0:	orr	r7, r1, #1
   181b4:	cmn	r7, #1
   181b8:	ldrne	r9, [pc, #604]	; 1841c <__assert_fail@plt+0x7628>
   181bc:	beq	18234 <__assert_fail@plt+0x7440>
   181c0:	cmp	r7, #9
   181c4:	bls	183e0 <__assert_fail@plt+0x75ec>
   181c8:	umull	r2, r3, r9, r7
   181cc:	lsr	r3, r3, #1
   181d0:	add	r3, r3, r3, lsl #1
   181d4:	cmp	r7, r3
   181d8:	beq	18228 <__assert_fail@plt+0x7434>
   181dc:	mov	r6, #16
   181e0:	mov	r5, #9
   181e4:	mov	r4, #3
   181e8:	b	18204 <__assert_fail@plt+0x7410>
   181ec:	mov	r1, r4
   181f0:	mov	r0, r7
   181f4:	bl	19688 <__assert_fail@plt+0x8894>
   181f8:	add	r6, r6, #8
   181fc:	cmp	r1, #0
   18200:	beq	18228 <__assert_fail@plt+0x7434>
   18204:	add	r5, r5, r6
   18208:	cmp	r5, r7
   1820c:	add	r4, r4, #2
   18210:	bcc	181ec <__assert_fail@plt+0x73f8>
   18214:	mov	r1, r4
   18218:	mov	r0, r7
   1821c:	bl	19688 <__assert_fail@plt+0x8894>
   18220:	cmp	r1, #0
   18224:	bne	18234 <__assert_fail@plt+0x7440>
   18228:	add	r7, r7, #2
   1822c:	cmn	r7, #1
   18230:	bne	181c0 <__assert_fail@plt+0x73cc>
   18234:	lsrs	r3, r7, #30
   18238:	movne	r4, #1
   1823c:	moveq	r4, #0
   18240:	tst	r7, #536870912	; 0x20000000
   18244:	bne	183d0 <__assert_fail@plt+0x75dc>
   18248:	cmp	r4, #0
   1824c:	bne	183d0 <__assert_fail@plt+0x75dc>
   18250:	ldr	r3, [r8, #8]
   18254:	cmp	r3, r7
   18258:	beq	183c0 <__assert_fail@plt+0x75cc>
   1825c:	mov	r1, #8
   18260:	mov	r0, r7
   18264:	bl	190c4 <__assert_fail@plt+0x82d0>
   18268:	cmp	r0, #0
   1826c:	str	r0, [sp]
   18270:	beq	183d0 <__assert_fail@plt+0x75dc>
   18274:	ldr	r1, [r8, #24]
   18278:	ldr	r5, [r8, #20]
   1827c:	ldr	lr, [r8, #28]
   18280:	ldr	ip, [r8, #32]
   18284:	add	r0, r0, r7, lsl #3
   18288:	ldr	r3, [r8, #36]	; 0x24
   1828c:	str	r0, [sp, #4]
   18290:	str	r1, [sp, #24]
   18294:	mov	r2, r4
   18298:	mov	r0, sp
   1829c:	mov	r1, r8
   182a0:	str	r7, [sp, #8]
   182a4:	str	r4, [sp, #12]
   182a8:	str	r4, [sp, #16]
   182ac:	str	r5, [sp, #20]
   182b0:	str	lr, [sp, #28]
   182b4:	str	ip, [sp, #32]
   182b8:	str	r3, [sp, #36]	; 0x24
   182bc:	bl	1776c <__assert_fail@plt+0x6978>
   182c0:	subs	r9, r0, #0
   182c4:	bne	183e8 <__assert_fail@plt+0x75f4>
   182c8:	ldr	r5, [sp]
   182cc:	ldr	r2, [sp, #4]
   182d0:	ldr	r3, [sp, #36]	; 0x24
   182d4:	cmp	r5, r2
   182d8:	str	r3, [r8, #36]	; 0x24
   182dc:	addcc	r5, r5, #8
   182e0:	movcc	r7, r9
   182e4:	bcs	18394 <__assert_fail@plt+0x75a0>
   182e8:	ldr	r3, [r5, #-8]
   182ec:	mov	r6, r5
   182f0:	cmp	r3, #0
   182f4:	beq	18388 <__assert_fail@plt+0x7594>
   182f8:	ldr	r4, [r5, #-4]
   182fc:	cmp	r4, #0
   18300:	beq	18384 <__assert_fail@plt+0x7590>
   18304:	ldr	r1, [r8, #8]
   18308:	b	18324 <__assert_fail@plt+0x7530>
   1830c:	ldr	r3, [ip, #4]
   18310:	cmp	r2, #0
   18314:	str	r3, [r4, #4]
   18318:	str	r4, [ip, #4]
   1831c:	beq	18380 <__assert_fail@plt+0x758c>
   18320:	mov	r4, r2
   18324:	ldr	sl, [r4]
   18328:	ldr	r3, [r8, #24]
   1832c:	mov	r0, sl
   18330:	blx	r3
   18334:	ldr	r1, [r8, #8]
   18338:	cmp	r0, r1
   1833c:	bcs	18414 <__assert_fail@plt+0x7620>
   18340:	ldr	r3, [r8]
   18344:	ldr	r2, [r4, #4]
   18348:	add	ip, r3, r0, lsl #3
   1834c:	ldr	lr, [r3, r0, lsl #3]
   18350:	cmp	lr, #0
   18354:	bne	1830c <__assert_fail@plt+0x7518>
   18358:	ldr	ip, [r8, #12]
   1835c:	str	sl, [r3, r0, lsl #3]
   18360:	add	r3, ip, #1
   18364:	str	r3, [r8, #12]
   18368:	str	lr, [r4]
   1836c:	ldr	r3, [r8, #36]	; 0x24
   18370:	cmp	r2, #0
   18374:	str	r3, [r4, #4]
   18378:	str	r4, [r8, #36]	; 0x24
   1837c:	bne	18320 <__assert_fail@plt+0x752c>
   18380:	ldr	r2, [sp, #4]
   18384:	str	r7, [r5, #-4]
   18388:	cmp	r6, r2
   1838c:	add	r5, r5, #8
   18390:	bcc	182e8 <__assert_fail@plt+0x74f4>
   18394:	mov	r1, sp
   18398:	mov	r0, r8
   1839c:	mov	r2, #0
   183a0:	bl	1776c <__assert_fail@plt+0x6978>
   183a4:	cmp	r0, #0
   183a8:	beq	18414 <__assert_fail@plt+0x7620>
   183ac:	ldr	r0, [sp]
   183b0:	bl	136fc <__assert_fail@plt+0x2908>
   183b4:	mov	r0, r9
   183b8:	add	sp, sp, #40	; 0x28
   183bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   183c0:	mov	r9, #1
   183c4:	mov	r0, r9
   183c8:	add	sp, sp, #40	; 0x28
   183cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   183d0:	mov	r9, #0
   183d4:	mov	r0, r9
   183d8:	add	sp, sp, #40	; 0x28
   183dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   183e0:	mov	r4, #3
   183e4:	b	18214 <__assert_fail@plt+0x7420>
   183e8:	ldr	r0, [r8]
   183ec:	bl	136fc <__assert_fail@plt+0x2908>
   183f0:	ldmib	sp, {r0, r1, r2}
   183f4:	ldr	ip, [sp]
   183f8:	ldr	r3, [sp, #36]	; 0x24
   183fc:	stmib	r8, {r0, r1, r2}
   18400:	mov	r0, r9
   18404:	str	ip, [r8]
   18408:	str	r3, [r8, #36]	; 0x24
   1840c:	add	sp, sp, #40	; 0x28
   18410:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18414:	bl	10db8 <abort@plt>
   18418:	svcmi	0x00800000
   1841c:	bge	feac2ed0 <stdout@@GLIBC_2.4+0xfea97dbc>
   18420:	push	{r4, r5, r6, r7, r8, r9, lr}
   18424:	subs	r5, r1, #0
   18428:	sub	sp, sp, #12
   1842c:	beq	18648 <__assert_fail@plt+0x7854>
   18430:	ldr	r3, [r0, #24]
   18434:	mov	r6, r0
   18438:	ldr	r1, [r0, #8]
   1843c:	mov	r0, r5
   18440:	mov	r7, r2
   18444:	blx	r3
   18448:	ldr	r3, [r6, #8]
   1844c:	cmp	r0, r3
   18450:	mov	r8, r0
   18454:	bcs	18648 <__assert_fail@plt+0x7854>
   18458:	ldr	r9, [r6]
   1845c:	add	r4, r9, r0, lsl #3
   18460:	ldr	r1, [r9, r0, lsl #3]
   18464:	str	r4, [sp, #4]
   18468:	cmp	r1, #0
   1846c:	beq	1864c <__assert_fail@plt+0x7858>
   18470:	cmp	r5, r1
   18474:	beq	184cc <__assert_fail@plt+0x76d8>
   18478:	ldr	r3, [r6, #28]
   1847c:	mov	r0, r5
   18480:	blx	r3
   18484:	cmp	r0, #0
   18488:	bne	184e0 <__assert_fail@plt+0x76ec>
   1848c:	ldr	r3, [r4, #4]
   18490:	cmp	r3, #0
   18494:	bne	184c0 <__assert_fail@plt+0x76cc>
   18498:	b	184ec <__assert_fail@plt+0x76f8>
   1849c:	ldr	r3, [r6, #28]
   184a0:	mov	r0, r5
   184a4:	blx	r3
   184a8:	cmp	r0, #0
   184ac:	bne	18560 <__assert_fail@plt+0x776c>
   184b0:	ldr	r4, [r4, #4]
   184b4:	ldr	r3, [r4, #4]
   184b8:	cmp	r3, #0
   184bc:	beq	184ec <__assert_fail@plt+0x76f8>
   184c0:	ldr	r1, [r3]
   184c4:	cmp	r5, r1
   184c8:	bne	1849c <__assert_fail@plt+0x76a8>
   184cc:	mov	r0, #0
   184d0:	cmp	r7, #0
   184d4:	strne	r1, [r7]
   184d8:	add	sp, sp, #12
   184dc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   184e0:	ldr	r1, [r9, r8, lsl #3]
   184e4:	cmp	r1, #0
   184e8:	bne	184cc <__assert_fail@plt+0x76d8>
   184ec:	vldr	s15, [r6, #8]
   184f0:	ldr	r3, [r6, #20]
   184f4:	vldr	s14, [r6, #12]
   184f8:	vcvt.f32.u32	s15, s15
   184fc:	vldr	s13, [r3, #8]
   18500:	vcvt.f32.u32	s14, s14
   18504:	vmul.f32	s12, s13, s15
   18508:	vcmpe.f32	s14, s12
   1850c:	vmrs	APSR_nzcv, fpscr
   18510:	bgt	1856c <__assert_fail@plt+0x7778>
   18514:	ldr	r4, [sp, #4]
   18518:	ldr	r3, [r4]
   1851c:	cmp	r3, #0
   18520:	beq	186b0 <__assert_fail@plt+0x78bc>
   18524:	ldr	r3, [r6, #36]	; 0x24
   18528:	cmp	r3, #0
   1852c:	beq	18698 <__assert_fail@plt+0x78a4>
   18530:	ldr	r2, [r3, #4]
   18534:	str	r2, [r6, #36]	; 0x24
   18538:	ldr	r2, [r6, #16]
   1853c:	ldr	r1, [r4, #4]
   18540:	add	r2, r2, #1
   18544:	str	r5, [r3]
   18548:	str	r1, [r3, #4]
   1854c:	mov	r0, #1
   18550:	str	r3, [r4, #4]
   18554:	str	r2, [r6, #16]
   18558:	add	sp, sp, #12
   1855c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18560:	ldr	r3, [r4, #4]
   18564:	ldr	r1, [r3]
   18568:	b	184e4 <__assert_fail@plt+0x76f0>
   1856c:	ldr	r2, [pc, #392]	; 186fc <__assert_fail@plt+0x7908>
   18570:	cmp	r3, r2
   18574:	beq	185f8 <__assert_fail@plt+0x7804>
   18578:	vldr	s12, [pc, #352]	; 186e0 <__assert_fail@plt+0x78ec>
   1857c:	vcmpe.f32	s13, s12
   18580:	vmrs	APSR_nzcv, fpscr
   18584:	ble	185e0 <__assert_fail@plt+0x77ec>
   18588:	vldr	s11, [pc, #340]	; 186e4 <__assert_fail@plt+0x78f0>
   1858c:	vcmpe.f32	s13, s11
   18590:	vmrs	APSR_nzcv, fpscr
   18594:	bpl	185e0 <__assert_fail@plt+0x77ec>
   18598:	vldr	s11, [r3, #12]
   1859c:	vldr	s10, [pc, #324]	; 186e8 <__assert_fail@plt+0x78f4>
   185a0:	vcmpe.f32	s11, s10
   185a4:	vmrs	APSR_nzcv, fpscr
   185a8:	ble	185e0 <__assert_fail@plt+0x77ec>
   185ac:	vldr	s10, [r3]
   185b0:	vcmpe.f32	s10, #0.0
   185b4:	vmrs	APSR_nzcv, fpscr
   185b8:	blt	185e0 <__assert_fail@plt+0x77ec>
   185bc:	vadd.f32	s12, s10, s12
   185c0:	vldr	s10, [r3, #4]
   185c4:	vcmpe.f32	s12, s10
   185c8:	vmrs	APSR_nzcv, fpscr
   185cc:	bpl	185e0 <__assert_fail@plt+0x77ec>
   185d0:	vldr	s9, [pc, #276]	; 186ec <__assert_fail@plt+0x78f8>
   185d4:	vcmpe.f32	s10, s9
   185d8:	vmrs	APSR_nzcv, fpscr
   185dc:	bls	186c0 <__assert_fail@plt+0x78cc>
   185e0:	vldr	s13, [pc, #264]	; 186f0 <__assert_fail@plt+0x78fc>
   185e4:	str	r2, [r6, #20]
   185e8:	vmul.f32	s12, s15, s13
   185ec:	vcmpe.f32	s12, s14
   185f0:	vmrs	APSR_nzcv, fpscr
   185f4:	bpl	18514 <__assert_fail@plt+0x7720>
   185f8:	vldr	s11, [pc, #244]	; 186f4 <__assert_fail@plt+0x7900>
   185fc:	vmul.f32	s15, s15, s11
   18600:	vmul.f32	s15, s15, s13
   18604:	vldr	s14, [pc, #236]	; 186f8 <__assert_fail@plt+0x7904>
   18608:	vcmpe.f32	s15, s14
   1860c:	vmrs	APSR_nzcv, fpscr
   18610:	bge	186b8 <__assert_fail@plt+0x78c4>
   18614:	vcvt.u32.f32	s15, s15
   18618:	mov	r0, r6
   1861c:	vmov	r1, s15
   18620:	bl	18164 <__assert_fail@plt+0x7370>
   18624:	cmp	r0, #0
   18628:	beq	186b8 <__assert_fail@plt+0x78c4>
   1862c:	mov	r3, #0
   18630:	add	r2, sp, #4
   18634:	mov	r1, r5
   18638:	mov	r0, r6
   1863c:	bl	1764c <__assert_fail@plt+0x6858>
   18640:	cmp	r0, #0
   18644:	beq	18514 <__assert_fail@plt+0x7720>
   18648:	bl	10db8 <abort@plt>
   1864c:	vmov	s15, r3
   18650:	ldr	r2, [r6, #12]
   18654:	ldr	r3, [r6, #20]
   18658:	vcvt.f32.u32	s15, s15
   1865c:	vldr	s13, [r3, #8]
   18660:	vmov	s14, r2
   18664:	vcvt.f32.u32	s14, s14
   18668:	vmul.f32	s12, s13, s15
   1866c:	vcmpe.f32	s14, s12
   18670:	vmrs	APSR_nzcv, fpscr
   18674:	bgt	1856c <__assert_fail@plt+0x7778>
   18678:	ldr	r3, [r6, #16]
   1867c:	add	r2, r2, #1
   18680:	add	r3, r3, #1
   18684:	str	r5, [r4]
   18688:	mov	r0, #1
   1868c:	str	r2, [r6, #12]
   18690:	str	r3, [r6, #16]
   18694:	b	184d8 <__assert_fail@plt+0x76e4>
   18698:	mov	r0, #8
   1869c:	bl	1910c <__assert_fail@plt+0x8318>
   186a0:	subs	r3, r0, #0
   186a4:	beq	186b8 <__assert_fail@plt+0x78c4>
   186a8:	ldr	r4, [sp, #4]
   186ac:	b	18538 <__assert_fail@plt+0x7744>
   186b0:	ldr	r2, [r6, #12]
   186b4:	b	18678 <__assert_fail@plt+0x7884>
   186b8:	mvn	r0, #0
   186bc:	b	184d8 <__assert_fail@plt+0x76e4>
   186c0:	vcmpe.f32	s12, s13
   186c4:	vmrs	APSR_nzcv, fpscr
   186c8:	bpl	185e0 <__assert_fail@plt+0x77ec>
   186cc:	ldrb	r3, [r3, #16]
   186d0:	cmp	r3, #0
   186d4:	vmulne.f32	s15, s11, s15
   186d8:	bne	18604 <__assert_fail@plt+0x7810>
   186dc:	b	185fc <__assert_fail@plt+0x7808>
   186e0:	stclcc	12, cr12, [ip, #820]	; 0x334
   186e4:	svccc	0x00666666
   186e8:	svccc	0x008ccccd
   186ec:	svccc	0x00800000
   186f0:	svccc	0x004ccccd
   186f4:	svccc	0x00b4fdf4
   186f8:	svcmi	0x00800000
   186fc:	andeq	r9, r1, r8, asr lr
   18700:	push	{r4, r5, r6, r7, r8, lr}
   18704:	subs	r5, r1, #0
   18708:	sub	sp, sp, #8
   1870c:	beq	18910 <__assert_fail@plt+0x7b1c>
   18710:	ldr	r3, [r0, #24]
   18714:	mov	r6, r0
   18718:	ldr	r1, [r0, #8]
   1871c:	mov	r0, r5
   18720:	blx	r3
   18724:	ldr	r3, [r6, #8]
   18728:	cmp	r0, r3
   1872c:	mov	r7, r0
   18730:	bcs	18910 <__assert_fail@plt+0x7b1c>
   18734:	ldr	r8, [r6]
   18738:	add	r4, r8, r0, lsl #3
   1873c:	ldr	r1, [r8, r0, lsl #3]
   18740:	str	r4, [sp, #4]
   18744:	cmp	r1, #0
   18748:	beq	18914 <__assert_fail@plt+0x7b20>
   1874c:	cmp	r5, r1
   18750:	beq	18774 <__assert_fail@plt+0x7980>
   18754:	ldr	r3, [r6, #28]
   18758:	mov	r0, r5
   1875c:	blx	r3
   18760:	cmp	r0, #0
   18764:	beq	187a4 <__assert_fail@plt+0x79b0>
   18768:	ldr	r1, [r8, r7, lsl #3]
   1876c:	cmp	r1, #0
   18770:	beq	187b0 <__assert_fail@plt+0x79bc>
   18774:	mov	r0, r1
   18778:	add	sp, sp, #8
   1877c:	pop	{r4, r5, r6, r7, r8, pc}
   18780:	ldr	r1, [r3]
   18784:	cmp	r5, r1
   18788:	beq	18774 <__assert_fail@plt+0x7980>
   1878c:	ldr	r3, [r6, #28]
   18790:	mov	r0, r5
   18794:	blx	r3
   18798:	cmp	r0, #0
   1879c:	bne	18828 <__assert_fail@plt+0x7a34>
   187a0:	ldr	r4, [r4, #4]
   187a4:	ldr	r3, [r4, #4]
   187a8:	cmp	r3, #0
   187ac:	bne	18780 <__assert_fail@plt+0x798c>
   187b0:	vldr	s15, [r6, #8]
   187b4:	ldr	r3, [r6, #20]
   187b8:	vldr	s14, [r6, #12]
   187bc:	vcvt.f32.u32	s15, s15
   187c0:	vldr	s13, [r3, #8]
   187c4:	vcvt.f32.u32	s14, s14
   187c8:	vmul.f32	s12, s13, s15
   187cc:	vcmpe.f32	s14, s12
   187d0:	vmrs	APSR_nzcv, fpscr
   187d4:	bgt	18834 <__assert_fail@plt+0x7a40>
   187d8:	ldr	r4, [sp, #4]
   187dc:	ldr	r3, [r4]
   187e0:	cmp	r3, #0
   187e4:	beq	18974 <__assert_fail@plt+0x7b80>
   187e8:	ldr	r0, [r6, #36]	; 0x24
   187ec:	cmp	r0, #0
   187f0:	beq	1895c <__assert_fail@plt+0x7b68>
   187f4:	ldr	r3, [r0, #4]
   187f8:	str	r3, [r6, #36]	; 0x24
   187fc:	ldr	r3, [r6, #16]
   18800:	ldr	r2, [r4, #4]
   18804:	add	r3, r3, #1
   18808:	str	r5, [r0]
   1880c:	str	r2, [r0, #4]
   18810:	str	r0, [r4, #4]
   18814:	str	r3, [r6, #16]
   18818:	mov	r1, r5
   1881c:	mov	r0, r1
   18820:	add	sp, sp, #8
   18824:	pop	{r4, r5, r6, r7, r8, pc}
   18828:	ldr	r3, [r4, #4]
   1882c:	ldr	r1, [r3]
   18830:	b	1876c <__assert_fail@plt+0x7978>
   18834:	ldr	r2, [pc, #388]	; 189c0 <__assert_fail@plt+0x7bcc>
   18838:	cmp	r3, r2
   1883c:	beq	188c0 <__assert_fail@plt+0x7acc>
   18840:	vldr	s12, [pc, #348]	; 189a4 <__assert_fail@plt+0x7bb0>
   18844:	vcmpe.f32	s13, s12
   18848:	vmrs	APSR_nzcv, fpscr
   1884c:	ble	188a8 <__assert_fail@plt+0x7ab4>
   18850:	vldr	s11, [pc, #336]	; 189a8 <__assert_fail@plt+0x7bb4>
   18854:	vcmpe.f32	s13, s11
   18858:	vmrs	APSR_nzcv, fpscr
   1885c:	bpl	188a8 <__assert_fail@plt+0x7ab4>
   18860:	vldr	s11, [r3, #12]
   18864:	vldr	s10, [pc, #320]	; 189ac <__assert_fail@plt+0x7bb8>
   18868:	vcmpe.f32	s11, s10
   1886c:	vmrs	APSR_nzcv, fpscr
   18870:	ble	188a8 <__assert_fail@plt+0x7ab4>
   18874:	vldr	s10, [r3]
   18878:	vcmpe.f32	s10, #0.0
   1887c:	vmrs	APSR_nzcv, fpscr
   18880:	blt	188a8 <__assert_fail@plt+0x7ab4>
   18884:	vadd.f32	s12, s10, s12
   18888:	vldr	s10, [r3, #4]
   1888c:	vcmpe.f32	s12, s10
   18890:	vmrs	APSR_nzcv, fpscr
   18894:	bpl	188a8 <__assert_fail@plt+0x7ab4>
   18898:	vldr	s9, [pc, #272]	; 189b0 <__assert_fail@plt+0x7bbc>
   1889c:	vcmpe.f32	s10, s9
   188a0:	vmrs	APSR_nzcv, fpscr
   188a4:	bls	18984 <__assert_fail@plt+0x7b90>
   188a8:	vldr	s13, [pc, #260]	; 189b4 <__assert_fail@plt+0x7bc0>
   188ac:	str	r2, [r6, #20]
   188b0:	vmul.f32	s12, s15, s13
   188b4:	vcmpe.f32	s12, s14
   188b8:	vmrs	APSR_nzcv, fpscr
   188bc:	bpl	187d8 <__assert_fail@plt+0x79e4>
   188c0:	vldr	s11, [pc, #240]	; 189b8 <__assert_fail@plt+0x7bc4>
   188c4:	vmul.f32	s15, s15, s11
   188c8:	vmul.f32	s15, s15, s13
   188cc:	vldr	s14, [pc, #232]	; 189bc <__assert_fail@plt+0x7bc8>
   188d0:	vcmpe.f32	s15, s14
   188d4:	vmrs	APSR_nzcv, fpscr
   188d8:	bge	1897c <__assert_fail@plt+0x7b88>
   188dc:	vcvt.u32.f32	s15, s15
   188e0:	mov	r0, r6
   188e4:	vmov	r1, s15
   188e8:	bl	18164 <__assert_fail@plt+0x7370>
   188ec:	cmp	r0, #0
   188f0:	beq	1897c <__assert_fail@plt+0x7b88>
   188f4:	mov	r3, #0
   188f8:	add	r2, sp, #4
   188fc:	mov	r1, r5
   18900:	mov	r0, r6
   18904:	bl	1764c <__assert_fail@plt+0x6858>
   18908:	cmp	r0, #0
   1890c:	beq	187d8 <__assert_fail@plt+0x79e4>
   18910:	bl	10db8 <abort@plt>
   18914:	vmov	s15, r3
   18918:	ldr	r2, [r6, #12]
   1891c:	ldr	r3, [r6, #20]
   18920:	vcvt.f32.u32	s15, s15
   18924:	vldr	s13, [r3, #8]
   18928:	vmov	s14, r2
   1892c:	vcvt.f32.u32	s14, s14
   18930:	vmul.f32	s12, s15, s13
   18934:	vcmpe.f32	s12, s14
   18938:	vmrs	APSR_nzcv, fpscr
   1893c:	bmi	18834 <__assert_fail@plt+0x7a40>
   18940:	ldr	r3, [r6, #16]
   18944:	add	r2, r2, #1
   18948:	add	r3, r3, #1
   1894c:	str	r5, [r4]
   18950:	str	r2, [r6, #12]
   18954:	str	r3, [r6, #16]
   18958:	b	18818 <__assert_fail@plt+0x7a24>
   1895c:	mov	r0, #8
   18960:	bl	1910c <__assert_fail@plt+0x8318>
   18964:	cmp	r0, #0
   18968:	beq	1897c <__assert_fail@plt+0x7b88>
   1896c:	ldr	r4, [sp, #4]
   18970:	b	187fc <__assert_fail@plt+0x7a08>
   18974:	ldr	r2, [r6, #12]
   18978:	b	18940 <__assert_fail@plt+0x7b4c>
   1897c:	mov	r1, #0
   18980:	b	18774 <__assert_fail@plt+0x7980>
   18984:	vcmpe.f32	s12, s13
   18988:	vmrs	APSR_nzcv, fpscr
   1898c:	bpl	188a8 <__assert_fail@plt+0x7ab4>
   18990:	ldrb	r3, [r3, #16]
   18994:	cmp	r3, #0
   18998:	vmulne.f32	s15, s11, s15
   1899c:	bne	188cc <__assert_fail@plt+0x7ad8>
   189a0:	b	188c4 <__assert_fail@plt+0x7ad0>
   189a4:	stclcc	12, cr12, [ip, #820]	; 0x334
   189a8:	svccc	0x00666666
   189ac:	svccc	0x008ccccd
   189b0:	svccc	0x00800000
   189b4:	svccc	0x004ccccd
   189b8:	svccc	0x00b4fdf4
   189bc:	svcmi	0x00800000
   189c0:	andeq	r9, r1, r8, asr lr
   189c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   189c8:	mov	r7, r1
   189cc:	ldr	r3, [r0, #24]
   189d0:	mov	r6, r0
   189d4:	ldr	r1, [r0, #8]
   189d8:	mov	r0, r7
   189dc:	blx	r3
   189e0:	ldr	r3, [r6, #8]
   189e4:	cmp	r0, r3
   189e8:	bcs	18c14 <__assert_fail@plt+0x7e20>
   189ec:	ldr	r9, [r6]
   189f0:	mov	r8, r0
   189f4:	add	r5, r9, r0, lsl #3
   189f8:	ldr	r4, [r9, r0, lsl #3]
   189fc:	cmp	r4, #0
   18a00:	beq	18aac <__assert_fail@plt+0x7cb8>
   18a04:	cmp	r7, r4
   18a08:	beq	18a28 <__assert_fail@plt+0x7c34>
   18a0c:	mov	r1, r4
   18a10:	ldr	r3, [r6, #28]
   18a14:	mov	r0, r7
   18a18:	blx	r3
   18a1c:	cmp	r0, #0
   18a20:	beq	18aa0 <__assert_fail@plt+0x7cac>
   18a24:	ldr	r4, [r9, r8, lsl #3]
   18a28:	ldr	r3, [r5, #4]
   18a2c:	cmp	r3, #0
   18a30:	movne	r2, #0
   18a34:	ldmne	r3, {r0, r1}
   18a38:	streq	r3, [r9, r8, lsl #3]
   18a3c:	stmne	r5, {r0, r1}
   18a40:	strne	r2, [r3]
   18a44:	ldrne	r2, [r6, #36]	; 0x24
   18a48:	strne	r2, [r3, #4]
   18a4c:	strne	r3, [r6, #36]	; 0x24
   18a50:	cmp	r4, #0
   18a54:	beq	18aac <__assert_fail@plt+0x7cb8>
   18a58:	ldr	r2, [r9, r8, lsl #3]
   18a5c:	ldr	r3, [r6, #16]
   18a60:	cmp	r2, #0
   18a64:	sub	r3, r3, #1
   18a68:	str	r3, [r6, #16]
   18a6c:	beq	18ae0 <__assert_fail@plt+0x7cec>
   18a70:	mov	r0, r4
   18a74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18a78:	ldr	r4, [r3]
   18a7c:	cmp	r7, r4
   18a80:	beq	18ac0 <__assert_fail@plt+0x7ccc>
   18a84:	mov	r1, r4
   18a88:	ldr	r3, [r6, #28]
   18a8c:	mov	r0, r7
   18a90:	blx	r3
   18a94:	cmp	r0, #0
   18a98:	bne	18ab8 <__assert_fail@plt+0x7cc4>
   18a9c:	ldr	r5, [r5, #4]
   18aa0:	ldr	r3, [r5, #4]
   18aa4:	cmp	r3, #0
   18aa8:	bne	18a78 <__assert_fail@plt+0x7c84>
   18aac:	mov	r4, #0
   18ab0:	mov	r0, r4
   18ab4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18ab8:	ldr	r3, [r5, #4]
   18abc:	ldr	r4, [r3]
   18ac0:	ldr	r1, [r3, #4]
   18ac4:	mov	r2, #0
   18ac8:	str	r1, [r5, #4]
   18acc:	str	r2, [r3]
   18ad0:	ldr	r2, [r6, #36]	; 0x24
   18ad4:	str	r2, [r3, #4]
   18ad8:	str	r3, [r6, #36]	; 0x24
   18adc:	b	18a50 <__assert_fail@plt+0x7c5c>
   18ae0:	vldr	s15, [r6, #8]
   18ae4:	ldr	r3, [r6, #12]
   18ae8:	ldr	r2, [r6, #20]
   18aec:	sub	r3, r3, #1
   18af0:	vcvt.f32.u32	s14, s15
   18af4:	vldr	s13, [r2]
   18af8:	vmov	s15, r3
   18afc:	str	r3, [r6, #12]
   18b00:	vcvt.f32.u32	s15, s15
   18b04:	vmul.f32	s12, s13, s14
   18b08:	vcmpe.f32	s15, s12
   18b0c:	vmrs	APSR_nzcv, fpscr
   18b10:	bpl	18a70 <__assert_fail@plt+0x7c7c>
   18b14:	ldr	r3, [pc, #276]	; 18c30 <__assert_fail@plt+0x7e3c>
   18b18:	cmp	r2, r3
   18b1c:	beq	18bfc <__assert_fail@plt+0x7e08>
   18b20:	vldr	s12, [r2, #8]
   18b24:	vldr	s11, [pc, #236]	; 18c18 <__assert_fail@plt+0x7e24>
   18b28:	vcmpe.f32	s12, s11
   18b2c:	vmrs	APSR_nzcv, fpscr
   18b30:	ble	18be4 <__assert_fail@plt+0x7df0>
   18b34:	vldr	s10, [pc, #224]	; 18c1c <__assert_fail@plt+0x7e28>
   18b38:	vcmpe.f32	s12, s10
   18b3c:	vmrs	APSR_nzcv, fpscr
   18b40:	bpl	18be4 <__assert_fail@plt+0x7df0>
   18b44:	vldr	s10, [pc, #212]	; 18c20 <__assert_fail@plt+0x7e2c>
   18b48:	vldr	s9, [r2, #12]
   18b4c:	vcmpe.f32	s9, s10
   18b50:	vmrs	APSR_nzcv, fpscr
   18b54:	ble	18be4 <__assert_fail@plt+0x7df0>
   18b58:	vcmpe.f32	s13, #0.0
   18b5c:	vmrs	APSR_nzcv, fpscr
   18b60:	blt	18be4 <__assert_fail@plt+0x7df0>
   18b64:	vadd.f32	s13, s13, s11
   18b68:	vldr	s11, [r2, #4]
   18b6c:	vcmpe.f32	s13, s11
   18b70:	vmrs	APSR_nzcv, fpscr
   18b74:	bpl	18be4 <__assert_fail@plt+0x7df0>
   18b78:	vldr	s10, [pc, #164]	; 18c24 <__assert_fail@plt+0x7e30>
   18b7c:	vcmpe.f32	s11, s10
   18b80:	vmrs	APSR_nzcv, fpscr
   18b84:	bhi	18be4 <__assert_fail@plt+0x7df0>
   18b88:	vcmpe.f32	s12, s13
   18b8c:	vmrs	APSR_nzcv, fpscr
   18b90:	ble	18be4 <__assert_fail@plt+0x7df0>
   18b94:	ldrb	r3, [r2, #16]
   18b98:	cmp	r3, #0
   18b9c:	beq	18c04 <__assert_fail@plt+0x7e10>
   18ba0:	vmul.f32	s15, s14, s11
   18ba4:	vcvt.u32.f32	s15, s15
   18ba8:	vmov	r1, s15
   18bac:	mov	r0, r6
   18bb0:	bl	18164 <__assert_fail@plt+0x7370>
   18bb4:	cmp	r0, #0
   18bb8:	bne	18a70 <__assert_fail@plt+0x7c7c>
   18bbc:	ldr	r0, [r6, #36]	; 0x24
   18bc0:	cmp	r0, #0
   18bc4:	beq	18bd8 <__assert_fail@plt+0x7de4>
   18bc8:	ldr	r5, [r0, #4]
   18bcc:	bl	136fc <__assert_fail@plt+0x2908>
   18bd0:	subs	r0, r5, #0
   18bd4:	bne	18bc8 <__assert_fail@plt+0x7dd4>
   18bd8:	mov	r3, #0
   18bdc:	str	r3, [r6, #36]	; 0x24
   18be0:	b	18a70 <__assert_fail@plt+0x7c7c>
   18be4:	vldr	s13, [pc, #60]	; 18c28 <__assert_fail@plt+0x7e34>
   18be8:	str	r3, [r6, #20]
   18bec:	vmul.f32	s13, s14, s13
   18bf0:	vcmpe.f32	s15, s13
   18bf4:	vmrs	APSR_nzcv, fpscr
   18bf8:	bpl	18a70 <__assert_fail@plt+0x7c7c>
   18bfc:	vldr	s12, [pc, #40]	; 18c2c <__assert_fail@plt+0x7e38>
   18c00:	vldr	s11, [pc, #28]	; 18c24 <__assert_fail@plt+0x7e30>
   18c04:	vmul.f32	s15, s14, s11
   18c08:	vmul.f32	s15, s15, s12
   18c0c:	vcvt.u32.f32	s15, s15
   18c10:	b	18ba8 <__assert_fail@plt+0x7db4>
   18c14:	bl	10db8 <abort@plt>
   18c18:	stclcc	12, cr12, [ip, #820]	; 0x334
   18c1c:	svccc	0x00666666
   18c20:	svccc	0x008ccccd
   18c24:	svccc	0x00800000
   18c28:	andeq	r0, r0, r0
   18c2c:	svccc	0x004ccccd
   18c30:	andeq	r9, r1, r8, asr lr
   18c34:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18c38:	mov	r7, r1
   18c3c:	ldr	r3, [r0, #24]
   18c40:	mov	r6, r0
   18c44:	ldr	r1, [r0, #8]
   18c48:	mov	r0, r7
   18c4c:	blx	r3
   18c50:	ldr	r3, [r6, #8]
   18c54:	cmp	r0, r3
   18c58:	bcs	18e84 <__assert_fail@plt+0x8090>
   18c5c:	ldr	r9, [r6]
   18c60:	mov	r8, r0
   18c64:	add	r5, r9, r0, lsl #3
   18c68:	ldr	r4, [r9, r0, lsl #3]
   18c6c:	cmp	r4, #0
   18c70:	beq	18d1c <__assert_fail@plt+0x7f28>
   18c74:	cmp	r7, r4
   18c78:	beq	18c98 <__assert_fail@plt+0x7ea4>
   18c7c:	mov	r1, r4
   18c80:	ldr	r3, [r6, #28]
   18c84:	mov	r0, r7
   18c88:	blx	r3
   18c8c:	cmp	r0, #0
   18c90:	beq	18d10 <__assert_fail@plt+0x7f1c>
   18c94:	ldr	r4, [r9, r8, lsl #3]
   18c98:	ldr	r3, [r5, #4]
   18c9c:	cmp	r3, #0
   18ca0:	movne	r2, #0
   18ca4:	ldmne	r3, {r0, r1}
   18ca8:	streq	r3, [r9, r8, lsl #3]
   18cac:	stmne	r5, {r0, r1}
   18cb0:	strne	r2, [r3]
   18cb4:	ldrne	r2, [r6, #36]	; 0x24
   18cb8:	strne	r2, [r3, #4]
   18cbc:	strne	r3, [r6, #36]	; 0x24
   18cc0:	cmp	r4, #0
   18cc4:	beq	18d1c <__assert_fail@plt+0x7f28>
   18cc8:	ldr	r2, [r9, r8, lsl #3]
   18ccc:	ldr	r3, [r6, #16]
   18cd0:	cmp	r2, #0
   18cd4:	sub	r3, r3, #1
   18cd8:	str	r3, [r6, #16]
   18cdc:	beq	18d50 <__assert_fail@plt+0x7f5c>
   18ce0:	mov	r0, r4
   18ce4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18ce8:	ldr	r4, [r3]
   18cec:	cmp	r7, r4
   18cf0:	beq	18d30 <__assert_fail@plt+0x7f3c>
   18cf4:	mov	r1, r4
   18cf8:	ldr	r3, [r6, #28]
   18cfc:	mov	r0, r7
   18d00:	blx	r3
   18d04:	cmp	r0, #0
   18d08:	bne	18d28 <__assert_fail@plt+0x7f34>
   18d0c:	ldr	r5, [r5, #4]
   18d10:	ldr	r3, [r5, #4]
   18d14:	cmp	r3, #0
   18d18:	bne	18ce8 <__assert_fail@plt+0x7ef4>
   18d1c:	mov	r4, #0
   18d20:	mov	r0, r4
   18d24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18d28:	ldr	r3, [r5, #4]
   18d2c:	ldr	r4, [r3]
   18d30:	ldr	r1, [r3, #4]
   18d34:	mov	r2, #0
   18d38:	str	r1, [r5, #4]
   18d3c:	str	r2, [r3]
   18d40:	ldr	r2, [r6, #36]	; 0x24
   18d44:	str	r2, [r3, #4]
   18d48:	str	r3, [r6, #36]	; 0x24
   18d4c:	b	18cc0 <__assert_fail@plt+0x7ecc>
   18d50:	vldr	s15, [r6, #8]
   18d54:	ldr	r3, [r6, #12]
   18d58:	ldr	r2, [r6, #20]
   18d5c:	sub	r3, r3, #1
   18d60:	vcvt.f32.u32	s14, s15
   18d64:	vldr	s13, [r2]
   18d68:	vmov	s15, r3
   18d6c:	str	r3, [r6, #12]
   18d70:	vcvt.f32.u32	s15, s15
   18d74:	vmul.f32	s12, s13, s14
   18d78:	vcmpe.f32	s15, s12
   18d7c:	vmrs	APSR_nzcv, fpscr
   18d80:	bpl	18ce0 <__assert_fail@plt+0x7eec>
   18d84:	ldr	r3, [pc, #276]	; 18ea0 <__assert_fail@plt+0x80ac>
   18d88:	cmp	r2, r3
   18d8c:	beq	18e6c <__assert_fail@plt+0x8078>
   18d90:	vldr	s12, [r2, #8]
   18d94:	vldr	s11, [pc, #236]	; 18e88 <__assert_fail@plt+0x8094>
   18d98:	vcmpe.f32	s12, s11
   18d9c:	vmrs	APSR_nzcv, fpscr
   18da0:	ble	18e54 <__assert_fail@plt+0x8060>
   18da4:	vldr	s10, [pc, #224]	; 18e8c <__assert_fail@plt+0x8098>
   18da8:	vcmpe.f32	s12, s10
   18dac:	vmrs	APSR_nzcv, fpscr
   18db0:	bpl	18e54 <__assert_fail@plt+0x8060>
   18db4:	vldr	s10, [pc, #212]	; 18e90 <__assert_fail@plt+0x809c>
   18db8:	vldr	s9, [r2, #12]
   18dbc:	vcmpe.f32	s9, s10
   18dc0:	vmrs	APSR_nzcv, fpscr
   18dc4:	ble	18e54 <__assert_fail@plt+0x8060>
   18dc8:	vcmpe.f32	s13, #0.0
   18dcc:	vmrs	APSR_nzcv, fpscr
   18dd0:	blt	18e54 <__assert_fail@plt+0x8060>
   18dd4:	vadd.f32	s13, s13, s11
   18dd8:	vldr	s11, [r2, #4]
   18ddc:	vcmpe.f32	s13, s11
   18de0:	vmrs	APSR_nzcv, fpscr
   18de4:	bpl	18e54 <__assert_fail@plt+0x8060>
   18de8:	vldr	s10, [pc, #164]	; 18e94 <__assert_fail@plt+0x80a0>
   18dec:	vcmpe.f32	s11, s10
   18df0:	vmrs	APSR_nzcv, fpscr
   18df4:	bhi	18e54 <__assert_fail@plt+0x8060>
   18df8:	vcmpe.f32	s12, s13
   18dfc:	vmrs	APSR_nzcv, fpscr
   18e00:	ble	18e54 <__assert_fail@plt+0x8060>
   18e04:	ldrb	r3, [r2, #16]
   18e08:	cmp	r3, #0
   18e0c:	beq	18e74 <__assert_fail@plt+0x8080>
   18e10:	vmul.f32	s15, s14, s11
   18e14:	vcvt.u32.f32	s15, s15
   18e18:	vmov	r1, s15
   18e1c:	mov	r0, r6
   18e20:	bl	18164 <__assert_fail@plt+0x7370>
   18e24:	cmp	r0, #0
   18e28:	bne	18ce0 <__assert_fail@plt+0x7eec>
   18e2c:	ldr	r0, [r6, #36]	; 0x24
   18e30:	cmp	r0, #0
   18e34:	beq	18e48 <__assert_fail@plt+0x8054>
   18e38:	ldr	r5, [r0, #4]
   18e3c:	bl	136fc <__assert_fail@plt+0x2908>
   18e40:	subs	r0, r5, #0
   18e44:	bne	18e38 <__assert_fail@plt+0x8044>
   18e48:	mov	r3, #0
   18e4c:	str	r3, [r6, #36]	; 0x24
   18e50:	b	18ce0 <__assert_fail@plt+0x7eec>
   18e54:	vldr	s13, [pc, #60]	; 18e98 <__assert_fail@plt+0x80a4>
   18e58:	str	r3, [r6, #20]
   18e5c:	vmul.f32	s13, s14, s13
   18e60:	vcmpe.f32	s15, s13
   18e64:	vmrs	APSR_nzcv, fpscr
   18e68:	bpl	18ce0 <__assert_fail@plt+0x7eec>
   18e6c:	vldr	s12, [pc, #40]	; 18e9c <__assert_fail@plt+0x80a8>
   18e70:	vldr	s11, [pc, #28]	; 18e94 <__assert_fail@plt+0x80a0>
   18e74:	vmul.f32	s15, s14, s11
   18e78:	vmul.f32	s15, s15, s12
   18e7c:	vcvt.u32.f32	s15, s15
   18e80:	b	18e18 <__assert_fail@plt+0x8024>
   18e84:	bl	10db8 <abort@plt>
   18e88:	stclcc	12, cr12, [ip, #820]	; 0x334
   18e8c:	svccc	0x00666666
   18e90:	svccc	0x008ccccd
   18e94:	svccc	0x00800000
   18e98:	andeq	r0, r0, r0
   18e9c:	svccc	0x004ccccd
   18ea0:	andeq	r9, r1, r8, asr lr
   18ea4:	mov	r3, #0
   18ea8:	mov	r2, #1
   18eac:	str	r1, [r0]
   18eb0:	str	r1, [r0, #4]
   18eb4:	str	r1, [r0, #8]
   18eb8:	str	r1, [r0, #12]
   18ebc:	str	r1, [r0, #16]
   18ec0:	strb	r2, [r0, #28]
   18ec4:	str	r3, [r0, #20]
   18ec8:	str	r3, [r0, #24]
   18ecc:	bx	lr
   18ed0:	ldrb	r0, [r0, #28]
   18ed4:	bx	lr
   18ed8:	ldrb	ip, [r0, #28]
   18edc:	ldr	r3, [r0, #20]
   18ee0:	mov	r2, r0
   18ee4:	eor	ip, ip, #1
   18ee8:	add	r3, ip, r3
   18eec:	and	r3, r3, #3
   18ef0:	ldr	r0, [r0, r3, lsl #2]
   18ef4:	str	r1, [r2, r3, lsl #2]
   18ef8:	ldr	r1, [r2, #24]
   18efc:	str	r3, [r2, #20]
   18f00:	cmp	r3, r1
   18f04:	addeq	r3, ip, r3
   18f08:	andeq	r3, r3, #3
   18f0c:	streq	r3, [r2, #24]
   18f10:	mov	r3, #0
   18f14:	strb	r3, [r2, #28]
   18f18:	bx	lr
   18f1c:	ldrb	r3, [r0, #28]
   18f20:	cmp	r3, #0
   18f24:	bne	18f5c <__assert_fail@plt+0x8168>
   18f28:	ldr	r3, [r0, #20]
   18f2c:	ldr	r1, [r0, #16]
   18f30:	ldr	r2, [r0, r3, lsl #2]
   18f34:	str	r1, [r0, r3, lsl #2]
   18f38:	ldr	r1, [r0, #24]
   18f3c:	cmp	r3, r1
   18f40:	addne	r3, r3, #3
   18f44:	moveq	r3, #1
   18f48:	andne	r3, r3, #3
   18f4c:	strbeq	r3, [r0, #28]
   18f50:	strne	r3, [r0, #20]
   18f54:	mov	r0, r2
   18f58:	bx	lr
   18f5c:	push	{r4, lr}
   18f60:	bl	10db8 <abort@plt>
   18f64:	push	{r4, r5, r6, r8, r9, lr}
   18f68:	mov	r4, r0
   18f6c:	mov	r5, r1
   18f70:	add	r6, r2, #20
   18f74:	mov	r8, #10
   18f78:	mov	r9, #0
   18f7c:	mov	r3, #0
   18f80:	strb	r3, [r2, #20]
   18f84:	mov	r0, r4
   18f88:	mov	r1, r5
   18f8c:	mov	r2, r8
   18f90:	mov	r3, r9
   18f94:	bl	199bc <__assert_fail@plt+0x8bc8>
   18f98:	mov	r0, r4
   18f9c:	mov	r1, r5
   18fa0:	mov	r3, r9
   18fa4:	add	r2, r2, #48	; 0x30
   18fa8:	strb	r2, [r6, #-1]!
   18fac:	mov	r2, r8
   18fb0:	bl	199bc <__assert_fail@plt+0x8bc8>
   18fb4:	mov	r4, r0
   18fb8:	mov	r5, r1
   18fbc:	orrs	r3, r4, r5
   18fc0:	bne	18f84 <__assert_fail@plt+0x8190>
   18fc4:	mov	r0, r6
   18fc8:	pop	{r4, r5, r6, r8, r9, pc}
   18fcc:	push	{r1, r2, r3}
   18fd0:	push	{lr}		; (str lr, [sp, #-4]!)
   18fd4:	sub	sp, sp, #8
   18fd8:	add	r3, sp, #16
   18fdc:	ldr	r2, [sp, #16]
   18fe0:	ldr	r1, [sp, #12]
   18fe4:	str	r3, [sp, #4]
   18fe8:	bl	10c5c <ioctl@plt>
   18fec:	add	sp, sp, #8
   18ff0:	pop	{lr}		; (ldr lr, [sp], #4)
   18ff4:	add	sp, sp, #12
   18ff8:	bx	lr
   18ffc:	push	{r2, r3}
   19000:	push	{lr}		; (str lr, [sp, #-4]!)
   19004:	sub	sp, sp, #12
   19008:	ldr	r2, [sp, #16]
   1900c:	ands	r3, r2, #64	; 0x40
   19010:	addne	r3, sp, #20
   19014:	strne	r3, [sp, #4]
   19018:	ldrne	r3, [sp, #20]
   1901c:	bl	10ce0 <openat64@plt>
   19020:	bl	19088 <__assert_fail@plt+0x8294>
   19024:	add	sp, sp, #12
   19028:	pop	{lr}		; (ldr lr, [sp], #4)
   1902c:	add	sp, sp, #8
   19030:	bx	lr
   19034:	orr	r2, r2, #540672	; 0x84000
   19038:	push	{r4, r5, r6, lr}
   1903c:	orr	r2, r2, #2304	; 0x900
   19040:	mov	r6, r3
   19044:	bl	18ffc <__assert_fail@plt+0x8208>
   19048:	subs	r5, r0, #0
   1904c:	blt	19080 <__assert_fail@plt+0x828c>
   19050:	bl	10d4c <fdopendir@plt>
   19054:	subs	r4, r0, #0
   19058:	beq	19068 <__assert_fail@plt+0x8274>
   1905c:	str	r5, [r6]
   19060:	mov	r0, r4
   19064:	pop	{r4, r5, r6, pc}
   19068:	bl	10cf8 <__errno_location@plt>
   1906c:	mov	r6, r0
   19070:	mov	r0, r5
   19074:	ldr	r5, [r6]
   19078:	bl	10dc4 <close@plt>
   1907c:	b	1905c <__assert_fail@plt+0x8268>
   19080:	mov	r4, #0
   19084:	b	19060 <__assert_fail@plt+0x826c>
   19088:	cmp	r0, #2
   1908c:	push	{r4, r5, r6, r7, r8, lr}
   19090:	mov	r4, r0
   19094:	bhi	190bc <__assert_fail@plt+0x82c8>
   19098:	bl	19490 <__assert_fail@plt+0x869c>
   1909c:	mov	r7, r0
   190a0:	bl	10cf8 <__errno_location@plt>
   190a4:	mov	r5, r0
   190a8:	mov	r0, r4
   190ac:	ldr	r6, [r5]
   190b0:	mov	r4, r7
   190b4:	bl	10dc4 <close@plt>
   190b8:	str	r6, [r5]
   190bc:	mov	r0, r4
   190c0:	pop	{r4, r5, r6, r7, r8, pc}
   190c4:	cmp	r1, #0
   190c8:	cmpne	r0, #0
   190cc:	moveq	r1, #1
   190d0:	moveq	r0, r1
   190d4:	umull	r2, r3, r0, r1
   190d8:	adds	r3, r3, #0
   190dc:	movne	r3, #1
   190e0:	cmp	r2, #0
   190e4:	blt	190f4 <__assert_fail@plt+0x8300>
   190e8:	cmp	r3, #0
   190ec:	bne	190f4 <__assert_fail@plt+0x8300>
   190f0:	b	10b84 <calloc@plt>
   190f4:	push	{r4, lr}
   190f8:	bl	10cf8 <__errno_location@plt>
   190fc:	mov	r3, #12
   19100:	str	r3, [r0]
   19104:	mov	r0, #0
   19108:	pop	{r4, pc}
   1910c:	cmp	r0, #0
   19110:	moveq	r0, #1
   19114:	cmp	r0, #0
   19118:	blt	19120 <__assert_fail@plt+0x832c>
   1911c:	b	10c8c <malloc@plt>
   19120:	push	{r4, lr}
   19124:	bl	10cf8 <__errno_location@plt>
   19128:	mov	r3, #12
   1912c:	str	r3, [r0]
   19130:	mov	r0, #0
   19134:	pop	{r4, pc}
   19138:	cmp	r0, #0
   1913c:	beq	19160 <__assert_fail@plt+0x836c>
   19140:	cmp	r1, #0
   19144:	push	{lr}		; (str lr, [sp, #-4]!)
   19148:	sub	sp, sp, #12
   1914c:	beq	19168 <__assert_fail@plt+0x8374>
   19150:	blt	19180 <__assert_fail@plt+0x838c>
   19154:	add	sp, sp, #12
   19158:	pop	{lr}		; (ldr lr, [sp], #4)
   1915c:	b	10c14 <realloc@plt>
   19160:	mov	r0, r1
   19164:	b	1910c <__assert_fail@plt+0x8318>
   19168:	str	r1, [sp, #4]
   1916c:	bl	136fc <__assert_fail@plt+0x2908>
   19170:	ldr	r3, [sp, #4]
   19174:	mov	r0, r3
   19178:	add	sp, sp, #12
   1917c:	pop	{pc}		; (ldr pc, [sp], #4)
   19180:	bl	10cf8 <__errno_location@plt>
   19184:	mov	r2, #12
   19188:	mov	r3, #0
   1918c:	str	r2, [r0]
   19190:	b	19174 <__assert_fail@plt+0x8380>
   19194:	push	{r4, r5}
   19198:	mov	r4, #0
   1919c:	mov	r5, #0
   191a0:	ldr	r3, [pc, #12]	; 191b4 <__assert_fail@plt+0x83c0>
   191a4:	strd	r4, [r0, #16]
   191a8:	str	r3, [r0, #24]
   191ac:	pop	{r4, r5}
   191b0:	bx	lr
   191b4:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   191b8:	ldr	r3, [pc, #180]	; 19274 <__assert_fail@plt+0x8480>
   191bc:	ldr	r2, [r0, #24]
   191c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   191c4:	cmp	r2, r3
   191c8:	bne	19260 <__assert_fail@plt+0x846c>
   191cc:	ldrd	r6, [r0, #16]
   191d0:	orrs	r3, r6, r7
   191d4:	bne	19200 <__assert_fail@plt+0x840c>
   191d8:	mov	r2, #1
   191dc:	mov	r3, #0
   191e0:	ldrd	r8, [r1, #96]	; 0x60
   191e4:	strd	r2, [r0, #16]
   191e8:	ldrd	r2, [r1]
   191ec:	mov	r1, #0
   191f0:	strd	r8, [r0]
   191f4:	strd	r2, [r0, #8]
   191f8:	mov	r0, r1
   191fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19200:	ldrd	r8, [r1, #96]	; 0x60
   19204:	ldrd	r2, [r0]
   19208:	cmp	r9, r3
   1920c:	cmpeq	r8, r2
   19210:	beq	19248 <__assert_fail@plt+0x8454>
   19214:	adds	r2, r6, #1
   19218:	adc	r3, r7, #0
   1921c:	and	r6, r6, r2
   19220:	and	r7, r7, r3
   19224:	orrs	ip, r6, r7
   19228:	strd	r2, [r0, #16]
   1922c:	movne	r1, #0
   19230:	bne	191f8 <__assert_fail@plt+0x8404>
   19234:	orrs	r3, r2, r3
   19238:	bne	191e8 <__assert_fail@plt+0x83f4>
   1923c:	mov	r1, #1
   19240:	mov	r0, r1
   19244:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19248:	ldrd	r4, [r1]
   1924c:	ldrd	r2, [r0, #8]
   19250:	cmp	r5, r3
   19254:	cmpeq	r4, r2
   19258:	bne	19214 <__assert_fail@plt+0x8420>
   1925c:	b	1923c <__assert_fail@plt+0x8448>
   19260:	ldr	r3, [pc, #16]	; 19278 <__assert_fail@plt+0x8484>
   19264:	mov	r2, #60	; 0x3c
   19268:	ldr	r1, [pc, #12]	; 1927c <__assert_fail@plt+0x8488>
   1926c:	ldr	r0, [pc, #12]	; 19280 <__assert_fail@plt+0x848c>
   19270:	bl	10df4 <__assert_fail@plt>
   19274:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   19278:	ldrdeq	r9, [r1], -r8
   1927c:	andeq	r9, r1, r4, ror #29
   19280:	strdeq	r9, [r1], -r4
   19284:	push	{r1, r2, r3}
   19288:	push	{r4, r5, r6, r7, lr}
   1928c:	sub	sp, sp, #8
   19290:	add	r3, sp, #32
   19294:	ldr	r1, [sp, #28]
   19298:	str	r3, [sp, #4]
   1929c:	cmp	r1, #0
   192a0:	beq	19338 <__assert_fail@plt+0x8544>
   192a4:	ldr	r2, [pc, #412]	; 19448 <__assert_fail@plt+0x8654>
   192a8:	mov	r5, r0
   192ac:	cmp	r1, r2
   192b0:	bne	192fc <__assert_fail@plt+0x8508>
   192b4:	ldr	r6, [pc, #400]	; 1944c <__assert_fail@plt+0x8658>
   192b8:	ldr	r7, [r3]
   192bc:	add	r2, sp, #36	; 0x24
   192c0:	ldr	r3, [r6]
   192c4:	str	r2, [sp, #4]
   192c8:	cmp	r3, #0
   192cc:	mov	r2, r7
   192d0:	blt	193fc <__assert_fail@plt+0x8608>
   192d4:	bl	10d1c <fcntl64@plt>
   192d8:	subs	r4, r0, #0
   192dc:	blt	19380 <__assert_fail@plt+0x858c>
   192e0:	mov	r3, #1
   192e4:	str	r3, [r6]
   192e8:	mov	r0, r4
   192ec:	add	sp, sp, #8
   192f0:	pop	{r4, r5, r6, r7, lr}
   192f4:	add	sp, sp, #12
   192f8:	bx	lr
   192fc:	cmp	r1, #11
   19300:	beq	19328 <__assert_fail@plt+0x8534>
   19304:	bgt	19348 <__assert_fail@plt+0x8554>
   19308:	cmp	r1, #3
   1930c:	beq	19328 <__assert_fail@plt+0x8534>
   19310:	ble	1943c <__assert_fail@plt+0x8648>
   19314:	cmp	r1, #8
   19318:	beq	19368 <__assert_fail@plt+0x8574>
   1931c:	ble	19368 <__assert_fail@plt+0x8574>
   19320:	cmp	r1, #9
   19324:	bne	19368 <__assert_fail@plt+0x8574>
   19328:	mov	r0, r5
   1932c:	bl	10d1c <fcntl64@plt>
   19330:	mov	r4, r0
   19334:	b	192e8 <__assert_fail@plt+0x84f4>
   19338:	ldr	r2, [sp, #32]
   1933c:	bl	10d1c <fcntl64@plt>
   19340:	mov	r4, r0
   19344:	b	192e8 <__assert_fail@plt+0x84f4>
   19348:	ldr	r3, [pc, #256]	; 19450 <__assert_fail@plt+0x865c>
   1934c:	cmp	r1, r3
   19350:	bgt	1941c <__assert_fail@plt+0x8628>
   19354:	cmp	r1, r2
   19358:	bge	19368 <__assert_fail@plt+0x8574>
   1935c:	sub	r3, r3, #6
   19360:	cmp	r1, r3
   19364:	beq	19328 <__assert_fail@plt+0x8534>
   19368:	ldr	r3, [sp, #4]
   1936c:	mov	r0, r5
   19370:	ldr	r2, [r3]
   19374:	bl	10d1c <fcntl64@plt>
   19378:	mov	r4, r0
   1937c:	b	192e8 <__assert_fail@plt+0x84f4>
   19380:	bl	10cf8 <__errno_location@plt>
   19384:	ldr	r3, [r0]
   19388:	cmp	r3, #22
   1938c:	bne	192e0 <__assert_fail@plt+0x84ec>
   19390:	mov	r2, r7
   19394:	mov	r0, r5
   19398:	mov	r1, #0
   1939c:	bl	10d1c <fcntl64@plt>
   193a0:	subs	r4, r0, #0
   193a4:	blt	192e8 <__assert_fail@plt+0x84f4>
   193a8:	mvn	r3, #0
   193ac:	str	r3, [r6]
   193b0:	mov	r1, #1
   193b4:	mov	r0, r4
   193b8:	bl	10d1c <fcntl64@plt>
   193bc:	subs	r2, r0, #0
   193c0:	blt	193dc <__assert_fail@plt+0x85e8>
   193c4:	orr	r2, r2, #1
   193c8:	mov	r1, #2
   193cc:	mov	r0, r4
   193d0:	bl	10d1c <fcntl64@plt>
   193d4:	cmn	r0, #1
   193d8:	bne	192e8 <__assert_fail@plt+0x84f4>
   193dc:	bl	10cf8 <__errno_location@plt>
   193e0:	mov	r5, r0
   193e4:	mov	r0, r4
   193e8:	ldr	r6, [r5]
   193ec:	mvn	r4, #0
   193f0:	bl	10dc4 <close@plt>
   193f4:	str	r6, [r5]
   193f8:	b	192e8 <__assert_fail@plt+0x84f4>
   193fc:	mov	r1, #0
   19400:	bl	10d1c <fcntl64@plt>
   19404:	subs	r4, r0, #0
   19408:	blt	192e8 <__assert_fail@plt+0x84f4>
   1940c:	ldr	r3, [r6]
   19410:	cmn	r3, #1
   19414:	beq	193b0 <__assert_fail@plt+0x85bc>
   19418:	b	192e8 <__assert_fail@plt+0x84f4>
   1941c:	ldr	r3, [pc, #48]	; 19454 <__assert_fail@plt+0x8660>
   19420:	cmp	r1, r3
   19424:	beq	19368 <__assert_fail@plt+0x8574>
   19428:	blt	19328 <__assert_fail@plt+0x8534>
   1942c:	add	r3, r3, #1
   19430:	cmp	r1, r3
   19434:	bne	19368 <__assert_fail@plt+0x8574>
   19438:	b	19328 <__assert_fail@plt+0x8534>
   1943c:	cmp	r1, #1
   19440:	bne	19368 <__assert_fail@plt+0x8574>
   19444:	b	19328 <__assert_fail@plt+0x8534>
   19448:	andeq	r0, r0, r6, lsl #8
   1944c:	andeq	fp, r2, r4, asr r1
   19450:	andeq	r0, r0, r7, lsl #8
   19454:	andeq	r0, r0, r9, lsl #8
   19458:	push	{r1, r2, r3}
   1945c:	push	{lr}		; (str lr, [sp, #-4]!)
   19460:	sub	sp, sp, #8
   19464:	ldr	r1, [sp, #12]
   19468:	ands	r2, r1, #64	; 0x40
   1946c:	addne	r3, sp, #16
   19470:	ldrne	r2, [sp, #16]
   19474:	strne	r3, [sp, #4]
   19478:	bl	10c74 <open64@plt>
   1947c:	bl	19088 <__assert_fail@plt+0x8294>
   19480:	add	sp, sp, #8
   19484:	pop	{lr}		; (ldr lr, [sp], #4)
   19488:	add	sp, sp, #12
   1948c:	bx	lr
   19490:	mov	r2, #3
   19494:	mov	r1, #0
   19498:	b	19284 <__assert_fail@plt+0x8490>
   1949c:	subs	r2, r1, #1
   194a0:	bxeq	lr
   194a4:	bcc	1967c <__assert_fail@plt+0x8888>
   194a8:	cmp	r0, r1
   194ac:	bls	19660 <__assert_fail@plt+0x886c>
   194b0:	tst	r1, r2
   194b4:	beq	1966c <__assert_fail@plt+0x8878>
   194b8:	clz	r3, r0
   194bc:	clz	r2, r1
   194c0:	sub	r3, r2, r3
   194c4:	rsbs	r3, r3, #31
   194c8:	addne	r3, r3, r3, lsl #1
   194cc:	mov	r2, #0
   194d0:	addne	pc, pc, r3, lsl #2
   194d4:	nop			; (mov r0, r0)
   194d8:	cmp	r0, r1, lsl #31
   194dc:	adc	r2, r2, r2
   194e0:	subcs	r0, r0, r1, lsl #31
   194e4:	cmp	r0, r1, lsl #30
   194e8:	adc	r2, r2, r2
   194ec:	subcs	r0, r0, r1, lsl #30
   194f0:	cmp	r0, r1, lsl #29
   194f4:	adc	r2, r2, r2
   194f8:	subcs	r0, r0, r1, lsl #29
   194fc:	cmp	r0, r1, lsl #28
   19500:	adc	r2, r2, r2
   19504:	subcs	r0, r0, r1, lsl #28
   19508:	cmp	r0, r1, lsl #27
   1950c:	adc	r2, r2, r2
   19510:	subcs	r0, r0, r1, lsl #27
   19514:	cmp	r0, r1, lsl #26
   19518:	adc	r2, r2, r2
   1951c:	subcs	r0, r0, r1, lsl #26
   19520:	cmp	r0, r1, lsl #25
   19524:	adc	r2, r2, r2
   19528:	subcs	r0, r0, r1, lsl #25
   1952c:	cmp	r0, r1, lsl #24
   19530:	adc	r2, r2, r2
   19534:	subcs	r0, r0, r1, lsl #24
   19538:	cmp	r0, r1, lsl #23
   1953c:	adc	r2, r2, r2
   19540:	subcs	r0, r0, r1, lsl #23
   19544:	cmp	r0, r1, lsl #22
   19548:	adc	r2, r2, r2
   1954c:	subcs	r0, r0, r1, lsl #22
   19550:	cmp	r0, r1, lsl #21
   19554:	adc	r2, r2, r2
   19558:	subcs	r0, r0, r1, lsl #21
   1955c:	cmp	r0, r1, lsl #20
   19560:	adc	r2, r2, r2
   19564:	subcs	r0, r0, r1, lsl #20
   19568:	cmp	r0, r1, lsl #19
   1956c:	adc	r2, r2, r2
   19570:	subcs	r0, r0, r1, lsl #19
   19574:	cmp	r0, r1, lsl #18
   19578:	adc	r2, r2, r2
   1957c:	subcs	r0, r0, r1, lsl #18
   19580:	cmp	r0, r1, lsl #17
   19584:	adc	r2, r2, r2
   19588:	subcs	r0, r0, r1, lsl #17
   1958c:	cmp	r0, r1, lsl #16
   19590:	adc	r2, r2, r2
   19594:	subcs	r0, r0, r1, lsl #16
   19598:	cmp	r0, r1, lsl #15
   1959c:	adc	r2, r2, r2
   195a0:	subcs	r0, r0, r1, lsl #15
   195a4:	cmp	r0, r1, lsl #14
   195a8:	adc	r2, r2, r2
   195ac:	subcs	r0, r0, r1, lsl #14
   195b0:	cmp	r0, r1, lsl #13
   195b4:	adc	r2, r2, r2
   195b8:	subcs	r0, r0, r1, lsl #13
   195bc:	cmp	r0, r1, lsl #12
   195c0:	adc	r2, r2, r2
   195c4:	subcs	r0, r0, r1, lsl #12
   195c8:	cmp	r0, r1, lsl #11
   195cc:	adc	r2, r2, r2
   195d0:	subcs	r0, r0, r1, lsl #11
   195d4:	cmp	r0, r1, lsl #10
   195d8:	adc	r2, r2, r2
   195dc:	subcs	r0, r0, r1, lsl #10
   195e0:	cmp	r0, r1, lsl #9
   195e4:	adc	r2, r2, r2
   195e8:	subcs	r0, r0, r1, lsl #9
   195ec:	cmp	r0, r1, lsl #8
   195f0:	adc	r2, r2, r2
   195f4:	subcs	r0, r0, r1, lsl #8
   195f8:	cmp	r0, r1, lsl #7
   195fc:	adc	r2, r2, r2
   19600:	subcs	r0, r0, r1, lsl #7
   19604:	cmp	r0, r1, lsl #6
   19608:	adc	r2, r2, r2
   1960c:	subcs	r0, r0, r1, lsl #6
   19610:	cmp	r0, r1, lsl #5
   19614:	adc	r2, r2, r2
   19618:	subcs	r0, r0, r1, lsl #5
   1961c:	cmp	r0, r1, lsl #4
   19620:	adc	r2, r2, r2
   19624:	subcs	r0, r0, r1, lsl #4
   19628:	cmp	r0, r1, lsl #3
   1962c:	adc	r2, r2, r2
   19630:	subcs	r0, r0, r1, lsl #3
   19634:	cmp	r0, r1, lsl #2
   19638:	adc	r2, r2, r2
   1963c:	subcs	r0, r0, r1, lsl #2
   19640:	cmp	r0, r1, lsl #1
   19644:	adc	r2, r2, r2
   19648:	subcs	r0, r0, r1, lsl #1
   1964c:	cmp	r0, r1
   19650:	adc	r2, r2, r2
   19654:	subcs	r0, r0, r1
   19658:	mov	r0, r2
   1965c:	bx	lr
   19660:	moveq	r0, #1
   19664:	movne	r0, #0
   19668:	bx	lr
   1966c:	clz	r2, r1
   19670:	rsb	r2, r2, #31
   19674:	lsr	r0, r0, r2
   19678:	bx	lr
   1967c:	cmp	r0, #0
   19680:	mvnne	r0, #0
   19684:	b	199f8 <__assert_fail@plt+0x8c04>
   19688:	cmp	r1, #0
   1968c:	beq	1967c <__assert_fail@plt+0x8888>
   19690:	push	{r0, r1, lr}
   19694:	bl	1949c <__assert_fail@plt+0x86a8>
   19698:	pop	{r1, r2, lr}
   1969c:	mul	r3, r2, r0
   196a0:	sub	r1, r1, r3
   196a4:	bx	lr
   196a8:	cmp	r1, #0
   196ac:	beq	198b8 <__assert_fail@plt+0x8ac4>
   196b0:	eor	ip, r0, r1
   196b4:	rsbmi	r1, r1, #0
   196b8:	subs	r2, r1, #1
   196bc:	beq	19884 <__assert_fail@plt+0x8a90>
   196c0:	movs	r3, r0
   196c4:	rsbmi	r3, r0, #0
   196c8:	cmp	r3, r1
   196cc:	bls	19890 <__assert_fail@plt+0x8a9c>
   196d0:	tst	r1, r2
   196d4:	beq	198a0 <__assert_fail@plt+0x8aac>
   196d8:	clz	r2, r3
   196dc:	clz	r0, r1
   196e0:	sub	r2, r0, r2
   196e4:	rsbs	r2, r2, #31
   196e8:	addne	r2, r2, r2, lsl #1
   196ec:	mov	r0, #0
   196f0:	addne	pc, pc, r2, lsl #2
   196f4:	nop			; (mov r0, r0)
   196f8:	cmp	r3, r1, lsl #31
   196fc:	adc	r0, r0, r0
   19700:	subcs	r3, r3, r1, lsl #31
   19704:	cmp	r3, r1, lsl #30
   19708:	adc	r0, r0, r0
   1970c:	subcs	r3, r3, r1, lsl #30
   19710:	cmp	r3, r1, lsl #29
   19714:	adc	r0, r0, r0
   19718:	subcs	r3, r3, r1, lsl #29
   1971c:	cmp	r3, r1, lsl #28
   19720:	adc	r0, r0, r0
   19724:	subcs	r3, r3, r1, lsl #28
   19728:	cmp	r3, r1, lsl #27
   1972c:	adc	r0, r0, r0
   19730:	subcs	r3, r3, r1, lsl #27
   19734:	cmp	r3, r1, lsl #26
   19738:	adc	r0, r0, r0
   1973c:	subcs	r3, r3, r1, lsl #26
   19740:	cmp	r3, r1, lsl #25
   19744:	adc	r0, r0, r0
   19748:	subcs	r3, r3, r1, lsl #25
   1974c:	cmp	r3, r1, lsl #24
   19750:	adc	r0, r0, r0
   19754:	subcs	r3, r3, r1, lsl #24
   19758:	cmp	r3, r1, lsl #23
   1975c:	adc	r0, r0, r0
   19760:	subcs	r3, r3, r1, lsl #23
   19764:	cmp	r3, r1, lsl #22
   19768:	adc	r0, r0, r0
   1976c:	subcs	r3, r3, r1, lsl #22
   19770:	cmp	r3, r1, lsl #21
   19774:	adc	r0, r0, r0
   19778:	subcs	r3, r3, r1, lsl #21
   1977c:	cmp	r3, r1, lsl #20
   19780:	adc	r0, r0, r0
   19784:	subcs	r3, r3, r1, lsl #20
   19788:	cmp	r3, r1, lsl #19
   1978c:	adc	r0, r0, r0
   19790:	subcs	r3, r3, r1, lsl #19
   19794:	cmp	r3, r1, lsl #18
   19798:	adc	r0, r0, r0
   1979c:	subcs	r3, r3, r1, lsl #18
   197a0:	cmp	r3, r1, lsl #17
   197a4:	adc	r0, r0, r0
   197a8:	subcs	r3, r3, r1, lsl #17
   197ac:	cmp	r3, r1, lsl #16
   197b0:	adc	r0, r0, r0
   197b4:	subcs	r3, r3, r1, lsl #16
   197b8:	cmp	r3, r1, lsl #15
   197bc:	adc	r0, r0, r0
   197c0:	subcs	r3, r3, r1, lsl #15
   197c4:	cmp	r3, r1, lsl #14
   197c8:	adc	r0, r0, r0
   197cc:	subcs	r3, r3, r1, lsl #14
   197d0:	cmp	r3, r1, lsl #13
   197d4:	adc	r0, r0, r0
   197d8:	subcs	r3, r3, r1, lsl #13
   197dc:	cmp	r3, r1, lsl #12
   197e0:	adc	r0, r0, r0
   197e4:	subcs	r3, r3, r1, lsl #12
   197e8:	cmp	r3, r1, lsl #11
   197ec:	adc	r0, r0, r0
   197f0:	subcs	r3, r3, r1, lsl #11
   197f4:	cmp	r3, r1, lsl #10
   197f8:	adc	r0, r0, r0
   197fc:	subcs	r3, r3, r1, lsl #10
   19800:	cmp	r3, r1, lsl #9
   19804:	adc	r0, r0, r0
   19808:	subcs	r3, r3, r1, lsl #9
   1980c:	cmp	r3, r1, lsl #8
   19810:	adc	r0, r0, r0
   19814:	subcs	r3, r3, r1, lsl #8
   19818:	cmp	r3, r1, lsl #7
   1981c:	adc	r0, r0, r0
   19820:	subcs	r3, r3, r1, lsl #7
   19824:	cmp	r3, r1, lsl #6
   19828:	adc	r0, r0, r0
   1982c:	subcs	r3, r3, r1, lsl #6
   19830:	cmp	r3, r1, lsl #5
   19834:	adc	r0, r0, r0
   19838:	subcs	r3, r3, r1, lsl #5
   1983c:	cmp	r3, r1, lsl #4
   19840:	adc	r0, r0, r0
   19844:	subcs	r3, r3, r1, lsl #4
   19848:	cmp	r3, r1, lsl #3
   1984c:	adc	r0, r0, r0
   19850:	subcs	r3, r3, r1, lsl #3
   19854:	cmp	r3, r1, lsl #2
   19858:	adc	r0, r0, r0
   1985c:	subcs	r3, r3, r1, lsl #2
   19860:	cmp	r3, r1, lsl #1
   19864:	adc	r0, r0, r0
   19868:	subcs	r3, r3, r1, lsl #1
   1986c:	cmp	r3, r1
   19870:	adc	r0, r0, r0
   19874:	subcs	r3, r3, r1
   19878:	cmp	ip, #0
   1987c:	rsbmi	r0, r0, #0
   19880:	bx	lr
   19884:	teq	ip, r0
   19888:	rsbmi	r0, r0, #0
   1988c:	bx	lr
   19890:	movcc	r0, #0
   19894:	asreq	r0, ip, #31
   19898:	orreq	r0, r0, #1
   1989c:	bx	lr
   198a0:	clz	r2, r1
   198a4:	rsb	r2, r2, #31
   198a8:	cmp	ip, #0
   198ac:	lsr	r0, r3, r2
   198b0:	rsbmi	r0, r0, #0
   198b4:	bx	lr
   198b8:	cmp	r0, #0
   198bc:	mvngt	r0, #-2147483648	; 0x80000000
   198c0:	movlt	r0, #-2147483648	; 0x80000000
   198c4:	b	199f8 <__assert_fail@plt+0x8c04>
   198c8:	cmp	r1, #0
   198cc:	beq	198b8 <__assert_fail@plt+0x8ac4>
   198d0:	push	{r0, r1, lr}
   198d4:	bl	196b0 <__assert_fail@plt+0x88bc>
   198d8:	pop	{r1, r2, lr}
   198dc:	mul	r3, r2, r0
   198e0:	sub	r1, r1, r3
   198e4:	bx	lr
   198e8:	cmp	r3, #0
   198ec:	cmpeq	r2, #0
   198f0:	bne	19914 <__assert_fail@plt+0x8b20>
   198f4:	cmp	r1, #0
   198f8:	movlt	r1, #-2147483648	; 0x80000000
   198fc:	movlt	r0, #0
   19900:	blt	19910 <__assert_fail@plt+0x8b1c>
   19904:	cmpeq	r0, #0
   19908:	mvnne	r1, #-2147483648	; 0x80000000
   1990c:	mvnne	r0, #0
   19910:	b	199f8 <__assert_fail@plt+0x8c04>
   19914:	sub	sp, sp, #8
   19918:	push	{sp, lr}
   1991c:	cmp	r1, #0
   19920:	blt	19940 <__assert_fail@plt+0x8b4c>
   19924:	cmp	r3, #0
   19928:	blt	19974 <__assert_fail@plt+0x8b80>
   1992c:	bl	19a08 <__assert_fail@plt+0x8c14>
   19930:	ldr	lr, [sp, #4]
   19934:	add	sp, sp, #8
   19938:	pop	{r2, r3}
   1993c:	bx	lr
   19940:	rsbs	r0, r0, #0
   19944:	sbc	r1, r1, r1, lsl #1
   19948:	cmp	r3, #0
   1994c:	blt	19998 <__assert_fail@plt+0x8ba4>
   19950:	bl	19a08 <__assert_fail@plt+0x8c14>
   19954:	ldr	lr, [sp, #4]
   19958:	add	sp, sp, #8
   1995c:	pop	{r2, r3}
   19960:	rsbs	r0, r0, #0
   19964:	sbc	r1, r1, r1, lsl #1
   19968:	rsbs	r2, r2, #0
   1996c:	sbc	r3, r3, r3, lsl #1
   19970:	bx	lr
   19974:	rsbs	r2, r2, #0
   19978:	sbc	r3, r3, r3, lsl #1
   1997c:	bl	19a08 <__assert_fail@plt+0x8c14>
   19980:	ldr	lr, [sp, #4]
   19984:	add	sp, sp, #8
   19988:	pop	{r2, r3}
   1998c:	rsbs	r0, r0, #0
   19990:	sbc	r1, r1, r1, lsl #1
   19994:	bx	lr
   19998:	rsbs	r2, r2, #0
   1999c:	sbc	r3, r3, r3, lsl #1
   199a0:	bl	19a08 <__assert_fail@plt+0x8c14>
   199a4:	ldr	lr, [sp, #4]
   199a8:	add	sp, sp, #8
   199ac:	pop	{r2, r3}
   199b0:	rsbs	r2, r2, #0
   199b4:	sbc	r3, r3, r3, lsl #1
   199b8:	bx	lr
   199bc:	cmp	r3, #0
   199c0:	cmpeq	r2, #0
   199c4:	bne	199dc <__assert_fail@plt+0x8be8>
   199c8:	cmp	r1, #0
   199cc:	cmpeq	r0, #0
   199d0:	mvnne	r1, #0
   199d4:	mvnne	r0, #0
   199d8:	b	199f8 <__assert_fail@plt+0x8c04>
   199dc:	sub	sp, sp, #8
   199e0:	push	{sp, lr}
   199e4:	bl	19a08 <__assert_fail@plt+0x8c14>
   199e8:	ldr	lr, [sp, #4]
   199ec:	add	sp, sp, #8
   199f0:	pop	{r2, r3}
   199f4:	bx	lr
   199f8:	push	{r1, lr}
   199fc:	mov	r0, #8
   19a00:	bl	10b90 <raise@plt>
   19a04:	pop	{r1, pc}
   19a08:	cmp	r1, r3
   19a0c:	push	{r4, r5, r6, r7, r8, r9, lr}
   19a10:	cmpeq	r0, r2
   19a14:	mov	r4, r0
   19a18:	mov	r5, r1
   19a1c:	ldr	r9, [sp, #28]
   19a20:	movcc	r0, #0
   19a24:	movcc	r1, #0
   19a28:	bcc	19b20 <__assert_fail@plt+0x8d2c>
   19a2c:	cmp	r3, #0
   19a30:	clzeq	ip, r2
   19a34:	clzne	ip, r3
   19a38:	addeq	ip, ip, #32
   19a3c:	cmp	r5, #0
   19a40:	clzeq	r1, r4
   19a44:	addeq	r1, r1, #32
   19a48:	clzne	r1, r5
   19a4c:	sub	ip, ip, r1
   19a50:	sub	lr, ip, #32
   19a54:	lsl	r7, r3, ip
   19a58:	rsb	r8, ip, #32
   19a5c:	orr	r7, r7, r2, lsl lr
   19a60:	orr	r7, r7, r2, lsr r8
   19a64:	lsl	r6, r2, ip
   19a68:	cmp	r5, r7
   19a6c:	cmpeq	r4, r6
   19a70:	movcc	r0, #0
   19a74:	movcc	r1, #0
   19a78:	bcc	19a94 <__assert_fail@plt+0x8ca0>
   19a7c:	mov	r3, #1
   19a80:	subs	r4, r4, r6
   19a84:	lsl	r1, r3, lr
   19a88:	lsl	r0, r3, ip
   19a8c:	orr	r1, r1, r3, lsr r8
   19a90:	sbc	r5, r5, r7
   19a94:	cmp	ip, #0
   19a98:	beq	19b20 <__assert_fail@plt+0x8d2c>
   19a9c:	lsrs	r3, r7, #1
   19aa0:	rrx	r2, r6
   19aa4:	mov	r6, ip
   19aa8:	b	19acc <__assert_fail@plt+0x8cd8>
   19aac:	subs	r4, r4, r2
   19ab0:	sbc	r5, r5, r3
   19ab4:	adds	r4, r4, r4
   19ab8:	adc	r5, r5, r5
   19abc:	adds	r4, r4, #1
   19ac0:	adc	r5, r5, #0
   19ac4:	subs	r6, r6, #1
   19ac8:	beq	19ae8 <__assert_fail@plt+0x8cf4>
   19acc:	cmp	r5, r3
   19ad0:	cmpeq	r4, r2
   19ad4:	bcs	19aac <__assert_fail@plt+0x8cb8>
   19ad8:	adds	r4, r4, r4
   19adc:	adc	r5, r5, r5
   19ae0:	subs	r6, r6, #1
   19ae4:	bne	19acc <__assert_fail@plt+0x8cd8>
   19ae8:	lsr	r6, r4, ip
   19aec:	lsr	r7, r5, ip
   19af0:	orr	r6, r6, r5, lsl r8
   19af4:	adds	r2, r0, r4
   19af8:	orr	r6, r6, r5, lsr lr
   19afc:	adc	r3, r1, r5
   19b00:	lsl	r1, r7, ip
   19b04:	orr	r1, r1, r6, lsl lr
   19b08:	lsl	r0, r6, ip
   19b0c:	orr	r1, r1, r6, lsr r8
   19b10:	subs	r0, r2, r0
   19b14:	mov	r4, r6
   19b18:	mov	r5, r7
   19b1c:	sbc	r1, r3, r1
   19b20:	cmp	r9, #0
   19b24:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   19b28:	strd	r4, [r9]
   19b2c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19b30:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19b34:	mov	r7, r0
   19b38:	ldr	r6, [pc, #72]	; 19b88 <__assert_fail@plt+0x8d94>
   19b3c:	ldr	r5, [pc, #72]	; 19b8c <__assert_fail@plt+0x8d98>
   19b40:	add	r6, pc, r6
   19b44:	add	r5, pc, r5
   19b48:	sub	r6, r6, r5
   19b4c:	mov	r8, r1
   19b50:	mov	r9, r2
   19b54:	bl	10b58 <fstatfs64@plt-0x20>
   19b58:	asrs	r6, r6, #2
   19b5c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19b60:	mov	r4, #0
   19b64:	add	r4, r4, #1
   19b68:	ldr	r3, [r5], #4
   19b6c:	mov	r2, r9
   19b70:	mov	r1, r8
   19b74:	mov	r0, r7
   19b78:	blx	r3
   19b7c:	cmp	r6, r4
   19b80:	bne	19b64 <__assert_fail@plt+0x8d70>
   19b84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19b88:	andeq	r1, r1, r8, asr #7
   19b8c:	andeq	r1, r1, r0, asr #7
   19b90:	bx	lr

Disassembly of section .fini:

00019b94 <.fini>:
   19b94:	push	{r3, lr}
   19b98:	pop	{r3, pc}
